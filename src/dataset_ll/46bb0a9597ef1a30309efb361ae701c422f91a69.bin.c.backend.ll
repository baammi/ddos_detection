source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1cbd8.5 = global i32 0
@global_var_1cbe8.6 = global i32* @global_var_1cbd8.5
@global_var_1cd48.12 = global i32 0
@global_var_e390.18 = constant i32 -382906384
@global_var_1cd64.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_12a00.25 = constant i32 -481296384
@global_var_c444.31 = constant i32 -382906384
@global_var_c908.33 = constant i32 -382906384
@global_var_bad4.35 = constant i32 -382906384
@global_var_b388.37 = constant i32 -382906384
@global_var_ac14.39 = constant i32 -382906384
@global_var_a3b4.41 = constant i32 -382906384
@global_var_9154.44 = constant i32 -382906384
@global_var_89d8.46 = constant i32 -382906384
@global_var_9870.48 = constant i32 -382906384
@global_var_1ce00.50 = global i32 0
@global_var_1ce08.62 = global i32 0
@global_var_14644.64 = constant i32 47
@global_var_1cd68.67 = global i32 0
@global_var_1ce04.69 = global i32 0
@global_var_e214.71 = constant i32 -382910352
@global_var_1cbf4.73 = global i32 71508
@global_var_1cbec.75 = global i32 -1
@global_var_f0b5.79 = constant i32 216727563
@global_var_1ce10.82 = local_unnamed_addr global i32 0
@global_var_1ce0f.83 = local_unnamed_addr global i32 0
@global_var_1ce0e.84 = local_unnamed_addr global i32 0
@global_var_1cd6c.86 = global i32 0
@global_var_e08c.88 = constant i32 -442556408
@global_var_1ce0d.92 = local_unnamed_addr global i32 0
@global_var_14648.96 = constant i32 10
@global_var_1cbf0.98 = global i32 -1
@global_var_11da0.102 = constant i32 -382910448
@global_var_11754.103 = constant i32 -382910224
@global_var_1464c.106 = constant i32 16777216
@global_var_1cd74.108 = global i32 0
@global_var_1cd80.110 = global i32 0
@global_var_1cd78.112 = global i32 0
@global_var_1cd7c.114 = global i32 0
@global_var_f228.127 = constant i32 -442695668
@global_var_1ce24.129 = global i32 0
@global_var_1cdb8.131 = global i32 0
@global_var_1cd84.133 = global i32 0
@global_var_1cdb0.135 = global i32 0
@global_var_1ce1c.143 = global i32 0
@global_var_1ce20.145 = global i32 0
@global_var_1cd8b.148 = local_unnamed_addr global i32 0
@global_var_1cd8a.149 = local_unnamed_addr global i32 0
@global_var_1cd9c.151 = global i32 0
@global_var_1cd8d.153 = local_unnamed_addr global i32 0
@global_var_1cd91.154 = local_unnamed_addr global i32 0
@global_var_1cd90.155 = local_unnamed_addr global i32 0
@global_var_1cd9f.156 = local_unnamed_addr global i32 0
@global_var_1cd9d.157 = local_unnamed_addr global i32 0
@global_var_1cd8c.158 = local_unnamed_addr global i32 0
@global_var_1cd9e.159 = local_unnamed_addr global i32 0
@global_var_1cdab.161 = local_unnamed_addr global i32 0
@global_var_1cdaa.162 = local_unnamed_addr global i32 0
@global_var_146cc.164 = constant [5 x i8] c"&;; \00"
@global_var_146d0.166 = constant i32 536542976
@global_var_14654.168 = constant [5 x i8] c"5:?;\00"
@global_var_1465c.170 = constant [9 x i8] c"<!: acam\00"
@global_var_14668.172 = constant [8 x i8] c"0125!8 \00"
@global_var_14670.174 = constant [6 x i8] c"509=:\00"
@global_var_14678.176 = constant [6 x i8] c"\22=.,\22\00"
@global_var_14680.178 = constant i32 423502179
@global_var_14690.180 = constant [6 x i8] c"efg`a\00"
@global_var_14698.182 = constant [5 x i8] c"!'1&\00"
@global_var_146a0.184 = constant i32 943467547
@global_var_146ac.186 = constant i32 322070023
@global_var_146b8.188 = constant [5 x i8] c"efg`\00"
@global_var_146c0.190 = constant i32 606281272
@global_var_1cd94.191 = local_unnamed_addr global i32 0
@global_var_1cd92.193 = local_unnamed_addr global i32 0
@global_var_1cd93.194 = local_unnamed_addr global i32 0
@global_var_1cdac.196 = local_unnamed_addr global i32 0
@global_var_1cdad.197 = local_unnamed_addr global i32 0
@global_var_146c8.203 = constant [3 x i8] c"\0D\0A\00"
@global_var_146da.205 = constant i32 2096127
@global_var_146d1.207 = constant i32 2095871
@global_var_1ce2c.209 = global i32 0
@global_var_1cbfc.212 = global i32 -555811921
@global_var_146e0.217 = constant i32 58965
@global_var_1ce34.218 = local_unnamed_addr global i32 0
@global_var_1ce38.219 = local_unnamed_addr global i32 0
@global_var_1ce39.220 = local_unnamed_addr global i32 0
@global_var_146e4.222 = constant [11 x i8] c"8!$0z78!6T\00"
@global_var_1ce40.223 = local_unnamed_addr global i32 0
@global_var_1ce3c.224 = local_unnamed_addr global i32 0
@global_var_1ce41.225 = local_unnamed_addr global i32 0
@global_var_1ce48.226 = local_unnamed_addr global i32 0
@global_var_1ce44.227 = local_unnamed_addr global i32 0
@global_var_1ce49.228 = local_unnamed_addr global i32 0
@global_var_146f0.230 = constant i32 28654
@global_var_1ce4c.231 = local_unnamed_addr global i32 0
@global_var_1ce50.232 = local_unnamed_addr global i32 0
@global_var_1ce51.233 = local_unnamed_addr global i32 0
@global_var_146f4.235 = constant [37 x i8] c"&;; t'1:$5=t>!' t=:217 10t-;!&t'<= T\00"
@global_var_1ce58.236 = local_unnamed_addr global i32 0
@global_var_1ce54.237 = local_unnamed_addr global i32 0
@global_var_1ce59.238 = local_unnamed_addr global i32 0
@global_var_1471c.240 = constant [7 x i8] c"'<188T\00"
@global_var_1ce60.241 = local_unnamed_addr global i32 0
@global_var_1ce5c.242 = local_unnamed_addr global i32 0
@global_var_1ce61.243 = local_unnamed_addr global i32 0
@global_var_14724.245 = constant [8 x i8] c"1:5681T\00"
@global_var_1ce64.246 = local_unnamed_addr global i32 0
@global_var_1ce68.247 = local_unnamed_addr global i32 0
@global_var_1ce69.248 = local_unnamed_addr global i32 0
@global_var_1472c.250 = constant [8 x i8] c"'-' 19T\00"
@global_var_1ce6c.251 = local_unnamed_addr global i32 0
@global_var_1ce70.252 = local_unnamed_addr global i32 0
@global_var_1ce71.253 = local_unnamed_addr global i32 0
@global_var_14734.255 = constant [4 x i8] c"'<T\00"
@global_var_1ce78.256 = local_unnamed_addr global i32 0
@global_var_1ce74.257 = local_unnamed_addr global i32 0
@global_var_1ce79.258 = local_unnamed_addr global i32 0
@global_var_14738.260 = constant i32 977090171
@global_var_1ce7c.261 = local_unnamed_addr global i32 0
@global_var_1ce80.262 = local_unnamed_addr global i32 0
@global_var_1ce81.263 = local_unnamed_addr global i32 0
@global_var_1474c.265 = constant i32 102440217
@global_var_1ce88.266 = local_unnamed_addr global i32 0
@global_var_1ce84.267 = local_unnamed_addr global i32 0
@global_var_1ce89.268 = local_unnamed_addr global i32 0
@global_var_14768.270 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1ce90.271 = local_unnamed_addr global i32 0
@global_var_1ce8c.272 = local_unnamed_addr global i32 0
@global_var_1ce91.273 = local_unnamed_addr global i32 0
@global_var_14774.275 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1ce94.276 = local_unnamed_addr global i32 0
@global_var_1ce98.277 = local_unnamed_addr global i32 0
@global_var_1ce99.278 = local_unnamed_addr global i32 0
@global_var_14788.280 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1cea0.281 = local_unnamed_addr global i32 0
@global_var_1ce9c.282 = local_unnamed_addr global i32 0
@global_var_1cea1.283 = local_unnamed_addr global i32 0
@global_var_147a0.285 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1cea4.286 = local_unnamed_addr global i32 0
@global_var_1cea8.287 = local_unnamed_addr global i32 0
@global_var_1cea9.288 = local_unnamed_addr global i32 0
@global_var_147a8.290 = constant [6 x i8] c"{1,1T\00"
@global_var_1ceb0.291 = local_unnamed_addr global i32 0
@global_var_1ceac.292 = local_unnamed_addr global i32 0
@global_var_1ceb1.293 = local_unnamed_addr global i32 0
@global_var_147b0.295 = constant [5 x i8] c"{20T\00"
@global_var_1ceb8.296 = local_unnamed_addr global i32 0
@global_var_1ceb4.297 = local_unnamed_addr global i32 0
@global_var_1ceb9.298 = local_unnamed_addr global i32 0
@global_var_147b8.300 = constant [7 x i8] c"{95$'T\00"
@global_var_1cec0.301 = local_unnamed_addr global i32 0
@global_var_1cebc.302 = local_unnamed_addr global i32 0
@global_var_1cec1.303 = local_unnamed_addr global i32 0
@global_var_147c0.305 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1cec4.306 = local_unnamed_addr global i32 0
@global_var_1cec8.307 = local_unnamed_addr global i32 0
@global_var_1cec9.308 = local_unnamed_addr global i32 0
@global_var_147d0.310 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1cf3c.311 = local_unnamed_addr global i32 0
@global_var_1cf40.312 = local_unnamed_addr global i32 0
@global_var_1cf41.313 = local_unnamed_addr global i32 0
@global_var_147dc.315 = constant [8 x i8] c"z5:=91T\00"
@global_var_1cf44.316 = local_unnamed_addr global i32 0
@global_var_1cf48.317 = local_unnamed_addr global i32 0
@global_var_1cf49.318 = local_unnamed_addr global i32 0
@global_var_147e4.320 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1cecc.321 = local_unnamed_addr global i32 0
@global_var_1ced0.322 = local_unnamed_addr global i32 0
@global_var_1ced1.323 = local_unnamed_addr global i32 0
@global_var_147f8.325 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1ced4.326 = local_unnamed_addr global i32 0
@global_var_1ced8.327 = local_unnamed_addr global i32 0
@global_var_1ced9.328 = local_unnamed_addr global i32 0
@global_var_14810.330 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1cedc.331 = local_unnamed_addr global i32 0
@global_var_1cee0.332 = local_unnamed_addr global i32 0
@global_var_1cee1.333 = local_unnamed_addr global i32 0
@global_var_1481c.335 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1cee4.336 = local_unnamed_addr global i32 0
@global_var_1cee8.337 = local_unnamed_addr global i32 0
@global_var_1cee9.338 = local_unnamed_addr global i32 0
@global_var_1482c.340 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1ceec.341 = local_unnamed_addr global i32 0
@global_var_1cef0.342 = local_unnamed_addr global i32 0
@global_var_1cef1.343 = local_unnamed_addr global i32 0
@global_var_14840.345 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_1cf50.346 = local_unnamed_addr global i32 0
@global_var_1cf4c.347 = local_unnamed_addr global i32 0
@global_var_1cf51.348 = local_unnamed_addr global i32 0
@global_var_148a4.350 = constant i32 557516544
@global_var_1cef8.351 = local_unnamed_addr global i32 0
@global_var_1cef4.352 = local_unnamed_addr global i32 0
@global_var_1cef9.353 = local_unnamed_addr global i32 0
@global_var_1484c.355 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1cf00.356 = local_unnamed_addr global i32 0
@global_var_1cefc.357 = local_unnamed_addr global i32 0
@global_var_1cf01.358 = local_unnamed_addr global i32 0
@global_var_14860.360 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1cf08.361 = local_unnamed_addr global i32 0
@global_var_1cf04.362 = local_unnamed_addr global i32 0
@global_var_1cf09.363 = local_unnamed_addr global i32 0
@global_var_1cf0c.364 = local_unnamed_addr global i32 0
@global_var_1cf10.365 = local_unnamed_addr global i32 0
@global_var_1cf11.366 = local_unnamed_addr global i32 0
@global_var_1cf14.367 = local_unnamed_addr global i32 0
@global_var_1cf18.368 = local_unnamed_addr global i32 0
@global_var_1cf19.369 = local_unnamed_addr global i32 0
@global_var_14870.371 = constant [9 x i8] c"$662*7!E\00"
@global_var_1cf1c.372 = local_unnamed_addr global i32 0
@global_var_1cf20.373 = local_unnamed_addr global i32 0
@global_var_1cf21.374 = local_unnamed_addr global i32 0
@global_var_1487c.376 = constant [6 x i8] c";3=:T\00"
@global_var_1cf28.377 = local_unnamed_addr global i32 0
@global_var_1cf24.378 = local_unnamed_addr global i32 0
@global_var_1cf29.379 = local_unnamed_addr global i32 0
@global_var_14884.381 = constant [7 x i8] c"1: 1&T\00"
@global_var_1cf2c.382 = local_unnamed_addr global i32 0
@global_var_1cf30.383 = local_unnamed_addr global i32 0
@global_var_1cf31.384 = local_unnamed_addr global i32 0
@global_var_1488c.386 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1cf39.387 = local_unnamed_addr global i32 0
@global_var_1cf34.388 = local_unnamed_addr global i32 0
@global_var_1cf38.389 = local_unnamed_addr global i32 0
@global_var_133e8.392 = constant i32 -476053504
@global_var_12170.396 = constant i32 -443219956
@global_var_122dc.401 = constant i32 -376111092
@global_var_1cdf4.404 = global i32 0
@global_var_1245c.406 = constant i32 -456978431
@global_var_1cf54.408 = global i32 0
@global_var_1cdbc.410 = global i32 0
@global_var_1ccfc.413 = global i32 256
@global_var_1cc00.414 = global i32* @global_var_1ccfc.413
@global_var_1cde4.417 = global i32 0
@global_var_1cfd4.419 = global i32 0
@global_var_13b9c.420 = constant i32 -382910416
@global_var_123e0.421 = constant i32 -509595648
@global_var_12a80.428 = constant i32 -442564520
@global_var_1cd08.434 = global i32 0
@global_var_1201c.436 = constant i32 -481230848
@global_var_1cdd4.438 = global i32 0
@global_var_137ec.440 = constant i32 -509587456
@global_var_149c8.442 = constant i32 33554944
@global_var_1cd40.443 = global i32* @global_var_149c8.442
@global_var_1cd20.446 = global i32 0
@global_var_1cdd8.450 = local_unnamed_addr global i32 0
@global_var_131a0.452 = constant i32 -352321419
@global_var_1cbcc.456 = global i32 -1
@global_var_1cde8.459 = global i32 0
@global_var_1cdec.461 = local_unnamed_addr global i32 0
@global_var_133d4.462 = constant i32 -390234096
@global_var_148bc.464 = constant [10 x i8] c"/dev/null\00"
@global_var_1cdf0.466 = global i32 0
@global_var_1cddc.471 = local_unnamed_addr global i32 0
@global_var_1cde0.473 = global i32 0
@global_var_123c0.475 = constant i32 -369096946
@global_var_1cd38 = external local_unnamed_addr global i32
@global_var_12374.485 = constant i32 -442564608
@global_var_1369c.487 = constant i32 -335544664
@global_var_137b8.490 = constant i32 -275775369
@global_var_13f30.491 = constant i32 -382910352
@global_var_1cdfc.493 = global i32 0
@global_var_1cfec.496 = global i32 0
@global_var_1cff0.498 = global i32 0
@global_var_1cbd0.501 = global i32 0
@global_var_1cd44.3 = external global i8*
@global_var_1cd60.21 = external global i8*
@global_var_1cd61.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1cbf8.77 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1ce0c.81 = external global i8*
@global_var_1cd70.101 = external global i8*
@global_var_1cdb4.137 = external global i8*
@global_var_1cdb5.138 = local_unnamed_addr global i8 0
@global_var_1cd88.147 = external global i8*
@global_var_1cda8.152 = local_unnamed_addr global i8 0
@global_var_1cda9.160 = local_unnamed_addr global i8 0
@global_var_1cda0.195 = local_unnamed_addr global i8 0
@global_var_1cd98.192 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  %v1_80a4 = call i32 @function_145f4(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1cd44.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1cd44.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1cbe8.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1cbe8.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1cbe8.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1cbe8.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1cd44.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1cbe8.6, { 1, 0 }
  uselistorder i8** @global_var_1cd44.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  %v5_812c = load i32, i32* @r0, align 4
  ret i32 %v5_812c

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 117724 to i32*), align 4
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 117724

bb2:                                              ; preds = %.thread
  ret i32 117724

; uselistorder directives
  uselistorder i32 117724, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_13488(i32 ptrtoint (i32* @global_var_e390.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 83504, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12e50()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_11dcc()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_11dcc()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_131d8(i32 %v0_8284)
  %v0_828c = call i32 @function_11e24()
  %v2_8294 = call i32 @function_11ea0(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_13144(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_13144(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1cd64.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_13144(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_129a8(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_129a8(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_129a8(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_11518(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_12374()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12a00.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_12a00.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_12a00()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 4, 5, 0, 3, 2, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_1249c(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_115c8(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_129a8(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1cd60.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1cd64.23 to i32), i32* @r6, align 4
  store i32 48568, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 48568, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_12af0(i32 %v2_867c, i32 %v1_8688, i32 48568, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1cd61.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1cd61.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_129a8(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_12af0(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1cd61.29 to i8) to i32), i32 ptrtoint (i32* @global_var_c444.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_129a8(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_12af0(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_c908.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_129a8(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_12af0(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_bad4.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_129a8(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1cd64.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_12af0(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_b388.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_129a8(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_12af0(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_129a8(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_12af0(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_129a8(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 39764, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 39764, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_12af0(i32 %v2_8890, i32 %v1_889c, i32 39764, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_129a8(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1cd64.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_12af0(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9154.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_129a8(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_12af0(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_129a8(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1cd64.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_12af0(i32 %v2_8974, i32 %v1_8980, i32 ptrtoint (i32* @global_var_9870.48 to i32), i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1cd60.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* @global_var_1cd64.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1cd60.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_89d8 = load i32, i32* @r4, align 4
  %v15_89d8 = load i32, i32* @r8, align 4
  %v21_89d8 = load i32, i32* @sl, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_89dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_129a8(i32 %v1_89dc, i32 4)
  %v0_89fc = load i32, i32* @r5, align 4
  store i32 %v0_89fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r0.global-to-local, align 4
  %v5_8a10 = inttoptr i32 %v0_89fc to i32*
  %v6_8a10 = call i32 @function_85e0(i32 %v0_8a0c, i32* %v5_8a10, i32 2, i32 0, i32 %v2_89f8)
  %v1_8a1c = urem i32 %v6_8a10, 256
  store i32 %v1_8a1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r4, align 4
  store i32 %v0_8a2c, i32* %r0.global-to-local, align 4
  %v5_8a30 = trunc i32 %v6_8a10 to i8
  %v6_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v7_8a34 = call i32 @function_85e0(i32 %v0_8a2c, i32* %v6_8a34, i32 3, i32 65535, i32 %v6_8a10)
  %v0_8a38 = load i32, i32* @r5, align 4
  store i32 %v0_8a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a34, i32* @r7, align 4
  %v0_8a48 = load i32, i32* @r4, align 4
  store i32 %v0_8a48, i32* %r0.global-to-local, align 4
  %v5_8a4c = inttoptr i32 %v0_8a38 to i32*
  %v6_8a4c = call i32 @function_85e0(i32 %v0_8a48, i32* %v5_8a4c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a54 = urem i32 %v6_8a4c, 256
  store i32 %v1_8a54, i32* %ip.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r5, align 4
  store i32 %v0_8a58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r4, align 4
  store i32 %v0_8a64, i32* %r0.global-to-local, align 4
  %v5_8a68 = trunc i32 %v6_8a4c to i8
  %v6_8a6c = inttoptr i32 %v0_8a58 to i32*
  %v7_8a6c = call i32 @function_85e0(i32 %v0_8a64, i32* %v6_8a6c, i32 5, i32 1, i32 %v6_8a4c)
  %v1_8a78 = urem i32 %v7_8a6c, 256
  store i32 %v1_8a78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r5, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  %v0_8a88 = load i32, i32* @r4, align 4
  store i32 %v0_8a88, i32* %r0.global-to-local, align 4
  %v5_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v6_8a90 = call i32 @function_85e0(i32 %v0_8a88, i32* %v5_8a90, i32 6, i32 65535, i32 %v1_8a78)
  %v0_8a98 = load i32, i32* @r5, align 4
  store i32 %v0_8a98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a90, i32* @sl, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8a98 to i32*
  %v6_8aac = call i32 @function_85e0(i32 %v0_8aa8, i32* %v5_8aac, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8aac, i32* @r8, align 4
  %v0_8ac0 = load i32, i32* @r4, align 4
  store i32 %v0_8ac0, i32* %r0.global-to-local, align 4
  %v5_8ac4 = inttoptr i32 %v0_8ab0 to i32*
  %v6_8ac4 = call i32 @function_85e0(i32 %v0_8ac0, i32* %v5_8ac4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v0_8ad8 = load i32, i32* @r4, align 4
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v5_8adc = inttoptr i32 %v0_8ad4 to i32*
  %v6_8adc = call i32 @function_85e0(i32 %v0_8ad8, i32* %v5_8adc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ae4 = urem i32 %v6_8adc, 256
  store i32 %v1_8ae4, i32* %ip.global-to-local, align 4
  %v0_8ae8 = load i32, i32* @r5, align 4
  store i32 %v0_8ae8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8af4 = load i32, i32* @r4, align 4
  store i32 %v0_8af4, i32* %r0.global-to-local, align 4
  %v5_8afc = inttoptr i32 %v0_8ae8 to i32*
  %v6_8afc = call i32 @function_85e0(i32 %v0_8af4, i32* %v5_8afc, i32 19, i32 0, i32 %v1_8ae4)
  %v0_8b04 = load i32, i32* @r5, align 4
  store i32 %v0_8b04, i32* %r1.global-to-local, align 4
  %v2_8b08 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_8b08, i32* %r3.global-to-local, align 4
  store i32 %v6_8afc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8b14 = load i32, i32* @r4, align 4
  store i32 %v0_8b14, i32* %r0.global-to-local, align 4
  %v5_8b18 = inttoptr i32 %v0_8b04 to i32*
  %v6_8b18 = call i32 @function_85e0(i32 %v0_8b14, i32* %v5_8b18, i32 25, i32 %v2_8b08, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8b2c = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v7_8b30 = icmp eq i32 %v3_8b2c, -1
  store i1 %v7_8b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b30, label %dec_label_pc_9014, label %dec_label_pc_8b3c

dec_label_pc_8b3c:                                ; preds = %dec_label_pc_89d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8b44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8b44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8b58 = call i32 @function_1268c(i32 %v3_8b2c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8b58, i32* %r0.global-to-local, align 4
  %v7_8b5c = icmp eq i32 %v6_8b58, -1
  store i1 %v7_8b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b5c, label %dec_label_pc_900c, label %dec_label_pc_8b64

dec_label_pc_8b64:                                ; preds = %dec_label_pc_8b3c
  %v0_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = mul i32 %v0_8b64, 65536
  store i32 %v3_8b64, i32* %sl.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r8, align 4
  %v3_8b68 = mul i32 %v0_8b68, 65536
  store i32 %v3_8b68, i32* %r8.global-to-local, align 4
  %v0_8b70 = load i32, i32* @r7, align 4
  %v3_8b70 = mul i32 %v0_8b70, 65536
  %v0_8b74 = load i32, i32* @r6, align 4
  %v1_8b74 = urem i32 %v0_8b74, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_8b7c = urem i32 %v0_8b70, 65536
  store i32 %v3_8b7c, i32* %r2.global-to-local, align 4
  %v3_8b80 = urem i32 %v0_8b64, 65536
  store i32 %v3_8b80, i32* %r3.global-to-local, align 4
  %v3_8b84 = urem i32 %v0_8b68, 65536
  store i32 %v3_8b84, i32* %r1.global-to-local, align 4
  %v0_8b88 = load i32, i32* @fp, align 4
  %v2_8b88 = icmp eq i32 %v0_8b88, 0
  store i1 %v2_8b88, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_8b88, 1
  br i1 %tmp88, label %dec_label_pc_9134, label %dec_label_pc_8ba8

dec_label_pc_8ba8:                                ; preds = %dec_label_pc_8b64
  %v3_8bac = mul i32 %v6_8ac4, 65536
  %v0_8b70.not = or i32 %v0_8b70, -65536
  %v1_8bb4 = xor i32 %v0_8b70.not, 65535
  %v1_8bbc = add i32 %v3_8bac, 4325376
  %v1_8bc0 = urem i32 %v0_8b64, 256
  %v3_8bc8 = udiv i32 %v1_8bbc, 256
  %v1_8bcc = add i32 %v3_8bac, 524288
  %v1_8bd4 = add i32 %v3_8bac, 1835008
  %v1_8bd8 = urem i32 %v0_8b68, 256
  %v1_8bdc = and i32 %v3_8bc8, 65280
  store i32 %v1_8bdc, i32* %r0.global-to-local, align 4
  %v3_8be4 = udiv i32 %v1_8bd4, 256
  %tmp89 = mul nsw i32 %v1_8bb4, 256
  %v1_8bfc = and i32 %v3_8be4, 65280
  store i32 %v1_8bfc, i32* %ip.global-to-local, align 4
  %v1_8c00 = and i32 %tmp89, 65280
  store i32 %v1_8c00, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_8bb4, 256
  %v4_8bec = sdiv i32 %v1_8bbc, 16777216
  %v5_8c1c = trunc i32 %tmp91 to i8
  %v3_8c28 = mul nuw nsw i32 %v1_8bc0, 256
  %v3_8c30 = ashr i32 %v1_8bbc, 31
  %v3_8c34 = mul nuw nsw i32 %v1_8bd8, 256
  store i32 %v3_8c34, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_8b64, 256
  %v4_8c38 = urem i32 %tmp92, 256
  %v5_8c38 = or i32 %v4_8c38, %v3_8c28
  store i32 %v5_8c38, i32* @r7, align 4
  %v3_8c3c = udiv i32 %v1_8bcc, 256
  %tmp93 = udiv i32 %v0_8b68, 256
  %v4_8c40 = urem i32 %tmp93, 256
  %v5_8c40 = or i32 %v4_8c40, %v3_8c34
  store i32 %v5_8c40, i32* %sl.global-to-local, align 4
  %v5_8c44 = trunc i32 %v3_8c30 to i8
  %v3_8c4c = sdiv i32 %v3_8b70, 16777216
  %v7_8c4c = sdiv i32 %v1_8bd4, 16777216
  %v1_8c50 = and i32 %v3_8c3c, 65280
  store i32 %v1_8c50, i32* @r6, align 4
  %v3_8c54 = ashr i32 %v3_8b70, 31
  %v3_8c58 = ashr i32 %v1_8bd4, 31
  %v3_8c5c = udiv i32 %v1_8bb4, 65536
  %v4_8c60 = udiv i32 %v1_8bcc, 16777216
  %v5_8c60 = or i32 %v4_8c60, %v1_8c50
  store i32 %v5_8c60, i32* %r8.global-to-local, align 4
  store i32 %v1_8bc0, i32* %r1.global-to-local, align 4
  store i32 %v1_8bd8, i32* %r2.global-to-local, align 4
  %v3_8c7837 = udiv i32 %v1_8c50, 256
  store i32 %v3_8c7837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_8dd8 = icmp eq i32 %v1_8b74, 0
  %sext16 = mul i32 %v0_8b64, 16777216
  %v4_8dec = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_8bcc, 256
  %v4_8e00 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_8b68, 16777216
  %v4_8e08 = sdiv i32 %sext18, 16777216
  %v1_8e10 = trunc i32 %v4_8e00 to i8
  br label %dec_label_pc_8c8c

dec_label_pc_8c8c:                                ; preds = %bb105, %dec_label_pc_8ba8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c98 = call i32 @function_129a8(i32 1510, i32 4)
  store i32 %v2_8c98, i32* %r0.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v3_8ca0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ca0, i32* %r3.global-to-local, align 4
  %v2_8ca4 = load i32, i32* @r4, align 4
  %v5_8ca4 = mul i32 %v2_8ca4, 4
  %v6_8ca4 = add i32 %v5_8ca4, %v2_89f8
  %v7_8ca4 = inttoptr i32 %v6_8ca4 to i32*
  store i32 %v2_8c98, i32* %v7_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ca8 = load i32, i32* %r3.global-to-local, align 4
  %v4_8ca8 = mul i32 %v1_8ca8, 4
  %v5_8ca8 = add i32 %v4_8ca8, %v0_8ca8
  %v6_8ca8 = inttoptr i32 %v5_8ca8 to i32*
  %v7_8ca8 = load i32, i32* %v6_8ca8, align 4
  store i32 %v7_8ca8, i32* %r4.global-to-local, align 4
  %v1_8cac = inttoptr i32 %v7_8ca8 to i8*
  %v2_8cac = load i8, i8* %v1_8cac, align 1
  %tmp = urem i8 %v2_8cac, 16
  %v1_8cb0 = zext i8 %tmp to i32
  %v1_8cb4 = or i32 %v1_8cb0, 64
  store i32 %v1_8cb4, i32* %r2.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v1_8cb4 to i8
  store i8 %v1_8cb8, i8* %v1_8cac, align 1
  %v0_8cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cbc = inttoptr i32 %v0_8cbc to i8*
  %v2_8cbc = load i8, i8* %v1_8cbc, align 1
  %v1_8cc0 = and i8 %v2_8cbc, -16
  %v1_8cc4 = or i8 %v1_8cc0, 5
  store i32 %v1_8a78, i32* %r2.global-to-local, align 4
  store i8 %v1_8cc4, i8* %v1_8cbc, align 1
  %v2_8cd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 1
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v5_8a30, i8* %v4_8cd4, align 1
  store i32 %v6_8a4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_8ce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 8
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v5_8a68, i8* %v4_8ce0, align 1
  %v0_8ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ce4 = load i32, i32* %ip.global-to-local, align 4
  %v9_8ce4 = icmp eq i32 %v0_8ce4, %v1_8ce4
  store i1 %v9_8ce4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8c30, i32* %r3.global-to-local, align 4
  store i32 %v4_8bec, i32* %r2.global-to-local, align 4
  %v2_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf0 = add i32 %v2_8cf0, 3
  %v4_8cf0 = inttoptr i32 %v3_8cf0 to i8*
  store i8 %v5_8c44, i8* %v4_8cf0, align 1
  %v0_8cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cf4 = trunc i32 %v0_8cf4 to i8
  %v2_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf4 = add i32 %v2_8cf4, 2
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v1_8cf4, i8* %v4_8cf4, align 1
  %v0_8cf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cf8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_8c8c
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_8c54 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_8c8c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %v3_8d00 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d00 = add i32 %v3_8d00, 6
  %v5_8d00 = inttoptr i32 %v4_8d00 to i8*
  store i8 64, i8* %v5_8d00, align 1
  %v0_8d08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_8d08.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_8c54.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d08 = add i32 %v2_8d08, 5
  %v4_8d08 = inttoptr i32 %v3_8d08 to i8*
  store i8 %v3_8c54.sink.off0, i8* %v4_8d08, align 1
  store i32 %v3_8c4c, i32* %r1.global-to-local, align 4
  %v0_8d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d10, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8d10, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8d14 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d14 = trunc i32 %v0_8d14 to i8
  %v2_8d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d14 = add i32 %v2_8d14, 9
  %v4_8d14 = inttoptr i32 %v3_8d14 to i8*
  store i8 %v1_8d14, i8* %v4_8d14, align 1
  %v0_8d18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d18, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_8d18 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d18 = trunc i32 %v1_8d18 to i8
  %v3_8d18 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d18 = add i32 %v3_8d18, 7
  %v5_8d18 = inttoptr i32 %v4_8d18 to i8*
  store i8 %v2_8d18, i8* %v5_8d18, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_8d1c = load i32, i32* %stack_var_-40, align 4
  %v5_8d24 = mul i32 %v3_8d1c, 24
  store i32 %v5_8d24, i32* %r3.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v1_8d2c = load i32, i32* %r4.global-to-local, align 4
  %v2_8d2c = add i32 %v1_8d2c, 12
  %v3_8d2c = inttoptr i32 %v2_8d2c to i32*
  store i32 %v6_8b18, i32* %v3_8d2c, align 4
  %v0_8d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d30 = load i32, i32* @sb, align 4
  %v2_8d30 = add i32 %v1_8d30, %v0_8d30
  store i32 %v2_8d30, i32* %r3.global-to-local, align 4
  %v1_8d34 = add i32 %v2_8d30, 16
  %v2_8d34 = inttoptr i32 %v1_8d34 to i32*
  %v3_8d34 = load i32, i32* %v2_8d34, align 4
  store i32 %v3_8d34, i32* %r2.global-to-local, align 4
  %v0_8d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d40, 20
  store i32 %v1_8d40, i32* %r1.global-to-local, align 4
  %v3_8d44 = add i32 %v0_8d40, 22
  %v4_8d44 = inttoptr i32 %v3_8d44 to i8*
  store i8 101, i8* %v4_8d44, align 1
  %v0_8d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d48 = add i32 %v1_8d48, 16
  %v3_8d48 = inttoptr i32 %v2_8d48 to i32*
  store i32 %v0_8d48, i32* %v3_8d48, align 4
  %v0_8d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_8d4c = add i32 %v0_8d4c, 24
  store i32 %v1_8d4c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d54 = add i32 %v0_8d54, -93
  store i32 %v1_8d54, i32* %r3.global-to-local, align 4
  %v2_8d58 = load i32, i32* %r1.global-to-local, align 4
  %v3_8d58 = add i32 %v2_8d58, 3
  %v4_8d58 = inttoptr i32 %v3_8d58 to i8*
  store i8 88, i8* %v4_8d58, align 1
  %v0_8d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i8
  %v2_8d5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8d5c = add i32 %v2_8d5c, 12
  %v4_8d5c = inttoptr i32 %v3_8d5c to i8*
  store i8 %v1_8d5c, i8* %v4_8d5c, align 1
  %v0_8d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i8
  %v2_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v3_8d60 = add i32 %v2_8d60, 13
  %v4_8d60 = inttoptr i32 %v3_8d60 to i8*
  store i8 %v1_8d60, i8* %v4_8d60, align 1
  %v0_8d64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d64 = add i32 %v0_8d64, 38
  %v2_8d64 = inttoptr i32 %v1_8d64 to i8*
  %v3_8d64 = load i8, i8* %v2_8d64, align 1
  %tmp116 = urem i8 %v3_8d64, 16
  %v1_8d68 = zext i8 %tmp116 to i32
  %v1_8d6c = or i32 %v1_8d68, 64
  store i32 %v1_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = trunc i32 %v1_8d6c to i8
  store i8 %v1_8d70, i8* %v2_8d64, align 1
  %v0_8d74 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d74 = add i32 %v0_8d74, 38
  %v2_8d74 = inttoptr i32 %v1_8d74 to i8*
  %v3_8d74 = load i8, i8* %v2_8d74, align 1
  %v1_8d78 = and i8 %v3_8d74, -16
  %v1_8d7c = or i8 %v1_8d78, 5
  store i8 %v1_8d7c, i8* %v2_8d74, align 1
  %v0_8d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d88 = add i32 %v0_8d88, 38
  store i32 %v1_8d88, i32* @r5, align 4
  %v3_8d8c = add i32 %v0_8d88, 39
  %v4_8d8c = inttoptr i32 %v3_8d8c to i8*
  store i8 %v5_8a30, i8* %v4_8d8c, align 1
  store i32 %v7_8c4c, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_8c58, i32* %r2.global-to-local, align 4
  %v2_8d9c = load i32, i32* @r5, align 4
  %v3_8d9c = add i32 %v2_8d9c, 4
  %v4_8d9c = inttoptr i32 %v3_8d9c to i8*
  store i8 %v5_8c1c, i8* %v4_8d9c, align 1
  %v0_8da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8da0 = trunc i32 %v0_8da0 to i8
  %v2_8da0 = load i32, i32* @r5, align 4
  %v3_8da0 = add i32 %v2_8da0, 2
  %v4_8da0 = inttoptr i32 %v3_8da0 to i8*
  store i8 %v1_8da0, i8* %v4_8da0, align 1
  %v0_8da4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8da4, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_8c5c, i32* %r1.global-to-local, align 4
  %v0_8dac = load i32, i32* %r2.global-to-local, align 4
  %v1_8dac = trunc i32 %v0_8dac to i8
  %v2_8dac = load i32, i32* @r5, align 4
  %v3_8dac = add i32 %v2_8dac, 3
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 %v1_8dac, i8* %v4_8dac, align 1
  store i32 %v6_8a4c, i32* %r2.global-to-local, align 4
  %v0_8db4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8db4, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_8db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_8db4 = trunc i32 %v1_8db4 to i8
  %v3_8db4 = load i32, i32* @r5, align 4
  %v4_8db4 = add i32 %v3_8db4, 6
  %v5_8db4 = inttoptr i32 %v4_8db4 to i8*
  store i8 %v2_8db4, i8* %v5_8db4, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8dbc = load i32, i32* %r1.global-to-local, align 4
  %v1_8dbc = trunc i32 %v0_8dbc to i8
  %v2_8dbc = load i32, i32* @r5, align 4
  %v3_8dbc = add i32 %v2_8dbc, 5
  %v4_8dbc = inttoptr i32 %v3_8dbc to i8*
  store i8 %v1_8dbc, i8* %v4_8dbc, align 1
  %v0_8dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8dc0 = trunc i32 %v0_8dc0 to i8
  %v2_8dc0 = load i32, i32* @r5, align 4
  %v3_8dc0 = add i32 %v2_8dc0, 8
  %v4_8dc0 = inttoptr i32 %v3_8dc0 to i8*
  store i8 %v1_8dc0, i8* %v4_8dc0, align 1
  %v0_8dc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8dc4, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_8dc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_8dc4 = trunc i32 %v1_8dc4 to i8
  %v3_8dc4 = load i32, i32* @r5, align 4
  %v4_8dc4 = add i32 %v3_8dc4, 7
  %v5_8dc4 = inttoptr i32 %v4_8dc4 to i8*
  store i8 %v2_8dc4, i8* %v5_8dc4, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8dc8 = trunc i32 %v0_8dc8 to i8
  %v2_8dc8 = load i32, i32* @r5, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 9
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i8*
  store i8 %v1_8dc8, i8* %v4_8dc8, align 1
  %v0_8dcc = call i32 @function_eb48()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v1_8b74, i32* %r1.global-to-local, align 4
  store i1 %v2_8dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ddc = sub i32 1023, %v0_8dcc
  store i32 %v1_8ddc, i32* %r3.global-to-local, align 4
  br i1 %v2_8dd8, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_8de4 = load i32, i32* @r5, align 4
  %v3_8de4 = add i32 %v2_8de4, 16
  %v4_8de4 = inttoptr i32 %v3_8de4 to i32*
  store i32 %v1_8ddc, i32* %v4_8de4, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_8de0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8de0 = add i32 %v1_8de0, 16
  %v3_8de0 = inttoptr i32 %v2_8de0 to i32*
  %v4_8de0 = load i32, i32* %v3_8de0, align 4
  store i32 %v4_8de0, i32* %r3.global-to-local, align 4
  %v2_8de8 = load i32, i32* @r5, align 4
  %v3_8de8 = add i32 %v2_8de8, 16
  %v4_8de8 = inttoptr i32 %v3_8de8 to i32*
  store i32 %v4_8de0, i32* %v4_8de8, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_8dec, i32* %r3.global-to-local, align 4
  %v0_8df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8df0 = add i32 %v0_8df0, 58
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = load i32, i32* @r5, align 4
  %v2_8df4 = add i32 %v1_8df4, 12
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v0_8dcc, i32* %v3_8df4, align 4
  %v0_8df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8df8 = trunc i32 %v0_8df8 to i8
  %v2_8df8 = load i32, i32* @r6, align 4
  %v3_8df8 = add i32 %v2_8df8, 1
  %v4_8df8 = inttoptr i32 %v3_8df8 to i8*
  store i8 %v1_8df8, i8* %v4_8df8, align 1
  %v3_8dfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8dfc, i32* %r3.global-to-local, align 4
  store i32 %v4_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = add i32 %v3_8dfc, 1
  store i32 %v1_8e04, i32* @r4, align 4
  store i32 %v4_8e08, i32* %r1.global-to-local, align 4
  %v1_8e0c = load i32, i32* @fp, align 4
  %v9_8e0c = icmp eq i32 %v1_8e04, %v1_8e0c
  store i1 %v9_8e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_8e10 = load i32, i32* @r6, align 4
  %v3_8e10 = add i32 %v2_8e10, 5
  %v4_8e10 = inttoptr i32 %v3_8e10 to i8*
  store i8 %v1_8e10, i8* %v4_8e10, align 1
  %v0_8e14 = load i32, i32* @r7, align 4
  %v1_8e14 = trunc i32 %v0_8e14 to i8
  %v2_8e14 = load i32, i32* @r6, align 4
  %v3_8e14 = inttoptr i32 %v2_8e14 to i8*
  store i8 %v1_8e14, i8* %v3_8e14, align 1
  %v0_8e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_8e18 = trunc i32 %v0_8e18 to i8
  %v2_8e18 = load i32, i32* @r6, align 4
  %v3_8e18 = add i32 %v2_8e18, 2
  %v4_8e18 = inttoptr i32 %v3_8e18 to i8*
  store i8 %v1_8e18, i8* %v4_8e18, align 1
  %v0_8e1c = load i32, i32* %r1.global-to-local, align 4
  %v1_8e1c = trunc i32 %v0_8e1c to i8
  %v2_8e1c = load i32, i32* @r6, align 4
  %v3_8e1c = add i32 %v2_8e1c, 3
  %v4_8e1c = inttoptr i32 %v3_8e1c to i8*
  store i8 %v1_8e1c, i8* %v4_8e1c, align 1
  %v0_8e20 = load i32, i32* %r8.global-to-local, align 4
  %v1_8e20 = trunc i32 %v0_8e20 to i8
  %v2_8e20 = load i32, i32* @r6, align 4
  %v3_8e20 = add i32 %v2_8e20, 4
  %v4_8e20 = inttoptr i32 %v3_8e20 to i8*
  store i8 %v1_8e20, i8* %v4_8e20, align 1
  %v0_8e24 = load i32, i32* @r4, align 4
  store i32 %v0_8e24, i32* %stack_var_-40, align 4
  %v5_8e28 = icmp slt i32 %v1_8e04, %v1_8e0c
  br i1 %v5_8e28, label %dec_label_pc_8c8c, label %dec_label_pc_8e2c

dec_label_pc_8e2c:                                ; preds = %bb105
  %v1_8e34 = add i32 %v6_8ac4, 8
  store i32 %v1_8e34, i32* %r2.global-to-local, align 4
  %v1_8e38 = add i32 %v6_8ac4, 66
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e44.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_8e44.preheader

dec_label_pc_8e44.preheader:                      ; preds = %dec_label_pc_8e2c, %dec_label_pc_9134
  %v0_8e44.pre = phi i32 [ %v0_8e44.pre.pre, %dec_label_pc_8e2c ], [ %v0_8b88, %dec_label_pc_9134 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_8e38, %dec_label_pc_8e2c ], [ %v1_9140, %dec_label_pc_9134 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_8e34, %dec_label_pc_8e2c ], [ %v1_913c, %dec_label_pc_9134 ]
  %v3_9094 = icmp eq i32 %v3_8b7c, 65535
  %v2_9104 = icmp eq i32 %v1_8b74, 0
  %v2_8ee8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8f00 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8f1c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8f30 = icmp eq i32 %v1_8ae4, 0
  %v2_8e8c = icmp eq i32 %v6_8b18, -1
  %v7_8e8c = icmp eq i32 %v6_8b18, -1
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e44.preheader
  %v0_8e44 = phi i32 [ %v0_8e44.pre, %dec_label_pc_8e44.preheader ], [ %v1_8ffc, %dec_label_pc_8f38 ]
  %v2_8e44 = icmp eq i32 %v0_8e44, 0
  store i1 %v2_8e44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_8e44, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e4c, %dec_label_pc_8e44
  br i1 %tmp106, label %dec_label_pc_8e4c, label %dec_label_pc_8e50

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e4c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e50
  %v1_8e70 = phi i32 [ %v1_8ff8, %dec_label_pc_8f38 ], [ 0, %dec_label_pc_8e50 ]
  %v5_8e60 = mul i32 %v1_8e70, 24
  %v1_8e64 = load i32, i32* @sb, align 4
  %v2_8e64 = add i32 %v1_8e64, %v5_8e60
  store i32 %v2_8e64, i32* %r3.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v1_8e6c = add i32 %v2_8e64, 20
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  %v4_8e70 = mul i32 %v1_8e70, 4
  %v5_8e70 = add i32 %v4_8e70, %v2_89f8
  %v6_8e70 = inttoptr i32 %v5_8e70 to i32*
  %v7_8e70 = load i32, i32* %v6_8e70, align 4
  store i32 %v7_8e70, i32* @r5, align 4
  %v7_8e74 = icmp eq i8 %v3_8e6c, 31
  store i1 %v7_8e74, i1* %cpsr_z.global-to-local, align 1
  %v1_8e78 = add i32 %v7_8e70, 24
  store i32 %v1_8e78, i32* @r8, align 4
  %v1_8e7c = add i32 %v7_8e70, 38
  store i32 %v1_8e7c, i32* @r6, align 4
  %v1_8e80 = add i32 %v7_8e70, 58
  store i32 %v1_8e80, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_8e6c, 32
  br i1 %tmp117, label %dec_label_pc_901c, label %dec_label_pc_8e88

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e5c
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge, %dec_label_pc_8e94
  %v1_8eac = phi i32 [ %v1_8eac.pre, %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge ], [ 65535, %dec_label_pc_8e94 ]
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v9_8eac = icmp eq i32 %v3_8b80, %v1_8eac
  store i1 %v9_8eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eac, label %dec_label_pc_90d8, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge, %dec_label_pc_8ea8
  %v1_8eb8 = phi i32 [ %v1_8eb8.pre, %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge ], [ %v1_8eac, %dec_label_pc_8ea8 ]
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v9_8eb8 = icmp eq i32 %v3_8b84, %v1_8eb8
  store i1 %v9_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eb8, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %dec_label_pc_9118, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_8ec0
  %v1_8ec8 = load i32, i32* @r5, align 4
  %v2_8ec8 = add i32 %v1_8ec8, 16
  %v3_8ec8 = inttoptr i32 %v2_8ec8 to i32*
  %v4_8ec8 = load i32, i32* %v3_8ec8, align 4
  store i32 %v4_8ec8, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r6, align 4
  %v3_8ecc = add i32 %v2_8ecc, 16
  %v4_8ecc = inttoptr i32 %v3_8ecc to i32*
  store i32 %v4_8ec8, i32* %v4_8ecc, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %bb109, %.thread23, %dec_label_pc_9118
  %v0_8ed4 = call i32 @function_eb48()
  store i32 %v0_8ed4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ed4, i32* %stack_var_-44, align 4
  %v0_8edc = call i32 @function_eb48()
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  store i32 %v0_8edc, i32* %stack_var_-48, align 4
  %v0_8ee4 = call i32 @function_eb48()
  store i32 %v2_8ee8, i32* %r1.global-to-local, align 4
  store i32 %v0_8ee4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r8, align 4
  store i32 %v0_8ef4, i32* %r0.global-to-local, align 4
  %v3_8ef8 = call i32 @function_11518(i32 %v0_8ef4, i32 %v2_8ee8, i32 4)
  %v0_8efc = load i32, i32* @r8, align 4
  %v1_8efc = add i32 %v0_8efc, 6
  store i32 %v1_8efc, i32* %r0.global-to-local, align 4
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8f08 = call i32 @function_11518(i32 %v1_8efc, i32 %v2_8f00, i32 4)
  %v0_8f0c = load i32, i32* @r8, align 4
  %v1_8f0c = add i32 %v0_8f0c, 4
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f18 = call i32 @function_11518(i32 %v1_8f0c, i32 %v2_8f10, i32 2)
  store i32 %v2_8f1c, i32* %r1.global-to-local, align 4
  %v0_8f20 = load i32, i32* @r8, align 4
  %v1_8f20 = add i32 %v0_8f20, 10
  store i32 %v1_8f20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f28 = call i32 @function_11518(i32 %v1_8f20, i32 %v2_8f1c, i32 2)
  store i32 %v3_8f28, i32* %r0.global-to-local, align 4
  store i32 %v1_8ae4, i32* %r1.global-to-local, align 4
  store i1 %v2_8f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f30, label %dec_label_pc_8f38, label %dec_label_pc_9124

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8ed4, %dec_label_pc_9124
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @sl, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v2_8f3c = load i32, i32* @r5, align 4
  %v3_8f3c = add i32 %v2_8f3c, 10
  %v4_8f3c = inttoptr i32 %v3_8f3c to i8*
  store i8 %v1_8f3c, i8* %v4_8f3c, align 1
  %v0_8f40 = load i32, i32* @sl, align 4
  %v1_8f40 = trunc i32 %v0_8f40 to i8
  %v2_8f40 = load i32, i32* @r5, align 4
  %v3_8f40 = add i32 %v2_8f40, 11
  %v4_8f40 = inttoptr i32 %v3_8f40 to i8*
  store i8 %v1_8f40, i8* %v4_8f40, align 1
  %v0_8f44 = load i32, i32* @r5, align 4
  store i32 %v0_8f44, i32* @r0, align 4
  %v2_8f48 = call i32 @function_d0b8(i32 %v0_8f44, i32 20)
  %v3_8f48 = trunc i32 %v2_8f48 to i8
  %v4_8f4c = sdiv i32 %v2_8f48, 256
  store i32 %v4_8f4c, i32* %r3.global-to-local, align 4
  %v1_8f50 = trunc i32 %v4_8f4c to i8
  %v2_8f50 = load i32, i32* @r5, align 4
  %v3_8f50 = add i32 %v2_8f50, 11
  %v4_8f50 = inttoptr i32 %v3_8f50 to i8*
  store i8 %v1_8f50, i8* %v4_8f50, align 1
  %v3_8f54 = load i32, i32* @r5, align 4
  %v4_8f54 = add i32 %v3_8f54, 10
  %v5_8f54 = inttoptr i32 %v4_8f54 to i8*
  store i8 %v3_8f48, i8* %v5_8f54, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @sl, align 4
  %v1_8f5c = trunc i32 %v0_8f5c to i8
  %v2_8f5c = load i32, i32* @r6, align 4
  %v3_8f5c = add i32 %v2_8f5c, 10
  %v4_8f5c = inttoptr i32 %v3_8f5c to i8*
  store i8 %v1_8f5c, i8* %v4_8f5c, align 1
  %v0_8f60 = load i32, i32* @sl, align 4
  %v1_8f60 = trunc i32 %v0_8f60 to i8
  %v2_8f60 = load i32, i32* @r6, align 4
  %v3_8f60 = add i32 %v2_8f60, 11
  %v4_8f60 = inttoptr i32 %v3_8f60 to i8*
  store i8 %v1_8f60, i8* %v4_8f60, align 1
  %v0_8f64 = load i32, i32* @r6, align 4
  store i32 %v0_8f64, i32* @r0, align 4
  %v2_8f68 = call i32 @function_d0b8(i32 %v0_8f64, i32 20)
  %v3_8f68 = trunc i32 %v2_8f68 to i8
  store i32 %v2_8f68, i32* %r0.global-to-local, align 4
  %v4_8f6c = sdiv i32 %v2_8f68, 256
  store i32 %v4_8f6c, i32* %r3.global-to-local, align 4
  %v3_8f70 = load i32, i32* @r6, align 4
  %v4_8f70 = add i32 %v3_8f70, 10
  %v5_8f70 = inttoptr i32 %v4_8f70 to i8*
  store i8 %v3_8f68, i8* %v5_8f70, align 1
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i8
  %v2_8f74 = load i32, i32* @r6, align 4
  %v3_8f74 = add i32 %v2_8f74, 11
  %v4_8f74 = inttoptr i32 %v3_8f74 to i8*
  store i8 %v1_8f74, i8* %v4_8f74, align 1
  %v0_8f78 = load i32, i32* @r7, align 4
  %v1_8f78 = add i32 %v0_8f78, 4
  %v2_8f78 = inttoptr i32 %v1_8f78 to i8*
  %v3_8f78 = load i8, i8* %v2_8f78, align 1
  %v4_8f78 = zext i8 %v3_8f78 to i32
  store i32 %v4_8f78, i32* %r3.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f78, 5
  %v2_8f7c = inttoptr i32 %v1_8f7c to i8*
  %v3_8f7c = load i8, i8* %v2_8f7c, align 1
  %v4_8f7c = zext i8 %v3_8f7c to i32
  store i32 %v0_8f78, i32* @r1, align 4
  %v4_8f84 = mul nuw nsw i32 %v4_8f7c, 256
  %v5_8f84 = or i32 %v4_8f84, %v4_8f78
  store i32 %v5_8f84, i32* %r2.global-to-local, align 4
  %v0_8f88 = load i32, i32* @sl, align 4
  %v1_8f88 = trunc i32 %v0_8f88 to i8
  %v3_8f88 = add i32 %v0_8f78, 6
  %v4_8f88 = inttoptr i32 %v3_8f88 to i8*
  store i8 %v1_8f88, i8* %v4_8f88, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @sl, align 4
  %v1_8f90 = trunc i32 %v0_8f90 to i8
  %v2_8f90 = load i32, i32* @r7, align 4
  %v3_8f90 = add i32 %v2_8f90, 7
  %v4_8f90 = inttoptr i32 %v3_8f90 to i8*
  store i8 %v1_8f90, i8* %v4_8f90, align 1
  %v0_8f94 = load i32, i32* @r6, align 4
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  %v4_8f98 = call i32 @function_d114(i32 %v0_8f94, i32 %v0_8f78, i32 %v5_8f84, i32 %stack_var_-156.0.ph)
  %v5_8f98 = trunc i32 %v4_8f98 to i8
  store i32 %v4_8f98, i32* %r0.global-to-local, align 4
  %v3_8f9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8f9c, i32* %r3.global-to-local, align 4
  %v3_8fa0 = mul i32 %v3_8f9c, 32
  store i32 %v3_8fa0, i32* %r2.global-to-local, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  %v1_8fa4 = add i32 %v0_8fa4, 16
  %v2_8fa4 = inttoptr i32 %v1_8fa4 to i32*
  %v3_8fa4 = load i32, i32* %v2_8fa4, align 4
  store i32 %v3_8fa4, i32* %r1.global-to-local, align 4
  %v5_8fa8 = mul i32 %v3_8f9c, 24
  store i32 %v5_8fa8, i32* %r2.global-to-local, align 4
  %v4_8fac42 = udiv i32 %v4_8f98, 256
  %v1_8fb0 = trunc i32 %v4_8fac42 to i8
  %v2_8fb0 = load i32, i32* @r7, align 4
  %v3_8fb0 = add i32 %v2_8fb0, 7
  %v4_8fb0 = inttoptr i32 %v3_8fb0 to i8*
  store i8 %v1_8fb0, i8* %v4_8fb0, align 1
  %v0_8fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @sb, align 4
  %v2_8fb4 = add i32 %v1_8fb4, %v0_8fb4
  store i32 %v2_8fb4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8fbc = load i32, i32* @r7, align 4
  %v4_8fbc = add i32 %v3_8fbc, 6
  %v5_8fbc = inttoptr i32 %v4_8fbc to i8*
  store i8 %v5_8f98, i8* %v5_8fbc, align 1
  %v0_8fc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fc0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8fc0 = add i32 %v1_8fc0, 4
  %v3_8fc0 = inttoptr i32 %v2_8fc0 to i32*
  store i32 %v0_8fc0, i32* %v3_8fc0, align 4
  %v0_8fc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fc4 = trunc i32 %v0_8fc4 to i8
  %v2_8fc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8fc4 = load i32, i32* @sb, align 4
  %v4_8fc4 = add i32 %v3_8fc4, %v2_8fc4
  %v5_8fc4 = inttoptr i32 %v4_8fc4 to i8*
  store i8 %v1_8fc4, i8* %v5_8fc4, align 1
  %v0_8fc8 = load i32, i32* @sl, align 4
  %v1_8fc8 = trunc i32 %v0_8fc8 to i8
  %v2_8fc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 2
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* @sl, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* %lr.global-to-local, align 4
  %v3_8fcc = add i32 %v2_8fcc, 1
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* @sl, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 3
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r5, align 4
  store i32 %v0_8fdc, i32* %r1.global-to-local, align 4
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_8fe8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ff0 = inttoptr i32 %v0_8fdc to i32*
  %v7_8ff0 = call i32 @function_12658(i32 %v3_8b2c, i32* %v6_8ff0, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_8fe8, i32 16)
  %v3_8ff4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ff4, i32* %r3.global-to-local, align 4
  %v1_8ff8 = add i32 %v3_8ff4, 1
  store i32 %v1_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = load i32, i32* @fp, align 4
  %v9_8ffc = icmp eq i32 %v1_8ff8, %v1_8ffc
  store i1 %v9_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ff8, i32* %stack_var_-40, align 4
  %v6_9004 = icmp slt i32 %v1_8ff8, %v1_8ffc
  br i1 %v6_9004, label %dec_label_pc_8e5c, label %dec_label_pc_8e44

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b3c
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @function_11da0(i32 %v3_8b2c)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_89d8, %dec_label_pc_900c
  %v29_9018 = phi i32 [ %v3_8b2c, %dec_label_pc_89d8 ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89d8, i32* %r4.global-to-local, align 4
  store i32 %v15_89d8, i32* %r8.global-to-local, align 4
  store i32 %v21_89d8, i32* %sl.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %dec_label_pc_8e5c
  %v1_901c = add i32 %v2_8e64, 16
  %v2_901c = inttoptr i32 %v1_901c to i32*
  %v3_901c = load i32, i32* %v2_901c, align 4
  store i32 %v3_901c, i32* %r4.global-to-local, align 4
  %v0_9020 = call i32 @function_eb48()
  store i32 %v0_9020, i32* %r0.global-to-local, align 4
  %v3_9024 = load i32, i32* %stack_var_-40, align 4
  %v5_902c = mul i32 %v3_9024, 24
  %v0_9030 = load i32, i32* %r4.global-to-local, align 4
  %v1_9034 = load i32, i32* @sb, align 4
  %v2_9034 = add i32 %v1_9034, %v5_902c
  store i32 %v2_9034, i32* %r1.global-to-local, align 4
  %v1_9038 = and i32 %v0_9030, 65280
  store i32 %v1_9038, i32* %r3.global-to-local, align 4
  %v1_9030 = udiv i32 %v0_9030, 256
  %v3_903c = and i32 %v1_9030, 65280
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v3_9040 = mul i32 %v0_9030, 16777216
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v1_9044 = add i32 %v2_9034, 20
  %v2_9044 = inttoptr i32 %v1_9044 to i8*
  %v3_9044 = load i8, i8* %v2_9044, align 1
  %v4_9044 = zext i8 %v3_9044 to i32
  store i32 %v4_9044, i32* %lr.global-to-local, align 4
  %v4_9048 = mul nuw nsw i32 %v1_9038, 256
  %v5_9048 = or i32 %v4_9048, %v3_9040
  store i32 %v5_9048, i32* %ip.global-to-local, align 4
  %v2_9050 = call i32 @llvm.bswap.i32(i32 %v0_9030)
  %v7_9054 = lshr i32 %v0_9020, %v4_9044
  %v8_9054 = add i32 %v7_9054, %v2_9050
  %v3_9060 = mul i32 %v8_9054, 16777216
  %v1_9064 = and i32 %v8_9054, 65280
  store i32 %v1_9064, i32* %r0.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v4_9070 = mul nuw nsw i32 %v1_9064, 256
  %v5_9070 = or i32 %v4_9070, %v3_9060
  store i32 %v5_9070, i32* %r1.global-to-local, align 4
  %v2_9074 = call i32 @llvm.bswap.i32(i32 %v8_9054)
  store i32 %v2_9074, i32* %r3.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = load i32, i32* @r5, align 4
  %v2_907c = add i32 %v1_907c, 16
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v2_9074, i32* %v3_907c, align 4
  br i1 %v2_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_9084:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  %v0_9084 = call i32 @function_eb48()
  store i32 %v0_9084, i32* %r0.global-to-local, align 4
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  %v1_9098 = load i32, i32* @r5, align 4
  %v2_9098 = add i32 %v1_9098, 12
  %v3_9098 = inttoptr i32 %v2_9098 to i32*
  store i32 %v0_9084, i32* %v3_9098, align 4
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge

dec_label_pc_9084.dec_label_pc_8ea8_crit_edge:    ; preds = %dec_label_pc_9084
  %v1_8eac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8ea8

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9084, %dec_label_pc_8e94
  %v0_90a0 = call i32 @function_eb48()
  %v3_90a8 = urem i32 %v0_90a0, 65536
  store i32 %v3_90a8, i32* %r0.global-to-local, align 4
  %v1_90b0 = sub nsw i32 999, %v3_90a8
  store i32 %v1_90b0, i32* %r2.global-to-local, align 4
  %v3_90b4 = sdiv i32 %v1_90b0, 256
  store i32 %v3_90b4, i32* %r1.global-to-local, align 4
  %v3_90b839 = udiv i32 %v3_90a8, 256
  store i32 %v3_90b839, i32* %r3.global-to-local, align 4
  %v1_90bc = trunc i32 %v3_90b839 to i8
  %v2_90bc = load i32, i32* @r5, align 4
  %v3_90bc = add i32 %v2_90bc, 5
  %v4_90bc = inttoptr i32 %v3_90bc to i8*
  store i8 %v1_90bc, i8* %v4_90bc, align 1
  %v0_90c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_90c0 = trunc i32 %v0_90c0 to i8
  %v2_90c0 = load i32, i32* @r5, align 4
  %v3_90c0 = add i32 %v2_90c0, 4
  %v4_90c0 = inttoptr i32 %v3_90c0 to i8*
  store i8 %v1_90c0, i8* %v4_90c0, align 1
  %v0_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* @r6, align 4
  %v3_90c4 = add i32 %v2_90c4, 5
  %v4_90c4 = inttoptr i32 %v3_90c4 to i8*
  store i8 %v1_90c4, i8* %v4_90c4, align 1
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v1_90cc = load i32, i32* @r4, align 4
  %v9_90cc = icmp eq i32 %v3_8b80, %v1_90cc
  store i1 %v9_90cc, i1* %cpsr_z.global-to-local, align 1
  %v0_90d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90d0 = trunc i32 %v0_90d0 to i8
  %v2_90d0 = load i32, i32* @r6, align 4
  %v3_90d0 = add i32 %v2_90d0, 4
  %v4_90d0 = inttoptr i32 %v3_90d0 to i8*
  store i8 %v1_90d0, i8* %v4_90d0, align 1
  %v0_90d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d4, label %dec_label_pc_90d8, label %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge

dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge:    ; preds = %dec_label_pc_90a0
  %v1_8eb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8eb4

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90a0, %dec_label_pc_8ea8
  %v0_90d8 = call i32 @function_eb48()
  %v1_90d8 = trunc i32 %v0_90d8 to i8
  store i32 %v0_90d8, i32* %r0.global-to-local, align 4
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v4_90e0 = sdiv i32 %v0_90d8, 256
  store i32 %v4_90e0, i32* %r3.global-to-local, align 4
  %v1_90e4 = load i32, i32* @r4, align 4
  %v9_90e4 = icmp eq i32 %v3_8b84, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = load i32, i32* @r5, align 4
  %v4_90e8 = add i32 %v3_90e8, 58
  %v5_90e8 = inttoptr i32 %v4_90e8 to i8*
  store i8 %v1_90d8, i8* %v5_90e8, align 1
  %v0_90ec = load i32, i32* %r3.global-to-local, align 4
  %v1_90ec = trunc i32 %v0_90ec to i8
  %v2_90ec = load i32, i32* @r7, align 4
  %v3_90ec = add i32 %v2_90ec, 1
  %v4_90ec = inttoptr i32 %v3_90ec to i8*
  store i8 %v1_90ec, i8* %v4_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  %v0_90f4 = call i32 @function_eb48()
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  %v4_90f843 = udiv i32 %v0_90f4, 256
  %v1_90fc = trunc i32 %v4_90f843 to i8
  %v2_90fc = load i32, i32* @r7, align 4
  %v3_90fc = add i32 %v2_90fc, 3
  %v4_90fc = inttoptr i32 %v3_90fc to i8*
  store i8 %v1_90fc, i8* %v4_90fc, align 1
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_90f4
  %v1_9108 = load i32, i32* @r5, align 4
  %v2_9108 = add i32 %v1_9108, 16
  %v3_9108 = inttoptr i32 %v2_9108 to i32*
  %v4_9108 = load i32, i32* %v3_9108, align 4
  store i32 %v4_9108, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_90f4, %bb107
  %v3_910c = load i32, i32* @r7, align 4
  %v4_910c = add i32 %v3_910c, 2
  %v5_910c = inttoptr i32 %v4_910c to i8*
  store i8 %v1_90f4, i8* %v5_910c, align 1
  %v0_9110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9110, label %dec_label_pc_9118, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9110 = load i32, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r6, align 4
  %v3_9110 = add i32 %v2_9110, 16
  %v4_9110 = inttoptr i32 %v3_9110 to i32*
  store i32 %v1_9110, i32* %v4_9110, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9118:                                ; preds = %dec_label_pc_8ec0, %bb108
  %v0_9118 = call i32 @function_eb48()
  store i32 %v0_9118, i32* %r0.global-to-local, align 4
  %v1_911c = load i32, i32* @r6, align 4
  %v2_911c = add i32 %v1_911c, 16
  %v3_911c = inttoptr i32 %v2_911c to i32*
  store i32 %v0_9118, i32* %v3_911c, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9124:                                ; preds = %dec_label_pc_8ed4
  %v0_9124 = load i32, i32* @r7, align 4
  %v1_9124 = add i32 %v0_9124, 8
  store i32 %v1_9124, i32* %r0.global-to-local, align 4
  store i32 %v6_8ac4, i32* @r1, align 4
  %v1_912c = inttoptr i32 %v1_9124 to i8*
  %v2_912c = call i32 @function_ecc8(i8* %v1_912c)
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f38

dec_label_pc_9134:                                ; preds = %dec_label_pc_8b64
  %v1_913c = add i32 %v6_8ac4, 8
  store i32 %v1_913c, i32* %r1.global-to-local, align 4
  %v1_9140 = add i32 %v6_8ac4, 66
  store i32 %v1_9140, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8e44.preheader

; uselistorder directives
  uselistorder i32 %v1_9140, { 1, 0 }
  uselistorder i32 %v1_913c, { 1, 0 }
  uselistorder i32 %v0_90f4, { 0, 2, 1 }
  uselistorder i32 %v0_90d8, { 0, 2, 1 }
  uselistorder i32 %v3_90a8, { 0, 2, 1 }
  uselistorder i32 %v2_9074, { 1, 0 }
  uselistorder i32 %v8_9054, { 1, 2, 0 }
  uselistorder i32 %v3_9040, { 1, 0 }
  uselistorder i32 %v0_9030, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v1_8ff8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8f9c, { 1, 0, 2 }
  uselistorder i32 %v4_8f98, { 0, 2, 1 }
  uselistorder i32 %v0_8f78, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8f68, { 0, 2, 1 }
  uselistorder i32 %v4_8f4c, { 1, 0 }
  uselistorder i32 %v7_8e70, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8e44, { 1, 0 }
  uselistorder i1 %v7_8e8c, { 2, 1, 0 }
  uselistorder i1 %v2_9104, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9094, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8dcc, { 1, 0, 2 }
  uselistorder i32 %v3_8c54, { 1, 0, 2 }
  uselistorder i32 %v3_8c34, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bd4, { 2, 1, 0 }
  uselistorder i32 %v1_8bc0, { 1, 0 }
  uselistorder i32 %v1_8bbc, { 2, 1, 0 }
  uselistorder i32 %v1_8bb4, { 0, 2, 1 }
  uselistorder i32 %v3_8bac, { 2, 1, 0 }
  uselistorder i32 %v0_8b88, { 1, 0, 2 }
  uselistorder i32 %v3_8b7c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8b74, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_8b70, { 1, 0 }
  uselistorder i32 %v0_8b70, { 2, 1, 0 }
  uselistorder i32 %v0_8b68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_8b64, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_8b5c, { 1, 0 }
  uselistorder i1 %v7_8b30, { 1, 0 }
  uselistorder i32 %v3_8b2c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8b18, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_8ae4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8ac4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a78, { 1, 2, 0 }
  uselistorder i32 %v6_8a4c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_8a10, { 1, 2, 0 }
  uselistorder i32 %v2_89f8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_89dc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 9, 10, 7, 8, 12, 11, 13, 16, 14, 15, 17, 1, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 3, 2, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_9118, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
  uselistorder label %dec_label_pc_8ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e44.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9154(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9154:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9154 = load i32, i32* @r4, align 4
  %v15_9154 = load i32, i32* @r8, align 4
  %v1_9158 = urem i32 %arg1, 256
  store i32 %v1_9158, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9158, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9170 = urem i32 %arg3, 256
  store i32 %v1_9170, i32* @r4, align 4
  %v2_9174 = call i32 @function_129a8(i32 %v1_9158, i32 4)
  %v0_9178 = load i32, i32* @r5, align 4
  store i32 %v0_9178, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9178 to i32*
  %v6_918c = call i32 @function_85e0(i32 %v0_9188, i32* %v5_918c, i32 2, i32 0, i32 %v2_9174)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r5, align 4
  store i32 %v0_91a4, i32* %r1.global-to-local, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  store i32 %v0_91a8, i32* %r0.global-to-local, align 4
  %v5_91ac = trunc i32 %v6_918c to i8
  %v6_91b0 = inttoptr i32 %v0_91a4 to i32*
  %v7_91b0 = call i32 @function_85e0(i32 %v0_91a8, i32* %v6_91b0, i32 3, i32 65535, i32 %v6_918c)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_91b0, i32* @r7, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_85e0(i32 %v0_91c4, i32* %v5_91c8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_91d4 = load i32, i32* @r5, align 4
  store i32 %v0_91d4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r4, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v5_91e4 = trunc i32 %v6_91c8 to i8
  %v6_91e8 = inttoptr i32 %v0_91d4 to i32*
  %v7_91e8 = call i32 @function_85e0(i32 %v0_91e0, i32* %v6_91e8, i32 5, i32 1, i32 %v6_91c8)
  %v1_91f4 = urem i32 %v7_91e8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9200 = load i32, i32* @r5, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %r0.global-to-local, align 4
  %v5_920c = inttoptr i32 %v0_9200 to i32*
  %v6_920c = call i32 @function_85e0(i32 %v0_9204, i32* %v5_920c, i32 6, i32 65535, i32 %v1_91f4)
  %v0_9214 = load i32, i32* @r5, align 4
  store i32 %v0_9214, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_920c, i32* @sl, align 4
  %v0_9224 = load i32, i32* @r4, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v5_9228 = inttoptr i32 %v0_9214 to i32*
  %v6_9228 = call i32 @function_85e0(i32 %v0_9224, i32* %v5_9228, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9228, i32* @r8, align 4
  %v0_923c = load i32, i32* @r4, align 4
  store i32 %v0_923c, i32* %r0.global-to-local, align 4
  %v5_9240 = inttoptr i32 %v0_922c to i32*
  %v6_9240 = call i32 @function_85e0(i32 %v0_923c, i32* %v5_9240, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9250 = load i32, i32* @r5, align 4
  store i32 %v0_9250, i32* %r1.global-to-local, align 4
  %v0_9254 = load i32, i32* @r4, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v5_9258 = inttoptr i32 %v0_9250 to i32*
  %v6_9258 = call i32 @function_85e0(i32 %v0_9254, i32* %v5_9258, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9260 = urem i32 %v6_9258, 256
  %v0_9264 = load i32, i32* @r5, align 4
  store i32 %v0_9264, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9270 = load i32, i32* @r4, align 4
  store i32 %v0_9270, i32* %r0.global-to-local, align 4
  %v5_9278 = inttoptr i32 %v0_9264 to i32*
  %v6_9278 = call i32 @function_85e0(i32 %v0_9270, i32* %v5_9278, i32 19, i32 0, i32 %v1_9260)
  %v0_9280 = load i32, i32* @r5, align 4
  store i32 %v0_9280, i32* %r1.global-to-local, align 4
  %v2_9284 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9278, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9290 = load i32, i32* @r4, align 4
  store i32 %v0_9290, i32* %r0.global-to-local, align 4
  %v5_9294 = inttoptr i32 %v0_9280 to i32*
  %v6_9294 = call i32 @function_85e0(i32 %v0_9290, i32* %v5_9294, i32 25, i32 %v2_9284, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_92a8 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v7_92ac = icmp eq i32 %v3_92a8, -1
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92ac, label %dec_label_pc_972c, label %dec_label_pc_92b8

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9154
  store i32 1, i32* %stack_var_-40, align 4
  %v6_92c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_92c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_92d4 = call i32 @function_1268c(i32 %v3_92a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_92d4, i32* %r0.global-to-local, align 4
  %v7_92d8 = icmp eq i32 %v6_92d4, -1
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9724, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b8
  %v0_92e0 = load i32, i32* @sl, align 4
  %v0_92ec = load i32, i32* @r8, align 4
  %v3_92ec = mul i32 %v0_92ec, 65536
  store i32 %v3_92ec, i32* %r8.global-to-local, align 4
  %v0_92f0 = load i32, i32* @r7, align 4
  %v0_92f4 = load i32, i32* @r6, align 4
  %v1_92f4 = urem i32 %v0_92f4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_92fc = urem i32 %v0_92e0, 65536
  store i32 %v3_92fc, i32* %r2.global-to-local, align 4
  %v3_9300 = urem i32 %v0_92ec, 65536
  store i32 %v3_9300, i32* %r3.global-to-local, align 4
  %v0_9304 = load i32, i32* @fp, align 4
  %v2_9304 = icmp eq i32 %v0_9304, 0
  store i1 %v2_9304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9314 = urem i32 %v0_92f0, 65536
  store i32 %v3_9314, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9304, 1
  br i1 %tmp84, label %dec_label_pc_9850, label %dec_label_pc_9324

dec_label_pc_9324:                                ; preds = %dec_label_pc_92e0
  %v3_9328 = mul i32 %v6_9240, 65536
  %v1_932c = add i32 %v3_9328, 3407872
  %v3_9334 = udiv i32 %v1_932c, 256
  %v0_92f0.not = or i32 %v0_92f0, -65536
  %v1_9344 = xor i32 %v0_92f0.not, 65535
  %v1_9348 = urem i32 %v0_92ec, 256
  %tmp85 = mul nsw i32 %v1_9344, 256
  %v1_9360 = and i32 %v3_9334, 65280
  %v1_9364 = add i32 %v3_9328, 524288
  %v4_9368 = udiv i32 %v1_932c, 16777216
  %v5_9368 = or i32 %v1_9360, %v4_9368
  store i32 %v5_9368, i32* %r0.global-to-local, align 4
  %v1_936c = add i32 %v3_9328, 1835008
  %v1_9374 = and i32 %tmp85, 65280
  store i32 %v1_9374, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9344, 256
  %tmp87 = udiv i32 %v0_92f0, 256
  %v5_9388 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_92e0, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_93a8 = sdiv i32 %sext29, 16777216
  %v3_93b4 = mul nuw nsw i32 %v1_9348, 256
  store i32 %v3_93b4, i32* @r5, align 4
  %v3_93b8 = udiv i32 %v1_9364, 256
  %tmp89 = udiv i32 %v0_92ec, 256
  %v4_93c0 = urem i32 %tmp89, 256
  %v5_93c0 = or i32 %v4_93c0, %v3_93b4
  store i32 %v5_93c0, i32* @r7, align 4
  %v3_93c4 = ashr i32 %sext29, 31
  %v3_93d0 = sdiv i32 %v1_936c, 16777216
  %v1_93d4 = and i32 %v3_93b8, 65280
  store i32 %v1_93d4, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_93dc = sdiv i32 %sext30, 16777216
  %v3_93e0 = ashr i32 %v1_936c, 31
  %v3_93e4 = udiv i32 %v1_9344, 65536
  %v4_93e8 = udiv i32 %v1_9364, 16777216
  %v5_93e8 = or i32 %v1_93d4, %v4_93e8
  store i32 %v5_93e8, i32* %r8.global-to-local, align 4
  %v3_93f4 = ashr i32 %sext30, 31
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v1_9348, i32* %r2.global-to-local, align 4
  %v3_93fc41 = udiv i32 %v1_93d4, 256
  store i32 %v3_93fc41, i32* %r3.global-to-local, align 4
  %v5_9404 = trunc i32 %v3_93f4 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v1_932c, 256
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9368, 16777216
  %v4_9478 = sdiv i32 %sext16, 16777216
  %v2_954c = icmp eq i32 %v1_92f4, 0
  %sext20 = mul i32 %v1_9364, 256
  %v4_956c = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_92ec, 16777216
  %v7_9584 = sdiv i32 %sext21, 16777216
  %v1_9474 = trunc i32 %v4_9468 to i8
  br label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %bb96, %dec_label_pc_9324
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9420 = call i32 @function_129a8(i32 1510, i32 4)
  store i32 %v2_9420, i32* %r0.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v3_9428 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  %v2_942c = load i32, i32* @r4, align 4
  %v5_942c = mul i32 %v2_942c, 4
  %v6_942c = add i32 %v5_942c, %v2_9174
  %v7_942c = inttoptr i32 %v6_942c to i32*
  store i32 %v2_9420, i32* %v7_942c, align 4
  %v0_9430 = load i32, i32* %r1.global-to-local, align 4
  %v1_9430 = load i32, i32* %r3.global-to-local, align 4
  %v4_9430 = mul i32 %v1_9430, 4
  %v5_9430 = add i32 %v4_9430, %v0_9430
  %v6_9430 = inttoptr i32 %v5_9430 to i32*
  %v7_9430 = load i32, i32* %v6_9430, align 4
  store i32 %v7_9430, i32* %r4.global-to-local, align 4
  %v1_9434 = inttoptr i32 %v7_9430 to i8*
  %v2_9434 = load i8, i8* %v1_9434, align 1
  %tmp = urem i8 %v2_9434, 16
  %v1_9438 = zext i8 %tmp to i32
  %v1_943c = or i32 %v1_9438, 64
  store i32 %v1_943c, i32* %r2.global-to-local, align 4
  %v1_9440 = trunc i32 %v1_943c to i8
  store i8 %v1_9440, i8* %v1_9434, align 1
  %v0_9444 = load i32, i32* %r4.global-to-local, align 4
  %v1_9444 = inttoptr i32 %v0_9444 to i8*
  %v2_9444 = load i8, i8* %v1_9444, align 1
  %v1_9448 = and i8 %v2_9444, -16
  %v1_944c = or i8 %v1_9448, 5
  store i32 %v1_91f4, i32* %r2.global-to-local, align 4
  store i8 %v1_944c, i8* %v1_9444, align 1
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = add i32 %v2_945c, 1
  %v4_945c = inttoptr i32 %v3_945c to i8*
  store i8 %v5_91ac, i8* %v4_945c, align 1
  store i32 %v6_91c8, i32* %r1.global-to-local, align 4
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 8
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 %v5_91e4, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_9470 = load i32, i32* %r2.global-to-local, align 4
  %v9_9470 = icmp eq i32 %v0_9470, 0
  store i1 %v9_9470, i1* %cpsr_z.global-to-local, align 1
  %v2_9474 = load i32, i32* %r4.global-to-local, align 4
  %v3_9474 = add i32 %v2_9474, 3
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  store i32 %v4_9478, i32* %r2.global-to-local, align 4
  %v0_947c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_947c, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_9414
  %v1_947c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_947c, i32* %r3.global-to-local, align 4
  %v2_9480 = trunc i32 %v1_947c to i8
  %v3_9480 = load i32, i32* %r4.global-to-local, align 4
  %v4_9480 = add i32 %v3_9480, 7
  %v5_9480 = inttoptr i32 %v4_9480 to i8*
  store i8 %v2_9480, i8* %v5_9480, align 1
  %v0_9484.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9484.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9488 = load i32, i32* %r4.global-to-local, align 4
  %v4_9488 = add i32 %v3_9488, 6
  %v5_9488 = inttoptr i32 %v4_9488 to i8*
  store i8 64, i8* %v5_9488, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9414, %.thread, %bb
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 2
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  store i32 %v3_93c4, i32* %r2.global-to-local, align 4
  store i32 %v4_93a8, i32* %r1.global-to-local, align 4
  %v2_949c = load i32, i32* %r4.global-to-local, align 4
  %v3_949c = add i32 %v2_949c, 9
  %v4_949c = inttoptr i32 %v3_949c to i8*
  store i8 47, i8* %v4_949c, align 1
  %v0_94a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a0 = trunc i32 %v0_94a0 to i8
  %v2_94a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a0 = add i32 %v2_94a0, 5
  %v4_94a0 = inttoptr i32 %v3_94a0 to i8*
  store i8 %v1_94a0, i8* %v4_94a0, align 1
  %v3_94a4 = load i32, i32* %stack_var_-40, align 4
  %v5_94ac = mul i32 %v3_94a4, 24
  store i32 %v5_94ac, i32* %r3.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94b4 = add i32 %v1_94b4, 12
  %v3_94b4 = inttoptr i32 %v2_94b4 to i32*
  store i32 %v6_9294, i32* %v3_94b4, align 4
  %v0_94b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b8 = load i32, i32* @sb, align 4
  %v2_94b8 = add i32 %v1_94b8, %v0_94b8
  store i32 %v2_94b8, i32* %r3.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = add i32 %v2_94bc, 4
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 16
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  store i32 %v3_94c0, i32* %r2.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94c4 = add i32 %v0_94c4, 20
  store i32 %v1_94c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_94cc = load i32, i32* %r0.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v3_94cc = add i32 %v0_94c4, 23
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i8
  %v2_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_94d0 = add i32 %v2_94d0, 2
  %v4_94d0 = inttoptr i32 %v3_94d0 to i8*
  store i8 %v1_94d0, i8* %v4_94d0, align 1
  %v0_94d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94d4 = add i32 %v0_94d4, 24
  %v2_94d4 = inttoptr i32 %v1_94d4 to i8*
  %v3_94d4 = load i8, i8* %v2_94d4, align 1
  %tmp104 = urem i8 %v3_94d4, 16
  %v1_94d8 = zext i8 %tmp104 to i32
  %v1_94dc = or i32 %v1_94d8, 64
  store i32 %v1_94dc, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v1_94dc to i8
  store i8 %v1_94e0, i8* %v2_94d4, align 1
  %v0_94e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, 16
  %v3_94e4 = inttoptr i32 %v2_94e4 to i32*
  store i32 %v0_94e4, i32* %v3_94e4, align 4
  %v0_94e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_94e8 = add i32 %v0_94e8, 24
  %v2_94e8 = inttoptr i32 %v1_94e8 to i8*
  %v3_94e8 = load i8, i8* %v2_94e8, align 1
  %v1_94ec = and i8 %v3_94e8, -16
  %v1_94f0 = or i8 %v1_94ec, 5
  store i8 %v1_94f0, i8* %v2_94e8, align 1
  %v0_94fc = load i32, i32* %r4.global-to-local, align 4
  %v1_94fc = add i32 %v0_94fc, 24
  store i32 %v1_94fc, i32* @r5, align 4
  %v3_9500 = add i32 %v0_94fc, 25
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v5_91ac, i8* %v4_9500, align 1
  store i32 %v3_93d0, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_93e0, i32* %r2.global-to-local, align 4
  %v2_9510 = load i32, i32* @r5, align 4
  %v3_9510 = add i32 %v2_9510, 4
  %v4_9510 = inttoptr i32 %v3_9510 to i8*
  store i8 %v5_9388, i8* %v4_9510, align 1
  %v0_9514 = load i32, i32* %r1.global-to-local, align 4
  %v1_9514 = trunc i32 %v0_9514 to i8
  %v2_9514 = load i32, i32* @r5, align 4
  %v3_9514 = add i32 %v2_9514, 2
  %v4_9514 = inttoptr i32 %v3_9514 to i8*
  store i8 %v1_9514, i8* %v4_9514, align 1
  %v0_9518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9518, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_93e4, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %r2.global-to-local, align 4
  %v1_9520 = trunc i32 %v0_9520 to i8
  %v2_9520 = load i32, i32* @r5, align 4
  %v3_9520 = add i32 %v2_9520, 3
  %v4_9520 = inttoptr i32 %v3_9520 to i8*
  store i8 %v1_9520, i8* %v4_9520, align 1
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v0_9528 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9528, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_9528 = load i32, i32* %r3.global-to-local, align 4
  %v2_9528 = trunc i32 %v1_9528 to i8
  %v3_9528 = load i32, i32* @r5, align 4
  %v4_9528 = add i32 %v3_9528, 6
  %v5_9528 = inttoptr i32 %v4_9528 to i8*
  store i8 %v2_9528, i8* %v5_9528, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = trunc i32 %v0_9530 to i8
  %v2_9530 = load i32, i32* @r5, align 4
  %v3_9530 = add i32 %v2_9530, 5
  %v4_9530 = inttoptr i32 %v3_9530 to i8*
  store i8 %v1_9530, i8* %v4_9530, align 1
  %v0_9534 = load i32, i32* %r2.global-to-local, align 4
  %v1_9534 = trunc i32 %v0_9534 to i8
  %v2_9534 = load i32, i32* @r5, align 4
  %v3_9534 = add i32 %v2_9534, 8
  %v4_9534 = inttoptr i32 %v3_9534 to i8*
  store i8 %v1_9534, i8* %v4_9534, align 1
  %v0_9538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9538, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9538 = load i32, i32* %r0.global-to-local, align 4
  %v2_9538 = trunc i32 %v1_9538 to i8
  %v3_9538 = load i32, i32* @r5, align 4
  %v4_9538 = add i32 %v3_9538, 7
  %v5_9538 = inttoptr i32 %v4_9538 to i8*
  store i8 %v2_9538, i8* %v5_9538, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_953c = load i32, i32* %r3.global-to-local, align 4
  %v1_953c = trunc i32 %v0_953c to i8
  %v2_953c = load i32, i32* @r5, align 4
  %v3_953c = add i32 %v2_953c, 9
  %v4_953c = inttoptr i32 %v3_953c to i8*
  store i8 %v1_953c, i8* %v4_953c, align 1
  %v0_9540 = call i32 @function_eb48()
  store i32 %v0_9540, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r1.global-to-local, align 4
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = sub i32 1023, %v0_9540
  store i32 %v1_9550, i32* %r3.global-to-local, align 4
  br i1 %v2_954c, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_9558 = load i32, i32* @r5, align 4
  %v3_9558 = add i32 %v2_9558, 16
  %v4_9558 = inttoptr i32 %v3_9558 to i32*
  store i32 %v1_9550, i32* %v4_9558, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_9554 = load i32, i32* %r4.global-to-local, align 4
  %v2_9554 = add i32 %v1_9554, 16
  %v3_9554 = inttoptr i32 %v2_9554 to i32*
  %v4_9554 = load i32, i32* %v3_9554, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v2_955c = load i32, i32* @r5, align 4
  %v3_955c = add i32 %v2_955c, 16
  %v4_955c = inttoptr i32 %v3_955c to i32*
  store i32 %v4_9554, i32* %v4_955c, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_93dc, i32* %r3.global-to-local, align 4
  %v0_9564 = load i32, i32* %r4.global-to-local, align 4
  %v1_9564 = add i32 %v0_9564, 44
  store i32 %v1_9564, i32* @r6, align 4
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9540, i32* %v3_9568, align 4
  store i32 %v4_956c, i32* %r2.global-to-local, align 4
  %v0_9570 = load i32, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* @r6, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v3_9574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* %r2.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* @r6, align 4
  %v3_9578 = add i32 %v2_9578, 5
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 1
  store i32 %v1_957c, i32* @r4, align 4
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v7_9584, i32* %r2.global-to-local, align 4
  %v1_9588 = load i32, i32* @fp, align 4
  %v9_9588 = icmp eq i32 %v1_957c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v2_958c = load i32, i32* @r6, align 4
  %v3_958c = add i32 %v2_958c, 1
  %v4_958c = inttoptr i32 %v3_958c to i8*
  store i8 %v5_9404, i8* %v4_958c, align 1
  %v0_9590 = load i32, i32* @r7, align 4
  %v1_9590 = trunc i32 %v0_9590 to i8
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 2
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v1_9590, i8* %v4_9590, align 1
  %v0_9594 = load i32, i32* %r2.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* @r6, align 4
  %v3_9594 = add i32 %v2_9594, 3
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r8.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r4, align 4
  store i32 %v0_959c, i32* %stack_var_-40, align 4
  %v5_95a0 = icmp slt i32 %v1_957c, %v1_9588
  br i1 %v5_95a0, label %dec_label_pc_9414, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %bb96
  %v1_95ac = add i32 %v6_9240, 8
  store i32 %v1_95ac, i32* %r3.global-to-local, align 4
  %v1_95b0 = add i32 %v6_9240, 52
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_95bc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_95bc.preheader

dec_label_pc_95bc.preheader:                      ; preds = %dec_label_pc_95a4, %dec_label_pc_9850
  %v0_95bc.pre = phi i32 [ %v0_95bc.pre.pre, %dec_label_pc_95a4 ], [ %v0_9304, %dec_label_pc_9850 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_95b0, %dec_label_pc_95a4 ], [ %v1_985c, %dec_label_pc_9850 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_95ac, %dec_label_pc_95a4 ], [ %v1_9858, %dec_label_pc_9850 ]
  %v2_9834 = icmp eq i32 %v1_9260, 0
  %v2_9634 = icmp eq i32 %v1_92f4, 0
  %v2_9600 = icmp eq i32 %v6_9294, -1
  %v7_9600 = icmp eq i32 %v6_9294, -1
  br label %dec_label_pc_95bc

dec_label_pc_95bc:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95bc.preheader
  %v0_95bc = phi i32 [ %v0_95bc.pre, %dec_label_pc_95bc.preheader ], [ %v1_9714, %dec_label_pc_9650 ]
  %v2_95bc = icmp eq i32 %v0_95bc, 0
  store i1 %v2_95bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_95bc, 1
  br label %dec_label_pc_95c4

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95c4, %dec_label_pc_95bc
  br i1 %tmp97, label %dec_label_pc_95c4, label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95c4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_95d4

dec_label_pc_95d4:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95c8
  %v1_95e8 = phi i32 [ %v1_9710, %dec_label_pc_9650 ], [ 0, %dec_label_pc_95c8 ]
  %v5_95d8 = mul i32 %v1_95e8, 24
  %v1_95dc = load i32, i32* @sb, align 4
  %v2_95dc = add i32 %v1_95dc, %v5_95d8
  store i32 %v2_95dc, i32* %r3.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v2_95dc, 20
  %v2_95e4 = inttoptr i32 %v1_95e4 to i8*
  %v3_95e4 = load i8, i8* %v2_95e4, align 1
  %v4_95e4 = zext i8 %v3_95e4 to i32
  store i32 %v4_95e4, i32* %r2.global-to-local, align 4
  %v4_95e8 = mul i32 %v1_95e8, 4
  %v5_95e8 = add i32 %v4_95e8, %v2_9174
  %v6_95e8 = inttoptr i32 %v5_95e8 to i32*
  %v7_95e8 = load i32, i32* %v6_95e8, align 4
  store i32 %v7_95e8, i32* @r5, align 4
  %v7_95ec = icmp eq i8 %v3_95e4, 31
  store i1 %v7_95ec, i1* %cpsr_z.global-to-local, align 1
  %v1_95f0 = add i32 %v7_95e8, 24
  store i32 %v1_95f0, i32* @r6, align 4
  %v1_95f4 = add i32 %v7_95e8, 44
  store i32 %v1_95f4, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_95e4, 32
  br i1 %tmp105, label %dec_label_pc_9734, label %dec_label_pc_95fc

dec_label_pc_95fc:                                ; preds = %dec_label_pc_95d4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_9608:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  store i32 65535, i32* @r4, align 4
  %v0_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, 65535
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9610, label %dec_label_pc_97b4, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_979c.dec_label_pc_9618_crit_edge, %dec_label_pc_9608
  %v1_961c = phi i32 [ %v1_961c.pre, %dec_label_pc_979c.dec_label_pc_9618_crit_edge ], [ 65535, %dec_label_pc_9608 ]
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v9_961c = icmp eq i32 %v3_92fc, %v1_961c
  store i1 %v9_961c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_961c, label %dec_label_pc_97ec, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %dec_label_pc_97b4.dec_label_pc_9624_crit_edge, %dec_label_pc_9618
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_97b4.dec_label_pc_9624_crit_edge ], [ %v1_961c, %dec_label_pc_9618 ]
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v9_9628 = icmp eq i32 %v3_9300, %v1_9628
  store i1 %v9_9628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9628, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9630:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9634, label %dec_label_pc_982c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_9630
  %v1_9638 = load i32, i32* @r5, align 4
  %v2_9638 = add i32 %v1_9638, 16
  %v3_9638 = inttoptr i32 %v2_9638 to i32*
  %v4_9638 = load i32, i32* %v3_9638, align 4
  store i32 %v4_9638, i32* %r3.global-to-local, align 4
  %v2_963c = load i32, i32* @r6, align 4
  %v3_963c = add i32 %v2_963c, 16
  %v4_963c = inttoptr i32 %v3_963c to i32*
  store i32 %v4_9638, i32* %v4_963c, align 4
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %bb102, %.thread26
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9650:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c, %dec_label_pc_9840
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9654 = load i32, i32* @r8, align 4
  %v1_9654 = trunc i32 %v0_9654 to i8
  %v2_9654 = load i32, i32* @r5, align 4
  %v3_9654 = add i32 %v2_9654, 10
  %v4_9654 = inttoptr i32 %v3_9654 to i8*
  store i8 %v1_9654, i8* %v4_9654, align 1
  %v0_9658 = load i32, i32* @r8, align 4
  %v1_9658 = trunc i32 %v0_9658 to i8
  %v2_9658 = load i32, i32* @r5, align 4
  %v3_9658 = add i32 %v2_9658, 11
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v1_9658, i8* %v4_9658, align 1
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* @r0, align 4
  %v2_9660 = call i32 @function_d0b8(i32 %v0_965c, i32 20)
  %v3_9660 = trunc i32 %v2_9660 to i8
  %v4_9664 = sdiv i32 %v2_9660, 256
  store i32 %v4_9664, i32* %r3.global-to-local, align 4
  %v1_9668 = trunc i32 %v4_9664 to i8
  %v2_9668 = load i32, i32* @r5, align 4
  %v3_9668 = add i32 %v2_9668, 11
  %v4_9668 = inttoptr i32 %v3_9668 to i8*
  store i8 %v1_9668, i8* %v4_9668, align 1
  %v3_966c = load i32, i32* @r5, align 4
  %v4_966c = add i32 %v3_966c, 10
  %v5_966c = inttoptr i32 %v4_966c to i8*
  store i8 %v3_9660, i8* %v5_966c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r8, align 4
  %v1_9674 = trunc i32 %v0_9674 to i8
  %v2_9674 = load i32, i32* @r6, align 4
  %v3_9674 = add i32 %v2_9674, 10
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  %v0_9678 = load i32, i32* @r8, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* @r6, align 4
  %v3_9678 = add i32 %v2_9678, 11
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* @r6, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v2_9680 = call i32 @function_d0b8(i32 %v0_967c, i32 20)
  %v3_9680 = trunc i32 %v2_9680 to i8
  store i32 %v2_9680, i32* %r0.global-to-local, align 4
  %v4_9684 = sdiv i32 %v2_9680, 256
  store i32 %v4_9684, i32* %r3.global-to-local, align 4
  %v3_9688 = load i32, i32* @r6, align 4
  %v4_9688 = add i32 %v3_9688, 10
  %v5_9688 = inttoptr i32 %v4_9688 to i8*
  store i8 %v3_9680, i8* %v5_9688, align 1
  %v0_968c = load i32, i32* %r3.global-to-local, align 4
  %v1_968c = trunc i32 %v0_968c to i8
  %v2_968c = load i32, i32* @r6, align 4
  %v3_968c = add i32 %v2_968c, 11
  %v4_968c = inttoptr i32 %v3_968c to i8*
  store i8 %v1_968c, i8* %v4_968c, align 1
  %v0_9690 = load i32, i32* @r7, align 4
  %v1_9690 = add i32 %v0_9690, 4
  %v2_9690 = inttoptr i32 %v1_9690 to i8*
  %v3_9690 = load i8, i8* %v2_9690, align 1
  %v4_9690 = zext i8 %v3_9690 to i32
  store i32 %v4_9690, i32* %r3.global-to-local, align 4
  %v1_9694 = add i32 %v0_9690, 5
  %v2_9694 = inttoptr i32 %v1_9694 to i8*
  %v3_9694 = load i8, i8* %v2_9694, align 1
  %v4_9694 = zext i8 %v3_9694 to i32
  store i32 %v0_9690, i32* @r1, align 4
  %v4_969c = mul nuw nsw i32 %v4_9694, 256
  %v5_969c = or i32 %v4_969c, %v4_9690
  store i32 %v5_969c, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r8, align 4
  %v1_96a0 = trunc i32 %v0_96a0 to i8
  %v3_96a0 = add i32 %v0_9690, 6
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @r7, align 4
  %v3_96a8 = add i32 %v2_96a8, 7
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* @r6, align 4
  store i32 %v0_96ac, i32* %r0.global-to-local, align 4
  %v4_96b0 = call i32 @function_d114(i32 %v0_96ac, i32 %v0_9690, i32 %v5_969c, i32 %stack_var_-152.0.ph)
  %v5_96b0 = trunc i32 %v4_96b0 to i8
  store i32 %v4_96b0, i32* %r0.global-to-local, align 4
  %v3_96b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v3_96b8 = mul i32 %v3_96b4, 32
  store i32 %v3_96b8, i32* %r2.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  %v1_96bc = add i32 %v0_96bc, 16
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r1.global-to-local, align 4
  %v5_96c0 = mul i32 %v3_96b4, 24
  store i32 %v5_96c0, i32* %r2.global-to-local, align 4
  %v4_96c442 = udiv i32 %v4_96b0, 256
  %v1_96c8 = trunc i32 %v4_96c442 to i8
  %v2_96c8 = load i32, i32* @r7, align 4
  %v3_96c8 = add i32 %v2_96c8, 7
  %v4_96c8 = inttoptr i32 %v3_96c8 to i8*
  store i8 %v1_96c8, i8* %v4_96c8, align 1
  %v0_96cc = load i32, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sb, align 4
  %v2_96cc = add i32 %v1_96cc, %v0_96cc
  store i32 %v2_96cc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_96d4 = load i32, i32* @r7, align 4
  %v4_96d4 = add i32 %v3_96d4, 6
  %v5_96d4 = inttoptr i32 %v4_96d4 to i8*
  store i8 %v5_96b0, i8* %v5_96d4, align 1
  %v0_96d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_96d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_96d8 = add i32 %v1_96d8, 4
  %v3_96d8 = inttoptr i32 %v2_96d8 to i32*
  store i32 %v0_96d8, i32* %v3_96d8, align 4
  %v0_96dc = load i32, i32* %r3.global-to-local, align 4
  %v1_96dc = trunc i32 %v0_96dc to i8
  %v2_96dc = load i32, i32* %r2.global-to-local, align 4
  %v3_96dc = load i32, i32* @sb, align 4
  %v4_96dc = add i32 %v3_96dc, %v2_96dc
  %v5_96dc = inttoptr i32 %v4_96dc to i8*
  store i8 %v1_96dc, i8* %v5_96dc, align 1
  %v0_96e0 = load i32, i32* @r8, align 4
  %v1_96e0 = trunc i32 %v0_96e0 to i8
  %v2_96e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e0 = add i32 %v2_96e0, 2
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v1_96e0, i8* %v4_96e0, align 1
  %v0_96e4 = load i32, i32* @r8, align 4
  %v1_96e4 = trunc i32 %v0_96e4 to i8
  %v2_96e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e4 = add i32 %v2_96e4, 1
  %v4_96e4 = inttoptr i32 %v3_96e4 to i8*
  store i8 %v1_96e4, i8* %v4_96e4, align 1
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i8
  %v2_96e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e8 = add i32 %v2_96e8, 3
  %v4_96e8 = inttoptr i32 %v3_96e8 to i8*
  store i8 %v1_96e8, i8* %v4_96e8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  store i32 %v0_96f4, i32* %r1.global-to-local, align 4
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_9700 = load i32, i32* %lr.global-to-local, align 4
  %v6_9708 = inttoptr i32 %v0_96f4 to i32*
  %v7_9708 = call i32 @function_12658(i32 %v3_92a8, i32* %v6_9708, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_9700, i32 16)
  %v3_970c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_970c, i32* %r3.global-to-local, align 4
  %v1_9710 = add i32 %v3_970c, 1
  store i32 %v1_9710, i32* %r0.global-to-local, align 4
  %v1_9714 = load i32, i32* @fp, align 4
  %v9_9714 = icmp eq i32 %v1_9710, %v1_9714
  store i1 %v9_9714, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9710, i32* %stack_var_-40, align 4
  %v6_971c = icmp slt i32 %v1_9710, %v1_9714
  br i1 %v6_971c, label %dec_label_pc_95d4, label %dec_label_pc_95bc

dec_label_pc_9724:                                ; preds = %dec_label_pc_92b8
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v1_9728 = call i32 @function_11da0(i32 %v3_92a8)
  store i32 %v1_9728, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_972c

dec_label_pc_972c:                                ; preds = %dec_label_pc_9154, %dec_label_pc_9724
  %v29_9730 = phi i32 [ %v3_92a8, %dec_label_pc_9154 ], [ %v1_9728, %dec_label_pc_9724 ]
  store i32 %v3_9154, i32* %r4.global-to-local, align 4
  store i32 %v15_9154, i32* %r8.global-to-local, align 4
  ret i32 %v29_9730

dec_label_pc_9734:                                ; preds = %dec_label_pc_95d4
  %v1_9734 = add i32 %v2_95dc, 16
  %v2_9734 = inttoptr i32 %v1_9734 to i32*
  %v3_9734 = load i32, i32* %v2_9734, align 4
  store i32 %v3_9734, i32* %r4.global-to-local, align 4
  %v0_9738 = call i32 @function_eb48()
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v3_973c = load i32, i32* %stack_var_-40, align 4
  %v5_9744 = mul i32 %v3_973c, 24
  %v0_9748 = load i32, i32* %r4.global-to-local, align 4
  %v1_974c = load i32, i32* @sb, align 4
  %v2_974c = add i32 %v1_974c, %v5_9744
  store i32 %v2_974c, i32* %r1.global-to-local, align 4
  %v1_9750 = and i32 %v0_9748, 65280
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v1_9748 = udiv i32 %v0_9748, 256
  %v3_9754 = and i32 %v1_9748, 65280
  store i32 %v3_9754, i32* %r2.global-to-local, align 4
  %v1_975c = add i32 %v2_974c, 20
  %v2_975c = inttoptr i32 %v1_975c to i8*
  %v3_975c = load i8, i8* %v2_975c, align 1
  %v4_975c = zext i8 %v3_975c to i32
  store i32 %v4_975c, i32* %lr.global-to-local, align 4
  %v2_9768 = call i32 @llvm.bswap.i32(i32 %v0_9748)
  %v7_976c = lshr i32 %v0_9738, %v4_975c
  %v8_976c = add i32 %v7_976c, %v2_9768
  %v3_9778 = mul i32 %v8_976c, 16777216
  %v1_977c = and i32 %v8_976c, 65280
  store i32 %v1_977c, i32* %r0.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v4_9788 = mul nuw nsw i32 %v1_977c, 256
  %v5_9788 = or i32 %v4_9788, %v3_9778
  store i32 %v5_9788, i32* %r1.global-to-local, align 4
  %v2_978c = call i32 @llvm.bswap.i32(i32 %v8_976c)
  store i32 %v2_978c, i32* %r3.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  %v1_9794 = load i32, i32* @r5, align 4
  %v2_9794 = add i32 %v1_9794, 16
  %v3_9794 = inttoptr i32 %v2_9794 to i32*
  store i32 %v2_978c, i32* %v3_9794, align 4
  br i1 %v2_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_979c:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  %v0_979c = call i32 @function_eb48()
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_97a8 = load i32, i32* @sl, align 4
  %v9_97a8 = icmp eq i32 %v0_97a8, 65535
  store i1 %v9_97a8, i1* %cpsr_z.global-to-local, align 1
  %v1_97ac = load i32, i32* @r5, align 4
  %v2_97ac = add i32 %v1_97ac, 12
  %v3_97ac = inttoptr i32 %v2_97ac to i32*
  store i32 %v0_979c, i32* %v3_97ac, align 4
  br i1 %v9_97a8, label %dec_label_pc_97b4, label %dec_label_pc_979c.dec_label_pc_9618_crit_edge

dec_label_pc_979c.dec_label_pc_9618_crit_edge:    ; preds = %dec_label_pc_979c
  %v1_961c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9618

dec_label_pc_97b4:                                ; preds = %dec_label_pc_979c, %dec_label_pc_9608
  %v0_97b4 = call i32 @function_eb48()
  %v3_97bc = urem i32 %v0_97b4, 65536
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  %v3_97c015 = udiv i32 %v0_97b4, 256
  %v1_97c4 = trunc i32 %v3_97c015 to i8
  %v2_97c4 = load i32, i32* @r5, align 4
  %v3_97c4 = add i32 %v2_97c4, 5
  %v4_97c4 = inttoptr i32 %v3_97c4 to i8*
  store i8 %v1_97c4, i8* %v4_97c4, align 1
  %v0_97c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v1_97d0 = sub i32 999, %v0_97c8
  store i32 %v1_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = sdiv i32 %v1_97d0, 256
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_97d8 = load i32, i32* @r4, align 4
  %v9_97d8 = icmp eq i32 %v3_92fc, %v1_97d8
  store i1 %v9_97d8, i1* %cpsr_z.global-to-local, align 1
  %v1_97dc = trunc i32 %v0_97c8 to i8
  %v2_97dc = load i32, i32* @r5, align 4
  %v3_97dc = add i32 %v2_97dc, 4
  %v4_97dc = inttoptr i32 %v3_97dc to i8*
  store i8 %v1_97dc, i8* %v4_97dc, align 1
  %v0_97e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_97e0 = trunc i32 %v0_97e0 to i8
  %v2_97e0 = load i32, i32* @r6, align 4
  %v3_97e0 = add i32 %v2_97e0, 5
  %v4_97e0 = inttoptr i32 %v3_97e0 to i8*
  store i8 %v1_97e0, i8* %v4_97e0, align 1
  %v0_97e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_97e4 = trunc i32 %v0_97e4 to i8
  %v2_97e4 = load i32, i32* @r6, align 4
  %v3_97e4 = add i32 %v2_97e4, 4
  %v4_97e4 = inttoptr i32 %v3_97e4 to i8*
  store i8 %v1_97e4, i8* %v4_97e4, align 1
  %v0_97e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_97e8, label %dec_label_pc_97ec, label %dec_label_pc_97b4.dec_label_pc_9624_crit_edge

dec_label_pc_97b4.dec_label_pc_9624_crit_edge:    ; preds = %dec_label_pc_97b4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9624

dec_label_pc_97ec:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_9618
  %v0_97ec = call i32 @function_eb48()
  %v1_97ec = trunc i32 %v0_97ec to i8
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v4_97f4 = sdiv i32 %v0_97ec, 256
  store i32 %v4_97f4, i32* %r3.global-to-local, align 4
  %v1_97f8 = load i32, i32* @r4, align 4
  %v9_97f8 = icmp eq i32 %v3_9300, %v1_97f8
  store i1 %v9_97f8, i1* %cpsr_z.global-to-local, align 1
  %v3_97fc = load i32, i32* @r5, align 4
  %v4_97fc = add i32 %v3_97fc, 44
  %v5_97fc = inttoptr i32 %v4_97fc to i8*
  store i8 %v1_97ec, i8* %v5_97fc, align 1
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r7, align 4
  %v3_9800 = add i32 %v2_9800, 1
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9804, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9808:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  %v0_9808 = call i32 @function_eb48()
  %v1_9808 = trunc i32 %v0_9808 to i8
  store i32 %v0_9808, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  %v4_9810 = sdiv i32 %v0_9808, 256
  store i32 %v4_9810, i32* %r3.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  %v1_9818 = trunc i32 %v4_9810 to i8
  %v2_9818 = load i32, i32* @r7, align 4
  %v3_9818 = add i32 %v2_9818, 3
  %v4_9818 = inttoptr i32 %v3_9818 to i8*
  store i8 %v1_9818, i8* %v4_9818, align 1
  %v0_981c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_981c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9808
  %v1_981c = load i32, i32* @r5, align 4
  %v2_981c = add i32 %v1_981c, 16
  %v3_981c = inttoptr i32 %v2_981c to i32*
  %v4_981c = load i32, i32* %v3_981c, align 4
  store i32 %v4_981c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9808, %bb100
  %v3_9820 = load i32, i32* @r7, align 4
  %v4_9820 = add i32 %v3_9820, 2
  %v5_9820 = inttoptr i32 %v4_9820 to i8*
  store i8 %v1_9808, i8* %v5_9820, align 1
  %v0_9824 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9824, label %dec_label_pc_982c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9824 = load i32, i32* %r3.global-to-local, align 4
  %v2_9824 = load i32, i32* @r6, align 4
  %v3_9824 = add i32 %v2_9824, 16
  %v4_9824 = inttoptr i32 %v3_9824 to i32*
  store i32 %v1_9824, i32* %v4_9824, align 4
  br label %dec_label_pc_9644

dec_label_pc_982c:                                ; preds = %dec_label_pc_9630, %bb101
  %v0_982c = call i32 @function_eb48()
  store i32 %v0_982c, i32* %r0.global-to-local, align 4
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  %v1_9838 = load i32, i32* @r6, align 4
  %v2_9838 = add i32 %v1_9838, 16
  %v3_9838 = inttoptr i32 %v2_9838 to i32*
  store i32 %v0_982c, i32* %v3_9838, align 4
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9840:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c
  %v0_9840 = load i32, i32* @r7, align 4
  %v1_9840 = add i32 %v0_9840, 8
  store i32 %v1_9840, i32* %r0.global-to-local, align 4
  store i32 %v6_9240, i32* @r1, align 4
  %v1_9848 = inttoptr i32 %v1_9840 to i8*
  %v2_9848 = call i32 @function_ecc8(i8* %v1_9848)
  store i32 %v2_9848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9650

dec_label_pc_9850:                                ; preds = %dec_label_pc_92e0
  %v1_9858 = add i32 %v6_9240, 8
  store i32 %v1_9858, i32* %r2.global-to-local, align 4
  %v1_985c = add i32 %v6_9240, 52
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_95bc.preheader

; uselistorder directives
  uselistorder i32 %v1_985c, { 1, 0 }
  uselistorder i32 %v1_9858, { 1, 0 }
  uselistorder i32 %v4_9810, { 1, 0 }
  uselistorder i32 %v0_9808, { 0, 2, 1 }
  uselistorder i32 %v0_97ec, { 0, 2, 1 }
  uselistorder i32 %v2_978c, { 1, 0 }
  uselistorder i32 %v8_976c, { 1, 2, 0 }
  uselistorder i32 %v0_9748, { 1, 0, 2 }
  uselistorder i32 %v1_9714, { 1, 2, 0 }
  uselistorder i32 %v1_9710, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_96b4, { 1, 0, 2 }
  uselistorder i32 %v4_96b0, { 0, 2, 1 }
  uselistorder i32 %v0_9690, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9680, { 0, 2, 1 }
  uselistorder i32 %v4_9664, { 1, 0 }
  uselistorder i32 %v7_95e8, { 1, 0, 2 }
  uselistorder i32 %v0_95bc, { 1, 0 }
  uselistorder i1 %v7_9600, { 2, 1, 0 }
  uselistorder i1 %v2_9834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0, 2 }
  uselistorder i32 %v0_9540, { 1, 0, 2 }
  uselistorder i32 %v3_93f4, { 0, 2, 1 }
  uselistorder i32 %v3_93b4, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_936c, { 1, 0 }
  uselistorder i32 %v1_9348, { 1, 0 }
  uselistorder i32 %v1_9344, { 0, 2, 1 }
  uselistorder i32 %v3_9328, { 2, 1, 0 }
  uselistorder i32 %v0_9304, { 1, 0, 2 }
  uselistorder i32 %v1_92f4, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_92f0, { 0, 2, 1 }
  uselistorder i32 %v0_92ec, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i1 %v7_92ac, { 1, 0 }
  uselistorder i32 %v3_92a8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_9294, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9240, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9174, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9158, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 0, 1, 2, 3, 4, 5, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* %r3.global-to-local, { 52, 53, 55, 54, 56, 57, 58, 59, 60, 61, 62, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 38, 39, 40, 41, 42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 31, 30, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 31, 32, 35, 36, 33, 34, 38, 37, 2, 1, 39, 40, 4, 6, 5, 7, 8, 13, 9, 10, 11, 12, 16, 14, 15, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %lr.global-to-local, { 6, 4, 0, 1, 2, 3, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_9840, { 1, 0 }
  uselistorder label %dec_label_pc_982c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_972c, { 1, 0 }
  uselistorder label %dec_label_pc_9650, { 2, 1, 0 }
  uselistorder label %dec_label_pc_95bc.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_9870(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9870:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_9870 = load i32, i32* @fp, align 4
  %v1_9874 = urem i32 %arg1, 256
  store i32 %v1_9874, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_988c = urem i32 %arg3, 256
  store i32 %v1_988c, i32* @r4, align 4
  %v2_9890 = call i32 @function_129a8(i32 %v1_9874, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9890, i32* @sl, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v2_98a0 = call i32 @function_129a8(i32 %v0_989c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_98ac = load i32, i32* @r6, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a0, i32* @sb, align 4
  %v0_98bc = load i32, i32* @r4, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_85e0(i32 %v0_98bc, i32* %v5_98c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_98c8 = urem i32 %v6_98c0, 65536
  %v0_98cc = load i32, i32* @r6, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v0_98d4 = load i32, i32* @r5, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_85e0(i32 %v0_98d8, i32* %v5_98e0, i32 6, i32 %v0_98d4, i32 %v3_98c8)
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r1.global-to-local, align 4
  %v3_98e8 = mul i32 %v6_98e0, 65536
  store i32 %v3_98e8, i32* %fp.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r4, align 4
  %v5_98f8 = inttoptr i32 %v0_98e4 to i32*
  %v6_98f8 = call i32 @function_85e0(i32 %v0_98f4, i32* %v5_98f8, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_9904 = load i32, i32* @r6, align 4
  store i32 %v0_9904, i32* %r1.global-to-local, align 4
  %v0_9908 = load i32, i32* @r4, align 4
  %v3_9910 = urem i32 %v6_98f8, 65536
  store i32 %v3_9910, i32* @r6, align 4
  %v5_9914 = inttoptr i32 %v0_9904 to i32*
  %v6_9914 = call i32 @function_85e0(i32 %v0_9908, i32* %v5_9914, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9918 = load i32, i32* %fp.global-to-local, align 4
  %v3_9918 = udiv i32 %v0_9918, 65536
  %v1_9920 = load i32, i32* @r5, align 4
  %v9_9920 = icmp eq i32 %v3_9918, %v1_9920
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9920, label %dec_label_pc_9948, label %bb

bb:                                               ; preds = %dec_label_pc_9870
  %v2_9934 = mul nuw nsw i32 %v3_9918, 256
  %v4_9938 = and i32 %v2_9934, 65280
  %v1_993c = urem i32 %v6_9914, 256
  store i32 %v1_993c, i32* @r8, align 4
  %v5_9940 = udiv i32 %v0_9918, 16777216
  %v6_9940 = or i32 %v4_9938, %v5_9940
  br label %dec_label_pc_9954

dec_label_pc_9948:                                ; preds = %dec_label_pc_9870
  %v1_993c7 = urem i32 %v6_9914, 256
  store i32 %v1_993c7, i32* @r8, align 4
  %v0_9948 = call i32 @function_eb48()
  %v3_9950 = urem i32 %v0_9948, 65536
  br label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %bb, %dec_label_pc_9948
  %storemerge17 = phi i32 [ %v6_9940, %bb ], [ %v3_9950, %dec_label_pc_9948 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_9954, 1
  br i1 %tmp41, label %dec_label_pc_9afc.preheader, label %dec_label_pc_995c

dec_label_pc_9afc.preheader:                      ; preds = %dec_label_pc_9a58, %dec_label_pc_9954
  %storemerge3.in12.ph = phi i32 [ %v0_9954, %dec_label_pc_9954 ], [ %v1_99b0, %dec_label_pc_9a58 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_995c:                                ; preds = %dec_label_pc_9954
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v3_9960 = udiv i32 %v6_98c0, 256
  %v5_996c = trunc i32 %v3_9960 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_9984 = udiv i32 %v6_98c0, 65536
  store i32 %v3_9984, i32* @r4, align 4
  %v4_9994 = trunc i32 %v3_9984 to i8
  store i8 %v4_9994, i8* %stack_var_-80, align 1
  %v3_9aa4 = icmp eq i32 %v3_98c8, 65535
  %v2_99cc = ptrtoint i32* %stack_var_-52 to i32
  %v3_99fc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9a88

dec_label_pc_999c:                                ; preds = %dec_label_pc_9a88
  %v2_999c = load i8, i8* %stack_var_-80, align 1
  %v3_999c = sext i8 %v2_999c to i32
  store i32 %v3_999c, i32* %r1.global-to-local, align 4
  store i32 %v3_9960, i32* @r4, align 4
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 2
  %v4_99a0 = inttoptr i32 %v3_99a0 to i8*
  store i8 %v5_996c, i8* %v4_99a0, align 1
  %v0_99a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i8
  %v2_99a4 = load i32, i32* @r5, align 4
  %v3_99a4 = add i32 %v2_99a4, 3
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 %v1_99a4, i8* %v4_99a4, align 1
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9ab0, %dec_label_pc_999c
  %v1_99b0 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_99c0 = call i32 @function_126bc(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_99c8 = icmp eq i32 %v3_99c0, -1
  store i32 %v2_99cc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_99dc = load i32, i32* @sb, align 4
  %v3_99dc = add i32 %v2_99dc, %stack_var_-60.0
  %v4_99dc = inttoptr i32 %v3_99dc to i32*
  store i32 %v3_99c0, i32* %v4_99dc, align 4
  br i1 %v7_99c8, label %dec_label_pc_9b08, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99a8
  store i32 2, i32* %stack_var_-52, align 4
  %v4_99fc = call i32 @function_124ec(i32 %v3_99c0, %sockaddr* %v3_99fc, i32 16)
  %v0_9a00 = load i32, i32* @r5, align 4
  %v1_9a00 = add i32 %v0_9a00, 20
  %v2_9a00 = inttoptr i32 %v1_9a00 to i8*
  %v3_9a00 = load i8, i8* %v2_9a00, align 1
  %tmp = icmp ugt i8 %v3_9a00, 31
  br i1 %tmp, label %dec_label_pc_9a58, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e4
  %v1_9a0c = add i32 %v0_9a00, 16
  %v2_9a0c = inttoptr i32 %v1_9a0c to i32*
  %v3_9a0c = load i32, i32* %v2_9a0c, align 4
  store i32 %v3_9a0c, i32* @r4, align 4
  %v0_9a10 = call i32 @function_eb48()
  %v0_9a14 = load i32, i32* @r4, align 4
  %v1_9a18 = and i32 %v0_9a14, 65280
  %v3_9a20 = mul i32 %v0_9a14, 16777216
  %v4_9a24 = mul nuw nsw i32 %v1_9a18, 256
  %v5_9a24 = or i32 %v4_9a24, %v3_9a20
  store i32 %v5_9a24, i32* %r1.global-to-local, align 4
  %v0_9a2c = load i32, i32* @r5, align 4
  %v1_9a2c = add i32 %v0_9a2c, 20
  %v2_9a2c = inttoptr i32 %v1_9a2c to i8*
  %v3_9a2c = load i8, i8* %v2_9a2c, align 1
  %v4_9a2c = zext i8 %v3_9a2c to i32
  %v2_9a30 = call i32 @llvm.bswap.i32(i32 %v0_9a14)
  %v7_9a34 = lshr i32 %v0_9a10, %v4_9a2c
  %v8_9a34 = add i32 %v7_9a34, %v2_9a30
  %v3_9a40 = mul i32 %v8_9a34, 16777216
  %v1_9a44 = and i32 %v8_9a34, 65280
  %v4_9a48 = mul nuw nsw i32 %v1_9a44, 256
  %v5_9a48 = or i32 %v4_9a48, %v3_9a40
  store i32 %v5_9a48, i32* %r1.global-to-local, align 4
  %v2_9a50 = call i32 @llvm.bswap.i32(i32 %v8_9a34)
  %v2_9a54 = add i32 %v0_9a2c, 4
  %v3_9a54 = inttoptr i32 %v2_9a54 to i32*
  store i32 %v2_9a50, i32* %v3_9a54, align 4
  %v0_9a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_99e4, %dec_label_pc_9a0c
  %v0_9a64 = phi i32 [ %v0_9a00, %dec_label_pc_99e4 ], [ %v0_9a64.pre, %dec_label_pc_9a0c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @sb, align 4
  %v2_9a60 = add i32 %v1_9a60, %stack_var_-60.0
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  %v4_9a60 = load i32, i32* %v3_9a60, align 4
  store i32 %v0_9a64, i32* %r1.global-to-local, align 4
  %v3_9a68 = inttoptr i32 %v0_9a64 to %sockaddr*
  %v4_9a68 = call i32 @function_12518(i32 %v4_9a60, %sockaddr* %v3_9a68, i32 16)
  %v1_9a74 = add i32 %stack_var_-60.0, 4
  %v1_9a78 = load i32, i32* @r7, align 4
  %v9_9a78 = icmp eq i32 %v1_99b0, %v1_9a78
  %v0_9a80 = load i32, i32* @r5, align 4
  %v1_9a80 = add i32 %v0_9a80, 24
  store i32 %v1_9a80, i32* @r5, align 4
  br i1 %v9_9a78, label %dec_label_pc_9afc.preheader, label %dec_label_pc_9a88

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_995c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_9a74, %dec_label_pc_9a58 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_99b0, %dec_label_pc_9a58 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9a94 = call i32 @function_129a8(i32 65535, i32 1)
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v2_9aa8 = load i32, i32* @sl, align 4
  %v3_9aa8 = add i32 %v2_9aa8, %stack_var_-60.0
  %v4_9aa8 = inttoptr i32 %v3_9aa8 to i32*
  store i32 %v2_9a94, i32* %v4_9aa8, align 4
  br i1 %v3_9aa4, label %dec_label_pc_9ab0, label %dec_label_pc_999c

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9a88
  %v0_9ab0 = call i32 @function_eb48()
  %v1_9ab0 = trunc i32 %v0_9ab0 to i8
  %v4_9ab4 = sdiv i32 %v0_9ab0, 256
  %v1_9ab8 = trunc i32 %v4_9ab4 to i8
  %v2_9ab8 = load i32, i32* @r5, align 4
  %v3_9ab8 = add i32 %v2_9ab8, 3
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v1_9ab8, i8* %v4_9ab8, align 1
  %v3_9abc = load i32, i32* @r5, align 4
  %v4_9abc = add i32 %v3_9abc, 2
  %v5_9abc = inttoptr i32 %v4_9abc to i8*
  store i8 %v1_9ab0, i8* %v5_9abc, align 1
  br label %dec_label_pc_99a8

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9afc.loopexit, %dec_label_pc_9afc.preheader, %dec_label_pc_9b00.loopexit, %dec_label_pc_9ac4
  br label %dec_label_pc_9ac4

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9ac8.lr.ph, %dec_label_pc_9b00.loopexit
  %v0_9ac8 = load i32, i32* @r8, align 4
  %v2_9ac8 = icmp eq i32 %v0_9ac8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9ac8, label %dec_label_pc_9ad0, label %dec_label_pc_9b10

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_9ad8

dec_label_pc_9ad8:                                ; preds = %dec_label_pc_9ad8, %dec_label_pc_9ad0
  %v0_9ae0 = phi i32 [ %v1_9ae0, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v0_9ad8 = phi i32 [ %v1_9af4, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v1_9ad8 = load i32, i32* @sb, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v0_9ad8
  %v3_9ad8 = inttoptr i32 %v2_9ad8 to i32*
  %v4_9ad8 = load i32, i32* %v3_9ad8, align 4
  %v1_9adc = load i32, i32* @sl, align 4
  %v2_9adc = add i32 %v1_9adc, %v0_9ad8
  %v3_9adc = inttoptr i32 %v2_9adc to i32*
  %v4_9adc = load i32, i32* %v3_9adc, align 4
  store i32 %v4_9adc, i32* %r1.global-to-local, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1
  %v0_9ae4 = load i32, i32* @r6, align 4
  %v4_9aec = inttoptr i32 %v4_9adc to i32*
  %v5_9aec = call i32 @function_1262c(i32 %v4_9ad8, i32* %v4_9aec, i32 %v0_9ae4, i32 16384)
  %v1_9af0 = load i32, i32* @r7, align 4
  %v9_9af0 = icmp eq i32 %v1_9ae0, %v1_9af0
  %v0_9af4 = load i32, i32* @r4, align 4
  %v1_9af4 = add i32 %v0_9af4, 4
  store i32 %v1_9af4, i32* @r4, align 4
  br i1 %v9_9af0, label %dec_label_pc_9afc.loopexit, label %dec_label_pc_9ad8

dec_label_pc_9afc.loopexit:                       ; preds = %dec_label_pc_9ad8
  %tmp4247 = icmp slt i32 %v1_9ae0, 1
  br i1 %tmp4247, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_9ac8.lr.ph:                          ; preds = %dec_label_pc_9afc.preheader, %dec_label_pc_9afc.loopexit
  br label %dec_label_pc_9ac8

dec_label_pc_9b00.loopexit:                       ; preds = %dec_label_pc_9b18
  %tmp42 = icmp slt i32 %v0_9b40, 1
  br i1 %tmp42, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8

dec_label_pc_9b08:                                ; preds = %dec_label_pc_99a8
  store i32 %v24_9870, i32* %fp.global-to-local, align 4
  ret i32 %v3_99c0

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9b18

dec_label_pc_9b18:                                ; preds = %dec_label_pc_9b18, %dec_label_pc_9b10
  %v0_9b18 = phi i32 [ %v1_9b44, %dec_label_pc_9b18 ], [ 0, %dec_label_pc_9b10 ]
  %v1_9b18 = load i32, i32* @sl, align 4
  %v2_9b18 = add i32 %v1_9b18, %v0_9b18
  %v3_9b18 = inttoptr i32 %v2_9b18 to i32*
  %v4_9b18 = load i32, i32* %v3_9b18, align 4
  store i32 %v4_9b18, i32* @r4, align 4
  %v0_9b1c = load i32, i32* @r6, align 4
  store i32 %v0_9b1c, i32* @r1, align 4
  %v1_9b24 = inttoptr i32 %v4_9b18 to i8*
  %v2_9b24 = call i32 @function_ecc8(i8* %v1_9b24)
  %v0_9b28 = load i32, i32* @r5, align 4
  %v1_9b28 = add i32 %v0_9b28, 1
  store i32 %v1_9b28, i32* @r5, align 4
  %v0_9b2c = load i32, i32* @fp, align 4
  %v1_9b2c = load i32, i32* @sb, align 4
  %v2_9b2c = add i32 %v1_9b2c, %v0_9b2c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i32*
  %v4_9b2c = load i32, i32* %v3_9b2c, align 4
  %v0_9b30 = load i32, i32* @r4, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* @r6, align 4
  %v4_9b3c = inttoptr i32 %v0_9b30 to i32*
  %v5_9b3c = call i32 @function_1262c(i32 %v4_9b2c, i32* %v4_9b3c, i32 %v0_9b34, i32 16384)
  %v0_9b40 = load i32, i32* @r5, align 4
  %v1_9b40 = load i32, i32* @r7, align 4
  %v9_9b40 = icmp eq i32 %v0_9b40, %v1_9b40
  %v0_9b44 = load i32, i32* @fp, align 4
  %v1_9b44 = add i32 %v0_9b44, 4
  store i32 %v1_9b44, i32* @fp, align 4
  br i1 %v9_9b40, label %dec_label_pc_9b00.loopexit, label %dec_label_pc_9b18

; uselistorder directives
  uselistorder i32 %v1_9b44, { 1, 0 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i32 %v1_9af4, { 1, 0 }
  uselistorder i32 %v1_9ae0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_9a64, { 1, 0 }
  uselistorder i32 %v8_9a34, { 1, 2, 0 }
  uselistorder i32 %v0_9a14, { 1, 0, 2 }
  uselistorder i32 %v3_99c0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_99b0, { 1, 2, 0 }
  uselistorder i32 %v3_9984, { 1, 0 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %v3_98c8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9874, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 14, 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9ac8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9ac8, { 1, 0 }
  uselistorder label %dec_label_pc_9ac4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9954, { 1, 0 }
}

define i32 @function_9b54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9b54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_9b58 = urem i32 %arg1, 256
  store i32 %v1_9b58, i32* @fp, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9b70 = urem i32 %arg3, 256
  store i32 %v1_9b70, i32* @r4, align 4
  %v2_9b74 = call i32 @function_129a8(i32 %v1_9b58, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9b80 = load i32, i32* @fp, align 4
  store i32 %v0_9b80, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_129a8(i32 %v0_9b80, i32 4)
  %v0_9b88 = load i32, i32* @r5, align 4
  store i32 %v0_9b88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @r4, align 4
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v5_9b9c = inttoptr i32 %v0_9b88 to i32*
  %v6_9b9c = call i32 @function_85e0(i32 %v0_9b98, i32* %v5_9b9c, i32 2, i32 0, i32 %v2_9b84)
  %v1_9ba8 = urem i32 %v6_9b9c, 256
  store i32 %v1_9ba8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9bb4 = load i32, i32* @r5, align 4
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r4, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_9b9c, 16777216
  %v5_9bc0 = sdiv i32 %sext, 16777216
  %v6_9bc0 = inttoptr i32 %v0_9bb4 to i32*
  %v7_9bc0 = call i32 @function_85e0(i32 %v0_9bb8, i32* %v6_9bc0, i32 3, i32 65535, i32 %v5_9bc0)
  %v0_9bc4 = load i32, i32* @r5, align 4
  store i32 %v0_9bc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9bc0, i32* @r6, align 4
  %v0_9bd4 = load i32, i32* @r4, align 4
  store i32 %v0_9bd4, i32* %r0.global-to-local, align 4
  %v5_9bd8 = inttoptr i32 %v0_9bc4 to i32*
  %v6_9bd8 = call i32 @function_85e0(i32 %v0_9bd4, i32* %v5_9bd8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9be0 = urem i32 %v6_9bd8, 256
  store i32 %v1_9be0, i32* %ip.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r5, align 4
  store i32 %v0_9be4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9bf0 = load i32, i32* @r4, align 4
  store i32 %v0_9bf0, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_9bd8, 16777216
  %v5_9bf8 = sdiv i32 %sext6, 16777216
  %v6_9bf8 = inttoptr i32 %v0_9be4 to i32*
  %v7_9bf8 = call i32 @function_85e0(i32 %v0_9bf0, i32* %v6_9bf8, i32 5, i32 1, i32 %v5_9bf8)
  %v1_9c04 = urem i32 %v7_9bf8, 256
  store i32 %v1_9c04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  store i32 %v0_9c0c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9c14 = load i32, i32* @r4, align 4
  store i32 %v0_9c14, i32* %r0.global-to-local, align 4
  %v5_9c1c = inttoptr i32 %v0_9c0c to i32*
  %v6_9c1c = call i32 @function_85e0(i32 %v0_9c14, i32* %v5_9c1c, i32 7, i32 65535, i32 %v1_9c04)
  %v0_9c20 = load i32, i32* @r5, align 4
  store i32 %v0_9c20, i32* %r1.global-to-local, align 4
  %v3_9c24 = mul i32 %v6_9c1c, 65536
  store i32 %v3_9c24, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r4, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v5_9c34 = inttoptr i32 %v0_9c20 to i32*
  %v6_9c34 = call i32 @function_85e0(i32 %v0_9c30, i32* %v5_9c34, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9c3c = urem i32 %v6_9c34, 256
  store i32 %v1_9c3c, i32* %ip.global-to-local, align 4
  %v0_9c40 = load i32, i32* @r5, align 4
  store i32 %v0_9c40, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r4, align 4
  store i32 %v0_9c4c, i32* %r0.global-to-local, align 4
  %v5_9c54 = inttoptr i32 %v0_9c40 to i32*
  %v6_9c54 = call i32 @function_85e0(i32 %v0_9c4c, i32* %v5_9c54, i32 12, i32 1, i32 %v1_9c3c)
  %v1_9c5c = urem i32 %v6_9c54, 256
  store i32 %v1_9c5c, i32* %ip.global-to-local, align 4
  %v0_9c60 = load i32, i32* @r5, align 4
  store i32 %v0_9c60, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c6c = load i32, i32* @r4, align 4
  store i32 %v0_9c6c, i32* %r0.global-to-local, align 4
  %v5_9c74 = inttoptr i32 %v0_9c60 to i32*
  %v6_9c74 = call i32 @function_85e0(i32 %v0_9c6c, i32* %v5_9c74, i32 13, i32 1, i32 %v1_9c5c)
  %v1_9c7c = urem i32 %v6_9c74, 256
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_9c80 = load i32, i32* @r5, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r4, align 4
  store i32 %v0_9c8c, i32* %r0.global-to-local, align 4
  %v5_9c94 = inttoptr i32 %v0_9c80 to i32*
  %v6_9c94 = call i32 @function_85e0(i32 %v0_9c8c, i32* %v5_9c94, i32 14, i32 1, i32 %v1_9c7c)
  %v1_9c9c = urem i32 %v6_9c94, 256
  store i32 %v1_9c9c, i32* %ip.global-to-local, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_85e0(i32 %v0_9cac, i32* %v5_9cb4, i32 15, i32 1, i32 %v1_9c9c)
  %v1_9cbc = urem i32 %v6_9cb4, 256
  store i32 %v1_9cbc, i32* %ip.global-to-local, align 4
  %v0_9cc0 = load i32, i32* @r5, align 4
  store i32 %v0_9cc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v5_9cd4 = inttoptr i32 %v0_9cc0 to i32*
  %v6_9cd4 = call i32 @function_85e0(i32 %v0_9ccc, i32* %v5_9cd4, i32 16, i32 1, i32 %v1_9cbc)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_9cd4, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  store i32 %v0_9ce4, i32* %r1.global-to-local, align 4
  %v0_9ce8 = load i32, i32* @r4, align 4
  store i32 %v0_9ce8, i32* %r0.global-to-local, align 4
  %v1_9cec = urem i32 %v6_9cd4, 256
  store i32 %v1_9cec, i32* @r8, align 4
  %v5_9cf0 = inttoptr i32 %v0_9ce4 to i32*
  %v6_9cf0 = call i32 @function_85e0(i32 %v0_9ce8, i32* %v5_9cf0, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cfc = load i32, i32* @r5, align 4
  store i32 %v0_9cfc, i32* %r1.global-to-local, align 4
  store i32 %v6_9cf0, i32* @sb, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  store i32 %v0_9d04, i32* %r0.global-to-local, align 4
  %v5_9d08 = inttoptr i32 %v0_9cfc to i32*
  %v6_9d08 = call i32 @function_85e0(i32 %v0_9d04, i32* %v5_9d08, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_9d14 = urem i32 %v6_9d08, 256
  store i32 %v1_9d14, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d24 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r7, align 4
  %v3_9d28 = udiv i32 %v0_9d28, 65536
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  %v7_9d2c = icmp eq i32 %v3_9d24, -1
  store i1 %v7_9d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d2c, label %dec_label_pc_9f88, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9b54
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9d44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9d44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9d58 = call i32 @function_1268c(i32 %v3_9d24, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9d58, i32* %r0.global-to-local, align 4
  %v7_9d5c = icmp eq i32 %v6_9d58, -1
  store i1 %v7_9d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d5c, label %dec_label_pc_9f80, label %dec_label_pc_9d64

dec_label_pc_9d64:                                ; preds = %dec_label_pc_9d3c
  %v0_9d64 = load i32, i32* @fp, align 4
  %v2_9d64 = icmp eq i32 %v0_9d64, 0
  store i1 %v2_9d64, i1* %cpsr_z.global-to-local, align 1
  %v0_9d68 = load i32, i32* @r6, align 4
  %v3_9d68 = mul i32 %v0_9d68, 65536
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d68, 65536
  store i32 %v3_9d6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9d64, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_9d90.preheader

.thread18:                                        ; preds = %dec_label_pc_9d64
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a214

dec_label_pc_9d90.preheader:                      ; preds = %dec_label_pc_9d64
  %v5_9d74 = load i32, i32* @r7, align 4
  %v8_9d74 = udiv i32 %v5_9d74, 16777216
  %tmp73 = udiv i32 %v0_9d68, 256
  %v8_9d78 = urem i32 %tmp73, 256
  store i32 %v8_9d78, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9e7c = icmp ugt i32 %v0_9d28, -65537
  %v2_9ea0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9eac = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_9edc = ptrtoint i32* %stack_var_-76 to i32
  %v2_9ee0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9ee4 = ptrtoint i32* %stack_var_-332 to i32
  %v4_9f30 = zext i8 %tmp31 to i32
  %v4_9f34 = zext i8 %tmp30 to i32
  %v4_9f40 = mul nuw nsw i32 %v4_9f34, 256
  %v4_9f50 = zext i8 %tmp to i32
  %v1_9f54 = and i32 %v4_9f50, 18
  %v2_9f58 = icmp eq i32 %v1_9f54, 18
  %v1_9e8c = mul nuw nsw i32 %v3_9d28, 256
  %v4_9e90 = and i32 %v1_9e8c, 65280
  %v5_9e90 = or i32 %v8_9d74, %v4_9e90
  %v3_9e9493 = udiv i32 %v4_9e90, 256
  %v1_9e98 = trunc i32 %v3_9e9493 to i8
  %v1_a05c = mul i32 %v0_9d68, 256
  %v4_a064 = and i32 %v1_a05c, 65280
  %v5_9f40 = or i32 %v4_9f30, %v4_9f40
  %v1_9f60 = and i32 %v4_9f50, 5
  %v2_9f60 = icmp eq i32 %v1_9f60, 0
  %v1_9e9c = trunc i32 %v8_9d74 to i8
  %v5_a064 = or i32 %v8_9d78, %v4_a064
  %v1_a084 = trunc i32 %v5_9bc0 to i8
  %v1_a164 = urem i32 %v6_9c34, 2
  %tmp94 = sub nsw i32 0, %v1_a164
  %v4_a16c = and i32 %tmp94, 32
  %v1_a17c = urem i32 %v6_9c54, 2
  %tmp95 = sub nsw i32 0, %v1_a17c
  %v4_a184 = and i32 %tmp95, 16
  %v1_a194 = urem i32 %v6_9c74, 2
  %tmp96 = sub nsw i32 0, %v1_a194
  %v4_a19c = and i32 %tmp96, 8
  %v1_a1ac = urem i32 %v6_9c94, 2
  %tmp97 = sub nsw i32 0, %v1_a1ac
  %v4_a1b4 = and i32 %tmp97, 4
  %v1_a1c4 = urem i32 %v6_9cb4, 2
  %tmp98 = sub nsw i32 0, %v1_a1c4
  %v3_a1cc = and i32 %tmp98, 2
  br label %dec_label_pc_9d90

dec_label_pc_9d90:                                ; preds = %dec_label_pc_a200, %dec_label_pc_9f68, %dec_label_pc_9d90.preheader
  store i32 %v8_9d78, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @sb, align 4
  %v1_9d9c = add i32 %v0_9d9c, 40
  store i32 %v1_9d9c, i32* @sl, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9da0:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9d90
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9dac = call i32 @function_126bc(i32 2, i32 1, i32 0)
  store i32 %v3_9dac, i32* %r0.global-to-local, align 4
  %v7_9db0 = icmp eq i32 %v3_9dac, -1
  store i1 %v7_9db0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9dac, i32* @r7, align 4
  br i1 %v7_9db0, label %dec_label_pc_a200, label %dec_label_pc_9dbc

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9dc4 = call i32 @function_11cdc(i32 %v3_9dac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9dcc = or i32 %v2_9dc4, 2048
  store i32 %v1_9dcc, i32* @r2, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  store i32 %v0_9dd0, i32* %r0.global-to-local, align 4
  %v2_9dd4 = call i32 @function_11cdc(i32 %v0_9dd0, i32 4)
  store i32 %v2_9dd4, i32* %r0.global-to-local, align 4
  %v3_9dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9de8 = mul i32 %v3_9dd8, 24
  store i32 %v5_9de8, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9df8 = add i32 %v5_9de8, %arg2
  store i32 %v2_9df8, i32* %r2.global-to-local, align 4
  %v1_9dfc = add i32 %v2_9df8, 20
  %v2_9dfc = inttoptr i32 %v1_9dfc to i8*
  %v3_9dfc = load i8, i8* %v2_9dfc, align 1
  %v4_9dfc = zext i8 %v3_9dfc to i32
  store i32 %v4_9dfc, i32* %r3.global-to-local, align 4
  %v2_9e00 = icmp ugt i8 %v3_9dfc, 30
  %v7_9e00 = icmp eq i8 %v3_9dfc, 31
  store i1 %v7_9e00, i1* %cpsr_z.global-to-local, align 1
  %v2_9e04 = xor i1 %v7_9e00, true
  %v3_9e04 = and i1 %v2_9e00, %v2_9e04
  %v5_9e04 = add i32 %v2_9df8, 16
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  br i1 %v3_9e04, label %dec_label_pc_9e70, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9dbc
  store i32 %v7_9e04, i32* @r4, align 4
  %v0_9e14 = call i32 @function_eb48()
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_9e24 = mul i32 %v3_9e18, 24
  %v0_9e28 = load i32, i32* @r4, align 4
  %v2_9e2c = add i32 %v5_9e24, %arg2
  store i32 %v2_9e2c, i32* %r1.global-to-local, align 4
  %v1_9e30 = and i32 %v0_9e28, 65280
  store i32 %v1_9e30, i32* %r3.global-to-local, align 4
  %v1_9e28 = udiv i32 %v0_9e28, 256
  %v3_9e34 = and i32 %v1_9e28, 65280
  store i32 %v3_9e34, i32* %r2.global-to-local, align 4
  %v3_9e38 = mul i32 %v0_9e28, 16777216
  store i32 %v3_9e38, i32* %ip.global-to-local, align 4
  %v1_9e3c = add i32 %v2_9e2c, 20
  %v2_9e3c = inttoptr i32 %v1_9e3c to i8*
  %v3_9e3c = load i8, i8* %v2_9e3c, align 1
  %v4_9e3c = zext i8 %v3_9e3c to i32
  store i32 %v4_9e3c, i32* %lr.global-to-local, align 4
  %v4_9e40 = mul nuw nsw i32 %v1_9e30, 256
  %v5_9e40 = or i32 %v4_9e40, %v3_9e38
  store i32 %v5_9e40, i32* %ip.global-to-local, align 4
  %v2_9e48 = call i32 @llvm.bswap.i32(i32 %v0_9e28)
  %v7_9e4c = lshr i32 %v0_9e14, %v4_9e3c
  %v8_9e4c = add i32 %v7_9e4c, %v2_9e48
  store i32 %v8_9e4c, i32* %r2.global-to-local, align 4
  %v3_9e58 = mul i32 %v8_9e4c, 16777216
  %v1_9e5c = and i32 %v8_9e4c, 65280
  store i32 %v1_9e5c, i32* %r0.global-to-local, align 4
  %v4_9e60 = mul nuw nsw i32 %v1_9e5c, 256
  %v5_9e60 = or i32 %v4_9e60, %v3_9e58
  store i32 %v5_9e60, i32* %r1.global-to-local, align 4
  %v2_9e68 = call i32 @llvm.bswap.i32(i32 %v8_9e4c)
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9dbc, %dec_label_pc_9e10
  %storemerge25 = phi i32 [ %v2_9e68, %dec_label_pc_9e10 ], [ %v7_9e04, %dec_label_pc_9dbc ]
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e7c, label %dec_label_pc_9f90, label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9e70
  store i32 %v8_9d74, i32* %ip.global-to-local, align 4
  store i32 %v5_9e90, i32* %r3.global-to-local, align 4
  store i32 %v3_9e9493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_9e84
  %stack_var_-57.0 = phi i8 [ %v1_9f98, %dec_label_pc_9f90 ], [ %v1_9e98, %dec_label_pc_9e84 ]
  %storemerge = phi i8 [ %v1_9f90, %dec_label_pc_9f90 ], [ %v1_9e9c, %dec_label_pc_9e84 ]
  store i32 %v2_9ea0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r7, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = call i32 @function_12518(i32 %v0_9ea8, %sockaddr* nonnull %v3_9eac, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9eb4 = call i32 @function_12070(i32* null)
  store i32 %v2_9eb4, i32* %r0.global-to-local, align 4
  store i32 %v2_9eb4, i32* @r4, align 4
  %v9_9f14 = icmp eq i32 %tmp32, %storemerge25
  %v4_9f38 = zext i8 %storemerge to i32
  %v4_9f3c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9f14 to i32
  %v9_9f28 = icmp eq i1 %v9_9f14, false
  %v4_9f44 = mul nuw nsw i32 %v4_9f3c, 256
  %v5_9f44 = or i32 %v4_9f44, %v4_9f38
  %v9_9f48 = icmp eq i32 %v5_9f44, %v5_9f40
  br label %dec_label_pc_9ed0

dec_label_pc_9ec0:                                ; preds = %.thread23, %dec_label_pc_9f30, %dec_label_pc_9f60, %bb75
  %v2_9ec0 = call i32 @function_12070(i32* null)
  %v0_9ec4 = load i32, i32* @r4, align 4
  %v2_9ec4 = sub i32 %v2_9ec0, %v0_9ec4
  store i32 %v2_9ec4, i32* %r0.global-to-local, align 4
  %v7_9ec8 = icmp eq i32 %v2_9ec4, 10
  store i1 %v7_9ec8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ecc = icmp sgt i32 %v2_9ec4, 10
  br i1 %v8_9ecc, label %dec_label_pc_9f74, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec0, %dec_label_pc_9ea0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_9edc, i32* %lr.global-to-local, align 4
  store i32 %v2_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v2_9ee4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v7_9ef8 = call i32 @function_125f8(i32 %v3_9d24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9edc, i32 %v2_9ee0)
  store i32 %v7_9ef8, i32* %r2.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v7_9ef8, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9f00, label %dec_label_pc_9f88, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9ed0
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9f20 = icmp eq i32 %v7_9ef8, 40
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_9ef8, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_9f0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9ec0

bb75:                                             ; preds = %dec_label_pc_9f0c
  store i1 %v9_9f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f28, label %dec_label_pc_9ec0, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %bb75
  store i32 %v4_9f34, i32* %r1.global-to-local, align 4
  store i32 %v4_9f38, i32* %ip.global-to-local, align 4
  store i32 %v4_9f3c, i32* %r2.global-to-local, align 4
  store i32 %v5_9f40, i32* %r3.global-to-local, align 4
  store i32 %v5_9f44, i32* @r5, align 4
  store i1 %v9_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f48, label %dec_label_pc_9f50, label %dec_label_pc_9ec0

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f30
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  store i32 %v1_9f54, i32* %r3.global-to-local, align 4
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f58, label %dec_label_pc_9fa4, label %dec_label_pc_9f60

dec_label_pc_9f60:                                ; preds = %dec_label_pc_9f50
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f60, label %dec_label_pc_9ec0, label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f60
  %v0_9f68 = load i32, i32* @r7, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v1_9f6c = call i32 @function_11da0(i32 %v0_9f68)
  store i32 %v1_9f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d90

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9ec0
  %v0_9f74 = load i32, i32* @r7, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v1_9f78 = call i32 @function_11da0(i32 %v0_9f74)
  store i32 %v1_9f78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9f80:                                ; preds = %dec_label_pc_9d3c
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v1_9f84 = call i32 @function_11da0(i32 %v3_9d24)
  store i32 %v1_9f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9b54, %dec_label_pc_9f80
  %v29_9f8c = phi i32 [ %v3_9d24, %dec_label_pc_9b54 ], [ %v1_9f84, %dec_label_pc_9f80 ], [ 0, %dec_label_pc_9ed0 ]
  ret i32 %v29_9f8c

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9e70
  %v0_9f90 = call i32 @function_eb48()
  %v1_9f90 = trunc i32 %v0_9f90 to i8
  store i32 %v0_9f90, i32* %r0.global-to-local, align 4
  %v4_9f94 = sdiv i32 %v0_9f90, 256
  store i32 %v4_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v4_9f94 to i8
  br label %dec_label_pc_9ea0

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f50
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_9fac = mul i32 %v3_9fa4, 16
  store i32 %v3_9fac, i32* %ip.global-to-local, align 4
  %v3_9fb0 = add i32 %v3_9fac, %v2_9b74
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i32*
  store i32 %storemerge25, i32* %v4_9fb0, align 4
  %v0_9fb4 = load i32, i32* @r6, align 4
  %v1_9fb4 = add i32 %v0_9fb4, 4
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i32*
  %v3_9fb4 = load i32, i32* %v2_9fb4, align 4
  store i32 %v3_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = and i32 %v3_9fb4, 65280
  store i32 %v1_9fbc, i32* %r1.global-to-local, align 4
  store i32 %v2_9b74, i32* %lr.global-to-local, align 4
  %v3_9fc4 = mul i32 %v3_9fb4, 16777216
  %v4_9fcc = mul nuw nsw i32 %v1_9fbc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v3_9fc4
  store i32 %v5_9fcc, i32* %r2.global-to-local, align 4
  %v1_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fd4 = add i32 %v1_9fd4, %v2_9b74
  store i32 %v2_9fd4, i32* %ip.global-to-local, align 4
  %v2_9fd8 = call i32 @llvm.bswap.i32(i32 %v3_9fb4)
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  %v2_9fdc = add i32 %v2_9fd4, 4
  %v3_9fdc = inttoptr i32 %v2_9fdc to i32*
  store i32 %v2_9fd8, i32* %v3_9fdc, align 4
  %v0_9fe0 = load i32, i32* @r6, align 4
  %v1_9fe0 = add i32 %v0_9fe0, 8
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i32*
  %v3_9fe0 = load i32, i32* %v2_9fe0, align 4
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v1_9fe8 = and i32 %v3_9fe0, 65280
  store i32 %v1_9fe8, i32* %r1.global-to-local, align 4
  %v3_9fec = mul i32 %v3_9fe0, 16777216
  %v4_9ff4 = mul nuw nsw i32 %v1_9fe8, 256
  %v5_9ff4 = or i32 %v4_9ff4, %v3_9fec
  store i32 %v5_9ff4, i32* %r2.global-to-local, align 4
  %v2_9ffc = call i32 @llvm.bswap.i32(i32 %v3_9fe0)
  store i32 %v2_9ffc, i32* %r3.global-to-local, align 4
  %v1_a000 = load i32, i32* %ip.global-to-local, align 4
  %v2_a000 = add i32 %v1_a000, 8
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v2_9ffc, i32* %v3_a000, align 4
  %v0_a004 = load i32, i32* @r6, align 4
  %v1_a004 = inttoptr i32 %v0_a004 to i32*
  %v2_a004 = load i32, i32* %v1_a004, align 4
  %v3_a008 = udiv i32 %v2_a004, 65536
  store i32 %v3_a008, i32* %r2.global-to-local, align 4
  %v3_a00c3 = udiv i32 %v2_a004, 16777216
  store i32 %v3_a00c3, i32* %r1.global-to-local, align 4
  %v0_a010 = load i32, i32* @r5, align 4
  %v3_a010 = sdiv i32 %v0_a010, 256
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v3_a010 to i8
  %v2_a014 = load i32, i32* %ip.global-to-local, align 4
  %v3_a014 = add i32 %v2_a014, 15
  %v4_a014 = inttoptr i32 %v3_a014 to i8*
  store i8 %v1_a014, i8* %v4_a014, align 1
  %v0_a018 = load i32, i32* %r1.global-to-local, align 4
  %v1_a018 = trunc i32 %v0_a018 to i8
  %v2_a018 = load i32, i32* %ip.global-to-local, align 4
  %v3_a018 = add i32 %v2_a018, 13
  %v4_a018 = inttoptr i32 %v3_a018 to i8*
  store i8 %v1_a018, i8* %v4_a018, align 1
  %v0_a01c = load i32, i32* %r2.global-to-local, align 4
  %v1_a01c = trunc i32 %v0_a01c to i8
  %v2_a01c = load i32, i32* %ip.global-to-local, align 4
  %v3_a01c = add i32 %v2_a01c, 12
  %v4_a01c = inttoptr i32 %v3_a01c to i8*
  store i8 %v1_a01c, i8* %v4_a01c, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  %v1_a020 = trunc i32 %v0_a020 to i8
  %v2_a020 = load i32, i32* %ip.global-to-local, align 4
  %v3_a020 = add i32 %v2_a020, 14
  %v4_a020 = inttoptr i32 %v3_a020 to i8*
  store i8 %v1_a020, i8* %v4_a020, align 1
  %v0_a024 = load i32, i32* @sl, align 4
  store i32 %v0_a024, i32* %r0.global-to-local, align 4
  %v1_a028 = call i32 @function_12854(i32 %v0_a024)
  store i32 %v1_a028, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* %r1.global-to-local, align 4
  %v3_a030 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a030, i32* %r2.global-to-local, align 4
  %v2_a034 = load i32, i32* @r4, align 4
  %v5_a034 = mul i32 %v2_a034, 4
  %v6_a034 = add i32 %v5_a034, %v2_9b84
  %v7_a034 = inttoptr i32 %v6_a034 to i32*
  store i32 %v1_a028, i32* %v7_a034, align 4
  %v0_a038 = load i32, i32* %r1.global-to-local, align 4
  %v1_a038 = load i32, i32* %r2.global-to-local, align 4
  %v4_a038 = mul i32 %v1_a038, 4
  %v5_a038 = add i32 %v4_a038, %v0_a038
  %v6_a038 = inttoptr i32 %v5_a038 to i32*
  %v7_a038 = load i32, i32* %v6_a038, align 4
  store i32 %v7_a038, i32* @r4, align 4
  %v1_a03c = inttoptr i32 %v7_a038 to i8*
  %v2_a03c = load i8, i8* %v1_a03c, align 1
  %tmp100 = urem i8 %v2_a03c, 16
  %v1_a040 = zext i8 %tmp100 to i32
  %v1_a044 = or i32 %v1_a040, 64
  store i32 %v1_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v1_a044 to i8
  store i8 %v1_a048, i8* %v1_a03c, align 1
  %v0_a04c = load i32, i32* @r4, align 4
  %v1_a04c = inttoptr i32 %v0_a04c to i8*
  %v2_a04c = load i8, i8* %v1_a04c, align 1
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_a058 = and i8 %v2_a04c, -16
  %v1_a060 = or i8 %v1_a058, 5
  store i32 %v5_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @sl, align 4
  %v3_a068 = mul i32 %v0_a068, 65536
  store i32 %v3_a068, i32* %r2.global-to-local, align 4
  store i32 %v1_9c04, i32* %lr.global-to-local, align 4
  store i8 %v1_a060, i8* %v1_a04c, align 1
  store i32 %v5_9bc0, i32* %r1.global-to-local, align 4
  %v0_a078 = load i32, i32* %r2.global-to-local, align 4
  %v3_a078 = udiv i32 %v0_a078, 65536
  %v1_a07c = urem i32 %v3_a078, 256
  store i32 %v1_a07c, i32* %r3.global-to-local, align 4
  %v3_a080 = udiv i32 %v0_a078, 16777216
  store i32 %v3_a080, i32* %r2.global-to-local, align 4
  %v2_a084 = load i32, i32* @r4, align 4
  %v3_a084 = add i32 %v2_a084, 1
  %v4_a084 = inttoptr i32 %v3_a084 to i8*
  store i8 %v1_a084, i8* %v4_a084, align 1
  %v0_a088 = load i32, i32* %r2.global-to-local, align 4
  %v1_a088 = load i32, i32* %r3.global-to-local, align 4
  %v4_a088 = mul i32 %v1_a088, 256
  %v5_a088 = or i32 %v4_a088, %v0_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v0_a088 to i8
  %v2_a08c = load i32, i32* @r4, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* %lr.global-to-local, align 4
  %v2_a090 = icmp eq i32 %v0_a090, 0
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v0_a094 = load i32, i32* %r2.global-to-local, align 4
  %v3_a094 = sdiv i32 %v0_a094, 256
  store i32 %v3_a094, i32* %r3.global-to-local, align 4
  store i32 %v5_9bf8, i32* %r2.global-to-local, align 4
  %v1_a09c = trunc i32 %v3_a094 to i8
  %v2_a09c = load i32, i32* @r4, align 4
  %v3_a09c = add i32 %v2_a09c, 3
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v0_a0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a0, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_9fa4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_9fa4, %bb76
  %v0_a0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a4 = trunc i32 %v0_a0a4 to i8
  %v2_a0a4 = load i32, i32* @r4, align 4
  %v3_a0a4 = add i32 %v2_a0a4, 8
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a8, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a0a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_a0a8 = trunc i32 %v1_a0a8 to i8
  %v3_a0a8 = load i32, i32* @r4, align 4
  %v4_a0a8 = add i32 %v3_a0a8, 6
  %v5_a0a8 = inttoptr i32 %v4_a0a8 to i8*
  store i8 %v2_a0a8, i8* %v5_a0a8, align 1
  %v0_a0ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0ac.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a0b4 = load i32, i32* @r4, align 4
  %v3_a0b4 = add i32 %v2_a0b4, 9
  %v4_a0b4 = inttoptr i32 %v3_a0b4 to i8*
  store i8 6, i8* %v4_a0b4, align 1
  %v0_a0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0b8, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a0b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a0b8 = trunc i32 %v1_a0b8 to i8
  %v3_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v3_a0b8, 7
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 %v2_a0b8, i8* %v5_a0b8, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a0c0 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_a0c0, i32* %r3.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a0c4 = sdiv i32 %v0_a0c4, 256
  store i32 %v3_a0c4, i32* %ip.global-to-local, align 4
  %v1_a0c8 = load i32, i32* @r4, align 4
  %v2_a0c8 = add i32 %v1_a0c8, 12
  %v3_a0c8 = inttoptr i32 %v2_a0c8 to i32*
  store i32 %v2_a0c0, i32* %v3_a0c8, align 4
  %v0_a0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_a0cc = trunc i32 %v0_a0cc to i8
  %v2_a0cc = load i32, i32* @r4, align 4
  %v3_a0cc = add i32 %v2_a0cc, 5
  %v4_a0cc = inttoptr i32 %v3_a0cc to i8*
  store i8 %v1_a0cc, i8* %v4_a0cc, align 1
  %v3_a0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0d0, i32* %r2.global-to-local, align 4
  store i32 %v2_9b74, i32* %ip.global-to-local, align 4
  %v4_a0d8 = mul i32 %v3_a0d0, 16
  %v5_a0d8 = add i32 %v4_a0d8, %v2_9b74
  %v6_a0d8 = inttoptr i32 %v5_a0d8 to i32*
  %v7_a0d8 = load i32, i32* %v6_a0d8, align 4
  store i32 %v7_a0d8, i32* %r3.global-to-local, align 4
  %v0_a0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_a0dc = trunc i32 %v0_a0dc to i8
  %v2_a0dc = load i32, i32* @r4, align 4
  %v3_a0dc = add i32 %v2_a0dc, 4
  %v4_a0dc = inttoptr i32 %v3_a0dc to i8*
  store i8 %v1_a0dc, i8* %v4_a0dc, align 1
  %v0_a0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a0e0 = load i32, i32* @r4, align 4
  %v2_a0e0 = add i32 %v1_a0e0, 16
  %v3_a0e0 = inttoptr i32 %v2_a0e0 to i32*
  store i32 %v0_a0e0, i32* %v3_a0e0, align 4
  %v0_a0e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a0e4 = mul i32 %v0_a0e4, 16
  %v1_a0e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a0e8 = add i32 %v1_a0e8, %v3_a0e4
  store i32 %v2_a0e8, i32* %r2.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e8, 13
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %r1.global-to-local, align 4
  %v1_a0f0 = add i32 %v2_a0e8, 12
  %v2_a0f0 = inttoptr i32 %v1_a0f0 to i8*
  %v3_a0f0 = load i8, i8* %v2_a0f0, align 1
  %v4_a0f0 = zext i8 %v3_a0f0 to i32
  %v4_a0f4 = mul nuw nsw i32 %v4_a0ec, 256
  %v5_a0f4 = or i32 %v4_a0f0, %v4_a0f4
  store i32 %v5_a0f4, i32* %r3.global-to-local, align 4
  %v2_a0f8 = load i32, i32* @r4, align 4
  %v3_a0f8 = add i32 %v2_a0f8, 20
  %v4_a0f8 = inttoptr i32 %v3_a0f8 to i8*
  store i8 %v3_a0f0, i8* %v4_a0f8, align 1
  %v0_a0fc = load i32, i32* @r4, align 4
  %v1_a0fc = add i32 %v0_a0fc, 20
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r3.global-to-local, align 4
  %v3_a100 = sdiv i32 %v0_a100, 256
  store i32 %v3_a100, i32* %r3.global-to-local, align 4
  %v1_a104 = trunc i32 %v3_a100 to i8
  %v3_a104 = add i32 %v0_a0fc, 21
  %v4_a104 = inttoptr i32 %v3_a104 to i8*
  store i8 %v1_a104, i8* %v4_a104, align 1
  %v0_a108 = load i32, i32* @r6, align 4
  %v1_a108 = add i32 %v0_a108, 13
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a10c = load i32, i32* %r2.global-to-local, align 4
  %v1_a10c = add i32 %v0_a10c, 8
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = or i32 %v4_a108, 1
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c, 15
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* %ip.global-to-local, align 4
  %v1_a118 = add i32 %v0_a10c, 14
  %v2_a118 = inttoptr i32 %v1_a118 to i8*
  %v3_a118 = load i8, i8* %v2_a118, align 1
  %v4_a118 = zext i8 %v3_a118 to i32
  store i32 %v4_a118, i32* %r0.global-to-local, align 4
  %v2_a11c = add i32 %v0_a108, 4
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v3_a10c, i32* %v3_a11c, align 4
  %v0_a120 = load i32, i32* %r2.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 4
  %v2_a120 = inttoptr i32 %v1_a120 to i32*
  %v3_a120 = load i32, i32* %v2_a120, align 4
  store i32 %v3_a120, i32* %lr.global-to-local, align 4
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* @r6, align 4
  %v3_a124 = add i32 %v2_a124, 13
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* @r6, align 4
  %v1_a128 = add i32 %v0_a128, 12
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %v4_a128 = zext i8 %v3_a128 to i32
  store i32 %v4_a128, i32* %r2.global-to-local, align 4
  %v1_a12c = add i32 %v0_a128, 13
  %v2_a12c = inttoptr i32 %v1_a12c to i8*
  %v3_a12c = load i8, i8* %v2_a12c, align 1
  %v4_a12c = zext i8 %v3_a12c to i32
  %v0_a130 = load i32, i32* %r0.global-to-local, align 4
  %v1_a130 = load i32, i32* %ip.global-to-local, align 4
  %v4_a130 = mul i32 %v1_a130, 256
  %v5_a130 = or i32 %v4_a130, %v0_a130
  store i32 %v5_a130, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a128, 16
  %v1_a134 = zext i8 %tmp101 to i32
  %v3_a138 = sdiv i32 %v5_a130, 256
  store i32 %v3_a138, i32* %r1.global-to-local, align 4
  %v1_a13c = or i32 %v1_a134, 128
  store i32 %v1_a13c, i32* %r2.global-to-local, align 4
  %v1_a140 = or i32 %v4_a12c, 16
  store i32 %v1_a140, i32* %r3.global-to-local, align 4
  %v1_a144 = trunc i32 %v3_a138 to i8
  %v3_a144 = add i32 %v0_a128, 3
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i32, i32* %lr.global-to-local, align 4
  %v1_a148 = load i32, i32* @r6, align 4
  %v2_a148 = add i32 %v1_a148, 8
  %v3_a148 = inttoptr i32 %v2_a148 to i32*
  store i32 %v0_a148, i32* %v3_a148, align 4
  %v0_a14c = load i32, i32* %r2.global-to-local, align 4
  %v1_a14c = trunc i32 %v0_a14c to i8
  %v2_a14c = load i32, i32* @r6, align 4
  %v3_a14c = add i32 %v2_a14c, 12
  %v4_a14c = inttoptr i32 %v3_a14c to i8*
  store i8 %v1_a14c, i8* %v4_a14c, align 1
  %v0_a150 = load i32, i32* %r3.global-to-local, align 4
  %v1_a150 = trunc i32 %v0_a150 to i8
  %v2_a150 = load i32, i32* @r6, align 4
  %v3_a150 = add i32 %v2_a150, 13
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v1_a150, i8* %v4_a150, align 1
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = trunc i32 %v0_a154 to i8
  %v2_a154 = load i32, i32* @r6, align 4
  %v3_a154 = add i32 %v2_a154, 2
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v1_a154, i8* %v4_a154, align 1
  %v0_a158 = call i32 @function_eb48()
  %v1_a158 = trunc i32 %v0_a158 to i8
  store i32 %v0_a158, i32* %r0.global-to-local, align 4
  store i32 %v1_9c3c, i32* %lr.global-to-local, align 4
  %v0_a160 = load i32, i32* @r6, align 4
  %v1_a160 = add i32 %v0_a160, 13
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v4_a160 = zext i8 %v3_a160 to i32
  store i32 %v1_a164, i32* %r2.global-to-local, align 4
  %v1_a168 = and i32 %v4_a160, 223
  %v5_a16c = or i32 %v1_a168, %v4_a16c
  store i32 %v5_a16c, i32* %r3.global-to-local, align 4
  %v1_a170 = trunc i32 %v5_a16c to i8
  store i8 %v1_a170, i8* %v2_a160, align 1
  store i32 %v1_9c5c, i32* %r1.global-to-local, align 4
  %v0_a178 = load i32, i32* @r6, align 4
  %v1_a178 = add i32 %v0_a178, 13
  %v2_a178 = inttoptr i32 %v1_a178 to i8*
  %v3_a178 = load i8, i8* %v2_a178, align 1
  %v4_a178 = zext i8 %v3_a178 to i32
  store i32 %v1_a17c, i32* %r3.global-to-local, align 4
  %v1_a180 = and i32 %v4_a178, 239
  %v5_a184 = or i32 %v1_a180, %v4_a184
  store i32 %v5_a184, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v5_a184 to i8
  store i8 %v1_a188, i8* %v2_a178, align 1
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_a190 = load i32, i32* @r6, align 4
  %v1_a190 = add i32 %v0_a190, 13
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v1_a194, i32* %r2.global-to-local, align 4
  %v1_a198 = and i32 %v4_a190, 247
  %v5_a19c = or i32 %v1_a198, %v4_a19c
  store i32 %v5_a19c, i32* %r3.global-to-local, align 4
  %v1_a1a0 = trunc i32 %v5_a19c to i8
  store i8 %v1_a1a0, i8* %v2_a190, align 1
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 13
  %v2_a1a8 = inttoptr i32 %v1_a1a8 to i8*
  %v3_a1a8 = load i8, i8* %v2_a1a8, align 1
  %v4_a1a8 = zext i8 %v3_a1a8 to i32
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v1_a1b0 = and i32 %v4_a1a8, 251
  %v5_a1b4 = or i32 %v1_a1b0, %v4_a1b4
  store i32 %v5_a1b4, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v5_a1b4 to i8
  store i8 %v1_a1b8, i8* %v2_a1a8, align 1
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r6, align 4
  %v1_a1c0 = add i32 %v0_a1c0, 13
  %v2_a1c0 = inttoptr i32 %v1_a1c0 to i8*
  %v3_a1c0 = load i8, i8* %v2_a1c0, align 1
  %v4_a1c0 = zext i8 %v3_a1c0 to i32
  store i32 %v1_a1c4, i32* %r2.global-to-local, align 4
  %v1_a1c8 = and i32 %v4_a1c0, 253
  %v4_a1cc = or i32 %v1_a1c8, %v3_a1cc
  store i32 %v4_a1cc, i32* %r3.global-to-local, align 4
  %v1_a1d0 = trunc i32 %v4_a1cc to i8
  store i8 %v1_a1d0, i8* %v2_a1c0, align 1
  %v0_a1d4 = load i32, i32* @r6, align 4
  %v1_a1d4 = add i32 %v0_a1d4, 13
  %v2_a1d4 = inttoptr i32 %v1_a1d4 to i8*
  %v3_a1d4 = load i8, i8* %v2_a1d4, align 1
  %v4_a1d4 = zext i8 %v3_a1d4 to i32
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v1_a1d8 = urem i32 %v0_a1d8, 2
  %v1_a1dc = and i32 %v4_a1d4, 254
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v4_a1e027 = udiv i32 %v0_a158, 256
  %v2_a1e4 = or i32 %v1_a1dc, %v1_a1d8
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v4_a1e027 to i8
  %v3_a1e8 = add i32 %v0_a1d4, 15
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 14
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a158, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v0_a1f0 to i8
  %v2_a1f0 = load i32, i32* @r6, align 4
  %v3_a1f0 = add i32 %v2_a1f0, 13
  %v4_a1f0 = inttoptr i32 %v3_a1f0 to i8*
  store i8 %v1_a1f0, i8* %v4_a1f0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 40
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @sb, align 4
  store i32 %v0_a1f8, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_ecc8(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a200

dec_label_pc_a200:                                ; preds = %dec_label_pc_9da0, %bb81
  %v3_a200 = load i32, i32* %stack_var_-40, align 4
  %v1_a204 = add i32 %v3_a200, 1
  store i32 %v1_a204, i32* %r3.global-to-local, align 4
  %v1_a208 = load i32, i32* @fp, align 4
  %v9_a208 = icmp eq i32 %v1_a204, %v1_a208
  store i1 %v9_a208, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a204, i32* %stack_var_-40, align 4
  %v5_a210 = icmp slt i32 %v1_a204, %v1_a208
  br i1 %v5_a210, label %dec_label_pc_9d90, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a200, %.thread18
  %v0_a21c12 = phi i32 [ %v0_9d64, %.thread18 ], [ %v1_a208, %dec_label_pc_a200 ]
  %v0_a214 = load i32, i32* @sb, align 4
  %v1_a214 = add i32 %v0_a214, 40
  store i32 %v1_a214, i32* @sl, align 4
  %v1_a218 = add i32 %v0_a214, 20
  store i32 %v1_a218, i32* @r7, align 4
  %v2_a268 = icmp eq i32 %v1_9d14, 0
  %v6_a248 = inttoptr i32 %v2_9b84 to i32*
  %v3_a250 = icmp eq i32 %v3_9d6c, 65535
  br label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a214
  %v0_a21c = phi i32 [ %v1_a358, %dec_label_pc_a278 ], [ %v0_a21c12, %dec_label_pc_a214 ]
  %v2_a21c = icmp eq i32 %v0_a21c, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_a21c, 1
  br label %dec_label_pc_a224

dec_label_pc_a224:                                ; preds = %dec_label_pc_a224, %dec_label_pc_a21c
  br i1 %tmp82, label %dec_label_pc_a224, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a224
  %v0_a228 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_a228, 256
  %v1_a230 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_a228, 256
  %v4_a234 = urem i32 %tmp84, 256
  %v5_a234 = or i32 %v4_a234, %v1_a230
  store i32 %v5_a234, i32* @r8, align 4
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v7_a248 = load i32, i32* %v6_a248, align 4
  store i32 %v7_a248, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_a25c = add i32 %v7_a248, 20
  store i32 %v1_a25c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a26c = phi i32 [ %v7_a370, %dec_label_pc_a364 ], [ %v7_a248, %dec_label_pc_a228 ]
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v1_a26c = add i32 %v0_a26c, 40
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270 = load i32, i32* @sb, align 4
  store i32 %v0_a270, i32* @r1, align 4
  br i1 %v2_a268, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a278:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384, %dec_label_pc_a3a8
  %v2_a278 = phi i32 [ %v0_a26c, %dec_label_pc_a264 ], [ %v0_a39c, %dec_label_pc_a384 ], [ %v2_a278.pre, %dec_label_pc_a3a8 ]
  %v0_a278 = load i32, i32* @r6, align 4
  %v1_a278 = trunc i32 %v0_a278 to i8
  %v3_a278 = add i32 %v2_a278, 10
  %v4_a278 = inttoptr i32 %v3_a278 to i8*
  store i8 %v1_a278, i8* %v4_a278, align 1
  %v0_a27c = load i32, i32* @r6, align 4
  %v1_a27c = trunc i32 %v0_a27c to i8
  %v2_a27c = load i32, i32* @r4, align 4
  %v3_a27c = add i32 %v2_a27c, 11
  %v4_a27c = inttoptr i32 %v3_a27c to i8*
  store i8 %v1_a27c, i8* %v4_a27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  store i32 %v0_a284, i32* @r0, align 4
  %v2_a288 = call i32 @function_d0b8(i32 %v0_a284, i32 20)
  %v3_a288 = trunc i32 %v2_a288 to i8
  store i32 %v2_a288, i32* %r0.global-to-local, align 4
  %v3_a28c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_a294 = mul i32 %v3_a28c, 16
  %v2_a298 = add i32 %v3_a294, %v2_9b74
  store i32 %v2_a298, i32* %r1.global-to-local, align 4
  %v1_a29c = add i32 %v2_a298, 4
  %v2_a29c = inttoptr i32 %v1_a29c to i32*
  %v3_a29c = load i32, i32* %v2_a29c, align 4
  %v3_a2a0 = mul i32 %v3_a29c, 65536
  store i32 %v3_a2a0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a29c, 256
  %v1_a2a8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a29c, 256
  %v4_a2ac = urem i32 %tmp86, 256
  %v5_a2ac = or i32 %v4_a2ac, %v1_a2a8
  store i32 %v5_a2ac, i32* %r2.global-to-local, align 4
  %v1_a2b0 = add i32 %v3_a29c, 1
  store i32 %v1_a2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2b0, i32* %v2_a29c, align 4
  %v0_a2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b8 = load i32, i32* @r5, align 4
  %v2_a2b8 = add i32 %v1_a2b8, 4
  %v3_a2b8 = inttoptr i32 %v2_a2b8 to i32*
  store i32 %v0_a2b8, i32* %v3_a2b8, align 4
  %v0_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a2bc = add i32 %v0_a2bc, 8
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %tmp87 = mul i32 %v3_a2bc, 256
  %v1_a2c8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a2bc, 256
  %v4_a2cc = urem i32 %tmp88, 256
  %v5_a2cc = or i32 %v4_a2cc, %v1_a2c8
  store i32 %v5_a2cc, i32* %r2.global-to-local, align 4
  %v4_a2d028 = udiv i32 %v2_a288, 256
  %v1_a2d4 = trunc i32 %v4_a2d028 to i8
  %v2_a2d4 = load i32, i32* @r4, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 11
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v1_a2d4, i8* %v4_a2d4, align 1
  %v3_a2d8 = load i32, i32* @r4, align 4
  %v4_a2d8 = add i32 %v3_a2d8, 10
  %v5_a2d8 = inttoptr i32 %v4_a2d8 to i8*
  store i8 %v3_a288, i8* %v5_a2d8, align 1
  %v0_a2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 8
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v0_a2dc, i32* %v3_a2dc, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  store i32 %v0_a2e0, i32* @r1, align 4
  %v0_a2e4 = load i32, i32* @r8, align 4
  store i32 %v0_a2e4, i32* %r2.global-to-local, align 4
  %v0_a2e8 = load i32, i32* @r7, align 4
  store i32 %v0_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* @r4, align 4
  store i32 %v0_a2ec, i32* %r0.global-to-local, align 4
  %v0_a2f0 = load i32, i32* @r6, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v3_a2f0 = add i32 %v0_a2e0, 16
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* @r5, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 17
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v4_a2f8 = call i32 @function_d114(i32 %v0_a2ec, i32 %v0_a2e0, i32 %v0_a2e4, i32 %v0_a2e8)
  %v5_a2f8 = trunc i32 %v4_a2f8 to i8
  store i32 %v4_a2f8, i32* %r0.global-to-local, align 4
  %v4_a2fc29 = udiv i32 %v4_a2f8, 256
  %v1_a300 = trunc i32 %v4_a2fc29 to i8
  %v2_a300 = load i32, i32* @r5, align 4
  %v3_a300 = add i32 %v2_a300, 17
  %v4_a300 = inttoptr i32 %v3_a300 to i8*
  store i8 %v1_a300, i8* %v4_a300, align 1
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 16
  %v5_a304 = inttoptr i32 %v4_a304 to i8*
  store i8 %v5_a2f8, i8* %v5_a304, align 1
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v0_a30c = load i32, i32* @r4, align 4
  %v1_a30c = add i32 %v0_a30c, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i32*
  %v3_a30c = load i32, i32* %v2_a30c, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  %v3_a31c = udiv i32 %v3_a30c, 65536
  store i32 %v3_a31c, i32* %r2.global-to-local, align 4
  %v2_a320 = add i32 %v5_a314, %arg2
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  %v3_a3244 = udiv i32 %v3_a30c, 16777216
  %v1_a328 = trunc i32 %v3_a3244 to i8
  %v3_a328 = add i32 %v2_a320, 3
  %v4_a328 = inttoptr i32 %v3_a328 to i8*
  store i8 %v1_a328, i8* %v4_a328, align 1
  %v0_a32c = load i32, i32* %r2.global-to-local, align 4
  %v1_a32c = trunc i32 %v0_a32c to i8
  %v2_a32c = load i32, i32* %ip.global-to-local, align 4
  %v3_a32c = add i32 %v2_a32c, 2
  %v4_a32c = inttoptr i32 %v3_a32c to i8*
  store i8 %v1_a32c, i8* %v4_a32c, align 1
  %v0_a330 = load i32, i32* @r4, align 4
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  store i32 %v0_a33c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a344 = load i32, i32* %ip.global-to-local, align 4
  %v6_a34c = inttoptr i32 %v0_a330 to i32*
  %v7_a34c = call i32 @function_12658(i32 %v3_9d24, i32* %v6_a34c, i32 %v0_a33c, i32 16384, i32 %v0_a344, i32 16)
  %v3_a350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a350, i32* %r3.global-to-local, align 4
  %v1_a354 = add i32 %v3_a350, 1
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v1_a358 = load i32, i32* @fp, align 4
  %v9_a358 = icmp eq i32 %v1_a354, %v1_a358
  store i1 %v9_a358, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a354, i32* %stack_var_-40, align 4
  %v6_a360 = icmp slt i32 %v1_a354, %v1_a358
  br i1 %v6_a360, label %dec_label_pc_a364, label %dec_label_pc_a21c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a278
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v4_a370 = mul i32 %v1_a354, 4
  %v5_a370 = add i32 %v4_a370, %v2_9b84
  %v6_a370 = inttoptr i32 %v5_a370 to i32*
  %v7_a370 = load i32, i32* %v6_a370, align 4
  store i32 %v7_a370, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  %v1_a37c = add i32 %v7_a370, 20
  store i32 %v1_a37c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a384:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a384 = call i32 @function_eb48()
  %v1_a384 = trunc i32 %v0_a384 to i8
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  %v4_a38c = sdiv i32 %v0_a384, 256
  store i32 %v4_a38c, i32* %r3.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v3_a394 = load i32, i32* @r4, align 4
  %v4_a394 = add i32 %v3_a394, 4
  %v5_a394 = inttoptr i32 %v4_a394 to i8*
  store i8 %v1_a384, i8* %v5_a394, align 1
  %v0_a398 = load i32, i32* %r3.global-to-local, align 4
  %v1_a398 = trunc i32 %v0_a398 to i8
  %v2_a398 = load i32, i32* @r4, align 4
  %v3_a398 = add i32 %v2_a398, 5
  %v4_a398 = inttoptr i32 %v3_a398 to i8*
  store i8 %v1_a398, i8* %v4_a398, align 1
  %v0_a39c = load i32, i32* @r4, align 4
  %v1_a39c = add i32 %v0_a39c, 40
  store i32 %v1_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @sb, align 4
  store i32 %v0_a3a0, i32* @r1, align 4
  %v0_a3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a3a4, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384
  %v0_a3a8 = phi i32 [ %v1_a26c, %dec_label_pc_a264 ], [ %v1_a39c, %dec_label_pc_a384 ]
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i8*
  %v2_a3a8 = call i32 @function_ecc8(i8* %v1_a3a8)
  store i32 %v2_a3a8, i32* %r0.global-to-local, align 4
  %v2_a278.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

; uselistorder directives
  uselistorder i32 %v0_a39c, { 1, 0 }
  uselistorder i32 %v7_a370, { 1, 2, 0 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v1_a354, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_a2f8, { 0, 2, 1 }
  uselistorder i32 %v0_a2e0, { 1, 0, 2 }
  uselistorder i32 %v3_a2bc, { 1, 0 }
  uselistorder i32 %v3_a29c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a288, { 0, 2, 1 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v0_a228, { 1, 0 }
  uselistorder i32 %v0_a21c, { 1, 0 }
  uselistorder i1 %v3_a250, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a204, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v3_a138, { 1, 0 }
  uselistorder i32 %v0_a10c, { 1, 0, 2 }
  uselistorder i32 %v3_a100, { 1, 0 }
  uselistorder i32 %v3_a094, { 1, 0 }
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v3_a010, { 1, 0 }
  uselistorder i32 %v2_9ffc, { 1, 0 }
  uselistorder i32 %v3_9fe0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9fd8, { 1, 0 }
  uselistorder i32 %v3_9fb4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9fac, { 1, 0 }
  uselistorder i32 %v4_9f94, { 1, 0 }
  uselistorder i32 %v0_9f90, { 0, 2, 1 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v7_9ef8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9f44, { 1, 0 }
  uselistorder i1 %v9_9f28, { 1, 0 }
  uselistorder i32 %v4_9f3c, { 1, 0 }
  uselistorder i32 %v4_9f38, { 1, 0 }
  uselistorder i32 %v8_9e4c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e38, { 1, 0 }
  uselistorder i32 %v0_9e28, { 2, 0, 1, 3 }
  uselistorder i1 %v7_9db0, { 1, 0 }
  uselistorder i32 %v3_9dac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1ac, { 1, 0 }
  uselistorder i32 %v1_a194, { 1, 0 }
  uselistorder i32 %v1_a17c, { 1, 0 }
  uselistorder i32 %v1_a164, { 1, 0 }
  uselistorder i32 %v5_9f40, { 1, 0 }
  uselistorder i32 %v3_9e9493, { 1, 0 }
  uselistorder i1 %v2_9f58, { 1, 0 }
  uselistorder i32 %v1_9f54, { 1, 0 }
  uselistorder i32 %v4_9f50, { 2, 0, 1 }
  uselistorder i32 %v4_9f34, { 1, 0 }
  uselistorder i1 %v3_9e7c, { 1, 0 }
  uselistorder i32 %v8_9d78, { 2, 1, 0 }
  uselistorder i32 %v8_9d74, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_9d68, { 0, 1, 3, 2 }
  uselistorder i1 %v7_9d5c, { 1, 0 }
  uselistorder i1 %v7_9d2c, { 1, 0 }
  uselistorder i32 %v3_9d28, { 2, 0, 1 }
  uselistorder i32 %v3_9d24, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_9d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_9cbc, { 1, 2, 0 }
  uselistorder i32 %v1_9c9c, { 1, 0 }
  uselistorder i32 %v1_9c7c, { 1, 2, 0 }
  uselistorder i32 %v1_9c5c, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 2, 0 }
  uselistorder i32 %v1_9c04, { 1, 2, 0 }
  uselistorder i32 %v5_9bc0, { 0, 2, 1 }
  uselistorder i32 %v2_9b84, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_9b74, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_9b58, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 5, 7, 6, 11, 8, 9, 12, 10, 20, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 29, 28, 32, 30, 33, 34, 31, 1, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a200, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ec0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9e70, { 1, 0 }
}

define i32 @function_a3b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a3b4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_a3b8 = urem i32 %arg1, 256
  store i32 %v1_a3b8, i32* @fp, align 4
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a3d0 = urem i32 %arg3, 256
  store i32 %v1_a3d0, i32* @r4, align 4
  %v2_a3d4 = call i32 @function_129a8(i32 %v1_a3b8, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @fp, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v2_a3e4 = call i32 @function_129a8(i32 %v0_a3e0, i32 4)
  %v0_a3e8 = load i32, i32* @r5, align 4
  store i32 %v0_a3e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a3f8 = load i32, i32* @r4, align 4
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  %v5_a3fc = inttoptr i32 %v0_a3e8 to i32*
  %v6_a3fc = call i32 @function_85e0(i32 %v0_a3f8, i32* %v5_a3fc, i32 2, i32 0, i32 %v2_a3e4)
  %v1_a408 = urem i32 %v6_a3fc, 256
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r5, align 4
  store i32 %v0_a414, i32* %r1.global-to-local, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a3fc, 16777216
  %v5_a420 = sdiv i32 %sext, 16777216
  %v6_a420 = inttoptr i32 %v0_a414 to i32*
  %v7_a420 = call i32 @function_85e0(i32 %v0_a418, i32* %v6_a420, i32 3, i32 65535, i32 %v5_a420)
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a420, i32* @r6, align 4
  %v0_a434 = load i32, i32* @r4, align 4
  store i32 %v0_a434, i32* %r0.global-to-local, align 4
  %v5_a438 = inttoptr i32 %v0_a424 to i32*
  %v6_a438 = call i32 @function_85e0(i32 %v0_a434, i32* %v5_a438, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a440 = urem i32 %v6_a438, 256
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a450 = load i32, i32* @r4, align 4
  store i32 %v0_a450, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_a438, 16777216
  %v5_a458 = sdiv i32 %sext6, 16777216
  %v6_a458 = inttoptr i32 %v0_a444 to i32*
  %v7_a458 = call i32 @function_85e0(i32 %v0_a450, i32* %v6_a458, i32 5, i32 1, i32 %v5_a458)
  %v1_a464 = urem i32 %v7_a458, 256
  store i32 %v1_a464, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a474 = load i32, i32* @r4, align 4
  store i32 %v0_a474, i32* %r0.global-to-local, align 4
  %v5_a47c = inttoptr i32 %v0_a46c to i32*
  %v6_a47c = call i32 @function_85e0(i32 %v0_a474, i32* %v5_a47c, i32 7, i32 65535, i32 %v1_a464)
  %v0_a480 = load i32, i32* @r5, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v3_a484 = mul i32 %v6_a47c, 65536
  store i32 %v3_a484, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a490 = load i32, i32* @r4, align 4
  store i32 %v0_a490, i32* %r0.global-to-local, align 4
  %v5_a494 = inttoptr i32 %v0_a480 to i32*
  %v6_a494 = call i32 @function_85e0(i32 %v0_a490, i32* %v5_a494, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a49c = urem i32 %v6_a494, 256
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  store i32 %v0_a4a0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r0.global-to-local, align 4
  %v5_a4b4 = inttoptr i32 %v0_a4a0 to i32*
  %v6_a4b4 = call i32 @function_85e0(i32 %v0_a4ac, i32* %v5_a4b4, i32 12, i32 1, i32 %v1_a49c)
  %v1_a4bc = urem i32 %v6_a4b4, 256
  store i32 %v1_a4bc, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  store i32 %v0_a4c0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r4, align 4
  store i32 %v0_a4cc, i32* %r0.global-to-local, align 4
  %v5_a4d4 = inttoptr i32 %v0_a4c0 to i32*
  %v6_a4d4 = call i32 @function_85e0(i32 %v0_a4cc, i32* %v5_a4d4, i32 13, i32 1, i32 %v1_a4bc)
  %v1_a4dc = urem i32 %v6_a4d4, 256
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_85e0(i32 %v0_a4ec, i32* %v5_a4f4, i32 14, i32 0, i32 %v1_a4dc)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v5_a514 = inttoptr i32 %v0_a500 to i32*
  %v6_a514 = call i32 @function_85e0(i32 %v0_a50c, i32* %v5_a514, i32 15, i32 0, i32 %v1_a4fc)
  %v1_a51c = urem i32 %v6_a514, 256
  store i32 %v1_a51c, i32* %ip.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @function_85e0(i32 %v0_a52c, i32* %v5_a534, i32 16, i32 0, i32 %v1_a51c)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_a534, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 %v0_a544, i32* %r1.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  %v1_a54c = urem i32 %v6_a534, 256
  store i32 %v1_a54c, i32* @r8, align 4
  %v5_a550 = inttoptr i32 %v0_a544 to i32*
  %v6_a550 = call i32 @function_85e0(i32 %v0_a548, i32* %v5_a550, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  store i32 %v6_a550, i32* @sb, align 4
  %v0_a564 = load i32, i32* @r4, align 4
  store i32 %v0_a564, i32* %r0.global-to-local, align 4
  %v5_a568 = inttoptr i32 %v0_a55c to i32*
  %v6_a568 = call i32 @function_85e0(i32 %v0_a564, i32* %v5_a568, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_a574 = urem i32 %v6_a568, 256
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a584 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_a588 = load i32, i32* @r7, align 4
  %v3_a588 = udiv i32 %v0_a588, 65536
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v7_a58c = icmp eq i32 %v3_a584, -1
  store i1 %v7_a58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a58c, label %dec_label_pc_a7e8, label %dec_label_pc_a59c

dec_label_pc_a59c:                                ; preds = %dec_label_pc_a3b4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5b8 = call i32 @function_1268c(i32 %v3_a584, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a5b8, i32* %r0.global-to-local, align 4
  %v7_a5bc = icmp eq i32 %v6_a5b8, -1
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %dec_label_pc_a7e0, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @fp, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  %v0_a5c8 = load i32, i32* @r6, align 4
  %v3_a5c8 = mul i32 %v0_a5c8, 65536
  store i32 %v3_a5c8, i32* %r0.global-to-local, align 4
  %v3_a5cc = urem i32 %v0_a5c8, 65536
  store i32 %v3_a5cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_a5c4, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_a5f0.preheader

.thread18:                                        ; preds = %dec_label_pc_a5c4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_aa74

dec_label_pc_a5f0.preheader:                      ; preds = %dec_label_pc_a5c4
  %v5_a5d4 = load i32, i32* @r7, align 4
  %v8_a5d4 = udiv i32 %v5_a5d4, 16777216
  %tmp73 = udiv i32 %v0_a5c8, 256
  %v8_a5d8 = urem i32 %tmp73, 256
  store i32 %v8_a5d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a6dc = icmp ugt i32 %v0_a588, -65537
  %v2_a700 = ptrtoint i32* %stack_var_-60 to i32
  %v3_a70c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_a73c = ptrtoint i32* %stack_var_-76 to i32
  %v2_a740 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a744 = ptrtoint i32* %stack_var_-332 to i32
  %v4_a790 = zext i8 %tmp31 to i32
  %v4_a794 = zext i8 %tmp30 to i32
  %v4_a7a0 = mul nuw nsw i32 %v4_a794, 256
  %v4_a7b0 = zext i8 %tmp to i32
  %v1_a7b4 = and i32 %v4_a7b0, 18
  %v2_a7b8 = icmp eq i32 %v1_a7b4, 18
  %v1_a6ec = mul nuw nsw i32 %v3_a588, 256
  %v4_a6f0 = and i32 %v1_a6ec, 65280
  %v5_a6f0 = or i32 %v8_a5d4, %v4_a6f0
  %v3_a6f493 = udiv i32 %v4_a6f0, 256
  %v1_a6f8 = trunc i32 %v3_a6f493 to i8
  %v1_a8bc = mul i32 %v0_a5c8, 256
  %v4_a8c4 = and i32 %v1_a8bc, 65280
  %v5_a7a0 = or i32 %v4_a790, %v4_a7a0
  %v1_a7c0 = and i32 %v4_a7b0, 5
  %v2_a7c0 = icmp eq i32 %v1_a7c0, 0
  %v1_a6fc = trunc i32 %v8_a5d4 to i8
  %v5_a8c4 = or i32 %v8_a5d8, %v4_a8c4
  %v1_a8e4 = trunc i32 %v5_a420 to i8
  %v1_a9c4 = urem i32 %v6_a494, 2
  %tmp94 = sub nsw i32 0, %v1_a9c4
  %v4_a9cc = and i32 %tmp94, 32
  %v1_a9dc = urem i32 %v6_a4b4, 2
  %tmp95 = sub nsw i32 0, %v1_a9dc
  %v4_a9e4 = and i32 %tmp95, 16
  %v1_a9f4 = urem i32 %v6_a4d4, 2
  %tmp96 = sub nsw i32 0, %v1_a9f4
  %v4_a9fc = and i32 %tmp96, 8
  %v1_aa0c = urem i32 %v6_a4f4, 2
  %tmp97 = sub nsw i32 0, %v1_aa0c
  %v4_aa14 = and i32 %tmp97, 4
  %v1_aa24 = urem i32 %v6_a514, 2
  %tmp98 = sub nsw i32 0, %v1_aa24
  %v3_aa2c = and i32 %tmp98, 2
  br label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_a7c8, %dec_label_pc_a5f0.preheader
  store i32 %v8_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5fc = load i32, i32* @sb, align 4
  %v1_a5fc = add i32 %v0_a5fc, 40
  store i32 %v1_a5fc, i32* @sl, align 4
  br label %dec_label_pc_a600

dec_label_pc_a600:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a5f0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a60c = call i32 @function_126bc(i32 2, i32 1, i32 0)
  store i32 %v3_a60c, i32* %r0.global-to-local, align 4
  %v7_a610 = icmp eq i32 %v3_a60c, -1
  store i1 %v7_a610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a60c, i32* @r7, align 4
  br i1 %v7_a610, label %dec_label_pc_aa60, label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a600
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a624 = call i32 @function_11cdc(i32 %v3_a60c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a62c = or i32 %v2_a624, 2048
  store i32 %v1_a62c, i32* @r2, align 4
  %v0_a630 = load i32, i32* @r7, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v2_a634 = call i32 @function_11cdc(i32 %v0_a630, i32 4)
  store i32 %v2_a634, i32* %r0.global-to-local, align 4
  %v3_a638 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a648 = mul i32 %v3_a638, 24
  store i32 %v5_a648, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_a658 = add i32 %v5_a648, %arg2
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 20
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v4_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp ugt i8 %v3_a65c, 30
  %v7_a660 = icmp eq i8 %v3_a65c, 31
  store i1 %v7_a660, i1* %cpsr_z.global-to-local, align 1
  %v2_a664 = xor i1 %v7_a660, true
  %v3_a664 = and i1 %v2_a660, %v2_a664
  %v5_a664 = add i32 %v2_a658, 16
  %v6_a664 = inttoptr i32 %v5_a664 to i32*
  %v7_a664 = load i32, i32* %v6_a664, align 4
  br i1 %v3_a664, label %dec_label_pc_a6d0, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a61c
  store i32 %v7_a664, i32* @r4, align 4
  %v0_a674 = call i32 @function_eb48()
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v3_a678 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_a684 = mul i32 %v3_a678, 24
  %v0_a688 = load i32, i32* @r4, align 4
  %v2_a68c = add i32 %v5_a684, %arg2
  store i32 %v2_a68c, i32* %r1.global-to-local, align 4
  %v1_a690 = and i32 %v0_a688, 65280
  store i32 %v1_a690, i32* %r3.global-to-local, align 4
  %v1_a688 = udiv i32 %v0_a688, 256
  %v3_a694 = and i32 %v1_a688, 65280
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  %v3_a698 = mul i32 %v0_a688, 16777216
  store i32 %v3_a698, i32* %ip.global-to-local, align 4
  %v1_a69c = add i32 %v2_a68c, 20
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v4_a69c = zext i8 %v3_a69c to i32
  store i32 %v4_a69c, i32* %lr.global-to-local, align 4
  %v4_a6a0 = mul nuw nsw i32 %v1_a690, 256
  %v5_a6a0 = or i32 %v4_a6a0, %v3_a698
  store i32 %v5_a6a0, i32* %ip.global-to-local, align 4
  %v2_a6a8 = call i32 @llvm.bswap.i32(i32 %v0_a688)
  %v7_a6ac = lshr i32 %v0_a674, %v4_a69c
  %v8_a6ac = add i32 %v7_a6ac, %v2_a6a8
  store i32 %v8_a6ac, i32* %r2.global-to-local, align 4
  %v3_a6b8 = mul i32 %v8_a6ac, 16777216
  %v1_a6bc = and i32 %v8_a6ac, 65280
  store i32 %v1_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = mul nuw nsw i32 %v1_a6bc, 256
  %v5_a6c0 = or i32 %v4_a6c0, %v3_a6b8
  store i32 %v5_a6c0, i32* %r1.global-to-local, align 4
  %v2_a6c8 = call i32 @llvm.bswap.i32(i32 %v8_a6ac)
  br label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a670
  %storemerge25 = phi i32 [ %v2_a6c8, %dec_label_pc_a670 ], [ %v7_a664, %dec_label_pc_a61c ]
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a6dc, label %dec_label_pc_a7f0, label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6d0
  store i32 %v8_a5d4, i32* %ip.global-to-local, align 4
  store i32 %v5_a6f0, i32* %r3.global-to-local, align 4
  store i32 %v3_a6f493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a6e4
  %stack_var_-57.0 = phi i8 [ %v1_a7f8, %dec_label_pc_a7f0 ], [ %v1_a6f8, %dec_label_pc_a6e4 ]
  %storemerge = phi i8 [ %v1_a7f0, %dec_label_pc_a7f0 ], [ %v1_a6fc, %dec_label_pc_a6e4 ]
  store i32 %v2_a700, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r7, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v4_a70c = call i32 @function_12518(i32 %v0_a708, %sockaddr* nonnull %v3_a70c, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a714 = call i32 @function_12070(i32* null)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  store i32 %v2_a714, i32* @r4, align 4
  %v9_a774 = icmp eq i32 %tmp32, %storemerge25
  %v4_a798 = zext i8 %storemerge to i32
  %v4_a79c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_a774 to i32
  %v9_a788 = icmp eq i1 %v9_a774, false
  %v4_a7a4 = mul nuw nsw i32 %v4_a79c, 256
  %v5_a7a4 = or i32 %v4_a7a4, %v4_a798
  %v9_a7a8 = icmp eq i32 %v5_a7a4, %v5_a7a0
  br label %dec_label_pc_a730

dec_label_pc_a720:                                ; preds = %.thread23, %dec_label_pc_a790, %dec_label_pc_a7c0, %bb75
  %v2_a720 = call i32 @function_12070(i32* null)
  %v0_a724 = load i32, i32* @r4, align 4
  %v2_a724 = sub i32 %v2_a720, %v0_a724
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  %v7_a728 = icmp eq i32 %v2_a724, 10
  store i1 %v7_a728, i1* %cpsr_z.global-to-local, align 1
  %v8_a72c = icmp sgt i32 %v2_a724, 10
  br i1 %v8_a72c, label %dec_label_pc_a7d4, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a700
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_a73c, i32* %lr.global-to-local, align 4
  store i32 %v2_a740, i32* %ip.global-to-local, align 4
  store i32 %v2_a744, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v7_a758 = call i32 @function_125f8(i32 %v3_a584, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_a73c, i32 %v2_a740)
  store i32 %v7_a758, i32* %r2.global-to-local, align 4
  %v7_a760 = icmp eq i32 %v7_a758, -1
  store i1 %v7_a760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a760, label %dec_label_pc_a7e8, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a730
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_a780 = icmp eq i32 %v7_a758, 40
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_a758, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_a76c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a720

bb75:                                             ; preds = %dec_label_pc_a76c
  store i1 %v9_a788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a788, label %dec_label_pc_a720, label %dec_label_pc_a790

dec_label_pc_a790:                                ; preds = %bb75
  store i32 %v4_a794, i32* %r1.global-to-local, align 4
  store i32 %v4_a798, i32* %ip.global-to-local, align 4
  store i32 %v4_a79c, i32* %r2.global-to-local, align 4
  store i32 %v5_a7a0, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a4, i32* @r5, align 4
  store i1 %v9_a7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7a8, label %dec_label_pc_a7b0, label %dec_label_pc_a720

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a790
  store i32 %v4_a7b0, i32* %r2.global-to-local, align 4
  store i32 %v1_a7b4, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b8, label %dec_label_pc_a804, label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7b0
  store i1 %v2_a7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7c0, label %dec_label_pc_a720, label %dec_label_pc_a7c8

dec_label_pc_a7c8:                                ; preds = %dec_label_pc_a7c0
  %v0_a7c8 = load i32, i32* @r7, align 4
  store i32 %v0_a7c8, i32* %r0.global-to-local, align 4
  %v1_a7cc = call i32 @function_11da0(i32 %v0_a7c8)
  store i32 %v1_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5f0

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a720
  %v0_a7d4 = load i32, i32* @r7, align 4
  store i32 %v0_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @function_11da0(i32 %v0_a7d4)
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a600

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a59c
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v1_a7e4 = call i32 @function_11da0(i32 %v3_a584)
  store i32 %v1_a7e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a730, %dec_label_pc_a3b4, %dec_label_pc_a7e0
  %v29_a7ec = phi i32 [ %v3_a584, %dec_label_pc_a3b4 ], [ %v1_a7e4, %dec_label_pc_a7e0 ], [ 0, %dec_label_pc_a730 ]
  ret i32 %v29_a7ec

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a6d0
  %v0_a7f0 = call i32 @function_eb48()
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  store i32 %v0_a7f0, i32* %r0.global-to-local, align 4
  %v4_a7f4 = sdiv i32 %v0_a7f0, 256
  store i32 %v4_a7f4, i32* %r3.global-to-local, align 4
  %v1_a7f8 = trunc i32 %v4_a7f4 to i8
  br label %dec_label_pc_a700

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7b0
  %v3_a804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a804, i32* @r4, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_a80c = mul i32 %v3_a804, 16
  store i32 %v3_a80c, i32* %ip.global-to-local, align 4
  %v3_a810 = add i32 %v3_a80c, %v2_a3d4
  %v4_a810 = inttoptr i32 %v3_a810 to i32*
  store i32 %storemerge25, i32* %v4_a810, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v1_a814 = add i32 %v0_a814, 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  %v3_a814 = load i32, i32* %v2_a814, align 4
  store i32 %v3_a814, i32* %r0.global-to-local, align 4
  %v1_a81c = and i32 %v3_a814, 65280
  store i32 %v1_a81c, i32* %r1.global-to-local, align 4
  store i32 %v2_a3d4, i32* %lr.global-to-local, align 4
  %v3_a824 = mul i32 %v3_a814, 16777216
  %v4_a82c = mul nuw nsw i32 %v1_a81c, 256
  %v5_a82c = or i32 %v4_a82c, %v3_a824
  store i32 %v5_a82c, i32* %r2.global-to-local, align 4
  %v1_a834 = load i32, i32* %ip.global-to-local, align 4
  %v2_a834 = add i32 %v1_a834, %v2_a3d4
  store i32 %v2_a834, i32* %ip.global-to-local, align 4
  %v2_a838 = call i32 @llvm.bswap.i32(i32 %v3_a814)
  store i32 %v2_a838, i32* %r3.global-to-local, align 4
  %v2_a83c = add i32 %v2_a834, 4
  %v3_a83c = inttoptr i32 %v2_a83c to i32*
  store i32 %v2_a838, i32* %v3_a83c, align 4
  %v0_a840 = load i32, i32* @r6, align 4
  %v1_a840 = add i32 %v0_a840, 8
  %v2_a840 = inttoptr i32 %v1_a840 to i32*
  %v3_a840 = load i32, i32* %v2_a840, align 4
  store i32 %v3_a840, i32* %r0.global-to-local, align 4
  %v1_a848 = and i32 %v3_a840, 65280
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v3_a84c = mul i32 %v3_a840, 16777216
  %v4_a854 = mul nuw nsw i32 %v1_a848, 256
  %v5_a854 = or i32 %v4_a854, %v3_a84c
  store i32 %v5_a854, i32* %r2.global-to-local, align 4
  %v2_a85c = call i32 @llvm.bswap.i32(i32 %v3_a840)
  store i32 %v2_a85c, i32* %r3.global-to-local, align 4
  %v1_a860 = load i32, i32* %ip.global-to-local, align 4
  %v2_a860 = add i32 %v1_a860, 8
  %v3_a860 = inttoptr i32 %v2_a860 to i32*
  store i32 %v2_a85c, i32* %v3_a860, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v1_a864 = inttoptr i32 %v0_a864 to i32*
  %v2_a864 = load i32, i32* %v1_a864, align 4
  %v3_a868 = udiv i32 %v2_a864, 65536
  store i32 %v3_a868, i32* %r2.global-to-local, align 4
  %v3_a86c3 = udiv i32 %v2_a864, 16777216
  store i32 %v3_a86c3, i32* %r1.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  %v3_a870 = sdiv i32 %v0_a870, 256
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v3_a870 to i8
  %v2_a874 = load i32, i32* %ip.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 15
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r1.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i8
  %v2_a878 = load i32, i32* %ip.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 13
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v0_a87c = load i32, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v0_a87c to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 12
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %ip.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 14
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v0_a884 = load i32, i32* @sl, align 4
  store i32 %v0_a884, i32* %r0.global-to-local, align 4
  %v1_a888 = call i32 @function_12854(i32 %v0_a884)
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 %v2_a3e4, i32* %r1.global-to-local, align 4
  %v3_a890 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a890, i32* %r2.global-to-local, align 4
  %v2_a894 = load i32, i32* @r4, align 4
  %v5_a894 = mul i32 %v2_a894, 4
  %v6_a894 = add i32 %v5_a894, %v2_a3e4
  %v7_a894 = inttoptr i32 %v6_a894 to i32*
  store i32 %v1_a888, i32* %v7_a894, align 4
  %v0_a898 = load i32, i32* %r1.global-to-local, align 4
  %v1_a898 = load i32, i32* %r2.global-to-local, align 4
  %v4_a898 = mul i32 %v1_a898, 4
  %v5_a898 = add i32 %v4_a898, %v0_a898
  %v6_a898 = inttoptr i32 %v5_a898 to i32*
  %v7_a898 = load i32, i32* %v6_a898, align 4
  store i32 %v7_a898, i32* @r4, align 4
  %v1_a89c = inttoptr i32 %v7_a898 to i8*
  %v2_a89c = load i8, i8* %v1_a89c, align 1
  %tmp100 = urem i8 %v2_a89c, 16
  %v1_a8a0 = zext i8 %tmp100 to i32
  %v1_a8a4 = or i32 %v1_a8a0, 64
  store i32 %v1_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v1_a8a4 to i8
  store i8 %v1_a8a8, i8* %v1_a89c, align 1
  %v0_a8ac = load i32, i32* @r4, align 4
  %v1_a8ac = inttoptr i32 %v0_a8ac to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v1_a8b8 = and i8 %v2_a8ac, -16
  %v1_a8c0 = or i8 %v1_a8b8, 5
  store i32 %v5_a8c4, i32* %r0.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @sl, align 4
  %v3_a8c8 = mul i32 %v0_a8c8, 65536
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  store i32 %v1_a464, i32* %lr.global-to-local, align 4
  store i8 %v1_a8c0, i8* %v1_a8ac, align 1
  store i32 %v5_a420, i32* %r1.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d8 = udiv i32 %v0_a8d8, 65536
  %v1_a8dc = urem i32 %v3_a8d8, 256
  store i32 %v1_a8dc, i32* %r3.global-to-local, align 4
  %v3_a8e0 = udiv i32 %v0_a8d8, 16777216
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  %v2_a8e4 = load i32, i32* @r4, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 1
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i8*
  store i8 %v1_a8e4, i8* %v4_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a8e8 = mul i32 %v1_a8e8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v0_a8e8
  store i32 %v5_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8e8 to i8
  %v2_a8ec = load i32, i32* @r4, align 4
  %v3_a8ec = add i32 %v2_a8ec, 2
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8f0 = icmp eq i32 %v0_a8f0, 0
  store i1 %v2_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v0_a8f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8f4 = sdiv i32 %v0_a8f4, 256
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a458, i32* %r2.global-to-local, align 4
  %v1_a8fc = trunc i32 %v3_a8f4 to i8
  %v2_a8fc = load i32, i32* @r4, align 4
  %v3_a8fc = add i32 %v2_a8fc, 3
  %v4_a8fc = inttoptr i32 %v3_a8fc to i8*
  store i8 %v1_a8fc, i8* %v4_a8fc, align 1
  %v0_a900 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a900, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_a804
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_a804, %bb76
  %v0_a904 = load i32, i32* %r2.global-to-local, align 4
  %v1_a904 = trunc i32 %v0_a904 to i8
  %v2_a904 = load i32, i32* @r4, align 4
  %v3_a904 = add i32 %v2_a904, 8
  %v4_a904 = inttoptr i32 %v3_a904 to i8*
  store i8 %v1_a904, i8* %v4_a904, align 1
  %v0_a908 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a908, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a908 = load i32, i32* %r3.global-to-local, align 4
  %v2_a908 = trunc i32 %v1_a908 to i8
  %v3_a908 = load i32, i32* @r4, align 4
  %v4_a908 = add i32 %v3_a908, 6
  %v5_a908 = inttoptr i32 %v4_a908 to i8*
  store i8 %v2_a908, i8* %v5_a908, align 1
  %v0_a90c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a90c.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a914 = load i32, i32* @r4, align 4
  %v3_a914 = add i32 %v2_a914, 9
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 6, i8* %v4_a914, align 1
  %v0_a918 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a918, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a918 = load i32, i32* %r2.global-to-local, align 4
  %v2_a918 = trunc i32 %v1_a918 to i8
  %v3_a918 = load i32, i32* @r4, align 4
  %v4_a918 = add i32 %v3_a918, 7
  %v5_a918 = inttoptr i32 %v4_a918 to i8*
  store i8 %v2_a918, i8* %v5_a918, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a920 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_a920, i32* %r3.global-to-local, align 4
  %v0_a924 = load i32, i32* %r0.global-to-local, align 4
  %v3_a924 = sdiv i32 %v0_a924, 256
  store i32 %v3_a924, i32* %ip.global-to-local, align 4
  %v1_a928 = load i32, i32* @r4, align 4
  %v2_a928 = add i32 %v1_a928, 12
  %v3_a928 = inttoptr i32 %v2_a928 to i32*
  store i32 %v2_a920, i32* %v3_a928, align 4
  %v0_a92c = load i32, i32* %ip.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* @r4, align 4
  %v3_a92c = add i32 %v2_a92c, 5
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v3_a930 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a930, i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* %ip.global-to-local, align 4
  %v4_a938 = mul i32 %v3_a930, 16
  %v5_a938 = add i32 %v4_a938, %v2_a3d4
  %v6_a938 = inttoptr i32 %v5_a938 to i32*
  %v7_a938 = load i32, i32* %v6_a938, align 4
  store i32 %v7_a938, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* %r0.global-to-local, align 4
  %v1_a93c = trunc i32 %v0_a93c to i8
  %v2_a93c = load i32, i32* @r4, align 4
  %v3_a93c = add i32 %v2_a93c, 4
  %v4_a93c = inttoptr i32 %v3_a93c to i8*
  store i8 %v1_a93c, i8* %v4_a93c, align 1
  %v0_a940 = load i32, i32* %r3.global-to-local, align 4
  %v1_a940 = load i32, i32* @r4, align 4
  %v2_a940 = add i32 %v1_a940, 16
  %v3_a940 = inttoptr i32 %v2_a940 to i32*
  store i32 %v0_a940, i32* %v3_a940, align 4
  %v0_a944 = load i32, i32* %r2.global-to-local, align 4
  %v3_a944 = mul i32 %v0_a944, 16
  %v1_a948 = load i32, i32* %ip.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, %v3_a944
  store i32 %v2_a948, i32* %r2.global-to-local, align 4
  %v1_a94c = add i32 %v2_a948, 13
  %v2_a94c = inttoptr i32 %v1_a94c to i8*
  %v3_a94c = load i8, i8* %v2_a94c, align 1
  %v4_a94c = zext i8 %v3_a94c to i32
  store i32 %v4_a94c, i32* %r1.global-to-local, align 4
  %v1_a950 = add i32 %v2_a948, 12
  %v2_a950 = inttoptr i32 %v1_a950 to i8*
  %v3_a950 = load i8, i8* %v2_a950, align 1
  %v4_a950 = zext i8 %v3_a950 to i32
  %v4_a954 = mul nuw nsw i32 %v4_a94c, 256
  %v5_a954 = or i32 %v4_a950, %v4_a954
  store i32 %v5_a954, i32* %r3.global-to-local, align 4
  %v2_a958 = load i32, i32* @r4, align 4
  %v3_a958 = add i32 %v2_a958, 20
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v3_a950, i8* %v4_a958, align 1
  %v0_a95c = load i32, i32* @r4, align 4
  %v1_a95c = add i32 %v0_a95c, 20
  store i32 %v1_a95c, i32* @r6, align 4
  %v0_a960 = load i32, i32* %r3.global-to-local, align 4
  %v3_a960 = sdiv i32 %v0_a960, 256
  store i32 %v3_a960, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v3_a960 to i8
  %v3_a964 = add i32 %v0_a95c, 21
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* @r6, align 4
  %v1_a968 = add i32 %v0_a968, 13
  %v2_a968 = inttoptr i32 %v1_a968 to i8*
  %v3_a968 = load i8, i8* %v2_a968, align 1
  %v4_a968 = zext i8 %v3_a968 to i32
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  %v0_a96c = load i32, i32* %r2.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 8
  %v2_a96c = inttoptr i32 %v1_a96c to i32*
  %v3_a96c = load i32, i32* %v2_a96c, align 4
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v1_a970 = or i32 %v4_a968, 1
  store i32 %v1_a970, i32* %r3.global-to-local, align 4
  %v1_a974 = add i32 %v0_a96c, 15
  %v2_a974 = inttoptr i32 %v1_a974 to i8*
  %v3_a974 = load i8, i8* %v2_a974, align 1
  %v4_a974 = zext i8 %v3_a974 to i32
  store i32 %v4_a974, i32* %ip.global-to-local, align 4
  %v1_a978 = add i32 %v0_a96c, 14
  %v2_a978 = inttoptr i32 %v1_a978 to i8*
  %v3_a978 = load i8, i8* %v2_a978, align 1
  %v4_a978 = zext i8 %v3_a978 to i32
  store i32 %v4_a978, i32* %r0.global-to-local, align 4
  %v2_a97c = add i32 %v0_a968, 4
  %v3_a97c = inttoptr i32 %v2_a97c to i32*
  store i32 %v3_a96c, i32* %v3_a97c, align 4
  %v0_a980 = load i32, i32* %r2.global-to-local, align 4
  %v1_a980 = add i32 %v0_a980, 4
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v3_a980, i32* %lr.global-to-local, align 4
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r6, align 4
  %v3_a984 = add i32 %v2_a984, 13
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = load i32, i32* @r6, align 4
  %v1_a988 = add i32 %v0_a988, 12
  %v2_a988 = inttoptr i32 %v1_a988 to i8*
  %v3_a988 = load i8, i8* %v2_a988, align 1
  %v4_a988 = zext i8 %v3_a988 to i32
  store i32 %v4_a988, i32* %r2.global-to-local, align 4
  %v1_a98c = add i32 %v0_a988, 13
  %v2_a98c = inttoptr i32 %v1_a98c to i8*
  %v3_a98c = load i8, i8* %v2_a98c, align 1
  %v4_a98c = zext i8 %v3_a98c to i32
  %v0_a990 = load i32, i32* %r0.global-to-local, align 4
  %v1_a990 = load i32, i32* %ip.global-to-local, align 4
  %v4_a990 = mul i32 %v1_a990, 256
  %v5_a990 = or i32 %v4_a990, %v0_a990
  store i32 %v5_a990, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a988, 16
  %v1_a994 = zext i8 %tmp101 to i32
  %v3_a998 = sdiv i32 %v5_a990, 256
  store i32 %v3_a998, i32* %r1.global-to-local, align 4
  %v1_a99c = or i32 %v1_a994, 128
  store i32 %v1_a99c, i32* %r2.global-to-local, align 4
  %v1_a9a0 = or i32 %v4_a98c, 16
  store i32 %v1_a9a0, i32* %r3.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v3_a998 to i8
  %v3_a9a4 = add i32 %v0_a988, 3
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i8*
  store i8 %v1_a9a4, i8* %v4_a9a4, align 1
  %v0_a9a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a9a8 = load i32, i32* @r6, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 8
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a9a8, i32* %v3_a9a8, align 4
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = trunc i32 %v0_a9ac to i8
  %v2_a9ac = load i32, i32* @r6, align 4
  %v3_a9ac = add i32 %v2_a9ac, 12
  %v4_a9ac = inttoptr i32 %v3_a9ac to i8*
  store i8 %v1_a9ac, i8* %v4_a9ac, align 1
  %v0_a9b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r6, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 13
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r6, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 2
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = call i32 @function_eb48()
  %v1_a9b8 = trunc i32 %v0_a9b8 to i8
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %lr.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r6, align 4
  %v1_a9c0 = add i32 %v0_a9c0, 13
  %v2_a9c0 = inttoptr i32 %v1_a9c0 to i8*
  %v3_a9c0 = load i8, i8* %v2_a9c0, align 1
  %v4_a9c0 = zext i8 %v3_a9c0 to i32
  store i32 %v1_a9c4, i32* %r2.global-to-local, align 4
  %v1_a9c8 = and i32 %v4_a9c0, 223
  %v5_a9cc = or i32 %v1_a9c8, %v4_a9cc
  store i32 %v5_a9cc, i32* %r3.global-to-local, align 4
  %v1_a9d0 = trunc i32 %v5_a9cc to i8
  store i8 %v1_a9d0, i8* %v2_a9c0, align 1
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r6, align 4
  %v1_a9d8 = add i32 %v0_a9d8, 13
  %v2_a9d8 = inttoptr i32 %v1_a9d8 to i8*
  %v3_a9d8 = load i8, i8* %v2_a9d8, align 1
  %v4_a9d8 = zext i8 %v3_a9d8 to i32
  store i32 %v1_a9dc, i32* %r3.global-to-local, align 4
  %v1_a9e0 = and i32 %v4_a9d8, 239
  %v5_a9e4 = or i32 %v1_a9e0, %v4_a9e4
  store i32 %v5_a9e4, i32* %r2.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v5_a9e4 to i8
  store i8 %v1_a9e8, i8* %v2_a9d8, align 1
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r6, align 4
  %v1_a9f0 = add i32 %v0_a9f0, 13
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v1_a9f4, i32* %r2.global-to-local, align 4
  %v1_a9f8 = and i32 %v4_a9f0, 247
  %v5_a9fc = or i32 %v1_a9f8, %v4_a9fc
  store i32 %v5_a9fc, i32* %r3.global-to-local, align 4
  %v1_aa00 = trunc i32 %v5_a9fc to i8
  store i8 %v1_aa00, i8* %v2_a9f0, align 1
  %v0_aa08 = load i32, i32* @r6, align 4
  %v1_aa08 = add i32 %v0_aa08, 13
  %v2_aa08 = inttoptr i32 %v1_aa08 to i8*
  %v3_aa08 = load i8, i8* %v2_aa08, align 1
  %v4_aa08 = zext i8 %v3_aa08 to i32
  store i32 %v1_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = and i32 %v4_aa08, 251
  %v5_aa14 = or i32 %v1_aa10, %v4_aa14
  store i32 %v5_aa14, i32* %r2.global-to-local, align 4
  %v1_aa18 = trunc i32 %v5_aa14 to i8
  store i8 %v1_aa18, i8* %v2_aa08, align 1
  store i32 %v1_a51c, i32* %r1.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r6, align 4
  %v1_aa20 = add i32 %v0_aa20, 13
  %v2_aa20 = inttoptr i32 %v1_aa20 to i8*
  %v3_aa20 = load i8, i8* %v2_aa20, align 1
  %v4_aa20 = zext i8 %v3_aa20 to i32
  store i32 %v1_aa24, i32* %r2.global-to-local, align 4
  %v1_aa28 = and i32 %v4_aa20, 253
  %v4_aa2c = or i32 %v1_aa28, %v3_aa2c
  store i32 %v4_aa2c, i32* %r3.global-to-local, align 4
  %v1_aa30 = trunc i32 %v4_aa2c to i8
  store i8 %v1_aa30, i8* %v2_aa20, align 1
  %v0_aa34 = load i32, i32* @r6, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  %v0_aa38 = load i32, i32* @r8, align 4
  %v1_aa38 = urem i32 %v0_aa38, 2
  %v1_aa3c = and i32 %v4_aa34, 254
  store i32 %v1_aa3c, i32* %r2.global-to-local, align 4
  %v4_aa4027 = udiv i32 %v0_a9b8, 256
  %v2_aa44 = or i32 %v1_aa3c, %v1_aa38
  store i32 %v2_aa44, i32* %r3.global-to-local, align 4
  %v1_aa48 = trunc i32 %v4_aa4027 to i8
  %v3_aa48 = add i32 %v0_aa34, 15
  %v4_aa48 = inttoptr i32 %v3_aa48 to i8*
  store i8 %v1_aa48, i8* %v4_aa48, align 1
  %v3_aa4c = load i32, i32* @r6, align 4
  %v4_aa4c = add i32 %v3_aa4c, 14
  %v5_aa4c = inttoptr i32 %v4_aa4c to i8*
  store i8 %v1_a9b8, i8* %v5_aa4c, align 1
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = trunc i32 %v0_aa50 to i8
  %v2_aa50 = load i32, i32* @r6, align 4
  %v3_aa50 = add i32 %v2_aa50, 13
  %v4_aa50 = inttoptr i32 %v3_aa50 to i8*
  store i8 %v1_aa50, i8* %v4_aa50, align 1
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = add i32 %v0_aa54, 40
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @sb, align 4
  store i32 %v0_aa58, i32* @r1, align 4
  %v1_aa5c = inttoptr i32 %v1_aa54 to i8*
  %v2_aa5c = call i32 @function_ecc8(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_a600, %bb81
  %v3_aa60 = load i32, i32* %stack_var_-40, align 4
  %v1_aa64 = add i32 %v3_aa60, 1
  store i32 %v1_aa64, i32* %r3.global-to-local, align 4
  %v1_aa68 = load i32, i32* @fp, align 4
  %v9_aa68 = icmp eq i32 %v1_aa64, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa64, i32* %stack_var_-40, align 4
  %v5_aa70 = icmp slt i32 %v1_aa64, %v1_aa68
  br i1 %v5_aa70, label %dec_label_pc_a5f0, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa60, %.thread18
  %v0_aa7c12 = phi i32 [ %v0_a5c4, %.thread18 ], [ %v1_aa68, %dec_label_pc_aa60 ]
  %v0_aa74 = load i32, i32* @sb, align 4
  %v1_aa74 = add i32 %v0_aa74, 40
  store i32 %v1_aa74, i32* @sl, align 4
  %v1_aa78 = add i32 %v0_aa74, 20
  store i32 %v1_aa78, i32* @r7, align 4
  %v2_aac8 = icmp eq i32 %v1_a574, 0
  %v6_aaa8 = inttoptr i32 %v2_a3e4 to i32*
  %v3_aab0 = icmp eq i32 %v3_a5cc, 65535
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aa74
  %v0_aa7c = phi i32 [ %v1_abb8, %dec_label_pc_aad8 ], [ %v0_aa7c12, %dec_label_pc_aa74 ]
  %v2_aa7c = icmp eq i32 %v0_aa7c, 0
  store i1 %v2_aa7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_aa7c, 1
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aa7c
  br i1 %tmp82, label %dec_label_pc_aa84, label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa84
  %v0_aa88 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_aa88, 256
  %v1_aa90 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_aa88, 256
  %v4_aa94 = urem i32 %tmp84, 256
  %v5_aa94 = or i32 %v4_aa94, %v1_aa90
  store i32 %v5_aa94, i32* @r8, align 4
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v7_aaa8 = load i32, i32* %v6_aaa8, align 4
  store i32 %v7_aaa8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_aabc = add i32 %v7_aaa8, 20
  store i32 %v1_aabc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_aacc = phi i32 [ %v7_abd0, %dec_label_pc_abc4 ], [ %v7_aaa8, %dec_label_pc_aa88 ]
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v1_aacc = add i32 %v0_aacc, 40
  store i32 %v1_aacc, i32* %r0.global-to-local, align 4
  %v0_aad0 = load i32, i32* @sb, align 4
  store i32 %v0_aad0, i32* @r1, align 4
  br i1 %v2_aac8, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_aad8:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4, %dec_label_pc_ac08
  %v2_aad8 = phi i32 [ %v0_aacc, %dec_label_pc_aac4 ], [ %v0_abfc, %dec_label_pc_abe4 ], [ %v2_aad8.pre, %dec_label_pc_ac08 ]
  %v0_aad8 = load i32, i32* @r6, align 4
  %v1_aad8 = trunc i32 %v0_aad8 to i8
  %v3_aad8 = add i32 %v2_aad8, 10
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r6, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r4, align 4
  %v3_aadc = add i32 %v2_aadc, 11
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae4 = load i32, i32* @r4, align 4
  store i32 %v0_aae4, i32* @r0, align 4
  %v2_aae8 = call i32 @function_d0b8(i32 %v0_aae4, i32 20)
  %v3_aae8 = trunc i32 %v2_aae8 to i8
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  %v3_aaec = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_aaf4 = mul i32 %v3_aaec, 16
  %v2_aaf8 = add i32 %v3_aaf4, %v2_a3d4
  store i32 %v2_aaf8, i32* %r1.global-to-local, align 4
  %v1_aafc = add i32 %v2_aaf8, 4
  %v2_aafc = inttoptr i32 %v1_aafc to i32*
  %v3_aafc = load i32, i32* %v2_aafc, align 4
  %v3_ab00 = mul i32 %v3_aafc, 65536
  store i32 %v3_ab00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_aafc, 256
  %v1_ab08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_aafc, 256
  %v4_ab0c = urem i32 %tmp86, 256
  %v5_ab0c = or i32 %v4_ab0c, %v1_ab08
  store i32 %v5_ab0c, i32* %r2.global-to-local, align 4
  %v1_ab10 = add i32 %v3_aafc, 1
  store i32 %v1_ab10, i32* %r3.global-to-local, align 4
  store i32 %v1_ab10, i32* %v2_aafc, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = load i32, i32* @r5, align 4
  %v2_ab18 = add i32 %v1_ab18, 4
  %v3_ab18 = inttoptr i32 %v2_ab18 to i32*
  store i32 %v0_ab18, i32* %v3_ab18, align 4
  %v0_ab1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab1c = add i32 %v0_ab1c, 8
  %v2_ab1c = inttoptr i32 %v1_ab1c to i32*
  %v3_ab1c = load i32, i32* %v2_ab1c, align 4
  %tmp87 = mul i32 %v3_ab1c, 256
  %v1_ab28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ab1c, 256
  %v4_ab2c = urem i32 %tmp88, 256
  %v5_ab2c = or i32 %v4_ab2c, %v1_ab28
  store i32 %v5_ab2c, i32* %r2.global-to-local, align 4
  %v4_ab3028 = udiv i32 %v2_aae8, 256
  %v1_ab34 = trunc i32 %v4_ab3028 to i8
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 11
  %v4_ab34 = inttoptr i32 %v3_ab34 to i8*
  store i8 %v1_ab34, i8* %v4_ab34, align 1
  %v3_ab38 = load i32, i32* @r4, align 4
  %v4_ab38 = add i32 %v3_ab38, 10
  %v5_ab38 = inttoptr i32 %v4_ab38 to i8*
  store i8 %v3_aae8, i8* %v5_ab38, align 1
  %v0_ab3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab3c = load i32, i32* @r5, align 4
  %v2_ab3c = add i32 %v1_ab3c, 8
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v0_ab3c, i32* %v3_ab3c, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  store i32 %v0_ab40, i32* @r1, align 4
  %v0_ab44 = load i32, i32* @r8, align 4
  store i32 %v0_ab44, i32* %r2.global-to-local, align 4
  %v0_ab48 = load i32, i32* @r7, align 4
  store i32 %v0_ab48, i32* %r3.global-to-local, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r6, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i8
  %v3_ab50 = add i32 %v0_ab40, 16
  %v4_ab50 = inttoptr i32 %v3_ab50 to i8*
  store i8 %v1_ab50, i8* %v4_ab50, align 1
  %v0_ab54 = load i32, i32* @r6, align 4
  %v1_ab54 = trunc i32 %v0_ab54 to i8
  %v2_ab54 = load i32, i32* @r5, align 4
  %v3_ab54 = add i32 %v2_ab54, 17
  %v4_ab54 = inttoptr i32 %v3_ab54 to i8*
  store i8 %v1_ab54, i8* %v4_ab54, align 1
  %v4_ab58 = call i32 @function_d114(i32 %v0_ab4c, i32 %v0_ab40, i32 %v0_ab44, i32 %v0_ab48)
  %v5_ab58 = trunc i32 %v4_ab58 to i8
  store i32 %v4_ab58, i32* %r0.global-to-local, align 4
  %v4_ab5c29 = udiv i32 %v4_ab58, 256
  %v1_ab60 = trunc i32 %v4_ab5c29 to i8
  %v2_ab60 = load i32, i32* @r5, align 4
  %v3_ab60 = add i32 %v2_ab60, 17
  %v4_ab60 = inttoptr i32 %v3_ab60 to i8*
  store i8 %v1_ab60, i8* %v4_ab60, align 1
  %v3_ab64 = load i32, i32* @r5, align 4
  %v4_ab64 = add i32 %v3_ab64, 16
  %v5_ab64 = inttoptr i32 %v4_ab64 to i8*
  store i8 %v5_ab58, i8* %v5_ab64, align 1
  %v3_ab68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab68, i32* %r3.global-to-local, align 4
  %v0_ab6c = load i32, i32* @r4, align 4
  %v1_ab6c = add i32 %v0_ab6c, 20
  %v2_ab6c = inttoptr i32 %v1_ab6c to i32*
  %v3_ab6c = load i32, i32* %v2_ab6c, align 4
  %v5_ab74 = mul i32 %v3_ab68, 24
  %v3_ab7c = udiv i32 %v3_ab6c, 65536
  store i32 %v3_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = add i32 %v5_ab74, %arg2
  store i32 %v2_ab80, i32* %ip.global-to-local, align 4
  %v3_ab844 = udiv i32 %v3_ab6c, 16777216
  %v1_ab88 = trunc i32 %v3_ab844 to i8
  %v3_ab88 = add i32 %v2_ab80, 3
  %v4_ab88 = inttoptr i32 %v3_ab88 to i8*
  store i8 %v1_ab88, i8* %v4_ab88, align 1
  %v0_ab8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab8c = trunc i32 %v0_ab8c to i8
  %v2_ab8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 2
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v1_ab8c, i8* %v4_ab8c, align 1
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* @sl, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aba4 = load i32, i32* %ip.global-to-local, align 4
  %v6_abac = inttoptr i32 %v0_ab90 to i32*
  %v7_abac = call i32 @function_12658(i32 %v3_a584, i32* %v6_abac, i32 %v0_ab9c, i32 16384, i32 %v0_aba4, i32 16)
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r3.global-to-local, align 4
  %v1_abb4 = add i32 %v3_abb0, 1
  store i32 %v1_abb4, i32* %r0.global-to-local, align 4
  %v1_abb8 = load i32, i32* @fp, align 4
  %v9_abb8 = icmp eq i32 %v1_abb4, %v1_abb8
  store i1 %v9_abb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abb4, i32* %stack_var_-40, align 4
  %v6_abc0 = icmp slt i32 %v1_abb4, %v1_abb8
  br i1 %v6_abc0, label %dec_label_pc_abc4, label %dec_label_pc_aa7c

dec_label_pc_abc4:                                ; preds = %dec_label_pc_aad8
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v4_abd0 = mul i32 %v1_abb4, 4
  %v5_abd0 = add i32 %v4_abd0, %v2_a3e4
  %v6_abd0 = inttoptr i32 %v5_abd0 to i32*
  %v7_abd0 = load i32, i32* %v6_abd0, align 4
  store i32 %v7_abd0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  %v1_abdc = add i32 %v7_abd0, 20
  store i32 %v1_abdc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_abe4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_abe4 = call i32 @function_eb48()
  %v1_abe4 = trunc i32 %v0_abe4 to i8
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  %v4_abec = sdiv i32 %v0_abe4, 256
  store i32 %v4_abec, i32* %r3.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v3_abf4 = load i32, i32* @r4, align 4
  %v4_abf4 = add i32 %v3_abf4, 4
  %v5_abf4 = inttoptr i32 %v4_abf4 to i8*
  store i8 %v1_abe4, i8* %v5_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r4, align 4
  %v3_abf8 = add i32 %v2_abf8, 5
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* @r4, align 4
  %v1_abfc = add i32 %v0_abfc, 40
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @sb, align 4
  store i32 %v0_ac00, i32* @r1, align 4
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4
  %v0_ac08 = phi i32 [ %v1_aacc, %dec_label_pc_aac4 ], [ %v1_abfc, %dec_label_pc_abe4 ]
  %v1_ac08 = inttoptr i32 %v0_ac08 to i8*
  %v2_ac08 = call i32 @function_ecc8(i8* %v1_ac08)
  store i32 %v2_ac08, i32* %r0.global-to-local, align 4
  %v2_aad8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aad8

; uselistorder directives
  uselistorder i32 %v0_abfc, { 1, 0 }
  uselistorder i32 %v7_abd0, { 1, 2, 0 }
  uselistorder i32 %v1_abb8, { 1, 2, 0 }
  uselistorder i32 %v1_abb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ab58, { 0, 2, 1 }
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder i32 %v3_ab1c, { 1, 0 }
  uselistorder i32 %v3_aafc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_aae8, { 0, 2, 1 }
  uselistorder i32 %v0_aacc, { 1, 0 }
  uselistorder i32 %v0_aa88, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i1 %v3_aab0, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a9b8, { 0, 2, 1 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a96c, { 1, 0, 2 }
  uselistorder i32 %v3_a960, { 1, 0 }
  uselistorder i32 %v3_a8f4, { 1, 0 }
  uselistorder i32 %v0_a8e8, { 1, 0 }
  uselistorder i32 %v3_a870, { 1, 0 }
  uselistorder i32 %v2_a85c, { 1, 0 }
  uselistorder i32 %v3_a840, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a838, { 1, 0 }
  uselistorder i32 %v3_a814, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a80c, { 1, 0 }
  uselistorder i32 %v4_a7f4, { 1, 0 }
  uselistorder i32 %v0_a7f0, { 0, 2, 1 }
  uselistorder i1 %v7_a760, { 1, 0 }
  uselistorder i32 %v7_a758, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i1 %v9_a788, { 1, 0 }
  uselistorder i32 %v4_a79c, { 1, 0 }
  uselistorder i32 %v4_a798, { 1, 0 }
  uselistorder i32 %v8_a6ac, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a698, { 1, 0 }
  uselistorder i32 %v0_a688, { 2, 0, 1, 3 }
  uselistorder i1 %v7_a610, { 1, 0 }
  uselistorder i32 %v3_a60c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_aa24, { 1, 0 }
  uselistorder i32 %v1_aa0c, { 1, 0 }
  uselistorder i32 %v1_a9f4, { 1, 0 }
  uselistorder i32 %v1_a9dc, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v5_a7a0, { 1, 0 }
  uselistorder i32 %v3_a6f493, { 1, 0 }
  uselistorder i1 %v2_a7b8, { 1, 0 }
  uselistorder i32 %v1_a7b4, { 1, 0 }
  uselistorder i32 %v4_a7b0, { 2, 0, 1 }
  uselistorder i32 %v4_a794, { 1, 0 }
  uselistorder i1 %v3_a6dc, { 1, 0 }
  uselistorder i32 %v8_a5d8, { 2, 1, 0 }
  uselistorder i32 %v8_a5d4, { 1, 2, 0 }
  uselistorder i32 %v3_a5cc, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_a5c8, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a5bc, { 1, 0 }
  uselistorder i1 %v7_a58c, { 1, 0 }
  uselistorder i32 %v3_a588, { 2, 0, 1 }
  uselistorder i32 %v3_a584, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_a574, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a51c, { 1, 2, 0 }
  uselistorder i32 %v1_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4dc, { 1, 2, 0 }
  uselistorder i32 %v1_a4bc, { 1, 2, 0 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v1_a464, { 1, 2, 0 }
  uselistorder i32 %v5_a420, { 0, 2, 1 }
  uselistorder i32 %v2_a3e4, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_a3d4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a3b8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
  uselistorder label %dec_label_pc_aad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aa60, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_a7e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a720, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
}

define i32 @function_ac14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_ac18 = urem i32 %arg1, 256
  store i32 %v1_ac18, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ac30 = urem i32 %arg3, 256
  store i32 %v1_ac30, i32* @r4, align 4
  %v2_ac34 = call i32 @function_129a8(i32 %v1_ac18, i32 4)
  %v0_ac38 = load i32, i32* @r5, align 4
  store i32 %v0_ac38, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r4, align 4
  %v5_ac4c = inttoptr i32 %v0_ac38 to i32*
  %v6_ac4c = call i32 @function_85e0(i32 %v0_ac48, i32* %v5_ac4c, i32 2, i32 0, i32 %v2_ac34)
  %v1_ac58 = urem i32 %v6_ac4c, 256
  store i32 %v1_ac58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r5, align 4
  store i32 %v0_ac64, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r4, align 4
  %v5_ac6c = trunc i32 %v6_ac4c to i8
  %v6_ac70 = inttoptr i32 %v0_ac64 to i32*
  %v7_ac70 = call i32 @function_85e0(i32 %v0_ac68, i32* %v6_ac70, i32 3, i32 65535, i32 %v6_ac4c)
  %v0_ac74 = load i32, i32* @r5, align 4
  store i32 %v0_ac74, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ac70, i32* @r8, align 4
  %v0_ac84 = load i32, i32* @r4, align 4
  %v5_ac88 = inttoptr i32 %v0_ac74 to i32*
  %v6_ac88 = call i32 @function_85e0(i32 %v0_ac84, i32* %v5_ac88, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_ac90 = urem i32 %v6_ac88, 256
  store i32 %v1_ac90, i32* %ip.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r5, align 4
  store i32 %v0_ac94, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aca0 = load i32, i32* @r4, align 4
  %sext13 = mul i32 %v6_ac88, 16777216
  %v5_aca8 = sdiv i32 %sext13, 16777216
  %v6_aca8 = inttoptr i32 %v0_ac94 to i32*
  %v7_aca8 = call i32 @function_85e0(i32 %v0_aca0, i32* %v6_aca8, i32 5, i32 0, i32 %v5_aca8)
  %v1_acb4 = urem i32 %v7_aca8, 256
  store i32 %v1_acb4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_acc0 = load i32, i32* @r5, align 4
  store i32 %v0_acc0, i32* %r1.global-to-local, align 4
  %v0_acc4 = load i32, i32* @r4, align 4
  %v5_accc = inttoptr i32 %v0_acc0 to i32*
  %v6_accc = call i32 @function_85e0(i32 %v0_acc4, i32* %v5_accc, i32 6, i32 65535, i32 %v1_acb4)
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_accc, i32* @r7, align 4
  %v0_ace4 = load i32, i32* @r4, align 4
  %v5_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v6_ace8 = call i32 @function_85e0(i32 %v0_ace4, i32* %v5_ace8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ace8, i32* @r6, align 4
  %v0_ad00 = load i32, i32* @r4, align 4
  %v5_ad04 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad04 = call i32 @function_85e0(i32 %v0_ad00, i32* %v5_ad04, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ad1c = load i32, i32* @r4, align 4
  %v5_ad20 = inttoptr i32 %v0_ad10 to i32*
  %v6_ad20 = call i32 @function_85e0(i32 %v0_ad1c, i32* %v5_ad20, i32 18, i32 65535, i32 %v6_ad04)
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_85e0(i32 %v0_ad34, i32* %v5_ad38, i32 11, i32 0, i32 %v6_ad20)
  %v0_ad3c = load i32, i32* @r5, align 4
  store i32 %v0_ad3c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad4c = load i32, i32* @r4, align 4
  %v5_ad50 = inttoptr i32 %v0_ad3c to i32*
  %v6_ad50 = call i32 @function_85e0(i32 %v0_ad4c, i32* %v5_ad50, i32 12, i32 1, i32 %v6_ad38)
  %v0_ad54 = load i32, i32* @r5, align 4
  store i32 %v0_ad54, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad64 = load i32, i32* @r4, align 4
  %v5_ad68 = inttoptr i32 %v0_ad54 to i32*
  %v6_ad68 = call i32 @function_85e0(i32 %v0_ad64, i32* %v5_ad68, i32 13, i32 0, i32 %v6_ad50)
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad7c = load i32, i32* @r4, align 4
  %v5_ad80 = inttoptr i32 %v0_ad6c to i32*
  %v6_ad80 = call i32 @function_85e0(i32 %v0_ad7c, i32* %v5_ad80, i32 14, i32 0, i32 %v6_ad68)
  %v0_ad84 = load i32, i32* @r5, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_85e0(i32 %v0_ad94, i32* %v5_ad98, i32 15, i32 0, i32 %v6_ad80)
  %v0_ad9c = load i32, i32* @r5, align 4
  store i32 %v0_ad9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  %v5_adb0 = inttoptr i32 %v0_ad9c to i32*
  %v6_adb0 = call i32 @function_85e0(i32 %v0_adac, i32* %v5_adb0, i32 16, i32 0, i32 %v6_ad98)
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_adc4 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_85e0(i32 %v0_adc4, i32* %v5_adc8, i32 0, i32 512, i32 %v6_adb0)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* @r5, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @r4, align 4
  %v5_ade0 = inttoptr i32 %v0_add8 to i32*
  %v6_ade0 = call i32 @function_85e0(i32 %v0_addc, i32* %v5_ade0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_adec = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_adec, i32* %r3.global-to-local, align 4
  %v1_adf0 = urem i32 %v6_ade0, 256
  store i32 %v1_adf0, i32* %ip.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  store i32 %v0_adf4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  %v5_ae04 = inttoptr i32 %v0_adf4 to i32*
  %v6_ae04 = call i32 @function_8574(i32 %v0_adfc, i32* %v5_ae04, i32 25, i32 %v2_adec, i32 %v1_adf0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae18 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  %v7_ae1c = icmp eq i32 %v3_ae18, -1
  store i1 %v7_ae1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae1c, label %dec_label_pc_b254, label %dec_label_pc_ae28

dec_label_pc_ae28:                                ; preds = %dec_label_pc_ac14
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ae30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ae30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae44 = call i32 @function_1268c(i32 %v3_ae18, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ae48 = icmp eq i32 %v6_ae44, -1
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae48, label %dec_label_pc_b24c, label %dec_label_pc_ae50

dec_label_pc_ae50:                                ; preds = %dec_label_pc_ae28
  %v0_ae50 = load i32, i32* @r8, align 4
  %v0_ae54 = load i32, i32* @r7, align 4
  %v0_ae58 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae60 = urem i32 %v0_ae50, 65536
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  %v3_ae64 = urem i32 %v0_ae54, 65536
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v3_ae68 = urem i32 %v0_ae58, 65536
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v0_ae6c = load i32, i32* @fp, align 4
  %v2_ae6c = icmp eq i32 %v0_ae6c, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_ae6c, 1
  br i1 %tmp75, label %dec_label_pc_b36c, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae50
  %v1_ae8c = add i32 %v6_adc8, 40
  %tmp76 = mul i32 %v1_ae8c, 256
  %v1_aea0 = urem i32 %v0_ae54, 256
  %v1_aea4 = and i32 %tmp76, 65280
  %v3_aea8 = mul nuw nsw i32 %v1_aea0, 256
  %v1_aeb0 = urem i32 %v0_ae58, 256
  %tmp77 = udiv i32 %v0_ae58, 256
  %v3_aeb4 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_ae8c, 256
  %v4_aeb8 = urem i32 %tmp78, 256
  %v5_aeb8 = or i32 %v4_aeb8, %v1_aea4
  store i32 %v5_aeb8, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_ae54, 256
  %v4_aebc = urem i32 %tmp79, 256
  %v5_aebc = or i32 %v4_aebc, %v3_aea8
  store i32 %v5_aebc, i32* @sl, align 4
  %v4_aec0 = mul nuw nsw i32 %v1_aeb0, 256
  %v5_aec0 = or i32 %v4_aec0, %v3_aeb4
  store i32 %v5_aec0, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_ae50, 256
  %v3_aed0 = urem i32 %tmp80, 256
  %v1_aed4 = urem i32 %v0_ae50, 256
  %tmp81 = mul i32 %v6_ad04, 256
  %v1_aedc = and i32 %tmp81, 65280
  %v1_aee0 = urem i32 %v6_ad38, 2
  %v1_aee4 = urem i32 %v6_ad50, 2
  %v1_aee8 = urem i32 %v6_ad68, 2
  %tmp82 = udiv i32 %v6_ad04, 256
  %v4_aeec = urem i32 %tmp82, 256
  %v5_aeec = or i32 %v4_aeec, %v1_aedc
  store i32 %v5_aeec, i32* @r8, align 4
  %v1_af0c = urem i32 %v6_ad80, 2
  %v1_af10 = urem i32 %v6_ad98, 2
  %v1_af14 = urem i32 %v6_adb0, 2
  %v1_af18 = urem i32 %v6_ad68, 256
  %v4_af1c = mul nuw nsw i32 %v1_aed4, 256
  %v5_af1c = or i32 %v4_af1c, %v3_aed0
  store i32 %v5_af1c, i32* @r5, align 4
  %v3_af3025 = udiv i32 %v1_aea4, 256
  store i32 %v3_af3025, i32* %r3.global-to-local, align 4
  store i32 %v1_aed4, i32* %ip.global-to-local, align 4
  store i32 %v1_aea0, i32* %r1.global-to-local, align 4
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v5_af4c = trunc i32 %v0_ae54 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v0_ae50, 16777216
  %v4_afb4 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp78, 16777216
  %v4_afc8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v1_ae8c, 16777216
  %v4_afcc = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_aee0
  %v4_b01c = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_aee4
  %v4_b030 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_aee8
  %v4_b044 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_af0c
  %v4_b058 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_af10
  %v3_b06c = and i32 %tmp96, 2
  %sext11 = mul i32 %v0_ae58, 16777216
  %v7_b09c = sdiv i32 %sext11, 16777216
  %v1_afb0 = trunc i32 %v5_aca8 to i8
  %extract.t = trunc i32 %v4_afb4 to i8
  %v3_b09c = sext i8 %v5_af4c to i32
  %v2_b0c0 = icmp eq i32 %v1_af18, 0
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb89, %dec_label_pc_ae84
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af64 = call i32 @function_129a8(i32 1510, i32 1)
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v2_af70 = load i32, i32* @r4, align 4
  %v5_af70 = mul i32 %v2_af70, 4
  %v6_af70 = add i32 %v5_af70, %v2_ac34
  %v7_af70 = inttoptr i32 %v6_af70 to i32*
  store i32 %v2_af64, i32* %v7_af70, align 4
  %v3_af74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af74, i32* %r3.global-to-local, align 4
  %v0_af78 = load i32, i32* %ip.global-to-local, align 4
  %v4_af78 = mul i32 %v3_af74, 4
  %v5_af78 = add i32 %v0_af78, %v4_af78
  %v6_af78 = inttoptr i32 %v5_af78 to i32*
  %v7_af78 = load i32, i32* %v6_af78, align 4
  store i32 %v7_af78, i32* @r7, align 4
  %v1_af7c = inttoptr i32 %v7_af78 to i8*
  %v2_af7c = load i8, i8* %v1_af7c, align 1
  %tmp97 = urem i8 %v2_af7c, 16
  %v1_af80 = zext i8 %tmp97 to i32
  %v1_af84 = or i32 %v1_af80, 64
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v1_af84 to i8
  store i8 %v1_af88, i8* %v1_af7c, align 1
  %v0_af8c = load i32, i32* @r7, align 4
  %v1_af8c = inttoptr i32 %v0_af8c to i8*
  %v2_af8c = load i8, i8* %v1_af8c, align 1
  %v1_af90 = and i8 %v2_af8c, -16
  %v1_af94 = or i8 %v1_af90, 5
  store i32 %v1_acb4, i32* %r1.global-to-local, align 4
  store i8 %v1_af94, i8* %v1_af8c, align 1
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v5_ac6c, i8* %v4_afa4, align 1
  store i32 %v5_aca8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v2_afac = icmp eq i32 %v0_afac, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = load i32, i32* @r7, align 4
  %v3_afb0 = add i32 %v2_afb0, 8
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  store i32 %v4_afb4, i32* %r2.global-to-local, align 4
  %v0_afb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afb8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_afbc = load i32, i32* @r7, align 4
  %v4_afbc = add i32 %v3_afbc, 6
  %v5_afbc = inttoptr i32 %v4_afbc to i8*
  store i8 64, i8* %v5_afbc, align 1
  %v0_afc4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_afc4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af58, %bb
  %v0_afc4.off0 = phi i8 [ %extract.t, %dec_label_pc_af58 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_afc4 = load i32, i32* @r7, align 4
  %v3_afc4 = add i32 %v2_afc4, 5
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v0_afc4.off0, i8* %v4_afc4, align 1
  store i32 %v4_afc8, i32* %ip.global-to-local, align 4
  store i32 %v4_afcc, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd0, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_afd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  %v2_afd4 = load i32, i32* @r7, align 4
  %v3_afd4 = add i32 %v2_afd4, 9
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v1_afd4, i8* %v4_afd4, align 1
  %v0_afd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd8, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_afd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_afd8 = trunc i32 %v1_afd8 to i8
  %v3_afd8 = load i32, i32* @r7, align 4
  %v4_afd8 = add i32 %v3_afd8, 7
  %v5_afd8 = inttoptr i32 %v4_afd8 to i8*
  store i8 %v2_afd8, i8* %v5_afd8, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r2.global-to-local, align 4
  %v0_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i8
  %v2_afe0 = load i32, i32* @r7, align 4
  %v3_afe0 = add i32 %v2_afe0, 2
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  store i32 %v6_ae04, i32* %ip.global-to-local, align 4
  %v0_afe8 = load i32, i32* %r2.global-to-local, align 4
  %v3_afe8 = mul i32 %v0_afe8, 32
  store i32 %v3_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = load i32, i32* @r7, align 4
  %v2_afec = add i32 %v1_afec, 12
  %v3_afec = inttoptr i32 %v2_afec to i32*
  store i32 %v6_ae04, i32* %v3_afec, align 4
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_aff0, -8
  %v5_aff0 = add i32 %v0_aff0, %tmp98
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v5_aff0
  store i32 %v2_aff4, i32* %r3.global-to-local, align 4
  %v1_aff8 = add i32 %v2_aff4, 16
  %v2_aff8 = inttoptr i32 %v1_aff8 to i32*
  %v3_aff8 = load i32, i32* %v2_aff8, align 4
  store i32 %v3_aff8, i32* %r2.global-to-local, align 4
  %v0_affc = load i32, i32* %r1.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r7, align 4
  %v3_affc = add i32 %v2_affc, 3
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = load i32, i32* @r5, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 4
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r7, align 4
  %v2_b004 = add i32 %v1_b004, 16
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* @sl, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* @r7, align 4
  %v3_b008 = add i32 %v2_b008, 20
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r7, align 4
  %v1_b00c = add i32 %v0_b00c, 20
  store i32 %v1_b00c, i32* @r4, align 4
  %v1_b010 = add i32 %v0_b00c, 33
  %v2_b010 = inttoptr i32 %v1_b010 to i8*
  %v3_b010 = load i8, i8* %v2_b010, align 1
  %v4_b010 = zext i8 %v3_b010 to i32
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v1_b018 = and i32 %v4_b010, 223
  %v5_b01c = or i32 %v1_b018, %v4_b01c
  store i32 %v5_b01c, i32* %r3.global-to-local, align 4
  %v1_b020 = trunc i32 %v5_b01c to i8
  store i8 %v1_b020, i8* %v2_b010, align 1
  %v0_b024 = load i32, i32* @r4, align 4
  %v1_b024 = add i32 %v0_b024, 13
  %v2_b024 = inttoptr i32 %v1_b024 to i8*
  %v3_b024 = load i8, i8* %v2_b024, align 1
  %v4_b024 = zext i8 %v3_b024 to i32
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v1_b02c = and i32 %v4_b024, 239
  %v5_b030 = or i32 %v1_b02c, %v4_b030
  store i32 %v5_b030, i32* %r2.global-to-local, align 4
  %v1_b034 = trunc i32 %v5_b030 to i8
  store i8 %v1_b034, i8* %v2_b024, align 1
  %v0_b038 = load i32, i32* @r4, align 4
  %v1_b038 = add i32 %v0_b038, 13
  %v2_b038 = inttoptr i32 %v1_b038 to i8*
  %v3_b038 = load i8, i8* %v2_b038, align 1
  %v4_b038 = zext i8 %v3_b038 to i32
  store i32 %v1_aee8, i32* %ip.global-to-local, align 4
  %v1_b040 = and i32 %v4_b038, 247
  %v5_b044 = or i32 %v1_b040, %v4_b044
  store i32 %v5_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = trunc i32 %v5_b044 to i8
  store i8 %v1_b048, i8* %v2_b038, align 1
  %v0_b04c = load i32, i32* @r4, align 4
  %v1_b04c = add i32 %v0_b04c, 13
  %v2_b04c = inttoptr i32 %v1_b04c to i8*
  %v3_b04c = load i8, i8* %v2_b04c, align 1
  %v4_b04c = zext i8 %v3_b04c to i32
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v1_b054 = and i32 %v4_b04c, 251
  %v5_b058 = or i32 %v1_b054, %v4_b058
  store i32 %v5_b058, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v5_b058 to i8
  store i8 %v1_b05c, i8* %v2_b04c, align 1
  %v0_b060 = load i32, i32* @r4, align 4
  %v1_b060 = add i32 %v0_b060, 13
  %v2_b060 = inttoptr i32 %v1_b060 to i8*
  %v3_b060 = load i8, i8* %v2_b060, align 1
  %v4_b060 = zext i8 %v3_b060 to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_b068 = and i32 %v4_b060, 253
  %v4_b06c = or i32 %v1_b068, %v3_b06c
  store i32 %v4_b06c, i32* %r3.global-to-local, align 4
  %v1_b070 = trunc i32 %v4_b06c to i8
  store i8 %v1_b070, i8* %v2_b060, align 1
  %v0_b074 = load i32, i32* @r4, align 4
  %v1_b074 = add i32 %v0_b074, 12
  %v2_b074 = inttoptr i32 %v1_b074 to i8*
  %v3_b074 = load i8, i8* %v2_b074, align 1
  %v4_b074 = zext i8 %v3_b074 to i32
  store i32 %v4_b074, i32* %r2.global-to-local, align 4
  %v1_b078 = add i32 %v0_b074, 13
  %v2_b078 = inttoptr i32 %v1_b078 to i8*
  %v3_b078 = load i8, i8* %v2_b078, align 1
  %v4_b078 = zext i8 %v3_b078 to i32
  store i32 %v1_af14, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_b074, 16
  %v1_b080 = zext i8 %tmp99 to i32
  %v1_b084 = and i32 %v4_b078, 254
  %v2_b088 = or i32 %v1_b084, %v1_af14
  store i32 %v2_b088, i32* %r3.global-to-local, align 4
  %v1_b08c = or i32 %v1_b080, 80
  store i32 %v1_b08c, i32* %r2.global-to-local, align 4
  %v1_b090 = trunc i32 %v2_b088 to i8
  store i8 %v1_b090, i8* %v2_b078, align 1
  %v0_b094 = load i32, i32* %r2.global-to-local, align 4
  %v1_b094 = trunc i32 %v0_b094 to i8
  %v2_b094 = load i32, i32* @r4, align 4
  %v3_b094 = add i32 %v2_b094, 12
  %v4_b094 = inttoptr i32 %v3_b094 to i8*
  store i8 %v1_b094, i8* %v4_b094, align 1
  store i32 %v3_b09c, i32* %r1.global-to-local, align 4
  store i32 %v7_b09c, i32* %r2.global-to-local, align 4
  %v2_b0a0 = load i32, i32* @r4, align 4
  %v3_b0a0 = add i32 %v2_b0a0, 1
  %v4_b0a0 = inttoptr i32 %v3_b0a0 to i8*
  store i8 %v5_af4c, i8* %v4_b0a0, align 1
  %v0_b0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 3
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* @r6, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 2
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i32, i32* @r8, align 4
  %v1_b0ac = load i32, i32* @r4, align 4
  %v2_b0ac = add i32 %v1_b0ac, 4
  %v3_b0ac = inttoptr i32 %v2_b0ac to i32*
  store i32 %v0_b0ac, i32* %v3_b0ac, align 4
  %v0_b0b0 = call i32 @function_eb48()
  store i32 %v1_af18, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_b0b0, 16777216
  %v1_b0b8 = sdiv i32 %sext, 16777216
  store i32 %v1_b0b8, i32* %r2.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext, 31
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i1 %v2_b0c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c4 = trunc i32 %v3_b0bc to i8
  %v2_b0c4 = load i32, i32* @r4, align 4
  %v3_b0c4 = add i32 %v2_b0c4, 15
  %v4_b0c4 = inttoptr i32 %v3_b0c4 to i8*
  store i8 %v1_b0c4, i8* %v4_b0c4, align 1
  %v0_b0c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_b0d4.pre = load i32, i32* @r4, align 4
  br i1 %v0_b0c8, label %.thread12, label %bb87

bb87:                                             ; preds = %bb86
  %v2_b0c8 = add i32 %v2_b0d4.pre, 13
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  %v4_b0c8 = load i8, i8* %v3_b0c8, align 1
  %v5_b0c8 = zext i8 %v4_b0c8 to i32
  %v2_b0cc = or i32 %v5_b0c8, 8
  store i32 %v2_b0cc, i32* %r3.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb86, %bb87
  store i32 %v6_adc8, i32* @r1, align 4
  %v0_b0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0d4 = trunc i32 %v0_b0d4 to i8
  %v3_b0d4 = add i32 %v2_b0d4.pre, 14
  %v4_b0d4 = inttoptr i32 %v3_b0d4 to i8*
  store i8 %v1_b0d4, i8* %v4_b0d4, align 1
  %v0_b0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0d8, label %bb89, label %bb88

bb88:                                             ; preds = %.thread12
  %v1_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b0d8 = trunc i32 %v1_b0d8 to i8
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 13
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v2_b0d8, i8* %v5_b0d8, align 1
  br label %bb89

bb89:                                             ; preds = %.thread12, %bb88
  %v0_b0dc = load i32, i32* @r7, align 4
  %v1_b0dc = add i32 %v0_b0dc, 40
  %v1_b0e0 = inttoptr i32 %v1_b0dc to i8*
  %v2_b0e0 = call i32 @function_ecc8(i8* %v1_b0e0)
  %v3_b0e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0e4, i32* %r3.global-to-local, align 4
  %v1_b0e8 = add i32 %v3_b0e4, 1
  store i32 %v1_b0e8, i32* @r4, align 4
  %v0_b0ec = load i32, i32* @fp, align 4
  %v9_b0ec = icmp eq i32 %v0_b0ec, %v1_b0e8
  store i1 %v9_b0ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0e8, i32* %stack_var_-40, align 4
  %v8_b0f4 = icmp sgt i32 %v0_b0ec, %v1_b0e8
  br i1 %v8_b0f4, label %dec_label_pc_af58, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %bb89
  store i32 %v6_adc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

dec_label_pc_b100.preheader:                      ; preds = %dec_label_pc_b0f8, %dec_label_pc_b36c
  %v0_b10017 = phi i32 [ %v0_b0ec, %dec_label_pc_b0f8 ], [ %v0_ae6c, %dec_label_pc_b36c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_ae8c, %dec_label_pc_b0f8 ], [ %v1_b374, %dec_label_pc_b36c ]
  %storemerge = add i32 %v6_adc8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_b2b8 = icmp eq i32 %v6_ae04, -1
  %v8_b2b8 = icmp eq i32 %v6_ae04, -1
  %v3_b2d4 = icmp eq i32 %v3_ae60, 65535
  %v2_b350 = icmp eq i32 %v1_adf0, 0
  br label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b100.preheader
  %v0_b100 = phi i32 [ %v0_b10017, %dec_label_pc_b100.preheader ], [ %v0_b23c, %dec_label_pc_b1a8 ]
  %v2_b100 = icmp eq i32 %v0_b100, 0
  store i1 %v2_b100, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_b100, 1
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %dec_label_pc_b108, %dec_label_pc_b100
  br i1 %tmp90, label %dec_label_pc_b108, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b108
  %v0_b10c = load i32, i32* @r8, align 4
  %v3_b10c = mul i32 %v0_b10c, 65536
  store i32 %v3_b10c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_b10c, 256
  %v1_b114 = and i32 %tmp91, 65280
  store i32 %v1_b114, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_b10c, 256
  %v4_b120 = urem i32 %tmp92, 256
  %v5_b120 = or i32 %v4_b120, %v1_b114
  store i32 %v5_b120, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b10c
  %v1_b13c = phi i32 [ %v1_b238, %dec_label_pc_b1a8 ], [ 0, %dec_label_pc_b10c ]
  %v5_b12c = mul i32 %v1_b13c, 24
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v5_b12c
  store i32 %v2_b130, i32* %r3.global-to-local, align 4
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v1_b138 = add i32 %v2_b130, 20
  %v2_b138 = inttoptr i32 %v1_b138 to i8*
  %v3_b138 = load i8, i8* %v2_b138, align 1
  %v4_b138 = zext i8 %v3_b138 to i32
  store i32 %v4_b138, i32* %r2.global-to-local, align 4
  %v4_b13c = mul i32 %v1_b13c, 4
  %v5_b13c = add i32 %v4_b13c, %v2_ac34
  %v6_b13c = inttoptr i32 %v5_b13c to i32*
  %v7_b13c = load i32, i32* %v6_b13c, align 4
  store i32 %v7_b13c, i32* @r5, align 4
  %v7_b140 = icmp eq i8 %v3_b138, 31
  store i1 %v7_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b144 = add i32 %v7_b13c, 20
  store i32 %v1_b144, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_b138, 32
  br i1 %tmp100, label %dec_label_pc_b25c, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b128
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge, %dec_label_pc_b158
  %v1_b170 = phi i32 [ %v1_b170.pre, %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge ], [ 65535, %dec_label_pc_b158 ]
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v9_b170 = icmp eq i32 %v3_ae64, %v1_b170
  store i1 %v9_b170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b170, label %dec_label_pc_b2fc, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge, %dec_label_pc_b16c
  %v1_b17c = phi i32 [ %v1_b17c.pre, %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge ], [ %v1_b170, %dec_label_pc_b16c ]
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v9_b17c = icmp eq i32 %v3_ae68, %v1_b17c
  store i1 %v9_b17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b17c, label %dec_label_pc_b318, label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge, %dec_label_pc_b178
  %v1_b188 = phi i32 [ %v1_b188.pre, %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge ], [ %v1_b17c, %dec_label_pc_b178 ]
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v9_b188 = icmp eq i32 %v6_ad04, %v1_b188
  store i1 %v9_b188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b188, label %dec_label_pc_b334, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %dec_label_pc_b318.dec_label_pc_b190_crit_edge, %dec_label_pc_b184
  %v1_b194 = phi i32 [ %v1_b194.pre, %dec_label_pc_b318.dec_label_pc_b190_crit_edge ], [ %v1_b188, %dec_label_pc_b184 ]
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v9_b194 = icmp eq i32 %v6_ad20, %v1_b194
  store i1 %v9_b194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b194, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348, %dec_label_pc_b35c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r7, align 4
  %v1_b1ac = trunc i32 %v0_b1ac to i8
  %v2_b1ac = load i32, i32* @r5, align 4
  %v3_b1ac = add i32 %v2_b1ac, 10
  %v4_b1ac = inttoptr i32 %v3_b1ac to i8*
  store i8 %v1_b1ac, i8* %v4_b1ac, align 1
  %v0_b1b0 = load i32, i32* @r7, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* @r5, align 4
  %v3_b1b0 = add i32 %v2_b1b0, 11
  %v4_b1b0 = inttoptr i32 %v3_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v4_b1b0, align 1
  %v0_b1b4 = load i32, i32* @r5, align 4
  store i32 %v0_b1b4, i32* @r0, align 4
  %v2_b1b8 = call i32 @function_d0b8(i32 %v0_b1b4, i32 20)
  %v3_b1b8 = trunc i32 %v2_b1b8 to i8
  %v4_b1bc28 = udiv i32 %v2_b1b8, 256
  %v1_b1c0 = trunc i32 %v4_b1bc28 to i8
  %v2_b1c0 = load i32, i32* @r5, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 11
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i8*
  store i8 %v1_b1c0, i8* %v4_b1c0, align 1
  %v3_b1c4 = load i32, i32* @r5, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 10
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v3_b1b8, i8* %v5_b1c4, align 1
  %v0_b1c8 = load i32, i32* @r6, align 4
  store i32 %v0_b1c8, i32* @r1, align 4
  %v0_b1cc = load i32, i32* @sl, align 4
  store i32 %v0_b1cc, i32* %r2.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r7, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v3_b1d4 = add i32 %v0_b1c8, 16
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* @r7, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r6, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 17
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* @r5, align 4
  %v4_b1e0 = call i32 @function_d114(i32 %v0_b1dc, i32 %v0_b1c8, i32 %v0_b1cc, i32 %v0_b1d0)
  %v5_b1e0 = trunc i32 %v4_b1e0 to i8
  %v4_b1e429 = udiv i32 %v4_b1e0, 256
  %v1_b1e8 = trunc i32 %v4_b1e429 to i8
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 17
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  %v3_b1ec = load i32, i32* @r6, align 4
  %v4_b1ec = add i32 %v3_b1ec, 16
  %v5_b1ec = inttoptr i32 %v4_b1ec to i8*
  store i8 %v5_b1e0, i8* %v5_b1ec, align 1
  %v3_b1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b1f0, i32* %r3.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v3_b1fc = udiv i32 %v3_b1f4, 65536
  store i32 %v3_b1fc, i32* %r2.global-to-local, align 4
  %v5_b200 = mul i32 %v3_b1f0, 24
  %v1_b204 = load i32, i32* @sb, align 4
  %v2_b204 = add i32 %v1_b204, %v5_b200
  store i32 %v2_b204, i32* %ip.global-to-local, align 4
  %v3_b20827 = udiv i32 %v3_b1f4, 16777216
  %v1_b20c = trunc i32 %v3_b20827 to i8
  %v3_b20c = add i32 %v2_b204, 3
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %ip.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 %v0_b218, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b228 = load i32, i32* %ip.global-to-local, align 4
  %v6_b230 = inttoptr i32 %v0_b218 to i32*
  %v7_b230 = call i32 @function_12658(i32 %v3_ae18, i32* %v6_b230, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_b228, i32 16)
  %v3_b234 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = add i32 %v3_b234, 1
  %v0_b23c = load i32, i32* @fp, align 4
  %v9_b23c = icmp eq i32 %v0_b23c, %v1_b238
  store i1 %v9_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b238, i32* %stack_var_-40, align 4
  %v7_b244 = icmp sgt i32 %v0_b23c, %v1_b238
  br i1 %v7_b244, label %dec_label_pc_b128, label %dec_label_pc_b100

dec_label_pc_b24c:                                ; preds = %dec_label_pc_ae28
  %v1_b250 = call i32 @function_11da0(i32 %v3_ae18)
  br label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_ac14, %dec_label_pc_b24c
  %v29_b258 = phi i32 [ %v3_ae18, %dec_label_pc_ac14 ], [ %v1_b250, %dec_label_pc_b24c ]
  ret i32 %v29_b258

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b128
  %v1_b25c = add i32 %v2_b130, 16
  %v2_b25c = inttoptr i32 %v1_b25c to i32*
  %v3_b25c = load i32, i32* %v2_b25c, align 4
  %v0_b260 = call i32 @function_eb48()
  %v3_b264 = load i32, i32* %stack_var_-40, align 4
  %v5_b26c = mul i32 %v3_b264, 24
  %v1_b274 = load i32, i32* @sb, align 4
  %v2_b274 = add i32 %v1_b274, %v5_b26c
  store i32 %v2_b274, i32* %r1.global-to-local, align 4
  %v1_b278 = and i32 %v3_b25c, 65280
  store i32 %v1_b278, i32* %r3.global-to-local, align 4
  %v1_b270 = udiv i32 %v3_b25c, 256
  %v3_b27c = and i32 %v1_b270, 65280
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  %v3_b280 = mul i32 %v3_b25c, 16777216
  store i32 %v3_b280, i32* %ip.global-to-local, align 4
  %v1_b284 = add i32 %v2_b274, 20
  %v2_b284 = inttoptr i32 %v1_b284 to i8*
  %v3_b284 = load i8, i8* %v2_b284, align 1
  %v4_b284 = zext i8 %v3_b284 to i32
  %v4_b288 = mul nuw nsw i32 %v1_b278, 256
  %v5_b288 = or i32 %v4_b288, %v3_b280
  store i32 %v5_b288, i32* %ip.global-to-local, align 4
  %v2_b290 = call i32 @llvm.bswap.i32(i32 %v3_b25c)
  %v7_b294 = lshr i32 %v0_b260, %v4_b284
  %v8_b294 = add i32 %v7_b294, %v2_b290
  store i32 %v8_b294, i32* %r2.global-to-local, align 4
  %v2_b2b0 = call i32 @llvm.bswap.i32(i32 %v8_b294)
  store i32 %v2_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2bc = load i32, i32* @r5, align 4
  %v2_b2bc = add i32 %v1_b2bc, 16
  %v3_b2bc = inttoptr i32 %v2_b2bc to i32*
  store i32 %v2_b2b0, i32* %v3_b2bc, align 4
  br i1 %v3_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  %v0_b2c4 = call i32 @function_eb48()
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d8 = load i32, i32* @r5, align 4
  %v2_b2d8 = add i32 %v1_b2d8, 12
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  store i32 %v0_b2c4, i32* %v3_b2d8, align 4
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge

dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge:    ; preds = %dec_label_pc_b2c4
  %v1_b170.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b158
  %v0_b2e0 = call i32 @function_eb48()
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v4_b2e430 = udiv i32 %v0_b2e0, 256
  %v1_b2e8 = trunc i32 %v4_b2e430 to i8
  %v2_b2e8 = load i32, i32* @r5, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 5
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i8*
  store i8 %v1_b2e8, i8* %v4_b2e8, align 1
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v1_b2f0 = load i32, i32* @r4, align 4
  %v9_b2f0 = icmp eq i32 %v3_ae64, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i8*
  store i8 %v1_b2e0, i8* %v5_b2f4, align 1
  %v0_b2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b2f8, label %dec_label_pc_b2fc, label %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge

dec_label_pc_b2e0.dec_label_pc_b178_crit_edge:    ; preds = %dec_label_pc_b2e0
  %v1_b17c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b178

dec_label_pc_b2fc:                                ; preds = %dec_label_pc_b2e0, %dec_label_pc_b16c
  %v0_b2fc = call i32 @function_eb48()
  %v1_b2fc = trunc i32 %v0_b2fc to i8
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v4_b304 = sdiv i32 %v0_b2fc, 256
  store i32 %v4_b304, i32* %r3.global-to-local, align 4
  %v1_b308 = load i32, i32* @r4, align 4
  %v9_b308 = icmp eq i32 %v3_ae68, %v1_b308
  store i1 %v9_b308, i1* %cpsr_z.global-to-local, align 1
  %v3_b30c = load i32, i32* @r5, align 4
  %v4_b30c = add i32 %v3_b30c, 20
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b2fc, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* %r3.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* @r6, align 4
  %v3_b310 = add i32 %v2_b310, 1
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b314, label %dec_label_pc_b318, label %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge

dec_label_pc_b2fc.dec_label_pc_b184_crit_edge:    ; preds = %dec_label_pc_b2fc
  %v1_b188.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b184

dec_label_pc_b318:                                ; preds = %dec_label_pc_b2fc, %dec_label_pc_b178
  %v0_b318 = call i32 @function_eb48()
  %v1_b318 = trunc i32 %v0_b318 to i8
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v4_b320 = sdiv i32 %v0_b318, 256
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v9_b324 = icmp eq i32 %v6_ad04, %v1_b324
  store i1 %v9_b324, i1* %cpsr_z.global-to-local, align 1
  %v1_b328 = trunc i32 %v4_b320 to i8
  %v2_b328 = load i32, i32* @r6, align 4
  %v3_b328 = add i32 %v2_b328, 3
  %v4_b328 = inttoptr i32 %v3_b328 to i8*
  store i8 %v1_b328, i8* %v4_b328, align 1
  %v3_b32c = load i32, i32* @r6, align 4
  %v4_b32c = add i32 %v3_b32c, 2
  %v5_b32c = inttoptr i32 %v4_b32c to i8*
  store i8 %v1_b318, i8* %v5_b32c, align 1
  %v0_b330 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b330, label %dec_label_pc_b334, label %dec_label_pc_b318.dec_label_pc_b190_crit_edge

dec_label_pc_b318.dec_label_pc_b190_crit_edge:    ; preds = %dec_label_pc_b318
  %v1_b194.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b190

dec_label_pc_b334:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b184
  %v0_b334 = call i32 @function_eb48()
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v1_b33c = load i32, i32* @r4, align 4
  %v9_b33c = icmp eq i32 %v6_ad20, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  %v1_b340 = load i32, i32* @r6, align 4
  %v2_b340 = add i32 %v1_b340, 4
  %v3_b340 = inttoptr i32 %v2_b340 to i32*
  store i32 %v0_b334, i32* %v3_b340, align 4
  br i1 %v9_b33c, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b348:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  %v0_b348 = call i32 @function_eb48()
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  %v1_b354 = load i32, i32* @r6, align 4
  %v2_b354 = add i32 %v1_b354, 8
  %v3_b354 = inttoptr i32 %v2_b354 to i32*
  store i32 %v0_b348, i32* %v3_b354, align 4
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b35c:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348
  %v0_b35c = load i32, i32* @r5, align 4
  %v1_b35c = add i32 %v0_b35c, 40
  store i32 %v6_adc8, i32* @r1, align 4
  %v1_b364 = inttoptr i32 %v1_b35c to i8*
  %v2_b364 = call i32 @function_ecc8(i8* %v1_b364)
  br label %dec_label_pc_b1a8

dec_label_pc_b36c:                                ; preds = %dec_label_pc_ae50
  store i32 %v6_adc8, i32* %r3.global-to-local, align 4
  %v1_b374 = add i32 %v6_adc8, 40
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

; uselistorder directives
  uselistorder i32 %v1_b374, { 1, 0 }
  uselistorder i32 %v4_b320, { 1, 0 }
  uselistorder i32 %v2_b2b0, { 1, 0 }
  uselistorder i32 %v3_b280, { 1, 0 }
  uselistorder i32 %v3_b25c, { 1, 3, 2, 0 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b238, { 2, 0, 3, 1 }
  uselistorder i32 %v0_b1c8, { 1, 0, 2 }
  uselistorder i32 %v0_b10c, { 2, 0, 1 }
  uselistorder i32 %v0_b100, { 1, 0 }
  uselistorder i1 %v2_b350, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b2d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b0e8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_af4c, { 1, 0 }
  uselistorder i32 %v1_af14, { 1, 0 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_af0c, { 1, 0 }
  uselistorder i32 %v1_aee8, { 1, 0 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea0, { 1, 0 }
  uselistorder i32 %v1_ae8c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ae6c, { 1, 0, 2 }
  uselistorder i32 %v3_ae60, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae54, { 3, 0, 1, 2 }
  uselistorder i32 %v0_ae50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_ae48, { 1, 0 }
  uselistorder i1 %v7_ae1c, { 1, 0 }
  uselistorder i32 %v3_ae18, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ae04, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_adf0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_adc8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ad20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ad04, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_acb4, { 1, 2, 0 }
  uselistorder i32 %v5_aca8, { 0, 2, 1 }
  uselistorder i32 %v6_ac4c, { 1, 2, 0 }
  uselistorder i32 %v2_ac34, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_ac18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_b35c, { 1, 0 }
  uselistorder label %dec_label_pc_b254, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b100.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b388(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b388:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b388 = load i32, i32* @r4, align 4
  %v12_b388 = load i32, i32* @r7, align 4
  %v1_b38c = urem i32 %arg1, 256
  store i32 %v1_b38c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_b38c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b3a4 = urem i32 %arg3, 256
  store i32 %v1_b3a4, i32* @r4, align 4
  %v2_b3a8 = call i32 @function_129a8(i32 %v1_b38c, i32 4)
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b3a8, i32* %fp.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v6_b3c0 = call i32 @function_85e0(i32 %v0_b3bc, i32* %v5_b3c0, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b3cc = urem i32 %v6_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e0 = trunc i32 %v6_b3c0 to i8
  %v6_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v7_b3e4 = call i32 @function_85e0(i32 %v0_b3dc, i32* %v6_b3e4, i32 3, i32 65535, i32 %v6_b3c0)
  %v0_b3e8 = load i32, i32* @r5, align 4
  store i32 %v0_b3e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3e8 to i32*
  %v6_b3fc = call i32 @function_85e0(i32 %v0_b3f8, i32* %v5_b3fc, i32 4, i32 64, i32 %v7_b3e4)
  %v1_b404 = urem i32 %v6_b3fc, 256
  store i32 %v1_b404, i32* %ip.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b3fc, 16777216
  %v5_b41c = sdiv i32 %sext9, 16777216
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_85e0(i32 %v0_b414, i32* %v6_b41c, i32 5, i32 1, i32 %v5_b41c)
  %v1_b428 = urem i32 %v7_b41c, 256
  store i32 %v1_b428, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b434 = load i32, i32* @r5, align 4
  store i32 %v0_b434, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* @r4, align 4
  store i32 %v0_b438, i32* %r0.global-to-local, align 4
  %v5_b440 = inttoptr i32 %v0_b434 to i32*
  %v6_b440 = call i32 @function_85e0(i32 %v0_b438, i32* %v5_b440, i32 6, i32 65535, i32 %v1_b428)
  %v0_b448 = load i32, i32* @r5, align 4
  store i32 %v0_b448, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b440, i32* @r7, align 4
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v5_b45c = inttoptr i32 %v0_b448 to i32*
  %v6_b45c = call i32 @function_85e0(i32 %v0_b458, i32* %v5_b45c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b45c, i32* @r6, align 4
  %v0_b474 = load i32, i32* @r4, align 4
  store i32 %v0_b474, i32* %r0.global-to-local, align 4
  %v5_b478 = inttoptr i32 %v0_b464 to i32*
  %v6_b478 = call i32 @function_85e0(i32 %v0_b474, i32* %v5_b478, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b48c = load i32, i32* @r4, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @function_85e0(i32 %v0_b48c, i32* %v5_b490, i32 18, i32 0, i32 %v6_b478)
  %v0_b494 = load i32, i32* @r5, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_85e0(i32 %v0_b4a4, i32* %v5_b4a8, i32 11, i32 0, i32 %v6_b490)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_85e0(i32 %v0_b4bc, i32* %v5_b4c0, i32 12, i32 0, i32 %v6_b4a8)
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4d8 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d8 = call i32 @function_85e0(i32 %v0_b4d4, i32* %v5_b4d8, i32 13, i32 0, i32 %v6_b4c0)
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4ec = load i32, i32* @r4, align 4
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v5_b4f0 = inttoptr i32 %v0_b4dc to i32*
  %v6_b4f0 = call i32 @function_85e0(i32 %v0_b4ec, i32* %v5_b4f0, i32 14, i32 0, i32 %v6_b4d8)
  %v0_b4f4 = load i32, i32* @r5, align 4
  store i32 %v0_b4f4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b504 = load i32, i32* @r4, align 4
  store i32 %v0_b504, i32* %r0.global-to-local, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_85e0(i32 %v0_b504, i32* %v5_b508, i32 15, i32 1, i32 %v6_b4f0)
  %v0_b50c = load i32, i32* @r5, align 4
  store i32 %v0_b50c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b51c = load i32, i32* @r4, align 4
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  %v5_b520 = inttoptr i32 %v0_b50c to i32*
  %v6_b520 = call i32 @function_85e0(i32 %v0_b51c, i32* %v5_b520, i32 16, i32 0, i32 %v6_b508)
  %v2_b52c = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  store i32 %v0_b530, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b538 = load i32, i32* @r4, align 4
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v5_b53c = inttoptr i32 %v0_b530 to i32*
  %v6_b53c = call i32 @function_8574(i32 %v0_b538, i32* %v5_b53c, i32 25, i32 %v2_b52c, i32 %v6_b520)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b550 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_b550, i32* %r0.global-to-local, align 4
  %v7_b554 = icmp eq i32 %v3_b550, -1
  store i1 %v7_b554, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b550, i32* %sb.global-to-local, align 4
  br i1 %v7_b554, label %dec_label_pc_bac8, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b388
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b568 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b57c = call i32 @function_1268c(i32 %v3_b550, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b57c, i32* %r0.global-to-local, align 4
  %v7_b580 = icmp eq i32 %v6_b57c, -1
  store i1 %v7_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b580, label %dec_label_pc_bac0, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b560
  %v3_b58c = mul i32 %v7_b3e4, 65536
  store i32 %v3_b58c, i32* %r4.global-to-local, align 4
  %v3_b590 = urem i32 %v7_b3e4, 65536
  %v0_b5a0 = load i32, i32* @r7, align 4
  %v3_b5a0 = mul i32 %v0_b5a0, 65536
  store i32 %v3_b5a0, i32* %r0.global-to-local, align 4
  %v0_b5a4 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b5ac = urem i32 %v0_b5a0, 65536
  store i32 %v3_b5ac, i32* %ip.global-to-local, align 4
  %v3_b5b0 = urem i32 %v0_b5a4, 65536
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  %v0_b5b8 = load i32, i32* @sl, align 4
  %v2_b5b8 = icmp eq i32 %v0_b5b8, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_b5b8, 1
  br i1 %tmp69, label %dec_label_pc_b86c, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b588
  %v3_b5d4 = mul i32 %v6_b478, 65536
  store i32 %v3_b5d4, i32* @lr, align 4
  %v1_b5e4 = urem i32 %v0_b5a4, 256
  %tmp70 = udiv i32 %v0_b5a0, 256
  %v3_b5e8 = urem i32 %tmp70, 256
  %v1_b5ec = urem i32 %v0_b5a0, 256
  %v4_b5f0 = mul nuw nsw i32 %v1_b5ec, 256
  %v5_b5f0 = or i32 %v4_b5f0, %v3_b5e8
  store i32 %v5_b5f0, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_b3e4, 256
  %tmp72 = mul i32 %v6_b478, 256
  %v1_b60c = and i32 %tmp72, 65280
  %v1_b610 = urem i32 %v6_b4a8, 2
  %v3_b614 = mul nuw nsw i32 %v1_b5e4, 256
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_b5a4, 256
  %v4_b61c = urem i32 %tmp73, 256
  %v5_b61c = or i32 %v4_b61c, %v3_b614
  store i32 %v5_b61c, i32* @r6, align 4
  %v1_b620 = urem i32 %v6_b4c0, 2
  %v1_b624 = urem i32 %v6_b4d8, 2
  %tmp74 = udiv i32 %v6_b478, 256
  %v4_b628 = urem i32 %tmp74, 256
  %v5_b628 = or i32 %v4_b628, %v1_b60c
  store i32 %v5_b628, i32* @r5, align 4
  %v1_b648 = urem i32 %v6_b4f0, 2
  %v1_b64c = urem i32 %v6_b508, 2
  %v1_b658 = urem i32 %v6_b520, 2
  store i32 %v1_b658, i32* %r0.global-to-local, align 4
  %v3_b65c = udiv i32 %v7_b3e4, 65536
  store i32 %v3_b65c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b5e4, i32* %ip.global-to-local, align 4
  %v5_b674 = trunc i32 %v0_b5a4 to i8
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_b610
  %v4_b738 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_b620
  %v4_b74c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_b624
  %v4_b760 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_b648
  %v4_b774 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_b64c
  %v3_b788 = and i32 %tmp80, 2
  %v7_b7b8 = sext i8 %v5_b674 to i32
  %sext = mul i32 %v0_b5a0, 16777216
  %v3_b7b8 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb76, %dec_label_pc_b5cc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b684 = call i32 @function_129a8(i32 128, i32 1)
  store i32 %v2_b684, i32* %r0.global-to-local, align 4
  %v3_b688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b688, i32* %r2.global-to-local, align 4
  %v1_b68c = load i32, i32* %fp.global-to-local, align 4
  %v2_b68c = load i32, i32* @r4, align 4
  %v5_b68c = mul i32 %v2_b68c, 4
  %v6_b68c = add i32 %v5_b68c, %v1_b68c
  %v7_b68c = inttoptr i32 %v6_b68c to i32*
  store i32 %v2_b684, i32* %v7_b68c, align 4
  %v0_b690 = load i32, i32* %fp.global-to-local, align 4
  %v1_b690 = load i32, i32* %r2.global-to-local, align 4
  %v4_b690 = mul i32 %v1_b690, 4
  %v5_b690 = add i32 %v4_b690, %v0_b690
  %v6_b690 = inttoptr i32 %v5_b690 to i32*
  %v7_b690 = load i32, i32* %v6_b690, align 4
  store i32 %v7_b690, i32* %r4.global-to-local, align 4
  %v1_b694 = inttoptr i32 %v7_b690 to i8*
  %v2_b694 = load i8, i8* %v1_b694, align 1
  %tmp81 = urem i8 %v2_b694, 16
  %v1_b698 = zext i8 %tmp81 to i32
  %v1_b69c = or i32 %v1_b698, 64
  store i32 %v1_b69c, i32* %r3.global-to-local, align 4
  %v1_b6a0 = trunc i32 %v1_b69c to i8
  store i8 %v1_b6a0, i8* %v1_b694, align 1
  %v0_b6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = inttoptr i32 %v0_b6a4 to i8*
  %v2_b6a4 = load i8, i8* %v1_b6a4, align 1
  %v1_b6a8 = and i8 %v2_b6a4, -16
  %v1_b6ac = or i8 %v1_b6a8, 5
  store i32 %v1_b428, i32* %r0.global-to-local, align 4
  store i8 %v1_b6ac, i8* %v1_b6a4, align 1
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 1
  %v4_b6bc = inttoptr i32 %v3_b6bc to i8*
  store i8 %v5_b3e0, i8* %v4_b6bc, align 1
  store i32 %v5_b41c, i32* %r2.global-to-local, align 4
  %v2_b6c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c8 = add i32 %v2_b6c8, 4
  %v4_b6c8 = inttoptr i32 %v3_b6c8 to i8*
  store i8 %v5_b618, i8* %v4_b6c8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6d4 = icmp eq i32 %v0_b6d4, 0
  store i1 %v2_b6d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b6d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 3
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 60, i8* %v4_b6d8, align 1
  store i32 %v3_b65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v0_b6e4 to i8
  %v2_b6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 8
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v0_b6e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 9
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b6ec = add i32 %v2_b6ec, 2
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v3_b6f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6f0, i32* %r2.global-to-local, align 4
  %v0_b6f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b6f8 = add i32 %v3_b6f8, 6
  %v5_b6f8 = inttoptr i32 %v4_b6f8 to i8*
  store i8 64, i8* %v5_b6f8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  %v0_b6fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b6fc = trunc i32 %v0_b6fc to i8
  %v2_b6fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6fc = add i32 %v2_b6fc, 5
  %v4_b6fc = inttoptr i32 %v3_b6fc to i8*
  store i8 %v1_b6fc, i8* %v4_b6fc, align 1
  %v0_b700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b700, label %.thread8, label %bb75

.thread8:                                         ; preds = %.thread
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 7
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 0, i8* %v5_b708, align 1
  %v0_b710.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread8, %bb75
  %v0_b710 = phi i32 [ %v6_b53c, %.thread8 ], [ %v0_b710.pre, %bb75 ]
  %v0_b70c = load i32, i32* %r2.global-to-local, align 4
  %v3_b70c = mul i32 %v0_b70c, 32
  store i32 %v3_b70c, i32* %r3.global-to-local, align 4
  %v1_b710 = load i32, i32* %r4.global-to-local, align 4
  %v2_b710 = add i32 %v1_b710, 12
  %v3_b710 = inttoptr i32 %v2_b710 to i32*
  store i32 %v0_b710, i32* %v3_b710, align 4
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_b714, -8
  %v5_b714 = add i32 %v0_b714, %tmp82
  %v1_b718 = load i32, i32* @r8, align 4
  %v2_b718 = add i32 %v1_b718, %v5_b714
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v1_b71c = add i32 %v2_b718, 16
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  store i32 %v3_b71c, i32* %r2.global-to-local, align 4
  %v0_b720 = load i32, i32* @r7, align 4
  %v1_b720 = trunc i32 %v0_b720 to i8
  %v2_b720 = load i32, i32* %r4.global-to-local, align 4
  %v3_b720 = add i32 %v2_b720, 20
  %v4_b720 = inttoptr i32 %v3_b720 to i8*
  store i8 %v1_b720, i8* %v4_b720, align 1
  %v0_b724 = load i32, i32* %r2.global-to-local, align 4
  %v1_b724 = load i32, i32* %r4.global-to-local, align 4
  %v2_b724 = add i32 %v1_b724, 16
  %v3_b724 = inttoptr i32 %v2_b724 to i32*
  store i32 %v0_b724, i32* %v3_b724, align 4
  %v0_b728 = load i32, i32* %r4.global-to-local, align 4
  %v1_b728 = add i32 %v0_b728, 20
  store i32 %v1_b728, i32* %r1.global-to-local, align 4
  %v1_b72c = add i32 %v0_b728, 33
  %v2_b72c = inttoptr i32 %v1_b72c to i8*
  %v3_b72c = load i8, i8* %v2_b72c, align 1
  %v4_b72c = zext i8 %v3_b72c to i32
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  %v1_b734 = and i32 %v4_b72c, 223
  %v5_b738 = or i32 %v1_b734, %v4_b738
  store i32 %v5_b738, i32* %r3.global-to-local, align 4
  %v1_b73c = trunc i32 %v5_b738 to i8
  store i8 %v1_b73c, i8* %v2_b72c, align 1
  %v0_b740 = load i32, i32* %r1.global-to-local, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b620, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  %v0_b754 = load i32, i32* %r1.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 13
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %v4_b754 = zext i8 %v3_b754 to i32
  store i32 %v1_b624, i32* %ip.global-to-local, align 4
  %v1_b75c = and i32 %v4_b754, 247
  %v5_b760 = or i32 %v1_b75c, %v4_b760
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = trunc i32 %v5_b760 to i8
  store i8 %v1_b764, i8* %v2_b754, align 1
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = add i32 %v0_b768, 13
  %v2_b768 = inttoptr i32 %v1_b768 to i8*
  %v3_b768 = load i8, i8* %v2_b768, align 1
  %v4_b768 = zext i8 %v3_b768 to i32
  store i32 %v1_b648, i32* %r0.global-to-local, align 4
  %v1_b770 = and i32 %v4_b768, 251
  %v5_b774 = or i32 %v1_b770, %v4_b774
  store i32 %v5_b774, i32* %r2.global-to-local, align 4
  %v1_b778 = trunc i32 %v5_b774 to i8
  store i8 %v1_b778, i8* %v2_b768, align 1
  %v0_b77c = load i32, i32* %r1.global-to-local, align 4
  %v1_b77c = add i32 %v0_b77c, 13
  %v2_b77c = inttoptr i32 %v1_b77c to i8*
  %v3_b77c = load i8, i8* %v2_b77c, align 1
  %v4_b77c = zext i8 %v3_b77c to i32
  store i32 %v1_b64c, i32* %r2.global-to-local, align 4
  %v1_b784 = and i32 %v4_b77c, 253
  %v4_b788 = or i32 %v1_b784, %v3_b788
  store i32 %v4_b788, i32* %r3.global-to-local, align 4
  %v1_b78c = trunc i32 %v4_b788 to i8
  store i8 %v1_b78c, i8* %v2_b77c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 12
  %v2_b790 = inttoptr i32 %v1_b790 to i8*
  %v3_b790 = load i8, i8* %v2_b790, align 1
  %v4_b790 = zext i8 %v3_b790 to i32
  store i32 %v4_b790, i32* %r2.global-to-local, align 4
  %v1_b794 = add i32 %v0_b790, 13
  %v2_b794 = inttoptr i32 %v1_b794 to i8*
  %v3_b794 = load i8, i8* %v2_b794, align 1
  %v4_b794 = zext i8 %v3_b794 to i32
  %tmp83 = urem i8 %v3_b790, 16
  %v1_b79c = zext i8 %tmp83 to i32
  %v1_b7a0 = and i32 %v4_b794, 254
  %v2_b7a4 = or i32 %v1_b7a0, %v1_b658
  %v1_b7a8 = or i32 %v1_b79c, 160
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = trunc i32 %v2_b7a4 to i8
  store i8 %v1_b7ac, i8* %v2_b794, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 12
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  store i32 %v3_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v7_b7b8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_b7c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c4 = add i32 %v2_b7c4, 3
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i8 %v5_b674, i8* %v4_b7c4, align 1
  %v0_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b7c8 = trunc i32 %v0_b7c8 to i8
  %v2_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c8 = add i32 %v2_b7c8, 1
  %v4_b7c8 = inttoptr i32 %v3_b7c8 to i8*
  store i8 %v1_b7c8, i8* %v4_b7c8, align 1
  %v0_b7cc = load i32, i32* @r6, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i8
  %v2_b7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_b7cc = add i32 %v2_b7cc, 2
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r5, align 4
  %v1_b7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 4
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  store i32 %v0_b7d0, i32* %v3_b7d0, align 4
  %v0_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 41
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = trunc i32 %v0_b7d8 to i8
  %v2_b7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 40
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i8*
  store i8 %v1_b7d8, i8* %v4_b7d8, align 1
  %v0_b7dc = call i32 @function_eb48()
  %v1_b7e0 = mul i32 %v0_b7dc, 256
  %v1_b7e4 = and i32 %v1_b7e0, 3840
  %v1_b7e8 = or i32 %v1_b7e4, 28672
  %v3_b7f0 = add nuw nsw i32 %v1_b7e8, 2048
  %v3_b7fc7 = udiv i32 %v3_b7f0, 256
  store i32 %v3_b7fc7, i32* %r1.global-to-local, align 4
  %v0_b800 = load i32, i32* %r4.global-to-local, align 4
  %v1_b800 = add i32 %v0_b800, 42
  store i32 %v1_b800, i32* %r2.global-to-local, align 4
  %v4_b804 = inttoptr i32 %v1_b800 to i8*
  store i8 5, i8* %v4_b804, align 1
  %v0_b808 = load i32, i32* %r1.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r2.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 1
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_b814 = load i32, i32* %r4.global-to-local, align 4
  %v3_b814 = add i32 %v2_b814, 47
  %v4_b814 = inttoptr i32 %v3_b814 to i8*
  store i8 10, i8* %v4_b814, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b820 = load i32, i32* %r3.global-to-local, align 4
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v2_b820 = load i32, i32* %r4.global-to-local, align 4
  %v3_b820 = add i32 %v2_b820, 46
  %v4_b820 = inttoptr i32 %v3_b820 to i8*
  store i8 %v1_b820, i8* %v4_b820, align 1
  %v0_b824 = load i32, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v0_b824 to i8
  %v2_b824 = load i32, i32* %r4.global-to-local, align 4
  %v3_b824 = add i32 %v2_b824, 45
  %v4_b824 = inttoptr i32 %v3_b824 to i8*
  store i8 %v1_b824, i8* %v4_b824, align 1
  %v0_b828 = load i32, i32* %r0.global-to-local, align 4
  %v1_b828 = trunc i32 %v0_b828 to i8
  %v2_b828 = load i32, i32* %r4.global-to-local, align 4
  %v3_b828 = add i32 %v2_b828, 44
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v0_b82c = call i32 @function_eb48()
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v2_b834 = load i32, i32* %r4.global-to-local, align 4
  %v3_b834 = add i32 %v2_b834, 56
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 1, i8* %v4_b834, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_b844 = load i32, i32* %r4.global-to-local, align 4
  %v2_b844 = add i32 %v1_b844, 48
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v0_b82c, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r2.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* %r4.global-to-local, align 4
  %v3_b848 = add i32 %v2_b848, 58
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* %r4.global-to-local, align 4
  %v3_b84c = add i32 %v2_b84c, 59
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i32, i32* %ip.global-to-local, align 4
  %v1_b850 = load i32, i32* %r4.global-to-local, align 4
  %v2_b850 = add i32 %v1_b850, 52
  %v3_b850 = inttoptr i32 %v2_b850 to i32*
  store i32 %v0_b850, i32* %v3_b850, align 4
  %v0_b854 = load i32, i32* %r2.global-to-local, align 4
  %v1_b854 = trunc i32 %v0_b854 to i8
  %v2_b854 = load i32, i32* %r4.global-to-local, align 4
  %v3_b854 = add i32 %v2_b854, 57
  %v4_b854 = inttoptr i32 %v3_b854 to i8*
  store i8 %v1_b854, i8* %v4_b854, align 1
  %v3_b858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v1_b85c = add i32 %v3_b858, 1
  store i32 %v1_b85c, i32* @r4, align 4
  %v0_b860 = load i32, i32* @sl, align 4
  %v9_b860 = icmp eq i32 %v0_b860, %v1_b85c
  store i1 %v9_b860, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b85c, i32* %stack_var_-40, align 4
  %v8_b868 = icmp sgt i32 %v0_b860, %v1_b85c
  br i1 %v8_b868, label %dec_label_pc_b67c, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %bb76, %dec_label_pc_b588
  %v0_b86c = phi i32 [ %v0_b5b8, %dec_label_pc_b588 ], [ %v0_b860, %bb76 ]
  %v2_b86c = icmp eq i32 %v0_b86c, 0
  store i1 %v2_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba24 = icmp eq i32 %v3_b590, 65535
  %v2_baa0 = icmp eq i32 %v1_b5b4, 0
  %v2_b8a8 = icmp eq i32 %v6_b53c, -1
  %v7_b8a8 = icmp eq i32 %v6_b53c, -1
  br label %dec_label_pc_b874.outer

dec_label_pc_b874.outer:                          ; preds = %dec_label_pc_b9a0, %dec_label_pc_b86c
  %v1_b874.ph.in = phi i32 [ %v1_b994, %dec_label_pc_b9a0 ], [ %v0_b86c, %dec_label_pc_b86c ]
  %v0_b874.ph = phi i1 [ %v2_b9a0, %dec_label_pc_b9a0 ], [ %v2_b86c, %dec_label_pc_b86c ]
  %v1_b874.ph = icmp slt i32 %v1_b874.ph.in, 0
  %v4_b874 = or i1 %v1_b874.ph, %v0_b874.ph
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b874.outer, %dec_label_pc_b874
  br i1 %v4_b874, label %dec_label_pc_b874, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %dec_label_pc_b874
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b878
  %v1_b894 = phi i32 [ %v1_b990, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b878 ]
  %v5_b888 = mul i32 %v1_b894, 24
  %v1_b88c = load i32, i32* @r8, align 4
  %v2_b88c = add i32 %v1_b88c, %v5_b888
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = add i32 %v2_b88c, 20
  %v2_b890 = inttoptr i32 %v1_b890 to i8*
  %v3_b890 = load i8, i8* %v2_b890, align 1
  %v4_b890 = zext i8 %v3_b890 to i32
  store i32 %v4_b890, i32* %r2.global-to-local, align 4
  %v0_b894 = load i32, i32* %fp.global-to-local, align 4
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v0_b894, %v4_b894
  %v6_b894 = inttoptr i32 %v5_b894 to i32*
  %v7_b894 = load i32, i32* %v6_b894, align 4
  store i32 %v7_b894, i32* @r5, align 4
  %v7_b898 = icmp eq i8 %v3_b890, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v1_b89c = add i32 %v7_b894, 20
  store i32 %v1_b89c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_b890, 32
  br i1 %tmp84, label %dec_label_pc_b9ac, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b884
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge, %dec_label_pc_b8b0
  %v1_b8c8 = phi i32 [ %v1_b8c8.pre, %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge ], [ 65535, %dec_label_pc_b8b0 ]
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v9_b8c8 = icmp eq i32 %v3_b5ac, %v1_b8c8
  store i1 %v9_b8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8c8, label %dec_label_pc_ba4c, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge, %dec_label_pc_b8c4
  %v1_b8d4 = phi i32 [ %v1_b8d4.pre, %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge ], [ %v1_b8c8, %dec_label_pc_b8c4 ]
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v9_b8d4 = icmp eq i32 %v3_b5b0, %v1_b8d4
  store i1 %v9_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8d4, label %dec_label_pc_ba68, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge, %dec_label_pc_b8d0
  %v1_b8e0 = phi i32 [ %v1_b8e0.pre, %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge ], [ %v1_b8d4, %dec_label_pc_b8d0 ]
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v9_b8e0 = icmp eq i32 %v6_b478, %v1_b8e0
  store i1 %v9_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8e0, label %dec_label_pc_ba84, label %dec_label_pc_b8e8

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge, %dec_label_pc_b8dc
  %v1_b8ec = phi i32 [ %v1_b8ec.pre, %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge ], [ %v1_b8e0, %dec_label_pc_b8dc ]
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v9_b8ec = icmp eq i32 %v6_b490, %v1_b8ec
  store i1 %v9_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8ec, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_b900:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98, %dec_label_pc_baac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* %r7.global-to-local, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* %r7.global-to-local, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_d0b8(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b91427 = udiv i32 %v2_b910, 256
  %v1_b918 = trunc i32 %v4_b91427 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  %v0_b920 = load i32, i32* @r6, align 4
  store i32 %v0_b920, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* %r7.global-to-local, align 4
  %v1_b92c = trunc i32 %v0_b92c to i8
  %v3_b92c = add i32 %v0_b920, 16
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v1_b92c, i8* %v4_b92c, align 1
  %v0_b930 = load i32, i32* %r7.global-to-local, align 4
  %v1_b930 = trunc i32 %v0_b930 to i8
  %v2_b930 = load i32, i32* @r6, align 4
  %v3_b930 = add i32 %v2_b930, 17
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v1_b930, i8* %v4_b930, align 1
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v4_b938 = call i32 @function_d114(i32 %v0_b934, i32 %v0_b920, i32 10240, i32 40)
  %v5_b938 = trunc i32 %v4_b938 to i8
  store i32 %v4_b938, i32* %r0.global-to-local, align 4
  %v4_b93c28 = udiv i32 %v4_b938, 256
  %v1_b940 = trunc i32 %v4_b93c28 to i8
  %v2_b940 = load i32, i32* @r6, align 4
  %v3_b940 = add i32 %v2_b940, 17
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 %v1_b940, i8* %v4_b940, align 1
  %v3_b944 = load i32, i32* @r6, align 4
  %v4_b944 = add i32 %v3_b944, 16
  %v5_b944 = inttoptr i32 %v4_b944 to i8*
  store i8 %v5_b938, i8* %v5_b944, align 1
  %v3_b948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b948, i32* %r3.global-to-local, align 4
  %v0_b94c = load i32, i32* @r5, align 4
  %v1_b94c = add i32 %v0_b94c, 20
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  %v3_b954 = udiv i32 %v3_b94c, 65536
  store i32 %v3_b954, i32* %r2.global-to-local, align 4
  %v5_b958 = mul i32 %v3_b948, 24
  %v1_b95c = load i32, i32* @r8, align 4
  %v2_b95c = add i32 %v1_b95c, %v5_b958
  store i32 %v2_b95c, i32* %ip.global-to-local, align 4
  %v3_b96026 = udiv i32 %v3_b94c, 16777216
  %v1_b964 = trunc i32 %v3_b96026 to i8
  %v3_b964 = add i32 %v2_b95c, 3
  %v4_b964 = inttoptr i32 %v3_b964 to i8*
  store i8 %v1_b964, i8* %v4_b964, align 1
  %v0_b968 = load i32, i32* %r2.global-to-local, align 4
  %v1_b968 = trunc i32 %v0_b968 to i8
  %v2_b968 = load i32, i32* %ip.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 2
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 %v1_b968, i8* %v4_b968, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  %v0_b974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b980 = load i32, i32* %ip.global-to-local, align 4
  %v6_b988 = inttoptr i32 %v0_b970 to i32*
  %v7_b988 = call i32 @function_12658(i32 %v0_b974, i32* %v6_b988, i32 60, i32 16384, i32 %v0_b980, i32 16)
  %v3_b98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b98c, i32* %r3.global-to-local, align 4
  %v1_b990 = add i32 %v3_b98c, 1
  store i32 %v1_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = load i32, i32* @sl, align 4
  %v9_b994 = icmp eq i32 %v1_b990, %v1_b994
  store i1 %v9_b994, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b990, i32* %stack_var_-40, align 4
  %v5_b99c = icmp slt i32 %v1_b990, %v1_b994
  br i1 %v5_b99c, label %dec_label_pc_b884, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b900
  %v2_b9a0 = icmp eq i32 %v1_b994, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b874.outer

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b884
  %v1_b9ac = add i32 %v2_b88c, 16
  %v2_b9ac = inttoptr i32 %v1_b9ac to i32*
  %v3_b9ac = load i32, i32* %v2_b9ac, align 4
  store i32 %v3_b9ac, i32* %r4.global-to-local, align 4
  %v0_b9b0 = call i32 @function_eb48()
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v3_b9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_b9bc = mul i32 %v3_b9b4, 24
  %v0_b9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b9c4 = load i32, i32* @r8, align 4
  %v2_b9c4 = add i32 %v1_b9c4, %v5_b9bc
  store i32 %v2_b9c4, i32* %r1.global-to-local, align 4
  %v1_b9c8 = and i32 %v0_b9c0, 65280
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v1_b9c0 = udiv i32 %v0_b9c0, 256
  %v3_b9cc = and i32 %v1_b9c0, 65280
  store i32 %v3_b9cc, i32* %r2.global-to-local, align 4
  %v3_b9d0 = mul i32 %v0_b9c0, 16777216
  store i32 %v3_b9d0, i32* %ip.global-to-local, align 4
  %v1_b9d4 = add i32 %v2_b9c4, 20
  %v2_b9d4 = inttoptr i32 %v1_b9d4 to i8*
  %v3_b9d4 = load i8, i8* %v2_b9d4, align 1
  %v4_b9d4 = zext i8 %v3_b9d4 to i32
  %v4_b9d8 = mul nuw nsw i32 %v1_b9c8, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %ip.global-to-local, align 4
  %v2_b9e0 = call i32 @llvm.bswap.i32(i32 %v0_b9c0)
  %v7_b9e4 = lshr i32 %v0_b9b0, %v4_b9d4
  %v8_b9e4 = add i32 %v7_b9e4, %v2_b9e0
  store i32 %v8_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9f0 = mul i32 %v8_b9e4, 16777216
  %v1_b9e8 = mul i32 %v8_b9e4, 256
  %v4_b9f4 = and i32 %v1_b9e8, 16711680
  %v5_b9f4 = or i32 %v4_b9f4, %v3_b9f0
  store i32 %v5_b9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v2_ba04 = call i32 @llvm.bswap.i32(i32 %v8_b9e4)
  store i32 %v2_ba04, i32* %r3.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  %v1_ba0c = load i32, i32* @r5, align 4
  %v2_ba0c = add i32 %v1_ba0c, 16
  %v3_ba0c = inttoptr i32 %v2_ba0c to i32*
  store i32 %v2_ba04, i32* %v3_ba0c, align 4
  br i1 %v2_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_ba14:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  %v0_ba14 = call i32 @function_eb48()
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  %v1_ba28 = load i32, i32* @r5, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba14, i32* %v3_ba28, align 4
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge

dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge:    ; preds = %dec_label_pc_ba14
  %v1_b8c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8c4

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14, %dec_label_pc_b8b0
  %v0_ba30 = call i32 @function_eb48()
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v4_ba3429 = udiv i32 %v0_ba30, 256
  %v1_ba38 = trunc i32 %v4_ba3429 to i8
  %v2_ba38 = load i32, i32* @r5, align 4
  %v3_ba38 = add i32 %v2_ba38, 5
  %v4_ba38 = inttoptr i32 %v3_ba38 to i8*
  store i8 %v1_ba38, i8* %v4_ba38, align 1
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v1_ba40 = load i32, i32* @r4, align 4
  %v9_ba40 = icmp eq i32 %v3_b5ac, %v1_ba40
  store i1 %v9_ba40, i1* %cpsr_z.global-to-local, align 1
  %v3_ba44 = load i32, i32* @r5, align 4
  %v4_ba44 = add i32 %v3_ba44, 4
  %v5_ba44 = inttoptr i32 %v4_ba44 to i8*
  store i8 %v1_ba30, i8* %v5_ba44, align 1
  %v0_ba48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba48, label %dec_label_pc_ba4c, label %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge

dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge:    ; preds = %dec_label_pc_ba30
  %v1_b8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8d0

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b8c4
  %v0_ba4c = call i32 @function_eb48()
  %v1_ba4c = trunc i32 %v0_ba4c to i8
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v4_ba54 = sdiv i32 %v0_ba4c, 256
  store i32 %v4_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = load i32, i32* @r4, align 4
  %v9_ba58 = icmp eq i32 %v3_b5b0, %v1_ba58
  store i1 %v9_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r5, align 4
  %v4_ba5c = add i32 %v3_ba5c, 20
  %v5_ba5c = inttoptr i32 %v4_ba5c to i8*
  store i8 %v1_ba4c, i8* %v5_ba5c, align 1
  %v0_ba60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba60 = trunc i32 %v0_ba60 to i8
  %v2_ba60 = load i32, i32* @r6, align 4
  %v3_ba60 = add i32 %v2_ba60, 1
  %v4_ba60 = inttoptr i32 %v3_ba60 to i8*
  store i8 %v1_ba60, i8* %v4_ba60, align 1
  %v0_ba64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba64, label %dec_label_pc_ba68, label %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge

dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge:    ; preds = %dec_label_pc_ba4c
  %v1_b8e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8dc

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba4c, %dec_label_pc_b8d0
  %v0_ba68 = call i32 @function_eb48()
  %v1_ba68 = trunc i32 %v0_ba68 to i8
  %v4_ba6c = sdiv i32 %v0_ba68, 256
  store i32 %v4_ba6c, i32* %r3.global-to-local, align 4
  %v3_ba70 = load i32, i32* @r6, align 4
  %v4_ba70 = add i32 %v3_ba70, 2
  %v5_ba70 = inttoptr i32 %v4_ba70 to i8*
  store i8 %v1_ba68, i8* %v5_ba70, align 1
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v1_ba78 = load i32, i32* @r4, align 4
  %v9_ba78 = icmp eq i32 %v6_b478, %v1_ba78
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v0_ba7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c = trunc i32 %v0_ba7c to i8
  %v2_ba7c = load i32, i32* @r6, align 4
  %v3_ba7c = add i32 %v2_ba7c, 3
  %v4_ba7c = inttoptr i32 %v3_ba7c to i8*
  store i8 %v1_ba7c, i8* %v4_ba7c, align 1
  %v0_ba80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba80, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge

dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b8ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b8dc
  %v0_ba84 = call i32 @function_eb48()
  store i32 %v0_ba84, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r4, align 4
  %v9_ba8c = icmp eq i32 %v6_b490, %v1_ba8c
  store i1 %v9_ba8c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba90 = load i32, i32* @r6, align 4
  %v2_ba90 = add i32 %v1_ba90, 4
  %v3_ba90 = inttoptr i32 %v2_ba90 to i32*
  store i32 %v0_ba84, i32* %v3_ba90, align 4
  br i1 %v9_ba8c, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  %v0_ba98 = call i32 @function_eb48()
  store i32 %v0_ba98, i32* %r0.global-to-local, align 4
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  %v1_baa4 = load i32, i32* @r6, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_ba98, i32* %v3_baa4, align 4
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98
  %v0_baac = call i32 @function_eb48()
  %v1_baac = trunc i32 %v0_baac to i8
  store i32 %v0_baac, i32* %r0.global-to-local, align 4
  %v4_bab0 = sdiv i32 %v0_baac, 256
  store i32 %v4_bab0, i32* %r3.global-to-local, align 4
  %v1_bab4 = trunc i32 %v4_bab0 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 19
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v3_bab8 = load i32, i32* @r6, align 4
  %v4_bab8 = add i32 %v3_bab8, 18
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 %v1_baac, i8* %v5_bab8, align 1
  br label %dec_label_pc_b900

dec_label_pc_bac0:                                ; preds = %dec_label_pc_b560
  %v0_bac0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bac0, i32* %r0.global-to-local, align 4
  %v1_bac4 = call i32 @function_11da0(i32 %v0_bac0)
  store i32 %v1_bac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac8

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b388, %dec_label_pc_bac0
  %v29_bacc = phi i32 [ %v3_b550, %dec_label_pc_b388 ], [ %v1_bac4, %dec_label_pc_bac0 ]
  store i32 %v3_b388, i32* %r4.global-to-local, align 4
  store i32 %v12_b388, i32* %r7.global-to-local, align 4
  ret i32 %v29_bacc

; uselistorder directives
  uselistorder i32 %v4_bab0, { 1, 0 }
  uselistorder i32 %v0_baac, { 0, 2, 1 }
  uselistorder i32 %v0_ba4c, { 0, 2, 1 }
  uselistorder i32 %v0_ba30, { 0, 2, 1 }
  uselistorder i32 %v2_ba04, { 1, 0 }
  uselistorder i32 %v8_b9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b9d0, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_b9a0, { 1, 0 }
  uselistorder i32 %v1_b994, { 1, 2, 3, 0 }
  uselistorder i32 %v1_b990, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_b938, { 0, 2, 1 }
  uselistorder i32 %v0_b920, { 1, 0, 2 }
  uselistorder i1 %v7_b8a8, { 2, 1, 0 }
  uselistorder i1 %v2_baa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba24, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b85c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b674, { 1, 0 }
  uselistorder i32 %v3_b65c, { 1, 0 }
  uselistorder i32 %v1_b658, { 1, 0 }
  uselistorder i32 %v1_b64c, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v3_b614, { 1, 0 }
  uselistorder i32 %v1_b610, { 1, 0 }
  uselistorder i32 %v1_b5ec, { 1, 0 }
  uselistorder i32 %v1_b5e4, { 1, 0 }
  uselistorder i32 %v1_b5b4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_b5ac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_b5a4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_b5a0, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_b580, { 1, 0 }
  uselistorder i1 %v7_b554, { 1, 0 }
  uselistorder i32 %v3_b550, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b53c, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_b490, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b478, { 6, 5, 4, 3, 2, 0, 1, 7 }
  uselistorder i32 %v1_b428, { 1, 2, 0 }
  uselistorder i32 %v7_b3e4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_b3c0, { 1, 2, 0 }
  uselistorder i32 %v1_b38c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_bac8, { 1, 0 }
  uselistorder label %dec_label_pc_baac, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bad4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bad4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_bad4 = load i32, i32* @fp, align 4
  %v1_bad8 = urem i32 %arg1, 256
  store i32 %v1_bad8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_baf0 = urem i32 %arg3, 256
  store i32 %v1_baf0, i32* @r4, align 4
  %v2_baf4 = call i32 @function_129a8(i32 %v1_bad8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_baf4, i32* @sl, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  %v2_bb04 = call i32 @function_129a8(i32 %v0_bb00, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_bb10 = load i32, i32* @r6, align 4
  store i32 %v0_bb10, i32* %r1.global-to-local, align 4
  store i32 %v2_bb04, i32* @sb, align 4
  %v0_bb20 = load i32, i32* @r4, align 4
  %v5_bb24 = inttoptr i32 %v0_bb10 to i32*
  %v6_bb24 = call i32 @function_85e0(i32 %v0_bb20, i32* %v5_bb24, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_bb2c = urem i32 %v6_bb24, 65536
  %v0_bb30 = load i32, i32* @r6, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r5, align 4
  %v0_bb3c = load i32, i32* @r4, align 4
  %v5_bb44 = inttoptr i32 %v0_bb30 to i32*
  %v6_bb44 = call i32 @function_85e0(i32 %v0_bb3c, i32* %v5_bb44, i32 6, i32 %v0_bb38, i32 %v3_bb2c)
  %v0_bb48 = load i32, i32* @r6, align 4
  store i32 %v0_bb48, i32* %r1.global-to-local, align 4
  %v3_bb4c = mul i32 %v6_bb44, 65536
  store i32 %v3_bb4c, i32* %fp.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r4, align 4
  %v5_bb5c = inttoptr i32 %v0_bb48 to i32*
  %v6_bb5c = call i32 @function_85e0(i32 %v0_bb58, i32* %v5_bb5c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_bb68 = load i32, i32* @r6, align 4
  store i32 %v0_bb68, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  %v3_bb74 = urem i32 %v6_bb5c, 65536
  store i32 %v3_bb74, i32* @r6, align 4
  %v5_bb78 = inttoptr i32 %v0_bb68 to i32*
  %v6_bb78 = call i32 @function_85e0(i32 %v0_bb6c, i32* %v5_bb78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_bb7c = load i32, i32* %fp.global-to-local, align 4
  %v3_bb7c = udiv i32 %v0_bb7c, 65536
  %v1_bb84 = load i32, i32* @r5, align 4
  %v9_bb84 = icmp eq i32 %v3_bb7c, %v1_bb84
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_bb84, label %dec_label_pc_bbac, label %bb

bb:                                               ; preds = %dec_label_pc_bad4
  %v2_bb98 = mul nuw nsw i32 %v3_bb7c, 256
  %v4_bb9c = and i32 %v2_bb98, 65280
  %v1_bba0 = urem i32 %v6_bb78, 256
  store i32 %v1_bba0, i32* @r8, align 4
  %v5_bba4 = udiv i32 %v0_bb7c, 16777216
  %v6_bba4 = or i32 %v4_bb9c, %v5_bba4
  br label %dec_label_pc_bbb8

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bad4
  %v1_bba07 = urem i32 %v6_bb78, 256
  store i32 %v1_bba07, i32* @r8, align 4
  %v0_bbac = call i32 @function_eb48()
  %v3_bbb4 = urem i32 %v0_bbac, 65536
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb, %dec_label_pc_bbac
  %storemerge17 = phi i32 [ %v6_bba4, %bb ], [ %v3_bbb4, %dec_label_pc_bbac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_bbb8 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_bbb8, 1
  br i1 %tmp41, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bbc0

dec_label_pc_bd60.preheader:                      ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbb8
  %storemerge3.in12.ph = phi i32 [ %v0_bbb8, %dec_label_pc_bbb8 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbb8
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v3_bbc4 = udiv i32 %v6_bb24, 256
  %v5_bbd0 = trunc i32 %v3_bbc4 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_bbe8 = udiv i32 %v6_bb24, 65536
  store i32 %v3_bbe8, i32* @r4, align 4
  %v4_bbf8 = trunc i32 %v3_bbe8 to i8
  store i8 %v4_bbf8, i8* %stack_var_-80, align 1
  %v3_bd08 = icmp eq i32 %v3_bb2c, 65535
  %v2_bc30 = ptrtoint i32* %stack_var_-52 to i32
  %v3_bc60 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_bcec

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bcec
  %v2_bc00 = load i8, i8* %stack_var_-80, align 1
  %v3_bc00 = sext i8 %v2_bc00 to i32
  store i32 %v3_bc00, i32* %r1.global-to-local, align 4
  store i32 %v3_bbc4, i32* @r4, align 4
  %v2_bc04 = load i32, i32* @r5, align 4
  %v3_bc04 = add i32 %v2_bc04, 2
  %v4_bc04 = inttoptr i32 %v3_bc04 to i8*
  store i8 %v5_bbd0, i8* %v4_bc04, align 1
  %v0_bc08 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc08 = trunc i32 %v0_bc08 to i8
  %v2_bc08 = load i32, i32* @r5, align 4
  %v3_bc08 = add i32 %v2_bc08, 3
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v1_bc08, i8* %v4_bc08, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bc00
  %v1_bc14 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_bc24 = call i32 @function_126bc(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_bc2c = icmp eq i32 %v3_bc24, -1
  store i32 %v2_bc30, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_bc40 = load i32, i32* @sb, align 4
  %v3_bc40 = add i32 %v2_bc40, %stack_var_-60.0
  %v4_bc40 = inttoptr i32 %v3_bc40 to i32*
  store i32 %v3_bc24, i32* %v4_bc40, align 4
  br i1 %v7_bc2c, label %dec_label_pc_bd6c, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc0c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_bc60 = call i32 @function_124ec(i32 %v3_bc24, %sockaddr* %v3_bc60, i32 16)
  %v0_bc64 = load i32, i32* @r5, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  %v2_bc64 = inttoptr i32 %v1_bc64 to i8*
  %v3_bc64 = load i8, i8* %v2_bc64, align 1
  %tmp = icmp ugt i8 %v3_bc64, 31
  br i1 %tmp, label %dec_label_pc_bcbc, label %dec_label_pc_bc70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc48
  %v1_bc70 = add i32 %v0_bc64, 16
  %v2_bc70 = inttoptr i32 %v1_bc70 to i32*
  %v3_bc70 = load i32, i32* %v2_bc70, align 4
  store i32 %v3_bc70, i32* @r4, align 4
  %v0_bc74 = call i32 @function_eb48()
  %v0_bc78 = load i32, i32* @r4, align 4
  %v1_bc7c = and i32 %v0_bc78, 65280
  %v3_bc84 = mul i32 %v0_bc78, 16777216
  %v4_bc88 = mul nuw nsw i32 %v1_bc7c, 256
  %v5_bc88 = or i32 %v4_bc88, %v3_bc84
  store i32 %v5_bc88, i32* %r1.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r5, align 4
  %v1_bc90 = add i32 %v0_bc90, 20
  %v2_bc90 = inttoptr i32 %v1_bc90 to i8*
  %v3_bc90 = load i8, i8* %v2_bc90, align 1
  %v4_bc90 = zext i8 %v3_bc90 to i32
  %v2_bc94 = call i32 @llvm.bswap.i32(i32 %v0_bc78)
  %v7_bc98 = lshr i32 %v0_bc74, %v4_bc90
  %v8_bc98 = add i32 %v7_bc98, %v2_bc94
  %v3_bca4 = mul i32 %v8_bc98, 16777216
  %v1_bca8 = and i32 %v8_bc98, 65280
  %v4_bcac = mul nuw nsw i32 %v1_bca8, 256
  %v5_bcac = or i32 %v4_bcac, %v3_bca4
  store i32 %v5_bcac, i32* %r1.global-to-local, align 4
  %v2_bcb4 = call i32 @llvm.bswap.i32(i32 %v8_bc98)
  %v2_bcb8 = add i32 %v0_bc90, 4
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bc70
  %v0_bcc8 = phi i32 [ %v0_bc64, %dec_label_pc_bc48 ], [ %v0_bcc8.pre, %dec_label_pc_bc70 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* @sb, align 4
  %v2_bcc4 = add i32 %v1_bcc4, %stack_var_-60.0
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  %v4_bcc4 = load i32, i32* %v3_bcc4, align 4
  store i32 %v0_bcc8, i32* %r1.global-to-local, align 4
  %v3_bccc = inttoptr i32 %v0_bcc8 to %sockaddr*
  %v4_bccc = call i32 @function_12518(i32 %v4_bcc4, %sockaddr* %v3_bccc, i32 16)
  %v1_bcd8 = add i32 %stack_var_-60.0, 4
  %v1_bcdc = load i32, i32* @r7, align 4
  %v9_bcdc = icmp eq i32 %v1_bc14, %v1_bcdc
  %v0_bce4 = load i32, i32* @r5, align 4
  %v1_bce4 = add i32 %v0_bce4, 24
  store i32 %v1_bce4, i32* @r5, align 4
  br i1 %v9_bcdc, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbc0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bcd8, %dec_label_pc_bcbc ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bcf8 = call i32 @function_129a8(i32 65535, i32 1)
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v2_bd0c = load i32, i32* @sl, align 4
  %v3_bd0c = add i32 %v2_bd0c, %stack_var_-60.0
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  store i32 %v2_bcf8, i32* %v4_bd0c, align 4
  br i1 %v3_bd08, label %dec_label_pc_bd14, label %dec_label_pc_bc00

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcec
  %v0_bd14 = call i32 @function_eb48()
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v4_bd18 = sdiv i32 %v0_bd14, 256
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 3
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 2
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v1_bd14, i8* %v5_bd20, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd60.loopexit, %dec_label_pc_bd60.preheader, %dec_label_pc_bd64.loopexit, %dec_label_pc_bd28
  br label %dec_label_pc_bd28

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c.lr.ph, %dec_label_pc_bd64.loopexit
  %v0_bd2c = load i32, i32* @r8, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_bd2c, label %dec_label_pc_bd34, label %dec_label_pc_bd74

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bd3c

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_bd3c, %dec_label_pc_bd34
  %v0_bd44 = phi i32 [ %v1_bd44, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v0_bd3c = phi i32 [ %v1_bd58, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v1_bd3c = load i32, i32* @sb, align 4
  %v2_bd3c = add i32 %v1_bd3c, %v0_bd3c
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  %v4_bd3c = load i32, i32* %v3_bd3c, align 4
  %v1_bd40 = load i32, i32* @sl, align 4
  %v2_bd40 = add i32 %v1_bd40, %v0_bd3c
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  %v4_bd40 = load i32, i32* %v3_bd40, align 4
  store i32 %v4_bd40, i32* %r1.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd44, 1
  %v0_bd48 = load i32, i32* @r6, align 4
  %v4_bd50 = inttoptr i32 %v4_bd40 to i32*
  %v5_bd50 = call i32 @function_1262c(i32 %v4_bd3c, i32* %v4_bd50, i32 %v0_bd48, i32 16384)
  %v1_bd54 = load i32, i32* @r7, align 4
  %v9_bd54 = icmp eq i32 %v1_bd44, %v1_bd54
  %v0_bd58 = load i32, i32* @r4, align 4
  %v1_bd58 = add i32 %v0_bd58, 4
  store i32 %v1_bd58, i32* @r4, align 4
  br i1 %v9_bd54, label %dec_label_pc_bd60.loopexit, label %dec_label_pc_bd3c

dec_label_pc_bd60.loopexit:                       ; preds = %dec_label_pc_bd3c
  %tmp4247 = icmp slt i32 %v1_bd44, 1
  br i1 %tmp4247, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bd2c.lr.ph:                          ; preds = %dec_label_pc_bd60.preheader, %dec_label_pc_bd60.loopexit
  br label %dec_label_pc_bd2c

dec_label_pc_bd64.loopexit:                       ; preds = %dec_label_pc_bd7c
  %tmp42 = icmp slt i32 %v0_bda4, 1
  br i1 %tmp42, label %dec_label_pc_bd28, label %dec_label_pc_bd2c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v24_bad4, i32* %fp.global-to-local, align 4
  ret i32 %v3_bc24

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd7c, %dec_label_pc_bd74
  %v0_bd7c = phi i32 [ %v1_bda8, %dec_label_pc_bd7c ], [ 0, %dec_label_pc_bd74 ]
  %v1_bd7c = load i32, i32* @sl, align 4
  %v2_bd7c = add i32 %v1_bd7c, %v0_bd7c
  %v3_bd7c = inttoptr i32 %v2_bd7c to i32*
  %v4_bd7c = load i32, i32* %v3_bd7c, align 4
  store i32 %v4_bd7c, i32* @r4, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  store i32 %v0_bd80, i32* @r1, align 4
  %v1_bd88 = inttoptr i32 %v4_bd7c to i8*
  %v2_bd88 = call i32 @function_ecc8(i8* %v1_bd88)
  %v0_bd8c = load i32, i32* @r5, align 4
  %v1_bd8c = add i32 %v0_bd8c, 1
  store i32 %v1_bd8c, i32* @r5, align 4
  %v0_bd90 = load i32, i32* @fp, align 4
  %v1_bd90 = load i32, i32* @sb, align 4
  %v2_bd90 = add i32 %v1_bd90, %v0_bd90
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  %v4_bd90 = load i32, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* @r4, align 4
  store i32 %v0_bd94, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v4_bda0 = inttoptr i32 %v0_bd94 to i32*
  %v5_bda0 = call i32 @function_1262c(i32 %v4_bd90, i32* %v4_bda0, i32 %v0_bd98, i32 16384)
  %v0_bda4 = load i32, i32* @r5, align 4
  %v1_bda4 = load i32, i32* @r7, align 4
  %v9_bda4 = icmp eq i32 %v0_bda4, %v1_bda4
  %v0_bda8 = load i32, i32* @fp, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  store i32 %v1_bda8, i32* @fp, align 4
  br i1 %v9_bda4, label %dec_label_pc_bd64.loopexit, label %dec_label_pc_bd7c

; uselistorder directives
  uselistorder i32 %v1_bda8, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0 }
  uselistorder i32 %v1_bd58, { 1, 0 }
  uselistorder i32 %v1_bd44, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_bcc8, { 1, 0 }
  uselistorder i32 %v8_bc98, { 1, 2, 0 }
  uselistorder i32 %v0_bc78, { 1, 0, 2 }
  uselistorder i32 %v3_bc24, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bc14, { 1, 2, 0 }
  uselistorder i32 %v3_bbe8, { 1, 0 }
  uselistorder i32 %v3_bbc4, { 1, 0 }
  uselistorder i32 %v3_bb2c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bad8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_bd2c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd28, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
}

define i32 @function_bdb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bdb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bdb8 = load i32, i32* @sb, align 4
  %v24_bdb8 = load i32, i32* @fp, align 4
  %v1_bdbc = urem i32 %arg1, 256
  store i32 %v1_bdbc, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdd4 = urem i32 %arg3, 256
  store i32 %v1_bdd4, i32* @r4, align 4
  %v2_bdd8 = call i32 @function_129a8(i32 %v1_bdbc, i32 4)
  %v0_bddc = load i32, i32* @r5, align 4
  store i32 %v0_bddc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  store i32 %v0_bdec, i32* %r0.global-to-local, align 4
  %v5_bdf0 = inttoptr i32 %v0_bddc to i32*
  %v6_bdf0 = call i32 @function_85e0(i32 %v0_bdec, i32* %v5_bdf0, i32 2, i32 0, i32 %v2_bdd8)
  %v1_bdfc = urem i32 %v6_bdf0, 256
  store i32 %v1_bdfc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* @r5, align 4
  store i32 %v0_be08, i32* %r1.global-to-local, align 4
  %v0_be0c = load i32, i32* @r4, align 4
  store i32 %v0_be0c, i32* %r0.global-to-local, align 4
  %v5_be10 = trunc i32 %v6_bdf0 to i8
  %v6_be14 = inttoptr i32 %v0_be08 to i32*
  %v7_be14 = call i32 @function_85e0(i32 %v0_be0c, i32* %v6_be14, i32 3, i32 65535, i32 %v6_bdf0)
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be14, i32* %fp.global-to-local, align 4
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 %v0_be28, i32* %r0.global-to-local, align 4
  %v5_be2c = inttoptr i32 %v0_be18 to i32*
  %v6_be2c = call i32 @function_85e0(i32 %v0_be28, i32* %v5_be2c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be34 = urem i32 %v6_be2c, 256
  store i32 %v1_be34, i32* %ip.global-to-local, align 4
  %v0_be38 = load i32, i32* @r5, align 4
  store i32 %v0_be38, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be44 = load i32, i32* @r4, align 4
  store i32 %v0_be44, i32* %r0.global-to-local, align 4
  %v5_be48 = trunc i32 %v6_be2c to i8
  %v6_be4c = inttoptr i32 %v0_be38 to i32*
  %v7_be4c = call i32 @function_85e0(i32 %v0_be44, i32* %v6_be4c, i32 5, i32 0, i32 %v6_be2c)
  %v1_be58 = urem i32 %v7_be4c, 256
  store i32 %v1_be58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be64 = load i32, i32* @r5, align 4
  store i32 %v0_be64, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v5_be70 = inttoptr i32 %v0_be64 to i32*
  %v6_be70 = call i32 @function_85e0(i32 %v0_be68, i32* %v5_be70, i32 6, i32 65535, i32 %v1_be58)
  %v0_be78 = load i32, i32* @r5, align 4
  store i32 %v0_be78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be70, i32* @r7, align 4
  %v0_be88 = load i32, i32* @r4, align 4
  store i32 %v0_be88, i32* %r0.global-to-local, align 4
  %v5_be8c = inttoptr i32 %v0_be78 to i32*
  %v6_be8c = call i32 @function_85e0(i32 %v0_be88, i32* %v5_be8c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_be8c, i32* %sb.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v5_bea4 = inttoptr i32 %v0_be90 to i32*
  %v6_bea4 = call i32 @function_85e0(i32 %v0_bea0, i32* %v5_bea4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r5, align 4
  store i32 %v0_beb0, i32* %r1.global-to-local, align 4
  store i32 %v6_bea4, i32* @r6, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  store i32 %v0_beb8, i32* %r0.global-to-local, align 4
  %v5_bebc = inttoptr i32 %v0_beb0 to i32*
  %v6_bebc = call i32 @function_85e0(i32 %v0_beb8, i32* %v5_bebc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bec8 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v1_becc = urem i32 %v6_bebc, 256
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v5_bee0 = inttoptr i32 %v0_bed0 to i32*
  %v6_bee0 = call i32 @function_85e0(i32 %v0_bed8, i32* %v5_bee0, i32 25, i32 %v2_bec8, i32 %v1_becc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bef4 = call i32 @function_126bc(i32 2, i32 3, i32 17)
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v7_bef8 = icmp eq i32 %v3_bef4, -1
  store i1 %v7_bef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bef8, label %dec_label_pc_c320, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bdb8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bf0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bf0c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bf20 = call i32 @function_1268c(i32 %v3_bef4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bf20, i32* %r0.global-to-local, align 4
  %v7_bf24 = icmp eq i32 %v6_bf20, -1
  store i1 %v7_bf24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf24, label %dec_label_pc_c318, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %dec_label_pc_bf04
  %v0_bf2c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_bf38 = urem i32 %v0_bf2c, 65536
  store i32 %v3_bf38, i32* %r2.global-to-local, align 4
  %v3_bf3c = icmp ugt i32 %v3_bf38, 1459
  %v9_bf3c = icmp eq i32 %v3_bf38, 1460
  store i1 %v9_bf3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bf3c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_bf2c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_bf2c, %bb
  %v0_bf44 = phi i32 [ %v3_bf38, %dec_label_pc_bf2c ], [ 1460, %bb ]
  %v0_bf48 = load i32, i32* %fp.global-to-local, align 4
  %v3_bf48 = mul i32 %v0_bf48, 65536
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v3_bf4c = urem i32 %v0_bf48, 65536
  store i32 %v3_bf4c, i32* %r2.global-to-local, align 4
  %v0_bf50 = load i32, i32* @sl, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  %v0_bf54 = load i32, i32* %sb.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_bf50, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_bf44, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_bf80 = phi i32 [ %v3_bf4c, %bb71 ], [ %v0_bf44, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf68 = urem i32 %v0_bf58, 65536
  store i32 %v3_bf68, i32* %r3.global-to-local, align 4
  %v3_bf6c = urem i32 %v0_bf54, 65536
  store i32 %v3_bf6c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_bf88

.thread:                                          ; preds = %bb74
  %v6_bf7c = add nsw i32 %v5_bf80, 28
  store i32 %v6_bf7c, i32* @fp, align 4
  %v6_bf80 = add nsw i32 %v5_bf80, 8
  store i32 %v6_bf80, i32* @sb, align 4
  br label %dec_label_pc_c0fc

dec_label_pc_bf88:                                ; preds = %bb74
  %v1_bf8c = add nuw nsw i32 %v0_bf44, 28
  store i32 %v1_bf8c, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_bf8c, 256
  %v1_bf98 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_bf48, 256
  %v3_bf9c = urem i32 %tmp76, 256
  %v2_bfb0 = icmp eq i32 %v1_be58, 0
  store i1 %v2_bfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bfb4 = urem i32 %v0_bf48, 256
  %v1_bfbc = add nuw nsw i32 %v0_bf44, 8
  store i32 %v1_bfbc, i32* @sb, align 4
  %v1_bfc4 = urem i32 %v0_bf58, 256
  %v1_bfc8 = urem i32 %v0_bf54, 256
  store i32 %v1_bfc8, i32* %ip.global-to-local, align 4
  store i32 %v1_bf98, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_bfbc, 256
  %v4_bfd4 = mul nuw nsw i32 %v1_bfb4, 256
  %v5_bfd4 = or i32 %v4_bfd4, %v3_bf9c
  store i32 %v5_bfd4, i32* %r0.global-to-local, align 4
  %v3_bfd8 = mul nuw nsw i32 %v1_bfc4, 256
  store i32 %v3_bfd8, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_bf54, 256
  %v3_bfdc = urem i32 %tmp78, 256
  %v1_bfe0 = and i32 %tmp77, 65280
  store i32 %v1_bfe0, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_bf8c, 256
  %v4_bfe4 = urem i32 %tmp79, 256
  %v5_bfe4 = or i32 %v4_bfe4, %v1_bf98
  store i32 %v5_bfe4, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_bf58, 256
  %v4_bfe8 = urem i32 %tmp80, 256
  %v5_bfe8 = or i32 %v4_bfe8, %v3_bfd8
  store i32 %v5_bfe8, i32* @r4, align 4
  %v5_bfec = trunc i32 %tmp79 to i8
  %v5_bff0 = trunc i32 %tmp76 to i8
  %v4_bff4 = mul nuw nsw i32 %v1_bfc8, 256
  %v5_bff4 = or i32 %v4_bff4, %v3_bfdc
  store i32 %v5_bff4, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_bfbc, 256
  %v4_bff8 = urem i32 %tmp81, 256
  %v5_bff8 = or i32 %v4_bff8, %v1_bfe0
  store i32 %v5_bff8, i32* @r7, align 4
  br i1 %v2_bfb0, label %dec_label_pc_c000, label %dec_label_pc_c328

dec_label_pc_c000:                                ; preds = %dec_label_pc_bf88
  %v3_c00036 = udiv i32 %v1_bf98, 256
  store i32 %v3_c00036, i32* %ip.global-to-local, align 4
  store i32 %v1_bfb4, i32* %r0.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r2.global-to-local, align 4
  %v3_c01037 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c01037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_c0b4 = sext i8 %v5_bff0 to i32
  %sext15 = mul i32 %v0_bf48, 16777216
  %v4_c0b8 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_bf58, 16777216
  %v4_c0d0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_bfbc, 16777216
  %v4_c0d4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_bf54, 16777216
  %v4_c0d8 = sdiv i32 %sext18, 16777216
  %v1_c0c0 = trunc i32 %v1_bf8c to i8
  %v1_c0e0 = trunc i32 %v4_c0d4 to i8
  br label %dec_label_pc_c02c

dec_label_pc_c02c:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_c000
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c038 = call i32 @function_129a8(i32 1510, i32 1)
  store i32 %v2_c038, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v3_c040 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c040, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r6, align 4
  %v5_c044 = mul i32 %v2_c044, 4
  %v6_c044 = add i32 %v5_c044, %v2_bdd8
  %v7_c044 = inttoptr i32 %v6_c044 to i32*
  store i32 %v2_c038, i32* %v7_c044, align 4
  %v0_c048 = load i32, i32* %ip.global-to-local, align 4
  %v1_c048 = load i32, i32* %r2.global-to-local, align 4
  %v4_c048 = mul i32 %v1_c048, 4
  %v5_c048 = add i32 %v4_c048, %v0_c048
  %v6_c048 = inttoptr i32 %v5_c048 to i32*
  %v7_c048 = load i32, i32* %v6_c048, align 4
  store i32 %v7_c048, i32* %r1.global-to-local, align 4
  %v1_c04c = inttoptr i32 %v7_c048 to i8*
  %v2_c04c = load i8, i8* %v1_c04c, align 1
  %tmp = urem i8 %v2_c04c, 16
  %v1_c050 = zext i8 %tmp to i32
  %v1_c054 = or i32 %v1_c050, 64
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  %v1_c058 = trunc i32 %v1_c054 to i8
  store i8 %v1_c058, i8* %v1_c04c, align 1
  %v0_c05c = load i32, i32* %r1.global-to-local, align 4
  %v1_c05c = inttoptr i32 %v0_c05c to i8*
  %v2_c05c = load i8, i8* %v1_c05c, align 1
  %v3_c05c = zext i8 %v2_c05c to i32
  %v1_c060 = and i32 %v3_c05c, 240
  %v1_c064 = or i32 %v1_c060, 5
  store i32 %v1_c064, i32* %r2.global-to-local, align 4
  %v3_c06c = add i32 %v0_c05c, 9
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 17, i8* %v4_c06c, align 1
  %v0_c070 = load i32, i32* %r2.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* %r1.global-to-local, align 4
  %v3_c070 = inttoptr i32 %v2_c070 to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  store i32 %v6_bdf0, i32* %r0.global-to-local, align 4
  %v2_c078 = load i32, i32* %r1.global-to-local, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v5_be10, i8* %v4_c078, align 1
  %v2_c080 = load i32, i32* %r1.global-to-local, align 4
  %v3_c080 = add i32 %v2_c080, 8
  %v4_c080 = inttoptr i32 %v3_c080 to i8*
  store i8 %v5_be48, i8* %v4_c080, align 1
  %v3_c084 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c084, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c08c = mul i32 %v3_c084, 32
  store i32 %v3_c08c, i32* %r3.global-to-local, align 4
  %v1_c090 = load i32, i32* %r1.global-to-local, align 4
  %v2_c090 = add i32 %v1_c090, 12
  %v3_c090 = inttoptr i32 %v2_c090 to i32*
  store i32 %v6_bee0, i32* %v3_c090, align 4
  %v0_c094 = load i32, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c094, -8
  %v5_c094 = add i32 %v0_c094, %tmp83
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v5_c094, %v1_c098
  store i32 %v2_c098, i32* %r3.global-to-local, align 4
  %v1_c09c = add i32 %v2_c098, 16
  %v2_c09c = inttoptr i32 %v1_c09c to i32*
  %v3_c09c = load i32, i32* %v2_c09c, align 4
  %v1_c0a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v3_c09c, i32* %v3_c0a0, align 4
  %v0_c0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a8 = add i32 %v0_c0a8, 1
  store i32 %v1_c0a8, i32* @r6, align 4
  %v2_c0ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 2
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v5_bfec, i8* %v4_c0ac, align 1
  store i32 %v4_c0b4, i32* %ip.global-to-local, align 4
  store i32 %v4_c0b8, i32* %r0.global-to-local, align 4
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = add i32 %v0_c0bc, 20
  store i32 %v1_c0bc, i32* %r3.global-to-local, align 4
  %v3_c0c0 = add i32 %v0_c0bc, 3
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  %v0_c0c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 4
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 5
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r4, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 20
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 %v4_c0d0, i32* %r2.global-to-local, align 4
  store i32 %v4_c0d4, i32* %r1.global-to-local, align 4
  store i32 %v4_c0d8, i32* %ip.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r6, align 4
  %v1_c0dc = load i32, i32* @sl, align 4
  %v9_c0dc = icmp eq i32 %v0_c0dc, %v1_c0dc
  store i1 %v9_c0dc, i1* %cpsr_z.global-to-local, align 1
  %v2_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 5
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = trunc i32 %v0_c0e4 to i8
  %v2_c0e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e4 = add i32 %v2_c0e4, 1
  %v4_c0e4 = inttoptr i32 %v3_c0e4 to i8*
  store i8 %v1_c0e4, i8* %v4_c0e4, align 1
  %v0_c0e8 = load i32, i32* @r5, align 4
  %v1_c0e8 = trunc i32 %v0_c0e8 to i8
  %v2_c0e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e8 = add i32 %v2_c0e8, 2
  %v4_c0e8 = inttoptr i32 %v3_c0e8 to i8*
  store i8 %v1_c0e8, i8* %v4_c0e8, align 1
  %v0_c0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i8
  %v2_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v3_c0ec = add i32 %v2_c0ec, 3
  %v4_c0ec = inttoptr i32 %v3_c0ec to i8*
  store i8 %v1_c0ec, i8* %v4_c0ec, align 1
  %v0_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f0 = trunc i32 %v0_c0f0 to i8
  %v2_c0f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0f0 = add i32 %v2_c0f0, 4
  %v4_c0f0 = inttoptr i32 %v3_c0f0 to i8*
  store i8 %v1_c0f0, i8* %v4_c0f0, align 1
  %v0_c0f4 = load i32, i32* @r6, align 4
  store i32 %v0_c0f4, i32* %stack_var_-40, align 4
  %v5_c0f8 = icmp slt i32 %v0_c0dc, %v1_c0dc
  br i1 %v5_c0f8, label %dec_label_pc_c02c, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c02c, %.thread
  %v0_c0fc = load i32, i32* @sl, align 4
  %v2_c0fc = icmp eq i32 %v0_c0fc, 0
  store i1 %v2_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c2a8 = icmp eq i32 %v3_bf4c, 65535
  %v2_c174 = icmp eq i32 %v1_becc, 0
  %v2_c13c = icmp eq i32 %v6_bee0, -1
  %v7_c13c = icmp eq i32 %v6_bee0, -1
  br label %dec_label_pc_c104.outer

dec_label_pc_c104.outer:                          ; preds = %dec_label_pc_c224, %dec_label_pc_c0fc
  %v1_c104.ph.in = phi i32 [ %v1_c218, %dec_label_pc_c224 ], [ %v0_c0fc, %dec_label_pc_c0fc ]
  %v0_c104.ph = phi i1 [ %v2_c224, %dec_label_pc_c224 ], [ %v2_c0fc, %dec_label_pc_c0fc ]
  %v1_c104.ph = icmp slt i32 %v1_c104.ph.in, 0
  %v4_c104 = or i1 %v1_c104.ph, %v0_c104.ph
  br label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c104.outer, %dec_label_pc_c104
  br i1 %v4_c104, label %dec_label_pc_c104, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c104
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_c108
  %v1_c128 = phi i32 [ %v1_c214, %dec_label_pc_c17c ], [ 0, %dec_label_pc_c108 ]
  %v5_c118 = mul i32 %v1_c128, 24
  %v1_c11c = load i32, i32* @r8, align 4
  %v2_c11c = add i32 %v1_c11c, %v5_c118
  store i32 %v2_c11c, i32* %r3.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v1_c124 = add i32 %v2_c11c, 20
  %v2_c124 = inttoptr i32 %v1_c124 to i8*
  %v3_c124 = load i8, i8* %v2_c124, align 1
  %v4_c124 = zext i8 %v3_c124 to i32
  store i32 %v4_c124, i32* %r2.global-to-local, align 4
  %v4_c128 = mul i32 %v1_c128, 4
  %v5_c128 = add i32 %v4_c128, %v2_bdd8
  %v6_c128 = inttoptr i32 %v5_c128 to i32*
  %v7_c128 = load i32, i32* %v6_c128, align 4
  store i32 %v7_c128, i32* @r5, align 4
  %v7_c12c = icmp eq i8 %v3_c124, 31
  store i1 %v7_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = add i32 %v7_c128, 20
  store i32 %v1_c130, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_c124, 32
  br i1 %tmp84, label %dec_label_pc_c230, label %dec_label_pc_c138

dec_label_pc_c138:                                ; preds = %dec_label_pc_c114
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c298.dec_label_pc_c158_crit_edge, %dec_label_pc_c144
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c298.dec_label_pc_c158_crit_edge ], [ 65535, %dec_label_pc_c144 ]
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v9_c15c = icmp eq i32 %v3_bf68, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c15c, label %dec_label_pc_c2d0, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge, %dec_label_pc_c158
  %v1_c168 = phi i32 [ %v1_c168.pre, %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge ], [ %v1_c15c, %dec_label_pc_c158 ]
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v9_c168 = icmp eq i32 %v3_bf6c, %v1_c168
  store i1 %v9_c168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c168, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c174, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec, %dec_label_pc_c308
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c180 = load i32, i32* @r7, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r5, align 4
  %v3_c180 = add i32 %v2_c180, 10
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r7, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r5, align 4
  %v3_c184 = add i32 %v2_c184, 11
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* @r5, align 4
  store i32 %v0_c188, i32* @r0, align 4
  %v2_c18c = call i32 @function_d0b8(i32 %v0_c188, i32 20)
  %v3_c18c = trunc i32 %v2_c18c to i8
  store i32 %v2_c18c, i32* %r0.global-to-local, align 4
  %v4_c190 = sdiv i32 %v2_c18c, 256
  store i32 %v4_c190, i32* %r3.global-to-local, align 4
  %v1_c194 = trunc i32 %v4_c190 to i8
  %v2_c194 = load i32, i32* @r5, align 4
  %v3_c194 = add i32 %v2_c194, 11
  %v4_c194 = inttoptr i32 %v3_c194 to i8*
  store i8 %v1_c194, i8* %v4_c194, align 1
  %v3_c198 = load i32, i32* @r5, align 4
  %v4_c198 = add i32 %v3_c198, 10
  %v5_c198 = inttoptr i32 %v4_c198 to i8*
  store i8 %v3_c18c, i8* %v5_c198, align 1
  %v0_c19c = load i32, i32* @r7, align 4
  %v1_c19c = trunc i32 %v0_c19c to i8
  %v2_c19c = load i32, i32* @r6, align 4
  %v3_c19c = add i32 %v2_c19c, 6
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v1_c19c, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* @r7, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* @r6, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 7
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* @r5, align 4
  %v1_c1a4 = add i32 %v0_c1a4, 24
  %v2_c1a4 = inttoptr i32 %v1_c1a4 to i8*
  %v3_c1a4 = load i8, i8* %v2_c1a4, align 1
  %v4_c1a4 = zext i8 %v3_c1a4 to i32
  store i32 %v4_c1a4, i32* %r3.global-to-local, align 4
  %v1_c1a8 = add i32 %v0_c1a4, 25
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  %v0_c1ac = load i32, i32* @r6, align 4
  store i32 %v0_c1ac, i32* @r1, align 4
  %v4_c1b0 = mul nuw nsw i32 %v4_c1a8, 256
  %v5_c1b0 = or i32 %v4_c1b0, %v4_c1a4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  store i32 %v0_c1a4, i32* %r0.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @sb, align 4
  store i32 %v0_c1b8, i32* %r3.global-to-local, align 4
  %v4_c1bc = call i32 @function_d114(i32 %v0_c1a4, i32 %v0_c1ac, i32 %v5_c1b0, i32 %v0_c1b8)
  %v5_c1bc = trunc i32 %v4_c1bc to i8
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  %v4_c1c038 = udiv i32 %v4_c1bc, 256
  %v1_c1c4 = trunc i32 %v4_c1c038 to i8
  %v2_c1c4 = load i32, i32* @r6, align 4
  %v3_c1c4 = add i32 %v2_c1c4, 7
  %v4_c1c4 = inttoptr i32 %v3_c1c4 to i8*
  store i8 %v1_c1c4, i8* %v4_c1c4, align 1
  %v3_c1c8 = load i32, i32* @r6, align 4
  %v4_c1c8 = add i32 %v3_c1c8, 6
  %v5_c1c8 = inttoptr i32 %v4_c1c8 to i8*
  store i8 %v5_c1bc, i8* %v5_c1c8, align 1
  %v3_c1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c1cc, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 20
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i32*
  %v3_c1d0 = load i32, i32* %v2_c1d0, align 4
  %v3_c1d8 = udiv i32 %v3_c1d0, 65536
  store i32 %v3_c1d8, i32* %r2.global-to-local, align 4
  %v5_c1dc = mul i32 %v3_c1cc, 24
  %v1_c1e0 = load i32, i32* @r8, align 4
  %v2_c1e0 = add i32 %v1_c1e0, %v5_c1dc
  store i32 %v2_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e435 = udiv i32 %v3_c1d0, 16777216
  %v1_c1e8 = trunc i32 %v3_c1e435 to i8
  %v3_c1e8 = add i32 %v2_c1e0, 3
  %v4_c1e8 = inttoptr i32 %v3_c1e8 to i8*
  store i8 %v1_c1e8, i8* %v4_c1e8, align 1
  %v0_c1ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  %v2_c1ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c1ec = add i32 %v2_c1ec, 2
  %v4_c1ec = inttoptr i32 %v3_c1ec to i8*
  store i8 %v1_c1ec, i8* %v4_c1ec, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r5, align 4
  store i32 %v0_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  store i32 %v0_c1fc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c204 = load i32, i32* %ip.global-to-local, align 4
  %v6_c20c = inttoptr i32 %v0_c1f4 to i32*
  %v7_c20c = call i32 @function_12658(i32 %v3_bef4, i32* %v6_c20c, i32 %v0_c1fc, i32 16384, i32 %v0_c204, i32 16)
  %v3_c210 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c210, i32* %r3.global-to-local, align 4
  %v1_c214 = add i32 %v3_c210, 1
  store i32 %v1_c214, i32* %r0.global-to-local, align 4
  %v1_c218 = load i32, i32* @sl, align 4
  %v9_c218 = icmp eq i32 %v1_c214, %v1_c218
  store i1 %v9_c218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c214, i32* %stack_var_-40, align 4
  %v5_c220 = icmp slt i32 %v1_c214, %v1_c218
  br i1 %v5_c220, label %dec_label_pc_c114, label %dec_label_pc_c224

dec_label_pc_c224:                                ; preds = %dec_label_pc_c17c
  %v2_c224 = icmp eq i32 %v1_c218, 0
  store i1 %v2_c224, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c104.outer

dec_label_pc_c230:                                ; preds = %dec_label_pc_c114
  %v1_c230 = add i32 %v2_c11c, 16
  %v2_c230 = inttoptr i32 %v1_c230 to i32*
  %v3_c230 = load i32, i32* %v2_c230, align 4
  %v0_c234 = call i32 @function_eb48()
  store i32 %v0_c234, i32* %r0.global-to-local, align 4
  %v3_c238 = load i32, i32* %stack_var_-40, align 4
  %v5_c240 = mul i32 %v3_c238, 24
  %v1_c248 = load i32, i32* @r8, align 4
  %v2_c248 = add i32 %v1_c248, %v5_c240
  store i32 %v2_c248, i32* %r1.global-to-local, align 4
  %v1_c24c = and i32 %v3_c230, 65280
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  %v1_c244 = udiv i32 %v3_c230, 256
  %v3_c250 = and i32 %v1_c244, 65280
  store i32 %v3_c250, i32* %r2.global-to-local, align 4
  %v3_c254 = mul i32 %v3_c230, 16777216
  store i32 %v3_c254, i32* %ip.global-to-local, align 4
  %v1_c258 = add i32 %v2_c248, 20
  %v2_c258 = inttoptr i32 %v1_c258 to i8*
  %v3_c258 = load i8, i8* %v2_c258, align 1
  %v4_c258 = zext i8 %v3_c258 to i32
  %v4_c25c = mul nuw nsw i32 %v1_c24c, 256
  %v5_c25c = or i32 %v4_c25c, %v3_c254
  store i32 %v5_c25c, i32* %ip.global-to-local, align 4
  %v2_c264 = call i32 @llvm.bswap.i32(i32 %v3_c230)
  %v7_c268 = lshr i32 %v0_c234, %v4_c258
  %v8_c268 = add i32 %v7_c268, %v2_c264
  store i32 %v8_c268, i32* %r2.global-to-local, align 4
  %v3_c274 = mul i32 %v8_c268, 16777216
  %v1_c26c = mul i32 %v8_c268, 256
  %v4_c278 = and i32 %v1_c26c, 16711680
  %v5_c278 = or i32 %v4_c278, %v3_c274
  store i32 %v5_c278, i32* %r1.global-to-local, align 4
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  %v2_c288 = call i32 @llvm.bswap.i32(i32 %v8_c268)
  store i32 %v2_c288, i32* %r3.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  %v1_c290 = load i32, i32* @r5, align 4
  %v2_c290 = add i32 %v1_c290, 16
  %v3_c290 = inttoptr i32 %v2_c290 to i32*
  store i32 %v2_c288, i32* %v3_c290, align 4
  br i1 %v2_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c298:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  %v0_c298 = call i32 @function_eb48()
  store i32 %v0_c298, i32* %r0.global-to-local, align 4
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c2ac = load i32, i32* @r5, align 4
  %v2_c2ac = add i32 %v1_c2ac, 12
  %v3_c2ac = inttoptr i32 %v2_c2ac to i32*
  store i32 %v0_c298, i32* %v3_c2ac, align 4
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c298.dec_label_pc_c158_crit_edge

dec_label_pc_c298.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c298
  %v1_c15c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c158

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c298, %dec_label_pc_c144
  %v0_c2b4 = call i32 @function_eb48()
  %v1_c2b4 = trunc i32 %v0_c2b4 to i8
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v4_c2bc = sdiv i32 %v0_c2b4, 256
  store i32 %v4_c2bc, i32* %r3.global-to-local, align 4
  %v1_c2c0 = load i32, i32* @r4, align 4
  %v9_c2c0 = icmp eq i32 %v3_bf68, %v1_c2c0
  store i1 %v9_c2c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c4 = trunc i32 %v4_c2bc to i8
  %v2_c2c4 = load i32, i32* @r5, align 4
  %v3_c2c4 = add i32 %v2_c2c4, 5
  %v4_c2c4 = inttoptr i32 %v3_c2c4 to i8*
  store i8 %v1_c2c4, i8* %v4_c2c4, align 1
  %v3_c2c8 = load i32, i32* @r5, align 4
  %v4_c2c8 = add i32 %v3_c2c8, 4
  %v5_c2c8 = inttoptr i32 %v4_c2c8 to i8*
  store i8 %v1_c2b4, i8* %v5_c2c8, align 1
  %v0_c2cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2cc, label %dec_label_pc_c2d0, label %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge

dec_label_pc_c2b4.dec_label_pc_c164_crit_edge:    ; preds = %dec_label_pc_c2b4
  %v1_c168.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c164

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2b4, %dec_label_pc_c158
  %v0_c2d0 = call i32 @function_eb48()
  %v1_c2d0 = trunc i32 %v0_c2d0 to i8
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v4_c2d4 = sdiv i32 %v0_c2d0, 256
  store i32 %v4_c2d4, i32* %r3.global-to-local, align 4
  %v3_c2d8 = load i32, i32* @r5, align 4
  %v4_c2d8 = add i32 %v3_c2d8, 20
  %v5_c2d8 = inttoptr i32 %v4_c2d8 to i8*
  store i8 %v1_c2d0, i8* %v5_c2d8, align 1
  %v0_c2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2dc = trunc i32 %v0_c2dc to i8
  %v2_c2dc = load i32, i32* @r6, align 4
  %v3_c2dc = add i32 %v2_c2dc, 1
  %v4_c2dc = inttoptr i32 %v3_c2dc to i8*
  store i8 %v1_c2dc, i8* %v4_c2dc, align 1
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* @r4, align 4
  %v9_c2e4 = icmp eq i32 %v3_bf6c, %v1_c2e4
  store i1 %v9_c2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2e4, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  %v0_c2ec = call i32 @function_eb48()
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  store i32 %v0_c2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v4_c2f4 = sdiv i32 %v0_c2ec, 256
  store i32 %v4_c2f4, i32* %r3.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  %v1_c2fc = trunc i32 %v4_c2f4 to i8
  %v2_c2fc = load i32, i32* @r6, align 4
  %v3_c2fc = add i32 %v2_c2fc, 3
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v3_c300 = load i32, i32* @r6, align 4
  %v4_c300 = add i32 %v3_c300, 2
  %v5_c300 = inttoptr i32 %v4_c300 to i8*
  store i8 %v1_c2ec, i8* %v5_c300, align 1
  %v0_c304 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c304, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec
  %v0_c308 = load i32, i32* @r5, align 4
  %v1_c308 = add i32 %v0_c308, 28
  store i32 %v1_c308, i32* %r0.global-to-local, align 4
  store i32 %v0_bf44, i32* @r1, align 4
  %v1_c310 = inttoptr i32 %v1_c308 to i8*
  %v2_c310 = call i32 @function_ecc8(i8* %v1_c310)
  store i32 %v2_c310, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c318:                                ; preds = %dec_label_pc_bf04
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v1_c31c = call i32 @function_11da0(i32 %v3_bef4)
  store i32 %v1_c31c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_c318
  %v29_c324 = phi i32 [ %v3_bef4, %dec_label_pc_bdb8 ], [ %v1_c31c, %dec_label_pc_c318 ]
  store i32 %v18_bdb8, i32* %sb.global-to-local, align 4
  store i32 %v24_bdb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c324

dec_label_pc_c328:                                ; preds = %dec_label_pc_bf88
  %v3_c32c = sext i8 %v5_bfec to i32
  %v7_c32c = sext i8 %v5_bff0 to i32
  %v3_c330 = sdiv i32 %v3_c32c, 256
  store i32 %v3_c330, i32* %r0.global-to-local, align 4
  %v3_c334 = sdiv i32 %v7_c32c, 256
  store i32 %v3_c334, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r3.global-to-local, align 4
  %v3_c34034 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c34034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %sext11 = mul i32 %v1_bfbc, 16777216
  %v4_c404 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_bf58, 16777216
  %v4_c408 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_bf54, 16777216
  %v4_c424 = sdiv i32 %sext13, 16777216
  %v1_c410 = trunc i32 %v3_c334 to i8
  %v1_c42c = trunc i32 %v4_c424 to i8
  br label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c328
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c368 = call i32 @function_129a8(i32 1510, i32 1)
  store i32 %v2_c368, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %r1.global-to-local, align 4
  %v3_c370 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c370, i32* %r2.global-to-local, align 4
  %v2_c374 = load i32, i32* @r6, align 4
  %v5_c374 = mul i32 %v2_c374, 4
  %v6_c374 = add i32 %v5_c374, %v2_bdd8
  %v7_c374 = inttoptr i32 %v6_c374 to i32*
  store i32 %v2_c368, i32* %v7_c374, align 4
  %v0_c378 = load i32, i32* %r1.global-to-local, align 4
  %v1_c378 = load i32, i32* %r2.global-to-local, align 4
  %v4_c378 = mul i32 %v1_c378, 4
  %v5_c378 = add i32 %v4_c378, %v0_c378
  %v6_c378 = inttoptr i32 %v5_c378 to i32*
  %v7_c378 = load i32, i32* %v6_c378, align 4
  store i32 %v7_c378, i32* %r1.global-to-local, align 4
  %v1_c37c = inttoptr i32 %v7_c378 to i8*
  %v2_c37c = load i8, i8* %v1_c37c, align 1
  %tmp85 = urem i8 %v2_c37c, 16
  %v1_c380 = zext i8 %tmp85 to i32
  %v1_c384 = or i32 %v1_c380, 64
  store i32 %v1_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v1_c384 to i8
  store i8 %v1_c388, i8* %v1_c37c, align 1
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = inttoptr i32 %v0_c38c to i8*
  %v2_c38c = load i8, i8* %v1_c38c, align 1
  %v3_c38c = zext i8 %v2_c38c to i32
  %v1_c390 = and i32 %v3_c38c, 240
  %v1_c394 = or i32 %v1_c390, 5
  store i32 %v1_c394, i32* %r2.global-to-local, align 4
  %v3_c39c = add i32 %v0_c38c, 9
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 17, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v3_c3a0, align 1
  %v2_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 1
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v5_be10, i8* %v4_c3a8, align 1
  store i32 %v6_be2c, i32* %r0.global-to-local, align 4
  %v2_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 8
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v5_be48, i8* %v4_c3b0, align 1
  %v3_c3b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b4, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c3bc = mul i32 %v3_c3b4, 32
  store i32 %v3_c3bc, i32* %r3.global-to-local, align 4
  %v1_c3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 12
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i32*
  store i32 %v6_bee0, i32* %v3_c3c0, align 4
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_c3c4, -8
  %v5_c3c4 = add i32 %v0_c3c4, %tmp86
  %v1_c3c8 = load i32, i32* @r8, align 4
  %v2_c3c8 = add i32 %v5_c3c4, %v1_c3c8
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = add i32 %v2_c3c8, 16
  %v2_c3cc = inttoptr i32 %v1_c3cc to i32*
  %v3_c3cc = load i32, i32* %v2_c3cc, align 4
  store i32 %v3_c3cc, i32* %ip.global-to-local, align 4
  %v1_c3d0 = add i32 %v1_c3c4, 1
  store i32 %v1_c3d0, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3dc = add i32 %v2_c3dc, 6
  %v4_c3dc = inttoptr i32 %v3_c3dc to i8*
  store i8 64, i8* %v4_c3dc, align 1
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 7
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  store i32 %v3_c330, i32* %r3.global-to-local, align 4
  store i32 %v7_c32c, i32* %ip.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 2
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v5_bfec, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 3
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  %v2_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3fc = add i32 %v2_c3fc, 4
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v1_c3fc, i8* %v4_c3fc, align 1
  store i32 %v3_c334, i32* %r2.global-to-local, align 4
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  store i32 %v4_c408, i32* %ip.global-to-local, align 4
  %v0_c40c = load i32, i32* %r1.global-to-local, align 4
  %v1_c40c = add i32 %v0_c40c, 20
  store i32 %v1_c40c, i32* %r0.global-to-local, align 4
  %v3_c410 = add i32 %v0_c40c, 5
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i32, i32* @r4, align 4
  %v1_c414 = trunc i32 %v0_c414 to i8
  %v2_c414 = load i32, i32* %r1.global-to-local, align 4
  %v3_c414 = add i32 %v2_c414, 20
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v1_c414, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v2_c418, 5
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %ip.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* %r0.global-to-local, align 4
  %v3_c41c = add i32 %v2_c41c, 1
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r5, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* %r0.global-to-local, align 4
  %v3_c420 = add i32 %v2_c420, 2
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  store i32 %v4_c424, i32* %r1.global-to-local, align 4
  %v0_c428 = load i32, i32* @r6, align 4
  %v1_c428 = load i32, i32* @sl, align 4
  %v9_c428 = icmp eq i32 %v0_c428, %v1_c428
  store i1 %v9_c428, i1* %cpsr_z.global-to-local, align 1
  %v2_c42c = load i32, i32* %r0.global-to-local, align 4
  %v3_c42c = add i32 %v2_c42c, 3
  %v4_c42c = inttoptr i32 %v3_c42c to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* @r7, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r0.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* @r6, align 4
  store i32 %v0_c434, i32* %stack_var_-40, align 4
  %v5_c438 = icmp slt i32 %v0_c428, %v1_c428
  br i1 %v5_c438, label %dec_label_pc_c35c, label %dec_label_pc_c0fc

; uselistorder directives
  uselistorder i32 %v1_c3c4, { 1, 0 }
  uselistorder i32 %v3_c334, { 2, 1, 0 }
  uselistorder i32 %v3_c330, { 1, 0 }
  uselistorder i32 %v7_c32c, { 1, 0 }
  uselistorder i32 %v4_c2f4, { 1, 0 }
  uselistorder i32 %v0_c2ec, { 0, 2, 1 }
  uselistorder i32 %v0_c2d0, { 0, 2, 1 }
  uselistorder i32 %v4_c2bc, { 1, 0 }
  uselistorder i32 %v0_c2b4, { 0, 2, 1 }
  uselistorder i32 %v2_c288, { 1, 0 }
  uselistorder i32 %v8_c268, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c254, { 1, 0 }
  uselistorder i32 %v3_c230, { 1, 3, 2, 0 }
  uselistorder i1 %v2_c224, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c214, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c1bc, { 0, 2, 1 }
  uselistorder i32 %v0_c1a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c190, { 1, 0 }
  uselistorder i32 %v2_c18c, { 0, 2, 1 }
  uselistorder i1 %v7_c13c, { 2, 1, 0 }
  uselistorder i1 %v3_c2a8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bfec, { 0, 2, 1 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc8, { 2, 3, 0, 1 }
  uselistorder i32 %v1_bfc4, { 1, 2, 0 }
  uselistorder i32 %v1_bfbc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_bfb4, { 1, 0 }
  uselistorder i32 %v1_bf8c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bf6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_bf4c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_bf48, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_bf44, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_bf38, { 3, 1, 2, 0 }
  uselistorder i1 %v7_bf24, { 1, 0 }
  uselistorder i1 %v7_bef8, { 1, 0 }
  uselistorder i32 %v3_bef4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bee0, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_becc, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_be58, { 1, 2, 0 }
  uselistorder i32 %v6_be2c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_bdf0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_bdd8, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_bdbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_ecc8, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c308, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c104, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_c444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c444:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c444 = load i32, i32* @r4, align 4
  %v12_c444 = load i32, i32* @r7, align 4
  %v1_c448 = urem i32 %arg1, 256
  store i32 %v1_c448, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_c45c = urem i32 %arg3, 256
  store i32 %v1_c45c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c464 = call i32 @function_129a8(i32 %v1_c448, i32 4)
  %v0_c468 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c474 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c47c = inttoptr i32 %v0_c468 to i32*
  %v6_c47c = call i32 @function_85e0(i32 %v0_c474, i32* %v5_c47c, i32 2, i32 0, i32 %v2_c464)
  %v1_c488 = urem i32 %v6_c47c, 256
  store i32 %v1_c488, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c494 = load i32, i32* @r4, align 4
  %v0_c498 = load i32, i32* @r5, align 4
  %v5_c49c = trunc i32 %v6_c47c to i8
  %v6_c4a0 = inttoptr i32 %v0_c498 to i32*
  %v7_c4a0 = call i32 @function_85e0(i32 %v0_c494, i32* %v6_c4a0, i32 3, i32 65535, i32 %v6_c47c)
  %v0_c4a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4a0, i32* @r7, align 4
  %v0_c4b4 = load i32, i32* @r4, align 4
  %v5_c4b8 = inttoptr i32 %v0_c4a4 to i32*
  %v6_c4b8 = call i32 @function_85e0(i32 %v0_c4b4, i32* %v5_c4b8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c4c0 = urem i32 %v6_c4b8, 256
  store i32 %v1_c4c0, i32* %ip.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @r4, align 4
  %v5_c4d4 = trunc i32 %v6_c4b8 to i8
  %v6_c4d8 = inttoptr i32 %v0_c4c4 to i32*
  %v7_c4d8 = call i32 @function_85e0(i32 %v0_c4d0, i32* %v6_c4d8, i32 5, i32 0, i32 %v6_c4b8)
  %v1_c4e4 = urem i32 %v7_c4d8, 256
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @r4, align 4
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v5_c4fc = inttoptr i32 %v0_c4f4 to i32*
  %v6_c4fc = call i32 @function_85e0(i32 %v0_c4f0, i32* %v5_c4fc, i32 6, i32 65535, i32 %v1_c4e4)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v6_c4fc, i32* @r6, align 4
  %v0_c514 = load i32, i32* @r4, align 4
  %v5_c518 = inttoptr i32 %v0_c50c to i32*
  %v6_c518 = call i32 @function_85e0(i32 %v0_c514, i32* %v5_c518, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c518, i32* @r4, align 4
  %v1_c524 = call i32 @function_10dd4(i32 25)
  %v3_c530 = call i32 @function_10cf0(i32 25, i32* nonnull %stack_var_-44)
  store i32 %v3_c530, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_c544 = call i32 @function_126bc(i32 2, i32 3, i32 17)
  %v7_c548 = icmp eq i32 %v3_c544, -1
  store i1 %v7_c548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c544, i32* %fp.global-to-local, align 4
  br i1 %v7_c548, label %dec_label_pc_c8fc, label %dec_label_pc_c554

dec_label_pc_c554:                                ; preds = %dec_label_pc_c444
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c55c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c55c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c570 = call i32 @function_1268c(i32 %v3_c544, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_c574 = icmp eq i32 %v6_c570, -1
  store i1 %v7_c574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c574, label %dec_label_pc_c8f4, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c554
  %v0_c57c = load i32, i32* @r4, align 4
  %v3_c57c = mul i32 %v0_c57c, 65536
  store i32 %v3_c57c, i32* @lr, align 4
  %v0_c580 = load i32, i32* @r7, align 4
  %v0_c584 = load i32, i32* @r6, align 4
  %v3_c584 = mul i32 %v0_c584, 65536
  store i32 %v3_c584, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_c58c = urem i32 %v0_c580, 65536
  %v3_c590 = urem i32 %v0_c584, 65536
  store i32 %v3_c590, i32* %r2.global-to-local, align 4
  %v3_c594 = urem i32 %v0_c57c, 65536
  store i32 %v3_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %sb.global-to-local, align 4
  %v2_c598 = icmp eq i32 %v0_c598, 0
  store i1 %v2_c598, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_c598, 1
  br i1 %tmp50, label %dec_label_pc_c71c, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c57c
  %v1_c5b4 = urem i32 %v0_c57c, 256
  %v1_c5b8 = urem i32 %v0_c584, 256
  %v1_c5bc = urem i32 %v0_c580, 256
  %v3_c5c0 = mul nuw nsw i32 %v1_c5b8, 256
  %v3_c5c4 = mul nuw nsw i32 %v1_c5b4, 256
  %tmp51 = udiv i32 %v0_c580, 256
  %v3_c5c8 = urem i32 %tmp51, 256
  %v4_c5cc = mul nuw nsw i32 %v1_c5bc, 256
  %v5_c5cc = or i32 %v4_c5cc, %v3_c5c8
  store i32 %v5_c5cc, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_c57c, 256
  %v4_c5d0 = urem i32 %tmp52, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5c4
  store i32 %v5_c5d0, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_c584, 256
  %v4_c5d4 = urem i32 %tmp53, 256
  %v5_c5d4 = or i32 %v4_c5d4, %v3_c5c0
  store i32 %v5_c5d4, i32* @r6, align 4
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  %v2_c650 = icmp eq i32 %v1_c4e4, 0
  %sext = mul i32 %v0_c580, 16777216
  %v4_c670 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_c584, 16777216
  %v4_c6cc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_c57c, 16777216
  %v4_c6ec = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_c5f0

dec_label_pc_c5f0:                                ; preds = %bb57, %dec_label_pc_c5b0
  %v2_c5f8 = call i32 @function_129a8(i32 128, i32 1)
  store i32 %v2_c464, i32* %r2.global-to-local, align 4
  %v3_c600 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c600, i32* %r3.global-to-local, align 4
  %v2_c604 = load i32, i32* @r4, align 4
  %v5_c604 = mul i32 %v2_c604, 4
  %v6_c604 = add i32 %v5_c604, %v2_c464
  %v7_c604 = inttoptr i32 %v6_c604 to i32*
  store i32 %v2_c5f8, i32* %v7_c604, align 4
  %v0_c608 = load i32, i32* %r2.global-to-local, align 4
  %v1_c608 = load i32, i32* %r3.global-to-local, align 4
  %v4_c608 = mul i32 %v1_c608, 4
  %v5_c608 = add i32 %v4_c608, %v0_c608
  %v6_c608 = inttoptr i32 %v5_c608 to i32*
  %v7_c608 = load i32, i32* %v6_c608, align 4
  store i32 %v7_c608, i32* @lr, align 4
  %v1_c60c = inttoptr i32 %v7_c608 to i8*
  %v2_c60c = load i8, i8* %v1_c60c, align 1
  %tmp = urem i8 %v2_c60c, 16
  %v1_c610 = zext i8 %tmp to i32
  %v1_c614 = or i32 %v1_c610, 64
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v1_c614 to i8
  store i8 %v1_c618, i8* %v1_c60c, align 1
  %v0_c61c = load i32, i32* @lr, align 4
  %v1_c61c = inttoptr i32 %v0_c61c to i8*
  %v2_c61c = load i8, i8* %v1_c61c, align 1
  %v1_c620 = and i8 %v2_c61c, -16
  %v1_c624 = or i8 %v1_c620, 5
  store i8 %v1_c624, i8* %v1_c61c, align 1
  %v2_c630 = load i32, i32* @lr, align 4
  %v3_c630 = add i32 %v2_c630, 1
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v5_c49c, i8* %v4_c630, align 1
  %v3_c634 = load i32, i32* %stack_var_-44, align 4
  %v1_c638 = add i32 %v3_c634, 32
  %tmp54 = mul i32 %v1_c638, 256
  %v1_c644 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_c638, 256
  %v4_c648 = urem i32 %tmp55, 256
  %v5_c648 = or i32 %v4_c648, %v1_c644
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c4b8, i32* %r3.global-to-local, align 4
  %v2_c658 = load i32, i32* @lr, align 4
  %v3_c658 = add i32 %v2_c658, 8
  %v4_c658 = inttoptr i32 %v3_c658 to i8*
  store i8 %v5_c4d4, i8* %v4_c658, align 1
  %v0_c65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c65c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c5f0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @lr, align 4
  %v4_c660 = add i32 %v3_c660, 6
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 64, i8* %v5_c660, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5f0, %bb
  %v0_c664 = load i32, i32* %r2.global-to-local, align 4
  %v1_c664 = trunc i32 %v0_c664 to i8
  %v2_c664 = load i32, i32* @lr, align 4
  %v3_c664 = add i32 %v2_c664, 2
  %v4_c664 = inttoptr i32 %v3_c664 to i8*
  store i8 %v1_c664, i8* %v4_c664, align 1
  %v0_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = sdiv i32 %v0_c668, 256
  store i32 %v3_c668, i32* %ip.global-to-local, align 4
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  %v2_c674 = load i32, i32* @lr, align 4
  %v3_c674 = add i32 %v2_c674, 9
  %v4_c674 = inttoptr i32 %v3_c674 to i8*
  store i8 17, i8* %v4_c674, align 1
  store i32 ptrtoint (i32* @global_var_1ce00.50 to i32), i32* %r3.global-to-local, align 4
  %v0_c67c = load i32, i32* %r2.global-to-local, align 4
  %v1_c67c = trunc i32 %v0_c67c to i8
  %v2_c67c = load i32, i32* @lr, align 4
  %v3_c67c = add i32 %v2_c67c, 5
  %v4_c67c = inttoptr i32 %v3_c67c to i8*
  store i8 %v1_c67c, i8* %v4_c67c, align 1
  %v0_c680 = load i32, i32* %ip.global-to-local, align 4
  %v1_c680 = trunc i32 %v0_c680 to i8
  %v2_c680 = load i32, i32* @lr, align 4
  %v3_c680 = add i32 %v2_c680, 3
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v0_c684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c684, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_c6889 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6889, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c688, i32* %ip.global-to-local, align 4
  %v3_c68c = load i32, i32* @lr, align 4
  %v4_c68c = add i32 %v3_c68c, 7
  %v5_c68c = inttoptr i32 %v4_c68c to i8*
  store i8 0, i8* %v5_c68c, align 1
  %v0_c694.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_c694 = phi i32 [ %v3_c6889, %.thread8 ], [ %v0_c694.pre, %bb56 ]
  %v2_c690 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_c690, i32* %r2.global-to-local, align 4
  %v3_c694 = mul i32 %v0_c694, 32
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @lr, align 4
  %v2_c698 = add i32 %v1_c698, 12
  %v3_c698 = inttoptr i32 %v2_c698 to i32*
  store i32 %v2_c690, i32* %v3_c698, align 4
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_c69c, -8
  %v5_c69c = add i32 %v0_c69c, %tmp60
  %v1_c6a0 = load i32, i32* @sl, align 4
  %v2_c6a0 = add i32 %v5_c69c, %v1_c6a0
  store i32 %v2_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = add i32 %v2_c6a0, 16
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i32*
  %v3_c6a4 = load i32, i32* %v2_c6a4, align 4
  %v1_c6a8 = load i32, i32* @lr, align 4
  %v2_c6a8 = add i32 %v1_c6a8, 16
  %v3_c6a8 = inttoptr i32 %v2_c6a8 to i32*
  store i32 %v3_c6a4, i32* %v3_c6a8, align 4
  %v3_c6ac = load i32, i32* %stack_var_-44, align 4
  %v1_c6b0 = add i32 %v3_c6ac, 12
  %tmp58 = mul i32 %v1_c6b0, 256
  %v1_c6c0 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_c6b0, 256
  %v4_c6c4 = urem i32 %tmp59, 256
  %v5_c6c4 = or i32 %v4_c6c4, %v1_c6c0
  store i32 %v5_c6c4, i32* %ip.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @lr, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 28
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 -1, i32* %v3_c6c8, align 4
  store i32 %v4_c6cc, i32* %r2.global-to-local, align 4
  %v0_c6d0 = load i32, i32* @lr, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 20
  store i32 %v1_c6d0, i32* %r4.global-to-local, align 4
  %v0_c6d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d4 = sdiv i32 %v0_c6d4, 256
  store i32 %v3_c6d4, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  %v1_c6d8 = trunc i32 %v0_c6d8 to i8
  %v3_c6d8 = add i32 %v0_c6d0, 4
  %v4_c6d8 = inttoptr i32 %v3_c6d8 to i8*
  store i8 %v1_c6d8, i8* %v4_c6d8, align 1
  %v0_c6dc = load i32, i32* @r6, align 4
  %v1_c6dc = trunc i32 %v0_c6dc to i8
  %v2_c6dc = load i32, i32* @lr, align 4
  %v3_c6dc = add i32 %v2_c6dc, 20
  %v4_c6dc = inttoptr i32 %v3_c6dc to i8*
  store i8 %v1_c6dc, i8* %v4_c6dc, align 1
  %v0_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6e0 = trunc i32 %v0_c6e0 to i8
  %v2_c6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e0 = add i32 %v2_c6e0, 5
  %v4_c6e0 = inttoptr i32 %v3_c6e0 to i8*
  store i8 %v1_c6e0, i8* %v4_c6e0, align 1
  %v0_c6e4 = load i32, i32* @r5, align 4
  %v1_c6e4 = trunc i32 %v0_c6e4 to i8
  %v2_c6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e4 = add i32 %v2_c6e4, 2
  %v4_c6e4 = inttoptr i32 %v3_c6e4 to i8*
  store i8 %v1_c6e4, i8* %v4_c6e4, align 1
  %v0_c6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6e8 = trunc i32 %v0_c6e8 to i8
  %v2_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 1
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 %v1_c6e8, i8* %v4_c6e8, align 1
  store i32 %v4_c6ec, i32* %r3.global-to-local, align 4
  %v0_c6f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c6f0 = trunc i32 %v0_c6f0 to i8
  %v2_c6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f0 = add i32 %v2_c6f0, 4
  %v4_c6f0 = inttoptr i32 %v3_c6f0 to i8*
  store i8 %v1_c6f0, i8* %v4_c6f0, align 1
  %v0_c6f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6f4 = trunc i32 %v0_c6f4 to i8
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 3
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i8*
  store i8 %v1_c6f4, i8* %v4_c6f4, align 1
  %v0_c6f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_c6fc = load i32, i32* @lr, align 4
  %v1_c6fc = add i32 %v0_c6fc, 32
  %v3_c700 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c700, i32* %r2.global-to-local, align 4
  %v3_c704 = call i32 @function_11518(i32 %v1_c6fc, i32 %v0_c6f8, i32 %v3_c700)
  %v3_c708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c708, i32* %r3.global-to-local, align 4
  %v1_c70c = add i32 %v3_c708, 1
  store i32 %v1_c70c, i32* @r4, align 4
  %v1_c710 = load i32, i32* %sb.global-to-local, align 4
  %v9_c710 = icmp eq i32 %v1_c70c, %v1_c710
  store i1 %v9_c710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c70c, i32* %stack_var_-40, align 4
  %v5_c718 = icmp slt i32 %v1_c70c, %v1_c710
  br i1 %v5_c718, label %dec_label_pc_c5f0, label %dec_label_pc_c71c

dec_label_pc_c71c:                                ; preds = %bb57, %dec_label_pc_c57c
  %v0_c71c = phi i32 [ %v0_c598, %dec_label_pc_c57c ], [ %v1_c710, %bb57 ]
  %v2_c71c = icmp eq i32 %v0_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c764 = icmp eq i32 %v3_c58c, 65535
  br label %dec_label_pc_c724.outer

dec_label_pc_c724.outer:                          ; preds = %dec_label_pc_c834, %dec_label_pc_c71c
  %v1_c724.ph.in = phi i32 [ %v1_c828, %dec_label_pc_c834 ], [ %v0_c71c, %dec_label_pc_c71c ]
  %v0_c724.ph = phi i1 [ %v2_c834, %dec_label_pc_c834 ], [ %v2_c71c, %dec_label_pc_c71c ]
  %v1_c724.ph = icmp slt i32 %v1_c724.ph.in, 0
  %v4_c724 = or i1 %v1_c724.ph, %v0_c724.ph
  br label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c724.outer, %dec_label_pc_c724
  br i1 %v4_c724, label %dec_label_pc_c724, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c724
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c728
  %v1_c748 = phi i32 [ %v1_c824, %dec_label_pc_c784 ], [ 0, %dec_label_pc_c728 ]
  %v5_c738 = mul i32 %v1_c748, 24
  %v1_c73c = load i32, i32* @sl, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c738
  store i32 %v2_c73c, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  store i32 %v4_c744, i32* %r2.global-to-local, align 4
  %v4_c748 = mul i32 %v1_c748, 4
  %v5_c748 = add i32 %v4_c748, %v2_c464
  %v6_c748 = inttoptr i32 %v5_c748 to i32*
  %v7_c748 = load i32, i32* %v6_c748, align 4
  store i32 %v7_c748, i32* @r5, align 4
  %v7_c750 = icmp eq i8 %v3_c744, 31
  store i1 %v7_c750, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_c758 = add i32 %v7_c748, 20
  store i32 %v1_c758, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_c744, 32
  br i1 %tmp61, label %dec_label_pc_c840, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c734
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  store i1 %v3_c764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c764, label %dec_label_pc_c8a8, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c840.dec_label_pc_c76c_crit_edge, %dec_label_pc_c760
  %v1_c770 = phi i32 [ %v1_c770.pre, %dec_label_pc_c840.dec_label_pc_c76c_crit_edge ], [ 65535, %dec_label_pc_c760 ]
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v9_c770 = icmp eq i32 %v3_c590, %v1_c770
  store i1 %v9_c770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c770, label %dec_label_pc_c8c4, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge, %dec_label_pc_c76c
  %v1_c77c = phi i32 [ %v1_c77c.pre, %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge ], [ %v1_c770, %dec_label_pc_c76c ]
  %v9_c77c = icmp eq i32 %v3_c594, %v1_c77c
  store i1 %v9_c77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c77c, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778, %dec_label_pc_c8e0
  %v0_c788 = load i32, i32* %r8.global-to-local, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v2_c788 = load i32, i32* @r5, align 4
  %v3_c788 = add i32 %v2_c788, 10
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* %r8.global-to-local, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 11
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v0_c790 = load i32, i32* @r5, align 4
  store i32 %v0_c790, i32* @r0, align 4
  %v2_c794 = call i32 @function_d0b8(i32 %v0_c790, i32 20)
  %v3_c794 = trunc i32 %v2_c794 to i8
  %v4_c798 = sdiv i32 %v2_c794, 256
  store i32 %v4_c798, i32* %r3.global-to-local, align 4
  %v1_c79c = trunc i32 %v4_c798 to i8
  %v2_c79c = load i32, i32* @r5, align 4
  %v3_c79c = add i32 %v2_c79c, 11
  %v4_c79c = inttoptr i32 %v3_c79c to i8*
  store i8 %v1_c79c, i8* %v4_c79c, align 1
  %v3_c7a0 = load i32, i32* @r5, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 10
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i8*
  store i8 %v3_c794, i8* %v5_c7a0, align 1
  %v0_c7a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a4 = trunc i32 %v0_c7a4 to i8
  %v2_c7a4 = load i32, i32* @r6, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 6
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v0_c7a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a8 = trunc i32 %v0_c7a8 to i8
  %v2_c7a8 = load i32, i32* @r6, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 7
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v0_c7ac = load i32, i32* @r5, align 4
  %v1_c7ac = add i32 %v0_c7ac, 24
  %v2_c7ac = inttoptr i32 %v1_c7ac to i8*
  %v3_c7ac = load i8, i8* %v2_c7ac, align 1
  %v4_c7ac = zext i8 %v3_c7ac to i32
  store i32 %v4_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v0_c7ac, 25
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul nuw nsw i32 %v4_c7b0, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7ac
  store i32 %v5_c7b4, i32* %r2.global-to-local, align 4
  %v3_c7b8 = load i32, i32* %stack_var_-44, align 4
  %v0_c7bc = load i32, i32* @r6, align 4
  store i32 %v0_c7bc, i32* @r1, align 4
  %v1_c7c0 = add i32 %v3_c7b8, 12
  store i32 %v1_c7c0, i32* %r3.global-to-local, align 4
  %v4_c7c8 = call i32 @function_d114(i32 %v0_c7ac, i32 %v0_c7bc, i32 %v5_c7b4, i32 %v1_c7c0)
  %v5_c7c8 = trunc i32 %v4_c7c8 to i8
  %v4_c7cc24 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v4_c7cc24 to i8
  %v2_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = add i32 %v2_c7d0, 7
  %v4_c7d0 = inttoptr i32 %v3_c7d0 to i8*
  store i8 %v1_c7d0, i8* %v4_c7d0, align 1
  %v3_c7d4 = load i32, i32* @r6, align 4
  %v4_c7d4 = add i32 %v3_c7d4, 6
  %v5_c7d4 = inttoptr i32 %v4_c7d4 to i8*
  store i8 %v5_c7c8, i8* %v5_c7d4, align 1
  %v3_c7d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d8, i32* %r3.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r5, align 4
  %v1_c7dc = add i32 %v0_c7dc, 20
  %v2_c7dc = inttoptr i32 %v1_c7dc to i32*
  %v3_c7dc = load i32, i32* %v2_c7dc, align 4
  %v5_c7e4 = mul i32 %v3_c7d8, 24
  %v1_c7e8 = load i32, i32* @sl, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec = udiv i32 %v3_c7dc, 65536
  store i32 %v3_c7ec, i32* %r2.global-to-local, align 4
  %v1_c7f0 = trunc i32 %v3_c7ec to i8
  %v3_c7f0 = add i32 %v2_c7e8, 2
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_c7f425 = udiv i32 %v0_c7f4, 256
  %v3_c7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f8, i32* %r2.global-to-local, align 4
  %v1_c7fc = trunc i32 %v3_c7f425 to i8
  %v2_c7fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c7fc = add i32 %v2_c7fc, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c808 = load i32, i32* %r2.global-to-local, align 4
  %v1_c808 = add i32 %v0_c808, 32
  store i32 %v1_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c814 = load i32, i32* %ip.global-to-local, align 4
  %v6_c81c = inttoptr i32 %v0_c800 to i32*
  %v7_c81c = call i32 @function_12658(i32 %v0_c80c, i32* %v6_c81c, i32 %v1_c808, i32 16384, i32 %v0_c814, i32 16)
  %v3_c820 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c820, i32* %r3.global-to-local, align 4
  %v1_c824 = add i32 %v3_c820, 1
  %v1_c828 = load i32, i32* %sb.global-to-local, align 4
  %v9_c828 = icmp eq i32 %v1_c824, %v1_c828
  store i1 %v9_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c824, i32* %stack_var_-40, align 4
  %v5_c830 = icmp slt i32 %v1_c824, %v1_c828
  br i1 %v5_c830, label %dec_label_pc_c734, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c784
  %v2_c834 = icmp eq i32 %v1_c828, 0
  store i1 %v2_c834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c724.outer

dec_label_pc_c840:                                ; preds = %dec_label_pc_c734
  %v1_c840 = add i32 %v2_c73c, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* @r4, align 4
  %v0_c844 = call i32 @function_eb48()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v0_c854 = load i32, i32* @r4, align 4
  %v1_c858 = and i32 %v0_c854, 65280
  store i32 %v1_c858, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v0_c854, 256
  %v3_c85c = and i32 %v1_c854, 65280
  store i32 %v3_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @sl, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %ip.global-to-local, align 4
  %v1_c86c = add i32 %v2_c860, 20
  %v2_c86c = inttoptr i32 %v1_c86c to i8*
  %v3_c86c = load i8, i8* %v2_c86c, align 1
  %v4_c86c = zext i8 %v3_c86c to i32
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v0_c854)
  %v7_c878 = lshr i32 %v0_c844, %v4_c86c
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v2_c898 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  %v1_c89c = load i32, i32* %r7.global-to-local, align 4
  %v9_c89c = icmp eq i32 %v3_c58c, %v1_c89c
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c898, i32* %v3_c8a0, align 4
  br i1 %v9_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c840.dec_label_pc_c76c_crit_edge

dec_label_pc_c840.dec_label_pc_c76c_crit_edge:    ; preds = %dec_label_pc_c840
  %v1_c770.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c760
  %v0_c8a8 = call i32 @function_eb48()
  %v1_c8a8 = trunc i32 %v0_c8a8 to i8
  %v4_c8ac26 = udiv i32 %v0_c8a8, 256
  %v1_c8b0 = trunc i32 %v4_c8ac26 to i8
  %v2_c8b0 = load i32, i32* @r5, align 4
  %v3_c8b0 = add i32 %v2_c8b0, 5
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i8*
  store i8 %v1_c8b0, i8* %v4_c8b0, align 1
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v1_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8b8 = icmp eq i32 %v3_c590, %v1_c8b8
  store i1 %v9_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8bc = load i32, i32* @r5, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  %v5_c8bc = inttoptr i32 %v4_c8bc to i8*
  store i8 %v1_c8a8, i8* %v5_c8bc, align 1
  %v0_c8c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8c0, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge

dec_label_pc_c8a8.dec_label_pc_c778_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c77c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c778

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c76c
  %v0_c8c4 = call i32 @function_eb48()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8cc = sdiv i32 %v0_c8c4, 256
  store i32 %v4_c8cc, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8d0 = icmp eq i32 %v3_c594, %v1_c8d0
  store i1 %v9_c8d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d4 = load i32, i32* @r5, align 4
  %v4_c8d4 = add i32 %v3_c8d4, 20
  %v5_c8d4 = inttoptr i32 %v4_c8d4 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d4, align 1
  %v0_c8d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8d8 = trunc i32 %v0_c8d8 to i8
  %v2_c8d8 = load i32, i32* @r6, align 4
  %v3_c8d8 = add i32 %v2_c8d8, 1
  %v4_c8d8 = inttoptr i32 %v3_c8d8 to i8*
  store i8 %v1_c8d8, i8* %v4_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778
  %v0_c8e0 = call i32 @function_eb48()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r6, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 3
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r6, align 4
  %v4_c8ec = add i32 %v3_c8ec, 2
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  br label %dec_label_pc_c784

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c554
  %v0_c8f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c8f8 = call i32 @function_11da0(i32 %v0_c8f4)
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c444, %dec_label_pc_c8f4
  %v29_c900 = phi i32 [ %v3_c544, %dec_label_pc_c444 ], [ %v1_c8f8, %dec_label_pc_c8f4 ]
  store i32 %v3_c444, i32* %r4.global-to-local, align 4
  store i32 %v12_c444, i32* %r7.global-to-local, align 4
  ret i32 %v29_c900

; uselistorder directives
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v2_c898, { 1, 0 }
  uselistorder i32 %v0_c854, { 1, 0, 2 }
  uselistorder i1 %v2_c834, { 1, 0 }
  uselistorder i32 %v1_c828, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c824, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c7ec, { 1, 0 }
  uselistorder i32 %v4_c798, { 1, 0 }
  uselistorder i1 %v3_c764, { 1, 0 }
  uselistorder i32 %v1_c70c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v1_c5b4, { 1, 0 }
  uselistorder i32 %v0_c584, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c57c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c574, { 1, 0 }
  uselistorder i1 %v7_c548, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c4e4, { 1, 2, 0 }
  uselistorder i32 %v6_c4b8, { 2, 1, 3, 0 }
  uselistorder i32 %v6_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 6, 2, 0, 3, 1, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
  uselistorder label %dec_label_pc_c784, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c724, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c908:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_c908 = load i32, i32* @r4, align 4
  %v15_c908 = load i32, i32* @r8, align 4
  %v18_c908 = load i32, i32* @sb, align 4
  %v21_c908 = load i32, i32* @sl, align 4
  %v24_c908 = load i32, i32* @fp, align 4
  %v1_c914 = urem i32 %arg1, 256
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c920 = urem i32 %arg3, 256
  store i32 %v1_c920, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c92c = call i32 @function_129a8(i32 %v1_c914, i32 4)
  %v0_c930 = load i32, i32* @r5, align 4
  store i32 %v0_c930, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c93c = load i32, i32* @r4, align 4
  store i32 %v0_c93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c944 = inttoptr i32 %v0_c930 to i32*
  %v6_c944 = call i32 @function_85e0(i32 %v0_c93c, i32* %v5_c944, i32 2, i32 0, i32 %v2_c92c)
  %v1_c950 = urem i32 %v6_c944, 256
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c95c = load i32, i32* @r4, align 4
  store i32 %v0_c95c, i32* %r0.global-to-local, align 4
  %v0_c960 = load i32, i32* @r5, align 4
  store i32 %v0_c960, i32* %r1.global-to-local, align 4
  %v5_c964 = trunc i32 %v6_c944 to i8
  %v6_c968 = inttoptr i32 %v0_c960 to i32*
  %v7_c968 = call i32 @function_85e0(i32 %v0_c95c, i32* %v6_c968, i32 3, i32 65535, i32 %v6_c944)
  %v0_c96c = load i32, i32* @r5, align 4
  store i32 %v0_c96c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r4, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c980 = inttoptr i32 %v0_c96c to i32*
  %v6_c980 = call i32 @function_85e0(i32 %v0_c978, i32* %v5_c980, i32 4, i32 64, i32 %v7_c968)
  %v1_c988 = urem i32 %v6_c980, 256
  store i32 %v1_c988, i32* %ip.global-to-local, align 4
  %v0_c98c = load i32, i32* @r5, align 4
  store i32 %v0_c98c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c998 = load i32, i32* @r4, align 4
  store i32 %v0_c998, i32* %r0.global-to-local, align 4
  %sext35 = mul i32 %v6_c980, 16777216
  %v5_c9a0 = sdiv i32 %sext35, 16777216
  %v6_c9a0 = inttoptr i32 %v0_c98c to i32*
  %v7_c9a0 = call i32 @function_85e0(i32 %v0_c998, i32* %v6_c9a0, i32 5, i32 0, i32 %v5_c9a0)
  %v1_c9ac = urem i32 %v7_c9a0, 256
  store i32 %v1_c9ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9b8 = load i32, i32* @r4, align 4
  store i32 %v0_c9b8, i32* %r0.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v6_c9c4 = call i32 @function_85e0(i32 %v0_c9b8, i32* %v5_c9c4, i32 6, i32 65535, i32 %v1_c9ac)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_c9c4, i32* %fp.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  store i32 %v0_c9d8, i32* %r0.global-to-local, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_85e0(i32 %v0_c9d8, i32* %v5_c9dc, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v0_c9e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_c9dc, i32* %sb.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r4, align 4
  store i32 %v0_c9f4, i32* %r0.global-to-local, align 4
  %v5_c9f8 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f8 = call i32 @function_85e0(i32 %v0_c9f4, i32* %v5_c9f8, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c9fc = load i32, i32* @r5, align 4
  store i32 %v0_c9fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_c9f8, i32* @sl, align 4
  %v0_ca0c = load i32, i32* @r4, align 4
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v5_ca10 = inttoptr i32 %v0_c9fc to i32*
  %v6_ca10 = call i32 @function_85e0(i32 %v0_ca0c, i32* %v5_ca10, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r5, align 4
  store i32 %v0_ca1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ca10, i32* %r8.global-to-local, align 4
  %v0_ca24 = load i32, i32* @r4, align 4
  store i32 %v0_ca24, i32* %r0.global-to-local, align 4
  %v4_ca28 = inttoptr i32 %v0_ca1c to i32*
  %v5_ca28 = call i32 @function_81cc(i32 %v0_ca24, i32* %v4_ca28, i32 8, i32 0)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca34 = call i32 @function_10dd4(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_ca40 = call i32 @function_10cf0(i32 26, i32* null)
  store i32 %v3_ca40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_11ecc(i8* %v2_ca48, i32 0)
  store i32 %v3_ca48, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca54 = call i32 @function_10d1c(i32 26)
  store i32 %v1_ca54, i32* %r0.global-to-local, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  %v1_ca58 = icmp slt i32 %v0_ca58, 0
  %v2_ca58 = icmp eq i32 %v0_ca58, 0
  store i1 %v2_ca58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ca58, label %dec_label_pc_d024, label %dec_label_pc_ca60

dec_label_pc_ca60:                                ; preds = %dec_label_pc_c908
  %v2_ca64 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ca64, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r1.global-to-local, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca74 = call i32 @function_11f68(i32 %v0_ca58, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r4, align 4
  store i32 %v0_ca7c, i32* %r0.global-to-local, align 4
  %v1_ca80 = call i32 @function_11da0(i32 %v0_ca7c)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ca88 = call i32 @function_10dd4(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_ca94 = call i32 @function_10cf0(i32 27, i32* null)
  %v0_ca98 = load i32, i32* @r5, align 4
  store i32 %v0_ca98, i32* @r1, align 4
  store i32 %v3_ca94, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r0.global-to-local, align 4
  %v3_caa4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_caa4 = call i32 @function_117f0(i8* %v3_caa4, i32 %v0_ca98, i32 %v3_ca94)
  store i32 %v4_caa4, i32* @r4, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_cab0 = call i32 @function_10d1c(i32 27)
  store i32 %v1_cab0, i32* %r0.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r4, align 4
  %v7_cab4 = icmp eq i32 %v0_cab4, -1
  store i1 %v7_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cab4, label %dec_label_pc_d024, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_ca60
  %v0_cabc = load i32, i32* @r5, align 4
  %v9_cabc = icmp eq i32 %v0_cabc, %v0_cab4
  store i1 %v9_cabc, i1* %cpsr_z.global-to-local, align 1
  %v7_cac0 = icmp sgt i32 %v0_cabc, %v0_cab4
  br i1 %v7_cac0, label %dec_label_pc_cac4, label %dec_label_pc_d024

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  store i32 %v0_cabc, i32* %r3.global-to-local, align 4
  store i32 %v0_cab4, i32* %r2.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r6, align 4
  %v2_cad4 = add i32 %v0_cad4, %v0_cab4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_cadc = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_cadc, i32* @r7, align 4
  %v1_cb0c = add i32 %v0_cabc, -1
  br label %dec_label_pc_cb04

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cb2c, %bb138
  %v9_cae8 = icmp eq i32 %v0_caf4, %v1_cb0c
  store i1 %v9_cae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cae8, label %dec_label_pc_cb38, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_cae8, %bb
  %v0_cb2842 = phi i32 [ %v0_cb28, %dec_label_pc_cb1c ], [ %v0_cb2843, %dec_label_pc_cae8 ], [ %v0_cb28, %bb ]
  %v0_cb0838 = phi i32 [ 0, %dec_label_pc_cb1c ], [ %v0_cb0839, %dec_label_pc_cae8 ], [ 0, %bb ]
  store i32 %v0_cabc, i32* %r0.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 1
  store i32 %v1_caf4, i32* %r2.global-to-local, align 4
  %v9_caf8 = icmp eq i32 %v0_cabc, %v1_caf4
  store i1 %v9_caf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cafc = add i32 %v0_cafc, 1
  store i32 %v1_cafc, i32* @r7, align 4
  br i1 %v9_caf8, label %dec_label_pc_d024, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cac4
  %v0_cafc = phi i32 [ %v1_cafc, %dec_label_pc_caf0 ], [ %v2_cadc, %dec_label_pc_cac4 ]
  %v0_caf4 = phi i32 [ %v1_caf4, %dec_label_pc_caf0 ], [ %v0_cab4, %dec_label_pc_cac4 ]
  %v0_cb28 = phi i32 [ %v0_cb2842, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb08 = phi i32 [ %v0_cb0838, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb10 = phi i32 [ %v1_cb10, %dec_label_pc_caf0 ], [ %v2_cad4, %dec_label_pc_cac4 ]
  %v1_cb04 = inttoptr i32 %v0_cb10 to i8*
  %v2_cb04 = load i8, i8* %v1_cb04, align 1
  %v3_cb04 = zext i8 %v2_cb04 to i32
  store i32 %v3_cb04, i32* %r3.global-to-local, align 4
  %v2_cb08 = icmp eq i32 %v0_cb08, 0
  store i1 %v2_cb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %ip.global-to-local, align 4
  %v1_cb10 = add i32 %v0_cb10, 1
  store i32 %v1_cb10, i32* %r1.global-to-local, align 4
  %v1_cb14 = add nsw i32 %v3_cb04, -48
  store i32 %v1_cb14, i32* %r0.global-to-local, align 4
  br i1 %v2_cb08, label %dec_label_pc_cb1c, label %dec_label_pc_cb2c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb04
  %v7_cb1c = icmp eq i8 %v2_cb04, 9
  store i1 %v7_cb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb1c, label %dec_label_pc_caf0, label %bb

bb:                                               ; preds = %dec_label_pc_cb1c
  %v8_cb20 = icmp eq i8 %v2_cb04, 32
  store i1 %v8_cb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cb20, label %dec_label_pc_caf0, label %dec_label_pc_cb28

dec_label_pc_cb28:                                ; preds = %bb
  %v1_cb28 = add i32 %v0_cb28, 1
  store i32 %v1_cb28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_cb2c

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_cb04, %dec_label_pc_cb28
  %v0_cb2843 = phi i32 [ %v0_cb28, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v0_cb0839 = phi i32 [ %v0_cb08, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v7_cb2c = icmp eq i8 %v2_cb04, 46
  store i1 %v7_cb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb2c, label %dec_label_pc_cae8, label %bb138

bb138:                                            ; preds = %dec_label_pc_cb2c
  %v8_cb30 = icmp eq i32 %v1_cb14, 9
  store i1 %v8_cb30, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cb14, 10
  br i1 %tmp, label %dec_label_pc_cae8, label %dec_label_pc_cb38

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cae8, %bb138
  %v0_caf4.lcssa = phi i32 [ %v1_cb0c, %dec_label_pc_cae8 ], [ %v0_caf4, %bb138 ]
  %v2_cb3c = sub i32 %v0_caf4.lcssa, %v0_cab4
  store i32 %v2_cb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 %v2_cadc, i32* %r0.global-to-local, align 4
  %v3_cb48 = call i32 @function_11518(i32 %v2_cadc, i32 %v2_cad4, i32 %v2_cb3c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cadc, i32* @r0, align 4
  %v2_cb58 = load i32, i32* @r7, align 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i8*
  store i8 0, i8* %v3_cb58, align 1
  %v1_cb5c = call i32 @function_1249c(i32 %v2_cadc)
  store i32 %v1_cb5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_cb6419:                              ; preds = %dec_label_pc_d024
  unreachable

dec_label_pc_cb64:                                ; preds = %dec_label_pc_d09c, %dec_label_pc_d08c, %dec_label_pc_d080, %dec_label_pc_d06c, %dec_label_pc_cb38
  %v29_d06874 = phi i32 [ %v1_d028, %dec_label_pc_d09c ], [ %v1_d028, %dec_label_pc_d08c ], [ %v1_d028, %dec_label_pc_d080 ], [ %v1_d028, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_d09c ], [ 104859200, %dec_label_pc_d08c ], [ 707416650, %dec_label_pc_d080 ], [ 134744072, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_cb68 = icmp eq i32 %v5_ca28, 0
  store i1 %v2_cb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cb68, label %dec_label_pc_d060, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb64
  store i32 %v5_ca28, i32* %r0.global-to-local, align 4
  %v1_cb74 = inttoptr i32 %v5_ca28 to i8*
  %v2_cb74 = call i32 @function_1149c(i8* %v1_cb74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb88 = call i32 @function_126bc(i32 2, i32 3, i32 17)
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v7_cb8c = icmp eq i32 %v3_cb88, -1
  store i1 %v7_cb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb8c, label %dec_label_pc_d060, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb70
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cba4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cba4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cbb8 = call i32 @function_1268c(i32 %v3_cb88, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_cbb8, i32* %r0.global-to-local, align 4
  %v7_cbbc = icmp eq i32 %v6_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbbc, label %dec_label_pc_d058, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cb98
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  %v3_cbcc = mul i32 %v7_c968, 65536
  store i32 %v3_cbcc, i32* %lr.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v3_cbd0 = mul i32 %v0_cbd0, 65536
  store i32 %v3_cbd0, i32* %sl.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r8.global-to-local, align 4
  %v0_cbd8 = load i32, i32* %fp.global-to-local, align 4
  %v0_cbdc = load i32, i32* %sb.global-to-local, align 4
  %v3_cbdc = mul i32 %v0_cbdc, 65536
  store i32 %v3_cbdc, i32* %sb.global-to-local, align 4
  %v5_cbe0 = trunc i32 %v0_cbd4 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cbe8 = urem i32 %v7_c968, 65536
  store i32 %v3_cbe8, i32* %r2.global-to-local, align 4
  %v3_cbec = urem i32 %v0_cbd8, 65536
  store i32 %v3_cbec, i32* %r3.global-to-local, align 4
  %v3_cbf0 = urem i32 %v0_cbdc, 65536
  store i32 %v3_cbf0, i32* %r4.global-to-local, align 4
  %v3_cbf4 = urem i32 %v0_cbd0, 65536
  store i32 %v3_cbf4, i32* %r8.global-to-local, align 4
  %v2_cbf8 = icmp eq i32 %v1_c914, 0
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_cbf8, label %dec_label_pc_d048, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cbc4
  %v4_cc20 = sext i8 %v5_cbe0 to i32
  %v2_cc24 = add i32 %v4_cc20, %v2_cb74
  store i32 %v2_cc24, i32* @fp, align 4
  %v3_cc28 = mul i32 %v2_cc24, 65536
  %v1_cc2c = add i32 %v3_cc28, 1769472
  store i32 %v1_cc2c, i32* @r6, align 4
  %v1_cc30 = add i32 %v3_cc28, 3080192
  %v1_cc44 = urem i32 %v0_cbd0, 256
  %v3_cc54 = udiv i32 %v1_cc2c, 256
  %v1_cc58 = urem i32 %v7_c968, 256
  %v1_cc5c = and i32 %v3_cc54, 65280
  %v1_cc60 = urem i32 %v0_cbdc, 256
  %v3_cc64 = mul nuw nsw i32 %v1_cc44, 256
  %v1_cc6c = urem i32 %v0_cbd8, 256
  %v3_cc70 = mul nuw nsw i32 %v1_cc60, 256
  %tmp139 = udiv i32 %v0_cbd0, 256
  %v4_cc74 = urem i32 %tmp139, 256
  %v5_cc74 = or i32 %v4_cc74, %v3_cc64
  store i32 %v5_cc74, i32* %r8.global-to-local, align 4
  %v4_cc78 = udiv i32 %v1_cc2c, 16777216
  %v5_cc78 = or i32 %v1_cc5c, %v4_cc78
  store i32 %v5_cc78, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_cbd8, 256
  %v3_cc84 = urem i32 %tmp140, 256
  %v4_cc88 = sdiv i32 %v1_cc30, 16777216
  %tmp141 = udiv i32 %v7_c968, 256
  %v4_cc90 = mul nuw nsw i32 %v1_cc6c, 256
  %v5_cc90 = or i32 %v4_cc90, %v3_cc84
  store i32 %v5_cc90, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_cbdc, 256
  %v4_cc94 = urem i32 %tmp142, 256
  %v5_cc94 = or i32 %v4_cc94, %v3_cc70
  store i32 %v5_cc94, i32* %sb.global-to-local, align 4
  store i32 %v1_cc58, i32* %r0.global-to-local, align 4
  %v1_cca0 = add i32 %v2_cb74, 1
  store i32 %v1_cca0, i32* @r7, align 4
  %v3_cca4 = ashr i32 %v1_cc30, 31
  store i32 %v3_cca4, i32* @lr, align 4
  store i32 %v1_cc6c, i32* %r1.global-to-local, align 4
  store i32 %v1_cc60, i32* %r2.global-to-local, align 4
  %v3_ccb075 = udiv i32 %v1_cc5c, 256
  store i32 %v3_ccb075, i32* %r3.global-to-local, align 4
  store i32 %v1_cc44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext13 = mul i32 %tmp141, 16777216
  %v4_cd40 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %v7_c968, 16777216
  %v4_cd44 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v1_cc2c, 256
  %v4_cd74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_cbdc, 16777216
  %v4_cd78 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_cbd8, 16777216
  %v4_cd9c = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_cbd0, 16777216
  %v4_cda8 = sdiv i32 %sext18, 16777216
  %v1_cd24 = trunc i32 %v4_cc88 to i8
  %extract.t = trunc i32 %v3_cca4 to i8
  br label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_cc1c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ccdc = call i32 @function_129a8(i32 600, i32 1)
  store i32 %v2_ccdc, i32* %r0.global-to-local, align 4
  store i32 %v2_c92c, i32* %lr.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cce4, i32* %r3.global-to-local, align 4
  %v2_cce8 = load i32, i32* @r4, align 4
  %v5_cce8 = mul i32 %v2_cce8, 4
  %v6_cce8 = add i32 %v5_cce8, %v2_c92c
  %v7_cce8 = inttoptr i32 %v6_cce8 to i32*
  store i32 %v2_ccdc, i32* %v7_cce8, align 4
  %v0_ccec = load i32, i32* %lr.global-to-local, align 4
  %v1_ccec = load i32, i32* %r3.global-to-local, align 4
  %v4_ccec = mul i32 %v1_ccec, 4
  %v5_ccec = add i32 %v4_ccec, %v0_ccec
  %v6_ccec = inttoptr i32 %v5_ccec to i32*
  %v7_ccec = load i32, i32* %v6_ccec, align 4
  store i32 %v7_ccec, i32* %r1.global-to-local, align 4
  %v1_ccf0 = inttoptr i32 %v7_ccec to i8*
  %v2_ccf0 = load i8, i8* %v1_ccf0, align 1
  %tmp154 = urem i8 %v2_ccf0, 16
  %v1_ccf4 = zext i8 %tmp154 to i32
  %v1_ccf8 = or i32 %v1_ccf4, 64
  store i32 %v1_ccf8, i32* %r2.global-to-local, align 4
  %v1_ccfc = trunc i32 %v1_ccf8 to i8
  store i8 %v1_ccfc, i8* %v1_ccf0, align 1
  %v0_cd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd00 = inttoptr i32 %v0_cd00 to i8*
  %v2_cd00 = load i8, i8* %v1_cd00, align 1
  %v1_cd04 = and i8 %v2_cd00, -16
  %v1_cd08 = or i8 %v1_cd04, 5
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  store i8 %v1_cd08, i8* %v1_cd00, align 1
  store i32 %v6_c944, i32* %r2.global-to-local, align 4
  %v2_cd18 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd18 = add i32 %v2_cd18, 1
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v5_c964, i8* %v4_cd18, align 1
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cd20 = load i32, i32* %r0.global-to-local, align 4
  %v2_cd20 = icmp eq i32 %v0_cd20, 0
  store i1 %v2_cd20, i1* %cpsr_z.global-to-local, align 1
  %v2_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i8*
  store i8 %v1_cd24, i8* %v4_cd24, align 1
  store i32 %v3_cca4, i32* %r4.global-to-local, align 4
  store i32 %v5_c9a0, i32* %r0.global-to-local, align 4
  %v0_cd30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd30, label %.thread20, label %bb143

bb143:                                            ; preds = %dec_label_pc_ccd4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cd34 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd34 = add i32 %v3_cd34, 6
  %v5_cd34 = inttoptr i32 %v4_cd34 to i8*
  store i8 64, i8* %v5_cd34, align 1
  %v0_cd3c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_cd3c.pre to i8
  br label %.thread20

.thread20:                                        ; preds = %dec_label_pc_ccd4, %bb143
  %v0_cd3c.off0 = phi i8 [ %extract.t, %dec_label_pc_ccd4 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_cd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd3c = add i32 %v2_cd3c, 3
  %v4_cd3c = inttoptr i32 %v3_cd3c to i8*
  store i8 %v0_cd3c.off0, i8* %v4_cd3c, align 1
  store i32 %v4_cd40, i32* %ip.global-to-local, align 4
  store i32 %v4_cd44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce00.50 to i32), i32* %r4.global-to-local, align 4
  %v0_cd4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cd4c = trunc i32 %v0_cd4c to i8
  %v2_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd4c = add i32 %v2_cd4c, 8
  %v4_cd4c = inttoptr i32 %v3_cd4c to i8*
  store i8 %v1_cd4c, i8* %v4_cd4c, align 1
  %v0_cd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v0_cd50 to i8
  %v2_cd50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd50 = add i32 %v2_cd50, 9
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  %v0_cd54 = load i32, i32* %lr.global-to-local, align 4
  %v1_cd54 = trunc i32 %v0_cd54 to i8
  %v2_cd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd54 = add i32 %v2_cd54, 5
  %v4_cd54 = inttoptr i32 %v3_cd54 to i8*
  store i8 %v1_cd54, i8* %v4_cd54, align 1
  %v0_cd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd58, label %.thread21, label %bb144

.thread21:                                        ; preds = %.thread20
  %v2_cd5c22 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_cd5c22, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cd5c = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_cd5c, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  %v3_cd64 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd64 = add i32 %v3_cd64, 7
  %v5_cd64 = inttoptr i32 %v4_cd64 to i8*
  store i8 0, i8* %v5_cd64, align 1
  %v0_cd6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_cd70.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread21, %bb144
  %v0_cd70 = phi i32 [ %v2_cd5c22, %.thread21 ], [ %v0_cd70.pre, %bb144 ]
  %v0_cd6c = phi i32 [ %v4_cc20, %.thread21 ], [ %v0_cd6c.pre, %bb144 ]
  %v0_cd68 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd68 = add i32 %v0_cd6c, 41
  %v2_cd6c = add i32 %v1_cd68, %v0_cd68
  store i32 %v2_cd6c, i32* %r4.global-to-local, align 4
  %v2_cd70 = add i32 %v0_cd68, 12
  %v3_cd70 = inttoptr i32 %v2_cd70 to i32*
  store i32 %v0_cd70, i32* %v3_cd70, align 4
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  %v0_cd7c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd7c = add i32 %v0_cd7c, 20
  store i32 %v1_cd7c, i32* %r0.global-to-local, align 4
  %v0_cd80 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v3_cd80 = add i32 %v0_cd7c, 4
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v1_cd80, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd84 = add i32 %v2_cd84, 5
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  %v0_cd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd88 = trunc i32 %v0_cd88 to i8
  %v2_cd88 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd88 = add i32 %v2_cd88, 3
  %v4_cd88 = inttoptr i32 %v3_cd88 to i8*
  store i8 %v1_cd88, i8* %v4_cd88, align 1
  %v0_cd8c = load i32, i32* %sb.global-to-local, align 4
  %v1_cd8c = trunc i32 %v0_cd8c to i8
  %v2_cd8c = load i32, i32* %r0.global-to-local, align 4
  %v3_cd8c = add i32 %v2_cd8c, 2
  %v4_cd8c = inttoptr i32 %v3_cd8c to i8*
  store i8 %v1_cd8c, i8* %v4_cd8c, align 1
  %v0_cd90 = load i32, i32* %sl.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd90 = add i32 %v2_cd90, 4
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i32, i32* @r5, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 20
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v4_cd9c, i32* %r2.global-to-local, align 4
  %v1_cda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cda0 = add i32 %v1_cda0, 16
  %v3_cda0 = inttoptr i32 %v2_cda0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_cda0, align 4
  %v0_cda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cda4 = trunc i32 %v0_cda4 to i8
  %v2_cda4 = load i32, i32* %r0.global-to-local, align 4
  %v3_cda4 = add i32 %v2_cda4, 1
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v4_cda8, i32* %lr.global-to-local, align 4
  store i32 %v4_cc20, i32* %r0.global-to-local, align 4
  %v0_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 28
  store i32 %v1_cdb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cdbc = load i32, i32* %r8.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v4_cdbc = inttoptr i32 %v1_cdb0 to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc0 = trunc i32 %v0_cdc0 to i8
  %v2_cdc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  %v0_cdc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  %v2_cdc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 1
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i8*
  store i8 %v1_cdc4, i8* %v4_cdc4, align 1
  %v0_cdc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v2_cdc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, 2
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* %ip.global-to-local, align 4
  %v3_cdcc = add i32 %v2_cdcc, 3
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i32, i32* @r6, align 4
  %v1_cdd0 = trunc i32 %v0_cdd0 to i8
  %v2_cdd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdd0 = add i32 %v2_cdd0, 4
  %v4_cdd0 = inttoptr i32 %v3_cdd0 to i8*
  store i8 %v1_cdd0, i8* %v4_cdd0, align 1
  %v0_cdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v2_cdd4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdd4 = add i32 %v2_cdd4, 40
  %v4_cdd4 = inttoptr i32 %v3_cdd4 to i8*
  store i8 %v1_cdd4, i8* %v4_cdd4, align 1
  store i32 %v5_ca28, i32* %r1.global-to-local, align 4
  %v0_cddc = load i32, i32* @r7, align 4
  store i32 %v0_cddc, i32* %r2.global-to-local, align 4
  %v0_cde0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde0 = add i32 %v0_cde0, 1
  store i32 %v1_cde0, i32* %r0.global-to-local, align 4
  %v3_cde4 = call i32 @function_11518(i32 %v1_cde0, i32 %v5_ca28, i32 %v0_cddc)
  store i32 %v3_cde4, i32* %r0.global-to-local, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v1_cdec = load i32, i32* @r6, align 4
  %v9_cdec = icmp eq i32 %v2_cb74, %v1_cdec
  store i1 %v9_cdec, i1* %cpsr_z.global-to-local, align 1
  %v7_cdf0 = icmp sgt i32 %v2_cb74, %v1_cdec
  store i32 %v1_cdec, i32* %lr.global-to-local, align 4
  %v0_ce00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ce00, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_cdec to i8
  br i1 %v7_cdf0, label %dec_label_pc_cdfc, label %dec_label_pc_ce3c

dec_label_pc_cdfc:                                ; preds = %bb145
  store i32 %v1_cdec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ce08

dec_label_pc_ce08:                                ; preds = %bb148, %dec_label_pc_cdfc
  %v0_ce2485151 = phi i32 [ %v0_ce2485152, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce1832 = phi i32 [ %v1_ce2891, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce14.off0 = phi i8 [ %v1_ce1456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_cdfc ]
  %v0_ce1831 = phi i32 [ %v0_ce18315488, %bb148 ], [ %v0_ce00, %dec_label_pc_cdfc ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce1832, %v5_ca28
  %v3_ce0c = inttoptr i32 %v2_ce0c to i8*
  %v4_ce0c = load i8, i8* %v3_ce0c, align 1
  %v6_ce0c = zext i8 %v4_ce0c to i32
  store i32 %v6_ce0c, i32* %r3.global-to-local, align 4
  %v7_ce10 = icmp eq i8 %v4_ce0c, 46
  store i1 %v7_ce10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce10, label %bb146, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_ce08
  %v2_ce1833 = add i32 %v1_ce1832, %v0_ce1831
  store i32 %v2_ce1833, i32* %r0.global-to-local, align 4
  br label %.thread34

bb146:                                            ; preds = %dec_label_pc_ce08
  %v3_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v4_ce14 = inttoptr i32 %v3_ce14 to i8*
  store i8 %v1_ce14.off0, i8* %v4_ce14, align 1
  %v0_ce1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce18 = add i32 %v1_ce18, %v0_ce18
  store i32 %v2_ce18, i32* %r0.global-to-local, align 4
  br i1 %v0_ce1c.pr, label %bb147, label %bb146..thread34_crit_edge

bb146..thread34_crit_edge:                        ; preds = %bb146
  %v0_ce2485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread34

bb147:                                            ; preds = %bb146
  %v2_ce1c = add i32 %v2_ce18, 1
  store i32 %v2_ce1c, i32* %r2.global-to-local, align 4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v0_ce24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce24 = add i32 %v0_ce24, 1
  store i32 %v1_ce24, i32* %ip.global-to-local, align 4
  %v1_ce28 = add i32 %v1_ce18, 1
  store i32 %v1_ce28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread34:                                        ; preds = %bb146..thread34_crit_edge, %.thread30
  %v0_ce2485 = phi i32 [ %v0_ce2485.pre, %bb146..thread34_crit_edge ], [ %v0_ce2485151, %.thread30 ]
  %v0_ce28.ph = phi i32 [ %v1_ce18, %bb146..thread34_crit_edge ], [ %v1_ce1832, %.thread30 ]
  %v0_ce183154.ph = phi i32 [ %v0_ce18, %bb146..thread34_crit_edge ], [ %v0_ce1831, %.thread30 ]
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v1_ce2486 = add i32 %v0_ce2485, 1
  store i32 %v1_ce2486, i32* %ip.global-to-local, align 4
  %v1_ce2887 = add i32 %v0_ce28.ph, 1
  store i32 %v1_ce2887, i32* %r1.global-to-local, align 4
  %v2_ce30 = urem i32 %v1_ce2486, 256
  store i32 %v2_ce30, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ce2486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread34
  %v0_ce2485152 = phi i32 [ 0, %bb147 ], [ %v2_ce30, %.thread34 ]
  %v1_ce2891 = phi i32 [ %v1_ce28, %bb147 ], [ %v1_ce2887, %.thread34 ]
  %v0_ce18315488 = phi i32 [ %v0_ce18, %bb147 ], [ %v0_ce183154.ph, %.thread34 ]
  %v1_ce1456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread34 ]
  %v9_ce34 = icmp eq i32 %v2_cb74, %v1_ce2891
  store i1 %v9_ce34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce34, label %dec_label_pc_ce3c.loopexit, label %dec_label_pc_ce08

dec_label_pc_ce3c.loopexit:                       ; preds = %bb148
  %v2_ce3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c.loopexit, %bb145
  %v2_ce3c = phi i32 [ %v2_ce3c.pre, %dec_label_pc_ce3c.loopexit ], [ %v0_ce00, %bb145 ]
  %v0_ce3c.off0 = phi i8 [ %v1_ce1456.off0, %dec_label_pc_ce3c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  store i8 %v0_ce3c.off0, i8* %v3_ce3c, align 1
  %v3_ce40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce48 = add i32 %v0_ce48, %v2_cb74
  store i32 %v2_ce48, i32* %r3.global-to-local, align 4
  %v1_ce4c = add i32 %v3_ce40, 1
  store i32 %v1_ce4c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_ce5c = icmp eq i32 %v1_c914, %v1_ce4c
  store i1 %v9_ce5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce60 = add i32 %v2_ce48, 2
  store i32 %v1_ce60, i32* %r2.global-to-local, align 4
  %v4_ce64 = inttoptr i32 %v1_ce60 to i8*
  store i8 0, i8* %v4_ce64, align 1
  %v0_ce68 = load i32, i32* @lr, align 4
  %v1_ce68 = trunc i32 %v0_ce68 to i8
  %v2_ce68 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce68 = add i32 %v2_ce68, 3
  %v4_ce68 = inttoptr i32 %v3_ce68 to i8*
  store i8 %v1_ce68, i8* %v4_ce68, align 1
  %v0_ce6c = load i32, i32* @lr, align 4
  %v1_ce6c = trunc i32 %v0_ce6c to i8
  %v2_ce6c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce6c = add i32 %v2_ce6c, 1
  %v4_ce6c = inttoptr i32 %v3_ce6c to i8*
  store i8 %v1_ce6c, i8* %v4_ce6c, align 1
  %v0_ce70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v2_ce70 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce70 = add i32 %v2_ce70, 2
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r4, align 4
  store i32 %v0_ce74, i32* %stack_var_-40, align 4
  %v8_ce78 = icmp sgt i32 %v1_c914, %v1_ce4c
  br i1 %v8_ce78, label %dec_label_pc_ccd4, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_d048
  %v4_ceec.pre-phi = phi i32 [ %v4_d04c, %dec_label_pc_d048 ], [ %v4_cc20, %dec_label_pc_ce3c ]
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cfac, %dec_label_pc_ce7c
  br i1 %v2_cbf8, label %dec_label_pc_ce88, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce88
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ce9c = load i32, i32* @fp, align 4
  %v1_ce9c = add i32 %v0_ce9c, 27
  store i32 %v1_ce9c, i32* @sb, align 4
  %v1_cea0 = add i32 %v0_ce9c, 47
  store i32 %v1_cea0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce8c
  %v1_cec8 = phi i32 [ %v1_ceb4.pre, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce8c ]
  %v1_ceb0 = phi i32 [ %v1_cf98, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 0, %dec_label_pc_ce8c ]
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  store i32 %v3_cbe8, i32* %r8.global-to-local, align 4
  %v4_ceb0 = mul i32 %v1_ceb0, 4
  %v5_ceb0 = add i32 %v4_ceb0, %v2_c92c
  %v6_ceb0 = inttoptr i32 %v5_ceb0 to i32*
  %v7_ceb0 = load i32, i32* %v6_ceb0, align 4
  store i32 %v7_ceb0, i32* @r4, align 4
  %v9_ceb4 = icmp eq i32 %v3_cbe8, %v1_cec8
  store i1 %v9_ceb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ceb8 = add i32 %v7_ceb0, 20
  store i32 %v1_ceb8, i32* @r5, align 4
  %v1_cebc = add i32 %v7_ceb0, 28
  store i32 %v1_cebc, i32* @r8, align 4
  br i1 %v9_ceb4, label %dec_label_pc_cfbc, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_cea8
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_cbec, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_cfd8, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_cbf0, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_cff4, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge, %dec_label_pc_ced0
  %v1_cee0 = phi i32 [ %v1_cee0.pre, %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge ], [ %v1_ced4, %dec_label_pc_ced0 ]
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v9_cee0 = icmp eq i32 %v3_cbf4, %v1_cee0
  store i1 %v9_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cee0, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc, %dec_label_pc_d010
  %v0_cee8 = load i32, i32* @r4, align 4
  %v1_cee8 = add i32 %v0_cee8, 41
  store i32 %v1_cee8, i32* %r0.global-to-local, align 4
  store i32 %v4_ceec.pre-phi, i32* %r1.global-to-local, align 4
  %v2_cef0 = call i32 @function_ebfc(i32 %v1_cee8, i32 %v4_ceec.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v1_cef8 = trunc i32 %v0_cef8 to i8
  %v2_cef8 = load i32, i32* @r4, align 4
  %v3_cef8 = add i32 %v2_cef8, 10
  %v4_cef8 = inttoptr i32 %v3_cef8 to i8*
  store i8 %v1_cef8, i8* %v4_cef8, align 1
  %v0_cefc = load i32, i32* @r7, align 4
  %v1_cefc = trunc i32 %v0_cefc to i8
  %v2_cefc = load i32, i32* @r4, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @r4, align 4
  store i32 %v0_cf00, i32* @r0, align 4
  %v2_cf04 = call i32 @function_d0b8(i32 %v0_cf00, i32 20)
  %v3_cf04 = trunc i32 %v2_cf04 to i8
  store i32 %v2_cf04, i32* %r0.global-to-local, align 4
  %v4_cf08 = sdiv i32 %v2_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v1_cf0c = trunc i32 %v4_cf08 to i8
  %v2_cf0c = load i32, i32* @r4, align 4
  %v3_cf0c = add i32 %v2_cf0c, 11
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v3_cf10 = load i32, i32* @r4, align 4
  %v4_cf10 = add i32 %v3_cf10, 10
  %v5_cf10 = inttoptr i32 %v4_cf10 to i8*
  store i8 %v3_cf04, i8* %v5_cf10, align 1
  %v0_cf14 = load i32, i32* @r7, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r5, align 4
  %v3_cf14 = add i32 %v2_cf14, 6
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r7, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r5, align 4
  %v3_cf18 = add i32 %v2_cf18, 7
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 24
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  store i32 %v4_cf1c, i32* %r3.global-to-local, align 4
  %v1_cf20 = add i32 %v0_cf1c, 25
  %v2_cf20 = inttoptr i32 %v1_cf20 to i8*
  %v3_cf20 = load i8, i8* %v2_cf20, align 1
  %v4_cf20 = zext i8 %v3_cf20 to i32
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v0_cf24, i32* @r1, align 4
  %v4_cf28 = mul nuw nsw i32 %v4_cf20, 256
  %v5_cf28 = or i32 %v4_cf28, %v4_cf1c
  store i32 %v5_cf28, i32* %r2.global-to-local, align 4
  store i32 %v0_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf30 = load i32, i32* @sb, align 4
  store i32 %v0_cf30, i32* %r3.global-to-local, align 4
  %v4_cf34 = call i32 @function_d114(i32 %v0_cf1c, i32 %v0_cf24, i32 %v5_cf28, i32 %v0_cf30)
  %v5_cf34 = trunc i32 %v4_cf34 to i8
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v2_cf4c = add i32 %v5_cf48, %arg2
  store i32 %v2_cf4c, i32* %lr.global-to-local, align 4
  %v4_cf50 = sdiv i32 %v4_cf34, 256
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = load i32, i32* @r5, align 4
  %v4_cf54 = add i32 %v3_cf54, 6
  %v5_cf54 = inttoptr i32 %v4_cf54 to i8*
  store i8 %v5_cf34, i8* %v5_cf54, align 1
  %v0_cf58 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* @r5, align 4
  %v3_cf58 = add i32 %v2_cf58, 7
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  %v0_cf5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf5c = load i32, i32* %lr.global-to-local, align 4
  %v2_cf5c = add i32 %v1_cf5c, 4
  %v3_cf5c = inttoptr i32 %v2_cf5c to i32*
  store i32 %v0_cf5c, i32* %v3_cf5c, align 4
  %v0_cf60 = load i32, i32* @r4, align 4
  %v1_cf60 = add i32 %v0_cf60, 20
  %v2_cf60 = inttoptr i32 %v1_cf60 to i32*
  %v3_cf60 = load i32, i32* %v2_cf60, align 4
  %v3_cf64 = udiv i32 %v3_cf60, 65536
  store i32 %v3_cf64, i32* %r3.global-to-local, align 4
  %v3_cf6812 = udiv i32 %v3_cf60, 16777216
  %v1_cf6c = trunc i32 %v3_cf6812 to i8
  %v2_cf6c = load i32, i32* %lr.global-to-local, align 4
  %v3_cf6c = add i32 %v2_cf6c, 3
  %v4_cf6c = inttoptr i32 %v3_cf6c to i8*
  store i8 %v1_cf6c, i8* %v4_cf6c, align 1
  %v0_cf70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  %v2_cf70 = load i32, i32* %lr.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v1_cf70, i8* %v4_cf70, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r4, align 4
  store i32 %v0_cf7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @sl, align 4
  store i32 %v0_cf84, i32* %r2.global-to-local, align 4
  %v0_cf88 = load i32, i32* %lr.global-to-local, align 4
  %v6_cf90 = inttoptr i32 %v0_cf7c to i32*
  %v7_cf90 = call i32 @function_12658(i32 %v3_cb88, i32* %v6_cf90, i32 %v0_cf84, i32 16384, i32 %v0_cf88, i32 16)
  %v3_cf94 = load i32, i32* %stack_var_-40, align 4
  %v1_cf98 = add i32 %v3_cf94, 1
  store i32 %v1_cf98, i32* %r0.global-to-local, align 4
  store i32 %v1_c914, i32* %r3.global-to-local, align 4
  %v9_cfa0 = icmp eq i32 %v1_c914, %v1_cf98
  store i1 %v9_cfa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf98, i32* %stack_var_-40, align 4
  %v8_cfa8 = icmp sgt i32 %v1_c914, %v1_cf98
  br i1 %v8_cfa8, label %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, label %dec_label_pc_cfac

dec_label_pc_cee8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cee8
  %v1_ceb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cee8
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cea8
  %v0_cfbc = call i32 @function_eb48()
  %v1_cfbc = trunc i32 %v0_cfbc to i8
  store i32 %v0_cfbc, i32* %r0.global-to-local, align 4
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v4_cfc4 = sdiv i32 %v0_cfbc, 256
  store i32 %v4_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v9_cfc8 = icmp eq i32 %v3_cbec, %v1_cfc8
  store i1 %v9_cfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_cfcc = trunc i32 %v4_cfc4 to i8
  %v2_cfcc = load i32, i32* @r4, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v3_cfd0 = load i32, i32* @r4, align 4
  %v4_cfd0 = add i32 %v3_cfd0, 4
  %v5_cfd0 = inttoptr i32 %v4_cfd0 to i8*
  store i8 %v1_cfbc, i8* %v5_cfd0, align 1
  %v0_cfd4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfd4, label %dec_label_pc_cfd8, label %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge

dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_cfbc
  %v1_ced4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ced0

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfbc, %dec_label_pc_cec4
  %v0_cfd8 = call i32 @function_eb48()
  %v1_cfd8 = trunc i32 %v0_cfd8 to i8
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v4_cfe0 = sdiv i32 %v0_cfd8, 256
  store i32 %v4_cfe0, i32* %r3.global-to-local, align 4
  %v1_cfe4 = load i32, i32* @r6, align 4
  %v9_cfe4 = icmp eq i32 %v3_cbf0, %v1_cfe4
  store i1 %v9_cfe4, i1* %cpsr_z.global-to-local, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 20
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i8*
  store i8 %v1_cfd8, i8* %v5_cfe8, align 1
  %v0_cfec = load i32, i32* %r3.global-to-local, align 4
  %v1_cfec = trunc i32 %v0_cfec to i8
  %v2_cfec = load i32, i32* @r5, align 4
  %v3_cfec = add i32 %v2_cfec, 1
  %v4_cfec = inttoptr i32 %v3_cfec to i8*
  store i8 %v1_cfec, i8* %v4_cfec, align 1
  %v0_cff0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cff0, label %dec_label_pc_cff4, label %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge

dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge:    ; preds = %dec_label_pc_cfd8
  %v1_cee0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cedc

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfd8, %dec_label_pc_ced0
  %v0_cff4 = call i32 @function_eb48()
  %v1_cff4 = trunc i32 %v0_cff4 to i8
  %v4_cff8 = sdiv i32 %v0_cff4, 256
  store i32 %v4_cff8, i32* %r3.global-to-local, align 4
  %v3_cffc = load i32, i32* @r5, align 4
  %v4_cffc = add i32 %v3_cffc, 2
  %v5_cffc = inttoptr i32 %v4_cffc to i8*
  store i8 %v1_cff4, i8* %v5_cffc, align 1
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v1_d004 = load i32, i32* @r6, align 4
  %v9_d004 = icmp eq i32 %v3_cbf4, %v1_d004
  store i1 %v9_d004, i1* %cpsr_z.global-to-local, align 1
  %v0_d008 = load i32, i32* %r3.global-to-local, align 4
  %v1_d008 = trunc i32 %v0_d008 to i8
  %v2_d008 = load i32, i32* @r5, align 4
  %v3_d008 = add i32 %v2_d008, 3
  %v4_d008 = inttoptr i32 %v3_d008 to i8*
  store i8 %v1_d008, i8* %v4_d008, align 1
  %v0_d00c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d00c, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_d010:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc
  %v0_d010 = call i32 @function_eb48()
  %v1_d010 = trunc i32 %v0_d010 to i8
  store i32 %v0_d010, i32* %r0.global-to-local, align 4
  %v4_d014 = sdiv i32 %v0_d010, 256
  store i32 %v4_d014, i32* %r3.global-to-local, align 4
  %v3_d018 = load i32, i32* @r4, align 4
  %v4_d018 = add i32 %v3_d018, 28
  %v5_d018 = inttoptr i32 %v4_d018 to i8*
  store i8 %v1_d010, i8* %v5_d018, align 1
  %v0_d01c = load i32, i32* %r3.global-to-local, align 4
  %v1_d01c = trunc i32 %v0_d01c to i8
  %v2_d01c = load i32, i32* @r8, align 4
  %v3_d01c = add i32 %v2_d01c, 1
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  br label %dec_label_pc_cee8

dec_label_pc_d024:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cabc, %dec_label_pc_ca60, %dec_label_pc_c908
  %v0_d024 = call i32 @function_eb48()
  %v1_d028 = urem i32 %v0_d024, 4
  store i32 %v1_d028, i32* %r0.global-to-local, align 4
  %v2_d02c = icmp eq i32 %v1_d028, 3
  store i1 %v2_d02c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d024 to i2
  switch i2 %trunc, label %dec_label_pc_cb6419 [
    i2 0, label %dec_label_pc_d06c
    i2 1, label %dec_label_pc_d080
    i2 -2, label %dec_label_pc_d08c
    i2 -1, label %dec_label_pc_d09c
  ]

dec_label_pc_d048:                                ; preds = %dec_label_pc_cbc4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v4_d04c = sext i8 %v5_cbe0 to i32
  store i32 %v4_d04c, i32* %r1.global-to-local, align 4
  %v2_d050 = add i32 %v4_d04c, %v2_cb74
  store i32 %v2_d050, i32* @fp, align 4
  br label %dec_label_pc_ce7c

dec_label_pc_d058:                                ; preds = %dec_label_pc_cb98
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v1_d05c = call i32 @function_11da0(i32 %v3_cb88)
  store i32 %v1_d05c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_cb70, %dec_label_pc_cb64, %dec_label_pc_d058
  %v29_d068 = phi i32 [ %v3_cb88, %dec_label_pc_cb70 ], [ %v29_d06874, %dec_label_pc_cb64 ], [ %v1_d05c, %dec_label_pc_d058 ]
  store i32 %v3_c908, i32* %r4.global-to-local, align 4
  store i32 %v15_c908, i32* %r8.global-to-local, align 4
  store i32 %v18_c908, i32* %sb.global-to-local, align 4
  store i32 %v21_c908, i32* %sl.global-to-local, align 4
  store i32 %v24_c908, i32* %fp.global-to-local, align 4
  ret i32 %v29_d068

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d024
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d080:                                ; preds = %dec_label_pc_d024
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d024
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d024
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cb64

; uselistorder directives
  uselistorder i32 %v4_d04c, { 0, 2, 1 }
  uselistorder i32 %v1_d028, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d024, { 1, 0 }
  uselistorder i32 %v0_d010, { 0, 2, 1 }
  uselistorder i32 %v0_cfd8, { 0, 2, 1 }
  uselistorder i32 %v4_cfc4, { 1, 0 }
  uselistorder i32 %v0_cfbc, { 0, 2, 1 }
  uselistorder i32 %v1_cf98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf34, { 0, 2, 1 }
  uselistorder i32 %v0_cf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cf08, { 1, 0 }
  uselistorder i32 %v2_cf04, { 0, 2, 1 }
  uselistorder i32 %v7_ceb0, { 1, 0, 2 }
  uselistorder i32 %v4_ceec.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_ce2486, { 1, 0, 2 }
  uselistorder i32 %v1_ce18, { 2, 1, 0 }
  uselistorder i32 %v0_ce18, { 1, 2, 0 }
  uselistorder i32 %v0_ce1831, { 1, 0 }
  uselistorder i32 %v1_ce1832, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_cdec, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_cd68, { 1, 0 }
  uselistorder i32 %v3_cca4, { 1, 0, 2 }
  uselistorder i32 %v1_cc6c, { 1, 0 }
  uselistorder i32 %v1_cc60, { 1, 0 }
  uselistorder i32 %v1_cc44, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v3_cc28, { 1, 0 }
  uselistorder i32 %v4_cc20, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_cbe0, { 1, 0 }
  uselistorder i32 %v0_cbdc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_cbd0, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i1 %v7_cb8c, { 1, 0 }
  uselistorder i32 %v3_cb88, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_cb74, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0, 2 }
  uselistorder i1 %v7_cb2c, { 1, 0 }
  uselistorder i32 %v1_cb28, { 1, 0, 2 }
  uselistorder i1 %v8_cb20, { 1, 0 }
  uselistorder i1 %v7_cb1c, { 1, 0 }
  uselistorder i32 %v1_cb10, { 1, 0 }
  uselistorder i8 %v2_cb04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cb08, { 1, 0 }
  uselistorder i32 %v0_cb28, { 3, 0, 2, 1 }
  uselistorder i32 %v0_caf4, { 0, 2, 1 }
  uselistorder i32 %v1_cb0c, { 0, 2, 1 }
  uselistorder i32 %v2_cadc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_cad4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cabc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_cab4, { 1, 0 }
  uselistorder i32 %v0_cab4, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ca58, { 1, 0, 3, 2 }
  uselistorder i32 %v5_ca28, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_c9ac, { 1, 2, 0 }
  uselistorder i32 %v7_c968, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_c944, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c92c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_c914, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 35, 8, 34, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 43, 46, 45, 47, 49, 48, 51, 50, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 44, 19, 20, 2, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 1, 43, 46, 45, 48, 47, 49, 50, 52, 51, 53, 55, 54, 57, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 18, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_85e0, { 67, 68, 69, 70, 71, 72, 73, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 87, 88, 89, 90, 91, 92, 93, 94, 75, 76, 105, 106, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104 }
  uselistorder label %dec_label_pc_d060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ce88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ce7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %dec_label_pc_cb38, { 1, 0 }
  uselistorder label %dec_label_pc_cb2c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cae8, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1c8 = load i32, i32* @global_var_1ce08.62, align 4
  %v2_d1d0 = call i32 @function_11ea0(i32 %v2_d1c8, i32 9)
  %v0_d1d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_d1c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_d1c4, %bb
  ret i32 %v2_d1d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_d1d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1d8 = load i32, i32* @r4, align 4
  store i32 %v3_d1d8, i32* %stack_var_-36, align 4
  %v6_d1d8 = load i32, i32* @r5, align 4
  %v9_d1d8 = load i32, i32* @r6, align 4
  %v12_d1d8 = load i32, i32* @r7, align 4
  %v15_d1d8 = load i32, i32* @r8, align 4
  %v18_d1d8 = load i32, i32* @sb, align 4
  %v21_d1d8 = load i32, i32* @sl, align 4
  %v24_d1d8 = load i32, i32* @fp, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1ec, i32* @sl, align 4
  %v3_d1f4 = mul i32 %arg1, 65536
  store i32 %v3_d1f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d200 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d20c = bitcast i32* %stack_var_-4677 to i8*
  %v3_d20c = call i32 @function_123e0(i8* %v2_d20c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d224 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d224 = call i32 @function_123e0(i8* %v2_d224, i32 0)
  %v2_d228 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d228, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d248 = call i32 @function_123e0(i8* nonnull %stack_var_-581, i32 0)
  %v2_d24c = ptrtoint i8* %stack_var_-68 to i32
  %v1_d254 = load i32, i32* @r5, align 4
  %v4_d254 = udiv i32 %v1_d254, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d274 = trunc i32 %v4_d254 to i8
  %v4_d274 = call i32 @function_11900(i8 %v3_d274, i32 16, i32 %v2_d24c)
  %v2_d27c = call i32 @function_1149c(i8* nonnull %stack_var_-68)
  %v7_d280 = icmp eq i32 %v2_d27c, 2
  br i1 %v7_d280, label %dec_label_pc_d748, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_d748
  %v1_d28c = call i32 @function_10dd4(i32 15)
  %v1_d294 = call i32 @function_10dd4(i32 16)
  %v1_d29c = call i32 @function_10dd4(i32 17)
  %v1_d2a4 = call i32 @function_10dd4(i32 19)
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  %v3_d2b0 = call i32 @function_10cf0(i32 19, i32* %v2_d2b0)
  %v0_d2b4 = load i32, i32* @r4, align 4
  %v2_d2b8 = inttoptr i32 %v3_d2b0 to i8*
  %v3_d2b8 = call i32 @function_11ecc(i8* %v2_d2b8, i32 %v0_d2b4)
  %v7_d2bc = icmp eq i32 %v3_d2b8, -1
  store i32 %v3_d2b8, i32* @r8, align 4
  br i1 %v7_d2bc, label %dec_label_pc_d6e4, label %dec_label_pc_d2c8.preheader

dec_label_pc_d2c8.preheader:                      ; preds = %dec_label_pc_d288
  %v4_d2d458 = call i32 @function_116f4(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2b8)
  %v2_d2d860 = icmp eq i32 %v4_d2d458, 0
  br i1 %v2_d2d860, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0.lr.ph

dec_label_pc_d2e0.lr.ph:                          ; preds = %dec_label_pc_d2c8.preheader
  %v2_d328 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2e0.lr.ph, %dec_label_pc_d2c8.backedge
  %v3_d2e4 = load i8, i8* %stack_var_-581, align 1
  %v4_d2e4 = sext i8 %v3_d2e4 to i32
  %v2_d2e8 = icmp eq i8 %v3_d2e4, 0
  br i1 %v2_d2e8, label %bb126, label %bb

bb:                                               ; preds = %dec_label_pc_d2e0
  %v8_d2ec = icmp eq i8 %v3_d2e4, 58
  br i1 %v8_d2ec, label %.thread6, label %dec_label_pc_d300

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d318

bb126:                                            ; preds = %dec_label_pc_d2e0
  br label %dec_label_pc_d318

dec_label_pc_d300:                                ; preds = %bb
  %v1_d308.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %bb127, %dec_label_pc_d300
  %v0_d304 = phi i32 [ %v1_d304, %bb127 ], [ 0, %dec_label_pc_d300 ]
  %v1_d304 = add i32 %v0_d304, 1
  %v2_d308 = add i32 %v1_d304, %v1_d308.pre
  %v3_d308 = inttoptr i32 %v2_d308 to i8*
  %v4_d308 = load i8, i8* %v3_d308, align 1
  %v6_d308 = zext i8 %v4_d308 to i32
  %v2_d30c = icmp eq i8 %v4_d308, 0
  br i1 %v2_d30c, label %dec_label_pc_d318, label %bb127

bb127:                                            ; preds = %dec_label_pc_d304
  %v8_d310 = icmp eq i8 %v4_d308, 58
  br i1 %v8_d310, label %dec_label_pc_d318, label %dec_label_pc_d304

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %bb127, %bb126, %.thread6
  %v1_d344 = phi i32 [ 0, %.thread6 ], [ 0, %bb126 ], [ %v1_d304, %bb127 ], [ %v1_d304, %dec_label_pc_d304 ]
  %v0_d318 = phi i32 [ %v4_d2e4, %.thread6 ], [ %v4_d2e4, %bb126 ], [ %v6_d308, %bb127 ], [ %v6_d308, %dec_label_pc_d304 ]
  %v2_d318 = icmp eq i32 %v0_d318, 0
  br i1 %v2_d318, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d320

dec_label_pc_d2c8.backedge:                       ; preds = %dec_label_pc_d318, %dec_label_pc_d3f0, %dec_label_pc_d43c, %dec_label_pc_d364
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v4_d2d4 = call i32 @function_116f4(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2d0)
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0

dec_label_pc_d320:                                ; preds = %dec_label_pc_d318
  %v1_d324 = add i32 %v1_d344, 2
  %v2_d32c = add i32 %v1_d324, %v2_d328
  %v1_d330 = add i32 %v2_d32c, -545
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v2_d334 = icmp eq i8 %v3_d330, 0
  br i1 %v2_d334, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_d320
  %v8_d338 = icmp eq i8 %v3_d330, 32
  br i1 %v8_d338, label %.thread10, label %dec_label_pc_d344

.thread10:                                        ; preds = %bb128
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

bb129:                                            ; preds = %dec_label_pc_d320
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d344:                                ; preds = %bb128
  %v0_d344 = load i32, i32* @r6, align 4
  %v2_d344 = add i32 %v0_d344, %v1_d344
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %bb130, %dec_label_pc_d344
  %v0_d35413 = phi i32 [ %v1_d354, %bb130 ], [ %v2_d344, %dec_label_pc_d344 ]
  %v1_d348 = add i32 %v0_d35413, 3
  %v2_d348 = inttoptr i32 %v1_d348 to i8*
  %v3_d348 = load i8, i8* %v2_d348, align 1
  %v2_d34c = icmp eq i8 %v3_d348, 0
  br i1 %v2_d34c, label %.thread12, label %bb130

.thread12:                                        ; preds = %dec_label_pc_d348
  %v1_d35414 = add i32 %v0_d35413, 1
  br label %dec_label_pc_d35c

bb130:                                            ; preds = %dec_label_pc_d348
  %v8_d350 = icmp eq i8 %v3_d348, 32
  %v1_d354 = add i32 %v0_d35413, 1
  br i1 %v8_d350, label %dec_label_pc_d35c, label %dec_label_pc_d348

dec_label_pc_d35c:                                ; preds = %bb130, %.thread12
  %v1_d35415 = phi i32 [ %v1_d35414, %.thread12 ], [ %v1_d354, %bb130 ]
  %v2_d35c = sub i32 %v1_d35415, %v0_d344
  %v1_d360 = add i32 %v2_d35c, 2
  store i32 %v1_d360, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %bb129, %.thread10, %dec_label_pc_d35c
  %v1_d370 = phi i32 [ %v1_d324, %.thread10 ], [ %v1_d324, %bb129 ], [ %v1_d360, %dec_label_pc_d35c ]
  %v0_d364 = load i32, i32* @r6, align 4
  %v2_d364 = add i32 %v0_d364, %v1_d324
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d370 = add i32 %v1_d370, %v2_d328
  store i32 0, i32* @r7, align 4
  %v3_d37c = add i32 %v2_d370, -545
  %v4_d37c = inttoptr i32 %v3_d37c to i8*
  store i8 0, i8* %v4_d37c, align 1
  %v1_d380 = inttoptr i32 %v2_d364 to i8*
  %v2_d380 = call i32 @function_1149c(i8* %v1_d380)
  store i32 %v2_d380, i32* @r1, align 4
  %v0_d38c = load i32, i32* @r4, align 4
  %v3_d390 = inttoptr i32 %v0_d38c to i8*
  %v4_d390 = call i32 @function_117f0(i8* %v3_d390, i32 %v2_d380, i32 %v2_d24c)
  %v7_d394 = icmp eq i32 %v4_d390, -1
  br i1 %v7_d394, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3b0.preheader

dec_label_pc_d3b0.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d398 = load i32, i32* @r7, align 4
  %v1_d39c = load i32, i32* @r6, align 4
  %v2_d39c = load i32, i32* @r5, align 4
  %v3_d39c = add i32 %v2_d39c, %v1_d39c
  store i32 %v1_d398, i32* @lr, align 4
  store i32 %v1_d398, i32* @r4, align 4
  %v1_d3b050 = add i32 %v3_d39c, 2
  %v2_d3b051 = inttoptr i32 %v1_d3b050 to i8*
  %v3_d3b052 = load i8, i8* %v2_d3b051, align 1
  %v2_d3b454 = icmp eq i8 %v3_d3b052, 0
  %v1_d3b856 = add i32 %v2_d39c, 2
  br i1 %v2_d3b454, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3b0.preheader, %dec_label_pc_d3b0.backedge
  %v0_d3f086 = phi i32 [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3d8.pr = phi i32 [ %v0_d3d8.pr71, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d6f4 = phi i32 [ %v0_d6f474, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3b882 = phi i32 [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v1_d3b856, %dec_label_pc_d3b0.preheader ]
  %v0_d3e8 = phi i32 [ %v0_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d39c, %dec_label_pc_d3b0.preheader ]
  %v1_d3c4.in = phi i8 [ %v3_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d3b052, %dec_label_pc_d3b0.preheader ]
  %v7_d3c0 = icmp eq i8 %v1_d3c4.in, 9
  br i1 %v7_d3c0, label %.thread23, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3c0
  %v8_d3c4 = icmp eq i8 %v1_d3c4.in, 32
  br i1 %v8_d3c4, label %.thread23.thread35, label %dec_label_pc_d3d8

.thread23.thread35:                               ; preds = %bb131
  br label %dec_label_pc_d3e4

.thread23:                                        ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3e4

dec_label_pc_d3d8:                                ; preds = %bb131
  %v7_d3d8 = icmp eq i32 %v0_d3d8.pr, 1
  br i1 %v7_d3d8, label %dec_label_pc_d6f4, label %dec_label_pc_d3e0

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d6f4, %dec_label_pc_d3d8
  %v0_d3e479 = phi i32 [ %v1_d6f4, %dec_label_pc_d6f4 ], [ %v0_d6f4, %dec_label_pc_d3d8 ]
  br label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3e0
  %v0_d3e4 = phi i32 [ %v0_d6f4, %.thread23.thread35 ], [ %v0_d6f4, %.thread23 ], [ %v0_d3e479, %dec_label_pc_d3e0 ]
  %v0_d3d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3e0 ]
  %v7_d3ec = icmp sgt i32 %v0_d3e4, 6
  br i1 %v7_d3ec, label %dec_label_pc_d3f0, label %dec_label_pc_d3b0.backedge

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d3b0.backedge, %dec_label_pc_d3e4, %dec_label_pc_d3b0.preheader
  %v1_d440 = phi i32 [ %v1_d3b856, %dec_label_pc_d3b0.preheader ], [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v0_d3b882, %dec_label_pc_d3e4 ]
  %v0_d3f0 = phi i32 [ %v1_d398, %dec_label_pc_d3b0.preheader ], [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v0_d3f086, %dec_label_pc_d3e4 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  br i1 %v2_d3f0, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f0
  %v2_d404 = add i32 %v1_d440, %v2_d328
  %v1_d408 = add i32 %v2_d404, -545
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %dec_label_pc_d43c, label %bb132

bb132:                                            ; preds = %dec_label_pc_d3fc
  %v8_d410 = icmp eq i8 %v3_d408, 32
  br i1 %v8_d410, label %dec_label_pc_d43c, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb132
  %v2_d418 = add i32 %v1_d440, %v1_d39c
  br label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %bb133, %dec_label_pc_d418
  %v0_d42828 = phi i32 [ %v1_d428, %bb133 ], [ %v1_d440, %dec_label_pc_d418 ]
  %v0_d41c = phi i32 [ %v1_d41c, %bb133 ], [ %v2_d418, %dec_label_pc_d418 ]
  %v1_d41c = add i32 %v0_d41c, 1
  %v2_d41c = inttoptr i32 %v1_d41c to i8*
  %v3_d41c = load i8, i8* %v2_d41c, align 1
  %v2_d420 = icmp eq i8 %v3_d41c, 0
  br i1 %v2_d420, label %.thread27, label %bb133

.thread27:                                        ; preds = %dec_label_pc_d41c
  %v1_d42829 = add i32 %v0_d42828, 1
  br label %dec_label_pc_d430

bb133:                                            ; preds = %dec_label_pc_d41c
  %v8_d424 = icmp eq i8 %v3_d41c, 32
  %v1_d428 = add i32 %v0_d42828, 1
  br i1 %v8_d424, label %dec_label_pc_d430, label %dec_label_pc_d41c

dec_label_pc_d430:                                ; preds = %bb133, %.thread27
  %v1_d438 = phi i32 [ %v1_d42829, %.thread27 ], [ %v1_d428, %bb133 ]
  %v2_d438 = add i32 %v1_d438, %v2_d328
  br label %dec_label_pc_d43c

dec_label_pc_d43c:                                ; preds = %dec_label_pc_d3fc, %bb132, %dec_label_pc_d430
  %v2_d448 = phi i32 [ %v2_d404, %dec_label_pc_d3fc ], [ %v2_d404, %bb132 ], [ %v2_d438, %dec_label_pc_d430 ]
  %v2_d440 = add i32 %v1_d440, %v1_d39c
  store i32 %v2_d440, i32* @r4, align 4
  %v3_d448 = add i32 %v2_d448, -545
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 0, i8* %v4_d448, align 1
  %v1_d44c = inttoptr i32 %v2_d440 to i8*
  %v2_d44c = call i32 @function_1149c(i8* %v1_d44c)
  %v8_d454 = icmp sgt i32 %v2_d44c, 15
  br i1 %v8_d454, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d458

dec_label_pc_d458:                                ; preds = %dec_label_pc_d43c
  %v0_d45c = load i32, i32* @r4, align 4
  %v2_d460 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d460, i32* @r0, align 4
  %v2_d464 = bitcast i32* %stack_var_-52 to i8*
  %v3_d464 = call i32 @function_114c4(i8* %v2_d464, i32 %v0_d45c)
  br label %dec_label_pc_d468

dec_label_pc_d468.loopexit:                       ; preds = %dec_label_pc_d2c8.backedge, %dec_label_pc_d2c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre95 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.loopexit, %dec_label_pc_d458
  %v1_d478.pre-phi = phi i8* [ %.pre95, %dec_label_pc_d468.loopexit ], [ %v2_d464, %dec_label_pc_d458 ]
  %v2_d474.pre-phi = phi i32 [ %.pre, %dec_label_pc_d468.loopexit ], [ %v2_d460, %dec_label_pc_d458 ]
  %v0_d468 = load i32, i32* @r8, align 4
  %v1_d46c = call i32 @function_11da0(i32 %v0_d468)
  %v2_d478 = call i32 @function_1149c(i8* %v1_d478.pre-phi)
  store i32 %v2_d478, i32* @r4, align 4
  %v2_d47c = icmp eq i32 %v2_d478, 0
  br i1 %v2_d47c, label %dec_label_pc_d724, label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d468
  %v3_d48c = call i32 @function_10cf0(i32 15, i32* null)
  store i32 %v3_d48c, i32* @r0, align 4
  %v1_d490 = call i32 @function_121a8(i32 %v3_d48c)
  store i32 %v1_d490, i32* @r8, align 4
  %v2_d494 = icmp eq i32 %v1_d490, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d4a4.preheader

dec_label_pc_d4a4.preheader:                      ; preds = %dec_label_pc_d484
  store i32 0, i32* @r5, align 4
  %v1_d4a845 = inttoptr i32 %v1_d490 to i32*
  %v2_d4a846 = call i32 @function_122a4(i32* %v1_d4a845)
  %v2_d4ac48 = icmp eq i32 %v2_d4a846, 0
  br i1 %v2_d4ac48, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4a4.loopexit:                       ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0, %dec_label_pc_d538
  %v0_d4a4 = load i32, i32* @r8, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_122a4(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4b4.preheader:                      ; preds = %dec_label_pc_d4a4.preheader, %dec_label_pc_d4a4.loopexit
  %v0_d4bc94 = phi i32 [ %v2_d4a8, %dec_label_pc_d4a4.loopexit ], [ %v2_d4a846, %dec_label_pc_d4a4.preheader ]
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d4b4.preheader, %dec_label_pc_d6a0
  %v0_d4c8 = phi i32 [ %v0_d4bc94, %dec_label_pc_d4b4.preheader ], [ %v2_d6ac, %dec_label_pc_d6a0 ]
  %v0_d4b4 = load i32, i32* @r5, align 4
  %v2_d4b4 = icmp eq i32 %v0_d4b4, 0
  br i1 %v2_d4b4, label %dec_label_pc_d4bc, label %dec_label_pc_d6b8

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4bc = add i32 %v0_d4c8, 11
  %v2_d4bc = inttoptr i32 %v1_d4bc to i8*
  %v3_d4bc = load i8, i8* %v2_d4bc, align 1
  %v4_d4bc = zext i8 %v3_d4bc to i32
  %v1_d4c0 = add nsw i32 %v4_d4bc, -48
  store i32 %v1_d4bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4c0, 9
  br i1 %tmp, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  %v3_d4d8 = call i32 @function_10cf0(i32 15, i32* null)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d4e4 = call i32 @function_114c4(i8* %v2_d20c, i32 %v3_d4d8)
  %v2_d4ec = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v0_d4f4 = load i32, i32* @sl, align 4
  %v2_d4f4 = add i32 %v0_d4f4, %v2_d4ec
  store i32 %v2_d4f4, i32* @r0, align 4
  %v2_d4f8 = inttoptr i32 %v2_d4f4 to i8*
  %v3_d4f8 = call i32 @function_114c4(i8* %v2_d4f8, i32 %v0_d4f0)
  %v2_d500 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d504 = load i32, i32* @r5, align 4
  store i32 %v2_d500, i32* @r4, align 4
  %v2_d510 = inttoptr i32 %v0_d504 to i32*
  %v3_d510 = call i32 @function_10cf0(i32 16, i32* %v2_d510)
  %v0_d518 = load i32, i32* @sl, align 4
  %v1_d518 = load i32, i32* @r4, align 4
  %v2_d518 = add i32 %v1_d518, %v0_d518
  store i32 %v2_d518, i32* @r0, align 4
  %v2_d51c = inttoptr i32 %v2_d518 to i8*
  %v3_d51c = call i32 @function_114c4(i8* %v2_d51c, i32 %v3_d510)
  %v4_d52c = call i32 @function_11f94(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d530 = icmp eq i32 %v4_d52c, -1
  br i1 %v7_d530, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %dec_label_pc_d4d0
  %v0_d538 = load i32, i32* @r5, align 4
  %v2_d540 = inttoptr i32 %v0_d538 to i32*
  %v3_d540 = call i32 @function_10cf0(i32 15, i32* %v2_d540)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d54c = call i32 @function_114c4(i8* %v2_d20c, i32 %v3_d540)
  %v2_d554 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d558 = load i32, i32* @r7, align 4
  %v0_d55c = load i32, i32* @sl, align 4
  %v2_d55c = add i32 %v0_d55c, %v2_d554
  store i32 %v2_d55c, i32* @r0, align 4
  %v2_d560 = inttoptr i32 %v2_d55c to i8*
  %v3_d560 = call i32 @function_114c4(i8* %v2_d560, i32 %v0_d558)
  %v2_d568 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v2_d568, i32* @r4, align 4
  %v2_d578 = inttoptr i32 %v0_d56c to i32*
  %v3_d578 = call i32 @function_10cf0(i32 17, i32* %v2_d578)
  %v0_d580 = load i32, i32* @sl, align 4
  %v1_d580 = load i32, i32* @r4, align 4
  %v2_d580 = add i32 %v1_d580, %v0_d580
  store i32 %v2_d580, i32* @r0, align 4
  %v2_d584 = inttoptr i32 %v2_d580 to i8*
  %v3_d584 = call i32 @function_114c4(i8* %v2_d584, i32 %v3_d578)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v1_d58c = call i32 @function_121a8(i32 %v2_d1ec)
  store i32 %v1_d58c, i32* @sb, align 4
  %v2_d590 = icmp eq i32 %v1_d58c, 0
  br i1 %v2_d590, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d598.preheader

dec_label_pc_d598.preheader:                      ; preds = %dec_label_pc_d538
  %v1_d59c40 = inttoptr i32 %v1_d58c to i32*
  %v2_d59c41 = call i32 @function_122a4(i32* %v1_d59c40)
  store i32 %v2_d59c41, i32* @r6, align 4
  %v2_d5a043 = icmp eq i32 %v2_d59c41, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a043, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d598.loopexit:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d650
  %v0_d598 = load i32, i32* @sb, align 4
  %v1_d59c = inttoptr i32 %v0_d598 to i32*
  %v2_d59c = call i32 @function_122a4(i32* %v1_d59c)
  store i32 %v2_d59c, i32* @r6, align 4
  %v2_d5a0 = icmp eq i32 %v2_d59c, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d5b0thread-pre-split:                ; preds = %dec_label_pc_d598.preheader, %dec_label_pc_d598.loopexit
  %v0_d5b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5b0thread-pre-split, %dec_label_pc_d678
  %v0_d5b0 = phi i32 [ %v0_d5b0.pr, %dec_label_pc_d5b0thread-pre-split ], [ 1, %dec_label_pc_d678 ]
  %v2_d5b0 = icmp eq i32 %v0_d5b0, 0
  br i1 %v2_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d6a0

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5b0
  %v0_d5b8 = call i32 @function_1153c()
  %v0_d5bc = load i32, i32* @r5, align 4
  %v2_d5c4 = inttoptr i32 %v0_d5bc to i32*
  %v3_d5c4 = call i32 @function_10cf0(i32 15, i32* %v2_d5c4)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d5d0 = call i32 @function_114c4(i8* %v2_d20c, i32 %v3_d5c4)
  %v2_d5d8 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d5dc = load i32, i32* @r7, align 4
  %v0_d5e0 = load i32, i32* @sl, align 4
  %v2_d5e0 = add i32 %v0_d5e0, %v2_d5d8
  store i32 %v2_d5e0, i32* @r0, align 4
  %v2_d5e4 = inttoptr i32 %v2_d5e0 to i8*
  %v3_d5e4 = call i32 @function_114c4(i8* %v2_d5e4, i32 %v0_d5dc)
  %v2_d5ec = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d5f0 = load i32, i32* @r5, align 4
  store i32 %v2_d5ec, i32* @r4, align 4
  %v2_d5fc = inttoptr i32 %v0_d5f0 to i32*
  %v3_d5fc = call i32 @function_10cf0(i32 17, i32* %v2_d5fc)
  %v0_d604 = load i32, i32* @sl, align 4
  %v1_d604 = load i32, i32* @r4, align 4
  %v2_d604 = add i32 %v1_d604, %v0_d604
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_114c4(i8* %v2_d608, i32 %v3_d5fc)
  %v2_d610 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_114c4(i8* %v2_d61c, i32 ptrtoint (i32* @global_var_14644.64 to i32))
  %v2_d624 = call i32 @function_1149c(i8* %v2_d20c)
  %v0_d628 = load i32, i32* @r6, align 4
  %v1_d628 = add i32 %v0_d628, 11
  %v0_d62c = load i32, i32* @sl, align 4
  %v2_d62c = add i32 %v0_d62c, %v2_d624
  store i32 %v2_d62c, i32* @r0, align 4
  %v2_d630 = inttoptr i32 %v2_d62c to i8*
  %v3_d630 = call i32 @function_114c4(i8* %v2_d630, i32 %v1_d628)
  %v4_d640 = call i32 @function_11f94(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d644 = icmp eq i32 %v4_d640, -1
  br i1 %v7_d644, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5b8
  %v2_d650 = call i32 @function_1149c(i8* %v2_d224)
  store i32 %v2_d650, i32* @r1, align 4
  %v4_d664 = call i32 @function_117f0(i8* %v2_d224, i32 %v2_d650, i32 %v2_d474.pre-phi)
  %v7_d668 = icmp eq i32 %v4_d664, -1
  br i1 %v7_d668, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d650
  %v0_d670 = load i32, i32* @r7, align 4
  %v2_d678 = inttoptr i32 %v0_d670 to i8*
  %v3_d678 = call i32 @function_115c8(i8* %v2_d678, i32 10)
  %v2_d680 = call i32 @function_11ea0(i32 %v3_d678, i32 9)
  %v0_d684 = load i32, i32* @sb, align 4
  %v1_d688 = inttoptr i32 %v0_d684 to i32*
  %v2_d688 = call i32 @function_122a4(i32* %v1_d688)
  store i32 %v2_d688, i32* @r6, align 4
  %v2_d68c = icmp eq i32 %v2_d688, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d68c, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d598.loopexit, %dec_label_pc_d678, %dec_label_pc_d5b0, %dec_label_pc_d598.preheader
  %v0_d6a0 = load i32, i32* @sb, align 4
  %v1_d6a4 = inttoptr i32 %v0_d6a0 to i32*
  %v2_d6a4 = call i32 @function_120f4(i32* %v1_d6a4)
  %v0_d6a8 = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6a8 to i32*
  %v2_d6ac = call i32 @function_122a4(i32* %v1_d6ac)
  %v2_d6b0 = icmp eq i32 %v2_d6ac, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d4a4.loopexit, %dec_label_pc_d6a0, %dec_label_pc_d4b4, %dec_label_pc_d4a4.preheader
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6bc = call i32 @function_120f4(i32* %v1_d6bc)
  %v0_d6c0 = load i32, i32* @r5, align 4
  %v1_d6c0 = urem i32 %v0_d6c0, 256
  br label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d484, %dec_label_pc_d6b8
  %storemerge = phi i32 [ %v1_d6c0, %dec_label_pc_d6b8 ], [ 0, %dec_label_pc_d484 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6c8 = call i32 @function_131d8(i32 1)
  %v1_d6d0 = call i32 @function_10d1c(i32 15)
  %v1_d6d8 = call i32 @function_10d1c(i32 16)
  %v1_d6e0 = call i32 @function_10d1c(i32 17)
  br label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d288, %dec_label_pc_d724, %dec_label_pc_d6c4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v2_d6f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6f0, i32* @r4, align 4
  store i32 %v6_d1d8, i32* @r5, align 4
  store i32 %v9_d1d8, i32* @r6, align 4
  store i32 %v12_d1d8, i32* @r7, align 4
  store i32 %v15_d1d8, i32* @r8, align 4
  store i32 %v18_d1d8, i32* @sb, align 4
  store i32 %v21_d1d8, i32* @sl, align 4
  store i32 %v24_d1d8, i32* @fp, align 4
  ret i32 %v0_d6e4

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d3d8
  %v1_d6f4 = add i32 %v0_d6f4, 1
  store i32 %v1_d6f4, i32* @lr, align 4
  %v7_d6f8 = icmp eq i32 %v0_d6f4, 0
  br i1 %v7_d6f8, label %dec_label_pc_d700, label %dec_label_pc_d3e0

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f4
  %v1_d700 = add i32 %v0_d3e8, 3
  %v2_d700 = inttoptr i32 %v1_d700 to i8*
  %v3_d700 = load i8, i8* %v2_d700, align 1
  %v7_d704 = icmp eq i8 %v3_d700, 65
  br i1 %v7_d704, label %dec_label_pc_d714, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d700
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d714:                                ; preds = %dec_label_pc_d700
  store i32 %v1_d6f4, i32* @r4, align 4
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d3b0.backedge:                       ; preds = %.thread33, %dec_label_pc_d714, %dec_label_pc_d3e4
  %v0_d3f085 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3f086, %dec_label_pc_d3e4 ], [ %v0_d3f086, %.thread33 ]
  %v0_d6f474 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3e4, %dec_label_pc_d3e4 ], [ %v1_d6f4, %.thread33 ]
  %v0_d3d8.pr71 = phi i32 [ 0, %dec_label_pc_d714 ], [ %v0_d3d8.pr72, %dec_label_pc_d3e4 ], [ 0, %.thread33 ]
  %v0_d3b0 = add i32 %v0_d3e8, 1
  %v1_d3b0 = add i32 %v0_d3e8, 3
  %v2_d3b0 = inttoptr i32 %v1_d3b0 to i8*
  %v3_d3b0 = load i8, i8* %v2_d3b0, align 1
  %v2_d3b4 = icmp eq i8 %v3_d3b0, 0
  %v1_d3b8 = add i32 %v0_d3b882, 1
  br i1 %v2_d3b4, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d724:                                ; preds = %dec_label_pc_d468
  %v1_d728 = call i32 @function_10d1c(i32 15)
  %v1_d730 = call i32 @function_10d1c(i32 16)
  %v1_d738 = call i32 @function_10d1c(i32 17)
  %v1_d740 = call i32 @function_10d1c(i32 19)
  br label %dec_label_pc_d6e4

dec_label_pc_d748:                                ; preds = %dec_label_pc_d1d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d288

; uselistorder directives
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i8 %v3_d3b0, { 1, 0 }
  uselistorder i32 %v0_d3f085, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d6ac, { 1, 0 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v0_d42828, { 1, 0 }
  uselistorder i32 %v1_d440, { 0, 3, 1, 2 }
  uselistorder i32 %v0_d3e4, { 1, 0 }
  uselistorder i32 %v0_d3b882, { 1, 0 }
  uselistorder i32 %v0_d6f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3f086, { 1, 2, 0 }
  uselistorder i32 %v1_d3b856, { 1, 0 }
  uselistorder i32 %v2_d39c, { 1, 0 }
  uselistorder i32 %v1_d398, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d35413, { 1, 0, 2 }
  uselistorder i32 %v0_d344, { 1, 0 }
  uselistorder i32 %v1_d324, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2b8, { 1, 2, 0 }
  uselistorder i32 %v2_d200, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_115c8, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_116f4, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6c4, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d6a0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d598.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d43c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d3e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3c0, { 1, 0 }
  uselistorder label %dec_label_pc_d364, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d318, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2e0, { 1, 0 }
  uselistorder label %dec_label_pc_d288, { 1, 0 }
}

define i32 @function_d774(i32 %arg1) local_unnamed_addr {
dec_label_pc_d774:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-244 = alloca i32, align 4
  %stack_var_-8436 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  store i32 %v3_d774, i32* %stack_var_-36, align 4
  %v6_d774 = load i32, i32* @r5, align 4
  %v9_d774 = load i32, i32* @r6, align 4
  %v12_d774 = load i32, i32* @r7, align 4
  %v15_d774 = load i32, i32* @r8, align 4
  %v18_d774 = load i32, i32* @sb, align 4
  %v21_d774 = load i32, i32* @sl, align 4
  %v24_d774 = load i32, i32* @fp, align 4
  %v2_d784 = call i32 @function_12070(i32* null)
  store i32 %v2_d784, i32* @r7, align 4
  %v0_d78c = call i32 @function_11dcc()
  %v7_d790 = icmp eq i32 %v0_d78c, -1
  %. = zext i1 %v7_d790 to i32
  %tmp233 = icmp slt i32 %v0_d78c, 1
  %storemerge194 = select i1 %tmp233, i32 %., i32 1
  store i32 %storemerge194, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1ce08.62 to i32), i32* %r3.global-to-local, align 4
  %v2_d7ac = icmp eq i32 %storemerge194, 0
  store i32 %v0_d78c, i32* @global_var_1ce08.62, align 4
  br i1 %v2_d7ac, label %dec_label_pc_d7c4, label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_da90, %dec_label_pc_d968, %dec_label_pc_d774
  %v29_d7c0 = phi i32 [ %v3_da20, %dec_label_pc_d968 ], [ %v0_d78c, %dec_label_pc_d774 ], [ 0, %dec_label_pc_da90 ]
  %v2_d7c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 %v6_d774, i32* @r5, align 4
  store i32 %v9_d774, i32* @r6, align 4
  store i32 %v12_d774, i32* @r7, align 4
  store i32 %v15_d774, i32* @r8, align 4
  store i32 %v18_d774, i32* @sb, align 4
  store i32 %v21_d774, i32* @sl, align 4
  store i32 %v24_d774, i32* @fp, align 4
  ret i32 %v29_d7c0

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d774
  %v2_d7c4 = ptrtoint i32* %stack_var_-244 to i32
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v1_d7e0 = call i32 @function_d1d8(i32 58811)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d7f8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d800 = load i32, i32* @r5, align 4
  store i32 %v0_d800, i32* %r2.global-to-local, align 4
  %v3_d808 = call i32 @function_126bc(i32 %v0_d7f8, i32 1, i32 %v0_d800)
  %v7_d80c = icmp eq i32 %v3_d808, -1
  store i32 %v3_d808, i32* @r4, align 4
  br i1 %v7_d80c, label %dec_label_pc_d834, label %dec_label_pc_d818

dec_label_pc_d818:                                ; preds = %dec_label_pc_d7c4
  %v2_d81c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d81c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d824 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d824 = call i32 @function_124ec(i32 %v3_d808, %sockaddr* %v3_d824, i32 16)
  %v0_d828 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d830 = call i32 @function_125a0(i32 %v0_d828, i32 1)
  br label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7c4, %dec_label_pc_d818
  %v1_d83c = call i32 @function_d1d8(i32 50951)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d854 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r2.global-to-local, align 4
  %v3_d864 = call i32 @function_126bc(i32 %v0_d854, i32 1, i32 %v0_d85c)
  %v7_d868 = icmp eq i32 %v3_d864, -1
  store i32 %v3_d864, i32* @r4, align 4
  br i1 %v7_d868, label %dec_label_pc_d890, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d834
  %v2_d878 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d878, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d880 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d880 = call i32 @function_124ec(i32 %v3_d864, %sockaddr* %v3_d880, i32 16)
  %v0_d884 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d88c = call i32 @function_125a0(i32 %v0_d884, i32 1)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d834, %dec_label_pc_d874
  %v0_d890 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d898 = load i32, i32* @r5, align 4
  store i32 %v0_d898, i32* %r2.global-to-local, align 4
  %v3_d89c = call i32 @function_126bc(i32 %v0_d890, i32 1, i32 %v0_d898)
  %v7_d8a0 = icmp eq i32 %v3_d89c, -1
  store i32 %v3_d89c, i32* @r4, align 4
  br i1 %v7_d8a0, label %dec_label_pc_d8c8, label %dec_label_pc_d8ac

dec_label_pc_d8ac:                                ; preds = %dec_label_pc_d890
  %v2_d8b0 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d8b0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d8b8 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d8b8 = call i32 @function_124ec(i32 %v3_d89c, %sockaddr* %v3_d8b8, i32 16)
  %v0_d8bc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d8c4 = call i32 @function_125a0(i32 %v0_d8bc, i32 1)
  br label %dec_label_pc_d8c8

dec_label_pc_d8c8:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d8ac
  %v1_d8cc = call i32 @function_d1d8(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_d8d8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d8e0 = load i32, i32* @r5, align 4
  store i32 %v0_d8e0, i32* %r2.global-to-local, align 4
  %v3_d8ec = call i32 @function_126bc(i32 %v0_d8d8, i32 1, i32 %v0_d8e0)
  %v7_d8f0 = icmp eq i32 %v3_d8ec, -1
  store i32 %v3_d8ec, i32* @r4, align 4
  br i1 %v7_d8f0, label %dec_label_pc_d918, label %dec_label_pc_d8fc

dec_label_pc_d8fc:                                ; preds = %dec_label_pc_d8c8
  %v2_d900 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d900, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d908 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d908 = call i32 @function_124ec(i32 %v3_d8ec, %sockaddr* %v3_d908, i32 16)
  %v0_d90c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d914 = call i32 @function_125a0(i32 %v0_d90c, i32 1)
  br label %dec_label_pc_d918

dec_label_pc_d918:                                ; preds = %dec_label_pc_d8c8, %dec_label_pc_d8fc
  %v1_d91c = call i32 @function_d1d8(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_d928 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d930 = load i32, i32* @r5, align 4
  store i32 %v0_d930, i32* %r2.global-to-local, align 4
  %v3_d93c = call i32 @function_126bc(i32 %v0_d928, i32 1, i32 %v0_d930)
  %v7_d940 = icmp eq i32 %v3_d93c, -1
  store i32 %v3_d93c, i32* @r4, align 4
  br i1 %v7_d940, label %dec_label_pc_d968, label %dec_label_pc_d94c

dec_label_pc_d94c:                                ; preds = %dec_label_pc_d918
  %v2_d950 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d950, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d958 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d958 = call i32 @function_124ec(i32 %v3_d93c, %sockaddr* %v3_d958, i32 16)
  %v0_d95c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d964 = call i32 @function_125a0(i32 %v0_d95c, i32 1)
  br label %dec_label_pc_d968

dec_label_pc_d968:                                ; preds = %dec_label_pc_d918, %dec_label_pc_d94c
  %v1_d96c = call i32 @function_131d8(i32 5)
  %v1_d974 = call i32 @function_12854(i32 4096)
  store i32 ptrtoint (i32* @global_var_1cd68.67 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce04.69 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d974, i32* %r2.global-to-local, align 4
  %v0_d984 = load i32, i32* @r5, align 4
  %v1_d984 = trunc i32 %v0_d984 to i8
  %v3_d984 = inttoptr i32 %v1_d974 to i8*
  store i8 %v1_d984, i8* %v3_d984, align 1
  %v0_d98c = load i32, i32* @r5, align 4
  %v1_d98c = load i32, i32* %r3.global-to-local, align 4
  %v2_d98c = inttoptr i32 %v1_d98c to i32*
  store i32 %v0_d98c, i32* %v2_d98c, align 4
  %v0_d990 = load i32, i32* %r2.global-to-local, align 4
  %v1_d990 = load i32, i32* %r1.global-to-local, align 4
  %v2_d990 = inttoptr i32 %v1_d990 to i32*
  store i32 %v0_d990, i32* %v2_d990, align 4
  %v1_d994 = call i32 @function_10dd4(i32 15)
  %v1_d99c = call i32 @function_10dd4(i32 16)
  %v2_d9a4 = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_d9a4, i32* %r2.global-to-local, align 4
  %v0_d9a8 = load i32, i32* @r5, align 4
  store i32 %v0_d9a8, i32* %r1.global-to-local, align 4
  store i32 %v2_d9a4, i32* %stack_var_-8436, align 4
  %v2_d9b4 = inttoptr i32 %v0_d9a8 to i32*
  %v3_d9b4 = call i32 @function_10cf0(i32 15, i32* %v2_d9b4)
  %v1_d9bc = add i32 %v2_d9a4, -56
  store i32 %v1_d9bc, i32* %r3.global-to-local, align 4
  store i32 %v3_d9b4, i32* %r1.global-to-local, align 4
  store i32 %v1_d9bc, i32* @r0, align 4
  store i32 %v1_d9bc, i32* %stack_var_-8436, align 4
  %v2_d9cc = inttoptr i32 %v1_d9bc to i8*
  %v3_d9cc = call i32 @function_114c4(i8* %v2_d9cc, i32 %v3_d9b4)
  %v2_d9d4 = add i32 %v1_d9bc, %v3_d9cc
  store i32 %v2_d9d4, i32* @r4, align 4
  %v0_d9d8 = call i32 @function_11df8()
  %v2_d9e0 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_d9e0, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_d9e8 = trunc i32 %v0_d9d8 to i8
  %v4_d9e8 = call i32 @function_11900(i8 %v3_d9e8, i32 10, i32 %v2_d9e0)
  store i32 %v4_d9e8, i32* %r1.global-to-local, align 4
  %v0_d9f0 = load i32, i32* @r4, align 4
  store i32 %v0_d9f0, i32* @r0, align 4
  %v2_d9f4 = inttoptr i32 %v0_d9f0 to i8*
  %v3_d9f4 = call i32 @function_114c4(i8* %v2_d9f4, i32 %v4_d9e8)
  %v0_d9f8 = load i32, i32* @r5, align 4
  store i32 %v0_d9f8, i32* %r1.global-to-local, align 4
  %v0_d9fc = load i32, i32* @r4, align 4
  %v2_d9fc = add i32 %v0_d9fc, %v3_d9f4
  store i32 %v2_d9fc, i32* @r4, align 4
  %v2_da04 = inttoptr i32 %v0_d9f8 to i32*
  %v3_da04 = call i32 @function_10cf0(i32 16, i32* %v2_da04)
  store i32 %v3_da04, i32* %r1.global-to-local, align 4
  %v0_da0c = load i32, i32* @r4, align 4
  store i32 %v0_da0c, i32* @r0, align 4
  %v2_da10 = inttoptr i32 %v0_da0c to i8*
  %v3_da10 = call i32 @function_114c4(i8* %v2_da10, i32 %v3_da04)
  %v0_da14 = load i32, i32* @r5, align 4
  store i32 %v0_da14, i32* %r1.global-to-local, align 4
  store i32 %v3_da10, i32* @r6, align 4
  %v2_da1c = load i32, i32* %stack_var_-8436, align 4
  %v2_da20 = inttoptr i32 %v2_da1c to i8*
  %v3_da20 = call i32 @function_11ecc(i8* %v2_da20, i32 %v0_da14)
  %v7_da24 = icmp eq i32 %v3_da20, -1
  br i1 %v7_da24, label %dec_label_pc_d7b8, label %dec_label_pc_da2c

dec_label_pc_da2c:                                ; preds = %dec_label_pc_d968
  %v1_da2c = call i32 @function_11da0(i32 %v3_da20)
  %v1_da34 = call i32 @function_10d1c(i32 15)
  %v1_da3c = call i32 @function_10d1c(i32 16)
  store i32 ptrtoint (i32* @global_var_1ce04.69 to i32), i32* %r3.global-to-local, align 4
  %v2_da48 = load i32, i32* @global_var_1ce04.69, align 4
  store i32 %v2_da48, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_da50 = load i32, i32* %stack_var_-8436, align 4
  %v3_da54 = inttoptr i32 %v2_da50 to i8*
  %v4_da54 = call i32 @function_11f94(i8* %v3_da54, i32 %v2_da48, i32 4095)
  %v7_da58 = icmp eq i32 %v4_da54, -1
  br i1 %v7_da58, label %.thread8, label %bb236

bb236:                                            ; preds = %dec_label_pc_da2c
  %v3_da60 = load i32, i32* @global_var_1ce04.69, align 4
  store i32 %v3_da60, i32* %r3.global-to-local, align 4
  %v1_da64 = load i32, i32* @r5, align 4
  %v2_da64 = trunc i32 %v1_da64 to i8
  %v5_da64 = add i32 %v3_da60, %v4_da54
  %v6_da64 = inttoptr i32 %v5_da64 to i8*
  store i8 %v2_da64, i8* %v6_da64, align 1
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_da2c, %bb236
  %v2_da68 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_da68, i32* %r2.global-to-local, align 4
  %v0_da6c = load i32, i32* @r4, align 4
  %v1_da6c = load i32, i32* @r6, align 4
  %v2_da6c = sub i32 %v0_da6c, %v2_da68
  %v2_da70 = add i32 %v2_da6c, %v1_da6c
  store i32 %v2_da70, i32* @r1, align 4
  store i32 %v2_da68, i32* @r0, align 4
  %v0_da7c = call i32 @function_1153c()
  %v0_da80 = load i32, i32* @r7, align 4
  store i32 %v0_da80, i32* @r4, align 4
  %v0_da84 = load i32, i32* @r5, align 4
  %v2_da88 = ptrtoint i32* %stack_var_-8412 to i32
  store i32 %v2_da88, i32* @r8, align 4
  store i32 400, i32* @r5, align 4
  %v2_db84 = ptrtoint i32* %stack_var_-220 to i32
  %v2_db88 = bitcast i32* %stack_var_-220 to i8*
  %v2_dbd4 = ptrtoint i32* %stack_var_-156 to i32
  %v2_dbd8 = bitcast i32* %stack_var_-156 to i8*
  %v2_dd54 = ptrtoint i32* %stack_var_-44 to i32
  %v2_dd64 = ptrtoint i32* %stack_var_-48 to i32
  %v2_dd74 = ptrtoint i32* %stack_var_-52 to i32
  %v2_dd88 = ptrtoint i32* %stack_var_-40 to i32
  %v2_dd9c = ptrtoint i32* %stack_var_-56 to i32
  %v2_ddb4 = ptrtoint i32* %stack_var_-60 to i32
  %v2_dc50 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_da90

dec_label_pc_da90:                                ; preds = %dec_label_pc_db48, %.thread8
  %stack_var_-8428.0 = phi i32 [ %v0_da84, %.thread8 ], [ %stack_var_-8428.3, %dec_label_pc_db48 ]
  %v1_da94 = call i32 @function_10dd4(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_daa0 = call i32 @function_10cf0(i32 15, i32* null)
  store i32 %v3_daa0, i32* @r0, align 4
  %v1_daa4 = call i32 @function_121a8(i32 %v3_daa0)
  store i32 %v1_daa4, i32* @sl, align 4
  %v2_daa8 = icmp eq i32 %v1_daa4, 0
  br i1 %v2_daa8, label %dec_label_pc_d7b8, label %dec_label_pc_dab0

dec_label_pc_dab0:                                ; preds = %dec_label_pc_da90
  %v1_dab4 = call i32 @function_10d1c(i32 15)
  %v0_dab8131 = load i32, i32* @sl, align 4
  %v1_dabc132 = inttoptr i32 %v0_dab8131 to i32*
  %v2_dabc133 = call i32 @function_122a4(i32* %v1_dabc132)
  %v2_dac0135 = icmp eq i32 %v2_dabc133, 0
  br i1 %v2_dac0135, label %dec_label_pc_db48, label %dec_label_pc_dac8.preheader

dec_label_pc_dac8.preheader:                      ; preds = %dec_label_pc_dab0, %dec_label_pc_dab8.backedge
  %v0_dac8147 = phi i32 [ %v2_dabc, %dec_label_pc_dab8.backedge ], [ %v2_dabc133, %dec_label_pc_dab0 ]
  %stack_var_-8428.1136 = phi i32 [ %stack_var_-8428.1.be, %dec_label_pc_dab8.backedge ], [ %stack_var_-8428.0, %dec_label_pc_dab0 ]
  br label %dec_label_pc_dac8

dec_label_pc_dac8:                                ; preds = %dec_label_pc_dac8.preheader, %dec_label_pc_db30
  %v0_dad8 = phi i32 [ %v2_db3c, %dec_label_pc_db30 ], [ %v0_dac8147, %dec_label_pc_dac8.preheader ]
  %stack_var_-8428.2 = phi i32 [ %v1_daec, %dec_label_pc_db30 ], [ %stack_var_-8428.1136, %dec_label_pc_dac8.preheader ]
  %v1_dac8 = add i32 %v0_dad8, 11
  %v2_dac8 = inttoptr i32 %v1_dac8 to i8*
  %v3_dac8 = load i8, i8* %v2_dac8, align 1
  %v4_dac8 = zext i8 %v3_dac8 to i32
  %v1_dacc = add nsw i32 %v4_dac8, -48
  store i32 %v1_dacc, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_dacc, 9
  br i1 %tmp, label %dec_label_pc_dab8.backedge, label %dec_label_pc_dad8

dec_label_pc_dad8:                                ; preds = %dec_label_pc_dac8
  store i32 %v1_dac8, i32* @r6, align 4
  %v2_dae0 = call i32 @function_12f98(i8* %v2_dac8)
  %v0_dae8 = load i32, i32* @r5, align 4
  %v1_daec = add i32 %stack_var_-8428.2, 1
  store i32 %v1_daec, i32* %r3.global-to-local, align 4
  store i32 %v2_dae0, i32* @r7, align 4
  %v5_daf8 = icmp slt i32 %v0_dae8, %v2_dae0
  %v2_db58 = call i32 @function_12070(i32* null)
  br i1 %v5_daf8, label %dec_label_pc_db54, label %dec_label_pc_dafc

dec_label_pc_dafc:                                ; preds = %dec_label_pc_dad8
  %v0_db04 = load i32, i32* @r4, align 4
  %v2_db04 = sub i32 %v2_db58, %v0_db04
  %v7_db0c = icmp slt i32 %v2_db04, 601
  br i1 %v7_db0c, label %dec_label_pc_db14, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_dafc
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_dab8.backedge

dec_label_pc_db14:                                ; preds = %dec_label_pc_dafc
  %v0_db14 = load i32, i32* @r7, align 4
  %v7_db18 = icmp slt i32 %v0_db14, 401
  br i1 %v7_db18, label %dec_label_pc_dab8.backedge, label %dec_label_pc_db1c

dec_label_pc_db1c:                                ; preds = %dec_label_pc_db14
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_db24 = call i32 @function_11b28(i32 %v1_daec, i32 10)
  %v2_db28 = icmp eq i32 %v2_db24, 0
  br i1 %v2_db28, label %dec_label_pc_db30, label %dec_label_pc_dab8.backedge

dec_label_pc_db30:                                ; preds = %dec_label_pc_db1c
  %v1_db34 = call i32 @function_131d8(i32 1)
  %v0_db38 = load i32, i32* @sl, align 4
  %v1_db3c = inttoptr i32 %v0_db38 to i32*
  %v2_db3c = call i32 @function_122a4(i32* %v1_db3c)
  %v2_db40 = icmp eq i32 %v2_db3c, 0
  br i1 %v2_db40, label %dec_label_pc_db48, label %dec_label_pc_dac8

dec_label_pc_db48:                                ; preds = %dec_label_pc_dab8.backedge, %dec_label_pc_db30, %dec_label_pc_dab0
  %stack_var_-8428.3 = phi i32 [ %stack_var_-8428.0, %dec_label_pc_dab0 ], [ %v1_daec, %dec_label_pc_db30 ], [ %stack_var_-8428.1.be, %dec_label_pc_dab8.backedge ]
  %v0_db48 = load i32, i32* @sl, align 4
  %v1_db4c = inttoptr i32 %v0_db48 to i32*
  %v2_db4c = call i32 @function_120f4(i32* %v1_db4c)
  br label %dec_label_pc_da90

dec_label_pc_db54:                                ; preds = %dec_label_pc_dad8
  %v1_db64 = call i32 @function_10dd4(i32 15)
  %v1_db6c = call i32 @function_10dd4(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_db78 = call i32 @function_10cf0(i32 15, i32* null)
  store i32 %v3_db78, i32* %r1.global-to-local, align 4
  store i32 %v2_db84, i32* @r0, align 4
  %v3_db88 = call i32 @function_114c4(i8* %v2_db88, i32 %v3_db78)
  %v2_db94 = add i32 %v3_db88, %v2_db84
  store i32 %v2_db94, i32* %r5.global-to-local, align 4
  %v0_db98 = load i32, i32* @r6, align 4
  store i32 %v0_db98, i32* %r1.global-to-local, align 4
  store i32 %v2_db94, i32* @r0, align 4
  %v2_dba0 = inttoptr i32 %v2_db94 to i8*
  %v3_dba0 = call i32 @function_114c4(i8* %v2_dba0, i32 %v0_db98)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbb0 = call i32 @function_10cf0(i32 16, i32* null)
  store i32 %v3_dbb0, i32* %r1.global-to-local, align 4
  %v0_dbb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_dbb8 = add i32 %v3_dba0, %v0_dbb8
  store i32 %v2_dbb8, i32* @r0, align 4
  %v2_dbbc = inttoptr i32 %v2_dbb8 to i8*
  %v3_dbbc = call i32 @function_114c4(i8* %v2_dbbc, i32 %v3_dbb0)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbc8 = call i32 @function_10cf0(i32 15, i32* null)
  store i32 %v3_dbc8, i32* %r1.global-to-local, align 4
  store i32 %v2_dbd4, i32* @r0, align 4
  %v3_dbd8 = call i32 @function_114c4(i8* %v2_dbd8, i32 %v3_dbc8)
  %v2_dbe4 = add i32 %v3_dbd8, %v2_dbd4
  store i32 %v2_dbe4, i32* @r5, align 4
  store i32 %v2_dbe4, i32* @r0, align 4
  %v0_dbec = load i32, i32* @r6, align 4
  store i32 %v0_dbec, i32* %r1.global-to-local, align 4
  %v2_dbf0 = inttoptr i32 %v2_dbe4 to i8*
  %v3_dbf0 = call i32 @function_114c4(i8* %v2_dbf0, i32 %v0_dbec)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dbf0, i32* @r4, align 4
  %v3_dc00 = call i32 @function_10cf0(i32 34, i32* null)
  store i32 %v3_dc00, i32* %r1.global-to-local, align 4
  %v0_dc08 = load i32, i32* @r5, align 4
  %v1_dc08 = load i32, i32* @r4, align 4
  %v2_dc08 = add i32 %v1_dc08, %v0_dc08
  store i32 %v2_dc08, i32* @r0, align 4
  %v2_dc0c = inttoptr i32 %v2_dc08 to i8*
  %v3_dc0c = call i32 @function_114c4(i8* %v2_dc0c, i32 %v3_dc00)
  %v1_dc14 = call i32 @function_10d1c(i32 15)
  %v1_dc1c = call i32 @function_10d1c(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dc30 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_dc30, i32* %r1.global-to-local, align 4
  %v4_dc34 = call i32 @function_11f94(i8* %v2_db88, i32 %v2_dc30, i32 4095)
  %v7_dc3c = icmp eq i32 %v4_dc34, -1
  store i32 %v4_dc34, i32* @r5, align 4
  store i32 -4280, i32* @r2, align 4
  br i1 %v7_dc3c, label %dec_label_pc_dd04, label %dec_label_pc_dc4c

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_db54
  %v2_dc54 = add i32 %v4_dc34, %v2_dc50
  store i32 %v2_dc54, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_dc5c = add i32 %v2_dc54, -4280
  %v5_dc5c = inttoptr i32 %v4_dc5c to i8*
  store i8 0, i8* %v5_dc5c, align 1
  %v1_dc64 = call i32 @function_10dd4(i32 35)
  %v0_dc68 = load i32, i32* @r4, align 4
  store i32 %v0_dc68, i32* %r1.global-to-local, align 4
  %v2_dc70 = inttoptr i32 %v0_dc68 to i32*
  %v3_dc70 = call i32 @function_10cf0(i32 35, i32* %v2_dc70)
  %v0_dc74 = load i32, i32* @r5, align 4
  %v1_dc74 = add i32 %v0_dc74, -1
  store i32 %v1_dc74, i32* @r1, align 4
  store i32 %v3_dc70, i32* %r2.global-to-local, align 4
  %v2_dc7c = load i32, i32* %stack_var_-8436, align 4
  %v3_dc80 = inttoptr i32 %v2_dc7c to i8*
  %v4_dc80 = call i32 @function_117f0(i8* %v3_dc80, i32 %v1_dc74, i32 %v3_dc70)
  %v7_dc84 = icmp eq i32 %v4_dc80, -1
  br i1 %v7_dc84, label %dec_label_pc_dca0, label %dec_label_pc_dc8c

dec_label_pc_dc8c:                                ; preds = %dec_label_pc_dc4c
  %v2_dc8c = load i32, i32* %stack_var_-8436, align 4
  %v1_dc90 = inttoptr i32 %v2_dc8c to i8*
  %v2_dc90 = call i32 @function_1209c(i8* %v1_dc90)
  %v0_dc94 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dc9c = call i32 @function_11ea0(i32 %v0_dc94, i32 9)
  br label %dec_label_pc_dca0

dec_label_pc_dca0:                                ; preds = %dec_label_pc_dc4c, %dec_label_pc_dc8c
  %v1_dca4 = call i32 @function_10d1c(i32 35)
  %v0_dca8 = call i32 @function_11df8()
  %v0_dcac = load i32, i32* @r7, align 4
  %v9_dcac = icmp eq i32 %v0_dcac, %v0_dca8
  br i1 %v9_dcac, label %dec_label_pc_dcd8, label %dec_label_pc_dcb4

dec_label_pc_dcb4:                                ; preds = %dec_label_pc_dca0
  %v0_dcb4 = call i32 @function_11e24()
  %v0_dcb8 = load i32, i32* @r7, align 4
  %v9_dcb8 = icmp eq i32 %v0_dcb8, %v0_dcb4
  br i1 %v9_dcb8, label %dec_label_pc_dcd8, label %dec_label_pc_dcc0

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dcb4
  store i32 ptrtoint (i32* @global_var_1ce04.69 to i32), i32* %r2.global-to-local, align 4
  %v2_dcc4 = load i32, i32* %stack_var_-8436, align 4
  %v2_dcc8 = load i32, i32* @global_var_1ce04.69, align 4
  store i32 %v2_dcc8, i32* %r1.global-to-local, align 4
  %v3_dccc = inttoptr i32 %v2_dcc4 to i8*
  %v4_dccc = call i32 @function_1187c(i8* %v3_dccc, i32 %v2_dcc8, i32 ptrtoint (i32* @global_var_1ce04.69 to i32))
  %v2_dcd0 = icmp eq i32 %v4_dccc, 0
  br i1 %v2_dcd0, label %dec_label_pc_dce4, label %dec_label_pc_dcc0.dec_label_pc_dcd8_crit_edge

dec_label_pc_dcc0.dec_label_pc_dcd8_crit_edge:    ; preds = %dec_label_pc_dcc0
  %v0_dcdc.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dcd8

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_dcc0.dec_label_pc_dcd8_crit_edge, %dec_label_pc_dcb4, %dec_label_pc_dca0
  %v0_dcdc = phi i32 [ %v0_dcdc.pre, %dec_label_pc_dcc0.dec_label_pc_dcd8_crit_edge ], [ %v0_dcb4, %dec_label_pc_dcb4 ], [ %v0_dca8, %dec_label_pc_dca0 ]
  store i32 %v2_db58, i32* @r4, align 4
  store i32 %v0_dcdc, i32* @r5, align 4
  br label %dec_label_pc_dab8.backedge

dec_label_pc_dab8.backedge:                       ; preds = %dec_label_pc_db1c, %dec_label_pc_db14, %dec_label_pc_dac8, %dec_label_pc_dcd8, %dec_label_pc_e000, %.thread9
  %stack_var_-8428.1.be = phi i32 [ %v1_daec, %dec_label_pc_e000 ], [ %v1_daec, %dec_label_pc_dcd8 ], [ %v1_daec, %.thread9 ], [ %stack_var_-8428.2, %dec_label_pc_dac8 ], [ %v1_daec, %dec_label_pc_db14 ], [ %v1_daec, %dec_label_pc_db1c ]
  %v0_dab8 = load i32, i32* @sl, align 4
  %v1_dabc = inttoptr i32 %v0_dab8 to i32*
  %v2_dabc = call i32 @function_122a4(i32* %v1_dabc)
  %v2_dac0 = icmp eq i32 %v2_dabc, 0
  br i1 %v2_dac0, label %dec_label_pc_db48, label %dec_label_pc_dac8.preheader

dec_label_pc_dce4:                                ; preds = %dec_label_pc_dcc0
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dce8 = load i32, i32* %stack_var_-8436, align 4
  %v2_dcec = inttoptr i32 %v2_dce8 to i8*
  %v3_dcec = call i32 @function_11ecc(i8* %v2_dcec, i32 0)
  %v7_dcf0 = icmp eq i32 %v3_dcec, -1
  store i32 %v3_dcec, i32* @r4, align 4
  br i1 %v7_dcf0, label %dec_label_pc_e034, label %dec_label_pc_dcfc

dec_label_pc_dcfc:                                ; preds = %dec_label_pc_dce4, %dec_label_pc_e034
  %v0_dcfc = phi i32 [ %v3_dcec, %dec_label_pc_dce4 ], [ %v0_dcfc.pre, %dec_label_pc_e034 ]
  %v1_dd00 = call i32 @function_11da0(i32 %v0_dcfc)
  br label %dec_label_pc_dd04

dec_label_pc_dd04:                                ; preds = %dec_label_pc_db54, %dec_label_pc_dcfc
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd10 = call i32 @function_11ecc(i8* %v2_db88, i32 0)
  %v7_dd14 = icmp eq i32 %v3_dd10, -1
  br i1 %v7_dd14, label %dec_label_pc_e000, label %dec_label_pc_dd20

dec_label_pc_dd20:                                ; preds = %dec_label_pc_dd04
  %v1_dd24 = call i32 @function_10dd4(i32 20)
  %v1_dd2c = call i32 @function_10dd4(i32 21)
  %v1_dd34 = call i32 @function_10dd4(i32 22)
  %v1_dd3c = call i32 @function_10dd4(i32 23)
  %v1_dd44 = call i32 @function_10dd4(i32 24)
  %v1_dd4c = call i32 @function_10dd4(i32 36)
  store i32 %v2_dd54, i32* %r1.global-to-local, align 4
  %v3_dd5c = call i32 @function_10cf0(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_dd64, i32* %r1.global-to-local, align 4
  store i32 %v3_dd5c, i32* @r5, align 4
  %v3_dd70 = call i32 @function_10cf0(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_dd74, i32* %r1.global-to-local, align 4
  store i32 %v3_dd70, i32* @r6, align 4
  %v3_dd80 = call i32 @function_10cf0(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_dd88, i32* %r1.global-to-local, align 4
  store i32 %v3_dd80, i32* @sb, align 4
  %v3_dd94 = call i32 @function_10cf0(i32 23, i32* nonnull %stack_var_-40)
  store i32 %v2_dd9c, i32* %r1.global-to-local, align 4
  store i32 %v3_dd94, i32* @fp, align 4
  %v3_dda8 = call i32 @function_10cf0(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v2_ddb4, i32* %r1.global-to-local, align 4
  %v3_ddbc = call i32 @function_10cf0(i32 36, i32* nonnull %stack_var_-60)
  store i32 %v2_da88, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_ddd0128 = call i32 @function_11f68(i32 %v3_dd10, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp237 = icmp slt i32 %v4_ddd0128, 1
  br i1 %tmp237, label %dec_label_pc_e044, label %dec_label_pc_dddc

dec_label_pc_dddc:                                ; preds = %dec_label_pc_dd20, %dec_label_pc_ddc4.backedge
  %v0_de80119 = phi i32 [ %v4_ddd0, %dec_label_pc_ddc4.backedge ], [ %v4_ddd0128, %dec_label_pc_dd20 ]
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_dde0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_dde0, i32* @r4, align 4
  %v5_dde8 = icmp slt i32 %v0_de80119, %v3_dde0
  br i1 %v5_dde8, label %dec_label_pc_ddf8, label %dec_label_pc_dec0.lr.ph

dec_label_pc_dec0.lr.ph:                          ; preds = %dec_label_pc_dddc
  %v1_deb875 = add i32 %v0_de80119, -1
  store i32 %v1_deb875, i32* %r1.global-to-local, align 4
  %v0_dec0.pre = load i32, i32* @r5, align 4
  %v1_dec4.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dec0

dec_label_pc_ddf8:                                ; preds = %dec_label_pc_deb8.backedge, %dec_label_pc_dddc
  %v3_ddfc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_ddfc, i32* @r4, align 4
  %v5_de04 = icmp slt i32 %v0_de80119, %v3_ddfc
  br i1 %v5_de04, label %dec_label_pc_de14, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_ddf8
  %v1_deec84 = add i32 %v0_de80119, -1
  store i32 %v1_deec84, i32* %r1.global-to-local, align 4
  %v2_deec85 = icmp eq i32 %v0_de80119, 0
  br i1 %v2_deec85, label %dec_label_pc_de14, label %dec_label_pc_def4.lr.ph

dec_label_pc_def4.lr.ph:                          ; preds = %.thread26
  %v0_def4.pre = load i32, i32* @r6, align 4
  %v1_def8.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_def4

dec_label_pc_de14:                                ; preds = %dec_label_pc_deec.backedge, %.thread26, %dec_label_pc_ddf8
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  %v3_de18 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de18, i32* @r4, align 4
  %v5_de20 = icmp slt i32 %v0_de80119, %v3_de18
  br i1 %v5_de20, label %dec_label_pc_de30, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_de14
  %v1_df2093 = add i32 %v0_de80119, -1
  store i32 %v1_df2093, i32* %r1.global-to-local, align 4
  %v2_df2094 = icmp eq i32 %v0_de80119, 0
  br i1 %v2_df2094, label %dec_label_pc_de30, label %dec_label_pc_df28.lr.ph

dec_label_pc_df28.lr.ph:                          ; preds = %.thread35
  %v0_df28.pre = load i32, i32* @sb, align 4
  %v1_df2c.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df28

dec_label_pc_de30:                                ; preds = %dec_label_pc_df20.backedge, %.thread35, %dec_label_pc_de14
  store i32 %v2_d7c4, i32* %r2.global-to-local, align 4
  %v3_de34 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_de34, i32* @r4, align 4
  %v5_de3c = icmp slt i32 %v0_de80119, %v3_de34
  br i1 %v5_de3c, label %dec_label_pc_de4c, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_de30
  %v1_df54102 = add i32 %v0_de80119, -1
  store i32 %v1_df54102, i32* %r1.global-to-local, align 4
  %v2_df54103 = icmp eq i32 %v0_de80119, 0
  br i1 %v2_df54103, label %dec_label_pc_de4c, label %dec_label_pc_df5c.lr.ph

dec_label_pc_df5c.lr.ph:                          ; preds = %.thread44
  %v0_df5c.pre = load i32, i32* @fp, align 4
  %v1_df60.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df5c

dec_label_pc_de4c:                                ; preds = %dec_label_pc_df54.backedge, %.thread44, %dec_label_pc_de30
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_de50 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_de50, i32* @r4, align 4
  %v5_de58 = icmp slt i32 %v0_de80119, %v3_de50
  br i1 %v5_de58, label %dec_label_pc_de68, label %.thread53

.thread53:                                        ; preds = %dec_label_pc_de4c
  %v1_df88111 = add i32 %v0_de80119, -1
  store i32 %v1_df88111, i32* %r1.global-to-local, align 4
  %v2_df88112 = icmp eq i32 %v0_de80119, 0
  br i1 %v2_df88112, label %dec_label_pc_de68, label %dec_label_pc_df90.lr.ph

dec_label_pc_df90.lr.ph:                          ; preds = %.thread53
  %v1_df98.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df90

dec_label_pc_de68:                                ; preds = %dec_label_pc_df88.backedge, %.thread53, %dec_label_pc_de4c
  %v3_de6c = load i32, i32* %stack_var_-60, align 4
  %v5_de74 = icmp slt i32 %v0_de80119, %v3_de6c
  br i1 %v5_de74, label %dec_label_pc_ddc4.backedge, label %.thread59

dec_label_pc_ddc4.backedge:                       ; preds = %dec_label_pc_dea4, %.thread59, %dec_label_pc_de68
  store i32 %v2_da88, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_ddd0 = call i32 @function_11f68(i32 %v3_dd10, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp238 = icmp slt i32 %v4_ddd0, 1
  br i1 %tmp238, label %dec_label_pc_e044, label %dec_label_pc_dddc

.thread59:                                        ; preds = %dec_label_pc_de68
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_de80121 = icmp eq i32 %v0_de80119, 0
  br i1 %v2_de80121, label %dec_label_pc_ddc4.backedge, label %dec_label_pc_de88.lr.ph

dec_label_pc_de88.lr.ph:                          ; preds = %.thread59
  %v1_de90.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_de88

dec_label_pc_de88:                                ; preds = %dec_label_pc_dea4, %dec_label_pc_de88.lr.ph
  %v0_de80.in = phi i32 [ %v0_de80119, %dec_label_pc_de88.lr.ph ], [ %v0_de80, %dec_label_pc_dea4 ]
  %v0_dea4 = phi i32 [ 0, %dec_label_pc_de88.lr.ph ], [ %v1_dea4, %dec_label_pc_dea4 ]
  %v0_de98 = phi i32 [ 0, %dec_label_pc_de88.lr.ph ], [ %v1_de98., %dec_label_pc_dea4 ]
  %v0_de80 = add i32 %v0_de80.in, -1
  store i32 %v3_ddbc, i32* %r3.global-to-local, align 4
  %v2_de8c = add i32 %v0_de98, %v3_ddbc
  %v3_de8c = inttoptr i32 %v2_de8c to i8*
  %v4_de8c = load i8, i8* %v3_de8c, align 1
  %v6_de8c = zext i8 %v4_de8c to i32
  store i32 %v6_de8c, i32* %r2.global-to-local, align 4
  %v2_de90 = add i32 %v0_dea4, %v1_de90.pre
  %v3_de90 = inttoptr i32 %v2_de90 to i8*
  %v4_de90 = load i8, i8* %v3_de90, align 1
  %v6_de90 = zext i8 %v4_de90 to i32
  store i32 %v6_de90, i32* %r3.global-to-local, align 4
  %v9_de94 = icmp eq i8 %v4_de90, %v4_de8c
  %v1_de98 = add i32 %v0_de98, 1
  %v1_de98. = select i1 %v9_de94, i32 %v1_de98, i32 0
  store i32 %v1_de98., i32* %r1.global-to-local, align 4
  br i1 %v9_de94, label %dec_label_pc_dfb4, label %dec_label_pc_dea4

dec_label_pc_dea4:                                ; preds = %dec_label_pc_dfb4, %dec_label_pc_de88
  %v1_dea4 = add i32 %v0_dea4, 1
  %v2_de80 = icmp eq i32 %v0_de80, 0
  br i1 %v2_de80, label %dec_label_pc_ddc4.backedge, label %dec_label_pc_de88

dec_label_pc_deac:                                ; preds = %dec_label_pc_dec0
  %v9_deac = icmp eq i32 %v3_dde0, %v1_decc.
  br i1 %v9_deac, label %dec_label_pc_dfbc, label %dec_label_pc_deb8.backedge

dec_label_pc_deb8.backedge:                       ; preds = %dec_label_pc_dec0, %dec_label_pc_deac
  %storemerge140 = add i32 %storemerge140.in, 1
  %v1_deb8 = add i32 %v0_deb8, -1
  store i32 %v1_deb8, i32* %r1.global-to-local, align 4
  %v2_deb8 = icmp eq i32 %v0_deb8, 0
  br i1 %v2_deb8, label %dec_label_pc_ddf8, label %dec_label_pc_dec0

dec_label_pc_dec0:                                ; preds = %dec_label_pc_deb8.backedge, %dec_label_pc_dec0.lr.ph
  %v0_deb8 = phi i32 [ %v1_deb875, %dec_label_pc_dec0.lr.ph ], [ %v1_deb8, %dec_label_pc_deb8.backedge ]
  %storemerge140.in = phi i32 [ 0, %dec_label_pc_dec0.lr.ph ], [ %storemerge140, %dec_label_pc_deb8.backedge ]
  %v0_decc = phi i32 [ 0, %dec_label_pc_dec0.lr.ph ], [ %v1_decc., %dec_label_pc_deb8.backedge ]
  %v2_dec0 = add i32 %v0_decc, %v0_dec0.pre
  %v3_dec0 = inttoptr i32 %v2_dec0 to i8*
  %v4_dec0 = load i8, i8* %v3_dec0, align 1
  %v6_dec0 = zext i8 %v4_dec0 to i32
  store i32 %v6_dec0, i32* %r2.global-to-local, align 4
  %v2_dec4 = add i32 %storemerge140.in, %v1_dec4.pre
  %v3_dec4 = inttoptr i32 %v2_dec4 to i8*
  %v4_dec4 = load i8, i8* %v3_dec4, align 1
  %v6_dec4 = zext i8 %v4_dec4 to i32
  store i32 %v6_dec4, i32* %r3.global-to-local, align 4
  %v9_dec8 = icmp eq i8 %v4_dec4, %v4_dec0
  %v1_decc = add i32 %v0_decc, 1
  %v1_decc. = select i1 %v9_dec8, i32 %v1_decc, i32 0
  br i1 %v9_dec8, label %dec_label_pc_deac, label %dec_label_pc_deb8.backedge

dec_label_pc_dee0:                                ; preds = %dec_label_pc_def4
  %v9_dee0 = icmp eq i32 %v3_ddfc, %v1_df00.
  br i1 %v9_dee0, label %dec_label_pc_dfbc, label %dec_label_pc_deec.backedge

dec_label_pc_deec.backedge:                       ; preds = %dec_label_pc_def4, %dec_label_pc_dee0
  %storemerge139 = add i32 %storemerge139.in, 1
  %v1_deec = add i32 %v0_deec, -1
  store i32 %v1_deec, i32* %r1.global-to-local, align 4
  %v2_deec = icmp eq i32 %v0_deec, 0
  br i1 %v2_deec, label %dec_label_pc_de14, label %dec_label_pc_def4

dec_label_pc_def4:                                ; preds = %dec_label_pc_deec.backedge, %dec_label_pc_def4.lr.ph
  %v0_deec = phi i32 [ %v1_deec84, %dec_label_pc_def4.lr.ph ], [ %v1_deec, %dec_label_pc_deec.backedge ]
  %storemerge139.in = phi i32 [ 0, %dec_label_pc_def4.lr.ph ], [ %storemerge139, %dec_label_pc_deec.backedge ]
  %v0_df00 = phi i32 [ 0, %dec_label_pc_def4.lr.ph ], [ %v1_df00., %dec_label_pc_deec.backedge ]
  %v2_def4 = add i32 %v0_df00, %v0_def4.pre
  %v3_def4 = inttoptr i32 %v2_def4 to i8*
  %v4_def4 = load i8, i8* %v3_def4, align 1
  %v6_def4 = zext i8 %v4_def4 to i32
  store i32 %v6_def4, i32* %r2.global-to-local, align 4
  %v2_def8 = add i32 %storemerge139.in, %v1_def8.pre
  %v3_def8 = inttoptr i32 %v2_def8 to i8*
  %v4_def8 = load i8, i8* %v3_def8, align 1
  %v6_def8 = zext i8 %v4_def8 to i32
  store i32 %v6_def8, i32* %r3.global-to-local, align 4
  %v9_defc = icmp eq i8 %v4_def8, %v4_def4
  %v1_df00 = add i32 %v0_df00, 1
  %v1_df00. = select i1 %v9_defc, i32 %v1_df00, i32 0
  br i1 %v9_defc, label %dec_label_pc_dee0, label %dec_label_pc_deec.backedge

dec_label_pc_df14:                                ; preds = %dec_label_pc_df28
  %v9_df14 = icmp eq i32 %v3_de18, %v1_df34.
  br i1 %v9_df14, label %dec_label_pc_dfbc, label %dec_label_pc_df20.backedge

dec_label_pc_df20.backedge:                       ; preds = %dec_label_pc_df28, %dec_label_pc_df14
  %storemerge138 = add i32 %storemerge138.in, 1
  %v1_df20 = add i32 %v0_df20, -1
  store i32 %v1_df20, i32* %r1.global-to-local, align 4
  %v2_df20 = icmp eq i32 %v0_df20, 0
  br i1 %v2_df20, label %dec_label_pc_de30, label %dec_label_pc_df28

dec_label_pc_df28:                                ; preds = %dec_label_pc_df20.backedge, %dec_label_pc_df28.lr.ph
  %v0_df20 = phi i32 [ %v1_df2093, %dec_label_pc_df28.lr.ph ], [ %v1_df20, %dec_label_pc_df20.backedge ]
  %storemerge138.in = phi i32 [ 0, %dec_label_pc_df28.lr.ph ], [ %storemerge138, %dec_label_pc_df20.backedge ]
  %v0_df34 = phi i32 [ 0, %dec_label_pc_df28.lr.ph ], [ %v1_df34., %dec_label_pc_df20.backedge ]
  %v2_df28 = add i32 %v0_df34, %v0_df28.pre
  %v3_df28 = inttoptr i32 %v2_df28 to i8*
  %v4_df28 = load i8, i8* %v3_df28, align 1
  %v6_df28 = zext i8 %v4_df28 to i32
  store i32 %v6_df28, i32* %r2.global-to-local, align 4
  %v2_df2c = add i32 %storemerge138.in, %v1_df2c.pre
  %v3_df2c = inttoptr i32 %v2_df2c to i8*
  %v4_df2c = load i8, i8* %v3_df2c, align 1
  %v6_df2c = zext i8 %v4_df2c to i32
  store i32 %v6_df2c, i32* %r3.global-to-local, align 4
  %v9_df30 = icmp eq i8 %v4_df2c, %v4_df28
  %v1_df34 = add i32 %v0_df34, 1
  %v1_df34. = select i1 %v9_df30, i32 %v1_df34, i32 0
  br i1 %v9_df30, label %dec_label_pc_df14, label %dec_label_pc_df20.backedge

dec_label_pc_df48:                                ; preds = %dec_label_pc_df5c
  %v9_df48 = icmp eq i32 %v3_de34, %v1_df68.
  br i1 %v9_df48, label %dec_label_pc_dfbc, label %dec_label_pc_df54.backedge

dec_label_pc_df54.backedge:                       ; preds = %dec_label_pc_df5c, %dec_label_pc_df48
  %storemerge137 = add i32 %storemerge137.in, 1
  %v1_df54 = add i32 %v0_df54, -1
  store i32 %v1_df54, i32* %r1.global-to-local, align 4
  %v2_df54 = icmp eq i32 %v0_df54, 0
  br i1 %v2_df54, label %dec_label_pc_de4c, label %dec_label_pc_df5c

dec_label_pc_df5c:                                ; preds = %dec_label_pc_df54.backedge, %dec_label_pc_df5c.lr.ph
  %v0_df54 = phi i32 [ %v1_df54102, %dec_label_pc_df5c.lr.ph ], [ %v1_df54, %dec_label_pc_df54.backedge ]
  %storemerge137.in = phi i32 [ 0, %dec_label_pc_df5c.lr.ph ], [ %storemerge137, %dec_label_pc_df54.backedge ]
  %v0_df68 = phi i32 [ 0, %dec_label_pc_df5c.lr.ph ], [ %v1_df68., %dec_label_pc_df54.backedge ]
  %v2_df5c = add i32 %v0_df68, %v0_df5c.pre
  %v3_df5c = inttoptr i32 %v2_df5c to i8*
  %v4_df5c = load i8, i8* %v3_df5c, align 1
  %v6_df5c = zext i8 %v4_df5c to i32
  store i32 %v6_df5c, i32* %r2.global-to-local, align 4
  %v2_df60 = add i32 %storemerge137.in, %v1_df60.pre
  %v3_df60 = inttoptr i32 %v2_df60 to i8*
  %v4_df60 = load i8, i8* %v3_df60, align 1
  %v6_df60 = zext i8 %v4_df60 to i32
  store i32 %v6_df60, i32* %r3.global-to-local, align 4
  %v9_df64 = icmp eq i8 %v4_df60, %v4_df5c
  %v1_df68 = add i32 %v0_df68, 1
  %v1_df68. = select i1 %v9_df64, i32 %v1_df68, i32 0
  br i1 %v9_df64, label %dec_label_pc_df48, label %dec_label_pc_df54.backedge

dec_label_pc_df7c:                                ; preds = %dec_label_pc_df90
  %v9_df7c = icmp eq i32 %v3_de50, %v1_dfa0.
  br i1 %v9_df7c, label %dec_label_pc_dfbc, label %dec_label_pc_df88.backedge

dec_label_pc_df88.backedge:                       ; preds = %dec_label_pc_df90, %dec_label_pc_df7c
  %storemerge = add i32 %storemerge.in, 1
  %v1_df88 = add i32 %v0_df88, -1
  store i32 %v1_df88, i32* %r1.global-to-local, align 4
  %v2_df88 = icmp eq i32 %v0_df88, 0
  br i1 %v2_df88, label %dec_label_pc_de68, label %dec_label_pc_df90

dec_label_pc_df90:                                ; preds = %dec_label_pc_df88.backedge, %dec_label_pc_df90.lr.ph
  %v0_df88 = phi i32 [ %v1_df88111, %dec_label_pc_df90.lr.ph ], [ %v1_df88, %dec_label_pc_df88.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_df90.lr.ph ], [ %storemerge, %dec_label_pc_df88.backedge ]
  %v0_dfa0 = phi i32 [ 0, %dec_label_pc_df90.lr.ph ], [ %v1_dfa0., %dec_label_pc_df88.backedge ]
  store i32 %v3_dda8, i32* %r3.global-to-local, align 4
  %v2_df94 = add i32 %v0_dfa0, %v3_dda8
  %v3_df94 = inttoptr i32 %v2_df94 to i8*
  %v4_df94 = load i8, i8* %v3_df94, align 1
  %v6_df94 = zext i8 %v4_df94 to i32
  store i32 %v6_df94, i32* %r2.global-to-local, align 4
  %v2_df98 = add i32 %storemerge.in, %v1_df98.pre
  %v3_df98 = inttoptr i32 %v2_df98 to i8*
  %v4_df98 = load i8, i8* %v3_df98, align 1
  %v6_df98 = zext i8 %v4_df98 to i32
  store i32 %v6_df98, i32* %r3.global-to-local, align 4
  %v9_df9c = icmp eq i8 %v4_df98, %v4_df94
  %v1_dfa0 = add i32 %v0_dfa0, 1
  %v1_dfa0. = select i1 %v9_df9c, i32 %v1_dfa0, i32 0
  br i1 %v9_df9c, label %dec_label_pc_df7c, label %dec_label_pc_df88.backedge

dec_label_pc_dfb4:                                ; preds = %dec_label_pc_de88
  %v9_dfb4 = icmp eq i32 %v3_de6c, %v1_de98.
  br i1 %v9_dfb4, label %dec_label_pc_dfbc, label %dec_label_pc_dea4

dec_label_pc_dfbc:                                ; preds = %dec_label_pc_deac, %dec_label_pc_dee0, %dec_label_pc_df14, %dec_label_pc_df48, %dec_label_pc_df7c, %dec_label_pc_dfb4
  %v1_dfc0 = call i32 @function_10d1c(i32 20)
  %v1_dfc8 = call i32 @function_10d1c(i32 21)
  %v1_dfd0 = call i32 @function_10d1c(i32 22)
  %v1_dfd8 = call i32 @function_10d1c(i32 23)
  %v1_dfe0 = call i32 @function_10d1c(i32 24)
  %v1_dfe8 = call i32 @function_10d1c(i32 36)
  %v1_dff0 = call i32 @function_11da0(i32 %v3_dd10)
  %v0_dff4 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dffc = call i32 @function_11ea0(i32 %v0_dff4, i32 9)
  br label %dec_label_pc_e000

dec_label_pc_e000:                                ; preds = %dec_label_pc_dd04, %dec_label_pc_e044, %dec_label_pc_dfbc
  store i32 64, i32* @r1, align 4
  store i32 %v2_db84, i32* @r0, align 4
  %v0_e00c = call i32 @function_1153c()
  store i32 %v2_dbd4, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e01c = call i32 @function_1153c()
  %v1_e024 = call i32 @function_131d8(i32 1)
  store i32 %v2_db58, i32* @r4, align 4
  %v0_e02c = load i32, i32* @r7, align 4
  store i32 %v0_e02c, i32* @r5, align 4
  br label %dec_label_pc_dab8.backedge

dec_label_pc_e034:                                ; preds = %dec_label_pc_dce4
  %v0_e034 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e03c = call i32 @function_11ea0(i32 %v0_e034, i32 9)
  %v0_dcfc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dcfc

dec_label_pc_e044:                                ; preds = %dec_label_pc_ddc4.backedge, %dec_label_pc_dd20
  %v1_e048 = call i32 @function_10d1c(i32 20)
  %v1_e050 = call i32 @function_10d1c(i32 21)
  %v1_e058 = call i32 @function_10d1c(i32 22)
  %v1_e060 = call i32 @function_10d1c(i32 23)
  %v1_e068 = call i32 @function_10d1c(i32 24)
  %v1_e070 = call i32 @function_10d1c(i32 36)
  %v1_e078 = call i32 @function_11da0(i32 %v3_dd10)
  br label %dec_label_pc_e000

; uselistorder directives
  uselistorder i32 %v1_dfa0., { 1, 0 }
  uselistorder i1 %v9_df9c, { 1, 0 }
  uselistorder i32 %v0_dfa0, { 1, 0 }
  uselistorder i32 %v1_df68., { 1, 0 }
  uselistorder i1 %v9_df64, { 1, 0 }
  uselistorder i32 %v0_df68, { 1, 0 }
  uselistorder i32 %v1_df34., { 1, 0 }
  uselistorder i1 %v9_df30, { 1, 0 }
  uselistorder i32 %v0_df34, { 1, 0 }
  uselistorder i32 %v1_df00., { 1, 0 }
  uselistorder i1 %v9_defc, { 1, 0 }
  uselistorder i32 %v0_df00, { 1, 0 }
  uselistorder i32 %v1_decc., { 1, 0 }
  uselistorder i1 %v9_dec8, { 1, 0 }
  uselistorder i32 %v0_decc, { 1, 0 }
  uselistorder i32 %v1_de98., { 1, 2, 0 }
  uselistorder i1 %v9_de94, { 1, 0 }
  uselistorder i32 %v0_de98, { 1, 0 }
  uselistorder i32 %v0_dea4, { 1, 0 }
  uselistorder i32 %v4_ddd0, { 1, 0 }
  uselistorder i32 %v3_dd10, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_dcec, { 1, 2, 0 }
  uselistorder i32 %v2_dabc, { 1, 0 }
  uselistorder i32 %stack_var_-8428.1.be, { 1, 0 }
  uselistorder i32 %v4_dc34, { 1, 2, 0 }
  uselistorder i32 %v2_db3c, { 1, 0 }
  uselistorder i32 %v1_daec, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8428.0, { 1, 0 }
  uselistorder i32 %v2_dbd4, { 1, 0, 2 }
  uselistorder i32 %v2_db84, { 1, 0, 2 }
  uselistorder i32 %v2_da88, { 1, 0, 2 }
  uselistorder i32 %v2_da68, { 1, 0, 2 }
  uselistorder i32 %v4_da54, { 1, 0 }
  uselistorder i32 %v3_da20, { 2, 0, 1 }
  uselistorder i32 %v3_d93c, { 1, 2, 0 }
  uselistorder i32 %v3_d8ec, { 1, 2, 0 }
  uselistorder i32 %v3_d89c, { 1, 2, 0 }
  uselistorder i32 %v3_d864, { 1, 2, 0 }
  uselistorder i32 %v3_d808, { 1, 2, 0 }
  uselistorder i32 %storemerge194, { 1, 0 }
  uselistorder i32 %v0_d78c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-76, { 0, 6, 1, 7, 2, 8, 3, 9, 4, 10, 5 }
  uselistorder i32* %stack_var_-8412, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 20, 21, 22, 23, 24, 25, 27, 26, 19, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 48, 49, 50, 51, 52, 53, 54, 55, 66, 57, 42, 47, 46, 56, 45, 44, 43, 58, 59, 60, 61, 62, 63, 64, 65, 0, 1, 2, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i32 (i32*)* @function_122a4, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_121a8, { 2, 1, 0 }
  uselistorder i32* @global_var_1ce04.69, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1ce08.62, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e000, { 1, 2, 0 }
  uselistorder label %dec_label_pc_dfbc, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_dddc, { 1, 0 }
  uselistorder label %dec_label_pc_dd04, { 1, 0 }
  uselistorder label %dec_label_pc_dcfc, { 1, 0 }
  uselistorder label %dec_label_pc_dab8.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_dca0, { 1, 0 }
  uselistorder label %dec_label_pc_dac8, { 1, 0 }
  uselistorder label %dec_label_pc_dac8.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_d968, { 1, 0 }
  uselistorder label %dec_label_pc_d918, { 1, 0 }
  uselistorder label %dec_label_pc_d8c8, { 1, 0 }
  uselistorder label %dec_label_pc_d890, { 1, 0 }
  uselistorder label %dec_label_pc_d834, { 1, 0 }
}

define i32 @function_e08c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e08c:
  store i32 ptrtoint (i32* @global_var_e214.71 to i32), i32* @global_var_1cbf4.73, align 4
  ret i32 %arg1
}

define i32 @function_e0a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e0a4:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e0a4 = load i32, i32* @r4, align 4
  %v9_e0a4 = load i32, i32* @r6, align 4
  %v12_e0a4 = load i32, i32* @r7, align 4
  %v15_e0a4 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e0c0 = call i32 @function_126bc(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1cbec.75 to i32), i32* @r6, align 4
  %v7_e0c8 = icmp eq i32 %v3_e0c0, -1
  store i32 %v3_e0c0, i32* @global_var_1cbec.75, align 4
  br i1 %v7_e0c8, label %dec_label_pc_e188, label %dec_label_pc_e0d4

dec_label_pc_e0d4:                                ; preds = %dec_label_pc_e0a4
  %v0_e0d8 = load i32, i32* @r4, align 4
  %v6_e0e8 = call i32 @function_1268c(i32 %v3_e0c0, i32 %v0_e0d8, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_e0ec = load i32, i32* @global_var_1cbec.75, align 4
  store i32 %v2_e0ec, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_e0fc = call i32 @function_11cdc(i32 %v2_e0ec, i32 3)
  %v1_e104 = or i32 %v2_e0fc, 2048
  store i32 %v1_e104, i32* @r2, align 4
  %v0_e108 = load i32, i32* @r4, align 4
  %v2_e10c = call i32 @function_11cdc(i32 %v0_e108, i32 4)
  store i32 ptrtoint (i8** @global_var_1cbf8.77 to i32), i32* @r8, align 4
  %v2_e114 = load i8, i8* bitcast (i8** @global_var_1cbf8.77 to i8*), align 4
  %v2_e118 = icmp eq i8 %v2_e114, 0
  br i1 %v2_e118, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_e0d4
  br label %bb

.thread:                                          ; preds = %dec_label_pc_e0d4
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_e150 = call i32 @function_12374()
  %v0_e154 = load i32, i32* @r5, align 4
  %v2_e154 = inttoptr i32 %v0_e150 to i32*
  store i32 %v0_e154, i32* %v2_e154, align 4
  %v2_e158 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e158, i32* @r7, align 4
  store i32 %v0_e150, i32* @r4, align 4
  %v2_e164 = load i32, i32* @global_var_1cbec.75, align 4
  %v3_e16c = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_e16c = call i32 @function_124ec(i32 %v2_e164, %sockaddr* %v3_e16c, i32 16)
  %v7_e170 = icmp eq i32 %v4_e16c, -1
  br i1 %v7_e170, label %dec_label_pc_e190, label %dec_label_pc_e178

dec_label_pc_e178:                                ; preds = %bb
  %v2_e180 = load i32, i32* @global_var_1cbec.75, align 4
  %v2_e184 = call i32 @function_125a0(i32 %v2_e180, i32 1)
  br label %dec_label_pc_e188

dec_label_pc_e188:                                ; preds = %dec_label_pc_e0a4, %dec_label_pc_e19c, %dec_label_pc_e178
  %v20_e18c = phi i32 [ %v3_e0c0, %dec_label_pc_e0a4 ], [ %v1_e1ec, %dec_label_pc_e19c ], [ %v2_e184, %dec_label_pc_e178 ]
  store i32 %v3_e0a4, i32* @r4, align 4
  store i32 %v9_e0a4, i32* @r6, align 4
  store i32 %v12_e0a4, i32* @r7, align 4
  store i32 %v15_e0a4, i32* @r8, align 4
  ret i32 %v20_e18c

dec_label_pc_e190:                                ; preds = %bb
  %v0_e190 = load i32, i32* @r4, align 4
  %v1_e190 = inttoptr i32 %v0_e190 to i32*
  %v2_e190 = load i32, i32* %v1_e190, align 4
  %v7_e194 = icmp eq i32 %v2_e190, 99
  br i1 %v7_e194, label %dec_label_pc_e1f4, label %dec_label_pc_e19c

dec_label_pc_e19c:                                ; preds = %dec_label_pc_e1f4, %bb21, %dec_label_pc_e190
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e1b4 = load i32, i32* @global_var_1cbec.75, align 4
  %v4_e1cc = call i32 @function_12518(i32 %v2_e1b4, %sockaddr* %v3_e16c, i32 16)
  %v1_e1d4 = call i32 @function_131d8(i32 5)
  %v2_e1d8 = load i32, i32* @global_var_1cbec.75, align 4
  %v1_e1dc = call i32 @function_11da0(i32 %v2_e1d8)
  %v1_e1e8 = call i32 @function_d1d8(i32 ptrtoint (i32* @global_var_f0b5.79 to i32))
  %v1_e1ec = call i32 @function_e0a4(i32 %v1_e1e8)
  br label %dec_label_pc_e188

dec_label_pc_e1f4:                                ; preds = %dec_label_pc_e190
  %v2_e1f4 = load i8, i8* bitcast (i8** @global_var_1cbf8.77 to i8*), align 4
  %v3_e1f4 = zext i8 %v2_e1f4 to i32
  %v1_e1f8 = load i32, i32* @r5, align 4
  %v9_e1f8 = icmp eq i32 %v3_e1f4, %v1_e1f8
  br i1 %v9_e1f8, label %dec_label_pc_e19c, label %bb21

bb21:                                             ; preds = %dec_label_pc_e1f4
  %v2_e200 = trunc i32 %v1_e1f8 to i8
  store i8 %v2_e200, i8* bitcast (i8** @global_var_1cbf8.77 to i8*), align 4
  br label %dec_label_pc_e19c

; uselistorder directives
  uselistorder i32 %v3_e0c0, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1d8, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_125a0, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1cbf8.77 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1cbf8.77, { 1, 0 }
  uselistorder label %dec_label_pc_e19c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e188, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e214() local_unnamed_addr {
dec_label_pc_e214:
  %stack_var_-16 = alloca i32, align 4
  %v3_e214 = load i32, i32* @r4, align 4
  store i32 %v3_e214, i32* %stack_var_-16, align 4
  %v1_e21c = call i32 @function_10dd4(i32 2)
  %v3_e228 = call i32 @function_10cf0(i32 2, i32* null)
  %v1_e22c = inttoptr i32 %v3_e228 to i8*
  %v2_e22c = call i32 @function_edd0(i8* %v1_e22c)
  store i32 %v2_e22c, i32* @r5, align 4
  %v1_e238 = call i32 @function_10d1c(i32 2)
  %v0_e23c = load i32, i32* @r5, align 4
  %v2_e23c = icmp eq i32 %v0_e23c, 0
  store i32 ptrtoint (i8** @global_var_1ce0c.81 to i32), i32* @r6, align 4
  br i1 %v2_e23c, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_e214
  ret i32 %v1_e238

bb5:                                              ; preds = %dec_label_pc_e214
  %v1_e248 = add i32 %v0_e23c, 4
  %v2_e248 = inttoptr i32 %v1_e248 to i32*
  %v3_e248 = load i32, i32* %v2_e248, align 4
  store i32 %v3_e248, i32* @r4, align 4
  %v0_e24c = call i32 @function_eb48()
  %v0_e250 = load i32, i32* @r5, align 4
  %v1_e250 = inttoptr i32 %v0_e250 to i8*
  %v2_e250 = load i8, i8* %v1_e250, align 1
  %v3_e250 = zext i8 %v2_e250 to i32
  %v2_e254 = call i32 @function_11b28(i32 %v0_e24c, i32 %v3_e250)
  %v0_e258 = load i32, i32* @r4, align 4
  %v4_e258 = mul i32 %v2_e254, 4
  %v5_e258 = add i32 %v0_e258, %v4_e258
  %v6_e258 = inttoptr i32 %v5_e258 to i32*
  %v7_e258 = load i32, i32* %v6_e258, align 4
  %v0_e25c = load i32, i32* @r5, align 4
  store i32 %v7_e258, i32* @global_var_1ce10.82, align 4
  %v1_e264 = call i32 @function_edac(i32 %v0_e25c)
  %v1_e26c = call i32 @function_10dd4(i32 1)
  %v3_e278 = call i32 @function_10cf0(i32 1, i32* null)
  %v4_e278 = inttoptr i32 %v3_e278 to i8*
  %v2_e27c = add i32 %v3_e278, 1
  %v3_e27c = inttoptr i32 %v2_e27c to i8*
  %v4_e27c = load i8, i8* %v3_e27c, align 1
  %v3_e280 = load i8, i8* %v4_e278, align 1
  store i8 %v4_e27c, i8* bitcast (i32* @global_var_1ce0f.83 to i8*), align 4
  store i8 %v3_e280, i8* bitcast (i32* @global_var_1ce0e.84 to i8*), align 4
  %v2_e298 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e298, i32* @r4, align 4
  %v1_e29c = call i32 @function_10d1c(i32 1)
  %v0_e2a0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e2a0, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_e29c

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_e2a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_e2a4:
  %stack_var_-16 = alloca i32, align 4
  %v3_e2a4 = load i32, i32* @r4, align 4
  %v6_e2a4 = load i32, i32* @r5, align 4
  %v2_e2a8 = ptrtoint i32* %stack_var_-16 to i32
  %v0_e2ac = call i32 @function_11dcc()
  %v7_e2b0 = icmp eq i32 %v0_e2ac, -1
  %. = zext i1 %v7_e2b0 to i32
  %tmp10 = icmp slt i32 %v0_e2ac, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e2cc = icmp eq i32 %storemerge4, 0
  store i32 %v0_e2ac, i32* @global_var_1cd6c.86, align 4
  br i1 %v2_e2cc, label %dec_label_pc_e2e0, label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2a4
  store i32 %v3_e2a4, i32* @r4, align 4
  store i32 %v6_e2a4, i32* @r5, align 4
  ret i32 %v0_e2ac

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2a4
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e2ec = call i32 @function_10dd4(i32 28)
  %v1_e2f4 = call i32 @function_10dd4(i32 29)
  %v0_e2f8 = load i32, i32* @r5, align 4
  %v2_e300 = inttoptr i32 %v0_e2f8 to i32*
  %v3_e300 = call i32 @function_10cf0(i32 28, i32* %v2_e300)
  %v2_e308 = inttoptr i32 %v3_e300 to i8*
  %v3_e308 = call i32 @function_11ecc(i8* %v2_e308, i32 2)
  %v7_e30c = icmp eq i32 %v3_e308, -1
  store i32 %v3_e308, i32* @r4, align 4
  br i1 %v7_e30c, label %dec_label_pc_e354, label %dec_label_pc_e318

dec_label_pc_e318:                                ; preds = %dec_label_pc_e354, %dec_label_pc_e2e0
  %v0_e324 = phi i32 [ %v3_e364, %dec_label_pc_e354 ], [ %v3_e308, %dec_label_pc_e2e0 ]
  %v3_e32c = call i32 @function_11e50(i32 %v0_e324, i32 -2147199228, i32 %v2_e2a8)
  br label %dec_label_pc_e330

dec_label_pc_e330:                                ; preds = %dec_label_pc_e330, %dec_label_pc_e318
  %v0_e33c = load i32, i32* @r4, align 4
  %v3_e344 = call i32 @function_11e50(i32 %v0_e33c, i32 -2147199227, i32 0)
  %v1_e34c = call i32 @function_131d8(i32 10)
  br label %dec_label_pc_e330

dec_label_pc_e354:                                ; preds = %dec_label_pc_e2e0
  %v0_e354 = load i32, i32* @r5, align 4
  %v2_e35c = inttoptr i32 %v0_e354 to i32*
  %v3_e35c = call i32 @function_10cf0(i32 29, i32* %v2_e35c)
  %v2_e364 = inttoptr i32 %v3_e35c to i8*
  %v3_e364 = call i32 @function_11ecc(i8* %v2_e364, i32 2)
  %v3_e368 = icmp eq i32 %v3_e364, -1
  store i32 %v3_e364, i32* @r4, align 4
  br i1 %v3_e368, label %dec_label_pc_e374, label %dec_label_pc_e318

dec_label_pc_e374:                                ; preds = %dec_label_pc_e354
  %v1_e378 = call i32 @function_10d1c(i32 28)
  %v1_e380 = call i32 @function_10d1c(i32 29)
  %v0_e384 = load i32, i32* @r5, align 4
  %v1_e388 = call i32 @function_13144(i32 %v0_e384)
  %v0_e38c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e38c, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_e374
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_e374, %bb13
  ret i32 %v1_e388

; uselistorder directives
  uselistorder i32 %v3_e364, { 1, 2, 0 }
  uselistorder i32 %v3_e308, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e2ac, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11e50, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_e390(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e390:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e390 = load i32, i32* @r4, align 4
  store i32 %v3_e390, i32* %stack_var_-36, align 4
  %v6_e390 = load i32, i32* @r5, align 4
  %v9_e390 = load i32, i32* @r6, align 4
  %v2_e39c = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_e39c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e39c, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_e3b4 = call i32 @function_12718(i32 %v2_e39c)
  store i32 %v2_e39c, i32* @r0, align 4
  %v2_e3c0 = call i32 @function_126e8(i32 %v2_e39c, i32 2)
  %v0_e3c4 = load i32, i32* @r5, align 4
  store i32 %v0_e3c4, i32* %r2.global-to-local, align 4
  %v3_e3d0 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_e3d0 = call i32 @function_1201c(i32 %v0_e3c4, %_TYPEDEF_sigset_t* %v3_e3d0, i32 %v0_e3c4)
  %v2_e3dc = call i32 @function_12730(i32 17, i32 1)
  %v2_e3e8 = call i32 @function_12730(i32 5, i32 ptrtoint (i32* @global_var_e08c.88 to i32))
  %v0_e3ec = call i32 @function_11754()
  store i32 %v0_e3ec, i32* @global_var_1ce00.50, align 4
  store i32 1494907823, i32* %r2.global-to-local, align 4
  store i8 -24, i8* bitcast (i32* @global_var_1ce0f.83 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1ce0c.81 to i8*), align 4
  store i32 1494907823, i32* @global_var_1ce10.82, align 4
  %v0_e414 = load i32, i32* @r5, align 4
  %v1_e414 = trunc i32 %v0_e414 to i8
  store i8 %v1_e414, i8* bitcast (i32* @global_var_1ce0e.84 to i8*), align 4
  store i8 %v1_e414, i8* bitcast (i32* @global_var_1ce0d.92 to i8*), align 4
  %v6_e41c = call i32 @function_10e8c(i32 %v0_e3ec, i32 ptrtoint (i8** @global_var_1ce0c.81 to i32), i32 1494907823, i32 2)
  store i32 ptrtoint (i32* @global_var_e214.71 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e214.71 to i32), i32* @global_var_1cbf4.73, align 4
  %v2_e430 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_e430, i32* @sb, align 4
  %v1_e434 = call i32 @function_e0a4(i32 %v6_e41c)
  %v1_e438 = call i32 @function_eba0(i32 %v1_e434)
  store i32 %v2_e430, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e444 = call i32 @function_1153c()
  %v0_e448 = load i32, i32* @r6, align 4
  %v7_e448 = icmp eq i32 %v0_e448, 2
  br i1 %v7_e448, label %dec_label_pc_e574, label %dec_label_pc_e450

dec_label_pc_e450:                                ; preds = %dec_label_pc_e574, %dec_label_pc_e390, %dec_label_pc_e584
  %v0_e450 = call i32 @function_eb48()
  store i32 %v0_e450, i32* %r6.global-to-local, align 4
  %v0_e458 = load i32, i32* @r8, align 4
  %v1_e458 = inttoptr i32 %v0_e458 to i32*
  %v2_e458 = load i32, i32* %v1_e458, align 4
  %v1_e45c = inttoptr i32 %v2_e458 to i8*
  %v2_e45c = call i32 @function_1149c(i8* %v1_e45c)
  %v0_e464 = load i32, i32* @r8, align 4
  %v1_e464 = inttoptr i32 %v0_e464 to i32*
  %v2_e464 = load i32, i32* %v1_e464, align 4
  %v1_e468 = inttoptr i32 %v2_e464 to i8*
  %v2_e468 = call i32 @function_1149c(i8* %v1_e468)
  %v1_e46c = sub i32 20, %v2_e45c
  store i32 %v2_e468, i32* @r5, align 4
  %v0_e474 = load i32, i32* %r6.global-to-local, align 4
  %v2_e478 = call i32 @function_11b28(i32 %v0_e474, i32 %v1_e46c)
  %v1_e480 = load i32, i32* @r5, align 4
  %v2_e480 = add i32 %v1_e480, %v2_e478
  store i32 %v2_e480, i32* @r4, align 4
  %v2_e484 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_e484, i32* @r6, align 4
  %v2_e490 = call i32 @function_ebfc(i32 %v2_e484, i32 %v2_e480)
  %v2_e494 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e494, i32* %r2.global-to-local, align 4
  %v1_e498 = load i32, i32* @r4, align 4
  %v2_e498 = add i32 %v1_e498, %v2_e494
  store i32 %v2_e498, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e4a4 = load i32, i32* @r8, align 4
  %v1_e4a4 = inttoptr i32 %v0_e4a4 to i32*
  %v2_e4a4 = load i32, i32* %v1_e4a4, align 4
  store i32 %v2_e4a4, i32* @r0, align 4
  %v3_e4a8 = add i32 %v2_e498, -72
  %v4_e4a8 = inttoptr i32 %v3_e4a8 to i8*
  store i8 0, i8* %v4_e4a8, align 1
  %v2_e4ac = inttoptr i32 %v2_e4a4 to i8*
  %v3_e4ac = call i32 @function_114c4(i8* %v2_e4ac, i32 %v2_e484)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e484, i32* @r0, align 4
  %v0_e4b8 = call i32 @function_1153c()
  %v0_e4bc = call i32 @function_eb48()
  store i32 %v0_e4bc, i32* @r7, align 4
  %v0_e4c4 = load i32, i32* @r8, align 4
  %v1_e4c4 = inttoptr i32 %v0_e4c4 to i32*
  %v2_e4c4 = load i32, i32* %v1_e4c4, align 4
  %v1_e4c8 = inttoptr i32 %v2_e4c4 to i8*
  %v2_e4c8 = call i32 @function_1149c(i8* %v1_e4c8)
  %v0_e4d0 = load i32, i32* @r8, align 4
  %v1_e4d0 = inttoptr i32 %v0_e4d0 to i32*
  %v2_e4d0 = load i32, i32* %v1_e4d0, align 4
  %v1_e4d4 = inttoptr i32 %v2_e4d0 to i8*
  %v2_e4d4 = call i32 @function_1149c(i8* %v1_e4d4)
  %v1_e4d8 = sub i32 20, %v2_e4c8
  store i32 %v2_e4d4, i32* @r5, align 4
  %v0_e4e0 = load i32, i32* @r7, align 4
  %v2_e4e4 = call i32 @function_11b28(i32 %v0_e4e0, i32 %v1_e4d8)
  %v1_e4e8 = load i32, i32* @r5, align 4
  %v2_e4e8 = add i32 %v1_e4e8, %v2_e4e4
  store i32 %v2_e4e8, i32* @r4, align 4
  %v2_e4f4 = call i32 @function_ebfc(i32 %v2_e484, i32 %v2_e4e8)
  %v1_e4fc = load i32, i32* @r4, align 4
  %v2_e4fc = add i32 %v1_e4fc, %v2_e494
  store i32 %v2_e4fc, i32* @r3, align 4
  %v0_e500 = load i32, i32* @sl, align 4
  %v1_e500 = trunc i32 %v0_e500 to i8
  %v3_e500 = add i32 %v2_e4fc, -72
  %v4_e500 = inttoptr i32 %v3_e500 to i8*
  store i8 %v1_e500, i8* %v4_e500, align 1
  %v2_e50c = call i32 @function_11f38(i32 15, i32 %v2_e484)
  %v1_e514 = call i32 @function_10dd4(i32 5)
  %v3_e524 = call i32 @function_10cf0(i32 5, i32* nonnull %stack_var_-44)
  %v3_e528 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e528, i32* %r2.global-to-local, align 4
  %v3_e534 = inttoptr i32 %v3_e524 to i32*
  %v4_e534 = call i32 @function_120c8(i32 1, i32* %v3_e534, i32 %v3_e528)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e544 = call i32 @function_120c8(i32 1, i32* nonnull @global_var_14648.96, i32 1)
  %v1_e54c = call i32 @function_10d1c(i32 5)
  %v1_e550 = call i32 @function_8650(i32 %v1_e54c)
  %v1_e554 = call i32 @function_d774(i32 %v1_e550)
  %v1_e558 = call i32 @function_e2a4(i32 %v1_e554)
  %v0_e55c = call i32 @function_11dcc()
  %v1_e560 = load i32, i32* @sl, align 4
  %v7_e564 = icmp sgt i32 %v0_e55c, %v1_e560
  br i1 %v7_e564, label %dec_label_pc_e568, label %dec_label_pc_e5ac

dec_label_pc_e568:                                ; preds = %dec_label_pc_e450
  store i32 %v6_e390, i32* %r5.global-to-local, align 4
  store i32 %v9_e390, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_e574:                                ; preds = %dec_label_pc_e390
  %v0_e574 = load i32, i32* @r8, align 4
  %v1_e574 = add i32 %v0_e574, 4
  %v2_e574 = inttoptr i32 %v1_e574 to i32*
  %v3_e574 = load i32, i32* %v2_e574, align 4
  %v1_e578 = inttoptr i32 %v3_e574 to i8*
  %v2_e578 = call i32 @function_1149c(i8* %v1_e578)
  %v8_e580 = icmp sgt i32 %v2_e578, 31
  br i1 %v8_e580, label %dec_label_pc_e450, label %dec_label_pc_e584

dec_label_pc_e584:                                ; preds = %dec_label_pc_e574
  %v0_e584 = load i32, i32* @r8, align 4
  %v1_e584 = add i32 %v0_e584, 4
  %v2_e584 = inttoptr i32 %v1_e584 to i32*
  %v3_e584 = load i32, i32* %v2_e584, align 4
  store i32 %v2_e430, i32* @r0, align 4
  %v2_e58c = bitcast i32* %stack_var_-140 to i8*
  %v3_e58c = call i32 @function_114c4(i8* %v2_e58c, i32 %v3_e584)
  %v0_e590 = load i32, i32* @r8, align 4
  %v1_e590 = add i32 %v0_e590, 4
  %v2_e590 = inttoptr i32 %v1_e590 to i32*
  %v3_e590 = load i32, i32* %v2_e590, align 4
  %v1_e598 = inttoptr i32 %v3_e590 to i8*
  %v2_e598 = call i32 @function_1149c(i8* %v1_e598)
  store i32 %v2_e598, i32* @r1, align 4
  store i32 %v3_e590, i32* @r0, align 4
  %v0_e5a4 = call i32 @function_1153c()
  br label %dec_label_pc_e450

dec_label_pc_e5ac:                                ; preds = %dec_label_pc_e450
  %v1_e5ac = call i32 @function_11ff0(i32 %v0_e55c)
  %v0_e5b4 = load i32, i32* @sl, align 4
  %v1_e5b8 = call i32 @function_11da0(i32 %v0_e5b4)
  %v1_e5c0 = call i32 @function_11da0(i32 1)
  %v1_e5c8 = call i32 @function_11da0(i32 2)
  %v1_e5cc = call i32 @function_8650(i32 %v1_e5c8)
  %v1_e5d0 = call i32 @function_d774(i32 %v1_e5cc)
  %v1_e5d4 = call i32 @function_e2a4(i32 %v1_e5d0)
  %v1_e5d8 = call i32 @function_f5a8(i32 %v1_e5d4)
  %v2_e5e8 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_e5e8, i32* @r6, align 4
  %v2_e5ec = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_e5ec, i32* @r7, align 4
  %v2_e6c4 = ptrtoint i32* %stack_var_-60 to i32
  %v2_e904 = ptrtoint i32* %stack_var_-52 to i32
  %v4_e918 = bitcast i8** %stack_var_-38 to i32*
  %v2_ea74 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e928 = ptrtoint i32* %stack_var_-48 to i32
  %v1_e9cc = bitcast i32* %stack_var_-140 to i8*
  %v5_e994 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_e9a8 = sub i32 0, %v1_e5ac
  br label %dec_label_pc_e5f0

dec_label_pc_e5f0:                                ; preds = %dec_label_pc_e5f0.backedge, %dec_label_pc_e5ac
  %v2_e5f845 = phi i32 [ %v2_e5f845.pre, %dec_label_pc_e5f0.backedge ], [ %v2_e5e8, %dec_label_pc_e5ac ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e5f847 = inttoptr i32 %v2_e5f845 to i32*
  store i32 0, i32* %v4_e5f847, align 4
  %v0_e5fc48 = load i32, i32* %r3.global-to-local, align 4
  %v1_e5fc49 = add i32 %v0_e5fc48, 4
  store i32 %v1_e5fc49, i32* %r3.global-to-local, align 4
  %v7_e60050 = icmp eq i32 %v1_e5fc49, 128
  br i1 %v7_e60050, label %dec_label_pc_e608, label %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge

dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge:    ; preds = %dec_label_pc_e5f0, %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge
  %v1_e5fc51 = phi i32 [ %v1_e5fc, %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge ], [ %v1_e5fc49, %dec_label_pc_e5f0 ]
  %v0_e5f8.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e5f8 = load i32, i32* @r6, align 4
  %v3_e5f8 = add i32 %v2_e5f8, %v1_e5fc51
  %v4_e5f8 = inttoptr i32 %v3_e5f8 to i32*
  store i32 %v0_e5f8.pre, i32* %v4_e5f8, align 4
  %v0_e5fc = load i32, i32* %r3.global-to-local, align 4
  %v1_e5fc = add i32 %v0_e5fc, 4
  store i32 %v1_e5fc, i32* %r3.global-to-local, align 4
  %v7_e600 = icmp eq i32 %v1_e5fc, 128
  br i1 %v7_e600, label %dec_label_pc_e608, label %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge

dec_label_pc_e608:                                ; preds = %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge, %dec_label_pc_e5f0
  %v0_e608 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e608, i32* %r3.global-to-local, align 4
  store i32 %v0_e608, i32* @r4, align 4
  %v2_e61052 = load i32, i32* @r7, align 4
  %v3_e61053 = add i32 %v2_e61052, %v0_e608
  %v4_e61054 = inttoptr i32 %v3_e61053 to i32*
  store i32 %v0_e608, i32* %v4_e61054, align 4
  %v0_e61455 = load i32, i32* %r3.global-to-local, align 4
  %v1_e61456 = add i32 %v0_e61455, 4
  store i32 %v1_e61456, i32* %r3.global-to-local, align 4
  %v7_e61857 = icmp eq i32 %v1_e61456, 128
  br i1 %v7_e61857, label %dec_label_pc_e620, label %dec_label_pc_e610.dec_label_pc_e610_crit_edge

dec_label_pc_e610.dec_label_pc_e610_crit_edge:    ; preds = %dec_label_pc_e608, %dec_label_pc_e610.dec_label_pc_e610_crit_edge
  %v1_e61458 = phi i32 [ %v1_e614, %dec_label_pc_e610.dec_label_pc_e610_crit_edge ], [ %v1_e61456, %dec_label_pc_e608 ]
  %v0_e610.pre = load i32, i32* @r4, align 4
  %v2_e610 = load i32, i32* @r7, align 4
  %v3_e610 = add i32 %v2_e610, %v1_e61458
  %v4_e610 = inttoptr i32 %v3_e610 to i32*
  store i32 %v0_e610.pre, i32* %v4_e610, align 4
  %v0_e614 = load i32, i32* %r3.global-to-local, align 4
  %v1_e614 = add i32 %v0_e614, 4
  store i32 %v1_e614, i32* %r3.global-to-local, align 4
  %v7_e618 = icmp eq i32 %v1_e614, 128
  br i1 %v7_e618, label %dec_label_pc_e620, label %dec_label_pc_e610.dec_label_pc_e610_crit_edge

dec_label_pc_e620:                                ; preds = %dec_label_pc_e610.dec_label_pc_e610_crit_edge, %dec_label_pc_e608
  store i32 ptrtoint (i32* @global_var_1cbec.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e624 = load i32, i32* @global_var_1cbec.75, align 4
  %v7_e628 = icmp eq i32 %v2_e624, -1
  br i1 %v7_e628, label %dec_label_pc_e654, label %dec_label_pc_e630

dec_label_pc_e630:                                ; preds = %dec_label_pc_e620
  %v3_e630 = udiv i32 %v2_e624, 32
  %v3_e634 = mul nuw nsw i32 %v3_e630, 4
  %v2_e63c = add i32 %v3_e634, %v2_e494
  store i32 %v2_e63c, i32* %r3.global-to-local, align 4
  %v1_e640 = add i32 %v2_e63c, -360
  %v2_e640 = inttoptr i32 %v1_e640 to i32*
  %v3_e640 = load i32, i32* %v2_e640, align 4
  %v1_e644 = urem i32 %v2_e624, 32
  %v7_e64c = shl i32 1, %v1_e644
  %v8_e64c = or i32 %v3_e640, %v7_e64c
  store i32 %v8_e64c, i32* %r2.global-to-local, align 4
  store i32 %v8_e64c, i32* %v2_e640, align 4
  br label %dec_label_pc_e654

dec_label_pc_e654:                                ; preds = %dec_label_pc_e620, %dec_label_pc_e630
  %v2_e654 = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 %v2_e654, i32* %r3.global-to-local, align 4
  %v7_e658 = icmp eq i32 %v2_e654, -1
  store i32 ptrtoint (i32* @global_var_1cbf0.98 to i32), i32* @r8, align 4
  br i1 %v7_e658, label %dec_label_pc_e890, label %dec_label_pc_e664

dec_label_pc_e664:                                ; preds = %dec_label_pc_e890, %dec_label_pc_e654, %.thread
  store i32 ptrtoint (i8** @global_var_1cd70.101 to i32), i32* %r2.global-to-local, align 4
  %v2_e668 = load i8, i8* bitcast (i8** @global_var_1cd70.101 to i8*), align 4
  %v2_e66c = icmp eq i8 %v2_e668, 0
  %v2_e7ac = load i32, i32* @global_var_1cbf0.98, align 4
  %v3_e7b0 = udiv i32 %v2_e7ac, 32
  store i32 %v3_e7b0, i32* %r3.global-to-local, align 4
  br i1 %v2_e66c, label %dec_label_pc_e7ac, label %dec_label_pc_e674

dec_label_pc_e674:                                ; preds = %dec_label_pc_e664
  %v3_e67c = mul nuw nsw i32 %v3_e7b0, 4
  %v2_e684 = add i32 %v3_e67c, %v2_e494
  store i32 %v2_e684, i32* %r3.global-to-local, align 4
  %v1_e688 = add i32 %v2_e684, -488
  %v2_e688 = inttoptr i32 %v1_e688 to i32*
  %v3_e688 = load i32, i32* %v2_e688, align 4
  %v1_e68c = urem i32 %v2_e7ac, 32
  %v7_e694 = shl i32 1, %v1_e68c
  %v8_e694 = or i32 %v3_e688, %v7_e694
  store i32 %v8_e694, i32* %r2.global-to-local, align 4
  store i32 %v8_e694, i32* %v2_e688, align 4
  br label %dec_label_pc_e69c

dec_label_pc_e69c:                                ; preds = %dec_label_pc_e7ac, %dec_label_pc_e674
  %v2_e6a0 = load i32, i32* @global_var_1cbec.75, align 4
  %v2_e6a4 = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 %v2_e6a4, i32* %r3.global-to-local, align 4
  %v5_e6b0 = icmp slt i32 %v2_e6a0, %v2_e6a4
  br i1 %v5_e6b0, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_e69c
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_e69c, %bb
  %v0_e6c8 = phi i32 [ %v2_e6a0, %dec_label_pc_e69c ], [ %v2_e6a4, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e6c8 = add i32 %v0_e6c8, 1
  store i32 %v2_e5ec, i32* %r2.global-to-local, align 4
  %v5_e6dc = call i32 @function_11fc0(i32 %v1_e6c8, i32 %v2_e5e8, i32 %v2_e5ec, i32 0, i32 %v2_e6c4)
  %v8_e6e0 = icmp eq i32 %v5_e6dc, -1
  store i32 %v5_e6dc, i32* %r3.global-to-local, align 4
  br i1 %v8_e6e0, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e6ec

dec_label_pc_e6ec:                                ; preds = %bb42
  %v6_e6dc = trunc i32 %v5_e6dc to i8
  %v3_e6ec = icmp eq i8 %v6_e6dc, 0
  br i1 %v3_e6ec, label %dec_label_pc_e6f4, label %dec_label_pc_e714

dec_label_pc_e6f4:                                ; preds = %dec_label_pc_e6ec
  %v0_e6f4 = load i32, i32* @sl, align 4
  %v6_e700 = inttoptr i32 %v5_e6dc to i8*
  store i8* %v6_e700, i8** %stack_var_-38, align 4
  %v2_e704 = call i32 @function_11bf4(i32 %v0_e6f4, i32 6)
  %v2_e708 = icmp eq i32 %v2_e704, 0
  %v0_e70c = load i32, i32* @sl, align 4
  %v1_e70c = add i32 %v0_e70c, 1
  store i32 %v1_e70c, i32* @sl, align 4
  br i1 %v2_e708, label %dec_label_pc_e900, label %dec_label_pc_e714

dec_label_pc_e714:                                ; preds = %dec_label_pc_e6ec, %dec_label_pc_e6f4, %dec_label_pc_e900
  store i32 ptrtoint (i32* @global_var_1cbec.75 to i32), i32* %r2.global-to-local, align 4
  %v2_e718 = load i32, i32* @global_var_1cbec.75, align 4
  %v7_e71c = icmp eq i32 %v2_e718, -1
  br i1 %v7_e71c, label %dec_label_pc_e748, label %dec_label_pc_e724

dec_label_pc_e724:                                ; preds = %dec_label_pc_e714
  %v3_e724 = udiv i32 %v2_e718, 32
  %v3_e728 = mul nuw nsw i32 %v3_e724, 4
  %v2_e730 = add i32 %v3_e728, %v2_e494
  store i32 %v2_e730, i32* %r3.global-to-local, align 4
  %v1_e734 = add i32 %v2_e730, -360
  %v2_e734 = inttoptr i32 %v1_e734 to i32*
  %v3_e734 = load i32, i32* %v2_e734, align 4
  %v1_e738 = urem i32 %v2_e718, 32
  %v6_e73c = lshr i32 %v3_e734, %v1_e738
  store i32 %v6_e73c, i32* %r2.global-to-local, align 4
  %v1_e740 = urem i32 %v6_e73c, 2
  %v2_e740 = icmp eq i32 %v1_e740, 0
  br i1 %v2_e740, label %dec_label_pc_e748, label %dec_label_pc_e97c

dec_label_pc_e748:                                ; preds = %dec_label_pc_e724, %dec_label_pc_e714
  store i32 ptrtoint (i8** @global_var_1cd70.101 to i32), i32* %r3.global-to-local, align 4
  %v2_e74c = load i8, i8* bitcast (i8** @global_var_1cd70.101 to i8*), align 4
  %v3_e74c = zext i8 %v2_e74c to i32
  store i32 %v3_e74c, i32* @r4, align 4
  %v2_e750 = icmp eq i8 %v2_e74c, 0
  %v2_e7d8 = load i32, i32* @global_var_1cbf0.98, align 4
  br i1 %v2_e750, label %dec_label_pc_e7d8, label %dec_label_pc_e758

dec_label_pc_e758:                                ; preds = %dec_label_pc_e748
  %v3_e75c = udiv i32 %v2_e7d8, 32
  %v3_e764 = mul nuw nsw i32 %v3_e75c, 4
  %v2_e768 = add i32 %v3_e764, %v2_e494
  store i32 %v2_e768, i32* %r3.global-to-local, align 4
  %v1_e76c = add i32 %v2_e768, -488
  %v2_e76c = inttoptr i32 %v1_e76c to i32*
  %v3_e76c = load i32, i32* %v2_e76c, align 4
  %v1_e770 = urem i32 %v2_e7d8, 32
  %v6_e774 = lshr i32 %v3_e76c, %v1_e770
  store i32 %v6_e774, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1cd70.101 to i32), i32* %r3.global-to-local, align 4
  %v1_e780 = urem i32 %v6_e774, 2
  %v2_e780 = icmp eq i32 %v1_e780, 0
  store i8 0, i8* bitcast (i8** @global_var_1cd70.101 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1cbf0.98 to i32), i32* @r5, align 4
  br i1 %v2_e780, label %dec_label_pc_e790, label %dec_label_pc_e920

dec_label_pc_e790:                                ; preds = %dec_label_pc_e758
  store i32 59288, i32* @lr, align 4
  %v1_e794 = icmp ne i32 %v2_e7d8, -1
  call void @__pseudo_cond_branch(i1 %v1_e794, i32 ptrtoint (i32* @global_var_11da0.102 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e79c = load i32, i32* @r5, align 4
  %v2_e79c = inttoptr i32 %v1_e79c to i32*
  store i32 -1, i32* %v2_e79c, align 4
  %v1_e7a4 = call i32 @function_131d8(i32 1)
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_e5f0.backedge:                       ; preds = %dec_label_pc_e790, %dec_label_pc_e87c, %dec_label_pc_e954, %dec_label_pc_ea18, %dec_label_pc_ea3c, %dec_label_pc_eaf0, %dec_label_pc_eafc, %bb42, %dec_label_pc_e7d8, %dec_label_pc_e7e8, %dec_label_pc_e9c8, %bb44, %dec_label_pc_ea9c, %dec_label_pc_ea2c
  %v2_e5f845.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e5f0

dec_label_pc_e7ac:                                ; preds = %dec_label_pc_e664
  store i32 %v2_e494, i32* %r2.global-to-local, align 4
  %v3_e7b8 = mul nuw nsw i32 %v3_e7b0, 4
  %v2_e7bc = add i32 %v3_e7b8, %v2_e494
  store i32 %v2_e7bc, i32* %r3.global-to-local, align 4
  %v1_e7c0 = add i32 %v2_e7bc, -360
  %v2_e7c0 = inttoptr i32 %v1_e7c0 to i32*
  %v3_e7c0 = load i32, i32* %v2_e7c0, align 4
  %v1_e7c4 = urem i32 %v2_e7ac, 32
  %v7_e7cc = shl i32 1, %v1_e7c4
  %v8_e7cc = or i32 %v3_e7c0, %v7_e7cc
  store i32 %v8_e7cc, i32* %r2.global-to-local, align 4
  store i32 %v8_e7cc, i32* %v2_e7c0, align 4
  br label %dec_label_pc_e69c

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e748
  %v7_e7dc = icmp eq i32 %v2_e7d8, -1
  store i32 ptrtoint (i32* @global_var_1cbf0.98 to i32), i32* @r5, align 4
  br i1 %v7_e7dc, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e7e8

dec_label_pc_e7e8:                                ; preds = %dec_label_pc_e7d8
  %v3_e7e8 = udiv i32 %v2_e7d8, 32
  %v3_e7ec = mul nuw nsw i32 %v3_e7e8, 4
  %v2_e7f4 = add i32 %v3_e7ec, %v2_e494
  store i32 %v2_e7f4, i32* %r3.global-to-local, align 4
  %v1_e7f8 = add i32 %v2_e7f4, -360
  %v2_e7f8 = inttoptr i32 %v1_e7f8 to i32*
  %v3_e7f8 = load i32, i32* %v2_e7f8, align 4
  %v1_e7fc = urem i32 %v2_e7d8, 32
  %v6_e800 = lshr i32 %v3_e7f8, %v1_e7fc
  store i32 %v6_e800, i32* %r2.global-to-local, align 4
  %v1_e804 = urem i32 %v6_e800, 2
  %v2_e804 = icmp eq i32 %v1_e804, 0
  br i1 %v2_e804, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e7e8
  %v6_e80c = inttoptr i32 %v3_e74c to i8*
  store i8* %v6_e80c, i8** %stack_var_-38, align 4
  %v0_e814 = call i32 @function_12374()
  %v0_e818 = load i32, i32* @r4, align 4
  %v2_e818 = inttoptr i32 %v0_e814 to i32*
  store i32 %v0_e818, i32* %v2_e818, align 4
  store i32 %v0_e814, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e82c = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e838 = call i32 @function_125cc(i32 %v2_e82c, i32* %v4_e918, i32 2, i32 16386)
  %v7_e83c = icmp eq i32 %v5_e838, -1
  br i1 %v7_e83c, label %dec_label_pc_ea2c, label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e80c
  %v2_e844 = icmp eq i32 %v5_e838, 0
  br i1 %v2_e844, label %dec_label_pc_ea3c, label %dec_label_pc_e84c

dec_label_pc_e84c:                                ; preds = %dec_label_pc_e844
  %v3_e84c = load i8*, i8** %stack_var_-38, align 4
  %v4_e84c = ptrtoint i8* %v3_e84c to i32
  store i32 %v3_e74c, i32* %r3.global-to-local, align 4
  %v4_e854 = mul nuw nsw i32 %v3_e74c, 256
  %v5_e854 = or i32 %v4_e84c, %v4_e854
  store i32 %v5_e854, i32* %r2.global-to-local, align 4
  %v7_e854 = icmp eq i32 %v5_e854, 0
  br i1 %v7_e854, label %dec_label_pc_eafc, label %dec_label_pc_e85c

dec_label_pc_e85c:                                ; preds = %dec_label_pc_e84c
  %v1_e85c = mul i32 %v4_e84c, 256
  %v3_e860 = and i32 %v1_e85c, 65280
  %v4_e864 = udiv i32 %v5_e854, 256
  %v5_e864 = or i32 %v3_e860, %v4_e864
  %v6_e864 = trunc i32 %v4_e864 to i8
  store i32 %v5_e864, i32* %r2.global-to-local, align 4
  %v4_e868 = udiv i32 %v5_e854, 65536
  store i32 %v4_e868, i32* %r3.global-to-local, align 4
  %v3_e86c = icmp slt i8 %v6_e864, 0
  %v7_e874 = inttoptr i32 %v4_e864 to i8*
  store i8* %v7_e874, i8** %stack_var_-38, align 4
  br i1 %v3_e86c, label %dec_label_pc_e87c, label %dec_label_pc_ea6c

dec_label_pc_e87c:                                ; preds = %dec_label_pc_e85c
  %v2_e87c = load i32, i32* @global_var_1cbf0.98, align 4
  %v1_e880 = call i32 @function_11da0(i32 %v2_e87c)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e888 = load i32, i32* @r5, align 4
  %v2_e888 = inttoptr i32 %v1_e888 to i32*
  store i32 -1, i32* %v2_e888, align 4
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_e890:                                ; preds = %dec_label_pc_e654
  %v0_e898 = load i32, i32* @r4, align 4
  store i32 %v0_e898, i32* %r2.global-to-local, align 4
  %v3_e89c = call i32 @function_126bc(i32 2, i32 1, i32 %v0_e898)
  %v7_e8a0 = icmp eq i32 %v3_e89c, -1
  store i32 %v3_e89c, i32* %r5.global-to-local, align 4
  %v1_e8a8 = load i32, i32* @r8, align 4
  %v2_e8a8 = inttoptr i32 %v1_e8a8 to i32*
  store i32 %v3_e89c, i32* %v2_e8a8, align 4
  br i1 %v7_e8a0, label %dec_label_pc_e664, label %dec_label_pc_e8b0

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e890
  %v0_e8b0 = load i32, i32* @r4, align 4
  store i32 %v0_e8b0, i32* @r2, align 4
  %v2_e8b8 = call i32 @function_11cdc(i32 %v3_e89c, i32 3)
  %v1_e8c0 = or i32 %v2_e8b8, 2048
  store i32 %v1_e8c0, i32* @r2, align 4
  %v0_e8c4 = load i32, i32* %r5.global-to-local, align 4
  %v2_e8c8 = call i32 @function_11cdc(i32 %v0_e8c4, i32 4)
  store i32 ptrtoint (i32* @global_var_1cbf4.73 to i32), i32* %r2.global-to-local, align 4
  %v2_e8d0 = load i32, i32* @global_var_1cbf4.73, align 4
  store i32 %v2_e8d0, i32* %r3.global-to-local, align 4
  %v2_e8d4 = icmp eq i32 %v2_e8d0, 0
  br i1 %v2_e8d4, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_e8b0
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_11754.103 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e8b0, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e8e8 = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1cd70.101 to i8*), align 4
  %v5_e8f8 = call i32 @function_12518(i32 %v2_e8e8, %sockaddr* bitcast (i8** @global_var_1ce0c.81 to %sockaddr*), i32 16)
  br label %dec_label_pc_e664

dec_label_pc_e900:                                ; preds = %dec_label_pc_e6f4
  %v2_e908 = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e918 = call i32 @function_1262c(i32 %v2_e908, i32* nonnull %v4_e918, i32 2, i32 16384)
  br label %dec_label_pc_e714

dec_label_pc_e920:                                ; preds = %dec_label_pc_e758
  store i32 4, i32* @r4, align 4
  store i32 %v2_e928, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e944 = call i32 @function_12570(i32 %v2_e7d8, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e904)
  %v3_e948 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e948, i32* %r3.global-to-local, align 4
  %v2_e94c = icmp eq i32 %v3_e948, 0
  br i1 %v2_e94c, label %dec_label_pc_e9c8, label %dec_label_pc_e954

dec_label_pc_e954:                                ; preds = %dec_label_pc_e920
  %v2_e954 = load i32, i32* @global_var_1cbf0.98, align 4
  %v1_e958 = call i32 @function_11da0(i32 %v2_e954)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e960 = load i32, i32* @r5, align 4
  %v2_e960 = inttoptr i32 %v1_e960 to i32*
  store i32 -1, i32* %v2_e960, align 4
  %v0_e964 = call i32 @function_eb48()
  %v2_e96c = call i32 @function_11b28(i32 %v0_e964, i32 10)
  %v1_e970 = add i32 %v2_e96c, 1
  %v1_e974 = call i32 @function_131d8(i32 %v1_e970)
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_e97c:                                ; preds = %dec_label_pc_e724
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e928, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_e994 = call i32 @function_124c0(i32 %v2_e718, %sockaddr* %v5_e994, i32 %v2_e928, i32 16, i32 16)
  %v1_e998 = call i32 @function_f31c(i32 %v6_e994)
  %v1_e99c = call i32 @function_d1c4(i32 %v1_e998)
  store i32 %v1_e5ac, i32* %r2.global-to-local, align 4
  %v2_e9ac = call i32 @function_11ea0(i32 %v1_e9a8, i32 9)
  store i32 ptrtoint (i32* @global_var_1cd6c.86 to i32), i32* %r3.global-to-local, align 4
  %v2_e9b4 = load i32, i32* @global_var_1cd6c.86, align 4
  %v2_e9b8 = icmp eq i32 %v2_e9b4, 0
  br i1 %v2_e9b8, label %dec_label_pc_e9c0, label %dec_label_pc_ea60

dec_label_pc_e9c0:                                ; preds = %dec_label_pc_e97c, %dec_label_pc_ea60
  %v1_e9c4 = call i32 @function_13144(i32 0)
  br label %dec_label_pc_e9c8

dec_label_pc_e9c8:                                ; preds = %dec_label_pc_e920, %dec_label_pc_e9c0
  %v2_e9cc = call i32 @function_1149c(i8* %v1_e9cc)
  %sext = mul i32 %v2_e9cc, 16777216
  %v1_e9d0 = sdiv i32 %sext, 16777216
  %v7_e9d0 = inttoptr i32 %v1_e9d0 to i8*
  store i8* %v7_e9d0, i8** %stack_var_-38, align 4
  %v0_e9d4 = call i32 @function_11754()
  store i32 %v0_e9d4, i32* @global_var_1ce00.50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e9e8 = load i32, i32* @r4, align 4
  store i32 %v0_e9e8, i32* %r2.global-to-local, align 4
  %v0_e9ec = load i32, i32* @r5, align 4
  %v1_e9ec = inttoptr i32 %v0_e9ec to i32*
  %v2_e9ec = load i32, i32* %v1_e9ec, align 4
  %v5_e9f0 = call i32 @function_1262c(i32 %v2_e9ec, i32* nonnull @global_var_1464c.106, i32 %v0_e9e8, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e9fc = load i32, i32* @r5, align 4
  %v1_e9fc = inttoptr i32 %v0_e9fc to i32*
  %v2_e9fc = load i32, i32* %v1_e9fc, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ea08 = call i32 @function_1262c(i32 %v2_e9fc, i32* %v4_e918, i32 1, i32 16384)
  %v3_ea0c = load i8*, i8** %stack_var_-38, align 4
  %v4_ea0c = ptrtoint i8* %v3_ea0c to i32
  store i32 %v4_ea0c, i32* %r2.global-to-local, align 4
  %v3_ea10 = icmp eq i8* %v3_ea0c, null
  br i1 %v3_ea10, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_ea18

dec_label_pc_ea18:                                ; preds = %dec_label_pc_e9c8
  %v0_ea18 = load i32, i32* @r5, align 4
  %v1_ea18 = inttoptr i32 %v0_ea18 to i32*
  %v2_ea18 = load i32, i32* %v1_ea18, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_ea24 = call i32 @function_1262c(i32 %v2_ea18, i32* nonnull %stack_var_-140, i32 %v4_ea0c, i32 16384)
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_ea2c:                                ; preds = %dec_label_pc_ea6c, %dec_label_pc_e80c
  %v0_ea2c = load i32, i32* @r8, align 4
  %v1_ea2c = inttoptr i32 %v0_ea2c to i32*
  %v2_ea2c = load i32, i32* %v1_ea2c, align 4
  store i32 %v2_ea2c, i32* %r3.global-to-local, align 4
  %v7_ea30 = icmp eq i32 %v2_ea2c, 4
  br i1 %v7_ea30, label %dec_label_pc_e5f0.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_ea2c
  %v8_ea34 = icmp eq i32 %v2_ea2c, 11
  br i1 %v8_ea34, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_ea3c

dec_label_pc_ea3c:                                ; preds = %dec_label_pc_ea94, %bb44, %dec_label_pc_e844
  %v2_ea3c = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 59976, i32* @lr, align 4
  %v1_ea44 = icmp ne i32 %v2_ea3c, -1
  call void @__pseudo_cond_branch(i1 %v1_ea44, i32 ptrtoint (i32* @global_var_11da0.102 to i32))
  store i32 ptrtoint (i32* @global_var_1cbf0.98 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1cbf0.98, align 4
  %v1_ea58 = call i32 @function_131d8(i32 1)
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_ea60:                                ; preds = %dec_label_pc_e97c
  %v2_ea64 = call i32 @function_11ea0(i32 %v2_e9b4, i32 9)
  br label %dec_label_pc_e9c0

dec_label_pc_ea6c:                                ; preds = %dec_label_pc_e85c
  %v0_ea6c = load i32, i32* @r4, align 4
  %v1_ea6c = load i32, i32* @r8, align 4
  %v2_ea6c = inttoptr i32 %v1_ea6c to i32*
  store i32 %v0_ea6c, i32* %v2_ea6c, align 4
  store i32 %v2_ea74, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_ea80 = load i32, i32* @global_var_1cbf0.98, align 4
  %v9_ea88 = call i32 @function_125cc(i32 %v2_ea80, i32* nonnull %stack_var_-1548, i32 %v4_e864, i32 16386)
  %v7_ea8c = icmp eq i32 %v9_ea88, -1
  br i1 %v7_ea8c, label %dec_label_pc_ea2c, label %dec_label_pc_ea94

dec_label_pc_ea94:                                ; preds = %dec_label_pc_ea6c
  %v2_ea94 = icmp eq i32 %v9_ea88, 0
  br i1 %v2_ea94, label %dec_label_pc_ea3c, label %dec_label_pc_ea9c

dec_label_pc_ea9c:                                ; preds = %dec_label_pc_ea94
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_eaac = load i32, i32* @global_var_1cbf0.98, align 4
  %v5_eab0 = call i32 @function_125cc(i32 %v2_eaac, i32* nonnull %v4_e918, i32 2, i32 16384)
  %v3_eab4 = load i8*, i8** %stack_var_-38, align 4
  %v4_eab4 = ptrtoint i8* %v3_eab4 to i32
  %v4_eab8 = urem i32 %v4_e868, 256
  %v4_eabc = mul i32 %v4_eab4, 256
  %v5_eabc = or i32 %v4_eabc, %v4_eab8
  store i32 %v5_eabc, i32* %r2.global-to-local, align 4
  %v3_eac4 = sdiv i32 %v4_eabc, 256
  store i32 %v3_eac4, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_ead0 = load i32, i32* @global_var_1cbf0.98, align 4
  %v6_ead8 = inttoptr i32 %v5_eabc to i8*
  store i8* %v6_ead8, i8** %stack_var_-38, align 4
  %v8_eadc = call i32 @function_125cc(i32 %v2_ead0, i32* nonnull %stack_var_-1548, i32 %v5_eabc, i32 16384)
  %v3_eae0 = load i8*, i8** %stack_var_-38, align 4
  %v4_eae0 = ptrtoint i8* %v3_eae0 to i32
  store i32 %v4_eae0, i32* %r2.global-to-local, align 4
  %v4_eae4 = urem i32 %v3_eac4, 256
  store i32 %v4_eae4, i32* %r3.global-to-local, align 4
  %v6_eae8 = mul nuw nsw i32 %v4_eae4, 256
  %v7_eae8 = or i32 %v4_eae0, %v6_eae8
  %v9_eae8 = icmp eq i32 %v7_eae8, 0
  br i1 %v9_eae8, label %dec_label_pc_e5f0.backedge, label %dec_label_pc_eaf0

dec_label_pc_eaf0:                                ; preds = %dec_label_pc_ea9c
  %v7_eaf4 = call i32 @function_8320(i32* nonnull %stack_var_-1548, i32 %v7_eae8, i32 %v4_eae0, i32 %v4_eae4)
  br label %dec_label_pc_e5f0.backedge

dec_label_pc_eafc:                                ; preds = %dec_label_pc_e84c
  %v2_eb00 = load i32, i32* @global_var_1cbf0.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_eb10 = call i32 @function_125cc(i32 %v2_eb00, i32* nonnull %v4_e918, i32 2, i32 16384)
  br label %dec_label_pc_e5f0.backedge

; uselistorder directives
  uselistorder i32 %v4_eae4, { 2, 0, 1 }
  uselistorder i32 %v4_eae0, { 1, 0, 2 }
  uselistorder i32 %v3_eac4, { 1, 0 }
  uselistorder i32 %v5_eabc, { 1, 0, 2 }
  uselistorder i32 %v4_eabc, { 1, 0 }
  uselistorder i32 %v9_ea88, { 1, 0 }
  uselistorder i32 %v3_e89c, { 3, 2, 1, 0 }
  uselistorder i32 %v4_e864, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e838, { 1, 0 }
  uselistorder i32 %v2_e7d8, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e718, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e6dc, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e624, { 2, 1, 0 }
  uselistorder i32 %v1_e614, { 1, 2, 0 }
  uselistorder i32 %v1_e5fc, { 1, 2, 0 }
  uselistorder i32 %v2_e928, { 1, 0, 2 }
  uselistorder i32* %v4_e918, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_e5ec, { 1, 0, 2 }
  uselistorder i32 %v2_e5e8, { 1, 0, 2 }
  uselistorder i32 %v2_e494, { 0, 1, 8, 2, 3, 4, 5, 6, 7, 9 }
  uselistorder i32 %v2_e484, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e39c, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 45, 46, 40, 41, 37, 47, 48, 38, 39, 42, 43, 44 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 34, 35, 36 }
  uselistorder i32* @global_var_1cd6c.86, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1cd70.101 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1cd70.101, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1cd70.101 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1cbf0.98, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1cbec.75, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_e2a4, { 1, 0 }
  uselistorder i32 (i32)* @function_d774, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ebfc, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_e0a4, { 1, 0 }
  uselistorder i32* @global_var_1cbf4.73, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_e214.71 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_12730, { 1, 0 }
  uselistorder label %dec_label_pc_e9c8, { 1, 0 }
  uselistorder label %dec_label_pc_e9c0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e5f0.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e714, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_e664, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e654, { 1, 0 }
  uselistorder label %dec_label_pc_e610.dec_label_pc_e610_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e5f8.dec_label_pc_e5f8_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e450, { 2, 0, 1 }
}

define i32 @function_eb48() local_unnamed_addr {
dec_label_pc_eb48:
  %v2_eb54 = load i32, i32* @global_var_1cd74.108, align 4
  %v2_eb58 = load i32, i32* @global_var_1cd80.110, align 4
  store i32 ptrtoint (i32* @global_var_1cd78.112 to i32), i32* @lr, align 4
  %v4_eb64 = mul i32 %v2_eb54, 2048
  %v5_eb64 = xor i32 %v4_eb64, %v2_eb54
  %v4_eb68 = udiv i32 %v2_eb58, 524288
  %v5_eb68 = xor i32 %v4_eb68, %v2_eb58
  %v2_eb6c = load i32, i32* @global_var_1cd78.112, align 4
  %v2_eb70 = load i32, i32* @global_var_1cd7c.114, align 4
  %v2_eb74 = xor i32 %v5_eb68, %v5_eb64
  %v4_eb78 = udiv i32 %v5_eb64, 256
  %v5_eb78 = xor i32 %v2_eb74, %v4_eb78
  store i32 %v2_eb6c, i32* @global_var_1cd74.108, align 4
  store i32 %v2_eb70, i32* @global_var_1cd78.112, align 4
  store i32 %v2_eb58, i32* @global_var_1cd7c.114, align 4
  store i32 %v5_eb78, i32* @global_var_1cd80.110, align 4
  ret i32 %v5_eb78

; uselistorder directives
  uselistorder i32 %v2_eb58, { 2, 1, 0 }
  uselistorder i32 %v2_eb54, { 1, 0 }
}

define i32 @function_eba0(i32 %arg1) local_unnamed_addr {
dec_label_pc_eba0:
  %stack_var_-12 = alloca i32, align 4
  %v3_eba0 = load i32, i32* @r4, align 4
  store i32 %v3_eba0, i32* %stack_var_-12, align 4
  %v2_eba8 = call i32 @function_12070(i32* null)
  store i32 %v2_eba8, i32* @global_var_1cd74.108, align 4
  %v0_ebb4 = call i32 @function_11df8()
  store i32 %v0_ebb4, i32* @r4, align 4
  %v0_ebbc = call i32 @function_11e24()
  %v0_ebc4 = load i32, i32* @r4, align 4
  %v2_ebc4 = xor i32 %v0_ebc4, %v0_ebbc
  store i32 %v2_ebc4, i32* @r4, align 4
  store i32 %v2_ebc4, i32* @global_var_1cd78.112, align 4
  %v1_ebcc = call i32 @function_12380(i32 %v0_ebbc)
  %v2_ebd0 = load i32, i32* @global_var_1cd78.112, align 4
  %v2_ebdc = xor i32 %v2_ebd0, %v1_ebcc
  store i32 %v2_ebdc, i32* @global_var_1cd80.110, align 4
  store i32 %v1_ebcc, i32* @global_var_1cd7c.114, align 4
  %v2_ebe8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ebe8, i32* @r4, align 4
  ret i32 %v1_ebcc

; uselistorder directives
  uselistorder i32 %v1_ebcc, { 1, 2, 0 }
  uselistorder i32 %v0_ebbc, { 1, 0 }
  uselistorder i32 ()* @function_11e24, { 2, 1, 0 }
}

define i32 @function_ebfc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ebfc:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ebfc = load i32, i32* @r4, align 4
  store i32 %v3_ebfc, i32* %stack_var_-36, align 4
  %v6_ebfc = load i32, i32* @r5, align 4
  %v9_ebfc = load i32, i32* @r6, align 4
  %v12_ebfc = load i32, i32* @r7, align 4
  %v28_ebfc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_ec04 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ec10 = call i32 @function_10dd4(i32 33)
  %v3_ec1c = call i32 @function_10cf0(i32 33, i32* null)
  %v2_ec28 = inttoptr i32 %v3_ec1c to i8*
  %v3_ec28 = call i32 @function_12480(i32 %v2_ec04, i8* %v2_ec28)
  %v2_ec2c = icmp eq i32 %arg2, 0
  br i1 %v2_ec2c, label %dec_label_pc_eca8, label %dec_label_pc_ec34

dec_label_pc_ec34:                                ; preds = %dec_label_pc_ebfc
  store i32 ptrtoint (i32* @global_var_1cd74.108 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd78.112 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd7c.114 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1cd80.110 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_ec7c = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_ec48

dec_label_pc_ec48:                                ; preds = %dec_label_pc_ec48.dec_label_pc_ec48_crit_edge, %dec_label_pc_ec34
  %v1_ec6c = phi i32 [ %v1_ec6c.pre, %dec_label_pc_ec48.dec_label_pc_ec48_crit_edge ], [ ptrtoint (i32* @global_var_1cd74.108 to i32), %dec_label_pc_ec34 ]
  %v2_ec48 = load i32, i32* @global_var_1cd80.110, align 4
  store i32 %v2_ec48, i32* %r2.global-to-local, align 4
  %v2_ec4c = load i32, i32* @global_var_1cd74.108, align 4
  %v4_ec50 = udiv i32 %v2_ec48, 524288
  %v5_ec50 = xor i32 %v4_ec50, %v2_ec48
  %v4_ec54 = mul i32 %v2_ec4c, 2048
  %v5_ec54 = xor i32 %v4_ec54, %v2_ec4c
  %v2_ec58 = xor i32 %v5_ec50, %v5_ec54
  %v2_ec5c = load i32, i32* @global_var_1cd78.112, align 4
  %v2_ec60 = load i32, i32* @global_var_1cd7c.114, align 4
  store i32 %v2_ec60, i32* %ip.global-to-local, align 4
  %v4_ec64 = udiv i32 %v5_ec54, 256
  %v5_ec64 = xor i32 %v2_ec58, %v4_ec64
  store i32 %v5_ec64, i32* @r4, align 4
  %v2_ec6c = inttoptr i32 %v1_ec6c to i32*
  store i32 %v2_ec5c, i32* %v2_ec6c, align 4
  %v0_ec70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ec70 = load i32, i32* %r8.global-to-local, align 4
  %v2_ec70 = inttoptr i32 %v1_ec70 to i32*
  store i32 %v0_ec70, i32* %v2_ec70, align 4
  %v0_ec74 = load i32, i32* %r2.global-to-local, align 4
  %v1_ec74 = load i32, i32* @r7, align 4
  %v2_ec74 = inttoptr i32 %v1_ec74 to i32*
  store i32 %v0_ec74, i32* %v2_ec74, align 4
  %v0_ec78 = load i32, i32* @r4, align 4
  %v1_ec78 = load i32, i32* @r6, align 4
  %v2_ec78 = inttoptr i32 %v1_ec78 to i32*
  store i32 %v0_ec78, i32* %v2_ec78, align 4
  %v2_ec7c = call i32 @function_1149c(i8* %v1_ec7c)
  %v0_ec84 = load i32, i32* @r4, align 4
  %v2_ec88 = call i32 @function_11b28(i32 %v0_ec84, i32 %v2_ec7c)
  %v2_ec90 = add i32 %v2_ec88, %v28_ebfc
  %v1_ec94 = add i32 %v2_ec90, -32
  %v2_ec94 = inttoptr i32 %v1_ec94 to i8*
  %v3_ec94 = load i8, i8* %v2_ec94, align 1
  %v2_ec98 = load i32, i32* @r5, align 4
  %v3_ec98 = load i32, i32* %fp.global-to-local, align 4
  %v4_ec98 = add i32 %v3_ec98, %v2_ec98
  %v5_ec98 = inttoptr i32 %v4_ec98 to i8*
  store i8 %v3_ec94, i8* %v5_ec98, align 1
  %v0_ec9c = load i32, i32* @r5, align 4
  %v1_ec9c = add i32 %v0_ec9c, 1
  store i32 %v1_ec9c, i32* @r5, align 4
  %v1_eca0 = load i32, i32* %sb.global-to-local, align 4
  %v9_eca0 = icmp eq i32 %v1_ec9c, %v1_eca0
  br i1 %v9_eca0, label %dec_label_pc_eca8, label %dec_label_pc_ec48.dec_label_pc_ec48_crit_edge

dec_label_pc_ec48.dec_label_pc_ec48_crit_edge:    ; preds = %dec_label_pc_ec48
  %v1_ec6c.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ec48

dec_label_pc_eca8:                                ; preds = %dec_label_pc_ec48, %dec_label_pc_ebfc
  %v1_ecac = call i32 @function_10d1c(i32 33)
  %v2_ecb4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ecb4, i32* @r4, align 4
  store i32 %v6_ebfc, i32* @r5, align 4
  store i32 %v9_ebfc, i32* @r6, align 4
  store i32 %v12_ebfc, i32* @r7, align 4
  ret i32 %v1_ecac

; uselistorder directives
  uselistorder i32 %v2_ec4c, { 1, 0 }
  uselistorder i32 %v2_ec48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_ecc8(i8* %arg1) local_unnamed_addr {
dec_label_pc_ecc8:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_ecc8 = load i32, i32* @r4, align 4
  store i32 %v3_ecc8, i32* %stack_var_-36, align 4
  %v9_ecc8 = load i32, i32* @r6, align 4
  %v12_ecc8 = load i32, i32* @r7, align 4
  %v15_ecc8 = load i32, i32* @r8, align 4
  %v18_ecc8 = load i32, i32* @sb, align 4
  %v21_ecc8 = load i32, i32* @sl, align 4
  %v24_ecc8 = load i32, i32* @fp, align 4
  %v0_eccc = load i32, i32* @r1, align 4
  store i32 %v0_eccc, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_eccc, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ecc8
  store i32 %v3_ecc8, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_ecc8
  store i32 ptrtoint (i32* @global_var_1cd80.110 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd7c.114 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd78.112 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd74.108 to i32), i32* %r8.global-to-local, align 4
  %v2_ece8 = load i32, i32* @global_var_1cd80.110, align 4
  store i32 %v2_ece8, i32* @lr, align 4
  %v2_ecec = load i32, i32* @global_var_1cd7c.114, align 4
  store i32 %v2_ecec, i32* %r7.global-to-local, align 4
  %v2_ecf0 = load i32, i32* @global_var_1cd78.112, align 4
  store i32 %v2_ecf0, i32* %r6.global-to-local, align 4
  %v2_ecf4 = load i32, i32* @global_var_1cd74.108, align 4
  br label %dec_label_pc_ed20

dec_label_pc_ecfc:                                ; preds = %dec_label_pc_ed4c
  %v3_ed54 = sdiv i32 %v5_ed38, 256
  %v1_ecfc = trunc i32 %v3_ed54 to i8
  %v3_ecfc = add i32 %v9_ed40, 1
  %v4_ecfc = inttoptr i32 %v3_ecfc to i8*
  store i8 %v1_ecfc, i8* %v4_ecfc, align 1
  %v0_ed00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed00 = trunc i32 %v0_ed00 to i8
  %v2_ed00 = load i32, i32* %r5.global-to-local, align 4
  %v3_ed00 = inttoptr i32 %v2_ed00 to i8*
  store i8 %v1_ed00, i8* %v3_ed00, align 1
  %v0_ed04 = load i32, i32* %r5.global-to-local, align 4
  %v1_ed04 = add i32 %v0_ed04, 2
  store i32 %v1_ed04, i32* %r5.global-to-local, align 4
  %v0_ed08.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed08:                                ; preds = %.thread, %dec_label_pc_ecfc
  %v0_ed08 = phi i32 [ %v9_ed44, %.thread ], [ %v0_ed08.pre, %dec_label_pc_ecfc ]
  %v2_ecfc7 = phi i32 [ %v12_ed40, %.thread ], [ %v1_ed04, %dec_label_pc_ecfc ]
  %tmp22 = icmp slt i32 %v0_ed08, 1
  br i1 %tmp22, label %dec_label_pc_ed88, label %dec_label_pc_ed14

dec_label_pc_ed14:                                ; preds = %dec_label_pc_ed08
  %v0_ed0c = load i32, i32* %r6.global-to-local, align 4
  %v0_ed14 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_ed14, i32* %r6.global-to-local, align 4
  %v0_ed18 = load i32, i32* @lr, align 4
  store i32 %v0_ed18, i32* %r7.global-to-local, align 4
  %v0_ed1c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed1c, i32* @lr, align 4
  br label %dec_label_pc_ed20

dec_label_pc_ed20:                                ; preds = %bb21, %dec_label_pc_ed14
  %v0_ed70 = phi i32 [ %v2_ecf0, %bb21 ], [ %v0_ed14, %dec_label_pc_ed14 ]
  %v9_ed40 = phi i32 [ %tmp, %bb21 ], [ %v2_ecfc7, %dec_label_pc_ed14 ]
  %v0_ed58 = phi i32 [ %v0_eccc, %bb21 ], [ %v0_ed08, %dec_label_pc_ed14 ]
  %v0_ed64 = phi i32 [ %v2_ece8, %bb21 ], [ %v0_ed1c, %dec_label_pc_ed14 ]
  %v0_ed60 = phi i32 [ %v2_ecf4, %bb21 ], [ %v0_ed0c, %dec_label_pc_ed14 ]
  %v4_ed20 = mul i32 %v0_ed60, 2048
  %v5_ed20 = xor i32 %v4_ed20, %v0_ed60
  %v4_ed24 = udiv i32 %v0_ed64, 524288
  %v5_ed24 = xor i32 %v4_ed24, %v0_ed64
  %v2_ed28 = xor i32 %v5_ed24, %v5_ed20
  %v4_ed38 = udiv i32 %v5_ed20, 256
  %v5_ed38 = xor i32 %v4_ed38, %v2_ed28
  store i32 %v5_ed38, i32* %r3.global-to-local, align 4
  %v7_ed40 = icmp sgt i32 %v0_ed58, 3
  br i1 %v7_ed40, label %.thread, label %dec_label_pc_ed4c

.thread:                                          ; preds = %dec_label_pc_ed20
  %v10_ed40 = inttoptr i32 %v9_ed40 to i32*
  store i32 %v5_ed38, i32* %v10_ed40, align 4
  %v11_ed40 = load i32, i32* %r5.global-to-local, align 4
  %v12_ed40 = add i32 %v11_ed40, 4
  store i32 %v12_ed40, i32* %r5.global-to-local, align 4
  %v8_ed44 = load i32, i32* %r4.global-to-local, align 4
  %v9_ed44 = add i32 %v8_ed44, -4
  store i32 %v9_ed44, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed08

dec_label_pc_ed4c:                                ; preds = %dec_label_pc_ed20
  store i32 %v5_ed38, i32* %r3.global-to-local, align 4
  %v7_ed50 = icmp eq i32 %v0_ed58, 1
  %v1_ed58 = add i32 %v0_ed58, -2
  store i32 %v1_ed58, i32* %r4.global-to-local, align 4
  br i1 %v7_ed50, label %dec_label_pc_ed60, label %dec_label_pc_ecfc

dec_label_pc_ed60:                                ; preds = %dec_label_pc_ed4c
  store i32 %v5_ed38, i32* %r3.global-to-local, align 4
  %v1_ed70 = load i32, i32* %r8.global-to-local, align 4
  %v2_ed70 = inttoptr i32 %v1_ed70 to i32*
  store i32 %v0_ed70, i32* %v2_ed70, align 4
  %v0_ed74 = load i32, i32* %r7.global-to-local, align 4
  %v1_ed74 = load i32, i32* %sl.global-to-local, align 4
  %v2_ed74 = inttoptr i32 %v1_ed74 to i32*
  store i32 %v0_ed74, i32* %v2_ed74, align 4
  %v0_ed78 = load i32, i32* @lr, align 4
  %v1_ed78 = load i32, i32* %sb.global-to-local, align 4
  %v2_ed78 = inttoptr i32 %v1_ed78 to i32*
  store i32 %v0_ed78, i32* %v2_ed78, align 4
  %v0_ed7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ed7c = load i32, i32* %fp.global-to-local, align 4
  %v2_ed7c = inttoptr i32 %v1_ed7c to i32*
  store i32 %v0_ed7c, i32* %v2_ed7c, align 4
  %v0_ed80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed80 = trunc i32 %v0_ed80 to i8
  %v2_ed80 = load i32, i32* %r5.global-to-local, align 4
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  store i8 %v1_ed80, i8* %v3_ed80, align 1
  %v2_ed84 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ed84, i32* @r4, align 4
  store i32 %v9_ecc8, i32* @r6, align 4
  store i32 %v12_ecc8, i32* @r7, align 4
  store i32 %v15_ecc8, i32* @r8, align 4
  store i32 %v18_ecc8, i32* @sb, align 4
  store i32 %v21_ecc8, i32* @sl, align 4
  store i32 %v24_ecc8, i32* @fp, align 4
  ret i32 %v5_ed20

dec_label_pc_ed88:                                ; preds = %dec_label_pc_ed08
  %v0_ed88 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed88 = load i32, i32* %fp.global-to-local, align 4
  %v2_ed88 = inttoptr i32 %v1_ed88 to i32*
  store i32 %v0_ed88, i32* %v2_ed88, align 4
  %v0_ed8c = load i32, i32* @lr, align 4
  %v1_ed8c = load i32, i32* %sb.global-to-local, align 4
  %v2_ed8c = inttoptr i32 %v1_ed8c to i32*
  store i32 %v0_ed8c, i32* %v2_ed8c, align 4
  %v0_ed90 = load i32, i32* %r7.global-to-local, align 4
  %v1_ed90 = load i32, i32* %sl.global-to-local, align 4
  %v2_ed90 = inttoptr i32 %v1_ed90 to i32*
  store i32 %v0_ed90, i32* %v2_ed90, align 4
  %v0_ed94 = load i32, i32* %r6.global-to-local, align 4
  %v1_ed94 = load i32, i32* %r8.global-to-local, align 4
  %v2_ed94 = inttoptr i32 %v1_ed94 to i32*
  store i32 %v0_ed94, i32* %v2_ed94, align 4
  %v2_ed98 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ed98, i32* @r4, align 4
  store i32 %v9_ecc8, i32* @r6, align 4
  store i32 %v12_ecc8, i32* @r7, align 4
  store i32 %v15_ecc8, i32* @r8, align 4
  store i32 %v18_ecc8, i32* @sb, align 4
  store i32 %v21_ecc8, i32* @sl, align 4
  store i32 %v24_ecc8, i32* @fp, align 4
  ret i32 %v5_ed20

; uselistorder directives
  uselistorder i32 %v9_ed44, { 1, 0 }
  uselistorder i32 %v12_ed40, { 1, 0 }
  uselistorder i32 %v5_ed38, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_ed20, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ed60, { 1, 0 }
  uselistorder i32 %v0_ed64, { 1, 0 }
  uselistorder i32 %v0_ed08, { 1, 0 }
  uselistorder i32 %v24_ecc8, { 1, 0 }
  uselistorder i32 %v21_ecc8, { 1, 0 }
  uselistorder i32 %v18_ecc8, { 1, 0 }
  uselistorder i32 %v15_ecc8, { 1, 0 }
  uselistorder i32 %v12_ecc8, { 1, 0 }
  uselistorder i32 %v9_ecc8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 6, 5, 1, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1cd74.108, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1cd74.108 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1cd78.112, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1cd7c.114, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1cd80.110, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_ed20, { 1, 0 }
}

define i32 @function_edac(i32 %arg1) local_unnamed_addr {
dec_label_pc_edac:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_edac = load i32, i32* @r4, align 4
  store i32 %v3_edac, i32* %stack_var_-8, align 4
  %v6_edac = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_edb0 = icmp eq i32 %arg1, 0
  br i1 %v2_edb0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_edac
  store i32 %v3_edac, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_edac
  %v1_edb8 = add i32 %arg1, 4
  %v2_edb8 = inttoptr i32 %v1_edb8 to i32*
  %v3_edb8 = load i32, i32* %v2_edb8, align 4
  %v1_edc0 = icmp ne i32 %v3_edb8, 0
  call void @__pseudo_cond_branch(i1 %v1_edc0, i32 ptrtoint (i32* @global_var_12a00.25 to i32))
  %v0_edc4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_edc4, i32* @r0, align 4
  %v2_edc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_edc8, i32* @r4, align 4
  store i32 %v6_edac, i32* @lr, align 4
  %v0_edcc = call i32 @function_12a00()
  ret i32 %v0_edcc
}

define i32 @function_edd0(i8* %arg1) local_unnamed_addr {
dec_label_pc_edd0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_edd0 = load i32, i32* @r4, align 4
  store i32 %v3_edd0, i32* %stack_var_-36, align 4
  %v6_edd0 = load i32, i32* @r5, align 4
  %v9_edd0 = load i32, i32* @r6, align 4
  %v12_edd0 = load i32, i32* @r7, align 4
  %v15_edd0 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_ede8 = call i32 @function_129a8(i32 1, i32 8)
  %v0_edf0 = load i32, i32* @r4, align 4
  %v1_edf0 = inttoptr i32 %v0_edf0 to i8*
  store i32 %v0_edf0, i32* %r0.global-to-local, align 4
  %v3_edf4 = call i32 @function_1149c(i8* %v1_edf0)
  %v2_edfc = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_edfc, i32* %fp.global-to-local, align 4
  %v2_ee00 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ee04 = add i32 %v3_edf4, 1
  store i32 %v1_ee04, i32* %r0.global-to-local, align 4
  %v2_ee08 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ee08, i32* %r2.global-to-local, align 4
  store i32 %v2_edfc, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_ee48162 = icmp eq i32 %v1_ee04, 0
  store i1 %v2_ee48162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_ee50163 = or i32 %v2_ee08, 1
  store i32 %v1_ee50163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ee04, 1
  br i1 %tmp124164, label %dec_label_pc_ee58, label %dec_label_pc_ee18.lr.ph

dec_label_pc_ee18.lr.ph:                          ; preds = %dec_label_pc_edd0
  %v0_ee18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ee18

dec_label_pc_ee18:                                ; preds = %dec_label_pc_ee18.lr.ph, %.thread12
  %v1_ee2c176.off0 = phi i8 [ 0, %dec_label_pc_ee18.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ee18 = phi i32 [ %v0_ee18.pre, %dec_label_pc_ee18.lr.ph ], [ %v1_ee3c, %.thread12 ]
  %v2_ee5c165 = phi i32 [ %v2_ee08, %dec_label_pc_ee18.lr.ph ], [ %v0_ee44, %.thread12 ]
  %v1_ee18 = inttoptr i32 %v0_ee18 to i8*
  %v2_ee18 = load i8, i8* %v1_ee18, align 1
  %v3_ee18 = zext i8 %v2_ee18 to i32
  store i32 %v3_ee18, i32* %r3.global-to-local, align 4
  %v2_ee1c = icmp eq i8 %v2_ee18, 0
  store i1 %v2_ee1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee1c, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ee18
  %v8_ee20 = icmp eq i8 %v2_ee18, 46
  store i1 %v8_ee20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee20, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_ee24 = inttoptr i32 %v2_ee5c165 to i8*
  store i8 %v2_ee18, i8* %v4_ee24, align 1
  %v5_ee24 = load i32, i32* %r2.global-to-local, align 4
  %v6_ee24 = add i32 %v5_ee24, 1
  store i32 %v6_ee24, i32* %r2.global-to-local, align 4
  %v0_ee28.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee28.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_ee2c.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_ee2c.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ee18
  %v1_ee2c.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_ee2c176.off0, %bb ], [ %v1_ee2c176.off0, %dec_label_pc_ee18 ]
  %v3_ee2c = load i32, i32* %r5.global-to-local, align 4
  %v4_ee2c = inttoptr i32 %v3_ee2c to i8*
  store i8 %v1_ee2c.off0, i8* %v4_ee2c, align 1
  %v0_ee30.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ee30.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_ee24, i32* %r1.global-to-local, align 4
  %v1_ee30 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee30 = urem i32 %v1_ee30, 256
  store i32 %v2_ee30, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_ee3010 = load i32, i32* %ip.global-to-local, align 4
  %v2_ee3011 = urem i32 %v1_ee3010, 256
  store i32 %v2_ee3011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_ee34.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_ee34.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_ee4c.pre = phi i32 [ %v2_ee3011, %..thread12_crit_edge ], [ %v2_ee30, %bb122 ], [ 0, %bb123 ]
  %v0_ee3c = load i32, i32* @r4, align 4
  %v1_ee3c = add i32 %v0_ee3c, 1
  store i32 %v1_ee3c, i32* @r4, align 4
  %v0_ee40 = load i32, i32* %r0.global-to-local, align 4
  %v1_ee40 = add i32 %v0_ee40, -1
  store i32 %v1_ee40, i32* %r0.global-to-local, align 4
  %v0_ee44 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_ee44, i32* %r2.global-to-local, align 4
  %v2_ee48 = icmp eq i32 %v1_ee40, 0
  store i1 %v2_ee48, i1* %cpsr_z.global-to-local, align 1
  %v1_ee4c = add nuw nsw i32 %v0_ee4c.pre, 1
  store i32 %v1_ee4c, i32* %ip.global-to-local, align 4
  %v1_ee50 = add i32 %v0_ee44, 1
  store i32 %v1_ee50, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_ee40, 1
  %extract.t179 = trunc i32 %v0_ee4c.pre to i8
  br i1 %tmp124, label %dec_label_pc_ee58, label %dec_label_pc_ee18

dec_label_pc_ee58:                                ; preds = %.thread12, %dec_label_pc_edd0
  %v2_ee5c.lcssa = phi i32 [ %v2_ee08, %dec_label_pc_edd0 ], [ %v0_ee44, %.thread12 ]
  %v3_ede8 = inttoptr i32 %v2_ede8 to i8*
  store i32 0, i32* @r4, align 4
  %v3_ee5c = inttoptr i32 %v2_ee5c.lcssa to i8*
  store i8 0, i8* %v3_ee5c, align 1
  store i32 %v2_edfc, i32* %r0.global-to-local, align 4
  %v1_ee64 = bitcast i32* %stack_var_-2228 to i8*
  %v2_ee64 = call i32 @function_1149c(i8* %v1_ee64)
  %v2_ee68 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_ee68, i32* %r1.global-to-local, align 4
  %v0_ee6c = load i32, i32* %fp.global-to-local, align 4
  %v2_ee6c = add i32 %v0_ee6c, %v2_ee64
  store i32 %v2_ee6c, i32* @r5, align 4
  %v0_ee70 = load i32, i32* @r4, align 4
  store i32 %v0_ee70, i32* %stack_var_-64, align 4
  store i32 %v2_edfc, i32* %r0.global-to-local, align 4
  %v2_ee84 = call i32 @function_1149c(i8* %v1_ee64)
  %v1_ee88 = add i32 %v2_ee84, 17
  store i32 %v1_ee88, i32* %r0.global-to-local, align 4
  %v0_ee90 = call i32 @function_eb48()
  store i32 %v0_ee90, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_ee9c = call i32 @function_11b28(i32 %v0_ee90, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_eea8 = urem i32 %v2_ee9c, 65536
  store i32 %v6_eea8, i32* %r3.global-to-local, align 4
  %v2_eeb0 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_eeb0, i32* @r0, align 4
  %v0_eeb8 = call i32 @function_1153c()
  %sext = mul i32 %v2_ee9c, 16777216
  %v4_eebc = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_ee68, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_eebc, i32* %lr.global-to-local, align 4
  %v0_ef04 = load i32, i32* @r5, align 4
  %v2_ef04 = add i32 %v0_ef04, 1
  store i32 %v2_ef04, i32* %ip.global-to-local, align 4
  %v2_ef08 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_ef08, i32* %r1.global-to-local, align 4
  %v5_ef0c = trunc i32 %v4_eebc to i8
  store i8 %v5_ef0c, i8* %stack_var_-2240, align 1
  %v0_ef24 = load i32, i32* @r4, align 4
  %v1_ef24 = trunc i32 %v0_ef24 to i8
  %v4_ef24 = inttoptr i32 %v2_ef04 to i8*
  store i8 %v1_ef24, i8* %v4_ef24, align 1
  %v0_ef28 = load i32, i32* @r4, align 4
  %v1_ef28 = trunc i32 %v0_ef28 to i8
  %v2_ef28 = load i32, i32* %ip.global-to-local, align 4
  %v3_ef28 = add i32 %v2_ef28, 2
  %v4_ef28 = inttoptr i32 %v3_ef28 to i8*
  store i8 %v1_ef28, i8* %v4_ef28, align 1
  %v0_ef2c = load i32, i32* %r0.global-to-local, align 4
  %v1_ef2c = trunc i32 %v0_ef2c to i8
  %v2_ef2c = load i32, i32* %ip.global-to-local, align 4
  %v3_ef2c = add i32 %v2_ef2c, 3
  %v4_ef2c = inttoptr i32 %v3_ef2c to i8*
  store i8 %v1_ef2c, i8* %v4_ef2c, align 1
  %v0_ef30 = load i32, i32* %r0.global-to-local, align 4
  %v1_ef30 = trunc i32 %v0_ef30 to i8
  %v2_ef30 = load i32, i32* %ip.global-to-local, align 4
  %v3_ef30 = add i32 %v2_ef30, 1
  %v4_ef30 = inttoptr i32 %v3_ef30 to i8*
  store i8 %v1_ef30, i8* %v4_ef30, align 1
  %v0_ef38 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_ef38, i32* %sl.global-to-local, align 4
  %v2_ef40 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_ef40, i32* @r6, align 4
  %v3_ef78 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_ef94 = bitcast i8* %stack_var_-2240 to i32*
  %v2_efe4 = ptrtoint i32* %stack_var_-36 to i32
  %v2_f010 = ptrtoint i32* %stack_var_-48 to i32
  %v6_f06c = bitcast i8* %stack_var_-4288 to i32*
  %v1_f0e8 = add i32 %v2_ef08, 12
  %v1_f0f0 = inttoptr i32 %v1_f0e8 to i8*
  %v1_f104 = add i32 %v2_ef08, 1
  %v2_f104 = inttoptr i32 %v1_f104 to i8*
  %v1_f120 = add i32 %v2_ef08, 6
  %v2_f120 = inttoptr i32 %v1_f120 to i8*
  %v1_f124 = add i32 %v2_ef08, 7
  %v2_f124 = inttoptr i32 %v1_f124 to i8*
  br label %dec_label_pc_ef44

dec_label_pc_ef44:                                ; preds = %dec_label_pc_f098, %dec_label_pc_ee58
  %v1_ef48 = phi i32 [ %v0_ef44.pre, %dec_label_pc_f098 ], [ -1, %dec_label_pc_ee58 ]
  %v7_ef44 = icmp eq i32 %v1_ef48, -1
  store i1 %v7_ef44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef44, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ef44
  store i32 %v1_ef48, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_ef44, %bb125
  store i32 61264, i32* @lr, align 4
  %v1_ef4c = xor i1 %v7_ef44, true
  call void @__pseudo_cond_branch(i1 %v1_ef4c, i32 ptrtoint (i32* @global_var_11da0.102 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ef5c = call i32 @function_126bc(i32 2, i32 2, i32 0)
  store i32 %v3_ef5c, i32* %r0.global-to-local, align 4
  %v7_ef60 = icmp eq i32 %v3_ef5c, -1
  store i1 %v7_ef60, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ef5c, i32* @r7, align 4
  br i1 %v7_ef60, label %dec_label_pc_f0d8, label %dec_label_pc_ef6c

dec_label_pc_ef6c:                                ; preds = %bb126
  store i32 %v2_eeb0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_ef78 = call i32 @function_12518(i32 %v3_ef5c, %sockaddr* %v3_ef78, i32 16)
  store i32 %v4_ef78, i32* %r0.global-to-local, align 4
  %v7_ef7c = icmp eq i32 %v4_ef78, -1
  store i1 %v7_ef7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef7c, label %dec_label_pc_f0a0, label %dec_label_pc_ef84

dec_label_pc_ef84:                                ; preds = %dec_label_pc_ef6c
  %v0_ef84 = load i32, i32* @r7, align 4
  store i32 %v0_ef84, i32* %r0.global-to-local, align 4
  store i32 %v2_ee00, i32* %r1.global-to-local, align 4
  store i32 %v1_ee88, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ef94 = call i32 @function_1262c(i32 %v0_ef84, i32* %v4_ef94, i32 %v1_ee88, i32 16384)
  store i32 %v5_ef94, i32* %r0.global-to-local, align 4
  %v7_ef98 = icmp eq i32 %v5_ef94, -1
  store i1 %v7_ef98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef98, label %dec_label_pc_f0a0, label %dec_label_pc_efa0

dec_label_pc_efa0:                                ; preds = %dec_label_pc_ef84
  %v0_efa0 = load i32, i32* @r7, align 4
  store i32 %v0_efa0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_efac = call i32 @function_11cdc(i32 3, i32 %v0_efa0)
  store i32 0, i32* @r4, align 4
  %v1_efb4 = or i32 %v2_efac, 2048
  store i32 %v1_efb4, i32* @r2, align 4
  %v0_efb8 = load i32, i32* @r7, align 4
  store i32 %v0_efb8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_efc0 = call i32 @function_11cdc(i32 4, i32 %v0_efb8)
  store i32 %v2_efc0, i32* %r0.global-to-local, align 4
  %v0_efc4 = load i32, i32* @r4, align 4
  store i32 %v0_efc4, i32* %r3.global-to-local, align 4
  %v2_efc8154 = load i32, i32* @r6, align 4
  %v3_efc8155 = add i32 %v2_efc8154, %v0_efc4
  %v4_efc8156 = inttoptr i32 %v3_efc8155 to i32*
  store i32 %v0_efc4, i32* %v4_efc8156, align 4
  %v0_efcc157 = load i32, i32* %r3.global-to-local, align 4
  %v1_efcc158 = add i32 %v0_efcc157, 4
  store i32 %v1_efcc158, i32* %r3.global-to-local, align 4
  %v7_efd0159 = icmp eq i32 %v1_efcc158, 128
  br i1 %v7_efd0159, label %dec_label_pc_efd8, label %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge

dec_label_pc_efc8.dec_label_pc_efc8_crit_edge:    ; preds = %dec_label_pc_efa0, %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge
  %v1_efcc160 = phi i32 [ %v1_efcc, %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge ], [ %v1_efcc158, %dec_label_pc_efa0 ]
  %v0_efc8.pre = load i32, i32* @r4, align 4
  %v2_efc8 = load i32, i32* @r6, align 4
  %v3_efc8 = add i32 %v2_efc8, %v1_efcc160
  %v4_efc8 = inttoptr i32 %v3_efc8 to i32*
  store i32 %v0_efc8.pre, i32* %v4_efc8, align 4
  %v0_efcc = load i32, i32* %r3.global-to-local, align 4
  %v1_efcc = add i32 %v0_efcc, 4
  store i32 %v1_efcc, i32* %r3.global-to-local, align 4
  %v7_efd0 = icmp eq i32 %v1_efcc, 128
  br i1 %v7_efd0, label %dec_label_pc_efd8, label %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge

dec_label_pc_efd8:                                ; preds = %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge, %dec_label_pc_efa0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_efd8 = load i32, i32* @r7, align 4
  %v3_efd8 = udiv i32 %v0_efd8, 32
  %v3_efe0 = mul nuw nsw i32 %v3_efd8, 4
  store i32 %v3_efe0, i32* %r3.global-to-local, align 4
  store i32 %v2_efe4, i32* %r2.global-to-local, align 4
  %v2_efe8 = add i32 %v3_efe0, %v2_efe4
  store i32 %v2_efe8, i32* @r5, align 4
  %v1_efec = add i32 %v2_efe8, -156
  %v2_efec = inttoptr i32 %v1_efec to i32*
  %v3_efec = load i32, i32* %v2_efec, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_eff4 = urem i32 %v0_efd8, 32
  store i32 %v1_eff4, i32* @r8, align 4
  %v7_eff8 = shl i32 1, %v1_eff4
  %v8_eff8 = or i32 %v3_efec, %v7_eff8
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_eff8, i32* %v2_efec, align 4
  %v0_f008 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f008, i32* %stack_var_-48, align 4
  store i32 %v2_f010, i32* @lr, align 4
  store i32 %v2_ee68, i32* %ip.global-to-local, align 4
  %v0_f018 = load i32, i32* @r7, align 4
  %v1_f018 = load i32, i32* %r3.global-to-local, align 4
  %v2_f018 = add i32 %v1_f018, %v0_f018
  store i32 %v2_f018, i32* %r0.global-to-local, align 4
  store i32 %v2_ef40, i32* %r1.global-to-local, align 4
  %v0_f024 = load i32, i32* @r4, align 4
  store i32 %v0_f024, i32* %r2.global-to-local, align 4
  store i32 %v0_f024, i32* %r3.global-to-local, align 4
  %v5_f030 = call i32 @function_11fc0(i32 %v2_f018, i32 %v2_ef40, i32 %v0_f024, i32 %v0_f024, i32 %v2_f010)
  store i32 %v5_f030, i32* %r0.global-to-local, align 4
  %v7_f034 = icmp eq i32 %v5_f030, -1
  store i1 %v7_f034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f034, label %dec_label_pc_f0b0, label %dec_label_pc_f03c

dec_label_pc_f03c:                                ; preds = %dec_label_pc_efd8
  %v2_f03c = icmp eq i32 %v5_f030, 0
  store i1 %v2_f03c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f03c, label %dec_label_pc_f090, label %dec_label_pc_f044

dec_label_pc_f044:                                ; preds = %dec_label_pc_f03c
  %v0_f044 = load i32, i32* @r5, align 4
  %v1_f044 = add i32 %v0_f044, -156
  %v2_f044 = inttoptr i32 %v1_f044 to i32*
  %v3_f044 = load i32, i32* %v2_f044, align 4
  %v1_f048 = load i32, i32* @r8, align 4
  %v6_f048 = ashr i32 %v3_f044, %v1_f048
  store i32 %v6_f048, i32* %r3.global-to-local, align 4
  %v1_f04c = urem i32 %v6_f048, 2
  %v2_f04c = icmp eq i32 %v1_f04c, 0
  store i1 %v2_f04c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f04c, label %dec_label_pc_f0b0, label %dec_label_pc_f054

dec_label_pc_f054:                                ; preds = %dec_label_pc_f044
  store i32 %v2_ef08, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f060 = load i32, i32* @r7, align 4
  store i32 %v0_f060, i32* %r0.global-to-local, align 4
  %v0_f064 = load i32, i32* @r4, align 4
  %v7_f06c = call i32 @function_125f8(i32 %v0_f060, i32* %v6_f06c, i32 2048, i32 16384, i32 %v0_f064, i32 %v0_f064)
  store i32 %v7_f06c, i32* %r4.global-to-local, align 4
  %v0_f074 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_f074, i32* %r0.global-to-local, align 4
  %v1_f078 = inttoptr i32 %v0_f074 to i8*
  %v2_f078 = call i32 @function_1149c(i8* %v1_f078)
  %v1_f07c = add i32 %v2_f078, 17
  store i32 %v1_f07c, i32* %r0.global-to-local, align 4
  %v0_f080 = load i32, i32* %r4.global-to-local, align 4
  %v3_f080 = icmp ult i32 %v0_f080, %v1_f07c
  %v9_f080 = icmp eq i32 %v0_f080, %v1_f07c
  store i1 %v9_f080, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_f080, label %dec_label_pc_f090, label %dec_label_pc_f0e4

dec_label_pc_f090:                                ; preds = %dec_label_pc_f054, %dec_label_pc_f0e4, %dec_label_pc_f120, %dec_label_pc_f03c, %dec_label_pc_f0d8
  %v0_f090 = load i32, i32* %sl.global-to-local, align 4
  %v7_f090 = icmp eq i32 %v0_f090, 5
  store i1 %v7_f090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f090, label %dec_label_pc_f0b0, label %dec_label_pc_f098

dec_label_pc_f098:                                ; preds = %dec_label_pc_f0a0, %dec_label_pc_f090
  %v0_f098 = phi i32 [ %v0_f0a8, %dec_label_pc_f0a0 ], [ %v0_f090, %dec_label_pc_f090 ]
  %v1_f098 = add i32 %v0_f098, 1
  store i32 %v1_f098, i32* %sl.global-to-local, align 4
  %v0_ef44.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ef44

dec_label_pc_f0a0:                                ; preds = %dec_label_pc_ef84, %dec_label_pc_ef6c
  %v0_f0a0 = phi i32 [ %v5_ef94, %dec_label_pc_ef84 ], [ %v4_ef78, %dec_label_pc_ef6c ]
  %v1_f0a0 = add i32 %v0_f0a0, 2
  store i32 %v1_f0a0, i32* %r0.global-to-local, align 4
  %v1_f0a4 = call i32 @function_131d8(i32 %v1_f0a0)
  store i32 %v1_f0a4, i32* %r0.global-to-local, align 4
  %v0_f0a8 = load i32, i32* %sl.global-to-local, align 4
  %v7_f0a8 = icmp eq i32 %v0_f0a8, 5
  store i1 %v7_f0a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0a8, label %dec_label_pc_f0b0, label %dec_label_pc_f098

dec_label_pc_f0b0:                                ; preds = %dec_label_pc_f0a0, %dec_label_pc_f090, %dec_label_pc_f044, %dec_label_pc_efd8, %dec_label_pc_f130, %dec_label_pc_f13c.backedge
  %v0_f0b0 = load i32, i32* @r7, align 4
  store i32 %v0_f0b0, i32* %r0.global-to-local, align 4
  %v1_f0b4 = call i32 @function_11da0(i32 %v0_f0b0)
  store i32 %v1_f0b4, i32* %r0.global-to-local, align 4
  store i32 %v2_ede8, i32* %r2.global-to-local, align 4
  %v2_f0bc = load i8, i8* %v3_ede8, align 1
  %v3_f0bc = zext i8 %v2_f0bc to i32
  store i32 %v3_f0bc, i32* @r4, align 4
  %v2_f0c0 = icmp eq i8 %v2_f0bc, 0
  store i1 %v2_f0c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0c0, label %dec_label_pc_f21c, label %dec_label_pc_f0c8

dec_label_pc_f0c8:                                ; preds = %dec_label_pc_f0b0, %dec_label_pc_f21c
  %stack_var_-4300.0 = phi i8* [ %v5_f230, %dec_label_pc_f21c ], [ %v3_ede8, %dec_label_pc_f0b0 ]
  %v4_f0c8 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_f0c8, i32* %r0.global-to-local, align 4
  %v2_f0d4 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f0d4, i32* @r4, align 4
  store i32 %v6_edd0, i32* @r5, align 4
  store i32 %v9_edd0, i32* @r6, align 4
  store i32 %v12_edd0, i32* @r7, align 4
  store i32 %v15_edd0, i32* @r8, align 4
  ret i32 %v4_f0c8

dec_label_pc_f0d8:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f0dc = call i32 @function_131d8(i32 1)
  store i32 %v1_f0dc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f090

dec_label_pc_f0e4:                                ; preds = %dec_label_pc_f054
  store i32 %v2_ef08, i32* %lr.global-to-local, align 4
  store i32 %v1_f0e8, i32* %fp.global-to-local, align 4
  store i32 %v1_f0e8, i32* %r0.global-to-local, align 4
  %v2_f0f0 = call i32 @function_1149c(i8* %v1_f0f0)
  store i32 %v2_f0f0, i32* %r0.global-to-local, align 4
  store i32 %v2_ef08, i32* %ip.global-to-local, align 4
  store i32 %v2_efe4, i32* %r1.global-to-local, align 4
  %v4_f100 = load i8, i8* %stack_var_-4288, align 1
  %v5_f100 = sext i8 %v4_f100 to i32
  store i32 %v5_f100, i32* %r3.global-to-local, align 4
  %v3_f104 = load i8, i8* %v2_f104, align 1
  %v4_f104 = zext i8 %v3_f104 to i32
  store i32 %v4_f104, i32* %r2.global-to-local, align 4
  store i32 %v4_eebc, i32* @lr, align 4
  %v4_f10c = mul nuw nsw i32 %v4_f104, 256
  %v5_f10c = or i32 %v4_f10c, %v5_f100
  store i32 %v5_f10c, i32* %r3.global-to-local, align 4
  %v0_f110 = load i32, i32* %fp.global-to-local, align 4
  %v9_f114 = icmp eq i32 %v5_f10c, %v4_eebc
  store i1 %v9_f114, i1* %cpsr_z.global-to-local, align 1
  %v2_f110 = add i32 %v2_f0f0, 5
  %v1_f118 = add i32 %v2_f110, %v0_f110
  store i32 %v1_f118, i32* %r0.global-to-local, align 4
  br i1 %v9_f114, label %dec_label_pc_f120, label %dec_label_pc_f090

dec_label_pc_f120:                                ; preds = %dec_label_pc_f0e4
  %v3_f120 = load i8, i8* %v2_f120, align 1
  %v4_f120 = zext i8 %v3_f120 to i32
  store i32 %v4_f120, i32* %r2.global-to-local, align 4
  %v3_f124 = load i8, i8* %v2_f124, align 1
  %v4_f124 = zext i8 %v3_f124 to i32
  store i32 %v4_f124, i32* %r3.global-to-local, align 4
  %v4_f128 = mul nuw nsw i32 %v4_f124, 256
  %v5_f128 = or i32 %v4_f128, %v4_f120
  store i32 %v5_f128, i32* %r2.global-to-local, align 4
  %v7_f128 = icmp eq i32 %v5_f128, 0
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f090, label %dec_label_pc_f130

dec_label_pc_f130:                                ; preds = %dec_label_pc_f120
  %v3_f134 = mul nuw nsw i32 %v4_f120, 256
  %v5_f138 = or i32 %v4_f124, %v3_f134
  %v1_f1f0 = add i32 %v2_ef08, -49152
  %v1_f13c143 = add nsw i32 %v5_f138, -1
  %v3_f140144 = mul i32 %v1_f13c143, 65536
  store i32 %v3_f140144, i32* %r3.global-to-local, align 4
  %v7_f144150 = icmp eq i32 %v3_f140144, -65536
  store i1 %v7_f144150, i1* %cpsr_z.global-to-local, align 1
  %v3_f148151 = urem i32 %v1_f13c143, 65536
  store i32 %v3_f148151, i32* @r6, align 4
  br i1 %v7_f144150, label %dec_label_pc_f0b0, label %dec_label_pc_f150.lr.ph

dec_label_pc_f150.lr.ph:                          ; preds = %dec_label_pc_f130
  %v1_f2cc = add i32 %v2_ede8, 4
  %v2_f2cc = inttoptr i32 %v1_f2cc to i32*
  br label %dec_label_pc_f150

dec_label_pc_f150:                                ; preds = %dec_label_pc_f150.lr.ph, %dec_label_pc_f13c.backedge
  %v3_f148153 = phi i32 [ %v3_f148151, %dec_label_pc_f150.lr.ph ], [ %v3_f148, %dec_label_pc_f13c.backedge ]
  %v0_f1a4152 = phi i32 [ %v1_f118, %dec_label_pc_f150.lr.ph ], [ %storemerge, %dec_label_pc_f13c.backedge ]
  store i32 %v0_f1a4152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f15c17 = inttoptr i32 %v0_f1a4152 to i8*
  %v2_f15c18 = load i8, i8* %v1_f15c17, align 1
  %v3_f15c19 = zext i8 %v2_f15c18 to i32
  store i32 %v3_f15c19, i32* %r2.global-to-local, align 4
  %v2_f16020 = icmp eq i8 %v2_f15c18, 0
  store i1 %v2_f16020, i1* %cpsr_z.global-to-local, align 1
  %v3_f16421 = mul nuw nsw i32 %v3_f15c19, 256
  store i32 %v3_f16421, i32* %r1.global-to-local, align 4
  br i1 %v2_f16020, label %dec_label_pc_f19c, label %dec_label_pc_f16c.preheader

dec_label_pc_f16c.preheader:                      ; preds = %dec_label_pc_f150, %dec_label_pc_f15c.backedge
  %v1_f240 = phi i32 [ %v1_f24049, %dec_label_pc_f15c.backedge ], [ 1, %dec_label_pc_f150 ]
  %v0_f23847 = phi i32 [ %v0_f238, %dec_label_pc_f15c.backedge ], [ 0, %dec_label_pc_f150 ]
  %v0_f17845 = phi i32 [ %v3_f164, %dec_label_pc_f15c.backedge ], [ %v3_f16421, %dec_label_pc_f150 ]
  %v0_f17443 = phi i32 [ %v1_f23c, %dec_label_pc_f15c.backedge ], [ %v0_f1a4152, %dec_label_pc_f150 ]
  %v0_f16c41 = phi i32 [ %v3_f15c, %dec_label_pc_f15c.backedge ], [ %v3_f15c19, %dec_label_pc_f150 ]
  br label %dec_label_pc_f16c

dec_label_pc_f16c:                                ; preds = %dec_label_pc_f16c.preheader, %dec_label_pc_f174
  %v0_f238 = phi i32 [ %v0_f23847, %dec_label_pc_f16c.preheader ], [ 1, %dec_label_pc_f174 ]
  %v0_f178 = phi i32 [ %v0_f17845, %dec_label_pc_f16c.preheader ], [ %v3_f194, %dec_label_pc_f174 ]
  %v0_f23c = phi i32 [ %v0_f17443, %dec_label_pc_f16c.preheader ], [ %v2_f184, %dec_label_pc_f174 ]
  %v0_f16c = phi i32 [ %v0_f16c41, %dec_label_pc_f16c.preheader ], [ %v3_f188, %dec_label_pc_f174 ]
  %v7_f16c = icmp eq i32 %v0_f16c, 191
  store i1 %v7_f16c, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_f16c, 192
  br i1 %tmp180, label %dec_label_pc_f238, label %dec_label_pc_f174

dec_label_pc_f174:                                ; preds = %dec_label_pc_f16c
  %v1_f174 = add i32 %v0_f23c, 1
  %v2_f174 = inttoptr i32 %v1_f174 to i8*
  %v3_f174 = load i8, i8* %v2_f174, align 1
  %v4_f174 = zext i8 %v3_f174 to i32
  store i32 %v2_ef08, i32* %r1.global-to-local, align 4
  %v2_f178 = add i32 %v0_f178, %v1_f1f0
  %v2_f184 = add i32 %v2_f178, %v4_f174
  store i32 %v2_f184, i32* %r3.global-to-local, align 4
  %v1_f188 = inttoptr i32 %v2_f184 to i8*
  %v2_f188 = load i8, i8* %v1_f188, align 1
  %v3_f188 = zext i8 %v2_f188 to i32
  store i32 %v3_f188, i32* %r2.global-to-local, align 4
  %v2_f18c = icmp eq i8 %v2_f188, 0
  store i1 %v2_f18c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_f194 = mul nuw nsw i32 %v3_f188, 256
  store i32 %v3_f194, i32* %r1.global-to-local, align 4
  br i1 %v2_f18c, label %dec_label_pc_f19c, label %dec_label_pc_f16c

dec_label_pc_f19c:                                ; preds = %dec_label_pc_f15c.backedge, %dec_label_pc_f174, %dec_label_pc_f150
  %v1_f1a0 = phi i32 [ 1, %dec_label_pc_f150 ], [ %v1_f240, %dec_label_pc_f174 ], [ %v1_f24049, %dec_label_pc_f15c.backedge ]
  %v0_f19c = phi i32 [ 0, %dec_label_pc_f150 ], [ 1, %dec_label_pc_f174 ], [ %v0_f238, %dec_label_pc_f15c.backedge ]
  %v7_f19c = icmp eq i32 %v0_f19c, 1
  store i1 %v7_f19c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f19c, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_f19c
  %v2_f1a0 = add i32 %v1_f1a0, 1
  store i32 %v2_f1a0, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_f19c, %bb127
  %v1_f1a4 = phi i32 [ %v1_f1a0, %dec_label_pc_f19c ], [ %v2_f1a0, %bb127 ]
  %v2_f1a4 = add i32 %v1_f1a4, %v0_f1a4152
  store i32 %v2_f1a4, i32* @r4, align 4
  %v3_f1a8 = inttoptr i32 %v2_f1a4 to i8*
  %v4_f1a8 = load i8, i8* %v3_f1a8, align 1
  %v6_f1a8 = zext i8 %v4_f1a8 to i32
  store i32 %v6_f1a8, i32* %r3.global-to-local, align 4
  %v1_f1ac = add i32 %v2_f1a4, 1
  %v2_f1ac = inttoptr i32 %v1_f1ac to i8*
  %v3_f1ac = load i8, i8* %v2_f1ac, align 1
  %v4_f1ac = zext i8 %v3_f1ac to i32
  store i32 %v4_f1ac, i32* %r2.global-to-local, align 4
  %v4_f1b0 = mul nuw nsw i32 %v4_f1ac, 256
  %v5_f1b0 = or i32 %v4_f1b0, %v6_f1a8
  store i32 %v5_f1b0, i32* %r3.global-to-local, align 4
  %v7_f1b4 = icmp eq i32 %v5_f1b0, 256
  store i1 %v7_f1b4, i1* %cpsr_z.global-to-local, align 1
  %v1_f1b8 = add i32 %v2_f1a4, 10
  store i32 %v1_f1b8, i32* @r5, align 4
  br i1 %v7_f1b4, label %dec_label_pc_f258, label %dec_label_pc_f1c0

dec_label_pc_f1c0:                                ; preds = %dec_label_pc_f258, %bb128
  store i32 %v1_f1b8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f1cc23 = inttoptr i32 %v1_f1b8 to i8*
  %v2_f1cc24 = load i8, i8* %v1_f1cc23, align 1
  %v3_f1cc25 = zext i8 %v2_f1cc24 to i32
  store i32 %v3_f1cc25, i32* %r2.global-to-local, align 4
  %v2_f1d026 = icmp eq i8 %v2_f1cc24, 0
  store i1 %v2_f1d026, i1* %cpsr_z.global-to-local, align 1
  %v3_f1d427 = mul nuw nsw i32 %v3_f1cc25, 256
  store i32 %v3_f1d427, i32* %r1.global-to-local, align 4
  br i1 %v2_f1d026, label %dec_label_pc_f20c, label %dec_label_pc_f1dc.preheader

dec_label_pc_f1dc.preheader:                      ; preds = %dec_label_pc_f1c0, %dec_label_pc_f1cc.backedge
  %v1_f250 = phi i32 [ %v1_f25064, %dec_label_pc_f1cc.backedge ], [ 1, %dec_label_pc_f1c0 ]
  %v0_f24862 = phi i32 [ %v0_f248, %dec_label_pc_f1cc.backedge ], [ 0, %dec_label_pc_f1c0 ]
  %v0_f1e860 = phi i32 [ %v3_f1d4, %dec_label_pc_f1cc.backedge ], [ %v3_f1d427, %dec_label_pc_f1c0 ]
  %v0_f1e458 = phi i32 [ %v1_f24c, %dec_label_pc_f1cc.backedge ], [ %v1_f1b8, %dec_label_pc_f1c0 ]
  %v0_f1dc56 = phi i32 [ %v3_f1cc, %dec_label_pc_f1cc.backedge ], [ %v3_f1cc25, %dec_label_pc_f1c0 ]
  br label %dec_label_pc_f1dc

dec_label_pc_f1dc:                                ; preds = %dec_label_pc_f1dc.preheader, %dec_label_pc_f1e4
  %v0_f248 = phi i32 [ %v0_f24862, %dec_label_pc_f1dc.preheader ], [ 1, %dec_label_pc_f1e4 ]
  %v0_f1e8 = phi i32 [ %v0_f1e860, %dec_label_pc_f1dc.preheader ], [ %v3_f204, %dec_label_pc_f1e4 ]
  %v0_f24c = phi i32 [ %v0_f1e458, %dec_label_pc_f1dc.preheader ], [ %v2_f1f4, %dec_label_pc_f1e4 ]
  %v0_f1dc = phi i32 [ %v0_f1dc56, %dec_label_pc_f1dc.preheader ], [ %v3_f1f8, %dec_label_pc_f1e4 ]
  %v7_f1dc = icmp eq i32 %v0_f1dc, 191
  store i1 %v7_f1dc, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_f1dc, 192
  br i1 %tmp181, label %dec_label_pc_f248, label %dec_label_pc_f1e4

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1dc
  %v1_f1e4 = add i32 %v0_f24c, 1
  %v2_f1e4 = inttoptr i32 %v1_f1e4 to i8*
  %v3_f1e4 = load i8, i8* %v2_f1e4, align 1
  %v4_f1e4 = zext i8 %v3_f1e4 to i32
  store i32 %v2_ef08, i32* %r1.global-to-local, align 4
  %v2_f1e8 = add i32 %v0_f1e8, %v1_f1f0
  %v2_f1f4 = add i32 %v2_f1e8, %v4_f1e4
  store i32 %v2_f1f4, i32* %r3.global-to-local, align 4
  %v1_f1f8 = inttoptr i32 %v2_f1f4 to i8*
  %v2_f1f8 = load i8, i8* %v1_f1f8, align 1
  %v3_f1f8 = zext i8 %v2_f1f8 to i32
  store i32 %v3_f1f8, i32* %r2.global-to-local, align 4
  %v2_f1fc = icmp eq i8 %v2_f1f8, 0
  store i1 %v2_f1fc, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f204 = mul nuw nsw i32 %v3_f1f8, 256
  store i32 %v3_f204, i32* %r1.global-to-local, align 4
  br i1 %v2_f1fc, label %dec_label_pc_f20c, label %dec_label_pc_f1dc

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f1cc.backedge, %dec_label_pc_f1e4, %dec_label_pc_f1c0
  %v1_f210 = phi i32 [ 1, %dec_label_pc_f1c0 ], [ %v1_f250, %dec_label_pc_f1e4 ], [ %v1_f25064, %dec_label_pc_f1cc.backedge ]
  %v0_f20c = phi i32 [ 0, %dec_label_pc_f1c0 ], [ 1, %dec_label_pc_f1e4 ], [ %v0_f248, %dec_label_pc_f1cc.backedge ]
  %v7_f20c = icmp eq i32 %v0_f20c, 1
  store i1 %v7_f20c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f20c, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_f20c
  %v2_f210 = add i32 %v1_f210, 1
  store i32 %v2_f210, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f20c, %bb129
  %v1_f214 = phi i32 [ %v1_f210, %dec_label_pc_f20c ], [ %v2_f210, %bb129 ]
  %v2_f214 = add i32 %v1_f214, %v1_f1b8
  br label %dec_label_pc_f13c.backedge

dec_label_pc_f13c.backedge:                       ; preds = %bb130, %dec_label_pc_f300
  %v0_f13c.pre = phi i32 [ %v3_f148153, %bb130 ], [ %v0_f13c.pre.pre, %dec_label_pc_f300 ]
  %storemerge = phi i32 [ %v2_f214, %bb130 ], [ %v2_f314, %dec_label_pc_f300 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_f13c = add i32 %v0_f13c.pre, -1
  %v3_f140 = mul i32 %v1_f13c, 65536
  store i32 %v3_f140, i32* %r3.global-to-local, align 4
  %v7_f144 = icmp eq i32 %v3_f140, -65536
  store i1 %v7_f144, i1* %cpsr_z.global-to-local, align 1
  %v3_f148 = urem i32 %v1_f13c, 65536
  store i32 %v3_f148, i32* @r6, align 4
  br i1 %v7_f144, label %dec_label_pc_f0b0, label %dec_label_pc_f150

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f0b0
  %v1_f21c = add i32 %v2_ede8, 4
  %v2_f21c = inttoptr i32 %v1_f21c to i32*
  %v3_f21c = load i32, i32* %v2_f21c, align 4
  store i32 %v3_f21c, i32* %r0.global-to-local, align 4
  %v2_f220 = icmp eq i32 %v3_f21c, 0
  store i1 %v2_f220, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_f228.127 to i32), i32* @lr, align 4
  %v1_f224 = xor i1 %v2_f220, true
  call void @__pseudo_cond_branch(i1 %v1_f224, i32 ptrtoint (i32* @global_var_12a00.25 to i32))
  store i32 %v2_ede8, i32* @r0, align 4
  %v0_f22c = call i32 @function_12a00()
  store i32 %v0_f22c, i32* %r0.global-to-local, align 4
  %v0_f230 = load i32, i32* @r4, align 4
  %v5_f230 = inttoptr i32 %v0_f230 to i8*
  br label %dec_label_pc_f0c8

dec_label_pc_f238:                                ; preds = %dec_label_pc_f16c
  %v2_f238 = icmp eq i32 %v0_f238, 0
  store i1 %v2_f238, i1* %cpsr_z.global-to-local, align 1
  %v1_f23c = add i32 %v0_f23c, 1
  store i32 %v1_f23c, i32* %r3.global-to-local, align 4
  br i1 %v2_f238, label %bb131, label %dec_label_pc_f15c.backedge

dec_label_pc_f15c.backedge:                       ; preds = %dec_label_pc_f238, %bb131
  %v1_f24049 = phi i32 [ %v1_f240, %dec_label_pc_f238 ], [ %v2_f240, %bb131 ]
  %v1_f15c = inttoptr i32 %v1_f23c to i8*
  %v2_f15c = load i8, i8* %v1_f15c, align 1
  %v3_f15c = zext i8 %v2_f15c to i32
  store i32 %v3_f15c, i32* %r2.global-to-local, align 4
  %v2_f160 = icmp eq i8 %v2_f15c, 0
  store i1 %v2_f160, i1* %cpsr_z.global-to-local, align 1
  %v3_f164 = mul nuw nsw i32 %v3_f15c, 256
  store i32 %v3_f164, i32* %r1.global-to-local, align 4
  br i1 %v2_f160, label %dec_label_pc_f19c, label %dec_label_pc_f16c.preheader

bb131:                                            ; preds = %dec_label_pc_f238
  %v2_f240 = add i32 %v1_f240, 1
  store i32 %v2_f240, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f15c.backedge

dec_label_pc_f248:                                ; preds = %dec_label_pc_f1dc
  %v2_f248 = icmp eq i32 %v0_f248, 0
  store i1 %v2_f248, i1* %cpsr_z.global-to-local, align 1
  %v1_f24c = add i32 %v0_f24c, 1
  store i32 %v1_f24c, i32* %r3.global-to-local, align 4
  br i1 %v2_f248, label %bb132, label %dec_label_pc_f1cc.backedge

dec_label_pc_f1cc.backedge:                       ; preds = %dec_label_pc_f248, %bb132
  %v1_f25064 = phi i32 [ %v1_f250, %dec_label_pc_f248 ], [ %v2_f250, %bb132 ]
  %v1_f1cc = inttoptr i32 %v1_f24c to i8*
  %v2_f1cc = load i8, i8* %v1_f1cc, align 1
  %v3_f1cc = zext i8 %v2_f1cc to i32
  store i32 %v3_f1cc, i32* %r2.global-to-local, align 4
  %v2_f1d0 = icmp eq i8 %v2_f1cc, 0
  store i1 %v2_f1d0, i1* %cpsr_z.global-to-local, align 1
  %v3_f1d4 = mul nuw nsw i32 %v3_f1cc, 256
  store i32 %v3_f1d4, i32* %r1.global-to-local, align 4
  br i1 %v2_f1d0, label %dec_label_pc_f20c, label %dec_label_pc_f1dc.preheader

bb132:                                            ; preds = %dec_label_pc_f248
  %v2_f250 = add i32 %v1_f250, 1
  store i32 %v2_f250, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f1cc.backedge

dec_label_pc_f258:                                ; preds = %bb128
  %v1_f258 = add i32 %v2_f1a4, 2
  %v2_f258 = inttoptr i32 %v1_f258 to i8*
  %v3_f258 = load i8, i8* %v2_f258, align 1
  %v4_f258 = zext i8 %v3_f258 to i32
  store i32 %v4_f258, i32* %r3.global-to-local, align 4
  %v1_f25c = add i32 %v2_f1a4, 3
  %v2_f25c = inttoptr i32 %v1_f25c to i8*
  %v3_f25c = load i8, i8* %v2_f25c, align 1
  %v4_f25c = zext i8 %v3_f25c to i32
  store i32 %v4_f25c, i32* %r2.global-to-local, align 4
  %v4_f260 = mul nuw nsw i32 %v4_f25c, 256
  %v5_f260 = or i32 %v4_f260, %v4_f258
  store i32 %v5_f260, i32* %r3.global-to-local, align 4
  %v7_f264 = icmp eq i32 %v5_f260, 256
  store i1 %v7_f264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f264, label %dec_label_pc_f26c, label %dec_label_pc_f1c0

dec_label_pc_f26c:                                ; preds = %dec_label_pc_f258
  %v1_f26c = add i32 %v2_f1a4, 8
  %v2_f26c = inttoptr i32 %v1_f26c to i8*
  %v3_f26c = load i8, i8* %v2_f26c, align 1
  %v4_f26c = zext i8 %v3_f26c to i32
  store i32 %v4_f26c, i32* %r1.global-to-local, align 4
  %v1_f270 = add i32 %v2_f1a4, 9
  %v2_f270 = inttoptr i32 %v1_f270 to i8*
  %v3_f270 = load i8, i8* %v2_f270, align 1
  %v4_f270 = zext i8 %v3_f270 to i32
  store i32 %v4_f270, i32* %r0.global-to-local, align 4
  %v4_f274 = mul nuw nsw i32 %v4_f270, 256
  %v5_f274 = or i32 %v4_f274, %v4_f26c
  %v3_f278 = mul i32 %v5_f274, 65536
  store i32 %v3_f278, i32* %r2.global-to-local, align 4
  %v3_f27c = mul nuw nsw i32 %v4_f26c, 256
  %v5_f284 = or i32 %v4_f270, %v3_f27c
  store i32 %v5_f284, i32* %r3.global-to-local, align 4
  %v7_f288 = icmp eq i32 %v5_f284, 4
  store i1 %v7_f288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f288, label %dec_label_pc_f290, label %dec_label_pc_f300

dec_label_pc_f290:                                ; preds = %dec_label_pc_f26c
  %v2_f290 = inttoptr i32 %v1_f1b8 to i8*
  %v3_f290 = load i8, i8* %v2_f290, align 1
  %v4_f290 = zext i8 %v3_f290 to i32
  store i32 %v4_f290, i32* %r3.global-to-local, align 4
  store i32 %v2_ee68, i32* %r2.global-to-local, align 4
  %v1_f29c = add i32 %v2_f1a4, 11
  %v2_f29c = inttoptr i32 %v1_f29c to i8*
  %v3_f29c = load i8, i8* %v2_f29c, align 1
  %v4_f29c = zext i8 %v3_f29c to i32
  store i32 %v4_f29c, i32* %r2.global-to-local, align 4
  store i32 %v2_ee68, i32* %r3.global-to-local, align 4
  %v1_f2a8 = add i32 %v2_f1a4, 12
  %v2_f2a8 = inttoptr i32 %v1_f2a8 to i8*
  %v3_f2a8 = load i8, i8* %v2_f2a8, align 1
  %v4_f2a8 = zext i8 %v3_f2a8 to i32
  store i32 %v4_f2a8, i32* %r3.global-to-local, align 4
  store i32 %v2_ee68, i32* %ip.global-to-local, align 4
  %v1_f2b4 = add i32 %v2_f1a4, 13
  %v2_f2b4 = inttoptr i32 %v1_f2b4 to i8*
  %v3_f2b4 = load i8, i8* %v2_f2b4, align 1
  %v4_f2b4 = zext i8 %v3_f2b4 to i32
  store i32 %v4_f2b4, i32* %r2.global-to-local, align 4
  store i32 %v2_ede8, i32* @lr, align 4
  %v2_f2c0 = load i8, i8* %v3_ede8, align 1
  %v3_f2c0 = zext i8 %v2_f2c0 to i32
  %v3_f2c4 = mul nuw nsw i32 %v3_f2c0, 4
  %v1_f2c8 = add nuw nsw i32 %v3_f2c4, 4
  store i32 %v1_f2c8, i32* %r1.global-to-local, align 4
  %v3_f2cc = load i32, i32* %v2_f2cc, align 4
  store i32 %v3_f2cc, i32* %r0.global-to-local, align 4
  %v3_f2d0 = sext i8 %v3_f2b4 to i32
  %v5_f2d0 = sext i8 %v3_f2a8 to i32
  %v10_f2d0 = call i32 @function_12af0(i32 %v3_f2cc, i32 %v1_f2c8, i32 %v3_f2d0, i32 %v5_f2d0)
  store i32 %v10_f2d0, i32* %r0.global-to-local, align 4
  store i32 %v2_ede8, i32* %r1.global-to-local, align 4
  store i32 %v2_ee68, i32* %ip.global-to-local, align 4
  %v2_f2dc = load i8, i8* %v3_ede8, align 1
  %v3_f2dc = zext i8 %v2_f2dc to i32
  store i32 %v3_f2dc, i32* %r2.global-to-local, align 4
  %v4_f2e0 = sext i8 %v3_f290 to i32
  store i32 %v4_f2e0, i32* %r3.global-to-local, align 4
  store i32 %v2_ede8, i32* @lr, align 4
  %v1_f2e8 = add nuw nsw i32 %v3_f2dc, 1
  store i32 %v1_f2e8, i32* %r1.global-to-local, align 4
  %v5_f2ec = mul nuw nsw i32 %v3_f2dc, 4
  %v6_f2ec = add i32 %v5_f2ec, %v10_f2d0
  %v7_f2ec = inttoptr i32 %v6_f2ec to i32*
  store i32 %v4_f2e0, i32* %v7_f2ec, align 4
  %v1_f2f0 = load i32, i32* @lr, align 4
  %v2_f2f0 = add i32 %v1_f2f0, 4
  %v3_f2f0 = inttoptr i32 %v2_f2f0 to i32*
  store i32 %v10_f2d0, i32* %v3_f2f0, align 4
  %v0_f2f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_f2f4 = trunc i32 %v0_f2f4 to i8
  %v2_f2f4 = load i32, i32* @lr, align 4
  %v3_f2f4 = inttoptr i32 %v2_f2f4 to i8*
  store i8 %v1_f2f4, i8* %v3_f2f4, align 1
  %v0_f2f8 = load i32, i32* @r4, align 4
  %v1_f2f8 = add i32 %v0_f2f8, 9
  %v2_f2f8 = inttoptr i32 %v1_f2f8 to i8*
  %v3_f2f8 = load i8, i8* %v2_f2f8, align 1
  %v4_f2f8 = zext i8 %v3_f2f8 to i32
  store i32 %v4_f2f8, i32* %r0.global-to-local, align 4
  %v1_f2fc = add i32 %v0_f2f8, 8
  %v2_f2fc = inttoptr i32 %v1_f2fc to i8*
  %v3_f2fc = load i8, i8* %v2_f2fc, align 1
  %v4_f2fc = zext i8 %v3_f2fc to i32
  store i32 %v4_f2fc, i32* %r1.global-to-local, align 4
  %v0_f314.pre = load i32, i32* @r5, align 4
  %v0_f13c.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f300

dec_label_pc_f300:                                ; preds = %dec_label_pc_f26c, %dec_label_pc_f290
  %v0_f13c.pre.pre = phi i32 [ %v3_f148153, %dec_label_pc_f26c ], [ %v0_f13c.pre.pre.pre, %dec_label_pc_f290 ]
  %v0_f314 = phi i32 [ %v1_f1b8, %dec_label_pc_f26c ], [ %v0_f314.pre, %dec_label_pc_f290 ]
  %v1_f300 = phi i32 [ %v4_f270, %dec_label_pc_f26c ], [ %v4_f2f8, %dec_label_pc_f290 ]
  %v0_f300 = phi i32 [ %v4_f26c, %dec_label_pc_f26c ], [ %v4_f2fc, %dec_label_pc_f290 ]
  %v4_f300 = mul nuw nsw i32 %v1_f300, 256
  %v5_f300 = or i32 %v4_f300, %v0_f300
  %v3_f304 = mul i32 %v5_f300, 65536
  store i32 %v3_f304, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f300, 256
  %v5_f310 = or i32 %tmp133, %v1_f300
  store i32 %v5_f310, i32* %r3.global-to-local, align 4
  %v2_f314 = add i32 %v5_f310, %v0_f314
  br label %dec_label_pc_f13c.backedge

; uselistorder directives
  uselistorder i32 %v1_f300, { 1, 0 }
  uselistorder i32 %v3_f2dc, { 1, 0, 2 }
  uselistorder i32 %v10_f2d0, { 1, 0, 2 }
  uselistorder i32 %v4_f270, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f26c, { 2, 0, 1, 3 }
  uselistorder i32 %v2_f250, { 1, 0 }
  uselistorder i32 %v3_f1cc, { 0, 2, 1 }
  uselistorder i32 %v1_f25064, { 1, 0 }
  uselistorder i32 %v1_f24c, { 1, 2, 0 }
  uselistorder i32 %v2_f240, { 1, 0 }
  uselistorder i32 %v3_f15c, { 0, 2, 1 }
  uselistorder i32 %v1_f24049, { 1, 0 }
  uselistorder i32 %v1_f23c, { 1, 2, 0 }
  uselistorder i1 %v7_f144, { 1, 0 }
  uselistorder i32 %v1_f13c, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_f1f8, { 0, 2, 1 }
  uselistorder i32 %v2_f1f4, { 1, 2, 0 }
  uselistorder i32 %v0_f248, { 2, 0, 1 }
  uselistorder i32 %v1_f250, { 1, 2, 0 }
  uselistorder i32 %v3_f1d427, { 1, 0 }
  uselistorder i32 %v3_f1cc25, { 1, 0, 2 }
  uselistorder i32 %v1_f1b8, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_f1a4, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_f188, { 0, 2, 1 }
  uselistorder i32 %v2_f184, { 1, 2, 0 }
  uselistorder i32 %v0_f238, { 2, 0, 1 }
  uselistorder i32 %v1_f240, { 1, 2, 0 }
  uselistorder i32 %v3_f16421, { 1, 0 }
  uselistorder i32 %v3_f15c19, { 1, 0, 2 }
  uselistorder i32 %v0_f1a4152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f148151, { 1, 0 }
  uselistorder i1 %v7_f144150, { 1, 0 }
  uselistorder i32 %v1_f13c143, { 1, 0 }
  uselistorder i32 %v4_f124, { 1, 0, 2 }
  uselistorder i32 %v0_f0a8, { 1, 0 }
  uselistorder i32 %v0_f080, { 1, 0 }
  uselistorder i1 %v7_f034, { 1, 0 }
  uselistorder i32 %v5_f030, { 1, 0, 2 }
  uselistorder i32 %v1_eff4, { 1, 0 }
  uselistorder i32 %v3_efe0, { 1, 0 }
  uselistorder i32 %v0_efd8, { 1, 0 }
  uselistorder i32 %v1_efcc, { 1, 2, 0 }
  uselistorder i1 %v7_ef98, { 1, 0 }
  uselistorder i32 %v5_ef94, { 1, 0, 2 }
  uselistorder i1 %v7_ef7c, { 1, 0 }
  uselistorder i32 %v4_ef78, { 1, 0, 2 }
  uselistorder i1 %v7_ef60, { 1, 0 }
  uselistorder i32 %v3_ef5c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_ef44, { 2, 1, 0 }
  uselistorder i32 %v1_ef48, { 1, 0 }
  uselistorder i32 %v1_f0e8, { 1, 2, 0 }
  uselistorder i32 %v2_efe4, { 1, 0, 2 }
  uselistorder i32 %v2_ef40, { 1, 0, 2 }
  uselistorder i32 %v2_ef08, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_eebc, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ee88, { 1, 0, 2 }
  uselistorder i32 %v0_ee44, { 0, 1, 3, 2 }
  uselistorder i32 %v1_ee40, { 1, 0, 2 }
  uselistorder i32 %v1_ee3c, { 1, 0 }
  uselistorder i32 %v2_ee3011, { 1, 0 }
  uselistorder i32 %v2_ee30, { 1, 0 }
  uselistorder i1 %v8_ee20, { 1, 0 }
  uselistorder i32 %v2_ee08, { 0, 2, 1, 3 }
  uselistorder i32 %v0_edf0, { 1, 0 }
  uselistorder i32 %v2_ede8, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 35, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 33, 34, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 11, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 11, 6, 7, 29, 9, 10, 28, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 23, 27, 25 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 46, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 47, 23, 25, 24, 26, 28, 27, 29, 36, 31, 30, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 6, 3, 5, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 8, 2, 13, 3, 4, 14, 5, 6, 7, 35, 9, 10, 11, 12, 34, 37, 15, 16, 17, 18, 19, 20, 21, 22, 23, 36, 24, 25, 26, 27, 32, 30, 28, 29, 31, 33 }
  uselistorder i32 (i32)* @function_131d8, { 7, 6, 11, 10, 9, 8, 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_f300, { 1, 0 }
  uselistorder label %dec_label_pc_f1cc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f15c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f13c.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f1dc, { 1, 0 }
  uselistorder label %dec_label_pc_f1dc.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_f16c, { 1, 0 }
  uselistorder label %dec_label_pc_f16c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f150, { 1, 0 }
  uselistorder label %dec_label_pc_f0c8, { 1, 0 }
  uselistorder label %dec_label_pc_f0b0, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f090, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_efc8.dec_label_pc_efc8_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ee18, { 1, 0 }
}

define i32 @function_f31c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f31c:
  %v2_f320 = load i32, i32* @global_var_1ce24.129, align 4
  %v2_f328 = call i32 @function_11ea0(i32 %v2_f320, i32 9)
  %v0_f32c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f32c, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f31c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f31c, %bb
  ret i32 %v2_f328

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f330() local_unnamed_addr {
dec_label_pc_f330:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f330 = load i32, i32* @r4, align 4
  store i32 %v3_f330, i32* %stack_var_-16, align 4
  %v0_f334 = load i32, i32* @r0, align 4
  store i32 %v0_f334, i32* %r5.global-to-local, align 4
  %v1_f338 = add i32 %v0_f334, 4
  %v2_f338 = inttoptr i32 %v1_f338 to i32*
  %v3_f338 = load i32, i32* %v2_f338, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 62300, i32* @lr, align 4
  %v1_f358 = icmp ne i32 %v3_f338, -1
  call void @__pseudo_cond_branch(i1 %v1_f358, i32 ptrtoint (i32* @global_var_11da0.102 to i32))
  %v3_f368 = call i32 @function_126bc(i32 2, i32 1, i32 0)
  store i32 %v3_f368, i32* %r3.global-to-local, align 4
  %v7_f370 = icmp eq i32 %v3_f368, -1
  store i32 356, i32* @r1, align 4
  %v0_f378 = load i32, i32* %r5.global-to-local, align 4
  %v1_f378 = add i32 %v0_f378, 28
  store i32 %v1_f378, i32* @r0, align 4
  %v2_f37c = add i32 %v0_f378, 4
  %v3_f37c = inttoptr i32 %v2_f37c to i32*
  store i32 %v3_f368, i32* %v3_f37c, align 4
  br i1 %v7_f370, label %dec_label_pc_f330.dec_label_pc_f3f8_crit_edge, label %dec_label_pc_f384

dec_label_pc_f330.dec_label_pc_f3f8_crit_edge:    ; preds = %dec_label_pc_f330
  %v14_f3fc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f3f8

dec_label_pc_f384:                                ; preds = %dec_label_pc_f330
  %v0_f384 = load i32, i32* %r6.global-to-local, align 4
  %v1_f384 = load i32, i32* %r5.global-to-local, align 4
  %v2_f384 = add i32 %v1_f384, 24
  %v3_f384 = inttoptr i32 %v2_f384 to i32*
  store i32 %v0_f384, i32* %v3_f384, align 4
  %v0_f388 = call i32 @function_1153c()
  %v0_f38c = load i32, i32* %r5.global-to-local, align 4
  %v1_f38c = add i32 %v0_f38c, 4
  %v2_f38c = inttoptr i32 %v1_f38c to i32*
  %v3_f38c = load i32, i32* %v2_f38c, align 4
  store i32 %v3_f38c, i32* @r4, align 4
  %v0_f394 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f394, i32* @r2, align 4
  %v2_f39c = call i32 @function_11cdc(i32 %v3_f38c, i32 3)
  %v1_f3a4 = or i32 %v2_f39c, 2048
  store i32 %v1_f3a4, i32* @r2, align 4
  %v0_f3a8 = load i32, i32* @r4, align 4
  %v2_f3ac = call i32 @function_11cdc(i32 %v0_f3a8, i32 4)
  store i32 ptrtoint (i32* @global_var_1cdb8.131 to i32), i32* %r3.global-to-local, align 4
  %v0_f3b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3b4 = add i32 %v0_f3b4, 20
  %v2_f3b4 = inttoptr i32 %v1_f3b4 to i32*
  %v3_f3b4 = load i32, i32* %v2_f3b4, align 4
  store i32 %v3_f3b4, i32* @r4, align 4
  %v2_f3b8 = load i32, i32* @global_var_1cdb8.131, align 4
  %v1_f3bc = add i32 %v0_f3b4, 16
  %v2_f3bc = inttoptr i32 %v1_f3bc to i32*
  %v3_f3bc = load i32, i32* %v2_f3bc, align 4
  store i32 %v3_f3bc, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f3c4 = add i32 %v0_f3b4, 8
  %v3_f3c4 = inttoptr i32 %v2_f3c4 to i32*
  store i32 %v2_f3b8, i32* %v3_f3c4, align 4
  %v0_f3c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f3c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_f3c8 = add i32 %v1_f3c8, 12
  %v3_f3c8 = inttoptr i32 %v2_f3c8 to i32*
  store i32 %v0_f3c8, i32* %v3_f3c8, align 4
  %v0_f3d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3d0 = add i32 %v0_f3d0, 4
  %v2_f3d0 = inttoptr i32 %v1_f3d0 to i32*
  %v3_f3d0 = load i32, i32* %v2_f3d0, align 4
  %v0_f3d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_f3d4 = mul i32 %v0_f3d4, 2
  store i32 %v2_f3d4, i32* %r3.global-to-local, align 4
  store i32 %v2_f3d4, i32* %stack_var_-32, align 4
  %v3_f3f4 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_f3f4 = call i32 @function_12518(i32 %v3_f3d0, %sockaddr* %v3_f3f4, i32 16)
  br label %dec_label_pc_f3f8

dec_label_pc_f3f8:                                ; preds = %dec_label_pc_f330.dec_label_pc_f3f8_crit_edge, %dec_label_pc_f384
  %v14_f3fc = phi i32 [ %v14_f3fc.pre, %dec_label_pc_f330.dec_label_pc_f3f8_crit_edge ], [ %v4_f3f4, %dec_label_pc_f384 ]
  %v2_f3fc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f3fc, i32* @r4, align 4
  ret i32 %v14_f3fc

; uselistorder directives
  uselistorder i32 %v2_f3d4, { 1, 0 }
  uselistorder i32 %v3_f368, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_1153c, { 8, 4, 7, 6, 5, 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_f3f8, { 1, 0 }
}

define i32 @function_f404(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f404:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_f404 = load i32, i32* @r4, align 4
  %v6_f404 = load i32, i32* @r5, align 4
  %v9_f404 = load i32, i32* @r6, align 4
  %v12_f404 = load i32, i32* @r7, align 4
  %v15_f404 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1cd84.133 to i32), i32* @r8, align 4
  %v2_f40c = load i32, i32* @global_var_1cd84.133, align 4
  store i32 ptrtoint (i32* @global_var_1cdb0.135 to i32), i32* %sb.global-to-local, align 4
  %v3_f418 = mul i32 %v2_f40c, 16
  store i32 %v3_f418, i32* %r3.global-to-local, align 4
  %v3_f420 = urem i32 %arg3, 65536
  store i32 %v3_f420, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f42c = load i32, i32* @global_var_1cdb0.135, align 4
  %v1_f430 = add i32 %v3_f418, 16
  store i32 %v1_f430, i32* %r1.global-to-local, align 4
  store i32 %v3_f420, i32* %stack_var_-44, align 4
  %v8_f438 = call i32 @function_12af0(i32 %v2_f42c, i32 %v1_f430, i32 %v3_f420, i32 %v3_f418)
  store i32 %v8_f438, i32* %sl.global-to-local, align 4
  %v0_f440 = load i32, i32* @r5, align 4
  %v1_f444 = load i32, i32* %sb.global-to-local, align 4
  %v2_f444 = inttoptr i32 %v1_f444 to i32*
  store i32 %v8_f438, i32* %v2_f444, align 4
  %v2_f448 = load i32, i32* @global_var_1cd84.133, align 4
  store i32 %v2_f448, i32* %fp.global-to-local, align 4
  %v1_f44c = inttoptr i32 %v0_f440 to i8*
  %v2_f44c = call i32 @function_1149c(i8* %v1_f44c)
  %sext = mul i32 %v2_f44c, 16777216
  %v1_f450 = sdiv i32 %sext, 16777216
  %v2_f450 = add nsw i32 %v1_f450, 1
  store i32 %v2_f450, i32* @r4, align 4
  store i32 %v1_f450, i32* @r7, align 4
  %v1_f45c = call i32 @function_12854(i32 %v2_f450)
  %v0_f460 = load i32, i32* @r5, align 4
  store i32 %v0_f460, i32* %r1.global-to-local, align 4
  %v0_f464 = load i32, i32* @r4, align 4
  store i32 %v0_f464, i32* %r2.global-to-local, align 4
  store i32 %v1_f45c, i32* @r6, align 4
  %v3_f46c = call i32 @function_11518(i32 %v1_f45c, i32 %v0_f460, i32 %v0_f464)
  %v0_f470 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_f470, 1
  %extract.t6 = trunc i32 %v0_f470 to i8
  br i1 %tmp21, label %dec_label_pc_f494, label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f404
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f47c

dec_label_pc_f47c:                                ; preds = %dec_label_pc_f47c, %dec_label_pc_f478
  %v2_f484 = phi i32 [ %v1_f488, %dec_label_pc_f47c ], [ 0, %dec_label_pc_f478 ]
  %v1_f47c = load i32, i32* @r6, align 4
  %v2_f47c = add i32 %v1_f47c, %v2_f484
  %v3_f47c = inttoptr i32 %v2_f47c to i8*
  %v4_f47c = load i8, i8* %v3_f47c, align 1
  %v6_f47c = zext i8 %v4_f47c to i32
  %v1_f480 = xor i32 %v6_f47c, 84
  store i32 %v1_f480, i32* %r3.global-to-local, align 4
  %v1_f484 = trunc i32 %v1_f480 to i8
  store i8 %v1_f484, i8* %v3_f47c, align 1
  %v0_f488 = load i32, i32* %r2.global-to-local, align 4
  %v1_f488 = add i32 %v0_f488, 1
  store i32 %v1_f488, i32* %r2.global-to-local, align 4
  %v0_f48c = load i32, i32* @r7, align 4
  %v9_f48c = icmp eq i32 %v0_f48c, %v1_f488
  br i1 %v9_f48c, label %dec_label_pc_f494.loopexit, label %dec_label_pc_f47c

dec_label_pc_f494.loopexit:                       ; preds = %dec_label_pc_f47c
  %extract.t = trunc i32 %v1_f488 to i8
  br label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f494.loopexit, %dec_label_pc_f404
  %v0_f4a4.off0 = phi i8 [ %extract.t, %dec_label_pc_f494.loopexit ], [ %extract.t6, %dec_label_pc_f404 ]
  %v2_f494 = load i32, i32* @global_var_1cd84.133, align 4
  %v2_f498 = load i32, i32* @global_var_1cdb0.135, align 4
  store i32 %v2_f498, i32* %r2.global-to-local, align 4
  %v3_f49c = mul i32 %v2_f494, 16
  %v2_f4a0 = add i32 %v2_f498, %v3_f49c
  store i32 %v2_f4a0, i32* %r3.global-to-local, align 4
  %v3_f4a4 = add i32 %v2_f4a0, 12
  %v4_f4a4 = inttoptr i32 %v3_f4a4 to i8*
  store i8 %v0_f4a4.off0, i8* %v4_f4a4, align 1
  %v0_f4a8 = load i32, i32* @r6, align 4
  %v1_f4a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f4a8 = load i32, i32* %fp.global-to-local, align 4
  %v5_f4a8 = mul i32 %v2_f4a8, 16
  %v6_f4a8 = add i32 %v5_f4a8, %v1_f4a8
  %v7_f4a8 = inttoptr i32 %v6_f4a8 to i32*
  store i32 %v0_f4a8, i32* %v7_f4a8, align 4
  %v2_f4b0 = load i32, i32* @global_var_1cd84.133, align 4
  store i32 %v2_f4b0, i32* @r7, align 4
  %v2_f4b4 = load i32, i32* @global_var_1cdb0.135, align 4
  store i32 %v2_f4b4, i32* %sl.global-to-local, align 4
  %v1_f4b8 = inttoptr i32 %arg2 to i8*
  %v2_f4b8 = call i32 @function_1149c(i8* %v1_f4b8)
  %sext1 = mul i32 %v2_f4b8, 16777216
  %v1_f4bc = sdiv i32 %sext1, 16777216
  %v2_f4bc = add nsw i32 %v1_f4bc, 1
  store i32 %v2_f4bc, i32* @r4, align 4
  store i32 %v1_f4bc, i32* @r5, align 4
  %v1_f4c8 = call i32 @function_12854(i32 %v2_f4bc)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f4d0 = load i32, i32* @r4, align 4
  store i32 %v0_f4d0, i32* %r2.global-to-local, align 4
  store i32 %v1_f4c8, i32* %r6.global-to-local, align 4
  %v3_f4d8 = call i32 @function_11518(i32 %v1_f4c8, i32 %arg2, i32 %v0_f4d0)
  %v0_f4dc = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_f4dc, 1
  %extract.t8 = trunc i32 %v0_f4dc to i8
  br i1 %tmp22, label %dec_label_pc_f500, label %dec_label_pc_f4e4

dec_label_pc_f4e4:                                ; preds = %dec_label_pc_f494
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4e8

dec_label_pc_f4e8:                                ; preds = %dec_label_pc_f4e8, %dec_label_pc_f4e4
  %v2_f4f0 = phi i32 [ %v1_f4f4, %dec_label_pc_f4e8 ], [ 0, %dec_label_pc_f4e4 ]
  %v1_f4e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_f4e8 = add i32 %v1_f4e8, %v2_f4f0
  %v3_f4e8 = inttoptr i32 %v2_f4e8 to i8*
  %v4_f4e8 = load i8, i8* %v3_f4e8, align 1
  %v6_f4e8 = zext i8 %v4_f4e8 to i32
  %v1_f4ec = xor i32 %v6_f4e8, 84
  store i32 %v1_f4ec, i32* %r3.global-to-local, align 4
  %v1_f4f0 = trunc i32 %v1_f4ec to i8
  store i8 %v1_f4f0, i8* %v3_f4e8, align 1
  %v0_f4f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_f4f4 = add i32 %v0_f4f4, 1
  store i32 %v1_f4f4, i32* %r2.global-to-local, align 4
  %v0_f4f8 = load i32, i32* @r5, align 4
  %v9_f4f8 = icmp eq i32 %v0_f4f8, %v1_f4f4
  br i1 %v9_f4f8, label %dec_label_pc_f500.loopexit, label %dec_label_pc_f4e8

dec_label_pc_f500.loopexit:                       ; preds = %dec_label_pc_f4e8
  %extract.t7 = trunc i32 %v1_f4f4 to i8
  br label %dec_label_pc_f500

dec_label_pc_f500:                                ; preds = %dec_label_pc_f500.loopexit, %dec_label_pc_f494
  %v0_f510.off0 = phi i8 [ %extract.t7, %dec_label_pc_f500.loopexit ], [ %extract.t8, %dec_label_pc_f494 ]
  %v2_f500 = load i32, i32* @global_var_1cd84.133, align 4
  %v2_f504 = load i32, i32* @global_var_1cdb0.135, align 4
  %v3_f508 = mul i32 %v2_f500, 16
  %v2_f50c = or i32 %v3_f508, 13
  %v3_f510 = add i32 %v2_f50c, %v2_f504
  %v4_f510 = inttoptr i32 %v3_f510 to i8*
  store i8 %v0_f510.off0, i8* %v4_f510, align 1
  %v2_f518 = load i32, i32* @global_var_1cd84.133, align 4
  store i32 %v2_f518, i32* %lr.global-to-local, align 4
  %v4_f51c = load i8, i8* @global_var_1cdb5.138, align 1
  %v5_f51c = zext i8 %v4_f51c to i32
  %v3_f520 = load i8, i8* bitcast (i8** @global_var_1cdb4.137 to i8*), align 4
  %v4_f520 = zext i8 %v3_f520 to i32
  %v2_f524 = load i32, i32* @global_var_1cdb0.135, align 4
  %v4_f528 = mul nuw nsw i32 %v5_f51c, 256
  %v5_f528 = or i32 %v4_f520, %v4_f528
  store i32 %v5_f528, i32* %r2.global-to-local, align 4
  %v3_f52c = mul i32 %v2_f518, 16
  %v2_f530 = add i32 %v2_f524, %v3_f52c
  store i32 %v2_f530, i32* %r1.global-to-local, align 4
  %v3_f538 = add i32 %v2_f530, 9
  %v4_f538 = inttoptr i32 %v3_f538 to i8*
  store i8 %v4_f51c, i8* %v4_f538, align 1
  %v0_f53c = load i32, i32* %r2.global-to-local, align 4
  %v1_f53c = trunc i32 %v0_f53c to i8
  %v2_f53c = load i32, i32* %r1.global-to-local, align 4
  %v3_f53c = add i32 %v2_f53c, 8
  %v4_f53c = inttoptr i32 %v3_f53c to i8*
  store i8 %v1_f53c, i8* %v4_f53c, align 1
  %v4_f540 = load i8, i8* @global_var_1cdb5.138, align 1
  %v5_f540 = zext i8 %v4_f540 to i32
  %v3_f544 = load i8, i8* bitcast (i8** @global_var_1cdb4.137 to i8*), align 4
  %v4_f544 = zext i8 %v3_f544 to i32
  %v4_f548 = mul nuw nsw i32 %v5_f540, 256
  %v5_f548 = or i32 %v4_f544, %v4_f548
  %v2_f54c = load i32, i32* %stack_var_-44, align 4
  %v2_f550 = add i32 %v5_f548, %v2_f54c
  store i32 %v2_f550, i32* %r3.global-to-local, align 4
  %v3_f5549 = udiv i32 %v2_f550, 256
  %v1_f558 = trunc i32 %v3_f5549 to i8
  %v2_f558 = load i32, i32* %r1.global-to-local, align 4
  %v3_f558 = add i32 %v2_f558, 11
  %v4_f558 = inttoptr i32 %v3_f558 to i8*
  store i8 %v1_f558, i8* %v4_f558, align 1
  %v0_f55c = load i32, i32* %r3.global-to-local, align 4
  %v1_f55c = trunc i32 %v0_f55c to i8
  %v2_f55c = load i32, i32* %r1.global-to-local, align 4
  %v3_f55c = add i32 %v2_f55c, 10
  %v4_f55c = inttoptr i32 %v3_f55c to i8*
  store i8 %v1_f55c, i8* %v4_f55c, align 1
  %v4_f560 = load i8, i8* @global_var_1cdb5.138, align 1
  %v5_f560 = zext i8 %v4_f560 to i32
  %v3_f564 = load i8, i8* bitcast (i8** @global_var_1cdb4.137 to i8*), align 4
  %v4_f564 = zext i8 %v3_f564 to i32
  %v4_f568 = mul nuw nsw i32 %v5_f560, 256
  %v5_f568 = or i32 %v4_f564, %v4_f568
  %v2_f56c = load i32, i32* %stack_var_-44, align 4
  %v2_f570 = add i32 %v5_f568, %v2_f56c
  store i32 %v2_f570, i32* %r2.global-to-local, align 4
  %v0_f574 = load i32, i32* @r7, align 4
  %v3_f574 = mul i32 %v0_f574, 16
  %v1_f578 = load i32, i32* %sl.global-to-local, align 4
  %v2_f578 = add i32 %v1_f578, %v3_f574
  store i32 %v2_f578, i32* %r3.global-to-local, align 4
  %v0_f57c = load i32, i32* %lr.global-to-local, align 4
  %v1_f57c = add i32 %v0_f57c, 1
  store i32 %v1_f57c, i32* @lr, align 4
  %v3_f580 = sdiv i32 %v2_f570, 256
  store i32 %v3_f580, i32* %r1.global-to-local, align 4
  %v0_f584 = load i32, i32* %r6.global-to-local, align 4
  %v2_f584 = add i32 %v2_f578, 4
  %v3_f584 = inttoptr i32 %v2_f584 to i32*
  store i32 %v0_f584, i32* %v3_f584, align 4
  %v0_f588 = load i32, i32* @lr, align 4
  %v1_f588 = load i32, i32* @r8, align 4
  %v2_f588 = inttoptr i32 %v1_f588 to i32*
  store i32 %v0_f588, i32* %v2_f588, align 4
  %v0_f58c = load i32, i32* %r1.global-to-local, align 4
  %v1_f58c = trunc i32 %v0_f58c to i8
  store i8 %v1_f58c, i8* @global_var_1cdb5.138, align 1
  %v0_f590 = load i32, i32* %r2.global-to-local, align 4
  %v1_f590 = trunc i32 %v0_f590 to i8
  store i8 %v1_f590, i8* bitcast (i8** @global_var_1cdb4.137 to i8*), align 4
  store i32 %v3_f404, i32* @r4, align 4
  store i32 %v6_f404, i32* @r5, align 4
  store i32 %v9_f404, i32* @r6, align 4
  store i32 %v12_f404, i32* @r7, align 4
  store i32 %v15_f404, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1cdb4.137 to i32)

; uselistorder directives
  uselistorder i32 %v1_f4f4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f4c8, { 1, 0 }
  uselistorder i32 %v1_f488, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f45c, { 1, 0 }
  uselistorder i32 %v3_f420, { 1, 2, 0 }
  uselistorder i32 %v3_f418, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_1149c, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12af0, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f5a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_f5a8:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp256 = call i32 @__decompiler_undefined_function_0()
  %tmp263 = call i32 @__decompiler_undefined_function_0()
  %tmp264 = call i8* @__decompiler_undefined_function_2()
  %tmp265 = call i32 @__decompiler_undefined_function_0()
  %tmp266 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f5a8 = load i32, i32* @r4, align 4
  store i32 %v3_f5a8, i32* %stack_var_-36, align 4
  %v6_f5a8 = load i32, i32* @r5, align 4
  %v18_f5a8 = load i32, i32* @sb, align 4
  %v21_f5a8 = load i32, i32* @sl, align 4
  %v0_f5b0 = call i32 @function_11dcc()
  store i32 %v0_f5b0, i32* %r0.global-to-local, align 4
  %v7_f5b4 = icmp eq i32 %v0_f5b0, -1
  %. = zext i1 %v7_f5b4 to i32
  %tmp297 = icmp slt i32 %v0_f5b0, 1
  %storemerge253 = select i1 %tmp297, i32 %., i32 1
  store i32 %storemerge253, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1ce24.129 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f5d0 = icmp eq i32 %storemerge253, 0
  store i1 %v2_f5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f5b0, i32* @global_var_1ce24.129, align 4
  br i1 %v2_f5d0, label %dec_label_pc_f5e4, label %dec_label_pc_f5dc

dec_label_pc_f5dc:                                ; preds = %dec_label_pc_f5a8
  store i32 %v3_f5a8, i32* %r4.global-to-local, align 4
  store i32 %v6_f5a8, i32* %r5.global-to-local, align 4
  store i32 %v18_f5a8, i32* @sb, align 4
  store i32 %v21_f5a8, i32* @sl, align 4
  ret i32 %v0_f5b0

dec_label_pc_f5e4:                                ; preds = %dec_label_pc_f5a8
  %v0_f5e4 = call i32 @function_11754()
  store i32 %v0_f5e4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce00.50 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f5e4, i32* @global_var_1ce00.50, align 4
  %v1_f5f0 = call i32 @function_eba0(i32 %v0_f5e4)
  %v0_f5f4 = load i32, i32* @r4, align 4
  store i32 %v0_f5f4, i32* %r0.global-to-local, align 4
  %v1_f5f8 = inttoptr i32 %v0_f5f4 to i32*
  %v2_f5f8 = call i32 @function_12070(i32* %v1_f5f8)
  store i32 ptrtoint (i32* @global_var_1cdb8.131 to i32), i32* %r2.global-to-local, align 4
  store i32 388, i32* %r1.global-to-local, align 4
  store i32 %v2_f5f8, i32* @global_var_1cdb8.131, align 4
  store i32 356, i32* %r0.global-to-local, align 4
  %v2_f60c = call i32 @function_129a8(i32 356, i32 388)
  store i32 ptrtoint (i32* @global_var_1ce1c.143 to i32), i32* %r3.global-to-local, align 4
  %v0_f614 = load i32, i32* @r4, align 4
  store i32 %v0_f614, i32* %r1.global-to-local, align 4
  store i32 %v2_f60c, i32* @lr, align 4
  store i32 %v2_f60c, i32* @global_var_1ce1c.143, align 4
  store i32 %v0_f614, i32* %stack_var_-52, align 4
  store i32 %v0_f614, i32* %r5.global-to-local, align 4
  store i32 355, i32* %r0.global-to-local, align 4
  %v1_f630 = add i32 %v0_f614, -1
  store i32 %v1_f630, i32* @r4, align 4
  store i32 %v0_f614, i32* %ip.global-to-local, align 4
  %v1_f638 = add i32 %v2_f60c, 4
  store i32 %v1_f638, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f63c

dec_label_pc_f63c:                                ; preds = %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge, %dec_label_pc_f5e4
  %v0_f658 = phi i32 [ %v0_f658.pre, %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge ], [ %v0_f614, %dec_label_pc_f5e4 ]
  %v0_f648 = phi i32 [ %v0_f660, %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge ], [ %v0_f614, %dec_label_pc_f5e4 ]
  %v1_f654 = phi i32 [ %v1_f654.pre, %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge ], [ 355, %dec_label_pc_f5e4 ]
  %v1_f650 = phi i32 [ %v1_f650.pre, %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge ], [ %v2_f60c, %dec_label_pc_f5e4 ]
  %v1_f648 = add i32 %v0_f648, 1
  store i32 %v1_f648, i32* %ip.global-to-local, align 4
  %v3_f64c = mul i32 %v0_f648, 388
  %v2_f650 = add i32 %v3_f64c, %v1_f650
  store i32 %v2_f650, i32* %r3.global-to-local, align 4
  %v2_f658 = add i32 %v2_f650, 12
  %v3_f658 = inttoptr i32 %v2_f658 to i32*
  store i32 %v0_f658, i32* %v3_f658, align 4
  %v0_f65c = load i32, i32* @r4, align 4
  %v1_f65c = load i32, i32* %r2.global-to-local, align 4
  %v2_f65c = inttoptr i32 %v1_f65c to i32*
  store i32 %v0_f65c, i32* %v2_f65c, align 4
  %v3_f65c = load i32, i32* %r2.global-to-local, align 4
  %v4_f65c = add i32 %v3_f65c, 388
  store i32 %v4_f65c, i32* %r2.global-to-local, align 4
  %v0_f660 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f660, i32* %r1.global-to-local, align 4
  %v7_f664 = icmp sgt i32 %v1_f648, %v1_f654
  br i1 %v7_f664, label %dec_label_pc_f668, label %dec_label_pc_f63c.dec_label_pc_f63c_crit_edge

dec_label_pc_f63c.dec_label_pc_f63c_crit_edge:    ; preds = %dec_label_pc_f63c
  %v1_f650.pre = load i32, i32* @lr, align 4
  %v1_f654.pre = load i32, i32* %r0.global-to-local, align 4
  %v0_f658.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f63c

dec_label_pc_f668:                                ; preds = %dec_label_pc_f63c
  %v3_f654 = icmp uge i32 %v1_f648, %v1_f654
  %v9_f654 = icmp eq i32 %v1_f648, %v1_f654
  store i1 %v3_f654, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_f654, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f660, i32* %stack_var_-52, align 4
  %v3_f678 = call i32 @function_126bc(i32 2, i32 3, i32 6)
  store i32 %v3_f678, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce20.145 to i32), i32* %ip.global-to-local, align 4
  %v2_f680 = icmp eq i32 %v3_f678, -1
  store i1 %v2_f680, i1* %cpsr_c.global-to-local, align 1
  %v7_f680 = icmp eq i32 %v3_f678, -1
  store i1 %v7_f680, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f678, i32* @r4, align 4
  store i32 %v3_f678, i32* @global_var_1ce20.145, align 4
  br i1 %v7_f680, label %dec_label_pc_fe94, label %dec_label_pc_f690

dec_label_pc_f690:                                ; preds = %dec_label_pc_f668
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f694 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f694, i32* @r2, align 4
  %v2_f698 = call i32 @function_11cdc(i32 %v3_f678, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f6a0 = or i32 %v2_f698, 2048
  store i32 %v1_f6a0, i32* @r2, align 4
  %v0_f6a4 = load i32, i32* @r4, align 4
  store i32 %v0_f6a4, i32* %r0.global-to-local, align 4
  %v2_f6a8 = call i32 @function_11cdc(i32 %v0_f6a4, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_f6b4 = load i32, i32* @global_var_1ce20.145, align 4
  store i32 %v2_f6b4, i32* %r0.global-to-local, align 4
  %v0_f6b8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f6b8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_f6c0 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f6c0, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_f6d0 = call i32 @function_1268c(i32 %v2_f6b4, i32 %v0_f6b8, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_f6d0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6d4 = icmp eq i32 %v6_f6d0, 0
  store i1 %v2_f6d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6d4, label %dec_label_pc_f6dc, label %dec_label_pc_fe88

dec_label_pc_f6dc:                                ; preds = %dec_label_pc_f690, %dec_label_pc_f6dc
  %v0_f6dc = call i32 @function_eb48()
  %v3_f6e0 = mul i32 %v0_f6dc, 65536
  store i32 %v3_f6e0, i32* %r0.global-to-local, align 4
  %v3_f6e4 = urem i32 %v0_f6dc, 65536
  store i32 %v3_f6e4, i32* %r2.global-to-local, align 4
  %v1_f6e8 = mul i32 %v0_f6dc, 256
  %v3_f6ec = and i32 %v1_f6e8, 65280
  %tmp300 = udiv i32 %v0_f6dc, 256
  %v4_f6f0 = urem i32 %tmp300, 256
  %v5_f6f0 = or i32 %v4_f6f0, %v3_f6ec
  store i32 %v5_f6f0, i32* %r3.global-to-local, align 4
  %v2_f6f4 = icmp ugt i32 %v5_f6f0, 1023
  store i1 %v2_f6f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6f4 = icmp eq i32 %v5_f6f0, 1024
  store i1 %v7_f6f4, i1* %cpsr_z.global-to-local, align 1
  %v3_f6fc = icmp ult i32 %v5_f6f0, 1022
  br i1 %v3_f6fc, label %dec_label_pc_f6dc, label %dec_label_pc_f700

dec_label_pc_f700:                                ; preds = %dec_label_pc_f6dc
  %v5_f6f8.le = trunc i32 %v0_f6dc to i8
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1cd88.147 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1cd8b.148 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1cd8a.149 to i8*), align 4
  %v0_f734 = call i32 @function_eb48()
  %v1_f734 = trunc i32 %v0_f734 to i8
  store i32 %v0_f734, i32* %r0.global-to-local, align 4
  %v3_f73c = load i8, i8* @global_var_1cda8.152, align 1
  %v4_f744252 = udiv i32 %v0_f734, 256
  %v1_f748 = trunc i32 %v4_f744252 to i8
  store i8 %v1_f748, i8* bitcast (i32* @global_var_1cd8d.153 to i8*), align 4
  %v4_f74c = sext i8 %v5_f6f8.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1cd91.154 to i8*), align 4
  %tmp = urem i8 %v3_f73c, 16
  %v1_f758 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* %r2.global-to-local, align 4
  %v1_f760 = and i32 %v4_f74c, 128
  %v2_f760 = icmp ne i32 %v1_f760, 0
  store i1 %v2_f760, i1* %cpsr_c.global-to-local, align 1
  %v3_f760 = sdiv i32 %v4_f74c, 256
  store i32 %v3_f760, i32* %ip.global-to-local, align 4
  %v1_f764 = or i32 %v1_f758, 80
  store i32 %v1_f764, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1cd90.155 to i8*), align 4
  %v1_f770 = trunc i32 %v1_f764 to i8
  store i8 %v1_f770, i8* @global_var_1cda8.152, align 1
  store i8 23, i8* bitcast (i32* @global_var_1cd9f.156 to i8*), align 4
  store i32 %v4_f74c, i32* %r3.global-to-local, align 4
  %v1_f780 = trunc i32 %v3_f760 to i8
  store i8 %v1_f780, i8* bitcast (i32* @global_var_1cd9d.157 to i8*), align 4
  store i8 %v1_f734, i8* bitcast (i32* @global_var_1cd8c.158 to i8*), align 4
  store i8 %v5_f6f8.le, i8* bitcast (i32* @global_var_1cd9c.151 to i8*), align 4
  %v0_f78c = load i32, i32* @r5, align 4
  %v1_f78c = trunc i32 %v0_f78c to i8
  store i8 %v1_f78c, i8* bitcast (i32* @global_var_1cd9e.159 to i8*), align 4
  %v0_f790 = call i32 @function_eb48()
  %v1_f790 = trunc i32 %v0_f790 to i8
  %v3_f798 = load i8, i8* @global_var_1cda9.160, align 1
  %v4_f798 = zext i8 %v3_f798 to i32
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* @lr, align 4
  %v2_f7a0 = and i32 %v0_f790, 128
  %v3_f7a0 = icmp ne i32 %v2_f7a0, 0
  store i1 %v3_f7a0, i1* %cpsr_c.global-to-local, align 1
  %v4_f7a0 = sdiv i32 %v0_f790, 256
  store i32 %v4_f7a0, i32* %ip.global-to-local, align 4
  %v1_f7a4 = or i32 %v4_f798, 2
  store i32 %v1_f7a4, i32* %r3.global-to-local, align 4
  store i32 %v0_f790, i32* @r4, align 4
  %v1_f7ac = trunc i32 %v4_f7a0 to i8
  store i8 %v1_f7ac, i8* bitcast (i32* @global_var_1cdab.161 to i8*), align 4
  %v1_f7b0 = trunc i32 %v1_f7a4 to i8
  store i8 %v1_f7b0, i8* @global_var_1cda9.160, align 1
  store i8 %v1_f790, i8* bitcast (i32* @global_var_1cdaa.162 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_146d0.166 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f7c4 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint (i32* @global_var_146d0.166 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14654.168 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f7d4 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint ([5 x i8]* @global_var_14654.168 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1465c.170 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f7e4 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_1465c.170 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_146d0.166 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f7f4 = call i32 @function_f404(i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32 ptrtoint (i32* @global_var_146d0.166 to i32), i32 7)
  store i32 ptrtoint ([6 x i8]* @global_var_14670.174 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14670.174 to i32), i32* %r1.global-to-local, align 4
  %v5_f804 = call i32 @function_f404(i32 ptrtoint ([6 x i8]* @global_var_14670.174 to i32), i32 ptrtoint ([6 x i8]* @global_var_14670.174 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14678.176 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f814 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_14678.176 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f824 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14680.178 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f834 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint (i32* @global_var_14680.178 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14690.180 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f844 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_14690.180 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_14698.182 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14698.182 to i32), i32* %r1.global-to-local, align 4
  %v5_f854 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_14698.182 to i32), i32 ptrtoint ([5 x i8]* @global_var_14698.182 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_146a0.184 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f864 = call i32 @function_f404(i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32 ptrtoint (i32* @global_var_146a0.184 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_146ac.186 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f874 = call i32 @function_f404(i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32 ptrtoint (i32* @global_var_146ac.186 to i32), i32 15)
  store i32 ptrtoint ([5 x i8]* @global_var_146b8.188 to i32), i32* %r0.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_146b8.188 to i32), i32* %r1.global-to-local, align 4
  %v5_f884 = call i32 @function_f404(i32 ptrtoint ([5 x i8]* @global_var_146b8.188 to i32), i32 ptrtoint ([5 x i8]* @global_var_146b8.188 to i32), i32 9)
  store i32 ptrtoint (i32* @global_var_146c0.190 to i32), i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32* %r0.global-to-local, align 4
  %v4_f894 = call i32 @function_f404(i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), i32 ptrtoint (i32* @global_var_146c0.190 to i32), i32 14)
  store i32 %v4_f894, i32* %r0.global-to-local, align 4
  %v2_f89c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f89c, i32* %r1.global-to-local, align 4
  %v2_f8a0 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f8a0, i32* %r2.global-to-local, align 4
  %tmp301 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f8ac

dec_label_pc_f8ac:                                ; preds = %dec_label_pc_ff9c, %dec_label_pc_f700
  %stack_var_-1872.0 = phi i32 [ %tmp263, %dec_label_pc_f700 ], [ %stack_var_-1872.2, %dec_label_pc_ff9c ]
  %stack_var_-1884.0 = phi i8* [ %tmp301, %dec_label_pc_f700 ], [ %stack_var_-1884.1, %dec_label_pc_ff9c ]
  %v0_fc60 = phi i32 [ %v2_f89c, %dec_label_pc_f700 ], [ %stack_var_-1880.1, %dec_label_pc_ff9c ]
  %stack_var_-1876.0 = phi i8 [ %v5_f6f8.le, %dec_label_pc_f700 ], [ %stack_var_-1876.1, %dec_label_pc_ff9c ]
  store i32 ptrtoint (i32* @global_var_1cdb8.131 to i32), i32* %r3.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %ip.global-to-local, align 4
  %v2_f8b4 = load i32, i32* @global_var_1cdb8.131, align 4
  store i32 %v2_f8b4, i32* @r8, align 4
  %v3_f8b8 = icmp uge i32 %stack_var_-1872.0, %v2_f8b4
  store i1 %v3_f8b8, i1* %cpsr_c.global-to-local, align 1
  %v9_f8b8 = icmp eq i32 %stack_var_-1872.0, %v2_f8b4
  store i1 %v9_f8b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f8b8, label %dec_label_pc_fbe8, label %dec_label_pc_f8c0

dec_label_pc_f8c0:                                ; preds = %dec_label_pc_f8ac
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_fbb4 = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f8cc

dec_label_pc_f8cc:                                ; preds = %.thread64.dec_label_pc_f8cc_crit_edge, %dec_label_pc_f8c0
  %v0_f8cc = phi i32 [ %v0_f8cc.pre, %.thread64.dec_label_pc_f8cc_crit_edge ], [ 0, %dec_label_pc_f8c0 ]
  store i32 %v0_f8cc, i32* %stack_var_-92, align 4
  store i32 %v0_f8cc, i32* %stack_var_-84, align 4
  %v0_f8dc = call i32 @function_eb48()
  %v1_f8dc = trunc i32 %v0_f8dc to i8
  store i32 %v0_f8dc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce00.50 to i32), i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* %ip.global-to-local, align 4
  %v2_f8e8 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_f8e8, i32* %r2.global-to-local, align 4
  %v2_f8ec = and i32 %v0_f8dc, 128
  %v3_f8ec = icmp ne i32 %v2_f8ec, 0
  store i1 %v3_f8ec, i1* %cpsr_c.global-to-local, align 1
  %v4_f8ec = sdiv i32 %v0_f8dc, 256
  store i32 %v4_f8ec, i32* %r3.global-to-local, align 4
  %v1_f8f0 = trunc i32 %v4_f8ec to i8
  store i8 %v1_f8f0, i8* bitcast (i32* @global_var_1cd8d.153 to i8*), align 4
  store i32 %v2_f8e8, i32* @global_var_1cd94.191, align 4
  store i8 %v1_f8dc, i8* bitcast (i32* @global_var_1cd8c.158 to i8*), align 4
  br label %dec_label_pc_f8fc

dec_label_pc_f8fc:                                ; preds = %dec_label_pc_fa54, %dec_label_pc_f92c, %dec_label_pc_fa88, %dec_label_pc_fa7c, %dec_label_pc_fa70, %dec_label_pc_fa64, %.thread49, %.thread33, %.thread29, %.thread25, %bb327, %bb326, %bb325, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %dec_label_pc_f9c8, %dec_label_pc_f9c0, %bb312, %dec_label_pc_f990, %dec_label_pc_f96c, %bb305, %dec_label_pc_f93c, %bb304, %dec_label_pc_f924, %bb303, %bb329, %dec_label_pc_f8cc
  %v0_f8fc = call i32 @function_eb48()
  store i32 %v0_f8fc, i32* %r0.global-to-local, align 4
  %v1_f900 = urem i32 %v0_f8fc, 256
  store i32 %v1_f900, i32* %r1.global-to-local, align 4
  %v3_f904 = udiv i32 %v0_f8fc, 256
  store i32 %v3_f904, i32* %r3.global-to-local, align 4
  %v3_f908 = udiv i32 %v0_f8fc, 65536
  store i32 %v3_f908, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f90c = icmp eq i32 %v1_f900, 0
  store i1 %v2_f90c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f90c, label %bb303, label %bb302

bb302:                                            ; preds = %dec_label_pc_f8fc
  %v3_f910 = icmp ugt i32 %v1_f900, 126
  store i1 %v3_f910, i1* %cpsr_c.global-to-local, align 1
  %v8_f910 = icmp eq i32 %v1_f900, 127
  store i1 %v8_f910, i1* %cpsr_z.global-to-local, align 1
  br label %bb303

bb303:                                            ; preds = %dec_label_pc_f8fc, %bb302
  %v0_f920 = phi i1 [ true, %dec_label_pc_f8fc ], [ %v8_f910, %bb302 ]
  %v1_f914 = urem i32 %v3_f904, 256
  store i32 %v1_f914, i32* %ip.global-to-local, align 4
  %v1_f918 = urem i32 %v3_f908, 256
  store i32 %v1_f918, i32* %r2.global-to-local, align 4
  %v1_f91c = and i32 %v0_f8fc, 8388608
  %v2_f91c = icmp ne i32 %v1_f91c, 0
  store i1 %v2_f91c, i1* %cpsr_c.global-to-local, align 1
  %v3_f91c = udiv i32 %v0_f8fc, 16777216
  store i32 %v3_f91c, i32* %r0.global-to-local, align 4
  br i1 %v0_f920, label %dec_label_pc_f8fc, label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %bb303
  %v2_f924 = icmp ugt i32 %v1_f900, 2
  store i1 %v2_f924, i1* %cpsr_c.global-to-local, align 1
  %v7_f924 = icmp eq i32 %v1_f900, 3
  store i1 %v7_f924, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f924, label %dec_label_pc_f8fc, label %dec_label_pc_f92c

dec_label_pc_f92c:                                ; preds = %dec_label_pc_f924
  %v1_f92c = add nsw i32 %v1_f900, -15
  store i32 %v1_f92c, i32* %r3.global-to-local, align 4
  %v2_f930 = icmp ugt i32 %v1_f900, 55
  store i1 %v2_f930, i1* %cpsr_c.global-to-local, align 1
  %v7_f930 = icmp eq i32 %v1_f900, 56
  store i1 %v7_f930, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f930, label %dec_label_pc_f8fc, label %bb304

bb304:                                            ; preds = %dec_label_pc_f92c
  %v3_f934 = icmp ne i32 %v1_f92c, 0
  store i1 %v3_f934, i1* %cpsr_c.global-to-local, align 1
  %v8_f934 = icmp eq i32 %v1_f92c, 1
  store i1 %v8_f934, i1* %cpsr_z.global-to-local, align 1
  %v2_f938 = xor i1 %v3_f934, true
  %v3_f938 = or i1 %v8_f934, %v2_f938
  br i1 %v3_f938, label %dec_label_pc_f8fc, label %dec_label_pc_f93c

dec_label_pc_f93c:                                ; preds = %bb304
  %v2_f93c = icmp ugt i32 %v1_f900, 9
  store i1 %v2_f93c, i1* %cpsr_c.global-to-local, align 1
  %v7_f93c = icmp eq i32 %v1_f900, 10
  store i1 %v7_f93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f93c, label %dec_label_pc_f8fc, label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f93c
  %v2_f944 = icmp ugt i32 %v1_f900, 191
  store i1 %v2_f944, i1* %cpsr_c.global-to-local, align 1
  %v7_f944 = icmp eq i32 %v1_f900, 192
  store i1 %v7_f944, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f944, label %bb305, label %dec_label_pc_f950

bb305:                                            ; preds = %dec_label_pc_f944
  %v3_f948 = icmp ugt i32 %v1_f914, 167
  store i1 %v3_f948, i1* %cpsr_c.global-to-local, align 1
  %v8_f948 = icmp eq i32 %v1_f914, 168
  store i1 %v8_f948, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f948, label %dec_label_pc_f8fc, label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %dec_label_pc_f944, %bb305
  %v7_f950 = icmp eq i32 %v1_f900, 172
  %.383 = zext i1 %v7_f950 to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_f95c = icmp ugt i32 %v1_f914, 14
  store i1 %v2_f95c, i1* %cpsr_c.global-to-local, align 1
  %v7_f95c = icmp eq i32 %v1_f914, 15
  store i1 %v7_f95c, i1* %cpsr_z.global-to-local, align 1
  %v2_f960 = xor i1 %v2_f95c, true
  %v3_f960 = or i1 %v7_f95c, %v2_f960
  br i1 %v3_f960, label %.thread9, label %bb308

.thread9:                                         ; preds = %dec_label_pc_f950
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f974

bb308:                                            ; preds = %dec_label_pc_f950
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f964 = icmp eq i1 %v7_f950, false
  store i1 %v2_f964, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f964, label %dec_label_pc_f974, label %dec_label_pc_f96c

dec_label_pc_f96c:                                ; preds = %bb308
  %v2_f96c = icmp ugt i32 %v1_f914, 30
  store i1 %v2_f96c, i1* %cpsr_c.global-to-local, align 1
  %v7_f96c = icmp eq i32 %v1_f914, 31
  store i1 %v7_f96c, i1* %cpsr_z.global-to-local, align 1
  %v2_f970 = xor i1 %v2_f96c, true
  %v3_f970 = or i1 %v7_f96c, %v2_f970
  br i1 %v3_f970, label %dec_label_pc_f8fc, label %dec_label_pc_f974

dec_label_pc_f974:                                ; preds = %.thread9, %dec_label_pc_f96c, %bb308
  %v7_f974 = icmp eq i32 %v1_f900, 100
  %.384 = zext i1 %v7_f974 to i32
  store i32 %.384, i32* %r3.global-to-local, align 4
  %v2_f980 = icmp ugt i32 %v1_f914, 62
  store i1 %v2_f980, i1* %cpsr_c.global-to-local, align 1
  %v7_f980 = icmp eq i32 %v1_f914, 63
  store i1 %v7_f980, i1* %cpsr_z.global-to-local, align 1
  %v2_f984 = xor i1 %v2_f980, true
  %v3_f984 = or i1 %v7_f980, %v2_f984
  br i1 %v3_f984, label %.thread14, label %bb311

.thread14:                                        ; preds = %dec_label_pc_f974
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f998

bb311:                                            ; preds = %dec_label_pc_f974
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f988 = icmp eq i1 %v7_f974, false
  store i1 %v2_f988, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f988, label %dec_label_pc_f998, label %dec_label_pc_f990

dec_label_pc_f990:                                ; preds = %bb311
  %v2_f990 = icmp ugt i32 %v1_f914, 125
  store i1 %v2_f990, i1* %cpsr_c.global-to-local, align 1
  %v7_f990 = icmp eq i32 %v1_f914, 126
  store i1 %v7_f990, i1* %cpsr_z.global-to-local, align 1
  %v2_f994 = xor i1 %v2_f990, true
  %v3_f994 = or i1 %v7_f990, %v2_f994
  br i1 %v3_f994, label %dec_label_pc_f8fc, label %dec_label_pc_f998

dec_label_pc_f998:                                ; preds = %.thread14, %dec_label_pc_f990, %bb311
  %v2_f998 = icmp ugt i32 %v1_f900, 168
  store i1 %v2_f998, i1* %cpsr_c.global-to-local, align 1
  %v7_f998 = icmp eq i32 %v1_f900, 169
  store i1 %v7_f998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f998, label %bb312, label %dec_label_pc_f9a4

bb312:                                            ; preds = %dec_label_pc_f998
  %v3_f99c = icmp eq i32 %v1_f914, 255
  store i1 %v3_f99c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f99c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f99c, label %dec_label_pc_f8fc, label %dec_label_pc_f9a4

dec_label_pc_f9a4:                                ; preds = %dec_label_pc_f998, %bb312
  %v7_f9a4 = icmp eq i32 %v1_f900, 198
  %.385 = zext i1 %v7_f9a4 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  %v2_f9b0 = icmp ugt i32 %v1_f914, 16
  store i1 %v2_f9b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b0 = icmp eq i32 %v1_f914, 17
  store i1 %v7_f9b0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9b4 = xor i1 %v2_f9b0, true
  %v3_f9b4 = or i1 %v7_f9b0, %v2_f9b4
  br i1 %v3_f9b4, label %.thread20, label %bb315

.thread20:                                        ; preds = %dec_label_pc_f9a4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9c8

bb315:                                            ; preds = %dec_label_pc_f9a4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9b8 = icmp eq i1 %v7_f9a4, false
  store i1 %v2_f9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9b8, label %dec_label_pc_f9c8, label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %bb315
  %v2_f9c0 = icmp ugt i32 %v1_f914, 18
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c0 = icmp eq i32 %v1_f914, 19
  store i1 %v7_f9c0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9c4 = xor i1 %v2_f9c0, true
  %v3_f9c4 = or i1 %v7_f9c0, %v2_f9c4
  br i1 %v3_f9c4, label %dec_label_pc_f8fc, label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %.thread20, %dec_label_pc_f9c0, %bb315
  %v2_f9c8 = icmp ugt i32 %v1_f900, 222
  store i1 %v2_f9c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c8 = icmp eq i32 %v1_f900, 223
  store i1 %v7_f9c8, i1* %cpsr_z.global-to-local, align 1
  %v2_f9cc = xor i1 %v7_f9c8, true
  %v3_f9cc = and i1 %v2_f9c8, %v2_f9cc
  br i1 %v3_f9cc, label %dec_label_pc_f8fc, label %dec_label_pc_f9d0

dec_label_pc_f9d0:                                ; preds = %dec_label_pc_f9c8
  %v7_f9d0 = icmp eq i32 %v1_f900, 106
  %.386 = zext i1 %v7_f9d0 to i32
  %v2_f9dc = icmp ugt i32 %v1_f914, 185
  store i1 %v2_f9dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9dc = icmp eq i32 %v1_f914, 186
  store i1 %v7_f9dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9dc, label %bb318, label %dec_label_pc_f9e8

bb318:                                            ; preds = %dec_label_pc_f9d0
  %v2_f9d0 = icmp ugt i32 %v1_f900, 105
  store i1 %v2_f9d0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f9d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d0, label %dec_label_pc_f8fc, label %dec_label_pc_f9e8

dec_label_pc_f9e8:                                ; preds = %dec_label_pc_f9d0, %bb318
  %v2_f9e8 = icmp ugt i32 %v1_f914, 186
  store i1 %v2_f9e8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e8 = icmp eq i32 %v1_f914, 187
  store i1 %v7_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9e8, label %.thread25, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_f9e8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9fc

.thread25:                                        ; preds = %dec_label_pc_f9e8
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9f4 = icmp eq i1 %v7_f9d0, false
  store i1 %v2_f9f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9f4, label %dec_label_pc_f9fc, label %dec_label_pc_f8fc

dec_label_pc_f9fc:                                ; preds = %.thread26, %.thread25
  %v2_f9fc = icmp ugt i32 %v1_f914, 184
  store i1 %v2_f9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9fc = icmp eq i32 %v1_f914, 185
  store i1 %v7_f9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9fc, label %.thread29, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_f9fc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa10

.thread29:                                        ; preds = %dec_label_pc_f9fc
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa08 = icmp eq i1 %v7_f9d0, false
  store i1 %v2_fa08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa08, label %dec_label_pc_fa10, label %dec_label_pc_f8fc

dec_label_pc_fa10:                                ; preds = %.thread30, %.thread29
  %v2_fa10 = icmp ugt i32 %v1_f914, 183
  store i1 %v2_fa10, i1* %cpsr_c.global-to-local, align 1
  %v7_fa10 = icmp eq i32 %v1_f914, 184
  store i1 %v7_fa10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa10, label %.thread33, label %.thread34

.thread34:                                        ; preds = %dec_label_pc_fa10
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa24

.thread33:                                        ; preds = %dec_label_pc_fa10
  store i32 %.386, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa1c = icmp eq i1 %v7_f9d0, false
  store i1 %v2_fa1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa1c, label %dec_label_pc_fa24, label %dec_label_pc_f8fc

dec_label_pc_fa24:                                ; preds = %.thread34, %.thread33
  %v2_fa24 = icmp ugt i32 %v1_f900, 149
  store i1 %v2_fa24, i1* %cpsr_c.global-to-local, align 1
  %v7_fa24 = icmp eq i32 %v1_f900, 150
  store i1 %v7_fa24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa24, label %bb319, label %dec_label_pc_fa30

bb319:                                            ; preds = %dec_label_pc_fa24
  %v3_fa28 = icmp ugt i32 %v1_f914, 30
  store i1 %v3_fa28, i1* %cpsr_c.global-to-local, align 1
  %v8_fa28 = icmp eq i32 %v1_f914, 31
  store i1 %v8_fa28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa28, label %dec_label_pc_f8fc, label %dec_label_pc_fa30

dec_label_pc_fa30:                                ; preds = %dec_label_pc_fa24, %bb319
  %v2_fa30 = icmp ugt i32 %v1_f900, 48
  store i1 %v2_fa30, i1* %cpsr_c.global-to-local, align 1
  %v7_fa30 = icmp eq i32 %v1_f900, 49
  store i1 %v7_fa30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa30, label %bb320, label %dec_label_pc_fa3c

bb320:                                            ; preds = %dec_label_pc_fa30
  %v3_fa34 = icmp ugt i32 %v1_f914, 50
  store i1 %v3_fa34, i1* %cpsr_c.global-to-local, align 1
  %v8_fa34 = icmp eq i32 %v1_f914, 51
  store i1 %v8_fa34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa34, label %dec_label_pc_f8fc, label %dec_label_pc_fa3c

dec_label_pc_fa3c:                                ; preds = %dec_label_pc_fa30, %bb320
  %v2_fa3c = icmp ugt i32 %v1_f900, 177
  store i1 %v2_fa3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa3c = icmp eq i32 %v1_f900, 178
  store i1 %v7_fa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa3c, label %bb321, label %dec_label_pc_fa48

bb321:                                            ; preds = %dec_label_pc_fa3c
  %v3_fa40 = icmp ugt i32 %v1_f914, 61
  store i1 %v3_fa40, i1* %cpsr_c.global-to-local, align 1
  %v8_fa40 = icmp eq i32 %v1_f914, 62
  store i1 %v8_fa40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa40, label %dec_label_pc_f8fc, label %dec_label_pc_fa48

dec_label_pc_fa48:                                ; preds = %dec_label_pc_fa3c, %bb321
  %v2_fa48 = icmp ugt i32 %v1_f900, 159
  store i1 %v2_fa48, i1* %cpsr_c.global-to-local, align 1
  %v7_fa48 = icmp eq i32 %v1_f900, 160
  store i1 %v7_fa48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa48, label %bb322, label %dec_label_pc_fa54

bb322:                                            ; preds = %dec_label_pc_fa48
  %v3_fa4c = icmp ugt i32 %v1_f914, 12
  store i1 %v3_fa4c, i1* %cpsr_c.global-to-local, align 1
  %v8_fa4c = icmp eq i32 %v1_f914, 13
  store i1 %v8_fa4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa4c, label %dec_label_pc_f8fc, label %dec_label_pc_fa54

dec_label_pc_fa54:                                ; preds = %dec_label_pc_fa48, %bb322
  %v1_fa54 = add nsw i32 %v1_f900, -6
  store i32 %v1_fa54, i32* %r3.global-to-local, align 4
  %v2_fa58 = icmp ugt i32 %v1_f900, 10
  store i1 %v2_fa58, i1* %cpsr_c.global-to-local, align 1
  %v7_fa58 = icmp eq i32 %v1_f900, 11
  store i1 %v7_fa58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa58, label %dec_label_pc_f8fc, label %bb323

bb323:                                            ; preds = %dec_label_pc_fa54
  %v3_fa5c = icmp ne i32 %v1_fa54, 0
  store i1 %v3_fa5c, i1* %cpsr_c.global-to-local, align 1
  %v8_fa5c = icmp eq i32 %v1_fa54, 1
  store i1 %v8_fa5c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa60 = xor i1 %v3_fa5c, true
  %v3_fa60 = or i1 %v8_fa5c, %v2_fa60
  br i1 %v3_fa60, label %dec_label_pc_f8fc, label %dec_label_pc_fa64

dec_label_pc_fa64:                                ; preds = %bb323
  %v2_fa64 = icmp ugt i32 %v1_f900, 21
  store i1 %v2_fa64, i1* %cpsr_c.global-to-local, align 1
  %v7_fa64 = icmp eq i32 %v1_f900, 22
  store i1 %v7_fa64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa64, label %dec_label_pc_f8fc, label %bb324

bb324:                                            ; preds = %dec_label_pc_fa64
  %v3_fa68 = icmp ugt i32 %v1_f900, 20
  store i1 %v3_fa68, i1* %cpsr_c.global-to-local, align 1
  %v8_fa68 = icmp eq i32 %v1_f900, 21
  store i1 %v8_fa68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa68, label %dec_label_pc_f8fc, label %dec_label_pc_fa70

dec_label_pc_fa70:                                ; preds = %bb324
  %v2_fa70 = icmp ugt i32 %v1_f900, 27
  store i1 %v2_fa70, i1* %cpsr_c.global-to-local, align 1
  %v7_fa70 = icmp eq i32 %v1_f900, 28
  store i1 %v7_fa70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa70, label %dec_label_pc_f8fc, label %bb325

bb325:                                            ; preds = %dec_label_pc_fa70
  %v3_fa74 = icmp ugt i32 %v1_f900, 25
  store i1 %v3_fa74, i1* %cpsr_c.global-to-local, align 1
  %v8_fa74 = icmp eq i32 %v1_f900, 26
  store i1 %v8_fa74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa74, label %dec_label_pc_f8fc, label %dec_label_pc_fa7c

dec_label_pc_fa7c:                                ; preds = %bb325
  %v2_fa7c = icmp ugt i32 %v1_f900, 29
  store i1 %v2_fa7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa7c = icmp eq i32 %v1_f900, 30
  store i1 %v7_fa7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa7c, label %dec_label_pc_f8fc, label %bb326

bb326:                                            ; preds = %dec_label_pc_fa7c
  %v3_fa80 = icmp ugt i32 %v1_f900, 28
  store i1 %v3_fa80, i1* %cpsr_c.global-to-local, align 1
  %v8_fa80 = icmp eq i32 %v1_f900, 29
  store i1 %v8_fa80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa80, label %dec_label_pc_f8fc, label %dec_label_pc_fa88

dec_label_pc_fa88:                                ; preds = %bb326
  %v2_fa88 = icmp ugt i32 %v1_f900, 54
  store i1 %v2_fa88, i1* %cpsr_c.global-to-local, align 1
  %v7_fa88 = icmp eq i32 %v1_f900, 55
  store i1 %v7_fa88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa88, label %dec_label_pc_f8fc, label %bb327

bb327:                                            ; preds = %dec_label_pc_fa88
  %v3_fa8c = icmp ugt i32 %v1_f900, 32
  store i1 %v3_fa8c, i1* %cpsr_c.global-to-local, align 1
  %v8_fa8c = icmp eq i32 %v1_f900, 33
  store i1 %v8_fa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa8c, label %dec_label_pc_f8fc, label %dec_label_pc_fa94

dec_label_pc_fa94:                                ; preds = %bb327
  %v2_fa94 = icmp ugt i32 %v1_f900, 214
  store i1 %v2_fa94, i1* %cpsr_c.global-to-local, align 1
  %v7_fa94 = icmp eq i32 %v1_f900, 215
  store i1 %v7_fa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa94, label %.thread49, label %bb328

bb328:                                            ; preds = %dec_label_pc_fa94
  %v3_fa98 = icmp ugt i32 %v1_f900, 213
  store i1 %v3_fa98, i1* %cpsr_c.global-to-local, align 1
  %v8_fa98 = icmp eq i32 %v1_f900, 214
  store i1 %v8_fa98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa98, label %bb329, label %dec_label_pc_faa8

.thread49:                                        ; preds = %dec_label_pc_fa94
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f8fc

bb329:                                            ; preds = %bb328
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f8fc

dec_label_pc_faa8:                                ; preds = %bb328
  store i32 0, i32* @r4, align 4
  %v5_fab4 = call i32 @llvm.bswap.i32(i32 %v0_f8fc)
  store i32 %v5_fab4, i32* %r3.global-to-local, align 4
  %tmp330 = and i32 %v0_f8fc, 65280
  %tmp331 = call i32 @llvm.bswap.i32(i32 %tmp330)
  %tmp332 = and i32 %v0_f8fc, 16711680
  %tmp333 = call i32 @llvm.bswap.i32(i32 %tmp332)
  %v3_fac0 = mul nuw i32 %v3_f91c, 16777216
  %v3_fac4 = udiv i32 %tmp331, 256
  %v4_fac8 = mul nuw nsw i32 %tmp333, 256
  %tmp334 = and i32 %v0_f8fc, 32768
  %v3_facc = icmp ne i32 %tmp334, 0
  store i1 %v3_facc, i1* %cpsr_c.global-to-local, align 1
  %v4_facc = udiv i32 %v5_fab4, 16777216
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* @r0, align 4
  %v5_facc = or i32 %v4_facc, %v3_fac0
  %v5_fac8 = or i32 %v5_facc, %v4_fac8
  %v2_fad4 = or i32 %v5_fac8, %v3_fac4
  store i32 %v2_fad4, i32* %r2.global-to-local, align 4
  %v5_fad8 = trunc i32 %v4_facc to i8
  store i8 %v5_fad8, i8* @global_var_1cd98.192, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1cd92.193 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1cd93.194 to i8*), align 4
  %v3_fae8 = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32 20)
  %v4_fae8 = trunc i32 %v3_fae8 to i8
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* @lr, align 4
  %v2_faf0 = and i32 %v3_fae8, 128
  %v3_faf0 = icmp ne i32 %v2_faf0, 0
  store i1 %v3_faf0, i1* %cpsr_c.global-to-local, align 1
  %v4_faf0 = sdiv i32 %v3_fae8, 256
  store i32 %v4_faf0, i32* %r2.global-to-local, align 4
  store i32 %v3_fae8, i32* %r3.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v1_fafc = trunc i32 %v4_faf0 to i8
  store i8 %v1_fafc, i8* bitcast (i32* @global_var_1cd93.194 to i8*), align 4
  store i8 %v4_fae8, i8* bitcast (i32* @global_var_1cd92.193 to i8*), align 4
  %v3_fb04 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fb04, i32* %r0.global-to-local, align 4
  %v4_fb08 = call i32 @function_11bf4(i32 %v3_fb04, i32 10)
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb0c = icmp eq i32 %v4_fb08, 0
  store i1 %v2_fb0c, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* %r0.global-to-local, align 4
  br i1 %v2_fb0c, label %bb336, label %bb335

bb335:                                            ; preds = %dec_label_pc_faa8
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* %r2.global-to-local, align 4
  %v4_fb20 = load i8, i8* @global_var_1cd98.192, align 1
  %v5_fb20 = sext i8 %v4_fb20 to i32
  store i32 %v5_fb20, i32* %ip.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  br label %.thread63

bb336:                                            ; preds = %dec_label_pc_faa8
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* %r1.global-to-local, align 4
  %v4_fb2052 = load i8, i8* @global_var_1cd98.192, align 1
  %v5_fb2053 = sext i8 %v4_fb2052 to i32
  store i32 %v5_fb2053, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i8 9, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32 2) to i8*), align 2
  %v0_fb34.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb34.pr.pre, label %.thread61, label %.thread63

.thread61:                                        ; preds = %bb336
  %v1_fb34 = load i32, i32* %r2.global-to-local, align 4
  %v2_fb34 = trunc i32 %v1_fb34 to i8
  %v3_fb34 = load i32, i32* %r1.global-to-local, align 4
  %v4_fb34 = add i32 %v3_fb34, 3
  %v5_fb34 = inttoptr i32 %v4_fb34 to i8*
  store i8 %v2_fb34, i8* %v5_fb34, align 1
  %v0_fb38.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb38.pr.pr, label %.thread64, label %.thread63

.thread63:                                        ; preds = %bb335, %bb336, %.thread61
  %v1_fb38 = load i32, i32* @r4, align 4
  %v2_fb38 = trunc i32 %v1_fb38 to i8
  %v3_fb38 = load i32, i32* %r2.global-to-local, align 4
  %v4_fb38 = add i32 %v3_fb38, 2
  %v5_fb38 = inttoptr i32 %v4_fb38 to i8*
  store i8 %v2_fb38, i8* %v5_fb38, align 1
  %v0_fb3c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fb3c.pr, label %.thread64, label %bb337

bb337:                                            ; preds = %.thread63
  %v1_fb3c = load i32, i32* %r3.global-to-local, align 4
  %v2_fb3c = trunc i32 %v1_fb3c to i8
  %v3_fb3c = load i32, i32* %r2.global-to-local, align 4
  %v4_fb3c = add i32 %v3_fb3c, 3
  %v5_fb3c = inttoptr i32 %v4_fb3c to i8*
  store i8 %v2_fb3c, i8* %v5_fb3c, align 1
  br label %.thread64

.thread64:                                        ; preds = %.thread61, %.thread63, %bb337
  %v0_fb40 = load i32, i32* %ip.global-to-local, align 4
  %v4_fb40 = trunc i32 %v0_fb40 to i8
  store i8 %v4_fb40, i8* @global_var_1cda0.195, align 4
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_fb50 = load i32, i32* %sl.global-to-local, align 4
  %v1_fb50 = trunc i32 %v0_fb50 to i8
  store i8 %v1_fb50, i8* bitcast (i32* @global_var_1cdac.196 to i8*), align 4
  store i8 %v1_fb50, i8* bitcast (i32* @global_var_1cdad.197 to i8*), align 4
  %v5_fb58 = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_fb58, 16777216
  %v1_fb60 = sdiv i32 %sext, 16777216
  %v3_fb68 = ashr i32 %sext, 31
  %v2_fb6c = load i32, i32* @global_var_1cd9c.151, align 4
  %v1_fb74 = trunc i32 %v3_fb68 to i8
  store i8 %v1_fb74, i8* bitcast (i32* @global_var_1cdad.197 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_fb88 = load i8, i8* @global_var_1cd98.192, align 1
  %v4_fb88 = sext i8 %v3_fb88 to i32
  store i32 %v4_fb88, i32* @r4, align 4
  %v2_fb8c = load i32, i32* @global_var_1ce20.145, align 4
  store i32 %v2_fb8c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), i32* %ip.global-to-local, align 4
  %v1_fb9c = and i32 %v2_fb6c, 8388608
  %v2_fb9c = icmp ne i32 %v1_fb9c, 0
  store i1 %v2_fb9c, i1* %cpsr_c.global-to-local, align 1
  %v1_fba4 = trunc i32 %v1_fb60 to i8
  store i8 %v1_fba4, i8* bitcast (i32* @global_var_1cdac.196 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1cd88.147 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_fbcc = call i32 @function_12658(i32 %v2_fb8c, i32* bitcast (i8** @global_var_1cd88.147 to i32*), i32 40, i32 16384, i32 %v2_fbb4, i32 16)
  store i32 %v8_fbcc, i32* %r0.global-to-local, align 4
  %v3_fbd0 = load i32, i32* %stack_var_-52, align 4
  %v1_fbd4 = add i32 %v3_fbd0, 1
  store i32 %v1_fbd4, i32* %r3.global-to-local, align 4
  %v3_fbd8 = icmp ugt i32 %v1_fbd4, 483
  store i1 %v3_fbd8, i1* %cpsr_c.global-to-local, align 1
  %v8_fbd8 = icmp eq i32 %v1_fbd4, 484
  store i1 %v8_fbd8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fbd4, i32* %stack_var_-52, align 4
  %v5_fbe0 = icmp slt i32 %v1_fbd4, 484
  br i1 %v5_fbe0, label %.thread64.dec_label_pc_f8cc_crit_edge, label %dec_label_pc_fbe4

.thread64.dec_label_pc_f8cc_crit_edge:            ; preds = %.thread64
  %v0_f8cc.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f8cc

dec_label_pc_fbe4:                                ; preds = %.thread64
  %v0_fbe4 = load i32, i32* @r8, align 4
  br label %dec_label_pc_fbe8

dec_label_pc_fbe8:                                ; preds = %dec_label_pc_f8ac, %dec_label_pc_fbe4
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_f8ac ], [ %v0_fbe4, %dec_label_pc_fbe4 ]
  %v0_fbe8 = call i32 @function_12374()
  store i32 %v0_fbe8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_fbfc = inttoptr i32 %v0_fbe8 to i32*
  %v6_fc24 = inttoptr i32 %v0_fc60 to i32*
  %v1_fc50 = add i32 %v0_fc60, 16
  %v2_fc50 = inttoptr i32 %v1_fc50 to i32*
  %v4_fc6c = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_fc74 = add i32 %v4_fc6c, 1
  %v2_fc74 = inttoptr i32 %v1_fc74 to i8*
  %v1_fc98 = add i32 %v4_fc6c, 3
  %v2_fc98 = inttoptr i32 %v1_fc98 to i8*
  %v1_fc9c = add i32 %v4_fc6c, 2
  %v2_fc9c = inttoptr i32 %v1_fc9c to i8*
  %v4_fca4 = sext i8 %stack_var_-1876.0 to i32
  %v1_fd80 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_fc60 = add i32 %v0_fc60, 9
  %v2_fc60 = inttoptr i32 %v1_fc60 to i8*
  %v1_fcb0 = add i32 %v4_fc6c, 13
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i8*
  %v1_fcd4 = add i32 %v4_fc6c, 8
  %v2_fcd4 = inttoptr i32 %v1_fcd4 to i32*
  %v1_fd14 = add i32 %v0_fc60, 12
  %v2_fd14 = inttoptr i32 %v1_fd14 to i32*
  br label %dec_label_pc_fbf4

dec_label_pc_fbf4:                                ; preds = %dec_label_pc_fcd4, %dec_label_pc_fccc, %dec_label_pc_fcc4, %dec_label_pc_fc94, %dec_label_pc_fc84, %dec_label_pc_fc60, %dec_label_pc_fc48, %dec_label_pc_fcbc, %dec_label_pc_fcb0, %dec_label_pc_fc40, %dec_label_pc_fd78, %dec_label_pc_fbe8
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v2_fbfc, align 4
  %v0_fc04 = load i32, i32* %r2.global-to-local, align 4
  %v2_fc08 = load i32, i32* @global_var_1ce20.145, align 4
  store i32 %v2_fc08, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_fc10 = add i32 %v0_fc04, 1514
  store i32 %v1_fc10, i32* %r2.global-to-local, align 4
  store i32 %v0_fc60, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_fc24 = call i32 @function_125f8(i32 %v2_fc08, i32* %v6_fc24, i32 %v1_fc10, i32 16384, i32 0, i32 0)
  store i32 %v7_fc24, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc28 = icmp eq i32 %v7_fc24, 0
  store i1 %v2_fc28, i1* %cpsr_z.global-to-local, align 1
  %tmp338 = icmp slt i32 %v7_fc24, 1
  br i1 %tmp338, label %dec_label_pc_fd98, label %dec_label_pc_fc30

dec_label_pc_fc30:                                ; preds = %dec_label_pc_fbf4
  %v2_fc34 = load i32, i32* %v2_fbfc, align 4
  store i32 %v2_fc34, i32* %r3.global-to-local, align 4
  %v2_fc38 = icmp ugt i32 %v2_fc34, 10
  store i1 %v2_fc38, i1* %cpsr_c.global-to-local, align 1
  %v7_fc38 = icmp eq i32 %v2_fc34, 11
  store i1 %v7_fc38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc38, label %dec_label_pc_fd98, label %dec_label_pc_fc40

dec_label_pc_fc40:                                ; preds = %dec_label_pc_fc30
  %v2_fc40 = icmp ugt i32 %v7_fc24, 38
  store i1 %v2_fc40, i1* %cpsr_c.global-to-local, align 1
  %v7_fc40 = icmp eq i32 %v7_fc24, 39
  store i1 %v7_fc40, i1* %cpsr_z.global-to-local, align 1
  %v2_fc44 = xor i1 %v2_fc40, true
  %v3_fc44 = or i1 %v7_fc40, %v2_fc44
  br i1 %v3_fc44, label %dec_label_pc_fbf4, label %dec_label_pc_fc48

dec_label_pc_fc48:                                ; preds = %dec_label_pc_fc40
  store i32 %v0_fc60, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1ce00.50 to i32), i32* %ip.global-to-local, align 4
  %v3_fc50 = load i32, i32* %v2_fc50, align 4
  store i32 %v3_fc50, i32* %r2.global-to-local, align 4
  %v2_fc54 = load i32, i32* @global_var_1ce00.50, align 4
  store i32 %v2_fc54, i32* %r3.global-to-local, align 4
  %v3_fc58 = icmp uge i32 %v3_fc50, %v2_fc54
  store i1 %v3_fc58, i1* %cpsr_c.global-to-local, align 1
  %v9_fc58 = icmp eq i32 %v3_fc50, %v2_fc54
  store i1 %v9_fc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fc58, label %dec_label_pc_fc60, label %dec_label_pc_fbf4

dec_label_pc_fc60:                                ; preds = %dec_label_pc_fc48
  %v3_fc60 = load i8, i8* %v2_fc60, align 1
  %v4_fc60 = zext i8 %v3_fc60 to i32
  store i32 %v4_fc60, i32* %r3.global-to-local, align 4
  %v2_fc64 = icmp ugt i8 %v3_fc60, 5
  store i1 %v2_fc64, i1* %cpsr_c.global-to-local, align 1
  %v7_fc64 = icmp eq i8 %v3_fc60, 6
  store i1 %v7_fc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc64, label %dec_label_pc_fc6c, label %dec_label_pc_fbf4

dec_label_pc_fc6c:                                ; preds = %dec_label_pc_fc60
  %v2_fc70 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_fc70 = zext i8 %v2_fc70 to i32
  store i32 %v3_fc70, i32* %r2.global-to-local, align 4
  %v3_fc74 = load i8, i8* %v2_fc74, align 1
  %v4_fc74 = zext i8 %v3_fc74 to i32
  store i32 %v4_fc74, i32* %r3.global-to-local, align 4
  %v4_fc78 = mul nuw nsw i32 %v4_fc74, 256
  %v5_fc78 = or i32 %v4_fc78, %v3_fc70
  store i32 %v5_fc78, i32* %r2.global-to-local, align 4
  %v2_fc7c = icmp ugt i32 %v5_fc78, 5887
  store i1 %v2_fc7c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc7c = icmp eq i32 %v5_fc78, 5888
  store i1 %v7_fc7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc7c, label %dec_label_pc_fc94, label %dec_label_pc_fc84

dec_label_pc_fc84:                                ; preds = %dec_label_pc_fc6c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fc8c = icmp ugt i32 %v5_fc78, 4872
  store i1 %v3_fc8c, i1* %cpsr_c.global-to-local, align 1
  %v9_fc8c = icmp eq i32 %v5_fc78, 4873
  store i1 %v9_fc8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fc8c, label %dec_label_pc_fc94, label %dec_label_pc_fbf4

dec_label_pc_fc94:                                ; preds = %dec_label_pc_fc84, %dec_label_pc_fc6c
  store i32 %v4_fc6c, i32* %r1.global-to-local, align 4
  %v3_fc98 = load i8, i8* %v2_fc98, align 1
  %v4_fc98 = zext i8 %v3_fc98 to i32
  store i32 %v4_fc98, i32* %r2.global-to-local, align 4
  %v3_fc9c = load i8, i8* %v2_fc9c, align 1
  %v4_fc9c = zext i8 %v3_fc9c to i32
  %v4_fca0 = mul nuw nsw i32 %v4_fc98, 256
  %v5_fca0 = or i32 %v4_fc9c, %v4_fca0
  store i32 %v5_fca0, i32* %r3.global-to-local, align 4
  store i32 %v4_fca4, i32* %r2.global-to-local, align 4
  %v3_fca8 = icmp uge i32 %v5_fca0, %v4_fca4
  store i1 %v3_fca8, i1* %cpsr_c.global-to-local, align 1
  %v9_fca8 = icmp eq i32 %v5_fca0, %v4_fca4
  store i1 %v9_fca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fca8, label %dec_label_pc_fcb0, label %dec_label_pc_fbf4

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc94
  %v3_fcb0 = load i8, i8* %v2_fcb0, align 1
  %v4_fcb0 = zext i8 %v3_fcb0 to i32
  store i32 %v4_fcb0, i32* %r3.global-to-local, align 4
  %v1_fcb4 = and i32 %v4_fcb0, 2
  %v2_fcb4 = icmp eq i32 %v1_fcb4, 0
  store i1 %v2_fcb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcb4, label %dec_label_pc_fbf4, label %dec_label_pc_fcbc

dec_label_pc_fcbc:                                ; preds = %dec_label_pc_fcb0
  %v1_fcbc = and i32 %v4_fcb0, 16
  %v2_fcbc = icmp eq i32 %v1_fcbc, 0
  store i1 %v2_fcbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcbc, label %dec_label_pc_fbf4, label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcbc
  %v1_fcc4 = and i32 %v4_fcb0, 4
  %v2_fcc4 = icmp eq i32 %v1_fcc4, 0
  store i1 %v2_fcc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fcc4, label %dec_label_pc_fccc, label %dec_label_pc_fbf4

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fcc4
  %tmp495 = urem i8 %v3_fcb0, 2
  %v2_fccc = icmp eq i8 %tmp495, 0
  store i1 %v2_fccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fccc, label %dec_label_pc_fcd4, label %dec_label_pc_fbf4

dec_label_pc_fcd4:                                ; preds = %dec_label_pc_fccc
  %v3_fcd4 = load i32, i32* %v2_fcd4, align 4
  %v2_fcf0 = call i32 @llvm.bswap.i32(i32 %v3_fcd4)
  %v1_fcf4 = add i32 %v2_fcf0, -1
  %v1_fcf8 = udiv i32 %v1_fcf4, 256
  %v3_fcfc = and i32 %v1_fcf8, 65280
  %v1_fd00 = and i32 %v1_fcf4, 65280
  store i32 %v1_fd00, i32* %r2.global-to-local, align 4
  %v3_fd04 = mul i32 %v1_fcf4, 16777216
  %v4_fd08 = udiv i32 %v1_fcf4, 16777216
  %v5_fd08 = or i32 %v3_fcfc, %v4_fd08
  store i32 %v5_fd08, i32* %r1.global-to-local, align 4
  store i32 %v0_fc60, i32* %r3.global-to-local, align 4
  %v4_fd10 = mul nuw nsw i32 %v1_fd00, 256
  %v5_fd10 = or i32 %v4_fd10, %v3_fd04
  store i32 %v5_fd10, i32* %r0.global-to-local, align 4
  %v3_fd14 = load i32, i32* %v2_fd14, align 4
  store i32 %v3_fd14, i32* %r2.global-to-local, align 4
  %v2_fd18 = call i32 @llvm.bswap.i32(i32 %v1_fcf4)
  store i32 %v2_fd18, i32* %ip.global-to-local, align 4
  %v3_fd1c = icmp uge i32 %v2_fd18, %v3_fd14
  store i1 %v3_fd1c, i1* %cpsr_c.global-to-local, align 1
  %v9_fd1c = icmp eq i32 %v2_fd18, %v3_fd14
  store i1 %v9_fd1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd1c, label %dec_label_pc_fd24, label %dec_label_pc_fbf4

dec_label_pc_fd24:                                ; preds = %dec_label_pc_fcd4
  %v0_fd24 = load i32, i32* @r4, align 4
  %v3_fd24 = icmp ugt i32 %v0_fd24, 355
  store i1 %v3_fd24, i1* %cpsr_c.global-to-local, align 1
  %v8_fd24 = icmp eq i32 %v0_fd24, 356
  store i1 %v8_fd24, i1* %cpsr_z.global-to-local, align 1
  %v6_fd28 = icmp slt i32 %v0_fd24, 356
  br i1 %v6_fd28, label %dec_label_pc_fd2c, label %dec_label_pc_fd98

dec_label_pc_fd2c:                                ; preds = %dec_label_pc_fd24
  %v2_fd3c = load i32, i32* @global_var_1ce1c.143, align 4
  store i32 %v2_fd3c, i32* %r1.global-to-local, align 4
  %v3_fd40 = mul i32 %v0_fd24, 388
  store i32 %v3_fd40, i32* %r3.global-to-local, align 4
  %v2_fd44 = add i32 %v2_fd3c, %v3_fd40
  store i32 %v2_fd44, i32* @r0, align 4
  %v1_fd48 = add i32 %v2_fd44, 12
  %v2_fd48 = inttoptr i32 %v1_fd48 to i32*
  %v3_fd48 = load i32, i32* %v2_fd48, align 4
  store i32 %v3_fd48, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd4c = icmp eq i32 %v3_fd48, 0
  store i1 %v2_fd4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd4c, label %dec_label_pc_fd78, label %dec_label_pc_fd58.preheader

dec_label_pc_fd58.preheader:                      ; preds = %dec_label_pc_fd2c
  %v2_fd50 = add i32 %v2_fd44, 388
  store i32 %v2_fd50, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd58

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fd58.preheader, %dec_label_pc_fd64
  %v0_fd64 = phi i32 [ %v2_fd50, %dec_label_pc_fd58.preheader ], [ %v1_fd70, %dec_label_pc_fd64 ]
  %v0_fd58 = phi i32 [ %v0_fd24, %dec_label_pc_fd58.preheader ], [ %v1_fd58, %dec_label_pc_fd64 ]
  %v1_fd58 = add i32 %v0_fd58, 1
  store i32 %v1_fd58, i32* @r4, align 4
  %v7_fd5c = icmp eq i32 %v1_fd58, 356
  br i1 %v7_fd5c, label %dec_label_pc_fd98.loopexit, label %dec_label_pc_fd64

dec_label_pc_fd64:                                ; preds = %dec_label_pc_fd58
  store i32 %v0_fd64, i32* @r0, align 4
  %v1_fd68 = add i32 %v0_fd64, 12
  %v2_fd68 = inttoptr i32 %v1_fd68 to i32*
  %v3_fd68 = load i32, i32* %v2_fd68, align 4
  %v2_fd6c = icmp eq i32 %v3_fd68, 0
  %v1_fd70 = add i32 %v0_fd64, 388
  store i32 %v1_fd70, i32* %r3.global-to-local, align 4
  br i1 %v2_fd6c, label %dec_label_pc_fd78.loopexit, label %dec_label_pc_fd58

dec_label_pc_fd78.loopexit:                       ; preds = %dec_label_pc_fd64
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd78

dec_label_pc_fd78:                                ; preds = %dec_label_pc_fd78.loopexit, %dec_label_pc_fd2c
  %v1_fd78 = phi i32 [ %v0_fd64, %dec_label_pc_fd78.loopexit ], [ %v2_fd44, %dec_label_pc_fd2c ]
  %v2_fd78 = add i32 %v1_fd78, 16
  %v3_fd78 = inttoptr i32 %v2_fd78 to i32*
  store i32 %v3_fd14, i32* %v3_fd78, align 4
  store i32 %v4_fc6c, i32* %r1.global-to-local, align 4
  %v2_fd80 = load i32, i32* %v1_fd80, align 4
  store i32 %v2_fd80, i32* %r2.global-to-local, align 4
  %v1_fd84 = and i32 %v2_fd80, 128
  %v2_fd84 = icmp ne i32 %v1_fd84, 0
  store i1 %v2_fd84, i1* %cpsr_c.global-to-local, align 1
  %v3_fd84 = sdiv i32 %v2_fd80, 256
  store i32 %v3_fd84, i32* %r3.global-to-local, align 4
  %v1_fd88 = trunc i32 %v3_fd84 to i8
  %v2_fd88 = load i32, i32* @r0, align 4
  %v3_fd88 = add i32 %v2_fd88, 21
  %v4_fd88 = inttoptr i32 %v3_fd88 to i8*
  store i8 %v1_fd88, i8* %v4_fd88, align 1
  %v0_fd8c = load i32, i32* %r2.global-to-local, align 4
  %v1_fd8c = trunc i32 %v0_fd8c to i8
  %v2_fd8c = load i32, i32* @r0, align 4
  %v3_fd8c = add i32 %v2_fd8c, 20
  %v4_fd8c = inttoptr i32 %v3_fd8c to i8*
  store i8 %v1_fd8c, i8* %v4_fd8c, align 1
  %v0_fd90 = call i32 @function_f330()
  store i32 %v0_fd90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fbf4

dec_label_pc_fd98.loopexit:                       ; preds = %dec_label_pc_fd58
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fd98

dec_label_pc_fd98:                                ; preds = %dec_label_pc_fd24, %dec_label_pc_fc30, %dec_label_pc_fbf4, %dec_label_pc_fd98.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_fdb0444 = load i32, i32* @sp, align 4
  %v3_fdb0445 = add i32 %v2_fdb0444, 1672
  %v4_fdb0446 = inttoptr i32 %v3_fdb0445 to i32*
  store i32 0, i32* %v4_fdb0446, align 4
  br label %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge

dec_label_pc_fda0.dec_label_pc_fda0_crit_edge:    ; preds = %dec_label_pc_fd98, %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge
  %v0_fda0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fdb0.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fda4 = add i32 %v0_fda0.pre, 4
  store i32 %v1_fda4, i32* %r3.global-to-local, align 4
  %v1_fda8 = add i32 %v0_fda0.pre, 1672
  store i32 %v1_fda8, i32* %ip.global-to-local, align 4
  %v7_fdac = icmp eq i32 %v1_fda4, 128
  %v2_fdb0 = load i32, i32* @sp, align 4
  %v3_fdb0 = add i32 %v2_fdb0, %v1_fda8
  %v4_fdb0 = inttoptr i32 %v3_fdb0 to i32*
  store i32 %v0_fdb0.pre, i32* %v4_fdb0, align 4
  br i1 %v7_fdac, label %dec_label_pc_fdb8, label %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fdb8 = load i32, i32* %r2.global-to-local, align 4
  %v1_fdc0438 = add i32 %v0_fdb8, 4
  store i32 %v1_fdc0438, i32* %r3.global-to-local, align 4
  %v1_fdc4439 = add i32 %v0_fdb8, 1544
  %v7_fdc8440 = icmp eq i32 %v1_fdc0438, 128
  %v2_fdcc441 = load i32, i32* @sp, align 4
  %v3_fdcc442 = add i32 %v2_fdcc441, %v1_fdc4439
  %v4_fdcc443 = inttoptr i32 %v3_fdcc442 to i32*
  store i32 %v0_fdb8, i32* %v4_fdcc443, align 4
  br i1 %v7_fdc8440, label %dec_label_pc_fdd4, label %dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge

dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge:    ; preds = %dec_label_pc_fdb8, %dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge
  %v0_fdbc.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fdcc.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fdc0 = add i32 %v0_fdbc.pre, 4
  store i32 %v1_fdc0, i32* %r3.global-to-local, align 4
  %v1_fdc4 = add i32 %v0_fdbc.pre, 1544
  %v7_fdc8 = icmp eq i32 %v1_fdc0, 128
  %v2_fdcc = load i32, i32* @sp, align 4
  %v3_fdcc = add i32 %v2_fdcc, %v1_fdc4
  %v4_fdcc = inttoptr i32 %v3_fdcc to i32*
  store i32 %v0_fdcc.pre, i32* %v4_fdcc, align 4
  br i1 %v7_fdc8, label %dec_label_pc_fdd4, label %dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge

dec_label_pc_fdd4:                                ; preds = %dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge, %dec_label_pc_fdb8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fdd4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fdd4, i32* @r6, align 4
  store i32 %v0_fdd4, i32* @r5, align 4
  store i32 %v0_fdd4, i32* @r7, align 4
  store i32 %v0_fdd4, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fe4c

dec_label_pc_fde8:                                ; preds = %dec_label_pc_fe78, %dec_label_pc_fe4c
  %storemerge250 = phi i32 [ 30, %dec_label_pc_fe4c ], [ 5, %dec_label_pc_fe78 ]
  store i32 %storemerge250, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdb8.131 to i32), i32* %r2.global-to-local, align 4
  %v2_fdec = load i32, i32* @global_var_1cdb8.131, align 4
  store i32 %v2_fdec, i32* %r3.global-to-local, align 4
  %v1_fdf0 = add i32 %v2_fe64, 8
  %v2_fdf0 = inttoptr i32 %v1_fdf0 to i32*
  %v3_fdf0 = load i32, i32* %v2_fdf0, align 4
  store i32 %v3_fdf0, i32* %r2.global-to-local, align 4
  %v2_fdf4 = sub i32 %v2_fdec, %v3_fdf0
  store i32 %v2_fdf4, i32* %r3.global-to-local, align 4
  %v3_fdf8 = icmp uge i32 %v2_fdf4, %storemerge250
  store i1 %v3_fdf8, i1* %cpsr_c.global-to-local, align 1
  %v9_fdf8 = icmp eq i32 %v2_fdf4, %storemerge250
  store i1 %v9_fdf8, i1* %cpsr_z.global-to-local, align 1
  %v2_fdfc = xor i1 %v9_fdf8, true
  %v3_fdfc = and i1 %v3_fdf8, %v2_fdfc
  br i1 %v3_fdfc, label %dec_label_pc_fecc, label %dec_label_pc_fe00

dec_label_pc_fe00:                                ; preds = %dec_label_pc_fde8
  store i1 %v2_fe6c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fe6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe6c, label %dec_label_pc_fe9c, label %dec_label_pc_fe08

dec_label_pc_fe08:                                ; preds = %dec_label_pc_fe00
  %v1_fe08 = add i32 %v2_fe64, 4
  %v2_fe08 = inttoptr i32 %v1_fe08 to i32*
  %v3_fe08 = load i32, i32* %v2_fe08, align 4
  store i32 %v3_fe08, i32* %ip.global-to-local, align 4
  %v3_fe0c = udiv i32 %v3_fe08, 32
  %v2_fe10 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fe10, i32* %r1.global-to-local, align 4
  %v3_fe14 = mul nuw nsw i32 %v3_fe0c, 4
  %v2_fe18 = add i32 %v3_fe14, %v2_fe10
  store i32 %v2_fe18, i32* %r3.global-to-local, align 4
  %v1_fe1c = add i32 %v2_fe18, -184
  %v2_fe1c = inttoptr i32 %v1_fe1c to i32*
  %v3_fe1c = load i32, i32* %v2_fe1c, align 4
  %v1_fe20 = urem i32 %v3_fe08, 32
  store i32 %v1_fe20, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fe28 = shl i32 1, %v1_fe20
  %v8_fe28 = or i32 %v3_fe1c, %v7_fe28
  store i32 %v8_fe28, i32* %r2.global-to-local, align 4
  store i32 %v8_fe28, i32* %v2_fe1c, align 4
  %v0_fe30 = load i32, i32* @r6, align 4
  %v1_fe30 = load i32, i32* %ip.global-to-local, align 4
  %v2_fe30 = sub i32 %v0_fe30, %v1_fe30
  %v3_fe30 = icmp uge i32 %v0_fe30, %v1_fe30
  store i1 %v3_fe30, i1* %cpsr_c.global-to-local, align 1
  %v4_fe30 = xor i32 %v1_fe30, %v0_fe30
  %v5_fe30 = xor i32 %v2_fe30, %v0_fe30
  %v6_fe30 = and i32 %v5_fe30, %v4_fe30
  %v7_fe30 = icmp slt i32 %v6_fe30, 0
  %v8_fe30 = icmp slt i32 %v2_fe30, 0
  %v9_fe30 = icmp eq i32 %v0_fe30, %v1_fe30
  store i1 %v9_fe30, i1* %cpsr_z.global-to-local, align 1
  %v2_fe34 = xor i1 %v8_fe30, %v7_fe30
  br i1 %v2_fe34, label %bb340, label %bb341

bb340:                                            ; preds = %dec_label_pc_fe08
  store i32 %v1_fe30, i32* @r6, align 4
  br label %bb341

bb341:                                            ; preds = %dec_label_pc_fe78, %dec_label_pc_ff0c, %dec_label_pc_ff00, %bb343, %dec_label_pc_fe08, %bb340
  %stack_var_-1868.0 = phi i32 [ %stack_var_-1868.2, %bb343 ], [ %stack_var_-1868.1, %dec_label_pc_ff0c ], [ %stack_var_-1868.1, %dec_label_pc_ff00 ], [ %stack_var_-1868.1, %bb340 ], [ %stack_var_-1868.1, %dec_label_pc_fe08 ], [ %stack_var_-1868.1, %dec_label_pc_fe78 ]
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.4, %bb343 ], [ %stack_var_-1872.3, %dec_label_pc_ff0c ], [ %stack_var_-1872.3, %dec_label_pc_ff00 ], [ %stack_var_-1872.3, %bb340 ], [ %stack_var_-1872.3, %dec_label_pc_fe08 ], [ %stack_var_-1872.3, %dec_label_pc_fe78 ]
  %stack_var_-1884.1 = phi i8* [ %stack_var_-1884.3, %bb343 ], [ %stack_var_-1884.2, %dec_label_pc_ff0c ], [ %stack_var_-1884.2, %dec_label_pc_ff00 ], [ %stack_var_-1884.2, %bb340 ], [ %stack_var_-1884.2, %dec_label_pc_fe08 ], [ %stack_var_-1884.2, %dec_label_pc_fe78 ]
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.3, %bb343 ], [ %stack_var_-1880.2, %dec_label_pc_ff0c ], [ %stack_var_-1880.2, %dec_label_pc_ff00 ], [ %stack_var_-1880.2, %bb340 ], [ %stack_var_-1880.2, %dec_label_pc_fe08 ], [ %stack_var_-1880.2, %dec_label_pc_fe78 ]
  %stack_var_-1876.1 = phi i8 [ %stack_var_-1876.3, %bb343 ], [ %stack_var_-1876.2, %dec_label_pc_ff0c ], [ %stack_var_-1876.2, %dec_label_pc_ff00 ], [ %stack_var_-1876.2, %bb340 ], [ %stack_var_-1876.2, %dec_label_pc_fe08 ], [ %stack_var_-1876.2, %dec_label_pc_fe78 ]
  %v3_fe38 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fe38, i32* %r3.global-to-local, align 4
  %v1_fe3c = add i32 %v3_fe38, 1
  store i32 %v1_fe3c, i32* %r2.global-to-local, align 4
  %v3_fe40 = icmp ugt i32 %v1_fe3c, 355
  store i1 %v3_fe40, i1* %cpsr_c.global-to-local, align 1
  %v8_fe40 = icmp eq i32 %v1_fe3c, 356
  store i1 %v8_fe40, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fe3c, i32* %stack_var_-52, align 4
  %v6_fe48 = icmp slt i32 %v1_fe3c, 356
  br i1 %v6_fe48, label %dec_label_pc_fe4c, label %dec_label_pc_ff18

dec_label_pc_fe4c:                                ; preds = %bb341, %dec_label_pc_fdd4
  %v1_fe58 = phi i32 [ %v1_fe3c, %bb341 ], [ %v0_fdd4, %dec_label_pc_fdd4 ]
  %stack_var_-1868.1 = phi i32 [ %stack_var_-1868.0, %bb341 ], [ %v0_fbe8, %dec_label_pc_fdd4 ]
  %stack_var_-1872.3 = phi i32 [ %stack_var_-1872.2, %bb341 ], [ %stack_var_-1872.1, %dec_label_pc_fdd4 ]
  %stack_var_-1884.2 = phi i8* [ %stack_var_-1884.1, %bb341 ], [ %stack_var_-1884.0, %dec_label_pc_fdd4 ]
  %stack_var_-1880.2 = phi i32 [ %stack_var_-1880.1, %bb341 ], [ %v0_fc60, %dec_label_pc_fdd4 ]
  %stack_var_-1876.2 = phi i8 [ %stack_var_-1876.1, %bb341 ], [ %stack_var_-1876.0, %dec_label_pc_fdd4 ]
  store i32 ptrtoint (i32* @global_var_1ce1c.143 to i32), i32* %r1.global-to-local, align 4
  %v2_fe5c = load i32, i32* @global_var_1ce1c.143, align 4
  store i32 %v2_fe5c, i32* %r2.global-to-local, align 4
  %v3_fe60 = mul i32 %v1_fe58, 388
  store i32 %v3_fe60, i32* %r3.global-to-local, align 4
  %v2_fe64 = add i32 %v2_fe5c, %v3_fe60
  store i32 %v2_fe64, i32* @r4, align 4
  %v1_fe68 = add i32 %v2_fe64, 12
  %v2_fe68 = inttoptr i32 %v1_fe68 to i32*
  %v3_fe68 = load i32, i32* %v2_fe68, align 4
  store i32 %v3_fe68, i32* %ip.global-to-local, align 4
  %v2_fe6c = icmp ne i32 %v3_fe68, 0
  store i1 %v2_fe6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe6c = icmp eq i32 %v3_fe68, 1
  store i1 %v7_fe6c, i1* %cpsr_z.global-to-local, align 1
  %v2_fe70 = xor i1 %v7_fe6c, true
  %v3_fe70 = and i1 %v2_fe6c, %v2_fe70
  br i1 %v3_fe70, label %dec_label_pc_fde8, label %dec_label_pc_fe78

dec_label_pc_fe78:                                ; preds = %dec_label_pc_fe4c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe78 = icmp eq i32 %v3_fe68, 0
  store i1 %v2_fe78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fe78, label %bb341, label %dec_label_pc_fde8

dec_label_pc_fe88:                                ; preds = %dec_label_pc_f690
  store i32 ptrtoint (i32* @global_var_1ce20.145 to i32), i32* %r1.global-to-local, align 4
  %v2_fe8c = load i32, i32* @global_var_1ce20.145, align 4
  store i32 %v2_fe8c, i32* %r0.global-to-local, align 4
  %v1_fe90 = call i32 @function_11da0(i32 %v2_fe8c)
  store i32 %v1_fe90, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fe94

dec_label_pc_fe94:                                ; preds = %dec_label_pc_f668, %dec_label_pc_fe88
  %v0_fe94 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fe94, i32* %r0.global-to-local, align 4
  %v1_fe98 = call i32 @function_13144(i32 %v0_fe94)
  store i32 %v1_fe98, i32* %r0.global-to-local, align 4
  %v0_fe9c.pre = load i32, i32* @r4, align 4
  %v1_feb8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_fe9c

dec_label_pc_fe9c:                                ; preds = %dec_label_pc_fe00, %dec_label_pc_fe94
  %v1_feb8 = phi i32 [ %v1_feb8.pre, %dec_label_pc_fe94 ], [ 1, %dec_label_pc_fe00 ]
  %v0_fe9c = phi i32 [ %v0_fe9c.pre, %dec_label_pc_fe94 ], [ %v2_fe64, %dec_label_pc_fe00 ]
  %stack_var_-1868.2 = phi i32 [ %tmp256, %dec_label_pc_fe94 ], [ %stack_var_-1868.1, %dec_label_pc_fe00 ]
  %stack_var_-1872.4 = phi i32 [ %tmp263, %dec_label_pc_fe94 ], [ %stack_var_-1872.3, %dec_label_pc_fe00 ]
  %stack_var_-1884.3 = phi i8* [ %tmp264, %dec_label_pc_fe94 ], [ %stack_var_-1884.2, %dec_label_pc_fe00 ]
  %stack_var_-1880.3 = phi i32 [ %tmp265, %dec_label_pc_fe94 ], [ %stack_var_-1880.2, %dec_label_pc_fe00 ]
  %stack_var_-1876.3 = phi i8 [ %tmp266, %dec_label_pc_fe94 ], [ %stack_var_-1876.2, %dec_label_pc_fe00 ]
  %v1_fe9c = add i32 %v0_fe9c, 4
  %v2_fe9c = inttoptr i32 %v1_fe9c to i32*
  %v3_fe9c = load i32, i32* %v2_fe9c, align 4
  store i32 %v3_fe9c, i32* %r0.global-to-local, align 4
  %v3_fea0 = udiv i32 %v3_fe9c, 32
  %v3_fea4 = mul nuw nsw i32 %v3_fea0, 4
  %v2_fea8 = ptrtoint i32* %stack_var_-36 to i32
  %v2_feac = add i32 %v3_fea4, %v2_fea8
  store i32 %v2_feac, i32* %r3.global-to-local, align 4
  %v1_feb0 = add i32 %v2_feac, -312
  %v2_feb0 = inttoptr i32 %v1_feb0 to i32*
  %v3_feb0 = load i32, i32* %v2_feb0, align 4
  %v1_feb4 = urem i32 %v3_fe9c, 32
  store i32 %v1_feb4, i32* %r1.global-to-local, align 4
  %v7_feb8 = shl i32 %v1_feb8, %v1_feb4
  %v8_feb8 = or i32 %v3_feb0, %v7_feb8
  store i32 %v8_feb8, i32* %r2.global-to-local, align 4
  %v0_febc = load i32, i32* @r5, align 4
  %v2_febc = sub i32 %v0_febc, %v3_fe9c
  %v3_febc = icmp uge i32 %v0_febc, %v3_fe9c
  store i1 %v3_febc, i1* %cpsr_c.global-to-local, align 1
  %v4_febc = xor i32 %v0_febc, %v3_fe9c
  %v5_febc = xor i32 %v2_febc, %v0_febc
  %v6_febc = and i32 %v5_febc, %v4_febc
  %v7_febc = icmp slt i32 %v6_febc, 0
  %v8_febc = icmp slt i32 %v2_febc, 0
  %v9_febc = icmp eq i32 %v0_febc, %v3_fe9c
  store i1 %v9_febc, i1* %cpsr_z.global-to-local, align 1
  %v2_fec0 = xor i1 %v8_febc, %v7_febc
  br i1 %v2_fec0, label %bb342, label %bb343

bb342:                                            ; preds = %dec_label_pc_fe9c
  store i32 %v3_fe9c, i32* @r5, align 4
  br label %bb343

bb343:                                            ; preds = %dec_label_pc_fe9c, %bb342
  store i32 %v8_feb8, i32* %v2_feb0, align 4
  br label %bb341

dec_label_pc_fecc:                                ; preds = %dec_label_pc_fde8
  %v1_fecc = add i32 %v2_fe64, 4
  %v2_fecc = inttoptr i32 %v1_fecc to i32*
  %v3_fecc = load i32, i32* %v2_fecc, align 4
  store i32 %v3_fecc, i32* %r0.global-to-local, align 4
  %v1_fed0 = call i32 @function_11da0(i32 %v3_fecc)
  store i32 %v1_fed0, i32* %r0.global-to-local, align 4
  %v0_fed4 = load i32, i32* @r4, align 4
  %v1_fed4 = add i32 %v0_fed4, 12
  %v2_fed4 = inttoptr i32 %v1_fed4 to i32*
  %v3_fed4 = load i32, i32* %v2_fed4, align 4
  store i32 %v3_fed4, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_fedc = icmp ugt i32 %v3_fed4, 1
  store i1 %v2_fedc, i1* %cpsr_c.global-to-local, align 1
  %v7_fedc = icmp eq i32 %v3_fed4, 2
  store i1 %v7_fedc, i1* %cpsr_z.global-to-local, align 1
  %v2_fee0 = add i32 %v0_fed4, 4
  %v3_fee0 = inttoptr i32 %v2_fee0 to i32*
  store i32 -1, i32* %v3_fee0, align 4
  %v2_fee4 = xor i1 %v2_fedc, true
  %v3_fee4 = or i1 %v7_fedc, %v2_fee4
  br i1 %v3_fee4, label %dec_label_pc_ff0c, label %dec_label_pc_fee8

dec_label_pc_fee8:                                ; preds = %dec_label_pc_fecc
  %v0_fee8 = load i32, i32* @r4, align 4
  %v1_fee8 = add i32 %v0_fee8, 384
  %v2_fee8 = inttoptr i32 %v1_fee8 to i8*
  %v3_fee8 = load i8, i8* %v2_fee8, align 1
  %v4_fee8 = zext i8 %v3_fee8 to i32
  %v1_feec = add nuw nsw i32 %v4_fee8, 1
  %v1_fef0 = urem i32 %v1_feec, 256
  store i32 %v1_fef0, i32* %r3.global-to-local, align 4
  %v2_fef4 = icmp ugt i32 %v1_fef0, 9
  store i1 %v2_fef4, i1* %cpsr_c.global-to-local, align 1
  %v7_fef4 = icmp eq i32 %v1_fef0, 10
  store i1 %v7_fef4, i1* %cpsr_z.global-to-local, align 1
  %v1_fef8 = trunc i32 %v1_feec to i8
  store i8 %v1_fef8, i8* %v2_fee8, align 1
  %v0_fefc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fefc, label %dec_label_pc_ff0c, label %dec_label_pc_ff00

dec_label_pc_ff00:                                ; preds = %dec_label_pc_fee8
  %v0_ff00 = load i32, i32* @r4, align 4
  store i32 %v0_ff00, i32* @r0, align 4
  %v0_ff04 = call i32 @function_f330()
  store i32 %v0_ff04, i32* %r0.global-to-local, align 4
  br label %bb341

dec_label_pc_ff0c:                                ; preds = %dec_label_pc_fee8, %dec_label_pc_fecc
  %v0_ff0c = load i32, i32* @r7, align 4
  %v1_ff0c = load i32, i32* @r4, align 4
  %v2_ff0c = add i32 %v1_ff0c, 12
  %v3_ff0c = inttoptr i32 %v2_ff0c to i32*
  store i32 %v0_ff0c, i32* %v3_ff0c, align 4
  %v0_ff10 = load i32, i32* @r7, align 4
  %v1_ff10 = trunc i32 %v0_ff10 to i8
  %v2_ff10 = load i32, i32* @r4, align 4
  %v3_ff10 = add i32 %v2_ff10, 384
  %v4_ff10 = inttoptr i32 %v3_ff10 to i8*
  store i8 %v1_ff10, i8* %v4_ff10, align 1
  br label %bb341

dec_label_pc_ff18:                                ; preds = %bb341
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ff20 = load i32, i32* @r6, align 4
  %v1_ff20 = load i32, i32* @r5, align 4
  %v2_ff20 = sub i32 %v0_ff20, %v1_ff20
  %v3_ff20 = icmp uge i32 %v0_ff20, %v1_ff20
  store i1 %v3_ff20, i1* %cpsr_c.global-to-local, align 1
  %v4_ff20 = xor i32 %v1_ff20, %v0_ff20
  %v5_ff20 = xor i32 %v2_ff20, %v0_ff20
  %v6_ff20 = and i32 %v5_ff20, %v4_ff20
  %v7_ff20 = icmp slt i32 %v6_ff20, 0
  %v8_ff20 = icmp slt i32 %v2_ff20, 0
  %v9_ff20 = icmp eq i32 %v0_ff20, %v1_ff20
  store i1 %v9_ff20, i1* %cpsr_z.global-to-local, align 1
  %v2_ff24 = xor i1 %v8_ff20, %v7_ff20
  %v1_ff20.v0_ff20 = select i1 %v2_ff24, i32 %v1_ff20, i32 %v0_ff20
  %v2_ff38 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_ff38, i32* %r1.global-to-local, align 4
  %v2_ff3c = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_ff3c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ff44 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ff44, i32* %ip.global-to-local, align 4
  %v1_ff48 = add i32 %v1_ff20.v0_ff20, 1
  store i32 %v1_ff48, i32* %r0.global-to-local, align 4
  %v5_ff54 = call i32 @function_11fc0(i32 %v1_ff48, i32 %v2_ff38, i32 %v2_ff3c, i32 0, i32 %v2_ff44)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ff5c = call i32 @function_12070(i32* null)
  store i32 %v2_ff5c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v2_ff5c, i32* @global_var_1cdb8.131, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_ffe0 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10188 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_10230 = ptrtoint i32* %stack_var_-41 to i32
  %v2_109a0 = ptrtoint i32* %stack_var_-84 to i32
  %v2_109a8 = ptrtoint i32* %stack_var_-73 to i32
  %v2_100d8 = ptrtoint i32* %stack_var_-56 to i32
  %v2_105d0 = ptrtoint i32* %stack_var_-48 to i32
  %v2_10c10 = ptrtoint i32* %stack_var_-92 to i32
  %v3_10c18 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10c70 = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_ffb0

dec_label_pc_ff78:                                ; preds = %dec_label_pc_ffd8, %dec_label_pc_10b50
  %v0_ff8c = phi i32 [ %v3_ffcc, %dec_label_pc_ffd8 ], [ %v0_ff78.pre, %dec_label_pc_10b50 ]
  %v3_ff78 = udiv i32 %v0_ff8c, 32
  %v3_ff7c = mul nuw nsw i32 %v3_ff78, 4
  store i32 %v2_ffe0, i32* @lr, align 4
  %v2_ff84 = add i32 %v3_ff7c, %v2_ffe0
  store i32 %v2_ff84, i32* %r3.global-to-local, align 4
  %v1_ff88 = add i32 %v2_ff84, -184
  %v2_ff88 = inttoptr i32 %v1_ff88 to i32*
  %v3_ff88 = load i32, i32* %v2_ff88, align 4
  %v1_ff8c = urem i32 %v0_ff8c, 32
  store i32 %v1_ff8c, i32* %r1.global-to-local, align 4
  %v2_ff90 = add nsw i32 %v1_ff8c, -1
  %v3_ff90 = shl i32 1, %v2_ff90
  %v4_ff90 = and i32 %v3_ff90, %v3_ff88
  %v5_ff90 = icmp ne i32 %v4_ff90, 0
  store i1 %v5_ff90, i1* %cpsr_c.global-to-local, align 1
  %v6_ff90 = lshr i32 %v3_ff88, %v1_ff8c
  store i32 %v6_ff90, i32* %r2.global-to-local, align 4
  %v1_ff94 = urem i32 %v6_ff90, 2
  %v2_ff94 = icmp eq i32 %v1_ff94, 0
  store i1 %v2_ff94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff94, label %dec_label_pc_ff9c, label %dec_label_pc_10164.preheader

dec_label_pc_10164.preheader:                     ; preds = %dec_label_pc_ff78
  %v0_10164123 = load i32, i32* @r6, align 4
  %v1_10164124 = add i32 %v0_10164123, 12
  %v2_10164125 = inttoptr i32 %v1_10164124 to i32*
  %v3_10164126 = load i32, i32* %v2_10164125, align 4
  store i32 %v3_10164126, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10168122128 = icmp eq i32 %v3_10164126, 0
  store i1 %v2_10168122128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10168122128, label %dec_label_pc_ff9c, label %dec_label_pc_10170.lr.ph

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_10164.loopexit, %dec_label_pc_10168.backedge, %dec_label_pc_10164.preheader, %dec_label_pc_ff78, %.thread241, %dec_label_pc_10a9c, %dec_label_pc_ffb0, %dec_label_pc_10b74, %dec_label_pc_10ae0
  %v3_ff9c = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_ff9c, i32* %r3.global-to-local, align 4
  %v1_ffa0 = add i32 %v3_ff9c, 1
  store i32 %v1_ffa0, i32* %r2.global-to-local, align 4
  %v3_ffa4 = icmp ugt i32 %v1_ffa0, 355
  store i1 %v3_ffa4, i1* %cpsr_c.global-to-local, align 1
  %v8_ffa4 = icmp eq i32 %v1_ffa0, 356
  store i1 %v8_ffa4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ffa0, i32* %stack_var_-52, align 4
  %v6_ffac = icmp slt i32 %v1_ffa0, 356
  br i1 %v6_ffac, label %dec_label_pc_ffb0, label %dec_label_pc_f8ac

dec_label_pc_ffb0:                                ; preds = %dec_label_pc_ff9c, %dec_label_pc_ff18
  %v1_ffbc = phi i32 [ %v1_ffa0, %dec_label_pc_ff9c ], [ 0, %dec_label_pc_ff18 ]
  store i32 ptrtoint (i32* @global_var_1ce1c.143 to i32), i32* %ip.global-to-local, align 4
  %v2_ffc0 = load i32, i32* @global_var_1ce1c.143, align 4
  store i32 %v2_ffc0, i32* %r2.global-to-local, align 4
  %v3_ffc4 = mul i32 %v1_ffbc, 388
  store i32 %v3_ffc4, i32* %r3.global-to-local, align 4
  %v2_ffc8 = add i32 %v2_ffc0, %v3_ffc4
  store i32 %v2_ffc8, i32* @r6, align 4
  %v1_ffcc = add i32 %v2_ffc8, 4
  %v2_ffcc = inttoptr i32 %v1_ffcc to i32*
  %v3_ffcc = load i32, i32* %v2_ffcc, align 4
  store i32 %v3_ffcc, i32* @r4, align 4
  %v2_ffd0 = icmp eq i32 %v3_ffcc, -1
  store i1 %v2_ffd0, i1* %cpsr_c.global-to-local, align 1
  %v7_ffd0 = icmp eq i32 %v3_ffcc, -1
  store i1 %v7_ffd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffd0, label %dec_label_pc_ff9c, label %dec_label_pc_ffd8

dec_label_pc_ffd8:                                ; preds = %dec_label_pc_ffb0
  %v3_ffd8 = udiv i32 %v3_ffcc, 32
  %v3_ffdc = mul nuw nsw i32 %v3_ffd8, 4
  %v2_ffe4 = add i32 %v3_ffdc, %v2_ffe0
  store i32 %v2_ffe4, i32* %r3.global-to-local, align 4
  %v1_ffe8 = add i32 %v2_ffe4, -312
  %v2_ffe8 = inttoptr i32 %v1_ffe8 to i32*
  %v3_ffe8 = load i32, i32* %v2_ffe8, align 4
  %v1_ffec = urem i32 %v3_ffcc, 32
  store i32 %v1_ffec, i32* %r1.global-to-local, align 4
  %v2_fff0 = add nsw i32 %v1_ffec, -1
  %v3_fff0 = shl i32 1, %v2_fff0
  %v4_fff0 = and i32 %v3_ffe8, %v3_fff0
  %v5_fff0 = icmp ne i32 %v4_fff0, 0
  store i1 %v5_fff0, i1* %cpsr_c.global-to-local, align 1
  %v6_fff0 = lshr i32 %v3_ffe8, %v1_ffec
  store i32 %v6_fff0, i32* %r2.global-to-local, align 4
  %v1_fff4 = urem i32 %v6_fff0, 2
  %v2_fff4 = icmp eq i32 %v1_fff4, 0
  store i1 %v2_fff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fff4, label %dec_label_pc_ff78, label %dec_label_pc_fffc

dec_label_pc_fffc:                                ; preds = %dec_label_pc_ffd8
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_105d0, i32* %r3.global-to-local, align 4
  store i32 %v2_100d8, i32* %ip.global-to-local, align 4
  store i32 %v3_ffcc, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_1002c = call i32 @function_12570(i32 %v3_ffcc, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_100d8)
  %v3_10030 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10030, i32* %r3.global-to-local, align 4
  %v2_10034 = or i32 %v3_10030, %v6_1002c
  store i32 %v2_10034, i32* %r0.global-to-local, align 4
  %v4_10034 = icmp eq i32 %v2_10034, 0
  store i1 %v4_10034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10034, label %dec_label_pc_1003c, label %dec_label_pc_10b74

dec_label_pc_1003c:                               ; preds = %dec_label_pc_fffc
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_10040 = load i32, i32* @r6, align 4
  %v2_10040 = add i32 %v1_10040, 12
  %v3_10040 = inttoptr i32 %v2_10040 to i32*
  store i32 2, i32* %v3_10040, align 4
  %v0_10044 = call i32 @function_eb48()
  store i32 %v0_10044, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1cdb4.137 to i32), i32* %r3.global-to-local, align 4
  %v3_1004c = load i8, i8* @global_var_1cdb5.138, align 1
  %v4_1004c = zext i8 %v3_1004c to i32
  store i32 %v4_1004c, i32* %r2.global-to-local, align 4
  %v2_10050 = load i8, i8* bitcast (i8** @global_var_1cdb4.137 to i8*), align 4
  %v3_10050 = zext i8 %v2_10050 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_10054 = mul nuw nsw i32 %v4_1004c, 256
  %v5_10054 = or i32 %v3_10050, %v4_10054
  store i32 %v5_10054, i32* %r1.global-to-local, align 4
  %v2_10058 = call i32 @function_11b28(i32 %v0_10044, i32 %v5_10054)
  store i32 ptrtoint (i32* @global_var_1cd84.133 to i32), i32* %r3.global-to-local, align 4
  %v2_10060 = load i32, i32* @global_var_1cd84.133, align 4
  %v1_10068 = load i32, i32* @r5, align 4
  %v9_10068 = icmp eq i32 %v2_10060, %v1_10068
  store i1 %v9_10068, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_1006c = urem i32 %v2_10058, 65536
  store i32 %v3_1006c, i32* %r0.global-to-local, align 4
  %v7_10070 = icmp sgt i32 %v2_10060, %v1_10068
  br i1 %v7_10070, label %dec_label_pc_10074, label %dec_label_pc_10b4c

dec_label_pc_10074:                               ; preds = %dec_label_pc_1003c
  %v2_10078 = load i32, i32* @global_var_1cdb0.135, align 4
  store i32 %v2_10078, i32* %r3.global-to-local, align 4
  store i32 %v1_10068, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10094

dec_label_pc_10084:                               ; preds = %dec_label_pc_100ac, %dec_label_pc_10094
  %v1_10084 = add i32 %v0_10084, 1
  store i32 %v1_10084, i32* %ip.global-to-local, align 4
  %v3_10088 = icmp uge i32 %v1_10084, %v2_10060
  store i1 %v3_10088, i1* %cpsr_c.global-to-local, align 1
  %v9_10088 = icmp eq i32 %v1_10084, %v2_10060
  store i1 %v9_10088, i1* %cpsr_z.global-to-local, align 1
  %v1_1008c = add i32 %v0_1008c, 16
  store i32 %v1_1008c, i32* %r3.global-to-local, align 4
  br i1 %v9_10088, label %dec_label_pc_10b4c, label %dec_label_pc_10094

dec_label_pc_10094:                               ; preds = %dec_label_pc_10084, %dec_label_pc_10074
  %v0_10084 = phi i32 [ %v1_10084, %dec_label_pc_10084 ], [ %v1_10068, %dec_label_pc_10074 ]
  %v0_1008c = phi i32 [ %v1_1008c, %dec_label_pc_10084 ], [ %v2_10078, %dec_label_pc_10074 ]
  store i32 %v0_1008c, i32* %r1.global-to-local, align 4
  %v1_10098 = add i32 %v0_1008c, 9
  %v2_10098 = inttoptr i32 %v1_10098 to i8*
  %v3_10098 = load i8, i8* %v2_10098, align 1
  %v4_10098 = zext i8 %v3_10098 to i32
  store i32 %v4_10098, i32* %r2.global-to-local, align 4
  %v1_1009c = add i32 %v0_1008c, 8
  %v2_1009c = inttoptr i32 %v1_1009c to i8*
  %v3_1009c = load i8, i8* %v2_1009c, align 1
  %v4_1009c = zext i8 %v3_1009c to i32
  %v4_100a0 = mul nuw nsw i32 %v4_10098, 256
  %v5_100a0 = or i32 %v4_1009c, %v4_100a0
  store i32 %v5_100a0, i32* %r3.global-to-local, align 4
  %v3_100a4 = icmp uge i32 %v5_100a0, %v3_1006c
  store i1 %v3_100a4, i1* %cpsr_c.global-to-local, align 1
  %v9_100a4 = icmp eq i32 %v5_100a0, %v3_1006c
  store i1 %v9_100a4, i1* %cpsr_z.global-to-local, align 1
  %v2_100a8 = xor i1 %v9_100a4, true
  %v3_100a8 = and i1 %v3_100a4, %v2_100a8
  br i1 %v3_100a8, label %dec_label_pc_10084, label %dec_label_pc_100ac

dec_label_pc_100ac:                               ; preds = %dec_label_pc_10094
  %v1_100ac = add i32 %v0_1008c, 10
  %v2_100ac = inttoptr i32 %v1_100ac to i8*
  %v3_100ac = load i8, i8* %v2_100ac, align 1
  %v4_100ac = zext i8 %v3_100ac to i32
  store i32 %v4_100ac, i32* %r3.global-to-local, align 4
  %v1_100b0 = add i32 %v0_1008c, 11
  %v2_100b0 = inttoptr i32 %v1_100b0 to i8*
  %v3_100b0 = load i8, i8* %v2_100b0, align 1
  %v4_100b0 = zext i8 %v3_100b0 to i32
  store i32 %v4_100b0, i32* %r2.global-to-local, align 4
  %v4_100b4 = mul nuw nsw i32 %v4_100b0, 256
  %v5_100b4 = or i32 %v4_100b4, %v4_100ac
  store i32 %v5_100b4, i32* %r3.global-to-local, align 4
  %v3_100b8 = icmp uge i32 %v5_100b4, %v3_1006c
  store i1 %v3_100b8, i1* %cpsr_c.global-to-local, align 1
  %v9_100b8 = icmp eq i32 %v5_100b4, %v3_1006c
  store i1 %v9_100b8, i1* %cpsr_z.global-to-local, align 1
  %v2_100bc = xor i1 %v3_100b8, true
  %v3_100bc = or i1 %v9_100b8, %v2_100bc
  br i1 %v3_100bc, label %dec_label_pc_10084, label %dec_label_pc_10b50

dec_label_pc_100c4:                               ; preds = %dec_label_pc_10334, %dec_label_pc_10308, %dec_label_pc_10350
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_100c8 = call i32 @function_10dd4(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_100d0 = call i32 @function_10dd4(i32 32)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_100e0 = call i32 @function_10cf0(i32 31, i32* nonnull %stack_var_-56)
  store i32 %v3_100e0, i32* @r4, align 4
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_100f4 = call i32 @function_10cf0(i32 32, i32* nonnull %stack_var_-56)
  %v3_100f8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_100f4, i32* @r5, align 4
  %v0_10100 = load i32, i32* @r4, align 4
  store i32 %v0_10100, i32* %r2.global-to-local, align 4
  %v1_10104 = add i32 %v3_100f8, -1
  store i32 %v1_10104, i32* %r3.global-to-local, align 4
  %v0_10108 = load i32, i32* @sb, align 4
  store i32 %v0_10108, i32* %r0.global-to-local, align 4
  %v0_1010c = load i32, i32* @r6, align 4
  %v1_1010c = add i32 %v0_1010c, 24
  %v2_1010c = inttoptr i32 %v1_1010c to i32*
  %v3_1010c = load i32, i32* %v2_1010c, align 4
  store i32 %v3_1010c, i32* %r1.global-to-local, align 4
  %v4_10110 = call i32 @function_11560(i32 %v0_10108, i32 %v3_1010c, i32 %v0_10100, i32 %v1_10104)
  store i32 %v4_10110, i32* %r0.global-to-local, align 4
  %v2_10114 = icmp eq i32 %v4_10110, -1
  store i1 %v2_10114, i1* %cpsr_c.global-to-local, align 1
  %v7_10114 = icmp eq i32 %v4_10110, -1
  store i1 %v7_10114, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10114, label %dec_label_pc_10124, label %dec_label_pc_1014c

dec_label_pc_10124:                               ; preds = %dec_label_pc_100c4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10124 = load i32, i32* %stack_var_-56, align 4
  %v0_10128 = load i32, i32* @r5, align 4
  store i32 %v0_10128, i32* %r2.global-to-local, align 4
  %v1_1012c = add i32 %v3_10124, -1
  store i32 %v1_1012c, i32* %r3.global-to-local, align 4
  %v0_10130 = load i32, i32* @sb, align 4
  store i32 %v0_10130, i32* %r0.global-to-local, align 4
  %v0_10134 = load i32, i32* @r6, align 4
  %v1_10134 = add i32 %v0_10134, 24
  %v2_10134 = inttoptr i32 %v1_10134 to i32*
  %v3_10134 = load i32, i32* %v2_10134, align 4
  store i32 %v3_10134, i32* %r1.global-to-local, align 4
  %v4_10138 = call i32 @function_11560(i32 %v0_10130, i32 %v3_10134, i32 %v0_10128, i32 %v1_1012c)
  store i32 %v4_10138, i32* %r0.global-to-local, align 4
  %v2_1013c = icmp eq i32 %v4_10138, -1
  store i1 %v2_1013c, i1* %cpsr_c.global-to-local, align 1
  %v7_1013c = icmp eq i32 %v4_10138, -1
  store i1 %v7_1013c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1013c, label %dec_label_pc_10b90, label %dec_label_pc_1014c

dec_label_pc_1014c:                               ; preds = %dec_label_pc_10124, %dec_label_pc_100c4
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10150 = call i32 @function_10d1c(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10158 = call i32 @function_10d1c(i32 32)
  store i32 %v1_10158, i32* %r0.global-to-local, align 4
  %v0_1015c = load i32, i32* @r7, align 4
  %v3_1015c = icmp eq i32 %v0_1015c, -1
  store i1 %v3_1015c, i1* %cpsr_c.global-to-local, align 1
  %v8_1015c = icmp eq i32 %v0_1015c, -1
  store i1 %v8_1015c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1015c, label %dec_label_pc_10164.loopexit, label %dec_label_pc_1036c

dec_label_pc_10164.loopexit:                      ; preds = %dec_label_pc_102f8, %dec_label_pc_10654, %dec_label_pc_101e8, %dec_label_pc_1014c, %dec_label_pc_10a30
  %v0_10164 = load i32, i32* @r6, align 4
  %v1_10164 = add i32 %v0_10164, 12
  %v2_10164 = inttoptr i32 %v1_10164 to i32*
  %v3_10164 = load i32, i32* %v2_10164, align 4
  store i32 %v3_10164, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10168122 = icmp eq i32 %v3_10164, 0
  store i1 %v2_10168122, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10168122, label %dec_label_pc_ff9c, label %dec_label_pc_10170.lr.ph

dec_label_pc_10170.lr.ph:                         ; preds = %dec_label_pc_10164.preheader, %dec_label_pc_10164.loopexit
  %v0_10170151 = phi i32 [ %v0_10164, %dec_label_pc_10164.loopexit ], [ %v0_10164123, %dec_label_pc_10164.preheader ]
  br label %dec_label_pc_10170

dec_label_pc_10170:                               ; preds = %dec_label_pc_10168.backedge.thread, %dec_label_pc_10168.backedge, %dec_label_pc_10168.backedge.thread491, %dec_label_pc_10170.lr.ph
  %v0_10b14 = phi i32 [ %v0_10170151, %dec_label_pc_10170.lr.ph ], [ %v0_10170148, %dec_label_pc_10168.backedge ], [ %v0_101e8, %dec_label_pc_10168.backedge.thread ], [ %v0_101e8, %dec_label_pc_10168.backedge.thread491 ]
  %v1_10170 = add i32 %v0_10b14, 24
  %v2_10170 = inttoptr i32 %v1_10170 to i32*
  %v3_10170 = load i32, i32* %v2_10170, align 4
  store i32 %v3_10170, i32* %r3.global-to-local, align 4
  %v2_10174 = icmp ugt i32 %v3_10170, 355
  store i1 %v2_10174, i1* %cpsr_c.global-to-local, align 1
  %v7_10174 = icmp eq i32 %v3_10170, 356
  store i1 %v7_10174, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10b14, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_10174, label %dec_label_pc_10b14, label %dec_label_pc_10180

dec_label_pc_10180:                               ; preds = %dec_label_pc_10170, %dec_label_pc_10b14
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_10188, align 4
  %v0_1018c = load i32, i32* @r6, align 4
  %v1_1018c = add i32 %v0_1018c, 24
  %v2_1018c = inttoptr i32 %v1_1018c to i32*
  %v3_1018c = load i32, i32* %v2_1018c, align 4
  store i32 %v3_1018c, i32* %r2.global-to-local, align 4
  %v0_10190 = load i32, i32* @sb, align 4
  %v2_10190 = add i32 %v0_10190, %v3_1018c
  store i32 %v2_10190, i32* @r4, align 4
  %v1_10194 = add i32 %v0_1018c, 4
  %v2_10194 = inttoptr i32 %v1_10194 to i32*
  %v3_10194 = load i32, i32* %v2_10194, align 4
  store i32 %v3_10194, i32* %r0.global-to-local, align 4
  %v1_10198 = sub i32 356, %v3_1018c
  store i32 %v1_10198, i32* %r2.global-to-local, align 4
  store i32 %v2_10190, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_101a4 = inttoptr i32 %v2_10190 to i32*
  %v5_101a4 = call i32 @function_125cc(i32 %v3_10194, i32* %v4_101a4, i32 %v1_10198, i32 16384)
  store i32 %v5_101a4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101a8 = icmp eq i32 %v5_101a4, 0
  store i1 %v2_101a8, i1* %cpsr_z.global-to-local, align 1
  %tmp346 = icmp slt i32 %v5_101a4, 1
  br i1 %tmp346, label %dec_label_pc_10a90, label %dec_label_pc_101b0

dec_label_pc_101b0:                               ; preds = %dec_label_pc_10180
  %v0_101b0 = load i32, i32* @r5, align 4
  store i32 %v0_101b0, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_101b8

dec_label_pc_101b8:                               ; preds = %bb348, %dec_label_pc_101b0
  %v3_101c0 = phi i32 [ %v1_101c4, %bb348 ], [ %v0_101b0, %dec_label_pc_101b0 ]
  %v1_101b8 = load i32, i32* @r4, align 4
  %v2_101b8 = add i32 %v1_101b8, %v3_101c0
  %v3_101b8 = inttoptr i32 %v2_101b8 to i8*
  %v4_101b8 = load i8, i8* %v3_101b8, align 1
  %v6_101b8 = zext i8 %v4_101b8 to i32
  store i32 %v6_101b8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101bc = icmp eq i8 %v4_101b8, 0
  store i1 %v2_101bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101bc, label %bb347, label %bb348

bb347:                                            ; preds = %dec_label_pc_101b8
  %v1_101c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_101c0 = trunc i32 %v1_101c0 to i8
  store i8 %v2_101c0, i8* %v3_101b8, align 1
  %v0_101c4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb348

bb348:                                            ; preds = %dec_label_pc_101b8, %bb347
  %v0_101c4 = phi i32 [ %v3_101c0, %dec_label_pc_101b8 ], [ %v0_101c4.pre, %bb347 ]
  %v1_101c4 = add i32 %v0_101c4, 1
  store i32 %v1_101c4, i32* %r2.global-to-local, align 4
  %v3_101c8 = icmp uge i32 %v5_101a4, %v1_101c4
  store i1 %v3_101c8, i1* %cpsr_c.global-to-local, align 1
  %v9_101c8 = icmp eq i32 %v5_101a4, %v1_101c4
  store i1 %v9_101c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_101c8, label %dec_label_pc_101d0, label %dec_label_pc_101b8

dec_label_pc_101d0:                               ; preds = %bb348, %dec_label_pc_10a94
  store i32 ptrtoint (i32* @global_var_1cdb8.131 to i32), i32* %r1.global-to-local, align 4
  %v0_101d4 = load i32, i32* @r6, align 4
  %v1_101d4 = add i32 %v0_101d4, 24
  %v2_101d4 = inttoptr i32 %v1_101d4 to i32*
  %v3_101d4 = load i32, i32* %v2_101d4, align 4
  %v2_101d8 = load i32, i32* @global_var_1cdb8.131, align 4
  store i32 %v2_101d8, i32* %r3.global-to-local, align 4
  %v2_101dc = add i32 %v3_101d4, %v5_101a4
  store i32 %v2_101dc, i32* %ip.global-to-local, align 4
  store i32 %v2_101dc, i32* %v2_101d4, align 4
  %v0_101e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_101e4 = load i32, i32* @r6, align 4
  %v2_101e4 = add i32 %v1_101e4, 8
  %v3_101e4 = inttoptr i32 %v2_101e4 to i32*
  store i32 %v0_101e4, i32* %v3_101e4, align 4
  br label %dec_label_pc_101e8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_10750, %dec_label_pc_101d0
  %v0_101e8 = load i32, i32* @r6, align 4
  %v1_101e8 = add i32 %v0_101e8, 12
  %v2_101e8 = inttoptr i32 %v1_101e8 to i32*
  %v3_101e8 = load i32, i32* %v2_101e8, align 4
  store i32 %v3_101e8, i32* %r2.global-to-local, align 4
  %v1_101ec = add i32 %v3_101e8, -2
  store i32 %v1_101ec, i32* %r3.global-to-local, align 4
  %v7_101f0 = icmp eq i32 %v1_101ec, 8
  store i1 %v7_101f0, i1* %cpsr_z.global-to-local, align 1
  %v5_101f4 = and i32 %v1_101ec, 1073741824
  %v6_101f4 = icmp ne i32 %v5_101f4, 0
  store i1 %v6_101f4, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_101e8, label %dec_label_pc_10164.loopexit [
    i32 2, label %dec_label_pc_10220
    i32 3, label %dec_label_pc_10308
    i32 4, label %dec_label_pc_103b0
    i32 5, label %dec_label_pc_10448
    i32 6, label %dec_label_pc_104fc
    i32 7, label %dec_label_pc_108dc
    i32 8, label %dec_label_pc_10774
    i32 9, label %dec_label_pc_10828
    i32 10, label %dec_label_pc_1061c
  ]

dec_label_pc_10220:                               ; preds = %dec_label_pc_101e8
  %v1_10224 = add i32 %v0_101e8, 24
  %v2_10224 = inttoptr i32 %v1_10224 to i32*
  %v3_10224 = load i32, i32* %v2_10224, align 4
  store i32 %v3_10224, i32* %ip.global-to-local, align 4
  %v0_10228 = load i32, i32* @sb, align 4
  store i32 %v0_10228, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_10234 = add i32 %v0_101e8, 29
  store i32 %v1_10234, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_10240113 = icmp eq i32 %v3_10224, 0
  store i1 %v3_10240113, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10240113, i1* %cpsr_z.global-to-local, align 1
  %v6_10244120 = icmp sgt i32 %v3_10224, 0
  br i1 %v6_10244120, label %dec_label_pc_10248.preheader, label %dec_label_pc_102e8

dec_label_pc_10240.loopexit:                      ; preds = %dec_label_pc_10260
  %v2_10268 = add i32 %v1_10268, 2
  store i32 %v2_10268, i32* @r5, align 4
  %v2_1026c = add i32 %v1_1026c, 2
  store i32 %v2_1026c, i32* @r4, align 4
  %v2_10270 = add i32 %v1_10270, 2
  store i32 %v2_10270, i32* @r7, align 4
  %v3_10240 = icmp uge i32 %v2_10270, %v1_10240
  store i1 %v3_10240, i1* %cpsr_c.global-to-local, align 1
  %v9_10240 = icmp eq i32 %v2_10270, %v1_10240
  store i1 %v9_10240, i1* %cpsr_z.global-to-local, align 1
  %v6_10244 = icmp slt i32 %v2_10270, %v1_10240
  br i1 %v6_10244, label %dec_label_pc_10248.preheader, label %dec_label_pc_102e8

dec_label_pc_10248.preheader:                     ; preds = %dec_label_pc_10220, %dec_label_pc_10240.loopexit
  %v6_102f0190 = phi i32 [ %v6_102f0191, %dec_label_pc_10240.loopexit ], [ %v0_101e8, %dec_label_pc_10220 ]
  %v1_10270179 = phi i32 [ %v2_10270, %dec_label_pc_10240.loopexit ], [ 0, %dec_label_pc_10220 ]
  %v1_10268177 = phi i32 [ %v2_10268, %dec_label_pc_10240.loopexit ], [ %v0_10228, %dec_label_pc_10220 ]
  %v1_10254175 = phi i32 [ %v1_10240, %dec_label_pc_10240.loopexit ], [ %v3_10224, %dec_label_pc_10220 ]
  %v0_10248173 = phi i32 [ %v2_1026c, %dec_label_pc_10240.loopexit ], [ %v1_10234, %dec_label_pc_10220 ]
  br label %dec_label_pc_10248

dec_label_pc_10248:                               ; preds = %dec_label_pc_10248.preheader, %dec_label_pc_102c8
  %v6_102f0191 = phi i32 [ %v6_102f0190, %dec_label_pc_10248.preheader ], [ %v0_102d0, %dec_label_pc_102c8 ]
  %v1_10270 = phi i32 [ %v1_10270179, %dec_label_pc_10248.preheader ], [ %v1_102d4, %dec_label_pc_102c8 ]
  %v1_10268 = phi i32 [ %v1_10268177, %dec_label_pc_10248.preheader ], [ %v1_102dc, %dec_label_pc_102c8 ]
  %v1_10240 = phi i32 [ %v1_10254175, %dec_label_pc_10248.preheader ], [ %v3_102d0, %dec_label_pc_102c8 ]
  %v1_1026c = phi i32 [ %v0_10248173, %dec_label_pc_10248.preheader ], [ %v1_102e0, %dec_label_pc_102c8 ]
  %v1_10248 = add i32 %v1_1026c, -1
  %v2_10248 = inttoptr i32 %v1_10248 to i8*
  %v3_10248 = load i8, i8* %v2_10248, align 1
  %v4_10248 = zext i8 %v3_10248 to i32
  store i32 %v4_10248, i32* %r3.global-to-local, align 4
  %v2_1024c = icmp eq i8 %v3_10248, -1
  store i1 %v2_1024c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1024c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1024c, label %dec_label_pc_10254, label %dec_label_pc_102e8

dec_label_pc_10254:                               ; preds = %dec_label_pc_10248
  %v0_10254 = load i32, i32* @sb, align 4
  %v2_10254 = add i32 %v0_10254, %v1_10240
  store i32 %v2_10254, i32* %r2.global-to-local, align 4
  %v3_10258 = icmp uge i32 %v2_10254, %v1_1026c
  store i1 %v3_10258, i1* %cpsr_c.global-to-local, align 1
  %v9_10258 = icmp eq i32 %v2_10254, %v1_1026c
  store i1 %v9_10258, i1* %cpsr_z.global-to-local, align 1
  %v2_1025c = xor i1 %v3_10258, true
  %v3_1025c = or i1 %v9_10258, %v2_1025c
  br i1 %v3_1025c, label %dec_label_pc_102e8, label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_10254
  %v1_10260 = inttoptr i32 %v1_1026c to i8*
  %v2_10260 = load i8, i8* %v1_10260, align 1
  %v3_10260 = zext i8 %v2_10260 to i32
  store i32 %v3_10260, i32* %r3.global-to-local, align 4
  %v2_10264 = icmp eq i8 %v2_10260, -1
  store i1 %v2_10264, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10264, label %dec_label_pc_10240.loopexit, label %dec_label_pc_10278

dec_label_pc_10278:                               ; preds = %dec_label_pc_10260
  %v2_10278 = icmp ugt i8 %v2_10260, -4
  store i1 %v2_10278, i1* %cpsr_c.global-to-local, align 1
  %v7_10278 = icmp eq i8 %v2_10260, -3
  store i1 %v7_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10278, label %dec_label_pc_10990, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_10278
  %v1_10280 = add i32 %v1_10268, 2
  store i32 %v1_10280, i32* %r3.global-to-local, align 4
  %v3_10284 = icmp uge i32 %v2_10254, %v1_10280
  store i1 %v3_10284, i1* %cpsr_c.global-to-local, align 1
  %v9_10284 = icmp eq i32 %v2_10254, %v1_10280
  store i1 %v9_10284, i1* %cpsr_z.global-to-local, align 1
  %v2_10288 = xor i1 %v3_10284, true
  %v3_10288 = or i1 %v9_10284, %v2_10288
  br i1 %v3_10288, label %dec_label_pc_102e8, label %dec_label_pc_1028c

dec_label_pc_1028c:                               ; preds = %bb378, %dec_label_pc_109e4, %bb377, %dec_label_pc_10280
  %v0_1028c = load i32, i32* @r4, align 4
  %v1_1028c = inttoptr i32 %v0_1028c to i8*
  %v2_1028c = load i8, i8* %v1_1028c, align 1
  %v3_1028c = zext i8 %v2_1028c to i32
  store i32 %v3_1028c, i32* %r3.global-to-local, align 4
  %v2_10290 = icmp ugt i8 %v2_1028c, -4
  store i1 %v2_10290, i1* %cpsr_c.global-to-local, align 1
  %v7_10290 = icmp eq i8 %v2_1028c, -3
  store i1 %v7_10290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10290, label %bb349, label %dec_label_pc_1029c

bb349:                                            ; preds = %dec_label_pc_1028c
  %v1_10294 = load i32, i32* @r8, align 4
  %v2_10294 = trunc i32 %v1_10294 to i8
  store i8 %v2_10294, i8* %v1_1028c, align 1
  %v0_10298.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10298.pr, label %bb351, label %.dec_label_pc_1029c_crit_edge

.dec_label_pc_1029c_crit_edge:                    ; preds = %bb349
  %v0_1029c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1029c

dec_label_pc_1029c:                               ; preds = %.dec_label_pc_1029c_crit_edge, %dec_label_pc_1028c
  %v0_1029c = phi i32 [ %v0_1029c.pre, %.dec_label_pc_1029c_crit_edge ], [ %v3_1028c, %dec_label_pc_1028c ]
  %v2_1029c = icmp ugt i32 %v0_1029c, 250
  store i1 %v2_1029c, i1* %cpsr_c.global-to-local, align 1
  %v7_1029c = icmp eq i32 %v0_1029c, 251
  store i1 %v7_1029c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1029c, label %bb350, label %bb351

bb350:                                            ; preds = %dec_label_pc_1029c
  %v1_102a0 = load i32, i32* %sl.global-to-local, align 4
  %v2_102a0 = trunc i32 %v1_102a0 to i8
  %v3_102a0 = load i32, i32* @r4, align 4
  %v4_102a0 = inttoptr i32 %v3_102a0 to i8*
  store i8 %v2_102a0, i8* %v4_102a0, align 1
  br label %bb351

bb351:                                            ; preds = %bb349, %dec_label_pc_1029c, %bb350
  %v0_102a4 = load i32, i32* @r4, align 4
  %v1_102a4 = add i32 %v0_102a4, 1
  %v2_102a4 = inttoptr i32 %v1_102a4 to i8*
  %v3_102a4 = load i8, i8* %v2_102a4, align 1
  %v4_102a4 = zext i8 %v3_102a4 to i32
  store i32 %v4_102a4, i32* %r3.global-to-local, align 4
  %v2_102a8 = icmp ugt i8 %v3_102a4, -4
  store i1 %v2_102a8, i1* %cpsr_c.global-to-local, align 1
  %v7_102a8 = icmp eq i8 %v3_102a4, -3
  store i1 %v7_102a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102a8, label %bb352, label %dec_label_pc_102b4

bb352:                                            ; preds = %bb351
  %v1_102ac = load i32, i32* @r8, align 4
  %v2_102ac = trunc i32 %v1_102ac to i8
  store i8 %v2_102ac, i8* %v2_102a4, align 1
  %v0_102b0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_102b0.pr, label %bb354, label %.dec_label_pc_102b4_crit_edge

.dec_label_pc_102b4_crit_edge:                    ; preds = %bb352
  %v0_102b4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_102b4

dec_label_pc_102b4:                               ; preds = %.dec_label_pc_102b4_crit_edge, %bb351
  %v0_102b4 = phi i32 [ %v0_102b4.pre, %.dec_label_pc_102b4_crit_edge ], [ %v4_102a4, %bb351 ]
  %v2_102b4 = icmp ugt i32 %v0_102b4, 250
  store i1 %v2_102b4, i1* %cpsr_c.global-to-local, align 1
  %v7_102b4 = icmp eq i32 %v0_102b4, 251
  store i1 %v7_102b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102b4, label %bb353, label %bb354

bb353:                                            ; preds = %dec_label_pc_102b4
  %v1_102b8 = load i32, i32* %sl.global-to-local, align 4
  %v2_102b8 = trunc i32 %v1_102b8 to i8
  %v3_102b8 = load i32, i32* @r4, align 4
  %v4_102b8 = add i32 %v3_102b8, 1
  %v5_102b8 = inttoptr i32 %v4_102b8 to i8*
  store i8 %v2_102b8, i8* %v5_102b8, align 1
  br label %bb354

bb354:                                            ; preds = %bb352, %dec_label_pc_102b4, %bb353
  %v0_102bc = load i32, i32* @r6, align 4
  %v1_102bc = add i32 %v0_102bc, 4
  %v2_102bc = inttoptr i32 %v1_102bc to i32*
  %v3_102bc = load i32, i32* %v2_102bc, align 4
  store i32 %v3_102bc, i32* %r0.global-to-local, align 4
  %v0_102c0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_102c8

dec_label_pc_102c8:                               ; preds = %dec_label_pc_10aec, %bb354
  %v0_102cc = phi i32 [ %v3_10b04, %dec_label_pc_10aec ], [ %v3_102bc, %bb354 ]
  %storemerge5 = phi i32 [ %v2_109a8, %dec_label_pc_10aec ], [ %v0_102c0, %bb354 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10aec ], [ 3, %bb354 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_102cc = inttoptr i32 %storemerge5 to i32*
  %v5_102cc = call i32 @function_1262c(i32 %v0_102cc, i32* %v4_102cc, i32 %storemerge, i32 16384)
  store i32 %v5_102cc, i32* %r0.global-to-local, align 4
  %v0_102d0 = load i32, i32* @r6, align 4
  %v1_102d0 = add i32 %v0_102d0, 24
  %v2_102d0 = inttoptr i32 %v1_102d0 to i32*
  %v3_102d0 = load i32, i32* %v2_102d0, align 4
  store i32 %v3_102d0, i32* %ip.global-to-local, align 4
  %v0_102d4 = load i32, i32* @r7, align 4
  %v1_102d4 = add i32 %v0_102d4, 3
  store i32 %v1_102d4, i32* @r7, align 4
  %v3_102d8 = icmp uge i32 %v1_102d4, %v3_102d0
  store i1 %v3_102d8, i1* %cpsr_c.global-to-local, align 1
  %v9_102d8 = icmp eq i32 %v1_102d4, %v3_102d0
  store i1 %v9_102d8, i1* %cpsr_z.global-to-local, align 1
  %v0_102dc = load i32, i32* @r5, align 4
  %v1_102dc = add i32 %v0_102dc, 3
  store i32 %v1_102dc, i32* @r5, align 4
  %v0_102e0 = load i32, i32* @r4, align 4
  %v1_102e0 = add i32 %v0_102e0, 3
  store i32 %v1_102e0, i32* @r4, align 4
  %v5_102e4 = icmp slt i32 %v1_102d4, %v3_102d0
  br i1 %v5_102e4, label %dec_label_pc_10248, label %dec_label_pc_102e8

dec_label_pc_102e8:                               ; preds = %dec_label_pc_10240.loopexit, %dec_label_pc_10248, %dec_label_pc_102c8, %dec_label_pc_10280, %dec_label_pc_10254, %dec_label_pc_10220, %dec_label_pc_10990.dec_label_pc_102e8.loopexit_crit_edge
  %v6_102f0 = phi i32 [ %v0_109b4, %dec_label_pc_10990.dec_label_pc_102e8.loopexit_crit_edge ], [ %v0_101e8, %dec_label_pc_10220 ], [ %v6_102f0191, %dec_label_pc_10248 ], [ %v0_102d0, %dec_label_pc_102c8 ], [ %v6_102f0191, %dec_label_pc_10280 ], [ %v6_102f0191, %dec_label_pc_10254 ], [ %v6_102f0191, %dec_label_pc_10240.loopexit ]
  %v0_102f8.pre = phi i32 [ %v0_102e8.pre.pre, %dec_label_pc_10990.dec_label_pc_102e8.loopexit_crit_edge ], [ 0, %dec_label_pc_10220 ], [ %v1_10270, %dec_label_pc_10248 ], [ %v1_102d4, %dec_label_pc_102c8 ], [ %v1_10270, %dec_label_pc_10280 ], [ %v1_10270, %dec_label_pc_10254 ], [ %v2_10270, %dec_label_pc_10240.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102e8 = icmp eq i32 %v0_102f8.pre, 0
  store i1 %v2_102e8, i1* %cpsr_z.global-to-local, align 1
  %tmp355 = icmp slt i32 %v0_102f8.pre, 1
  br i1 %tmp355, label %dec_label_pc_102f8, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_102e8
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_102f0 = add i32 %v6_102f0, 12
  %v8_102f0 = inttoptr i32 %v7_102f0 to i32*
  store i32 3, i32* %v8_102f0, align 4
  br label %dec_label_pc_10750

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102e8, %dec_label_pc_10930, %dec_label_pc_1087c, %dec_label_pc_107c8, %dec_label_pc_106a0, %dec_label_pc_105bc, %dec_label_pc_1049c, %dec_label_pc_10404, %dec_label_pc_1036c
  %v0_102f8 = phi i32 [ %v1_10924, %dec_label_pc_10930 ], [ %v1_10870, %dec_label_pc_1087c ], [ %v1_107bc, %dec_label_pc_107c8 ], [ %v0_10698, %dec_label_pc_106a0 ], [ %v1_105b0, %dec_label_pc_105bc ], [ %v1_10490, %dec_label_pc_1049c ], [ %v0_10404, %dec_label_pc_10404 ], [ %v0_1036c, %dec_label_pc_1036c ], [ %v0_102f8.pre, %dec_label_pc_102e8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_102f8 = icmp eq i32 %v0_102f8, 0
  store i1 %v2_102f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102f8, label %dec_label_pc_10164.loopexit, label %dec_label_pc_10300

dec_label_pc_10300:                               ; preds = %dec_label_pc_102f8
  %v0_10300 = load i32, i32* @r6, align 4
  %v1_10300 = add i32 %v0_10300, 24
  %v2_10300 = inttoptr i32 %v1_10300 to i32*
  %v3_10300 = load i32, i32* %v2_10300, align 4
  store i32 %v3_10300, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10750

dec_label_pc_10308:                               ; preds = %dec_label_pc_101e8
  %v1_10308 = add i32 %v0_101e8, 24
  %v2_10308 = inttoptr i32 %v1_10308 to i32*
  %v3_10308 = load i32, i32* %v2_10308, align 4
  store i32 %v3_10308, i32* %r3.global-to-local, align 4
  %v1_1030c = add i32 %v3_10308, -1
  store i32 %v1_1030c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10310 = icmp eq i32 %v1_1030c, 0
  store i1 %v2_10310, i1* %cpsr_z.global-to-local, align 1
  %v5_10314 = icmp sgt i32 %v1_1030c, 0
  br i1 %v5_10314, label %dec_label_pc_1033c, label %dec_label_pc_100c4

dec_label_pc_1031c:                               ; preds = %bb356
  %v2_1031c = icmp ugt i8 %v3_10340, 35
  store i1 %v2_1031c, i1* %cpsr_c.global-to-local, align 1
  %v7_1031c = icmp eq i8 %v3_10340, 36
  store i1 %v7_1031c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1031c, label %dec_label_pc_10350, label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %dec_label_pc_1031c
  %v2_10324 = icmp ugt i8 %v3_10340, 34
  store i1 %v2_10324, i1* %cpsr_c.global-to-local, align 1
  %v7_10324 = icmp eq i8 %v3_10340, 35
  store i1 %v7_10324, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10324, label %dec_label_pc_10350, label %dec_label_pc_1032c

dec_label_pc_1032c:                               ; preds = %dec_label_pc_10324
  %v2_1032c = icmp ugt i8 %v3_10340, 36
  store i1 %v2_1032c, i1* %cpsr_c.global-to-local, align 1
  %v7_1032c = icmp eq i8 %v3_10340, 37
  store i1 %v7_1032c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1032c, label %dec_label_pc_10350, label %dec_label_pc_10334

dec_label_pc_10334:                               ; preds = %dec_label_pc_1032c
  %v1_10334 = add i32 %v0_10350, -1
  store i32 %v1_10334, i32* %r0.global-to-local, align 4
  %v2_10334 = icmp ne i32 %v0_10350, 0
  store i1 %v2_10334, i1* %cpsr_c.global-to-local, align 1
  %v7_10334 = icmp eq i32 %v0_10350, 1
  store i1 %v7_10334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10334, label %dec_label_pc_100c4, label %dec_label_pc_1033c

dec_label_pc_1033c:                               ; preds = %dec_label_pc_10308, %dec_label_pc_10334
  %v0_10350 = phi i32 [ %v1_10334, %dec_label_pc_10334 ], [ %v1_1030c, %dec_label_pc_10308 ]
  %v2_1033c = add i32 %v0_10350, %v0_101e8
  store i32 %v2_1033c, i32* %r3.global-to-local, align 4
  %v1_10340 = add i32 %v2_1033c, 28
  %v2_10340 = inttoptr i32 %v1_10340 to i8*
  %v3_10340 = load i8, i8* %v2_10340, align 1
  %v4_10340 = zext i8 %v3_10340 to i32
  store i32 %v4_10340, i32* %r3.global-to-local, align 4
  %v2_10344 = icmp ugt i8 %v3_10340, 61
  store i1 %v2_10344, i1* %cpsr_c.global-to-local, align 1
  %v7_10344 = icmp eq i8 %v3_10340, 62
  store i1 %v7_10344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10344, label %dec_label_pc_10350, label %bb356

bb356:                                            ; preds = %dec_label_pc_1033c
  %v3_10348 = icmp ugt i8 %v3_10340, 57
  store i1 %v3_10348, i1* %cpsr_c.global-to-local, align 1
  %v8_10348 = icmp eq i8 %v3_10340, 58
  store i1 %v8_10348, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10348, label %dec_label_pc_10350, label %dec_label_pc_1031c

dec_label_pc_10350:                               ; preds = %dec_label_pc_1033c, %bb356, %dec_label_pc_1032c, %dec_label_pc_10324, %dec_label_pc_1031c
  %v1_10350 = add i32 %v0_10350, 1
  store i32 %v1_10350, i32* @r7, align 4
  %v2_10354 = icmp eq i32 %v1_10350, -1
  store i1 %v2_10354, i1* %cpsr_c.global-to-local, align 1
  %v7_10354 = icmp eq i32 %v0_10350, -2
  store i1 %v7_10354, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10354, label %dec_label_pc_100c4, label %dec_label_pc_1035c

dec_label_pc_1035c:                               ; preds = %dec_label_pc_10350
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10360 = call i32 @function_10d1c(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10368 = call i32 @function_10d1c(i32 32)
  store i32 %v1_10368, i32* %r0.global-to-local, align 4
  %v0_1036c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1036c

dec_label_pc_1036c:                               ; preds = %dec_label_pc_1014c, %dec_label_pc_1035c
  %v0_1036c = phi i32 [ %v0_1015c, %dec_label_pc_1014c ], [ %v0_1036c.pre, %dec_label_pc_1035c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1036c = icmp eq i32 %v0_1036c, 0
  store i1 %v2_1036c, i1* %cpsr_z.global-to-local, align 1
  %tmp357 = icmp slt i32 %v0_1036c, 1
  br i1 %tmp357, label %dec_label_pc_102f8, label %dec_label_pc_10374

dec_label_pc_10374:                               ; preds = %dec_label_pc_1036c
  %v0_10374 = load i32, i32* @r6, align 4
  %v1_10374 = inttoptr i32 %v0_10374 to i32*
  %v2_10374 = load i32, i32* %v1_10374, align 4
  store i32 %v2_10374, i32* %r3.global-to-local, align 4
  %v1_10378 = add i32 %v0_10374, 4
  %v2_10378 = inttoptr i32 %v1_10378 to i32*
  %v3_10378 = load i32, i32* %v2_10378, align 4
  store i32 %v3_10378, i32* %r0.global-to-local, align 4
  %v1_1037c = add i32 %v2_10374, 12
  %v2_1037c = inttoptr i32 %v1_1037c to i8*
  %v3_1037c = load i8, i8* %v2_1037c, align 1
  %v4_1037c = zext i8 %v3_1037c to i32
  store i32 %v4_1037c, i32* %r2.global-to-local, align 4
  %v1_10380 = inttoptr i32 %v2_10374 to i32*
  %v2_10380 = load i32, i32* %v1_10380, align 4
  store i32 %v2_10380, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10388 = inttoptr i32 %v2_10380 to i32*
  %v5_10388 = call i32 @function_1262c(i32 %v3_10378, i32* %v4_10388, i32 %v4_1037c, i32 16384)
  store i32 %v5_10388, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10390 = load i32, i32* @r6, align 4
  %v1_10390 = add i32 %v0_10390, 4
  %v2_10390 = inttoptr i32 %v1_10390 to i32*
  %v3_10390 = load i32, i32* %v2_10390, align 4
  store i32 %v3_10390, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_1039c = call i32 @function_1262c(i32 %v3_10390, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 %v5_1039c, i32* %r0.global-to-local, align 4
  %v0_103a0 = load i32, i32* @r6, align 4
  %v1_103a0 = add i32 %v0_103a0, 24
  %v2_103a0 = inttoptr i32 %v1_103a0 to i32*
  %v3_103a0 = load i32, i32* %v2_103a0, align 4
  store i32 %v3_103a0, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_103a8 = add i32 %v0_103a0, 12
  %v3_103a8 = inttoptr i32 %v2_103a8 to i32*
  store i32 4, i32* %v3_103a8, align 4
  br label %dec_label_pc_10750

dec_label_pc_103b0:                               ; preds = %dec_label_pc_101e8
  %v1_103b0 = add i32 %v0_101e8, 24
  %v2_103b0 = inttoptr i32 %v1_103b0 to i32*
  %v3_103b0 = load i32, i32* %v2_103b0, align 4
  store i32 %v3_103b0, i32* %r3.global-to-local, align 4
  %v1_103b4 = add i32 %v3_103b0, -1
  store i32 %v1_103b4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103b8 = icmp eq i32 %v1_103b4, 0
  store i1 %v2_103b8, i1* %cpsr_z.global-to-local, align 1
  %v5_103bc = icmp sgt i32 %v1_103b4, 0
  br i1 %v5_103bc, label %dec_label_pc_103dc, label %dec_label_pc_109f0

dec_label_pc_103c4:                               ; preds = %bb358
  %v2_103c4 = icmp ugt i8 %v3_103e0, 35
  store i1 %v2_103c4, i1* %cpsr_c.global-to-local, align 1
  %v7_103c4 = icmp eq i8 %v3_103e0, 36
  store i1 %v7_103c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103c4, label %dec_label_pc_103f0, label %dec_label_pc_103cc

dec_label_pc_103cc:                               ; preds = %dec_label_pc_103c4
  %v2_103cc = icmp ugt i8 %v3_103e0, 34
  store i1 %v2_103cc, i1* %cpsr_c.global-to-local, align 1
  %v7_103cc = icmp eq i8 %v3_103e0, 35
  store i1 %v7_103cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103cc, label %dec_label_pc_103f0, label %dec_label_pc_103d4

dec_label_pc_103d4:                               ; preds = %dec_label_pc_103cc
  %v1_103d4 = add i32 %v0_103f0, -1
  store i32 %v1_103d4, i32* %r0.global-to-local, align 4
  %v2_103d4 = icmp ne i32 %v0_103f0, 0
  store i1 %v2_103d4, i1* %cpsr_c.global-to-local, align 1
  %v7_103d4 = icmp eq i32 %v0_103f0, 1
  store i1 %v7_103d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103d4, label %dec_label_pc_109f0, label %dec_label_pc_103dc

dec_label_pc_103dc:                               ; preds = %dec_label_pc_103b0, %dec_label_pc_103d4
  %v0_103f0 = phi i32 [ %v1_103d4, %dec_label_pc_103d4 ], [ %v1_103b4, %dec_label_pc_103b0 ]
  %v2_103dc = add i32 %v0_103f0, %v0_101e8
  store i32 %v2_103dc, i32* %r3.global-to-local, align 4
  %v1_103e0 = add i32 %v2_103dc, 28
  %v2_103e0 = inttoptr i32 %v1_103e0 to i8*
  %v3_103e0 = load i8, i8* %v2_103e0, align 1
  %v4_103e0 = zext i8 %v3_103e0 to i32
  store i32 %v4_103e0, i32* %r3.global-to-local, align 4
  %v2_103e4 = icmp ugt i8 %v3_103e0, 61
  store i1 %v2_103e4, i1* %cpsr_c.global-to-local, align 1
  %v7_103e4 = icmp eq i8 %v3_103e0, 62
  store i1 %v7_103e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103e4, label %dec_label_pc_103f0, label %bb358

bb358:                                            ; preds = %dec_label_pc_103dc
  %v3_103e8 = icmp ugt i8 %v3_103e0, 57
  store i1 %v3_103e8, i1* %cpsr_c.global-to-local, align 1
  %v8_103e8 = icmp eq i8 %v3_103e0, 58
  store i1 %v8_103e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103e8, label %dec_label_pc_103f0, label %dec_label_pc_103c4

dec_label_pc_103f0:                               ; preds = %dec_label_pc_103dc, %bb358, %dec_label_pc_103cc, %dec_label_pc_103c4
  %v1_103f0 = add i32 %v0_103f0, 1
  store i32 %v1_103f0, i32* @r7, align 4
  %v2_103f4 = icmp eq i32 %v1_103f0, -1
  store i1 %v2_103f4, i1* %cpsr_c.global-to-local, align 1
  %v7_103f4 = icmp eq i32 %v0_103f0, -2
  store i1 %v7_103f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103f4, label %dec_label_pc_109f0, label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_103f0
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10400 = call i32 @function_10d1c(i32 30)
  store i32 %v1_10400, i32* %r0.global-to-local, align 4
  %v0_10404.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10404

dec_label_pc_10404:                               ; preds = %dec_label_pc_10a30, %dec_label_pc_103fc
  %v0_10404 = phi i32 [ %v0_10a38, %dec_label_pc_10a30 ], [ %v0_10404.pre, %dec_label_pc_103fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10404 = icmp eq i32 %v0_10404, 0
  store i1 %v2_10404, i1* %cpsr_z.global-to-local, align 1
  %tmp359 = icmp slt i32 %v0_10404, 1
  br i1 %tmp359, label %dec_label_pc_102f8, label %dec_label_pc_1040c

dec_label_pc_1040c:                               ; preds = %dec_label_pc_10404
  %v0_1040c = load i32, i32* @r6, align 4
  %v1_1040c = inttoptr i32 %v0_1040c to i32*
  %v2_1040c = load i32, i32* %v1_1040c, align 4
  store i32 %v2_1040c, i32* %r3.global-to-local, align 4
  %v1_10410 = add i32 %v0_1040c, 4
  %v2_10410 = inttoptr i32 %v1_10410 to i32*
  %v3_10410 = load i32, i32* %v2_10410, align 4
  store i32 %v3_10410, i32* %r0.global-to-local, align 4
  %v1_10414 = add i32 %v2_1040c, 13
  %v2_10414 = inttoptr i32 %v1_10414 to i8*
  %v3_10414 = load i8, i8* %v2_10414, align 1
  %v4_10414 = zext i8 %v3_10414 to i32
  store i32 %v4_10414, i32* %r2.global-to-local, align 4
  %v1_10418 = add i32 %v2_1040c, 4
  %v2_10418 = inttoptr i32 %v1_10418 to i32*
  %v3_10418 = load i32, i32* %v2_10418, align 4
  store i32 %v3_10418, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10420 = inttoptr i32 %v3_10418 to i32*
  %v5_10420 = call i32 @function_1262c(i32 %v3_10410, i32* %v4_10420, i32 %v4_10414, i32 16384)
  store i32 %v5_10420, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10428 = load i32, i32* @r6, align 4
  %v1_10428 = add i32 %v0_10428, 4
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  %v3_10428 = load i32, i32* %v2_10428, align 4
  store i32 %v3_10428, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10434 = call i32 @function_1262c(i32 %v3_10428, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 %v5_10434, i32* %r0.global-to-local, align 4
  %v0_10438 = load i32, i32* @r6, align 4
  %v1_10438 = add i32 %v0_10438, 24
  %v2_10438 = inttoptr i32 %v1_10438 to i32*
  %v3_10438 = load i32, i32* %v2_10438, align 4
  store i32 %v3_10438, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10440 = add i32 %v0_10438, 12
  %v3_10440 = inttoptr i32 %v2_10440 to i32*
  store i32 5, i32* %v3_10440, align 4
  br label %dec_label_pc_10750

dec_label_pc_10448:                               ; preds = %dec_label_pc_101e8
  %v1_10448 = add i32 %v0_101e8, 24
  %v2_10448 = inttoptr i32 %v1_10448 to i32*
  %v3_10448 = load i32, i32* %v2_10448, align 4
  store i32 %v3_10448, i32* %ip.global-to-local, align 4
  %v1_1044c = add i32 %v3_10448, -1
  store i32 %v1_1044c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10450 = icmp eq i32 %v1_1044c, 0
  store i1 %v2_10450, i1* %cpsr_z.global-to-local, align 1
  %v5_10454 = icmp sgt i32 %v1_1044c, 0
  br i1 %v5_10454, label %dec_label_pc_1047c, label %dec_label_pc_10168.backedge.thread

dec_label_pc_1045c:                               ; preds = %bb360
  %v2_1045c = icmp ugt i8 %v3_10480, 35
  store i1 %v2_1045c, i1* %cpsr_c.global-to-local, align 1
  %v7_1045c = icmp eq i8 %v3_10480, 36
  store i1 %v7_1045c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1045c, label %dec_label_pc_10490, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %dec_label_pc_1045c
  %v2_10464 = icmp ugt i8 %v3_10480, 34
  store i1 %v2_10464, i1* %cpsr_c.global-to-local, align 1
  %v7_10464 = icmp eq i8 %v3_10480, 35
  store i1 %v7_10464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10464, label %dec_label_pc_10490, label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10464
  %v2_1046c = icmp ugt i8 %v3_10480, 36
  store i1 %v2_1046c, i1* %cpsr_c.global-to-local, align 1
  %v7_1046c = icmp eq i8 %v3_10480, 37
  store i1 %v7_1046c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1046c, label %dec_label_pc_10490, label %dec_label_pc_10474

dec_label_pc_10474:                               ; preds = %dec_label_pc_1046c
  %v1_10474 = add i32 %v0_10490, -1
  store i32 %v1_10474, i32* %r0.global-to-local, align 4
  %v2_10474 = icmp ne i32 %v0_10490, 0
  store i1 %v2_10474, i1* %cpsr_c.global-to-local, align 1
  %v7_10474 = icmp eq i32 %v0_10490, 1
  store i1 %v7_10474, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10474, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_1047c

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10448, %dec_label_pc_10474
  %v0_10490 = phi i32 [ %v1_10474, %dec_label_pc_10474 ], [ %v1_1044c, %dec_label_pc_10448 ]
  %v2_1047c = add i32 %v0_10490, %v0_101e8
  store i32 %v2_1047c, i32* %r3.global-to-local, align 4
  %v1_10480 = add i32 %v2_1047c, 28
  %v2_10480 = inttoptr i32 %v1_10480 to i8*
  %v3_10480 = load i8, i8* %v2_10480, align 1
  %v4_10480 = zext i8 %v3_10480 to i32
  store i32 %v4_10480, i32* %r3.global-to-local, align 4
  %v2_10484 = icmp ugt i8 %v3_10480, 61
  store i1 %v2_10484, i1* %cpsr_c.global-to-local, align 1
  %v7_10484 = icmp eq i8 %v3_10480, 62
  store i1 %v7_10484, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10484, label %dec_label_pc_10490, label %bb360

bb360:                                            ; preds = %dec_label_pc_1047c
  %v3_10488 = icmp ugt i8 %v3_10480, 57
  store i1 %v3_10488, i1* %cpsr_c.global-to-local, align 1
  %v8_10488 = icmp eq i8 %v3_10480, 58
  store i1 %v8_10488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10488, label %dec_label_pc_10490, label %dec_label_pc_1045c

dec_label_pc_10490:                               ; preds = %dec_label_pc_1047c, %bb360, %dec_label_pc_1046c, %dec_label_pc_10464, %dec_label_pc_1045c
  %v1_10490 = add i32 %v0_10490, 1
  store i32 %v1_10490, i32* @r7, align 4
  %v2_10494 = icmp eq i32 %v1_10490, -1
  store i1 %v2_10494, i1* %cpsr_c.global-to-local, align 1
  %v7_10494 = icmp eq i32 %v0_10490, -2
  store i1 %v7_10494, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10494, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_1049c

dec_label_pc_1049c:                               ; preds = %dec_label_pc_10490
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1049c = icmp eq i32 %v1_10490, 0
  store i1 %v2_1049c, i1* %cpsr_z.global-to-local, align 1
  %tmp361 = icmp slt i32 %v1_10490, 1
  br i1 %tmp361, label %dec_label_pc_102f8, label %dec_label_pc_104a4

dec_label_pc_104a4:                               ; preds = %dec_label_pc_1049c
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_104a8 = call i32 @function_10dd4(i32 7)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_104b8 = call i32 @function_10cf0(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_104b8, i32* %r0.global-to-local, align 4
  %v3_104bc = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_104bc, i32* %r2.global-to-local, align 4
  store i32 %v3_104b8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104c8 = load i32, i32* @r6, align 4
  %v1_104c8 = add i32 %v0_104c8, 4
  %v2_104c8 = inttoptr i32 %v1_104c8 to i32*
  %v3_104c8 = load i32, i32* %v2_104c8, align 4
  store i32 %v3_104c8, i32* %r0.global-to-local, align 4
  %v4_104cc = inttoptr i32 %v3_104b8 to i32*
  %v5_104cc = call i32 @function_1262c(i32 %v3_104c8, i32* %v4_104cc, i32 %v3_104bc, i32 16384)
  store i32 %v5_104cc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_104dc = load i32, i32* @r6, align 4
  %v1_104dc = add i32 %v0_104dc, 4
  %v2_104dc = inttoptr i32 %v1_104dc to i32*
  %v3_104dc = load i32, i32* %v2_104dc, align 4
  store i32 %v3_104dc, i32* %r0.global-to-local, align 4
  %v5_104e0 = call i32 @function_1262c(i32 %v3_104dc, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_104e8 = call i32 @function_10d1c(i32 7)
  store i32 %v1_104e8, i32* %r0.global-to-local, align 4
  %v0_104ec = load i32, i32* @r6, align 4
  %v1_104ec = add i32 %v0_104ec, 24
  %v2_104ec = inttoptr i32 %v1_104ec to i32*
  %v3_104ec = load i32, i32* %v2_104ec, align 4
  store i32 %v3_104ec, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_104f4 = add i32 %v0_104ec, 12
  %v3_104f4 = inttoptr i32 %v2_104f4 to i32*
  store i32 6, i32* %v3_104f4, align 4
  br label %dec_label_pc_10750

dec_label_pc_104fc:                               ; preds = %dec_label_pc_101e8
  %v1_104fc = add i32 %v0_101e8, 24
  %v2_104fc = inttoptr i32 %v1_104fc to i32*
  %v3_104fc = load i32, i32* %v2_104fc, align 4
  store i32 %v3_104fc, i32* %ip.global-to-local, align 4
  %v1_10500 = add i32 %v3_104fc, -1
  store i32 %v1_10500, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10504 = icmp eq i32 %v1_10500, 0
  store i1 %v2_10504, i1* %cpsr_z.global-to-local, align 1
  %v5_10508 = icmp sgt i32 %v1_10500, 0
  br i1 %v5_10508, label %dec_label_pc_1059c, label %dec_label_pc_10168.backedge.thread

dec_label_pc_1057c:                               ; preds = %bb362
  %v2_1057c = icmp ugt i8 %v3_105a0, 35
  store i1 %v2_1057c, i1* %cpsr_c.global-to-local, align 1
  %v7_1057c = icmp eq i8 %v3_105a0, 36
  store i1 %v7_1057c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1057c, label %dec_label_pc_105b0, label %dec_label_pc_10584

dec_label_pc_10584:                               ; preds = %dec_label_pc_1057c
  %v2_10584 = icmp ugt i8 %v3_105a0, 34
  store i1 %v2_10584, i1* %cpsr_c.global-to-local, align 1
  %v7_10584 = icmp eq i8 %v3_105a0, 35
  store i1 %v7_10584, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10584, label %dec_label_pc_105b0, label %dec_label_pc_1058c

dec_label_pc_1058c:                               ; preds = %dec_label_pc_10584
  %v2_1058c = icmp ugt i8 %v3_105a0, 36
  store i1 %v2_1058c, i1* %cpsr_c.global-to-local, align 1
  %v7_1058c = icmp eq i8 %v3_105a0, 37
  store i1 %v7_1058c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1058c, label %dec_label_pc_105b0, label %dec_label_pc_10594

dec_label_pc_10594:                               ; preds = %dec_label_pc_1058c
  %v1_10594 = add i32 %v0_105b0, -1
  store i32 %v1_10594, i32* %r0.global-to-local, align 4
  %v2_10594 = icmp ne i32 %v0_105b0, 0
  store i1 %v2_10594, i1* %cpsr_c.global-to-local, align 1
  %v7_10594 = icmp eq i32 %v0_105b0, 1
  store i1 %v7_10594, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10594, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_1059c

dec_label_pc_1059c:                               ; preds = %dec_label_pc_104fc, %dec_label_pc_10594
  %v0_105b0 = phi i32 [ %v1_10594, %dec_label_pc_10594 ], [ %v1_10500, %dec_label_pc_104fc ]
  %v2_1059c = add i32 %v0_105b0, %v0_101e8
  store i32 %v2_1059c, i32* %r3.global-to-local, align 4
  %v1_105a0 = add i32 %v2_1059c, 28
  %v2_105a0 = inttoptr i32 %v1_105a0 to i8*
  %v3_105a0 = load i8, i8* %v2_105a0, align 1
  %v4_105a0 = zext i8 %v3_105a0 to i32
  store i32 %v4_105a0, i32* %r3.global-to-local, align 4
  %v2_105a4 = icmp ugt i8 %v3_105a0, 61
  store i1 %v2_105a4, i1* %cpsr_c.global-to-local, align 1
  %v7_105a4 = icmp eq i8 %v3_105a0, 62
  store i1 %v7_105a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105a4, label %dec_label_pc_105b0, label %bb362

bb362:                                            ; preds = %dec_label_pc_1059c
  %v3_105a8 = icmp ugt i8 %v3_105a0, 57
  store i1 %v3_105a8, i1* %cpsr_c.global-to-local, align 1
  %v8_105a8 = icmp eq i8 %v3_105a0, 58
  store i1 %v8_105a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_105a8, label %dec_label_pc_105b0, label %dec_label_pc_1057c

dec_label_pc_105b0:                               ; preds = %dec_label_pc_1059c, %bb362, %dec_label_pc_1058c, %dec_label_pc_10584, %dec_label_pc_1057c
  %v1_105b0 = add i32 %v0_105b0, 1
  store i32 %v1_105b0, i32* @r7, align 4
  %v2_105b4 = icmp eq i32 %v1_105b0, -1
  store i1 %v2_105b4, i1* %cpsr_c.global-to-local, align 1
  %v7_105b4 = icmp eq i32 %v0_105b0, -2
  store i1 %v7_105b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105b4, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_105bc

dec_label_pc_105bc:                               ; preds = %dec_label_pc_105b0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_105bc = icmp eq i32 %v1_105b0, 0
  store i1 %v2_105bc, i1* %cpsr_z.global-to-local, align 1
  %tmp363 = icmp slt i32 %v1_105b0, 1
  br i1 %tmp363, label %dec_label_pc_102f8, label %dec_label_pc_105c4

dec_label_pc_105c4:                               ; preds = %dec_label_pc_105bc
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_105c8 = call i32 @function_10dd4(i32 8)
  store i32 %v2_105d0, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_105d8 = call i32 @function_10cf0(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_105d8, i32* %r0.global-to-local, align 4
  %v3_105dc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_105dc, i32* %r2.global-to-local, align 4
  store i32 %v3_105d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_105e8 = load i32, i32* @r6, align 4
  %v1_105e8 = add i32 %v0_105e8, 4
  %v2_105e8 = inttoptr i32 %v1_105e8 to i32*
  %v3_105e8 = load i32, i32* %v2_105e8, align 4
  store i32 %v3_105e8, i32* %r0.global-to-local, align 4
  %v4_105ec = inttoptr i32 %v3_105d8 to i32*
  %v5_105ec = call i32 @function_1262c(i32 %v3_105e8, i32* %v4_105ec, i32 %v3_105dc, i32 16384)
  store i32 %v5_105ec, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_105fc = load i32, i32* @r6, align 4
  %v1_105fc = add i32 %v0_105fc, 4
  %v2_105fc = inttoptr i32 %v1_105fc to i32*
  %v3_105fc = load i32, i32* %v2_105fc, align 4
  store i32 %v3_105fc, i32* %r0.global-to-local, align 4
  %v5_10600 = call i32 @function_1262c(i32 %v3_105fc, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10608 = call i32 @function_10d1c(i32 8)
  store i32 %v1_10608, i32* %r0.global-to-local, align 4
  %v0_1060c = load i32, i32* @r6, align 4
  %v1_1060c = add i32 %v0_1060c, 24
  %v2_1060c = inttoptr i32 %v1_1060c to i32*
  %v3_1060c = load i32, i32* %v2_1060c, align 4
  store i32 %v3_1060c, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10614 = add i32 %v0_1060c, 12
  %v3_10614 = inttoptr i32 %v2_10614 to i32*
  store i32 7, i32* %v3_10614, align 4
  br label %dec_label_pc_10750

dec_label_pc_1061c:                               ; preds = %dec_label_pc_101e8
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_10620 = call i32 @function_10dd4(i32 12)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_10630 = call i32 @function_10cf0(i32 12, i32* nonnull %stack_var_-56)
  %v3_10634 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10630, i32* %r2.global-to-local, align 4
  %v1_1063c = add i32 %v3_10634, -1
  store i32 %v1_1063c, i32* %r3.global-to-local, align 4
  %v0_10640 = load i32, i32* @sb, align 4
  store i32 %v0_10640, i32* %r0.global-to-local, align 4
  %v0_10644 = load i32, i32* @r6, align 4
  %v1_10644 = add i32 %v0_10644, 24
  %v2_10644 = inttoptr i32 %v1_10644 to i32*
  %v3_10644 = load i32, i32* %v2_10644, align 4
  store i32 %v3_10644, i32* %r1.global-to-local, align 4
  %v4_10648 = call i32 @function_11560(i32 %v0_10640, i32 %v3_10644, i32 %v3_10630, i32 %v1_1063c)
  %v3_1064c = icmp eq i32 %v4_10648, -1
  store i1 %v3_1064c, i1* %cpsr_c.global-to-local, align 1
  %v8_1064c = icmp eq i32 %v4_10648, -1
  store i1 %v8_1064c, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_10658 = call i32 @function_10d1c(i32 12)
  br i1 %v3_1064c, label %dec_label_pc_10654, label %dec_label_pc_10a44

dec_label_pc_10654:                               ; preds = %dec_label_pc_1061c
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_10660 = call i32 @function_10dd4(i32 11)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_10670 = call i32 @function_10cf0(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_10670, i32* %r0.global-to-local, align 4
  %v3_10674 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10670, i32* %r2.global-to-local, align 4
  %v1_1067c = add i32 %v3_10674, -1
  store i32 %v1_1067c, i32* %r3.global-to-local, align 4
  %v0_10680 = load i32, i32* @r6, align 4
  %v1_10680 = add i32 %v0_10680, 24
  %v2_10680 = inttoptr i32 %v1_10680 to i32*
  %v3_10680 = load i32, i32* %v2_10680, align 4
  store i32 %v3_10680, i32* %r1.global-to-local, align 4
  %v0_10684 = load i32, i32* @sb, align 4
  store i32 %v0_10684, i32* %r0.global-to-local, align 4
  %v4_10688 = call i32 @function_11560(i32 %v0_10684, i32 %v3_10680, i32 %v3_10670, i32 %v1_1067c)
  store i32 %v4_10688, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_10694 = call i32 @function_10d1c(i32 11)
  store i32 %v1_10694, i32* %r0.global-to-local, align 4
  %v0_10698 = load i32, i32* @r7, align 4
  %v2_10698 = icmp eq i32 %v0_10698, -1
  store i1 %v2_10698, i1* %cpsr_c.global-to-local, align 1
  %v7_10698 = icmp eq i32 %v0_10698, -1
  store i1 %v7_10698, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10698, label %dec_label_pc_10164.loopexit, label %dec_label_pc_106a0

dec_label_pc_106a0:                               ; preds = %dec_label_pc_10654
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106a0 = icmp eq i32 %v0_10698, 0
  store i1 %v2_106a0, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v0_10698, 1
  br i1 %tmp364, label %dec_label_pc_102f8, label %dec_label_pc_106a8

dec_label_pc_106a8:                               ; preds = %dec_label_pc_106a0
  %v0_106a8 = load i32, i32* @r6, align 4
  %v1_106a8 = add i32 %v0_106a8, 21
  %v2_106a8 = inttoptr i32 %v1_106a8 to i8*
  %v3_106a8 = load i8, i8* %v2_106a8, align 1
  %v4_106a8 = zext i8 %v3_106a8 to i32
  store i32 %v4_106a8, i32* %r3.global-to-local, align 4
  %v1_106ac = add i32 %v0_106a8, 20
  %v2_106ac = inttoptr i32 %v1_106ac to i8*
  %v3_106ac = load i8, i8* %v2_106ac, align 1
  %v4_106ac = zext i8 %v3_106ac to i32
  store i32 %v4_106ac, i32* %r2.global-to-local, align 4
  %v1_106b0 = add i32 %v0_106a8, 16
  %v2_106b0 = inttoptr i32 %v1_106b0 to i32*
  %v3_106b0 = load i32, i32* %v2_106b0, align 4
  store i32 %v3_106b0, i32* %r1.global-to-local, align 4
  %v4_106b4 = mul nuw nsw i32 %v4_106a8, 256
  %v5_106b4 = or i32 %v4_106ac, %v4_106b4
  store i32 %v5_106b4, i32* %r2.global-to-local, align 4
  %v1_106b8 = and i32 %v4_106ac, 128
  %v2_106b8 = icmp ne i32 %v1_106b8, 0
  store i1 %v2_106b8, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_106a8, i32* %r3.global-to-local, align 4
  store i32 %v3_106b0, i32* %stack_var_-48, align 4
  store i32 %v5_106b4, i32* %stack_var_-38, align 4
  %v1_106c8 = inttoptr i32 %v0_106a8 to i32*
  %v2_106c8 = load i32, i32* %v1_106c8, align 4
  store i32 %v2_106c8, i32* @fp, align 4
  %v0_106cc = call i32 @function_11dcc()
  store i32 %v0_106cc, i32* %r0.global-to-local, align 4
  %v7_106d0 = icmp eq i32 %v0_106cc, -1
  %.387 = zext i1 %v7_106d0 to i32
  store i32 %.387, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106dc = icmp eq i32 %v0_106cc, 0
  store i1 %v2_106dc, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v0_106cc, 1
  br i1 %tmp367, label %bb368, label %.thread88

.thread88:                                        ; preds = %dec_label_pc_106a8
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10734

bb368:                                            ; preds = %dec_label_pc_106a8
  store i32 %.387, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_106e8 = icmp eq i1 %v7_106d0, false
  store i1 %v2_106e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_106e8, label %dec_label_pc_106f0, label %dec_label_pc_10734

dec_label_pc_106f0:                               ; preds = %bb368
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_106fc = call i32 @function_126bc(i32 2, i32 1, i32 0)
  store i32 %v3_106fc, i32* %r0.global-to-local, align 4
  %v2_10700 = icmp eq i32 %v3_106fc, -1
  store i1 %v2_10700, i1* %cpsr_c.global-to-local, align 1
  %v7_10700 = icmp eq i32 %v3_106fc, -1
  store i1 %v7_10700, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_106fc, i32* @r5, align 4
  br i1 %v7_10700, label %dec_label_pc_10cd8, label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_106f0
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10710 = call i32 @function_10dd4(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10718 = call i32 @function_10dd4(i32 4)
  %v0_1071c = load i32, i32* @sl, align 4
  store i32 %v0_1071c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_10724 = inttoptr i32 %v0_1071c to i32*
  %v3_10724 = call i32 @function_10cf0(i32 3, i32* %v2_10724)
  store i32 %v3_10724, i32* %r0.global-to-local, align 4
  %v1_10728 = inttoptr i32 %v3_10724 to i8*
  %v2_10728 = call i32 @function_edd0(i8* %v1_10728)
  store i32 %v2_10728, i32* %r0.global-to-local, align 4
  store i32 %v2_10728, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_1072c = icmp eq i32 %v2_10728, 0
  store i1 %v3_1072c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1072c, label %dec_label_pc_10734, label %dec_label_pc_10ba8

dec_label_pc_10734:                               ; preds = %.thread88, %dec_label_pc_1070c, %bb368
  %v0_10734 = load i32, i32* @r6, align 4
  %v1_10734 = add i32 %v0_10734, 4
  %v2_10734 = inttoptr i32 %v1_10734 to i32*
  %v3_10734 = load i32, i32* %v2_10734, align 4
  store i32 %v3_10734, i32* %r0.global-to-local, align 4
  %v1_10738 = call i32 @function_11da0(i32 %v3_10734)
  store i32 %v1_10738, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_10744 = load i32, i32* @r6, align 4
  %v1_10744 = add i32 %v0_10744, 24
  %v2_10744 = inttoptr i32 %v1_10744 to i32*
  %v3_10744 = load i32, i32* %v2_10744, align 4
  store i32 %v3_10744, i32* %ip.global-to-local, align 4
  %v2_10748 = add i32 %v0_10744, 4
  %v3_10748 = inttoptr i32 %v2_10748 to i32*
  store i32 -1, i32* %v3_10748, align 4
  %v0_1074c = load i32, i32* %r2.global-to-local, align 4
  %v1_1074c = load i32, i32* @r6, align 4
  %v2_1074c = add i32 %v1_1074c, 12
  %v3_1074c = inttoptr i32 %v2_1074c to i32*
  store i32 %v0_1074c, i32* %v3_1074c, align 4
  br label %dec_label_pc_10750

dec_label_pc_10750:                               ; preds = %.thread236, %dec_label_pc_10938, %dec_label_pc_10884, %dec_label_pc_107d0, %dec_label_pc_10b38, %dec_label_pc_10a74, %dec_label_pc_105c4, %dec_label_pc_104a4, %dec_label_pc_1040c, %dec_label_pc_10374, %dec_label_pc_10300, %dec_label_pc_10734
  %v0_10750 = load i32, i32* %ip.global-to-local, align 4
  %v1_10750 = load i32, i32* @r7, align 4
  %v2_10750 = sub i32 %v0_10750, %v1_10750
  %v3_10750 = icmp uge i32 %v0_10750, %v1_10750
  store i1 %v3_10750, i1* %cpsr_c.global-to-local, align 1
  %v4_10750 = xor i32 %v1_10750, %v0_10750
  %v5_10750 = xor i32 %v2_10750, %v0_10750
  %v6_10750 = and i32 %v5_10750, %v4_10750
  %v7_10750 = icmp slt i32 %v6_10750, 0
  %v8_10750 = icmp slt i32 %v2_10750, 0
  %v9_10750 = icmp eq i32 %v0_10750, %v1_10750
  store i1 %v9_10750, i1* %cpsr_z.global-to-local, align 1
  %v2_10754 = xor i1 %v8_10750, %v7_10750
  %v0_10750.v1_10750 = select i1 %v2_10754, i32 %v0_10750, i32 %v1_10750
  store i32 %v0_10750.v1_10750, i32* %r1.global-to-local, align 4
  %v2_1075c = sub i32 %v0_10750, %v0_10750.v1_10750
  store i32 %v2_1075c, i32* @r2, align 4
  %v1_10760 = load i32, i32* @r6, align 4
  %v2_10760 = add i32 %v1_10760, 24
  %v3_10760 = inttoptr i32 %v2_10760 to i32*
  store i32 %v2_1075c, i32* %v3_10760, align 4
  %v0_10764 = load i32, i32* @sb, align 4
  %v1_10764 = load i32, i32* %r1.global-to-local, align 4
  %v2_10764 = add i32 %v1_10764, %v0_10764
  store i32 %v2_10764, i32* @r1, align 4
  store i32 %v0_10764, i32* @r0, align 4
  %v3_1076c = call i32 @function_123d0(i32 %v0_10764, i32 %v2_10764, i32 %v2_1075c)
  store i32 %v3_1076c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101e8

dec_label_pc_10774:                               ; preds = %dec_label_pc_101e8
  %v1_10774 = add i32 %v0_101e8, 24
  %v2_10774 = inttoptr i32 %v1_10774 to i32*
  %v3_10774 = load i32, i32* %v2_10774, align 4
  store i32 %v3_10774, i32* %ip.global-to-local, align 4
  %v1_10778 = add i32 %v3_10774, -1
  store i32 %v1_10778, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1077c = icmp eq i32 %v1_10778, 0
  store i1 %v2_1077c, i1* %cpsr_z.global-to-local, align 1
  %v5_10780 = icmp sgt i32 %v1_10778, 0
  br i1 %v5_10780, label %dec_label_pc_107a8, label %dec_label_pc_10168.backedge.thread

dec_label_pc_10788:                               ; preds = %bb371
  %v2_10788 = icmp ugt i8 %v3_107ac, 35
  store i1 %v2_10788, i1* %cpsr_c.global-to-local, align 1
  %v7_10788 = icmp eq i8 %v3_107ac, 36
  store i1 %v7_10788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10788, label %dec_label_pc_107bc, label %dec_label_pc_10790

dec_label_pc_10790:                               ; preds = %dec_label_pc_10788
  %v2_10790 = icmp ugt i8 %v3_107ac, 34
  store i1 %v2_10790, i1* %cpsr_c.global-to-local, align 1
  %v7_10790 = icmp eq i8 %v3_107ac, 35
  store i1 %v7_10790, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10790, label %dec_label_pc_107bc, label %dec_label_pc_10798

dec_label_pc_10798:                               ; preds = %dec_label_pc_10790
  %v2_10798 = icmp ugt i8 %v3_107ac, 36
  store i1 %v2_10798, i1* %cpsr_c.global-to-local, align 1
  %v7_10798 = icmp eq i8 %v3_107ac, 37
  store i1 %v7_10798, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10798, label %dec_label_pc_107bc, label %dec_label_pc_107a0

dec_label_pc_107a0:                               ; preds = %dec_label_pc_10798
  %v1_107a0 = add i32 %v0_107bc, -1
  store i32 %v1_107a0, i32* %r0.global-to-local, align 4
  %v2_107a0 = icmp ne i32 %v0_107bc, 0
  store i1 %v2_107a0, i1* %cpsr_c.global-to-local, align 1
  %v7_107a0 = icmp eq i32 %v0_107bc, 1
  store i1 %v7_107a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107a0, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_107a8

dec_label_pc_107a8:                               ; preds = %dec_label_pc_10774, %dec_label_pc_107a0
  %v0_107bc = phi i32 [ %v1_107a0, %dec_label_pc_107a0 ], [ %v1_10778, %dec_label_pc_10774 ]
  %v2_107a8 = add i32 %v0_107bc, %v0_101e8
  store i32 %v2_107a8, i32* %r3.global-to-local, align 4
  %v1_107ac = add i32 %v2_107a8, 28
  %v2_107ac = inttoptr i32 %v1_107ac to i8*
  %v3_107ac = load i8, i8* %v2_107ac, align 1
  %v4_107ac = zext i8 %v3_107ac to i32
  store i32 %v4_107ac, i32* %r3.global-to-local, align 4
  %v2_107b0 = icmp ugt i8 %v3_107ac, 61
  store i1 %v2_107b0, i1* %cpsr_c.global-to-local, align 1
  %v7_107b0 = icmp eq i8 %v3_107ac, 62
  store i1 %v7_107b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107b0, label %dec_label_pc_107bc, label %bb371

bb371:                                            ; preds = %dec_label_pc_107a8
  %v3_107b4 = icmp ugt i8 %v3_107ac, 57
  store i1 %v3_107b4, i1* %cpsr_c.global-to-local, align 1
  %v8_107b4 = icmp eq i8 %v3_107ac, 58
  store i1 %v8_107b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_107b4, label %dec_label_pc_107bc, label %dec_label_pc_10788

dec_label_pc_107bc:                               ; preds = %dec_label_pc_107a8, %bb371, %dec_label_pc_10798, %dec_label_pc_10790, %dec_label_pc_10788
  %v1_107bc = add i32 %v0_107bc, 1
  store i32 %v1_107bc, i32* @r7, align 4
  %v2_107c0 = icmp eq i32 %v1_107bc, -1
  store i1 %v2_107c0, i1* %cpsr_c.global-to-local, align 1
  %v7_107c0 = icmp eq i32 %v0_107bc, -2
  store i1 %v7_107c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_107c0, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_107c8

dec_label_pc_107c8:                               ; preds = %dec_label_pc_107bc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107c8 = icmp eq i32 %v1_107bc, 0
  store i1 %v2_107c8, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v1_107bc, 1
  br i1 %tmp372, label %dec_label_pc_102f8, label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107c8
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_107d4 = call i32 @function_10dd4(i32 9)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_107e4 = call i32 @function_10cf0(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_107e4, i32* %r0.global-to-local, align 4
  %v3_107e8 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_107e8, i32* %r2.global-to-local, align 4
  store i32 %v3_107e4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_107f4 = load i32, i32* @r6, align 4
  %v1_107f4 = add i32 %v0_107f4, 4
  %v2_107f4 = inttoptr i32 %v1_107f4 to i32*
  %v3_107f4 = load i32, i32* %v2_107f4, align 4
  store i32 %v3_107f4, i32* %r0.global-to-local, align 4
  %v4_107f8 = inttoptr i32 %v3_107e4 to i32*
  %v5_107f8 = call i32 @function_1262c(i32 %v3_107f4, i32* %v4_107f8, i32 %v3_107e8, i32 16384)
  store i32 %v5_107f8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10808 = load i32, i32* @r6, align 4
  %v1_10808 = add i32 %v0_10808, 4
  %v2_10808 = inttoptr i32 %v1_10808 to i32*
  %v3_10808 = load i32, i32* %v2_10808, align 4
  store i32 %v3_10808, i32* %r0.global-to-local, align 4
  %v5_1080c = call i32 @function_1262c(i32 %v3_10808, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10814 = call i32 @function_10d1c(i32 9)
  store i32 %v1_10814, i32* %r0.global-to-local, align 4
  %v0_10818 = load i32, i32* @r6, align 4
  %v1_10818 = add i32 %v0_10818, 24
  %v2_10818 = inttoptr i32 %v1_10818 to i32*
  %v3_10818 = load i32, i32* %v2_10818, align 4
  store i32 %v3_10818, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10820 = add i32 %v0_10818, 12
  %v3_10820 = inttoptr i32 %v2_10820 to i32*
  store i32 9, i32* %v3_10820, align 4
  br label %dec_label_pc_10750

dec_label_pc_10828:                               ; preds = %dec_label_pc_101e8
  %v1_10828 = add i32 %v0_101e8, 24
  %v2_10828 = inttoptr i32 %v1_10828 to i32*
  %v3_10828 = load i32, i32* %v2_10828, align 4
  store i32 %v3_10828, i32* %ip.global-to-local, align 4
  %v1_1082c = add i32 %v3_10828, -1
  store i32 %v1_1082c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10830 = icmp eq i32 %v1_1082c, 0
  store i1 %v2_10830, i1* %cpsr_z.global-to-local, align 1
  %v5_10834 = icmp sgt i32 %v1_1082c, 0
  br i1 %v5_10834, label %dec_label_pc_1085c, label %dec_label_pc_10168.backedge.thread

dec_label_pc_1083c:                               ; preds = %bb373
  %v2_1083c = icmp ugt i8 %v3_10860, 35
  store i1 %v2_1083c, i1* %cpsr_c.global-to-local, align 1
  %v7_1083c = icmp eq i8 %v3_10860, 36
  store i1 %v7_1083c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1083c, label %dec_label_pc_10870, label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %dec_label_pc_1083c
  %v2_10844 = icmp ugt i8 %v3_10860, 34
  store i1 %v2_10844, i1* %cpsr_c.global-to-local, align 1
  %v7_10844 = icmp eq i8 %v3_10860, 35
  store i1 %v7_10844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10844, label %dec_label_pc_10870, label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10844
  %v2_1084c = icmp ugt i8 %v3_10860, 36
  store i1 %v2_1084c, i1* %cpsr_c.global-to-local, align 1
  %v7_1084c = icmp eq i8 %v3_10860, 37
  store i1 %v7_1084c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1084c, label %dec_label_pc_10870, label %dec_label_pc_10854

dec_label_pc_10854:                               ; preds = %dec_label_pc_1084c
  %v1_10854 = add i32 %v0_10870, -1
  store i32 %v1_10854, i32* %r0.global-to-local, align 4
  %v2_10854 = icmp ne i32 %v0_10870, 0
  store i1 %v2_10854, i1* %cpsr_c.global-to-local, align 1
  %v7_10854 = icmp eq i32 %v0_10870, 1
  store i1 %v7_10854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10854, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_1085c

dec_label_pc_1085c:                               ; preds = %dec_label_pc_10828, %dec_label_pc_10854
  %v0_10870 = phi i32 [ %v1_10854, %dec_label_pc_10854 ], [ %v1_1082c, %dec_label_pc_10828 ]
  %v2_1085c = add i32 %v0_10870, %v0_101e8
  store i32 %v2_1085c, i32* %r3.global-to-local, align 4
  %v1_10860 = add i32 %v2_1085c, 28
  %v2_10860 = inttoptr i32 %v1_10860 to i8*
  %v3_10860 = load i8, i8* %v2_10860, align 1
  %v4_10860 = zext i8 %v3_10860 to i32
  store i32 %v4_10860, i32* %r3.global-to-local, align 4
  %v2_10864 = icmp ugt i8 %v3_10860, 61
  store i1 %v2_10864, i1* %cpsr_c.global-to-local, align 1
  %v7_10864 = icmp eq i8 %v3_10860, 62
  store i1 %v7_10864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10864, label %dec_label_pc_10870, label %bb373

bb373:                                            ; preds = %dec_label_pc_1085c
  %v3_10868 = icmp ugt i8 %v3_10860, 57
  store i1 %v3_10868, i1* %cpsr_c.global-to-local, align 1
  %v8_10868 = icmp eq i8 %v3_10860, 58
  store i1 %v8_10868, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10868, label %dec_label_pc_10870, label %dec_label_pc_1083c

dec_label_pc_10870:                               ; preds = %dec_label_pc_1085c, %bb373, %dec_label_pc_1084c, %dec_label_pc_10844, %dec_label_pc_1083c
  %v1_10870 = add i32 %v0_10870, 1
  store i32 %v1_10870, i32* @r7, align 4
  %v2_10874 = icmp eq i32 %v1_10870, -1
  store i1 %v2_10874, i1* %cpsr_c.global-to-local, align 1
  %v7_10874 = icmp eq i32 %v0_10870, -2
  store i1 %v7_10874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10874, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_1087c

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10870
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1087c = icmp eq i32 %v1_10870, 0
  store i1 %v2_1087c, i1* %cpsr_z.global-to-local, align 1
  %tmp374 = icmp slt i32 %v1_10870, 1
  br i1 %tmp374, label %dec_label_pc_102f8, label %dec_label_pc_10884

dec_label_pc_10884:                               ; preds = %dec_label_pc_1087c
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10888 = call i32 @function_10dd4(i32 10)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10898 = call i32 @function_10cf0(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_10898, i32* %r0.global-to-local, align 4
  %v3_1089c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1089c, i32* %r2.global-to-local, align 4
  store i32 %v3_10898, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_108a8 = load i32, i32* @r6, align 4
  %v1_108a8 = add i32 %v0_108a8, 4
  %v2_108a8 = inttoptr i32 %v1_108a8 to i32*
  %v3_108a8 = load i32, i32* %v2_108a8, align 4
  store i32 %v3_108a8, i32* %r0.global-to-local, align 4
  %v4_108ac = inttoptr i32 %v3_10898 to i32*
  %v5_108ac = call i32 @function_1262c(i32 %v3_108a8, i32* %v4_108ac, i32 %v3_1089c, i32 16384)
  store i32 %v5_108ac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_108bc = load i32, i32* @r6, align 4
  %v1_108bc = add i32 %v0_108bc, 4
  %v2_108bc = inttoptr i32 %v1_108bc to i32*
  %v3_108bc = load i32, i32* %v2_108bc, align 4
  store i32 %v3_108bc, i32* %r0.global-to-local, align 4
  %v5_108c0 = call i32 @function_1262c(i32 %v3_108bc, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_108c8 = call i32 @function_10d1c(i32 10)
  store i32 %v1_108c8, i32* %r0.global-to-local, align 4
  %v0_108cc = load i32, i32* @r6, align 4
  %v1_108cc = add i32 %v0_108cc, 24
  %v2_108cc = inttoptr i32 %v1_108cc to i32*
  %v3_108cc = load i32, i32* %v2_108cc, align 4
  store i32 %v3_108cc, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_108d4 = add i32 %v0_108cc, 12
  %v3_108d4 = inttoptr i32 %v2_108d4 to i32*
  store i32 10, i32* %v3_108d4, align 4
  br label %dec_label_pc_10750

dec_label_pc_108dc:                               ; preds = %dec_label_pc_101e8
  %v1_108dc = add i32 %v0_101e8, 24
  %v2_108dc = inttoptr i32 %v1_108dc to i32*
  %v3_108dc = load i32, i32* %v2_108dc, align 4
  store i32 %v3_108dc, i32* %ip.global-to-local, align 4
  %v1_108e0 = add i32 %v3_108dc, -1
  store i32 %v1_108e0, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108e4 = icmp eq i32 %v1_108e0, 0
  store i1 %v2_108e4, i1* %cpsr_z.global-to-local, align 1
  %v5_108e8 = icmp sgt i32 %v1_108e0, 0
  br i1 %v5_108e8, label %dec_label_pc_10910, label %dec_label_pc_10168.backedge.thread

dec_label_pc_108f0:                               ; preds = %bb375
  %v2_108f0 = icmp ugt i8 %v3_10914, 35
  store i1 %v2_108f0, i1* %cpsr_c.global-to-local, align 1
  %v7_108f0 = icmp eq i8 %v3_10914, 36
  store i1 %v7_108f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f0, label %dec_label_pc_10924, label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108f0
  %v2_108f8 = icmp ugt i8 %v3_10914, 34
  store i1 %v2_108f8, i1* %cpsr_c.global-to-local, align 1
  %v7_108f8 = icmp eq i8 %v3_10914, 35
  store i1 %v7_108f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f8, label %dec_label_pc_10924, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108f8
  %v2_10900 = icmp ugt i8 %v3_10914, 36
  store i1 %v2_10900, i1* %cpsr_c.global-to-local, align 1
  %v7_10900 = icmp eq i8 %v3_10914, 37
  store i1 %v7_10900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10900, label %dec_label_pc_10924, label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %dec_label_pc_10900
  %v1_10908 = add i32 %v0_10924, -1
  store i32 %v1_10908, i32* %r0.global-to-local, align 4
  %v2_10908 = icmp ne i32 %v0_10924, 0
  store i1 %v2_10908, i1* %cpsr_c.global-to-local, align 1
  %v7_10908 = icmp eq i32 %v0_10924, 1
  store i1 %v7_10908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10908, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_10910

dec_label_pc_10910:                               ; preds = %dec_label_pc_108dc, %dec_label_pc_10908
  %v0_10924 = phi i32 [ %v1_10908, %dec_label_pc_10908 ], [ %v1_108e0, %dec_label_pc_108dc ]
  %v2_10910 = add i32 %v0_10924, %v0_101e8
  store i32 %v2_10910, i32* %r3.global-to-local, align 4
  %v1_10914 = add i32 %v2_10910, 28
  %v2_10914 = inttoptr i32 %v1_10914 to i8*
  %v3_10914 = load i8, i8* %v2_10914, align 1
  %v4_10914 = zext i8 %v3_10914 to i32
  store i32 %v4_10914, i32* %r3.global-to-local, align 4
  %v2_10918 = icmp ugt i8 %v3_10914, 61
  store i1 %v2_10918, i1* %cpsr_c.global-to-local, align 1
  %v7_10918 = icmp eq i8 %v3_10914, 62
  store i1 %v7_10918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10918, label %dec_label_pc_10924, label %bb375

bb375:                                            ; preds = %dec_label_pc_10910
  %v3_1091c = icmp ugt i8 %v3_10914, 57
  store i1 %v3_1091c, i1* %cpsr_c.global-to-local, align 1
  %v8_1091c = icmp eq i8 %v3_10914, 58
  store i1 %v8_1091c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1091c, label %dec_label_pc_10924, label %dec_label_pc_108f0

dec_label_pc_10924:                               ; preds = %dec_label_pc_10910, %bb375, %dec_label_pc_10900, %dec_label_pc_108f8, %dec_label_pc_108f0
  %v1_10924 = add i32 %v0_10924, 1
  store i32 %v1_10924, i32* @r7, align 4
  %v2_10928 = icmp eq i32 %v1_10924, -1
  store i1 %v2_10928, i1* %cpsr_c.global-to-local, align 1
  %v7_10928 = icmp eq i32 %v0_10924, -2
  store i1 %v7_10928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10928, label %dec_label_pc_10168.backedge.thread491, label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %dec_label_pc_10924
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10930 = icmp eq i32 %v1_10924, 0
  store i1 %v2_10930, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v1_10924, 1
  br i1 %tmp376, label %dec_label_pc_102f8, label %dec_label_pc_10938

dec_label_pc_10938:                               ; preds = %dec_label_pc_10930
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_1093c = call i32 @function_10dd4(i32 6)
  store i32 %v2_105d0, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_1094c = call i32 @function_10cf0(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_1094c, i32* %r0.global-to-local, align 4
  %v3_10950 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10950, i32* %r2.global-to-local, align 4
  store i32 %v3_1094c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1095c = load i32, i32* @r6, align 4
  %v1_1095c = add i32 %v0_1095c, 4
  %v2_1095c = inttoptr i32 %v1_1095c to i32*
  %v3_1095c = load i32, i32* %v2_1095c, align 4
  store i32 %v3_1095c, i32* %r0.global-to-local, align 4
  %v4_10960 = inttoptr i32 %v3_1094c to i32*
  %v5_10960 = call i32 @function_1262c(i32 %v3_1095c, i32* %v4_10960, i32 %v3_10950, i32 16384)
  store i32 %v5_10960, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_146c8.203 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10970 = load i32, i32* @r6, align 4
  %v1_10970 = add i32 %v0_10970, 4
  %v2_10970 = inttoptr i32 %v1_10970 to i32*
  %v3_10970 = load i32, i32* %v2_10970, align 4
  store i32 %v3_10970, i32* %r0.global-to-local, align 4
  %v5_10974 = call i32 @function_1262c(i32 %v3_10970, i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_1097c = call i32 @function_10d1c(i32 6)
  store i32 %v1_1097c, i32* %r0.global-to-local, align 4
  %v0_10980 = load i32, i32* @r6, align 4
  %v1_10980 = add i32 %v0_10980, 24
  %v2_10980 = inttoptr i32 %v1_10980 to i32*
  %v3_10980 = load i32, i32* %v2_10980, align 4
  store i32 %v3_10980, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10988 = add i32 %v0_10980, 12
  %v3_10988 = inttoptr i32 %v2_10988 to i32*
  store i32 8, i32* %v3_10988, align 4
  br label %dec_label_pc_10750

dec_label_pc_10990:                               ; preds = %dec_label_pc_10278
  store i32 ptrtoint (i32* @global_var_146da.205 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_10230, i32* @r0, align 4
  %v3_1099c = call i32 @function_123c0(i32 %v2_10230, i32 ptrtoint (i32* @global_var_146da.205 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_109a8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_146d1.207 to i32), i32* @r1, align 4
  %v3_109b0 = call i32 @function_123c0(i32 %v2_109a8, i32 ptrtoint (i32* @global_var_146d1.207 to i32), i32 9)
  store i32 %v3_109b0, i32* %r0.global-to-local, align 4
  %v0_109b4 = load i32, i32* @r6, align 4
  %v1_109b4 = add i32 %v0_109b4, 24
  %v2_109b4 = inttoptr i32 %v1_109b4 to i32*
  %v3_109b4 = load i32, i32* %v2_109b4, align 4
  store i32 %v3_109b4, i32* %ip.global-to-local, align 4
  %v0_109b8 = load i32, i32* @r5, align 4
  %v1_109b8 = add i32 %v0_109b8, 2
  store i32 %v1_109b8, i32* %r2.global-to-local, align 4
  %v0_109bc = load i32, i32* @sb, align 4
  %v2_109bc = add i32 %v0_109bc, %v3_109b4
  store i32 %v2_109bc, i32* %r3.global-to-local, align 4
  %v3_109c0 = icmp uge i32 %v2_109bc, %v1_109b8
  store i1 %v3_109c0, i1* %cpsr_c.global-to-local, align 1
  %v9_109c0 = icmp eq i32 %v2_109bc, %v1_109b8
  store i1 %v9_109c0, i1* %cpsr_z.global-to-local, align 1
  %v2_109c4 = xor i1 %v3_109c0, true
  %v3_109c4 = or i1 %v9_109c0, %v2_109c4
  br i1 %v3_109c4, label %dec_label_pc_10990.dec_label_pc_102e8.loopexit_crit_edge, label %dec_label_pc_109c8

dec_label_pc_10990.dec_label_pc_102e8.loopexit_crit_edge: ; preds = %dec_label_pc_10990
  %v0_102e8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_102e8

dec_label_pc_109c8:                               ; preds = %dec_label_pc_10990
  %v0_109c8 = load i32, i32* @r4, align 4
  %v1_109c8 = add i32 %v0_109c8, 1
  %v2_109c8 = inttoptr i32 %v1_109c8 to i8*
  %v3_109c8 = load i8, i8* %v2_109c8, align 1
  %v4_109c8 = zext i8 %v3_109c8 to i32
  store i32 %v4_109c8, i32* %r3.global-to-local, align 4
  %v2_109cc = icmp ugt i8 %v3_109c8, 30
  store i1 %v2_109cc, i1* %cpsr_c.global-to-local, align 1
  %v7_109cc = icmp eq i8 %v3_109c8, 31
  store i1 %v7_109cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109cc, label %dec_label_pc_10aec, label %dec_label_pc_109d4

dec_label_pc_109d4:                               ; preds = %dec_label_pc_109c8
  %v1_109d4 = add i32 %v0_109c8, -1
  %v2_109d4 = inttoptr i32 %v1_109d4 to i8*
  %v3_109d4 = load i8, i8* %v2_109d4, align 1
  %v4_109d4 = zext i8 %v3_109d4 to i32
  store i32 %v4_109d4, i32* %r3.global-to-local, align 4
  %v2_109d8 = icmp ugt i8 %v3_109d4, -4
  store i1 %v2_109d8, i1* %cpsr_c.global-to-local, align 1
  %v7_109d8 = icmp eq i8 %v3_109d4, -3
  store i1 %v7_109d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109d8, label %bb377, label %dec_label_pc_109e4

bb377:                                            ; preds = %dec_label_pc_109d4
  %v1_109dc = load i32, i32* @r8, align 4
  %v2_109dc = trunc i32 %v1_109dc to i8
  store i8 %v2_109dc, i8* %v2_109d4, align 1
  %v0_109e0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_109e0.pr, label %dec_label_pc_1028c, label %.dec_label_pc_109e4_crit_edge

.dec_label_pc_109e4_crit_edge:                    ; preds = %bb377
  %v0_109e4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_109e4

dec_label_pc_109e4:                               ; preds = %.dec_label_pc_109e4_crit_edge, %dec_label_pc_109d4
  %v0_109e4 = phi i32 [ %v0_109e4.pre, %.dec_label_pc_109e4_crit_edge ], [ %v4_109d4, %dec_label_pc_109d4 ]
  %v2_109e4 = icmp ugt i32 %v0_109e4, 250
  store i1 %v2_109e4, i1* %cpsr_c.global-to-local, align 1
  %v7_109e4 = icmp eq i32 %v0_109e4, 251
  store i1 %v7_109e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109e4, label %bb378, label %dec_label_pc_1028c

bb378:                                            ; preds = %dec_label_pc_109e4
  %v1_109e8 = load i32, i32* %sl.global-to-local, align 4
  %v2_109e8 = trunc i32 %v1_109e8 to i8
  %v3_109e8 = load i32, i32* @r4, align 4
  %v4_109e8 = add i32 %v3_109e8, -1
  %v5_109e8 = inttoptr i32 %v4_109e8 to i8*
  store i8 %v2_109e8, i8* %v5_109e8, align 1
  br label %dec_label_pc_1028c

dec_label_pc_109f0:                               ; preds = %dec_label_pc_103d4, %dec_label_pc_103b0, %dec_label_pc_103f0
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_109f4 = call i32 @function_10dd4(i32 30)
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_10a04 = call i32 @function_10cf0(i32 30, i32* nonnull %stack_var_-56)
  %v3_10a08 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a04, i32* %r2.global-to-local, align 4
  %v1_10a10 = add i32 %v3_10a08, -1
  store i32 %v1_10a10, i32* %r3.global-to-local, align 4
  %v0_10a14 = load i32, i32* @sb, align 4
  store i32 %v0_10a14, i32* %r0.global-to-local, align 4
  %v0_10a18 = load i32, i32* @r6, align 4
  %v1_10a18 = add i32 %v0_10a18, 24
  %v2_10a18 = inttoptr i32 %v1_10a18 to i32*
  %v3_10a18 = load i32, i32* %v2_10a18, align 4
  store i32 %v3_10a18, i32* %r1.global-to-local, align 4
  %v4_10a1c = call i32 @function_11560(i32 %v0_10a14, i32 %v3_10a18, i32 %v3_10a04, i32 %v1_10a10)
  store i32 %v4_10a1c, i32* %r0.global-to-local, align 4
  %v1_10a20 = add i32 %v4_10a1c, 1
  store i32 %v1_10a20, i32* @r7, align 4
  %v2_10a20 = icmp eq i32 %v4_10a1c, -1
  store i1 %v2_10a20, i1* %cpsr_c.global-to-local, align 1
  %v7_10a20 = icmp eq i32 %v1_10a20, 0
  store i1 %v7_10a20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a20, label %thread-pre-split95, label %bb379

bb379:                                            ; preds = %dec_label_pc_109f0
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split95

thread-pre-split95:                               ; preds = %dec_label_pc_109f0, %bb379
  %v0_10a28 = phi i1 [ false, %bb379 ], [ true, %dec_label_pc_109f0 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10a28, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10b68 = call i32 @function_10d1c(i32 30)
  store i32 %v1_10b68, i32* %r0.global-to-local, align 4
  br i1 %v0_10a28, label %dec_label_pc_10b64, label %dec_label_pc_10a30

dec_label_pc_10a30:                               ; preds = %thread-pre-split95
  %v0_10a38 = load i32, i32* @r7, align 4
  %v3_10a38 = icmp eq i32 %v0_10a38, -1
  store i1 %v3_10a38, i1* %cpsr_c.global-to-local, align 1
  %v8_10a38 = icmp eq i32 %v0_10a38, -1
  store i1 %v8_10a38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10a38, label %dec_label_pc_10164.loopexit, label %dec_label_pc_10404

dec_label_pc_10a44:                               ; preds = %dec_label_pc_1061c
  store i32 %v1_10658, i32* %r0.global-to-local, align 4
  %v0_10a4c = load i32, i32* @r6, align 4
  %v1_10a4c = add i32 %v0_10a4c, 4
  %v2_10a4c = inttoptr i32 %v1_10a4c to i32*
  %v3_10a4c = load i32, i32* %v2_10a4c, align 4
  store i32 %v3_10a4c, i32* %r0.global-to-local, align 4
  %v1_10a50 = call i32 @function_11da0(i32 %v3_10a4c)
  store i32 %v1_10a50, i32* %r0.global-to-local, align 4
  %v0_10a54 = load i32, i32* @r6, align 4
  %v1_10a54 = add i32 %v0_10a54, 384
  %v2_10a54 = inttoptr i32 %v1_10a54 to i8*
  %v3_10a54 = load i8, i8* %v2_10a54, align 1
  %v4_10a54 = zext i8 %v3_10a54 to i32
  %v1_10a58 = add nuw nsw i32 %v4_10a54, 1
  %v1_10a5c = urem i32 %v1_10a58, 256
  store i32 %v1_10a5c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10a64 = icmp ugt i32 %v1_10a5c, 9
  store i1 %v2_10a64, i1* %cpsr_c.global-to-local, align 1
  %v7_10a64 = icmp eq i32 %v1_10a5c, 10
  store i1 %v7_10a64, i1* %cpsr_z.global-to-local, align 1
  %v2_10a68 = add i32 %v0_10a54, 4
  %v3_10a68 = inttoptr i32 %v2_10a68 to i32*
  store i32 -1, i32* %v3_10a68, align 4
  %v0_10a6c = load i32, i32* %r3.global-to-local, align 4
  %v1_10a6c = trunc i32 %v0_10a6c to i8
  %v2_10a6c = load i32, i32* @r6, align 4
  %v3_10a6c = add i32 %v2_10a6c, 384
  %v4_10a6c = inttoptr i32 %v3_10a6c to i8*
  store i8 %v1_10a6c, i8* %v4_10a6c, align 1
  %v0_10a70 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10a74 = load i32, i32* @r6, align 4
  br i1 %v0_10a70, label %dec_label_pc_10a74, label %dec_label_pc_10b38

dec_label_pc_10a74:                               ; preds = %dec_label_pc_10a44
  %v1_10a74 = add i32 %v0_10a74, 24
  %v2_10a74 = inttoptr i32 %v1_10a74 to i32*
  %v3_10a74 = load i32, i32* %v2_10a74, align 4
  store i32 %v3_10a74, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_10a84 = add i32 %v0_10a74, 384
  %v4_10a84 = inttoptr i32 %v3_10a84 to i8*
  store i8 0, i8* %v4_10a84, align 1
  %v0_10a88 = load i32, i32* %r3.global-to-local, align 4
  %v1_10a88 = load i32, i32* @r6, align 4
  %v2_10a88 = add i32 %v1_10a88, 12
  %v3_10a88 = inttoptr i32 %v2_10a88 to i32*
  store i32 %v0_10a88, i32* %v3_10a88, align 4
  br label %dec_label_pc_10750

dec_label_pc_10a90:                               ; preds = %dec_label_pc_10180
  br i1 %v2_101a8, label %dec_label_pc_10ce0, label %dec_label_pc_10a94

dec_label_pc_10a94:                               ; preds = %dec_label_pc_10a90
  %v3_10a94 = icmp eq i32 %v5_101a4, -1
  store i1 %v3_10a94, i1* %cpsr_c.global-to-local, align 1
  %v8_10a94 = icmp eq i32 %v5_101a4, -1
  store i1 %v8_10a94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10a94, label %dec_label_pc_10a9c, label %dec_label_pc_101d0

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10a94
  store i32 %stack_var_-1868.0, i32* %ip.global-to-local, align 4
  %v2_10aa0 = load i32, i32* %v2_10188, align 4
  store i32 %v2_10aa0, i32* %r3.global-to-local, align 4
  %v2_10aa4 = icmp ugt i32 %v2_10aa0, 10
  store i1 %v2_10aa4, i1* %cpsr_c.global-to-local, align 1
  %v7_10aa4 = icmp eq i32 %v2_10aa0, 11
  store i1 %v7_10aa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10aa4, label %dec_label_pc_ff9c, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %dec_label_pc_10a9c, %dec_label_pc_10ce0
  %v0_10aac = load i32, i32* @r6, align 4
  %v1_10aac = add i32 %v0_10aac, 4
  %v2_10aac = inttoptr i32 %v1_10aac to i32*
  %v3_10aac = load i32, i32* %v2_10aac, align 4
  store i32 %v3_10aac, i32* %r0.global-to-local, align 4
  %v1_10ab0 = call i32 @function_11da0(i32 %v3_10aac)
  store i32 %v1_10ab0, i32* %r0.global-to-local, align 4
  %v0_10ab4 = load i32, i32* @r6, align 4
  %v1_10ab4 = add i32 %v0_10ab4, 384
  %v2_10ab4 = inttoptr i32 %v1_10ab4 to i8*
  %v3_10ab4 = load i8, i8* %v2_10ab4, align 1
  %v4_10ab4 = zext i8 %v3_10ab4 to i32
  %v1_10ab8 = add nuw nsw i32 %v4_10ab4, 1
  %v1_10abc = urem i32 %v1_10ab8, 256
  store i32 %v1_10abc, i32* %r3.global-to-local, align 4
  %v2_10ac0 = icmp ugt i32 %v1_10abc, 8
  store i1 %v2_10ac0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac0 = icmp eq i32 %v1_10abc, 9
  store i1 %v7_10ac0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ac4 = xor i1 %v7_10ac0, true
  %v3_10ac4 = and i1 %v2_10ac0, %v2_10ac4
  br i1 %v3_10ac4, label %bb380, label %bb381

bb380:                                            ; preds = %dec_label_pc_10aac
  store i32 0, i32* @lr, align 4
  br label %bb381

bb381:                                            ; preds = %dec_label_pc_10aac, %bb380
  store i32 -1, i32* @r4, align 4
  %v1_10acc = trunc i32 %v1_10ab8 to i8
  store i8 %v1_10acc, i8* %v2_10ab4, align 1
  %v0_10ad0 = load i32, i32* @r4, align 4
  %v1_10ad0 = load i32, i32* @r6, align 4
  %v2_10ad0 = add i32 %v1_10ad0, 4
  %v3_10ad0 = inttoptr i32 %v2_10ad0 to i32*
  store i32 %v0_10ad0, i32* %v3_10ad0, align 4
  %v0_10ad4 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10ad4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10ad4 = xor i1 %v1_10ad4, true
  %v3_10ad4 = and i1 %v0_10ad4, %v2_10ad4
  br i1 %v3_10ad4, label %bb382, label %.thread241

bb382:                                            ; preds = %bb381
  %v4_10ad4 = load i32, i32* @lr, align 4
  %v5_10ad4 = load i32, i32* @r6, align 4
  %v6_10ad4 = add i32 %v5_10ad4, 12
  %v7_10ad4 = inttoptr i32 %v6_10ad4 to i32*
  store i32 %v4_10ad4, i32* %v7_10ad4, align 4
  %v4_10ad8 = load i32, i32* @lr, align 4
  %v5_10ad8 = trunc i32 %v4_10ad8 to i8
  %v6_10ad8 = load i32, i32* @r6, align 4
  %v7_10ad8 = add i32 %v6_10ad8, 384
  %v8_10ad8 = inttoptr i32 %v7_10ad8 to i8*
  store i8 %v5_10ad8, i8* %v8_10ad8, align 1
  %v0_10adc.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10adc.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb381, %bb382
  %v1_10adc = phi i1 [ %v1_10adc.pre, %bb382 ], [ %v1_10ad4, %bb381 ]
  %v0_10adc = phi i1 [ %v0_10adc.pre, %bb382 ], [ %v0_10ad4, %bb381 ]
  %v2_10adc = xor i1 %v1_10adc, true
  %v3_10adc = and i1 %v0_10adc, %v2_10adc
  br i1 %v3_10adc, label %dec_label_pc_ff9c, label %dec_label_pc_10ae0

dec_label_pc_10ae0:                               ; preds = %.thread241
  %v0_10ae0 = load i32, i32* @r6, align 4
  store i32 %v0_10ae0, i32* @r0, align 4
  %v0_10ae4 = call i32 @function_f330()
  store i32 %v0_10ae4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff9c

dec_label_pc_10aec:                               ; preds = %dec_label_pc_109c8
  store i32 %v2_10230, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10af8 = add i32 %v0_109b4, 4
  %v2_10af8 = inttoptr i32 %v1_10af8 to i32*
  %v3_10af8 = load i32, i32* %v2_10af8, align 4
  store i32 %v3_10af8, i32* %r0.global-to-local, align 4
  %v5_10afc = call i32 @function_1262c(i32 %v3_10af8, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10afc, i32* %r0.global-to-local, align 4
  store i32 %v2_109a0, i32* %r1.global-to-local, align 4
  %v0_10b04 = load i32, i32* @r6, align 4
  %v1_10b04 = add i32 %v0_10b04, 4
  %v2_10b04 = inttoptr i32 %v1_10b04 to i32*
  %v3_10b04 = load i32, i32* %v2_10b04, align 4
  store i32 %v3_10b04, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_102c8

dec_label_pc_10b14:                               ; preds = %dec_label_pc_10170
  store i32 %.pre, i32* @r0, align 4
  %v1_10b1c = add i32 %v0_10b14, 92
  store i32 %v1_10b1c, i32* @r1, align 4
  store i32 292, i32* @r2, align 4
  %v3_10b24 = call i32 @function_123d0(i32 %.pre, i32 %v1_10b1c, i32 292)
  store i32 %v3_10b24, i32* %r0.global-to-local, align 4
  %v0_10b28 = load i32, i32* @r6, align 4
  %v1_10b28 = add i32 %v0_10b28, 24
  %v2_10b28 = inttoptr i32 %v1_10b28 to i32*
  %v3_10b28 = load i32, i32* %v2_10b28, align 4
  store i32 %v3_10b28, i32* %r3.global-to-local, align 4
  %v1_10b2c = add i32 %v3_10b28, -64
  store i32 %v1_10b2c, i32* %ip.global-to-local, align 4
  store i32 %v1_10b2c, i32* %v2_10b28, align 4
  br label %dec_label_pc_10180

dec_label_pc_10b38:                               ; preds = %dec_label_pc_10a44
  store i32 %v0_10a74, i32* @r0, align 4
  %v0_10b3c = call i32 @function_f330()
  store i32 %v0_10b3c, i32* %r0.global-to-local, align 4
  %v0_10b40 = load i32, i32* @r6, align 4
  %v1_10b40 = add i32 %v0_10b40, 24
  %v2_10b40 = inttoptr i32 %v1_10b40 to i32*
  %v3_10b40 = load i32, i32* %v2_10b40, align 4
  store i32 %v3_10b40, i32* %ip.global-to-local, align 4
  %v0_10b44 = load i32, i32* @r4, align 4
  store i32 %v0_10b44, i32* @r7, align 4
  br label %dec_label_pc_10750

dec_label_pc_10b4c:                               ; preds = %dec_label_pc_10084, %dec_label_pc_1003c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10b50

dec_label_pc_10b50:                               ; preds = %dec_label_pc_100ac, %dec_label_pc_10b4c
  %v0_10b58 = phi i32 [ 0, %dec_label_pc_10b4c ], [ %v0_1008c, %dec_label_pc_100ac ]
  %v0_10b50 = load i32, i32* @r6, align 4
  %v1_10b50 = add i32 %v0_10b50, 4
  %v2_10b50 = inttoptr i32 %v1_10b50 to i32*
  %v3_10b50 = load i32, i32* %v2_10b50, align 4
  store i32 %v3_10b50, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10b58 = inttoptr i32 %v0_10b50 to i32*
  store i32 %v0_10b58, i32* %v2_10b58, align 4
  %v0_10b5c = load i32, i32* %ip.global-to-local, align 4
  %v1_10b5c = load i32, i32* @r6, align 4
  %v2_10b5c = add i32 %v1_10b5c, 24
  %v3_10b5c = inttoptr i32 %v2_10b5c to i32*
  store i32 %v0_10b5c, i32* %v3_10b5c, align 4
  %v0_ff78.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ff78

dec_label_pc_10b64:                               ; preds = %thread-pre-split95
  %v0_10b6c = load i32, i32* @r6, align 4
  %v1_10b6c = add i32 %v0_10b6c, 12
  %v2_10b6c = inttoptr i32 %v1_10b6c to i32*
  %v3_10b6c = load i32, i32* %v2_10b6c, align 4
  br label %dec_label_pc_10168.backedge

dec_label_pc_10b74:                               ; preds = %dec_label_pc_fffc
  %v0_10b74 = load i32, i32* @r6, align 4
  %v1_10b74 = add i32 %v0_10b74, 4
  %v2_10b74 = inttoptr i32 %v1_10b74 to i32*
  %v3_10b74 = load i32, i32* %v2_10b74, align 4
  store i32 %v3_10b74, i32* %r0.global-to-local, align 4
  %v1_10b78 = call i32 @function_11da0(i32 %v3_10b74)
  store i32 %v1_10b78, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10b80 = load i32, i32* @r5, align 4
  %v1_10b80 = load i32, i32* @r6, align 4
  %v2_10b80 = add i32 %v1_10b80, 12
  %v3_10b80 = inttoptr i32 %v2_10b80 to i32*
  store i32 %v0_10b80, i32* %v3_10b80, align 4
  %v0_10b84 = load i32, i32* %r4.global-to-local, align 4
  %v1_10b84 = load i32, i32* @r6, align 4
  %v2_10b84 = add i32 %v1_10b84, 4
  %v3_10b84 = inttoptr i32 %v2_10b84 to i32*
  store i32 %v0_10b84, i32* %v3_10b84, align 4
  %v0_10b88 = load i32, i32* @r5, align 4
  %v1_10b88 = trunc i32 %v0_10b88 to i8
  %v2_10b88 = load i32, i32* @r6, align 4
  %v3_10b88 = add i32 %v2_10b88, 384
  %v4_10b88 = inttoptr i32 %v3_10b88 to i8*
  store i8 %v1_10b88, i8* %v4_10b88, align 1
  br label %dec_label_pc_ff9c

dec_label_pc_10b90:                               ; preds = %dec_label_pc_10124
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10b94 = call i32 @function_10d1c(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10b9c = call i32 @function_10d1c(i32 32)
  store i32 %v1_10b9c, i32* %r0.global-to-local, align 4
  %v0_10ba0 = load i32, i32* @r6, align 4
  %v1_10ba0 = add i32 %v0_10ba0, 12
  %v2_10ba0 = inttoptr i32 %v1_10ba0 to i32*
  %v3_10ba0 = load i32, i32* %v2_10ba0, align 4
  br label %dec_label_pc_10168.backedge

dec_label_pc_10168.backedge.thread:               ; preds = %dec_label_pc_10448, %dec_label_pc_104fc, %dec_label_pc_10774, %dec_label_pc_10828, %dec_label_pc_108dc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10170

dec_label_pc_10168.backedge.thread491:            ; preds = %dec_label_pc_10474, %dec_label_pc_10594, %dec_label_pc_10908, %dec_label_pc_107a0, %dec_label_pc_10854, %dec_label_pc_10490, %dec_label_pc_105b0, %dec_label_pc_107bc, %dec_label_pc_10870, %dec_label_pc_10924
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10170

dec_label_pc_10168.backedge:                      ; preds = %dec_label_pc_10b90, %dec_label_pc_10b64
  %storemerge494 = phi i32 [ %v3_10b6c, %dec_label_pc_10b64 ], [ %v3_10ba0, %dec_label_pc_10b90 ]
  %v0_10168.be = phi i32 [ %v3_10b6c, %dec_label_pc_10b64 ], [ %v3_10ba0, %dec_label_pc_10b90 ]
  %v0_10170148 = phi i32 [ %v0_10b6c, %dec_label_pc_10b64 ], [ %v0_10ba0, %dec_label_pc_10b90 ]
  store i32 %storemerge494, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10168 = icmp eq i32 %v0_10168.be, 0
  store i1 %v2_10168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10168, label %dec_label_pc_ff9c, label %dec_label_pc_10170

dec_label_pc_10ba8:                               ; preds = %dec_label_pc_1070c
  store i32 2, i32* @r6, align 4
  %v1_10bac = add i32 %v2_10728, 4
  %v2_10bac = inttoptr i32 %v1_10bac to i32*
  %v3_10bac = load i32, i32* %v2_10bac, align 4
  store i32 %v3_10bac, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_10bb8 = call i32 @function_eb48()
  store i32 %v0_10bb8, i32* %r0.global-to-local, align 4
  %v0_10bbc = load i32, i32* @r8, align 4
  %v1_10bbc = inttoptr i32 %v0_10bbc to i8*
  %v2_10bbc = load i8, i8* %v1_10bbc, align 1
  %v3_10bbc = zext i8 %v2_10bbc to i32
  store i32 %v3_10bbc, i32* %r1.global-to-local, align 4
  %v2_10bc0 = call i32 @function_11b28(i32 %v0_10bb8, i32 %v3_10bbc)
  store i32 %v2_10bc0, i32* %r0.global-to-local, align 4
  %v0_10bc4 = load i32, i32* @r4, align 4
  %v2_10bc4 = and i32 %v2_10bc0, 1073741824
  %v3_10bc4 = icmp ne i32 %v2_10bc4, 0
  store i1 %v3_10bc4, i1* %cpsr_c.global-to-local, align 1
  %v4_10bc4 = mul i32 %v2_10bc0, 4
  %v5_10bc4 = add i32 %v0_10bc4, %v4_10bc4
  %v6_10bc4 = inttoptr i32 %v5_10bc4 to i32*
  %v7_10bc4 = load i32, i32* %v6_10bc4, align 4
  store i32 %v7_10bc4, i32* %r3.global-to-local, align 4
  %v0_10bc8 = load i32, i32* @sl, align 4
  store i32 %v0_10bc8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10bd4 = inttoptr i32 %v0_10bc8 to i32*
  %v3_10bd4 = call i32 @function_10cf0(i32 4, i32* %v2_10bd4)
  %v4_10bd4 = inttoptr i32 %v3_10bd4 to i8*
  store i32 %v3_10bd4, i32* %r0.global-to-local, align 4
  %v2_10bd8 = add i32 %v3_10bd4, 1
  %v3_10bd8 = inttoptr i32 %v2_10bd8 to i8*
  %v4_10bd8 = load i8, i8* %v3_10bd8, align 1
  %v5_10bd8 = zext i8 %v4_10bd8 to i32
  store i32 %v5_10bd8, i32* %r2.global-to-local, align 4
  %v3_10bdc = load i8, i8* %v4_10bd4, align 1
  %v4_10bdc = zext i8 %v3_10bdc to i32
  %v4_10be0 = mul nuw nsw i32 %v5_10bd8, 256
  %v5_10be0 = or i32 %v4_10bdc, %v4_10be0
  store i32 %v5_10be0, i32* %r3.global-to-local, align 4
  %v1_10be4 = and i32 %v4_10bdc, 128
  %v2_10be4 = icmp ne i32 %v1_10be4, 0
  store i1 %v2_10be4, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10bd8, i32* %r1.global-to-local, align 4
  %v0_10be8 = load i32, i32* @r8, align 4
  store i32 %v0_10be8, i32* %r0.global-to-local, align 4
  %v6_10bf4 = call i32 @function_edac(i32 %v0_10be8)
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10bfc = call i32 @function_10d1c(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c04 = call i32 @function_10d1c(i32 4)
  %v0_10c0c = load i32, i32* @r5, align 4
  store i32 %v0_10c0c, i32* %r0.global-to-local, align 4
  store i32 %v2_10c10, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10c18 = call i32 @function_12518(i32 %v0_10c0c, %sockaddr* %v3_10c18, i32 16)
  store i32 %v4_10c18, i32* %r0.global-to-local, align 4
  %v3_10c1c = icmp eq i32 %v4_10c18, -1
  store i1 %v3_10c1c, i1* %cpsr_c.global-to-local, align 1
  %v8_10c1c = icmp eq i32 %v4_10c18, -1
  store i1 %v8_10c1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c1c, label %dec_label_pc_10c24, label %dec_label_pc_10c34

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10ba8
  %v0_10c24 = load i32, i32* @r5, align 4
  store i32 %v0_10c24, i32* %r0.global-to-local, align 4
  %v1_10c28 = call i32 @function_11da0(i32 %v0_10c24)
  %v0_10c2c = load i32, i32* @sl, align 4
  store i32 %v0_10c2c, i32* %r0.global-to-local, align 4
  %v1_10c30 = call i32 @function_13144(i32 %v0_10c2c)
  store i32 %v1_10c30, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10c34

dec_label_pc_10c34:                               ; preds = %dec_label_pc_10ba8, %dec_label_pc_10c24
  store i32 %v2_100d8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c44 = load i32, i32* @r5, align 4
  store i32 %v0_10c44, i32* %r0.global-to-local, align 4
  %v0_10c48 = load i32, i32* @sl, align 4
  store i32 %v0_10c48, i32* %stack_var_-56, align 4
  %v6_10c4c = call i32 @function_1262c(i32 %v0_10c44, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_105d0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c60 = load i32, i32* @r5, align 4
  store i32 %v0_10c60, i32* %r0.global-to-local, align 4
  %v5_10c64 = call i32 @function_1262c(i32 %v0_10c60, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10c6c = load i32, i32* @r6, align 4
  store i32 %v0_10c6c, i32* %r2.global-to-local, align 4
  store i32 %v2_10c70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c78 = load i32, i32* @r5, align 4
  store i32 %v0_10c78, i32* %r0.global-to-local, align 4
  %v5_10c7c = call i32 @function_1262c(i32 %v0_10c78, i32* nonnull %stack_var_-38, i32 %v0_10c6c, i32 16384)
  %v0_10c80 = load i32, i32* @fp, align 4
  %v1_10c80 = add i32 %v0_10c80, 12
  store i32 %v1_10c80, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c8c = load i32, i32* @r5, align 4
  store i32 %v0_10c8c, i32* %r0.global-to-local, align 4
  %v4_10c90 = inttoptr i32 %v1_10c80 to i32*
  %v5_10c90 = call i32 @function_1262c(i32 %v0_10c8c, i32* %v4_10c90, i32 1, i32 16384)
  store i32 %v5_10c90, i32* %r0.global-to-local, align 4
  %v0_10c94 = load i32, i32* @fp, align 4
  %v1_10c94 = inttoptr i32 %v0_10c94 to i32*
  %v2_10c94 = load i32, i32* %v1_10c94, align 4
  store i32 %v2_10c94, i32* %r1.global-to-local, align 4
  %v1_10c98 = add i32 %v0_10c94, 12
  %v2_10c98 = inttoptr i32 %v1_10c98 to i8*
  %v3_10c98 = load i8, i8* %v2_10c98, align 1
  %v4_10c98 = zext i8 %v3_10c98 to i32
  store i32 %v4_10c98, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10ca0 = load i32, i32* @r5, align 4
  store i32 %v0_10ca0, i32* %r0.global-to-local, align 4
  %v4_10ca4 = inttoptr i32 %v2_10c94 to i32*
  %v5_10ca4 = call i32 @function_1262c(i32 %v0_10ca0, i32* %v4_10ca4, i32 %v4_10c98, i32 16384)
  %v0_10ca8 = load i32, i32* @fp, align 4
  %v1_10ca8 = add i32 %v0_10ca8, 13
  store i32 %v1_10ca8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cb4 = load i32, i32* @r5, align 4
  store i32 %v0_10cb4, i32* %r0.global-to-local, align 4
  %v4_10cb8 = inttoptr i32 %v1_10ca8 to i32*
  %v5_10cb8 = call i32 @function_1262c(i32 %v0_10cb4, i32* %v4_10cb8, i32 1, i32 16384)
  %v0_10cbc = load i32, i32* @r5, align 4
  store i32 %v0_10cbc, i32* %r0.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @fp, align 4
  %v1_10cc0 = add i32 %v0_10cc0, 13
  %v2_10cc0 = inttoptr i32 %v1_10cc0 to i8*
  %v3_10cc0 = load i8, i8* %v2_10cc0, align 1
  %v4_10cc0 = zext i8 %v3_10cc0 to i32
  store i32 %v4_10cc0, i32* %r2.global-to-local, align 4
  %v1_10cc4 = add i32 %v0_10cc0, 4
  %v2_10cc4 = inttoptr i32 %v1_10cc4 to i32*
  %v3_10cc4 = load i32, i32* %v2_10cc4, align 4
  store i32 %v3_10cc4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10ccc = inttoptr i32 %v3_10cc4 to i32*
  %v5_10ccc = call i32 @function_1262c(i32 %v0_10cbc, i32* %v4_10ccc, i32 %v4_10cc0, i32 16384)
  %v0_10cd0 = load i32, i32* @r5, align 4
  store i32 %v0_10cd0, i32* %r0.global-to-local, align 4
  %v1_10cd4 = call i32 @function_11da0(i32 %v0_10cd0)
  store i32 %v1_10cd4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10cd8

dec_label_pc_10cd8:                               ; preds = %dec_label_pc_106f0, %dec_label_pc_10c34
  %v0_10cd8 = load i32, i32* @sl, align 4
  store i32 %v0_10cd8, i32* %r0.global-to-local, align 4
  %v1_10cdc = call i32 @function_13144(i32 %v0_10cd8)
  store i32 %v1_10cdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10ce0

dec_label_pc_10ce0:                               ; preds = %dec_label_pc_10a90, %dec_label_pc_10cd8
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_10188, align 4
  br label %dec_label_pc_10aac

; uselistorder directives
  uselistorder i32 %v4_10bdc, { 1, 0 }
  uselistorder i32 %v5_10bd8, { 1, 0, 2 }
  uselistorder i32 %v2_10bc0, { 1, 0, 2 }
  uselistorder i32 %v3_10ba0, { 1, 0 }
  uselistorder i32 %v3_10b6c, { 1, 0 }
  uselistorder i32 %v3_10b04, { 1, 0 }
  uselistorder i1 %v1_10ad4, { 1, 0 }
  uselistorder i32 %v1_10abc, { 2, 1, 0 }
  uselistorder i32 %v1_10ab8, { 1, 0 }
  uselistorder i32 %v0_10a74, { 1, 0, 2 }
  uselistorder i32 %v1_10a5c, { 2, 1, 0 }
  uselistorder i32 %v0_10a38, { 0, 2, 1 }
  uselistorder i1 %v0_10a28, { 1, 0 }
  uselistorder i32 %v4_10a1c, { 1, 0, 2 }
  uselistorder i32 %v0_109b4, { 1, 2, 0 }
  uselistorder i1 %v7_10928, { 1, 0 }
  uselistorder i32 %v1_10924, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_1091c, { 1, 0 }
  uselistorder i8 %v3_10914, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10924, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10900, { 1, 0 }
  uselistorder i1 %v7_108f8, { 1, 0 }
  uselistorder i1 %v7_108f0, { 1, 0 }
  uselistorder i1 %v7_10874, { 1, 0 }
  uselistorder i32 %v1_10870, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10868, { 1, 0 }
  uselistorder i8 %v3_10860, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10870, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1084c, { 1, 0 }
  uselistorder i1 %v7_10844, { 1, 0 }
  uselistorder i1 %v7_1083c, { 1, 0 }
  uselistorder i1 %v7_107c0, { 1, 0 }
  uselistorder i32 %v1_107bc, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_107b4, { 1, 0 }
  uselistorder i8 %v3_107ac, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_107bc, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10798, { 1, 0 }
  uselistorder i1 %v7_10790, { 1, 0 }
  uselistorder i1 %v7_10788, { 1, 0 }
  uselistorder i32 %v0_10764, { 1, 2, 0 }
  uselistorder i32 %v2_10750, { 1, 0 }
  uselistorder i32 %v1_10750, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10750, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_10700, { 1, 0 }
  uselistorder i32 %v3_106fc, { 1, 0, 2, 3 }
  uselistorder i1 %v2_106e8, { 1, 0 }
  uselistorder i32 %.387, { 1, 0 }
  uselistorder i1 %v7_106d0, { 1, 0 }
  uselistorder i32 %v0_106cc, { 2, 1, 0, 3 }
  uselistorder i32 %v4_106ac, { 1, 0, 2 }
  uselistorder i32 %v4_106a8, { 1, 0, 2 }
  uselistorder i1 %v7_10698, { 1, 0 }
  uselistorder i32 %v0_10698, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_105b4, { 1, 0 }
  uselistorder i32 %v1_105b0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_105a8, { 1, 0 }
  uselistorder i8 %v3_105a0, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_105b0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1058c, { 1, 0 }
  uselistorder i1 %v7_10584, { 1, 0 }
  uselistorder i1 %v7_1057c, { 1, 0 }
  uselistorder i1 %v7_10494, { 1, 0 }
  uselistorder i32 %v1_10490, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10488, { 1, 0 }
  uselistorder i8 %v3_10480, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10490, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1046c, { 1, 0 }
  uselistorder i1 %v7_10464, { 1, 0 }
  uselistorder i1 %v7_1045c, { 1, 0 }
  uselistorder i32 %v0_10404, { 2, 1, 0 }
  uselistorder i1 %v7_103f4, { 1, 0 }
  uselistorder i1 %v8_103e8, { 1, 0 }
  uselistorder i8 %v3_103e0, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_103f0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_103cc, { 1, 0 }
  uselistorder i1 %v7_103c4, { 1, 0 }
  uselistorder i32 %v0_1036c, { 2, 1, 0 }
  uselistorder i1 %v7_10354, { 1, 0 }
  uselistorder i1 %v8_10348, { 1, 0 }
  uselistorder i8 %v3_10340, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10350, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1032c, { 1, 0 }
  uselistorder i1 %v7_10324, { 1, 0 }
  uselistorder i1 %v7_1031c, { 1, 0 }
  uselistorder i32 %v0_102f8.pre, { 0, 2, 1 }
  uselistorder i32 %v1_102e0, { 1, 0 }
  uselistorder i32 %v1_102dc, { 1, 0 }
  uselistorder i32 %v1_102d4, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_102d0, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_102d0, { 0, 2, 1 }
  uselistorder i1 %v7_10278, { 1, 0 }
  uselistorder i1 %v2_10264, { 1, 0, 2 }
  uselistorder i1 %v2_1024c, { 1, 0, 2 }
  uselistorder i32 %v1_1026c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_10240, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_10268, { 1, 0 }
  uselistorder i32 %v2_10270, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_101e8, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_101c4, { 1, 2, 3, 0 }
  uselistorder i32 %v3_101c0, { 1, 0 }
  uselistorder i32 %v5_101a4, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_10190, { 1, 0, 2 }
  uselistorder i32 %v3_1018c, { 1, 0, 2 }
  uselistorder i32 %v0_10b14, { 1, 0, 2 }
  uselistorder i32 %v0_1015c, { 1, 0, 2 }
  uselistorder i1 %v7_1013c, { 1, 0 }
  uselistorder i1 %v7_10114, { 1, 0 }
  uselistorder i32 %v0_1008c, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_1006c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_10060, { 1, 0, 2, 3 }
  uselistorder i32 %v1_ffec, { 2, 1, 0 }
  uselistorder i32 %v3_ffe8, { 1, 0 }
  uselistorder i1 %v7_ffd0, { 1, 0 }
  uselistorder i32 %v3_ffcc, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v1_ffa0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_ff8c, { 2, 1, 0 }
  uselistorder i32 %v3_ff88, { 1, 0 }
  uselistorder i32 %v0_ff8c, { 1, 0 }
  uselistorder i32 %v2_105d0, { 1, 2, 3, 0 }
  uselistorder i32 %v2_100d8, { 4, 8, 5, 6, 3, 2, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_109a8, { 1, 2, 0 }
  uselistorder i32 %v2_10230, { 0, 2, 1 }
  uselistorder i32* %v2_10188, { 1, 0, 2 }
  uselistorder i32 %v2_ff20, { 1, 0 }
  uselistorder i32 %v1_ff20, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ff20, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_fef0, { 2, 1, 0 }
  uselistorder i32 %v1_feec, { 1, 0 }
  uselistorder i32 %v2_febc, { 1, 0 }
  uselistorder i32 %v0_febc, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_feb4, { 1, 0 }
  uselistorder i32 %v3_fe9c, { 3, 5, 2, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_fe6c, { 0, 3, 1, 2 }
  uselistorder i1 %v2_fe6c, { 1, 2, 0 }
  uselistorder i32 %v2_fe64, { 0, 3, 4, 5, 2, 1 }
  uselistorder i8 %stack_var_-1876.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1880.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8* %stack_var_-1884.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1872.3, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1868.1, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %v1_fe3c, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %stack_var_-1876.1, { 1, 0 }
  uselistorder i32 %stack_var_-1880.1, { 1, 0 }
  uselistorder i8* %stack_var_-1884.1, { 1, 0 }
  uselistorder i32 %stack_var_-1872.2, { 1, 0 }
  uselistorder i32 %stack_var_-1868.0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_fe30, { 1, 0 }
  uselistorder i32 %v1_fe30, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_fe30, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_fe20, { 1, 0 }
  uselistorder i32 %v3_fe08, { 1, 0, 2 }
  uselistorder i32 %storemerge250, { 1, 0, 2 }
  uselistorder i32 %v3_fd84, { 1, 0 }
  uselistorder i32 %v1_fd70, { 1, 0 }
  uselistorder i32 %v1_fd58, { 1, 2, 0 }
  uselistorder i32 %v0_fd64, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fd24, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v2_fd18, { 2, 1, 0 }
  uselistorder i32 %v1_fcf4, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_fccc, { 1, 0 }
  uselistorder i32 %v4_fc6c, { 2, 3, 0, 1, 5, 4, 6 }
  uselistorder i32 %v1_fbd4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_faf0, { 1, 0 }
  uselistorder i32 %v3_fae8, { 2, 0, 1, 3 }
  uselistorder i32 %v4_facc, { 1, 0 }
  uselistorder i1 %v2_fa1c, { 1, 0 }
  uselistorder i1 %v2_fa08, { 1, 0 }
  uselistorder i1 %v2_f9f4, { 1, 0 }
  uselistorder i32 %.386, { 2, 1, 0 }
  uselistorder i1 %v7_f9d0, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_f9b8, { 1, 0 }
  uselistorder i1 %v3_f99c, { 1, 0, 2 }
  uselistorder i1 %v2_f988, { 1, 0 }
  uselistorder i1 %v2_f964, { 1, 0 }
  uselistorder i32 %v1_f914, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f900, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f8fc, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_f8ec, { 1, 0 }
  uselistorder i32 %v0_f8dc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f8cc, { 1, 0 }
  uselistorder i8 %stack_var_-1876.0, { 1, 0 }
  uselistorder i32 %v0_fc60, { 5, 2, 3, 6, 0, 1, 4, 7 }
  uselistorder i8* %stack_var_-1884.0, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f7a0, { 1, 0 }
  uselistorder i32 %v0_f790, { 2, 0, 1, 3 }
  uselistorder i32 %v3_f760, { 1, 0 }
  uselistorder i32 %v4_f74c, { 2, 0, 1 }
  uselistorder i32 %v0_f734, { 0, 2, 1 }
  uselistorder i32 %v0_f6dc, { 4, 2, 0, 3, 1 }
  uselistorder i1 %v7_f680, { 1, 0 }
  uselistorder i32 %v3_f678, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_f660, { 0, 2, 1 }
  uselistorder i32 %v1_f654, { 1, 0, 2 }
  uselistorder i32 %v0_f648, { 1, 0 }
  uselistorder i32 %v0_f614, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %storemerge253, { 1, 0 }
  uselistorder i32 %v0_f5b0, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 3, 5, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 5, 13, 7, 14, 8, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp263, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 6, 5, 7 }
  uselistorder i32* %r5.global-to-local, { 3, 1, 2, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 4, 3 }
  uselistorder i32* %r3.global-to-local, { 66, 12, 13, 14, 15, 16, 17, 18, 19, 20, 67, 48, 68, 69, 21, 22, 23, 24, 38, 49, 50, 51, 52, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 25, 98, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 61, 62, 63, 45, 46, 47, 53, 54, 55, 56, 57, 58, 59, 60, 70, 71, 72, 73, 74, 75, 64, 65, 76, 77, 79, 78, 80, 81, 82, 83, 84, 86, 88, 87, 85, 89, 91, 92, 93, 99, 94, 95, 96, 97, 100, 147, 148, 101, 149, 150, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 131, 134, 133, 90, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146 }
  uselistorder i32* %r2.global-to-local, { 47, 9, 10, 11, 12, 13, 14, 15, 16, 17, 24, 37, 18, 33, 38, 0, 1, 2, 3, 5, 4, 6, 8, 7, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 34, 36, 35, 42, 44, 43, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54, 45, 46, 55, 56, 57, 58, 59, 61, 63, 62, 128, 60, 64, 65, 66, 67, 71, 68, 69, 70, 72, 73, 76, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 93, 94, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 }
  uselistorder i32* %r1.global-to-local, { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 46, 38, 39, 34, 35, 1, 2, 3, 4, 5, 6, 7, 8, 9, 63, 64, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 40, 41, 0, 47, 48, 49, 50, 51, 42, 43, 44, 45, 52, 53, 54, 56, 55, 57, 58, 59, 60, 65, 61, 62, 77, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 100, 102, 103 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 33, 32, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 123, 124, 125, 141, 140, 54, 142, 117, 119, 118, 143, 145, 144, 56, 55, 57, 99, 98, 101, 100, 102, 103, 120, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 126, 59, 58, 60, 62, 61, 63, 64, 66, 65, 67, 69, 68, 70, 72, 71, 73, 74, 75, 76, 77, 78, 80, 79, 82, 81, 84, 83, 85, 86, 87, 89, 88, 90, 92, 91, 94, 93, 95, 96, 97, 105, 104, 107, 106, 111, 108, 109, 110, 128, 127, 130, 129, 113, 112, 114, 115, 116, 122, 121, 148, 146, 132, 131, 133, 135, 134, 137, 136, 138, 139, 157, 205, 147, 150, 149, 151, 152, 154, 153, 155, 159, 156, 158, 160, 162, 164, 161, 163, 166, 165, 168, 167, 169, 171, 170, 172, 173, 174, 175, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 192, 195, 194, 196, 200, 197, 198, 199, 201, 202, 203, 204 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 6, 22, 23, 7, 14, 0, 2, 1, 4, 3, 5, 18, 8, 9, 10, 11, 12, 13, 17, 19, 15, 16, 24, 25, 26, 27, 28, 29, 46, 32, 30, 31, 33, 53, 34, 35, 36, 37, 51, 52, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 113, 102, 218, 98, 104, 103, 105, 106, 107, 28, 29, 56, 57, 58, 75, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 94, 30, 31, 32, 209, 34, 35, 36, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 47, 48, 53, 54, 49, 50, 51, 52, 55, 59, 60, 64, 65, 61, 62, 63, 66, 96, 67, 72, 73, 68, 69, 70, 71, 74, 95, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 210, 108, 109, 110, 111, 112, 211, 97, 33, 99, 100, 101, 114, 116, 115, 117, 118, 120, 122, 121, 212, 119, 123, 124, 125, 126, 127, 128, 133, 129, 130, 131, 132, 213, 214, 215, 216, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 208, 175, 176, 207, 177, 178, 222, 179, 180, 181, 182, 183, 184, 221, 185, 186, 187, 188, 189, 220, 190, 191, 192, 219, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 217, 206 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 110, 216, 215, 96, 100, 101, 102, 103, 104, 30, 57, 58, 59, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 92, 31, 32, 33, 206, 34, 35, 36, 37, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 60, 61, 65, 66, 62, 63, 64, 67, 94, 68, 73, 74, 69, 70, 71, 72, 75, 93, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 207, 105, 106, 107, 108, 109, 208, 95, 205, 97, 98, 99, 111, 113, 112, 114, 115, 117, 119, 118, 209, 116, 120, 121, 122, 123, 124, 129, 125, 126, 127, 128, 210, 211, 212, 130, 213, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 204, 168, 169, 221, 170, 171, 220, 172, 173, 174, 175, 176, 177, 219, 178, 179, 180, 181, 182, 218, 183, 184, 185, 217, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 214, 203 }
  uselistorder i32 (i32)* @function_edac, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 49, 50, 51, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 46, 47, 48, 52, 2, 53, 54, 55 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_146c8.203 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_146c8.203, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_1262c, { 6, 7, 8, 9, 10, 11, 12, 19, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 31, 30 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_10d1c, { 45, 44, 35, 34, 39, 48, 47, 46, 43, 42, 41, 40, 38, 37, 36, 33, 32, 14, 31, 30, 29, 49, 28, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 13, 12 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11560, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10cf0, { 3, 9, 0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 33, 12, 13, 14, 15, 16, 37, 38, 39, 40, 41, 42, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 34 }
  uselistorder i32 (i32)* @function_10dd4, { 27, 36, 35, 34, 33, 32, 31, 30, 29, 28, 25, 26, 9, 24, 23, 22, 21, 20, 5, 4, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 7, 6, 8 }
  uselistorder i8* bitcast (i8** @global_var_1cdb4.137 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1cdb5.138, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1cdb4.137 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11fc0, { 2, 0, 1 }
  uselistorder i32 384, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_f330, { 3, 2, 1, 0 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_12658, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32 16384, { 33, 56, 34, 57, 35, 58, 36, 59, 37, 60, 38, 61, 13, 62, 12, 69, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 63, 7, 64, 8, 65, 9, 66, 31, 67, 32, 68, 29, 71, 30, 72, 28, 70, 39, 73, 10, 74, 11, 75, 14, 83, 40, 84, 42, 76, 16, 77, 43, 78, 44, 79, 45, 80, 15, 81, 41, 82, 17, 85, 18, 86, 19, 87, 46, 47, 20, 88, 21, 89, 23, 90, 22, 91, 25, 92, 24, 93, 48, 49, 26, 94, 27, 95 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11bf4, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1cd98.192, { 3, 0, 2, 1 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_14668.172 to i32), { 0, 5, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 (i32, i32, i32)* @function_f404, { 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_146d0.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_146cc.164 to i32), { 0, 7, 1, 8, 2, 9, 3, 10, 4, 11, 5, 12, 6, 13 }
  uselistorder i8* @global_var_1cda9.160, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1cd9c.151 to i32), { 2, 1, 3, 0, 5, 4, 6, 7 }
  uselistorder i8* @global_var_1cda8.152, { 1, 0 }
  uselistorder i8** @global_var_1cd88.147, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1cd88.147 to i32), { 0, 1, 7, 6, 2, 5, 4, 3 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 36, 3, 37, 25, 26, 4, 38, 19, 27, 39, 40, 5, 6, 41, 20, 7, 42, 28, 21, 22, 29, 30, 31, 43, 44, 45, 8, 46, 9, 10, 32, 33, 34, 47, 48, 49, 11, 50, 12, 13, 51, 52, 14, 53, 15, 54, 55, 23, 56, 57, 16, 58, 59, 24, 60, 61, 17 }
  uselistorder i32 ()* @function_eb48, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 20, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 5, 4, 3, 2, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 0, 1, 2, 8, 11, 5, 12, 3, 13, 14 }
  uselistorder i32* @global_var_1ce20.145, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 355, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* @global_var_1ce1c.143, { 1, 2, 3, 0, 4 }
  uselistorder i32 356, { 4, 5, 0, 6, 1, 7, 9, 2, 10, 3, 11, 8 }
  uselistorder i32 388, { 2, 1, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1cdb8.131, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_eba0, { 1, 0 }
  uselistorder i32* @global_var_1ce00.50, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_11754, { 2, 1, 0 }
  uselistorder i32* @global_var_1ce24.129, { 0, 2, 1 }
  uselistorder i32 ()* @function_11dcc, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 1, 2, 3, 4, 5, 6, 7, 8, 86, 87, 88, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 33, 34, 35, 36, 37, 38 }
  uselistorder i32* @sb, { 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 74, 75, 76, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_10ce0, { 1, 0 }
  uselistorder label %dec_label_pc_10cd8, { 1, 0 }
  uselistorder label %dec_label_pc_10c34, { 1, 0 }
  uselistorder label %dec_label_pc_10168.backedge.thread491, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_10168.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10b50, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb381, { 1, 0 }
  uselistorder label %dec_label_pc_10aac, { 1, 0 }
  uselistorder label %thread-pre-split95, { 1, 0 }
  uselistorder label %dec_label_pc_109f0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10924, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10910, { 1, 0 }
  uselistorder label %dec_label_pc_10870, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1085c, { 1, 0 }
  uselistorder label %dec_label_pc_107bc, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_107a8, { 1, 0 }
  uselistorder label %dec_label_pc_10750, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10734, { 1, 2, 0 }
  uselistorder label %dec_label_pc_105b0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1059c, { 1, 0 }
  uselistorder label %dec_label_pc_10490, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1047c, { 1, 0 }
  uselistorder label %dec_label_pc_103f0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_103dc, { 1, 0 }
  uselistorder label %dec_label_pc_1036c, { 1, 0 }
  uselistorder label %dec_label_pc_10350, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1033c, { 1, 0 }
  uselistorder label %dec_label_pc_102f8, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_102e8, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb354, { 2, 1, 0 }
  uselistorder label %bb351, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10248, { 1, 0 }
  uselistorder label %dec_label_pc_10248.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_101d0, { 1, 0 }
  uselistorder label %bb348, { 1, 0 }
  uselistorder label %dec_label_pc_10180, { 1, 0 }
  uselistorder label %dec_label_pc_10170, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_10170.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_10164.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_100c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ff9c, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_ff78, { 1, 0 }
  uselistorder label %bb343, { 1, 0 }
  uselistorder label %dec_label_pc_fe9c, { 1, 0 }
  uselistorder label %dec_label_pc_fe94, { 1, 0 }
  uselistorder label %bb341, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_fdbc.dec_label_pc_fdbc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fda0.dec_label_pc_fda0_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fd98, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fd58, { 1, 0 }
  uselistorder label %dec_label_pc_fbf4, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fbe8, { 1, 0 }
  uselistorder label %.thread64, { 2, 1, 0 }
  uselistorder label %.thread63, { 2, 1, 0 }
  uselistorder label %dec_label_pc_fa54, { 1, 0 }
  uselistorder label %dec_label_pc_fa48, { 1, 0 }
  uselistorder label %dec_label_pc_fa3c, { 1, 0 }
  uselistorder label %dec_label_pc_fa30, { 1, 0 }
  uselistorder label %dec_label_pc_fa24, { 1, 0 }
  uselistorder label %dec_label_pc_fa10, { 1, 0 }
  uselistorder label %dec_label_pc_f9fc, { 1, 0 }
  uselistorder label %dec_label_pc_f9e8, { 1, 0 }
  uselistorder label %dec_label_pc_f9c8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9a4, { 1, 0 }
  uselistorder label %dec_label_pc_f998, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f974, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f950, { 1, 0 }
  uselistorder label %bb303, { 1, 0 }
  uselistorder label %dec_label_pc_f8fc, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f6dc, { 1, 0 }
}

define i32 @function_10cf0(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10cf0:
  store i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32* @ip, align 4
  %v3_10cf4 = mul i32 %arg1, 8
  %v2_10cf8 = add i32 %v3_10cf4, ptrtoint (i32* @global_var_1ce2c.209 to i32)
  %v2_10cfc = icmp eq i32* %arg2, null
  br i1 %v2_10cfc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10cf0
  %v3_10d0811 = inttoptr i32 %v2_10cf8 to i32*
  %v4_10d0812 = load i32, i32* %v3_10d0811, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10cf0
  %v2_10d00 = add i32 %v3_10cf4, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 5)
  %v3_10d00 = inttoptr i32 %v2_10d00 to i8*
  %v4_10d00 = load i8, i8* %v3_10d00, align 1
  %v5_10d00 = zext i8 %v4_10d00 to i32
  store i32 %v5_10d00, i32* @r2, align 4
  %v2_10d04 = add i32 %v3_10cf4, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 4)
  %v3_10d04 = inttoptr i32 %v2_10d04 to i8*
  %v4_10d04 = load i8, i8* %v3_10d04, align 4
  %v5_10d04 = zext i8 %v4_10d04 to i32
  %v3_10d08 = inttoptr i32 %v2_10cf8 to i32*
  %v4_10d08 = load i32, i32* %v3_10d08, align 4
  %v5_10d0c = mul nuw nsw i32 %v5_10d00, 256
  %v6_10d0c = or i32 %v5_10d04, %v5_10d0c
  store i32 %v6_10d0c, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10d08714 = phi i32 [ %v4_10d0812, %.thread ], [ %v4_10d08, %bb ]
  ret i32 %v4_10d08714

; uselistorder directives
  uselistorder i32 %v2_10cf8, { 1, 0 }
  uselistorder i32 %v3_10cf4, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10d1c(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d1c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10d1c = mul i32 %arg1, 8
  %v3_10d20 = load i32, i32* @r4, align 4
  store i32 %v3_10d20, i32* %stack_var_-20, align 4
  %v3_10d30 = and i32 %v3_10d1c, 2040
  %v2_10d34 = add i32 %v3_10d30, ptrtoint (i32* @global_var_1ce2c.209 to i32)
  store i32 %v2_10d34, i32* @lr, align 4
  %v1_10d3c = add i32 %v3_10d30, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 4)
  store i32 %v1_10d3c, i32* %r7.global-to-local, align 4
  %v2_10d40 = load i32, i32* @global_var_1cbfc.212, align 4
  store i32 %v2_10d40, i32* @r2, align 4
  %v2_10d44 = inttoptr i32 %v1_10d3c to i8*
  %v3_10d44 = load i8, i8* %v2_10d44, align 4
  %v4_10d44 = zext i8 %v3_10d44 to i32
  store i32 %v4_10d44, i32* @r1, align 4
  %v1_10d48 = add i32 %v3_10d30, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 5)
  %v2_10d48 = inttoptr i32 %v1_10d48 to i8*
  %v3_10d48 = load i8, i8* %v2_10d48, align 1
  %v4_10d48 = zext i8 %v3_10d48 to i32
  %v3_10d4c = udiv i32 %v2_10d40, 256
  %v4_10d50 = mul nuw nsw i32 %v4_10d48, 256
  %v5_10d50 = or i32 %v4_10d50, %v4_10d44
  %v7_10d50 = icmp eq i32 %v5_10d50, 0
  store i1 %v7_10d50, i1* @cpsr_z, align 1
  %v3_10d54 = udiv i32 %v2_10d40, 65536
  %v1_10d58 = urem i32 %v3_10d4c, 256
  store i32 %v1_10d58, i32* %r6.global-to-local, align 4
  %v1_10d5c = urem i32 %v3_10d54, 256
  store i32 %v1_10d5c, i32* %r5.global-to-local, align 4
  %v3_10d60 = udiv i32 %v2_10d40, 16777216
  store i32 %v3_10d60, i32* %r4.global-to-local, align 4
  %v1_10d64 = urem i32 %v2_10d40, 256
  br i1 %v7_10d50, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10d1c
  store i32 %v3_10d20, i32* @r4, align 4
  ret i32 %v1_10d64

bb8:                                              ; preds = %dec_label_pc_10d1c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_10d70

dec_label_pc_10d70:                               ; preds = %dec_label_pc_10d70, %bb8
  %v2_10d7c = phi i32 [ %v1_10db8, %dec_label_pc_10d70 ], [ 0, %bb8 ]
  %v0_10d70 = phi i32 [ %v0_10db0, %dec_label_pc_10d70 ], [ %v2_10d34, %bb8 ]
  %v1_10d70 = inttoptr i32 %v0_10d70 to i32*
  %v2_10d70 = load i32, i32* %v1_10d70, align 4
  %v2_10d74 = add i32 %v2_10d70, %v2_10d7c
  %v3_10d74 = inttoptr i32 %v2_10d74 to i8*
  %v4_10d74 = load i8, i8* %v3_10d74, align 1
  %v6_10d74 = zext i8 %v4_10d74 to i32
  %v2_10d78 = xor i32 %v6_10d74, %v1_10d64
  %v1_10d7c = trunc i32 %v2_10d78 to i8
  store i8 %v1_10d7c, i8* %v3_10d74, align 1
  %v0_10d80 = load i32, i32* @lr, align 4
  %v1_10d80 = inttoptr i32 %v0_10d80 to i32*
  %v2_10d80 = load i32, i32* %v1_10d80, align 4
  %v0_10d84 = load i32, i32* @ip, align 4
  %v2_10d84 = add i32 %v0_10d84, %v2_10d80
  %v3_10d84 = inttoptr i32 %v2_10d84 to i8*
  %v4_10d84 = load i8, i8* %v3_10d84, align 1
  %v6_10d84 = zext i8 %v4_10d84 to i32
  %v0_10d88 = load i32, i32* %r6.global-to-local, align 4
  %v2_10d88 = xor i32 %v0_10d88, %v6_10d84
  %v1_10d8c = trunc i32 %v2_10d88 to i8
  store i8 %v1_10d8c, i8* %v3_10d84, align 1
  %v0_10d90 = load i32, i32* @lr, align 4
  %v1_10d90 = inttoptr i32 %v0_10d90 to i32*
  %v2_10d90 = load i32, i32* %v1_10d90, align 4
  %v0_10d94 = load i32, i32* @ip, align 4
  %v2_10d94 = add i32 %v0_10d94, %v2_10d90
  %v3_10d94 = inttoptr i32 %v2_10d94 to i8*
  %v4_10d94 = load i8, i8* %v3_10d94, align 1
  %v6_10d94 = zext i8 %v4_10d94 to i32
  %v0_10d98 = load i32, i32* %r5.global-to-local, align 4
  %v2_10d98 = xor i32 %v0_10d98, %v6_10d94
  %v1_10d9c = trunc i32 %v2_10d98 to i8
  store i8 %v1_10d9c, i8* %v3_10d94, align 1
  %v0_10da0 = load i32, i32* @lr, align 4
  %v1_10da0 = inttoptr i32 %v0_10da0 to i32*
  %v2_10da0 = load i32, i32* %v1_10da0, align 4
  store i32 %v2_10da0, i32* @r1, align 4
  %v0_10da4 = load i32, i32* @ip, align 4
  %v2_10da4 = add i32 %v0_10da4, %v2_10da0
  %v3_10da4 = inttoptr i32 %v2_10da4 to i8*
  %v4_10da4 = load i8, i8* %v3_10da4, align 1
  %v6_10da4 = zext i8 %v4_10da4 to i32
  %v0_10da8 = load i32, i32* %r4.global-to-local, align 4
  %v2_10da8 = xor i32 %v0_10da8, %v6_10da4
  %v1_10dac = trunc i32 %v2_10da8 to i8
  store i8 %v1_10dac, i8* %v3_10da4, align 1
  %v0_10db0 = load i32, i32* @lr, align 4
  %v1_10db0 = add i32 %v0_10db0, 4
  %v2_10db0 = inttoptr i32 %v1_10db0 to i8*
  %v3_10db0 = load i8, i8* %v2_10db0, align 1
  %v4_10db0 = zext i8 %v3_10db0 to i32
  %v0_10db4 = load i32, i32* %r7.global-to-local, align 4
  %v1_10db4 = add i32 %v0_10db4, 1
  %v2_10db4 = inttoptr i32 %v1_10db4 to i8*
  %v3_10db4 = load i8, i8* %v2_10db4, align 1
  %v4_10db4 = zext i8 %v3_10db4 to i32
  %v0_10db8 = load i32, i32* @ip, align 4
  %v1_10db8 = add i32 %v0_10db8, 1
  store i32 %v1_10db8, i32* @ip, align 4
  %v4_10dbc = mul nuw nsw i32 %v4_10db4, 256
  %v5_10dbc = or i32 %v4_10dbc, %v4_10db0
  store i32 %v5_10dbc, i32* @r2, align 4
  %v9_10dc0 = icmp eq i32 %v5_10dbc, %v1_10db8
  store i1 %v9_10dc0, i1* @cpsr_z, align 1
  %v8_10dc4 = icmp sgt i32 %v5_10dbc, %v1_10db8
  br i1 %v8_10dc4, label %dec_label_pc_10d70, label %dec_label_pc_10dc8

dec_label_pc_10dc8:                               ; preds = %dec_label_pc_10d70
  %v2_10dc8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10dc8, i32* @r4, align 4
  ret i32 %v1_10d64

; uselistorder directives
  uselistorder i32 %v1_10db8, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10db0, { 1, 0 }
  uselistorder i32 %v1_10d64, { 0, 2, 1 }
  uselistorder i32 %v2_10d40, { 3, 0, 1, 2, 4 }
}

define i32 @function_10dd4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10dd4:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10dd4 = mul i32 %arg1, 8
  %v3_10dd8 = load i32, i32* @r4, align 4
  store i32 %v3_10dd8, i32* %stack_var_-20, align 4
  %v3_10de8 = and i32 %v3_10dd4, 2040
  %v2_10dec = add i32 %v3_10de8, ptrtoint (i32* @global_var_1ce2c.209 to i32)
  store i32 %v2_10dec, i32* @lr, align 4
  %v1_10df4 = add i32 %v3_10de8, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 4)
  store i32 %v1_10df4, i32* %r7.global-to-local, align 4
  %v2_10df8 = load i32, i32* @global_var_1cbfc.212, align 4
  store i32 %v2_10df8, i32* @r2, align 4
  %v2_10dfc = inttoptr i32 %v1_10df4 to i8*
  %v3_10dfc = load i8, i8* %v2_10dfc, align 4
  %v4_10dfc = zext i8 %v3_10dfc to i32
  %v1_10e00 = add i32 %v3_10de8, add (i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32 5)
  %v2_10e00 = inttoptr i32 %v1_10e00 to i8*
  %v3_10e00 = load i8, i8* %v2_10e00, align 1
  %v4_10e00 = zext i8 %v3_10e00 to i32
  %v3_10e04 = udiv i32 %v2_10df8, 256
  %v4_10e08 = mul nuw nsw i32 %v4_10e00, 256
  %v5_10e08 = or i32 %v4_10e08, %v4_10dfc
  %v7_10e08 = icmp eq i32 %v5_10e08, 0
  %v3_10e0c = udiv i32 %v2_10df8, 65536
  %v1_10e10 = urem i32 %v3_10e04, 256
  store i32 %v1_10e10, i32* %r6.global-to-local, align 4
  %v1_10e14 = urem i32 %v3_10e0c, 256
  store i32 %v1_10e14, i32* %r5.global-to-local, align 4
  %v3_10e18 = udiv i32 %v2_10df8, 16777216
  store i32 %v3_10e18, i32* %r4.global-to-local, align 4
  %v1_10e1c = urem i32 %v2_10df8, 256
  br i1 %v7_10e08, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10dd4
  store i32 %v3_10dd8, i32* @r4, align 4
  ret i32 %v1_10e1c

bb8:                                              ; preds = %dec_label_pc_10dd4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10e28

dec_label_pc_10e28:                               ; preds = %dec_label_pc_10e28, %bb8
  %v2_10e34 = phi i32 [ %v1_10e70, %dec_label_pc_10e28 ], [ 0, %bb8 ]
  %v0_10e28 = phi i32 [ %v0_10e68, %dec_label_pc_10e28 ], [ %v2_10dec, %bb8 ]
  %v1_10e28 = inttoptr i32 %v0_10e28 to i32*
  %v2_10e28 = load i32, i32* %v1_10e28, align 4
  %v2_10e2c = add i32 %v2_10e28, %v2_10e34
  %v3_10e2c = inttoptr i32 %v2_10e2c to i8*
  %v4_10e2c = load i8, i8* %v3_10e2c, align 1
  %v6_10e2c = zext i8 %v4_10e2c to i32
  %v2_10e30 = xor i32 %v6_10e2c, %v1_10e1c
  %v1_10e34 = trunc i32 %v2_10e30 to i8
  store i8 %v1_10e34, i8* %v3_10e2c, align 1
  %v0_10e38 = load i32, i32* @lr, align 4
  %v1_10e38 = inttoptr i32 %v0_10e38 to i32*
  %v2_10e38 = load i32, i32* %v1_10e38, align 4
  %v0_10e3c = load i32, i32* %ip.global-to-local, align 4
  %v2_10e3c = add i32 %v0_10e3c, %v2_10e38
  %v3_10e3c = inttoptr i32 %v2_10e3c to i8*
  %v4_10e3c = load i8, i8* %v3_10e3c, align 1
  %v6_10e3c = zext i8 %v4_10e3c to i32
  %v0_10e40 = load i32, i32* %r6.global-to-local, align 4
  %v2_10e40 = xor i32 %v0_10e40, %v6_10e3c
  %v1_10e44 = trunc i32 %v2_10e40 to i8
  store i8 %v1_10e44, i8* %v3_10e3c, align 1
  %v0_10e48 = load i32, i32* @lr, align 4
  %v1_10e48 = inttoptr i32 %v0_10e48 to i32*
  %v2_10e48 = load i32, i32* %v1_10e48, align 4
  %v0_10e4c = load i32, i32* %ip.global-to-local, align 4
  %v2_10e4c = add i32 %v0_10e4c, %v2_10e48
  %v3_10e4c = inttoptr i32 %v2_10e4c to i8*
  %v4_10e4c = load i8, i8* %v3_10e4c, align 1
  %v6_10e4c = zext i8 %v4_10e4c to i32
  %v0_10e50 = load i32, i32* %r5.global-to-local, align 4
  %v2_10e50 = xor i32 %v0_10e50, %v6_10e4c
  %v1_10e54 = trunc i32 %v2_10e50 to i8
  store i8 %v1_10e54, i8* %v3_10e4c, align 1
  %v0_10e58 = load i32, i32* @lr, align 4
  %v1_10e58 = inttoptr i32 %v0_10e58 to i32*
  %v2_10e58 = load i32, i32* %v1_10e58, align 4
  %v0_10e5c = load i32, i32* %ip.global-to-local, align 4
  %v2_10e5c = add i32 %v0_10e5c, %v2_10e58
  %v3_10e5c = inttoptr i32 %v2_10e5c to i8*
  %v4_10e5c = load i8, i8* %v3_10e5c, align 1
  %v6_10e5c = zext i8 %v4_10e5c to i32
  %v0_10e60 = load i32, i32* %r4.global-to-local, align 4
  %v2_10e60 = xor i32 %v0_10e60, %v6_10e5c
  %v1_10e64 = trunc i32 %v2_10e60 to i8
  store i8 %v1_10e64, i8* %v3_10e5c, align 1
  %v0_10e68 = load i32, i32* @lr, align 4
  %v1_10e68 = add i32 %v0_10e68, 4
  %v2_10e68 = inttoptr i32 %v1_10e68 to i8*
  %v3_10e68 = load i8, i8* %v2_10e68, align 1
  %v4_10e68 = zext i8 %v3_10e68 to i32
  %v0_10e6c = load i32, i32* %r7.global-to-local, align 4
  %v1_10e6c = add i32 %v0_10e6c, 1
  %v2_10e6c = inttoptr i32 %v1_10e6c to i8*
  %v3_10e6c = load i8, i8* %v2_10e6c, align 1
  %v4_10e6c = zext i8 %v3_10e6c to i32
  %v0_10e70 = load i32, i32* %ip.global-to-local, align 4
  %v1_10e70 = add i32 %v0_10e70, 1
  store i32 %v1_10e70, i32* %ip.global-to-local, align 4
  %v4_10e74 = mul nuw nsw i32 %v4_10e6c, 256
  %v5_10e74 = or i32 %v4_10e74, %v4_10e68
  store i32 %v5_10e74, i32* @r2, align 4
  %v8_10e7c = icmp sgt i32 %v5_10e74, %v1_10e70
  br i1 %v8_10e7c, label %dec_label_pc_10e28, label %dec_label_pc_10e80

dec_label_pc_10e80:                               ; preds = %dec_label_pc_10e28
  %v2_10e80 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10e80, i32* @r4, align 4
  ret i32 %v1_10e1c

; uselistorder directives
  uselistorder i32 %v1_10e70, { 1, 2, 0 }
  uselistorder i32 %v0_10e68, { 1, 0 }
  uselistorder i32 %v1_10e1c, { 0, 2, 1 }
  uselistorder i32 %v2_10df8, { 3, 0, 1, 2, 4 }
}

define i32 @function_10e8c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10e8c:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10e8c = load i32, i32* @r4, align 4
  store i32 %v3_10e8c, i32* %stack_var_-36, align 4
  %v6_10e8c = load i32, i32* @r5, align 4
  %v9_10e8c = load i32, i32* @r6, align 4
  %v12_10e8c = load i32, i32* @r7, align 4
  %v1_10e94 = call i32 @function_12854(i32 2)
  store i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 2, i32* @r7, align 4
  store i32 %v1_10e94, i32* @r6, align 4
  %v3_10eb0 = call i32 @function_11518(i32 %v1_10e94, i32 ptrtoint (i32* @global_var_146e0.217 to i32), i32 2)
  %v0_10eb8 = load i32, i32* @r6, align 4
  store i32 %v0_10eb8, i32* @global_var_1ce34.218, align 4
  %v0_10ebc = load i32, i32* @r7, align 4
  %v1_10ebc = trunc i32 %v0_10ebc to i8
  store i8 %v1_10ebc, i8* bitcast (i32* @global_var_1ce38.219 to i8*), align 4
  %v0_10ec0 = load i32, i32* @r5, align 4
  %v1_10ec0 = trunc i32 %v0_10ec0 to i8
  store i8 %v1_10ec0, i8* bitcast (i32* @global_var_1ce39.220 to i8*), align 4
  %v1_10ec4 = call i32 @function_12854(i32 10)
  store i32 ptrtoint ([11 x i8]* @global_var_146e4.222 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_10ec4, i32* @r6, align 4
  %v4_10ed8 = call i32 @function_11518(i32 %v1_10ec4, i32 ptrtoint ([11 x i8]* @global_var_146e4.222 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1ce40.223 to i8*), align 4
  %v0_10ee8 = load i32, i32* @r6, align 4
  store i32 %v0_10ee8, i32* @global_var_1ce3c.224, align 4
  %v0_10eec = load i32, i32* @r5, align 4
  %v1_10eec = trunc i32 %v0_10eec to i8
  store i8 %v1_10eec, i8* bitcast (i32* @global_var_1ce41.225 to i8*), align 4
  %v1_10ef0 = call i32 @function_12854(i32 10)
  %v0_10ef4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10ef0, i32* @r6, align 4
  %v4_10f00 = call i32 @function_11518(i32 %v1_10ef0, i32 %v0_10ef4, i32 10)
  %v0_10f08 = load i32, i32* @r7, align 4
  store i8 10, i8* bitcast (i32* @global_var_1ce48.226 to i8*), align 4
  %v0_10f10 = load i32, i32* @r6, align 4
  store i32 %v0_10f10, i32* @global_var_1ce44.227, align 4
  %v0_10f14 = load i32, i32* @r5, align 4
  %v1_10f14 = trunc i32 %v0_10f14 to i8
  store i8 %v1_10f14, i8* bitcast (i32* @global_var_1ce49.228 to i8*), align 4
  %v1_10f18 = call i32 @function_12854(i32 %v0_10f08)
  %v0_10f1c = load i32, i32* @r7, align 4
  store i32 %v1_10f18, i32* @r6, align 4
  %v3_10f28 = call i32 @function_11518(i32 %v1_10f18, i32 ptrtoint (i32* @global_var_146f0.230 to i32), i32 %v0_10f1c)
  %v0_10f30 = load i32, i32* @r6, align 4
  store i32 %v0_10f30, i32* @global_var_1ce4c.231, align 4
  %v0_10f34 = load i32, i32* @r7, align 4
  %v1_10f34 = trunc i32 %v0_10f34 to i8
  store i8 %v1_10f34, i8* bitcast (i32* @global_var_1ce50.232 to i8*), align 4
  %v0_10f38 = load i32, i32* @r5, align 4
  %v1_10f38 = trunc i32 %v0_10f38 to i8
  store i8 %v1_10f38, i8* bitcast (i32* @global_var_1ce51.233 to i8*), align 4
  %v1_10f3c = call i32 @function_12854(i32 36)
  store i32 %v1_10f3c, i32* @r6, align 4
  %v4_10f4c = call i32 @function_11518(i32 %v1_10f3c, i32 ptrtoint ([37 x i8]* @global_var_146f4.235 to i32), i32 36)
  store i8 36, i8* bitcast (i32* @global_var_1ce58.236 to i8*), align 4
  %v0_10f5c = load i32, i32* @r6, align 4
  store i32 %v0_10f5c, i32* @global_var_1ce54.237, align 4
  %v0_10f60 = load i32, i32* @r5, align 4
  %v1_10f60 = trunc i32 %v0_10f60 to i8
  store i8 %v1_10f60, i8* bitcast (i32* @global_var_1ce59.238 to i8*), align 4
  %v1_10f64 = call i32 @function_12854(i32 6)
  store i32 %v1_10f64, i32* @r6, align 4
  %v4_10f74 = call i32 @function_11518(i32 %v1_10f64, i32 ptrtoint ([7 x i8]* @global_var_1471c.240 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1ce60.241 to i8*), align 4
  %v0_10f84 = load i32, i32* @r6, align 4
  store i32 %v0_10f84, i32* @global_var_1ce5c.242, align 4
  %v0_10f88 = load i32, i32* @r5, align 4
  %v1_10f88 = trunc i32 %v0_10f88 to i8
  store i8 %v1_10f88, i8* bitcast (i32* @global_var_1ce61.243 to i8*), align 4
  %v1_10f8c = call i32 @function_12854(i32 7)
  %v0_10f90 = load i32, i32* @r7, align 4
  %v1_10f90 = add i32 %v0_10f90, 5
  store i32 %v1_10f90, i32* @r7, align 4
  store i32 %v1_10f8c, i32* @r6, align 4
  %v4_10fa0 = call i32 @function_11518(i32 %v1_10f8c, i32 ptrtoint ([8 x i8]* @global_var_14724.245 to i32), i32 %v1_10f90)
  %v0_10fa4 = load i32, i32* @r7, align 4
  %v0_10fa8 = load i32, i32* @r6, align 4
  store i32 %v0_10fa8, i32* @global_var_1ce64.246, align 4
  %v1_10fac = trunc i32 %v0_10fa4 to i8
  store i8 %v1_10fac, i8* bitcast (i32* @global_var_1ce68.247 to i8*), align 4
  %v0_10fb0 = load i32, i32* @r5, align 4
  %v1_10fb0 = trunc i32 %v0_10fb0 to i8
  store i8 %v1_10fb0, i8* bitcast (i32* @global_var_1ce69.248 to i8*), align 4
  %v1_10fb4 = call i32 @function_12854(i32 %v0_10fa4)
  %v0_10fb8 = load i32, i32* @r7, align 4
  store i32 %v1_10fb4, i32* @r6, align 4
  %v4_10fc4 = call i32 @function_11518(i32 %v1_10fb4, i32 ptrtoint ([8 x i8]* @global_var_1472c.250 to i32), i32 %v0_10fb8)
  %v0_10fcc = load i32, i32* @r6, align 4
  store i32 %v0_10fcc, i32* @global_var_1ce6c.251, align 4
  %v0_10fd0 = load i32, i32* @r7, align 4
  %v1_10fd0 = trunc i32 %v0_10fd0 to i8
  store i8 %v1_10fd0, i8* bitcast (i32* @global_var_1ce70.252 to i8*), align 4
  %v0_10fd4 = load i32, i32* @r5, align 4
  %v1_10fd4 = trunc i32 %v0_10fd4 to i8
  store i8 %v1_10fd4, i8* bitcast (i32* @global_var_1ce71.253 to i8*), align 4
  %v1_10fd8 = call i32 @function_12854(i32 3)
  store i32 %v1_10fd8, i32* @r6, align 4
  %v4_10fe8 = call i32 @function_11518(i32 %v1_10fd8, i32 ptrtoint ([4 x i8]* @global_var_14734.255 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1ce78.256 to i8*), align 4
  %v0_10ff8 = load i32, i32* @r6, align 4
  store i32 %v0_10ff8, i32* @global_var_1ce74.257, align 4
  %v0_10ffc = load i32, i32* @r5, align 4
  %v1_10ffc = trunc i32 %v0_10ffc to i8
  store i8 %v1_10ffc, i8* bitcast (i32* @global_var_1ce79.258 to i8*), align 4
  %v1_11000 = call i32 @function_12854(i32 19)
  store i32 19, i32* %fp.global-to-local, align 4
  store i32 %v1_11000, i32* @r6, align 4
  %v3_11014 = call i32 @function_11518(i32 %v1_11000, i32 ptrtoint (i32* @global_var_14738.260 to i32), i32 19)
  %v0_1101c = load i32, i32* @r6, align 4
  store i32 %v0_1101c, i32* @global_var_1ce7c.261, align 4
  store i8 19, i8* bitcast (i32* @global_var_1ce80.262 to i8*), align 4
  %v0_11024 = load i32, i32* @r5, align 4
  %v1_11024 = trunc i32 %v0_11024 to i8
  store i8 %v1_11024, i8* bitcast (i32* @global_var_1ce81.263 to i8*), align 4
  %v1_11028 = call i32 @function_12854(i32 24)
  store i32 %v1_11028, i32* @r6, align 4
  %v3_11038 = call i32 @function_11518(i32 %v1_11028, i32 ptrtoint (i32* @global_var_1474c.265 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1ce88.266 to i8*), align 4
  %v0_11048 = load i32, i32* @r6, align 4
  store i32 %v0_11048, i32* @global_var_1ce84.267, align 4
  %v0_1104c = load i32, i32* @r5, align 4
  %v1_1104c = trunc i32 %v0_1104c to i8
  store i8 %v1_1104c, i8* bitcast (i32* @global_var_1ce89.268 to i8*), align 4
  %v1_11050 = call i32 @function_12854(i32 9)
  store i32 %v1_11050, i32* @r6, align 4
  %v4_11060 = call i32 @function_11518(i32 %v1_11050, i32 ptrtoint ([10 x i8]* @global_var_14768.270 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1ce90.271 to i8*), align 4
  %v0_11070 = load i32, i32* @r6, align 4
  store i32 %v0_11070, i32* @global_var_1ce8c.272, align 4
  %v0_11074 = load i32, i32* @r5, align 4
  %v1_11074 = trunc i32 %v0_11074 to i8
  store i8 %v1_11074, i8* bitcast (i32* @global_var_1ce91.273 to i8*), align 4
  %v1_11078 = call i32 @function_12854(i32 16)
  store i32 16, i32* %sb.global-to-local, align 4
  store i32 %v1_11078, i32* @r6, align 4
  %v4_1108c = call i32 @function_11518(i32 %v1_11078, i32 ptrtoint ([17 x i8]* @global_var_14774.275 to i32), i32 16)
  %v0_11094 = load i32, i32* @r6, align 4
  store i32 %v0_11094, i32* @global_var_1ce94.276, align 4
  store i8 16, i8* bitcast (i32* @global_var_1ce98.277 to i8*), align 4
  %v0_1109c = load i32, i32* @r5, align 4
  %v1_1109c = trunc i32 %v0_1109c to i8
  store i8 %v1_1109c, i8* bitcast (i32* @global_var_1ce99.278 to i8*), align 4
  %v1_110a0 = call i32 @function_12854(i32 22)
  store i32 %v1_110a0, i32* @r6, align 4
  %v4_110b0 = call i32 @function_11518(i32 %v1_110a0, i32 ptrtoint ([23 x i8]* @global_var_14788.280 to i32), i32 22)
  %v0_110b8 = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1cea0.281 to i8*), align 4
  %v0_110c0 = load i32, i32* @r6, align 4
  store i32 %v0_110c0, i32* @global_var_1ce9c.282, align 4
  %v0_110c4 = load i32, i32* @r5, align 4
  %v1_110c4 = trunc i32 %v0_110c4 to i8
  store i8 %v1_110c4, i8* bitcast (i32* @global_var_1cea1.283 to i8*), align 4
  %v1_110c8 = call i32 @function_12854(i32 %v0_110b8)
  %v0_110cc = load i32, i32* @r7, align 4
  store i32 %v1_110c8, i32* @r6, align 4
  %v4_110d8 = call i32 @function_11518(i32 %v1_110c8, i32 ptrtoint ([8 x i8]* @global_var_147a0.285 to i32), i32 %v0_110cc)
  %v0_110e0 = load i32, i32* @r6, align 4
  store i32 %v0_110e0, i32* @global_var_1cea4.286, align 4
  %v0_110e4 = load i32, i32* @r7, align 4
  %v1_110e4 = trunc i32 %v0_110e4 to i8
  store i8 %v1_110e4, i8* bitcast (i32* @global_var_1cea8.287 to i8*), align 4
  %v0_110e8 = load i32, i32* @r5, align 4
  %v1_110e8 = trunc i32 %v0_110e8 to i8
  store i8 %v1_110e8, i8* bitcast (i32* @global_var_1cea9.288 to i8*), align 4
  %v1_110ec = call i32 @function_12854(i32 5)
  store i32 %v1_110ec, i32* @r6, align 4
  %v4_110fc = call i32 @function_11518(i32 %v1_110ec, i32 ptrtoint ([6 x i8]* @global_var_147a8.290 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1ceb0.291 to i8*), align 4
  %v0_1110c = load i32, i32* @r6, align 4
  store i32 %v0_1110c, i32* @global_var_1ceac.292, align 4
  %v0_11110 = load i32, i32* @r5, align 4
  %v1_11110 = trunc i32 %v0_11110 to i8
  store i8 %v1_11110, i8* bitcast (i32* @global_var_1ceb1.293 to i8*), align 4
  %v1_11114 = call i32 @function_12854(i32 4)
  store i32 %v1_11114, i32* @r6, align 4
  %v4_11124 = call i32 @function_11518(i32 %v1_11114, i32 ptrtoint ([5 x i8]* @global_var_147b0.295 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1ceb8.296 to i8*), align 4
  %v0_11134 = load i32, i32* @r6, align 4
  store i32 %v0_11134, i32* @global_var_1ceb4.297, align 4
  %v0_11138 = load i32, i32* @r5, align 4
  %v1_11138 = trunc i32 %v0_11138 to i8
  store i8 %v1_11138, i8* bitcast (i32* @global_var_1ceb9.298 to i8*), align 4
  %v1_1113c = call i32 @function_12854(i32 6)
  store i32 %v1_1113c, i32* @r6, align 4
  %v4_1114c = call i32 @function_11518(i32 %v1_1113c, i32 ptrtoint ([7 x i8]* @global_var_147b8.300 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1cec0.301 to i8*), align 4
  %v0_1115c = load i32, i32* @r6, align 4
  store i32 %v0_1115c, i32* @global_var_1cebc.302, align 4
  %v0_11160 = load i32, i32* @r5, align 4
  %v1_11160 = trunc i32 %v0_11160 to i8
  store i8 %v1_11160, i8* bitcast (i32* @global_var_1cec1.303 to i8*), align 4
  %v1_11164 = call i32 @function_12854(i32 14)
  store i32 14, i32* %r8.global-to-local, align 4
  store i32 %v1_11164, i32* @r6, align 4
  %v4_11178 = call i32 @function_11518(i32 %v1_11164, i32 ptrtoint ([15 x i8]* @global_var_147c0.305 to i32), i32 14)
  %v0_11180 = load i32, i32* @r6, align 4
  store i32 %v0_11180, i32* @global_var_1cec4.306, align 4
  store i8 14, i8* bitcast (i32* @global_var_1cec8.307 to i8*), align 4
  %v0_11188 = load i32, i32* @r5, align 4
  %v1_11188 = trunc i32 %v0_11188 to i8
  store i8 %v1_11188, i8* bitcast (i32* @global_var_1cec9.308 to i8*), align 4
  %v1_1118c = call i32 @function_12854(i32 8)
  store i32 8, i32* %sl.global-to-local, align 4
  store i32 %v1_1118c, i32* @r6, align 4
  %v4_111a0 = call i32 @function_11518(i32 %v1_1118c, i32 ptrtoint ([9 x i8]* @global_var_147d0.310 to i32), i32 8)
  %v0_111a4 = load i32, i32* @r7, align 4
  %v0_111a8 = load i32, i32* @r6, align 4
  store i32 %v0_111a8, i32* @global_var_1cf3c.311, align 4
  store i8 8, i8* bitcast (i32* @global_var_1cf40.312 to i8*), align 4
  %v0_111b0 = load i32, i32* @r5, align 4
  %v1_111b0 = trunc i32 %v0_111b0 to i8
  store i8 %v1_111b0, i8* bitcast (i32* @global_var_1cf41.313 to i8*), align 4
  %v1_111b4 = call i32 @function_12854(i32 %v0_111a4)
  %v0_111b8 = load i32, i32* @r7, align 4
  store i32 %v1_111b4, i32* @r6, align 4
  %v4_111c4 = call i32 @function_11518(i32 %v1_111b4, i32 ptrtoint ([8 x i8]* @global_var_147dc.315 to i32), i32 %v0_111b8)
  %v0_111c8 = load i32, i32* %sb.global-to-local, align 4
  %v0_111cc = load i32, i32* @r6, align 4
  store i32 %v0_111cc, i32* @global_var_1cf44.316, align 4
  %v0_111d0 = load i32, i32* @r7, align 4
  %v1_111d0 = trunc i32 %v0_111d0 to i8
  store i8 %v1_111d0, i8* bitcast (i32* @global_var_1cf48.317 to i8*), align 4
  %v0_111d4 = load i32, i32* @r5, align 4
  %v1_111d4 = trunc i32 %v0_111d4 to i8
  store i8 %v1_111d4, i8* bitcast (i32* @global_var_1cf49.318 to i8*), align 4
  %v1_111d8 = call i32 @function_12854(i32 %v0_111c8)
  %v0_111dc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_111d8, i32* @r6, align 4
  %v4_111e8 = call i32 @function_11518(i32 %v1_111d8, i32 ptrtoint ([17 x i8]* @global_var_147e4.320 to i32), i32 %v0_111dc)
  %v0_111f0 = load i32, i32* @r6, align 4
  store i32 %v0_111f0, i32* @global_var_1cecc.321, align 4
  %v1_111f4 = trunc i32 %v0_111dc to i8
  store i8 %v1_111f4, i8* bitcast (i32* @global_var_1ced0.322 to i8*), align 4
  %v0_111f8 = load i32, i32* @r5, align 4
  %v1_111f8 = trunc i32 %v0_111f8 to i8
  store i8 %v1_111f8, i8* bitcast (i32* @global_var_1ced1.323 to i8*), align 4
  %v1_111fc = call i32 @function_12854(i32 23)
  %v0_11208 = load i32, i32* @r7, align 4
  %v1_11208 = load i32, i32* %sb.global-to-local, align 4
  %v2_11208 = add i32 %v1_11208, %v0_11208
  store i32 %v2_11208, i32* @r7, align 4
  store i32 %v1_111fc, i32* @r6, align 4
  %v4_11210 = call i32 @function_11518(i32 %v1_111fc, i32 ptrtoint ([24 x i8]* @global_var_147f8.325 to i32), i32 23)
  %v0_11214 = load i32, i32* %sl.global-to-local, align 4
  %v0_11218 = load i32, i32* @r6, align 4
  store i32 %v0_11218, i32* @global_var_1ced4.326, align 4
  %v0_1121c = load i32, i32* @r7, align 4
  %v1_1121c = trunc i32 %v0_1121c to i8
  store i8 %v1_1121c, i8* bitcast (i32* @global_var_1ced8.327 to i8*), align 4
  %v0_11220 = load i32, i32* @r5, align 4
  %v1_11220 = trunc i32 %v0_11220 to i8
  store i8 %v1_11220, i8* bitcast (i32* @global_var_1ced9.328 to i8*), align 4
  %v1_11224 = call i32 @function_12854(i32 %v0_11214)
  %v0_1122c = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_11224, i32* @r6, align 4
  %v4_11234 = call i32 @function_11518(i32 %v1_11224, i32 ptrtoint ([9 x i8]* @global_var_14810.330 to i32), i32 %v0_1122c)
  %v0_11238 = load i32, i32* %r8.global-to-local, align 4
  %v0_1123c = load i32, i32* @r6, align 4
  store i32 %v0_1123c, i32* @global_var_1cedc.331, align 4
  %v1_11240 = trunc i32 %v0_1122c to i8
  store i8 %v1_11240, i8* bitcast (i32* @global_var_1cee0.332 to i8*), align 4
  %v0_11244 = load i32, i32* @r5, align 4
  %v1_11244 = trunc i32 %v0_11244 to i8
  store i8 %v1_11244, i8* bitcast (i32* @global_var_1cee1.333 to i8*), align 4
  %v1_11248 = call i32 @function_12854(i32 %v0_11238)
  %v0_11250 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11248, i32* @r6, align 4
  %v4_11258 = call i32 @function_11518(i32 %v1_11248, i32 ptrtoint ([15 x i8]* @global_var_1481c.335 to i32), i32 %v0_11250)
  %v0_1125c = load i32, i32* %fp.global-to-local, align 4
  %v0_11260 = load i32, i32* @r6, align 4
  store i32 %v0_11260, i32* @global_var_1cee4.336, align 4
  %v1_11264 = trunc i32 %v0_11250 to i8
  store i8 %v1_11264, i8* bitcast (i32* @global_var_1cee8.337 to i8*), align 4
  %v0_11268 = load i32, i32* @r5, align 4
  %v1_11268 = trunc i32 %v0_11268 to i8
  store i8 %v1_11268, i8* bitcast (i32* @global_var_1cee9.338 to i8*), align 4
  %v1_1126c = call i32 @function_12854(i32 %v0_1125c)
  store i32 ptrtoint ([20 x i8]* @global_var_1482c.340 to i32), i32* %sb.global-to-local, align 4
  %v0_11274 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_1126c, i32* @r6, align 4
  %v4_11280 = call i32 @function_11518(i32 %v1_1126c, i32 ptrtoint ([20 x i8]* @global_var_1482c.340 to i32), i32 %v0_11274)
  %v0_11288 = load i32, i32* @r6, align 4
  store i32 %v0_11288, i32* @global_var_1ceec.341, align 4
  %v1_1128c = trunc i32 %v0_11274 to i8
  store i8 %v1_1128c, i8* bitcast (i32* @global_var_1cef0.342 to i8*), align 4
  %v0_11290 = load i32, i32* @r5, align 4
  %v1_11290 = trunc i32 %v0_11290 to i8
  store i8 %v1_11290, i8* bitcast (i32* @global_var_1cef1.343 to i8*), align 4
  %v1_11294 = call i32 @function_12854(i32 10)
  store i32 %v1_11294, i32* @r6, align 4
  %v4_112a4 = call i32 @function_11518(i32 %v1_11294, i32 ptrtoint ([11 x i8]* @global_var_14840.345 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1cf50.346 to i8*), align 4
  %v0_112b4 = load i32, i32* @r6, align 4
  store i32 %v0_112b4, i32* @global_var_1cf4c.347, align 4
  %v0_112b8 = load i32, i32* @r5, align 4
  %v1_112b8 = trunc i32 %v0_112b8 to i8
  store i8 %v1_112b8, i8* bitcast (i32* @global_var_1cf51.348 to i8*), align 4
  %v1_112bc = call i32 @function_12854(i32 21)
  store i32 %v1_112bc, i32* @r6, align 4
  %v3_112cc = call i32 @function_11518(i32 %v1_112bc, i32 ptrtoint (i32* @global_var_148a4.350 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1cef8.351 to i8*), align 4
  %v0_112dc = load i32, i32* @r6, align 4
  store i32 %v0_112dc, i32* @global_var_1cef4.352, align 4
  %v0_112e0 = load i32, i32* @r5, align 4
  %v1_112e0 = trunc i32 %v0_112e0 to i8
  store i8 %v1_112e0, i8* bitcast (i32* @global_var_1cef9.353 to i8*), align 4
  %v1_112e4 = call i32 @function_12854(i32 17)
  store i32 %v1_112e4, i32* @r6, align 4
  %v4_112f4 = call i32 @function_11518(i32 %v1_112e4, i32 ptrtoint ([18 x i8]* @global_var_1484c.355 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1cf00.356 to i8*), align 4
  %v0_11304 = load i32, i32* @r6, align 4
  store i32 %v0_11304, i32* @global_var_1cefc.357, align 4
  %v0_11308 = load i32, i32* @r5, align 4
  %v1_11308 = trunc i32 %v0_11308 to i8
  store i8 %v1_11308, i8* bitcast (i32* @global_var_1cf01.358 to i8*), align 4
  %v1_1130c = call i32 @function_12854(i32 12)
  store i32 %v1_1130c, i32* @r6, align 4
  %v4_1131c = call i32 @function_11518(i32 %v1_1130c, i32 ptrtoint ([13 x i8]* @global_var_14860.360 to i32), i32 12)
  %v0_11324 = load i32, i32* %r8.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1cf08.361 to i8*), align 4
  %v0_1132c = load i32, i32* @r6, align 4
  store i32 %v0_1132c, i32* @global_var_1cf04.362, align 4
  %v0_11330 = load i32, i32* @r5, align 4
  %v1_11330 = trunc i32 %v0_11330 to i8
  store i8 %v1_11330, i8* bitcast (i32* @global_var_1cf09.363 to i8*), align 4
  %v1_11334 = call i32 @function_12854(i32 %v0_11324)
  %v0_1133c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_11334, i32* @r6, align 4
  %v4_11344 = call i32 @function_11518(i32 %v1_11334, i32 ptrtoint ([15 x i8]* @global_var_1481c.335 to i32), i32 %v0_1133c)
  %v0_11348 = load i32, i32* %fp.global-to-local, align 4
  %v0_1134c = load i32, i32* @r6, align 4
  store i32 %v0_1134c, i32* @global_var_1cf0c.364, align 4
  %v1_11350 = trunc i32 %v0_1133c to i8
  store i8 %v1_11350, i8* bitcast (i32* @global_var_1cf10.365 to i8*), align 4
  %v0_11354 = load i32, i32* @r5, align 4
  %v1_11354 = trunc i32 %v0_11354 to i8
  store i8 %v1_11354, i8* bitcast (i32* @global_var_1cf11.366 to i8*), align 4
  %v1_11358 = call i32 @function_12854(i32 %v0_11348)
  %v0_1135c = load i32, i32* %sb.global-to-local, align 4
  %v0_11360 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_11358, i32* @r6, align 4
  %v4_11368 = call i32 @function_11518(i32 %v1_11358, i32 %v0_1135c, i32 %v0_11360)
  %v0_1136c = load i32, i32* %sl.global-to-local, align 4
  %v0_11370 = load i32, i32* @r6, align 4
  store i32 %v0_11370, i32* @global_var_1cf14.367, align 4
  %v1_11374 = trunc i32 %v0_11360 to i8
  store i8 %v1_11374, i8* bitcast (i32* @global_var_1cf18.368 to i8*), align 4
  %v0_11378 = load i32, i32* @r5, align 4
  %v1_11378 = trunc i32 %v0_11378 to i8
  store i8 %v1_11378, i8* bitcast (i32* @global_var_1cf19.369 to i8*), align 4
  %v1_1137c = call i32 @function_12854(i32 %v0_1136c)
  %v0_11384 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1137c, i32* @r6, align 4
  %v4_1138c = call i32 @function_11518(i32 %v1_1137c, i32 ptrtoint ([9 x i8]* @global_var_14870.371 to i32), i32 %v0_11384)
  %v0_11394 = load i32, i32* @r6, align 4
  store i32 %v0_11394, i32* @global_var_1cf1c.372, align 4
  %v1_11398 = trunc i32 %v0_11384 to i8
  store i8 %v1_11398, i8* bitcast (i32* @global_var_1cf20.373 to i8*), align 4
  %v0_1139c = load i32, i32* @r5, align 4
  %v1_1139c = trunc i32 %v0_1139c to i8
  store i8 %v1_1139c, i8* bitcast (i32* @global_var_1cf21.374 to i8*), align 4
  %v1_113a0 = call i32 @function_12854(i32 5)
  store i32 %v1_113a0, i32* @r6, align 4
  %v4_113b0 = call i32 @function_11518(i32 %v1_113a0, i32 ptrtoint ([6 x i8]* @global_var_1487c.376 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1cf28.377 to i8*), align 4
  %v0_113c0 = load i32, i32* @r6, align 4
  store i32 %v0_113c0, i32* @global_var_1cf24.378, align 4
  %v0_113c4 = load i32, i32* @r5, align 4
  %v1_113c4 = trunc i32 %v0_113c4 to i8
  store i8 %v1_113c4, i8* bitcast (i32* @global_var_1cf29.379 to i8*), align 4
  %v1_113c8 = call i32 @function_12854(i32 6)
  store i32 %v1_113c8, i32* @r6, align 4
  %v4_113d8 = call i32 @function_11518(i32 %v1_113c8, i32 ptrtoint ([7 x i8]* @global_var_14884.381 to i32), i32 6)
  %v0_113e0 = load i32, i32* @r7, align 4
  %v0_113e4 = load i32, i32* @r6, align 4
  store i32 %v0_113e4, i32* @global_var_1cf2c.382, align 4
  store i8 6, i8* bitcast (i32* @global_var_1cf30.383 to i8*), align 4
  %v0_113ec = load i32, i32* @r5, align 4
  %v1_113ec = trunc i32 %v0_113ec to i8
  store i8 %v1_113ec, i8* bitcast (i32* @global_var_1cf31.384 to i8*), align 4
  %v1_113f0 = call i32 @function_12854(i32 %v0_113e0)
  %v0_113f8 = load i32, i32* @r7, align 4
  %v4_11400 = call i32 @function_11518(i32 %v1_113f0, i32 ptrtoint ([24 x i8]* @global_var_1488c.386 to i32), i32 %v0_113f8)
  %v0_11404 = load i32, i32* @r5, align 4
  %v1_11404 = trunc i32 %v0_11404 to i8
  store i8 %v1_11404, i8* bitcast (i32* @global_var_1cf39.387 to i8*), align 4
  store i32 %v1_113f0, i32* @global_var_1cf34.388, align 4
  %v0_1140c = load i32, i32* @r7, align 4
  %v1_1140c = trunc i32 %v0_1140c to i8
  store i8 %v1_1140c, i8* bitcast (i32* @global_var_1cf38.389 to i8*), align 4
  %v2_11410 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11410, i32* @r4, align 4
  store i32 %v6_10e8c, i32* @r5, align 4
  store i32 %v9_10e8c, i32* @r6, align 4
  store i32 %v12_10e8c, i32* @r7, align 4
  ret i32 %v4_11400

; uselistorder directives
  uselistorder i32 %v1_1137c, { 1, 0 }
  uselistorder i32 %v1_11358, { 1, 0 }
  uselistorder i32 %v1_11334, { 1, 0 }
  uselistorder i32 %v1_1126c, { 1, 0 }
  uselistorder i32 %v1_11248, { 1, 0 }
  uselistorder i32 %v1_11224, { 1, 0 }
  uselistorder i32 %v1_111fc, { 1, 0 }
  uselistorder i32 %v1_111d8, { 1, 0 }
  uselistorder i32 %v1_111b4, { 1, 0 }
  uselistorder i32 %v1_1118c, { 1, 0 }
  uselistorder i32 %v1_11164, { 1, 0 }
  uselistorder i32 %v1_110c8, { 1, 0 }
  uselistorder i32 %v1_11078, { 1, 0 }
  uselistorder i32 %v1_11000, { 1, 0 }
  uselistorder i32 %v1_10fb4, { 1, 0 }
  uselistorder i32 %v1_10f8c, { 1, 0 }
  uselistorder i32 %v1_10f18, { 1, 0 }
  uselistorder i32 %v1_10ef0, { 1, 0 }
  uselistorder i32 %v1_10ec4, { 1, 0 }
  uselistorder i32 %v1_10e94, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i8 36, { 13, 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32)* @function_11518, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1ce2c.209 to i32), { 5, 0, 1, 2, 3, 4, 6 }
}

define i32 @function_1149c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1149c:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_114a0 = load i8, i8* %arg1, align 1
  %v4_114a0 = zext i8 %v3_114a0 to i32
  %v2_114a4 = icmp eq i8 %v3_114a0, 0
  br i1 %v2_114a4, label %dec_label_pc_114c0, label %bb

dec_label_pc_114c0:                               ; preds = %dec_label_pc_114b0, %dec_label_pc_1149c
  %merge = phi i32 [ %v4_114a0, %dec_label_pc_1149c ], [ %v1_114b0, %dec_label_pc_114b0 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_1149c
  br label %dec_label_pc_114b0

dec_label_pc_114b0:                               ; preds = %dec_label_pc_114b0, %bb
  %v0_114b0 = phi i32 [ %v1_114b0, %dec_label_pc_114b0 ], [ 0, %bb ]
  %v1_114b0 = add i32 %v0_114b0, 1
  %v2_114b4 = add i32 %v1_114b0, %tmp
  %v3_114b4 = inttoptr i32 %v2_114b4 to i8*
  %v4_114b4 = load i8, i8* %v3_114b4, align 1
  %v2_114b8 = icmp eq i8 %v4_114b4, 0
  br i1 %v2_114b8, label %dec_label_pc_114c0, label %dec_label_pc_114b0

; uselistorder directives
  uselistorder i32 %v1_114b0, { 1, 0, 2 }
}

define i32 @function_114c4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_114c4:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_114c4 = load i8, i8* %arg1, align 1
  %v3_114c4 = zext i8 %v2_114c4 to i32
  %v2_114c8 = icmp eq i8 %v2_114c4, 0
  br i1 %v2_114c8, label %dec_label_pc_1150c, label %dec_label_pc_114d0

dec_label_pc_114d0:                               ; preds = %dec_label_pc_114c4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_114d4

dec_label_pc_114d4:                               ; preds = %dec_label_pc_114d4, %dec_label_pc_114d0
  %v0_114d4 = phi i32 [ %v1_114d4, %dec_label_pc_114d4 ], [ 0, %dec_label_pc_114d0 ]
  %v1_114d4 = add i32 %v0_114d4, 1
  store i32 %v1_114d4, i32* %ip.global-to-local, align 4
  %v2_114d8 = add i32 %v1_114d4, %tmp
  %v3_114d8 = inttoptr i32 %v2_114d8 to i8*
  %v4_114d8 = load i8, i8* %v3_114d8, align 1
  %v2_114dc = icmp eq i8 %v4_114d8, 0
  br i1 %v2_114dc, label %dec_label_pc_114e4, label %dec_label_pc_114d4

dec_label_pc_114e4:                               ; preds = %dec_label_pc_114d4
  %v7_114e4 = icmp eq i32 %v0_114d4, -2
  br i1 %v7_114e4, label %dec_label_pc_11504, label %dec_label_pc_114f0.preheader

dec_label_pc_114f0.preheader:                     ; preds = %dec_label_pc_114e4, %dec_label_pc_1150c
  %storemerge = phi i32 [ %v3_114c4, %dec_label_pc_1150c ], [ %v1_114d4, %dec_label_pc_114e4 ]
  %v2_114fc.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_114f0

dec_label_pc_114f0:                               ; preds = %dec_label_pc_114f0.dec_label_pc_114f0_crit_edge, %dec_label_pc_114f0.preheader
  %v2_114fc = phi i32 [ %v5_114fc, %dec_label_pc_114f0.dec_label_pc_114f0_crit_edge ], [ %v2_114fc.pre, %dec_label_pc_114f0.preheader ]
  %v0_114f4 = phi i32 [ %v0_114f4.pre, %dec_label_pc_114f0.dec_label_pc_114f0_crit_edge ], [ %tmp, %dec_label_pc_114f0.preheader ]
  %v0_114f0 = phi i32 [ %v0_114f0.pre, %dec_label_pc_114f0.dec_label_pc_114f0_crit_edge ], [ %storemerge, %dec_label_pc_114f0.preheader ]
  %v1_114f0 = add i32 %v0_114f0, -1
  store i32 %v1_114f0, i32* @r2, align 4
  %v1_114f4 = inttoptr i32 %v0_114f4 to i8*
  %v2_114f4 = load i8, i8* %v1_114f4, align 1
  %v5_114f4 = add i32 %v0_114f4, 1
  store i32 %v5_114f4, i32* %r1.global-to-local, align 4
  %v3_114f8 = icmp eq i32 %v0_114f0, 0
  %v3_114fc = inttoptr i32 %v2_114fc to i8*
  store i8 %v2_114f4, i8* %v3_114fc, align 1
  %v4_114fc = load i32, i32* @r0, align 4
  %v5_114fc = add i32 %v4_114fc, 1
  store i32 %v5_114fc, i32* @r0, align 4
  br i1 %v3_114f8, label %dec_label_pc_11504.loopexit, label %dec_label_pc_114f0.dec_label_pc_114f0_crit_edge

dec_label_pc_114f0.dec_label_pc_114f0_crit_edge:  ; preds = %dec_label_pc_114f0
  %v0_114f0.pre = load i32, i32* @r2, align 4
  %v0_114f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_114f0

dec_label_pc_11504.loopexit:                      ; preds = %dec_label_pc_114f0
  %v0_11504.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11504

dec_label_pc_11504:                               ; preds = %dec_label_pc_11504.loopexit, %dec_label_pc_114e4
  %v0_11504 = phi i32 [ %v0_11504.pre, %dec_label_pc_11504.loopexit ], [ %v1_114d4, %dec_label_pc_114e4 ]
  ret i32 %v0_11504

dec_label_pc_1150c:                               ; preds = %dec_label_pc_114c4
  store i32 %v3_114c4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_114f0.preheader

; uselistorder directives
  uselistorder i32 %v5_114fc, { 1, 0 }
  uselistorder i32 %v0_114f4, { 1, 0 }
  uselistorder i32 %v1_114d4, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_114c4, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_114f0.preheader, { 1, 0 }
}

define i32 @function_11518(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11518:
  %ip.global-to-local = alloca i32, align 4
  %v2_11518 = icmp eq i32 %arg3, 0
  br i1 %v2_11518, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11524, %dec_label_pc_11518
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11518
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11524

dec_label_pc_11524:                               ; preds = %dec_label_pc_11524, %bb
  %v0_11524 = phi i32 [ %v1_1152c, %dec_label_pc_11524 ], [ 0, %bb ]
  %v2_11524 = add i32 %v0_11524, %arg2
  %v3_11524 = inttoptr i32 %v2_11524 to i8*
  %v4_11524 = load i8, i8* %v3_11524, align 1
  %v4_11528 = add i32 %v0_11524, %arg1
  %v5_11528 = inttoptr i32 %v4_11528 to i8*
  store i8 %v4_11524, i8* %v5_11528, align 1
  %v0_1152c = load i32, i32* %ip.global-to-local, align 4
  %v1_1152c = add i32 %v0_1152c, 1
  store i32 %v1_1152c, i32* %ip.global-to-local, align 4
  %v9_11530 = icmp eq i32 %v1_1152c, %arg3
  br i1 %v9_11530, label %.loopexit, label %dec_label_pc_11524

; uselistorder directives
  uselistorder i32 %v1_1152c, { 1, 2, 0 }
}

define i32 @function_1153c() local_unnamed_addr {
dec_label_pc_1153c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_1153c = load i32, i32* @r1, align 4
  %v2_1153c = icmp eq i32 %v0_1153c, 0
  br i1 %v2_1153c, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_1153c
  %v2_11540 = load i32, i32* @r0, align 4
  ret i32 %v2_11540

bb3:                                              ; preds = %dec_label_pc_1153c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge, %bb3
  %v2_1154c = phi i32 [ %v1_11550, %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge ], [ 0, %bb3 ]
  %v0_1154c.off0 = phi i8 [ %extract.t, %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge ], [ 0, %bb3 ]
  %v3_1154c = load i32, i32* @r0, align 4
  %v4_1154c = add i32 %v3_1154c, %v2_1154c
  %v5_1154c = inttoptr i32 %v4_1154c to i8*
  store i8 %v0_1154c.off0, i8* %v5_1154c, align 1
  %v0_11550 = load i32, i32* %r3.global-to-local, align 4
  %v1_11550 = add i32 %v0_11550, 1
  store i32 %v1_11550, i32* %r3.global-to-local, align 4
  %v1_11554 = load i32, i32* @r1, align 4
  %v9_11554 = icmp eq i32 %v1_11550, %v1_11554
  br i1 %v9_11554, label %dec_label_pc_1155c, label %dec_label_pc_1154c.dec_label_pc_1154c_crit_edge

dec_label_pc_1154c.dec_label_pc_1154c_crit_edge:  ; preds = %dec_label_pc_1154c
  %v0_1154c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_1154c.pre to i8
  br label %dec_label_pc_1154c

dec_label_pc_1155c:                               ; preds = %dec_label_pc_1154c
  %v1_1155c = load i32, i32* @r0, align 4
  ret i32 %v1_1155c

; uselistorder directives
  uselistorder i32 %v1_11550, { 1, 2, 0 }
}

define i32 @function_11560(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11560:
  %v7_11574 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11574, label %dec_label_pc_11578, label %dec_label_pc_11580

dec_label_pc_11578:                               ; preds = %dec_label_pc_11594, %dec_label_pc_11560, %dec_label_pc_11580
  ret i32 -1

dec_label_pc_11580:                               ; preds = %dec_label_pc_11560
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_11578, label %dec_label_pc_11588

dec_label_pc_11588:                               ; preds = %dec_label_pc_11580
  br label %dec_label_pc_115a0

dec_label_pc_11594:                               ; preds = %dec_label_pc_115b8, %dec_label_pc_115a0
  %v1_11594 = add i32 %v0_115c0, 1
  %v9_11598 = icmp eq i32 %v1_11594, %arg2
  br i1 %v9_11598, label %dec_label_pc_11578, label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_11594, %dec_label_pc_11588
  %v0_115c0 = phi i32 [ %v1_11594, %dec_label_pc_11594 ], [ 0, %dec_label_pc_11588 ]
  %v0_115ac = phi i32 [ %v1_115ac., %dec_label_pc_11594 ], [ 0, %dec_label_pc_11588 ]
  %v2_115a0 = add i32 %v0_115ac, %arg3
  %v3_115a0 = inttoptr i32 %v2_115a0 to i8*
  %v4_115a0 = load i8, i8* %v3_115a0, align 1
  %v2_115a4 = add i32 %v0_115c0, %arg1
  %v3_115a4 = inttoptr i32 %v2_115a4 to i8*
  %v4_115a4 = load i8, i8* %v3_115a4, align 1
  %v9_115a8 = icmp eq i8 %v4_115a4, %v4_115a0
  %v1_115ac = add i32 %v0_115ac, 1
  %v1_115ac. = select i1 %v9_115a8, i32 %v1_115ac, i32 0
  br i1 %v9_115a8, label %dec_label_pc_115b8, label %dec_label_pc_11594

dec_label_pc_115b8:                               ; preds = %dec_label_pc_115a0
  %v9_115b8 = icmp eq i32 %v1_115ac., %arg4
  br i1 %v9_115b8, label %dec_label_pc_115c0, label %dec_label_pc_11594

dec_label_pc_115c0:                               ; preds = %dec_label_pc_115b8
  %v1_115c0 = add i32 %v0_115c0, 1
  ret i32 %v1_115c0

; uselistorder directives
  uselistorder i1 %v9_115a8, { 1, 0 }
  uselistorder i32 %v0_115ac, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11578, { 0, 2, 1 }
}

define i32 @function_115c8(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_115c8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_115c8 = load i32, i32* @r4, align 4
  store i32 %v3_115c8, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_115d4

dec_label_pc_115d4:                               ; preds = %.thread, %dec_label_pc_115ec, %bb, %dec_label_pc_115c8
  %v0_115d4 = phi i32 [ %tmp, %dec_label_pc_115c8 ], [ %v5_115d4, %bb ], [ %v5_115d4, %dec_label_pc_115ec ], [ %v5_115d4, %.thread ]
  %v1_115d4 = inttoptr i32 %v0_115d4 to i8*
  %v2_115d4 = load i8, i8* %v1_115d4, align 1
  %v3_115d4 = zext i8 %v2_115d4 to i32
  %v5_115d4 = add i32 %v0_115d4, 1
  store i32 %v5_115d4, i32* %r5.global-to-local, align 4
  %v7_115dc = icmp eq i8 %v2_115d4, 9
  br i1 %v7_115dc, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_115d4
  store i32 %v3_115d4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115d4

bb:                                               ; preds = %dec_label_pc_115d4
  %v8_115e0 = icmp eq i8 %v2_115d4, 32
  store i32 %v3_115d4, i32* %r4.global-to-local, align 4
  br i1 %v8_115e0, label %dec_label_pc_115d4, label %dec_label_pc_115ec

dec_label_pc_115ec:                               ; preds = %bb
  %v7_115ec = icmp eq i8 %v2_115d4, 10
  br i1 %v7_115ec, label %dec_label_pc_115d4, label %dec_label_pc_115f4

dec_label_pc_115f4:                               ; preds = %dec_label_pc_115ec
  %v7_115f4 = icmp eq i8 %v2_115d4, 45
  br i1 %v7_115f4, label %dec_label_pc_116d4, label %dec_label_pc_115fc

dec_label_pc_115fc:                               ; preds = %dec_label_pc_115f4
  %v7_115fc = icmp eq i8 %v2_115d4, 43
  br i1 %v7_115fc, label %bb48, label %dec_label_pc_1160c

bb48:                                             ; preds = %dec_label_pc_115fc
  %v2_11600 = inttoptr i32 %v5_115d4 to i8*
  %v3_11600 = load i8, i8* %v2_11600, align 1
  %v4_11600 = zext i8 %v3_11600 to i32
  store i32 %v4_11600, i32* %r4.global-to-local, align 4
  %v6_11600 = add i32 %v0_115d4, 2
  store i32 %v6_11600, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1160c

dec_label_pc_1160c:                               ; preds = %bb48, %dec_label_pc_115fc, %dec_label_pc_116d4
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_116d4 ], [ 2147483647, %dec_label_pc_115fc ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_116d4 ], [ 0, %dec_label_pc_115fc ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_11614 = call i32 @function_11b28(i32 %storemerge1, i32 %arg2)
  %v0_11618 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11618, i32* @r1, align 4
  store i32 %v2_11614, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_11624 = call i32 @function_11a18()
  store i32 %v0_11624, i32* @lr, align 4
  %v0_11634.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11634

dec_label_pc_11634:                               ; preds = %.thread8, %dec_label_pc_1160c
  %v2_116b011 = phi i32 [ %v1_116cc26, %.thread8 ], [ 0, %dec_label_pc_1160c ]
  %v1_1168c = phi i32 [ %v0_116c024, %.thread8 ], [ 0, %dec_label_pc_1160c ]
  %v1_11674 = phi i32 [ %v3_116b8, %.thread8 ], [ %v0_11634.pre, %dec_label_pc_1160c ]
  %v1_11634 = urem i32 %v1_11674, 256
  %v1_11638 = add nsw i32 %v1_11634, -48
  %v1_11640 = add nsw i32 %v1_11634, -97
  %v1_11644 = add i32 %v1_11674, -48
  %v1_11648 = add nsw i32 %v1_11634, -65
  %tmp71 = icmp ult i32 %v1_11638, 10
  br i1 %tmp71, label %dec_label_pc_11678, label %dec_label_pc_11650

dec_label_pc_11650:                               ; preds = %dec_label_pc_11634
  %v2_11650 = icmp ugt i32 %v1_11648, 24
  %v7_11650 = icmp eq i32 %v1_11648, 25
  %v2_11654 = xor i1 %v7_11650, true
  %v3_11654 = and i1 %v2_11650, %v2_11654
  br i1 %v3_11654, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_11650
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_11650, %bb49
  %v0_1166820 = phi i32 [ %v1_11644, %dec_label_pc_11650 ], [ 0, %bb49 ]
  %v2_11658 = xor i1 %v2_11650, true
  %v3_11658 = or i1 %v7_11650, %v2_11658
  br i1 %v3_11658, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_11668 = phi i32 [ %v0_1166820, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_11654, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_11660 = icmp ugt i32 %v1_11640, 24
  %v11_11660 = icmp eq i32 %v1_11640, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_11664 = phi i1 [ %v7_11650, %bb52 ], [ %v11_11660, %bb53 ]
  %v0_11664 = phi i1 [ %v2_11650, %bb52 ], [ %v6_11660, %bb53 ]
  %v2_11664 = xor i1 %v1_11664, true
  %v3_11664 = and i1 %v0_11664, %v2_11664
  br i1 %v3_11664, label %dec_label_pc_116c0, label %dec_label_pc_11668

dec_label_pc_11668:                               ; preds = %bb54
  %v2_11668 = icmp eq i32 %v0_11668, 0
  %. = select i1 %v2_11668, i32 87, i32 55
  %v2_11674 = sub i32 %v1_11674, %.
  br label %dec_label_pc_11678

dec_label_pc_11678:                               ; preds = %dec_label_pc_11634, %dec_label_pc_11668
  %v0_1168c34 = phi i32 [ %v1_11648, %dec_label_pc_11634 ], [ %., %dec_label_pc_11668 ]
  %v3_116b012 = phi i32 [ %v1_11644, %dec_label_pc_11634 ], [ %v2_11674, %dec_label_pc_11668 ]
  %v1_11678 = load i32, i32* %r6.global-to-local, align 4
  %v6_1167c = icmp slt i32 %v3_116b012, %v1_11678
  br i1 %v6_1167c, label %dec_label_pc_11680, label %dec_label_pc_116c0

dec_label_pc_11680:                               ; preds = %dec_label_pc_11678
  %v3_11680 = icmp uge i32 %v2_116b011, %v0_11624
  %v9_11680 = icmp eq i32 %v2_116b011, %v0_11624
  %v2_11684 = xor i1 %v3_11680, true
  %v3_11684 = or i1 %v9_11680, %v2_11684
  br i1 %v3_11684, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_11680
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_11680, %bb57
  %v0_1168c33 = phi i32 [ %v0_1168c34, %dec_label_pc_11680 ], [ 0, %bb57 ]
  %v2_11688 = xor i1 %v9_11680, true
  %v3_11688 = and i1 %v3_11680, %v2_11688
  br i1 %v3_11688, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_1168c = phi i32 [ %v0_1168c33, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_1168c, 0
  %v4_1168c = zext i1 %tmp72 to i32
  %v5_1168c = or i32 %v0_1168c, %v4_1168c
  %v7_1168c = icmp eq i32 %v5_1168c, 0
  br i1 %v7_1168c, label %dec_label_pc_11698, label %.thread8

dec_label_pc_11698:                               ; preds = %bb60
  %v1_116a4 = load i32, i32* %r8.global-to-local, align 4
  %v7_116a8 = icmp sgt i32 %v3_116b012, %v1_116a4
  br i1 %v7_116a8, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11698
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_11698
  %v2_116ac = icmp eq i1 %v9_11680, false
  br i1 %v2_116ac, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_116b013 = mul i32 %v1_11678, %v2_116b011
  %v5_116b014 = add i32 %v4_116b013, %v3_116b012
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_116cc26 = phi i32 [ %v2_116b011, %bb63 ], [ %v2_116b011, %bb60 ], [ %v5_116b014, %bb64 ]
  %v0_116c024 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_116b8 = load i32, i32* %r5.global-to-local, align 4
  %v1_116b8 = inttoptr i32 %v0_116b8 to i8*
  %v2_116b8 = load i8, i8* %v1_116b8, align 1
  %v3_116b8 = zext i8 %v2_116b8 to i32
  store i32 %v3_116b8, i32* %r4.global-to-local, align 4
  %v5_116b8 = add i32 %v0_116b8, 1
  store i32 %v5_116b8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11634

dec_label_pc_116c0:                               ; preds = %dec_label_pc_11678, %bb54
  %v1_116c0 = icmp slt i32 %v1_1168c, 0
  %v0_116e4 = load i32, i32* %sl.global-to-local, align 4
  %v2_116e4 = icmp eq i32 %v0_116e4, 0
  br i1 %v1_116c0, label %dec_label_pc_116e4, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_116c0
  br i1 %v2_116e4, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_116c8
  %v2_116cc = sub i32 0, %v2_116b011
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_116c8, %bb65
  %v23_116d0 = phi i32 [ %v2_116b011, %dec_label_pc_116c8 ], [ %v2_116cc, %bb65 ]
  %v2_116d0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_116d0, i32* @r4, align 4
  ret i32 %v23_116d0

dec_label_pc_116d4:                               ; preds = %dec_label_pc_115f4
  %v1_116d4 = inttoptr i32 %v5_115d4 to i8*
  %v2_116d4 = load i8, i8* %v1_116d4, align 1
  %v3_116d4 = zext i8 %v2_116d4 to i32
  store i32 %v3_116d4, i32* %r4.global-to-local, align 4
  %v5_116d4 = add i32 %v0_115d4, 2
  store i32 %v5_116d4, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1160c

dec_label_pc_116e4:                               ; preds = %dec_label_pc_116c0
  %.70 = select i1 %v2_116e4, i32 2147483647, i32 -2147483648
  %v2_116f0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_116f0, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_116b8, { 1, 0 }
  uselistorder i1 %v9_11680, { 1, 0, 2 }
  uselistorder i1 %v3_11680, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_11650, { 1, 2, 0 }
  uselistorder i1 %v2_11650, { 1, 0, 2 }
  uselistorder i32 %v1_11634, { 1, 2, 0 }
  uselistorder i32 %v1_11674, { 1, 2, 0 }
  uselistorder i32 %v1_1168c, { 1, 0 }
  uselistorder i32 %v2_116b011, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_11624, { 1, 0, 2 }
  uselistorder i32 %v5_115d4, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_115d4, { 1, 0 }
  uselistorder i32 %v0_115d4, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 1, 0, 2, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_11678, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_1160c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_115d4, { 1, 2, 0, 3 }
}

define i32 @function_116f4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_116f4:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_116f4 = load i32, i32* @r4, align 4
  store i32 %v3_116f4, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1170c

dec_label_pc_1170c:                               ; preds = %dec_label_pc_11738.dec_label_pc_1170c_crit_edge, %dec_label_pc_116f4
  %v0_11710 = phi i32 [ %v0_11710.pre, %dec_label_pc_11738.dec_label_pc_1170c_crit_edge ], [ %arg3, %dec_label_pc_116f4 ]
  %v0_1170c = phi i32 [ %v1_11724, %dec_label_pc_11738.dec_label_pc_1170c_crit_edge ], [ %tmp, %dec_label_pc_116f4 ]
  %tmp12 = inttoptr i32 %v0_1170c to i32*
  %v5_11718 = call i32 @function_11f68(i32 %v0_11710, i32* %tmp12, i32 1)
  %v7_1171c = icmp eq i32 %v5_11718, 1
  %v0_11720 = load i32, i32* @r4, align 4
  %v1_11724 = add i32 %v0_11720, 1
  store i32 %v1_11724, i32* @r4, align 4
  %v0_1172c = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_1171c, label %dec_label_pc_1172c, label %dec_label_pc_11744

dec_label_pc_1172c:                               ; preds = %dec_label_pc_1170c
  %v1_1172c = add i32 %v0_1172c, 1
  store i32 %v1_1172c, i32* %r5.global-to-local, align 4
  %v0_11730 = load i32, i32* %r7.global-to-local, align 4
  %v7_11734 = icmp sgt i32 %v0_11730, %v1_1172c
  br i1 %v7_11734, label %dec_label_pc_11738, label %dec_label_pc_11744

dec_label_pc_11738:                               ; preds = %dec_label_pc_1172c
  %v1_11738 = inttoptr i32 %v0_11720 to i8*
  %v2_11738 = load i8, i8* %v1_11738, align 1
  %v7_1173c = icmp eq i8 %v2_11738, 10
  br i1 %v7_1173c, label %dec_label_pc_11744, label %dec_label_pc_11738.dec_label_pc_1170c_crit_edge

dec_label_pc_11738.dec_label_pc_1170c_crit_edge:  ; preds = %dec_label_pc_11738
  %v0_11710.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1170c

dec_label_pc_11744:                               ; preds = %dec_label_pc_1170c, %dec_label_pc_11738, %dec_label_pc_1172c
  %v0_11744 = phi i32 [ %v1_1172c, %dec_label_pc_11738 ], [ %v1_1172c, %dec_label_pc_1172c ], [ %v0_1172c, %dec_label_pc_1170c ]
  %v2_11744 = icmp eq i32 %v0_11744, 0
  %v1_11748 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11744, i32 0, i32 %v1_11748
  %v2_11750 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11750, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11724, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 4, 5, 6, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11f68, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_11744, { 1, 2, 0 }
}

define i32 @function_11754() local_unnamed_addr {
dec_label_pc_11754:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_11754 = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_11764 = call i32 @function_12374()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_1176c = inttoptr i32 %v0_11764 to i32*
  store i32 0, i32* %v2_1176c, align 4
  %v0_11778 = load i32, i32* %r6.global-to-local, align 4
  %v3_1177c = call i32 @function_126bc(i32 2, i32 2, i32 %v0_11778)
  %v7_11788 = icmp eq i32 %v3_1177c, -1
  store i32 %v3_1177c, i32* %r5.global-to-local, align 4
  %v2_11794 = load i32, i32* @r4, align 4
  br i1 %v7_11788, label %dec_label_pc_117e4, label %dec_label_pc_117a8

dec_label_pc_117a8:                               ; preds = %dec_label_pc_11754
  %v7_11794 = shl i32 2056, %v2_11794
  %v8_11794 = or i32 %v7_11794, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_117c4 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_117c4 = call i32 @function_12518(i32 %v3_1177c, %sockaddr* %v3_117c4, i32 %v2_11794)
  %v2_117cc = ptrtoint i32* %stack_var_-24 to i32
  %v0_117d0 = load i32, i32* %r5.global-to-local, align 4
  %v4_117d4 = call i32 @function_12544(i32 %v0_117d0, %sockaddr* %v3_117c4, i32 %v2_117cc)
  %v1_117dc = call i32 @function_11da0(i32 %v0_117d0)
  br label %dec_label_pc_117e4

dec_label_pc_117e4:                               ; preds = %dec_label_pc_11754, %dec_label_pc_117a8
  %v0_117e4 = phi i32 [ %v0_11778, %dec_label_pc_11754 ], [ %v8_11794, %dec_label_pc_117a8 ]
  store i32 %v3_11754, i32* @r4, align 4
  ret i32 %v0_117e4

; uselistorder directives
  uselistorder i32 %v3_1177c, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_12518, { 1, 0, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_126bc, { 23, 24, 21, 22, 19, 20, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_117e4, { 1, 0 }
}

define i32 @function_117f0(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_117f0:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_117f4 = load i8, i8* %tmp, align 1
  %v2_117f8 = icmp eq i8 %v3_117f4, 0
  br i1 %v2_117f8, label %bb, label %dec_label_pc_1180c

bb:                                               ; preds = %dec_label_pc_117f0
  %v4_117f4 = zext i8 %v3_117f4 to i32
  br label %dec_label_pc_11820

dec_label_pc_1180c:                               ; preds = %dec_label_pc_117f0
  br label %dec_label_pc_11810

dec_label_pc_11810:                               ; preds = %dec_label_pc_11810, %dec_label_pc_1180c
  %v0_11810 = phi i32 [ %v1_11810, %dec_label_pc_11810 ], [ 0, %dec_label_pc_1180c ]
  %v1_11810 = add i32 %v0_11810, 1
  %v2_11814 = add i32 %v1_11810, %arg2
  %v3_11814 = inttoptr i32 %v2_11814 to i8*
  %v4_11814 = load i8, i8* %v3_11814, align 1
  %v2_11818 = icmp eq i8 %v4_11814, 0
  br i1 %v2_11818, label %dec_label_pc_11820, label %dec_label_pc_11810

dec_label_pc_11820:                               ; preds = %dec_label_pc_11810, %bb
  %v0_1186418 = phi i32 [ %v4_117f4, %bb ], [ %v1_11810, %dec_label_pc_11810 ]
  %v0_118281 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_118281, 1
  br i1 %tmp27, label %dec_label_pc_11874, label %dec_label_pc_11834

dec_label_pc_11834:                               ; preds = %dec_label_pc_11820, %dec_label_pc_11828.backedge
  %v0_1182c.in = phi i32 [ %v0_1182c, %dec_label_pc_11828.backedge ], [ %v0_118281, %dec_label_pc_11820 ]
  %v0_11858 = phi i32 [ %v1_11858., %dec_label_pc_11828.backedge ], [ 0, %dec_label_pc_11820 ]
  %v0_11834 = phi i32 [ %v5_11834, %dec_label_pc_11828.backedge ], [ %tmp20, %dec_label_pc_11820 ]
  %v0_1182c = add i32 %v0_1182c.in, -1
  %v1_11834 = inttoptr i32 %v0_11834 to i8*
  %v2_11834 = load i8, i8* %v1_11834, align 1
  %v3_11834 = zext i8 %v2_11834 to i32
  store i32 %v3_11834, i32* @lr, align 4
  %v5_11834 = add i32 %v0_11834, 1
  %v2_11838 = add i32 %v0_11858, %arg2
  %v3_11838 = inttoptr i32 %v2_11838 to i8*
  %v4_11838 = load i8, i8* %v3_11838, align 1
  %v6_11838 = zext i8 %v4_11838 to i32
  %v1_1183c = add nsw i32 %v3_11834, -65
  %v1_11840 = add nsw i32 %v6_11838, -65
  %tmp35 = icmp ult i32 %v1_1183c, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11834
  %v5_11848 = or i32 %v3_11834, 96
  store i32 %v5_11848, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11834, %bb28
  %v0_11854 = phi i32 [ %v3_11834, %dec_label_pc_11834 ], [ %v5_11848, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11840, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11850 = or i32 %v6_11838, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11854 = phi i32 [ %v6_11838, %bb29 ], [ %v5_11850, %bb30 ]
  %v9_11854 = icmp eq i32 %v0_11854, %v1_11854
  %v1_11858 = add i32 %v0_11858, 1
  %v1_11858. = select i1 %v9_11854, i32 %v1_11858, i32 0
  br i1 %v9_11854, label %dec_label_pc_11864, label %dec_label_pc_11828.backedge

dec_label_pc_11828.backedge:                      ; preds = %bb31, %dec_label_pc_11864
  %tmp32 = icmp slt i32 %v0_1182c, 1
  br i1 %tmp32, label %dec_label_pc_11874, label %dec_label_pc_11834

dec_label_pc_11864:                               ; preds = %bb31
  %v9_11864 = icmp eq i32 %v0_1186418, %v1_11858.
  br i1 %v9_11864, label %dec_label_pc_1186c, label %dec_label_pc_11828.backedge

dec_label_pc_1186c:                               ; preds = %dec_label_pc_11864
  %v2_1186c = sub i32 %v5_11834, %tmp20
  ret i32 %v2_1186c

dec_label_pc_11874:                               ; preds = %dec_label_pc_11828.backedge, %dec_label_pc_11820
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_11858., { 1, 0 }
  uselistorder i32 %v0_11834, { 1, 0 }
  uselistorder i32 %v0_11858, { 1, 0 }
  uselistorder i8 %v3_117f4, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_11828.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11834, { 1, 0 }
}

define i32 @function_1187c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1187c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_1187c = load i8, i8* %arg1, align 1
  %v2_11880 = icmp eq i8 %v2_1187c, 0
  br i1 %v2_11880, label %bb, label %dec_label_pc_1188c

bb:                                               ; preds = %dec_label_pc_1187c
  %v3_1187c = zext i8 %v2_1187c to i32
  br label %dec_label_pc_118a0

dec_label_pc_1188c:                               ; preds = %dec_label_pc_1187c
  br label %dec_label_pc_11890

dec_label_pc_11890:                               ; preds = %dec_label_pc_11890, %dec_label_pc_1188c
  %v0_11890 = phi i32 [ %v1_11890, %dec_label_pc_11890 ], [ 0, %dec_label_pc_1188c ]
  %v1_11890 = add i32 %v0_11890, 1
  %v2_11894 = add i32 %v1_11890, %tmp
  %v3_11894 = inttoptr i32 %v2_11894 to i8*
  %v4_11894 = load i8, i8* %v3_11894, align 1
  %v2_11898 = icmp eq i8 %v4_11894, 0
  br i1 %v2_11898, label %dec_label_pc_118a0, label %dec_label_pc_11890

dec_label_pc_118a0:                               ; preds = %dec_label_pc_11890, %bb
  %v0_118c4 = phi i32 [ %v3_1187c, %bb ], [ %v1_11890, %dec_label_pc_11890 ]
  %v1_118a0 = inttoptr i32 %arg2 to i8*
  %v2_118a0 = load i8, i8* %v1_118a0, align 1
  %v3_118a0 = zext i8 %v2_118a0 to i32
  %v2_118a4 = icmp eq i8 %v2_118a0, 0
  br i1 %v2_118a4, label %bb22, label %dec_label_pc_118b0

bb22:                                             ; preds = %dec_label_pc_118a0
  store i32 %v3_118a0, i32* @r2, align 4
  br label %dec_label_pc_118c4

dec_label_pc_118b0:                               ; preds = %dec_label_pc_118a0
  br label %dec_label_pc_118b4

dec_label_pc_118b4:                               ; preds = %dec_label_pc_118b4, %dec_label_pc_118b0
  %v0_118b4 = phi i32 [ %v1_118b4, %dec_label_pc_118b4 ], [ 0, %dec_label_pc_118b0 ]
  %v1_118b4 = add i32 %v0_118b4, 1
  store i32 %v1_118b4, i32* @r2, align 4
  %v2_118b8 = add i32 %v1_118b4, %arg2
  %v3_118b8 = inttoptr i32 %v2_118b8 to i8*
  %v4_118b8 = load i8, i8* %v3_118b8, align 1
  %v2_118bc = icmp eq i8 %v4_118b8, 0
  br i1 %v2_118bc, label %dec_label_pc_118c4, label %dec_label_pc_118b4

dec_label_pc_118c4:                               ; preds = %dec_label_pc_118b4, %bb22
  %v0_118f04 = phi i32 [ %v3_118a0, %bb22 ], [ %v1_118b4, %dec_label_pc_118b4 ]
  %v9_118c4 = icmp eq i32 %v0_118c4, %v0_118f04
  br i1 %v9_118c4, label %dec_label_pc_118f0.preheader, label %dec_label_pc_118d0

dec_label_pc_118f0.preheader:                     ; preds = %dec_label_pc_118c4
  %v2_118f06 = icmp eq i32 %v0_118c4, 0
  br i1 %v2_118f06, label %dec_label_pc_118f8, label %dec_label_pc_118d8

dec_label_pc_118d0:                               ; preds = %dec_label_pc_118d8, %dec_label_pc_118c4
  ret i32 0

dec_label_pc_118d8:                               ; preds = %dec_label_pc_118e8, %dec_label_pc_118f0.preheader
  %v0_118f0.in = phi i32 [ %v0_118f0, %dec_label_pc_118e8 ], [ %v0_118c4, %dec_label_pc_118f0.preheader ]
  %v0_118ec = phi i32 [ %v1_118ec, %dec_label_pc_118e8 ], [ %arg2, %dec_label_pc_118f0.preheader ]
  %v0_118e8 = phi i32 [ %v1_118e8, %dec_label_pc_118e8 ], [ %tmp, %dec_label_pc_118f0.preheader ]
  %v0_118f0 = add i32 %v0_118f0.in, -1
  %v1_118d8 = inttoptr i32 %v0_118e8 to i8*
  %v2_118d8 = load i8, i8* %v1_118d8, align 1
  %v3_118d8 = zext i8 %v2_118d8 to i32
  store i32 %v3_118d8, i32* @r2, align 4
  %v1_118dc = inttoptr i32 %v0_118ec to i8*
  %v2_118dc = load i8, i8* %v1_118dc, align 1
  %v9_118e0 = icmp eq i8 %v2_118d8, %v2_118dc
  br i1 %v9_118e0, label %dec_label_pc_118e8, label %dec_label_pc_118d0

dec_label_pc_118e8:                               ; preds = %dec_label_pc_118d8
  %v1_118e8 = add i32 %v0_118e8, 1
  %v1_118ec = add i32 %v0_118ec, 1
  %v2_118f0 = icmp eq i32 %v0_118f0, 0
  br i1 %v2_118f0, label %dec_label_pc_118f8, label %dec_label_pc_118d8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118e8, %dec_label_pc_118f0.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_118b4, { 0, 1, 3, 2 }
  uselistorder i8 %v2_1187c, { 1, 0 }
}

define i32 @function_11900(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11900:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11900 = load i32, i32* @r4, align 4
  store i32 %v3_11900, i32* %stack_var_-28, align 4
  %v22_11900 = ptrtoint i32* %stack_var_-28 to i32
  %v0_11904 = load i32, i32* @r2, align 4
  store i32 %v0_11904, i32* %r8.global-to-local, align 4
  %v2_11904 = icmp eq i32 %v0_11904, 0
  store i1 %v2_11904, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11904, label %dec_label_pc_119f4, label %dec_label_pc_11914

dec_label_pc_11914:                               ; preds = %dec_label_pc_11900
  %v3_11914 = icmp eq i8 %arg1, 0
  store i1 %v3_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11914, label %.thread, label %dec_label_pc_11928

.thread:                                          ; preds = %dec_label_pc_11914
  %v4_1191c = inttoptr i32 %v0_11904 to i8*
  store i8 48, i8* %v4_1191c, align 1
  %v0_11920.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11920.pr.pr, label %.thread1, label %dec_label_pc_11928

.thread1:                                         ; preds = %.thread
  %v4_11920 = load i32, i32* %r8.global-to-local, align 4
  %v5_11920 = add i32 %v4_11920, 1
  %v6_11920 = inttoptr i32 %v5_11920 to i8*
  store i8 0, i8* %v6_11920, align 1
  %v0_11924.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11924.pr.pr, label %dec_label_pc_119f4, label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_11914, %.thread, %.thread1
  %v7_1192c = icmp eq i32 %arg2, 10
  store i1 %v7_1192c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1192c, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_11928
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11928
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11950

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11960

dec_label_pc_11950:                               ; preds = %bb
  %v2_11950 = sub nsw i32 0, %tmp
  store i32 %v2_11950, i32* %r4.global-to-local, align 4
  store i1 %v3_11914, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11914, label %dec_label_pc_11a00, label %dec_label_pc_11960

dec_label_pc_11960:                               ; preds = %dec_label_pc_11950, %.thread4
  %v0_1196810 = phi i32 [ %tmp, %.thread4 ], [ %v2_11950, %dec_label_pc_11950 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11950 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11964 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11964, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %bb37, %dec_label_pc_11960
  %v0_11968 = phi i32 [ %v0_1198c, %bb37 ], [ %v0_1196810, %dec_label_pc_11960 ]
  store i32 %v0_11968, i32* %r0.global-to-local, align 4
  %v0_1196c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1196c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_11968, 16777216
  %v1_11970 = sdiv i32 %sext, 16777216
  %v3_11970 = call i32 @function_11b28(i32 %v1_11970, i32 %v0_1196c)
  store i32 %v3_11970, i32* %r0.global-to-local, align 4
  %v7_11974 = icmp eq i32 %v3_11970, 9
  store i1 %v7_11974, i1* %cpsr_z.global-to-local, align 1
  %v1_11978 = add i32 %v3_11970, 48
  %v0_1197c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1197c, i32* @r1, align 4
  %v7_11980 = icmp sgt i32 %v3_11970, 9
  %extract.t = trunc i32 %v1_11978 to i8
  br i1 %v7_11980, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_11968
  %v9_11980 = add i32 %v3_11970, 55
  %extract.t20 = trunc i32 %v9_11980 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_11968, %bb36
  %v0_11988.off0 = phi i8 [ %extract.t, %dec_label_pc_11968 ], [ %extract.t20, %bb36 ]
  %v0_11984 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11984, i32* @r0, align 4
  %v2_11988 = load i32, i32* %r7.global-to-local, align 4
  %v3_11988 = inttoptr i32 %v2_11988 to i8*
  store i8 %v0_11988.off0, i8* %v3_11988, align 1
  %v4_11988 = load i32, i32* %r7.global-to-local, align 4
  %v5_11988 = add i32 %v4_11988, -1
  store i32 %v5_11988, i32* %r7.global-to-local, align 4
  %v0_1198c = call i32 @function_11a18()
  store i32 %v0_1198c, i32* %r0.global-to-local, align 4
  store i32 %v0_1198c, i32* %r4.global-to-local, align 4
  %v2_11990 = icmp eq i32 %v0_1198c, 0
  store i1 %v2_11990, i1* %cpsr_z.global-to-local, align 1
  %v0_11994 = load i32, i32* %r6.global-to-local, align 4
  %v1_11994 = add i32 %v0_11994, -1
  store i32 %v1_11994, i32* %r6.global-to-local, align 4
  br i1 %v2_11990, label %dec_label_pc_1199c, label %dec_label_pc_11968

dec_label_pc_1199c:                               ; preds = %bb37
  %v0_1199c = load i32, i32* %sl.global-to-local, align 4
  %v2_1199c = icmp eq i32 %v0_1199c, 0
  store i1 %v2_1199c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1199c, label %bb38, label %dec_label_pc_11a04

bb38:                                             ; preds = %dec_label_pc_1199c
  store i32 %v0_11994, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_119a8

dec_label_pc_119a8:                               ; preds = %bb38, %dec_label_pc_11a04
  %v1_119b4 = phi i32 [ %v0_11994, %bb38 ], [ %v1_119ac.pre, %dec_label_pc_11a04 ]
  %v2_119a8 = ptrtoint i32* %stack_var_-62 to i32
  %v2_119ac = add i32 %v1_119b4, %v2_119a8
  %v3_119ac = inttoptr i32 %v2_119ac to i8*
  %v4_119ac = load i8, i8* %v3_119ac, align 1
  %v6_119ac = zext i8 %v4_119ac to i32
  %v2_119b0 = icmp eq i8 %v4_119ac, 0
  store i1 %v2_119b0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_119ac, i32* %r1.global-to-local, align 4
  br i1 %v2_119b0, label %dec_label_pc_119d8, label %dec_label_pc_119bc

dec_label_pc_119bc:                               ; preds = %dec_label_pc_119a8
  br label %dec_label_pc_119c0

dec_label_pc_119c0:                               ; preds = %dec_label_pc_119c0, %dec_label_pc_119bc
  %v0_119c0 = phi i32 [ %v1_119c0, %dec_label_pc_119c0 ], [ 0, %dec_label_pc_119bc ]
  %v1_119c0 = add i32 %v0_119c0, 1
  store i32 %v1_119c0, i32* @r2, align 4
  %v2_119c4 = add i32 %v1_119c0, %v2_119ac
  %v3_119c4 = inttoptr i32 %v2_119c4 to i8*
  %v4_119c4 = load i8, i8* %v3_119c4, align 1
  %v2_119c8 = icmp eq i8 %v4_119c4, 0
  store i1 %v2_119c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_119c8, label %dec_label_pc_119d0, label %dec_label_pc_119c0

dec_label_pc_119d0:                               ; preds = %dec_label_pc_119c0
  %v7_119d0 = icmp eq i32 %v0_119c0, -2
  store i1 %v7_119d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119d0, label %dec_label_pc_119f4, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119d0, %dec_label_pc_119a8
  %v0_119e017 = phi i32 [ %v1_119c0, %dec_label_pc_119d0 ], [ %v6_119ac, %dec_label_pc_119a8 ]
  store i32 %v2_119ac, i32* %r0.global-to-local, align 4
  %v0_119dc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_119dc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119e0.dec_label_pc_119e0_crit_edge, %dec_label_pc_119d8
  %v2_119ec = phi i32 [ %v5_119ec, %dec_label_pc_119e0.dec_label_pc_119e0_crit_edge ], [ %v0_119dc, %dec_label_pc_119d8 ]
  %v0_119e4 = phi i32 [ %v0_119e4.pre, %dec_label_pc_119e0.dec_label_pc_119e0_crit_edge ], [ %v2_119ac, %dec_label_pc_119d8 ]
  %v0_119e0 = phi i32 [ %v0_119e0.pre, %dec_label_pc_119e0.dec_label_pc_119e0_crit_edge ], [ %v0_119e017, %dec_label_pc_119d8 ]
  %v1_119e0 = add i32 %v0_119e0, -1
  store i32 %v1_119e0, i32* @r2, align 4
  %v1_119e4 = inttoptr i32 %v0_119e4 to i8*
  %v2_119e4 = load i8, i8* %v1_119e4, align 1
  %v5_119e4 = add i32 %v0_119e4, 1
  store i32 %v5_119e4, i32* %r0.global-to-local, align 4
  %v3_119e8 = icmp eq i32 %v0_119e0, 0
  store i1 %v3_119e8, i1* %cpsr_z.global-to-local, align 1
  %v3_119ec = inttoptr i32 %v2_119ec to i8*
  store i8 %v2_119e4, i8* %v3_119ec, align 1
  %v4_119ec = load i32, i32* %r1.global-to-local, align 4
  %v5_119ec = add i32 %v4_119ec, 1
  store i32 %v5_119ec, i32* %r1.global-to-local, align 4
  br i1 %v3_119e8, label %dec_label_pc_119f4, label %dec_label_pc_119e0.dec_label_pc_119e0_crit_edge

dec_label_pc_119e0.dec_label_pc_119e0_crit_edge:  ; preds = %dec_label_pc_119e0
  %v0_119e0.pre = load i32, i32* @r2, align 4
  %v0_119e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_119e0

dec_label_pc_119f4:                               ; preds = %dec_label_pc_119e0, %dec_label_pc_119d0, %.thread1, %dec_label_pc_11900
  %v0_119f4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_119f4, i32* %r0.global-to-local, align 4
  %v2_119fc = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_119fc, i32* @r4, align 4
  ret i32 %v0_119f4

dec_label_pc_11a00:                               ; preds = %dec_label_pc_11950
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a04

dec_label_pc_11a04:                               ; preds = %dec_label_pc_1199c, %dec_label_pc_11a00
  %v1_11a08 = phi i32 [ %v1_11994, %dec_label_pc_1199c ], [ 32, %dec_label_pc_11a00 ]
  %v2_11a08 = add i32 %v1_11a08, %v22_11900
  %v3_11a10 = add i32 %v2_11a08, -34
  %v4_11a10 = inttoptr i32 %v3_11a10 to i8*
  store i8 45, i8* %v4_11a10, align 1
  %v1_119ac.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_119a8

; uselistorder directives
  uselistorder i32 %v5_119ec, { 1, 0 }
  uselistorder i1 %v3_119e8, { 1, 0 }
  uselistorder i32 %v0_119e4, { 1, 0 }
  uselistorder i1 %v7_119d0, { 1, 0 }
  uselistorder i32 %v1_119c0, { 0, 1, 3, 2 }
  uselistorder i32 %v2_119ac, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1198c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_11970, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11914, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11904, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 10, 11, 12, 13 }
  uselistorder label %dec_label_pc_11a04, { 1, 0 }
  uselistorder label %dec_label_pc_119a8, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_11928, { 2, 1, 0 }
}

define i32 @function_11a18() local_unnamed_addr {
dec_label_pc_11a18:
  %v0_11a18 = load i32, i32* @r1, align 4
  %v1_11a18 = add i32 %v0_11a18, -1
  %v7_11a18 = icmp eq i32 %v0_11a18, 1
  br i1 %v7_11a18, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_11a18
  %v2_11a1c = load i32, i32* @r0, align 4
  ret i32 %v2_11a1c

bb82:                                             ; preds = %dec_label_pc_11a18
  %v2_11a18 = icmp eq i32 %v0_11a18, 0
  br i1 %v2_11a18, label %dec_label_pc_11b00, label %dec_label_pc_11a24

dec_label_pc_11a24:                               ; preds = %bb82
  %v0_11a24 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11a24, %v0_11a18
  br i1 %tmp, label %dec_label_pc_11a2c, label %dec_label_pc_11ab8

dec_label_pc_11a2c:                               ; preds = %dec_label_pc_11a24
  %v2_11a2c = and i32 %v1_11a18, %v0_11a18
  %v4_11a2c = icmp eq i32 %v2_11a2c, 0
  br i1 %v4_11a2c, label %dec_label_pc_11ac4, label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a2c
  %v3_11a34 = icmp ult i32 %v0_11a18, 536870912
  br i1 %v3_11a34, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11a34
  %v4_11a38 = mul i32 %v0_11a18, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11a34, %.thread
  %v0_11a58.pr36.ph = phi i32 [ %v4_11a38, %.thread ], [ %v0_11a18, %dec_label_pc_11a34 ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11a34 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_11a58.pr36 = phi i32 [ %v4_11a4c, %bb85 ], [ %v0_11a58.pr36.ph, %.preheader.preheader ]
  %v1_11a50 = phi i32 [ %v4_11a50, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11a44 = icmp ugt i32 %v0_11a58.pr36, 268435455
  br i1 %v2_11a44, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11a58thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11a48 = icmp ult i32 %v0_11a58.pr36, %v0_11a24
  br i1 %v4_11a48, label %bb84, label %dec_label_pc_11a58thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_11a4c = and i32 %v0_11a58.pr36, 268435456
  %v3_11a4c = icmp eq i32 %v2_11a4c, 0
  %v4_11a4c = mul i32 %v0_11a58.pr36, 16
  br i1 %v3_11a4c, label %bb85, label %dec_label_pc_11a58.loopexit

bb85:                                             ; preds = %bb84
  %v2_11a50 = and i32 %v1_11a50, 268435456
  %v3_11a50 = icmp eq i32 %v2_11a50, 0
  %v4_11a50 = mul i32 %v1_11a50, 16
  br i1 %v3_11a50, label %.preheader, label %dec_label_pc_11a58thread-pre-split.loopexit.loopexit

dec_label_pc_11a58thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_11a6448.ph = phi i32 [ %v1_11a50, %bb83 ], [ %v4_11a50, %bb85 ]
  %v0_11a58.pr38.ph = phi i32 [ %v0_11a58.pr36, %bb83 ], [ %v4_11a4c, %bb85 ]
  br label %dec_label_pc_11a58thread-pre-split.loopexit

dec_label_pc_11a58thread-pre-split.loopexit:      ; preds = %dec_label_pc_11a58thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11a6448 = phi i32 [ %v1_11a50, %.thread2 ], [ %v1_11a6448.ph, %dec_label_pc_11a58thread-pre-split.loopexit.loopexit ]
  %v0_11a58.pr38 = phi i32 [ %v0_11a58.pr36, %.thread2 ], [ %v0_11a58.pr38.ph, %dec_label_pc_11a58thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11a58thread-pre-split

dec_label_pc_11a58thread-pre-split:               ; preds = %dec_label_pc_11a58thread-pre-split.loopexit, %bb87
  %v1_11a6446 = phi i32 [ %v1_11a6448, %dec_label_pc_11a58thread-pre-split.loopexit ], [ %v3_11a64, %bb87 ]
  %v0_11a58.pr = phi i32 [ %v0_11a58.pr38, %dec_label_pc_11a58thread-pre-split.loopexit ], [ %v3_11a60, %bb87 ]
  br label %dec_label_pc_11a58

dec_label_pc_11a58.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_11a58

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a58.loopexit, %dec_label_pc_11a58thread-pre-split
  %v1_11a64 = phi i32 [ %v1_11a6446, %dec_label_pc_11a58thread-pre-split ], [ %v1_11a50, %dec_label_pc_11a58.loopexit ]
  %v1_11a60 = phi i32 [ %v0_11a58.pr, %dec_label_pc_11a58thread-pre-split ], [ %v4_11a4c, %dec_label_pc_11a58.loopexit ]
  %v2_11a58 = icmp slt i32 %v1_11a60, 0
  br i1 %v2_11a58, label %dec_label_pc_11a6c, label %bb86

bb86:                                             ; preds = %dec_label_pc_11a58
  %v4_11a5c = icmp ult i32 %v1_11a60, %v0_11a24
  br i1 %v4_11a5c, label %bb87, label %dec_label_pc_11a6c

bb87:                                             ; preds = %bb86
  %v3_11a60 = mul i32 %v1_11a60, 2
  %v2_11a64 = icmp slt i32 %v1_11a64, 0
  %v3_11a64 = mul i32 %v1_11a64, 2
  br i1 %v2_11a64, label %dec_label_pc_11a6c, label %dec_label_pc_11a58thread-pre-split

dec_label_pc_11a6c:                               ; preds = %bb86, %dec_label_pc_11a58, %bb87
  %v2_11a7859 = phi i32 [ %v3_11a64, %bb87 ], [ %v1_11a64, %bb86 ], [ %v1_11a64, %dec_label_pc_11a58 ]
  %v1_11a7051 = phi i32 [ %v3_11a60, %bb87 ], [ %v1_11a60, %bb86 ], [ %v1_11a60, %dec_label_pc_11a58 ]
  br label %dec_label_pc_11a70

dec_label_pc_11a70:                               ; preds = %.thread11, %dec_label_pc_11a6c
  %v1_11aa4 = phi i32 [ %v4_11aa4, %.thread11 ], [ %v2_11a7859, %dec_label_pc_11a6c ]
  %v1_11a78 = phi i32 [ %v0_11ab0, %.thread11 ], [ 0, %dec_label_pc_11a6c ]
  %v1_11aa8 = phi i32 [ %v4_11aa8, %.thread11 ], [ %v1_11a7051, %dec_label_pc_11a6c ]
  %v1_11a74 = phi i32 [ %v0_11aa0, %.thread11 ], [ %v0_11a24, %dec_label_pc_11a6c ]
  %v3_11a70 = icmp ult i32 %v1_11a74, %v1_11aa8
  br i1 %v3_11a70, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11a70
  %v3_11a74 = sub i32 %v1_11a74, %v1_11aa8
  %v3_11a78 = or i32 %v1_11a78, %v1_11aa4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11a70, %bb88
  %v1_11a80 = phi i32 [ %v1_11a74, %dec_label_pc_11a70 ], [ %v3_11a74, %bb88 ]
  %v1_11a84 = phi i32 [ %v1_11a78, %dec_label_pc_11a70 ], [ %v3_11a78, %bb88 ]
  %v4_11a7c = udiv i32 %v1_11aa8, 2
  %v6_11a7c = icmp ult i32 %v1_11a80, %v4_11a7c
  br i1 %v6_11a7c, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11a80 = urem i32 %v1_11aa8, 2
  %v4_11a80 = icmp eq i32 %v3_11a80, 0
  %v6_11a80 = sub i32 %v1_11a80, %v4_11a7c
  br i1 %v4_11a80, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11a84 = udiv i32 %v1_11aa4, 2
  %v6_11a84 = or i32 %v1_11a84, %v5_11a84
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_11a8c = phi i32 [ %v6_11a80, %bb89 ], [ %v1_11a80, %.thread7 ], [ %v6_11a80, %bb90 ]
  %v1_11a90 = phi i32 [ %v1_11a84, %bb89 ], [ %v1_11a84, %.thread7 ], [ %v6_11a84, %bb90 ]
  %v4_11a88 = udiv i32 %v1_11aa8, 4
  %v6_11a88 = icmp ult i32 %v1_11a8c, %v4_11a88
  br i1 %v6_11a88, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_11a8c = and i32 %v1_11aa8, 2
  %v4_11a8c = icmp eq i32 %v3_11a8c, 0
  %v6_11a8c = sub i32 %v1_11a8c, %v4_11a88
  br i1 %v4_11a8c, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11a90 = udiv i32 %v1_11aa4, 4
  %v6_11a90 = or i32 %v1_11a90, %v5_11a90
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_11a98 = phi i32 [ %v6_11a8c, %bb91 ], [ %v1_11a8c, %.thread8 ], [ %v6_11a8c, %bb92 ]
  %v1_11a9c = phi i32 [ %v1_11a90, %bb91 ], [ %v1_11a90, %.thread8 ], [ %v6_11a90, %bb92 ]
  %v4_11a94 = udiv i32 %v1_11aa8, 8
  %v6_11a94 = icmp ult i32 %v1_11a98, %v4_11a94
  br i1 %v6_11a94, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_11a98 = and i32 %v1_11aa8, 4
  %v4_11a98 = icmp eq i32 %v3_11a98, 0
  %v6_11a98 = sub i32 %v1_11a98, %v4_11a94
  br i1 %v4_11a98, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11a9c = udiv i32 %v1_11aa4, 8
  %v6_11a9c = or i32 %v1_11a9c, %v5_11a9c
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11ab0 = phi i32 [ %v1_11a9c, %bb93 ], [ %v1_11a9c, %.thread9 ], [ %v6_11a9c, %bb94 ]
  %v0_11aa0 = phi i32 [ %v6_11a98, %bb93 ], [ %v1_11a98, %.thread9 ], [ %v6_11a98, %bb94 ]
  %v2_11aa0 = icmp eq i32 %v0_11aa0, 0
  br i1 %v2_11aa0, label %dec_label_pc_11ab0, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11aa4, 16
  br i1 %tmp142, label %dec_label_pc_11ab0, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11aa4 = udiv i32 %v1_11aa4, 16
  %v4_11aa8 = udiv i32 %v1_11aa8, 16
  br label %dec_label_pc_11a70

dec_label_pc_11ab0:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11ab0

dec_label_pc_11ab8:                               ; preds = %dec_label_pc_11a24
  %v9_11a24 = icmp eq i32 %v0_11a24, %v0_11a18
  %. = zext i1 %v9_11a24 to i32
  ret i32 %.

dec_label_pc_11ac4:                               ; preds = %dec_label_pc_11a2c
  %v2_11ac4 = icmp ugt i32 %v0_11a18, 65535
  br i1 %v2_11ac4, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11ac4
  %v2_11ac8 = and i32 %v0_11a18, 32768
  %v3_11ac8 = icmp eq i32 %v2_11ac8, 0
  %v4_11ac8 = udiv i32 %v0_11a18, 65536
  br i1 %v3_11ac8, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11ac4
  %v0_11ad465 = phi i32 [ %v0_11a18, %dec_label_pc_11ac4 ], [ %v4_11ac8, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11ad8 = phi i32 [ %v0_11ad465, %.thread16 ], [ %v4_11ac8, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11ad4 = icmp ugt i32 %v1_11ad8, 255
  br i1 %v2_11ad4, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11ad8 = and i32 %v1_11ad8, 128
  %v3_11ad8 = icmp eq i32 %v2_11ad8, 0
  %v4_11ad8 = udiv i32 %v1_11ad8, 256
  br i1 %v3_11ad8, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11adc = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_11ae8 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_11adc, %bb102 ]
  %v1_11ae4 = phi i32 [ %v1_11ad8, %bb100 ], [ %v4_11ad8, %bb101 ], [ %v4_11ad8, %bb102 ]
  %v2_11ae0 = icmp ugt i32 %v1_11ae4, 15
  br i1 %v2_11ae0, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_11ae4 = and i32 %v1_11ae4, 8
  %v3_11ae4 = icmp eq i32 %v2_11ae4, 0
  %v4_11ae4 = udiv i32 %v1_11ae4, 16
  br i1 %v3_11ae4, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_11ae8 = add nsw i32 %v1_11ae8, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_11af0 = phi i32 [ %v1_11ae8, %.thread17 ], [ %v1_11ae8, %bb103 ], [ %v2_11ae8, %bb104 ]
  %v5_11af4 = phi i32 [ %v1_11ae4, %.thread17 ], [ %v4_11ae4, %bb103 ], [ %v4_11ae4, %bb104 ]
  %v2_11aec = icmp ugt i32 %v5_11af4, 3
  %v7_11aec = icmp eq i32 %v5_11af4, 4
  %v2_11af0 = xor i1 %v7_11aec, true
  %v3_11af0 = and i1 %v2_11aec, %v2_11af0
  br i1 %v3_11af0, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_11af0 = add nsw i32 %v4_11af0, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_11af4 = phi i32 [ %v4_11af0, %.thread18 ], [ %v5_11af0, %bb105 ]
  %v2_11af4 = xor i1 %v2_11aec, true
  %v3_11af4 = or i1 %v7_11aec, %v2_11af4
  br i1 %v3_11af4, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_11af4 = udiv i32 %v5_11af4, 2
  %v9_11af4 = add i32 %v4_11af4, %v8_11af4
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_11af8 = phi i32 [ %v4_11af4, %bb106 ], [ %v9_11af4, %bb107 ]
  %v6_11af8 = lshr i32 %v0_11a24, %v1_11af8
  ret i32 %v6_11af8

dec_label_pc_11b00:                               ; preds = %bb82
  %v0_11b00 = load i32, i32* @lr, align 4
  %v0_11b04 = call i32 @function_11cd8()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_11b00)
  %v9_11b10 = load i32, i32* @lr, align 4
  %v0_11b14 = call i32 @function_11a18()
  store i32 %v9_11b10, i32* @lr, align 4
  ret i32 %v0_11b14

; uselistorder directives
  uselistorder i32 %v4_11af4, { 1, 0 }
  uselistorder i1 %v7_11aec, { 1, 0 }
  uselistorder i32 %v4_11ae4, { 1, 0 }
  uselistorder i32 %v1_11ae4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11ad8, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11ad8, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11ac8, { 1, 0 }
  uselistorder i32 %v0_11aa0, { 1, 0 }
  uselistorder i32 %v4_11a94, { 1, 0 }
  uselistorder i32 %v1_11a9c, { 1, 2, 0 }
  uselistorder i32 %v4_11a88, { 1, 0 }
  uselistorder i32 %v1_11a90, { 1, 2, 0 }
  uselistorder i32 %v4_11a7c, { 1, 0 }
  uselistorder i32 %v1_11a84, { 1, 2, 0 }
  uselistorder i32 %v1_11aa8, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11a78, { 1, 0 }
  uselistorder i32 %v1_11aa4, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11a64, { 1, 0 }
  uselistorder i32 %v3_11a60, { 1, 0 }
  uselistorder i32 %v1_11a60, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11a64, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11a50, { 1, 0 }
  uselistorder i32 %v4_11a4c, { 2, 1, 0 }
  uselistorder i32 %v1_11a50, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11a58.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11a24, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11a18, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 102, 53, 54, 0, 1, 12, 55, 27, 56, 26, 57, 25, 58, 13, 14, 2, 29, 59, 28, 60, 61, 15, 62, 3, 30, 63, 31, 64, 32, 65, 66, 4, 33, 67, 68, 16, 69, 24, 37, 70, 34, 71, 35, 72, 36, 73, 74, 17, 75, 5, 76, 77, 41, 78, 40, 79, 38, 80, 39, 81, 18, 19, 6, 82, 42, 83, 43, 84, 20, 21, 7, 85, 44, 86, 45, 87, 88, 8, 46, 89, 90, 91, 22, 92, 93, 9, 49, 94, 47, 95, 48, 96, 97, 23, 98, 10, 11, 52, 99, 50, 100, 51, 101 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11ab0, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11a6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11a58thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11b28(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b28:
  store i32 %arg1, i32* @r0, align 4
  %v1_11b28 = add i32 %arg2, -1
  %v2_11b28 = icmp eq i32 %arg2, 0
  br i1 %v2_11b28, label %dec_label_pc_11be4, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b28
  %v7_11b28 = icmp eq i32 %arg2, 1
  br i1 %v7_11b28, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11b30
  %v1_11b30 = load i32, i32* @r0, align 4
  %v10_11b30 = icmp eq i32 %v1_11b30, %arg2
  br i1 %v10_11b30, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11b30, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11b30 = icmp ult i32 %v1_11b30, %arg2
  br i1 %v4_11b30, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11b38 = and i32 %v1_11b28, %arg2
  %v8_11b38 = icmp eq i32 %v6_11b38, 0
  br i1 %v8_11b38, label %.thread67, label %dec_label_pc_11b48.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11b3c = phi i32 [ %v1_11b30, %bb75 ], [ 0, %.thread65 ]
  %v3_11b3c = and i32 %v1_11b3c, %v1_11b28
  br label %bb76

dec_label_pc_11b48.preheader:                     ; preds = %bb75
  %v2_11b4899 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11b4899, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11bd8, %bb74, %bb89, %bb84, %dec_label_pc_11ba8, %.thread67
  %v5_11b40 = phi i32 [ %v1_11b30, %bb74 ], [ %v3_11b3c, %.thread67 ], [ %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, %dec_label_pc_11ba8 ], [ 0, %bb84 ], [ %v1_11bdc, %dec_label_pc_11bd8 ], [ %v2_11bd8, %bb89 ]
  ret i32 %v5_11b40

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11b48.preheader
  %v0_11b5c.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11b48.preheader ], [ %v4_11b50, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11b48.preheader ], [ %v2_11b5411, %.thread1.thread9 ]
  br label %dec_label_pc_11b5cthread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11b48.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_11b5411, %.thread1.thread9 ], [ 0, %dec_label_pc_11b48.preheader ]
  %v0_11b5c.pr33100 = phi i32 [ %v4_11b50, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11b48.preheader ]
  %v4_11b4c = icmp ult i32 %v0_11b5c.pr33100, %v1_11b30
  br i1 %v4_11b4c, label %bb78, label %dec_label_pc_11b5cthread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11b50 = and i32 %v0_11b5c.pr33100, 268435456
  %v3_11b50 = icmp eq i32 %v2_11b50, 0
  %v4_11b50 = mul i32 %v0_11b5c.pr33100, 16
  br i1 %v3_11b50, label %.thread1.thread9, label %dec_label_pc_11b5c.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11b5411 = add i32 %storemerge101, 4
  %v2_11b48 = icmp ugt i32 %v4_11b50, 268435455
  br i1 %v2_11b48, label %.thread, label %bb77

dec_label_pc_11b5cthread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11b5cthread-pre-split.loopexit

dec_label_pc_11b5cthread-pre-split.loopexit:      ; preds = %dec_label_pc_11b5cthread-pre-split.loopexit.loopexit, %.thread
  %v0_11b5c.pr3398 = phi i32 [ %v0_11b5c.pr33.lcssa, %.thread ], [ %v0_11b5c.pr33100, %dec_label_pc_11b5cthread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_11b5cthread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11b5cthread-pre-split

dec_label_pc_11b5cthread-pre-split:               ; preds = %.thread4, %dec_label_pc_11b5cthread-pre-split.loopexit
  %v1_11b6839 = phi i32 [ %storemerge95, %dec_label_pc_11b5cthread-pre-split.loopexit ], [ %v2_11b68, %.thread4 ]
  %v0_11b5c.pr = phi i32 [ %v0_11b5c.pr3398, %dec_label_pc_11b5cthread-pre-split.loopexit ], [ %v3_11b64, %.thread4 ]
  br label %dec_label_pc_11b5c

dec_label_pc_11b5c.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11b5c

dec_label_pc_11b5c:                               ; preds = %dec_label_pc_11b5c.loopexit, %dec_label_pc_11b5cthread-pre-split
  %v0_11b70.pr = phi i32 [ %v1_11b6839, %dec_label_pc_11b5cthread-pre-split ], [ %storemerge101, %dec_label_pc_11b5c.loopexit ]
  %v1_11b64 = phi i32 [ %v0_11b5c.pr, %dec_label_pc_11b5cthread-pre-split ], [ %v4_11b50, %dec_label_pc_11b5c.loopexit ]
  %v2_11b5c = icmp slt i32 %v1_11b64, 0
  br i1 %v2_11b5c, label %dec_label_pc_11b70, label %bb79

bb79:                                             ; preds = %dec_label_pc_11b5c
  %v4_11b60 = icmp ult i32 %v1_11b64, %v1_11b30
  br i1 %v4_11b60, label %.thread4, label %dec_label_pc_11b70

.thread4:                                         ; preds = %bb79
  %v3_11b64 = mul i32 %v1_11b64, 2
  %v2_11b68 = add i32 %v0_11b70.pr, 1
  br label %dec_label_pc_11b5cthread-pre-split

dec_label_pc_11b70:                               ; preds = %bb79, %dec_label_pc_11b5c
  %v2_11b70 = add i32 %v0_11b70.pr, -3
  %v5_11b74 = icmp slt i32 %v0_11b70.pr, 3
  br i1 %v5_11b74, label %dec_label_pc_11bb4, label %dec_label_pc_11b78

dec_label_pc_11b78:                               ; preds = %dec_label_pc_11b70, %bb83
  %v6_11ba0 = phi i32 [ %v0_11ba8, %bb83 ], [ %v2_11b70, %dec_label_pc_11b70 ]
  %v1_11b7c = phi i32 [ %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, %bb83 ], [ %v1_11b30, %dec_label_pc_11b70 ]
  %v3_11b9c12 = phi i32 [ %v3_11b9c, %bb83 ], [ %v1_11b64, %dec_label_pc_11b70 ]
  %v3_11b78 = icmp ult i32 %v1_11b7c, %v3_11b9c12
  %v3_11b7c = select i1 %v3_11b78, i32 0, i32 %v3_11b9c12
  %v1_11b84 = sub i32 %v1_11b7c, %v3_11b7c
  %v4_11b80 = udiv i32 %v3_11b9c12, 2
  %v6_11b80 = icmp ult i32 %v1_11b84, %v4_11b80
  %v6_11b84 = select i1 %v6_11b80, i32 0, i32 %v4_11b80
  %v1_11b84.v6_11b84 = sub i32 %v1_11b84, %v6_11b84
  %.demorgan = and i1 %v3_11b78, %v6_11b80
  %v4_11b88 = udiv i32 %v3_11b9c12, 4
  %v6_11b88 = icmp ult i32 %v1_11b84.v6_11b84, %v4_11b88
  %v6_11b8c = select i1 %v6_11b88, i32 0, i32 %v4_11b88
  %v1_11b84.v6_11b84.v6_11b8c = sub i32 %v1_11b84.v6_11b84, %v6_11b8c
  %.demorgan71 = and i1 %.demorgan, %v6_11b88
  %v4_11b90 = udiv i32 %v3_11b9c12, 8
  %v6_11b90 = icmp ult i32 %v1_11b84.v6_11b84.v6_11b8c, %v4_11b90
  %v6_11b94 = select i1 %v6_11b90, i32 0, i32 %v4_11b90
  %v1_11b84.v6_11b84.v6_11b8c.v6_11b94 = sub i32 %v1_11b84.v6_11b84.v6_11b8c, %v6_11b94
  %.demorgan72 = and i1 %.demorgan71, %v6_11b90
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11b78
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11b78, %bb80
  %v2_11b98 = add i32 %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, -1
  %v4_11b98 = sub i32 0, %v1_11b84.v6_11b84.v6_11b8c.v6_11b94
  %v5_11b98 = and i32 %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, %v4_11b98
  %v3_11b9c = udiv i32 %v3_11b9c12, 16
  %v5_11ba0 = icmp slt i32 %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, 1
  br i1 %v5_11ba0, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11ba0 = add i32 %v6_11ba0, -4
  %v9_11ba0 = sub i32 3, %v6_11ba0
  %v10_11ba0 = and i32 %v9_11ba0, %v6_11ba0
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11ba8 = phi i32 [ %v6_11ba0, %bb81 ], [ %v7_11ba0, %bb82 ]
  %v0_11ba415.in = phi i32 [ %v2_11b98, %bb81 ], [ %v7_11ba0, %bb82 ]
  %v1_11ba414.in = phi i32 [ %v5_11b98, %bb81 ], [ %v10_11ba0, %bb82 ]
  %v1_11ba414 = icmp slt i32 %v1_11ba414.in, 0
  %v0_11ba415 = icmp slt i32 %v0_11ba415.in, 0
  %v2_11ba4 = xor i1 %v0_11ba415, %v1_11ba414
  br i1 %v2_11ba4, label %dec_label_pc_11ba8, label %dec_label_pc_11b78

dec_label_pc_11ba8:                               ; preds = %bb83
  %v1_11ba8 = urem i32 %v0_11ba8, 4
  %v2_11ba8 = icmp eq i32 %v1_11ba8, 0
  br i1 %v2_11ba8, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11ba8
  %v3_11bac = icmp eq i32 %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, 0
  br i1 %v3_11bac, label %bb76, label %dec_label_pc_11bb4

dec_label_pc_11bb4:                               ; preds = %bb84, %dec_label_pc_11b70
  %v0_11bc8 = phi i32 [ %v3_11b9c, %bb84 ], [ %v1_11b64, %dec_label_pc_11b70 ]
  %v1_11bc4 = phi i32 [ %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, %bb84 ], [ %v1_11b30, %dec_label_pc_11b70 ]
  %v0_11bb4 = phi i32 [ %v0_11ba8, %bb84 ], [ %v2_11b70, %dec_label_pc_11b70 ]
  %v5_11bb8 = icmp slt i32 %v0_11bb4, -2
  br i1 %v5_11bb8, label %dec_label_pc_11bd8, label %dec_label_pc_11bbc

dec_label_pc_11bbc:                               ; preds = %dec_label_pc_11bb4
  %v8_11bb4 = icmp eq i32 %v0_11bb4, -2
  br i1 %v8_11bb4, label %dec_label_pc_11bcc, label %dec_label_pc_11bc0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bbc
  %v3_11bc0 = icmp ult i32 %v1_11bc4, %v0_11bc8
  br i1 %v3_11bc0, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11bc0
  %v2_11bc0 = sub i32 %v1_11bc4, %v0_11bc8
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11bc0, %bb85
  %v0_11bcc52 = phi i32 [ %v1_11bc4, %dec_label_pc_11bc0 ], [ %v2_11bc0, %bb85 ]
  %v3_11bc8 = udiv i32 %v0_11bc8, 2
  br label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11bbc, %bb86
  %v0_11bd4 = phi i32 [ %v0_11bc8, %dec_label_pc_11bbc ], [ %v3_11bc8, %bb86 ]
  %v1_11bd0 = phi i32 [ %v1_11bc4, %dec_label_pc_11bbc ], [ %v0_11bcc52, %bb86 ]
  %v3_11bcc = icmp ult i32 %v1_11bd0, %v0_11bd4
  br i1 %v3_11bcc, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11bcc
  %v2_11bcc = sub i32 %v1_11bd0, %v0_11bd4
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11bcc, %bb87
  %v0_11bd855 = phi i32 [ %v1_11bd0, %dec_label_pc_11bcc ], [ %v2_11bcc, %bb87 ]
  %v3_11bd4 = udiv i32 %v0_11bd4, 2
  br label %dec_label_pc_11bd8

dec_label_pc_11bd8:                               ; preds = %dec_label_pc_11bb4, %bb88
  %v2_11bdc = phi i32 [ %v0_11bc8, %dec_label_pc_11bb4 ], [ %v3_11bd4, %bb88 ]
  %v1_11bdc = phi i32 [ %v1_11bc4, %dec_label_pc_11bb4 ], [ %v0_11bd855, %bb88 ]
  %v3_11bd8 = icmp ult i32 %v1_11bdc, %v2_11bdc
  br i1 %v3_11bd8, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11bd8
  %v2_11bd8 = sub i32 %v1_11bdc, %v2_11bdc
  br label %bb76

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11b28
  %v0_11be4 = load i32, i32* @lr, align 4
  %v0_11be8 = call i32 @function_11cd8()
  call void @__pseudo_branch(i32 %v0_11be4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11bdc, { 1, 2, 0 }
  uselistorder i32 %v0_11bc8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11ba8, { 1, 0, 2 }
  uselistorder i32 %v7_11ba0, { 1, 0 }
  uselistorder i32 %v3_11b9c, { 1, 0 }
  uselistorder i32 %v1_11b84.v6_11b84.v6_11b8c.v6_11b94, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11b90, { 1, 0 }
  uselistorder i32 %v4_11b88, { 1, 0 }
  uselistorder i32 %v4_11b80, { 1, 0 }
  uselistorder i32 %v6_11ba0, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11b70, { 1, 0 }
  uselistorder i32 %v1_11b64, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11b50, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11b5c.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11b30, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11bd8, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11bcc, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11b78, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_11bf4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11bf4:
  store i32 %arg1, i32* @r0, align 4
  %v2_11bf4 = icmp eq i32 %arg2, 0
  br i1 %v2_11bf4, label %dec_label_pc_11cc8, label %dec_label_pc_11bfc

dec_label_pc_11bfc:                               ; preds = %dec_label_pc_11bf4
  %v1_11bf4 = icmp slt i32 %arg2, 0
  br i1 %v1_11bf4, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11bfc
  %v2_11bfc = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11bfc, %bb
  %v4_11c14 = phi i32 [ %arg2, %dec_label_pc_11bfc ], [ %v2_11bfc, %bb ]
  %v0_11c00 = load i32, i32* @r0, align 4
  %v1_11c00 = icmp slt i32 %v0_11c00, 0
  br i1 %v1_11c00, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11c04 = sub i32 0, %v0_11c00
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11c0c = phi i32 [ %v0_11c00, %bb79 ], [ %v2_11c04, %bb80 ]
  %v1_11c08 = add i32 %v4_11c14, -1
  %v7_11c08 = icmp eq i32 %v4_11c14, 1
  br i1 %v7_11c08, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11c0c = icmp eq i32 %v1_11c0c, %v4_11c14
  br i1 %v10_11c0c, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11c0c = icmp ult i32 %v1_11c0c, %v4_11c14
  br i1 %v4_11c0c, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11c14 = and i32 %v1_11c08, %v4_11c14
  %v8_11c14 = icmp eq i32 %v6_11c14, 0
  br i1 %v8_11c14, label %.thread72, label %dec_label_pc_11c24.preheader

dec_label_pc_11c24.preheader:                     ; preds = %bb84
  %v2_11c24109 = icmp ugt i32 %v4_11c14, 268435455
  br i1 %v2_11c24109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11c1864 = phi i32 [ %v1_11c0c, %bb84 ], [ 0, %.thread70 ]
  %v3_11c18 = and i32 %v1_11c1864, %v1_11c08
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11c24.preheader
  %v0_11c38.pr35.lcssa = phi i32 [ %v4_11c14, %dec_label_pc_11c24.preheader ], [ %v4_11c2c, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11c24.preheader ], [ %v2_11c309, %.thread2.thread7 ]
  br label %dec_label_pc_11c38thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11c24.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_11c309, %.thread2.thread7 ], [ 0, %dec_label_pc_11c24.preheader ]
  %v0_11c38.pr35110 = phi i32 [ %v4_11c2c, %.thread2.thread7 ], [ %v4_11c14, %dec_label_pc_11c24.preheader ]
  %v4_11c28 = icmp ult i32 %v0_11c38.pr35110, %v1_11c0c
  br i1 %v4_11c28, label %bb86, label %dec_label_pc_11c38thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11c2c = and i32 %v0_11c38.pr35110, 268435456
  %v3_11c2c = icmp eq i32 %v2_11c2c, 0
  %v4_11c2c = mul i32 %v0_11c38.pr35110, 16
  br i1 %v3_11c2c, label %.thread2.thread7, label %dec_label_pc_11c38.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11c309 = add i32 %storemerge111, 4
  %v2_11c24 = icmp ugt i32 %v4_11c2c, 268435455
  br i1 %v2_11c24, label %.thread1, label %bb85

dec_label_pc_11c38thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11c38thread-pre-split.loopexit

dec_label_pc_11c38thread-pre-split.loopexit:      ; preds = %dec_label_pc_11c38thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11c38.pr35108 = phi i32 [ %v0_11c38.pr35.lcssa, %.thread1 ], [ %v0_11c38.pr35110, %dec_label_pc_11c38thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11c38thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11c38thread-pre-split

dec_label_pc_11c38thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11c38thread-pre-split.loopexit
  %v1_11c4441 = phi i32 [ %storemerge105, %dec_label_pc_11c38thread-pre-split.loopexit ], [ %v2_11c44, %.thread4 ]
  %v2_11c3c36 = phi i32 [ %v1_11c0c, %dec_label_pc_11c38thread-pre-split.loopexit ], [ %v2_11c3c, %.thread4 ]
  %v0_11c38.pr = phi i32 [ %v0_11c38.pr35108, %dec_label_pc_11c38thread-pre-split.loopexit ], [ %v3_11c40, %.thread4 ]
  br label %dec_label_pc_11c38

dec_label_pc_11c38.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11c38

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c38.loopexit, %dec_label_pc_11c38thread-pre-split
  %v0_11c4c.pr = phi i32 [ %v1_11c4441, %dec_label_pc_11c38thread-pre-split ], [ %storemerge111, %dec_label_pc_11c38.loopexit ]
  %v2_11c3c = phi i32 [ %v2_11c3c36, %dec_label_pc_11c38thread-pre-split ], [ %v1_11c0c, %dec_label_pc_11c38.loopexit ]
  %v1_11c40 = phi i32 [ %v0_11c38.pr, %dec_label_pc_11c38thread-pre-split ], [ %v4_11c2c, %dec_label_pc_11c38.loopexit ]
  %v2_11c38 = icmp slt i32 %v1_11c40, 0
  br i1 %v2_11c38, label %dec_label_pc_11c4c, label %bb87

bb87:                                             ; preds = %dec_label_pc_11c38
  %v4_11c3c = icmp ult i32 %v1_11c40, %v2_11c3c
  br i1 %v4_11c3c, label %.thread4, label %dec_label_pc_11c4c

.thread4:                                         ; preds = %bb87
  %v3_11c40 = mul i32 %v1_11c40, 2
  %v2_11c44 = add i32 %v0_11c4c.pr, 1
  br label %dec_label_pc_11c38thread-pre-split

dec_label_pc_11c4c:                               ; preds = %bb87, %dec_label_pc_11c38
  %v2_11c4c = add i32 %v0_11c4c.pr, -3
  %v5_11c50 = icmp slt i32 %v0_11c4c.pr, 3
  br i1 %v5_11c50, label %dec_label_pc_11c90, label %dec_label_pc_11c54

dec_label_pc_11c54:                               ; preds = %dec_label_pc_11c4c, %bb91
  %v6_11c7c = phi i32 [ %v0_11c84, %bb91 ], [ %v2_11c4c, %dec_label_pc_11c4c ]
  %v1_11c58 = phi i32 [ %v1_11c60.v6_11c60.v6_11c68.v6_11c70, %bb91 ], [ %v2_11c3c, %dec_label_pc_11c4c ]
  %v3_11c7810 = phi i32 [ %v3_11c78, %bb91 ], [ %v1_11c40, %dec_label_pc_11c4c ]
  %v3_11c54 = icmp ult i32 %v1_11c58, %v3_11c7810
  %v3_11c58 = select i1 %v3_11c54, i32 0, i32 %v3_11c7810
  %v1_11c60 = sub i32 %v1_11c58, %v3_11c58
  %v4_11c5c = udiv i32 %v3_11c7810, 2
  %v6_11c5c = icmp ult i32 %v1_11c60, %v4_11c5c
  %v6_11c60 = select i1 %v6_11c5c, i32 0, i32 %v4_11c5c
  %v1_11c60.v6_11c60 = sub i32 %v1_11c60, %v6_11c60
  %.demorgan = and i1 %v3_11c54, %v6_11c5c
  %v4_11c64 = udiv i32 %v3_11c7810, 4
  %v6_11c64 = icmp ult i32 %v1_11c60.v6_11c60, %v4_11c64
  %v6_11c68 = select i1 %v6_11c64, i32 0, i32 %v4_11c64
  %v1_11c60.v6_11c60.v6_11c68 = sub i32 %v1_11c60.v6_11c60, %v6_11c68
  %.demorgan76 = and i1 %.demorgan, %v6_11c64
  %v4_11c6c = udiv i32 %v3_11c7810, 8
  %v6_11c6c = icmp ult i32 %v1_11c60.v6_11c60.v6_11c68, %v4_11c6c
  %v6_11c70 = select i1 %v6_11c6c, i32 0, i32 %v4_11c6c
  %v1_11c60.v6_11c60.v6_11c68.v6_11c70 = sub i32 %v1_11c60.v6_11c60.v6_11c68, %v6_11c70
  %.demorgan77 = and i1 %.demorgan76, %v6_11c6c
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11c54
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11c54, %bb88
  %v2_11c74 = add i32 %v1_11c60.v6_11c60.v6_11c68.v6_11c70, -1
  %v4_11c74 = sub i32 0, %v1_11c60.v6_11c60.v6_11c68.v6_11c70
  %v5_11c74 = and i32 %v1_11c60.v6_11c60.v6_11c68.v6_11c70, %v4_11c74
  %v3_11c78 = udiv i32 %v3_11c7810, 16
  %v5_11c7c = icmp slt i32 %v1_11c60.v6_11c60.v6_11c68.v6_11c70, 1
  br i1 %v5_11c7c, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11c7c = add i32 %v6_11c7c, -4
  %v9_11c7c = sub i32 3, %v6_11c7c
  %v10_11c7c = and i32 %v9_11c7c, %v6_11c7c
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11c84 = phi i32 [ %v6_11c7c, %bb89 ], [ %v7_11c7c, %bb90 ]
  %v0_11c8013.in = phi i32 [ %v2_11c74, %bb89 ], [ %v7_11c7c, %bb90 ]
  %v1_11c8012.in = phi i32 [ %v5_11c74, %bb89 ], [ %v10_11c7c, %bb90 ]
  %v1_11c8012 = icmp slt i32 %v1_11c8012.in, 0
  %v0_11c8013 = icmp slt i32 %v0_11c8013.in, 0
  %v2_11c80 = xor i1 %v0_11c8013, %v1_11c8012
  br i1 %v2_11c80, label %dec_label_pc_11c84, label %dec_label_pc_11c54

dec_label_pc_11c84:                               ; preds = %bb91
  %v1_11c84 = urem i32 %v0_11c84, 4
  %v2_11c84 = icmp eq i32 %v1_11c84, 0
  br i1 %v2_11c84, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11c84
  %v3_11c88 = icmp eq i32 %v1_11c60.v6_11c60.v6_11c68.v6_11c70, 0
  br i1 %v3_11c88, label %.thread6, label %dec_label_pc_11c90

dec_label_pc_11c90:                               ; preds = %bb92, %dec_label_pc_11c4c
  %v0_11ca4 = phi i32 [ %v3_11c78, %bb92 ], [ %v1_11c40, %dec_label_pc_11c4c ]
  %v1_11ca0 = phi i32 [ %v1_11c60.v6_11c60.v6_11c68.v6_11c70, %bb92 ], [ %v2_11c3c, %dec_label_pc_11c4c ]
  %v0_11c90 = phi i32 [ %v0_11c84, %bb92 ], [ %v2_11c4c, %dec_label_pc_11c4c ]
  %v5_11c94 = icmp slt i32 %v0_11c90, -2
  br i1 %v5_11c94, label %dec_label_pc_11cb4, label %dec_label_pc_11c98

dec_label_pc_11c98:                               ; preds = %dec_label_pc_11c90
  %v8_11c90 = icmp eq i32 %v0_11c90, -2
  br i1 %v8_11c90, label %dec_label_pc_11ca8, label %dec_label_pc_11c9c

dec_label_pc_11c9c:                               ; preds = %dec_label_pc_11c98
  %v3_11c9c = icmp ult i32 %v1_11ca0, %v0_11ca4
  br i1 %v3_11c9c, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11c9c
  %v2_11c9c = sub i32 %v1_11ca0, %v0_11ca4
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11c9c, %bb93
  %v0_11ca854 = phi i32 [ %v1_11ca0, %dec_label_pc_11c9c ], [ %v2_11c9c, %bb93 ]
  %v3_11ca4 = udiv i32 %v0_11ca4, 2
  br label %dec_label_pc_11ca8

dec_label_pc_11ca8:                               ; preds = %dec_label_pc_11c98, %bb94
  %v0_11cb0 = phi i32 [ %v0_11ca4, %dec_label_pc_11c98 ], [ %v3_11ca4, %bb94 ]
  %v1_11cac = phi i32 [ %v1_11ca0, %dec_label_pc_11c98 ], [ %v0_11ca854, %bb94 ]
  %v3_11ca8 = icmp ult i32 %v1_11cac, %v0_11cb0
  br i1 %v3_11ca8, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11ca8
  %v2_11ca8 = sub i32 %v1_11cac, %v0_11cb0
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11ca8, %bb95
  %v0_11cb457 = phi i32 [ %v1_11cac, %dec_label_pc_11ca8 ], [ %v2_11ca8, %bb95 ]
  %v3_11cb0 = udiv i32 %v0_11cb0, 2
  br label %dec_label_pc_11cb4

dec_label_pc_11cb4:                               ; preds = %dec_label_pc_11c90, %bb96
  %v2_11cb8 = phi i32 [ %v0_11ca4, %dec_label_pc_11c90 ], [ %v3_11cb0, %bb96 ]
  %v1_11cb8 = phi i32 [ %v1_11ca0, %dec_label_pc_11c90 ], [ %v0_11cb457, %bb96 ]
  %v3_11cb4 = icmp ult i32 %v1_11cb8, %v2_11cb8
  br i1 %v3_11cb4, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11cb4
  %v2_11cb4 = sub i32 %v1_11cb8, %v2_11cb8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11cb4, %bb83, %.thread72, %dec_label_pc_11c84, %bb92, %bb97
  %v1_11cc0 = phi i32 [ %v1_11c60.v6_11c60.v6_11c68.v6_11c70, %dec_label_pc_11c84 ], [ 0, %bb92 ], [ %v1_11cb8, %dec_label_pc_11cb4 ], [ %v2_11cb4, %bb97 ], [ %v3_11c18, %.thread72 ], [ %v1_11c0c, %bb83 ]
  br i1 %v1_11c00, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11cc0 = sub i32 0, %v1_11cc0
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11cc4 = phi i32 [ %v1_11cc0, %.thread6 ], [ %v2_11cc0, %bb98 ]
  ret i32 %v1_11cc4

dec_label_pc_11cc8:                               ; preds = %dec_label_pc_11bf4
  %v0_11cc8 = load i32, i32* @lr, align 4
  %v0_11ccc = call i32 @function_11cd8()
  call void @__pseudo_branch(i32 %v0_11cc8)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11ca4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11c84, { 1, 0, 2 }
  uselistorder i32 %v7_11c7c, { 1, 0 }
  uselistorder i32 %v3_11c78, { 1, 0 }
  uselistorder i32 %v1_11c60.v6_11c60.v6_11c68.v6_11c70, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11c6c, { 1, 0 }
  uselistorder i32 %v4_11c64, { 1, 0 }
  uselistorder i32 %v4_11c5c, { 1, 0 }
  uselistorder i32 %v6_11c7c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11c4c, { 1, 0 }
  uselistorder i32 %v1_11c40, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11c3c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11c2c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11c38.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11c0c, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11c14, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11cd8, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11cb4, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11ca8, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11c54, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11cd8() local_unnamed_addr {
dec_label_pc_11cd8:
  %v1_11cd8 = load i32, i32* @r0, align 4
  ret i32 %v1_11cd8
}

define i32 @function_11cdc(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11cdc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_11cdc = load i32, i32* @r2, align 4
  %v1_11cec = add i32 %arg2, -12
  store i32 %v6_11cdc, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_11cec, 2
  br i1 %tmp, label %dec_label_pc_11d14, label %dec_label_pc_11d0c

dec_label_pc_11d0c:                               ; preds = %dec_label_pc_11cdc
  %v0_11d0c = call i32 @function_11d50()
  br label %dec_label_pc_11d40

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11cdc
  %v2_11d1c = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_11d1c, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_11d1c, -4095
  br i1 %tmp8, label %dec_label_pc_11d40, label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11d14
  %v0_11d2c = call i32 @function_12374()
  %v0_11d30 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d30 = sub i32 0, %v0_11d30
  %v2_11d34 = inttoptr i32 %v0_11d2c to i32*
  store i32 %v1_11d30, i32* %v2_11d34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d40

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11d2c, %dec_label_pc_11d14, %dec_label_pc_11d0c
  %storemerge = phi i32 [ %v0_11d0c, %dec_label_pc_11d0c ], [ %v2_11d1c, %dec_label_pc_11d14 ], [ -1, %dec_label_pc_11d2c ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11d1c, { 1, 0, 2 }
}

define i32 @function_11d50() local_unnamed_addr {
dec_label_pc_11d50:
  %r4.global-to-local = alloca i32, align 4
  %v0_11d70 = load i32, i32* @r0, align 4
  store i32 %v0_11d70, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11d70, -4095
  br i1 %tmp, label %dec_label_pc_11d8c, label %dec_label_pc_11d7c

dec_label_pc_11d7c:                               ; preds = %dec_label_pc_11d50
  %v0_11d7c = call i32 @function_12374()
  %v0_11d80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11d80 = sub i32 0, %v0_11d80
  %v2_11d84 = inttoptr i32 %v0_11d7c to i32*
  store i32 %v1_11d80, i32* %v2_11d84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11d8c

dec_label_pc_11d8c:                               ; preds = %dec_label_pc_11d50, %dec_label_pc_11d7c
  %v0_11d8c = phi i32 [ %v0_11d70, %dec_label_pc_11d50 ], [ -1, %dec_label_pc_11d7c ]
  ret i32 %v0_11d8c

; uselistorder directives
  uselistorder i32 %v0_11d70, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d8c, { 1, 0 }
}

define i32 @function_11da0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11da0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11da0 = load i32, i32* @r4, align 4
  store i32 %v3_11da0, i32* %stack_var_-8, align 4
  %v1_11da4 = call i32 @close(i32 %arg1)
  store i32 %v1_11da4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11da4, -4095
  br i1 %tmp, label %dec_label_pc_11dc4, label %dec_label_pc_11db4

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11da0
  %v0_11db4 = call i32 @function_12374()
  %v0_11db8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11db8 = sub i32 0, %v0_11db8
  %v2_11dbc = inttoptr i32 %v0_11db4 to i32*
  store i32 %v1_11db8, i32* %v2_11dbc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11dc4

dec_label_pc_11dc4:                               ; preds = %dec_label_pc_11da0, %dec_label_pc_11db4
  %v0_11dc4 = phi i32 [ %v1_11da4, %dec_label_pc_11da0 ], [ -1, %dec_label_pc_11db4 ]
  %v2_11dc8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11dc8, i32* @r4, align 4
  ret i32 %v0_11dc4

; uselistorder directives
  uselistorder i32 %v1_11da4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11dc4, { 1, 0 }
}

define i32 @function_11dcc() local_unnamed_addr {
dec_label_pc_11dcc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11dcc = load i32, i32* @r4, align 4
  store i32 %v3_11dcc, i32* %stack_var_-8, align 4
  %v0_11dd0 = call i32 @fork()
  store i32 %v0_11dd0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11dd0, -4095
  br i1 %tmp, label %dec_label_pc_11df0, label %dec_label_pc_11de0

dec_label_pc_11de0:                               ; preds = %dec_label_pc_11dcc
  %v0_11de0 = call i32 @function_12374()
  %v0_11de4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11de4 = sub i32 0, %v0_11de4
  %v2_11de8 = inttoptr i32 %v0_11de0 to i32*
  store i32 %v1_11de4, i32* %v2_11de8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11df0

dec_label_pc_11df0:                               ; preds = %dec_label_pc_11dcc, %dec_label_pc_11de0
  %v0_11df0 = phi i32 [ %v0_11dd0, %dec_label_pc_11dcc ], [ -1, %dec_label_pc_11de0 ]
  %v2_11df4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11df4, i32* @r4, align 4
  ret i32 %v0_11df0

; uselistorder directives
  uselistorder i32 %v0_11dd0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11df0, { 1, 0 }
}

define i32 @function_11df8() local_unnamed_addr {
dec_label_pc_11df8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11df8 = load i32, i32* @r4, align 4
  store i32 %v3_11df8, i32* %stack_var_-8, align 4
  %v0_11dfc = call i32 @getpid()
  store i32 %v0_11dfc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11dfc, -4095
  br i1 %tmp, label %dec_label_pc_11e1c, label %dec_label_pc_11e0c

dec_label_pc_11e0c:                               ; preds = %dec_label_pc_11df8
  %v0_11e0c = call i32 @function_12374()
  %v0_11e10 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e10 = sub i32 0, %v0_11e10
  %v2_11e14 = inttoptr i32 %v0_11e0c to i32*
  store i32 %v1_11e10, i32* %v2_11e14, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e1c

dec_label_pc_11e1c:                               ; preds = %dec_label_pc_11df8, %dec_label_pc_11e0c
  %v0_11e1c = phi i32 [ %v0_11dfc, %dec_label_pc_11df8 ], [ -1, %dec_label_pc_11e0c ]
  %v2_11e20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e20, i32* @r4, align 4
  ret i32 %v0_11e1c

; uselistorder directives
  uselistorder i32 %v0_11dfc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e1c, { 1, 0 }
}

define i32 @function_11e24() local_unnamed_addr {
dec_label_pc_11e24:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e24 = load i32, i32* @r4, align 4
  store i32 %v3_11e24, i32* %stack_var_-8, align 4
  %v0_11e28 = call i32 @getppid()
  store i32 %v0_11e28, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e28, -4095
  br i1 %tmp, label %dec_label_pc_11e48, label %dec_label_pc_11e38

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e24
  %v0_11e38 = call i32 @function_12374()
  %v0_11e3c = load i32, i32* %r4.global-to-local, align 4
  %v1_11e3c = sub i32 0, %v0_11e3c
  %v2_11e40 = inttoptr i32 %v0_11e38 to i32*
  store i32 %v1_11e3c, i32* %v2_11e40, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e48

dec_label_pc_11e48:                               ; preds = %dec_label_pc_11e24, %dec_label_pc_11e38
  %v0_11e48 = phi i32 [ %v0_11e28, %dec_label_pc_11e24 ], [ -1, %dec_label_pc_11e38 ]
  %v2_11e4c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e4c, i32* @r4, align 4
  ret i32 %v0_11e48

; uselistorder directives
  uselistorder i32 %v0_11e28, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e48, { 1, 0 }
}

define i32 @function_11e50(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11e50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11e50 = load i32, i32* @r3, align 4
  store i32 %v9_11e50, i32* %stack_var_-4, align 4
  %v2_11e5c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11e5c, i32* @r3, align 4
  %v2_11e6c = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11e6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11e6c, -4095
  br i1 %tmp, label %dec_label_pc_11e8c, label %dec_label_pc_11e7c

dec_label_pc_11e7c:                               ; preds = %dec_label_pc_11e50
  %v0_11e7c = call i32 @function_12374()
  %v0_11e80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e80 = sub i32 0, %v0_11e80
  store i32 %v1_11e80, i32* @r3, align 4
  %v2_11e84 = inttoptr i32 %v0_11e7c to i32*
  store i32 %v1_11e80, i32* %v2_11e84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e8c

dec_label_pc_11e8c:                               ; preds = %dec_label_pc_11e50, %dec_label_pc_11e7c
  %v0_11e8c = phi i32 [ %v2_11e6c, %dec_label_pc_11e50 ], [ -1, %dec_label_pc_11e7c ]
  ret i32 %v0_11e8c

; uselistorder directives
  uselistorder i32 %v2_11e6c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11e8c, { 1, 0 }
}

define i32 @function_11ea0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ea0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ea0 = load i32, i32* @r4, align 4
  store i32 %v3_11ea0, i32* %stack_var_-8, align 4
  %v2_11ea4 = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_11ea8 = icmp eq i32 %v2_11ea4, -4096
  store i1 %v7_11ea8, i1* @cpsr_z, align 1
  store i32 %v2_11ea4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11ea4, -4095
  br i1 %tmp, label %dec_label_pc_11ec4, label %dec_label_pc_11eb4

dec_label_pc_11eb4:                               ; preds = %dec_label_pc_11ea0
  %v0_11eb4 = call i32 @function_12374()
  %v0_11eb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11eb8 = sub i32 0, %v0_11eb8
  %v2_11ebc = inttoptr i32 %v0_11eb4 to i32*
  store i32 %v1_11eb8, i32* %v2_11ebc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ec4

dec_label_pc_11ec4:                               ; preds = %dec_label_pc_11ea0, %dec_label_pc_11eb4
  %v0_11ec4 = phi i32 [ %v2_11ea4, %dec_label_pc_11ea0 ], [ -1, %dec_label_pc_11eb4 ]
  %v2_11ec8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ec8, i32* @r4, align 4
  ret i32 %v0_11ec4

; uselistorder directives
  uselistorder i32 %v2_11ea4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_11ec4, { 1, 0 }
}

define i32 @function_11ecc(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ecc:
  %r4.global-to-local = alloca i32, align 4
  %v6_11ecc = load i32, i32* @r2, align 4
  %v1_11edc = and i32 %arg2, 64
  store i32 %v1_11edc, i32* @r3, align 4
  %v2_11edc = icmp eq i32 %v1_11edc, 0
  br i1 %v2_11edc, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11ecc
  store i32 %v6_11ecc, i32* @r3, align 4
  %phitmp = urem i32 %v6_11ecc, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11ecc, %bb
  %v0_11eec = phi i32 [ 0, %dec_label_pc_11ecc ], [ %phitmp, %bb ]
  store i32 %v0_11eec, i32* @r2, align 4
  %v4_11ef4 = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11ef8 = icmp eq i32 %v4_11ef4, -4096
  store i1 %v7_11ef8, i1* @cpsr_z, align 1
  store i32 %v4_11ef4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11ef4, -4095
  br i1 %tmp, label %dec_label_pc_11f14, label %dec_label_pc_11f04

dec_label_pc_11f04:                               ; preds = %.thread1
  %v0_11f04 = call i32 @function_12374()
  %v0_11f08 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f08 = sub i32 0, %v0_11f08
  store i32 %v1_11f08, i32* @r3, align 4
  %v2_11f0c = inttoptr i32 %v0_11f04 to i32*
  store i32 %v1_11f08, i32* %v2_11f0c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f14

dec_label_pc_11f14:                               ; preds = %.thread1, %dec_label_pc_11f04
  %v0_11f14 = phi i32 [ %v4_11ef4, %.thread1 ], [ -1, %dec_label_pc_11f04 ]
  ret i32 %v0_11f14

; uselistorder directives
  uselistorder i32 %v4_11ef4, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11f14, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11f28(i32 %arg1) local_unnamed_addr {
dec_label_pc_11f28:
  store i32 %arg1, i32* @r2, align 4
  %v0_11f30 = load i32, i32* @r0, align 4
  %v2_11f30 = inttoptr i32 %v0_11f30 to i8*
  %v3_11f30 = call i32 @function_11ecc(i8* %v2_11f30, i32 577)
  %v0_11f34 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11f34, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11f28
  %v6_11f34 = and i32 %v3_11f30, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11f28, %bb
  %v7_11f34 = phi i32 [ %v3_11f30, %dec_label_pc_11f28 ], [ %v6_11f34, %bb ]
  ret i32 %v7_11f34

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11f38(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f38:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f38 = load i32, i32* @r4, align 4
  store i32 %v3_11f38, i32* %stack_var_-8, align 4
  %v2_11f40 = load i32, i32* @r2, align 4
  %v3_11f40 = load i32, i32* @r3, align 4
  %v4_11f40 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11f40, i32 %v3_11f40, i32 0)
  store i32 %v4_11f40, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11f40, -4095
  br i1 %tmp, label %dec_label_pc_11f60, label %dec_label_pc_11f50

dec_label_pc_11f50:                               ; preds = %dec_label_pc_11f38
  %v0_11f50 = call i32 @function_12374()
  %v0_11f54 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f54 = sub i32 0, %v0_11f54
  %v2_11f58 = inttoptr i32 %v0_11f50 to i32*
  store i32 %v1_11f54, i32* %v2_11f58, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f60

dec_label_pc_11f60:                               ; preds = %dec_label_pc_11f38, %dec_label_pc_11f50
  %v0_11f60 = phi i32 [ %v4_11f40, %dec_label_pc_11f38 ], [ -1, %dec_label_pc_11f50 ]
  %v2_11f64 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11f64, i32* @r4, align 4
  ret i32 %v0_11f60

; uselistorder directives
  uselistorder i32 %v4_11f40, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f60, { 1, 0 }
}

define i32 @function_11f68(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11f68:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f68 = load i32, i32* @r4, align 4
  store i32 %v3_11f68, i32* %stack_var_-8, align 4
  %v4_11f6c = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11f6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11f6c, -4095
  br i1 %tmp, label %dec_label_pc_11f8c, label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %dec_label_pc_11f68
  %v0_11f7c = call i32 @function_12374()
  %v0_11f80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f80 = sub i32 0, %v0_11f80
  %v2_11f84 = inttoptr i32 %v0_11f7c to i32*
  store i32 %v1_11f80, i32* %v2_11f84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f8c

dec_label_pc_11f8c:                               ; preds = %dec_label_pc_11f68, %dec_label_pc_11f7c
  %v0_11f8c = phi i32 [ %v4_11f6c, %dec_label_pc_11f68 ], [ -1, %dec_label_pc_11f7c ]
  %v2_11f90 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11f90, i32* @r4, align 4
  ret i32 %v0_11f8c

; uselistorder directives
  uselistorder i32 %v4_11f6c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11f8c, { 1, 0 }
}

define i32 @function_11f94(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11f94:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_11f94 = load i32, i32* @r4, align 4
  store i32 %v3_11f94, i32* %stack_var_-8, align 4
  %v7_11f98 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_11f98, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_11f98, -4095
  br i1 %tmp6, label %dec_label_pc_11fb8, label %dec_label_pc_11fa8

dec_label_pc_11fa8:                               ; preds = %dec_label_pc_11f94
  %v0_11fa8 = call i32 @function_12374()
  %v0_11fac = load i32, i32* %r4.global-to-local, align 4
  %v1_11fac = sub i32 0, %v0_11fac
  %v2_11fb0 = inttoptr i32 %v0_11fa8 to i32*
  store i32 %v1_11fac, i32* %v2_11fb0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11fb8

dec_label_pc_11fb8:                               ; preds = %dec_label_pc_11f94, %dec_label_pc_11fa8
  %v0_11fb8 = phi i32 [ %v7_11f98, %dec_label_pc_11f94 ], [ -1, %dec_label_pc_11fa8 ]
  %v2_11fbc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fbc, i32* @r4, align 4
  ret i32 %v0_11fb8

; uselistorder directives
  uselistorder i32 %v7_11f98, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fb8, { 1, 0 }
}

define i32 @function_11fc0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11fc0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fc0 = load i32, i32* @r4, align 4
  store i32 %v3_11fc0, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11fe8, label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fc0
  %v0_11fd8 = call i32 @function_12374()
  %v0_11fdc = load i32, i32* %r4.global-to-local, align 4
  %v1_11fdc = sub i32 0, %v0_11fdc
  %v2_11fe0 = inttoptr i32 %v0_11fd8 to i32*
  store i32 %v1_11fdc, i32* %v2_11fe0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11fec.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11fe8

dec_label_pc_11fe8:                               ; preds = %dec_label_pc_11fc0, %dec_label_pc_11fd8
  %v2_11fec = phi i32 [ %v3_11fc0, %dec_label_pc_11fc0 ], [ %v2_11fec.pre, %dec_label_pc_11fd8 ]
  %v0_11fe8 = phi i32 [ %arg1, %dec_label_pc_11fc0 ], [ -1, %dec_label_pc_11fd8 ]
  store i32 %v2_11fec, i32* @r4, align 4
  ret i32 %v0_11fe8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fe8, { 1, 0 }
}

define i32 @function_11ff0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11ff0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11ff0 = load i32, i32* @r4, align 4
  store i32 %v3_11ff0, i32* %stack_var_-8, align 4
  %v0_11ff4 = call i32 @setsid()
  store i32 %v0_11ff4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ff4, -4095
  br i1 %tmp, label %dec_label_pc_12014, label %dec_label_pc_12004

dec_label_pc_12004:                               ; preds = %dec_label_pc_11ff0
  %v0_12004 = call i32 @function_12374()
  %v0_12008 = load i32, i32* %r4.global-to-local, align 4
  %v1_12008 = sub i32 0, %v0_12008
  %v2_1200c = inttoptr i32 %v0_12004 to i32*
  store i32 %v1_12008, i32* %v2_1200c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12014

dec_label_pc_12014:                               ; preds = %dec_label_pc_11ff0, %dec_label_pc_12004
  %v0_12014 = phi i32 [ %v0_11ff4, %dec_label_pc_11ff0 ], [ -1, %dec_label_pc_12004 ]
  %v2_12018 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12018, i32* @r4, align 4
  ret i32 %v0_12014

; uselistorder directives
  uselistorder i32 %v0_11ff4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12014, { 1, 0 }
}

define i32 @function_1201c(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1201c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1201c = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_1201c, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1201c
  %v3_120245 = load i32, i32* @r4, align 4
  store i32 %v3_120245, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12044

bb:                                               ; preds = %dec_label_pc_1201c
  %v3_12024 = load i32, i32* @r4, align 4
  store i32 %v3_12024, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_12044, label %dec_label_pc_12030

dec_label_pc_12030:                               ; preds = %bb
  %v0_12030 = call i32 @function_12374()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_1203c = inttoptr i32 %v0_12030 to i32*
  store i32 22, i32* %v2_1203c, align 4
  %v0_12068.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12068

dec_label_pc_12044:                               ; preds = %.thread, %bb
  %v7_12044 = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_12044, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_12044, -4095
  br i1 %tmp13, label %dec_label_pc_12064, label %dec_label_pc_12054

dec_label_pc_12054:                               ; preds = %dec_label_pc_12044
  %v0_12054 = call i32 @function_12374()
  %v0_12058 = load i32, i32* %r4.global-to-local, align 4
  %v1_12058 = sub i32 0, %v0_12058
  %v2_1205c = inttoptr i32 %v0_12054 to i32*
  store i32 %v1_12058, i32* %v2_1205c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12064

dec_label_pc_12064:                               ; preds = %dec_label_pc_12044, %dec_label_pc_12054
  %v0_12064 = phi i32 [ %v7_12044, %dec_label_pc_12044 ], [ -1, %dec_label_pc_12054 ]
  store i32 %v0_12064, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12068

dec_label_pc_12068:                               ; preds = %dec_label_pc_12030, %dec_label_pc_12064
  %v0_12068 = phi i32 [ %v0_12068.pre, %dec_label_pc_12030 ], [ %v0_12064, %dec_label_pc_12064 ]
  %v2_1206c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1206c, i32* @r4, align 4
  ret i32 %v0_12068

; uselistorder directives
  uselistorder i32 %v7_12044, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_12068, { 1, 0 }
  uselistorder label %dec_label_pc_12064, { 1, 0 }
  uselistorder label %dec_label_pc_12044, { 1, 0 }
}

define i32 @function_12070(i32* %arg1) local_unnamed_addr {
dec_label_pc_12070:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12070 = load i32, i32* @r4, align 4
  store i32 %v3_12070, i32* %stack_var_-8, align 4
  %v2_12074 = call i32 @time(i32* %arg1)
  store i32 %v2_12074, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12074, -4095
  br i1 %tmp, label %dec_label_pc_12094, label %dec_label_pc_12084

dec_label_pc_12084:                               ; preds = %dec_label_pc_12070
  %v0_12084 = call i32 @function_12374()
  %v0_12088 = load i32, i32* %r4.global-to-local, align 4
  %v1_12088 = sub i32 0, %v0_12088
  %v2_1208c = inttoptr i32 %v0_12084 to i32*
  store i32 %v1_12088, i32* %v2_1208c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12094

dec_label_pc_12094:                               ; preds = %dec_label_pc_12070, %dec_label_pc_12084
  %v0_12094 = phi i32 [ %v2_12074, %dec_label_pc_12070 ], [ -1, %dec_label_pc_12084 ]
  %v2_12098 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12098, i32* @r4, align 4
  ret i32 %v0_12094

; uselistorder directives
  uselistorder i32 %v2_12074, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12094, { 1, 0 }
}

define i32 @function_1209c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1209c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1209c = load i32, i32* @r4, align 4
  store i32 %v3_1209c, i32* %stack_var_-8, align 4
  %v3_120a0 = call i32 @unlink(i8* %arg1)
  store i32 %v3_120a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_120a0, -4095
  br i1 %tmp, label %dec_label_pc_120c0, label %dec_label_pc_120b0

dec_label_pc_120b0:                               ; preds = %dec_label_pc_1209c
  %v0_120b0 = call i32 @function_12374()
  %v0_120b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_120b4 = sub i32 0, %v0_120b4
  %v2_120b8 = inttoptr i32 %v0_120b0 to i32*
  store i32 %v1_120b4, i32* %v2_120b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120c0

dec_label_pc_120c0:                               ; preds = %dec_label_pc_1209c, %dec_label_pc_120b0
  %v0_120c0 = phi i32 [ %v3_120a0, %dec_label_pc_1209c ], [ -1, %dec_label_pc_120b0 ]
  %v2_120c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120c4, i32* @r4, align 4
  ret i32 %v0_120c0

; uselistorder directives
  uselistorder i32 %v3_120a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120c0, { 1, 0 }
}

define i32 @function_120c8(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_120c8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120c8 = load i32, i32* @r4, align 4
  store i32 %v3_120c8, i32* %stack_var_-8, align 4
  %v4_120cc = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_120cc, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_120cc, -4095
  br i1 %tmp, label %dec_label_pc_120ec, label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %dec_label_pc_120c8
  %v0_120dc = call i32 @function_12374()
  %v0_120e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_120e0 = sub i32 0, %v0_120e0
  %v2_120e4 = inttoptr i32 %v0_120dc to i32*
  store i32 %v1_120e0, i32* %v2_120e4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120ec

dec_label_pc_120ec:                               ; preds = %dec_label_pc_120c8, %dec_label_pc_120dc
  %v0_120ec = phi i32 [ %v4_120cc, %dec_label_pc_120c8 ], [ -1, %dec_label_pc_120dc ]
  %v2_120f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120f0, i32* @r4, align 4
  ret i32 %v0_120ec

; uselistorder directives
  uselistorder i32 %v4_120cc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_120ec, { 1, 0 }
}

define i32 @function_120f4(i32* %arg1) local_unnamed_addr {
dec_label_pc_120f4:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_120f4 = load i32, i32* @r4, align 4
  store i32 %v3_120f4, i32* %stack_var_-20, align 4
  %v6_120f4 = load i32, i32* @r5, align 4
  %v9_120f4 = load i32, i32* @r6, align 4
  %v12_120f4 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_120fc = load i32, i32* %arg1, align 4
  store i32 %v2_120fc, i32* %r4.global-to-local, align 4
  %v2_12100 = ptrtoint i32* %stack_var_-36 to i32
  %v1_12104 = add i32 %tmp, 24
  store i32 %v1_12104, i32* @r6, align 4
  %v3_12108 = icmp eq i32 %v2_120fc, -1
  store i32 %v2_12100, i32* @r7, align 4
  store i32 %v1_12104, i32* %r2.global-to-local, align 4
  store i32 %v2_12100, i32* @r0, align 4
  br i1 %v3_12108, label %dec_label_pc_12120, label %dec_label_pc_12134

dec_label_pc_12120:                               ; preds = %dec_label_pc_120f4
  %v0_12120 = call i32 @function_12374()
  %v0_12128 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12128, i32* %r2.global-to-local, align 4
  %v2_1212c = inttoptr i32 %v0_12120 to i32*
  store i32 9, i32* %v2_1212c, align 4
  %v0_1218c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1218c

dec_label_pc_12134:                               ; preds = %dec_label_pc_120f4
  %v8_1213c = call i32 @function_133f0(i32 %v2_12100, i32 ptrtoint (i32* @global_var_133e8.392 to i32), i32 %v1_12104, i32 78832, i32 %v3_120f4, i32 %v6_120f4, i32 %v9_120f4)
  %v1_1214c = call i32 @function_133e8()
  %v0_12158 = load i32, i32* @r5, align 4
  %v1_12158 = inttoptr i32 %v0_12158 to i32*
  %v2_12158 = load i32, i32* %v1_12158, align 4
  store i32 %v2_12158, i32* @r4, align 4
  store i32 %v2_12100, i32* @r0, align 4
  store i32 -1, i32* %v1_12158, align 4
  store i32 ptrtoint (i32* @global_var_12170.396 to i32), i32* @lr, align 4
  %v8_1216c = call i32 @function_133f0(i32 %v2_12100, i32 1, i32 %v1_12104, i32 78832, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12170 = load i32, i32* @r5, align 4
  %v1_12170 = add i32 %v0_12170, 12
  %v2_12170 = inttoptr i32 %v1_12170 to i32*
  %v3_12170 = load i32, i32* %v2_12170, align 4
  store i32 %v3_12170, i32* @r0, align 4
  %v0_12174 = call i32 @function_12a00()
  %v0_12178 = load i32, i32* @r5, align 4
  store i32 %v0_12178, i32* @r0, align 4
  %v0_1217c = call i32 @function_12a00()
  %v0_12180 = load i32, i32* @r4, align 4
  %v1_12184 = call i32 @function_11da0(i32 %v0_12180)
  store i32 %v1_12184, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1218c

dec_label_pc_1218c:                               ; preds = %dec_label_pc_12120, %dec_label_pc_12134
  %v0_1218c = phi i32 [ %v0_1218c.pre, %dec_label_pc_12120 ], [ %v1_12184, %dec_label_pc_12134 ]
  %v2_12194 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12194, i32* @r4, align 4
  store i32 %v6_120f4, i32* @r5, align 4
  store i32 %v9_120f4, i32* @r6, align 4
  store i32 %v12_120f4, i32* @r7, align 4
  ret i32 %v0_1218c

; uselistorder directives
  uselistorder i32 %v1_12104, { 2, 1, 0, 3 }
  uselistorder i32 %v2_12100, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_120f4, { 1, 0 }
  uselistorder i32 %v6_120f4, { 1, 0 }
  uselistorder label %dec_label_pc_1218c, { 1, 0 }
}

define i32 @function_121a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_121a8:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_121a8 = load i32, i32* @r4, align 4
  %v9_121a8 = load i32, i32* @r6, align 4
  %v12_121a8 = load i32, i32* @r7, align 4
  %v0_121b4 = load i32, i32* @r0, align 4
  %v2_121b4 = inttoptr i32 %v0_121b4 to i8*
  %v3_121b4 = call i32 @function_11ecc(i8* %v2_121b4, i32 18432)
  store i32 %v3_121b4, i32* @r0, align 4
  store i32 %v3_121b4, i32* @r7, align 4
  %v1_121b8 = icmp slt i32 %v3_121b4, 0
  br i1 %v1_121b8, label %.thread1, label %dec_label_pc_121c4

.thread1:                                         ; preds = %dec_label_pc_121a8
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_12294

dec_label_pc_121c4:                               ; preds = %dec_label_pc_121a8
  %v2_121b0 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_121b0, i32* @r1, align 4
  %v0_121c8 = call i32 @function_13814()
  %v1_121cc = icmp slt i32 %v0_121c8, 0
  br i1 %v1_121cc, label %dec_label_pc_121ec, label %dec_label_pc_121d4

dec_label_pc_121d4:                               ; preds = %dec_label_pc_121c4
  %v0_121d4 = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_121e0 = call i32 @function_11cdc(i32 %v0_121d4, i32 2)
  %v1_121e4 = icmp slt i32 %v2_121e0, 0
  br i1 %v1_121e4, label %dec_label_pc_121ec, label %dec_label_pc_1220c

dec_label_pc_121ec:                               ; preds = %dec_label_pc_121d4, %dec_label_pc_121c4
  %v0_121ec = call i32 @function_12374()
  store i32 %v0_121ec, i32* %r5.global-to-local, align 4
  %v0_121f4 = load i32, i32* @r7, align 4
  %v1_121f8 = inttoptr i32 %v0_121ec to i32*
  %v2_121f8 = load i32, i32* %v1_121f8, align 4
  store i32 %v2_121f8, i32* @r4, align 4
  %v1_121fc = call i32 @function_11da0(i32 %v0_121f4)
  store i32 0, i32* @r6, align 4
  %v0_12204 = load i32, i32* @r4, align 4
  %v1_12204 = load i32, i32* %r5.global-to-local, align 4
  %v2_12204 = inttoptr i32 %v1_12204 to i32*
  store i32 %v0_12204, i32* %v2_12204, align 4
  br label %dec_label_pc_12294

dec_label_pc_1220c:                               ; preds = %dec_label_pc_121d4
  %v1_12210 = call i32 @function_12854(i32 48)
  store i32 %v1_12210, i32* @r6, align 4
  %v2_12214 = icmp eq i32 %v1_12210, 0
  br i1 %v2_12214, label %dec_label_pc_12264, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_1220c
  store i32 0, i32* @r4, align 4
  %v2_12220 = add i32 %v1_12210, 16
  %v3_12220 = inttoptr i32 %v2_12220 to i32*
  store i32 0, i32* %v3_12220, align 4
  %v2_12228 = icmp ugt i32 %tmp, 511
  %v1_1222c = load i32, i32* @r6, align 4
  %v2_1222c = add i32 %v1_1222c, 20
  %v3_1222c = inttoptr i32 %v2_1222c to i32*
  store i32 %tmp, i32* %v3_1222c, align 4
  br i1 %v2_12228, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_1221c
  %v2_12234 = load i32, i32* @r6, align 4
  %v3_12234 = add i32 %v2_12234, 20
  %v4_12234 = inttoptr i32 %v3_12234 to i32*
  store i32 512, i32* %v4_12234, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_1221c, %bb
  %v0_12238 = load i32, i32* @r7, align 4
  %v1_12238 = load i32, i32* @r6, align 4
  %v2_12238 = inttoptr i32 %v1_12238 to i32*
  store i32 %v0_12238, i32* %v2_12238, align 4
  %v0_1223c = load i32, i32* @r4, align 4
  %v1_1223c = load i32, i32* @r6, align 4
  %v2_1223c = add i32 %v1_1223c, 8
  %v3_1223c = inttoptr i32 %v2_1223c to i32*
  store i32 %v0_1223c, i32* %v3_1223c, align 4
  %v0_12240 = load i32, i32* @r4, align 4
  %v1_12240 = load i32, i32* @r6, align 4
  %v2_12240 = add i32 %v1_12240, 4
  %v3_12240 = inttoptr i32 %v2_12240 to i32*
  store i32 %v0_12240, i32* %v3_12240, align 4
  %v0_12248 = load i32, i32* @r6, align 4
  %v1_12248 = add i32 %v0_12248, 20
  %v2_12248 = inttoptr i32 %v1_12248 to i32*
  %v3_12248 = load i32, i32* %v2_12248, align 4
  %v2_1224c = call i32 @function_129a8(i32 1, i32 %v3_12248)
  %v2_12250 = icmp eq i32 %v2_1224c, 0
  %v1_12254 = load i32, i32* @r6, align 4
  %v2_12254 = add i32 %v1_12254, 12
  %v3_12254 = inttoptr i32 %v2_12254 to i32*
  store i32 %v2_1224c, i32* %v3_12254, align 4
  br i1 %v2_12250, label %dec_label_pc_1225c, label %dec_label_pc_12280

dec_label_pc_1225c:                               ; preds = %.thread
  %v0_1225c = load i32, i32* @r6, align 4
  store i32 %v0_1225c, i32* @r0, align 4
  %v0_12260 = call i32 @function_12a00()
  br label %dec_label_pc_12264

dec_label_pc_12264:                               ; preds = %dec_label_pc_1220c, %dec_label_pc_1225c
  %v0_12264 = load i32, i32* @r7, align 4
  %v1_12268 = call i32 @function_11da0(i32 %v0_12264)
  %v0_1226c = call i32 @function_12374()
  store i32 0, i32* @r6, align 4
  %v2_12278 = inttoptr i32 %v0_1226c to i32*
  store i32 12, i32* %v2_12278, align 4
  br label %dec_label_pc_12294

dec_label_pc_12280:                               ; preds = %.thread
  store i32 74388, i32* @lr, align 4
  %v1_12290 = call i32 @function_133e8()
  br label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %.thread1, %dec_label_pc_12264, %dec_label_pc_121ec, %dec_label_pc_12280
  %v0_12294 = load i32, i32* @r6, align 4
  store i32 %v3_121a8, i32* @r4, align 4
  store i32 %v9_121a8, i32* @r6, align 4
  store i32 %v12_121a8, i32* @r7, align 4
  ret i32 %v0_12294

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_129a8, { 39, 41, 40, 35, 20, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 5, 4, 19, 1, 0, 18, 17, 3, 2, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 38, 37, 36 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_11da0, { 20, 19, 18, 33, 37, 36, 32, 31, 35, 34, 30, 29, 23, 28, 27, 26, 25, 24, 22, 4, 3, 2, 21, 17, 16, 6, 5, 15, 14, 13, 12, 11, 10, 9, 8, 7, 0, 1 }
  uselistorder label %dec_label_pc_12294, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12264, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_122a4(i32* %arg1) local_unnamed_addr {
dec_label_pc_122a4:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_122a4 = load i32, i32* @r4, align 4
  %v6_122a4 = load i32, i32* @r5, align 4
  %v9_122a4 = load i32, i32* @lr, align 4
  %v1_122a8 = add i32 %tmp, 24
  store i32 %v1_122a8, i32* @r4, align 4
  %v2_122ac = ptrtoint i32* %stack_var_-28 to i32
  store i32 78832, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_122ac, i32* @r0, align 4
  store i32 %v1_122a8, i32* %r2.global-to-local, align 4
  %v8_122c8 = call i32 @function_133f0(i32 %v2_122ac, i32 ptrtoint (i32* @global_var_133e8.392 to i32), i32 %v1_122a8, i32 78832, i32 %v3_122a4, i32 %v6_122a4, i32 %v9_122a4)
  %v0_122cc = load i32, i32* @r4, align 4
  store i32 %v0_122cc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_133e8.392 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_122dc.401 to i32), i32* @lr, align 4
  %v1_122d8 = call i32 @function_133e8()
  store i32 %v1_122d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_122dc

dec_label_pc_122dc:                               ; preds = %dec_label_pc_12310, %dec_label_pc_122a4
  %v0_122dc = load i32, i32* @r5, align 4
  %v1_122dc = add i32 %v0_122dc, 4
  %v2_122dc = inttoptr i32 %v1_122dc to i32*
  %v3_122dc = load i32, i32* %v2_122dc, align 4
  store i32 %v3_122dc, i32* %r2.global-to-local, align 4
  %v4_122dc = add i32 %v0_122dc, 8
  %v5_122dc = inttoptr i32 %v4_122dc to i32*
  %v6_122dc = load i32, i32* %v5_122dc, align 4
  store i32 %v6_122dc, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_122dc, %v3_122dc
  br i1 %tmp8, label %dec_label_pc_12310, label %dec_label_pc_122e8

dec_label_pc_122e8:                               ; preds = %dec_label_pc_122dc
  %v1_122e8 = inttoptr i32 %v0_122dc to i32*
  %v2_122e8 = load i32, i32* %v1_122e8, align 4
  store i32 %v2_122e8, i32* @r0, align 4
  %v1_122ec = add i32 %v0_122dc, 12
  %v2_122ec = inttoptr i32 %v1_122ec to i32*
  %v3_122ec = load i32, i32* %v2_122ec, align 4
  %v1_122f0 = add i32 %v0_122dc, 20
  %v2_122f0 = inttoptr i32 %v1_122f0 to i32*
  %v3_122f0 = load i32, i32* %v2_122f0, align 4
  store i32 %v3_122f0, i32* @r2, align 4
  %v4_122f4 = call i32 @function_13864(i32 %v2_122e8, i32 %v3_122ec, i32 %v3_122f0, i32 %v6_122dc)
  store i32 %v4_122f4, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_122f4, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_12304

.thread:                                          ; preds = %dec_label_pc_122e8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12344

dec_label_pc_12304:                               ; preds = %dec_label_pc_122e8
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12308 = load i32, i32* @r5, align 4
  %v2_12308 = add i32 %v1_12308, 4
  %v3_12308 = inttoptr i32 %v2_12308 to i32*
  store i32 0, i32* %v3_12308, align 4
  %v1_1230c = load i32, i32* @r5, align 4
  %v2_1230c = add i32 %v1_1230c, 8
  %v3_1230c = inttoptr i32 %v2_1230c to i32*
  store i32 %v4_122f4, i32* %v3_1230c, align 4
  %v0_12310.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12310

dec_label_pc_12310:                               ; preds = %dec_label_pc_122dc, %dec_label_pc_12304
  %v1_12328 = phi i32 [ %v0_122dc, %dec_label_pc_122dc ], [ %v0_12310.pre, %dec_label_pc_12304 ]
  %v1_12310 = add i32 %v1_12328, 4
  %v2_12310 = inttoptr i32 %v1_12310 to i32*
  %v3_12310 = load i32, i32* %v2_12310, align 4
  store i32 %v3_12310, i32* %r2.global-to-local, align 4
  %v1_12314 = add i32 %v1_12328, 12
  %v2_12314 = inttoptr i32 %v1_12314 to i32*
  %v3_12314 = load i32, i32* %v2_12314, align 4
  store i32 %v3_12314, i32* %ip.global-to-local, align 4
  %v2_12318 = add i32 %v3_12314, %v3_12310
  store i32 %v2_12318, i32* @r4, align 4
  %v1_1231c = add i32 %v2_12318, 4
  %v2_1231c = inttoptr i32 %v1_1231c to i32*
  %v3_1231c = load i32, i32* %v2_1231c, align 4
  %v1_12320 = add i32 %v2_12318, 8
  %v2_12320 = inttoptr i32 %v1_12320 to i8*
  %v3_12320 = load i8, i8* %v2_12320, align 1
  %v4_12320 = zext i8 %v3_12320 to i32
  store i32 %v4_12320, i32* %r3.global-to-local, align 4
  %v1_12324 = add i32 %v2_12318, 9
  %v2_12324 = inttoptr i32 %v1_12324 to i8*
  %v3_12324 = load i8, i8* %v2_12324, align 1
  %v4_12324 = zext i8 %v3_12324 to i32
  store i32 %v4_12324, i32* %r0.global-to-local, align 4
  %v2_12328 = add i32 %v1_12328, 16
  %v3_12328 = inttoptr i32 %v2_12328 to i32*
  store i32 %v3_1231c, i32* %v3_12328, align 4
  %v0_1232c = load i32, i32* %r2.global-to-local, align 4
  %v1_1232c = load i32, i32* %ip.global-to-local, align 4
  %v2_1232c = add i32 %v1_1232c, %v0_1232c
  %v3_1232c = inttoptr i32 %v2_1232c to i32*
  %v4_1232c = load i32, i32* %v3_1232c, align 4
  %v0_12330 = load i32, i32* %r3.global-to-local, align 4
  %v1_12330 = load i32, i32* %r0.global-to-local, align 4
  %v4_12330 = mul i32 %v1_12330, 256
  %v5_12330 = or i32 %v4_12330, %v0_12330
  store i32 %v5_12330, i32* %r3.global-to-local, align 4
  %v2_12334 = add i32 %v5_12330, %v0_1232c
  store i32 %v2_12334, i32* @r2, align 4
  %v2_12338 = icmp eq i32 %v4_1232c, 0
  %v1_1233c = load i32, i32* @r5, align 4
  %v2_1233c = add i32 %v1_1233c, 4
  %v3_1233c = inttoptr i32 %v2_1233c to i32*
  store i32 %v2_12334, i32* %v3_1233c, align 4
  br i1 %v2_12338, label %dec_label_pc_122dc, label %dec_label_pc_12344

dec_label_pc_12344:                               ; preds = %dec_label_pc_12310, %.thread
  store i32 %v2_122ac, i32* @r0, align 4
  store i32 78832, i32* %r3.global-to-local, align 4
  store i32 74584, i32* @lr, align 4
  %v3_12354 = load i32, i32* @r2, align 4
  %v8_12354 = call i32 @function_133f0(i32 %v2_122ac, i32 1, i32 %v3_12354, i32 78832, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_12358 = load i32, i32* @r4, align 4
  store i32 %v0_12358, i32* %r0.global-to-local, align 4
  store i32 %v3_122a4, i32* @r4, align 4
  store i32 %v6_122a4, i32* @r5, align 4
  ret i32 %v0_12358

; uselistorder directives
  uselistorder i32 %v1_12328, { 0, 2, 1 }
  uselistorder i32 %v6_122dc, { 1, 0, 2 }
  uselistorder i32 %v0_122dc, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_122ac, { 1, 0, 3, 2 }
  uselistorder i32 %v1_122a8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_12310, { 1, 0 }
}

define i32 @function_12374() local_unnamed_addr {
dec_label_pc_12374:
  ret i32 ptrtoint (i32* @global_var_1cdf4.404 to i32)
}

define i32 @function_12380(i32 %arg1) local_unnamed_addr {
dec_label_pc_12380:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_1238c = bitcast i32* %stack_var_-20 to %tms*
  %v2_1238c = call i32 @function_13bf4(%tms* %v1_1238c)
  %v2_12394 = load i32, i32* %stack_var_-20, align 4
  %v2_12398 = add i32 %v2_12394, %tmp
  %v2_123a0 = mul i32 %v2_12398, 10000
  %v1_123a4 = and i32 %v2_123a0, 2147483632
  ret i32 %v1_123a4

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_123c0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_123c0:
  %v0_123c0 = call i32 @function_14000()
  ret i32 %v0_123c0
}

define i32 @function_123d0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_123d0:
  %v0_123d0 = call i32 @function_14000()
  ret i32 %v0_123d0

; uselistorder directives
  uselistorder i32 ()* @function_14000, { 1, 0 }
}

define i32 @function_123e0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_123e0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_123e4 = load i32, i32* @r2, align 4
  %v8_123e4 = icmp eq i32 %v0_123e4, 8
  store i1 %v8_123e4, i1* %cpsr_z.global-to-local, align 1
  %v5_123e8 = icmp slt i32 %v0_123e4, 8
  br i1 %v5_123e8, label %dec_label_pc_12448, label %dec_label_pc_123ec

dec_label_pc_123ec:                               ; preds = %dec_label_pc_123e0
  %v4_123ec = mul i32 %arg2, 256
  %v5_123ec = or i32 %v4_123ec, %arg2
  %v4_123f0 = mul i32 %v5_123ec, 65536
  %v5_123f0 = or i32 %v4_123f0, %v5_123ec
  store i32 %v5_123f0, i32* %r1.global-to-local, align 4
  %v1_123f457 = urem i32 %tmp, 4
  %v2_123f458 = icmp eq i32 %v1_123f457, 0
  store i1 %v2_123f458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_123f458, label %dec_label_pc_12404, label %bb

bb:                                               ; preds = %dec_label_pc_123ec, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_123ec ]
  %v3_123f859 = phi i32 [ %v6_123f8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_123ec ]
  %v4_123f8 = inttoptr i32 %v3_123f859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_123f8, align 1
  %v5_123f8 = load i32, i32* %r3.global-to-local, align 4
  %v6_123f8 = add i32 %v5_123f8, 1
  store i32 %v6_123f8, i32* %r3.global-to-local, align 4
  %v0_123fc.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12408.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_123fc.pr, label %dec_label_pc_12404, label %.thread

.thread:                                          ; preds = %bb
  %v2_123fc = add i32 %v0_12408.pr.pre, -1
  store i32 %v2_123fc, i32* @r2, align 4
  %v1_123f4 = urem i32 %v6_123f8, 4
  %v2_123f4 = icmp eq i32 %v1_123f4, 0
  store i1 %v2_123f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_123f4, label %dec_label_pc_12404, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_123f8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_123f8.pre to i8
  br label %bb

dec_label_pc_12404:                               ; preds = %.thread, %bb, %dec_label_pc_123ec
  %v0_1241028 = phi i32 [ %tmp, %dec_label_pc_123ec ], [ %v6_123f8, %bb ], [ %v6_123f8, %.thread ]
  %v0_12408.pr = phi i32 [ %v0_123e4, %dec_label_pc_123ec ], [ %v0_12408.pr.pre, %bb ], [ %v2_123fc, %.thread ]
  %v0_12404 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12404, i32* %ip.global-to-local, align 4
  %v8_1240810 = icmp eq i32 %v0_12408.pr, 8
  store i1 %v8_1240810, i1* %cpsr_z.global-to-local, align 1
  %v5_1240c11 = icmp slt i32 %v0_12408.pr, 8
  br i1 %v5_1240c11, label %dec_label_pc_12448, label %dec_label_pc_12410.preheader

dec_label_pc_12410.preheader:                     ; preds = %dec_label_pc_12404
  %v1_1241046 = inttoptr i32 %v0_1241028 to i32*
  store i32 %v0_12404, i32* %v1_1241046, align 4
  %v3_1241047 = add i32 %v0_1241028, 4
  %v4_1241048 = inttoptr i32 %v3_1241047 to i32*
  %v5_1241049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1241049, i32* %v4_1241048, align 4
  %v6_1241050 = add i32 %v0_1241028, 8
  store i32 %v6_1241050, i32* %r3.global-to-local, align 4
  %v0_1241451 = load i32, i32* @r2, align 4
  %v1_1241452 = add i32 %v0_1241451, -8
  store i32 %v1_1241452, i32* %r2.global-to-local, align 4
  %v5_1241c53 = icmp slt i32 %v1_1241452, 8
  br i1 %v5_1241c53, label %dec_label_pc_12410.dec_label_pc_12448.loopexit_crit_edge, label %dec_label_pc_12420

dec_label_pc_12420:                               ; preds = %dec_label_pc_12410.preheader, %dec_label_pc_12408.dec_label_pc_12410_crit_edge
  %v6_1241055 = phi i32 [ %v6_12410, %dec_label_pc_12408.dec_label_pc_12410_crit_edge ], [ %v6_1241050, %dec_label_pc_12410.preheader ]
  %v0_1241054 = phi i32 [ %v12_1243c, %dec_label_pc_12408.dec_label_pc_12410_crit_edge ], [ %v0_1241028, %dec_label_pc_12410.preheader ]
  %v1_12420 = inttoptr i32 %v6_1241055 to i32*
  %v2_12420 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12420, i32* %v1_12420, align 4
  %v3_12420 = add i32 %v0_1241054, 12
  %v4_12420 = inttoptr i32 %v3_12420 to i32*
  %v5_12420 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12420, i32* %v4_12420, align 4
  %v6_12420 = add i32 %v0_1241054, 16
  store i32 %v6_12420, i32* %r3.global-to-local, align 4
  %v0_12424 = load i32, i32* %r2.global-to-local, align 4
  %v1_12424 = add i32 %v0_12424, -8
  store i32 %v1_12424, i32* %r2.global-to-local, align 4
  %v5_1242c = icmp slt i32 %v1_12424, 8
  br i1 %v5_1242c, label %dec_label_pc_12420.dec_label_pc_12448.loopexit_crit_edge, label %dec_label_pc_12430

dec_label_pc_12430:                               ; preds = %dec_label_pc_12420
  %v1_12430 = inttoptr i32 %v6_12420 to i32*
  %v2_12430 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12430, i32* %v1_12430, align 4
  %v3_12430 = add i32 %v0_1241054, 20
  %v4_12430 = inttoptr i32 %v3_12430 to i32*
  %v5_12430 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12430, i32* %v4_12430, align 4
  %v6_12430 = add i32 %v0_1241054, 24
  store i32 %v6_12430, i32* %r3.global-to-local, align 4
  %v0_12434 = load i32, i32* %r2.global-to-local, align 4
  %v1_12434 = add i32 %v0_12434, -8
  store i32 %v1_12434, i32* %r2.global-to-local, align 4
  %v5_1243c = icmp slt i32 %v1_12434, 8
  br i1 %v5_1243c, label %dec_label_pc_12430.dec_label_pc_12448.loopexit_crit_edge, label %dec_label_pc_12408

dec_label_pc_12408:                               ; preds = %dec_label_pc_12430
  %v7_1243c = inttoptr i32 %v6_12430 to i32*
  %v8_1243c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_1243c, i32* %v7_1243c, align 4
  %v9_1243c = add i32 %v0_1241054, 28
  %v10_1243c = inttoptr i32 %v9_1243c to i32*
  %v11_1243c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_1243c, i32* %v10_1243c, align 4
  %v12_1243c = add i32 %v0_1241054, 32
  store i32 %v12_1243c, i32* %r3.global-to-local, align 4
  %v6_12440 = load i32, i32* %r2.global-to-local, align 4
  %v7_12440 = add i32 %v6_12440, -8
  store i32 %v7_12440, i32* %r2.global-to-local, align 4
  %v5_1240c = icmp slt i32 %v7_12440, 8
  br i1 %v5_1240c, label %dec_label_pc_12408.dec_label_pc_12448.loopexit_crit_edge, label %dec_label_pc_12408.dec_label_pc_12410_crit_edge

dec_label_pc_12408.dec_label_pc_12410_crit_edge:  ; preds = %dec_label_pc_12408
  %v2_12410.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12410 = inttoptr i32 %v12_1243c to i32*
  store i32 %v2_12410.pre, i32* %v1_12410, align 4
  %v3_12410 = add i32 %v0_1241054, 36
  %v4_12410 = inttoptr i32 %v3_12410 to i32*
  %v5_12410 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12410, i32* %v4_12410, align 4
  %v6_12410 = add i32 %v0_1241054, 40
  store i32 %v6_12410, i32* %r3.global-to-local, align 4
  %v0_12414 = load i32, i32* %r2.global-to-local, align 4
  %v1_12414 = add i32 %v0_12414, -8
  store i32 %v1_12414, i32* %r2.global-to-local, align 4
  %v5_1241c = icmp slt i32 %v1_12414, 8
  br i1 %v5_1241c, label %dec_label_pc_12410.dec_label_pc_12448.loopexit_crit_edge, label %dec_label_pc_12420

dec_label_pc_12410.dec_label_pc_12448.loopexit_crit_edge: ; preds = %dec_label_pc_12408.dec_label_pc_12410_crit_edge, %dec_label_pc_12410.preheader
  %v1_12414.lcssa = phi i32 [ %v1_1241452, %dec_label_pc_12410.preheader ], [ %v1_12414, %dec_label_pc_12408.dec_label_pc_12410_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12448

dec_label_pc_12408.dec_label_pc_12448.loopexit_crit_edge: ; preds = %dec_label_pc_12408
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12448

dec_label_pc_12420.dec_label_pc_12448.loopexit_crit_edge: ; preds = %dec_label_pc_12420
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12448

dec_label_pc_12430.dec_label_pc_12448.loopexit_crit_edge: ; preds = %dec_label_pc_12430
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_12448

dec_label_pc_12448:                               ; preds = %dec_label_pc_12404, %dec_label_pc_12410.dec_label_pc_12448.loopexit_crit_edge, %dec_label_pc_12408.dec_label_pc_12448.loopexit_crit_edge, %dec_label_pc_12420.dec_label_pc_12448.loopexit_crit_edge, %dec_label_pc_12430.dec_label_pc_12448.loopexit_crit_edge, %dec_label_pc_123e0
  %v0_12450 = phi i32 [ %v0_123e4, %dec_label_pc_123e0 ], [ %v1_12434, %dec_label_pc_12430.dec_label_pc_12448.loopexit_crit_edge ], [ %v1_12424, %dec_label_pc_12420.dec_label_pc_12448.loopexit_crit_edge ], [ %v7_12440, %dec_label_pc_12408.dec_label_pc_12448.loopexit_crit_edge ], [ %v1_12414.lcssa, %dec_label_pc_12410.dec_label_pc_12448.loopexit_crit_edge ], [ %v0_12408.pr, %dec_label_pc_12404 ]
  %v2_12448 = icmp eq i32 %v0_12450, 0
  store i1 %v2_12448, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12448, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_12448
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_12448
  %v1_12450 = sub i32 7, %v0_12450
  store i32 %v1_12450, i32* %r2.global-to-local, align 4
  %v3_12454 = mul i32 %v1_12450, 4
  %v4_12454 = add i32 %v3_12454, ptrtoint (i32* @global_var_1245c.406 to i32)
  call void @__pseudo_branch(i32 %v4_12454)
  %v0_1245c = load i32, i32* %r1.global-to-local, align 4
  %v1_1245c = trunc i32 %v0_1245c to i8
  %v2_1245c = load i32, i32* %r3.global-to-local, align 4
  %v3_1245c = inttoptr i32 %v2_1245c to i8*
  store i8 %v1_1245c, i8* %v3_1245c, align 1
  %v4_1245c = load i32, i32* %r3.global-to-local, align 4
  %v5_1245c = add i32 %v4_1245c, 1
  store i32 %v5_1245c, i32* %r3.global-to-local, align 4
  %v0_12460 = load i32, i32* %r1.global-to-local, align 4
  %v1_12460 = trunc i32 %v0_12460 to i8
  %v3_12460 = inttoptr i32 %v5_1245c to i8*
  store i8 %v1_12460, i8* %v3_12460, align 1
  %v4_12460 = load i32, i32* %r3.global-to-local, align 4
  %v5_12460 = add i32 %v4_12460, 1
  store i32 %v5_12460, i32* %r3.global-to-local, align 4
  %v0_12464 = load i32, i32* %r1.global-to-local, align 4
  %v1_12464 = trunc i32 %v0_12464 to i8
  %v3_12464 = inttoptr i32 %v5_12460 to i8*
  store i8 %v1_12464, i8* %v3_12464, align 1
  %v4_12464 = load i32, i32* %r3.global-to-local, align 4
  %v5_12464 = add i32 %v4_12464, 1
  store i32 %v5_12464, i32* %r3.global-to-local, align 4
  %v0_12468 = load i32, i32* %r1.global-to-local, align 4
  %v1_12468 = trunc i32 %v0_12468 to i8
  %v3_12468 = inttoptr i32 %v5_12464 to i8*
  store i8 %v1_12468, i8* %v3_12468, align 1
  %v4_12468 = load i32, i32* %r3.global-to-local, align 4
  %v5_12468 = add i32 %v4_12468, 1
  store i32 %v5_12468, i32* %r3.global-to-local, align 4
  %v0_1246c = load i32, i32* %r1.global-to-local, align 4
  %v1_1246c = trunc i32 %v0_1246c to i8
  %v3_1246c = inttoptr i32 %v5_12468 to i8*
  store i8 %v1_1246c, i8* %v3_1246c, align 1
  %v4_1246c = load i32, i32* %r3.global-to-local, align 4
  %v5_1246c = add i32 %v4_1246c, 1
  store i32 %v5_1246c, i32* %r3.global-to-local, align 4
  %v0_12470 = load i32, i32* %r1.global-to-local, align 4
  %v1_12470 = trunc i32 %v0_12470 to i8
  %v3_12470 = inttoptr i32 %v5_1246c to i8*
  store i8 %v1_12470, i8* %v3_12470, align 1
  %v4_12470 = load i32, i32* %r3.global-to-local, align 4
  %v5_12470 = add i32 %v4_12470, 1
  store i32 %v5_12470, i32* %r3.global-to-local, align 4
  %v0_12474 = load i32, i32* %r1.global-to-local, align 4
  %v1_12474 = trunc i32 %v0_12474 to i8
  %v3_12474 = inttoptr i32 %v5_12470 to i8*
  store i8 %v1_12474, i8* %v3_12474, align 1
  %v4_12474 = load i32, i32* %r3.global-to-local, align 4
  %v5_12474 = add i32 %v4_12474, 1
  store i32 %v5_12474, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12410, { 1, 0 }
  uselistorder i32 %v12_1243c, { 1, 2, 0 }
  uselistorder i32 %v0_1241054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12408.pr, { 0, 2, 1 }
  uselistorder i32 %v6_123f8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_123ec, { 1, 0 }
  uselistorder i32 %v0_123e4, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 4, 3, 5, 2, 1, 8, 7, 0, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_12448, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12420, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_12480(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_12480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12480 = sub i32 %arg1, %tmp
  %v1_12484 = add i32 %v2_12480, -1
  store i32 %v1_12484, i32* %r2.global-to-local, align 4
  %v2_124884 = load i8, i8* %arg2, align 1
  %v5_124886 = add i32 %tmp, 1
  store i32 %v5_124886, i32* %r1.global-to-local, align 4
  %v2_1248c7 = icmp eq i8 %v2_124884, 0
  store i1 %v2_1248c7, i1* %cpsr_z.global-to-local, align 1
  %v5_124908 = inttoptr i32 %arg1 to i8*
  store i8 %v2_124884, i8* %v5_124908, align 1
  %v0_124949 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_124949, label %dec_label_pc_12498, label %dec_label_pc_12488.dec_label_pc_12488_crit_edge

dec_label_pc_12488.dec_label_pc_12488_crit_edge:  ; preds = %dec_label_pc_12480, %dec_label_pc_12488.dec_label_pc_12488_crit_edge
  %v0_12488.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_12490.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_12488 = inttoptr i32 %v0_12488.pre to i8*
  %v2_12488 = load i8, i8* %v1_12488, align 1
  %v5_12488 = add i32 %v0_12488.pre, 1
  store i32 %v5_12488, i32* %r1.global-to-local, align 4
  %v2_1248c = icmp eq i8 %v2_12488, 0
  store i1 %v2_1248c, i1* %cpsr_z.global-to-local, align 1
  %v4_12490 = add i32 %v5_12488, %v3_12490.pre
  %v5_12490 = inttoptr i32 %v4_12490 to i8*
  store i8 %v2_12488, i8* %v5_12490, align 1
  %v0_12494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12494, label %dec_label_pc_12498, label %dec_label_pc_12488.dec_label_pc_12488_crit_edge

dec_label_pc_12498:                               ; preds = %dec_label_pc_12488.dec_label_pc_12488_crit_edge, %dec_label_pc_12480
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 3, 2, 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12488.dec_label_pc_12488_crit_edge, { 1, 0 }
}

define i32 @function_1249c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1249c:
  %stack_var_-8 = alloca i32, align 4
  %v2_124a0 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_124a0, i32* @r1, align 4
  %v0_124a8 = call i32 @function_14490()
  %v2_124ac = icmp eq i32 %v0_124a8, 0
  br i1 %v2_124ac, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1249c
  %v3_124b4 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1249c, %bb
  %v5_124bc = phi i32 [ -1, %dec_label_pc_1249c ], [ %v3_124b4, %bb ]
  ret i32 %v5_124bc

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_124c0(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_124c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124c0 = load i32, i32* @r4, align 4
  store i32 %v3_124c0, i32* %stack_var_-8, align 4
  %v5_124c4 = inttoptr i32 %arg3 to i32*
  %v6_124c4 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_124c4)
  store i32 %v6_124c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_124c4, -4095
  br i1 %tmp, label %dec_label_pc_124e4, label %dec_label_pc_124d4

dec_label_pc_124d4:                               ; preds = %dec_label_pc_124c0
  %v0_124d4 = call i32 @function_12374()
  %v0_124d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_124d8 = sub i32 0, %v0_124d8
  %v2_124dc = inttoptr i32 %v0_124d4 to i32*
  store i32 %v1_124d8, i32* %v2_124dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_124e4

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124c0, %dec_label_pc_124d4
  %v0_124e4 = phi i32 [ %v6_124c4, %dec_label_pc_124c0 ], [ -1, %dec_label_pc_124d4 ]
  %v2_124e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_124e8, i32* @r4, align 4
  ret i32 %v0_124e4

; uselistorder directives
  uselistorder i32 %v6_124c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124e4, { 1, 0 }
}

define i32 @function_124ec(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_124ec:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_124ec = load i32, i32* @r4, align 4
  store i32 %v3_124ec, i32* %stack_var_-8, align 4
  %v5_124f0 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_124f0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_124f0, -4095
  br i1 %tmp, label %dec_label_pc_12510, label %dec_label_pc_12500

dec_label_pc_12500:                               ; preds = %dec_label_pc_124ec
  %v0_12500 = call i32 @function_12374()
  %v0_12504 = load i32, i32* %r4.global-to-local, align 4
  %v1_12504 = sub i32 0, %v0_12504
  %v2_12508 = inttoptr i32 %v0_12500 to i32*
  store i32 %v1_12504, i32* %v2_12508, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12510

dec_label_pc_12510:                               ; preds = %dec_label_pc_124ec, %dec_label_pc_12500
  %v0_12510 = phi i32 [ %v5_124f0, %dec_label_pc_124ec ], [ -1, %dec_label_pc_12500 ]
  %v2_12514 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12514, i32* @r4, align 4
  ret i32 %v0_12510

; uselistorder directives
  uselistorder i32 %v5_124f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12510, { 1, 0 }
}

define i32 @function_12518(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12518:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12518 = load i32, i32* @r4, align 4
  store i32 %v3_12518, i32* %stack_var_-8, align 4
  %v5_1251c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_1251c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1251c, -4095
  br i1 %tmp, label %dec_label_pc_1253c, label %dec_label_pc_1252c

dec_label_pc_1252c:                               ; preds = %dec_label_pc_12518
  %v0_1252c = call i32 @function_12374()
  %v0_12530 = load i32, i32* %r4.global-to-local, align 4
  %v1_12530 = sub i32 0, %v0_12530
  %v2_12534 = inttoptr i32 %v0_1252c to i32*
  store i32 %v1_12530, i32* %v2_12534, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1253c

dec_label_pc_1253c:                               ; preds = %dec_label_pc_12518, %dec_label_pc_1252c
  %v0_1253c = phi i32 [ %v5_1251c, %dec_label_pc_12518 ], [ -1, %dec_label_pc_1252c ]
  %v2_12540 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12540, i32* @r4, align 4
  ret i32 %v0_1253c

; uselistorder directives
  uselistorder i32 %v5_1251c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1253c, { 1, 0 }
}

define i32 @function_12544(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12544:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12544 = load i32, i32* @r4, align 4
  store i32 %v3_12544, i32* %stack_var_-8, align 4
  %v5_12548 = inttoptr i32 %arg3 to i32*
  %v6_12548 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_12548)
  store i32 %v6_12548, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12548, -4095
  br i1 %tmp, label %dec_label_pc_12568, label %dec_label_pc_12558

dec_label_pc_12558:                               ; preds = %dec_label_pc_12544
  %v0_12558 = call i32 @function_12374()
  %v0_1255c = load i32, i32* %r4.global-to-local, align 4
  %v1_1255c = sub i32 0, %v0_1255c
  %v2_12560 = inttoptr i32 %v0_12558 to i32*
  store i32 %v1_1255c, i32* %v2_12560, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12568

dec_label_pc_12568:                               ; preds = %dec_label_pc_12544, %dec_label_pc_12558
  %v0_12568 = phi i32 [ %v6_12548, %dec_label_pc_12544 ], [ -1, %dec_label_pc_12558 ]
  %v2_1256c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1256c, i32* @r4, align 4
  ret i32 %v0_12568

; uselistorder directives
  uselistorder i32 %v6_12548, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12568, { 1, 0 }
}

define i32 @function_12570(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12570:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12570 = load i32, i32* @r4, align 4
  store i32 %v3_12570, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12578 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_12578, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12578, -4095
  br i1 %tmp, label %dec_label_pc_12598, label %dec_label_pc_12588

dec_label_pc_12588:                               ; preds = %dec_label_pc_12570
  %v0_12588 = call i32 @function_12374()
  %v0_1258c = load i32, i32* %r4.global-to-local, align 4
  %v1_1258c = sub i32 0, %v0_1258c
  %v2_12590 = inttoptr i32 %v0_12588 to i32*
  store i32 %v1_1258c, i32* %v2_12590, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12598

dec_label_pc_12598:                               ; preds = %dec_label_pc_12570, %dec_label_pc_12588
  %v0_12598 = phi i32 [ %v5_12578, %dec_label_pc_12570 ], [ -1, %dec_label_pc_12588 ]
  %v2_1259c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1259c, i32* @r4, align 4
  ret i32 %v0_12598

; uselistorder directives
  uselistorder i32 %v5_12578, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12598, { 1, 0 }
}

define i32 @function_125a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_125a0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125a0 = load i32, i32* @r4, align 4
  store i32 %v3_125a0, i32* %stack_var_-8, align 4
  %v2_125a4 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_125a4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_125a4, -4095
  br i1 %tmp, label %dec_label_pc_125c4, label %dec_label_pc_125b4

dec_label_pc_125b4:                               ; preds = %dec_label_pc_125a0
  %v0_125b4 = call i32 @function_12374()
  %v0_125b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_125b8 = sub i32 0, %v0_125b8
  %v2_125bc = inttoptr i32 %v0_125b4 to i32*
  store i32 %v1_125b8, i32* %v2_125bc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125c4

dec_label_pc_125c4:                               ; preds = %dec_label_pc_125a0, %dec_label_pc_125b4
  %v0_125c4 = phi i32 [ %v2_125a4, %dec_label_pc_125a0 ], [ -1, %dec_label_pc_125b4 ]
  %v2_125c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125c8, i32* @r4, align 4
  ret i32 %v0_125c4

; uselistorder directives
  uselistorder i32 %v2_125a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125c4, { 1, 0 }
}

define i32 @function_125cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_125cc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125cc = load i32, i32* @r4, align 4
  store i32 %v3_125cc, i32* %stack_var_-8, align 4
  %v5_125d0 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_125d0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_125d0, -4095
  br i1 %tmp, label %dec_label_pc_125f0, label %dec_label_pc_125e0

dec_label_pc_125e0:                               ; preds = %dec_label_pc_125cc
  %v0_125e0 = call i32 @function_12374()
  %v0_125e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_125e4 = sub i32 0, %v0_125e4
  %v2_125e8 = inttoptr i32 %v0_125e0 to i32*
  store i32 %v1_125e4, i32* %v2_125e8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125f0

dec_label_pc_125f0:                               ; preds = %dec_label_pc_125cc, %dec_label_pc_125e0
  %v0_125f0 = phi i32 [ %v5_125d0, %dec_label_pc_125cc ], [ -1, %dec_label_pc_125e0 ]
  %v2_125f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125f4, i32* @r4, align 4
  ret i32 %v0_125f0

; uselistorder directives
  uselistorder i32 %v5_125d0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125f0, { 1, 0 }
}

define i32 @function_125f8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_125f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_125f8 = load i32, i32* @r4, align 4
  store i32 %v3_125f8, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12604 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12604, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12604, -4095
  br i1 %tmp, label %dec_label_pc_12624, label %dec_label_pc_12614

dec_label_pc_12614:                               ; preds = %dec_label_pc_125f8
  %v0_12614 = call i32 @function_12374()
  %v0_12618 = load i32, i32* %r4.global-to-local, align 4
  %v1_12618 = sub i32 0, %v0_12618
  %v2_1261c = inttoptr i32 %v0_12614 to i32*
  store i32 %v1_12618, i32* %v2_1261c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_125f8, %dec_label_pc_12614
  %v0_12624 = phi i32 [ %v5_12604, %dec_label_pc_125f8 ], [ -1, %dec_label_pc_12614 ]
  %v2_12628 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12628, i32* @r4, align 4
  ret i32 %v0_12624

; uselistorder directives
  uselistorder i32 %v5_12604, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12624, { 1, 0 }
}

define i32 @function_1262c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1262c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1262c = load i32, i32* @r4, align 4
  store i32 %v3_1262c, i32* %stack_var_-8, align 4
  %v5_12630 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12630, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12630, -4095
  br i1 %tmp, label %dec_label_pc_12650, label %dec_label_pc_12640

dec_label_pc_12640:                               ; preds = %dec_label_pc_1262c
  %v0_12640 = call i32 @function_12374()
  %v0_12644 = load i32, i32* %r4.global-to-local, align 4
  %v1_12644 = sub i32 0, %v0_12644
  %v2_12648 = inttoptr i32 %v0_12640 to i32*
  store i32 %v1_12644, i32* %v2_12648, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12650

dec_label_pc_12650:                               ; preds = %dec_label_pc_1262c, %dec_label_pc_12640
  %v0_12650 = phi i32 [ %v5_12630, %dec_label_pc_1262c ], [ -1, %dec_label_pc_12640 ]
  %v2_12654 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12654, i32* @r4, align 4
  ret i32 %v0_12650

; uselistorder directives
  uselistorder i32 %v5_12630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12650, { 1, 0 }
}

define i32 @function_12658(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12658:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12664 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_12664, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12664, -4095
  br i1 %tmp, label %dec_label_pc_12684, label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_12658
  %v0_12674 = call i32 @function_12374()
  %v0_12678 = load i32, i32* %r4.global-to-local, align 4
  %v1_12678 = sub i32 0, %v0_12678
  %v2_1267c = inttoptr i32 %v0_12674 to i32*
  store i32 %v1_12678, i32* %v2_1267c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12658, %dec_label_pc_12674
  %v0_12684 = phi i32 [ %v5_12664, %dec_label_pc_12658 ], [ -1, %dec_label_pc_12674 ]
  ret i32 %v0_12684

; uselistorder directives
  uselistorder i32 %v5_12664, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12684, { 1, 0 }
}

define i32 @function_1268c(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_1268c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1268c = load i32, i32* @r4, align 4
  store i32 %v3_1268c, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12694 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_12694, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12694, -4095
  br i1 %tmp, label %dec_label_pc_126b4, label %dec_label_pc_126a4

dec_label_pc_126a4:                               ; preds = %dec_label_pc_1268c
  %v0_126a4 = call i32 @function_12374()
  %v0_126a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_126a8 = sub i32 0, %v0_126a8
  %v2_126ac = inttoptr i32 %v0_126a4 to i32*
  store i32 %v1_126a8, i32* %v2_126ac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126b4

dec_label_pc_126b4:                               ; preds = %dec_label_pc_1268c, %dec_label_pc_126a4
  %v0_126b4 = phi i32 [ %v5_12694, %dec_label_pc_1268c ], [ -1, %dec_label_pc_126a4 ]
  %v2_126b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126b8, i32* @r4, align 4
  ret i32 %v0_126b4

; uselistorder directives
  uselistorder i32 %v5_12694, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126b4, { 1, 0 }
}

define i32 @function_126bc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_126bc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_126bc = load i32, i32* @r4, align 4
  store i32 %v3_126bc, i32* %stack_var_-8, align 4
  %v3_126c0 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_126c0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_126c0, -4095
  br i1 %tmp, label %dec_label_pc_126e0, label %dec_label_pc_126d0

dec_label_pc_126d0:                               ; preds = %dec_label_pc_126bc
  %v0_126d0 = call i32 @function_12374()
  %v0_126d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_126d4 = sub i32 0, %v0_126d4
  %v2_126d8 = inttoptr i32 %v0_126d0 to i32*
  store i32 %v1_126d4, i32* %v2_126d8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126e0

dec_label_pc_126e0:                               ; preds = %dec_label_pc_126bc, %dec_label_pc_126d0
  %v0_126e0 = phi i32 [ %v3_126c0, %dec_label_pc_126bc ], [ -1, %dec_label_pc_126d0 ]
  %v2_126e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126e4, i32* @r4, align 4
  ret i32 %v0_126e0

; uselistorder directives
  uselistorder i32 %v3_126c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126e0, { 1, 0 }
}

define i32 @function_126e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_126e8:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12704, label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126e8
  %v8_126f8 = icmp sgt i32 %arg1, 64
  br i1 %v8_126f8, label %dec_label_pc_12704, label %dec_label_pc_126fc

dec_label_pc_126fc:                               ; preds = %dec_label_pc_126f4
  %v0_12700 = call i32 @function_1280c()
  br label %dec_label_pc_12704

dec_label_pc_12704:                               ; preds = %dec_label_pc_126f4, %dec_label_pc_126e8, %dec_label_pc_126fc
  %v0_12704 = call i32 @function_12374()
  %v2_1270c = inttoptr i32 %v0_12704 to i32*
  store i32 22, i32* %v2_1270c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12704, { 2, 0, 1 }
}

define i32 @function_12718(i32 %arg1) local_unnamed_addr {
dec_label_pc_12718:
  store i32 128, i32* @r2, align 4
  %v0_12724 = load i32, i32* @r0, align 4
  %v2_12724 = inttoptr i32 %v0_12724 to i8*
  %v3_12724 = call i32 @function_123e0(i8* %v2_12724, i32 0)
  ret i32 0
}

define i32 @function_12730(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12730:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12730 = load i32, i32* @r4, align 4
  store i32 %v3_12730, i32* %stack_var_-12, align 4
  %v6_12730 = load i32, i32* @r5, align 4
  %v10_12730 = ptrtoint i32* %stack_var_-12 to i32
  %v7_12734 = icmp eq i32 %arg2, -1
  %v0_12740.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_12734, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12730
  br label %dec_label_pc_12758

bb:                                               ; preds = %dec_label_pc_12730
  %v2_1273c = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_12740.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_12740.pre, 1
  br i1 %tmp19, label %dec_label_pc_12758, label %dec_label_pc_12748

dec_label_pc_12748:                               ; preds = %bb
  %v7_1274c = icmp sgt i32 %v0_12740.pre, 64
  br i1 %v7_1274c, label %dec_label_pc_12758, label %bb20

bb20:                                             ; preds = %dec_label_pc_12748
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_1277c24 = add i32 %v10_12730, 124
  store i32 %v5_1277c24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1276c

dec_label_pc_12758:                               ; preds = %.thread, %dec_label_pc_12748, %bb
  %v0_12758 = call i32 @function_12374()
  store i32 %v0_12758, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_12764 = inttoptr i32 %v0_12758 to i32*
  store i32 22, i32* %v2_12764, align 4
  %v0_127d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127d8

dec_label_pc_1276c:                               ; preds = %bb20, %dec_label_pc_1276c
  %v5_1277c25 = phi i32 [ %v5_1277c24, %bb20 ], [ %v5_1277c, %dec_label_pc_1276c ]
  %v2_12770 = add i32 %v5_1277c25, -136
  %v3_12770 = inttoptr i32 %v2_12770 to i32*
  store i32 0, i32* %v3_12770, align 4
  %v0_12774.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_12774 = add i32 %v0_12774.pre, -1
  store i32 %v1_12774, i32* %r0.global-to-local, align 4
  %v6_12774 = icmp slt i32 %v1_12774, 0
  %v4_1277c = mul i32 %v1_12774, 4
  %v5_1277c = add i32 %v4_1277c, %v10_12730
  store i32 %v5_1277c, i32* %r2.global-to-local, align 4
  br i1 %v6_12774, label %dec_label_pc_12784, label %dec_label_pc_1276c

dec_label_pc_12784:                               ; preds = %dec_label_pc_1276c
  %v2_12784 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_12784, i32* @r5, align 4
  %v2_12788 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_12788, i32* @r0, align 4
  %v0_1278c = load i32, i32* @r4, align 4
  store i32 %v0_1278c, i32* @r1, align 4
  %v0_12790 = call i32 @function_1280c()
  store i32 %v0_12790, i32* %r0.global-to-local, align 4
  %v1_12794 = icmp slt i32 %v0_12790, 0
  br i1 %v1_12794, label %dec_label_pc_127d4, label %dec_label_pc_1279c

dec_label_pc_1279c:                               ; preds = %dec_label_pc_12784
  %v0_1279c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1cf54.408 to i32), i32* %r0.global-to-local, align 4
  %v2_127a4 = call i32 @function_127e8(i32 ptrtoint (i32* @global_var_1cf54.408 to i32), i32 %v0_1279c)
  store i32 %v2_1273c, i32* %r2.global-to-local, align 4
  %v0_127bc = load i32, i32* @r4, align 4
  store i32 %v0_127bc, i32* %r0.global-to-local, align 4
  %v4_127c4 = call i32 @function_136d4(i32 %v0_127bc, i32* nonnull %stack_var_-152, i32 %v2_1273c)
  store i32 %v4_127c4, i32* %r0.global-to-local, align 4
  %v1_127c8 = icmp slt i32 %v4_127c4, 0
  br i1 %v1_127c8, label %dec_label_pc_127d4, label %bb23

bb23:                                             ; preds = %dec_label_pc_1279c
  %v5_127cc = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_127cc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127d8

dec_label_pc_127d4:                               ; preds = %dec_label_pc_1279c, %dec_label_pc_12784
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127d8

dec_label_pc_127d8:                               ; preds = %bb23, %dec_label_pc_12758, %dec_label_pc_127d4
  %v0_127d8 = phi i32 [ %v5_127cc, %bb23 ], [ %v0_127d8.pre, %dec_label_pc_12758 ], [ -1, %dec_label_pc_127d4 ]
  store i32 %v0_127d8, i32* %r0.global-to-local, align 4
  %v2_127e0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_127e0, i32* @r4, align 4
  store i32 %v6_12730, i32* @r5, align 4
  ret i32 %v0_127d8

; uselistorder directives
  uselistorder i32 %v0_127d8, { 1, 0 }
  uselistorder i32 %v5_1277c, { 1, 0 }
  uselistorder i32 %v1_12774, { 0, 2, 1 }
  uselistorder i32 %v2_1273c, { 1, 0 }
  uselistorder i32 %v0_12740.pre, { 1, 0, 2 }
  uselistorder i32 %v10_12730, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_127d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1276c, { 1, 0 }
  uselistorder label %dec_label_pc_12758, { 1, 2, 0 }
}

define i32 @function_127e8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_127e8:
  %v1_127e8 = add i32 %arg2, -1
  %v3_127ec = udiv i32 %v1_127e8, 32
  %v4_127f0 = mul nuw nsw i32 %v3_127ec, 4
  %v5_127f0 = add i32 %v4_127f0, %arg1
  %v6_127f0 = inttoptr i32 %v5_127f0 to i32*
  %v7_127f0 = load i32, i32* %v6_127f0, align 4
  %v1_127f4 = urem i32 %v1_127e8, 32
  %v7_127fc = shl i32 1, %v1_127f4
  %v8_127fc = and i32 %v7_127f0, %v7_127fc
  %v10_127fc = icmp ne i32 %v8_127fc, 0
  %. = zext i1 %v10_127fc to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_127e8, { 1, 0 }
}

define i32 @function_1280c() local_unnamed_addr {
dec_label_pc_1280c:
  %v0_1280c = load i32, i32* @r1, align 4
  %v1_1280c = add i32 %v0_1280c, -1
  %v3_12810 = udiv i32 %v1_1280c, 32
  store i32 %v3_12810, i32* @ip, align 4
  %v0_12814 = load i32, i32* @r0, align 4
  %v4_12814 = mul nuw nsw i32 %v3_12810, 4
  %v5_12814 = add i32 %v0_12814, %v4_12814
  %v6_12814 = inttoptr i32 %v5_12814 to i32*
  %v7_12814 = load i32, i32* %v6_12814, align 4
  %v1_12818 = urem i32 %v1_1280c, 32
  %v7_12820 = shl i32 1, %v1_12818
  %v8_12820 = or i32 %v7_12814, %v7_12820
  store i32 %v8_12820, i32* %v6_12814, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12810, { 1, 0 }
  uselistorder i32 %v1_1280c, { 1, 0 }
}

define i32 @function_12830(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12830:
  %v1_12830 = add i32 %arg2, -1
  %v3_12834 = udiv i32 %v1_12830, 32
  %v4_12838 = mul nuw nsw i32 %v3_12834, 4
  %v5_12838 = add i32 %v4_12838, %arg1
  %v6_12838 = inttoptr i32 %v5_12838 to i32*
  %v7_12838 = load i32, i32* %v6_12838, align 4
  %v1_1283c = urem i32 %v1_12830, 32
  %tmp = shl i32 -1, %v1_1283c
  %v8_12844 = add i32 %tmp, -1
  %v9_12844 = and i32 %v7_12838, %v8_12844
  store i32 %v9_12844, i32* %v6_12838, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_12830, { 1, 0 }
}

define i32 @function_12854(i32 %arg1) local_unnamed_addr {
dec_label_pc_12854:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12854 = load i32, i32* @r4, align 4
  %v6_12854 = load i32, i32* @r5, align 4
  %v9_12854 = load i32, i32* @r6, align 4
  %v0_12858 = load i32, i32* %r0.global-to-local, align 4
  %v2_12858 = icmp eq i32 %v0_12858, 0
  %v2_1285c = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_12858, label %bb, label %dec_label_pc_12868

bb:                                               ; preds = %dec_label_pc_12854
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12870

dec_label_pc_12868:                               ; preds = %dec_label_pc_12854
  %tmp = icmp ugt i32 %v0_12858, -8
  br i1 %tmp, label %dec_label_pc_12974, label %dec_label_pc_12870

dec_label_pc_12870:                               ; preds = %bb, %dec_label_pc_12868
  %v0_12870 = phi i32 [ %v0_12858, %dec_label_pc_12868 ], [ 1, %bb ]
  %v1_12870 = add i32 %v0_12870, 4
  store i32 %v1_12870, i32* %stack_var_-20, align 4
  store i32 %v2_1285c, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1cdbc.410 to i32), i32* %r0.global-to-local, align 4
  %v1_12888 = call i32 @function_133e8()
  store i32 ptrtoint (i32** @global_var_1cc00.414 to i32), i32* %r0.global-to-local, align 4
  %v3_12894 = call i32 @function_12c08(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v2_1285c)
  store i32 %v3_12894, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdbc.410 to i32), i32* %r0.global-to-local, align 4
  store i32 75948, i32* @lr, align 4
  %v1_128a8 = call i32 @function_133e8()
  store i32 %v1_128a8, i32* %r0.global-to-local, align 4
  %v2_128ac = icmp eq i32 %v3_12894, 0
  br i1 %v2_128ac, label %dec_label_pc_128b4, label %dec_label_pc_12964

dec_label_pc_128b4:                               ; preds = %dec_label_pc_12870
  %v2_128b8 = load i32, i32* @global_var_1cde4.417, align 4
  store i32 %v2_128b8, i32* @r4, align 4
  %v2_128bc = load i32, i32* %stack_var_-20, align 4
  %v3_128c0 = icmp ult i32 %v2_128bc, %v2_128b8
  br i1 %v3_128c0, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_128b4
  %v3_128c4 = add i32 %v2_128b8, -1
  %v2_128c8 = add i32 %v3_128c4, %v2_128bc
  %v2_128cc = sub i32 0, %v2_128b8
  %v3_128d0 = and i32 %v2_128c8, %v2_128cc
  store i32 %v3_128d0, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_128b4, %bb14
  store i32 ptrtoint (i32* @global_var_1cfd4.419 to i32), i32* %r0.global-to-local, align 4
  %v1_128dc = call i32 @function_133e8()
  %v0_128e0 = load i32, i32* @r4, align 4
  store i32 %v0_128e0, i32* %r0.global-to-local, align 4
  %v1_128e4 = call i32 @function_13b9c(i32 %v0_128e0)
  store i32 %v1_128e4, i32* %r0.global-to-local, align 4
  %v7_128e8 = icmp eq i32 %v1_128e4, -1
  br i1 %v7_128e8, label %bb15, label %dec_label_pc_128f4

bb15:                                             ; preds = %.thread3
  store i32 %v1_128e4, i32* @r5, align 4
  br label %dec_label_pc_12908

dec_label_pc_128f4:                               ; preds = %.thread3
  %v1_128f4 = add i32 %v1_128e4, 3
  %v1_128f8 = and i32 %v1_128f4, -4
  store i32 %v1_128f8, i32* @r5, align 4
  %v9_128fc = icmp eq i32 %v1_128f8, %v1_128e4
  br i1 %v9_128fc, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_128f4
  %v3_12900 = sub i32 %v1_128f8, %v1_128e4
  store i32 %v3_12900, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_128f4, %bb16
  %v1_12904 = xor i1 %v9_128fc, true
  call void @__pseudo_cond_branch(i1 %v1_12904, i32 ptrtoint (i32* @global_var_13b9c.420 to i32))
  br label %dec_label_pc_12908

dec_label_pc_12908:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1cfd4.419 to i32), i32* %r0.global-to-local, align 4
  store i32 76056, i32* @lr, align 4
  %v1_12914 = call i32 @function_133e8()
  store i32 %v1_12914, i32* %r0.global-to-local, align 4
  %v0_12918 = load i32, i32* @r5, align 4
  %v7_12918 = icmp eq i32 %v0_12918, -1
  br i1 %v7_12918, label %dec_label_pc_12974, label %dec_label_pc_12920

dec_label_pc_12920:                               ; preds = %dec_label_pc_12908
  store i32 ptrtoint (i32* @global_var_1cdbc.410 to i32), i32* %r0.global-to-local, align 4
  %v1_1292c = call i32 @function_133e8()
  %v0_12930 = load i32, i32* @r4, align 4
  %v0_12934 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1cc00.414 to i32), i32* %r0.global-to-local, align 4
  %v4_1293c = call i32 @function_12d5c(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v0_12934, i32 %v0_12930)
  store i32 ptrtoint (i32** @global_var_1cc00.414 to i32), i32* %r0.global-to-local, align 4
  %v3_12948 = call i32 @function_12c08(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v2_1285c)
  store i32 %v3_12948, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1cdbc.410 to i32), i32* %r0.global-to-local, align 4
  store i32 76124, i32* @lr, align 4
  %v1_12958 = call i32 @function_133e8()
  store i32 %v1_12958, i32* %r0.global-to-local, align 4
  %v2_1295c = icmp eq i32 %v3_12948, 0
  br i1 %v2_1295c, label %dec_label_pc_12974, label %dec_label_pc_12964

dec_label_pc_12964:                               ; preds = %dec_label_pc_12870, %dec_label_pc_12920
  %v1_12968 = phi i32 [ %v3_12894, %dec_label_pc_12870 ], [ %v3_12948, %dec_label_pc_12920 ]
  %v2_12964 = load i32, i32* %stack_var_-20, align 4
  %v2_12968 = inttoptr i32 %v1_12968 to i32*
  store i32 %v2_12964, i32* %v2_12968, align 4
  %v3_12968 = load i32, i32* %r4.global-to-local, align 4
  %v4_12968 = add i32 %v3_12968, 4
  store i32 %v4_12968, i32* %r4.global-to-local, align 4
  %v2_1296c = icmp eq i32 %v4_12968, 0
  br i1 %v2_1296c, label %dec_label_pc_12974, label %dec_label_pc_12984

dec_label_pc_12974:                               ; preds = %dec_label_pc_12964, %dec_label_pc_12920, %dec_label_pc_12908, %dec_label_pc_12868
  %v0_12974 = call i32 @function_12374()
  store i32 %v0_12974, i32* %r0.global-to-local, align 4
  %v2_1297c = inttoptr i32 %v0_12974 to i32*
  store i32 12, i32* %v2_1297c, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12984

dec_label_pc_12984:                               ; preds = %dec_label_pc_12964, %dec_label_pc_12974
  %v0_12984 = phi i32 [ %v4_12968, %dec_label_pc_12964 ], [ 0, %dec_label_pc_12974 ]
  store i32 %v0_12984, i32* %r0.global-to-local, align 4
  store i32 %v3_12854, i32* @r4, align 4
  store i32 %v6_12854, i32* @r5, align 4
  store i32 %v9_12854, i32* @r6, align 4
  ret i32 %v0_12984

; uselistorder directives
  uselistorder i32 %v0_12984, { 1, 0 }
  uselistorder i32 %v3_12948, { 1, 0, 2 }
  uselistorder i32 %v1_128f8, { 1, 0, 2 }
  uselistorder i32 %v1_128e4, { 3, 0, 2, 4, 1, 5 }
  uselistorder i32 %v3_12894, { 1, 0, 2 }
  uselistorder i32 %v0_12858, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 4, 7, 9, 10, 11, 3, 13, 12, 5, 15, 14, 2, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_12984, { 1, 0 }
  uselistorder label %dec_label_pc_12964, { 1, 0 }
  uselistorder label %dec_label_pc_12908, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12870, { 1, 0 }
}

define i32 @function_129a8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_129a8:
  %stack_var_-12 = alloca i32, align 4
  %v3_129a8 = load i32, i32* @r4, align 4
  store i32 %v3_129a8, i32* %stack_var_-12, align 4
  %v6_129a8 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_129b0 = mul i32 %arg2, %arg1
  store i32 %v2_129b0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_129b4 = icmp eq i32 %arg1, 0
  store i32 %v2_129b0, i32* @r0, align 4
  br i1 %v2_129b4, label %dec_label_pc_129e0, label %dec_label_pc_129c0

dec_label_pc_129c0:                               ; preds = %dec_label_pc_129a8
  %v0_129c0 = call i32 @function_11a18()
  %v0_129c4 = load i32, i32* @r5, align 4
  %v9_129c4 = icmp eq i32 %v0_129c4, %v0_129c0
  store i32 0, i32* @r5, align 4
  br i1 %v9_129c4, label %dec_label_pc_129c0.dec_label_pc_129e0_crit_edge, label %dec_label_pc_129d0

dec_label_pc_129c0.dec_label_pc_129e0_crit_edge:  ; preds = %dec_label_pc_129c0
  %v0_129e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_129e0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_129c0
  %v0_129d0 = call i32 @function_12374()
  %v2_129d8 = inttoptr i32 %v0_129d0 to i32*
  store i32 12, i32* %v2_129d8, align 4
  br label %dec_label_pc_129f8

dec_label_pc_129e0:                               ; preds = %dec_label_pc_129c0.dec_label_pc_129e0_crit_edge, %dec_label_pc_129a8
  %v0_129e0 = phi i32 [ %v0_129e0.pre, %dec_label_pc_129c0.dec_label_pc_129e0_crit_edge ], [ %v2_129b0, %dec_label_pc_129a8 ]
  %v1_129e4 = call i32 @function_12854(i32 %v0_129e0)
  store i32 %v1_129e4, i32* @r5, align 4
  store i32 76280, i32* @lr, align 4
  %v1_129f4 = icmp ne i32 %v1_129e4, 0
  call void @__pseudo_cond_branch(i1 %v1_129f4, i32 ptrtoint (i32* @global_var_123e0.421 to i32))
  br label %dec_label_pc_129f8

dec_label_pc_129f8:                               ; preds = %dec_label_pc_129d0, %dec_label_pc_129e0
  %v0_129f8 = load i32, i32* @r5, align 4
  %v2_129fc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_129fc, i32* @r4, align 4
  store i32 %v6_129a8, i32* @r5, align 4
  ret i32 %v0_129f8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_129f8, { 1, 0 }
}

define i32 @function_12a00() local_unnamed_addr {
dec_label_pc_12a00:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12a00 = load i32, i32* @r0, align 4
  %v2_12a00 = icmp eq i32 %v0_12a00, 0
  %v3_12a04 = load i32, i32* @r4, align 4
  store i32 %v3_12a04, i32* %stack_var_-24, align 4
  %v6_12a04 = load i32, i32* @r5, align 4
  %v9_12a04 = load i32, i32* @r6, align 4
  %v15_12a04 = load i32, i32* @r8, align 4
  br i1 %v2_12a00, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12a00
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12a00
  %v1_12a0c = add i32 %v0_12a00, -4
  %v2_12a0c = inttoptr i32 %v1_12a0c to i32*
  %v3_12a0c = load i32, i32* %v2_12a0c, align 4
  store i32 %v3_12a0c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1cc00.414 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_12a0c, i32* @r4, align 4
  %v1_12a24 = call i32 @function_133e8()
  %v0_12a28 = load i32, i32* @r4, align 4
  %v0_12a2c = load i32, i32* @r5, align 4
  %v4_12a34 = call i32 @function_12d5c(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v0_12a28, i32 %v0_12a2c)
  %v1_12a3c = inttoptr i32 %v4_12a34 to i32*
  %v2_12a3c = load i32, i32* %v1_12a3c, align 4
  store i32 %v2_12a3c, i32* %r6.global-to-local, align 4
  %v2_12a40 = load i32, i32* @global_var_1cde4.417, align 4
  %v4_12a44 = mul i32 %v2_12a40, 8
  %v6_12a44 = icmp ult i32 %v2_12a3c, %v4_12a44
  store i32 %v4_12a34, i32* @r4, align 4
  br i1 %v6_12a44, label %dec_label_pc_12a84, label %dec_label_pc_12a50

dec_label_pc_12a50:                               ; preds = %bb11
  %v1_12a58 = call i32 @function_133e8()
  %v1_12a60 = call i32 @function_13b9c(i32 0)
  %v0_12a64 = load i32, i32* @r4, align 4
  %v1_12a64 = add i32 %v0_12a64, 12
  store i32 %v1_12a64, i32* @r5, align 4
  %v9_12a68 = icmp eq i32 %v1_12a64, %v1_12a60
  br i1 %v9_12a68, label %dec_label_pc_12a8c, label %dec_label_pc_12a70

dec_label_pc_12a70:                               ; preds = %dec_label_pc_12a50
  %v1_12a7c = call i32 @function_133e8()
  br label %dec_label_pc_12a84

dec_label_pc_12a84:                               ; preds = %bb11, %dec_label_pc_12a70, %bb14
  %v2_12a84 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12a84, i32* @r4, align 4
  store i32 %v6_12a04, i32* @r5, align 4
  store i32 %v9_12a04, i32* %r6.global-to-local, align 4
  store i32 %v15_12a04, i32* %r8.global-to-local, align 4
  %v0_12a88 = call i32 @function_133e8()
  %v0_12a8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12a8c

dec_label_pc_12a8c:                               ; preds = %dec_label_pc_12a50, %dec_label_pc_12a84
  %v1_12a94 = phi i32 [ %v0_12a64, %dec_label_pc_12a50 ], [ %v0_12a8c.pre, %dec_label_pc_12a84 ]
  %v1_12a8c = add i32 %v1_12a94, 4
  %v2_12a8c = inttoptr i32 %v1_12a8c to i32*
  %v3_12a8c = load i32, i32* %v2_12a8c, align 4
  %v2_12a90 = icmp eq i32 %v3_12a8c, 0
  br i1 %v2_12a90, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_12a8c
  %v2_12a94 = add i32 %v1_12a94, 8
  %v3_12a94 = inttoptr i32 %v2_12a94 to i32*
  %v4_12a94 = load i32, i32* %v3_12a94, align 4
  %v3_12a98 = add i32 %v3_12a8c, 8
  %v4_12a98 = inttoptr i32 %v3_12a98 to i32*
  store i32 %v4_12a94, i32* %v4_12a98, align 4
  %v0_12a9c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12a8c, %bb12
  %v0_12a9c = phi i32 [ %v1_12a94, %dec_label_pc_12a8c ], [ %v0_12a9c.pre, %bb12 ]
  %v1_12a9c = add i32 %v0_12a9c, 8
  %v2_12a9c = inttoptr i32 %v1_12a9c to i32*
  %v3_12a9c = load i32, i32* %v2_12a9c, align 4
  %v1_12aa0 = add i32 %v0_12a9c, 4
  %v2_12aa0 = inttoptr i32 %v1_12aa0 to i32*
  %v3_12aa0 = load i32, i32* %v2_12aa0, align 4
  %v2_12aa4 = icmp eq i32 %v3_12a9c, 0
  br i1 %v2_12aa4, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12aa8 = add i32 %v3_12a9c, 4
  %v4_12aa8 = inttoptr i32 %v3_12aa8 to i32*
  store i32 %v3_12aa0, i32* %v4_12aa8, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_12aac = load i32, i32* %r8.global-to-local, align 4
  %v3_12aac = inttoptr i32 %v2_12aac to i32*
  store i32 %v3_12aa0, i32* %v3_12aac, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_12abc = call i32 @function_133e8()
  %v0_12ac0 = load i32, i32* %r6.global-to-local, align 4
  %v1_12ac0 = load i32, i32* @r4, align 4
  %v0_12ac8 = load i32, i32* @r5, align 4
  %v2_12ac0 = sub i32 12, %v0_12ac0
  %v1_12ac4 = add i32 %v2_12ac0, %v1_12ac0
  %v2_12ac8 = sub i32 %v1_12ac4, %v0_12ac8
  %v1_12acc = call i32 @function_13b9c(i32 %v2_12ac8)
  br label %dec_label_pc_12a84

; uselistorder directives
  uselistorder i32 %v0_12a9c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_13b9c, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_12a8c, { 1, 0 }
  uselistorder label %dec_label_pc_12a84, { 2, 1, 0 }
}

define i32 @function_12af0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12af0:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12af0 = load i32, i32* @r4, align 4
  store i32 %v3_12af0, i32* %stack_var_-24, align 4
  %v6_12af0 = load i32, i32* @r5, align 4
  %v9_12af0 = load i32, i32* @r6, align 4
  %v12_12af0 = load i32, i32* @r7, align 4
  %v15_12af0 = load i32, i32* @r8, align 4
  %v18_12af0 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12af4 = icmp eq i32 %arg2, 0
  %v0_12af8 = load i32, i32* @r0, align 4
  store i32 %v0_12af8, i32* @r7, align 4
  br i1 %v2_12af4, label %dec_label_pc_12b00, label %dec_label_pc_12b08

dec_label_pc_12b00:                               ; preds = %dec_label_pc_12af0
  %v0_12b00 = call i32 @function_12a00()
  %v0_12b10.pre = load i32, i32* @r4, align 4
  %v2_12b14.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_12b10

dec_label_pc_12b08:                               ; preds = %dec_label_pc_12af0
  %v2_12b08 = icmp eq i32 %v0_12af8, 0
  br i1 %v2_12b08, label %dec_label_pc_12b10, label %dec_label_pc_12b1c

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12b08, %dec_label_pc_12b00
  %v2_12b14 = phi i32 [ %v3_12af0, %dec_label_pc_12b08 ], [ %v2_12b14.pre, %dec_label_pc_12b00 ]
  %v0_12b10 = phi i32 [ %arg2, %dec_label_pc_12b08 ], [ %v0_12b10.pre, %dec_label_pc_12b00 ]
  store i32 %v2_12b14, i32* @r4, align 4
  store i32 %v6_12af0, i32* @r5, align 4
  store i32 %v9_12af0, i32* @r6, align 4
  store i32 %v12_12af0, i32* @r7, align 4
  store i32 %v18_12af0, i32* @lr, align 4
  %v1_12b18 = call i32 @function_12854(i32 %v0_12b10)
  %v0_12b1c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12b1c

dec_label_pc_12b1c:                               ; preds = %dec_label_pc_12b08, %dec_label_pc_12b10
  %v0_12b34 = phi i32 [ %v0_12af8, %dec_label_pc_12b08 ], [ %v1_12b18, %dec_label_pc_12b10 ]
  %v0_12b1c = phi i32 [ %arg2, %dec_label_pc_12b08 ], [ %v0_12b1c.pre, %dec_label_pc_12b10 ]
  %v1_12b1c = add i32 %v0_12b1c, 7
  %v1_12b20 = and i32 %v1_12b1c, -4
  store i32 %v1_12b20, i32* @r5, align 4
  %v2_12b24 = icmp ugt i32 %v1_12b20, 10
  %v1_12b28 = add i32 %v0_12b34, -4
  %v2_12b28 = inttoptr i32 %v1_12b28 to i32*
  %v3_12b28 = load i32, i32* %v2_12b28, align 4
  store i32 %v3_12b28, i32* @r6, align 4
  br i1 %v2_12b24, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_12b1c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_12b1c, %bb
  %v0_12bb0 = phi i32 [ %v1_12b20, %dec_label_pc_12b1c ], [ 12, %bb ]
  store i32 %v1_12b28, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_12bb0, %v3_12b28
  br i1 %tmp, label %dec_label_pc_12b3c, label %dec_label_pc_12bb0

dec_label_pc_12b3c:                               ; preds = %bb14
  %v2_12b30 = sub i32 %v0_12bb0, %v3_12b28
  %v1_12b4c = call i32 @function_133e8()
  %v0_12b54 = load i32, i32* @r8, align 4
  %v1_12b54 = load i32, i32* @r6, align 4
  %v2_12b54 = add i32 %v1_12b54, %v0_12b54
  %v4_12b5c = call i32 @function_12c9c(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v2_12b54, i32 %v2_12b30)
  store i32 %v4_12b5c, i32* @r4, align 4
  store i32 76660, i32* @lr, align 4
  %v1_12b70 = call i32 @function_133e8()
  %v0_12b74 = load i32, i32* @r4, align 4
  %v2_12b74 = icmp eq i32 %v0_12b74, 0
  br i1 %v2_12b74, label %dec_label_pc_12b84, label %.thread

.thread:                                          ; preds = %dec_label_pc_12b3c
  %v1_12b78 = load i32, i32* @r6, align 4
  %v3_12b78 = add i32 %v1_12b78, %v0_12b74
  %v2_12b7c = load i32, i32* @r7, align 4
  %v3_12b7c = add i32 %v2_12b7c, -4
  %v4_12b7c = inttoptr i32 %v3_12b7c to i32*
  store i32 %v3_12b78, i32* %v4_12b7c, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12b84:                               ; preds = %dec_label_pc_12b3c
  %v0_12b84 = load i32, i32* @r5, align 4
  %v1_12b84 = add i32 %v0_12b84, -4
  %v1_12b88 = call i32 @function_12854(i32 %v1_12b84)
  store i32 %v1_12b88, i32* @r0, align 4
  store i32 %v1_12b88, i32* @r4, align 4
  %v2_12b8c = icmp eq i32 %v1_12b88, 0
  br i1 %v2_12b8c, label %dec_label_pc_12ba8, label %dec_label_pc_12b94

dec_label_pc_12b94:                               ; preds = %dec_label_pc_12b84
  %v0_12b94 = load i32, i32* @r6, align 4
  %v1_12b94 = add i32 %v0_12b94, -4
  store i32 %v1_12b94, i32* @r2, align 4
  %v0_12b98 = load i32, i32* @r7, align 4
  store i32 %v0_12b98, i32* @r1, align 4
  %v3_12b9c = call i32 @function_123c0(i32 %v1_12b88, i32 %v0_12b98, i32 %v1_12b94)
  %v0_12ba0 = load i32, i32* @r7, align 4
  store i32 %v0_12ba0, i32* @r0, align 4
  %v0_12ba4 = call i32 @function_12a00()
  %v0_12ba8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12ba8

dec_label_pc_12ba8:                               ; preds = %dec_label_pc_12b84, %dec_label_pc_12b94
  %v0_12ba8 = phi i32 [ 0, %dec_label_pc_12b84 ], [ %v0_12ba8.pre, %dec_label_pc_12b94 ]
  store i32 %v0_12ba8, i32* @r7, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12bb0:                               ; preds = %bb14
  %v1_12bb0 = add i32 %v0_12bb0, 28
  %tmp15 = icmp ugt i32 %v1_12bb0, %v3_12b28
  br i1 %tmp15, label %dec_label_pc_12bf0, label %dec_label_pc_12bbc

dec_label_pc_12bbc:                               ; preds = %dec_label_pc_12bb0
  %v1_12bc8 = call i32 @function_133e8()
  %v0_12bcc = load i32, i32* @r8, align 4
  %v1_12bcc = load i32, i32* @r5, align 4
  %v2_12bcc = add i32 %v1_12bcc, %v0_12bcc
  %v1_12bd0 = load i32, i32* @r6, align 4
  %v2_12bd0 = sub i32 %v1_12bd0, %v1_12bcc
  %v4_12bd8 = call i32 @function_12d5c(i32* bitcast (i32** @global_var_1cc00.414 to i32*), i32 %v2_12bcc, i32 %v2_12bd0)
  store i32 76780, i32* @lr, align 4
  %v1_12be8 = call i32 @function_133e8()
  %v0_12bec = load i32, i32* @r5, align 4
  %v1_12bec = load i32, i32* @r7, align 4
  %v2_12bec = add i32 %v1_12bec, -4
  %v3_12bec = inttoptr i32 %v2_12bec to i32*
  store i32 %v0_12bec, i32* %v3_12bec, align 4
  br label %dec_label_pc_12bf0

dec_label_pc_12bf0:                               ; preds = %.thread, %dec_label_pc_12bb0, %dec_label_pc_12ba8, %dec_label_pc_12bbc
  %v0_12bf0 = load i32, i32* @r7, align 4
  %v2_12bf4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12bf4, i32* @r4, align 4
  store i32 %v6_12af0, i32* @r5, align 4
  store i32 %v9_12af0, i32* @r6, align 4
  store i32 %v12_12af0, i32* @r7, align 4
  store i32 %v15_12af0, i32* @r8, align 4
  ret i32 %v0_12bf0

; uselistorder directives
  uselistorder i32 %v1_12bcc, { 1, 0 }
  uselistorder i32 %v0_12bb0, { 1, 2, 0 }
  uselistorder i32 %v3_12b28, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1cc00.414, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1cc00.414 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_12854, { 1, 44, 0, 4, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_12a00, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 107, 108, 109, 110, 112, 111, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 39, 128, 129, 130, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 0, 1, 2, 3, 4, 5, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 73, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* @r7, { 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 10, 11, 16, 17, 18, 2, 7, 8, 9, 25, 12, 13, 14, 15, 4, 19, 3, 20, 21, 22, 23, 24, 26, 1, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 5, 67, 68, 69, 70, 71, 72, 73, 74, 243, 244, 245, 118, 119, 120, 121, 61, 0, 62, 63, 64, 75, 76, 77, 78, 79, 80, 6, 81, 82, 83, 84, 85, 86, 87, 88, 89, 100, 101, 102, 103, 104, 105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 109, 110, 111, 112, 113, 114, 115, 116, 117 }
  uselistorder label %dec_label_pc_12bf0, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12ba8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_12b1c, { 1, 0 }
}

define i32 @function_12c08(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c08:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_12c08 = inttoptr i32 %arg2 to i32*
  %v2_12c08 = load i32, i32* %v1_12c08, align 4
  %v3_12c0c = load i32, i32* @r4, align 4
  store i32 %v3_12c0c, i32* %stack_var_-8, align 4
  %v1_12c10 = add i32 %v2_12c08, 3
  %v1_12c14 = and i32 %v1_12c10, -4
  store i32 %v1_12c14, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12c1c = icmp ugt i32 %v1_12c14, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12c24 = load i32, i32* %arg1, align 4
  store i32 %v2_12c24, i32* %r0.global-to-local, align 4
  br i1 %v2_12c1c, label %dec_label_pc_12c90.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_12c08
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12c90.preheader

dec_label_pc_12c90.preheader:                     ; preds = %dec_label_pc_12c08, %bb
  %v1_12c44 = phi i32 [ %v1_12c14, %dec_label_pc_12c08 ], [ 12, %bb ]
  %v2_12c909 = icmp eq i32 %v2_12c24, 0
  br i1 %v2_12c909, label %dec_label_pc_12c98, label %dec_label_pc_12c30

dec_label_pc_12c30:                               ; preds = %dec_label_pc_12c90.preheader, %dec_label_pc_12c8c
  %v2_12c48 = phi i32 [ %v3_12c8c, %dec_label_pc_12c8c ], [ %v2_12c24, %dec_label_pc_12c90.preheader ]
  %v1_12c30 = inttoptr i32 %v2_12c48 to i32*
  %v2_12c30 = load i32, i32* %v1_12c30, align 4
  store i32 %v2_12c30, i32* %ip.global-to-local, align 4
  %v3_12c34 = icmp ult i32 %v2_12c30, %v1_12c44
  br i1 %v3_12c34, label %dec_label_pc_12c8c, label %dec_label_pc_12c3c

dec_label_pc_12c3c:                               ; preds = %dec_label_pc_12c30
  %v1_12c3c = add i32 %v1_12c44, 44
  %v3_12c40 = icmp ult i32 %v2_12c30, %v1_12c3c
  br i1 %v3_12c40, label %dec_label_pc_12c50, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_12c3c
  %v2_12c34.le = sub i32 %v2_12c30, %v1_12c44
  store i32 %v2_12c34.le, i32* %v1_12c30, align 4
  %v0_12c7c.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12c84.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12c50:                               ; preds = %dec_label_pc_12c3c
  %v1_12c50 = add i32 %v2_12c48, 4
  %v2_12c50 = inttoptr i32 %v1_12c50 to i32*
  %v3_12c50 = load i32, i32* %v2_12c50, align 4
  store i32 %v3_12c50, i32* %r2.global-to-local, align 4
  %v2_12c54 = icmp eq i32 %v3_12c50, 0
  br i1 %v2_12c54, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12c50
  %v2_12c58 = add i32 %v2_12c48, 8
  %v3_12c58 = inttoptr i32 %v2_12c58 to i32*
  %v4_12c58 = load i32, i32* %v3_12c58, align 4
  %v3_12c5c = add i32 %v3_12c50, 8
  %v4_12c5c = inttoptr i32 %v3_12c5c to i32*
  store i32 %v4_12c58, i32* %v4_12c5c, align 4
  %v0_12c60.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12c50, %bb27
  %v0_12c60 = phi i32 [ %v2_12c48, %dec_label_pc_12c50 ], [ %v0_12c60.pre, %bb27 ]
  %v1_12c60 = add i32 %v0_12c60, 8
  %v2_12c60 = inttoptr i32 %v1_12c60 to i32*
  %v3_12c60 = load i32, i32* %v2_12c60, align 4
  %v1_12c64 = add i32 %v0_12c60, 4
  %v2_12c64 = inttoptr i32 %v1_12c64 to i32*
  %v3_12c64 = load i32, i32* %v2_12c64, align 4
  %v2_12c68 = icmp eq i32 %v3_12c60, 0
  br i1 %v2_12c68, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_12c6c = add i32 %v3_12c60, 4
  %v4_12c6c = inttoptr i32 %v3_12c6c to i32*
  store i32 %v3_12c64, i32* %v4_12c6c, align 4
  %v1_12c74 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12c74, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12c70 = load i32, i32* %r1.global-to-local, align 4
  %v3_12c70 = inttoptr i32 %v2_12c70 to i32*
  store i32 %v3_12c64, i32* %v3_12c70, align 4
  %v1_12c78.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12c78.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12c84 = phi i32 [ %v0_12c84.pre, %.thread._crit_edge ], [ %v1_12c74, %bb28 ], [ %v1_12c78.pre, %.thread5 ]
  %v0_12c7c = phi i32 [ %v0_12c7c.pre, %.thread._crit_edge ], [ %v1_12c74, %bb28 ], [ %v1_12c78.pre, %.thread5 ]
  %v1_12c7c = load i32, i32* %r0.global-to-local, align 4
  %v2_12c7c = sub i32 %v1_12c7c, %v0_12c7c
  %v1_12c80 = add i32 %v2_12c7c, 12
  store i32 %v1_12c80, i32* %r0.global-to-local, align 4
  %v1_12c84 = load i32, i32* %r4.global-to-local, align 4
  %v2_12c84 = inttoptr i32 %v1_12c84 to i32*
  store i32 %v0_12c84, i32* %v2_12c84, align 4
  %v2_12c88 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12c88, i32* %r4.global-to-local, align 4
  ret i32 %v1_12c80

dec_label_pc_12c8c:                               ; preds = %dec_label_pc_12c30
  %v1_12c8c = add i32 %v2_12c48, 4
  %v2_12c8c = inttoptr i32 %v1_12c8c to i32*
  %v3_12c8c = load i32, i32* %v2_12c8c, align 4
  store i32 %v3_12c8c, i32* %r0.global-to-local, align 4
  %v2_12c90 = icmp eq i32 %v3_12c8c, 0
  br i1 %v2_12c90, label %dec_label_pc_12c90.dec_label_pc_12c98_crit_edge, label %dec_label_pc_12c30

dec_label_pc_12c90.dec_label_pc_12c98_crit_edge:  ; preds = %dec_label_pc_12c8c
  br label %dec_label_pc_12c98

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c90.dec_label_pc_12c98_crit_edge, %dec_label_pc_12c90.preheader
  store i32 %v3_12c0c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12c8c, { 1, 2, 0 }
  uselistorder i32 %v0_12c60, { 1, 0 }
  uselistorder i32 %v2_12c30, { 1, 0, 2, 3 }
  uselistorder i32 %v2_12c48, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12c44, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12c30, { 1, 0 }
  uselistorder label %dec_label_pc_12c90.preheader, { 1, 0 }
}

define i32 @function_12c9c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12c9c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12ca0 = load i32, i32* %arg1, align 4
  store i32 %v2_12ca0, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_12d186 = icmp eq i32 %v2_12ca0, 0
  br i1 %v2_12d186, label %dec_label_pc_12d20, label %dec_label_pc_12cac

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c9c, %dec_label_pc_12d14
  %v0_12cec = phi i32 [ %v3_12d14, %dec_label_pc_12d14 ], [ %v2_12ca0, %dec_label_pc_12c9c ]
  %v1_12cac = inttoptr i32 %v0_12cec to i32*
  %v2_12cac = load i32, i32* %v1_12cac, align 4
  store i32 %v2_12cac, i32* %r0.global-to-local, align 4
  %v2_12cb0 = sub i32 %v0_12cec, %v2_12cac
  %v1_12cb4 = add i32 %v2_12cb0, 12
  %v3_12cb8 = icmp uge i32 %v1_12cb4, %arg2
  %v9_12cb8 = icmp eq i32 %v1_12cb4, %arg2
  %v2_12cbc = xor i1 %v9_12cb8, true
  %v3_12cbc = and i1 %v3_12cb8, %v2_12cbc
  br i1 %v3_12cbc, label %dec_label_pc_12d14, label %dec_label_pc_12cc0

dec_label_pc_12cc0:                               ; preds = %dec_label_pc_12cac
  br i1 %v9_12cb8, label %dec_label_pc_12cc4, label %dec_label_pc_12d20

dec_label_pc_12cc4:                               ; preds = %dec_label_pc_12cc0
  %v1_12cc4 = add i32 %arg3, 3
  %v1_12cc8 = and i32 %v1_12cc4, -4
  store i32 %v1_12cc8, i32* %r2.global-to-local, align 4
  %v2_12ccc = sub i32 %v2_12cac, %v1_12cc8
  %v3_12ccc = icmp ult i32 %v2_12cac, %v1_12cc8
  br i1 %v3_12ccc, label %dec_label_pc_12d20, label %dec_label_pc_12cd4

dec_label_pc_12cd4:                               ; preds = %dec_label_pc_12cc4
  %v1_12cd4 = add i32 %v1_12cc8, 44
  %v3_12cd8 = icmp ult i32 %v2_12cac, %v1_12cd4
  br i1 %v3_12cd8, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_12cd4
  store i32 %v2_12ccc, i32* %v1_12cac, align 4
  %v1_12ce4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12ce4, i32* %r0.global-to-local, align 4
  ret i32 %v1_12ce4

.thread2:                                         ; preds = %dec_label_pc_12cd4
  %v1_12cec = add i32 %v0_12cec, 4
  %v2_12cec = inttoptr i32 %v1_12cec to i32*
  %v3_12cec = load i32, i32* %v2_12cec, align 4
  store i32 %v3_12cec, i32* %r2.global-to-local, align 4
  %v2_12cf0 = icmp eq i32 %v3_12cec, 0
  br i1 %v2_12cf0, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_12cf4 = add i32 %v0_12cec, 8
  %v3_12cf4 = inttoptr i32 %v2_12cf4 to i32*
  %v4_12cf4 = load i32, i32* %v3_12cf4, align 4
  %v3_12cf8 = add i32 %v3_12cec, 8
  %v4_12cf8 = inttoptr i32 %v3_12cf8 to i32*
  store i32 %v4_12cf4, i32* %v4_12cf8, align 4
  %v0_12cfc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_12cfc = phi i32 [ %v0_12cec, %.thread2 ], [ %v0_12cfc.pre, %bb17 ]
  %v1_12cfc = add i32 %v0_12cfc, 8
  %v2_12cfc = inttoptr i32 %v1_12cfc to i32*
  %v3_12cfc = load i32, i32* %v2_12cfc, align 4
  store i32 %v3_12cfc, i32* %r2.global-to-local, align 4
  %v1_12d00 = add i32 %v0_12cfc, 4
  %v2_12d00 = inttoptr i32 %v1_12d00 to i32*
  %v3_12d00 = load i32, i32* %v2_12d00, align 4
  %v2_12d04 = icmp eq i32 %v3_12cfc, 0
  br i1 %v2_12d04, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12d08 = add i32 %v3_12cfc, 4
  %v4_12d08 = inttoptr i32 %v3_12d08 to i32*
  store i32 %v3_12d00, i32* %v4_12d08, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12d0c = load i32, i32* %lr.global-to-local, align 4
  %v3_12d0c = inttoptr i32 %v2_12d0c to i32*
  store i32 %v3_12d00, i32* %v3_12d0c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12d10 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12d10

dec_label_pc_12d14:                               ; preds = %dec_label_pc_12cac
  %v1_12d14 = add i32 %v0_12cec, 4
  %v2_12d14 = inttoptr i32 %v1_12d14 to i32*
  %v3_12d14 = load i32, i32* %v2_12d14, align 4
  store i32 %v3_12d14, i32* %ip.global-to-local, align 4
  %v2_12d18 = icmp eq i32 %v3_12d14, 0
  br i1 %v2_12d18, label %dec_label_pc_12d18.dec_label_pc_12d20.loopexit_crit_edge, label %dec_label_pc_12cac

dec_label_pc_12d18.dec_label_pc_12d20.loopexit_crit_edge: ; preds = %dec_label_pc_12d14
  br label %dec_label_pc_12d20

dec_label_pc_12d20:                               ; preds = %dec_label_pc_12cc4, %dec_label_pc_12c9c, %dec_label_pc_12d18.dec_label_pc_12d20.loopexit_crit_edge, %dec_label_pc_12cc0
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12d14, { 1, 2, 0 }
  uselistorder i32 %v0_12cfc, { 1, 0 }
  uselistorder i32 %v1_12cc8, { 0, 2, 1, 3 }
  uselistorder i1 %v9_12cb8, { 1, 0 }
  uselistorder i32 %v2_12cac, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_12cec, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12d20, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12cac, { 1, 0 }
}

define i32 @function_12d28() local_unnamed_addr {
dec_label_pc_12d28:
  %v0_12d28 = load i32, i32* @r2, align 4
  %v2_12d28 = icmp eq i32 %v0_12d28, 0
  %v0_12d2c = load i32, i32* @r3, align 4
  %v1_12d2c = load i32, i32* @r1, align 4
  %v2_12d2c = add i32 %v1_12d2c, 4
  %v3_12d2c = inttoptr i32 %v2_12d2c to i32*
  store i32 %v0_12d2c, i32* %v3_12d2c, align 4
  %v0_12d30 = load i32, i32* @r2, align 4
  %v1_12d30 = load i32, i32* @r1, align 4
  %v2_12d30 = add i32 %v1_12d30, 8
  %v3_12d30 = inttoptr i32 %v2_12d30 to i32*
  store i32 %v0_12d30, i32* %v3_12d30, align 4
  %v1_12d38 = load i32, i32* @r1, align 4
  br i1 %v2_12d28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12d28
  %v2_12d34 = load i32, i32* @r2, align 4
  %v3_12d34 = add i32 %v2_12d34, 4
  %v4_12d34 = inttoptr i32 %v3_12d34 to i32*
  store i32 %v1_12d38, i32* %v4_12d34, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_12d28
  %v2_12d38 = load i32, i32* @r0, align 4
  %v3_12d38 = inttoptr i32 %v2_12d38 to i32*
  store i32 %v1_12d38, i32* %v3_12d38, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12d3c = load i32, i32* @r3, align 4
  %v2_12d3c = icmp eq i32 %v0_12d3c, 0
  br i1 %v2_12d3c, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12d40 = load i32, i32* @r1, align 4
  %v3_12d40 = add i32 %v0_12d3c, 8
  %v4_12d40 = inttoptr i32 %v3_12d40 to i32*
  store i32 %v1_12d40, i32* %v4_12d40, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12d44 = load i32, i32* @r0, align 4
  ret i32 %v1_12d44

; uselistorder directives
  uselistorder i32 %v1_12d38, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12d48() local_unnamed_addr {
dec_label_pc_12d48:
  %v0_12d48 = load i32, i32* @r2, align 4
  %v2_12d48 = icmp eq i32 %v0_12d48, 0
  %v1_12d4c = load i32, i32* @r1, align 4
  br i1 %v2_12d48, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12d48
  %v2_12d4c = load i32, i32* @r0, align 4
  %v3_12d4c = inttoptr i32 %v2_12d4c to i32*
  store i32 %v1_12d4c, i32* %v3_12d4c, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12d48
  %v3_12d50 = add i32 %v0_12d48, 4
  %v4_12d50 = inttoptr i32 %v3_12d50 to i32*
  store i32 %v1_12d4c, i32* %v4_12d50, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12d54 = load i32, i32* @r2, align 4
  %v1_12d54 = load i32, i32* @r1, align 4
  %v2_12d54 = add i32 %v1_12d54, 8
  %v3_12d54 = inttoptr i32 %v2_12d54 to i32*
  store i32 %v0_12d54, i32* %v3_12d54, align 4
  %v1_12d58 = load i32, i32* @r0, align 4
  ret i32 %v1_12d58

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12d5c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d5c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12d5c = load i32, i32* @r4, align 4
  store i32 %v3_12d5c, i32* %stack_var_-20, align 4
  %v2_12d60 = load i32, i32* %arg1, align 4
  store i32 %v2_12d60, i32* %r4.global-to-local, align 4
  %v2_12d64 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12d802 = icmp eq i32 %v2_12d60, 0
  br i1 %v2_12d802, label %dec_label_pc_12e30, label %dec_label_pc_12d70

dec_label_pc_12d70:                               ; preds = %dec_label_pc_12d5c, %dec_label_pc_12d78
  %v0_12dc0 = phi i32 [ %v0_12dc8, %dec_label_pc_12d78 ], [ 0, %dec_label_pc_12d5c ]
  %v0_12dc8 = phi i32 [ %v3_12d7c, %dec_label_pc_12d78 ], [ %v2_12d60, %dec_label_pc_12d5c ]
  %v1_12d845.in = phi i32 [ %v3_12d7c, %dec_label_pc_12d78 ], [ %v2_12d60, %dec_label_pc_12d5c ]
  %v1_12d845 = add i32 %v1_12d845.in, 12
  %v3_12d70 = icmp ult i32 %v1_12d845, %arg2
  br i1 %v3_12d70, label %dec_label_pc_12d78, label %dec_label_pc_12d90

dec_label_pc_12d78:                               ; preds = %dec_label_pc_12d70
  store i32 %v0_12dc8, i32* %r6.global-to-local, align 4
  %v1_12d7c = add i32 %v0_12dc8, 4
  %v2_12d7c = inttoptr i32 %v1_12d7c to i32*
  %v3_12d7c = load i32, i32* %v2_12d7c, align 4
  store i32 %v3_12d7c, i32* %r4.global-to-local, align 4
  %v2_12d80 = icmp eq i32 %v3_12d7c, 0
  br i1 %v2_12d80, label %dec_label_pc_12d80.dec_label_pc_12e30.loopexit_crit_edge, label %dec_label_pc_12d70

dec_label_pc_12d90:                               ; preds = %dec_label_pc_12d70
  %v1_12d90 = inttoptr i32 %v0_12dc8 to i32*
  %v2_12d90 = load i32, i32* %v1_12d90, align 4
  %v2_12d94 = sub i32 %v0_12dc8, %v2_12d90
  %v1_12d98 = add i32 %v2_12d94, 12
  %v3_12d9c = icmp uge i32 %v1_12d98, %v2_12d64
  %v9_12d9c = icmp eq i32 %v1_12d98, %v2_12d64
  %v2_12da0 = xor i1 %v9_12d9c, true
  %v3_12da0 = and i1 %v3_12d9c, %v2_12da0
  br i1 %v3_12da0, label %dec_label_pc_12e30, label %dec_label_pc_12da4

dec_label_pc_12da4:                               ; preds = %dec_label_pc_12d90
  %v2_12da4 = add i32 %v2_12d90, %arg3
  store i32 %v2_12da4, i32* %r7.global-to-local, align 4
  br i1 %v9_12d9c, label %dec_label_pc_12dac, label %dec_label_pc_12dd8

dec_label_pc_12dac:                               ; preds = %dec_label_pc_12da4
  %v2_12dac = icmp eq i32 %v0_12dc0, 0
  br i1 %v2_12dac, label %dec_label_pc_12e24, label %dec_label_pc_12db4

dec_label_pc_12db4:                               ; preds = %dec_label_pc_12dac
  %v1_12db4 = add i32 %v0_12dc0, 12
  %v9_12db8 = icmp eq i32 %v1_12db4, %arg2
  br i1 %v9_12db8, label %dec_label_pc_12dc0, label %dec_label_pc_12e24

dec_label_pc_12dc0:                               ; preds = %dec_label_pc_12db4
  %v1_12dc0 = inttoptr i32 %v0_12dc0 to i32*
  %v2_12dc0 = load i32, i32* %v1_12dc0, align 4
  %v1_12dc4 = add i32 %v0_12dc0, 8
  %v2_12dc4 = inttoptr i32 %v1_12dc4 to i32*
  %v3_12dc4 = load i32, i32* %v2_12dc4, align 4
  store i32 %v3_12dc4, i32* @r2, align 4
  store i32 %v0_12dc8, i32* @r1, align 4
  %v2_12dcc = add i32 %v2_12dc0, %v2_12da4
  store i32 %v2_12dcc, i32* %r7.global-to-local, align 4
  %v0_12dd0 = call i32 @function_12d48()
  br label %dec_label_pc_12e24

dec_label_pc_12dd8:                               ; preds = %dec_label_pc_12da4
  %v1_12dd8 = add i32 %v0_12dc8, 4
  %v2_12dd8 = inttoptr i32 %v1_12dd8 to i32*
  %v3_12dd8 = load i32, i32* %v2_12dd8, align 4
  store i32 %v3_12dd8, i32* %r5.global-to-local, align 4
  %v2_12ddc = icmp eq i32 %v3_12dd8, 0
  br i1 %v2_12ddc, label %dec_label_pc_12e10, label %dec_label_pc_12de4

dec_label_pc_12de4:                               ; preds = %dec_label_pc_12dd8
  %v1_12de4 = inttoptr i32 %v3_12dd8 to i32*
  %v2_12de4 = load i32, i32* %v1_12de4, align 4
  %v2_12de8 = sub i32 %v3_12dd8, %v2_12de4
  %v1_12dec = add i32 %v2_12de8, 12
  %v9_12df0 = icmp eq i32 %v2_12d64, %v1_12dec
  br i1 %v9_12df0, label %dec_label_pc_12df8, label %dec_label_pc_12e10

dec_label_pc_12df8:                               ; preds = %dec_label_pc_12de4
  store i32 %v0_12dc0, i32* @r2, align 4
  store i32 %v3_12dd8, i32* @r1, align 4
  %v2_12e00 = add i32 %v2_12de4, %v2_12da4
  store i32 %v2_12e00, i32* %r7.global-to-local, align 4
  %v0_12e04 = call i32 @function_12d48()
  %v0_12e08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e08, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e24

dec_label_pc_12e10:                               ; preds = %dec_label_pc_12de4, %dec_label_pc_12dd8
  %v2_12e10 = add i32 %v0_12dc8, %arg3
  store i32 %v2_12e10, i32* %r4.global-to-local, align 4
  store i32 %v3_12dd8, i32* @r3, align 4
  store i32 %v0_12dc0, i32* @r2, align 4
  store i32 %v2_12e10, i32* @r1, align 4
  %v0_12e20 = call i32 @function_12d28()
  br label %dec_label_pc_12e24

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12db4, %dec_label_pc_12dac, %dec_label_pc_12df8, %dec_label_pc_12dc0, %dec_label_pc_12e10
  %v0_12e24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e24, i32* %r5.global-to-local, align 4
  %v0_12e28 = load i32, i32* %r7.global-to-local, align 4
  %v2_12e28 = inttoptr i32 %v0_12e24 to i32*
  store i32 %v0_12e28, i32* %v2_12e28, align 4
  br label %dec_label_pc_12e48

dec_label_pc_12d80.dec_label_pc_12e30.loopexit_crit_edge: ; preds = %dec_label_pc_12d78
  br label %dec_label_pc_12e30

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12d5c, %dec_label_pc_12d80.dec_label_pc_12e30.loopexit_crit_edge, %dec_label_pc_12d90
  %v1_12e30 = add i32 %v2_12d64, -12
  store i32 %v1_12e30, i32* %r5.global-to-local, align 4
  %v3_12e34 = inttoptr i32 %v1_12e30 to i32*
  store i32 %arg3, i32* %v3_12e34, align 4
  %v0_12e38 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e38, i32* @r3, align 4
  %v0_12e3c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12e3c, i32* @r2, align 4
  %v0_12e40 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e40, i32* @r1, align 4
  %v0_12e44 = call i32 @function_12d28()
  br label %dec_label_pc_12e48

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e24, %dec_label_pc_12e30
  %v0_12e48 = load i32, i32* %r5.global-to-local, align 4
  %v2_12e4c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12e4c, i32* @r4, align 4
  ret i32 %v0_12e48

; uselistorder directives
  uselistorder i32 %v3_12dd8, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_12d9c, { 1, 0 }
  uselistorder i32 %v3_12d7c, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12dc8, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12dc0, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_12d28, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12d48, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12e48, { 1, 0 }
  uselistorder label %dec_label_pc_12e30, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12e24, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12d70, { 1, 0 }
}

define i32 @function_12e50() local_unnamed_addr {
dec_label_pc_12e6c.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12e50 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12e60 = call i32 @function_133e8()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12e6c = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12e6c

dec_label_pc_12e6c:                               ; preds = %dec_label_pc_12e6c.lr.ph, %dec_label_pc_12e6c
  %v1_12e70 = phi i32 [ 31, %dec_label_pc_12e6c.lr.ph ], [ %v1_12e7c, %dec_label_pc_12e6c ]
  %v4_12e70 = mul i32 %v1_12e70, 4
  %v5_12e70 = add i32 %v4_12e70, %v2_12e6c
  %v2_12e78 = add i32 %v5_12e70, -128
  %v3_12e78 = inttoptr i32 %v2_12e78 to i32*
  store i32 0, i32* %v3_12e78, align 4
  %v0_12e7c = load i32, i32* %r1.global-to-local, align 4
  %v1_12e7c = add i32 %v0_12e7c, -1
  store i32 %v1_12e7c, i32* %r1.global-to-local, align 4
  %v6_12e7c = icmp slt i32 %v1_12e7c, 0
  br i1 %v6_12e7c, label %dec_label_pc_12e84, label %dec_label_pc_12e6c

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e6c
  %v2_12e84 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12e84, i32* @r4, align 4
  store i32 %v2_12e84, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12e90 = call i32 @function_1280c()
  %v2_12e94 = icmp eq i32 %v0_12e90, 0
  br i1 %v2_12e94, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12e84
  store i32 %v2_12e84, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12e84, %bb
  store i32 77480, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12e94, i32 ptrtoint (i32* @global_var_1201c.436 to i32))
  %v2_12eac = load i32, i32* @global_var_1cdd4.438, align 4
  %v2_12eb0 = icmp eq i32 %v2_12eac, 0
  br i1 %v2_12eb0, label %dec_label_pc_12eb8, label %dec_label_pc_12ee8

dec_label_pc_12eb8:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1cdd4.438, align 4
  br label %dec_label_pc_12ec0

dec_label_pc_12ec0:                               ; preds = %dec_label_pc_12f38, %dec_label_pc_12eb8
  %v1_12ecc = call i32 @function_133e8()
  %v1_12ed4 = call i32 @function_1457c(i32 6)
  store i32 77544, i32* @lr, align 4
  %v1_12ee4 = call i32 @function_133e8()
  %v2_12eec.pre = load i32, i32* @global_var_1cdd4.438, align 4
  br label %dec_label_pc_12ee8

dec_label_pc_12ee8:                               ; preds = %.thread1, %dec_label_pc_12ec0
  %v0_12f5c = phi i32 [ %v2_12eac, %.thread1 ], [ %v2_12eec.pre, %dec_label_pc_12ec0 ]
  store i32 ptrtoint (i32* @global_var_1cdd4.438 to i32), i32* %ip.global-to-local, align 4
  %v7_12ef0 = icmp eq i32 %v0_12f5c, 1
  br i1 %v7_12ef0, label %dec_label_pc_12f20.lr.ph, label %dec_label_pc_12f54

dec_label_pc_12f20.lr.ph:                         ; preds = %dec_label_pc_12ee8
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1cdd4.438, align 4
  %v2_12f0c = bitcast i32* %stack_var_-268 to i8*
  %v3_12f0c = call i32 @function_123e0(i8* %v2_12f0c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f20

dec_label_pc_12f20:                               ; preds = %dec_label_pc_12f20.lr.ph, %dec_label_pc_12f20
  %v1_12f24 = phi i32 [ 31, %dec_label_pc_12f20.lr.ph ], [ %v1_12f30, %dec_label_pc_12f20 ]
  %v4_12f24 = mul i32 %v1_12f24, 4
  %v5_12f24 = add i32 %v4_12f24, %v2_12e6c
  %v2_12f2c = add i32 %v5_12f24, -264
  %v3_12f2c = inttoptr i32 %v2_12f2c to i32*
  store i32 -1, i32* %v3_12f2c, align 4
  %v0_12f30 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f30 = add i32 %v0_12f30, -1
  store i32 %v1_12f30, i32* %r1.global-to-local, align 4
  %v6_12f30 = icmp slt i32 %v1_12f30, 0
  br i1 %v6_12f30, label %dec_label_pc_12f38, label %dec_label_pc_12f20

dec_label_pc_12f38:                               ; preds = %dec_label_pc_12f20
  store i32 %v2_12e50, i32* %r1.global-to-local, align 4
  %v4_12f4c = call i32 @function_136d4(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12ec0

dec_label_pc_12f54:                               ; preds = %dec_label_pc_12ee8
  %v7_12f54 = icmp eq i32 %v0_12f5c, 2
  br i1 %v7_12f54, label %dec_label_pc_12f5c, label %dec_label_pc_12f68

dec_label_pc_12f5c:                               ; preds = %dec_label_pc_12f54
  store i32 3, i32* @global_var_1cdd4.438, align 4
  %v0_12f64 = call i32 @function_12e50()
  %v2_12f68.pre = load i32, i32* @global_var_1cdd4.438, align 4
  br label %dec_label_pc_12f68

dec_label_pc_12f68:                               ; preds = %dec_label_pc_12f54, %dec_label_pc_12f5c
  %v1_12f70 = phi i32 [ %v0_12f5c, %dec_label_pc_12f54 ], [ %v2_12f68.pre, %dec_label_pc_12f5c ]
  %v7_12f6c = icmp eq i32 %v1_12f70, 3
  br i1 %v7_12f6c, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12f68
  %v2_12f78 = load i32, i32* %ip.global-to-local, align 4
  %v3_12f78 = inttoptr i32 %v2_12f78 to i32*
  store i32 4, i32* %v3_12f78, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12f68, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12f6c, i32 ptrtoint (i32* @global_var_137ec.440 to i32))
  br label %dec_label_pc_12f80

dec_label_pc_12f80:                               ; preds = %dec_label_pc_12f80, %.thread3
  %v0_12f80 = call i32 @function_12e50()
  br label %dec_label_pc_12f80

; uselistorder directives
  uselistorder i32 %v1_12f30, { 2, 1, 0 }
  uselistorder i32 %v1_12e7c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1cdd4.438, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12f68, { 1, 0 }
  uselistorder label %dec_label_pc_12f20, { 1, 0 }
  uselistorder label %dec_label_pc_12ee8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12e6c, { 1, 0 }
}

define i32 @function_12f98(i8* %arg1) local_unnamed_addr {
dec_label_pc_12f98:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_12fac = load i32, i32* @r4, align 4
  store i32 %v3_12fac, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_12fd0.pre = load i32, i32* bitcast (i32** @global_var_1cd40.443 to i32*), align 4
  br label %dec_label_pc_12fc8

dec_label_pc_12fc8:                               ; preds = %dec_label_pc_12fc8, %dec_label_pc_12f98
  %v0_13000 = phi i32 [ %tmp, %dec_label_pc_12f98 ], [ %v1_12fc4, %dec_label_pc_12fc8 ]
  store i32 %v0_13000, i32* %r4.global-to-local, align 4
  %v1_12fcc = inttoptr i32 %v0_13000 to i8*
  %v2_12fcc = load i8, i8* %v1_12fcc, align 1
  %v3_12fcc = zext i8 %v2_12fcc to i32
  %v3_12fd4 = mul nuw nsw i32 %v3_12fcc, 2
  %v4_12fd4 = add i32 %v3_12fd4, %v2_12fd0.pre
  %v5_12fd4 = inttoptr i32 %v4_12fd4 to i8*
  %v6_12fd4 = load i8, i8* %v5_12fd4, align 1
  %v1_12fd8 = and i8 %v6_12fd4, 32
  %v2_12fd8 = icmp eq i8 %v1_12fd8, 0
  %v1_12fc4 = add i32 %v0_13000, 1
  br i1 %v2_12fd8, label %dec_label_pc_12fe0, label %dec_label_pc_12fc8

dec_label_pc_12fe0:                               ; preds = %dec_label_pc_12fc8
  %v7_12fe0 = icmp eq i8 %v2_12fcc, 43
  br i1 %v7_12fe0, label %dec_label_pc_13000, label %dec_label_pc_12fe8

dec_label_pc_12fe8:                               ; preds = %dec_label_pc_12fe0
  %v7_12fe8 = icmp eq i8 %v2_12fcc, 45
  br i1 %v7_12fe8, label %dec_label_pc_13000, label %bb

bb:                                               ; preds = %dec_label_pc_12fe8
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1305c

dec_label_pc_13000:                               ; preds = %dec_label_pc_12fe0, %dec_label_pc_12fe8
  %storemerge30 = phi i32 [ 1, %dec_label_pc_12fe8 ], [ 0, %dec_label_pc_12fe0 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_12fc4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1305c

dec_label_pc_1305c:                               ; preds = %bb, %dec_label_pc_13000
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_13064 = call i32 @function_11b28(i32 -1, i32 10)
  %v0_13068 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13068, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_13074 = urem i32 %v2_13064, 256
  store i32 %v1_13074, i32* %sl.global-to-local, align 4
  %v0_13078 = call i32 @function_11a18()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_13078, i32* %r8.global-to-local, align 4
  %v0_1308c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1308c

dec_label_pc_13088:                               ; preds = %bb48, %dec_label_pc_130e8
  %v0_13088 = phi i32 [ %v1_130b8, %bb48 ], [ %v0_13088.pre, %dec_label_pc_130e8 ]
  store i32 %v0_13088, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1308c

dec_label_pc_1308c:                               ; preds = %dec_label_pc_1305c, %dec_label_pc_13088
  %v0_130b8 = phi i32 [ %v0_1308c.pre, %dec_label_pc_1305c ], [ %v0_13088, %dec_label_pc_13088 ]
  %v1_1308c = inttoptr i32 %v0_130b8 to i8*
  %v2_1308c = load i8, i8* %v1_1308c, align 1
  %v3_1308c = zext i8 %v2_1308c to i32
  %v1_13090 = add nsw i32 %v3_1308c, -48
  %v1_13094 = urem i32 %v1_13090, 256
  %v1_1309c = or i32 %v3_1308c, 32
  %tmp56 = icmp ult i32 %v1_13094, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_130a4

dec_label_pc_130a4:                               ; preds = %dec_label_pc_1308c
  %tmp57 = icmp ugt i32 %v1_1309c, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_130a4
  %v1_130a8 = add nsw i32 %v1_1309c, -87
  %v5_130b0 = urem i32 %v1_130a8, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_1308c, %dec_label_pc_130a4, %bb42
  %v3_130e0 = phi i32 [ %v1_13094, %dec_label_pc_1308c ], [ 40, %dec_label_pc_130a4 ], [ %v5_130b0, %bb42 ]
  %v1_130b4 = load i32, i32* %r5.global-to-local, align 4
  %v1_130b8 = add i32 %v0_130b8, 1
  store i32 %v1_130b8, i32* %r4.global-to-local, align 4
  %v6_130bc = icmp slt i32 %v3_130e0, %v1_130b4
  br i1 %v6_130bc, label %dec_label_pc_130c0, label %dec_label_pc_13100

dec_label_pc_130c0:                               ; preds = %bb43
  %v0_130c0 = load i32, i32* %ip.global-to-local, align 4
  %v1_130c0 = load i32, i32* %r8.global-to-local, align 4
  %v9_130c0 = icmp eq i32 %v0_130c0, %v1_130c0
  br i1 %v9_130c0, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_130c0
  br label %dec_label_pc_130d0

bb44:                                             ; preds = %dec_label_pc_130c0
  %v3_130c0 = icmp ult i32 %v0_130c0, %v1_130c0
  br i1 %v3_130c0, label %dec_label_pc_130d0, label %dec_label_pc_130e8

dec_label_pc_130d0:                               ; preds = %bb44, %.thread
  %v4_130d81727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_130d0 = load i32, i32* %sl.global-to-local, align 4
  %v3_130d0 = icmp uge i32 %v3_130e0, %v1_130d0
  %v9_130d0 = icmp eq i32 %v3_130e0, %v1_130d0
  %v2_130d4 = xor i1 %v3_130d0, true
  %v3_130d4 = or i1 %v9_130d0, %v2_130d4
  br i1 %v3_130d4, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_130d0
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_130d0, %bb45
  %v4_130d8 = phi i32 [ %v4_130d81727, %dec_label_pc_130d0 ], [ 0, %bb45 ]
  %v2_130d8 = xor i1 %v9_130d0, true
  %v3_130d8 = and i1 %v3_130d0, %v2_130d8
  br i1 %v3_130d8, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_130d8 = urem i32 %v4_130d8, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_130dc = phi i32 [ %v5_130d8, %bb47 ], [ %v4_130d8, %bb46 ]
  %v2_130dc = icmp eq i32 %v0_130dc, 0
  br i1 %v2_130dc, label %bb48, label %dec_label_pc_130e8

bb48:                                             ; preds = %thread-pre-split
  %v4_130e0 = mul i32 %v0_130c0, %v1_130b4
  %v5_130e0 = add i32 %v4_130e0, %v3_130e0
  store i32 %v5_130e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13088

dec_label_pc_130e8:                               ; preds = %bb44, %thread-pre-split
  %v0_130e8 = call i32 @function_12374()
  %v0_130ec = load i32, i32* %r7.global-to-local, align 4
  %v1_130ec = load i32, i32* %fp.global-to-local, align 4
  %v2_130ec = and i32 %v1_130ec, %v0_130ec
  store i32 %v2_130ec, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_130f8 = inttoptr i32 %v0_130e8 to i32*
  store i32 34, i32* %v2_130f8, align 4
  %v0_13088.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13088

dec_label_pc_13100:                               ; preds = %bb43
  %v0_13100.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_13100 = icmp eq i32 %v0_13100.pre, 0
  br i1 %v2_13100, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_13100
  %v1_13104 = load i32, i32* %r6.global-to-local, align 4
  %v3_13104 = inttoptr i32 %v0_13100.pre to i32*
  store i32 %v1_13104, i32* %v3_13104, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13100, %bb49
  %v0_13108 = load i32, i32* %r7.global-to-local, align 4
  %v2_13108 = icmp eq i32 %v0_13108, 0
  %. = select i1 %v2_13108, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_13114 = load i32, i32* %fp.global-to-local, align 4
  %v2_13114 = icmp eq i32 %v0_13114, 0
  %v0_13138.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13114, label %dec_label_pc_13130, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_13138.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_13120, label %dec_label_pc_13130

dec_label_pc_13120:                               ; preds = %bb53
  %v0_13120 = call i32 @function_12374()
  %v2_13128 = inttoptr i32 %v0_13120 to i32*
  store i32 34, i32* %v2_13128, align 4
  %v0_1312c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1312c, i32* %ip.global-to-local, align 4
  %v0_13130.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_13130

dec_label_pc_13130:                               ; preds = %bb53, %bb50, %dec_label_pc_13120
  %v0_13138.pre = phi i32 [ %v0_13138.pre.pre, %bb53 ], [ %v0_1312c, %dec_label_pc_13120 ], [ %v0_13138.pre.pre, %bb50 ]
  %v0_13130 = phi i32 [ %v0_13108, %bb53 ], [ %v0_13130.pre, %dec_label_pc_13120 ], [ %v0_13108, %bb50 ]
  %v2_13130 = icmp eq i32 %v0_13130, 0
  br i1 %v2_13130, label %dec_label_pc_13130._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_13130
  %v2_13134 = sub i32 0, %v0_13138.pre
  store i32 %v2_13134, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13130._crit_edge

dec_label_pc_13130._crit_edge:                    ; preds = %dec_label_pc_13130, %bb54
  %v0_13138 = phi i32 [ %v2_13134, %bb54 ], [ %v0_13138.pre, %dec_label_pc_13130 ]
  %v2_1313c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1313c, i32* @r4, align 4
  ret i32 %v0_13138

; uselistorder directives
  uselistorder i32 %v0_13138.pre, { 1, 0 }
  uselistorder i32 %v0_13138.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_13100.pre, { 1, 0 }
  uselistorder i32 %v4_130d8, { 1, 0 }
  uselistorder i1 %v3_130d0, { 1, 0 }
  uselistorder i32 %v1_130d0, { 1, 0 }
  uselistorder i32 %v1_130b8, { 1, 0 }
  uselistorder i32 %v1_1309c, { 1, 0 }
  uselistorder i32 %v1_13094, { 1, 0 }
  uselistorder i32 %v0_13088, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 5, 2, 3, 4, 6 }
  uselistorder i32 ()* @function_11a18, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_11b28, { 4, 2, 0, 11, 10, 6, 1, 9, 8, 7, 5, 3 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_13130._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13130, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_130e8, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1308c, { 1, 0 }
  uselistorder label %dec_label_pc_13088, { 1, 0 }
  uselistorder label %dec_label_pc_1305c, { 1, 0 }
  uselistorder label %dec_label_pc_13000, { 1, 0 }
}

define i32 @function_13144(i32 %arg1) local_unnamed_addr {
dec_label_pc_13144:
  %stack_var_-16 = alloca i32, align 4
  %v2_13144 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_13144, i32* @r0, align 4
  %v8_13160 = call i32 @function_133f0(i32 %v2_13144, i32 ptrtoint (i32* @global_var_133e8.392 to i32), i32 ptrtoint (i32* @global_var_1cd20.446 to i32), i32 78832, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_13170 = call i32 @function_133e8()
  %v2_13178 = load i32, i32* @global_var_1cdd8.450, align 4
  %v2_1317c = icmp eq i32 %v2_13178, 0
  br i1 %v2_1317c, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_13144
  call void @__pseudo_branch(i32 %v2_13178)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13144, %bb
  store i32 %v2_13144, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_131a0.452 to i32), i32* @lr, align 4
  %v8_1319c = call i32 @function_133f0(i32 %v2_13144, i32 1, i32 ptrtoint (i32* @global_var_1cd20.446 to i32), i32 78832, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_1319c, i32* @r0, align 4
  %v1_131a0 = call i32 @function_1337c(i32 %v8_1319c)
  store i1 true, i1* @cpsr_z, align 1
  %v0_131b4 = load i32, i32* @r4, align 4
  %v1_131b8 = call i32 @function_137ec(i32 %v0_131b4)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_13144, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_133e8, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_133f0, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 78832, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1cd20.446 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_133e8.392 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_131d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_131d8:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_131d8 = load i32, i32* @r4, align 4
  store i32 %v3_131d8, i32* %stack_var_-20, align 4
  %v6_131d8 = load i32, i32* @r5, align 4
  %v9_131d8 = load i32, i32* @r6, align 4
  %v16_131d8 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_131dc = icmp eq i32 %arg1, 0
  %v2_131e0 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_131dc, label %dec_label_pc_13364, label %dec_label_pc_131f8.preheader

dec_label_pc_131f8.preheader:                     ; preds = %dec_label_pc_131d8
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1320017 = add i32 %v16_131d8, 124
  br label %dec_label_pc_131f0

dec_label_pc_131f0:                               ; preds = %dec_label_pc_131f8.preheader, %dec_label_pc_131f0
  %v5_1320018 = phi i32 [ %v5_1320017, %dec_label_pc_131f8.preheader ], [ %v5_13200, %dec_label_pc_131f0 ]
  %v2_131f4 = add i32 %v5_1320018, -136
  %v3_131f4 = inttoptr i32 %v2_131f4 to i32*
  store i32 0, i32* %v3_131f4, align 4
  %v0_131f8.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_131f8 = add i32 %v0_131f8.pre, -1
  store i32 %v1_131f8, i32* %r1.global-to-local, align 4
  %v6_131f8 = icmp slt i32 %v1_131f8, 0
  %v4_13200 = mul i32 %v1_131f8, 4
  %v5_13200 = add i32 %v4_13200, %v16_131d8
  br i1 %v6_131f8, label %dec_label_pc_13208, label %dec_label_pc_131f0

dec_label_pc_13208:                               ; preds = %dec_label_pc_131f0
  %v2_13208 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13208, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13218 = load i32, i32* @ip, align 4
  store i32 %v0_13218, i32* %stack_var_-28, align 4
  %v0_13220 = call i32 @function_1280c()
  store i32 %v0_13220, i32* %r0.global-to-local, align 4
  %v1_13224 = load i32, i32* @r5, align 4
  %v5_13228 = icmp slt i32 %v0_13220, %v1_13224
  br i1 %v5_13228, label %dec_label_pc_1336c, label %dec_label_pc_1322c

dec_label_pc_1322c:                               ; preds = %dec_label_pc_13208
  %v2_1322c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_1322c, i32* @r4, align 4
  store i32 %v1_13224, i32* %r0.global-to-local, align 4
  store i32 %v2_13208, i32* %r1.global-to-local, align 4
  %v3_1323c = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_1323c = call i32 @function_1201c(i32 %v1_13224, %_TYPEDEF_sigset_t* %v3_1323c, i32 %v2_1322c)
  store i32 %v4_1323c, i32* %r0.global-to-local, align 4
  %v1_13240 = load i32, i32* @r5, align 4
  %v9_13240 = icmp eq i32 %v4_1323c, %v1_13240
  br i1 %v9_13240, label %dec_label_pc_13248, label %dec_label_pc_1336c

dec_label_pc_13248:                               ; preds = %dec_label_pc_1322c
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_1322c, i32* %r0.global-to-local, align 4
  %v2_13250 = call i32 @function_127e8(i32 %v2_1322c, i32 17)
  store i32 %v2_13250, i32* %r0.global-to-local, align 4
  %v1_13254 = load i32, i32* @r5, align 4
  %v9_13254 = icmp eq i32 %v2_13250, %v1_13254
  br i1 %v9_13254, label %dec_label_pc_1326c.preheader, label %dec_label_pc_13248.dec_label_pc_13334_crit_edge

dec_label_pc_13248.dec_label_pc_13334_crit_edge:  ; preds = %dec_label_pc_13248
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_13334

dec_label_pc_1326c.preheader:                     ; preds = %dec_label_pc_13248
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13264

dec_label_pc_13264:                               ; preds = %dec_label_pc_1326c.preheader, %dec_label_pc_13264
  %v5_1327416 = phi i32 [ %v5_1320017, %dec_label_pc_1326c.preheader ], [ %v5_13274, %dec_label_pc_13264 ]
  %v2_13268 = add i32 %v5_1327416, -136
  %v3_13268 = inttoptr i32 %v2_13268 to i32*
  store i32 0, i32* %v3_13268, align 4
  %v0_1326c.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_1326c = add i32 %v0_1326c.pre, -1
  store i32 %v1_1326c, i32* %r1.global-to-local, align 4
  %v6_1326c = icmp slt i32 %v1_1326c, 0
  %v4_13274 = mul i32 %v1_1326c, 4
  %v5_13274 = add i32 %v4_13274, %v16_131d8
  br i1 %v6_1326c, label %dec_label_pc_1327c, label %dec_label_pc_13264

dec_label_pc_1327c:                               ; preds = %dec_label_pc_13264
  store i32 %v2_13208, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13284 = call i32 @function_1280c()
  store i32 %v0_13284, i32* %r0.global-to-local, align 4
  %v1_13288 = icmp slt i32 %v0_13284, 0
  br i1 %v1_13288, label %dec_label_pc_1336c, label %dec_label_pc_13290

dec_label_pc_13290:                               ; preds = %dec_label_pc_1327c
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_1329c = call i32 @function_136d4(i32 17, i32* null, i32 %v2_131e0)
  store i32 %v4_1329c, i32* %r0.global-to-local, align 4
  %v1_132a0 = icmp slt i32 %v4_1329c, 0
  br i1 %v1_132a0, label %dec_label_pc_132a8, label %dec_label_pc_132d0

dec_label_pc_132a8:                               ; preds = %dec_label_pc_13290
  %v0_132a8 = call i32 @function_12374()
  store i32 %v2_1322c, i32* %r1.global-to-local, align 4
  store i32 %v0_132a8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_132bc = inttoptr i32 %v0_132a8 to i32*
  %v2_132bc = load i32, i32* %v1_132bc, align 4
  store i32 %v2_132bc, i32* @r4, align 4
  %v3_132c0 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_132c0 = call i32 @function_1201c(i32 2, %_TYPEDEF_sigset_t* %v3_132c0, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_132c8 = load i32, i32* @r4, align 4
  %v1_132c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_132c8 = inttoptr i32 %v1_132c8 to i32*
  store i32 %v0_132c8, i32* %v2_132c8, align 4
  %v17_13374.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13370

dec_label_pc_132d0:                               ; preds = %dec_label_pc_13290
  %v2_132d0 = load i32, i32* %stack_var_-424, align 4
  %v7_132d4 = icmp eq i32 %v2_132d0, 1
  %v2_132dc = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_132dc, i32* @r4, align 4
  br i1 %v7_132d4, label %dec_label_pc_132e4, label %dec_label_pc_13318

dec_label_pc_132e4:                               ; preds = %dec_label_pc_132d0
  store i32 %v2_132dc, i32* %r1.global-to-local, align 4
  store i32 %v2_132dc, i32* %r0.global-to-local, align 4
  %v2_132ec = bitcast i32* %stack_var_-28 to %timespec*
  %v3_132ec = call i32 @function_13b70(%timespec* %v2_132ec, i32 %v2_132dc)
  store i32 %v3_132ec, i32* %r0.global-to-local, align 4
  store i32 %v3_132ec, i32* %r6.global-to-local, align 4
  %v0_132f4 = call i32 @function_12374()
  store i32 %v2_1322c, i32* %r1.global-to-local, align 4
  store i32 %v0_132f4, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13308 = inttoptr i32 %v0_132f4 to i32*
  %v2_13308 = load i32, i32* %v1_13308, align 4
  store i32 %v2_13308, i32* @r4, align 4
  %v3_1330c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1330c = call i32 @function_1201c(i32 2, %_TYPEDEF_sigset_t* %v3_1330c, i32 0)
  store i32 %v4_1330c, i32* %r0.global-to-local, align 4
  %v0_13310 = load i32, i32* @r4, align 4
  %v1_13310 = load i32, i32* %r5.global-to-local, align 4
  %v2_13310 = inttoptr i32 %v1_13310 to i32*
  store i32 %v0_13310, i32* %v2_13310, align 4
  %v0_13340.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13340

dec_label_pc_13318:                               ; preds = %dec_label_pc_132d0
  store i32 %v2_1322c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13324 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13324 = call i32 @function_1201c(i32 2, %_TYPEDEF_sigset_t* %v3_13324, i32 0)
  store i32 %v4_13324, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13334

dec_label_pc_13334:                               ; preds = %dec_label_pc_13248.dec_label_pc_13334_crit_edge, %dec_label_pc_13318
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_13248.dec_label_pc_13334_crit_edge ], [ %v2_132dc, %dec_label_pc_13318 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_13338 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_13338 = call i32 @function_13b70(%timespec* %v2_13338, i32 %storemerge.pre-phi)
  store i32 %v3_13338, i32* %r0.global-to-local, align 4
  store i32 %v3_13338, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13340

dec_label_pc_13340:                               ; preds = %dec_label_pc_132e4, %dec_label_pc_13334
  %v0_13340 = phi i32 [ %v0_13340.pr, %dec_label_pc_132e4 ], [ %v3_13338, %dec_label_pc_13334 ]
  %v2_13340 = icmp eq i32 %v0_13340, 0
  br i1 %v2_13340, label %dec_label_pc_13364, label %dec_label_pc_13348

dec_label_pc_13348:                               ; preds = %dec_label_pc_13340
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_13350 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_13350, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13370

dec_label_pc_13364:                               ; preds = %dec_label_pc_131d8, %dec_label_pc_13340
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13370

dec_label_pc_1336c:                               ; preds = %dec_label_pc_1322c, %dec_label_pc_1327c, %dec_label_pc_13208
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_13370

dec_label_pc_13370:                               ; preds = %dec_label_pc_13348, %dec_label_pc_13364, %dec_label_pc_132a8, %dec_label_pc_1336c
  %v17_13374 = phi i32 [ %v3_13350, %dec_label_pc_13348 ], [ 0, %dec_label_pc_13364 ], [ %v17_13374.pre, %dec_label_pc_132a8 ], [ -1, %dec_label_pc_1336c ]
  %v2_13374 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_13374, i32* @r4, align 4
  store i32 %v6_131d8, i32* @r5, align 4
  store i32 %v9_131d8, i32* @r6, align 4
  ret i32 %v17_13374

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_132dc, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_1326c, { 0, 2, 1 }
  uselistorder i32 %v2_1322c, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13224, { 1, 0, 2 }
  uselistorder i32 %v1_131f8, { 0, 2, 1 }
  uselistorder i32 %v16_131d8, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 9, 0, 11, 12, 14, 13, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 20, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_136d4, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_1201c, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1280c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_13370, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1336c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13364, { 1, 0 }
  uselistorder label %dec_label_pc_13340, { 1, 0 }
  uselistorder label %dec_label_pc_13334, { 1, 0 }
  uselistorder label %dec_label_pc_13264, { 1, 0 }
  uselistorder label %dec_label_pc_131f0, { 1, 0 }
}

define i32 @function_1337c(i32 %arg1) local_unnamed_addr {
dec_label_pc_133a8:
  %stack_var_-8 = alloca i32, align 4
  %v3_1337c = load i32, i32* @r4, align 4
  store i32 %v3_1337c, i32* %stack_var_-8, align 4
  %v2_133ac = load i32, i32* @global_var_1cde8.459, align 4
  %v2_133b0 = icmp eq i32 %v2_133ac, 0
  br i1 %v2_133b0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_133a8
  store i32 78780, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_133ac)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_133a8, %bb
  %v2_133c0 = load i32, i32* @global_var_1cdec.461, align 4
  %v2_133c4 = icmp eq i32 %v2_133c0, 0
  br i1 %v2_133c4, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_133c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_133c8, i32* @r4, align 4
  %v9_133c8 = load i32, i32* @r0, align 4
  ret i32 %v9_133c8

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_133d4.462 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_133c0)
  %v2_133d4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_133d4, i32* @r4, align 4
  %v8_133d4 = load i32, i32* @r0, align 4
  ret i32 %v8_133d4

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_133e8() local_unnamed_addr {
dec_label_pc_133e8:
  ret i32 0
}

define i32 @function_133f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_133f0:
  %v1_133f0 = load i32, i32* @r0, align 4
  ret i32 %v1_133f0
}

define i32 @function_133f4(i32 %arg1, i16* %arg2) local_unnamed_addr {
dec_label_pc_133f4:
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %v3_133f4 = load i32, i32* @r4, align 4
  store i32 %v3_133f4, i32* %stack_var_-12, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13404 = call i32 @function_11cdc(i32 %arg1, i32 1)
  %v7_13408 = icmp eq i32 %v2_13404, -1
  br i1 %v7_13408, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_133f4
  %v3_1340c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1340c, i32* @r4, align 4
  ret i32 %v2_13404

bb5:                                              ; preds = %dec_label_pc_133f4
  %v0_13410 = load i32, i32* @r4, align 4
  %v1_13410 = inttoptr i32 %v0_13410 to i16*
  %v5_13418 = call i32 @function_11ecc(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_148bc.464, i32 0, i32 0), i32 %v0_13410)
  %v1_1341c = load i32, i32* %r5.global-to-local, align 4
  %v9_1341c = icmp eq i32 %v5_13418, %v1_1341c
  br i1 %v9_1341c, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  %v3_13420 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13420, i32* @r4, align 4
  ret i32 %v5_13418

bb7:                                              ; preds = %bb5
  %v0_13424 = call i32 @function_12e50()
  %v0_13428 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13428, label %bb8, label %bb9

bb8:                                              ; preds = %bb7
  %v1_13428 = load i32, i32* @r4, align 4
  %v2_13428 = trunc i32 %v1_13428 to i16
  store i16 %v2_13428, i16* %v1_13410, align 2
  br label %bb9

bb9:                                              ; preds = %bb7, %bb8
  ret i32 %v0_13424

; uselistorder directives
  uselistorder i32 %v2_13404, { 1, 0 }
  uselistorder i1* @cpsr_z, { 10, 9, 0, 11, 8, 5, 6, 1, 2, 3, 4, 7 }
  uselistorder i32 ()* @function_12e50, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_11ecc, { 9, 4, 0, 1, 2, 7, 8, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_11cdc, { 0, 5, 13, 12, 15, 14, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
}

define i32 @function_1342c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1342c:
  %v2_13430 = load i32, i32* @global_var_1cdf0.466, align 4
  %v2_13434 = icmp eq i32 %v2_13430, 0
  br i1 %v2_13434, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_1342c
  %v6_13440 = load i32, i32* @r0, align 4
  ret i32 %v6_13440

bb2:                                              ; preds = %dec_label_pc_1342c
  store i32 1, i32* @global_var_1cdf0.466, align 4
  store i32 4096, i32* @global_var_1cde4.417, align 4
  ret i32 undef
}

define i32 @function_13488(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13488:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_1348c = mul i32 %arg2, 4
  %v5_1348c = add i32 %tmp, %v4_1348c
  %v2_13490 = load i32, i32* %arg3, align 4
  %v2_13494 = ptrtoint i32* %stack_var_-120 to i32
  %v1_13498 = add i32 %v5_1348c, 4
  %v9_1349c = icmp eq i32 %v1_13498, %v2_13490
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1cddc.471, align 4
  store i32 %v1_13498, i32* @global_var_1cde0.473, align 4
  store i32 %arg6, i32* @global_var_1cdec.461, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_1349c, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_13488
  store i32 %v5_1348c, i32* @global_var_1cde0.473, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_13488, %bb
  %v2_134dc = bitcast i32* %stack_var_-120 to i8*
  %v3_134dc = call i32 @function_123e0(i8* %v2_134dc, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1cde0.473, align 4
  br label %dec_label_pc_134ec

dec_label_pc_134ec:                               ; preds = %dec_label_pc_134ec, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_134ec, %dec_label_pc_134ec ]
  %v1_134ec = inttoptr i32 %storemerge to i32*
  %v2_134ec = load i32, i32* %v1_134ec, align 4
  %v4_134ec = add i32 %storemerge, 4
  %v2_134f0 = icmp eq i32 %v2_134ec, 0
  br i1 %v2_134f0, label %dec_label_pc_134fc, label %dec_label_pc_134ec

dec_label_pc_134fc:                               ; preds = %dec_label_pc_134ec
  store i32 %v4_134ec, i32* @r4, align 4
  %v1_1351c22 = inttoptr i32 %v4_134ec to i32*
  %v2_1351c23 = load i32, i32* %v1_1351c22, align 4
  %v2_1352025 = icmp eq i32 %v2_1351c23, 0
  br i1 %v2_1352025, label %dec_label_pc_13528, label %dec_label_pc_13504

dec_label_pc_13504:                               ; preds = %dec_label_pc_134fc, %dec_label_pc_1351c
  %v5_13508 = phi i32 [ %v2_1351c, %dec_label_pc_1351c ], [ %v2_1351c23, %dec_label_pc_134fc ]
  %v2_13504 = icmp ugt i32 %v5_13508, 13
  %v7_13504 = icmp eq i32 %v5_13508, 14
  %v2_13508 = xor i1 %v2_13504, true
  %v3_13508 = or i1 %v7_13504, %v2_13508
  br i1 %v3_13508, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13504
  %v6_13508 = and i32 %v5_13508, 536870912
  %v7_13508 = icmp ne i32 %v6_13508, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13504, %bb42
  %v1_13514 = phi i1 [ %v2_13504, %dec_label_pc_13504 ], [ %v7_13508, %bb42 ]
  %v2_1350c = xor i1 %v1_13514, true
  %v3_1350c = or i1 %v7_13504, %v2_1350c
  br i1 %v3_1350c, label %bb44, label %dec_label_pc_1351c

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_1351c

dec_label_pc_1351c:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_1350c, i32 ptrtoint (i32* @global_var_123c0.475 to i32))
  %v0_13518 = load i32, i32* @r4, align 4
  %v1_13518 = add i32 %v0_13518, 8
  store i32 %v1_13518, i32* @r4, align 4
  %v1_1351c = inttoptr i32 %v1_13518 to i32*
  %v2_1351c = load i32, i32* %v1_1351c, align 4
  %v2_13520 = icmp eq i32 %v2_1351c, 0
  br i1 %v2_13520, label %dec_label_pc_13528, label %dec_label_pc_13504

dec_label_pc_13528:                               ; preds = %dec_label_pc_1351c, %dec_label_pc_134fc
  %v1_1352c = call i32 @function_14594(i32 %v2_13494)
  store i32 %v1_1352c, i32* @r0, align 4
  %v1_13530 = call i32 @function_1342c(i32 %v1_1352c)
  store i32 %v1_13530, i32* @r0, align 4
  %v2_1353c = icmp eq i32 %tmp37, 0
  br i1 %v2_1353c, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13528
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13528, %bb45
  %v0_1354c = phi i32 [ %tmp37, %dec_label_pc_13528 ], [ 4096, %bb45 ]
  %v3_13544 = icmp eq i32 %tmp36, -1
  %v8_13544 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1cde4.417 to i32), i32* @r2, align 4
  store i32 %v0_1354c, i32* @global_var_1cde4.417, align 4
  br i1 %v3_13544, label %dec_label_pc_13554, label %dec_label_pc_1357c

dec_label_pc_13554:                               ; preds = %bb46
  %v0_13554 = call i32 @function_13ae0()
  store i32 %v0_13554, i32* @r0, align 4
  store i32 %v0_13554, i32* @r4, align 4
  %v0_1355c = call i32 @function_13a88()
  %v0_13560 = load i32, i32* @r4, align 4
  %v9_13560 = icmp eq i32 %v0_13560, %v0_1355c
  br i1 %v9_13560, label %dec_label_pc_13568, label %dec_label_pc_135a4

dec_label_pc_13568:                               ; preds = %dec_label_pc_13554
  %v1_13568 = call i32 @function_13ab4(i32 %v0_1355c)
  store i32 %v1_13568, i32* @r0, align 4
  store i32 %v1_13568, i32* @r4, align 4
  %v0_13570 = call i32 @function_13a5c()
  %v0_13574 = load i32, i32* @r4, align 4
  %v9_13574 = icmp eq i32 %v0_13574, %v0_13570
  br i1 %v9_13574, label %dec_label_pc_1357c, label %dec_label_pc_135a4

dec_label_pc_1357c:                               ; preds = %dec_label_pc_13568, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_13544, label %dec_label_pc_13610, label %dec_label_pc_13588

dec_label_pc_13588:                               ; preds = %dec_label_pc_1357c
  %v9_1358c = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_1358c, label %dec_label_pc_13594, label %dec_label_pc_135a4

dec_label_pc_13594:                               ; preds = %dec_label_pc_13588
  br label %dec_label_pc_135a4

dec_label_pc_135a4:                               ; preds = %dec_label_pc_13594, %dec_label_pc_13588, %dec_label_pc_13568, %dec_label_pc_13554
  %v3_135ac = call i32 @function_133f4(i32 0, i16* inttoptr (i32 32768 to i16*))
  %v3_135b8 = call i32 @function_133f4(i32 1, i16* inttoptr (i32 32770 to i16*))
  %v3_135c4 = call i32 @function_133f4(i32 2, i16* inttoptr (i32 32770 to i16*))
  br label %dec_label_pc_13610

dec_label_pc_13610:                               ; preds = %dec_label_pc_135a4, %dec_label_pc_1357c
  %v0_135d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_135d4 = inttoptr i32 %v0_135d4 to i32*
  %v2_135d4 = load i32, i32* %v1_135d4, align 4
  store i32 %v2_135d4, i32* @global_var_1cd38, align 4
  store i32 %arg5, i32* @global_var_1cde8.459, align 4
  %v2_13610 = icmp eq i32 %arg4, 0
  br i1 %v2_13610, label %dec_label_pc_1364c, label %bb47

bb47:                                             ; preds = %dec_label_pc_13610
  br label %dec_label_pc_1364c

dec_label_pc_1364c:                               ; preds = %dec_label_pc_13610, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_1365c = call i32 @function_12374()
  %v2_13664 = inttoptr i32 %v1_1365c to i32*
  store i32 0, i32* %v2_13664, align 4
  %v0_13690 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_1369c = call i32 @function_13144(i32 %v0_13690)
  ret i32 %v1_1369c

; uselistorder directives
  uselistorder i32 %v2_1351c, { 1, 0 }
  uselistorder i32 %v1_13518, { 1, 0 }
  uselistorder i1 %v2_13504, { 1, 0 }
  uselistorder i32 %v4_134ec, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_13144, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1cde4.417, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 2, 3, 6, 10, 7, 11, 4, 8, 12, 13 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 75, 2, 3, 4, 5, 6, 7, 8, 43, 9, 10, 11, 12, 13, 99, 41, 44, 53, 100, 19, 20, 21, 76, 45, 16, 77, 78, 79, 80, 81, 82, 83, 84, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 17, 18, 97, 98, 61, 42, 54, 101, 14, 15, 60, 22, 102, 24, 23, 49, 57, 50, 58, 51, 56, 52, 59, 103, 25, 104, 105, 26, 106, 63, 64, 107, 65, 66, 108, 67, 68, 27, 28, 109, 69, 70, 29, 30, 110, 71, 72, 31, 32, 111, 73, 74, 33, 34, 48, 112, 113, 114, 35, 55, 36, 46, 37, 47, 38, 39, 40 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_1364c, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1351c, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13504, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_136d4(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_136d4:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_136d4 = load i32, i32* @r4, align 4
  %v6_136d4 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_136d8 = icmp eq i32* %arg2, null
  %v2_136dc = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_136d8, label %dec_label_pc_13748, label %dec_label_pc_136ec

dec_label_pc_136ec:                               ; preds = %dec_label_pc_136d4
  %v2_136f0 = load i32, i32* %arg2, align 4
  %v4_136f0 = add i32 %tmp, 4
  store i32 %v4_136f0, i32* @r1, align 4
  %v2_136f4 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_136f4, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_136f0, i32* %stack_var_-156, align 4
  %v3_13700 = call i32 @function_123c0(i32 %v2_136f4, i32 %v4_136f0, i32 128)
  store i32 %v3_13700, i32* %r0.global-to-local, align 4
  %v0_13704 = load i32, i32* @r4, align 4
  %v1_13704 = add i32 %v0_13704, 132
  %v2_13704 = inttoptr i32 %v1_13704 to i32*
  %v3_13704 = load i32, i32* %v2_13704, align 4
  %v1_13708 = and i32 %v3_13704, 67108864
  %v2_13708 = icmp eq i32 %v1_13708, 0
  br i1 %v2_13708, label %dec_label_pc_1371c, label %bb

bb:                                               ; preds = %dec_label_pc_136ec
  br label %dec_label_pc_13738

dec_label_pc_1371c:                               ; preds = %dec_label_pc_136ec
  %v1_13724 = and i32 %v3_13704, 4
  %v2_13724 = icmp eq i32 %v1_13724, 0
  br i1 %v2_13724, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_1371c
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_1371c, %bb20
  br label %dec_label_pc_13738

dec_label_pc_13738:                               ; preds = %bb, %bb21
  %v2_13738 = icmp eq i32 %v0_13704, 0
  %v3_1373c = ptrtoint i32* %stack_var_-156 to i32
  %.v3_1373c = select i1 %v2_13738, i32 0, i32 %v3_1373c
  %v0_13748.pre = load i32, i32* @r5, align 4
  %v0_13758.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13748

dec_label_pc_13748:                               ; preds = %dec_label_pc_13738, %dec_label_pc_136d4
  %v0_13758 = phi i32 [ %arg1, %dec_label_pc_136d4 ], [ %v0_13758.pre, %dec_label_pc_13738 ]
  %v0_13748 = phi i32 [ %arg3, %dec_label_pc_136d4 ], [ %v0_13748.pre, %dec_label_pc_13738 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_136d4 ], [ %.v3_1373c, %dec_label_pc_13738 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_13748 = icmp eq i32 %v0_13748, 0
  %.v2_136dc = select i1 %v2_13748, i32 0, i32 %v2_136dc
  store i32 %.v2_136dc, i32* @r2, align 4
  store i32 %v0_13758, i32* %r0.global-to-local, align 4
  %v1_1375c = call i32 @function_137c0(i32 %v0_13758)
  store i32 %v1_1375c, i32* %r0.global-to-local, align 4
  %v0_13760 = load i32, i32* @r5, align 4
  %v2_13760 = icmp eq i32 %v0_13760, 0
  br i1 %v2_13760, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_13748
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_13748, %bb25
  %v0_13770.pr = phi i32 [ 0, %dec_label_pc_13748 ], [ 1, %bb25 ]
  %v1_13768 = icmp slt i32 %v1_1375c, 0
  br i1 %v1_13768, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_137a4

thread-pre-split:                                 ; preds = %bb26
  %v2_13770 = icmp eq i32 %v0_13770.pr, 0
  store i32 %v1_1375c, i32* @r4, align 4
  br i1 %v2_13770, label %dec_label_pc_137a4, label %dec_label_pc_1377c

dec_label_pc_1377c:                               ; preds = %thread-pre-split
  %v2_1377c = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_13760, i32* %r0.global-to-local, align 4
  %v2_13784 = inttoptr i32 %v0_13760 to i32*
  store i32 %v2_1377c, i32* %v2_13784, align 4
  %v3_13784 = load i32, i32* %r0.global-to-local, align 4
  %v4_13784 = add i32 %v3_13784, 4
  store i32 %v4_13784, i32* @r0, align 4
  %v2_13788 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_13788, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_13790 = call i32 @function_123c0(i32 %v4_13784, i32 %v2_13788, i32 128)
  store i32 %v3_13790, i32* %r0.global-to-local, align 4
  %v1_13798 = load i32, i32* @r5, align 4
  %v2_13798 = add i32 %v1_13798, 136
  %v3_13798 = inttoptr i32 %v2_13798 to i32*
  %v1_137a0 = load i32, i32* @r5, align 4
  %v2_137a0 = add i32 %v1_137a0, 132
  %v3_137a0 = inttoptr i32 %v2_137a0 to i32*
  %v0_137a4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_137a4

dec_label_pc_137a4:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_1377c
  %v0_137a4 = phi i32 [ %v1_1375c, %thread-pre-split ], [ %v0_137a4.pre, %dec_label_pc_1377c ], [ %v1_1375c, %thread-pre-split.thread ]
  store i32 %v0_137a4, i32* %r0.global-to-local, align 4
  store i32 %v3_136d4, i32* @r4, align 4
  store i32 %v6_136d4, i32* @r5, align 4
  ret i32 %v0_137a4

; uselistorder directives
  uselistorder i32 %v0_137a4, { 1, 0 }
  uselistorder i32 %v0_13760, { 1, 0, 2 }
  uselistorder i32 %v0_13758, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 2, 7, 1, 0 }
  uselistorder label %dec_label_pc_137a4, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_13738, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_137c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_137c0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_137c0 = load i32, i32* @r4, align 4
  store i32 %v3_137c0, i32* %stack_var_-8, align 4
  %v1_137c4 = load i32, i32* @r1, align 4
  %v2_137c4 = inttoptr i32 %v1_137c4 to %sigaction*
  %v3_137c4 = load i32, i32* @r2, align 4
  %v4_137c4 = inttoptr i32 %v3_137c4 to %sigaction*
  %v5_137c4 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_137c4, %sigaction* %v4_137c4)
  store i32 %v5_137c4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_137c4, -4095
  br i1 %tmp, label %dec_label_pc_137e4, label %dec_label_pc_137d4

dec_label_pc_137d4:                               ; preds = %dec_label_pc_137c0
  %v0_137d4 = call i32 @function_12374()
  %v0_137d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_137d8 = sub i32 0, %v0_137d8
  %v2_137dc = inttoptr i32 %v0_137d4 to i32*
  store i32 %v1_137d8, i32* %v2_137dc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_137e4

dec_label_pc_137e4:                               ; preds = %dec_label_pc_137c0, %dec_label_pc_137d4
  %v0_137e4 = phi i32 [ %v5_137c4, %dec_label_pc_137c0 ], [ -1, %dec_label_pc_137d4 ]
  %v2_137e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_137e8, i32* %r4.global-to-local, align 4
  ret i32 %v0_137e4

; uselistorder directives
  uselistorder i32 %v5_137c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_137e4, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_137ec(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_137ec:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_13814() local_unnamed_addr {
dec_label_pc_13814:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_13824 = load i32, i32* @r0, align 4
  %v4_13824 = call i32 @fstat(i32 %v0_13824, %stat* %tmp4)
  store i32 %v4_13824, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13824, -4095
  br i1 %tmp, label %dec_label_pc_13848, label %dec_label_pc_13834

dec_label_pc_13834:                               ; preds = %dec_label_pc_13814
  %v0_13834 = call i32 @function_12374()
  %v0_13838 = load i32, i32* %r4.global-to-local, align 4
  %v1_13838 = sub i32 0, %v0_13838
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13840 = inttoptr i32 %v0_13834 to i32*
  store i32 %v1_13838, i32* %v2_13840, align 4
  br label %dec_label_pc_13858

dec_label_pc_13848:                               ; preds = %dec_label_pc_13814
  %v2_13848 = icmp eq i32 %v4_13824, 0
  store i32 79960, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_13848, i32 ptrtoint (i32* @global_var_13f30.491 to i32))
  br label %dec_label_pc_13858

dec_label_pc_13858:                               ; preds = %dec_label_pc_13834, %dec_label_pc_13848
  %v0_13858 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_13858

; uselistorder directives
  uselistorder i32 %v4_13824, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_13858, { 1, 0 }
}

define i32 @function_13864(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13864:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_13864 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_1386c = call i32 @function_138f8()
  store i32 %v0_1386c, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_1386c, 1
  br i1 %tmp8, label %dec_label_pc_138f0, label %dec_label_pc_138dc.preheader

dec_label_pc_138dc.preheader:                     ; preds = %dec_label_pc_13864
  %v5_13874 = load i32, i32* @r4, align 4
  %v7_13874 = add i32 %v5_13874, %v0_1386c
  store i32 %v7_13874, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_138dc

dec_label_pc_13880:                               ; preds = %dec_label_pc_138dc
  %v1_13880 = add i32 %v2_13890, 16
  %v2_13880 = inttoptr i32 %v1_13880 to i32*
  %v3_13880 = load i32, i32* %v2_13880, align 4
  store i32 %v3_13880, i32* @lr, align 4
  %v2_13884 = inttoptr i32 %v1_138e0 to i32*
  %v3_13884 = load i32, i32* %v2_13884, align 4
  store i32 %v3_13884, i32* %r2.global-to-local, align 4
  %v1_13888 = add i32 %v2_13890, 18
  %v2_13888 = inttoptr i32 %v1_13888 to i8*
  %v3_13888 = load i8, i8* %v2_13888, align 1
  %v4_13888 = zext i8 %v3_13888 to i32
  store i32 %v4_13888, i32* %ip.global-to-local, align 4
  %v3_1388c = sdiv i32 %v3_13880, 256
  store i32 %v3_1388c, i32* %r3.global-to-local, align 4
  %v1_13890 = trunc i32 %v3_13880 to i8
  %v4_13890 = inttoptr i32 %v1_138e0 to i8*
  store i8 %v1_13890, i8* %v4_13890, align 1
  %v0_13894 = load i32, i32* %r2.global-to-local, align 4
  %v1_13894 = load i32, i32* @r4, align 4
  %v2_13894 = add i32 %v1_13894, 4
  %v3_13894 = inttoptr i32 %v2_13894 to i32*
  store i32 %v0_13894, i32* %v3_13894, align 4
  %v0_13898 = load i32, i32* %ip.global-to-local, align 4
  %v1_13898 = trunc i32 %v0_13898 to i8
  %v2_13898 = load i32, i32* @r4, align 4
  %v3_13898 = add i32 %v2_13898, 10
  %v4_13898 = inttoptr i32 %v3_13898 to i8*
  store i8 %v1_13898, i8* %v4_13898, align 1
  %v0_1389c = load i32, i32* %r3.global-to-local, align 4
  %v1_1389c = trunc i32 %v0_1389c to i8
  %v2_1389c = load i32, i32* @r4, align 4
  %v3_1389c = add i32 %v2_1389c, 9
  %v4_1389c = inttoptr i32 %v3_1389c to i8*
  store i8 %v1_1389c, i8* %v4_1389c, align 1
  %v0_138a0 = load i32, i32* @r4, align 4
  %v1_138a0 = add i32 %v0_138a0, 8
  %v2_138a0 = inttoptr i32 %v1_138a0 to i8*
  %v3_138a0 = load i8, i8* %v2_138a0, align 1
  %v4_138a0 = zext i8 %v3_138a0 to i32
  store i32 %v4_138a0, i32* %r2.global-to-local, align 4
  %v0_138a4 = load i32, i32* @r5, align 4
  %v1_138a4 = add i32 %v0_138a4, 1
  %v2_138a4 = inttoptr i32 %v1_138a4 to i8*
  %v3_138a4 = load i8, i8* %v2_138a4, align 1
  %v4_138a4 = zext i8 %v3_138a4 to i32
  store i32 %v4_138a4, i32* %r3.global-to-local, align 4
  %v4_138a8 = mul nuw nsw i32 %v4_138a4, 256
  %v5_138a8 = or i32 %v4_138a8, %v4_138a0
  %v1_138ac = add nsw i32 %v5_138a8, -19
  store i32 %v1_138ac, i32* @r2, align 4
  %v3_138b0 = call i32 @function_123d0(i32 %v1_138e8, i32 %v1_138e4, i32 %v1_138ac)
  %v0_138b4 = load i32, i32* @r4, align 4
  %v1_138b4 = add i32 %v0_138b4, 8
  %v2_138b4 = inttoptr i32 %v1_138b4 to i8*
  %v3_138b4 = load i8, i8* %v2_138b4, align 1
  %v4_138b4 = zext i8 %v3_138b4 to i32
  store i32 %v4_138b4, i32* %r3.global-to-local, align 4
  %v0_138b8 = load i32, i32* @r5, align 4
  %v1_138b8 = add i32 %v0_138b8, 1
  %v2_138b8 = inttoptr i32 %v1_138b8 to i8*
  %v3_138b8 = load i8, i8* %v2_138b8, align 1
  %v4_138b8 = zext i8 %v3_138b8 to i32
  store i32 %v0_138b4, i32* @r0, align 4
  %v4_138c0 = mul nuw nsw i32 %v4_138b8, 256
  %v5_138c0 = or i32 %v4_138c0, %v4_138b4
  store i32 %v5_138c0, i32* @r2, align 4
  store i32 %v0_138b4, i32* @r1, align 4
  %v3_138c8 = call i32 @function_123d0(i32 %v0_138b4, i32 %v0_138b4, i32 %v5_138c0)
  %v0_138cc = load i32, i32* @r4, align 4
  %v1_138cc = add i32 %v0_138cc, 8
  %v2_138cc = inttoptr i32 %v1_138cc to i8*
  %v3_138cc = load i8, i8* %v2_138cc, align 1
  %v4_138cc = zext i8 %v3_138cc to i32
  store i32 %v4_138cc, i32* %r3.global-to-local, align 4
  %v0_138d0 = load i32, i32* @r5, align 4
  %v1_138d0 = add i32 %v0_138d0, 1
  %v2_138d0 = inttoptr i32 %v1_138d0 to i8*
  %v3_138d0 = load i8, i8* %v2_138d0, align 1
  %v4_138d0 = zext i8 %v3_138d0 to i32
  store i32 %v4_138d0, i32* @r2, align 4
  %v4_138d4 = mul nuw nsw i32 %v4_138d0, 256
  %v5_138d4 = or i32 %v4_138d4, %v4_138cc
  store i32 %v5_138d4, i32* %r3.global-to-local, align 4
  %v2_138d8 = add i32 %v5_138d4, %v0_138cc
  store i32 %v2_138d8, i32* @r4, align 4
  %v1_138dc.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_138dc

dec_label_pc_138dc:                               ; preds = %dec_label_pc_138dc.preheader, %dec_label_pc_13880
  %v1_138dc = phi i32 [ %v7_13874, %dec_label_pc_138dc.preheader ], [ %v1_138dc.pre, %dec_label_pc_13880 ]
  %v2_13890 = phi i32 [ %v5_13874, %dec_label_pc_138dc.preheader ], [ %v2_138d8, %dec_label_pc_13880 ]
  %v3_138dc = icmp ult i32 %v2_13890, %v1_138dc
  %v1_138e0 = add i32 %v2_13890, 8
  store i32 %v1_138e0, i32* @r5, align 4
  %v1_138e4 = add i32 %v2_13890, 19
  store i32 %v1_138e4, i32* @r1, align 4
  %v1_138e8 = add i32 %v2_13890, 11
  store i32 %v1_138e8, i32* @r0, align 4
  br i1 %v3_138dc, label %dec_label_pc_13880, label %dec_label_pc_138f0.loopexit

dec_label_pc_138f0.loopexit:                      ; preds = %dec_label_pc_138dc
  %v0_138f0.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_138f0

dec_label_pc_138f0:                               ; preds = %dec_label_pc_13864, %dec_label_pc_138f0.loopexit
  %v0_138f0 = phi i32 [ %v0_138f0.pre, %dec_label_pc_138f0.loopexit ], [ %v0_1386c, %dec_label_pc_13864 ]
  store i32 %v6_13864, i32* @r5, align 4
  ret i32 %v0_138f0

; uselistorder directives
  uselistorder i32 %v1_138e8, { 1, 0 }
  uselistorder i32 %v1_138e4, { 1, 0 }
  uselistorder i32 %v1_138e0, { 2, 1, 0 }
  uselistorder i32 %v2_13890, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_138b4, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_13880, { 1, 0, 2 }
  uselistorder i32 %v5_13874, { 1, 0 }
  uselistorder i32 %v0_1386c, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_123d0, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_138f0, { 1, 0 }
  uselistorder label %dec_label_pc_138dc, { 1, 0 }
}

define i32 @function_138f8() local_unnamed_addr {
dec_label_pc_138f8:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_138fc = load i32, i32* @r4, align 4
  %v9_138fc = load i32, i32* @r6, align 4
  %v0_13900 = load i32, i32* @r2, align 4
  %v1_13900 = add i32 %v0_13900, 6
  %v2_13908 = ptrtoint i32* %stack_var_-60 to i32
  %v1_1390c = and i32 %v1_13900, -4
  store i32 %v1_1390c, i32* %r3.global-to-local, align 4
  %v2_13910 = sub i32 %v2_13908, %v1_1390c
  %v0_13914 = load i32, i32* @r1, align 4
  store i32 %v0_13914, i32* %r8.global-to-local, align 4
  store i32 %v0_13900, i32* %stack_var_-60, align 4
  store i32 %v2_13910, i32* %sl.global-to-local, align 4
  %v0_13920 = load i32, i32* @r0, align 4
  %v1_13924 = inttoptr i32 %v2_13910 to %linux_dirent64*
  store i32 %v2_13910, i32* %r1.global-to-local, align 4
  %v5_13928 = call i32 @getdents64(i32 %v0_13920, %linux_dirent64* %v1_13924, i32 %v0_13900)
  store i32 %v5_13928, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_13928, -4095
  br i1 %tmp, label %dec_label_pc_1394c, label %dec_label_pc_13938

dec_label_pc_13938:                               ; preds = %dec_label_pc_138f8
  %v0_13938 = call i32 @function_12374()
  %v0_1393c = load i32, i32* @r6, align 4
  %v1_1393c = sub i32 0, %v0_1393c
  store i32 %v1_1393c, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_13944 = inttoptr i32 %v0_13938 to i32*
  store i32 %v1_1393c, i32* %v2_13944, align 4
  %v0_13954.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13954

dec_label_pc_1394c:                               ; preds = %dec_label_pc_138f8
  br i1 false, label %dec_label_pc_13954, label %dec_label_pc_1395c

dec_label_pc_13954:                               ; preds = %dec_label_pc_1394c, %dec_label_pc_13938
  %v0_13954 = phi i32 [ -1, %dec_label_pc_1394c ], [ %v0_13954.pre, %dec_label_pc_13938 ]
  store i32 %v0_13954, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13a50

dec_label_pc_1395c:                               ; preds = %dec_label_pc_1394c
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_13964 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_13964, i32* @r5, align 4
  %v0_13968 = load i32, i32* @sp, align 4
  store i32 %v0_13968, i32* @r4, align 4
  br label %dec_label_pc_13a2c

dec_label_pc_13978:                               ; preds = %dec_label_pc_13a2c
  %v2_13a44 = add i32 %v3_13a30, %v0_13a44
  %v1_13978 = add i32 %v0_1397c, 17
  %v2_13978 = inttoptr i32 %v1_13978 to i8*
  %v3_13978 = load i8, i8* %v2_13978, align 1
  %v4_13978 = zext i8 %v3_13978 to i32
  %v2_1397c = inttoptr i32 %v1_13a38 to i8*
  %v3_1397c = load i8, i8* %v2_1397c, align 1
  %v4_1397c = zext i8 %v3_1397c to i32
  %v4_13980 = mul nuw nsw i32 %v4_13978, 256
  %v5_13980 = or i32 %v4_1397c, %v4_13980
  %v1_13984 = add nuw nsw i32 %v5_13980, 3
  %v1_13988 = and i32 %v1_13984, 131068
  store i32 %v1_13988, i32* %r3.global-to-local, align 4
  %v2_1398c = add i32 %v1_13988, %v2_139cc
  store i32 %v2_1398c, i32* %sb.global-to-local, align 4
  %v9_13990 = icmp eq i32 %v2_1398c, %v2_13a44
  %v1_13994 = and i32 %v1_13984, 128
  %v2_13998 = icmp eq i32 %v1_13994, 0
  %v3_13998 = or i1 %v9_13990, %v2_13998
  br i1 %v3_13998, label %dec_label_pc_139cc, label %dec_label_pc_1399c

dec_label_pc_1399c:                               ; preds = %dec_label_pc_13978
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_139ac = call i32 @function_13b0c(i32 %v0_13920, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_139b0 = load i32, i32* @r5, align 4
  %v1_139b0 = load i32, i32* %r8.global-to-local, align 4
  %v9_139b0 = icmp eq i32 %v0_139b0, %v1_139b0
  br i1 %v9_139b0, label %dec_label_pc_139b8, label %dec_label_pc_13a4c

dec_label_pc_139b8:                               ; preds = %dec_label_pc_1399c
  %v0_139b8 = call i32 @function_12374()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_139c4 = inttoptr i32 %v0_139b8 to i32*
  store i32 22, i32* %v2_139c4, align 4
  %v0_13a50.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13a50

dec_label_pc_139cc:                               ; preds = %dec_label_pc_13978
  %v3_1399411 = udiv i32 %v1_13984, 256
  %v1_139cc = trunc i32 %v3_1399411 to i8
  %v3_139cc = add i32 %v2_139cc, 17
  %v4_139cc = inttoptr i32 %v3_139cc to i8*
  store i8 %v1_139cc, i8* %v4_139cc, align 1
  %v0_139d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_139d0 = trunc i32 %v0_139d0 to i8
  %v2_139d0 = load i32, i32* @r5, align 4
  %v3_139d0 = add i32 %v2_139d0, 16
  %v4_139d0 = inttoptr i32 %v3_139d0 to i8*
  store i8 %v1_139d0, i8* %v4_139d0, align 1
  %v0_139d4 = load i32, i32* @r4, align 4
  %v1_139d4 = add i32 %v0_139d4, 8
  %v1_139d8 = inttoptr i32 %v1_139d4 to i32*
  %v2_139d8 = load i32, i32* %v1_139d8, align 4
  %v3_139d8 = add i32 %v0_139d4, 12
  %v4_139d8 = inttoptr i32 %v3_139d8 to i32*
  %v5_139d8 = load i32, i32* %v4_139d8, align 4
  store i32 %v5_139d8, i32* %r3.global-to-local, align 4
  %v1_139e4 = inttoptr i32 %v0_139d4 to i32*
  %v2_139e4 = load i32, i32* %v1_139e4, align 4
  %v3_139e4 = add i32 %v0_139d4, 4
  %v4_139e4 = inttoptr i32 %v3_139e4 to i32*
  %v5_139e4 = load i32, i32* %v4_139e4, align 4
  store i32 %v5_139e4, i32* %r3.global-to-local, align 4
  %v0_139e8 = load i32, i32* @r5, align 4
  %v1_139e8 = inttoptr i32 %v0_139e8 to i32*
  store i32 %v2_139e4, i32* %v1_139e8, align 4
  %v3_139e8 = add i32 %v0_139e8, 4
  %v4_139e8 = inttoptr i32 %v3_139e8 to i32*
  %v5_139e8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_139e8, i32* %v4_139e8, align 4
  %v0_139ec = load i32, i32* @r4, align 4
  %v1_139ec = add i32 %v0_139ec, 8
  %v1_139f0 = inttoptr i32 %v1_139ec to i32*
  %v2_139f0 = load i32, i32* %v1_139f0, align 4
  %v3_139f0 = add i32 %v0_139ec, 12
  %v4_139f0 = inttoptr i32 %v3_139f0 to i32*
  %v5_139f0 = load i32, i32* %v4_139f0, align 4
  store i32 %v5_139f0, i32* %r3.global-to-local, align 4
  %v1_139f4 = load i32, i32* @r5, align 4
  %v2_139f4 = add i32 %v1_139f4, 8
  %v3_139f4 = inttoptr i32 %v2_139f4 to i32*
  store i32 %v2_139f0, i32* %v3_139f4, align 4
  %v0_139f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_139f8 = load i32, i32* @r5, align 4
  %v2_139f8 = add i32 %v1_139f8, 12
  %v3_139f8 = inttoptr i32 %v2_139f8 to i32*
  store i32 %v0_139f8, i32* %v3_139f8, align 4
  %v0_139fc = load i32, i32* @r4, align 4
  %v1_139fc = add i32 %v0_139fc, 18
  %v2_139fc = inttoptr i32 %v1_139fc to i8*
  %v3_139fc = load i8, i8* %v2_139fc, align 1
  %v4_139fc = zext i8 %v3_139fc to i32
  store i32 %v4_139fc, i32* %r3.global-to-local, align 4
  %v2_13a00 = load i32, i32* @r5, align 4
  %v3_13a00 = add i32 %v2_13a00, 18
  %v4_13a00 = inttoptr i32 %v3_13a00 to i8*
  store i8 %v3_139fc, i8* %v4_13a00, align 1
  %v0_13a04 = load i32, i32* @r4, align 4
  %v1_13a04 = add i32 %v0_13a04, 16
  %v2_13a04 = inttoptr i32 %v1_13a04 to i8*
  %v3_13a04 = load i8, i8* %v2_13a04, align 1
  %v4_13a04 = zext i8 %v3_13a04 to i32
  %v0_13a08 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a08 = add i32 %v0_13a08, 1
  %v2_13a08 = inttoptr i32 %v1_13a08 to i8*
  %v3_13a08 = load i8, i8* %v2_13a08, align 1
  %v4_13a08 = zext i8 %v3_13a08 to i32
  store i32 %v4_13a08, i32* %r3.global-to-local, align 4
  %v4_13a0c = mul nuw nsw i32 %v4_13a08, 256
  %v5_13a0c = or i32 %v4_13a0c, %v4_13a04
  %v1_13a10 = add nsw i32 %v5_13a0c, -19
  store i32 %v1_13a10, i32* @r2, align 4
  %v3_13a14 = call i32 @function_123c0(i32 %v1_13a3c, i32 %v1_13a40, i32 %v1_13a10)
  %v0_13a18 = load i32, i32* @r4, align 4
  %v1_13a18 = add i32 %v0_13a18, 16
  %v2_13a18 = inttoptr i32 %v1_13a18 to i8*
  %v3_13a18 = load i8, i8* %v2_13a18, align 1
  %v4_13a18 = zext i8 %v3_13a18 to i32
  store i32 %v4_13a18, i32* %r3.global-to-local, align 4
  %v0_13a1c = load i32, i32* %r7.global-to-local, align 4
  %v1_13a1c = add i32 %v0_13a1c, 1
  %v2_13a1c = inttoptr i32 %v1_13a1c to i8*
  %v3_13a1c = load i8, i8* %v2_13a1c, align 1
  %v4_13a1c = zext i8 %v3_13a1c to i32
  %v4_13a20 = mul nuw nsw i32 %v4_13a1c, 256
  %v5_13a20 = or i32 %v4_13a20, %v4_13a18
  store i32 %v5_13a20, i32* %r3.global-to-local, align 4
  %v2_13a24 = add i32 %v5_13a20, %v0_13a18
  store i32 %v2_13a24, i32* @r4, align 4
  %v0_13a28 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13a28, i32* @r5, align 4
  %v1_13a2c.pre = load i32, i32* @r6, align 4
  %v0_13a44.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13a2c

dec_label_pc_13a2c:                               ; preds = %dec_label_pc_1395c, %dec_label_pc_139cc
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_1395c ], [ %v2_139d8, %dec_label_pc_139cc ]
  %v0_13a44 = phi i32 [ %v0_13964, %dec_label_pc_1395c ], [ %v0_13a44.pre, %dec_label_pc_139cc ]
  %v2_139cc = phi i32 [ %v0_13964, %dec_label_pc_1395c ], [ %v0_13a28, %dec_label_pc_139cc ]
  %v0_1397c = phi i32 [ %v0_13968, %dec_label_pc_1395c ], [ %v2_13a24, %dec_label_pc_139cc ]
  %v1_13a2c = phi i32 [ %v5_13928, %dec_label_pc_1395c ], [ %v1_13a2c.pre, %dec_label_pc_139cc ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_1395c ], [ %v5_139d8, %dec_label_pc_139cc ]
  %v0_13a2c = load i32, i32* %sl.global-to-local, align 4
  %v2_13a2c = add i32 %v0_13a2c, %v1_13a2c
  store i32 %v2_13a2c, i32* %r3.global-to-local, align 4
  %v3_13a30 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13a30, i32* @r2, align 4
  %v3_13a34 = icmp ult i32 %v0_1397c, %v2_13a2c
  %v1_13a38 = add i32 %v0_1397c, 16
  store i32 %v1_13a38, i32* %r7.global-to-local, align 4
  %v1_13a3c = add i32 %v2_139cc, 19
  store i32 %v1_13a3c, i32* @r0, align 4
  %v1_13a40 = add i32 %v0_1397c, 19
  store i32 %v1_13a40, i32* @r1, align 4
  br i1 %v3_13a34, label %dec_label_pc_13978, label %dec_label_pc_13a4c

dec_label_pc_13a4c:                               ; preds = %dec_label_pc_13a2c, %dec_label_pc_1399c
  %v1_13a4c = phi i32 [ %v0_139b0, %dec_label_pc_1399c ], [ %v2_139cc, %dec_label_pc_13a2c ]
  %v0_13a4c = phi i32 [ %v1_139b0, %dec_label_pc_1399c ], [ %v0_13a44, %dec_label_pc_13a2c ]
  %v2_13a4c = sub i32 %v1_13a4c, %v0_13a4c
  store i32 %v2_13a4c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13a50

dec_label_pc_13a50:                               ; preds = %dec_label_pc_139b8, %dec_label_pc_13954, %dec_label_pc_13a4c
  %v0_13a50 = phi i32 [ %v0_13a50.pre, %dec_label_pc_139b8 ], [ %v0_13954, %dec_label_pc_13954 ], [ %v2_13a4c, %dec_label_pc_13a4c ]
  store i32 %v3_138fc, i32* @r4, align 4
  store i32 %v9_138fc, i32* %r6.global-to-local, align 4
  ret i32 %v0_13a50

; uselistorder directives
  uselistorder i32 %v1_13a40, { 1, 0 }
  uselistorder i32 %v1_13a3c, { 1, 0 }
  uselistorder i32 %v1_13a38, { 1, 0 }
  uselistorder i32 %v3_13a30, { 1, 0 }
  uselistorder i32 %v0_1397c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_139cc, { 0, 3, 1, 2 }
  uselistorder i32 %v0_139d4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_13964, { 1, 0, 2 }
  uselistorder i32 %v5_13928, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_123c0, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 26, 6, 27, 17, 9, 10, 11, 18, 0, 19, 12, 13, 14, 15, 16, 22, 1, 20, 2, 21, 3, 7, 8, 23, 24, 25 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 3, 189, 190, 191, 229, 230, 404, 405, 406, 407, 408, 409, 410, 412, 411, 427, 428, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 22, 23, 51, 131, 132, 133, 134, 42, 135, 136, 24, 137, 47, 138, 139, 140, 141, 142, 143, 25, 26, 27, 28, 29, 43, 48, 13, 14, 15, 16, 17, 18, 19, 20, 21, 52, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 53, 54, 55, 56, 49, 50, 144, 145, 146, 147, 148, 57, 58, 149, 150, 10, 151, 152, 153, 154, 155, 156, 157, 158, 159, 4, 166, 2, 167, 168, 1, 169, 170, 429, 430, 431, 233, 234, 235, 236, 0, 160, 161, 162, 163, 164, 165, 171, 172, 173, 174, 5, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 210, 211, 212, 213, 11, 214, 215, 216, 6, 217, 218, 237, 7, 238, 8, 239, 9, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 219, 222, 220, 221, 223, 224, 12, 225, 226, 227, 228, 231, 232 }
  uselistorder label %dec_label_pc_13a50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a2c, { 1, 0 }
}

define i32 @function_13a5c() local_unnamed_addr {
dec_label_pc_13a5c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13a5c = load i32, i32* @r4, align 4
  store i32 %v3_13a5c, i32* %stack_var_-8, align 4
  %v0_13a64 = load i32, i32* @r0, align 4
  store i32 %v0_13a64, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13a64, -4095
  br i1 %tmp, label %dec_label_pc_13a80, label %dec_label_pc_13a70

dec_label_pc_13a70:                               ; preds = %dec_label_pc_13a5c
  %v0_13a70 = call i32 @function_12374()
  %v0_13a74 = load i32, i32* %r4.global-to-local, align 4
  %v1_13a74 = sub i32 0, %v0_13a74
  %v2_13a78 = inttoptr i32 %v0_13a70 to i32*
  store i32 %v1_13a74, i32* %v2_13a78, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13a84.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13a80

dec_label_pc_13a80:                               ; preds = %dec_label_pc_13a5c, %dec_label_pc_13a70
  %v2_13a84 = phi i32 [ %v3_13a5c, %dec_label_pc_13a5c ], [ %v2_13a84.pre, %dec_label_pc_13a70 ]
  %v0_13a80 = phi i32 [ %v0_13a64, %dec_label_pc_13a5c ], [ -1, %dec_label_pc_13a70 ]
  store i32 %v2_13a84, i32* @r4, align 4
  ret i32 %v0_13a80

; uselistorder directives
  uselistorder i32 %v0_13a64, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13a80, { 1, 0 }
}

define i32 @function_13a88() local_unnamed_addr {
dec_label_pc_13a88:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13a88 = load i32, i32* @r4, align 4
  store i32 %v3_13a88, i32* %stack_var_-8, align 4
  %v0_13a90 = load i32, i32* @r0, align 4
  store i32 %v0_13a90, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13a90, -4095
  br i1 %tmp, label %dec_label_pc_13aac, label %dec_label_pc_13a9c

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_13a88
  %v0_13a9c = call i32 @function_12374()
  %v0_13aa0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13aa0 = sub i32 0, %v0_13aa0
  %v2_13aa4 = inttoptr i32 %v0_13a9c to i32*
  store i32 %v1_13aa0, i32* %v2_13aa4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13ab0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13aac

dec_label_pc_13aac:                               ; preds = %dec_label_pc_13a88, %dec_label_pc_13a9c
  %v2_13ab0 = phi i32 [ %v3_13a88, %dec_label_pc_13a88 ], [ %v2_13ab0.pre, %dec_label_pc_13a9c ]
  %v0_13aac = phi i32 [ %v0_13a90, %dec_label_pc_13a88 ], [ -1, %dec_label_pc_13a9c ]
  store i32 %v2_13ab0, i32* @r4, align 4
  ret i32 %v0_13aac

; uselistorder directives
  uselistorder i32 %v0_13a90, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13aac, { 1, 0 }
}

define i32 @function_13ab4(i32 %arg1) local_unnamed_addr {
dec_label_pc_13ab4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ab4 = load i32, i32* @r4, align 4
  store i32 %v3_13ab4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13ad8, label %dec_label_pc_13ac8

dec_label_pc_13ac8:                               ; preds = %dec_label_pc_13ab4
  %v0_13ac8 = call i32 @function_12374()
  %v0_13acc = load i32, i32* %r4.global-to-local, align 4
  %v1_13acc = sub i32 0, %v0_13acc
  %v2_13ad0 = inttoptr i32 %v0_13ac8 to i32*
  store i32 %v1_13acc, i32* %v2_13ad0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13adc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13ad8

dec_label_pc_13ad8:                               ; preds = %dec_label_pc_13ab4, %dec_label_pc_13ac8
  %v2_13adc = phi i32 [ %v3_13ab4, %dec_label_pc_13ab4 ], [ %v2_13adc.pre, %dec_label_pc_13ac8 ]
  %v0_13ad8 = phi i32 [ %arg1, %dec_label_pc_13ab4 ], [ -1, %dec_label_pc_13ac8 ]
  store i32 %v2_13adc, i32* %r4.global-to-local, align 4
  ret i32 %v0_13ad8

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ad8, { 1, 0 }
}

define i32 @function_13ae0() local_unnamed_addr {
dec_label_pc_13ae0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13ae0 = load i32, i32* @r4, align 4
  store i32 %v3_13ae0, i32* %stack_var_-8, align 4
  %v0_13ae8 = load i32, i32* @r0, align 4
  store i32 %v0_13ae8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13ae8, -4095
  br i1 %tmp, label %dec_label_pc_13b04, label %dec_label_pc_13af4

dec_label_pc_13af4:                               ; preds = %dec_label_pc_13ae0
  %v0_13af4 = call i32 @function_12374()
  %v0_13af8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13af8 = sub i32 0, %v0_13af8
  %v2_13afc = inttoptr i32 %v0_13af4 to i32*
  store i32 %v1_13af8, i32* %v2_13afc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b08.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b04

dec_label_pc_13b04:                               ; preds = %dec_label_pc_13ae0, %dec_label_pc_13af4
  %v2_13b08 = phi i32 [ %v3_13ae0, %dec_label_pc_13ae0 ], [ %v2_13b08.pre, %dec_label_pc_13af4 ]
  %v0_13b04 = phi i32 [ %v0_13ae8, %dec_label_pc_13ae0 ], [ -1, %dec_label_pc_13af4 ]
  store i32 %v2_13b08, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b04

; uselistorder directives
  uselistorder i32 %v0_13ae8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b04, { 1, 0 }
}

define i32 @function_13b0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13b0c:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13b50, label %dec_label_pc_13b3c

dec_label_pc_13b3c:                               ; preds = %dec_label_pc_13b0c
  %v0_13b3c = call i32 @function_12374()
  %v0_13b40 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b40 = sub i32 0, %v0_13b40
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b48 = inttoptr i32 %v0_13b3c to i32*
  store i32 %v1_13b40, i32* %v2_13b48, align 4
  %v0_13b58.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b58

dec_label_pc_13b50:                               ; preds = %dec_label_pc_13b0c
  %v2_13b50 = icmp eq i32 %arg1, 0
  br i1 %v2_13b50, label %dec_label_pc_13b64, label %dec_label_pc_13b58

dec_label_pc_13b58:                               ; preds = %dec_label_pc_13b50, %dec_label_pc_13b3c
  %v0_13b58 = phi i32 [ %arg1, %dec_label_pc_13b50 ], [ %v0_13b58.pre, %dec_label_pc_13b3c ]
  br label %dec_label_pc_13b68

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13b50
  br label %dec_label_pc_13b68

dec_label_pc_13b68:                               ; preds = %dec_label_pc_13b58, %dec_label_pc_13b64
  %v14_13b6c = phi i32 [ %v0_13b58, %dec_label_pc_13b58 ], [ %tmp9, %dec_label_pc_13b64 ]
  ret i32 %v14_13b6c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13b68, { 1, 0 }
}

define i32 @function_13b70(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13b70:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13b70 = load i32, i32* @r4, align 4
  store i32 %v3_13b70, i32* %stack_var_-8, align 4
  %v6_13b74 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13b74, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13b74, -4095
  br i1 %tmp6, label %dec_label_pc_13b94, label %dec_label_pc_13b84

dec_label_pc_13b84:                               ; preds = %dec_label_pc_13b70
  %v0_13b84 = call i32 @function_12374()
  %v0_13b88 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b88 = sub i32 0, %v0_13b88
  %v2_13b8c = inttoptr i32 %v0_13b84 to i32*
  store i32 %v1_13b88, i32* %v2_13b8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13b94

dec_label_pc_13b94:                               ; preds = %dec_label_pc_13b70, %dec_label_pc_13b84
  %v0_13b94 = phi i32 [ %v6_13b74, %dec_label_pc_13b70 ], [ -1, %dec_label_pc_13b84 ]
  %v2_13b98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13b98, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b94

; uselistorder directives
  uselistorder i32 %v6_13b74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b94, { 1, 0 }
}

define i32 @function_13b9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b9c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13b9c = load i32, i32* @r4, align 4
  store i32 %v3_13b9c, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1cdfc.493 to i32), i32* %r4.global-to-local, align 4
  %v2_13ba4 = load i32, i32* @global_var_1cdfc.493, align 4
  %v2_13ba8 = icmp eq i32 %v2_13ba4, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13ba8, label %dec_label_pc_13bb8, label %dec_label_pc_13bc4

dec_label_pc_13bb8:                               ; preds = %dec_label_pc_13b9c
  %v2_13bb8 = call i32 @function_145b8(i32* null)
  %v1_13bbc = icmp slt i32 %v2_13bb8, 0
  br i1 %v1_13bbc, label %dec_label_pc_13be4, label %dec_label_pc_13bc4thread-pre-split

dec_label_pc_13bc4thread-pre-split:               ; preds = %dec_label_pc_13bb8
  %v0_13bc8.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_13bc4.pre = load i32, i32* @global_var_1cdfc.493, align 4
  br label %dec_label_pc_13bc4

dec_label_pc_13bc4:                               ; preds = %dec_label_pc_13bc4thread-pre-split, %dec_label_pc_13b9c
  %v2_13bc4 = phi i32 [ %v2_13bc4.pre, %dec_label_pc_13bc4thread-pre-split ], [ %v2_13ba4, %dec_label_pc_13b9c ]
  %v1_13bd0 = phi i32 [ %v0_13bc8.pr, %dec_label_pc_13bc4thread-pre-split ], [ %arg1, %dec_label_pc_13b9c ]
  %v2_13bc8 = icmp eq i32 %v1_13bd0, 0
  store i32 %v2_13bc4, i32* %r4.global-to-local, align 4
  br i1 %v2_13bc8, label %dec_label_pc_13be8, label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13bc4
  %v2_13bd0 = add i32 %v1_13bd0, %v2_13bc4
  %v1_13bd8 = inttoptr i32 %v2_13bd0 to i32*
  %v2_13bd8 = call i32 @function_145b8(i32* %v1_13bd8)
  %v1_13bdc = icmp slt i32 %v2_13bd8, 0
  br i1 %v1_13bdc, label %dec_label_pc_13be4, label %dec_label_pc_13bd8.dec_label_pc_13be8_crit_edge

dec_label_pc_13bd8.dec_label_pc_13be8_crit_edge:  ; preds = %dec_label_pc_13bd8
  %v0_13be8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13be8

dec_label_pc_13be4:                               ; preds = %dec_label_pc_13bd8, %dec_label_pc_13bb8
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13be8

dec_label_pc_13be8:                               ; preds = %dec_label_pc_13bd8.dec_label_pc_13be8_crit_edge, %dec_label_pc_13bc4, %dec_label_pc_13be4
  %v0_13be8 = phi i32 [ %v0_13be8.pre, %dec_label_pc_13bd8.dec_label_pc_13be8_crit_edge ], [ %v2_13bc4, %dec_label_pc_13bc4 ], [ -1, %dec_label_pc_13be4 ]
  %v2_13bec = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13bec, i32* @r4, align 4
  ret i32 %v0_13be8

; uselistorder directives
  uselistorder i32 %v2_13bc4, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 24, 25, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 3, 23 }
  uselistorder label %dec_label_pc_13be8, { 2, 0, 1 }
}

define i32 @function_13bf4(%tms* %arg1) local_unnamed_addr {
dec_label_pc_13bf4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13bf4 = load i32, i32* @r4, align 4
  store i32 %v3_13bf4, i32* %stack_var_-8, align 4
  %v3_13bf8 = call i32 @times(%tms* %arg1)
  store i32 %v3_13bf8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13bf8, -4095
  br i1 %tmp, label %dec_label_pc_13c18, label %dec_label_pc_13c08

dec_label_pc_13c08:                               ; preds = %dec_label_pc_13bf4
  %v0_13c08 = call i32 @function_12374()
  %v0_13c0c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c0c = sub i32 0, %v0_13c0c
  %v2_13c10 = inttoptr i32 %v0_13c08 to i32*
  store i32 %v1_13c0c, i32* %v2_13c10, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c18

dec_label_pc_13c18:                               ; preds = %dec_label_pc_13bf4, %dec_label_pc_13c08
  %v0_13c18 = phi i32 [ %v3_13bf8, %dec_label_pc_13bf4 ], [ -1, %dec_label_pc_13c08 ]
  %v2_13c1c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c1c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13c18

; uselistorder directives
  uselistorder i32 %v3_13bf8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c18, { 1, 0 }
}

define i32 @function_13c20(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c20:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_13c3c = inttoptr i32 %arg2 to i8*
  %v3_13c3c = call i32 @function_123e0(i8* %v2_13c3c, i32 0)
  %v1_13c40 = add i32 %tmp, 1
  %v2_13c40 = inttoptr i32 %v1_13c40 to i8*
  %v3_13c40 = load i8, i8* %v2_13c40, align 1
  %v4_13c40 = zext i8 %v3_13c40 to i32
  %v1_13c44 = add i32 %tmp, 5
  %v2_13c44 = inttoptr i32 %v1_13c44 to i8*
  %v3_13c44 = load i8, i8* %v2_13c44, align 1
  %v4_13c44 = zext i8 %v3_13c44 to i32
  %v2_13c48 = load i8, i8* %arg1, align 1
  %v3_13c48 = zext i8 %v2_13c48 to i32
  %v1_13c4c = add i32 %tmp, 4
  %v2_13c4c = inttoptr i32 %v1_13c4c to i8*
  %v3_13c4c = load i8, i8* %v2_13c4c, align 1
  %v4_13c4c = zext i8 %v3_13c4c to i32
  %v1_13c50 = add i32 %tmp, 2
  %v2_13c50 = inttoptr i32 %v1_13c50 to i8*
  %v3_13c50 = load i8, i8* %v2_13c50, align 1
  %v4_13c50 = zext i8 %v3_13c50 to i32
  %v1_13c54 = add i32 %tmp, 6
  %v2_13c54 = inttoptr i32 %v1_13c54 to i8*
  %v3_13c54 = load i8, i8* %v2_13c54, align 1
  %v4_13c54 = zext i8 %v3_13c54 to i32
  %v1_13c58 = add i32 %tmp, 3
  %v2_13c58 = inttoptr i32 %v1_13c58 to i8*
  %v3_13c58 = load i8, i8* %v2_13c58, align 1
  %v4_13c58 = zext i8 %v3_13c58 to i32
  %v4_13c5c = mul nuw nsw i32 %v4_13c40, 256
  %v5_13c5c = or i32 %v3_13c48, %v4_13c5c
  %v4_13c60 = mul nuw nsw i32 %v4_13c44, 256
  %v5_13c60 = or i32 %v4_13c4c, %v4_13c60
  %v1_13c64 = add i32 %tmp, 7
  %v2_13c64 = inttoptr i32 %v1_13c64 to i8*
  %v3_13c64 = load i8, i8* %v2_13c64, align 1
  %v4_13c64 = zext i8 %v3_13c64 to i32
  %v4_13c68 = mul nuw nsw i32 %v4_13c50, 65536
  %v5_13c68 = or i32 %v4_13c68, %v5_13c5c
  %v4_13c6c = mul nuw nsw i32 %v4_13c54, 65536
  %v5_13c6c = or i32 %v4_13c6c, %v5_13c60
  %v4_13c70 = mul nuw i32 %v4_13c58, 16777216
  %v5_13c70 = or i32 %v4_13c70, %v5_13c68
  %v4_13c74 = mul nuw i32 %v4_13c64, 16777216
  %v5_13c74 = or i32 %v4_13c74, %v5_13c6c
  store i32 %v5_13c74, i32* %r3.global-to-local, align 4
  %v0_13c78 = load i32, i32* %r7.global-to-local, align 4
  %v1_13c78 = inttoptr i32 %v0_13c78 to i32*
  store i32 %v5_13c70, i32* %v1_13c78, align 4
  %v3_13c78 = add i32 %v0_13c78, 4
  %v4_13c78 = inttoptr i32 %v3_13c78 to i32*
  %v5_13c78 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13c78, i32* %v4_13c78, align 4
  %v0_13c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c7c = add i32 %v0_13c7c, 89
  %v2_13c7c = inttoptr i32 %v1_13c7c to i8*
  %v3_13c7c = load i8, i8* %v2_13c7c, align 1
  %v4_13c7c = zext i8 %v3_13c7c to i32
  %v1_13c80 = add i32 %v0_13c7c, 93
  %v2_13c80 = inttoptr i32 %v1_13c80 to i8*
  %v3_13c80 = load i8, i8* %v2_13c80, align 1
  %v4_13c80 = zext i8 %v3_13c80 to i32
  %v1_13c84 = add i32 %v0_13c7c, 88
  %v2_13c84 = inttoptr i32 %v1_13c84 to i8*
  %v3_13c84 = load i8, i8* %v2_13c84, align 1
  %v4_13c84 = zext i8 %v3_13c84 to i32
  %v1_13c88 = add i32 %v0_13c7c, 92
  %v2_13c88 = inttoptr i32 %v1_13c88 to i8*
  %v3_13c88 = load i8, i8* %v2_13c88, align 1
  %v4_13c88 = zext i8 %v3_13c88 to i32
  store i32 %v4_13c88, i32* %r3.global-to-local, align 4
  %v1_13c8c = add i32 %v0_13c7c, 94
  %v2_13c8c = inttoptr i32 %v1_13c8c to i8*
  %v3_13c8c = load i8, i8* %v2_13c8c, align 1
  %v4_13c8c = zext i8 %v3_13c8c to i32
  %v1_13c90 = add i32 %v0_13c7c, 90
  %v2_13c90 = inttoptr i32 %v1_13c90 to i8*
  %v3_13c90 = load i8, i8* %v2_13c90, align 1
  %v4_13c90 = zext i8 %v3_13c90 to i32
  %v1_13c94 = add i32 %v0_13c7c, 91
  %v2_13c94 = inttoptr i32 %v1_13c94 to i8*
  %v3_13c94 = load i8, i8* %v2_13c94, align 1
  %v4_13c94 = zext i8 %v3_13c94 to i32
  %v4_13c98 = mul nuw nsw i32 %v4_13c7c, 256
  %v5_13c98 = or i32 %v4_13c84, %v4_13c98
  %v4_13c9c = mul nuw nsw i32 %v4_13c80, 256
  %v5_13c9c = or i32 %v4_13c88, %v4_13c9c
  store i32 %v5_13c9c, i32* %r3.global-to-local, align 4
  %v1_13ca0 = add i32 %v0_13c7c, 95
  %v2_13ca0 = inttoptr i32 %v1_13ca0 to i8*
  %v3_13ca0 = load i8, i8* %v2_13ca0, align 1
  %v4_13ca0 = zext i8 %v3_13ca0 to i32
  %v4_13ca4 = mul nuw nsw i32 %v4_13c8c, 65536
  %v5_13ca4 = or i32 %v4_13ca4, %v5_13c9c
  store i32 %v5_13ca4, i32* %r3.global-to-local, align 4
  %v4_13ca8 = mul nuw nsw i32 %v4_13c90, 65536
  %v5_13ca8 = or i32 %v4_13ca8, %v5_13c98
  %v4_13cac = mul nuw i32 %v4_13c94, 16777216
  %v5_13cac = or i32 %v4_13cac, %v5_13ca8
  %v4_13cb0 = mul nuw i32 %v4_13ca0, 16777216
  %v5_13cb0 = or i32 %v4_13cb0, %v5_13ca4
  store i32 %v5_13cb0, i32* %r6.global-to-local, align 4
  %v1_13cb4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cb4 = add i32 %v1_13cb4, 88
  %v3_13cb4 = inttoptr i32 %v2_13cb4 to i32*
  store i32 %v5_13cac, i32* %v3_13cb4, align 4
  %v0_13cb8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13cb8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cb8 = add i32 %v1_13cb8, 92
  %v3_13cb8 = inttoptr i32 %v2_13cb8 to i32*
  store i32 %v0_13cb8, i32* %v3_13cb8, align 4
  %v0_13cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_13cbc = add i32 %v0_13cbc, 13
  %v2_13cbc = inttoptr i32 %v1_13cbc to i8*
  %v3_13cbc = load i8, i8* %v2_13cbc, align 1
  %v4_13cbc = zext i8 %v3_13cbc to i32
  %v1_13cc0 = add i32 %v0_13cbc, 12
  %v2_13cc0 = inttoptr i32 %v1_13cc0 to i8*
  %v3_13cc0 = load i8, i8* %v2_13cc0, align 1
  %v4_13cc0 = zext i8 %v3_13cc0 to i32
  store i32 %v4_13cc0, i32* %r3.global-to-local, align 4
  %v1_13cc4 = add i32 %v0_13cbc, 14
  %v2_13cc4 = inttoptr i32 %v1_13cc4 to i8*
  %v3_13cc4 = load i8, i8* %v2_13cc4, align 1
  %v4_13cc4 = zext i8 %v3_13cc4 to i32
  %v4_13cc8 = mul nuw nsw i32 %v4_13cbc, 256
  %v5_13cc8 = or i32 %v4_13cc0, %v4_13cc8
  store i32 %v5_13cc8, i32* %r3.global-to-local, align 4
  %v1_13ccc = add i32 %v0_13cbc, 15
  %v2_13ccc = inttoptr i32 %v1_13ccc to i8*
  %v3_13ccc = load i8, i8* %v2_13ccc, align 1
  %v4_13ccc = zext i8 %v3_13ccc to i32
  %v4_13cd0 = mul nuw nsw i32 %v4_13cc4, 65536
  %v5_13cd0 = or i32 %v4_13cd0, %v5_13cc8
  %v4_13cd4 = mul nuw i32 %v4_13ccc, 16777216
  %v5_13cd4 = or i32 %v5_13cd0, %v4_13cd4
  store i32 %v5_13cd4, i32* %r3.global-to-local, align 4
  %v1_13cd8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cd8 = add i32 %v1_13cd8, 12
  %v3_13cd8 = inttoptr i32 %v2_13cd8 to i32*
  store i32 %v5_13cd4, i32* %v3_13cd8, align 4
  %v0_13cdc = load i32, i32* %r4.global-to-local, align 4
  %v1_13cdc = add i32 %v0_13cdc, 17
  %v2_13cdc = inttoptr i32 %v1_13cdc to i8*
  %v3_13cdc = load i8, i8* %v2_13cdc, align 1
  %v4_13cdc = zext i8 %v3_13cdc to i32
  %v1_13ce0 = add i32 %v0_13cdc, 16
  %v2_13ce0 = inttoptr i32 %v1_13ce0 to i8*
  %v3_13ce0 = load i8, i8* %v2_13ce0, align 1
  %v4_13ce0 = zext i8 %v3_13ce0 to i32
  store i32 %v4_13ce0, i32* %r3.global-to-local, align 4
  %v1_13ce4 = add i32 %v0_13cdc, 18
  %v2_13ce4 = inttoptr i32 %v1_13ce4 to i8*
  %v3_13ce4 = load i8, i8* %v2_13ce4, align 1
  %v4_13ce4 = zext i8 %v3_13ce4 to i32
  %v4_13ce8 = mul nuw nsw i32 %v4_13cdc, 256
  %v5_13ce8 = or i32 %v4_13ce0, %v4_13ce8
  store i32 %v5_13ce8, i32* %r3.global-to-local, align 4
  %v1_13cec = add i32 %v0_13cdc, 19
  %v2_13cec = inttoptr i32 %v1_13cec to i8*
  %v3_13cec = load i8, i8* %v2_13cec, align 1
  %v4_13cec = zext i8 %v3_13cec to i32
  %v4_13cf0 = mul nuw nsw i32 %v4_13ce4, 65536
  %v5_13cf0 = or i32 %v4_13cf0, %v5_13ce8
  %v4_13cf4 = mul nuw i32 %v4_13cec, 16777216
  %v5_13cf4 = or i32 %v5_13cf0, %v4_13cf4
  store i32 %v5_13cf4, i32* %r3.global-to-local, align 4
  %v1_13cf8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13cf8 = add i32 %v1_13cf8, 16
  %v3_13cf8 = inttoptr i32 %v2_13cf8 to i32*
  store i32 %v5_13cf4, i32* %v3_13cf8, align 4
  %v0_13cfc = load i32, i32* %r4.global-to-local, align 4
  %v1_13cfc = add i32 %v0_13cfc, 21
  %v2_13cfc = inttoptr i32 %v1_13cfc to i8*
  %v3_13cfc = load i8, i8* %v2_13cfc, align 1
  %v4_13cfc = zext i8 %v3_13cfc to i32
  %v1_13d00 = add i32 %v0_13cfc, 20
  %v2_13d00 = inttoptr i32 %v1_13d00 to i8*
  %v3_13d00 = load i8, i8* %v2_13d00, align 1
  %v4_13d00 = zext i8 %v3_13d00 to i32
  store i32 %v4_13d00, i32* %r3.global-to-local, align 4
  %v1_13d04 = add i32 %v0_13cfc, 22
  %v2_13d04 = inttoptr i32 %v1_13d04 to i8*
  %v3_13d04 = load i8, i8* %v2_13d04, align 1
  %v4_13d04 = zext i8 %v3_13d04 to i32
  %v4_13d08 = mul nuw nsw i32 %v4_13cfc, 256
  %v5_13d08 = or i32 %v4_13d00, %v4_13d08
  store i32 %v5_13d08, i32* %r3.global-to-local, align 4
  %v1_13d0c = add i32 %v0_13cfc, 23
  %v2_13d0c = inttoptr i32 %v1_13d0c to i8*
  %v3_13d0c = load i8, i8* %v2_13d0c, align 1
  %v4_13d0c = zext i8 %v3_13d0c to i32
  %v4_13d10 = mul nuw nsw i32 %v4_13d04, 65536
  %v5_13d10 = or i32 %v4_13d10, %v5_13d08
  %v4_13d14 = mul nuw i32 %v4_13d0c, 16777216
  %v5_13d14 = or i32 %v5_13d10, %v4_13d14
  store i32 %v5_13d14, i32* %r3.global-to-local, align 4
  %v1_13d18 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d18 = add i32 %v1_13d18, 20
  %v3_13d18 = inttoptr i32 %v2_13d18 to i32*
  store i32 %v5_13d14, i32* %v3_13d18, align 4
  %v0_13d1c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d1c = add i32 %v0_13d1c, 25
  %v2_13d1c = inttoptr i32 %v1_13d1c to i8*
  %v3_13d1c = load i8, i8* %v2_13d1c, align 1
  %v4_13d1c = zext i8 %v3_13d1c to i32
  %v1_13d20 = add i32 %v0_13d1c, 24
  %v2_13d20 = inttoptr i32 %v1_13d20 to i8*
  %v3_13d20 = load i8, i8* %v2_13d20, align 1
  %v4_13d20 = zext i8 %v3_13d20 to i32
  store i32 %v4_13d20, i32* %r3.global-to-local, align 4
  %v1_13d24 = add i32 %v0_13d1c, 26
  %v2_13d24 = inttoptr i32 %v1_13d24 to i8*
  %v3_13d24 = load i8, i8* %v2_13d24, align 1
  %v4_13d24 = zext i8 %v3_13d24 to i32
  %v4_13d28 = mul nuw nsw i32 %v4_13d1c, 256
  %v5_13d28 = or i32 %v4_13d20, %v4_13d28
  store i32 %v5_13d28, i32* %r3.global-to-local, align 4
  %v1_13d2c = add i32 %v0_13d1c, 27
  %v2_13d2c = inttoptr i32 %v1_13d2c to i8*
  %v3_13d2c = load i8, i8* %v2_13d2c, align 1
  %v4_13d2c = zext i8 %v3_13d2c to i32
  %v4_13d30 = mul nuw nsw i32 %v4_13d24, 65536
  %v5_13d30 = or i32 %v4_13d30, %v5_13d28
  %v4_13d34 = mul nuw i32 %v4_13d2c, 16777216
  %v5_13d34 = or i32 %v5_13d30, %v4_13d34
  store i32 %v5_13d34, i32* %r3.global-to-local, align 4
  %v1_13d38 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d38 = add i32 %v1_13d38, 24
  %v3_13d38 = inttoptr i32 %v2_13d38 to i32*
  store i32 %v5_13d34, i32* %v3_13d38, align 4
  %v0_13d3c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d3c = add i32 %v0_13d3c, 29
  %v2_13d3c = inttoptr i32 %v1_13d3c to i8*
  %v3_13d3c = load i8, i8* %v2_13d3c, align 1
  %v4_13d3c = zext i8 %v3_13d3c to i32
  %v1_13d40 = add i32 %v0_13d3c, 28
  %v2_13d40 = inttoptr i32 %v1_13d40 to i8*
  %v3_13d40 = load i8, i8* %v2_13d40, align 1
  %v4_13d40 = zext i8 %v3_13d40 to i32
  store i32 %v4_13d40, i32* %r3.global-to-local, align 4
  %v1_13d44 = add i32 %v0_13d3c, 30
  %v2_13d44 = inttoptr i32 %v1_13d44 to i8*
  %v3_13d44 = load i8, i8* %v2_13d44, align 1
  %v4_13d44 = zext i8 %v3_13d44 to i32
  %v4_13d48 = mul nuw nsw i32 %v4_13d3c, 256
  %v5_13d48 = or i32 %v4_13d40, %v4_13d48
  store i32 %v5_13d48, i32* %r3.global-to-local, align 4
  %v1_13d4c = add i32 %v0_13d3c, 31
  %v2_13d4c = inttoptr i32 %v1_13d4c to i8*
  %v3_13d4c = load i8, i8* %v2_13d4c, align 1
  %v4_13d4c = zext i8 %v3_13d4c to i32
  %v4_13d50 = mul nuw nsw i32 %v4_13d44, 65536
  %v5_13d50 = or i32 %v4_13d50, %v5_13d48
  %v4_13d54 = mul nuw i32 %v4_13d4c, 16777216
  %v5_13d54 = or i32 %v5_13d50, %v4_13d54
  store i32 %v5_13d54, i32* %r3.global-to-local, align 4
  %v1_13d58 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d58 = add i32 %v1_13d58, 28
  %v3_13d58 = inttoptr i32 %v2_13d58 to i32*
  store i32 %v5_13d54, i32* %v3_13d58, align 4
  %v0_13d5c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d5c = add i32 %v0_13d5c, 33
  %v2_13d5c = inttoptr i32 %v1_13d5c to i8*
  %v3_13d5c = load i8, i8* %v2_13d5c, align 1
  %v4_13d5c = zext i8 %v3_13d5c to i32
  %v1_13d60 = add i32 %v0_13d5c, 37
  %v2_13d60 = inttoptr i32 %v1_13d60 to i8*
  %v3_13d60 = load i8, i8* %v2_13d60, align 1
  %v4_13d60 = zext i8 %v3_13d60 to i32
  %v1_13d64 = add i32 %v0_13d5c, 32
  %v2_13d64 = inttoptr i32 %v1_13d64 to i8*
  %v3_13d64 = load i8, i8* %v2_13d64, align 1
  %v4_13d64 = zext i8 %v3_13d64 to i32
  %v1_13d68 = add i32 %v0_13d5c, 36
  %v2_13d68 = inttoptr i32 %v1_13d68 to i8*
  %v3_13d68 = load i8, i8* %v2_13d68, align 1
  %v4_13d68 = zext i8 %v3_13d68 to i32
  store i32 %v4_13d68, i32* %r3.global-to-local, align 4
  %v1_13d6c = add i32 %v0_13d5c, 34
  %v2_13d6c = inttoptr i32 %v1_13d6c to i8*
  %v3_13d6c = load i8, i8* %v2_13d6c, align 1
  %v4_13d6c = zext i8 %v3_13d6c to i32
  %v1_13d70 = add i32 %v0_13d5c, 38
  %v2_13d70 = inttoptr i32 %v1_13d70 to i8*
  %v3_13d70 = load i8, i8* %v2_13d70, align 1
  %v4_13d70 = zext i8 %v3_13d70 to i32
  %v1_13d74 = add i32 %v0_13d5c, 35
  %v2_13d74 = inttoptr i32 %v1_13d74 to i8*
  %v3_13d74 = load i8, i8* %v2_13d74, align 1
  %v4_13d74 = zext i8 %v3_13d74 to i32
  %v4_13d78 = mul nuw nsw i32 %v4_13d5c, 256
  %v5_13d78 = or i32 %v4_13d64, %v4_13d78
  %v4_13d7c = mul nuw nsw i32 %v4_13d60, 256
  %v5_13d7c = or i32 %v4_13d68, %v4_13d7c
  store i32 %v5_13d7c, i32* %r3.global-to-local, align 4
  %v1_13d80 = add i32 %v0_13d5c, 39
  %v2_13d80 = inttoptr i32 %v1_13d80 to i8*
  %v3_13d80 = load i8, i8* %v2_13d80, align 1
  %v4_13d80 = zext i8 %v3_13d80 to i32
  %v4_13d84 = mul nuw nsw i32 %v4_13d6c, 65536
  %v5_13d84 = or i32 %v4_13d84, %v5_13d78
  %v4_13d88 = mul nuw nsw i32 %v4_13d70, 65536
  %v5_13d88 = or i32 %v4_13d88, %v5_13d7c
  %v4_13d8c = mul nuw i32 %v4_13d74, 16777216
  %v5_13d8c = or i32 %v5_13d84, %v4_13d8c
  %v4_13d90 = mul nuw i32 %v4_13d80, 16777216
  %v5_13d90 = or i32 %v5_13d88, %v4_13d90
  store i32 %v5_13d90, i32* %r3.global-to-local, align 4
  %v1_13da4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13da4 = add i32 %v1_13da4, 32
  %v3_13da4 = inttoptr i32 %v2_13da4 to i32*
  store i32 %v5_13d8c, i32* %v3_13da4, align 4
  %v0_13da8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13da8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13da8 = add i32 %v1_13da8, 36
  %v3_13da8 = inttoptr i32 %v2_13da8 to i32*
  store i32 %v0_13da8, i32* %v3_13da8, align 4
  %v0_13dac = load i32, i32* %r4.global-to-local, align 4
  %v1_13dac = add i32 %v0_13dac, 45
  %v2_13dac = inttoptr i32 %v1_13dac to i8*
  %v3_13dac = load i8, i8* %v2_13dac, align 1
  %v4_13dac = zext i8 %v3_13dac to i32
  %v1_13db0 = add i32 %v0_13dac, 49
  %v2_13db0 = inttoptr i32 %v1_13db0 to i8*
  %v3_13db0 = load i8, i8* %v2_13db0, align 1
  %v4_13db0 = zext i8 %v3_13db0 to i32
  %v1_13db4 = add i32 %v0_13dac, 44
  %v2_13db4 = inttoptr i32 %v1_13db4 to i8*
  %v3_13db4 = load i8, i8* %v2_13db4, align 1
  %v4_13db4 = zext i8 %v3_13db4 to i32
  %v1_13db8 = add i32 %v0_13dac, 48
  %v2_13db8 = inttoptr i32 %v1_13db8 to i8*
  %v3_13db8 = load i8, i8* %v2_13db8, align 1
  %v4_13db8 = zext i8 %v3_13db8 to i32
  store i32 %v4_13db8, i32* %r3.global-to-local, align 4
  %v1_13dbc = add i32 %v0_13dac, 46
  %v2_13dbc = inttoptr i32 %v1_13dbc to i8*
  %v3_13dbc = load i8, i8* %v2_13dbc, align 1
  %v4_13dbc = zext i8 %v3_13dbc to i32
  %v1_13dc0 = add i32 %v0_13dac, 50
  %v2_13dc0 = inttoptr i32 %v1_13dc0 to i8*
  %v3_13dc0 = load i8, i8* %v2_13dc0, align 1
  %v4_13dc0 = zext i8 %v3_13dc0 to i32
  %v1_13dc4 = add i32 %v0_13dac, 47
  %v2_13dc4 = inttoptr i32 %v1_13dc4 to i8*
  %v3_13dc4 = load i8, i8* %v2_13dc4, align 1
  %v4_13dc4 = zext i8 %v3_13dc4 to i32
  %v4_13dc8 = mul nuw nsw i32 %v4_13dac, 256
  %v5_13dc8 = or i32 %v4_13db4, %v4_13dc8
  %v4_13dcc = mul nuw nsw i32 %v4_13db0, 256
  %v5_13dcc = or i32 %v4_13db8, %v4_13dcc
  store i32 %v5_13dcc, i32* %r3.global-to-local, align 4
  %v1_13dd0 = add i32 %v0_13dac, 51
  %v2_13dd0 = inttoptr i32 %v1_13dd0 to i8*
  %v3_13dd0 = load i8, i8* %v2_13dd0, align 1
  %v4_13dd0 = zext i8 %v3_13dd0 to i32
  %v4_13dd4 = mul nuw nsw i32 %v4_13dbc, 65536
  %v5_13dd4 = or i32 %v4_13dd4, %v5_13dc8
  %v4_13dd8 = mul nuw nsw i32 %v4_13dc0, 65536
  %v5_13dd8 = or i32 %v4_13dd8, %v5_13dcc
  %v4_13ddc = mul nuw i32 %v4_13dc4, 16777216
  %v5_13ddc = or i32 %v5_13dd4, %v4_13ddc
  %v4_13de0 = mul nuw i32 %v4_13dd0, 16777216
  %v5_13de0 = or i32 %v5_13dd8, %v4_13de0
  store i32 %v5_13de0, i32* %r3.global-to-local, align 4
  %v1_13df4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13df4 = add i32 %v1_13df4, 44
  %v3_13df4 = inttoptr i32 %v2_13df4 to i32*
  store i32 %v5_13ddc, i32* %v3_13df4, align 4
  %v0_13df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_13df8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13df8 = add i32 %v1_13df8, 48
  %v3_13df8 = inttoptr i32 %v2_13df8 to i32*
  store i32 %v0_13df8, i32* %v3_13df8, align 4
  %v0_13dfc = load i32, i32* %r4.global-to-local, align 4
  %v1_13dfc = add i32 %v0_13dfc, 53
  %v2_13dfc = inttoptr i32 %v1_13dfc to i8*
  %v3_13dfc = load i8, i8* %v2_13dfc, align 1
  %v4_13dfc = zext i8 %v3_13dfc to i32
  %v1_13e00 = add i32 %v0_13dfc, 52
  %v2_13e00 = inttoptr i32 %v1_13e00 to i8*
  %v3_13e00 = load i8, i8* %v2_13e00, align 1
  %v4_13e00 = zext i8 %v3_13e00 to i32
  store i32 %v4_13e00, i32* %r3.global-to-local, align 4
  %v1_13e04 = add i32 %v0_13dfc, 54
  %v2_13e04 = inttoptr i32 %v1_13e04 to i8*
  %v3_13e04 = load i8, i8* %v2_13e04, align 1
  %v4_13e04 = zext i8 %v3_13e04 to i32
  %v4_13e08 = mul nuw nsw i32 %v4_13dfc, 256
  %v5_13e08 = or i32 %v4_13e00, %v4_13e08
  store i32 %v5_13e08, i32* %r3.global-to-local, align 4
  %v1_13e0c = add i32 %v0_13dfc, 55
  %v2_13e0c = inttoptr i32 %v1_13e0c to i8*
  %v3_13e0c = load i8, i8* %v2_13e0c, align 1
  %v4_13e0c = zext i8 %v3_13e0c to i32
  %v4_13e10 = mul nuw nsw i32 %v4_13e04, 65536
  %v5_13e10 = or i32 %v4_13e10, %v5_13e08
  %v4_13e14 = mul nuw i32 %v4_13e0c, 16777216
  %v5_13e14 = or i32 %v5_13e10, %v4_13e14
  store i32 %v5_13e14, i32* %r3.global-to-local, align 4
  %v1_13e18 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e18 = add i32 %v1_13e18, 52
  %v3_13e18 = inttoptr i32 %v2_13e18 to i32*
  store i32 %v5_13e14, i32* %v3_13e18, align 4
  %v0_13e1c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e1c = add i32 %v0_13e1c, 57
  %v2_13e1c = inttoptr i32 %v1_13e1c to i8*
  %v3_13e1c = load i8, i8* %v2_13e1c, align 1
  %v4_13e1c = zext i8 %v3_13e1c to i32
  %v1_13e20 = add i32 %v0_13e1c, 56
  %v2_13e20 = inttoptr i32 %v1_13e20 to i8*
  %v3_13e20 = load i8, i8* %v2_13e20, align 1
  %v4_13e20 = zext i8 %v3_13e20 to i32
  %v1_13e24 = add i32 %v0_13e1c, 60
  %v2_13e24 = inttoptr i32 %v1_13e24 to i8*
  %v3_13e24 = load i8, i8* %v2_13e24, align 1
  %v4_13e24 = zext i8 %v3_13e24 to i32
  store i32 %v4_13e24, i32* %r3.global-to-local, align 4
  %v1_13e28 = add i32 %v0_13e1c, 61
  %v2_13e28 = inttoptr i32 %v1_13e28 to i8*
  %v3_13e28 = load i8, i8* %v2_13e28, align 1
  %v4_13e28 = zext i8 %v3_13e28 to i32
  %v1_13e2c = add i32 %v0_13e1c, 58
  %v2_13e2c = inttoptr i32 %v1_13e2c to i8*
  %v3_13e2c = load i8, i8* %v2_13e2c, align 1
  %v4_13e2c = zext i8 %v3_13e2c to i32
  %v1_13e30 = add i32 %v0_13e1c, 62
  %v2_13e30 = inttoptr i32 %v1_13e30 to i8*
  %v3_13e30 = load i8, i8* %v2_13e30, align 1
  %v4_13e30 = zext i8 %v3_13e30 to i32
  %v1_13e34 = add i32 %v0_13e1c, 59
  %v2_13e34 = inttoptr i32 %v1_13e34 to i8*
  %v3_13e34 = load i8, i8* %v2_13e34, align 1
  %v4_13e34 = zext i8 %v3_13e34 to i32
  %v4_13e38 = mul nuw nsw i32 %v4_13e1c, 256
  %v5_13e38 = or i32 %v4_13e20, %v4_13e38
  %v4_13e3c = mul nuw nsw i32 %v4_13e28, 256
  %v5_13e3c = or i32 %v4_13e3c, %v4_13e24
  store i32 %v5_13e3c, i32* %r3.global-to-local, align 4
  %v1_13e40 = add i32 %v0_13e1c, 63
  %v2_13e40 = inttoptr i32 %v1_13e40 to i8*
  %v3_13e40 = load i8, i8* %v2_13e40, align 1
  %v4_13e40 = zext i8 %v3_13e40 to i32
  %v4_13e44 = mul nuw nsw i32 %v4_13e2c, 65536
  %v5_13e44 = or i32 %v4_13e44, %v5_13e38
  %v4_13e48 = mul nuw nsw i32 %v4_13e30, 65536
  %v5_13e48 = or i32 %v4_13e48, %v5_13e3c
  %v4_13e4c = mul nuw i32 %v4_13e40, 16777216
  %v5_13e4c = or i32 %v5_13e48, %v4_13e4c
  %v4_13e50 = mul nuw i32 %v4_13e34, 16777216
  %v5_13e50 = or i32 %v5_13e44, %v4_13e50
  store i32 %v5_13e4c, i32* %r3.global-to-local, align 4
  %v1_13e60 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e60 = add i32 %v1_13e60, 56
  %v3_13e60 = inttoptr i32 %v2_13e60 to i32*
  store i32 %v5_13e50, i32* %v3_13e60, align 4
  %v0_13e64 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e64 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e64 = add i32 %v1_13e64, 60
  %v3_13e64 = inttoptr i32 %v2_13e64 to i32*
  store i32 %v0_13e64, i32* %v3_13e64, align 4
  %v0_13e68 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e68 = add i32 %v0_13e68, 65
  %v2_13e68 = inttoptr i32 %v1_13e68 to i8*
  %v3_13e68 = load i8, i8* %v2_13e68, align 1
  %v4_13e68 = zext i8 %v3_13e68 to i32
  %v1_13e6c = add i32 %v0_13e68, 64
  %v2_13e6c = inttoptr i32 %v1_13e6c to i8*
  %v3_13e6c = load i8, i8* %v2_13e6c, align 1
  %v4_13e6c = zext i8 %v3_13e6c to i32
  store i32 %v4_13e6c, i32* %r3.global-to-local, align 4
  %v1_13e70 = add i32 %v0_13e68, 66
  %v2_13e70 = inttoptr i32 %v1_13e70 to i8*
  %v3_13e70 = load i8, i8* %v2_13e70, align 1
  %v4_13e70 = zext i8 %v3_13e70 to i32
  %v4_13e74 = mul nuw nsw i32 %v4_13e68, 256
  %v5_13e74 = or i32 %v4_13e6c, %v4_13e74
  store i32 %v5_13e74, i32* %r3.global-to-local, align 4
  %v1_13e78 = add i32 %v0_13e68, 67
  %v2_13e78 = inttoptr i32 %v1_13e78 to i8*
  %v3_13e78 = load i8, i8* %v2_13e78, align 1
  %v4_13e78 = zext i8 %v3_13e78 to i32
  %v4_13e7c = mul nuw nsw i32 %v4_13e70, 65536
  %v5_13e7c = or i32 %v4_13e7c, %v5_13e74
  %v4_13e80 = mul nuw i32 %v4_13e78, 16777216
  %v5_13e80 = or i32 %v5_13e7c, %v4_13e80
  store i32 %v5_13e80, i32* %r3.global-to-local, align 4
  %v1_13e84 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e84 = add i32 %v1_13e84, 64
  %v3_13e84 = inttoptr i32 %v2_13e84 to i32*
  store i32 %v5_13e80, i32* %v3_13e84, align 4
  %v0_13e88 = load i32, i32* %r4.global-to-local, align 4
  %v1_13e88 = add i32 %v0_13e88, 73
  %v2_13e88 = inttoptr i32 %v1_13e88 to i8*
  %v3_13e88 = load i8, i8* %v2_13e88, align 1
  %v4_13e88 = zext i8 %v3_13e88 to i32
  %v1_13e8c = add i32 %v0_13e88, 72
  %v2_13e8c = inttoptr i32 %v1_13e8c to i8*
  %v3_13e8c = load i8, i8* %v2_13e8c, align 1
  %v4_13e8c = zext i8 %v3_13e8c to i32
  store i32 %v4_13e8c, i32* %r3.global-to-local, align 4
  %v1_13e90 = add i32 %v0_13e88, 74
  %v2_13e90 = inttoptr i32 %v1_13e90 to i8*
  %v3_13e90 = load i8, i8* %v2_13e90, align 1
  %v4_13e90 = zext i8 %v3_13e90 to i32
  %v4_13e94 = mul nuw nsw i32 %v4_13e88, 256
  %v5_13e94 = or i32 %v4_13e8c, %v4_13e94
  store i32 %v5_13e94, i32* %r3.global-to-local, align 4
  %v1_13e98 = add i32 %v0_13e88, 75
  %v2_13e98 = inttoptr i32 %v1_13e98 to i8*
  %v3_13e98 = load i8, i8* %v2_13e98, align 1
  %v4_13e98 = zext i8 %v3_13e98 to i32
  %v4_13e9c = mul nuw nsw i32 %v4_13e90, 65536
  %v5_13e9c = or i32 %v4_13e9c, %v5_13e94
  %v4_13ea0 = mul nuw i32 %v4_13e98, 16777216
  %v5_13ea0 = or i32 %v5_13e9c, %v4_13ea0
  store i32 %v5_13ea0, i32* %r3.global-to-local, align 4
  %v1_13ea4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ea4 = add i32 %v1_13ea4, 72
  %v3_13ea4 = inttoptr i32 %v2_13ea4 to i32*
  store i32 %v5_13ea0, i32* %v3_13ea4, align 4
  %v0_13ea8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ea8 = add i32 %v0_13ea8, 81
  %v2_13ea8 = inttoptr i32 %v1_13ea8 to i8*
  %v3_13ea8 = load i8, i8* %v2_13ea8, align 1
  %v4_13ea8 = zext i8 %v3_13ea8 to i32
  %v1_13eac = add i32 %v0_13ea8, 80
  %v2_13eac = inttoptr i32 %v1_13eac to i8*
  %v3_13eac = load i8, i8* %v2_13eac, align 1
  %v4_13eac = zext i8 %v3_13eac to i32
  store i32 %v4_13eac, i32* %r3.global-to-local, align 4
  %v1_13eb0 = add i32 %v0_13ea8, 82
  %v2_13eb0 = inttoptr i32 %v1_13eb0 to i8*
  %v3_13eb0 = load i8, i8* %v2_13eb0, align 1
  %v4_13eb0 = zext i8 %v3_13eb0 to i32
  %v4_13eb4 = mul nuw nsw i32 %v4_13ea8, 256
  %v5_13eb4 = or i32 %v4_13eac, %v4_13eb4
  store i32 %v5_13eb4, i32* %r3.global-to-local, align 4
  %v1_13eb8 = add i32 %v0_13ea8, 83
  %v2_13eb8 = inttoptr i32 %v1_13eb8 to i8*
  %v3_13eb8 = load i8, i8* %v2_13eb8, align 1
  %v4_13eb8 = zext i8 %v3_13eb8 to i32
  %v4_13ebc = mul nuw nsw i32 %v4_13eb0, 65536
  %v5_13ebc = or i32 %v4_13ebc, %v5_13eb4
  %v4_13ec0 = mul nuw i32 %v4_13eb8, 16777216
  %v5_13ec0 = or i32 %v5_13ebc, %v4_13ec0
  store i32 %v5_13ec0, i32* %r3.global-to-local, align 4
  %v1_13ec4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ec4 = add i32 %v1_13ec4, 80
  %v3_13ec4 = inttoptr i32 %v2_13ec4 to i32*
  store i32 %v5_13ec0, i32* %v3_13ec4, align 4
  %v0_13ec8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ec8 = add i32 %v0_13ec8, 69
  %v2_13ec8 = inttoptr i32 %v1_13ec8 to i8*
  %v3_13ec8 = load i8, i8* %v2_13ec8, align 1
  %v4_13ec8 = zext i8 %v3_13ec8 to i32
  %v1_13ecc = add i32 %v0_13ec8, 68
  %v2_13ecc = inttoptr i32 %v1_13ecc to i8*
  %v3_13ecc = load i8, i8* %v2_13ecc, align 1
  %v4_13ecc = zext i8 %v3_13ecc to i32
  store i32 %v4_13ecc, i32* %r3.global-to-local, align 4
  %v1_13ed0 = add i32 %v0_13ec8, 70
  %v2_13ed0 = inttoptr i32 %v1_13ed0 to i8*
  %v3_13ed0 = load i8, i8* %v2_13ed0, align 1
  %v4_13ed0 = zext i8 %v3_13ed0 to i32
  %v4_13ed4 = mul nuw nsw i32 %v4_13ec8, 256
  %v5_13ed4 = or i32 %v4_13ecc, %v4_13ed4
  store i32 %v5_13ed4, i32* %r3.global-to-local, align 4
  %v1_13ed8 = add i32 %v0_13ec8, 71
  %v2_13ed8 = inttoptr i32 %v1_13ed8 to i8*
  %v3_13ed8 = load i8, i8* %v2_13ed8, align 1
  %v4_13ed8 = zext i8 %v3_13ed8 to i32
  %v4_13edc = mul nuw nsw i32 %v4_13ed0, 65536
  %v5_13edc = or i32 %v4_13edc, %v5_13ed4
  %v4_13ee0 = mul nuw i32 %v4_13ed8, 16777216
  %v5_13ee0 = or i32 %v5_13edc, %v4_13ee0
  store i32 %v5_13ee0, i32* %r3.global-to-local, align 4
  %v1_13ee4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ee4 = add i32 %v1_13ee4, 68
  %v3_13ee4 = inttoptr i32 %v2_13ee4 to i32*
  store i32 %v5_13ee0, i32* %v3_13ee4, align 4
  %v0_13ee8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ee8 = add i32 %v0_13ee8, 77
  %v2_13ee8 = inttoptr i32 %v1_13ee8 to i8*
  %v3_13ee8 = load i8, i8* %v2_13ee8, align 1
  %v4_13ee8 = zext i8 %v3_13ee8 to i32
  %v1_13eec = add i32 %v0_13ee8, 76
  %v2_13eec = inttoptr i32 %v1_13eec to i8*
  %v3_13eec = load i8, i8* %v2_13eec, align 1
  %v4_13eec = zext i8 %v3_13eec to i32
  store i32 %v4_13eec, i32* %r3.global-to-local, align 4
  %v1_13ef0 = add i32 %v0_13ee8, 78
  %v2_13ef0 = inttoptr i32 %v1_13ef0 to i8*
  %v3_13ef0 = load i8, i8* %v2_13ef0, align 1
  %v4_13ef0 = zext i8 %v3_13ef0 to i32
  %v4_13ef4 = mul nuw nsw i32 %v4_13ee8, 256
  %v5_13ef4 = or i32 %v4_13eec, %v4_13ef4
  store i32 %v5_13ef4, i32* %r3.global-to-local, align 4
  %v1_13ef8 = add i32 %v0_13ee8, 79
  %v2_13ef8 = inttoptr i32 %v1_13ef8 to i8*
  %v3_13ef8 = load i8, i8* %v2_13ef8, align 1
  %v4_13ef8 = zext i8 %v3_13ef8 to i32
  %v4_13efc = mul nuw nsw i32 %v4_13ef0, 65536
  %v5_13efc = or i32 %v4_13efc, %v5_13ef4
  %v4_13f00 = mul nuw i32 %v4_13ef8, 16777216
  %v5_13f00 = or i32 %v5_13efc, %v4_13f00
  store i32 %v5_13f00, i32* %r3.global-to-local, align 4
  %v1_13f04 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f04 = add i32 %v1_13f04, 76
  %v3_13f04 = inttoptr i32 %v2_13f04 to i32*
  store i32 %v5_13f00, i32* %v3_13f04, align 4
  %v0_13f08 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f08 = add i32 %v0_13f08, 85
  %v2_13f08 = inttoptr i32 %v1_13f08 to i8*
  %v3_13f08 = load i8, i8* %v2_13f08, align 1
  %v4_13f08 = zext i8 %v3_13f08 to i32
  %v1_13f0c = add i32 %v0_13f08, 84
  %v2_13f0c = inttoptr i32 %v1_13f0c to i8*
  %v3_13f0c = load i8, i8* %v2_13f0c, align 1
  %v4_13f0c = zext i8 %v3_13f0c to i32
  store i32 %v4_13f0c, i32* %r3.global-to-local, align 4
  %v1_13f10 = add i32 %v0_13f08, 86
  %v2_13f10 = inttoptr i32 %v1_13f10 to i8*
  %v3_13f10 = load i8, i8* %v2_13f10, align 1
  %v4_13f10 = zext i8 %v3_13f10 to i32
  %v4_13f14 = mul nuw nsw i32 %v4_13f08, 256
  %v5_13f14 = or i32 %v4_13f0c, %v4_13f14
  store i32 %v5_13f14, i32* %r3.global-to-local, align 4
  %v1_13f18 = add i32 %v0_13f08, 87
  %v2_13f18 = inttoptr i32 %v1_13f18 to i8*
  %v3_13f18 = load i8, i8* %v2_13f18, align 1
  %v4_13f18 = zext i8 %v3_13f18 to i32
  %v4_13f1c = mul nuw nsw i32 %v4_13f10, 65536
  %v5_13f1c = or i32 %v4_13f1c, %v5_13f14
  %v4_13f20 = mul nuw i32 %v4_13f18, 16777216
  %v5_13f20 = or i32 %v5_13f1c, %v4_13f20
  store i32 %v5_13f20, i32* %r3.global-to-local, align 4
  %v1_13f24 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f24 = add i32 %v1_13f24, 84
  %v3_13f24 = inttoptr i32 %v2_13f24 to i32*
  store i32 %v5_13f20, i32* %v3_13f24, align 4
  ret i32 %v4_13e28

; uselistorder directives
  uselistorder i32 %v4_13e28, { 1, 0 }
  uselistorder i32 %v0_13e1c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13dac, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13d5c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13c7c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32* %r7.global-to-local, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2, 3, 4, 5, 21 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 16 }
  uselistorder i32* %r3.global-to-local, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 35, { 3, 0, 1, 2 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 3, 0, 1, 2 }
  uselistorder i32 33, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 30, { 7, 2, 8, 3, 9, 4, 10, 1, 11, 0, 12, 5, 6 }
  uselistorder i32 29, { 4, 5, 6, 3, 0, 1, 2 }
  uselistorder i32 26, { 5, 0, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 25, { 9, 17, 18, 8, 10, 11, 2, 3, 12, 0, 13, 4, 14, 1, 15, 5, 6, 16, 7, 19 }
  uselistorder i32 23, { 7, 0, 1, 8, 2, 3, 4, 5, 9, 6 }
  uselistorder i32 22, { 11, 1, 14, 2, 3, 4, 5, 0, 12, 6, 7, 8, 9, 13, 10 }
  uselistorder i32 21, { 9, 3, 2, 10, 11, 12, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 19, { 7, 11, 12, 13, 3, 8, 0, 9, 10, 4, 5, 6, 14, 1, 15, 2, 16 }
  uselistorder i32 18, { 5, 6, 7, 8, 4, 9, 0, 10, 1, 11, 2, 12, 3, 13 }
  uselistorder i32 17, { 18, 23, 0, 4, 24, 25, 5, 26, 27, 6, 1, 19, 7, 20, 21, 22, 8, 9, 10, 11, 12, 13, 28, 14, 29, 15, 30, 16, 31, 17, 32, 33, 2, 34, 35, 36, 3, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 6, { 32, 39, 16, 17, 84, 18, 2, 19, 3, 20, 4, 22, 33, 23, 34, 24, 35, 21, 36, 0, 25, 37, 38, 5, 6, 43, 44, 45, 7, 46, 47, 48, 49, 8, 50, 51, 52, 53, 9, 54, 10, 55, 56, 57, 26, 58, 11, 59, 60, 61, 27, 62, 12, 63, 64, 65, 28, 66, 67, 68, 29, 69, 13, 70, 71, 72, 73, 30, 74, 14, 75, 77, 78, 79, 80, 81, 31, 82, 15, 83, 1, 76, 40, 41, 42 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13f30(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13f30:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13f30 = load i32, i32* @r4, align 4
  store i32 %v3_13f30, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13f48 = inttoptr i32 %arg2 to i8*
  %v3_13f48 = call i32 @function_123e0(i8* %v2_13f48, i32 0)
  store i32 %v3_13f48, i32* %r0.global-to-local, align 4
  %v0_13f4c = load i32, i32* %r5.global-to-local, align 4
  %v1_13f4c = inttoptr i32 %v0_13f4c to i32*
  %v2_13f4c = load i32, i32* %v1_13f4c, align 4
  store i32 %v2_13f4c, i32* %r3.global-to-local, align 4
  %v1_13f50 = add i32 %v0_13f4c, 4
  %v2_13f50 = inttoptr i32 %v1_13f50 to i32*
  %v3_13f50 = load i32, i32* %v2_13f50, align 4
  store i32 %v3_13f50, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13f58 = load i32, i32* %r6.global-to-local, align 4
  %v1_13f58 = inttoptr i32 %v0_13f58 to i32*
  store i32 %v2_13f4c, i32* %v1_13f58, align 4
  %v3_13f58 = add i32 %v0_13f58, 4
  %v4_13f58 = inttoptr i32 %v3_13f58 to i32*
  %v5_13f58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13f58, i32* %v4_13f58, align 4
  %v0_13f5c = load i32, i32* %r2.global-to-local, align 4
  %v1_13f5c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f5c = add i32 %v1_13f5c, 12
  %v3_13f5c = inttoptr i32 %v2_13f5c to i32*
  store i32 %v0_13f5c, i32* %v3_13f5c, align 4
  %v0_13f60 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f60, 9
  %v2_13f60 = inttoptr i32 %v1_13f60 to i8*
  %v3_13f60 = load i8, i8* %v2_13f60, align 1
  %v4_13f60 = zext i8 %v3_13f60 to i32
  store i32 %v4_13f60, i32* %r2.global-to-local, align 4
  %v1_13f64 = add i32 %v0_13f60, 8
  %v2_13f64 = inttoptr i32 %v1_13f64 to i8*
  %v3_13f64 = load i8, i8* %v2_13f64, align 1
  %v4_13f64 = zext i8 %v3_13f64 to i32
  %v4_13f68 = mul nuw nsw i32 %v4_13f60, 256
  %v5_13f68 = or i32 %v4_13f64, %v4_13f68
  store i32 %v5_13f68, i32* %r3.global-to-local, align 4
  %v1_13f6c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f6c = add i32 %v1_13f6c, 16
  %v3_13f6c = inttoptr i32 %v2_13f6c to i32*
  store i32 %v5_13f68, i32* %v3_13f6c, align 4
  %v0_13f70 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f70 = add i32 %v0_13f70, 11
  %v2_13f70 = inttoptr i32 %v1_13f70 to i8*
  %v3_13f70 = load i8, i8* %v2_13f70, align 1
  %v4_13f70 = zext i8 %v3_13f70 to i32
  store i32 %v4_13f70, i32* %r2.global-to-local, align 4
  %v1_13f74 = add i32 %v0_13f70, 10
  %v2_13f74 = inttoptr i32 %v1_13f74 to i8*
  %v3_13f74 = load i8, i8* %v2_13f74, align 1
  %v4_13f74 = zext i8 %v3_13f74 to i32
  %v4_13f78 = mul nuw nsw i32 %v4_13f70, 256
  %v5_13f78 = or i32 %v4_13f74, %v4_13f78
  store i32 %v5_13f78, i32* %r3.global-to-local, align 4
  %v1_13f7c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f7c = add i32 %v1_13f7c, 20
  %v3_13f7c = inttoptr i32 %v2_13f7c to i32*
  store i32 %v5_13f78, i32* %v3_13f7c, align 4
  %v0_13f80 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f80 = add i32 %v0_13f80, 13
  %v2_13f80 = inttoptr i32 %v1_13f80 to i8*
  %v3_13f80 = load i8, i8* %v2_13f80, align 1
  %v4_13f80 = zext i8 %v3_13f80 to i32
  store i32 %v4_13f80, i32* %r2.global-to-local, align 4
  %v1_13f84 = add i32 %v0_13f80, 12
  %v2_13f84 = inttoptr i32 %v1_13f84 to i8*
  %v3_13f84 = load i8, i8* %v2_13f84, align 1
  %v4_13f84 = zext i8 %v3_13f84 to i32
  %v4_13f88 = mul nuw nsw i32 %v4_13f80, 256
  %v5_13f88 = or i32 %v4_13f84, %v4_13f88
  store i32 %v5_13f88, i32* %r3.global-to-local, align 4
  %v1_13f8c = load i32, i32* %r6.global-to-local, align 4
  %v2_13f8c = add i32 %v1_13f8c, 24
  %v3_13f8c = inttoptr i32 %v2_13f8c to i32*
  store i32 %v5_13f88, i32* %v3_13f8c, align 4
  %v0_13f90 = load i32, i32* %r5.global-to-local, align 4
  %v1_13f90 = add i32 %v0_13f90, 20
  %v2_13f90 = inttoptr i32 %v1_13f90 to i32*
  %v3_13f90 = load i32, i32* %v2_13f90, align 4
  store i32 %v3_13f90, i32* %r3.global-to-local, align 4
  %v1_13f94 = add i32 %v0_13f90, 14
  %v2_13f94 = inttoptr i32 %v1_13f94 to i8*
  %v3_13f94 = load i8, i8* %v2_13f94, align 1
  %v4_13f94 = zext i8 %v3_13f94 to i32
  store i32 %v4_13f94, i32* %r0.global-to-local, align 4
  %v1_13f98 = add i32 %v0_13f90, 15
  %v2_13f98 = inttoptr i32 %v1_13f98 to i8*
  %v3_13f98 = load i8, i8* %v2_13f98, align 1
  %v4_13f98 = zext i8 %v3_13f98 to i32
  store i32 %v4_13f98, i32* %ip.global-to-local, align 4
  %v1_13f9c = add i32 %v0_13f90, 16
  %v2_13f9c = inttoptr i32 %v1_13f9c to i32*
  %v3_13f9c = load i32, i32* %v2_13f9c, align 4
  store i32 %v3_13f9c, i32* %r1.global-to-local, align 4
  %v1_13fa0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fa0 = add i32 %v1_13fa0, 44
  %v3_13fa0 = inttoptr i32 %v2_13fa0 to i32*
  store i32 %v3_13f90, i32* %v3_13fa0, align 4
  %v0_13fa4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fa4 = add i32 %v0_13fa4, 24
  %v2_13fa4 = inttoptr i32 %v1_13fa4 to i32*
  %v3_13fa4 = load i32, i32* %v2_13fa4, align 4
  store i32 %v3_13fa4, i32* %r3.global-to-local, align 4
  %v1_13fa8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fa8 = add i32 %v1_13fa8, 48
  %v3_13fa8 = inttoptr i32 %v2_13fa8 to i32*
  store i32 %v3_13fa4, i32* %v3_13fa8, align 4
  %v0_13fac = load i32, i32* %r5.global-to-local, align 4
  %v1_13fac = add i32 %v0_13fac, 28
  %v2_13fac = inttoptr i32 %v1_13fac to i32*
  %v3_13fac = load i32, i32* %v2_13fac, align 4
  store i32 %v3_13fac, i32* %r3.global-to-local, align 4
  %v1_13fb0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fb0 = add i32 %v1_13fb0, 52
  %v3_13fb0 = inttoptr i32 %v2_13fb0 to i32*
  store i32 %v3_13fac, i32* %v3_13fb0, align 4
  %v0_13fb4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fb4 = add i32 %v0_13fb4, 32
  %v2_13fb4 = inttoptr i32 %v1_13fb4 to i32*
  %v3_13fb4 = load i32, i32* %v2_13fb4, align 4
  store i32 %v3_13fb4, i32* %r3.global-to-local, align 4
  %v1_13fb8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fb8 = add i32 %v1_13fb8, 56
  %v3_13fb8 = inttoptr i32 %v2_13fb8 to i32*
  store i32 %v3_13fb4, i32* %v3_13fb8, align 4
  %v0_13fbc = load i32, i32* %r5.global-to-local, align 4
  %v1_13fbc = add i32 %v0_13fbc, 40
  %v2_13fbc = inttoptr i32 %v1_13fbc to i32*
  %v3_13fbc = load i32, i32* %v2_13fbc, align 4
  store i32 %v3_13fbc, i32* %r3.global-to-local, align 4
  %v1_13fc0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fc0 = add i32 %v1_13fc0, 64
  %v3_13fc0 = inttoptr i32 %v2_13fc0 to i32*
  store i32 %v3_13fbc, i32* %v3_13fc0, align 4
  %v0_13fc4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fc4 = add i32 %v0_13fc4, 48
  %v2_13fc4 = inttoptr i32 %v1_13fc4 to i32*
  %v3_13fc4 = load i32, i32* %v2_13fc4, align 4
  store i32 %v3_13fc4, i32* %r3.global-to-local, align 4
  %v1_13fc8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fc8 = add i32 %v1_13fc8, 72
  %v3_13fc8 = inttoptr i32 %v2_13fc8 to i32*
  store i32 %v3_13fc4, i32* %v3_13fc8, align 4
  %v0_13fcc = load i32, i32* %r5.global-to-local, align 4
  %v1_13fcc = add i32 %v0_13fcc, 36
  %v2_13fcc = inttoptr i32 %v1_13fcc to i32*
  %v3_13fcc = load i32, i32* %v2_13fcc, align 4
  store i32 %v3_13fcc, i32* %r3.global-to-local, align 4
  %v1_13fd0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fd0 = add i32 %v1_13fd0, 60
  %v3_13fd0 = inttoptr i32 %v2_13fd0 to i32*
  store i32 %v3_13fcc, i32* %v3_13fd0, align 4
  %v0_13fd4 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fd4 = add i32 %v0_13fd4, 44
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i32*
  %v3_13fd4 = load i32, i32* %v2_13fd4, align 4
  store i32 %v3_13fd4, i32* %r3.global-to-local, align 4
  %v0_13fd8 = load i32, i32* %r0.global-to-local, align 4
  %v1_13fd8 = load i32, i32* %ip.global-to-local, align 4
  %v4_13fd8 = mul i32 %v1_13fd8, 256
  %v5_13fd8 = or i32 %v4_13fd8, %v0_13fd8
  store i32 %v5_13fd8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_13fe0 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fe0 = add i32 %v1_13fe0, 28
  %v3_13fe0 = inttoptr i32 %v2_13fe0 to i32*
  store i32 %v5_13fd8, i32* %v3_13fe0, align 4
  %v0_13fe4 = load i32, i32* %r1.global-to-local, align 4
  %v1_13fe4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fe4 = add i32 %v1_13fe4, 32
  %v3_13fe4 = inttoptr i32 %v2_13fe4 to i32*
  store i32 %v0_13fe4, i32* %v3_13fe4, align 4
  %v0_13fe8 = load i32, i32* %r2.global-to-local, align 4
  %v1_13fe8 = load i32, i32* %r6.global-to-local, align 4
  %v2_13fe8 = add i32 %v1_13fe8, 36
  %v3_13fe8 = inttoptr i32 %v2_13fe8 to i32*
  store i32 %v0_13fe8, i32* %v3_13fe8, align 4
  %v0_13fec = load i32, i32* %r3.global-to-local, align 4
  %v1_13fec = load i32, i32* %r6.global-to-local, align 4
  %v2_13fec = add i32 %v1_13fec, 68
  %v3_13fec = inttoptr i32 %v2_13fec to i32*
  store i32 %v0_13fec, i32* %v3_13fec, align 4
  %v0_13ff0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ff0 = add i32 %v0_13ff0, 52
  %v2_13ff0 = inttoptr i32 %v1_13ff0 to i32*
  %v3_13ff0 = load i32, i32* %v2_13ff0, align 4
  store i32 %v3_13ff0, i32* %r3.global-to-local, align 4
  %v1_13ff4 = load i32, i32* %r6.global-to-local, align 4
  %v2_13ff4 = add i32 %v1_13ff4, 76
  %v3_13ff4 = inttoptr i32 %v2_13ff4 to i32*
  store i32 %v3_13ff0, i32* %v3_13ff4, align 4
  %v2_13ff8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13ff8, i32* %r4.global-to-local, align 4
  ret i32 %v5_13fd8

; uselistorder directives
  uselistorder i32 %v0_13f90, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 10, 27, 28, 29, 3, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 42, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 30, 26, 25, 27, 3, 28, 4, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 24, 33, 34, 35, 36, 1, 37, 38, 39, 40, 2, 41 }
  uselistorder i32 14, { 11, 8, 23, 0, 9, 1, 7, 4, 10, 5, 12, 13, 6, 14, 15, 16, 17, 2, 18, 19, 20, 21, 3, 22 }
  uselistorder i32 13, { 13, 7, 6, 8, 9, 10, 11, 12, 0, 1, 14, 15, 16, 17, 18, 4, 19, 20, 21, 22, 23, 24, 25, 26, 5, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 2, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 3, 55, 56 }
  uselistorder i32 9, { 48, 49, 50, 7, 4, 51, 8, 5, 35, 27, 10, 34, 11, 30, 12, 31, 13, 32, 14, 33, 9, 2, 36, 28, 37, 38, 29, 15, 39, 16, 40, 17, 41, 42, 18, 43, 44, 19, 20, 21, 45, 22, 46, 23, 47, 0, 24, 1, 25, 65, 52, 53, 6, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 3, 64, 26 }
  uselistorder i32 (i8*, i32)* @function_123e0, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14000() local_unnamed_addr {
dec_label_pc_14000:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14000 = load i32, i32* @r1, align 4
  %v1_14000 = load i32, i32* @r0, align 4
  %v2_14000 = sub i32 %v0_14000, %v1_14000
  %v3_14000 = icmp ult i32 %v0_14000, %v1_14000
  %v4_14000 = xor i32 %v1_14000, %v0_14000
  %v5_14000 = xor i32 %v2_14000, %v0_14000
  %v6_14000 = and i32 %v5_14000, %v4_14000
  %v7_14000 = icmp slt i32 %v6_14000, 0
  store i1 %v7_14000, i1* %cpsr_v.global-to-local, align 1
  %v8_14000 = icmp slt i32 %v2_14000, 0
  store i1 %v8_14000, i1* %cpsr_n.global-to-local, align 1
  %v9_14000 = icmp eq i32 %v0_14000, %v1_14000
  store i1 %v9_14000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14000, label %dec_label_pc_1424c, label %dec_label_pc_14008

dec_label_pc_14008:                               ; preds = %dec_label_pc_14000
  br i1 %v9_14000, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14008
  %merge = phi i32 [ %v0_14000, %dec_label_pc_14008 ], [ %v2_142e0, %bb141 ], [ %v11_142fc, %bb144 ], [ %v7_142fc, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14008
  store i32 %v1_14000, i32* %stack_var_-8, align 4
  %v0_14010 = load i32, i32* @r2, align 4
  %v2_14010 = add i32 %v0_14010, -4
  store i32 %v2_14010, i32* %r2.global-to-local, align 4
  %v4_14010 = sub i32 3, %v0_14010
  %v5_14010 = and i32 %v4_14010, %v0_14010
  %v6_14010 = icmp slt i32 %v5_14010, 0
  store i1 %v6_14010, i1* %cpsr_v.global-to-local, align 1
  %v7_14010 = icmp slt i32 %v2_14010, 0
  store i1 %v7_14010, i1* %cpsr_n.global-to-local, align 1
  %v8_14010 = icmp eq i32 %v0_14010, 4
  store i1 %v8_14010, i1* %cpsr_z.global-to-local, align 1
  %v5_14014 = icmp slt i32 %v0_14010, 4
  br i1 %v5_14014, label %bb131, label %dec_label_pc_14018

dec_label_pc_14018:                               ; preds = %bb
  %v1_14018 = urem i32 %v1_14000, 4
  store i32 %v1_14018, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14018 = icmp eq i32 %v1_14018, 0
  store i1 %v2_14018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14018, label %dec_label_pc_14020, label %dec_label_pc_140c4

dec_label_pc_14020:                               ; preds = %dec_label_pc_14018
  %v1_14020 = urem i32 %v0_14000, 4
  store i32 %v1_14020, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14020 = icmp eq i32 %v1_14020, 0
  store i1 %v2_14020, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14000 to i2
  br i1 %v2_14020, label %dec_label_pc_14028, label %dec_label_pc_140f4

dec_label_pc_14028:                               ; preds = %dec_label_pc_14020, %dec_label_pc_140ec
  %v0_1404092 = phi i32 [ %v1_14000, %dec_label_pc_14020 ], [ %v0_1413c75, %dec_label_pc_140ec ]
  %v0_1403c91 = phi i32 [ %v0_14000, %dec_label_pc_14020 ], [ %v0_140ec, %dec_label_pc_140ec ]
  %v0_14028 = phi i32 [ %v2_14010, %dec_label_pc_14020 ], [ %v2_140e4, %dec_label_pc_140ec ]
  %v2_14028 = add i32 %v0_14028, -8
  store i32 %v2_14028, i32* %r2.global-to-local, align 4
  %v4_14028 = sub i32 7, %v0_14028
  %v5_14028 = and i32 %v4_14028, %v0_14028
  %v6_14028 = icmp slt i32 %v5_14028, 0
  store i1 %v6_14028, i1* %cpsr_v.global-to-local, align 1
  %v7_14028 = icmp slt i32 %v2_14028, 0
  store i1 %v7_14028, i1* %cpsr_n.global-to-local, align 1
  %v8_14028 = icmp eq i32 %v0_14028, 8
  store i1 %v8_14028, i1* %cpsr_z.global-to-local, align 1
  %v5_1402c = icmp slt i32 %v0_14028, 8
  br i1 %v5_1402c, label %dec_label_pc_1407c, label %dec_label_pc_14030

dec_label_pc_14030:                               ; preds = %dec_label_pc_14028
  %v2_14030 = add i32 %v0_14028, -28
  store i32 %v2_14030, i32* %r2.global-to-local, align 4
  %v4_14030 = sub i32 27, %v0_14028
  %v5_14030 = and i32 %v4_14030, %v2_14028
  %v6_14030 = icmp slt i32 %v5_14030, 0
  store i1 %v6_14030, i1* %cpsr_v.global-to-local, align 1
  %v7_14030 = icmp slt i32 %v2_14030, 0
  store i1 %v7_14030, i1* %cpsr_n.global-to-local, align 1
  %v8_14030 = icmp eq i32 %v2_14028, 20
  store i1 %v8_14030, i1* %cpsr_z.global-to-local, align 1
  %v5_14034 = icmp slt i32 %v2_14028, 20
  br i1 %v5_14034, label %dec_label_pc_14068, label %dec_label_pc_14038

dec_label_pc_14038:                               ; preds = %dec_label_pc_14030
  %v0_14038 = load i32, i32* @r4, align 4
  store i32 %v0_14038, i32* %stack_var_-12, align 4
  br label %dec_label_pc_1403c

dec_label_pc_1403c:                               ; preds = %dec_label_pc_1403c.dec_label_pc_1403c_crit_edge, %dec_label_pc_14038
  %v0_14040 = phi i32 [ %v12_14048, %dec_label_pc_1403c.dec_label_pc_1403c_crit_edge ], [ %v0_1404092, %dec_label_pc_14038 ]
  %v0_1403c = phi i32 [ %v0_1403c.pre, %dec_label_pc_1403c.dec_label_pc_1403c_crit_edge ], [ %v0_1403c91, %dec_label_pc_14038 ]
  %v1_1403c = inttoptr i32 %v0_1403c to i32*
  %v2_1403c = load i32, i32* %v1_1403c, align 4
  store i32 %v2_1403c, i32* %r3.global-to-local, align 4
  %v3_1403c = add i32 %v0_1403c, 4
  %v4_1403c = inttoptr i32 %v3_1403c to i32*
  %v5_1403c = load i32, i32* %v4_1403c, align 4
  store i32 %v5_1403c, i32* %r4.global-to-local, align 4
  %v6_1403c = add i32 %v0_1403c, 8
  %v7_1403c = inttoptr i32 %v6_1403c to i32*
  %v8_1403c = load i32, i32* %v7_1403c, align 4
  store i32 %v8_1403c, i32* %ip.global-to-local, align 4
  %v9_1403c = add i32 %v0_1403c, 12
  %v10_1403c = inttoptr i32 %v9_1403c to i32*
  %v11_1403c = load i32, i32* %v10_1403c, align 4
  store i32 %v11_1403c, i32* %lr.global-to-local, align 4
  %v12_1403c = add i32 %v0_1403c, 16
  store i32 %v12_1403c, i32* %r1.global-to-local, align 4
  %v1_14040 = inttoptr i32 %v0_14040 to i32*
  store i32 %v2_1403c, i32* %v1_14040, align 4
  %v3_14040 = add i32 %v0_14040, 4
  %v4_14040 = inttoptr i32 %v3_14040 to i32*
  %v5_14040 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14040, i32* %v4_14040, align 4
  %v6_14040 = add i32 %v0_14040, 8
  %v7_14040 = inttoptr i32 %v6_14040 to i32*
  %v8_14040 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_14040, i32* %v7_14040, align 4
  %v9_14040 = add i32 %v0_14040, 12
  %v10_14040 = inttoptr i32 %v9_14040 to i32*
  %v11_14040 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_14040, i32* %v10_14040, align 4
  %v12_14040 = add i32 %v0_14040, 16
  store i32 %v12_14040, i32* %r0.global-to-local, align 4
  %v0_14044 = load i32, i32* %r1.global-to-local, align 4
  %v1_14044 = inttoptr i32 %v0_14044 to i32*
  %v2_14044 = load i32, i32* %v1_14044, align 4
  store i32 %v2_14044, i32* %r3.global-to-local, align 4
  %v3_14044 = add i32 %v0_14044, 4
  %v4_14044 = inttoptr i32 %v3_14044 to i32*
  %v5_14044 = load i32, i32* %v4_14044, align 4
  store i32 %v5_14044, i32* %r4.global-to-local, align 4
  %v6_14044 = add i32 %v0_14044, 8
  %v7_14044 = inttoptr i32 %v6_14044 to i32*
  %v8_14044 = load i32, i32* %v7_14044, align 4
  store i32 %v8_14044, i32* @ip, align 4
  %v9_14044 = add i32 %v0_14044, 12
  %v10_14044 = inttoptr i32 %v9_14044 to i32*
  %v11_14044 = load i32, i32* %v10_14044, align 4
  store i32 %v11_14044, i32* @lr, align 4
  %v12_14044 = add i32 %v0_14044, 16
  store i32 %v12_14044, i32* @r1, align 4
  %v1_14048 = inttoptr i32 %v12_14040 to i32*
  store i32 %v2_14044, i32* %v1_14048, align 4
  %v3_14048 = add i32 %v0_14040, 20
  %v4_14048 = inttoptr i32 %v3_14048 to i32*
  %v5_14048 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14048, i32* %v4_14048, align 4
  %v6_14048 = add i32 %v0_14040, 24
  %v7_14048 = inttoptr i32 %v6_14048 to i32*
  %v8_14048 = load i32, i32* @ip, align 4
  store i32 %v8_14048, i32* %v7_14048, align 4
  %v9_14048 = add i32 %v0_14040, 28
  %v10_14048 = inttoptr i32 %v9_14048 to i32*
  %v11_14048 = load i32, i32* @lr, align 4
  store i32 %v11_14048, i32* %v10_14048, align 4
  %v12_14048 = add i32 %v0_14040, 32
  store i32 %v12_14048, i32* @r0, align 4
  %v0_1404c = load i32, i32* %r2.global-to-local, align 4
  %v2_1404c = add i32 %v0_1404c, -32
  store i32 %v2_1404c, i32* %r2.global-to-local, align 4
  %v6_14050 = icmp slt i32 %v0_1404c, 32
  br i1 %v6_14050, label %dec_label_pc_14054, label %dec_label_pc_1403c.dec_label_pc_1403c_crit_edge

dec_label_pc_1403c.dec_label_pc_1403c_crit_edge:  ; preds = %dec_label_pc_1403c
  %v0_1403c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_1403c

dec_label_pc_14054:                               ; preds = %dec_label_pc_1403c
  %v4_14054 = add i32 %v0_1404c, -16
  %v6_14054 = add i32 %v0_1404c, 2147483616
  %v7_14054 = and i32 %v4_14054, %v6_14054
  %v8_14054 = icmp slt i32 %v7_14054, 0
  store i1 %v8_14054, i1* %cpsr_v.global-to-local, align 1
  %v9_14054 = icmp slt i32 %v4_14054, 0
  store i1 %v9_14054, i1* %cpsr_n.global-to-local, align 1
  %v10_14054 = icmp eq i32 %v4_14054, 0
  store i1 %v10_14054, i1* %cpsr_z.global-to-local, align 1
  %v5_14058 = icmp slt i32 %v2_1404c, -16
  br i1 %v5_14058, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_14054
  %v6_14058 = load i32, i32* @r1, align 4
  %v7_14058 = inttoptr i32 %v6_14058 to i32*
  %v8_14058 = load i32, i32* %v7_14058, align 4
  store i32 %v8_14058, i32* %r3.global-to-local, align 4
  %v9_14058 = add i32 %v6_14058, 4
  %v10_14058 = inttoptr i32 %v9_14058 to i32*
  %v11_14058 = load i32, i32* %v10_14058, align 4
  store i32 %v11_14058, i32* %r4.global-to-local, align 4
  %v12_14058 = add i32 %v6_14058, 8
  %v13_14058 = inttoptr i32 %v12_14058 to i32*
  %v14_14058 = load i32, i32* %v13_14058, align 4
  store i32 %v14_14058, i32* @ip, align 4
  %v15_14058 = add i32 %v6_14058, 12
  %v16_14058 = inttoptr i32 %v15_14058 to i32*
  %v17_14058 = load i32, i32* %v16_14058, align 4
  store i32 %v17_14058, i32* @lr, align 4
  %v18_14058 = add i32 %v6_14058, 16
  store i32 %v18_14058, i32* @r1, align 4
  %v7_1405c = inttoptr i32 %v12_14048 to i32*
  store i32 %v8_14058, i32* %v7_1405c, align 4
  %v9_1405c = add i32 %v0_14040, 36
  %v10_1405c = inttoptr i32 %v9_1405c to i32*
  %v11_1405c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_1405c, i32* %v10_1405c, align 4
  %v12_1405c = add i32 %v0_14040, 40
  %v13_1405c = inttoptr i32 %v12_1405c to i32*
  %v14_1405c = load i32, i32* @ip, align 4
  store i32 %v14_1405c, i32* %v13_1405c, align 4
  %v15_1405c = add i32 %v0_14040, 44
  %v16_1405c = inttoptr i32 %v15_1405c to i32*
  %v17_1405c = load i32, i32* @lr, align 4
  store i32 %v17_1405c, i32* %v16_1405c, align 4
  %v18_1405c = add i32 %v0_14040, 48
  store i32 %v18_1405c, i32* @r0, align 4
  %v6_14060 = load i32, i32* %r2.global-to-local, align 4
  %v7_14060 = add i32 %v6_14060, -16
  store i32 %v7_14060, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_14054, %bb128
  %v3_14070101 = phi i32 [ %v12_14048, %dec_label_pc_14054 ], [ %v18_1405c, %bb128 ]
  %v0_1406895 = phi i32 [ %v2_1404c, %dec_label_pc_14054 ], [ %v7_14060, %bb128 ]
  %v2_14064 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14064, i32* @r4, align 4
  br label %dec_label_pc_14068

dec_label_pc_14068:                               ; preds = %dec_label_pc_14030, %.thread1
  %v3_14070100 = phi i32 [ %v0_1404092, %dec_label_pc_14030 ], [ %v3_14070101, %.thread1 ]
  %v0_14068 = phi i32 [ %v2_14030, %dec_label_pc_14030 ], [ %v0_1406895, %.thread1 ]
  %v1_14068 = add i32 %v0_14068, 20
  store i32 %v1_14068, i32* %r2.global-to-local, align 4
  %v3_14068 = sub i32 0, %v0_14068
  %v4_14068 = and i32 %v1_14068, %v3_14068
  %v5_14068 = icmp slt i32 %v4_14068, 0
  store i1 %v5_14068, i1* %cpsr_v.global-to-local, align 1
  %v6_14068 = icmp slt i32 %v1_14068, 0
  store i1 %v6_14068, i1* %cpsr_n.global-to-local, align 1
  %v7_14068 = icmp eq i32 %v1_14068, 0
  store i1 %v7_14068, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1406c

dec_label_pc_1406c:                               ; preds = %.thread117, %dec_label_pc_14068
  %v0_1407c.pre147 = phi i32 [ %v0_1407c.pre, %.thread117 ], [ %v1_14068, %dec_label_pc_14068 ]
  %v3_14070 = phi i32 [ %v3_1407098118, %.thread117 ], [ %v3_14070100, %dec_label_pc_14068 ]
  %v1_14074 = phi i1 [ %v1_14078, %.thread117 ], [ %v5_14068, %dec_label_pc_14068 ]
  %v0_14074 = phi i1 [ %v0_14078, %.thread117 ], [ %v6_14068, %dec_label_pc_14068 ]
  %v2_1406c = xor i1 %v1_14074, %v0_14074
  br i1 %v2_1406c, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_1406c
  %v3_1406c = load i32, i32* @r1, align 4
  %v4_1406c = inttoptr i32 %v3_1406c to i32*
  %v5_1406c = load i32, i32* %v4_1406c, align 4
  store i32 %v5_1406c, i32* %r3.global-to-local, align 4
  %v6_1406c = add i32 %v3_1406c, 4
  %v7_1406c = inttoptr i32 %v6_1406c to i32*
  %v8_1406c = load i32, i32* %v7_1406c, align 4
  store i32 %v8_1406c, i32* @ip, align 4
  %v9_1406c = add i32 %v3_1406c, 8
  %v10_1406c = inttoptr i32 %v9_1406c to i32*
  %v11_1406c = load i32, i32* %v10_1406c, align 4
  store i32 %v11_1406c, i32* @lr, align 4
  %v12_1406c = add i32 %v3_1406c, 12
  store i32 %v12_1406c, i32* @r1, align 4
  %v4_14070 = inttoptr i32 %v3_14070 to i32*
  store i32 %v5_1406c, i32* %v4_14070, align 4
  %v6_14070 = add i32 %v3_14070, 4
  %v7_14070 = inttoptr i32 %v6_14070 to i32*
  %v8_14070 = load i32, i32* @ip, align 4
  store i32 %v8_14070, i32* %v7_14070, align 4
  %v9_14070 = add i32 %v3_14070, 8
  %v10_14070 = inttoptr i32 %v9_14070 to i32*
  %v11_14070 = load i32, i32* @lr, align 4
  store i32 %v11_14070, i32* %v10_14070, align 4
  %v12_14070 = add i32 %v3_14070, 12
  store i32 %v12_14070, i32* @r0, align 4
  %v3_14074 = load i32, i32* %r2.global-to-local, align 4
  %v4_14074 = add i32 %v3_14074, -12
  store i32 %v4_14074, i32* %r2.global-to-local, align 4
  %v6_14074 = sub i32 11, %v3_14074
  %v7_14074 = and i32 %v6_14074, %v3_14074
  %v8_14074 = icmp slt i32 %v7_14074, 0
  store i1 %v8_14074, i1* %cpsr_v.global-to-local, align 1
  %v9_14074 = icmp slt i32 %v4_14074, 0
  store i1 %v9_14074, i1* %cpsr_n.global-to-local, align 1
  %v10_14074 = icmp eq i32 %v3_14074, 12
  store i1 %v10_14074, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_1406c, %bb129
  %v0_1407c.pre = phi i32 [ %v4_14074, %bb129 ], [ %v0_1407c.pre147, %dec_label_pc_1406c ]
  %v3_1407098118 = phi i32 [ %v12_14070, %bb129 ], [ %v3_14070, %dec_label_pc_1406c ]
  %v1_14078 = phi i1 [ %v8_14074, %bb129 ], [ %v1_14074, %dec_label_pc_1406c ]
  %v0_14078 = phi i1 [ %v9_14074, %bb129 ], [ %v0_14074, %dec_label_pc_1406c ]
  %v2_14078 = xor i1 %v1_14078, %v0_14078
  br i1 %v2_14078, label %dec_label_pc_1407c, label %dec_label_pc_1406c

dec_label_pc_1407c:                               ; preds = %.thread117, %dec_label_pc_14028
  %v7_1408c = phi i32 [ %v0_1404092, %dec_label_pc_14028 ], [ %v3_1407098118, %.thread117 ]
  %v0_1407c = phi i32 [ %v2_14028, %dec_label_pc_14028 ], [ %v0_1407c.pre, %.thread117 ]
  %v2_1407c = add i32 %v0_1407c, 8
  store i32 %v2_1407c, i32* %r2.global-to-local, align 4
  %v4_1407c = sub i32 0, %v0_1407c
  %v5_1407c = and i32 %v2_1407c, %v4_1407c
  %v6_1407c = icmp slt i32 %v5_1407c, 0
  store i1 %v6_1407c, i1* %cpsr_v.global-to-local, align 1
  %v7_1407c = icmp slt i32 %v2_1407c, 0
  store i1 %v7_1407c, i1* %cpsr_n.global-to-local, align 1
  %v8_1407c = icmp eq i32 %v2_1407c, 0
  store i1 %v8_1407c, i1* %cpsr_z.global-to-local, align 1
  %v5_14080 = icmp slt i32 %v0_1407c, -8
  br i1 %v5_14080, label %bb131, label %dec_label_pc_14084

dec_label_pc_14084:                               ; preds = %dec_label_pc_1407c
  %v6_14084 = add i32 %v0_1407c, 4
  store i32 %v6_14084, i32* %r2.global-to-local, align 4
  %v8_14084 = sub i32 -5, %v0_1407c
  %v9_14084 = and i32 %v8_14084, %v2_1407c
  %v10_14084 = icmp slt i32 %v9_14084, 0
  store i1 %v10_14084, i1* %cpsr_v.global-to-local, align 1
  %v11_14084 = icmp slt i32 %v6_14084, 0
  store i1 %v11_14084, i1* %cpsr_n.global-to-local, align 1
  %v12_14084 = icmp eq i32 %v2_1407c, 4
  store i1 %v12_14084, i1* %cpsr_z.global-to-local, align 1
  %v5_14088 = icmp slt i32 %v2_1407c, 4
  %v6_14088 = load i32, i32* @r1, align 4
  %v7_14088 = inttoptr i32 %v6_14088 to i32*
  %v8_14088 = load i32, i32* %v7_14088, align 4
  store i32 %v8_14088, i32* %r3.global-to-local, align 4
  %v10_14088 = add i32 %v6_14088, 4
  br i1 %v5_14088, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_14084
  store i32 %v10_14088, i32* @r1, align 4
  %v8_1408c = inttoptr i32 %v7_1408c to i32*
  store i32 %v8_14088, i32* %v8_1408c, align 4
  %v9_1408c = load i32, i32* @r0, align 4
  %v10_1408c = add i32 %v9_1408c, 4
  store i32 %v10_1408c, i32* @r0, align 4
  %v0_1409c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_14084
  %v10_14090 = inttoptr i32 %v10_14088 to i32*
  %v11_14090 = load i32, i32* %v10_14090, align 4
  store i32 %v11_14090, i32* @ip, align 4
  %v12_14090 = add i32 %v6_14088, 8
  store i32 %v12_14090, i32* @r1, align 4
  %v7_14094 = inttoptr i32 %v7_1408c to i32*
  store i32 %v8_14088, i32* %v7_14094, align 4
  %v9_14094 = add i32 %v7_1408c, 4
  %v10_14094 = inttoptr i32 %v9_14094 to i32*
  %v11_14094 = load i32, i32* @ip, align 4
  store i32 %v11_14094, i32* %v10_14094, align 4
  %v12_14094 = add i32 %v7_1408c, 8
  store i32 %v12_14094, i32* @r0, align 4
  %v6_14098 = load i32, i32* %r2.global-to-local, align 4
  %v7_14098 = add i32 %v6_14098, -4
  store i32 %v7_14098, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_1407c, %bb, %dec_label_pc_14244, %dec_label_pc_141d8, %dec_label_pc_1416c, %bb130
  %v2_140ac = phi i32 [ %v10_1408c, %.thread5 ], [ %v0_1413c75, %.thread11 ], [ %v7_1408c, %dec_label_pc_1407c ], [ %v1_14000, %bb ], [ %v2_140ac113, %dec_label_pc_14244 ], [ %v2_140ac112, %dec_label_pc_141d8 ], [ %v2_140ac111, %dec_label_pc_1416c ], [ %v12_14094, %bb130 ]
  %v0_1409c = phi i32 [ %v0_1409c.pre, %.thread5 ], [ %v2_140e4, %.thread11 ], [ %v2_1407c, %dec_label_pc_1407c ], [ %v2_14010, %bb ], [ %v0_1409c109, %dec_label_pc_14244 ], [ %v0_1409c108, %dec_label_pc_141d8 ], [ %v0_1409c107, %dec_label_pc_1416c ], [ %v7_14098, %bb130 ]
  %v1_1409c = add i32 %v0_1409c, 4
  store i32 %v1_1409c, i32* %r2.global-to-local, align 4
  %v3_1409c = sub i32 0, %v0_1409c
  %v4_1409c = and i32 %v1_1409c, %v3_1409c
  %v5_1409c = icmp slt i32 %v4_1409c, 0
  store i1 %v5_1409c, i1* %cpsr_v.global-to-local, align 1
  %v6_1409c = icmp slt i32 %v1_1409c, 0
  store i1 %v6_1409c, i1* %cpsr_n.global-to-local, align 1
  %v7_1409c = icmp eq i32 %v1_1409c, 0
  store i1 %v7_1409c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1409c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_140a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_140a0, i32* %r0.global-to-local, align 4
  ret i32 %v3_140a0

bb133:                                            ; preds = %bb131
  %v1_140a4 = add i32 %v0_1409c, 2
  %v3_140a4 = sub i32 -3, %v0_1409c
  %v4_140a4 = and i32 %v3_140a4, %v1_1409c
  %v5_140a4 = icmp slt i32 %v4_140a4, 0
  store i1 %v5_140a4, i1* %cpsr_v.global-to-local, align 1
  %v6_140a4 = icmp slt i32 %v1_140a4, 0
  store i1 %v6_140a4, i1* %cpsr_n.global-to-local, align 1
  %v7_140a4 = icmp eq i32 %v1_1409c, 2
  store i1 %v7_140a4, i1* %cpsr_z.global-to-local, align 1
  %v0_140a8 = load i32, i32* @r1, align 4
  %v1_140a8 = inttoptr i32 %v0_140a8 to i8*
  %v2_140a8 = load i8, i8* %v1_140a8, align 1
  %v3_140a8 = zext i8 %v2_140a8 to i32
  store i32 %v3_140a8, i32* %r3.global-to-local, align 4
  %v5_140a8 = add i32 %v0_140a8, 1
  store i32 %v5_140a8, i32* %r1.global-to-local, align 4
  %v3_140ac = inttoptr i32 %v2_140ac to i8*
  store i8 %v2_140a8, i8* %v3_140ac, align 1
  %v4_140ac = load i32, i32* @r0, align 4
  %v5_140ac = add i32 %v4_140ac, 1
  store i32 %v5_140ac, i32* %r0.global-to-local, align 4
  %v0_140b0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_140b0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_140b0 = xor i1 %v0_140b0, %v1_140b0
  br i1 %v2_140b0, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_140b0 = load i32, i32* %r1.global-to-local, align 4
  %v4_140b0 = inttoptr i32 %v3_140b0 to i8*
  %v5_140b0 = load i8, i8* %v4_140b0, align 1
  %v6_140b0 = zext i8 %v5_140b0 to i32
  store i32 %v6_140b0, i32* %r3.global-to-local, align 4
  %v8_140b0 = add i32 %v3_140b0, 1
  store i32 %v8_140b0, i32* %r1.global-to-local, align 4
  %v6_140b4 = inttoptr i32 %v5_140ac to i8*
  store i8 %v5_140b0, i8* %v6_140b4, align 1
  %v7_140b4 = load i32, i32* %r0.global-to-local, align 4
  %v8_140b4 = add i32 %v7_140b4, 1
  store i32 %v8_140b4, i32* %r0.global-to-local, align 4
  %v1_140b8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_140b8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_140bc = phi i32 [ %v8_140b4, %bb134 ], [ %v5_140ac, %bb133 ]
  %v2_140bc = phi i1 [ %v2_140b8.pre, %bb134 ], [ %v1_140b0, %bb133 ]
  %v1_140bc = phi i1 [ %v1_140b8.pre, %bb134 ], [ %v0_140b0, %bb133 ]
  %v0_140b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_140b8 = xor i1 %v2_140bc, %v1_140bc
  %v4_140b8 = or i1 %v0_140b8, %v3_140b8
  br i1 %v4_140b8, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_140b8 = load i32, i32* %r1.global-to-local, align 4
  %v6_140b8 = inttoptr i32 %v5_140b8 to i8*
  %v7_140b8 = load i8, i8* %v6_140b8, align 1
  %v8_140b8 = zext i8 %v7_140b8 to i32
  store i32 %v8_140b8, i32* %r3.global-to-local, align 4
  %v10_140b8 = add i32 %v5_140b8, 1
  store i32 %v10_140b8, i32* %r1.global-to-local, align 4
  %v8_140bc = inttoptr i32 %v7_140bc to i8*
  store i8 %v7_140b8, i8* %v8_140bc, align 1
  %v9_140bc = load i32, i32* %r0.global-to-local, align 4
  %v10_140bc = add i32 %v9_140bc, 1
  store i32 %v10_140bc, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_140c0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_140c0, i32* %r0.global-to-local, align 4
  ret i32 %v2_140c0

dec_label_pc_140c4:                               ; preds = %dec_label_pc_14018
  %v1_140c4 = sub nsw i32 4, %v1_14018
  store i32 %v1_140c4, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_140c8 = icmp ult i32 %v1_140c4, 2
  store i1 %v8_140c8, i1* %cpsr_n.global-to-local, align 1
  %v9_140c8 = icmp eq i32 %v1_140c4, 2
  store i1 %v9_140c8, i1* %cpsr_z.global-to-local, align 1
  %v1_140cc = inttoptr i32 %v0_14000 to i8*
  %v2_140cc = load i8, i8* %v1_140cc, align 1
  %v3_140cc = zext i8 %v2_140cc to i32
  store i32 %v3_140cc, i32* %r3.global-to-local, align 4
  %v5_140cc = add i32 %v0_14000, 1
  store i32 %v5_140cc, i32* @r1, align 4
  %v3_140d0 = inttoptr i32 %v1_14000 to i8*
  store i8 %v2_140cc, i8* %v3_140d0, align 1
  %v4_140d0 = load i32, i32* @r0, align 4
  %v5_140d0 = add i32 %v4_140d0, 1
  store i32 %v5_140d0, i32* @r0, align 4
  br i1 %v8_140c8, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_140c4
  %v6_140d4 = load i32, i32* @r1, align 4
  %v7_140d4 = inttoptr i32 %v6_140d4 to i8*
  %v8_140d4 = load i8, i8* %v7_140d4, align 1
  %v9_140d4 = zext i8 %v8_140d4 to i32
  store i32 %v9_140d4, i32* %r3.global-to-local, align 4
  %v11_140d4 = add i32 %v6_140d4, 1
  store i32 %v11_140d4, i32* @r1, align 4
  %v9_140d8 = inttoptr i32 %v5_140d0 to i8*
  store i8 %v8_140d4, i8* %v9_140d8, align 1
  %v10_140d8 = load i32, i32* @r0, align 4
  %v11_140d8 = add i32 %v10_140d8, 1
  store i32 %v11_140d8, i32* @r0, align 4
  br i1 %v9_140c8, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_140dc = load i32, i32* @r1, align 4
  %v9_140dc = inttoptr i32 %v8_140dc to i8*
  %v10_140dc = load i8, i8* %v9_140dc, align 1
  %v11_140dc = zext i8 %v10_140dc to i32
  store i32 %v11_140dc, i32* %r3.global-to-local, align 4
  %v13_140dc = add i32 %v8_140dc, 1
  store i32 %v13_140dc, i32* @r1, align 4
  %v11_140e0 = inttoptr i32 %v11_140d8 to i8*
  store i8 %v10_140dc, i8* %v11_140e0, align 1
  %v12_140e0 = load i32, i32* @r0, align 4
  %v13_140e0 = add i32 %v12_140e0, 1
  store i32 %v13_140e0, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_140c4, %bb137
  %v0_1413c75 = phi i32 [ %v11_140d8, %bb136 ], [ %v5_140d0, %dec_label_pc_140c4 ], [ %v13_140e0, %bb137 ]
  %v0_140e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_140e4 = load i32, i32* @ip, align 4
  %v2_140e4 = sub i32 %v0_140e4, %v1_140e4
  store i32 %v2_140e4, i32* %r2.global-to-local, align 4
  %v4_140e4 = xor i32 %v1_140e4, %v0_140e4
  %v5_140e4 = xor i32 %v2_140e4, %v0_140e4
  %v6_140e4 = and i32 %v5_140e4, %v4_140e4
  %v7_140e4 = icmp slt i32 %v6_140e4, 0
  store i1 %v7_140e4, i1* %cpsr_v.global-to-local, align 1
  %v8_140e4 = icmp slt i32 %v2_140e4, 0
  store i1 %v8_140e4, i1* %cpsr_n.global-to-local, align 1
  %v9_140e4 = icmp eq i32 %v0_140e4, %v1_140e4
  store i1 %v9_140e4, i1* %cpsr_z.global-to-local, align 1
  %v5_140e8 = icmp slt i32 %v0_140e4, %v1_140e4
  br i1 %v5_140e8, label %bb131, label %dec_label_pc_140ec

dec_label_pc_140ec:                               ; preds = %.thread11
  %v0_140ec = load i32, i32* @r1, align 4
  %v1_140ec = urem i32 %v0_140ec, 4
  store i32 %v1_140ec, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_140ec = icmp eq i32 %v1_140ec, 0
  store i1 %v2_140ec, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_140ec to i2
  br i1 %v2_140ec, label %dec_label_pc_14028, label %dec_label_pc_140f4

dec_label_pc_140f4:                               ; preds = %dec_label_pc_14020, %dec_label_pc_140ec
  %v0_1413c74 = phi i32 [ %v1_14000, %dec_label_pc_14020 ], [ %v0_1413c75, %dec_label_pc_140ec ]
  %v0_141e8 = phi i32 [ %v2_14010, %dec_label_pc_14020 ], [ %v2_140e4, %dec_label_pc_140ec ]
  %v0_140fc.off0 = phi i2 [ %extract.t, %dec_label_pc_14020 ], [ %extract.t123, %dec_label_pc_140ec ]
  %v0_140f4 = phi i32 [ %v0_14000, %dec_label_pc_14020 ], [ %v0_140ec, %dec_label_pc_140ec ]
  %v1_140f4 = and i32 %v0_140f4, -4
  store i32 %v1_140f4, i32* %r1.global-to-local, align 4
  %v1_140f8 = inttoptr i32 %v1_140f4 to i32*
  %v2_140f8 = load i32, i32* %v1_140f8, align 4
  store i32 %v2_140f8, i32* @lr, align 4
  %v4_140f8 = add i32 %v1_140f4, 4
  store i32 %v4_140f8, i32* %r1.global-to-local, align 4
  %v2_141e0 = add i32 %v0_141e8, -12
  %v4_141e0 = sub i32 11, %v0_141e8
  %v5_141e0 = and i32 %v4_141e0, %v0_141e8
  %v6_141e0 = icmp slt i32 %v5_141e0, 0
  store i1 %v6_141e0, i1* %cpsr_v.global-to-local, align 1
  %v7_141e0 = icmp slt i32 %v2_141e0, 0
  store i1 %v7_141e0, i1* %cpsr_n.global-to-local, align 1
  %v8_141e0 = icmp eq i32 %v0_141e8, 12
  store i1 %v8_141e0, i1* %cpsr_z.global-to-local, align 1
  %v5_141e4 = icmp slt i32 %v0_141e8, 12
  switch i2 %v0_140fc.off0, label %dec_label_pc_14108 [
    i2 -1, label %dec_label_pc_141e0
    i2 -2, label %dec_label_pc_14174
  ]

dec_label_pc_14108:                               ; preds = %dec_label_pc_140f4
  br i1 %v5_141e4, label %dec_label_pc_14154, label %dec_label_pc_14110

dec_label_pc_14110:                               ; preds = %dec_label_pc_14108
  store i32 %v2_141e0, i32* %r2.global-to-local, align 4
  %v3_14114 = load i32, i32* @r4, align 4
  store i32 %v3_14114, i32* %stack_var_-16, align 4
  %v6_14114 = load i32, i32* @r5, align 4
  store i32 %v6_14114, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14118

dec_label_pc_14118:                               ; preds = %dec_label_pc_14118.dec_label_pc_14118_crit_edge, %dec_label_pc_14110
  %v0_1413c = phi i32 [ %v12_1413c, %dec_label_pc_14118.dec_label_pc_14118_crit_edge ], [ %v0_1413c74, %dec_label_pc_14110 ]
  %v0_1411c = phi i32 [ %v0_1411c.pre, %dec_label_pc_14118.dec_label_pc_14118_crit_edge ], [ %v4_140f8, %dec_label_pc_14110 ]
  %v0_14118 = phi i32 [ %v0_14118.pre, %dec_label_pc_14118.dec_label_pc_14118_crit_edge ], [ %v2_140f8, %dec_label_pc_14110 ]
  %v3_14118 = udiv i32 %v0_14118, 256
  store i32 %v3_14118, i32* %r3.global-to-local, align 4
  %v1_1411c = inttoptr i32 %v0_1411c to i32*
  %v2_1411c = load i32, i32* %v1_1411c, align 4
  store i32 %v2_1411c, i32* %r4.global-to-local, align 4
  %v3_1411c = add i32 %v0_1411c, 4
  %v4_1411c = inttoptr i32 %v3_1411c to i32*
  %v5_1411c = load i32, i32* %v4_1411c, align 4
  store i32 %v5_1411c, i32* %r5.global-to-local, align 4
  %v6_1411c = add i32 %v0_1411c, 8
  %v7_1411c = inttoptr i32 %v6_1411c to i32*
  %v8_1411c = load i32, i32* %v7_1411c, align 4
  store i32 %v8_1411c, i32* %ip.global-to-local, align 4
  %v9_1411c = add i32 %v0_1411c, 12
  %v10_1411c = inttoptr i32 %v9_1411c to i32*
  %v11_1411c = load i32, i32* %v10_1411c, align 4
  store i32 %v11_1411c, i32* @lr, align 4
  %v12_1411c = add i32 %v0_1411c, 16
  store i32 %v12_1411c, i32* %r1.global-to-local, align 4
  %v4_14120 = mul i32 %v2_1411c, 16777216
  %v5_14120 = or i32 %v4_14120, %v3_14118
  store i32 %v5_14120, i32* %r3.global-to-local, align 4
  %v3_14124 = udiv i32 %v2_1411c, 256
  %v4_14128 = mul i32 %v5_1411c, 16777216
  %v5_14128 = or i32 %v4_14128, %v3_14124
  store i32 %v5_14128, i32* %r4.global-to-local, align 4
  %v3_1412c = udiv i32 %v5_1411c, 256
  %v4_14130 = mul i32 %v8_1411c, 16777216
  %v5_14130 = or i32 %v4_14130, %v3_1412c
  store i32 %v5_14130, i32* %r5.global-to-local, align 4
  %v3_14134 = udiv i32 %v8_1411c, 256
  %v4_14138 = mul i32 %v11_1411c, 16777216
  %v5_14138 = or i32 %v4_14138, %v3_14134
  store i32 %v5_14138, i32* @ip, align 4
  %v1_1413c = inttoptr i32 %v0_1413c to i32*
  store i32 %v5_14120, i32* %v1_1413c, align 4
  %v3_1413c = add i32 %v0_1413c, 4
  %v4_1413c = inttoptr i32 %v3_1413c to i32*
  %v5_1413c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_1413c, i32* %v4_1413c, align 4
  %v6_1413c = add i32 %v0_1413c, 8
  %v7_1413c = inttoptr i32 %v6_1413c to i32*
  %v8_1413c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_1413c, i32* %v7_1413c, align 4
  %v9_1413c = add i32 %v0_1413c, 12
  %v10_1413c = inttoptr i32 %v9_1413c to i32*
  %v11_1413c = load i32, i32* @ip, align 4
  store i32 %v11_1413c, i32* %v10_1413c, align 4
  %v12_1413c = add i32 %v0_1413c, 16
  store i32 %v12_1413c, i32* @r0, align 4
  %v0_14140 = load i32, i32* %r2.global-to-local, align 4
  %v2_14140 = add i32 %v0_14140, -16
  store i32 %v2_14140, i32* %r2.global-to-local, align 4
  %v6_14144 = icmp slt i32 %v0_14140, 16
  br i1 %v6_14144, label %dec_label_pc_14148, label %dec_label_pc_14118.dec_label_pc_14118_crit_edge

dec_label_pc_14118.dec_label_pc_14118_crit_edge:  ; preds = %dec_label_pc_14118
  %v0_14118.pre = load i32, i32* @lr, align 4
  %v0_1411c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14118

dec_label_pc_14148:                               ; preds = %dec_label_pc_14118
  %v2_14148 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14148, i32* @r4, align 4
  %v5_14148 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14148, i32* @r5, align 4
  %v2_1414c = add i32 %v0_14140, -4
  store i32 %v2_1414c, i32* %r2.global-to-local, align 4
  %v4_1414c = add i32 %v0_14140, 2147483632
  %v5_1414c = and i32 %v2_1414c, %v4_1414c
  %v6_1414c = icmp slt i32 %v5_1414c, 0
  store i1 %v6_1414c, i1* %cpsr_v.global-to-local, align 1
  %v7_1414c = icmp slt i32 %v2_1414c, 0
  store i1 %v7_1414c, i1* %cpsr_n.global-to-local, align 1
  %v8_1414c = icmp eq i32 %v2_1414c, 0
  store i1 %v8_1414c, i1* %cpsr_z.global-to-local, align 1
  %v5_14150 = icmp slt i32 %v2_14140, -12
  br i1 %v5_14150, label %dec_label_pc_1416c, label %dec_label_pc_14154

dec_label_pc_14154:                               ; preds = %dec_label_pc_14148, %dec_label_pc_14108, %dec_label_pc_14154
  %v1_14160 = phi i32 [ %v4_14160, %dec_label_pc_14154 ], [ %v12_1413c, %dec_label_pc_14148 ], [ %v0_1413c74, %dec_label_pc_14108 ]
  %v0_14154 = load i32, i32* @lr, align 4
  %v3_14154 = udiv i32 %v0_14154, 256
  store i32 %v3_14154, i32* %ip.global-to-local, align 4
  %v0_14158 = load i32, i32* %r1.global-to-local, align 4
  %v1_14158 = inttoptr i32 %v0_14158 to i32*
  %v2_14158 = load i32, i32* %v1_14158, align 4
  store i32 %v2_14158, i32* @lr, align 4
  %v4_14158 = add i32 %v0_14158, 4
  store i32 %v4_14158, i32* %r1.global-to-local, align 4
  %v4_1415c = mul i32 %v2_14158, 16777216
  %v5_1415c = or i32 %v4_1415c, %v3_14154
  store i32 %v5_1415c, i32* @ip, align 4
  %v2_14160 = inttoptr i32 %v1_14160 to i32*
  store i32 %v5_1415c, i32* %v2_14160, align 4
  %v3_14160 = load i32, i32* @r0, align 4
  %v4_14160 = add i32 %v3_14160, 4
  store i32 %v4_14160, i32* @r0, align 4
  %v0_14164 = load i32, i32* %r2.global-to-local, align 4
  %v2_14164 = add i32 %v0_14164, -4
  store i32 %v2_14164, i32* %r2.global-to-local, align 4
  %v6_14168 = icmp slt i32 %v0_14164, 4
  br i1 %v6_14168, label %dec_label_pc_1416c.loopexit, label %dec_label_pc_14154

dec_label_pc_1416c.loopexit:                      ; preds = %dec_label_pc_14154
  %v4_14164 = sub i32 3, %v0_14164
  %v5_14164 = and i32 %v4_14164, %v0_14164
  %v6_14164 = icmp slt i32 %v5_14164, 0
  %v7_14164 = icmp slt i32 %v2_14164, 0
  store i1 %v6_14164, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14164, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1416c

dec_label_pc_1416c:                               ; preds = %dec_label_pc_1416c.loopexit, %dec_label_pc_14148
  %v2_140ac111 = phi i32 [ %v4_14160, %dec_label_pc_1416c.loopexit ], [ %v12_1413c, %dec_label_pc_14148 ]
  %v0_1409c107 = phi i32 [ %v2_14164, %dec_label_pc_1416c.loopexit ], [ %v2_1414c, %dec_label_pc_14148 ]
  %v0_1416c = load i32, i32* %r1.global-to-local, align 4
  %v1_1416c = add i32 %v0_1416c, -3
  store i32 %v1_1416c, i32* @r1, align 4
  br label %bb131

dec_label_pc_14174:                               ; preds = %dec_label_pc_140f4
  br i1 %v5_141e4, label %dec_label_pc_141c0, label %dec_label_pc_1417c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_14174
  store i32 %v2_141e0, i32* %r2.global-to-local, align 4
  %v3_14180 = load i32, i32* @r4, align 4
  store i32 %v3_14180, i32* %stack_var_-16, align 4
  %v6_14180 = load i32, i32* @r5, align 4
  store i32 %v6_14180, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14184

dec_label_pc_14184:                               ; preds = %dec_label_pc_14184.dec_label_pc_14184_crit_edge, %dec_label_pc_1417c
  %v0_141a8 = phi i32 [ %v12_141a8, %dec_label_pc_14184.dec_label_pc_14184_crit_edge ], [ %v0_1413c74, %dec_label_pc_1417c ]
  %v0_14188 = phi i32 [ %v0_14188.pre, %dec_label_pc_14184.dec_label_pc_14184_crit_edge ], [ %v4_140f8, %dec_label_pc_1417c ]
  %v0_14184 = phi i32 [ %v0_14184.pre, %dec_label_pc_14184.dec_label_pc_14184_crit_edge ], [ %v2_140f8, %dec_label_pc_1417c ]
  %v3_14184 = udiv i32 %v0_14184, 65536
  store i32 %v3_14184, i32* %r3.global-to-local, align 4
  %v1_14188 = inttoptr i32 %v0_14188 to i32*
  %v2_14188 = load i32, i32* %v1_14188, align 4
  store i32 %v2_14188, i32* %r4.global-to-local, align 4
  %v3_14188 = add i32 %v0_14188, 4
  %v4_14188 = inttoptr i32 %v3_14188 to i32*
  %v5_14188 = load i32, i32* %v4_14188, align 4
  store i32 %v5_14188, i32* %r5.global-to-local, align 4
  %v6_14188 = add i32 %v0_14188, 8
  %v7_14188 = inttoptr i32 %v6_14188 to i32*
  %v8_14188 = load i32, i32* %v7_14188, align 4
  store i32 %v8_14188, i32* %ip.global-to-local, align 4
  %v9_14188 = add i32 %v0_14188, 12
  %v10_14188 = inttoptr i32 %v9_14188 to i32*
  %v11_14188 = load i32, i32* %v10_14188, align 4
  store i32 %v11_14188, i32* @lr, align 4
  %v12_14188 = add i32 %v0_14188, 16
  store i32 %v12_14188, i32* %r1.global-to-local, align 4
  %v4_1418c = mul i32 %v2_14188, 65536
  %v5_1418c = or i32 %v4_1418c, %v3_14184
  store i32 %v5_1418c, i32* %r3.global-to-local, align 4
  %v3_14190 = udiv i32 %v2_14188, 65536
  %v4_14194 = mul i32 %v5_14188, 65536
  %v5_14194 = or i32 %v4_14194, %v3_14190
  store i32 %v5_14194, i32* %r4.global-to-local, align 4
  %v3_14198 = udiv i32 %v5_14188, 65536
  %v4_1419c = mul i32 %v8_14188, 65536
  %v5_1419c = or i32 %v4_1419c, %v3_14198
  store i32 %v5_1419c, i32* %r5.global-to-local, align 4
  %v3_141a0 = udiv i32 %v8_14188, 65536
  %v4_141a4 = mul i32 %v11_14188, 65536
  %v5_141a4 = or i32 %v4_141a4, %v3_141a0
  store i32 %v5_141a4, i32* @ip, align 4
  %v1_141a8 = inttoptr i32 %v0_141a8 to i32*
  store i32 %v5_1418c, i32* %v1_141a8, align 4
  %v3_141a8 = add i32 %v0_141a8, 4
  %v4_141a8 = inttoptr i32 %v3_141a8 to i32*
  %v5_141a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_141a8, i32* %v4_141a8, align 4
  %v6_141a8 = add i32 %v0_141a8, 8
  %v7_141a8 = inttoptr i32 %v6_141a8 to i32*
  %v8_141a8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_141a8, i32* %v7_141a8, align 4
  %v9_141a8 = add i32 %v0_141a8, 12
  %v10_141a8 = inttoptr i32 %v9_141a8 to i32*
  %v11_141a8 = load i32, i32* @ip, align 4
  store i32 %v11_141a8, i32* %v10_141a8, align 4
  %v12_141a8 = add i32 %v0_141a8, 16
  store i32 %v12_141a8, i32* @r0, align 4
  %v0_141ac = load i32, i32* %r2.global-to-local, align 4
  %v2_141ac = add i32 %v0_141ac, -16
  store i32 %v2_141ac, i32* %r2.global-to-local, align 4
  %v6_141b0 = icmp slt i32 %v0_141ac, 16
  br i1 %v6_141b0, label %dec_label_pc_141b4, label %dec_label_pc_14184.dec_label_pc_14184_crit_edge

dec_label_pc_14184.dec_label_pc_14184_crit_edge:  ; preds = %dec_label_pc_14184
  %v0_14184.pre = load i32, i32* @lr, align 4
  %v0_14188.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14184

dec_label_pc_141b4:                               ; preds = %dec_label_pc_14184
  %v2_141b4 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_141b4, i32* @r4, align 4
  %v5_141b4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_141b4, i32* @r5, align 4
  %v2_141b8 = add i32 %v0_141ac, -4
  store i32 %v2_141b8, i32* %r2.global-to-local, align 4
  %v4_141b8 = add i32 %v0_141ac, 2147483632
  %v5_141b8 = and i32 %v2_141b8, %v4_141b8
  %v6_141b8 = icmp slt i32 %v5_141b8, 0
  store i1 %v6_141b8, i1* %cpsr_v.global-to-local, align 1
  %v7_141b8 = icmp slt i32 %v2_141b8, 0
  store i1 %v7_141b8, i1* %cpsr_n.global-to-local, align 1
  %v8_141b8 = icmp eq i32 %v2_141b8, 0
  store i1 %v8_141b8, i1* %cpsr_z.global-to-local, align 1
  %v5_141bc = icmp slt i32 %v2_141ac, -12
  br i1 %v5_141bc, label %dec_label_pc_141d8, label %dec_label_pc_141c0

dec_label_pc_141c0:                               ; preds = %dec_label_pc_141b4, %dec_label_pc_14174, %dec_label_pc_141c0
  %v1_141cc = phi i32 [ %v4_141cc, %dec_label_pc_141c0 ], [ %v12_141a8, %dec_label_pc_141b4 ], [ %v0_1413c74, %dec_label_pc_14174 ]
  %v0_141c0 = load i32, i32* @lr, align 4
  %v3_141c0 = udiv i32 %v0_141c0, 65536
  store i32 %v3_141c0, i32* %ip.global-to-local, align 4
  %v0_141c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_141c4 = inttoptr i32 %v0_141c4 to i32*
  %v2_141c4 = load i32, i32* %v1_141c4, align 4
  store i32 %v2_141c4, i32* @lr, align 4
  %v4_141c4 = add i32 %v0_141c4, 4
  store i32 %v4_141c4, i32* %r1.global-to-local, align 4
  %v4_141c8 = mul i32 %v2_141c4, 65536
  %v5_141c8 = or i32 %v4_141c8, %v3_141c0
  store i32 %v5_141c8, i32* @ip, align 4
  %v2_141cc = inttoptr i32 %v1_141cc to i32*
  store i32 %v5_141c8, i32* %v2_141cc, align 4
  %v3_141cc = load i32, i32* @r0, align 4
  %v4_141cc = add i32 %v3_141cc, 4
  store i32 %v4_141cc, i32* @r0, align 4
  %v0_141d0 = load i32, i32* %r2.global-to-local, align 4
  %v2_141d0 = add i32 %v0_141d0, -4
  store i32 %v2_141d0, i32* %r2.global-to-local, align 4
  %v6_141d4 = icmp slt i32 %v0_141d0, 4
  br i1 %v6_141d4, label %dec_label_pc_141d8.loopexit, label %dec_label_pc_141c0

dec_label_pc_141d8.loopexit:                      ; preds = %dec_label_pc_141c0
  %v4_141d0 = sub i32 3, %v0_141d0
  %v5_141d0 = and i32 %v4_141d0, %v0_141d0
  %v6_141d0 = icmp slt i32 %v5_141d0, 0
  %v7_141d0 = icmp slt i32 %v2_141d0, 0
  store i1 %v6_141d0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_141d0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_141d8

dec_label_pc_141d8:                               ; preds = %dec_label_pc_141d8.loopexit, %dec_label_pc_141b4
  %v2_140ac112 = phi i32 [ %v4_141cc, %dec_label_pc_141d8.loopexit ], [ %v12_141a8, %dec_label_pc_141b4 ]
  %v0_1409c108 = phi i32 [ %v2_141d0, %dec_label_pc_141d8.loopexit ], [ %v2_141b8, %dec_label_pc_141b4 ]
  %v0_141d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_141d8 = add i32 %v0_141d8, -2
  store i32 %v1_141d8, i32* @r1, align 4
  br label %bb131

dec_label_pc_141e0:                               ; preds = %dec_label_pc_140f4
  br i1 %v5_141e4, label %dec_label_pc_1422c, label %dec_label_pc_141e8

dec_label_pc_141e8:                               ; preds = %dec_label_pc_141e0
  store i32 %v2_141e0, i32* %r2.global-to-local, align 4
  %v3_141ec = load i32, i32* @r4, align 4
  store i32 %v3_141ec, i32* %stack_var_-16, align 4
  %v6_141ec = load i32, i32* @r5, align 4
  store i32 %v6_141ec, i32* %stack_var_-12, align 4
  br label %dec_label_pc_141f0

dec_label_pc_141f0:                               ; preds = %dec_label_pc_141f0.dec_label_pc_141f0_crit_edge, %dec_label_pc_141e8
  %v0_14214 = phi i32 [ %v12_14214, %dec_label_pc_141f0.dec_label_pc_141f0_crit_edge ], [ %v0_1413c74, %dec_label_pc_141e8 ]
  %v0_141f4 = phi i32 [ %v0_141f4.pre, %dec_label_pc_141f0.dec_label_pc_141f0_crit_edge ], [ %v4_140f8, %dec_label_pc_141e8 ]
  %v0_141f0 = phi i32 [ %v0_141f0.pre, %dec_label_pc_141f0.dec_label_pc_141f0_crit_edge ], [ %v2_140f8, %dec_label_pc_141e8 ]
  %v3_141f0 = udiv i32 %v0_141f0, 16777216
  store i32 %v3_141f0, i32* %r3.global-to-local, align 4
  %v1_141f4 = inttoptr i32 %v0_141f4 to i32*
  %v2_141f4 = load i32, i32* %v1_141f4, align 4
  store i32 %v2_141f4, i32* %r4.global-to-local, align 4
  %v3_141f4 = add i32 %v0_141f4, 4
  %v4_141f4 = inttoptr i32 %v3_141f4 to i32*
  %v5_141f4 = load i32, i32* %v4_141f4, align 4
  store i32 %v5_141f4, i32* %r5.global-to-local, align 4
  %v6_141f4 = add i32 %v0_141f4, 8
  %v7_141f4 = inttoptr i32 %v6_141f4 to i32*
  %v8_141f4 = load i32, i32* %v7_141f4, align 4
  store i32 %v8_141f4, i32* %ip.global-to-local, align 4
  %v9_141f4 = add i32 %v0_141f4, 12
  %v10_141f4 = inttoptr i32 %v9_141f4 to i32*
  %v11_141f4 = load i32, i32* %v10_141f4, align 4
  store i32 %v11_141f4, i32* @lr, align 4
  %v12_141f4 = add i32 %v0_141f4, 16
  store i32 %v12_141f4, i32* %r1.global-to-local, align 4
  %v4_141f8 = mul i32 %v2_141f4, 256
  %v5_141f8 = or i32 %v4_141f8, %v3_141f0
  store i32 %v5_141f8, i32* %r3.global-to-local, align 4
  %v3_141fc = udiv i32 %v2_141f4, 16777216
  %v4_14200 = mul i32 %v5_141f4, 256
  %v5_14200 = or i32 %v4_14200, %v3_141fc
  store i32 %v5_14200, i32* %r4.global-to-local, align 4
  %v3_14204 = udiv i32 %v5_141f4, 16777216
  %v4_14208 = mul i32 %v8_141f4, 256
  %v5_14208 = or i32 %v4_14208, %v3_14204
  store i32 %v5_14208, i32* %r5.global-to-local, align 4
  %v3_1420c = udiv i32 %v8_141f4, 16777216
  %v4_14210 = mul i32 %v11_141f4, 256
  %v5_14210 = or i32 %v4_14210, %v3_1420c
  store i32 %v5_14210, i32* @ip, align 4
  %v1_14214 = inttoptr i32 %v0_14214 to i32*
  store i32 %v5_141f8, i32* %v1_14214, align 4
  %v3_14214 = add i32 %v0_14214, 4
  %v4_14214 = inttoptr i32 %v3_14214 to i32*
  %v5_14214 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14214, i32* %v4_14214, align 4
  %v6_14214 = add i32 %v0_14214, 8
  %v7_14214 = inttoptr i32 %v6_14214 to i32*
  %v8_14214 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14214, i32* %v7_14214, align 4
  %v9_14214 = add i32 %v0_14214, 12
  %v10_14214 = inttoptr i32 %v9_14214 to i32*
  %v11_14214 = load i32, i32* @ip, align 4
  store i32 %v11_14214, i32* %v10_14214, align 4
  %v12_14214 = add i32 %v0_14214, 16
  store i32 %v12_14214, i32* @r0, align 4
  %v0_14218 = load i32, i32* %r2.global-to-local, align 4
  %v2_14218 = add i32 %v0_14218, -16
  store i32 %v2_14218, i32* %r2.global-to-local, align 4
  %v6_1421c = icmp slt i32 %v0_14218, 16
  br i1 %v6_1421c, label %dec_label_pc_14220, label %dec_label_pc_141f0.dec_label_pc_141f0_crit_edge

dec_label_pc_141f0.dec_label_pc_141f0_crit_edge:  ; preds = %dec_label_pc_141f0
  %v0_141f0.pre = load i32, i32* @lr, align 4
  %v0_141f4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_141f0

dec_label_pc_14220:                               ; preds = %dec_label_pc_141f0
  %v2_14220 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14220, i32* @r4, align 4
  %v5_14220 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14220, i32* @r5, align 4
  %v2_14224 = add i32 %v0_14218, -4
  store i32 %v2_14224, i32* %r2.global-to-local, align 4
  %v4_14224 = add i32 %v0_14218, 2147483632
  %v5_14224 = and i32 %v2_14224, %v4_14224
  %v6_14224 = icmp slt i32 %v5_14224, 0
  store i1 %v6_14224, i1* %cpsr_v.global-to-local, align 1
  %v7_14224 = icmp slt i32 %v2_14224, 0
  store i1 %v7_14224, i1* %cpsr_n.global-to-local, align 1
  %v8_14224 = icmp eq i32 %v2_14224, 0
  store i1 %v8_14224, i1* %cpsr_z.global-to-local, align 1
  %v5_14228 = icmp slt i32 %v2_14218, -12
  br i1 %v5_14228, label %dec_label_pc_14244, label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %dec_label_pc_14220, %dec_label_pc_141e0, %dec_label_pc_1422c
  %v1_14238 = phi i32 [ %v4_14238, %dec_label_pc_1422c ], [ %v12_14214, %dec_label_pc_14220 ], [ %v0_1413c74, %dec_label_pc_141e0 ]
  %v0_1422c = load i32, i32* @lr, align 4
  %v3_1422c = udiv i32 %v0_1422c, 16777216
  store i32 %v3_1422c, i32* %ip.global-to-local, align 4
  %v0_14230 = load i32, i32* %r1.global-to-local, align 4
  %v1_14230 = inttoptr i32 %v0_14230 to i32*
  %v2_14230 = load i32, i32* %v1_14230, align 4
  store i32 %v2_14230, i32* @lr, align 4
  %v4_14230 = add i32 %v0_14230, 4
  store i32 %v4_14230, i32* %r1.global-to-local, align 4
  %v4_14234 = mul i32 %v2_14230, 256
  %v5_14234 = or i32 %v4_14234, %v3_1422c
  store i32 %v5_14234, i32* @ip, align 4
  %v2_14238 = inttoptr i32 %v1_14238 to i32*
  store i32 %v5_14234, i32* %v2_14238, align 4
  %v3_14238 = load i32, i32* @r0, align 4
  %v4_14238 = add i32 %v3_14238, 4
  store i32 %v4_14238, i32* @r0, align 4
  %v0_1423c = load i32, i32* %r2.global-to-local, align 4
  %v2_1423c = add i32 %v0_1423c, -4
  store i32 %v2_1423c, i32* %r2.global-to-local, align 4
  %v6_14240 = icmp slt i32 %v0_1423c, 4
  br i1 %v6_14240, label %dec_label_pc_14244.loopexit, label %dec_label_pc_1422c

dec_label_pc_14244.loopexit:                      ; preds = %dec_label_pc_1422c
  %v4_1423c = sub i32 3, %v0_1423c
  %v5_1423c = and i32 %v4_1423c, %v0_1423c
  %v6_1423c = icmp slt i32 %v5_1423c, 0
  %v7_1423c = icmp slt i32 %v2_1423c, 0
  store i1 %v6_1423c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1423c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14244

dec_label_pc_14244:                               ; preds = %dec_label_pc_14244.loopexit, %dec_label_pc_14220
  %v2_140ac113 = phi i32 [ %v4_14238, %dec_label_pc_14244.loopexit ], [ %v12_14214, %dec_label_pc_14220 ]
  %v0_1409c109 = phi i32 [ %v2_1423c, %dec_label_pc_14244.loopexit ], [ %v2_14224, %dec_label_pc_14220 ]
  %v0_14244 = load i32, i32* %r1.global-to-local, align 4
  %v1_14244 = add i32 %v0_14244, -1
  store i32 %v1_14244, i32* @r1, align 4
  br label %bb131

dec_label_pc_1424c:                               ; preds = %dec_label_pc_14000
  %v1_1424c = load i32, i32* @r2, align 4
  %v2_1424c = add i32 %v1_1424c, %v0_14000
  store i32 %v2_1424c, i32* %r1.global-to-local, align 4
  %v2_14250 = add i32 %v1_1424c, %v1_14000
  store i32 %v2_14250, i32* %r0.global-to-local, align 4
  %v2_14254 = add i32 %v1_1424c, -4
  store i32 %v2_14254, i32* %r2.global-to-local, align 4
  %v4_14254 = sub i32 3, %v1_1424c
  %v5_14254 = and i32 %v4_14254, %v1_1424c
  %v6_14254 = icmp slt i32 %v5_14254, 0
  store i1 %v6_14254, i1* %cpsr_v.global-to-local, align 1
  %v7_14254 = icmp slt i32 %v2_14254, 0
  store i1 %v7_14254, i1* %cpsr_n.global-to-local, align 1
  %v8_14254 = icmp eq i32 %v1_1424c, 4
  store i1 %v8_14254, i1* %cpsr_z.global-to-local, align 1
  %v5_14258 = icmp slt i32 %v1_1424c, 4
  br i1 %v5_14258, label %bb141, label %dec_label_pc_1425c

dec_label_pc_1425c:                               ; preds = %dec_label_pc_1424c
  %v1_1425c = urem i32 %v2_14250, 4
  store i32 %v1_1425c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1425c = icmp eq i32 %v1_1425c, 0
  store i1 %v2_1425c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1425c, label %dec_label_pc_14264, label %dec_label_pc_14304

dec_label_pc_14264:                               ; preds = %dec_label_pc_1425c
  %v1_14264 = urem i32 %v2_1424c, 4
  store i32 %v1_14264, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14264 = icmp eq i32 %v1_14264, 0
  store i1 %v2_14264, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14264, label %dec_label_pc_1426c, label %dec_label_pc_14330

dec_label_pc_1426c:                               ; preds = %dec_label_pc_14264, %dec_label_pc_14328
  %v0_1428448 = phi i32 [ %v2_14250, %dec_label_pc_14264 ], [ %v0_1437831, %dec_label_pc_14328 ]
  %v0_1428047 = phi i32 [ %v2_1424c, %dec_label_pc_14264 ], [ %v0_14328, %dec_label_pc_14328 ]
  %v0_1426c = phi i32 [ %v2_14254, %dec_label_pc_14264 ], [ %v2_14320, %dec_label_pc_14328 ]
  %v2_1426c = add i32 %v0_1426c, -8
  store i32 %v2_1426c, i32* %r2.global-to-local, align 4
  %v4_1426c = sub i32 7, %v0_1426c
  %v5_1426c = and i32 %v4_1426c, %v0_1426c
  %v6_1426c = icmp slt i32 %v5_1426c, 0
  store i1 %v6_1426c, i1* %cpsr_v.global-to-local, align 1
  %v7_1426c = icmp slt i32 %v2_1426c, 0
  store i1 %v7_1426c, i1* %cpsr_n.global-to-local, align 1
  %v8_1426c = icmp eq i32 %v0_1426c, 8
  store i1 %v8_1426c, i1* %cpsr_z.global-to-local, align 1
  %v5_14270 = icmp slt i32 %v0_1426c, 8
  br i1 %v5_14270, label %dec_label_pc_142bc, label %dec_label_pc_14274

dec_label_pc_14274:                               ; preds = %dec_label_pc_1426c
  %v3_14274 = load i32, i32* @r4, align 4
  store i32 %v3_14274, i32* %stack_var_-8, align 4
  %v6_14274 = load i32, i32* @lr, align 4
  %v2_14278 = add i32 %v0_1426c, -28
  store i32 %v2_14278, i32* %r2.global-to-local, align 4
  %v4_14278 = sub i32 27, %v0_1426c
  %v5_14278 = and i32 %v4_14278, %v2_1426c
  %v6_14278 = icmp slt i32 %v5_14278, 0
  store i1 %v6_14278, i1* %cpsr_v.global-to-local, align 1
  %v7_14278 = icmp slt i32 %v2_14278, 0
  store i1 %v7_14278, i1* %cpsr_n.global-to-local, align 1
  %v8_14278 = icmp eq i32 %v2_1426c, 20
  store i1 %v8_14278, i1* %cpsr_z.global-to-local, align 1
  %v5_1427c = icmp slt i32 %v2_1426c, 20
  br i1 %v5_1427c, label %dec_label_pc_14298, label %dec_label_pc_14280

dec_label_pc_14280:                               ; preds = %dec_label_pc_14274, %dec_label_pc_14280.dec_label_pc_14280_crit_edge
  %v0_14284 = phi i32 [ %v1_1428c, %dec_label_pc_14280.dec_label_pc_14280_crit_edge ], [ %v0_1428448, %dec_label_pc_14274 ]
  %v0_14280 = phi i32 [ %v0_14280.pre, %dec_label_pc_14280.dec_label_pc_14280_crit_edge ], [ %v0_1428047, %dec_label_pc_14274 ]
  %v1_14280 = add i32 %v0_14280, -4
  %v2_14280 = inttoptr i32 %v1_14280 to i32*
  %v3_14280 = load i32, i32* %v2_14280, align 4
  store i32 %v3_14280, i32* %r3.global-to-local, align 4
  %v4_14280 = add i32 %v0_14280, -8
  %v5_14280 = inttoptr i32 %v4_14280 to i32*
  %v6_14280 = load i32, i32* %v5_14280, align 4
  store i32 %v6_14280, i32* %r4.global-to-local, align 4
  %v7_14280 = add i32 %v0_14280, -12
  %v8_14280 = inttoptr i32 %v7_14280 to i32*
  %v9_14280 = load i32, i32* %v8_14280, align 4
  store i32 %v9_14280, i32* %ip.global-to-local, align 4
  %v10_14280 = add i32 %v0_14280, -16
  %v11_14280 = inttoptr i32 %v10_14280 to i32*
  %v12_14280 = load i32, i32* %v11_14280, align 4
  store i32 %v12_14280, i32* %lr.global-to-local, align 4
  store i32 %v10_14280, i32* %r1.global-to-local, align 4
  %v1_14284 = add i32 %v0_14284, -16
  %v2_14284 = inttoptr i32 %v1_14284 to i32*
  store i32 %v3_14280, i32* %v2_14284, align 4
  %v4_14284 = add i32 %v0_14284, -12
  %v5_14284 = inttoptr i32 %v4_14284 to i32*
  %v6_14284 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_14284, i32* %v5_14284, align 4
  %v7_14284 = add i32 %v0_14284, -8
  %v8_14284 = inttoptr i32 %v7_14284 to i32*
  %v9_14284 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_14284, i32* %v8_14284, align 4
  %v10_14284 = add i32 %v0_14284, -4
  %v11_14284 = inttoptr i32 %v10_14284 to i32*
  %v12_14284 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14284, i32* %v11_14284, align 4
  store i32 %v1_14284, i32* %r0.global-to-local, align 4
  %v0_14288 = load i32, i32* %r1.global-to-local, align 4
  %v1_14288 = add i32 %v0_14288, -4
  %v2_14288 = inttoptr i32 %v1_14288 to i32*
  %v3_14288 = load i32, i32* %v2_14288, align 4
  store i32 %v3_14288, i32* %r3.global-to-local, align 4
  %v4_14288 = add i32 %v0_14288, -8
  %v5_14288 = inttoptr i32 %v4_14288 to i32*
  %v6_14288 = load i32, i32* %v5_14288, align 4
  store i32 %v6_14288, i32* %r4.global-to-local, align 4
  %v7_14288 = add i32 %v0_14288, -12
  %v8_14288 = inttoptr i32 %v7_14288 to i32*
  %v9_14288 = load i32, i32* %v8_14288, align 4
  store i32 %v9_14288, i32* @ip, align 4
  %v10_14288 = add i32 %v0_14288, -16
  %v11_14288 = inttoptr i32 %v10_14288 to i32*
  %v12_14288 = load i32, i32* %v11_14288, align 4
  store i32 %v12_14288, i32* %lr.global-to-local, align 4
  store i32 %v10_14288, i32* %r1.global-to-local, align 4
  %v1_1428c = add i32 %v0_14284, -32
  %v2_1428c = inttoptr i32 %v1_1428c to i32*
  store i32 %v3_14288, i32* %v2_1428c, align 4
  %v4_1428c = add i32 %v0_14284, -28
  %v5_1428c = inttoptr i32 %v4_1428c to i32*
  %v6_1428c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_1428c, i32* %v5_1428c, align 4
  %v7_1428c = add i32 %v0_14284, -24
  %v8_1428c = inttoptr i32 %v7_1428c to i32*
  %v9_1428c = load i32, i32* @ip, align 4
  store i32 %v9_1428c, i32* %v8_1428c, align 4
  %v10_1428c = add i32 %v0_14284, -20
  %v11_1428c = inttoptr i32 %v10_1428c to i32*
  %v12_1428c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_1428c, i32* %v11_1428c, align 4
  store i32 %v1_1428c, i32* %r0.global-to-local, align 4
  %v0_14290 = load i32, i32* %r2.global-to-local, align 4
  %v2_14290 = add i32 %v0_14290, -32
  store i32 %v2_14290, i32* %r2.global-to-local, align 4
  %v6_14294 = icmp slt i32 %v0_14290, 32
  br i1 %v6_14294, label %dec_label_pc_14298.loopexit, label %dec_label_pc_14280.dec_label_pc_14280_crit_edge

dec_label_pc_14280.dec_label_pc_14280_crit_edge:  ; preds = %dec_label_pc_14280
  %v0_14280.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14280

dec_label_pc_14298.loopexit:                      ; preds = %dec_label_pc_14280
  %v4_14290 = sub i32 31, %v0_14290
  %v5_14290 = and i32 %v4_14290, %v0_14290
  %v6_14290 = icmp slt i32 %v5_14290, 0
  %v7_14290 = icmp slt i32 %v2_14290, 0
  store i1 %v6_14290, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14290, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %dec_label_pc_14298.loopexit, %dec_label_pc_14274
  %v6_142a0 = phi i32 [ %v1_1428c, %dec_label_pc_14298.loopexit ], [ %v0_1428448, %dec_label_pc_14274 ]
  %v0_142a8.pr = phi i32 [ %v2_14290, %dec_label_pc_14298.loopexit ], [ %v2_14278, %dec_label_pc_14274 ]
  %v4_14298 = add i32 %v0_142a8.pr, 16
  %v6_14298 = sub i32 0, %v0_142a8.pr
  %v7_14298 = and i32 %v4_14298, %v6_14298
  %v8_14298 = icmp slt i32 %v7_14298, 0
  store i1 %v8_14298, i1* %cpsr_v.global-to-local, align 1
  %v9_14298 = icmp slt i32 %v4_14298, 0
  store i1 %v9_14298, i1* %cpsr_n.global-to-local, align 1
  %v10_14298 = icmp eq i32 %v4_14298, 0
  store i1 %v10_14298, i1* %cpsr_z.global-to-local, align 1
  %v5_1429c = icmp slt i32 %v0_142a8.pr, -16
  br i1 %v5_1429c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_14298
  %v6_1429c = load i32, i32* %r1.global-to-local, align 4
  %v7_1429c = add i32 %v6_1429c, -4
  %v8_1429c = inttoptr i32 %v7_1429c to i32*
  %v9_1429c = load i32, i32* %v8_1429c, align 4
  store i32 %v9_1429c, i32* %r3.global-to-local, align 4
  %v10_1429c = add i32 %v6_1429c, -8
  %v11_1429c = inttoptr i32 %v10_1429c to i32*
  %v12_1429c = load i32, i32* %v11_1429c, align 4
  store i32 %v12_1429c, i32* %r4.global-to-local, align 4
  %v13_1429c = add i32 %v6_1429c, -12
  %v14_1429c = inttoptr i32 %v13_1429c to i32*
  %v15_1429c = load i32, i32* %v14_1429c, align 4
  store i32 %v15_1429c, i32* @ip, align 4
  %v16_1429c = add i32 %v6_1429c, -16
  %v17_1429c = inttoptr i32 %v16_1429c to i32*
  %v18_1429c = load i32, i32* %v17_1429c, align 4
  store i32 %v18_1429c, i32* %lr.global-to-local, align 4
  store i32 %v16_1429c, i32* %r1.global-to-local, align 4
  %v7_142a0 = add i32 %v6_142a0, -16
  %v8_142a0 = inttoptr i32 %v7_142a0 to i32*
  store i32 %v9_1429c, i32* %v8_142a0, align 4
  %v10_142a0 = add i32 %v6_142a0, -12
  %v11_142a0 = inttoptr i32 %v10_142a0 to i32*
  %v12_142a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_142a0, i32* %v11_142a0, align 4
  %v13_142a0 = add i32 %v6_142a0, -8
  %v14_142a0 = inttoptr i32 %v13_142a0 to i32*
  %v15_142a0 = load i32, i32* @ip, align 4
  store i32 %v15_142a0, i32* %v14_142a0, align 4
  %v16_142a0 = add i32 %v6_142a0, -4
  %v17_142a0 = inttoptr i32 %v16_142a0 to i32*
  %v18_142a0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_142a0, i32* %v17_142a0, align 4
  store i32 %v7_142a0, i32* %r0.global-to-local, align 4
  %v6_142a4 = load i32, i32* %r2.global-to-local, align 4
  %v7_142a4 = add i32 %v6_142a4, -16
  store i32 %v7_142a4, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_14298, %bb138
  %v6_142b0 = phi i32 [ %v7_142a0, %bb138 ], [ %v6_142a0, %dec_label_pc_14298 ]
  %v0_142a8 = phi i32 [ %v7_142a4, %bb138 ], [ %v0_142a8.pr, %dec_label_pc_14298 ]
  %v4_142a8 = add i32 %v0_142a8, 20
  store i32 %v4_142a8, i32* %r2.global-to-local, align 4
  %v6_142a8 = sub i32 0, %v0_142a8
  %v7_142a8 = and i32 %v4_142a8, %v6_142a8
  %v8_142a8 = icmp slt i32 %v7_142a8, 0
  store i1 %v8_142a8, i1* %cpsr_v.global-to-local, align 1
  %v9_142a8 = icmp slt i32 %v4_142a8, 0
  store i1 %v9_142a8, i1* %cpsr_n.global-to-local, align 1
  %v10_142a8 = icmp eq i32 %v4_142a8, 0
  store i1 %v10_142a8, i1* %cpsr_z.global-to-local, align 1
  %v5_142ac = icmp slt i32 %v0_142a8, -20
  br i1 %v5_142ac, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_142ac = load i32, i32* %r1.global-to-local, align 4
  %v7_142ac = add i32 %v6_142ac, -4
  %v8_142ac = inttoptr i32 %v7_142ac to i32*
  %v9_142ac = load i32, i32* %v8_142ac, align 4
  store i32 %v9_142ac, i32* %r3.global-to-local, align 4
  %v10_142ac = add i32 %v6_142ac, -8
  %v11_142ac = inttoptr i32 %v10_142ac to i32*
  %v12_142ac = load i32, i32* %v11_142ac, align 4
  store i32 %v12_142ac, i32* @ip, align 4
  %v13_142ac = add i32 %v6_142ac, -12
  %v14_142ac = inttoptr i32 %v13_142ac to i32*
  %v15_142ac = load i32, i32* %v14_142ac, align 4
  store i32 %v15_142ac, i32* %lr.global-to-local, align 4
  store i32 %v13_142ac, i32* %r1.global-to-local, align 4
  %v7_142b0 = add i32 %v6_142b0, -12
  %v8_142b0 = inttoptr i32 %v7_142b0 to i32*
  store i32 %v9_142ac, i32* %v8_142b0, align 4
  %v10_142b0 = add i32 %v6_142b0, -8
  %v11_142b0 = inttoptr i32 %v10_142b0 to i32*
  %v12_142b0 = load i32, i32* @ip, align 4
  store i32 %v12_142b0, i32* %v11_142b0, align 4
  %v13_142b0 = add i32 %v6_142b0, -4
  %v14_142b0 = inttoptr i32 %v13_142b0 to i32*
  %v15_142b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_142b0, i32* %v14_142b0, align 4
  store i32 %v7_142b0, i32* %r0.global-to-local, align 4
  %v6_142b4 = load i32, i32* %r2.global-to-local, align 4
  %v7_142b4 = add i32 %v6_142b4, -12
  store i32 %v7_142b4, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_142d456 = phi i32 [ %v6_142b0, %.thread13 ], [ %v7_142b0, %bb139 ]
  %v0_142bc54 = phi i32 [ %v4_142a8, %.thread13 ], [ %v7_142b4, %bb139 ]
  %v2_142b8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_142b8, i32* @r4, align 4
  store i32 %v6_14274, i32* @lr, align 4
  br label %dec_label_pc_142bc

dec_label_pc_142bc:                               ; preds = %dec_label_pc_1426c, %.thread15
  %v7_142cc = phi i32 [ %v0_1428448, %dec_label_pc_1426c ], [ %v6_142d456, %.thread15 ]
  %v0_142bc = phi i32 [ %v2_1426c, %dec_label_pc_1426c ], [ %v0_142bc54, %.thread15 ]
  %v2_142bc = add i32 %v0_142bc, 8
  store i32 %v2_142bc, i32* %r2.global-to-local, align 4
  %v4_142bc = sub i32 0, %v0_142bc
  %v5_142bc = and i32 %v2_142bc, %v4_142bc
  %v6_142bc = icmp slt i32 %v5_142bc, 0
  store i1 %v6_142bc, i1* %cpsr_v.global-to-local, align 1
  %v7_142bc = icmp slt i32 %v2_142bc, 0
  store i1 %v7_142bc, i1* %cpsr_n.global-to-local, align 1
  %v8_142bc = icmp eq i32 %v2_142bc, 0
  store i1 %v8_142bc, i1* %cpsr_z.global-to-local, align 1
  %v5_142c0 = icmp slt i32 %v0_142bc, -8
  br i1 %v5_142c0, label %bb141, label %dec_label_pc_142c4

dec_label_pc_142c4:                               ; preds = %dec_label_pc_142bc
  %v6_142c4 = add i32 %v0_142bc, 4
  store i32 %v6_142c4, i32* %r2.global-to-local, align 4
  %v8_142c4 = sub i32 -5, %v0_142bc
  %v9_142c4 = and i32 %v8_142c4, %v2_142bc
  %v10_142c4 = icmp slt i32 %v9_142c4, 0
  store i1 %v10_142c4, i1* %cpsr_v.global-to-local, align 1
  %v11_142c4 = icmp slt i32 %v6_142c4, 0
  store i1 %v11_142c4, i1* %cpsr_n.global-to-local, align 1
  %v12_142c4 = icmp eq i32 %v2_142bc, 4
  store i1 %v12_142c4, i1* %cpsr_z.global-to-local, align 1
  %v5_142c8 = icmp slt i32 %v2_142bc, 4
  %v6_142c8 = load i32, i32* %r1.global-to-local, align 4
  %v7_142c8 = add i32 %v6_142c8, -4
  %v8_142c8 = inttoptr i32 %v7_142c8 to i32*
  %v9_142c8 = load i32, i32* %v8_142c8, align 4
  store i32 %v9_142c8, i32* %r3.global-to-local, align 4
  br i1 %v5_142c8, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_142c4
  store i32 %v7_142c8, i32* %r1.global-to-local, align 4
  %v8_142cc = add i32 %v7_142cc, -4
  %v9_142cc = inttoptr i32 %v8_142cc to i32*
  store i32 %v9_142c8, i32* %v9_142cc, align 4
  %v10_142cc = load i32, i32* %r0.global-to-local, align 4
  %v11_142cc = add i32 %v10_142cc, -4
  store i32 %v11_142cc, i32* %r0.global-to-local, align 4
  %v0_142dc.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_142c4
  %v10_142d0 = add i32 %v6_142c8, -8
  %v11_142d0 = inttoptr i32 %v10_142d0 to i32*
  %v12_142d0 = load i32, i32* %v11_142d0, align 4
  store i32 %v12_142d0, i32* @ip, align 4
  store i32 %v10_142d0, i32* %r1.global-to-local, align 4
  %v7_142d4 = add i32 %v7_142cc, -8
  %v8_142d4 = inttoptr i32 %v7_142d4 to i32*
  store i32 %v9_142c8, i32* %v8_142d4, align 4
  %v10_142d4 = add i32 %v7_142cc, -4
  %v11_142d4 = inttoptr i32 %v10_142d4 to i32*
  %v12_142d4 = load i32, i32* @ip, align 4
  store i32 %v12_142d4, i32* %v11_142d4, align 4
  store i32 %v7_142d4, i32* %r0.global-to-local, align 4
  %v6_142d8 = load i32, i32* %r2.global-to-local, align 4
  %v7_142d8 = add i32 %v6_142d8, -4
  store i32 %v7_142d8, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_142bc, %dec_label_pc_1424c, %dec_label_pc_14480, %dec_label_pc_14414, %dec_label_pc_143a8, %bb140
  %v2_142e0 = phi i32 [ %v11_142cc, %.thread19 ], [ %v0_1437831, %.thread25 ], [ %v7_142cc, %dec_label_pc_142bc ], [ %v2_14250, %dec_label_pc_1424c ], [ %v2_142ec64, %dec_label_pc_14480 ], [ %v2_142ec63, %dec_label_pc_14414 ], [ %v2_142ec62, %dec_label_pc_143a8 ], [ %v7_142d4, %bb140 ]
  %v0_142dc = phi i32 [ %v0_142dc.pre, %.thread19 ], [ %v2_14320, %.thread25 ], [ %v2_142bc, %dec_label_pc_142bc ], [ %v2_14254, %dec_label_pc_1424c ], [ %v0_142dc60, %dec_label_pc_14480 ], [ %v0_142dc59, %dec_label_pc_14414 ], [ %v0_142dc58, %dec_label_pc_143a8 ], [ %v7_142d8, %bb140 ]
  %v1_142dc = add i32 %v0_142dc, 4
  store i32 %v1_142dc, i32* %r2.global-to-local, align 4
  %v3_142dc = sub i32 0, %v0_142dc
  %v4_142dc = and i32 %v1_142dc, %v3_142dc
  %v5_142dc = icmp slt i32 %v4_142dc, 0
  store i1 %v5_142dc, i1* %cpsr_v.global-to-local, align 1
  %v6_142dc = icmp slt i32 %v1_142dc, 0
  store i1 %v6_142dc, i1* %cpsr_n.global-to-local, align 1
  %v7_142dc = icmp eq i32 %v1_142dc, 0
  store i1 %v7_142dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_142dc, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_142e4 = add i32 %v0_142dc, 2
  %v3_142e4 = sub i32 -3, %v0_142dc
  %v4_142e4 = and i32 %v3_142e4, %v1_142dc
  %v5_142e4 = icmp slt i32 %v4_142e4, 0
  store i1 %v5_142e4, i1* %cpsr_v.global-to-local, align 1
  %v6_142e4 = icmp slt i32 %v1_142e4, 0
  store i1 %v6_142e4, i1* %cpsr_n.global-to-local, align 1
  %v7_142e4 = icmp eq i32 %v1_142dc, 2
  store i1 %v7_142e4, i1* %cpsr_z.global-to-local, align 1
  %v0_142e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_142e8 = add i32 %v0_142e8, -1
  %v2_142e8 = inttoptr i32 %v1_142e8 to i8*
  %v3_142e8 = load i8, i8* %v2_142e8, align 1
  %v4_142e8 = zext i8 %v3_142e8 to i32
  store i32 %v4_142e8, i32* %r3.global-to-local, align 4
  store i32 %v1_142e8, i32* %r1.global-to-local, align 4
  %v3_142ec = add i32 %v2_142e0, -1
  %v4_142ec = inttoptr i32 %v3_142ec to i8*
  store i8 %v3_142e8, i8* %v4_142ec, align 1
  %v5_142ec = load i32, i32* %r0.global-to-local, align 4
  %v6_142ec = add i32 %v5_142ec, -1
  store i32 %v6_142ec, i32* %r0.global-to-local, align 4
  %v0_142f0 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_142f0 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_142f0 = xor i1 %v0_142f0, %v1_142f0
  br i1 %v2_142f0, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_142f0 = load i32, i32* %r1.global-to-local, align 4
  %v4_142f0 = add i32 %v3_142f0, -1
  %v5_142f0 = inttoptr i32 %v4_142f0 to i8*
  %v6_142f0 = load i8, i8* %v5_142f0, align 1
  %v7_142f0 = zext i8 %v6_142f0 to i32
  store i32 %v7_142f0, i32* %r3.global-to-local, align 4
  store i32 %v4_142f0, i32* %r1.global-to-local, align 4
  %v6_142f4 = add i32 %v5_142ec, -2
  %v7_142f4 = inttoptr i32 %v6_142f4 to i8*
  store i8 %v6_142f0, i8* %v7_142f4, align 1
  %v8_142f4 = load i32, i32* %r0.global-to-local, align 4
  %v9_142f4 = add i32 %v8_142f4, -1
  store i32 %v9_142f4, i32* %r0.global-to-local, align 4
  %v1_142f8.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_142f8.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_142fc = phi i32 [ %v9_142f4, %bb143 ], [ %v6_142ec, %bb142 ]
  %v2_142fc = phi i1 [ %v2_142f8.pre, %bb143 ], [ %v1_142f0, %bb142 ]
  %v1_142fc = phi i1 [ %v1_142f8.pre, %bb143 ], [ %v0_142f0, %bb142 ]
  %v0_142f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_142f8 = xor i1 %v2_142fc, %v1_142fc
  %v4_142f8 = or i1 %v0_142f8, %v3_142f8
  br i1 %v4_142f8, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_142f8 = load i32, i32* %r1.global-to-local, align 4
  %v6_142f8 = add i32 %v5_142f8, -1
  %v7_142f8 = inttoptr i32 %v6_142f8 to i8*
  %v8_142f8 = load i8, i8* %v7_142f8, align 1
  %v9_142f8 = zext i8 %v8_142f8 to i32
  store i32 %v9_142f8, i32* %r3.global-to-local, align 4
  store i32 %v6_142f8, i32* %r1.global-to-local, align 4
  %v8_142fc = add i32 %v7_142fc, -1
  %v9_142fc = inttoptr i32 %v8_142fc to i8*
  store i8 %v8_142f8, i8* %v9_142fc, align 1
  %v10_142fc = load i32, i32* %r0.global-to-local, align 4
  %v11_142fc = add i32 %v10_142fc, -1
  store i32 %v11_142fc, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14304:                               ; preds = %dec_label_pc_1425c
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14304 = icmp eq i32 %v1_1425c, 1
  store i1 %v8_14304, i1* %cpsr_n.global-to-local, align 1
  %v9_14304 = icmp eq i32 %v1_1425c, 2
  store i1 %v9_14304, i1* %cpsr_z.global-to-local, align 1
  %v1_14308 = add i32 %v2_1424c, -1
  %v2_14308 = inttoptr i32 %v1_14308 to i8*
  %v3_14308 = load i8, i8* %v2_14308, align 1
  %v4_14308 = zext i8 %v3_14308 to i32
  store i32 %v4_14308, i32* %r3.global-to-local, align 4
  store i32 %v1_14308, i32* %r1.global-to-local, align 4
  %v3_1430c = add i32 %v2_14250, -1
  %v4_1430c = inttoptr i32 %v3_1430c to i8*
  store i8 %v3_14308, i8* %v4_1430c, align 1
  %v5_1430c = load i32, i32* %r0.global-to-local, align 4
  %v6_1430c = add i32 %v5_1430c, -1
  store i32 %v6_1430c, i32* %r0.global-to-local, align 4
  br i1 %v8_14304, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14304
  %v6_14310 = load i32, i32* %r1.global-to-local, align 4
  %v7_14310 = add i32 %v6_14310, -1
  %v8_14310 = inttoptr i32 %v7_14310 to i8*
  %v9_14310 = load i8, i8* %v8_14310, align 1
  %v10_14310 = zext i8 %v9_14310 to i32
  store i32 %v10_14310, i32* %r3.global-to-local, align 4
  store i32 %v7_14310, i32* %r1.global-to-local, align 4
  %v9_14314 = add i32 %v5_1430c, -2
  %v10_14314 = inttoptr i32 %v9_14314 to i8*
  store i8 %v9_14310, i8* %v10_14314, align 1
  %v11_14314 = load i32, i32* %r0.global-to-local, align 4
  %v12_14314 = add i32 %v11_14314, -1
  store i32 %v12_14314, i32* %r0.global-to-local, align 4
  br i1 %v9_14304, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14318 = load i32, i32* %r1.global-to-local, align 4
  %v9_14318 = add i32 %v8_14318, -1
  %v10_14318 = inttoptr i32 %v9_14318 to i8*
  %v11_14318 = load i8, i8* %v10_14318, align 1
  %v12_14318 = zext i8 %v11_14318 to i32
  store i32 %v12_14318, i32* %r3.global-to-local, align 4
  store i32 %v9_14318, i32* %r1.global-to-local, align 4
  %v11_1431c = add i32 %v11_14314, -2
  %v12_1431c = inttoptr i32 %v11_1431c to i8*
  store i8 %v11_14318, i8* %v12_1431c, align 1
  %v13_1431c = load i32, i32* %r0.global-to-local, align 4
  %v14_1431c = add i32 %v13_1431c, -1
  store i32 %v14_1431c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14304, %bb146
  %v0_1437831 = phi i32 [ %v12_14314, %bb145 ], [ %v6_1430c, %dec_label_pc_14304 ], [ %v14_1431c, %bb146 ]
  %v0_14320 = load i32, i32* %r2.global-to-local, align 4
  %v1_14320 = load i32, i32* @ip, align 4
  %v2_14320 = sub i32 %v0_14320, %v1_14320
  store i32 %v2_14320, i32* %r2.global-to-local, align 4
  %v4_14320 = xor i32 %v1_14320, %v0_14320
  %v5_14320 = xor i32 %v2_14320, %v0_14320
  %v6_14320 = and i32 %v5_14320, %v4_14320
  %v7_14320 = icmp slt i32 %v6_14320, 0
  store i1 %v7_14320, i1* %cpsr_v.global-to-local, align 1
  %v8_14320 = icmp slt i32 %v2_14320, 0
  store i1 %v8_14320, i1* %cpsr_n.global-to-local, align 1
  %v9_14320 = icmp eq i32 %v0_14320, %v1_14320
  store i1 %v9_14320, i1* %cpsr_z.global-to-local, align 1
  %v5_14324 = icmp slt i32 %v0_14320, %v1_14320
  br i1 %v5_14324, label %bb141, label %dec_label_pc_14328

dec_label_pc_14328:                               ; preds = %.thread25
  %v0_14328 = load i32, i32* %r1.global-to-local, align 4
  %v1_14328 = urem i32 %v0_14328, 4
  store i32 %v1_14328, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14328 = icmp eq i32 %v1_14328, 0
  store i1 %v2_14328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14328, label %dec_label_pc_1426c, label %dec_label_pc_14330

dec_label_pc_14330:                               ; preds = %dec_label_pc_14264, %dec_label_pc_14328
  %v0_1437830 = phi i32 [ %v2_14250, %dec_label_pc_14264 ], [ %v0_1437831, %dec_label_pc_14328 ]
  %v0_14424 = phi i32 [ %v2_14254, %dec_label_pc_14264 ], [ %v2_14320, %dec_label_pc_14328 ]
  %v0_14330 = phi i32 [ %v2_1424c, %dec_label_pc_14264 ], [ %v0_14328, %dec_label_pc_14328 ]
  %v0_14338 = phi i32 [ %v1_14264, %dec_label_pc_14264 ], [ %v1_14328, %dec_label_pc_14328 ]
  %v1_14330 = and i32 %v0_14330, -4
  store i32 %v1_14330, i32* %r1.global-to-local, align 4
  %v1_14334 = inttoptr i32 %v1_14330 to i32*
  %v2_14334 = load i32, i32* %v1_14334, align 4
  store i32 %v2_14334, i32* %r3.global-to-local, align 4
  %v7_14338 = icmp ult i32 %v0_14338, 2
  %v2_1441c = add i32 %v0_14424, -12
  %v4_1441c = sub i32 11, %v0_14424
  %v5_1441c = and i32 %v4_1441c, %v0_14424
  %v6_1441c = icmp slt i32 %v5_1441c, 0
  store i1 %v6_1441c, i1* %cpsr_v.global-to-local, align 1
  %v7_1441c = icmp slt i32 %v2_1441c, 0
  store i1 %v7_1441c, i1* %cpsr_n.global-to-local, align 1
  %v8_1441c = icmp eq i32 %v0_14424, 12
  store i1 %v8_1441c, i1* %cpsr_z.global-to-local, align 1
  %v5_14420 = icmp slt i32 %v0_14424, 12
  br i1 %v7_14338, label %dec_label_pc_1441c, label %dec_label_pc_14340

dec_label_pc_14340:                               ; preds = %dec_label_pc_14330
  %v8_14338 = icmp eq i32 %v0_14338, 2
  br i1 %v8_14338, label %dec_label_pc_143b0, label %dec_label_pc_14344

dec_label_pc_14344:                               ; preds = %dec_label_pc_14340
  br i1 %v5_14420, label %dec_label_pc_14390, label %dec_label_pc_1434c

dec_label_pc_1434c:                               ; preds = %dec_label_pc_14344
  store i32 %v2_1441c, i32* %r2.global-to-local, align 4
  %v3_14350 = load i32, i32* @r4, align 4
  store i32 %v3_14350, i32* %stack_var_-12, align 4
  %v6_14350 = load i32, i32* @r5, align 4
  store i32 %v6_14350, i32* %stack_var_-8, align 4
  %v9_14350 = load i32, i32* @lr, align 4
  br label %dec_label_pc_14354

dec_label_pc_14354:                               ; preds = %dec_label_pc_14354.dec_label_pc_14354_crit_edge, %dec_label_pc_1434c
  %v0_14378 = phi i32 [ %v1_14378, %dec_label_pc_14354.dec_label_pc_14354_crit_edge ], [ %v0_1437830, %dec_label_pc_1434c ]
  %v0_14358 = phi i32 [ %v0_14358.pre, %dec_label_pc_14354.dec_label_pc_14354_crit_edge ], [ %v1_14330, %dec_label_pc_1434c ]
  %v0_14354 = phi i32 [ %v0_14354.pre, %dec_label_pc_14354.dec_label_pc_14354_crit_edge ], [ %v2_14334, %dec_label_pc_1434c ]
  %v3_14354 = mul i32 %v0_14354, 256
  store i32 %v3_14354, i32* %lr.global-to-local, align 4
  %v1_14358 = add i32 %v0_14358, -4
  %v2_14358 = inttoptr i32 %v1_14358 to i32*
  %v3_14358 = load i32, i32* %v2_14358, align 4
  store i32 %v3_14358, i32* %r3.global-to-local, align 4
  %v4_14358 = add i32 %v0_14358, -8
  %v5_14358 = inttoptr i32 %v4_14358 to i32*
  %v6_14358 = load i32, i32* %v5_14358, align 4
  store i32 %v6_14358, i32* %r4.global-to-local, align 4
  %v7_14358 = add i32 %v0_14358, -12
  %v8_14358 = inttoptr i32 %v7_14358 to i32*
  %v9_14358 = load i32, i32* %v8_14358, align 4
  store i32 %v9_14358, i32* %r5.global-to-local, align 4
  %v10_14358 = add i32 %v0_14358, -16
  %v11_14358 = inttoptr i32 %v10_14358 to i32*
  %v12_14358 = load i32, i32* %v11_14358, align 4
  store i32 %v10_14358, i32* %r1.global-to-local, align 4
  %v4_1435c = udiv i32 %v12_14358, 16777216
  %v5_1435c = or i32 %v4_1435c, %v3_14354
  store i32 %v5_1435c, i32* %lr.global-to-local, align 4
  %v3_14360 = mul i32 %v12_14358, 256
  %v4_14364 = udiv i32 %v9_14358, 16777216
  %v5_14364 = or i32 %v3_14360, %v4_14364
  store i32 %v5_14364, i32* @ip, align 4
  %v3_14368 = mul i32 %v9_14358, 256
  %v4_1436c = udiv i32 %v6_14358, 16777216
  %v5_1436c = or i32 %v3_14368, %v4_1436c
  store i32 %v5_1436c, i32* %r5.global-to-local, align 4
  %v3_14370 = mul i32 %v6_14358, 256
  %v4_14374 = udiv i32 %v3_14358, 16777216
  %v5_14374 = or i32 %v3_14370, %v4_14374
  store i32 %v5_14374, i32* %r4.global-to-local, align 4
  %v1_14378 = add i32 %v0_14378, -16
  %v2_14378 = inttoptr i32 %v1_14378 to i32*
  store i32 %v5_14374, i32* %v2_14378, align 4
  %v4_14378 = add i32 %v0_14378, -12
  %v5_14378 = inttoptr i32 %v4_14378 to i32*
  %v6_14378 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14378, i32* %v5_14378, align 4
  %v7_14378 = add i32 %v0_14378, -8
  %v8_14378 = inttoptr i32 %v7_14378 to i32*
  %v9_14378 = load i32, i32* @ip, align 4
  store i32 %v9_14378, i32* %v8_14378, align 4
  %v10_14378 = add i32 %v0_14378, -4
  %v11_14378 = inttoptr i32 %v10_14378 to i32*
  %v12_14378 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14378, i32* %v11_14378, align 4
  store i32 %v1_14378, i32* %r0.global-to-local, align 4
  %v0_1437c = load i32, i32* %r2.global-to-local, align 4
  %v2_1437c = add i32 %v0_1437c, -16
  store i32 %v2_1437c, i32* %r2.global-to-local, align 4
  %v6_14380 = icmp slt i32 %v0_1437c, 16
  br i1 %v6_14380, label %dec_label_pc_14384, label %dec_label_pc_14354.dec_label_pc_14354_crit_edge

dec_label_pc_14354.dec_label_pc_14354_crit_edge:  ; preds = %dec_label_pc_14354
  %v0_14354.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14358.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14354

dec_label_pc_14384:                               ; preds = %dec_label_pc_14354
  %v2_14384 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14384, i32* @r4, align 4
  %v5_14384 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14384, i32* @r5, align 4
  store i32 %v9_14350, i32* @lr, align 4
  %v2_14388 = add i32 %v0_1437c, -4
  store i32 %v2_14388, i32* %r2.global-to-local, align 4
  %v4_14388 = add i32 %v0_1437c, 2147483632
  %v5_14388 = and i32 %v2_14388, %v4_14388
  %v6_14388 = icmp slt i32 %v5_14388, 0
  store i1 %v6_14388, i1* %cpsr_v.global-to-local, align 1
  %v7_14388 = icmp slt i32 %v2_14388, 0
  store i1 %v7_14388, i1* %cpsr_n.global-to-local, align 1
  %v8_14388 = icmp eq i32 %v2_14388, 0
  store i1 %v8_14388, i1* %cpsr_z.global-to-local, align 1
  %v5_1438c = icmp slt i32 %v2_1437c, -12
  br i1 %v5_1438c, label %dec_label_pc_143a8, label %dec_label_pc_14390

dec_label_pc_14390:                               ; preds = %dec_label_pc_14384, %dec_label_pc_14344, %dec_label_pc_14390
  %v1_1439c = phi i32 [ %v5_1439c, %dec_label_pc_14390 ], [ %v1_14378, %dec_label_pc_14384 ], [ %v0_1437830, %dec_label_pc_14344 ]
  %v0_14390 = load i32, i32* %r3.global-to-local, align 4
  %v3_14390 = mul i32 %v0_14390, 256
  store i32 %v3_14390, i32* %ip.global-to-local, align 4
  %v0_14394 = load i32, i32* %r1.global-to-local, align 4
  %v1_14394 = add i32 %v0_14394, -4
  %v2_14394 = inttoptr i32 %v1_14394 to i32*
  %v3_14394 = load i32, i32* %v2_14394, align 4
  store i32 %v3_14394, i32* %r3.global-to-local, align 4
  store i32 %v1_14394, i32* %r1.global-to-local, align 4
  %v4_14398 = udiv i32 %v3_14394, 16777216
  %v5_14398 = or i32 %v4_14398, %v3_14390
  store i32 %v5_14398, i32* @ip, align 4
  %v2_1439c = add i32 %v1_1439c, -4
  %v3_1439c = inttoptr i32 %v2_1439c to i32*
  store i32 %v5_14398, i32* %v3_1439c, align 4
  %v4_1439c = load i32, i32* %r0.global-to-local, align 4
  %v5_1439c = add i32 %v4_1439c, -4
  store i32 %v5_1439c, i32* %r0.global-to-local, align 4
  %v0_143a0 = load i32, i32* %r2.global-to-local, align 4
  %v2_143a0 = add i32 %v0_143a0, -4
  store i32 %v2_143a0, i32* %r2.global-to-local, align 4
  %v6_143a4 = icmp slt i32 %v0_143a0, 4
  br i1 %v6_143a4, label %dec_label_pc_143a8.loopexit, label %dec_label_pc_14390

dec_label_pc_143a8.loopexit:                      ; preds = %dec_label_pc_14390
  %v4_143a0 = sub i32 3, %v0_143a0
  %v5_143a0 = and i32 %v4_143a0, %v0_143a0
  %v6_143a0 = icmp slt i32 %v5_143a0, 0
  %v7_143a0 = icmp slt i32 %v2_143a0, 0
  store i1 %v6_143a0, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_143a0, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_143a8

dec_label_pc_143a8:                               ; preds = %dec_label_pc_143a8.loopexit, %dec_label_pc_14384
  %v2_142ec62 = phi i32 [ %v5_1439c, %dec_label_pc_143a8.loopexit ], [ %v1_14378, %dec_label_pc_14384 ]
  %v0_142dc58 = phi i32 [ %v2_143a0, %dec_label_pc_143a8.loopexit ], [ %v2_14388, %dec_label_pc_14384 ]
  %v0_143a8 = load i32, i32* %r1.global-to-local, align 4
  %v1_143a8 = add i32 %v0_143a8, 3
  store i32 %v1_143a8, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_143b0:                               ; preds = %dec_label_pc_14340
  br i1 %v5_14420, label %dec_label_pc_143fc, label %dec_label_pc_143b8

dec_label_pc_143b8:                               ; preds = %dec_label_pc_143b0
  store i32 %v2_1441c, i32* %r2.global-to-local, align 4
  %v3_143bc = load i32, i32* @r4, align 4
  store i32 %v3_143bc, i32* %stack_var_-12, align 4
  %v6_143bc = load i32, i32* @r5, align 4
  store i32 %v6_143bc, i32* %stack_var_-8, align 4
  %v9_143bc = load i32, i32* @lr, align 4
  br label %dec_label_pc_143c0

dec_label_pc_143c0:                               ; preds = %dec_label_pc_143c0.dec_label_pc_143c0_crit_edge, %dec_label_pc_143b8
  %v0_143e4 = phi i32 [ %v1_143e4, %dec_label_pc_143c0.dec_label_pc_143c0_crit_edge ], [ %v0_1437830, %dec_label_pc_143b8 ]
  %v0_143c4 = phi i32 [ %v0_143c4.pre, %dec_label_pc_143c0.dec_label_pc_143c0_crit_edge ], [ %v1_14330, %dec_label_pc_143b8 ]
  %v0_143c0 = phi i32 [ %v0_143c0.pre, %dec_label_pc_143c0.dec_label_pc_143c0_crit_edge ], [ %v2_14334, %dec_label_pc_143b8 ]
  %v3_143c0 = mul i32 %v0_143c0, 65536
  store i32 %v3_143c0, i32* %lr.global-to-local, align 4
  %v1_143c4 = add i32 %v0_143c4, -4
  %v2_143c4 = inttoptr i32 %v1_143c4 to i32*
  %v3_143c4 = load i32, i32* %v2_143c4, align 4
  store i32 %v3_143c4, i32* %r3.global-to-local, align 4
  %v4_143c4 = add i32 %v0_143c4, -8
  %v5_143c4 = inttoptr i32 %v4_143c4 to i32*
  %v6_143c4 = load i32, i32* %v5_143c4, align 4
  store i32 %v6_143c4, i32* %r4.global-to-local, align 4
  %v7_143c4 = add i32 %v0_143c4, -12
  %v8_143c4 = inttoptr i32 %v7_143c4 to i32*
  %v9_143c4 = load i32, i32* %v8_143c4, align 4
  store i32 %v9_143c4, i32* %r5.global-to-local, align 4
  %v10_143c4 = add i32 %v0_143c4, -16
  %v11_143c4 = inttoptr i32 %v10_143c4 to i32*
  %v12_143c4 = load i32, i32* %v11_143c4, align 4
  store i32 %v10_143c4, i32* %r1.global-to-local, align 4
  %v4_143c8 = udiv i32 %v12_143c4, 65536
  %v5_143c8 = or i32 %v4_143c8, %v3_143c0
  store i32 %v5_143c8, i32* %lr.global-to-local, align 4
  %v3_143cc = mul i32 %v12_143c4, 65536
  %v4_143d0 = udiv i32 %v9_143c4, 65536
  %v5_143d0 = or i32 %v3_143cc, %v4_143d0
  store i32 %v5_143d0, i32* @ip, align 4
  %v3_143d4 = mul i32 %v9_143c4, 65536
  %v4_143d8 = udiv i32 %v6_143c4, 65536
  %v5_143d8 = or i32 %v3_143d4, %v4_143d8
  store i32 %v5_143d8, i32* %r5.global-to-local, align 4
  %v3_143dc = mul i32 %v6_143c4, 65536
  %v4_143e0 = udiv i32 %v3_143c4, 65536
  %v5_143e0 = or i32 %v3_143dc, %v4_143e0
  store i32 %v5_143e0, i32* %r4.global-to-local, align 4
  %v1_143e4 = add i32 %v0_143e4, -16
  %v2_143e4 = inttoptr i32 %v1_143e4 to i32*
  store i32 %v5_143e0, i32* %v2_143e4, align 4
  %v4_143e4 = add i32 %v0_143e4, -12
  %v5_143e4 = inttoptr i32 %v4_143e4 to i32*
  %v6_143e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_143e4, i32* %v5_143e4, align 4
  %v7_143e4 = add i32 %v0_143e4, -8
  %v8_143e4 = inttoptr i32 %v7_143e4 to i32*
  %v9_143e4 = load i32, i32* @ip, align 4
  store i32 %v9_143e4, i32* %v8_143e4, align 4
  %v10_143e4 = add i32 %v0_143e4, -4
  %v11_143e4 = inttoptr i32 %v10_143e4 to i32*
  %v12_143e4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_143e4, i32* %v11_143e4, align 4
  store i32 %v1_143e4, i32* %r0.global-to-local, align 4
  %v0_143e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_143e8 = add i32 %v0_143e8, -16
  store i32 %v2_143e8, i32* %r2.global-to-local, align 4
  %v6_143ec = icmp slt i32 %v0_143e8, 16
  br i1 %v6_143ec, label %dec_label_pc_143f0, label %dec_label_pc_143c0.dec_label_pc_143c0_crit_edge

dec_label_pc_143c0.dec_label_pc_143c0_crit_edge:  ; preds = %dec_label_pc_143c0
  %v0_143c0.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_143c4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_143c0

dec_label_pc_143f0:                               ; preds = %dec_label_pc_143c0
  %v2_143f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_143f0, i32* @r4, align 4
  %v5_143f0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_143f0, i32* @r5, align 4
  store i32 %v9_143bc, i32* @lr, align 4
  %v2_143f4 = add i32 %v0_143e8, -4
  store i32 %v2_143f4, i32* %r2.global-to-local, align 4
  %v4_143f4 = add i32 %v0_143e8, 2147483632
  %v5_143f4 = and i32 %v2_143f4, %v4_143f4
  %v6_143f4 = icmp slt i32 %v5_143f4, 0
  store i1 %v6_143f4, i1* %cpsr_v.global-to-local, align 1
  %v7_143f4 = icmp slt i32 %v2_143f4, 0
  store i1 %v7_143f4, i1* %cpsr_n.global-to-local, align 1
  %v8_143f4 = icmp eq i32 %v2_143f4, 0
  store i1 %v8_143f4, i1* %cpsr_z.global-to-local, align 1
  %v5_143f8 = icmp slt i32 %v2_143e8, -12
  br i1 %v5_143f8, label %dec_label_pc_14414, label %dec_label_pc_143fc

dec_label_pc_143fc:                               ; preds = %dec_label_pc_143f0, %dec_label_pc_143b0, %dec_label_pc_143fc
  %v1_14408 = phi i32 [ %v5_14408, %dec_label_pc_143fc ], [ %v1_143e4, %dec_label_pc_143f0 ], [ %v0_1437830, %dec_label_pc_143b0 ]
  %v0_143fc = load i32, i32* %r3.global-to-local, align 4
  %v3_143fc = mul i32 %v0_143fc, 65536
  store i32 %v3_143fc, i32* %ip.global-to-local, align 4
  %v0_14400 = load i32, i32* %r1.global-to-local, align 4
  %v1_14400 = add i32 %v0_14400, -4
  %v2_14400 = inttoptr i32 %v1_14400 to i32*
  %v3_14400 = load i32, i32* %v2_14400, align 4
  store i32 %v3_14400, i32* %r3.global-to-local, align 4
  store i32 %v1_14400, i32* %r1.global-to-local, align 4
  %v4_14404 = udiv i32 %v3_14400, 65536
  %v5_14404 = or i32 %v4_14404, %v3_143fc
  store i32 %v5_14404, i32* @ip, align 4
  %v2_14408 = add i32 %v1_14408, -4
  %v3_14408 = inttoptr i32 %v2_14408 to i32*
  store i32 %v5_14404, i32* %v3_14408, align 4
  %v4_14408 = load i32, i32* %r0.global-to-local, align 4
  %v5_14408 = add i32 %v4_14408, -4
  store i32 %v5_14408, i32* %r0.global-to-local, align 4
  %v0_1440c = load i32, i32* %r2.global-to-local, align 4
  %v2_1440c = add i32 %v0_1440c, -4
  store i32 %v2_1440c, i32* %r2.global-to-local, align 4
  %v6_14410 = icmp slt i32 %v0_1440c, 4
  br i1 %v6_14410, label %dec_label_pc_14414.loopexit, label %dec_label_pc_143fc

dec_label_pc_14414.loopexit:                      ; preds = %dec_label_pc_143fc
  %v4_1440c = sub i32 3, %v0_1440c
  %v5_1440c = and i32 %v4_1440c, %v0_1440c
  %v6_1440c = icmp slt i32 %v5_1440c, 0
  %v7_1440c = icmp slt i32 %v2_1440c, 0
  store i1 %v6_1440c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1440c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14414

dec_label_pc_14414:                               ; preds = %dec_label_pc_14414.loopexit, %dec_label_pc_143f0
  %v2_142ec63 = phi i32 [ %v5_14408, %dec_label_pc_14414.loopexit ], [ %v1_143e4, %dec_label_pc_143f0 ]
  %v0_142dc59 = phi i32 [ %v2_1440c, %dec_label_pc_14414.loopexit ], [ %v2_143f4, %dec_label_pc_143f0 ]
  %v0_14414 = load i32, i32* %r1.global-to-local, align 4
  %v1_14414 = add i32 %v0_14414, 2
  store i32 %v1_14414, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1441c:                               ; preds = %dec_label_pc_14330
  br i1 %v5_14420, label %dec_label_pc_14468, label %dec_label_pc_14424

dec_label_pc_14424:                               ; preds = %dec_label_pc_1441c
  store i32 %v2_1441c, i32* %r2.global-to-local, align 4
  %v3_14428 = load i32, i32* @r4, align 4
  store i32 %v3_14428, i32* %stack_var_-12, align 4
  %v6_14428 = load i32, i32* @r5, align 4
  store i32 %v6_14428, i32* %stack_var_-8, align 4
  %v9_14428 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1442c

dec_label_pc_1442c:                               ; preds = %dec_label_pc_1442c.dec_label_pc_1442c_crit_edge, %dec_label_pc_14424
  %v0_14450 = phi i32 [ %v1_14450, %dec_label_pc_1442c.dec_label_pc_1442c_crit_edge ], [ %v0_1437830, %dec_label_pc_14424 ]
  %v0_14430 = phi i32 [ %v0_14430.pre, %dec_label_pc_1442c.dec_label_pc_1442c_crit_edge ], [ %v1_14330, %dec_label_pc_14424 ]
  %v0_1442c = phi i32 [ %v0_1442c.pre, %dec_label_pc_1442c.dec_label_pc_1442c_crit_edge ], [ %v2_14334, %dec_label_pc_14424 ]
  %v3_1442c = mul i32 %v0_1442c, 16777216
  store i32 %v3_1442c, i32* %lr.global-to-local, align 4
  %v1_14430 = add i32 %v0_14430, -4
  %v2_14430 = inttoptr i32 %v1_14430 to i32*
  %v3_14430 = load i32, i32* %v2_14430, align 4
  store i32 %v3_14430, i32* %r3.global-to-local, align 4
  %v4_14430 = add i32 %v0_14430, -8
  %v5_14430 = inttoptr i32 %v4_14430 to i32*
  %v6_14430 = load i32, i32* %v5_14430, align 4
  store i32 %v6_14430, i32* %r4.global-to-local, align 4
  %v7_14430 = add i32 %v0_14430, -12
  %v8_14430 = inttoptr i32 %v7_14430 to i32*
  %v9_14430 = load i32, i32* %v8_14430, align 4
  store i32 %v9_14430, i32* %r5.global-to-local, align 4
  %v10_14430 = add i32 %v0_14430, -16
  %v11_14430 = inttoptr i32 %v10_14430 to i32*
  %v12_14430 = load i32, i32* %v11_14430, align 4
  store i32 %v10_14430, i32* %r1.global-to-local, align 4
  %v4_14434 = udiv i32 %v12_14430, 256
  %v5_14434 = or i32 %v4_14434, %v3_1442c
  store i32 %v5_14434, i32* %lr.global-to-local, align 4
  %v3_14438 = mul i32 %v12_14430, 16777216
  %v4_1443c = udiv i32 %v9_14430, 256
  %v5_1443c = or i32 %v3_14438, %v4_1443c
  store i32 %v5_1443c, i32* @ip, align 4
  %v3_14440 = mul i32 %v9_14430, 16777216
  %v4_14444 = udiv i32 %v6_14430, 256
  %v5_14444 = or i32 %v3_14440, %v4_14444
  store i32 %v5_14444, i32* %r5.global-to-local, align 4
  %v3_14448 = mul i32 %v6_14430, 16777216
  %v4_1444c = udiv i32 %v3_14430, 256
  %v5_1444c = or i32 %v3_14448, %v4_1444c
  store i32 %v5_1444c, i32* %r4.global-to-local, align 4
  %v1_14450 = add i32 %v0_14450, -16
  %v2_14450 = inttoptr i32 %v1_14450 to i32*
  store i32 %v5_1444c, i32* %v2_14450, align 4
  %v4_14450 = add i32 %v0_14450, -12
  %v5_14450 = inttoptr i32 %v4_14450 to i32*
  %v6_14450 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14450, i32* %v5_14450, align 4
  %v7_14450 = add i32 %v0_14450, -8
  %v8_14450 = inttoptr i32 %v7_14450 to i32*
  %v9_14450 = load i32, i32* @ip, align 4
  store i32 %v9_14450, i32* %v8_14450, align 4
  %v10_14450 = add i32 %v0_14450, -4
  %v11_14450 = inttoptr i32 %v10_14450 to i32*
  %v12_14450 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14450, i32* %v11_14450, align 4
  store i32 %v1_14450, i32* %r0.global-to-local, align 4
  %v0_14454 = load i32, i32* %r2.global-to-local, align 4
  %v2_14454 = add i32 %v0_14454, -16
  store i32 %v2_14454, i32* %r2.global-to-local, align 4
  %v6_14458 = icmp slt i32 %v0_14454, 16
  br i1 %v6_14458, label %dec_label_pc_1445c, label %dec_label_pc_1442c.dec_label_pc_1442c_crit_edge

dec_label_pc_1442c.dec_label_pc_1442c_crit_edge:  ; preds = %dec_label_pc_1442c
  %v0_1442c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14430.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1442c

dec_label_pc_1445c:                               ; preds = %dec_label_pc_1442c
  %v2_1445c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1445c, i32* @r4, align 4
  %v5_1445c = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_1445c, i32* @r5, align 4
  store i32 %v9_14428, i32* @lr, align 4
  %v2_14460 = add i32 %v0_14454, -4
  store i32 %v2_14460, i32* %r2.global-to-local, align 4
  %v4_14460 = add i32 %v0_14454, 2147483632
  %v5_14460 = and i32 %v2_14460, %v4_14460
  %v6_14460 = icmp slt i32 %v5_14460, 0
  store i1 %v6_14460, i1* %cpsr_v.global-to-local, align 1
  %v7_14460 = icmp slt i32 %v2_14460, 0
  store i1 %v7_14460, i1* %cpsr_n.global-to-local, align 1
  %v8_14460 = icmp eq i32 %v2_14460, 0
  store i1 %v8_14460, i1* %cpsr_z.global-to-local, align 1
  %v5_14464 = icmp slt i32 %v2_14454, -12
  br i1 %v5_14464, label %dec_label_pc_14480, label %dec_label_pc_14468

dec_label_pc_14468:                               ; preds = %dec_label_pc_1445c, %dec_label_pc_1441c, %dec_label_pc_14468
  %v1_14474 = phi i32 [ %v5_14474, %dec_label_pc_14468 ], [ %v1_14450, %dec_label_pc_1445c ], [ %v0_1437830, %dec_label_pc_1441c ]
  %v0_14468 = load i32, i32* %r3.global-to-local, align 4
  %v3_14468 = mul i32 %v0_14468, 16777216
  store i32 %v3_14468, i32* %ip.global-to-local, align 4
  %v0_1446c = load i32, i32* %r1.global-to-local, align 4
  %v1_1446c = add i32 %v0_1446c, -4
  %v2_1446c = inttoptr i32 %v1_1446c to i32*
  %v3_1446c = load i32, i32* %v2_1446c, align 4
  store i32 %v3_1446c, i32* %r3.global-to-local, align 4
  store i32 %v1_1446c, i32* %r1.global-to-local, align 4
  %v4_14470 = udiv i32 %v3_1446c, 256
  %v5_14470 = or i32 %v4_14470, %v3_14468
  store i32 %v5_14470, i32* @ip, align 4
  %v2_14474 = add i32 %v1_14474, -4
  %v3_14474 = inttoptr i32 %v2_14474 to i32*
  store i32 %v5_14470, i32* %v3_14474, align 4
  %v4_14474 = load i32, i32* %r0.global-to-local, align 4
  %v5_14474 = add i32 %v4_14474, -4
  store i32 %v5_14474, i32* %r0.global-to-local, align 4
  %v0_14478 = load i32, i32* %r2.global-to-local, align 4
  %v2_14478 = add i32 %v0_14478, -4
  store i32 %v2_14478, i32* %r2.global-to-local, align 4
  %v6_1447c = icmp slt i32 %v0_14478, 4
  br i1 %v6_1447c, label %dec_label_pc_14480.loopexit, label %dec_label_pc_14468

dec_label_pc_14480.loopexit:                      ; preds = %dec_label_pc_14468
  %v4_14478 = sub i32 3, %v0_14478
  %v5_14478 = and i32 %v4_14478, %v0_14478
  %v6_14478 = icmp slt i32 %v5_14478, 0
  %v7_14478 = icmp slt i32 %v2_14478, 0
  store i1 %v6_14478, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14478, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14480

dec_label_pc_14480:                               ; preds = %dec_label_pc_14480.loopexit, %dec_label_pc_1445c
  %v2_142ec64 = phi i32 [ %v5_14474, %dec_label_pc_14480.loopexit ], [ %v1_14450, %dec_label_pc_1445c ]
  %v0_142dc60 = phi i32 [ %v2_14478, %dec_label_pc_14480.loopexit ], [ %v2_14460, %dec_label_pc_1445c ]
  %v0_14480 = load i32, i32* %r1.global-to-local, align 4
  %v1_14480 = add i32 %v0_14480, 1
  store i32 %v1_14480, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_14474, { 0, 2, 1 }
  uselistorder i32 %v3_14468, { 1, 0 }
  uselistorder i32 %v2_14460, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14450, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14430, { 1, 0 }
  uselistorder i32 %v3_1442c, { 1, 0 }
  uselistorder i32 %v0_14430, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14450, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14408, { 0, 2, 1 }
  uselistorder i32 %v3_143fc, { 1, 0 }
  uselistorder i32 %v2_143f4, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_143e4, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_143c4, { 1, 0 }
  uselistorder i32 %v3_143c0, { 1, 0 }
  uselistorder i32 %v0_143c4, { 3, 2, 1, 0 }
  uselistorder i32 %v0_143e4, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1439c, { 0, 2, 1 }
  uselistorder i32 %v3_14390, { 1, 0 }
  uselistorder i32 %v2_14388, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14378, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14358, { 1, 0 }
  uselistorder i32 %v3_14354, { 1, 0 }
  uselistorder i32 %v0_14358, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14378, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14420, { 2, 0, 1 }
  uselistorder i32 %v0_14338, { 1, 0 }
  uselistorder i32 %v0_14424, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1437830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14328, { 2, 1, 0 }
  uselistorder i32 %v0_14328, { 2, 0, 1 }
  uselistorder i32 %v2_14320, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14320, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14320, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1437831, { 2, 1, 0 }
  uselistorder i32 %v11_142fc, { 1, 0 }
  uselistorder i32 %v7_142fc, { 1, 0 }
  uselistorder i32 %v1_142dc, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_142dc, { 1, 2, 0, 3 }
  uselistorder i32 %v2_142e0, { 1, 0 }
  uselistorder i32 %v7_142d4, { 0, 2, 1 }
  uselistorder i32 %v10_142d0, { 1, 0 }
  uselistorder i32 %v9_142c8, { 1, 0, 2 }
  uselistorder i32 %v6_142c4, { 1, 0 }
  uselistorder i32 %v2_142bc, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_142bc, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_142cc, { 0, 3, 2, 1 }
  uselistorder i32 %v7_142b0, { 0, 2, 1 }
  uselistorder i32 %v13_142ac, { 1, 0 }
  uselistorder i32 %v4_142a8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_142a8, { 2, 0, 1 }
  uselistorder i32 %v6_142b0, { 0, 3, 2, 1 }
  uselistorder i32 %v7_142a0, { 0, 2, 1 }
  uselistorder i32 %v16_1429c, { 1, 0 }
  uselistorder i32 %v4_14298, { 1, 2, 0 }
  uselistorder i32 %v0_142a8.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_142a0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_1428c, { 0, 3, 2, 1 }
  uselistorder i32 %v10_14288, { 1, 0 }
  uselistorder i32 %v1_14284, { 1, 0 }
  uselistorder i32 %v10_14280, { 1, 0 }
  uselistorder i32 %v0_14280, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14284, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_14278, { 0, 2, 1 }
  uselistorder i32 %v2_1426c, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_1426c, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_1428448, { 1, 2, 0 }
  uselistorder i32 %v1_14264, { 2, 1, 0 }
  uselistorder i32 %v1_1425c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_14254, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_14250, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_1424c, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_1424c, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_14238, { 0, 2, 1 }
  uselistorder i32 %v3_1422c, { 1, 0 }
  uselistorder i32 %v2_14224, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14214, { 1, 0, 3, 2 }
  uselistorder i32 %v8_141f4, { 1, 0, 2 }
  uselistorder i32 %v5_141f4, { 1, 0, 2 }
  uselistorder i32 %v2_141f4, { 1, 0, 2 }
  uselistorder i32 %v3_141f0, { 1, 0 }
  uselistorder i32 %v0_141f4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14214, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_141cc, { 0, 2, 1 }
  uselistorder i32 %v3_141c0, { 1, 0 }
  uselistorder i32 %v2_141b8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_141a8, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14188, { 1, 0, 2 }
  uselistorder i32 %v5_14188, { 1, 0, 2 }
  uselistorder i32 %v2_14188, { 1, 0, 2 }
  uselistorder i32 %v3_14184, { 1, 0 }
  uselistorder i32 %v0_14188, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_141a8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_14160, { 0, 2, 1 }
  uselistorder i32 %v3_14154, { 1, 0 }
  uselistorder i32 %v2_1414c, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_1413c, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1411c, { 1, 0, 2 }
  uselistorder i32 %v5_1411c, { 1, 0, 2 }
  uselistorder i32 %v2_1411c, { 1, 0, 2 }
  uselistorder i32 %v3_14118, { 1, 0 }
  uselistorder i32 %v0_1411c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1413c, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_141e4, { 2, 0, 1 }
  uselistorder i32 %v0_141e8, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_1413c74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_140ec, { 1, 0 }
  uselistorder i32 %v0_140ec, { 3, 1, 0, 2 }
  uselistorder i32 %v2_140e4, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_140e4, { 1, 2, 0, 3 }
  uselistorder i32 %v0_140e4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_1413c75, { 2, 1, 0 }
  uselistorder i32 %v1_140c4, { 1, 0, 2 }
  uselistorder i32 %v1_1409c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1409c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_14088, { 1, 0, 2 }
  uselistorder i32 %v6_14084, { 1, 0 }
  uselistorder i32 %v2_1407c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1407c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1408c, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_14074, { 0, 2, 1 }
  uselistorder i32 %v3_14074, { 3, 0, 1, 2 }
  uselistorder i1 %v0_14074, { 1, 0 }
  uselistorder i1 %v1_14074, { 1, 0 }
  uselistorder i32 %v3_14070, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_14068, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_14054, { 1, 2, 0 }
  uselistorder i32 %v12_14048, { 0, 1, 3, 2 }
  uselistorder i32 %v0_1403c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14040, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_14030, { 0, 2, 1 }
  uselistorder i32 %v2_14028, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14028, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14020, { 1, 0 }
  uselistorder i32 %v1_14018, { 2, 1, 0 }
  uselistorder i32 %v2_14010, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14010, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14000, { 1, 0 }
  uselistorder i32 %v1_14000, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14000, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 49, 47, 53, 48, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 22, 23, 1, 0, 10, 12, 11, 13, 2, 15, 25, 14, 24, 16, 26, 17, 27, 18, 28, 19, 29, 30, 20, 6, 21, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 58, 60, 61, 62, 64, 63, 66, 65, 67, 1, 68, 69, 2, 70, 0, 3, 71, 72, 73, 74, 75, 78, 76, 77, 79, 80, 81, 85, 86, 87, 88, 82, 83, 84, 89, 92, 93, 94, 90, 91, 95, 96, 97, 99, 98, 100, 4, 101, 103, 104, 102, 105, 106, 5, 107, 110, 111, 108, 112, 109, 113, 114, 115, 116, 117, 155, 119, 118, 156, 121, 120, 122, 124, 123, 126, 125, 157, 128, 127, 158, 130, 129, 131, 133, 132, 135, 134, 6, 136, 138, 139, 137, 140, 141, 7, 142, 144, 145, 146, 143, 147, 8, 148, 152, 153, 154, 149, 150, 151 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 51, 50, 52, 54, 53, 56, 55, 58, 57, 60, 59, 61, 62, 69, 63, 70, 64, 71, 65, 72, 73, 66, 74, 67, 75, 68, 77, 76, 81, 78, 82, 79, 83, 80, 87, 84, 88, 85, 89, 86, 90, 91, 92, 97, 93, 98, 94, 99, 95, 100, 96, 101, 102, 103, 104, 105, 106, 108, 107, 110, 109, 111, 112, 114, 113, 119, 115, 120, 116, 121, 117, 122, 118, 124, 123, 125, 128, 129, 126, 127, 130, 131, 132, 135, 133, 136, 134, 137, 140, 141, 138, 139, 142, 143, 144, 147, 145, 148, 146, 149, 150, 151, 152, 159, 153, 160, 161, 154, 162, 157, 163, 155, 164, 165, 156, 158, 166, 167, 171, 168, 172, 173, 169, 170, 174, 175, 176, 178, 177, 179 }
  uselistorder i32* @r5, { 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 151, 152, 153, 154, 155, 156, 157, 158, 159, 163, 160, 161, 162, 164, 591, 592, 593, 594, 595, 0, 596, 597, 201, 202, 203, 204, 205, 206, 478, 479, 480, 481, 482, 483, 484, 491, 485, 486, 487, 488, 489, 490, 527, 528, 529, 536, 537, 538, 539, 530, 531, 532, 533, 534, 535, 29, 30, 31, 165, 166, 3, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 71, 72, 21, 20, 22, 23, 24, 25, 26, 73, 74, 27, 28, 75, 76, 77, 78, 79, 80, 89, 90, 91, 81, 82, 83, 84, 85, 86, 87, 88, 4, 113, 114, 115, 116, 117, 118, 119, 210, 211, 212, 213, 214, 215, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 1, 112, 120, 121, 122, 123, 124, 125, 126, 127, 5, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 2, 150, 178, 179, 180, 181, 182, 8, 183, 184, 185, 186, 187, 188, 189, 190, 9, 191, 192, 193, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 6, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 7, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 194, 195, 196, 197, 198, 199, 200, 207, 208, 209 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 9, 10, 11, 23, 24, 15, 1, 12, 2, 13, 3, 14, 16, 17, 18, 4, 19, 20, 0, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 36, 37, 6, 38, 39, 40, 7, 41, 42, 43, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 11, 12, 9, 10, 0, 2, 4, 3, 5, 6, 7, 8 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 73, 74, 38, 39, 1, 75, 76, 36, 37, 16, 15, 67, 46, 68, 47, 55, 59, 40, 41, 42, 43, 44, 45, 62, 48, 49, 50, 51, 52, 53, 54, 56, 57, 63, 58, 64, 60, 61, 69, 70, 71, 65, 66, 72, 17, 18, 19, 20, 2, 79, 21, 3, 80, 22, 23, 4, 81, 24, 82, 25, 5, 26, 27, 6, 28, 7, 8, 9, 10, 11, 12, 83, 29, 13, 84, 30, 85, 86, 87, 31, 32, 14, 88, 33, 89, 34, 77, 35, 78 }
  uselistorder i32* @lr, { 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 0, 117, 118, 119, 1, 120, 121, 122, 2, 123, 124, 125, 126, 127, 128, 129, 130, 34, 35, 131, 132, 133, 134, 135, 86, 87, 88, 89, 90, 91, 92, 93, 36, 37, 38, 39, 40, 6, 94, 4, 5, 95, 47, 48, 96, 58, 59, 60, 61, 62, 49, 50, 51, 52, 53, 7, 8, 9, 10, 13, 16, 3, 17, 14, 15, 11, 12, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 97, 98, 99, 100, 101, 102, 18, 19, 20, 21, 41, 42, 54, 55, 56, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 103, 104, 105, 106, 43, 44, 45, 46 }
  uselistorder i32 16, { 31, 32, 33, 198, 34, 199, 200, 35, 201, 202, 36, 203, 204, 205, 206, 207, 208, 111, 112, 90, 91, 116, 113, 114, 115, 117, 26, 118, 119, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 52, 94, 37, 95, 38, 53, 92, 93, 96, 98, 99, 100, 27, 89, 14, 15, 24, 86, 16, 101, 17, 54, 97, 55, 104, 105, 41, 40, 39, 102, 42, 103, 43, 56, 57, 58, 59, 60, 61, 62, 63, 106, 64, 107, 65, 108, 66, 109, 67, 110, 69, 70, 71, 72, 68, 73, 28, 121, 122, 123, 124, 74, 125, 126, 127, 128, 129, 130, 131, 75, 132, 133, 134, 45, 135, 44, 136, 137, 77, 138, 139, 140, 141, 142, 1, 76, 143, 144, 145, 79, 146, 147, 148, 149, 150, 2, 78, 151, 80, 152, 153, 154, 18, 155, 19, 156, 87, 20, 81, 82, 157, 158, 3, 47, 159, 46, 160, 83, 161, 162, 163, 21, 164, 22, 165, 88, 23, 84, 85, 166, 167, 4, 49, 168, 48, 169, 51, 170, 50, 171, 172, 173, 174, 175, 29, 176, 177, 178, 179, 181, 180, 182, 183, 184, 185, 186, 187, 188, 30, 189, 190, 191, 192, 193, 195, 194, 196, 197, 120 }
  uselistorder i32 20, { 110, 3, 111, 112, 0, 4, 113, 32, 33, 23, 24, 1, 34, 35, 36, 37, 25, 27, 5, 28, 6, 29, 22, 26, 30, 31, 16, 17, 18, 19, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 67, 68, 69, 70, 71, 72, 73, 74, 11, 75, 76, 77, 2, 78, 79, 80, 81, 20, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 13, 101, 12, 102, 103, 104, 105, 15, 106, 14, 107, 108, 109, 38 }
  uselistorder i32 27, { 1, 0, 6, 5, 7, 2, 8, 3, 9, 4, 10 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 19, 20, 21, 53, 60, 2, 17, 22, 14, 23, 15, 24, 16, 25, 0, 18, 26, 27, 28, 29, 30, 3, 31, 32, 33, 34, 4, 35, 36, 37, 38, 5, 39, 6, 40, 7, 41, 42, 8, 43, 44, 9, 45, 46, 10, 47, 11, 48, 49, 50, 51, 12, 52, 55, 56, 57, 58, 13, 59, 1, 54 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 2, 3, 55, 6, 7, 8, 9, 10, 11, 12, 1, 0, 4, 5 }
  uselistorder i1 false, { 25, 26, 27, 34, 19, 24, 35, 36, 21, 22, 23, 37, 18, 38, 39, 0, 30, 29, 31, 28, 1, 3, 2, 16, 17, 4, 32, 15, 20, 33, 7, 6, 5, 8, 9, 10, 14, 11, 12, 13, 40 }
  uselistorder i32 4, { 71, 62, 63, 6, 414, 64, 415, 52, 7, 8, 65, 416, 66, 417, 418, 419, 420, 67, 421, 422, 423, 424, 68, 425, 426, 427, 428, 429, 9, 430, 431, 432, 433, 434, 69, 435, 51, 436, 437, 438, 439, 440, 441, 10, 11, 70, 442, 250, 251, 180, 181, 252, 253, 254, 443, 444, 445, 446, 447, 124, 125, 126, 53, 127, 128, 387, 389, 388, 385, 386, 355, 356, 357, 358, 390, 391, 392, 393, 359, 360, 361, 394, 395, 129, 130, 131, 132, 133, 45, 12, 13, 255, 256, 257, 258, 259, 260, 14, 15, 58, 16, 17, 59, 396, 397, 178, 18, 19, 90, 72, 278, 268, 54, 188, 91, 189, 93, 190, 94, 191, 134, 192, 211, 212, 213, 205, 206, 214, 215, 193, 194, 182, 183, 184, 185, 186, 187, 195, 196, 95, 197, 198, 199, 200, 201, 202, 203, 204, 92, 208, 209, 210, 207, 60, 216, 73, 96, 97, 20, 217, 21, 218, 219, 22, 220, 23, 221, 222, 47, 223, 46, 228, 98, 230, 99, 231, 100, 232, 233, 229, 224, 101, 225, 226, 227, 241, 135, 243, 24, 244, 245, 242, 25, 246, 48, 102, 247, 248, 398, 234, 57, 56, 55, 235, 103, 26, 27, 28, 29, 30, 31, 236, 49, 237, 50, 238, 239, 240, 136, 249, 0, 104, 32, 269, 270, 137, 271, 272, 273, 138, 139, 106, 274, 105, 276, 74, 277, 279, 140, 280, 281, 141, 142, 282, 75, 283, 76, 284, 285, 143, 144, 286, 145, 287, 288, 146, 147, 107, 289, 77, 290, 78, 291, 292, 293, 294, 295, 108, 296, 79, 297, 298, 299, 148, 300, 301, 302, 303, 149, 150, 2, 304, 109, 305, 80, 306, 307, 308, 151, 309, 310, 152, 153, 3, 110, 311, 81, 313, 82, 314, 315, 154, 316, 317, 318, 319, 320, 155, 156, 321, 322, 112, 323, 4, 111, 324, 83, 325, 113, 326, 327, 157, 328, 329, 330, 331, 332, 158, 159, 333, 334, 115, 335, 5, 114, 336, 84, 337, 116, 338, 339, 340, 341, 342, 117, 343, 85, 344, 345, 346, 347, 348, 160, 349, 350, 351, 161, 162, 119, 352, 118, 86, 353, 87, 354, 399, 400, 401, 402, 403, 121, 404, 122, 405, 163, 406, 407, 408, 164, 165, 123, 409, 120, 410, 88, 411, 89, 413, 166, 362, 363, 33, 167, 364, 365, 34, 168, 366, 367, 35, 169, 368, 369, 36, 170, 370, 371, 37, 171, 61, 372, 373, 38, 374, 172, 375, 376, 39, 173, 377, 378, 40, 174, 379, 380, 41, 175, 381, 382, 42, 176, 383, 384, 43, 412, 312, 261, 262, 263, 44, 264, 265, 1, 266, 177, 267, 275, 179 }
  uselistorder i32* @r2, { 68, 69, 30, 9, 31, 33, 32, 34, 35, 36, 37, 7, 70, 1, 71, 76, 77, 80, 72, 59, 63, 64, 67, 65, 66, 60, 61, 62, 58, 14, 0, 78, 2, 79, 5, 38, 39, 40, 8, 10, 73, 74, 75, 3, 41, 42, 43, 6, 26, 27, 28, 4, 44, 48, 51, 52, 49, 50, 53, 15, 11, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 24, 25, 29, 45, 46, 47, 54, 55, 56, 57 }
  uselistorder label %dec_label_pc_14468, { 2, 0, 1 }
  uselistorder label %dec_label_pc_143fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14390, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14330, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_142bc, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_14280, { 1, 0 }
  uselistorder label %dec_label_pc_1426c, { 1, 0 }
  uselistorder label %dec_label_pc_1422c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_141c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14154, { 2, 0, 1 }
  uselistorder label %dec_label_pc_140f4, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_14068, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14028, { 1, 0 }
}

define i32 @function_14488(i32 %arg1) local_unnamed_addr {
dec_label_pc_14488:
  ret i32 %arg1
}

define i32 @function_14490() local_unnamed_addr {
dec_label_pc_14490:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_14490 = load i32, i32* @r0, align 4
  %v2_14490 = icmp eq i32 %v0_14490, 0
  %v3_14494 = load i32, i32* @r4, align 4
  store i32 %v3_14494, i32* %stack_var_-20, align 4
  %v0_14498 = load i32, i32* @r1, align 4
  br i1 %v2_14490, label %dec_label_pc_14570, label %dec_label_pc_144ac.lr.ph

dec_label_pc_144ac:                               ; preds = %dec_label_pc_144ac.lr.ph, %dec_label_pc_14530
  %v1_14530 = phi i32 [ 0, %dec_label_pc_144ac.lr.ph ], [ %v5_14530, %dec_label_pc_14530 ]
  %v0_14534 = phi i32 [ 1, %dec_label_pc_144ac.lr.ph ], [ %v1_14534, %dec_label_pc_14530 ]
  %v0_144b4 = phi i32 [ %v0_14490, %dec_label_pc_144ac.lr.ph ], [ %v0_144b425, %dec_label_pc_14530 ]
  %v1_144b4 = inttoptr i32 %v0_144b4 to i8*
  %v2_144b4 = load i8, i8* %v1_144b4, align 1
  %v3_144b4 = zext i8 %v2_144b4 to i32
  %v3_144b8 = mul nuw nsw i32 %v3_144b4, 2
  %v4_144b8 = add i32 %v3_144b8, %v2_144b0.pre
  %v5_144b8 = inttoptr i32 %v4_144b8 to i8*
  %v6_144b8 = load i8, i8* %v5_144b8, align 1
  %v1_144bc = and i8 %v6_144b8, 8
  %v2_144bc = icmp eq i8 %v1_144bc, 0
  br i1 %v2_144bc, label %dec_label_pc_14570, label %dec_label_pc_144c4

dec_label_pc_144c4:                               ; preds = %dec_label_pc_144ac
  br label %dec_label_pc_144e4

dec_label_pc_144cc:                               ; preds = %dec_label_pc_144e4
  %v3_144d0 = mul i32 %v0_14530, 10
  %v4_144d0 = add i32 %v3_144e4, %v3_144d0
  %v1_144d4 = add i32 %v4_144d0, -48
  %v8_144dc = icmp sgt i32 %v1_144d4, 255
  br i1 %v8_144dc, label %dec_label_pc_14570, label %dec_label_pc_144e0

dec_label_pc_144e0:                               ; preds = %dec_label_pc_144cc
  %v1_144e0 = add i32 %v0_14520, 1
  store i32 %v1_144e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_144e4

dec_label_pc_144e4:                               ; preds = %dec_label_pc_144c4, %dec_label_pc_144e0
  %v0_14530 = phi i32 [ 0, %dec_label_pc_144c4 ], [ %v1_144d4, %dec_label_pc_144e0 ]
  %v0_14520 = phi i32 [ %v0_144b4, %dec_label_pc_144c4 ], [ %v1_144e0, %dec_label_pc_144e0 ]
  %v1_144e4 = inttoptr i32 %v0_14520 to i8*
  %v2_144e4 = load i8, i8* %v1_144e4, align 1
  %v3_144e4 = zext i8 %v2_144e4 to i32
  %v2_144e8 = mul nuw nsw i32 %v3_144e4, 2
  %v2_144ec = add i32 %v2_144e8, %v2_144b0.pre
  %v3_144f0 = inttoptr i32 %v2_144ec to i8*
  %v4_144f0 = load i8, i8* %v3_144f0, align 1
  %v6_144f0 = zext i8 %v4_144f0 to i32
  %v1_144fc = and i32 %v6_144f0, 8
  %v2_144fc = icmp eq i32 %v1_144fc, 0
  br i1 %v2_144fc, label %dec_label_pc_14504, label %dec_label_pc_144cc

dec_label_pc_14504:                               ; preds = %dec_label_pc_144e4
  %v8_14508 = icmp sgt i32 %v0_14534, 3
  br i1 %v8_14508, label %dec_label_pc_1451c, label %dec_label_pc_1450c

dec_label_pc_1450c:                               ; preds = %dec_label_pc_14504
  %v7_1450c = icmp eq i8 %v2_144e4, 46
  br i1 %v7_1450c, label %dec_label_pc_14514, label %dec_label_pc_14570

dec_label_pc_14514:                               ; preds = %dec_label_pc_1450c
  %v1_14514 = add i32 %v0_14520, 1
  store i32 %v1_14514, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14530

dec_label_pc_1451c:                               ; preds = %dec_label_pc_14504
  %v2_1451c = icmp eq i8 %v2_144e4, 0
  %v1_14520 = add i32 %v0_14520, 1
  store i32 %v1_14520, i32* %r0.global-to-local, align 4
  br i1 %v2_1451c, label %dec_label_pc_14530, label %dec_label_pc_14528

dec_label_pc_14528:                               ; preds = %dec_label_pc_1451c
  %v1_14528 = and i32 %v6_144f0, 32
  %v2_14528 = icmp eq i32 %v1_14528, 0
  br i1 %v2_14528, label %dec_label_pc_14570, label %dec_label_pc_14530

dec_label_pc_14530:                               ; preds = %dec_label_pc_14528, %dec_label_pc_1451c, %dec_label_pc_14514
  %v0_144b425 = phi i32 [ %v1_14520, %dec_label_pc_14528 ], [ %v1_14520, %dec_label_pc_1451c ], [ %v1_14514, %dec_label_pc_14514 ]
  %v4_14530 = mul i32 %v1_14530, 256
  %v5_14530 = or i32 %v0_14530, %v4_14530
  %v1_14534 = add nuw nsw i32 %v0_14534, 1
  %v7_1453c = icmp slt i32 %v1_14534, 5
  br i1 %v7_1453c, label %dec_label_pc_144ac, label %dec_label_pc_14540

dec_label_pc_144ac.lr.ph:                         ; preds = %dec_label_pc_14490
  %v2_144b0.pre = load i32, i32* bitcast (i32** @global_var_1cd40.443 to i32*), align 4
  br label %dec_label_pc_144ac

dec_label_pc_14540:                               ; preds = %dec_label_pc_14530
  %v2_14540 = icmp eq i32 %v0_14498, 0
  br i1 %v2_14540, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_14540
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_14540
  %v3_1455c = call i32 @llvm.bswap.i32(i32 %v5_14530)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_14568 = inttoptr i32 %v0_14498 to i32*
  store i32 %v3_1455c, i32* %v3_14568, align 4
  %v2_1456c.pre = load i32, i32* %stack_var_-20, align 4
  %v17_1456c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_1456c = phi i32 [ 1, %bb ], [ %v17_1456c.pre, %bb40 ]
  %v2_1456c = phi i32 [ %v3_14494, %bb ], [ %v2_1456c.pre, %bb40 ]
  store i32 %v2_1456c, i32* @r4, align 4
  ret i32 %v17_1456c

dec_label_pc_14570:                               ; preds = %dec_label_pc_1450c, %dec_label_pc_14528, %dec_label_pc_144ac, %dec_label_pc_144cc, %dec_label_pc_14490
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14494, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_144b0.pre, { 1, 0 }
  uselistorder i32 %v1_14534, { 1, 0 }
  uselistorder i32 %v0_14520, { 0, 1, 3, 2 }
  uselistorder i32 %v3_14494, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 17, 27, 18, 6, 19, 7, 29, 3, 20, 28, 4, 1, 0, 30, 31, 32, 21, 22, 23, 24, 25, 26, 36, 37, 38, 39, 8, 40, 41, 42, 43, 9, 44, 45, 46, 47, 48, 49, 50, 51, 10, 52, 53, 54, 11, 55, 56, 57, 12, 58, 59, 60, 61, 13, 62, 63, 64, 65, 14, 66, 67, 68, 69, 70, 71, 72, 15, 73, 75, 76, 77, 78, 79, 80, 16, 81, 5, 74, 33, 2, 34, 35 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 90, 88, 89, 91, 92, 93, 94, 95, 97, 98, 96, 101, 100, 99, 106, 102, 105, 103, 104, 107, 108, 109, 110, 491, 111, 112, 113, 114, 115, 492, 116, 117, 118, 119, 120, 121, 122, 123, 125, 124, 126, 127, 128, 131, 130, 129, 132, 134, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 144, 146, 147, 148, 152, 158, 153, 149, 154, 159, 155, 160, 156, 150, 161, 151, 162, 163, 157, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 174, 177, 180, 181, 179, 178, 182, 185, 184, 183, 192, 189, 193, 190, 186, 194, 191, 187, 188, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 227, 222, 217, 228, 223, 229, 224, 230, 225, 218, 219, 220, 231, 232, 233, 234, 226, 221, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 259, 268, 264, 269, 265, 261, 262, 266, 263, 270, 271, 267, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 287, 286, 294, 289, 300, 301, 295, 290, 302, 303, 296, 291, 304, 297, 305, 298, 306, 299, 307, 292, 308, 293, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 320, 316, 323, 321, 317, 326, 325, 324, 329, 330, 327, 331, 328, 332, 336, 333, 338, 337, 334, 335, 339, 488, 493, 340, 341, 342, 343, 344, 347, 345, 346, 349, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 369, 367, 363, 370, 368, 364, 373, 372, 371, 376, 377, 374, 378, 375, 379, 383, 380, 385, 384, 381, 382, 386, 489, 494, 387, 388, 389, 390, 391, 394, 392, 393, 396, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 415, 414, 416, 417, 418, 419, 421, 420, 422, 423, 425, 424, 426, 427, 428, 429, 432, 439, 433, 434, 430, 435, 436, 437, 431, 440, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 453, 455, 456, 457, 461, 468, 462, 463, 469, 464, 458, 459, 465, 460, 466, 470, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 483, 485, 486, 487, 490 }
  uselistorder i32 32, { 66, 41, 42, 39, 59, 60, 49, 50, 58, 5, 4, 7, 6, 9, 8, 40, 38, 61, 62, 44, 52, 43, 51, 45, 53, 46, 54, 47, 55, 11, 10, 13, 12, 15, 14, 17, 16, 48, 19, 18, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 56, 57, 63, 64, 31, 65, 32, 33, 34, 0, 35, 1, 2, 3, 36, 37 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 40, 64, 65, 170, 66, 67, 68, 69, 70, 71, 75, 95, 171, 4, 157, 159, 160, 0, 72, 23, 73, 24, 161, 74, 41, 25, 45, 76, 27, 79, 44, 80, 46, 77, 47, 78, 2, 81, 82, 83, 84, 42, 5, 85, 86, 87, 88, 26, 89, 48, 90, 43, 91, 49, 92, 50, 93, 94, 28, 51, 52, 1, 96, 97, 53, 99, 100, 101, 102, 103, 104, 54, 105, 55, 106, 29, 107, 108, 109, 110, 111, 7, 6, 56, 30, 112, 113, 114, 115, 116, 117, 118, 9, 8, 57, 119, 31, 120, 121, 122, 123, 124, 125, 126, 127, 11, 10, 58, 128, 32, 129, 130, 131, 132, 133, 13, 12, 59, 134, 33, 135, 136, 137, 138, 60, 139, 15, 14, 35, 140, 34, 141, 142, 143, 144, 61, 145, 17, 16, 37, 146, 36, 147, 148, 149, 150, 151, 152, 153, 154, 19, 18, 62, 155, 38, 156, 162, 163, 164, 165, 166, 167, 21, 20, 63, 168, 39, 169, 22, 158, 3, 98 }
  uselistorder i32 8, { 90, 137, 23, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 24, 154, 65, 66, 67, 68, 72, 69, 70, 71, 155, 128, 127, 125, 126, 114, 115, 116, 129, 130, 131, 117, 118, 119, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 156, 73, 74, 75, 76, 8, 9, 46, 19, 10, 11, 16, 12, 30, 52, 31, 13, 14, 15, 47, 39, 48, 36, 49, 37, 50, 38, 51, 22, 53, 54, 55, 56, 58, 40, 59, 41, 60, 61, 57, 62, 63, 42, 64, 80, 32, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 91, 92, 93, 4, 94, 95, 96, 97, 98, 99, 100, 5, 101, 102, 103, 104, 105, 106, 107, 6, 108, 109, 110, 111, 112, 113, 132, 133, 134, 135, 136, 120, 33, 121, 34, 122, 35, 123, 43, 124, 0, 1, 45, 77, 78, 44, 79, 2 }
  uselistorder i32 255, { 1, 2, 0 }
  uselistorder i32 10, { 13, 49, 50, 0, 3, 4, 30, 31, 51, 1, 14, 8, 15, 9, 16, 10, 32, 39, 17, 35, 18, 36, 19, 37, 20, 38, 6, 40, 41, 33, 21, 42, 34, 43, 22, 44, 45, 46, 23, 5, 24, 25, 47, 26, 48, 11, 53, 54, 2, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 27, 65, 66, 67, 28, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 7, 73, 12, 79, 52, 29 }
  uselistorder i8 0, { 6, 0, 1, 23, 5, 24, 25, 2, 9, 26, 27, 28, 29, 30, 31, 32, 7, 33, 34, 35, 36, 37, 38, 3, 11, 10, 12, 41, 43, 40, 17, 42, 18, 44, 45, 39, 4, 46, 47, 48, 49, 50, 20, 51, 52, 55, 21, 53, 54, 19, 56, 57, 58, 59, 60, 13, 8, 14, 61, 15, 16, 22, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 2, { 5, 144, 264, 265, 63, 266, 267, 55, 268, 54, 269, 53, 148, 80, 81, 185, 82, 186, 83, 187, 6, 145, 270, 59, 84, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 146, 16, 17, 18, 19, 20, 86, 87, 85, 56, 57, 69, 163, 88, 91, 152, 157, 70, 149, 71, 150, 72, 151, 90, 153, 73, 154, 74, 155, 75, 156, 76, 162, 158, 159, 160, 161, 64, 92, 164, 21, 22, 165, 166, 167, 93, 168, 52, 147, 169, 89, 170, 23, 94, 176, 177, 24, 95, 96, 97, 178, 179, 98, 251, 102, 171, 100, 172, 101, 173, 99, 103, 174, 25, 26, 27, 104, 175, 65, 105, 106, 107, 108, 109, 110, 111, 66, 113, 114, 112, 115, 180, 58, 62, 181, 182, 183, 252, 253, 188, 189, 190, 191, 192, 193, 194, 117, 195, 116, 196, 197, 198, 199, 200, 119, 118, 201, 202, 203, 204, 205, 206, 207, 121, 208, 120, 209, 210, 122, 123, 77, 124, 211, 212, 213, 214, 215, 216, 217, 1, 28, 29, 30, 31, 32, 33, 125, 218, 78, 219, 220, 221, 222, 223, 2, 34, 35, 36, 37, 38, 39, 127, 126, 224, 225, 40, 226, 227, 60, 228, 129, 229, 3, 41, 42, 43, 44, 45, 130, 230, 128, 231, 232, 46, 233, 234, 61, 235, 132, 236, 4, 47, 48, 49, 50, 51, 133, 237, 131, 238, 239, 134, 135, 79, 136, 240, 241, 242, 243, 244, 245, 246, 247, 138, 248, 137, 249, 254, 255, 256, 140, 257, 141, 258, 259, 260, 261, 142, 262, 139, 263, 67, 250, 143, 68, 184 }
  uselistorder i32* @r1, { 47, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 1, 99, 100, 24, 25, 27, 26, 5, 7, 101, 0, 102, 36, 37, 19, 104, 64, 69, 70, 73, 71, 72, 65, 66, 67, 68, 63, 74, 103, 11, 6, 48, 28, 75, 29, 3, 76, 30, 31, 38, 39, 12, 8, 9, 10, 14, 13, 18, 77, 15, 16, 17, 20, 21, 22, 23, 32, 33, 34, 4, 35, 78, 79, 2, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 80, 81 }
  uselistorder label %dec_label_pc_14570, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_144e4, { 1, 0 }
}

define i32 @function_1457c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1457c:
  %v3_1457c = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_14584 = call i32 @function_11df8()
  %v0_14588 = load i32, i32* @r4, align 4
  store i32 %v3_1457c, i32* @r4, align 4
  %v2_14590 = call i32 @function_11ea0(i32 %v0_14584, i32 %v0_14588)
  ret i32 %v2_14590

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11ea0, { 7, 9, 6, 5, 1, 0, 4, 3, 8, 2 }
  uselistorder i32 ()* @function_11df8, { 0, 3, 2, 1 }
}

define i32 @function_14594(i32 %arg1) local_unnamed_addr {
dec_label_pc_14594:
  %v1_14594 = add i32 %arg1, 28
  %v2_14594 = inttoptr i32 %v1_14594 to i32*
  %v3_14594 = load i32, i32* %v2_14594, align 4
  %v1_1459c = add i32 %arg1, 44
  %v2_1459c = inttoptr i32 %v1_1459c to i32*
  %v3_1459c = load i32, i32* %v2_1459c, align 4
  store i32 %v3_14594, i32* @global_var_1cfec.496, align 4
  store i32 %v3_1459c, i32* @global_var_1cff0.498, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_145b8(i32* %arg1) local_unnamed_addr {
dec_label_pc_145b8:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_145c0 = call i32 @brk(i32* %arg1)
  %v3_145c4 = icmp ult i32 %v2_145c0, %tmp
  store i32 %v2_145c0, i32* @global_var_1cdfc.493, align 4
  br i1 %v3_145c4, label %dec_label_pc_145d8, label %dec_label_pc_145e8

dec_label_pc_145d8:                               ; preds = %dec_label_pc_145b8
  %v0_145d8 = call i32 @function_12374()
  %v2_145e0 = inttoptr i32 %v0_145d8 to i32*
  store i32 12, i32* %v2_145e0, align 4
  br label %dec_label_pc_145e8

dec_label_pc_145e8:                               ; preds = %dec_label_pc_145b8, %dec_label_pc_145d8
  %v0_145e8 = phi i32 [ 0, %dec_label_pc_145b8 ], [ -1, %dec_label_pc_145d8 ]
  ret i32 %v0_145e8

; uselistorder directives
  uselistorder i32 12, { 16, 10, 119, 120, 121, 123, 124, 125, 126, 11, 122, 127, 128, 129, 130, 131, 132, 133, 66, 67, 30, 31, 68, 17, 18, 109, 110, 111, 0, 106, 112, 7, 113, 8, 107, 4, 108, 19, 20, 5, 69, 70, 21, 71, 72, 22, 12, 35, 36, 47, 50, 44, 51, 37, 32, 33, 34, 38, 23, 39, 24, 40, 25, 41, 42, 43, 45, 48, 49, 46, 52, 53, 54, 9, 55, 56, 57, 59, 60, 61, 29, 26, 62, 64, 63, 58, 6, 65, 114, 73, 13, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 27, 85, 86, 87, 88, 89, 28, 90, 91, 92, 93, 94, 95, 14, 96, 97, 98, 99, 100, 101, 15, 102, 103, 104, 105, 115, 116, 117, 118, 1, 2, 3 }
  uselistorder i32 ()* @function_12374, { 21, 58, 29, 38, 9, 8, 7, 6, 37, 36, 35, 5, 59, 28, 27, 42, 41, 19, 20, 57, 56, 18, 17, 16, 14, 23, 55, 40, 54, 53, 13, 12, 52, 34, 33, 32, 51, 39, 22, 4, 3, 50, 44, 31, 24, 49, 2, 11, 48, 26, 10, 25, 15, 1, 0, 47, 46, 45, 43, 30 }
  uselistorder i32* @global_var_1cdfc.493, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_145e8, { 1, 0 }
}

define i32 @function_145f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_145f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145f8 = load i32, i32* @global_var_1cbcc.456, align 4
  %v7_145fc = icmp eq i32 %v3_145f8, -1
  %v3_14600 = load i32, i32* @r4, align 4
  store i32 %v3_14600, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1cbcc.456 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_145fc, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_145f4
  store i32 %v3_14600, i32* %r4.global-to-local, align 4
  ret i32 %arg1

.preheader:                                       ; preds = %dec_label_pc_145f4, %.preheader
  %v0_14610 = phi i32 [ %v3_14614, %.preheader ], [ %v3_145f8, %dec_label_pc_145f4 ]
  call void @__pseudo_branch(i32 %v0_14610)
  %v0_14614 = load i32, i32* %r4.global-to-local, align 4
  %v1_14614 = add i32 %v0_14614, -4
  %v2_14614 = inttoptr i32 %v1_14614 to i32*
  %v3_14614 = load i32, i32* %v2_14614, align 4
  store i32 %v1_14614, i32* %r4.global-to-local, align 4
  %v3_14618 = icmp eq i32 %v3_14614, -1
  br i1 %v3_14618, label %dec_label_pc_14620, label %.preheader

dec_label_pc_14620:                               ; preds = %.preheader
  %v2_14620 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14620, i32* %r4.global-to-local, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v3_14614, { 1, 0 }
  uselistorder i32 %v3_145f8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 168, 0, 103, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 169, 104, 257, 105, 297, 106, 286, 280, 107, 319, 108, 320, 109, 321, 110, 322, 156, 101, 281, 282, 111, 283, 284, 112, 323, 1, 170, 2, 113, 287, 288, 171, 172, 276, 277, 157, 173, 158, 174, 3, 4, 100, 91, 92, 175, 176, 177, 98, 258, 178, 259, 5, 6, 114, 298, 115, 299, 116, 300, 117, 294, 118, 292, 119, 260, 120, 278, 121, 261, 122, 262, 123, 295, 124, 296, 125, 263, 126, 179, 167, 127, 180, 128, 264, 129, 279, 130, 293, 131, 324, 325, 132, 265, 133, 275, 134, 285, 135, 291, 136, 266, 137, 326, 138, 302, 139, 267, 140, 289, 141, 303, 142, 290, 143, 301, 144, 327, 102, 328, 181, 182, 183, 184, 185, 186, 187, 188, 7, 8, 9, 10, 145, 146, 11, 189, 17, 190, 268, 269, 12, 191, 251, 148, 252, 16, 192, 193, 194, 254, 255, 195, 196, 197, 198, 199, 200, 201, 202, 203, 159, 253, 18, 204, 93, 19, 205, 206, 20, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 256, 14, 221, 13, 222, 223, 15, 224, 225, 226, 21, 227, 228, 147, 270, 229, 22, 230, 231, 94, 23, 24, 232, 99, 25, 26, 27, 28, 29, 149, 233, 32, 160, 271, 31, 162, 272, 30, 161, 273, 33, 34, 163, 274, 35, 36, 37, 38, 39, 234, 40, 95, 41, 42, 235, 236, 237, 238, 239, 43, 151, 152, 153, 154, 155, 44, 45, 46, 240, 47, 48, 49, 50, 51, 52, 53, 54, 96, 55, 56, 57, 58, 59, 60, 61, 241, 62, 150, 63, 64, 65, 242, 66, 67, 68, 69, 243, 70, 71, 72, 244, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 245, 85, 86, 87, 246, 88, 89, 247, 248, 249, 250, 90, 97, 164, 165, 166 }
  uselistorder i32* @global_var_1cbcc.456, { 1, 0 }
  uselistorder i32 1, { 556, 253, 353, 399, 956, 957, 958, 959, 960, 375, 557, 326, 1029, 359, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 560, 559, 558, 312, 313, 316, 315, 311, 310, 314, 308, 317, 309, 318, 561, 70, 69, 65, 67, 66, 68, 71, 64, 735, 74, 72, 73, 75, 562, 114, 563, 82, 83, 564, 62, 36, 565, 304, 566, 232, 567, 320, 568, 319, 858, 859, 569, 288, 284, 289, 285, 286, 290, 287, 860, 861, 862, 447, 152, 153, 149, 151, 150, 570, 327, 571, 63, 0, 575, 574, 573, 572, 26, 25, 448, 576, 53, 54, 376, 449, 577, 55, 578, 894, 583, 582, 581, 580, 579, 273, 274, 275, 276, 450, 584, 354, 834, 346, 835, 377, 585, 177, 183, 176, 180, 179, 182, 184, 178, 181, 1042, 378, 588, 587, 586, 293, 292, 589, 38, 39, 37, 40, 185, 186, 187, 188, 590, 87, 88, 86, 85, 84, 591, 592, 306, 305, 593, 379, 1007, 594, 200, 201, 451, 452, 351, 598, 597, 596, 595, 218, 217, 360, 599, 202, 600, 154, 254, 601, 281, 602, 204, 603, 104, 604, 41, 605, 175, 606, 148, 607, 161, 608, 57, 609, 221, 610, 896, 337, 224, 223, 222, 736, 737, 738, 739, 740, 741, 742, 1043, 173, 174, 170, 171, 172, 611, 453, 454, 612, 279, 278, 280, 277, 407, 863, 613, 220, 408, 615, 614, 190, 189, 616, 56, 617, 203, 618, 99, 619, 302, 303, 620, 160, 621, 282, 622, 15, 623, 16, 624, 236, 207, 625, 147, 626, 265, 627, 307, 628, 291, 629, 296, 630, 146, 283, 42, 409, 771, 772, 410, 1008, 1009, 331, 1010, 864, 865, 866, 347, 867, 633, 632, 631, 216, 213, 209, 210, 212, 211, 208, 214, 215, 1, 836, 837, 838, 839, 361, 897, 898, 362, 899, 635, 634, 295, 294, 868, 869, 870, 455, 636, 159, 158, 157, 156, 1011, 380, 381, 2, 446, 1012, 637, 10, 8, 11, 12, 9, 768, 770, 769, 456, 871, 325, 324, 1013, 235, 872, 873, 874, 13, 14, 900, 638, 249, 250, 252, 251, 925, 926, 639, 300, 299, 298, 297, 301, 901, 902, 640, 61, 60, 59, 58, 457, 749, 458, 750, 411, 751, 752, 773, 753, 759, 760, 765, 464, 743, 744, 466, 745, 746, 465, 747, 748, 467, 754, 383, 468, 469, 463, 755, 756, 462, 757, 758, 461, 761, 762, 460, 763, 764, 459, 766, 767, 774, 470, 352, 775, 471, 776, 778, 779, 777, 780, 472, 781, 734, 382, 784, 782, 473, 783, 786, 474, 787, 788, 789, 401, 790, 791, 384, 797, 798, 348, 475, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 644, 643, 642, 641, 43, 45, 52, 47, 49, 44, 46, 48, 50, 51, 792, 793, 476, 794, 795, 477, 796, 655, 134, 133, 128, 132, 131, 130, 127, 129, 785, 478, 657, 656, 322, 323, 321, 804, 805, 806, 807, 808, 809, 810, 332, 345, 811, 812, 385, 333, 813, 814, 815, 816, 334, 344, 817, 818, 386, 335, 819, 479, 821, 822, 480, 823, 820, 824, 404, 825, 363, 828, 829, 826, 827, 338, 336, 339, 830, 481, 831, 664, 663, 550, 662, 661, 660, 549, 659, 658, 136, 137, 135, 142, 140, 141, 144, 145, 139, 138, 143, 665, 155, 1015, 364, 1014, 400, 666, 106, 107, 105, 109, 110, 112, 111, 113, 108, 903, 668, 667, 79, 80, 78, 77, 76, 81, 669, 484, 412, 799, 800, 413, 801, 482, 483, 485, 802, 803, 486, 487, 488, 489, 490, 491, 492, 493, 681, 680, 679, 678, 677, 676, 675, 674, 673, 555, 672, 671, 670, 101, 100, 103, 102, 494, 349, 495, 682, 414, 832, 496, 497, 683, 500, 499, 498, 833, 685, 684, 501, 840, 392, 841, 391, 842, 390, 843, 389, 844, 388, 845, 846, 502, 398, 387, 847, 503, 848, 504, 849, 505, 850, 506, 851, 507, 852, 508, 853, 509, 854, 510, 855, 511, 856, 512, 857, 350, 513, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 689, 688, 687, 686, 245, 246, 247, 248, 880, 4, 875, 514, 876, 3, 877, 402, 878, 355, 356, 879, 881, 403, 882, 704, 703, 702, 551, 552, 701, 1016, 415, 1017, 416, 1018, 5, 1019, 6, 7, 904, 905, 906, 907, 908, 909, 357, 358, 910, 911, 912, 913, 914, 915, 916, 917, 515, 918, 919, 516, 920, 923, 921, 922, 707, 706, 705, 116, 120, 119, 115, 123, 124, 126, 125, 117, 122, 121, 118, 927, 928, 929, 930, 931, 517, 365, 518, 709, 708, 32, 29, 33, 34, 35, 31, 30, 27, 28, 932, 933, 934, 519, 935, 936, 937, 938, 939, 940, 520, 941, 366, 521, 418, 417, 522, 942, 710, 163, 166, 167, 169, 168, 165, 164, 162, 943, 405, 341, 944, 523, 946, 945, 340, 524, 420, 419, 553, 711, 206, 205, 947, 948, 949, 950, 951, 952, 525, 953, 367, 526, 527, 954, 421, 955, 712, 257, 255, 256, 261, 262, 264, 263, 259, 260, 258, 961, 962, 393, 963, 964, 965, 528, 966, 368, 529, 423, 422, 530, 968, 531, 969, 713, 193, 194, 195, 192, 191, 970, 971, 394, 972, 973, 974, 532, 975, 369, 533, 428, 427, 534, 976, 424, 977, 425, 978, 426, 979, 718, 717, 716, 715, 714, 228, 229, 231, 230, 225, 227, 226, 980, 981, 395, 982, 983, 984, 535, 985, 370, 536, 436, 435, 537, 986, 434, 987, 429, 988, 430, 989, 431, 990, 432, 991, 538, 992, 433, 993, 723, 722, 721, 720, 719, 241, 242, 244, 243, 238, 240, 239, 994, 406, 343, 995, 539, 997, 996, 342, 540, 438, 437, 554, 724, 234, 233, 998, 999, 1000, 396, 1001, 1002, 1003, 371, 541, 441, 440, 542, 1004, 439, 1005, 725, 20, 21, 24, 18, 19, 23, 17, 22, 1020, 1021, 1022, 397, 1023, 1024, 1025, 372, 543, 444, 443, 544, 1026, 442, 1027, 730, 729, 728, 727, 726, 92, 91, 90, 95, 96, 98, 97, 89, 94, 93, 1006, 445, 545, 731, 197, 198, 199, 196, 1028, 219, 967, 266, 883, 546, 886, 547, 887, 888, 884, 885, 889, 890, 891, 892, 373, 893, 374, 267, 270, 272, 268, 269, 271, 895, 548, 924, 237, 732, 733, 330, 329, 328 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14628() local_unnamed_addr {
dec_label_pc_14628:
  %v5_1462c = load i32, i32* @r0, align 4
  ret i32 %v5_1462c

; uselistorder directives
  uselistorder i32* @r0, { 4, 115, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 76, 77, 79, 78, 27, 162, 163, 33, 34, 35, 36, 22, 5, 14, 15, 108, 109, 28, 164, 165, 63, 167, 21, 23, 126, 17, 125, 122, 32, 124, 7, 123, 127, 166, 41, 11, 80, 81, 82, 83, 30, 13, 84, 85, 86, 87, 12, 168, 10, 20, 42, 9, 128, 16, 129, 130, 24, 88, 131, 18, 89, 19, 90, 91, 0, 37, 43, 44, 38, 39, 40, 45, 48, 49, 50, 51, 52, 1, 46, 47, 60, 61, 62, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 29, 72, 73, 74, 75, 92, 93, 94, 95, 96, 97, 98, 3, 99, 100, 101, 102, 103, 104, 105, 31, 106, 132, 133, 2, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 134, 135, 117, 107, 8, 6, 25, 26 }
}

define i32 @function_14630() local_unnamed_addr {
entry:
  %v3_14634 = load i32, i32* @r4, align 4
  %v0_1463c = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_14634)
  ret i32 %v0_1463c

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 120, 0, 890, 891, 892, 893, 122, 121, 894, 1046, 1047, 1048, 1049, 1050, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1051, 1052, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 40, 1071, 1072, 1073, 1074, 1075, 41, 1076, 1077, 1078, 42, 1079, 1080, 1081, 43, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1097, 1098, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 44, 1117, 1118, 1119, 1120, 1121, 45, 1122, 1123, 1124, 1125, 1126, 46, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 742, 743, 296, 744, 297, 607, 984, 985, 986, 987, 799, 745, 746, 1140, 1141, 1142, 1143, 298, 747, 1, 748, 749, 750, 1144, 1145, 1146, 123, 1147, 74, 1148, 72, 73, 1149, 1150, 1151, 299, 1155, 300, 1166, 1168, 546, 231, 1169, 301, 1167, 302, 303, 2, 1152, 1153, 124, 800, 252, 801, 306, 254, 253, 802, 803, 804, 805, 305, 807, 808, 304, 809, 1154, 720, 721, 722, 723, 724, 725, 126, 90, 726, 75, 125, 127, 308, 1156, 309, 255, 1157, 1158, 1160, 1161, 307, 990, 992, 993, 50, 232, 994, 991, 988, 989, 3, 972, 975, 973, 974, 233, 4, 997, 995, 996, 234, 128, 976, 977, 978, 982, 979, 980, 310, 5, 981, 6, 1004, 1005, 129, 998, 999, 1000, 1001, 1002, 1003, 7, 8, 806, 608, 609, 610, 311, 9, 312, 1006, 1007, 542, 1008, 543, 954, 936, 611, 727, 612, 613, 955, 956, 614, 895, 1170, 1171, 65, 751, 313, 752, 753, 754, 755, 314, 756, 757, 758, 759, 760, 761, 762, 615, 728, 937, 1159, 616, 699, 763, 813, 617, 544, 1162, 78, 1163, 1044, 618, 810, 1045, 811, 1009, 1164, 1165, 10, 619, 91, 620, 621, 228, 227, 547, 79, 80, 81, 82, 557, 548, 52, 51, 92, 622, 623, 624, 625, 627, 626, 11, 1010, 1011, 230, 229, 549, 83, 84, 85, 86, 558, 550, 54, 53, 49, 62, 1012, 559, 1013, 1014, 1015, 87, 1016, 1017, 1018, 1019, 1020, 130, 551, 560, 552, 553, 1021, 561, 100, 131, 764, 765, 88, 766, 767, 562, 12, 235, 132, 133, 286, 55, 134, 315, 628, 76, 768, 769, 1023, 1022, 1024, 1025, 47, 135, 1026, 138, 137, 136, 287, 288, 289, 140, 139, 141, 316, 770, 771, 142, 1027, 1028, 101, 143, 772, 144, 629, 145, 843, 844, 146, 814, 815, 585, 554, 635, 630, 93, 631, 632, 586, 587, 597, 579, 563, 321, 580, 581, 564, 323, 582, 583, 565, 322, 584, 603, 604, 588, 589, 147, 148, 590, 591, 592, 593, 566, 320, 594, 595, 567, 319, 596, 598, 568, 318, 599, 606, 569, 317, 600, 605, 601, 69, 56, 102, 103, 602, 545, 633, 324, 634, 237, 636, 325, 637, 640, 641, 150, 236, 638, 639, 326, 327, 642, 643, 256, 644, 645, 646, 647, 648, 649, 570, 650, 651, 66, 328, 653, 654, 655, 656, 657, 658, 659, 249, 248, 660, 329, 661, 662, 89, 663, 664, 104, 665, 556, 666, 667, 668, 669, 670, 671, 555, 672, 673, 674, 149, 330, 331, 677, 678, 679, 680, 681, 151, 675, 152, 676, 13, 153, 652, 700, 701, 702, 71, 57, 703, 70, 58, 704, 705, 706, 707, 708, 709, 332, 710, 711, 713, 154, 712, 67, 714, 15, 14, 715, 816, 817, 682, 683, 333, 684, 686, 155, 687, 688, 689, 690, 691, 692, 693, 257, 334, 694, 68, 335, 695, 685, 16, 696, 250, 697, 336, 698, 716, 717, 718, 719, 337, 290, 159, 158, 571, 291, 161, 160, 572, 292, 163, 162, 573, 293, 165, 164, 574, 294, 167, 166, 575, 576, 295, 157, 156, 239, 247, 240, 241, 242, 243, 338, 729, 168, 169, 738, 730, 731, 732, 733, 734, 735, 736, 737, 238, 739, 740, 59, 741, 170, 171, 339, 77, 773, 774, 775, 776, 246, 777, 778, 779, 245, 780, 781, 782, 783, 96, 784, 786, 785, 94, 95, 172, 244, 340, 787, 260, 258, 259, 97, 173, 63, 174, 818, 108, 107, 105, 106, 819, 820, 64, 821, 822, 823, 824, 825, 175, 826, 827, 341, 828, 829, 830, 831, 179, 176, 177, 178, 832, 833, 834, 835, 342, 836, 837, 263, 839, 262, 840, 261, 841, 343, 842, 845, 846, 111, 109, 110, 17, 847, 848, 849, 850, 180, 851, 852, 265, 264, 853, 344, 854, 855, 856, 857, 858, 115, 112, 113, 114, 18, 859, 860, 861, 181, 862, 182, 863, 864, 268, 865, 267, 866, 266, 867, 345, 868, 187, 347, 185, 186, 183, 184, 869, 189, 188, 870, 190, 346, 872, 873, 119, 116, 117, 118, 19, 871, 874, 875, 876, 877, 878, 879, 20, 21, 22, 23, 24, 880, 881, 191, 270, 882, 348, 883, 349, 884, 350, 885, 351, 886, 352, 887, 353, 888, 269, 889, 192, 193, 194, 897, 898, 896, 900, 901, 899, 25, 26, 27, 28, 29, 902, 195, 903, 904, 272, 905, 354, 908, 355, 909, 356, 910, 357, 911, 358, 912, 359, 913, 271, 914, 360, 915, 197, 196, 198, 917, 918, 916, 919, 920, 60, 922, 923, 924, 925, 361, 926, 30, 31, 32, 33, 34, 921, 199, 98, 927, 928, 277, 929, 276, 930, 275, 931, 273, 932, 274, 933, 362, 934, 363, 935, 201, 200, 202, 939, 940, 938, 941, 942, 61, 944, 945, 946, 947, 364, 948, 35, 36, 37, 38, 39, 943, 203, 99, 949, 950, 279, 951, 278, 952, 365, 953, 208, 367, 206, 207, 204, 205, 957, 210, 209, 958, 368, 211, 366, 212, 215, 214, 213, 961, 962, 960, 959, 369, 964, 963, 965, 216, 966, 967, 282, 968, 281, 969, 280, 970, 370, 971, 217, 220, 219, 218, 1031, 1032, 1030, 1029, 1034, 1033, 1035, 1036, 221, 285, 1037, 284, 1038, 283, 1039, 371, 1042, 251, 983, 1040, 222, 1041, 906, 223, 907, 788, 224, 789, 790, 791, 225, 372, 792, 793, 48, 794, 795, 796, 797, 798, 373, 812, 226, 838, 1043, 577, 578, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186 }
  uselistorder i32* @r4, { 36, 702, 706, 707, 710, 711, 433, 434, 435, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 219, 53, 651, 652, 295, 728, 729, 730, 731, 732, 733, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 734, 735, 4, 736, 737, 738, 739, 754, 755, 756, 757, 34, 758, 33, 745, 749, 750, 751, 752, 753, 740, 741, 742, 296, 297, 298, 299, 300, 301, 302, 303, 743, 744, 181, 182, 748, 653, 654, 655, 623, 5, 624, 625, 626, 6, 627, 7, 635, 636, 628, 8, 9, 629, 630, 631, 632, 633, 634, 656, 10, 664, 665, 657, 658, 659, 660, 661, 662, 663, 54, 55, 56, 57, 58, 59, 666, 667, 668, 669, 582, 583, 529, 530, 60, 61, 183, 184, 62, 63, 64, 65, 584, 585, 586, 587, 66, 67, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 68, 69, 185, 186, 531, 532, 746, 747, 3, 70, 71, 144, 145, 256, 257, 310, 311, 72, 73, 704, 705, 304, 305, 708, 709, 306, 307, 670, 671, 258, 259, 74, 75, 76, 77, 260, 261, 262, 263, 264, 672, 673, 674, 78, 79, 80, 354, 355, 356, 312, 313, 314, 37, 38, 11, 81, 39, 82, 83, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 84, 85, 51, 52, 86, 87, 88, 89, 90, 91, 12, 92, 98, 99, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 1, 118, 104, 105, 106, 107, 108, 109, 93, 94, 95, 96, 97, 146, 147, 148, 149, 150, 151, 152, 153, 13, 154, 155, 156, 157, 158, 159, 160, 161, 0, 162, 163, 164, 165, 166, 167, 675, 676, 677, 678, 315, 316, 317, 318, 319, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 14, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 15, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 265, 266, 267, 2, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 16, 375, 17, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 18, 407, 19, 408, 20, 409, 21, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 436, 22, 437, 23, 438, 24, 439, 25, 440, 441, 442, 443, 444, 26, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 27, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 28, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 29, 604, 30, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 679, 31, 680, 32, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 700, 701, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 696, 697, 698, 459, 460, 461, 285, 288, 286, 287, 289, 290, 291, 292, 293, 294, 308, 309, 35, 703 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
