source_filename = "test"
target datalayout = "e-p:32:32:32-f80:32:32"

%sockaddr = type { i32, [14 x i8] }
%_TYPEDEF_sigset_t = type { [1 x i32] }
%tms = type { i32, i32, i32, i32 }
%timespec = type { i32, i32 }
%sigaction = type { void (i32)*, i32, void ()*, %_TYPEDEF_sigset_t }
%stat = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%linux_dirent64 = type { i32 }

@r0 = internal unnamed_addr global i32 0
@r1 = internal unnamed_addr global i32 0
@r2 = internal unnamed_addr global i32 0
@r3 = internal unnamed_addr global i32 0
@r4 = internal unnamed_addr global i32 0
@r5 = internal unnamed_addr global i32 0
@r6 = internal unnamed_addr global i32 0
@r7 = internal unnamed_addr global i32 0
@r8 = internal unnamed_addr global i32 0
@sb = internal unnamed_addr global i32 0
@sl = internal unnamed_addr global i32 0
@fp = internal unnamed_addr global i32 0
@ip = internal unnamed_addr global i32 0
@sp = internal unnamed_addr global i32 0
@lr = internal unnamed_addr global i32 0
@cpsr_z = internal unnamed_addr global i1 false
@0 = external global i32
@global_var_80a0.1 = constant i32 -352321502
@global_var_1d00c.5 = global i32 0
@global_var_1d01c.6 = global i32* @global_var_1d00c.5
@global_var_1d17c.12 = global i32 0
@global_var_e410.18 = constant i32 -382906384
@global_var_1d198.23 = global i32 0
@global_var_8314.24 = constant i32 -352321546
@global_var_12a70.25 = constant i32 -481296384
@global_var_c444.31 = constant i32 -382906384
@global_var_c908.33 = constant i32 -382906384
@global_var_bad4.35 = constant i32 -382906384
@global_var_b388.37 = constant i32 -382906384
@global_var_ac14.39 = constant i32 -382906384
@global_var_a3b4.41 = constant i32 -382906384
@global_var_9154.44 = constant i32 -382906384
@global_var_89d8.46 = constant i32 -382906384
@global_var_9870.48 = constant i32 -382906384
@global_var_1d234.50 = global i32 0
@global_var_1d23c.62 = global i32 0
@global_var_146b4.64 = constant i32 47
@global_var_85ce.66 = constant i32 58769
@global_var_1d19c.68 = global i32 0
@global_var_1d238.70 = global i32 0
@global_var_e294.72 = constant i32 -382910352
@global_var_1d028.74 = global i32 71628
@global_var_1d020.76 = global i32 -1
@global_var_1d244.82 = local_unnamed_addr global i32 0
@global_var_1d243.83 = local_unnamed_addr global i32 0
@global_var_1d242.84 = local_unnamed_addr global i32 0
@global_var_1d1a0.86 = global i32 0
@global_var_e10c.88 = constant i32 -442556408
@global_var_1d241.92 = local_unnamed_addr global i32 0
@global_var_146b8.96 = constant i32 10
@global_var_1d024.98 = global i32 -1
@global_var_11e18.102 = constant i32 -382910448
@global_var_117cc.103 = constant i32 -382910224
@global_var_146bc.106 = constant i32 16777216
@global_var_1d1a8.108 = global i32 0
@global_var_1d1b4.110 = global i32 0
@global_var_1d1ac.112 = global i32 0
@global_var_1d1b0.114 = global i32 0
@global_var_f2a8.127 = constant i32 -442695668
@global_var_1d258.129 = global i32 0
@global_var_1d1ec.131 = global i32 0
@global_var_1d1b8.133 = global i32 0
@global_var_1d1e4.135 = global i32 0
@global_var_1d250.143 = global i32 0
@global_var_1d254.145 = global i32 0
@global_var_1d1bf.148 = local_unnamed_addr global i32 0
@global_var_1d1be.149 = local_unnamed_addr global i32 0
@global_var_1d1d0.151 = global i32 0
@global_var_1d1c1.153 = local_unnamed_addr global i32 0
@global_var_1d1c5.154 = local_unnamed_addr global i32 0
@global_var_1d1c4.155 = local_unnamed_addr global i32 0
@global_var_1d1d3.156 = local_unnamed_addr global i32 0
@global_var_1d1d1.157 = local_unnamed_addr global i32 0
@global_var_1d1c0.158 = local_unnamed_addr global i32 0
@global_var_1d1d2.159 = local_unnamed_addr global i32 0
@global_var_1d1df.161 = local_unnamed_addr global i32 0
@global_var_1d1de.162 = local_unnamed_addr global i32 0
@global_var_14748.164 = constant [5 x i8] c"&;; \00"
@global_var_1474c.166 = constant i32 536542976
@global_var_146c4.168 = constant [5 x i8] c"5:?;\00"
@global_var_146cc.170 = constant [9 x i8] c"<!: acam\00"
@global_var_146d8.172 = constant [8 x i8] c"0125!8 \00"
@global_var_146e0.174 = constant [9 x i8] c"$5''#;&0\00"
@global_var_146ec.176 = constant [6 x i8] c"509=:\00"
@global_var_146f4.178 = constant [6 x i8] c"\22=.,\22\00"
@global_var_146fc.180 = constant [8 x i8] c"'!$$;& \00"
@global_var_14704.182 = constant i32 423502179
@global_var_14714.184 = constant [6 x i8] c"efg`a\00"
@global_var_1471c.186 = constant [5 x i8] c"!'1&\00"
@global_var_14724.188 = constant i32 943467547
@global_var_14730.190 = constant i32 322070023
@global_var_1473c.192 = constant [5 x i8] c"efg`\00"
@global_var_1d1c8.193 = local_unnamed_addr global i32 0
@global_var_1d1c6.195 = local_unnamed_addr global i32 0
@global_var_1d1c7.196 = local_unnamed_addr global i32 0
@global_var_1d1e0.198 = local_unnamed_addr global i32 0
@global_var_1d1e1.199 = local_unnamed_addr global i32 0
@global_var_14744.205 = constant [3 x i8] c"\0D\0A\00"
@global_var_14756.207 = constant i32 2096127
@global_var_1474d.209 = constant i32 2095871
@global_var_1d260.211 = global i32 0
@global_var_1d030.214 = global i32 -555811921
@global_var_1475c.219 = constant i32 48212
@global_var_1d268.220 = local_unnamed_addr global i32 0
@global_var_1d26c.221 = local_unnamed_addr global i32 0
@global_var_1d26d.222 = local_unnamed_addr global i32 0
@global_var_14760.224 = constant [17 x i8] c"&;; '1:$5=z'= 1T\00"
@global_var_1d270.225 = local_unnamed_addr global i32 0
@global_var_1d274.226 = local_unnamed_addr global i32 0
@global_var_1d275.227 = local_unnamed_addr global i32 0
@global_var_1d278.228 = local_unnamed_addr global i32 0
@global_var_1d27c.229 = local_unnamed_addr global i32 0
@global_var_1d27d.230 = local_unnamed_addr global i32 0
@global_var_14774.232 = constant i32 32750
@global_var_1d280.233 = local_unnamed_addr global i32 0
@global_var_1d284.234 = local_unnamed_addr global i32 0
@global_var_1d285.235 = local_unnamed_addr global i32 0
@global_var_14778.237 = constant [28 x i8] c"-;!&t <1t9;' t35-t7!: t;! T\00"
@global_var_1d28c.238 = local_unnamed_addr global i32 0
@global_var_1d288.239 = local_unnamed_addr global i32 0
@global_var_1d28d.240 = local_unnamed_addr global i32 0
@global_var_14794.242 = constant [7 x i8] c"'<188T\00"
@global_var_1d294.243 = local_unnamed_addr global i32 0
@global_var_1d290.244 = local_unnamed_addr global i32 0
@global_var_1d295.245 = local_unnamed_addr global i32 0
@global_var_1479c.247 = constant [8 x i8] c"1:5681T\00"
@global_var_1d298.248 = local_unnamed_addr global i32 0
@global_var_1d29c.249 = local_unnamed_addr global i32 0
@global_var_1d29d.250 = local_unnamed_addr global i32 0
@global_var_147a4.252 = constant [8 x i8] c"'-' 19T\00"
@global_var_1d2a0.253 = local_unnamed_addr global i32 0
@global_var_1d2a4.254 = local_unnamed_addr global i32 0
@global_var_1d2a5.255 = local_unnamed_addr global i32 0
@global_var_147ac.257 = constant [4 x i8] c"'<T\00"
@global_var_1d2ac.258 = local_unnamed_addr global i32 0
@global_var_1d2a8.259 = local_unnamed_addr global i32 0
@global_var_1d2ad.260 = local_unnamed_addr global i32 0
@global_var_147b0.262 = constant i32 977090171
@global_var_1d2b0.263 = local_unnamed_addr global i32 0
@global_var_1d2b4.264 = local_unnamed_addr global i32 0
@global_var_1d2b5.265 = local_unnamed_addr global i32 0
@global_var_147c4.267 = constant i32 102440217
@global_var_1d2bc.268 = local_unnamed_addr global i32 0
@global_var_1d2b8.269 = local_unnamed_addr global i32 0
@global_var_1d2bd.270 = local_unnamed_addr global i32 0
@global_var_147e0.272 = constant [10 x i8] c":7;&&17 T\00"
@global_var_1d2c4.273 = local_unnamed_addr global i32 0
@global_var_1d2c0.274 = local_unnamed_addr global i32 0
@global_var_1d2c5.275 = local_unnamed_addr global i32 0
@global_var_147ec.277 = constant [17 x i8] c"{6=:{6!'-6;,t$'T\00"
@global_var_1d2c8.278 = local_unnamed_addr global i32 0
@global_var_1d2cc.279 = local_unnamed_addr global i32 0
@global_var_1d2cd.280 = local_unnamed_addr global i32 0
@global_var_14800.282 = constant [23 x i8] c"{6=:{6!'-6;,t?=88tymtT\00"
@global_var_1d2d4.283 = local_unnamed_addr global i32 0
@global_var_1d2d0.284 = local_unnamed_addr global i32 0
@global_var_1d2d5.285 = local_unnamed_addr global i32 0
@global_var_14818.287 = constant [8 x i8] c"{$&;7{T\00"
@global_var_1d2d8.288 = local_unnamed_addr global i32 0
@global_var_1d2dc.289 = local_unnamed_addr global i32 0
@global_var_1d2dd.290 = local_unnamed_addr global i32 0
@global_var_14820.292 = constant [6 x i8] c"{1,1T\00"
@global_var_1d2e4.293 = local_unnamed_addr global i32 0
@global_var_1d2e0.294 = local_unnamed_addr global i32 0
@global_var_1d2e5.295 = local_unnamed_addr global i32 0
@global_var_14828.297 = constant [5 x i8] c"{20T\00"
@global_var_1d2ec.298 = local_unnamed_addr global i32 0
@global_var_1d2e8.299 = local_unnamed_addr global i32 0
@global_var_1d2ed.300 = local_unnamed_addr global i32 0
@global_var_14830.302 = constant [7 x i8] c"{95$'T\00"
@global_var_1d2f4.303 = local_unnamed_addr global i32 0
@global_var_1d2f0.304 = local_unnamed_addr global i32 0
@global_var_1d2f5.305 = local_unnamed_addr global i32 0
@global_var_14838.307 = constant [15 x i8] c"{$&;7{:1 { 7$T\00"
@global_var_1d2f8.308 = local_unnamed_addr global i32 0
@global_var_1d2fc.309 = local_unnamed_addr global i32 0
@global_var_1d2fd.310 = local_unnamed_addr global i32 0
@global_var_14848.312 = constant [9 x i8] c"{' 5 !'T\00"
@global_var_1d370.313 = local_unnamed_addr global i32 0
@global_var_1d374.314 = local_unnamed_addr global i32 0
@global_var_1d375.315 = local_unnamed_addr global i32 0
@global_var_14854.317 = constant [8 x i8] c"z5:=91T\00"
@global_var_1d378.318 = local_unnamed_addr global i32 0
@global_var_1d37c.319 = local_unnamed_addr global i32 0
@global_var_1d37d.320 = local_unnamed_addr global i32 0
@global_var_1485c.322 = constant [17 x i8] c"{$&;7{:1 {&;! 1T\00"
@global_var_1d300.323 = local_unnamed_addr global i32 0
@global_var_1d304.324 = local_unnamed_addr global i32 0
@global_var_1d305.325 = local_unnamed_addr global i32 0
@global_var_14870.327 = constant [24 x i8] c"3e567`09;ga<:$f8=1d?>2T\00"
@global_var_1d308.328 = local_unnamed_addr global i32 0
@global_var_1d30c.329 = local_unnamed_addr global i32 0
@global_var_1d30d.330 = local_unnamed_addr global i32 0
@global_var_14888.332 = constant [9 x i8] c"5''#;&0T\00"
@global_var_1d310.333 = local_unnamed_addr global i32 0
@global_var_1d314.334 = local_unnamed_addr global i32 0
@global_var_1d315.335 = local_unnamed_addr global i32 0
@global_var_14894.337 = constant [15 x i8] c"{01\22{#5 7<0;3T\00"
@global_var_1d318.338 = local_unnamed_addr global i32 0
@global_var_1d31c.339 = local_unnamed_addr global i32 0
@global_var_1d31d.340 = local_unnamed_addr global i32 0
@global_var_148a4.342 = constant [20 x i8] c"{01\22{9='7{#5 7<0;3T\00"
@global_var_1d320.343 = local_unnamed_addr global i32 0
@global_var_1d324.344 = local_unnamed_addr global i32 0
@global_var_1d325.345 = local_unnamed_addr global i32 0
@global_var_148b8.347 = constant [11 x i8] c"0\22&<18$1&T\00"
@global_var_1d384.348 = local_unnamed_addr global i32 0
@global_var_1d380.349 = local_unnamed_addr global i32 0
@global_var_1d385.350 = local_unnamed_addr global i32 0
@global_var_1491c.352 = constant i32 557516544
@global_var_1d32c.353 = local_unnamed_addr global i32 0
@global_var_1d328.354 = local_unnamed_addr global i32 0
@global_var_1d32d.355 = local_unnamed_addr global i32 0
@global_var_148c4.357 = constant [18 x i8] c"{1 7{&1';8\22z7;:2T\00"
@global_var_1d334.358 = local_unnamed_addr global i32 0
@global_var_1d330.359 = local_unnamed_addr global i32 0
@global_var_1d335.360 = local_unnamed_addr global i32 0
@global_var_148d8.362 = constant [13 x i8] c":591'1&\221&tT\00"
@global_var_1d33c.363 = local_unnamed_addr global i32 0
@global_var_1d338.364 = local_unnamed_addr global i32 0
@global_var_1d33d.365 = local_unnamed_addr global i32 0
@global_var_1d340.366 = local_unnamed_addr global i32 0
@global_var_1d344.367 = local_unnamed_addr global i32 0
@global_var_1d345.368 = local_unnamed_addr global i32 0
@global_var_1d348.369 = local_unnamed_addr global i32 0
@global_var_1d34c.370 = local_unnamed_addr global i32 0
@global_var_1d34d.371 = local_unnamed_addr global i32 0
@global_var_148e8.373 = constant [9 x i8] c"$662*7!E\00"
@global_var_1d350.374 = local_unnamed_addr global i32 0
@global_var_1d354.375 = local_unnamed_addr global i32 0
@global_var_1d355.376 = local_unnamed_addr global i32 0
@global_var_148f4.378 = constant [6 x i8] c";3=:T\00"
@global_var_1d35c.379 = local_unnamed_addr global i32 0
@global_var_1d358.380 = local_unnamed_addr global i32 0
@global_var_1d35d.381 = local_unnamed_addr global i32 0
@global_var_148fc.383 = constant [7 x i8] c"1: 1&T\00"
@global_var_1d360.384 = local_unnamed_addr global i32 0
@global_var_1d364.385 = local_unnamed_addr global i32 0
@global_var_1d365.386 = local_unnamed_addr global i32 0
@global_var_14904.388 = constant [24 x i8] c"e365`70;9ag:<$ef1=d?2>T\00"
@global_var_1d36d.389 = local_unnamed_addr global i32 0
@global_var_1d368.390 = local_unnamed_addr global i32 0
@global_var_1d36c.391 = local_unnamed_addr global i32 0
@global_var_13458.394 = constant i32 -476053504
@global_var_121e8.398 = constant i32 -443219956
@global_var_12354.403 = constant i32 -376111092
@global_var_1d228.406 = global i32 0
@global_var_124cc.408 = constant i32 -456978431
@global_var_1d388.410 = global i32 0
@global_var_1d1f0.412 = global i32 0
@global_var_1d130.415 = global i32 256
@global_var_1d034.416 = global i32* @global_var_1d130.415
@global_var_1d218.419 = global i32 0
@global_var_1d408.421 = global i32 0
@global_var_13c0c.422 = constant i32 -382910416
@global_var_12450.423 = constant i32 -509595648
@global_var_12af0.430 = constant i32 -442564520
@global_var_1d13c.436 = global i32 0
@global_var_12094.438 = constant i32 -481230848
@global_var_1d208.440 = global i32 0
@global_var_1385c.442 = constant i32 -509587456
@global_var_14a40.444 = constant i32 33554944
@global_var_1d174.445 = global i32* @global_var_14a40.444
@global_var_1d154.448 = global i32 0
@global_var_1d20c.452 = local_unnamed_addr global i32 0
@global_var_13210.454 = constant i32 -352321419
@global_var_1d000.458 = global i32 -1
@global_var_1d21c.461 = global i32 0
@global_var_1d220.463 = local_unnamed_addr global i32 0
@global_var_13444.464 = constant i32 -390234096
@global_var_14934.466 = constant [10 x i8] c"/dev/null\00"
@global_var_1d224.468 = global i32 0
@global_var_1d210.473 = local_unnamed_addr global i32 0
@global_var_1d214.475 = global i32 0
@global_var_12430.477 = constant i32 -369096946
@global_var_1d16c = external local_unnamed_addr global i32
@global_var_123ec.487 = constant i32 -442564608
@global_var_1370c.489 = constant i32 -335544664
@global_var_13828.492 = constant i32 -275775369
@global_var_13fa0.493 = constant i32 -382910352
@global_var_1d230.495 = global i32 0
@global_var_1d420.498 = global i32 0
@global_var_1d424.500 = global i32 0
@global_var_1d004.503 = global i32 0
@global_var_1d178.3 = external global i8*
@global_var_1d194.21 = external global i8*
@global_var_1d195.29 = global i8 0
@1 = internal constant [2 x i8] c"\01\00"
@global_var_1d02c.78 = global i8* getelementptr inbounds ([2 x i8], [2 x i8]* @1, i32 0, i32 0)
@global_var_1d240.81 = external global i8*
@global_var_1d1a4.101 = external global i8*
@global_var_1d1e8.137 = external global i8*
@global_var_1d1e9.138 = local_unnamed_addr global i8 0
@global_var_1d1bc.147 = external global i8*
@global_var_1d1dc.152 = local_unnamed_addr global i8 0
@global_var_1d1dd.160 = local_unnamed_addr global i8 0
@global_var_1d1d4.197 = local_unnamed_addr global i8 0
@global_var_1d1cc.194 = local_unnamed_addr global i8 0

declare void @__pseudo_branch(i32) local_unnamed_addr

declare void @__pseudo_cond_branch(i1, i32) local_unnamed_addr

define i32 @function_8094() local_unnamed_addr {
entry:
  %v3_8098 = load i32, i32* @r4, align 4
  %v0_80a0 = call i32 @function_8130()
  store i32 %v0_80a0, i32* @r0, align 4
  %v1_80a4 = call i32 @function_14664(i32 %v0_80a0)
  call void @__pseudo_branch(i32 %v3_8098)
  ret i32 %v1_80a4
}

define i32 @function_80b0() local_unnamed_addr {
entry:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_80b0 = load i32, i32* @r4, align 4
  store i32 %v3_80b0, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i8** @global_var_1d178.3 to i32), i32* %r5.global-to-local, align 4
  %v2_80b8 = load i8, i8* bitcast (i8** @global_var_1d178.3 to i8*), align 4
  %v2_80bc = icmp eq i8 %v2_80b8, 0
  br i1 %v2_80bc, label %bb7, label %bb

bb:                                               ; preds = %entry
  %v12_80c0 = load i32, i32* @r0, align 4
  ret i32 %v12_80c0

bb7:                                              ; preds = %entry
  store i32 ptrtoint (i32** @global_var_1d01c.6 to i32), i32* %r4.global-to-local, align 4
  %v2_80c8 = load i32, i32* bitcast (i32** @global_var_1d01c.6 to i32*), align 4
  store i32 %v2_80c8, i32* %r2.global-to-local, align 4
  %v2_80d0 = icmp eq i32 %v2_80c8, 0
  br i1 %v2_80d0, label %bb8, label %dec_label_pc_80d8

dec_label_pc_80d8:                                ; preds = %bb7, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge
  %v1_80dc = phi i32 [ %v1_80dc.pre, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ ptrtoint (i32** @global_var_1d01c.6 to i32), %bb7 ]
  %v0_80d8 = phi i32 [ %v2_80e8, %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge ], [ %v2_80c8, %bb7 ]
  %v1_80d8 = add i32 %v0_80d8, 4
  %v2_80dc = inttoptr i32 %v1_80dc to i32*
  store i32 %v1_80d8, i32* %v2_80dc, align 4
  %v0_80e4 = load i32, i32* %r2.global-to-local, align 4
  call void @__pseudo_branch(i32 %v0_80e4)
  %v2_80e8 = load i32, i32* bitcast (i32** @global_var_1d01c.6 to i32*), align 4
  store i32 %v2_80e8, i32* %r2.global-to-local, align 4
  %v2_80f0 = icmp eq i32 %v2_80e8, 0
  br i1 %v2_80f0, label %.loopexit, label %dec_label_pc_80d8.dec_label_pc_80d8_crit_edge

dec_label_pc_80d8.dec_label_pc_80d8_crit_edge:    ; preds = %dec_label_pc_80d8
  %v1_80dc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_80d8

.loopexit:                                        ; preds = %dec_label_pc_80d8
  %v2_8110.pre = load i32, i32* %r5.global-to-local, align 4
  br label %bb8

bb8:                                              ; preds = %.loopexit, %bb7
  %v2_8110 = phi i32 [ %v2_8110.pre, %.loopexit ], [ ptrtoint (i8** @global_var_1d178.3 to i32), %bb7 ]
  %v3_8110 = inttoptr i32 %v2_8110 to i8*
  store i8 1, i8* %v3_8110, align 1
  %v2_8114 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_8114, i32* %r4.global-to-local, align 4
  %v11_8114 = load i32, i32* @r0, align 4
  ret i32 %v11_8114

; uselistorder directives
  uselistorder i32 %v2_80e8, { 1, 2, 0 }
  uselistorder i32** @global_var_1d01c.6, { 1, 0 }
  uselistorder i8** @global_var_1d178.3, { 1, 0 }
  uselistorder label %dec_label_pc_80d8, { 1, 0 }
}

define i32 @function_8124(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_8124:
  %v0_8124 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_8124, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_8124
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_8124, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_8130() local_unnamed_addr {
.thread:
  %v2_8150 = load i32, i32* inttoptr (i32 118800 to i32*), align 16
  %v2_8154 = icmp eq i32 %v2_8150, 0
  br i1 %v2_8154, label %bb, label %bb2

bb:                                               ; preds = %.thread
  ret i32 118800

bb2:                                              ; preds = %.thread
  ret i32 118800

; uselistorder directives
  uselistorder i32 118800, { 1, 0, 2 }
}

define i32 @function_8188() local_unnamed_addr {
dec_label_pc_8188:
  %v5_818c = load i32, i32* @r0, align 4
  ret i32 %v5_818c
}

define i32 @entry_point(i32 %arg1, i32 %arg2) local_unnamed_addr {
entry:
  %stack_var_4 = alloca i32, align 4
  %v4_8198 = ptrtoint i32* %stack_var_4 to i32
  %v8_81b8 = call i32 @function_134f8(i32 ptrtoint (i32* @global_var_e410.18 to i32), i32 %arg2, i32* nonnull %stack_var_4, i32 32916, i32 83616, i32 %arg1, i32 %v4_8198)
  %v0_81bc = call i32 @function_12ec0()
  ret i32 %v0_81bc
}

define i32 @function_81cc(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_81cc:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_81cc = urem i32 %arg1, 256
  %v2_81d0 = icmp eq i32 %v1_81cc, 0
  %v1_81d8 = urem i32 %arg3, 256
  br i1 %v2_81d0, label %dec_label_pc_821c, label %dec_label_pc_81e4

dec_label_pc_81e4:                                ; preds = %dec_label_pc_81cc
  %v0_81e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_81e4 = add i32 %v0_81e4, 4
  %v2_81e4 = inttoptr i32 %v1_81e4 to i8*
  %v3_81e4 = load i8, i8* %v2_81e4, align 1
  %v4_81e4 = zext i8 %v3_81e4 to i32
  %v9_81e8 = icmp eq i32 %v4_81e4, %v1_81d8
  br i1 %v9_81e8, label %dec_label_pc_8224, label %dec_label_pc_820c.preheader

dec_label_pc_820c.preheader:                      ; preds = %dec_label_pc_81e4
  br label %dec_label_pc_820c

dec_label_pc_81fc:                                ; preds = %dec_label_pc_820c
  %v1_81fc = add i32 %v0_8204.in, 12
  %v2_81fc = inttoptr i32 %v1_81fc to i8*
  %v3_81fc = load i8, i8* %v2_81fc, align 1
  %v4_81fc = zext i8 %v3_81fc to i32
  %v9_8200 = icmp eq i32 %v4_81fc, %v1_81d8
  br i1 %v9_8200, label %dec_label_pc_8224, label %dec_label_pc_820c

dec_label_pc_820c:                                ; preds = %dec_label_pc_820c.preheader, %dec_label_pc_81fc
  %v0_8204.in = phi i32 [ %v0_81e4, %dec_label_pc_820c.preheader ], [ %v0_8204, %dec_label_pc_81fc ]
  %v0_820c = phi i32 [ 0, %dec_label_pc_820c.preheader ], [ %v1_820c, %dec_label_pc_81fc ]
  %v0_8204 = add i32 %v0_8204.in, 8
  %v1_820c = add i32 %v0_820c, 1
  %v9_8210 = icmp eq i32 %v1_820c, %v1_81cc
  store i32 %v0_8204, i32* %r1.global-to-local, align 4
  br i1 %v9_8210, label %dec_label_pc_821c, label %dec_label_pc_81fc

dec_label_pc_821c:                                ; preds = %dec_label_pc_820c, %dec_label_pc_81cc
  ret i32 %arg4

dec_label_pc_8224:                                ; preds = %dec_label_pc_81fc, %dec_label_pc_81e4
  %v0_8224 = phi i32 [ %v0_81e4, %dec_label_pc_81e4 ], [ %v0_8204, %dec_label_pc_81fc ]
  %v1_8224 = inttoptr i32 %v0_8224 to i32*
  %v2_8224 = load i32, i32* %v1_8224, align 4
  ret i32 %v2_8224

; uselistorder directives
  uselistorder i32 %v1_820c, { 1, 0 }
  uselistorder i32 %v0_8204, { 1, 0, 2 }
  uselistorder i32 %v0_8204.in, { 1, 0 }
  uselistorder i32 %v0_81e4, { 1, 0, 2 }
  uselistorder i32 %v1_81d8, { 1, 0 }
  uselistorder i32 %v1_81cc, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_820c, { 1, 0 }
}

define i32 @function_8230(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_8230:
  store i32 %arg1, i32* @r6, align 4
  %v1_823c = urem i32 %arg2, 256
  store i32 %v1_823c, i32* @r7, align 4
  %v0_8248 = call i32 @function_11e44()
  %v7_824c = icmp eq i32 %v0_8248, -1
  %tmp23 = icmp slt i32 %v0_8248, 1
  br i1 %tmp23, label %bb24, label %.thread2

.thread2:                                         ; preds = %dec_label_pc_8230
  br label %bb25

bb24:                                             ; preds = %dec_label_pc_8230
  %. = zext i1 %v7_824c to i32
  store i32 %., i32* @r5, align 4
  %v2_8264 = icmp eq i1 %v7_824c, false
  br i1 %v2_8264, label %bb26, label %bb25

bb25:                                             ; preds = %.thread2, %bb24
  ret i32 %v0_8248

bb26:                                             ; preds = %bb24
  %v0_826c = call i32 @function_11e44()
  %v7_8270 = icmp eq i32 %v0_826c, -1
  store i32 %v0_826c, i32* @r4, align 4
  br i1 %v7_8270, label %dec_label_pc_82a0, label %dec_label_pc_827c

dec_label_pc_827c:                                ; preds = %bb26
  %v2_827c = icmp eq i32 %v0_826c, 0
  br i1 %v2_827c, label %dec_label_pc_8284, label %dec_label_pc_82a8

dec_label_pc_8284:                                ; preds = %dec_label_pc_827c
  %v0_8284 = load i32, i32* @r6, align 4
  %v1_8288 = call i32 @function_13248(i32 %v0_8284)
  %v0_828c = call i32 @function_11e9c()
  %v2_8294 = call i32 @function_11f18(i32 %v0_828c, i32 9)
  %v0_8298 = load i32, i32* @r4, align 4
  %v1_829c = call i32 @function_131b4(i32 %v0_8298)
  br label %dec_label_pc_82a0

dec_label_pc_82a0:                                ; preds = %bb26, %dec_label_pc_8284
  %v0_82a0 = load i32, i32* @r5, align 4
  %v1_82a4 = call i32 @function_131b4(i32 %v0_82a0)
  br label %dec_label_pc_82a8

dec_label_pc_82a8:                                ; preds = %dec_label_pc_827c, %dec_label_pc_82a0
  %v2_82ac = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_82ac = zext i8 %v2_82ac to i32
  %v2_82b0 = icmp eq i8 %v2_82ac, 0
  br i1 %v2_82b0, label %dec_label_pc_82f4, label %dec_label_pc_82b8

dec_label_pc_82b8:                                ; preds = %dec_label_pc_82a8
  %v2_82bc = load i32, i32* @global_var_1d198.23, align 4
  %v1_82c0 = inttoptr i32 %v2_82bc to i32*
  %v2_82c0 = load i32, i32* %v1_82c0, align 4
  store i32 %v2_82c0, i32* @ip, align 4
  %v1_82c4 = add i32 %v2_82c0, 4
  %v2_82c4 = inttoptr i32 %v1_82c4 to i8*
  %v3_82c4 = load i8, i8* %v2_82c4, align 1
  %v4_82c4 = zext i8 %v3_82c4 to i32
  %v1_82c8 = load i32, i32* @r7, align 4
  %v9_82c8 = icmp eq i32 %v4_82c4, %v1_82c8
  br i1 %v9_82c8, label %dec_label_pc_82fc, label %dec_label_pc_82e8.preheader

dec_label_pc_82e8.preheader:                      ; preds = %dec_label_pc_82b8
  %v1_82cc = load i32, i32* @r5, align 4
  br label %dec_label_pc_82e8

dec_label_pc_82d8:                                ; preds = %dec_label_pc_82e8
  %v4_82d8 = mul i32 %v1_82e8, 4
  %v5_82d8 = add i32 %v4_82d8, %v2_82bc
  %v6_82d8 = inttoptr i32 %v5_82d8 to i32*
  %v7_82d8 = load i32, i32* %v6_82d8, align 4
  store i32 %v7_82d8, i32* @ip, align 4
  %v1_82dc = add i32 %v7_82d8, 4
  %v2_82dc = inttoptr i32 %v1_82dc to i8*
  %v3_82dc = load i8, i8* %v2_82dc, align 1
  %v4_82dc = zext i8 %v3_82dc to i32
  %v9_82e0 = icmp eq i32 %v4_82dc, %v1_82c8
  br i1 %v9_82e0, label %dec_label_pc_82fc, label %dec_label_pc_82e8

dec_label_pc_82e8:                                ; preds = %dec_label_pc_82e8.preheader, %dec_label_pc_82d8
  %v0_82e8 = phi i32 [ %v1_82cc, %dec_label_pc_82e8.preheader ], [ %v1_82e8, %dec_label_pc_82d8 ]
  %v1_82e8 = add i32 %v0_82e8, 1
  %v9_82ec = icmp eq i32 %v1_82e8, %v3_82ac
  br i1 %v9_82ec, label %dec_label_pc_82f4, label %dec_label_pc_82d8

dec_label_pc_82f4:                                ; preds = %dec_label_pc_82e8, %dec_label_pc_82a8, %dec_label_pc_82fc
  %v1_82f8 = call i32 @function_131b4(i32 0)
  %v0_8310.pre = load i32, i32* @ip, align 4
  br label %dec_label_pc_82fc

dec_label_pc_82fc:                                ; preds = %dec_label_pc_82d8, %dec_label_pc_82b8, %dec_label_pc_82f4
  %v0_8310 = phi i32 [ %v2_82c0, %dec_label_pc_82b8 ], [ %v0_8310.pre, %dec_label_pc_82f4 ], [ %v7_82d8, %dec_label_pc_82d8 ]
  %v1_8310 = inttoptr i32 %v0_8310 to i32*
  %v2_8310 = load i32, i32* %v1_8310, align 4
  call void @__pseudo_branch(i32 %v2_8310)
  br label %dec_label_pc_82f4

; uselistorder directives
  uselistorder i32 %v1_82e8, { 2, 0, 1 }
  uselistorder i32 %v0_826c, { 1, 2, 0 }
  uselistorder i1 %v7_824c, { 1, 0 }
  uselistorder i32 %v0_8248, { 1, 2, 0 }
  uselistorder label %dec_label_pc_82fc, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82f4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_82e8, { 1, 0 }
  uselistorder label %dec_label_pc_82a8, { 1, 0 }
  uselistorder label %dec_label_pc_82a0, { 1, 0 }
  uselistorder label %bb25, { 1, 0 }
}

define i32 @function_8320(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_8320:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v3_8320 = load i32, i32* @r4, align 4
  %v6_8320 = load i32, i32* @r5, align 4
  %v9_8320 = load i32, i32* @r6, align 4
  %v12_8320 = load i32, i32* @r7, align 4
  %v15_8320 = load i32, i32* @r8, align 4
  %v18_8320 = load i32, i32* @sb, align 4
  %v21_8320 = load i32, i32* @sl, align 4
  %v27_8320 = load i32, i32* @lr, align 4
  %v7_8324 = icmp eq i32 %arg2, 3
  store i1 %v7_8324, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* @r5, align 4
  %v0_8330 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_8330, i32* @r4, align 4
  %tmp33 = icmp ult i32 %arg2, 4
  br i1 %tmp33, label %dec_label_pc_8344, label %dec_label_pc_8338

dec_label_pc_8338:                                ; preds = %dec_label_pc_8320
  %v7_8338 = icmp eq i32 %arg2, 4
  store i1 %v7_8338, i1* %cpsr_z.global-to-local, align 1
  %v1_833c = inttoptr i32 %v0_8330 to i32*
  %v2_833c = load i32, i32* %v1_833c, align 4
  store i32 %v2_833c, i32* @sl, align 4
  br i1 %v7_8338, label %dec_label_pc_8344, label %dec_label_pc_834c

dec_label_pc_8344:                                ; preds = %dec_label_pc_8368, %.dec_label_pc_8344_crit_edge, %dec_label_pc_8338, %dec_label_pc_835c, %dec_label_pc_834c, %dec_label_pc_8320
  %v29_8348 = phi i32 [ %v29_8348.pre, %.dec_label_pc_8344_crit_edge ], [ %v0_8330, %dec_label_pc_8368 ], [ %v0_8330, %dec_label_pc_8338 ], [ %v0_8330, %dec_label_pc_835c ], [ %v0_8330, %dec_label_pc_834c ], [ %v0_8330, %dec_label_pc_8320 ]
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  ret i32 %v29_8348

dec_label_pc_834c:                                ; preds = %dec_label_pc_8338
  %v7_834c = icmp eq i32 %arg2, 5
  store i1 %v7_834c, i1* %cpsr_z.global-to-local, align 1
  %v1_8350 = add i32 %v0_8330, 4
  %v2_8350 = inttoptr i32 %v1_8350 to i8*
  %v3_8350 = load i8, i8* %v2_8350, align 1
  %v4_8350 = zext i8 %v3_8350 to i32
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  br i1 %v7_834c, label %dec_label_pc_8344, label %dec_label_pc_835c

dec_label_pc_835c:                                ; preds = %dec_label_pc_834c
  %v1_835c = add i32 %v0_8330, 5
  %v2_835c = inttoptr i32 %v1_835c to i8*
  %v3_835c = load i8, i8* %v2_835c, align 1
  %v4_835c = zext i8 %v3_835c to i32
  store i32 %v4_835c, i32* @r7, align 4
  %v2_8360 = icmp eq i8 %v3_835c, 0
  store i1 %v2_8360, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8360, label %dec_label_pc_8344, label %dec_label_pc_8368

dec_label_pc_8368:                                ; preds = %dec_label_pc_835c
  %v3_8368 = mul nuw nsw i32 %v4_835c, 4
  store i32 %v3_8368, i32* @sb, align 4
  %v1_836c = add i32 %arg2, -6
  store i32 %v1_836c, i32* @r6, align 4
  %v2_8370 = mul nuw nsw i32 %v4_835c, 5
  store i32 %v2_8370, i32* @r8, align 4
  %v3_8374 = icmp ult i32 %v1_836c, %v2_8370
  %v9_8374 = icmp eq i32 %v1_836c, %v2_8370
  store i1 %v9_8374, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_8374, label %dec_label_pc_8344, label %dec_label_pc_837c

dec_label_pc_837c:                                ; preds = %dec_label_pc_8368
  store i32 %v4_835c, i32* %r0.global-to-local, align 4
  store i32 24, i32* %r1.global-to-local, align 4
  %v2_8384 = call i32 @function_12a18(i32 %v4_835c, i32 24)
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  %v0_8388 = load i32, i32* @r7, align 4
  %v2_8388 = icmp eq i32 %v0_8388, 0
  store i1 %v2_8388, i1* %cpsr_z.global-to-local, align 1
  %v0_8390 = load i32, i32* @r4, align 4
  %v1_8390 = add i32 %v0_8390, 6
  store i32 %v1_8390, i32* %fp.global-to-local, align 4
  %tmp27 = icmp slt i32 %v0_8388, 1
  br i1 %tmp27, label %dec_label_pc_83e8thread-pre-split, label %dec_label_pc_8398

dec_label_pc_8398:                                ; preds = %dec_label_pc_837c
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v1_839c = load i32, i32* @r8, align 4
  %v2_839c = add i32 %v1_839c, %v0_8390
  store i32 %v2_839c, i32* %ip.global-to-local, align 4
  store i32 %v0_8390, i32* %r0.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 2, i32* @r4, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83ac:                                ; preds = %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge, %dec_label_pc_8398
  %v2_83bc = phi i32 [ %v1_83d0, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_8384, %dec_label_pc_8398 ]
  %v1_83b8 = phi i32 [ %v1_83b8.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v2_839c, %dec_label_pc_8398 ]
  %v0_83b4 = phi i32 [ %v0_83ac.pre, %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge ], [ %v0_8390, %dec_label_pc_8398 ]
  %v1_83ac = add i32 %v0_83b4, 10
  %v2_83ac = inttoptr i32 %v1_83ac to i8*
  %v3_83ac = load i8, i8* %v2_83ac, align 1
  %v1_83b0 = add i32 %v0_83b4, 6
  %v2_83b0 = inttoptr i32 %v1_83b0 to i32*
  %v3_83b0 = load i32, i32* %v2_83b0, align 4
  store i32 %v3_83b0, i32* %r2.global-to-local, align 4
  %v1_83b4 = add i32 %v0_83b4, 5
  store i32 %v1_83b4, i32* %r0.global-to-local, align 4
  %v9_83b8 = icmp eq i32 %v1_83b4, %v1_83b8
  store i1 %v9_83b8, i1* %cpsr_z.global-to-local, align 1
  %v3_83bc = add i32 %v2_83bc, 20
  %v4_83bc = inttoptr i32 %v3_83bc to i8*
  store i8 %v3_83ac, i8* %v4_83bc, align 1
  %v0_83c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c0 = add i32 %v1_83c0, 4
  %v3_83c0 = inttoptr i32 %v2_83c0 to i32*
  store i32 %v0_83c0, i32* %v3_83c0, align 4
  %v0_83c4 = load i32, i32* %r2.global-to-local, align 4
  %v1_83c4 = load i32, i32* %r1.global-to-local, align 4
  %v2_83c4 = add i32 %v1_83c4, 16
  %v3_83c4 = inttoptr i32 %v2_83c4 to i32*
  store i32 %v0_83c4, i32* %v3_83c4, align 4
  %v0_83c8 = load i32, i32* @r4, align 4
  %v1_83c8 = trunc i32 %v0_83c8 to i8
  %v2_83c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_83c8 = inttoptr i32 %v2_83c8 to i8*
  store i8 %v1_83c8, i8* %v3_83c8, align 1
  %v0_83cc = load i32, i32* @lr, align 4
  %v1_83cc = trunc i32 %v0_83cc to i8
  %v2_83cc = load i32, i32* %r1.global-to-local, align 4
  %v3_83cc = add i32 %v2_83cc, 1
  %v4_83cc = inttoptr i32 %v3_83cc to i8*
  store i8 %v1_83cc, i8* %v4_83cc, align 1
  %v0_83d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_83d0 = add i32 %v0_83d0, 24
  store i32 %v1_83d0, i32* %r1.global-to-local, align 4
  %v0_83d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_83d4, label %dec_label_pc_83d8, label %dec_label_pc_83ac.dec_label_pc_83ac_crit_edge

dec_label_pc_83ac.dec_label_pc_83ac_crit_edge:    ; preds = %dec_label_pc_83ac
  %v0_83ac.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_83b8.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_83ac

dec_label_pc_83d8:                                ; preds = %dec_label_pc_83ac
  %v0_83d8 = load i32, i32* @sb, align 4
  %v1_83d8 = load i32, i32* @r7, align 4
  %v1_83dc = load i32, i32* @r5, align 4
  %sum = add i32 %v1_83d8, %v0_83d8
  %v2_83dc = sub i32 %v1_83dc, %sum
  %v0_83e0 = load i32, i32* %r0.global-to-local, align 4
  %v1_83e0 = add i32 %v0_83e0, 6
  store i32 %v1_83e0, i32* %fp.global-to-local, align 4
  %v1_83e4 = add i32 %v2_83dc, -6
  store i32 %v1_83e4, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8thread-pre-split:                ; preds = %dec_label_pc_837c
  %v0_83e8.pr = load i32, i32* @r6, align 4
  br label %dec_label_pc_83e8

dec_label_pc_83e8:                                ; preds = %dec_label_pc_83e8thread-pre-split, %dec_label_pc_83d8
  %v0_83f4 = phi i32 [ %v1_8390, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e0, %dec_label_pc_83d8 ]
  %v1_83ec = phi i32 [ %v0_83e8.pr, %dec_label_pc_83e8thread-pre-split ], [ %v1_83e4, %dec_label_pc_83d8 ]
  %v2_83e8 = icmp eq i32 %v1_83ec, 0
  store i1 %v2_83e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83e8, label %dec_label_pc_8520, label %dec_label_pc_83f4

dec_label_pc_83f4:                                ; preds = %dec_label_pc_83e8
  %v1_83f4 = inttoptr i32 %v0_83f4 to i8*
  %v2_83f4 = load i8, i8* %v1_83f4, align 1
  %v3_83f4 = zext i8 %v2_83f4 to i32
  store i32 %v3_83f4, i32* @sb, align 4
  %v2_83f8 = icmp eq i8 %v2_83f4, 0
  store i1 %v2_83f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_83f8, label %dec_label_pc_84d8, label %dec_label_pc_8408

dec_label_pc_8408:                                ; preds = %dec_label_pc_83f4
  store i32 %v3_83f4, i32* %r0.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_8410 = call i32 @function_12a18(i32 %v3_83f4, i32 8)
  store i32 %v2_8410, i32* %r0.global-to-local, align 4
  %v0_8414 = load i32, i32* @sb, align 4
  %v2_8414 = icmp eq i32 %v0_8414, 0
  store i1 %v2_8414, i1* %cpsr_z.global-to-local, align 1
  %tmp28 = icmp slt i32 %v0_8414, 1
  br i1 %tmp28, label %dec_label_pc_84d8, label %dec_label_pc_8424

dec_label_pc_8424:                                ; preds = %dec_label_pc_8408
  %v0_8424 = load i32, i32* @r6, align 4
  %v1_8424 = add i32 %v0_8424, -1
  store i32 %v1_8424, i32* %r2.global-to-local, align 4
  %v7_8424 = icmp eq i32 %v0_8424, 1
  store i1 %v7_8424, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8424, label %dec_label_pc_8520, label %dec_label_pc_842c

dec_label_pc_842c:                                ; preds = %dec_label_pc_8424
  %v0_842c = load i32, i32* %fp.global-to-local, align 4
  %v1_842c = add i32 %v0_842c, 1
  %v2_842c = inttoptr i32 %v1_842c to i8*
  %v3_842c = load i8, i8* %v2_842c, align 1
  %v1_8430 = add i32 %v0_8424, -2
  store i32 %v1_8430, i32* %r2.global-to-local, align 4
  %v7_8430 = icmp eq i32 %v1_8424, 1
  store i1 %v7_8430, i1* %cpsr_z.global-to-local, align 1
  %v3_8434 = add i32 %v2_8410, 4
  %v4_8434 = inttoptr i32 %v3_8434 to i8*
  store i8 %v3_842c, i8* %v4_8434, align 1
  %v0_8438 = load i32, i32* %fp.global-to-local, align 4
  %v1_8438 = add i32 %v0_8438, 1
  store i32 %v1_8438, i32* %r0.global-to-local, align 4
  %v0_843c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_843c, label %dec_label_pc_8520, label %dec_label_pc_8440

dec_label_pc_8440:                                ; preds = %dec_label_pc_842c
  %v1_8440 = add i32 %v0_8438, 2
  %v2_8440 = inttoptr i32 %v1_8440 to i8*
  %v3_8440 = load i8, i8* %v2_8440, align 1
  %v4_8440 = zext i8 %v3_8440 to i32
  store i32 %v4_8440, i32* @r4, align 4
  %v0_8444 = load i32, i32* %r2.global-to-local, align 4
  %v1_8444 = add i32 %v0_8444, -1
  store i32 %v1_8444, i32* @r8, align 4
  %v9_8448 = icmp eq i32 %v1_8444, %v4_8440
  store i1 %v9_8448, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8440, i32* %r0.global-to-local, align 4
  %v5_8450 = icmp slt i32 %v1_8444, %v4_8440
  br i1 %v5_8450, label %dec_label_pc_8520, label %dec_label_pc_8454

dec_label_pc_8454:                                ; preds = %dec_label_pc_8440
  store i32 %v2_8410, i32* @r5, align 4
  %v1_845c = add i32 %v2_8410, 8
  %v1_8460 = add i32 %v0_8438, 3
  store i32 %v1_8460, i32* @r6, align 4
  store i32 0, i32* %fp.global-to-local, align 4
  br label %dec_label_pc_84a4

dec_label_pc_8470:                                ; preds = %dec_label_pc_84a4
  %v0_8470 = load i32, i32* @r8, align 4
  %v1_8470 = load i32, i32* @r4, align 4
  %v2_8470 = sub i32 %v0_8470, %v1_8470
  store i32 %v2_8470, i32* %r2.global-to-local, align 4
  %v9_8470 = icmp eq i32 %v0_8470, %v1_8470
  store i1 %v9_8470, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8470, label %dec_label_pc_8520, label %dec_label_pc_8478

dec_label_pc_8478:                                ; preds = %dec_label_pc_8470
  %v1_8478 = load i32, i32* @r6, align 4
  %v2_8478 = add i32 %v1_8478, %v1_8470
  %v3_8478 = inttoptr i32 %v2_8478 to i8*
  %v4_8478 = load i8, i8* %v3_8478, align 1
  store i32 %v2_8478, i32* %r0.global-to-local, align 4
  %v1_8480 = add i32 %v2_8470, -1
  store i32 %v1_8480, i32* %r2.global-to-local, align 4
  %v7_8480 = icmp eq i32 %v2_8470, 1
  store i1 %v7_8480, i1* %cpsr_z.global-to-local, align 1
  %v3_8484 = add i32 %v2_8484, 4
  %v4_8484 = inttoptr i32 %v3_8484 to i8*
  store i8 %v4_8478, i8* %v4_8484, align 1
  %v0_8488 = load i32, i32* %r0.global-to-local, align 4
  %v0_848c = load i32, i32* %r2.global-to-local, align 4
  %v1_848c = add i32 %v0_848c, -1
  store i32 %v1_848c, i32* @r8, align 4
  %v1_8490 = add i32 %v0_8488, 2
  store i32 %v1_8490, i32* @r6, align 4
  %v0_8494 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8494, label %dec_label_pc_8520, label %dec_label_pc_8498

dec_label_pc_8498:                                ; preds = %dec_label_pc_8478
  %v1_8488 = add i32 %v0_8488, 1
  %v2_8498 = inttoptr i32 %v1_8488 to i8*
  %v3_8498 = load i8, i8* %v2_8498, align 1
  %v4_8498 = zext i8 %v3_8498 to i32
  store i32 %v4_8498, i32* @r4, align 4
  %v2_849c = sub i32 %v1_848c, %v4_8498
  %tmp30 = sub i32 0, %v2_849c
  %v6_849c = and i32 %v1_848c, %tmp30
  %v7_849c = icmp slt i32 %v6_849c, 0
  %v8_849c = icmp slt i32 %v2_849c, 0
  %v9_849c = icmp eq i32 %v1_848c, %v4_8498
  store i1 %v9_849c, i1* %cpsr_z.global-to-local, align 1
  %v2_84a0 = xor i1 %v8_849c, %v7_849c
  br i1 %v2_84a0, label %dec_label_pc_8520, label %dec_label_pc_84a4

dec_label_pc_84a4:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8454
  %v0_84a8 = phi i32 [ %v4_8440, %dec_label_pc_8454 ], [ %v4_8498, %dec_label_pc_8498 ]
  %v2_8484 = phi i32 [ %v1_845c, %dec_label_pc_8454 ], [ %v1_84c8, %dec_label_pc_8498 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v1_84a8 = add nuw nsw i32 %v0_84a8, 1
  store i32 %v1_84a8, i32* %r0.global-to-local, align 4
  %v2_84ac = call i32 @function_12a18(i32 %v1_84a8, i32 1)
  store i32 %v2_84ac, i32* %r0.global-to-local, align 4
  %v0_84b0 = load i32, i32* @r6, align 4
  store i32 %v0_84b0, i32* %r1.global-to-local, align 4
  %v1_84b4 = load i32, i32* @r5, align 4
  %v2_84b4 = inttoptr i32 %v1_84b4 to i32*
  store i32 %v2_84ac, i32* %v2_84b4, align 4
  %v0_84b8 = load i32, i32* @r4, align 4
  store i32 %v0_84b8, i32* %r2.global-to-local, align 4
  %v3_84bc = call i32 @function_11590(i32 %v2_84ac, i32 %v0_84b0, i32 %v0_84b8)
  store i32 %v3_84bc, i32* %r0.global-to-local, align 4
  store i32 %v2_8484, i32* @r5, align 4
  %v0_84c4 = load i32, i32* %fp.global-to-local, align 4
  %v1_84c4 = add i32 %v0_84c4, 1
  store i32 %v1_84c4, i32* %fp.global-to-local, align 4
  %v1_84c8 = add i32 %v2_8484, 8
  store i32 %v1_84c8, i32* %ip.global-to-local, align 4
  %v1_84cc = load i32, i32* @sb, align 4
  %v9_84cc = icmp eq i32 %v1_84c4, %v1_84cc
  store i1 %v9_84cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_84cc, label %dec_label_pc_84d8, label %dec_label_pc_8470

dec_label_pc_84d8:                                ; preds = %dec_label_pc_84a4, %dec_label_pc_8408, %dec_label_pc_83f4
  %stack_var_-48.1 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v0_8414, %dec_label_pc_8408 ], [ %v0_8414, %dec_label_pc_84a4 ]
  %stack_var_-52.2 = phi i32 [ %v3_83f4, %dec_label_pc_83f4 ], [ %v2_8410, %dec_label_pc_8408 ], [ %v2_8410, %dec_label_pc_84a4 ]
  %v0_84d8 = call i32 @function_123ec()
  %v0_84dc = load i32, i32* @sl, align 4
  store i32 %stack_var_-48.1, i32* %ip.global-to-local, align 4
  %v3_84e8 = mul i32 %v0_84dc, 16777216
  %v1_84dc = mul i32 %v0_84dc, 256
  %v4_84ec = and i32 %v1_84dc, 16711680
  %v5_84ec = or i32 %v4_84ec, %v3_84e8
  store i32 %v5_84ec, i32* %r1.global-to-local, align 4
  %v1_84e4 = udiv i32 %v0_84dc, 256
  %v3_84f0 = and i32 %v1_84e4, 65280
  store i32 %v3_84f0, i32* %r2.global-to-local, align 4
  %v2_84f8 = inttoptr i32 %v0_84d8 to i32*
  store i32 0, i32* %v2_84f8, align 4
  %v0_84fc = load i32, i32* %r2.global-to-local, align 4
  %v1_84fc = load i32, i32* @sl, align 4
  %v4_84fc = udiv i32 %v1_84fc, 16777216
  %v5_84fc = or i32 %v4_84fc, %v0_84fc
  %v0_8500 = load i32, i32* %ip.global-to-local, align 4
  store i32 %stack_var_-52.2, i32* @ip, align 4
  %v1_8508 = load i32, i32* %r1.global-to-local, align 4
  %v2_8508 = or i32 %v5_84fc, %v1_8508
  store i32 %v2_8508, i32* %r0.global-to-local, align 4
  store i32 %v4_8350, i32* %r1.global-to-local, align 4
  %v0_8514 = load i32, i32* @r7, align 4
  store i32 %v0_8514, i32* %r2.global-to-local, align 4
  %v6_851c = trunc i32 %v0_8500 to i8
  %v7_851c = call i32 @function_8230(i32 %v2_8508, i32 %v4_8350, i32 %v0_8514, i32 %v2_8384, i8 %v6_851c, i32 %stack_var_-52.2)
  store i32 %v7_851c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8520

dec_label_pc_8520:                                ; preds = %dec_label_pc_8498, %dec_label_pc_8478, %dec_label_pc_8470, %dec_label_pc_8440, %dec_label_pc_842c, %dec_label_pc_8424, %dec_label_pc_83e8, %dec_label_pc_84d8
  %stack_var_-52.3 = phi i32 [ 0, %dec_label_pc_83e8 ], [ %stack_var_-52.2, %dec_label_pc_84d8 ], [ %v2_8410, %dec_label_pc_8424 ], [ %v2_8410, %dec_label_pc_842c ], [ %v2_8410, %dec_label_pc_8440 ], [ %v2_8410, %dec_label_pc_8470 ], [ %v2_8410, %dec_label_pc_8478 ], [ %v2_8410, %dec_label_pc_8498 ]
  store i32 %v2_8384, i32* %r1.global-to-local, align 4
  %v2_8524 = icmp eq i32 %v2_8384, 0
  store i1 %v2_8524, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8524, label %bb31, label %bb

bb:                                               ; preds = %dec_label_pc_8520
  store i32 %v2_8384, i32* %r0.global-to-local, align 4
  br label %bb31

bb31:                                             ; preds = %dec_label_pc_8520, %bb
  %v1_852c = xor i1 %v2_8524, true
  call void @__pseudo_cond_branch(i1 %v1_852c, i32 ptrtoint (i32* @global_var_12a70.25 to i32))
  %v2_8534 = icmp eq i32 %stack_var_-52.3, 0
  store i1 %v2_8534, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8534, label %.dec_label_pc_8344_crit_edge, label %dec_label_pc_853c

.dec_label_pc_8344_crit_edge:                     ; preds = %bb31
  %v29_8348.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8344

dec_label_pc_853c:                                ; preds = %bb31
  %v0_853c = load i32, i32* @sb, align 4
  %v2_853c = icmp eq i32 %v0_853c, 0
  store i1 %v2_853c, i1* %cpsr_z.global-to-local, align 1
  %tmp32 = icmp slt i32 %v0_853c, 1
  br i1 %tmp32, label %dec_label_pc_8564, label %dec_label_pc_8544

dec_label_pc_8544:                                ; preds = %dec_label_pc_853c
  br label %dec_label_pc_8548

dec_label_pc_8548:                                ; preds = %dec_label_pc_8548, %dec_label_pc_8544
  %v0_8554 = phi i32 [ %v1_8554, %dec_label_pc_8548 ], [ 0, %dec_label_pc_8544 ]
  store i32 %stack_var_-52.3, i32* %ip.global-to-local, align 4
  %v4_854c = mul i32 %v0_8554, 8
  %v5_854c = add i32 %v4_854c, %stack_var_-52.3
  %v6_854c = inttoptr i32 %v5_854c to i32*
  %v7_854c = load i32, i32* %v6_854c, align 4
  store i32 %v7_854c, i32* %r0.global-to-local, align 4
  %v2_8550 = icmp eq i32 %v7_854c, 0
  store i1 %v2_8550, i1* %cpsr_z.global-to-local, align 1
  %v1_8554 = add i32 %v0_8554, 1
  %v1_8558 = xor i1 %v2_8550, true
  call void @__pseudo_cond_branch(i1 %v1_8558, i32 ptrtoint (i32* @global_var_12a70.25 to i32))
  %v0_855c = load i32, i32* @sb, align 4
  %v9_855c = icmp eq i32 %v0_855c, %v1_8554
  store i1 %v9_855c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_855c, label %dec_label_pc_8564, label %dec_label_pc_8548

dec_label_pc_8564:                                ; preds = %dec_label_pc_8548, %dec_label_pc_853c
  store i32 %stack_var_-52.3, i32* @r0, align 4
  store i32 %v3_8320, i32* @r4, align 4
  store i32 %v6_8320, i32* @r5, align 4
  store i32 %v9_8320, i32* @r6, align 4
  store i32 %v12_8320, i32* @r7, align 4
  store i32 %v15_8320, i32* @r8, align 4
  store i32 %v18_8320, i32* @sb, align 4
  store i32 %v21_8320, i32* @sl, align 4
  store i32 %v27_8320, i32* @lr, align 4
  %v0_8570 = call i32 @function_12a70()
  store i32 %v0_8570, i32* %r0.global-to-local, align 4
  ret i32 %v0_8570

; uselistorder directives
  uselistorder i32 %stack_var_-52.3, { 2, 0, 1, 3 }
  uselistorder i32 %v0_84dc, { 2, 0, 1 }
  uselistorder i32 %stack_var_-52.2, { 1, 0, 2 }
  uselistorder i32 %v1_84c8, { 1, 0 }
  uselistorder i32 %v2_8484, { 2, 1, 0 }
  uselistorder i32 %v2_849c, { 1, 0 }
  uselistorder i32 %v4_8498, { 0, 2, 1, 3 }
  uselistorder i32 %v1_848c, { 2, 0, 1, 3 }
  uselistorder i32 %v0_8488, { 1, 0 }
  uselistorder i32 %v0_8424, { 0, 2, 1 }
  uselistorder i32 %v0_8414, { 0, 2, 1, 3 }
  uselistorder i32 %v2_8410, { 0, 1, 2, 8, 7, 6, 3, 5, 9, 10, 4, 11 }
  uselistorder i32 %v3_83f4, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v1_83d0, { 1, 0 }
  uselistorder i32 %v0_83b4, { 0, 2, 1 }
  uselistorder i32 %v0_8390, { 1, 2, 0, 3 }
  uselistorder i32 %v2_8384, { 0, 3, 4, 5, 1, 2, 6 }
  uselistorder i32 %v2_8370, { 2, 1, 0 }
  uselistorder i32 %v4_835c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v4_8350, { 1, 0, 2 }
  uselistorder i32 %v0_8330, { 5, 6, 0, 1, 2, 3, 4, 7, 8 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 6, 3, 4, 5, 7, 8, 9, 10, 11, 12 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 21, 4, 22, 5, 8, 12, 9, 6, 7, 10, 11, 18, 13, 15, 14, 16, 17, 20, 19, 0, 1 }
  uselistorder i32* %fp.global-to-local, { 0, 1, 2, 4, 5, 3, 6 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 9, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32 %arg2, { 1, 5, 3, 0, 4, 2, 6 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %dec_label_pc_8520, { 7, 0, 1, 2, 3, 4, 5, 6 }
  uselistorder label %dec_label_pc_8344, { 1, 0, 3, 4, 2, 5 }
}

define i32 @function_8574(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_8574:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_8574 = urem i32 %arg1, 256
  %v2_8578 = icmp eq i32 %v1_8574, 0
  %v3_857c = load i32, i32* @r4, align 4
  br i1 %v2_8578, label %dec_label_pc_85c4, label %dec_label_pc_8588

dec_label_pc_8588:                                ; preds = %dec_label_pc_8574
  %v0_8588 = load i32, i32* %r1.global-to-local, align 4
  %v1_8588 = add i32 %v0_8588, 4
  %v2_8588 = inttoptr i32 %v1_8588 to i8*
  %v3_8588 = load i8, i8* %v2_8588, align 1
  %v4_8588 = zext i8 %v3_8588 to i32
  %v1_858c = urem i32 %arg3, 256
  %v9_8590 = icmp eq i32 %v4_8588, %v1_858c
  br i1 %v9_8590, label %dec_label_pc_85cc, label %dec_label_pc_85b4.preheader

dec_label_pc_85b4.preheader:                      ; preds = %dec_label_pc_8588
  br label %dec_label_pc_85b4

dec_label_pc_85a4:                                ; preds = %dec_label_pc_85b4
  %v1_85a4 = add i32 %v0_85ac.in, 12
  %v2_85a4 = inttoptr i32 %v1_85a4 to i8*
  %v3_85a4 = load i8, i8* %v2_85a4, align 1
  %v4_85a4 = zext i8 %v3_85a4 to i32
  %v9_85a8 = icmp eq i32 %v1_858c, %v4_85a4
  br i1 %v9_85a8, label %dec_label_pc_85cc, label %dec_label_pc_85b4

dec_label_pc_85b4:                                ; preds = %dec_label_pc_85b4.preheader, %dec_label_pc_85a4
  %v0_85ac.in = phi i32 [ %v0_8588, %dec_label_pc_85b4.preheader ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v0_85b4 = phi i32 [ 0, %dec_label_pc_85b4.preheader ], [ %v1_85b4, %dec_label_pc_85a4 ]
  %v0_85ac = add i32 %v0_85ac.in, 8
  %v1_85b4 = add i32 %v0_85b4, 1
  %v9_85b8 = icmp eq i32 %v1_8574, %v1_85b4
  store i32 %v0_85ac, i32* %r1.global-to-local, align 4
  br i1 %v9_85b8, label %dec_label_pc_85c4, label %dec_label_pc_85a4

dec_label_pc_85c4:                                ; preds = %dec_label_pc_85b4, %dec_label_pc_85cc, %dec_label_pc_8574
  store i32 %v3_857c, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_85cc:                                ; preds = %dec_label_pc_85a4, %dec_label_pc_8588
  %v0_85cc = phi i32 [ %v0_8588, %dec_label_pc_8588 ], [ %v0_85ac, %dec_label_pc_85a4 ]
  %v1_85cc = inttoptr i32 %v0_85cc to i32*
  %v2_85cc = load i32, i32* %v1_85cc, align 4
  store i32 %v2_85cc, i32* @r0, align 4
  %v2_85d0 = icmp eq i32 %v2_85cc, 0
  br i1 %v2_85d0, label %dec_label_pc_85c4, label %dec_label_pc_85d8

dec_label_pc_85d8:                                ; preds = %dec_label_pc_85cc
  store i32 %v3_857c, i32* @r4, align 4
  %v1_85dc = call i32 @function_1250c(i32 %v2_85cc)
  ret i32 %v1_85dc

; uselistorder directives
  uselistorder i32 %v1_85b4, { 1, 0 }
  uselistorder i32 %v0_85ac, { 1, 0, 2 }
  uselistorder i32 %v0_85ac.in, { 1, 0 }
  uselistorder i32 %v1_858c, { 1, 0 }
  uselistorder i32 %v0_8588, { 1, 0, 2 }
  uselistorder i32 %v3_857c, { 1, 0 }
  uselistorder i32 %v1_8574, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 0, 1 }
  uselistorder label %dec_label_pc_85c4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_85b4, { 1, 0 }
}

define i32 @function_85e0(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_85e0:
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v1_85e0 = urem i32 %arg1, 256
  %v2_85e4 = icmp eq i32 %v1_85e0, 0
  %v3_85e8 = load i32, i32* @r4, align 4
  %v6_85e8 = load i32, i32* @lr, align 4
  br i1 %v2_85e4, label %dec_label_pc_8630, label %dec_label_pc_85f4

dec_label_pc_85f4:                                ; preds = %dec_label_pc_85e0
  %v0_85f4 = load i32, i32* %r1.global-to-local, align 4
  %v1_85f4 = add i32 %v0_85f4, 4
  %v2_85f4 = inttoptr i32 %v1_85f4 to i8*
  %v3_85f4 = load i8, i8* %v2_85f4, align 1
  %v4_85f4 = zext i8 %v3_85f4 to i32
  %v1_85f8 = urem i32 %arg3, 256
  %v9_85fc = icmp eq i32 %v4_85f4, %v1_85f8
  br i1 %v9_85fc, label %dec_label_pc_8638, label %dec_label_pc_8620.preheader

dec_label_pc_8620.preheader:                      ; preds = %dec_label_pc_85f4
  br label %dec_label_pc_8620

dec_label_pc_8610:                                ; preds = %dec_label_pc_8620
  %v1_8610 = add i32 %v0_8618.in, 12
  %v2_8610 = inttoptr i32 %v1_8610 to i8*
  %v3_8610 = load i8, i8* %v2_8610, align 1
  %v4_8610 = zext i8 %v3_8610 to i32
  %v9_8614 = icmp eq i32 %v1_85f8, %v4_8610
  br i1 %v9_8614, label %dec_label_pc_8638, label %dec_label_pc_8620

dec_label_pc_8620:                                ; preds = %dec_label_pc_8620.preheader, %dec_label_pc_8610
  %v0_8618.in = phi i32 [ %v0_85f4, %dec_label_pc_8620.preheader ], [ %v0_8618, %dec_label_pc_8610 ]
  %v0_8620 = phi i32 [ 0, %dec_label_pc_8620.preheader ], [ %v1_8620, %dec_label_pc_8610 ]
  %v0_8618 = add i32 %v0_8618.in, 8
  %v1_8620 = add i32 %v0_8620, 1
  store i32 %v1_8620, i32* @lr, align 4
  %v9_8624 = icmp eq i32 %v1_85e0, %v1_8620
  store i32 %v0_8618, i32* %r1.global-to-local, align 4
  br i1 %v9_8624, label %dec_label_pc_8630, label %dec_label_pc_8610

dec_label_pc_8630:                                ; preds = %dec_label_pc_8620, %dec_label_pc_8638, %dec_label_pc_85e0
  store i32 %v3_85e8, i32* @r4, align 4
  ret i32 %arg4

dec_label_pc_8638:                                ; preds = %dec_label_pc_8610, %dec_label_pc_85f4
  %v0_8638 = phi i32 [ %v0_85f4, %dec_label_pc_85f4 ], [ %v0_8618, %dec_label_pc_8610 ]
  %v1_8638 = inttoptr i32 %v0_8638 to i32*
  %v2_8638 = load i32, i32* %v1_8638, align 4
  %v2_863c = icmp eq i32 %v2_8638, 0
  br i1 %v2_863c, label %dec_label_pc_8630, label %dec_label_pc_8644

dec_label_pc_8644:                                ; preds = %dec_label_pc_8638
  store i32 10, i32* %r1.global-to-local, align 4
  store i32 %v3_85e8, i32* @r4, align 4
  store i32 %v6_85e8, i32* @lr, align 4
  %v2_864c = inttoptr i32 %v2_8638 to i8*
  %v3_864c = call i32 @function_11640(i8* %v2_864c, i32 10)
  ret i32 %v3_864c

; uselistorder directives
  uselistorder i32 %v1_8620, { 1, 2, 0 }
  uselistorder i32 %v0_8618, { 1, 0, 2 }
  uselistorder i32 %v0_8618.in, { 1, 0 }
  uselistorder i32 %v1_85f8, { 1, 0 }
  uselistorder i32 %v0_85f4, { 1, 0, 2 }
  uselistorder i32 %v3_85e8, { 1, 0 }
  uselistorder i32 %v1_85e0, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_8630, { 1, 0, 2 }
  uselistorder label %dec_label_pc_8620, { 1, 0 }
}

define i32 @function_8650(i32 %arg1) local_unnamed_addr {
dec_label_pc_8650:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r1.global-to-local, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_8650 = load i32, i32* @r4, align 4
  store i32 %v3_8650, i32* %stack_var_-24, align 4
  %v6_8650 = load i32, i32* @r5, align 4
  %v9_8650 = load i32, i32* @r6, align 4
  %v12_8650 = load i32, i32* @r7, align 4
  %v15_8650 = load i32, i32* @r8, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v2_865c = call i32 @function_12a18(i32 1, i32 8)
  store i32 ptrtoint (i8** @global_var_1d194.21 to i32), i32* @r4, align 4
  %v2_8664 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8664 = zext i8 %v2_8664 to i32
  store i32 ptrtoint (i32* @global_var_1d198.23 to i32), i32* @r6, align 4
  store i32 48568, i32* %r2.global-to-local, align 4
  store i32 %v2_865c, i32* @r5, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_8678 = mul nuw nsw i32 %v3_8664, 4
  store i32 %v3_8678, i32* %r1.global-to-local, align 4
  %v2_867c = load i32, i32* @global_var_1d198.23, align 4
  %v2_8680 = inttoptr i32 %v2_865c to i32*
  store i32 48568, i32* %v2_8680, align 4
  %v3_8684 = load i32, i32* @r5, align 4
  %v4_8684 = add i32 %v3_8684, 4
  %v5_8684 = inttoptr i32 %v4_8684 to i8*
  store i8 0, i8* %v5_8684, align 1
  %v0_8688 = load i32, i32* %r1.global-to-local, align 4
  %v1_8688 = add i32 %v0_8688, 4
  store i32 %v1_8688, i32* %r1.global-to-local, align 4
  %v5_868c = call i32 @function_12b60(i32 %v2_867c, i32 %v1_8688, i32 48568, i32 0)
  %v2_8690 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8690 = zext i8 %v2_8690 to i32
  store i32 %v3_8690, i32* %r3.global-to-local, align 4
  store i32 %v5_868c, i32* %ip.global-to-local, align 4
  %v0_8698 = load i32, i32* @r5, align 4
  %v5_8698 = mul nuw nsw i32 %v3_8690, 4
  %v6_8698 = add i32 %v5_8698, %v5_868c
  %v7_8698 = inttoptr i32 %v6_8698 to i32*
  store i32 %v0_8698, i32* %v7_8698, align 4
  store i32 ptrtoint (i8* @global_var_1d195.29 to i32), i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v3_86a8 = load i32, i32* @r4, align 4
  %v4_86a8 = inttoptr i32 %v3_86a8 to i8*
  store i8 ptrtoint (i8* @global_var_1d195.29 to i8), i8* %v4_86a8, align 1
  %v0_86ac = load i32, i32* %ip.global-to-local, align 4
  %v1_86ac = load i32, i32* @r6, align 4
  %v2_86ac = inttoptr i32 %v1_86ac to i32*
  store i32 %v0_86ac, i32* %v2_86ac, align 4
  %v2_86b0 = call i32 @function_12a18(i32 1, i32 8)
  %v2_86b4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_86b4 = zext i8 %v2_86b4 to i32
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %r3.global-to-local, align 4
  store i32 1, i32* @r8, align 4
  store i32 %v2_86b0, i32* @r5, align 4
  %v3_86c4 = mul nuw nsw i32 %v3_86b4, 4
  store i32 %v3_86c4, i32* %r1.global-to-local, align 4
  %v2_86c8 = load i32, i32* @global_var_1d198.23, align 4
  %v2_86cc = inttoptr i32 %v2_86b0 to i32*
  store i32 ptrtoint (i32* @global_var_c444.31 to i32), i32* %v2_86cc, align 4
  %v0_86d0 = load i32, i32* @r8, align 4
  %v1_86d0 = trunc i32 %v0_86d0 to i8
  %v2_86d0 = load i32, i32* @r5, align 4
  %v3_86d0 = add i32 %v2_86d0, 4
  %v4_86d0 = inttoptr i32 %v3_86d0 to i8*
  store i8 %v1_86d0, i8* %v4_86d0, align 1
  %v0_86d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_86d4 = add i32 %v0_86d4, 4
  store i32 %v1_86d4, i32* %r1.global-to-local, align 4
  %v5_86d8 = call i32 @function_12b60(i32 %v2_86c8, i32 %v1_86d4, i32 sext (i8 ptrtoint (i8* @global_var_1d195.29 to i8) to i32), i32 ptrtoint (i32* @global_var_c444.31 to i32))
  %v2_86dc = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_86dc = zext i8 %v2_86dc to i32
  store i32 %v3_86dc, i32* %r3.global-to-local, align 4
  store i32 %v5_86d8, i32* %ip.global-to-local, align 4
  %v0_86e4 = load i32, i32* @r5, align 4
  %v5_86e4 = mul nuw nsw i32 %v3_86dc, 4
  %v6_86e4 = add i32 %v5_86e4, %v5_86d8
  %v7_86e4 = inttoptr i32 %v6_86e4 to i32*
  store i32 %v0_86e4, i32* %v7_86e4, align 4
  %v0_86e8 = load i32, i32* %r3.global-to-local, align 4
  %v1_86e8 = load i32, i32* @r8, align 4
  %v2_86e8 = add i32 %v1_86e8, %v0_86e8
  store i32 %v2_86e8, i32* %r2.global-to-local, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_86f4 = load i32, i32* %ip.global-to-local, align 4
  %v1_86f4 = load i32, i32* @r6, align 4
  %v2_86f4 = inttoptr i32 %v1_86f4 to i32*
  store i32 %v0_86f4, i32* %v2_86f4, align 4
  %v0_86f8 = load i32, i32* %r2.global-to-local, align 4
  %v1_86f8 = trunc i32 %v0_86f8 to i8
  %v2_86f8 = load i32, i32* @r4, align 4
  %v3_86f8 = inttoptr i32 %v2_86f8 to i8*
  store i8 %v1_86f8, i8* %v3_86f8, align 1
  %v2_86fc = call i32 @function_12a18(i32 %v1_86e8, i32 8)
  %v2_8700 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8700 = zext i8 %v2_8700 to i32
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_86fc, i32* @r5, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8710 = mul nuw nsw i32 %v3_8700, 4
  store i32 %v3_8710, i32* %r1.global-to-local, align 4
  %v2_8714 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8718 = inttoptr i32 %v2_86fc to i32*
  store i32 ptrtoint (i32* @global_var_c908.33 to i32), i32* %v2_8718, align 4
  %v3_871c = load i32, i32* @r5, align 4
  %v4_871c = add i32 %v3_871c, 4
  %v5_871c = inttoptr i32 %v4_871c to i8*
  store i8 2, i8* %v5_871c, align 1
  %v0_8720 = load i32, i32* %r1.global-to-local, align 4
  %v1_8720 = add i32 %v0_8720, 4
  store i32 %v1_8720, i32* %r1.global-to-local, align 4
  %v5_8724 = call i32 @function_12b60(i32 %v2_8714, i32 %v1_8720, i32 ptrtoint (i32* @global_var_c908.33 to i32), i32 2)
  %v2_8728 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8728 = zext i8 %v2_8728 to i32
  store i32 %v3_8728, i32* %r3.global-to-local, align 4
  store i32 %v5_8724, i32* %ip.global-to-local, align 4
  %v1_8730 = load i32, i32* @r8, align 4
  %v2_8730 = add i32 %v1_8730, %v3_8728
  %v3_8730 = trunc i32 %v2_8730 to i8
  store i32 %v2_8730, i32* %r2.global-to-local, align 4
  %v0_8734 = load i32, i32* @r5, align 4
  %v5_8734 = mul nuw nsw i32 %v3_8728, 4
  %v6_8734 = add i32 %v5_8734, %v5_8724
  %v7_8734 = inttoptr i32 %v6_8734 to i32*
  store i32 %v0_8734, i32* %v7_8734, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  %v0_873c = load i32, i32* @r8, align 4
  %v3_8740 = load i32, i32* @r4, align 4
  %v4_8740 = inttoptr i32 %v3_8740 to i8*
  store i8 %v3_8730, i8* %v4_8740, align 1
  %v0_8744 = load i32, i32* %ip.global-to-local, align 4
  %v1_8744 = load i32, i32* @r6, align 4
  %v2_8744 = inttoptr i32 %v1_8744 to i32*
  store i32 %v0_8744, i32* %v2_8744, align 4
  %v2_8748 = call i32 @function_12a18(i32 %v0_873c, i32 8)
  %v2_874c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_874c = zext i8 %v2_874c to i32
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %r3.global-to-local, align 4
  store i32 8, i32* @r7, align 4
  store i32 %v2_8748, i32* @r5, align 4
  %v3_875c = mul nuw nsw i32 %v3_874c, 4
  store i32 %v3_875c, i32* %r1.global-to-local, align 4
  %v2_8760 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8764 = inttoptr i32 %v2_8748 to i32*
  store i32 ptrtoint (i32* @global_var_bad4.35 to i32), i32* %v2_8764, align 4
  %v0_8768 = load i32, i32* @r7, align 4
  %v1_8768 = trunc i32 %v0_8768 to i8
  %v2_8768 = load i32, i32* @r5, align 4
  %v3_8768 = add i32 %v2_8768, 4
  %v4_8768 = inttoptr i32 %v3_8768 to i8*
  store i8 %v1_8768, i8* %v4_8768, align 1
  %v0_876c = load i32, i32* %r1.global-to-local, align 4
  %v1_876c = add i32 %v0_876c, 4
  store i32 %v1_876c, i32* %r1.global-to-local, align 4
  %v5_8770 = call i32 @function_12b60(i32 %v2_8760, i32 %v1_876c, i32 %v2_8730, i32 ptrtoint (i32* @global_var_bad4.35 to i32))
  %v2_8774 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8774 = zext i8 %v2_8774 to i32
  store i32 %v3_8774, i32* %r3.global-to-local, align 4
  store i32 %v5_8770, i32* %ip.global-to-local, align 4
  %v0_877c = load i32, i32* @r5, align 4
  %v5_877c = mul nuw nsw i32 %v3_8774, 4
  %v6_877c = add i32 %v5_877c, %v5_8770
  %v7_877c = inttoptr i32 %v6_877c to i32*
  store i32 %v0_877c, i32* %v7_877c, align 4
  %v0_8780 = load i32, i32* %r3.global-to-local, align 4
  %v1_8780 = load i32, i32* @r8, align 4
  %v2_8780 = add i32 %v1_8780, %v0_8780
  store i32 %v2_8780, i32* %r2.global-to-local, align 4
  %v0_8784 = load i32, i32* @r7, align 4
  store i32 %v0_8784, i32* %r1.global-to-local, align 4
  %v0_878c = load i32, i32* %ip.global-to-local, align 4
  %v1_878c = load i32, i32* @r6, align 4
  %v2_878c = inttoptr i32 %v1_878c to i32*
  store i32 %v0_878c, i32* %v2_878c, align 4
  %v0_8790 = load i32, i32* %r2.global-to-local, align 4
  %v1_8790 = trunc i32 %v0_8790 to i8
  %v2_8790 = load i32, i32* @r4, align 4
  %v3_8790 = inttoptr i32 %v2_8790 to i8*
  store i8 %v1_8790, i8* %v3_8790, align 1
  %v2_8794 = call i32 @function_12a18(i32 %v1_8780, i32 %v0_8784)
  %v2_8798 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8798 = zext i8 %v2_8798 to i32
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8794, i32* @r5, align 4
  store i32 3, i32* %r3.global-to-local, align 4
  %v3_87a8 = mul nuw nsw i32 %v3_8798, 4
  store i32 %v3_87a8, i32* %r1.global-to-local, align 4
  %v2_87ac = load i32, i32* @global_var_1d198.23, align 4
  %v2_87b0 = inttoptr i32 %v2_8794 to i32*
  store i32 ptrtoint (i32* @global_var_b388.37 to i32), i32* %v2_87b0, align 4
  %v3_87b4 = load i32, i32* @r5, align 4
  %v4_87b4 = add i32 %v3_87b4, 4
  %v5_87b4 = inttoptr i32 %v4_87b4 to i8*
  store i8 3, i8* %v5_87b4, align 1
  %v0_87b8 = load i32, i32* %r1.global-to-local, align 4
  %v1_87b8 = add i32 %v0_87b8, 4
  store i32 %v1_87b8, i32* %r1.global-to-local, align 4
  %v5_87bc = call i32 @function_12b60(i32 %v2_87ac, i32 %v1_87b8, i32 ptrtoint (i32* @global_var_b388.37 to i32), i32 3)
  %v2_87c0 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_87c0 = zext i8 %v2_87c0 to i32
  store i32 %v3_87c0, i32* %r3.global-to-local, align 4
  store i32 %v5_87bc, i32* %ip.global-to-local, align 4
  %v0_87c8 = load i32, i32* @r5, align 4
  %v5_87c8 = mul nuw nsw i32 %v3_87c0, 4
  %v6_87c8 = add i32 %v5_87c8, %v5_87bc
  %v7_87c8 = inttoptr i32 %v6_87c8 to i32*
  store i32 %v0_87c8, i32* %v7_87c8, align 4
  %v0_87cc = load i32, i32* %r3.global-to-local, align 4
  %v1_87cc = load i32, i32* @r8, align 4
  %v2_87cc = add i32 %v1_87cc, %v0_87cc
  store i32 %v2_87cc, i32* %r2.global-to-local, align 4
  %v0_87d0 = load i32, i32* @r7, align 4
  store i32 %v0_87d0, i32* %r1.global-to-local, align 4
  %v0_87d8 = load i32, i32* %ip.global-to-local, align 4
  %v1_87d8 = load i32, i32* @r6, align 4
  %v2_87d8 = inttoptr i32 %v1_87d8 to i32*
  store i32 %v0_87d8, i32* %v2_87d8, align 4
  %v0_87dc = load i32, i32* %r2.global-to-local, align 4
  %v1_87dc = trunc i32 %v0_87dc to i8
  %v2_87dc = load i32, i32* @r4, align 4
  %v3_87dc = inttoptr i32 %v2_87dc to i8*
  store i8 %v1_87dc, i8* %v3_87dc, align 1
  %v2_87e0 = call i32 @function_12a18(i32 %v1_87cc, i32 %v0_87d0)
  %v2_87e4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_87e4 = zext i8 %v2_87e4 to i32
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_87e0, i32* @r5, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  %v3_87f4 = mul nuw nsw i32 %v3_87e4, 4
  store i32 %v3_87f4, i32* %r1.global-to-local, align 4
  %v2_87f8 = load i32, i32* @global_var_1d198.23, align 4
  %v2_87fc = inttoptr i32 %v2_87e0 to i32*
  store i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32* %v2_87fc, align 4
  %v3_8800 = load i32, i32* @r5, align 4
  %v4_8800 = add i32 %v3_8800, 4
  %v5_8800 = inttoptr i32 %v4_8800 to i8*
  store i8 4, i8* %v5_8800, align 1
  %v0_8804 = load i32, i32* %r1.global-to-local, align 4
  %v1_8804 = add i32 %v0_8804, 4
  store i32 %v1_8804, i32* %r1.global-to-local, align 4
  %v5_8808 = call i32 @function_12b60(i32 %v2_87f8, i32 %v1_8804, i32 ptrtoint (i32* @global_var_ac14.39 to i32), i32 4)
  %v2_880c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_880c = zext i8 %v2_880c to i32
  store i32 %v3_880c, i32* %r3.global-to-local, align 4
  store i32 %v5_8808, i32* %ip.global-to-local, align 4
  %v0_8814 = load i32, i32* @r5, align 4
  %v5_8814 = mul nuw nsw i32 %v3_880c, 4
  %v6_8814 = add i32 %v5_8814, %v5_8808
  %v7_8814 = inttoptr i32 %v6_8814 to i32*
  store i32 %v0_8814, i32* %v7_8814, align 4
  %v0_8818 = load i32, i32* %r3.global-to-local, align 4
  %v1_8818 = load i32, i32* @r8, align 4
  %v2_8818 = add i32 %v1_8818, %v0_8818
  store i32 %v2_8818, i32* %r2.global-to-local, align 4
  %v0_881c = load i32, i32* @r7, align 4
  store i32 %v0_881c, i32* %r1.global-to-local, align 4
  %v0_8824 = load i32, i32* %ip.global-to-local, align 4
  %v1_8824 = load i32, i32* @r6, align 4
  %v2_8824 = inttoptr i32 %v1_8824 to i32*
  store i32 %v0_8824, i32* %v2_8824, align 4
  %v0_8828 = load i32, i32* %r2.global-to-local, align 4
  %v1_8828 = trunc i32 %v0_8828 to i8
  %v2_8828 = load i32, i32* @r4, align 4
  %v3_8828 = inttoptr i32 %v2_8828 to i8*
  store i8 %v1_8828, i8* %v3_8828, align 1
  %v2_882c = call i32 @function_12a18(i32 %v1_8818, i32 %v0_881c)
  %v2_8830 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8830 = zext i8 %v2_8830 to i32
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_882c, i32* @r5, align 4
  store i32 5, i32* %r3.global-to-local, align 4
  %v3_8840 = mul nuw nsw i32 %v3_8830, 4
  store i32 %v3_8840, i32* %r1.global-to-local, align 4
  %v2_8844 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8848 = inttoptr i32 %v2_882c to i32*
  store i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32* %v2_8848, align 4
  %v3_884c = load i32, i32* @r5, align 4
  %v4_884c = add i32 %v3_884c, 4
  %v5_884c = inttoptr i32 %v4_884c to i8*
  store i8 5, i8* %v5_884c, align 1
  %v0_8850 = load i32, i32* %r1.global-to-local, align 4
  %v1_8850 = add i32 %v0_8850, 4
  store i32 %v1_8850, i32* %r1.global-to-local, align 4
  %v5_8854 = call i32 @function_12b60(i32 %v2_8844, i32 %v1_8850, i32 ptrtoint (i32* @global_var_a3b4.41 to i32), i32 5)
  %v2_8858 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8858 = zext i8 %v2_8858 to i32
  store i32 %v3_8858, i32* %r3.global-to-local, align 4
  store i32 %v5_8854, i32* %ip.global-to-local, align 4
  %v0_8860 = load i32, i32* @r5, align 4
  %v5_8860 = mul nuw nsw i32 %v3_8858, 4
  %v6_8860 = add i32 %v5_8860, %v5_8854
  %v7_8860 = inttoptr i32 %v6_8860 to i32*
  store i32 %v0_8860, i32* %v7_8860, align 4
  %v0_8864 = load i32, i32* %r3.global-to-local, align 4
  %v1_8864 = load i32, i32* @r8, align 4
  %v2_8864 = add i32 %v1_8864, %v0_8864
  store i32 %v2_8864, i32* %r2.global-to-local, align 4
  %v0_8868 = load i32, i32* @r7, align 4
  store i32 %v0_8868, i32* %r1.global-to-local, align 4
  %v0_8870 = load i32, i32* %ip.global-to-local, align 4
  %v1_8870 = load i32, i32* @r6, align 4
  %v2_8870 = inttoptr i32 %v1_8870 to i32*
  store i32 %v0_8870, i32* %v2_8870, align 4
  %v0_8874 = load i32, i32* %r2.global-to-local, align 4
  %v1_8874 = trunc i32 %v0_8874 to i8
  %v2_8874 = load i32, i32* @r4, align 4
  %v3_8874 = inttoptr i32 %v2_8874 to i8*
  store i8 %v1_8874, i8* %v3_8874, align 1
  %v2_8878 = call i32 @function_12a18(i32 %v1_8864, i32 %v0_8868)
  %v2_887c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_887c = zext i8 %v2_887c to i32
  store i32 39764, i32* %r2.global-to-local, align 4
  store i32 %v2_8878, i32* @r5, align 4
  store i32 10, i32* %r3.global-to-local, align 4
  %v3_888c = mul nuw nsw i32 %v3_887c, 4
  store i32 %v3_888c, i32* %r1.global-to-local, align 4
  %v2_8890 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8894 = inttoptr i32 %v2_8878 to i32*
  store i32 39764, i32* %v2_8894, align 4
  %v3_8898 = load i32, i32* @r5, align 4
  %v4_8898 = add i32 %v3_8898, 4
  %v5_8898 = inttoptr i32 %v4_8898 to i8*
  store i8 10, i8* %v5_8898, align 1
  %v0_889c = load i32, i32* %r1.global-to-local, align 4
  %v1_889c = add i32 %v0_889c, 4
  store i32 %v1_889c, i32* %r1.global-to-local, align 4
  %v5_88a0 = call i32 @function_12b60(i32 %v2_8890, i32 %v1_889c, i32 39764, i32 10)
  %v2_88a4 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88a4 = zext i8 %v2_88a4 to i32
  store i32 %v3_88a4, i32* %r3.global-to-local, align 4
  store i32 %v5_88a0, i32* %ip.global-to-local, align 4
  %v0_88ac = load i32, i32* @r5, align 4
  %v5_88ac = mul nuw nsw i32 %v3_88a4, 4
  %v6_88ac = add i32 %v5_88ac, %v5_88a0
  %v7_88ac = inttoptr i32 %v6_88ac to i32*
  store i32 %v0_88ac, i32* %v7_88ac, align 4
  %v0_88b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_88b0 = load i32, i32* @r8, align 4
  %v2_88b0 = add i32 %v1_88b0, %v0_88b0
  store i32 %v2_88b0, i32* %r2.global-to-local, align 4
  %v0_88b4 = load i32, i32* @r7, align 4
  store i32 %v0_88b4, i32* %r1.global-to-local, align 4
  %v0_88bc = load i32, i32* %ip.global-to-local, align 4
  %v1_88bc = load i32, i32* @r6, align 4
  %v2_88bc = inttoptr i32 %v1_88bc to i32*
  store i32 %v0_88bc, i32* %v2_88bc, align 4
  %v0_88c0 = load i32, i32* %r2.global-to-local, align 4
  %v1_88c0 = trunc i32 %v0_88c0 to i8
  %v2_88c0 = load i32, i32* @r4, align 4
  %v3_88c0 = inttoptr i32 %v2_88c0 to i8*
  store i8 %v1_88c0, i8* %v3_88c0, align 1
  %v2_88c4 = call i32 @function_12a18(i32 %v1_88b0, i32 %v0_88b4)
  %v2_88c8 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88c8 = zext i8 %v2_88c8 to i32
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_88c4, i32* @r5, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  %v3_88d8 = mul nuw nsw i32 %v3_88c8, 4
  store i32 %v3_88d8, i32* %r1.global-to-local, align 4
  %v2_88dc = load i32, i32* @global_var_1d198.23, align 4
  %v2_88e0 = inttoptr i32 %v2_88c4 to i32*
  store i32 ptrtoint (i32* @global_var_9154.44 to i32), i32* %v2_88e0, align 4
  %v3_88e4 = load i32, i32* @r5, align 4
  %v4_88e4 = add i32 %v3_88e4, 4
  %v5_88e4 = inttoptr i32 %v4_88e4 to i8*
  store i8 6, i8* %v5_88e4, align 1
  %v0_88e8 = load i32, i32* %r1.global-to-local, align 4
  %v1_88e8 = add i32 %v0_88e8, 4
  store i32 %v1_88e8, i32* %r1.global-to-local, align 4
  %v5_88ec = call i32 @function_12b60(i32 %v2_88dc, i32 %v1_88e8, i32 ptrtoint (i32* @global_var_9154.44 to i32), i32 6)
  %v2_88f0 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_88f0 = zext i8 %v2_88f0 to i32
  store i32 %v3_88f0, i32* %r3.global-to-local, align 4
  store i32 %v5_88ec, i32* %ip.global-to-local, align 4
  %v0_88f8 = load i32, i32* @r5, align 4
  %v5_88f8 = mul nuw nsw i32 %v3_88f0, 4
  %v6_88f8 = add i32 %v5_88f8, %v5_88ec
  %v7_88f8 = inttoptr i32 %v6_88f8 to i32*
  store i32 %v0_88f8, i32* %v7_88f8, align 4
  %v0_88fc = load i32, i32* %r3.global-to-local, align 4
  %v1_88fc = load i32, i32* @r8, align 4
  %v2_88fc = add i32 %v1_88fc, %v0_88fc
  store i32 %v2_88fc, i32* %r2.global-to-local, align 4
  %v0_8900 = load i32, i32* @r7, align 4
  store i32 %v0_8900, i32* %r1.global-to-local, align 4
  %v0_8908 = load i32, i32* %ip.global-to-local, align 4
  %v1_8908 = load i32, i32* @r6, align 4
  %v2_8908 = inttoptr i32 %v1_8908 to i32*
  store i32 %v0_8908, i32* %v2_8908, align 4
  %v0_890c = load i32, i32* %r2.global-to-local, align 4
  %v1_890c = trunc i32 %v0_890c to i8
  %v2_890c = load i32, i32* @r4, align 4
  %v3_890c = inttoptr i32 %v2_890c to i8*
  store i8 %v1_890c, i8* %v3_890c, align 1
  %v2_8910 = call i32 @function_12a18(i32 %v1_88fc, i32 %v0_8900)
  %v2_8914 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8914 = zext i8 %v2_8914 to i32
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_8910, i32* @r5, align 4
  store i32 7, i32* %r3.global-to-local, align 4
  %v3_8924 = mul nuw nsw i32 %v3_8914, 4
  store i32 %v3_8924, i32* %r1.global-to-local, align 4
  %v2_8928 = load i32, i32* @global_var_1d198.23, align 4
  %v2_892c = inttoptr i32 %v2_8910 to i32*
  store i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32* %v2_892c, align 4
  %v3_8930 = load i32, i32* @r5, align 4
  %v4_8930 = add i32 %v3_8930, 4
  %v5_8930 = inttoptr i32 %v4_8930 to i8*
  store i8 7, i8* %v5_8930, align 1
  %v0_8934 = load i32, i32* %r1.global-to-local, align 4
  %v1_8934 = add i32 %v0_8934, 4
  store i32 %v1_8934, i32* %r1.global-to-local, align 4
  %v5_8938 = call i32 @function_12b60(i32 %v2_8928, i32 %v1_8934, i32 ptrtoint (i32* @global_var_89d8.46 to i32), i32 7)
  %v2_893c = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_893c = zext i8 %v2_893c to i32
  store i32 %v3_893c, i32* %r3.global-to-local, align 4
  store i32 %v5_8938, i32* %ip.global-to-local, align 4
  %v0_8944 = load i32, i32* @r5, align 4
  %v5_8944 = mul nuw nsw i32 %v3_893c, 4
  %v6_8944 = add i32 %v5_8944, %v5_8938
  %v7_8944 = inttoptr i32 %v6_8944 to i32*
  store i32 %v0_8944, i32* %v7_8944, align 4
  %v0_8948 = load i32, i32* %r3.global-to-local, align 4
  %v1_8948 = load i32, i32* @r8, align 4
  %v2_8948 = add i32 %v1_8948, %v0_8948
  store i32 %v2_8948, i32* %r2.global-to-local, align 4
  %v0_894c = load i32, i32* @r7, align 4
  store i32 %v0_894c, i32* %r1.global-to-local, align 4
  %v1_8954 = trunc i32 %v2_8948 to i8
  %v2_8954 = load i32, i32* @r4, align 4
  %v3_8954 = inttoptr i32 %v2_8954 to i8*
  store i8 %v1_8954, i8* %v3_8954, align 1
  %v0_8958 = load i32, i32* %ip.global-to-local, align 4
  %v1_8958 = load i32, i32* @r6, align 4
  %v2_8958 = inttoptr i32 %v1_8958 to i32*
  store i32 %v0_8958, i32* %v2_8958, align 4
  %v2_895c = call i32 @function_12a18(i32 %v1_8948, i32 %v0_894c)
  %v2_8960 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8960 = zext i8 %v2_8960 to i32
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %r2.global-to-local, align 4
  store i32 %v2_895c, i32* @r5, align 4
  store i32 9, i32* %r3.global-to-local, align 4
  %v3_8970 = mul nuw nsw i32 %v3_8960, 4
  store i32 %v3_8970, i32* %r1.global-to-local, align 4
  %v2_8974 = load i32, i32* @global_var_1d198.23, align 4
  %v2_8978 = inttoptr i32 %v2_895c to i32*
  store i32 ptrtoint (i32* @global_var_9870.48 to i32), i32* %v2_8978, align 4
  %v3_897c = load i32, i32* @r5, align 4
  %v4_897c = add i32 %v3_897c, 4
  %v5_897c = inttoptr i32 %v4_897c to i8*
  store i8 9, i8* %v5_897c, align 1
  %v0_8980 = load i32, i32* %r1.global-to-local, align 4
  %v1_8980 = add i32 %v0_8980, 4
  store i32 %v1_8980, i32* %r1.global-to-local, align 4
  %v5_8984 = call i32 @function_12b60(i32 %v2_8974, i32 %v1_8980, i32 ptrtoint (i32* @global_var_9870.48 to i32), i32 9)
  %v2_8988 = load i8, i8* bitcast (i8** @global_var_1d194.21 to i8*), align 4
  %v3_8988 = zext i8 %v2_8988 to i32
  store i32 %v3_8988, i32* %r3.global-to-local, align 4
  %v1_898c = load i32, i32* @r6, align 4
  %v2_898c = inttoptr i32 %v1_898c to i32*
  store i32 %v5_8984, i32* %v2_898c, align 4
  %v0_8990 = load i32, i32* @r5, align 4
  %v2_8990 = load i32, i32* %r3.global-to-local, align 4
  %v5_8990 = mul i32 %v2_8990, 4
  %v6_8990 = add i32 %v5_8990, %v5_8984
  %v7_8990 = inttoptr i32 %v6_8990 to i32*
  store i32 %v0_8990, i32* %v7_8990, align 4
  %v0_8994 = load i32, i32* %r3.global-to-local, align 4
  %v1_8994 = load i32, i32* @r8, align 4
  %v2_8994 = add i32 %v1_8994, %v0_8994
  store i32 %v2_8994, i32* %r2.global-to-local, align 4
  %v1_899c = trunc i32 %v2_8994 to i8
  %v2_899c = load i32, i32* @r4, align 4
  %v3_899c = inttoptr i32 %v2_899c to i8*
  store i8 %v1_899c, i8* %v3_899c, align 1
  %v2_89a0 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_89a0, i32* @r4, align 4
  store i32 %v6_8650, i32* @r5, align 4
  store i32 %v9_8650, i32* @r6, align 4
  store i32 %v12_8650, i32* @r7, align 4
  store i32 %v15_8650, i32* @r8, align 4
  ret i32 %v1_8994

; uselistorder directives
  uselistorder i32 %v1_8994, { 1, 0 }
  uselistorder i32 %v1_8948, { 1, 0 }
  uselistorder i32 %v1_88fc, { 1, 0 }
  uselistorder i32 %v1_88b0, { 1, 0 }
  uselistorder i32 %v1_8864, { 1, 0 }
  uselistorder i32 %v1_8818, { 1, 0 }
  uselistorder i32 %v1_87cc, { 1, 0 }
  uselistorder i32 %v1_8780, { 1, 0 }
  uselistorder i32 %v2_8730, { 0, 2, 1 }
  uselistorder i32 %v3_8728, { 1, 0, 2 }
  uselistorder i32 %v1_86e8, { 1, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 }
  uselistorder i32* @global_var_1d198.23, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11 }
  uselistorder i8* bitcast (i8** @global_var_1d194.21 to i8*), { 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
}

define i32 @function_89d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_89d8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-50 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_89d8 = load i32, i32* @r4, align 4
  %v15_89d8 = load i32, i32* @r8, align 4
  %v21_89d8 = load i32, i32* @sl, align 4
  %v1_89dc = urem i32 %arg1, 256
  store i32 %v1_89dc, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_89dc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_89f4 = urem i32 %arg3, 256
  store i32 %v1_89f4, i32* @r4, align 4
  %v2_89f8 = call i32 @function_12a18(i32 %v1_89dc, i32 4)
  %v0_89fc = load i32, i32* @r5, align 4
  store i32 %v0_89fc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8a0c = load i32, i32* @r4, align 4
  store i32 %v0_8a0c, i32* %r0.global-to-local, align 4
  %v5_8a10 = inttoptr i32 %v0_89fc to i32*
  %v6_8a10 = call i32 @function_85e0(i32 %v0_8a0c, i32* %v5_8a10, i32 2, i32 0, i32 %v2_89f8)
  %v1_8a1c = urem i32 %v6_8a10, 256
  store i32 %v1_8a1c, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_8a28 = load i32, i32* @r5, align 4
  store i32 %v0_8a28, i32* %r1.global-to-local, align 4
  %v0_8a2c = load i32, i32* @r4, align 4
  store i32 %v0_8a2c, i32* %r0.global-to-local, align 4
  %v5_8a30 = trunc i32 %v6_8a10 to i8
  %v6_8a34 = inttoptr i32 %v0_8a28 to i32*
  %v7_8a34 = call i32 @function_85e0(i32 %v0_8a2c, i32* %v6_8a34, i32 3, i32 65535, i32 %v6_8a10)
  %v0_8a38 = load i32, i32* @r5, align 4
  store i32 %v0_8a38, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_8a34, i32* @r7, align 4
  %v0_8a48 = load i32, i32* @r4, align 4
  store i32 %v0_8a48, i32* %r0.global-to-local, align 4
  %v5_8a4c = inttoptr i32 %v0_8a38 to i32*
  %v6_8a4c = call i32 @function_85e0(i32 %v0_8a48, i32* %v5_8a4c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_8a54 = urem i32 %v6_8a4c, 256
  store i32 %v1_8a54, i32* %ip.global-to-local, align 4
  %v0_8a58 = load i32, i32* @r5, align 4
  store i32 %v0_8a58, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8a64 = load i32, i32* @r4, align 4
  store i32 %v0_8a64, i32* %r0.global-to-local, align 4
  %v5_8a68 = trunc i32 %v6_8a4c to i8
  %v6_8a6c = inttoptr i32 %v0_8a58 to i32*
  %v7_8a6c = call i32 @function_85e0(i32 %v0_8a64, i32* %v6_8a6c, i32 5, i32 1, i32 %v6_8a4c)
  %v1_8a78 = urem i32 %v7_8a6c, 256
  store i32 %v1_8a78, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_8a84 = load i32, i32* @r5, align 4
  store i32 %v0_8a84, i32* %r1.global-to-local, align 4
  %v0_8a88 = load i32, i32* @r4, align 4
  store i32 %v0_8a88, i32* %r0.global-to-local, align 4
  %v5_8a90 = inttoptr i32 %v0_8a84 to i32*
  %v6_8a90 = call i32 @function_85e0(i32 %v0_8a88, i32* %v5_8a90, i32 6, i32 65535, i32 %v1_8a78)
  %v0_8a98 = load i32, i32* @r5, align 4
  store i32 %v0_8a98, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_8a90, i32* @sl, align 4
  %v0_8aa8 = load i32, i32* @r4, align 4
  store i32 %v0_8aa8, i32* %r0.global-to-local, align 4
  %v5_8aac = inttoptr i32 %v0_8a98 to i32*
  %v6_8aac = call i32 @function_85e0(i32 %v0_8aa8, i32* %v5_8aac, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_8ab0 = load i32, i32* @r5, align 4
  store i32 %v0_8ab0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_8aac, i32* @r8, align 4
  %v0_8ac0 = load i32, i32* @r4, align 4
  store i32 %v0_8ac0, i32* %r0.global-to-local, align 4
  %v5_8ac4 = inttoptr i32 %v0_8ab0 to i32*
  %v6_8ac4 = call i32 @function_85e0(i32 %v0_8ac0, i32* %v5_8ac4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_8ad4 = load i32, i32* @r5, align 4
  store i32 %v0_8ad4, i32* %r1.global-to-local, align 4
  %v0_8ad8 = load i32, i32* @r4, align 4
  store i32 %v0_8ad8, i32* %r0.global-to-local, align 4
  %v5_8adc = inttoptr i32 %v0_8ad4 to i32*
  %v6_8adc = call i32 @function_85e0(i32 %v0_8ad8, i32* %v5_8adc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_8ae4 = urem i32 %v6_8adc, 256
  store i32 %v1_8ae4, i32* %ip.global-to-local, align 4
  %v0_8ae8 = load i32, i32* @r5, align 4
  store i32 %v0_8ae8, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_8af4 = load i32, i32* @r4, align 4
  store i32 %v0_8af4, i32* %r0.global-to-local, align 4
  %v5_8afc = inttoptr i32 %v0_8ae8 to i32*
  %v6_8afc = call i32 @function_85e0(i32 %v0_8af4, i32* %v5_8afc, i32 19, i32 0, i32 %v1_8ae4)
  %v0_8b04 = load i32, i32* @r5, align 4
  store i32 %v0_8b04, i32* %r1.global-to-local, align 4
  %v2_8b08 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_8b08, i32* %r3.global-to-local, align 4
  store i32 %v6_8afc, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_8b14 = load i32, i32* @r4, align 4
  store i32 %v0_8b14, i32* %r0.global-to-local, align 4
  %v5_8b18 = inttoptr i32 %v0_8b04 to i32*
  %v6_8b18 = call i32 @function_85e0(i32 %v0_8b14, i32* %v5_8b18, i32 25, i32 %v2_8b08, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_8b2c = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v7_8b30 = icmp eq i32 %v3_8b2c, -1
  store i1 %v7_8b30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b30, label %dec_label_pc_9014, label %dec_label_pc_8b3c

dec_label_pc_8b3c:                                ; preds = %dec_label_pc_89d8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_8b44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_8b44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_8b58 = call i32 @function_126fc(i32 %v3_8b2c, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_8b58, i32* %r0.global-to-local, align 4
  %v7_8b5c = icmp eq i32 %v6_8b58, -1
  store i1 %v7_8b5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8b5c, label %dec_label_pc_900c, label %dec_label_pc_8b64

dec_label_pc_8b64:                                ; preds = %dec_label_pc_8b3c
  %v0_8b64 = load i32, i32* @sl, align 4
  %v3_8b64 = mul i32 %v0_8b64, 65536
  store i32 %v3_8b64, i32* %sl.global-to-local, align 4
  %v0_8b68 = load i32, i32* @r8, align 4
  %v3_8b68 = mul i32 %v0_8b68, 65536
  store i32 %v3_8b68, i32* %r8.global-to-local, align 4
  %v0_8b70 = load i32, i32* @r7, align 4
  %v3_8b70 = mul i32 %v0_8b70, 65536
  %v0_8b74 = load i32, i32* @r6, align 4
  %v1_8b74 = urem i32 %v0_8b74, 256
  store i32 0, i32* %stack_var_-40, align 4
  %v3_8b7c = urem i32 %v0_8b70, 65536
  store i32 %v3_8b7c, i32* %r2.global-to-local, align 4
  %v3_8b80 = urem i32 %v0_8b64, 65536
  store i32 %v3_8b80, i32* %r3.global-to-local, align 4
  %v3_8b84 = urem i32 %v0_8b68, 65536
  store i32 %v3_8b84, i32* %r1.global-to-local, align 4
  %v0_8b88 = load i32, i32* @fp, align 4
  %v2_8b88 = icmp eq i32 %v0_8b88, 0
  store i1 %v2_8b88, i1* %cpsr_z.global-to-local, align 1
  %tmp88 = icmp slt i32 %v0_8b88, 1
  br i1 %tmp88, label %dec_label_pc_9134, label %dec_label_pc_8ba8

dec_label_pc_8ba8:                                ; preds = %dec_label_pc_8b64
  %v3_8bac = mul i32 %v6_8ac4, 65536
  %v0_8b70.not = or i32 %v0_8b70, -65536
  %v1_8bb4 = xor i32 %v0_8b70.not, 65535
  %v1_8bbc = add i32 %v3_8bac, 4325376
  %v1_8bc0 = urem i32 %v0_8b64, 256
  %v3_8bc8 = udiv i32 %v1_8bbc, 256
  %v1_8bcc = add i32 %v3_8bac, 524288
  %v1_8bd4 = add i32 %v3_8bac, 1835008
  %v1_8bd8 = urem i32 %v0_8b68, 256
  %v1_8bdc = and i32 %v3_8bc8, 65280
  store i32 %v1_8bdc, i32* %r0.global-to-local, align 4
  %v3_8be4 = udiv i32 %v1_8bd4, 256
  %tmp89 = mul nsw i32 %v1_8bb4, 256
  %v1_8bfc = and i32 %v3_8be4, 65280
  store i32 %v1_8bfc, i32* %ip.global-to-local, align 4
  %v1_8c00 = and i32 %tmp89, 65280
  store i32 %v1_8c00, i32* @lr, align 4
  %tmp91 = udiv i32 %v1_8bb4, 256
  %v4_8bec = sdiv i32 %v1_8bbc, 16777216
  %v5_8c1c = trunc i32 %tmp91 to i8
  %v3_8c28 = mul nuw nsw i32 %v1_8bc0, 256
  %v3_8c30 = ashr i32 %v1_8bbc, 31
  %v3_8c34 = mul nuw nsw i32 %v1_8bd8, 256
  store i32 %v3_8c34, i32* @r5, align 4
  %tmp92 = udiv i32 %v0_8b64, 256
  %v4_8c38 = urem i32 %tmp92, 256
  %v5_8c38 = or i32 %v4_8c38, %v3_8c28
  store i32 %v5_8c38, i32* @r7, align 4
  %v3_8c3c = udiv i32 %v1_8bcc, 256
  %tmp93 = udiv i32 %v0_8b68, 256
  %v4_8c40 = urem i32 %tmp93, 256
  %v5_8c40 = or i32 %v4_8c40, %v3_8c34
  store i32 %v5_8c40, i32* %sl.global-to-local, align 4
  %v5_8c44 = trunc i32 %v3_8c30 to i8
  %v3_8c4c = sdiv i32 %v3_8b70, 16777216
  %v7_8c4c = sdiv i32 %v1_8bd4, 16777216
  %v1_8c50 = and i32 %v3_8c3c, 65280
  store i32 %v1_8c50, i32* @r6, align 4
  %v3_8c54 = ashr i32 %v3_8b70, 31
  %v3_8c58 = ashr i32 %v1_8bd4, 31
  %v3_8c5c = udiv i32 %v1_8bb4, 65536
  %v4_8c60 = udiv i32 %v1_8bcc, 16777216
  %v5_8c60 = or i32 %v4_8c60, %v1_8c50
  store i32 %v5_8c60, i32* %r8.global-to-local, align 4
  store i32 %v1_8bc0, i32* %r1.global-to-local, align 4
  store i32 %v1_8bd8, i32* %r2.global-to-local, align 4
  %v3_8c7837 = udiv i32 %v1_8c50, 256
  store i32 %v3_8c7837, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_8dd8 = icmp eq i32 %v1_8b74, 0
  %sext16 = mul i32 %v0_8b64, 16777216
  %v4_8dec = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_8bcc, 256
  %v4_8e00 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_8b68, 16777216
  %v4_8e08 = sdiv i32 %sext18, 16777216
  %v1_8e10 = trunc i32 %v4_8e00 to i8
  br label %dec_label_pc_8c8c

dec_label_pc_8c8c:                                ; preds = %bb105, %dec_label_pc_8ba8
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_8c98 = call i32 @function_12a18(i32 1510, i32 4)
  store i32 %v2_8c98, i32* %r0.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v3_8ca0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ca0, i32* %r3.global-to-local, align 4
  %v2_8ca4 = load i32, i32* @r4, align 4
  %v5_8ca4 = mul i32 %v2_8ca4, 4
  %v6_8ca4 = add i32 %v5_8ca4, %v2_89f8
  %v7_8ca4 = inttoptr i32 %v6_8ca4 to i32*
  store i32 %v2_8c98, i32* %v7_8ca4, align 4
  %v0_8ca8 = load i32, i32* %r1.global-to-local, align 4
  %v1_8ca8 = load i32, i32* %r3.global-to-local, align 4
  %v4_8ca8 = mul i32 %v1_8ca8, 4
  %v5_8ca8 = add i32 %v4_8ca8, %v0_8ca8
  %v6_8ca8 = inttoptr i32 %v5_8ca8 to i32*
  %v7_8ca8 = load i32, i32* %v6_8ca8, align 4
  store i32 %v7_8ca8, i32* %r4.global-to-local, align 4
  %v1_8cac = inttoptr i32 %v7_8ca8 to i8*
  %v2_8cac = load i8, i8* %v1_8cac, align 1
  %tmp = urem i8 %v2_8cac, 16
  %v1_8cb0 = zext i8 %tmp to i32
  %v1_8cb4 = or i32 %v1_8cb0, 64
  store i32 %v1_8cb4, i32* %r2.global-to-local, align 4
  %v1_8cb8 = trunc i32 %v1_8cb4 to i8
  store i8 %v1_8cb8, i8* %v1_8cac, align 1
  %v0_8cbc = load i32, i32* %r4.global-to-local, align 4
  %v1_8cbc = inttoptr i32 %v0_8cbc to i8*
  %v2_8cbc = load i8, i8* %v1_8cbc, align 1
  %v1_8cc0 = and i8 %v2_8cbc, -16
  %v1_8cc4 = or i8 %v1_8cc0, 5
  store i32 %v1_8a78, i32* %r2.global-to-local, align 4
  store i8 %v1_8cc4, i8* %v1_8cbc, align 1
  %v2_8cd4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cd4 = add i32 %v2_8cd4, 1
  %v4_8cd4 = inttoptr i32 %v3_8cd4 to i8*
  store i8 %v5_8a30, i8* %v4_8cd4, align 1
  store i32 %v6_8a4c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_8ce0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8ce0 = add i32 %v2_8ce0, 8
  %v4_8ce0 = inttoptr i32 %v3_8ce0 to i8*
  store i8 %v5_8a68, i8* %v4_8ce0, align 1
  %v0_8ce4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8ce4 = load i32, i32* %ip.global-to-local, align 4
  %v9_8ce4 = icmp eq i32 %v0_8ce4, %v1_8ce4
  store i1 %v9_8ce4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_8c30, i32* %r3.global-to-local, align 4
  store i32 %v4_8bec, i32* %r2.global-to-local, align 4
  %v2_8cf0 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf0 = add i32 %v2_8cf0, 3
  %v4_8cf0 = inttoptr i32 %v3_8cf0 to i8*
  store i8 %v5_8c44, i8* %v4_8cf0, align 1
  %v0_8cf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8cf4 = trunc i32 %v0_8cf4 to i8
  %v2_8cf4 = load i32, i32* %r4.global-to-local, align 4
  %v3_8cf4 = add i32 %v2_8cf4, 2
  %v4_8cf4 = inttoptr i32 %v3_8cf4 to i8*
  store i8 %v1_8cf4, i8* %v4_8cf4, align 1
  %v0_8cf8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8cf8, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_8c8c
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %extract.t114 = trunc i32 %v3_8c54 to i8
  br label %bb94

bb:                                               ; preds = %dec_label_pc_8c8c
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v3_8c54, i32* %r2.global-to-local, align 4
  %v3_8d00 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d00 = add i32 %v3_8d00, 6
  %v5_8d00 = inttoptr i32 %v4_8d00 to i8*
  store i8 64, i8* %v5_8d00, align 1
  %v0_8d08.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t115 = trunc i32 %v0_8d08.pre to i8
  br label %bb94

bb94:                                             ; preds = %.thread, %bb
  %v3_8c54.sink.off0 = phi i8 [ %extract.t114, %.thread ], [ %extract.t115, %bb ]
  store i32 47, i32* %r3.global-to-local, align 4
  %v2_8d08 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d08 = add i32 %v2_8d08, 5
  %v4_8d08 = inttoptr i32 %v3_8d08 to i8*
  store i8 %v3_8c54.sink.off0, i8* %v4_8d08, align 1
  store i32 %v3_8c4c, i32* %r1.global-to-local, align 4
  %v0_8d10 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d10, label %bb96, label %bb95

bb95:                                             ; preds = %bb94
  %v1_8d10 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_8d10, i32* %r2.global-to-local, align 4
  br label %bb96

bb96:                                             ; preds = %bb94, %bb95
  %v0_8d14 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d14 = trunc i32 %v0_8d14 to i8
  %v2_8d14 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d14 = add i32 %v2_8d14, 9
  %v4_8d14 = inttoptr i32 %v3_8d14 to i8*
  store i8 %v1_8d14, i8* %v4_8d14, align 1
  %v0_8d18 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8d18, label %bb98, label %bb97

bb97:                                             ; preds = %bb96
  %v1_8d18 = load i32, i32* %r2.global-to-local, align 4
  %v2_8d18 = trunc i32 %v1_8d18 to i8
  %v3_8d18 = load i32, i32* %r4.global-to-local, align 4
  %v4_8d18 = add i32 %v3_8d18, 7
  %v5_8d18 = inttoptr i32 %v4_8d18 to i8*
  store i8 %v2_8d18, i8* %v5_8d18, align 1
  br label %bb98

bb98:                                             ; preds = %bb96, %bb97
  %v3_8d1c = load i32, i32* %stack_var_-40, align 4
  %v5_8d24 = mul i32 %v3_8d1c, 24
  store i32 %v5_8d24, i32* %r3.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v1_8d2c = load i32, i32* %r4.global-to-local, align 4
  %v2_8d2c = add i32 %v1_8d2c, 12
  %v3_8d2c = inttoptr i32 %v2_8d2c to i32*
  store i32 %v6_8b18, i32* %v3_8d2c, align 4
  %v0_8d30 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d30 = load i32, i32* @sb, align 4
  %v2_8d30 = add i32 %v1_8d30, %v0_8d30
  store i32 %v2_8d30, i32* %r3.global-to-local, align 4
  %v1_8d34 = add i32 %v2_8d30, 16
  %v2_8d34 = inttoptr i32 %v1_8d34 to i32*
  %v3_8d34 = load i32, i32* %v2_8d34, align 4
  store i32 %v3_8d34, i32* %r2.global-to-local, align 4
  %v0_8d38 = load i32, i32* %r1.global-to-local, align 4
  %v1_8d38 = trunc i32 %v0_8d38 to i8
  %v2_8d38 = load i32, i32* %r4.global-to-local, align 4
  %v3_8d38 = add i32 %v2_8d38, 4
  %v4_8d38 = inttoptr i32 %v3_8d38 to i8*
  store i8 %v1_8d38, i8* %v4_8d38, align 1
  store i32 101, i32* %r3.global-to-local, align 4
  %v0_8d40 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d40 = add i32 %v0_8d40, 20
  store i32 %v1_8d40, i32* %r1.global-to-local, align 4
  %v3_8d44 = add i32 %v0_8d40, 22
  %v4_8d44 = inttoptr i32 %v3_8d44 to i8*
  store i8 101, i8* %v4_8d44, align 1
  %v0_8d48 = load i32, i32* %r2.global-to-local, align 4
  %v1_8d48 = load i32, i32* %r4.global-to-local, align 4
  %v2_8d48 = add i32 %v1_8d48, 16
  %v3_8d48 = inttoptr i32 %v2_8d48 to i32*
  store i32 %v0_8d48, i32* %v3_8d48, align 4
  %v0_8d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_8d4c = add i32 %v0_8d4c, 24
  store i32 %v1_8d4c, i32* %r0.global-to-local, align 4
  store i32 88, i32* %r2.global-to-local, align 4
  %v0_8d54 = load i32, i32* %r3.global-to-local, align 4
  %v1_8d54 = add i32 %v0_8d54, -93
  store i32 %v1_8d54, i32* %r3.global-to-local, align 4
  %v2_8d58 = load i32, i32* %r1.global-to-local, align 4
  %v3_8d58 = add i32 %v2_8d58, 3
  %v4_8d58 = inttoptr i32 %v3_8d58 to i8*
  store i8 88, i8* %v4_8d58, align 1
  %v0_8d5c = load i32, i32* %r3.global-to-local, align 4
  %v1_8d5c = trunc i32 %v0_8d5c to i8
  %v2_8d5c = load i32, i32* %r0.global-to-local, align 4
  %v3_8d5c = add i32 %v2_8d5c, 12
  %v4_8d5c = inttoptr i32 %v3_8d5c to i8*
  store i8 %v1_8d5c, i8* %v4_8d5c, align 1
  %v0_8d60 = load i32, i32* %ip.global-to-local, align 4
  %v1_8d60 = trunc i32 %v0_8d60 to i8
  %v2_8d60 = load i32, i32* %r0.global-to-local, align 4
  %v3_8d60 = add i32 %v2_8d60, 13
  %v4_8d60 = inttoptr i32 %v3_8d60 to i8*
  store i8 %v1_8d60, i8* %v4_8d60, align 1
  %v0_8d64 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d64 = add i32 %v0_8d64, 38
  %v2_8d64 = inttoptr i32 %v1_8d64 to i8*
  %v3_8d64 = load i8, i8* %v2_8d64, align 1
  %tmp116 = urem i8 %v3_8d64, 16
  %v1_8d68 = zext i8 %tmp116 to i32
  %v1_8d6c = or i32 %v1_8d68, 64
  store i32 %v1_8d6c, i32* %r3.global-to-local, align 4
  %v1_8d70 = trunc i32 %v1_8d6c to i8
  store i8 %v1_8d70, i8* %v2_8d64, align 1
  %v0_8d74 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d74 = add i32 %v0_8d74, 38
  %v2_8d74 = inttoptr i32 %v1_8d74 to i8*
  %v3_8d74 = load i8, i8* %v2_8d74, align 1
  %v1_8d78 = and i8 %v3_8d74, -16
  %v1_8d7c = or i8 %v1_8d78, 5
  store i8 %v1_8d7c, i8* %v2_8d74, align 1
  %v0_8d88 = load i32, i32* %r4.global-to-local, align 4
  %v1_8d88 = add i32 %v0_8d88, 38
  store i32 %v1_8d88, i32* @r5, align 4
  %v3_8d8c = add i32 %v0_8d88, 39
  %v4_8d8c = inttoptr i32 %v3_8d8c to i8*
  store i8 %v5_8a30, i8* %v4_8d8c, align 1
  store i32 %v7_8c4c, i32* %r1.global-to-local, align 4
  store i32 %tmp91, i32* %r3.global-to-local, align 4
  store i32 %v3_8c58, i32* %r2.global-to-local, align 4
  %v2_8d9c = load i32, i32* @r5, align 4
  %v3_8d9c = add i32 %v2_8d9c, 4
  %v4_8d9c = inttoptr i32 %v3_8d9c to i8*
  store i8 %v5_8c1c, i8* %v4_8d9c, align 1
  %v0_8da0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8da0 = trunc i32 %v0_8da0 to i8
  %v2_8da0 = load i32, i32* @r5, align 4
  %v3_8da0 = add i32 %v2_8da0, 2
  %v4_8da0 = inttoptr i32 %v3_8da0 to i8*
  store i8 %v1_8da0, i8* %v4_8da0, align 1
  %v0_8da4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8da4, label %bb100, label %bb99

bb99:                                             ; preds = %bb98
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb100

bb100:                                            ; preds = %bb98, %bb99
  store i32 %v3_8c5c, i32* %r1.global-to-local, align 4
  %v0_8dac = load i32, i32* %r2.global-to-local, align 4
  %v1_8dac = trunc i32 %v0_8dac to i8
  %v2_8dac = load i32, i32* @r5, align 4
  %v3_8dac = add i32 %v2_8dac, 3
  %v4_8dac = inttoptr i32 %v3_8dac to i8*
  store i8 %v1_8dac, i8* %v4_8dac, align 1
  store i32 %v6_8a4c, i32* %r2.global-to-local, align 4
  %v0_8db4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8db4, label %bb102, label %bb101

bb101:                                            ; preds = %bb100
  %v1_8db4 = load i32, i32* %r3.global-to-local, align 4
  %v2_8db4 = trunc i32 %v1_8db4 to i8
  %v3_8db4 = load i32, i32* @r5, align 4
  %v4_8db4 = add i32 %v3_8db4, 6
  %v5_8db4 = inttoptr i32 %v4_8db4 to i8*
  store i8 %v2_8db4, i8* %v5_8db4, align 1
  br label %bb102

bb102:                                            ; preds = %bb100, %bb101
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_8dbc = load i32, i32* %r1.global-to-local, align 4
  %v1_8dbc = trunc i32 %v0_8dbc to i8
  %v2_8dbc = load i32, i32* @r5, align 4
  %v3_8dbc = add i32 %v2_8dbc, 5
  %v4_8dbc = inttoptr i32 %v3_8dbc to i8*
  store i8 %v1_8dbc, i8* %v4_8dbc, align 1
  %v0_8dc0 = load i32, i32* %r2.global-to-local, align 4
  %v1_8dc0 = trunc i32 %v0_8dc0 to i8
  %v2_8dc0 = load i32, i32* @r5, align 4
  %v3_8dc0 = add i32 %v2_8dc0, 8
  %v4_8dc0 = inttoptr i32 %v3_8dc0 to i8*
  store i8 %v1_8dc0, i8* %v4_8dc0, align 1
  %v0_8dc4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_8dc4, label %bb104, label %bb103

bb103:                                            ; preds = %bb102
  %v1_8dc4 = load i32, i32* %ip.global-to-local, align 4
  %v2_8dc4 = trunc i32 %v1_8dc4 to i8
  %v3_8dc4 = load i32, i32* @r5, align 4
  %v4_8dc4 = add i32 %v3_8dc4, 7
  %v5_8dc4 = inttoptr i32 %v4_8dc4 to i8*
  store i8 %v2_8dc4, i8* %v5_8dc4, align 1
  br label %bb104

bb104:                                            ; preds = %bb102, %bb103
  %v0_8dc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8dc8 = trunc i32 %v0_8dc8 to i8
  %v2_8dc8 = load i32, i32* @r5, align 4
  %v3_8dc8 = add i32 %v2_8dc8, 9
  %v4_8dc8 = inttoptr i32 %v3_8dc8 to i8*
  store i8 %v1_8dc8, i8* %v4_8dc8, align 1
  %v0_8dcc = call i32 @function_ebc8()
  store i32 %v0_8dcc, i32* %r0.global-to-local, align 4
  store i32 %v1_8b74, i32* %r1.global-to-local, align 4
  store i1 %v2_8dd8, i1* %cpsr_z.global-to-local, align 1
  %v1_8ddc = sub i32 1023, %v0_8dcc
  store i32 %v1_8ddc, i32* %r3.global-to-local, align 4
  br i1 %v2_8dd8, label %.thread21, label %.thread22

.thread21:                                        ; preds = %bb104
  %v2_8de4 = load i32, i32* @r5, align 4
  %v3_8de4 = add i32 %v2_8de4, 16
  %v4_8de4 = inttoptr i32 %v3_8de4 to i32*
  store i32 %v1_8ddc, i32* %v4_8de4, align 4
  br label %bb105

.thread22:                                        ; preds = %bb104
  %v1_8de0 = load i32, i32* %r4.global-to-local, align 4
  %v2_8de0 = add i32 %v1_8de0, 16
  %v3_8de0 = inttoptr i32 %v2_8de0 to i32*
  %v4_8de0 = load i32, i32* %v3_8de0, align 4
  store i32 %v4_8de0, i32* %r3.global-to-local, align 4
  %v2_8de8 = load i32, i32* @r5, align 4
  %v3_8de8 = add i32 %v2_8de8, 16
  %v4_8de8 = inttoptr i32 %v3_8de8 to i32*
  store i32 %v4_8de0, i32* %v4_8de8, align 4
  br label %bb105

bb105:                                            ; preds = %.thread21, %.thread22
  store i32 %v4_8dec, i32* %r3.global-to-local, align 4
  %v0_8df0 = load i32, i32* %r4.global-to-local, align 4
  %v1_8df0 = add i32 %v0_8df0, 58
  store i32 %v1_8df0, i32* @r6, align 4
  %v1_8df4 = load i32, i32* @r5, align 4
  %v2_8df4 = add i32 %v1_8df4, 12
  %v3_8df4 = inttoptr i32 %v2_8df4 to i32*
  store i32 %v0_8dcc, i32* %v3_8df4, align 4
  %v0_8df8 = load i32, i32* %r3.global-to-local, align 4
  %v1_8df8 = trunc i32 %v0_8df8 to i8
  %v2_8df8 = load i32, i32* @r6, align 4
  %v3_8df8 = add i32 %v2_8df8, 1
  %v4_8df8 = inttoptr i32 %v3_8df8 to i8*
  store i8 %v1_8df8, i8* %v4_8df8, align 1
  %v3_8dfc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8dfc, i32* %r3.global-to-local, align 4
  store i32 %v4_8e00, i32* %r2.global-to-local, align 4
  %v1_8e04 = add i32 %v3_8dfc, 1
  store i32 %v1_8e04, i32* @r4, align 4
  store i32 %v4_8e08, i32* %r1.global-to-local, align 4
  %v1_8e0c = load i32, i32* @fp, align 4
  %v9_8e0c = icmp eq i32 %v1_8e04, %v1_8e0c
  store i1 %v9_8e0c, i1* %cpsr_z.global-to-local, align 1
  %v2_8e10 = load i32, i32* @r6, align 4
  %v3_8e10 = add i32 %v2_8e10, 5
  %v4_8e10 = inttoptr i32 %v3_8e10 to i8*
  store i8 %v1_8e10, i8* %v4_8e10, align 1
  %v0_8e14 = load i32, i32* @r7, align 4
  %v1_8e14 = trunc i32 %v0_8e14 to i8
  %v2_8e14 = load i32, i32* @r6, align 4
  %v3_8e14 = inttoptr i32 %v2_8e14 to i8*
  store i8 %v1_8e14, i8* %v3_8e14, align 1
  %v0_8e18 = load i32, i32* %sl.global-to-local, align 4
  %v1_8e18 = trunc i32 %v0_8e18 to i8
  %v2_8e18 = load i32, i32* @r6, align 4
  %v3_8e18 = add i32 %v2_8e18, 2
  %v4_8e18 = inttoptr i32 %v3_8e18 to i8*
  store i8 %v1_8e18, i8* %v4_8e18, align 1
  %v0_8e1c = load i32, i32* %r1.global-to-local, align 4
  %v1_8e1c = trunc i32 %v0_8e1c to i8
  %v2_8e1c = load i32, i32* @r6, align 4
  %v3_8e1c = add i32 %v2_8e1c, 3
  %v4_8e1c = inttoptr i32 %v3_8e1c to i8*
  store i8 %v1_8e1c, i8* %v4_8e1c, align 1
  %v0_8e20 = load i32, i32* %r8.global-to-local, align 4
  %v1_8e20 = trunc i32 %v0_8e20 to i8
  %v2_8e20 = load i32, i32* @r6, align 4
  %v3_8e20 = add i32 %v2_8e20, 4
  %v4_8e20 = inttoptr i32 %v3_8e20 to i8*
  store i8 %v1_8e20, i8* %v4_8e20, align 1
  %v0_8e24 = load i32, i32* @r4, align 4
  store i32 %v0_8e24, i32* %stack_var_-40, align 4
  %v5_8e28 = icmp slt i32 %v1_8e04, %v1_8e0c
  br i1 %v5_8e28, label %dec_label_pc_8c8c, label %dec_label_pc_8e2c

dec_label_pc_8e2c:                                ; preds = %bb105
  %v1_8e34 = add i32 %v6_8ac4, 8
  store i32 %v1_8e34, i32* %r2.global-to-local, align 4
  %v1_8e38 = add i32 %v6_8ac4, 66
  store i32 %v1_8e38, i32* %r3.global-to-local, align 4
  %v0_8e44.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_8e44.preheader

dec_label_pc_8e44.preheader:                      ; preds = %dec_label_pc_8e2c, %dec_label_pc_9134
  %v0_8e44.pre = phi i32 [ %v0_8e44.pre.pre, %dec_label_pc_8e2c ], [ %v0_8b88, %dec_label_pc_9134 ]
  %stack_var_-160.0.ph = phi i32 [ %v1_8e38, %dec_label_pc_8e2c ], [ %v1_9140, %dec_label_pc_9134 ]
  %stack_var_-156.0.ph = phi i32 [ %v1_8e34, %dec_label_pc_8e2c ], [ %v1_913c, %dec_label_pc_9134 ]
  %v3_9094 = icmp eq i32 %v3_8b7c, 65535
  %v2_9104 = icmp eq i32 %v1_8b74, 0
  %v2_8ee8 = ptrtoint i32* %stack_var_-44 to i32
  %v2_8f00 = ptrtoint i32* %stack_var_-48 to i32
  %v2_8f10 = ptrtoint i32* %stack_var_-52 to i32
  %v2_8f1c = ptrtoint i32* %stack_var_-50 to i32
  %v2_8f30 = icmp eq i32 %v1_8ae4, 0
  %v2_8e8c = icmp eq i32 %v6_8b18, -1
  %v7_8e8c = icmp eq i32 %v6_8b18, -1
  br label %dec_label_pc_8e44

dec_label_pc_8e44:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e44.preheader
  %v0_8e44 = phi i32 [ %v0_8e44.pre, %dec_label_pc_8e44.preheader ], [ %v1_8ffc, %dec_label_pc_8f38 ]
  %v2_8e44 = icmp eq i32 %v0_8e44, 0
  store i1 %v2_8e44, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp106 = icmp slt i32 %v0_8e44, 1
  br label %dec_label_pc_8e4c

dec_label_pc_8e4c:                                ; preds = %dec_label_pc_8e4c, %dec_label_pc_8e44
  br i1 %tmp106, label %dec_label_pc_8e4c, label %dec_label_pc_8e50

dec_label_pc_8e50:                                ; preds = %dec_label_pc_8e4c
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  br label %dec_label_pc_8e5c

dec_label_pc_8e5c:                                ; preds = %dec_label_pc_8f38, %dec_label_pc_8e50
  %v1_8e70 = phi i32 [ %v1_8ff8, %dec_label_pc_8f38 ], [ 0, %dec_label_pc_8e50 ]
  %v5_8e60 = mul i32 %v1_8e70, 24
  %v1_8e64 = load i32, i32* @sb, align 4
  %v2_8e64 = add i32 %v1_8e64, %v5_8e60
  store i32 %v2_8e64, i32* %r3.global-to-local, align 4
  store i32 %v2_89f8, i32* %r1.global-to-local, align 4
  %v1_8e6c = add i32 %v2_8e64, 20
  %v2_8e6c = inttoptr i32 %v1_8e6c to i8*
  %v3_8e6c = load i8, i8* %v2_8e6c, align 1
  %v4_8e6c = zext i8 %v3_8e6c to i32
  store i32 %v4_8e6c, i32* %r2.global-to-local, align 4
  %v4_8e70 = mul i32 %v1_8e70, 4
  %v5_8e70 = add i32 %v4_8e70, %v2_89f8
  %v6_8e70 = inttoptr i32 %v5_8e70 to i32*
  %v7_8e70 = load i32, i32* %v6_8e70, align 4
  store i32 %v7_8e70, i32* @r5, align 4
  %v7_8e74 = icmp eq i8 %v3_8e6c, 31
  store i1 %v7_8e74, i1* %cpsr_z.global-to-local, align 1
  %v1_8e78 = add i32 %v7_8e70, 24
  store i32 %v1_8e78, i32* @r8, align 4
  %v1_8e7c = add i32 %v7_8e70, 38
  store i32 %v1_8e7c, i32* @r6, align 4
  %v1_8e80 = add i32 %v7_8e70, 58
  store i32 %v1_8e80, i32* @r7, align 4
  %tmp117 = icmp ult i8 %v3_8e6c, 32
  br i1 %tmp117, label %dec_label_pc_901c, label %dec_label_pc_8e88

dec_label_pc_8e88:                                ; preds = %dec_label_pc_8e5c
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_8e94:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_8ea8

dec_label_pc_8ea8:                                ; preds = %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge, %dec_label_pc_8e94
  %v1_8eac = phi i32 [ %v1_8eac.pre, %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge ], [ 65535, %dec_label_pc_8e94 ]
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v9_8eac = icmp eq i32 %v3_8b80, %v1_8eac
  store i1 %v9_8eac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eac, label %dec_label_pc_90d8, label %dec_label_pc_8eb4

dec_label_pc_8eb4:                                ; preds = %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge, %dec_label_pc_8ea8
  %v1_8eb8 = phi i32 [ %v1_8eb8.pre, %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge ], [ %v1_8eac, %dec_label_pc_8ea8 ]
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v9_8eb8 = icmp eq i32 %v3_8b84, %v1_8eb8
  store i1 %v9_8eb8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_8eb8, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_8ec0:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %dec_label_pc_9118, label %.thread23

.thread23:                                        ; preds = %dec_label_pc_8ec0
  %v1_8ec8 = load i32, i32* @r5, align 4
  %v2_8ec8 = add i32 %v1_8ec8, 16
  %v3_8ec8 = inttoptr i32 %v2_8ec8 to i32*
  %v4_8ec8 = load i32, i32* %v3_8ec8, align 4
  store i32 %v4_8ec8, i32* %r3.global-to-local, align 4
  %v2_8ecc = load i32, i32* @r6, align 4
  %v3_8ecc = add i32 %v2_8ecc, 16
  %v4_8ecc = inttoptr i32 %v3_8ecc to i32*
  store i32 %v4_8ec8, i32* %v4_8ecc, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_8ed4:                                ; preds = %bb109, %.thread23, %dec_label_pc_9118
  %v0_8ed4 = call i32 @function_ebc8()
  store i32 %v0_8ed4, i32* %r0.global-to-local, align 4
  store i32 %v0_8ed4, i32* %stack_var_-44, align 4
  %v0_8edc = call i32 @function_ebc8()
  store i32 %v0_8edc, i32* %r0.global-to-local, align 4
  store i32 %v0_8edc, i32* %stack_var_-48, align 4
  %v0_8ee4 = call i32 @function_ebc8()
  store i32 %v2_8ee8, i32* %r1.global-to-local, align 4
  store i32 %v0_8ee4, i32* %stack_var_-52, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_8ef4 = load i32, i32* @r8, align 4
  store i32 %v0_8ef4, i32* %r0.global-to-local, align 4
  %v3_8ef8 = call i32 @function_11590(i32 %v0_8ef4, i32 %v2_8ee8, i32 4)
  %v0_8efc = load i32, i32* @r8, align 4
  %v1_8efc = add i32 %v0_8efc, 6
  store i32 %v1_8efc, i32* %r0.global-to-local, align 4
  store i32 %v2_8f00, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v3_8f08 = call i32 @function_11590(i32 %v1_8efc, i32 %v2_8f00, i32 4)
  %v0_8f0c = load i32, i32* @r8, align 4
  %v1_8f0c = add i32 %v0_8f0c, 4
  store i32 %v1_8f0c, i32* %r0.global-to-local, align 4
  store i32 %v2_8f10, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f18 = call i32 @function_11590(i32 %v1_8f0c, i32 %v2_8f10, i32 2)
  store i32 %v2_8f1c, i32* %r1.global-to-local, align 4
  %v0_8f20 = load i32, i32* @r8, align 4
  %v1_8f20 = add i32 %v0_8f20, 10
  store i32 %v1_8f20, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v3_8f28 = call i32 @function_11590(i32 %v1_8f20, i32 %v2_8f1c, i32 2)
  store i32 %v3_8f28, i32* %r0.global-to-local, align 4
  store i32 %v1_8ae4, i32* %r1.global-to-local, align 4
  store i1 %v2_8f30, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_8f30, label %dec_label_pc_8f38, label %dec_label_pc_9124

dec_label_pc_8f38:                                ; preds = %dec_label_pc_8ed4, %dec_label_pc_9124
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f3c = load i32, i32* @sl, align 4
  %v1_8f3c = trunc i32 %v0_8f3c to i8
  %v2_8f3c = load i32, i32* @r5, align 4
  %v3_8f3c = add i32 %v2_8f3c, 10
  %v4_8f3c = inttoptr i32 %v3_8f3c to i8*
  store i8 %v1_8f3c, i8* %v4_8f3c, align 1
  %v0_8f40 = load i32, i32* @sl, align 4
  %v1_8f40 = trunc i32 %v0_8f40 to i8
  %v2_8f40 = load i32, i32* @r5, align 4
  %v3_8f40 = add i32 %v2_8f40, 11
  %v4_8f40 = inttoptr i32 %v3_8f40 to i8*
  store i8 %v1_8f40, i8* %v4_8f40, align 1
  %v0_8f44 = load i32, i32* @r5, align 4
  store i32 %v0_8f44, i32* @r0, align 4
  %v2_8f48 = call i32 @function_d0b8(i32 %v0_8f44, i32 20)
  %v3_8f48 = trunc i32 %v2_8f48 to i8
  %v4_8f4c = sdiv i32 %v2_8f48, 256
  store i32 %v4_8f4c, i32* %r3.global-to-local, align 4
  %v1_8f50 = trunc i32 %v4_8f4c to i8
  %v2_8f50 = load i32, i32* @r5, align 4
  %v3_8f50 = add i32 %v2_8f50, 11
  %v4_8f50 = inttoptr i32 %v3_8f50 to i8*
  store i8 %v1_8f50, i8* %v4_8f50, align 1
  %v3_8f54 = load i32, i32* @r5, align 4
  %v4_8f54 = add i32 %v3_8f54, 10
  %v5_8f54 = inttoptr i32 %v4_8f54 to i8*
  store i8 %v3_8f48, i8* %v5_8f54, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_8f5c = load i32, i32* @sl, align 4
  %v1_8f5c = trunc i32 %v0_8f5c to i8
  %v2_8f5c = load i32, i32* @r6, align 4
  %v3_8f5c = add i32 %v2_8f5c, 10
  %v4_8f5c = inttoptr i32 %v3_8f5c to i8*
  store i8 %v1_8f5c, i8* %v4_8f5c, align 1
  %v0_8f60 = load i32, i32* @sl, align 4
  %v1_8f60 = trunc i32 %v0_8f60 to i8
  %v2_8f60 = load i32, i32* @r6, align 4
  %v3_8f60 = add i32 %v2_8f60, 11
  %v4_8f60 = inttoptr i32 %v3_8f60 to i8*
  store i8 %v1_8f60, i8* %v4_8f60, align 1
  %v0_8f64 = load i32, i32* @r6, align 4
  store i32 %v0_8f64, i32* @r0, align 4
  %v2_8f68 = call i32 @function_d0b8(i32 %v0_8f64, i32 20)
  %v3_8f68 = trunc i32 %v2_8f68 to i8
  store i32 %v2_8f68, i32* %r0.global-to-local, align 4
  %v4_8f6c = sdiv i32 %v2_8f68, 256
  store i32 %v4_8f6c, i32* %r3.global-to-local, align 4
  %v3_8f70 = load i32, i32* @r6, align 4
  %v4_8f70 = add i32 %v3_8f70, 10
  %v5_8f70 = inttoptr i32 %v4_8f70 to i8*
  store i8 %v3_8f68, i8* %v5_8f70, align 1
  %v0_8f74 = load i32, i32* %r3.global-to-local, align 4
  %v1_8f74 = trunc i32 %v0_8f74 to i8
  %v2_8f74 = load i32, i32* @r6, align 4
  %v3_8f74 = add i32 %v2_8f74, 11
  %v4_8f74 = inttoptr i32 %v3_8f74 to i8*
  store i8 %v1_8f74, i8* %v4_8f74, align 1
  %v0_8f78 = load i32, i32* @r7, align 4
  %v1_8f78 = add i32 %v0_8f78, 4
  %v2_8f78 = inttoptr i32 %v1_8f78 to i8*
  %v3_8f78 = load i8, i8* %v2_8f78, align 1
  %v4_8f78 = zext i8 %v3_8f78 to i32
  store i32 %v4_8f78, i32* %r3.global-to-local, align 4
  %v1_8f7c = add i32 %v0_8f78, 5
  %v2_8f7c = inttoptr i32 %v1_8f7c to i8*
  %v3_8f7c = load i8, i8* %v2_8f7c, align 1
  %v4_8f7c = zext i8 %v3_8f7c to i32
  store i32 %v0_8f78, i32* @r1, align 4
  %v4_8f84 = mul nuw nsw i32 %v4_8f7c, 256
  %v5_8f84 = or i32 %v4_8f84, %v4_8f78
  store i32 %v5_8f84, i32* %r2.global-to-local, align 4
  %v0_8f88 = load i32, i32* @sl, align 4
  %v1_8f88 = trunc i32 %v0_8f88 to i8
  %v3_8f88 = add i32 %v0_8f78, 6
  %v4_8f88 = inttoptr i32 %v3_8f88 to i8*
  store i8 %v1_8f88, i8* %v4_8f88, align 1
  store i32 %stack_var_-156.0.ph, i32* %r3.global-to-local, align 4
  %v0_8f90 = load i32, i32* @sl, align 4
  %v1_8f90 = trunc i32 %v0_8f90 to i8
  %v2_8f90 = load i32, i32* @r7, align 4
  %v3_8f90 = add i32 %v2_8f90, 7
  %v4_8f90 = inttoptr i32 %v3_8f90 to i8*
  store i8 %v1_8f90, i8* %v4_8f90, align 1
  %v0_8f94 = load i32, i32* @r6, align 4
  store i32 %v0_8f94, i32* %r0.global-to-local, align 4
  %v4_8f98 = call i32 @function_d114(i32 %v0_8f94, i32 %v0_8f78, i32 %v5_8f84, i32 %stack_var_-156.0.ph)
  %v5_8f98 = trunc i32 %v4_8f98 to i8
  store i32 %v4_8f98, i32* %r0.global-to-local, align 4
  %v3_8f9c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8f9c, i32* %r3.global-to-local, align 4
  %v3_8fa0 = mul i32 %v3_8f9c, 32
  store i32 %v3_8fa0, i32* %r2.global-to-local, align 4
  %v0_8fa4 = load i32, i32* @r5, align 4
  %v1_8fa4 = add i32 %v0_8fa4, 16
  %v2_8fa4 = inttoptr i32 %v1_8fa4 to i32*
  %v3_8fa4 = load i32, i32* %v2_8fa4, align 4
  store i32 %v3_8fa4, i32* %r1.global-to-local, align 4
  %v5_8fa8 = mul i32 %v3_8f9c, 24
  store i32 %v5_8fa8, i32* %r2.global-to-local, align 4
  %v4_8fac42 = udiv i32 %v4_8f98, 256
  %v1_8fb0 = trunc i32 %v4_8fac42 to i8
  %v2_8fb0 = load i32, i32* @r7, align 4
  %v3_8fb0 = add i32 %v2_8fb0, 7
  %v4_8fb0 = inttoptr i32 %v3_8fb0 to i8*
  store i8 %v1_8fb0, i8* %v4_8fb0, align 1
  %v0_8fb4 = load i32, i32* %r2.global-to-local, align 4
  %v1_8fb4 = load i32, i32* @sb, align 4
  %v2_8fb4 = add i32 %v1_8fb4, %v0_8fb4
  store i32 %v2_8fb4, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_8fbc = load i32, i32* @r7, align 4
  %v4_8fbc = add i32 %v3_8fbc, 6
  %v5_8fbc = inttoptr i32 %v4_8fbc to i8*
  store i8 %v5_8f98, i8* %v5_8fbc, align 1
  %v0_8fc0 = load i32, i32* %r1.global-to-local, align 4
  %v1_8fc0 = load i32, i32* %lr.global-to-local, align 4
  %v2_8fc0 = add i32 %v1_8fc0, 4
  %v3_8fc0 = inttoptr i32 %v2_8fc0 to i32*
  store i32 %v0_8fc0, i32* %v3_8fc0, align 4
  %v0_8fc4 = load i32, i32* %r3.global-to-local, align 4
  %v1_8fc4 = trunc i32 %v0_8fc4 to i8
  %v2_8fc4 = load i32, i32* %r2.global-to-local, align 4
  %v3_8fc4 = load i32, i32* @sb, align 4
  %v4_8fc4 = add i32 %v3_8fc4, %v2_8fc4
  %v5_8fc4 = inttoptr i32 %v4_8fc4 to i8*
  store i8 %v1_8fc4, i8* %v5_8fc4, align 1
  %v0_8fc8 = load i32, i32* @sl, align 4
  %v1_8fc8 = trunc i32 %v0_8fc8 to i8
  %v2_8fc8 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fc8 = add i32 %v2_8fc8, 2
  %v4_8fc8 = inttoptr i32 %v3_8fc8 to i8*
  store i8 %v1_8fc8, i8* %v4_8fc8, align 1
  %v0_8fcc = load i32, i32* @sl, align 4
  %v1_8fcc = trunc i32 %v0_8fcc to i8
  %v2_8fcc = load i32, i32* %lr.global-to-local, align 4
  %v3_8fcc = add i32 %v2_8fcc, 1
  %v4_8fcc = inttoptr i32 %v3_8fcc to i8*
  store i8 %v1_8fcc, i8* %v4_8fcc, align 1
  %v0_8fd0 = load i32, i32* @sl, align 4
  %v1_8fd0 = trunc i32 %v0_8fd0 to i8
  %v2_8fd0 = load i32, i32* %lr.global-to-local, align 4
  %v3_8fd0 = add i32 %v2_8fd0, 3
  %v4_8fd0 = inttoptr i32 %v3_8fd0 to i8*
  store i8 %v1_8fd0, i8* %v4_8fd0, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 16, i32* %ip.global-to-local, align 4
  %v0_8fdc = load i32, i32* @r5, align 4
  store i32 %v0_8fdc, i32* %r1.global-to-local, align 4
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-160.0.ph, i32* %r2.global-to-local, align 4
  %v0_8fe8 = load i32, i32* %lr.global-to-local, align 4
  %v6_8ff0 = inttoptr i32 %v0_8fdc to i32*
  %v7_8ff0 = call i32 @function_126c8(i32 %v3_8b2c, i32* %v6_8ff0, i32 %stack_var_-160.0.ph, i32 16384, i32 %v0_8fe8, i32 16)
  %v3_8ff4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_8ff4, i32* %r3.global-to-local, align 4
  %v1_8ff8 = add i32 %v3_8ff4, 1
  store i32 %v1_8ff8, i32* %r0.global-to-local, align 4
  %v1_8ffc = load i32, i32* @fp, align 4
  %v9_8ffc = icmp eq i32 %v1_8ff8, %v1_8ffc
  store i1 %v9_8ffc, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_8ff8, i32* %stack_var_-40, align 4
  %v6_9004 = icmp slt i32 %v1_8ff8, %v1_8ffc
  br i1 %v6_9004, label %dec_label_pc_8e5c, label %dec_label_pc_8e44

dec_label_pc_900c:                                ; preds = %dec_label_pc_8b3c
  store i32 %v3_8b2c, i32* %r0.global-to-local, align 4
  %v1_9010 = call i32 @function_11e18(i32 %v3_8b2c)
  store i32 %v1_9010, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9014

dec_label_pc_9014:                                ; preds = %dec_label_pc_89d8, %dec_label_pc_900c
  %v29_9018 = phi i32 [ %v3_8b2c, %dec_label_pc_89d8 ], [ %v1_9010, %dec_label_pc_900c ]
  store i32 %v3_89d8, i32* %r4.global-to-local, align 4
  store i32 %v15_89d8, i32* %r8.global-to-local, align 4
  store i32 %v21_89d8, i32* %sl.global-to-local, align 4
  ret i32 %v29_9018

dec_label_pc_901c:                                ; preds = %dec_label_pc_8e5c
  %v1_901c = add i32 %v2_8e64, 16
  %v2_901c = inttoptr i32 %v1_901c to i32*
  %v3_901c = load i32, i32* %v2_901c, align 4
  store i32 %v3_901c, i32* %r4.global-to-local, align 4
  %v0_9020 = call i32 @function_ebc8()
  store i32 %v0_9020, i32* %r0.global-to-local, align 4
  %v3_9024 = load i32, i32* %stack_var_-40, align 4
  %v5_902c = mul i32 %v3_9024, 24
  %v0_9030 = load i32, i32* %r4.global-to-local, align 4
  %v1_9034 = load i32, i32* @sb, align 4
  %v2_9034 = add i32 %v1_9034, %v5_902c
  store i32 %v2_9034, i32* %r1.global-to-local, align 4
  %v1_9038 = and i32 %v0_9030, 65280
  store i32 %v1_9038, i32* %r3.global-to-local, align 4
  %v1_9030 = udiv i32 %v0_9030, 256
  %v3_903c = and i32 %v1_9030, 65280
  store i32 %v3_903c, i32* %r2.global-to-local, align 4
  %v3_9040 = mul i32 %v0_9030, 16777216
  store i32 %v3_9040, i32* %ip.global-to-local, align 4
  %v1_9044 = add i32 %v2_9034, 20
  %v2_9044 = inttoptr i32 %v1_9044 to i8*
  %v3_9044 = load i8, i8* %v2_9044, align 1
  %v4_9044 = zext i8 %v3_9044 to i32
  store i32 %v4_9044, i32* %lr.global-to-local, align 4
  %v4_9048 = mul nuw nsw i32 %v1_9038, 256
  %v5_9048 = or i32 %v4_9048, %v3_9040
  store i32 %v5_9048, i32* %ip.global-to-local, align 4
  %v2_9050 = call i32 @llvm.bswap.i32(i32 %v0_9030)
  %v7_9054 = lshr i32 %v0_9020, %v4_9044
  %v8_9054 = add i32 %v7_9054, %v2_9050
  %v3_9060 = mul i32 %v8_9054, 16777216
  %v1_9064 = and i32 %v8_9054, 65280
  store i32 %v1_9064, i32* %r0.global-to-local, align 4
  store i32 %v6_8b18, i32* %r2.global-to-local, align 4
  %v4_9070 = mul nuw nsw i32 %v1_9064, 256
  %v5_9070 = or i32 %v4_9070, %v3_9060
  store i32 %v5_9070, i32* %r1.global-to-local, align 4
  %v2_9074 = call i32 @llvm.bswap.i32(i32 %v8_9054)
  store i32 %v2_9074, i32* %r3.global-to-local, align 4
  store i1 %v7_8e8c, i1* %cpsr_z.global-to-local, align 1
  %v1_907c = load i32, i32* @r5, align 4
  %v2_907c = add i32 %v1_907c, 16
  %v3_907c = inttoptr i32 %v2_907c to i32*
  store i32 %v2_9074, i32* %v3_907c, align 4
  br i1 %v2_8e8c, label %dec_label_pc_9084, label %dec_label_pc_8e94

dec_label_pc_9084:                                ; preds = %dec_label_pc_901c, %dec_label_pc_8e88
  %v0_9084 = call i32 @function_ebc8()
  store i32 %v0_9084, i32* %r0.global-to-local, align 4
  store i32 %v3_8b7c, i32* %r3.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_9094, i1* %cpsr_z.global-to-local, align 1
  %v1_9098 = load i32, i32* @r5, align 4
  %v2_9098 = add i32 %v1_9098, 12
  %v3_9098 = inttoptr i32 %v2_9098 to i32*
  store i32 %v0_9084, i32* %v3_9098, align 4
  br i1 %v3_9094, label %dec_label_pc_90a0, label %dec_label_pc_9084.dec_label_pc_8ea8_crit_edge

dec_label_pc_9084.dec_label_pc_8ea8_crit_edge:    ; preds = %dec_label_pc_9084
  %v1_8eac.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8ea8

dec_label_pc_90a0:                                ; preds = %dec_label_pc_9084, %dec_label_pc_8e94
  %v0_90a0 = call i32 @function_ebc8()
  %v3_90a8 = urem i32 %v0_90a0, 65536
  store i32 %v3_90a8, i32* %r0.global-to-local, align 4
  %v1_90b0 = sub nsw i32 999, %v3_90a8
  store i32 %v1_90b0, i32* %r2.global-to-local, align 4
  %v3_90b4 = sdiv i32 %v1_90b0, 256
  store i32 %v3_90b4, i32* %r1.global-to-local, align 4
  %v3_90b839 = udiv i32 %v3_90a8, 256
  store i32 %v3_90b839, i32* %r3.global-to-local, align 4
  %v1_90bc = trunc i32 %v3_90b839 to i8
  %v2_90bc = load i32, i32* @r5, align 4
  %v3_90bc = add i32 %v2_90bc, 5
  %v4_90bc = inttoptr i32 %v3_90bc to i8*
  store i8 %v1_90bc, i8* %v4_90bc, align 1
  %v0_90c0 = load i32, i32* %r0.global-to-local, align 4
  %v1_90c0 = trunc i32 %v0_90c0 to i8
  %v2_90c0 = load i32, i32* @r5, align 4
  %v3_90c0 = add i32 %v2_90c0, 4
  %v4_90c0 = inttoptr i32 %v3_90c0 to i8*
  store i8 %v1_90c0, i8* %v4_90c0, align 1
  %v0_90c4 = load i32, i32* %r1.global-to-local, align 4
  %v1_90c4 = trunc i32 %v0_90c4 to i8
  %v2_90c4 = load i32, i32* @r6, align 4
  %v3_90c4 = add i32 %v2_90c4, 5
  %v4_90c4 = inttoptr i32 %v3_90c4 to i8*
  store i8 %v1_90c4, i8* %v4_90c4, align 1
  store i32 %v3_8b80, i32* %r1.global-to-local, align 4
  %v1_90cc = load i32, i32* @r4, align 4
  %v9_90cc = icmp eq i32 %v3_8b80, %v1_90cc
  store i1 %v9_90cc, i1* %cpsr_z.global-to-local, align 1
  %v0_90d0 = load i32, i32* %r2.global-to-local, align 4
  %v1_90d0 = trunc i32 %v0_90d0 to i8
  %v2_90d0 = load i32, i32* @r6, align 4
  %v3_90d0 = add i32 %v2_90d0, 4
  %v4_90d0 = inttoptr i32 %v3_90d0 to i8*
  store i8 %v1_90d0, i8* %v4_90d0, align 1
  %v0_90d4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90d4, label %dec_label_pc_90d8, label %dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge

dec_label_pc_90a0.dec_label_pc_8eb4_crit_edge:    ; preds = %dec_label_pc_90a0
  %v1_8eb8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_8eb4

dec_label_pc_90d8:                                ; preds = %dec_label_pc_90a0, %dec_label_pc_8ea8
  %v0_90d8 = call i32 @function_ebc8()
  %v1_90d8 = trunc i32 %v0_90d8 to i8
  store i32 %v0_90d8, i32* %r0.global-to-local, align 4
  store i32 %v3_8b84, i32* %r2.global-to-local, align 4
  %v4_90e0 = sdiv i32 %v0_90d8, 256
  store i32 %v4_90e0, i32* %r3.global-to-local, align 4
  %v1_90e4 = load i32, i32* @r4, align 4
  %v9_90e4 = icmp eq i32 %v3_8b84, %v1_90e4
  store i1 %v9_90e4, i1* %cpsr_z.global-to-local, align 1
  %v3_90e8 = load i32, i32* @r5, align 4
  %v4_90e8 = add i32 %v3_90e8, 58
  %v5_90e8 = inttoptr i32 %v4_90e8 to i8*
  store i8 %v1_90d8, i8* %v5_90e8, align 1
  %v0_90ec = load i32, i32* %r3.global-to-local, align 4
  %v1_90ec = trunc i32 %v0_90ec to i8
  %v2_90ec = load i32, i32* @r7, align 4
  %v3_90ec = add i32 %v2_90ec, 1
  %v4_90ec = inttoptr i32 %v3_90ec to i8*
  store i8 %v1_90ec, i8* %v4_90ec, align 1
  %v0_90f0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_90f0, label %dec_label_pc_90f4, label %dec_label_pc_8ec0

dec_label_pc_90f4:                                ; preds = %dec_label_pc_90d8, %dec_label_pc_8eb4
  %v0_90f4 = call i32 @function_ebc8()
  %v1_90f4 = trunc i32 %v0_90f4 to i8
  store i32 %v0_90f4, i32* %r0.global-to-local, align 4
  %v4_90f843 = udiv i32 %v0_90f4, 256
  %v1_90fc = trunc i32 %v4_90f843 to i8
  %v2_90fc = load i32, i32* @r7, align 4
  %v3_90fc = add i32 %v2_90fc, 3
  %v4_90fc = inttoptr i32 %v3_90fc to i8*
  store i8 %v1_90fc, i8* %v4_90fc, align 1
  store i32 %v1_8b74, i32* %r3.global-to-local, align 4
  store i1 %v2_9104, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9104, label %bb108, label %bb107

bb107:                                            ; preds = %dec_label_pc_90f4
  %v1_9108 = load i32, i32* @r5, align 4
  %v2_9108 = add i32 %v1_9108, 16
  %v3_9108 = inttoptr i32 %v2_9108 to i32*
  %v4_9108 = load i32, i32* %v3_9108, align 4
  store i32 %v4_9108, i32* %r3.global-to-local, align 4
  br label %bb108

bb108:                                            ; preds = %dec_label_pc_90f4, %bb107
  %v3_910c = load i32, i32* @r7, align 4
  %v4_910c = add i32 %v3_910c, 2
  %v5_910c = inttoptr i32 %v4_910c to i8*
  store i8 %v1_90f4, i8* %v5_910c, align 1
  %v0_9110 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9110, label %dec_label_pc_9118, label %bb109

bb109:                                            ; preds = %bb108
  %v1_9110 = load i32, i32* %r3.global-to-local, align 4
  %v2_9110 = load i32, i32* @r6, align 4
  %v3_9110 = add i32 %v2_9110, 16
  %v4_9110 = inttoptr i32 %v3_9110 to i32*
  store i32 %v1_9110, i32* %v4_9110, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9118:                                ; preds = %dec_label_pc_8ec0, %bb108
  %v0_9118 = call i32 @function_ebc8()
  store i32 %v0_9118, i32* %r0.global-to-local, align 4
  %v1_911c = load i32, i32* @r6, align 4
  %v2_911c = add i32 %v1_911c, 16
  %v3_911c = inttoptr i32 %v2_911c to i32*
  store i32 %v0_9118, i32* %v3_911c, align 4
  br label %dec_label_pc_8ed4

dec_label_pc_9124:                                ; preds = %dec_label_pc_8ed4
  %v0_9124 = load i32, i32* @r7, align 4
  %v1_9124 = add i32 %v0_9124, 8
  store i32 %v1_9124, i32* %r0.global-to-local, align 4
  store i32 %v6_8ac4, i32* @r1, align 4
  %v1_912c = inttoptr i32 %v1_9124 to i8*
  %v2_912c = call i32 @function_ed48(i8* %v1_912c)
  store i32 %v2_912c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_8f38

dec_label_pc_9134:                                ; preds = %dec_label_pc_8b64
  %v1_913c = add i32 %v6_8ac4, 8
  store i32 %v1_913c, i32* %r1.global-to-local, align 4
  %v1_9140 = add i32 %v6_8ac4, 66
  store i32 %v1_9140, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_8e44.preheader

; uselistorder directives
  uselistorder i32 %v1_9140, { 1, 0 }
  uselistorder i32 %v1_913c, { 1, 0 }
  uselistorder i32 %v0_90f4, { 0, 2, 1 }
  uselistorder i32 %v0_90d8, { 0, 2, 1 }
  uselistorder i32 %v3_90a8, { 0, 2, 1 }
  uselistorder i32 %v2_9074, { 1, 0 }
  uselistorder i32 %v8_9054, { 1, 2, 0 }
  uselistorder i32 %v3_9040, { 1, 0 }
  uselistorder i32 %v0_9030, { 2, 0, 1, 3 }
  uselistorder i32 %v1_8ffc, { 1, 2, 0 }
  uselistorder i32 %v1_8ff8, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_8f9c, { 1, 0, 2 }
  uselistorder i32 %v4_8f98, { 0, 2, 1 }
  uselistorder i32 %v0_8f78, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_8f68, { 0, 2, 1 }
  uselistorder i32 %v4_8f4c, { 1, 0 }
  uselistorder i32 %v7_8e70, { 2, 1, 0, 3 }
  uselistorder i32 %v0_8e44, { 1, 0 }
  uselistorder i1 %v7_8e8c, { 2, 1, 0 }
  uselistorder i1 %v2_9104, { 2, 3, 1, 0 }
  uselistorder i1 %v3_9094, { 1, 0, 2, 3 }
  uselistorder i32 %v0_8dcc, { 1, 0, 2 }
  uselistorder i32 %v3_8c54, { 1, 0, 2 }
  uselistorder i32 %v3_8c34, { 1, 0 }
  uselistorder i32 %tmp91, { 1, 0 }
  uselistorder i32 %v1_8bd8, { 1, 0 }
  uselistorder i32 %v1_8bd4, { 2, 1, 0 }
  uselistorder i32 %v1_8bc0, { 1, 0 }
  uselistorder i32 %v1_8bbc, { 2, 1, 0 }
  uselistorder i32 %v1_8bb4, { 0, 2, 1 }
  uselistorder i32 %v3_8bac, { 2, 1, 0 }
  uselistorder i32 %v0_8b88, { 1, 0, 2 }
  uselistorder i32 %v3_8b7c, { 2, 1, 3, 0 }
  uselistorder i32 %v1_8b74, { 3, 2, 4, 0, 1 }
  uselistorder i32 %v3_8b70, { 1, 0 }
  uselistorder i32 %v0_8b70, { 2, 1, 0 }
  uselistorder i32 %v0_8b68, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_8b64, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_8b5c, { 1, 0 }
  uselistorder i1 %v7_8b30, { 1, 0 }
  uselistorder i32 %v3_8b2c, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_8b18, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_8ae4, { 1, 2, 3, 0 }
  uselistorder i32 %v6_8ac4, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_8a78, { 1, 2, 0 }
  uselistorder i32 %v6_8a4c, { 3, 2, 1, 4, 0 }
  uselistorder i32 %v6_8a10, { 1, 2, 0 }
  uselistorder i32 %v2_89f8, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_89dc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 2, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 31, 32, 34, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 46, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 37, 39, 40, 42, 41, 43, 44, 46, 45, 48, 47, 0 }
  uselistorder i32* %r0.global-to-local, { 5, 4, 6, 9, 10, 7, 8, 12, 11, 13, 16, 14, 15, 17, 3, 18, 19, 21, 20, 22, 23, 24, 25, 27, 26, 31, 28, 29, 30, 34, 32, 33, 2, 1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 }
  uselistorder label %dec_label_pc_9118, { 1, 0 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %dec_label_pc_9014, { 1, 0 }
  uselistorder label %dec_label_pc_8f38, { 1, 0 }
  uselistorder label %dec_label_pc_8ed4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_8e44.preheader, { 1, 0 }
  uselistorder label %bb105, { 1, 0 }
  uselistorder label %bb104, { 1, 0 }
  uselistorder label %bb102, { 1, 0 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %bb98, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
}

define i32 @function_9154(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9154:
  %cpsr_z.global-to-local = alloca i1, align 1
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_9154 = load i32, i32* @r4, align 4
  %v15_9154 = load i32, i32* @r8, align 4
  %v1_9158 = urem i32 %arg1, 256
  store i32 %v1_9158, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 %v1_9158, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9170 = urem i32 %arg3, 256
  store i32 %v1_9170, i32* @r4, align 4
  %v2_9174 = call i32 @function_12a18(i32 %v1_9158, i32 4)
  %v0_9178 = load i32, i32* @r5, align 4
  store i32 %v0_9178, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9188 = load i32, i32* @r4, align 4
  store i32 %v0_9188, i32* %r0.global-to-local, align 4
  %v5_918c = inttoptr i32 %v0_9178 to i32*
  %v6_918c = call i32 @function_85e0(i32 %v0_9188, i32* %v5_918c, i32 2, i32 0, i32 %v2_9174)
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_91a4 = load i32, i32* @r5, align 4
  store i32 %v0_91a4, i32* %r1.global-to-local, align 4
  %v0_91a8 = load i32, i32* @r4, align 4
  store i32 %v0_91a8, i32* %r0.global-to-local, align 4
  %v5_91ac = trunc i32 %v6_918c to i8
  %v6_91b0 = inttoptr i32 %v0_91a4 to i32*
  %v7_91b0 = call i32 @function_85e0(i32 %v0_91a8, i32* %v6_91b0, i32 3, i32 65535, i32 %v6_918c)
  %v0_91b4 = load i32, i32* @r5, align 4
  store i32 %v0_91b4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_91b0, i32* @r7, align 4
  %v0_91c4 = load i32, i32* @r4, align 4
  store i32 %v0_91c4, i32* %r0.global-to-local, align 4
  %v5_91c8 = inttoptr i32 %v0_91b4 to i32*
  %v6_91c8 = call i32 @function_85e0(i32 %v0_91c4, i32* %v5_91c8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v0_91d4 = load i32, i32* @r5, align 4
  store i32 %v0_91d4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_91e0 = load i32, i32* @r4, align 4
  store i32 %v0_91e0, i32* %r0.global-to-local, align 4
  %v5_91e4 = trunc i32 %v6_91c8 to i8
  %v6_91e8 = inttoptr i32 %v0_91d4 to i32*
  %v7_91e8 = call i32 @function_85e0(i32 %v0_91e0, i32* %v6_91e8, i32 5, i32 1, i32 %v6_91c8)
  %v1_91f4 = urem i32 %v7_91e8, 256
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_9200 = load i32, i32* @r5, align 4
  store i32 %v0_9200, i32* %r1.global-to-local, align 4
  %v0_9204 = load i32, i32* @r4, align 4
  store i32 %v0_9204, i32* %r0.global-to-local, align 4
  %v5_920c = inttoptr i32 %v0_9200 to i32*
  %v6_920c = call i32 @function_85e0(i32 %v0_9204, i32* %v5_920c, i32 6, i32 65535, i32 %v1_91f4)
  %v0_9214 = load i32, i32* @r5, align 4
  store i32 %v0_9214, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_920c, i32* @sl, align 4
  %v0_9224 = load i32, i32* @r4, align 4
  store i32 %v0_9224, i32* %r0.global-to-local, align 4
  %v5_9228 = inttoptr i32 %v0_9214 to i32*
  %v6_9228 = call i32 @function_85e0(i32 %v0_9224, i32* %v5_9228, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_922c = load i32, i32* @r5, align 4
  store i32 %v0_922c, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_9228, i32* @r8, align 4
  %v0_923c = load i32, i32* @r4, align 4
  store i32 %v0_923c, i32* %r0.global-to-local, align 4
  %v5_9240 = inttoptr i32 %v0_922c to i32*
  %v6_9240 = call i32 @function_85e0(i32 %v0_923c, i32* %v5_9240, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9250 = load i32, i32* @r5, align 4
  store i32 %v0_9250, i32* %r1.global-to-local, align 4
  %v0_9254 = load i32, i32* @r4, align 4
  store i32 %v0_9254, i32* %r0.global-to-local, align 4
  %v5_9258 = inttoptr i32 %v0_9250 to i32*
  %v6_9258 = call i32 @function_85e0(i32 %v0_9254, i32* %v5_9258, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9260 = urem i32 %v6_9258, 256
  %v0_9264 = load i32, i32* @r5, align 4
  store i32 %v0_9264, i32* %r1.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9270 = load i32, i32* @r4, align 4
  store i32 %v0_9270, i32* %r0.global-to-local, align 4
  %v5_9278 = inttoptr i32 %v0_9264 to i32*
  %v6_9278 = call i32 @function_85e0(i32 %v0_9270, i32* %v5_9278, i32 19, i32 0, i32 %v1_9260)
  %v0_9280 = load i32, i32* @r5, align 4
  store i32 %v0_9280, i32* %r1.global-to-local, align 4
  %v2_9284 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_9284, i32* %r3.global-to-local, align 4
  store i32 %v6_9278, i32* @r6, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_9290 = load i32, i32* @r4, align 4
  store i32 %v0_9290, i32* %r0.global-to-local, align 4
  %v5_9294 = inttoptr i32 %v0_9280 to i32*
  %v6_9294 = call i32 @function_85e0(i32 %v0_9290, i32* %v5_9294, i32 25, i32 %v2_9284, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_92a8 = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v7_92ac = icmp eq i32 %v3_92a8, -1
  store i1 %v7_92ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92ac, label %dec_label_pc_972c, label %dec_label_pc_92b8

dec_label_pc_92b8:                                ; preds = %dec_label_pc_9154
  store i32 1, i32* %stack_var_-40, align 4
  %v6_92c0 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_92c0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_92d4 = call i32 @function_126fc(i32 %v3_92a8, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_92d4, i32* %r0.global-to-local, align 4
  %v7_92d8 = icmp eq i32 %v6_92d4, -1
  store i1 %v7_92d8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_92d8, label %dec_label_pc_9724, label %dec_label_pc_92e0

dec_label_pc_92e0:                                ; preds = %dec_label_pc_92b8
  %v0_92e0 = load i32, i32* @sl, align 4
  %v0_92ec = load i32, i32* @r8, align 4
  %v3_92ec = mul i32 %v0_92ec, 65536
  store i32 %v3_92ec, i32* %r8.global-to-local, align 4
  %v0_92f0 = load i32, i32* @r7, align 4
  %v0_92f4 = load i32, i32* @r6, align 4
  %v1_92f4 = urem i32 %v0_92f4, 256
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_92fc = urem i32 %v0_92e0, 65536
  store i32 %v3_92fc, i32* %r2.global-to-local, align 4
  %v3_9300 = urem i32 %v0_92ec, 65536
  store i32 %v3_9300, i32* %r3.global-to-local, align 4
  %v0_9304 = load i32, i32* @fp, align 4
  %v2_9304 = icmp eq i32 %v0_9304, 0
  store i1 %v2_9304, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9314 = urem i32 %v0_92f0, 65536
  store i32 %v3_9314, i32* @sl, align 4
  %tmp84 = icmp slt i32 %v0_9304, 1
  br i1 %tmp84, label %dec_label_pc_9850, label %dec_label_pc_9324

dec_label_pc_9324:                                ; preds = %dec_label_pc_92e0
  %v3_9328 = mul i32 %v6_9240, 65536
  %v1_932c = add i32 %v3_9328, 3407872
  %v3_9334 = udiv i32 %v1_932c, 256
  %v0_92f0.not = or i32 %v0_92f0, -65536
  %v1_9344 = xor i32 %v0_92f0.not, 65535
  %v1_9348 = urem i32 %v0_92ec, 256
  %tmp85 = mul nsw i32 %v1_9344, 256
  %v1_9360 = and i32 %v3_9334, 65280
  %v1_9364 = add i32 %v3_9328, 524288
  %v4_9368 = udiv i32 %v1_932c, 16777216
  %v5_9368 = or i32 %v1_9360, %v4_9368
  store i32 %v5_9368, i32* %r0.global-to-local, align 4
  %v1_936c = add i32 %v3_9328, 1835008
  %v1_9374 = and i32 %tmp85, 65280
  store i32 %v1_9374, i32* @lr, align 4
  %tmp86 = udiv i32 %v1_9344, 256
  %tmp87 = udiv i32 %v0_92f0, 256
  %v5_9388 = trunc i32 %tmp86 to i8
  %tmp88 = udiv i32 %v0_92e0, 256
  %sext29 = mul i32 %tmp87, 16777216
  %v4_93a8 = sdiv i32 %sext29, 16777216
  %v3_93b4 = mul nuw nsw i32 %v1_9348, 256
  store i32 %v3_93b4, i32* @r5, align 4
  %v3_93b8 = udiv i32 %v1_9364, 256
  %tmp89 = udiv i32 %v0_92ec, 256
  %v4_93c0 = urem i32 %tmp89, 256
  %v5_93c0 = or i32 %v4_93c0, %v3_93b4
  store i32 %v5_93c0, i32* @r7, align 4
  %v3_93c4 = ashr i32 %sext29, 31
  %v3_93d0 = sdiv i32 %v1_936c, 16777216
  %v1_93d4 = and i32 %v3_93b8, 65280
  store i32 %v1_93d4, i32* @r6, align 4
  %sext30 = mul i32 %tmp88, 16777216
  %v4_93dc = sdiv i32 %sext30, 16777216
  %v3_93e0 = ashr i32 %v1_936c, 31
  %v3_93e4 = udiv i32 %v1_9344, 65536
  %v4_93e8 = udiv i32 %v1_9364, 16777216
  %v5_93e8 = or i32 %v1_93d4, %v4_93e8
  store i32 %v5_93e8, i32* %r8.global-to-local, align 4
  %v3_93f4 = ashr i32 %sext30, 31
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v1_9348, i32* %r2.global-to-local, align 4
  %v3_93fc41 = udiv i32 %v1_93d4, 256
  store i32 %v3_93fc41, i32* %r3.global-to-local, align 4
  %v5_9404 = trunc i32 %v3_93f4 to i8
  store i32 0, i32* @r4, align 4
  %sext = mul i32 %v1_932c, 256
  %v4_9468 = sdiv i32 %sext, 16777216
  %sext16 = mul nuw i32 %v4_9368, 16777216
  %v4_9478 = sdiv i32 %sext16, 16777216
  %v2_954c = icmp eq i32 %v1_92f4, 0
  %sext20 = mul i32 %v1_9364, 256
  %v4_956c = sdiv i32 %sext20, 16777216
  %sext21 = mul i32 %v0_92ec, 16777216
  %v7_9584 = sdiv i32 %sext21, 16777216
  %v1_9474 = trunc i32 %v4_9468 to i8
  br label %dec_label_pc_9414

dec_label_pc_9414:                                ; preds = %bb96, %dec_label_pc_9324
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_9420 = call i32 @function_12a18(i32 1510, i32 4)
  store i32 %v2_9420, i32* %r0.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v3_9428 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9428, i32* %r3.global-to-local, align 4
  %v2_942c = load i32, i32* @r4, align 4
  %v5_942c = mul i32 %v2_942c, 4
  %v6_942c = add i32 %v5_942c, %v2_9174
  %v7_942c = inttoptr i32 %v6_942c to i32*
  store i32 %v2_9420, i32* %v7_942c, align 4
  %v0_9430 = load i32, i32* %r1.global-to-local, align 4
  %v1_9430 = load i32, i32* %r3.global-to-local, align 4
  %v4_9430 = mul i32 %v1_9430, 4
  %v5_9430 = add i32 %v4_9430, %v0_9430
  %v6_9430 = inttoptr i32 %v5_9430 to i32*
  %v7_9430 = load i32, i32* %v6_9430, align 4
  store i32 %v7_9430, i32* %r4.global-to-local, align 4
  %v1_9434 = inttoptr i32 %v7_9430 to i8*
  %v2_9434 = load i8, i8* %v1_9434, align 1
  %tmp = urem i8 %v2_9434, 16
  %v1_9438 = zext i8 %tmp to i32
  %v1_943c = or i32 %v1_9438, 64
  store i32 %v1_943c, i32* %r2.global-to-local, align 4
  %v1_9440 = trunc i32 %v1_943c to i8
  store i8 %v1_9440, i8* %v1_9434, align 1
  %v0_9444 = load i32, i32* %r4.global-to-local, align 4
  %v1_9444 = inttoptr i32 %v0_9444 to i8*
  %v2_9444 = load i8, i8* %v1_9444, align 1
  %v1_9448 = and i8 %v2_9444, -16
  %v1_944c = or i8 %v1_9448, 5
  store i32 %v1_91f4, i32* %r2.global-to-local, align 4
  store i8 %v1_944c, i8* %v1_9444, align 1
  %v2_945c = load i32, i32* %r4.global-to-local, align 4
  %v3_945c = add i32 %v2_945c, 1
  %v4_945c = inttoptr i32 %v3_945c to i8*
  store i8 %v5_91ac, i8* %v4_945c, align 1
  store i32 %v6_91c8, i32* %r1.global-to-local, align 4
  %v2_9464 = load i32, i32* %r4.global-to-local, align 4
  %v3_9464 = add i32 %v2_9464, 8
  %v4_9464 = inttoptr i32 %v3_9464 to i8*
  store i8 %v5_91e4, i8* %v4_9464, align 1
  store i32 %v4_9468, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  %v0_9470 = load i32, i32* %r2.global-to-local, align 4
  %v9_9470 = icmp eq i32 %v0_9470, 0
  store i1 %v9_9470, i1* %cpsr_z.global-to-local, align 1
  %v2_9474 = load i32, i32* %r4.global-to-local, align 4
  %v3_9474 = add i32 %v2_9474, 3
  %v4_9474 = inttoptr i32 %v3_9474 to i8*
  store i8 %v1_9474, i8* %v4_9474, align 1
  store i32 %v4_9478, i32* %r2.global-to-local, align 4
  %v0_947c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_947c, label %.thread23, label %.thread

.thread:                                          ; preds = %dec_label_pc_9414
  %v1_947c = load i32, i32* %r0.global-to-local, align 4
  store i32 %v1_947c, i32* %r3.global-to-local, align 4
  %v2_9480 = trunc i32 %v1_947c to i8
  %v3_9480 = load i32, i32* %r4.global-to-local, align 4
  %v4_9480 = add i32 %v3_9480, 7
  %v5_9480 = inttoptr i32 %v4_9480 to i8*
  store i8 %v2_9480, i8* %v5_9480, align 1
  %v0_9484.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9484.pr.pr, label %.thread23, label %bb

bb:                                               ; preds = %.thread
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_9488 = load i32, i32* %r4.global-to-local, align 4
  %v4_9488 = add i32 %v3_9488, 6
  %v5_9488 = inttoptr i32 %v4_9488 to i8*
  store i8 64, i8* %v5_9488, align 1
  br label %.thread23

.thread23:                                        ; preds = %dec_label_pc_9414, %.thread, %bb
  %v0_948c = load i32, i32* %r2.global-to-local, align 4
  %v1_948c = trunc i32 %v0_948c to i8
  %v2_948c = load i32, i32* %r4.global-to-local, align 4
  %v3_948c = add i32 %v2_948c, 2
  %v4_948c = inttoptr i32 %v3_948c to i8*
  store i8 %v1_948c, i8* %v4_948c, align 1
  store i32 %v3_93c4, i32* %r2.global-to-local, align 4
  store i32 %v4_93a8, i32* %r1.global-to-local, align 4
  %v2_949c = load i32, i32* %r4.global-to-local, align 4
  %v3_949c = add i32 %v2_949c, 9
  %v4_949c = inttoptr i32 %v3_949c to i8*
  store i8 47, i8* %v4_949c, align 1
  %v0_94a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_94a0 = trunc i32 %v0_94a0 to i8
  %v2_94a0 = load i32, i32* %r4.global-to-local, align 4
  %v3_94a0 = add i32 %v2_94a0, 5
  %v4_94a0 = inttoptr i32 %v3_94a0 to i8*
  store i8 %v1_94a0, i8* %v4_94a0, align 1
  %v3_94a4 = load i32, i32* %stack_var_-40, align 4
  %v5_94ac = mul i32 %v3_94a4, 24
  store i32 %v5_94ac, i32* %r3.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v1_94b4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94b4 = add i32 %v1_94b4, 12
  %v3_94b4 = inttoptr i32 %v2_94b4 to i32*
  store i32 %v6_9294, i32* %v3_94b4, align 4
  %v0_94b8 = load i32, i32* %r3.global-to-local, align 4
  %v1_94b8 = load i32, i32* @sb, align 4
  %v2_94b8 = add i32 %v1_94b8, %v0_94b8
  store i32 %v2_94b8, i32* %r3.global-to-local, align 4
  %v0_94bc = load i32, i32* %r1.global-to-local, align 4
  %v1_94bc = trunc i32 %v0_94bc to i8
  %v2_94bc = load i32, i32* %r4.global-to-local, align 4
  %v3_94bc = add i32 %v2_94bc, 4
  %v4_94bc = inttoptr i32 %v3_94bc to i8*
  store i8 %v1_94bc, i8* %v4_94bc, align 1
  %v0_94c0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94c0 = add i32 %v0_94c0, 16
  %v2_94c0 = inttoptr i32 %v1_94c0 to i32*
  %v3_94c0 = load i32, i32* %v2_94c0, align 4
  store i32 %v3_94c0, i32* %r2.global-to-local, align 4
  %v0_94c4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94c4 = add i32 %v0_94c4, 20
  store i32 %v1_94c4, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r3.global-to-local, align 4
  %v0_94cc = load i32, i32* %r0.global-to-local, align 4
  %v1_94cc = trunc i32 %v0_94cc to i8
  %v3_94cc = add i32 %v0_94c4, 23
  %v4_94cc = inttoptr i32 %v3_94cc to i8*
  store i8 %v1_94cc, i8* %v4_94cc, align 1
  %v0_94d0 = load i32, i32* %r3.global-to-local, align 4
  %v1_94d0 = trunc i32 %v0_94d0 to i8
  %v2_94d0 = load i32, i32* %r1.global-to-local, align 4
  %v3_94d0 = add i32 %v2_94d0, 2
  %v4_94d0 = inttoptr i32 %v3_94d0 to i8*
  store i8 %v1_94d0, i8* %v4_94d0, align 1
  %v0_94d4 = load i32, i32* %r4.global-to-local, align 4
  %v1_94d4 = add i32 %v0_94d4, 24
  %v2_94d4 = inttoptr i32 %v1_94d4 to i8*
  %v3_94d4 = load i8, i8* %v2_94d4, align 1
  %tmp104 = urem i8 %v3_94d4, 16
  %v1_94d8 = zext i8 %tmp104 to i32
  %v1_94dc = or i32 %v1_94d8, 64
  store i32 %v1_94dc, i32* %r3.global-to-local, align 4
  %v1_94e0 = trunc i32 %v1_94dc to i8
  store i8 %v1_94e0, i8* %v2_94d4, align 1
  %v0_94e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_94e4 = load i32, i32* %r4.global-to-local, align 4
  %v2_94e4 = add i32 %v1_94e4, 16
  %v3_94e4 = inttoptr i32 %v2_94e4 to i32*
  store i32 %v0_94e4, i32* %v3_94e4, align 4
  %v0_94e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_94e8 = add i32 %v0_94e8, 24
  %v2_94e8 = inttoptr i32 %v1_94e8 to i8*
  %v3_94e8 = load i8, i8* %v2_94e8, align 1
  %v1_94ec = and i8 %v3_94e8, -16
  %v1_94f0 = or i8 %v1_94ec, 5
  store i8 %v1_94f0, i8* %v2_94e8, align 1
  %v0_94fc = load i32, i32* %r4.global-to-local, align 4
  %v1_94fc = add i32 %v0_94fc, 24
  store i32 %v1_94fc, i32* @r5, align 4
  %v3_9500 = add i32 %v0_94fc, 25
  %v4_9500 = inttoptr i32 %v3_9500 to i8*
  store i8 %v5_91ac, i8* %v4_9500, align 1
  store i32 %v3_93d0, i32* %r1.global-to-local, align 4
  store i32 %tmp86, i32* %r3.global-to-local, align 4
  store i32 %v3_93e0, i32* %r2.global-to-local, align 4
  %v2_9510 = load i32, i32* @r5, align 4
  %v3_9510 = add i32 %v2_9510, 4
  %v4_9510 = inttoptr i32 %v3_9510 to i8*
  store i8 %v5_9388, i8* %v4_9510, align 1
  %v0_9514 = load i32, i32* %r1.global-to-local, align 4
  %v1_9514 = trunc i32 %v0_9514 to i8
  %v2_9514 = load i32, i32* @r5, align 4
  %v3_9514 = add i32 %v2_9514, 2
  %v4_9514 = inttoptr i32 %v3_9514 to i8*
  store i8 %v1_9514, i8* %v4_9514, align 1
  %v0_9518 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9518, label %bb91, label %bb90

bb90:                                             ; preds = %.thread23
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb91

bb91:                                             ; preds = %.thread23, %bb90
  store i32 %v3_93e4, i32* %r1.global-to-local, align 4
  %v0_9520 = load i32, i32* %r2.global-to-local, align 4
  %v1_9520 = trunc i32 %v0_9520 to i8
  %v2_9520 = load i32, i32* @r5, align 4
  %v3_9520 = add i32 %v2_9520, 3
  %v4_9520 = inttoptr i32 %v3_9520 to i8*
  store i8 %v1_9520, i8* %v4_9520, align 1
  store i32 %v6_91c8, i32* %r2.global-to-local, align 4
  %v0_9528 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9528, label %bb93, label %bb92

bb92:                                             ; preds = %bb91
  %v1_9528 = load i32, i32* %r3.global-to-local, align 4
  %v2_9528 = trunc i32 %v1_9528 to i8
  %v3_9528 = load i32, i32* @r5, align 4
  %v4_9528 = add i32 %v3_9528, 6
  %v5_9528 = inttoptr i32 %v4_9528 to i8*
  store i8 %v2_9528, i8* %v5_9528, align 1
  br label %bb93

bb93:                                             ; preds = %bb91, %bb92
  store i32 17, i32* %r3.global-to-local, align 4
  %v0_9530 = load i32, i32* %r1.global-to-local, align 4
  %v1_9530 = trunc i32 %v0_9530 to i8
  %v2_9530 = load i32, i32* @r5, align 4
  %v3_9530 = add i32 %v2_9530, 5
  %v4_9530 = inttoptr i32 %v3_9530 to i8*
  store i8 %v1_9530, i8* %v4_9530, align 1
  %v0_9534 = load i32, i32* %r2.global-to-local, align 4
  %v1_9534 = trunc i32 %v0_9534 to i8
  %v2_9534 = load i32, i32* @r5, align 4
  %v3_9534 = add i32 %v2_9534, 8
  %v4_9534 = inttoptr i32 %v3_9534 to i8*
  store i8 %v1_9534, i8* %v4_9534, align 1
  %v0_9538 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9538, label %bb95, label %bb94

bb94:                                             ; preds = %bb93
  %v1_9538 = load i32, i32* %r0.global-to-local, align 4
  %v2_9538 = trunc i32 %v1_9538 to i8
  %v3_9538 = load i32, i32* @r5, align 4
  %v4_9538 = add i32 %v3_9538, 7
  %v5_9538 = inttoptr i32 %v4_9538 to i8*
  store i8 %v2_9538, i8* %v5_9538, align 1
  br label %bb95

bb95:                                             ; preds = %bb93, %bb94
  %v0_953c = load i32, i32* %r3.global-to-local, align 4
  %v1_953c = trunc i32 %v0_953c to i8
  %v2_953c = load i32, i32* @r5, align 4
  %v3_953c = add i32 %v2_953c, 9
  %v4_953c = inttoptr i32 %v3_953c to i8*
  store i8 %v1_953c, i8* %v4_953c, align 1
  %v0_9540 = call i32 @function_ebc8()
  store i32 %v0_9540, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r1.global-to-local, align 4
  store i1 %v2_954c, i1* %cpsr_z.global-to-local, align 1
  %v1_9550 = sub i32 1023, %v0_9540
  store i32 %v1_9550, i32* %r3.global-to-local, align 4
  br i1 %v2_954c, label %.thread24, label %.thread25

.thread24:                                        ; preds = %bb95
  %v2_9558 = load i32, i32* @r5, align 4
  %v3_9558 = add i32 %v2_9558, 16
  %v4_9558 = inttoptr i32 %v3_9558 to i32*
  store i32 %v1_9550, i32* %v4_9558, align 4
  br label %bb96

.thread25:                                        ; preds = %bb95
  %v1_9554 = load i32, i32* %r4.global-to-local, align 4
  %v2_9554 = add i32 %v1_9554, 16
  %v3_9554 = inttoptr i32 %v2_9554 to i32*
  %v4_9554 = load i32, i32* %v3_9554, align 4
  store i32 %v4_9554, i32* %r3.global-to-local, align 4
  %v2_955c = load i32, i32* @r5, align 4
  %v3_955c = add i32 %v2_955c, 16
  %v4_955c = inttoptr i32 %v3_955c to i32*
  store i32 %v4_9554, i32* %v4_955c, align 4
  br label %bb96

bb96:                                             ; preds = %.thread24, %.thread25
  store i32 %v4_93dc, i32* %r3.global-to-local, align 4
  %v0_9564 = load i32, i32* %r4.global-to-local, align 4
  %v1_9564 = add i32 %v0_9564, 44
  store i32 %v1_9564, i32* @r6, align 4
  %v1_9568 = load i32, i32* @r5, align 4
  %v2_9568 = add i32 %v1_9568, 12
  %v3_9568 = inttoptr i32 %v2_9568 to i32*
  store i32 %v0_9540, i32* %v3_9568, align 4
  store i32 %v4_956c, i32* %r2.global-to-local, align 4
  %v0_9570 = load i32, i32* %r3.global-to-local, align 4
  %v1_9570 = trunc i32 %v0_9570 to i8
  %v2_9570 = load i32, i32* @r6, align 4
  %v3_9570 = inttoptr i32 %v2_9570 to i8*
  store i8 %v1_9570, i8* %v3_9570, align 1
  %v3_9574 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9574, i32* %r3.global-to-local, align 4
  %v0_9578 = load i32, i32* %r2.global-to-local, align 4
  %v1_9578 = trunc i32 %v0_9578 to i8
  %v2_9578 = load i32, i32* @r6, align 4
  %v3_9578 = add i32 %v2_9578, 5
  %v4_9578 = inttoptr i32 %v3_9578 to i8*
  store i8 %v1_9578, i8* %v4_9578, align 1
  %v0_957c = load i32, i32* %r3.global-to-local, align 4
  %v1_957c = add i32 %v0_957c, 1
  store i32 %v1_957c, i32* @r4, align 4
  store i32 %v3_93f4, i32* %r1.global-to-local, align 4
  store i32 %v7_9584, i32* %r2.global-to-local, align 4
  %v1_9588 = load i32, i32* @fp, align 4
  %v9_9588 = icmp eq i32 %v1_957c, %v1_9588
  store i1 %v9_9588, i1* %cpsr_z.global-to-local, align 1
  %v2_958c = load i32, i32* @r6, align 4
  %v3_958c = add i32 %v2_958c, 1
  %v4_958c = inttoptr i32 %v3_958c to i8*
  store i8 %v5_9404, i8* %v4_958c, align 1
  %v0_9590 = load i32, i32* @r7, align 4
  %v1_9590 = trunc i32 %v0_9590 to i8
  %v2_9590 = load i32, i32* @r6, align 4
  %v3_9590 = add i32 %v2_9590, 2
  %v4_9590 = inttoptr i32 %v3_9590 to i8*
  store i8 %v1_9590, i8* %v4_9590, align 1
  %v0_9594 = load i32, i32* %r2.global-to-local, align 4
  %v1_9594 = trunc i32 %v0_9594 to i8
  %v2_9594 = load i32, i32* @r6, align 4
  %v3_9594 = add i32 %v2_9594, 3
  %v4_9594 = inttoptr i32 %v3_9594 to i8*
  store i8 %v1_9594, i8* %v4_9594, align 1
  %v0_9598 = load i32, i32* %r8.global-to-local, align 4
  %v1_9598 = trunc i32 %v0_9598 to i8
  %v2_9598 = load i32, i32* @r6, align 4
  %v3_9598 = add i32 %v2_9598, 4
  %v4_9598 = inttoptr i32 %v3_9598 to i8*
  store i8 %v1_9598, i8* %v4_9598, align 1
  %v0_959c = load i32, i32* @r4, align 4
  store i32 %v0_959c, i32* %stack_var_-40, align 4
  %v5_95a0 = icmp slt i32 %v1_957c, %v1_9588
  br i1 %v5_95a0, label %dec_label_pc_9414, label %dec_label_pc_95a4

dec_label_pc_95a4:                                ; preds = %bb96
  %v1_95ac = add i32 %v6_9240, 8
  store i32 %v1_95ac, i32* %r3.global-to-local, align 4
  %v1_95b0 = add i32 %v6_9240, 52
  store i32 %v1_95b0, i32* %r1.global-to-local, align 4
  %v0_95bc.pre.pre = load i32, i32* @fp, align 4
  br label %dec_label_pc_95bc.preheader

dec_label_pc_95bc.preheader:                      ; preds = %dec_label_pc_95a4, %dec_label_pc_9850
  %v0_95bc.pre = phi i32 [ %v0_95bc.pre.pre, %dec_label_pc_95a4 ], [ %v0_9304, %dec_label_pc_9850 ]
  %stack_var_-120.0.ph = phi i32 [ %v1_95b0, %dec_label_pc_95a4 ], [ %v1_985c, %dec_label_pc_9850 ]
  %stack_var_-152.0.ph = phi i32 [ %v1_95ac, %dec_label_pc_95a4 ], [ %v1_9858, %dec_label_pc_9850 ]
  %v2_9834 = icmp eq i32 %v1_9260, 0
  %v2_9634 = icmp eq i32 %v1_92f4, 0
  %v2_9600 = icmp eq i32 %v6_9294, -1
  %v7_9600 = icmp eq i32 %v6_9294, -1
  br label %dec_label_pc_95bc

dec_label_pc_95bc:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95bc.preheader
  %v0_95bc = phi i32 [ %v0_95bc.pre, %dec_label_pc_95bc.preheader ], [ %v1_9714, %dec_label_pc_9650 ]
  %v2_95bc = icmp eq i32 %v0_95bc, 0
  store i1 %v2_95bc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp97 = icmp slt i32 %v0_95bc, 1
  br label %dec_label_pc_95c4

dec_label_pc_95c4:                                ; preds = %dec_label_pc_95c4, %dec_label_pc_95bc
  br i1 %tmp97, label %dec_label_pc_95c4, label %dec_label_pc_95c8

dec_label_pc_95c8:                                ; preds = %dec_label_pc_95c4
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r8, align 4
  br label %dec_label_pc_95d4

dec_label_pc_95d4:                                ; preds = %dec_label_pc_9650, %dec_label_pc_95c8
  %v1_95e8 = phi i32 [ %v1_9710, %dec_label_pc_9650 ], [ 0, %dec_label_pc_95c8 ]
  %v5_95d8 = mul i32 %v1_95e8, 24
  %v1_95dc = load i32, i32* @sb, align 4
  %v2_95dc = add i32 %v1_95dc, %v5_95d8
  store i32 %v2_95dc, i32* %r3.global-to-local, align 4
  store i32 %v2_9174, i32* %r1.global-to-local, align 4
  %v1_95e4 = add i32 %v2_95dc, 20
  %v2_95e4 = inttoptr i32 %v1_95e4 to i8*
  %v3_95e4 = load i8, i8* %v2_95e4, align 1
  %v4_95e4 = zext i8 %v3_95e4 to i32
  store i32 %v4_95e4, i32* %r2.global-to-local, align 4
  %v4_95e8 = mul i32 %v1_95e8, 4
  %v5_95e8 = add i32 %v4_95e8, %v2_9174
  %v6_95e8 = inttoptr i32 %v5_95e8 to i32*
  %v7_95e8 = load i32, i32* %v6_95e8, align 4
  store i32 %v7_95e8, i32* @r5, align 4
  %v7_95ec = icmp eq i8 %v3_95e4, 31
  store i1 %v7_95ec, i1* %cpsr_z.global-to-local, align 1
  %v1_95f0 = add i32 %v7_95e8, 24
  store i32 %v1_95f0, i32* @r6, align 4
  %v1_95f4 = add i32 %v7_95e8, 44
  store i32 %v1_95f4, i32* @r7, align 4
  %tmp105 = icmp ult i8 %v3_95e4, 32
  br i1 %tmp105, label %dec_label_pc_9734, label %dec_label_pc_95fc

dec_label_pc_95fc:                                ; preds = %dec_label_pc_95d4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_9608:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  store i32 65535, i32* @r4, align 4
  %v0_9610 = load i32, i32* @sl, align 4
  %v9_9610 = icmp eq i32 %v0_9610, 65535
  store i1 %v9_9610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9610, label %dec_label_pc_97b4, label %dec_label_pc_9618

dec_label_pc_9618:                                ; preds = %dec_label_pc_979c.dec_label_pc_9618_crit_edge, %dec_label_pc_9608
  %v1_961c = phi i32 [ %v1_961c.pre, %dec_label_pc_979c.dec_label_pc_9618_crit_edge ], [ 65535, %dec_label_pc_9608 ]
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v9_961c = icmp eq i32 %v3_92fc, %v1_961c
  store i1 %v9_961c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_961c, label %dec_label_pc_97ec, label %dec_label_pc_9624

dec_label_pc_9624:                                ; preds = %dec_label_pc_97b4.dec_label_pc_9624_crit_edge, %dec_label_pc_9618
  %v1_9628 = phi i32 [ %v1_9628.pre, %dec_label_pc_97b4.dec_label_pc_9624_crit_edge ], [ %v1_961c, %dec_label_pc_9618 ]
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v9_9628 = icmp eq i32 %v3_9300, %v1_9628
  store i1 %v9_9628, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9628, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9630:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9634, label %dec_label_pc_982c, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_9630
  %v1_9638 = load i32, i32* @r5, align 4
  %v2_9638 = add i32 %v1_9638, 16
  %v3_9638 = inttoptr i32 %v2_9638 to i32*
  %v4_9638 = load i32, i32* %v3_9638, align 4
  store i32 %v4_9638, i32* %r3.global-to-local, align 4
  %v2_963c = load i32, i32* @r6, align 4
  %v3_963c = add i32 %v2_963c, 16
  %v4_963c = inttoptr i32 %v3_963c to i32*
  store i32 %v4_9638, i32* %v4_963c, align 4
  br label %dec_label_pc_9644

dec_label_pc_9644:                                ; preds = %bb102, %.thread26
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9650:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c, %dec_label_pc_9840
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9654 = load i32, i32* @r8, align 4
  %v1_9654 = trunc i32 %v0_9654 to i8
  %v2_9654 = load i32, i32* @r5, align 4
  %v3_9654 = add i32 %v2_9654, 10
  %v4_9654 = inttoptr i32 %v3_9654 to i8*
  store i8 %v1_9654, i8* %v4_9654, align 1
  %v0_9658 = load i32, i32* @r8, align 4
  %v1_9658 = trunc i32 %v0_9658 to i8
  %v2_9658 = load i32, i32* @r5, align 4
  %v3_9658 = add i32 %v2_9658, 11
  %v4_9658 = inttoptr i32 %v3_9658 to i8*
  store i8 %v1_9658, i8* %v4_9658, align 1
  %v0_965c = load i32, i32* @r5, align 4
  store i32 %v0_965c, i32* @r0, align 4
  %v2_9660 = call i32 @function_d0b8(i32 %v0_965c, i32 20)
  %v3_9660 = trunc i32 %v2_9660 to i8
  %v4_9664 = sdiv i32 %v2_9660, 256
  store i32 %v4_9664, i32* %r3.global-to-local, align 4
  %v1_9668 = trunc i32 %v4_9664 to i8
  %v2_9668 = load i32, i32* @r5, align 4
  %v3_9668 = add i32 %v2_9668, 11
  %v4_9668 = inttoptr i32 %v3_9668 to i8*
  store i8 %v1_9668, i8* %v4_9668, align 1
  %v3_966c = load i32, i32* @r5, align 4
  %v4_966c = add i32 %v3_966c, 10
  %v5_966c = inttoptr i32 %v4_966c to i8*
  store i8 %v3_9660, i8* %v5_966c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_9674 = load i32, i32* @r8, align 4
  %v1_9674 = trunc i32 %v0_9674 to i8
  %v2_9674 = load i32, i32* @r6, align 4
  %v3_9674 = add i32 %v2_9674, 10
  %v4_9674 = inttoptr i32 %v3_9674 to i8*
  store i8 %v1_9674, i8* %v4_9674, align 1
  %v0_9678 = load i32, i32* @r8, align 4
  %v1_9678 = trunc i32 %v0_9678 to i8
  %v2_9678 = load i32, i32* @r6, align 4
  %v3_9678 = add i32 %v2_9678, 11
  %v4_9678 = inttoptr i32 %v3_9678 to i8*
  store i8 %v1_9678, i8* %v4_9678, align 1
  %v0_967c = load i32, i32* @r6, align 4
  store i32 %v0_967c, i32* @r0, align 4
  %v2_9680 = call i32 @function_d0b8(i32 %v0_967c, i32 20)
  %v3_9680 = trunc i32 %v2_9680 to i8
  store i32 %v2_9680, i32* %r0.global-to-local, align 4
  %v4_9684 = sdiv i32 %v2_9680, 256
  store i32 %v4_9684, i32* %r3.global-to-local, align 4
  %v3_9688 = load i32, i32* @r6, align 4
  %v4_9688 = add i32 %v3_9688, 10
  %v5_9688 = inttoptr i32 %v4_9688 to i8*
  store i8 %v3_9680, i8* %v5_9688, align 1
  %v0_968c = load i32, i32* %r3.global-to-local, align 4
  %v1_968c = trunc i32 %v0_968c to i8
  %v2_968c = load i32, i32* @r6, align 4
  %v3_968c = add i32 %v2_968c, 11
  %v4_968c = inttoptr i32 %v3_968c to i8*
  store i8 %v1_968c, i8* %v4_968c, align 1
  %v0_9690 = load i32, i32* @r7, align 4
  %v1_9690 = add i32 %v0_9690, 4
  %v2_9690 = inttoptr i32 %v1_9690 to i8*
  %v3_9690 = load i8, i8* %v2_9690, align 1
  %v4_9690 = zext i8 %v3_9690 to i32
  store i32 %v4_9690, i32* %r3.global-to-local, align 4
  %v1_9694 = add i32 %v0_9690, 5
  %v2_9694 = inttoptr i32 %v1_9694 to i8*
  %v3_9694 = load i8, i8* %v2_9694, align 1
  %v4_9694 = zext i8 %v3_9694 to i32
  store i32 %v0_9690, i32* @r1, align 4
  %v4_969c = mul nuw nsw i32 %v4_9694, 256
  %v5_969c = or i32 %v4_969c, %v4_9690
  store i32 %v5_969c, i32* %r2.global-to-local, align 4
  %v0_96a0 = load i32, i32* @r8, align 4
  %v1_96a0 = trunc i32 %v0_96a0 to i8
  %v3_96a0 = add i32 %v0_9690, 6
  %v4_96a0 = inttoptr i32 %v3_96a0 to i8*
  store i8 %v1_96a0, i8* %v4_96a0, align 1
  store i32 %stack_var_-152.0.ph, i32* %r3.global-to-local, align 4
  %v0_96a8 = load i32, i32* @r8, align 4
  %v1_96a8 = trunc i32 %v0_96a8 to i8
  %v2_96a8 = load i32, i32* @r7, align 4
  %v3_96a8 = add i32 %v2_96a8, 7
  %v4_96a8 = inttoptr i32 %v3_96a8 to i8*
  store i8 %v1_96a8, i8* %v4_96a8, align 1
  %v0_96ac = load i32, i32* @r6, align 4
  store i32 %v0_96ac, i32* %r0.global-to-local, align 4
  %v4_96b0 = call i32 @function_d114(i32 %v0_96ac, i32 %v0_9690, i32 %v5_969c, i32 %stack_var_-152.0.ph)
  %v5_96b0 = trunc i32 %v4_96b0 to i8
  store i32 %v4_96b0, i32* %r0.global-to-local, align 4
  %v3_96b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_96b4, i32* %r3.global-to-local, align 4
  %v3_96b8 = mul i32 %v3_96b4, 32
  store i32 %v3_96b8, i32* %r2.global-to-local, align 4
  %v0_96bc = load i32, i32* @r5, align 4
  %v1_96bc = add i32 %v0_96bc, 16
  %v2_96bc = inttoptr i32 %v1_96bc to i32*
  %v3_96bc = load i32, i32* %v2_96bc, align 4
  store i32 %v3_96bc, i32* %r1.global-to-local, align 4
  %v5_96c0 = mul i32 %v3_96b4, 24
  store i32 %v5_96c0, i32* %r2.global-to-local, align 4
  %v4_96c442 = udiv i32 %v4_96b0, 256
  %v1_96c8 = trunc i32 %v4_96c442 to i8
  %v2_96c8 = load i32, i32* @r7, align 4
  %v3_96c8 = add i32 %v2_96c8, 7
  %v4_96c8 = inttoptr i32 %v3_96c8 to i8*
  store i8 %v1_96c8, i8* %v4_96c8, align 1
  %v0_96cc = load i32, i32* %r2.global-to-local, align 4
  %v1_96cc = load i32, i32* @sb, align 4
  %v2_96cc = add i32 %v1_96cc, %v0_96cc
  store i32 %v2_96cc, i32* %lr.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v3_96d4 = load i32, i32* @r7, align 4
  %v4_96d4 = add i32 %v3_96d4, 6
  %v5_96d4 = inttoptr i32 %v4_96d4 to i8*
  store i8 %v5_96b0, i8* %v5_96d4, align 1
  %v0_96d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_96d8 = load i32, i32* %lr.global-to-local, align 4
  %v2_96d8 = add i32 %v1_96d8, 4
  %v3_96d8 = inttoptr i32 %v2_96d8 to i32*
  store i32 %v0_96d8, i32* %v3_96d8, align 4
  %v0_96dc = load i32, i32* %r3.global-to-local, align 4
  %v1_96dc = trunc i32 %v0_96dc to i8
  %v2_96dc = load i32, i32* %r2.global-to-local, align 4
  %v3_96dc = load i32, i32* @sb, align 4
  %v4_96dc = add i32 %v3_96dc, %v2_96dc
  %v5_96dc = inttoptr i32 %v4_96dc to i8*
  store i8 %v1_96dc, i8* %v5_96dc, align 1
  %v0_96e0 = load i32, i32* @r8, align 4
  %v1_96e0 = trunc i32 %v0_96e0 to i8
  %v2_96e0 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e0 = add i32 %v2_96e0, 2
  %v4_96e0 = inttoptr i32 %v3_96e0 to i8*
  store i8 %v1_96e0, i8* %v4_96e0, align 1
  %v0_96e4 = load i32, i32* @r8, align 4
  %v1_96e4 = trunc i32 %v0_96e4 to i8
  %v2_96e4 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e4 = add i32 %v2_96e4, 1
  %v4_96e4 = inttoptr i32 %v3_96e4 to i8*
  store i8 %v1_96e4, i8* %v4_96e4, align 1
  %v0_96e8 = load i32, i32* @r8, align 4
  %v1_96e8 = trunc i32 %v0_96e8 to i8
  %v2_96e8 = load i32, i32* %lr.global-to-local, align 4
  %v3_96e8 = add i32 %v2_96e8, 3
  %v4_96e8 = inttoptr i32 %v3_96e8 to i8*
  store i8 %v1_96e8, i8* %v4_96e8, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_96f4 = load i32, i32* @r5, align 4
  store i32 %v0_96f4, i32* %r1.global-to-local, align 4
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  store i32 %stack_var_-120.0.ph, i32* %r2.global-to-local, align 4
  %v0_9700 = load i32, i32* %lr.global-to-local, align 4
  %v6_9708 = inttoptr i32 %v0_96f4 to i32*
  %v7_9708 = call i32 @function_126c8(i32 %v3_92a8, i32* %v6_9708, i32 %stack_var_-120.0.ph, i32 16384, i32 %v0_9700, i32 16)
  %v3_970c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_970c, i32* %r3.global-to-local, align 4
  %v1_9710 = add i32 %v3_970c, 1
  store i32 %v1_9710, i32* %r0.global-to-local, align 4
  %v1_9714 = load i32, i32* @fp, align 4
  %v9_9714 = icmp eq i32 %v1_9710, %v1_9714
  store i1 %v9_9714, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_9710, i32* %stack_var_-40, align 4
  %v6_971c = icmp slt i32 %v1_9710, %v1_9714
  br i1 %v6_971c, label %dec_label_pc_95d4, label %dec_label_pc_95bc

dec_label_pc_9724:                                ; preds = %dec_label_pc_92b8
  store i32 %v3_92a8, i32* %r0.global-to-local, align 4
  %v1_9728 = call i32 @function_11e18(i32 %v3_92a8)
  store i32 %v1_9728, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_972c

dec_label_pc_972c:                                ; preds = %dec_label_pc_9154, %dec_label_pc_9724
  %v29_9730 = phi i32 [ %v3_92a8, %dec_label_pc_9154 ], [ %v1_9728, %dec_label_pc_9724 ]
  store i32 %v3_9154, i32* %r4.global-to-local, align 4
  store i32 %v15_9154, i32* %r8.global-to-local, align 4
  ret i32 %v29_9730

dec_label_pc_9734:                                ; preds = %dec_label_pc_95d4
  %v1_9734 = add i32 %v2_95dc, 16
  %v2_9734 = inttoptr i32 %v1_9734 to i32*
  %v3_9734 = load i32, i32* %v2_9734, align 4
  store i32 %v3_9734, i32* %r4.global-to-local, align 4
  %v0_9738 = call i32 @function_ebc8()
  store i32 %v0_9738, i32* %r0.global-to-local, align 4
  %v3_973c = load i32, i32* %stack_var_-40, align 4
  %v5_9744 = mul i32 %v3_973c, 24
  %v0_9748 = load i32, i32* %r4.global-to-local, align 4
  %v1_974c = load i32, i32* @sb, align 4
  %v2_974c = add i32 %v1_974c, %v5_9744
  store i32 %v2_974c, i32* %r1.global-to-local, align 4
  %v1_9750 = and i32 %v0_9748, 65280
  store i32 %v1_9750, i32* %r3.global-to-local, align 4
  %v1_9748 = udiv i32 %v0_9748, 256
  %v3_9754 = and i32 %v1_9748, 65280
  store i32 %v3_9754, i32* %r2.global-to-local, align 4
  %v1_975c = add i32 %v2_974c, 20
  %v2_975c = inttoptr i32 %v1_975c to i8*
  %v3_975c = load i8, i8* %v2_975c, align 1
  %v4_975c = zext i8 %v3_975c to i32
  store i32 %v4_975c, i32* %lr.global-to-local, align 4
  %v2_9768 = call i32 @llvm.bswap.i32(i32 %v0_9748)
  %v7_976c = lshr i32 %v0_9738, %v4_975c
  %v8_976c = add i32 %v7_976c, %v2_9768
  %v3_9778 = mul i32 %v8_976c, 16777216
  %v1_977c = and i32 %v8_976c, 65280
  store i32 %v1_977c, i32* %r0.global-to-local, align 4
  store i32 %v6_9294, i32* %r2.global-to-local, align 4
  %v4_9788 = mul nuw nsw i32 %v1_977c, 256
  %v5_9788 = or i32 %v4_9788, %v3_9778
  store i32 %v5_9788, i32* %r1.global-to-local, align 4
  %v2_978c = call i32 @llvm.bswap.i32(i32 %v8_976c)
  store i32 %v2_978c, i32* %r3.global-to-local, align 4
  store i1 %v7_9600, i1* %cpsr_z.global-to-local, align 1
  %v1_9794 = load i32, i32* @r5, align 4
  %v2_9794 = add i32 %v1_9794, 16
  %v3_9794 = inttoptr i32 %v2_9794 to i32*
  store i32 %v2_978c, i32* %v3_9794, align 4
  br i1 %v2_9600, label %dec_label_pc_979c, label %dec_label_pc_9608

dec_label_pc_979c:                                ; preds = %dec_label_pc_9734, %dec_label_pc_95fc
  %v0_979c = call i32 @function_ebc8()
  store i32 %v0_979c, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  %v0_97a8 = load i32, i32* @sl, align 4
  %v9_97a8 = icmp eq i32 %v0_97a8, 65535
  store i1 %v9_97a8, i1* %cpsr_z.global-to-local, align 1
  %v1_97ac = load i32, i32* @r5, align 4
  %v2_97ac = add i32 %v1_97ac, 12
  %v3_97ac = inttoptr i32 %v2_97ac to i32*
  store i32 %v0_979c, i32* %v3_97ac, align 4
  br i1 %v9_97a8, label %dec_label_pc_97b4, label %dec_label_pc_979c.dec_label_pc_9618_crit_edge

dec_label_pc_979c.dec_label_pc_9618_crit_edge:    ; preds = %dec_label_pc_979c
  %v1_961c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9618

dec_label_pc_97b4:                                ; preds = %dec_label_pc_979c, %dec_label_pc_9608
  %v0_97b4 = call i32 @function_ebc8()
  %v3_97bc = urem i32 %v0_97b4, 65536
  store i32 %v3_97bc, i32* %r0.global-to-local, align 4
  %v3_97c015 = udiv i32 %v0_97b4, 256
  %v1_97c4 = trunc i32 %v3_97c015 to i8
  %v2_97c4 = load i32, i32* @r5, align 4
  %v3_97c4 = add i32 %v2_97c4, 5
  %v4_97c4 = inttoptr i32 %v3_97c4 to i8*
  store i8 %v1_97c4, i8* %v4_97c4, align 1
  %v0_97c8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v3_92fc, i32* %r3.global-to-local, align 4
  %v1_97d0 = sub i32 999, %v0_97c8
  store i32 %v1_97d0, i32* %r2.global-to-local, align 4
  %v3_97d4 = sdiv i32 %v1_97d0, 256
  store i32 %v3_97d4, i32* %r1.global-to-local, align 4
  %v1_97d8 = load i32, i32* @r4, align 4
  %v9_97d8 = icmp eq i32 %v3_92fc, %v1_97d8
  store i1 %v9_97d8, i1* %cpsr_z.global-to-local, align 1
  %v1_97dc = trunc i32 %v0_97c8 to i8
  %v2_97dc = load i32, i32* @r5, align 4
  %v3_97dc = add i32 %v2_97dc, 4
  %v4_97dc = inttoptr i32 %v3_97dc to i8*
  store i8 %v1_97dc, i8* %v4_97dc, align 1
  %v0_97e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_97e0 = trunc i32 %v0_97e0 to i8
  %v2_97e0 = load i32, i32* @r6, align 4
  %v3_97e0 = add i32 %v2_97e0, 5
  %v4_97e0 = inttoptr i32 %v3_97e0 to i8*
  store i8 %v1_97e0, i8* %v4_97e0, align 1
  %v0_97e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_97e4 = trunc i32 %v0_97e4 to i8
  %v2_97e4 = load i32, i32* @r6, align 4
  %v3_97e4 = add i32 %v2_97e4, 4
  %v4_97e4 = inttoptr i32 %v3_97e4 to i8*
  store i8 %v1_97e4, i8* %v4_97e4, align 1
  %v0_97e8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_97e8, label %dec_label_pc_97ec, label %dec_label_pc_97b4.dec_label_pc_9624_crit_edge

dec_label_pc_97b4.dec_label_pc_9624_crit_edge:    ; preds = %dec_label_pc_97b4
  %v1_9628.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_9624

dec_label_pc_97ec:                                ; preds = %dec_label_pc_97b4, %dec_label_pc_9618
  %v0_97ec = call i32 @function_ebc8()
  %v1_97ec = trunc i32 %v0_97ec to i8
  store i32 %v0_97ec, i32* %r0.global-to-local, align 4
  store i32 %v3_9300, i32* %r1.global-to-local, align 4
  %v4_97f4 = sdiv i32 %v0_97ec, 256
  store i32 %v4_97f4, i32* %r3.global-to-local, align 4
  %v1_97f8 = load i32, i32* @r4, align 4
  %v9_97f8 = icmp eq i32 %v3_9300, %v1_97f8
  store i1 %v9_97f8, i1* %cpsr_z.global-to-local, align 1
  %v3_97fc = load i32, i32* @r5, align 4
  %v4_97fc = add i32 %v3_97fc, 44
  %v5_97fc = inttoptr i32 %v4_97fc to i8*
  store i8 %v1_97ec, i8* %v5_97fc, align 1
  %v0_9800 = load i32, i32* %r3.global-to-local, align 4
  %v1_9800 = trunc i32 %v0_9800 to i8
  %v2_9800 = load i32, i32* @r7, align 4
  %v3_9800 = add i32 %v2_9800, 1
  %v4_9800 = inttoptr i32 %v3_9800 to i8*
  store i8 %v1_9800, i8* %v4_9800, align 1
  %v0_9804 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9804, label %dec_label_pc_9808, label %dec_label_pc_9630

dec_label_pc_9808:                                ; preds = %dec_label_pc_97ec, %dec_label_pc_9624
  %v0_9808 = call i32 @function_ebc8()
  %v1_9808 = trunc i32 %v0_9808 to i8
  store i32 %v0_9808, i32* %r0.global-to-local, align 4
  store i32 %v1_92f4, i32* %r2.global-to-local, align 4
  %v4_9810 = sdiv i32 %v0_9808, 256
  store i32 %v4_9810, i32* %r3.global-to-local, align 4
  store i1 %v2_9634, i1* %cpsr_z.global-to-local, align 1
  %v1_9818 = trunc i32 %v4_9810 to i8
  %v2_9818 = load i32, i32* @r7, align 4
  %v3_9818 = add i32 %v2_9818, 3
  %v4_9818 = inttoptr i32 %v3_9818 to i8*
  store i8 %v1_9818, i8* %v4_9818, align 1
  %v0_981c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_981c, label %bb101, label %bb100

bb100:                                            ; preds = %dec_label_pc_9808
  %v1_981c = load i32, i32* @r5, align 4
  %v2_981c = add i32 %v1_981c, 16
  %v3_981c = inttoptr i32 %v2_981c to i32*
  %v4_981c = load i32, i32* %v3_981c, align 4
  store i32 %v4_981c, i32* %r3.global-to-local, align 4
  br label %bb101

bb101:                                            ; preds = %dec_label_pc_9808, %bb100
  %v3_9820 = load i32, i32* @r7, align 4
  %v4_9820 = add i32 %v3_9820, 2
  %v5_9820 = inttoptr i32 %v4_9820 to i8*
  store i8 %v1_9808, i8* %v5_9820, align 1
  %v0_9824 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_9824, label %dec_label_pc_982c, label %bb102

bb102:                                            ; preds = %bb101
  %v1_9824 = load i32, i32* %r3.global-to-local, align 4
  %v2_9824 = load i32, i32* @r6, align 4
  %v3_9824 = add i32 %v2_9824, 16
  %v4_9824 = inttoptr i32 %v3_9824 to i32*
  store i32 %v1_9824, i32* %v4_9824, align 4
  br label %dec_label_pc_9644

dec_label_pc_982c:                                ; preds = %dec_label_pc_9630, %bb101
  %v0_982c = call i32 @function_ebc8()
  store i32 %v0_982c, i32* %r0.global-to-local, align 4
  store i32 %v1_9260, i32* %r3.global-to-local, align 4
  store i1 %v2_9834, i1* %cpsr_z.global-to-local, align 1
  %v1_9838 = load i32, i32* @r6, align 4
  %v2_9838 = add i32 %v1_9838, 16
  %v3_9838 = inttoptr i32 %v2_9838 to i32*
  store i32 %v0_982c, i32* %v3_9838, align 4
  br i1 %v2_9834, label %dec_label_pc_9650, label %dec_label_pc_9840

dec_label_pc_9840:                                ; preds = %dec_label_pc_9644, %dec_label_pc_982c
  %v0_9840 = load i32, i32* @r7, align 4
  %v1_9840 = add i32 %v0_9840, 8
  store i32 %v1_9840, i32* %r0.global-to-local, align 4
  store i32 %v6_9240, i32* @r1, align 4
  %v1_9848 = inttoptr i32 %v1_9840 to i8*
  %v2_9848 = call i32 @function_ed48(i8* %v1_9848)
  store i32 %v2_9848, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9650

dec_label_pc_9850:                                ; preds = %dec_label_pc_92e0
  %v1_9858 = add i32 %v6_9240, 8
  store i32 %v1_9858, i32* %r2.global-to-local, align 4
  %v1_985c = add i32 %v6_9240, 52
  store i32 %v1_985c, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_95bc.preheader

; uselistorder directives
  uselistorder i32 %v1_985c, { 1, 0 }
  uselistorder i32 %v1_9858, { 1, 0 }
  uselistorder i32 %v4_9810, { 1, 0 }
  uselistorder i32 %v0_9808, { 0, 2, 1 }
  uselistorder i32 %v0_97ec, { 0, 2, 1 }
  uselistorder i32 %v2_978c, { 1, 0 }
  uselistorder i32 %v8_976c, { 1, 2, 0 }
  uselistorder i32 %v0_9748, { 1, 0, 2 }
  uselistorder i32 %v1_9714, { 1, 2, 0 }
  uselistorder i32 %v1_9710, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v3_96b4, { 1, 0, 2 }
  uselistorder i32 %v4_96b0, { 0, 2, 1 }
  uselistorder i32 %v0_9690, { 2, 0, 1, 3, 4 }
  uselistorder i32 %v2_9680, { 0, 2, 1 }
  uselistorder i32 %v4_9664, { 1, 0 }
  uselistorder i32 %v7_95e8, { 1, 0, 2 }
  uselistorder i32 %v0_95bc, { 1, 0 }
  uselistorder i1 %v7_9600, { 2, 1, 0 }
  uselistorder i1 %v2_9834, { 2, 3, 1, 0 }
  uselistorder i32 %v1_957c, { 1, 0, 2 }
  uselistorder i32 %v0_9540, { 1, 0, 2 }
  uselistorder i32 %v3_93f4, { 0, 2, 1 }
  uselistorder i32 %v3_93b4, { 1, 0 }
  uselistorder i32 %tmp86, { 1, 0 }
  uselistorder i32 %v1_936c, { 1, 0 }
  uselistorder i32 %v1_9348, { 1, 0 }
  uselistorder i32 %v1_9344, { 0, 2, 1 }
  uselistorder i32 %v3_9328, { 2, 1, 0 }
  uselistorder i32 %v0_9304, { 1, 0, 2 }
  uselistorder i32 %v1_92f4, { 4, 2, 3, 0, 1 }
  uselistorder i32 %v0_92f0, { 0, 2, 1 }
  uselistorder i32 %v0_92ec, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_92d8, { 1, 0 }
  uselistorder i1 %v7_92ac, { 1, 0 }
  uselistorder i32 %v3_92a8, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_9294, { 5, 3, 0, 4, 2, 1 }
  uselistorder i32 %v1_9260, { 1, 0, 2, 3 }
  uselistorder i32 %v6_9240, { 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v6_91c8, { 2, 1, 0, 3 }
  uselistorder i32 %v2_9174, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_9158, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r8.global-to-local, { 3, 0, 1, 2 }
  uselistorder i32* %r4.global-to-local, { 19, 20, 21, 0, 1, 2, 3, 4, 5, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18 }
  uselistorder i32* %r3.global-to-local, { 51, 52, 54, 53, 55, 56, 57, 58, 59, 60, 61, 62, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 0 }
  uselistorder i32* %r1.global-to-local, { 37, 38, 39, 40, 41, 42, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 25, 27, 28, 30, 29, 31, 32, 34, 33, 36, 35, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 30, 31, 34, 35, 32, 33, 37, 36, 2, 1, 38, 39, 40, 5, 4, 6, 7, 12, 8, 9, 10, 11, 15, 13, 14, 16, 18, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0 }
  uselistorder i32* %lr.global-to-local, { 6, 1, 2, 3, 4, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 13, 15, 16, 17, 18 }
  uselistorder label %dec_label_pc_9840, { 1, 0 }
  uselistorder label %dec_label_pc_982c, { 1, 0 }
  uselistorder label %bb101, { 1, 0 }
  uselistorder label %dec_label_pc_972c, { 1, 0 }
  uselistorder label %dec_label_pc_9650, { 2, 1, 0 }
  uselistorder label %dec_label_pc_95bc.preheader, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %bb95, { 1, 0 }
  uselistorder label %bb93, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %.thread23, { 2, 1, 0 }
}

define i32 @function_9870(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9870:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_9870 = load i32, i32* @fp, align 4
  %v1_9874 = urem i32 %arg1, 256
  store i32 %v1_9874, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_988c = urem i32 %arg3, 256
  store i32 %v1_988c, i32* @r4, align 4
  %v2_9890 = call i32 @function_12a18(i32 %v1_9874, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_9890, i32* @sl, align 4
  %v0_989c = load i32, i32* @r7, align 4
  %v2_98a0 = call i32 @function_12a18(i32 %v0_989c, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_98ac = load i32, i32* @r6, align 4
  store i32 %v0_98ac, i32* %r1.global-to-local, align 4
  store i32 %v2_98a0, i32* @sb, align 4
  %v0_98bc = load i32, i32* @r4, align 4
  %v5_98c0 = inttoptr i32 %v0_98ac to i32*
  %v6_98c0 = call i32 @function_85e0(i32 %v0_98bc, i32* %v5_98c0, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_98c8 = urem i32 %v6_98c0, 65536
  %v0_98cc = load i32, i32* @r6, align 4
  store i32 %v0_98cc, i32* %r1.global-to-local, align 4
  %v0_98d4 = load i32, i32* @r5, align 4
  %v0_98d8 = load i32, i32* @r4, align 4
  %v5_98e0 = inttoptr i32 %v0_98cc to i32*
  %v6_98e0 = call i32 @function_85e0(i32 %v0_98d8, i32* %v5_98e0, i32 6, i32 %v0_98d4, i32 %v3_98c8)
  %v0_98e4 = load i32, i32* @r6, align 4
  store i32 %v0_98e4, i32* %r1.global-to-local, align 4
  %v3_98e8 = mul i32 %v6_98e0, 65536
  store i32 %v3_98e8, i32* %fp.global-to-local, align 4
  %v0_98f4 = load i32, i32* @r4, align 4
  %v5_98f8 = inttoptr i32 %v0_98e4 to i32*
  %v6_98f8 = call i32 @function_85e0(i32 %v0_98f4, i32* %v5_98f8, i32 0, i32 1024, i32 ptrtoint (i32* @0 to i32))
  %v0_9904 = load i32, i32* @r6, align 4
  store i32 %v0_9904, i32* %r1.global-to-local, align 4
  %v0_9908 = load i32, i32* @r4, align 4
  %v3_9910 = urem i32 %v6_98f8, 65536
  store i32 %v3_9910, i32* @r6, align 4
  %v5_9914 = inttoptr i32 %v0_9904 to i32*
  %v6_9914 = call i32 @function_85e0(i32 %v0_9908, i32* %v5_9914, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_9918 = load i32, i32* %fp.global-to-local, align 4
  %v3_9918 = udiv i32 %v0_9918, 65536
  %v1_9920 = load i32, i32* @r5, align 4
  %v9_9920 = icmp eq i32 %v3_9918, %v1_9920
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_9920, label %dec_label_pc_9948, label %bb

bb:                                               ; preds = %dec_label_pc_9870
  %v2_9934 = mul nuw nsw i32 %v3_9918, 256
  %v4_9938 = and i32 %v2_9934, 65280
  %v1_993c = urem i32 %v6_9914, 256
  store i32 %v1_993c, i32* @r8, align 4
  %v5_9940 = udiv i32 %v0_9918, 16777216
  %v6_9940 = or i32 %v4_9938, %v5_9940
  br label %dec_label_pc_9954

dec_label_pc_9948:                                ; preds = %dec_label_pc_9870
  %v1_993c7 = urem i32 %v6_9914, 256
  store i32 %v1_993c7, i32* @r8, align 4
  %v0_9948 = call i32 @function_ebc8()
  %v3_9950 = urem i32 %v0_9948, 65536
  br label %dec_label_pc_9954

dec_label_pc_9954:                                ; preds = %bb, %dec_label_pc_9948
  %storemerge17 = phi i32 [ %v6_9940, %bb ], [ %v3_9950, %dec_label_pc_9948 ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_9954 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_9954, 1
  br i1 %tmp41, label %dec_label_pc_9afc.preheader, label %dec_label_pc_995c

dec_label_pc_9afc.preheader:                      ; preds = %dec_label_pc_9a58, %dec_label_pc_9954
  %storemerge3.in12.ph = phi i32 [ %v0_9954, %dec_label_pc_9954 ], [ %v1_99b0, %dec_label_pc_9a58 ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_995c:                                ; preds = %dec_label_pc_9954
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v3_9960 = udiv i32 %v6_98c0, 256
  %v5_996c = trunc i32 %v3_9960 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_9984 = udiv i32 %v6_98c0, 65536
  store i32 %v3_9984, i32* @r4, align 4
  %v4_9994 = trunc i32 %v3_9984 to i8
  store i8 %v4_9994, i8* %stack_var_-80, align 1
  %v3_9aa4 = icmp eq i32 %v3_98c8, 65535
  %v2_99cc = ptrtoint i32* %stack_var_-52 to i32
  %v3_99fc = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_9a88

dec_label_pc_999c:                                ; preds = %dec_label_pc_9a88
  %v2_999c = load i8, i8* %stack_var_-80, align 1
  %v3_999c = sext i8 %v2_999c to i32
  store i32 %v3_999c, i32* %r1.global-to-local, align 4
  store i32 %v3_9960, i32* @r4, align 4
  %v2_99a0 = load i32, i32* @r5, align 4
  %v3_99a0 = add i32 %v2_99a0, 2
  %v4_99a0 = inttoptr i32 %v3_99a0 to i8*
  store i8 %v5_996c, i8* %v4_99a0, align 1
  %v0_99a4 = load i32, i32* %r1.global-to-local, align 4
  %v1_99a4 = trunc i32 %v0_99a4 to i8
  %v2_99a4 = load i32, i32* @r5, align 4
  %v3_99a4 = add i32 %v2_99a4, 3
  %v4_99a4 = inttoptr i32 %v3_99a4 to i8*
  store i8 %v1_99a4, i8* %v4_99a4, align 1
  br label %dec_label_pc_99a8

dec_label_pc_99a8:                                ; preds = %dec_label_pc_9ab0, %dec_label_pc_999c
  %v1_99b0 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_99c0 = call i32 @function_1272c(i32 2, i32 2, i32 0)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_99c8 = icmp eq i32 %v3_99c0, -1
  store i32 %v2_99cc, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_99dc = load i32, i32* @sb, align 4
  %v3_99dc = add i32 %v2_99dc, %stack_var_-60.0
  %v4_99dc = inttoptr i32 %v3_99dc to i32*
  store i32 %v3_99c0, i32* %v4_99dc, align 4
  br i1 %v7_99c8, label %dec_label_pc_9b08, label %dec_label_pc_99e4

dec_label_pc_99e4:                                ; preds = %dec_label_pc_99a8
  store i32 2, i32* %stack_var_-52, align 4
  %v4_99fc = call i32 @function_1255c(i32 %v3_99c0, %sockaddr* %v3_99fc, i32 16)
  %v0_9a00 = load i32, i32* @r5, align 4
  %v1_9a00 = add i32 %v0_9a00, 20
  %v2_9a00 = inttoptr i32 %v1_9a00 to i8*
  %v3_9a00 = load i8, i8* %v2_9a00, align 1
  %tmp = icmp ugt i8 %v3_9a00, 31
  br i1 %tmp, label %dec_label_pc_9a58, label %dec_label_pc_9a0c

dec_label_pc_9a0c:                                ; preds = %dec_label_pc_99e4
  %v1_9a0c = add i32 %v0_9a00, 16
  %v2_9a0c = inttoptr i32 %v1_9a0c to i32*
  %v3_9a0c = load i32, i32* %v2_9a0c, align 4
  store i32 %v3_9a0c, i32* @r4, align 4
  %v0_9a10 = call i32 @function_ebc8()
  %v0_9a14 = load i32, i32* @r4, align 4
  %v1_9a18 = and i32 %v0_9a14, 65280
  %v3_9a20 = mul i32 %v0_9a14, 16777216
  %v4_9a24 = mul nuw nsw i32 %v1_9a18, 256
  %v5_9a24 = or i32 %v4_9a24, %v3_9a20
  store i32 %v5_9a24, i32* %r1.global-to-local, align 4
  %v0_9a2c = load i32, i32* @r5, align 4
  %v1_9a2c = add i32 %v0_9a2c, 20
  %v2_9a2c = inttoptr i32 %v1_9a2c to i8*
  %v3_9a2c = load i8, i8* %v2_9a2c, align 1
  %v4_9a2c = zext i8 %v3_9a2c to i32
  %v2_9a30 = call i32 @llvm.bswap.i32(i32 %v0_9a14)
  %v7_9a34 = lshr i32 %v0_9a10, %v4_9a2c
  %v8_9a34 = add i32 %v7_9a34, %v2_9a30
  %v3_9a40 = mul i32 %v8_9a34, 16777216
  %v1_9a44 = and i32 %v8_9a34, 65280
  %v4_9a48 = mul nuw nsw i32 %v1_9a44, 256
  %v5_9a48 = or i32 %v4_9a48, %v3_9a40
  store i32 %v5_9a48, i32* %r1.global-to-local, align 4
  %v2_9a50 = call i32 @llvm.bswap.i32(i32 %v8_9a34)
  %v2_9a54 = add i32 %v0_9a2c, 4
  %v3_9a54 = inttoptr i32 %v2_9a54 to i32*
  store i32 %v2_9a50, i32* %v3_9a54, align 4
  %v0_9a64.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_9a58

dec_label_pc_9a58:                                ; preds = %dec_label_pc_99e4, %dec_label_pc_9a0c
  %v0_9a64 = phi i32 [ %v0_9a00, %dec_label_pc_99e4 ], [ %v0_9a64.pre, %dec_label_pc_9a0c ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_9a60 = load i32, i32* @sb, align 4
  %v2_9a60 = add i32 %v1_9a60, %stack_var_-60.0
  %v3_9a60 = inttoptr i32 %v2_9a60 to i32*
  %v4_9a60 = load i32, i32* %v3_9a60, align 4
  store i32 %v0_9a64, i32* %r1.global-to-local, align 4
  %v3_9a68 = inttoptr i32 %v0_9a64 to %sockaddr*
  %v4_9a68 = call i32 @function_12588(i32 %v4_9a60, %sockaddr* %v3_9a68, i32 16)
  %v1_9a74 = add i32 %stack_var_-60.0, 4
  %v1_9a78 = load i32, i32* @r7, align 4
  %v9_9a78 = icmp eq i32 %v1_99b0, %v1_9a78
  %v0_9a80 = load i32, i32* @r5, align 4
  %v1_9a80 = add i32 %v0_9a80, 24
  store i32 %v1_9a80, i32* @r5, align 4
  br i1 %v9_9a78, label %dec_label_pc_9afc.preheader, label %dec_label_pc_9a88

dec_label_pc_9a88:                                ; preds = %dec_label_pc_9a58, %dec_label_pc_995c
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_9a74, %dec_label_pc_9a58 ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_995c ], [ %v1_99b0, %dec_label_pc_9a58 ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_9a94 = call i32 @function_12a18(i32 65535, i32 1)
  store i32 %v3_98c8, i32* %r1.global-to-local, align 4
  %v2_9aa8 = load i32, i32* @sl, align 4
  %v3_9aa8 = add i32 %v2_9aa8, %stack_var_-60.0
  %v4_9aa8 = inttoptr i32 %v3_9aa8 to i32*
  store i32 %v2_9a94, i32* %v4_9aa8, align 4
  br i1 %v3_9aa4, label %dec_label_pc_9ab0, label %dec_label_pc_999c

dec_label_pc_9ab0:                                ; preds = %dec_label_pc_9a88
  %v0_9ab0 = call i32 @function_ebc8()
  %v1_9ab0 = trunc i32 %v0_9ab0 to i8
  %v4_9ab4 = sdiv i32 %v0_9ab0, 256
  %v1_9ab8 = trunc i32 %v4_9ab4 to i8
  %v2_9ab8 = load i32, i32* @r5, align 4
  %v3_9ab8 = add i32 %v2_9ab8, 3
  %v4_9ab8 = inttoptr i32 %v3_9ab8 to i8*
  store i8 %v1_9ab8, i8* %v4_9ab8, align 1
  %v3_9abc = load i32, i32* @r5, align 4
  %v4_9abc = add i32 %v3_9abc, 2
  %v5_9abc = inttoptr i32 %v4_9abc to i8*
  store i8 %v1_9ab0, i8* %v5_9abc, align 1
  br label %dec_label_pc_99a8

dec_label_pc_9ac4:                                ; preds = %dec_label_pc_9afc.loopexit, %dec_label_pc_9afc.preheader, %dec_label_pc_9b00.loopexit, %dec_label_pc_9ac4
  br label %dec_label_pc_9ac4

dec_label_pc_9ac8:                                ; preds = %dec_label_pc_9ac8.lr.ph, %dec_label_pc_9b00.loopexit
  %v0_9ac8 = load i32, i32* @r8, align 4
  %v2_9ac8 = icmp eq i32 %v0_9ac8, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_9ac8, label %dec_label_pc_9ad0, label %dec_label_pc_9b10

dec_label_pc_9ad0:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_9ad8

dec_label_pc_9ad8:                                ; preds = %dec_label_pc_9ad8, %dec_label_pc_9ad0
  %v0_9ae0 = phi i32 [ %v1_9ae0, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v0_9ad8 = phi i32 [ %v1_9af4, %dec_label_pc_9ad8 ], [ 0, %dec_label_pc_9ad0 ]
  %v1_9ad8 = load i32, i32* @sb, align 4
  %v2_9ad8 = add i32 %v1_9ad8, %v0_9ad8
  %v3_9ad8 = inttoptr i32 %v2_9ad8 to i32*
  %v4_9ad8 = load i32, i32* %v3_9ad8, align 4
  %v1_9adc = load i32, i32* @sl, align 4
  %v2_9adc = add i32 %v1_9adc, %v0_9ad8
  %v3_9adc = inttoptr i32 %v2_9adc to i32*
  %v4_9adc = load i32, i32* %v3_9adc, align 4
  store i32 %v4_9adc, i32* %r1.global-to-local, align 4
  %v1_9ae0 = add i32 %v0_9ae0, 1
  %v0_9ae4 = load i32, i32* @r6, align 4
  %v4_9aec = inttoptr i32 %v4_9adc to i32*
  %v5_9aec = call i32 @function_1269c(i32 %v4_9ad8, i32* %v4_9aec, i32 %v0_9ae4, i32 16384)
  %v1_9af0 = load i32, i32* @r7, align 4
  %v9_9af0 = icmp eq i32 %v1_9ae0, %v1_9af0
  %v0_9af4 = load i32, i32* @r4, align 4
  %v1_9af4 = add i32 %v0_9af4, 4
  store i32 %v1_9af4, i32* @r4, align 4
  br i1 %v9_9af0, label %dec_label_pc_9afc.loopexit, label %dec_label_pc_9ad8

dec_label_pc_9afc.loopexit:                       ; preds = %dec_label_pc_9ad8
  %tmp4247 = icmp slt i32 %v1_9ae0, 1
  br i1 %tmp4247, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8.lr.ph

dec_label_pc_9ac8.lr.ph:                          ; preds = %dec_label_pc_9afc.preheader, %dec_label_pc_9afc.loopexit
  br label %dec_label_pc_9ac8

dec_label_pc_9b00.loopexit:                       ; preds = %dec_label_pc_9b18
  %tmp42 = icmp slt i32 %v0_9b40, 1
  br i1 %tmp42, label %dec_label_pc_9ac4, label %dec_label_pc_9ac8

dec_label_pc_9b08:                                ; preds = %dec_label_pc_99a8
  store i32 %v24_9870, i32* %fp.global-to-local, align 4
  ret i32 %v3_99c0

dec_label_pc_9b10:                                ; preds = %dec_label_pc_9ac8
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_9b18

dec_label_pc_9b18:                                ; preds = %dec_label_pc_9b18, %dec_label_pc_9b10
  %v0_9b18 = phi i32 [ %v1_9b44, %dec_label_pc_9b18 ], [ 0, %dec_label_pc_9b10 ]
  %v1_9b18 = load i32, i32* @sl, align 4
  %v2_9b18 = add i32 %v1_9b18, %v0_9b18
  %v3_9b18 = inttoptr i32 %v2_9b18 to i32*
  %v4_9b18 = load i32, i32* %v3_9b18, align 4
  store i32 %v4_9b18, i32* @r4, align 4
  %v0_9b1c = load i32, i32* @r6, align 4
  store i32 %v0_9b1c, i32* @r1, align 4
  %v1_9b24 = inttoptr i32 %v4_9b18 to i8*
  %v2_9b24 = call i32 @function_ed48(i8* %v1_9b24)
  %v0_9b28 = load i32, i32* @r5, align 4
  %v1_9b28 = add i32 %v0_9b28, 1
  store i32 %v1_9b28, i32* @r5, align 4
  %v0_9b2c = load i32, i32* @fp, align 4
  %v1_9b2c = load i32, i32* @sb, align 4
  %v2_9b2c = add i32 %v1_9b2c, %v0_9b2c
  %v3_9b2c = inttoptr i32 %v2_9b2c to i32*
  %v4_9b2c = load i32, i32* %v3_9b2c, align 4
  %v0_9b30 = load i32, i32* @r4, align 4
  store i32 %v0_9b30, i32* %r1.global-to-local, align 4
  %v0_9b34 = load i32, i32* @r6, align 4
  %v4_9b3c = inttoptr i32 %v0_9b30 to i32*
  %v5_9b3c = call i32 @function_1269c(i32 %v4_9b2c, i32* %v4_9b3c, i32 %v0_9b34, i32 16384)
  %v0_9b40 = load i32, i32* @r5, align 4
  %v1_9b40 = load i32, i32* @r7, align 4
  %v9_9b40 = icmp eq i32 %v0_9b40, %v1_9b40
  %v0_9b44 = load i32, i32* @fp, align 4
  %v1_9b44 = add i32 %v0_9b44, 4
  store i32 %v1_9b44, i32* @fp, align 4
  br i1 %v9_9b40, label %dec_label_pc_9b00.loopexit, label %dec_label_pc_9b18

; uselistorder directives
  uselistorder i32 %v1_9b44, { 1, 0 }
  uselistorder i32 %v0_9b40, { 1, 0 }
  uselistorder i32 %v1_9af4, { 1, 0 }
  uselistorder i32 %v1_9ae0, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_9a64, { 1, 0 }
  uselistorder i32 %v8_9a34, { 1, 2, 0 }
  uselistorder i32 %v0_9a14, { 1, 0, 2 }
  uselistorder i32 %v3_99c0, { 1, 3, 2, 0 }
  uselistorder i32 %v1_99b0, { 1, 2, 0 }
  uselistorder i32 %v3_9984, { 1, 0 }
  uselistorder i32 %v3_9960, { 1, 0 }
  uselistorder i32 %v3_98c8, { 0, 3, 1, 2 }
  uselistorder i32 %v1_9874, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 15, 1, 10, 11, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 16, 14, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_9ac8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_9ac8, { 1, 0 }
  uselistorder label %dec_label_pc_9ac4, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_9a58, { 1, 0 }
  uselistorder label %dec_label_pc_9954, { 1, 0 }
}

define i32 @function_9b54(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_9b54:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_9b58 = urem i32 %arg1, 256
  store i32 %v1_9b58, i32* @fp, align 4
  store i32 %v1_9b58, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_9b70 = urem i32 %arg3, 256
  store i32 %v1_9b70, i32* @r4, align 4
  %v2_9b74 = call i32 @function_12a18(i32 %v1_9b58, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_9b80 = load i32, i32* @fp, align 4
  store i32 %v0_9b80, i32* %r0.global-to-local, align 4
  %v2_9b84 = call i32 @function_12a18(i32 %v0_9b80, i32 4)
  %v0_9b88 = load i32, i32* @r5, align 4
  store i32 %v0_9b88, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_9b98 = load i32, i32* @r4, align 4
  store i32 %v0_9b98, i32* %r0.global-to-local, align 4
  %v5_9b9c = inttoptr i32 %v0_9b88 to i32*
  %v6_9b9c = call i32 @function_85e0(i32 %v0_9b98, i32* %v5_9b9c, i32 2, i32 0, i32 %v2_9b84)
  %v1_9ba8 = urem i32 %v6_9b9c, 256
  store i32 %v1_9ba8, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_9bb4 = load i32, i32* @r5, align 4
  store i32 %v0_9bb4, i32* %r1.global-to-local, align 4
  %v0_9bb8 = load i32, i32* @r4, align 4
  store i32 %v0_9bb8, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_9b9c, 16777216
  %v5_9bc0 = sdiv i32 %sext, 16777216
  %v6_9bc0 = inttoptr i32 %v0_9bb4 to i32*
  %v7_9bc0 = call i32 @function_85e0(i32 %v0_9bb8, i32* %v6_9bc0, i32 3, i32 65535, i32 %v5_9bc0)
  %v0_9bc4 = load i32, i32* @r5, align 4
  store i32 %v0_9bc4, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_9bc0, i32* @r6, align 4
  %v0_9bd4 = load i32, i32* @r4, align 4
  store i32 %v0_9bd4, i32* %r0.global-to-local, align 4
  %v5_9bd8 = inttoptr i32 %v0_9bc4 to i32*
  %v6_9bd8 = call i32 @function_85e0(i32 %v0_9bd4, i32* %v5_9bd8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_9be0 = urem i32 %v6_9bd8, 256
  store i32 %v1_9be0, i32* %ip.global-to-local, align 4
  %v0_9be4 = load i32, i32* @r5, align 4
  store i32 %v0_9be4, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9bf0 = load i32, i32* @r4, align 4
  store i32 %v0_9bf0, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_9bd8, 16777216
  %v5_9bf8 = sdiv i32 %sext6, 16777216
  %v6_9bf8 = inttoptr i32 %v0_9be4 to i32*
  %v7_9bf8 = call i32 @function_85e0(i32 %v0_9bf0, i32* %v6_9bf8, i32 5, i32 1, i32 %v5_9bf8)
  %v1_9c04 = urem i32 %v7_9bf8, 256
  store i32 %v1_9c04, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_9c0c = load i32, i32* @r5, align 4
  store i32 %v0_9c0c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_9c14 = load i32, i32* @r4, align 4
  store i32 %v0_9c14, i32* %r0.global-to-local, align 4
  %v5_9c1c = inttoptr i32 %v0_9c0c to i32*
  %v6_9c1c = call i32 @function_85e0(i32 %v0_9c14, i32* %v5_9c1c, i32 7, i32 65535, i32 %v1_9c04)
  %v0_9c20 = load i32, i32* @r5, align 4
  store i32 %v0_9c20, i32* %r1.global-to-local, align 4
  %v3_9c24 = mul i32 %v6_9c1c, 65536
  store i32 %v3_9c24, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c30 = load i32, i32* @r4, align 4
  store i32 %v0_9c30, i32* %r0.global-to-local, align 4
  %v5_9c34 = inttoptr i32 %v0_9c20 to i32*
  %v6_9c34 = call i32 @function_85e0(i32 %v0_9c30, i32* %v5_9c34, i32 11, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v1_9c3c = urem i32 %v6_9c34, 256
  store i32 %v1_9c3c, i32* %ip.global-to-local, align 4
  %v0_9c40 = load i32, i32* @r5, align 4
  store i32 %v0_9c40, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c4c = load i32, i32* @r4, align 4
  store i32 %v0_9c4c, i32* %r0.global-to-local, align 4
  %v5_9c54 = inttoptr i32 %v0_9c40 to i32*
  %v6_9c54 = call i32 @function_85e0(i32 %v0_9c4c, i32* %v5_9c54, i32 12, i32 1, i32 %v1_9c3c)
  %v1_9c5c = urem i32 %v6_9c54, 256
  store i32 %v1_9c5c, i32* %ip.global-to-local, align 4
  %v0_9c60 = load i32, i32* @r5, align 4
  store i32 %v0_9c60, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c6c = load i32, i32* @r4, align 4
  store i32 %v0_9c6c, i32* %r0.global-to-local, align 4
  %v5_9c74 = inttoptr i32 %v0_9c60 to i32*
  %v6_9c74 = call i32 @function_85e0(i32 %v0_9c6c, i32* %v5_9c74, i32 13, i32 1, i32 %v1_9c5c)
  %v1_9c7c = urem i32 %v6_9c74, 256
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_9c80 = load i32, i32* @r5, align 4
  store i32 %v0_9c80, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9c8c = load i32, i32* @r4, align 4
  store i32 %v0_9c8c, i32* %r0.global-to-local, align 4
  %v5_9c94 = inttoptr i32 %v0_9c80 to i32*
  %v6_9c94 = call i32 @function_85e0(i32 %v0_9c8c, i32* %v5_9c94, i32 14, i32 1, i32 %v1_9c7c)
  %v1_9c9c = urem i32 %v6_9c94, 256
  store i32 %v1_9c9c, i32* %ip.global-to-local, align 4
  %v0_9ca0 = load i32, i32* @r5, align 4
  store i32 %v0_9ca0, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cac = load i32, i32* @r4, align 4
  store i32 %v0_9cac, i32* %r0.global-to-local, align 4
  %v5_9cb4 = inttoptr i32 %v0_9ca0 to i32*
  %v6_9cb4 = call i32 @function_85e0(i32 %v0_9cac, i32* %v5_9cb4, i32 15, i32 1, i32 %v1_9c9c)
  %v1_9cbc = urem i32 %v6_9cb4, 256
  store i32 %v1_9cbc, i32* %ip.global-to-local, align 4
  %v0_9cc0 = load i32, i32* @r5, align 4
  store i32 %v0_9cc0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9ccc = load i32, i32* @r4, align 4
  store i32 %v0_9ccc, i32* %r0.global-to-local, align 4
  %v5_9cd4 = inttoptr i32 %v0_9cc0 to i32*
  %v6_9cd4 = call i32 @function_85e0(i32 %v0_9ccc, i32* %v5_9cd4, i32 16, i32 1, i32 %v1_9cbc)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_9cd4, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_9ce4 = load i32, i32* @r5, align 4
  store i32 %v0_9ce4, i32* %r1.global-to-local, align 4
  %v0_9ce8 = load i32, i32* @r4, align 4
  store i32 %v0_9ce8, i32* %r0.global-to-local, align 4
  %v1_9cec = urem i32 %v6_9cd4, 256
  store i32 %v1_9cec, i32* @r8, align 4
  %v5_9cf0 = inttoptr i32 %v0_9ce4 to i32*
  %v6_9cf0 = call i32 @function_85e0(i32 %v0_9ce8, i32* %v5_9cf0, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_9cfc = load i32, i32* @r5, align 4
  store i32 %v0_9cfc, i32* %r1.global-to-local, align 4
  store i32 %v6_9cf0, i32* @sb, align 4
  %v0_9d04 = load i32, i32* @r4, align 4
  store i32 %v0_9d04, i32* %r0.global-to-local, align 4
  %v5_9d08 = inttoptr i32 %v0_9cfc to i32*
  %v6_9d08 = call i32 @function_85e0(i32 %v0_9d04, i32* %v5_9d08, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_9d14 = urem i32 %v6_9d08, 256
  store i32 %v1_9d14, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_9d24 = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_9d28 = load i32, i32* @r7, align 4
  %v3_9d28 = udiv i32 %v0_9d28, 65536
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  %v7_9d2c = icmp eq i32 %v3_9d24, -1
  store i1 %v7_9d2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d2c, label %dec_label_pc_9f88, label %dec_label_pc_9d3c

dec_label_pc_9d3c:                                ; preds = %dec_label_pc_9b54
  store i32 1, i32* %stack_var_-40, align 4
  %v6_9d44 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_9d44, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_9d58 = call i32 @function_126fc(i32 %v3_9d24, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_9d58, i32* %r0.global-to-local, align 4
  %v7_9d5c = icmp eq i32 %v6_9d58, -1
  store i1 %v7_9d5c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_9d5c, label %dec_label_pc_9f80, label %dec_label_pc_9d64

dec_label_pc_9d64:                                ; preds = %dec_label_pc_9d3c
  %v0_9d64 = load i32, i32* @fp, align 4
  %v2_9d64 = icmp eq i32 %v0_9d64, 0
  store i1 %v2_9d64, i1* %cpsr_z.global-to-local, align 1
  %v0_9d68 = load i32, i32* @r6, align 4
  %v3_9d68 = mul i32 %v0_9d68, 65536
  store i32 %v3_9d68, i32* %r0.global-to-local, align 4
  %v3_9d6c = urem i32 %v0_9d68, 65536
  store i32 %v3_9d6c, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_9d64, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_9d90.preheader

.thread18:                                        ; preds = %dec_label_pc_9d64
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_a214

dec_label_pc_9d90.preheader:                      ; preds = %dec_label_pc_9d64
  %v5_9d74 = load i32, i32* @r7, align 4
  %v8_9d74 = udiv i32 %v5_9d74, 16777216
  %tmp73 = udiv i32 %v0_9d68, 256
  %v8_9d78 = urem i32 %tmp73, 256
  store i32 %v8_9d78, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_9e7c = icmp ugt i32 %v0_9d28, -65537
  %v2_9ea0 = ptrtoint i32* %stack_var_-60 to i32
  %v3_9eac = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_9edc = ptrtoint i32* %stack_var_-76 to i32
  %v2_9ee0 = ptrtoint i32* %stack_var_-44 to i32
  %v2_9ee4 = ptrtoint i32* %stack_var_-332 to i32
  %v4_9f30 = zext i8 %tmp31 to i32
  %v4_9f34 = zext i8 %tmp30 to i32
  %v4_9f40 = mul nuw nsw i32 %v4_9f34, 256
  %v4_9f50 = zext i8 %tmp to i32
  %v1_9f54 = and i32 %v4_9f50, 18
  %v2_9f58 = icmp eq i32 %v1_9f54, 18
  %v1_9e8c = mul nuw nsw i32 %v3_9d28, 256
  %v4_9e90 = and i32 %v1_9e8c, 65280
  %v5_9e90 = or i32 %v8_9d74, %v4_9e90
  %v3_9e9493 = udiv i32 %v4_9e90, 256
  %v1_9e98 = trunc i32 %v3_9e9493 to i8
  %v1_a05c = mul i32 %v0_9d68, 256
  %v4_a064 = and i32 %v1_a05c, 65280
  %v5_9f40 = or i32 %v4_9f30, %v4_9f40
  %v1_9f60 = and i32 %v4_9f50, 5
  %v2_9f60 = icmp eq i32 %v1_9f60, 0
  %v1_9e9c = trunc i32 %v8_9d74 to i8
  %v5_a064 = or i32 %v8_9d78, %v4_a064
  %v1_a084 = trunc i32 %v5_9bc0 to i8
  %v1_a164 = urem i32 %v6_9c34, 2
  %tmp94 = sub nsw i32 0, %v1_a164
  %v4_a16c = and i32 %tmp94, 32
  %v1_a17c = urem i32 %v6_9c54, 2
  %tmp95 = sub nsw i32 0, %v1_a17c
  %v4_a184 = and i32 %tmp95, 16
  %v1_a194 = urem i32 %v6_9c74, 2
  %tmp96 = sub nsw i32 0, %v1_a194
  %v4_a19c = and i32 %tmp96, 8
  %v1_a1ac = urem i32 %v6_9c94, 2
  %tmp97 = sub nsw i32 0, %v1_a1ac
  %v4_a1b4 = and i32 %tmp97, 4
  %v1_a1c4 = urem i32 %v6_9cb4, 2
  %tmp98 = sub nsw i32 0, %v1_a1c4
  %v3_a1cc = and i32 %tmp98, 2
  br label %dec_label_pc_9d90

dec_label_pc_9d90:                                ; preds = %dec_label_pc_a200, %dec_label_pc_9f68, %dec_label_pc_9d90.preheader
  store i32 %v8_9d78, i32* %r3.global-to-local, align 4
  %v0_9d9c = load i32, i32* @sb, align 4
  %v1_9d9c = add i32 %v0_9d9c, 40
  store i32 %v1_9d9c, i32* @sl, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9da0:                                ; preds = %dec_label_pc_9f74, %dec_label_pc_9d90
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_9dac = call i32 @function_1272c(i32 2, i32 1, i32 0)
  store i32 %v3_9dac, i32* %r0.global-to-local, align 4
  %v7_9db0 = icmp eq i32 %v3_9dac, -1
  store i1 %v7_9db0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_9dac, i32* @r7, align 4
  br i1 %v7_9db0, label %dec_label_pc_a200, label %dec_label_pc_9dbc

dec_label_pc_9dbc:                                ; preds = %dec_label_pc_9da0
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_9dc4 = call i32 @function_11d54(i32 %v3_9dac, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_9dcc = or i32 %v2_9dc4, 2048
  store i32 %v1_9dcc, i32* @r2, align 4
  %v0_9dd0 = load i32, i32* @r7, align 4
  store i32 %v0_9dd0, i32* %r0.global-to-local, align 4
  %v2_9dd4 = call i32 @function_11d54(i32 %v0_9dd0, i32 4)
  store i32 %v2_9dd4, i32* %r0.global-to-local, align 4
  %v3_9dd8 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_9de8 = mul i32 %v3_9dd8, 24
  store i32 %v5_9de8, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_9df8 = add i32 %v5_9de8, %arg2
  store i32 %v2_9df8, i32* %r2.global-to-local, align 4
  %v1_9dfc = add i32 %v2_9df8, 20
  %v2_9dfc = inttoptr i32 %v1_9dfc to i8*
  %v3_9dfc = load i8, i8* %v2_9dfc, align 1
  %v4_9dfc = zext i8 %v3_9dfc to i32
  store i32 %v4_9dfc, i32* %r3.global-to-local, align 4
  %v2_9e00 = icmp ugt i8 %v3_9dfc, 30
  %v7_9e00 = icmp eq i8 %v3_9dfc, 31
  store i1 %v7_9e00, i1* %cpsr_z.global-to-local, align 1
  %v2_9e04 = xor i1 %v7_9e00, true
  %v3_9e04 = and i1 %v2_9e00, %v2_9e04
  %v5_9e04 = add i32 %v2_9df8, 16
  %v6_9e04 = inttoptr i32 %v5_9e04 to i32*
  %v7_9e04 = load i32, i32* %v6_9e04, align 4
  br i1 %v3_9e04, label %dec_label_pc_9e70, label %dec_label_pc_9e10

dec_label_pc_9e10:                                ; preds = %dec_label_pc_9dbc
  store i32 %v7_9e04, i32* @r4, align 4
  %v0_9e14 = call i32 @function_ebc8()
  store i32 %v0_9e14, i32* %r0.global-to-local, align 4
  %v3_9e18 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_9e24 = mul i32 %v3_9e18, 24
  %v0_9e28 = load i32, i32* @r4, align 4
  %v2_9e2c = add i32 %v5_9e24, %arg2
  store i32 %v2_9e2c, i32* %r1.global-to-local, align 4
  %v1_9e30 = and i32 %v0_9e28, 65280
  store i32 %v1_9e30, i32* %r3.global-to-local, align 4
  %v1_9e28 = udiv i32 %v0_9e28, 256
  %v3_9e34 = and i32 %v1_9e28, 65280
  store i32 %v3_9e34, i32* %r2.global-to-local, align 4
  %v3_9e38 = mul i32 %v0_9e28, 16777216
  store i32 %v3_9e38, i32* %ip.global-to-local, align 4
  %v1_9e3c = add i32 %v2_9e2c, 20
  %v2_9e3c = inttoptr i32 %v1_9e3c to i8*
  %v3_9e3c = load i8, i8* %v2_9e3c, align 1
  %v4_9e3c = zext i8 %v3_9e3c to i32
  store i32 %v4_9e3c, i32* %lr.global-to-local, align 4
  %v4_9e40 = mul nuw nsw i32 %v1_9e30, 256
  %v5_9e40 = or i32 %v4_9e40, %v3_9e38
  store i32 %v5_9e40, i32* %ip.global-to-local, align 4
  %v2_9e48 = call i32 @llvm.bswap.i32(i32 %v0_9e28)
  %v7_9e4c = lshr i32 %v0_9e14, %v4_9e3c
  %v8_9e4c = add i32 %v7_9e4c, %v2_9e48
  store i32 %v8_9e4c, i32* %r2.global-to-local, align 4
  %v3_9e58 = mul i32 %v8_9e4c, 16777216
  %v1_9e5c = and i32 %v8_9e4c, 65280
  store i32 %v1_9e5c, i32* %r0.global-to-local, align 4
  %v4_9e60 = mul nuw nsw i32 %v1_9e5c, 256
  %v5_9e60 = or i32 %v4_9e60, %v3_9e58
  store i32 %v5_9e60, i32* %r1.global-to-local, align 4
  %v2_9e68 = call i32 @llvm.bswap.i32(i32 %v8_9e4c)
  br label %dec_label_pc_9e70

dec_label_pc_9e70:                                ; preds = %dec_label_pc_9dbc, %dec_label_pc_9e10
  %storemerge25 = phi i32 [ %v2_9e68, %dec_label_pc_9e10 ], [ %v7_9e04, %dec_label_pc_9dbc ]
  store i32 %v3_9d28, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_9e7c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_9e7c, label %dec_label_pc_9f90, label %dec_label_pc_9e84

dec_label_pc_9e84:                                ; preds = %dec_label_pc_9e70
  store i32 %v8_9d74, i32* %ip.global-to-local, align 4
  store i32 %v5_9e90, i32* %r3.global-to-local, align 4
  store i32 %v3_9e9493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_9ea0

dec_label_pc_9ea0:                                ; preds = %dec_label_pc_9f90, %dec_label_pc_9e84
  %stack_var_-57.0 = phi i8 [ %v1_9f98, %dec_label_pc_9f90 ], [ %v1_9e98, %dec_label_pc_9e84 ]
  %storemerge = phi i8 [ %v1_9f90, %dec_label_pc_9f90 ], [ %v1_9e9c, %dec_label_pc_9e84 ]
  store i32 %v2_9ea0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_9ea8 = load i32, i32* @r7, align 4
  store i32 %v0_9ea8, i32* %r0.global-to-local, align 4
  %v4_9eac = call i32 @function_12588(i32 %v0_9ea8, %sockaddr* nonnull %v3_9eac, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_9eb4 = call i32 @function_120e8(i32* null)
  store i32 %v2_9eb4, i32* %r0.global-to-local, align 4
  store i32 %v2_9eb4, i32* @r4, align 4
  %v9_9f14 = icmp eq i32 %tmp32, %storemerge25
  %v4_9f38 = zext i8 %storemerge to i32
  %v4_9f3c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_9f14 to i32
  %v9_9f28 = icmp eq i1 %v9_9f14, false
  %v4_9f44 = mul nuw nsw i32 %v4_9f3c, 256
  %v5_9f44 = or i32 %v4_9f44, %v4_9f38
  %v9_9f48 = icmp eq i32 %v5_9f44, %v5_9f40
  br label %dec_label_pc_9ed0

dec_label_pc_9ec0:                                ; preds = %.thread23, %dec_label_pc_9f30, %dec_label_pc_9f60, %bb75
  %v2_9ec0 = call i32 @function_120e8(i32* null)
  %v0_9ec4 = load i32, i32* @r4, align 4
  %v2_9ec4 = sub i32 %v2_9ec0, %v0_9ec4
  store i32 %v2_9ec4, i32* %r0.global-to-local, align 4
  %v7_9ec8 = icmp eq i32 %v2_9ec4, 10
  store i1 %v7_9ec8, i1* %cpsr_z.global-to-local, align 1
  %v8_9ecc = icmp sgt i32 %v2_9ec4, 10
  br i1 %v8_9ecc, label %dec_label_pc_9f74, label %dec_label_pc_9ed0

dec_label_pc_9ed0:                                ; preds = %dec_label_pc_9ec0, %dec_label_pc_9ea0
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_9edc, i32* %lr.global-to-local, align 4
  store i32 %v2_9ee0, i32* %ip.global-to-local, align 4
  store i32 %v2_9ee4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v7_9ef8 = call i32 @function_12668(i32 %v3_9d24, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_9edc, i32 %v2_9ee0)
  store i32 %v7_9ef8, i32* %r2.global-to-local, align 4
  %v7_9f00 = icmp eq i32 %v7_9ef8, -1
  store i1 %v7_9f00, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_9f00, label %dec_label_pc_9f88, label %dec_label_pc_9f0c

dec_label_pc_9f0c:                                ; preds = %dec_label_pc_9ed0
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_9f20 = icmp eq i32 %v7_9ef8, 40
  store i1 %v7_9f20, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_9ef8, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_9f0c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_9ec0

bb75:                                             ; preds = %dec_label_pc_9f0c
  store i1 %v9_9f28, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f28, label %dec_label_pc_9ec0, label %dec_label_pc_9f30

dec_label_pc_9f30:                                ; preds = %bb75
  store i32 %v4_9f34, i32* %r1.global-to-local, align 4
  store i32 %v4_9f38, i32* %ip.global-to-local, align 4
  store i32 %v4_9f3c, i32* %r2.global-to-local, align 4
  store i32 %v5_9f40, i32* %r3.global-to-local, align 4
  store i32 %v5_9f44, i32* @r5, align 4
  store i1 %v9_9f48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_9f48, label %dec_label_pc_9f50, label %dec_label_pc_9ec0

dec_label_pc_9f50:                                ; preds = %dec_label_pc_9f30
  store i32 %v4_9f50, i32* %r2.global-to-local, align 4
  store i32 %v1_9f54, i32* %r3.global-to-local, align 4
  store i1 %v2_9f58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f58, label %dec_label_pc_9fa4, label %dec_label_pc_9f60

dec_label_pc_9f60:                                ; preds = %dec_label_pc_9f50
  store i1 %v2_9f60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_9f60, label %dec_label_pc_9ec0, label %dec_label_pc_9f68

dec_label_pc_9f68:                                ; preds = %dec_label_pc_9f60
  %v0_9f68 = load i32, i32* @r7, align 4
  store i32 %v0_9f68, i32* %r0.global-to-local, align 4
  %v1_9f6c = call i32 @function_11e18(i32 %v0_9f68)
  store i32 %v1_9f6c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9d90

dec_label_pc_9f74:                                ; preds = %dec_label_pc_9ec0
  %v0_9f74 = load i32, i32* @r7, align 4
  store i32 %v0_9f74, i32* %r0.global-to-local, align 4
  %v1_9f78 = call i32 @function_11e18(i32 %v0_9f74)
  store i32 %v1_9f78, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9da0

dec_label_pc_9f80:                                ; preds = %dec_label_pc_9d3c
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v1_9f84 = call i32 @function_11e18(i32 %v3_9d24)
  store i32 %v1_9f84, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_9f88

dec_label_pc_9f88:                                ; preds = %dec_label_pc_9ed0, %dec_label_pc_9b54, %dec_label_pc_9f80
  %v29_9f8c = phi i32 [ %v3_9d24, %dec_label_pc_9b54 ], [ %v1_9f84, %dec_label_pc_9f80 ], [ 0, %dec_label_pc_9ed0 ]
  ret i32 %v29_9f8c

dec_label_pc_9f90:                                ; preds = %dec_label_pc_9e70
  %v0_9f90 = call i32 @function_ebc8()
  %v1_9f90 = trunc i32 %v0_9f90 to i8
  store i32 %v0_9f90, i32* %r0.global-to-local, align 4
  %v4_9f94 = sdiv i32 %v0_9f90, 256
  store i32 %v4_9f94, i32* %r3.global-to-local, align 4
  %v1_9f98 = trunc i32 %v4_9f94 to i8
  br label %dec_label_pc_9ea0

dec_label_pc_9fa4:                                ; preds = %dec_label_pc_9f50
  %v3_9fa4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_9fa4, i32* @r4, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_9fac = mul i32 %v3_9fa4, 16
  store i32 %v3_9fac, i32* %ip.global-to-local, align 4
  %v3_9fb0 = add i32 %v3_9fac, %v2_9b74
  %v4_9fb0 = inttoptr i32 %v3_9fb0 to i32*
  store i32 %storemerge25, i32* %v4_9fb0, align 4
  %v0_9fb4 = load i32, i32* @r6, align 4
  %v1_9fb4 = add i32 %v0_9fb4, 4
  %v2_9fb4 = inttoptr i32 %v1_9fb4 to i32*
  %v3_9fb4 = load i32, i32* %v2_9fb4, align 4
  store i32 %v3_9fb4, i32* %r0.global-to-local, align 4
  %v1_9fbc = and i32 %v3_9fb4, 65280
  store i32 %v1_9fbc, i32* %r1.global-to-local, align 4
  store i32 %v2_9b74, i32* %lr.global-to-local, align 4
  %v3_9fc4 = mul i32 %v3_9fb4, 16777216
  %v4_9fcc = mul nuw nsw i32 %v1_9fbc, 256
  %v5_9fcc = or i32 %v4_9fcc, %v3_9fc4
  store i32 %v5_9fcc, i32* %r2.global-to-local, align 4
  %v1_9fd4 = load i32, i32* %ip.global-to-local, align 4
  %v2_9fd4 = add i32 %v1_9fd4, %v2_9b74
  store i32 %v2_9fd4, i32* %ip.global-to-local, align 4
  %v2_9fd8 = call i32 @llvm.bswap.i32(i32 %v3_9fb4)
  store i32 %v2_9fd8, i32* %r3.global-to-local, align 4
  %v2_9fdc = add i32 %v2_9fd4, 4
  %v3_9fdc = inttoptr i32 %v2_9fdc to i32*
  store i32 %v2_9fd8, i32* %v3_9fdc, align 4
  %v0_9fe0 = load i32, i32* @r6, align 4
  %v1_9fe0 = add i32 %v0_9fe0, 8
  %v2_9fe0 = inttoptr i32 %v1_9fe0 to i32*
  %v3_9fe0 = load i32, i32* %v2_9fe0, align 4
  store i32 %v3_9fe0, i32* %r0.global-to-local, align 4
  %v1_9fe8 = and i32 %v3_9fe0, 65280
  store i32 %v1_9fe8, i32* %r1.global-to-local, align 4
  %v3_9fec = mul i32 %v3_9fe0, 16777216
  %v4_9ff4 = mul nuw nsw i32 %v1_9fe8, 256
  %v5_9ff4 = or i32 %v4_9ff4, %v3_9fec
  store i32 %v5_9ff4, i32* %r2.global-to-local, align 4
  %v2_9ffc = call i32 @llvm.bswap.i32(i32 %v3_9fe0)
  store i32 %v2_9ffc, i32* %r3.global-to-local, align 4
  %v1_a000 = load i32, i32* %ip.global-to-local, align 4
  %v2_a000 = add i32 %v1_a000, 8
  %v3_a000 = inttoptr i32 %v2_a000 to i32*
  store i32 %v2_9ffc, i32* %v3_a000, align 4
  %v0_a004 = load i32, i32* @r6, align 4
  %v1_a004 = inttoptr i32 %v0_a004 to i32*
  %v2_a004 = load i32, i32* %v1_a004, align 4
  %v3_a008 = udiv i32 %v2_a004, 65536
  store i32 %v3_a008, i32* %r2.global-to-local, align 4
  %v3_a00c3 = udiv i32 %v2_a004, 16777216
  store i32 %v3_a00c3, i32* %r1.global-to-local, align 4
  %v0_a010 = load i32, i32* @r5, align 4
  %v3_a010 = sdiv i32 %v0_a010, 256
  store i32 %v3_a010, i32* %r3.global-to-local, align 4
  %v1_a014 = trunc i32 %v3_a010 to i8
  %v2_a014 = load i32, i32* %ip.global-to-local, align 4
  %v3_a014 = add i32 %v2_a014, 15
  %v4_a014 = inttoptr i32 %v3_a014 to i8*
  store i8 %v1_a014, i8* %v4_a014, align 1
  %v0_a018 = load i32, i32* %r1.global-to-local, align 4
  %v1_a018 = trunc i32 %v0_a018 to i8
  %v2_a018 = load i32, i32* %ip.global-to-local, align 4
  %v3_a018 = add i32 %v2_a018, 13
  %v4_a018 = inttoptr i32 %v3_a018 to i8*
  store i8 %v1_a018, i8* %v4_a018, align 1
  %v0_a01c = load i32, i32* %r2.global-to-local, align 4
  %v1_a01c = trunc i32 %v0_a01c to i8
  %v2_a01c = load i32, i32* %ip.global-to-local, align 4
  %v3_a01c = add i32 %v2_a01c, 12
  %v4_a01c = inttoptr i32 %v3_a01c to i8*
  store i8 %v1_a01c, i8* %v4_a01c, align 1
  %v0_a020 = load i32, i32* @r5, align 4
  %v1_a020 = trunc i32 %v0_a020 to i8
  %v2_a020 = load i32, i32* %ip.global-to-local, align 4
  %v3_a020 = add i32 %v2_a020, 14
  %v4_a020 = inttoptr i32 %v3_a020 to i8*
  store i8 %v1_a020, i8* %v4_a020, align 1
  %v0_a024 = load i32, i32* @sl, align 4
  store i32 %v0_a024, i32* %r0.global-to-local, align 4
  %v1_a028 = call i32 @function_128c4(i32 %v0_a024)
  store i32 %v1_a028, i32* %r0.global-to-local, align 4
  store i32 %v2_9b84, i32* %r1.global-to-local, align 4
  %v3_a030 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a030, i32* %r2.global-to-local, align 4
  %v2_a034 = load i32, i32* @r4, align 4
  %v5_a034 = mul i32 %v2_a034, 4
  %v6_a034 = add i32 %v5_a034, %v2_9b84
  %v7_a034 = inttoptr i32 %v6_a034 to i32*
  store i32 %v1_a028, i32* %v7_a034, align 4
  %v0_a038 = load i32, i32* %r1.global-to-local, align 4
  %v1_a038 = load i32, i32* %r2.global-to-local, align 4
  %v4_a038 = mul i32 %v1_a038, 4
  %v5_a038 = add i32 %v4_a038, %v0_a038
  %v6_a038 = inttoptr i32 %v5_a038 to i32*
  %v7_a038 = load i32, i32* %v6_a038, align 4
  store i32 %v7_a038, i32* @r4, align 4
  %v1_a03c = inttoptr i32 %v7_a038 to i8*
  %v2_a03c = load i8, i8* %v1_a03c, align 1
  %tmp100 = urem i8 %v2_a03c, 16
  %v1_a040 = zext i8 %tmp100 to i32
  %v1_a044 = or i32 %v1_a040, 64
  store i32 %v1_a044, i32* %r3.global-to-local, align 4
  %v1_a048 = trunc i32 %v1_a044 to i8
  store i8 %v1_a048, i8* %v1_a03c, align 1
  %v0_a04c = load i32, i32* @r4, align 4
  %v1_a04c = inttoptr i32 %v0_a04c to i8*
  %v2_a04c = load i8, i8* %v1_a04c, align 1
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v1_a058 = and i8 %v2_a04c, -16
  %v1_a060 = or i8 %v1_a058, 5
  store i32 %v5_a064, i32* %r0.global-to-local, align 4
  %v0_a068 = load i32, i32* @sl, align 4
  %v3_a068 = mul i32 %v0_a068, 65536
  store i32 %v3_a068, i32* %r2.global-to-local, align 4
  store i32 %v1_9c04, i32* %lr.global-to-local, align 4
  store i8 %v1_a060, i8* %v1_a04c, align 1
  store i32 %v5_9bc0, i32* %r1.global-to-local, align 4
  %v0_a078 = load i32, i32* %r2.global-to-local, align 4
  %v3_a078 = udiv i32 %v0_a078, 65536
  %v1_a07c = urem i32 %v3_a078, 256
  store i32 %v1_a07c, i32* %r3.global-to-local, align 4
  %v3_a080 = udiv i32 %v0_a078, 16777216
  store i32 %v3_a080, i32* %r2.global-to-local, align 4
  %v2_a084 = load i32, i32* @r4, align 4
  %v3_a084 = add i32 %v2_a084, 1
  %v4_a084 = inttoptr i32 %v3_a084 to i8*
  store i8 %v1_a084, i8* %v4_a084, align 1
  %v0_a088 = load i32, i32* %r2.global-to-local, align 4
  %v1_a088 = load i32, i32* %r3.global-to-local, align 4
  %v4_a088 = mul i32 %v1_a088, 256
  %v5_a088 = or i32 %v4_a088, %v0_a088
  store i32 %v5_a088, i32* %r2.global-to-local, align 4
  %v1_a08c = trunc i32 %v0_a088 to i8
  %v2_a08c = load i32, i32* @r4, align 4
  %v3_a08c = add i32 %v2_a08c, 2
  %v4_a08c = inttoptr i32 %v3_a08c to i8*
  store i8 %v1_a08c, i8* %v4_a08c, align 1
  %v0_a090 = load i32, i32* %lr.global-to-local, align 4
  %v2_a090 = icmp eq i32 %v0_a090, 0
  store i1 %v2_a090, i1* %cpsr_z.global-to-local, align 1
  %v0_a094 = load i32, i32* %r2.global-to-local, align 4
  %v3_a094 = sdiv i32 %v0_a094, 256
  store i32 %v3_a094, i32* %r3.global-to-local, align 4
  store i32 %v5_9bf8, i32* %r2.global-to-local, align 4
  %v1_a09c = trunc i32 %v3_a094 to i8
  %v2_a09c = load i32, i32* @r4, align 4
  %v3_a09c = add i32 %v2_a09c, 3
  %v4_a09c = inttoptr i32 %v3_a09c to i8*
  store i8 %v1_a09c, i8* %v4_a09c, align 1
  %v0_a0a0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a0, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_9fa4
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_9fa4, %bb76
  %v0_a0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_a0a4 = trunc i32 %v0_a0a4 to i8
  %v2_a0a4 = load i32, i32* @r4, align 4
  %v3_a0a4 = add i32 %v2_a0a4, 8
  %v4_a0a4 = inttoptr i32 %v3_a0a4 to i8*
  store i8 %v1_a0a4, i8* %v4_a0a4, align 1
  %v0_a0a8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0a8, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a0a8 = load i32, i32* %r3.global-to-local, align 4
  %v2_a0a8 = trunc i32 %v1_a0a8 to i8
  %v3_a0a8 = load i32, i32* @r4, align 4
  %v4_a0a8 = add i32 %v3_a0a8, 6
  %v5_a0a8 = inttoptr i32 %v4_a0a8 to i8*
  store i8 %v2_a0a8, i8* %v5_a0a8, align 1
  %v0_a0ac.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0ac.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a0b4 = load i32, i32* @r4, align 4
  %v3_a0b4 = add i32 %v2_a0b4, 9
  %v4_a0b4 = inttoptr i32 %v3_a0b4 to i8*
  store i8 6, i8* %v4_a0b4, align 1
  %v0_a0b8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a0b8, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a0b8 = load i32, i32* %r2.global-to-local, align 4
  %v2_a0b8 = trunc i32 %v1_a0b8 to i8
  %v3_a0b8 = load i32, i32* @r4, align 4
  %v4_a0b8 = add i32 %v3_a0b8, 7
  %v5_a0b8 = inttoptr i32 %v4_a0b8 to i8*
  store i8 %v2_a0b8, i8* %v5_a0b8, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a0c0 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_a0c0, i32* %r3.global-to-local, align 4
  %v0_a0c4 = load i32, i32* %r0.global-to-local, align 4
  %v3_a0c4 = sdiv i32 %v0_a0c4, 256
  store i32 %v3_a0c4, i32* %ip.global-to-local, align 4
  %v1_a0c8 = load i32, i32* @r4, align 4
  %v2_a0c8 = add i32 %v1_a0c8, 12
  %v3_a0c8 = inttoptr i32 %v2_a0c8 to i32*
  store i32 %v2_a0c0, i32* %v3_a0c8, align 4
  %v0_a0cc = load i32, i32* %ip.global-to-local, align 4
  %v1_a0cc = trunc i32 %v0_a0cc to i8
  %v2_a0cc = load i32, i32* @r4, align 4
  %v3_a0cc = add i32 %v2_a0cc, 5
  %v4_a0cc = inttoptr i32 %v3_a0cc to i8*
  store i8 %v1_a0cc, i8* %v4_a0cc, align 1
  %v3_a0d0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a0d0, i32* %r2.global-to-local, align 4
  store i32 %v2_9b74, i32* %ip.global-to-local, align 4
  %v4_a0d8 = mul i32 %v3_a0d0, 16
  %v5_a0d8 = add i32 %v4_a0d8, %v2_9b74
  %v6_a0d8 = inttoptr i32 %v5_a0d8 to i32*
  %v7_a0d8 = load i32, i32* %v6_a0d8, align 4
  store i32 %v7_a0d8, i32* %r3.global-to-local, align 4
  %v0_a0dc = load i32, i32* %r0.global-to-local, align 4
  %v1_a0dc = trunc i32 %v0_a0dc to i8
  %v2_a0dc = load i32, i32* @r4, align 4
  %v3_a0dc = add i32 %v2_a0dc, 4
  %v4_a0dc = inttoptr i32 %v3_a0dc to i8*
  store i8 %v1_a0dc, i8* %v4_a0dc, align 1
  %v0_a0e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a0e0 = load i32, i32* @r4, align 4
  %v2_a0e0 = add i32 %v1_a0e0, 16
  %v3_a0e0 = inttoptr i32 %v2_a0e0 to i32*
  store i32 %v0_a0e0, i32* %v3_a0e0, align 4
  %v0_a0e4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a0e4 = mul i32 %v0_a0e4, 16
  %v1_a0e8 = load i32, i32* %ip.global-to-local, align 4
  %v2_a0e8 = add i32 %v1_a0e8, %v3_a0e4
  store i32 %v2_a0e8, i32* %r2.global-to-local, align 4
  %v1_a0ec = add i32 %v2_a0e8, 13
  %v2_a0ec = inttoptr i32 %v1_a0ec to i8*
  %v3_a0ec = load i8, i8* %v2_a0ec, align 1
  %v4_a0ec = zext i8 %v3_a0ec to i32
  store i32 %v4_a0ec, i32* %r1.global-to-local, align 4
  %v1_a0f0 = add i32 %v2_a0e8, 12
  %v2_a0f0 = inttoptr i32 %v1_a0f0 to i8*
  %v3_a0f0 = load i8, i8* %v2_a0f0, align 1
  %v4_a0f0 = zext i8 %v3_a0f0 to i32
  %v4_a0f4 = mul nuw nsw i32 %v4_a0ec, 256
  %v5_a0f4 = or i32 %v4_a0f0, %v4_a0f4
  store i32 %v5_a0f4, i32* %r3.global-to-local, align 4
  %v2_a0f8 = load i32, i32* @r4, align 4
  %v3_a0f8 = add i32 %v2_a0f8, 20
  %v4_a0f8 = inttoptr i32 %v3_a0f8 to i8*
  store i8 %v3_a0f0, i8* %v4_a0f8, align 1
  %v0_a0fc = load i32, i32* @r4, align 4
  %v1_a0fc = add i32 %v0_a0fc, 20
  store i32 %v1_a0fc, i32* @r6, align 4
  %v0_a100 = load i32, i32* %r3.global-to-local, align 4
  %v3_a100 = sdiv i32 %v0_a100, 256
  store i32 %v3_a100, i32* %r3.global-to-local, align 4
  %v1_a104 = trunc i32 %v3_a100 to i8
  %v3_a104 = add i32 %v0_a0fc, 21
  %v4_a104 = inttoptr i32 %v3_a104 to i8*
  store i8 %v1_a104, i8* %v4_a104, align 1
  %v0_a108 = load i32, i32* @r6, align 4
  %v1_a108 = add i32 %v0_a108, 13
  %v2_a108 = inttoptr i32 %v1_a108 to i8*
  %v3_a108 = load i8, i8* %v2_a108, align 1
  %v4_a108 = zext i8 %v3_a108 to i32
  store i32 %v4_a108, i32* %r3.global-to-local, align 4
  %v0_a10c = load i32, i32* %r2.global-to-local, align 4
  %v1_a10c = add i32 %v0_a10c, 8
  %v2_a10c = inttoptr i32 %v1_a10c to i32*
  %v3_a10c = load i32, i32* %v2_a10c, align 4
  store i32 %v3_a10c, i32* %r1.global-to-local, align 4
  %v1_a110 = or i32 %v4_a108, 1
  store i32 %v1_a110, i32* %r3.global-to-local, align 4
  %v1_a114 = add i32 %v0_a10c, 15
  %v2_a114 = inttoptr i32 %v1_a114 to i8*
  %v3_a114 = load i8, i8* %v2_a114, align 1
  %v4_a114 = zext i8 %v3_a114 to i32
  store i32 %v4_a114, i32* %ip.global-to-local, align 4
  %v1_a118 = add i32 %v0_a10c, 14
  %v2_a118 = inttoptr i32 %v1_a118 to i8*
  %v3_a118 = load i8, i8* %v2_a118, align 1
  %v4_a118 = zext i8 %v3_a118 to i32
  store i32 %v4_a118, i32* %r0.global-to-local, align 4
  %v2_a11c = add i32 %v0_a108, 4
  %v3_a11c = inttoptr i32 %v2_a11c to i32*
  store i32 %v3_a10c, i32* %v3_a11c, align 4
  %v0_a120 = load i32, i32* %r2.global-to-local, align 4
  %v1_a120 = add i32 %v0_a120, 4
  %v2_a120 = inttoptr i32 %v1_a120 to i32*
  %v3_a120 = load i32, i32* %v2_a120, align 4
  store i32 %v3_a120, i32* %lr.global-to-local, align 4
  %v0_a124 = load i32, i32* %r3.global-to-local, align 4
  %v1_a124 = trunc i32 %v0_a124 to i8
  %v2_a124 = load i32, i32* @r6, align 4
  %v3_a124 = add i32 %v2_a124, 13
  %v4_a124 = inttoptr i32 %v3_a124 to i8*
  store i8 %v1_a124, i8* %v4_a124, align 1
  %v0_a128 = load i32, i32* @r6, align 4
  %v1_a128 = add i32 %v0_a128, 12
  %v2_a128 = inttoptr i32 %v1_a128 to i8*
  %v3_a128 = load i8, i8* %v2_a128, align 1
  %v4_a128 = zext i8 %v3_a128 to i32
  store i32 %v4_a128, i32* %r2.global-to-local, align 4
  %v1_a12c = add i32 %v0_a128, 13
  %v2_a12c = inttoptr i32 %v1_a12c to i8*
  %v3_a12c = load i8, i8* %v2_a12c, align 1
  %v4_a12c = zext i8 %v3_a12c to i32
  %v0_a130 = load i32, i32* %r0.global-to-local, align 4
  %v1_a130 = load i32, i32* %ip.global-to-local, align 4
  %v4_a130 = mul i32 %v1_a130, 256
  %v5_a130 = or i32 %v4_a130, %v0_a130
  store i32 %v5_a130, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a128, 16
  %v1_a134 = zext i8 %tmp101 to i32
  %v3_a138 = sdiv i32 %v5_a130, 256
  store i32 %v3_a138, i32* %r1.global-to-local, align 4
  %v1_a13c = or i32 %v1_a134, 128
  store i32 %v1_a13c, i32* %r2.global-to-local, align 4
  %v1_a140 = or i32 %v4_a12c, 16
  store i32 %v1_a140, i32* %r3.global-to-local, align 4
  %v1_a144 = trunc i32 %v3_a138 to i8
  %v3_a144 = add i32 %v0_a128, 3
  %v4_a144 = inttoptr i32 %v3_a144 to i8*
  store i8 %v1_a144, i8* %v4_a144, align 1
  %v0_a148 = load i32, i32* %lr.global-to-local, align 4
  %v1_a148 = load i32, i32* @r6, align 4
  %v2_a148 = add i32 %v1_a148, 8
  %v3_a148 = inttoptr i32 %v2_a148 to i32*
  store i32 %v0_a148, i32* %v3_a148, align 4
  %v0_a14c = load i32, i32* %r2.global-to-local, align 4
  %v1_a14c = trunc i32 %v0_a14c to i8
  %v2_a14c = load i32, i32* @r6, align 4
  %v3_a14c = add i32 %v2_a14c, 12
  %v4_a14c = inttoptr i32 %v3_a14c to i8*
  store i8 %v1_a14c, i8* %v4_a14c, align 1
  %v0_a150 = load i32, i32* %r3.global-to-local, align 4
  %v1_a150 = trunc i32 %v0_a150 to i8
  %v2_a150 = load i32, i32* @r6, align 4
  %v3_a150 = add i32 %v2_a150, 13
  %v4_a150 = inttoptr i32 %v3_a150 to i8*
  store i8 %v1_a150, i8* %v4_a150, align 1
  %v0_a154 = load i32, i32* %r0.global-to-local, align 4
  %v1_a154 = trunc i32 %v0_a154 to i8
  %v2_a154 = load i32, i32* @r6, align 4
  %v3_a154 = add i32 %v2_a154, 2
  %v4_a154 = inttoptr i32 %v3_a154 to i8*
  store i8 %v1_a154, i8* %v4_a154, align 1
  %v0_a158 = call i32 @function_ebc8()
  %v1_a158 = trunc i32 %v0_a158 to i8
  store i32 %v0_a158, i32* %r0.global-to-local, align 4
  store i32 %v1_9c3c, i32* %lr.global-to-local, align 4
  %v0_a160 = load i32, i32* @r6, align 4
  %v1_a160 = add i32 %v0_a160, 13
  %v2_a160 = inttoptr i32 %v1_a160 to i8*
  %v3_a160 = load i8, i8* %v2_a160, align 1
  %v4_a160 = zext i8 %v3_a160 to i32
  store i32 %v1_a164, i32* %r2.global-to-local, align 4
  %v1_a168 = and i32 %v4_a160, 223
  %v5_a16c = or i32 %v1_a168, %v4_a16c
  store i32 %v5_a16c, i32* %r3.global-to-local, align 4
  %v1_a170 = trunc i32 %v5_a16c to i8
  store i8 %v1_a170, i8* %v2_a160, align 1
  store i32 %v1_9c5c, i32* %r1.global-to-local, align 4
  %v0_a178 = load i32, i32* @r6, align 4
  %v1_a178 = add i32 %v0_a178, 13
  %v2_a178 = inttoptr i32 %v1_a178 to i8*
  %v3_a178 = load i8, i8* %v2_a178, align 1
  %v4_a178 = zext i8 %v3_a178 to i32
  store i32 %v1_a17c, i32* %r3.global-to-local, align 4
  %v1_a180 = and i32 %v4_a178, 239
  %v5_a184 = or i32 %v1_a180, %v4_a184
  store i32 %v5_a184, i32* %r2.global-to-local, align 4
  %v1_a188 = trunc i32 %v5_a184 to i8
  store i8 %v1_a188, i8* %v2_a178, align 1
  store i32 %v1_9c7c, i32* %ip.global-to-local, align 4
  %v0_a190 = load i32, i32* @r6, align 4
  %v1_a190 = add i32 %v0_a190, 13
  %v2_a190 = inttoptr i32 %v1_a190 to i8*
  %v3_a190 = load i8, i8* %v2_a190, align 1
  %v4_a190 = zext i8 %v3_a190 to i32
  store i32 %v1_a194, i32* %r2.global-to-local, align 4
  %v1_a198 = and i32 %v4_a190, 247
  %v5_a19c = or i32 %v1_a198, %v4_a19c
  store i32 %v5_a19c, i32* %r3.global-to-local, align 4
  %v1_a1a0 = trunc i32 %v5_a19c to i8
  store i8 %v1_a1a0, i8* %v2_a190, align 1
  %v0_a1a8 = load i32, i32* @r6, align 4
  %v1_a1a8 = add i32 %v0_a1a8, 13
  %v2_a1a8 = inttoptr i32 %v1_a1a8 to i8*
  %v3_a1a8 = load i8, i8* %v2_a1a8, align 1
  %v4_a1a8 = zext i8 %v3_a1a8 to i32
  store i32 %v1_a1ac, i32* %r3.global-to-local, align 4
  %v1_a1b0 = and i32 %v4_a1a8, 251
  %v5_a1b4 = or i32 %v1_a1b0, %v4_a1b4
  store i32 %v5_a1b4, i32* %r2.global-to-local, align 4
  %v1_a1b8 = trunc i32 %v5_a1b4 to i8
  store i8 %v1_a1b8, i8* %v2_a1a8, align 1
  store i32 %v1_9cbc, i32* %r1.global-to-local, align 4
  %v0_a1c0 = load i32, i32* @r6, align 4
  %v1_a1c0 = add i32 %v0_a1c0, 13
  %v2_a1c0 = inttoptr i32 %v1_a1c0 to i8*
  %v3_a1c0 = load i8, i8* %v2_a1c0, align 1
  %v4_a1c0 = zext i8 %v3_a1c0 to i32
  store i32 %v1_a1c4, i32* %r2.global-to-local, align 4
  %v1_a1c8 = and i32 %v4_a1c0, 253
  %v4_a1cc = or i32 %v1_a1c8, %v3_a1cc
  store i32 %v4_a1cc, i32* %r3.global-to-local, align 4
  %v1_a1d0 = trunc i32 %v4_a1cc to i8
  store i8 %v1_a1d0, i8* %v2_a1c0, align 1
  %v0_a1d4 = load i32, i32* @r6, align 4
  %v1_a1d4 = add i32 %v0_a1d4, 13
  %v2_a1d4 = inttoptr i32 %v1_a1d4 to i8*
  %v3_a1d4 = load i8, i8* %v2_a1d4, align 1
  %v4_a1d4 = zext i8 %v3_a1d4 to i32
  %v0_a1d8 = load i32, i32* @r8, align 4
  %v1_a1d8 = urem i32 %v0_a1d8, 2
  %v1_a1dc = and i32 %v4_a1d4, 254
  store i32 %v1_a1dc, i32* %r2.global-to-local, align 4
  %v4_a1e027 = udiv i32 %v0_a158, 256
  %v2_a1e4 = or i32 %v1_a1dc, %v1_a1d8
  store i32 %v2_a1e4, i32* %r3.global-to-local, align 4
  %v1_a1e8 = trunc i32 %v4_a1e027 to i8
  %v3_a1e8 = add i32 %v0_a1d4, 15
  %v4_a1e8 = inttoptr i32 %v3_a1e8 to i8*
  store i8 %v1_a1e8, i8* %v4_a1e8, align 1
  %v3_a1ec = load i32, i32* @r6, align 4
  %v4_a1ec = add i32 %v3_a1ec, 14
  %v5_a1ec = inttoptr i32 %v4_a1ec to i8*
  store i8 %v1_a158, i8* %v5_a1ec, align 1
  %v0_a1f0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a1f0 = trunc i32 %v0_a1f0 to i8
  %v2_a1f0 = load i32, i32* @r6, align 4
  %v3_a1f0 = add i32 %v2_a1f0, 13
  %v4_a1f0 = inttoptr i32 %v3_a1f0 to i8*
  store i8 %v1_a1f0, i8* %v4_a1f0, align 1
  %v0_a1f4 = load i32, i32* @r4, align 4
  %v1_a1f4 = add i32 %v0_a1f4, 40
  store i32 %v1_a1f4, i32* %r0.global-to-local, align 4
  %v0_a1f8 = load i32, i32* @sb, align 4
  store i32 %v0_a1f8, i32* @r1, align 4
  %v1_a1fc = inttoptr i32 %v1_a1f4 to i8*
  %v2_a1fc = call i32 @function_ed48(i8* %v1_a1fc)
  store i32 %v2_a1fc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a200

dec_label_pc_a200:                                ; preds = %dec_label_pc_9da0, %bb81
  %v3_a200 = load i32, i32* %stack_var_-40, align 4
  %v1_a204 = add i32 %v3_a200, 1
  store i32 %v1_a204, i32* %r3.global-to-local, align 4
  %v1_a208 = load i32, i32* @fp, align 4
  %v9_a208 = icmp eq i32 %v1_a204, %v1_a208
  store i1 %v9_a208, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a204, i32* %stack_var_-40, align 4
  %v5_a210 = icmp slt i32 %v1_a204, %v1_a208
  br i1 %v5_a210, label %dec_label_pc_9d90, label %dec_label_pc_a214

dec_label_pc_a214:                                ; preds = %dec_label_pc_a200, %.thread18
  %v0_a21c12 = phi i32 [ %v0_9d64, %.thread18 ], [ %v1_a208, %dec_label_pc_a200 ]
  %v0_a214 = load i32, i32* @sb, align 4
  %v1_a214 = add i32 %v0_a214, 40
  store i32 %v1_a214, i32* @sl, align 4
  %v1_a218 = add i32 %v0_a214, 20
  store i32 %v1_a218, i32* @r7, align 4
  %v2_a268 = icmp eq i32 %v1_9d14, 0
  %v6_a248 = inttoptr i32 %v2_9b84 to i32*
  %v3_a250 = icmp eq i32 %v3_9d6c, 65535
  br label %dec_label_pc_a21c

dec_label_pc_a21c:                                ; preds = %dec_label_pc_a278, %dec_label_pc_a214
  %v0_a21c = phi i32 [ %v1_a358, %dec_label_pc_a278 ], [ %v0_a21c12, %dec_label_pc_a214 ]
  %v2_a21c = icmp eq i32 %v0_a21c, 0
  store i1 %v2_a21c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_a21c, 1
  br label %dec_label_pc_a224

dec_label_pc_a224:                                ; preds = %dec_label_pc_a224, %dec_label_pc_a21c
  br i1 %tmp82, label %dec_label_pc_a224, label %dec_label_pc_a228

dec_label_pc_a228:                                ; preds = %dec_label_pc_a224
  %v0_a228 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_a228, 256
  %v1_a230 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_a228, 256
  %v4_a234 = urem i32 %tmp84, 256
  %v5_a234 = or i32 %v4_a234, %v1_a230
  store i32 %v5_a234, i32* @r8, align 4
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v7_a248 = load i32, i32* %v6_a248, align 4
  store i32 %v7_a248, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_a25c = add i32 %v7_a248, 20
  store i32 %v1_a25c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a264:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a26c = phi i32 [ %v7_a370, %dec_label_pc_a364 ], [ %v7_a248, %dec_label_pc_a228 ]
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v1_a26c = add i32 %v0_a26c, 40
  store i32 %v1_a26c, i32* %r0.global-to-local, align 4
  %v0_a270 = load i32, i32* @sb, align 4
  store i32 %v0_a270, i32* @r1, align 4
  br i1 %v2_a268, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a278:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384, %dec_label_pc_a3a8
  %v2_a278 = phi i32 [ %v0_a26c, %dec_label_pc_a264 ], [ %v0_a39c, %dec_label_pc_a384 ], [ %v2_a278.pre, %dec_label_pc_a3a8 ]
  %v0_a278 = load i32, i32* @r6, align 4
  %v1_a278 = trunc i32 %v0_a278 to i8
  %v3_a278 = add i32 %v2_a278, 10
  %v4_a278 = inttoptr i32 %v3_a278 to i8*
  store i8 %v1_a278, i8* %v4_a278, align 1
  %v0_a27c = load i32, i32* @r6, align 4
  %v1_a27c = trunc i32 %v0_a27c to i8
  %v2_a27c = load i32, i32* @r4, align 4
  %v3_a27c = add i32 %v2_a27c, 11
  %v4_a27c = inttoptr i32 %v3_a27c to i8*
  store i8 %v1_a27c, i8* %v4_a27c, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_a284 = load i32, i32* @r4, align 4
  store i32 %v0_a284, i32* @r0, align 4
  %v2_a288 = call i32 @function_d0b8(i32 %v0_a284, i32 20)
  %v3_a288 = trunc i32 %v2_a288 to i8
  store i32 %v2_a288, i32* %r0.global-to-local, align 4
  %v3_a28c = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_9b74, i32* %r2.global-to-local, align 4
  %v3_a294 = mul i32 %v3_a28c, 16
  %v2_a298 = add i32 %v3_a294, %v2_9b74
  store i32 %v2_a298, i32* %r1.global-to-local, align 4
  %v1_a29c = add i32 %v2_a298, 4
  %v2_a29c = inttoptr i32 %v1_a29c to i32*
  %v3_a29c = load i32, i32* %v2_a29c, align 4
  %v3_a2a0 = mul i32 %v3_a29c, 65536
  store i32 %v3_a2a0, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_a29c, 256
  %v1_a2a8 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_a29c, 256
  %v4_a2ac = urem i32 %tmp86, 256
  %v5_a2ac = or i32 %v4_a2ac, %v1_a2a8
  store i32 %v5_a2ac, i32* %r2.global-to-local, align 4
  %v1_a2b0 = add i32 %v3_a29c, 1
  store i32 %v1_a2b0, i32* %r3.global-to-local, align 4
  store i32 %v1_a2b0, i32* %v2_a29c, align 4
  %v0_a2b8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a2b8 = load i32, i32* @r5, align 4
  %v2_a2b8 = add i32 %v1_a2b8, 4
  %v3_a2b8 = inttoptr i32 %v2_a2b8 to i32*
  store i32 %v0_a2b8, i32* %v3_a2b8, align 4
  %v0_a2bc = load i32, i32* %r1.global-to-local, align 4
  %v1_a2bc = add i32 %v0_a2bc, 8
  %v2_a2bc = inttoptr i32 %v1_a2bc to i32*
  %v3_a2bc = load i32, i32* %v2_a2bc, align 4
  %tmp87 = mul i32 %v3_a2bc, 256
  %v1_a2c8 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_a2bc, 256
  %v4_a2cc = urem i32 %tmp88, 256
  %v5_a2cc = or i32 %v4_a2cc, %v1_a2c8
  store i32 %v5_a2cc, i32* %r2.global-to-local, align 4
  %v4_a2d028 = udiv i32 %v2_a288, 256
  %v1_a2d4 = trunc i32 %v4_a2d028 to i8
  %v2_a2d4 = load i32, i32* @r4, align 4
  %v3_a2d4 = add i32 %v2_a2d4, 11
  %v4_a2d4 = inttoptr i32 %v3_a2d4 to i8*
  store i8 %v1_a2d4, i8* %v4_a2d4, align 1
  %v3_a2d8 = load i32, i32* @r4, align 4
  %v4_a2d8 = add i32 %v3_a2d8, 10
  %v5_a2d8 = inttoptr i32 %v4_a2d8 to i8*
  store i8 %v3_a288, i8* %v5_a2d8, align 1
  %v0_a2dc = load i32, i32* %r2.global-to-local, align 4
  %v1_a2dc = load i32, i32* @r5, align 4
  %v2_a2dc = add i32 %v1_a2dc, 8
  %v3_a2dc = inttoptr i32 %v2_a2dc to i32*
  store i32 %v0_a2dc, i32* %v3_a2dc, align 4
  %v0_a2e0 = load i32, i32* @r5, align 4
  store i32 %v0_a2e0, i32* @r1, align 4
  %v0_a2e4 = load i32, i32* @r8, align 4
  store i32 %v0_a2e4, i32* %r2.global-to-local, align 4
  %v0_a2e8 = load i32, i32* @r7, align 4
  store i32 %v0_a2e8, i32* %r3.global-to-local, align 4
  %v0_a2ec = load i32, i32* @r4, align 4
  store i32 %v0_a2ec, i32* %r0.global-to-local, align 4
  %v0_a2f0 = load i32, i32* @r6, align 4
  %v1_a2f0 = trunc i32 %v0_a2f0 to i8
  %v3_a2f0 = add i32 %v0_a2e0, 16
  %v4_a2f0 = inttoptr i32 %v3_a2f0 to i8*
  store i8 %v1_a2f0, i8* %v4_a2f0, align 1
  %v0_a2f4 = load i32, i32* @r6, align 4
  %v1_a2f4 = trunc i32 %v0_a2f4 to i8
  %v2_a2f4 = load i32, i32* @r5, align 4
  %v3_a2f4 = add i32 %v2_a2f4, 17
  %v4_a2f4 = inttoptr i32 %v3_a2f4 to i8*
  store i8 %v1_a2f4, i8* %v4_a2f4, align 1
  %v4_a2f8 = call i32 @function_d114(i32 %v0_a2ec, i32 %v0_a2e0, i32 %v0_a2e4, i32 %v0_a2e8)
  %v5_a2f8 = trunc i32 %v4_a2f8 to i8
  store i32 %v4_a2f8, i32* %r0.global-to-local, align 4
  %v4_a2fc29 = udiv i32 %v4_a2f8, 256
  %v1_a300 = trunc i32 %v4_a2fc29 to i8
  %v2_a300 = load i32, i32* @r5, align 4
  %v3_a300 = add i32 %v2_a300, 17
  %v4_a300 = inttoptr i32 %v3_a300 to i8*
  store i8 %v1_a300, i8* %v4_a300, align 1
  %v3_a304 = load i32, i32* @r5, align 4
  %v4_a304 = add i32 %v3_a304, 16
  %v5_a304 = inttoptr i32 %v4_a304 to i8*
  store i8 %v5_a2f8, i8* %v5_a304, align 1
  %v3_a308 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a308, i32* %r3.global-to-local, align 4
  %v0_a30c = load i32, i32* @r4, align 4
  %v1_a30c = add i32 %v0_a30c, 20
  %v2_a30c = inttoptr i32 %v1_a30c to i32*
  %v3_a30c = load i32, i32* %v2_a30c, align 4
  %v5_a314 = mul i32 %v3_a308, 24
  %v3_a31c = udiv i32 %v3_a30c, 65536
  store i32 %v3_a31c, i32* %r2.global-to-local, align 4
  %v2_a320 = add i32 %v5_a314, %arg2
  store i32 %v2_a320, i32* %ip.global-to-local, align 4
  %v3_a3244 = udiv i32 %v3_a30c, 16777216
  %v1_a328 = trunc i32 %v3_a3244 to i8
  %v3_a328 = add i32 %v2_a320, 3
  %v4_a328 = inttoptr i32 %v3_a328 to i8*
  store i8 %v1_a328, i8* %v4_a328, align 1
  %v0_a32c = load i32, i32* %r2.global-to-local, align 4
  %v1_a32c = trunc i32 %v0_a32c to i8
  %v2_a32c = load i32, i32* %ip.global-to-local, align 4
  %v3_a32c = add i32 %v2_a32c, 2
  %v4_a32c = inttoptr i32 %v3_a32c to i8*
  store i8 %v1_a32c, i8* %v4_a32c, align 1
  %v0_a330 = load i32, i32* @r4, align 4
  store i32 %v0_a330, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_9d24, i32* %r0.global-to-local, align 4
  %v0_a33c = load i32, i32* @sl, align 4
  store i32 %v0_a33c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_a344 = load i32, i32* %ip.global-to-local, align 4
  %v6_a34c = inttoptr i32 %v0_a330 to i32*
  %v7_a34c = call i32 @function_126c8(i32 %v3_9d24, i32* %v6_a34c, i32 %v0_a33c, i32 16384, i32 %v0_a344, i32 16)
  %v3_a350 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a350, i32* %r3.global-to-local, align 4
  %v1_a354 = add i32 %v3_a350, 1
  store i32 %v1_a354, i32* %r0.global-to-local, align 4
  %v1_a358 = load i32, i32* @fp, align 4
  %v9_a358 = icmp eq i32 %v1_a354, %v1_a358
  store i1 %v9_a358, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_a354, i32* %stack_var_-40, align 4
  %v6_a360 = icmp slt i32 %v1_a354, %v1_a358
  br i1 %v6_a360, label %dec_label_pc_a364, label %dec_label_pc_a21c

dec_label_pc_a364:                                ; preds = %dec_label_pc_a278
  store i32 %v2_9b84, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_9d6c, i32* %ip.global-to-local, align 4
  %v4_a370 = mul i32 %v1_a354, 4
  %v5_a370 = add i32 %v4_a370, %v2_9b84
  %v6_a370 = inttoptr i32 %v5_a370 to i32*
  %v7_a370 = load i32, i32* %v6_a370, align 4
  store i32 %v7_a370, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a250, i1* %cpsr_z.global-to-local, align 1
  %v1_a37c = add i32 %v7_a370, 20
  store i32 %v1_a37c, i32* @r5, align 4
  br i1 %v3_a250, label %dec_label_pc_a384, label %dec_label_pc_a264

dec_label_pc_a384:                                ; preds = %dec_label_pc_a364, %dec_label_pc_a228
  %v0_a384 = call i32 @function_ebc8()
  %v1_a384 = trunc i32 %v0_a384 to i8
  store i32 %v1_9d14, i32* %lr.global-to-local, align 4
  %v4_a38c = sdiv i32 %v0_a384, 256
  store i32 %v4_a38c, i32* %r3.global-to-local, align 4
  store i1 %v2_a268, i1* %cpsr_z.global-to-local, align 1
  %v3_a394 = load i32, i32* @r4, align 4
  %v4_a394 = add i32 %v3_a394, 4
  %v5_a394 = inttoptr i32 %v4_a394 to i8*
  store i8 %v1_a384, i8* %v5_a394, align 1
  %v0_a398 = load i32, i32* %r3.global-to-local, align 4
  %v1_a398 = trunc i32 %v0_a398 to i8
  %v2_a398 = load i32, i32* @r4, align 4
  %v3_a398 = add i32 %v2_a398, 5
  %v4_a398 = inttoptr i32 %v3_a398 to i8*
  store i8 %v1_a398, i8* %v4_a398, align 1
  %v0_a39c = load i32, i32* @r4, align 4
  %v1_a39c = add i32 %v0_a39c, 40
  store i32 %v1_a39c, i32* %r0.global-to-local, align 4
  %v0_a3a0 = load i32, i32* @sb, align 4
  store i32 %v0_a3a0, i32* @r1, align 4
  %v0_a3a4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a3a4, label %dec_label_pc_a278, label %dec_label_pc_a3a8

dec_label_pc_a3a8:                                ; preds = %dec_label_pc_a264, %dec_label_pc_a384
  %v0_a3a8 = phi i32 [ %v1_a26c, %dec_label_pc_a264 ], [ %v1_a39c, %dec_label_pc_a384 ]
  %v1_a3a8 = inttoptr i32 %v0_a3a8 to i8*
  %v2_a3a8 = call i32 @function_ed48(i8* %v1_a3a8)
  store i32 %v2_a3a8, i32* %r0.global-to-local, align 4
  %v2_a278.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_a278

; uselistorder directives
  uselistorder i32 %v0_a39c, { 1, 0 }
  uselistorder i32 %v7_a370, { 1, 2, 0 }
  uselistorder i32 %v1_a358, { 1, 2, 0 }
  uselistorder i32 %v1_a354, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_a2f8, { 0, 2, 1 }
  uselistorder i32 %v0_a2e0, { 1, 0, 2 }
  uselistorder i32 %v3_a2bc, { 1, 0 }
  uselistorder i32 %v3_a29c, { 3, 2, 0, 1 }
  uselistorder i32 %v2_a288, { 0, 2, 1 }
  uselistorder i32 %v0_a26c, { 1, 0 }
  uselistorder i32 %v0_a228, { 1, 0 }
  uselistorder i32 %v0_a21c, { 1, 0 }
  uselistorder i1 %v3_a250, { 2, 3, 1, 0 }
  uselistorder i32 %v1_a204, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a158, { 0, 2, 1 }
  uselistorder i32 %v3_a138, { 1, 0 }
  uselistorder i32 %v0_a10c, { 1, 0, 2 }
  uselistorder i32 %v3_a100, { 1, 0 }
  uselistorder i32 %v3_a094, { 1, 0 }
  uselistorder i32 %v0_a088, { 1, 0 }
  uselistorder i32 %v3_a010, { 1, 0 }
  uselistorder i32 %v2_9ffc, { 1, 0 }
  uselistorder i32 %v3_9fe0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_9fd8, { 1, 0 }
  uselistorder i32 %v3_9fb4, { 1, 0, 2, 3 }
  uselistorder i32 %v3_9fac, { 1, 0 }
  uselistorder i32 %v4_9f94, { 1, 0 }
  uselistorder i32 %v0_9f90, { 0, 2, 1 }
  uselistorder i1 %v7_9f00, { 1, 0 }
  uselistorder i32 %v7_9ef8, { 0, 2, 1, 3 }
  uselistorder i32 %v5_9f44, { 1, 0 }
  uselistorder i1 %v9_9f28, { 1, 0 }
  uselistorder i32 %v4_9f3c, { 1, 0 }
  uselistorder i32 %v4_9f38, { 1, 0 }
  uselistorder i32 %v8_9e4c, { 1, 2, 0, 3 }
  uselistorder i32 %v3_9e38, { 1, 0 }
  uselistorder i32 %v0_9e28, { 2, 0, 1, 3 }
  uselistorder i1 %v7_9db0, { 1, 0 }
  uselistorder i32 %v3_9dac, { 2, 1, 0, 3 }
  uselistorder i32 %v1_a1c4, { 1, 0 }
  uselistorder i32 %v1_a1ac, { 1, 0 }
  uselistorder i32 %v1_a194, { 1, 0 }
  uselistorder i32 %v1_a17c, { 1, 0 }
  uselistorder i32 %v1_a164, { 1, 0 }
  uselistorder i32 %v5_9f40, { 1, 0 }
  uselistorder i32 %v3_9e9493, { 1, 0 }
  uselistorder i1 %v2_9f58, { 1, 0 }
  uselistorder i32 %v1_9f54, { 1, 0 }
  uselistorder i32 %v4_9f50, { 2, 0, 1 }
  uselistorder i32 %v4_9f34, { 1, 0 }
  uselistorder i1 %v3_9e7c, { 1, 0 }
  uselistorder i32 %v8_9d78, { 2, 1, 0 }
  uselistorder i32 %v8_9d74, { 1, 2, 0 }
  uselistorder i32 %v3_9d6c, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_9d68, { 0, 1, 3, 2 }
  uselistorder i1 %v7_9d5c, { 1, 0 }
  uselistorder i1 %v7_9d2c, { 1, 0 }
  uselistorder i32 %v3_9d28, { 2, 0, 1 }
  uselistorder i32 %v3_9d24, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_9d14, { 1, 3, 2, 0 }
  uselistorder i32 %v1_9cbc, { 1, 2, 0 }
  uselistorder i32 %v1_9c9c, { 1, 0 }
  uselistorder i32 %v1_9c7c, { 1, 2, 0 }
  uselistorder i32 %v1_9c5c, { 1, 2, 0 }
  uselistorder i32 %v1_9c3c, { 1, 2, 0 }
  uselistorder i32 %v1_9c04, { 1, 2, 0 }
  uselistorder i32 %v5_9bc0, { 0, 2, 1 }
  uselistorder i32 %v2_9b84, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_9b74, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_9b58, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 51, 35, 34, 36, 37, 39, 38, 43, 40, 41, 42, 44, 46, 45, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_a3a8, { 1, 0 }
  uselistorder label %dec_label_pc_a278, { 2, 1, 0 }
  uselistorder label %dec_label_pc_a200, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_9f88, { 2, 0, 1 }
  uselistorder label %dec_label_pc_9ec0, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_9e70, { 1, 0 }
}

define i32 @function_a3b4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_a3b4:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %tmp = call i8 @__decompiler_undefined_function_1()
  %tmp30 = call i8 @__decompiler_undefined_function_1()
  %tmp31 = call i8 @__decompiler_undefined_function_1()
  %tmp32 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-332 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_a3b8 = urem i32 %arg1, 256
  store i32 %v1_a3b8, i32* @fp, align 4
  store i32 %v1_a3b8, i32* %r0.global-to-local, align 4
  store i32 16, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_a3d0 = urem i32 %arg3, 256
  store i32 %v1_a3d0, i32* @r4, align 4
  %v2_a3d4 = call i32 @function_12a18(i32 %v1_a3b8, i32 16)
  store i32 4, i32* %r1.global-to-local, align 4
  %v0_a3e0 = load i32, i32* @fp, align 4
  store i32 %v0_a3e0, i32* %r0.global-to-local, align 4
  %v2_a3e4 = call i32 @function_12a18(i32 %v0_a3e0, i32 4)
  %v0_a3e8 = load i32, i32* @r5, align 4
  store i32 %v0_a3e8, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a3f8 = load i32, i32* @r4, align 4
  store i32 %v0_a3f8, i32* %r0.global-to-local, align 4
  %v5_a3fc = inttoptr i32 %v0_a3e8 to i32*
  %v6_a3fc = call i32 @function_85e0(i32 %v0_a3f8, i32* %v5_a3fc, i32 2, i32 0, i32 %v2_a3e4)
  %v1_a408 = urem i32 %v6_a3fc, 256
  store i32 %v1_a408, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_a414 = load i32, i32* @r5, align 4
  store i32 %v0_a414, i32* %r1.global-to-local, align 4
  %v0_a418 = load i32, i32* @r4, align 4
  store i32 %v0_a418, i32* %r0.global-to-local, align 4
  %sext = mul i32 %v6_a3fc, 16777216
  %v5_a420 = sdiv i32 %sext, 16777216
  %v6_a420 = inttoptr i32 %v0_a414 to i32*
  %v7_a420 = call i32 @function_85e0(i32 %v0_a418, i32* %v6_a420, i32 3, i32 65535, i32 %v5_a420)
  %v0_a424 = load i32, i32* @r5, align 4
  store i32 %v0_a424, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_a420, i32* @r6, align 4
  %v0_a434 = load i32, i32* @r4, align 4
  store i32 %v0_a434, i32* %r0.global-to-local, align 4
  %v5_a438 = inttoptr i32 %v0_a424 to i32*
  %v6_a438 = call i32 @function_85e0(i32 %v0_a434, i32* %v5_a438, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_a440 = urem i32 %v6_a438, 256
  store i32 %v1_a440, i32* %ip.global-to-local, align 4
  %v0_a444 = load i32, i32* @r5, align 4
  store i32 %v0_a444, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a450 = load i32, i32* @r4, align 4
  store i32 %v0_a450, i32* %r0.global-to-local, align 4
  %sext6 = mul i32 %v6_a438, 16777216
  %v5_a458 = sdiv i32 %sext6, 16777216
  %v6_a458 = inttoptr i32 %v0_a444 to i32*
  %v7_a458 = call i32 @function_85e0(i32 %v0_a450, i32* %v6_a458, i32 5, i32 1, i32 %v5_a458)
  %v1_a464 = urem i32 %v7_a458, 256
  store i32 %v1_a464, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  %v0_a46c = load i32, i32* @r5, align 4
  store i32 %v0_a46c, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_a474 = load i32, i32* @r4, align 4
  store i32 %v0_a474, i32* %r0.global-to-local, align 4
  %v5_a47c = inttoptr i32 %v0_a46c to i32*
  %v6_a47c = call i32 @function_85e0(i32 %v0_a474, i32* %v5_a47c, i32 7, i32 65535, i32 %v1_a464)
  %v0_a480 = load i32, i32* @r5, align 4
  store i32 %v0_a480, i32* %r1.global-to-local, align 4
  %v3_a484 = mul i32 %v6_a47c, 65536
  store i32 %v3_a484, i32* @r7, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a490 = load i32, i32* @r4, align 4
  store i32 %v0_a490, i32* %r0.global-to-local, align 4
  %v5_a494 = inttoptr i32 %v0_a480 to i32*
  %v6_a494 = call i32 @function_85e0(i32 %v0_a490, i32* %v5_a494, i32 11, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_a49c = urem i32 %v6_a494, 256
  store i32 %v1_a49c, i32* %ip.global-to-local, align 4
  %v0_a4a0 = load i32, i32* @r5, align 4
  store i32 %v0_a4a0, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4ac = load i32, i32* @r4, align 4
  store i32 %v0_a4ac, i32* %r0.global-to-local, align 4
  %v5_a4b4 = inttoptr i32 %v0_a4a0 to i32*
  %v6_a4b4 = call i32 @function_85e0(i32 %v0_a4ac, i32* %v5_a4b4, i32 12, i32 1, i32 %v1_a49c)
  %v1_a4bc = urem i32 %v6_a4b4, 256
  store i32 %v1_a4bc, i32* %ip.global-to-local, align 4
  %v0_a4c0 = load i32, i32* @r5, align 4
  store i32 %v0_a4c0, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a4cc = load i32, i32* @r4, align 4
  store i32 %v0_a4cc, i32* %r0.global-to-local, align 4
  %v5_a4d4 = inttoptr i32 %v0_a4c0 to i32*
  %v6_a4d4 = call i32 @function_85e0(i32 %v0_a4cc, i32* %v5_a4d4, i32 13, i32 1, i32 %v1_a4bc)
  %v1_a4dc = urem i32 %v6_a4d4, 256
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a4e0 = load i32, i32* @r5, align 4
  store i32 %v0_a4e0, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a4ec = load i32, i32* @r4, align 4
  store i32 %v0_a4ec, i32* %r0.global-to-local, align 4
  %v5_a4f4 = inttoptr i32 %v0_a4e0 to i32*
  %v6_a4f4 = call i32 @function_85e0(i32 %v0_a4ec, i32* %v5_a4f4, i32 14, i32 0, i32 %v1_a4dc)
  %v1_a4fc = urem i32 %v6_a4f4, 256
  store i32 %v1_a4fc, i32* %ip.global-to-local, align 4
  %v0_a500 = load i32, i32* @r5, align 4
  store i32 %v0_a500, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a50c = load i32, i32* @r4, align 4
  store i32 %v0_a50c, i32* %r0.global-to-local, align 4
  %v5_a514 = inttoptr i32 %v0_a500 to i32*
  %v6_a514 = call i32 @function_85e0(i32 %v0_a50c, i32* %v5_a514, i32 15, i32 0, i32 %v1_a4fc)
  %v1_a51c = urem i32 %v6_a514, 256
  store i32 %v1_a51c, i32* %ip.global-to-local, align 4
  %v0_a520 = load i32, i32* @r5, align 4
  store i32 %v0_a520, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_a52c = load i32, i32* @r4, align 4
  store i32 %v0_a52c, i32* %r0.global-to-local, align 4
  %v5_a534 = inttoptr i32 %v0_a520 to i32*
  %v6_a534 = call i32 @function_85e0(i32 %v0_a52c, i32* %v5_a534, i32 16, i32 0, i32 %v1_a51c)
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 %v6_a534, i32* %ip.global-to-local, align 4
  store i32 768, i32* %r3.global-to-local, align 4
  %v0_a544 = load i32, i32* @r5, align 4
  store i32 %v0_a544, i32* %r1.global-to-local, align 4
  %v0_a548 = load i32, i32* @r4, align 4
  store i32 %v0_a548, i32* %r0.global-to-local, align 4
  %v1_a54c = urem i32 %v6_a534, 256
  store i32 %v1_a54c, i32* @r8, align 4
  %v5_a550 = inttoptr i32 %v0_a544 to i32*
  %v6_a550 = call i32 @function_85e0(i32 %v0_a548, i32* %v5_a550, i32 0, i32 768, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_a55c = load i32, i32* @r5, align 4
  store i32 %v0_a55c, i32* %r1.global-to-local, align 4
  store i32 %v6_a550, i32* @sb, align 4
  %v0_a564 = load i32, i32* @r4, align 4
  store i32 %v0_a564, i32* %r0.global-to-local, align 4
  %v5_a568 = inttoptr i32 %v0_a55c to i32*
  %v6_a568 = call i32 @function_85e0(i32 %v0_a564, i32* %v5_a568, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  store i32 3, i32* %r1.global-to-local, align 4
  %v1_a574 = urem i32 %v6_a568, 256
  store i32 %v1_a574, i32* %r3.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_a584 = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_a588 = load i32, i32* @r7, align 4
  %v3_a588 = udiv i32 %v0_a588, 65536
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  %v7_a58c = icmp eq i32 %v3_a584, -1
  store i1 %v7_a58c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a58c, label %dec_label_pc_a7e8, label %dec_label_pc_a59c

dec_label_pc_a59c:                                ; preds = %dec_label_pc_a3b4
  store i32 1, i32* %stack_var_-40, align 4
  %v6_a5a4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_a5a4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_a5b8 = call i32 @function_126fc(i32 %v3_a584, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_a5b8, i32* %r0.global-to-local, align 4
  %v7_a5bc = icmp eq i32 %v6_a5b8, -1
  store i1 %v7_a5bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_a5bc, label %dec_label_pc_a7e0, label %dec_label_pc_a5c4

dec_label_pc_a5c4:                                ; preds = %dec_label_pc_a59c
  %v0_a5c4 = load i32, i32* @fp, align 4
  %v2_a5c4 = icmp eq i32 %v0_a5c4, 0
  store i1 %v2_a5c4, i1* %cpsr_z.global-to-local, align 1
  %v0_a5c8 = load i32, i32* @r6, align 4
  %v3_a5c8 = mul i32 %v0_a5c8, 65536
  store i32 %v3_a5c8, i32* %r0.global-to-local, align 4
  %v3_a5cc = urem i32 %v0_a5c8, 65536
  store i32 %v3_a5cc, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %tmp72 = icmp slt i32 %v0_a5c4, 1
  br i1 %tmp72, label %.thread18, label %dec_label_pc_a5f0.preheader

.thread18:                                        ; preds = %dec_label_pc_a5c4
  store i32 0, i32* %stack_var_-40, align 4
  br label %dec_label_pc_aa74

dec_label_pc_a5f0.preheader:                      ; preds = %dec_label_pc_a5c4
  %v5_a5d4 = load i32, i32* @r7, align 4
  %v8_a5d4 = udiv i32 %v5_a5d4, 16777216
  %tmp73 = udiv i32 %v0_a5c8, 256
  %v8_a5d8 = urem i32 %tmp73, 256
  store i32 %v8_a5d8, i32* %r0.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_a6dc = icmp ugt i32 %v0_a588, -65537
  %v2_a700 = ptrtoint i32* %stack_var_-60 to i32
  %v3_a70c = bitcast i32* %stack_var_-60 to %sockaddr*
  %v2_a73c = ptrtoint i32* %stack_var_-76 to i32
  %v2_a740 = ptrtoint i32* %stack_var_-44 to i32
  %v2_a744 = ptrtoint i32* %stack_var_-332 to i32
  %v4_a790 = zext i8 %tmp31 to i32
  %v4_a794 = zext i8 %tmp30 to i32
  %v4_a7a0 = mul nuw nsw i32 %v4_a794, 256
  %v4_a7b0 = zext i8 %tmp to i32
  %v1_a7b4 = and i32 %v4_a7b0, 18
  %v2_a7b8 = icmp eq i32 %v1_a7b4, 18
  %v1_a6ec = mul nuw nsw i32 %v3_a588, 256
  %v4_a6f0 = and i32 %v1_a6ec, 65280
  %v5_a6f0 = or i32 %v8_a5d4, %v4_a6f0
  %v3_a6f493 = udiv i32 %v4_a6f0, 256
  %v1_a6f8 = trunc i32 %v3_a6f493 to i8
  %v1_a8bc = mul i32 %v0_a5c8, 256
  %v4_a8c4 = and i32 %v1_a8bc, 65280
  %v5_a7a0 = or i32 %v4_a790, %v4_a7a0
  %v1_a7c0 = and i32 %v4_a7b0, 5
  %v2_a7c0 = icmp eq i32 %v1_a7c0, 0
  %v1_a6fc = trunc i32 %v8_a5d4 to i8
  %v5_a8c4 = or i32 %v8_a5d8, %v4_a8c4
  %v1_a8e4 = trunc i32 %v5_a420 to i8
  %v1_a9c4 = urem i32 %v6_a494, 2
  %tmp94 = sub nsw i32 0, %v1_a9c4
  %v4_a9cc = and i32 %tmp94, 32
  %v1_a9dc = urem i32 %v6_a4b4, 2
  %tmp95 = sub nsw i32 0, %v1_a9dc
  %v4_a9e4 = and i32 %tmp95, 16
  %v1_a9f4 = urem i32 %v6_a4d4, 2
  %tmp96 = sub nsw i32 0, %v1_a9f4
  %v4_a9fc = and i32 %tmp96, 8
  %v1_aa0c = urem i32 %v6_a4f4, 2
  %tmp97 = sub nsw i32 0, %v1_aa0c
  %v4_aa14 = and i32 %tmp97, 4
  %v1_aa24 = urem i32 %v6_a514, 2
  %tmp98 = sub nsw i32 0, %v1_aa24
  %v3_aa2c = and i32 %tmp98, 2
  br label %dec_label_pc_a5f0

dec_label_pc_a5f0:                                ; preds = %dec_label_pc_aa60, %dec_label_pc_a7c8, %dec_label_pc_a5f0.preheader
  store i32 %v8_a5d8, i32* %r3.global-to-local, align 4
  %v0_a5fc = load i32, i32* @sb, align 4
  %v1_a5fc = add i32 %v0_a5fc, 40
  store i32 %v1_a5fc, i32* @sl, align 4
  br label %dec_label_pc_a600

dec_label_pc_a600:                                ; preds = %dec_label_pc_a7d4, %dec_label_pc_a5f0
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_a60c = call i32 @function_1272c(i32 2, i32 1, i32 0)
  store i32 %v3_a60c, i32* %r0.global-to-local, align 4
  %v7_a610 = icmp eq i32 %v3_a60c, -1
  store i1 %v7_a610, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_a60c, i32* @r7, align 4
  br i1 %v7_a610, label %dec_label_pc_aa60, label %dec_label_pc_a61c

dec_label_pc_a61c:                                ; preds = %dec_label_pc_a600
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  %v2_a624 = call i32 @function_11d54(i32 %v3_a60c, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_a62c = or i32 %v2_a624, 2048
  store i32 %v1_a62c, i32* @r2, align 4
  %v0_a630 = load i32, i32* @r7, align 4
  store i32 %v0_a630, i32* %r0.global-to-local, align 4
  %v2_a634 = call i32 @function_11d54(i32 %v0_a630, i32 4)
  store i32 %v2_a634, i32* %r0.global-to-local, align 4
  %v3_a638 = load i32, i32* %stack_var_-40, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v5_a648 = mul i32 %v3_a638, 24
  store i32 %v5_a648, i32* %r1.global-to-local, align 4
  store i32 %arg2, i32* %ip.global-to-local, align 4
  store i32 2, i32* %stack_var_-60, align 4
  %v2_a658 = add i32 %v5_a648, %arg2
  store i32 %v2_a658, i32* %r2.global-to-local, align 4
  %v1_a65c = add i32 %v2_a658, 20
  %v2_a65c = inttoptr i32 %v1_a65c to i8*
  %v3_a65c = load i8, i8* %v2_a65c, align 1
  %v4_a65c = zext i8 %v3_a65c to i32
  store i32 %v4_a65c, i32* %r3.global-to-local, align 4
  %v2_a660 = icmp ugt i8 %v3_a65c, 30
  %v7_a660 = icmp eq i8 %v3_a65c, 31
  store i1 %v7_a660, i1* %cpsr_z.global-to-local, align 1
  %v2_a664 = xor i1 %v7_a660, true
  %v3_a664 = and i1 %v2_a660, %v2_a664
  %v5_a664 = add i32 %v2_a658, 16
  %v6_a664 = inttoptr i32 %v5_a664 to i32*
  %v7_a664 = load i32, i32* %v6_a664, align 4
  br i1 %v3_a664, label %dec_label_pc_a6d0, label %dec_label_pc_a670

dec_label_pc_a670:                                ; preds = %dec_label_pc_a61c
  store i32 %v7_a664, i32* @r4, align 4
  %v0_a674 = call i32 @function_ebc8()
  store i32 %v0_a674, i32* %r0.global-to-local, align 4
  %v3_a678 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %lr.global-to-local, align 4
  %v5_a684 = mul i32 %v3_a678, 24
  %v0_a688 = load i32, i32* @r4, align 4
  %v2_a68c = add i32 %v5_a684, %arg2
  store i32 %v2_a68c, i32* %r1.global-to-local, align 4
  %v1_a690 = and i32 %v0_a688, 65280
  store i32 %v1_a690, i32* %r3.global-to-local, align 4
  %v1_a688 = udiv i32 %v0_a688, 256
  %v3_a694 = and i32 %v1_a688, 65280
  store i32 %v3_a694, i32* %r2.global-to-local, align 4
  %v3_a698 = mul i32 %v0_a688, 16777216
  store i32 %v3_a698, i32* %ip.global-to-local, align 4
  %v1_a69c = add i32 %v2_a68c, 20
  %v2_a69c = inttoptr i32 %v1_a69c to i8*
  %v3_a69c = load i8, i8* %v2_a69c, align 1
  %v4_a69c = zext i8 %v3_a69c to i32
  store i32 %v4_a69c, i32* %lr.global-to-local, align 4
  %v4_a6a0 = mul nuw nsw i32 %v1_a690, 256
  %v5_a6a0 = or i32 %v4_a6a0, %v3_a698
  store i32 %v5_a6a0, i32* %ip.global-to-local, align 4
  %v2_a6a8 = call i32 @llvm.bswap.i32(i32 %v0_a688)
  %v7_a6ac = lshr i32 %v0_a674, %v4_a69c
  %v8_a6ac = add i32 %v7_a6ac, %v2_a6a8
  store i32 %v8_a6ac, i32* %r2.global-to-local, align 4
  %v3_a6b8 = mul i32 %v8_a6ac, 16777216
  %v1_a6bc = and i32 %v8_a6ac, 65280
  store i32 %v1_a6bc, i32* %r0.global-to-local, align 4
  %v4_a6c0 = mul nuw nsw i32 %v1_a6bc, 256
  %v5_a6c0 = or i32 %v4_a6c0, %v3_a6b8
  store i32 %v5_a6c0, i32* %r1.global-to-local, align 4
  %v2_a6c8 = call i32 @llvm.bswap.i32(i32 %v8_a6ac)
  br label %dec_label_pc_a6d0

dec_label_pc_a6d0:                                ; preds = %dec_label_pc_a61c, %dec_label_pc_a670
  %storemerge25 = phi i32 [ %v2_a6c8, %dec_label_pc_a670 ], [ %v7_a664, %dec_label_pc_a61c ]
  store i32 %v3_a588, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_a6dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_a6dc, label %dec_label_pc_a7f0, label %dec_label_pc_a6e4

dec_label_pc_a6e4:                                ; preds = %dec_label_pc_a6d0
  store i32 %v8_a5d4, i32* %ip.global-to-local, align 4
  store i32 %v5_a6f0, i32* %r3.global-to-local, align 4
  store i32 %v3_a6f493, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_a700

dec_label_pc_a700:                                ; preds = %dec_label_pc_a7f0, %dec_label_pc_a6e4
  %stack_var_-57.0 = phi i8 [ %v1_a7f8, %dec_label_pc_a7f0 ], [ %v1_a6f8, %dec_label_pc_a6e4 ]
  %storemerge = phi i8 [ %v1_a7f0, %dec_label_pc_a7f0 ], [ %v1_a6fc, %dec_label_pc_a6e4 ]
  store i32 %v2_a700, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v0_a708 = load i32, i32* @r7, align 4
  store i32 %v0_a708, i32* %r0.global-to-local, align 4
  %v4_a70c = call i32 @function_12588(i32 %v0_a708, %sockaddr* nonnull %v3_a70c, i32 16)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_a714 = call i32 @function_120e8(i32* null)
  store i32 %v2_a714, i32* %r0.global-to-local, align 4
  store i32 %v2_a714, i32* @r4, align 4
  %v9_a774 = icmp eq i32 %tmp32, %storemerge25
  %v4_a798 = zext i8 %storemerge to i32
  %v4_a79c = zext i8 %stack_var_-57.0 to i32
  %. = zext i1 %v9_a774 to i32
  %v9_a788 = icmp eq i1 %v9_a774, false
  %v4_a7a4 = mul nuw nsw i32 %v4_a79c, 256
  %v5_a7a4 = or i32 %v4_a7a4, %v4_a798
  %v9_a7a8 = icmp eq i32 %v5_a7a4, %v5_a7a0
  br label %dec_label_pc_a730

dec_label_pc_a720:                                ; preds = %.thread23, %dec_label_pc_a790, %dec_label_pc_a7c0, %bb75
  %v2_a720 = call i32 @function_120e8(i32* null)
  %v0_a724 = load i32, i32* @r4, align 4
  %v2_a724 = sub i32 %v2_a720, %v0_a724
  store i32 %v2_a724, i32* %r0.global-to-local, align 4
  %v7_a728 = icmp eq i32 %v2_a724, 10
  store i1 %v7_a728, i1* %cpsr_z.global-to-local, align 1
  %v8_a72c = icmp sgt i32 %v2_a724, 10
  br i1 %v8_a72c, label %dec_label_pc_a7d4, label %dec_label_pc_a730

dec_label_pc_a730:                                ; preds = %dec_label_pc_a720, %dec_label_pc_a700
  store i32 256, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-44, align 4
  store i32 %v2_a73c, i32* %lr.global-to-local, align 4
  store i32 %v2_a740, i32* %ip.global-to-local, align 4
  store i32 %v2_a744, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v7_a758 = call i32 @function_12668(i32 %v3_a584, i32* nonnull %stack_var_-332, i32 256, i32 16384, i32 %v2_a73c, i32 %v2_a740)
  store i32 %v7_a758, i32* %r2.global-to-local, align 4
  %v7_a760 = icmp eq i32 %v7_a758, -1
  store i1 %v7_a760, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r0.global-to-local, align 4
  br i1 %v7_a760, label %dec_label_pc_a7e8, label %dec_label_pc_a76c

dec_label_pc_a76c:                                ; preds = %dec_label_pc_a730
  store i32 %tmp32, i32* %r3.global-to-local, align 4
  store i32 %., i32* %r1.global-to-local, align 4
  %v7_a780 = icmp eq i32 %v7_a758, 40
  store i1 %v7_a780, i1* %cpsr_z.global-to-local, align 1
  %tmp99 = icmp ult i32 %v7_a758, 41
  br i1 %tmp99, label %.thread23, label %bb75

.thread23:                                        ; preds = %dec_label_pc_a76c
  store i32 0, i32* %r1.global-to-local, align 4
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_a720

bb75:                                             ; preds = %dec_label_pc_a76c
  store i1 %v9_a788, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a788, label %dec_label_pc_a720, label %dec_label_pc_a790

dec_label_pc_a790:                                ; preds = %bb75
  store i32 %v4_a794, i32* %r1.global-to-local, align 4
  store i32 %v4_a798, i32* %ip.global-to-local, align 4
  store i32 %v4_a79c, i32* %r2.global-to-local, align 4
  store i32 %v5_a7a0, i32* %r3.global-to-local, align 4
  store i32 %v5_a7a4, i32* @r5, align 4
  store i1 %v9_a7a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_a7a8, label %dec_label_pc_a7b0, label %dec_label_pc_a720

dec_label_pc_a7b0:                                ; preds = %dec_label_pc_a790
  store i32 %v4_a7b0, i32* %r2.global-to-local, align 4
  store i32 %v1_a7b4, i32* %r3.global-to-local, align 4
  store i1 %v2_a7b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7b8, label %dec_label_pc_a804, label %dec_label_pc_a7c0

dec_label_pc_a7c0:                                ; preds = %dec_label_pc_a7b0
  store i1 %v2_a7c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_a7c0, label %dec_label_pc_a720, label %dec_label_pc_a7c8

dec_label_pc_a7c8:                                ; preds = %dec_label_pc_a7c0
  %v0_a7c8 = load i32, i32* @r7, align 4
  store i32 %v0_a7c8, i32* %r0.global-to-local, align 4
  %v1_a7cc = call i32 @function_11e18(i32 %v0_a7c8)
  store i32 %v1_a7cc, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a5f0

dec_label_pc_a7d4:                                ; preds = %dec_label_pc_a720
  %v0_a7d4 = load i32, i32* @r7, align 4
  store i32 %v0_a7d4, i32* %r0.global-to-local, align 4
  %v1_a7d8 = call i32 @function_11e18(i32 %v0_a7d4)
  store i32 %v1_a7d8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a600

dec_label_pc_a7e0:                                ; preds = %dec_label_pc_a59c
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v1_a7e4 = call i32 @function_11e18(i32 %v3_a584)
  store i32 %v1_a7e4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_a7e8

dec_label_pc_a7e8:                                ; preds = %dec_label_pc_a730, %dec_label_pc_a3b4, %dec_label_pc_a7e0
  %v29_a7ec = phi i32 [ %v3_a584, %dec_label_pc_a3b4 ], [ %v1_a7e4, %dec_label_pc_a7e0 ], [ 0, %dec_label_pc_a730 ]
  ret i32 %v29_a7ec

dec_label_pc_a7f0:                                ; preds = %dec_label_pc_a6d0
  %v0_a7f0 = call i32 @function_ebc8()
  %v1_a7f0 = trunc i32 %v0_a7f0 to i8
  store i32 %v0_a7f0, i32* %r0.global-to-local, align 4
  %v4_a7f4 = sdiv i32 %v0_a7f0, 256
  store i32 %v4_a7f4, i32* %r3.global-to-local, align 4
  %v1_a7f8 = trunc i32 %v4_a7f4 to i8
  br label %dec_label_pc_a700

dec_label_pc_a804:                                ; preds = %dec_label_pc_a7b0
  %v3_a804 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a804, i32* @r4, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_a80c = mul i32 %v3_a804, 16
  store i32 %v3_a80c, i32* %ip.global-to-local, align 4
  %v3_a810 = add i32 %v3_a80c, %v2_a3d4
  %v4_a810 = inttoptr i32 %v3_a810 to i32*
  store i32 %storemerge25, i32* %v4_a810, align 4
  %v0_a814 = load i32, i32* @r6, align 4
  %v1_a814 = add i32 %v0_a814, 4
  %v2_a814 = inttoptr i32 %v1_a814 to i32*
  %v3_a814 = load i32, i32* %v2_a814, align 4
  store i32 %v3_a814, i32* %r0.global-to-local, align 4
  %v1_a81c = and i32 %v3_a814, 65280
  store i32 %v1_a81c, i32* %r1.global-to-local, align 4
  store i32 %v2_a3d4, i32* %lr.global-to-local, align 4
  %v3_a824 = mul i32 %v3_a814, 16777216
  %v4_a82c = mul nuw nsw i32 %v1_a81c, 256
  %v5_a82c = or i32 %v4_a82c, %v3_a824
  store i32 %v5_a82c, i32* %r2.global-to-local, align 4
  %v1_a834 = load i32, i32* %ip.global-to-local, align 4
  %v2_a834 = add i32 %v1_a834, %v2_a3d4
  store i32 %v2_a834, i32* %ip.global-to-local, align 4
  %v2_a838 = call i32 @llvm.bswap.i32(i32 %v3_a814)
  store i32 %v2_a838, i32* %r3.global-to-local, align 4
  %v2_a83c = add i32 %v2_a834, 4
  %v3_a83c = inttoptr i32 %v2_a83c to i32*
  store i32 %v2_a838, i32* %v3_a83c, align 4
  %v0_a840 = load i32, i32* @r6, align 4
  %v1_a840 = add i32 %v0_a840, 8
  %v2_a840 = inttoptr i32 %v1_a840 to i32*
  %v3_a840 = load i32, i32* %v2_a840, align 4
  store i32 %v3_a840, i32* %r0.global-to-local, align 4
  %v1_a848 = and i32 %v3_a840, 65280
  store i32 %v1_a848, i32* %r1.global-to-local, align 4
  %v3_a84c = mul i32 %v3_a840, 16777216
  %v4_a854 = mul nuw nsw i32 %v1_a848, 256
  %v5_a854 = or i32 %v4_a854, %v3_a84c
  store i32 %v5_a854, i32* %r2.global-to-local, align 4
  %v2_a85c = call i32 @llvm.bswap.i32(i32 %v3_a840)
  store i32 %v2_a85c, i32* %r3.global-to-local, align 4
  %v1_a860 = load i32, i32* %ip.global-to-local, align 4
  %v2_a860 = add i32 %v1_a860, 8
  %v3_a860 = inttoptr i32 %v2_a860 to i32*
  store i32 %v2_a85c, i32* %v3_a860, align 4
  %v0_a864 = load i32, i32* @r6, align 4
  %v1_a864 = inttoptr i32 %v0_a864 to i32*
  %v2_a864 = load i32, i32* %v1_a864, align 4
  %v3_a868 = udiv i32 %v2_a864, 65536
  store i32 %v3_a868, i32* %r2.global-to-local, align 4
  %v3_a86c3 = udiv i32 %v2_a864, 16777216
  store i32 %v3_a86c3, i32* %r1.global-to-local, align 4
  %v0_a870 = load i32, i32* @r5, align 4
  %v3_a870 = sdiv i32 %v0_a870, 256
  store i32 %v3_a870, i32* %r3.global-to-local, align 4
  %v1_a874 = trunc i32 %v3_a870 to i8
  %v2_a874 = load i32, i32* %ip.global-to-local, align 4
  %v3_a874 = add i32 %v2_a874, 15
  %v4_a874 = inttoptr i32 %v3_a874 to i8*
  store i8 %v1_a874, i8* %v4_a874, align 1
  %v0_a878 = load i32, i32* %r1.global-to-local, align 4
  %v1_a878 = trunc i32 %v0_a878 to i8
  %v2_a878 = load i32, i32* %ip.global-to-local, align 4
  %v3_a878 = add i32 %v2_a878, 13
  %v4_a878 = inttoptr i32 %v3_a878 to i8*
  store i8 %v1_a878, i8* %v4_a878, align 1
  %v0_a87c = load i32, i32* %r2.global-to-local, align 4
  %v1_a87c = trunc i32 %v0_a87c to i8
  %v2_a87c = load i32, i32* %ip.global-to-local, align 4
  %v3_a87c = add i32 %v2_a87c, 12
  %v4_a87c = inttoptr i32 %v3_a87c to i8*
  store i8 %v1_a87c, i8* %v4_a87c, align 1
  %v0_a880 = load i32, i32* @r5, align 4
  %v1_a880 = trunc i32 %v0_a880 to i8
  %v2_a880 = load i32, i32* %ip.global-to-local, align 4
  %v3_a880 = add i32 %v2_a880, 14
  %v4_a880 = inttoptr i32 %v3_a880 to i8*
  store i8 %v1_a880, i8* %v4_a880, align 1
  %v0_a884 = load i32, i32* @sl, align 4
  store i32 %v0_a884, i32* %r0.global-to-local, align 4
  %v1_a888 = call i32 @function_128c4(i32 %v0_a884)
  store i32 %v1_a888, i32* %r0.global-to-local, align 4
  store i32 %v2_a3e4, i32* %r1.global-to-local, align 4
  %v3_a890 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a890, i32* %r2.global-to-local, align 4
  %v2_a894 = load i32, i32* @r4, align 4
  %v5_a894 = mul i32 %v2_a894, 4
  %v6_a894 = add i32 %v5_a894, %v2_a3e4
  %v7_a894 = inttoptr i32 %v6_a894 to i32*
  store i32 %v1_a888, i32* %v7_a894, align 4
  %v0_a898 = load i32, i32* %r1.global-to-local, align 4
  %v1_a898 = load i32, i32* %r2.global-to-local, align 4
  %v4_a898 = mul i32 %v1_a898, 4
  %v5_a898 = add i32 %v4_a898, %v0_a898
  %v6_a898 = inttoptr i32 %v5_a898 to i32*
  %v7_a898 = load i32, i32* %v6_a898, align 4
  store i32 %v7_a898, i32* @r4, align 4
  %v1_a89c = inttoptr i32 %v7_a898 to i8*
  %v2_a89c = load i8, i8* %v1_a89c, align 1
  %tmp100 = urem i8 %v2_a89c, 16
  %v1_a8a0 = zext i8 %tmp100 to i32
  %v1_a8a4 = or i32 %v1_a8a0, 64
  store i32 %v1_a8a4, i32* %r3.global-to-local, align 4
  %v1_a8a8 = trunc i32 %v1_a8a4 to i8
  store i8 %v1_a8a8, i8* %v1_a89c, align 1
  %v0_a8ac = load i32, i32* @r4, align 4
  %v1_a8ac = inttoptr i32 %v0_a8ac to i8*
  %v2_a8ac = load i8, i8* %v1_a8ac, align 1
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v1_a8b8 = and i8 %v2_a8ac, -16
  %v1_a8c0 = or i8 %v1_a8b8, 5
  store i32 %v5_a8c4, i32* %r0.global-to-local, align 4
  %v0_a8c8 = load i32, i32* @sl, align 4
  %v3_a8c8 = mul i32 %v0_a8c8, 65536
  store i32 %v3_a8c8, i32* %r2.global-to-local, align 4
  store i32 %v1_a464, i32* %lr.global-to-local, align 4
  store i8 %v1_a8c0, i8* %v1_a8ac, align 1
  store i32 %v5_a420, i32* %r1.global-to-local, align 4
  %v0_a8d8 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8d8 = udiv i32 %v0_a8d8, 65536
  %v1_a8dc = urem i32 %v3_a8d8, 256
  store i32 %v1_a8dc, i32* %r3.global-to-local, align 4
  %v3_a8e0 = udiv i32 %v0_a8d8, 16777216
  store i32 %v3_a8e0, i32* %r2.global-to-local, align 4
  %v2_a8e4 = load i32, i32* @r4, align 4
  %v3_a8e4 = add i32 %v2_a8e4, 1
  %v4_a8e4 = inttoptr i32 %v3_a8e4 to i8*
  store i8 %v1_a8e4, i8* %v4_a8e4, align 1
  %v0_a8e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_a8e8 = load i32, i32* %r3.global-to-local, align 4
  %v4_a8e8 = mul i32 %v1_a8e8, 256
  %v5_a8e8 = or i32 %v4_a8e8, %v0_a8e8
  store i32 %v5_a8e8, i32* %r2.global-to-local, align 4
  %v1_a8ec = trunc i32 %v0_a8e8 to i8
  %v2_a8ec = load i32, i32* @r4, align 4
  %v3_a8ec = add i32 %v2_a8ec, 2
  %v4_a8ec = inttoptr i32 %v3_a8ec to i8*
  store i8 %v1_a8ec, i8* %v4_a8ec, align 1
  %v0_a8f0 = load i32, i32* %lr.global-to-local, align 4
  %v2_a8f0 = icmp eq i32 %v0_a8f0, 0
  store i1 %v2_a8f0, i1* %cpsr_z.global-to-local, align 1
  %v0_a8f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_a8f4 = sdiv i32 %v0_a8f4, 256
  store i32 %v3_a8f4, i32* %r3.global-to-local, align 4
  store i32 %v5_a458, i32* %r2.global-to-local, align 4
  %v1_a8fc = trunc i32 %v3_a8f4 to i8
  %v2_a8fc = load i32, i32* @r4, align 4
  %v3_a8fc = add i32 %v2_a8fc, 3
  %v4_a8fc = inttoptr i32 %v3_a8fc to i8*
  store i8 %v1_a8fc, i8* %v4_a8fc, align 1
  %v0_a900 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a900, label %bb77, label %bb76

bb76:                                             ; preds = %dec_label_pc_a804
  store i32 64, i32* %r3.global-to-local, align 4
  br label %bb77

bb77:                                             ; preds = %dec_label_pc_a804, %bb76
  %v0_a904 = load i32, i32* %r2.global-to-local, align 4
  %v1_a904 = trunc i32 %v0_a904 to i8
  %v2_a904 = load i32, i32* @r4, align 4
  %v3_a904 = add i32 %v2_a904, 8
  %v4_a904 = inttoptr i32 %v3_a904 to i8*
  store i8 %v1_a904, i8* %v4_a904, align 1
  %v0_a908 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a908, label %.thread5, label %bb78

bb78:                                             ; preds = %bb77
  %v1_a908 = load i32, i32* %r3.global-to-local, align 4
  %v2_a908 = trunc i32 %v1_a908 to i8
  %v3_a908 = load i32, i32* @r4, align 4
  %v4_a908 = add i32 %v3_a908, 6
  %v5_a908 = inttoptr i32 %v4_a908 to i8*
  store i8 %v2_a908, i8* %v5_a908, align 1
  %v0_a90c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a90c.pr, label %.thread5, label %bb79

bb79:                                             ; preds = %bb78
  store i32 0, i32* %r2.global-to-local, align 4
  br label %.thread5

.thread5:                                         ; preds = %bb77, %bb78, %bb79
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_a914 = load i32, i32* @r4, align 4
  %v3_a914 = add i32 %v2_a914, 9
  %v4_a914 = inttoptr i32 %v3_a914 to i8*
  store i8 6, i8* %v4_a914, align 1
  %v0_a918 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_a918, label %bb81, label %bb80

bb80:                                             ; preds = %.thread5
  %v1_a918 = load i32, i32* %r2.global-to-local, align 4
  %v2_a918 = trunc i32 %v1_a918 to i8
  %v3_a918 = load i32, i32* @r4, align 4
  %v4_a918 = add i32 %v3_a918, 7
  %v5_a918 = inttoptr i32 %v4_a918 to i8*
  store i8 %v2_a918, i8* %v5_a918, align 1
  br label %bb81

bb81:                                             ; preds = %.thread5, %bb80
  %v2_a920 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_a920, i32* %r3.global-to-local, align 4
  %v0_a924 = load i32, i32* %r0.global-to-local, align 4
  %v3_a924 = sdiv i32 %v0_a924, 256
  store i32 %v3_a924, i32* %ip.global-to-local, align 4
  %v1_a928 = load i32, i32* @r4, align 4
  %v2_a928 = add i32 %v1_a928, 12
  %v3_a928 = inttoptr i32 %v2_a928 to i32*
  store i32 %v2_a920, i32* %v3_a928, align 4
  %v0_a92c = load i32, i32* %ip.global-to-local, align 4
  %v1_a92c = trunc i32 %v0_a92c to i8
  %v2_a92c = load i32, i32* @r4, align 4
  %v3_a92c = add i32 %v2_a92c, 5
  %v4_a92c = inttoptr i32 %v3_a92c to i8*
  store i8 %v1_a92c, i8* %v4_a92c, align 1
  %v3_a930 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_a930, i32* %r2.global-to-local, align 4
  store i32 %v2_a3d4, i32* %ip.global-to-local, align 4
  %v4_a938 = mul i32 %v3_a930, 16
  %v5_a938 = add i32 %v4_a938, %v2_a3d4
  %v6_a938 = inttoptr i32 %v5_a938 to i32*
  %v7_a938 = load i32, i32* %v6_a938, align 4
  store i32 %v7_a938, i32* %r3.global-to-local, align 4
  %v0_a93c = load i32, i32* %r0.global-to-local, align 4
  %v1_a93c = trunc i32 %v0_a93c to i8
  %v2_a93c = load i32, i32* @r4, align 4
  %v3_a93c = add i32 %v2_a93c, 4
  %v4_a93c = inttoptr i32 %v3_a93c to i8*
  store i8 %v1_a93c, i8* %v4_a93c, align 1
  %v0_a940 = load i32, i32* %r3.global-to-local, align 4
  %v1_a940 = load i32, i32* @r4, align 4
  %v2_a940 = add i32 %v1_a940, 16
  %v3_a940 = inttoptr i32 %v2_a940 to i32*
  store i32 %v0_a940, i32* %v3_a940, align 4
  %v0_a944 = load i32, i32* %r2.global-to-local, align 4
  %v3_a944 = mul i32 %v0_a944, 16
  %v1_a948 = load i32, i32* %ip.global-to-local, align 4
  %v2_a948 = add i32 %v1_a948, %v3_a944
  store i32 %v2_a948, i32* %r2.global-to-local, align 4
  %v1_a94c = add i32 %v2_a948, 13
  %v2_a94c = inttoptr i32 %v1_a94c to i8*
  %v3_a94c = load i8, i8* %v2_a94c, align 1
  %v4_a94c = zext i8 %v3_a94c to i32
  store i32 %v4_a94c, i32* %r1.global-to-local, align 4
  %v1_a950 = add i32 %v2_a948, 12
  %v2_a950 = inttoptr i32 %v1_a950 to i8*
  %v3_a950 = load i8, i8* %v2_a950, align 1
  %v4_a950 = zext i8 %v3_a950 to i32
  %v4_a954 = mul nuw nsw i32 %v4_a94c, 256
  %v5_a954 = or i32 %v4_a950, %v4_a954
  store i32 %v5_a954, i32* %r3.global-to-local, align 4
  %v2_a958 = load i32, i32* @r4, align 4
  %v3_a958 = add i32 %v2_a958, 20
  %v4_a958 = inttoptr i32 %v3_a958 to i8*
  store i8 %v3_a950, i8* %v4_a958, align 1
  %v0_a95c = load i32, i32* @r4, align 4
  %v1_a95c = add i32 %v0_a95c, 20
  store i32 %v1_a95c, i32* @r6, align 4
  %v0_a960 = load i32, i32* %r3.global-to-local, align 4
  %v3_a960 = sdiv i32 %v0_a960, 256
  store i32 %v3_a960, i32* %r3.global-to-local, align 4
  %v1_a964 = trunc i32 %v3_a960 to i8
  %v3_a964 = add i32 %v0_a95c, 21
  %v4_a964 = inttoptr i32 %v3_a964 to i8*
  store i8 %v1_a964, i8* %v4_a964, align 1
  %v0_a968 = load i32, i32* @r6, align 4
  %v1_a968 = add i32 %v0_a968, 13
  %v2_a968 = inttoptr i32 %v1_a968 to i8*
  %v3_a968 = load i8, i8* %v2_a968, align 1
  %v4_a968 = zext i8 %v3_a968 to i32
  store i32 %v4_a968, i32* %r3.global-to-local, align 4
  %v0_a96c = load i32, i32* %r2.global-to-local, align 4
  %v1_a96c = add i32 %v0_a96c, 8
  %v2_a96c = inttoptr i32 %v1_a96c to i32*
  %v3_a96c = load i32, i32* %v2_a96c, align 4
  store i32 %v3_a96c, i32* %r1.global-to-local, align 4
  %v1_a970 = or i32 %v4_a968, 1
  store i32 %v1_a970, i32* %r3.global-to-local, align 4
  %v1_a974 = add i32 %v0_a96c, 15
  %v2_a974 = inttoptr i32 %v1_a974 to i8*
  %v3_a974 = load i8, i8* %v2_a974, align 1
  %v4_a974 = zext i8 %v3_a974 to i32
  store i32 %v4_a974, i32* %ip.global-to-local, align 4
  %v1_a978 = add i32 %v0_a96c, 14
  %v2_a978 = inttoptr i32 %v1_a978 to i8*
  %v3_a978 = load i8, i8* %v2_a978, align 1
  %v4_a978 = zext i8 %v3_a978 to i32
  store i32 %v4_a978, i32* %r0.global-to-local, align 4
  %v2_a97c = add i32 %v0_a968, 4
  %v3_a97c = inttoptr i32 %v2_a97c to i32*
  store i32 %v3_a96c, i32* %v3_a97c, align 4
  %v0_a980 = load i32, i32* %r2.global-to-local, align 4
  %v1_a980 = add i32 %v0_a980, 4
  %v2_a980 = inttoptr i32 %v1_a980 to i32*
  %v3_a980 = load i32, i32* %v2_a980, align 4
  store i32 %v3_a980, i32* %lr.global-to-local, align 4
  %v0_a984 = load i32, i32* %r3.global-to-local, align 4
  %v1_a984 = trunc i32 %v0_a984 to i8
  %v2_a984 = load i32, i32* @r6, align 4
  %v3_a984 = add i32 %v2_a984, 13
  %v4_a984 = inttoptr i32 %v3_a984 to i8*
  store i8 %v1_a984, i8* %v4_a984, align 1
  %v0_a988 = load i32, i32* @r6, align 4
  %v1_a988 = add i32 %v0_a988, 12
  %v2_a988 = inttoptr i32 %v1_a988 to i8*
  %v3_a988 = load i8, i8* %v2_a988, align 1
  %v4_a988 = zext i8 %v3_a988 to i32
  store i32 %v4_a988, i32* %r2.global-to-local, align 4
  %v1_a98c = add i32 %v0_a988, 13
  %v2_a98c = inttoptr i32 %v1_a98c to i8*
  %v3_a98c = load i8, i8* %v2_a98c, align 1
  %v4_a98c = zext i8 %v3_a98c to i32
  %v0_a990 = load i32, i32* %r0.global-to-local, align 4
  %v1_a990 = load i32, i32* %ip.global-to-local, align 4
  %v4_a990 = mul i32 %v1_a990, 256
  %v5_a990 = or i32 %v4_a990, %v0_a990
  store i32 %v5_a990, i32* %r0.global-to-local, align 4
  %tmp101 = urem i8 %v3_a988, 16
  %v1_a994 = zext i8 %tmp101 to i32
  %v3_a998 = sdiv i32 %v5_a990, 256
  store i32 %v3_a998, i32* %r1.global-to-local, align 4
  %v1_a99c = or i32 %v1_a994, 128
  store i32 %v1_a99c, i32* %r2.global-to-local, align 4
  %v1_a9a0 = or i32 %v4_a98c, 16
  store i32 %v1_a9a0, i32* %r3.global-to-local, align 4
  %v1_a9a4 = trunc i32 %v3_a998 to i8
  %v3_a9a4 = add i32 %v0_a988, 3
  %v4_a9a4 = inttoptr i32 %v3_a9a4 to i8*
  store i8 %v1_a9a4, i8* %v4_a9a4, align 1
  %v0_a9a8 = load i32, i32* %lr.global-to-local, align 4
  %v1_a9a8 = load i32, i32* @r6, align 4
  %v2_a9a8 = add i32 %v1_a9a8, 8
  %v3_a9a8 = inttoptr i32 %v2_a9a8 to i32*
  store i32 %v0_a9a8, i32* %v3_a9a8, align 4
  %v0_a9ac = load i32, i32* %r2.global-to-local, align 4
  %v1_a9ac = trunc i32 %v0_a9ac to i8
  %v2_a9ac = load i32, i32* @r6, align 4
  %v3_a9ac = add i32 %v2_a9ac, 12
  %v4_a9ac = inttoptr i32 %v3_a9ac to i8*
  store i8 %v1_a9ac, i8* %v4_a9ac, align 1
  %v0_a9b0 = load i32, i32* %r3.global-to-local, align 4
  %v1_a9b0 = trunc i32 %v0_a9b0 to i8
  %v2_a9b0 = load i32, i32* @r6, align 4
  %v3_a9b0 = add i32 %v2_a9b0, 13
  %v4_a9b0 = inttoptr i32 %v3_a9b0 to i8*
  store i8 %v1_a9b0, i8* %v4_a9b0, align 1
  %v0_a9b4 = load i32, i32* %r0.global-to-local, align 4
  %v1_a9b4 = trunc i32 %v0_a9b4 to i8
  %v2_a9b4 = load i32, i32* @r6, align 4
  %v3_a9b4 = add i32 %v2_a9b4, 2
  %v4_a9b4 = inttoptr i32 %v3_a9b4 to i8*
  store i8 %v1_a9b4, i8* %v4_a9b4, align 1
  %v0_a9b8 = call i32 @function_ebc8()
  %v1_a9b8 = trunc i32 %v0_a9b8 to i8
  store i32 %v0_a9b8, i32* %r0.global-to-local, align 4
  store i32 %v1_a49c, i32* %lr.global-to-local, align 4
  %v0_a9c0 = load i32, i32* @r6, align 4
  %v1_a9c0 = add i32 %v0_a9c0, 13
  %v2_a9c0 = inttoptr i32 %v1_a9c0 to i8*
  %v3_a9c0 = load i8, i8* %v2_a9c0, align 1
  %v4_a9c0 = zext i8 %v3_a9c0 to i32
  store i32 %v1_a9c4, i32* %r2.global-to-local, align 4
  %v1_a9c8 = and i32 %v4_a9c0, 223
  %v5_a9cc = or i32 %v1_a9c8, %v4_a9cc
  store i32 %v5_a9cc, i32* %r3.global-to-local, align 4
  %v1_a9d0 = trunc i32 %v5_a9cc to i8
  store i8 %v1_a9d0, i8* %v2_a9c0, align 1
  store i32 %v1_a4bc, i32* %r1.global-to-local, align 4
  %v0_a9d8 = load i32, i32* @r6, align 4
  %v1_a9d8 = add i32 %v0_a9d8, 13
  %v2_a9d8 = inttoptr i32 %v1_a9d8 to i8*
  %v3_a9d8 = load i8, i8* %v2_a9d8, align 1
  %v4_a9d8 = zext i8 %v3_a9d8 to i32
  store i32 %v1_a9dc, i32* %r3.global-to-local, align 4
  %v1_a9e0 = and i32 %v4_a9d8, 239
  %v5_a9e4 = or i32 %v1_a9e0, %v4_a9e4
  store i32 %v5_a9e4, i32* %r2.global-to-local, align 4
  %v1_a9e8 = trunc i32 %v5_a9e4 to i8
  store i8 %v1_a9e8, i8* %v2_a9d8, align 1
  store i32 %v1_a4dc, i32* %ip.global-to-local, align 4
  %v0_a9f0 = load i32, i32* @r6, align 4
  %v1_a9f0 = add i32 %v0_a9f0, 13
  %v2_a9f0 = inttoptr i32 %v1_a9f0 to i8*
  %v3_a9f0 = load i8, i8* %v2_a9f0, align 1
  %v4_a9f0 = zext i8 %v3_a9f0 to i32
  store i32 %v1_a9f4, i32* %r2.global-to-local, align 4
  %v1_a9f8 = and i32 %v4_a9f0, 247
  %v5_a9fc = or i32 %v1_a9f8, %v4_a9fc
  store i32 %v5_a9fc, i32* %r3.global-to-local, align 4
  %v1_aa00 = trunc i32 %v5_a9fc to i8
  store i8 %v1_aa00, i8* %v2_a9f0, align 1
  %v0_aa08 = load i32, i32* @r6, align 4
  %v1_aa08 = add i32 %v0_aa08, 13
  %v2_aa08 = inttoptr i32 %v1_aa08 to i8*
  %v3_aa08 = load i8, i8* %v2_aa08, align 1
  %v4_aa08 = zext i8 %v3_aa08 to i32
  store i32 %v1_aa0c, i32* %r3.global-to-local, align 4
  %v1_aa10 = and i32 %v4_aa08, 251
  %v5_aa14 = or i32 %v1_aa10, %v4_aa14
  store i32 %v5_aa14, i32* %r2.global-to-local, align 4
  %v1_aa18 = trunc i32 %v5_aa14 to i8
  store i8 %v1_aa18, i8* %v2_aa08, align 1
  store i32 %v1_a51c, i32* %r1.global-to-local, align 4
  %v0_aa20 = load i32, i32* @r6, align 4
  %v1_aa20 = add i32 %v0_aa20, 13
  %v2_aa20 = inttoptr i32 %v1_aa20 to i8*
  %v3_aa20 = load i8, i8* %v2_aa20, align 1
  %v4_aa20 = zext i8 %v3_aa20 to i32
  store i32 %v1_aa24, i32* %r2.global-to-local, align 4
  %v1_aa28 = and i32 %v4_aa20, 253
  %v4_aa2c = or i32 %v1_aa28, %v3_aa2c
  store i32 %v4_aa2c, i32* %r3.global-to-local, align 4
  %v1_aa30 = trunc i32 %v4_aa2c to i8
  store i8 %v1_aa30, i8* %v2_aa20, align 1
  %v0_aa34 = load i32, i32* @r6, align 4
  %v1_aa34 = add i32 %v0_aa34, 13
  %v2_aa34 = inttoptr i32 %v1_aa34 to i8*
  %v3_aa34 = load i8, i8* %v2_aa34, align 1
  %v4_aa34 = zext i8 %v3_aa34 to i32
  %v0_aa38 = load i32, i32* @r8, align 4
  %v1_aa38 = urem i32 %v0_aa38, 2
  %v1_aa3c = and i32 %v4_aa34, 254
  store i32 %v1_aa3c, i32* %r2.global-to-local, align 4
  %v4_aa4027 = udiv i32 %v0_a9b8, 256
  %v2_aa44 = or i32 %v1_aa3c, %v1_aa38
  store i32 %v2_aa44, i32* %r3.global-to-local, align 4
  %v1_aa48 = trunc i32 %v4_aa4027 to i8
  %v3_aa48 = add i32 %v0_aa34, 15
  %v4_aa48 = inttoptr i32 %v3_aa48 to i8*
  store i8 %v1_aa48, i8* %v4_aa48, align 1
  %v3_aa4c = load i32, i32* @r6, align 4
  %v4_aa4c = add i32 %v3_aa4c, 14
  %v5_aa4c = inttoptr i32 %v4_aa4c to i8*
  store i8 %v1_a9b8, i8* %v5_aa4c, align 1
  %v0_aa50 = load i32, i32* %r3.global-to-local, align 4
  %v1_aa50 = trunc i32 %v0_aa50 to i8
  %v2_aa50 = load i32, i32* @r6, align 4
  %v3_aa50 = add i32 %v2_aa50, 13
  %v4_aa50 = inttoptr i32 %v3_aa50 to i8*
  store i8 %v1_aa50, i8* %v4_aa50, align 1
  %v0_aa54 = load i32, i32* @r4, align 4
  %v1_aa54 = add i32 %v0_aa54, 40
  store i32 %v1_aa54, i32* %r0.global-to-local, align 4
  %v0_aa58 = load i32, i32* @sb, align 4
  store i32 %v0_aa58, i32* @r1, align 4
  %v1_aa5c = inttoptr i32 %v1_aa54 to i8*
  %v2_aa5c = call i32 @function_ed48(i8* %v1_aa5c)
  store i32 %v2_aa5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_aa60

dec_label_pc_aa60:                                ; preds = %dec_label_pc_a600, %bb81
  %v3_aa60 = load i32, i32* %stack_var_-40, align 4
  %v1_aa64 = add i32 %v3_aa60, 1
  store i32 %v1_aa64, i32* %r3.global-to-local, align 4
  %v1_aa68 = load i32, i32* @fp, align 4
  %v9_aa68 = icmp eq i32 %v1_aa64, %v1_aa68
  store i1 %v9_aa68, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_aa64, i32* %stack_var_-40, align 4
  %v5_aa70 = icmp slt i32 %v1_aa64, %v1_aa68
  br i1 %v5_aa70, label %dec_label_pc_a5f0, label %dec_label_pc_aa74

dec_label_pc_aa74:                                ; preds = %dec_label_pc_aa60, %.thread18
  %v0_aa7c12 = phi i32 [ %v0_a5c4, %.thread18 ], [ %v1_aa68, %dec_label_pc_aa60 ]
  %v0_aa74 = load i32, i32* @sb, align 4
  %v1_aa74 = add i32 %v0_aa74, 40
  store i32 %v1_aa74, i32* @sl, align 4
  %v1_aa78 = add i32 %v0_aa74, 20
  store i32 %v1_aa78, i32* @r7, align 4
  %v2_aac8 = icmp eq i32 %v1_a574, 0
  %v6_aaa8 = inttoptr i32 %v2_a3e4 to i32*
  %v3_aab0 = icmp eq i32 %v3_a5cc, 65535
  br label %dec_label_pc_aa7c

dec_label_pc_aa7c:                                ; preds = %dec_label_pc_aad8, %dec_label_pc_aa74
  %v0_aa7c = phi i32 [ %v1_abb8, %dec_label_pc_aad8 ], [ %v0_aa7c12, %dec_label_pc_aa74 ]
  %v2_aa7c = icmp eq i32 %v0_aa7c, 0
  store i1 %v2_aa7c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp82 = icmp slt i32 %v0_aa7c, 1
  br label %dec_label_pc_aa84

dec_label_pc_aa84:                                ; preds = %dec_label_pc_aa84, %dec_label_pc_aa7c
  br i1 %tmp82, label %dec_label_pc_aa84, label %dec_label_pc_aa88

dec_label_pc_aa88:                                ; preds = %dec_label_pc_aa84
  %v0_aa88 = load i32, i32* @r7, align 4
  %tmp83 = mul i32 %v0_aa88, 256
  %v1_aa90 = and i32 %tmp83, 65280
  %tmp84 = udiv i32 %v0_aa88, 256
  %v4_aa94 = urem i32 %tmp84, 256
  %v5_aa94 = or i32 %v4_aa94, %v1_aa90
  store i32 %v5_aa94, i32* @r8, align 4
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v7_aaa8 = load i32, i32* %v6_aaa8, align 4
  store i32 %v7_aaa8, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* @r6, align 4
  %v1_aabc = add i32 %v7_aaa8, 20
  store i32 %v1_aabc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_aac4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_aacc = phi i32 [ %v7_abd0, %dec_label_pc_abc4 ], [ %v7_aaa8, %dec_label_pc_aa88 ]
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v1_aacc = add i32 %v0_aacc, 40
  store i32 %v1_aacc, i32* %r0.global-to-local, align 4
  %v0_aad0 = load i32, i32* @sb, align 4
  store i32 %v0_aad0, i32* @r1, align 4
  br i1 %v2_aac8, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_aad8:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4, %dec_label_pc_ac08
  %v2_aad8 = phi i32 [ %v0_aacc, %dec_label_pc_aac4 ], [ %v0_abfc, %dec_label_pc_abe4 ], [ %v2_aad8.pre, %dec_label_pc_ac08 ]
  %v0_aad8 = load i32, i32* @r6, align 4
  %v1_aad8 = trunc i32 %v0_aad8 to i8
  %v3_aad8 = add i32 %v2_aad8, 10
  %v4_aad8 = inttoptr i32 %v3_aad8 to i8*
  store i8 %v1_aad8, i8* %v4_aad8, align 1
  %v0_aadc = load i32, i32* @r6, align 4
  %v1_aadc = trunc i32 %v0_aadc to i8
  %v2_aadc = load i32, i32* @r4, align 4
  %v3_aadc = add i32 %v2_aadc, 11
  %v4_aadc = inttoptr i32 %v3_aadc to i8*
  store i8 %v1_aadc, i8* %v4_aadc, align 1
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_aae4 = load i32, i32* @r4, align 4
  store i32 %v0_aae4, i32* @r0, align 4
  %v2_aae8 = call i32 @function_d0b8(i32 %v0_aae4, i32 20)
  %v3_aae8 = trunc i32 %v2_aae8 to i8
  store i32 %v2_aae8, i32* %r0.global-to-local, align 4
  %v3_aaec = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_a3d4, i32* %r2.global-to-local, align 4
  %v3_aaf4 = mul i32 %v3_aaec, 16
  %v2_aaf8 = add i32 %v3_aaf4, %v2_a3d4
  store i32 %v2_aaf8, i32* %r1.global-to-local, align 4
  %v1_aafc = add i32 %v2_aaf8, 4
  %v2_aafc = inttoptr i32 %v1_aafc to i32*
  %v3_aafc = load i32, i32* %v2_aafc, align 4
  %v3_ab00 = mul i32 %v3_aafc, 65536
  store i32 %v3_ab00, i32* %ip.global-to-local, align 4
  %tmp85 = mul i32 %v3_aafc, 256
  %v1_ab08 = and i32 %tmp85, 65280
  %tmp86 = udiv i32 %v3_aafc, 256
  %v4_ab0c = urem i32 %tmp86, 256
  %v5_ab0c = or i32 %v4_ab0c, %v1_ab08
  store i32 %v5_ab0c, i32* %r2.global-to-local, align 4
  %v1_ab10 = add i32 %v3_aafc, 1
  store i32 %v1_ab10, i32* %r3.global-to-local, align 4
  store i32 %v1_ab10, i32* %v2_aafc, align 4
  %v0_ab18 = load i32, i32* %r2.global-to-local, align 4
  %v1_ab18 = load i32, i32* @r5, align 4
  %v2_ab18 = add i32 %v1_ab18, 4
  %v3_ab18 = inttoptr i32 %v2_ab18 to i32*
  store i32 %v0_ab18, i32* %v3_ab18, align 4
  %v0_ab1c = load i32, i32* %r1.global-to-local, align 4
  %v1_ab1c = add i32 %v0_ab1c, 8
  %v2_ab1c = inttoptr i32 %v1_ab1c to i32*
  %v3_ab1c = load i32, i32* %v2_ab1c, align 4
  %tmp87 = mul i32 %v3_ab1c, 256
  %v1_ab28 = and i32 %tmp87, 65280
  %tmp88 = udiv i32 %v3_ab1c, 256
  %v4_ab2c = urem i32 %tmp88, 256
  %v5_ab2c = or i32 %v4_ab2c, %v1_ab28
  store i32 %v5_ab2c, i32* %r2.global-to-local, align 4
  %v4_ab3028 = udiv i32 %v2_aae8, 256
  %v1_ab34 = trunc i32 %v4_ab3028 to i8
  %v2_ab34 = load i32, i32* @r4, align 4
  %v3_ab34 = add i32 %v2_ab34, 11
  %v4_ab34 = inttoptr i32 %v3_ab34 to i8*
  store i8 %v1_ab34, i8* %v4_ab34, align 1
  %v3_ab38 = load i32, i32* @r4, align 4
  %v4_ab38 = add i32 %v3_ab38, 10
  %v5_ab38 = inttoptr i32 %v4_ab38 to i8*
  store i8 %v3_aae8, i8* %v5_ab38, align 1
  %v0_ab3c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab3c = load i32, i32* @r5, align 4
  %v2_ab3c = add i32 %v1_ab3c, 8
  %v3_ab3c = inttoptr i32 %v2_ab3c to i32*
  store i32 %v0_ab3c, i32* %v3_ab3c, align 4
  %v0_ab40 = load i32, i32* @r5, align 4
  store i32 %v0_ab40, i32* @r1, align 4
  %v0_ab44 = load i32, i32* @r8, align 4
  store i32 %v0_ab44, i32* %r2.global-to-local, align 4
  %v0_ab48 = load i32, i32* @r7, align 4
  store i32 %v0_ab48, i32* %r3.global-to-local, align 4
  %v0_ab4c = load i32, i32* @r4, align 4
  store i32 %v0_ab4c, i32* %r0.global-to-local, align 4
  %v0_ab50 = load i32, i32* @r6, align 4
  %v1_ab50 = trunc i32 %v0_ab50 to i8
  %v3_ab50 = add i32 %v0_ab40, 16
  %v4_ab50 = inttoptr i32 %v3_ab50 to i8*
  store i8 %v1_ab50, i8* %v4_ab50, align 1
  %v0_ab54 = load i32, i32* @r6, align 4
  %v1_ab54 = trunc i32 %v0_ab54 to i8
  %v2_ab54 = load i32, i32* @r5, align 4
  %v3_ab54 = add i32 %v2_ab54, 17
  %v4_ab54 = inttoptr i32 %v3_ab54 to i8*
  store i8 %v1_ab54, i8* %v4_ab54, align 1
  %v4_ab58 = call i32 @function_d114(i32 %v0_ab4c, i32 %v0_ab40, i32 %v0_ab44, i32 %v0_ab48)
  %v5_ab58 = trunc i32 %v4_ab58 to i8
  store i32 %v4_ab58, i32* %r0.global-to-local, align 4
  %v4_ab5c29 = udiv i32 %v4_ab58, 256
  %v1_ab60 = trunc i32 %v4_ab5c29 to i8
  %v2_ab60 = load i32, i32* @r5, align 4
  %v3_ab60 = add i32 %v2_ab60, 17
  %v4_ab60 = inttoptr i32 %v3_ab60 to i8*
  store i8 %v1_ab60, i8* %v4_ab60, align 1
  %v3_ab64 = load i32, i32* @r5, align 4
  %v4_ab64 = add i32 %v3_ab64, 16
  %v5_ab64 = inttoptr i32 %v4_ab64 to i8*
  store i8 %v5_ab58, i8* %v5_ab64, align 1
  %v3_ab68 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_ab68, i32* %r3.global-to-local, align 4
  %v0_ab6c = load i32, i32* @r4, align 4
  %v1_ab6c = add i32 %v0_ab6c, 20
  %v2_ab6c = inttoptr i32 %v1_ab6c to i32*
  %v3_ab6c = load i32, i32* %v2_ab6c, align 4
  %v5_ab74 = mul i32 %v3_ab68, 24
  %v3_ab7c = udiv i32 %v3_ab6c, 65536
  store i32 %v3_ab7c, i32* %r2.global-to-local, align 4
  %v2_ab80 = add i32 %v5_ab74, %arg2
  store i32 %v2_ab80, i32* %ip.global-to-local, align 4
  %v3_ab844 = udiv i32 %v3_ab6c, 16777216
  %v1_ab88 = trunc i32 %v3_ab844 to i8
  %v3_ab88 = add i32 %v2_ab80, 3
  %v4_ab88 = inttoptr i32 %v3_ab88 to i8*
  store i8 %v1_ab88, i8* %v4_ab88, align 1
  %v0_ab8c = load i32, i32* %r2.global-to-local, align 4
  %v1_ab8c = trunc i32 %v0_ab8c to i8
  %v2_ab8c = load i32, i32* %ip.global-to-local, align 4
  %v3_ab8c = add i32 %v2_ab8c, 2
  %v4_ab8c = inttoptr i32 %v3_ab8c to i8*
  store i8 %v1_ab8c, i8* %v4_ab8c, align 1
  %v0_ab90 = load i32, i32* @r4, align 4
  store i32 %v0_ab90, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v3_a584, i32* %r0.global-to-local, align 4
  %v0_ab9c = load i32, i32* @sl, align 4
  store i32 %v0_ab9c, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_aba4 = load i32, i32* %ip.global-to-local, align 4
  %v6_abac = inttoptr i32 %v0_ab90 to i32*
  %v7_abac = call i32 @function_126c8(i32 %v3_a584, i32* %v6_abac, i32 %v0_ab9c, i32 16384, i32 %v0_aba4, i32 16)
  %v3_abb0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_abb0, i32* %r3.global-to-local, align 4
  %v1_abb4 = add i32 %v3_abb0, 1
  store i32 %v1_abb4, i32* %r0.global-to-local, align 4
  %v1_abb8 = load i32, i32* @fp, align 4
  %v9_abb8 = icmp eq i32 %v1_abb4, %v1_abb8
  store i1 %v9_abb8, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_abb4, i32* %stack_var_-40, align 4
  %v6_abc0 = icmp slt i32 %v1_abb4, %v1_abb8
  br i1 %v6_abc0, label %dec_label_pc_abc4, label %dec_label_pc_aa7c

dec_label_pc_abc4:                                ; preds = %dec_label_pc_aad8
  store i32 %v2_a3e4, i32* %r2.global-to-local, align 4
  store i32 65536, i32* %r3.global-to-local, align 4
  store i32 %v3_a5cc, i32* %ip.global-to-local, align 4
  %v4_abd0 = mul i32 %v1_abb4, 4
  %v5_abd0 = add i32 %v4_abd0, %v2_a3e4
  %v6_abd0 = inttoptr i32 %v5_abd0 to i32*
  %v7_abd0 = load i32, i32* %v6_abd0, align 4
  store i32 %v7_abd0, i32* @r4, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i1 %v3_aab0, i1* %cpsr_z.global-to-local, align 1
  %v1_abdc = add i32 %v7_abd0, 20
  store i32 %v1_abdc, i32* @r5, align 4
  br i1 %v3_aab0, label %dec_label_pc_abe4, label %dec_label_pc_aac4

dec_label_pc_abe4:                                ; preds = %dec_label_pc_abc4, %dec_label_pc_aa88
  %v0_abe4 = call i32 @function_ebc8()
  %v1_abe4 = trunc i32 %v0_abe4 to i8
  store i32 %v1_a574, i32* %lr.global-to-local, align 4
  %v4_abec = sdiv i32 %v0_abe4, 256
  store i32 %v4_abec, i32* %r3.global-to-local, align 4
  store i1 %v2_aac8, i1* %cpsr_z.global-to-local, align 1
  %v3_abf4 = load i32, i32* @r4, align 4
  %v4_abf4 = add i32 %v3_abf4, 4
  %v5_abf4 = inttoptr i32 %v4_abf4 to i8*
  store i8 %v1_abe4, i8* %v5_abf4, align 1
  %v0_abf8 = load i32, i32* %r3.global-to-local, align 4
  %v1_abf8 = trunc i32 %v0_abf8 to i8
  %v2_abf8 = load i32, i32* @r4, align 4
  %v3_abf8 = add i32 %v2_abf8, 5
  %v4_abf8 = inttoptr i32 %v3_abf8 to i8*
  store i8 %v1_abf8, i8* %v4_abf8, align 1
  %v0_abfc = load i32, i32* @r4, align 4
  %v1_abfc = add i32 %v0_abfc, 40
  store i32 %v1_abfc, i32* %r0.global-to-local, align 4
  %v0_ac00 = load i32, i32* @sb, align 4
  store i32 %v0_ac00, i32* @r1, align 4
  %v0_ac04 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ac04, label %dec_label_pc_aad8, label %dec_label_pc_ac08

dec_label_pc_ac08:                                ; preds = %dec_label_pc_aac4, %dec_label_pc_abe4
  %v0_ac08 = phi i32 [ %v1_aacc, %dec_label_pc_aac4 ], [ %v1_abfc, %dec_label_pc_abe4 ]
  %v1_ac08 = inttoptr i32 %v0_ac08 to i8*
  %v2_ac08 = call i32 @function_ed48(i8* %v1_ac08)
  store i32 %v2_ac08, i32* %r0.global-to-local, align 4
  %v2_aad8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_aad8

; uselistorder directives
  uselistorder i32 %v0_abfc, { 1, 0 }
  uselistorder i32 %v7_abd0, { 1, 2, 0 }
  uselistorder i32 %v1_abb8, { 1, 2, 0 }
  uselistorder i32 %v1_abb4, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v4_ab58, { 0, 2, 1 }
  uselistorder i32 %v0_ab40, { 1, 0, 2 }
  uselistorder i32 %v3_ab1c, { 1, 0 }
  uselistorder i32 %v3_aafc, { 3, 2, 0, 1 }
  uselistorder i32 %v2_aae8, { 0, 2, 1 }
  uselistorder i32 %v0_aacc, { 1, 0 }
  uselistorder i32 %v0_aa88, { 1, 0 }
  uselistorder i32 %v0_aa7c, { 1, 0 }
  uselistorder i1 %v3_aab0, { 2, 3, 1, 0 }
  uselistorder i32 %v1_aa64, { 1, 0, 2, 3 }
  uselistorder i32 %v0_a9b8, { 0, 2, 1 }
  uselistorder i32 %v3_a998, { 1, 0 }
  uselistorder i32 %v0_a96c, { 1, 0, 2 }
  uselistorder i32 %v3_a960, { 1, 0 }
  uselistorder i32 %v3_a8f4, { 1, 0 }
  uselistorder i32 %v0_a8e8, { 1, 0 }
  uselistorder i32 %v3_a870, { 1, 0 }
  uselistorder i32 %v2_a85c, { 1, 0 }
  uselistorder i32 %v3_a840, { 1, 0, 2, 3 }
  uselistorder i32 %v2_a838, { 1, 0 }
  uselistorder i32 %v3_a814, { 1, 0, 2, 3 }
  uselistorder i32 %v3_a80c, { 1, 0 }
  uselistorder i32 %v4_a7f4, { 1, 0 }
  uselistorder i32 %v0_a7f0, { 0, 2, 1 }
  uselistorder i1 %v7_a760, { 1, 0 }
  uselistorder i32 %v7_a758, { 0, 2, 1, 3 }
  uselistorder i32 %v5_a7a4, { 1, 0 }
  uselistorder i1 %v9_a788, { 1, 0 }
  uselistorder i32 %v4_a79c, { 1, 0 }
  uselistorder i32 %v4_a798, { 1, 0 }
  uselistorder i32 %v8_a6ac, { 1, 2, 0, 3 }
  uselistorder i32 %v3_a698, { 1, 0 }
  uselistorder i32 %v0_a688, { 2, 0, 1, 3 }
  uselistorder i1 %v7_a610, { 1, 0 }
  uselistorder i32 %v3_a60c, { 2, 1, 0, 3 }
  uselistorder i32 %v1_aa24, { 1, 0 }
  uselistorder i32 %v1_aa0c, { 1, 0 }
  uselistorder i32 %v1_a9f4, { 1, 0 }
  uselistorder i32 %v1_a9dc, { 1, 0 }
  uselistorder i32 %v1_a9c4, { 1, 0 }
  uselistorder i32 %v5_a7a0, { 1, 0 }
  uselistorder i32 %v3_a6f493, { 1, 0 }
  uselistorder i1 %v2_a7b8, { 1, 0 }
  uselistorder i32 %v1_a7b4, { 1, 0 }
  uselistorder i32 %v4_a7b0, { 2, 0, 1 }
  uselistorder i32 %v4_a794, { 1, 0 }
  uselistorder i1 %v3_a6dc, { 1, 0 }
  uselistorder i32 %v8_a5d8, { 2, 1, 0 }
  uselistorder i32 %v8_a5d4, { 1, 2, 0 }
  uselistorder i32 %v3_a5cc, { 2, 3, 4, 1, 0 }
  uselistorder i32 %v0_a5c8, { 0, 1, 3, 2 }
  uselistorder i1 %v7_a5bc, { 1, 0 }
  uselistorder i1 %v7_a58c, { 1, 0 }
  uselistorder i32 %v3_a588, { 2, 0, 1 }
  uselistorder i32 %v3_a584, { 5, 6, 1, 3, 4, 7, 8, 2, 0, 9 }
  uselistorder i32 %v1_a574, { 1, 3, 2, 0 }
  uselistorder i32 %v1_a51c, { 1, 2, 0 }
  uselistorder i32 %v1_a4fc, { 1, 0 }
  uselistorder i32 %v1_a4dc, { 1, 2, 0 }
  uselistorder i32 %v1_a4bc, { 1, 2, 0 }
  uselistorder i32 %v1_a49c, { 1, 2, 0 }
  uselistorder i32 %v1_a464, { 1, 2, 0 }
  uselistorder i32 %v5_a420, { 0, 2, 1 }
  uselistorder i32 %v2_a3e4, { 0, 4, 5, 2, 1, 3, 6 }
  uselistorder i32 %v2_a3d4, { 0, 7, 1, 4, 2, 5, 3, 6 }
  uselistorder i32 %v1_a3b8, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 1, 16, 15 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 25, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 40, 42, 44, 43, 45, 47, 46, 0 }
  uselistorder i32* %r0.global-to-local, { 2, 1, 3, 4, 6, 5, 10, 7, 8, 11, 9, 19, 12, 13, 14, 15, 16, 17, 18, 23, 20, 21, 22, 24, 26, 25, 28, 27, 31, 29, 32, 33, 30, 34, 36, 35, 37, 38, 40, 39, 44, 41, 42, 43, 45, 47, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 10, 11, 13, 14, 15, 16, 18, 0, 19, 20, 17, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 768, { 0, 2, 1, 3 }
  uselistorder i32 %arg2, { 0, 1, 3, 2, 4, 5 }
  uselistorder label %dec_label_pc_ac08, { 1, 0 }
  uselistorder label %dec_label_pc_aad8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_aa60, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %.thread5, { 2, 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %dec_label_pc_a7e8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_a720, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_a6d0, { 1, 0 }
}

define i32 @function_ac14(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_ac14:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v1_ac18 = urem i32 %arg1, 256
  store i32 %v1_ac18, i32* @fp, align 4
  store i32 %arg2, i32* @sb, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_ac30 = urem i32 %arg3, 256
  store i32 %v1_ac30, i32* @r4, align 4
  %v2_ac34 = call i32 @function_12a18(i32 %v1_ac18, i32 4)
  %v0_ac38 = load i32, i32* @r5, align 4
  store i32 %v0_ac38, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ac48 = load i32, i32* @r4, align 4
  %v5_ac4c = inttoptr i32 %v0_ac38 to i32*
  %v6_ac4c = call i32 @function_85e0(i32 %v0_ac48, i32* %v5_ac4c, i32 2, i32 0, i32 %v2_ac34)
  %v1_ac58 = urem i32 %v6_ac4c, 256
  store i32 %v1_ac58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_ac64 = load i32, i32* @r5, align 4
  store i32 %v0_ac64, i32* %r1.global-to-local, align 4
  %v0_ac68 = load i32, i32* @r4, align 4
  %v5_ac6c = trunc i32 %v6_ac4c to i8
  %v6_ac70 = inttoptr i32 %v0_ac64 to i32*
  %v7_ac70 = call i32 @function_85e0(i32 %v0_ac68, i32* %v6_ac70, i32 3, i32 65535, i32 %v6_ac4c)
  %v0_ac74 = load i32, i32* @r5, align 4
  store i32 %v0_ac74, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_ac70, i32* @r8, align 4
  %v0_ac84 = load i32, i32* @r4, align 4
  %v5_ac88 = inttoptr i32 %v0_ac74 to i32*
  %v6_ac88 = call i32 @function_85e0(i32 %v0_ac84, i32* %v5_ac88, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_ac90 = urem i32 %v6_ac88, 256
  store i32 %v1_ac90, i32* %ip.global-to-local, align 4
  %v0_ac94 = load i32, i32* @r5, align 4
  store i32 %v0_ac94, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_aca0 = load i32, i32* @r4, align 4
  %sext13 = mul i32 %v6_ac88, 16777216
  %v5_aca8 = sdiv i32 %sext13, 16777216
  %v6_aca8 = inttoptr i32 %v0_ac94 to i32*
  %v7_aca8 = call i32 @function_85e0(i32 %v0_aca0, i32* %v6_aca8, i32 5, i32 0, i32 %v5_aca8)
  %v1_acb4 = urem i32 %v7_aca8, 256
  store i32 %v1_acb4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_acc0 = load i32, i32* @r5, align 4
  store i32 %v0_acc0, i32* %r1.global-to-local, align 4
  %v0_acc4 = load i32, i32* @r4, align 4
  %v5_accc = inttoptr i32 %v0_acc0 to i32*
  %v6_accc = call i32 @function_85e0(i32 %v0_acc4, i32* %v5_accc, i32 6, i32 65535, i32 %v1_acb4)
  %v0_acd4 = load i32, i32* @r5, align 4
  store i32 %v0_acd4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_accc, i32* @r7, align 4
  %v0_ace4 = load i32, i32* @r4, align 4
  %v5_ace8 = inttoptr i32 %v0_acd4 to i32*
  %v6_ace8 = call i32 @function_85e0(i32 %v0_ace4, i32* %v5_ace8, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_acf0 = load i32, i32* @r5, align 4
  store i32 %v0_acf0, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_ace8, i32* @r6, align 4
  %v0_ad00 = load i32, i32* @r4, align 4
  %v5_ad04 = inttoptr i32 %v0_acf0 to i32*
  %v6_ad04 = call i32 @function_85e0(i32 %v0_ad00, i32* %v5_ad04, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_ad10 = load i32, i32* @r5, align 4
  store i32 %v0_ad10, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  %v0_ad1c = load i32, i32* @r4, align 4
  %v5_ad20 = inttoptr i32 %v0_ad10 to i32*
  %v6_ad20 = call i32 @function_85e0(i32 %v0_ad1c, i32* %v5_ad20, i32 18, i32 65535, i32 %v6_ad04)
  %v0_ad24 = load i32, i32* @r5, align 4
  store i32 %v0_ad24, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad34 = load i32, i32* @r4, align 4
  %v5_ad38 = inttoptr i32 %v0_ad24 to i32*
  %v6_ad38 = call i32 @function_85e0(i32 %v0_ad34, i32* %v5_ad38, i32 11, i32 0, i32 %v6_ad20)
  %v0_ad3c = load i32, i32* @r5, align 4
  store i32 %v0_ad3c, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_ad4c = load i32, i32* @r4, align 4
  %v5_ad50 = inttoptr i32 %v0_ad3c to i32*
  %v6_ad50 = call i32 @function_85e0(i32 %v0_ad4c, i32* %v5_ad50, i32 12, i32 1, i32 %v6_ad38)
  %v0_ad54 = load i32, i32* @r5, align 4
  store i32 %v0_ad54, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad64 = load i32, i32* @r4, align 4
  %v5_ad68 = inttoptr i32 %v0_ad54 to i32*
  %v6_ad68 = call i32 @function_85e0(i32 %v0_ad64, i32* %v5_ad68, i32 13, i32 0, i32 %v6_ad50)
  %v0_ad6c = load i32, i32* @r5, align 4
  store i32 %v0_ad6c, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad7c = load i32, i32* @r4, align 4
  %v5_ad80 = inttoptr i32 %v0_ad6c to i32*
  %v6_ad80 = call i32 @function_85e0(i32 %v0_ad7c, i32* %v5_ad80, i32 14, i32 0, i32 %v6_ad68)
  %v0_ad84 = load i32, i32* @r5, align 4
  store i32 %v0_ad84, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ad94 = load i32, i32* @r4, align 4
  %v5_ad98 = inttoptr i32 %v0_ad84 to i32*
  %v6_ad98 = call i32 @function_85e0(i32 %v0_ad94, i32* %v5_ad98, i32 15, i32 0, i32 %v6_ad80)
  %v0_ad9c = load i32, i32* @r5, align 4
  store i32 %v0_ad9c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_adac = load i32, i32* @r4, align 4
  %v5_adb0 = inttoptr i32 %v0_ad9c to i32*
  %v6_adb0 = call i32 @function_85e0(i32 %v0_adac, i32* %v5_adb0, i32 16, i32 0, i32 %v6_ad98)
  %v0_adb4 = load i32, i32* @r5, align 4
  store i32 %v0_adb4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  %v0_adc4 = load i32, i32* @r4, align 4
  %v5_adc8 = inttoptr i32 %v0_adb4 to i32*
  %v6_adc8 = call i32 @function_85e0(i32 %v0_adc4, i32* %v5_adc8, i32 0, i32 512, i32 %v6_adb0)
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_add8 = load i32, i32* @r5, align 4
  store i32 %v0_add8, i32* %r1.global-to-local, align 4
  %v0_addc = load i32, i32* @r4, align 4
  %v5_ade0 = inttoptr i32 %v0_add8 to i32*
  %v6_ade0 = call i32 @function_85e0(i32 %v0_addc, i32* %v5_ade0, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_adec = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_adec, i32* %r3.global-to-local, align 4
  %v1_adf0 = urem i32 %v6_ade0, 256
  store i32 %v1_adf0, i32* %ip.global-to-local, align 4
  %v0_adf4 = load i32, i32* @r5, align 4
  store i32 %v0_adf4, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_adfc = load i32, i32* @r4, align 4
  %v5_ae04 = inttoptr i32 %v0_adf4 to i32*
  %v6_ae04 = call i32 @function_8574(i32 %v0_adfc, i32* %v5_ae04, i32 25, i32 %v2_adec, i32 %v1_adf0)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v3_ae18 = call i32 @function_1272c(i32 2, i32 3, i32 6)
  %v7_ae1c = icmp eq i32 %v3_ae18, -1
  store i1 %v7_ae1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae1c, label %dec_label_pc_b254, label %dec_label_pc_ae28

dec_label_pc_ae28:                                ; preds = %dec_label_pc_ac14
  store i32 1, i32* %stack_var_-40, align 4
  %v6_ae30 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_ae30, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_ae44 = call i32 @function_126fc(i32 %v3_ae18, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  %v7_ae48 = icmp eq i32 %v6_ae44, -1
  store i1 %v7_ae48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ae48, label %dec_label_pc_b24c, label %dec_label_pc_ae50

dec_label_pc_ae50:                                ; preds = %dec_label_pc_ae28
  %v0_ae50 = load i32, i32* @r8, align 4
  %v0_ae54 = load i32, i32* @r7, align 4
  %v0_ae58 = load i32, i32* @r6, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_ae60 = urem i32 %v0_ae50, 65536
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  %v3_ae64 = urem i32 %v0_ae54, 65536
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v3_ae68 = urem i32 %v0_ae58, 65536
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v0_ae6c = load i32, i32* @fp, align 4
  %v2_ae6c = icmp eq i32 %v0_ae6c, 0
  store i1 %v2_ae6c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp75 = icmp slt i32 %v0_ae6c, 1
  br i1 %tmp75, label %dec_label_pc_b36c, label %dec_label_pc_ae84

dec_label_pc_ae84:                                ; preds = %dec_label_pc_ae50
  %v1_ae8c = add i32 %v6_adc8, 40
  %tmp76 = mul i32 %v1_ae8c, 256
  %v1_aea0 = urem i32 %v0_ae54, 256
  %v1_aea4 = and i32 %tmp76, 65280
  %v3_aea8 = mul nuw nsw i32 %v1_aea0, 256
  %v1_aeb0 = urem i32 %v0_ae58, 256
  %tmp77 = udiv i32 %v0_ae58, 256
  %v3_aeb4 = urem i32 %tmp77, 256
  %tmp78 = udiv i32 %v1_ae8c, 256
  %v4_aeb8 = urem i32 %tmp78, 256
  %v5_aeb8 = or i32 %v4_aeb8, %v1_aea4
  store i32 %v5_aeb8, i32* @lr, align 4
  %tmp79 = udiv i32 %v0_ae54, 256
  %v4_aebc = urem i32 %tmp79, 256
  %v5_aebc = or i32 %v4_aebc, %v3_aea8
  store i32 %v5_aebc, i32* @sl, align 4
  %v4_aec0 = mul nuw nsw i32 %v1_aeb0, 256
  %v5_aec0 = or i32 %v4_aec0, %v3_aeb4
  store i32 %v5_aec0, i32* @r6, align 4
  %tmp80 = udiv i32 %v0_ae50, 256
  %v3_aed0 = urem i32 %tmp80, 256
  %v1_aed4 = urem i32 %v0_ae50, 256
  %tmp81 = mul i32 %v6_ad04, 256
  %v1_aedc = and i32 %tmp81, 65280
  %v1_aee0 = urem i32 %v6_ad38, 2
  %v1_aee4 = urem i32 %v6_ad50, 2
  %v1_aee8 = urem i32 %v6_ad68, 2
  %tmp82 = udiv i32 %v6_ad04, 256
  %v4_aeec = urem i32 %tmp82, 256
  %v5_aeec = or i32 %v4_aeec, %v1_aedc
  store i32 %v5_aeec, i32* @r8, align 4
  %v1_af0c = urem i32 %v6_ad80, 2
  %v1_af10 = urem i32 %v6_ad98, 2
  %v1_af14 = urem i32 %v6_adb0, 2
  %v1_af18 = urem i32 %v6_ad68, 256
  %v4_af1c = mul nuw nsw i32 %v1_aed4, 256
  %v5_af1c = or i32 %v4_af1c, %v3_aed0
  store i32 %v5_af1c, i32* @r5, align 4
  %v3_af3025 = udiv i32 %v1_aea4, 256
  store i32 %v3_af3025, i32* %r3.global-to-local, align 4
  store i32 %v1_aed4, i32* %ip.global-to-local, align 4
  store i32 %v1_aea0, i32* %r1.global-to-local, align 4
  store i32 %v1_aeb0, i32* %r2.global-to-local, align 4
  %v5_af4c = trunc i32 %v0_ae54 to i8
  store i32 0, i32* @r4, align 4
  %sext8 = mul i32 %v0_ae50, 16777216
  %v4_afb4 = sdiv i32 %sext8, 16777216
  %sext9 = mul i32 %tmp78, 16777216
  %v4_afc8 = sdiv i32 %sext9, 16777216
  %sext10 = mul i32 %v1_ae8c, 16777216
  %v4_afcc = sdiv i32 %sext10, 16777216
  %tmp = sub nsw i32 0, %v1_aee0
  %v4_b01c = and i32 %tmp, 32
  %tmp93 = sub nsw i32 0, %v1_aee4
  %v4_b030 = and i32 %tmp93, 16
  %tmp94 = sub nsw i32 0, %v1_aee8
  %v4_b044 = and i32 %tmp94, 8
  %tmp95 = sub nsw i32 0, %v1_af0c
  %v4_b058 = and i32 %tmp95, 4
  %tmp96 = sub nsw i32 0, %v1_af10
  %v3_b06c = and i32 %tmp96, 2
  %sext11 = mul i32 %v0_ae58, 16777216
  %v7_b09c = sdiv i32 %sext11, 16777216
  %v1_afb0 = trunc i32 %v5_aca8 to i8
  %extract.t = trunc i32 %v4_afb4 to i8
  %v3_b09c = sext i8 %v5_af4c to i32
  %v2_b0c0 = icmp eq i32 %v1_af18, 0
  br label %dec_label_pc_af58

dec_label_pc_af58:                                ; preds = %bb89, %dec_label_pc_ae84
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_af64 = call i32 @function_12a18(i32 1510, i32 1)
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v2_af70 = load i32, i32* @r4, align 4
  %v5_af70 = mul i32 %v2_af70, 4
  %v6_af70 = add i32 %v5_af70, %v2_ac34
  %v7_af70 = inttoptr i32 %v6_af70 to i32*
  store i32 %v2_af64, i32* %v7_af70, align 4
  %v3_af74 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_af74, i32* %r3.global-to-local, align 4
  %v0_af78 = load i32, i32* %ip.global-to-local, align 4
  %v4_af78 = mul i32 %v3_af74, 4
  %v5_af78 = add i32 %v0_af78, %v4_af78
  %v6_af78 = inttoptr i32 %v5_af78 to i32*
  %v7_af78 = load i32, i32* %v6_af78, align 4
  store i32 %v7_af78, i32* @r7, align 4
  %v1_af7c = inttoptr i32 %v7_af78 to i8*
  %v2_af7c = load i8, i8* %v1_af7c, align 1
  %tmp97 = urem i8 %v2_af7c, 16
  %v1_af80 = zext i8 %tmp97 to i32
  %v1_af84 = or i32 %v1_af80, 64
  store i32 %v1_af84, i32* %r2.global-to-local, align 4
  %v1_af88 = trunc i32 %v1_af84 to i8
  store i8 %v1_af88, i8* %v1_af7c, align 1
  %v0_af8c = load i32, i32* @r7, align 4
  %v1_af8c = inttoptr i32 %v0_af8c to i8*
  %v2_af8c = load i8, i8* %v1_af8c, align 1
  %v1_af90 = and i8 %v2_af8c, -16
  %v1_af94 = or i8 %v1_af90, 5
  store i32 %v1_acb4, i32* %r1.global-to-local, align 4
  store i8 %v1_af94, i8* %v1_af8c, align 1
  %v2_afa4 = load i32, i32* @r7, align 4
  %v3_afa4 = add i32 %v2_afa4, 1
  %v4_afa4 = inttoptr i32 %v3_afa4 to i8*
  store i8 %v5_ac6c, i8* %v4_afa4, align 1
  store i32 %v5_aca8, i32* %r3.global-to-local, align 4
  %v0_afac = load i32, i32* %r1.global-to-local, align 4
  %v2_afac = icmp eq i32 %v0_afac, 0
  store i1 %v2_afac, i1* %cpsr_z.global-to-local, align 1
  %v2_afb0 = load i32, i32* @r7, align 4
  %v3_afb0 = add i32 %v2_afb0, 8
  %v4_afb0 = inttoptr i32 %v3_afb0 to i8*
  store i8 %v1_afb0, i8* %v4_afb0, align 1
  store i32 %v4_afb4, i32* %r2.global-to-local, align 4
  %v0_afb8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afb8, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_af58
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_afbc = load i32, i32* @r7, align 4
  %v4_afbc = add i32 %v3_afbc, 6
  %v5_afbc = inttoptr i32 %v4_afbc to i8*
  store i8 64, i8* %v5_afbc, align 1
  %v0_afc4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t26 = trunc i32 %v0_afc4.pre to i8
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_af58, %bb
  %v0_afc4.off0 = phi i8 [ %extract.t, %dec_label_pc_af58 ], [ %extract.t26, %bb ]
  store i32 6, i32* %r3.global-to-local, align 4
  %v2_afc4 = load i32, i32* @r7, align 4
  %v3_afc4 = add i32 %v2_afc4, 5
  %v4_afc4 = inttoptr i32 %v3_afc4 to i8*
  store i8 %v0_afc4.off0, i8* %v4_afc4, align 1
  store i32 %v4_afc8, i32* %ip.global-to-local, align 4
  store i32 %v4_afcc, i32* %r1.global-to-local, align 4
  %v0_afd0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd0, label %bb84, label %bb83

bb83:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  br label %bb84

bb84:                                             ; preds = %.thread, %bb83
  %v0_afd4 = load i32, i32* %r3.global-to-local, align 4
  %v1_afd4 = trunc i32 %v0_afd4 to i8
  %v2_afd4 = load i32, i32* @r7, align 4
  %v3_afd4 = add i32 %v2_afd4, 9
  %v4_afd4 = inttoptr i32 %v3_afd4 to i8*
  store i8 %v1_afd4, i8* %v4_afd4, align 1
  %v0_afd8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_afd8, label %bb86, label %bb85

bb85:                                             ; preds = %bb84
  %v1_afd8 = load i32, i32* %r2.global-to-local, align 4
  %v2_afd8 = trunc i32 %v1_afd8 to i8
  %v3_afd8 = load i32, i32* @r7, align 4
  %v4_afd8 = add i32 %v3_afd8, 7
  %v5_afd8 = inttoptr i32 %v4_afd8 to i8*
  store i8 %v2_afd8, i8* %v5_afd8, align 1
  br label %bb86

bb86:                                             ; preds = %bb84, %bb85
  %v3_afdc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_afdc, i32* %r2.global-to-local, align 4
  %v0_afe0 = load i32, i32* %ip.global-to-local, align 4
  %v1_afe0 = trunc i32 %v0_afe0 to i8
  %v2_afe0 = load i32, i32* @r7, align 4
  %v3_afe0 = add i32 %v2_afe0, 2
  %v4_afe0 = inttoptr i32 %v3_afe0 to i8*
  store i8 %v1_afe0, i8* %v4_afe0, align 1
  store i32 %v6_ae04, i32* %ip.global-to-local, align 4
  %v0_afe8 = load i32, i32* %r2.global-to-local, align 4
  %v3_afe8 = mul i32 %v0_afe8, 32
  store i32 %v3_afe8, i32* %r3.global-to-local, align 4
  %v1_afec = load i32, i32* @r7, align 4
  %v2_afec = add i32 %v1_afec, 12
  %v3_afec = inttoptr i32 %v2_afec to i32*
  store i32 %v6_ae04, i32* %v3_afec, align 4
  %v0_aff0 = load i32, i32* %r3.global-to-local, align 4
  %v1_aff0 = load i32, i32* %r2.global-to-local, align 4
  %tmp98 = mul i32 %v1_aff0, -8
  %v5_aff0 = add i32 %v0_aff0, %tmp98
  %v1_aff4 = load i32, i32* @sb, align 4
  %v2_aff4 = add i32 %v1_aff4, %v5_aff0
  store i32 %v2_aff4, i32* %r3.global-to-local, align 4
  %v1_aff8 = add i32 %v2_aff4, 16
  %v2_aff8 = inttoptr i32 %v1_aff8 to i32*
  %v3_aff8 = load i32, i32* %v2_aff8, align 4
  store i32 %v3_aff8, i32* %r2.global-to-local, align 4
  %v0_affc = load i32, i32* %r1.global-to-local, align 4
  %v1_affc = trunc i32 %v0_affc to i8
  %v2_affc = load i32, i32* @r7, align 4
  %v3_affc = add i32 %v2_affc, 3
  %v4_affc = inttoptr i32 %v3_affc to i8*
  store i8 %v1_affc, i8* %v4_affc, align 1
  %v0_b000 = load i32, i32* @r5, align 4
  %v1_b000 = trunc i32 %v0_b000 to i8
  %v2_b000 = load i32, i32* @r7, align 4
  %v3_b000 = add i32 %v2_b000, 4
  %v4_b000 = inttoptr i32 %v3_b000 to i8*
  store i8 %v1_b000, i8* %v4_b000, align 1
  %v0_b004 = load i32, i32* %r2.global-to-local, align 4
  %v1_b004 = load i32, i32* @r7, align 4
  %v2_b004 = add i32 %v1_b004, 16
  %v3_b004 = inttoptr i32 %v2_b004 to i32*
  store i32 %v0_b004, i32* %v3_b004, align 4
  %v0_b008 = load i32, i32* @sl, align 4
  %v1_b008 = trunc i32 %v0_b008 to i8
  %v2_b008 = load i32, i32* @r7, align 4
  %v3_b008 = add i32 %v2_b008, 20
  %v4_b008 = inttoptr i32 %v3_b008 to i8*
  store i8 %v1_b008, i8* %v4_b008, align 1
  %v0_b00c = load i32, i32* @r7, align 4
  %v1_b00c = add i32 %v0_b00c, 20
  store i32 %v1_b00c, i32* @r4, align 4
  %v1_b010 = add i32 %v0_b00c, 33
  %v2_b010 = inttoptr i32 %v1_b010 to i8*
  %v3_b010 = load i8, i8* %v2_b010, align 1
  %v4_b010 = zext i8 %v3_b010 to i32
  store i32 %v1_aee0, i32* %r1.global-to-local, align 4
  %v1_b018 = and i32 %v4_b010, 223
  %v5_b01c = or i32 %v1_b018, %v4_b01c
  store i32 %v5_b01c, i32* %r3.global-to-local, align 4
  %v1_b020 = trunc i32 %v5_b01c to i8
  store i8 %v1_b020, i8* %v2_b010, align 1
  %v0_b024 = load i32, i32* @r4, align 4
  %v1_b024 = add i32 %v0_b024, 13
  %v2_b024 = inttoptr i32 %v1_b024 to i8*
  %v3_b024 = load i8, i8* %v2_b024, align 1
  %v4_b024 = zext i8 %v3_b024 to i32
  store i32 %v1_aee4, i32* %r3.global-to-local, align 4
  %v1_b02c = and i32 %v4_b024, 239
  %v5_b030 = or i32 %v1_b02c, %v4_b030
  store i32 %v5_b030, i32* %r2.global-to-local, align 4
  %v1_b034 = trunc i32 %v5_b030 to i8
  store i8 %v1_b034, i8* %v2_b024, align 1
  %v0_b038 = load i32, i32* @r4, align 4
  %v1_b038 = add i32 %v0_b038, 13
  %v2_b038 = inttoptr i32 %v1_b038 to i8*
  %v3_b038 = load i8, i8* %v2_b038, align 1
  %v4_b038 = zext i8 %v3_b038 to i32
  store i32 %v1_aee8, i32* %ip.global-to-local, align 4
  %v1_b040 = and i32 %v4_b038, 247
  %v5_b044 = or i32 %v1_b040, %v4_b044
  store i32 %v5_b044, i32* %r3.global-to-local, align 4
  %v1_b048 = trunc i32 %v5_b044 to i8
  store i8 %v1_b048, i8* %v2_b038, align 1
  %v0_b04c = load i32, i32* @r4, align 4
  %v1_b04c = add i32 %v0_b04c, 13
  %v2_b04c = inttoptr i32 %v1_b04c to i8*
  %v3_b04c = load i8, i8* %v2_b04c, align 1
  %v4_b04c = zext i8 %v3_b04c to i32
  store i32 %v1_af0c, i32* %r1.global-to-local, align 4
  %v1_b054 = and i32 %v4_b04c, 251
  %v5_b058 = or i32 %v1_b054, %v4_b058
  store i32 %v5_b058, i32* %r2.global-to-local, align 4
  %v1_b05c = trunc i32 %v5_b058 to i8
  store i8 %v1_b05c, i8* %v2_b04c, align 1
  %v0_b060 = load i32, i32* @r4, align 4
  %v1_b060 = add i32 %v0_b060, 13
  %v2_b060 = inttoptr i32 %v1_b060 to i8*
  %v3_b060 = load i8, i8* %v2_b060, align 1
  %v4_b060 = zext i8 %v3_b060 to i32
  store i32 %v1_af10, i32* %r2.global-to-local, align 4
  %v1_b068 = and i32 %v4_b060, 253
  %v4_b06c = or i32 %v1_b068, %v3_b06c
  store i32 %v4_b06c, i32* %r3.global-to-local, align 4
  %v1_b070 = trunc i32 %v4_b06c to i8
  store i8 %v1_b070, i8* %v2_b060, align 1
  %v0_b074 = load i32, i32* @r4, align 4
  %v1_b074 = add i32 %v0_b074, 12
  %v2_b074 = inttoptr i32 %v1_b074 to i8*
  %v3_b074 = load i8, i8* %v2_b074, align 1
  %v4_b074 = zext i8 %v3_b074 to i32
  store i32 %v4_b074, i32* %r2.global-to-local, align 4
  %v1_b078 = add i32 %v0_b074, 13
  %v2_b078 = inttoptr i32 %v1_b078 to i8*
  %v3_b078 = load i8, i8* %v2_b078, align 1
  %v4_b078 = zext i8 %v3_b078 to i32
  store i32 %v1_af14, i32* %ip.global-to-local, align 4
  %tmp99 = urem i8 %v3_b074, 16
  %v1_b080 = zext i8 %tmp99 to i32
  %v1_b084 = and i32 %v4_b078, 254
  %v2_b088 = or i32 %v1_b084, %v1_af14
  store i32 %v2_b088, i32* %r3.global-to-local, align 4
  %v1_b08c = or i32 %v1_b080, 80
  store i32 %v1_b08c, i32* %r2.global-to-local, align 4
  %v1_b090 = trunc i32 %v2_b088 to i8
  store i8 %v1_b090, i8* %v2_b078, align 1
  %v0_b094 = load i32, i32* %r2.global-to-local, align 4
  %v1_b094 = trunc i32 %v0_b094 to i8
  %v2_b094 = load i32, i32* @r4, align 4
  %v3_b094 = add i32 %v2_b094, 12
  %v4_b094 = inttoptr i32 %v3_b094 to i8*
  store i8 %v1_b094, i8* %v4_b094, align 1
  store i32 %v3_b09c, i32* %r1.global-to-local, align 4
  store i32 %v7_b09c, i32* %r2.global-to-local, align 4
  %v2_b0a0 = load i32, i32* @r4, align 4
  %v3_b0a0 = add i32 %v2_b0a0, 1
  %v4_b0a0 = inttoptr i32 %v3_b0a0 to i8*
  store i8 %v5_af4c, i8* %v4_b0a0, align 1
  %v0_b0a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0a4 = trunc i32 %v0_b0a4 to i8
  %v2_b0a4 = load i32, i32* @r4, align 4
  %v3_b0a4 = add i32 %v2_b0a4, 3
  %v4_b0a4 = inttoptr i32 %v3_b0a4 to i8*
  store i8 %v1_b0a4, i8* %v4_b0a4, align 1
  %v0_b0a8 = load i32, i32* @r6, align 4
  %v1_b0a8 = trunc i32 %v0_b0a8 to i8
  %v2_b0a8 = load i32, i32* @r4, align 4
  %v3_b0a8 = add i32 %v2_b0a8, 2
  %v4_b0a8 = inttoptr i32 %v3_b0a8 to i8*
  store i8 %v1_b0a8, i8* %v4_b0a8, align 1
  %v0_b0ac = load i32, i32* @r8, align 4
  %v1_b0ac = load i32, i32* @r4, align 4
  %v2_b0ac = add i32 %v1_b0ac, 4
  %v3_b0ac = inttoptr i32 %v2_b0ac to i32*
  store i32 %v0_b0ac, i32* %v3_b0ac, align 4
  %v0_b0b0 = call i32 @function_ebc8()
  store i32 %v1_af18, i32* %ip.global-to-local, align 4
  %sext = mul i32 %v0_b0b0, 16777216
  %v1_b0b8 = sdiv i32 %sext, 16777216
  store i32 %v1_b0b8, i32* %r2.global-to-local, align 4
  %v3_b0bc = ashr i32 %sext, 31
  store i32 %v3_b0bc, i32* %r3.global-to-local, align 4
  store i1 %v2_b0c0, i1* %cpsr_z.global-to-local, align 1
  %v1_b0c4 = trunc i32 %v3_b0bc to i8
  %v2_b0c4 = load i32, i32* @r4, align 4
  %v3_b0c4 = add i32 %v2_b0c4, 15
  %v4_b0c4 = inttoptr i32 %v3_b0c4 to i8*
  store i8 %v1_b0c4, i8* %v4_b0c4, align 1
  %v0_b0c8 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_b0d4.pre = load i32, i32* @r4, align 4
  br i1 %v0_b0c8, label %.thread12, label %bb87

bb87:                                             ; preds = %bb86
  %v2_b0c8 = add i32 %v2_b0d4.pre, 13
  %v3_b0c8 = inttoptr i32 %v2_b0c8 to i8*
  %v4_b0c8 = load i8, i8* %v3_b0c8, align 1
  %v5_b0c8 = zext i8 %v4_b0c8 to i32
  %v2_b0cc = or i32 %v5_b0c8, 8
  store i32 %v2_b0cc, i32* %r3.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb86, %bb87
  store i32 %v6_adc8, i32* @r1, align 4
  %v0_b0d4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b0d4 = trunc i32 %v0_b0d4 to i8
  %v3_b0d4 = add i32 %v2_b0d4.pre, 14
  %v4_b0d4 = inttoptr i32 %v3_b0d4 to i8*
  store i8 %v1_b0d4, i8* %v4_b0d4, align 1
  %v0_b0d8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b0d8, label %bb89, label %bb88

bb88:                                             ; preds = %.thread12
  %v1_b0d8 = load i32, i32* %r3.global-to-local, align 4
  %v2_b0d8 = trunc i32 %v1_b0d8 to i8
  %v3_b0d8 = load i32, i32* @r4, align 4
  %v4_b0d8 = add i32 %v3_b0d8, 13
  %v5_b0d8 = inttoptr i32 %v4_b0d8 to i8*
  store i8 %v2_b0d8, i8* %v5_b0d8, align 1
  br label %bb89

bb89:                                             ; preds = %.thread12, %bb88
  %v0_b0dc = load i32, i32* @r7, align 4
  %v1_b0dc = add i32 %v0_b0dc, 40
  %v1_b0e0 = inttoptr i32 %v1_b0dc to i8*
  %v2_b0e0 = call i32 @function_ed48(i8* %v1_b0e0)
  %v3_b0e4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b0e4, i32* %r3.global-to-local, align 4
  %v1_b0e8 = add i32 %v3_b0e4, 1
  store i32 %v1_b0e8, i32* @r4, align 4
  %v0_b0ec = load i32, i32* @fp, align 4
  %v9_b0ec = icmp eq i32 %v0_b0ec, %v1_b0e8
  store i1 %v9_b0ec, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b0e8, i32* %stack_var_-40, align 4
  %v8_b0f4 = icmp sgt i32 %v0_b0ec, %v1_b0e8
  br i1 %v8_b0f4, label %dec_label_pc_af58, label %dec_label_pc_b0f8

dec_label_pc_b0f8:                                ; preds = %bb89
  store i32 %v6_adc8, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

dec_label_pc_b100.preheader:                      ; preds = %dec_label_pc_b0f8, %dec_label_pc_b36c
  %v0_b10017 = phi i32 [ %v0_b0ec, %dec_label_pc_b0f8 ], [ %v0_ae6c, %dec_label_pc_b36c ]
  %stack_var_-168.0.ph = phi i32 [ %v1_ae8c, %dec_label_pc_b0f8 ], [ %v1_b374, %dec_label_pc_b36c ]
  %storemerge = add i32 %v6_adc8, 20
  store i32 %storemerge, i32* @r8, align 4
  %v3_b2b8 = icmp eq i32 %v6_ae04, -1
  %v8_b2b8 = icmp eq i32 %v6_ae04, -1
  %v3_b2d4 = icmp eq i32 %v3_ae60, 65535
  %v2_b350 = icmp eq i32 %v1_adf0, 0
  br label %dec_label_pc_b100

dec_label_pc_b100:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b100.preheader
  %v0_b100 = phi i32 [ %v0_b10017, %dec_label_pc_b100.preheader ], [ %v0_b23c, %dec_label_pc_b1a8 ]
  %v2_b100 = icmp eq i32 %v0_b100, 0
  store i1 %v2_b100, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r1.global-to-local, align 4
  %tmp90 = icmp slt i32 %v0_b100, 1
  br label %dec_label_pc_b108

dec_label_pc_b108:                                ; preds = %dec_label_pc_b108, %dec_label_pc_b100
  br i1 %tmp90, label %dec_label_pc_b108, label %dec_label_pc_b10c

dec_label_pc_b10c:                                ; preds = %dec_label_pc_b108
  %v0_b10c = load i32, i32* @r8, align 4
  %v3_b10c = mul i32 %v0_b10c, 65536
  store i32 %v3_b10c, i32* %r2.global-to-local, align 4
  %tmp91 = mul i32 %v0_b10c, 256
  %v1_b114 = and i32 %tmp91, 65280
  store i32 %v1_b114, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %tmp92 = udiv i32 %v0_b10c, 256
  %v4_b120 = urem i32 %tmp92, 256
  %v5_b120 = or i32 %v4_b120, %v1_b114
  store i32 %v5_b120, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_b128

dec_label_pc_b128:                                ; preds = %dec_label_pc_b1a8, %dec_label_pc_b10c
  %v1_b13c = phi i32 [ %v1_b238, %dec_label_pc_b1a8 ], [ 0, %dec_label_pc_b10c ]
  %v5_b12c = mul i32 %v1_b13c, 24
  %v1_b130 = load i32, i32* @sb, align 4
  %v2_b130 = add i32 %v1_b130, %v5_b12c
  store i32 %v2_b130, i32* %r3.global-to-local, align 4
  store i32 %v2_ac34, i32* %ip.global-to-local, align 4
  %v1_b138 = add i32 %v2_b130, 20
  %v2_b138 = inttoptr i32 %v1_b138 to i8*
  %v3_b138 = load i8, i8* %v2_b138, align 1
  %v4_b138 = zext i8 %v3_b138 to i32
  store i32 %v4_b138, i32* %r2.global-to-local, align 4
  %v4_b13c = mul i32 %v1_b13c, 4
  %v5_b13c = add i32 %v4_b13c, %v2_ac34
  %v6_b13c = inttoptr i32 %v5_b13c to i32*
  %v7_b13c = load i32, i32* %v6_b13c, align 4
  store i32 %v7_b13c, i32* @r5, align 4
  %v7_b140 = icmp eq i8 %v3_b138, 31
  store i1 %v7_b140, i1* %cpsr_z.global-to-local, align 1
  %v1_b144 = add i32 %v7_b13c, 20
  store i32 %v1_b144, i32* @r6, align 4
  %tmp100 = icmp ult i8 %v3_b138, 32
  br i1 %tmp100, label %dec_label_pc_b25c, label %dec_label_pc_b14c

dec_label_pc_b14c:                                ; preds = %dec_label_pc_b128
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b158:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b16c

dec_label_pc_b16c:                                ; preds = %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge, %dec_label_pc_b158
  %v1_b170 = phi i32 [ %v1_b170.pre, %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge ], [ 65535, %dec_label_pc_b158 ]
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v9_b170 = icmp eq i32 %v3_ae64, %v1_b170
  store i1 %v9_b170, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b170, label %dec_label_pc_b2fc, label %dec_label_pc_b178

dec_label_pc_b178:                                ; preds = %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge, %dec_label_pc_b16c
  %v1_b17c = phi i32 [ %v1_b17c.pre, %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge ], [ %v1_b170, %dec_label_pc_b16c ]
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v9_b17c = icmp eq i32 %v3_ae68, %v1_b17c
  store i1 %v9_b17c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b17c, label %dec_label_pc_b318, label %dec_label_pc_b184

dec_label_pc_b184:                                ; preds = %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge, %dec_label_pc_b178
  %v1_b188 = phi i32 [ %v1_b188.pre, %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge ], [ %v1_b17c, %dec_label_pc_b178 ]
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v9_b188 = icmp eq i32 %v6_ad04, %v1_b188
  store i1 %v9_b188, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b188, label %dec_label_pc_b334, label %dec_label_pc_b190

dec_label_pc_b190:                                ; preds = %dec_label_pc_b318.dec_label_pc_b190_crit_edge, %dec_label_pc_b184
  %v1_b194 = phi i32 [ %v1_b194.pre, %dec_label_pc_b318.dec_label_pc_b190_crit_edge ], [ %v1_b188, %dec_label_pc_b184 ]
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v9_b194 = icmp eq i32 %v6_ad20, %v1_b194
  store i1 %v9_b194, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b194, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b19c:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b1a8:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348, %dec_label_pc_b35c
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b1ac = load i32, i32* @r7, align 4
  %v1_b1ac = trunc i32 %v0_b1ac to i8
  %v2_b1ac = load i32, i32* @r5, align 4
  %v3_b1ac = add i32 %v2_b1ac, 10
  %v4_b1ac = inttoptr i32 %v3_b1ac to i8*
  store i8 %v1_b1ac, i8* %v4_b1ac, align 1
  %v0_b1b0 = load i32, i32* @r7, align 4
  %v1_b1b0 = trunc i32 %v0_b1b0 to i8
  %v2_b1b0 = load i32, i32* @r5, align 4
  %v3_b1b0 = add i32 %v2_b1b0, 11
  %v4_b1b0 = inttoptr i32 %v3_b1b0 to i8*
  store i8 %v1_b1b0, i8* %v4_b1b0, align 1
  %v0_b1b4 = load i32, i32* @r5, align 4
  store i32 %v0_b1b4, i32* @r0, align 4
  %v2_b1b8 = call i32 @function_d0b8(i32 %v0_b1b4, i32 20)
  %v3_b1b8 = trunc i32 %v2_b1b8 to i8
  %v4_b1bc28 = udiv i32 %v2_b1b8, 256
  %v1_b1c0 = trunc i32 %v4_b1bc28 to i8
  %v2_b1c0 = load i32, i32* @r5, align 4
  %v3_b1c0 = add i32 %v2_b1c0, 11
  %v4_b1c0 = inttoptr i32 %v3_b1c0 to i8*
  store i8 %v1_b1c0, i8* %v4_b1c0, align 1
  %v3_b1c4 = load i32, i32* @r5, align 4
  %v4_b1c4 = add i32 %v3_b1c4, 10
  %v5_b1c4 = inttoptr i32 %v4_b1c4 to i8*
  store i8 %v3_b1b8, i8* %v5_b1c4, align 1
  %v0_b1c8 = load i32, i32* @r6, align 4
  store i32 %v0_b1c8, i32* @r1, align 4
  %v0_b1cc = load i32, i32* @sl, align 4
  store i32 %v0_b1cc, i32* %r2.global-to-local, align 4
  %v0_b1d0 = load i32, i32* @r8, align 4
  store i32 %v0_b1d0, i32* %r3.global-to-local, align 4
  %v0_b1d4 = load i32, i32* @r7, align 4
  %v1_b1d4 = trunc i32 %v0_b1d4 to i8
  %v3_b1d4 = add i32 %v0_b1c8, 16
  %v4_b1d4 = inttoptr i32 %v3_b1d4 to i8*
  store i8 %v1_b1d4, i8* %v4_b1d4, align 1
  %v0_b1d8 = load i32, i32* @r7, align 4
  %v1_b1d8 = trunc i32 %v0_b1d8 to i8
  %v2_b1d8 = load i32, i32* @r6, align 4
  %v3_b1d8 = add i32 %v2_b1d8, 17
  %v4_b1d8 = inttoptr i32 %v3_b1d8 to i8*
  store i8 %v1_b1d8, i8* %v4_b1d8, align 1
  %v0_b1dc = load i32, i32* @r5, align 4
  %v4_b1e0 = call i32 @function_d114(i32 %v0_b1dc, i32 %v0_b1c8, i32 %v0_b1cc, i32 %v0_b1d0)
  %v5_b1e0 = trunc i32 %v4_b1e0 to i8
  %v4_b1e429 = udiv i32 %v4_b1e0, 256
  %v1_b1e8 = trunc i32 %v4_b1e429 to i8
  %v2_b1e8 = load i32, i32* @r6, align 4
  %v3_b1e8 = add i32 %v2_b1e8, 17
  %v4_b1e8 = inttoptr i32 %v3_b1e8 to i8*
  store i8 %v1_b1e8, i8* %v4_b1e8, align 1
  %v3_b1ec = load i32, i32* @r6, align 4
  %v4_b1ec = add i32 %v3_b1ec, 16
  %v5_b1ec = inttoptr i32 %v4_b1ec to i8*
  store i8 %v5_b1e0, i8* %v5_b1ec, align 1
  %v3_b1f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b1f0, i32* %r3.global-to-local, align 4
  %v0_b1f4 = load i32, i32* @r5, align 4
  %v1_b1f4 = add i32 %v0_b1f4, 20
  %v2_b1f4 = inttoptr i32 %v1_b1f4 to i32*
  %v3_b1f4 = load i32, i32* %v2_b1f4, align 4
  %v3_b1fc = udiv i32 %v3_b1f4, 65536
  store i32 %v3_b1fc, i32* %r2.global-to-local, align 4
  %v5_b200 = mul i32 %v3_b1f0, 24
  %v1_b204 = load i32, i32* @sb, align 4
  %v2_b204 = add i32 %v1_b204, %v5_b200
  store i32 %v2_b204, i32* %ip.global-to-local, align 4
  %v3_b20827 = udiv i32 %v3_b1f4, 16777216
  %v1_b20c = trunc i32 %v3_b20827 to i8
  %v3_b20c = add i32 %v2_b204, 3
  %v4_b20c = inttoptr i32 %v3_b20c to i8*
  store i8 %v1_b20c, i8* %v4_b20c, align 1
  %v0_b210 = load i32, i32* %r2.global-to-local, align 4
  %v1_b210 = trunc i32 %v0_b210 to i8
  %v2_b210 = load i32, i32* %ip.global-to-local, align 4
  %v3_b210 = add i32 %v2_b210, 2
  %v4_b210 = inttoptr i32 %v3_b210 to i8*
  store i8 %v1_b210, i8* %v4_b210, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b218 = load i32, i32* @r5, align 4
  store i32 %v0_b218, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-168.0.ph, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b228 = load i32, i32* %ip.global-to-local, align 4
  %v6_b230 = inttoptr i32 %v0_b218 to i32*
  %v7_b230 = call i32 @function_126c8(i32 %v3_ae18, i32* %v6_b230, i32 %stack_var_-168.0.ph, i32 16384, i32 %v0_b228, i32 16)
  %v3_b234 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b234, i32* %r3.global-to-local, align 4
  %v1_b238 = add i32 %v3_b234, 1
  %v0_b23c = load i32, i32* @fp, align 4
  %v9_b23c = icmp eq i32 %v0_b23c, %v1_b238
  store i1 %v9_b23c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b238, i32* %stack_var_-40, align 4
  %v7_b244 = icmp sgt i32 %v0_b23c, %v1_b238
  br i1 %v7_b244, label %dec_label_pc_b128, label %dec_label_pc_b100

dec_label_pc_b24c:                                ; preds = %dec_label_pc_ae28
  %v1_b250 = call i32 @function_11e18(i32 %v3_ae18)
  br label %dec_label_pc_b254

dec_label_pc_b254:                                ; preds = %dec_label_pc_ac14, %dec_label_pc_b24c
  %v29_b258 = phi i32 [ %v3_ae18, %dec_label_pc_ac14 ], [ %v1_b250, %dec_label_pc_b24c ]
  ret i32 %v29_b258

dec_label_pc_b25c:                                ; preds = %dec_label_pc_b128
  %v1_b25c = add i32 %v2_b130, 16
  %v2_b25c = inttoptr i32 %v1_b25c to i32*
  %v3_b25c = load i32, i32* %v2_b25c, align 4
  %v0_b260 = call i32 @function_ebc8()
  %v3_b264 = load i32, i32* %stack_var_-40, align 4
  %v5_b26c = mul i32 %v3_b264, 24
  %v1_b274 = load i32, i32* @sb, align 4
  %v2_b274 = add i32 %v1_b274, %v5_b26c
  store i32 %v2_b274, i32* %r1.global-to-local, align 4
  %v1_b278 = and i32 %v3_b25c, 65280
  store i32 %v1_b278, i32* %r3.global-to-local, align 4
  %v1_b270 = udiv i32 %v3_b25c, 256
  %v3_b27c = and i32 %v1_b270, 65280
  store i32 %v3_b27c, i32* %r2.global-to-local, align 4
  %v3_b280 = mul i32 %v3_b25c, 16777216
  store i32 %v3_b280, i32* %ip.global-to-local, align 4
  %v1_b284 = add i32 %v2_b274, 20
  %v2_b284 = inttoptr i32 %v1_b284 to i8*
  %v3_b284 = load i8, i8* %v2_b284, align 1
  %v4_b284 = zext i8 %v3_b284 to i32
  %v4_b288 = mul nuw nsw i32 %v1_b278, 256
  %v5_b288 = or i32 %v4_b288, %v3_b280
  store i32 %v5_b288, i32* %ip.global-to-local, align 4
  %v2_b290 = call i32 @llvm.bswap.i32(i32 %v3_b25c)
  %v7_b294 = lshr i32 %v0_b260, %v4_b284
  %v8_b294 = add i32 %v7_b294, %v2_b290
  store i32 %v8_b294, i32* %r2.global-to-local, align 4
  %v2_b2b0 = call i32 @llvm.bswap.i32(i32 %v8_b294)
  store i32 %v2_b2b0, i32* %r3.global-to-local, align 4
  store i32 %v6_ae04, i32* %r1.global-to-local, align 4
  store i1 %v8_b2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_b2bc = load i32, i32* @r5, align 4
  %v2_b2bc = add i32 %v1_b2bc, 16
  %v3_b2bc = inttoptr i32 %v2_b2bc to i32*
  store i32 %v2_b2b0, i32* %v3_b2bc, align 4
  br i1 %v3_b2b8, label %dec_label_pc_b2c4, label %dec_label_pc_b158

dec_label_pc_b2c4:                                ; preds = %dec_label_pc_b25c, %dec_label_pc_b14c
  %v0_b2c4 = call i32 @function_ebc8()
  store i32 %v3_ae60, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_b2d4, i1* %cpsr_z.global-to-local, align 1
  %v1_b2d8 = load i32, i32* @r5, align 4
  %v2_b2d8 = add i32 %v1_b2d8, 12
  %v3_b2d8 = inttoptr i32 %v2_b2d8 to i32*
  store i32 %v0_b2c4, i32* %v3_b2d8, align 4
  br i1 %v3_b2d4, label %dec_label_pc_b2e0, label %dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge

dec_label_pc_b2c4.dec_label_pc_b16c_crit_edge:    ; preds = %dec_label_pc_b2c4
  %v1_b170.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b16c

dec_label_pc_b2e0:                                ; preds = %dec_label_pc_b2c4, %dec_label_pc_b158
  %v0_b2e0 = call i32 @function_ebc8()
  %v1_b2e0 = trunc i32 %v0_b2e0 to i8
  %v4_b2e430 = udiv i32 %v0_b2e0, 256
  %v1_b2e8 = trunc i32 %v4_b2e430 to i8
  %v2_b2e8 = load i32, i32* @r5, align 4
  %v3_b2e8 = add i32 %v2_b2e8, 5
  %v4_b2e8 = inttoptr i32 %v3_b2e8 to i8*
  store i8 %v1_b2e8, i8* %v4_b2e8, align 1
  store i32 %v3_ae64, i32* %r3.global-to-local, align 4
  %v1_b2f0 = load i32, i32* @r4, align 4
  %v9_b2f0 = icmp eq i32 %v3_ae64, %v1_b2f0
  store i1 %v9_b2f0, i1* %cpsr_z.global-to-local, align 1
  %v3_b2f4 = load i32, i32* @r5, align 4
  %v4_b2f4 = add i32 %v3_b2f4, 4
  %v5_b2f4 = inttoptr i32 %v4_b2f4 to i8*
  store i8 %v1_b2e0, i8* %v5_b2f4, align 1
  %v0_b2f8 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b2f8, label %dec_label_pc_b2fc, label %dec_label_pc_b2e0.dec_label_pc_b178_crit_edge

dec_label_pc_b2e0.dec_label_pc_b178_crit_edge:    ; preds = %dec_label_pc_b2e0
  %v1_b17c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b178

dec_label_pc_b2fc:                                ; preds = %dec_label_pc_b2e0, %dec_label_pc_b16c
  %v0_b2fc = call i32 @function_ebc8()
  %v1_b2fc = trunc i32 %v0_b2fc to i8
  store i32 %v3_ae68, i32* %ip.global-to-local, align 4
  %v4_b304 = sdiv i32 %v0_b2fc, 256
  store i32 %v4_b304, i32* %r3.global-to-local, align 4
  %v1_b308 = load i32, i32* @r4, align 4
  %v9_b308 = icmp eq i32 %v3_ae68, %v1_b308
  store i1 %v9_b308, i1* %cpsr_z.global-to-local, align 1
  %v3_b30c = load i32, i32* @r5, align 4
  %v4_b30c = add i32 %v3_b30c, 20
  %v5_b30c = inttoptr i32 %v4_b30c to i8*
  store i8 %v1_b2fc, i8* %v5_b30c, align 1
  %v0_b310 = load i32, i32* %r3.global-to-local, align 4
  %v1_b310 = trunc i32 %v0_b310 to i8
  %v2_b310 = load i32, i32* @r6, align 4
  %v3_b310 = add i32 %v2_b310, 1
  %v4_b310 = inttoptr i32 %v3_b310 to i8*
  store i8 %v1_b310, i8* %v4_b310, align 1
  %v0_b314 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b314, label %dec_label_pc_b318, label %dec_label_pc_b2fc.dec_label_pc_b184_crit_edge

dec_label_pc_b2fc.dec_label_pc_b184_crit_edge:    ; preds = %dec_label_pc_b2fc
  %v1_b188.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b184

dec_label_pc_b318:                                ; preds = %dec_label_pc_b2fc, %dec_label_pc_b178
  %v0_b318 = call i32 @function_ebc8()
  %v1_b318 = trunc i32 %v0_b318 to i8
  store i32 %v6_ad04, i32* %r1.global-to-local, align 4
  %v4_b320 = sdiv i32 %v0_b318, 256
  store i32 %v4_b320, i32* %r3.global-to-local, align 4
  %v1_b324 = load i32, i32* @r4, align 4
  %v9_b324 = icmp eq i32 %v6_ad04, %v1_b324
  store i1 %v9_b324, i1* %cpsr_z.global-to-local, align 1
  %v1_b328 = trunc i32 %v4_b320 to i8
  %v2_b328 = load i32, i32* @r6, align 4
  %v3_b328 = add i32 %v2_b328, 3
  %v4_b328 = inttoptr i32 %v3_b328 to i8*
  store i8 %v1_b328, i8* %v4_b328, align 1
  %v3_b32c = load i32, i32* @r6, align 4
  %v4_b32c = add i32 %v3_b32c, 2
  %v5_b32c = inttoptr i32 %v4_b32c to i8*
  store i8 %v1_b318, i8* %v5_b32c, align 1
  %v0_b330 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b330, label %dec_label_pc_b334, label %dec_label_pc_b318.dec_label_pc_b190_crit_edge

dec_label_pc_b318.dec_label_pc_b190_crit_edge:    ; preds = %dec_label_pc_b318
  %v1_b194.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b190

dec_label_pc_b334:                                ; preds = %dec_label_pc_b318, %dec_label_pc_b184
  %v0_b334 = call i32 @function_ebc8()
  store i32 %v6_ad20, i32* %r2.global-to-local, align 4
  %v1_b33c = load i32, i32* @r4, align 4
  %v9_b33c = icmp eq i32 %v6_ad20, %v1_b33c
  store i1 %v9_b33c, i1* %cpsr_z.global-to-local, align 1
  %v1_b340 = load i32, i32* @r6, align 4
  %v2_b340 = add i32 %v1_b340, 4
  %v3_b340 = inttoptr i32 %v2_b340 to i32*
  store i32 %v0_b334, i32* %v3_b340, align 4
  br i1 %v9_b33c, label %dec_label_pc_b348, label %dec_label_pc_b19c

dec_label_pc_b348:                                ; preds = %dec_label_pc_b334, %dec_label_pc_b190
  %v0_b348 = call i32 @function_ebc8()
  store i32 %v1_adf0, i32* %r3.global-to-local, align 4
  store i1 %v2_b350, i1* %cpsr_z.global-to-local, align 1
  %v1_b354 = load i32, i32* @r6, align 4
  %v2_b354 = add i32 %v1_b354, 8
  %v3_b354 = inttoptr i32 %v2_b354 to i32*
  store i32 %v0_b348, i32* %v3_b354, align 4
  br i1 %v2_b350, label %dec_label_pc_b1a8, label %dec_label_pc_b35c

dec_label_pc_b35c:                                ; preds = %dec_label_pc_b19c, %dec_label_pc_b348
  %v0_b35c = load i32, i32* @r5, align 4
  %v1_b35c = add i32 %v0_b35c, 40
  store i32 %v6_adc8, i32* @r1, align 4
  %v1_b364 = inttoptr i32 %v1_b35c to i8*
  %v2_b364 = call i32 @function_ed48(i8* %v1_b364)
  br label %dec_label_pc_b1a8

dec_label_pc_b36c:                                ; preds = %dec_label_pc_ae50
  store i32 %v6_adc8, i32* %r3.global-to-local, align 4
  %v1_b374 = add i32 %v6_adc8, 40
  store i32 %v1_b374, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_b100.preheader

; uselistorder directives
  uselistorder i32 %v1_b374, { 1, 0 }
  uselistorder i32 %v4_b320, { 1, 0 }
  uselistorder i32 %v2_b2b0, { 1, 0 }
  uselistorder i32 %v3_b280, { 1, 0 }
  uselistorder i32 %v3_b25c, { 1, 3, 2, 0 }
  uselistorder i32 %v0_b23c, { 1, 2, 0 }
  uselistorder i32 %v1_b238, { 2, 0, 3, 1 }
  uselistorder i32 %v0_b1c8, { 1, 0, 2 }
  uselistorder i32 %v0_b10c, { 2, 0, 1 }
  uselistorder i32 %v0_b100, { 1, 0 }
  uselistorder i1 %v2_b350, { 2, 3, 1, 0 }
  uselistorder i1 %v3_b2d4, { 1, 0, 2, 3 }
  uselistorder i32 %v1_b0e8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_af4c, { 1, 0 }
  uselistorder i32 %v1_af14, { 1, 0 }
  uselistorder i32 %v1_af10, { 1, 0 }
  uselistorder i32 %v1_af0c, { 1, 0 }
  uselistorder i32 %v1_aee8, { 1, 0 }
  uselistorder i32 %v1_aee4, { 1, 0 }
  uselistorder i32 %v1_aee0, { 1, 0 }
  uselistorder i32 %v1_aed4, { 1, 0 }
  uselistorder i32 %v1_aeb0, { 1, 0 }
  uselistorder i32 %v1_aea0, { 1, 0 }
  uselistorder i32 %v1_ae8c, { 3, 0, 2, 1 }
  uselistorder i32 %v0_ae6c, { 1, 0, 2 }
  uselistorder i32 %v3_ae60, { 0, 1, 3, 2 }
  uselistorder i32 %v0_ae54, { 3, 0, 1, 2 }
  uselistorder i32 %v0_ae50, { 0, 2, 1, 3 }
  uselistorder i1 %v7_ae48, { 1, 0 }
  uselistorder i1 %v7_ae1c, { 1, 0 }
  uselistorder i32 %v3_ae18, { 1, 3, 4, 2, 0 }
  uselistorder i32 %v6_ae04, { 4, 3, 0, 5, 1, 2 }
  uselistorder i32 %v1_adf0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v6_adc8, { 5, 4, 3, 0, 1, 2, 6 }
  uselistorder i32 %v6_ad20, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_ad04, { 2, 5, 4, 3, 1, 0, 6 }
  uselistorder i32 %v1_acb4, { 1, 2, 0 }
  uselistorder i32 %v5_aca8, { 0, 2, 1 }
  uselistorder i32 %v6_ac4c, { 1, 2, 0 }
  uselistorder i32 %v2_ac34, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_ac18, { 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 30, 32, 33, 34, 35, 37, 36, 39, 38, 0 }
  uselistorder label %dec_label_pc_b35c, { 1, 0 }
  uselistorder label %dec_label_pc_b254, { 1, 0 }
  uselistorder label %dec_label_pc_b1a8, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b100.preheader, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %.thread12, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb84, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_b388(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_b388:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_b388 = load i32, i32* @r4, align 4
  %v12_b388 = load i32, i32* @r7, align 4
  %v1_b38c = urem i32 %arg1, 256
  store i32 %v1_b38c, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_b38c, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_b3a4 = urem i32 %arg3, 256
  store i32 %v1_b3a4, i32* @r4, align 4
  %v2_b3a8 = call i32 @function_12a18(i32 %v1_b38c, i32 4)
  %v0_b3ac = load i32, i32* @r5, align 4
  store i32 %v0_b3ac, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_b3a8, i32* %fp.global-to-local, align 4
  %v0_b3bc = load i32, i32* @r4, align 4
  store i32 %v0_b3bc, i32* %r0.global-to-local, align 4
  %v5_b3c0 = inttoptr i32 %v0_b3ac to i32*
  %v6_b3c0 = call i32 @function_85e0(i32 %v0_b3bc, i32* %v5_b3c0, i32 2, i32 0, i32 ptrtoint (i32* @0 to i32))
  %v1_b3cc = urem i32 %v6_b3c0, 256
  store i32 %v1_b3cc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_b3d8 = load i32, i32* @r5, align 4
  store i32 %v0_b3d8, i32* %r1.global-to-local, align 4
  %v0_b3dc = load i32, i32* @r4, align 4
  store i32 %v0_b3dc, i32* %r0.global-to-local, align 4
  %v5_b3e0 = trunc i32 %v6_b3c0 to i8
  %v6_b3e4 = inttoptr i32 %v0_b3d8 to i32*
  %v7_b3e4 = call i32 @function_85e0(i32 %v0_b3dc, i32* %v6_b3e4, i32 3, i32 65535, i32 %v6_b3c0)
  %v0_b3e8 = load i32, i32* @r5, align 4
  store i32 %v0_b3e8, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v0_b3f8 = load i32, i32* @r4, align 4
  store i32 %v0_b3f8, i32* %r0.global-to-local, align 4
  %v5_b3fc = inttoptr i32 %v0_b3e8 to i32*
  %v6_b3fc = call i32 @function_85e0(i32 %v0_b3f8, i32* %v5_b3fc, i32 4, i32 64, i32 %v7_b3e4)
  %v1_b404 = urem i32 %v6_b3fc, 256
  store i32 %v1_b404, i32* %ip.global-to-local, align 4
  %v0_b408 = load i32, i32* @r5, align 4
  store i32 %v0_b408, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b414 = load i32, i32* @r4, align 4
  store i32 %v0_b414, i32* %r0.global-to-local, align 4
  %sext9 = mul i32 %v6_b3fc, 16777216
  %v5_b41c = sdiv i32 %sext9, 16777216
  %v6_b41c = inttoptr i32 %v0_b408 to i32*
  %v7_b41c = call i32 @function_85e0(i32 %v0_b414, i32* %v6_b41c, i32 5, i32 1, i32 %v5_b41c)
  %v1_b428 = urem i32 %v7_b41c, 256
  store i32 %v1_b428, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_b434 = load i32, i32* @r5, align 4
  store i32 %v0_b434, i32* %r1.global-to-local, align 4
  %v0_b438 = load i32, i32* @r4, align 4
  store i32 %v0_b438, i32* %r0.global-to-local, align 4
  %v5_b440 = inttoptr i32 %v0_b434 to i32*
  %v6_b440 = call i32 @function_85e0(i32 %v0_b438, i32* %v5_b440, i32 6, i32 65535, i32 %v1_b428)
  %v0_b448 = load i32, i32* @r5, align 4
  store i32 %v0_b448, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_b440, i32* @r7, align 4
  %v0_b458 = load i32, i32* @r4, align 4
  store i32 %v0_b458, i32* %r0.global-to-local, align 4
  %v5_b45c = inttoptr i32 %v0_b448 to i32*
  %v6_b45c = call i32 @function_85e0(i32 %v0_b458, i32* %v5_b45c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b464 = load i32, i32* @r5, align 4
  store i32 %v0_b464, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 %v6_b45c, i32* @r6, align 4
  %v0_b474 = load i32, i32* @r4, align 4
  store i32 %v0_b474, i32* %r0.global-to-local, align 4
  %v5_b478 = inttoptr i32 %v0_b464 to i32*
  %v6_b478 = call i32 @function_85e0(i32 %v0_b474, i32* %v5_b478, i32 17, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_b47c = load i32, i32* @r5, align 4
  store i32 %v0_b47c, i32* %r1.global-to-local, align 4
  store i32 18, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b48c = load i32, i32* @r4, align 4
  store i32 %v0_b48c, i32* %r0.global-to-local, align 4
  %v5_b490 = inttoptr i32 %v0_b47c to i32*
  %v6_b490 = call i32 @function_85e0(i32 %v0_b48c, i32* %v5_b490, i32 18, i32 0, i32 %v6_b478)
  %v0_b494 = load i32, i32* @r5, align 4
  store i32 %v0_b494, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4a4 = load i32, i32* @r4, align 4
  store i32 %v0_b4a4, i32* %r0.global-to-local, align 4
  %v5_b4a8 = inttoptr i32 %v0_b494 to i32*
  %v6_b4a8 = call i32 @function_85e0(i32 %v0_b4a4, i32* %v5_b4a8, i32 11, i32 0, i32 %v6_b490)
  %v0_b4ac = load i32, i32* @r5, align 4
  store i32 %v0_b4ac, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4bc = load i32, i32* @r4, align 4
  store i32 %v0_b4bc, i32* %r0.global-to-local, align 4
  %v5_b4c0 = inttoptr i32 %v0_b4ac to i32*
  %v6_b4c0 = call i32 @function_85e0(i32 %v0_b4bc, i32* %v5_b4c0, i32 12, i32 0, i32 %v6_b4a8)
  %v0_b4c4 = load i32, i32* @r5, align 4
  store i32 %v0_b4c4, i32* %r1.global-to-local, align 4
  store i32 13, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4d4 = load i32, i32* @r4, align 4
  store i32 %v0_b4d4, i32* %r0.global-to-local, align 4
  %v5_b4d8 = inttoptr i32 %v0_b4c4 to i32*
  %v6_b4d8 = call i32 @function_85e0(i32 %v0_b4d4, i32* %v5_b4d8, i32 13, i32 0, i32 %v6_b4c0)
  %v0_b4dc = load i32, i32* @r5, align 4
  store i32 %v0_b4dc, i32* %r1.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b4ec = load i32, i32* @r4, align 4
  store i32 %v0_b4ec, i32* %r0.global-to-local, align 4
  %v5_b4f0 = inttoptr i32 %v0_b4dc to i32*
  %v6_b4f0 = call i32 @function_85e0(i32 %v0_b4ec, i32* %v5_b4f0, i32 14, i32 0, i32 %v6_b4d8)
  %v0_b4f4 = load i32, i32* @r5, align 4
  store i32 %v0_b4f4, i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_b504 = load i32, i32* @r4, align 4
  store i32 %v0_b504, i32* %r0.global-to-local, align 4
  %v5_b508 = inttoptr i32 %v0_b4f4 to i32*
  %v6_b508 = call i32 @function_85e0(i32 %v0_b504, i32* %v5_b508, i32 15, i32 1, i32 %v6_b4f0)
  %v0_b50c = load i32, i32* @r5, align 4
  store i32 %v0_b50c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b51c = load i32, i32* @r4, align 4
  store i32 %v0_b51c, i32* %r0.global-to-local, align 4
  %v5_b520 = inttoptr i32 %v0_b50c to i32*
  %v6_b520 = call i32 @function_85e0(i32 %v0_b51c, i32* %v5_b520, i32 16, i32 0, i32 %v6_b508)
  %v2_b52c = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_b52c, i32* %r3.global-to-local, align 4
  %v0_b530 = load i32, i32* @r5, align 4
  store i32 %v0_b530, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_b538 = load i32, i32* @r4, align 4
  store i32 %v0_b538, i32* %r0.global-to-local, align 4
  %v5_b53c = inttoptr i32 %v0_b530 to i32*
  %v6_b53c = call i32 @function_8574(i32 %v0_b538, i32* %v5_b53c, i32 25, i32 %v2_b52c, i32 %v6_b520)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_b550 = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_b550, i32* %r0.global-to-local, align 4
  %v7_b554 = icmp eq i32 %v3_b550, -1
  store i1 %v7_b554, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_b550, i32* %sb.global-to-local, align 4
  br i1 %v7_b554, label %dec_label_pc_bac8, label %dec_label_pc_b560

dec_label_pc_b560:                                ; preds = %dec_label_pc_b388
  store i32 1, i32* %stack_var_-40, align 4
  %v6_b568 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_b568, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_b57c = call i32 @function_126fc(i32 %v3_b550, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_b57c, i32* %r0.global-to-local, align 4
  %v7_b580 = icmp eq i32 %v6_b57c, -1
  store i1 %v7_b580, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b580, label %dec_label_pc_bac0, label %dec_label_pc_b588

dec_label_pc_b588:                                ; preds = %dec_label_pc_b560
  %v3_b58c = mul i32 %v7_b3e4, 65536
  store i32 %v3_b58c, i32* %r4.global-to-local, align 4
  %v3_b590 = urem i32 %v7_b3e4, 65536
  %v0_b5a0 = load i32, i32* @r7, align 4
  %v3_b5a0 = mul i32 %v0_b5a0, 65536
  store i32 %v3_b5a0, i32* %r0.global-to-local, align 4
  %v0_b5a4 = load i32, i32* @r6, align 4
  store i32 0, i32* %stack_var_-40, align 4
  %v3_b5ac = urem i32 %v0_b5a0, 65536
  store i32 %v3_b5ac, i32* %ip.global-to-local, align 4
  %v3_b5b0 = urem i32 %v0_b5a4, 65536
  store i32 %v3_b5b0, i32* %r2.global-to-local, align 4
  %v1_b5b4 = urem i32 %v6_b4a8, 256
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  %v0_b5b8 = load i32, i32* @sl, align 4
  %v2_b5b8 = icmp eq i32 %v0_b5b8, 0
  store i1 %v2_b5b8, i1* %cpsr_z.global-to-local, align 1
  %tmp69 = icmp slt i32 %v0_b5b8, 1
  br i1 %tmp69, label %dec_label_pc_b86c, label %dec_label_pc_b5cc

dec_label_pc_b5cc:                                ; preds = %dec_label_pc_b588
  %v3_b5d4 = mul i32 %v6_b478, 65536
  store i32 %v3_b5d4, i32* @lr, align 4
  %v1_b5e4 = urem i32 %v0_b5a4, 256
  %tmp70 = udiv i32 %v0_b5a0, 256
  %v3_b5e8 = urem i32 %tmp70, 256
  %v1_b5ec = urem i32 %v0_b5a0, 256
  %v4_b5f0 = mul nuw nsw i32 %v1_b5ec, 256
  %v5_b5f0 = or i32 %v4_b5f0, %v3_b5e8
  store i32 %v5_b5f0, i32* @r7, align 4
  %tmp71 = udiv i32 %v7_b3e4, 256
  %tmp72 = mul i32 %v6_b478, 256
  %v1_b60c = and i32 %tmp72, 65280
  %v1_b610 = urem i32 %v6_b4a8, 2
  %v3_b614 = mul nuw nsw i32 %v1_b5e4, 256
  store i32 %v3_b614, i32* %r1.global-to-local, align 4
  %v5_b618 = trunc i32 %tmp71 to i8
  %tmp73 = udiv i32 %v0_b5a4, 256
  %v4_b61c = urem i32 %tmp73, 256
  %v5_b61c = or i32 %v4_b61c, %v3_b614
  store i32 %v5_b61c, i32* @r6, align 4
  %v1_b620 = urem i32 %v6_b4c0, 2
  %v1_b624 = urem i32 %v6_b4d8, 2
  %tmp74 = udiv i32 %v6_b478, 256
  %v4_b628 = urem i32 %tmp74, 256
  %v5_b628 = or i32 %v4_b628, %v1_b60c
  store i32 %v5_b628, i32* @r5, align 4
  %v1_b648 = urem i32 %v6_b4f0, 2
  %v1_b64c = urem i32 %v6_b508, 2
  %v1_b658 = urem i32 %v6_b520, 2
  store i32 %v1_b658, i32* %r0.global-to-local, align 4
  %v3_b65c = udiv i32 %v7_b3e4, 65536
  store i32 %v3_b65c, i32* %r2.global-to-local, align 4
  store i32 %v1_b5ec, i32* %r3.global-to-local, align 4
  store i32 %v1_b5e4, i32* %ip.global-to-local, align 4
  %v5_b674 = trunc i32 %v0_b5a4 to i8
  store i32 0, i32* @r4, align 4
  %tmp = sub nsw i32 0, %v1_b610
  %v4_b738 = and i32 %tmp, 32
  %tmp77 = sub nsw i32 0, %v1_b620
  %v4_b74c = and i32 %tmp77, 16
  %tmp78 = sub nsw i32 0, %v1_b624
  %v4_b760 = and i32 %tmp78, 8
  %tmp79 = sub nsw i32 0, %v1_b648
  %v4_b774 = and i32 %tmp79, 4
  %tmp80 = sub nsw i32 0, %v1_b64c
  %v3_b788 = and i32 %tmp80, 2
  %v7_b7b8 = sext i8 %v5_b674 to i32
  %sext = mul i32 %v0_b5a0, 16777216
  %v3_b7b8 = sdiv i32 %sext, 16777216
  br label %dec_label_pc_b67c

dec_label_pc_b67c:                                ; preds = %bb76, %dec_label_pc_b5cc
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 128, i32* %r0.global-to-local, align 4
  %v2_b684 = call i32 @function_12a18(i32 128, i32 1)
  store i32 %v2_b684, i32* %r0.global-to-local, align 4
  %v3_b688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b688, i32* %r2.global-to-local, align 4
  %v1_b68c = load i32, i32* %fp.global-to-local, align 4
  %v2_b68c = load i32, i32* @r4, align 4
  %v5_b68c = mul i32 %v2_b68c, 4
  %v6_b68c = add i32 %v5_b68c, %v1_b68c
  %v7_b68c = inttoptr i32 %v6_b68c to i32*
  store i32 %v2_b684, i32* %v7_b68c, align 4
  %v0_b690 = load i32, i32* %fp.global-to-local, align 4
  %v1_b690 = load i32, i32* %r2.global-to-local, align 4
  %v4_b690 = mul i32 %v1_b690, 4
  %v5_b690 = add i32 %v4_b690, %v0_b690
  %v6_b690 = inttoptr i32 %v5_b690 to i32*
  %v7_b690 = load i32, i32* %v6_b690, align 4
  store i32 %v7_b690, i32* %r4.global-to-local, align 4
  %v1_b694 = inttoptr i32 %v7_b690 to i8*
  %v2_b694 = load i8, i8* %v1_b694, align 1
  %tmp81 = urem i8 %v2_b694, 16
  %v1_b698 = zext i8 %tmp81 to i32
  %v1_b69c = or i32 %v1_b698, 64
  store i32 %v1_b69c, i32* %r3.global-to-local, align 4
  %v1_b6a0 = trunc i32 %v1_b69c to i8
  store i8 %v1_b6a0, i8* %v1_b694, align 1
  %v0_b6a4 = load i32, i32* %r4.global-to-local, align 4
  %v1_b6a4 = inttoptr i32 %v0_b6a4 to i8*
  %v2_b6a4 = load i8, i8* %v1_b6a4, align 1
  %v1_b6a8 = and i8 %v2_b6a4, -16
  %v1_b6ac = or i8 %v1_b6a8, 5
  store i32 %v1_b428, i32* %r0.global-to-local, align 4
  store i8 %v1_b6ac, i8* %v1_b6a4, align 1
  %v2_b6bc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6bc = add i32 %v2_b6bc, 1
  %v4_b6bc = inttoptr i32 %v3_b6bc to i8*
  store i8 %v5_b3e0, i8* %v4_b6bc, align 1
  store i32 %v5_b41c, i32* %r2.global-to-local, align 4
  %v2_b6c8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6c8 = add i32 %v2_b6c8, 4
  %v4_b6c8 = inttoptr i32 %v3_b6c8 to i8*
  store i8 %v5_b618, i8* %v4_b6c8, align 1
  store i32 6, i32* %ip.global-to-local, align 4
  %v0_b6d4 = load i32, i32* %r0.global-to-local, align 4
  %v2_b6d4 = icmp eq i32 %v0_b6d4, 0
  store i1 %v2_b6d4, i1* %cpsr_z.global-to-local, align 1
  %v2_b6d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6d8 = add i32 %v2_b6d8, 3
  %v4_b6d8 = inttoptr i32 %v3_b6d8 to i8*
  store i8 60, i8* %v4_b6d8, align 1
  store i32 %v3_b65c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_b6e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_b6e4 = trunc i32 %v0_b6e4 to i8
  %v2_b6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e4 = add i32 %v2_b6e4, 8
  %v4_b6e4 = inttoptr i32 %v3_b6e4 to i8*
  store i8 %v1_b6e4, i8* %v4_b6e4, align 1
  %v0_b6e8 = load i32, i32* %ip.global-to-local, align 4
  %v1_b6e8 = trunc i32 %v0_b6e8 to i8
  %v2_b6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b6e8 = add i32 %v2_b6e8, 9
  %v4_b6e8 = inttoptr i32 %v3_b6e8 to i8*
  store i8 %v1_b6e8, i8* %v4_b6e8, align 1
  %v0_b6ec = load i32, i32* %r3.global-to-local, align 4
  %v1_b6ec = trunc i32 %v0_b6ec to i8
  %v2_b6ec = load i32, i32* %r4.global-to-local, align 4
  %v3_b6ec = add i32 %v2_b6ec, 2
  %v4_b6ec = inttoptr i32 %v3_b6ec to i8*
  store i8 %v1_b6ec, i8* %v4_b6ec, align 1
  %v3_b6f0 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b6f0, i32* %r2.global-to-local, align 4
  %v0_b6f4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b6f4, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_b67c
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_b6f8 = load i32, i32* %r4.global-to-local, align 4
  %v4_b6f8 = add i32 %v3_b6f8, 6
  %v5_b6f8 = inttoptr i32 %v4_b6f8 to i8*
  store i8 64, i8* %v5_b6f8, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_b67c, %bb
  %v0_b6fc = load i32, i32* %r0.global-to-local, align 4
  %v1_b6fc = trunc i32 %v0_b6fc to i8
  %v2_b6fc = load i32, i32* %r4.global-to-local, align 4
  %v3_b6fc = add i32 %v2_b6fc, 5
  %v4_b6fc = inttoptr i32 %v3_b6fc to i8*
  store i8 %v1_b6fc, i8* %v4_b6fc, align 1
  %v0_b700 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_b700, label %.thread8, label %bb75

.thread8:                                         ; preds = %.thread
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  br label %bb76

bb75:                                             ; preds = %.thread
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v3_b708 = load i32, i32* %r4.global-to-local, align 4
  %v4_b708 = add i32 %v3_b708, 7
  %v5_b708 = inttoptr i32 %v4_b708 to i8*
  store i8 0, i8* %v5_b708, align 1
  %v0_b710.pre = load i32, i32* %r0.global-to-local, align 4
  br label %bb76

bb76:                                             ; preds = %.thread8, %bb75
  %v0_b710 = phi i32 [ %v6_b53c, %.thread8 ], [ %v0_b710.pre, %bb75 ]
  %v0_b70c = load i32, i32* %r2.global-to-local, align 4
  %v3_b70c = mul i32 %v0_b70c, 32
  store i32 %v3_b70c, i32* %r3.global-to-local, align 4
  %v1_b710 = load i32, i32* %r4.global-to-local, align 4
  %v2_b710 = add i32 %v1_b710, 12
  %v3_b710 = inttoptr i32 %v2_b710 to i32*
  store i32 %v0_b710, i32* %v3_b710, align 4
  %v0_b714 = load i32, i32* %r3.global-to-local, align 4
  %v1_b714 = load i32, i32* %r2.global-to-local, align 4
  %tmp82 = mul i32 %v1_b714, -8
  %v5_b714 = add i32 %v0_b714, %tmp82
  %v1_b718 = load i32, i32* @r8, align 4
  %v2_b718 = add i32 %v1_b718, %v5_b714
  store i32 %v2_b718, i32* %r3.global-to-local, align 4
  %v1_b71c = add i32 %v2_b718, 16
  %v2_b71c = inttoptr i32 %v1_b71c to i32*
  %v3_b71c = load i32, i32* %v2_b71c, align 4
  store i32 %v3_b71c, i32* %r2.global-to-local, align 4
  %v0_b720 = load i32, i32* @r7, align 4
  %v1_b720 = trunc i32 %v0_b720 to i8
  %v2_b720 = load i32, i32* %r4.global-to-local, align 4
  %v3_b720 = add i32 %v2_b720, 20
  %v4_b720 = inttoptr i32 %v3_b720 to i8*
  store i8 %v1_b720, i8* %v4_b720, align 1
  %v0_b724 = load i32, i32* %r2.global-to-local, align 4
  %v1_b724 = load i32, i32* %r4.global-to-local, align 4
  %v2_b724 = add i32 %v1_b724, 16
  %v3_b724 = inttoptr i32 %v2_b724 to i32*
  store i32 %v0_b724, i32* %v3_b724, align 4
  %v0_b728 = load i32, i32* %r4.global-to-local, align 4
  %v1_b728 = add i32 %v0_b728, 20
  store i32 %v1_b728, i32* %r1.global-to-local, align 4
  %v1_b72c = add i32 %v0_b728, 33
  %v2_b72c = inttoptr i32 %v1_b72c to i8*
  %v3_b72c = load i8, i8* %v2_b72c, align 1
  %v4_b72c = zext i8 %v3_b72c to i32
  store i32 %v1_b610, i32* %r2.global-to-local, align 4
  %v1_b734 = and i32 %v4_b72c, 223
  %v5_b738 = or i32 %v1_b734, %v4_b738
  store i32 %v5_b738, i32* %r3.global-to-local, align 4
  %v1_b73c = trunc i32 %v5_b738 to i8
  store i8 %v1_b73c, i8* %v2_b72c, align 1
  %v0_b740 = load i32, i32* %r1.global-to-local, align 4
  %v1_b740 = add i32 %v0_b740, 13
  %v2_b740 = inttoptr i32 %v1_b740 to i8*
  %v3_b740 = load i8, i8* %v2_b740, align 1
  %v4_b740 = zext i8 %v3_b740 to i32
  store i32 %v1_b620, i32* %r3.global-to-local, align 4
  %v1_b748 = and i32 %v4_b740, 239
  %v5_b74c = or i32 %v1_b748, %v4_b74c
  store i32 %v5_b74c, i32* %r2.global-to-local, align 4
  %v1_b750 = trunc i32 %v5_b74c to i8
  store i8 %v1_b750, i8* %v2_b740, align 1
  %v0_b754 = load i32, i32* %r1.global-to-local, align 4
  %v1_b754 = add i32 %v0_b754, 13
  %v2_b754 = inttoptr i32 %v1_b754 to i8*
  %v3_b754 = load i8, i8* %v2_b754, align 1
  %v4_b754 = zext i8 %v3_b754 to i32
  store i32 %v1_b624, i32* %ip.global-to-local, align 4
  %v1_b75c = and i32 %v4_b754, 247
  %v5_b760 = or i32 %v1_b75c, %v4_b760
  store i32 %v5_b760, i32* %r3.global-to-local, align 4
  %v1_b764 = trunc i32 %v5_b760 to i8
  store i8 %v1_b764, i8* %v2_b754, align 1
  %v0_b768 = load i32, i32* %r1.global-to-local, align 4
  %v1_b768 = add i32 %v0_b768, 13
  %v2_b768 = inttoptr i32 %v1_b768 to i8*
  %v3_b768 = load i8, i8* %v2_b768, align 1
  %v4_b768 = zext i8 %v3_b768 to i32
  store i32 %v1_b648, i32* %r0.global-to-local, align 4
  %v1_b770 = and i32 %v4_b768, 251
  %v5_b774 = or i32 %v1_b770, %v4_b774
  store i32 %v5_b774, i32* %r2.global-to-local, align 4
  %v1_b778 = trunc i32 %v5_b774 to i8
  store i8 %v1_b778, i8* %v2_b768, align 1
  %v0_b77c = load i32, i32* %r1.global-to-local, align 4
  %v1_b77c = add i32 %v0_b77c, 13
  %v2_b77c = inttoptr i32 %v1_b77c to i8*
  %v3_b77c = load i8, i8* %v2_b77c, align 1
  %v4_b77c = zext i8 %v3_b77c to i32
  store i32 %v1_b64c, i32* %r2.global-to-local, align 4
  %v1_b784 = and i32 %v4_b77c, 253
  %v4_b788 = or i32 %v1_b784, %v3_b788
  store i32 %v4_b788, i32* %r3.global-to-local, align 4
  %v1_b78c = trunc i32 %v4_b788 to i8
  store i8 %v1_b78c, i8* %v2_b77c, align 1
  %v0_b790 = load i32, i32* %r1.global-to-local, align 4
  %v1_b790 = add i32 %v0_b790, 12
  %v2_b790 = inttoptr i32 %v1_b790 to i8*
  %v3_b790 = load i8, i8* %v2_b790, align 1
  %v4_b790 = zext i8 %v3_b790 to i32
  store i32 %v4_b790, i32* %r2.global-to-local, align 4
  %v1_b794 = add i32 %v0_b790, 13
  %v2_b794 = inttoptr i32 %v1_b794 to i8*
  %v3_b794 = load i8, i8* %v2_b794, align 1
  %v4_b794 = zext i8 %v3_b794 to i32
  %tmp83 = urem i8 %v3_b790, 16
  %v1_b79c = zext i8 %tmp83 to i32
  %v1_b7a0 = and i32 %v4_b794, 254
  %v2_b7a4 = or i32 %v1_b7a0, %v1_b658
  %v1_b7a8 = or i32 %v1_b79c, 160
  store i32 %v1_b7a8, i32* %r2.global-to-local, align 4
  %v1_b7ac = trunc i32 %v2_b7a4 to i8
  store i8 %v1_b7ac, i8* %v2_b794, align 1
  %v0_b7b0 = load i32, i32* %r2.global-to-local, align 4
  %v1_b7b0 = trunc i32 %v0_b7b0 to i8
  %v2_b7b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7b0 = add i32 %v2_b7b0, 12
  %v4_b7b0 = inttoptr i32 %v3_b7b0 to i8*
  store i8 %v1_b7b0, i8* %v4_b7b0, align 1
  store i32 %v3_b7b8, i32* %r0.global-to-local, align 4
  store i32 %v7_b7b8, i32* %r2.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 2, i32* %r3.global-to-local, align 4
  %v2_b7c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c4 = add i32 %v2_b7c4, 3
  %v4_b7c4 = inttoptr i32 %v3_b7c4 to i8*
  store i8 %v5_b674, i8* %v4_b7c4, align 1
  %v0_b7c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_b7c8 = trunc i32 %v0_b7c8 to i8
  %v2_b7c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_b7c8 = add i32 %v2_b7c8, 1
  %v4_b7c8 = inttoptr i32 %v3_b7c8 to i8*
  store i8 %v1_b7c8, i8* %v4_b7c8, align 1
  %v0_b7cc = load i32, i32* @r6, align 4
  %v1_b7cc = trunc i32 %v0_b7cc to i8
  %v2_b7cc = load i32, i32* %r1.global-to-local, align 4
  %v3_b7cc = add i32 %v2_b7cc, 2
  %v4_b7cc = inttoptr i32 %v3_b7cc to i8*
  store i8 %v1_b7cc, i8* %v4_b7cc, align 1
  %v0_b7d0 = load i32, i32* @r5, align 4
  %v1_b7d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_b7d0 = add i32 %v1_b7d0, 4
  %v3_b7d0 = inttoptr i32 %v2_b7d0 to i32*
  store i32 %v0_b7d0, i32* %v3_b7d0, align 4
  %v0_b7d4 = load i32, i32* %ip.global-to-local, align 4
  %v1_b7d4 = trunc i32 %v0_b7d4 to i8
  %v2_b7d4 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d4 = add i32 %v2_b7d4, 41
  %v4_b7d4 = inttoptr i32 %v3_b7d4 to i8*
  store i8 %v1_b7d4, i8* %v4_b7d4, align 1
  %v0_b7d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_b7d8 = trunc i32 %v0_b7d8 to i8
  %v2_b7d8 = load i32, i32* %r4.global-to-local, align 4
  %v3_b7d8 = add i32 %v2_b7d8, 40
  %v4_b7d8 = inttoptr i32 %v3_b7d8 to i8*
  store i8 %v1_b7d8, i8* %v4_b7d8, align 1
  %v0_b7dc = call i32 @function_ebc8()
  %v1_b7e0 = mul i32 %v0_b7dc, 256
  %v1_b7e4 = and i32 %v1_b7e0, 3840
  %v1_b7e8 = or i32 %v1_b7e4, 28672
  %v3_b7f0 = add nuw nsw i32 %v1_b7e8, 2048
  %v3_b7fc7 = udiv i32 %v3_b7f0, 256
  store i32 %v3_b7fc7, i32* %r1.global-to-local, align 4
  %v0_b800 = load i32, i32* %r4.global-to-local, align 4
  %v1_b800 = add i32 %v0_b800, 42
  store i32 %v1_b800, i32* %r2.global-to-local, align 4
  %v4_b804 = inttoptr i32 %v1_b800 to i8*
  store i8 5, i8* %v4_b804, align 1
  %v0_b808 = load i32, i32* %r1.global-to-local, align 4
  %v1_b808 = trunc i32 %v0_b808 to i8
  %v2_b808 = load i32, i32* %r2.global-to-local, align 4
  %v3_b808 = add i32 %v2_b808, 1
  %v4_b808 = inttoptr i32 %v3_b808 to i8*
  store i8 %v1_b808, i8* %v4_b808, align 1
  store i32 8, i32* %r3.global-to-local, align 4
  %v2_b814 = load i32, i32* %r4.global-to-local, align 4
  %v3_b814 = add i32 %v2_b814, 47
  %v4_b814 = inttoptr i32 %v3_b814 to i8*
  store i8 10, i8* %v4_b814, align 1
  store i32 4, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_b820 = load i32, i32* %r3.global-to-local, align 4
  %v1_b820 = trunc i32 %v0_b820 to i8
  %v2_b820 = load i32, i32* %r4.global-to-local, align 4
  %v3_b820 = add i32 %v2_b820, 46
  %v4_b820 = inttoptr i32 %v3_b820 to i8*
  store i8 %v1_b820, i8* %v4_b820, align 1
  %v0_b824 = load i32, i32* %r2.global-to-local, align 4
  %v1_b824 = trunc i32 %v0_b824 to i8
  %v2_b824 = load i32, i32* %r4.global-to-local, align 4
  %v3_b824 = add i32 %v2_b824, 45
  %v4_b824 = inttoptr i32 %v3_b824 to i8*
  store i8 %v1_b824, i8* %v4_b824, align 1
  %v0_b828 = load i32, i32* %r0.global-to-local, align 4
  %v1_b828 = trunc i32 %v0_b828 to i8
  %v2_b828 = load i32, i32* %r4.global-to-local, align 4
  %v3_b828 = add i32 %v2_b828, 44
  %v4_b828 = inttoptr i32 %v3_b828 to i8*
  store i8 %v1_b828, i8* %v4_b828, align 1
  %v0_b82c = call i32 @function_ebc8()
  store i32 %v0_b82c, i32* %r0.global-to-local, align 4
  %v2_b834 = load i32, i32* %r4.global-to-local, align 4
  %v3_b834 = add i32 %v2_b834, 56
  %v4_b834 = inttoptr i32 %v3_b834 to i8*
  store i8 1, i8* %v4_b834, align 1
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 6, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v1_b844 = load i32, i32* %r4.global-to-local, align 4
  %v2_b844 = add i32 %v1_b844, 48
  %v3_b844 = inttoptr i32 %v2_b844 to i32*
  store i32 %v0_b82c, i32* %v3_b844, align 4
  %v0_b848 = load i32, i32* %r2.global-to-local, align 4
  %v1_b848 = trunc i32 %v0_b848 to i8
  %v2_b848 = load i32, i32* %r4.global-to-local, align 4
  %v3_b848 = add i32 %v2_b848, 58
  %v4_b848 = inttoptr i32 %v3_b848 to i8*
  store i8 %v1_b848, i8* %v4_b848, align 1
  %v0_b84c = load i32, i32* %r3.global-to-local, align 4
  %v1_b84c = trunc i32 %v0_b84c to i8
  %v2_b84c = load i32, i32* %r4.global-to-local, align 4
  %v3_b84c = add i32 %v2_b84c, 59
  %v4_b84c = inttoptr i32 %v3_b84c to i8*
  store i8 %v1_b84c, i8* %v4_b84c, align 1
  %v0_b850 = load i32, i32* %ip.global-to-local, align 4
  %v1_b850 = load i32, i32* %r4.global-to-local, align 4
  %v2_b850 = add i32 %v1_b850, 52
  %v3_b850 = inttoptr i32 %v2_b850 to i32*
  store i32 %v0_b850, i32* %v3_b850, align 4
  %v0_b854 = load i32, i32* %r2.global-to-local, align 4
  %v1_b854 = trunc i32 %v0_b854 to i8
  %v2_b854 = load i32, i32* %r4.global-to-local, align 4
  %v3_b854 = add i32 %v2_b854, 57
  %v4_b854 = inttoptr i32 %v3_b854 to i8*
  store i8 %v1_b854, i8* %v4_b854, align 1
  %v3_b858 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b858, i32* %r3.global-to-local, align 4
  %v1_b85c = add i32 %v3_b858, 1
  store i32 %v1_b85c, i32* @r4, align 4
  %v0_b860 = load i32, i32* @sl, align 4
  %v9_b860 = icmp eq i32 %v0_b860, %v1_b85c
  store i1 %v9_b860, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b85c, i32* %stack_var_-40, align 4
  %v8_b868 = icmp sgt i32 %v0_b860, %v1_b85c
  br i1 %v8_b868, label %dec_label_pc_b67c, label %dec_label_pc_b86c

dec_label_pc_b86c:                                ; preds = %bb76, %dec_label_pc_b588
  %v0_b86c = phi i32 [ %v0_b5b8, %dec_label_pc_b588 ], [ %v0_b860, %bb76 ]
  %v2_b86c = icmp eq i32 %v0_b86c, 0
  store i1 %v2_b86c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_ba24 = icmp eq i32 %v3_b590, 65535
  %v2_baa0 = icmp eq i32 %v1_b5b4, 0
  %v2_b8a8 = icmp eq i32 %v6_b53c, -1
  %v7_b8a8 = icmp eq i32 %v6_b53c, -1
  br label %dec_label_pc_b874.outer

dec_label_pc_b874.outer:                          ; preds = %dec_label_pc_b9a0, %dec_label_pc_b86c
  %v1_b874.ph.in = phi i32 [ %v1_b994, %dec_label_pc_b9a0 ], [ %v0_b86c, %dec_label_pc_b86c ]
  %v0_b874.ph = phi i1 [ %v2_b9a0, %dec_label_pc_b9a0 ], [ %v2_b86c, %dec_label_pc_b86c ]
  %v1_b874.ph = icmp slt i32 %v1_b874.ph.in, 0
  %v4_b874 = or i1 %v1_b874.ph, %v0_b874.ph
  br label %dec_label_pc_b874

dec_label_pc_b874:                                ; preds = %dec_label_pc_b874.outer, %dec_label_pc_b874
  br i1 %v4_b874, label %dec_label_pc_b874, label %dec_label_pc_b878

dec_label_pc_b878:                                ; preds = %dec_label_pc_b874
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_b884

dec_label_pc_b884:                                ; preds = %dec_label_pc_b900, %dec_label_pc_b878
  %v1_b894 = phi i32 [ %v1_b990, %dec_label_pc_b900 ], [ 0, %dec_label_pc_b878 ]
  %v5_b888 = mul i32 %v1_b894, 24
  %v1_b88c = load i32, i32* @r8, align 4
  %v2_b88c = add i32 %v1_b88c, %v5_b888
  store i32 %v2_b88c, i32* %r3.global-to-local, align 4
  %v1_b890 = add i32 %v2_b88c, 20
  %v2_b890 = inttoptr i32 %v1_b890 to i8*
  %v3_b890 = load i8, i8* %v2_b890, align 1
  %v4_b890 = zext i8 %v3_b890 to i32
  store i32 %v4_b890, i32* %r2.global-to-local, align 4
  %v0_b894 = load i32, i32* %fp.global-to-local, align 4
  %v4_b894 = mul i32 %v1_b894, 4
  %v5_b894 = add i32 %v0_b894, %v4_b894
  %v6_b894 = inttoptr i32 %v5_b894 to i32*
  %v7_b894 = load i32, i32* %v6_b894, align 4
  store i32 %v7_b894, i32* @r5, align 4
  %v7_b898 = icmp eq i8 %v3_b890, 31
  store i1 %v7_b898, i1* %cpsr_z.global-to-local, align 1
  %v1_b89c = add i32 %v7_b894, 20
  store i32 %v1_b89c, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_b890, 32
  br i1 %tmp84, label %dec_label_pc_b9ac, label %dec_label_pc_b8a4

dec_label_pc_b8a4:                                ; preds = %dec_label_pc_b884
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_b8b0:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_b8c4

dec_label_pc_b8c4:                                ; preds = %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge, %dec_label_pc_b8b0
  %v1_b8c8 = phi i32 [ %v1_b8c8.pre, %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge ], [ 65535, %dec_label_pc_b8b0 ]
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v9_b8c8 = icmp eq i32 %v3_b5ac, %v1_b8c8
  store i1 %v9_b8c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8c8, label %dec_label_pc_ba4c, label %dec_label_pc_b8d0

dec_label_pc_b8d0:                                ; preds = %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge, %dec_label_pc_b8c4
  %v1_b8d4 = phi i32 [ %v1_b8d4.pre, %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge ], [ %v1_b8c8, %dec_label_pc_b8c4 ]
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v9_b8d4 = icmp eq i32 %v3_b5b0, %v1_b8d4
  store i1 %v9_b8d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8d4, label %dec_label_pc_ba68, label %dec_label_pc_b8dc

dec_label_pc_b8dc:                                ; preds = %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge, %dec_label_pc_b8d0
  %v1_b8e0 = phi i32 [ %v1_b8e0.pre, %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge ], [ %v1_b8d4, %dec_label_pc_b8d0 ]
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v9_b8e0 = icmp eq i32 %v6_b478, %v1_b8e0
  store i1 %v9_b8e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8e0, label %dec_label_pc_ba84, label %dec_label_pc_b8e8

dec_label_pc_b8e8:                                ; preds = %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge, %dec_label_pc_b8dc
  %v1_b8ec = phi i32 [ %v1_b8ec.pre, %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge ], [ %v1_b8e0, %dec_label_pc_b8dc ]
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v9_b8ec = icmp eq i32 %v6_b490, %v1_b8ec
  store i1 %v9_b8ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_b8ec, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_b8f4:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_b900:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98, %dec_label_pc_baac
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_b904 = load i32, i32* %r7.global-to-local, align 4
  %v1_b904 = trunc i32 %v0_b904 to i8
  %v2_b904 = load i32, i32* @r5, align 4
  %v3_b904 = add i32 %v2_b904, 10
  %v4_b904 = inttoptr i32 %v3_b904 to i8*
  store i8 %v1_b904, i8* %v4_b904, align 1
  %v0_b908 = load i32, i32* %r7.global-to-local, align 4
  %v1_b908 = trunc i32 %v0_b908 to i8
  %v2_b908 = load i32, i32* @r5, align 4
  %v3_b908 = add i32 %v2_b908, 11
  %v4_b908 = inttoptr i32 %v3_b908 to i8*
  store i8 %v1_b908, i8* %v4_b908, align 1
  %v0_b90c = load i32, i32* @r5, align 4
  store i32 %v0_b90c, i32* @r0, align 4
  %v2_b910 = call i32 @function_d0b8(i32 %v0_b90c, i32 20)
  %v3_b910 = trunc i32 %v2_b910 to i8
  %v4_b91427 = udiv i32 %v2_b910, 256
  %v1_b918 = trunc i32 %v4_b91427 to i8
  %v2_b918 = load i32, i32* @r5, align 4
  %v3_b918 = add i32 %v2_b918, 11
  %v4_b918 = inttoptr i32 %v3_b918 to i8*
  store i8 %v1_b918, i8* %v4_b918, align 1
  %v3_b91c = load i32, i32* @r5, align 4
  %v4_b91c = add i32 %v3_b91c, 10
  %v5_b91c = inttoptr i32 %v4_b91c to i8*
  store i8 %v3_b910, i8* %v5_b91c, align 1
  %v0_b920 = load i32, i32* @r6, align 4
  store i32 %v0_b920, i32* @r1, align 4
  store i32 10240, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  %v0_b92c = load i32, i32* %r7.global-to-local, align 4
  %v1_b92c = trunc i32 %v0_b92c to i8
  %v3_b92c = add i32 %v0_b920, 16
  %v4_b92c = inttoptr i32 %v3_b92c to i8*
  store i8 %v1_b92c, i8* %v4_b92c, align 1
  %v0_b930 = load i32, i32* %r7.global-to-local, align 4
  %v1_b930 = trunc i32 %v0_b930 to i8
  %v2_b930 = load i32, i32* @r6, align 4
  %v3_b930 = add i32 %v2_b930, 17
  %v4_b930 = inttoptr i32 %v3_b930 to i8*
  store i8 %v1_b930, i8* %v4_b930, align 1
  %v0_b934 = load i32, i32* @r5, align 4
  store i32 %v0_b934, i32* %r0.global-to-local, align 4
  %v4_b938 = call i32 @function_d114(i32 %v0_b934, i32 %v0_b920, i32 10240, i32 40)
  %v5_b938 = trunc i32 %v4_b938 to i8
  store i32 %v4_b938, i32* %r0.global-to-local, align 4
  %v4_b93c28 = udiv i32 %v4_b938, 256
  %v1_b940 = trunc i32 %v4_b93c28 to i8
  %v2_b940 = load i32, i32* @r6, align 4
  %v3_b940 = add i32 %v2_b940, 17
  %v4_b940 = inttoptr i32 %v3_b940 to i8*
  store i8 %v1_b940, i8* %v4_b940, align 1
  %v3_b944 = load i32, i32* @r6, align 4
  %v4_b944 = add i32 %v3_b944, 16
  %v5_b944 = inttoptr i32 %v4_b944 to i8*
  store i8 %v5_b938, i8* %v5_b944, align 1
  %v3_b948 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b948, i32* %r3.global-to-local, align 4
  %v0_b94c = load i32, i32* @r5, align 4
  %v1_b94c = add i32 %v0_b94c, 20
  %v2_b94c = inttoptr i32 %v1_b94c to i32*
  %v3_b94c = load i32, i32* %v2_b94c, align 4
  %v3_b954 = udiv i32 %v3_b94c, 65536
  store i32 %v3_b954, i32* %r2.global-to-local, align 4
  %v5_b958 = mul i32 %v3_b948, 24
  %v1_b95c = load i32, i32* @r8, align 4
  %v2_b95c = add i32 %v1_b95c, %v5_b958
  store i32 %v2_b95c, i32* %ip.global-to-local, align 4
  %v3_b96026 = udiv i32 %v3_b94c, 16777216
  %v1_b964 = trunc i32 %v3_b96026 to i8
  %v3_b964 = add i32 %v2_b95c, 3
  %v4_b964 = inttoptr i32 %v3_b964 to i8*
  store i8 %v1_b964, i8* %v4_b964, align 1
  %v0_b968 = load i32, i32* %r2.global-to-local, align 4
  %v1_b968 = trunc i32 %v0_b968 to i8
  %v2_b968 = load i32, i32* %ip.global-to-local, align 4
  %v3_b968 = add i32 %v2_b968, 2
  %v4_b968 = inttoptr i32 %v3_b968 to i8*
  store i8 %v1_b968, i8* %v4_b968, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_b970 = load i32, i32* @r5, align 4
  store i32 %v0_b970, i32* %r1.global-to-local, align 4
  %v0_b974 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_b974, i32* %r0.global-to-local, align 4
  store i32 60, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_b980 = load i32, i32* %ip.global-to-local, align 4
  %v6_b988 = inttoptr i32 %v0_b970 to i32*
  %v7_b988 = call i32 @function_126c8(i32 %v0_b974, i32* %v6_b988, i32 60, i32 16384, i32 %v0_b980, i32 16)
  %v3_b98c = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_b98c, i32* %r3.global-to-local, align 4
  %v1_b990 = add i32 %v3_b98c, 1
  store i32 %v1_b990, i32* %r0.global-to-local, align 4
  %v1_b994 = load i32, i32* @sl, align 4
  %v9_b994 = icmp eq i32 %v1_b990, %v1_b994
  store i1 %v9_b994, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_b990, i32* %stack_var_-40, align 4
  %v5_b99c = icmp slt i32 %v1_b990, %v1_b994
  br i1 %v5_b99c, label %dec_label_pc_b884, label %dec_label_pc_b9a0

dec_label_pc_b9a0:                                ; preds = %dec_label_pc_b900
  %v2_b9a0 = icmp eq i32 %v1_b994, 0
  store i1 %v2_b9a0, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_b874.outer

dec_label_pc_b9ac:                                ; preds = %dec_label_pc_b884
  %v1_b9ac = add i32 %v2_b88c, 16
  %v2_b9ac = inttoptr i32 %v1_b9ac to i32*
  %v3_b9ac = load i32, i32* %v2_b9ac, align 4
  store i32 %v3_b9ac, i32* %r4.global-to-local, align 4
  %v0_b9b0 = call i32 @function_ebc8()
  store i32 %v0_b9b0, i32* %r0.global-to-local, align 4
  %v3_b9b4 = load i32, i32* %stack_var_-40, align 4
  %v5_b9bc = mul i32 %v3_b9b4, 24
  %v0_b9c0 = load i32, i32* %r4.global-to-local, align 4
  %v1_b9c4 = load i32, i32* @r8, align 4
  %v2_b9c4 = add i32 %v1_b9c4, %v5_b9bc
  store i32 %v2_b9c4, i32* %r1.global-to-local, align 4
  %v1_b9c8 = and i32 %v0_b9c0, 65280
  store i32 %v1_b9c8, i32* %r3.global-to-local, align 4
  %v1_b9c0 = udiv i32 %v0_b9c0, 256
  %v3_b9cc = and i32 %v1_b9c0, 65280
  store i32 %v3_b9cc, i32* %r2.global-to-local, align 4
  %v3_b9d0 = mul i32 %v0_b9c0, 16777216
  store i32 %v3_b9d0, i32* %ip.global-to-local, align 4
  %v1_b9d4 = add i32 %v2_b9c4, 20
  %v2_b9d4 = inttoptr i32 %v1_b9d4 to i8*
  %v3_b9d4 = load i8, i8* %v2_b9d4, align 1
  %v4_b9d4 = zext i8 %v3_b9d4 to i32
  %v4_b9d8 = mul nuw nsw i32 %v1_b9c8, 256
  %v5_b9d8 = or i32 %v4_b9d8, %v3_b9d0
  store i32 %v5_b9d8, i32* %ip.global-to-local, align 4
  %v2_b9e0 = call i32 @llvm.bswap.i32(i32 %v0_b9c0)
  %v7_b9e4 = lshr i32 %v0_b9b0, %v4_b9d4
  %v8_b9e4 = add i32 %v7_b9e4, %v2_b9e0
  store i32 %v8_b9e4, i32* %r2.global-to-local, align 4
  %v3_b9f0 = mul i32 %v8_b9e4, 16777216
  %v1_b9e8 = mul i32 %v8_b9e4, 256
  %v4_b9f4 = and i32 %v1_b9e8, 16711680
  %v5_b9f4 = or i32 %v4_b9f4, %v3_b9f0
  store i32 %v5_b9f4, i32* %r1.global-to-local, align 4
  store i32 %v6_b53c, i32* %r0.global-to-local, align 4
  %v2_ba04 = call i32 @llvm.bswap.i32(i32 %v8_b9e4)
  store i32 %v2_ba04, i32* %r3.global-to-local, align 4
  store i1 %v7_b8a8, i1* %cpsr_z.global-to-local, align 1
  %v1_ba0c = load i32, i32* @r5, align 4
  %v2_ba0c = add i32 %v1_ba0c, 16
  %v3_ba0c = inttoptr i32 %v2_ba0c to i32*
  store i32 %v2_ba04, i32* %v3_ba0c, align 4
  br i1 %v2_b8a8, label %dec_label_pc_ba14, label %dec_label_pc_b8b0

dec_label_pc_ba14:                                ; preds = %dec_label_pc_b9ac, %dec_label_pc_b8a4
  %v0_ba14 = call i32 @function_ebc8()
  store i32 %v0_ba14, i32* %r0.global-to-local, align 4
  store i32 %v3_b590, i32* %r2.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_ba24, i1* %cpsr_z.global-to-local, align 1
  %v1_ba28 = load i32, i32* @r5, align 4
  %v2_ba28 = add i32 %v1_ba28, 12
  %v3_ba28 = inttoptr i32 %v2_ba28 to i32*
  store i32 %v0_ba14, i32* %v3_ba28, align 4
  br i1 %v3_ba24, label %dec_label_pc_ba30, label %dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge

dec_label_pc_ba14.dec_label_pc_b8c4_crit_edge:    ; preds = %dec_label_pc_ba14
  %v1_b8c8.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8c4

dec_label_pc_ba30:                                ; preds = %dec_label_pc_ba14, %dec_label_pc_b8b0
  %v0_ba30 = call i32 @function_ebc8()
  %v1_ba30 = trunc i32 %v0_ba30 to i8
  store i32 %v0_ba30, i32* %r0.global-to-local, align 4
  %v4_ba3429 = udiv i32 %v0_ba30, 256
  %v1_ba38 = trunc i32 %v4_ba3429 to i8
  %v2_ba38 = load i32, i32* @r5, align 4
  %v3_ba38 = add i32 %v2_ba38, 5
  %v4_ba38 = inttoptr i32 %v3_ba38 to i8*
  store i8 %v1_ba38, i8* %v4_ba38, align 1
  store i32 %v3_b5ac, i32* %r3.global-to-local, align 4
  %v1_ba40 = load i32, i32* @r4, align 4
  %v9_ba40 = icmp eq i32 %v3_b5ac, %v1_ba40
  store i1 %v9_ba40, i1* %cpsr_z.global-to-local, align 1
  %v3_ba44 = load i32, i32* @r5, align 4
  %v4_ba44 = add i32 %v3_ba44, 4
  %v5_ba44 = inttoptr i32 %v4_ba44 to i8*
  store i8 %v1_ba30, i8* %v5_ba44, align 1
  %v0_ba48 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba48, label %dec_label_pc_ba4c, label %dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge

dec_label_pc_ba30.dec_label_pc_b8d0_crit_edge:    ; preds = %dec_label_pc_ba30
  %v1_b8d4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8d0

dec_label_pc_ba4c:                                ; preds = %dec_label_pc_ba30, %dec_label_pc_b8c4
  %v0_ba4c = call i32 @function_ebc8()
  %v1_ba4c = trunc i32 %v0_ba4c to i8
  store i32 %v0_ba4c, i32* %r0.global-to-local, align 4
  store i32 %v3_b5b0, i32* %ip.global-to-local, align 4
  %v4_ba54 = sdiv i32 %v0_ba4c, 256
  store i32 %v4_ba54, i32* %r3.global-to-local, align 4
  %v1_ba58 = load i32, i32* @r4, align 4
  %v9_ba58 = icmp eq i32 %v3_b5b0, %v1_ba58
  store i1 %v9_ba58, i1* %cpsr_z.global-to-local, align 1
  %v3_ba5c = load i32, i32* @r5, align 4
  %v4_ba5c = add i32 %v3_ba5c, 20
  %v5_ba5c = inttoptr i32 %v4_ba5c to i8*
  store i8 %v1_ba4c, i8* %v5_ba5c, align 1
  %v0_ba60 = load i32, i32* %r3.global-to-local, align 4
  %v1_ba60 = trunc i32 %v0_ba60 to i8
  %v2_ba60 = load i32, i32* @r6, align 4
  %v3_ba60 = add i32 %v2_ba60, 1
  %v4_ba60 = inttoptr i32 %v3_ba60 to i8*
  store i8 %v1_ba60, i8* %v4_ba60, align 1
  %v0_ba64 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba64, label %dec_label_pc_ba68, label %dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge

dec_label_pc_ba4c.dec_label_pc_b8dc_crit_edge:    ; preds = %dec_label_pc_ba4c
  %v1_b8e0.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8dc

dec_label_pc_ba68:                                ; preds = %dec_label_pc_ba4c, %dec_label_pc_b8d0
  %v0_ba68 = call i32 @function_ebc8()
  %v1_ba68 = trunc i32 %v0_ba68 to i8
  %v4_ba6c = sdiv i32 %v0_ba68, 256
  store i32 %v4_ba6c, i32* %r3.global-to-local, align 4
  %v3_ba70 = load i32, i32* @r6, align 4
  %v4_ba70 = add i32 %v3_ba70, 2
  %v5_ba70 = inttoptr i32 %v4_ba70 to i8*
  store i8 %v1_ba68, i8* %v5_ba70, align 1
  store i32 %v6_b478, i32* %r0.global-to-local, align 4
  %v1_ba78 = load i32, i32* @r4, align 4
  %v9_ba78 = icmp eq i32 %v6_b478, %v1_ba78
  store i1 %v9_ba78, i1* %cpsr_z.global-to-local, align 1
  %v0_ba7c = load i32, i32* %r3.global-to-local, align 4
  %v1_ba7c = trunc i32 %v0_ba7c to i8
  %v2_ba7c = load i32, i32* @r6, align 4
  %v3_ba7c = add i32 %v2_ba7c, 3
  %v4_ba7c = inttoptr i32 %v3_ba7c to i8*
  store i8 %v1_ba7c, i8* %v4_ba7c, align 1
  %v0_ba80 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ba80, label %dec_label_pc_ba84, label %dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge

dec_label_pc_ba68.dec_label_pc_b8e8_crit_edge:    ; preds = %dec_label_pc_ba68
  %v1_b8ec.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_b8e8

dec_label_pc_ba84:                                ; preds = %dec_label_pc_ba68, %dec_label_pc_b8dc
  %v0_ba84 = call i32 @function_ebc8()
  store i32 %v0_ba84, i32* %r0.global-to-local, align 4
  store i32 %v6_b490, i32* %r2.global-to-local, align 4
  %v1_ba8c = load i32, i32* @r4, align 4
  %v9_ba8c = icmp eq i32 %v6_b490, %v1_ba8c
  store i1 %v9_ba8c, i1* %cpsr_z.global-to-local, align 1
  %v1_ba90 = load i32, i32* @r6, align 4
  %v2_ba90 = add i32 %v1_ba90, 4
  %v3_ba90 = inttoptr i32 %v2_ba90 to i32*
  store i32 %v0_ba84, i32* %v3_ba90, align 4
  br i1 %v9_ba8c, label %dec_label_pc_ba98, label %dec_label_pc_b8f4

dec_label_pc_ba98:                                ; preds = %dec_label_pc_ba84, %dec_label_pc_b8e8
  %v0_ba98 = call i32 @function_ebc8()
  store i32 %v0_ba98, i32* %r0.global-to-local, align 4
  store i32 %v1_b5b4, i32* %r3.global-to-local, align 4
  store i1 %v2_baa0, i1* %cpsr_z.global-to-local, align 1
  %v1_baa4 = load i32, i32* @r6, align 4
  %v2_baa4 = add i32 %v1_baa4, 8
  %v3_baa4 = inttoptr i32 %v2_baa4 to i32*
  store i32 %v0_ba98, i32* %v3_baa4, align 4
  br i1 %v2_baa0, label %dec_label_pc_b900, label %dec_label_pc_baac

dec_label_pc_baac:                                ; preds = %dec_label_pc_b8f4, %dec_label_pc_ba98
  %v0_baac = call i32 @function_ebc8()
  %v1_baac = trunc i32 %v0_baac to i8
  store i32 %v0_baac, i32* %r0.global-to-local, align 4
  %v4_bab0 = sdiv i32 %v0_baac, 256
  store i32 %v4_bab0, i32* %r3.global-to-local, align 4
  %v1_bab4 = trunc i32 %v4_bab0 to i8
  %v2_bab4 = load i32, i32* @r6, align 4
  %v3_bab4 = add i32 %v2_bab4, 19
  %v4_bab4 = inttoptr i32 %v3_bab4 to i8*
  store i8 %v1_bab4, i8* %v4_bab4, align 1
  %v3_bab8 = load i32, i32* @r6, align 4
  %v4_bab8 = add i32 %v3_bab8, 18
  %v5_bab8 = inttoptr i32 %v4_bab8 to i8*
  store i8 %v1_baac, i8* %v5_bab8, align 1
  br label %dec_label_pc_b900

dec_label_pc_bac0:                                ; preds = %dec_label_pc_b560
  %v0_bac0 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_bac0, i32* %r0.global-to-local, align 4
  %v1_bac4 = call i32 @function_11e18(i32 %v0_bac0)
  store i32 %v1_bac4, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_bac8

dec_label_pc_bac8:                                ; preds = %dec_label_pc_b388, %dec_label_pc_bac0
  %v29_bacc = phi i32 [ %v3_b550, %dec_label_pc_b388 ], [ %v1_bac4, %dec_label_pc_bac0 ]
  store i32 %v3_b388, i32* %r4.global-to-local, align 4
  store i32 %v12_b388, i32* %r7.global-to-local, align 4
  ret i32 %v29_bacc

; uselistorder directives
  uselistorder i32 %v4_bab0, { 1, 0 }
  uselistorder i32 %v0_baac, { 0, 2, 1 }
  uselistorder i32 %v0_ba4c, { 0, 2, 1 }
  uselistorder i32 %v0_ba30, { 0, 2, 1 }
  uselistorder i32 %v2_ba04, { 1, 0 }
  uselistorder i32 %v8_b9e4, { 2, 0, 1, 3 }
  uselistorder i32 %v3_b9d0, { 1, 0 }
  uselistorder i32 %v0_b9c0, { 2, 0, 1, 3 }
  uselistorder i1 %v2_b9a0, { 1, 0 }
  uselistorder i32 %v1_b994, { 1, 2, 3, 0 }
  uselistorder i32 %v1_b990, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_b938, { 0, 2, 1 }
  uselistorder i32 %v0_b920, { 1, 0, 2 }
  uselistorder i1 %v7_b8a8, { 2, 1, 0 }
  uselistorder i1 %v2_baa0, { 2, 3, 1, 0 }
  uselistorder i1 %v3_ba24, { 3, 2, 0, 1 }
  uselistorder i32 %v1_b85c, { 1, 0, 2, 3 }
  uselistorder i8 %v5_b674, { 1, 0 }
  uselistorder i32 %v3_b65c, { 1, 0 }
  uselistorder i32 %v1_b658, { 1, 0 }
  uselistorder i32 %v1_b64c, { 1, 0 }
  uselistorder i32 %v1_b648, { 1, 0 }
  uselistorder i32 %v1_b624, { 1, 0 }
  uselistorder i32 %v1_b620, { 1, 0 }
  uselistorder i32 %v3_b614, { 1, 0 }
  uselistorder i32 %v1_b610, { 1, 0 }
  uselistorder i32 %v1_b5ec, { 1, 0 }
  uselistorder i32 %v1_b5e4, { 1, 0 }
  uselistorder i32 %v1_b5b4, { 2, 1, 3, 0 }
  uselistorder i32 %v3_b5ac, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_b5a4, { 3, 0, 1, 2 }
  uselistorder i32 %v0_b5a0, { 0, 2, 1, 4, 3 }
  uselistorder i1 %v7_b580, { 1, 0 }
  uselistorder i1 %v7_b554, { 1, 0 }
  uselistorder i32 %v3_b550, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v6_b53c, { 6, 4, 0, 5, 1, 3, 2 }
  uselistorder i32 %v6_b490, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v6_b478, { 6, 5, 4, 3, 2, 0, 1, 7 }
  uselistorder i32 %v1_b428, { 1, 2, 0 }
  uselistorder i32 %v7_b3e4, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v6_b3c0, { 1, 2, 0 }
  uselistorder i32 %v1_b38c, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 12, 11 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 29, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 21, 23, 24, 25, 26, 27, 28, 30, 29, 31, 32, 33, 35, 34, 37, 36, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 2, 4, 6, 7, 5, 8, 9, 11, 10, 13, 12, 14, 16, 15, 17, 18, 19, 22, 20, 21, 23, 24, 25, 26, 27, 1, 28, 29, 30, 31, 35, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 0 }
  uselistorder label %dec_label_pc_bac8, { 1, 0 }
  uselistorder label %dec_label_pc_baac, { 1, 0 }
  uselistorder label %dec_label_pc_b900, { 2, 1, 0 }
  uselistorder label %dec_label_pc_b874, { 1, 0 }
  uselistorder label %bb76, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_bad4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bad4:
  %fp.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-80 = alloca i8, align 1
  %v24_bad4 = load i32, i32* @fp, align 4
  %v1_bad8 = urem i32 %arg1, 256
  store i32 %v1_bad8, i32* @r7, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r6, align 4
  %v1_baf0 = urem i32 %arg3, 256
  store i32 %v1_baf0, i32* @r4, align 4
  %v2_baf4 = call i32 @function_12a18(i32 %v1_bad8, i32 4)
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %v2_baf4, i32* @sl, align 4
  %v0_bb00 = load i32, i32* @r7, align 4
  %v2_bb04 = call i32 @function_12a18(i32 %v0_bb00, i32 4)
  store i32 65535, i32* @r5, align 4
  %v0_bb10 = load i32, i32* @r6, align 4
  store i32 %v0_bb10, i32* %r1.global-to-local, align 4
  store i32 %v2_bb04, i32* @sb, align 4
  %v0_bb20 = load i32, i32* @r4, align 4
  %v5_bb24 = inttoptr i32 %v0_bb10 to i32*
  %v6_bb24 = call i32 @function_85e0(i32 %v0_bb20, i32* %v5_bb24, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v3_bb2c = urem i32 %v6_bb24, 65536
  %v0_bb30 = load i32, i32* @r6, align 4
  store i32 %v0_bb30, i32* %r1.global-to-local, align 4
  %v0_bb38 = load i32, i32* @r5, align 4
  %v0_bb3c = load i32, i32* @r4, align 4
  %v5_bb44 = inttoptr i32 %v0_bb30 to i32*
  %v6_bb44 = call i32 @function_85e0(i32 %v0_bb3c, i32* %v5_bb44, i32 6, i32 %v0_bb38, i32 %v3_bb2c)
  %v0_bb48 = load i32, i32* @r6, align 4
  store i32 %v0_bb48, i32* %r1.global-to-local, align 4
  %v3_bb4c = mul i32 %v6_bb44, 65536
  store i32 %v3_bb4c, i32* %fp.global-to-local, align 4
  %v0_bb58 = load i32, i32* @r4, align 4
  %v5_bb5c = inttoptr i32 %v0_bb48 to i32*
  %v6_bb5c = call i32 @function_85e0(i32 %v0_bb58, i32* %v5_bb5c, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  %v0_bb68 = load i32, i32* @r6, align 4
  store i32 %v0_bb68, i32* %r1.global-to-local, align 4
  %v0_bb6c = load i32, i32* @r4, align 4
  %v3_bb74 = urem i32 %v6_bb5c, 65536
  store i32 %v3_bb74, i32* @r6, align 4
  %v5_bb78 = inttoptr i32 %v0_bb68 to i32*
  %v6_bb78 = call i32 @function_85e0(i32 %v0_bb6c, i32* %v5_bb78, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v0_bb7c = load i32, i32* %fp.global-to-local, align 4
  %v3_bb7c = udiv i32 %v0_bb7c, 65536
  %v1_bb84 = load i32, i32* @r5, align 4
  %v9_bb84 = icmp eq i32 %v3_bb7c, %v1_bb84
  store i32 0, i32* %stack_var_-52, align 4
  br i1 %v9_bb84, label %dec_label_pc_bbac, label %bb

bb:                                               ; preds = %dec_label_pc_bad4
  %v2_bb98 = mul nuw nsw i32 %v3_bb7c, 256
  %v4_bb9c = and i32 %v2_bb98, 65280
  %v1_bba0 = urem i32 %v6_bb78, 256
  store i32 %v1_bba0, i32* @r8, align 4
  %v5_bba4 = udiv i32 %v0_bb7c, 16777216
  %v6_bba4 = or i32 %v4_bb9c, %v5_bba4
  br label %dec_label_pc_bbb8

dec_label_pc_bbac:                                ; preds = %dec_label_pc_bad4
  %v1_bba07 = urem i32 %v6_bb78, 256
  store i32 %v1_bba07, i32* @r8, align 4
  %v0_bbac = call i32 @function_ebc8()
  %v3_bbb4 = urem i32 %v0_bbac, 65536
  br label %dec_label_pc_bbb8

dec_label_pc_bbb8:                                ; preds = %bb, %dec_label_pc_bbac
  %storemerge17 = phi i32 [ %v6_bba4, %bb ], [ %v3_bbb4, %dec_label_pc_bbac ]
  store i32 %storemerge17, i32* %fp.global-to-local, align 4
  %v0_bbb8 = load i32, i32* @r7, align 4
  %tmp41 = icmp slt i32 %v0_bbb8, 1
  br i1 %tmp41, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bbc0

dec_label_pc_bd60.preheader:                      ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbb8
  %storemerge3.in12.ph = phi i32 [ %v0_bbb8, %dec_label_pc_bbb8 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  %tmp424750 = icmp slt i32 %storemerge3.in12.ph, 1
  br i1 %tmp424750, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bbc0:                                ; preds = %dec_label_pc_bbb8
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v3_bbc4 = udiv i32 %v6_bb24, 256
  %v5_bbd0 = trunc i32 %v3_bbc4 to i8
  store i32 %arg2, i32* @r5, align 4
  %v3_bbe8 = udiv i32 %v6_bb24, 65536
  store i32 %v3_bbe8, i32* @r4, align 4
  %v4_bbf8 = trunc i32 %v3_bbe8 to i8
  store i8 %v4_bbf8, i8* %stack_var_-80, align 1
  %v3_bd08 = icmp eq i32 %v3_bb2c, 65535
  %v2_bc30 = ptrtoint i32* %stack_var_-52 to i32
  %v3_bc60 = bitcast i32* %stack_var_-52 to %sockaddr*
  br label %dec_label_pc_bcec

dec_label_pc_bc00:                                ; preds = %dec_label_pc_bcec
  %v2_bc00 = load i8, i8* %stack_var_-80, align 1
  %v3_bc00 = sext i8 %v2_bc00 to i32
  store i32 %v3_bc00, i32* %r1.global-to-local, align 4
  store i32 %v3_bbc4, i32* @r4, align 4
  %v2_bc04 = load i32, i32* @r5, align 4
  %v3_bc04 = add i32 %v2_bc04, 2
  %v4_bc04 = inttoptr i32 %v3_bc04 to i8*
  store i8 %v5_bbd0, i8* %v4_bc04, align 1
  %v0_bc08 = load i32, i32* %r1.global-to-local, align 4
  %v1_bc08 = trunc i32 %v0_bc08 to i8
  %v2_bc08 = load i32, i32* @r5, align 4
  %v3_bc08 = add i32 %v2_bc08, 3
  %v4_bc08 = inttoptr i32 %v3_bc08 to i8*
  store i8 %v1_bc08, i8* %v4_bc08, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bc0c:                                ; preds = %dec_label_pc_bd14, %dec_label_pc_bc00
  %v1_bc14 = add i32 %stack_var_-56.0, 1
  store i32 2, i32* %r1.global-to-local, align 4
  %v3_bc24 = call i32 @function_1272c(i32 2, i32 2, i32 17)
  store i32 %stack_var_-60.0, i32* @r4, align 4
  %v7_bc2c = icmp eq i32 %v3_bc24, -1
  store i32 %v2_bc30, i32* %r1.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  %v2_bc40 = load i32, i32* @sb, align 4
  %v3_bc40 = add i32 %v2_bc40, %stack_var_-60.0
  %v4_bc40 = inttoptr i32 %v3_bc40 to i32*
  store i32 %v3_bc24, i32* %v4_bc40, align 4
  br i1 %v7_bc2c, label %dec_label_pc_bd6c, label %dec_label_pc_bc48

dec_label_pc_bc48:                                ; preds = %dec_label_pc_bc0c
  store i32 2, i32* %stack_var_-52, align 4
  %v4_bc60 = call i32 @function_1255c(i32 %v3_bc24, %sockaddr* %v3_bc60, i32 16)
  %v0_bc64 = load i32, i32* @r5, align 4
  %v1_bc64 = add i32 %v0_bc64, 20
  %v2_bc64 = inttoptr i32 %v1_bc64 to i8*
  %v3_bc64 = load i8, i8* %v2_bc64, align 1
  %tmp = icmp ugt i8 %v3_bc64, 31
  br i1 %tmp, label %dec_label_pc_bcbc, label %dec_label_pc_bc70

dec_label_pc_bc70:                                ; preds = %dec_label_pc_bc48
  %v1_bc70 = add i32 %v0_bc64, 16
  %v2_bc70 = inttoptr i32 %v1_bc70 to i32*
  %v3_bc70 = load i32, i32* %v2_bc70, align 4
  store i32 %v3_bc70, i32* @r4, align 4
  %v0_bc74 = call i32 @function_ebc8()
  %v0_bc78 = load i32, i32* @r4, align 4
  %v1_bc7c = and i32 %v0_bc78, 65280
  %v3_bc84 = mul i32 %v0_bc78, 16777216
  %v4_bc88 = mul nuw nsw i32 %v1_bc7c, 256
  %v5_bc88 = or i32 %v4_bc88, %v3_bc84
  store i32 %v5_bc88, i32* %r1.global-to-local, align 4
  %v0_bc90 = load i32, i32* @r5, align 4
  %v1_bc90 = add i32 %v0_bc90, 20
  %v2_bc90 = inttoptr i32 %v1_bc90 to i8*
  %v3_bc90 = load i8, i8* %v2_bc90, align 1
  %v4_bc90 = zext i8 %v3_bc90 to i32
  %v2_bc94 = call i32 @llvm.bswap.i32(i32 %v0_bc78)
  %v7_bc98 = lshr i32 %v0_bc74, %v4_bc90
  %v8_bc98 = add i32 %v7_bc98, %v2_bc94
  %v3_bca4 = mul i32 %v8_bc98, 16777216
  %v1_bca8 = and i32 %v8_bc98, 65280
  %v4_bcac = mul nuw nsw i32 %v1_bca8, 256
  %v5_bcac = or i32 %v4_bcac, %v3_bca4
  store i32 %v5_bcac, i32* %r1.global-to-local, align 4
  %v2_bcb4 = call i32 @llvm.bswap.i32(i32 %v8_bc98)
  %v2_bcb8 = add i32 %v0_bc90, 4
  %v3_bcb8 = inttoptr i32 %v2_bcb8 to i32*
  store i32 %v2_bcb4, i32* %v3_bcb8, align 4
  %v0_bcc8.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_bcbc

dec_label_pc_bcbc:                                ; preds = %dec_label_pc_bc48, %dec_label_pc_bc70
  %v0_bcc8 = phi i32 [ %v0_bc64, %dec_label_pc_bc48 ], [ %v0_bcc8.pre, %dec_label_pc_bc70 ]
  store i32 %stack_var_-60.0, i32* %r1.global-to-local, align 4
  %v1_bcc4 = load i32, i32* @sb, align 4
  %v2_bcc4 = add i32 %v1_bcc4, %stack_var_-60.0
  %v3_bcc4 = inttoptr i32 %v2_bcc4 to i32*
  %v4_bcc4 = load i32, i32* %v3_bcc4, align 4
  store i32 %v0_bcc8, i32* %r1.global-to-local, align 4
  %v3_bccc = inttoptr i32 %v0_bcc8 to %sockaddr*
  %v4_bccc = call i32 @function_12588(i32 %v4_bcc4, %sockaddr* %v3_bccc, i32 16)
  %v1_bcd8 = add i32 %stack_var_-60.0, 4
  %v1_bcdc = load i32, i32* @r7, align 4
  %v9_bcdc = icmp eq i32 %v1_bc14, %v1_bcdc
  %v0_bce4 = load i32, i32* @r5, align 4
  %v1_bce4 = add i32 %v0_bce4, 24
  store i32 %v1_bce4, i32* @r5, align 4
  br i1 %v9_bcdc, label %dec_label_pc_bd60.preheader, label %dec_label_pc_bcec

dec_label_pc_bcec:                                ; preds = %dec_label_pc_bcbc, %dec_label_pc_bbc0
  %stack_var_-60.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bcd8, %dec_label_pc_bcbc ]
  %stack_var_-56.0 = phi i32 [ 0, %dec_label_pc_bbc0 ], [ %v1_bc14, %dec_label_pc_bcbc ]
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_bcf8 = call i32 @function_12a18(i32 65535, i32 1)
  store i32 %v3_bb2c, i32* %r1.global-to-local, align 4
  %v2_bd0c = load i32, i32* @sl, align 4
  %v3_bd0c = add i32 %v2_bd0c, %stack_var_-60.0
  %v4_bd0c = inttoptr i32 %v3_bd0c to i32*
  store i32 %v2_bcf8, i32* %v4_bd0c, align 4
  br i1 %v3_bd08, label %dec_label_pc_bd14, label %dec_label_pc_bc00

dec_label_pc_bd14:                                ; preds = %dec_label_pc_bcec
  %v0_bd14 = call i32 @function_ebc8()
  %v1_bd14 = trunc i32 %v0_bd14 to i8
  %v4_bd18 = sdiv i32 %v0_bd14, 256
  %v1_bd1c = trunc i32 %v4_bd18 to i8
  %v2_bd1c = load i32, i32* @r5, align 4
  %v3_bd1c = add i32 %v2_bd1c, 3
  %v4_bd1c = inttoptr i32 %v3_bd1c to i8*
  store i8 %v1_bd1c, i8* %v4_bd1c, align 1
  %v3_bd20 = load i32, i32* @r5, align 4
  %v4_bd20 = add i32 %v3_bd20, 2
  %v5_bd20 = inttoptr i32 %v4_bd20 to i8*
  store i8 %v1_bd14, i8* %v5_bd20, align 1
  br label %dec_label_pc_bc0c

dec_label_pc_bd28:                                ; preds = %dec_label_pc_bd60.loopexit, %dec_label_pc_bd60.preheader, %dec_label_pc_bd64.loopexit, %dec_label_pc_bd28
  br label %dec_label_pc_bd28

dec_label_pc_bd2c:                                ; preds = %dec_label_pc_bd2c.lr.ph, %dec_label_pc_bd64.loopexit
  %v0_bd2c = load i32, i32* @r8, align 4
  %v2_bd2c = icmp eq i32 %v0_bd2c, 0
  store i32 0, i32* @r5, align 4
  br i1 %v2_bd2c, label %dec_label_pc_bd34, label %dec_label_pc_bd74

dec_label_pc_bd34:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_bd3c

dec_label_pc_bd3c:                                ; preds = %dec_label_pc_bd3c, %dec_label_pc_bd34
  %v0_bd44 = phi i32 [ %v1_bd44, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v0_bd3c = phi i32 [ %v1_bd58, %dec_label_pc_bd3c ], [ 0, %dec_label_pc_bd34 ]
  %v1_bd3c = load i32, i32* @sb, align 4
  %v2_bd3c = add i32 %v1_bd3c, %v0_bd3c
  %v3_bd3c = inttoptr i32 %v2_bd3c to i32*
  %v4_bd3c = load i32, i32* %v3_bd3c, align 4
  %v1_bd40 = load i32, i32* @sl, align 4
  %v2_bd40 = add i32 %v1_bd40, %v0_bd3c
  %v3_bd40 = inttoptr i32 %v2_bd40 to i32*
  %v4_bd40 = load i32, i32* %v3_bd40, align 4
  store i32 %v4_bd40, i32* %r1.global-to-local, align 4
  %v1_bd44 = add i32 %v0_bd44, 1
  %v0_bd48 = load i32, i32* @r6, align 4
  %v4_bd50 = inttoptr i32 %v4_bd40 to i32*
  %v5_bd50 = call i32 @function_1269c(i32 %v4_bd3c, i32* %v4_bd50, i32 %v0_bd48, i32 16384)
  %v1_bd54 = load i32, i32* @r7, align 4
  %v9_bd54 = icmp eq i32 %v1_bd44, %v1_bd54
  %v0_bd58 = load i32, i32* @r4, align 4
  %v1_bd58 = add i32 %v0_bd58, 4
  store i32 %v1_bd58, i32* @r4, align 4
  br i1 %v9_bd54, label %dec_label_pc_bd60.loopexit, label %dec_label_pc_bd3c

dec_label_pc_bd60.loopexit:                       ; preds = %dec_label_pc_bd3c
  %tmp4247 = icmp slt i32 %v1_bd44, 1
  br i1 %tmp4247, label %dec_label_pc_bd28, label %dec_label_pc_bd2c.lr.ph

dec_label_pc_bd2c.lr.ph:                          ; preds = %dec_label_pc_bd60.preheader, %dec_label_pc_bd60.loopexit
  br label %dec_label_pc_bd2c

dec_label_pc_bd64.loopexit:                       ; preds = %dec_label_pc_bd7c
  %tmp42 = icmp slt i32 %v0_bda4, 1
  br i1 %tmp42, label %dec_label_pc_bd28, label %dec_label_pc_bd2c

dec_label_pc_bd6c:                                ; preds = %dec_label_pc_bc0c
  store i32 %v24_bad4, i32* %fp.global-to-local, align 4
  ret i32 %v3_bc24

dec_label_pc_bd74:                                ; preds = %dec_label_pc_bd2c
  store i32 0, i32* @fp, align 4
  br label %dec_label_pc_bd7c

dec_label_pc_bd7c:                                ; preds = %dec_label_pc_bd7c, %dec_label_pc_bd74
  %v0_bd7c = phi i32 [ %v1_bda8, %dec_label_pc_bd7c ], [ 0, %dec_label_pc_bd74 ]
  %v1_bd7c = load i32, i32* @sl, align 4
  %v2_bd7c = add i32 %v1_bd7c, %v0_bd7c
  %v3_bd7c = inttoptr i32 %v2_bd7c to i32*
  %v4_bd7c = load i32, i32* %v3_bd7c, align 4
  store i32 %v4_bd7c, i32* @r4, align 4
  %v0_bd80 = load i32, i32* @r6, align 4
  store i32 %v0_bd80, i32* @r1, align 4
  %v1_bd88 = inttoptr i32 %v4_bd7c to i8*
  %v2_bd88 = call i32 @function_ed48(i8* %v1_bd88)
  %v0_bd8c = load i32, i32* @r5, align 4
  %v1_bd8c = add i32 %v0_bd8c, 1
  store i32 %v1_bd8c, i32* @r5, align 4
  %v0_bd90 = load i32, i32* @fp, align 4
  %v1_bd90 = load i32, i32* @sb, align 4
  %v2_bd90 = add i32 %v1_bd90, %v0_bd90
  %v3_bd90 = inttoptr i32 %v2_bd90 to i32*
  %v4_bd90 = load i32, i32* %v3_bd90, align 4
  %v0_bd94 = load i32, i32* @r4, align 4
  store i32 %v0_bd94, i32* %r1.global-to-local, align 4
  %v0_bd98 = load i32, i32* @r6, align 4
  %v4_bda0 = inttoptr i32 %v0_bd94 to i32*
  %v5_bda0 = call i32 @function_1269c(i32 %v4_bd90, i32* %v4_bda0, i32 %v0_bd98, i32 16384)
  %v0_bda4 = load i32, i32* @r5, align 4
  %v1_bda4 = load i32, i32* @r7, align 4
  %v9_bda4 = icmp eq i32 %v0_bda4, %v1_bda4
  %v0_bda8 = load i32, i32* @fp, align 4
  %v1_bda8 = add i32 %v0_bda8, 4
  store i32 %v1_bda8, i32* @fp, align 4
  br i1 %v9_bda4, label %dec_label_pc_bd64.loopexit, label %dec_label_pc_bd7c

; uselistorder directives
  uselistorder i32 %v1_bda8, { 1, 0 }
  uselistorder i32 %v0_bda4, { 1, 0 }
  uselistorder i32 %v1_bd58, { 1, 0 }
  uselistorder i32 %v1_bd44, { 2, 0, 1 }
  uselistorder i32 %stack_var_-60.0, { 0, 5, 2, 4, 1, 3 }
  uselistorder i32 %v0_bcc8, { 1, 0 }
  uselistorder i32 %v8_bc98, { 1, 2, 0 }
  uselistorder i32 %v0_bc78, { 1, 0, 2 }
  uselistorder i32 %v3_bc24, { 1, 3, 2, 0 }
  uselistorder i32 %v1_bc14, { 1, 2, 0 }
  uselistorder i32 %v3_bbe8, { 1, 0 }
  uselistorder i32 %v3_bbc4, { 1, 0 }
  uselistorder i32 %v3_bb2c, { 0, 3, 1, 2 }
  uselistorder i32 %v1_bad8, { 1, 0 }
  uselistorder i8* %stack_var_-80, { 1, 0 }
  uselistorder i32* %stack_var_-52, { 1, 0, 3, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 11, 12, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 16, 15, 17, 19, 18, 0 }
  uselistorder label %dec_label_pc_bd2c.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_bd2c, { 1, 0 }
  uselistorder label %dec_label_pc_bd28, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_bcbc, { 1, 0 }
  uselistorder label %dec_label_pc_bbb8, { 1, 0 }
}

define i32 @function_bdb8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_bdb8:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %v18_bdb8 = load i32, i32* @sb, align 4
  %v24_bdb8 = load i32, i32* @fp, align 4
  %v1_bdbc = urem i32 %arg1, 256
  store i32 %v1_bdbc, i32* @sl, align 4
  store i32 %arg2, i32* @r8, align 4
  store i32 %v1_bdbc, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  store i32 %arg4, i32* @r5, align 4
  %v1_bdd4 = urem i32 %arg3, 256
  store i32 %v1_bdd4, i32* @r4, align 4
  %v2_bdd8 = call i32 @function_12a18(i32 %v1_bdbc, i32 4)
  %v0_bddc = load i32, i32* @r5, align 4
  store i32 %v0_bddc, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_bdec = load i32, i32* @r4, align 4
  store i32 %v0_bdec, i32* %r0.global-to-local, align 4
  %v5_bdf0 = inttoptr i32 %v0_bddc to i32*
  %v6_bdf0 = call i32 @function_85e0(i32 %v0_bdec, i32* %v5_bdf0, i32 2, i32 0, i32 %v2_bdd8)
  %v1_bdfc = urem i32 %v6_bdf0, 256
  store i32 %v1_bdfc, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_be08 = load i32, i32* @r5, align 4
  store i32 %v0_be08, i32* %r1.global-to-local, align 4
  %v0_be0c = load i32, i32* @r4, align 4
  store i32 %v0_be0c, i32* %r0.global-to-local, align 4
  %v5_be10 = trunc i32 %v6_bdf0 to i8
  %v6_be14 = inttoptr i32 %v0_be08 to i32*
  %v7_be14 = call i32 @function_85e0(i32 %v0_be0c, i32* %v6_be14, i32 3, i32 65535, i32 %v6_bdf0)
  %v0_be18 = load i32, i32* @r5, align 4
  store i32 %v0_be18, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_be14, i32* %fp.global-to-local, align 4
  %v0_be28 = load i32, i32* @r4, align 4
  store i32 %v0_be28, i32* %r0.global-to-local, align 4
  %v5_be2c = inttoptr i32 %v0_be18 to i32*
  %v6_be2c = call i32 @function_85e0(i32 %v0_be28, i32* %v5_be2c, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_be34 = urem i32 %v6_be2c, 256
  store i32 %v1_be34, i32* %ip.global-to-local, align 4
  %v0_be38 = load i32, i32* @r5, align 4
  store i32 %v0_be38, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_be44 = load i32, i32* @r4, align 4
  store i32 %v0_be44, i32* %r0.global-to-local, align 4
  %v5_be48 = trunc i32 %v6_be2c to i8
  %v6_be4c = inttoptr i32 %v0_be38 to i32*
  %v7_be4c = call i32 @function_85e0(i32 %v0_be44, i32* %v6_be4c, i32 5, i32 0, i32 %v6_be2c)
  %v1_be58 = urem i32 %v7_be4c, 256
  store i32 %v1_be58, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_be64 = load i32, i32* @r5, align 4
  store i32 %v0_be64, i32* %r1.global-to-local, align 4
  %v0_be68 = load i32, i32* @r4, align 4
  store i32 %v0_be68, i32* %r0.global-to-local, align 4
  %v5_be70 = inttoptr i32 %v0_be64 to i32*
  %v6_be70 = call i32 @function_85e0(i32 %v0_be68, i32* %v5_be70, i32 6, i32 65535, i32 %v1_be58)
  %v0_be78 = load i32, i32* @r5, align 4
  store i32 %v0_be78, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 %v6_be70, i32* @r7, align 4
  %v0_be88 = load i32, i32* @r4, align 4
  store i32 %v0_be88, i32* %r0.global-to-local, align 4
  %v5_be8c = inttoptr i32 %v0_be78 to i32*
  %v6_be8c = call i32 @function_85e0(i32 %v0_be88, i32* %v5_be8c, i32 7, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_be90 = load i32, i32* @r5, align 4
  store i32 %v0_be90, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 512, i32* %r3.global-to-local, align 4
  store i32 %v6_be8c, i32* %sb.global-to-local, align 4
  %v0_bea0 = load i32, i32* @r4, align 4
  store i32 %v0_bea0, i32* %r0.global-to-local, align 4
  %v5_bea4 = inttoptr i32 %v0_be90 to i32*
  %v6_bea4 = call i32 @function_85e0(i32 %v0_bea0, i32* %v5_bea4, i32 0, i32 512, i32 ptrtoint (i32* @0 to i32))
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_beb0 = load i32, i32* @r5, align 4
  store i32 %v0_beb0, i32* %r1.global-to-local, align 4
  store i32 %v6_bea4, i32* @r6, align 4
  %v0_beb8 = load i32, i32* @r4, align 4
  store i32 %v0_beb8, i32* %r0.global-to-local, align 4
  %v5_bebc = inttoptr i32 %v0_beb0 to i32*
  %v6_bebc = call i32 @function_85e0(i32 %v0_beb8, i32* %v5_bebc, i32 1, i32 1, i32 ptrtoint (i32* @0 to i32))
  %v2_bec8 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_bec8, i32* %r3.global-to-local, align 4
  %v1_becc = urem i32 %v6_bebc, 256
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v0_bed0 = load i32, i32* @r5, align 4
  store i32 %v0_bed0, i32* %r1.global-to-local, align 4
  store i32 25, i32* %r2.global-to-local, align 4
  %v0_bed8 = load i32, i32* @r4, align 4
  store i32 %v0_bed8, i32* %r0.global-to-local, align 4
  %v5_bee0 = inttoptr i32 %v0_bed0 to i32*
  %v6_bee0 = call i32 @function_85e0(i32 %v0_bed8, i32* %v5_bee0, i32 25, i32 %v2_bec8, i32 %v1_becc)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_bef4 = call i32 @function_1272c(i32 2, i32 3, i32 17)
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v7_bef8 = icmp eq i32 %v3_bef4, -1
  store i1 %v7_bef8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bef8, label %dec_label_pc_c320, label %dec_label_pc_bf04

dec_label_pc_bf04:                                ; preds = %dec_label_pc_bdb8
  store i32 1, i32* %stack_var_-40, align 4
  %v6_bf0c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_bf0c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_bf20 = call i32 @function_126fc(i32 %v3_bef4, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_bf20, i32* %r0.global-to-local, align 4
  %v7_bf24 = icmp eq i32 %v6_bf20, -1
  store i1 %v7_bf24, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_bf24, label %dec_label_pc_c318, label %dec_label_pc_bf2c

dec_label_pc_bf2c:                                ; preds = %dec_label_pc_bf04
  %v0_bf2c = load i32, i32* @r6, align 4
  store i32 1460, i32* %r3.global-to-local, align 4
  %v3_bf38 = urem i32 %v0_bf2c, 65536
  store i32 %v3_bf38, i32* %r2.global-to-local, align 4
  %v3_bf3c = icmp ugt i32 %v3_bf38, 1459
  %v9_bf3c = icmp eq i32 %v3_bf38, 1460
  store i1 %v9_bf3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_bf3c, label %bb, label %bb71

bb:                                               ; preds = %dec_label_pc_bf2c
  store i32 1460, i32* %r2.global-to-local, align 4
  br label %bb71

bb71:                                             ; preds = %dec_label_pc_bf2c, %bb
  %v0_bf44 = phi i32 [ %v3_bf38, %dec_label_pc_bf2c ], [ 1460, %bb ]
  %v0_bf48 = load i32, i32* %fp.global-to-local, align 4
  %v3_bf48 = mul i32 %v0_bf48, 65536
  store i32 %v3_bf48, i32* %r0.global-to-local, align 4
  %v3_bf4c = urem i32 %v0_bf48, 65536
  store i32 %v3_bf4c, i32* %r2.global-to-local, align 4
  %v0_bf50 = load i32, i32* @sl, align 4
  %v2_bf50 = icmp eq i32 %v0_bf50, 0
  store i1 %v2_bf50, i1* %cpsr_z.global-to-local, align 1
  %v0_bf54 = load i32, i32* %sb.global-to-local, align 4
  %v0_bf58 = load i32, i32* @r7, align 4
  %tmp72 = icmp slt i32 %v0_bf50, 1
  br i1 %tmp72, label %bb73, label %bb74

bb73:                                             ; preds = %bb71
  store i32 %v0_bf44, i32* %r2.global-to-local, align 4
  br label %bb74

bb74:                                             ; preds = %bb71, %bb73
  %v5_bf80 = phi i32 [ %v3_bf4c, %bb71 ], [ %v0_bf44, %bb73 ]
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_bf68 = urem i32 %v0_bf58, 65536
  store i32 %v3_bf68, i32* %r3.global-to-local, align 4
  %v3_bf6c = urem i32 %v0_bf54, 65536
  store i32 %v3_bf6c, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %tmp72, label %.thread, label %dec_label_pc_bf88

.thread:                                          ; preds = %bb74
  %v6_bf7c = add nsw i32 %v5_bf80, 28
  store i32 %v6_bf7c, i32* @fp, align 4
  %v6_bf80 = add nsw i32 %v5_bf80, 8
  store i32 %v6_bf80, i32* @sb, align 4
  br label %dec_label_pc_c0fc

dec_label_pc_bf88:                                ; preds = %bb74
  %v1_bf8c = add nuw nsw i32 %v0_bf44, 28
  store i32 %v1_bf8c, i32* @fp, align 4
  %tmp75 = mul nuw nsw i32 %v1_bf8c, 256
  %v1_bf98 = and i32 %tmp75, 65280
  %tmp76 = udiv i32 %v0_bf48, 256
  %v3_bf9c = urem i32 %tmp76, 256
  %v2_bfb0 = icmp eq i32 %v1_be58, 0
  store i1 %v2_bfb0, i1* %cpsr_z.global-to-local, align 1
  %v1_bfb4 = urem i32 %v0_bf48, 256
  %v1_bfbc = add nuw nsw i32 %v0_bf44, 8
  store i32 %v1_bfbc, i32* @sb, align 4
  %v1_bfc4 = urem i32 %v0_bf58, 256
  %v1_bfc8 = urem i32 %v0_bf54, 256
  store i32 %v1_bfc8, i32* %ip.global-to-local, align 4
  store i32 %v1_bf98, i32* %r3.global-to-local, align 4
  %tmp77 = mul nuw nsw i32 %v1_bfbc, 256
  %v4_bfd4 = mul nuw nsw i32 %v1_bfb4, 256
  %v5_bfd4 = or i32 %v4_bfd4, %v3_bf9c
  store i32 %v5_bfd4, i32* %r0.global-to-local, align 4
  %v3_bfd8 = mul nuw nsw i32 %v1_bfc4, 256
  store i32 %v3_bfd8, i32* %r2.global-to-local, align 4
  %tmp78 = udiv i32 %v0_bf54, 256
  %v3_bfdc = urem i32 %tmp78, 256
  %v1_bfe0 = and i32 %tmp77, 65280
  store i32 %v1_bfe0, i32* %r1.global-to-local, align 4
  %tmp79 = udiv i32 %v1_bf8c, 256
  %v4_bfe4 = urem i32 %tmp79, 256
  %v5_bfe4 = or i32 %v4_bfe4, %v1_bf98
  store i32 %v5_bfe4, i32* @lr, align 4
  %tmp80 = udiv i32 %v0_bf58, 256
  %v4_bfe8 = urem i32 %tmp80, 256
  %v5_bfe8 = or i32 %v4_bfe8, %v3_bfd8
  store i32 %v5_bfe8, i32* @r4, align 4
  %v5_bfec = trunc i32 %tmp79 to i8
  %v5_bff0 = trunc i32 %tmp76 to i8
  %v4_bff4 = mul nuw nsw i32 %v1_bfc8, 256
  %v5_bff4 = or i32 %v4_bff4, %v3_bfdc
  store i32 %v5_bff4, i32* @r5, align 4
  %tmp81 = udiv i32 %v1_bfbc, 256
  %v4_bff8 = urem i32 %tmp81, 256
  %v5_bff8 = or i32 %v4_bff8, %v1_bfe0
  store i32 %v5_bff8, i32* @r7, align 4
  br i1 %v2_bfb0, label %dec_label_pc_c000, label %dec_label_pc_c328

dec_label_pc_c000:                                ; preds = %dec_label_pc_bf88
  %v3_c00036 = udiv i32 %v1_bf98, 256
  store i32 %v3_c00036, i32* %ip.global-to-local, align 4
  store i32 %v1_bfb4, i32* %r0.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r2.global-to-local, align 4
  %v3_c01037 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c01037, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %v4_c0b4 = sext i8 %v5_bff0 to i32
  %sext15 = mul i32 %v0_bf48, 16777216
  %v4_c0b8 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_bf58, 16777216
  %v4_c0d0 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v1_bfbc, 16777216
  %v4_c0d4 = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_bf54, 16777216
  %v4_c0d8 = sdiv i32 %sext18, 16777216
  %v1_c0c0 = trunc i32 %v1_bf8c to i8
  %v1_c0e0 = trunc i32 %v4_c0d4 to i8
  br label %dec_label_pc_c02c

dec_label_pc_c02c:                                ; preds = %dec_label_pc_c02c, %dec_label_pc_c000
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c038 = call i32 @function_12a18(i32 1510, i32 1)
  store i32 %v2_c038, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v3_c040 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c040, i32* %r2.global-to-local, align 4
  %v2_c044 = load i32, i32* @r6, align 4
  %v5_c044 = mul i32 %v2_c044, 4
  %v6_c044 = add i32 %v5_c044, %v2_bdd8
  %v7_c044 = inttoptr i32 %v6_c044 to i32*
  store i32 %v2_c038, i32* %v7_c044, align 4
  %v0_c048 = load i32, i32* %ip.global-to-local, align 4
  %v1_c048 = load i32, i32* %r2.global-to-local, align 4
  %v4_c048 = mul i32 %v1_c048, 4
  %v5_c048 = add i32 %v4_c048, %v0_c048
  %v6_c048 = inttoptr i32 %v5_c048 to i32*
  %v7_c048 = load i32, i32* %v6_c048, align 4
  store i32 %v7_c048, i32* %r1.global-to-local, align 4
  %v1_c04c = inttoptr i32 %v7_c048 to i8*
  %v2_c04c = load i8, i8* %v1_c04c, align 1
  %tmp = urem i8 %v2_c04c, 16
  %v1_c050 = zext i8 %tmp to i32
  %v1_c054 = or i32 %v1_c050, 64
  store i32 %v1_c054, i32* %r3.global-to-local, align 4
  %v1_c058 = trunc i32 %v1_c054 to i8
  store i8 %v1_c058, i8* %v1_c04c, align 1
  %v0_c05c = load i32, i32* %r1.global-to-local, align 4
  %v1_c05c = inttoptr i32 %v0_c05c to i8*
  %v2_c05c = load i8, i8* %v1_c05c, align 1
  %v3_c05c = zext i8 %v2_c05c to i32
  %v1_c060 = and i32 %v3_c05c, 240
  %v1_c064 = or i32 %v1_c060, 5
  store i32 %v1_c064, i32* %r2.global-to-local, align 4
  %v3_c06c = add i32 %v0_c05c, 9
  %v4_c06c = inttoptr i32 %v3_c06c to i8*
  store i8 17, i8* %v4_c06c, align 1
  %v0_c070 = load i32, i32* %r2.global-to-local, align 4
  %v1_c070 = trunc i32 %v0_c070 to i8
  %v2_c070 = load i32, i32* %r1.global-to-local, align 4
  %v3_c070 = inttoptr i32 %v2_c070 to i8*
  store i8 %v1_c070, i8* %v3_c070, align 1
  store i32 %v6_bdf0, i32* %r0.global-to-local, align 4
  %v2_c078 = load i32, i32* %r1.global-to-local, align 4
  %v3_c078 = add i32 %v2_c078, 1
  %v4_c078 = inttoptr i32 %v3_c078 to i8*
  store i8 %v5_be10, i8* %v4_c078, align 1
  %v2_c080 = load i32, i32* %r1.global-to-local, align 4
  %v3_c080 = add i32 %v2_c080, 8
  %v4_c080 = inttoptr i32 %v3_c080 to i8*
  store i8 %v5_be48, i8* %v4_c080, align 1
  %v3_c084 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c084, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c08c = mul i32 %v3_c084, 32
  store i32 %v3_c08c, i32* %r3.global-to-local, align 4
  %v1_c090 = load i32, i32* %r1.global-to-local, align 4
  %v2_c090 = add i32 %v1_c090, 12
  %v3_c090 = inttoptr i32 %v2_c090 to i32*
  store i32 %v6_bee0, i32* %v3_c090, align 4
  %v0_c094 = load i32, i32* %r3.global-to-local, align 4
  %v1_c094 = load i32, i32* %r2.global-to-local, align 4
  %tmp83 = mul i32 %v1_c094, -8
  %v5_c094 = add i32 %v0_c094, %tmp83
  %v1_c098 = load i32, i32* @r8, align 4
  %v2_c098 = add i32 %v5_c094, %v1_c098
  store i32 %v2_c098, i32* %r3.global-to-local, align 4
  %v1_c09c = add i32 %v2_c098, 16
  %v2_c09c = inttoptr i32 %v1_c09c to i32*
  %v3_c09c = load i32, i32* %v2_c09c, align 4
  %v1_c0a0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c0a0 = add i32 %v1_c0a0, 16
  %v3_c0a0 = inttoptr i32 %v2_c0a0 to i32*
  store i32 %v3_c09c, i32* %v3_c0a0, align 4
  %v0_c0a8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0a8 = add i32 %v0_c0a8, 1
  store i32 %v1_c0a8, i32* @r6, align 4
  %v2_c0ac = load i32, i32* %r1.global-to-local, align 4
  %v3_c0ac = add i32 %v2_c0ac, 2
  %v4_c0ac = inttoptr i32 %v3_c0ac to i8*
  store i8 %v5_bfec, i8* %v4_c0ac, align 1
  store i32 %v4_c0b4, i32* %ip.global-to-local, align 4
  store i32 %v4_c0b8, i32* %r0.global-to-local, align 4
  %v0_c0bc = load i32, i32* %r1.global-to-local, align 4
  %v1_c0bc = add i32 %v0_c0bc, 20
  store i32 %v1_c0bc, i32* %r3.global-to-local, align 4
  %v3_c0c0 = add i32 %v0_c0bc, 3
  %v4_c0c0 = inttoptr i32 %v3_c0c0 to i8*
  store i8 %v1_c0c0, i8* %v4_c0c0, align 1
  %v0_c0c4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c0c4 = trunc i32 %v0_c0c4 to i8
  %v2_c0c4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c4 = add i32 %v2_c0c4, 4
  %v4_c0c4 = inttoptr i32 %v3_c0c4 to i8*
  store i8 %v1_c0c4, i8* %v4_c0c4, align 1
  %v0_c0c8 = load i32, i32* %r0.global-to-local, align 4
  %v1_c0c8 = trunc i32 %v0_c0c8 to i8
  %v2_c0c8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c0c8 = add i32 %v2_c0c8, 5
  %v4_c0c8 = inttoptr i32 %v3_c0c8 to i8*
  store i8 %v1_c0c8, i8* %v4_c0c8, align 1
  %v0_c0cc = load i32, i32* @r4, align 4
  %v1_c0cc = trunc i32 %v0_c0cc to i8
  %v2_c0cc = load i32, i32* %r1.global-to-local, align 4
  %v3_c0cc = add i32 %v2_c0cc, 20
  %v4_c0cc = inttoptr i32 %v3_c0cc to i8*
  store i8 %v1_c0cc, i8* %v4_c0cc, align 1
  store i32 %v4_c0d0, i32* %r2.global-to-local, align 4
  store i32 %v4_c0d4, i32* %r1.global-to-local, align 4
  store i32 %v4_c0d8, i32* %ip.global-to-local, align 4
  %v0_c0dc = load i32, i32* @r6, align 4
  %v1_c0dc = load i32, i32* @sl, align 4
  %v9_c0dc = icmp eq i32 %v0_c0dc, %v1_c0dc
  store i1 %v9_c0dc, i1* %cpsr_z.global-to-local, align 1
  %v2_c0e0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e0 = add i32 %v2_c0e0, 5
  %v4_c0e0 = inttoptr i32 %v3_c0e0 to i8*
  store i8 %v1_c0e0, i8* %v4_c0e0, align 1
  %v0_c0e4 = load i32, i32* %r2.global-to-local, align 4
  %v1_c0e4 = trunc i32 %v0_c0e4 to i8
  %v2_c0e4 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e4 = add i32 %v2_c0e4, 1
  %v4_c0e4 = inttoptr i32 %v3_c0e4 to i8*
  store i8 %v1_c0e4, i8* %v4_c0e4, align 1
  %v0_c0e8 = load i32, i32* @r5, align 4
  %v1_c0e8 = trunc i32 %v0_c0e8 to i8
  %v2_c0e8 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0e8 = add i32 %v2_c0e8, 2
  %v4_c0e8 = inttoptr i32 %v3_c0e8 to i8*
  store i8 %v1_c0e8, i8* %v4_c0e8, align 1
  %v0_c0ec = load i32, i32* %ip.global-to-local, align 4
  %v1_c0ec = trunc i32 %v0_c0ec to i8
  %v2_c0ec = load i32, i32* %r3.global-to-local, align 4
  %v3_c0ec = add i32 %v2_c0ec, 3
  %v4_c0ec = inttoptr i32 %v3_c0ec to i8*
  store i8 %v1_c0ec, i8* %v4_c0ec, align 1
  %v0_c0f0 = load i32, i32* @r7, align 4
  %v1_c0f0 = trunc i32 %v0_c0f0 to i8
  %v2_c0f0 = load i32, i32* %r3.global-to-local, align 4
  %v3_c0f0 = add i32 %v2_c0f0, 4
  %v4_c0f0 = inttoptr i32 %v3_c0f0 to i8*
  store i8 %v1_c0f0, i8* %v4_c0f0, align 1
  %v0_c0f4 = load i32, i32* @r6, align 4
  store i32 %v0_c0f4, i32* %stack_var_-40, align 4
  %v5_c0f8 = icmp slt i32 %v0_c0dc, %v1_c0dc
  br i1 %v5_c0f8, label %dec_label_pc_c02c, label %dec_label_pc_c0fc

dec_label_pc_c0fc:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c02c, %.thread
  %v0_c0fc = load i32, i32* @sl, align 4
  %v2_c0fc = icmp eq i32 %v0_c0fc, 0
  store i1 %v2_c0fc, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c2a8 = icmp eq i32 %v3_bf4c, 65535
  %v2_c174 = icmp eq i32 %v1_becc, 0
  %v2_c13c = icmp eq i32 %v6_bee0, -1
  %v7_c13c = icmp eq i32 %v6_bee0, -1
  br label %dec_label_pc_c104.outer

dec_label_pc_c104.outer:                          ; preds = %dec_label_pc_c224, %dec_label_pc_c0fc
  %v1_c104.ph.in = phi i32 [ %v1_c218, %dec_label_pc_c224 ], [ %v0_c0fc, %dec_label_pc_c0fc ]
  %v0_c104.ph = phi i1 [ %v2_c224, %dec_label_pc_c224 ], [ %v2_c0fc, %dec_label_pc_c0fc ]
  %v1_c104.ph = icmp slt i32 %v1_c104.ph.in, 0
  %v4_c104 = or i1 %v1_c104.ph, %v0_c104.ph
  br label %dec_label_pc_c104

dec_label_pc_c104:                                ; preds = %dec_label_pc_c104.outer, %dec_label_pc_c104
  br i1 %v4_c104, label %dec_label_pc_c104, label %dec_label_pc_c108

dec_label_pc_c108:                                ; preds = %dec_label_pc_c104
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_c114

dec_label_pc_c114:                                ; preds = %dec_label_pc_c17c, %dec_label_pc_c108
  %v1_c128 = phi i32 [ %v1_c214, %dec_label_pc_c17c ], [ 0, %dec_label_pc_c108 ]
  %v5_c118 = mul i32 %v1_c128, 24
  %v1_c11c = load i32, i32* @r8, align 4
  %v2_c11c = add i32 %v1_c11c, %v5_c118
  store i32 %v2_c11c, i32* %r3.global-to-local, align 4
  store i32 %v2_bdd8, i32* %ip.global-to-local, align 4
  %v1_c124 = add i32 %v2_c11c, 20
  %v2_c124 = inttoptr i32 %v1_c124 to i8*
  %v3_c124 = load i8, i8* %v2_c124, align 1
  %v4_c124 = zext i8 %v3_c124 to i32
  store i32 %v4_c124, i32* %r2.global-to-local, align 4
  %v4_c128 = mul i32 %v1_c128, 4
  %v5_c128 = add i32 %v4_c128, %v2_bdd8
  %v6_c128 = inttoptr i32 %v5_c128 to i32*
  %v7_c128 = load i32, i32* %v6_c128, align 4
  store i32 %v7_c128, i32* @r5, align 4
  %v7_c12c = icmp eq i8 %v3_c124, 31
  store i1 %v7_c12c, i1* %cpsr_z.global-to-local, align 1
  %v1_c130 = add i32 %v7_c128, 20
  store i32 %v1_c130, i32* @r6, align 4
  %tmp84 = icmp ult i8 %v3_c124, 32
  br i1 %tmp84, label %dec_label_pc_c230, label %dec_label_pc_c138

dec_label_pc_c138:                                ; preds = %dec_label_pc_c114
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c144:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c158

dec_label_pc_c158:                                ; preds = %dec_label_pc_c298.dec_label_pc_c158_crit_edge, %dec_label_pc_c144
  %v1_c15c = phi i32 [ %v1_c15c.pre, %dec_label_pc_c298.dec_label_pc_c158_crit_edge ], [ 65535, %dec_label_pc_c144 ]
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v9_c15c = icmp eq i32 %v3_bf68, %v1_c15c
  store i1 %v9_c15c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c15c, label %dec_label_pc_c2d0, label %dec_label_pc_c164

dec_label_pc_c164:                                ; preds = %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge, %dec_label_pc_c158
  %v1_c168 = phi i32 [ %v1_c168.pre, %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge ], [ %v1_c15c, %dec_label_pc_c158 ]
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v9_c168 = icmp eq i32 %v3_bf6c, %v1_c168
  store i1 %v9_c168, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c168, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c170:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_c174, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c17c:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec, %dec_label_pc_c308
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_c180 = load i32, i32* @r7, align 4
  %v1_c180 = trunc i32 %v0_c180 to i8
  %v2_c180 = load i32, i32* @r5, align 4
  %v3_c180 = add i32 %v2_c180, 10
  %v4_c180 = inttoptr i32 %v3_c180 to i8*
  store i8 %v1_c180, i8* %v4_c180, align 1
  %v0_c184 = load i32, i32* @r7, align 4
  %v1_c184 = trunc i32 %v0_c184 to i8
  %v2_c184 = load i32, i32* @r5, align 4
  %v3_c184 = add i32 %v2_c184, 11
  %v4_c184 = inttoptr i32 %v3_c184 to i8*
  store i8 %v1_c184, i8* %v4_c184, align 1
  %v0_c188 = load i32, i32* @r5, align 4
  store i32 %v0_c188, i32* @r0, align 4
  %v2_c18c = call i32 @function_d0b8(i32 %v0_c188, i32 20)
  %v3_c18c = trunc i32 %v2_c18c to i8
  store i32 %v2_c18c, i32* %r0.global-to-local, align 4
  %v4_c190 = sdiv i32 %v2_c18c, 256
  store i32 %v4_c190, i32* %r3.global-to-local, align 4
  %v1_c194 = trunc i32 %v4_c190 to i8
  %v2_c194 = load i32, i32* @r5, align 4
  %v3_c194 = add i32 %v2_c194, 11
  %v4_c194 = inttoptr i32 %v3_c194 to i8*
  store i8 %v1_c194, i8* %v4_c194, align 1
  %v3_c198 = load i32, i32* @r5, align 4
  %v4_c198 = add i32 %v3_c198, 10
  %v5_c198 = inttoptr i32 %v4_c198 to i8*
  store i8 %v3_c18c, i8* %v5_c198, align 1
  %v0_c19c = load i32, i32* @r7, align 4
  %v1_c19c = trunc i32 %v0_c19c to i8
  %v2_c19c = load i32, i32* @r6, align 4
  %v3_c19c = add i32 %v2_c19c, 6
  %v4_c19c = inttoptr i32 %v3_c19c to i8*
  store i8 %v1_c19c, i8* %v4_c19c, align 1
  %v0_c1a0 = load i32, i32* @r7, align 4
  %v1_c1a0 = trunc i32 %v0_c1a0 to i8
  %v2_c1a0 = load i32, i32* @r6, align 4
  %v3_c1a0 = add i32 %v2_c1a0, 7
  %v4_c1a0 = inttoptr i32 %v3_c1a0 to i8*
  store i8 %v1_c1a0, i8* %v4_c1a0, align 1
  %v0_c1a4 = load i32, i32* @r5, align 4
  %v1_c1a4 = add i32 %v0_c1a4, 24
  %v2_c1a4 = inttoptr i32 %v1_c1a4 to i8*
  %v3_c1a4 = load i8, i8* %v2_c1a4, align 1
  %v4_c1a4 = zext i8 %v3_c1a4 to i32
  store i32 %v4_c1a4, i32* %r3.global-to-local, align 4
  %v1_c1a8 = add i32 %v0_c1a4, 25
  %v2_c1a8 = inttoptr i32 %v1_c1a8 to i8*
  %v3_c1a8 = load i8, i8* %v2_c1a8, align 1
  %v4_c1a8 = zext i8 %v3_c1a8 to i32
  %v0_c1ac = load i32, i32* @r6, align 4
  store i32 %v0_c1ac, i32* @r1, align 4
  %v4_c1b0 = mul nuw nsw i32 %v4_c1a8, 256
  %v5_c1b0 = or i32 %v4_c1b0, %v4_c1a4
  store i32 %v5_c1b0, i32* %r2.global-to-local, align 4
  store i32 %v0_c1a4, i32* %r0.global-to-local, align 4
  %v0_c1b8 = load i32, i32* @sb, align 4
  store i32 %v0_c1b8, i32* %r3.global-to-local, align 4
  %v4_c1bc = call i32 @function_d114(i32 %v0_c1a4, i32 %v0_c1ac, i32 %v5_c1b0, i32 %v0_c1b8)
  %v5_c1bc = trunc i32 %v4_c1bc to i8
  store i32 %v4_c1bc, i32* %r0.global-to-local, align 4
  %v4_c1c038 = udiv i32 %v4_c1bc, 256
  %v1_c1c4 = trunc i32 %v4_c1c038 to i8
  %v2_c1c4 = load i32, i32* @r6, align 4
  %v3_c1c4 = add i32 %v2_c1c4, 7
  %v4_c1c4 = inttoptr i32 %v3_c1c4 to i8*
  store i8 %v1_c1c4, i8* %v4_c1c4, align 1
  %v3_c1c8 = load i32, i32* @r6, align 4
  %v4_c1c8 = add i32 %v3_c1c8, 6
  %v5_c1c8 = inttoptr i32 %v4_c1c8 to i8*
  store i8 %v5_c1bc, i8* %v5_c1c8, align 1
  %v3_c1cc = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c1cc, i32* %r3.global-to-local, align 4
  %v0_c1d0 = load i32, i32* @r5, align 4
  %v1_c1d0 = add i32 %v0_c1d0, 20
  %v2_c1d0 = inttoptr i32 %v1_c1d0 to i32*
  %v3_c1d0 = load i32, i32* %v2_c1d0, align 4
  %v3_c1d8 = udiv i32 %v3_c1d0, 65536
  store i32 %v3_c1d8, i32* %r2.global-to-local, align 4
  %v5_c1dc = mul i32 %v3_c1cc, 24
  %v1_c1e0 = load i32, i32* @r8, align 4
  %v2_c1e0 = add i32 %v1_c1e0, %v5_c1dc
  store i32 %v2_c1e0, i32* %ip.global-to-local, align 4
  %v3_c1e435 = udiv i32 %v3_c1d0, 16777216
  %v1_c1e8 = trunc i32 %v3_c1e435 to i8
  %v3_c1e8 = add i32 %v2_c1e0, 3
  %v4_c1e8 = inttoptr i32 %v3_c1e8 to i8*
  store i8 %v1_c1e8, i8* %v4_c1e8, align 1
  %v0_c1ec = load i32, i32* %r2.global-to-local, align 4
  %v1_c1ec = trunc i32 %v0_c1ec to i8
  %v2_c1ec = load i32, i32* %ip.global-to-local, align 4
  %v3_c1ec = add i32 %v2_c1ec, 2
  %v4_c1ec = inttoptr i32 %v3_c1ec to i8*
  store i8 %v1_c1ec, i8* %v4_c1ec, align 1
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c1f4 = load i32, i32* @r5, align 4
  store i32 %v0_c1f4, i32* %r1.global-to-local, align 4
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v0_c1fc = load i32, i32* @fp, align 4
  store i32 %v0_c1fc, i32* %r2.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c204 = load i32, i32* %ip.global-to-local, align 4
  %v6_c20c = inttoptr i32 %v0_c1f4 to i32*
  %v7_c20c = call i32 @function_126c8(i32 %v3_bef4, i32* %v6_c20c, i32 %v0_c1fc, i32 16384, i32 %v0_c204, i32 16)
  %v3_c210 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c210, i32* %r3.global-to-local, align 4
  %v1_c214 = add i32 %v3_c210, 1
  store i32 %v1_c214, i32* %r0.global-to-local, align 4
  %v1_c218 = load i32, i32* @sl, align 4
  %v9_c218 = icmp eq i32 %v1_c214, %v1_c218
  store i1 %v9_c218, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c214, i32* %stack_var_-40, align 4
  %v5_c220 = icmp slt i32 %v1_c214, %v1_c218
  br i1 %v5_c220, label %dec_label_pc_c114, label %dec_label_pc_c224

dec_label_pc_c224:                                ; preds = %dec_label_pc_c17c
  %v2_c224 = icmp eq i32 %v1_c218, 0
  store i1 %v2_c224, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c104.outer

dec_label_pc_c230:                                ; preds = %dec_label_pc_c114
  %v1_c230 = add i32 %v2_c11c, 16
  %v2_c230 = inttoptr i32 %v1_c230 to i32*
  %v3_c230 = load i32, i32* %v2_c230, align 4
  %v0_c234 = call i32 @function_ebc8()
  store i32 %v0_c234, i32* %r0.global-to-local, align 4
  %v3_c238 = load i32, i32* %stack_var_-40, align 4
  %v5_c240 = mul i32 %v3_c238, 24
  %v1_c248 = load i32, i32* @r8, align 4
  %v2_c248 = add i32 %v1_c248, %v5_c240
  store i32 %v2_c248, i32* %r1.global-to-local, align 4
  %v1_c24c = and i32 %v3_c230, 65280
  store i32 %v1_c24c, i32* %r3.global-to-local, align 4
  %v1_c244 = udiv i32 %v3_c230, 256
  %v3_c250 = and i32 %v1_c244, 65280
  store i32 %v3_c250, i32* %r2.global-to-local, align 4
  %v3_c254 = mul i32 %v3_c230, 16777216
  store i32 %v3_c254, i32* %ip.global-to-local, align 4
  %v1_c258 = add i32 %v2_c248, 20
  %v2_c258 = inttoptr i32 %v1_c258 to i8*
  %v3_c258 = load i8, i8* %v2_c258, align 1
  %v4_c258 = zext i8 %v3_c258 to i32
  %v4_c25c = mul nuw nsw i32 %v1_c24c, 256
  %v5_c25c = or i32 %v4_c25c, %v3_c254
  store i32 %v5_c25c, i32* %ip.global-to-local, align 4
  %v2_c264 = call i32 @llvm.bswap.i32(i32 %v3_c230)
  %v7_c268 = lshr i32 %v0_c234, %v4_c258
  %v8_c268 = add i32 %v7_c268, %v2_c264
  store i32 %v8_c268, i32* %r2.global-to-local, align 4
  %v3_c274 = mul i32 %v8_c268, 16777216
  %v1_c26c = mul i32 %v8_c268, 256
  %v4_c278 = and i32 %v1_c26c, 16711680
  %v5_c278 = or i32 %v4_c278, %v3_c274
  store i32 %v5_c278, i32* %r1.global-to-local, align 4
  store i32 %v6_bee0, i32* %r0.global-to-local, align 4
  %v2_c288 = call i32 @llvm.bswap.i32(i32 %v8_c268)
  store i32 %v2_c288, i32* %r3.global-to-local, align 4
  store i1 %v7_c13c, i1* %cpsr_z.global-to-local, align 1
  %v1_c290 = load i32, i32* @r5, align 4
  %v2_c290 = add i32 %v1_c290, 16
  %v3_c290 = inttoptr i32 %v2_c290 to i32*
  store i32 %v2_c288, i32* %v3_c290, align 4
  br i1 %v2_c13c, label %dec_label_pc_c298, label %dec_label_pc_c144

dec_label_pc_c298:                                ; preds = %dec_label_pc_c230, %dec_label_pc_c138
  %v0_c298 = call i32 @function_ebc8()
  store i32 %v0_c298, i32* %r0.global-to-local, align 4
  store i32 %v3_bf4c, i32* %r1.global-to-local, align 4
  store i32 65535, i32* @r4, align 4
  store i1 %v3_c2a8, i1* %cpsr_z.global-to-local, align 1
  %v1_c2ac = load i32, i32* @r5, align 4
  %v2_c2ac = add i32 %v1_c2ac, 12
  %v3_c2ac = inttoptr i32 %v2_c2ac to i32*
  store i32 %v0_c298, i32* %v3_c2ac, align 4
  br i1 %v3_c2a8, label %dec_label_pc_c2b4, label %dec_label_pc_c298.dec_label_pc_c158_crit_edge

dec_label_pc_c298.dec_label_pc_c158_crit_edge:    ; preds = %dec_label_pc_c298
  %v1_c15c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c158

dec_label_pc_c2b4:                                ; preds = %dec_label_pc_c298, %dec_label_pc_c144
  %v0_c2b4 = call i32 @function_ebc8()
  %v1_c2b4 = trunc i32 %v0_c2b4 to i8
  store i32 %v0_c2b4, i32* %r0.global-to-local, align 4
  store i32 %v3_bf68, i32* %r2.global-to-local, align 4
  %v4_c2bc = sdiv i32 %v0_c2b4, 256
  store i32 %v4_c2bc, i32* %r3.global-to-local, align 4
  %v1_c2c0 = load i32, i32* @r4, align 4
  %v9_c2c0 = icmp eq i32 %v3_bf68, %v1_c2c0
  store i1 %v9_c2c0, i1* %cpsr_z.global-to-local, align 1
  %v1_c2c4 = trunc i32 %v4_c2bc to i8
  %v2_c2c4 = load i32, i32* @r5, align 4
  %v3_c2c4 = add i32 %v2_c2c4, 5
  %v4_c2c4 = inttoptr i32 %v3_c2c4 to i8*
  store i8 %v1_c2c4, i8* %v4_c2c4, align 1
  %v3_c2c8 = load i32, i32* @r5, align 4
  %v4_c2c8 = add i32 %v3_c2c8, 4
  %v5_c2c8 = inttoptr i32 %v4_c2c8 to i8*
  store i8 %v1_c2b4, i8* %v5_c2c8, align 1
  %v0_c2cc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c2cc, label %dec_label_pc_c2d0, label %dec_label_pc_c2b4.dec_label_pc_c164_crit_edge

dec_label_pc_c2b4.dec_label_pc_c164_crit_edge:    ; preds = %dec_label_pc_c2b4
  %v1_c168.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_c164

dec_label_pc_c2d0:                                ; preds = %dec_label_pc_c2b4, %dec_label_pc_c158
  %v0_c2d0 = call i32 @function_ebc8()
  %v1_c2d0 = trunc i32 %v0_c2d0 to i8
  store i32 %v0_c2d0, i32* %r0.global-to-local, align 4
  %v4_c2d4 = sdiv i32 %v0_c2d0, 256
  store i32 %v4_c2d4, i32* %r3.global-to-local, align 4
  %v3_c2d8 = load i32, i32* @r5, align 4
  %v4_c2d8 = add i32 %v3_c2d8, 20
  %v5_c2d8 = inttoptr i32 %v4_c2d8 to i8*
  store i8 %v1_c2d0, i8* %v5_c2d8, align 1
  %v0_c2dc = load i32, i32* %r3.global-to-local, align 4
  %v1_c2dc = trunc i32 %v0_c2dc to i8
  %v2_c2dc = load i32, i32* @r6, align 4
  %v3_c2dc = add i32 %v2_c2dc, 1
  %v4_c2dc = inttoptr i32 %v3_c2dc to i8*
  store i8 %v1_c2dc, i8* %v4_c2dc, align 1
  store i32 %v3_bf6c, i32* %r3.global-to-local, align 4
  %v1_c2e4 = load i32, i32* @r4, align 4
  %v9_c2e4 = icmp eq i32 %v3_bf6c, %v1_c2e4
  store i1 %v9_c2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c2e4, label %dec_label_pc_c2ec, label %dec_label_pc_c170

dec_label_pc_c2ec:                                ; preds = %dec_label_pc_c2d0, %dec_label_pc_c164
  %v0_c2ec = call i32 @function_ebc8()
  %v1_c2ec = trunc i32 %v0_c2ec to i8
  store i32 %v0_c2ec, i32* %r0.global-to-local, align 4
  store i32 %v1_becc, i32* %ip.global-to-local, align 4
  %v4_c2f4 = sdiv i32 %v0_c2ec, 256
  store i32 %v4_c2f4, i32* %r3.global-to-local, align 4
  store i1 %v2_c174, i1* %cpsr_z.global-to-local, align 1
  %v1_c2fc = trunc i32 %v4_c2f4 to i8
  %v2_c2fc = load i32, i32* @r6, align 4
  %v3_c2fc = add i32 %v2_c2fc, 3
  %v4_c2fc = inttoptr i32 %v3_c2fc to i8*
  store i8 %v1_c2fc, i8* %v4_c2fc, align 1
  %v3_c300 = load i32, i32* @r6, align 4
  %v4_c300 = add i32 %v3_c300, 2
  %v5_c300 = inttoptr i32 %v4_c300 to i8*
  store i8 %v1_c2ec, i8* %v5_c300, align 1
  %v0_c304 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c304, label %dec_label_pc_c17c, label %dec_label_pc_c308

dec_label_pc_c308:                                ; preds = %dec_label_pc_c170, %dec_label_pc_c2ec
  %v0_c308 = load i32, i32* @r5, align 4
  %v1_c308 = add i32 %v0_c308, 28
  store i32 %v1_c308, i32* %r0.global-to-local, align 4
  store i32 %v0_bf44, i32* @r1, align 4
  %v1_c310 = inttoptr i32 %v1_c308 to i8*
  %v2_c310 = call i32 @function_ed48(i8* %v1_c310)
  store i32 %v2_c310, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c17c

dec_label_pc_c318:                                ; preds = %dec_label_pc_bf04
  store i32 %v3_bef4, i32* %r0.global-to-local, align 4
  %v1_c31c = call i32 @function_11e18(i32 %v3_bef4)
  store i32 %v1_c31c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_c320

dec_label_pc_c320:                                ; preds = %dec_label_pc_bdb8, %dec_label_pc_c318
  %v29_c324 = phi i32 [ %v3_bef4, %dec_label_pc_bdb8 ], [ %v1_c31c, %dec_label_pc_c318 ]
  store i32 %v18_bdb8, i32* %sb.global-to-local, align 4
  store i32 %v24_bdb8, i32* %fp.global-to-local, align 4
  ret i32 %v29_c324

dec_label_pc_c328:                                ; preds = %dec_label_pc_bf88
  %v3_c32c = sext i8 %v5_bfec to i32
  %v7_c32c = sext i8 %v5_bff0 to i32
  %v3_c330 = sdiv i32 %v3_c32c, 256
  store i32 %v3_c330, i32* %r0.global-to-local, align 4
  %v3_c334 = sdiv i32 %v7_c32c, 256
  store i32 %v3_c334, i32* %r1.global-to-local, align 4
  store i32 %v1_bfc4, i32* %r2.global-to-local, align 4
  store i32 %v1_bfc8, i32* %r3.global-to-local, align 4
  %v3_c34034 = udiv i32 %v1_bfe0, 256
  store i32 %v3_c34034, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  %sext11 = mul i32 %v1_bfbc, 16777216
  %v4_c404 = sdiv i32 %sext11, 16777216
  %sext12 = mul i32 %v0_bf58, 16777216
  %v4_c408 = sdiv i32 %sext12, 16777216
  %sext13 = mul i32 %v0_bf54, 16777216
  %v4_c424 = sdiv i32 %sext13, 16777216
  %v1_c410 = trunc i32 %v3_c334 to i8
  %v1_c42c = trunc i32 %v4_c424 to i8
  br label %dec_label_pc_c35c

dec_label_pc_c35c:                                ; preds = %dec_label_pc_c35c, %dec_label_pc_c328
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 1510, i32* %r0.global-to-local, align 4
  %v2_c368 = call i32 @function_12a18(i32 1510, i32 1)
  store i32 %v2_c368, i32* %r0.global-to-local, align 4
  store i32 %v2_bdd8, i32* %r1.global-to-local, align 4
  %v3_c370 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c370, i32* %r2.global-to-local, align 4
  %v2_c374 = load i32, i32* @r6, align 4
  %v5_c374 = mul i32 %v2_c374, 4
  %v6_c374 = add i32 %v5_c374, %v2_bdd8
  %v7_c374 = inttoptr i32 %v6_c374 to i32*
  store i32 %v2_c368, i32* %v7_c374, align 4
  %v0_c378 = load i32, i32* %r1.global-to-local, align 4
  %v1_c378 = load i32, i32* %r2.global-to-local, align 4
  %v4_c378 = mul i32 %v1_c378, 4
  %v5_c378 = add i32 %v4_c378, %v0_c378
  %v6_c378 = inttoptr i32 %v5_c378 to i32*
  %v7_c378 = load i32, i32* %v6_c378, align 4
  store i32 %v7_c378, i32* %r1.global-to-local, align 4
  %v1_c37c = inttoptr i32 %v7_c378 to i8*
  %v2_c37c = load i8, i8* %v1_c37c, align 1
  %tmp85 = urem i8 %v2_c37c, 16
  %v1_c380 = zext i8 %tmp85 to i32
  %v1_c384 = or i32 %v1_c380, 64
  store i32 %v1_c384, i32* %r3.global-to-local, align 4
  %v1_c388 = trunc i32 %v1_c384 to i8
  store i8 %v1_c388, i8* %v1_c37c, align 1
  %v0_c38c = load i32, i32* %r1.global-to-local, align 4
  %v1_c38c = inttoptr i32 %v0_c38c to i8*
  %v2_c38c = load i8, i8* %v1_c38c, align 1
  %v3_c38c = zext i8 %v2_c38c to i32
  %v1_c390 = and i32 %v3_c38c, 240
  %v1_c394 = or i32 %v1_c390, 5
  store i32 %v1_c394, i32* %r2.global-to-local, align 4
  %v3_c39c = add i32 %v0_c38c, 9
  %v4_c39c = inttoptr i32 %v3_c39c to i8*
  store i8 17, i8* %v4_c39c, align 1
  %v0_c3a0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3a0 = trunc i32 %v0_c3a0 to i8
  %v2_c3a0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a0 = inttoptr i32 %v2_c3a0 to i8*
  store i8 %v1_c3a0, i8* %v3_c3a0, align 1
  %v2_c3a8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3a8 = add i32 %v2_c3a8, 1
  %v4_c3a8 = inttoptr i32 %v3_c3a8 to i8*
  store i8 %v5_be10, i8* %v4_c3a8, align 1
  store i32 %v6_be2c, i32* %r0.global-to-local, align 4
  %v2_c3b0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3b0 = add i32 %v2_c3b0, 8
  %v4_c3b0 = inttoptr i32 %v3_c3b0 to i8*
  store i8 %v5_be48, i8* %v4_c3b0, align 1
  %v3_c3b4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c3b4, i32* %r2.global-to-local, align 4
  store i32 %v6_bee0, i32* %ip.global-to-local, align 4
  %v3_c3bc = mul i32 %v3_c3b4, 32
  store i32 %v3_c3bc, i32* %r3.global-to-local, align 4
  %v1_c3c0 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3c0 = add i32 %v1_c3c0, 12
  %v3_c3c0 = inttoptr i32 %v2_c3c0 to i32*
  store i32 %v6_bee0, i32* %v3_c3c0, align 4
  %v0_c3c4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3c4 = load i32, i32* %r2.global-to-local, align 4
  %tmp86 = mul i32 %v1_c3c4, -8
  %v5_c3c4 = add i32 %v0_c3c4, %tmp86
  %v1_c3c8 = load i32, i32* @r8, align 4
  %v2_c3c8 = add i32 %v5_c3c4, %v1_c3c8
  store i32 %v2_c3c8, i32* %r3.global-to-local, align 4
  %v1_c3cc = add i32 %v2_c3c8, 16
  %v2_c3cc = inttoptr i32 %v1_c3cc to i32*
  %v3_c3cc = load i32, i32* %v2_c3cc, align 4
  store i32 %v3_c3cc, i32* %ip.global-to-local, align 4
  %v1_c3d0 = add i32 %v1_c3c4, 1
  store i32 %v1_c3d0, i32* @r6, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_c3dc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3dc = add i32 %v2_c3dc, 6
  %v4_c3dc = inttoptr i32 %v3_c3dc to i8*
  store i8 64, i8* %v4_c3dc, align 1
  %v0_c3e0 = load i32, i32* %r2.global-to-local, align 4
  %v1_c3e0 = trunc i32 %v0_c3e0 to i8
  %v2_c3e0 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3e0 = add i32 %v2_c3e0, 7
  %v4_c3e0 = inttoptr i32 %v3_c3e0 to i8*
  store i8 %v1_c3e0, i8* %v4_c3e0, align 1
  %v0_c3e4 = load i32, i32* %ip.global-to-local, align 4
  %v1_c3e4 = load i32, i32* %r1.global-to-local, align 4
  %v2_c3e4 = add i32 %v1_c3e4, 16
  %v3_c3e4 = inttoptr i32 %v2_c3e4 to i32*
  store i32 %v0_c3e4, i32* %v3_c3e4, align 4
  store i32 %v3_c330, i32* %r3.global-to-local, align 4
  store i32 %v7_c32c, i32* %ip.global-to-local, align 4
  %v2_c3f4 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f4 = add i32 %v2_c3f4, 2
  %v4_c3f4 = inttoptr i32 %v3_c3f4 to i8*
  store i8 %v5_bfec, i8* %v4_c3f4, align 1
  %v0_c3f8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c3f8 = trunc i32 %v0_c3f8 to i8
  %v2_c3f8 = load i32, i32* %r1.global-to-local, align 4
  %v3_c3f8 = add i32 %v2_c3f8, 3
  %v4_c3f8 = inttoptr i32 %v3_c3f8 to i8*
  store i8 %v1_c3f8, i8* %v4_c3f8, align 1
  %v0_c3fc = load i32, i32* %ip.global-to-local, align 4
  %v1_c3fc = trunc i32 %v0_c3fc to i8
  %v2_c3fc = load i32, i32* %r1.global-to-local, align 4
  %v3_c3fc = add i32 %v2_c3fc, 4
  %v4_c3fc = inttoptr i32 %v3_c3fc to i8*
  store i8 %v1_c3fc, i8* %v4_c3fc, align 1
  store i32 %v3_c334, i32* %r2.global-to-local, align 4
  store i32 %v4_c404, i32* %r3.global-to-local, align 4
  store i32 %v4_c408, i32* %ip.global-to-local, align 4
  %v0_c40c = load i32, i32* %r1.global-to-local, align 4
  %v1_c40c = add i32 %v0_c40c, 20
  store i32 %v1_c40c, i32* %r0.global-to-local, align 4
  %v3_c410 = add i32 %v0_c40c, 5
  %v4_c410 = inttoptr i32 %v3_c410 to i8*
  store i8 %v1_c410, i8* %v4_c410, align 1
  %v0_c414 = load i32, i32* @r4, align 4
  %v1_c414 = trunc i32 %v0_c414 to i8
  %v2_c414 = load i32, i32* %r1.global-to-local, align 4
  %v3_c414 = add i32 %v2_c414, 20
  %v4_c414 = inttoptr i32 %v3_c414 to i8*
  store i8 %v1_c414, i8* %v4_c414, align 1
  %v0_c418 = load i32, i32* %r3.global-to-local, align 4
  %v1_c418 = trunc i32 %v0_c418 to i8
  %v2_c418 = load i32, i32* %r0.global-to-local, align 4
  %v3_c418 = add i32 %v2_c418, 5
  %v4_c418 = inttoptr i32 %v3_c418 to i8*
  store i8 %v1_c418, i8* %v4_c418, align 1
  %v0_c41c = load i32, i32* %ip.global-to-local, align 4
  %v1_c41c = trunc i32 %v0_c41c to i8
  %v2_c41c = load i32, i32* %r0.global-to-local, align 4
  %v3_c41c = add i32 %v2_c41c, 1
  %v4_c41c = inttoptr i32 %v3_c41c to i8*
  store i8 %v1_c41c, i8* %v4_c41c, align 1
  %v0_c420 = load i32, i32* @r5, align 4
  %v1_c420 = trunc i32 %v0_c420 to i8
  %v2_c420 = load i32, i32* %r0.global-to-local, align 4
  %v3_c420 = add i32 %v2_c420, 2
  %v4_c420 = inttoptr i32 %v3_c420 to i8*
  store i8 %v1_c420, i8* %v4_c420, align 1
  store i32 %v4_c424, i32* %r1.global-to-local, align 4
  %v0_c428 = load i32, i32* @r6, align 4
  %v1_c428 = load i32, i32* @sl, align 4
  %v9_c428 = icmp eq i32 %v0_c428, %v1_c428
  store i1 %v9_c428, i1* %cpsr_z.global-to-local, align 1
  %v2_c42c = load i32, i32* %r0.global-to-local, align 4
  %v3_c42c = add i32 %v2_c42c, 3
  %v4_c42c = inttoptr i32 %v3_c42c to i8*
  store i8 %v1_c42c, i8* %v4_c42c, align 1
  %v0_c430 = load i32, i32* @r7, align 4
  %v1_c430 = trunc i32 %v0_c430 to i8
  %v2_c430 = load i32, i32* %r0.global-to-local, align 4
  %v3_c430 = add i32 %v2_c430, 4
  %v4_c430 = inttoptr i32 %v3_c430 to i8*
  store i8 %v1_c430, i8* %v4_c430, align 1
  %v0_c434 = load i32, i32* @r6, align 4
  store i32 %v0_c434, i32* %stack_var_-40, align 4
  %v5_c438 = icmp slt i32 %v0_c428, %v1_c428
  br i1 %v5_c438, label %dec_label_pc_c35c, label %dec_label_pc_c0fc

; uselistorder directives
  uselistorder i32 %v1_c3c4, { 1, 0 }
  uselistorder i32 %v3_c334, { 2, 1, 0 }
  uselistorder i32 %v3_c330, { 1, 0 }
  uselistorder i32 %v7_c32c, { 1, 0 }
  uselistorder i32 %v4_c2f4, { 1, 0 }
  uselistorder i32 %v0_c2ec, { 0, 2, 1 }
  uselistorder i32 %v0_c2d0, { 0, 2, 1 }
  uselistorder i32 %v4_c2bc, { 1, 0 }
  uselistorder i32 %v0_c2b4, { 0, 2, 1 }
  uselistorder i32 %v2_c288, { 1, 0 }
  uselistorder i32 %v8_c268, { 2, 0, 1, 3 }
  uselistorder i32 %v3_c254, { 1, 0 }
  uselistorder i32 %v3_c230, { 1, 3, 2, 0 }
  uselistorder i1 %v2_c224, { 1, 0 }
  uselistorder i32 %v1_c218, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c214, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_c1bc, { 0, 2, 1 }
  uselistorder i32 %v0_c1a4, { 1, 0, 2, 3 }
  uselistorder i32 %v4_c190, { 1, 0 }
  uselistorder i32 %v2_c18c, { 0, 2, 1 }
  uselistorder i1 %v7_c13c, { 2, 1, 0 }
  uselistorder i1 %v3_c2a8, { 1, 0, 2, 3 }
  uselistorder i8 %v5_bfec, { 0, 2, 1 }
  uselistorder i32 %v3_bfd8, { 1, 0 }
  uselistorder i32 %v1_bfc8, { 2, 3, 0, 1 }
  uselistorder i32 %v1_bfc4, { 1, 2, 0 }
  uselistorder i32 %v1_bfbc, { 0, 1, 3, 2, 4 }
  uselistorder i32 %v1_bfb4, { 1, 0 }
  uselistorder i32 %v1_bf8c, { 2, 1, 0, 3 }
  uselistorder i32 %v3_bf6c, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v3_bf4c, { 2, 1, 4, 3, 0 }
  uselistorder i32 %v0_bf48, { 0, 2, 1, 4, 3 }
  uselistorder i32 %v0_bf44, { 3, 0, 4, 1, 2 }
  uselistorder i32 %v3_bf38, { 3, 1, 2, 0 }
  uselistorder i1 %v7_bf24, { 1, 0 }
  uselistorder i1 %v7_bef8, { 1, 0 }
  uselistorder i32 %v3_bef4, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v6_bee0, { 2, 1, 7, 5, 0, 6, 4, 3 }
  uselistorder i32 %v1_becc, { 3, 1, 2, 4, 0 }
  uselistorder i32 %v1_be58, { 1, 2, 0 }
  uselistorder i32 %v6_be2c, { 2, 1, 3, 0 }
  uselistorder i32 %v6_bdf0, { 2, 1, 3, 0 }
  uselistorder i32 %v2_bdd8, { 0, 3, 1, 5, 2, 4, 6 }
  uselistorder i32 %v1_bdbc, { 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 14, 13 }
  uselistorder i32* %r3.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 38, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 14, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 44, 46, 48, 47, 49, 50, 52, 51, 54, 53, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 10, 8, 9, 12, 11, 14, 13, 15, 16, 17, 19, 18, 21, 20, 22, 24, 23, 30, 25, 26, 27, 28, 29, 35, 31, 32, 33, 34, 36, 38, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 0 }
  uselistorder i32 (i8*)* @function_ed48, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 9 }
  uselistorder i32 240, { 1, 0 }
  uselistorder label %dec_label_pc_c320, { 1, 0 }
  uselistorder label %dec_label_pc_c308, { 1, 0 }
  uselistorder label %dec_label_pc_c17c, { 2, 1, 0 }
  uselistorder label %dec_label_pc_c104, { 1, 0 }
  uselistorder label %bb74, { 1, 0 }
  uselistorder label %bb71, { 1, 0 }
}

define i32 @function_c444(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c444:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_c444 = load i32, i32* @r4, align 4
  %v12_c444 = load i32, i32* @r7, align 4
  %v1_c448 = urem i32 %arg1, 256
  store i32 %v1_c448, i32* %sb.global-to-local, align 4
  store i32 %arg2, i32* @sl, align 4
  %v1_c45c = urem i32 %arg3, 256
  store i32 %v1_c45c, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c464 = call i32 @function_12a18(i32 %v1_c448, i32 4)
  %v0_c468 = load i32, i32* @r5, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c474 = load i32, i32* @r4, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c47c = inttoptr i32 %v0_c468 to i32*
  %v6_c47c = call i32 @function_85e0(i32 %v0_c474, i32* %v5_c47c, i32 2, i32 0, i32 %v2_c464)
  %v1_c488 = urem i32 %v6_c47c, 256
  store i32 %v1_c488, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c494 = load i32, i32* @r4, align 4
  %v0_c498 = load i32, i32* @r5, align 4
  %v5_c49c = trunc i32 %v6_c47c to i8
  %v6_c4a0 = inttoptr i32 %v0_c498 to i32*
  %v7_c4a0 = call i32 @function_85e0(i32 %v0_c494, i32* %v6_c4a0, i32 3, i32 65535, i32 %v6_c47c)
  %v0_c4a4 = load i32, i32* @r5, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  store i32 %v7_c4a0, i32* @r7, align 4
  %v0_c4b4 = load i32, i32* @r4, align 4
  %v5_c4b8 = inttoptr i32 %v0_c4a4 to i32*
  %v6_c4b8 = call i32 @function_85e0(i32 %v0_c4b4, i32* %v5_c4b8, i32 4, i32 64, i32 ptrtoint (i32* @0 to i32))
  %v1_c4c0 = urem i32 %v6_c4b8, 256
  store i32 %v1_c4c0, i32* %ip.global-to-local, align 4
  %v0_c4c4 = load i32, i32* @r5, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c4d0 = load i32, i32* @r4, align 4
  %v5_c4d4 = trunc i32 %v6_c4b8 to i8
  %v6_c4d8 = inttoptr i32 %v0_c4c4 to i32*
  %v7_c4d8 = call i32 @function_85e0(i32 %v0_c4d0, i32* %v6_c4d8, i32 5, i32 0, i32 %v6_c4b8)
  %v1_c4e4 = urem i32 %v7_c4d8, 256
  store i32 %v1_c4e4, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c4f0 = load i32, i32* @r4, align 4
  %v0_c4f4 = load i32, i32* @r5, align 4
  %v5_c4fc = inttoptr i32 %v0_c4f4 to i32*
  %v6_c4fc = call i32 @function_85e0(i32 %v0_c4f0, i32* %v5_c4fc, i32 6, i32 65535, i32 %v1_c4e4)
  store i32 27015, i32* %r3.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v0_c50c = load i32, i32* @r5, align 4
  store i32 %v6_c4fc, i32* @r6, align 4
  %v0_c514 = load i32, i32* @r4, align 4
  %v5_c518 = inttoptr i32 %v0_c50c to i32*
  %v6_c518 = call i32 @function_85e0(i32 %v0_c514, i32* %v5_c518, i32 7, i32 27015, i32 ptrtoint (i32* @0 to i32))
  store i32 %v6_c518, i32* @r4, align 4
  %v1_c524 = call i32 @function_10e50(i32 25)
  %v3_c530 = call i32 @function_10d6c(i32 25, i32* nonnull %stack_var_-44)
  store i32 %v3_c530, i32* %r8.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v3_c544 = call i32 @function_1272c(i32 2, i32 3, i32 17)
  %v7_c548 = icmp eq i32 %v3_c544, -1
  store i1 %v7_c548, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_c544, i32* %fp.global-to-local, align 4
  br i1 %v7_c548, label %dec_label_pc_c8fc, label %dec_label_pc_c554

dec_label_pc_c554:                                ; preds = %dec_label_pc_c444
  store i32 1, i32* %stack_var_-40, align 4
  %v6_c55c = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_c55c, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_c570 = call i32 @function_126fc(i32 %v3_c544, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 ptrtoint (i32* @0 to i32))
  %v7_c574 = icmp eq i32 %v6_c570, -1
  store i1 %v7_c574, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_c574, label %dec_label_pc_c8f4, label %dec_label_pc_c57c

dec_label_pc_c57c:                                ; preds = %dec_label_pc_c554
  %v0_c57c = load i32, i32* @r4, align 4
  %v3_c57c = mul i32 %v0_c57c, 65536
  store i32 %v3_c57c, i32* @lr, align 4
  %v0_c580 = load i32, i32* @r7, align 4
  %v0_c584 = load i32, i32* @r6, align 4
  %v3_c584 = mul i32 %v0_c584, 65536
  store i32 %v3_c584, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v3_c58c = urem i32 %v0_c580, 65536
  %v3_c590 = urem i32 %v0_c584, 65536
  store i32 %v3_c590, i32* %r2.global-to-local, align 4
  %v3_c594 = urem i32 %v0_c57c, 65536
  store i32 %v3_c594, i32* %r3.global-to-local, align 4
  %v0_c598 = load i32, i32* %sb.global-to-local, align 4
  %v2_c598 = icmp eq i32 %v0_c598, 0
  store i1 %v2_c598, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  %tmp50 = icmp slt i32 %v0_c598, 1
  br i1 %tmp50, label %dec_label_pc_c71c, label %dec_label_pc_c5b0

dec_label_pc_c5b0:                                ; preds = %dec_label_pc_c57c
  %v1_c5b4 = urem i32 %v0_c57c, 256
  %v1_c5b8 = urem i32 %v0_c584, 256
  %v1_c5bc = urem i32 %v0_c580, 256
  %v3_c5c0 = mul nuw nsw i32 %v1_c5b8, 256
  %v3_c5c4 = mul nuw nsw i32 %v1_c5b4, 256
  %tmp51 = udiv i32 %v0_c580, 256
  %v3_c5c8 = urem i32 %tmp51, 256
  %v4_c5cc = mul nuw nsw i32 %v1_c5bc, 256
  %v5_c5cc = or i32 %v4_c5cc, %v3_c5c8
  store i32 %v5_c5cc, i32* @r7, align 4
  %tmp52 = udiv i32 %v0_c57c, 256
  %v4_c5d0 = urem i32 %tmp52, 256
  %v5_c5d0 = or i32 %v4_c5d0, %v3_c5c4
  store i32 %v5_c5d0, i32* @r5, align 4
  %tmp53 = udiv i32 %v0_c584, 256
  %v4_c5d4 = urem i32 %tmp53, 256
  %v5_c5d4 = or i32 %v4_c5d4, %v3_c5c0
  store i32 %v5_c5d4, i32* @r6, align 4
  store i32 %v1_c5b8, i32* %r2.global-to-local, align 4
  store i32 %v1_c5b4, i32* %r3.global-to-local, align 4
  %v2_c650 = icmp eq i32 %v1_c4e4, 0
  %sext = mul i32 %v0_c580, 16777216
  %v4_c670 = sdiv i32 %sext, 16777216
  %sext6 = mul i32 %v0_c584, 16777216
  %v4_c6cc = sdiv i32 %sext6, 16777216
  %sext7 = mul i32 %v0_c57c, 16777216
  %v4_c6ec = sdiv i32 %sext7, 16777216
  br label %dec_label_pc_c5f0

dec_label_pc_c5f0:                                ; preds = %bb57, %dec_label_pc_c5b0
  %v2_c5f8 = call i32 @function_12a18(i32 128, i32 1)
  store i32 %v2_c464, i32* %r2.global-to-local, align 4
  %v3_c600 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c600, i32* %r3.global-to-local, align 4
  %v2_c604 = load i32, i32* @r4, align 4
  %v5_c604 = mul i32 %v2_c604, 4
  %v6_c604 = add i32 %v5_c604, %v2_c464
  %v7_c604 = inttoptr i32 %v6_c604 to i32*
  store i32 %v2_c5f8, i32* %v7_c604, align 4
  %v0_c608 = load i32, i32* %r2.global-to-local, align 4
  %v1_c608 = load i32, i32* %r3.global-to-local, align 4
  %v4_c608 = mul i32 %v1_c608, 4
  %v5_c608 = add i32 %v4_c608, %v0_c608
  %v6_c608 = inttoptr i32 %v5_c608 to i32*
  %v7_c608 = load i32, i32* %v6_c608, align 4
  store i32 %v7_c608, i32* @lr, align 4
  %v1_c60c = inttoptr i32 %v7_c608 to i8*
  %v2_c60c = load i8, i8* %v1_c60c, align 1
  %tmp = urem i8 %v2_c60c, 16
  %v1_c610 = zext i8 %tmp to i32
  %v1_c614 = or i32 %v1_c610, 64
  store i32 %v1_c614, i32* %r3.global-to-local, align 4
  %v1_c618 = trunc i32 %v1_c614 to i8
  store i8 %v1_c618, i8* %v1_c60c, align 1
  %v0_c61c = load i32, i32* @lr, align 4
  %v1_c61c = inttoptr i32 %v0_c61c to i8*
  %v2_c61c = load i8, i8* %v1_c61c, align 1
  %v1_c620 = and i8 %v2_c61c, -16
  %v1_c624 = or i8 %v1_c620, 5
  store i8 %v1_c624, i8* %v1_c61c, align 1
  %v2_c630 = load i32, i32* @lr, align 4
  %v3_c630 = add i32 %v2_c630, 1
  %v4_c630 = inttoptr i32 %v3_c630 to i8*
  store i8 %v5_c49c, i8* %v4_c630, align 1
  %v3_c634 = load i32, i32* %stack_var_-44, align 4
  %v1_c638 = add i32 %v3_c634, 32
  %tmp54 = mul i32 %v1_c638, 256
  %v1_c644 = and i32 %tmp54, 65280
  %tmp55 = udiv i32 %v1_c638, 256
  %v4_c648 = urem i32 %tmp55, 256
  %v5_c648 = or i32 %v4_c648, %v1_c644
  store i32 %v5_c648, i32* %r2.global-to-local, align 4
  store i1 %v2_c650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v6_c4b8, i32* %r3.global-to-local, align 4
  %v2_c658 = load i32, i32* @lr, align 4
  %v3_c658 = add i32 %v2_c658, 8
  %v4_c658 = inttoptr i32 %v3_c658 to i8*
  store i8 %v5_c4d4, i8* %v4_c658, align 1
  %v0_c65c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c65c, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_c5f0
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_c660 = load i32, i32* @lr, align 4
  %v4_c660 = add i32 %v3_c660, 6
  %v5_c660 = inttoptr i32 %v4_c660 to i8*
  store i8 64, i8* %v5_c660, align 1
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_c5f0, %bb
  %v0_c664 = load i32, i32* %r2.global-to-local, align 4
  %v1_c664 = trunc i32 %v0_c664 to i8
  %v2_c664 = load i32, i32* @lr, align 4
  %v3_c664 = add i32 %v2_c664, 2
  %v4_c664 = inttoptr i32 %v3_c664 to i8*
  store i8 %v1_c664, i8* %v4_c664, align 1
  %v0_c668 = load i32, i32* %r2.global-to-local, align 4
  %v3_c668 = sdiv i32 %v0_c668, 256
  store i32 %v3_c668, i32* %ip.global-to-local, align 4
  store i32 %v4_c670, i32* %r2.global-to-local, align 4
  %v2_c674 = load i32, i32* @lr, align 4
  %v3_c674 = add i32 %v2_c674, 9
  %v4_c674 = inttoptr i32 %v3_c674 to i8*
  store i8 17, i8* %v4_c674, align 1
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r3.global-to-local, align 4
  %v0_c67c = load i32, i32* %r2.global-to-local, align 4
  %v1_c67c = trunc i32 %v0_c67c to i8
  %v2_c67c = load i32, i32* @lr, align 4
  %v3_c67c = add i32 %v2_c67c, 5
  %v4_c67c = inttoptr i32 %v3_c67c to i8*
  store i8 %v1_c67c, i8* %v4_c67c, align 1
  %v0_c680 = load i32, i32* %ip.global-to-local, align 4
  %v1_c680 = trunc i32 %v0_c680 to i8
  %v2_c680 = load i32, i32* @lr, align 4
  %v3_c680 = add i32 %v2_c680, 3
  %v4_c680 = inttoptr i32 %v3_c680 to i8*
  store i8 %v1_c680, i8* %v4_c680, align 1
  %v0_c684 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c684, label %.thread8, label %bb56

.thread8:                                         ; preds = %.thread
  %v3_c6889 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c6889, i32* %ip.global-to-local, align 4
  br label %bb57

bb56:                                             ; preds = %.thread
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_c688 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c688, i32* %ip.global-to-local, align 4
  %v3_c68c = load i32, i32* @lr, align 4
  %v4_c68c = add i32 %v3_c68c, 7
  %v5_c68c = inttoptr i32 %v4_c68c to i8*
  store i8 0, i8* %v5_c68c, align 1
  %v0_c694.pre = load i32, i32* %ip.global-to-local, align 4
  br label %bb57

bb57:                                             ; preds = %.thread8, %bb56
  %v0_c694 = phi i32 [ %v3_c6889, %.thread8 ], [ %v0_c694.pre, %bb56 ]
  %v2_c690 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_c690, i32* %r2.global-to-local, align 4
  %v3_c694 = mul i32 %v0_c694, 32
  store i32 %v3_c694, i32* %r3.global-to-local, align 4
  %v1_c698 = load i32, i32* @lr, align 4
  %v2_c698 = add i32 %v1_c698, 12
  %v3_c698 = inttoptr i32 %v2_c698 to i32*
  store i32 %v2_c690, i32* %v3_c698, align 4
  %v0_c69c = load i32, i32* %r3.global-to-local, align 4
  %v1_c69c = load i32, i32* %ip.global-to-local, align 4
  %tmp60 = mul i32 %v1_c69c, -8
  %v5_c69c = add i32 %v0_c69c, %tmp60
  %v1_c6a0 = load i32, i32* @sl, align 4
  %v2_c6a0 = add i32 %v5_c69c, %v1_c6a0
  store i32 %v2_c6a0, i32* %r3.global-to-local, align 4
  %v1_c6a4 = add i32 %v2_c6a0, 16
  %v2_c6a4 = inttoptr i32 %v1_c6a4 to i32*
  %v3_c6a4 = load i32, i32* %v2_c6a4, align 4
  %v1_c6a8 = load i32, i32* @lr, align 4
  %v2_c6a8 = add i32 %v1_c6a8, 16
  %v3_c6a8 = inttoptr i32 %v2_c6a8 to i32*
  store i32 %v3_c6a4, i32* %v3_c6a8, align 4
  %v3_c6ac = load i32, i32* %stack_var_-44, align 4
  %v1_c6b0 = add i32 %v3_c6ac, 12
  %tmp58 = mul i32 %v1_c6b0, 256
  %v1_c6c0 = and i32 %tmp58, 65280
  %tmp59 = udiv i32 %v1_c6b0, 256
  %v4_c6c4 = urem i32 %tmp59, 256
  %v5_c6c4 = or i32 %v4_c6c4, %v1_c6c0
  store i32 %v5_c6c4, i32* %ip.global-to-local, align 4
  %v1_c6c8 = load i32, i32* @lr, align 4
  %v2_c6c8 = add i32 %v1_c6c8, 28
  %v3_c6c8 = inttoptr i32 %v2_c6c8 to i32*
  store i32 -1, i32* %v3_c6c8, align 4
  store i32 %v4_c6cc, i32* %r2.global-to-local, align 4
  %v0_c6d0 = load i32, i32* @lr, align 4
  %v1_c6d0 = add i32 %v0_c6d0, 20
  store i32 %v1_c6d0, i32* %r4.global-to-local, align 4
  %v0_c6d4 = load i32, i32* %ip.global-to-local, align 4
  %v3_c6d4 = sdiv i32 %v0_c6d4, 256
  store i32 %v3_c6d4, i32* %r3.global-to-local, align 4
  %v0_c6d8 = load i32, i32* @r7, align 4
  %v1_c6d8 = trunc i32 %v0_c6d8 to i8
  %v3_c6d8 = add i32 %v0_c6d0, 4
  %v4_c6d8 = inttoptr i32 %v3_c6d8 to i8*
  store i8 %v1_c6d8, i8* %v4_c6d8, align 1
  %v0_c6dc = load i32, i32* @r6, align 4
  %v1_c6dc = trunc i32 %v0_c6dc to i8
  %v2_c6dc = load i32, i32* @lr, align 4
  %v3_c6dc = add i32 %v2_c6dc, 20
  %v4_c6dc = inttoptr i32 %v3_c6dc to i8*
  store i8 %v1_c6dc, i8* %v4_c6dc, align 1
  %v0_c6e0 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6e0 = trunc i32 %v0_c6e0 to i8
  %v2_c6e0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e0 = add i32 %v2_c6e0, 5
  %v4_c6e0 = inttoptr i32 %v3_c6e0 to i8*
  store i8 %v1_c6e0, i8* %v4_c6e0, align 1
  %v0_c6e4 = load i32, i32* @r5, align 4
  %v1_c6e4 = trunc i32 %v0_c6e4 to i8
  %v2_c6e4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e4 = add i32 %v2_c6e4, 2
  %v4_c6e4 = inttoptr i32 %v3_c6e4 to i8*
  store i8 %v1_c6e4, i8* %v4_c6e4, align 1
  %v0_c6e8 = load i32, i32* %r2.global-to-local, align 4
  %v1_c6e8 = trunc i32 %v0_c6e8 to i8
  %v2_c6e8 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6e8 = add i32 %v2_c6e8, 1
  %v4_c6e8 = inttoptr i32 %v3_c6e8 to i8*
  store i8 %v1_c6e8, i8* %v4_c6e8, align 1
  store i32 %v4_c6ec, i32* %r3.global-to-local, align 4
  %v0_c6f0 = load i32, i32* %ip.global-to-local, align 4
  %v1_c6f0 = trunc i32 %v0_c6f0 to i8
  %v2_c6f0 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f0 = add i32 %v2_c6f0, 4
  %v4_c6f0 = inttoptr i32 %v3_c6f0 to i8*
  store i8 %v1_c6f0, i8* %v4_c6f0, align 1
  %v0_c6f4 = load i32, i32* %r3.global-to-local, align 4
  %v1_c6f4 = trunc i32 %v0_c6f4 to i8
  %v2_c6f4 = load i32, i32* %r4.global-to-local, align 4
  %v3_c6f4 = add i32 %v2_c6f4, 3
  %v4_c6f4 = inttoptr i32 %v3_c6f4 to i8*
  store i8 %v1_c6f4, i8* %v4_c6f4, align 1
  %v0_c6f8 = load i32, i32* %r8.global-to-local, align 4
  %v0_c6fc = load i32, i32* @lr, align 4
  %v1_c6fc = add i32 %v0_c6fc, 32
  %v3_c700 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c700, i32* %r2.global-to-local, align 4
  %v3_c704 = call i32 @function_11590(i32 %v1_c6fc, i32 %v0_c6f8, i32 %v3_c700)
  %v3_c708 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c708, i32* %r3.global-to-local, align 4
  %v1_c70c = add i32 %v3_c708, 1
  store i32 %v1_c70c, i32* @r4, align 4
  %v1_c710 = load i32, i32* %sb.global-to-local, align 4
  %v9_c710 = icmp eq i32 %v1_c70c, %v1_c710
  store i1 %v9_c710, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c70c, i32* %stack_var_-40, align 4
  %v5_c718 = icmp slt i32 %v1_c70c, %v1_c710
  br i1 %v5_c718, label %dec_label_pc_c5f0, label %dec_label_pc_c71c

dec_label_pc_c71c:                                ; preds = %bb57, %dec_label_pc_c57c
  %v0_c71c = phi i32 [ %v0_c598, %dec_label_pc_c57c ], [ %v1_c710, %bb57 ]
  %v2_c71c = icmp eq i32 %v0_c71c, 0
  store i1 %v2_c71c, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  %v3_c764 = icmp eq i32 %v3_c58c, 65535
  br label %dec_label_pc_c724.outer

dec_label_pc_c724.outer:                          ; preds = %dec_label_pc_c834, %dec_label_pc_c71c
  %v1_c724.ph.in = phi i32 [ %v1_c828, %dec_label_pc_c834 ], [ %v0_c71c, %dec_label_pc_c71c ]
  %v0_c724.ph = phi i1 [ %v2_c834, %dec_label_pc_c834 ], [ %v2_c71c, %dec_label_pc_c71c ]
  %v1_c724.ph = icmp slt i32 %v1_c724.ph.in, 0
  %v4_c724 = or i1 %v1_c724.ph, %v0_c724.ph
  br label %dec_label_pc_c724

dec_label_pc_c724:                                ; preds = %dec_label_pc_c724.outer, %dec_label_pc_c724
  br i1 %v4_c724, label %dec_label_pc_c724, label %dec_label_pc_c728

dec_label_pc_c728:                                ; preds = %dec_label_pc_c724
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_c734

dec_label_pc_c734:                                ; preds = %dec_label_pc_c784, %dec_label_pc_c728
  %v1_c748 = phi i32 [ %v1_c824, %dec_label_pc_c784 ], [ 0, %dec_label_pc_c728 ]
  %v5_c738 = mul i32 %v1_c748, 24
  %v1_c73c = load i32, i32* @sl, align 4
  %v2_c73c = add i32 %v1_c73c, %v5_c738
  store i32 %v2_c73c, i32* %r3.global-to-local, align 4
  %v1_c744 = add i32 %v2_c73c, 20
  %v2_c744 = inttoptr i32 %v1_c744 to i8*
  %v3_c744 = load i8, i8* %v2_c744, align 1
  %v4_c744 = zext i8 %v3_c744 to i32
  store i32 %v4_c744, i32* %r2.global-to-local, align 4
  %v4_c748 = mul i32 %v1_c748, 4
  %v5_c748 = add i32 %v4_c748, %v2_c464
  %v6_c748 = inttoptr i32 %v5_c748 to i32*
  %v7_c748 = load i32, i32* %v6_c748, align 4
  store i32 %v7_c748, i32* @r5, align 4
  %v7_c750 = icmp eq i8 %v3_c744, 31
  store i1 %v7_c750, i1* %cpsr_z.global-to-local, align 1
  store i32 65535, i32* %r7.global-to-local, align 4
  %v1_c758 = add i32 %v7_c748, 20
  store i32 %v1_c758, i32* @r6, align 4
  %tmp61 = icmp ult i8 %v3_c744, 32
  br i1 %tmp61, label %dec_label_pc_c840, label %dec_label_pc_c760

dec_label_pc_c760:                                ; preds = %dec_label_pc_c734
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  store i1 %v3_c764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_c764, label %dec_label_pc_c8a8, label %dec_label_pc_c76c

dec_label_pc_c76c:                                ; preds = %dec_label_pc_c840.dec_label_pc_c76c_crit_edge, %dec_label_pc_c760
  %v1_c770 = phi i32 [ %v1_c770.pre, %dec_label_pc_c840.dec_label_pc_c76c_crit_edge ], [ 65535, %dec_label_pc_c760 ]
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v9_c770 = icmp eq i32 %v3_c590, %v1_c770
  store i1 %v9_c770, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c770, label %dec_label_pc_c8c4, label %dec_label_pc_c778

dec_label_pc_c778:                                ; preds = %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge, %dec_label_pc_c76c
  %v1_c77c = phi i32 [ %v1_c77c.pre, %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge ], [ %v1_c770, %dec_label_pc_c76c ]
  %v9_c77c = icmp eq i32 %v3_c594, %v1_c77c
  store i1 %v9_c77c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_c77c, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c784:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778, %dec_label_pc_c8e0
  %v0_c788 = load i32, i32* %r8.global-to-local, align 4
  %v1_c788 = trunc i32 %v0_c788 to i8
  %v2_c788 = load i32, i32* @r5, align 4
  %v3_c788 = add i32 %v2_c788, 10
  %v4_c788 = inttoptr i32 %v3_c788 to i8*
  store i8 %v1_c788, i8* %v4_c788, align 1
  %v0_c78c = load i32, i32* %r8.global-to-local, align 4
  %v1_c78c = trunc i32 %v0_c78c to i8
  %v2_c78c = load i32, i32* @r5, align 4
  %v3_c78c = add i32 %v2_c78c, 11
  %v4_c78c = inttoptr i32 %v3_c78c to i8*
  store i8 %v1_c78c, i8* %v4_c78c, align 1
  %v0_c790 = load i32, i32* @r5, align 4
  store i32 %v0_c790, i32* @r0, align 4
  %v2_c794 = call i32 @function_d0b8(i32 %v0_c790, i32 20)
  %v3_c794 = trunc i32 %v2_c794 to i8
  %v4_c798 = sdiv i32 %v2_c794, 256
  store i32 %v4_c798, i32* %r3.global-to-local, align 4
  %v1_c79c = trunc i32 %v4_c798 to i8
  %v2_c79c = load i32, i32* @r5, align 4
  %v3_c79c = add i32 %v2_c79c, 11
  %v4_c79c = inttoptr i32 %v3_c79c to i8*
  store i8 %v1_c79c, i8* %v4_c79c, align 1
  %v3_c7a0 = load i32, i32* @r5, align 4
  %v4_c7a0 = add i32 %v3_c7a0, 10
  %v5_c7a0 = inttoptr i32 %v4_c7a0 to i8*
  store i8 %v3_c794, i8* %v5_c7a0, align 1
  %v0_c7a4 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a4 = trunc i32 %v0_c7a4 to i8
  %v2_c7a4 = load i32, i32* @r6, align 4
  %v3_c7a4 = add i32 %v2_c7a4, 6
  %v4_c7a4 = inttoptr i32 %v3_c7a4 to i8*
  store i8 %v1_c7a4, i8* %v4_c7a4, align 1
  %v0_c7a8 = load i32, i32* %r8.global-to-local, align 4
  %v1_c7a8 = trunc i32 %v0_c7a8 to i8
  %v2_c7a8 = load i32, i32* @r6, align 4
  %v3_c7a8 = add i32 %v2_c7a8, 7
  %v4_c7a8 = inttoptr i32 %v3_c7a8 to i8*
  store i8 %v1_c7a8, i8* %v4_c7a8, align 1
  %v0_c7ac = load i32, i32* @r5, align 4
  %v1_c7ac = add i32 %v0_c7ac, 24
  %v2_c7ac = inttoptr i32 %v1_c7ac to i8*
  %v3_c7ac = load i8, i8* %v2_c7ac, align 1
  %v4_c7ac = zext i8 %v3_c7ac to i32
  store i32 %v4_c7ac, i32* %r3.global-to-local, align 4
  %v1_c7b0 = add i32 %v0_c7ac, 25
  %v2_c7b0 = inttoptr i32 %v1_c7b0 to i8*
  %v3_c7b0 = load i8, i8* %v2_c7b0, align 1
  %v4_c7b0 = zext i8 %v3_c7b0 to i32
  %v4_c7b4 = mul nuw nsw i32 %v4_c7b0, 256
  %v5_c7b4 = or i32 %v4_c7b4, %v4_c7ac
  store i32 %v5_c7b4, i32* %r2.global-to-local, align 4
  %v3_c7b8 = load i32, i32* %stack_var_-44, align 4
  %v0_c7bc = load i32, i32* @r6, align 4
  store i32 %v0_c7bc, i32* @r1, align 4
  %v1_c7c0 = add i32 %v3_c7b8, 12
  store i32 %v1_c7c0, i32* %r3.global-to-local, align 4
  %v4_c7c8 = call i32 @function_d114(i32 %v0_c7ac, i32 %v0_c7bc, i32 %v5_c7b4, i32 %v1_c7c0)
  %v5_c7c8 = trunc i32 %v4_c7c8 to i8
  %v4_c7cc24 = udiv i32 %v4_c7c8, 256
  %v1_c7d0 = trunc i32 %v4_c7cc24 to i8
  %v2_c7d0 = load i32, i32* @r6, align 4
  %v3_c7d0 = add i32 %v2_c7d0, 7
  %v4_c7d0 = inttoptr i32 %v3_c7d0 to i8*
  store i8 %v1_c7d0, i8* %v4_c7d0, align 1
  %v3_c7d4 = load i32, i32* @r6, align 4
  %v4_c7d4 = add i32 %v3_c7d4, 6
  %v5_c7d4 = inttoptr i32 %v4_c7d4 to i8*
  store i8 %v5_c7c8, i8* %v5_c7d4, align 1
  %v3_c7d8 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c7d8, i32* %r3.global-to-local, align 4
  %v0_c7dc = load i32, i32* @r5, align 4
  %v1_c7dc = add i32 %v0_c7dc, 20
  %v2_c7dc = inttoptr i32 %v1_c7dc to i32*
  %v3_c7dc = load i32, i32* %v2_c7dc, align 4
  %v5_c7e4 = mul i32 %v3_c7d8, 24
  %v1_c7e8 = load i32, i32* @sl, align 4
  %v2_c7e8 = add i32 %v1_c7e8, %v5_c7e4
  store i32 %v2_c7e8, i32* %ip.global-to-local, align 4
  %v3_c7ec = udiv i32 %v3_c7dc, 65536
  store i32 %v3_c7ec, i32* %r2.global-to-local, align 4
  %v1_c7f0 = trunc i32 %v3_c7ec to i8
  %v3_c7f0 = add i32 %v2_c7e8, 2
  %v4_c7f0 = inttoptr i32 %v3_c7f0 to i8*
  store i8 %v1_c7f0, i8* %v4_c7f0, align 1
  %v0_c7f4 = load i32, i32* %r2.global-to-local, align 4
  %v3_c7f425 = udiv i32 %v0_c7f4, 256
  %v3_c7f8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_c7f8, i32* %r2.global-to-local, align 4
  %v1_c7fc = trunc i32 %v3_c7f425 to i8
  %v2_c7fc = load i32, i32* %ip.global-to-local, align 4
  %v3_c7fc = add i32 %v2_c7fc, 3
  %v4_c7fc = inttoptr i32 %v3_c7fc to i8*
  store i8 %v1_c7fc, i8* %v4_c7fc, align 1
  %v0_c800 = load i32, i32* @r5, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_c808 = load i32, i32* %r2.global-to-local, align 4
  %v1_c808 = add i32 %v0_c808, 32
  store i32 %v1_c808, i32* %r2.global-to-local, align 4
  %v0_c80c = load i32, i32* %fp.global-to-local, align 4
  store i32 16, i32* @r4, align 4
  %v0_c814 = load i32, i32* %ip.global-to-local, align 4
  %v6_c81c = inttoptr i32 %v0_c800 to i32*
  %v7_c81c = call i32 @function_126c8(i32 %v0_c80c, i32* %v6_c81c, i32 %v1_c808, i32 16384, i32 %v0_c814, i32 16)
  %v3_c820 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_c820, i32* %r3.global-to-local, align 4
  %v1_c824 = add i32 %v3_c820, 1
  %v1_c828 = load i32, i32* %sb.global-to-local, align 4
  %v9_c828 = icmp eq i32 %v1_c824, %v1_c828
  store i1 %v9_c828, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_c824, i32* %stack_var_-40, align 4
  %v5_c830 = icmp slt i32 %v1_c824, %v1_c828
  br i1 %v5_c830, label %dec_label_pc_c734, label %dec_label_pc_c834

dec_label_pc_c834:                                ; preds = %dec_label_pc_c784
  %v2_c834 = icmp eq i32 %v1_c828, 0
  store i1 %v2_c834, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_c724.outer

dec_label_pc_c840:                                ; preds = %dec_label_pc_c734
  %v1_c840 = add i32 %v2_c73c, 16
  %v2_c840 = inttoptr i32 %v1_c840 to i32*
  %v3_c840 = load i32, i32* %v2_c840, align 4
  store i32 %v3_c840, i32* @r4, align 4
  %v0_c844 = call i32 @function_ebc8()
  %v3_c848 = load i32, i32* %stack_var_-40, align 4
  %v5_c850 = mul i32 %v3_c848, 24
  %v0_c854 = load i32, i32* @r4, align 4
  %v1_c858 = and i32 %v0_c854, 65280
  store i32 %v1_c858, i32* %r3.global-to-local, align 4
  %v1_c854 = udiv i32 %v0_c854, 256
  %v3_c85c = and i32 %v1_c854, 65280
  store i32 %v3_c85c, i32* %r2.global-to-local, align 4
  %v1_c860 = load i32, i32* @sl, align 4
  %v2_c860 = add i32 %v1_c860, %v5_c850
  store i32 %v2_c860, i32* %ip.global-to-local, align 4
  %v1_c86c = add i32 %v2_c860, 20
  %v2_c86c = inttoptr i32 %v1_c86c to i8*
  %v3_c86c = load i8, i8* %v2_c86c, align 1
  %v4_c86c = zext i8 %v3_c86c to i32
  %v2_c874 = call i32 @llvm.bswap.i32(i32 %v0_c854)
  %v7_c878 = lshr i32 %v0_c844, %v4_c86c
  %v8_c878 = add i32 %v7_c878, %v2_c874
  store i32 %v3_c58c, i32* %r2.global-to-local, align 4
  %v2_c898 = call i32 @llvm.bswap.i32(i32 %v8_c878)
  store i32 %v2_c898, i32* %r3.global-to-local, align 4
  %v1_c89c = load i32, i32* %r7.global-to-local, align 4
  %v9_c89c = icmp eq i32 %v3_c58c, %v1_c89c
  store i1 %v9_c89c, i1* %cpsr_z.global-to-local, align 1
  %v1_c8a0 = load i32, i32* @r5, align 4
  %v2_c8a0 = add i32 %v1_c8a0, 16
  %v3_c8a0 = inttoptr i32 %v2_c8a0 to i32*
  store i32 %v2_c898, i32* %v3_c8a0, align 4
  br i1 %v9_c89c, label %dec_label_pc_c8a8, label %dec_label_pc_c840.dec_label_pc_c76c_crit_edge

dec_label_pc_c840.dec_label_pc_c76c_crit_edge:    ; preds = %dec_label_pc_c840
  %v1_c770.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c76c

dec_label_pc_c8a8:                                ; preds = %dec_label_pc_c840, %dec_label_pc_c760
  %v0_c8a8 = call i32 @function_ebc8()
  %v1_c8a8 = trunc i32 %v0_c8a8 to i8
  %v4_c8ac26 = udiv i32 %v0_c8a8, 256
  %v1_c8b0 = trunc i32 %v4_c8ac26 to i8
  %v2_c8b0 = load i32, i32* @r5, align 4
  %v3_c8b0 = add i32 %v2_c8b0, 5
  %v4_c8b0 = inttoptr i32 %v3_c8b0 to i8*
  store i8 %v1_c8b0, i8* %v4_c8b0, align 1
  store i32 %v3_c590, i32* %r3.global-to-local, align 4
  %v1_c8b8 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8b8 = icmp eq i32 %v3_c590, %v1_c8b8
  store i1 %v9_c8b8, i1* %cpsr_z.global-to-local, align 1
  %v3_c8bc = load i32, i32* @r5, align 4
  %v4_c8bc = add i32 %v3_c8bc, 4
  %v5_c8bc = inttoptr i32 %v4_c8bc to i8*
  store i8 %v1_c8a8, i8* %v5_c8bc, align 1
  %v0_c8c0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8c0, label %dec_label_pc_c8c4, label %dec_label_pc_c8a8.dec_label_pc_c778_crit_edge

dec_label_pc_c8a8.dec_label_pc_c778_crit_edge:    ; preds = %dec_label_pc_c8a8
  %v1_c77c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_c778

dec_label_pc_c8c4:                                ; preds = %dec_label_pc_c8a8, %dec_label_pc_c76c
  %v0_c8c4 = call i32 @function_ebc8()
  %v1_c8c4 = trunc i32 %v0_c8c4 to i8
  %v4_c8cc = sdiv i32 %v0_c8c4, 256
  store i32 %v4_c8cc, i32* %r3.global-to-local, align 4
  %v1_c8d0 = load i32, i32* %r7.global-to-local, align 4
  %v9_c8d0 = icmp eq i32 %v3_c594, %v1_c8d0
  store i1 %v9_c8d0, i1* %cpsr_z.global-to-local, align 1
  %v3_c8d4 = load i32, i32* @r5, align 4
  %v4_c8d4 = add i32 %v3_c8d4, 20
  %v5_c8d4 = inttoptr i32 %v4_c8d4 to i8*
  store i8 %v1_c8c4, i8* %v5_c8d4, align 1
  %v0_c8d8 = load i32, i32* %r3.global-to-local, align 4
  %v1_c8d8 = trunc i32 %v0_c8d8 to i8
  %v2_c8d8 = load i32, i32* @r6, align 4
  %v3_c8d8 = add i32 %v2_c8d8, 1
  %v4_c8d8 = inttoptr i32 %v3_c8d8 to i8*
  store i8 %v1_c8d8, i8* %v4_c8d8, align 1
  %v0_c8dc = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_c8dc, label %dec_label_pc_c8e0, label %dec_label_pc_c784

dec_label_pc_c8e0:                                ; preds = %dec_label_pc_c8c4, %dec_label_pc_c778
  %v0_c8e0 = call i32 @function_ebc8()
  %v1_c8e0 = trunc i32 %v0_c8e0 to i8
  %v4_c8e4 = sdiv i32 %v0_c8e0, 256
  store i32 %v4_c8e4, i32* %r3.global-to-local, align 4
  %v1_c8e8 = trunc i32 %v4_c8e4 to i8
  %v2_c8e8 = load i32, i32* @r6, align 4
  %v3_c8e8 = add i32 %v2_c8e8, 3
  %v4_c8e8 = inttoptr i32 %v3_c8e8 to i8*
  store i8 %v1_c8e8, i8* %v4_c8e8, align 1
  %v3_c8ec = load i32, i32* @r6, align 4
  %v4_c8ec = add i32 %v3_c8ec, 2
  %v5_c8ec = inttoptr i32 %v4_c8ec to i8*
  store i8 %v1_c8e0, i8* %v5_c8ec, align 1
  br label %dec_label_pc_c784

dec_label_pc_c8f4:                                ; preds = %dec_label_pc_c554
  %v0_c8f4 = load i32, i32* %fp.global-to-local, align 4
  %v1_c8f8 = call i32 @function_11e18(i32 %v0_c8f4)
  br label %dec_label_pc_c8fc

dec_label_pc_c8fc:                                ; preds = %dec_label_pc_c444, %dec_label_pc_c8f4
  %v29_c900 = phi i32 [ %v3_c544, %dec_label_pc_c444 ], [ %v1_c8f8, %dec_label_pc_c8f4 ]
  store i32 %v3_c444, i32* %r4.global-to-local, align 4
  store i32 %v12_c444, i32* %r7.global-to-local, align 4
  ret i32 %v29_c900

; uselistorder directives
  uselistorder i32 %v4_c8e4, { 1, 0 }
  uselistorder i32 %v2_c898, { 1, 0 }
  uselistorder i32 %v0_c854, { 1, 0, 2 }
  uselistorder i1 %v2_c834, { 1, 0 }
  uselistorder i32 %v1_c828, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c824, { 2, 0, 3, 1 }
  uselistorder i32 %v3_c7ec, { 1, 0 }
  uselistorder i32 %v4_c798, { 1, 0 }
  uselistorder i1 %v3_c764, { 1, 0 }
  uselistorder i32 %v1_c70c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_c6b0, { 1, 0 }
  uselistorder i32 %v1_c638, { 1, 0 }
  uselistorder i32 %v1_c5b8, { 1, 0 }
  uselistorder i32 %v1_c5b4, { 1, 0 }
  uselistorder i32 %v0_c584, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_c57c, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_c574, { 1, 0 }
  uselistorder i1 %v7_c548, { 1, 0 }
  uselistorder i32 %v3_c544, { 1, 2, 3, 0 }
  uselistorder i32 %v1_c4e4, { 1, 2, 0 }
  uselistorder i32 %v6_c4b8, { 2, 1, 3, 0 }
  uselistorder i32 %v6_c47c, { 1, 2, 0 }
  uselistorder i32 %v1_c448, { 1, 0 }
  uselistorder i32* %stack_var_-44, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %stack_var_-40, { 2, 3, 4, 5, 6, 7, 8, 9, 0, 10, 11, 1, 13, 12 }
  uselistorder i32* %r7.global-to-local, { 6, 2, 1, 3, 0, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 6, 0, 1, 2, 3, 4, 5 }
  uselistorder i32* %r3.global-to-local, { 39, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 9, 8, 10, 0, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i32* %fp.global-to-local, { 1, 0, 2 }
  uselistorder label %dec_label_pc_c8fc, { 1, 0 }
  uselistorder label %dec_label_pc_c784, { 2, 0, 1 }
  uselistorder label %dec_label_pc_c724, { 1, 0 }
  uselistorder label %bb57, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_c908(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_c908:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg4, i32* %r3.global-to-local, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-2120 = alloca i32, align 4
  %v3_c908 = load i32, i32* @r4, align 4
  %v15_c908 = load i32, i32* @r8, align 4
  %v18_c908 = load i32, i32* @sb, align 4
  %v21_c908 = load i32, i32* @sl, align 4
  %v24_c908 = load i32, i32* @fp, align 4
  %v1_c914 = urem i32 %arg1, 256
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_c920 = urem i32 %arg3, 256
  store i32 %v1_c920, i32* @r4, align 4
  store i32 %arg4, i32* @r5, align 4
  %v2_c92c = call i32 @function_12a18(i32 %v1_c914, i32 4)
  %v0_c930 = load i32, i32* @r5, align 4
  store i32 %v0_c930, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_c93c = load i32, i32* @r4, align 4
  store i32 %v0_c93c, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v5_c944 = inttoptr i32 %v0_c930 to i32*
  %v6_c944 = call i32 @function_85e0(i32 %v0_c93c, i32* %v5_c944, i32 2, i32 0, i32 %v2_c92c)
  %v1_c950 = urem i32 %v6_c944, 256
  store i32 %v1_c950, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_c95c = load i32, i32* @r4, align 4
  store i32 %v0_c95c, i32* %r0.global-to-local, align 4
  %v0_c960 = load i32, i32* @r5, align 4
  store i32 %v0_c960, i32* %r1.global-to-local, align 4
  %v5_c964 = trunc i32 %v6_c944 to i8
  %v6_c968 = inttoptr i32 %v0_c960 to i32*
  %v7_c968 = call i32 @function_85e0(i32 %v0_c95c, i32* %v6_c968, i32 3, i32 65535, i32 %v6_c944)
  %v0_c96c = load i32, i32* @r5, align 4
  store i32 %v0_c96c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v0_c978 = load i32, i32* @r4, align 4
  store i32 %v0_c978, i32* %r0.global-to-local, align 4
  store i32 64, i32* %r3.global-to-local, align 4
  %v5_c980 = inttoptr i32 %v0_c96c to i32*
  %v6_c980 = call i32 @function_85e0(i32 %v0_c978, i32* %v5_c980, i32 4, i32 64, i32 %v7_c968)
  %v1_c988 = urem i32 %v6_c980, 256
  store i32 %v1_c988, i32* %ip.global-to-local, align 4
  %v0_c98c = load i32, i32* @r5, align 4
  store i32 %v0_c98c, i32* %r1.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_c998 = load i32, i32* @r4, align 4
  store i32 %v0_c998, i32* %r0.global-to-local, align 4
  %sext35 = mul i32 %v6_c980, 16777216
  %v5_c9a0 = sdiv i32 %sext35, 16777216
  %v6_c9a0 = inttoptr i32 %v0_c98c to i32*
  %v7_c9a0 = call i32 @function_85e0(i32 %v0_c998, i32* %v6_c9a0, i32 5, i32 0, i32 %v5_c9a0)
  %v1_c9ac = urem i32 %v7_c9a0, 256
  store i32 %v1_c9ac, i32* %ip.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v0_c9b8 = load i32, i32* @r4, align 4
  store i32 %v0_c9b8, i32* %r0.global-to-local, align 4
  %v0_c9bc = load i32, i32* @r5, align 4
  store i32 %v0_c9bc, i32* %r1.global-to-local, align 4
  %v5_c9c4 = inttoptr i32 %v0_c9bc to i32*
  %v6_c9c4 = call i32 @function_85e0(i32 %v0_c9b8, i32* %v5_c9c4, i32 6, i32 65535, i32 %v1_c9ac)
  %v0_c9c8 = load i32, i32* @r5, align 4
  store i32 %v0_c9c8, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  store i32 53, i32* %r3.global-to-local, align 4
  store i32 %v6_c9c4, i32* %fp.global-to-local, align 4
  %v0_c9d8 = load i32, i32* @r4, align 4
  store i32 %v0_c9d8, i32* %r0.global-to-local, align 4
  %v5_c9dc = inttoptr i32 %v0_c9c8 to i32*
  %v6_c9dc = call i32 @function_85e0(i32 %v0_c9d8, i32* %v5_c9dc, i32 7, i32 53, i32 ptrtoint (i32* @0 to i32))
  %v0_c9e4 = load i32, i32* @r5, align 4
  store i32 %v0_c9e4, i32* %r1.global-to-local, align 4
  store i32 65535, i32* %r3.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  store i32 %v6_c9dc, i32* %sb.global-to-local, align 4
  %v0_c9f4 = load i32, i32* @r4, align 4
  store i32 %v0_c9f4, i32* %r0.global-to-local, align 4
  %v5_c9f8 = inttoptr i32 %v0_c9e4 to i32*
  %v6_c9f8 = call i32 @function_85e0(i32 %v0_c9f4, i32* %v5_c9f8, i32 9, i32 65535, i32 ptrtoint (i32* @0 to i32))
  %v0_c9fc = load i32, i32* @r5, align 4
  store i32 %v0_c9fc, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 12, i32* %r3.global-to-local, align 4
  store i32 %v6_c9f8, i32* @sl, align 4
  %v0_ca0c = load i32, i32* @r4, align 4
  store i32 %v0_ca0c, i32* %r0.global-to-local, align 4
  %v5_ca10 = inttoptr i32 %v0_c9fc to i32*
  %v6_ca10 = call i32 @function_85e0(i32 %v0_ca0c, i32* %v5_ca10, i32 0, i32 12, i32 ptrtoint (i32* @0 to i32))
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v0_ca1c = load i32, i32* @r5, align 4
  store i32 %v0_ca1c, i32* %r1.global-to-local, align 4
  store i32 %v6_ca10, i32* %r8.global-to-local, align 4
  %v0_ca24 = load i32, i32* @r4, align 4
  store i32 %v0_ca24, i32* %r0.global-to-local, align 4
  %v4_ca28 = inttoptr i32 %v0_ca1c to i32*
  %v5_ca28 = call i32 @function_81cc(i32 %v0_ca24, i32* %v4_ca28, i32 8, i32 0)
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca34 = call i32 @function_10e50(i32 26)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v3_ca40 = call i32 @function_10d6c(i32 26, i32* null)
  store i32 %v3_ca40, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_ca48 = inttoptr i32 %v3_ca40 to i8*
  %v3_ca48 = call i32 @function_11f44(i8* %v2_ca48, i32 0)
  store i32 %v3_ca48, i32* @r4, align 4
  store i32 26, i32* %r0.global-to-local, align 4
  %v1_ca54 = call i32 @function_10d98(i32 26)
  store i32 %v1_ca54, i32* %r0.global-to-local, align 4
  %v0_ca58 = load i32, i32* @r4, align 4
  %v1_ca58 = icmp slt i32 %v0_ca58, 0
  %v2_ca58 = icmp eq i32 %v0_ca58, 0
  store i1 %v2_ca58, i1* %cpsr_z.global-to-local, align 1
  br i1 %v1_ca58, label %dec_label_pc_d024, label %dec_label_pc_ca60

dec_label_pc_ca60:                                ; preds = %dec_label_pc_c908
  %v2_ca64 = ptrtoint i32* %stack_var_-2120 to i32
  store i32 %v2_ca64, i32* @r6, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r1.global-to-local, align 4
  store i32 %v0_ca58, i32* %r0.global-to-local, align 4
  %v4_ca74 = call i32 @function_11fe0(i32 %v0_ca58, i32* nonnull %stack_var_-2120, i32 2048)
  store i32 %v4_ca74, i32* @r5, align 4
  %v0_ca7c = load i32, i32* @r4, align 4
  store i32 %v0_ca7c, i32* %r0.global-to-local, align 4
  %v1_ca80 = call i32 @function_11e18(i32 %v0_ca7c)
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_ca88 = call i32 @function_10e50(i32 27)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v3_ca94 = call i32 @function_10d6c(i32 27, i32* null)
  %v0_ca98 = load i32, i32* @r5, align 4
  store i32 %v0_ca98, i32* @r1, align 4
  store i32 %v3_ca94, i32* %r2.global-to-local, align 4
  store i32 %v2_ca64, i32* %r0.global-to-local, align 4
  %v3_caa4 = bitcast i32* %stack_var_-2120 to i8*
  %v4_caa4 = call i32 @function_11868(i8* %v3_caa4, i32 %v0_ca98, i32 %v3_ca94)
  store i32 %v4_caa4, i32* @r4, align 4
  store i32 27, i32* %r0.global-to-local, align 4
  %v1_cab0 = call i32 @function_10d98(i32 27)
  store i32 %v1_cab0, i32* %r0.global-to-local, align 4
  %v0_cab4 = load i32, i32* @r4, align 4
  %v7_cab4 = icmp eq i32 %v0_cab4, -1
  store i1 %v7_cab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cab4, label %dec_label_pc_d024, label %dec_label_pc_cabc

dec_label_pc_cabc:                                ; preds = %dec_label_pc_ca60
  %v0_cabc = load i32, i32* @r5, align 4
  %v9_cabc = icmp eq i32 %v0_cabc, %v0_cab4
  store i1 %v9_cabc, i1* %cpsr_z.global-to-local, align 1
  %v7_cac0 = icmp sgt i32 %v0_cabc, %v0_cab4
  br i1 %v7_cac0, label %dec_label_pc_cac4, label %dec_label_pc_d024

dec_label_pc_cac4:                                ; preds = %dec_label_pc_cabc
  store i32 %v0_cabc, i32* %r3.global-to-local, align 4
  store i32 %v0_cab4, i32* %r2.global-to-local, align 4
  %v0_cad4 = load i32, i32* @r6, align 4
  %v2_cad4 = add i32 %v0_cad4, %v0_cab4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_cadc = ptrtoint i32* %stack_var_-72 to i32
  store i32 %v2_cadc, i32* @r7, align 4
  %v1_cb0c = add i32 %v0_cabc, -1
  br label %dec_label_pc_cb04

dec_label_pc_cae8:                                ; preds = %dec_label_pc_cb2c, %bb138
  %v9_cae8 = icmp eq i32 %v0_caf4, %v1_cb0c
  store i1 %v9_cae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cae8, label %dec_label_pc_cb38, label %dec_label_pc_caf0

dec_label_pc_caf0:                                ; preds = %dec_label_pc_cb1c, %dec_label_pc_cae8, %bb
  %v0_cb2842 = phi i32 [ %v0_cb28, %dec_label_pc_cb1c ], [ %v0_cb2843, %dec_label_pc_cae8 ], [ %v0_cb28, %bb ]
  %v0_cb0838 = phi i32 [ 0, %dec_label_pc_cb1c ], [ %v0_cb0839, %dec_label_pc_cae8 ], [ 0, %bb ]
  store i32 %v0_cabc, i32* %r0.global-to-local, align 4
  %v1_caf4 = add i32 %v0_caf4, 1
  store i32 %v1_caf4, i32* %r2.global-to-local, align 4
  %v9_caf8 = icmp eq i32 %v0_cabc, %v1_caf4
  store i1 %v9_caf8, i1* %cpsr_z.global-to-local, align 1
  %v1_cafc = add i32 %v0_cafc, 1
  store i32 %v1_cafc, i32* @r7, align 4
  br i1 %v9_caf8, label %dec_label_pc_d024, label %dec_label_pc_cb04

dec_label_pc_cb04:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cac4
  %v0_cafc = phi i32 [ %v1_cafc, %dec_label_pc_caf0 ], [ %v2_cadc, %dec_label_pc_cac4 ]
  %v0_caf4 = phi i32 [ %v1_caf4, %dec_label_pc_caf0 ], [ %v0_cab4, %dec_label_pc_cac4 ]
  %v0_cb28 = phi i32 [ %v0_cb2842, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb08 = phi i32 [ %v0_cb0838, %dec_label_pc_caf0 ], [ 0, %dec_label_pc_cac4 ]
  %v0_cb10 = phi i32 [ %v1_cb10, %dec_label_pc_caf0 ], [ %v2_cad4, %dec_label_pc_cac4 ]
  %v1_cb04 = inttoptr i32 %v0_cb10 to i8*
  %v2_cb04 = load i8, i8* %v1_cb04, align 1
  %v3_cb04 = zext i8 %v2_cb04 to i32
  store i32 %v3_cb04, i32* %r3.global-to-local, align 4
  %v2_cb08 = icmp eq i32 %v0_cb08, 0
  store i1 %v2_cb08, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cb0c, i32* %ip.global-to-local, align 4
  %v1_cb10 = add i32 %v0_cb10, 1
  store i32 %v1_cb10, i32* %r1.global-to-local, align 4
  %v1_cb14 = add nsw i32 %v3_cb04, -48
  store i32 %v1_cb14, i32* %r0.global-to-local, align 4
  br i1 %v2_cb08, label %dec_label_pc_cb1c, label %dec_label_pc_cb2c

dec_label_pc_cb1c:                                ; preds = %dec_label_pc_cb04
  %v7_cb1c = icmp eq i8 %v2_cb04, 9
  store i1 %v7_cb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb1c, label %dec_label_pc_caf0, label %bb

bb:                                               ; preds = %dec_label_pc_cb1c
  %v8_cb20 = icmp eq i8 %v2_cb04, 32
  store i1 %v8_cb20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_cb20, label %dec_label_pc_caf0, label %dec_label_pc_cb28

dec_label_pc_cb28:                                ; preds = %bb
  %v1_cb28 = add i32 %v0_cb28, 1
  store i32 %v1_cb28, i32* %lr.global-to-local, align 4
  br label %dec_label_pc_cb2c

dec_label_pc_cb2c:                                ; preds = %dec_label_pc_cb04, %dec_label_pc_cb28
  %v0_cb2843 = phi i32 [ %v0_cb28, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v0_cb0839 = phi i32 [ %v0_cb08, %dec_label_pc_cb04 ], [ %v1_cb28, %dec_label_pc_cb28 ]
  %v7_cb2c = icmp eq i8 %v2_cb04, 46
  store i1 %v7_cb2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb2c, label %dec_label_pc_cae8, label %bb138

bb138:                                            ; preds = %dec_label_pc_cb2c
  %v8_cb30 = icmp eq i32 %v1_cb14, 9
  store i1 %v8_cb30, i1* %cpsr_z.global-to-local, align 1
  %tmp = icmp ult i32 %v1_cb14, 10
  br i1 %tmp, label %dec_label_pc_cae8, label %dec_label_pc_cb38

dec_label_pc_cb38:                                ; preds = %dec_label_pc_cae8, %bb138
  %v0_caf4.lcssa = phi i32 [ %v1_cb0c, %dec_label_pc_cae8 ], [ %v0_caf4, %bb138 ]
  %v2_cb3c = sub i32 %v0_caf4.lcssa, %v0_cab4
  store i32 %v2_cb3c, i32* %r2.global-to-local, align 4
  store i32 %v2_cad4, i32* %r1.global-to-local, align 4
  store i32 %v2_cadc, i32* %r0.global-to-local, align 4
  %v3_cb48 = call i32 @function_11590(i32 %v2_cadc, i32 %v2_cad4, i32 %v2_cb3c)
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 %v2_cadc, i32* @r0, align 4
  %v2_cb58 = load i32, i32* @r7, align 4
  %v3_cb58 = inttoptr i32 %v2_cb58 to i8*
  store i8 0, i8* %v3_cb58, align 1
  %v1_cb5c = call i32 @function_1250c(i32 %v2_cadc)
  store i32 %v1_cb5c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_cb6419:                              ; preds = %dec_label_pc_d024
  unreachable

dec_label_pc_cb64:                                ; preds = %dec_label_pc_d09c, %dec_label_pc_d08c, %dec_label_pc_d080, %dec_label_pc_d06c, %dec_label_pc_cb38
  %v29_d06874 = phi i32 [ %v1_d028, %dec_label_pc_d09c ], [ %v1_d028, %dec_label_pc_d08c ], [ %v1_d028, %dec_label_pc_d080 ], [ %v1_d028, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  %stack_var_-2176.0 = phi i32 [ 33686020, %dec_label_pc_d09c ], [ 104859200, %dec_label_pc_d08c ], [ 707416650, %dec_label_pc_d080 ], [ 134744072, %dec_label_pc_d06c ], [ %v1_cb5c, %dec_label_pc_cb38 ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_cb68 = icmp eq i32 %v5_ca28, 0
  store i1 %v2_cb68, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_cb68, label %dec_label_pc_d060, label %dec_label_pc_cb70

dec_label_pc_cb70:                                ; preds = %dec_label_pc_cb64
  store i32 %v5_ca28, i32* %r0.global-to-local, align 4
  %v1_cb74 = inttoptr i32 %v5_ca28 to i8*
  %v2_cb74 = call i32 @function_11514(i8* %v1_cb74)
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_cb88 = call i32 @function_1272c(i32 2, i32 3, i32 17)
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v7_cb8c = icmp eq i32 %v3_cb88, -1
  store i1 %v7_cb8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cb8c, label %dec_label_pc_d060, label %dec_label_pc_cb98

dec_label_pc_cb98:                                ; preds = %dec_label_pc_cb70
  store i32 1, i32* %stack_var_-40, align 4
  %v6_cba4 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %v6_cba4, i32* %r3.global-to-local, align 4
  store i32 4, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v6_cbb8 = call i32 @function_126fc(i32 %v3_cb88, i32 0, i32 3, i32* nonnull %stack_var_-40, i32 4)
  store i32 %v6_cbb8, i32* %r0.global-to-local, align 4
  %v7_cbbc = icmp eq i32 %v6_cbb8, -1
  store i1 %v7_cbbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_cbbc, label %dec_label_pc_d058, label %dec_label_pc_cbc4

dec_label_pc_cbc4:                                ; preds = %dec_label_pc_cb98
  store i32 %v1_c914, i32* %r0.global-to-local, align 4
  %v3_cbcc = mul i32 %v7_c968, 65536
  store i32 %v3_cbcc, i32* %lr.global-to-local, align 4
  %v0_cbd0 = load i32, i32* @sl, align 4
  %v3_cbd0 = mul i32 %v0_cbd0, 65536
  store i32 %v3_cbd0, i32* %sl.global-to-local, align 4
  %v0_cbd4 = load i32, i32* %r8.global-to-local, align 4
  %v0_cbd8 = load i32, i32* %fp.global-to-local, align 4
  %v0_cbdc = load i32, i32* %sb.global-to-local, align 4
  %v3_cbdc = mul i32 %v0_cbdc, 65536
  store i32 %v3_cbdc, i32* %sb.global-to-local, align 4
  %v5_cbe0 = trunc i32 %v0_cbd4 to i8
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_cbe8 = urem i32 %v7_c968, 65536
  store i32 %v3_cbe8, i32* %r2.global-to-local, align 4
  %v3_cbec = urem i32 %v0_cbd8, 65536
  store i32 %v3_cbec, i32* %r3.global-to-local, align 4
  %v3_cbf0 = urem i32 %v0_cbdc, 65536
  store i32 %v3_cbf0, i32* %r4.global-to-local, align 4
  %v3_cbf4 = urem i32 %v0_cbd0, 65536
  store i32 %v3_cbf4, i32* %r8.global-to-local, align 4
  %v2_cbf8 = icmp eq i32 %v1_c914, 0
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  store i32 0, i32* %stack_var_-40, align 4
  br i1 %v2_cbf8, label %dec_label_pc_d048, label %dec_label_pc_cc1c

dec_label_pc_cc1c:                                ; preds = %dec_label_pc_cbc4
  %v4_cc20 = sext i8 %v5_cbe0 to i32
  %v2_cc24 = add i32 %v4_cc20, %v2_cb74
  store i32 %v2_cc24, i32* @fp, align 4
  %v3_cc28 = mul i32 %v2_cc24, 65536
  %v1_cc2c = add i32 %v3_cc28, 1769472
  store i32 %v1_cc2c, i32* @r6, align 4
  %v1_cc30 = add i32 %v3_cc28, 3080192
  %v1_cc44 = urem i32 %v0_cbd0, 256
  %v3_cc54 = udiv i32 %v1_cc2c, 256
  %v1_cc58 = urem i32 %v7_c968, 256
  %v1_cc5c = and i32 %v3_cc54, 65280
  %v1_cc60 = urem i32 %v0_cbdc, 256
  %v3_cc64 = mul nuw nsw i32 %v1_cc44, 256
  %v1_cc6c = urem i32 %v0_cbd8, 256
  %v3_cc70 = mul nuw nsw i32 %v1_cc60, 256
  %tmp139 = udiv i32 %v0_cbd0, 256
  %v4_cc74 = urem i32 %tmp139, 256
  %v5_cc74 = or i32 %v4_cc74, %v3_cc64
  store i32 %v5_cc74, i32* %r8.global-to-local, align 4
  %v4_cc78 = udiv i32 %v1_cc2c, 16777216
  %v5_cc78 = or i32 %v1_cc5c, %v4_cc78
  store i32 %v5_cc78, i32* %sl.global-to-local, align 4
  %tmp140 = udiv i32 %v0_cbd8, 256
  %v3_cc84 = urem i32 %tmp140, 256
  %v4_cc88 = sdiv i32 %v1_cc30, 16777216
  %tmp141 = udiv i32 %v7_c968, 256
  %v4_cc90 = mul nuw nsw i32 %v1_cc6c, 256
  %v5_cc90 = or i32 %v4_cc90, %v3_cc84
  store i32 %v5_cc90, i32* @r5, align 4
  %tmp142 = udiv i32 %v0_cbdc, 256
  %v4_cc94 = urem i32 %tmp142, 256
  %v5_cc94 = or i32 %v4_cc94, %v3_cc70
  store i32 %v5_cc94, i32* %sb.global-to-local, align 4
  store i32 %v1_cc58, i32* %r0.global-to-local, align 4
  %v1_cca0 = add i32 %v2_cb74, 1
  store i32 %v1_cca0, i32* @r7, align 4
  %v3_cca4 = ashr i32 %v1_cc30, 31
  store i32 %v3_cca4, i32* @lr, align 4
  store i32 %v1_cc6c, i32* %r1.global-to-local, align 4
  store i32 %v1_cc60, i32* %r2.global-to-local, align 4
  %v3_ccb075 = udiv i32 %v1_cc5c, 256
  store i32 %v3_ccb075, i32* %r3.global-to-local, align 4
  store i32 %v1_cc44, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %sext13 = mul i32 %tmp141, 16777216
  %v4_cd40 = sdiv i32 %sext13, 16777216
  %sext14 = mul i32 %v7_c968, 16777216
  %v4_cd44 = sdiv i32 %sext14, 16777216
  %sext15 = mul i32 %v1_cc2c, 256
  %v4_cd74 = sdiv i32 %sext15, 16777216
  %sext16 = mul i32 %v0_cbdc, 16777216
  %v4_cd78 = sdiv i32 %sext16, 16777216
  %sext17 = mul i32 %v0_cbd8, 16777216
  %v4_cd9c = sdiv i32 %sext17, 16777216
  %sext18 = mul i32 %v0_cbd0, 16777216
  %v4_cda8 = sdiv i32 %sext18, 16777216
  %v1_cd24 = trunc i32 %v4_cc88 to i8
  %extract.t = trunc i32 %v3_cca4 to i8
  br label %dec_label_pc_ccd4

dec_label_pc_ccd4:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_cc1c
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 600, i32* %r0.global-to-local, align 4
  %v2_ccdc = call i32 @function_12a18(i32 600, i32 1)
  store i32 %v2_ccdc, i32* %r0.global-to-local, align 4
  store i32 %v2_c92c, i32* %lr.global-to-local, align 4
  %v3_cce4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_cce4, i32* %r3.global-to-local, align 4
  %v2_cce8 = load i32, i32* @r4, align 4
  %v5_cce8 = mul i32 %v2_cce8, 4
  %v6_cce8 = add i32 %v5_cce8, %v2_c92c
  %v7_cce8 = inttoptr i32 %v6_cce8 to i32*
  store i32 %v2_ccdc, i32* %v7_cce8, align 4
  %v0_ccec = load i32, i32* %lr.global-to-local, align 4
  %v1_ccec = load i32, i32* %r3.global-to-local, align 4
  %v4_ccec = mul i32 %v1_ccec, 4
  %v5_ccec = add i32 %v4_ccec, %v0_ccec
  %v6_ccec = inttoptr i32 %v5_ccec to i32*
  %v7_ccec = load i32, i32* %v6_ccec, align 4
  store i32 %v7_ccec, i32* %r1.global-to-local, align 4
  %v1_ccf0 = inttoptr i32 %v7_ccec to i8*
  %v2_ccf0 = load i8, i8* %v1_ccf0, align 1
  %tmp154 = urem i8 %v2_ccf0, 16
  %v1_ccf4 = zext i8 %tmp154 to i32
  %v1_ccf8 = or i32 %v1_ccf4, 64
  store i32 %v1_ccf8, i32* %r2.global-to-local, align 4
  %v1_ccfc = trunc i32 %v1_ccf8 to i8
  store i8 %v1_ccfc, i8* %v1_ccf0, align 1
  %v0_cd00 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd00 = inttoptr i32 %v0_cd00 to i8*
  %v2_cd00 = load i8, i8* %v1_cd00, align 1
  %v1_cd04 = and i8 %v2_cd00, -16
  %v1_cd08 = or i8 %v1_cd04, 5
  store i32 %v1_c9ac, i32* %r0.global-to-local, align 4
  store i8 %v1_cd08, i8* %v1_cd00, align 1
  store i32 %v6_c944, i32* %r2.global-to-local, align 4
  %v2_cd18 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd18 = add i32 %v2_cd18, 1
  %v4_cd18 = inttoptr i32 %v3_cd18 to i8*
  store i8 %v5_c964, i8* %v4_cd18, align 1
  store i32 %v4_cc88, i32* %r3.global-to-local, align 4
  %v0_cd20 = load i32, i32* %r0.global-to-local, align 4
  %v2_cd20 = icmp eq i32 %v0_cd20, 0
  store i1 %v2_cd20, i1* %cpsr_z.global-to-local, align 1
  %v2_cd24 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd24 = add i32 %v2_cd24, 2
  %v4_cd24 = inttoptr i32 %v3_cd24 to i8*
  store i8 %v1_cd24, i8* %v4_cd24, align 1
  store i32 %v3_cca4, i32* %r4.global-to-local, align 4
  store i32 %v5_c9a0, i32* %r0.global-to-local, align 4
  %v0_cd30 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd30, label %.thread20, label %bb143

bb143:                                            ; preds = %dec_label_pc_ccd4
  store i32 64, i32* %r3.global-to-local, align 4
  %v3_cd34 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd34 = add i32 %v3_cd34, 6
  %v5_cd34 = inttoptr i32 %v4_cd34 to i8*
  store i8 64, i8* %v5_cd34, align 1
  %v0_cd3c.pre = load i32, i32* %r4.global-to-local, align 4
  %extract.t76 = trunc i32 %v0_cd3c.pre to i8
  br label %.thread20

.thread20:                                        ; preds = %dec_label_pc_ccd4, %bb143
  %v0_cd3c.off0 = phi i8 [ %extract.t, %dec_label_pc_ccd4 ], [ %extract.t76, %bb143 ]
  store i32 17, i32* %r3.global-to-local, align 4
  %v2_cd3c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd3c = add i32 %v2_cd3c, 3
  %v4_cd3c = inttoptr i32 %v3_cd3c to i8*
  store i8 %v0_cd3c.off0, i8* %v4_cd3c, align 1
  store i32 %v4_cd40, i32* %ip.global-to-local, align 4
  store i32 %v4_cd44, i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r4.global-to-local, align 4
  %v0_cd4c = load i32, i32* %r0.global-to-local, align 4
  %v1_cd4c = trunc i32 %v0_cd4c to i8
  %v2_cd4c = load i32, i32* %r1.global-to-local, align 4
  %v3_cd4c = add i32 %v2_cd4c, 8
  %v4_cd4c = inttoptr i32 %v3_cd4c to i8*
  store i8 %v1_cd4c, i8* %v4_cd4c, align 1
  %v0_cd50 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd50 = trunc i32 %v0_cd50 to i8
  %v2_cd50 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd50 = add i32 %v2_cd50, 9
  %v4_cd50 = inttoptr i32 %v3_cd50 to i8*
  store i8 %v1_cd50, i8* %v4_cd50, align 1
  %v0_cd54 = load i32, i32* %lr.global-to-local, align 4
  %v1_cd54 = trunc i32 %v0_cd54 to i8
  %v2_cd54 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd54 = add i32 %v2_cd54, 5
  %v4_cd54 = inttoptr i32 %v3_cd54 to i8*
  store i8 %v1_cd54, i8* %v4_cd54, align 1
  %v0_cd58 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cd58, label %.thread21, label %bb144

.thread21:                                        ; preds = %.thread20
  %v2_cd5c22 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_cd5c22, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  br label %bb145

bb144:                                            ; preds = %.thread20
  store i32 0, i32* %r2.global-to-local, align 4
  %v2_cd5c = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_cd5c, i32* %r3.global-to-local, align 4
  store i32 %v4_cc20, i32* %lr.global-to-local, align 4
  %v3_cd64 = load i32, i32* %r1.global-to-local, align 4
  %v4_cd64 = add i32 %v3_cd64, 7
  %v5_cd64 = inttoptr i32 %v4_cd64 to i8*
  store i8 0, i8* %v5_cd64, align 1
  %v0_cd6c.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_cd70.pre = load i32, i32* %r3.global-to-local, align 4
  br label %bb145

bb145:                                            ; preds = %.thread21, %bb144
  %v0_cd70 = phi i32 [ %v2_cd5c22, %.thread21 ], [ %v0_cd70.pre, %bb144 ]
  %v0_cd6c = phi i32 [ %v4_cc20, %.thread21 ], [ %v0_cd6c.pre, %bb144 ]
  %v0_cd68 = load i32, i32* %r1.global-to-local, align 4
  %v1_cd68 = add i32 %v0_cd6c, 41
  %v2_cd6c = add i32 %v1_cd68, %v0_cd68
  store i32 %v2_cd6c, i32* %r4.global-to-local, align 4
  %v2_cd70 = add i32 %v0_cd68, 12
  %v3_cd70 = inttoptr i32 %v2_cd70 to i32*
  store i32 %v0_cd70, i32* %v3_cd70, align 4
  store i32 %v4_cd74, i32* %r2.global-to-local, align 4
  store i32 %v4_cd78, i32* %r3.global-to-local, align 4
  %v0_cd7c = load i32, i32* %r1.global-to-local, align 4
  %v1_cd7c = add i32 %v0_cd7c, 20
  store i32 %v1_cd7c, i32* %r0.global-to-local, align 4
  %v0_cd80 = load i32, i32* %ip.global-to-local, align 4
  %v1_cd80 = trunc i32 %v0_cd80 to i8
  %v3_cd80 = add i32 %v0_cd7c, 4
  %v4_cd80 = inttoptr i32 %v3_cd80 to i8*
  store i8 %v1_cd80, i8* %v4_cd80, align 1
  %v0_cd84 = load i32, i32* %r2.global-to-local, align 4
  %v1_cd84 = trunc i32 %v0_cd84 to i8
  %v2_cd84 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd84 = add i32 %v2_cd84, 5
  %v4_cd84 = inttoptr i32 %v3_cd84 to i8*
  store i8 %v1_cd84, i8* %v4_cd84, align 1
  %v0_cd88 = load i32, i32* %r3.global-to-local, align 4
  %v1_cd88 = trunc i32 %v0_cd88 to i8
  %v2_cd88 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd88 = add i32 %v2_cd88, 3
  %v4_cd88 = inttoptr i32 %v3_cd88 to i8*
  store i8 %v1_cd88, i8* %v4_cd88, align 1
  %v0_cd8c = load i32, i32* %sb.global-to-local, align 4
  %v1_cd8c = trunc i32 %v0_cd8c to i8
  %v2_cd8c = load i32, i32* %r0.global-to-local, align 4
  %v3_cd8c = add i32 %v2_cd8c, 2
  %v4_cd8c = inttoptr i32 %v3_cd8c to i8*
  store i8 %v1_cd8c, i8* %v4_cd8c, align 1
  %v0_cd90 = load i32, i32* %sl.global-to-local, align 4
  %v1_cd90 = trunc i32 %v0_cd90 to i8
  %v2_cd90 = load i32, i32* %r0.global-to-local, align 4
  %v3_cd90 = add i32 %v2_cd90, 4
  %v4_cd90 = inttoptr i32 %v3_cd90 to i8*
  store i8 %v1_cd90, i8* %v4_cd90, align 1
  %v0_cd94 = load i32, i32* @r5, align 4
  %v1_cd94 = trunc i32 %v0_cd94 to i8
  %v2_cd94 = load i32, i32* %r1.global-to-local, align 4
  %v3_cd94 = add i32 %v2_cd94, 20
  %v4_cd94 = inttoptr i32 %v3_cd94 to i8*
  store i8 %v1_cd94, i8* %v4_cd94, align 1
  store i32 %v4_cd9c, i32* %r2.global-to-local, align 4
  %v1_cda0 = load i32, i32* %r1.global-to-local, align 4
  %v2_cda0 = add i32 %v1_cda0, 16
  %v3_cda0 = inttoptr i32 %v2_cda0 to i32*
  store i32 %stack_var_-2176.0, i32* %v3_cda0, align 4
  %v0_cda4 = load i32, i32* %r2.global-to-local, align 4
  %v1_cda4 = trunc i32 %v0_cda4 to i8
  %v2_cda4 = load i32, i32* %r0.global-to-local, align 4
  %v3_cda4 = add i32 %v2_cda4, 1
  %v4_cda4 = inttoptr i32 %v3_cda4 to i8*
  store i8 %v1_cda4, i8* %v4_cda4, align 1
  store i32 %v4_cda8, i32* %lr.global-to-local, align 4
  store i32 %v4_cc20, i32* %r0.global-to-local, align 4
  %v0_cdb0 = load i32, i32* %r1.global-to-local, align 4
  %v1_cdb0 = add i32 %v0_cdb0, 28
  store i32 %v1_cdb0, i32* %ip.global-to-local, align 4
  store i32 0, i32* @r6, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v0_cdbc = load i32, i32* %r8.global-to-local, align 4
  %v1_cdbc = trunc i32 %v0_cdbc to i8
  %v4_cdbc = inttoptr i32 %v1_cdb0 to i8*
  store i8 %v1_cdbc, i8* %v4_cdbc, align 1
  %v0_cdc0 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc0 = trunc i32 %v0_cdc0 to i8
  %v2_cdc0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc0 = add i32 %v2_cdc0, 5
  %v4_cdc0 = inttoptr i32 %v3_cdc0 to i8*
  store i8 %v1_cdc0, i8* %v4_cdc0, align 1
  %v0_cdc4 = load i32, i32* %lr.global-to-local, align 4
  %v1_cdc4 = trunc i32 %v0_cdc4 to i8
  %v2_cdc4 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc4 = add i32 %v2_cdc4, 1
  %v4_cdc4 = inttoptr i32 %v3_cdc4 to i8*
  store i8 %v1_cdc4, i8* %v4_cdc4, align 1
  %v0_cdc8 = load i32, i32* %r3.global-to-local, align 4
  %v1_cdc8 = trunc i32 %v0_cdc8 to i8
  %v2_cdc8 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdc8 = add i32 %v2_cdc8, 2
  %v4_cdc8 = inttoptr i32 %v3_cdc8 to i8*
  store i8 %v1_cdc8, i8* %v4_cdc8, align 1
  %v0_cdcc = load i32, i32* @r6, align 4
  %v1_cdcc = trunc i32 %v0_cdcc to i8
  %v2_cdcc = load i32, i32* %ip.global-to-local, align 4
  %v3_cdcc = add i32 %v2_cdcc, 3
  %v4_cdcc = inttoptr i32 %v3_cdcc to i8*
  store i8 %v1_cdcc, i8* %v4_cdcc, align 1
  %v0_cdd0 = load i32, i32* @r6, align 4
  %v1_cdd0 = trunc i32 %v0_cdd0 to i8
  %v2_cdd0 = load i32, i32* %ip.global-to-local, align 4
  %v3_cdd0 = add i32 %v2_cdd0, 4
  %v4_cdd0 = inttoptr i32 %v3_cdd0 to i8*
  store i8 %v1_cdd0, i8* %v4_cdd0, align 1
  %v0_cdd4 = load i32, i32* %r0.global-to-local, align 4
  %v1_cdd4 = trunc i32 %v0_cdd4 to i8
  %v2_cdd4 = load i32, i32* %r1.global-to-local, align 4
  %v3_cdd4 = add i32 %v2_cdd4, 40
  %v4_cdd4 = inttoptr i32 %v3_cdd4 to i8*
  store i8 %v1_cdd4, i8* %v4_cdd4, align 1
  store i32 %v5_ca28, i32* %r1.global-to-local, align 4
  %v0_cddc = load i32, i32* @r7, align 4
  store i32 %v0_cddc, i32* %r2.global-to-local, align 4
  %v0_cde0 = load i32, i32* %r4.global-to-local, align 4
  %v1_cde0 = add i32 %v0_cde0, 1
  store i32 %v1_cde0, i32* %r0.global-to-local, align 4
  %v3_cde4 = call i32 @function_11590(i32 %v1_cde0, i32 %v5_ca28, i32 %v0_cddc)
  store i32 %v3_cde4, i32* %r0.global-to-local, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v1_cdec = load i32, i32* @r6, align 4
  %v9_cdec = icmp eq i32 %v2_cb74, %v1_cdec
  store i1 %v9_cdec, i1* %cpsr_z.global-to-local, align 1
  %v7_cdf0 = icmp sgt i32 %v2_cb74, %v1_cdec
  store i32 %v1_cdec, i32* %lr.global-to-local, align 4
  %v0_ce00 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ce00, i32* %r2.global-to-local, align 4
  %extract.t78 = trunc i32 %v1_cdec to i8
  br i1 %v7_cdf0, label %dec_label_pc_cdfc, label %dec_label_pc_ce3c

dec_label_pc_cdfc:                                ; preds = %bb145
  store i32 %v1_cdec, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_ce08

dec_label_pc_ce08:                                ; preds = %bb148, %dec_label_pc_cdfc
  %v0_ce2485151 = phi i32 [ %v0_ce2485152, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce1832 = phi i32 [ %v1_ce2891, %bb148 ], [ %v1_cdec, %dec_label_pc_cdfc ]
  %v1_ce14.off0 = phi i8 [ %v1_ce1456.off0, %bb148 ], [ %extract.t78, %dec_label_pc_cdfc ]
  %v0_ce1831 = phi i32 [ %v0_ce18315488, %bb148 ], [ %v0_ce00, %dec_label_pc_cdfc ]
  store i32 %v5_ca28, i32* %ip.global-to-local, align 4
  %v2_ce0c = add i32 %v1_ce1832, %v5_ca28
  %v3_ce0c = inttoptr i32 %v2_ce0c to i8*
  %v4_ce0c = load i8, i8* %v3_ce0c, align 1
  %v6_ce0c = zext i8 %v4_ce0c to i32
  store i32 %v6_ce0c, i32* %r3.global-to-local, align 4
  %v7_ce10 = icmp eq i8 %v4_ce0c, 46
  store i1 %v7_ce10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_ce10, label %bb146, label %.thread30

.thread30:                                        ; preds = %dec_label_pc_ce08
  %v2_ce1833 = add i32 %v1_ce1832, %v0_ce1831
  store i32 %v2_ce1833, i32* %r0.global-to-local, align 4
  br label %.thread34

bb146:                                            ; preds = %dec_label_pc_ce08
  %v3_ce14 = load i32, i32* %r2.global-to-local, align 4
  %v4_ce14 = inttoptr i32 %v3_ce14 to i8*
  store i8 %v1_ce14.off0, i8* %v4_ce14, align 1
  %v0_ce1c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_ce18 = load i32, i32* %r4.global-to-local, align 4
  %v1_ce18 = load i32, i32* %r1.global-to-local, align 4
  %v2_ce18 = add i32 %v1_ce18, %v0_ce18
  store i32 %v2_ce18, i32* %r0.global-to-local, align 4
  br i1 %v0_ce1c.pr, label %bb147, label %bb146..thread34_crit_edge

bb146..thread34_crit_edge:                        ; preds = %bb146
  %v0_ce2485.pre = load i32, i32* %lr.global-to-local, align 4
  br label %.thread34

bb147:                                            ; preds = %bb146
  %v2_ce1c = add i32 %v2_ce18, 1
  store i32 %v2_ce1c, i32* %r2.global-to-local, align 4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v0_ce24 = load i32, i32* %lr.global-to-local, align 4
  %v1_ce24 = add i32 %v0_ce24, 1
  store i32 %v1_ce24, i32* %ip.global-to-local, align 4
  %v1_ce28 = add i32 %v1_ce18, 1
  store i32 %v1_ce28, i32* %r1.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %bb148

.thread34:                                        ; preds = %bb146..thread34_crit_edge, %.thread30
  %v0_ce2485 = phi i32 [ %v0_ce2485.pre, %bb146..thread34_crit_edge ], [ %v0_ce2485151, %.thread30 ]
  %v0_ce28.ph = phi i32 [ %v1_ce18, %bb146..thread34_crit_edge ], [ %v1_ce1832, %.thread30 ]
  %v0_ce183154.ph = phi i32 [ %v0_ce18, %bb146..thread34_crit_edge ], [ %v0_ce1831, %.thread30 ]
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v1_ce2486 = add i32 %v0_ce2485, 1
  store i32 %v1_ce2486, i32* %ip.global-to-local, align 4
  %v1_ce2887 = add i32 %v0_ce28.ph, 1
  store i32 %v1_ce2887, i32* %r1.global-to-local, align 4
  %v2_ce30 = urem i32 %v1_ce2486, 256
  store i32 %v2_ce30, i32* %lr.global-to-local, align 4
  %extract.t81 = trunc i32 %v1_ce2486 to i8
  br label %bb148

bb148:                                            ; preds = %bb147, %.thread34
  %v0_ce2485152 = phi i32 [ 0, %bb147 ], [ %v2_ce30, %.thread34 ]
  %v1_ce2891 = phi i32 [ %v1_ce28, %bb147 ], [ %v1_ce2887, %.thread34 ]
  %v0_ce18315488 = phi i32 [ %v0_ce18, %bb147 ], [ %v0_ce183154.ph, %.thread34 ]
  %v1_ce1456.off0 = phi i8 [ 0, %bb147 ], [ %extract.t81, %.thread34 ]
  %v9_ce34 = icmp eq i32 %v2_cb74, %v1_ce2891
  store i1 %v9_ce34, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ce34, label %dec_label_pc_ce3c.loopexit, label %dec_label_pc_ce08

dec_label_pc_ce3c.loopexit:                       ; preds = %bb148
  %v2_ce3c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_ce3c

dec_label_pc_ce3c:                                ; preds = %dec_label_pc_ce3c.loopexit, %bb145
  %v2_ce3c = phi i32 [ %v2_ce3c.pre, %dec_label_pc_ce3c.loopexit ], [ %v0_ce00, %bb145 ]
  %v0_ce3c.off0 = phi i8 [ %v1_ce1456.off0, %dec_label_pc_ce3c.loopexit ], [ %extract.t78, %bb145 ]
  %v3_ce3c = inttoptr i32 %v2_ce3c to i8*
  store i8 %v0_ce3c.off0, i8* %v3_ce3c, align 1
  %v3_ce40 = load i32, i32* %stack_var_-40, align 4
  store i32 %v2_cb74, i32* %r1.global-to-local, align 4
  %v0_ce48 = load i32, i32* %r4.global-to-local, align 4
  %v2_ce48 = add i32 %v0_ce48, %v2_cb74
  store i32 %v2_ce48, i32* %r3.global-to-local, align 4
  %v1_ce4c = add i32 %v3_ce40, 1
  store i32 %v1_ce4c, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* @lr, align 4
  %v9_ce5c = icmp eq i32 %v1_c914, %v1_ce4c
  store i1 %v9_ce5c, i1* %cpsr_z.global-to-local, align 1
  %v1_ce60 = add i32 %v2_ce48, 2
  store i32 %v1_ce60, i32* %r2.global-to-local, align 4
  %v4_ce64 = inttoptr i32 %v1_ce60 to i8*
  store i8 0, i8* %v4_ce64, align 1
  %v0_ce68 = load i32, i32* @lr, align 4
  %v1_ce68 = trunc i32 %v0_ce68 to i8
  %v2_ce68 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce68 = add i32 %v2_ce68, 3
  %v4_ce68 = inttoptr i32 %v3_ce68 to i8*
  store i8 %v1_ce68, i8* %v4_ce68, align 1
  %v0_ce6c = load i32, i32* @lr, align 4
  %v1_ce6c = trunc i32 %v0_ce6c to i8
  %v2_ce6c = load i32, i32* %r2.global-to-local, align 4
  %v3_ce6c = add i32 %v2_ce6c, 1
  %v4_ce6c = inttoptr i32 %v3_ce6c to i8*
  store i8 %v1_ce6c, i8* %v4_ce6c, align 1
  %v0_ce70 = load i32, i32* %ip.global-to-local, align 4
  %v1_ce70 = trunc i32 %v0_ce70 to i8
  %v2_ce70 = load i32, i32* %r2.global-to-local, align 4
  %v3_ce70 = add i32 %v2_ce70, 2
  %v4_ce70 = inttoptr i32 %v3_ce70 to i8*
  store i8 %v1_ce70, i8* %v4_ce70, align 1
  %v0_ce74 = load i32, i32* @r4, align 4
  store i32 %v0_ce74, i32* %stack_var_-40, align 4
  %v8_ce78 = icmp sgt i32 %v1_c914, %v1_ce4c
  br i1 %v8_ce78, label %dec_label_pc_ccd4, label %dec_label_pc_ce7c

dec_label_pc_ce7c:                                ; preds = %dec_label_pc_ce3c, %dec_label_pc_d048
  %v4_ceec.pre-phi = phi i32 [ %v4_d04c, %dec_label_pc_d048 ], [ %v4_cc20, %dec_label_pc_ce3c ]
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 %v2_cbf8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_ce88:                                ; preds = %dec_label_pc_ce88, %dec_label_pc_cfac, %dec_label_pc_ce7c
  br i1 %v2_cbf8, label %dec_label_pc_ce88, label %dec_label_pc_ce8c

dec_label_pc_ce8c:                                ; preds = %dec_label_pc_ce88
  store i32 0, i32* %stack_var_-40, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 65535, i32* @r6, align 4
  %v0_ce9c = load i32, i32* @fp, align 4
  %v1_ce9c = add i32 %v0_ce9c, 27
  store i32 %v1_ce9c, i32* @sb, align 4
  %v1_cea0 = add i32 %v0_ce9c, 47
  store i32 %v1_cea0, i32* @sl, align 4
  store i32 0, i32* @r7, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cea8:                                ; preds = %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, %dec_label_pc_ce8c
  %v1_cec8 = phi i32 [ %v1_ceb4.pre, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 65535, %dec_label_pc_ce8c ]
  %v1_ceb0 = phi i32 [ %v1_cf98, %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge ], [ 0, %dec_label_pc_ce8c ]
  store i32 %v2_c92c, i32* %r3.global-to-local, align 4
  store i32 %v3_cbe8, i32* %r8.global-to-local, align 4
  %v4_ceb0 = mul i32 %v1_ceb0, 4
  %v5_ceb0 = add i32 %v4_ceb0, %v2_c92c
  %v6_ceb0 = inttoptr i32 %v5_ceb0 to i32*
  %v7_ceb0 = load i32, i32* %v6_ceb0, align 4
  store i32 %v7_ceb0, i32* @r4, align 4
  %v9_ceb4 = icmp eq i32 %v3_cbe8, %v1_cec8
  store i1 %v9_ceb4, i1* %cpsr_z.global-to-local, align 1
  %v1_ceb8 = add i32 %v7_ceb0, 20
  store i32 %v1_ceb8, i32* @r5, align 4
  %v1_cebc = add i32 %v7_ceb0, 28
  store i32 %v1_cebc, i32* @r8, align 4
  br i1 %v9_ceb4, label %dec_label_pc_cfbc, label %dec_label_pc_cec4

dec_label_pc_cec4:                                ; preds = %dec_label_pc_cea8
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v9_cec8 = icmp eq i32 %v3_cbec, %v1_cec8
  store i1 %v9_cec8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cec8, label %dec_label_pc_cfd8, label %dec_label_pc_ced0

dec_label_pc_ced0:                                ; preds = %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge, %dec_label_pc_cec4
  %v1_ced4 = phi i32 [ %v1_ced4.pre, %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge ], [ %v1_cec8, %dec_label_pc_cec4 ]
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v9_ced4 = icmp eq i32 %v3_cbf0, %v1_ced4
  store i1 %v9_ced4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_ced4, label %dec_label_pc_cff4, label %dec_label_pc_cedc

dec_label_pc_cedc:                                ; preds = %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge, %dec_label_pc_ced0
  %v1_cee0 = phi i32 [ %v1_cee0.pre, %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge ], [ %v1_ced4, %dec_label_pc_ced0 ]
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v9_cee0 = icmp eq i32 %v3_cbf4, %v1_cee0
  store i1 %v9_cee0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_cee0, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_cee8:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc, %dec_label_pc_d010
  %v0_cee8 = load i32, i32* @r4, align 4
  %v1_cee8 = add i32 %v0_cee8, 41
  store i32 %v1_cee8, i32* %r0.global-to-local, align 4
  store i32 %v4_ceec.pre-phi, i32* %r1.global-to-local, align 4
  %v2_cef0 = call i32 @function_ec7c(i32 %v1_cee8, i32 %v4_ceec.pre-phi)
  store i32 20, i32* %r1.global-to-local, align 4
  %v0_cef8 = load i32, i32* @r7, align 4
  %v1_cef8 = trunc i32 %v0_cef8 to i8
  %v2_cef8 = load i32, i32* @r4, align 4
  %v3_cef8 = add i32 %v2_cef8, 10
  %v4_cef8 = inttoptr i32 %v3_cef8 to i8*
  store i8 %v1_cef8, i8* %v4_cef8, align 1
  %v0_cefc = load i32, i32* @r7, align 4
  %v1_cefc = trunc i32 %v0_cefc to i8
  %v2_cefc = load i32, i32* @r4, align 4
  %v3_cefc = add i32 %v2_cefc, 11
  %v4_cefc = inttoptr i32 %v3_cefc to i8*
  store i8 %v1_cefc, i8* %v4_cefc, align 1
  %v0_cf00 = load i32, i32* @r4, align 4
  store i32 %v0_cf00, i32* @r0, align 4
  %v2_cf04 = call i32 @function_d0b8(i32 %v0_cf00, i32 20)
  %v3_cf04 = trunc i32 %v2_cf04 to i8
  store i32 %v2_cf04, i32* %r0.global-to-local, align 4
  %v4_cf08 = sdiv i32 %v2_cf04, 256
  store i32 %v4_cf08, i32* %r3.global-to-local, align 4
  %v1_cf0c = trunc i32 %v4_cf08 to i8
  %v2_cf0c = load i32, i32* @r4, align 4
  %v3_cf0c = add i32 %v2_cf0c, 11
  %v4_cf0c = inttoptr i32 %v3_cf0c to i8*
  store i8 %v1_cf0c, i8* %v4_cf0c, align 1
  %v3_cf10 = load i32, i32* @r4, align 4
  %v4_cf10 = add i32 %v3_cf10, 10
  %v5_cf10 = inttoptr i32 %v4_cf10 to i8*
  store i8 %v3_cf04, i8* %v5_cf10, align 1
  %v0_cf14 = load i32, i32* @r7, align 4
  %v1_cf14 = trunc i32 %v0_cf14 to i8
  %v2_cf14 = load i32, i32* @r5, align 4
  %v3_cf14 = add i32 %v2_cf14, 6
  %v4_cf14 = inttoptr i32 %v3_cf14 to i8*
  store i8 %v1_cf14, i8* %v4_cf14, align 1
  %v0_cf18 = load i32, i32* @r7, align 4
  %v1_cf18 = trunc i32 %v0_cf18 to i8
  %v2_cf18 = load i32, i32* @r5, align 4
  %v3_cf18 = add i32 %v2_cf18, 7
  %v4_cf18 = inttoptr i32 %v3_cf18 to i8*
  store i8 %v1_cf18, i8* %v4_cf18, align 1
  %v0_cf1c = load i32, i32* @r4, align 4
  %v1_cf1c = add i32 %v0_cf1c, 24
  %v2_cf1c = inttoptr i32 %v1_cf1c to i8*
  %v3_cf1c = load i8, i8* %v2_cf1c, align 1
  %v4_cf1c = zext i8 %v3_cf1c to i32
  store i32 %v4_cf1c, i32* %r3.global-to-local, align 4
  %v1_cf20 = add i32 %v0_cf1c, 25
  %v2_cf20 = inttoptr i32 %v1_cf20 to i8*
  %v3_cf20 = load i8, i8* %v2_cf20, align 1
  %v4_cf20 = zext i8 %v3_cf20 to i32
  %v0_cf24 = load i32, i32* @r5, align 4
  store i32 %v0_cf24, i32* @r1, align 4
  %v4_cf28 = mul nuw nsw i32 %v4_cf20, 256
  %v5_cf28 = or i32 %v4_cf28, %v4_cf1c
  store i32 %v5_cf28, i32* %r2.global-to-local, align 4
  store i32 %v0_cf1c, i32* %r0.global-to-local, align 4
  %v0_cf30 = load i32, i32* @sb, align 4
  store i32 %v0_cf30, i32* %r3.global-to-local, align 4
  %v4_cf34 = call i32 @function_d114(i32 %v0_cf1c, i32 %v0_cf24, i32 %v5_cf28, i32 %v0_cf30)
  %v5_cf34 = trunc i32 %v4_cf34 to i8
  store i32 %v4_cf34, i32* %r0.global-to-local, align 4
  %v3_cf38 = load i32, i32* %stack_var_-40, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  store i32 %stack_var_-2176.0, i32* %r2.global-to-local, align 4
  %v5_cf48 = mul i32 %v3_cf38, 24
  %v2_cf4c = add i32 %v5_cf48, %arg2
  store i32 %v2_cf4c, i32* %lr.global-to-local, align 4
  %v4_cf50 = sdiv i32 %v4_cf34, 256
  store i32 %v4_cf50, i32* %r3.global-to-local, align 4
  %v3_cf54 = load i32, i32* @r5, align 4
  %v4_cf54 = add i32 %v3_cf54, 6
  %v5_cf54 = inttoptr i32 %v4_cf54 to i8*
  store i8 %v5_cf34, i8* %v5_cf54, align 1
  %v0_cf58 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf58 = trunc i32 %v0_cf58 to i8
  %v2_cf58 = load i32, i32* @r5, align 4
  %v3_cf58 = add i32 %v2_cf58, 7
  %v4_cf58 = inttoptr i32 %v3_cf58 to i8*
  store i8 %v1_cf58, i8* %v4_cf58, align 1
  %v0_cf5c = load i32, i32* %r2.global-to-local, align 4
  %v1_cf5c = load i32, i32* %lr.global-to-local, align 4
  %v2_cf5c = add i32 %v1_cf5c, 4
  %v3_cf5c = inttoptr i32 %v2_cf5c to i32*
  store i32 %v0_cf5c, i32* %v3_cf5c, align 4
  %v0_cf60 = load i32, i32* @r4, align 4
  %v1_cf60 = add i32 %v0_cf60, 20
  %v2_cf60 = inttoptr i32 %v1_cf60 to i32*
  %v3_cf60 = load i32, i32* %v2_cf60, align 4
  %v3_cf64 = udiv i32 %v3_cf60, 65536
  store i32 %v3_cf64, i32* %r3.global-to-local, align 4
  %v3_cf6812 = udiv i32 %v3_cf60, 16777216
  %v1_cf6c = trunc i32 %v3_cf6812 to i8
  %v2_cf6c = load i32, i32* %lr.global-to-local, align 4
  %v3_cf6c = add i32 %v2_cf6c, 3
  %v4_cf6c = inttoptr i32 %v3_cf6c to i8*
  store i8 %v1_cf6c, i8* %v4_cf6c, align 1
  %v0_cf70 = load i32, i32* %r3.global-to-local, align 4
  %v1_cf70 = trunc i32 %v0_cf70 to i8
  %v2_cf70 = load i32, i32* %lr.global-to-local, align 4
  %v3_cf70 = add i32 %v2_cf70, 2
  %v4_cf70 = inttoptr i32 %v3_cf70 to i8*
  store i8 %v1_cf70, i8* %v4_cf70, align 1
  store i32 16, i32* %ip.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_cf7c = load i32, i32* @r4, align 4
  store i32 %v0_cf7c, i32* %r1.global-to-local, align 4
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v0_cf84 = load i32, i32* @sl, align 4
  store i32 %v0_cf84, i32* %r2.global-to-local, align 4
  %v0_cf88 = load i32, i32* %lr.global-to-local, align 4
  %v6_cf90 = inttoptr i32 %v0_cf7c to i32*
  %v7_cf90 = call i32 @function_126c8(i32 %v3_cb88, i32* %v6_cf90, i32 %v0_cf84, i32 16384, i32 %v0_cf88, i32 16)
  %v3_cf94 = load i32, i32* %stack_var_-40, align 4
  %v1_cf98 = add i32 %v3_cf94, 1
  store i32 %v1_cf98, i32* %r0.global-to-local, align 4
  store i32 %v1_c914, i32* %r3.global-to-local, align 4
  %v9_cfa0 = icmp eq i32 %v1_c914, %v1_cf98
  store i1 %v9_cfa0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_cf98, i32* %stack_var_-40, align 4
  %v8_cfa8 = icmp sgt i32 %v1_c914, %v1_cf98
  br i1 %v8_cfa8, label %dec_label_pc_cee8.dec_label_pc_cea8_crit_edge, label %dec_label_pc_cfac

dec_label_pc_cee8.dec_label_pc_cea8_crit_edge:    ; preds = %dec_label_pc_cee8
  %v1_ceb4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cea8

dec_label_pc_cfac:                                ; preds = %dec_label_pc_cee8
  store i32 %v1_c914, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_ce88

dec_label_pc_cfbc:                                ; preds = %dec_label_pc_cea8
  %v0_cfbc = call i32 @function_ebc8()
  %v1_cfbc = trunc i32 %v0_cfbc to i8
  store i32 %v0_cfbc, i32* %r0.global-to-local, align 4
  store i32 %v3_cbec, i32* %ip.global-to-local, align 4
  %v4_cfc4 = sdiv i32 %v0_cfbc, 256
  store i32 %v4_cfc4, i32* %r3.global-to-local, align 4
  %v1_cfc8 = load i32, i32* @r6, align 4
  %v9_cfc8 = icmp eq i32 %v3_cbec, %v1_cfc8
  store i1 %v9_cfc8, i1* %cpsr_z.global-to-local, align 1
  %v1_cfcc = trunc i32 %v4_cfc4 to i8
  %v2_cfcc = load i32, i32* @r4, align 4
  %v3_cfcc = add i32 %v2_cfcc, 5
  %v4_cfcc = inttoptr i32 %v3_cfcc to i8*
  store i8 %v1_cfcc, i8* %v4_cfcc, align 1
  %v3_cfd0 = load i32, i32* @r4, align 4
  %v4_cfd0 = add i32 %v3_cfd0, 4
  %v5_cfd0 = inttoptr i32 %v4_cfd0 to i8*
  store i8 %v1_cfbc, i8* %v5_cfd0, align 1
  %v0_cfd4 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cfd4, label %dec_label_pc_cfd8, label %dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge

dec_label_pc_cfbc.dec_label_pc_ced0_crit_edge:    ; preds = %dec_label_pc_cfbc
  %v1_ced4.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_ced0

dec_label_pc_cfd8:                                ; preds = %dec_label_pc_cfbc, %dec_label_pc_cec4
  %v0_cfd8 = call i32 @function_ebc8()
  %v1_cfd8 = trunc i32 %v0_cfd8 to i8
  store i32 %v0_cfd8, i32* %r0.global-to-local, align 4
  store i32 %v3_cbf0, i32* %lr.global-to-local, align 4
  %v4_cfe0 = sdiv i32 %v0_cfd8, 256
  store i32 %v4_cfe0, i32* %r3.global-to-local, align 4
  %v1_cfe4 = load i32, i32* @r6, align 4
  %v9_cfe4 = icmp eq i32 %v3_cbf0, %v1_cfe4
  store i1 %v9_cfe4, i1* %cpsr_z.global-to-local, align 1
  %v3_cfe8 = load i32, i32* @r4, align 4
  %v4_cfe8 = add i32 %v3_cfe8, 20
  %v5_cfe8 = inttoptr i32 %v4_cfe8 to i8*
  store i8 %v1_cfd8, i8* %v5_cfe8, align 1
  %v0_cfec = load i32, i32* %r3.global-to-local, align 4
  %v1_cfec = trunc i32 %v0_cfec to i8
  %v2_cfec = load i32, i32* @r5, align 4
  %v3_cfec = add i32 %v2_cfec, 1
  %v4_cfec = inttoptr i32 %v3_cfec to i8*
  store i8 %v1_cfec, i8* %v4_cfec, align 1
  %v0_cff0 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_cff0, label %dec_label_pc_cff4, label %dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge

dec_label_pc_cfd8.dec_label_pc_cedc_crit_edge:    ; preds = %dec_label_pc_cfd8
  %v1_cee0.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_cedc

dec_label_pc_cff4:                                ; preds = %dec_label_pc_cfd8, %dec_label_pc_ced0
  %v0_cff4 = call i32 @function_ebc8()
  %v1_cff4 = trunc i32 %v0_cff4 to i8
  %v4_cff8 = sdiv i32 %v0_cff4, 256
  store i32 %v4_cff8, i32* %r3.global-to-local, align 4
  %v3_cffc = load i32, i32* @r5, align 4
  %v4_cffc = add i32 %v3_cffc, 2
  %v5_cffc = inttoptr i32 %v4_cffc to i8*
  store i8 %v1_cff4, i8* %v5_cffc, align 1
  store i32 %v3_cbf4, i32* %r0.global-to-local, align 4
  %v1_d004 = load i32, i32* @r6, align 4
  %v9_d004 = icmp eq i32 %v3_cbf4, %v1_d004
  store i1 %v9_d004, i1* %cpsr_z.global-to-local, align 1
  %v0_d008 = load i32, i32* %r3.global-to-local, align 4
  %v1_d008 = trunc i32 %v0_d008 to i8
  %v2_d008 = load i32, i32* @r5, align 4
  %v3_d008 = add i32 %v2_d008, 3
  %v4_d008 = inttoptr i32 %v3_d008 to i8*
  store i8 %v1_d008, i8* %v4_d008, align 1
  %v0_d00c = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_d00c, label %dec_label_pc_d010, label %dec_label_pc_cee8

dec_label_pc_d010:                                ; preds = %dec_label_pc_cff4, %dec_label_pc_cedc
  %v0_d010 = call i32 @function_ebc8()
  %v1_d010 = trunc i32 %v0_d010 to i8
  store i32 %v0_d010, i32* %r0.global-to-local, align 4
  %v4_d014 = sdiv i32 %v0_d010, 256
  store i32 %v4_d014, i32* %r3.global-to-local, align 4
  %v3_d018 = load i32, i32* @r4, align 4
  %v4_d018 = add i32 %v3_d018, 28
  %v5_d018 = inttoptr i32 %v4_d018 to i8*
  store i8 %v1_d010, i8* %v5_d018, align 1
  %v0_d01c = load i32, i32* %r3.global-to-local, align 4
  %v1_d01c = trunc i32 %v0_d01c to i8
  %v2_d01c = load i32, i32* @r8, align 4
  %v3_d01c = add i32 %v2_d01c, 1
  %v4_d01c = inttoptr i32 %v3_d01c to i8*
  store i8 %v1_d01c, i8* %v4_d01c, align 1
  br label %dec_label_pc_cee8

dec_label_pc_d024:                                ; preds = %dec_label_pc_caf0, %dec_label_pc_cabc, %dec_label_pc_ca60, %dec_label_pc_c908
  %v0_d024 = call i32 @function_ebc8()
  %v1_d028 = urem i32 %v0_d024, 4
  store i32 %v1_d028, i32* %r0.global-to-local, align 4
  %v2_d02c = icmp eq i32 %v1_d028, 3
  store i1 %v2_d02c, i1* %cpsr_z.global-to-local, align 1
  %trunc = trunc i32 %v0_d024 to i2
  switch i2 %trunc, label %dec_label_pc_cb6419 [
    i2 0, label %dec_label_pc_d06c
    i2 1, label %dec_label_pc_d080
    i2 -2, label %dec_label_pc_d08c
    i2 -1, label %dec_label_pc_d09c
  ]

dec_label_pc_d048:                                ; preds = %dec_label_pc_cbc4
  store i32 %v2_cb74, i32* %r0.global-to-local, align 4
  %v4_d04c = sext i8 %v5_cbe0 to i32
  store i32 %v4_d04c, i32* %r1.global-to-local, align 4
  %v2_d050 = add i32 %v4_d04c, %v2_cb74
  store i32 %v2_d050, i32* @fp, align 4
  br label %dec_label_pc_ce7c

dec_label_pc_d058:                                ; preds = %dec_label_pc_cb98
  store i32 %v3_cb88, i32* %r0.global-to-local, align 4
  %v1_d05c = call i32 @function_11e18(i32 %v3_cb88)
  store i32 %v1_d05c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_d060

dec_label_pc_d060:                                ; preds = %dec_label_pc_cb70, %dec_label_pc_cb64, %dec_label_pc_d058
  %v29_d068 = phi i32 [ %v3_cb88, %dec_label_pc_cb70 ], [ %v29_d06874, %dec_label_pc_cb64 ], [ %v1_d05c, %dec_label_pc_d058 ]
  store i32 %v3_c908, i32* %r4.global-to-local, align 4
  store i32 %v15_c908, i32* %r8.global-to-local, align 4
  store i32 %v18_c908, i32* %sb.global-to-local, align 4
  store i32 %v21_c908, i32* %sl.global-to-local, align 4
  store i32 %v24_c908, i32* %fp.global-to-local, align 4
  ret i32 %v29_d068

dec_label_pc_d06c:                                ; preds = %dec_label_pc_d024
  store i32 134744072, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d080:                                ; preds = %dec_label_pc_d024
  store i32 707416650, i32* @r4, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d08c:                                ; preds = %dec_label_pc_d024
  store i32 104859200, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_cb64

dec_label_pc_d09c:                                ; preds = %dec_label_pc_d024
  store i32 33686020, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_cb64

; uselistorder directives
  uselistorder i32 %v4_d04c, { 0, 2, 1 }
  uselistorder i32 %v1_d028, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v0_d024, { 1, 0 }
  uselistorder i32 %v0_d010, { 0, 2, 1 }
  uselistorder i32 %v0_cfd8, { 0, 2, 1 }
  uselistorder i32 %v4_cfc4, { 1, 0 }
  uselistorder i32 %v0_cfbc, { 0, 2, 1 }
  uselistorder i32 %v1_cf98, { 2, 0, 3, 4, 1 }
  uselistorder i32 %v4_cf34, { 0, 2, 1 }
  uselistorder i32 %v0_cf1c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_cf08, { 1, 0 }
  uselistorder i32 %v2_cf04, { 0, 2, 1 }
  uselistorder i32 %v7_ceb0, { 1, 0, 2 }
  uselistorder i32 %v4_ceec.pre-phi, { 1, 0 }
  uselistorder i32 %v2_ce30, { 1, 0 }
  uselistorder i32 %v1_ce2486, { 1, 0, 2 }
  uselistorder i32 %v1_ce18, { 2, 1, 0 }
  uselistorder i32 %v0_ce18, { 1, 2, 0 }
  uselistorder i32 %v0_ce1831, { 1, 0 }
  uselistorder i32 %v1_ce1832, { 2, 0, 1 }
  uselistorder i8 %extract.t78, { 1, 0 }
  uselistorder i32 %v1_cdec, { 2, 0, 4, 1, 3, 5, 6 }
  uselistorder i32 %v0_cd68, { 1, 0 }
  uselistorder i32 %v3_cca4, { 1, 0, 2 }
  uselistorder i32 %v1_cc6c, { 1, 0 }
  uselistorder i32 %v1_cc60, { 1, 0 }
  uselistorder i32 %v1_cc44, { 1, 0 }
  uselistorder i32 %v1_cc30, { 1, 0 }
  uselistorder i32 %v3_cc28, { 1, 0 }
  uselistorder i32 %v4_cc20, { 0, 4, 2, 5, 3, 1 }
  uselistorder i8 %v5_cbe0, { 1, 0 }
  uselistorder i32 %v0_cbdc, { 0, 1, 2, 4, 3 }
  uselistorder i32 %v0_cbd0, { 0, 1, 2, 4, 3 }
  uselistorder i1 %v7_cbbc, { 1, 0 }
  uselistorder i1 %v7_cb8c, { 1, 0 }
  uselistorder i32 %v3_cb88, { 1, 3, 4, 5, 6, 2, 0, 7 }
  uselistorder i32 %v2_cb74, { 0, 11, 1, 6, 4, 3, 7, 10, 9, 8, 5, 2 }
  uselistorder i32 %stack_var_-2176.0, { 1, 0 }
  uselistorder i32 %v1_cb5c, { 1, 0, 2 }
  uselistorder i1 %v7_cb2c, { 1, 0 }
  uselistorder i32 %v1_cb28, { 1, 0, 2 }
  uselistorder i1 %v8_cb20, { 1, 0 }
  uselistorder i1 %v7_cb1c, { 1, 0 }
  uselistorder i32 %v1_cb10, { 1, 0 }
  uselistorder i8 %v2_cb04, { 2, 0, 1, 3 }
  uselistorder i32 %v0_cb08, { 1, 0 }
  uselistorder i32 %v0_cb28, { 3, 0, 2, 1 }
  uselistorder i32 %v0_caf4, { 0, 2, 1 }
  uselistorder i32 %v1_cb0c, { 0, 2, 1 }
  uselistorder i32 %v2_cadc, { 1, 2, 4, 3, 0, 5 }
  uselistorder i32 %v2_cad4, { 1, 0, 2, 3 }
  uselistorder i32 %v0_cabc, { 1, 2, 0, 3, 4, 5 }
  uselistorder i1 %v7_cab4, { 1, 0 }
  uselistorder i32 %v0_cab4, { 2, 3, 1, 4, 6, 5, 0 }
  uselistorder i32 %v0_ca58, { 1, 0, 3, 2 }
  uselistorder i32 %v5_ca28, { 0, 3, 5, 4, 2, 1, 7, 6 }
  uselistorder i32 %v1_c9ac, { 1, 2, 0 }
  uselistorder i32 %v7_c968, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32 %v6_c944, { 2, 1, 3, 0 }
  uselistorder i32 %v2_c92c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_c914, { 7, 4, 5, 6, 3, 8, 9, 10, 2, 1, 0 }
  uselistorder i32* %stack_var_-40, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 10, 9 }
  uselistorder i32* %r3.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 33, 35, 36, 37, 38, 39, 40, 41, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 6, 5, 7, 51, 8, 50, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 41, 44, 43, 45, 47, 46, 49, 48, 0 }
  uselistorder i32* %r0.global-to-local, { 6, 3, 4, 5, 8, 7, 9, 11, 10, 12, 14, 13, 15, 16, 17, 18, 68, 19, 20, 2, 34, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 35, 36, 37, 39, 41, 40, 42, 1, 43, 45, 44, 47, 46, 48, 49, 50, 51, 52, 54, 53, 56, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 5, 2, 3, 4, 6, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 0, 17, 18, 19, 20, 21, 22, 23 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 22, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 29, 26, 33, 34, 35 }
  uselistorder i32 41, { 2, 3, 4, 0, 1 }
  uselistorder i32 134744072, { 1, 0 }
  uselistorder i32 707416650, { 1, 0 }
  uselistorder i32 104859200, { 1, 0 }
  uselistorder i32 33686020, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32)* @function_85e0, { 67, 68, 69, 70, 71, 72, 73, 74, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 88, 89, 90, 91, 92, 93, 94, 95, 75, 76, 77, 106, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105 }
  uselistorder label %dec_label_pc_d060, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cee8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_ce88, { 1, 0, 2 }
  uselistorder label %dec_label_pc_ce7c, { 1, 0 }
  uselistorder label %bb148, { 1, 0 }
  uselistorder label %bb145, { 1, 0 }
  uselistorder label %.thread20, { 1, 0 }
  uselistorder label %dec_label_pc_cb38, { 1, 0 }
  uselistorder label %dec_label_pc_cb2c, { 1, 0 }
  uselistorder label %dec_label_pc_caf0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_cae8, { 1, 0 }
}

define i32 @function_d0b8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_d0b8:
  %tmp = or i32 %arg1, 1
  %tmp9 = icmp eq i32 %tmp, 1
  br i1 %tmp9, label %dec_label_pc_d0e8, label %dec_label_pc_d0c4

dec_label_pc_d0c4:                                ; preds = %dec_label_pc_d0b8
  %v0_d0c8.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_d0c8

dec_label_pc_d0c8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0c4
  %v0_d0dc = phi i32 [ %v2_d0dc, %dec_label_pc_d0c8 ], [ 0, %dec_label_pc_d0c4 ]
  %v0_d0d0 = phi i32 [ %v1_d0d0, %dec_label_pc_d0c8 ], [ %arg1, %dec_label_pc_d0c4 ]
  %v0_d0e0 = phi i32 [ %v1_d0e0, %dec_label_pc_d0c8 ], [ %v0_d0c8.pre, %dec_label_pc_d0c4 ]
  %v1_d0c8 = inttoptr i32 %v0_d0e0 to i8*
  %v2_d0c8 = load i8, i8* %v1_d0c8, align 1
  %v3_d0c8 = zext i8 %v2_d0c8 to i32
  %v1_d0cc = add i32 %v0_d0e0, 1
  %v2_d0cc = inttoptr i32 %v1_d0cc to i8*
  %v3_d0cc = load i8, i8* %v2_d0cc, align 1
  %v4_d0cc = zext i8 %v3_d0cc to i32
  %v1_d0d0 = add i32 %v0_d0d0, -2
  %v4_d0d4 = mul nuw nsw i32 %v4_d0cc, 256
  %v5_d0d4 = or i32 %v4_d0d4, %v3_d0c8
  %v2_d0dc = add i32 %v5_d0d4, %v0_d0dc
  %v1_d0e0 = add i32 %v0_d0e0, 2
  store i32 %v1_d0e0, i32* @r0, align 4
  %v1_d0d0.cmp = icmp ugt i32 %v1_d0d0, 1
  br i1 %v1_d0d0.cmp, label %dec_label_pc_d0c8, label %dec_label_pc_d0e8

dec_label_pc_d0e8:                                ; preds = %dec_label_pc_d0c8, %dec_label_pc_d0b8
  %v1_d0f0 = phi i32 [ 0, %dec_label_pc_d0b8 ], [ %v2_d0dc, %dec_label_pc_d0c8 ]
  %v0_d0e8 = phi i32 [ %arg1, %dec_label_pc_d0b8 ], [ %v1_d0d0, %dec_label_pc_d0c8 ]
  %v7_d0e8 = icmp eq i32 %v0_d0e8, 1
  br i1 %v7_d0e8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d0e8
  %v1_d0ec = load i32, i32* @r0, align 4
  %v2_d0ec = inttoptr i32 %v1_d0ec to i8*
  %v3_d0ec = load i8, i8* %v2_d0ec, align 1
  %v4_d0ec = zext i8 %v3_d0ec to i32
  %v3_d0f0 = add i32 %v1_d0f0, %v4_d0ec
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d0e8, %bb
  %v0_d0f4 = phi i32 [ %v1_d0f0, %dec_label_pc_d0e8 ], [ %v3_d0f0, %bb ]
  %v3_d0f8 = urem i32 %v0_d0f4, 65536
  %v4_d0fc = udiv i32 %v0_d0f4, 65536
  %v5_d0fc = add nuw nsw i32 %v4_d0fc, %v3_d0f8
  %v4_d100 = udiv i32 %v5_d0fc, 65536
  %v5_d100 = add nuw nsw i32 %v4_d100, %v5_d0fc
  %v1_d104 = urem i32 %v5_d100, 65536
  %v3_d10c = xor i32 %v1_d104, 65535
  ret i32 %v3_d10c

; uselistorder directives
  uselistorder i32 %v5_d0fc, { 1, 0 }
  uselistorder i32 %v1_d0e0, { 1, 0 }
  uselistorder i32 %v1_d0d0, { 1, 0, 2 }
  uselistorder i32 %v0_d0e0, { 0, 2, 1 }
  uselistorder i32 %arg1, { 1, 2, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_d114(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_d114:
  %v3_d124 = urem i32 %arg2, 65536
  %v1_d128 = add i32 %arg1, 12
  %v1_d12c = inttoptr i32 %v1_d128 to i32*
  %v2_d12c = load i32, i32* %v1_d12c, align 4
  %v3_d12c = add i32 %arg1, 16
  %v4_d12c = inttoptr i32 %v3_d12c to i32*
  %v5_d12c = load i32, i32* %v4_d12c, align 4
  %v7_d130 = icmp sgt i32 %arg3, 1
  br i1 %v7_d130, label %dec_label_pc_d13c.preheader, label %dec_label_pc_d15c

dec_label_pc_d13c.preheader:                      ; preds = %dec_label_pc_d114
  %v0_d13c.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_d13c

dec_label_pc_d13c:                                ; preds = %dec_label_pc_d13c.preheader, %dec_label_pc_d13c
  %v0_d150 = phi i32 [ 0, %dec_label_pc_d13c.preheader ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d144 = phi i32 [ %arg3, %dec_label_pc_d13c.preheader ], [ %v1_d144, %dec_label_pc_d13c ]
  %v0_d154 = phi i32 [ %v0_d13c.pre, %dec_label_pc_d13c.preheader ], [ %v1_d154, %dec_label_pc_d13c ]
  %v1_d13c = inttoptr i32 %v0_d154 to i8*
  %v2_d13c = load i8, i8* %v1_d13c, align 1
  %v3_d13c = zext i8 %v2_d13c to i32
  %v1_d140 = add i32 %v0_d154, 1
  %v2_d140 = inttoptr i32 %v1_d140 to i8*
  %v3_d140 = load i8, i8* %v2_d140, align 1
  %v4_d140 = zext i8 %v3_d140 to i32
  %v1_d144 = add nsw i32 %v0_d144, -2
  %v4_d148 = mul nuw nsw i32 %v4_d140, 256
  %v5_d148 = or i32 %v4_d148, %v3_d13c
  %v2_d150 = add i32 %v5_d148, %v0_d150
  %v1_d154 = add i32 %v0_d154, 2
  store i32 %v1_d154, i32* @r1, align 4
  %v8_d158 = icmp sgt i32 %v1_d144, 1
  br i1 %v8_d158, label %dec_label_pc_d13c, label %dec_label_pc_d15c

dec_label_pc_d15c:                                ; preds = %dec_label_pc_d13c, %dec_label_pc_d114
  %v1_d164 = phi i32 [ 0, %dec_label_pc_d114 ], [ %v2_d150, %dec_label_pc_d13c ]
  %v0_d15c = phi i32 [ %arg3, %dec_label_pc_d114 ], [ %v1_d144, %dec_label_pc_d13c ]
  %v7_d15c = icmp eq i32 %v0_d15c, 1
  br i1 %v7_d15c, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_d15c
  %v1_d160 = load i32, i32* @r1, align 4
  %v2_d160 = inttoptr i32 %v1_d160 to i8*
  %v3_d160 = load i8, i8* %v2_d160, align 1
  %v4_d160 = zext i8 %v3_d160 to i32
  %v3_d164 = add i32 %v4_d160, %v1_d164
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_d15c, %bb
  %v0_d188 = phi i32 [ %v1_d164, %dec_label_pc_d15c ], [ %v3_d164, %bb ]
  %v3_d16c = urem i32 %v2_d12c, 65536
  %v1_d174 = add i32 %arg1, 9
  %v2_d174 = inttoptr i32 %v1_d174 to i8*
  %v3_d174 = load i8, i8* %v2_d174, align 1
  %v4_d174 = zext i8 %v3_d174 to i32
  %v3_d178 = urem i32 %v5_d12c, 65536
  %v4_d17c = udiv i32 %v2_d12c, 65536
  %v3_d184 = mul nuw nsw i32 %v4_d174, 256
  %v4_d188 = udiv i32 %v5_d12c, 65536
  %v5_d188 = add i32 %v0_d188, %v4_d188
  %v2_d18c = add i32 %v5_d188, %v3_d184
  %v5_d17c = add nuw nsw i32 %v3_d16c, %v3_d124
  %v2_d180 = add nuw nsw i32 %v5_d17c, %v4_d17c
  %v2_d190 = add nuw nsw i32 %v2_d180, %v3_d178
  %v2_d194 = add i32 %v2_d18c, %v2_d190
  %tmp = icmp ult i32 %v2_d194, 65536
  br i1 %tmp, label %dec_label_pc_d1b4, label %dec_label_pc_d1a0

dec_label_pc_d1a0:                                ; preds = %.thread, %dec_label_pc_d1a0
  %v2_d1a81 = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2.in = phi i32 [ %v2_d1a8, %dec_label_pc_d1a0 ], [ %v2_d194, %.thread ]
  %v3_d1ac2 = udiv i32 %v3_d1ac2.in, 65536
  %v3_d1a4 = urem i32 %v2_d1a81, 65536
  %v2_d1a8 = add nuw nsw i32 %v3_d1a4, %v3_d1ac2
  %tmp14 = icmp ult i32 %v2_d1a8, 65536
  br i1 %tmp14, label %dec_label_pc_d1b4.loopexit, label %dec_label_pc_d1a0

dec_label_pc_d1b4.loopexit:                       ; preds = %dec_label_pc_d1a0
  br label %dec_label_pc_d1b4

dec_label_pc_d1b4:                                ; preds = %dec_label_pc_d1b4.loopexit, %.thread
  %v0_d1b4 = phi i32 [ %v2_d1a8, %dec_label_pc_d1b4.loopexit ], [ %v2_d194, %.thread ]
  %v1_d1b4 = urem i32 %v0_d1b4, 65536
  %v3_d1bc = xor i32 %v1_d1b4, 65535
  ret i32 %v3_d1bc

; uselistorder directives
  uselistorder i32 %v2_d1a8, { 2, 1, 3, 0 }
  uselistorder i32 %v2_d194, { 3, 0, 2, 1 }
  uselistorder i32 %v1_d164, { 1, 0 }
  uselistorder i32 %v1_d154, { 1, 0 }
  uselistorder i32 %v1_d144, { 0, 2, 1 }
  uselistorder i32 %v0_d154, { 0, 2, 1 }
  uselistorder i32 %arg3, { 2, 1, 0 }
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d1a0, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_d13c, { 1, 0 }
}

define i32 @function_d1c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1c4:
  %v2_d1c8 = load i32, i32* @global_var_1d23c.62, align 4
  %v2_d1d0 = call i32 @function_11f18(i32 %v2_d1c8, i32 9)
  %v0_d1d4 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_d1d4, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_d1c4
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_d1c4, %bb
  ret i32 %v2_d1d0

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_d1d8(i32 %arg1) local_unnamed_addr {
dec_label_pc_d1d8:
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-581 = alloca i8, align 1
  %stack_var_-8773 = alloca i32, align 4
  %stack_var_-4677 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d1d8 = load i32, i32* @r4, align 4
  store i32 %v3_d1d8, i32* %stack_var_-36, align 4
  %v6_d1d8 = load i32, i32* @r5, align 4
  %v9_d1d8 = load i32, i32* @r6, align 4
  %v12_d1d8 = load i32, i32* @r7, align 4
  %v15_d1d8 = load i32, i32* @r8, align 4
  %v18_d1d8 = load i32, i32* @sb, align 4
  %v21_d1d8 = load i32, i32* @sl, align 4
  %v24_d1d8 = load i32, i32* @fp, align 4
  %v2_d1ec = ptrtoint i32* %stack_var_-4677 to i32
  store i32 %v2_d1ec, i32* @sl, align 4
  %v3_d1f4 = mul i32 %arg1, 65536
  store i32 %v3_d1f4, i32* @r5, align 4
  store i32 4096, i32* @r2, align 4
  %v2_d200 = ptrtoint i32* %stack_var_-8773 to i32
  %v2_d20c = bitcast i32* %stack_var_-4677 to i8*
  %v3_d20c = call i32 @function_12450(i8* %v2_d20c, i32 0)
  store i32 4096, i32* @r2, align 4
  %v2_d224 = bitcast i32* %stack_var_-8773 to i8*
  %v3_d224 = call i32 @function_12450(i8* %v2_d224, i32 0)
  %v2_d228 = ptrtoint i8* %stack_var_-581 to i32
  store i32 %v2_d228, i32* @r6, align 4
  store i32 513, i32* @r2, align 4
  %v3_d248 = call i32 @function_12450(i8* nonnull %stack_var_-581, i32 0)
  %v2_d24c = ptrtoint i8* %stack_var_-68 to i32
  %v1_d254 = load i32, i32* @r5, align 4
  %v4_d254 = udiv i32 %v1_d254, 16777216
  store i32 0, i32* @r4, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v3_d274 = trunc i32 %v4_d254 to i8
  %v4_d274 = call i32 @function_11978(i8 %v3_d274, i32 16, i32 %v2_d24c)
  %v2_d27c = call i32 @function_11514(i8* nonnull %stack_var_-68)
  %v7_d280 = icmp eq i32 %v2_d27c, 2
  br i1 %v7_d280, label %dec_label_pc_d748, label %dec_label_pc_d288

dec_label_pc_d288:                                ; preds = %dec_label_pc_d1d8, %dec_label_pc_d748
  %v1_d28c = call i32 @function_10e50(i32 15)
  %v1_d294 = call i32 @function_10e50(i32 16)
  %v1_d29c = call i32 @function_10e50(i32 17)
  %v1_d2a4 = call i32 @function_10e50(i32 19)
  %v0_d2a8 = load i32, i32* @r4, align 4
  %v2_d2b0 = inttoptr i32 %v0_d2a8 to i32*
  %v3_d2b0 = call i32 @function_10d6c(i32 19, i32* %v2_d2b0)
  %v0_d2b4 = load i32, i32* @r4, align 4
  %v2_d2b8 = inttoptr i32 %v3_d2b0 to i8*
  %v3_d2b8 = call i32 @function_11f44(i8* %v2_d2b8, i32 %v0_d2b4)
  %v7_d2bc = icmp eq i32 %v3_d2b8, -1
  store i32 %v3_d2b8, i32* @r8, align 4
  br i1 %v7_d2bc, label %dec_label_pc_d6e4, label %dec_label_pc_d2c8.preheader

dec_label_pc_d2c8.preheader:                      ; preds = %dec_label_pc_d288
  %v4_d2d458 = call i32 @function_1176c(i8* nonnull %stack_var_-581, i32 512, i32 %v3_d2b8)
  %v2_d2d860 = icmp eq i32 %v4_d2d458, 0
  br i1 %v2_d2d860, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0.lr.ph

dec_label_pc_d2e0.lr.ph:                          ; preds = %dec_label_pc_d2c8.preheader
  %v2_d328 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_d2e0

dec_label_pc_d2e0:                                ; preds = %dec_label_pc_d2e0.lr.ph, %dec_label_pc_d2c8.backedge
  %v3_d2e4 = load i8, i8* %stack_var_-581, align 1
  %v4_d2e4 = sext i8 %v3_d2e4 to i32
  %v2_d2e8 = icmp eq i8 %v3_d2e4, 0
  br i1 %v2_d2e8, label %bb125, label %bb

bb:                                               ; preds = %dec_label_pc_d2e0
  %v8_d2ec = icmp eq i8 %v3_d2e4, 58
  br i1 %v8_d2ec, label %.thread6, label %dec_label_pc_d300

.thread6:                                         ; preds = %bb
  br label %dec_label_pc_d318

bb125:                                            ; preds = %dec_label_pc_d2e0
  br label %dec_label_pc_d318

dec_label_pc_d300:                                ; preds = %bb
  %v1_d308.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_d304

dec_label_pc_d304:                                ; preds = %bb126, %dec_label_pc_d300
  %v0_d304 = phi i32 [ %v1_d304, %bb126 ], [ 0, %dec_label_pc_d300 ]
  %v1_d304 = add i32 %v0_d304, 1
  %v2_d308 = add i32 %v1_d304, %v1_d308.pre
  %v3_d308 = inttoptr i32 %v2_d308 to i8*
  %v4_d308 = load i8, i8* %v3_d308, align 1
  %v6_d308 = zext i8 %v4_d308 to i32
  %v2_d30c = icmp eq i8 %v4_d308, 0
  br i1 %v2_d30c, label %dec_label_pc_d318, label %bb126

bb126:                                            ; preds = %dec_label_pc_d304
  %v8_d310 = icmp eq i8 %v4_d308, 58
  br i1 %v8_d310, label %dec_label_pc_d318, label %dec_label_pc_d304

dec_label_pc_d318:                                ; preds = %dec_label_pc_d304, %bb126, %bb125, %.thread6
  %v1_d344 = phi i32 [ 0, %.thread6 ], [ 0, %bb125 ], [ %v1_d304, %bb126 ], [ %v1_d304, %dec_label_pc_d304 ]
  %v0_d318 = phi i32 [ %v4_d2e4, %.thread6 ], [ %v4_d2e4, %bb125 ], [ %v6_d308, %bb126 ], [ %v6_d308, %dec_label_pc_d304 ]
  %v2_d318 = icmp eq i32 %v0_d318, 0
  br i1 %v2_d318, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d320

dec_label_pc_d2c8.backedge:                       ; preds = %dec_label_pc_d318, %dec_label_pc_d3f0, %dec_label_pc_d430, %dec_label_pc_d364
  %v0_d2d0 = load i32, i32* @r8, align 4
  %v4_d2d4 = call i32 @function_1176c(i8* nonnull %stack_var_-581, i32 512, i32 %v0_d2d0)
  %v2_d2d8 = icmp eq i32 %v4_d2d4, 0
  br i1 %v2_d2d8, label %dec_label_pc_d468.loopexit, label %dec_label_pc_d2e0

dec_label_pc_d320:                                ; preds = %dec_label_pc_d318
  %v1_d324 = add i32 %v1_d344, 2
  %v2_d32c = add i32 %v1_d324, %v2_d328
  %v1_d330 = add i32 %v2_d32c, -545
  %v2_d330 = inttoptr i32 %v1_d330 to i8*
  %v3_d330 = load i8, i8* %v2_d330, align 1
  %v2_d334 = icmp eq i8 %v3_d330, 0
  br i1 %v2_d334, label %bb128, label %bb127

bb127:                                            ; preds = %dec_label_pc_d320
  %v8_d338 = icmp eq i8 %v3_d330, 32
  br i1 %v8_d338, label %.thread10, label %dec_label_pc_d344

.thread10:                                        ; preds = %bb127
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

bb128:                                            ; preds = %dec_label_pc_d320
  store i32 %v1_d324, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d344:                                ; preds = %bb127
  %v0_d344 = load i32, i32* @r6, align 4
  %v2_d344 = add i32 %v0_d344, %v1_d344
  br label %dec_label_pc_d348

dec_label_pc_d348:                                ; preds = %bb129, %dec_label_pc_d344
  %v0_d35413 = phi i32 [ %v1_d354, %bb129 ], [ %v2_d344, %dec_label_pc_d344 ]
  %v1_d348 = add i32 %v0_d35413, 3
  %v2_d348 = inttoptr i32 %v1_d348 to i8*
  %v3_d348 = load i8, i8* %v2_d348, align 1
  %v2_d34c = icmp eq i8 %v3_d348, 0
  br i1 %v2_d34c, label %.thread12, label %bb129

.thread12:                                        ; preds = %dec_label_pc_d348
  %v1_d35414 = add i32 %v0_d35413, 1
  br label %dec_label_pc_d35c

bb129:                                            ; preds = %dec_label_pc_d348
  %v8_d350 = icmp eq i8 %v3_d348, 32
  %v1_d354 = add i32 %v0_d35413, 1
  br i1 %v8_d350, label %dec_label_pc_d35c, label %dec_label_pc_d348

dec_label_pc_d35c:                                ; preds = %bb129, %.thread12
  %v1_d35415 = phi i32 [ %v1_d35414, %.thread12 ], [ %v1_d354, %bb129 ]
  %v2_d35c = sub i32 %v1_d35415, %v0_d344
  %v1_d360 = add i32 %v2_d35c, 2
  store i32 %v1_d360, i32* @r5, align 4
  br label %dec_label_pc_d364

dec_label_pc_d364:                                ; preds = %bb128, %.thread10, %dec_label_pc_d35c
  %v1_d370 = phi i32 [ %v1_d324, %.thread10 ], [ %v1_d324, %bb128 ], [ %v1_d360, %dec_label_pc_d35c ]
  %v0_d364 = load i32, i32* @r6, align 4
  %v2_d364 = add i32 %v0_d364, %v1_d324
  store i32 %v2_d364, i32* @r4, align 4
  %v2_d370 = add i32 %v1_d370, %v2_d328
  store i32 0, i32* @r7, align 4
  %v3_d37c = add i32 %v2_d370, -545
  %v4_d37c = inttoptr i32 %v3_d37c to i8*
  store i8 0, i8* %v4_d37c, align 1
  %v1_d380 = inttoptr i32 %v2_d364 to i8*
  %v2_d380 = call i32 @function_11514(i8* %v1_d380)
  store i32 %v2_d380, i32* @r1, align 4
  %v0_d38c = load i32, i32* @r4, align 4
  %v3_d390 = inttoptr i32 %v0_d38c to i8*
  %v4_d390 = call i32 @function_11868(i8* %v3_d390, i32 %v2_d380, i32 %v2_d24c)
  %v7_d394 = icmp eq i32 %v4_d390, -1
  br i1 %v7_d394, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3b0.preheader

dec_label_pc_d3b0.preheader:                      ; preds = %dec_label_pc_d364
  %v1_d398 = load i32, i32* @r7, align 4
  %v1_d39c = load i32, i32* @r6, align 4
  %v2_d39c = load i32, i32* @r5, align 4
  %v3_d39c = add i32 %v2_d39c, %v1_d39c
  store i32 %v1_d398, i32* @lr, align 4
  store i32 %v1_d398, i32* @r4, align 4
  %v1_d3b050 = add i32 %v3_d39c, 2
  %v2_d3b051 = inttoptr i32 %v1_d3b050 to i8*
  %v3_d3b052 = load i8, i8* %v2_d3b051, align 1
  %v2_d3b454 = icmp eq i8 %v3_d3b052, 0
  %v1_d3b856 = add i32 %v2_d39c, 2
  br i1 %v2_d3b454, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d3c0:                                ; preds = %dec_label_pc_d3b0.preheader, %dec_label_pc_d3b0.backedge
  %v0_d3f086 = phi i32 [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3d8.pr = phi i32 [ %v0_d3d8.pr71, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d6f4 = phi i32 [ %v0_d6f474, %dec_label_pc_d3b0.backedge ], [ %v1_d398, %dec_label_pc_d3b0.preheader ]
  %v0_d3b882 = phi i32 [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v1_d3b856, %dec_label_pc_d3b0.preheader ]
  %v0_d3e8 = phi i32 [ %v0_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d39c, %dec_label_pc_d3b0.preheader ]
  %v1_d3c4.in = phi i8 [ %v3_d3b0, %dec_label_pc_d3b0.backedge ], [ %v3_d3b052, %dec_label_pc_d3b0.preheader ]
  %v7_d3c0 = icmp eq i8 %v1_d3c4.in, 9
  br i1 %v7_d3c0, label %.thread23, label %bb130

bb130:                                            ; preds = %dec_label_pc_d3c0
  %v8_d3c4 = icmp eq i8 %v1_d3c4.in, 32
  br i1 %v8_d3c4, label %.thread23.thread35, label %dec_label_pc_d3d8

.thread23.thread35:                               ; preds = %bb130
  br label %dec_label_pc_d3e4

.thread23:                                        ; preds = %dec_label_pc_d3c0
  br label %dec_label_pc_d3e4

dec_label_pc_d3d8:                                ; preds = %bb130
  %v7_d3d8 = icmp eq i32 %v0_d3d8.pr, 1
  br i1 %v7_d3d8, label %dec_label_pc_d6f4, label %dec_label_pc_d3e0

dec_label_pc_d3e0:                                ; preds = %dec_label_pc_d6f4, %dec_label_pc_d3d8
  %v0_d3e479 = phi i32 [ %v1_d6f4, %dec_label_pc_d6f4 ], [ %v0_d6f4, %dec_label_pc_d3d8 ]
  br label %dec_label_pc_d3e4

dec_label_pc_d3e4:                                ; preds = %.thread23, %.thread23.thread35, %dec_label_pc_d3e0
  %v0_d3e4 = phi i32 [ %v0_d6f4, %.thread23.thread35 ], [ %v0_d6f4, %.thread23 ], [ %v0_d3e479, %dec_label_pc_d3e0 ]
  %v0_d3d8.pr72 = phi i32 [ 1, %.thread23.thread35 ], [ 1, %.thread23 ], [ 0, %dec_label_pc_d3e0 ]
  %v7_d3ec = icmp sgt i32 %v0_d3e4, 6
  br i1 %v7_d3ec, label %dec_label_pc_d3f0, label %dec_label_pc_d3b0.backedge

dec_label_pc_d3f0:                                ; preds = %dec_label_pc_d3b0.backedge, %dec_label_pc_d3e4, %dec_label_pc_d3b0.preheader
  %v1_d43c = phi i32 [ %v1_d3b856, %dec_label_pc_d3b0.preheader ], [ %v1_d3b8, %dec_label_pc_d3b0.backedge ], [ %v0_d3b882, %dec_label_pc_d3e4 ]
  %v0_d3f0 = phi i32 [ %v1_d398, %dec_label_pc_d3b0.preheader ], [ %v0_d3f085, %dec_label_pc_d3b0.backedge ], [ %v0_d3f086, %dec_label_pc_d3e4 ]
  %v2_d3f0 = icmp eq i32 %v0_d3f0, 0
  br i1 %v2_d3f0, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d3fc

dec_label_pc_d3fc:                                ; preds = %dec_label_pc_d3f0
  %v2_d404 = add i32 %v1_d43c, %v2_d328
  %v1_d408 = add i32 %v2_d404, -545
  %v2_d408 = inttoptr i32 %v1_d408 to i8*
  %v3_d408 = load i8, i8* %v2_d408, align 1
  %v2_d40c = icmp eq i8 %v3_d408, 0
  br i1 %v2_d40c, label %dec_label_pc_d430, label %bb131

bb131:                                            ; preds = %dec_label_pc_d3fc
  %v8_d410 = icmp eq i8 %v3_d408, 32
  br i1 %v8_d410, label %dec_label_pc_d430, label %dec_label_pc_d418

dec_label_pc_d418:                                ; preds = %bb131
  %v2_d418 = add i32 %v1_d43c, %v1_d39c
  br label %dec_label_pc_d41c

dec_label_pc_d41c:                                ; preds = %bb132, %dec_label_pc_d418
  %v0_d42828 = phi i32 [ %v1_d428, %bb132 ], [ %v1_d43c, %dec_label_pc_d418 ]
  %v0_d41c = phi i32 [ %v1_d41c, %bb132 ], [ %v2_d418, %dec_label_pc_d418 ]
  %v1_d41c = add i32 %v0_d41c, 1
  %v2_d41c = inttoptr i32 %v1_d41c to i8*
  %v3_d41c = load i8, i8* %v2_d41c, align 1
  %v2_d420 = icmp eq i8 %v3_d41c, 0
  br i1 %v2_d420, label %.thread27, label %bb132

.thread27:                                        ; preds = %dec_label_pc_d41c
  %v1_d42829 = add i32 %v0_d42828, 1
  br label %dec_label_pc_d430

bb132:                                            ; preds = %dec_label_pc_d41c
  %v8_d424 = icmp eq i8 %v3_d41c, 32
  %v1_d428 = add i32 %v0_d42828, 1
  br i1 %v8_d424, label %dec_label_pc_d430, label %dec_label_pc_d41c

dec_label_pc_d430:                                ; preds = %bb132, %dec_label_pc_d3fc, %.thread27, %bb131
  %v1_d438 = phi i32 [ %v1_d43c, %dec_label_pc_d3fc ], [ %v1_d42829, %.thread27 ], [ %v1_d43c, %bb131 ], [ %v1_d428, %bb132 ]
  %v2_d438 = add i32 %v1_d438, %v2_d328
  %v2_d43c = add i32 %v1_d43c, %v1_d39c
  store i32 %v2_d43c, i32* @r4, align 4
  %v3_d448 = add i32 %v2_d438, -545
  %v4_d448 = inttoptr i32 %v3_d448 to i8*
  store i8 0, i8* %v4_d448, align 1
  %v1_d44c = inttoptr i32 %v2_d43c to i8*
  %v2_d44c = call i32 @function_11514(i8* %v1_d44c)
  %v8_d454 = icmp sgt i32 %v2_d44c, 15
  br i1 %v8_d454, label %dec_label_pc_d2c8.backedge, label %dec_label_pc_d458

dec_label_pc_d458:                                ; preds = %dec_label_pc_d430
  %v0_d45c = load i32, i32* @r4, align 4
  %v2_d460 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_d460, i32* @r0, align 4
  %v2_d464 = bitcast i32* %stack_var_-52 to i8*
  %v3_d464 = call i32 @function_1153c(i8* %v2_d464, i32 %v0_d45c)
  br label %dec_label_pc_d468

dec_label_pc_d468.loopexit:                       ; preds = %dec_label_pc_d2c8.backedge, %dec_label_pc_d2c8.preheader
  %.pre = ptrtoint i32* %stack_var_-52 to i32
  %.pre94 = bitcast i32* %stack_var_-52 to i8*
  br label %dec_label_pc_d468

dec_label_pc_d468:                                ; preds = %dec_label_pc_d468.loopexit, %dec_label_pc_d458
  %v1_d478.pre-phi = phi i8* [ %.pre94, %dec_label_pc_d468.loopexit ], [ %v2_d464, %dec_label_pc_d458 ]
  %v2_d474.pre-phi = phi i32 [ %.pre, %dec_label_pc_d468.loopexit ], [ %v2_d460, %dec_label_pc_d458 ]
  %v0_d468 = load i32, i32* @r8, align 4
  %v1_d46c = call i32 @function_11e18(i32 %v0_d468)
  %v2_d478 = call i32 @function_11514(i8* %v1_d478.pre-phi)
  store i32 %v2_d478, i32* @r4, align 4
  %v2_d47c = icmp eq i32 %v2_d478, 0
  br i1 %v2_d47c, label %dec_label_pc_d724, label %dec_label_pc_d484

dec_label_pc_d484:                                ; preds = %dec_label_pc_d468
  %v3_d48c = call i32 @function_10d6c(i32 15, i32* null)
  store i32 %v3_d48c, i32* @r0, align 4
  %v1_d490 = call i32 @function_12220(i32 %v3_d48c)
  store i32 %v1_d490, i32* @r8, align 4
  %v2_d494 = icmp eq i32 %v1_d490, 0
  br i1 %v2_d494, label %dec_label_pc_d6c4, label %dec_label_pc_d4a4.preheader

dec_label_pc_d4a4.preheader:                      ; preds = %dec_label_pc_d484
  store i32 0, i32* @r5, align 4
  %v1_d4a845 = inttoptr i32 %v1_d490 to i32*
  %v2_d4a846 = call i32 @function_1231c(i32* %v1_d4a845)
  %v2_d4ac48 = icmp eq i32 %v2_d4a846, 0
  br i1 %v2_d4ac48, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4a4.loopexit:                       ; preds = %dec_label_pc_d4bc, %dec_label_pc_d4d0, %dec_label_pc_d538
  %v0_d4a4 = load i32, i32* @r8, align 4
  %v1_d4a8 = inttoptr i32 %v0_d4a4 to i32*
  %v2_d4a8 = call i32 @function_1231c(i32* %v1_d4a8)
  %v2_d4ac = icmp eq i32 %v2_d4a8, 0
  br i1 %v2_d4ac, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4.preheader

dec_label_pc_d4b4.preheader:                      ; preds = %dec_label_pc_d4a4.preheader, %dec_label_pc_d4a4.loopexit
  %v0_d4bc93 = phi i32 [ %v2_d4a8, %dec_label_pc_d4a4.loopexit ], [ %v2_d4a846, %dec_label_pc_d4a4.preheader ]
  br label %dec_label_pc_d4b4

dec_label_pc_d4b4:                                ; preds = %dec_label_pc_d4b4.preheader, %dec_label_pc_d6a0
  %v0_d4c8 = phi i32 [ %v0_d4bc93, %dec_label_pc_d4b4.preheader ], [ %v2_d6ac, %dec_label_pc_d6a0 ]
  %v0_d4b4 = load i32, i32* @r5, align 4
  %v2_d4b4 = icmp eq i32 %v0_d4b4, 0
  br i1 %v2_d4b4, label %dec_label_pc_d4bc, label %dec_label_pc_d6b8

dec_label_pc_d4bc:                                ; preds = %dec_label_pc_d4b4
  %v1_d4bc = add i32 %v0_d4c8, 11
  %v2_d4bc = inttoptr i32 %v1_d4bc to i8*
  %v3_d4bc = load i8, i8* %v2_d4bc, align 1
  %v4_d4bc = zext i8 %v3_d4bc to i32
  %v1_d4c0 = add nsw i32 %v4_d4bc, -48
  store i32 %v1_d4bc, i32* @r7, align 4
  %tmp = icmp ugt i32 %v1_d4c0, 9
  br i1 %tmp, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d4d0

dec_label_pc_d4d0:                                ; preds = %dec_label_pc_d4bc
  %v3_d4d8 = call i32 @function_10d6c(i32 15, i32* null)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d4e4 = call i32 @function_1153c(i8* %v2_d20c, i32 %v3_d4d8)
  %v2_d4ec = call i32 @function_11514(i8* %v2_d20c)
  %v0_d4f0 = load i32, i32* @r7, align 4
  %v0_d4f4 = load i32, i32* @sl, align 4
  %v2_d4f4 = add i32 %v0_d4f4, %v2_d4ec
  store i32 %v2_d4f4, i32* @r0, align 4
  %v2_d4f8 = inttoptr i32 %v2_d4f4 to i8*
  %v3_d4f8 = call i32 @function_1153c(i8* %v2_d4f8, i32 %v0_d4f0)
  %v2_d500 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d504 = load i32, i32* @r5, align 4
  store i32 %v2_d500, i32* @r4, align 4
  %v2_d510 = inttoptr i32 %v0_d504 to i32*
  %v3_d510 = call i32 @function_10d6c(i32 16, i32* %v2_d510)
  %v0_d518 = load i32, i32* @sl, align 4
  %v1_d518 = load i32, i32* @r4, align 4
  %v2_d518 = add i32 %v1_d518, %v0_d518
  store i32 %v2_d518, i32* @r0, align 4
  %v2_d51c = inttoptr i32 %v2_d518 to i8*
  %v3_d51c = call i32 @function_1153c(i8* %v2_d51c, i32 %v3_d510)
  %v4_d52c = call i32 @function_1200c(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d530 = icmp eq i32 %v4_d52c, -1
  br i1 %v7_d530, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d538

dec_label_pc_d538:                                ; preds = %dec_label_pc_d4d0
  %v0_d538 = load i32, i32* @r5, align 4
  %v2_d540 = inttoptr i32 %v0_d538 to i32*
  %v3_d540 = call i32 @function_10d6c(i32 15, i32* %v2_d540)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d54c = call i32 @function_1153c(i8* %v2_d20c, i32 %v3_d540)
  %v2_d554 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d558 = load i32, i32* @r7, align 4
  %v0_d55c = load i32, i32* @sl, align 4
  %v2_d55c = add i32 %v0_d55c, %v2_d554
  store i32 %v2_d55c, i32* @r0, align 4
  %v2_d560 = inttoptr i32 %v2_d55c to i8*
  %v3_d560 = call i32 @function_1153c(i8* %v2_d560, i32 %v0_d558)
  %v2_d568 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d56c = load i32, i32* @r5, align 4
  store i32 %v2_d568, i32* @r4, align 4
  %v2_d578 = inttoptr i32 %v0_d56c to i32*
  %v3_d578 = call i32 @function_10d6c(i32 17, i32* %v2_d578)
  %v0_d580 = load i32, i32* @sl, align 4
  %v1_d580 = load i32, i32* @r4, align 4
  %v2_d580 = add i32 %v1_d580, %v0_d580
  store i32 %v2_d580, i32* @r0, align 4
  %v2_d584 = inttoptr i32 %v2_d580 to i8*
  %v3_d584 = call i32 @function_1153c(i8* %v2_d584, i32 %v3_d578)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v1_d58c = call i32 @function_12220(i32 %v2_d1ec)
  store i32 %v1_d58c, i32* @sb, align 4
  %v2_d590 = icmp eq i32 %v1_d58c, 0
  br i1 %v2_d590, label %dec_label_pc_d4a4.loopexit, label %dec_label_pc_d598.preheader

dec_label_pc_d598.preheader:                      ; preds = %dec_label_pc_d538
  %v1_d59c40 = inttoptr i32 %v1_d58c to i32*
  %v2_d59c41 = call i32 @function_1231c(i32* %v1_d59c40)
  store i32 %v2_d59c41, i32* @r6, align 4
  %v2_d5a043 = icmp eq i32 %v2_d59c41, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a043, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d598.loopexit:                       ; preds = %dec_label_pc_d5b8, %dec_label_pc_d650
  %v0_d598 = load i32, i32* @sb, align 4
  %v1_d59c = inttoptr i32 %v0_d598 to i32*
  %v2_d59c = call i32 @function_1231c(i32* %v1_d59c)
  store i32 %v2_d59c, i32* @r6, align 4
  %v2_d5a0 = icmp eq i32 %v2_d59c, 0
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d5a0, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0thread-pre-split

dec_label_pc_d5b0thread-pre-split:                ; preds = %dec_label_pc_d598.preheader, %dec_label_pc_d598.loopexit
  %v0_d5b0.pr = load i32, i32* @r5, align 4
  br label %dec_label_pc_d5b0

dec_label_pc_d5b0:                                ; preds = %dec_label_pc_d5b0thread-pre-split, %dec_label_pc_d678
  %v0_d5b0 = phi i32 [ %v0_d5b0.pr, %dec_label_pc_d5b0thread-pre-split ], [ 1, %dec_label_pc_d678 ]
  %v2_d5b0 = icmp eq i32 %v0_d5b0, 0
  br i1 %v2_d5b0, label %dec_label_pc_d5b8, label %dec_label_pc_d6a0

dec_label_pc_d5b8:                                ; preds = %dec_label_pc_d5b0
  %v0_d5b8 = call i32 @function_115b4()
  %v0_d5bc = load i32, i32* @r5, align 4
  %v2_d5c4 = inttoptr i32 %v0_d5bc to i32*
  %v3_d5c4 = call i32 @function_10d6c(i32 15, i32* %v2_d5c4)
  store i32 %v2_d1ec, i32* @r0, align 4
  %v3_d5d0 = call i32 @function_1153c(i8* %v2_d20c, i32 %v3_d5c4)
  %v2_d5d8 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d5dc = load i32, i32* @r7, align 4
  %v0_d5e0 = load i32, i32* @sl, align 4
  %v2_d5e0 = add i32 %v0_d5e0, %v2_d5d8
  store i32 %v2_d5e0, i32* @r0, align 4
  %v2_d5e4 = inttoptr i32 %v2_d5e0 to i8*
  %v3_d5e4 = call i32 @function_1153c(i8* %v2_d5e4, i32 %v0_d5dc)
  %v2_d5ec = call i32 @function_11514(i8* %v2_d20c)
  %v0_d5f0 = load i32, i32* @r5, align 4
  store i32 %v2_d5ec, i32* @r4, align 4
  %v2_d5fc = inttoptr i32 %v0_d5f0 to i32*
  %v3_d5fc = call i32 @function_10d6c(i32 17, i32* %v2_d5fc)
  %v0_d604 = load i32, i32* @sl, align 4
  %v1_d604 = load i32, i32* @r4, align 4
  %v2_d604 = add i32 %v1_d604, %v0_d604
  store i32 %v2_d604, i32* @r0, align 4
  %v2_d608 = inttoptr i32 %v2_d604 to i8*
  %v3_d608 = call i32 @function_1153c(i8* %v2_d608, i32 %v3_d5fc)
  %v2_d610 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d618 = load i32, i32* @sl, align 4
  %v2_d618 = add i32 %v0_d618, %v2_d610
  store i32 %v2_d618, i32* @r0, align 4
  %v2_d61c = inttoptr i32 %v2_d618 to i8*
  %v3_d61c = call i32 @function_1153c(i8* %v2_d61c, i32 ptrtoint (i32* @global_var_146b4.64 to i32))
  %v2_d624 = call i32 @function_11514(i8* %v2_d20c)
  %v0_d628 = load i32, i32* @r6, align 4
  %v1_d628 = add i32 %v0_d628, 11
  %v0_d62c = load i32, i32* @sl, align 4
  %v2_d62c = add i32 %v0_d62c, %v2_d624
  store i32 %v2_d62c, i32* @r0, align 4
  %v2_d630 = inttoptr i32 %v2_d62c to i8*
  %v3_d630 = call i32 @function_1153c(i8* %v2_d630, i32 %v1_d628)
  %v4_d640 = call i32 @function_1200c(i8* %v2_d20c, i32 %v2_d200, i32 4096)
  %v7_d644 = icmp eq i32 %v4_d640, -1
  br i1 %v7_d644, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d650

dec_label_pc_d650:                                ; preds = %dec_label_pc_d5b8
  %v2_d650 = call i32 @function_11514(i8* %v2_d224)
  store i32 %v2_d650, i32* @r1, align 4
  %v4_d664 = call i32 @function_11868(i8* %v2_d224, i32 %v2_d650, i32 %v2_d474.pre-phi)
  %v7_d668 = icmp eq i32 %v4_d664, -1
  br i1 %v7_d668, label %dec_label_pc_d598.loopexit, label %dec_label_pc_d678

dec_label_pc_d678:                                ; preds = %dec_label_pc_d650
  %v0_d670 = load i32, i32* @r7, align 4
  %v2_d678 = inttoptr i32 %v0_d670 to i8*
  %v3_d678 = call i32 @function_11640(i8* %v2_d678, i32 10)
  %v2_d680 = call i32 @function_11f18(i32 %v3_d678, i32 9)
  %v0_d684 = load i32, i32* @sb, align 4
  %v1_d688 = inttoptr i32 %v0_d684 to i32*
  %v2_d688 = call i32 @function_1231c(i32* %v1_d688)
  store i32 %v2_d688, i32* @r6, align 4
  %v2_d68c = icmp eq i32 %v2_d688, 0
  store i32 1, i32* @r5, align 4
  store i32 4096, i32* @r1, align 4
  store i32 %v2_d200, i32* @r0, align 4
  br i1 %v2_d68c, label %dec_label_pc_d6a0, label %dec_label_pc_d5b0

dec_label_pc_d6a0:                                ; preds = %dec_label_pc_d598.loopexit, %dec_label_pc_d678, %dec_label_pc_d5b0, %dec_label_pc_d598.preheader
  %v0_d6a0 = load i32, i32* @sb, align 4
  %v1_d6a4 = inttoptr i32 %v0_d6a0 to i32*
  %v2_d6a4 = call i32 @function_1216c(i32* %v1_d6a4)
  %v0_d6a8 = load i32, i32* @r8, align 4
  %v1_d6ac = inttoptr i32 %v0_d6a8 to i32*
  %v2_d6ac = call i32 @function_1231c(i32* %v1_d6ac)
  %v2_d6b0 = icmp eq i32 %v2_d6ac, 0
  br i1 %v2_d6b0, label %dec_label_pc_d6b8, label %dec_label_pc_d4b4

dec_label_pc_d6b8:                                ; preds = %dec_label_pc_d4a4.loopexit, %dec_label_pc_d6a0, %dec_label_pc_d4b4, %dec_label_pc_d4a4.preheader
  %v0_d6b8 = load i32, i32* @r8, align 4
  %v1_d6bc = inttoptr i32 %v0_d6b8 to i32*
  %v2_d6bc = call i32 @function_1216c(i32* %v1_d6bc)
  %v0_d6c0 = load i32, i32* @r5, align 4
  %v1_d6c0 = urem i32 %v0_d6c0, 256
  br label %dec_label_pc_d6c4

dec_label_pc_d6c4:                                ; preds = %dec_label_pc_d484, %dec_label_pc_d6b8
  %storemerge = phi i32 [ %v1_d6c0, %dec_label_pc_d6b8 ], [ 0, %dec_label_pc_d484 ]
  store i32 %storemerge, i32* @r4, align 4
  %v1_d6c8 = call i32 @function_13248(i32 1)
  %v1_d6d0 = call i32 @function_10d98(i32 15)
  %v1_d6d8 = call i32 @function_10d98(i32 16)
  %v1_d6e0 = call i32 @function_10d98(i32 17)
  br label %dec_label_pc_d6e4

dec_label_pc_d6e4:                                ; preds = %dec_label_pc_d288, %dec_label_pc_d724, %dec_label_pc_d6c4
  %v0_d6e4 = load i32, i32* @r4, align 4
  %v2_d6f0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d6f0, i32* @r4, align 4
  store i32 %v6_d1d8, i32* @r5, align 4
  store i32 %v9_d1d8, i32* @r6, align 4
  store i32 %v12_d1d8, i32* @r7, align 4
  store i32 %v15_d1d8, i32* @r8, align 4
  store i32 %v18_d1d8, i32* @sb, align 4
  store i32 %v21_d1d8, i32* @sl, align 4
  store i32 %v24_d1d8, i32* @fp, align 4
  ret i32 %v0_d6e4

dec_label_pc_d6f4:                                ; preds = %dec_label_pc_d3d8
  %v1_d6f4 = add i32 %v0_d6f4, 1
  store i32 %v1_d6f4, i32* @lr, align 4
  %v7_d6f8 = icmp eq i32 %v0_d6f4, 0
  br i1 %v7_d6f8, label %dec_label_pc_d700, label %dec_label_pc_d3e0

dec_label_pc_d700:                                ; preds = %dec_label_pc_d6f4
  %v1_d700 = add i32 %v0_d3e8, 3
  %v2_d700 = inttoptr i32 %v1_d700 to i8*
  %v3_d700 = load i8, i8* %v2_d700, align 1
  %v7_d704 = icmp eq i8 %v3_d700, 65
  br i1 %v7_d704, label %dec_label_pc_d714, label %.thread33

.thread33:                                        ; preds = %dec_label_pc_d700
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d714:                                ; preds = %dec_label_pc_d700
  store i32 %v1_d6f4, i32* @r4, align 4
  br label %dec_label_pc_d3b0.backedge

dec_label_pc_d3b0.backedge:                       ; preds = %.thread33, %dec_label_pc_d714, %dec_label_pc_d3e4
  %v0_d3f085 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3f086, %dec_label_pc_d3e4 ], [ %v0_d3f086, %.thread33 ]
  %v0_d6f474 = phi i32 [ %v1_d6f4, %dec_label_pc_d714 ], [ %v0_d3e4, %dec_label_pc_d3e4 ], [ %v1_d6f4, %.thread33 ]
  %v0_d3d8.pr71 = phi i32 [ 0, %dec_label_pc_d714 ], [ %v0_d3d8.pr72, %dec_label_pc_d3e4 ], [ 0, %.thread33 ]
  %v0_d3b0 = add i32 %v0_d3e8, 1
  %v1_d3b0 = add i32 %v0_d3e8, 3
  %v2_d3b0 = inttoptr i32 %v1_d3b0 to i8*
  %v3_d3b0 = load i8, i8* %v2_d3b0, align 1
  %v2_d3b4 = icmp eq i8 %v3_d3b0, 0
  %v1_d3b8 = add i32 %v0_d3b882, 1
  br i1 %v2_d3b4, label %dec_label_pc_d3f0, label %dec_label_pc_d3c0

dec_label_pc_d724:                                ; preds = %dec_label_pc_d468
  %v1_d728 = call i32 @function_10d98(i32 15)
  %v1_d730 = call i32 @function_10d98(i32 16)
  %v1_d738 = call i32 @function_10d98(i32 17)
  %v1_d740 = call i32 @function_10d98(i32 19)
  br label %dec_label_pc_d6e4

dec_label_pc_d748:                                ; preds = %dec_label_pc_d1d8
  store i8 48, i8* %stack_var_-68, align 1
  br label %dec_label_pc_d288

; uselistorder directives
  uselistorder i32 %v1_d3b8, { 1, 0 }
  uselistorder i8 %v3_d3b0, { 1, 0 }
  uselistorder i32 %v0_d3f085, { 1, 0 }
  uselistorder i32 %v1_d6f4, { 4, 3, 0, 2, 5, 1 }
  uselistorder i32 %v2_d6ac, { 1, 0 }
  uselistorder i32 %v1_d41c, { 1, 0 }
  uselistorder i32 %v0_d42828, { 1, 0 }
  uselistorder i32 %v1_d43c, { 0, 3, 4, 5, 1, 2 }
  uselistorder i32 %v0_d3e4, { 1, 0 }
  uselistorder i32 %v0_d3b882, { 1, 0 }
  uselistorder i32 %v0_d6f4, { 4, 3, 0, 1, 2 }
  uselistorder i32 %v0_d3f086, { 1, 2, 0 }
  uselistorder i32 %v1_d3b856, { 1, 0 }
  uselistorder i32 %v2_d39c, { 1, 0 }
  uselistorder i32 %v1_d398, { 3, 1, 0, 2, 4, 5 }
  uselistorder i32 %v0_d35413, { 1, 0, 2 }
  uselistorder i32 %v0_d344, { 1, 0 }
  uselistorder i32 %v1_d324, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_d2b8, { 1, 2, 0 }
  uselistorder i32 %v2_d200, { 1, 2, 3, 0, 4 }
  uselistorder i32 %v2_d1ec, { 0, 2, 1, 3, 4, 5 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-581, { 1, 4, 0, 2, 3 }
  uselistorder i8* %stack_var_-68, { 2, 0, 1 }
  uselistorder i32* %stack_var_-52, { 0, 1, 2, 4, 3 }
  uselistorder i32 (i8*, i32)* @function_11640, { 1, 0 }
  uselistorder i32 (i8*, i32, i32)* @function_1176c, { 1, 0 }
  uselistorder label %dec_label_pc_d3b0.backedge, { 1, 0, 2 }
  uselistorder label %dec_label_pc_d6e4, { 1, 2, 0 }
  uselistorder label %dec_label_pc_d6c4, { 1, 0 }
  uselistorder label %dec_label_pc_d6b8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d6a0, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_d5b0, { 1, 0 }
  uselistorder label %dec_label_pc_d5b0thread-pre-split, { 1, 0 }
  uselistorder label %dec_label_pc_d598.loopexit, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4, { 1, 0 }
  uselistorder label %dec_label_pc_d4b4.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_d4a4.loopexit, { 2, 1, 0 }
  uselistorder label %dec_label_pc_d430, { 0, 2, 3, 1 }
  uselistorder label %dec_label_pc_d3e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d3c0, { 1, 0 }
  uselistorder label %dec_label_pc_d364, { 2, 0, 1 }
  uselistorder label %dec_label_pc_d2c8.backedge, { 2, 1, 3, 0 }
  uselistorder label %dec_label_pc_d318, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_d2e0, { 1, 0 }
  uselistorder label %dec_label_pc_d288, { 1, 0 }
}

define i32 @function_d774(i32 %arg1) local_unnamed_addr {
dec_label_pc_d774:
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-8412 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-4260 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-244 = alloca i32, align 4
  %stack_var_-8436 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_d774 = load i32, i32* @r4, align 4
  store i32 %v3_d774, i32* %stack_var_-36, align 4
  %v6_d774 = load i32, i32* @r5, align 4
  %v9_d774 = load i32, i32* @r6, align 4
  %v12_d774 = load i32, i32* @r7, align 4
  %v15_d774 = load i32, i32* @r8, align 4
  %v18_d774 = load i32, i32* @sb, align 4
  %v21_d774 = load i32, i32* @sl, align 4
  %v24_d774 = load i32, i32* @fp, align 4
  %v2_d784 = call i32 @function_120e8(i32* null)
  store i32 %v2_d784, i32* @r7, align 4
  %v0_d78c = call i32 @function_11e44()
  %v7_d790 = icmp eq i32 %v0_d78c, -1
  %. = zext i1 %v7_d790 to i32
  %tmp233 = icmp slt i32 %v0_d78c, 1
  %storemerge194 = select i1 %tmp233, i32 %., i32 1
  store i32 %storemerge194, i32* @r5, align 4
  store i32 ptrtoint (i32* @global_var_1d23c.62 to i32), i32* %r3.global-to-local, align 4
  %v2_d7ac = icmp eq i32 %storemerge194, 0
  store i32 %v0_d78c, i32* @global_var_1d23c.62, align 4
  br i1 %v2_d7ac, label %dec_label_pc_d7c4, label %dec_label_pc_d7b8

dec_label_pc_d7b8:                                ; preds = %dec_label_pc_db10, %dec_label_pc_d9e8, %dec_label_pc_d774
  %v29_d7c0 = phi i32 [ %v3_daa0, %dec_label_pc_d9e8 ], [ %v0_d78c, %dec_label_pc_d774 ], [ 0, %dec_label_pc_db10 ]
  %v2_d7c0 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_d7c0, i32* @r4, align 4
  store i32 %v6_d774, i32* @r5, align 4
  store i32 %v9_d774, i32* @r6, align 4
  store i32 %v12_d774, i32* @r7, align 4
  store i32 %v15_d774, i32* @r8, align 4
  store i32 %v18_d774, i32* @sb, align 4
  store i32 %v21_d774, i32* @sl, align 4
  store i32 %v24_d774, i32* @fp, align 4
  ret i32 %v29_d7c0

dec_label_pc_d7c4:                                ; preds = %dec_label_pc_d774
  %v2_d7c4 = ptrtoint i32* %stack_var_-244 to i32
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  store i32 2, i32* @r6, align 4
  store i32 2, i32* %stack_var_-76, align 4
  %v1_d7e0 = call i32 @function_d1d8(i32 58811)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d7f8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d800 = load i32, i32* @r5, align 4
  store i32 %v0_d800, i32* %r2.global-to-local, align 4
  %v3_d808 = call i32 @function_1272c(i32 %v0_d7f8, i32 1, i32 %v0_d800)
  %v7_d80c = icmp eq i32 %v3_d808, -1
  store i32 %v3_d808, i32* @r4, align 4
  br i1 %v7_d80c, label %dec_label_pc_d834, label %dec_label_pc_d818

dec_label_pc_d818:                                ; preds = %dec_label_pc_d7c4
  %v2_d81c = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d81c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d824 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d824 = call i32 @function_1255c(i32 %v3_d808, %sockaddr* %v3_d824, i32 16)
  %v0_d828 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d830 = call i32 @function_12610(i32 %v0_d828, i32 1)
  br label %dec_label_pc_d834

dec_label_pc_d834:                                ; preds = %dec_label_pc_d7c4, %dec_label_pc_d818
  %v1_d83c = call i32 @function_d1d8(i32 50951)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d854 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d85c = load i32, i32* @r5, align 4
  store i32 %v0_d85c, i32* %r2.global-to-local, align 4
  %v3_d864 = call i32 @function_1272c(i32 %v0_d854, i32 1, i32 %v0_d85c)
  %v7_d868 = icmp eq i32 %v3_d864, -1
  store i32 %v3_d864, i32* @r4, align 4
  br i1 %v7_d868, label %dec_label_pc_d890, label %dec_label_pc_d874

dec_label_pc_d874:                                ; preds = %dec_label_pc_d834
  %v2_d878 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d878, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d880 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d880 = call i32 @function_1255c(i32 %v3_d864, %sockaddr* %v3_d880, i32 16)
  %v0_d884 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d88c = call i32 @function_12610(i32 %v0_d884, i32 1)
  br label %dec_label_pc_d890

dec_label_pc_d890:                                ; preds = %dec_label_pc_d834, %dec_label_pc_d874
  %v1_d898 = call i32 @function_d1d8(i32 ptrtoint (i32* @global_var_85ce.66 to i32))
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d8b0 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d8b8 = load i32, i32* @r5, align 4
  store i32 %v0_d8b8, i32* %r2.global-to-local, align 4
  %v3_d8c0 = call i32 @function_1272c(i32 %v0_d8b0, i32 1, i32 %v0_d8b8)
  %v7_d8c4 = icmp eq i32 %v3_d8c0, -1
  store i32 %v3_d8c0, i32* @r4, align 4
  br i1 %v7_d8c4, label %dec_label_pc_d8ec, label %dec_label_pc_d8d0

dec_label_pc_d8d0:                                ; preds = %dec_label_pc_d890
  %v2_d8d4 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d8d4, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d8dc = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d8dc = call i32 @function_1255c(i32 %v3_d8c0, %sockaddr* %v3_d8dc, i32 16)
  %v0_d8e0 = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d8e8 = call i32 @function_12610(i32 %v0_d8e0, i32 1)
  br label %dec_label_pc_d8ec

dec_label_pc_d8ec:                                ; preds = %dec_label_pc_d890, %dec_label_pc_d8d0
  %v1_d8f4 = call i32 @function_d1d8(i32 42448)
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v0_d90c = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d914 = load i32, i32* @r5, align 4
  store i32 %v0_d914, i32* %r2.global-to-local, align 4
  %v3_d91c = call i32 @function_1272c(i32 %v0_d90c, i32 1, i32 %v0_d914)
  %v7_d920 = icmp eq i32 %v3_d91c, -1
  store i32 %v3_d91c, i32* @r4, align 4
  br i1 %v7_d920, label %dec_label_pc_d948, label %dec_label_pc_d92c

dec_label_pc_d92c:                                ; preds = %dec_label_pc_d8ec
  %v2_d930 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d930, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d938 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d938 = call i32 @function_1255c(i32 %v3_d91c, %sockaddr* %v3_d938, i32 16)
  %v0_d93c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d944 = call i32 @function_12610(i32 %v0_d93c, i32 1)
  br label %dec_label_pc_d948

dec_label_pc_d948:                                ; preds = %dec_label_pc_d8ec, %dec_label_pc_d92c
  %v1_d94c = call i32 @function_d1d8(i32 5632)
  store i32 22, i32* %r3.global-to-local, align 4
  %v0_d958 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d960 = load i32, i32* @r5, align 4
  store i32 %v0_d960, i32* %r2.global-to-local, align 4
  %v3_d96c = call i32 @function_1272c(i32 %v0_d958, i32 1, i32 %v0_d960)
  %v7_d970 = icmp eq i32 %v3_d96c, -1
  store i32 %v3_d96c, i32* @r4, align 4
  br i1 %v7_d970, label %dec_label_pc_d998, label %dec_label_pc_d97c

dec_label_pc_d97c:                                ; preds = %dec_label_pc_d948
  %v2_d980 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d980, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d988 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d988 = call i32 @function_1255c(i32 %v3_d96c, %sockaddr* %v3_d988, i32 16)
  %v0_d98c = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d994 = call i32 @function_12610(i32 %v0_d98c, i32 1)
  br label %dec_label_pc_d998

dec_label_pc_d998:                                ; preds = %dec_label_pc_d948, %dec_label_pc_d97c
  %v1_d99c = call i32 @function_d1d8(i32 5888)
  store i32 23, i32* %r3.global-to-local, align 4
  %v0_d9a8 = load i32, i32* @r6, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v0_d9b0 = load i32, i32* @r5, align 4
  store i32 %v0_d9b0, i32* %r2.global-to-local, align 4
  %v3_d9bc = call i32 @function_1272c(i32 %v0_d9a8, i32 1, i32 %v0_d9b0)
  %v7_d9c0 = icmp eq i32 %v3_d9bc, -1
  store i32 %v3_d9bc, i32* @r4, align 4
  br i1 %v7_d9c0, label %dec_label_pc_d9e8, label %dec_label_pc_d9cc

dec_label_pc_d9cc:                                ; preds = %dec_label_pc_d998
  %v2_d9d0 = ptrtoint i32* %stack_var_-76 to i32
  store i32 %v2_d9d0, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v3_d9d8 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v4_d9d8 = call i32 @function_1255c(i32 %v3_d9bc, %sockaddr* %v3_d9d8, i32 16)
  %v0_d9dc = load i32, i32* @r4, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v2_d9e4 = call i32 @function_12610(i32 %v0_d9dc, i32 1)
  br label %dec_label_pc_d9e8

dec_label_pc_d9e8:                                ; preds = %dec_label_pc_d998, %dec_label_pc_d9cc
  %v1_d9ec = call i32 @function_13248(i32 5)
  %v1_d9f4 = call i32 @function_128c4(i32 4096)
  store i32 ptrtoint (i32* @global_var_1d19c.68 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d238.70 to i32), i32* %r1.global-to-local, align 4
  store i32 %v1_d9f4, i32* %r2.global-to-local, align 4
  %v0_da04 = load i32, i32* @r5, align 4
  %v1_da04 = trunc i32 %v0_da04 to i8
  %v3_da04 = inttoptr i32 %v1_d9f4 to i8*
  store i8 %v1_da04, i8* %v3_da04, align 1
  %v0_da0c = load i32, i32* @r5, align 4
  %v1_da0c = load i32, i32* %r3.global-to-local, align 4
  %v2_da0c = inttoptr i32 %v1_da0c to i32*
  store i32 %v0_da0c, i32* %v2_da0c, align 4
  %v0_da10 = load i32, i32* %r2.global-to-local, align 4
  %v1_da10 = load i32, i32* %r1.global-to-local, align 4
  %v2_da10 = inttoptr i32 %v1_da10 to i32*
  store i32 %v0_da10, i32* %v2_da10, align 4
  %v1_da14 = call i32 @function_10e50(i32 15)
  %v1_da1c = call i32 @function_10e50(i32 16)
  %v2_da24 = ptrtoint i32* %stack_var_-4260 to i32
  store i32 %v2_da24, i32* %r2.global-to-local, align 4
  %v0_da28 = load i32, i32* @r5, align 4
  store i32 %v0_da28, i32* %r1.global-to-local, align 4
  store i32 %v2_da24, i32* %stack_var_-8436, align 4
  %v2_da34 = inttoptr i32 %v0_da28 to i32*
  %v3_da34 = call i32 @function_10d6c(i32 15, i32* %v2_da34)
  %v1_da3c = add i32 %v2_da24, -56
  store i32 %v1_da3c, i32* %r3.global-to-local, align 4
  store i32 %v3_da34, i32* %r1.global-to-local, align 4
  store i32 %v1_da3c, i32* @r0, align 4
  store i32 %v1_da3c, i32* %stack_var_-8436, align 4
  %v2_da4c = inttoptr i32 %v1_da3c to i8*
  %v3_da4c = call i32 @function_1153c(i8* %v2_da4c, i32 %v3_da34)
  %v2_da54 = add i32 %v1_da3c, %v3_da4c
  store i32 %v2_da54, i32* @r4, align 4
  %v0_da58 = call i32 @function_11e70()
  %v2_da60 = ptrtoint i32* %stack_var_-92 to i32
  store i32 %v2_da60, i32* %r2.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v3_da68 = trunc i32 %v0_da58 to i8
  %v4_da68 = call i32 @function_11978(i8 %v3_da68, i32 10, i32 %v2_da60)
  store i32 %v4_da68, i32* %r1.global-to-local, align 4
  %v0_da70 = load i32, i32* @r4, align 4
  store i32 %v0_da70, i32* @r0, align 4
  %v2_da74 = inttoptr i32 %v0_da70 to i8*
  %v3_da74 = call i32 @function_1153c(i8* %v2_da74, i32 %v4_da68)
  %v0_da78 = load i32, i32* @r5, align 4
  store i32 %v0_da78, i32* %r1.global-to-local, align 4
  %v0_da7c = load i32, i32* @r4, align 4
  %v2_da7c = add i32 %v0_da7c, %v3_da74
  store i32 %v2_da7c, i32* @r4, align 4
  %v2_da84 = inttoptr i32 %v0_da78 to i32*
  %v3_da84 = call i32 @function_10d6c(i32 16, i32* %v2_da84)
  store i32 %v3_da84, i32* %r1.global-to-local, align 4
  %v0_da8c = load i32, i32* @r4, align 4
  store i32 %v0_da8c, i32* @r0, align 4
  %v2_da90 = inttoptr i32 %v0_da8c to i8*
  %v3_da90 = call i32 @function_1153c(i8* %v2_da90, i32 %v3_da84)
  %v0_da94 = load i32, i32* @r5, align 4
  store i32 %v0_da94, i32* %r1.global-to-local, align 4
  store i32 %v3_da90, i32* @r6, align 4
  %v2_da9c = load i32, i32* %stack_var_-8436, align 4
  %v2_daa0 = inttoptr i32 %v2_da9c to i8*
  %v3_daa0 = call i32 @function_11f44(i8* %v2_daa0, i32 %v0_da94)
  %v7_daa4 = icmp eq i32 %v3_daa0, -1
  br i1 %v7_daa4, label %dec_label_pc_d7b8, label %dec_label_pc_daac

dec_label_pc_daac:                                ; preds = %dec_label_pc_d9e8
  %v1_daac = call i32 @function_11e18(i32 %v3_daa0)
  %v1_dab4 = call i32 @function_10d98(i32 15)
  %v1_dabc = call i32 @function_10d98(i32 16)
  store i32 ptrtoint (i32* @global_var_1d238.70 to i32), i32* %r3.global-to-local, align 4
  %v2_dac8 = load i32, i32* @global_var_1d238.70, align 4
  store i32 %v2_dac8, i32* %r1.global-to-local, align 4
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dad0 = load i32, i32* %stack_var_-8436, align 4
  %v3_dad4 = inttoptr i32 %v2_dad0 to i8*
  %v4_dad4 = call i32 @function_1200c(i8* %v3_dad4, i32 %v2_dac8, i32 4095)
  %v7_dad8 = icmp eq i32 %v4_dad4, -1
  br i1 %v7_dad8, label %.thread8, label %bb236

bb236:                                            ; preds = %dec_label_pc_daac
  %v3_dae0 = load i32, i32* @global_var_1d238.70, align 4
  store i32 %v3_dae0, i32* %r3.global-to-local, align 4
  %v1_dae4 = load i32, i32* @r5, align 4
  %v2_dae4 = trunc i32 %v1_dae4 to i8
  %v5_dae4 = add i32 %v3_dae0, %v4_dad4
  %v6_dae4 = inttoptr i32 %v5_dae4 to i8*
  store i8 %v2_dae4, i8* %v6_dae4, align 1
  br label %.thread8

.thread8:                                         ; preds = %dec_label_pc_daac, %bb236
  %v2_dae8 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_dae8, i32* %r2.global-to-local, align 4
  %v0_daec = load i32, i32* @r4, align 4
  %v1_daec = load i32, i32* @r6, align 4
  %v2_daec = sub i32 %v0_daec, %v2_dae8
  %v2_daf0 = add i32 %v2_daec, %v1_daec
  store i32 %v2_daf0, i32* @r1, align 4
  store i32 %v2_dae8, i32* @r0, align 4
  %v0_dafc = call i32 @function_115b4()
  %v0_db00 = load i32, i32* @r7, align 4
  store i32 %v0_db00, i32* @r4, align 4
  %v0_db04 = load i32, i32* @r5, align 4
  %v2_db08 = ptrtoint i32* %stack_var_-8412 to i32
  store i32 %v2_db08, i32* @r8, align 4
  store i32 400, i32* @r5, align 4
  %v2_dc04 = ptrtoint i32* %stack_var_-220 to i32
  %v2_dc08 = bitcast i32* %stack_var_-220 to i8*
  %v2_dc54 = ptrtoint i32* %stack_var_-156 to i32
  %v2_dc58 = bitcast i32* %stack_var_-156 to i8*
  %v2_ddd4 = ptrtoint i32* %stack_var_-44 to i32
  %v2_dde4 = ptrtoint i32* %stack_var_-48 to i32
  %v2_ddf4 = ptrtoint i32* %stack_var_-52 to i32
  %v2_de08 = ptrtoint i32* %stack_var_-40 to i32
  %v2_de1c = ptrtoint i32* %stack_var_-56 to i32
  %v2_de34 = ptrtoint i32* %stack_var_-60 to i32
  %v2_dcd0 = ptrtoint i32* %stack_var_-36 to i32
  br label %dec_label_pc_db10

dec_label_pc_db10:                                ; preds = %dec_label_pc_dbc8, %.thread8
  %stack_var_-8428.0 = phi i32 [ %v0_db04, %.thread8 ], [ %stack_var_-8428.3, %dec_label_pc_dbc8 ]
  %v1_db14 = call i32 @function_10e50(i32 15)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_db20 = call i32 @function_10d6c(i32 15, i32* null)
  store i32 %v3_db20, i32* @r0, align 4
  %v1_db24 = call i32 @function_12220(i32 %v3_db20)
  store i32 %v1_db24, i32* @sl, align 4
  %v2_db28 = icmp eq i32 %v1_db24, 0
  br i1 %v2_db28, label %dec_label_pc_d7b8, label %dec_label_pc_db30

dec_label_pc_db30:                                ; preds = %dec_label_pc_db10
  %v1_db34 = call i32 @function_10d98(i32 15)
  %v0_db38131 = load i32, i32* @sl, align 4
  %v1_db3c132 = inttoptr i32 %v0_db38131 to i32*
  %v2_db3c133 = call i32 @function_1231c(i32* %v1_db3c132)
  %v2_db40135 = icmp eq i32 %v2_db3c133, 0
  br i1 %v2_db40135, label %dec_label_pc_dbc8, label %dec_label_pc_db48.preheader

dec_label_pc_db48.preheader:                      ; preds = %dec_label_pc_db30, %dec_label_pc_db38.backedge
  %v0_db48147 = phi i32 [ %v2_db3c, %dec_label_pc_db38.backedge ], [ %v2_db3c133, %dec_label_pc_db30 ]
  %stack_var_-8428.1136 = phi i32 [ %stack_var_-8428.1.be, %dec_label_pc_db38.backedge ], [ %stack_var_-8428.0, %dec_label_pc_db30 ]
  br label %dec_label_pc_db48

dec_label_pc_db48:                                ; preds = %dec_label_pc_db48.preheader, %dec_label_pc_dbb0
  %v0_db58 = phi i32 [ %v2_dbbc, %dec_label_pc_dbb0 ], [ %v0_db48147, %dec_label_pc_db48.preheader ]
  %stack_var_-8428.2 = phi i32 [ %v1_db6c, %dec_label_pc_dbb0 ], [ %stack_var_-8428.1136, %dec_label_pc_db48.preheader ]
  %v1_db48 = add i32 %v0_db58, 11
  %v2_db48 = inttoptr i32 %v1_db48 to i8*
  %v3_db48 = load i8, i8* %v2_db48, align 1
  %v4_db48 = zext i8 %v3_db48 to i32
  %v1_db4c = add nsw i32 %v4_db48, -48
  store i32 %v1_db4c, i32* %r3.global-to-local, align 4
  %tmp = icmp ugt i32 %v1_db4c, 9
  br i1 %tmp, label %dec_label_pc_db38.backedge, label %dec_label_pc_db58

dec_label_pc_db58:                                ; preds = %dec_label_pc_db48
  store i32 %v1_db48, i32* @r6, align 4
  %v2_db60 = call i32 @function_13008(i8* %v2_db48)
  %v0_db68 = load i32, i32* @r5, align 4
  %v1_db6c = add i32 %stack_var_-8428.2, 1
  store i32 %v1_db6c, i32* %r3.global-to-local, align 4
  store i32 %v2_db60, i32* @r7, align 4
  %v5_db78 = icmp slt i32 %v0_db68, %v2_db60
  %v2_dbd8 = call i32 @function_120e8(i32* null)
  br i1 %v5_db78, label %dec_label_pc_dbd4, label %dec_label_pc_db7c

dec_label_pc_db7c:                                ; preds = %dec_label_pc_db58
  %v0_db84 = load i32, i32* @r4, align 4
  %v2_db84 = sub i32 %v2_dbd8, %v0_db84
  %v7_db8c = icmp slt i32 %v2_db84, 601
  br i1 %v7_db8c, label %dec_label_pc_db94, label %.thread9

.thread9:                                         ; preds = %dec_label_pc_db7c
  store i32 400, i32* @r5, align 4
  br label %dec_label_pc_db38.backedge

dec_label_pc_db94:                                ; preds = %dec_label_pc_db7c
  %v0_db94 = load i32, i32* @r7, align 4
  %v7_db98 = icmp slt i32 %v0_db94, 401
  br i1 %v7_db98, label %dec_label_pc_db38.backedge, label %dec_label_pc_db9c

dec_label_pc_db9c:                                ; preds = %dec_label_pc_db94
  store i32 10, i32* %r1.global-to-local, align 4
  %v2_dba4 = call i32 @function_11ba0(i32 %v1_db6c, i32 10)
  %v2_dba8 = icmp eq i32 %v2_dba4, 0
  br i1 %v2_dba8, label %dec_label_pc_dbb0, label %dec_label_pc_db38.backedge

dec_label_pc_dbb0:                                ; preds = %dec_label_pc_db9c
  %v1_dbb4 = call i32 @function_13248(i32 1)
  %v0_dbb8 = load i32, i32* @sl, align 4
  %v1_dbbc = inttoptr i32 %v0_dbb8 to i32*
  %v2_dbbc = call i32 @function_1231c(i32* %v1_dbbc)
  %v2_dbc0 = icmp eq i32 %v2_dbbc, 0
  br i1 %v2_dbc0, label %dec_label_pc_dbc8, label %dec_label_pc_db48

dec_label_pc_dbc8:                                ; preds = %dec_label_pc_db38.backedge, %dec_label_pc_dbb0, %dec_label_pc_db30
  %stack_var_-8428.3 = phi i32 [ %stack_var_-8428.0, %dec_label_pc_db30 ], [ %v1_db6c, %dec_label_pc_dbb0 ], [ %stack_var_-8428.1.be, %dec_label_pc_db38.backedge ]
  %v0_dbc8 = load i32, i32* @sl, align 4
  %v1_dbcc = inttoptr i32 %v0_dbc8 to i32*
  %v2_dbcc = call i32 @function_1216c(i32* %v1_dbcc)
  br label %dec_label_pc_db10

dec_label_pc_dbd4:                                ; preds = %dec_label_pc_db58
  %v1_dbe4 = call i32 @function_10e50(i32 15)
  %v1_dbec = call i32 @function_10e50(i32 16)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dbf8 = call i32 @function_10d6c(i32 15, i32* null)
  store i32 %v3_dbf8, i32* %r1.global-to-local, align 4
  store i32 %v2_dc04, i32* @r0, align 4
  %v3_dc08 = call i32 @function_1153c(i8* %v2_dc08, i32 %v3_dbf8)
  %v2_dc14 = add i32 %v3_dc08, %v2_dc04
  store i32 %v2_dc14, i32* %r5.global-to-local, align 4
  %v0_dc18 = load i32, i32* @r6, align 4
  store i32 %v0_dc18, i32* %r1.global-to-local, align 4
  store i32 %v2_dc14, i32* @r0, align 4
  %v2_dc20 = inttoptr i32 %v2_dc14 to i8*
  %v3_dc20 = call i32 @function_1153c(i8* %v2_dc20, i32 %v0_dc18)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc30 = call i32 @function_10d6c(i32 16, i32* null)
  store i32 %v3_dc30, i32* %r1.global-to-local, align 4
  %v0_dc38 = load i32, i32* %r5.global-to-local, align 4
  %v2_dc38 = add i32 %v3_dc20, %v0_dc38
  store i32 %v2_dc38, i32* @r0, align 4
  %v2_dc3c = inttoptr i32 %v2_dc38 to i8*
  %v3_dc3c = call i32 @function_1153c(i8* %v2_dc3c, i32 %v3_dc30)
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dc48 = call i32 @function_10d6c(i32 15, i32* null)
  store i32 %v3_dc48, i32* %r1.global-to-local, align 4
  store i32 %v2_dc54, i32* @r0, align 4
  %v3_dc58 = call i32 @function_1153c(i8* %v2_dc58, i32 %v3_dc48)
  %v2_dc64 = add i32 %v3_dc58, %v2_dc54
  store i32 %v2_dc64, i32* @r5, align 4
  store i32 %v2_dc64, i32* @r0, align 4
  %v0_dc6c = load i32, i32* @r6, align 4
  store i32 %v0_dc6c, i32* %r1.global-to-local, align 4
  %v2_dc70 = inttoptr i32 %v2_dc64 to i8*
  %v3_dc70 = call i32 @function_1153c(i8* %v2_dc70, i32 %v0_dc6c)
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 %v3_dc70, i32* @r4, align 4
  %v3_dc80 = call i32 @function_10d6c(i32 34, i32* null)
  store i32 %v3_dc80, i32* %r1.global-to-local, align 4
  %v0_dc88 = load i32, i32* @r5, align 4
  %v1_dc88 = load i32, i32* @r4, align 4
  %v2_dc88 = add i32 %v1_dc88, %v0_dc88
  store i32 %v2_dc88, i32* @r0, align 4
  %v2_dc8c = inttoptr i32 %v2_dc88 to i8*
  %v3_dc8c = call i32 @function_1153c(i8* %v2_dc8c, i32 %v3_dc80)
  %v1_dc94 = call i32 @function_10d98(i32 15)
  %v1_dc9c = call i32 @function_10d98(i32 16)
  store i32 4095, i32* %r2.global-to-local, align 4
  %v2_dcb0 = load i32, i32* %stack_var_-8436, align 4
  store i32 %v2_dcb0, i32* %r1.global-to-local, align 4
  %v4_dcb4 = call i32 @function_1200c(i8* %v2_dc08, i32 %v2_dcb0, i32 4095)
  %v7_dcbc = icmp eq i32 %v4_dcb4, -1
  store i32 %v4_dcb4, i32* @r5, align 4
  store i32 -4280, i32* @r2, align 4
  br i1 %v7_dcbc, label %dec_label_pc_dd84, label %dec_label_pc_dccc

dec_label_pc_dccc:                                ; preds = %dec_label_pc_dbd4
  %v2_dcd4 = add i32 %v4_dcb4, %v2_dcd0
  store i32 %v2_dcd4, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v4_dcdc = add i32 %v2_dcd4, -4280
  %v5_dcdc = inttoptr i32 %v4_dcdc to i8*
  store i8 0, i8* %v5_dcdc, align 1
  %v1_dce4 = call i32 @function_10e50(i32 35)
  %v0_dce8 = load i32, i32* @r4, align 4
  store i32 %v0_dce8, i32* %r1.global-to-local, align 4
  %v2_dcf0 = inttoptr i32 %v0_dce8 to i32*
  %v3_dcf0 = call i32 @function_10d6c(i32 35, i32* %v2_dcf0)
  %v0_dcf4 = load i32, i32* @r5, align 4
  %v1_dcf4 = add i32 %v0_dcf4, -1
  store i32 %v1_dcf4, i32* @r1, align 4
  store i32 %v3_dcf0, i32* %r2.global-to-local, align 4
  %v2_dcfc = load i32, i32* %stack_var_-8436, align 4
  %v3_dd00 = inttoptr i32 %v2_dcfc to i8*
  %v4_dd00 = call i32 @function_11868(i8* %v3_dd00, i32 %v1_dcf4, i32 %v3_dcf0)
  %v7_dd04 = icmp eq i32 %v4_dd00, -1
  br i1 %v7_dd04, label %dec_label_pc_dd20, label %dec_label_pc_dd0c

dec_label_pc_dd0c:                                ; preds = %dec_label_pc_dccc
  %v2_dd0c = load i32, i32* %stack_var_-8436, align 4
  %v1_dd10 = inttoptr i32 %v2_dd0c to i8*
  %v2_dd10 = call i32 @function_12114(i8* %v1_dd10)
  %v0_dd14 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_dd1c = call i32 @function_11f18(i32 %v0_dd14, i32 9)
  br label %dec_label_pc_dd20

dec_label_pc_dd20:                                ; preds = %dec_label_pc_dccc, %dec_label_pc_dd0c
  %v1_dd24 = call i32 @function_10d98(i32 35)
  %v0_dd28 = call i32 @function_11e70()
  %v0_dd2c = load i32, i32* @r7, align 4
  %v9_dd2c = icmp eq i32 %v0_dd2c, %v0_dd28
  br i1 %v9_dd2c, label %dec_label_pc_dd58, label %dec_label_pc_dd34

dec_label_pc_dd34:                                ; preds = %dec_label_pc_dd20
  %v0_dd34 = call i32 @function_11e9c()
  %v0_dd38 = load i32, i32* @r7, align 4
  %v9_dd38 = icmp eq i32 %v0_dd38, %v0_dd34
  br i1 %v9_dd38, label %dec_label_pc_dd58, label %dec_label_pc_dd40

dec_label_pc_dd40:                                ; preds = %dec_label_pc_dd34
  store i32 ptrtoint (i32* @global_var_1d238.70 to i32), i32* %r2.global-to-local, align 4
  %v2_dd44 = load i32, i32* %stack_var_-8436, align 4
  %v2_dd48 = load i32, i32* @global_var_1d238.70, align 4
  store i32 %v2_dd48, i32* %r1.global-to-local, align 4
  %v3_dd4c = inttoptr i32 %v2_dd44 to i8*
  %v4_dd4c = call i32 @function_118f4(i8* %v3_dd4c, i32 %v2_dd48, i32 ptrtoint (i32* @global_var_1d238.70 to i32))
  %v2_dd50 = icmp eq i32 %v4_dd4c, 0
  br i1 %v2_dd50, label %dec_label_pc_dd64, label %dec_label_pc_dd40.dec_label_pc_dd58_crit_edge

dec_label_pc_dd40.dec_label_pc_dd58_crit_edge:    ; preds = %dec_label_pc_dd40
  %v0_dd5c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_dd58

dec_label_pc_dd58:                                ; preds = %dec_label_pc_dd40.dec_label_pc_dd58_crit_edge, %dec_label_pc_dd34, %dec_label_pc_dd20
  %v0_dd5c = phi i32 [ %v0_dd5c.pre, %dec_label_pc_dd40.dec_label_pc_dd58_crit_edge ], [ %v0_dd34, %dec_label_pc_dd34 ], [ %v0_dd28, %dec_label_pc_dd20 ]
  store i32 %v2_dbd8, i32* @r4, align 4
  store i32 %v0_dd5c, i32* @r5, align 4
  br label %dec_label_pc_db38.backedge

dec_label_pc_db38.backedge:                       ; preds = %dec_label_pc_db9c, %dec_label_pc_db94, %dec_label_pc_db48, %dec_label_pc_dd58, %dec_label_pc_e080, %.thread9
  %stack_var_-8428.1.be = phi i32 [ %v1_db6c, %dec_label_pc_e080 ], [ %v1_db6c, %dec_label_pc_dd58 ], [ %v1_db6c, %.thread9 ], [ %stack_var_-8428.2, %dec_label_pc_db48 ], [ %v1_db6c, %dec_label_pc_db94 ], [ %v1_db6c, %dec_label_pc_db9c ]
  %v0_db38 = load i32, i32* @sl, align 4
  %v1_db3c = inttoptr i32 %v0_db38 to i32*
  %v2_db3c = call i32 @function_1231c(i32* %v1_db3c)
  %v2_db40 = icmp eq i32 %v2_db3c, 0
  br i1 %v2_db40, label %dec_label_pc_dbc8, label %dec_label_pc_db48.preheader

dec_label_pc_dd64:                                ; preds = %dec_label_pc_dd40
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_dd68 = load i32, i32* %stack_var_-8436, align 4
  %v2_dd6c = inttoptr i32 %v2_dd68 to i8*
  %v3_dd6c = call i32 @function_11f44(i8* %v2_dd6c, i32 0)
  %v7_dd70 = icmp eq i32 %v3_dd6c, -1
  store i32 %v3_dd6c, i32* @r4, align 4
  br i1 %v7_dd70, label %dec_label_pc_e0b4, label %dec_label_pc_dd7c

dec_label_pc_dd7c:                                ; preds = %dec_label_pc_dd64, %dec_label_pc_e0b4
  %v0_dd7c = phi i32 [ %v3_dd6c, %dec_label_pc_dd64 ], [ %v0_dd7c.pre, %dec_label_pc_e0b4 ]
  %v1_dd80 = call i32 @function_11e18(i32 %v0_dd7c)
  br label %dec_label_pc_dd84

dec_label_pc_dd84:                                ; preds = %dec_label_pc_dbd4, %dec_label_pc_dd7c
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_dd90 = call i32 @function_11f44(i8* %v2_dc08, i32 0)
  %v7_dd94 = icmp eq i32 %v3_dd90, -1
  br i1 %v7_dd94, label %dec_label_pc_e080, label %dec_label_pc_dda0

dec_label_pc_dda0:                                ; preds = %dec_label_pc_dd84
  %v1_dda4 = call i32 @function_10e50(i32 20)
  %v1_ddac = call i32 @function_10e50(i32 21)
  %v1_ddb4 = call i32 @function_10e50(i32 22)
  %v1_ddbc = call i32 @function_10e50(i32 23)
  %v1_ddc4 = call i32 @function_10e50(i32 24)
  %v1_ddcc = call i32 @function_10e50(i32 36)
  store i32 %v2_ddd4, i32* %r1.global-to-local, align 4
  %v3_dddc = call i32 @function_10d6c(i32 20, i32* nonnull %stack_var_-44)
  store i32 %v2_dde4, i32* %r1.global-to-local, align 4
  store i32 %v3_dddc, i32* @r5, align 4
  %v3_ddf0 = call i32 @function_10d6c(i32 21, i32* nonnull %stack_var_-48)
  store i32 %v2_ddf4, i32* %r1.global-to-local, align 4
  store i32 %v3_ddf0, i32* @r6, align 4
  %v3_de00 = call i32 @function_10d6c(i32 22, i32* nonnull %stack_var_-52)
  store i32 %v2_de08, i32* %r1.global-to-local, align 4
  store i32 %v3_de00, i32* @sb, align 4
  %v3_de14 = call i32 @function_10d6c(i32 23, i32* nonnull %stack_var_-40)
  store i32 %v2_de1c, i32* %r1.global-to-local, align 4
  store i32 %v3_de14, i32* @fp, align 4
  %v3_de28 = call i32 @function_10d6c(i32 24, i32* nonnull %stack_var_-56)
  store i32 %v2_de34, i32* %r1.global-to-local, align 4
  %v3_de3c = call i32 @function_10d6c(i32 36, i32* nonnull %stack_var_-60)
  store i32 %v2_db08, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_de50128 = call i32 @function_11fe0(i32 %v3_dd90, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp237 = icmp slt i32 %v4_de50128, 1
  br i1 %tmp237, label %dec_label_pc_e0c4, label %dec_label_pc_de5c

dec_label_pc_de5c:                                ; preds = %dec_label_pc_dda0, %dec_label_pc_de44.backedge
  %v0_df00119 = phi i32 [ %v4_de50, %dec_label_pc_de44.backedge ], [ %v4_de50128, %dec_label_pc_dda0 ]
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_de60 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_de60, i32* @r4, align 4
  %v5_de68 = icmp slt i32 %v0_df00119, %v3_de60
  br i1 %v5_de68, label %dec_label_pc_de78, label %dec_label_pc_df40.lr.ph

dec_label_pc_df40.lr.ph:                          ; preds = %dec_label_pc_de5c
  %v1_df3875 = add i32 %v0_df00119, -1
  store i32 %v1_df3875, i32* %r1.global-to-local, align 4
  %v0_df40.pre = load i32, i32* @r5, align 4
  %v1_df44.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df40

dec_label_pc_de78:                                ; preds = %dec_label_pc_df38.backedge, %dec_label_pc_de5c
  %v3_de7c = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_de7c, i32* @r4, align 4
  %v5_de84 = icmp slt i32 %v0_df00119, %v3_de7c
  br i1 %v5_de84, label %dec_label_pc_de94, label %.thread26

.thread26:                                        ; preds = %dec_label_pc_de78
  %v1_df6c84 = add i32 %v0_df00119, -1
  store i32 %v1_df6c84, i32* %r1.global-to-local, align 4
  %v2_df6c85 = icmp eq i32 %v0_df00119, 0
  br i1 %v2_df6c85, label %dec_label_pc_de94, label %dec_label_pc_df74.lr.ph

dec_label_pc_df74.lr.ph:                          ; preds = %.thread26
  %v0_df74.pre = load i32, i32* @r6, align 4
  %v1_df78.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df74

dec_label_pc_de94:                                ; preds = %dec_label_pc_df6c.backedge, %.thread26, %dec_label_pc_de78
  store i32 %v2_d7c4, i32* %r1.global-to-local, align 4
  %v3_de98 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_de98, i32* @r4, align 4
  %v5_dea0 = icmp slt i32 %v0_df00119, %v3_de98
  br i1 %v5_dea0, label %dec_label_pc_deb0, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_de94
  %v1_dfa093 = add i32 %v0_df00119, -1
  store i32 %v1_dfa093, i32* %r1.global-to-local, align 4
  %v2_dfa094 = icmp eq i32 %v0_df00119, 0
  br i1 %v2_dfa094, label %dec_label_pc_deb0, label %dec_label_pc_dfa8.lr.ph

dec_label_pc_dfa8.lr.ph:                          ; preds = %.thread35
  %v0_dfa8.pre = load i32, i32* @sb, align 4
  %v1_dfac.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dfa8

dec_label_pc_deb0:                                ; preds = %dec_label_pc_dfa0.backedge, %.thread35, %dec_label_pc_de94
  store i32 %v2_d7c4, i32* %r2.global-to-local, align 4
  %v3_deb4 = load i32, i32* %stack_var_-40, align 4
  store i32 %v3_deb4, i32* @r4, align 4
  %v5_debc = icmp slt i32 %v0_df00119, %v3_deb4
  br i1 %v5_debc, label %dec_label_pc_decc, label %.thread44

.thread44:                                        ; preds = %dec_label_pc_deb0
  %v1_dfd4102 = add i32 %v0_df00119, -1
  store i32 %v1_dfd4102, i32* %r1.global-to-local, align 4
  %v2_dfd4103 = icmp eq i32 %v0_df00119, 0
  br i1 %v2_dfd4103, label %dec_label_pc_decc, label %dec_label_pc_dfdc.lr.ph

dec_label_pc_dfdc.lr.ph:                          ; preds = %.thread44
  %v0_dfdc.pre = load i32, i32* @fp, align 4
  %v1_dfe0.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_dfdc

dec_label_pc_decc:                                ; preds = %dec_label_pc_dfd4.backedge, %.thread44, %dec_label_pc_deb0
  store i32 %v2_d7c4, i32* %r3.global-to-local, align 4
  %v3_ded0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_ded0, i32* @r4, align 4
  %v5_ded8 = icmp slt i32 %v0_df00119, %v3_ded0
  br i1 %v5_ded8, label %dec_label_pc_dee8, label %.thread53

.thread53:                                        ; preds = %dec_label_pc_decc
  %v1_e008111 = add i32 %v0_df00119, -1
  store i32 %v1_e008111, i32* %r1.global-to-local, align 4
  %v2_e008112 = icmp eq i32 %v0_df00119, 0
  br i1 %v2_e008112, label %dec_label_pc_dee8, label %dec_label_pc_e010.lr.ph

dec_label_pc_e010.lr.ph:                          ; preds = %.thread53
  %v1_e018.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_e010

dec_label_pc_dee8:                                ; preds = %dec_label_pc_e008.backedge, %.thread53, %dec_label_pc_decc
  %v3_deec = load i32, i32* %stack_var_-60, align 4
  %v5_def4 = icmp slt i32 %v0_df00119, %v3_deec
  br i1 %v5_def4, label %dec_label_pc_de44.backedge, label %.thread59

dec_label_pc_de44.backedge:                       ; preds = %dec_label_pc_df24, %.thread59, %dec_label_pc_dee8
  store i32 %v2_db08, i32* %r1.global-to-local, align 4
  store i32 4096, i32* %r2.global-to-local, align 4
  %v4_de50 = call i32 @function_11fe0(i32 %v3_dd90, i32* nonnull %stack_var_-8412, i32 4096)
  %tmp238 = icmp slt i32 %v4_de50, 1
  br i1 %tmp238, label %dec_label_pc_e0c4, label %dec_label_pc_de5c

.thread59:                                        ; preds = %dec_label_pc_dee8
  store i32 0, i32* %r1.global-to-local, align 4
  %v2_df00121 = icmp eq i32 %v0_df00119, 0
  br i1 %v2_df00121, label %dec_label_pc_de44.backedge, label %dec_label_pc_df08.lr.ph

dec_label_pc_df08.lr.ph:                          ; preds = %.thread59
  %v1_df10.pre = load i32, i32* @r8, align 4
  br label %dec_label_pc_df08

dec_label_pc_df08:                                ; preds = %dec_label_pc_df24, %dec_label_pc_df08.lr.ph
  %v0_df00.in = phi i32 [ %v0_df00119, %dec_label_pc_df08.lr.ph ], [ %v0_df00, %dec_label_pc_df24 ]
  %v0_df24 = phi i32 [ 0, %dec_label_pc_df08.lr.ph ], [ %v1_df24, %dec_label_pc_df24 ]
  %v0_df18 = phi i32 [ 0, %dec_label_pc_df08.lr.ph ], [ %v1_df18., %dec_label_pc_df24 ]
  %v0_df00 = add i32 %v0_df00.in, -1
  store i32 %v3_de3c, i32* %r3.global-to-local, align 4
  %v2_df0c = add i32 %v0_df18, %v3_de3c
  %v3_df0c = inttoptr i32 %v2_df0c to i8*
  %v4_df0c = load i8, i8* %v3_df0c, align 1
  %v6_df0c = zext i8 %v4_df0c to i32
  store i32 %v6_df0c, i32* %r2.global-to-local, align 4
  %v2_df10 = add i32 %v0_df24, %v1_df10.pre
  %v3_df10 = inttoptr i32 %v2_df10 to i8*
  %v4_df10 = load i8, i8* %v3_df10, align 1
  %v6_df10 = zext i8 %v4_df10 to i32
  store i32 %v6_df10, i32* %r3.global-to-local, align 4
  %v9_df14 = icmp eq i8 %v4_df10, %v4_df0c
  %v1_df18 = add i32 %v0_df18, 1
  %v1_df18. = select i1 %v9_df14, i32 %v1_df18, i32 0
  store i32 %v1_df18., i32* %r1.global-to-local, align 4
  br i1 %v9_df14, label %dec_label_pc_e034, label %dec_label_pc_df24

dec_label_pc_df24:                                ; preds = %dec_label_pc_e034, %dec_label_pc_df08
  %v1_df24 = add i32 %v0_df24, 1
  %v2_df00 = icmp eq i32 %v0_df00, 0
  br i1 %v2_df00, label %dec_label_pc_de44.backedge, label %dec_label_pc_df08

dec_label_pc_df2c:                                ; preds = %dec_label_pc_df40
  %v9_df2c = icmp eq i32 %v3_de60, %v1_df4c.
  br i1 %v9_df2c, label %dec_label_pc_e03c, label %dec_label_pc_df38.backedge

dec_label_pc_df38.backedge:                       ; preds = %dec_label_pc_df40, %dec_label_pc_df2c
  %storemerge140 = add i32 %storemerge140.in, 1
  %v1_df38 = add i32 %v0_df38, -1
  store i32 %v1_df38, i32* %r1.global-to-local, align 4
  %v2_df38 = icmp eq i32 %v0_df38, 0
  br i1 %v2_df38, label %dec_label_pc_de78, label %dec_label_pc_df40

dec_label_pc_df40:                                ; preds = %dec_label_pc_df38.backedge, %dec_label_pc_df40.lr.ph
  %v0_df38 = phi i32 [ %v1_df3875, %dec_label_pc_df40.lr.ph ], [ %v1_df38, %dec_label_pc_df38.backedge ]
  %storemerge140.in = phi i32 [ 0, %dec_label_pc_df40.lr.ph ], [ %storemerge140, %dec_label_pc_df38.backedge ]
  %v0_df4c = phi i32 [ 0, %dec_label_pc_df40.lr.ph ], [ %v1_df4c., %dec_label_pc_df38.backedge ]
  %v2_df40 = add i32 %v0_df4c, %v0_df40.pre
  %v3_df40 = inttoptr i32 %v2_df40 to i8*
  %v4_df40 = load i8, i8* %v3_df40, align 1
  %v6_df40 = zext i8 %v4_df40 to i32
  store i32 %v6_df40, i32* %r2.global-to-local, align 4
  %v2_df44 = add i32 %storemerge140.in, %v1_df44.pre
  %v3_df44 = inttoptr i32 %v2_df44 to i8*
  %v4_df44 = load i8, i8* %v3_df44, align 1
  %v6_df44 = zext i8 %v4_df44 to i32
  store i32 %v6_df44, i32* %r3.global-to-local, align 4
  %v9_df48 = icmp eq i8 %v4_df44, %v4_df40
  %v1_df4c = add i32 %v0_df4c, 1
  %v1_df4c. = select i1 %v9_df48, i32 %v1_df4c, i32 0
  br i1 %v9_df48, label %dec_label_pc_df2c, label %dec_label_pc_df38.backedge

dec_label_pc_df60:                                ; preds = %dec_label_pc_df74
  %v9_df60 = icmp eq i32 %v3_de7c, %v1_df80.
  br i1 %v9_df60, label %dec_label_pc_e03c, label %dec_label_pc_df6c.backedge

dec_label_pc_df6c.backedge:                       ; preds = %dec_label_pc_df74, %dec_label_pc_df60
  %storemerge139 = add i32 %storemerge139.in, 1
  %v1_df6c = add i32 %v0_df6c, -1
  store i32 %v1_df6c, i32* %r1.global-to-local, align 4
  %v2_df6c = icmp eq i32 %v0_df6c, 0
  br i1 %v2_df6c, label %dec_label_pc_de94, label %dec_label_pc_df74

dec_label_pc_df74:                                ; preds = %dec_label_pc_df6c.backedge, %dec_label_pc_df74.lr.ph
  %v0_df6c = phi i32 [ %v1_df6c84, %dec_label_pc_df74.lr.ph ], [ %v1_df6c, %dec_label_pc_df6c.backedge ]
  %storemerge139.in = phi i32 [ 0, %dec_label_pc_df74.lr.ph ], [ %storemerge139, %dec_label_pc_df6c.backedge ]
  %v0_df80 = phi i32 [ 0, %dec_label_pc_df74.lr.ph ], [ %v1_df80., %dec_label_pc_df6c.backedge ]
  %v2_df74 = add i32 %v0_df80, %v0_df74.pre
  %v3_df74 = inttoptr i32 %v2_df74 to i8*
  %v4_df74 = load i8, i8* %v3_df74, align 1
  %v6_df74 = zext i8 %v4_df74 to i32
  store i32 %v6_df74, i32* %r2.global-to-local, align 4
  %v2_df78 = add i32 %storemerge139.in, %v1_df78.pre
  %v3_df78 = inttoptr i32 %v2_df78 to i8*
  %v4_df78 = load i8, i8* %v3_df78, align 1
  %v6_df78 = zext i8 %v4_df78 to i32
  store i32 %v6_df78, i32* %r3.global-to-local, align 4
  %v9_df7c = icmp eq i8 %v4_df78, %v4_df74
  %v1_df80 = add i32 %v0_df80, 1
  %v1_df80. = select i1 %v9_df7c, i32 %v1_df80, i32 0
  br i1 %v9_df7c, label %dec_label_pc_df60, label %dec_label_pc_df6c.backedge

dec_label_pc_df94:                                ; preds = %dec_label_pc_dfa8
  %v9_df94 = icmp eq i32 %v3_de98, %v1_dfb4.
  br i1 %v9_df94, label %dec_label_pc_e03c, label %dec_label_pc_dfa0.backedge

dec_label_pc_dfa0.backedge:                       ; preds = %dec_label_pc_dfa8, %dec_label_pc_df94
  %storemerge138 = add i32 %storemerge138.in, 1
  %v1_dfa0 = add i32 %v0_dfa0, -1
  store i32 %v1_dfa0, i32* %r1.global-to-local, align 4
  %v2_dfa0 = icmp eq i32 %v0_dfa0, 0
  br i1 %v2_dfa0, label %dec_label_pc_deb0, label %dec_label_pc_dfa8

dec_label_pc_dfa8:                                ; preds = %dec_label_pc_dfa0.backedge, %dec_label_pc_dfa8.lr.ph
  %v0_dfa0 = phi i32 [ %v1_dfa093, %dec_label_pc_dfa8.lr.ph ], [ %v1_dfa0, %dec_label_pc_dfa0.backedge ]
  %storemerge138.in = phi i32 [ 0, %dec_label_pc_dfa8.lr.ph ], [ %storemerge138, %dec_label_pc_dfa0.backedge ]
  %v0_dfb4 = phi i32 [ 0, %dec_label_pc_dfa8.lr.ph ], [ %v1_dfb4., %dec_label_pc_dfa0.backedge ]
  %v2_dfa8 = add i32 %v0_dfb4, %v0_dfa8.pre
  %v3_dfa8 = inttoptr i32 %v2_dfa8 to i8*
  %v4_dfa8 = load i8, i8* %v3_dfa8, align 1
  %v6_dfa8 = zext i8 %v4_dfa8 to i32
  store i32 %v6_dfa8, i32* %r2.global-to-local, align 4
  %v2_dfac = add i32 %storemerge138.in, %v1_dfac.pre
  %v3_dfac = inttoptr i32 %v2_dfac to i8*
  %v4_dfac = load i8, i8* %v3_dfac, align 1
  %v6_dfac = zext i8 %v4_dfac to i32
  store i32 %v6_dfac, i32* %r3.global-to-local, align 4
  %v9_dfb0 = icmp eq i8 %v4_dfac, %v4_dfa8
  %v1_dfb4 = add i32 %v0_dfb4, 1
  %v1_dfb4. = select i1 %v9_dfb0, i32 %v1_dfb4, i32 0
  br i1 %v9_dfb0, label %dec_label_pc_df94, label %dec_label_pc_dfa0.backedge

dec_label_pc_dfc8:                                ; preds = %dec_label_pc_dfdc
  %v9_dfc8 = icmp eq i32 %v3_deb4, %v1_dfe8.
  br i1 %v9_dfc8, label %dec_label_pc_e03c, label %dec_label_pc_dfd4.backedge

dec_label_pc_dfd4.backedge:                       ; preds = %dec_label_pc_dfdc, %dec_label_pc_dfc8
  %storemerge137 = add i32 %storemerge137.in, 1
  %v1_dfd4 = add i32 %v0_dfd4, -1
  store i32 %v1_dfd4, i32* %r1.global-to-local, align 4
  %v2_dfd4 = icmp eq i32 %v0_dfd4, 0
  br i1 %v2_dfd4, label %dec_label_pc_decc, label %dec_label_pc_dfdc

dec_label_pc_dfdc:                                ; preds = %dec_label_pc_dfd4.backedge, %dec_label_pc_dfdc.lr.ph
  %v0_dfd4 = phi i32 [ %v1_dfd4102, %dec_label_pc_dfdc.lr.ph ], [ %v1_dfd4, %dec_label_pc_dfd4.backedge ]
  %storemerge137.in = phi i32 [ 0, %dec_label_pc_dfdc.lr.ph ], [ %storemerge137, %dec_label_pc_dfd4.backedge ]
  %v0_dfe8 = phi i32 [ 0, %dec_label_pc_dfdc.lr.ph ], [ %v1_dfe8., %dec_label_pc_dfd4.backedge ]
  %v2_dfdc = add i32 %v0_dfe8, %v0_dfdc.pre
  %v3_dfdc = inttoptr i32 %v2_dfdc to i8*
  %v4_dfdc = load i8, i8* %v3_dfdc, align 1
  %v6_dfdc = zext i8 %v4_dfdc to i32
  store i32 %v6_dfdc, i32* %r2.global-to-local, align 4
  %v2_dfe0 = add i32 %storemerge137.in, %v1_dfe0.pre
  %v3_dfe0 = inttoptr i32 %v2_dfe0 to i8*
  %v4_dfe0 = load i8, i8* %v3_dfe0, align 1
  %v6_dfe0 = zext i8 %v4_dfe0 to i32
  store i32 %v6_dfe0, i32* %r3.global-to-local, align 4
  %v9_dfe4 = icmp eq i8 %v4_dfe0, %v4_dfdc
  %v1_dfe8 = add i32 %v0_dfe8, 1
  %v1_dfe8. = select i1 %v9_dfe4, i32 %v1_dfe8, i32 0
  br i1 %v9_dfe4, label %dec_label_pc_dfc8, label %dec_label_pc_dfd4.backedge

dec_label_pc_dffc:                                ; preds = %dec_label_pc_e010
  %v9_dffc = icmp eq i32 %v3_ded0, %v1_e020.
  br i1 %v9_dffc, label %dec_label_pc_e03c, label %dec_label_pc_e008.backedge

dec_label_pc_e008.backedge:                       ; preds = %dec_label_pc_e010, %dec_label_pc_dffc
  %storemerge = add i32 %storemerge.in, 1
  %v1_e008 = add i32 %v0_e008, -1
  store i32 %v1_e008, i32* %r1.global-to-local, align 4
  %v2_e008 = icmp eq i32 %v0_e008, 0
  br i1 %v2_e008, label %dec_label_pc_dee8, label %dec_label_pc_e010

dec_label_pc_e010:                                ; preds = %dec_label_pc_e008.backedge, %dec_label_pc_e010.lr.ph
  %v0_e008 = phi i32 [ %v1_e008111, %dec_label_pc_e010.lr.ph ], [ %v1_e008, %dec_label_pc_e008.backedge ]
  %storemerge.in = phi i32 [ 0, %dec_label_pc_e010.lr.ph ], [ %storemerge, %dec_label_pc_e008.backedge ]
  %v0_e020 = phi i32 [ 0, %dec_label_pc_e010.lr.ph ], [ %v1_e020., %dec_label_pc_e008.backedge ]
  store i32 %v3_de28, i32* %r3.global-to-local, align 4
  %v2_e014 = add i32 %v0_e020, %v3_de28
  %v3_e014 = inttoptr i32 %v2_e014 to i8*
  %v4_e014 = load i8, i8* %v3_e014, align 1
  %v6_e014 = zext i8 %v4_e014 to i32
  store i32 %v6_e014, i32* %r2.global-to-local, align 4
  %v2_e018 = add i32 %storemerge.in, %v1_e018.pre
  %v3_e018 = inttoptr i32 %v2_e018 to i8*
  %v4_e018 = load i8, i8* %v3_e018, align 1
  %v6_e018 = zext i8 %v4_e018 to i32
  store i32 %v6_e018, i32* %r3.global-to-local, align 4
  %v9_e01c = icmp eq i8 %v4_e018, %v4_e014
  %v1_e020 = add i32 %v0_e020, 1
  %v1_e020. = select i1 %v9_e01c, i32 %v1_e020, i32 0
  br i1 %v9_e01c, label %dec_label_pc_dffc, label %dec_label_pc_e008.backedge

dec_label_pc_e034:                                ; preds = %dec_label_pc_df08
  %v9_e034 = icmp eq i32 %v3_deec, %v1_df18.
  br i1 %v9_e034, label %dec_label_pc_e03c, label %dec_label_pc_df24

dec_label_pc_e03c:                                ; preds = %dec_label_pc_df2c, %dec_label_pc_df60, %dec_label_pc_df94, %dec_label_pc_dfc8, %dec_label_pc_dffc, %dec_label_pc_e034
  %v1_e040 = call i32 @function_10d98(i32 20)
  %v1_e048 = call i32 @function_10d98(i32 21)
  %v1_e050 = call i32 @function_10d98(i32 22)
  %v1_e058 = call i32 @function_10d98(i32 23)
  %v1_e060 = call i32 @function_10d98(i32 24)
  %v1_e068 = call i32 @function_10d98(i32 36)
  %v1_e070 = call i32 @function_11e18(i32 %v3_dd90)
  %v0_e074 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e07c = call i32 @function_11f18(i32 %v0_e074, i32 9)
  br label %dec_label_pc_e080

dec_label_pc_e080:                                ; preds = %dec_label_pc_dd84, %dec_label_pc_e0c4, %dec_label_pc_e03c
  store i32 64, i32* @r1, align 4
  store i32 %v2_dc04, i32* @r0, align 4
  %v0_e08c = call i32 @function_115b4()
  store i32 %v2_dc54, i32* @r0, align 4
  store i32 64, i32* @r1, align 4
  %v0_e09c = call i32 @function_115b4()
  %v1_e0a4 = call i32 @function_13248(i32 1)
  store i32 %v2_dbd8, i32* @r4, align 4
  %v0_e0ac = load i32, i32* @r7, align 4
  store i32 %v0_e0ac, i32* @r5, align 4
  br label %dec_label_pc_db38.backedge

dec_label_pc_e0b4:                                ; preds = %dec_label_pc_dd64
  %v0_e0b4 = load i32, i32* @r7, align 4
  store i32 9, i32* %r1.global-to-local, align 4
  %v2_e0bc = call i32 @function_11f18(i32 %v0_e0b4, i32 9)
  %v0_dd7c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_dd7c

dec_label_pc_e0c4:                                ; preds = %dec_label_pc_de44.backedge, %dec_label_pc_dda0
  %v1_e0c8 = call i32 @function_10d98(i32 20)
  %v1_e0d0 = call i32 @function_10d98(i32 21)
  %v1_e0d8 = call i32 @function_10d98(i32 22)
  %v1_e0e0 = call i32 @function_10d98(i32 23)
  %v1_e0e8 = call i32 @function_10d98(i32 24)
  %v1_e0f0 = call i32 @function_10d98(i32 36)
  %v1_e0f8 = call i32 @function_11e18(i32 %v3_dd90)
  br label %dec_label_pc_e080

; uselistorder directives
  uselistorder i32 %v1_e020., { 1, 0 }
  uselistorder i1 %v9_e01c, { 1, 0 }
  uselistorder i32 %v0_e020, { 1, 0 }
  uselistorder i32 %v1_dfe8., { 1, 0 }
  uselistorder i1 %v9_dfe4, { 1, 0 }
  uselistorder i32 %v0_dfe8, { 1, 0 }
  uselistorder i32 %v1_dfb4., { 1, 0 }
  uselistorder i1 %v9_dfb0, { 1, 0 }
  uselistorder i32 %v0_dfb4, { 1, 0 }
  uselistorder i32 %v1_df80., { 1, 0 }
  uselistorder i1 %v9_df7c, { 1, 0 }
  uselistorder i32 %v0_df80, { 1, 0 }
  uselistorder i32 %v1_df4c., { 1, 0 }
  uselistorder i1 %v9_df48, { 1, 0 }
  uselistorder i32 %v0_df4c, { 1, 0 }
  uselistorder i32 %v1_df18., { 1, 2, 0 }
  uselistorder i1 %v9_df14, { 1, 0 }
  uselistorder i32 %v0_df18, { 1, 0 }
  uselistorder i32 %v0_df24, { 1, 0 }
  uselistorder i32 %v4_de50, { 1, 0 }
  uselistorder i32 %v3_dd90, { 3, 2, 4, 1, 0 }
  uselistorder i32 %v3_dd6c, { 1, 2, 0 }
  uselistorder i32 %v2_db3c, { 1, 0 }
  uselistorder i32 %stack_var_-8428.1.be, { 1, 0 }
  uselistorder i32 %v4_dcb4, { 1, 2, 0 }
  uselistorder i32 %v2_dbbc, { 1, 0 }
  uselistorder i32 %v1_db6c, { 0, 1, 5, 4, 3, 2, 7, 8, 6 }
  uselistorder i32 %stack_var_-8428.0, { 1, 0 }
  uselistorder i32 %v2_dc54, { 1, 0, 2 }
  uselistorder i32 %v2_dc04, { 1, 0, 2 }
  uselistorder i32 %v2_db08, { 1, 0, 2 }
  uselistorder i32 %v2_dae8, { 1, 0, 2 }
  uselistorder i32 %v4_dad4, { 1, 0 }
  uselistorder i32 %v3_daa0, { 2, 0, 1 }
  uselistorder i32 %v3_d9bc, { 1, 2, 0 }
  uselistorder i32 %v3_d96c, { 1, 2, 0 }
  uselistorder i32 %v3_d91c, { 1, 2, 0 }
  uselistorder i32 %v3_d8c0, { 1, 2, 0 }
  uselistorder i32 %v3_d864, { 1, 2, 0 }
  uselistorder i32 %v3_d808, { 1, 2, 0 }
  uselistorder i32 %storemerge194, { 1, 0 }
  uselistorder i32 %v0_d78c, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-36, { 2, 0, 1 }
  uselistorder i32* %stack_var_-76, { 0, 7, 1, 8, 2, 9, 3, 10, 4, 11, 5, 12, 6 }
  uselistorder i32* %stack_var_-8412, { 1, 0, 2 }
  uselistorder i32* %stack_var_-52, { 1, 0, 2 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i32* %stack_var_-48, { 1, 0, 2 }
  uselistorder i32* %stack_var_-40, { 1, 0, 2 }
  uselistorder i32* %stack_var_-56, { 1, 0, 2 }
  uselistorder i32* %stack_var_-60, { 1, 0, 2 }
  uselistorder i32* %r3.global-to-local, { 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %r2.global-to-local, { 19, 20, 21, 22, 23, 24, 26, 25, 29, 27, 28, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18 }
  uselistorder i32* %r1.global-to-local, { 2, 48, 49, 50, 51, 52, 53, 54, 0, 56, 1, 47, 46, 55, 45, 68, 69, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 3, 4, 6, 5, 7, 8, 9, 11, 10, 12, 13, 14, 15, 16, 17, 18, 19, 21, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i32 (i8*, i32, i32)* @function_11868, { 3, 0, 1, 2 }
  uselistorder i32 (i32*)* @function_1231c, { 4, 3, 0, 5, 6, 7, 2, 8, 1 }
  uselistorder i32 (i32)* @function_12220, { 2, 1, 0 }
  uselistorder i32* @global_var_1d238.70, { 1, 0, 2, 3 }
  uselistorder i32* @global_var_1d23c.62, { 0, 2, 1 }
  uselistorder label %dec_label_pc_e080, { 1, 2, 0 }
  uselistorder label %dec_label_pc_e03c, { 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_de5c, { 1, 0 }
  uselistorder label %dec_label_pc_dd84, { 1, 0 }
  uselistorder label %dec_label_pc_dd7c, { 1, 0 }
  uselistorder label %dec_label_pc_db38.backedge, { 4, 3, 0, 1, 5, 2 }
  uselistorder label %dec_label_pc_dd20, { 1, 0 }
  uselistorder label %dec_label_pc_db48, { 1, 0 }
  uselistorder label %dec_label_pc_db48.preheader, { 1, 0 }
  uselistorder label %.thread8, { 1, 0 }
  uselistorder label %dec_label_pc_d9e8, { 1, 0 }
  uselistorder label %dec_label_pc_d998, { 1, 0 }
  uselistorder label %dec_label_pc_d948, { 1, 0 }
  uselistorder label %dec_label_pc_d8ec, { 1, 0 }
  uselistorder label %dec_label_pc_d890, { 1, 0 }
  uselistorder label %dec_label_pc_d834, { 1, 0 }
}

define i32 @function_e10c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_e10c:
  store i32 ptrtoint (i32* @global_var_e294.72 to i32), i32* @global_var_1d028.74, align 4
  %v1_e118 = load i32, i32* @r0, align 4
  ret i32 %v1_e118
}

define i32 @function_e124(i32 %arg1) local_unnamed_addr {
dec_label_pc_e124:
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_e124 = load i32, i32* @r4, align 4
  %v9_e124 = load i32, i32* @r6, align 4
  %v12_e124 = load i32, i32* @r7, align 4
  %v15_e124 = load i32, i32* @r8, align 4
  store i32 1, i32* @r4, align 4
  store i32 1, i32* %stack_var_-28, align 4
  %v3_e140 = call i32 @function_1272c(i32 2, i32 1, i32 0)
  store i32 ptrtoint (i32* @global_var_1d020.76 to i32), i32* @r6, align 4
  %v7_e148 = icmp eq i32 %v3_e140, -1
  store i32 %v3_e140, i32* @global_var_1d020.76, align 4
  br i1 %v7_e148, label %dec_label_pc_e208, label %dec_label_pc_e154

dec_label_pc_e154:                                ; preds = %dec_label_pc_e124
  %v0_e158 = load i32, i32* @r4, align 4
  %v6_e168 = call i32 @function_126fc(i32 %v3_e140, i32 %v0_e158, i32 2, i32* nonnull %stack_var_-28, i32 4)
  %v2_e16c = load i32, i32* @global_var_1d020.76, align 4
  store i32 %v2_e16c, i32* @r4, align 4
  store i32 0, i32* @r2, align 4
  %v2_e17c = call i32 @function_11d54(i32 %v2_e16c, i32 3)
  %v1_e184 = or i32 %v2_e17c, 2048
  store i32 %v1_e184, i32* @r2, align 4
  %v0_e188 = load i32, i32* @r4, align 4
  %v2_e18c = call i32 @function_11d54(i32 %v0_e188, i32 4)
  store i32 ptrtoint (i8** @global_var_1d02c.78 to i32), i32* @r8, align 4
  %v2_e194 = load i8, i8* bitcast (i8** @global_var_1d02c.78 to i8*), align 4
  %v2_e198 = icmp eq i8 %v2_e194, 0
  br i1 %v2_e198, label %.thread2, label %.thread

.thread2:                                         ; preds = %dec_label_pc_e154
  br label %bb

.thread:                                          ; preds = %dec_label_pc_e154
  br label %bb

bb:                                               ; preds = %.thread2, %.thread
  store i32 0, i32* @r5, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v0_e1d0 = call i32 @function_123ec()
  %v0_e1d4 = load i32, i32* @r5, align 4
  %v2_e1d4 = inttoptr i32 %v0_e1d0 to i32*
  store i32 %v0_e1d4, i32* %v2_e1d4, align 4
  %v2_e1d8 = ptrtoint i32* %stack_var_-44 to i32
  store i32 %v2_e1d8, i32* @r7, align 4
  store i32 %v0_e1d0, i32* @r4, align 4
  %v2_e1e4 = load i32, i32* @global_var_1d020.76, align 4
  %v3_e1ec = bitcast i32* %stack_var_-44 to %sockaddr*
  %v4_e1ec = call i32 @function_1255c(i32 %v2_e1e4, %sockaddr* %v3_e1ec, i32 16)
  %v7_e1f0 = icmp eq i32 %v4_e1ec, -1
  br i1 %v7_e1f0, label %dec_label_pc_e210, label %dec_label_pc_e1f8

dec_label_pc_e1f8:                                ; preds = %bb
  %v2_e200 = load i32, i32* @global_var_1d020.76, align 4
  %v2_e204 = call i32 @function_12610(i32 %v2_e200, i32 1)
  br label %dec_label_pc_e208

dec_label_pc_e208:                                ; preds = %dec_label_pc_e124, %dec_label_pc_e21c, %dec_label_pc_e1f8
  %v20_e20c = phi i32 [ %v3_e140, %dec_label_pc_e124 ], [ %v1_e26c, %dec_label_pc_e21c ], [ %v2_e204, %dec_label_pc_e1f8 ]
  store i32 %v3_e124, i32* @r4, align 4
  store i32 %v9_e124, i32* @r6, align 4
  store i32 %v12_e124, i32* @r7, align 4
  store i32 %v15_e124, i32* @r8, align 4
  ret i32 %v20_e20c

dec_label_pc_e210:                                ; preds = %bb
  %v0_e210 = load i32, i32* @r4, align 4
  %v1_e210 = inttoptr i32 %v0_e210 to i32*
  %v2_e210 = load i32, i32* %v1_e210, align 4
  %v7_e214 = icmp eq i32 %v2_e210, 99
  br i1 %v7_e214, label %dec_label_pc_e274, label %dec_label_pc_e21c

dec_label_pc_e21c:                                ; preds = %dec_label_pc_e274, %bb21, %dec_label_pc_e210
  store i32 0, i32* @r4, align 4
  store i32 2, i32* %stack_var_-44, align 4
  %v2_e234 = load i32, i32* @global_var_1d020.76, align 4
  %v4_e24c = call i32 @function_12588(i32 %v2_e234, %sockaddr* %v3_e1ec, i32 16)
  %v1_e254 = call i32 @function_13248(i32 5)
  %v2_e258 = load i32, i32* @global_var_1d020.76, align 4
  %v1_e25c = call i32 @function_11e18(i32 %v2_e258)
  %v1_e268 = call i32 @function_d1d8(i32 11194)
  %v1_e26c = call i32 @function_e124(i32 %v1_e268)
  br label %dec_label_pc_e208

dec_label_pc_e274:                                ; preds = %dec_label_pc_e210
  %v2_e274 = load i8, i8* bitcast (i8** @global_var_1d02c.78 to i8*), align 4
  %v3_e274 = zext i8 %v2_e274 to i32
  %v1_e278 = load i32, i32* @r5, align 4
  %v9_e278 = icmp eq i32 %v3_e274, %v1_e278
  br i1 %v9_e278, label %dec_label_pc_e21c, label %bb21

bb21:                                             ; preds = %dec_label_pc_e274
  %v2_e280 = trunc i32 %v1_e278 to i8
  store i8 %v2_e280, i8* bitcast (i8** @global_var_1d02c.78 to i8*), align 4
  br label %dec_label_pc_e21c

; uselistorder directives
  uselistorder i32 %v3_e140, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-44, { 1, 0, 3, 2 }
  uselistorder i32 (i32)* @function_d1d8, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_12610, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* bitcast (i8** @global_var_1d02c.78 to i8*), { 0, 2, 1 }
  uselistorder i8** @global_var_1d02c.78, { 1, 0 }
  uselistorder label %dec_label_pc_e21c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_e208, { 1, 2, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_e294() local_unnamed_addr {
dec_label_pc_e294:
  %stack_var_-16 = alloca i32, align 4
  %v3_e294 = load i32, i32* @r4, align 4
  store i32 %v3_e294, i32* %stack_var_-16, align 4
  %v1_e29c = call i32 @function_10e50(i32 2)
  %v3_e2a8 = call i32 @function_10d6c(i32 2, i32* null)
  %v1_e2ac = inttoptr i32 %v3_e2a8 to i8*
  %v2_e2ac = call i32 @function_ee50(i8* %v1_e2ac)
  store i32 %v2_e2ac, i32* @r5, align 4
  %v1_e2b8 = call i32 @function_10d98(i32 2)
  %v0_e2bc = load i32, i32* @r5, align 4
  %v2_e2bc = icmp eq i32 %v0_e2bc, 0
  store i32 ptrtoint (i8** @global_var_1d240.81 to i32), i32* @r6, align 4
  br i1 %v2_e2bc, label %bb, label %bb5

bb:                                               ; preds = %dec_label_pc_e294
  ret i32 %v1_e2b8

bb5:                                              ; preds = %dec_label_pc_e294
  %v1_e2c8 = add i32 %v0_e2bc, 4
  %v2_e2c8 = inttoptr i32 %v1_e2c8 to i32*
  %v3_e2c8 = load i32, i32* %v2_e2c8, align 4
  store i32 %v3_e2c8, i32* @r4, align 4
  %v0_e2cc = call i32 @function_ebc8()
  %v0_e2d0 = load i32, i32* @r5, align 4
  %v1_e2d0 = inttoptr i32 %v0_e2d0 to i8*
  %v2_e2d0 = load i8, i8* %v1_e2d0, align 1
  %v3_e2d0 = zext i8 %v2_e2d0 to i32
  %v2_e2d4 = call i32 @function_11ba0(i32 %v0_e2cc, i32 %v3_e2d0)
  %v0_e2d8 = load i32, i32* @r4, align 4
  %v4_e2d8 = mul i32 %v2_e2d4, 4
  %v5_e2d8 = add i32 %v0_e2d8, %v4_e2d8
  %v6_e2d8 = inttoptr i32 %v5_e2d8 to i32*
  %v7_e2d8 = load i32, i32* %v6_e2d8, align 4
  %v0_e2dc = load i32, i32* @r5, align 4
  store i32 %v7_e2d8, i32* @global_var_1d244.82, align 4
  %v1_e2e4 = call i32 @function_ee2c(i32 %v0_e2dc)
  %v1_e2ec = call i32 @function_10e50(i32 1)
  %v3_e2f8 = call i32 @function_10d6c(i32 1, i32* null)
  %v4_e2f8 = inttoptr i32 %v3_e2f8 to i8*
  %v2_e2fc = add i32 %v3_e2f8, 1
  %v3_e2fc = inttoptr i32 %v2_e2fc to i8*
  %v4_e2fc = load i8, i8* %v3_e2fc, align 1
  %v3_e300 = load i8, i8* %v4_e2f8, align 1
  store i8 %v4_e2fc, i8* bitcast (i32* @global_var_1d243.83 to i8*), align 4
  store i8 %v3_e300, i8* bitcast (i32* @global_var_1d242.84 to i8*), align 4
  %v2_e318 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_e318, i32* @r4, align 4
  %v1_e31c = call i32 @function_10d98(i32 1)
  %v0_e320 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e320, label %bb6, label %bb7

bb6:                                              ; preds = %bb5
  br label %bb7

bb7:                                              ; preds = %bb5, %bb6
  ret i32 %v1_e31c

; uselistorder directives
  uselistorder label %bb7, { 1, 0 }
}

define i32 @function_e324(i32 %arg1) local_unnamed_addr {
dec_label_pc_e324:
  %stack_var_-16 = alloca i32, align 4
  %v3_e324 = load i32, i32* @r4, align 4
  %v6_e324 = load i32, i32* @r5, align 4
  %v2_e328 = ptrtoint i32* %stack_var_-16 to i32
  %v0_e32c = call i32 @function_11e44()
  %v7_e330 = icmp eq i32 %v0_e32c, -1
  %. = zext i1 %v7_e330 to i32
  %tmp10 = icmp slt i32 %v0_e32c, 1
  %storemerge4 = select i1 %tmp10, i32 %., i32 1
  store i32 %storemerge4, i32* @r5, align 4
  %v2_e34c = icmp eq i32 %storemerge4, 0
  store i32 %v0_e32c, i32* @global_var_1d1a0.86, align 4
  br i1 %v2_e34c, label %dec_label_pc_e360, label %dec_label_pc_e358

dec_label_pc_e358:                                ; preds = %dec_label_pc_e324
  store i32 %v3_e324, i32* @r4, align 4
  store i32 %v6_e324, i32* @r5, align 4
  ret i32 %v0_e32c

dec_label_pc_e360:                                ; preds = %dec_label_pc_e324
  store i32 1, i32* %stack_var_-16, align 4
  %v1_e36c = call i32 @function_10e50(i32 28)
  %v1_e374 = call i32 @function_10e50(i32 29)
  %v0_e378 = load i32, i32* @r5, align 4
  %v2_e380 = inttoptr i32 %v0_e378 to i32*
  %v3_e380 = call i32 @function_10d6c(i32 28, i32* %v2_e380)
  %v2_e388 = inttoptr i32 %v3_e380 to i8*
  %v3_e388 = call i32 @function_11f44(i8* %v2_e388, i32 2)
  %v7_e38c = icmp eq i32 %v3_e388, -1
  store i32 %v3_e388, i32* @r4, align 4
  br i1 %v7_e38c, label %dec_label_pc_e3d4, label %dec_label_pc_e398

dec_label_pc_e398:                                ; preds = %dec_label_pc_e3d4, %dec_label_pc_e360
  %v0_e3a4 = phi i32 [ %v3_e3e4, %dec_label_pc_e3d4 ], [ %v3_e388, %dec_label_pc_e360 ]
  %v3_e3ac = call i32 @function_11ec8(i32 %v0_e3a4, i32 -2147199228, i32 %v2_e328)
  br label %dec_label_pc_e3b0

dec_label_pc_e3b0:                                ; preds = %dec_label_pc_e3b0, %dec_label_pc_e398
  %v0_e3bc = load i32, i32* @r4, align 4
  %v3_e3c4 = call i32 @function_11ec8(i32 %v0_e3bc, i32 -2147199227, i32 0)
  %v1_e3cc = call i32 @function_13248(i32 10)
  br label %dec_label_pc_e3b0

dec_label_pc_e3d4:                                ; preds = %dec_label_pc_e360
  %v0_e3d4 = load i32, i32* @r5, align 4
  %v2_e3dc = inttoptr i32 %v0_e3d4 to i32*
  %v3_e3dc = call i32 @function_10d6c(i32 29, i32* %v2_e3dc)
  %v2_e3e4 = inttoptr i32 %v3_e3dc to i8*
  %v3_e3e4 = call i32 @function_11f44(i8* %v2_e3e4, i32 2)
  %v3_e3e8 = icmp eq i32 %v3_e3e4, -1
  store i32 %v3_e3e4, i32* @r4, align 4
  br i1 %v3_e3e8, label %dec_label_pc_e3f4, label %dec_label_pc_e398

dec_label_pc_e3f4:                                ; preds = %dec_label_pc_e3d4
  %v1_e3f8 = call i32 @function_10d98(i32 28)
  %v1_e400 = call i32 @function_10d98(i32 29)
  %v0_e404 = load i32, i32* @r5, align 4
  %v1_e408 = call i32 @function_131b4(i32 %v0_e404)
  %v0_e40c = load i1, i1* @cpsr_z, align 1
  br i1 %v0_e40c, label %bb13, label %bb14

bb13:                                             ; preds = %dec_label_pc_e3f4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_e3f4, %bb13
  ret i32 %v1_e408

; uselistorder directives
  uselistorder i32 %v3_e3e4, { 1, 2, 0 }
  uselistorder i32 %v3_e388, { 1, 2, 0 }
  uselistorder i32 %storemerge4, { 1, 0 }
  uselistorder i32 %v0_e32c, { 3, 1, 2, 0 }
  uselistorder i32 (i32, i32, i32)* @function_11ec8, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
}

define i32 @function_e410(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_e410:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  %stack_var_-1548 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-38 = alloca i8*, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-524 = alloca i32, align 4
  %stack_var_-396 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-140 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_e410 = load i32, i32* @r4, align 4
  store i32 %v3_e410, i32* %stack_var_-36, align 4
  %v6_e410 = load i32, i32* @r5, align 4
  %v9_e410 = load i32, i32* @r6, align 4
  %v2_e41c = ptrtoint i32* %stack_var_-268 to i32
  store i32 %v2_e41c, i32* @r4, align 4
  store i32 0, i32* @r5, align 4
  store i32 %arg1, i32* @r6, align 4
  store i32 %v2_e41c, i32* @r0, align 4
  store i32 %tmp, i32* @r8, align 4
  store i32 0, i32* %stack_var_-44, align 4
  %v1_e434 = call i32 @function_12788(i32 %v2_e41c)
  store i32 %v2_e41c, i32* @r0, align 4
  %v2_e440 = call i32 @function_12758(i32 %v2_e41c, i32 2)
  %v0_e444 = load i32, i32* @r5, align 4
  store i32 %v0_e444, i32* %r2.global-to-local, align 4
  %v3_e450 = bitcast i32* %stack_var_-268 to %_TYPEDEF_sigset_t*
  %v4_e450 = call i32 @function_12094(i32 %v0_e444, %_TYPEDEF_sigset_t* %v3_e450, i32 %v0_e444)
  %v2_e45c = call i32 @function_127a0(i32 17, i32 1)
  %v2_e468 = call i32 @function_127a0(i32 5, i32 ptrtoint (i32* @global_var_e10c.88 to i32))
  %v0_e46c = call i32 @function_117cc()
  store i32 %v0_e46c, i32* @global_var_1d234.50, align 4
  store i32 1494907824, i32* %r2.global-to-local, align 4
  store i8 23, i8* bitcast (i32* @global_var_1d243.83 to i8*), align 4
  store i32 2, i32* %r3.global-to-local, align 4
  store i8 2, i8* bitcast (i8** @global_var_1d240.81 to i8*), align 4
  store i32 1494907824, i32* @global_var_1d244.82, align 4
  %v0_e494 = load i32, i32* @r5, align 4
  %v1_e494 = trunc i32 %v0_e494 to i8
  store i8 %v1_e494, i8* bitcast (i32* @global_var_1d242.84 to i8*), align 4
  store i8 %v1_e494, i8* bitcast (i32* @global_var_1d241.92 to i8*), align 4
  %v6_e49c = call i32 @function_10f08(i32 %v0_e46c, i32 ptrtoint (i8** @global_var_1d240.81 to i32), i32 1494907824, i32 2)
  store i32 ptrtoint (i32* @global_var_e294.72 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_e294.72 to i32), i32* @global_var_1d028.74, align 4
  %v2_e4b0 = ptrtoint i32* %stack_var_-140 to i32
  store i32 %v2_e4b0, i32* @sb, align 4
  %v1_e4b4 = call i32 @function_e124(i32 %v6_e49c)
  %v1_e4b8 = call i32 @function_ec20(i32 %v1_e4b4)
  store i32 %v2_e4b0, i32* @r0, align 4
  store i32 32, i32* @r1, align 4
  %v0_e4c4 = call i32 @function_115b4()
  %v0_e4c8 = load i32, i32* @r6, align 4
  %v7_e4c8 = icmp eq i32 %v0_e4c8, 2
  br i1 %v7_e4c8, label %dec_label_pc_e5f4, label %dec_label_pc_e4d0

dec_label_pc_e4d0:                                ; preds = %dec_label_pc_e5f4, %dec_label_pc_e410, %dec_label_pc_e604
  %v0_e4d0 = call i32 @function_ebc8()
  store i32 %v0_e4d0, i32* %r6.global-to-local, align 4
  %v0_e4d8 = load i32, i32* @r8, align 4
  %v1_e4d8 = inttoptr i32 %v0_e4d8 to i32*
  %v2_e4d8 = load i32, i32* %v1_e4d8, align 4
  %v1_e4dc = inttoptr i32 %v2_e4d8 to i8*
  %v2_e4dc = call i32 @function_11514(i8* %v1_e4dc)
  %v0_e4e4 = load i32, i32* @r8, align 4
  %v1_e4e4 = inttoptr i32 %v0_e4e4 to i32*
  %v2_e4e4 = load i32, i32* %v1_e4e4, align 4
  %v1_e4e8 = inttoptr i32 %v2_e4e4 to i8*
  %v2_e4e8 = call i32 @function_11514(i8* %v1_e4e8)
  %v1_e4ec = sub i32 20, %v2_e4dc
  store i32 %v2_e4e8, i32* @r5, align 4
  %v0_e4f4 = load i32, i32* %r6.global-to-local, align 4
  %v2_e4f8 = call i32 @function_11ba0(i32 %v0_e4f4, i32 %v1_e4ec)
  %v1_e500 = load i32, i32* @r5, align 4
  %v2_e500 = add i32 %v1_e500, %v2_e4f8
  store i32 %v2_e500, i32* @r4, align 4
  %v2_e504 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_e504, i32* @r6, align 4
  %v2_e510 = call i32 @function_ec7c(i32 %v2_e504, i32 %v2_e500)
  %v2_e514 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_e514, i32* %r2.global-to-local, align 4
  %v1_e518 = load i32, i32* @r4, align 4
  %v2_e518 = add i32 %v1_e518, %v2_e514
  store i32 %v2_e518, i32* %r3.global-to-local, align 4
  store i32 0, i32* @sl, align 4
  %v0_e524 = load i32, i32* @r8, align 4
  %v1_e524 = inttoptr i32 %v0_e524 to i32*
  %v2_e524 = load i32, i32* %v1_e524, align 4
  store i32 %v2_e524, i32* @r0, align 4
  %v3_e528 = add i32 %v2_e518, -72
  %v4_e528 = inttoptr i32 %v3_e528 to i8*
  store i8 0, i8* %v4_e528, align 1
  %v2_e52c = inttoptr i32 %v2_e524 to i8*
  %v3_e52c = call i32 @function_1153c(i8* %v2_e52c, i32 %v2_e504)
  store i32 32, i32* @r1, align 4
  store i32 %v2_e504, i32* @r0, align 4
  %v0_e538 = call i32 @function_115b4()
  %v0_e53c = call i32 @function_ebc8()
  store i32 %v0_e53c, i32* @r7, align 4
  %v0_e544 = load i32, i32* @r8, align 4
  %v1_e544 = inttoptr i32 %v0_e544 to i32*
  %v2_e544 = load i32, i32* %v1_e544, align 4
  %v1_e548 = inttoptr i32 %v2_e544 to i8*
  %v2_e548 = call i32 @function_11514(i8* %v1_e548)
  %v0_e550 = load i32, i32* @r8, align 4
  %v1_e550 = inttoptr i32 %v0_e550 to i32*
  %v2_e550 = load i32, i32* %v1_e550, align 4
  %v1_e554 = inttoptr i32 %v2_e550 to i8*
  %v2_e554 = call i32 @function_11514(i8* %v1_e554)
  %v1_e558 = sub i32 20, %v2_e548
  store i32 %v2_e554, i32* @r5, align 4
  %v0_e560 = load i32, i32* @r7, align 4
  %v2_e564 = call i32 @function_11ba0(i32 %v0_e560, i32 %v1_e558)
  %v1_e568 = load i32, i32* @r5, align 4
  %v2_e568 = add i32 %v1_e568, %v2_e564
  store i32 %v2_e568, i32* @r4, align 4
  %v2_e574 = call i32 @function_ec7c(i32 %v2_e504, i32 %v2_e568)
  %v1_e57c = load i32, i32* @r4, align 4
  %v2_e57c = add i32 %v1_e57c, %v2_e514
  store i32 %v2_e57c, i32* @r3, align 4
  %v0_e580 = load i32, i32* @sl, align 4
  %v1_e580 = trunc i32 %v0_e580 to i8
  %v3_e580 = add i32 %v2_e57c, -72
  %v4_e580 = inttoptr i32 %v3_e580 to i8*
  store i8 %v1_e580, i8* %v4_e580, align 1
  %v2_e58c = call i32 @function_11fb0(i32 15, i32 %v2_e504)
  %v1_e594 = call i32 @function_10e50(i32 5)
  %v3_e5a4 = call i32 @function_10d6c(i32 5, i32* nonnull %stack_var_-44)
  %v3_e5a8 = load i32, i32* %stack_var_-44, align 4
  store i32 %v3_e5a8, i32* %r2.global-to-local, align 4
  %v3_e5b4 = inttoptr i32 %v3_e5a4 to i32*
  %v4_e5b4 = call i32 @function_12140(i32 1, i32* %v3_e5b4, i32 %v3_e5a8)
  store i32 1, i32* %r2.global-to-local, align 4
  %v4_e5c4 = call i32 @function_12140(i32 1, i32* nonnull @global_var_146b8.96, i32 1)
  %v1_e5cc = call i32 @function_10d98(i32 5)
  %v1_e5d0 = call i32 @function_8650(i32 %v1_e5cc)
  %v1_e5d4 = call i32 @function_d774(i32 %v1_e5d0)
  %v1_e5d8 = call i32 @function_e324(i32 %v1_e5d4)
  %v0_e5dc = call i32 @function_11e44()
  %v1_e5e0 = load i32, i32* @sl, align 4
  %v7_e5e4 = icmp sgt i32 %v0_e5dc, %v1_e5e0
  br i1 %v7_e5e4, label %dec_label_pc_e5e8, label %dec_label_pc_e62c

dec_label_pc_e5e8:                                ; preds = %dec_label_pc_e4d0
  store i32 %v6_e410, i32* %r5.global-to-local, align 4
  store i32 %v9_e410, i32* %r6.global-to-local, align 4
  ret i32 0

dec_label_pc_e5f4:                                ; preds = %dec_label_pc_e410
  %v0_e5f4 = load i32, i32* @r8, align 4
  %v1_e5f4 = add i32 %v0_e5f4, 4
  %v2_e5f4 = inttoptr i32 %v1_e5f4 to i32*
  %v3_e5f4 = load i32, i32* %v2_e5f4, align 4
  %v1_e5f8 = inttoptr i32 %v3_e5f4 to i8*
  %v2_e5f8 = call i32 @function_11514(i8* %v1_e5f8)
  %v8_e600 = icmp sgt i32 %v2_e5f8, 31
  br i1 %v8_e600, label %dec_label_pc_e4d0, label %dec_label_pc_e604

dec_label_pc_e604:                                ; preds = %dec_label_pc_e5f4
  %v0_e604 = load i32, i32* @r8, align 4
  %v1_e604 = add i32 %v0_e604, 4
  %v2_e604 = inttoptr i32 %v1_e604 to i32*
  %v3_e604 = load i32, i32* %v2_e604, align 4
  store i32 %v2_e4b0, i32* @r0, align 4
  %v2_e60c = bitcast i32* %stack_var_-140 to i8*
  %v3_e60c = call i32 @function_1153c(i8* %v2_e60c, i32 %v3_e604)
  %v0_e610 = load i32, i32* @r8, align 4
  %v1_e610 = add i32 %v0_e610, 4
  %v2_e610 = inttoptr i32 %v1_e610 to i32*
  %v3_e610 = load i32, i32* %v2_e610, align 4
  %v1_e618 = inttoptr i32 %v3_e610 to i8*
  %v2_e618 = call i32 @function_11514(i8* %v1_e618)
  store i32 %v2_e618, i32* @r1, align 4
  store i32 %v3_e610, i32* @r0, align 4
  %v0_e624 = call i32 @function_115b4()
  br label %dec_label_pc_e4d0

dec_label_pc_e62c:                                ; preds = %dec_label_pc_e4d0
  %v1_e62c = call i32 @function_12068(i32 %v0_e5dc)
  %v0_e634 = load i32, i32* @sl, align 4
  %v1_e638 = call i32 @function_11e18(i32 %v0_e634)
  %v1_e640 = call i32 @function_11e18(i32 1)
  %v1_e648 = call i32 @function_11e18(i32 2)
  %v1_e64c = call i32 @function_8650(i32 %v1_e648)
  %v1_e650 = call i32 @function_d774(i32 %v1_e64c)
  %v1_e654 = call i32 @function_e324(i32 %v1_e650)
  %v1_e658 = call i32 @function_f628(i32 %v1_e654)
  %v2_e668 = ptrtoint i32* %stack_var_-396 to i32
  store i32 %v2_e668, i32* @r6, align 4
  %v2_e66c = ptrtoint i32* %stack_var_-524 to i32
  store i32 %v2_e66c, i32* @r7, align 4
  %v2_e744 = ptrtoint i32* %stack_var_-60 to i32
  %v2_e984 = ptrtoint i32* %stack_var_-52 to i32
  %v4_e998 = bitcast i8** %stack_var_-38 to i32*
  %v2_eaf4 = ptrtoint i32* %stack_var_-1548 to i32
  %v2_e9a8 = ptrtoint i32* %stack_var_-48 to i32
  %v1_ea4c = bitcast i32* %stack_var_-140 to i8*
  %v5_ea14 = bitcast i32* %stack_var_-76 to %sockaddr*
  %v1_ea28 = sub i32 0, %v1_e62c
  br label %dec_label_pc_e670

dec_label_pc_e670:                                ; preds = %dec_label_pc_e670.backedge, %dec_label_pc_e62c
  %v2_e67845 = phi i32 [ %v2_e67845.pre, %dec_label_pc_e670.backedge ], [ %v2_e668, %dec_label_pc_e62c ]
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v4_e67847 = inttoptr i32 %v2_e67845 to i32*
  store i32 0, i32* %v4_e67847, align 4
  %v0_e67c48 = load i32, i32* %r3.global-to-local, align 4
  %v1_e67c49 = add i32 %v0_e67c48, 4
  store i32 %v1_e67c49, i32* %r3.global-to-local, align 4
  %v7_e68050 = icmp eq i32 %v1_e67c49, 128
  br i1 %v7_e68050, label %dec_label_pc_e688, label %dec_label_pc_e678.dec_label_pc_e678_crit_edge

dec_label_pc_e678.dec_label_pc_e678_crit_edge:    ; preds = %dec_label_pc_e670, %dec_label_pc_e678.dec_label_pc_e678_crit_edge
  %v1_e67c51 = phi i32 [ %v1_e67c, %dec_label_pc_e678.dec_label_pc_e678_crit_edge ], [ %v1_e67c49, %dec_label_pc_e670 ]
  %v0_e678.pre = load i32, i32* %r2.global-to-local, align 4
  %v2_e678 = load i32, i32* @r6, align 4
  %v3_e678 = add i32 %v2_e678, %v1_e67c51
  %v4_e678 = inttoptr i32 %v3_e678 to i32*
  store i32 %v0_e678.pre, i32* %v4_e678, align 4
  %v0_e67c = load i32, i32* %r3.global-to-local, align 4
  %v1_e67c = add i32 %v0_e67c, 4
  store i32 %v1_e67c, i32* %r3.global-to-local, align 4
  %v7_e680 = icmp eq i32 %v1_e67c, 128
  br i1 %v7_e680, label %dec_label_pc_e688, label %dec_label_pc_e678.dec_label_pc_e678_crit_edge

dec_label_pc_e688:                                ; preds = %dec_label_pc_e678.dec_label_pc_e678_crit_edge, %dec_label_pc_e670
  %v0_e688 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_e688, i32* %r3.global-to-local, align 4
  store i32 %v0_e688, i32* @r4, align 4
  %v2_e69052 = load i32, i32* @r7, align 4
  %v3_e69053 = add i32 %v2_e69052, %v0_e688
  %v4_e69054 = inttoptr i32 %v3_e69053 to i32*
  store i32 %v0_e688, i32* %v4_e69054, align 4
  %v0_e69455 = load i32, i32* %r3.global-to-local, align 4
  %v1_e69456 = add i32 %v0_e69455, 4
  store i32 %v1_e69456, i32* %r3.global-to-local, align 4
  %v7_e69857 = icmp eq i32 %v1_e69456, 128
  br i1 %v7_e69857, label %dec_label_pc_e6a0, label %dec_label_pc_e690.dec_label_pc_e690_crit_edge

dec_label_pc_e690.dec_label_pc_e690_crit_edge:    ; preds = %dec_label_pc_e688, %dec_label_pc_e690.dec_label_pc_e690_crit_edge
  %v1_e69458 = phi i32 [ %v1_e694, %dec_label_pc_e690.dec_label_pc_e690_crit_edge ], [ %v1_e69456, %dec_label_pc_e688 ]
  %v0_e690.pre = load i32, i32* @r4, align 4
  %v2_e690 = load i32, i32* @r7, align 4
  %v3_e690 = add i32 %v2_e690, %v1_e69458
  %v4_e690 = inttoptr i32 %v3_e690 to i32*
  store i32 %v0_e690.pre, i32* %v4_e690, align 4
  %v0_e694 = load i32, i32* %r3.global-to-local, align 4
  %v1_e694 = add i32 %v0_e694, 4
  store i32 %v1_e694, i32* %r3.global-to-local, align 4
  %v7_e698 = icmp eq i32 %v1_e694, 128
  br i1 %v7_e698, label %dec_label_pc_e6a0, label %dec_label_pc_e690.dec_label_pc_e690_crit_edge

dec_label_pc_e6a0:                                ; preds = %dec_label_pc_e690.dec_label_pc_e690_crit_edge, %dec_label_pc_e688
  store i32 ptrtoint (i32* @global_var_1d020.76 to i32), i32* %r2.global-to-local, align 4
  %v2_e6a4 = load i32, i32* @global_var_1d020.76, align 4
  %v7_e6a8 = icmp eq i32 %v2_e6a4, -1
  br i1 %v7_e6a8, label %dec_label_pc_e6d4, label %dec_label_pc_e6b0

dec_label_pc_e6b0:                                ; preds = %dec_label_pc_e6a0
  %v3_e6b0 = udiv i32 %v2_e6a4, 32
  %v3_e6b4 = mul nuw nsw i32 %v3_e6b0, 4
  %v2_e6bc = add i32 %v3_e6b4, %v2_e514
  store i32 %v2_e6bc, i32* %r3.global-to-local, align 4
  %v1_e6c0 = add i32 %v2_e6bc, -360
  %v2_e6c0 = inttoptr i32 %v1_e6c0 to i32*
  %v3_e6c0 = load i32, i32* %v2_e6c0, align 4
  %v1_e6c4 = urem i32 %v2_e6a4, 32
  %v7_e6cc = shl i32 1, %v1_e6c4
  %v8_e6cc = or i32 %v3_e6c0, %v7_e6cc
  store i32 %v8_e6cc, i32* %r2.global-to-local, align 4
  store i32 %v8_e6cc, i32* %v2_e6c0, align 4
  br label %dec_label_pc_e6d4

dec_label_pc_e6d4:                                ; preds = %dec_label_pc_e6a0, %dec_label_pc_e6b0
  %v2_e6d4 = load i32, i32* @global_var_1d024.98, align 4
  store i32 %v2_e6d4, i32* %r3.global-to-local, align 4
  %v7_e6d8 = icmp eq i32 %v2_e6d4, -1
  store i32 ptrtoint (i32* @global_var_1d024.98 to i32), i32* @r8, align 4
  br i1 %v7_e6d8, label %dec_label_pc_e910, label %dec_label_pc_e6e4

dec_label_pc_e6e4:                                ; preds = %dec_label_pc_e910, %dec_label_pc_e6d4, %.thread
  store i32 ptrtoint (i8** @global_var_1d1a4.101 to i32), i32* %r2.global-to-local, align 4
  %v2_e6e8 = load i8, i8* bitcast (i8** @global_var_1d1a4.101 to i8*), align 4
  %v2_e6ec = icmp eq i8 %v2_e6e8, 0
  %v2_e82c = load i32, i32* @global_var_1d024.98, align 4
  %v3_e830 = udiv i32 %v2_e82c, 32
  store i32 %v3_e830, i32* %r3.global-to-local, align 4
  br i1 %v2_e6ec, label %dec_label_pc_e82c, label %dec_label_pc_e6f4

dec_label_pc_e6f4:                                ; preds = %dec_label_pc_e6e4
  %v3_e6fc = mul nuw nsw i32 %v3_e830, 4
  %v2_e704 = add i32 %v3_e6fc, %v2_e514
  store i32 %v2_e704, i32* %r3.global-to-local, align 4
  %v1_e708 = add i32 %v2_e704, -488
  %v2_e708 = inttoptr i32 %v1_e708 to i32*
  %v3_e708 = load i32, i32* %v2_e708, align 4
  %v1_e70c = urem i32 %v2_e82c, 32
  %v7_e714 = shl i32 1, %v1_e70c
  %v8_e714 = or i32 %v3_e708, %v7_e714
  store i32 %v8_e714, i32* %r2.global-to-local, align 4
  store i32 %v8_e714, i32* %v2_e708, align 4
  br label %dec_label_pc_e71c

dec_label_pc_e71c:                                ; preds = %dec_label_pc_e82c, %dec_label_pc_e6f4
  %v2_e720 = load i32, i32* @global_var_1d020.76, align 4
  %v2_e724 = load i32, i32* @global_var_1d024.98, align 4
  store i32 %v2_e724, i32* %r3.global-to-local, align 4
  %v5_e730 = icmp slt i32 %v2_e720, %v2_e724
  br i1 %v5_e730, label %bb, label %bb42

bb:                                               ; preds = %dec_label_pc_e71c
  br label %bb42

bb42:                                             ; preds = %dec_label_pc_e71c, %bb
  %v0_e748 = phi i32 [ %v2_e720, %dec_label_pc_e71c ], [ %v2_e724, %bb ]
  store i32 0, i32* @lr, align 4
  store i32 10, i32* %stack_var_-60, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_e748 = add i32 %v0_e748, 1
  store i32 %v2_e66c, i32* %r2.global-to-local, align 4
  %v5_e75c = call i32 @function_12038(i32 %v1_e748, i32 %v2_e668, i32 %v2_e66c, i32 0, i32 %v2_e744)
  %v8_e760 = icmp eq i32 %v5_e75c, -1
  store i32 %v5_e75c, i32* %r3.global-to-local, align 4
  br i1 %v8_e760, label %dec_label_pc_e670.backedge, label %dec_label_pc_e76c

dec_label_pc_e76c:                                ; preds = %bb42
  %v6_e75c = trunc i32 %v5_e75c to i8
  %v3_e76c = icmp eq i8 %v6_e75c, 0
  br i1 %v3_e76c, label %dec_label_pc_e774, label %dec_label_pc_e794

dec_label_pc_e774:                                ; preds = %dec_label_pc_e76c
  %v0_e774 = load i32, i32* @sl, align 4
  %v6_e780 = inttoptr i32 %v5_e75c to i8*
  store i8* %v6_e780, i8** %stack_var_-38, align 4
  %v2_e784 = call i32 @function_11c6c(i32 %v0_e774, i32 6)
  %v2_e788 = icmp eq i32 %v2_e784, 0
  %v0_e78c = load i32, i32* @sl, align 4
  %v1_e78c = add i32 %v0_e78c, 1
  store i32 %v1_e78c, i32* @sl, align 4
  br i1 %v2_e788, label %dec_label_pc_e980, label %dec_label_pc_e794

dec_label_pc_e794:                                ; preds = %dec_label_pc_e76c, %dec_label_pc_e774, %dec_label_pc_e980
  store i32 ptrtoint (i32* @global_var_1d020.76 to i32), i32* %r2.global-to-local, align 4
  %v2_e798 = load i32, i32* @global_var_1d020.76, align 4
  %v7_e79c = icmp eq i32 %v2_e798, -1
  br i1 %v7_e79c, label %dec_label_pc_e7c8, label %dec_label_pc_e7a4

dec_label_pc_e7a4:                                ; preds = %dec_label_pc_e794
  %v3_e7a4 = udiv i32 %v2_e798, 32
  %v3_e7a8 = mul nuw nsw i32 %v3_e7a4, 4
  store i32 %v2_e514, i32* @ip, align 4
  %v2_e7b0 = add i32 %v3_e7a8, %v2_e514
  store i32 %v2_e7b0, i32* %r3.global-to-local, align 4
  %v1_e7b4 = add i32 %v2_e7b0, -360
  %v2_e7b4 = inttoptr i32 %v1_e7b4 to i32*
  %v3_e7b4 = load i32, i32* %v2_e7b4, align 4
  %v1_e7b8 = urem i32 %v2_e798, 32
  %v6_e7bc = lshr i32 %v3_e7b4, %v1_e7b8
  store i32 %v6_e7bc, i32* %r2.global-to-local, align 4
  %v1_e7c0 = urem i32 %v6_e7bc, 2
  %v2_e7c0 = icmp eq i32 %v1_e7c0, 0
  br i1 %v2_e7c0, label %dec_label_pc_e7c8, label %dec_label_pc_e9fc

dec_label_pc_e7c8:                                ; preds = %dec_label_pc_e7a4, %dec_label_pc_e794
  store i32 ptrtoint (i8** @global_var_1d1a4.101 to i32), i32* %r3.global-to-local, align 4
  %v2_e7cc = load i8, i8* bitcast (i8** @global_var_1d1a4.101 to i8*), align 4
  %v3_e7cc = zext i8 %v2_e7cc to i32
  store i32 %v3_e7cc, i32* @r4, align 4
  %v2_e7d0 = icmp eq i8 %v2_e7cc, 0
  %v2_e858 = load i32, i32* @global_var_1d024.98, align 4
  br i1 %v2_e7d0, label %dec_label_pc_e858, label %dec_label_pc_e7d8

dec_label_pc_e7d8:                                ; preds = %dec_label_pc_e7c8
  %v3_e7dc = udiv i32 %v2_e858, 32
  %v3_e7e4 = mul nuw nsw i32 %v3_e7dc, 4
  %v2_e7e8 = add i32 %v3_e7e4, %v2_e514
  store i32 %v2_e7e8, i32* %r3.global-to-local, align 4
  %v1_e7ec = add i32 %v2_e7e8, -488
  %v2_e7ec = inttoptr i32 %v1_e7ec to i32*
  %v3_e7ec = load i32, i32* %v2_e7ec, align 4
  %v1_e7f0 = urem i32 %v2_e858, 32
  %v6_e7f4 = lshr i32 %v3_e7ec, %v1_e7f0
  store i32 %v6_e7f4, i32* %r2.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1a4.101 to i32), i32* %r3.global-to-local, align 4
  %v1_e800 = urem i32 %v6_e7f4, 2
  %v2_e800 = icmp eq i32 %v1_e800, 0
  store i8 0, i8* bitcast (i8** @global_var_1d1a4.101 to i8*), align 4
  store i32 ptrtoint (i32* @global_var_1d024.98 to i32), i32* @r5, align 4
  br i1 %v2_e800, label %dec_label_pc_e810, label %dec_label_pc_e9a0

dec_label_pc_e810:                                ; preds = %dec_label_pc_e7d8
  store i32 59416, i32* @lr, align 4
  %v1_e814 = icmp ne i32 %v2_e858, -1
  call void @__pseudo_cond_branch(i1 %v1_e814, i32 ptrtoint (i32* @global_var_11e18.102 to i32))
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e81c = load i32, i32* @r5, align 4
  %v2_e81c = inttoptr i32 %v1_e81c to i32*
  store i32 -1, i32* %v2_e81c, align 4
  %v1_e824 = call i32 @function_13248(i32 1)
  br label %dec_label_pc_e670.backedge

dec_label_pc_e670.backedge:                       ; preds = %dec_label_pc_e810, %dec_label_pc_e8fc, %dec_label_pc_e9d4, %dec_label_pc_ea98, %dec_label_pc_eabc, %dec_label_pc_eb70, %dec_label_pc_eb7c, %bb42, %dec_label_pc_e858, %dec_label_pc_e868, %dec_label_pc_ea48, %bb44, %dec_label_pc_eb1c, %dec_label_pc_eaac
  %v2_e67845.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_e670

dec_label_pc_e82c:                                ; preds = %dec_label_pc_e6e4
  store i32 %v2_e514, i32* %r2.global-to-local, align 4
  %v3_e838 = mul nuw nsw i32 %v3_e830, 4
  %v2_e83c = add i32 %v3_e838, %v2_e514
  store i32 %v2_e83c, i32* %r3.global-to-local, align 4
  %v1_e840 = add i32 %v2_e83c, -360
  %v2_e840 = inttoptr i32 %v1_e840 to i32*
  %v3_e840 = load i32, i32* %v2_e840, align 4
  %v1_e844 = urem i32 %v2_e82c, 32
  %v7_e84c = shl i32 1, %v1_e844
  %v8_e84c = or i32 %v3_e840, %v7_e84c
  store i32 %v8_e84c, i32* %r2.global-to-local, align 4
  store i32 %v8_e84c, i32* %v2_e840, align 4
  br label %dec_label_pc_e71c

dec_label_pc_e858:                                ; preds = %dec_label_pc_e7c8
  %v7_e85c = icmp eq i32 %v2_e858, -1
  store i32 ptrtoint (i32* @global_var_1d024.98 to i32), i32* @r5, align 4
  br i1 %v7_e85c, label %dec_label_pc_e670.backedge, label %dec_label_pc_e868

dec_label_pc_e868:                                ; preds = %dec_label_pc_e858
  %v3_e868 = udiv i32 %v2_e858, 32
  %v3_e86c = mul nuw nsw i32 %v3_e868, 4
  %v2_e874 = add i32 %v3_e86c, %v2_e514
  store i32 %v2_e874, i32* %r3.global-to-local, align 4
  %v1_e878 = add i32 %v2_e874, -360
  %v2_e878 = inttoptr i32 %v1_e878 to i32*
  %v3_e878 = load i32, i32* %v2_e878, align 4
  %v1_e87c = urem i32 %v2_e858, 32
  %v6_e880 = lshr i32 %v3_e878, %v1_e87c
  store i32 %v6_e880, i32* %r2.global-to-local, align 4
  %v1_e884 = urem i32 %v6_e880, 2
  %v2_e884 = icmp eq i32 %v1_e884, 0
  br i1 %v2_e884, label %dec_label_pc_e670.backedge, label %dec_label_pc_e88c

dec_label_pc_e88c:                                ; preds = %dec_label_pc_e868
  %v6_e88c = inttoptr i32 %v3_e7cc to i8*
  store i8* %v6_e88c, i8** %stack_var_-38, align 4
  %v0_e894 = call i32 @function_123ec()
  %v0_e898 = load i32, i32* @r4, align 4
  %v2_e898 = inttoptr i32 %v0_e894 to i32*
  store i32 %v0_e898, i32* %v2_e898, align 4
  store i32 %v0_e894, i32* @r8, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_e8ac = load i32, i32* @global_var_1d024.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v5_e8b8 = call i32 @function_1263c(i32 %v2_e8ac, i32* %v4_e998, i32 2, i32 16386)
  %v7_e8bc = icmp eq i32 %v5_e8b8, -1
  br i1 %v7_e8bc, label %dec_label_pc_eaac, label %dec_label_pc_e8c4

dec_label_pc_e8c4:                                ; preds = %dec_label_pc_e88c
  %v2_e8c4 = icmp eq i32 %v5_e8b8, 0
  br i1 %v2_e8c4, label %dec_label_pc_eabc, label %dec_label_pc_e8cc

dec_label_pc_e8cc:                                ; preds = %dec_label_pc_e8c4
  %v3_e8cc = load i8*, i8** %stack_var_-38, align 4
  %v4_e8cc = ptrtoint i8* %v3_e8cc to i32
  store i32 %v3_e7cc, i32* %r3.global-to-local, align 4
  %v4_e8d4 = mul nuw nsw i32 %v3_e7cc, 256
  %v5_e8d4 = or i32 %v4_e8cc, %v4_e8d4
  store i32 %v5_e8d4, i32* %r2.global-to-local, align 4
  %v7_e8d4 = icmp eq i32 %v5_e8d4, 0
  br i1 %v7_e8d4, label %dec_label_pc_eb7c, label %dec_label_pc_e8dc

dec_label_pc_e8dc:                                ; preds = %dec_label_pc_e8cc
  %v1_e8dc = mul i32 %v4_e8cc, 256
  %v3_e8e0 = and i32 %v1_e8dc, 65280
  %v4_e8e4 = udiv i32 %v5_e8d4, 256
  %v5_e8e4 = or i32 %v3_e8e0, %v4_e8e4
  %v6_e8e4 = trunc i32 %v4_e8e4 to i8
  store i32 %v5_e8e4, i32* %r2.global-to-local, align 4
  %v4_e8e8 = udiv i32 %v5_e8d4, 65536
  store i32 %v4_e8e8, i32* %r3.global-to-local, align 4
  %v3_e8ec = icmp slt i8 %v6_e8e4, 0
  %v7_e8f4 = inttoptr i32 %v4_e8e4 to i8*
  store i8* %v7_e8f4, i8** %stack_var_-38, align 4
  br i1 %v3_e8ec, label %dec_label_pc_e8fc, label %dec_label_pc_eaec

dec_label_pc_e8fc:                                ; preds = %dec_label_pc_e8dc
  %v2_e8fc = load i32, i32* @global_var_1d024.98, align 4
  %v1_e900 = call i32 @function_11e18(i32 %v2_e8fc)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e908 = load i32, i32* @r5, align 4
  %v2_e908 = inttoptr i32 %v1_e908 to i32*
  store i32 -1, i32* %v2_e908, align 4
  br label %dec_label_pc_e670.backedge

dec_label_pc_e910:                                ; preds = %dec_label_pc_e6d4
  %v0_e918 = load i32, i32* @r4, align 4
  store i32 %v0_e918, i32* %r2.global-to-local, align 4
  %v3_e91c = call i32 @function_1272c(i32 2, i32 1, i32 %v0_e918)
  %v7_e920 = icmp eq i32 %v3_e91c, -1
  store i32 %v3_e91c, i32* %r5.global-to-local, align 4
  %v1_e928 = load i32, i32* @r8, align 4
  %v2_e928 = inttoptr i32 %v1_e928 to i32*
  store i32 %v3_e91c, i32* %v2_e928, align 4
  br i1 %v7_e920, label %dec_label_pc_e6e4, label %dec_label_pc_e930

dec_label_pc_e930:                                ; preds = %dec_label_pc_e910
  %v0_e930 = load i32, i32* @r4, align 4
  store i32 %v0_e930, i32* @r2, align 4
  %v2_e938 = call i32 @function_11d54(i32 %v3_e91c, i32 3)
  %v1_e940 = or i32 %v2_e938, 2048
  store i32 %v1_e940, i32* @r2, align 4
  %v0_e944 = load i32, i32* %r5.global-to-local, align 4
  %v2_e948 = call i32 @function_11d54(i32 %v0_e944, i32 4)
  store i32 ptrtoint (i32* @global_var_1d028.74 to i32), i32* %r2.global-to-local, align 4
  %v2_e950 = load i32, i32* @global_var_1d028.74, align 4
  store i32 %v2_e950, i32* %r3.global-to-local, align 4
  %v2_e954 = icmp eq i32 %v2_e950, 0
  br i1 %v2_e954, label %.thread, label %bb43

bb43:                                             ; preds = %dec_label_pc_e930
  call void @__pseudo_branch(i32 ptrtoint (i32* @global_var_117cc.103 to i32))
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_e930, %bb43
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_e968 = load i32, i32* @global_var_1d024.98, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  store i8 1, i8* bitcast (i8** @global_var_1d1a4.101 to i8*), align 4
  %v5_e978 = call i32 @function_12588(i32 %v2_e968, %sockaddr* bitcast (i8** @global_var_1d240.81 to %sockaddr*), i32 16)
  br label %dec_label_pc_e6e4

dec_label_pc_e980:                                ; preds = %dec_label_pc_e774
  %v2_e988 = load i32, i32* @global_var_1d024.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_e998 = call i32 @function_1269c(i32 %v2_e988, i32* nonnull %v4_e998, i32 2, i32 16384)
  br label %dec_label_pc_e794

dec_label_pc_e9a0:                                ; preds = %dec_label_pc_e7d8
  store i32 4, i32* @r4, align 4
  store i32 %v2_e9a8, i32* %r3.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-52, align 4
  %v6_e9c4 = call i32 @function_125e0(i32 %v2_e858, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_e984)
  %v3_e9c8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_e9c8, i32* %r3.global-to-local, align 4
  %v2_e9cc = icmp eq i32 %v3_e9c8, 0
  br i1 %v2_e9cc, label %dec_label_pc_ea48, label %dec_label_pc_e9d4

dec_label_pc_e9d4:                                ; preds = %dec_label_pc_e9a0
  %v2_e9d4 = load i32, i32* @global_var_1d024.98, align 4
  %v1_e9d8 = call i32 @function_11e18(i32 %v2_e9d4)
  store i32 -1, i32* %r3.global-to-local, align 4
  %v1_e9e0 = load i32, i32* @r5, align 4
  %v2_e9e0 = inttoptr i32 %v1_e9e0 to i32*
  store i32 -1, i32* %v2_e9e0, align 4
  %v0_e9e4 = call i32 @function_ebc8()
  %v2_e9ec = call i32 @function_11ba0(i32 %v0_e9e4, i32 10)
  %v1_e9f0 = add i32 %v2_e9ec, 1
  %v1_e9f4 = call i32 @function_13248(i32 %v1_e9f0)
  br label %dec_label_pc_e670.backedge

dec_label_pc_e9fc:                                ; preds = %dec_label_pc_e7a4
  store i32 16, i32* %r3.global-to-local, align 4
  store i32 %v2_e9a8, i32* %r2.global-to-local, align 4
  store i32 16, i32* %stack_var_-48, align 4
  %v6_ea14 = call i32 @function_12530(i32 %v2_e798, %sockaddr* %v5_ea14, i32 %v2_e9a8, i32 16, i32 16)
  %v1_ea18 = call i32 @function_f39c(i32 %v6_ea14)
  %v1_ea1c = call i32 @function_d1c4(i32 %v1_ea18)
  store i32 %v1_e62c, i32* %r2.global-to-local, align 4
  %v2_ea2c = call i32 @function_11f18(i32 %v1_ea28, i32 9)
  store i32 ptrtoint (i32* @global_var_1d1a0.86 to i32), i32* %r3.global-to-local, align 4
  %v2_ea34 = load i32, i32* @global_var_1d1a0.86, align 4
  %v2_ea38 = icmp eq i32 %v2_ea34, 0
  br i1 %v2_ea38, label %dec_label_pc_ea40, label %dec_label_pc_eae0

dec_label_pc_ea40:                                ; preds = %dec_label_pc_e9fc, %dec_label_pc_eae0
  %v1_ea44 = call i32 @function_131b4(i32 0)
  br label %dec_label_pc_ea48

dec_label_pc_ea48:                                ; preds = %dec_label_pc_e9a0, %dec_label_pc_ea40
  %v2_ea4c = call i32 @function_11514(i8* %v1_ea4c)
  %sext = mul i32 %v2_ea4c, 16777216
  %v1_ea50 = sdiv i32 %sext, 16777216
  %v7_ea50 = inttoptr i32 %v1_ea50 to i8*
  store i8* %v7_ea50, i8** %stack_var_-38, align 4
  %v0_ea54 = call i32 @function_117cc()
  store i32 %v0_ea54, i32* @global_var_1d234.50, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_ea68 = load i32, i32* @r4, align 4
  store i32 %v0_ea68, i32* %r2.global-to-local, align 4
  %v0_ea6c = load i32, i32* @r5, align 4
  %v1_ea6c = inttoptr i32 %v0_ea6c to i32*
  %v2_ea6c = load i32, i32* %v1_ea6c, align 4
  %v5_ea70 = call i32 @function_1269c(i32 %v2_ea6c, i32* nonnull @global_var_146bc.106, i32 %v0_ea68, i32 16384)
  store i32 1, i32* %r2.global-to-local, align 4
  %v0_ea7c = load i32, i32* @r5, align 4
  %v1_ea7c = inttoptr i32 %v0_ea7c to i32*
  %v2_ea7c = load i32, i32* %v1_ea7c, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_ea88 = call i32 @function_1269c(i32 %v2_ea7c, i32* %v4_e998, i32 1, i32 16384)
  %v3_ea8c = load i8*, i8** %stack_var_-38, align 4
  %v4_ea8c = ptrtoint i8* %v3_ea8c to i32
  store i32 %v4_ea8c, i32* %r2.global-to-local, align 4
  %v3_ea90 = icmp eq i8* %v3_ea8c, null
  br i1 %v3_ea90, label %dec_label_pc_e670.backedge, label %dec_label_pc_ea98

dec_label_pc_ea98:                                ; preds = %dec_label_pc_ea48
  %v0_ea98 = load i32, i32* @r5, align 4
  %v1_ea98 = inttoptr i32 %v0_ea98 to i32*
  %v2_ea98 = load i32, i32* %v1_ea98, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v6_eaa4 = call i32 @function_1269c(i32 %v2_ea98, i32* nonnull %stack_var_-140, i32 %v4_ea8c, i32 16384)
  br label %dec_label_pc_e670.backedge

dec_label_pc_eaac:                                ; preds = %dec_label_pc_eaec, %dec_label_pc_e88c
  %v0_eaac = load i32, i32* @r8, align 4
  %v1_eaac = inttoptr i32 %v0_eaac to i32*
  %v2_eaac = load i32, i32* %v1_eaac, align 4
  store i32 %v2_eaac, i32* %r3.global-to-local, align 4
  %v7_eab0 = icmp eq i32 %v2_eaac, 4
  br i1 %v7_eab0, label %dec_label_pc_e670.backedge, label %bb44

bb44:                                             ; preds = %dec_label_pc_eaac
  %v8_eab4 = icmp eq i32 %v2_eaac, 11
  br i1 %v8_eab4, label %dec_label_pc_e670.backedge, label %dec_label_pc_eabc

dec_label_pc_eabc:                                ; preds = %dec_label_pc_eb14, %bb44, %dec_label_pc_e8c4
  %v2_eabc = load i32, i32* @global_var_1d024.98, align 4
  store i32 60104, i32* @lr, align 4
  %v1_eac4 = icmp ne i32 %v2_eabc, -1
  call void @__pseudo_cond_branch(i1 %v1_eac4, i32 ptrtoint (i32* @global_var_11e18.102 to i32))
  store i32 ptrtoint (i32* @global_var_1d024.98 to i32), i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  store i32 -1, i32* @global_var_1d024.98, align 4
  %v1_ead8 = call i32 @function_13248(i32 1)
  br label %dec_label_pc_e670.backedge

dec_label_pc_eae0:                                ; preds = %dec_label_pc_e9fc
  %v2_eae4 = call i32 @function_11f18(i32 %v2_ea34, i32 9)
  br label %dec_label_pc_ea40

dec_label_pc_eaec:                                ; preds = %dec_label_pc_e8dc
  %v0_eaec = load i32, i32* @r4, align 4
  %v1_eaec = load i32, i32* @r8, align 4
  %v2_eaec = inttoptr i32 %v1_eaec to i32*
  store i32 %v0_eaec, i32* %v2_eaec, align 4
  store i32 %v2_eaf4, i32* @r4, align 4
  store i32 16386, i32* %r3.global-to-local, align 4
  %v2_eb00 = load i32, i32* @global_var_1d024.98, align 4
  %v9_eb08 = call i32 @function_1263c(i32 %v2_eb00, i32* nonnull %stack_var_-1548, i32 %v4_e8e4, i32 16386)
  %v7_eb0c = icmp eq i32 %v9_eb08, -1
  br i1 %v7_eb0c, label %dec_label_pc_eaac, label %dec_label_pc_eb14

dec_label_pc_eb14:                                ; preds = %dec_label_pc_eaec
  %v2_eb14 = icmp eq i32 %v9_eb08, 0
  br i1 %v2_eb14, label %dec_label_pc_eabc, label %dec_label_pc_eb1c

dec_label_pc_eb1c:                                ; preds = %dec_label_pc_eb14
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_eb2c = load i32, i32* @global_var_1d024.98, align 4
  %v5_eb30 = call i32 @function_1263c(i32 %v2_eb2c, i32* nonnull %v4_e998, i32 2, i32 16384)
  %v3_eb34 = load i8*, i8** %stack_var_-38, align 4
  %v4_eb34 = ptrtoint i8* %v3_eb34 to i32
  %v4_eb38 = urem i32 %v4_e8e8, 256
  %v4_eb3c = mul i32 %v4_eb34, 256
  %v5_eb3c = or i32 %v4_eb3c, %v4_eb38
  store i32 %v5_eb3c, i32* %r2.global-to-local, align 4
  %v3_eb44 = sdiv i32 %v4_eb3c, 256
  store i32 %v3_eb44, i32* @lr, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v2_eb50 = load i32, i32* @global_var_1d024.98, align 4
  %v6_eb58 = inttoptr i32 %v5_eb3c to i8*
  store i8* %v6_eb58, i8** %stack_var_-38, align 4
  %v8_eb5c = call i32 @function_1263c(i32 %v2_eb50, i32* nonnull %stack_var_-1548, i32 %v5_eb3c, i32 16384)
  %v3_eb60 = load i8*, i8** %stack_var_-38, align 4
  %v4_eb60 = ptrtoint i8* %v3_eb60 to i32
  store i32 %v4_eb60, i32* %r2.global-to-local, align 4
  %v4_eb64 = urem i32 %v3_eb44, 256
  store i32 %v4_eb64, i32* %r3.global-to-local, align 4
  %v6_eb68 = mul nuw nsw i32 %v4_eb64, 256
  %v7_eb68 = or i32 %v4_eb60, %v6_eb68
  %v9_eb68 = icmp eq i32 %v7_eb68, 0
  br i1 %v9_eb68, label %dec_label_pc_e670.backedge, label %dec_label_pc_eb70

dec_label_pc_eb70:                                ; preds = %dec_label_pc_eb1c
  %v7_eb74 = call i32 @function_8320(i32* nonnull %stack_var_-1548, i32 %v7_eb68, i32 %v4_eb60, i32 %v4_eb64)
  br label %dec_label_pc_e670.backedge

dec_label_pc_eb7c:                                ; preds = %dec_label_pc_e8cc
  %v2_eb80 = load i32, i32* @global_var_1d024.98, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_eb90 = call i32 @function_1263c(i32 %v2_eb80, i32* nonnull %v4_e998, i32 2, i32 16384)
  br label %dec_label_pc_e670.backedge

; uselistorder directives
  uselistorder i32 %v4_eb64, { 2, 0, 1 }
  uselistorder i32 %v4_eb60, { 1, 0, 2 }
  uselistorder i32 %v3_eb44, { 1, 0 }
  uselistorder i32 %v5_eb3c, { 1, 0, 2 }
  uselistorder i32 %v4_eb3c, { 1, 0 }
  uselistorder i32 %v9_eb08, { 1, 0 }
  uselistorder i32 %v3_e91c, { 1, 3, 2, 0 }
  uselistorder i32 %v4_e8e4, { 2, 3, 0, 1 }
  uselistorder i32 %v5_e8b8, { 1, 0 }
  uselistorder i32 %v2_e858, { 6, 3, 2, 0, 1, 5, 4 }
  uselistorder i32 %v2_e798, { 3, 2, 1, 0 }
  uselistorder i32 %v5_e75c, { 2, 3, 1, 0 }
  uselistorder i32 %v2_e6a4, { 2, 1, 0 }
  uselistorder i32 %v1_e694, { 1, 2, 0 }
  uselistorder i32 %v1_e67c, { 1, 2, 0 }
  uselistorder i32 %v2_e9a8, { 1, 0, 2 }
  uselistorder i32* %v4_e998, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v2_e66c, { 1, 0, 2 }
  uselistorder i32 %v2_e668, { 1, 0, 2 }
  uselistorder i32 %v2_e514, { 0, 1, 9, 2, 3, 8, 4, 5, 6, 7, 10 }
  uselistorder i32 %v2_e504, { 1, 2, 3, 0, 4, 5 }
  uselistorder i32 %v2_e41c, { 1, 0, 3, 2, 4 }
  uselistorder i32* %stack_var_-36, { 1, 0 }
  uselistorder i32* %stack_var_-140, { 1, 2, 0, 3 }
  uselistorder i32* %stack_var_-44, { 1, 0, 2 }
  uselistorder i8** %stack_var_-38, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 2, 0, 3, 4 }
  uselistorder i32* %stack_var_-1548, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 28, 30, 31, 32, 33, 24, 34, 35, 36, 47, 48, 40, 41, 37, 45, 46, 38, 39, 42, 43, 44 }
  uselistorder i32* @global_var_1d1a0.86, { 1, 2, 0 }
  uselistorder i32 16386, { 1, 2, 0, 3 }
  uselistorder i8* bitcast (i8** @global_var_1d1a4.101 to i8*), { 0, 1, 3, 2 }
  uselistorder i8** @global_var_1d1a4.101, { 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1a4.101 to i32), { 2, 1, 0 }
  uselistorder i32* @global_var_1d024.98, { 1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 13, 12, 15, 14 }
  uselistorder i32* @global_var_1d020.76, { 1, 2, 3, 4, 5, 6, 7, 8, 0, 9 }
  uselistorder i32 (i32)* @function_e324, { 1, 0 }
  uselistorder i32 (i32)* @function_d774, { 1, 0 }
  uselistorder i32 (i32)* @function_8650, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_ec7c, { 2, 1, 0 }
  uselistorder i32 (i32)* @function_e124, { 1, 0 }
  uselistorder i32* @global_var_1d028.74, { 2, 3, 0, 1 }
  uselistorder i32 ptrtoint (i32* @global_var_e294.72 to i32), { 0, 2, 1 }
  uselistorder i32 (i32, i32)* @function_127a0, { 1, 0 }
  uselistorder label %dec_label_pc_ea48, { 1, 0 }
  uselistorder label %dec_label_pc_ea40, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_e670.backedge, { 6, 5, 12, 4, 11, 13, 3, 10, 2, 1, 9, 8, 0, 7 }
  uselistorder label %dec_label_pc_e794, { 2, 1, 0 }
  uselistorder label %bb42, { 1, 0 }
  uselistorder label %dec_label_pc_e6e4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_e6d4, { 1, 0 }
  uselistorder label %dec_label_pc_e690.dec_label_pc_e690_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e678.dec_label_pc_e678_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_e4d0, { 2, 0, 1 }
}

define i32 @function_ebc8() local_unnamed_addr {
dec_label_pc_ebc8:
  %v2_ebd4 = load i32, i32* @global_var_1d1a8.108, align 4
  %v2_ebd8 = load i32, i32* @global_var_1d1b4.110, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.112 to i32), i32* @lr, align 4
  %v4_ebe4 = mul i32 %v2_ebd4, 2048
  %v5_ebe4 = xor i32 %v4_ebe4, %v2_ebd4
  %v4_ebe8 = udiv i32 %v2_ebd8, 524288
  %v5_ebe8 = xor i32 %v4_ebe8, %v2_ebd8
  %v2_ebec = load i32, i32* @global_var_1d1ac.112, align 4
  %v2_ebf0 = load i32, i32* @global_var_1d1b0.114, align 4
  %v2_ebf4 = xor i32 %v5_ebe8, %v5_ebe4
  %v4_ebf8 = udiv i32 %v5_ebe4, 256
  %v5_ebf8 = xor i32 %v2_ebf4, %v4_ebf8
  store i32 %v2_ebec, i32* @global_var_1d1a8.108, align 4
  store i32 %v2_ebf0, i32* @global_var_1d1ac.112, align 4
  store i32 %v2_ebd8, i32* @global_var_1d1b0.114, align 4
  store i32 %v5_ebf8, i32* @global_var_1d1b4.110, align 4
  ret i32 %v5_ebf8

; uselistorder directives
  uselistorder i32 %v2_ebd8, { 2, 1, 0 }
  uselistorder i32 %v2_ebd4, { 1, 0 }
}

define i32 @function_ec20(i32 %arg1) local_unnamed_addr {
dec_label_pc_ec20:
  %stack_var_-12 = alloca i32, align 4
  %v3_ec20 = load i32, i32* @r4, align 4
  store i32 %v3_ec20, i32* %stack_var_-12, align 4
  %v2_ec28 = call i32 @function_120e8(i32* null)
  store i32 %v2_ec28, i32* @global_var_1d1a8.108, align 4
  %v0_ec34 = call i32 @function_11e70()
  store i32 %v0_ec34, i32* @r4, align 4
  %v0_ec3c = call i32 @function_11e9c()
  %v0_ec44 = load i32, i32* @r4, align 4
  %v2_ec44 = xor i32 %v0_ec44, %v0_ec3c
  store i32 %v2_ec44, i32* @r4, align 4
  store i32 %v2_ec44, i32* @global_var_1d1ac.112, align 4
  %v1_ec4c = call i32 @function_123f8(i32 %v0_ec3c)
  %v2_ec50 = load i32, i32* @global_var_1d1ac.112, align 4
  %v2_ec5c = xor i32 %v2_ec50, %v1_ec4c
  store i32 %v2_ec5c, i32* @global_var_1d1b4.110, align 4
  store i32 %v1_ec4c, i32* @global_var_1d1b0.114, align 4
  %v2_ec68 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_ec68, i32* @r4, align 4
  ret i32 %v1_ec4c

; uselistorder directives
  uselistorder i32 %v1_ec4c, { 1, 2, 0 }
  uselistorder i32 %v0_ec3c, { 1, 0 }
  uselistorder i32 ()* @function_11e9c, { 2, 0, 1 }
}

define i32 @function_ec7c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_ec7c:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ec7c = load i32, i32* @r4, align 4
  store i32 %v3_ec7c, i32* %stack_var_-36, align 4
  %v6_ec7c = load i32, i32* @r5, align 4
  %v9_ec7c = load i32, i32* @r6, align 4
  %v12_ec7c = load i32, i32* @r7, align 4
  %v28_ec7c = ptrtoint i32* %stack_var_-36 to i32
  store i32 %arg1, i32* %fp.global-to-local, align 4
  %v2_ec84 = ptrtoint i32* %stack_var_-68 to i32
  store i32 %arg2, i32* %sb.global-to-local, align 4
  %v1_ec90 = call i32 @function_10e50(i32 33)
  %v3_ec9c = call i32 @function_10d6c(i32 33, i32* null)
  %v2_eca8 = inttoptr i32 %v3_ec9c to i8*
  %v3_eca8 = call i32 @function_124f0(i32 %v2_ec84, i8* %v2_eca8)
  %v2_ecac = icmp eq i32 %arg2, 0
  br i1 %v2_ecac, label %dec_label_pc_ed28, label %dec_label_pc_ecb4

dec_label_pc_ecb4:                                ; preds = %dec_label_pc_ec7c
  store i32 ptrtoint (i32* @global_var_1d1a8.108 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.112 to i32), i32* %r8.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1b0.114 to i32), i32* @r7, align 4
  store i32 ptrtoint (i32* @global_var_1d1b4.110 to i32), i32* @r6, align 4
  store i32 0, i32* @r5, align 4
  %v1_ecfc = bitcast i32* %stack_var_-68 to i8*
  br label %dec_label_pc_ecc8

dec_label_pc_ecc8:                                ; preds = %dec_label_pc_ecc8.dec_label_pc_ecc8_crit_edge, %dec_label_pc_ecb4
  %v1_ecec = phi i32 [ %v1_ecec.pre, %dec_label_pc_ecc8.dec_label_pc_ecc8_crit_edge ], [ ptrtoint (i32* @global_var_1d1a8.108 to i32), %dec_label_pc_ecb4 ]
  %v2_ecc8 = load i32, i32* @global_var_1d1b4.110, align 4
  store i32 %v2_ecc8, i32* %r2.global-to-local, align 4
  %v2_eccc = load i32, i32* @global_var_1d1a8.108, align 4
  %v4_ecd0 = udiv i32 %v2_ecc8, 524288
  %v5_ecd0 = xor i32 %v4_ecd0, %v2_ecc8
  %v4_ecd4 = mul i32 %v2_eccc, 2048
  %v5_ecd4 = xor i32 %v4_ecd4, %v2_eccc
  %v2_ecd8 = xor i32 %v5_ecd0, %v5_ecd4
  %v2_ecdc = load i32, i32* @global_var_1d1ac.112, align 4
  %v2_ece0 = load i32, i32* @global_var_1d1b0.114, align 4
  store i32 %v2_ece0, i32* %ip.global-to-local, align 4
  %v4_ece4 = udiv i32 %v5_ecd4, 256
  %v5_ece4 = xor i32 %v2_ecd8, %v4_ece4
  store i32 %v5_ece4, i32* @r4, align 4
  %v2_ecec = inttoptr i32 %v1_ecec to i32*
  store i32 %v2_ecdc, i32* %v2_ecec, align 4
  %v0_ecf0 = load i32, i32* %ip.global-to-local, align 4
  %v1_ecf0 = load i32, i32* %r8.global-to-local, align 4
  %v2_ecf0 = inttoptr i32 %v1_ecf0 to i32*
  store i32 %v0_ecf0, i32* %v2_ecf0, align 4
  %v0_ecf4 = load i32, i32* %r2.global-to-local, align 4
  %v1_ecf4 = load i32, i32* @r7, align 4
  %v2_ecf4 = inttoptr i32 %v1_ecf4 to i32*
  store i32 %v0_ecf4, i32* %v2_ecf4, align 4
  %v0_ecf8 = load i32, i32* @r4, align 4
  %v1_ecf8 = load i32, i32* @r6, align 4
  %v2_ecf8 = inttoptr i32 %v1_ecf8 to i32*
  store i32 %v0_ecf8, i32* %v2_ecf8, align 4
  %v2_ecfc = call i32 @function_11514(i8* %v1_ecfc)
  %v0_ed04 = load i32, i32* @r4, align 4
  %v2_ed08 = call i32 @function_11ba0(i32 %v0_ed04, i32 %v2_ecfc)
  %v2_ed10 = add i32 %v2_ed08, %v28_ec7c
  %v1_ed14 = add i32 %v2_ed10, -32
  %v2_ed14 = inttoptr i32 %v1_ed14 to i8*
  %v3_ed14 = load i8, i8* %v2_ed14, align 1
  %v2_ed18 = load i32, i32* @r5, align 4
  %v3_ed18 = load i32, i32* %fp.global-to-local, align 4
  %v4_ed18 = add i32 %v3_ed18, %v2_ed18
  %v5_ed18 = inttoptr i32 %v4_ed18 to i8*
  store i8 %v3_ed14, i8* %v5_ed18, align 1
  %v0_ed1c = load i32, i32* @r5, align 4
  %v1_ed1c = add i32 %v0_ed1c, 1
  store i32 %v1_ed1c, i32* @r5, align 4
  %v1_ed20 = load i32, i32* %sb.global-to-local, align 4
  %v9_ed20 = icmp eq i32 %v1_ed1c, %v1_ed20
  br i1 %v9_ed20, label %dec_label_pc_ed28, label %dec_label_pc_ecc8.dec_label_pc_ecc8_crit_edge

dec_label_pc_ecc8.dec_label_pc_ecc8_crit_edge:    ; preds = %dec_label_pc_ecc8
  %v1_ecec.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_ecc8

dec_label_pc_ed28:                                ; preds = %dec_label_pc_ecc8, %dec_label_pc_ec7c
  %v1_ed2c = call i32 @function_10d98(i32 33)
  %v2_ed34 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ed34, i32* @r4, align 4
  store i32 %v6_ec7c, i32* @r5, align 4
  store i32 %v9_ec7c, i32* @r6, align 4
  store i32 %v12_ec7c, i32* @r7, align 4
  ret i32 %v1_ed2c

; uselistorder directives
  uselistorder i32 %v2_eccc, { 1, 0 }
  uselistorder i32 %v2_ecc8, { 1, 0, 2 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
}

define i32 @function_ed48(i8* %arg1) local_unnamed_addr {
dec_label_pc_ed48:
  %fp.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_ed48 = load i32, i32* @r4, align 4
  store i32 %v3_ed48, i32* %stack_var_-36, align 4
  %v9_ed48 = load i32, i32* @r6, align 4
  %v12_ed48 = load i32, i32* @r7, align 4
  %v15_ed48 = load i32, i32* @r8, align 4
  %v18_ed48 = load i32, i32* @sb, align 4
  %v21_ed48 = load i32, i32* @sl, align 4
  %v24_ed48 = load i32, i32* @fp, align 4
  %v0_ed4c = load i32, i32* @r1, align 4
  store i32 %v0_ed4c, i32* %r4.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  %tmp20 = icmp slt i32 %v0_ed4c, 1
  br i1 %tmp20, label %bb, label %bb21

bb:                                               ; preds = %dec_label_pc_ed48
  store i32 %v3_ed48, i32* @r4, align 4
  ret i32 %tmp

bb21:                                             ; preds = %dec_label_pc_ed48
  store i32 ptrtoint (i32* @global_var_1d1b4.110 to i32), i32* %fp.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1b0.114 to i32), i32* %sb.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ac.112 to i32), i32* %sl.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1a8.108 to i32), i32* %r8.global-to-local, align 4
  %v2_ed68 = load i32, i32* @global_var_1d1b4.110, align 4
  store i32 %v2_ed68, i32* @lr, align 4
  %v2_ed6c = load i32, i32* @global_var_1d1b0.114, align 4
  store i32 %v2_ed6c, i32* %r7.global-to-local, align 4
  %v2_ed70 = load i32, i32* @global_var_1d1ac.112, align 4
  store i32 %v2_ed70, i32* %r6.global-to-local, align 4
  %v2_ed74 = load i32, i32* @global_var_1d1a8.108, align 4
  br label %dec_label_pc_eda0

dec_label_pc_ed7c:                                ; preds = %dec_label_pc_edcc
  %v3_edd4 = sdiv i32 %v5_edb8, 256
  %v1_ed7c = trunc i32 %v3_edd4 to i8
  %v3_ed7c = add i32 %v9_edc0, 1
  %v4_ed7c = inttoptr i32 %v3_ed7c to i8*
  store i8 %v1_ed7c, i8* %v4_ed7c, align 1
  %v0_ed80 = load i32, i32* %r3.global-to-local, align 4
  %v1_ed80 = trunc i32 %v0_ed80 to i8
  %v2_ed80 = load i32, i32* %r5.global-to-local, align 4
  %v3_ed80 = inttoptr i32 %v2_ed80 to i8*
  store i8 %v1_ed80, i8* %v3_ed80, align 1
  %v0_ed84 = load i32, i32* %r5.global-to-local, align 4
  %v1_ed84 = add i32 %v0_ed84, 2
  store i32 %v1_ed84, i32* %r5.global-to-local, align 4
  %v0_ed88.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed88

dec_label_pc_ed88:                                ; preds = %.thread, %dec_label_pc_ed7c
  %v0_ed88 = phi i32 [ %v9_edc4, %.thread ], [ %v0_ed88.pre, %dec_label_pc_ed7c ]
  %v2_ed7c7 = phi i32 [ %v12_edc0, %.thread ], [ %v1_ed84, %dec_label_pc_ed7c ]
  %tmp22 = icmp slt i32 %v0_ed88, 1
  br i1 %tmp22, label %dec_label_pc_ee08, label %dec_label_pc_ed94

dec_label_pc_ed94:                                ; preds = %dec_label_pc_ed88
  %v0_ed8c = load i32, i32* %r6.global-to-local, align 4
  %v0_ed94 = load i32, i32* %r7.global-to-local, align 4
  store i32 %v0_ed94, i32* %r6.global-to-local, align 4
  %v0_ed98 = load i32, i32* @lr, align 4
  store i32 %v0_ed98, i32* %r7.global-to-local, align 4
  %v0_ed9c = load i32, i32* %r3.global-to-local, align 4
  store i32 %v0_ed9c, i32* @lr, align 4
  br label %dec_label_pc_eda0

dec_label_pc_eda0:                                ; preds = %bb21, %dec_label_pc_ed94
  %v0_edf0 = phi i32 [ %v2_ed70, %bb21 ], [ %v0_ed94, %dec_label_pc_ed94 ]
  %v9_edc0 = phi i32 [ %tmp, %bb21 ], [ %v2_ed7c7, %dec_label_pc_ed94 ]
  %v0_edd8 = phi i32 [ %v0_ed4c, %bb21 ], [ %v0_ed88, %dec_label_pc_ed94 ]
  %v0_ede4 = phi i32 [ %v2_ed68, %bb21 ], [ %v0_ed9c, %dec_label_pc_ed94 ]
  %v0_ede0 = phi i32 [ %v2_ed74, %bb21 ], [ %v0_ed8c, %dec_label_pc_ed94 ]
  %v4_eda0 = mul i32 %v0_ede0, 2048
  %v5_eda0 = xor i32 %v4_eda0, %v0_ede0
  %v4_eda4 = udiv i32 %v0_ede4, 524288
  %v5_eda4 = xor i32 %v4_eda4, %v0_ede4
  %v2_eda8 = xor i32 %v5_eda4, %v5_eda0
  %v4_edb8 = udiv i32 %v5_eda0, 256
  %v5_edb8 = xor i32 %v4_edb8, %v2_eda8
  store i32 %v5_edb8, i32* %r3.global-to-local, align 4
  %v7_edc0 = icmp sgt i32 %v0_edd8, 3
  br i1 %v7_edc0, label %.thread, label %dec_label_pc_edcc

.thread:                                          ; preds = %dec_label_pc_eda0
  %v10_edc0 = inttoptr i32 %v9_edc0 to i32*
  store i32 %v5_edb8, i32* %v10_edc0, align 4
  %v11_edc0 = load i32, i32* %r5.global-to-local, align 4
  %v12_edc0 = add i32 %v11_edc0, 4
  store i32 %v12_edc0, i32* %r5.global-to-local, align 4
  %v8_edc4 = load i32, i32* %r4.global-to-local, align 4
  %v9_edc4 = add i32 %v8_edc4, -4
  store i32 %v9_edc4, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_ed88

dec_label_pc_edcc:                                ; preds = %dec_label_pc_eda0
  store i32 %v5_edb8, i32* %r3.global-to-local, align 4
  %v7_edd0 = icmp eq i32 %v0_edd8, 1
  %v1_edd8 = add i32 %v0_edd8, -2
  store i32 %v1_edd8, i32* %r4.global-to-local, align 4
  br i1 %v7_edd0, label %dec_label_pc_ede0, label %dec_label_pc_ed7c

dec_label_pc_ede0:                                ; preds = %dec_label_pc_edcc
  store i32 %v5_edb8, i32* %r3.global-to-local, align 4
  %v1_edf0 = load i32, i32* %r8.global-to-local, align 4
  %v2_edf0 = inttoptr i32 %v1_edf0 to i32*
  store i32 %v0_edf0, i32* %v2_edf0, align 4
  %v0_edf4 = load i32, i32* %r7.global-to-local, align 4
  %v1_edf4 = load i32, i32* %sl.global-to-local, align 4
  %v2_edf4 = inttoptr i32 %v1_edf4 to i32*
  store i32 %v0_edf4, i32* %v2_edf4, align 4
  %v0_edf8 = load i32, i32* @lr, align 4
  %v1_edf8 = load i32, i32* %sb.global-to-local, align 4
  %v2_edf8 = inttoptr i32 %v1_edf8 to i32*
  store i32 %v0_edf8, i32* %v2_edf8, align 4
  %v0_edfc = load i32, i32* %r3.global-to-local, align 4
  %v1_edfc = load i32, i32* %fp.global-to-local, align 4
  %v2_edfc = inttoptr i32 %v1_edfc to i32*
  store i32 %v0_edfc, i32* %v2_edfc, align 4
  %v0_ee00 = load i32, i32* %r3.global-to-local, align 4
  %v1_ee00 = trunc i32 %v0_ee00 to i8
  %v2_ee00 = load i32, i32* %r5.global-to-local, align 4
  %v3_ee00 = inttoptr i32 %v2_ee00 to i8*
  store i8 %v1_ee00, i8* %v3_ee00, align 1
  %v2_ee04 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ee04, i32* @r4, align 4
  store i32 %v9_ed48, i32* @r6, align 4
  store i32 %v12_ed48, i32* @r7, align 4
  store i32 %v15_ed48, i32* @r8, align 4
  store i32 %v18_ed48, i32* @sb, align 4
  store i32 %v21_ed48, i32* @sl, align 4
  store i32 %v24_ed48, i32* @fp, align 4
  ret i32 %v5_eda0

dec_label_pc_ee08:                                ; preds = %dec_label_pc_ed88
  %v0_ee08 = load i32, i32* %r3.global-to-local, align 4
  %v1_ee08 = load i32, i32* %fp.global-to-local, align 4
  %v2_ee08 = inttoptr i32 %v1_ee08 to i32*
  store i32 %v0_ee08, i32* %v2_ee08, align 4
  %v0_ee0c = load i32, i32* @lr, align 4
  %v1_ee0c = load i32, i32* %sb.global-to-local, align 4
  %v2_ee0c = inttoptr i32 %v1_ee0c to i32*
  store i32 %v0_ee0c, i32* %v2_ee0c, align 4
  %v0_ee10 = load i32, i32* %r7.global-to-local, align 4
  %v1_ee10 = load i32, i32* %sl.global-to-local, align 4
  %v2_ee10 = inttoptr i32 %v1_ee10 to i32*
  store i32 %v0_ee10, i32* %v2_ee10, align 4
  %v0_ee14 = load i32, i32* %r6.global-to-local, align 4
  %v1_ee14 = load i32, i32* %r8.global-to-local, align 4
  %v2_ee14 = inttoptr i32 %v1_ee14 to i32*
  store i32 %v0_ee14, i32* %v2_ee14, align 4
  %v2_ee18 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_ee18, i32* @r4, align 4
  store i32 %v9_ed48, i32* @r6, align 4
  store i32 %v12_ed48, i32* @r7, align 4
  store i32 %v15_ed48, i32* @r8, align 4
  store i32 %v18_ed48, i32* @sb, align 4
  store i32 %v21_ed48, i32* @sl, align 4
  store i32 %v24_ed48, i32* @fp, align 4
  ret i32 %v5_eda0

; uselistorder directives
  uselistorder i32 %v9_edc4, { 1, 0 }
  uselistorder i32 %v12_edc0, { 1, 0 }
  uselistorder i32 %v5_edb8, { 1, 3, 2, 4, 0 }
  uselistorder i32 %v5_eda0, { 1, 2, 0, 3 }
  uselistorder i32 %v0_ede0, { 1, 0 }
  uselistorder i32 %v0_ede4, { 1, 0 }
  uselistorder i32 %v0_ed88, { 1, 0 }
  uselistorder i32 %v24_ed48, { 1, 0 }
  uselistorder i32 %v21_ed48, { 1, 0 }
  uselistorder i32 %v18_ed48, { 1, 0 }
  uselistorder i32 %v15_ed48, { 1, 0 }
  uselistorder i32 %v12_ed48, { 1, 0 }
  uselistorder i32 %v9_ed48, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 4, 3, 0 }
  uselistorder i32* %r6.global-to-local, { 1, 3, 2, 0 }
  uselistorder i32* %r5.global-to-local, { 2, 6, 5, 1, 3, 4, 0 }
  uselistorder i32* %r4.global-to-local, { 2, 4, 3, 1, 0 }
  uselistorder i32* %r3.global-to-local, { 5, 0, 1, 2, 4, 7, 6, 3 }
  uselistorder i32* @global_var_1d1a8.108, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32 ptrtoint (i32* @global_var_1d1a8.108 to i32), { 1, 0, 2 }
  uselistorder i32* @global_var_1d1ac.112, { 2, 3, 4, 1, 0, 5, 6 }
  uselistorder i32* @global_var_1d1b0.114, { 2, 3, 5, 1, 0, 4 }
  uselistorder i32* @global_var_1d1b4.110, { 2, 3, 5, 1, 0, 4 }
  uselistorder label %dec_label_pc_eda0, { 1, 0 }
}

define i32 @function_ee2c(i32 %arg1) local_unnamed_addr {
dec_label_pc_ee2c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_ee2c = load i32, i32* @r4, align 4
  store i32 %v3_ee2c, i32* %stack_var_-8, align 4
  %v6_ee2c = load i32, i32* @lr, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %v2_ee30 = icmp eq i32 %arg1, 0
  br i1 %v2_ee30, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_ee2c
  store i32 %v3_ee2c, i32* @r4, align 4
  ret i32 0

bb3:                                              ; preds = %dec_label_pc_ee2c
  %v1_ee38 = add i32 %arg1, 4
  %v2_ee38 = inttoptr i32 %v1_ee38 to i32*
  %v3_ee38 = load i32, i32* %v2_ee38, align 4
  %v1_ee40 = icmp ne i32 %v3_ee38, 0
  call void @__pseudo_cond_branch(i1 %v1_ee40, i32 ptrtoint (i32* @global_var_12a70.25 to i32))
  %v0_ee44 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_ee44, i32* @r0, align 4
  %v2_ee48 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_ee48, i32* @r4, align 4
  store i32 %v6_ee2c, i32* @lr, align 4
  %v0_ee4c = call i32 @function_12a70()
  ret i32 %v0_ee4c
}

define i32 @function_ee50(i8* %arg1) local_unnamed_addr {
dec_label_pc_ee50:
  %cpsr_z.global-to-local = alloca i1, align 1
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-192 = alloca i32, align 4
  %stack_var_-4288 = alloca i8, align 1
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-216 = alloca i32, align 4
  %stack_var_-2227 = alloca i32, align 4
  %stack_var_-2240 = alloca i8, align 1
  %stack_var_-2228 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_ee50 = load i32, i32* @r4, align 4
  store i32 %v3_ee50, i32* %stack_var_-36, align 4
  %v6_ee50 = load i32, i32* @r5, align 4
  %v9_ee50 = load i32, i32* @r6, align 4
  %v12_ee50 = load i32, i32* @r7, align 4
  %v15_ee50 = load i32, i32* @r8, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 8, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v2_ee68 = call i32 @function_12a18(i32 1, i32 8)
  %v0_ee70 = load i32, i32* @r4, align 4
  %v1_ee70 = inttoptr i32 %v0_ee70 to i8*
  store i32 %v0_ee70, i32* %r0.global-to-local, align 4
  %v3_ee74 = call i32 @function_11514(i8* %v1_ee70)
  %v2_ee7c = ptrtoint i32* %stack_var_-2228 to i32
  store i32 %v2_ee7c, i32* %fp.global-to-local, align 4
  %v2_ee80 = ptrtoint i8* %stack_var_-2240 to i32
  %v1_ee84 = add i32 %v3_ee74, 1
  store i32 %v1_ee84, i32* %r0.global-to-local, align 4
  %v2_ee88 = ptrtoint i32* %stack_var_-2227 to i32
  store i32 %v2_ee88, i32* %r2.global-to-local, align 4
  store i32 %v2_ee7c, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  %v2_eec8162 = icmp eq i32 %v1_ee84, 0
  store i1 %v2_eec8162, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_eed0163 = or i32 %v2_ee88, 1
  store i32 %v1_eed0163, i32* %r1.global-to-local, align 4
  %tmp124164 = icmp slt i32 %v1_ee84, 1
  br i1 %tmp124164, label %dec_label_pc_eed8, label %dec_label_pc_ee98.lr.ph

dec_label_pc_ee98.lr.ph:                          ; preds = %dec_label_pc_ee50
  %v0_ee98.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_ee98

dec_label_pc_ee98:                                ; preds = %dec_label_pc_ee98.lr.ph, %.thread12
  %v1_eeac176.off0 = phi i8 [ 0, %dec_label_pc_ee98.lr.ph ], [ %extract.t179, %.thread12 ]
  %v0_ee98 = phi i32 [ %v0_ee98.pre, %dec_label_pc_ee98.lr.ph ], [ %v1_eebc, %.thread12 ]
  %v2_eedc165 = phi i32 [ %v2_ee88, %dec_label_pc_ee98.lr.ph ], [ %v0_eec4, %.thread12 ]
  %v1_ee98 = inttoptr i32 %v0_ee98 to i8*
  %v2_ee98 = load i8, i8* %v1_ee98, align 1
  %v3_ee98 = zext i8 %v2_ee98 to i32
  store i32 %v3_ee98, i32* %r3.global-to-local, align 4
  %v2_ee9c = icmp eq i8 %v2_ee98, 0
  store i1 %v2_ee9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_ee9c, label %.thread6, label %bb

bb:                                               ; preds = %dec_label_pc_ee98
  %v8_eea0 = icmp eq i8 %v2_ee98, 46
  store i1 %v8_eea0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_eea0, label %.thread6, label %.thread

.thread:                                          ; preds = %bb
  %v4_eea4 = inttoptr i32 %v2_eedc165 to i8*
  store i8 %v2_ee98, i8* %v4_eea4, align 1
  %v5_eea4 = load i32, i32* %r2.global-to-local, align 4
  %v6_eea4 = add i32 %v5_eea4, 1
  store i32 %v6_eea4, i32* %r2.global-to-local, align 4
  %v0_eea8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eea8.pr.pr, label %.thread..thread6_crit_edge, label %bb122

.thread..thread6_crit_edge:                       ; preds = %.thread
  %v1_eeac.pre = load i32, i32* %lr.global-to-local, align 4
  %extract.t = trunc i32 %v1_eeac.pre to i8
  br label %.thread6

.thread6:                                         ; preds = %.thread..thread6_crit_edge, %bb, %dec_label_pc_ee98
  %v1_eeac.off0 = phi i8 [ %extract.t, %.thread..thread6_crit_edge ], [ %v1_eeac176.off0, %bb ], [ %v1_eeac176.off0, %dec_label_pc_ee98 ]
  %v3_eeac = load i32, i32* %r5.global-to-local, align 4
  %v4_eeac = inttoptr i32 %v3_eeac to i8*
  store i8 %v1_eeac.off0, i8* %v4_eeac, align 1
  %v0_eeb0.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_eeb0.pr, label %bb123, label %..thread12_crit_edge

bb122:                                            ; preds = %.thread
  store i32 %v6_eea4, i32* %r1.global-to-local, align 4
  %v1_eeb0 = load i32, i32* %ip.global-to-local, align 4
  %v2_eeb0 = urem i32 %v1_eeb0, 256
  store i32 %v2_eeb0, i32* %lr.global-to-local, align 4
  br label %.thread12

..thread12_crit_edge:                             ; preds = %.thread6
  %v1_eeb010 = load i32, i32* %ip.global-to-local, align 4
  %v2_eeb011 = urem i32 %v1_eeb010, 256
  store i32 %v2_eeb011, i32* %lr.global-to-local, align 4
  br label %.thread12

bb123:                                            ; preds = %.thread6
  %v1_eeb4.pre = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_eeb4.pre, i32* %r5.global-to-local, align 4
  store i32 0, i32* %lr.global-to-local, align 4
  br label %.thread12

.thread12:                                        ; preds = %bb122, %..thread12_crit_edge, %bb123
  %v0_eecc.pre = phi i32 [ %v2_eeb011, %..thread12_crit_edge ], [ %v2_eeb0, %bb122 ], [ 0, %bb123 ]
  %v0_eebc = load i32, i32* @r4, align 4
  %v1_eebc = add i32 %v0_eebc, 1
  store i32 %v1_eebc, i32* @r4, align 4
  %v0_eec0 = load i32, i32* %r0.global-to-local, align 4
  %v1_eec0 = add i32 %v0_eec0, -1
  store i32 %v1_eec0, i32* %r0.global-to-local, align 4
  %v0_eec4 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_eec4, i32* %r2.global-to-local, align 4
  %v2_eec8 = icmp eq i32 %v1_eec0, 0
  store i1 %v2_eec8, i1* %cpsr_z.global-to-local, align 1
  %v1_eecc = add nuw nsw i32 %v0_eecc.pre, 1
  store i32 %v1_eecc, i32* %ip.global-to-local, align 4
  %v1_eed0 = add i32 %v0_eec4, 1
  store i32 %v1_eed0, i32* %r1.global-to-local, align 4
  %tmp124 = icmp slt i32 %v1_eec0, 1
  %extract.t179 = trunc i32 %v0_eecc.pre to i8
  br i1 %tmp124, label %dec_label_pc_eed8, label %dec_label_pc_ee98

dec_label_pc_eed8:                                ; preds = %.thread12, %dec_label_pc_ee50
  %v2_eedc.lcssa = phi i32 [ %v2_ee88, %dec_label_pc_ee50 ], [ %v0_eec4, %.thread12 ]
  %v3_ee68 = inttoptr i32 %v2_ee68 to i8*
  store i32 0, i32* @r4, align 4
  %v3_eedc = inttoptr i32 %v2_eedc.lcssa to i8*
  store i8 0, i8* %v3_eedc, align 1
  store i32 %v2_ee7c, i32* %r0.global-to-local, align 4
  %v1_eee4 = bitcast i32* %stack_var_-2228 to i8*
  %v2_eee4 = call i32 @function_11514(i8* %v1_eee4)
  %v2_eee8 = ptrtoint i32* %stack_var_-216 to i32
  store i32 %v2_eee8, i32* %r1.global-to-local, align 4
  %v0_eeec = load i32, i32* %fp.global-to-local, align 4
  %v2_eeec = add i32 %v0_eeec, %v2_eee4
  store i32 %v2_eeec, i32* @r5, align 4
  %v0_eef0 = load i32, i32* @r4, align 4
  store i32 %v0_eef0, i32* %stack_var_-64, align 4
  store i32 %v2_ee7c, i32* %r0.global-to-local, align 4
  %v2_ef04 = call i32 @function_11514(i8* %v1_eee4)
  %v1_ef08 = add i32 %v2_ef04, 17
  store i32 %v1_ef08, i32* %r0.global-to-local, align 4
  %v0_ef10 = call i32 @function_ebc8()
  store i32 %v0_ef10, i32* %r0.global-to-local, align 4
  store i32 65535, i32* %r1.global-to-local, align 4
  %v2_ef1c = call i32 @function_11ba0(i32 %v0_ef10, i32 65535)
  store i32 16, i32* @r1, align 4
  %v6_ef28 = urem i32 %v2_ef1c, 65536
  store i32 %v6_ef28, i32* %r3.global-to-local, align 4
  %v2_ef30 = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ef30, i32* @r0, align 4
  %v0_ef38 = call i32 @function_115b4()
  %sext = mul i32 %v2_ef1c, 16777216
  %v4_ef3c = sdiv i32 %sext, 16777216
  store i32 2, i32* %stack_var_-64, align 4
  store i32 %v2_eee8, i32* %r3.global-to-local, align 4
  store i32 53, i32* %r2.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  store i32 %v4_ef3c, i32* %lr.global-to-local, align 4
  %v0_ef84 = load i32, i32* @r5, align 4
  %v2_ef84 = add i32 %v0_ef84, 1
  store i32 %v2_ef84, i32* %ip.global-to-local, align 4
  %v2_ef88 = ptrtoint i8* %stack_var_-4288 to i32
  store i32 %v2_ef88, i32* %r1.global-to-local, align 4
  %v5_ef8c = trunc i32 %v4_ef3c to i8
  store i8 %v5_ef8c, i8* %stack_var_-2240, align 1
  %v0_efa4 = load i32, i32* @r4, align 4
  %v1_efa4 = trunc i32 %v0_efa4 to i8
  %v4_efa4 = inttoptr i32 %v2_ef84 to i8*
  store i8 %v1_efa4, i8* %v4_efa4, align 1
  %v0_efa8 = load i32, i32* @r4, align 4
  %v1_efa8 = trunc i32 %v0_efa8 to i8
  %v2_efa8 = load i32, i32* %ip.global-to-local, align 4
  %v3_efa8 = add i32 %v2_efa8, 2
  %v4_efa8 = inttoptr i32 %v3_efa8 to i8*
  store i8 %v1_efa8, i8* %v4_efa8, align 1
  %v0_efac = load i32, i32* %r0.global-to-local, align 4
  %v1_efac = trunc i32 %v0_efac to i8
  %v2_efac = load i32, i32* %ip.global-to-local, align 4
  %v3_efac = add i32 %v2_efac, 3
  %v4_efac = inttoptr i32 %v3_efac to i8*
  store i8 %v1_efac, i8* %v4_efac, align 1
  %v0_efb0 = load i32, i32* %r0.global-to-local, align 4
  %v1_efb0 = trunc i32 %v0_efb0 to i8
  %v2_efb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_efb0 = add i32 %v2_efb0, 1
  %v4_efb0 = inttoptr i32 %v3_efb0 to i8*
  store i8 %v1_efb0, i8* %v4_efb0, align 1
  %v0_efb8 = load i32, i32* %r0.global-to-local, align 4
  store i32 %v0_efb8, i32* %sl.global-to-local, align 4
  %v2_efc0 = ptrtoint i32* %stack_var_-192 to i32
  store i32 %v2_efc0, i32* @r6, align 4
  %v3_eff8 = bitcast i32* %stack_var_-64 to %sockaddr*
  %v4_f014 = bitcast i8* %stack_var_-2240 to i32*
  %v2_f064 = ptrtoint i32* %stack_var_-36 to i32
  %v2_f090 = ptrtoint i32* %stack_var_-48 to i32
  %v6_f0ec = bitcast i8* %stack_var_-4288 to i32*
  %v1_f168 = add i32 %v2_ef88, 12
  %v1_f170 = inttoptr i32 %v1_f168 to i8*
  %v1_f184 = add i32 %v2_ef88, 1
  %v2_f184 = inttoptr i32 %v1_f184 to i8*
  %v1_f1a0 = add i32 %v2_ef88, 6
  %v2_f1a0 = inttoptr i32 %v1_f1a0 to i8*
  %v1_f1a4 = add i32 %v2_ef88, 7
  %v2_f1a4 = inttoptr i32 %v1_f1a4 to i8*
  br label %dec_label_pc_efc4

dec_label_pc_efc4:                                ; preds = %dec_label_pc_f118, %dec_label_pc_eed8
  %v1_efc8 = phi i32 [ %v0_efc4.pre, %dec_label_pc_f118 ], [ -1, %dec_label_pc_eed8 ]
  %v7_efc4 = icmp eq i32 %v1_efc8, -1
  store i1 %v7_efc4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_efc4, label %bb126, label %bb125

bb125:                                            ; preds = %dec_label_pc_efc4
  store i32 %v1_efc8, i32* %r0.global-to-local, align 4
  br label %bb126

bb126:                                            ; preds = %dec_label_pc_efc4, %bb125
  store i32 61392, i32* @lr, align 4
  %v1_efcc = xor i1 %v7_efc4, true
  call void @__pseudo_cond_branch(i1 %v1_efcc, i32 ptrtoint (i32* @global_var_11e18.102 to i32))
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_efdc = call i32 @function_1272c(i32 2, i32 2, i32 0)
  store i32 %v3_efdc, i32* %r0.global-to-local, align 4
  %v7_efe0 = icmp eq i32 %v3_efdc, -1
  store i1 %v7_efe0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_efdc, i32* @r7, align 4
  br i1 %v7_efe0, label %dec_label_pc_f158, label %dec_label_pc_efec

dec_label_pc_efec:                                ; preds = %bb126
  store i32 %v2_ef30, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_eff8 = call i32 @function_12588(i32 %v3_efdc, %sockaddr* %v3_eff8, i32 16)
  store i32 %v4_eff8, i32* %r0.global-to-local, align 4
  %v7_effc = icmp eq i32 %v4_eff8, -1
  store i1 %v7_effc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_effc, label %dec_label_pc_f120, label %dec_label_pc_f004

dec_label_pc_f004:                                ; preds = %dec_label_pc_efec
  %v0_f004 = load i32, i32* @r7, align 4
  store i32 %v0_f004, i32* %r0.global-to-local, align 4
  store i32 %v2_ee80, i32* %r1.global-to-local, align 4
  store i32 %v1_ef08, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_f014 = call i32 @function_1269c(i32 %v0_f004, i32* %v4_f014, i32 %v1_ef08, i32 16384)
  store i32 %v5_f014, i32* %r0.global-to-local, align 4
  %v7_f018 = icmp eq i32 %v5_f014, -1
  store i1 %v7_f018, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f018, label %dec_label_pc_f120, label %dec_label_pc_f020

dec_label_pc_f020:                                ; preds = %dec_label_pc_f004
  %v0_f020 = load i32, i32* @r7, align 4
  store i32 %v0_f020, i32* %r1.global-to-local, align 4
  store i32 0, i32* @r2, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_f02c = call i32 @function_11d54(i32 3, i32 %v0_f020)
  store i32 0, i32* @r4, align 4
  %v1_f034 = or i32 %v2_f02c, 2048
  store i32 %v1_f034, i32* @r2, align 4
  %v0_f038 = load i32, i32* @r7, align 4
  store i32 %v0_f038, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_f040 = call i32 @function_11d54(i32 4, i32 %v0_f038)
  store i32 %v2_f040, i32* %r0.global-to-local, align 4
  %v0_f044 = load i32, i32* @r4, align 4
  store i32 %v0_f044, i32* %r3.global-to-local, align 4
  %v2_f048154 = load i32, i32* @r6, align 4
  %v3_f048155 = add i32 %v2_f048154, %v0_f044
  %v4_f048156 = inttoptr i32 %v3_f048155 to i32*
  store i32 %v0_f044, i32* %v4_f048156, align 4
  %v0_f04c157 = load i32, i32* %r3.global-to-local, align 4
  %v1_f04c158 = add i32 %v0_f04c157, 4
  store i32 %v1_f04c158, i32* %r3.global-to-local, align 4
  %v7_f050159 = icmp eq i32 %v1_f04c158, 128
  br i1 %v7_f050159, label %dec_label_pc_f058, label %dec_label_pc_f048.dec_label_pc_f048_crit_edge

dec_label_pc_f048.dec_label_pc_f048_crit_edge:    ; preds = %dec_label_pc_f020, %dec_label_pc_f048.dec_label_pc_f048_crit_edge
  %v1_f04c160 = phi i32 [ %v1_f04c, %dec_label_pc_f048.dec_label_pc_f048_crit_edge ], [ %v1_f04c158, %dec_label_pc_f020 ]
  %v0_f048.pre = load i32, i32* @r4, align 4
  %v2_f048 = load i32, i32* @r6, align 4
  %v3_f048 = add i32 %v2_f048, %v1_f04c160
  %v4_f048 = inttoptr i32 %v3_f048 to i32*
  store i32 %v0_f048.pre, i32* %v4_f048, align 4
  %v0_f04c = load i32, i32* %r3.global-to-local, align 4
  %v1_f04c = add i32 %v0_f04c, 4
  store i32 %v1_f04c, i32* %r3.global-to-local, align 4
  %v7_f050 = icmp eq i32 %v1_f04c, 128
  br i1 %v7_f050, label %dec_label_pc_f058, label %dec_label_pc_f048.dec_label_pc_f048_crit_edge

dec_label_pc_f058:                                ; preds = %dec_label_pc_f048.dec_label_pc_f048_crit_edge, %dec_label_pc_f020
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_f058 = load i32, i32* @r7, align 4
  %v3_f058 = udiv i32 %v0_f058, 32
  %v3_f060 = mul nuw nsw i32 %v3_f058, 4
  store i32 %v3_f060, i32* %r3.global-to-local, align 4
  store i32 %v2_f064, i32* %r2.global-to-local, align 4
  %v2_f068 = add i32 %v3_f060, %v2_f064
  store i32 %v2_f068, i32* @r5, align 4
  %v1_f06c = add i32 %v2_f068, -156
  %v2_f06c = inttoptr i32 %v1_f06c to i32*
  %v3_f06c = load i32, i32* %v2_f06c, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v1_f074 = urem i32 %v0_f058, 32
  store i32 %v1_f074, i32* @r8, align 4
  %v7_f078 = shl i32 1, %v1_f074
  %v8_f078 = or i32 %v3_f06c, %v7_f078
  store i32 5, i32* %ip.global-to-local, align 4
  store i32 %v8_f078, i32* %v2_f06c, align 4
  %v0_f088 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f088, i32* %stack_var_-48, align 4
  store i32 %v2_f090, i32* @lr, align 4
  store i32 %v2_eee8, i32* %ip.global-to-local, align 4
  %v0_f098 = load i32, i32* @r7, align 4
  %v1_f098 = load i32, i32* %r3.global-to-local, align 4
  %v2_f098 = add i32 %v1_f098, %v0_f098
  store i32 %v2_f098, i32* %r0.global-to-local, align 4
  store i32 %v2_efc0, i32* %r1.global-to-local, align 4
  %v0_f0a4 = load i32, i32* @r4, align 4
  store i32 %v0_f0a4, i32* %r2.global-to-local, align 4
  store i32 %v0_f0a4, i32* %r3.global-to-local, align 4
  %v5_f0b0 = call i32 @function_12038(i32 %v2_f098, i32 %v2_efc0, i32 %v0_f0a4, i32 %v0_f0a4, i32 %v2_f090)
  store i32 %v5_f0b0, i32* %r0.global-to-local, align 4
  %v7_f0b4 = icmp eq i32 %v5_f0b0, -1
  store i1 %v7_f0b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f0b4, label %dec_label_pc_f130, label %dec_label_pc_f0bc

dec_label_pc_f0bc:                                ; preds = %dec_label_pc_f058
  %v2_f0bc = icmp eq i32 %v5_f0b0, 0
  store i1 %v2_f0bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0bc, label %dec_label_pc_f110, label %dec_label_pc_f0c4

dec_label_pc_f0c4:                                ; preds = %dec_label_pc_f0bc
  %v0_f0c4 = load i32, i32* @r5, align 4
  %v1_f0c4 = add i32 %v0_f0c4, -156
  %v2_f0c4 = inttoptr i32 %v1_f0c4 to i32*
  %v3_f0c4 = load i32, i32* %v2_f0c4, align 4
  %v1_f0c8 = load i32, i32* @r8, align 4
  %v6_f0c8 = ashr i32 %v3_f0c4, %v1_f0c8
  store i32 %v6_f0c8, i32* %r3.global-to-local, align 4
  %v1_f0cc = urem i32 %v6_f0c8, 2
  %v2_f0cc = icmp eq i32 %v1_f0cc, 0
  store i1 %v2_f0cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f0cc, label %dec_label_pc_f130, label %dec_label_pc_f0d4

dec_label_pc_f0d4:                                ; preds = %dec_label_pc_f0c4
  store i32 %v2_ef88, i32* %r1.global-to-local, align 4
  store i32 2048, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_f0e0 = load i32, i32* @r7, align 4
  store i32 %v0_f0e0, i32* %r0.global-to-local, align 4
  %v0_f0e4 = load i32, i32* @r4, align 4
  %v7_f0ec = call i32 @function_12668(i32 %v0_f0e0, i32* %v6_f0ec, i32 2048, i32 16384, i32 %v0_f0e4, i32 %v0_f0e4)
  store i32 %v7_f0ec, i32* %r4.global-to-local, align 4
  %v0_f0f4 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v0_f0f4, i32* %r0.global-to-local, align 4
  %v1_f0f8 = inttoptr i32 %v0_f0f4 to i8*
  %v2_f0f8 = call i32 @function_11514(i8* %v1_f0f8)
  %v1_f0fc = add i32 %v2_f0f8, 17
  store i32 %v1_f0fc, i32* %r0.global-to-local, align 4
  %v0_f100 = load i32, i32* %r4.global-to-local, align 4
  %v3_f100 = icmp ult i32 %v0_f100, %v1_f0fc
  %v9_f100 = icmp eq i32 %v0_f100, %v1_f0fc
  store i1 %v9_f100, i1* %cpsr_z.global-to-local, align 1
  store i32 -4252, i32* @r4, align 4
  br i1 %v3_f100, label %dec_label_pc_f110, label %dec_label_pc_f164

dec_label_pc_f110:                                ; preds = %dec_label_pc_f0d4, %dec_label_pc_f164, %dec_label_pc_f1a0, %dec_label_pc_f0bc, %dec_label_pc_f158
  %v0_f110 = load i32, i32* %sl.global-to-local, align 4
  %v7_f110 = icmp eq i32 %v0_f110, 5
  store i1 %v7_f110, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f110, label %dec_label_pc_f130, label %dec_label_pc_f118

dec_label_pc_f118:                                ; preds = %dec_label_pc_f120, %dec_label_pc_f110
  %v0_f118 = phi i32 [ %v0_f128, %dec_label_pc_f120 ], [ %v0_f110, %dec_label_pc_f110 ]
  %v1_f118 = add i32 %v0_f118, 1
  store i32 %v1_f118, i32* %sl.global-to-local, align 4
  %v0_efc4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_efc4

dec_label_pc_f120:                                ; preds = %dec_label_pc_f004, %dec_label_pc_efec
  %v0_f120 = phi i32 [ %v5_f014, %dec_label_pc_f004 ], [ %v4_eff8, %dec_label_pc_efec ]
  %v1_f120 = add i32 %v0_f120, 2
  store i32 %v1_f120, i32* %r0.global-to-local, align 4
  %v1_f124 = call i32 @function_13248(i32 %v1_f120)
  store i32 %v1_f124, i32* %r0.global-to-local, align 4
  %v0_f128 = load i32, i32* %sl.global-to-local, align 4
  %v7_f128 = icmp eq i32 %v0_f128, 5
  store i1 %v7_f128, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f128, label %dec_label_pc_f130, label %dec_label_pc_f118

dec_label_pc_f130:                                ; preds = %dec_label_pc_f120, %dec_label_pc_f110, %dec_label_pc_f0c4, %dec_label_pc_f058, %dec_label_pc_f1b0, %dec_label_pc_f1bc.backedge
  %v0_f130 = load i32, i32* @r7, align 4
  store i32 %v0_f130, i32* %r0.global-to-local, align 4
  %v1_f134 = call i32 @function_11e18(i32 %v0_f130)
  store i32 %v1_f134, i32* %r0.global-to-local, align 4
  store i32 %v2_ee68, i32* %r2.global-to-local, align 4
  %v2_f13c = load i8, i8* %v3_ee68, align 1
  %v3_f13c = zext i8 %v2_f13c to i32
  store i32 %v3_f13c, i32* @r4, align 4
  %v2_f140 = icmp eq i8 %v2_f13c, 0
  store i1 %v2_f140, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f140, label %dec_label_pc_f29c, label %dec_label_pc_f148

dec_label_pc_f148:                                ; preds = %dec_label_pc_f130, %dec_label_pc_f29c
  %stack_var_-4300.0 = phi i8* [ %v5_f2b0, %dec_label_pc_f29c ], [ %v3_ee68, %dec_label_pc_f130 ]
  %v4_f148 = ptrtoint i8* %stack_var_-4300.0 to i32
  store i32 %v4_f148, i32* %r0.global-to-local, align 4
  %v2_f154 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_f154, i32* @r4, align 4
  store i32 %v6_ee50, i32* @r5, align 4
  store i32 %v9_ee50, i32* @r6, align 4
  store i32 %v12_ee50, i32* @r7, align 4
  store i32 %v15_ee50, i32* @r8, align 4
  ret i32 %v4_f148

dec_label_pc_f158:                                ; preds = %bb126
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f15c = call i32 @function_13248(i32 1)
  store i32 %v1_f15c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f110

dec_label_pc_f164:                                ; preds = %dec_label_pc_f0d4
  store i32 %v2_ef88, i32* %lr.global-to-local, align 4
  store i32 %v1_f168, i32* %fp.global-to-local, align 4
  store i32 %v1_f168, i32* %r0.global-to-local, align 4
  %v2_f170 = call i32 @function_11514(i8* %v1_f170)
  store i32 %v2_f170, i32* %r0.global-to-local, align 4
  store i32 %v2_ef88, i32* %ip.global-to-local, align 4
  store i32 %v2_f064, i32* %r1.global-to-local, align 4
  %v4_f180 = load i8, i8* %stack_var_-4288, align 1
  %v5_f180 = sext i8 %v4_f180 to i32
  store i32 %v5_f180, i32* %r3.global-to-local, align 4
  %v3_f184 = load i8, i8* %v2_f184, align 1
  %v4_f184 = zext i8 %v3_f184 to i32
  store i32 %v4_f184, i32* %r2.global-to-local, align 4
  store i32 %v4_ef3c, i32* @lr, align 4
  %v4_f18c = mul nuw nsw i32 %v4_f184, 256
  %v5_f18c = or i32 %v4_f18c, %v5_f180
  store i32 %v5_f18c, i32* %r3.global-to-local, align 4
  %v0_f190 = load i32, i32* %fp.global-to-local, align 4
  %v9_f194 = icmp eq i32 %v5_f18c, %v4_ef3c
  store i1 %v9_f194, i1* %cpsr_z.global-to-local, align 1
  %v2_f190 = add i32 %v2_f170, 5
  %v1_f198 = add i32 %v2_f190, %v0_f190
  store i32 %v1_f198, i32* %r0.global-to-local, align 4
  br i1 %v9_f194, label %dec_label_pc_f1a0, label %dec_label_pc_f110

dec_label_pc_f1a0:                                ; preds = %dec_label_pc_f164
  %v3_f1a0 = load i8, i8* %v2_f1a0, align 1
  %v4_f1a0 = zext i8 %v3_f1a0 to i32
  store i32 %v4_f1a0, i32* %r2.global-to-local, align 4
  %v3_f1a4 = load i8, i8* %v2_f1a4, align 1
  %v4_f1a4 = zext i8 %v3_f1a4 to i32
  store i32 %v4_f1a4, i32* %r3.global-to-local, align 4
  %v4_f1a8 = mul nuw nsw i32 %v4_f1a4, 256
  %v5_f1a8 = or i32 %v4_f1a8, %v4_f1a0
  store i32 %v5_f1a8, i32* %r2.global-to-local, align 4
  %v7_f1a8 = icmp eq i32 %v5_f1a8, 0
  store i1 %v7_f1a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f1a8, label %dec_label_pc_f110, label %dec_label_pc_f1b0

dec_label_pc_f1b0:                                ; preds = %dec_label_pc_f1a0
  %v3_f1b4 = mul nuw nsw i32 %v4_f1a0, 256
  %v5_f1b8 = or i32 %v4_f1a4, %v3_f1b4
  %v1_f270 = add i32 %v2_ef88, -49152
  %v1_f1bc143 = add nsw i32 %v5_f1b8, -1
  %v3_f1c0144 = mul i32 %v1_f1bc143, 65536
  store i32 %v3_f1c0144, i32* %r3.global-to-local, align 4
  %v7_f1c4150 = icmp eq i32 %v3_f1c0144, -65536
  store i1 %v7_f1c4150, i1* %cpsr_z.global-to-local, align 1
  %v3_f1c8151 = urem i32 %v1_f1bc143, 65536
  store i32 %v3_f1c8151, i32* @r6, align 4
  br i1 %v7_f1c4150, label %dec_label_pc_f130, label %dec_label_pc_f1d0.lr.ph

dec_label_pc_f1d0.lr.ph:                          ; preds = %dec_label_pc_f1b0
  %v1_f34c = add i32 %v2_ee68, 4
  %v2_f34c = inttoptr i32 %v1_f34c to i32*
  br label %dec_label_pc_f1d0

dec_label_pc_f1d0:                                ; preds = %dec_label_pc_f1d0.lr.ph, %dec_label_pc_f1bc.backedge
  %v3_f1c8153 = phi i32 [ %v3_f1c8151, %dec_label_pc_f1d0.lr.ph ], [ %v3_f1c8, %dec_label_pc_f1bc.backedge ]
  %v0_f224152 = phi i32 [ %v1_f198, %dec_label_pc_f1d0.lr.ph ], [ %storemerge, %dec_label_pc_f1bc.backedge ]
  store i32 %v0_f224152, i32* %r3.global-to-local, align 4
  store i32 0, i32* @lr, align 4
  store i32 1, i32* %ip.global-to-local, align 4
  %v1_f1dc17 = inttoptr i32 %v0_f224152 to i8*
  %v2_f1dc18 = load i8, i8* %v1_f1dc17, align 1
  %v3_f1dc19 = zext i8 %v2_f1dc18 to i32
  store i32 %v3_f1dc19, i32* %r2.global-to-local, align 4
  %v2_f1e020 = icmp eq i8 %v2_f1dc18, 0
  store i1 %v2_f1e020, i1* %cpsr_z.global-to-local, align 1
  %v3_f1e421 = mul nuw nsw i32 %v3_f1dc19, 256
  store i32 %v3_f1e421, i32* %r1.global-to-local, align 4
  br i1 %v2_f1e020, label %dec_label_pc_f21c, label %dec_label_pc_f1ec.preheader

dec_label_pc_f1ec.preheader:                      ; preds = %dec_label_pc_f1d0, %dec_label_pc_f1dc.backedge
  %v1_f2c0 = phi i32 [ %v1_f2c049, %dec_label_pc_f1dc.backedge ], [ 1, %dec_label_pc_f1d0 ]
  %v0_f2b847 = phi i32 [ %v0_f2b8, %dec_label_pc_f1dc.backedge ], [ 0, %dec_label_pc_f1d0 ]
  %v0_f1f845 = phi i32 [ %v3_f1e4, %dec_label_pc_f1dc.backedge ], [ %v3_f1e421, %dec_label_pc_f1d0 ]
  %v0_f1f443 = phi i32 [ %v1_f2bc, %dec_label_pc_f1dc.backedge ], [ %v0_f224152, %dec_label_pc_f1d0 ]
  %v0_f1ec41 = phi i32 [ %v3_f1dc, %dec_label_pc_f1dc.backedge ], [ %v3_f1dc19, %dec_label_pc_f1d0 ]
  br label %dec_label_pc_f1ec

dec_label_pc_f1ec:                                ; preds = %dec_label_pc_f1ec.preheader, %dec_label_pc_f1f4
  %v0_f2b8 = phi i32 [ %v0_f2b847, %dec_label_pc_f1ec.preheader ], [ 1, %dec_label_pc_f1f4 ]
  %v0_f1f8 = phi i32 [ %v0_f1f845, %dec_label_pc_f1ec.preheader ], [ %v3_f214, %dec_label_pc_f1f4 ]
  %v0_f2bc = phi i32 [ %v0_f1f443, %dec_label_pc_f1ec.preheader ], [ %v2_f204, %dec_label_pc_f1f4 ]
  %v0_f1ec = phi i32 [ %v0_f1ec41, %dec_label_pc_f1ec.preheader ], [ %v3_f208, %dec_label_pc_f1f4 ]
  %v7_f1ec = icmp eq i32 %v0_f1ec, 191
  store i1 %v7_f1ec, i1* %cpsr_z.global-to-local, align 1
  %tmp180 = icmp ult i32 %v0_f1ec, 192
  br i1 %tmp180, label %dec_label_pc_f2b8, label %dec_label_pc_f1f4

dec_label_pc_f1f4:                                ; preds = %dec_label_pc_f1ec
  %v1_f1f4 = add i32 %v0_f2bc, 1
  %v2_f1f4 = inttoptr i32 %v1_f1f4 to i8*
  %v3_f1f4 = load i8, i8* %v2_f1f4, align 1
  %v4_f1f4 = zext i8 %v3_f1f4 to i32
  store i32 %v2_ef88, i32* %r1.global-to-local, align 4
  %v2_f1f8 = add i32 %v0_f1f8, %v1_f270
  %v2_f204 = add i32 %v2_f1f8, %v4_f1f4
  store i32 %v2_f204, i32* %r3.global-to-local, align 4
  %v1_f208 = inttoptr i32 %v2_f204 to i8*
  %v2_f208 = load i8, i8* %v1_f208, align 1
  %v3_f208 = zext i8 %v2_f208 to i32
  store i32 %v3_f208, i32* %r2.global-to-local, align 4
  %v2_f20c = icmp eq i8 %v2_f208, 0
  store i1 %v2_f20c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* @lr, align 4
  %v3_f214 = mul nuw nsw i32 %v3_f208, 256
  store i32 %v3_f214, i32* %r1.global-to-local, align 4
  br i1 %v2_f20c, label %dec_label_pc_f21c, label %dec_label_pc_f1ec

dec_label_pc_f21c:                                ; preds = %dec_label_pc_f1dc.backedge, %dec_label_pc_f1f4, %dec_label_pc_f1d0
  %v1_f220 = phi i32 [ 1, %dec_label_pc_f1d0 ], [ %v1_f2c0, %dec_label_pc_f1f4 ], [ %v1_f2c049, %dec_label_pc_f1dc.backedge ]
  %v0_f21c = phi i32 [ 0, %dec_label_pc_f1d0 ], [ 1, %dec_label_pc_f1f4 ], [ %v0_f2b8, %dec_label_pc_f1dc.backedge ]
  %v7_f21c = icmp eq i32 %v0_f21c, 1
  store i1 %v7_f21c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f21c, label %bb127, label %bb128

bb127:                                            ; preds = %dec_label_pc_f21c
  %v2_f220 = add i32 %v1_f220, 1
  store i32 %v2_f220, i32* %ip.global-to-local, align 4
  br label %bb128

bb128:                                            ; preds = %dec_label_pc_f21c, %bb127
  %v1_f224 = phi i32 [ %v1_f220, %dec_label_pc_f21c ], [ %v2_f220, %bb127 ]
  %v2_f224 = add i32 %v1_f224, %v0_f224152
  store i32 %v2_f224, i32* @r4, align 4
  %v3_f228 = inttoptr i32 %v2_f224 to i8*
  %v4_f228 = load i8, i8* %v3_f228, align 1
  %v6_f228 = zext i8 %v4_f228 to i32
  store i32 %v6_f228, i32* %r3.global-to-local, align 4
  %v1_f22c = add i32 %v2_f224, 1
  %v2_f22c = inttoptr i32 %v1_f22c to i8*
  %v3_f22c = load i8, i8* %v2_f22c, align 1
  %v4_f22c = zext i8 %v3_f22c to i32
  store i32 %v4_f22c, i32* %r2.global-to-local, align 4
  %v4_f230 = mul nuw nsw i32 %v4_f22c, 256
  %v5_f230 = or i32 %v4_f230, %v6_f228
  store i32 %v5_f230, i32* %r3.global-to-local, align 4
  %v7_f234 = icmp eq i32 %v5_f230, 256
  store i1 %v7_f234, i1* %cpsr_z.global-to-local, align 1
  %v1_f238 = add i32 %v2_f224, 10
  store i32 %v1_f238, i32* @r5, align 4
  br i1 %v7_f234, label %dec_label_pc_f2d8, label %dec_label_pc_f240

dec_label_pc_f240:                                ; preds = %dec_label_pc_f2d8, %bb128
  store i32 %v1_f238, i32* %r3.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1, i32* %r0.global-to-local, align 4
  %v1_f24c23 = inttoptr i32 %v1_f238 to i8*
  %v2_f24c24 = load i8, i8* %v1_f24c23, align 1
  %v3_f24c25 = zext i8 %v2_f24c24 to i32
  store i32 %v3_f24c25, i32* %r2.global-to-local, align 4
  %v2_f25026 = icmp eq i8 %v2_f24c24, 0
  store i1 %v2_f25026, i1* %cpsr_z.global-to-local, align 1
  %v3_f25427 = mul nuw nsw i32 %v3_f24c25, 256
  store i32 %v3_f25427, i32* %r1.global-to-local, align 4
  br i1 %v2_f25026, label %dec_label_pc_f28c, label %dec_label_pc_f25c.preheader

dec_label_pc_f25c.preheader:                      ; preds = %dec_label_pc_f240, %dec_label_pc_f24c.backedge
  %v1_f2d0 = phi i32 [ %v1_f2d064, %dec_label_pc_f24c.backedge ], [ 1, %dec_label_pc_f240 ]
  %v0_f2c862 = phi i32 [ %v0_f2c8, %dec_label_pc_f24c.backedge ], [ 0, %dec_label_pc_f240 ]
  %v0_f26860 = phi i32 [ %v3_f254, %dec_label_pc_f24c.backedge ], [ %v3_f25427, %dec_label_pc_f240 ]
  %v0_f26458 = phi i32 [ %v1_f2cc, %dec_label_pc_f24c.backedge ], [ %v1_f238, %dec_label_pc_f240 ]
  %v0_f25c56 = phi i32 [ %v3_f24c, %dec_label_pc_f24c.backedge ], [ %v3_f24c25, %dec_label_pc_f240 ]
  br label %dec_label_pc_f25c

dec_label_pc_f25c:                                ; preds = %dec_label_pc_f25c.preheader, %dec_label_pc_f264
  %v0_f2c8 = phi i32 [ %v0_f2c862, %dec_label_pc_f25c.preheader ], [ 1, %dec_label_pc_f264 ]
  %v0_f268 = phi i32 [ %v0_f26860, %dec_label_pc_f25c.preheader ], [ %v3_f284, %dec_label_pc_f264 ]
  %v0_f2cc = phi i32 [ %v0_f26458, %dec_label_pc_f25c.preheader ], [ %v2_f274, %dec_label_pc_f264 ]
  %v0_f25c = phi i32 [ %v0_f25c56, %dec_label_pc_f25c.preheader ], [ %v3_f278, %dec_label_pc_f264 ]
  %v7_f25c = icmp eq i32 %v0_f25c, 191
  store i1 %v7_f25c, i1* %cpsr_z.global-to-local, align 1
  %tmp181 = icmp ult i32 %v0_f25c, 192
  br i1 %tmp181, label %dec_label_pc_f2c8, label %dec_label_pc_f264

dec_label_pc_f264:                                ; preds = %dec_label_pc_f25c
  %v1_f264 = add i32 %v0_f2cc, 1
  %v2_f264 = inttoptr i32 %v1_f264 to i8*
  %v3_f264 = load i8, i8* %v2_f264, align 1
  %v4_f264 = zext i8 %v3_f264 to i32
  store i32 %v2_ef88, i32* %r1.global-to-local, align 4
  %v2_f268 = add i32 %v0_f268, %v1_f270
  %v2_f274 = add i32 %v2_f268, %v4_f264
  store i32 %v2_f274, i32* %r3.global-to-local, align 4
  %v1_f278 = inttoptr i32 %v2_f274 to i8*
  %v2_f278 = load i8, i8* %v1_f278, align 1
  %v3_f278 = zext i8 %v2_f278 to i32
  store i32 %v3_f278, i32* %r2.global-to-local, align 4
  %v2_f27c = icmp eq i8 %v2_f278, 0
  store i1 %v2_f27c, i1* %cpsr_z.global-to-local, align 1
  store i32 1, i32* %ip.global-to-local, align 4
  %v3_f284 = mul nuw nsw i32 %v3_f278, 256
  store i32 %v3_f284, i32* %r1.global-to-local, align 4
  br i1 %v2_f27c, label %dec_label_pc_f28c, label %dec_label_pc_f25c

dec_label_pc_f28c:                                ; preds = %dec_label_pc_f24c.backedge, %dec_label_pc_f264, %dec_label_pc_f240
  %v1_f290 = phi i32 [ 1, %dec_label_pc_f240 ], [ %v1_f2d0, %dec_label_pc_f264 ], [ %v1_f2d064, %dec_label_pc_f24c.backedge ]
  %v0_f28c = phi i32 [ 0, %dec_label_pc_f240 ], [ 1, %dec_label_pc_f264 ], [ %v0_f2c8, %dec_label_pc_f24c.backedge ]
  %v7_f28c = icmp eq i32 %v0_f28c, 1
  store i1 %v7_f28c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f28c, label %bb129, label %bb130

bb129:                                            ; preds = %dec_label_pc_f28c
  %v2_f290 = add i32 %v1_f290, 1
  store i32 %v2_f290, i32* %r0.global-to-local, align 4
  br label %bb130

bb130:                                            ; preds = %dec_label_pc_f28c, %bb129
  %v1_f294 = phi i32 [ %v1_f290, %dec_label_pc_f28c ], [ %v2_f290, %bb129 ]
  %v2_f294 = add i32 %v1_f294, %v1_f238
  br label %dec_label_pc_f1bc.backedge

dec_label_pc_f1bc.backedge:                       ; preds = %bb130, %dec_label_pc_f380
  %v0_f1bc.pre = phi i32 [ %v3_f1c8153, %bb130 ], [ %v0_f1bc.pre.pre, %dec_label_pc_f380 ]
  %storemerge = phi i32 [ %v2_f294, %bb130 ], [ %v2_f394, %dec_label_pc_f380 ]
  store i32 %storemerge, i32* %r0.global-to-local, align 4
  %v1_f1bc = add i32 %v0_f1bc.pre, -1
  %v3_f1c0 = mul i32 %v1_f1bc, 65536
  store i32 %v3_f1c0, i32* %r3.global-to-local, align 4
  %v7_f1c4 = icmp eq i32 %v3_f1c0, -65536
  store i1 %v7_f1c4, i1* %cpsr_z.global-to-local, align 1
  %v3_f1c8 = urem i32 %v1_f1bc, 65536
  store i32 %v3_f1c8, i32* @r6, align 4
  br i1 %v7_f1c4, label %dec_label_pc_f130, label %dec_label_pc_f1d0

dec_label_pc_f29c:                                ; preds = %dec_label_pc_f130
  %v1_f29c = add i32 %v2_ee68, 4
  %v2_f29c = inttoptr i32 %v1_f29c to i32*
  %v3_f29c = load i32, i32* %v2_f29c, align 4
  store i32 %v3_f29c, i32* %r0.global-to-local, align 4
  %v2_f2a0 = icmp eq i32 %v3_f29c, 0
  store i1 %v2_f2a0, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i32* @global_var_f2a8.127 to i32), i32* @lr, align 4
  %v1_f2a4 = xor i1 %v2_f2a0, true
  call void @__pseudo_cond_branch(i1 %v1_f2a4, i32 ptrtoint (i32* @global_var_12a70.25 to i32))
  store i32 %v2_ee68, i32* @r0, align 4
  %v0_f2ac = call i32 @function_12a70()
  store i32 %v0_f2ac, i32* %r0.global-to-local, align 4
  %v0_f2b0 = load i32, i32* @r4, align 4
  %v5_f2b0 = inttoptr i32 %v0_f2b0 to i8*
  br label %dec_label_pc_f148

dec_label_pc_f2b8:                                ; preds = %dec_label_pc_f1ec
  %v2_f2b8 = icmp eq i32 %v0_f2b8, 0
  store i1 %v2_f2b8, i1* %cpsr_z.global-to-local, align 1
  %v1_f2bc = add i32 %v0_f2bc, 1
  store i32 %v1_f2bc, i32* %r3.global-to-local, align 4
  br i1 %v2_f2b8, label %bb131, label %dec_label_pc_f1dc.backedge

dec_label_pc_f1dc.backedge:                       ; preds = %dec_label_pc_f2b8, %bb131
  %v1_f2c049 = phi i32 [ %v1_f2c0, %dec_label_pc_f2b8 ], [ %v2_f2c0, %bb131 ]
  %v1_f1dc = inttoptr i32 %v1_f2bc to i8*
  %v2_f1dc = load i8, i8* %v1_f1dc, align 1
  %v3_f1dc = zext i8 %v2_f1dc to i32
  store i32 %v3_f1dc, i32* %r2.global-to-local, align 4
  %v2_f1e0 = icmp eq i8 %v2_f1dc, 0
  store i1 %v2_f1e0, i1* %cpsr_z.global-to-local, align 1
  %v3_f1e4 = mul nuw nsw i32 %v3_f1dc, 256
  store i32 %v3_f1e4, i32* %r1.global-to-local, align 4
  br i1 %v2_f1e0, label %dec_label_pc_f21c, label %dec_label_pc_f1ec.preheader

bb131:                                            ; preds = %dec_label_pc_f2b8
  %v2_f2c0 = add i32 %v1_f2c0, 1
  store i32 %v2_f2c0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_f1dc.backedge

dec_label_pc_f2c8:                                ; preds = %dec_label_pc_f25c
  %v2_f2c8 = icmp eq i32 %v0_f2c8, 0
  store i1 %v2_f2c8, i1* %cpsr_z.global-to-local, align 1
  %v1_f2cc = add i32 %v0_f2cc, 1
  store i32 %v1_f2cc, i32* %r3.global-to-local, align 4
  br i1 %v2_f2c8, label %bb132, label %dec_label_pc_f24c.backedge

dec_label_pc_f24c.backedge:                       ; preds = %dec_label_pc_f2c8, %bb132
  %v1_f2d064 = phi i32 [ %v1_f2d0, %dec_label_pc_f2c8 ], [ %v2_f2d0, %bb132 ]
  %v1_f24c = inttoptr i32 %v1_f2cc to i8*
  %v2_f24c = load i8, i8* %v1_f24c, align 1
  %v3_f24c = zext i8 %v2_f24c to i32
  store i32 %v3_f24c, i32* %r2.global-to-local, align 4
  %v2_f250 = icmp eq i8 %v2_f24c, 0
  store i1 %v2_f250, i1* %cpsr_z.global-to-local, align 1
  %v3_f254 = mul nuw nsw i32 %v3_f24c, 256
  store i32 %v3_f254, i32* %r1.global-to-local, align 4
  br i1 %v2_f250, label %dec_label_pc_f28c, label %dec_label_pc_f25c.preheader

bb132:                                            ; preds = %dec_label_pc_f2c8
  %v2_f2d0 = add i32 %v1_f2d0, 1
  store i32 %v2_f2d0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_f24c.backedge

dec_label_pc_f2d8:                                ; preds = %bb128
  %v1_f2d8 = add i32 %v2_f224, 2
  %v2_f2d8 = inttoptr i32 %v1_f2d8 to i8*
  %v3_f2d8 = load i8, i8* %v2_f2d8, align 1
  %v4_f2d8 = zext i8 %v3_f2d8 to i32
  store i32 %v4_f2d8, i32* %r3.global-to-local, align 4
  %v1_f2dc = add i32 %v2_f224, 3
  %v2_f2dc = inttoptr i32 %v1_f2dc to i8*
  %v3_f2dc = load i8, i8* %v2_f2dc, align 1
  %v4_f2dc = zext i8 %v3_f2dc to i32
  store i32 %v4_f2dc, i32* %r2.global-to-local, align 4
  %v4_f2e0 = mul nuw nsw i32 %v4_f2dc, 256
  %v5_f2e0 = or i32 %v4_f2e0, %v4_f2d8
  store i32 %v5_f2e0, i32* %r3.global-to-local, align 4
  %v7_f2e4 = icmp eq i32 %v5_f2e0, 256
  store i1 %v7_f2e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f2e4, label %dec_label_pc_f2ec, label %dec_label_pc_f240

dec_label_pc_f2ec:                                ; preds = %dec_label_pc_f2d8
  %v1_f2ec = add i32 %v2_f224, 8
  %v2_f2ec = inttoptr i32 %v1_f2ec to i8*
  %v3_f2ec = load i8, i8* %v2_f2ec, align 1
  %v4_f2ec = zext i8 %v3_f2ec to i32
  store i32 %v4_f2ec, i32* %r1.global-to-local, align 4
  %v1_f2f0 = add i32 %v2_f224, 9
  %v2_f2f0 = inttoptr i32 %v1_f2f0 to i8*
  %v3_f2f0 = load i8, i8* %v2_f2f0, align 1
  %v4_f2f0 = zext i8 %v3_f2f0 to i32
  store i32 %v4_f2f0, i32* %r0.global-to-local, align 4
  %v4_f2f4 = mul nuw nsw i32 %v4_f2f0, 256
  %v5_f2f4 = or i32 %v4_f2f4, %v4_f2ec
  %v3_f2f8 = mul i32 %v5_f2f4, 65536
  store i32 %v3_f2f8, i32* %r2.global-to-local, align 4
  %v3_f2fc = mul nuw nsw i32 %v4_f2ec, 256
  %v5_f304 = or i32 %v4_f2f0, %v3_f2fc
  store i32 %v5_f304, i32* %r3.global-to-local, align 4
  %v7_f308 = icmp eq i32 %v5_f304, 4
  store i1 %v7_f308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f308, label %dec_label_pc_f310, label %dec_label_pc_f380

dec_label_pc_f310:                                ; preds = %dec_label_pc_f2ec
  %v2_f310 = inttoptr i32 %v1_f238 to i8*
  %v3_f310 = load i8, i8* %v2_f310, align 1
  %v4_f310 = zext i8 %v3_f310 to i32
  store i32 %v4_f310, i32* %r3.global-to-local, align 4
  store i32 %v2_eee8, i32* %r2.global-to-local, align 4
  %v1_f31c = add i32 %v2_f224, 11
  %v2_f31c = inttoptr i32 %v1_f31c to i8*
  %v3_f31c = load i8, i8* %v2_f31c, align 1
  %v4_f31c = zext i8 %v3_f31c to i32
  store i32 %v4_f31c, i32* %r2.global-to-local, align 4
  store i32 %v2_eee8, i32* %r3.global-to-local, align 4
  %v1_f328 = add i32 %v2_f224, 12
  %v2_f328 = inttoptr i32 %v1_f328 to i8*
  %v3_f328 = load i8, i8* %v2_f328, align 1
  %v4_f328 = zext i8 %v3_f328 to i32
  store i32 %v4_f328, i32* %r3.global-to-local, align 4
  store i32 %v2_eee8, i32* %ip.global-to-local, align 4
  %v1_f334 = add i32 %v2_f224, 13
  %v2_f334 = inttoptr i32 %v1_f334 to i8*
  %v3_f334 = load i8, i8* %v2_f334, align 1
  %v4_f334 = zext i8 %v3_f334 to i32
  store i32 %v4_f334, i32* %r2.global-to-local, align 4
  store i32 %v2_ee68, i32* @lr, align 4
  %v2_f340 = load i8, i8* %v3_ee68, align 1
  %v3_f340 = zext i8 %v2_f340 to i32
  %v3_f344 = mul nuw nsw i32 %v3_f340, 4
  %v1_f348 = add nuw nsw i32 %v3_f344, 4
  store i32 %v1_f348, i32* %r1.global-to-local, align 4
  %v3_f34c = load i32, i32* %v2_f34c, align 4
  store i32 %v3_f34c, i32* %r0.global-to-local, align 4
  %v3_f350 = sext i8 %v3_f334 to i32
  %v5_f350 = sext i8 %v3_f328 to i32
  %v10_f350 = call i32 @function_12b60(i32 %v3_f34c, i32 %v1_f348, i32 %v3_f350, i32 %v5_f350)
  store i32 %v10_f350, i32* %r0.global-to-local, align 4
  store i32 %v2_ee68, i32* %r1.global-to-local, align 4
  store i32 %v2_eee8, i32* %ip.global-to-local, align 4
  %v2_f35c = load i8, i8* %v3_ee68, align 1
  %v3_f35c = zext i8 %v2_f35c to i32
  store i32 %v3_f35c, i32* %r2.global-to-local, align 4
  %v4_f360 = sext i8 %v3_f310 to i32
  store i32 %v4_f360, i32* %r3.global-to-local, align 4
  store i32 %v2_ee68, i32* @lr, align 4
  %v1_f368 = add nuw nsw i32 %v3_f35c, 1
  store i32 %v1_f368, i32* %r1.global-to-local, align 4
  %v5_f36c = mul nuw nsw i32 %v3_f35c, 4
  %v6_f36c = add i32 %v5_f36c, %v10_f350
  %v7_f36c = inttoptr i32 %v6_f36c to i32*
  store i32 %v4_f360, i32* %v7_f36c, align 4
  %v1_f370 = load i32, i32* @lr, align 4
  %v2_f370 = add i32 %v1_f370, 4
  %v3_f370 = inttoptr i32 %v2_f370 to i32*
  store i32 %v10_f350, i32* %v3_f370, align 4
  %v0_f374 = load i32, i32* %r1.global-to-local, align 4
  %v1_f374 = trunc i32 %v0_f374 to i8
  %v2_f374 = load i32, i32* @lr, align 4
  %v3_f374 = inttoptr i32 %v2_f374 to i8*
  store i8 %v1_f374, i8* %v3_f374, align 1
  %v0_f378 = load i32, i32* @r4, align 4
  %v1_f378 = add i32 %v0_f378, 9
  %v2_f378 = inttoptr i32 %v1_f378 to i8*
  %v3_f378 = load i8, i8* %v2_f378, align 1
  %v4_f378 = zext i8 %v3_f378 to i32
  store i32 %v4_f378, i32* %r0.global-to-local, align 4
  %v1_f37c = add i32 %v0_f378, 8
  %v2_f37c = inttoptr i32 %v1_f37c to i8*
  %v3_f37c = load i8, i8* %v2_f37c, align 1
  %v4_f37c = zext i8 %v3_f37c to i32
  store i32 %v4_f37c, i32* %r1.global-to-local, align 4
  %v0_f394.pre = load i32, i32* @r5, align 4
  %v0_f1bc.pre.pre.pre = load i32, i32* @r6, align 4
  br label %dec_label_pc_f380

dec_label_pc_f380:                                ; preds = %dec_label_pc_f2ec, %dec_label_pc_f310
  %v0_f1bc.pre.pre = phi i32 [ %v3_f1c8153, %dec_label_pc_f2ec ], [ %v0_f1bc.pre.pre.pre, %dec_label_pc_f310 ]
  %v0_f394 = phi i32 [ %v1_f238, %dec_label_pc_f2ec ], [ %v0_f394.pre, %dec_label_pc_f310 ]
  %v1_f380 = phi i32 [ %v4_f2f0, %dec_label_pc_f2ec ], [ %v4_f378, %dec_label_pc_f310 ]
  %v0_f380 = phi i32 [ %v4_f2ec, %dec_label_pc_f2ec ], [ %v4_f37c, %dec_label_pc_f310 ]
  %v4_f380 = mul nuw nsw i32 %v1_f380, 256
  %v5_f380 = or i32 %v4_f380, %v0_f380
  %v3_f384 = mul i32 %v5_f380, 65536
  store i32 %v3_f384, i32* %r2.global-to-local, align 4
  %tmp133 = mul nuw nsw i32 %v0_f380, 256
  %v5_f390 = or i32 %tmp133, %v1_f380
  store i32 %v5_f390, i32* %r3.global-to-local, align 4
  %v2_f394 = add i32 %v5_f390, %v0_f394
  br label %dec_label_pc_f1bc.backedge

; uselistorder directives
  uselistorder i32 %v1_f380, { 1, 0 }
  uselistorder i32 %v3_f35c, { 1, 0, 2 }
  uselistorder i32 %v10_f350, { 1, 0, 2 }
  uselistorder i32 %v4_f2f0, { 2, 1, 0, 3 }
  uselistorder i32 %v4_f2ec, { 2, 0, 1, 3 }
  uselistorder i32 %v2_f2d0, { 1, 0 }
  uselistorder i32 %v3_f24c, { 0, 2, 1 }
  uselistorder i32 %v1_f2d064, { 1, 0 }
  uselistorder i32 %v1_f2cc, { 1, 2, 0 }
  uselistorder i32 %v2_f2c0, { 1, 0 }
  uselistorder i32 %v3_f1dc, { 0, 2, 1 }
  uselistorder i32 %v1_f2c049, { 1, 0 }
  uselistorder i32 %v1_f2bc, { 1, 2, 0 }
  uselistorder i1 %v7_f1c4, { 1, 0 }
  uselistorder i32 %v1_f1bc, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %v3_f278, { 0, 2, 1 }
  uselistorder i32 %v2_f274, { 1, 2, 0 }
  uselistorder i32 %v0_f2c8, { 2, 0, 1 }
  uselistorder i32 %v1_f2d0, { 1, 2, 0 }
  uselistorder i32 %v3_f25427, { 1, 0 }
  uselistorder i32 %v3_f24c25, { 1, 0, 2 }
  uselistorder i32 %v1_f238, { 2, 3, 1, 0, 5, 4, 6 }
  uselistorder i32 %v2_f224, { 0, 1, 2, 4, 3, 6, 5, 7, 9, 8, 10 }
  uselistorder i32 %v3_f208, { 0, 2, 1 }
  uselistorder i32 %v2_f204, { 1, 2, 0 }
  uselistorder i32 %v0_f2b8, { 2, 0, 1 }
  uselistorder i32 %v1_f2c0, { 1, 2, 0 }
  uselistorder i32 %v3_f1e421, { 1, 0 }
  uselistorder i32 %v3_f1dc19, { 1, 0, 2 }
  uselistorder i32 %v0_f224152, { 3, 0, 1, 2 }
  uselistorder i32 %v3_f1c8151, { 1, 0 }
  uselistorder i1 %v7_f1c4150, { 1, 0 }
  uselistorder i32 %v1_f1bc143, { 1, 0 }
  uselistorder i32 %v4_f1a4, { 1, 0, 2 }
  uselistorder i32 %v0_f128, { 1, 0 }
  uselistorder i32 %v0_f100, { 1, 0 }
  uselistorder i1 %v7_f0b4, { 1, 0 }
  uselistorder i32 %v5_f0b0, { 1, 0, 2 }
  uselistorder i32 %v1_f074, { 1, 0 }
  uselistorder i32 %v3_f060, { 1, 0 }
  uselistorder i32 %v0_f058, { 1, 0 }
  uselistorder i32 %v1_f04c, { 1, 2, 0 }
  uselistorder i1 %v7_f018, { 1, 0 }
  uselistorder i32 %v5_f014, { 1, 0, 2 }
  uselistorder i1 %v7_effc, { 1, 0 }
  uselistorder i32 %v4_eff8, { 1, 0, 2 }
  uselistorder i1 %v7_efe0, { 1, 0 }
  uselistorder i32 %v3_efdc, { 2, 1, 0, 3 }
  uselistorder i1 %v7_efc4, { 2, 1, 0 }
  uselistorder i32 %v1_efc8, { 1, 0 }
  uselistorder i32 %v1_f168, { 1, 2, 0 }
  uselistorder i32 %v2_f064, { 1, 0, 2 }
  uselistorder i32 %v2_efc0, { 1, 0, 2 }
  uselistorder i32 %v2_ef88, { 4, 3, 2, 5, 7, 9, 1, 0, 6, 8, 10 }
  uselistorder i32 %v4_ef3c, { 3, 0, 2, 1 }
  uselistorder i32 %v1_ef08, { 1, 0, 2 }
  uselistorder i32 %v0_eec4, { 0, 1, 3, 2 }
  uselistorder i32 %v1_eec0, { 1, 0, 2 }
  uselistorder i32 %v1_eebc, { 1, 0 }
  uselistorder i32 %v2_eeb011, { 1, 0 }
  uselistorder i32 %v2_eeb0, { 1, 0 }
  uselistorder i1 %v8_eea0, { 1, 0 }
  uselistorder i32 %v2_ee88, { 0, 2, 1, 3 }
  uselistorder i32 %v0_ee70, { 1, 0 }
  uselistorder i32 %v2_ee68, { 2, 3, 4, 5, 0, 1, 6, 7 }
  uselistorder i32* %stack_var_-36, { 0, 2, 1 }
  uselistorder i8* %stack_var_-2240, { 0, 2, 1 }
  uselistorder i32* %stack_var_-64, { 0, 1, 3, 2 }
  uselistorder i8* %stack_var_-4288, { 2, 0, 1 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 15, 10, 13, 11, 12, 14, 16, 33, 17, 18, 19, 20, 21, 25, 22, 23, 24, 26, 34, 35, 27, 28, 29, 30, 31, 32 }
  uselistorder i32* %r2.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 10, 13, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 28, 26, 27, 29 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 10, 13, 8, 9, 1, 11, 12, 0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 25, 29, 27 }
  uselistorder i32* %r0.global-to-local, { 1, 5, 2, 3, 4, 10, 6, 47, 7, 8, 9, 12, 11, 15, 14, 13, 17, 16, 20, 18, 19, 21, 22, 46, 23, 25, 24, 26, 28, 27, 29, 36, 31, 30, 32, 33, 34, 35, 38, 37, 39, 40, 41, 42, 43, 44, 45, 0 }
  uselistorder i32* %lr.global-to-local, { 1, 2, 3, 0, 4, 5, 6 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 16, 18 }
  uselistorder i1* %cpsr_z.global-to-local, { 3, 4, 11, 5, 16, 6, 7, 17, 8, 9, 10, 1, 12, 13, 14, 15, 0, 36, 18, 19, 20, 21, 22, 23, 24, 25, 26, 2, 27, 28, 29, 30, 35, 33, 31, 32, 34, 37 }
  uselistorder i32 (i32)* @function_13248, { 7, 6, 11, 10, 9, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f380, { 1, 0 }
  uselistorder label %dec_label_pc_f24c.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f1dc.backedge, { 1, 0 }
  uselistorder label %dec_label_pc_f1bc.backedge, { 1, 0 }
  uselistorder label %bb130, { 1, 0 }
  uselistorder label %dec_label_pc_f25c, { 1, 0 }
  uselistorder label %dec_label_pc_f25c.preheader, { 1, 0 }
  uselistorder label %bb128, { 1, 0 }
  uselistorder label %dec_label_pc_f1ec, { 1, 0 }
  uselistorder label %dec_label_pc_f1ec.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_f1d0, { 1, 0 }
  uselistorder label %dec_label_pc_f148, { 1, 0 }
  uselistorder label %dec_label_pc_f130, { 5, 4, 0, 1, 2, 3 }
  uselistorder label %dec_label_pc_f110, { 2, 1, 4, 0, 3 }
  uselistorder label %dec_label_pc_f048.dec_label_pc_f048_crit_edge, { 1, 0 }
  uselistorder label %bb126, { 1, 0 }
  uselistorder label %.thread12, { 2, 1, 0 }
  uselistorder label %dec_label_pc_ee98, { 1, 0 }
}

define i32 @function_f39c(i32 %arg1) local_unnamed_addr {
dec_label_pc_f39c:
  %v2_f3a0 = load i32, i32* @global_var_1d258.129, align 4
  %v2_f3a8 = call i32 @function_11f18(i32 %v2_f3a0, i32 9)
  %v0_f3ac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_f3ac, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_f39c
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_f39c, %bb
  ret i32 %v2_f3a8

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_f3b0() local_unnamed_addr {
dec_label_pc_f3b0:
  %r3.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_f3b0 = load i32, i32* @r4, align 4
  store i32 %v3_f3b0, i32* %stack_var_-16, align 4
  %v0_f3b4 = load i32, i32* @r0, align 4
  store i32 %v0_f3b4, i32* %r5.global-to-local, align 4
  %v1_f3b8 = add i32 %v0_f3b4, 4
  %v2_f3b8 = inttoptr i32 %v1_f3b8 to i32*
  %v3_f3b8 = load i32, i32* %v2_f3b8, align 4
  store i32 0, i32* %r6.global-to-local, align 4
  store i32 0, i32* %stack_var_-32, align 4
  store i32 62428, i32* @lr, align 4
  %v1_f3d8 = icmp ne i32 %v3_f3b8, -1
  call void @__pseudo_cond_branch(i1 %v1_f3d8, i32 ptrtoint (i32* @global_var_11e18.102 to i32))
  %v3_f3e8 = call i32 @function_1272c(i32 2, i32 1, i32 0)
  store i32 %v3_f3e8, i32* %r3.global-to-local, align 4
  %v7_f3f0 = icmp eq i32 %v3_f3e8, -1
  store i32 256, i32* @r1, align 4
  %v0_f3f8 = load i32, i32* %r5.global-to-local, align 4
  %v1_f3f8 = add i32 %v0_f3f8, 28
  store i32 %v1_f3f8, i32* @r0, align 4
  %v2_f3fc = add i32 %v0_f3f8, 4
  %v3_f3fc = inttoptr i32 %v2_f3fc to i32*
  store i32 %v3_f3e8, i32* %v3_f3fc, align 4
  br i1 %v7_f3f0, label %dec_label_pc_f3b0.dec_label_pc_f478_crit_edge, label %dec_label_pc_f404

dec_label_pc_f3b0.dec_label_pc_f478_crit_edge:    ; preds = %dec_label_pc_f3b0
  %v14_f47c.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_f478

dec_label_pc_f404:                                ; preds = %dec_label_pc_f3b0
  %v0_f404 = load i32, i32* %r6.global-to-local, align 4
  %v1_f404 = load i32, i32* %r5.global-to-local, align 4
  %v2_f404 = add i32 %v1_f404, 24
  %v3_f404 = inttoptr i32 %v2_f404 to i32*
  store i32 %v0_f404, i32* %v3_f404, align 4
  %v0_f408 = call i32 @function_115b4()
  %v0_f40c = load i32, i32* %r5.global-to-local, align 4
  %v1_f40c = add i32 %v0_f40c, 4
  %v2_f40c = inttoptr i32 %v1_f40c to i32*
  %v3_f40c = load i32, i32* %v2_f40c, align 4
  store i32 %v3_f40c, i32* @r4, align 4
  %v0_f414 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_f414, i32* @r2, align 4
  %v2_f41c = call i32 @function_11d54(i32 %v3_f40c, i32 3)
  %v1_f424 = or i32 %v2_f41c, 2048
  store i32 %v1_f424, i32* @r2, align 4
  %v0_f428 = load i32, i32* @r4, align 4
  %v2_f42c = call i32 @function_11d54(i32 %v0_f428, i32 4)
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* %r3.global-to-local, align 4
  %v0_f434 = load i32, i32* %r5.global-to-local, align 4
  %v1_f434 = add i32 %v0_f434, 20
  %v2_f434 = inttoptr i32 %v1_f434 to i32*
  %v3_f434 = load i32, i32* %v2_f434, align 4
  store i32 %v3_f434, i32* @r4, align 4
  %v2_f438 = load i32, i32* @global_var_1d1ec.131, align 4
  %v1_f43c = add i32 %v0_f434, 16
  %v2_f43c = inttoptr i32 %v1_f43c to i32*
  %v3_f43c = load i32, i32* %v2_f43c, align 4
  store i32 %v3_f43c, i32* @lr, align 4
  store i32 1, i32* %r3.global-to-local, align 4
  %v2_f444 = add i32 %v0_f434, 8
  %v3_f444 = inttoptr i32 %v2_f444 to i32*
  store i32 %v2_f438, i32* %v3_f444, align 4
  %v0_f448 = load i32, i32* %r3.global-to-local, align 4
  %v1_f448 = load i32, i32* %r5.global-to-local, align 4
  %v2_f448 = add i32 %v1_f448, 12
  %v3_f448 = inttoptr i32 %v2_f448 to i32*
  store i32 %v0_f448, i32* %v3_f448, align 4
  %v0_f450 = load i32, i32* %r5.global-to-local, align 4
  %v1_f450 = add i32 %v0_f450, 4
  %v2_f450 = inttoptr i32 %v1_f450 to i32*
  %v3_f450 = load i32, i32* %v2_f450, align 4
  %v0_f454 = load i32, i32* %r3.global-to-local, align 4
  %v2_f454 = mul i32 %v0_f454, 2
  store i32 %v2_f454, i32* %r3.global-to-local, align 4
  store i32 %v2_f454, i32* %stack_var_-32, align 4
  %v3_f474 = bitcast i32* %stack_var_-32 to %sockaddr*
  %v4_f474 = call i32 @function_12588(i32 %v3_f450, %sockaddr* %v3_f474, i32 16)
  br label %dec_label_pc_f478

dec_label_pc_f478:                                ; preds = %dec_label_pc_f3b0.dec_label_pc_f478_crit_edge, %dec_label_pc_f404
  %v14_f47c = phi i32 [ %v14_f47c.pre, %dec_label_pc_f3b0.dec_label_pc_f478_crit_edge ], [ %v4_f474, %dec_label_pc_f404 ]
  %v2_f47c = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_f47c, i32* @r4, align 4
  ret i32 %v14_f47c

; uselistorder directives
  uselistorder i32 %v2_f454, { 1, 0 }
  uselistorder i32 %v3_f3e8, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 5, 4, 3, 6 }
  uselistorder i32 ()* @function_115b4, { 8, 4, 7, 6, 5, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_f478, { 1, 0 }
}

define i32 @function_f484(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_f484:
  %fp.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %stack_var_-44 = alloca i32, align 4
  %v3_f484 = load i32, i32* @r4, align 4
  %v6_f484 = load i32, i32* @r5, align 4
  %v9_f484 = load i32, i32* @r6, align 4
  %v12_f484 = load i32, i32* @r7, align 4
  %v15_f484 = load i32, i32* @r8, align 4
  store i32 ptrtoint (i32* @global_var_1d1b8.133 to i32), i32* @r8, align 4
  %v2_f48c = load i32, i32* @global_var_1d1b8.133, align 4
  store i32 ptrtoint (i32* @global_var_1d1e4.135 to i32), i32* %sb.global-to-local, align 4
  %v3_f498 = mul i32 %v2_f48c, 16
  store i32 %v3_f498, i32* %r3.global-to-local, align 4
  %v3_f4a0 = urem i32 %arg3, 65536
  store i32 %v3_f4a0, i32* %r2.global-to-local, align 4
  store i32 %arg1, i32* @r5, align 4
  %v2_f4ac = load i32, i32* @global_var_1d1e4.135, align 4
  %v1_f4b0 = add i32 %v3_f498, 16
  store i32 %v1_f4b0, i32* %r1.global-to-local, align 4
  store i32 %v3_f4a0, i32* %stack_var_-44, align 4
  %v8_f4b8 = call i32 @function_12b60(i32 %v2_f4ac, i32 %v1_f4b0, i32 %v3_f4a0, i32 %v3_f498)
  store i32 %v8_f4b8, i32* %sl.global-to-local, align 4
  %v0_f4c0 = load i32, i32* @r5, align 4
  %v1_f4c4 = load i32, i32* %sb.global-to-local, align 4
  %v2_f4c4 = inttoptr i32 %v1_f4c4 to i32*
  store i32 %v8_f4b8, i32* %v2_f4c4, align 4
  %v2_f4c8 = load i32, i32* @global_var_1d1b8.133, align 4
  store i32 %v2_f4c8, i32* %fp.global-to-local, align 4
  %v1_f4cc = inttoptr i32 %v0_f4c0 to i8*
  %v2_f4cc = call i32 @function_11514(i8* %v1_f4cc)
  %sext = mul i32 %v2_f4cc, 16777216
  %v1_f4d0 = sdiv i32 %sext, 16777216
  %v2_f4d0 = add nsw i32 %v1_f4d0, 1
  store i32 %v2_f4d0, i32* @r4, align 4
  store i32 %v1_f4d0, i32* @r7, align 4
  %v1_f4dc = call i32 @function_128c4(i32 %v2_f4d0)
  %v0_f4e0 = load i32, i32* @r5, align 4
  store i32 %v0_f4e0, i32* %r1.global-to-local, align 4
  %v0_f4e4 = load i32, i32* @r4, align 4
  store i32 %v0_f4e4, i32* %r2.global-to-local, align 4
  store i32 %v1_f4dc, i32* @r6, align 4
  %v3_f4ec = call i32 @function_11590(i32 %v1_f4dc, i32 %v0_f4e0, i32 %v0_f4e4)
  %v0_f4f0 = load i32, i32* @r7, align 4
  %tmp21 = icmp slt i32 %v0_f4f0, 1
  %extract.t6 = trunc i32 %v0_f4f0 to i8
  br i1 %tmp21, label %dec_label_pc_f514, label %dec_label_pc_f4f8

dec_label_pc_f4f8:                                ; preds = %dec_label_pc_f484
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f4fc

dec_label_pc_f4fc:                                ; preds = %dec_label_pc_f4fc, %dec_label_pc_f4f8
  %v2_f504 = phi i32 [ %v1_f508, %dec_label_pc_f4fc ], [ 0, %dec_label_pc_f4f8 ]
  %v1_f4fc = load i32, i32* @r6, align 4
  %v2_f4fc = add i32 %v1_f4fc, %v2_f504
  %v3_f4fc = inttoptr i32 %v2_f4fc to i8*
  %v4_f4fc = load i8, i8* %v3_f4fc, align 1
  %v6_f4fc = zext i8 %v4_f4fc to i32
  %v1_f500 = xor i32 %v6_f4fc, 84
  store i32 %v1_f500, i32* %r3.global-to-local, align 4
  %v1_f504 = trunc i32 %v1_f500 to i8
  store i8 %v1_f504, i8* %v3_f4fc, align 1
  %v0_f508 = load i32, i32* %r2.global-to-local, align 4
  %v1_f508 = add i32 %v0_f508, 1
  store i32 %v1_f508, i32* %r2.global-to-local, align 4
  %v0_f50c = load i32, i32* @r7, align 4
  %v9_f50c = icmp eq i32 %v0_f50c, %v1_f508
  br i1 %v9_f50c, label %dec_label_pc_f514.loopexit, label %dec_label_pc_f4fc

dec_label_pc_f514.loopexit:                       ; preds = %dec_label_pc_f4fc
  %extract.t = trunc i32 %v1_f508 to i8
  br label %dec_label_pc_f514

dec_label_pc_f514:                                ; preds = %dec_label_pc_f514.loopexit, %dec_label_pc_f484
  %v0_f524.off0 = phi i8 [ %extract.t, %dec_label_pc_f514.loopexit ], [ %extract.t6, %dec_label_pc_f484 ]
  %v2_f514 = load i32, i32* @global_var_1d1b8.133, align 4
  %v2_f518 = load i32, i32* @global_var_1d1e4.135, align 4
  store i32 %v2_f518, i32* %r2.global-to-local, align 4
  %v3_f51c = mul i32 %v2_f514, 16
  %v2_f520 = add i32 %v2_f518, %v3_f51c
  store i32 %v2_f520, i32* %r3.global-to-local, align 4
  %v3_f524 = add i32 %v2_f520, 12
  %v4_f524 = inttoptr i32 %v3_f524 to i8*
  store i8 %v0_f524.off0, i8* %v4_f524, align 1
  %v0_f528 = load i32, i32* @r6, align 4
  %v1_f528 = load i32, i32* %sl.global-to-local, align 4
  %v2_f528 = load i32, i32* %fp.global-to-local, align 4
  %v5_f528 = mul i32 %v2_f528, 16
  %v6_f528 = add i32 %v5_f528, %v1_f528
  %v7_f528 = inttoptr i32 %v6_f528 to i32*
  store i32 %v0_f528, i32* %v7_f528, align 4
  %v2_f530 = load i32, i32* @global_var_1d1b8.133, align 4
  store i32 %v2_f530, i32* @r7, align 4
  %v2_f534 = load i32, i32* @global_var_1d1e4.135, align 4
  store i32 %v2_f534, i32* %sl.global-to-local, align 4
  %v1_f538 = inttoptr i32 %arg2 to i8*
  %v2_f538 = call i32 @function_11514(i8* %v1_f538)
  %sext1 = mul i32 %v2_f538, 16777216
  %v1_f53c = sdiv i32 %sext1, 16777216
  %v2_f53c = add nsw i32 %v1_f53c, 1
  store i32 %v2_f53c, i32* @r4, align 4
  store i32 %v1_f53c, i32* @r5, align 4
  %v1_f548 = call i32 @function_128c4(i32 %v2_f53c)
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %v0_f550 = load i32, i32* @r4, align 4
  store i32 %v0_f550, i32* %r2.global-to-local, align 4
  store i32 %v1_f548, i32* %r6.global-to-local, align 4
  %v3_f558 = call i32 @function_11590(i32 %v1_f548, i32 %arg2, i32 %v0_f550)
  %v0_f55c = load i32, i32* @r5, align 4
  %tmp22 = icmp slt i32 %v0_f55c, 1
  %extract.t8 = trunc i32 %v0_f55c to i8
  br i1 %tmp22, label %dec_label_pc_f580, label %dec_label_pc_f564

dec_label_pc_f564:                                ; preds = %dec_label_pc_f514
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_f568

dec_label_pc_f568:                                ; preds = %dec_label_pc_f568, %dec_label_pc_f564
  %v2_f570 = phi i32 [ %v1_f574, %dec_label_pc_f568 ], [ 0, %dec_label_pc_f564 ]
  %v1_f568 = load i32, i32* %r6.global-to-local, align 4
  %v2_f568 = add i32 %v1_f568, %v2_f570
  %v3_f568 = inttoptr i32 %v2_f568 to i8*
  %v4_f568 = load i8, i8* %v3_f568, align 1
  %v6_f568 = zext i8 %v4_f568 to i32
  %v1_f56c = xor i32 %v6_f568, 84
  store i32 %v1_f56c, i32* %r3.global-to-local, align 4
  %v1_f570 = trunc i32 %v1_f56c to i8
  store i8 %v1_f570, i8* %v3_f568, align 1
  %v0_f574 = load i32, i32* %r2.global-to-local, align 4
  %v1_f574 = add i32 %v0_f574, 1
  store i32 %v1_f574, i32* %r2.global-to-local, align 4
  %v0_f578 = load i32, i32* @r5, align 4
  %v9_f578 = icmp eq i32 %v0_f578, %v1_f574
  br i1 %v9_f578, label %dec_label_pc_f580.loopexit, label %dec_label_pc_f568

dec_label_pc_f580.loopexit:                       ; preds = %dec_label_pc_f568
  %extract.t7 = trunc i32 %v1_f574 to i8
  br label %dec_label_pc_f580

dec_label_pc_f580:                                ; preds = %dec_label_pc_f580.loopexit, %dec_label_pc_f514
  %v0_f590.off0 = phi i8 [ %extract.t7, %dec_label_pc_f580.loopexit ], [ %extract.t8, %dec_label_pc_f514 ]
  %v2_f580 = load i32, i32* @global_var_1d1b8.133, align 4
  %v2_f584 = load i32, i32* @global_var_1d1e4.135, align 4
  %v3_f588 = mul i32 %v2_f580, 16
  %v2_f58c = or i32 %v3_f588, 13
  %v3_f590 = add i32 %v2_f58c, %v2_f584
  %v4_f590 = inttoptr i32 %v3_f590 to i8*
  store i8 %v0_f590.off0, i8* %v4_f590, align 1
  %v2_f598 = load i32, i32* @global_var_1d1b8.133, align 4
  store i32 %v2_f598, i32* %lr.global-to-local, align 4
  %v4_f59c = load i8, i8* @global_var_1d1e9.138, align 1
  %v5_f59c = zext i8 %v4_f59c to i32
  %v3_f5a0 = load i8, i8* bitcast (i8** @global_var_1d1e8.137 to i8*), align 4
  %v4_f5a0 = zext i8 %v3_f5a0 to i32
  %v2_f5a4 = load i32, i32* @global_var_1d1e4.135, align 4
  %v4_f5a8 = mul nuw nsw i32 %v5_f59c, 256
  %v5_f5a8 = or i32 %v4_f5a0, %v4_f5a8
  store i32 %v5_f5a8, i32* %r2.global-to-local, align 4
  %v3_f5ac = mul i32 %v2_f598, 16
  %v2_f5b0 = add i32 %v2_f5a4, %v3_f5ac
  store i32 %v2_f5b0, i32* %r1.global-to-local, align 4
  %v3_f5b8 = add i32 %v2_f5b0, 9
  %v4_f5b8 = inttoptr i32 %v3_f5b8 to i8*
  store i8 %v4_f59c, i8* %v4_f5b8, align 1
  %v0_f5bc = load i32, i32* %r2.global-to-local, align 4
  %v1_f5bc = trunc i32 %v0_f5bc to i8
  %v2_f5bc = load i32, i32* %r1.global-to-local, align 4
  %v3_f5bc = add i32 %v2_f5bc, 8
  %v4_f5bc = inttoptr i32 %v3_f5bc to i8*
  store i8 %v1_f5bc, i8* %v4_f5bc, align 1
  %v4_f5c0 = load i8, i8* @global_var_1d1e9.138, align 1
  %v5_f5c0 = zext i8 %v4_f5c0 to i32
  %v3_f5c4 = load i8, i8* bitcast (i8** @global_var_1d1e8.137 to i8*), align 4
  %v4_f5c4 = zext i8 %v3_f5c4 to i32
  %v4_f5c8 = mul nuw nsw i32 %v5_f5c0, 256
  %v5_f5c8 = or i32 %v4_f5c4, %v4_f5c8
  %v2_f5cc = load i32, i32* %stack_var_-44, align 4
  %v2_f5d0 = add i32 %v5_f5c8, %v2_f5cc
  store i32 %v2_f5d0, i32* %r3.global-to-local, align 4
  %v3_f5d49 = udiv i32 %v2_f5d0, 256
  %v1_f5d8 = trunc i32 %v3_f5d49 to i8
  %v2_f5d8 = load i32, i32* %r1.global-to-local, align 4
  %v3_f5d8 = add i32 %v2_f5d8, 11
  %v4_f5d8 = inttoptr i32 %v3_f5d8 to i8*
  store i8 %v1_f5d8, i8* %v4_f5d8, align 1
  %v0_f5dc = load i32, i32* %r3.global-to-local, align 4
  %v1_f5dc = trunc i32 %v0_f5dc to i8
  %v2_f5dc = load i32, i32* %r1.global-to-local, align 4
  %v3_f5dc = add i32 %v2_f5dc, 10
  %v4_f5dc = inttoptr i32 %v3_f5dc to i8*
  store i8 %v1_f5dc, i8* %v4_f5dc, align 1
  %v4_f5e0 = load i8, i8* @global_var_1d1e9.138, align 1
  %v5_f5e0 = zext i8 %v4_f5e0 to i32
  %v3_f5e4 = load i8, i8* bitcast (i8** @global_var_1d1e8.137 to i8*), align 4
  %v4_f5e4 = zext i8 %v3_f5e4 to i32
  %v4_f5e8 = mul nuw nsw i32 %v5_f5e0, 256
  %v5_f5e8 = or i32 %v4_f5e4, %v4_f5e8
  %v2_f5ec = load i32, i32* %stack_var_-44, align 4
  %v2_f5f0 = add i32 %v5_f5e8, %v2_f5ec
  store i32 %v2_f5f0, i32* %r2.global-to-local, align 4
  %v0_f5f4 = load i32, i32* @r7, align 4
  %v3_f5f4 = mul i32 %v0_f5f4, 16
  %v1_f5f8 = load i32, i32* %sl.global-to-local, align 4
  %v2_f5f8 = add i32 %v1_f5f8, %v3_f5f4
  store i32 %v2_f5f8, i32* %r3.global-to-local, align 4
  %v0_f5fc = load i32, i32* %lr.global-to-local, align 4
  %v1_f5fc = add i32 %v0_f5fc, 1
  store i32 %v1_f5fc, i32* @lr, align 4
  %v3_f600 = sdiv i32 %v2_f5f0, 256
  store i32 %v3_f600, i32* %r1.global-to-local, align 4
  %v0_f604 = load i32, i32* %r6.global-to-local, align 4
  %v2_f604 = add i32 %v2_f5f8, 4
  %v3_f604 = inttoptr i32 %v2_f604 to i32*
  store i32 %v0_f604, i32* %v3_f604, align 4
  %v0_f608 = load i32, i32* @lr, align 4
  %v1_f608 = load i32, i32* @r8, align 4
  %v2_f608 = inttoptr i32 %v1_f608 to i32*
  store i32 %v0_f608, i32* %v2_f608, align 4
  %v0_f60c = load i32, i32* %r1.global-to-local, align 4
  %v1_f60c = trunc i32 %v0_f60c to i8
  store i8 %v1_f60c, i8* @global_var_1d1e9.138, align 1
  %v0_f610 = load i32, i32* %r2.global-to-local, align 4
  %v1_f610 = trunc i32 %v0_f610 to i8
  store i8 %v1_f610, i8* bitcast (i8** @global_var_1d1e8.137 to i8*), align 4
  store i32 %v3_f484, i32* @r4, align 4
  store i32 %v6_f484, i32* @r5, align 4
  store i32 %v9_f484, i32* @r6, align 4
  store i32 %v12_f484, i32* @r7, align 4
  store i32 %v15_f484, i32* @r8, align 4
  ret i32 ptrtoint (i8** @global_var_1d1e8.137 to i32)

; uselistorder directives
  uselistorder i32 %v1_f574, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f548, { 1, 0 }
  uselistorder i32 %v1_f508, { 0, 2, 3, 1 }
  uselistorder i32 %v1_f4dc, { 1, 0 }
  uselistorder i32 %v3_f4a0, { 1, 2, 0 }
  uselistorder i32 %v3_f498, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 }
  uselistorder i32 (i8*)* @function_11514, { 0, 1, 9, 10, 11, 12, 13, 27, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28 }
  uselistorder i32 (i32, i32, i32, i32)* @function_12b60, { 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %arg2, { 1, 0, 2, 3 }
}

define i32 @function_f628(i32 %arg1) local_unnamed_addr {
dec_label_pc_f628:
  %cpsr_c.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp269 = call i32 @__decompiler_undefined_function_0()
  %tmp276 = call i32 @__decompiler_undefined_function_0()
  %tmp277 = call i8* @__decompiler_undefined_function_2()
  %tmp278 = call i32 @__decompiler_undefined_function_0()
  %tmp279 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-73 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-41 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-220 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-348 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-1842 = alloca i32, align 4
  %stack_var_-1862 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_f628 = load i32, i32* @r4, align 4
  store i32 %v3_f628, i32* %stack_var_-36, align 4
  %v6_f628 = load i32, i32* @r5, align 4
  %v18_f628 = load i32, i32* @sb, align 4
  %v21_f628 = load i32, i32* @sl, align 4
  %v0_f630 = call i32 @function_11e44()
  store i32 %v0_f630, i32* %r0.global-to-local, align 4
  %v7_f634 = icmp eq i32 %v0_f630, -1
  %. = zext i1 %v7_f634 to i32
  %tmp310 = icmp slt i32 %v0_f630, 1
  %storemerge266 = select i1 %tmp310, i32 %., i32 1
  store i32 %storemerge266, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d258.129 to i32), i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f650 = icmp eq i32 %storemerge266, 0
  store i1 %v2_f650, i1* %cpsr_z.global-to-local, align 1
  store i32 %v0_f630, i32* @global_var_1d258.129, align 4
  br i1 %v2_f650, label %dec_label_pc_f664, label %dec_label_pc_f65c

dec_label_pc_f65c:                                ; preds = %dec_label_pc_f628
  store i32 %v3_f628, i32* %r4.global-to-local, align 4
  store i32 %v6_f628, i32* %r5.global-to-local, align 4
  store i32 %v18_f628, i32* @sb, align 4
  store i32 %v21_f628, i32* @sl, align 4
  ret i32 %v0_f630

dec_label_pc_f664:                                ; preds = %dec_label_pc_f628
  %v0_f664 = call i32 @function_117cc()
  store i32 %v0_f664, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r1.global-to-local, align 4
  store i32 %v0_f664, i32* @global_var_1d234.50, align 4
  %v1_f670 = call i32 @function_ec20(i32 %v0_f664)
  %v0_f674 = load i32, i32* @r4, align 4
  store i32 %v0_f674, i32* %r0.global-to-local, align 4
  %v1_f678 = inttoptr i32 %v0_f674 to i32*
  %v2_f678 = call i32 @function_120e8(i32* %v1_f678)
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* %r2.global-to-local, align 4
  store i32 288, i32* %r1.global-to-local, align 4
  store i32 %v2_f678, i32* @global_var_1d1ec.131, align 4
  store i32 256, i32* %r0.global-to-local, align 4
  %v2_f68c = call i32 @function_12a18(i32 256, i32 288)
  store i32 %v2_f68c, i32* %lr.global-to-local, align 4
  %v0_f698 = load i32, i32* @r4, align 4
  store i32 %v0_f698, i32* %stack_var_-52, align 4
  store i32 %v2_f68c, i32* @global_var_1d250.143, align 4
  store i32 %v0_f698, i32* %r3.global-to-local, align 4
  store i32 %v0_f698, i32* %r5.global-to-local, align 4
  store i32 -1, i32* %r0.global-to-local, align 4
  store i32 %v0_f698, i32* %ip.global-to-local, align 4
  %v1_f6b0 = add i32 %v2_f68c, 4
  store i32 %v1_f6b0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_f6b4

dec_label_pc_f6b4:                                ; preds = %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge, %dec_label_pc_f664
  %v0_f6cc = phi i32 [ %v0_f6cc.pre, %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge ], [ %v0_f698, %dec_label_pc_f664 ]
  %v0_f6bc = phi i32 [ %v0_f6d4, %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge ], [ %v0_f698, %dec_label_pc_f664 ]
  %v1_f6c4 = phi i32 [ %v1_f6c4.pre, %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge ], [ %v2_f68c, %dec_label_pc_f664 ]
  %v3_f6b4 = mul i32 %v0_f6bc, 256
  store i32 %v3_f6b4, i32* %r2.global-to-local, align 4
  %v1_f6bc = add i32 %v0_f6bc, 1
  store i32 %v1_f6bc, i32* %ip.global-to-local, align 4
  %v2_f6c0 = mul i32 %v0_f6bc, 288
  %v2_f6c4 = add i32 %v1_f6c4, 12
  %v2_f6cc = add i32 %v2_f6c4, %v2_f6c0
  %v3_f6cc = inttoptr i32 %v2_f6cc to i32*
  store i32 %v0_f6cc, i32* %v3_f6cc, align 4
  %v0_f6d0 = load i32, i32* %r0.global-to-local, align 4
  %v1_f6d0 = load i32, i32* %r1.global-to-local, align 4
  %v2_f6d0 = inttoptr i32 %v1_f6d0 to i32*
  store i32 %v0_f6d0, i32* %v2_f6d0, align 4
  %v3_f6d0 = load i32, i32* %r1.global-to-local, align 4
  %v4_f6d0 = add i32 %v3_f6d0, 288
  store i32 %v4_f6d0, i32* %r1.global-to-local, align 4
  %v0_f6d4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v0_f6d4, i32* %r3.global-to-local, align 4
  %v7_f6d8 = icmp sgt i32 %v1_f6bc, 255
  br i1 %v7_f6d8, label %dec_label_pc_f6dc, label %dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge

dec_label_pc_f6b4.dec_label_pc_f6b4_crit_edge:    ; preds = %dec_label_pc_f6b4
  %v1_f6c4.pre = load i32, i32* %lr.global-to-local, align 4
  %v0_f6cc.pre = load i32, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_f6b4

dec_label_pc_f6dc:                                ; preds = %dec_label_pc_f6b4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  store i32 %v0_f6d4, i32* %stack_var_-52, align 4
  %v3_f6ec = call i32 @function_1272c(i32 2, i32 3, i32 6)
  store i32 %v3_f6ec, i32* %r0.global-to-local, align 4
  %v2_f6f4 = icmp eq i32 %v3_f6ec, -1
  store i1 %v2_f6f4, i1* %cpsr_c.global-to-local, align 1
  %v7_f6f4 = icmp eq i32 %v3_f6ec, -1
  store i1 %v7_f6f4, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_f6ec, i32* @r4, align 4
  store i32 %v3_f6ec, i32* @global_var_1d254.145, align 4
  br i1 %v7_f6f4, label %dec_label_pc_ff10, label %dec_label_pc_f704

dec_label_pc_f704:                                ; preds = %dec_label_pc_f6dc
  store i32 3, i32* %r1.global-to-local, align 4
  %v0_f708 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f708, i32* @r2, align 4
  %v2_f70c = call i32 @function_11d54(i32 %v3_f6ec, i32 3)
  store i32 4, i32* %r1.global-to-local, align 4
  %v1_f714 = or i32 %v2_f70c, 2048
  store i32 %v1_f714, i32* @r2, align 4
  %v0_f718 = load i32, i32* @r4, align 4
  store i32 %v0_f718, i32* %r0.global-to-local, align 4
  %v2_f71c = call i32 @function_11d54(i32 %v0_f718, i32 4)
  store i32 1, i32* %ip.global-to-local, align 4
  %v2_f728 = load i32, i32* @global_var_1d254.145, align 4
  store i32 %v2_f728, i32* %r0.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  %v0_f730 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_f730, i32* %r1.global-to-local, align 4
  %v2_f734 = ptrtoint i32* %stack_var_-52 to i32
  store i32 %v2_f734, i32* %r3.global-to-local, align 4
  store i32 4, i32* @r4, align 4
  store i32 1, i32* %stack_var_-52, align 4
  %v6_f744 = call i32 @function_126fc(i32 %v2_f728, i32 %v0_f730, i32 3, i32* nonnull %stack_var_-52, i32 4)
  store i32 %v6_f744, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f748 = icmp eq i32 %v6_f744, 0
  store i1 %v2_f748, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f748, label %dec_label_pc_f750, label %dec_label_pc_ff04

dec_label_pc_f750:                                ; preds = %dec_label_pc_f704, %dec_label_pc_f750
  %v0_f750 = call i32 @function_ebc8()
  %v3_f754 = mul i32 %v0_f750, 65536
  store i32 %v3_f754, i32* %r0.global-to-local, align 4
  %v1_f760 = mul i32 %v0_f750, 256
  %v3_f764 = and i32 %v1_f760, 65280
  %tmp313 = udiv i32 %v0_f750, 256
  %v4_f768 = urem i32 %tmp313, 256
  %v5_f768 = or i32 %v4_f768, %v3_f764
  store i32 %v5_f768, i32* %r3.global-to-local, align 4
  %v2_f76c = icmp ugt i32 %v5_f768, 1023
  store i1 %v2_f76c, i1* %cpsr_c.global-to-local, align 1
  %v7_f76c = icmp eq i32 %v5_f768, 1024
  store i1 %v7_f76c, i1* %cpsr_z.global-to-local, align 1
  %v3_f770 = icmp ult i32 %v5_f768, 1022
  br i1 %v3_f770, label %dec_label_pc_f750, label %dec_label_pc_f774

dec_label_pc_f774:                                ; preds = %dec_label_pc_f750
  %v5_f75c.le = trunc i32 %v0_f750 to i8
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %ip.global-to-local, align 4
  store i32 69, i32* %r2.global-to-local, align 4
  store i32 40, i32* %r3.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i8 69, i8* bitcast (i8** @global_var_1d1bc.147 to i8*), align 4
  store i8 40, i8* bitcast (i32* @global_var_1d1bf.148 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1be.149 to i8*), align 4
  %v0_f7a8 = call i32 @function_ebc8()
  %v1_f7a8 = trunc i32 %v0_f7a8 to i8
  store i32 %v0_f7a8, i32* %r0.global-to-local, align 4
  %v3_f7b0 = load i8, i8* @global_var_1d1dc.152, align 1
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %lr.global-to-local, align 4
  %v4_f7b8265 = udiv i32 %v0_f7a8, 256
  %v1_f7bc = trunc i32 %v4_f7b8265 to i8
  store i8 %v1_f7bc, i8* bitcast (i32* @global_var_1d1c1.153 to i8*), align 4
  %v4_f7c0 = sext i8 %v5_f75c.le to i32
  store i8 6, i8* bitcast (i32* @global_var_1d1c5.154 to i8*), align 4
  %tmp = urem i8 %v3_f7b0, 16
  %v1_f7cc = zext i8 %tmp to i32
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* %r2.global-to-local, align 4
  %v1_f7d4 = and i32 %v4_f7c0, 128
  %v2_f7d4 = icmp ne i32 %v1_f7d4, 0
  store i1 %v2_f7d4, i1* %cpsr_c.global-to-local, align 1
  %v3_f7d4 = sdiv i32 %v4_f7c0, 256
  store i32 %v3_f7d4, i32* %ip.global-to-local, align 4
  %v1_f7d8 = or i32 %v1_f7cc, 80
  store i32 %v1_f7d8, i32* %r1.global-to-local, align 4
  store i8 64, i8* bitcast (i32* @global_var_1d1c4.155 to i8*), align 4
  %v1_f7e4 = trunc i32 %v1_f7d8 to i8
  store i8 %v1_f7e4, i8* @global_var_1d1dc.152, align 1
  store i8 23, i8* bitcast (i32* @global_var_1d1d3.156 to i8*), align 4
  store i32 %v4_f7c0, i32* %r3.global-to-local, align 4
  %v1_f7f4 = trunc i32 %v3_f7d4 to i8
  store i8 %v1_f7f4, i8* bitcast (i32* @global_var_1d1d1.157 to i8*), align 4
  store i8 %v1_f7a8, i8* bitcast (i32* @global_var_1d1c0.158 to i8*), align 4
  store i8 %v5_f75c.le, i8* bitcast (i32* @global_var_1d1d0.151 to i8*), align 4
  %v0_f800 = load i32, i32* @r5, align 4
  %v1_f800 = trunc i32 %v0_f800 to i8
  store i8 %v1_f800, i8* bitcast (i32* @global_var_1d1d2.159 to i8*), align 4
  %v0_f804 = call i32 @function_ebc8()
  %v1_f804 = trunc i32 %v0_f804 to i8
  %v3_f80c = load i8, i8* @global_var_1d1dd.160, align 1
  %v4_f80c = zext i8 %v3_f80c to i32
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* @lr, align 4
  %v2_f814 = and i32 %v0_f804, 128
  %v3_f814 = icmp ne i32 %v2_f814, 0
  store i1 %v3_f814, i1* %cpsr_c.global-to-local, align 1
  %v4_f814 = sdiv i32 %v0_f804, 256
  store i32 %v4_f814, i32* %ip.global-to-local, align 4
  %v1_f818 = or i32 %v4_f80c, 2
  store i32 %v1_f818, i32* %r3.global-to-local, align 4
  store i32 %v0_f804, i32* @r4, align 4
  %v1_f820 = trunc i32 %v4_f814 to i8
  store i8 %v1_f820, i8* bitcast (i32* @global_var_1d1df.161 to i8*), align 4
  %v1_f824 = trunc i32 %v1_f818 to i8
  store i8 %v1_f824, i8* @global_var_1d1dd.160, align 1
  store i8 %v1_f804, i8* bitcast (i32* @global_var_1d1de.162 to i8*), align 4
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1474c.166 to i32), i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v4_f838 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint (i32* @global_var_1474c.166 to i32), i32 4)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_146c4.168 to i32), i32* %r1.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v5_f848 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([5 x i8]* @global_var_146c4.168 to i32), i32 8)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_146cc.170 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f858 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_146cc.170 to i32), i32 12)
  store i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1474c.166 to i32), i32* %r1.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v4_f868 = call i32 @function_f484(i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32 ptrtoint (i32* @global_var_1474c.166 to i32), i32 7)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([9 x i8]* @global_var_146e0.174 to i32), i32* %r1.global-to-local, align 4
  store i32 12, i32* %r2.global-to-local, align 4
  %v5_f878 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([9 x i8]* @global_var_146e0.174 to i32), i32 12)
  store i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32* %r0.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32* %r1.global-to-local, align 4
  %v5_f888 = call i32 @function_f484(i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32 10)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_146f4.178 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f898 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_146f4.178 to i32), i32 9)
  store i32 ptrtoint ([8 x i8]* @global_var_146fc.180 to i32), i32* %r0.global-to-local, align 4
  store i32 14, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_146fc.180 to i32), i32* %r1.global-to-local, align 4
  %v5_f8a8 = call i32 @function_f484(i32 ptrtoint ([8 x i8]* @global_var_146fc.180 to i32), i32 ptrtoint ([8 x i8]* @global_var_146fc.180 to i32), i32 14)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32* %r1.global-to-local, align 4
  store i32 11, i32* %r2.global-to-local, align 4
  %v5_f8b8 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32 11)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14704.182 to i32), i32* %r1.global-to-local, align 4
  store i32 17, i32* %r2.global-to-local, align 4
  %v4_f8c8 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint (i32* @global_var_14704.182 to i32), i32 17)
  store i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([6 x i8]* @global_var_14714.184 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f8d8 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), i32 ptrtoint ([6 x i8]* @global_var_14714.184 to i32), i32 9)
  store i32 ptrtoint ([5 x i8]* @global_var_1471c.186 to i32), i32* %r0.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1471c.186 to i32), i32* %r1.global-to-local, align 4
  %v5_f8e8 = call i32 @function_f484(i32 ptrtoint ([5 x i8]* @global_var_1471c.186 to i32), i32 ptrtoint ([5 x i8]* @global_var_1471c.186 to i32), i32 8)
  store i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14724.188 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f8f8 = call i32 @function_f484(i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32 ptrtoint (i32* @global_var_14724.188 to i32), i32 15)
  store i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_14730.190 to i32), i32* %r1.global-to-local, align 4
  store i32 15, i32* %r2.global-to-local, align 4
  %v4_f908 = call i32 @function_f484(i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), i32 ptrtoint (i32* @global_var_14730.190 to i32), i32 15)
  store i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([5 x i8]* @global_var_1473c.192 to i32), i32* %r1.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v5_f918 = call i32 @function_f484(i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), i32 ptrtoint ([5 x i8]* @global_var_1473c.192 to i32), i32 9)
  %v2_f920 = ptrtoint i32* %stack_var_-1862 to i32
  store i32 %v2_f920, i32* %r0.global-to-local, align 4
  %v2_f924 = ptrtoint i32* %stack_var_-1842 to i32
  store i32 %v2_f924, i32* %r1.global-to-local, align 4
  %tmp314 = bitcast i32* %stack_var_-1842 to i8*
  br label %dec_label_pc_f930

dec_label_pc_f930:                                ; preds = %dec_label_pc_10018, %dec_label_pc_f774
  %stack_var_-1872.0 = phi i32 [ %tmp276, %dec_label_pc_f774 ], [ %stack_var_-1872.2, %dec_label_pc_10018 ]
  %stack_var_-1884.0 = phi i8* [ %tmp314, %dec_label_pc_f774 ], [ %stack_var_-1884.1, %dec_label_pc_10018 ]
  %v0_fce4 = phi i32 [ %v2_f920, %dec_label_pc_f774 ], [ %stack_var_-1880.1, %dec_label_pc_10018 ]
  %stack_var_-1876.0 = phi i8 [ %v5_f75c.le, %dec_label_pc_f774 ], [ %stack_var_-1876.1, %dec_label_pc_10018 ]
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* %r2.global-to-local, align 4
  store i32 %stack_var_-1872.0, i32* %r3.global-to-local, align 4
  %v2_f938 = load i32, i32* @global_var_1d1ec.131, align 4
  store i32 %v2_f938, i32* @r8, align 4
  %v3_f93c = icmp uge i32 %stack_var_-1872.0, %v2_f938
  store i1 %v3_f93c, i1* %cpsr_c.global-to-local, align 1
  %v9_f93c = icmp eq i32 %stack_var_-1872.0, %v2_f938
  store i1 %v9_f93c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_f93c, label %dec_label_pc_fc6c, label %dec_label_pc_f944

dec_label_pc_f944:                                ; preds = %dec_label_pc_f930
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  store i32 0, i32* %sl.global-to-local, align 4
  %v2_fc3c = ptrtoint i32* %stack_var_-92 to i32
  br label %dec_label_pc_f950

dec_label_pc_f950:                                ; preds = %.thread65.dec_label_pc_f950_crit_edge, %dec_label_pc_f944
  %v0_f950 = phi i32 [ %v0_f950.pre, %.thread65.dec_label_pc_f950_crit_edge ], [ 0, %dec_label_pc_f944 ]
  store i32 %v0_f950, i32* %stack_var_-92, align 4
  store i32 %v0_f950, i32* %stack_var_-84, align 4
  %v0_f960 = call i32 @function_ebc8()
  %v1_f960 = trunc i32 %v0_f960 to i8
  store i32 %v0_f960, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %r1.global-to-local, align 4
  %v2_f96c = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_f96c, i32* %r2.global-to-local, align 4
  %v2_f970 = and i32 %v0_f960, 128
  %v3_f970 = icmp ne i32 %v2_f970, 0
  store i1 %v3_f970, i1* %cpsr_c.global-to-local, align 1
  %v4_f970 = sdiv i32 %v0_f960, 256
  store i32 %v4_f970, i32* %r3.global-to-local, align 4
  %v1_f974 = trunc i32 %v4_f970 to i8
  store i8 %v1_f974, i8* bitcast (i32* @global_var_1d1c1.153 to i8*), align 4
  store i32 %v2_f96c, i32* @global_var_1d1c8.193, align 4
  store i8 %v1_f960, i8* bitcast (i32* @global_var_1d1c0.158 to i8*), align 4
  br label %dec_label_pc_f980

dec_label_pc_f980:                                ; preds = %dec_label_pc_fad8, %dec_label_pc_f9b0, %dec_label_pc_fb0c, %dec_label_pc_fb00, %dec_label_pc_faf4, %dec_label_pc_fae8, %.thread50, %.thread34, %.thread30, %.thread26, %bb340, %bb339, %bb338, %bb337, %bb336, %bb335, %bb334, %bb333, %bb332, %bb331, %dec_label_pc_fa4c, %dec_label_pc_fa44, %bb325, %dec_label_pc_fa14, %dec_label_pc_f9f0, %bb318, %dec_label_pc_f9c0, %bb317, %dec_label_pc_f9a8, %bb316, %bb342, %dec_label_pc_f950
  %v0_f980 = call i32 @function_ebc8()
  store i32 %v0_f980, i32* %r0.global-to-local, align 4
  %v1_f984 = urem i32 %v0_f980, 256
  store i32 %v1_f984, i32* %r1.global-to-local, align 4
  %v3_f988 = udiv i32 %v0_f980, 256
  store i32 %v3_f988, i32* %r3.global-to-local, align 4
  %v3_f98c = udiv i32 %v0_f980, 65536
  store i32 %v3_f98c, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f990 = icmp eq i32 %v1_f984, 0
  store i1 %v2_f990, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f990, label %bb316, label %bb315

bb315:                                            ; preds = %dec_label_pc_f980
  %v3_f994 = icmp ugt i32 %v1_f984, 126
  store i1 %v3_f994, i1* %cpsr_c.global-to-local, align 1
  %v8_f994 = icmp eq i32 %v1_f984, 127
  store i1 %v8_f994, i1* %cpsr_z.global-to-local, align 1
  br label %bb316

bb316:                                            ; preds = %dec_label_pc_f980, %bb315
  %v0_f9a4 = phi i1 [ true, %dec_label_pc_f980 ], [ %v8_f994, %bb315 ]
  %v1_f998 = urem i32 %v3_f988, 256
  store i32 %v1_f998, i32* %ip.global-to-local, align 4
  %v1_f99c = urem i32 %v3_f98c, 256
  store i32 %v1_f99c, i32* %r2.global-to-local, align 4
  %v1_f9a0 = and i32 %v0_f980, 8388608
  %v2_f9a0 = icmp ne i32 %v1_f9a0, 0
  store i1 %v2_f9a0, i1* %cpsr_c.global-to-local, align 1
  %v3_f9a0 = udiv i32 %v0_f980, 16777216
  store i32 %v3_f9a0, i32* %r0.global-to-local, align 4
  br i1 %v0_f9a4, label %dec_label_pc_f980, label %dec_label_pc_f9a8

dec_label_pc_f9a8:                                ; preds = %bb316
  %v2_f9a8 = icmp ugt i32 %v1_f984, 2
  store i1 %v2_f9a8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9a8 = icmp eq i32 %v1_f984, 3
  store i1 %v7_f9a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9a8, label %dec_label_pc_f980, label %dec_label_pc_f9b0

dec_label_pc_f9b0:                                ; preds = %dec_label_pc_f9a8
  %v1_f9b0 = add nsw i32 %v1_f984, -15
  store i32 %v1_f9b0, i32* %r3.global-to-local, align 4
  %v2_f9b4 = icmp ugt i32 %v1_f984, 55
  store i1 %v2_f9b4, i1* %cpsr_c.global-to-local, align 1
  %v7_f9b4 = icmp eq i32 %v1_f984, 56
  store i1 %v7_f9b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9b4, label %dec_label_pc_f980, label %bb317

bb317:                                            ; preds = %dec_label_pc_f9b0
  %v3_f9b8 = icmp ne i32 %v1_f9b0, 0
  store i1 %v3_f9b8, i1* %cpsr_c.global-to-local, align 1
  %v8_f9b8 = icmp eq i32 %v1_f9b0, 1
  store i1 %v8_f9b8, i1* %cpsr_z.global-to-local, align 1
  %v2_f9bc = xor i1 %v3_f9b8, true
  %v3_f9bc = or i1 %v8_f9b8, %v2_f9bc
  br i1 %v3_f9bc, label %dec_label_pc_f980, label %dec_label_pc_f9c0

dec_label_pc_f9c0:                                ; preds = %bb317
  %v2_f9c0 = icmp ugt i32 %v1_f984, 9
  store i1 %v2_f9c0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c0 = icmp eq i32 %v1_f984, 10
  store i1 %v7_f9c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9c0, label %dec_label_pc_f980, label %dec_label_pc_f9c8

dec_label_pc_f9c8:                                ; preds = %dec_label_pc_f9c0
  %v2_f9c8 = icmp ugt i32 %v1_f984, 191
  store i1 %v2_f9c8, i1* %cpsr_c.global-to-local, align 1
  %v7_f9c8 = icmp eq i32 %v1_f984, 192
  store i1 %v7_f9c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_f9c8, label %bb318, label %dec_label_pc_f9d4

bb318:                                            ; preds = %dec_label_pc_f9c8
  %v3_f9cc = icmp ugt i32 %v1_f998, 167
  store i1 %v3_f9cc, i1* %cpsr_c.global-to-local, align 1
  %v8_f9cc = icmp eq i32 %v1_f998, 168
  store i1 %v8_f9cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_f9cc, label %dec_label_pc_f980, label %dec_label_pc_f9d4

dec_label_pc_f9d4:                                ; preds = %dec_label_pc_f9c8, %bb318
  %v7_f9d4 = icmp eq i32 %v1_f984, 172
  %.394 = zext i1 %v7_f9d4 to i32
  store i32 %.394, i32* %r3.global-to-local, align 4
  %v2_f9e0 = icmp ugt i32 %v1_f998, 14
  store i1 %v2_f9e0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9e0 = icmp eq i32 %v1_f998, 15
  store i1 %v7_f9e0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9e4 = xor i1 %v2_f9e0, true
  %v3_f9e4 = or i1 %v7_f9e0, %v2_f9e4
  br i1 %v3_f9e4, label %.thread10, label %bb321

.thread10:                                        ; preds = %dec_label_pc_f9d4
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_f9f8

bb321:                                            ; preds = %dec_label_pc_f9d4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_f9e8 = icmp eq i1 %v7_f9d4, false
  store i1 %v2_f9e8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_f9e8, label %dec_label_pc_f9f8, label %dec_label_pc_f9f0

dec_label_pc_f9f0:                                ; preds = %bb321
  %v2_f9f0 = icmp ugt i32 %v1_f998, 30
  store i1 %v2_f9f0, i1* %cpsr_c.global-to-local, align 1
  %v7_f9f0 = icmp eq i32 %v1_f998, 31
  store i1 %v7_f9f0, i1* %cpsr_z.global-to-local, align 1
  %v2_f9f4 = xor i1 %v2_f9f0, true
  %v3_f9f4 = or i1 %v7_f9f0, %v2_f9f4
  br i1 %v3_f9f4, label %dec_label_pc_f980, label %dec_label_pc_f9f8

dec_label_pc_f9f8:                                ; preds = %.thread10, %dec_label_pc_f9f0, %bb321
  %v7_f9f8 = icmp eq i32 %v1_f984, 100
  %.395 = zext i1 %v7_f9f8 to i32
  store i32 %.395, i32* %r3.global-to-local, align 4
  %v2_fa04 = icmp ugt i32 %v1_f998, 62
  store i1 %v2_fa04, i1* %cpsr_c.global-to-local, align 1
  %v7_fa04 = icmp eq i32 %v1_f998, 63
  store i1 %v7_fa04, i1* %cpsr_z.global-to-local, align 1
  %v2_fa08 = xor i1 %v2_fa04, true
  %v3_fa08 = or i1 %v7_fa04, %v2_fa08
  br i1 %v3_fa08, label %.thread15, label %bb324

.thread15:                                        ; preds = %dec_label_pc_f9f8
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa1c

bb324:                                            ; preds = %dec_label_pc_f9f8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa0c = icmp eq i1 %v7_f9f8, false
  store i1 %v2_fa0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa0c, label %dec_label_pc_fa1c, label %dec_label_pc_fa14

dec_label_pc_fa14:                                ; preds = %bb324
  %v2_fa14 = icmp ugt i32 %v1_f998, 125
  store i1 %v2_fa14, i1* %cpsr_c.global-to-local, align 1
  %v7_fa14 = icmp eq i32 %v1_f998, 126
  store i1 %v7_fa14, i1* %cpsr_z.global-to-local, align 1
  %v2_fa18 = xor i1 %v2_fa14, true
  %v3_fa18 = or i1 %v7_fa14, %v2_fa18
  br i1 %v3_fa18, label %dec_label_pc_f980, label %dec_label_pc_fa1c

dec_label_pc_fa1c:                                ; preds = %.thread15, %dec_label_pc_fa14, %bb324
  %v2_fa1c = icmp ugt i32 %v1_f984, 168
  store i1 %v2_fa1c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa1c = icmp eq i32 %v1_f984, 169
  store i1 %v7_fa1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa1c, label %bb325, label %dec_label_pc_fa28

bb325:                                            ; preds = %dec_label_pc_fa1c
  %v3_fa20 = icmp eq i32 %v1_f998, 255
  store i1 %v3_fa20, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_fa20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_fa20, label %dec_label_pc_f980, label %dec_label_pc_fa28

dec_label_pc_fa28:                                ; preds = %dec_label_pc_fa1c, %bb325
  %v7_fa28 = icmp eq i32 %v1_f984, 198
  %.396 = zext i1 %v7_fa28 to i32
  store i32 %.396, i32* %r3.global-to-local, align 4
  %v2_fa34 = icmp ugt i32 %v1_f998, 16
  store i1 %v2_fa34, i1* %cpsr_c.global-to-local, align 1
  %v7_fa34 = icmp eq i32 %v1_f998, 17
  store i1 %v7_fa34, i1* %cpsr_z.global-to-local, align 1
  %v2_fa38 = xor i1 %v2_fa34, true
  %v3_fa38 = or i1 %v7_fa34, %v2_fa38
  br i1 %v3_fa38, label %.thread21, label %bb328

.thread21:                                        ; preds = %dec_label_pc_fa28
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa4c

bb328:                                            ; preds = %dec_label_pc_fa28
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa3c = icmp eq i1 %v7_fa28, false
  store i1 %v2_fa3c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa3c, label %dec_label_pc_fa4c, label %dec_label_pc_fa44

dec_label_pc_fa44:                                ; preds = %bb328
  %v2_fa44 = icmp ugt i32 %v1_f998, 18
  store i1 %v2_fa44, i1* %cpsr_c.global-to-local, align 1
  %v7_fa44 = icmp eq i32 %v1_f998, 19
  store i1 %v7_fa44, i1* %cpsr_z.global-to-local, align 1
  %v2_fa48 = xor i1 %v2_fa44, true
  %v3_fa48 = or i1 %v7_fa44, %v2_fa48
  br i1 %v3_fa48, label %dec_label_pc_f980, label %dec_label_pc_fa4c

dec_label_pc_fa4c:                                ; preds = %.thread21, %dec_label_pc_fa44, %bb328
  %v2_fa4c = icmp ugt i32 %v1_f984, 222
  store i1 %v2_fa4c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa4c = icmp eq i32 %v1_f984, 223
  store i1 %v7_fa4c, i1* %cpsr_z.global-to-local, align 1
  %v2_fa50 = xor i1 %v7_fa4c, true
  %v3_fa50 = and i1 %v2_fa4c, %v2_fa50
  br i1 %v3_fa50, label %dec_label_pc_f980, label %dec_label_pc_fa54

dec_label_pc_fa54:                                ; preds = %dec_label_pc_fa4c
  %v7_fa54 = icmp eq i32 %v1_f984, 106
  %.397 = zext i1 %v7_fa54 to i32
  store i32 %.397, i32* @lr, align 4
  %v2_fa60 = icmp ugt i32 %v1_f998, 185
  store i1 %v2_fa60, i1* %cpsr_c.global-to-local, align 1
  %v7_fa60 = icmp eq i32 %v1_f998, 186
  store i1 %v7_fa60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa60, label %bb331, label %dec_label_pc_fa6c

bb331:                                            ; preds = %dec_label_pc_fa54
  %v2_fa54 = icmp ugt i32 %v1_f984, 105
  store i1 %v2_fa54, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fa54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa54, label %dec_label_pc_f980, label %dec_label_pc_fa6c

dec_label_pc_fa6c:                                ; preds = %dec_label_pc_fa54, %bb331
  %v2_fa6c = icmp ugt i32 %v1_f998, 186
  store i1 %v2_fa6c, i1* %cpsr_c.global-to-local, align 1
  %v7_fa6c = icmp eq i32 %v1_f998, 187
  store i1 %v7_fa6c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa6c, label %.thread26, label %.thread27

.thread27:                                        ; preds = %dec_label_pc_fa6c
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa80

.thread26:                                        ; preds = %dec_label_pc_fa6c
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa78 = icmp eq i1 %v7_fa54, false
  store i1 %v2_fa78, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa78, label %dec_label_pc_fa80, label %dec_label_pc_f980

dec_label_pc_fa80:                                ; preds = %.thread27, %.thread26
  %v2_fa80 = icmp ugt i32 %v1_f998, 184
  store i1 %v2_fa80, i1* %cpsr_c.global-to-local, align 1
  %v7_fa80 = icmp eq i32 %v1_f998, 185
  store i1 %v7_fa80, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa80, label %.thread30, label %.thread31

.thread31:                                        ; preds = %dec_label_pc_fa80
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fa94

.thread30:                                        ; preds = %dec_label_pc_fa80
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fa8c = icmp eq i1 %v7_fa54, false
  store i1 %v2_fa8c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fa8c, label %dec_label_pc_fa94, label %dec_label_pc_f980

dec_label_pc_fa94:                                ; preds = %.thread31, %.thread30
  %v2_fa94 = icmp ugt i32 %v1_f998, 183
  store i1 %v2_fa94, i1* %cpsr_c.global-to-local, align 1
  %v7_fa94 = icmp eq i32 %v1_f998, 184
  store i1 %v7_fa94, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fa94, label %.thread34, label %.thread35

.thread35:                                        ; preds = %dec_label_pc_fa94
  store i32 0, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_faa8

.thread34:                                        ; preds = %dec_label_pc_fa94
  store i32 %.397, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_faa0 = icmp eq i1 %v7_fa54, false
  store i1 %v2_faa0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_faa0, label %dec_label_pc_faa8, label %dec_label_pc_f980

dec_label_pc_faa8:                                ; preds = %.thread35, %.thread34
  %v2_faa8 = icmp ugt i32 %v1_f984, 149
  store i1 %v2_faa8, i1* %cpsr_c.global-to-local, align 1
  %v7_faa8 = icmp eq i32 %v1_f984, 150
  store i1 %v7_faa8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faa8, label %bb332, label %dec_label_pc_fab4

bb332:                                            ; preds = %dec_label_pc_faa8
  %v3_faac = icmp ugt i32 %v1_f998, 30
  store i1 %v3_faac, i1* %cpsr_c.global-to-local, align 1
  %v8_faac = icmp eq i32 %v1_f998, 31
  store i1 %v8_faac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faac, label %dec_label_pc_f980, label %dec_label_pc_fab4

dec_label_pc_fab4:                                ; preds = %dec_label_pc_faa8, %bb332
  %v2_fab4 = icmp ugt i32 %v1_f984, 48
  store i1 %v2_fab4, i1* %cpsr_c.global-to-local, align 1
  %v7_fab4 = icmp eq i32 %v1_f984, 49
  store i1 %v7_fab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fab4, label %bb333, label %dec_label_pc_fac0

bb333:                                            ; preds = %dec_label_pc_fab4
  %v3_fab8 = icmp ugt i32 %v1_f998, 50
  store i1 %v3_fab8, i1* %cpsr_c.global-to-local, align 1
  %v8_fab8 = icmp eq i32 %v1_f998, 51
  store i1 %v8_fab8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fab8, label %dec_label_pc_f980, label %dec_label_pc_fac0

dec_label_pc_fac0:                                ; preds = %dec_label_pc_fab4, %bb333
  %v2_fac0 = icmp ugt i32 %v1_f984, 177
  store i1 %v2_fac0, i1* %cpsr_c.global-to-local, align 1
  %v7_fac0 = icmp eq i32 %v1_f984, 178
  store i1 %v7_fac0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fac0, label %bb334, label %dec_label_pc_facc

bb334:                                            ; preds = %dec_label_pc_fac0
  %v3_fac4 = icmp ugt i32 %v1_f998, 61
  store i1 %v3_fac4, i1* %cpsr_c.global-to-local, align 1
  %v8_fac4 = icmp eq i32 %v1_f998, 62
  store i1 %v8_fac4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fac4, label %dec_label_pc_f980, label %dec_label_pc_facc

dec_label_pc_facc:                                ; preds = %dec_label_pc_fac0, %bb334
  %v2_facc = icmp ugt i32 %v1_f984, 159
  store i1 %v2_facc, i1* %cpsr_c.global-to-local, align 1
  %v7_facc = icmp eq i32 %v1_f984, 160
  store i1 %v7_facc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_facc, label %bb335, label %dec_label_pc_fad8

bb335:                                            ; preds = %dec_label_pc_facc
  %v3_fad0 = icmp ugt i32 %v1_f998, 12
  store i1 %v3_fad0, i1* %cpsr_c.global-to-local, align 1
  %v8_fad0 = icmp eq i32 %v1_f998, 13
  store i1 %v8_fad0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fad0, label %dec_label_pc_f980, label %dec_label_pc_fad8

dec_label_pc_fad8:                                ; preds = %dec_label_pc_facc, %bb335
  %v1_fad8 = add nsw i32 %v1_f984, -6
  store i32 %v1_fad8, i32* %r3.global-to-local, align 4
  %v2_fadc = icmp ugt i32 %v1_f984, 10
  store i1 %v2_fadc, i1* %cpsr_c.global-to-local, align 1
  %v7_fadc = icmp eq i32 %v1_f984, 11
  store i1 %v7_fadc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fadc, label %dec_label_pc_f980, label %bb336

bb336:                                            ; preds = %dec_label_pc_fad8
  %v3_fae0 = icmp ne i32 %v1_fad8, 0
  store i1 %v3_fae0, i1* %cpsr_c.global-to-local, align 1
  %v8_fae0 = icmp eq i32 %v1_fad8, 1
  store i1 %v8_fae0, i1* %cpsr_z.global-to-local, align 1
  %v2_fae4 = xor i1 %v3_fae0, true
  %v3_fae4 = or i1 %v8_fae0, %v2_fae4
  br i1 %v3_fae4, label %dec_label_pc_f980, label %dec_label_pc_fae8

dec_label_pc_fae8:                                ; preds = %bb336
  %v2_fae8 = icmp ugt i32 %v1_f984, 21
  store i1 %v2_fae8, i1* %cpsr_c.global-to-local, align 1
  %v7_fae8 = icmp eq i32 %v1_f984, 22
  store i1 %v7_fae8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fae8, label %dec_label_pc_f980, label %bb337

bb337:                                            ; preds = %dec_label_pc_fae8
  %v3_faec = icmp ugt i32 %v1_f984, 20
  store i1 %v3_faec, i1* %cpsr_c.global-to-local, align 1
  %v8_faec = icmp eq i32 %v1_f984, 21
  store i1 %v8_faec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faec, label %dec_label_pc_f980, label %dec_label_pc_faf4

dec_label_pc_faf4:                                ; preds = %bb337
  %v2_faf4 = icmp ugt i32 %v1_f984, 27
  store i1 %v2_faf4, i1* %cpsr_c.global-to-local, align 1
  %v7_faf4 = icmp eq i32 %v1_f984, 28
  store i1 %v7_faf4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_faf4, label %dec_label_pc_f980, label %bb338

bb338:                                            ; preds = %dec_label_pc_faf4
  %v3_faf8 = icmp ugt i32 %v1_f984, 25
  store i1 %v3_faf8, i1* %cpsr_c.global-to-local, align 1
  %v8_faf8 = icmp eq i32 %v1_f984, 26
  store i1 %v8_faf8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_faf8, label %dec_label_pc_f980, label %dec_label_pc_fb00

dec_label_pc_fb00:                                ; preds = %bb338
  %v2_fb00 = icmp ugt i32 %v1_f984, 29
  store i1 %v2_fb00, i1* %cpsr_c.global-to-local, align 1
  %v7_fb00 = icmp eq i32 %v1_f984, 30
  store i1 %v7_fb00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb00, label %dec_label_pc_f980, label %bb339

bb339:                                            ; preds = %dec_label_pc_fb00
  %v3_fb04 = icmp ugt i32 %v1_f984, 28
  store i1 %v3_fb04, i1* %cpsr_c.global-to-local, align 1
  %v8_fb04 = icmp eq i32 %v1_f984, 29
  store i1 %v8_fb04, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb04, label %dec_label_pc_f980, label %dec_label_pc_fb0c

dec_label_pc_fb0c:                                ; preds = %bb339
  %v2_fb0c = icmp ugt i32 %v1_f984, 54
  store i1 %v2_fb0c, i1* %cpsr_c.global-to-local, align 1
  %v7_fb0c = icmp eq i32 %v1_f984, 55
  store i1 %v7_fb0c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb0c, label %dec_label_pc_f980, label %bb340

bb340:                                            ; preds = %dec_label_pc_fb0c
  %v3_fb10 = icmp ugt i32 %v1_f984, 32
  store i1 %v3_fb10, i1* %cpsr_c.global-to-local, align 1
  %v8_fb10 = icmp eq i32 %v1_f984, 33
  store i1 %v8_fb10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb10, label %dec_label_pc_f980, label %dec_label_pc_fb18

dec_label_pc_fb18:                                ; preds = %bb340
  %v2_fb18 = icmp ugt i32 %v1_f984, 214
  store i1 %v2_fb18, i1* %cpsr_c.global-to-local, align 1
  %v7_fb18 = icmp eq i32 %v1_f984, 215
  store i1 %v7_fb18, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fb18, label %.thread50, label %bb341

bb341:                                            ; preds = %dec_label_pc_fb18
  %v3_fb1c = icmp ugt i32 %v1_f984, 213
  store i1 %v3_fb1c, i1* %cpsr_c.global-to-local, align 1
  %v8_fb1c = icmp eq i32 %v1_f984, 214
  store i1 %v8_fb1c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_fb1c, label %bb342, label %dec_label_pc_fb2c

.thread50:                                        ; preds = %dec_label_pc_fb18
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f980

bb342:                                            ; preds = %bb341
  store i32 1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_f980

dec_label_pc_fb2c:                                ; preds = %bb341
  store i32 0, i32* @r4, align 4
  %v5_fb38 = call i32 @llvm.bswap.i32(i32 %v0_f980)
  store i32 %v5_fb38, i32* %r3.global-to-local, align 4
  %tmp343 = and i32 %v0_f980, 65280
  %tmp344 = call i32 @llvm.bswap.i32(i32 %tmp343)
  %tmp345 = and i32 %v0_f980, 16711680
  %tmp346 = call i32 @llvm.bswap.i32(i32 %tmp345)
  %v3_fb44 = mul nuw i32 %v3_f9a0, 16777216
  %v3_fb48 = udiv i32 %tmp344, 256
  %v4_fb4c = mul nuw nsw i32 %tmp346, 256
  %tmp347 = and i32 %v0_f980, 32768
  %v3_fb50 = icmp ne i32 %tmp347, 0
  store i1 %v3_fb50, i1* %cpsr_c.global-to-local, align 1
  %v4_fb50 = udiv i32 %v5_fb38, 16777216
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* @r0, align 4
  %v5_fb50 = or i32 %v4_fb50, %v3_fb44
  %v5_fb4c = or i32 %v5_fb50, %v4_fb4c
  %v2_fb58 = or i32 %v5_fb4c, %v3_fb48
  store i32 %v2_fb58, i32* %r2.global-to-local, align 4
  %v5_fb5c = trunc i32 %v4_fb50 to i8
  store i8 %v5_fb5c, i8* @global_var_1d1cc.194, align 4
  store i32 20, i32* %r1.global-to-local, align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1c6.195 to i8*), align 4
  store i8 0, i8* bitcast (i32* @global_var_1d1c7.196 to i8*), align 4
  %v3_fb6c = call i32 @function_d0b8(i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32 20)
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %ip.global-to-local, align 4
  %sext6 = mul i32 %v3_fb6c, 16777216
  %v1_fb74 = sdiv i32 %sext6, 16777216
  store i32 %v1_fb74, i32* %r3.global-to-local, align 4
  %v2_fb78 = and i32 %v1_fb74, 128
  %v3_fb78 = icmp ne i32 %v2_fb78, 0
  store i1 %v3_fb78, i1* %cpsr_c.global-to-local, align 1
  %v4_fb78 = ashr i32 %sext6, 31
  store i32 %v4_fb78, i32* %r2.global-to-local, align 4
  %v1_fb7c = trunc i32 %v1_fb74 to i8
  store i8 %v1_fb7c, i8* bitcast (i32* @global_var_1d1c6.195 to i8*), align 4
  %v1_fb80 = trunc i32 %v4_fb78 to i8
  store i8 %v1_fb80, i8* bitcast (i32* @global_var_1d1c7.196 to i8*), align 4
  %v3_fb84 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_fb84, i32* %r0.global-to-local, align 4
  store i32 10, i32* %r1.global-to-local, align 4
  %v4_fb8c = call i32 @function_11c6c(i32 %v3_fb84, i32 10)
  store i32 %v4_fb8c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fb90 = icmp eq i32 %v4_fb8c, 0
  store i1 %v2_fb90, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fb90, label %.thread232, label %bb348

.thread232:                                       ; preds = %dec_label_pc_fb2c
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* @lr, align 4
  br label %.thread60.thread97

bb348:                                            ; preds = %dec_label_pc_fb2c
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* %r0.global-to-local, align 4
  store i32 23, i32* %r3.global-to-local, align 4
  %v1_fba0 = load i32, i32* @r4, align 4
  %v2_fba0 = trunc i32 %v1_fba0 to i8
  store i8 %v2_fba0, i8* inttoptr (i32 add (i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32 2) to i8*), align 2
  %v0_fba4.pr.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fba4.pr.pre, label %.thread60.thread97, label %.thread57

.thread57:                                        ; preds = %bb348
  %v1_fba4 = load i32, i32* %r3.global-to-local, align 4
  %v2_fba4 = trunc i32 %v1_fba4 to i8
  %v3_fba4 = load i32, i32* %r0.global-to-local, align 4
  %v4_fba4 = add i32 %v3_fba4, 3
  %v5_fba4 = inttoptr i32 %v4_fba4 to i8*
  store i8 %v2_fba4, i8* %v5_fba4, align 1
  %v0_fbac.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %r0.global-to-local, align 4
  br i1 %v0_fbac.pr.pr, label %.thread63, label %.thread65

.thread60.thread97:                               ; preds = %bb348, %.thread232
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %r0.global-to-local, align 4
  br label %.thread63

.thread63:                                        ; preds = %.thread57, %.thread60.thread97
  store i32 9, i32* %r3.global-to-local, align 4
  store i32 19, i32* %r2.global-to-local, align 4
  %v3_fbb4 = load i32, i32* @lr, align 4
  %v4_fbb4 = add i32 %v3_fbb4, 2
  %v5_fbb4 = inttoptr i32 %v4_fbb4 to i8*
  store i8 9, i8* %v5_fbb4, align 1
  %v0_fbb8.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_fbb8.pr.pr, label %bb349, label %.thread65

bb349:                                            ; preds = %.thread63
  %v1_fbb8 = load i32, i32* %r2.global-to-local, align 4
  %v2_fbb8 = trunc i32 %v1_fbb8 to i8
  %v3_fbb8 = load i32, i32* @lr, align 4
  %v4_fbb8 = add i32 %v3_fbb8, 3
  %v5_fbb8 = inttoptr i32 %v4_fbb8 to i8*
  store i8 %v2_fbb8, i8* %v5_fbb8, align 1
  br label %.thread65

.thread65:                                        ; preds = %.thread57, %.thread63, %bb349
  %v4_fbbc = load i8, i8* @global_var_1d1cc.194, align 1
  %v5_fbbc = sext i8 %v4_fbbc to i32
  store i32 %v5_fbbc, i32* %ip.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* %lr.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* @r1, align 4
  store i8 %v4_fbbc, i8* @global_var_1d1d4.197, align 4
  store i32 5120, i32* %r2.global-to-local, align 4
  store i32 20, i32* %r3.global-to-local, align 4
  %v0_fbd4 = load i32, i32* %sl.global-to-local, align 4
  %v1_fbd4 = trunc i32 %v0_fbd4 to i8
  store i8 %v1_fbd4, i8* bitcast (i32* @global_var_1d1e0.198 to i8*), align 4
  store i8 %v1_fbd4, i8* bitcast (i32* @global_var_1d1e1.199 to i8*), align 4
  %v5_fbdc = call i32 @function_d114(i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32 5120, i32 20)
  %sext = mul i32 %v5_fbdc, 16777216
  %v1_fbe4 = sdiv i32 %sext, 16777216
  %v3_fbec = ashr i32 %sext, 31
  %v2_fbf0 = load i32, i32* @global_var_1d1d0.151, align 4
  %v1_fbf8 = trunc i32 %v3_fbec to i8
  store i8 %v1_fbf8, i8* bitcast (i32* @global_var_1d1e1.199 to i8*), align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v3_fc0c = load i8, i8* @global_var_1d1cc.194, align 1
  %v4_fc0c = sext i8 %v3_fc0c to i32
  store i32 %v4_fc0c, i32* @r4, align 4
  %v2_fc10 = load i32, i32* @global_var_1d254.145, align 4
  store i32 %v2_fc10, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), i32* %ip.global-to-local, align 4
  %v1_fc20 = and i32 %v2_fbf0, 8388608
  %v2_fc20 = icmp ne i32 %v1_fc20, 0
  store i1 %v2_fc20, i1* %cpsr_c.global-to-local, align 1
  %v1_fc28 = trunc i32 %v1_fbe4 to i8
  store i8 %v1_fc28, i8* bitcast (i32* @global_var_1d1e0.198 to i8*), align 4
  store i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  store i32 %v2_fc3c, i32* %lr.global-to-local, align 4
  store i32 40, i32* %r2.global-to-local, align 4
  %v8_fc50 = call i32 @function_126c8(i32 %v2_fc10, i32* bitcast (i8** @global_var_1d1bc.147 to i32*), i32 40, i32 16384, i32 %v2_fc3c, i32 16)
  store i32 %v8_fc50, i32* %r0.global-to-local, align 4
  %v3_fc54 = load i32, i32* %stack_var_-52, align 4
  %v1_fc58 = add i32 %v3_fc54, 1
  store i32 %v1_fc58, i32* %r3.global-to-local, align 4
  %v3_fc5c = icmp ugt i32 %v1_fc58, 383
  store i1 %v3_fc5c, i1* %cpsr_c.global-to-local, align 1
  %v8_fc5c = icmp eq i32 %v1_fc58, 384
  store i1 %v8_fc5c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_fc58, i32* %stack_var_-52, align 4
  %v5_fc64 = icmp slt i32 %v1_fc58, 384
  br i1 %v5_fc64, label %.thread65.dec_label_pc_f950_crit_edge, label %dec_label_pc_fc68

.thread65.dec_label_pc_f950_crit_edge:            ; preds = %.thread65
  %v0_f950.pre = load i32, i32* %sl.global-to-local, align 4
  br label %dec_label_pc_f950

dec_label_pc_fc68:                                ; preds = %.thread65
  %v0_fc68 = load i32, i32* @r8, align 4
  br label %dec_label_pc_fc6c

dec_label_pc_fc6c:                                ; preds = %dec_label_pc_f930, %dec_label_pc_fc68
  %stack_var_-1872.1 = phi i32 [ %stack_var_-1872.0, %dec_label_pc_f930 ], [ %v0_fc68, %dec_label_pc_fc68 ]
  %v0_fc6c = call i32 @function_123ec()
  store i32 %v0_fc6c, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r4, align 4
  %v2_fc80 = inttoptr i32 %v0_fc6c to i32*
  %v6_fca8 = inttoptr i32 %v0_fce4 to i32*
  %v1_fcd4 = add i32 %v0_fce4, 16
  %v2_fcd4 = inttoptr i32 %v1_fcd4 to i32*
  %v4_fcf0 = ptrtoint i8* %stack_var_-1884.0 to i32
  %v1_fcf8 = add i32 %v4_fcf0, 1
  %v2_fcf8 = inttoptr i32 %v1_fcf8 to i8*
  %v1_fd1c = add i32 %v4_fcf0, 2
  %v2_fd1c = inttoptr i32 %v1_fd1c to i8*
  %v1_fd20 = add i32 %v4_fcf0, 3
  %v2_fd20 = inttoptr i32 %v1_fd20 to i8*
  %v4_fd24 = sext i8 %stack_var_-1876.0 to i32
  %v1_fe00 = bitcast i8* %stack_var_-1884.0 to i32*
  %v1_fce4 = add i32 %v0_fce4, 9
  %v2_fce4 = inttoptr i32 %v1_fce4 to i8*
  %v1_fd34 = add i32 %v4_fcf0, 13
  %v2_fd34 = inttoptr i32 %v1_fd34 to i8*
  %v1_fd58 = add i32 %v4_fcf0, 8
  %v2_fd58 = inttoptr i32 %v1_fd58 to i32*
  %v1_fd98 = add i32 %v0_fce4, 12
  %v2_fd98 = inttoptr i32 %v1_fd98 to i32*
  br label %dec_label_pc_fc78

dec_label_pc_fc78:                                ; preds = %dec_label_pc_fd58, %dec_label_pc_fd50, %dec_label_pc_fd48, %dec_label_pc_fd18, %dec_label_pc_fd08, %dec_label_pc_fce4, %dec_label_pc_fccc, %dec_label_pc_fd40, %dec_label_pc_fd34, %dec_label_pc_fcc4, %dec_label_pc_fdf8, %dec_label_pc_fc6c
  store i32 0, i32* %v2_fc80, align 4
  %v2_fc88 = load i32, i32* @global_var_1d254.145, align 4
  store i32 %v2_fc88, i32* %r0.global-to-local, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 1514, i32* %r2.global-to-local, align 4
  store i32 %v0_fce4, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v7_fca8 = call i32 @function_12668(i32 %v2_fc88, i32* %v6_fca8, i32 1514, i32 16384, i32 0, i32 0)
  store i32 %v7_fca8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fcac = icmp eq i32 %v7_fca8, 0
  store i1 %v2_fcac, i1* %cpsr_z.global-to-local, align 1
  %tmp350 = icmp slt i32 %v7_fca8, 1
  br i1 %tmp350, label %dec_label_pc_fe18, label %dec_label_pc_fcb4

dec_label_pc_fcb4:                                ; preds = %dec_label_pc_fc78
  store i32 %v0_fc6c, i32* %lr.global-to-local, align 4
  %v2_fcb8 = load i32, i32* %v2_fc80, align 4
  store i32 %v2_fcb8, i32* %r3.global-to-local, align 4
  %v2_fcbc = icmp ugt i32 %v2_fcb8, 10
  store i1 %v2_fcbc, i1* %cpsr_c.global-to-local, align 1
  %v7_fcbc = icmp eq i32 %v2_fcb8, 11
  store i1 %v7_fcbc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fcbc, label %dec_label_pc_fe18, label %dec_label_pc_fcc4

dec_label_pc_fcc4:                                ; preds = %dec_label_pc_fcb4
  %v2_fcc4 = icmp ugt i32 %v7_fca8, 38
  store i1 %v2_fcc4, i1* %cpsr_c.global-to-local, align 1
  %v7_fcc4 = icmp eq i32 %v7_fca8, 39
  store i1 %v7_fcc4, i1* %cpsr_z.global-to-local, align 1
  %v2_fcc8 = xor i1 %v2_fcc4, true
  %v3_fcc8 = or i1 %v7_fcc4, %v2_fcc8
  br i1 %v3_fcc8, label %dec_label_pc_fc78, label %dec_label_pc_fccc

dec_label_pc_fccc:                                ; preds = %dec_label_pc_fcc4
  store i32 %v0_fce4, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d234.50 to i32), i32* %r1.global-to-local, align 4
  %v3_fcd4 = load i32, i32* %v2_fcd4, align 4
  store i32 %v3_fcd4, i32* %r2.global-to-local, align 4
  %v2_fcd8 = load i32, i32* @global_var_1d234.50, align 4
  store i32 %v2_fcd8, i32* %r3.global-to-local, align 4
  %v3_fcdc = icmp uge i32 %v3_fcd4, %v2_fcd8
  store i1 %v3_fcdc, i1* %cpsr_c.global-to-local, align 1
  %v9_fcdc = icmp eq i32 %v3_fcd4, %v2_fcd8
  store i1 %v9_fcdc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fcdc, label %dec_label_pc_fce4, label %dec_label_pc_fc78

dec_label_pc_fce4:                                ; preds = %dec_label_pc_fccc
  %v3_fce4 = load i8, i8* %v2_fce4, align 1
  %v4_fce4 = zext i8 %v3_fce4 to i32
  store i32 %v4_fce4, i32* %r3.global-to-local, align 4
  %v2_fce8 = icmp ugt i8 %v3_fce4, 5
  store i1 %v2_fce8, i1* %cpsr_c.global-to-local, align 1
  %v7_fce8 = icmp eq i8 %v3_fce4, 6
  store i1 %v7_fce8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fce8, label %dec_label_pc_fcf0, label %dec_label_pc_fc78

dec_label_pc_fcf0:                                ; preds = %dec_label_pc_fce4
  store i32 %v4_fcf0, i32* %r3.global-to-local, align 4
  %v2_fcf4 = load i8, i8* %stack_var_-1884.0, align 1
  %v3_fcf4 = zext i8 %v2_fcf4 to i32
  store i32 %v3_fcf4, i32* %r2.global-to-local, align 4
  %v3_fcf8 = load i8, i8* %v2_fcf8, align 1
  %v4_fcf8 = zext i8 %v3_fcf8 to i32
  store i32 %v4_fcf8, i32* %r3.global-to-local, align 4
  %v4_fcfc = mul nuw nsw i32 %v4_fcf8, 256
  %v5_fcfc = or i32 %v4_fcfc, %v3_fcf4
  store i32 %v5_fcfc, i32* %r2.global-to-local, align 4
  %v2_fd00 = icmp ugt i32 %v5_fcfc, 5887
  store i1 %v2_fd00, i1* %cpsr_c.global-to-local, align 1
  %v7_fd00 = icmp eq i32 %v5_fcfc, 5888
  store i1 %v7_fd00, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fd00, label %dec_label_pc_fd18, label %dec_label_pc_fd08

dec_label_pc_fd08:                                ; preds = %dec_label_pc_fcf0
  store i32 4873, i32* %r3.global-to-local, align 4
  %v3_fd10 = icmp ugt i32 %v5_fcfc, 4872
  store i1 %v3_fd10, i1* %cpsr_c.global-to-local, align 1
  %v9_fd10 = icmp eq i32 %v5_fcfc, 4873
  store i1 %v9_fd10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd10, label %dec_label_pc_fd18, label %dec_label_pc_fc78

dec_label_pc_fd18:                                ; preds = %dec_label_pc_fd08, %dec_label_pc_fcf0
  store i32 %v4_fcf0, i32* %ip.global-to-local, align 4
  %v3_fd1c = load i8, i8* %v2_fd1c, align 1
  %v4_fd1c = zext i8 %v3_fd1c to i32
  store i32 %v4_fd1c, i32* %r3.global-to-local, align 4
  %v3_fd20 = load i8, i8* %v2_fd20, align 1
  %v4_fd20 = zext i8 %v3_fd20 to i32
  store i32 %v4_fd20, i32* %r2.global-to-local, align 4
  store i32 %v4_fd24, i32* %lr.global-to-local, align 4
  %v4_fd28 = mul nuw nsw i32 %v4_fd20, 256
  %v5_fd28 = or i32 %v4_fd28, %v4_fd1c
  store i32 %v5_fd28, i32* %r3.global-to-local, align 4
  %v3_fd2c = icmp uge i32 %v5_fd28, %v4_fd24
  store i1 %v3_fd2c, i1* %cpsr_c.global-to-local, align 1
  %v9_fd2c = icmp eq i32 %v5_fd28, %v4_fd24
  store i1 %v9_fd2c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fd2c, label %dec_label_pc_fd34, label %dec_label_pc_fc78

dec_label_pc_fd34:                                ; preds = %dec_label_pc_fd18
  %v3_fd34 = load i8, i8* %v2_fd34, align 1
  %v4_fd34 = zext i8 %v3_fd34 to i32
  store i32 %v4_fd34, i32* %r3.global-to-local, align 4
  %v1_fd38 = and i32 %v4_fd34, 2
  %v2_fd38 = icmp eq i32 %v1_fd38, 0
  store i1 %v2_fd38, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd38, label %dec_label_pc_fc78, label %dec_label_pc_fd40

dec_label_pc_fd40:                                ; preds = %dec_label_pc_fd34
  %v1_fd40 = and i32 %v4_fd34, 16
  %v2_fd40 = icmp eq i32 %v1_fd40, 0
  store i1 %v2_fd40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd40, label %dec_label_pc_fc78, label %dec_label_pc_fd48

dec_label_pc_fd48:                                ; preds = %dec_label_pc_fd40
  %v1_fd48 = and i32 %v4_fd34, 4
  %v2_fd48 = icmp eq i32 %v1_fd48, 0
  store i1 %v2_fd48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd48, label %dec_label_pc_fd50, label %dec_label_pc_fc78

dec_label_pc_fd50:                                ; preds = %dec_label_pc_fd48
  %tmp504 = urem i8 %v3_fd34, 2
  %v2_fd50 = icmp eq i8 %tmp504, 0
  store i1 %v2_fd50, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fd50, label %dec_label_pc_fd58, label %dec_label_pc_fc78

dec_label_pc_fd58:                                ; preds = %dec_label_pc_fd50
  %v3_fd58 = load i32, i32* %v2_fd58, align 4
  %v2_fd74 = call i32 @llvm.bswap.i32(i32 %v3_fd58)
  %v1_fd78 = add i32 %v2_fd74, -1
  %v1_fd7c = udiv i32 %v1_fd78, 256
  %v3_fd80 = and i32 %v1_fd7c, 65280
  %v1_fd84 = and i32 %v1_fd78, 65280
  store i32 %v1_fd84, i32* %r2.global-to-local, align 4
  %v3_fd88 = mul i32 %v1_fd78, 16777216
  %v4_fd8c = udiv i32 %v1_fd78, 16777216
  %v5_fd8c = or i32 %v3_fd80, %v4_fd8c
  store i32 %v5_fd8c, i32* %r1.global-to-local, align 4
  store i32 %v0_fce4, i32* %r3.global-to-local, align 4
  %v4_fd94 = mul nuw nsw i32 %v1_fd84, 256
  %v5_fd94 = or i32 %v4_fd94, %v3_fd88
  store i32 %v5_fd94, i32* %r0.global-to-local, align 4
  %v3_fd98 = load i32, i32* %v2_fd98, align 4
  store i32 %v3_fd98, i32* %r2.global-to-local, align 4
  %v2_fd9c = call i32 @llvm.bswap.i32(i32 %v1_fd78)
  store i32 %v2_fd9c, i32* %ip.global-to-local, align 4
  %v3_fda0 = icmp uge i32 %v2_fd9c, %v3_fd98
  store i1 %v3_fda0, i1* %cpsr_c.global-to-local, align 1
  %v9_fda0 = icmp eq i32 %v2_fd9c, %v3_fd98
  store i1 %v9_fda0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_fda0, label %dec_label_pc_fda8, label %dec_label_pc_fc78

dec_label_pc_fda8:                                ; preds = %dec_label_pc_fd58
  %v0_fda8 = load i32, i32* @r4, align 4
  %v2_fda8 = icmp ugt i32 %v0_fda8, 254
  store i1 %v2_fda8, i1* %cpsr_c.global-to-local, align 1
  %v7_fda8 = icmp eq i32 %v0_fda8, 255
  store i1 %v7_fda8, i1* %cpsr_z.global-to-local, align 1
  %v8_fdac = icmp sgt i32 %v0_fda8, 255
  br i1 %v8_fdac, label %dec_label_pc_fe18, label %dec_label_pc_fdb0

dec_label_pc_fdb0:                                ; preds = %dec_label_pc_fda8
  store i32 ptrtoint (i32* @global_var_1d250.143 to i32), i32* %lr.global-to-local, align 4
  %v3_fdb4 = mul i32 %v0_fda8, 256
  store i32 %v3_fdb4, i32* %r2.global-to-local, align 4
  %v2_fdb8 = load i32, i32* @global_var_1d250.143, align 4
  store i32 %v2_fdb8, i32* %r1.global-to-local, align 4
  %v2_fdc0 = mul i32 %v0_fda8, 288
  store i32 %v2_fdc0, i32* %r3.global-to-local, align 4
  %v2_fdc4 = add i32 %v2_fdb8, %v2_fdc0
  store i32 %v2_fdc4, i32* @r0, align 4
  %v1_fdc8 = add i32 %v2_fdc4, 12
  %v2_fdc8 = inttoptr i32 %v1_fdc8 to i32*
  %v3_fdc8 = load i32, i32* %v2_fdc8, align 4
  store i32 %v3_fdc8, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fdcc = icmp eq i32 %v3_fdc8, 0
  store i1 %v2_fdcc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fdcc, label %dec_label_pc_fdf8, label %dec_label_pc_fdd8.preheader

dec_label_pc_fdd8.preheader:                      ; preds = %dec_label_pc_fdb0
  %v2_fdd0 = add i32 %v2_fdc4, 288
  store i32 %v2_fdd0, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_fdd8

dec_label_pc_fdd8:                                ; preds = %dec_label_pc_fdd8.preheader, %dec_label_pc_fde4
  %v0_fde4 = phi i32 [ %v2_fdd0, %dec_label_pc_fdd8.preheader ], [ %v1_fdf0, %dec_label_pc_fde4 ]
  %v0_fdd8 = phi i32 [ %v0_fda8, %dec_label_pc_fdd8.preheader ], [ %v1_fdd8, %dec_label_pc_fde4 ]
  %v1_fdd8 = add i32 %v0_fdd8, 1
  store i32 %v1_fdd8, i32* @r4, align 4
  %v7_fddc = icmp eq i32 %v1_fdd8, 256
  br i1 %v7_fddc, label %dec_label_pc_fe18.loopexit, label %dec_label_pc_fde4

dec_label_pc_fde4:                                ; preds = %dec_label_pc_fdd8
  store i32 %v0_fde4, i32* @r0, align 4
  %v1_fde8 = add i32 %v0_fde4, 12
  %v2_fde8 = inttoptr i32 %v1_fde8 to i32*
  %v3_fde8 = load i32, i32* %v2_fde8, align 4
  %v2_fdec = icmp eq i32 %v3_fde8, 0
  %v1_fdf0 = add i32 %v0_fde4, 288
  store i32 %v1_fdf0, i32* %r3.global-to-local, align 4
  br i1 %v2_fdec, label %dec_label_pc_fdf8.loopexit, label %dec_label_pc_fdd8

dec_label_pc_fdf8.loopexit:                       ; preds = %dec_label_pc_fde4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fdf8

dec_label_pc_fdf8:                                ; preds = %dec_label_pc_fdf8.loopexit, %dec_label_pc_fdb0
  %v1_fdf8 = phi i32 [ %v0_fde4, %dec_label_pc_fdf8.loopexit ], [ %v2_fdc4, %dec_label_pc_fdb0 ]
  %v2_fdf8 = add i32 %v1_fdf8, 16
  %v3_fdf8 = inttoptr i32 %v2_fdf8 to i32*
  store i32 %v3_fd98, i32* %v3_fdf8, align 4
  store i32 %v4_fcf0, i32* %r1.global-to-local, align 4
  %v2_fe00 = load i32, i32* %v1_fe00, align 4
  store i32 %v2_fe00, i32* %r2.global-to-local, align 4
  %v1_fe04 = and i32 %v2_fe00, 128
  %v2_fe04 = icmp ne i32 %v1_fe04, 0
  store i1 %v2_fe04, i1* %cpsr_c.global-to-local, align 1
  %v3_fe04 = sdiv i32 %v2_fe00, 256
  store i32 %v3_fe04, i32* %r3.global-to-local, align 4
  %v1_fe08 = trunc i32 %v3_fe04 to i8
  %v2_fe08 = load i32, i32* @r0, align 4
  %v3_fe08 = add i32 %v2_fe08, 21
  %v4_fe08 = inttoptr i32 %v3_fe08 to i8*
  store i8 %v1_fe08, i8* %v4_fe08, align 1
  %v0_fe0c = load i32, i32* %r2.global-to-local, align 4
  %v1_fe0c = trunc i32 %v0_fe0c to i8
  %v2_fe0c = load i32, i32* @r0, align 4
  %v3_fe0c = add i32 %v2_fe0c, 20
  %v4_fe0c = inttoptr i32 %v3_fe0c to i8*
  store i8 %v1_fe0c, i8* %v4_fe0c, align 1
  %v0_fe10 = call i32 @function_f3b0()
  store i32 %v0_fe10, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_fc78

dec_label_pc_fe18.loopexit:                       ; preds = %dec_label_pc_fdd8
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_fe18

dec_label_pc_fe18:                                ; preds = %dec_label_pc_fda8, %dec_label_pc_fcb4, %dec_label_pc_fc78, %dec_label_pc_fe18.loopexit
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 4, i32* %r3.global-to-local, align 4
  store i32 1672, i32* %ip.global-to-local, align 4
  %v2_fe30455 = load i32, i32* @sp, align 4
  %v3_fe30456 = add i32 %v2_fe30455, 1672
  %v4_fe30457 = inttoptr i32 %v3_fe30456 to i32*
  store i32 0, i32* %v4_fe30457, align 4
  br label %dec_label_pc_fe20.dec_label_pc_fe20_crit_edge

dec_label_pc_fe20.dec_label_pc_fe20_crit_edge:    ; preds = %dec_label_pc_fe18, %dec_label_pc_fe20.dec_label_pc_fe20_crit_edge
  %v0_fe20.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fe30.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fe24 = add i32 %v0_fe20.pre, 4
  store i32 %v1_fe24, i32* %r3.global-to-local, align 4
  %v1_fe28 = add i32 %v0_fe20.pre, 1672
  store i32 %v1_fe28, i32* %ip.global-to-local, align 4
  %v7_fe2c = icmp eq i32 %v1_fe24, 128
  %v2_fe30 = load i32, i32* @sp, align 4
  %v3_fe30 = add i32 %v2_fe30, %v1_fe28
  %v4_fe30 = inttoptr i32 %v3_fe30 to i32*
  store i32 %v0_fe30.pre, i32* %v4_fe30, align 4
  br i1 %v7_fe2c, label %dec_label_pc_fe38, label %dec_label_pc_fe20.dec_label_pc_fe20_crit_edge

dec_label_pc_fe38:                                ; preds = %dec_label_pc_fe20.dec_label_pc_fe20_crit_edge
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe38 = load i32, i32* %r2.global-to-local, align 4
  %v1_fe40449 = add i32 %v0_fe38, 4
  store i32 %v1_fe40449, i32* %r3.global-to-local, align 4
  %v1_fe44450 = add i32 %v0_fe38, 1544
  store i32 %v1_fe44450, i32* %lr.global-to-local, align 4
  %v7_fe48451 = icmp eq i32 %v1_fe40449, 128
  %v2_fe4c452 = load i32, i32* @sp, align 4
  %v3_fe4c453 = add i32 %v2_fe4c452, %v1_fe44450
  %v4_fe4c454 = inttoptr i32 %v3_fe4c453 to i32*
  store i32 %v0_fe38, i32* %v4_fe4c454, align 4
  br i1 %v7_fe48451, label %dec_label_pc_fe54, label %dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge

dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge:    ; preds = %dec_label_pc_fe38, %dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge
  %v0_fe3c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_fe4c.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_fe40 = add i32 %v0_fe3c.pre, 4
  store i32 %v1_fe40, i32* %r3.global-to-local, align 4
  %v1_fe44 = add i32 %v0_fe3c.pre, 1544
  store i32 %v1_fe44, i32* %lr.global-to-local, align 4
  %v7_fe48 = icmp eq i32 %v1_fe40, 128
  %v2_fe4c = load i32, i32* @sp, align 4
  %v3_fe4c = add i32 %v2_fe4c, %v1_fe44
  %v4_fe4c = inttoptr i32 %v3_fe4c to i32*
  store i32 %v0_fe4c.pre, i32* %v4_fe4c, align 4
  br i1 %v7_fe48, label %dec_label_pc_fe54, label %dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge

dec_label_pc_fe54:                                ; preds = %dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge, %dec_label_pc_fe38
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v0_fe54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v0_fe54, i32* @r6, align 4
  store i32 %v0_fe54, i32* @r5, align 4
  store i32 %v0_fe54, i32* @r7, align 4
  store i32 %v0_fe54, i32* %stack_var_-52, align 4
  br label %dec_label_pc_fecc

dec_label_pc_fe68:                                ; preds = %dec_label_pc_fef4, %dec_label_pc_fecc
  %storemerge258 = phi i32 [ 30, %dec_label_pc_fecc ], [ 5, %dec_label_pc_fef4 ]
  store i32 %storemerge258, i32* %r1.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* %r2.global-to-local, align 4
  %v2_fe6c = load i32, i32* @global_var_1d1ec.131, align 4
  store i32 %v2_fe6c, i32* %r3.global-to-local, align 4
  %v1_fe70 = add i32 %v2_fee0, 8
  %v2_fe70 = inttoptr i32 %v1_fe70 to i32*
  %v3_fe70 = load i32, i32* %v2_fe70, align 4
  store i32 %v3_fe70, i32* %r2.global-to-local, align 4
  %v2_fe74 = sub i32 %v2_fe6c, %v3_fe70
  store i32 %v2_fe74, i32* %r3.global-to-local, align 4
  %v3_fe78 = icmp uge i32 %v2_fe74, %storemerge258
  store i1 %v3_fe78, i1* %cpsr_c.global-to-local, align 1
  %v9_fe78 = icmp eq i32 %v2_fe74, %storemerge258
  store i1 %v9_fe78, i1* %cpsr_z.global-to-local, align 1
  %v2_fe7c = xor i1 %v9_fe78, true
  %v3_fe7c = and i1 %v3_fe78, %v2_fe7c
  br i1 %v3_fe7c, label %dec_label_pc_ff48, label %dec_label_pc_fe80

dec_label_pc_fe80:                                ; preds = %dec_label_pc_fe68
  store i1 %v2_fee8, i1* %cpsr_c.global-to-local, align 1
  store i1 %v7_fee8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_fee8, label %dec_label_pc_ff18, label %dec_label_pc_fe88

dec_label_pc_fe88:                                ; preds = %dec_label_pc_fe80
  %v1_fe88 = add i32 %v2_fee0, 4
  %v2_fe88 = inttoptr i32 %v1_fe88 to i32*
  %v3_fe88 = load i32, i32* %v2_fe88, align 4
  store i32 %v3_fe88, i32* %ip.global-to-local, align 4
  %v3_fe8c = udiv i32 %v3_fe88, 32
  %v2_fe90 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_fe90, i32* %r0.global-to-local, align 4
  %v3_fe94 = mul nuw nsw i32 %v3_fe8c, 4
  %v2_fe98 = add i32 %v3_fe94, %v2_fe90
  store i32 %v2_fe98, i32* %r3.global-to-local, align 4
  %v1_fe9c = add i32 %v2_fe98, -184
  %v2_fe9c = inttoptr i32 %v1_fe9c to i32*
  %v3_fe9c = load i32, i32* %v2_fe9c, align 4
  %v1_fea0 = urem i32 %v3_fe88, 32
  store i32 %v1_fea0, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  %v7_fea8 = shl i32 1, %v1_fea0
  %v8_fea8 = or i32 %v3_fe9c, %v7_fea8
  store i32 %v8_fea8, i32* %r2.global-to-local, align 4
  store i32 %v8_fea8, i32* %v2_fe9c, align 4
  %v0_feb0 = load i32, i32* @r6, align 4
  %v1_feb0 = load i32, i32* %ip.global-to-local, align 4
  %v3_feb0 = icmp uge i32 %v0_feb0, %v1_feb0
  store i1 %v3_feb0, i1* %cpsr_c.global-to-local, align 1
  %v9_feb0 = icmp eq i32 %v0_feb0, %v1_feb0
  store i1 %v9_feb0, i1* %cpsr_z.global-to-local, align 1
  %v5_feb4 = icmp slt i32 %v0_feb0, %v1_feb0
  br i1 %v5_feb4, label %bb352, label %bb353

bb352:                                            ; preds = %dec_label_pc_fe88
  store i32 %v1_feb0, i32* @r6, align 4
  br label %bb353

bb353:                                            ; preds = %dec_label_pc_fef4, %dec_label_pc_ff88, %dec_label_pc_ff7c, %bb355, %dec_label_pc_fe88, %bb352
  %stack_var_-1868.0 = phi i32 [ %stack_var_-1868.2, %bb355 ], [ %stack_var_-1868.1, %dec_label_pc_ff88 ], [ %stack_var_-1868.1, %dec_label_pc_ff7c ], [ %stack_var_-1868.1, %bb352 ], [ %stack_var_-1868.1, %dec_label_pc_fe88 ], [ %stack_var_-1868.1, %dec_label_pc_fef4 ]
  %stack_var_-1872.2 = phi i32 [ %stack_var_-1872.4, %bb355 ], [ %stack_var_-1872.3, %dec_label_pc_ff88 ], [ %stack_var_-1872.3, %dec_label_pc_ff7c ], [ %stack_var_-1872.3, %bb352 ], [ %stack_var_-1872.3, %dec_label_pc_fe88 ], [ %stack_var_-1872.3, %dec_label_pc_fef4 ]
  %stack_var_-1884.1 = phi i8* [ %stack_var_-1884.3, %bb355 ], [ %stack_var_-1884.2, %dec_label_pc_ff88 ], [ %stack_var_-1884.2, %dec_label_pc_ff7c ], [ %stack_var_-1884.2, %bb352 ], [ %stack_var_-1884.2, %dec_label_pc_fe88 ], [ %stack_var_-1884.2, %dec_label_pc_fef4 ]
  %stack_var_-1880.1 = phi i32 [ %stack_var_-1880.3, %bb355 ], [ %stack_var_-1880.2, %dec_label_pc_ff88 ], [ %stack_var_-1880.2, %dec_label_pc_ff7c ], [ %stack_var_-1880.2, %bb352 ], [ %stack_var_-1880.2, %dec_label_pc_fe88 ], [ %stack_var_-1880.2, %dec_label_pc_fef4 ]
  %stack_var_-1876.1 = phi i8 [ %stack_var_-1876.3, %bb355 ], [ %stack_var_-1876.2, %dec_label_pc_ff88 ], [ %stack_var_-1876.2, %dec_label_pc_ff7c ], [ %stack_var_-1876.2, %bb352 ], [ %stack_var_-1876.2, %dec_label_pc_fe88 ], [ %stack_var_-1876.2, %dec_label_pc_fef4 ]
  %v3_feb8 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_feb8, i32* %r3.global-to-local, align 4
  %v1_febc = add i32 %v3_feb8, 1
  store i32 %v1_febc, i32* %r2.global-to-local, align 4
  %v2_fec0 = icmp ugt i32 %v1_febc, 254
  store i1 %v2_fec0, i1* %cpsr_c.global-to-local, align 1
  %v7_fec0 = icmp eq i32 %v1_febc, 255
  store i1 %v7_fec0, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_febc, i32* %stack_var_-52, align 4
  %v8_fec8 = icmp sgt i32 %v1_febc, 255
  br i1 %v8_fec8, label %dec_label_pc_ff94, label %dec_label_pc_fecc

dec_label_pc_fecc:                                ; preds = %bb353, %dec_label_pc_fe54
  %v0_fed8 = phi i32 [ %v0_fe54, %dec_label_pc_fe54 ], [ %v1_febc, %bb353 ]
  %stack_var_-1868.1 = phi i32 [ %v0_fc6c, %dec_label_pc_fe54 ], [ %stack_var_-1868.0, %bb353 ]
  %stack_var_-1872.3 = phi i32 [ %stack_var_-1872.1, %dec_label_pc_fe54 ], [ %stack_var_-1872.2, %bb353 ]
  %stack_var_-1884.2 = phi i8* [ %stack_var_-1884.0, %dec_label_pc_fe54 ], [ %stack_var_-1884.1, %bb353 ]
  %stack_var_-1880.2 = phi i32 [ %v0_fce4, %dec_label_pc_fe54 ], [ %stack_var_-1880.1, %bb353 ]
  %stack_var_-1876.2 = phi i8 [ %stack_var_-1876.0, %dec_label_pc_fe54 ], [ %stack_var_-1876.1, %bb353 ]
  store i32 ptrtoint (i32* @global_var_1d250.143 to i32), i32* %r0.global-to-local, align 4
  %v3_fed0 = mul i32 %v0_fed8, 256
  store i32 %v3_fed0, i32* %r3.global-to-local, align 4
  %v2_fed4 = load i32, i32* @global_var_1d250.143, align 4
  store i32 %v2_fed4, i32* %r1.global-to-local, align 4
  %v2_fedc = mul i32 %v0_fed8, 288
  store i32 %v2_fedc, i32* %r2.global-to-local, align 4
  %v2_fee0 = add i32 %v2_fed4, %v2_fedc
  store i32 %v2_fee0, i32* @r4, align 4
  %v1_fee4 = add i32 %v2_fee0, 12
  %v2_fee4 = inttoptr i32 %v1_fee4 to i32*
  %v3_fee4 = load i32, i32* %v2_fee4, align 4
  store i32 %v3_fee4, i32* %ip.global-to-local, align 4
  %v2_fee8 = icmp ne i32 %v3_fee4, 0
  store i1 %v2_fee8, i1* %cpsr_c.global-to-local, align 1
  %v7_fee8 = icmp eq i32 %v3_fee4, 1
  store i1 %v7_fee8, i1* %cpsr_z.global-to-local, align 1
  %v2_feec = xor i1 %v7_fee8, true
  %v3_feec = and i1 %v2_fee8, %v2_feec
  br i1 %v3_feec, label %dec_label_pc_fe68, label %dec_label_pc_fef4

dec_label_pc_fef4:                                ; preds = %dec_label_pc_fecc
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_fef4 = icmp eq i32 %v3_fee4, 0
  store i1 %v2_fef4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_fef4, label %bb353, label %dec_label_pc_fe68

dec_label_pc_ff04:                                ; preds = %dec_label_pc_f704
  store i32 ptrtoint (i32* @global_var_1d254.145 to i32), i32* %r2.global-to-local, align 4
  %v2_ff08 = load i32, i32* @global_var_1d254.145, align 4
  store i32 %v2_ff08, i32* %r0.global-to-local, align 4
  %v1_ff0c = call i32 @function_11e18(i32 %v2_ff08)
  store i32 %v1_ff0c, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_ff10

dec_label_pc_ff10:                                ; preds = %dec_label_pc_f6dc, %dec_label_pc_ff04
  %v0_ff10 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_ff10, i32* %r0.global-to-local, align 4
  %v1_ff14 = call i32 @function_131b4(i32 %v0_ff10)
  store i32 %v1_ff14, i32* %r0.global-to-local, align 4
  %v0_ff18.pre = load i32, i32* @r4, align 4
  %v1_ff34.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_ff18

dec_label_pc_ff18:                                ; preds = %dec_label_pc_fe80, %dec_label_pc_ff10
  %v1_ff34 = phi i32 [ %v1_ff34.pre, %dec_label_pc_ff10 ], [ 1, %dec_label_pc_fe80 ]
  %v0_ff18 = phi i32 [ %v0_ff18.pre, %dec_label_pc_ff10 ], [ %v2_fee0, %dec_label_pc_fe80 ]
  %stack_var_-1868.2 = phi i32 [ %tmp269, %dec_label_pc_ff10 ], [ %stack_var_-1868.1, %dec_label_pc_fe80 ]
  %stack_var_-1872.4 = phi i32 [ %tmp276, %dec_label_pc_ff10 ], [ %stack_var_-1872.3, %dec_label_pc_fe80 ]
  %stack_var_-1884.3 = phi i8* [ %tmp277, %dec_label_pc_ff10 ], [ %stack_var_-1884.2, %dec_label_pc_fe80 ]
  %stack_var_-1880.3 = phi i32 [ %tmp278, %dec_label_pc_ff10 ], [ %stack_var_-1880.2, %dec_label_pc_fe80 ]
  %stack_var_-1876.3 = phi i8 [ %tmp279, %dec_label_pc_ff10 ], [ %stack_var_-1876.2, %dec_label_pc_fe80 ]
  %v1_ff18 = add i32 %v0_ff18, 4
  %v2_ff18 = inttoptr i32 %v1_ff18 to i32*
  %v3_ff18 = load i32, i32* %v2_ff18, align 4
  store i32 %v3_ff18, i32* %r0.global-to-local, align 4
  %v3_ff1c = udiv i32 %v3_ff18, 32
  %v3_ff20 = mul nuw nsw i32 %v3_ff1c, 4
  %v2_ff24 = ptrtoint i32* %stack_var_-36 to i32
  store i32 %v2_ff24, i32* %lr.global-to-local, align 4
  %v2_ff28 = add i32 %v3_ff20, %v2_ff24
  store i32 %v2_ff28, i32* %r3.global-to-local, align 4
  %v1_ff2c = add i32 %v2_ff28, -312
  %v2_ff2c = inttoptr i32 %v1_ff2c to i32*
  %v3_ff2c = load i32, i32* %v2_ff2c, align 4
  %v1_ff30 = urem i32 %v3_ff18, 32
  store i32 %v1_ff30, i32* %r1.global-to-local, align 4
  %v7_ff34 = shl i32 %v1_ff34, %v1_ff30
  %v8_ff34 = or i32 %v3_ff2c, %v7_ff34
  store i32 %v8_ff34, i32* %r2.global-to-local, align 4
  %v0_ff38 = load i32, i32* @r5, align 4
  %v2_ff38 = sub i32 %v0_ff38, %v3_ff18
  %v3_ff38 = icmp uge i32 %v0_ff38, %v3_ff18
  store i1 %v3_ff38, i1* %cpsr_c.global-to-local, align 1
  %v4_ff38 = xor i32 %v0_ff38, %v3_ff18
  %v5_ff38 = xor i32 %v2_ff38, %v0_ff38
  %v6_ff38 = and i32 %v5_ff38, %v4_ff38
  %v7_ff38 = icmp slt i32 %v6_ff38, 0
  %v8_ff38 = icmp slt i32 %v2_ff38, 0
  %v9_ff38 = icmp eq i32 %v0_ff38, %v3_ff18
  store i1 %v9_ff38, i1* %cpsr_z.global-to-local, align 1
  %v2_ff3c = xor i1 %v8_ff38, %v7_ff38
  br i1 %v2_ff3c, label %bb354, label %bb355

bb354:                                            ; preds = %dec_label_pc_ff18
  store i32 %v3_ff18, i32* @r5, align 4
  br label %bb355

bb355:                                            ; preds = %dec_label_pc_ff18, %bb354
  store i32 %v8_ff34, i32* %v2_ff2c, align 4
  br label %bb353

dec_label_pc_ff48:                                ; preds = %dec_label_pc_fe68
  %v1_ff48 = add i32 %v2_fee0, 4
  %v2_ff48 = inttoptr i32 %v1_ff48 to i32*
  %v3_ff48 = load i32, i32* %v2_ff48, align 4
  store i32 %v3_ff48, i32* %r0.global-to-local, align 4
  %v1_ff4c = call i32 @function_11e18(i32 %v3_ff48)
  store i32 %v1_ff4c, i32* %r0.global-to-local, align 4
  %v0_ff50 = load i32, i32* @r4, align 4
  %v1_ff50 = add i32 %v0_ff50, 12
  %v2_ff50 = inttoptr i32 %v1_ff50 to i32*
  %v3_ff50 = load i32, i32* %v2_ff50, align 4
  store i32 %v3_ff50, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_ff58 = icmp ugt i32 %v3_ff50, 1
  store i1 %v2_ff58, i1* %cpsr_c.global-to-local, align 1
  %v7_ff58 = icmp eq i32 %v3_ff50, 2
  store i1 %v7_ff58, i1* %cpsr_z.global-to-local, align 1
  %v2_ff5c = add i32 %v0_ff50, 4
  %v3_ff5c = inttoptr i32 %v2_ff5c to i32*
  store i32 -1, i32* %v3_ff5c, align 4
  %v2_ff60 = xor i1 %v2_ff58, true
  %v3_ff60 = or i1 %v7_ff58, %v2_ff60
  br i1 %v3_ff60, label %dec_label_pc_ff88, label %dec_label_pc_ff64

dec_label_pc_ff64:                                ; preds = %dec_label_pc_ff48
  %v0_ff64 = load i32, i32* @r4, align 4
  %v1_ff64 = add i32 %v0_ff64, 284
  %v2_ff64 = inttoptr i32 %v1_ff64 to i8*
  %v3_ff64 = load i8, i8* %v2_ff64, align 1
  %v4_ff64 = zext i8 %v3_ff64 to i32
  %v1_ff68 = add nuw nsw i32 %v4_ff64, 1
  %v1_ff6c = urem i32 %v1_ff68, 256
  store i32 %v1_ff6c, i32* %r3.global-to-local, align 4
  %v2_ff70 = icmp ugt i32 %v1_ff6c, 9
  store i1 %v2_ff70, i1* %cpsr_c.global-to-local, align 1
  %v7_ff70 = icmp eq i32 %v1_ff6c, 10
  store i1 %v7_ff70, i1* %cpsr_z.global-to-local, align 1
  %v1_ff74 = trunc i32 %v1_ff68 to i8
  store i8 %v1_ff74, i8* %v2_ff64, align 1
  %v0_ff78 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_ff78, label %dec_label_pc_ff88, label %dec_label_pc_ff7c

dec_label_pc_ff7c:                                ; preds = %dec_label_pc_ff64
  %v0_ff7c = load i32, i32* @r4, align 4
  store i32 %v0_ff7c, i32* @r0, align 4
  %v0_ff80 = call i32 @function_f3b0()
  store i32 %v0_ff80, i32* %r0.global-to-local, align 4
  br label %bb353

dec_label_pc_ff88:                                ; preds = %dec_label_pc_ff64, %dec_label_pc_ff48
  %v0_ff88 = load i32, i32* @r7, align 4
  %v1_ff88 = load i32, i32* @r4, align 4
  %v2_ff88 = add i32 %v1_ff88, 12
  %v3_ff88 = inttoptr i32 %v2_ff88 to i32*
  store i32 %v0_ff88, i32* %v3_ff88, align 4
  %v0_ff8c = load i32, i32* @r7, align 4
  %v1_ff8c = trunc i32 %v0_ff8c to i8
  %v2_ff8c = load i32, i32* @r4, align 4
  %v3_ff8c = add i32 %v2_ff8c, 284
  %v4_ff8c = inttoptr i32 %v3_ff8c to i8*
  store i8 %v1_ff8c, i8* %v4_ff8c, align 1
  br label %bb353

dec_label_pc_ff94:                                ; preds = %bb353
  store i32 1, i32* %stack_var_-64, align 4
  %v0_ff9c = load i32, i32* @r6, align 4
  %v1_ff9c = load i32, i32* @r5, align 4
  %v2_ff9c = sub i32 %v0_ff9c, %v1_ff9c
  %v3_ff9c = icmp uge i32 %v0_ff9c, %v1_ff9c
  store i1 %v3_ff9c, i1* %cpsr_c.global-to-local, align 1
  %v4_ff9c = xor i32 %v1_ff9c, %v0_ff9c
  %v5_ff9c = xor i32 %v2_ff9c, %v0_ff9c
  %v6_ff9c = and i32 %v5_ff9c, %v4_ff9c
  %v7_ff9c = icmp slt i32 %v6_ff9c, 0
  %v8_ff9c = icmp slt i32 %v2_ff9c, 0
  %v9_ff9c = icmp eq i32 %v0_ff9c, %v1_ff9c
  store i1 %v9_ff9c, i1* %cpsr_z.global-to-local, align 1
  %v2_ffa0 = xor i1 %v8_ff9c, %v7_ff9c
  %v1_ff9c.v0_ff9c = select i1 %v2_ffa0, i32 %v1_ff9c, i32 %v0_ff9c
  %v2_ffb4 = ptrtoint i32* %stack_var_-348 to i32
  store i32 %v2_ffb4, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v2_ffbc = ptrtoint i32* %stack_var_-64 to i32
  store i32 %v2_ffbc, i32* %ip.global-to-local, align 4
  %v2_ffc0 = ptrtoint i32* %stack_var_-220 to i32
  store i32 %v2_ffc0, i32* %r1.global-to-local, align 4
  %v1_ffc4 = add i32 %v1_ff9c.v0_ff9c, 1
  store i32 %v1_ffc4, i32* %r0.global-to-local, align 4
  %v5_ffd0 = call i32 @function_12038(i32 %v1_ffc4, i32 %v2_ffc0, i32 %v2_ffb4, i32 0, i32 %v2_ffbc)
  store i32 0, i32* %r0.global-to-local, align 4
  %v2_ffd8 = call i32 @function_120e8(i32* null)
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* %lr.global-to-local, align 4
  store i32 %v2_ffd8, i32* @global_var_1d1ec.131, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %stack_var_-52, align 4
  %v2_10058 = ptrtoint i32* %stack_var_-36 to i32
  %v2_10200 = inttoptr i32 %stack_var_-1868.0 to i32*
  %v2_102a8 = ptrtoint i32* %stack_var_-41 to i32
  %v2_10a1c = ptrtoint i32* %stack_var_-84 to i32
  %v2_10a24 = ptrtoint i32* %stack_var_-73 to i32
  %v2_10150 = ptrtoint i32* %stack_var_-56 to i32
  %v2_1064c = ptrtoint i32* %stack_var_-48 to i32
  %v2_10c8c = ptrtoint i32* %stack_var_-92 to i32
  %v3_10c94 = bitcast i32* %stack_var_-92 to %sockaddr*
  %v2_10cec = ptrtoint i32* %stack_var_-38 to i32
  br label %dec_label_pc_1002c

dec_label_pc_fff4:                                ; preds = %dec_label_pc_10050, %dec_label_pc_10bcc
  %v0_10008 = phi i32 [ %v3_10044, %dec_label_pc_10050 ], [ %v0_fff4.pre, %dec_label_pc_10bcc ]
  %v3_fff4 = udiv i32 %v0_10008, 32
  %v3_fff8 = mul nuw nsw i32 %v3_fff4, 4
  store i32 %v2_10058, i32* @lr, align 4
  %v2_10000 = add i32 %v3_fff8, %v2_10058
  store i32 %v2_10000, i32* %r3.global-to-local, align 4
  %v1_10004 = add i32 %v2_10000, -184
  %v2_10004 = inttoptr i32 %v1_10004 to i32*
  %v3_10004 = load i32, i32* %v2_10004, align 4
  %v1_10008 = urem i32 %v0_10008, 32
  store i32 %v1_10008, i32* %r1.global-to-local, align 4
  %v2_1000c = add nsw i32 %v1_10008, -1
  %v3_1000c = shl i32 1, %v2_1000c
  %v4_1000c = and i32 %v3_1000c, %v3_10004
  %v5_1000c = icmp ne i32 %v4_1000c, 0
  store i1 %v5_1000c, i1* %cpsr_c.global-to-local, align 1
  %v6_1000c = lshr i32 %v3_10004, %v1_10008
  store i32 %v6_1000c, i32* %r2.global-to-local, align 4
  %v1_10010 = urem i32 %v6_1000c, 2
  %v2_10010 = icmp eq i32 %v1_10010, 0
  store i1 %v2_10010, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10010, label %dec_label_pc_10018, label %dec_label_pc_101dc.preheader

dec_label_pc_101dc.preheader:                     ; preds = %dec_label_pc_fff4
  %v0_101dc126 = load i32, i32* @r6, align 4
  %v1_101dc127 = add i32 %v0_101dc126, 12
  %v2_101dc128 = inttoptr i32 %v1_101dc127 to i32*
  %v3_101dc129 = load i32, i32* %v2_101dc128, align 4
  store i32 %v3_101dc129, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101e0125131 = icmp eq i32 %v3_101dc129, 0
  store i1 %v2_101e0125131, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101e0125131, label %dec_label_pc_10018, label %dec_label_pc_101e8.lr.ph

dec_label_pc_10018:                               ; preds = %dec_label_pc_101dc.loopexit, %dec_label_pc_101e0.backedge, %dec_label_pc_101dc.preheader, %dec_label_pc_fff4, %bb393, %dec_label_pc_10b18, %dec_label_pc_1002c, %dec_label_pc_10bf0, %dec_label_pc_10b5c
  %v3_10018 = load i32, i32* %stack_var_-52, align 4
  store i32 %v3_10018, i32* %r3.global-to-local, align 4
  %v1_1001c = add i32 %v3_10018, 1
  store i32 %v1_1001c, i32* %r2.global-to-local, align 4
  %v2_10020 = icmp ugt i32 %v1_1001c, 254
  store i1 %v2_10020, i1* %cpsr_c.global-to-local, align 1
  %v7_10020 = icmp eq i32 %v1_1001c, 255
  store i1 %v7_10020, i1* %cpsr_z.global-to-local, align 1
  store i32 %v1_1001c, i32* %stack_var_-52, align 4
  %v8_10028 = icmp sgt i32 %v1_1001c, 255
  br i1 %v8_10028, label %dec_label_pc_f930, label %dec_label_pc_1002c

dec_label_pc_1002c:                               ; preds = %dec_label_pc_10018, %dec_label_pc_ff94
  %v0_10038 = phi i32 [ %v1_1001c, %dec_label_pc_10018 ], [ 0, %dec_label_pc_ff94 ]
  store i32 ptrtoint (i32* @global_var_1d250.143 to i32), i32* %ip.global-to-local, align 4
  %v3_10030 = mul i32 %v0_10038, 256
  store i32 %v3_10030, i32* %r3.global-to-local, align 4
  %v2_10034 = load i32, i32* @global_var_1d250.143, align 4
  store i32 %v2_10034, i32* %r1.global-to-local, align 4
  %v2_1003c = mul i32 %v0_10038, 288
  store i32 %v2_1003c, i32* %r2.global-to-local, align 4
  %v2_10040 = add i32 %v2_10034, %v2_1003c
  store i32 %v2_10040, i32* @r6, align 4
  %v1_10044 = add i32 %v2_10040, 4
  %v2_10044 = inttoptr i32 %v1_10044 to i32*
  %v3_10044 = load i32, i32* %v2_10044, align 4
  store i32 %v3_10044, i32* @r4, align 4
  %v2_10048 = icmp eq i32 %v3_10044, -1
  store i1 %v2_10048, i1* %cpsr_c.global-to-local, align 1
  %v7_10048 = icmp eq i32 %v3_10044, -1
  store i1 %v7_10048, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10048, label %dec_label_pc_10018, label %dec_label_pc_10050

dec_label_pc_10050:                               ; preds = %dec_label_pc_1002c
  %v3_10050 = udiv i32 %v3_10044, 32
  %v3_10054 = mul nuw nsw i32 %v3_10050, 4
  store i32 %v2_10058, i32* %lr.global-to-local, align 4
  %v2_1005c = add i32 %v3_10054, %v2_10058
  store i32 %v2_1005c, i32* %r3.global-to-local, align 4
  %v1_10060 = add i32 %v2_1005c, -312
  %v2_10060 = inttoptr i32 %v1_10060 to i32*
  %v3_10060 = load i32, i32* %v2_10060, align 4
  %v1_10064 = urem i32 %v3_10044, 32
  store i32 %v1_10064, i32* %r1.global-to-local, align 4
  %v2_10068 = add nsw i32 %v1_10064, -1
  %v3_10068 = shl i32 1, %v2_10068
  %v4_10068 = and i32 %v3_10060, %v3_10068
  %v5_10068 = icmp ne i32 %v4_10068, 0
  store i1 %v5_10068, i1* %cpsr_c.global-to-local, align 1
  %v6_10068 = lshr i32 %v3_10060, %v1_10064
  store i32 %v6_10068, i32* %r2.global-to-local, align 4
  %v1_1006c = urem i32 %v6_10068, 2
  %v2_1006c = icmp eq i32 %v1_1006c, 0
  store i1 %v2_1006c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_1006c, label %dec_label_pc_fff4, label %dec_label_pc_10074

dec_label_pc_10074:                               ; preds = %dec_label_pc_10050
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 4, i32* %stack_var_-56, align 4
  store i32 %v2_1064c, i32* %r3.global-to-local, align 4
  store i32 %v2_10150, i32* %ip.global-to-local, align 4
  store i32 %v3_10044, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %stack_var_-48, align 4
  %v6_100a4 = call i32 @function_125e0(i32 %v3_10044, i32 1, i32 4, i32* nonnull %stack_var_-48, i32 %v2_10150)
  %v3_100a8 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_100a8, i32* %r3.global-to-local, align 4
  %v2_100ac = or i32 %v3_100a8, %v6_100a4
  store i32 %v2_100ac, i32* %r0.global-to-local, align 4
  %v4_100ac = icmp eq i32 %v2_100ac, 0
  store i1 %v4_100ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v4_100ac, label %dec_label_pc_100b4, label %dec_label_pc_10bf0

dec_label_pc_100b4:                               ; preds = %dec_label_pc_10074
  store i32 2, i32* %r2.global-to-local, align 4
  %v1_100b8 = load i32, i32* @r6, align 4
  %v2_100b8 = add i32 %v1_100b8, 12
  %v3_100b8 = inttoptr i32 %v2_100b8 to i32*
  store i32 2, i32* %v3_100b8, align 4
  %v0_100bc = call i32 @function_ebc8()
  store i32 %v0_100bc, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i8** @global_var_1d1e8.137 to i32), i32* %r3.global-to-local, align 4
  %v3_100c4 = load i8, i8* @global_var_1d1e9.138, align 1
  %v4_100c4 = zext i8 %v3_100c4 to i32
  store i32 %v4_100c4, i32* %r2.global-to-local, align 4
  %v2_100c8 = load i8, i8* bitcast (i8** @global_var_1d1e8.137 to i8*), align 4
  %v3_100c8 = zext i8 %v2_100c8 to i32
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v4_100cc = mul nuw nsw i32 %v4_100c4, 256
  %v5_100cc = or i32 %v3_100c8, %v4_100cc
  store i32 %v5_100cc, i32* %r1.global-to-local, align 4
  %v2_100d0 = call i32 @function_11ba0(i32 %v0_100bc, i32 %v5_100cc)
  store i32 ptrtoint (i32* @global_var_1d1b8.133 to i32), i32* %r3.global-to-local, align 4
  %v2_100d8 = load i32, i32* @global_var_1d1b8.133, align 4
  store i32 %v2_100d8, i32* %lr.global-to-local, align 4
  %v1_100e0 = load i32, i32* @r5, align 4
  %v9_100e0 = icmp eq i32 %v2_100d8, %v1_100e0
  store i1 %v9_100e0, i1* %cpsr_z.global-to-local, align 1
  store i1 false, i1* %cpsr_c.global-to-local, align 1
  %v3_100e4 = urem i32 %v2_100d0, 65536
  store i32 %v3_100e4, i32* %r0.global-to-local, align 4
  %v7_100e8 = icmp sgt i32 %v2_100d8, %v1_100e0
  br i1 %v7_100e8, label %dec_label_pc_100ec, label %dec_label_pc_10bc8

dec_label_pc_100ec:                               ; preds = %dec_label_pc_100b4
  %v2_100f0 = load i32, i32* @global_var_1d1e4.135, align 4
  store i32 %v2_100f0, i32* %r3.global-to-local, align 4
  store i32 %v1_100e0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1010c

dec_label_pc_100fc:                               ; preds = %dec_label_pc_10124, %dec_label_pc_1010c
  %v1_100fc = add i32 %v0_100fc, 1
  store i32 %v1_100fc, i32* %ip.global-to-local, align 4
  %v3_10100 = icmp uge i32 %v1_100fc, %v2_100d8
  store i1 %v3_10100, i1* %cpsr_c.global-to-local, align 1
  %v9_10100 = icmp eq i32 %v1_100fc, %v2_100d8
  store i1 %v9_10100, i1* %cpsr_z.global-to-local, align 1
  %v1_10104 = add i32 %v0_10104, 16
  store i32 %v1_10104, i32* %r3.global-to-local, align 4
  br i1 %v9_10100, label %dec_label_pc_10bc8, label %dec_label_pc_1010c

dec_label_pc_1010c:                               ; preds = %dec_label_pc_100fc, %dec_label_pc_100ec
  %v0_100fc = phi i32 [ %v1_100fc, %dec_label_pc_100fc ], [ %v1_100e0, %dec_label_pc_100ec ]
  %v0_10104 = phi i32 [ %v1_10104, %dec_label_pc_100fc ], [ %v2_100f0, %dec_label_pc_100ec ]
  store i32 %v0_10104, i32* %r1.global-to-local, align 4
  %v1_10110 = add i32 %v0_10104, 9
  %v2_10110 = inttoptr i32 %v1_10110 to i8*
  %v3_10110 = load i8, i8* %v2_10110, align 1
  %v4_10110 = zext i8 %v3_10110 to i32
  store i32 %v4_10110, i32* %r2.global-to-local, align 4
  %v1_10114 = add i32 %v0_10104, 8
  %v2_10114 = inttoptr i32 %v1_10114 to i8*
  %v3_10114 = load i8, i8* %v2_10114, align 1
  %v4_10114 = zext i8 %v3_10114 to i32
  %v4_10118 = mul nuw nsw i32 %v4_10110, 256
  %v5_10118 = or i32 %v4_10114, %v4_10118
  store i32 %v5_10118, i32* %r3.global-to-local, align 4
  %v3_1011c = icmp uge i32 %v5_10118, %v3_100e4
  store i1 %v3_1011c, i1* %cpsr_c.global-to-local, align 1
  %v9_1011c = icmp eq i32 %v5_10118, %v3_100e4
  store i1 %v9_1011c, i1* %cpsr_z.global-to-local, align 1
  %v2_10120 = xor i1 %v9_1011c, true
  %v3_10120 = and i1 %v3_1011c, %v2_10120
  br i1 %v3_10120, label %dec_label_pc_100fc, label %dec_label_pc_10124

dec_label_pc_10124:                               ; preds = %dec_label_pc_1010c
  %v1_10124 = add i32 %v0_10104, 10
  %v2_10124 = inttoptr i32 %v1_10124 to i8*
  %v3_10124 = load i8, i8* %v2_10124, align 1
  %v4_10124 = zext i8 %v3_10124 to i32
  store i32 %v4_10124, i32* %r3.global-to-local, align 4
  %v1_10128 = add i32 %v0_10104, 11
  %v2_10128 = inttoptr i32 %v1_10128 to i8*
  %v3_10128 = load i8, i8* %v2_10128, align 1
  %v4_10128 = zext i8 %v3_10128 to i32
  store i32 %v4_10128, i32* %r2.global-to-local, align 4
  %v4_1012c = mul nuw nsw i32 %v4_10128, 256
  %v5_1012c = or i32 %v4_1012c, %v4_10124
  store i32 %v5_1012c, i32* %r3.global-to-local, align 4
  %v3_10130 = icmp uge i32 %v5_1012c, %v3_100e4
  store i1 %v3_10130, i1* %cpsr_c.global-to-local, align 1
  %v9_10130 = icmp eq i32 %v5_1012c, %v3_100e4
  store i1 %v9_10130, i1* %cpsr_z.global-to-local, align 1
  %v2_10134 = xor i1 %v3_10130, true
  %v3_10134 = or i1 %v9_10130, %v2_10134
  br i1 %v3_10134, label %dec_label_pc_100fc, label %dec_label_pc_10bcc

dec_label_pc_1013c:                               ; preds = %dec_label_pc_103ac, %dec_label_pc_10380, %dec_label_pc_103c8
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10140 = call i32 @function_10e50(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10148 = call i32 @function_10e50(i32 32)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v3_10158 = call i32 @function_10d6c(i32 31, i32* nonnull %stack_var_-56)
  store i32 %v3_10158, i32* @r4, align 4
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 32, i32* %r0.global-to-local, align 4
  %v3_1016c = call i32 @function_10d6c(i32 32, i32* nonnull %stack_var_-56)
  %v3_10170 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_1016c, i32* @r5, align 4
  %v0_10178 = load i32, i32* @r4, align 4
  store i32 %v0_10178, i32* %r2.global-to-local, align 4
  %v1_1017c = add i32 %v3_10170, -1
  store i32 %v1_1017c, i32* %r3.global-to-local, align 4
  %v0_10180 = load i32, i32* @sb, align 4
  store i32 %v0_10180, i32* %r0.global-to-local, align 4
  %v0_10184 = load i32, i32* @r6, align 4
  %v1_10184 = add i32 %v0_10184, 24
  %v2_10184 = inttoptr i32 %v1_10184 to i32*
  %v3_10184 = load i32, i32* %v2_10184, align 4
  store i32 %v3_10184, i32* %r1.global-to-local, align 4
  %v4_10188 = call i32 @function_115d8(i32 %v0_10180, i32 %v3_10184, i32 %v0_10178, i32 %v1_1017c)
  store i32 %v4_10188, i32* %r0.global-to-local, align 4
  %v2_1018c = icmp eq i32 %v4_10188, -1
  store i1 %v2_1018c, i1* %cpsr_c.global-to-local, align 1
  %v7_1018c = icmp eq i32 %v4_10188, -1
  store i1 %v7_1018c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1018c, label %dec_label_pc_1019c, label %dec_label_pc_101c4

dec_label_pc_1019c:                               ; preds = %dec_label_pc_1013c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  %v3_1019c = load i32, i32* %stack_var_-56, align 4
  %v0_101a0 = load i32, i32* @r5, align 4
  store i32 %v0_101a0, i32* %r2.global-to-local, align 4
  %v1_101a4 = add i32 %v3_1019c, -1
  store i32 %v1_101a4, i32* %r3.global-to-local, align 4
  %v0_101a8 = load i32, i32* @sb, align 4
  store i32 %v0_101a8, i32* %r0.global-to-local, align 4
  %v0_101ac = load i32, i32* @r6, align 4
  %v1_101ac = add i32 %v0_101ac, 24
  %v2_101ac = inttoptr i32 %v1_101ac to i32*
  %v3_101ac = load i32, i32* %v2_101ac, align 4
  store i32 %v3_101ac, i32* %r1.global-to-local, align 4
  %v4_101b0 = call i32 @function_115d8(i32 %v0_101a8, i32 %v3_101ac, i32 %v0_101a0, i32 %v1_101a4)
  store i32 %v4_101b0, i32* %r0.global-to-local, align 4
  %v2_101b4 = icmp eq i32 %v4_101b0, -1
  store i1 %v2_101b4, i1* %cpsr_c.global-to-local, align 1
  %v7_101b4 = icmp eq i32 %v4_101b0, -1
  store i1 %v7_101b4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_101b4, label %dec_label_pc_10c0c, label %dec_label_pc_101c4

dec_label_pc_101c4:                               ; preds = %dec_label_pc_1019c, %dec_label_pc_1013c
  store i32 1, i32* @r7, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_101c8 = call i32 @function_10d98(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_101d0 = call i32 @function_10d98(i32 32)
  store i32 %v1_101d0, i32* %r0.global-to-local, align 4
  %v0_101d4 = load i32, i32* @r7, align 4
  %v3_101d4 = icmp eq i32 %v0_101d4, -1
  store i1 %v3_101d4, i1* %cpsr_c.global-to-local, align 1
  %v8_101d4 = icmp eq i32 %v0_101d4, -1
  store i1 %v8_101d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_101d4, label %dec_label_pc_101dc.loopexit, label %dec_label_pc_103e4

dec_label_pc_101dc.loopexit:                      ; preds = %dec_label_pc_10370, %dec_label_pc_106d0, %dec_label_pc_10260, %dec_label_pc_101c4, %dec_label_pc_10aac
  %v0_101dc = load i32, i32* @r6, align 4
  %v1_101dc = add i32 %v0_101dc, 12
  %v2_101dc = inttoptr i32 %v1_101dc to i32*
  %v3_101dc = load i32, i32* %v2_101dc, align 4
  store i32 %v3_101dc, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101e0125 = icmp eq i32 %v3_101dc, 0
  store i1 %v2_101e0125, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101e0125, label %dec_label_pc_10018, label %dec_label_pc_101e8.lr.ph

dec_label_pc_101e8.lr.ph:                         ; preds = %dec_label_pc_101dc.preheader, %dec_label_pc_101dc.loopexit
  %v0_101e8154 = phi i32 [ %v0_101dc, %dec_label_pc_101dc.loopexit ], [ %v0_101dc126, %dec_label_pc_101dc.preheader ]
  br label %dec_label_pc_101e8

dec_label_pc_101e8:                               ; preds = %dec_label_pc_101e0.backedge.thread, %dec_label_pc_101e0.backedge, %dec_label_pc_101e0.backedge.thread500, %dec_label_pc_101e8.lr.ph
  %v0_10b90 = phi i32 [ %v0_101e8154, %dec_label_pc_101e8.lr.ph ], [ %v0_101e8151, %dec_label_pc_101e0.backedge ], [ %v0_10260, %dec_label_pc_101e0.backedge.thread ], [ %v0_10260, %dec_label_pc_101e0.backedge.thread500 ]
  %v1_101e8 = add i32 %v0_10b90, 24
  %v2_101e8 = inttoptr i32 %v1_101e8 to i32*
  %v3_101e8 = load i32, i32* %v2_101e8, align 4
  store i32 %v3_101e8, i32* %r3.global-to-local, align 4
  %v2_101ec = icmp ugt i32 %v3_101e8, 255
  store i1 %v2_101ec, i1* %cpsr_c.global-to-local, align 1
  %v7_101ec = icmp eq i32 %v3_101e8, 256
  store i1 %v7_101ec, i1* %cpsr_z.global-to-local, align 1
  %.pre = add i32 %v0_10b90, 28
  store i32 %.pre, i32* @sb, align 4
  br i1 %v7_101ec, label %dec_label_pc_10b90, label %dec_label_pc_101f8

dec_label_pc_101f8:                               ; preds = %dec_label_pc_101e8, %dec_label_pc_10b90
  store i32 %stack_var_-1868.0, i32* %r0.global-to-local, align 4
  store i32 0, i32* @r5, align 4
  store i32 0, i32* %v2_10200, align 4
  %v0_10204 = load i32, i32* @r6, align 4
  %v1_10204 = add i32 %v0_10204, 24
  %v2_10204 = inttoptr i32 %v1_10204 to i32*
  %v3_10204 = load i32, i32* %v2_10204, align 4
  store i32 %v3_10204, i32* %r2.global-to-local, align 4
  %v0_10208 = load i32, i32* @sb, align 4
  %v2_10208 = add i32 %v0_10208, %v3_10204
  store i32 %v2_10208, i32* @r4, align 4
  %v1_1020c = add i32 %v0_10204, 4
  %v2_1020c = inttoptr i32 %v1_1020c to i32*
  %v3_1020c = load i32, i32* %v2_1020c, align 4
  store i32 %v3_1020c, i32* %r0.global-to-local, align 4
  %v1_10210 = sub i32 256, %v3_10204
  store i32 %v1_10210, i32* %r2.global-to-local, align 4
  store i32 %v2_10208, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_1021c = inttoptr i32 %v2_10208 to i32*
  %v5_1021c = call i32 @function_1263c(i32 %v3_1020c, i32* %v4_1021c, i32 %v1_10210, i32 16384)
  store i32 %v5_1021c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10220 = icmp eq i32 %v5_1021c, 0
  store i1 %v2_10220, i1* %cpsr_z.global-to-local, align 1
  %tmp358 = icmp slt i32 %v5_1021c, 1
  br i1 %tmp358, label %dec_label_pc_10b0c, label %dec_label_pc_10228

dec_label_pc_10228:                               ; preds = %dec_label_pc_101f8
  %v0_10228 = load i32, i32* @r5, align 4
  store i32 %v0_10228, i32* %r2.global-to-local, align 4
  store i32 65, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10230

dec_label_pc_10230:                               ; preds = %bb360, %dec_label_pc_10228
  %v3_10238 = phi i32 [ %v1_1023c, %bb360 ], [ %v0_10228, %dec_label_pc_10228 ]
  %v1_10230 = load i32, i32* @r4, align 4
  %v2_10230 = add i32 %v1_10230, %v3_10238
  %v3_10230 = inttoptr i32 %v2_10230 to i8*
  %v4_10230 = load i8, i8* %v3_10230, align 1
  %v6_10230 = zext i8 %v4_10230 to i32
  store i32 %v6_10230, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10234 = icmp eq i8 %v4_10230, 0
  store i1 %v2_10234, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10234, label %bb359, label %bb360

bb359:                                            ; preds = %dec_label_pc_10230
  %v1_10238 = load i32, i32* %r1.global-to-local, align 4
  %v2_10238 = trunc i32 %v1_10238 to i8
  store i8 %v2_10238, i8* %v3_10230, align 1
  %v0_1023c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb360

bb360:                                            ; preds = %dec_label_pc_10230, %bb359
  %v0_1023c = phi i32 [ %v3_10238, %dec_label_pc_10230 ], [ %v0_1023c.pre, %bb359 ]
  %v1_1023c = add i32 %v0_1023c, 1
  store i32 %v1_1023c, i32* %r2.global-to-local, align 4
  %v3_10240 = icmp uge i32 %v5_1021c, %v1_1023c
  store i1 %v3_10240, i1* %cpsr_c.global-to-local, align 1
  %v9_10240 = icmp eq i32 %v5_1021c, %v1_1023c
  store i1 %v9_10240, i1* %cpsr_z.global-to-local, align 1
  br i1 %v9_10240, label %dec_label_pc_10248, label %dec_label_pc_10230

dec_label_pc_10248:                               ; preds = %bb360, %dec_label_pc_10b10
  store i32 ptrtoint (i32* @global_var_1d1ec.131 to i32), i32* @lr, align 4
  %v0_1024c = load i32, i32* @r6, align 4
  %v1_1024c = add i32 %v0_1024c, 24
  %v2_1024c = inttoptr i32 %v1_1024c to i32*
  %v3_1024c = load i32, i32* %v2_1024c, align 4
  %v2_10250 = load i32, i32* @global_var_1d1ec.131, align 4
  store i32 %v2_10250, i32* %r3.global-to-local, align 4
  %v2_10254 = add i32 %v3_1024c, %v5_1021c
  store i32 %v2_10254, i32* %ip.global-to-local, align 4
  store i32 %v2_10254, i32* %v2_1024c, align 4
  %v0_1025c = load i32, i32* %r3.global-to-local, align 4
  %v1_1025c = load i32, i32* @r6, align 4
  %v2_1025c = add i32 %v1_1025c, 8
  %v3_1025c = inttoptr i32 %v2_1025c to i32*
  store i32 %v0_1025c, i32* %v3_1025c, align 4
  br label %dec_label_pc_10260

dec_label_pc_10260:                               ; preds = %dec_label_pc_107cc, %dec_label_pc_10248
  %v0_10260 = load i32, i32* @r6, align 4
  %v1_10260 = add i32 %v0_10260, 12
  %v2_10260 = inttoptr i32 %v1_10260 to i32*
  %v3_10260 = load i32, i32* %v2_10260, align 4
  store i32 %v3_10260, i32* %r2.global-to-local, align 4
  %v1_10264 = add i32 %v3_10260, -2
  store i32 %v1_10264, i32* %r3.global-to-local, align 4
  %v7_10268 = icmp eq i32 %v1_10264, 8
  store i1 %v7_10268, i1* %cpsr_z.global-to-local, align 1
  %v5_1026c = and i32 %v1_10264, 1073741824
  %v6_1026c = icmp ne i32 %v5_1026c, 0
  store i1 %v6_1026c, i1* %cpsr_c.global-to-local, align 1
  switch i32 %v3_10260, label %dec_label_pc_101dc.loopexit [
    i32 2, label %dec_label_pc_10298
    i32 3, label %dec_label_pc_10380
    i32 4, label %dec_label_pc_10428
    i32 5, label %dec_label_pc_104c0
    i32 6, label %dec_label_pc_10574
    i32 7, label %dec_label_pc_10958
    i32 8, label %dec_label_pc_107f0
    i32 9, label %dec_label_pc_108a4
    i32 10, label %dec_label_pc_10698
  ]

dec_label_pc_10298:                               ; preds = %dec_label_pc_10260
  %v1_1029c = add i32 %v0_10260, 24
  %v2_1029c = inttoptr i32 %v1_1029c to i32*
  %v3_1029c = load i32, i32* %v2_1029c, align 4
  store i32 %v3_1029c, i32* %ip.global-to-local, align 4
  %v0_102a0 = load i32, i32* @sb, align 4
  store i32 %v0_102a0, i32* @r5, align 4
  store i32 0, i32* @r7, align 4
  %v1_102ac = add i32 %v0_10260, 29
  store i32 %v1_102ac, i32* @r4, align 4
  store i32 -3, i32* %sl.global-to-local, align 4
  store i32 -4, i32* @r8, align 4
  %v3_102b8116 = icmp eq i32 %v3_1029c, 0
  store i1 %v3_102b8116, i1* %cpsr_c.global-to-local, align 1
  store i1 %v3_102b8116, i1* %cpsr_z.global-to-local, align 1
  %v6_102bc123 = icmp sgt i32 %v3_1029c, 0
  br i1 %v6_102bc123, label %dec_label_pc_102c0.preheader, label %dec_label_pc_10360

dec_label_pc_102b8.loopexit:                      ; preds = %dec_label_pc_102d8
  %v2_102e0 = add i32 %v1_102e0, 2
  store i32 %v2_102e0, i32* @r5, align 4
  %v2_102e4 = add i32 %v1_102e4, 2
  store i32 %v2_102e4, i32* @r4, align 4
  %v2_102e8 = add i32 %v1_102e8, 2
  store i32 %v2_102e8, i32* @r7, align 4
  %v3_102b8 = icmp uge i32 %v2_102e8, %v1_102b8
  store i1 %v3_102b8, i1* %cpsr_c.global-to-local, align 1
  %v9_102b8 = icmp eq i32 %v2_102e8, %v1_102b8
  store i1 %v9_102b8, i1* %cpsr_z.global-to-local, align 1
  %v6_102bc = icmp slt i32 %v2_102e8, %v1_102b8
  br i1 %v6_102bc, label %dec_label_pc_102c0.preheader, label %dec_label_pc_10360

dec_label_pc_102c0.preheader:                     ; preds = %dec_label_pc_10298, %dec_label_pc_102b8.loopexit
  %v6_10368193 = phi i32 [ %v6_10368194, %dec_label_pc_102b8.loopexit ], [ %v0_10260, %dec_label_pc_10298 ]
  %v1_102e8182 = phi i32 [ %v2_102e8, %dec_label_pc_102b8.loopexit ], [ 0, %dec_label_pc_10298 ]
  %v1_102e0180 = phi i32 [ %v2_102e0, %dec_label_pc_102b8.loopexit ], [ %v0_102a0, %dec_label_pc_10298 ]
  %v1_102cc178 = phi i32 [ %v1_102b8, %dec_label_pc_102b8.loopexit ], [ %v3_1029c, %dec_label_pc_10298 ]
  %v0_102c0176 = phi i32 [ %v2_102e4, %dec_label_pc_102b8.loopexit ], [ %v1_102ac, %dec_label_pc_10298 ]
  br label %dec_label_pc_102c0

dec_label_pc_102c0:                               ; preds = %dec_label_pc_102c0.preheader, %dec_label_pc_10340
  %v6_10368194 = phi i32 [ %v6_10368193, %dec_label_pc_102c0.preheader ], [ %v0_10348, %dec_label_pc_10340 ]
  %v1_102e8 = phi i32 [ %v1_102e8182, %dec_label_pc_102c0.preheader ], [ %v1_1034c, %dec_label_pc_10340 ]
  %v1_102e0 = phi i32 [ %v1_102e0180, %dec_label_pc_102c0.preheader ], [ %v1_10354, %dec_label_pc_10340 ]
  %v1_102b8 = phi i32 [ %v1_102cc178, %dec_label_pc_102c0.preheader ], [ %v3_10348, %dec_label_pc_10340 ]
  %v1_102e4 = phi i32 [ %v0_102c0176, %dec_label_pc_102c0.preheader ], [ %v1_10358, %dec_label_pc_10340 ]
  %v1_102c0 = add i32 %v1_102e4, -1
  %v2_102c0 = inttoptr i32 %v1_102c0 to i8*
  %v3_102c0 = load i8, i8* %v2_102c0, align 1
  %v4_102c0 = zext i8 %v3_102c0 to i32
  store i32 %v4_102c0, i32* %r3.global-to-local, align 4
  %v2_102c4 = icmp eq i8 %v3_102c0, -1
  store i1 %v2_102c4, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_102c4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102c4, label %dec_label_pc_102cc, label %dec_label_pc_10360

dec_label_pc_102cc:                               ; preds = %dec_label_pc_102c0
  %v0_102cc = load i32, i32* @sb, align 4
  %v2_102cc = add i32 %v0_102cc, %v1_102b8
  store i32 %v2_102cc, i32* %r2.global-to-local, align 4
  %v3_102d0 = icmp uge i32 %v2_102cc, %v1_102e4
  store i1 %v3_102d0, i1* %cpsr_c.global-to-local, align 1
  %v9_102d0 = icmp eq i32 %v2_102cc, %v1_102e4
  store i1 %v9_102d0, i1* %cpsr_z.global-to-local, align 1
  %v2_102d4 = xor i1 %v3_102d0, true
  %v3_102d4 = or i1 %v9_102d0, %v2_102d4
  br i1 %v3_102d4, label %dec_label_pc_10360, label %dec_label_pc_102d8

dec_label_pc_102d8:                               ; preds = %dec_label_pc_102cc
  %v1_102d8 = inttoptr i32 %v1_102e4 to i8*
  %v2_102d8 = load i8, i8* %v1_102d8, align 1
  %v3_102d8 = zext i8 %v2_102d8 to i32
  store i32 %v3_102d8, i32* %r3.global-to-local, align 4
  %v2_102dc = icmp eq i8 %v2_102d8, -1
  store i1 %v2_102dc, i1* %cpsr_c.global-to-local, align 1
  store i1 %v2_102dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_102dc, label %dec_label_pc_102b8.loopexit, label %dec_label_pc_102f0

dec_label_pc_102f0:                               ; preds = %dec_label_pc_102d8
  %v2_102f0 = icmp ugt i8 %v2_102d8, -4
  store i1 %v2_102f0, i1* %cpsr_c.global-to-local, align 1
  %v7_102f0 = icmp eq i8 %v2_102d8, -3
  store i1 %v7_102f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_102f0, label %dec_label_pc_10a0c, label %dec_label_pc_102f8

dec_label_pc_102f8:                               ; preds = %dec_label_pc_102f0
  %v1_102f8 = add i32 %v1_102e0, 2
  store i32 %v1_102f8, i32* %r3.global-to-local, align 4
  %v3_102fc = icmp uge i32 %v2_102cc, %v1_102f8
  store i1 %v3_102fc, i1* %cpsr_c.global-to-local, align 1
  %v9_102fc = icmp eq i32 %v2_102cc, %v1_102f8
  store i1 %v9_102fc, i1* %cpsr_z.global-to-local, align 1
  %v2_10300 = xor i1 %v3_102fc, true
  %v3_10300 = or i1 %v9_102fc, %v2_10300
  br i1 %v3_10300, label %dec_label_pc_10360, label %dec_label_pc_10304

dec_label_pc_10304:                               ; preds = %bb390, %dec_label_pc_10a60, %bb389, %dec_label_pc_102f8
  %v0_10304 = load i32, i32* @r4, align 4
  %v1_10304 = inttoptr i32 %v0_10304 to i8*
  %v2_10304 = load i8, i8* %v1_10304, align 1
  %v3_10304 = zext i8 %v2_10304 to i32
  store i32 %v3_10304, i32* %r3.global-to-local, align 4
  %v2_10308 = icmp ugt i8 %v2_10304, -4
  store i1 %v2_10308, i1* %cpsr_c.global-to-local, align 1
  %v7_10308 = icmp eq i8 %v2_10304, -3
  store i1 %v7_10308, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10308, label %bb361, label %dec_label_pc_10314

bb361:                                            ; preds = %dec_label_pc_10304
  %v1_1030c = load i32, i32* @r8, align 4
  %v2_1030c = trunc i32 %v1_1030c to i8
  store i8 %v2_1030c, i8* %v1_10304, align 1
  %v0_10310.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10310.pr, label %bb363, label %.dec_label_pc_10314_crit_edge

.dec_label_pc_10314_crit_edge:                    ; preds = %bb361
  %v0_10314.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10314

dec_label_pc_10314:                               ; preds = %.dec_label_pc_10314_crit_edge, %dec_label_pc_10304
  %v0_10314 = phi i32 [ %v0_10314.pre, %.dec_label_pc_10314_crit_edge ], [ %v3_10304, %dec_label_pc_10304 ]
  %v2_10314 = icmp ugt i32 %v0_10314, 250
  store i1 %v2_10314, i1* %cpsr_c.global-to-local, align 1
  %v7_10314 = icmp eq i32 %v0_10314, 251
  store i1 %v7_10314, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10314, label %bb362, label %bb363

bb362:                                            ; preds = %dec_label_pc_10314
  %v1_10318 = load i32, i32* %sl.global-to-local, align 4
  %v2_10318 = trunc i32 %v1_10318 to i8
  %v3_10318 = load i32, i32* @r4, align 4
  %v4_10318 = inttoptr i32 %v3_10318 to i8*
  store i8 %v2_10318, i8* %v4_10318, align 1
  br label %bb363

bb363:                                            ; preds = %bb361, %dec_label_pc_10314, %bb362
  %v0_1031c = load i32, i32* @r4, align 4
  %v1_1031c = add i32 %v0_1031c, 1
  %v2_1031c = inttoptr i32 %v1_1031c to i8*
  %v3_1031c = load i8, i8* %v2_1031c, align 1
  %v4_1031c = zext i8 %v3_1031c to i32
  store i32 %v4_1031c, i32* %r3.global-to-local, align 4
  %v2_10320 = icmp ugt i8 %v3_1031c, -4
  store i1 %v2_10320, i1* %cpsr_c.global-to-local, align 1
  %v7_10320 = icmp eq i8 %v3_1031c, -3
  store i1 %v7_10320, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10320, label %bb364, label %dec_label_pc_1032c

bb364:                                            ; preds = %bb363
  %v1_10324 = load i32, i32* @r8, align 4
  %v2_10324 = trunc i32 %v1_10324 to i8
  store i8 %v2_10324, i8* %v2_1031c, align 1
  %v0_10328.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10328.pr, label %bb366, label %.dec_label_pc_1032c_crit_edge

.dec_label_pc_1032c_crit_edge:                    ; preds = %bb364
  %v0_1032c.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_1032c

dec_label_pc_1032c:                               ; preds = %.dec_label_pc_1032c_crit_edge, %bb363
  %v0_1032c = phi i32 [ %v0_1032c.pre, %.dec_label_pc_1032c_crit_edge ], [ %v4_1031c, %bb363 ]
  %v2_1032c = icmp ugt i32 %v0_1032c, 250
  store i1 %v2_1032c, i1* %cpsr_c.global-to-local, align 1
  %v7_1032c = icmp eq i32 %v0_1032c, 251
  store i1 %v7_1032c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1032c, label %bb365, label %bb366

bb365:                                            ; preds = %dec_label_pc_1032c
  %v1_10330 = load i32, i32* %sl.global-to-local, align 4
  %v2_10330 = trunc i32 %v1_10330 to i8
  %v3_10330 = load i32, i32* @r4, align 4
  %v4_10330 = add i32 %v3_10330, 1
  %v5_10330 = inttoptr i32 %v4_10330 to i8*
  store i8 %v2_10330, i8* %v5_10330, align 1
  br label %bb366

bb366:                                            ; preds = %bb364, %dec_label_pc_1032c, %bb365
  %v0_10334 = load i32, i32* @r6, align 4
  %v1_10334 = add i32 %v0_10334, 4
  %v2_10334 = inttoptr i32 %v1_10334 to i32*
  %v3_10334 = load i32, i32* %v2_10334, align 4
  store i32 %v3_10334, i32* %r0.global-to-local, align 4
  %v0_10338 = load i32, i32* @r5, align 4
  br label %dec_label_pc_10340

dec_label_pc_10340:                               ; preds = %dec_label_pc_10b68, %bb366
  %v0_10344 = phi i32 [ %v3_10b80, %dec_label_pc_10b68 ], [ %v3_10334, %bb366 ]
  %storemerge5 = phi i32 [ %v2_10a24, %dec_label_pc_10b68 ], [ %v0_10338, %bb366 ]
  %storemerge = phi i32 [ 9, %dec_label_pc_10b68 ], [ 3, %bb366 ]
  store i32 %storemerge5, i32* %r1.global-to-local, align 4
  store i32 %storemerge, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10344 = inttoptr i32 %storemerge5 to i32*
  %v5_10344 = call i32 @function_1269c(i32 %v0_10344, i32* %v4_10344, i32 %storemerge, i32 16384)
  store i32 %v5_10344, i32* %r0.global-to-local, align 4
  %v0_10348 = load i32, i32* @r6, align 4
  %v1_10348 = add i32 %v0_10348, 24
  %v2_10348 = inttoptr i32 %v1_10348 to i32*
  %v3_10348 = load i32, i32* %v2_10348, align 4
  store i32 %v3_10348, i32* %ip.global-to-local, align 4
  %v0_1034c = load i32, i32* @r7, align 4
  %v1_1034c = add i32 %v0_1034c, 3
  store i32 %v1_1034c, i32* @r7, align 4
  %v3_10350 = icmp uge i32 %v1_1034c, %v3_10348
  store i1 %v3_10350, i1* %cpsr_c.global-to-local, align 1
  %v9_10350 = icmp eq i32 %v1_1034c, %v3_10348
  store i1 %v9_10350, i1* %cpsr_z.global-to-local, align 1
  %v0_10354 = load i32, i32* @r5, align 4
  %v1_10354 = add i32 %v0_10354, 3
  store i32 %v1_10354, i32* @r5, align 4
  %v0_10358 = load i32, i32* @r4, align 4
  %v1_10358 = add i32 %v0_10358, 3
  store i32 %v1_10358, i32* @r4, align 4
  %v5_1035c = icmp slt i32 %v1_1034c, %v3_10348
  br i1 %v5_1035c, label %dec_label_pc_102c0, label %dec_label_pc_10360

dec_label_pc_10360:                               ; preds = %dec_label_pc_102b8.loopexit, %dec_label_pc_102c0, %dec_label_pc_10340, %dec_label_pc_102f8, %dec_label_pc_102cc, %dec_label_pc_10298, %dec_label_pc_10a0c.dec_label_pc_10360.loopexit_crit_edge
  %v6_10368 = phi i32 [ %v0_10a30, %dec_label_pc_10a0c.dec_label_pc_10360.loopexit_crit_edge ], [ %v0_10260, %dec_label_pc_10298 ], [ %v6_10368194, %dec_label_pc_102c0 ], [ %v0_10348, %dec_label_pc_10340 ], [ %v6_10368194, %dec_label_pc_102f8 ], [ %v6_10368194, %dec_label_pc_102cc ], [ %v6_10368194, %dec_label_pc_102b8.loopexit ]
  %v0_10370.pre = phi i32 [ %v0_10360.pre.pre, %dec_label_pc_10a0c.dec_label_pc_10360.loopexit_crit_edge ], [ 0, %dec_label_pc_10298 ], [ %v1_102e8, %dec_label_pc_102c0 ], [ %v1_1034c, %dec_label_pc_10340 ], [ %v1_102e8, %dec_label_pc_102f8 ], [ %v1_102e8, %dec_label_pc_102cc ], [ %v2_102e8, %dec_label_pc_102b8.loopexit ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10360 = icmp eq i32 %v0_10370.pre, 0
  store i1 %v2_10360, i1* %cpsr_z.global-to-local, align 1
  %tmp367 = icmp slt i32 %v0_10370.pre, 1
  br i1 %tmp367, label %dec_label_pc_10370, label %.thread238

.thread238:                                       ; preds = %dec_label_pc_10360
  store i32 3, i32* %r2.global-to-local, align 4
  %v7_10368 = add i32 %v6_10368, 12
  %v8_10368 = inttoptr i32 %v7_10368 to i32*
  store i32 3, i32* %v8_10368, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10370:                               ; preds = %dec_label_pc_10360, %dec_label_pc_109ac, %dec_label_pc_108f8, %dec_label_pc_10844, %dec_label_pc_1071c, %dec_label_pc_10638, %dec_label_pc_10514, %dec_label_pc_1047c, %dec_label_pc_103e4
  %v0_10370 = phi i32 [ %v1_109a0, %dec_label_pc_109ac ], [ %v1_108ec, %dec_label_pc_108f8 ], [ %v1_10838, %dec_label_pc_10844 ], [ %v0_10714, %dec_label_pc_1071c ], [ %v1_1062c, %dec_label_pc_10638 ], [ %v1_10508, %dec_label_pc_10514 ], [ %v0_1047c, %dec_label_pc_1047c ], [ %v0_103e4, %dec_label_pc_103e4 ], [ %v0_10370.pre, %dec_label_pc_10360 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10370 = icmp eq i32 %v0_10370, 0
  store i1 %v2_10370, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10370, label %dec_label_pc_101dc.loopexit, label %dec_label_pc_10378

dec_label_pc_10378:                               ; preds = %dec_label_pc_10370
  %v0_10378 = load i32, i32* @r6, align 4
  %v1_10378 = add i32 %v0_10378, 24
  %v2_10378 = inttoptr i32 %v1_10378 to i32*
  %v3_10378 = load i32, i32* %v2_10378, align 4
  store i32 %v3_10378, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10380:                               ; preds = %dec_label_pc_10260
  %v1_10380 = add i32 %v0_10260, 24
  %v2_10380 = inttoptr i32 %v1_10380 to i32*
  %v3_10380 = load i32, i32* %v2_10380, align 4
  store i32 %v3_10380, i32* %r3.global-to-local, align 4
  %v1_10384 = add i32 %v3_10380, -1
  store i32 %v1_10384, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10388 = icmp eq i32 %v1_10384, 0
  store i1 %v2_10388, i1* %cpsr_z.global-to-local, align 1
  %v5_1038c = icmp sgt i32 %v1_10384, 0
  br i1 %v5_1038c, label %dec_label_pc_103b4, label %dec_label_pc_1013c

dec_label_pc_10394:                               ; preds = %bb368
  %v2_10394 = icmp ugt i8 %v3_103b8, 35
  store i1 %v2_10394, i1* %cpsr_c.global-to-local, align 1
  %v7_10394 = icmp eq i8 %v3_103b8, 36
  store i1 %v7_10394, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10394, label %dec_label_pc_103c8, label %dec_label_pc_1039c

dec_label_pc_1039c:                               ; preds = %dec_label_pc_10394
  %v2_1039c = icmp ugt i8 %v3_103b8, 34
  store i1 %v2_1039c, i1* %cpsr_c.global-to-local, align 1
  %v7_1039c = icmp eq i8 %v3_103b8, 35
  store i1 %v7_1039c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1039c, label %dec_label_pc_103c8, label %dec_label_pc_103a4

dec_label_pc_103a4:                               ; preds = %dec_label_pc_1039c
  %v2_103a4 = icmp ugt i8 %v3_103b8, 36
  store i1 %v2_103a4, i1* %cpsr_c.global-to-local, align 1
  %v7_103a4 = icmp eq i8 %v3_103b8, 37
  store i1 %v7_103a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103a4, label %dec_label_pc_103c8, label %dec_label_pc_103ac

dec_label_pc_103ac:                               ; preds = %dec_label_pc_103a4
  %v1_103ac = add i32 %v0_103c8, -1
  store i32 %v1_103ac, i32* %r0.global-to-local, align 4
  %v2_103ac = icmp ne i32 %v0_103c8, 0
  store i1 %v2_103ac, i1* %cpsr_c.global-to-local, align 1
  %v7_103ac = icmp eq i32 %v0_103c8, 1
  store i1 %v7_103ac, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103ac, label %dec_label_pc_1013c, label %dec_label_pc_103b4

dec_label_pc_103b4:                               ; preds = %dec_label_pc_10380, %dec_label_pc_103ac
  %v0_103c8 = phi i32 [ %v1_103ac, %dec_label_pc_103ac ], [ %v1_10384, %dec_label_pc_10380 ]
  %v2_103b4 = add i32 %v0_103c8, %v0_10260
  store i32 %v2_103b4, i32* %r3.global-to-local, align 4
  %v1_103b8 = add i32 %v2_103b4, 28
  %v2_103b8 = inttoptr i32 %v1_103b8 to i8*
  %v3_103b8 = load i8, i8* %v2_103b8, align 1
  %v4_103b8 = zext i8 %v3_103b8 to i32
  store i32 %v4_103b8, i32* %r3.global-to-local, align 4
  %v2_103bc = icmp ugt i8 %v3_103b8, 61
  store i1 %v2_103bc, i1* %cpsr_c.global-to-local, align 1
  %v7_103bc = icmp eq i8 %v3_103b8, 62
  store i1 %v7_103bc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103bc, label %dec_label_pc_103c8, label %bb368

bb368:                                            ; preds = %dec_label_pc_103b4
  %v3_103c0 = icmp ugt i8 %v3_103b8, 57
  store i1 %v3_103c0, i1* %cpsr_c.global-to-local, align 1
  %v8_103c0 = icmp eq i8 %v3_103b8, 58
  store i1 %v8_103c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_103c0, label %dec_label_pc_103c8, label %dec_label_pc_10394

dec_label_pc_103c8:                               ; preds = %dec_label_pc_103b4, %bb368, %dec_label_pc_103a4, %dec_label_pc_1039c, %dec_label_pc_10394
  %v1_103c8 = add i32 %v0_103c8, 1
  store i32 %v1_103c8, i32* @r7, align 4
  %v2_103cc = icmp eq i32 %v1_103c8, -1
  store i1 %v2_103cc, i1* %cpsr_c.global-to-local, align 1
  %v7_103cc = icmp eq i32 %v0_103c8, -2
  store i1 %v7_103cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_103cc, label %dec_label_pc_1013c, label %dec_label_pc_103d4

dec_label_pc_103d4:                               ; preds = %dec_label_pc_103c8
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_103d8 = call i32 @function_10d98(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_103e0 = call i32 @function_10d98(i32 32)
  store i32 %v1_103e0, i32* %r0.global-to-local, align 4
  %v0_103e4.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_103e4

dec_label_pc_103e4:                               ; preds = %dec_label_pc_101c4, %dec_label_pc_103d4
  %v0_103e4 = phi i32 [ %v0_101d4, %dec_label_pc_101c4 ], [ %v0_103e4.pre, %dec_label_pc_103d4 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_103e4 = icmp eq i32 %v0_103e4, 0
  store i1 %v2_103e4, i1* %cpsr_z.global-to-local, align 1
  %tmp369 = icmp slt i32 %v0_103e4, 1
  br i1 %tmp369, label %dec_label_pc_10370, label %dec_label_pc_103ec

dec_label_pc_103ec:                               ; preds = %dec_label_pc_103e4
  %v0_103ec = load i32, i32* @r6, align 4
  %v1_103ec = inttoptr i32 %v0_103ec to i32*
  %v2_103ec = load i32, i32* %v1_103ec, align 4
  store i32 %v2_103ec, i32* %r3.global-to-local, align 4
  %v1_103f0 = add i32 %v0_103ec, 4
  %v2_103f0 = inttoptr i32 %v1_103f0 to i32*
  %v3_103f0 = load i32, i32* %v2_103f0, align 4
  store i32 %v3_103f0, i32* %r0.global-to-local, align 4
  %v1_103f4 = add i32 %v2_103ec, 12
  %v2_103f4 = inttoptr i32 %v1_103f4 to i8*
  %v3_103f4 = load i8, i8* %v2_103f4, align 1
  %v4_103f4 = zext i8 %v3_103f4 to i32
  store i32 %v4_103f4, i32* %r2.global-to-local, align 4
  %v1_103f8 = inttoptr i32 %v2_103ec to i32*
  %v2_103f8 = load i32, i32* %v1_103f8, align 4
  store i32 %v2_103f8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10400 = inttoptr i32 %v2_103f8 to i32*
  %v5_10400 = call i32 @function_1269c(i32 %v3_103f0, i32* %v4_10400, i32 %v4_103f4, i32 16384)
  store i32 %v5_10400, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_10408 = load i32, i32* @r6, align 4
  %v1_10408 = add i32 %v0_10408, 4
  %v2_10408 = inttoptr i32 %v1_10408 to i32*
  %v3_10408 = load i32, i32* %v2_10408, align 4
  store i32 %v3_10408, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_10414 = call i32 @function_1269c(i32 %v3_10408, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 %v5_10414, i32* %r0.global-to-local, align 4
  %v0_10418 = load i32, i32* @r6, align 4
  %v1_10418 = add i32 %v0_10418, 24
  %v2_10418 = inttoptr i32 %v1_10418 to i32*
  %v3_10418 = load i32, i32* %v2_10418, align 4
  store i32 %v3_10418, i32* %ip.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  %v2_10420 = add i32 %v0_10418, 12
  %v3_10420 = inttoptr i32 %v2_10420 to i32*
  store i32 4, i32* %v3_10420, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10428:                               ; preds = %dec_label_pc_10260
  %v1_10428 = add i32 %v0_10260, 24
  %v2_10428 = inttoptr i32 %v1_10428 to i32*
  %v3_10428 = load i32, i32* %v2_10428, align 4
  store i32 %v3_10428, i32* %r3.global-to-local, align 4
  %v1_1042c = add i32 %v3_10428, -1
  store i32 %v1_1042c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10430 = icmp eq i32 %v1_1042c, 0
  store i1 %v2_10430, i1* %cpsr_z.global-to-local, align 1
  %v5_10434 = icmp sgt i32 %v1_1042c, 0
  br i1 %v5_10434, label %dec_label_pc_10454, label %dec_label_pc_10a6c

dec_label_pc_1043c:                               ; preds = %bb370
  %v2_1043c = icmp ugt i8 %v3_10458, 35
  store i1 %v2_1043c, i1* %cpsr_c.global-to-local, align 1
  %v7_1043c = icmp eq i8 %v3_10458, 36
  store i1 %v7_1043c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1043c, label %dec_label_pc_10468, label %dec_label_pc_10444

dec_label_pc_10444:                               ; preds = %dec_label_pc_1043c
  %v2_10444 = icmp ugt i8 %v3_10458, 34
  store i1 %v2_10444, i1* %cpsr_c.global-to-local, align 1
  %v7_10444 = icmp eq i8 %v3_10458, 35
  store i1 %v7_10444, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10444, label %dec_label_pc_10468, label %dec_label_pc_1044c

dec_label_pc_1044c:                               ; preds = %dec_label_pc_10444
  %v1_1044c = add i32 %v0_10468, -1
  store i32 %v1_1044c, i32* %r0.global-to-local, align 4
  %v2_1044c = icmp ne i32 %v0_10468, 0
  store i1 %v2_1044c, i1* %cpsr_c.global-to-local, align 1
  %v7_1044c = icmp eq i32 %v0_10468, 1
  store i1 %v7_1044c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1044c, label %dec_label_pc_10a6c, label %dec_label_pc_10454

dec_label_pc_10454:                               ; preds = %dec_label_pc_10428, %dec_label_pc_1044c
  %v0_10468 = phi i32 [ %v1_1044c, %dec_label_pc_1044c ], [ %v1_1042c, %dec_label_pc_10428 ]
  %v2_10454 = add i32 %v0_10468, %v0_10260
  store i32 %v2_10454, i32* %r3.global-to-local, align 4
  %v1_10458 = add i32 %v2_10454, 28
  %v2_10458 = inttoptr i32 %v1_10458 to i8*
  %v3_10458 = load i8, i8* %v2_10458, align 1
  %v4_10458 = zext i8 %v3_10458 to i32
  store i32 %v4_10458, i32* %r3.global-to-local, align 4
  %v2_1045c = icmp ugt i8 %v3_10458, 61
  store i1 %v2_1045c, i1* %cpsr_c.global-to-local, align 1
  %v7_1045c = icmp eq i8 %v3_10458, 62
  store i1 %v7_1045c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1045c, label %dec_label_pc_10468, label %bb370

bb370:                                            ; preds = %dec_label_pc_10454
  %v3_10460 = icmp ugt i8 %v3_10458, 57
  store i1 %v3_10460, i1* %cpsr_c.global-to-local, align 1
  %v8_10460 = icmp eq i8 %v3_10458, 58
  store i1 %v8_10460, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10460, label %dec_label_pc_10468, label %dec_label_pc_1043c

dec_label_pc_10468:                               ; preds = %dec_label_pc_10454, %bb370, %dec_label_pc_10444, %dec_label_pc_1043c
  %v1_10468 = add i32 %v0_10468, 1
  store i32 %v1_10468, i32* @r7, align 4
  %v2_1046c = icmp eq i32 %v1_10468, -1
  store i1 %v2_1046c, i1* %cpsr_c.global-to-local, align 1
  %v7_1046c = icmp eq i32 %v0_10468, -2
  store i1 %v7_1046c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1046c, label %dec_label_pc_10a6c, label %dec_label_pc_10474

dec_label_pc_10474:                               ; preds = %dec_label_pc_10468
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10478 = call i32 @function_10d98(i32 30)
  store i32 %v1_10478, i32* %r0.global-to-local, align 4
  %v0_1047c.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_1047c

dec_label_pc_1047c:                               ; preds = %dec_label_pc_10aac, %dec_label_pc_10474
  %v0_1047c = phi i32 [ %v0_10ab4, %dec_label_pc_10aac ], [ %v0_1047c.pre, %dec_label_pc_10474 ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1047c = icmp eq i32 %v0_1047c, 0
  store i1 %v2_1047c, i1* %cpsr_z.global-to-local, align 1
  %tmp371 = icmp slt i32 %v0_1047c, 1
  br i1 %tmp371, label %dec_label_pc_10370, label %dec_label_pc_10484

dec_label_pc_10484:                               ; preds = %dec_label_pc_1047c
  %v0_10484 = load i32, i32* @r6, align 4
  %v1_10484 = inttoptr i32 %v0_10484 to i32*
  %v2_10484 = load i32, i32* %v1_10484, align 4
  store i32 %v2_10484, i32* %r3.global-to-local, align 4
  %v1_10488 = add i32 %v0_10484, 4
  %v2_10488 = inttoptr i32 %v1_10488 to i32*
  %v3_10488 = load i32, i32* %v2_10488, align 4
  store i32 %v3_10488, i32* %r0.global-to-local, align 4
  %v1_1048c = add i32 %v2_10484, 13
  %v2_1048c = inttoptr i32 %v1_1048c to i8*
  %v3_1048c = load i8, i8* %v2_1048c, align 1
  %v4_1048c = zext i8 %v3_1048c to i32
  store i32 %v4_1048c, i32* %r2.global-to-local, align 4
  %v1_10490 = add i32 %v2_10484, 4
  %v2_10490 = inttoptr i32 %v1_10490 to i32*
  %v3_10490 = load i32, i32* %v2_10490, align 4
  store i32 %v3_10490, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10498 = inttoptr i32 %v3_10490 to i32*
  %v5_10498 = call i32 @function_1269c(i32 %v3_10488, i32* %v4_10498, i32 %v4_1048c, i32 16384)
  store i32 %v5_10498, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  %v0_104a0 = load i32, i32* @r6, align 4
  %v1_104a0 = add i32 %v0_104a0, 4
  %v2_104a0 = inttoptr i32 %v1_104a0 to i32*
  %v3_104a0 = load i32, i32* %v2_104a0, align 4
  store i32 %v3_104a0, i32* %r0.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v5_104ac = call i32 @function_1269c(i32 %v3_104a0, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 %v5_104ac, i32* %r0.global-to-local, align 4
  %v0_104b0 = load i32, i32* @r6, align 4
  %v1_104b0 = add i32 %v0_104b0, 24
  %v2_104b0 = inttoptr i32 %v1_104b0 to i32*
  %v3_104b0 = load i32, i32* %v2_104b0, align 4
  store i32 %v3_104b0, i32* %ip.global-to-local, align 4
  store i32 5, i32* %r2.global-to-local, align 4
  %v2_104b8 = add i32 %v0_104b0, 12
  %v3_104b8 = inttoptr i32 %v2_104b8 to i32*
  store i32 5, i32* %v3_104b8, align 4
  br label %dec_label_pc_107cc

dec_label_pc_104c0:                               ; preds = %dec_label_pc_10260
  %v1_104c0 = add i32 %v0_10260, 24
  %v2_104c0 = inttoptr i32 %v1_104c0 to i32*
  %v3_104c0 = load i32, i32* %v2_104c0, align 4
  store i32 %v3_104c0, i32* %ip.global-to-local, align 4
  %v1_104c4 = add i32 %v3_104c0, -1
  store i32 %v1_104c4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_104c8 = icmp eq i32 %v1_104c4, 0
  store i1 %v2_104c8, i1* %cpsr_z.global-to-local, align 1
  %v5_104cc = icmp sgt i32 %v1_104c4, 0
  br i1 %v5_104cc, label %dec_label_pc_104f4, label %dec_label_pc_101e0.backedge.thread

dec_label_pc_104d4:                               ; preds = %bb372
  %v2_104d4 = icmp ugt i8 %v3_104f8, 35
  store i1 %v2_104d4, i1* %cpsr_c.global-to-local, align 1
  %v7_104d4 = icmp eq i8 %v3_104f8, 36
  store i1 %v7_104d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104d4, label %dec_label_pc_10508, label %dec_label_pc_104dc

dec_label_pc_104dc:                               ; preds = %dec_label_pc_104d4
  %v2_104dc = icmp ugt i8 %v3_104f8, 34
  store i1 %v2_104dc, i1* %cpsr_c.global-to-local, align 1
  %v7_104dc = icmp eq i8 %v3_104f8, 35
  store i1 %v7_104dc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104dc, label %dec_label_pc_10508, label %dec_label_pc_104e4

dec_label_pc_104e4:                               ; preds = %dec_label_pc_104dc
  %v2_104e4 = icmp ugt i8 %v3_104f8, 36
  store i1 %v2_104e4, i1* %cpsr_c.global-to-local, align 1
  %v7_104e4 = icmp eq i8 %v3_104f8, 37
  store i1 %v7_104e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104e4, label %dec_label_pc_10508, label %dec_label_pc_104ec

dec_label_pc_104ec:                               ; preds = %dec_label_pc_104e4
  %v1_104ec = add i32 %v0_10508, -1
  store i32 %v1_104ec, i32* %r0.global-to-local, align 4
  %v2_104ec = icmp ne i32 %v0_10508, 0
  store i1 %v2_104ec, i1* %cpsr_c.global-to-local, align 1
  %v7_104ec = icmp eq i32 %v0_10508, 1
  store i1 %v7_104ec, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104ec, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_104f4

dec_label_pc_104f4:                               ; preds = %dec_label_pc_104c0, %dec_label_pc_104ec
  %v0_10508 = phi i32 [ %v1_104ec, %dec_label_pc_104ec ], [ %v1_104c4, %dec_label_pc_104c0 ]
  %v2_104f4 = add i32 %v0_10508, %v0_10260
  store i32 %v2_104f4, i32* %r3.global-to-local, align 4
  %v1_104f8 = add i32 %v2_104f4, 28
  %v2_104f8 = inttoptr i32 %v1_104f8 to i8*
  %v3_104f8 = load i8, i8* %v2_104f8, align 1
  %v4_104f8 = zext i8 %v3_104f8 to i32
  store i32 %v4_104f8, i32* %r3.global-to-local, align 4
  %v2_104fc = icmp ugt i8 %v3_104f8, 61
  store i1 %v2_104fc, i1* %cpsr_c.global-to-local, align 1
  %v7_104fc = icmp eq i8 %v3_104f8, 62
  store i1 %v7_104fc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_104fc, label %dec_label_pc_10508, label %bb372

bb372:                                            ; preds = %dec_label_pc_104f4
  %v3_10500 = icmp ugt i8 %v3_104f8, 57
  store i1 %v3_10500, i1* %cpsr_c.global-to-local, align 1
  %v8_10500 = icmp eq i8 %v3_104f8, 58
  store i1 %v8_10500, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10500, label %dec_label_pc_10508, label %dec_label_pc_104d4

dec_label_pc_10508:                               ; preds = %dec_label_pc_104f4, %bb372, %dec_label_pc_104e4, %dec_label_pc_104dc, %dec_label_pc_104d4
  %v1_10508 = add i32 %v0_10508, 1
  store i32 %v1_10508, i32* @r7, align 4
  %v2_1050c = icmp eq i32 %v1_10508, -1
  store i1 %v2_1050c, i1* %cpsr_c.global-to-local, align 1
  %v7_1050c = icmp eq i32 %v0_10508, -2
  store i1 %v7_1050c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1050c, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_10514

dec_label_pc_10514:                               ; preds = %dec_label_pc_10508
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10514 = icmp eq i32 %v1_10508, 0
  store i1 %v2_10514, i1* %cpsr_z.global-to-local, align 1
  %tmp373 = icmp slt i32 %v1_10508, 1
  br i1 %tmp373, label %dec_label_pc_10370, label %dec_label_pc_1051c

dec_label_pc_1051c:                               ; preds = %dec_label_pc_10514
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10520 = call i32 @function_10e50(i32 7)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 7, i32* %r0.global-to-local, align 4
  %v3_10530 = call i32 @function_10d6c(i32 7, i32* nonnull %stack_var_-56)
  store i32 %v3_10530, i32* %r0.global-to-local, align 4
  %v3_10534 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10534, i32* %r2.global-to-local, align 4
  store i32 %v3_10530, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10540 = load i32, i32* @r6, align 4
  %v1_10540 = add i32 %v0_10540, 4
  %v2_10540 = inttoptr i32 %v1_10540 to i32*
  %v3_10540 = load i32, i32* %v2_10540, align 4
  store i32 %v3_10540, i32* %r0.global-to-local, align 4
  %v4_10544 = inttoptr i32 %v3_10530 to i32*
  %v5_10544 = call i32 @function_1269c(i32 %v3_10540, i32* %v4_10544, i32 %v3_10534, i32 16384)
  store i32 %v5_10544, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10554 = load i32, i32* @r6, align 4
  %v1_10554 = add i32 %v0_10554, 4
  %v2_10554 = inttoptr i32 %v1_10554 to i32*
  %v3_10554 = load i32, i32* %v2_10554, align 4
  store i32 %v3_10554, i32* %r0.global-to-local, align 4
  %v5_10558 = call i32 @function_1269c(i32 %v3_10554, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 7, i32* %r0.global-to-local, align 4
  %v1_10560 = call i32 @function_10d98(i32 7)
  store i32 %v1_10560, i32* %r0.global-to-local, align 4
  %v0_10564 = load i32, i32* @r6, align 4
  %v1_10564 = add i32 %v0_10564, 24
  %v2_10564 = inttoptr i32 %v1_10564 to i32*
  %v3_10564 = load i32, i32* %v2_10564, align 4
  store i32 %v3_10564, i32* %ip.global-to-local, align 4
  store i32 6, i32* %r2.global-to-local, align 4
  %v2_1056c = add i32 %v0_10564, 12
  %v3_1056c = inttoptr i32 %v2_1056c to i32*
  store i32 6, i32* %v3_1056c, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10574:                               ; preds = %dec_label_pc_10260
  %v1_10574 = add i32 %v0_10260, 24
  %v2_10574 = inttoptr i32 %v1_10574 to i32*
  %v3_10574 = load i32, i32* %v2_10574, align 4
  store i32 %v3_10574, i32* %ip.global-to-local, align 4
  %v1_10578 = add i32 %v3_10574, -1
  store i32 %v1_10578, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1057c = icmp eq i32 %v1_10578, 0
  store i1 %v2_1057c, i1* %cpsr_z.global-to-local, align 1
  %v5_10580 = icmp sgt i32 %v1_10578, 0
  br i1 %v5_10580, label %dec_label_pc_10618, label %dec_label_pc_101e0.backedge.thread

dec_label_pc_105f8:                               ; preds = %bb374
  %v2_105f8 = icmp ugt i8 %v3_1061c, 35
  store i1 %v2_105f8, i1* %cpsr_c.global-to-local, align 1
  %v7_105f8 = icmp eq i8 %v3_1061c, 36
  store i1 %v7_105f8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_105f8, label %dec_label_pc_1062c, label %dec_label_pc_10600

dec_label_pc_10600:                               ; preds = %dec_label_pc_105f8
  %v2_10600 = icmp ugt i8 %v3_1061c, 34
  store i1 %v2_10600, i1* %cpsr_c.global-to-local, align 1
  %v7_10600 = icmp eq i8 %v3_1061c, 35
  store i1 %v7_10600, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10600, label %dec_label_pc_1062c, label %dec_label_pc_10608

dec_label_pc_10608:                               ; preds = %dec_label_pc_10600
  %v2_10608 = icmp ugt i8 %v3_1061c, 36
  store i1 %v2_10608, i1* %cpsr_c.global-to-local, align 1
  %v7_10608 = icmp eq i8 %v3_1061c, 37
  store i1 %v7_10608, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10608, label %dec_label_pc_1062c, label %dec_label_pc_10610

dec_label_pc_10610:                               ; preds = %dec_label_pc_10608
  %v1_10610 = add i32 %v0_1062c, -1
  store i32 %v1_10610, i32* %r0.global-to-local, align 4
  %v2_10610 = icmp ne i32 %v0_1062c, 0
  store i1 %v2_10610, i1* %cpsr_c.global-to-local, align 1
  %v7_10610 = icmp eq i32 %v0_1062c, 1
  store i1 %v7_10610, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10610, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_10618

dec_label_pc_10618:                               ; preds = %dec_label_pc_10574, %dec_label_pc_10610
  %v0_1062c = phi i32 [ %v1_10610, %dec_label_pc_10610 ], [ %v1_10578, %dec_label_pc_10574 ]
  %v2_10618 = add i32 %v0_1062c, %v0_10260
  store i32 %v2_10618, i32* %r3.global-to-local, align 4
  %v1_1061c = add i32 %v2_10618, 28
  %v2_1061c = inttoptr i32 %v1_1061c to i8*
  %v3_1061c = load i8, i8* %v2_1061c, align 1
  %v4_1061c = zext i8 %v3_1061c to i32
  store i32 %v4_1061c, i32* %r3.global-to-local, align 4
  %v2_10620 = icmp ugt i8 %v3_1061c, 61
  store i1 %v2_10620, i1* %cpsr_c.global-to-local, align 1
  %v7_10620 = icmp eq i8 %v3_1061c, 62
  store i1 %v7_10620, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10620, label %dec_label_pc_1062c, label %bb374

bb374:                                            ; preds = %dec_label_pc_10618
  %v3_10624 = icmp ugt i8 %v3_1061c, 57
  store i1 %v3_10624, i1* %cpsr_c.global-to-local, align 1
  %v8_10624 = icmp eq i8 %v3_1061c, 58
  store i1 %v8_10624, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10624, label %dec_label_pc_1062c, label %dec_label_pc_105f8

dec_label_pc_1062c:                               ; preds = %dec_label_pc_10618, %bb374, %dec_label_pc_10608, %dec_label_pc_10600, %dec_label_pc_105f8
  %v1_1062c = add i32 %v0_1062c, 1
  store i32 %v1_1062c, i32* @r7, align 4
  %v2_10630 = icmp eq i32 %v1_1062c, -1
  store i1 %v2_10630, i1* %cpsr_c.global-to-local, align 1
  %v7_10630 = icmp eq i32 %v0_1062c, -2
  store i1 %v7_10630, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10630, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_10638

dec_label_pc_10638:                               ; preds = %dec_label_pc_1062c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10638 = icmp eq i32 %v1_1062c, 0
  store i1 %v2_10638, i1* %cpsr_z.global-to-local, align 1
  %tmp375 = icmp slt i32 %v1_1062c, 1
  br i1 %tmp375, label %dec_label_pc_10370, label %dec_label_pc_10640

dec_label_pc_10640:                               ; preds = %dec_label_pc_10638
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10644 = call i32 @function_10e50(i32 8)
  store i32 %v2_1064c, i32* %r1.global-to-local, align 4
  store i32 8, i32* %r0.global-to-local, align 4
  %v3_10654 = call i32 @function_10d6c(i32 8, i32* nonnull %stack_var_-48)
  store i32 %v3_10654, i32* %r0.global-to-local, align 4
  %v3_10658 = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_10658, i32* %r2.global-to-local, align 4
  store i32 %v3_10654, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10664 = load i32, i32* @r6, align 4
  %v1_10664 = add i32 %v0_10664, 4
  %v2_10664 = inttoptr i32 %v1_10664 to i32*
  %v3_10664 = load i32, i32* %v2_10664, align 4
  store i32 %v3_10664, i32* %r0.global-to-local, align 4
  %v4_10668 = inttoptr i32 %v3_10654 to i32*
  %v5_10668 = call i32 @function_1269c(i32 %v3_10664, i32* %v4_10668, i32 %v3_10658, i32 16384)
  store i32 %v5_10668, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10678 = load i32, i32* @r6, align 4
  %v1_10678 = add i32 %v0_10678, 4
  %v2_10678 = inttoptr i32 %v1_10678 to i32*
  %v3_10678 = load i32, i32* %v2_10678, align 4
  store i32 %v3_10678, i32* %r0.global-to-local, align 4
  %v5_1067c = call i32 @function_1269c(i32 %v3_10678, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 8, i32* %r0.global-to-local, align 4
  %v1_10684 = call i32 @function_10d98(i32 8)
  store i32 %v1_10684, i32* %r0.global-to-local, align 4
  %v0_10688 = load i32, i32* @r6, align 4
  %v1_10688 = add i32 %v0_10688, 24
  %v2_10688 = inttoptr i32 %v1_10688 to i32*
  %v3_10688 = load i32, i32* %v2_10688, align 4
  store i32 %v3_10688, i32* %ip.global-to-local, align 4
  store i32 7, i32* %r2.global-to-local, align 4
  %v2_10690 = add i32 %v0_10688, 12
  %v3_10690 = inttoptr i32 %v2_10690 to i32*
  store i32 7, i32* %v3_10690, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10698:                               ; preds = %dec_label_pc_10260
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_1069c = call i32 @function_10e50(i32 12)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 12, i32* %r0.global-to-local, align 4
  %v3_106ac = call i32 @function_10d6c(i32 12, i32* nonnull %stack_var_-56)
  %v3_106b0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_106ac, i32* %r2.global-to-local, align 4
  %v1_106b8 = add i32 %v3_106b0, -1
  store i32 %v1_106b8, i32* %r3.global-to-local, align 4
  %v0_106bc = load i32, i32* @sb, align 4
  store i32 %v0_106bc, i32* %r0.global-to-local, align 4
  %v0_106c0 = load i32, i32* @r6, align 4
  %v1_106c0 = add i32 %v0_106c0, 24
  %v2_106c0 = inttoptr i32 %v1_106c0 to i32*
  %v3_106c0 = load i32, i32* %v2_106c0, align 4
  store i32 %v3_106c0, i32* %r1.global-to-local, align 4
  %v4_106c4 = call i32 @function_115d8(i32 %v0_106bc, i32 %v3_106c0, i32 %v3_106ac, i32 %v1_106b8)
  %v3_106c8 = icmp eq i32 %v4_106c4, -1
  store i1 %v3_106c8, i1* %cpsr_c.global-to-local, align 1
  %v8_106c8 = icmp eq i32 %v4_106c4, -1
  store i1 %v8_106c8, i1* %cpsr_z.global-to-local, align 1
  store i32 12, i32* %r0.global-to-local, align 4
  %v1_106d4 = call i32 @function_10d98(i32 12)
  br i1 %v3_106c8, label %dec_label_pc_106d0, label %dec_label_pc_10ac0

dec_label_pc_106d0:                               ; preds = %dec_label_pc_10698
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_106dc = call i32 @function_10e50(i32 11)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v3_106ec = call i32 @function_10d6c(i32 11, i32* nonnull %stack_var_-56)
  store i32 %v3_106ec, i32* %r0.global-to-local, align 4
  %v3_106f0 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_106ec, i32* %r2.global-to-local, align 4
  %v1_106f8 = add i32 %v3_106f0, -1
  store i32 %v1_106f8, i32* %r3.global-to-local, align 4
  %v0_106fc = load i32, i32* @r6, align 4
  %v1_106fc = add i32 %v0_106fc, 24
  %v2_106fc = inttoptr i32 %v1_106fc to i32*
  %v3_106fc = load i32, i32* %v2_106fc, align 4
  store i32 %v3_106fc, i32* %r1.global-to-local, align 4
  %v0_10700 = load i32, i32* @sb, align 4
  store i32 %v0_10700, i32* %r0.global-to-local, align 4
  %v4_10704 = call i32 @function_115d8(i32 %v0_10700, i32 %v3_106fc, i32 %v3_106ec, i32 %v1_106f8)
  store i32 %v4_10704, i32* @r7, align 4
  store i32 11, i32* %r0.global-to-local, align 4
  %v1_10710 = call i32 @function_10d98(i32 11)
  store i32 %v1_10710, i32* %r0.global-to-local, align 4
  %v0_10714 = load i32, i32* @r7, align 4
  %v2_10714 = icmp eq i32 %v0_10714, -1
  store i1 %v2_10714, i1* %cpsr_c.global-to-local, align 1
  %v7_10714 = icmp eq i32 %v0_10714, -1
  store i1 %v7_10714, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10714, label %dec_label_pc_101dc.loopexit, label %dec_label_pc_1071c

dec_label_pc_1071c:                               ; preds = %dec_label_pc_106d0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_1071c = icmp eq i32 %v0_10714, 0
  store i1 %v2_1071c, i1* %cpsr_z.global-to-local, align 1
  %tmp376 = icmp slt i32 %v0_10714, 1
  br i1 %tmp376, label %dec_label_pc_10370, label %dec_label_pc_10724

dec_label_pc_10724:                               ; preds = %dec_label_pc_1071c
  %v0_10724 = load i32, i32* @r6, align 4
  %v1_10724 = add i32 %v0_10724, 21
  %v2_10724 = inttoptr i32 %v1_10724 to i8*
  %v3_10724 = load i8, i8* %v2_10724, align 1
  %v4_10724 = zext i8 %v3_10724 to i32
  store i32 %v4_10724, i32* %r3.global-to-local, align 4
  %v1_10728 = add i32 %v0_10724, 20
  %v2_10728 = inttoptr i32 %v1_10728 to i8*
  %v3_10728 = load i8, i8* %v2_10728, align 1
  %v4_10728 = zext i8 %v3_10728 to i32
  store i32 %v4_10728, i32* %r2.global-to-local, align 4
  %v1_1072c = add i32 %v0_10724, 16
  %v2_1072c = inttoptr i32 %v1_1072c to i32*
  %v3_1072c = load i32, i32* %v2_1072c, align 4
  store i32 %v3_1072c, i32* %r1.global-to-local, align 4
  %v4_10730 = mul nuw nsw i32 %v4_10724, 256
  %v5_10730 = or i32 %v4_10728, %v4_10730
  store i32 %v5_10730, i32* %r2.global-to-local, align 4
  %v1_10734 = and i32 %v4_10728, 128
  %v2_10734 = icmp ne i32 %v1_10734, 0
  store i1 %v2_10734, i1* %cpsr_c.global-to-local, align 1
  store i32 %v4_10724, i32* %r3.global-to-local, align 4
  store i32 %v3_1072c, i32* %stack_var_-48, align 4
  store i32 %v5_10730, i32* %stack_var_-38, align 4
  %v1_10744 = inttoptr i32 %v0_10724 to i32*
  %v2_10744 = load i32, i32* %v1_10744, align 4
  store i32 %v2_10744, i32* @fp, align 4
  %v0_10748 = call i32 @function_11e44()
  store i32 %v0_10748, i32* %r0.global-to-local, align 4
  %v7_1074c = icmp eq i32 %v0_10748, -1
  %.398 = zext i1 %v7_1074c to i32
  store i32 %.398, i32* %r3.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10758 = icmp eq i32 %v0_10748, 0
  store i1 %v2_10758, i1* %cpsr_z.global-to-local, align 1
  %tmp379 = icmp slt i32 %v0_10748, 1
  br i1 %tmp379, label %bb380, label %.thread89

.thread89:                                        ; preds = %dec_label_pc_10724
  store i32 1, i32* %sl.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_107b0

bb380:                                            ; preds = %dec_label_pc_10724
  store i32 %.398, i32* @sl, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10764 = icmp eq i1 %v7_1074c, false
  store i1 %v2_10764, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_10764, label %dec_label_pc_1076c, label %dec_label_pc_107b0

dec_label_pc_1076c:                               ; preds = %bb380
  store i32 2, i32* %r0.global-to-local, align 4
  store i32 1, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v3_10778 = call i32 @function_1272c(i32 2, i32 1, i32 0)
  store i32 %v3_10778, i32* %r0.global-to-local, align 4
  %v2_1077c = icmp eq i32 %v3_10778, -1
  store i1 %v2_1077c, i1* %cpsr_c.global-to-local, align 1
  %v7_1077c = icmp eq i32 %v3_10778, -1
  store i1 %v7_1077c, i1* %cpsr_z.global-to-local, align 1
  store i32 %v3_10778, i32* @r5, align 4
  br i1 %v7_1077c, label %dec_label_pc_10d54, label %dec_label_pc_10788

dec_label_pc_10788:                               ; preds = %dec_label_pc_1076c
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_1078c = call i32 @function_10e50(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10794 = call i32 @function_10e50(i32 4)
  %v0_10798 = load i32, i32* @sl, align 4
  store i32 %v0_10798, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r0.global-to-local, align 4
  %v2_107a0 = inttoptr i32 %v0_10798 to i32*
  %v3_107a0 = call i32 @function_10d6c(i32 3, i32* %v2_107a0)
  store i32 %v3_107a0, i32* %r0.global-to-local, align 4
  %v1_107a4 = inttoptr i32 %v3_107a0 to i8*
  %v2_107a4 = call i32 @function_ee50(i8* %v1_107a4)
  store i32 %v2_107a4, i32* %r0.global-to-local, align 4
  store i32 %v2_107a4, i32* @r8, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v3_107a8 = icmp eq i32 %v2_107a4, 0
  store i1 %v3_107a8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_107a8, label %dec_label_pc_107b0, label %dec_label_pc_10c24

dec_label_pc_107b0:                               ; preds = %.thread89, %dec_label_pc_10788, %bb380
  %v0_107b0 = load i32, i32* @r6, align 4
  %v1_107b0 = add i32 %v0_107b0, 4
  %v2_107b0 = inttoptr i32 %v1_107b0 to i32*
  %v3_107b0 = load i32, i32* %v2_107b0, align 4
  store i32 %v3_107b0, i32* %r0.global-to-local, align 4
  %v1_107b4 = call i32 @function_11e18(i32 %v3_107b0)
  store i32 %v1_107b4, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_107c0 = load i32, i32* @r6, align 4
  %v1_107c0 = add i32 %v0_107c0, 24
  %v2_107c0 = inttoptr i32 %v1_107c0 to i32*
  %v3_107c0 = load i32, i32* %v2_107c0, align 4
  store i32 %v3_107c0, i32* %ip.global-to-local, align 4
  %v2_107c4 = add i32 %v0_107c0, 4
  %v3_107c4 = inttoptr i32 %v2_107c4 to i32*
  store i32 -1, i32* %v3_107c4, align 4
  %v0_107c8 = load i32, i32* %r2.global-to-local, align 4
  %v1_107c8 = load i32, i32* @r6, align 4
  %v2_107c8 = add i32 %v1_107c8, 12
  %v3_107c8 = inttoptr i32 %v2_107c8 to i32*
  store i32 %v0_107c8, i32* %v3_107c8, align 4
  br label %dec_label_pc_107cc

dec_label_pc_107cc:                               ; preds = %.thread238, %dec_label_pc_109b4, %dec_label_pc_10900, %dec_label_pc_1084c, %dec_label_pc_10bb4, %dec_label_pc_10af0, %dec_label_pc_10640, %dec_label_pc_1051c, %dec_label_pc_10484, %dec_label_pc_103ec, %dec_label_pc_10378, %dec_label_pc_107b0
  %v0_107cc = load i32, i32* %ip.global-to-local, align 4
  %v1_107cc = load i32, i32* @r7, align 4
  %v2_107cc = sub i32 %v0_107cc, %v1_107cc
  %v3_107cc = icmp uge i32 %v0_107cc, %v1_107cc
  store i1 %v3_107cc, i1* %cpsr_c.global-to-local, align 1
  %v4_107cc = xor i32 %v1_107cc, %v0_107cc
  %v5_107cc = xor i32 %v2_107cc, %v0_107cc
  %v6_107cc = and i32 %v5_107cc, %v4_107cc
  %v7_107cc = icmp slt i32 %v6_107cc, 0
  %v8_107cc = icmp slt i32 %v2_107cc, 0
  %v9_107cc = icmp eq i32 %v0_107cc, %v1_107cc
  store i1 %v9_107cc, i1* %cpsr_z.global-to-local, align 1
  %v2_107d0 = xor i1 %v8_107cc, %v7_107cc
  %v0_107cc.v1_107cc = select i1 %v2_107d0, i32 %v0_107cc, i32 %v1_107cc
  store i32 %v0_107cc.v1_107cc, i32* %r1.global-to-local, align 4
  %v2_107d8 = sub i32 %v0_107cc, %v0_107cc.v1_107cc
  store i32 %v2_107d8, i32* @r2, align 4
  %v1_107dc = load i32, i32* @r6, align 4
  %v2_107dc = add i32 %v1_107dc, 24
  %v3_107dc = inttoptr i32 %v2_107dc to i32*
  store i32 %v2_107d8, i32* %v3_107dc, align 4
  %v0_107e0 = load i32, i32* @sb, align 4
  %v1_107e0 = load i32, i32* %r1.global-to-local, align 4
  %v2_107e0 = add i32 %v1_107e0, %v0_107e0
  store i32 %v2_107e0, i32* @r1, align 4
  store i32 %v0_107e0, i32* @r0, align 4
  %v3_107e8 = call i32 @function_12440(i32 %v0_107e0, i32 %v2_107e0, i32 %v2_107d8)
  store i32 %v3_107e8, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10260

dec_label_pc_107f0:                               ; preds = %dec_label_pc_10260
  %v1_107f0 = add i32 %v0_10260, 24
  %v2_107f0 = inttoptr i32 %v1_107f0 to i32*
  %v3_107f0 = load i32, i32* %v2_107f0, align 4
  store i32 %v3_107f0, i32* %ip.global-to-local, align 4
  %v1_107f4 = add i32 %v3_107f0, -1
  store i32 %v1_107f4, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_107f8 = icmp eq i32 %v1_107f4, 0
  store i1 %v2_107f8, i1* %cpsr_z.global-to-local, align 1
  %v5_107fc = icmp sgt i32 %v1_107f4, 0
  br i1 %v5_107fc, label %dec_label_pc_10824, label %dec_label_pc_101e0.backedge.thread

dec_label_pc_10804:                               ; preds = %bb383
  %v2_10804 = icmp ugt i8 %v3_10828, 35
  store i1 %v2_10804, i1* %cpsr_c.global-to-local, align 1
  %v7_10804 = icmp eq i8 %v3_10828, 36
  store i1 %v7_10804, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10804, label %dec_label_pc_10838, label %dec_label_pc_1080c

dec_label_pc_1080c:                               ; preds = %dec_label_pc_10804
  %v2_1080c = icmp ugt i8 %v3_10828, 34
  store i1 %v2_1080c, i1* %cpsr_c.global-to-local, align 1
  %v7_1080c = icmp eq i8 %v3_10828, 35
  store i1 %v7_1080c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1080c, label %dec_label_pc_10838, label %dec_label_pc_10814

dec_label_pc_10814:                               ; preds = %dec_label_pc_1080c
  %v2_10814 = icmp ugt i8 %v3_10828, 36
  store i1 %v2_10814, i1* %cpsr_c.global-to-local, align 1
  %v7_10814 = icmp eq i8 %v3_10828, 37
  store i1 %v7_10814, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10814, label %dec_label_pc_10838, label %dec_label_pc_1081c

dec_label_pc_1081c:                               ; preds = %dec_label_pc_10814
  %v1_1081c = add i32 %v0_10838, -1
  store i32 %v1_1081c, i32* %r0.global-to-local, align 4
  %v2_1081c = icmp ne i32 %v0_10838, 0
  store i1 %v2_1081c, i1* %cpsr_c.global-to-local, align 1
  %v7_1081c = icmp eq i32 %v0_10838, 1
  store i1 %v7_1081c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1081c, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_10824

dec_label_pc_10824:                               ; preds = %dec_label_pc_107f0, %dec_label_pc_1081c
  %v0_10838 = phi i32 [ %v1_1081c, %dec_label_pc_1081c ], [ %v1_107f4, %dec_label_pc_107f0 ]
  %v2_10824 = add i32 %v0_10838, %v0_10260
  store i32 %v2_10824, i32* %r3.global-to-local, align 4
  %v1_10828 = add i32 %v2_10824, 28
  %v2_10828 = inttoptr i32 %v1_10828 to i8*
  %v3_10828 = load i8, i8* %v2_10828, align 1
  %v4_10828 = zext i8 %v3_10828 to i32
  store i32 %v4_10828, i32* %r3.global-to-local, align 4
  %v2_1082c = icmp ugt i8 %v3_10828, 61
  store i1 %v2_1082c, i1* %cpsr_c.global-to-local, align 1
  %v7_1082c = icmp eq i8 %v3_10828, 62
  store i1 %v7_1082c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1082c, label %dec_label_pc_10838, label %bb383

bb383:                                            ; preds = %dec_label_pc_10824
  %v3_10830 = icmp ugt i8 %v3_10828, 57
  store i1 %v3_10830, i1* %cpsr_c.global-to-local, align 1
  %v8_10830 = icmp eq i8 %v3_10828, 58
  store i1 %v8_10830, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10830, label %dec_label_pc_10838, label %dec_label_pc_10804

dec_label_pc_10838:                               ; preds = %dec_label_pc_10824, %bb383, %dec_label_pc_10814, %dec_label_pc_1080c, %dec_label_pc_10804
  %v1_10838 = add i32 %v0_10838, 1
  store i32 %v1_10838, i32* @r7, align 4
  %v2_1083c = icmp eq i32 %v1_10838, -1
  store i1 %v2_1083c, i1* %cpsr_c.global-to-local, align 1
  %v7_1083c = icmp eq i32 %v0_10838, -2
  store i1 %v7_1083c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1083c, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_10844

dec_label_pc_10844:                               ; preds = %dec_label_pc_10838
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10844 = icmp eq i32 %v1_10838, 0
  store i1 %v2_10844, i1* %cpsr_z.global-to-local, align 1
  %tmp384 = icmp slt i32 %v1_10838, 1
  br i1 %tmp384, label %dec_label_pc_10370, label %dec_label_pc_1084c

dec_label_pc_1084c:                               ; preds = %dec_label_pc_10844
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10850 = call i32 @function_10e50(i32 9)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 9, i32* %r0.global-to-local, align 4
  %v3_10860 = call i32 @function_10d6c(i32 9, i32* nonnull %stack_var_-56)
  store i32 %v3_10860, i32* %r0.global-to-local, align 4
  %v3_10864 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10864, i32* %r2.global-to-local, align 4
  store i32 %v3_10860, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10870 = load i32, i32* @r6, align 4
  %v1_10870 = add i32 %v0_10870, 4
  %v2_10870 = inttoptr i32 %v1_10870 to i32*
  %v3_10870 = load i32, i32* %v2_10870, align 4
  store i32 %v3_10870, i32* %r0.global-to-local, align 4
  %v4_10874 = inttoptr i32 %v3_10860 to i32*
  %v5_10874 = call i32 @function_1269c(i32 %v3_10870, i32* %v4_10874, i32 %v3_10864, i32 16384)
  store i32 %v5_10874, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10884 = load i32, i32* @r6, align 4
  %v1_10884 = add i32 %v0_10884, 4
  %v2_10884 = inttoptr i32 %v1_10884 to i32*
  %v3_10884 = load i32, i32* %v2_10884, align 4
  store i32 %v3_10884, i32* %r0.global-to-local, align 4
  %v5_10888 = call i32 @function_1269c(i32 %v3_10884, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 9, i32* %r0.global-to-local, align 4
  %v1_10890 = call i32 @function_10d98(i32 9)
  store i32 %v1_10890, i32* %r0.global-to-local, align 4
  %v0_10894 = load i32, i32* @r6, align 4
  %v1_10894 = add i32 %v0_10894, 24
  %v2_10894 = inttoptr i32 %v1_10894 to i32*
  %v3_10894 = load i32, i32* %v2_10894, align 4
  store i32 %v3_10894, i32* %ip.global-to-local, align 4
  store i32 9, i32* %r2.global-to-local, align 4
  %v2_1089c = add i32 %v0_10894, 12
  %v3_1089c = inttoptr i32 %v2_1089c to i32*
  store i32 9, i32* %v3_1089c, align 4
  br label %dec_label_pc_107cc

dec_label_pc_108a4:                               ; preds = %dec_label_pc_10260
  %v1_108a4 = add i32 %v0_10260, 24
  %v2_108a4 = inttoptr i32 %v1_108a4 to i32*
  %v3_108a4 = load i32, i32* %v2_108a4, align 4
  store i32 %v3_108a4, i32* %ip.global-to-local, align 4
  %v1_108a8 = add i32 %v3_108a4, -1
  store i32 %v1_108a8, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108ac = icmp eq i32 %v1_108a8, 0
  store i1 %v2_108ac, i1* %cpsr_z.global-to-local, align 1
  %v5_108b0 = icmp sgt i32 %v1_108a8, 0
  br i1 %v5_108b0, label %dec_label_pc_108d8, label %dec_label_pc_101e0.backedge.thread

dec_label_pc_108b8:                               ; preds = %bb385
  %v2_108b8 = icmp ugt i8 %v3_108dc, 35
  store i1 %v2_108b8, i1* %cpsr_c.global-to-local, align 1
  %v7_108b8 = icmp eq i8 %v3_108dc, 36
  store i1 %v7_108b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108b8, label %dec_label_pc_108ec, label %dec_label_pc_108c0

dec_label_pc_108c0:                               ; preds = %dec_label_pc_108b8
  %v2_108c0 = icmp ugt i8 %v3_108dc, 34
  store i1 %v2_108c0, i1* %cpsr_c.global-to-local, align 1
  %v7_108c0 = icmp eq i8 %v3_108dc, 35
  store i1 %v7_108c0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c0, label %dec_label_pc_108ec, label %dec_label_pc_108c8

dec_label_pc_108c8:                               ; preds = %dec_label_pc_108c0
  %v2_108c8 = icmp ugt i8 %v3_108dc, 36
  store i1 %v2_108c8, i1* %cpsr_c.global-to-local, align 1
  %v7_108c8 = icmp eq i8 %v3_108dc, 37
  store i1 %v7_108c8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108c8, label %dec_label_pc_108ec, label %dec_label_pc_108d0

dec_label_pc_108d0:                               ; preds = %dec_label_pc_108c8
  %v1_108d0 = add i32 %v0_108ec, -1
  store i32 %v1_108d0, i32* %r0.global-to-local, align 4
  %v2_108d0 = icmp ne i32 %v0_108ec, 0
  store i1 %v2_108d0, i1* %cpsr_c.global-to-local, align 1
  %v7_108d0 = icmp eq i32 %v0_108ec, 1
  store i1 %v7_108d0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108d0, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_108d8

dec_label_pc_108d8:                               ; preds = %dec_label_pc_108a4, %dec_label_pc_108d0
  %v0_108ec = phi i32 [ %v1_108d0, %dec_label_pc_108d0 ], [ %v1_108a8, %dec_label_pc_108a4 ]
  %v2_108d8 = add i32 %v0_108ec, %v0_10260
  store i32 %v2_108d8, i32* %r3.global-to-local, align 4
  %v1_108dc = add i32 %v2_108d8, 28
  %v2_108dc = inttoptr i32 %v1_108dc to i8*
  %v3_108dc = load i8, i8* %v2_108dc, align 1
  %v4_108dc = zext i8 %v3_108dc to i32
  store i32 %v4_108dc, i32* %r3.global-to-local, align 4
  %v2_108e0 = icmp ugt i8 %v3_108dc, 61
  store i1 %v2_108e0, i1* %cpsr_c.global-to-local, align 1
  %v7_108e0 = icmp eq i8 %v3_108dc, 62
  store i1 %v7_108e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108e0, label %dec_label_pc_108ec, label %bb385

bb385:                                            ; preds = %dec_label_pc_108d8
  %v3_108e4 = icmp ugt i8 %v3_108dc, 57
  store i1 %v3_108e4, i1* %cpsr_c.global-to-local, align 1
  %v8_108e4 = icmp eq i8 %v3_108dc, 58
  store i1 %v8_108e4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_108e4, label %dec_label_pc_108ec, label %dec_label_pc_108b8

dec_label_pc_108ec:                               ; preds = %dec_label_pc_108d8, %bb385, %dec_label_pc_108c8, %dec_label_pc_108c0, %dec_label_pc_108b8
  %v1_108ec = add i32 %v0_108ec, 1
  store i32 %v1_108ec, i32* @r7, align 4
  %v2_108f0 = icmp eq i32 %v1_108ec, -1
  store i1 %v2_108f0, i1* %cpsr_c.global-to-local, align 1
  %v7_108f0 = icmp eq i32 %v0_108ec, -2
  store i1 %v7_108f0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_108f0, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_108f8

dec_label_pc_108f8:                               ; preds = %dec_label_pc_108ec
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_108f8 = icmp eq i32 %v1_108ec, 0
  store i1 %v2_108f8, i1* %cpsr_z.global-to-local, align 1
  %tmp386 = icmp slt i32 %v1_108ec, 1
  br i1 %tmp386, label %dec_label_pc_10370, label %dec_label_pc_10900

dec_label_pc_10900:                               ; preds = %dec_label_pc_108f8
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10904 = call i32 @function_10e50(i32 10)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 10, i32* %r0.global-to-local, align 4
  %v3_10914 = call i32 @function_10d6c(i32 10, i32* nonnull %stack_var_-56)
  store i32 %v3_10914, i32* %r0.global-to-local, align 4
  %v3_10918 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10918, i32* %r2.global-to-local, align 4
  store i32 %v3_10914, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10924 = load i32, i32* @r6, align 4
  %v1_10924 = add i32 %v0_10924, 4
  %v2_10924 = inttoptr i32 %v1_10924 to i32*
  %v3_10924 = load i32, i32* %v2_10924, align 4
  store i32 %v3_10924, i32* %r0.global-to-local, align 4
  %v4_10928 = inttoptr i32 %v3_10914 to i32*
  %v5_10928 = call i32 @function_1269c(i32 %v3_10924, i32* %v4_10928, i32 %v3_10918, i32 16384)
  store i32 %v5_10928, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10938 = load i32, i32* @r6, align 4
  %v1_10938 = add i32 %v0_10938, 4
  %v2_10938 = inttoptr i32 %v1_10938 to i32*
  %v3_10938 = load i32, i32* %v2_10938, align 4
  store i32 %v3_10938, i32* %r0.global-to-local, align 4
  %v5_1093c = call i32 @function_1269c(i32 %v3_10938, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 10, i32* %r0.global-to-local, align 4
  %v1_10944 = call i32 @function_10d98(i32 10)
  store i32 %v1_10944, i32* %r0.global-to-local, align 4
  %v0_10948 = load i32, i32* @r6, align 4
  %v1_10948 = add i32 %v0_10948, 24
  %v2_10948 = inttoptr i32 %v1_10948 to i32*
  %v3_10948 = load i32, i32* %v2_10948, align 4
  store i32 %v3_10948, i32* %ip.global-to-local, align 4
  store i32 10, i32* %r2.global-to-local, align 4
  %v2_10950 = add i32 %v0_10948, 12
  %v3_10950 = inttoptr i32 %v2_10950 to i32*
  store i32 10, i32* %v3_10950, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10958:                               ; preds = %dec_label_pc_10260
  %v1_10958 = add i32 %v0_10260, 24
  %v2_10958 = inttoptr i32 %v1_10958 to i32*
  %v3_10958 = load i32, i32* %v2_10958, align 4
  store i32 %v3_10958, i32* %ip.global-to-local, align 4
  %v1_1095c = add i32 %v3_10958, -1
  store i32 %v1_1095c, i32* %r0.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_10960 = icmp eq i32 %v1_1095c, 0
  store i1 %v2_10960, i1* %cpsr_z.global-to-local, align 1
  %v5_10964 = icmp sgt i32 %v1_1095c, 0
  br i1 %v5_10964, label %dec_label_pc_1098c, label %dec_label_pc_101e0.backedge.thread

dec_label_pc_1096c:                               ; preds = %bb387
  %v2_1096c = icmp ugt i8 %v3_10990, 35
  store i1 %v2_1096c, i1* %cpsr_c.global-to-local, align 1
  %v7_1096c = icmp eq i8 %v3_10990, 36
  store i1 %v7_1096c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1096c, label %dec_label_pc_109a0, label %dec_label_pc_10974

dec_label_pc_10974:                               ; preds = %dec_label_pc_1096c
  %v2_10974 = icmp ugt i8 %v3_10990, 34
  store i1 %v2_10974, i1* %cpsr_c.global-to-local, align 1
  %v7_10974 = icmp eq i8 %v3_10990, 35
  store i1 %v7_10974, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10974, label %dec_label_pc_109a0, label %dec_label_pc_1097c

dec_label_pc_1097c:                               ; preds = %dec_label_pc_10974
  %v2_1097c = icmp ugt i8 %v3_10990, 36
  store i1 %v2_1097c, i1* %cpsr_c.global-to-local, align 1
  %v7_1097c = icmp eq i8 %v3_10990, 37
  store i1 %v7_1097c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1097c, label %dec_label_pc_109a0, label %dec_label_pc_10984

dec_label_pc_10984:                               ; preds = %dec_label_pc_1097c
  %v1_10984 = add i32 %v0_109a0, -1
  store i32 %v1_10984, i32* %r0.global-to-local, align 4
  %v2_10984 = icmp ne i32 %v0_109a0, 0
  store i1 %v2_10984, i1* %cpsr_c.global-to-local, align 1
  %v7_10984 = icmp eq i32 %v0_109a0, 1
  store i1 %v7_10984, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10984, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_1098c

dec_label_pc_1098c:                               ; preds = %dec_label_pc_10958, %dec_label_pc_10984
  %v0_109a0 = phi i32 [ %v1_10984, %dec_label_pc_10984 ], [ %v1_1095c, %dec_label_pc_10958 ]
  %v2_1098c = add i32 %v0_109a0, %v0_10260
  store i32 %v2_1098c, i32* %r3.global-to-local, align 4
  %v1_10990 = add i32 %v2_1098c, 28
  %v2_10990 = inttoptr i32 %v1_10990 to i8*
  %v3_10990 = load i8, i8* %v2_10990, align 1
  %v4_10990 = zext i8 %v3_10990 to i32
  store i32 %v4_10990, i32* %r3.global-to-local, align 4
  %v2_10994 = icmp ugt i8 %v3_10990, 61
  store i1 %v2_10994, i1* %cpsr_c.global-to-local, align 1
  %v7_10994 = icmp eq i8 %v3_10990, 62
  store i1 %v7_10994, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10994, label %dec_label_pc_109a0, label %bb387

bb387:                                            ; preds = %dec_label_pc_1098c
  %v3_10998 = icmp ugt i8 %v3_10990, 57
  store i1 %v3_10998, i1* %cpsr_c.global-to-local, align 1
  %v8_10998 = icmp eq i8 %v3_10990, 58
  store i1 %v8_10998, i1* %cpsr_z.global-to-local, align 1
  br i1 %v8_10998, label %dec_label_pc_109a0, label %dec_label_pc_1096c

dec_label_pc_109a0:                               ; preds = %dec_label_pc_1098c, %bb387, %dec_label_pc_1097c, %dec_label_pc_10974, %dec_label_pc_1096c
  %v1_109a0 = add i32 %v0_109a0, 1
  store i32 %v1_109a0, i32* @r7, align 4
  %v2_109a4 = icmp eq i32 %v1_109a0, -1
  store i1 %v2_109a4, i1* %cpsr_c.global-to-local, align 1
  %v7_109a4 = icmp eq i32 %v0_109a0, -2
  store i1 %v7_109a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_109a4, label %dec_label_pc_101e0.backedge.thread500, label %dec_label_pc_109ac

dec_label_pc_109ac:                               ; preds = %dec_label_pc_109a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_109ac = icmp eq i32 %v1_109a0, 0
  store i1 %v2_109ac, i1* %cpsr_z.global-to-local, align 1
  %tmp388 = icmp slt i32 %v1_109a0, 1
  br i1 %tmp388, label %dec_label_pc_10370, label %dec_label_pc_109b4

dec_label_pc_109b4:                               ; preds = %dec_label_pc_109ac
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_109b8 = call i32 @function_10e50(i32 6)
  store i32 %v2_1064c, i32* %r1.global-to-local, align 4
  store i32 6, i32* %r0.global-to-local, align 4
  %v3_109c8 = call i32 @function_10d6c(i32 6, i32* nonnull %stack_var_-48)
  store i32 %v3_109c8, i32* %r0.global-to-local, align 4
  %v3_109cc = load i32, i32* %stack_var_-48, align 4
  store i32 %v3_109cc, i32* %r2.global-to-local, align 4
  store i32 %v3_109c8, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109d8 = load i32, i32* @r6, align 4
  %v1_109d8 = add i32 %v0_109d8, 4
  %v2_109d8 = inttoptr i32 %v1_109d8 to i32*
  %v3_109d8 = load i32, i32* %v2_109d8, align 4
  store i32 %v3_109d8, i32* %r0.global-to-local, align 4
  %v4_109dc = inttoptr i32 %v3_109c8 to i32*
  %v5_109dc = call i32 @function_1269c(i32 %v3_109d8, i32* %v4_109dc, i32 %v3_109cc, i32 16384)
  store i32 %v5_109dc, i32* %r0.global-to-local, align 4
  store i32 2, i32* %r2.global-to-local, align 4
  store i32 ptrtoint ([3 x i8]* @global_var_14744.205 to i32), i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_109ec = load i32, i32* @r6, align 4
  %v1_109ec = add i32 %v0_109ec, 4
  %v2_109ec = inttoptr i32 %v1_109ec to i32*
  %v3_109ec = load i32, i32* %v2_109ec, align 4
  store i32 %v3_109ec, i32* %r0.global-to-local, align 4
  %v5_109f0 = call i32 @function_1269c(i32 %v3_109ec, i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), i32 2, i32 16384)
  store i32 6, i32* %r0.global-to-local, align 4
  %v1_109f8 = call i32 @function_10d98(i32 6)
  store i32 %v1_109f8, i32* %r0.global-to-local, align 4
  %v0_109fc = load i32, i32* @r6, align 4
  %v1_109fc = add i32 %v0_109fc, 24
  %v2_109fc = inttoptr i32 %v1_109fc to i32*
  %v3_109fc = load i32, i32* %v2_109fc, align 4
  store i32 %v3_109fc, i32* %ip.global-to-local, align 4
  store i32 8, i32* %r2.global-to-local, align 4
  %v2_10a04 = add i32 %v0_109fc, 12
  %v3_10a04 = inttoptr i32 %v2_10a04 to i32*
  store i32 8, i32* %v3_10a04, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10a0c:                               ; preds = %dec_label_pc_102f0
  store i32 ptrtoint (i32* @global_var_14756.207 to i32), i32* @r1, align 4
  store i32 3, i32* @r2, align 4
  store i32 %v2_102a8, i32* @r0, align 4
  %v3_10a18 = call i32 @function_12430(i32 %v2_102a8, i32 ptrtoint (i32* @global_var_14756.207 to i32), i32 3)
  store i32 9, i32* @r2, align 4
  store i32 %v2_10a24, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_1474d.209 to i32), i32* @r1, align 4
  %v3_10a2c = call i32 @function_12430(i32 %v2_10a24, i32 ptrtoint (i32* @global_var_1474d.209 to i32), i32 9)
  store i32 %v3_10a2c, i32* %r0.global-to-local, align 4
  %v0_10a30 = load i32, i32* @r6, align 4
  %v1_10a30 = add i32 %v0_10a30, 24
  %v2_10a30 = inttoptr i32 %v1_10a30 to i32*
  %v3_10a30 = load i32, i32* %v2_10a30, align 4
  store i32 %v3_10a30, i32* %ip.global-to-local, align 4
  %v0_10a34 = load i32, i32* @r5, align 4
  %v1_10a34 = add i32 %v0_10a34, 2
  store i32 %v1_10a34, i32* %r2.global-to-local, align 4
  %v0_10a38 = load i32, i32* @sb, align 4
  %v2_10a38 = add i32 %v0_10a38, %v3_10a30
  store i32 %v2_10a38, i32* %r3.global-to-local, align 4
  %v3_10a3c = icmp uge i32 %v2_10a38, %v1_10a34
  store i1 %v3_10a3c, i1* %cpsr_c.global-to-local, align 1
  %v9_10a3c = icmp eq i32 %v2_10a38, %v1_10a34
  store i1 %v9_10a3c, i1* %cpsr_z.global-to-local, align 1
  %v2_10a40 = xor i1 %v3_10a3c, true
  %v3_10a40 = or i1 %v9_10a3c, %v2_10a40
  br i1 %v3_10a40, label %dec_label_pc_10a0c.dec_label_pc_10360.loopexit_crit_edge, label %dec_label_pc_10a44

dec_label_pc_10a0c.dec_label_pc_10360.loopexit_crit_edge: ; preds = %dec_label_pc_10a0c
  %v0_10360.pre.pre = load i32, i32* @r7, align 4
  br label %dec_label_pc_10360

dec_label_pc_10a44:                               ; preds = %dec_label_pc_10a0c
  %v0_10a44 = load i32, i32* @r4, align 4
  %v1_10a44 = add i32 %v0_10a44, 1
  %v2_10a44 = inttoptr i32 %v1_10a44 to i8*
  %v3_10a44 = load i8, i8* %v2_10a44, align 1
  %v4_10a44 = zext i8 %v3_10a44 to i32
  store i32 %v4_10a44, i32* %r3.global-to-local, align 4
  %v2_10a48 = icmp ugt i8 %v3_10a44, 30
  store i1 %v2_10a48, i1* %cpsr_c.global-to-local, align 1
  %v7_10a48 = icmp eq i8 %v3_10a44, 31
  store i1 %v7_10a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a48, label %dec_label_pc_10b68, label %dec_label_pc_10a50

dec_label_pc_10a50:                               ; preds = %dec_label_pc_10a44
  %v1_10a50 = add i32 %v0_10a44, -1
  %v2_10a50 = inttoptr i32 %v1_10a50 to i8*
  %v3_10a50 = load i8, i8* %v2_10a50, align 1
  %v4_10a50 = zext i8 %v3_10a50 to i32
  store i32 %v4_10a50, i32* %r3.global-to-local, align 4
  %v2_10a54 = icmp ugt i8 %v3_10a50, -4
  store i1 %v2_10a54, i1* %cpsr_c.global-to-local, align 1
  %v7_10a54 = icmp eq i8 %v3_10a50, -3
  store i1 %v7_10a54, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a54, label %bb389, label %dec_label_pc_10a60

bb389:                                            ; preds = %dec_label_pc_10a50
  %v1_10a58 = load i32, i32* @r8, align 4
  %v2_10a58 = trunc i32 %v1_10a58 to i8
  store i8 %v2_10a58, i8* %v2_10a50, align 1
  %v0_10a5c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_10a5c.pr, label %dec_label_pc_10304, label %.dec_label_pc_10a60_crit_edge

.dec_label_pc_10a60_crit_edge:                    ; preds = %bb389
  %v0_10a60.pre = load i32, i32* %r3.global-to-local, align 4
  br label %dec_label_pc_10a60

dec_label_pc_10a60:                               ; preds = %.dec_label_pc_10a60_crit_edge, %dec_label_pc_10a50
  %v0_10a60 = phi i32 [ %v0_10a60.pre, %.dec_label_pc_10a60_crit_edge ], [ %v4_10a50, %dec_label_pc_10a50 ]
  %v2_10a60 = icmp ugt i32 %v0_10a60, 250
  store i1 %v2_10a60, i1* %cpsr_c.global-to-local, align 1
  %v7_10a60 = icmp eq i32 %v0_10a60, 251
  store i1 %v7_10a60, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a60, label %bb390, label %dec_label_pc_10304

bb390:                                            ; preds = %dec_label_pc_10a60
  %v1_10a64 = load i32, i32* %sl.global-to-local, align 4
  %v2_10a64 = trunc i32 %v1_10a64 to i8
  %v3_10a64 = load i32, i32* @r4, align 4
  %v4_10a64 = add i32 %v3_10a64, -1
  %v5_10a64 = inttoptr i32 %v4_10a64 to i8*
  store i8 %v2_10a64, i8* %v5_10a64, align 1
  br label %dec_label_pc_10304

dec_label_pc_10a6c:                               ; preds = %dec_label_pc_1044c, %dec_label_pc_10428, %dec_label_pc_10468
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10a70 = call i32 @function_10e50(i32 30)
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 30, i32* %r0.global-to-local, align 4
  %v3_10a80 = call i32 @function_10d6c(i32 30, i32* nonnull %stack_var_-56)
  %v3_10a84 = load i32, i32* %stack_var_-56, align 4
  store i32 %v3_10a80, i32* %r2.global-to-local, align 4
  %v1_10a8c = add i32 %v3_10a84, -1
  store i32 %v1_10a8c, i32* %r3.global-to-local, align 4
  %v0_10a90 = load i32, i32* @sb, align 4
  store i32 %v0_10a90, i32* %r0.global-to-local, align 4
  %v0_10a94 = load i32, i32* @r6, align 4
  %v1_10a94 = add i32 %v0_10a94, 24
  %v2_10a94 = inttoptr i32 %v1_10a94 to i32*
  %v3_10a94 = load i32, i32* %v2_10a94, align 4
  store i32 %v3_10a94, i32* %r1.global-to-local, align 4
  %v4_10a98 = call i32 @function_115d8(i32 %v0_10a90, i32 %v3_10a94, i32 %v3_10a80, i32 %v1_10a8c)
  store i32 %v4_10a98, i32* %r0.global-to-local, align 4
  %v1_10a9c = add i32 %v4_10a98, 1
  store i32 %v1_10a9c, i32* @r7, align 4
  %v2_10a9c = icmp eq i32 %v4_10a98, -1
  store i1 %v2_10a9c, i1* %cpsr_c.global-to-local, align 1
  %v7_10a9c = icmp eq i32 %v1_10a9c, 0
  store i1 %v7_10a9c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10a9c, label %thread-pre-split96, label %bb391

bb391:                                            ; preds = %dec_label_pc_10a6c
  store i32 1, i32* @r7, align 4
  br label %thread-pre-split96

thread-pre-split96:                               ; preds = %dec_label_pc_10a6c, %bb391
  %v0_10aa4 = phi i1 [ false, %bb391 ], [ true, %dec_label_pc_10a6c ]
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 %v0_10aa4, i1* %cpsr_z.global-to-local, align 1
  store i32 30, i32* %r0.global-to-local, align 4
  %v1_10be4 = call i32 @function_10d98(i32 30)
  store i32 %v1_10be4, i32* %r0.global-to-local, align 4
  br i1 %v0_10aa4, label %dec_label_pc_10be0, label %dec_label_pc_10aac

dec_label_pc_10aac:                               ; preds = %thread-pre-split96
  %v0_10ab4 = load i32, i32* @r7, align 4
  %v3_10ab4 = icmp eq i32 %v0_10ab4, -1
  store i1 %v3_10ab4, i1* %cpsr_c.global-to-local, align 1
  %v8_10ab4 = icmp eq i32 %v0_10ab4, -1
  store i1 %v8_10ab4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10ab4, label %dec_label_pc_101dc.loopexit, label %dec_label_pc_1047c

dec_label_pc_10ac0:                               ; preds = %dec_label_pc_10698
  store i32 %v1_106d4, i32* %r0.global-to-local, align 4
  %v0_10ac8 = load i32, i32* @r6, align 4
  %v1_10ac8 = add i32 %v0_10ac8, 4
  %v2_10ac8 = inttoptr i32 %v1_10ac8 to i32*
  %v3_10ac8 = load i32, i32* %v2_10ac8, align 4
  store i32 %v3_10ac8, i32* %r0.global-to-local, align 4
  %v1_10acc = call i32 @function_11e18(i32 %v3_10ac8)
  store i32 %v1_10acc, i32* %r0.global-to-local, align 4
  %v0_10ad0 = load i32, i32* @r6, align 4
  %v1_10ad0 = add i32 %v0_10ad0, 284
  %v2_10ad0 = inttoptr i32 %v1_10ad0 to i8*
  %v3_10ad0 = load i8, i8* %v2_10ad0, align 1
  %v4_10ad0 = zext i8 %v3_10ad0 to i32
  %v1_10ad4 = add nuw nsw i32 %v4_10ad0, 1
  %v1_10ad8 = urem i32 %v1_10ad4, 256
  store i32 %v1_10ad8, i32* %r3.global-to-local, align 4
  store i32 -1, i32* @r4, align 4
  %v2_10ae0 = icmp ugt i32 %v1_10ad8, 9
  store i1 %v2_10ae0, i1* %cpsr_c.global-to-local, align 1
  %v7_10ae0 = icmp eq i32 %v1_10ad8, 10
  store i1 %v7_10ae0, i1* %cpsr_z.global-to-local, align 1
  %v2_10ae4 = add i32 %v0_10ad0, 4
  %v3_10ae4 = inttoptr i32 %v2_10ae4 to i32*
  store i32 -1, i32* %v3_10ae4, align 4
  %v0_10ae8 = load i32, i32* %r3.global-to-local, align 4
  %v1_10ae8 = trunc i32 %v0_10ae8 to i8
  %v2_10ae8 = load i32, i32* @r6, align 4
  %v3_10ae8 = add i32 %v2_10ae8, 284
  %v4_10ae8 = inttoptr i32 %v3_10ae8 to i8*
  store i8 %v1_10ae8, i8* %v4_10ae8, align 1
  %v0_10aec = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_10af0 = load i32, i32* @r6, align 4
  br i1 %v0_10aec, label %dec_label_pc_10af0, label %dec_label_pc_10bb4

dec_label_pc_10af0:                               ; preds = %dec_label_pc_10ac0
  %v1_10af0 = add i32 %v0_10af0, 24
  %v2_10af0 = inttoptr i32 %v1_10af0 to i32*
  %v3_10af0 = load i32, i32* %v2_10af0, align 4
  store i32 %v3_10af0, i32* %ip.global-to-local, align 4
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 -1, i32* @r7, align 4
  %v3_10b00 = add i32 %v0_10af0, 284
  %v4_10b00 = inttoptr i32 %v3_10b00 to i8*
  store i8 0, i8* %v4_10b00, align 1
  %v0_10b04 = load i32, i32* %r1.global-to-local, align 4
  %v1_10b04 = load i32, i32* @r6, align 4
  %v2_10b04 = add i32 %v1_10b04, 12
  %v3_10b04 = inttoptr i32 %v2_10b04 to i32*
  store i32 %v0_10b04, i32* %v3_10b04, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10b0c:                               ; preds = %dec_label_pc_101f8
  br i1 %v2_10220, label %dec_label_pc_10d5c, label %dec_label_pc_10b10

dec_label_pc_10b10:                               ; preds = %dec_label_pc_10b0c
  %v3_10b10 = icmp eq i32 %v5_1021c, -1
  store i1 %v3_10b10, i1* %cpsr_c.global-to-local, align 1
  %v8_10b10 = icmp eq i32 %v5_1021c, -1
  store i1 %v8_10b10, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10b10, label %dec_label_pc_10b18, label %dec_label_pc_10248

dec_label_pc_10b18:                               ; preds = %dec_label_pc_10b10
  store i32 %stack_var_-1868.0, i32* %r2.global-to-local, align 4
  %v2_10b1c = load i32, i32* %v2_10200, align 4
  store i32 %v2_10b1c, i32* %r3.global-to-local, align 4
  %v2_10b20 = icmp ugt i32 %v2_10b1c, 10
  store i1 %v2_10b20, i1* %cpsr_c.global-to-local, align 1
  %v7_10b20 = icmp eq i32 %v2_10b1c, 11
  store i1 %v7_10b20, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_10b20, label %dec_label_pc_10018, label %dec_label_pc_10b28

dec_label_pc_10b28:                               ; preds = %dec_label_pc_10b18, %dec_label_pc_10d5c
  %v0_10b28 = load i32, i32* @r6, align 4
  %v1_10b28 = add i32 %v0_10b28, 4
  %v2_10b28 = inttoptr i32 %v1_10b28 to i32*
  %v3_10b28 = load i32, i32* %v2_10b28, align 4
  store i32 %v3_10b28, i32* %r0.global-to-local, align 4
  %v1_10b2c = call i32 @function_11e18(i32 %v3_10b28)
  store i32 %v1_10b2c, i32* %r0.global-to-local, align 4
  %v0_10b30 = load i32, i32* @r6, align 4
  %v1_10b30 = add i32 %v0_10b30, 284
  %v2_10b30 = inttoptr i32 %v1_10b30 to i8*
  %v3_10b30 = load i8, i8* %v2_10b30, align 1
  %v4_10b30 = zext i8 %v3_10b30 to i32
  %v1_10b34 = add nuw nsw i32 %v4_10b30, 1
  %v1_10b38 = urem i32 %v1_10b34, 256
  store i32 %v1_10b38, i32* %r3.global-to-local, align 4
  %v2_10b3c = icmp ugt i32 %v1_10b38, 8
  store i1 %v2_10b3c, i1* %cpsr_c.global-to-local, align 1
  %v7_10b3c = icmp eq i32 %v1_10b38, 9
  store i1 %v7_10b3c, i1* %cpsr_z.global-to-local, align 1
  %v1_10b40 = trunc i32 %v1_10b34 to i8
  store i8 %v1_10b40, i8* %v2_10b30, align 1
  store i32 -1, i32* @r4, align 4
  %v0_10b48 = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10b48 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v2_10b48 = xor i1 %v1_10b48, true
  %v3_10b48 = and i1 %v0_10b48, %v2_10b48
  br i1 %v3_10b48, label %bb392, label %.thread251

.thread251:                                       ; preds = %dec_label_pc_10b28
  %v1_10b4c247252 = load i32, i32* @r6, align 4
  %v2_10b4c248253 = add i32 %v1_10b4c247252, 4
  %v3_10b4c249254 = inttoptr i32 %v2_10b4c248253 to i32*
  store i32 -1, i32* %v3_10b4c249254, align 4
  br label %bb393

bb392:                                            ; preds = %dec_label_pc_10b28
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_10b4c243 = load i32, i32* @r6, align 4
  %v2_10b4c244 = add i32 %v1_10b4c243, 4
  %v3_10b4c245 = inttoptr i32 %v2_10b4c244 to i32*
  store i32 -1, i32* %v3_10b4c245, align 4
  %v4_10b50 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b50 = load i32, i32* @r6, align 4
  %v6_10b50 = add i32 %v5_10b50, 12
  %v7_10b50 = inttoptr i32 %v6_10b50 to i32*
  store i32 %v4_10b50, i32* %v7_10b50, align 4
  %v4_10b54 = load i32, i32* %r3.global-to-local, align 4
  %v5_10b54 = trunc i32 %v4_10b54 to i8
  %v6_10b54 = load i32, i32* @r6, align 4
  %v7_10b54 = add i32 %v6_10b54, 284
  %v8_10b54 = inttoptr i32 %v7_10b54 to i8*
  store i8 %v5_10b54, i8* %v8_10b54, align 1
  %v0_10b58.pre = load i1, i1* %cpsr_c.global-to-local, align 1
  %v1_10b58.pre = load i1, i1* %cpsr_z.global-to-local, align 1
  br label %bb393

bb393:                                            ; preds = %.thread251, %bb392
  %v1_10b58 = phi i1 [ %v1_10b58.pre, %bb392 ], [ %v1_10b48, %.thread251 ]
  %v0_10b58 = phi i1 [ %v0_10b58.pre, %bb392 ], [ %v0_10b48, %.thread251 ]
  %v2_10b58 = xor i1 %v1_10b58, true
  %v3_10b58 = and i1 %v0_10b58, %v2_10b58
  br i1 %v3_10b58, label %dec_label_pc_10018, label %dec_label_pc_10b5c

dec_label_pc_10b5c:                               ; preds = %bb393
  %v0_10b5c = load i32, i32* @r6, align 4
  store i32 %v0_10b5c, i32* @r0, align 4
  %v0_10b60 = call i32 @function_f3b0()
  store i32 %v0_10b60, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10018

dec_label_pc_10b68:                               ; preds = %dec_label_pc_10a44
  store i32 %v2_102a8, i32* %r1.global-to-local, align 4
  store i32 3, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v1_10b74 = add i32 %v0_10a30, 4
  %v2_10b74 = inttoptr i32 %v1_10b74 to i32*
  %v3_10b74 = load i32, i32* %v2_10b74, align 4
  store i32 %v3_10b74, i32* %r0.global-to-local, align 4
  %v5_10b78 = call i32 @function_1269c(i32 %v3_10b74, i32* nonnull %stack_var_-41, i32 3, i32 16384)
  store i32 %v5_10b78, i32* %r0.global-to-local, align 4
  store i32 %v2_10a1c, i32* %r1.global-to-local, align 4
  %v0_10b80 = load i32, i32* @r6, align 4
  %v1_10b80 = add i32 %v0_10b80, 4
  %v2_10b80 = inttoptr i32 %v1_10b80 to i32*
  %v3_10b80 = load i32, i32* %v2_10b80, align 4
  store i32 %v3_10b80, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10340

dec_label_pc_10b90:                               ; preds = %dec_label_pc_101e8
  store i32 %.pre, i32* @r0, align 4
  %v1_10b98 = add i32 %v0_10b90, 92
  store i32 %v1_10b98, i32* @r1, align 4
  store i32 192, i32* @r2, align 4
  %v3_10ba0 = call i32 @function_12440(i32 %.pre, i32 %v1_10b98, i32 192)
  store i32 %v3_10ba0, i32* %r0.global-to-local, align 4
  %v0_10ba4 = load i32, i32* @r6, align 4
  %v1_10ba4 = add i32 %v0_10ba4, 24
  %v2_10ba4 = inttoptr i32 %v1_10ba4 to i32*
  %v3_10ba4 = load i32, i32* %v2_10ba4, align 4
  store i32 %v3_10ba4, i32* %r3.global-to-local, align 4
  %v1_10ba8 = add i32 %v3_10ba4, -64
  store i32 %v1_10ba8, i32* %ip.global-to-local, align 4
  store i32 %v1_10ba8, i32* %v2_10ba4, align 4
  br label %dec_label_pc_101f8

dec_label_pc_10bb4:                               ; preds = %dec_label_pc_10ac0
  store i32 %v0_10af0, i32* @r0, align 4
  %v0_10bb8 = call i32 @function_f3b0()
  store i32 %v0_10bb8, i32* %r0.global-to-local, align 4
  %v0_10bbc = load i32, i32* @r6, align 4
  %v1_10bbc = add i32 %v0_10bbc, 24
  %v2_10bbc = inttoptr i32 %v1_10bbc to i32*
  %v3_10bbc = load i32, i32* %v2_10bbc, align 4
  store i32 %v3_10bbc, i32* %ip.global-to-local, align 4
  %v0_10bc0 = load i32, i32* @r4, align 4
  store i32 %v0_10bc0, i32* @r7, align 4
  br label %dec_label_pc_107cc

dec_label_pc_10bc8:                               ; preds = %dec_label_pc_100fc, %dec_label_pc_100b4
  store i32 0, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_10bcc

dec_label_pc_10bcc:                               ; preds = %dec_label_pc_10124, %dec_label_pc_10bc8
  %v0_10bd4 = phi i32 [ 0, %dec_label_pc_10bc8 ], [ %v0_10104, %dec_label_pc_10124 ]
  %v0_10bcc = load i32, i32* @r6, align 4
  %v1_10bcc = add i32 %v0_10bcc, 4
  %v2_10bcc = inttoptr i32 %v1_10bcc to i32*
  %v3_10bcc = load i32, i32* %v2_10bcc, align 4
  store i32 %v3_10bcc, i32* @r4, align 4
  store i32 0, i32* %ip.global-to-local, align 4
  %v2_10bd4 = inttoptr i32 %v0_10bcc to i32*
  store i32 %v0_10bd4, i32* %v2_10bd4, align 4
  %v0_10bd8 = load i32, i32* %ip.global-to-local, align 4
  %v1_10bd8 = load i32, i32* @r6, align 4
  %v2_10bd8 = add i32 %v1_10bd8, 24
  %v3_10bd8 = inttoptr i32 %v2_10bd8 to i32*
  store i32 %v0_10bd8, i32* %v3_10bd8, align 4
  %v0_fff4.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_fff4

dec_label_pc_10be0:                               ; preds = %thread-pre-split96
  %v0_10be8 = load i32, i32* @r6, align 4
  %v1_10be8 = add i32 %v0_10be8, 12
  %v2_10be8 = inttoptr i32 %v1_10be8 to i32*
  %v3_10be8 = load i32, i32* %v2_10be8, align 4
  br label %dec_label_pc_101e0.backedge

dec_label_pc_10bf0:                               ; preds = %dec_label_pc_10074
  %v0_10bf0 = load i32, i32* @r6, align 4
  %v1_10bf0 = add i32 %v0_10bf0, 4
  %v2_10bf0 = inttoptr i32 %v1_10bf0 to i32*
  %v3_10bf0 = load i32, i32* %v2_10bf0, align 4
  store i32 %v3_10bf0, i32* %r0.global-to-local, align 4
  %v1_10bf4 = call i32 @function_11e18(i32 %v3_10bf0)
  store i32 %v1_10bf4, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v0_10bfc = load i32, i32* @r5, align 4
  %v1_10bfc = load i32, i32* @r6, align 4
  %v2_10bfc = add i32 %v1_10bfc, 12
  %v3_10bfc = inttoptr i32 %v2_10bfc to i32*
  store i32 %v0_10bfc, i32* %v3_10bfc, align 4
  %v0_10c00 = load i32, i32* %r4.global-to-local, align 4
  %v1_10c00 = load i32, i32* @r6, align 4
  %v2_10c00 = add i32 %v1_10c00, 4
  %v3_10c00 = inttoptr i32 %v2_10c00 to i32*
  store i32 %v0_10c00, i32* %v3_10c00, align 4
  %v0_10c04 = load i32, i32* @r5, align 4
  %v1_10c04 = trunc i32 %v0_10c04 to i8
  %v2_10c04 = load i32, i32* @r6, align 4
  %v3_10c04 = add i32 %v2_10c04, 284
  %v4_10c04 = inttoptr i32 %v3_10c04 to i8*
  store i8 %v1_10c04, i8* %v4_10c04, align 1
  br label %dec_label_pc_10018

dec_label_pc_10c0c:                               ; preds = %dec_label_pc_1019c
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  store i32 31, i32* %r0.global-to-local, align 4
  %v1_10c10 = call i32 @function_10d98(i32 31)
  store i32 32, i32* %r0.global-to-local, align 4
  %v1_10c18 = call i32 @function_10d98(i32 32)
  store i32 %v1_10c18, i32* %r0.global-to-local, align 4
  %v0_10c1c = load i32, i32* @r6, align 4
  %v1_10c1c = add i32 %v0_10c1c, 12
  %v2_10c1c = inttoptr i32 %v1_10c1c to i32*
  %v3_10c1c = load i32, i32* %v2_10c1c, align 4
  br label %dec_label_pc_101e0.backedge

dec_label_pc_101e0.backedge.thread:               ; preds = %dec_label_pc_104c0, %dec_label_pc_10574, %dec_label_pc_107f0, %dec_label_pc_108a4, %dec_label_pc_10958
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101e8

dec_label_pc_101e0.backedge.thread500:            ; preds = %dec_label_pc_104ec, %dec_label_pc_10610, %dec_label_pc_10984, %dec_label_pc_1081c, %dec_label_pc_108d0, %dec_label_pc_10508, %dec_label_pc_1062c, %dec_label_pc_10838, %dec_label_pc_108ec, %dec_label_pc_109a0
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_101e8

dec_label_pc_101e0.backedge:                      ; preds = %dec_label_pc_10c0c, %dec_label_pc_10be0
  %storemerge503 = phi i32 [ %v3_10be8, %dec_label_pc_10be0 ], [ %v3_10c1c, %dec_label_pc_10c0c ]
  %v0_101e0.be = phi i32 [ %v3_10be8, %dec_label_pc_10be0 ], [ %v3_10c1c, %dec_label_pc_10c0c ]
  %v0_101e8151 = phi i32 [ %v0_10be8, %dec_label_pc_10be0 ], [ %v0_10c1c, %dec_label_pc_10c0c ]
  store i32 %storemerge503, i32* %r2.global-to-local, align 4
  store i1 true, i1* %cpsr_c.global-to-local, align 1
  %v2_101e0 = icmp eq i32 %v0_101e0.be, 0
  store i1 %v2_101e0, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_101e0, label %dec_label_pc_10018, label %dec_label_pc_101e8

dec_label_pc_10c24:                               ; preds = %dec_label_pc_10788
  store i32 2, i32* @r6, align 4
  %v1_10c28 = add i32 %v2_107a4, 4
  %v2_10c28 = inttoptr i32 %v1_10c28 to i32*
  %v3_10c28 = load i32, i32* %v2_10c28, align 4
  store i32 %v3_10c28, i32* @r4, align 4
  store i32 2, i32* %stack_var_-92, align 4
  %v0_10c34 = call i32 @function_ebc8()
  store i32 %v0_10c34, i32* %r0.global-to-local, align 4
  %v0_10c38 = load i32, i32* @r8, align 4
  %v1_10c38 = inttoptr i32 %v0_10c38 to i8*
  %v2_10c38 = load i8, i8* %v1_10c38, align 1
  %v3_10c38 = zext i8 %v2_10c38 to i32
  store i32 %v3_10c38, i32* %r1.global-to-local, align 4
  %v2_10c3c = call i32 @function_11ba0(i32 %v0_10c34, i32 %v3_10c38)
  store i32 %v2_10c3c, i32* %r0.global-to-local, align 4
  %v0_10c40 = load i32, i32* @r4, align 4
  %v2_10c40 = and i32 %v2_10c3c, 1073741824
  %v3_10c40 = icmp ne i32 %v2_10c40, 0
  store i1 %v3_10c40, i1* %cpsr_c.global-to-local, align 1
  %v4_10c40 = mul i32 %v2_10c3c, 4
  %v5_10c40 = add i32 %v0_10c40, %v4_10c40
  %v6_10c40 = inttoptr i32 %v5_10c40 to i32*
  %v7_10c40 = load i32, i32* %v6_10c40, align 4
  store i32 %v7_10c40, i32* %r3.global-to-local, align 4
  %v0_10c44 = load i32, i32* @sl, align 4
  store i32 %v0_10c44, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r0.global-to-local, align 4
  %v2_10c50 = inttoptr i32 %v0_10c44 to i32*
  %v3_10c50 = call i32 @function_10d6c(i32 4, i32* %v2_10c50)
  %v4_10c50 = inttoptr i32 %v3_10c50 to i8*
  store i32 %v3_10c50, i32* %r0.global-to-local, align 4
  %v2_10c54 = add i32 %v3_10c50, 1
  %v3_10c54 = inttoptr i32 %v2_10c54 to i8*
  %v4_10c54 = load i8, i8* %v3_10c54, align 1
  %v5_10c54 = zext i8 %v4_10c54 to i32
  store i32 %v5_10c54, i32* %r2.global-to-local, align 4
  %v3_10c58 = load i8, i8* %v4_10c50, align 1
  %v4_10c58 = zext i8 %v3_10c58 to i32
  %v4_10c5c = mul nuw nsw i32 %v5_10c54, 256
  %v5_10c5c = or i32 %v4_10c58, %v4_10c5c
  store i32 %v5_10c5c, i32* %r3.global-to-local, align 4
  %v1_10c60 = and i32 %v4_10c58, 128
  %v2_10c60 = icmp ne i32 %v1_10c60, 0
  store i1 %v2_10c60, i1* %cpsr_c.global-to-local, align 1
  store i32 %v5_10c54, i32* %r1.global-to-local, align 4
  %v0_10c64 = load i32, i32* @r8, align 4
  store i32 %v0_10c64, i32* %r0.global-to-local, align 4
  %v6_10c70 = call i32 @function_ee2c(i32 %v0_10c64)
  store i32 3, i32* %r0.global-to-local, align 4
  %v1_10c78 = call i32 @function_10d98(i32 3)
  store i32 4, i32* %r0.global-to-local, align 4
  %v1_10c80 = call i32 @function_10d98(i32 4)
  %v0_10c88 = load i32, i32* @r5, align 4
  store i32 %v0_10c88, i32* %r0.global-to-local, align 4
  store i32 %v2_10c8c, i32* %r1.global-to-local, align 4
  store i32 16, i32* %r2.global-to-local, align 4
  %v4_10c94 = call i32 @function_12588(i32 %v0_10c88, %sockaddr* %v3_10c94, i32 16)
  store i32 %v4_10c94, i32* %r0.global-to-local, align 4
  %v3_10c98 = icmp eq i32 %v4_10c94, -1
  store i1 %v3_10c98, i1* %cpsr_c.global-to-local, align 1
  %v8_10c98 = icmp eq i32 %v4_10c94, -1
  store i1 %v8_10c98, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_10c98, label %dec_label_pc_10ca0, label %dec_label_pc_10cb0

dec_label_pc_10ca0:                               ; preds = %dec_label_pc_10c24
  %v0_10ca0 = load i32, i32* @r5, align 4
  store i32 %v0_10ca0, i32* %r0.global-to-local, align 4
  %v1_10ca4 = call i32 @function_11e18(i32 %v0_10ca0)
  %v0_10ca8 = load i32, i32* @sl, align 4
  store i32 %v0_10ca8, i32* %r0.global-to-local, align 4
  %v1_10cac = call i32 @function_131b4(i32 %v0_10ca8)
  store i32 %v1_10cac, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10cb0

dec_label_pc_10cb0:                               ; preds = %dec_label_pc_10c24, %dec_label_pc_10ca0
  store i32 %v2_10150, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cc0 = load i32, i32* @r5, align 4
  store i32 %v0_10cc0, i32* %r0.global-to-local, align 4
  %v0_10cc4 = load i32, i32* @sl, align 4
  store i32 %v0_10cc4, i32* %stack_var_-56, align 4
  %v6_10cc8 = call i32 @function_1269c(i32 %v0_10cc0, i32* nonnull %stack_var_-56, i32 1, i32 16384)
  store i32 %v2_1064c, i32* %r1.global-to-local, align 4
  store i32 4, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cdc = load i32, i32* @r5, align 4
  store i32 %v0_10cdc, i32* %r0.global-to-local, align 4
  %v5_10ce0 = call i32 @function_1269c(i32 %v0_10cdc, i32* nonnull %stack_var_-48, i32 4, i32 16384)
  %v0_10ce8 = load i32, i32* @r6, align 4
  store i32 %v0_10ce8, i32* %r2.global-to-local, align 4
  store i32 %v2_10cec, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10cf4 = load i32, i32* @r5, align 4
  store i32 %v0_10cf4, i32* %r0.global-to-local, align 4
  %v5_10cf8 = call i32 @function_1269c(i32 %v0_10cf4, i32* nonnull %stack_var_-38, i32 %v0_10ce8, i32 16384)
  %v0_10cfc = load i32, i32* @fp, align 4
  %v1_10cfc = add i32 %v0_10cfc, 12
  store i32 %v1_10cfc, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d08 = load i32, i32* @r5, align 4
  store i32 %v0_10d08, i32* %r0.global-to-local, align 4
  %v4_10d0c = inttoptr i32 %v1_10cfc to i32*
  %v5_10d0c = call i32 @function_1269c(i32 %v0_10d08, i32* %v4_10d0c, i32 1, i32 16384)
  store i32 %v5_10d0c, i32* %r0.global-to-local, align 4
  %v0_10d10 = load i32, i32* @fp, align 4
  %v1_10d10 = inttoptr i32 %v0_10d10 to i32*
  %v2_10d10 = load i32, i32* %v1_10d10, align 4
  store i32 %v2_10d10, i32* %r1.global-to-local, align 4
  %v1_10d14 = add i32 %v0_10d10, 12
  %v2_10d14 = inttoptr i32 %v1_10d14 to i8*
  %v3_10d14 = load i8, i8* %v2_10d14, align 1
  %v4_10d14 = zext i8 %v3_10d14 to i32
  store i32 %v4_10d14, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d1c = load i32, i32* @r5, align 4
  store i32 %v0_10d1c, i32* %r0.global-to-local, align 4
  %v4_10d20 = inttoptr i32 %v2_10d10 to i32*
  %v5_10d20 = call i32 @function_1269c(i32 %v0_10d1c, i32* %v4_10d20, i32 %v4_10d14, i32 16384)
  %v0_10d24 = load i32, i32* @fp, align 4
  %v1_10d24 = add i32 %v0_10d24, 13
  store i32 %v1_10d24, i32* %r1.global-to-local, align 4
  store i32 1, i32* %r2.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v0_10d30 = load i32, i32* @r5, align 4
  store i32 %v0_10d30, i32* %r0.global-to-local, align 4
  %v4_10d34 = inttoptr i32 %v1_10d24 to i32*
  %v5_10d34 = call i32 @function_1269c(i32 %v0_10d30, i32* %v4_10d34, i32 1, i32 16384)
  %v0_10d38 = load i32, i32* @r5, align 4
  store i32 %v0_10d38, i32* %r0.global-to-local, align 4
  %v0_10d3c = load i32, i32* @fp, align 4
  %v1_10d3c = add i32 %v0_10d3c, 13
  %v2_10d3c = inttoptr i32 %v1_10d3c to i8*
  %v3_10d3c = load i8, i8* %v2_10d3c, align 1
  %v4_10d3c = zext i8 %v3_10d3c to i32
  store i32 %v4_10d3c, i32* %r2.global-to-local, align 4
  %v1_10d40 = add i32 %v0_10d3c, 4
  %v2_10d40 = inttoptr i32 %v1_10d40 to i32*
  %v3_10d40 = load i32, i32* %v2_10d40, align 4
  store i32 %v3_10d40, i32* %r1.global-to-local, align 4
  store i32 16384, i32* %r3.global-to-local, align 4
  %v4_10d48 = inttoptr i32 %v3_10d40 to i32*
  %v5_10d48 = call i32 @function_1269c(i32 %v0_10d38, i32* %v4_10d48, i32 %v4_10d3c, i32 16384)
  %v0_10d4c = load i32, i32* @r5, align 4
  store i32 %v0_10d4c, i32* %r0.global-to-local, align 4
  %v1_10d50 = call i32 @function_11e18(i32 %v0_10d4c)
  store i32 %v1_10d50, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d54

dec_label_pc_10d54:                               ; preds = %dec_label_pc_1076c, %dec_label_pc_10cb0
  %v0_10d54 = load i32, i32* @sl, align 4
  store i32 %v0_10d54, i32* %r0.global-to-local, align 4
  %v1_10d58 = call i32 @function_131b4(i32 %v0_10d54)
  store i32 %v1_10d58, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_10d5c

dec_label_pc_10d5c:                               ; preds = %dec_label_pc_10b0c, %dec_label_pc_10d54
  store i32 %stack_var_-1868.0, i32* %r1.global-to-local, align 4
  store i32 104, i32* %r3.global-to-local, align 4
  store i32 104, i32* %v2_10200, align 4
  br label %dec_label_pc_10b28

; uselistorder directives
  uselistorder i32 %v4_10c58, { 1, 0 }
  uselistorder i32 %v5_10c54, { 1, 0, 2 }
  uselistorder i32 %v2_10c3c, { 1, 0, 2 }
  uselistorder i32 %v3_10c1c, { 1, 0 }
  uselistorder i32 %v3_10be8, { 1, 0 }
  uselistorder i32 %v3_10b80, { 1, 0 }
  uselistorder i1 %v1_10b48, { 1, 0 }
  uselistorder i32 %v1_10b38, { 2, 1, 0 }
  uselistorder i32 %v1_10b34, { 1, 0 }
  uselistorder i32 %v0_10af0, { 1, 0, 2 }
  uselistorder i32 %v1_10ad8, { 2, 1, 0 }
  uselistorder i32 %v0_10ab4, { 0, 2, 1 }
  uselistorder i1 %v0_10aa4, { 1, 0 }
  uselistorder i32 %v4_10a98, { 1, 0, 2 }
  uselistorder i32 %v0_10a30, { 1, 2, 0 }
  uselistorder i1 %v7_109a4, { 1, 0 }
  uselistorder i32 %v1_109a0, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10998, { 1, 0 }
  uselistorder i8 %v3_10990, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_109a0, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_1097c, { 1, 0 }
  uselistorder i1 %v7_10974, { 1, 0 }
  uselistorder i1 %v7_1096c, { 1, 0 }
  uselistorder i1 %v7_108f0, { 1, 0 }
  uselistorder i32 %v1_108ec, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_108e4, { 1, 0 }
  uselistorder i8 %v3_108dc, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_108ec, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_108c8, { 1, 0 }
  uselistorder i1 %v7_108c0, { 1, 0 }
  uselistorder i1 %v7_108b8, { 1, 0 }
  uselistorder i1 %v7_1083c, { 1, 0 }
  uselistorder i32 %v1_10838, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10830, { 1, 0 }
  uselistorder i8 %v3_10828, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10838, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10814, { 1, 0 }
  uselistorder i1 %v7_1080c, { 1, 0 }
  uselistorder i1 %v7_10804, { 1, 0 }
  uselistorder i32 %v0_107e0, { 1, 2, 0 }
  uselistorder i32 %v2_107cc, { 1, 0 }
  uselistorder i32 %v1_107cc, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_107cc, { 3, 2, 5, 0, 1, 4, 6 }
  uselistorder i1 %v7_1077c, { 1, 0 }
  uselistorder i32 %v3_10778, { 1, 0, 2, 3 }
  uselistorder i1 %v2_10764, { 1, 0 }
  uselistorder i32 %.398, { 1, 0 }
  uselistorder i1 %v7_1074c, { 1, 0 }
  uselistorder i32 %v0_10748, { 2, 1, 0, 3 }
  uselistorder i32 %v4_10728, { 1, 0, 2 }
  uselistorder i32 %v4_10724, { 1, 0, 2 }
  uselistorder i1 %v7_10714, { 1, 0 }
  uselistorder i32 %v0_10714, { 3, 2, 0, 4, 1 }
  uselistorder i1 %v7_10630, { 1, 0 }
  uselistorder i32 %v1_1062c, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10624, { 1, 0 }
  uselistorder i8 %v3_1061c, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_1062c, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10608, { 1, 0 }
  uselistorder i1 %v7_10600, { 1, 0 }
  uselistorder i1 %v7_105f8, { 1, 0 }
  uselistorder i1 %v7_1050c, { 1, 0 }
  uselistorder i32 %v1_10508, { 2, 1, 3, 4, 0 }
  uselistorder i1 %v8_10500, { 1, 0 }
  uselistorder i8 %v3_104f8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_10508, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_104e4, { 1, 0 }
  uselistorder i1 %v7_104dc, { 1, 0 }
  uselistorder i1 %v7_104d4, { 1, 0 }
  uselistorder i32 %v0_1047c, { 2, 1, 0 }
  uselistorder i1 %v7_1046c, { 1, 0 }
  uselistorder i1 %v8_10460, { 1, 0 }
  uselistorder i8 %v3_10458, { 4, 5, 6, 7, 8, 3, 2, 1, 0 }
  uselistorder i32 %v0_10468, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_10444, { 1, 0 }
  uselistorder i1 %v7_1043c, { 1, 0 }
  uselistorder i32 %v0_103e4, { 2, 1, 0 }
  uselistorder i1 %v7_103cc, { 1, 0 }
  uselistorder i1 %v8_103c0, { 1, 0 }
  uselistorder i8 %v3_103b8, { 6, 7, 8, 9, 10, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_103c8, { 0, 1, 2, 4, 5, 3 }
  uselistorder i1 %v7_103a4, { 1, 0 }
  uselistorder i1 %v7_1039c, { 1, 0 }
  uselistorder i1 %v7_10394, { 1, 0 }
  uselistorder i32 %v0_10370.pre, { 0, 2, 1 }
  uselistorder i32 %v1_10358, { 1, 0 }
  uselistorder i32 %v1_10354, { 1, 0 }
  uselistorder i32 %v1_1034c, { 0, 2, 3, 4, 5, 1 }
  uselistorder i32 %v3_10348, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v0_10348, { 0, 2, 1 }
  uselistorder i1 %v7_102f0, { 1, 0 }
  uselistorder i1 %v2_102dc, { 1, 0, 2 }
  uselistorder i1 %v2_102c4, { 1, 0, 2 }
  uselistorder i32 %v1_102e4, { 1, 2, 3, 4, 0 }
  uselistorder i32 %v1_102b8, { 4, 2, 1, 3, 0 }
  uselistorder i32 %v1_102e0, { 1, 0 }
  uselistorder i32 %v2_102e8, { 0, 1, 4, 2, 3, 5 }
  uselistorder i32 %v0_10260, { 4, 17, 5, 19, 6, 18, 7, 16, 8, 15, 9, 14, 10, 13, 3, 2, 11, 12, 20, 1, 0 }
  uselistorder i32 %v1_1023c, { 1, 2, 3, 0 }
  uselistorder i32 %v3_10238, { 1, 0 }
  uselistorder i32 %v5_1021c, { 0, 4, 1, 2, 3, 5, 6, 7 }
  uselistorder i32 %v2_10208, { 1, 0, 2 }
  uselistorder i32 %v3_10204, { 1, 0, 2 }
  uselistorder i32 %v0_10b90, { 1, 0, 2 }
  uselistorder i32 %v0_101d4, { 1, 0, 2 }
  uselistorder i1 %v7_101b4, { 1, 0 }
  uselistorder i1 %v7_1018c, { 1, 0 }
  uselistorder i32 %v0_10104, { 0, 3, 2, 4, 6, 5, 1 }
  uselistorder i32 %v3_100e4, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v2_100d8, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v1_10064, { 2, 1, 0 }
  uselistorder i32 %v3_10060, { 1, 0 }
  uselistorder i1 %v7_10048, { 1, 0 }
  uselistorder i32 %v3_10044, { 5, 4, 2, 1, 0, 6, 7, 3 }
  uselistorder i32 %v0_10038, { 1, 0 }
  uselistorder i32 %v1_1001c, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 %v1_10008, { 2, 1, 0 }
  uselistorder i32 %v3_10004, { 1, 0 }
  uselistorder i32 %v0_10008, { 1, 0 }
  uselistorder i32 %v2_1064c, { 1, 2, 3, 0 }
  uselistorder i32 %v2_10150, { 4, 8, 5, 6, 3, 2, 7, 9, 10, 1, 0 }
  uselistorder i32 %v2_10a24, { 1, 2, 0 }
  uselistorder i32 %v2_102a8, { 0, 2, 1 }
  uselistorder i32* %v2_10200, { 1, 0, 2 }
  uselistorder i32 %v2_10058, { 0, 3, 1, 2 }
  uselistorder i32 %v2_ff9c, { 1, 0 }
  uselistorder i32 %v1_ff9c, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v0_ff9c, { 2, 4, 0, 1, 3, 5 }
  uselistorder i32 %v1_ff6c, { 2, 1, 0 }
  uselistorder i32 %v1_ff68, { 1, 0 }
  uselistorder i32 %v2_ff38, { 1, 0 }
  uselistorder i32 %v0_ff38, { 3, 0, 1, 2, 4 }
  uselistorder i32 %v1_ff30, { 1, 0 }
  uselistorder i32 %v3_ff18, { 3, 5, 2, 6, 4, 1, 0, 7 }
  uselistorder i1 %v7_fee8, { 0, 3, 1, 2 }
  uselistorder i1 %v2_fee8, { 1, 2, 0 }
  uselistorder i32 %v2_fee0, { 0, 3, 4, 5, 2, 1 }
  uselistorder i8 %stack_var_-1876.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1880.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8* %stack_var_-1884.2, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1872.3, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %stack_var_-1868.1, { 3, 5, 4, 2, 1, 0 }
  uselistorder i32 %v0_fed8, { 1, 0 }
  uselistorder i32 %v1_febc, { 0, 2, 1, 3, 4, 5 }
  uselistorder i8 %stack_var_-1876.1, { 1, 0 }
  uselistorder i32 %stack_var_-1880.1, { 1, 0 }
  uselistorder i8* %stack_var_-1884.1, { 1, 0 }
  uselistorder i32 %stack_var_-1872.2, { 1, 0 }
  uselistorder i32 %stack_var_-1868.0, { 2, 1, 3, 4, 0 }
  uselistorder i32 %v1_feb0, { 0, 1, 3, 2 }
  uselistorder i32 %v0_feb0, { 0, 2, 1 }
  uselistorder i32 %v1_fea0, { 1, 0 }
  uselistorder i32 %v3_fe88, { 1, 0, 2 }
  uselistorder i32 %storemerge258, { 1, 0, 2 }
  uselistorder i32 %v3_fe04, { 1, 0 }
  uselistorder i32 %v1_fdf0, { 1, 0 }
  uselistorder i32 %v1_fdd8, { 1, 2, 0 }
  uselistorder i32 %v0_fde4, { 0, 3, 2, 1 }
  uselistorder i32 %v0_fda8, { 2, 1, 0, 3, 5, 4 }
  uselistorder i32 %v2_fd9c, { 2, 1, 0 }
  uselistorder i32 %v1_fd78, { 3, 1, 0, 4, 2 }
  uselistorder i1 %v2_fd50, { 1, 0 }
  uselistorder i32 %v4_fcf0, { 2, 3, 7, 0, 1, 5, 4, 6 }
  uselistorder i32 %v0_fc6c, { 1, 0, 2, 3 }
  uselistorder i32 %v1_fc58, { 1, 0, 2, 3, 4 }
  uselistorder i32 %v4_fb78, { 1, 0 }
  uselistorder i32 %v1_fb74, { 2, 0, 1 }
  uselistorder i32 %v4_fb50, { 1, 0 }
  uselistorder i1 %v2_faa0, { 1, 0 }
  uselistorder i1 %v2_fa8c, { 1, 0 }
  uselistorder i1 %v2_fa78, { 1, 0 }
  uselistorder i32 %.397, { 3, 2, 1, 0 }
  uselistorder i1 %v7_fa54, { 2, 1, 0, 5, 4, 3 }
  uselistorder i1 %v2_fa3c, { 1, 0 }
  uselistorder i1 %v3_fa20, { 1, 0, 2 }
  uselistorder i1 %v2_fa0c, { 1, 0 }
  uselistorder i1 %v2_f9e8, { 1, 0 }
  uselistorder i32 %v1_f998, { 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 31, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v1_f984, { 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 30, 31, 32, 29, 28, 27, 26, 25, 24, 23, 22, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 6, 7, 8, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_f980, { 4, 5, 6, 7, 0, 8, 1, 2, 3, 9 }
  uselistorder i32 %v4_f970, { 1, 0 }
  uselistorder i32 %v0_f960, { 0, 1, 3, 2 }
  uselistorder i32 %v0_f950, { 1, 0 }
  uselistorder i8 %stack_var_-1876.0, { 1, 0 }
  uselistorder i32 %v0_fce4, { 5, 2, 3, 6, 0, 1, 4, 7 }
  uselistorder i8* %stack_var_-1884.0, { 3, 2, 0, 1 }
  uselistorder i32 %stack_var_-1872.0, { 0, 3, 2, 1 }
  uselistorder i32 %v4_f814, { 1, 0 }
  uselistorder i32 %v0_f804, { 2, 0, 1, 3 }
  uselistorder i32 %v3_f7d4, { 1, 0 }
  uselistorder i32 %v4_f7c0, { 2, 0, 1 }
  uselistorder i32 %v0_f7a8, { 0, 2, 1 }
  uselistorder i32 %v0_f750, { 3, 2, 0, 1 }
  uselistorder i1 %v7_f6f4, { 1, 0 }
  uselistorder i32 %v3_f6ec, { 3, 2, 1, 0, 4, 5 }
  uselistorder i32 %v0_f6d4, { 0, 2, 1 }
  uselistorder i32 %v0_f6bc, { 2, 1, 0 }
  uselistorder i32 %v0_f698, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %storemerge266, { 1, 0 }
  uselistorder i32 %v0_f630, { 3, 2, 1, 0, 4 }
  uselistorder i32* %stack_var_-36, { 1, 2, 3, 0 }
  uselistorder i32* %stack_var_-52, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 11, 14, 12, 13 }
  uselistorder i32* %stack_var_-92, { 1, 0, 4, 2, 3, 5 }
  uselistorder i32* %stack_var_-64, { 1, 0 }
  uselistorder i32* %stack_var_-48, { 1, 4, 3, 5, 6, 2, 7, 0, 8, 9 }
  uselistorder i32* %stack_var_-56, { 0, 9, 10, 3, 11, 6, 12, 5, 13, 7, 14, 8, 15, 4, 16, 17, 1, 2, 18, 19 }
  uselistorder i32* %stack_var_-84, { 1, 0 }
  uselistorder i32 %tmp276, { 1, 0 }
  uselistorder i32* %sl.global-to-local, { 1, 0, 2, 3, 4, 5, 6, 7 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r3.global-to-local, { 64, 12, 13, 14, 15, 16, 17, 18, 19, 20, 65, 46, 66, 67, 68, 69, 70, 21, 22, 36, 47, 48, 49, 50, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 23, 103, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 59, 60, 61, 43, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 71, 72, 73, 74, 75, 76, 62, 63, 77, 78, 80, 79, 81, 82, 83, 84, 85, 87, 89, 88, 86, 90, 91, 92, 93, 99, 94, 95, 96, 97, 100, 150, 151, 101, 152, 153, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 102, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 134, 137, 136, 98, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149 }
  uselistorder i32* %r2.global-to-local, { 9, 10, 11, 12, 13, 14, 15, 16, 17, 23, 36, 46, 32, 37, 0, 1, 2, 3, 5, 4, 6, 8, 7, 18, 19, 20, 21, 22, 24, 25, 26, 28, 27, 29, 30, 31, 33, 35, 34, 41, 43, 42, 38, 39, 40, 47, 48, 49, 50, 51, 52, 53, 44, 45, 54, 55, 56, 57, 58, 60, 62, 61, 120, 59, 63, 64, 65, 66, 67, 71, 68, 69, 70, 72, 75, 73, 76, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119 }
  uselistorder i32* %r1.global-to-local, { 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 49, 40, 41, 21, 22, 36, 37, 1, 2, 3, 4, 5, 6, 7, 8, 9, 101, 102, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 42, 43, 0, 50, 51, 52, 44, 45, 46, 47, 53, 54, 55, 57, 58, 56, 59, 60, 62, 61, 100, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99 }
  uselistorder i32* %r0.global-to-local, { 31, 30, 33, 32, 34, 35, 36, 38, 37, 39, 40, 41, 42, 43, 44, 46, 45, 47, 49, 48, 51, 50, 52, 53, 124, 125, 126, 143, 142, 55, 144, 118, 120, 119, 145, 147, 146, 54, 57, 56, 58, 100, 99, 102, 101, 103, 104, 121, 1, 0, 2, 4, 3, 6, 5, 7, 8, 9, 10, 12, 11, 14, 13, 16, 15, 17, 18, 19, 20, 22, 21, 24, 23, 26, 25, 27, 28, 29, 127, 60, 59, 61, 63, 62, 64, 65, 67, 66, 68, 70, 69, 71, 73, 72, 74, 75, 76, 77, 78, 79, 81, 80, 83, 82, 85, 84, 86, 87, 88, 90, 89, 91, 93, 92, 95, 94, 96, 97, 98, 106, 105, 108, 107, 112, 109, 110, 111, 129, 128, 131, 130, 114, 113, 115, 116, 117, 123, 122, 151, 148, 149, 133, 132, 134, 136, 135, 138, 137, 139, 140, 141, 158, 150, 153, 152, 154, 155, 157, 156, 159, 162, 160, 161, 163, 165, 169, 164, 168, 166, 167, 173, 171, 172, 175, 174, 176, 178, 177, 170, 179, 180, 181, 183, 182, 184, 185, 187, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 203, 206, 205, 207, 211, 210, 208, 209, 212, 213, 214, 215 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 14, 5, 6, 7, 8, 9, 10, 11, 12, 13 }
  uselistorder i32* %ip.global-to-local, { 20, 21, 6, 22, 7, 14, 0, 2, 1, 4, 3, 5, 18, 8, 9, 10, 11, 12, 13, 17, 19, 15, 16, 23, 24, 25, 26, 27, 28, 45, 31, 29, 30, 32, 49, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48 }
  uselistorder i1* %cpsr_z.global-to-local, { 27, 112, 221, 222, 98, 102, 103, 104, 105, 106, 28, 29, 56, 57, 58, 75, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 94, 30, 31, 32, 135, 34, 35, 36, 37, 38, 39, 44, 45, 40, 41, 42, 43, 46, 47, 48, 53, 54, 49, 50, 51, 52, 55, 59, 60, 64, 65, 61, 62, 63, 66, 96, 67, 72, 73, 68, 69, 70, 71, 74, 95, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 213, 107, 108, 109, 110, 111, 214, 97, 33, 99, 100, 101, 113, 115, 114, 116, 117, 119, 121, 120, 215, 118, 122, 123, 124, 125, 126, 127, 132, 128, 129, 130, 131, 216, 217, 218, 219, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 134, 177, 178, 133, 179, 180, 208, 181, 182, 183, 184, 185, 186, 207, 187, 188, 189, 190, 191, 206, 192, 193, 194, 205, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 220, 212 }
  uselistorder i1* %cpsr_c.global-to-local, { 27, 28, 29, 110, 220, 221, 96, 101, 100, 102, 103, 104, 30, 57, 58, 59, 76, 77, 78, 79, 0, 1, 6, 7, 2, 3, 4, 5, 8, 9, 10, 15, 16, 11, 12, 13, 14, 17, 18, 19, 24, 25, 20, 21, 22, 23, 26, 92, 31, 32, 33, 132, 34, 35, 36, 37, 38, 39, 40, 45, 46, 41, 42, 43, 44, 47, 48, 49, 54, 55, 50, 51, 52, 53, 56, 60, 61, 65, 66, 62, 63, 64, 67, 94, 68, 73, 74, 69, 70, 71, 72, 75, 93, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 211, 105, 106, 107, 108, 109, 212, 95, 131, 97, 98, 99, 111, 113, 112, 114, 115, 117, 119, 118, 213, 116, 120, 121, 122, 123, 124, 129, 125, 126, 127, 128, 215, 216, 217, 133, 218, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 130, 171, 172, 214, 173, 174, 204, 175, 176, 177, 178, 179, 180, 203, 181, 182, 183, 184, 185, 202, 186, 187, 188, 201, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 219, 210 }
  uselistorder i32 (i32)* @function_ee2c, { 1, 0 }
  uselistorder i8 31, { 8, 2, 3, 0, 4, 5, 9, 10, 1, 6, 7 }
  uselistorder i32* @fp, { 3, 4, 5, 6, 7, 49, 50, 51, 0, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 1, 46, 47, 48, 52, 2, 53, 54, 55 }
  uselistorder i32* bitcast ([3 x i8]* @global_var_14744.205 to i32*), { 2, 4, 3, 1, 0, 6, 5 }
  uselistorder [3 x i8]* @global_var_14744.205, { 1, 0 }
  uselistorder i8 58, { 4, 6, 5, 3, 2, 1, 0, 7, 8 }
  uselistorder i8 57, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 62, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 61, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 37, { 3, 5, 4, 2, 1, 0 }
  uselistorder i8 34, { 4, 6, 5, 3, 2, 1, 0 }
  uselistorder i8 36, { 7, 8, 11, 12, 9, 10, 5, 6, 3, 4, 2, 0, 1 }
  uselistorder i8 35, { 8, 9, 12, 13, 10, 11, 6, 7, 4, 5, 2, 3, 0, 1 }
  uselistorder i32 (i32, i32*, i32, i32)* @function_1269c, { 6, 7, 8, 9, 10, 11, 12, 19, 0, 1, 2, 3, 4, 5, 13, 14, 15, 16, 17, 18, 21, 22, 20, 27, 23, 24, 25, 26, 28, 29, 31, 30 }
  uselistorder i32 251, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i8 -3, { 1, 2, 3, 0 }
  uselistorder i8 -4, { 1, 2, 3, 0 }
  uselistorder i32 1073741824, { 1, 0 }
  uselistorder i32 (i32)* @function_10d98, { 45, 44, 35, 34, 39, 48, 47, 46, 43, 42, 41, 40, 38, 37, 36, 33, 32, 9, 31, 30, 29, 49, 28, 27, 26, 25, 24, 23, 22, 6, 5, 4, 3, 2, 1, 0, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 8, 7 }
  uselistorder i32 (i32, i32, i32, i32)* @function_115d8, { 2, 4, 3, 1, 0 }
  uselistorder i32 (i32, i32*)* @function_10d6c, { 3, 9, 0, 1, 2, 4, 5, 6, 7, 8, 10, 11, 32, 12, 13, 14, 15, 16, 36, 37, 38, 39, 40, 41, 42, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 33 }
  uselistorder i32 (i32)* @function_10e50, { 27, 36, 35, 34, 33, 32, 31, 30, 29, 28, 26, 25, 10, 24, 23, 22, 21, 20, 6, 5, 4, 3, 2, 1, 0, 19, 18, 17, 16, 15, 14, 13, 12, 11, 8, 7, 9 }
  uselistorder i8* bitcast (i8** @global_var_1d1e8.137 to i8*), { 4, 0, 3, 2, 1 }
  uselistorder i8* @global_var_1d1e9.138, { 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1e8.137 to i32), { 1, 0 }
  uselistorder i32 (i32, i32, i32, i32, i32)* @function_12038, { 2, 0, 1 }
  uselistorder i32 284, { 3, 4, 5, 0, 1, 2, 6, 7 }
  uselistorder i32 1544, { 1, 0 }
  uselistorder i32 1672, { 2, 0, 1 }
  uselistorder i32 ()* @function_f3b0, { 3, 2, 1, 0 }
  uselistorder i32 254, { 4, 5, 6, 0, 1, 2, 3 }
  uselistorder i32 5888, { 1, 0 }
  uselistorder i32 (i32, i32*, i32, i32, i32, i32)* @function_126c8, { 0, 1, 2, 3, 4, 5, 6, 7, 9, 8 }
  uselistorder i32 16384, { 33, 56, 34, 57, 35, 58, 36, 59, 37, 60, 38, 61, 13, 62, 12, 69, 0, 50, 1, 51, 2, 52, 3, 53, 4, 54, 5, 55, 6, 63, 7, 64, 8, 65, 9, 66, 31, 67, 32, 68, 29, 71, 30, 72, 28, 70, 39, 73, 10, 74, 11, 75, 14, 83, 40, 84, 42, 76, 16, 77, 43, 78, 44, 79, 45, 80, 15, 81, 41, 82, 17, 85, 18, 86, 19, 87, 46, 47, 20, 88, 21, 89, 23, 90, 22, 91, 25, 92, 24, 93, 48, 49, 26, 94, 27, 95 }
  uselistorder i32 (i32, i32, i32, i32)* @function_d114, { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 (i32, i32)* @function_11c6c, { 1, 0 }
  uselistorder i32 (i32, i32)* @function_d0b8, { 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i8* @global_var_1d1cc.194, { 2, 1, 0 }
  uselistorder i32 16711680, { 3, 0, 1, 2 }
  uselistorder i32 214, { 1, 0 }
  uselistorder i32 184, { 1, 0 }
  uselistorder i32 185, { 1, 0 }
  uselistorder i32 223, { 4, 0, 1, 2, 3 }
  uselistorder i32 192, { 2, 3, 4, 0, 1 }
  uselistorder i32 126, { 1, 0 }
  uselistorder i32 ptrtoint ([6 x i8]* @global_var_146ec.176 to i32), { 0, 4, 1, 2, 3, 5 }
  uselistorder i32 ptrtoint ([8 x i8]* @global_var_146d8.172 to i32), { 0, 4, 1, 5, 2, 6, 3, 7 }
  uselistorder i32 (i32, i32, i32)* @function_f484, { 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_1474c.166 to i32), { 0, 2, 1, 3 }
  uselistorder i32 ptrtoint ([5 x i8]* @global_var_14748.164 to i32), { 0, 8, 1, 9, 2, 10, 3, 11, 4, 12, 5, 13, 6, 14, 7, 15 }
  uselistorder i8* @global_var_1d1dd.160, { 1, 0 }
  uselistorder i8 64, { 6, 0, 1, 7, 2, 3, 4, 5 }
  uselistorder i32 ptrtoint (i32* @global_var_1d1d0.151 to i32), { 3, 2, 4, 5, 0, 6, 1, 7, 8 }
  uselistorder i8* @global_var_1d1dc.152, { 1, 0 }
  uselistorder i8** @global_var_1d1bc.147, { 0, 2, 1 }
  uselistorder i32 ptrtoint (i8** @global_var_1d1bc.147 to i32), { 0, 2, 1, 9, 8, 3, 7, 6, 5, 4 }
  uselistorder i32 1024, { 1, 0 }
  uselistorder i32 1023, { 2, 0, 1 }
  uselistorder i32 65280, { 35, 1, 18, 0, 2, 36, 3, 37, 25, 26, 4, 38, 19, 27, 39, 40, 5, 6, 41, 20, 7, 42, 28, 21, 22, 29, 30, 31, 43, 44, 45, 8, 46, 9, 10, 32, 33, 34, 47, 48, 49, 11, 50, 12, 13, 51, 52, 14, 53, 15, 54, 55, 23, 56, 57, 16, 58, 59, 24, 60, 61, 17 }
  uselistorder i32 ()* @function_ebc8, { 74, 73, 72, 71, 70, 69, 68, 64, 67, 66, 65, 63, 62, 61, 60, 59, 58, 20, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 19, 18, 17, 5, 4, 3, 2, 1, 0, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6 }
  uselistorder i32 2048, { 7, 6, 4, 9, 10, 0, 1, 2, 8, 11, 5, 12, 3, 13, 14 }
  uselistorder i32* @global_var_1d254.145, { 1, 5, 2, 3, 4, 0 }
  uselistorder i32* @global_var_1d250.143, { 1, 2, 3, 4, 0 }
  uselistorder i32 288, { 1, 2, 5, 6, 0, 7, 3, 4, 8 }
  uselistorder i32* @global_var_1d1ec.131, { 2, 0, 3, 4, 1, 5, 6 }
  uselistorder i32 (i32)* @function_ec20, { 1, 0 }
  uselistorder i32* @global_var_1d234.50, { 4, 5, 1, 2, 3, 6, 0, 7, 15, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32 ()* @function_117cc, { 2, 1, 0 }
  uselistorder i32* @global_var_1d258.129, { 0, 2, 1 }
  uselistorder i32 ()* @function_11e44, { 6, 5, 4, 3, 2, 1, 0 }
  uselistorder i32* @sl, { 1, 2, 3, 4, 5, 6, 7, 8, 86, 87, 88, 9, 10, 11, 12, 13, 14, 15, 18, 16, 17, 0, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 33, 34, 35, 36, 37, 38 }
  uselistorder label %dec_label_pc_10d5c, { 1, 0 }
  uselistorder label %dec_label_pc_10d54, { 1, 0 }
  uselistorder label %dec_label_pc_10cb0, { 1, 0 }
  uselistorder label %dec_label_pc_101e0.backedge.thread500, { 9, 2, 8, 4, 7, 3, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_101e0.backedge.thread, { 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_10bcc, { 1, 0 }
  uselistorder label %bb393, { 1, 0 }
  uselistorder label %dec_label_pc_10b28, { 1, 0 }
  uselistorder label %thread-pre-split96, { 1, 0 }
  uselistorder label %dec_label_pc_10a6c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_109a0, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_1098c, { 1, 0 }
  uselistorder label %dec_label_pc_108ec, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_108d8, { 1, 0 }
  uselistorder label %dec_label_pc_10838, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10824, { 1, 0 }
  uselistorder label %dec_label_pc_107cc, { 4, 5, 1, 2, 3, 11, 6, 7, 8, 9, 10, 0 }
  uselistorder label %dec_label_pc_107b0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_1062c, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_10618, { 1, 0 }
  uselistorder label %dec_label_pc_10508, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_104f4, { 1, 0 }
  uselistorder label %dec_label_pc_10468, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_10454, { 1, 0 }
  uselistorder label %dec_label_pc_103e4, { 1, 0 }
  uselistorder label %dec_label_pc_103c8, { 1, 0, 2, 3, 4 }
  uselistorder label %dec_label_pc_103b4, { 1, 0 }
  uselistorder label %dec_label_pc_10370, { 1, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder label %dec_label_pc_10360, { 6, 2, 3, 4, 1, 0, 5 }
  uselistorder label %bb366, { 2, 1, 0 }
  uselistorder label %bb363, { 2, 1, 0 }
  uselistorder label %dec_label_pc_102c0, { 1, 0 }
  uselistorder label %dec_label_pc_102c0.preheader, { 1, 0 }
  uselistorder label %dec_label_pc_10248, { 1, 0 }
  uselistorder label %bb360, { 1, 0 }
  uselistorder label %dec_label_pc_101f8, { 1, 0 }
  uselistorder label %dec_label_pc_101e8, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_101e8.lr.ph, { 1, 0 }
  uselistorder label %dec_label_pc_101dc.loopexit, { 4, 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_1013c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_10018, { 1, 7, 8, 4, 5, 0, 6, 2, 3 }
  uselistorder label %dec_label_pc_fff4, { 1, 0 }
  uselistorder label %bb355, { 1, 0 }
  uselistorder label %dec_label_pc_ff18, { 1, 0 }
  uselistorder label %dec_label_pc_ff10, { 1, 0 }
  uselistorder label %bb353, { 1, 2, 3, 0, 5, 4 }
  uselistorder label %dec_label_pc_fe3c.dec_label_pc_fe3c_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fe20.dec_label_pc_fe20_crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_fe18, { 3, 0, 1, 2 }
  uselistorder label %dec_label_pc_fdd8, { 1, 0 }
  uselistorder label %dec_label_pc_fc78, { 10, 0, 1, 2, 7, 8, 3, 4, 5, 6, 9, 11 }
  uselistorder label %dec_label_pc_fc6c, { 1, 0 }
  uselistorder label %.thread65, { 2, 1, 0 }
  uselistorder label %.thread63, { 1, 0 }
  uselistorder label %dec_label_pc_fad8, { 1, 0 }
  uselistorder label %dec_label_pc_facc, { 1, 0 }
  uselistorder label %dec_label_pc_fac0, { 1, 0 }
  uselistorder label %dec_label_pc_fab4, { 1, 0 }
  uselistorder label %dec_label_pc_faa8, { 1, 0 }
  uselistorder label %dec_label_pc_fa94, { 1, 0 }
  uselistorder label %dec_label_pc_fa80, { 1, 0 }
  uselistorder label %dec_label_pc_fa6c, { 1, 0 }
  uselistorder label %dec_label_pc_fa4c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_fa28, { 1, 0 }
  uselistorder label %dec_label_pc_fa1c, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9f8, { 1, 2, 0 }
  uselistorder label %dec_label_pc_f9d4, { 1, 0 }
  uselistorder label %bb316, { 1, 0 }
  uselistorder label %dec_label_pc_f980, { 30, 6, 10, 2, 11, 3, 12, 4, 13, 5, 14, 0, 15, 16, 17, 18, 7, 8, 9, 19, 20, 21, 22, 23, 24, 25, 26, 27, 1, 28, 29, 31 }
  uselistorder label %dec_label_pc_f750, { 1, 0 }
}

define i32 @function_10d6c(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10d6c:
  %v3_10d70 = mul i32 %arg1, 8
  %v2_10d74 = add i32 %v3_10d70, ptrtoint (i32* @global_var_1d260.211 to i32)
  %v2_10d78 = icmp eq i32* %arg2, null
  br i1 %v2_10d78, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_10d6c
  %v3_10d8411 = inttoptr i32 %v2_10d74 to i32*
  %v4_10d8412 = load i32, i32* %v3_10d8411, align 4
  br label %bb15

bb:                                               ; preds = %dec_label_pc_10d6c
  %v2_10d7c = add i32 %v3_10d70, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 5)
  %v3_10d7c = inttoptr i32 %v2_10d7c to i8*
  %v4_10d7c = load i8, i8* %v3_10d7c, align 1
  %v5_10d7c = zext i8 %v4_10d7c to i32
  store i32 %v5_10d7c, i32* @r2, align 4
  %v2_10d80 = add i32 %v3_10d70, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 4)
  %v3_10d80 = inttoptr i32 %v2_10d80 to i8*
  %v4_10d80 = load i8, i8* %v3_10d80, align 4
  %v5_10d80 = zext i8 %v4_10d80 to i32
  %v3_10d84 = inttoptr i32 %v2_10d74 to i32*
  %v4_10d84 = load i32, i32* %v3_10d84, align 4
  %v5_10d88 = mul nuw nsw i32 %v5_10d7c, 256
  %v6_10d88 = or i32 %v5_10d80, %v5_10d88
  store i32 %v6_10d88, i32* %arg2, align 4
  br label %bb15

bb15:                                             ; preds = %.thread, %bb
  %v4_10d84714 = phi i32 [ %v4_10d8412, %.thread ], [ %v4_10d84, %bb ]
  ret i32 %v4_10d84714

; uselistorder directives
  uselistorder i32 %v2_10d74, { 1, 0 }
  uselistorder i32 %v3_10d70, { 2, 1, 0 }
  uselistorder label %bb15, { 1, 0 }
}

define i32 @function_10d98(i32 %arg1) local_unnamed_addr {
dec_label_pc_10d98:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10d98 = mul i32 %arg1, 8
  %v3_10d9c = load i32, i32* @r4, align 4
  store i32 %v3_10d9c, i32* %stack_var_-20, align 4
  %v3_10dac = and i32 %v3_10d98, 2040
  %v2_10db0 = add i32 %v3_10dac, ptrtoint (i32* @global_var_1d260.211 to i32)
  store i32 %v2_10db0, i32* @lr, align 4
  %v1_10db8 = add i32 %v3_10dac, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 4)
  store i32 %v1_10db8, i32* %r7.global-to-local, align 4
  %v2_10dbc = load i32, i32* @global_var_1d030.214, align 4
  store i32 %v2_10dbc, i32* @r2, align 4
  %v2_10dc0 = inttoptr i32 %v1_10db8 to i8*
  %v3_10dc0 = load i8, i8* %v2_10dc0, align 4
  %v4_10dc0 = zext i8 %v3_10dc0 to i32
  %v1_10dc4 = add i32 %v3_10dac, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 5)
  %v2_10dc4 = inttoptr i32 %v1_10dc4 to i8*
  %v3_10dc4 = load i8, i8* %v2_10dc4, align 1
  %v4_10dc4 = zext i8 %v3_10dc4 to i32
  %v3_10dc8 = udiv i32 %v2_10dbc, 256
  %v4_10dcc = mul nuw nsw i32 %v4_10dc4, 256
  %v5_10dcc = or i32 %v4_10dcc, %v4_10dc0
  %v7_10dcc = icmp eq i32 %v5_10dcc, 0
  store i1 %v7_10dcc, i1* @cpsr_z, align 1
  %v3_10dd0 = udiv i32 %v2_10dbc, 65536
  %v1_10dd4 = urem i32 %v3_10dc8, 256
  store i32 %v1_10dd4, i32* %r6.global-to-local, align 4
  %v1_10dd8 = urem i32 %v3_10dd0, 256
  store i32 %v1_10dd8, i32* %r5.global-to-local, align 4
  %v3_10ddc = udiv i32 %v2_10dbc, 16777216
  store i32 %v3_10ddc, i32* %r4.global-to-local, align 4
  %v1_10de0 = urem i32 %v2_10dbc, 256
  br i1 %v7_10dcc, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10d98
  store i32 %v3_10d9c, i32* @r4, align 4
  ret i32 %v1_10de0

bb8:                                              ; preds = %dec_label_pc_10d98
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10dec

dec_label_pc_10dec:                               ; preds = %dec_label_pc_10dec, %bb8
  %v2_10df8 = phi i32 [ %v1_10e34, %dec_label_pc_10dec ], [ 0, %bb8 ]
  %v0_10dec = phi i32 [ %v0_10e2c, %dec_label_pc_10dec ], [ %v2_10db0, %bb8 ]
  %v1_10dec = inttoptr i32 %v0_10dec to i32*
  %v2_10dec = load i32, i32* %v1_10dec, align 4
  %v2_10df0 = add i32 %v2_10dec, %v2_10df8
  %v3_10df0 = inttoptr i32 %v2_10df0 to i8*
  %v4_10df0 = load i8, i8* %v3_10df0, align 1
  %v6_10df0 = zext i8 %v4_10df0 to i32
  %v2_10df4 = xor i32 %v6_10df0, %v1_10de0
  %v1_10df8 = trunc i32 %v2_10df4 to i8
  store i8 %v1_10df8, i8* %v3_10df0, align 1
  %v0_10dfc = load i32, i32* @lr, align 4
  %v1_10dfc = inttoptr i32 %v0_10dfc to i32*
  %v2_10dfc = load i32, i32* %v1_10dfc, align 4
  %v0_10e00 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e00 = add i32 %v0_10e00, %v2_10dfc
  %v3_10e00 = inttoptr i32 %v2_10e00 to i8*
  %v4_10e00 = load i8, i8* %v3_10e00, align 1
  %v6_10e00 = zext i8 %v4_10e00 to i32
  %v0_10e04 = load i32, i32* %r6.global-to-local, align 4
  %v2_10e04 = xor i32 %v0_10e04, %v6_10e00
  %v1_10e08 = trunc i32 %v2_10e04 to i8
  store i8 %v1_10e08, i8* %v3_10e00, align 1
  %v0_10e0c = load i32, i32* @lr, align 4
  %v1_10e0c = inttoptr i32 %v0_10e0c to i32*
  %v2_10e0c = load i32, i32* %v1_10e0c, align 4
  %v0_10e10 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e10 = add i32 %v0_10e10, %v2_10e0c
  %v3_10e10 = inttoptr i32 %v2_10e10 to i8*
  %v4_10e10 = load i8, i8* %v3_10e10, align 1
  %v6_10e10 = zext i8 %v4_10e10 to i32
  %v0_10e14 = load i32, i32* %r5.global-to-local, align 4
  %v2_10e14 = xor i32 %v0_10e14, %v6_10e10
  %v1_10e18 = trunc i32 %v2_10e14 to i8
  store i8 %v1_10e18, i8* %v3_10e10, align 1
  %v0_10e1c = load i32, i32* @lr, align 4
  %v1_10e1c = inttoptr i32 %v0_10e1c to i32*
  %v2_10e1c = load i32, i32* %v1_10e1c, align 4
  %v0_10e20 = load i32, i32* %ip.global-to-local, align 4
  %v2_10e20 = add i32 %v0_10e20, %v2_10e1c
  %v3_10e20 = inttoptr i32 %v2_10e20 to i8*
  %v4_10e20 = load i8, i8* %v3_10e20, align 1
  %v6_10e20 = zext i8 %v4_10e20 to i32
  %v0_10e24 = load i32, i32* %r4.global-to-local, align 4
  %v2_10e24 = xor i32 %v0_10e24, %v6_10e20
  %v1_10e28 = trunc i32 %v2_10e24 to i8
  store i8 %v1_10e28, i8* %v3_10e20, align 1
  %v0_10e2c = load i32, i32* @lr, align 4
  %v1_10e2c = add i32 %v0_10e2c, 4
  %v2_10e2c = inttoptr i32 %v1_10e2c to i8*
  %v3_10e2c = load i8, i8* %v2_10e2c, align 1
  %v4_10e2c = zext i8 %v3_10e2c to i32
  %v0_10e30 = load i32, i32* %r7.global-to-local, align 4
  %v1_10e30 = add i32 %v0_10e30, 1
  %v2_10e30 = inttoptr i32 %v1_10e30 to i8*
  %v3_10e30 = load i8, i8* %v2_10e30, align 1
  %v4_10e30 = zext i8 %v3_10e30 to i32
  %v0_10e34 = load i32, i32* %ip.global-to-local, align 4
  %v1_10e34 = add i32 %v0_10e34, 1
  store i32 %v1_10e34, i32* %ip.global-to-local, align 4
  %v4_10e38 = mul nuw nsw i32 %v4_10e30, 256
  %v5_10e38 = or i32 %v4_10e38, %v4_10e2c
  store i32 %v5_10e38, i32* @r2, align 4
  %v9_10e3c = icmp eq i32 %v5_10e38, %v1_10e34
  store i1 %v9_10e3c, i1* @cpsr_z, align 1
  %v8_10e40 = icmp sgt i32 %v5_10e38, %v1_10e34
  br i1 %v8_10e40, label %dec_label_pc_10dec, label %dec_label_pc_10e44

dec_label_pc_10e44:                               ; preds = %dec_label_pc_10dec
  %v2_10e44 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10e44, i32* @r4, align 4
  ret i32 %v1_10de0

; uselistorder directives
  uselistorder i32 %v1_10e34, { 1, 2, 3, 0 }
  uselistorder i32 %v0_10e2c, { 1, 0 }
  uselistorder i32 %v1_10de0, { 0, 2, 1 }
  uselistorder i32 %v2_10dbc, { 3, 0, 1, 2, 4 }
}

define i32 @function_10e50(i32 %arg1) local_unnamed_addr {
dec_label_pc_10e50:
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_10e50 = mul i32 %arg1, 8
  %v3_10e54 = load i32, i32* @r4, align 4
  store i32 %v3_10e54, i32* %stack_var_-20, align 4
  %v3_10e64 = and i32 %v3_10e50, 2040
  %v2_10e68 = add i32 %v3_10e64, ptrtoint (i32* @global_var_1d260.211 to i32)
  store i32 %v2_10e68, i32* @lr, align 4
  %v1_10e70 = add i32 %v3_10e64, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 4)
  store i32 %v1_10e70, i32* %r7.global-to-local, align 4
  %v2_10e74 = load i32, i32* @global_var_1d030.214, align 4
  store i32 %v2_10e74, i32* @r2, align 4
  %v2_10e78 = inttoptr i32 %v1_10e70 to i8*
  %v3_10e78 = load i8, i8* %v2_10e78, align 4
  %v4_10e78 = zext i8 %v3_10e78 to i32
  %v1_10e7c = add i32 %v3_10e64, add (i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32 5)
  %v2_10e7c = inttoptr i32 %v1_10e7c to i8*
  %v3_10e7c = load i8, i8* %v2_10e7c, align 1
  %v4_10e7c = zext i8 %v3_10e7c to i32
  %v3_10e80 = udiv i32 %v2_10e74, 256
  %v4_10e84 = mul nuw nsw i32 %v4_10e7c, 256
  %v5_10e84 = or i32 %v4_10e84, %v4_10e78
  %v7_10e84 = icmp eq i32 %v5_10e84, 0
  %v3_10e88 = udiv i32 %v2_10e74, 65536
  %v1_10e8c = urem i32 %v3_10e80, 256
  store i32 %v1_10e8c, i32* %r6.global-to-local, align 4
  %v1_10e90 = urem i32 %v3_10e88, 256
  store i32 %v1_10e90, i32* %r5.global-to-local, align 4
  %v3_10e94 = udiv i32 %v2_10e74, 16777216
  store i32 %v3_10e94, i32* %r4.global-to-local, align 4
  %v1_10e98 = urem i32 %v2_10e74, 256
  br i1 %v7_10e84, label %bb, label %bb8

bb:                                               ; preds = %dec_label_pc_10e50
  store i32 %v3_10e54, i32* @r4, align 4
  ret i32 %v1_10e98

bb8:                                              ; preds = %dec_label_pc_10e50
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_10ea4

dec_label_pc_10ea4:                               ; preds = %dec_label_pc_10ea4, %bb8
  %v2_10eb0 = phi i32 [ %v1_10eec, %dec_label_pc_10ea4 ], [ 0, %bb8 ]
  %v0_10ea4 = phi i32 [ %v0_10ee4, %dec_label_pc_10ea4 ], [ %v2_10e68, %bb8 ]
  %v1_10ea4 = inttoptr i32 %v0_10ea4 to i32*
  %v2_10ea4 = load i32, i32* %v1_10ea4, align 4
  %v2_10ea8 = add i32 %v2_10ea4, %v2_10eb0
  %v3_10ea8 = inttoptr i32 %v2_10ea8 to i8*
  %v4_10ea8 = load i8, i8* %v3_10ea8, align 1
  %v6_10ea8 = zext i8 %v4_10ea8 to i32
  %v2_10eac = xor i32 %v6_10ea8, %v1_10e98
  %v1_10eb0 = trunc i32 %v2_10eac to i8
  store i8 %v1_10eb0, i8* %v3_10ea8, align 1
  %v0_10eb4 = load i32, i32* @lr, align 4
  %v1_10eb4 = inttoptr i32 %v0_10eb4 to i32*
  %v2_10eb4 = load i32, i32* %v1_10eb4, align 4
  %v0_10eb8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10eb8 = add i32 %v0_10eb8, %v2_10eb4
  %v3_10eb8 = inttoptr i32 %v2_10eb8 to i8*
  %v4_10eb8 = load i8, i8* %v3_10eb8, align 1
  %v6_10eb8 = zext i8 %v4_10eb8 to i32
  %v0_10ebc = load i32, i32* %r6.global-to-local, align 4
  %v2_10ebc = xor i32 %v0_10ebc, %v6_10eb8
  %v1_10ec0 = trunc i32 %v2_10ebc to i8
  store i8 %v1_10ec0, i8* %v3_10eb8, align 1
  %v0_10ec4 = load i32, i32* @lr, align 4
  %v1_10ec4 = inttoptr i32 %v0_10ec4 to i32*
  %v2_10ec4 = load i32, i32* %v1_10ec4, align 4
  %v0_10ec8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ec8 = add i32 %v0_10ec8, %v2_10ec4
  %v3_10ec8 = inttoptr i32 %v2_10ec8 to i8*
  %v4_10ec8 = load i8, i8* %v3_10ec8, align 1
  %v6_10ec8 = zext i8 %v4_10ec8 to i32
  %v0_10ecc = load i32, i32* %r5.global-to-local, align 4
  %v2_10ecc = xor i32 %v0_10ecc, %v6_10ec8
  %v1_10ed0 = trunc i32 %v2_10ecc to i8
  store i8 %v1_10ed0, i8* %v3_10ec8, align 1
  %v0_10ed4 = load i32, i32* @lr, align 4
  %v1_10ed4 = inttoptr i32 %v0_10ed4 to i32*
  %v2_10ed4 = load i32, i32* %v1_10ed4, align 4
  %v0_10ed8 = load i32, i32* %ip.global-to-local, align 4
  %v2_10ed8 = add i32 %v0_10ed8, %v2_10ed4
  %v3_10ed8 = inttoptr i32 %v2_10ed8 to i8*
  %v4_10ed8 = load i8, i8* %v3_10ed8, align 1
  %v6_10ed8 = zext i8 %v4_10ed8 to i32
  %v0_10edc = load i32, i32* %r4.global-to-local, align 4
  %v2_10edc = xor i32 %v0_10edc, %v6_10ed8
  %v1_10ee0 = trunc i32 %v2_10edc to i8
  store i8 %v1_10ee0, i8* %v3_10ed8, align 1
  %v0_10ee4 = load i32, i32* @lr, align 4
  %v1_10ee4 = add i32 %v0_10ee4, 4
  %v2_10ee4 = inttoptr i32 %v1_10ee4 to i8*
  %v3_10ee4 = load i8, i8* %v2_10ee4, align 1
  %v4_10ee4 = zext i8 %v3_10ee4 to i32
  %v0_10ee8 = load i32, i32* %r7.global-to-local, align 4
  %v1_10ee8 = add i32 %v0_10ee8, 1
  %v2_10ee8 = inttoptr i32 %v1_10ee8 to i8*
  %v3_10ee8 = load i8, i8* %v2_10ee8, align 1
  %v4_10ee8 = zext i8 %v3_10ee8 to i32
  %v0_10eec = load i32, i32* %ip.global-to-local, align 4
  %v1_10eec = add i32 %v0_10eec, 1
  store i32 %v1_10eec, i32* %ip.global-to-local, align 4
  %v4_10ef0 = mul nuw nsw i32 %v4_10ee8, 256
  %v5_10ef0 = or i32 %v4_10ef0, %v4_10ee4
  store i32 %v5_10ef0, i32* @r2, align 4
  %v8_10ef8 = icmp sgt i32 %v5_10ef0, %v1_10eec
  br i1 %v8_10ef8, label %dec_label_pc_10ea4, label %dec_label_pc_10efc

dec_label_pc_10efc:                               ; preds = %dec_label_pc_10ea4
  %v2_10efc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_10efc, i32* @r4, align 4
  ret i32 %v1_10e98

; uselistorder directives
  uselistorder i32 %v1_10eec, { 1, 2, 0 }
  uselistorder i32 %v0_10ee4, { 1, 0 }
  uselistorder i32 %v1_10e98, { 0, 2, 1 }
  uselistorder i32 %v2_10e74, { 3, 0, 1, 2, 4 }
}

define i32 @function_10f08(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10f08:
  %fp.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %v3_10f08 = load i32, i32* @r4, align 4
  store i32 %v3_10f08, i32* %stack_var_-36, align 4
  %v6_10f08 = load i32, i32* @r5, align 4
  %v9_10f08 = load i32, i32* @r6, align 4
  %v12_10f08 = load i32, i32* @r7, align 4
  %v1_10f10 = call i32 @function_128c4(i32 2)
  store i32 ptrtoint (i32* @global_var_1d260.211 to i32), i32* @r4, align 4
  store i32 0, i32* @r6, align 4
  store i32 2, i32* %r8.global-to-local, align 4
  store i32 %v1_10f10, i32* @r5, align 4
  %v3_10f2c = call i32 @function_11590(i32 %v1_10f10, i32 ptrtoint (i32* @global_var_1475c.219 to i32), i32 2)
  %v0_10f34 = load i32, i32* @r5, align 4
  store i32 %v0_10f34, i32* @global_var_1d268.220, align 4
  store i8 2, i8* bitcast (i32* @global_var_1d26c.221 to i8*), align 4
  %v0_10f3c = load i32, i32* @r6, align 4
  %v1_10f3c = trunc i32 %v0_10f3c to i8
  store i8 %v1_10f3c, i8* bitcast (i32* @global_var_1d26d.222 to i8*), align 4
  %v1_10f40 = call i32 @function_128c4(i32 13)
  store i32 ptrtoint ([17 x i8]* @global_var_14760.224 to i32), i32* %sl.global-to-local, align 4
  store i32 13, i32* @r5, align 4
  store i32 %v1_10f40, i32* @r7, align 4
  %v4_10f58 = call i32 @function_11590(i32 %v1_10f40, i32 ptrtoint ([17 x i8]* @global_var_14760.224 to i32), i32 13)
  %v0_10f5c = load i32, i32* @r5, align 4
  %v0_10f60 = load i32, i32* @r7, align 4
  store i32 %v0_10f60, i32* @global_var_1d270.225, align 4
  %v1_10f64 = trunc i32 %v0_10f5c to i8
  store i8 %v1_10f64, i8* bitcast (i32* @global_var_1d274.226 to i8*), align 4
  %v0_10f68 = load i32, i32* @r6, align 4
  %v1_10f68 = trunc i32 %v0_10f68 to i8
  store i8 %v1_10f68, i8* bitcast (i32* @global_var_1d275.227 to i8*), align 4
  %v1_10f6c = call i32 @function_128c4(i32 %v0_10f5c)
  %v0_10f70 = load i32, i32* %sl.global-to-local, align 4
  %v0_10f74 = load i32, i32* @r5, align 4
  store i32 %v1_10f6c, i32* @r7, align 4
  %v4_10f7c = call i32 @function_11590(i32 %v1_10f6c, i32 %v0_10f70, i32 %v0_10f74)
  %v0_10f80 = load i32, i32* %r8.global-to-local, align 4
  %v0_10f84 = load i32, i32* @r7, align 4
  store i32 %v0_10f84, i32* @global_var_1d278.228, align 4
  %v0_10f88 = load i32, i32* @r5, align 4
  %v1_10f88 = trunc i32 %v0_10f88 to i8
  store i8 %v1_10f88, i8* bitcast (i32* @global_var_1d27c.229 to i8*), align 4
  %v0_10f8c = load i32, i32* @r6, align 4
  %v1_10f8c = trunc i32 %v0_10f8c to i8
  store i8 %v1_10f8c, i8* bitcast (i32* @global_var_1d27d.230 to i8*), align 4
  %v1_10f90 = call i32 @function_128c4(i32 %v0_10f80)
  %v0_10f94 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_10f90, i32* @r5, align 4
  %v3_10fa0 = call i32 @function_11590(i32 %v1_10f90, i32 ptrtoint (i32* @global_var_14774.232 to i32), i32 %v0_10f94)
  %v0_10fa8 = load i32, i32* @r5, align 4
  store i32 %v0_10fa8, i32* @global_var_1d280.233, align 4
  %v1_10fac = trunc i32 %v0_10f94 to i8
  store i8 %v1_10fac, i8* bitcast (i32* @global_var_1d284.234 to i8*), align 4
  %v0_10fb0 = load i32, i32* @r6, align 4
  %v1_10fb0 = trunc i32 %v0_10fb0 to i8
  store i8 %v1_10fb0, i8* bitcast (i32* @global_var_1d285.235 to i8*), align 4
  %v1_10fb4 = call i32 @function_128c4(i32 27)
  store i32 %v1_10fb4, i32* @r5, align 4
  %v4_10fc4 = call i32 @function_11590(i32 %v1_10fb4, i32 ptrtoint ([28 x i8]* @global_var_14778.237 to i32), i32 27)
  store i8 27, i8* bitcast (i32* @global_var_1d28c.238 to i8*), align 4
  %v0_10fd4 = load i32, i32* @r5, align 4
  store i32 %v0_10fd4, i32* @global_var_1d288.239, align 4
  %v0_10fd8 = load i32, i32* @r6, align 4
  %v1_10fd8 = trunc i32 %v0_10fd8 to i8
  store i8 %v1_10fd8, i8* bitcast (i32* @global_var_1d28d.240 to i8*), align 4
  %v1_10fdc = call i32 @function_128c4(i32 6)
  store i32 %v1_10fdc, i32* @r5, align 4
  %v4_10fec = call i32 @function_11590(i32 %v1_10fdc, i32 ptrtoint ([7 x i8]* @global_var_14794.242 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1d294.243 to i8*), align 4
  %v0_10ffc = load i32, i32* @r5, align 4
  store i32 %v0_10ffc, i32* @global_var_1d290.244, align 4
  %v0_11000 = load i32, i32* @r6, align 4
  %v1_11000 = trunc i32 %v0_11000 to i8
  store i8 %v1_11000, i8* bitcast (i32* @global_var_1d295.245 to i8*), align 4
  %v1_11004 = call i32 @function_128c4(i32 7)
  store i32 7, i32* @r7, align 4
  store i32 %v1_11004, i32* @r5, align 4
  %v4_11018 = call i32 @function_11590(i32 %v1_11004, i32 ptrtoint ([8 x i8]* @global_var_1479c.247 to i32), i32 7)
  %v0_1101c = load i32, i32* @r7, align 4
  %v0_11020 = load i32, i32* @r5, align 4
  store i32 %v0_11020, i32* @global_var_1d298.248, align 4
  %v1_11024 = trunc i32 %v0_1101c to i8
  store i8 %v1_11024, i8* bitcast (i32* @global_var_1d29c.249 to i8*), align 4
  %v0_11028 = load i32, i32* @r6, align 4
  %v1_11028 = trunc i32 %v0_11028 to i8
  store i8 %v1_11028, i8* bitcast (i32* @global_var_1d29d.250 to i8*), align 4
  %v1_1102c = call i32 @function_128c4(i32 %v0_1101c)
  %v0_11030 = load i32, i32* @r7, align 4
  store i32 %v1_1102c, i32* @r5, align 4
  %v4_1103c = call i32 @function_11590(i32 %v1_1102c, i32 ptrtoint ([8 x i8]* @global_var_147a4.252 to i32), i32 %v0_11030)
  %v0_11044 = load i32, i32* @r5, align 4
  store i32 %v0_11044, i32* @global_var_1d2a0.253, align 4
  %v0_11048 = load i32, i32* @r7, align 4
  %v1_11048 = trunc i32 %v0_11048 to i8
  store i8 %v1_11048, i8* bitcast (i32* @global_var_1d2a4.254 to i8*), align 4
  %v0_1104c = load i32, i32* @r6, align 4
  %v1_1104c = trunc i32 %v0_1104c to i8
  store i8 %v1_1104c, i8* bitcast (i32* @global_var_1d2a5.255 to i8*), align 4
  %v1_11050 = call i32 @function_128c4(i32 3)
  store i32 %v1_11050, i32* @r5, align 4
  %v4_11060 = call i32 @function_11590(i32 %v1_11050, i32 ptrtoint ([4 x i8]* @global_var_147ac.257 to i32), i32 3)
  store i8 3, i8* bitcast (i32* @global_var_1d2ac.258 to i8*), align 4
  %v0_11070 = load i32, i32* @r5, align 4
  store i32 %v0_11070, i32* @global_var_1d2a8.259, align 4
  %v0_11074 = load i32, i32* @r6, align 4
  %v1_11074 = trunc i32 %v0_11074 to i8
  store i8 %v1_11074, i8* bitcast (i32* @global_var_1d2ad.260 to i8*), align 4
  %v1_11078 = call i32 @function_128c4(i32 19)
  store i32 19, i32* %fp.global-to-local, align 4
  store i32 %v1_11078, i32* @r5, align 4
  %v3_1108c = call i32 @function_11590(i32 %v1_11078, i32 ptrtoint (i32* @global_var_147b0.262 to i32), i32 19)
  %v0_11094 = load i32, i32* @r5, align 4
  store i32 %v0_11094, i32* @global_var_1d2b0.263, align 4
  store i8 19, i8* bitcast (i32* @global_var_1d2b4.264 to i8*), align 4
  %v0_1109c = load i32, i32* @r6, align 4
  %v1_1109c = trunc i32 %v0_1109c to i8
  store i8 %v1_1109c, i8* bitcast (i32* @global_var_1d2b5.265 to i8*), align 4
  %v1_110a0 = call i32 @function_128c4(i32 24)
  store i32 %v1_110a0, i32* @r5, align 4
  %v3_110b0 = call i32 @function_11590(i32 %v1_110a0, i32 ptrtoint (i32* @global_var_147c4.267 to i32), i32 24)
  store i8 24, i8* bitcast (i32* @global_var_1d2bc.268 to i8*), align 4
  %v0_110c0 = load i32, i32* @r5, align 4
  store i32 %v0_110c0, i32* @global_var_1d2b8.269, align 4
  %v0_110c4 = load i32, i32* @r6, align 4
  %v1_110c4 = trunc i32 %v0_110c4 to i8
  store i8 %v1_110c4, i8* bitcast (i32* @global_var_1d2bd.270 to i8*), align 4
  %v1_110c8 = call i32 @function_128c4(i32 9)
  store i32 %v1_110c8, i32* @r5, align 4
  %v4_110d8 = call i32 @function_11590(i32 %v1_110c8, i32 ptrtoint ([10 x i8]* @global_var_147e0.272 to i32), i32 9)
  store i8 9, i8* bitcast (i32* @global_var_1d2c4.273 to i8*), align 4
  %v0_110e8 = load i32, i32* @r5, align 4
  store i32 %v0_110e8, i32* @global_var_1d2c0.274, align 4
  %v0_110ec = load i32, i32* @r6, align 4
  %v1_110ec = trunc i32 %v0_110ec to i8
  store i8 %v1_110ec, i8* bitcast (i32* @global_var_1d2c5.275 to i8*), align 4
  %v1_110f0 = call i32 @function_128c4(i32 16)
  store i32 16, i32* %sb.global-to-local, align 4
  store i32 %v1_110f0, i32* @r5, align 4
  %v4_11104 = call i32 @function_11590(i32 %v1_110f0, i32 ptrtoint ([17 x i8]* @global_var_147ec.277 to i32), i32 16)
  %v0_1110c = load i32, i32* @r5, align 4
  store i32 %v0_1110c, i32* @global_var_1d2c8.278, align 4
  store i8 16, i8* bitcast (i32* @global_var_1d2cc.279 to i8*), align 4
  %v0_11114 = load i32, i32* @r6, align 4
  %v1_11114 = trunc i32 %v0_11114 to i8
  store i8 %v1_11114, i8* bitcast (i32* @global_var_1d2cd.280 to i8*), align 4
  %v1_11118 = call i32 @function_128c4(i32 22)
  store i32 %v1_11118, i32* @r5, align 4
  %v4_11128 = call i32 @function_11590(i32 %v1_11118, i32 ptrtoint ([23 x i8]* @global_var_14800.282 to i32), i32 22)
  %v0_11130 = load i32, i32* @r7, align 4
  store i8 22, i8* bitcast (i32* @global_var_1d2d4.283 to i8*), align 4
  %v0_11138 = load i32, i32* @r5, align 4
  store i32 %v0_11138, i32* @global_var_1d2d0.284, align 4
  %v0_1113c = load i32, i32* @r6, align 4
  %v1_1113c = trunc i32 %v0_1113c to i8
  store i8 %v1_1113c, i8* bitcast (i32* @global_var_1d2d5.285 to i8*), align 4
  %v1_11140 = call i32 @function_128c4(i32 %v0_11130)
  %v0_11144 = load i32, i32* @r7, align 4
  store i32 %v1_11140, i32* @r5, align 4
  %v4_11150 = call i32 @function_11590(i32 %v1_11140, i32 ptrtoint ([8 x i8]* @global_var_14818.287 to i32), i32 %v0_11144)
  %v0_11158 = load i32, i32* @r5, align 4
  store i32 %v0_11158, i32* @global_var_1d2d8.288, align 4
  %v0_1115c = load i32, i32* @r7, align 4
  %v1_1115c = trunc i32 %v0_1115c to i8
  store i8 %v1_1115c, i8* bitcast (i32* @global_var_1d2dc.289 to i8*), align 4
  %v0_11160 = load i32, i32* @r6, align 4
  %v1_11160 = trunc i32 %v0_11160 to i8
  store i8 %v1_11160, i8* bitcast (i32* @global_var_1d2dd.290 to i8*), align 4
  %v1_11164 = call i32 @function_128c4(i32 5)
  store i32 %v1_11164, i32* @r5, align 4
  %v4_11174 = call i32 @function_11590(i32 %v1_11164, i32 ptrtoint ([6 x i8]* @global_var_14820.292 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1d2e4.293 to i8*), align 4
  %v0_11184 = load i32, i32* @r5, align 4
  store i32 %v0_11184, i32* @global_var_1d2e0.294, align 4
  %v0_11188 = load i32, i32* @r6, align 4
  %v1_11188 = trunc i32 %v0_11188 to i8
  store i8 %v1_11188, i8* bitcast (i32* @global_var_1d2e5.295 to i8*), align 4
  %v1_1118c = call i32 @function_128c4(i32 4)
  store i32 %v1_1118c, i32* @r5, align 4
  %v4_1119c = call i32 @function_11590(i32 %v1_1118c, i32 ptrtoint ([5 x i8]* @global_var_14828.297 to i32), i32 4)
  store i8 4, i8* bitcast (i32* @global_var_1d2ec.298 to i8*), align 4
  %v0_111ac = load i32, i32* @r5, align 4
  store i32 %v0_111ac, i32* @global_var_1d2e8.299, align 4
  %v0_111b0 = load i32, i32* @r6, align 4
  %v1_111b0 = trunc i32 %v0_111b0 to i8
  store i8 %v1_111b0, i8* bitcast (i32* @global_var_1d2ed.300 to i8*), align 4
  %v1_111b4 = call i32 @function_128c4(i32 6)
  store i32 %v1_111b4, i32* @r5, align 4
  %v4_111c4 = call i32 @function_11590(i32 %v1_111b4, i32 ptrtoint ([7 x i8]* @global_var_14830.302 to i32), i32 6)
  store i8 6, i8* bitcast (i32* @global_var_1d2f4.303 to i8*), align 4
  %v0_111d4 = load i32, i32* @r5, align 4
  store i32 %v0_111d4, i32* @global_var_1d2f0.304, align 4
  %v0_111d8 = load i32, i32* @r6, align 4
  %v1_111d8 = trunc i32 %v0_111d8 to i8
  store i8 %v1_111d8, i8* bitcast (i32* @global_var_1d2f5.305 to i8*), align 4
  %v1_111dc = call i32 @function_128c4(i32 14)
  %v0_111e8 = load i32, i32* %r8.global-to-local, align 4
  %v1_111e8 = add i32 %v0_111e8, 12
  store i32 %v1_111e8, i32* %r8.global-to-local, align 4
  store i32 %v1_111dc, i32* @r5, align 4
  %v4_111f0 = call i32 @function_11590(i32 %v1_111dc, i32 ptrtoint ([15 x i8]* @global_var_14838.307 to i32), i32 14)
  %v0_111f8 = load i32, i32* @r5, align 4
  store i32 %v0_111f8, i32* @global_var_1d2f8.308, align 4
  %v1_111fc = trunc i32 %v1_111e8 to i8
  store i8 %v1_111fc, i8* bitcast (i32* @global_var_1d2fc.309 to i8*), align 4
  %v0_11200 = load i32, i32* @r6, align 4
  %v1_11200 = trunc i32 %v0_11200 to i8
  store i8 %v1_11200, i8* bitcast (i32* @global_var_1d2fd.310 to i8*), align 4
  %v1_11204 = call i32 @function_128c4(i32 8)
  store i32 8, i32* %sl.global-to-local, align 4
  store i32 %v1_11204, i32* @r5, align 4
  %v4_11218 = call i32 @function_11590(i32 %v1_11204, i32 ptrtoint ([9 x i8]* @global_var_14848.312 to i32), i32 8)
  %v0_1121c = load i32, i32* @r7, align 4
  %v0_11220 = load i32, i32* @r5, align 4
  store i32 %v0_11220, i32* @global_var_1d370.313, align 4
  store i8 8, i8* bitcast (i32* @global_var_1d374.314 to i8*), align 4
  %v0_11228 = load i32, i32* @r6, align 4
  %v1_11228 = trunc i32 %v0_11228 to i8
  store i8 %v1_11228, i8* bitcast (i32* @global_var_1d375.315 to i8*), align 4
  %v1_1122c = call i32 @function_128c4(i32 %v0_1121c)
  %v0_11230 = load i32, i32* @r7, align 4
  store i32 %v1_1122c, i32* @r5, align 4
  %v4_1123c = call i32 @function_11590(i32 %v1_1122c, i32 ptrtoint ([8 x i8]* @global_var_14854.317 to i32), i32 %v0_11230)
  %v0_11240 = load i32, i32* %sb.global-to-local, align 4
  %v0_11244 = load i32, i32* @r5, align 4
  store i32 %v0_11244, i32* @global_var_1d378.318, align 4
  %v0_11248 = load i32, i32* @r7, align 4
  %v1_11248 = trunc i32 %v0_11248 to i8
  store i8 %v1_11248, i8* bitcast (i32* @global_var_1d37c.319 to i8*), align 4
  %v0_1124c = load i32, i32* @r6, align 4
  %v1_1124c = trunc i32 %v0_1124c to i8
  store i8 %v1_1124c, i8* bitcast (i32* @global_var_1d37d.320 to i8*), align 4
  %v1_11250 = call i32 @function_128c4(i32 %v0_11240)
  %v0_11254 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v1_11250, i32* @r5, align 4
  %v4_11260 = call i32 @function_11590(i32 %v1_11250, i32 ptrtoint ([17 x i8]* @global_var_1485c.322 to i32), i32 %v0_11254)
  %v0_11268 = load i32, i32* @r5, align 4
  store i32 %v0_11268, i32* @global_var_1d300.323, align 4
  %v1_1126c = trunc i32 %v0_11254 to i8
  store i8 %v1_1126c, i8* bitcast (i32* @global_var_1d304.324 to i8*), align 4
  %v0_11270 = load i32, i32* @r6, align 4
  %v1_11270 = trunc i32 %v0_11270 to i8
  store i8 %v1_11270, i8* bitcast (i32* @global_var_1d305.325 to i8*), align 4
  %v1_11274 = call i32 @function_128c4(i32 23)
  %v0_11280 = load i32, i32* @r7, align 4
  %v1_11280 = load i32, i32* %sb.global-to-local, align 4
  %v2_11280 = add i32 %v1_11280, %v0_11280
  store i32 %v2_11280, i32* @r7, align 4
  store i32 %v1_11274, i32* @r5, align 4
  %v4_11288 = call i32 @function_11590(i32 %v1_11274, i32 ptrtoint ([24 x i8]* @global_var_14870.327 to i32), i32 23)
  %v0_1128c = load i32, i32* %sl.global-to-local, align 4
  %v0_11290 = load i32, i32* @r5, align 4
  store i32 %v0_11290, i32* @global_var_1d308.328, align 4
  %v0_11294 = load i32, i32* @r7, align 4
  %v1_11294 = trunc i32 %v0_11294 to i8
  store i8 %v1_11294, i8* bitcast (i32* @global_var_1d30c.329 to i8*), align 4
  %v0_11298 = load i32, i32* @r6, align 4
  %v1_11298 = trunc i32 %v0_11298 to i8
  store i8 %v1_11298, i8* bitcast (i32* @global_var_1d30d.330 to i8*), align 4
  %v1_1129c = call i32 @function_128c4(i32 %v0_1128c)
  %v0_112a4 = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_1129c, i32* @r5, align 4
  %v4_112ac = call i32 @function_11590(i32 %v1_1129c, i32 ptrtoint ([9 x i8]* @global_var_14888.332 to i32), i32 %v0_112a4)
  %v0_112b0 = load i32, i32* %r8.global-to-local, align 4
  %v0_112b4 = load i32, i32* @r5, align 4
  store i32 %v0_112b4, i32* @global_var_1d310.333, align 4
  %v1_112b8 = trunc i32 %v0_112a4 to i8
  store i8 %v1_112b8, i8* bitcast (i32* @global_var_1d314.334 to i8*), align 4
  %v0_112bc = load i32, i32* @r6, align 4
  %v1_112bc = trunc i32 %v0_112bc to i8
  store i8 %v1_112bc, i8* bitcast (i32* @global_var_1d315.335 to i8*), align 4
  %v1_112c0 = call i32 @function_128c4(i32 %v0_112b0)
  %v0_112c8 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_112c0, i32* @r5, align 4
  %v4_112d0 = call i32 @function_11590(i32 %v1_112c0, i32 ptrtoint ([15 x i8]* @global_var_14894.337 to i32), i32 %v0_112c8)
  %v0_112d4 = load i32, i32* %fp.global-to-local, align 4
  %v0_112d8 = load i32, i32* @r5, align 4
  store i32 %v0_112d8, i32* @global_var_1d318.338, align 4
  %v1_112dc = trunc i32 %v0_112c8 to i8
  store i8 %v1_112dc, i8* bitcast (i32* @global_var_1d31c.339 to i8*), align 4
  %v0_112e0 = load i32, i32* @r6, align 4
  %v1_112e0 = trunc i32 %v0_112e0 to i8
  store i8 %v1_112e0, i8* bitcast (i32* @global_var_1d31d.340 to i8*), align 4
  %v1_112e4 = call i32 @function_128c4(i32 %v0_112d4)
  store i32 ptrtoint ([20 x i8]* @global_var_148a4.342 to i32), i32* %sb.global-to-local, align 4
  %v0_112ec = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_112e4, i32* @r5, align 4
  %v4_112f8 = call i32 @function_11590(i32 %v1_112e4, i32 ptrtoint ([20 x i8]* @global_var_148a4.342 to i32), i32 %v0_112ec)
  %v0_11300 = load i32, i32* @r5, align 4
  store i32 %v0_11300, i32* @global_var_1d320.343, align 4
  %v1_11304 = trunc i32 %v0_112ec to i8
  store i8 %v1_11304, i8* bitcast (i32* @global_var_1d324.344 to i8*), align 4
  %v0_11308 = load i32, i32* @r6, align 4
  %v1_11308 = trunc i32 %v0_11308 to i8
  store i8 %v1_11308, i8* bitcast (i32* @global_var_1d325.345 to i8*), align 4
  %v1_1130c = call i32 @function_128c4(i32 10)
  store i32 %v1_1130c, i32* @r5, align 4
  %v4_1131c = call i32 @function_11590(i32 %v1_1130c, i32 ptrtoint ([11 x i8]* @global_var_148b8.347 to i32), i32 10)
  store i8 10, i8* bitcast (i32* @global_var_1d384.348 to i8*), align 4
  %v0_1132c = load i32, i32* @r5, align 4
  store i32 %v0_1132c, i32* @global_var_1d380.349, align 4
  %v0_11330 = load i32, i32* @r6, align 4
  %v1_11330 = trunc i32 %v0_11330 to i8
  store i8 %v1_11330, i8* bitcast (i32* @global_var_1d385.350 to i8*), align 4
  %v1_11334 = call i32 @function_128c4(i32 21)
  store i32 %v1_11334, i32* @r5, align 4
  %v3_11344 = call i32 @function_11590(i32 %v1_11334, i32 ptrtoint (i32* @global_var_1491c.352 to i32), i32 21)
  store i8 21, i8* bitcast (i32* @global_var_1d32c.353 to i8*), align 4
  %v0_11354 = load i32, i32* @r5, align 4
  store i32 %v0_11354, i32* @global_var_1d328.354, align 4
  %v0_11358 = load i32, i32* @r6, align 4
  %v1_11358 = trunc i32 %v0_11358 to i8
  store i8 %v1_11358, i8* bitcast (i32* @global_var_1d32d.355 to i8*), align 4
  %v1_1135c = call i32 @function_128c4(i32 17)
  store i32 %v1_1135c, i32* @r5, align 4
  %v4_1136c = call i32 @function_11590(i32 %v1_1135c, i32 ptrtoint ([18 x i8]* @global_var_148c4.357 to i32), i32 17)
  store i8 17, i8* bitcast (i32* @global_var_1d334.358 to i8*), align 4
  %v0_1137c = load i32, i32* @r5, align 4
  store i32 %v0_1137c, i32* @global_var_1d330.359, align 4
  %v0_11380 = load i32, i32* @r6, align 4
  %v1_11380 = trunc i32 %v0_11380 to i8
  store i8 %v1_11380, i8* bitcast (i32* @global_var_1d335.360 to i8*), align 4
  %v1_11384 = call i32 @function_128c4(i32 12)
  store i32 %v1_11384, i32* @r5, align 4
  %v4_11394 = call i32 @function_11590(i32 %v1_11384, i32 ptrtoint ([13 x i8]* @global_var_148d8.362 to i32), i32 12)
  %v0_1139c = load i32, i32* %r8.global-to-local, align 4
  store i8 12, i8* bitcast (i32* @global_var_1d33c.363 to i8*), align 4
  %v0_113a4 = load i32, i32* @r5, align 4
  store i32 %v0_113a4, i32* @global_var_1d338.364, align 4
  %v0_113a8 = load i32, i32* @r6, align 4
  %v1_113a8 = trunc i32 %v0_113a8 to i8
  store i8 %v1_113a8, i8* bitcast (i32* @global_var_1d33d.365 to i8*), align 4
  %v1_113ac = call i32 @function_128c4(i32 %v0_1139c)
  %v0_113b4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v1_113ac, i32* @r5, align 4
  %v4_113bc = call i32 @function_11590(i32 %v1_113ac, i32 ptrtoint ([15 x i8]* @global_var_14894.337 to i32), i32 %v0_113b4)
  %v0_113c0 = load i32, i32* %fp.global-to-local, align 4
  %v0_113c4 = load i32, i32* @r5, align 4
  store i32 %v0_113c4, i32* @global_var_1d340.366, align 4
  %v1_113c8 = trunc i32 %v0_113b4 to i8
  store i8 %v1_113c8, i8* bitcast (i32* @global_var_1d344.367 to i8*), align 4
  %v0_113cc = load i32, i32* @r6, align 4
  %v1_113cc = trunc i32 %v0_113cc to i8
  store i8 %v1_113cc, i8* bitcast (i32* @global_var_1d345.368 to i8*), align 4
  %v1_113d0 = call i32 @function_128c4(i32 %v0_113c0)
  %v0_113d4 = load i32, i32* %sb.global-to-local, align 4
  %v0_113d8 = load i32, i32* %fp.global-to-local, align 4
  store i32 %v1_113d0, i32* @r5, align 4
  %v4_113e0 = call i32 @function_11590(i32 %v1_113d0, i32 %v0_113d4, i32 %v0_113d8)
  %v0_113e4 = load i32, i32* %sl.global-to-local, align 4
  %v0_113e8 = load i32, i32* @r5, align 4
  store i32 %v0_113e8, i32* @global_var_1d348.369, align 4
  %v1_113ec = trunc i32 %v0_113d8 to i8
  store i8 %v1_113ec, i8* bitcast (i32* @global_var_1d34c.370 to i8*), align 4
  %v0_113f0 = load i32, i32* @r6, align 4
  %v1_113f0 = trunc i32 %v0_113f0 to i8
  store i8 %v1_113f0, i8* bitcast (i32* @global_var_1d34d.371 to i8*), align 4
  %v1_113f4 = call i32 @function_128c4(i32 %v0_113e4)
  %v0_113fc = load i32, i32* %sl.global-to-local, align 4
  store i32 %v1_113f4, i32* @r5, align 4
  %v4_11404 = call i32 @function_11590(i32 %v1_113f4, i32 ptrtoint ([9 x i8]* @global_var_148e8.373 to i32), i32 %v0_113fc)
  %v0_1140c = load i32, i32* @r5, align 4
  store i32 %v0_1140c, i32* @global_var_1d350.374, align 4
  %v1_11410 = trunc i32 %v0_113fc to i8
  store i8 %v1_11410, i8* bitcast (i32* @global_var_1d354.375 to i8*), align 4
  %v0_11414 = load i32, i32* @r6, align 4
  %v1_11414 = trunc i32 %v0_11414 to i8
  store i8 %v1_11414, i8* bitcast (i32* @global_var_1d355.376 to i8*), align 4
  %v1_11418 = call i32 @function_128c4(i32 5)
  store i32 %v1_11418, i32* @r5, align 4
  %v4_11428 = call i32 @function_11590(i32 %v1_11418, i32 ptrtoint ([6 x i8]* @global_var_148f4.378 to i32), i32 5)
  store i8 5, i8* bitcast (i32* @global_var_1d35c.379 to i8*), align 4
  %v0_11438 = load i32, i32* @r5, align 4
  store i32 %v0_11438, i32* @global_var_1d358.380, align 4
  %v0_1143c = load i32, i32* @r6, align 4
  %v1_1143c = trunc i32 %v0_1143c to i8
  store i8 %v1_1143c, i8* bitcast (i32* @global_var_1d35d.381 to i8*), align 4
  %v1_11440 = call i32 @function_128c4(i32 6)
  store i32 %v1_11440, i32* @r5, align 4
  %v4_11450 = call i32 @function_11590(i32 %v1_11440, i32 ptrtoint ([7 x i8]* @global_var_148fc.383 to i32), i32 6)
  %v0_11458 = load i32, i32* @r7, align 4
  %v0_1145c = load i32, i32* @r5, align 4
  store i32 %v0_1145c, i32* @global_var_1d360.384, align 4
  store i8 6, i8* bitcast (i32* @global_var_1d364.385 to i8*), align 4
  %v0_11464 = load i32, i32* @r6, align 4
  %v1_11464 = trunc i32 %v0_11464 to i8
  store i8 %v1_11464, i8* bitcast (i32* @global_var_1d365.386 to i8*), align 4
  %v1_11468 = call i32 @function_128c4(i32 %v0_11458)
  %v0_11470 = load i32, i32* @r7, align 4
  %v4_11478 = call i32 @function_11590(i32 %v1_11468, i32 ptrtoint ([24 x i8]* @global_var_14904.388 to i32), i32 %v0_11470)
  %v0_1147c = load i32, i32* @r6, align 4
  %v1_1147c = trunc i32 %v0_1147c to i8
  store i8 %v1_1147c, i8* bitcast (i32* @global_var_1d36d.389 to i8*), align 4
  store i32 %v1_11468, i32* @global_var_1d368.390, align 4
  %v0_11484 = load i32, i32* @r7, align 4
  %v1_11484 = trunc i32 %v0_11484 to i8
  store i8 %v1_11484, i8* bitcast (i32* @global_var_1d36c.391 to i8*), align 4
  %v2_11488 = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_11488, i32* @r4, align 4
  store i32 %v6_10f08, i32* @r5, align 4
  store i32 %v9_10f08, i32* @r6, align 4
  store i32 %v12_10f08, i32* @r7, align 4
  ret i32 %v4_11478

; uselistorder directives
  uselistorder i32 %v1_113f4, { 1, 0 }
  uselistorder i32 %v1_113d0, { 1, 0 }
  uselistorder i32 %v1_113ac, { 1, 0 }
  uselistorder i32 %v1_112e4, { 1, 0 }
  uselistorder i32 %v1_112c0, { 1, 0 }
  uselistorder i32 %v1_1129c, { 1, 0 }
  uselistorder i32 %v1_11274, { 1, 0 }
  uselistorder i32 %v1_11250, { 1, 0 }
  uselistorder i32 %v1_1122c, { 1, 0 }
  uselistorder i32 %v1_11204, { 1, 0 }
  uselistorder i32 %v1_111dc, { 1, 0 }
  uselistorder i32 %v1_11140, { 1, 0 }
  uselistorder i32 %v1_110f0, { 1, 0 }
  uselistorder i32 %v1_11078, { 1, 0 }
  uselistorder i32 %v1_1102c, { 1, 0 }
  uselistorder i32 %v1_11004, { 1, 0 }
  uselistorder i32 %v1_10f90, { 1, 0 }
  uselistorder i32 %v1_10f6c, { 1, 0 }
  uselistorder i32 %v1_10f40, { 1, 0 }
  uselistorder i32 %v1_10f10, { 1, 0 }
  uselistorder i8 4, { 1, 0 }
  uselistorder i8 5, { 12, 13, 14, 0, 1, 10, 2, 3, 4, 5, 6, 7, 8, 9, 11 }
  uselistorder i8 16, { 0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 }
  uselistorder i8 3, { 1, 0 }
  uselistorder i8 6, { 1, 2, 3, 4, 5, 6, 7, 0 }
  uselistorder i8 2, { 0, 1, 3, 2 }
  uselistorder i32 (i32, i32, i32)* @function_11590, { 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 3, 2, 1, 0, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1d260.211 to i32), { 5, 0, 1, 2, 3, 4 }
}

define i32 @function_11514(i8* %arg1) local_unnamed_addr {
dec_label_pc_11514:
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* @r2, align 4
  %v3_11518 = load i8, i8* %arg1, align 1
  %v4_11518 = zext i8 %v3_11518 to i32
  %v2_1151c = icmp eq i8 %v3_11518, 0
  br i1 %v2_1151c, label %dec_label_pc_11538, label %bb

dec_label_pc_11538:                               ; preds = %dec_label_pc_11528, %dec_label_pc_11514
  %merge = phi i32 [ %v4_11518, %dec_label_pc_11514 ], [ %v1_11528, %dec_label_pc_11528 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_11514
  br label %dec_label_pc_11528

dec_label_pc_11528:                               ; preds = %dec_label_pc_11528, %bb
  %v0_11528 = phi i32 [ %v1_11528, %dec_label_pc_11528 ], [ 0, %bb ]
  %v1_11528 = add i32 %v0_11528, 1
  %v2_1152c = add i32 %v1_11528, %tmp
  %v3_1152c = inttoptr i32 %v2_1152c to i8*
  %v4_1152c = load i8, i8* %v3_1152c, align 1
  %v2_11530 = icmp eq i8 %v4_1152c, 0
  br i1 %v2_11530, label %dec_label_pc_11538, label %dec_label_pc_11528

; uselistorder directives
  uselistorder i32 %v1_11528, { 1, 0, 2 }
}

define i32 @function_1153c(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1153c:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_1153c = load i8, i8* %arg1, align 1
  %v3_1153c = zext i8 %v2_1153c to i32
  %v2_11540 = icmp eq i8 %v2_1153c, 0
  br i1 %v2_11540, label %dec_label_pc_11584, label %dec_label_pc_11548

dec_label_pc_11548:                               ; preds = %dec_label_pc_1153c
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1154c

dec_label_pc_1154c:                               ; preds = %dec_label_pc_1154c, %dec_label_pc_11548
  %v0_1154c = phi i32 [ %v1_1154c, %dec_label_pc_1154c ], [ 0, %dec_label_pc_11548 ]
  %v1_1154c = add i32 %v0_1154c, 1
  store i32 %v1_1154c, i32* %ip.global-to-local, align 4
  %v2_11550 = add i32 %v1_1154c, %tmp
  %v3_11550 = inttoptr i32 %v2_11550 to i8*
  %v4_11550 = load i8, i8* %v3_11550, align 1
  %v2_11554 = icmp eq i8 %v4_11550, 0
  br i1 %v2_11554, label %dec_label_pc_1155c, label %dec_label_pc_1154c

dec_label_pc_1155c:                               ; preds = %dec_label_pc_1154c
  %v7_1155c = icmp eq i32 %v0_1154c, -2
  br i1 %v7_1155c, label %dec_label_pc_1157c, label %dec_label_pc_11568.preheader

dec_label_pc_11568.preheader:                     ; preds = %dec_label_pc_1155c, %dec_label_pc_11584
  %storemerge = phi i32 [ %v3_1153c, %dec_label_pc_11584 ], [ %v1_1154c, %dec_label_pc_1155c ]
  %v2_11574.pre = load i32, i32* @r0, align 4
  br label %dec_label_pc_11568

dec_label_pc_11568:                               ; preds = %dec_label_pc_11568.dec_label_pc_11568_crit_edge, %dec_label_pc_11568.preheader
  %v2_11574 = phi i32 [ %v5_11574, %dec_label_pc_11568.dec_label_pc_11568_crit_edge ], [ %v2_11574.pre, %dec_label_pc_11568.preheader ]
  %v0_1156c = phi i32 [ %v0_1156c.pre, %dec_label_pc_11568.dec_label_pc_11568_crit_edge ], [ %tmp, %dec_label_pc_11568.preheader ]
  %v0_11568 = phi i32 [ %v0_11568.pre, %dec_label_pc_11568.dec_label_pc_11568_crit_edge ], [ %storemerge, %dec_label_pc_11568.preheader ]
  %v1_11568 = add i32 %v0_11568, -1
  store i32 %v1_11568, i32* @r2, align 4
  %v1_1156c = inttoptr i32 %v0_1156c to i8*
  %v2_1156c = load i8, i8* %v1_1156c, align 1
  %v5_1156c = add i32 %v0_1156c, 1
  store i32 %v5_1156c, i32* %r1.global-to-local, align 4
  %v3_11570 = icmp eq i32 %v0_11568, 0
  %v3_11574 = inttoptr i32 %v2_11574 to i8*
  store i8 %v2_1156c, i8* %v3_11574, align 1
  %v4_11574 = load i32, i32* @r0, align 4
  %v5_11574 = add i32 %v4_11574, 1
  store i32 %v5_11574, i32* @r0, align 4
  br i1 %v3_11570, label %dec_label_pc_1157c.loopexit, label %dec_label_pc_11568.dec_label_pc_11568_crit_edge

dec_label_pc_11568.dec_label_pc_11568_crit_edge:  ; preds = %dec_label_pc_11568
  %v0_11568.pre = load i32, i32* @r2, align 4
  %v0_1156c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11568

dec_label_pc_1157c.loopexit:                      ; preds = %dec_label_pc_11568
  %v0_1157c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1157c

dec_label_pc_1157c:                               ; preds = %dec_label_pc_1157c.loopexit, %dec_label_pc_1155c
  %v0_1157c = phi i32 [ %v0_1157c.pre, %dec_label_pc_1157c.loopexit ], [ %v1_1154c, %dec_label_pc_1155c ]
  ret i32 %v0_1157c

dec_label_pc_11584:                               ; preds = %dec_label_pc_1153c
  store i32 %v3_1153c, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_11568.preheader

; uselistorder directives
  uselistorder i32 %v5_11574, { 1, 0 }
  uselistorder i32 %v0_1156c, { 1, 0 }
  uselistorder i32 %v1_1154c, { 1, 0, 2, 4, 3 }
  uselistorder i32 %v3_1153c, { 1, 0 }
  uselistorder i32 %tmp, { 1, 0, 2 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder label %dec_label_pc_11568.preheader, { 1, 0 }
}

define i32 @function_11590(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11590:
  %ip.global-to-local = alloca i32, align 4
  %v2_11590 = icmp eq i32 %arg3, 0
  br i1 %v2_11590, label %.loopexit, label %bb

.loopexit:                                        ; preds = %dec_label_pc_1159c, %dec_label_pc_11590
  ret i32 %arg1

bb:                                               ; preds = %dec_label_pc_11590
  store i32 0, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_1159c

dec_label_pc_1159c:                               ; preds = %dec_label_pc_1159c, %bb
  %v0_1159c = phi i32 [ %v1_115a4, %dec_label_pc_1159c ], [ 0, %bb ]
  %v2_1159c = add i32 %v0_1159c, %arg2
  %v3_1159c = inttoptr i32 %v2_1159c to i8*
  %v4_1159c = load i8, i8* %v3_1159c, align 1
  %v4_115a0 = add i32 %v0_1159c, %arg1
  %v5_115a0 = inttoptr i32 %v4_115a0 to i8*
  store i8 %v4_1159c, i8* %v5_115a0, align 1
  %v0_115a4 = load i32, i32* %ip.global-to-local, align 4
  %v1_115a4 = add i32 %v0_115a4, 1
  store i32 %v1_115a4, i32* %ip.global-to-local, align 4
  %v9_115a8 = icmp eq i32 %v1_115a4, %arg3
  br i1 %v9_115a8, label %.loopexit, label %dec_label_pc_1159c

; uselistorder directives
  uselistorder i32 %v1_115a4, { 1, 2, 0 }
}

define i32 @function_115b4() local_unnamed_addr {
dec_label_pc_115b4:
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %v0_115b4 = load i32, i32* @r1, align 4
  %v2_115b4 = icmp eq i32 %v0_115b4, 0
  br i1 %v2_115b4, label %bb, label %bb3

bb:                                               ; preds = %dec_label_pc_115b4
  %v2_115b8 = load i32, i32* @r0, align 4
  ret i32 %v2_115b8

bb3:                                              ; preds = %dec_label_pc_115b4
  store i32 0, i32* %r3.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_115c4

dec_label_pc_115c4:                               ; preds = %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge, %bb3
  %v2_115c4 = phi i32 [ %v1_115c8, %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge ], [ 0, %bb3 ]
  %v0_115c4.off0 = phi i8 [ %extract.t, %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge ], [ 0, %bb3 ]
  %v3_115c4 = load i32, i32* @r0, align 4
  %v4_115c4 = add i32 %v3_115c4, %v2_115c4
  %v5_115c4 = inttoptr i32 %v4_115c4 to i8*
  store i8 %v0_115c4.off0, i8* %v5_115c4, align 1
  %v0_115c8 = load i32, i32* %r3.global-to-local, align 4
  %v1_115c8 = add i32 %v0_115c8, 1
  store i32 %v1_115c8, i32* %r3.global-to-local, align 4
  %v1_115cc = load i32, i32* @r1, align 4
  %v9_115cc = icmp eq i32 %v1_115c8, %v1_115cc
  br i1 %v9_115cc, label %dec_label_pc_115d4, label %dec_label_pc_115c4.dec_label_pc_115c4_crit_edge

dec_label_pc_115c4.dec_label_pc_115c4_crit_edge:  ; preds = %dec_label_pc_115c4
  %v0_115c4.pre = load i32, i32* %r2.global-to-local, align 4
  %extract.t = trunc i32 %v0_115c4.pre to i8
  br label %dec_label_pc_115c4

dec_label_pc_115d4:                               ; preds = %dec_label_pc_115c4
  %v1_115d4 = load i32, i32* @r0, align 4
  ret i32 %v1_115d4

; uselistorder directives
  uselistorder i32 %v1_115c8, { 1, 2, 0 }
}

define i32 @function_115d8(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_115d8:
  %v7_115ec = icmp sgt i32 %arg4, %arg2
  br i1 %v7_115ec, label %dec_label_pc_115f0, label %dec_label_pc_115f8

dec_label_pc_115f0:                               ; preds = %dec_label_pc_1160c, %dec_label_pc_115d8, %dec_label_pc_115f8
  ret i32 -1

dec_label_pc_115f8:                               ; preds = %dec_label_pc_115d8
  %tmp10 = icmp slt i32 %arg2, 1
  br i1 %tmp10, label %dec_label_pc_115f0, label %dec_label_pc_11600

dec_label_pc_11600:                               ; preds = %dec_label_pc_115f8
  br label %dec_label_pc_11618

dec_label_pc_1160c:                               ; preds = %dec_label_pc_11630, %dec_label_pc_11618
  %v1_1160c = add i32 %v0_11638, 1
  %v9_11610 = icmp eq i32 %v1_1160c, %arg2
  br i1 %v9_11610, label %dec_label_pc_115f0, label %dec_label_pc_11618

dec_label_pc_11618:                               ; preds = %dec_label_pc_1160c, %dec_label_pc_11600
  %v0_11638 = phi i32 [ %v1_1160c, %dec_label_pc_1160c ], [ 0, %dec_label_pc_11600 ]
  %v0_11624 = phi i32 [ %v1_11624., %dec_label_pc_1160c ], [ 0, %dec_label_pc_11600 ]
  %v2_11618 = add i32 %v0_11624, %arg3
  %v3_11618 = inttoptr i32 %v2_11618 to i8*
  %v4_11618 = load i8, i8* %v3_11618, align 1
  %v2_1161c = add i32 %v0_11638, %arg1
  %v3_1161c = inttoptr i32 %v2_1161c to i8*
  %v4_1161c = load i8, i8* %v3_1161c, align 1
  %v9_11620 = icmp eq i8 %v4_1161c, %v4_11618
  %v1_11624 = add i32 %v0_11624, 1
  %v1_11624. = select i1 %v9_11620, i32 %v1_11624, i32 0
  br i1 %v9_11620, label %dec_label_pc_11630, label %dec_label_pc_1160c

dec_label_pc_11630:                               ; preds = %dec_label_pc_11618
  %v9_11630 = icmp eq i32 %v1_11624., %arg4
  br i1 %v9_11630, label %dec_label_pc_11638, label %dec_label_pc_1160c

dec_label_pc_11638:                               ; preds = %dec_label_pc_11630
  %v1_11638 = add i32 %v0_11638, 1
  ret i32 %v1_11638

; uselistorder directives
  uselistorder i1 %v9_11620, { 1, 0 }
  uselistorder i32 %v0_11624, { 1, 0 }
  uselistorder i32 %arg2, { 0, 2, 1 }
  uselistorder label %dec_label_pc_115f0, { 0, 2, 1 }
}

define i32 @function_11640(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11640:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-28 = alloca i32, align 4
  %v3_11640 = load i32, i32* @r4, align 4
  store i32 %v3_11640, i32* %stack_var_-28, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_1164c

dec_label_pc_1164c:                               ; preds = %.thread, %dec_label_pc_11664, %bb, %dec_label_pc_11640
  %v0_1164c = phi i32 [ %tmp, %dec_label_pc_11640 ], [ %v5_1164c, %bb ], [ %v5_1164c, %dec_label_pc_11664 ], [ %v5_1164c, %.thread ]
  %v1_1164c = inttoptr i32 %v0_1164c to i8*
  %v2_1164c = load i8, i8* %v1_1164c, align 1
  %v3_1164c = zext i8 %v2_1164c to i32
  %v5_1164c = add i32 %v0_1164c, 1
  store i32 %v5_1164c, i32* %r5.global-to-local, align 4
  %v7_11654 = icmp eq i8 %v2_1164c, 9
  br i1 %v7_11654, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_1164c
  store i32 %v3_1164c, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1164c

bb:                                               ; preds = %dec_label_pc_1164c
  %v8_11658 = icmp eq i8 %v2_1164c, 32
  store i32 %v3_1164c, i32* %r4.global-to-local, align 4
  br i1 %v8_11658, label %dec_label_pc_1164c, label %dec_label_pc_11664

dec_label_pc_11664:                               ; preds = %bb
  %v7_11664 = icmp eq i8 %v2_1164c, 10
  br i1 %v7_11664, label %dec_label_pc_1164c, label %dec_label_pc_1166c

dec_label_pc_1166c:                               ; preds = %dec_label_pc_11664
  %v7_1166c = icmp eq i8 %v2_1164c, 45
  br i1 %v7_1166c, label %dec_label_pc_1174c, label %dec_label_pc_11674

dec_label_pc_11674:                               ; preds = %dec_label_pc_1166c
  %v7_11674 = icmp eq i8 %v2_1164c, 43
  br i1 %v7_11674, label %bb48, label %dec_label_pc_11684

bb48:                                             ; preds = %dec_label_pc_11674
  %v2_11678 = inttoptr i32 %v5_1164c to i8*
  %v3_11678 = load i8, i8* %v2_11678, align 1
  %v4_11678 = zext i8 %v3_11678 to i32
  store i32 %v4_11678, i32* %r4.global-to-local, align 4
  %v6_11678 = add i32 %v0_1164c, 2
  store i32 %v6_11678, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11684

dec_label_pc_11684:                               ; preds = %bb48, %dec_label_pc_11674, %dec_label_pc_1174c
  %storemerge1 = phi i32 [ -2147483648, %dec_label_pc_1174c ], [ 2147483647, %dec_label_pc_11674 ], [ 2147483647, %bb48 ]
  %storemerge = phi i32 [ 1, %dec_label_pc_1174c ], [ 0, %dec_label_pc_11674 ], [ 0, %bb48 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  %v2_1168c = call i32 @function_11ba0(i32 %storemerge1, i32 %arg2)
  %v0_11690 = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_11690, i32* @r1, align 4
  store i32 %v2_1168c, i32* %r8.global-to-local, align 4
  store i32 %storemerge1, i32* @r0, align 4
  %v0_1169c = call i32 @function_11a90()
  store i32 %v0_1169c, i32* @lr, align 4
  %v0_116ac.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_116ac

dec_label_pc_116ac:                               ; preds = %.thread8, %dec_label_pc_11684
  %v2_1172811 = phi i32 [ %v1_1174426, %.thread8 ], [ 0, %dec_label_pc_11684 ]
  %v1_11704 = phi i32 [ %v0_1173824, %.thread8 ], [ 0, %dec_label_pc_11684 ]
  %v1_116ec = phi i32 [ %v3_11730, %.thread8 ], [ %v0_116ac.pre, %dec_label_pc_11684 ]
  %v1_116ac = urem i32 %v1_116ec, 256
  %v1_116b0 = add nsw i32 %v1_116ac, -48
  %v1_116b8 = add nsw i32 %v1_116ac, -97
  %v1_116bc = add i32 %v1_116ec, -48
  %v1_116c0 = add nsw i32 %v1_116ac, -65
  %tmp71 = icmp ult i32 %v1_116b0, 10
  br i1 %tmp71, label %dec_label_pc_116f0, label %dec_label_pc_116c8

dec_label_pc_116c8:                               ; preds = %dec_label_pc_116ac
  %v2_116c8 = icmp ugt i32 %v1_116c0, 24
  %v7_116c8 = icmp eq i32 %v1_116c0, 25
  %v2_116cc = xor i1 %v7_116c8, true
  %v3_116cc = and i1 %v2_116c8, %v2_116cc
  br i1 %v3_116cc, label %bb49, label %bb50

bb49:                                             ; preds = %dec_label_pc_116c8
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_116c8, %bb49
  %v0_116e020 = phi i32 [ %v1_116bc, %dec_label_pc_116c8 ], [ 0, %bb49 ]
  %v2_116d0 = xor i1 %v2_116c8, true
  %v3_116d0 = or i1 %v7_116c8, %v2_116d0
  br i1 %v3_116d0, label %bb51, label %bb52

bb51:                                             ; preds = %bb50
  br label %bb52

bb52:                                             ; preds = %bb50, %bb51
  %v0_116e0 = phi i32 [ %v0_116e020, %bb50 ], [ 1, %bb51 ]
  br i1 %v3_116cc, label %bb53, label %bb54

bb53:                                             ; preds = %bb52
  %v6_116d8 = icmp ugt i32 %v1_116b8, 24
  %v11_116d8 = icmp eq i32 %v1_116b8, 25
  br label %bb54

bb54:                                             ; preds = %bb52, %bb53
  %v1_116dc = phi i1 [ %v7_116c8, %bb52 ], [ %v11_116d8, %bb53 ]
  %v0_116dc = phi i1 [ %v2_116c8, %bb52 ], [ %v6_116d8, %bb53 ]
  %v2_116dc = xor i1 %v1_116dc, true
  %v3_116dc = and i1 %v0_116dc, %v2_116dc
  br i1 %v3_116dc, label %dec_label_pc_11738, label %dec_label_pc_116e0

dec_label_pc_116e0:                               ; preds = %bb54
  %v2_116e0 = icmp eq i32 %v0_116e0, 0
  %. = select i1 %v2_116e0, i32 87, i32 55
  %v2_116ec = sub i32 %v1_116ec, %.
  br label %dec_label_pc_116f0

dec_label_pc_116f0:                               ; preds = %dec_label_pc_116ac, %dec_label_pc_116e0
  %v0_1170434 = phi i32 [ %v1_116c0, %dec_label_pc_116ac ], [ %., %dec_label_pc_116e0 ]
  %v3_1172812 = phi i32 [ %v1_116bc, %dec_label_pc_116ac ], [ %v2_116ec, %dec_label_pc_116e0 ]
  %v1_116f0 = load i32, i32* %r6.global-to-local, align 4
  %v6_116f4 = icmp slt i32 %v3_1172812, %v1_116f0
  br i1 %v6_116f4, label %dec_label_pc_116f8, label %dec_label_pc_11738

dec_label_pc_116f8:                               ; preds = %dec_label_pc_116f0
  %v3_116f8 = icmp uge i32 %v2_1172811, %v0_1169c
  %v9_116f8 = icmp eq i32 %v2_1172811, %v0_1169c
  %v2_116fc = xor i1 %v3_116f8, true
  %v3_116fc = or i1 %v9_116f8, %v2_116fc
  br i1 %v3_116fc, label %bb57, label %bb58

bb57:                                             ; preds = %dec_label_pc_116f8
  br label %bb58

bb58:                                             ; preds = %dec_label_pc_116f8, %bb57
  %v0_1170433 = phi i32 [ %v0_1170434, %dec_label_pc_116f8 ], [ 0, %bb57 ]
  %v2_11700 = xor i1 %v9_116f8, true
  %v3_11700 = and i1 %v3_116f8, %v2_11700
  br i1 %v3_11700, label %bb59, label %bb60

bb59:                                             ; preds = %bb58
  br label %bb60

bb60:                                             ; preds = %bb58, %bb59
  %v0_11704 = phi i32 [ %v0_1170433, %bb58 ], [ 1, %bb59 ]
  %tmp72 = icmp slt i32 %v1_11704, 0
  %v4_11704 = zext i1 %tmp72 to i32
  %v5_11704 = or i32 %v0_11704, %v4_11704
  %v7_11704 = icmp eq i32 %v5_11704, 0
  br i1 %v7_11704, label %dec_label_pc_11710, label %.thread8

dec_label_pc_11710:                               ; preds = %bb60
  %v1_1171c = load i32, i32* %r8.global-to-local, align 4
  %v7_11720 = icmp sgt i32 %v3_1172812, %v1_1171c
  br i1 %v7_11720, label %bb63, label %.thread5

.thread5:                                         ; preds = %dec_label_pc_11710
  br label %bb64

bb63:                                             ; preds = %dec_label_pc_11710
  %v2_11724 = icmp eq i1 %v9_116f8, false
  br i1 %v2_11724, label %bb64, label %.thread8

bb64:                                             ; preds = %bb63, %.thread5
  %v4_1172813 = mul i32 %v1_116f0, %v2_1172811
  %v5_1172814 = add i32 %v4_1172813, %v3_1172812
  br label %.thread8

.thread8:                                         ; preds = %bb63, %bb60, %bb64
  %v1_1174426 = phi i32 [ %v2_1172811, %bb63 ], [ %v2_1172811, %bb60 ], [ %v5_1172814, %bb64 ]
  %v0_1173824 = phi i32 [ -1, %bb63 ], [ -1, %bb60 ], [ 1, %bb64 ]
  %v0_11730 = load i32, i32* %r5.global-to-local, align 4
  %v1_11730 = inttoptr i32 %v0_11730 to i8*
  %v2_11730 = load i8, i8* %v1_11730, align 1
  %v3_11730 = zext i8 %v2_11730 to i32
  store i32 %v3_11730, i32* %r4.global-to-local, align 4
  %v5_11730 = add i32 %v0_11730, 1
  store i32 %v5_11730, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_116ac

dec_label_pc_11738:                               ; preds = %dec_label_pc_116f0, %bb54
  %v1_11738 = icmp slt i32 %v1_11704, 0
  %v0_1175c = load i32, i32* %sl.global-to-local, align 4
  %v2_1175c = icmp eq i32 %v0_1175c, 0
  br i1 %v1_11738, label %dec_label_pc_1175c, label %dec_label_pc_11740

dec_label_pc_11740:                               ; preds = %dec_label_pc_11738
  br i1 %v2_1175c, label %bb66, label %bb65

bb65:                                             ; preds = %dec_label_pc_11740
  %v2_11744 = sub i32 0, %v2_1172811
  br label %bb66

bb66:                                             ; preds = %dec_label_pc_11740, %bb65
  %v23_11748 = phi i32 [ %v2_1172811, %dec_label_pc_11740 ], [ %v2_11744, %bb65 ]
  %v2_11748 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11748, i32* @r4, align 4
  ret i32 %v23_11748

dec_label_pc_1174c:                               ; preds = %dec_label_pc_1166c
  %v1_1174c = inttoptr i32 %v5_1164c to i8*
  %v2_1174c = load i8, i8* %v1_1174c, align 1
  %v3_1174c = zext i8 %v2_1174c to i32
  store i32 %v3_1174c, i32* %r4.global-to-local, align 4
  %v5_1174c = add i32 %v0_1164c, 2
  store i32 %v5_1174c, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11684

dec_label_pc_1175c:                               ; preds = %dec_label_pc_11738
  %.70 = select i1 %v2_1175c, i32 2147483647, i32 -2147483648
  %v2_11768 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11768, i32* @r4, align 4
  ret i32 %.70

; uselistorder directives
  uselistorder i32 %v3_11730, { 1, 0 }
  uselistorder i1 %v9_116f8, { 1, 0, 2 }
  uselistorder i1 %v3_116f8, { 1, 0 }
  uselistorder i32 %., { 1, 0 }
  uselistorder i1 %v7_116c8, { 1, 2, 0 }
  uselistorder i1 %v2_116c8, { 1, 0, 2 }
  uselistorder i32 %v1_116ac, { 1, 2, 0 }
  uselistorder i32 %v1_116ec, { 1, 2, 0 }
  uselistorder i32 %v1_11704, { 1, 0 }
  uselistorder i32 %v2_1172811, { 0, 1, 6, 3, 2, 4, 5 }
  uselistorder i32 %v0_1169c, { 1, 0, 2 }
  uselistorder i32 %v5_1164c, { 3, 4, 5, 2, 1, 0 }
  uselistorder i32 %v3_1164c, { 1, 0 }
  uselistorder i32 %v0_1164c, { 0, 1, 3, 2 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i8 9, { 4, 5, 2, 0, 1, 3 }
  uselistorder label %bb66, { 1, 0 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %bb60, { 1, 0 }
  uselistorder label %bb58, { 1, 0 }
  uselistorder label %dec_label_pc_116f0, { 1, 0 }
  uselistorder label %bb54, { 1, 0 }
  uselistorder label %bb52, { 1, 0 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_11684, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1164c, { 1, 2, 0, 3 }
}

define i32 @function_1176c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1176c:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-24 = alloca i32, align 4
  %v3_1176c = load i32, i32* @r4, align 4
  store i32 %v3_1176c, i32* %stack_var_-24, align 4
  store i32 %tmp, i32* %r8.global-to-local, align 4
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %arg3, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* @r4, align 4
  store i32 0, i32* %r5.global-to-local, align 4
  br label %dec_label_pc_11784

dec_label_pc_11784:                               ; preds = %dec_label_pc_117b0.dec_label_pc_11784_crit_edge, %dec_label_pc_1176c
  %v0_11788 = phi i32 [ %v0_11788.pre, %dec_label_pc_117b0.dec_label_pc_11784_crit_edge ], [ %arg3, %dec_label_pc_1176c ]
  %v0_11784 = phi i32 [ %v1_1179c, %dec_label_pc_117b0.dec_label_pc_11784_crit_edge ], [ %tmp, %dec_label_pc_1176c ]
  %tmp12 = inttoptr i32 %v0_11784 to i32*
  %v5_11790 = call i32 @function_11fe0(i32 %v0_11788, i32* %tmp12, i32 1)
  %v7_11794 = icmp eq i32 %v5_11790, 1
  %v0_11798 = load i32, i32* @r4, align 4
  %v1_1179c = add i32 %v0_11798, 1
  store i32 %v1_1179c, i32* @r4, align 4
  %v0_117a4 = load i32, i32* %r5.global-to-local, align 4
  br i1 %v7_11794, label %dec_label_pc_117a4, label %dec_label_pc_117bc

dec_label_pc_117a4:                               ; preds = %dec_label_pc_11784
  %v1_117a4 = add i32 %v0_117a4, 1
  store i32 %v1_117a4, i32* %r5.global-to-local, align 4
  %v0_117a8 = load i32, i32* %r7.global-to-local, align 4
  %v7_117ac = icmp sgt i32 %v0_117a8, %v1_117a4
  br i1 %v7_117ac, label %dec_label_pc_117b0, label %dec_label_pc_117bc

dec_label_pc_117b0:                               ; preds = %dec_label_pc_117a4
  %v1_117b0 = inttoptr i32 %v0_11798 to i8*
  %v2_117b0 = load i8, i8* %v1_117b0, align 1
  %v7_117b4 = icmp eq i8 %v2_117b0, 10
  br i1 %v7_117b4, label %dec_label_pc_117bc, label %dec_label_pc_117b0.dec_label_pc_11784_crit_edge

dec_label_pc_117b0.dec_label_pc_11784_crit_edge:  ; preds = %dec_label_pc_117b0
  %v0_11788.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11784

dec_label_pc_117bc:                               ; preds = %dec_label_pc_11784, %dec_label_pc_117b0, %dec_label_pc_117a4
  %v0_117bc = phi i32 [ %v1_117a4, %dec_label_pc_117b0 ], [ %v1_117a4, %dec_label_pc_117a4 ], [ %v0_117a4, %dec_label_pc_11784 ]
  %v2_117bc = icmp eq i32 %v0_117bc, 0
  %v1_117c0 = load i32, i32* %r8.global-to-local, align 4
  %storemerge = select i1 %v2_117bc, i32 0, i32 %v1_117c0
  %v2_117c8 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_117c8, i32* @r4, align 4
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v1_1179c, { 1, 0 }
  uselistorder i8 10, { 2, 0, 3, 4, 1 }
  uselistorder i32 (i32, i32*, i32)* @function_11fe0, { 1, 3, 0, 2 }
  uselistorder label %dec_label_pc_117bc, { 1, 2, 0 }
}

define i32 @function_117cc() local_unnamed_addr {
dec_label_pc_117cc:
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %v3_117cc = load i32, i32* @r4, align 4
  store i32 16, i32* @r4, align 4
  store i32 16, i32* %stack_var_-24, align 4
  %v0_117dc = call i32 @function_123ec()
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_117e4 = inttoptr i32 %v0_117dc to i32*
  store i32 0, i32* %v2_117e4, align 4
  %v0_117f0 = load i32, i32* %r6.global-to-local, align 4
  %v3_117f4 = call i32 @function_1272c(i32 2, i32 2, i32 %v0_117f0)
  %v7_11800 = icmp eq i32 %v3_117f4, -1
  store i32 %v3_117f4, i32* %r5.global-to-local, align 4
  %v2_1180c = load i32, i32* @r4, align 4
  br i1 %v7_11800, label %dec_label_pc_1185c, label %dec_label_pc_11820

dec_label_pc_11820:                               ; preds = %dec_label_pc_117cc
  %v7_1180c = shl i32 2056, %v2_1180c
  %v8_1180c = or i32 %v7_1180c, 2056
  store i32 2, i32* %stack_var_-40, align 4
  %v3_1183c = bitcast i32* %stack_var_-40 to %sockaddr*
  %v4_1183c = call i32 @function_12588(i32 %v3_117f4, %sockaddr* %v3_1183c, i32 %v2_1180c)
  %v2_11844 = ptrtoint i32* %stack_var_-24 to i32
  %v0_11848 = load i32, i32* %r5.global-to-local, align 4
  %v4_1184c = call i32 @function_125b4(i32 %v0_11848, %sockaddr* %v3_1183c, i32 %v2_11844)
  %v1_11854 = call i32 @function_11e18(i32 %v0_11848)
  br label %dec_label_pc_1185c

dec_label_pc_1185c:                               ; preds = %dec_label_pc_117cc, %dec_label_pc_11820
  %v0_1185c = phi i32 [ %v0_117f0, %dec_label_pc_117cc ], [ %v8_1180c, %dec_label_pc_11820 ]
  store i32 %v3_117cc, i32* @r4, align 4
  ret i32 %v0_1185c

; uselistorder directives
  uselistorder i32 %v3_117f4, { 1, 2, 0 }
  uselistorder i32* %stack_var_-24, { 1, 0 }
  uselistorder i32 (i32, %sockaddr*, i32)* @function_12588, { 1, 0, 2, 4, 3, 5, 6, 7, 8, 9 }
  uselistorder i32 2056, { 1, 0 }
  uselistorder i32 (i32, i32, i32)* @function_1272c, { 24, 25, 22, 23, 20, 21, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 }
  uselistorder label %dec_label_pc_1185c, { 1, 0 }
}

define i32 @function_11868(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11868:
  %tmp = inttoptr i32 %arg2 to i8*
  %tmp20 = ptrtoint i8* %arg1 to i32
  %v3_1186c = load i8, i8* %tmp, align 1
  %v2_11870 = icmp eq i8 %v3_1186c, 0
  br i1 %v2_11870, label %bb, label %dec_label_pc_11884

bb:                                               ; preds = %dec_label_pc_11868
  %v4_1186c = zext i8 %v3_1186c to i32
  br label %dec_label_pc_11898

dec_label_pc_11884:                               ; preds = %dec_label_pc_11868
  br label %dec_label_pc_11888

dec_label_pc_11888:                               ; preds = %dec_label_pc_11888, %dec_label_pc_11884
  %v0_11888 = phi i32 [ %v1_11888, %dec_label_pc_11888 ], [ 0, %dec_label_pc_11884 ]
  %v1_11888 = add i32 %v0_11888, 1
  %v2_1188c = add i32 %v1_11888, %arg2
  %v3_1188c = inttoptr i32 %v2_1188c to i8*
  %v4_1188c = load i8, i8* %v3_1188c, align 1
  %v2_11890 = icmp eq i8 %v4_1188c, 0
  br i1 %v2_11890, label %dec_label_pc_11898, label %dec_label_pc_11888

dec_label_pc_11898:                               ; preds = %dec_label_pc_11888, %bb
  %v0_118dc18 = phi i32 [ %v4_1186c, %bb ], [ %v1_11888, %dec_label_pc_11888 ]
  %v0_118a01 = load i32, i32* @r1, align 4
  %tmp27 = icmp slt i32 %v0_118a01, 1
  br i1 %tmp27, label %dec_label_pc_118ec, label %dec_label_pc_118ac

dec_label_pc_118ac:                               ; preds = %dec_label_pc_11898, %dec_label_pc_118a0.backedge
  %v0_118a4.in = phi i32 [ %v0_118a4, %dec_label_pc_118a0.backedge ], [ %v0_118a01, %dec_label_pc_11898 ]
  %v0_118d0 = phi i32 [ %v1_118d0., %dec_label_pc_118a0.backedge ], [ 0, %dec_label_pc_11898 ]
  %v0_118ac = phi i32 [ %v5_118ac, %dec_label_pc_118a0.backedge ], [ %tmp20, %dec_label_pc_11898 ]
  %v0_118a4 = add i32 %v0_118a4.in, -1
  %v1_118ac = inttoptr i32 %v0_118ac to i8*
  %v2_118ac = load i8, i8* %v1_118ac, align 1
  %v3_118ac = zext i8 %v2_118ac to i32
  store i32 %v3_118ac, i32* @lr, align 4
  %v5_118ac = add i32 %v0_118ac, 1
  %v2_118b0 = add i32 %v0_118d0, %arg2
  %v3_118b0 = inttoptr i32 %v2_118b0 to i8*
  %v4_118b0 = load i8, i8* %v3_118b0, align 1
  %v6_118b0 = zext i8 %v4_118b0 to i32
  %v1_118b4 = add nsw i32 %v3_118ac, -65
  %v1_118b8 = add nsw i32 %v6_118b0, -65
  %tmp35 = icmp ult i32 %v1_118b4, 26
  br i1 %tmp35, label %bb28, label %bb29

bb28:                                             ; preds = %dec_label_pc_118ac
  %v5_118c0 = or i32 %v3_118ac, 96
  store i32 %v5_118c0, i32* @lr, align 4
  br label %bb29

bb29:                                             ; preds = %dec_label_pc_118ac, %bb28
  %v0_118cc = phi i32 [ %v3_118ac, %dec_label_pc_118ac ], [ %v5_118c0, %bb28 ]
  %tmp36 = icmp ult i32 %v1_118b8, 26
  br i1 %tmp36, label %bb30, label %bb31

bb30:                                             ; preds = %bb29
  %v5_118c8 = or i32 %v6_118b0, 96
  br label %bb31

bb31:                                             ; preds = %bb29, %bb30
  %v1_118cc = phi i32 [ %v6_118b0, %bb29 ], [ %v5_118c8, %bb30 ]
  %v9_118cc = icmp eq i32 %v0_118cc, %v1_118cc
  %v1_118d0 = add i32 %v0_118d0, 1
  %v1_118d0. = select i1 %v9_118cc, i32 %v1_118d0, i32 0
  br i1 %v9_118cc, label %dec_label_pc_118dc, label %dec_label_pc_118a0.backedge

dec_label_pc_118a0.backedge:                      ; preds = %bb31, %dec_label_pc_118dc
  %tmp32 = icmp slt i32 %v0_118a4, 1
  br i1 %tmp32, label %dec_label_pc_118ec, label %dec_label_pc_118ac

dec_label_pc_118dc:                               ; preds = %bb31
  %v9_118dc = icmp eq i32 %v0_118dc18, %v1_118d0.
  br i1 %v9_118dc, label %dec_label_pc_118e4, label %dec_label_pc_118a0.backedge

dec_label_pc_118e4:                               ; preds = %dec_label_pc_118dc
  %v2_118e4 = sub i32 %v5_118ac, %tmp20
  ret i32 %v2_118e4

dec_label_pc_118ec:                               ; preds = %dec_label_pc_118a0.backedge, %dec_label_pc_11898
  ret i32 -1

; uselistorder directives
  uselistorder i32 %v1_118d0., { 1, 0 }
  uselistorder i32 %v0_118ac, { 1, 0 }
  uselistorder i32 %v0_118d0, { 1, 0 }
  uselistorder i8 %v3_1186c, { 1, 0 }
  uselistorder i32 %tmp20, { 1, 0 }
  uselistorder label %dec_label_pc_118a0.backedge, { 1, 0 }
  uselistorder label %bb31, { 1, 0 }
  uselistorder label %bb29, { 1, 0 }
  uselistorder label %dec_label_pc_118ac, { 1, 0 }
}

define i32 @function_118f4(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_118f4:
  %tmp = ptrtoint i8* %arg1 to i32
  %v2_118f4 = load i8, i8* %arg1, align 1
  %v2_118f8 = icmp eq i8 %v2_118f4, 0
  br i1 %v2_118f8, label %bb, label %dec_label_pc_11904

bb:                                               ; preds = %dec_label_pc_118f4
  %v3_118f4 = zext i8 %v2_118f4 to i32
  br label %dec_label_pc_11918

dec_label_pc_11904:                               ; preds = %dec_label_pc_118f4
  br label %dec_label_pc_11908

dec_label_pc_11908:                               ; preds = %dec_label_pc_11908, %dec_label_pc_11904
  %v0_11908 = phi i32 [ %v1_11908, %dec_label_pc_11908 ], [ 0, %dec_label_pc_11904 ]
  %v1_11908 = add i32 %v0_11908, 1
  %v2_1190c = add i32 %v1_11908, %tmp
  %v3_1190c = inttoptr i32 %v2_1190c to i8*
  %v4_1190c = load i8, i8* %v3_1190c, align 1
  %v2_11910 = icmp eq i8 %v4_1190c, 0
  br i1 %v2_11910, label %dec_label_pc_11918, label %dec_label_pc_11908

dec_label_pc_11918:                               ; preds = %dec_label_pc_11908, %bb
  %v0_1193c = phi i32 [ %v3_118f4, %bb ], [ %v1_11908, %dec_label_pc_11908 ]
  %v1_11918 = inttoptr i32 %arg2 to i8*
  %v2_11918 = load i8, i8* %v1_11918, align 1
  %v3_11918 = zext i8 %v2_11918 to i32
  %v2_1191c = icmp eq i8 %v2_11918, 0
  br i1 %v2_1191c, label %bb22, label %dec_label_pc_11928

bb22:                                             ; preds = %dec_label_pc_11918
  store i32 %v3_11918, i32* @r2, align 4
  br label %dec_label_pc_1193c

dec_label_pc_11928:                               ; preds = %dec_label_pc_11918
  br label %dec_label_pc_1192c

dec_label_pc_1192c:                               ; preds = %dec_label_pc_1192c, %dec_label_pc_11928
  %v0_1192c = phi i32 [ %v1_1192c, %dec_label_pc_1192c ], [ 0, %dec_label_pc_11928 ]
  %v1_1192c = add i32 %v0_1192c, 1
  store i32 %v1_1192c, i32* @r2, align 4
  %v2_11930 = add i32 %v1_1192c, %arg2
  %v3_11930 = inttoptr i32 %v2_11930 to i8*
  %v4_11930 = load i8, i8* %v3_11930, align 1
  %v2_11934 = icmp eq i8 %v4_11930, 0
  br i1 %v2_11934, label %dec_label_pc_1193c, label %dec_label_pc_1192c

dec_label_pc_1193c:                               ; preds = %dec_label_pc_1192c, %bb22
  %v0_119684 = phi i32 [ %v3_11918, %bb22 ], [ %v1_1192c, %dec_label_pc_1192c ]
  %v9_1193c = icmp eq i32 %v0_1193c, %v0_119684
  br i1 %v9_1193c, label %dec_label_pc_11968.preheader, label %dec_label_pc_11948

dec_label_pc_11968.preheader:                     ; preds = %dec_label_pc_1193c
  %v2_119686 = icmp eq i32 %v0_1193c, 0
  br i1 %v2_119686, label %dec_label_pc_11970, label %dec_label_pc_11950

dec_label_pc_11948:                               ; preds = %dec_label_pc_11950, %dec_label_pc_1193c
  ret i32 0

dec_label_pc_11950:                               ; preds = %dec_label_pc_11960, %dec_label_pc_11968.preheader
  %v0_11968.in = phi i32 [ %v0_11968, %dec_label_pc_11960 ], [ %v0_1193c, %dec_label_pc_11968.preheader ]
  %v0_11964 = phi i32 [ %v1_11964, %dec_label_pc_11960 ], [ %arg2, %dec_label_pc_11968.preheader ]
  %v0_11960 = phi i32 [ %v1_11960, %dec_label_pc_11960 ], [ %tmp, %dec_label_pc_11968.preheader ]
  %v0_11968 = add i32 %v0_11968.in, -1
  %v1_11950 = inttoptr i32 %v0_11960 to i8*
  %v2_11950 = load i8, i8* %v1_11950, align 1
  %v3_11950 = zext i8 %v2_11950 to i32
  store i32 %v3_11950, i32* @r2, align 4
  %v1_11954 = inttoptr i32 %v0_11964 to i8*
  %v2_11954 = load i8, i8* %v1_11954, align 1
  %v9_11958 = icmp eq i8 %v2_11950, %v2_11954
  br i1 %v9_11958, label %dec_label_pc_11960, label %dec_label_pc_11948

dec_label_pc_11960:                               ; preds = %dec_label_pc_11950
  %v1_11960 = add i32 %v0_11960, 1
  %v1_11964 = add i32 %v0_11964, 1
  %v2_11968 = icmp eq i32 %v0_11968, 0
  br i1 %v2_11968, label %dec_label_pc_11970, label %dec_label_pc_11950

dec_label_pc_11970:                               ; preds = %dec_label_pc_11960, %dec_label_pc_11968.preheader
  ret i32 1

; uselistorder directives
  uselistorder i32 %v1_1192c, { 0, 1, 3, 2 }
  uselistorder i8 %v2_118f4, { 1, 0 }
}

define i32 @function_11978(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11978:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* @r2, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = sext i8 %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-62 = alloca i32, align 4
  %stack_var_-30 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_11978 = load i32, i32* @r4, align 4
  store i32 %v3_11978, i32* %stack_var_-28, align 4
  %v22_11978 = ptrtoint i32* %stack_var_-28 to i32
  %v0_1197c = load i32, i32* @r2, align 4
  store i32 %v0_1197c, i32* %r8.global-to-local, align 4
  %v2_1197c = icmp eq i32 %v0_1197c, 0
  store i1 %v2_1197c, i1* %cpsr_z.global-to-local, align 1
  store i32 %arg2, i32* %r5.global-to-local, align 4
  br i1 %v2_1197c, label %dec_label_pc_11a6c, label %dec_label_pc_1198c

dec_label_pc_1198c:                               ; preds = %dec_label_pc_11978
  %v3_1198c = icmp eq i8 %arg1, 0
  store i1 %v3_1198c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1198c, label %.thread, label %dec_label_pc_119a0

.thread:                                          ; preds = %dec_label_pc_1198c
  %v4_11994 = inttoptr i32 %v0_1197c to i8*
  store i8 48, i8* %v4_11994, align 1
  %v0_11998.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_11998.pr.pr, label %.thread1, label %dec_label_pc_119a0

.thread1:                                         ; preds = %.thread
  %v4_11998 = load i32, i32* %r8.global-to-local, align 4
  %v5_11998 = add i32 %v4_11998, 1
  %v6_11998 = inttoptr i32 %v5_11998 to i8*
  store i8 0, i8* %v6_11998, align 1
  %v0_1199c.pr.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_1199c.pr.pr, label %dec_label_pc_11a6c, label %dec_label_pc_119a0

dec_label_pc_119a0:                               ; preds = %dec_label_pc_1198c, %.thread, %.thread1
  %v7_119a4 = icmp eq i32 %arg2, 10
  store i1 %v7_119a4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_119a4, label %bb, label %.thread21

.thread21:                                        ; preds = %dec_label_pc_119a0
  store i1 true, i1* %cpsr_z.global-to-local, align 1
  br label %.thread4

bb:                                               ; preds = %dec_label_pc_119a0
  %tmp39 = icmp slt i8 %arg1, 0
  %phitmp = icmp eq i1 %tmp39, false
  store i1 %phitmp, i1* %cpsr_z.global-to-local, align 1
  br i1 %phitmp, label %.thread4, label %dec_label_pc_119c8

.thread4:                                         ; preds = %bb, %.thread21
  store i32 %tmp, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_119d8

dec_label_pc_119c8:                               ; preds = %bb
  %v2_119c8 = sub nsw i32 0, %tmp
  store i32 %v2_119c8, i32* %r4.global-to-local, align 4
  store i1 %v3_1198c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_1198c, label %dec_label_pc_11a78, label %dec_label_pc_119d8

dec_label_pc_119d8:                               ; preds = %dec_label_pc_119c8, %.thread4
  %v0_119e010 = phi i32 [ %tmp, %.thread4 ], [ %v2_119c8, %dec_label_pc_119c8 ]
  %storemerge = phi i32 [ 0, %.thread4 ], [ 1, %dec_label_pc_119c8 ]
  store i32 %storemerge, i32* %sl.global-to-local, align 4
  store i32 32, i32* %r6.global-to-local, align 4
  %v2_119dc = ptrtoint i32* %stack_var_-30 to i32
  store i32 %v2_119dc, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_119e0

dec_label_pc_119e0:                               ; preds = %bb37, %dec_label_pc_119d8
  %v0_119e0 = phi i32 [ %v0_11a04, %bb37 ], [ %v0_119e010, %dec_label_pc_119d8 ]
  store i32 %v0_119e0, i32* %r0.global-to-local, align 4
  %v0_119e4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_119e4, i32* %r1.global-to-local, align 4
  %sext = mul i32 %v0_119e0, 16777216
  %v1_119e8 = sdiv i32 %sext, 16777216
  %v3_119e8 = call i32 @function_11ba0(i32 %v1_119e8, i32 %v0_119e4)
  store i32 %v3_119e8, i32* %r0.global-to-local, align 4
  %v7_119ec = icmp eq i32 %v3_119e8, 9
  store i1 %v7_119ec, i1* %cpsr_z.global-to-local, align 1
  %v1_119f0 = add i32 %v3_119e8, 48
  %v0_119f4 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_119f4, i32* @r1, align 4
  %v7_119f8 = icmp sgt i32 %v3_119e8, 9
  %extract.t = trunc i32 %v1_119f0 to i8
  br i1 %v7_119f8, label %bb36, label %bb37

bb36:                                             ; preds = %dec_label_pc_119e0
  %v9_119f8 = add i32 %v3_119e8, 55
  %extract.t20 = trunc i32 %v9_119f8 to i8
  br label %bb37

bb37:                                             ; preds = %dec_label_pc_119e0, %bb36
  %v0_11a00.off0 = phi i8 [ %extract.t, %dec_label_pc_119e0 ], [ %extract.t20, %bb36 ]
  %v0_119fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_119fc, i32* @r0, align 4
  %v2_11a00 = load i32, i32* %r7.global-to-local, align 4
  %v3_11a00 = inttoptr i32 %v2_11a00 to i8*
  store i8 %v0_11a00.off0, i8* %v3_11a00, align 1
  %v4_11a00 = load i32, i32* %r7.global-to-local, align 4
  %v5_11a00 = add i32 %v4_11a00, -1
  store i32 %v5_11a00, i32* %r7.global-to-local, align 4
  %v0_11a04 = call i32 @function_11a90()
  store i32 %v0_11a04, i32* %r0.global-to-local, align 4
  store i32 %v0_11a04, i32* %r4.global-to-local, align 4
  %v2_11a08 = icmp eq i32 %v0_11a04, 0
  store i1 %v2_11a08, i1* %cpsr_z.global-to-local, align 1
  %v0_11a0c = load i32, i32* %r6.global-to-local, align 4
  %v1_11a0c = add i32 %v0_11a0c, -1
  store i32 %v1_11a0c, i32* %r6.global-to-local, align 4
  br i1 %v2_11a08, label %dec_label_pc_11a14, label %dec_label_pc_119e0

dec_label_pc_11a14:                               ; preds = %bb37
  %v0_11a14 = load i32, i32* %sl.global-to-local, align 4
  %v2_11a14 = icmp eq i32 %v0_11a14, 0
  store i1 %v2_11a14, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a14, label %bb38, label %dec_label_pc_11a7c

bb38:                                             ; preds = %dec_label_pc_11a14
  store i32 %v0_11a0c, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a20

dec_label_pc_11a20:                               ; preds = %bb38, %dec_label_pc_11a7c
  %v1_11a2c = phi i32 [ %v0_11a0c, %bb38 ], [ %v1_11a24.pre, %dec_label_pc_11a7c ]
  %v2_11a20 = ptrtoint i32* %stack_var_-62 to i32
  %v2_11a24 = add i32 %v1_11a2c, %v2_11a20
  %v3_11a24 = inttoptr i32 %v2_11a24 to i8*
  %v4_11a24 = load i8, i8* %v3_11a24, align 1
  %v6_11a24 = zext i8 %v4_11a24 to i32
  %v2_11a28 = icmp eq i8 %v4_11a24, 0
  store i1 %v2_11a28, i1* %cpsr_z.global-to-local, align 1
  store i32 %v2_11a24, i32* %r1.global-to-local, align 4
  br i1 %v2_11a28, label %dec_label_pc_11a50, label %dec_label_pc_11a34

dec_label_pc_11a34:                               ; preds = %dec_label_pc_11a20
  br label %dec_label_pc_11a38

dec_label_pc_11a38:                               ; preds = %dec_label_pc_11a38, %dec_label_pc_11a34
  %v0_11a38 = phi i32 [ %v1_11a38, %dec_label_pc_11a38 ], [ 0, %dec_label_pc_11a34 ]
  %v1_11a38 = add i32 %v0_11a38, 1
  store i32 %v1_11a38, i32* @r2, align 4
  %v2_11a3c = add i32 %v1_11a38, %v2_11a24
  %v3_11a3c = inttoptr i32 %v2_11a3c to i8*
  %v4_11a3c = load i8, i8* %v3_11a3c, align 1
  %v2_11a40 = icmp eq i8 %v4_11a3c, 0
  store i1 %v2_11a40, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_11a40, label %dec_label_pc_11a48, label %dec_label_pc_11a38

dec_label_pc_11a48:                               ; preds = %dec_label_pc_11a38
  %v7_11a48 = icmp eq i32 %v0_11a38, -2
  store i1 %v7_11a48, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_11a48, label %dec_label_pc_11a6c, label %dec_label_pc_11a50

dec_label_pc_11a50:                               ; preds = %dec_label_pc_11a48, %dec_label_pc_11a20
  %v0_11a5817 = phi i32 [ %v1_11a38, %dec_label_pc_11a48 ], [ %v6_11a24, %dec_label_pc_11a20 ]
  store i32 %v2_11a24, i32* %r0.global-to-local, align 4
  %v0_11a54 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a54, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_11a58

dec_label_pc_11a58:                               ; preds = %dec_label_pc_11a58.dec_label_pc_11a58_crit_edge, %dec_label_pc_11a50
  %v2_11a64 = phi i32 [ %v5_11a64, %dec_label_pc_11a58.dec_label_pc_11a58_crit_edge ], [ %v0_11a54, %dec_label_pc_11a50 ]
  %v0_11a5c = phi i32 [ %v0_11a5c.pre, %dec_label_pc_11a58.dec_label_pc_11a58_crit_edge ], [ %v2_11a24, %dec_label_pc_11a50 ]
  %v0_11a58 = phi i32 [ %v0_11a58.pre, %dec_label_pc_11a58.dec_label_pc_11a58_crit_edge ], [ %v0_11a5817, %dec_label_pc_11a50 ]
  %v1_11a58 = add i32 %v0_11a58, -1
  store i32 %v1_11a58, i32* @r2, align 4
  %v1_11a5c = inttoptr i32 %v0_11a5c to i8*
  %v2_11a5c = load i8, i8* %v1_11a5c, align 1
  %v5_11a5c = add i32 %v0_11a5c, 1
  store i32 %v5_11a5c, i32* %r0.global-to-local, align 4
  %v3_11a60 = icmp eq i32 %v0_11a58, 0
  store i1 %v3_11a60, i1* %cpsr_z.global-to-local, align 1
  %v3_11a64 = inttoptr i32 %v2_11a64 to i8*
  store i8 %v2_11a5c, i8* %v3_11a64, align 1
  %v4_11a64 = load i32, i32* %r1.global-to-local, align 4
  %v5_11a64 = add i32 %v4_11a64, 1
  store i32 %v5_11a64, i32* %r1.global-to-local, align 4
  br i1 %v3_11a60, label %dec_label_pc_11a6c, label %dec_label_pc_11a58.dec_label_pc_11a58_crit_edge

dec_label_pc_11a58.dec_label_pc_11a58_crit_edge:  ; preds = %dec_label_pc_11a58
  %v0_11a58.pre = load i32, i32* @r2, align 4
  %v0_11a5c.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_11a58

dec_label_pc_11a6c:                               ; preds = %dec_label_pc_11a58, %dec_label_pc_11a48, %.thread1, %dec_label_pc_11978
  %v0_11a6c = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_11a6c, i32* %r0.global-to-local, align 4
  %v2_11a74 = load i32, i32* %stack_var_-28, align 4
  store i32 %v2_11a74, i32* @r4, align 4
  ret i32 %v0_11a6c

dec_label_pc_11a78:                               ; preds = %dec_label_pc_119c8
  store i32 32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a7c

dec_label_pc_11a7c:                               ; preds = %dec_label_pc_11a14, %dec_label_pc_11a78
  %v1_11a80 = phi i32 [ %v1_11a0c, %dec_label_pc_11a14 ], [ 32, %dec_label_pc_11a78 ]
  %v2_11a80 = add i32 %v1_11a80, %v22_11978
  %v3_11a88 = add i32 %v2_11a80, -34
  %v4_11a88 = inttoptr i32 %v3_11a88 to i8*
  store i8 45, i8* %v4_11a88, align 1
  %v1_11a24.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_11a20

; uselistorder directives
  uselistorder i32 %v5_11a64, { 1, 0 }
  uselistorder i1 %v3_11a60, { 1, 0 }
  uselistorder i32 %v0_11a5c, { 1, 0 }
  uselistorder i1 %v7_11a48, { 1, 0 }
  uselistorder i32 %v1_11a38, { 0, 1, 3, 2 }
  uselistorder i32 %v2_11a24, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11a04, { 1, 2, 3, 0 }
  uselistorder i32 %v3_119e8, { 1, 0, 2, 3, 4 }
  uselistorder i1 %phitmp, { 1, 0 }
  uselistorder i1 %v3_1198c, { 1, 0, 2, 3 }
  uselistorder i32 %v0_1197c, { 0, 2, 1 }
  uselistorder i32* %stack_var_-28, { 0, 2, 1 }
  uselistorder i32* %r6.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 0, 2, 1, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 4, 5, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 4, 5, 7, 6, 0 }
  uselistorder i1* %cpsr_z.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 14, 9, 10, 11, 12, 13 }
  uselistorder i32 %arg2, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11a7c, { 1, 0 }
  uselistorder label %dec_label_pc_11a20, { 1, 0 }
  uselistorder label %bb37, { 1, 0 }
  uselistorder label %dec_label_pc_119a0, { 2, 1, 0 }
}

define i32 @function_11a90() local_unnamed_addr {
dec_label_pc_11a90:
  %v0_11a90 = load i32, i32* @r1, align 4
  %v1_11a90 = add i32 %v0_11a90, -1
  %v7_11a90 = icmp eq i32 %v0_11a90, 1
  br i1 %v7_11a90, label %bb, label %bb82

bb:                                               ; preds = %dec_label_pc_11a90
  %v2_11a94 = load i32, i32* @r0, align 4
  ret i32 %v2_11a94

bb82:                                             ; preds = %dec_label_pc_11a90
  %v2_11a90 = icmp eq i32 %v0_11a90, 0
  br i1 %v2_11a90, label %dec_label_pc_11b78, label %dec_label_pc_11a9c

dec_label_pc_11a9c:                               ; preds = %bb82
  %v0_11a9c = load i32, i32* @r0, align 4
  %tmp = icmp ugt i32 %v0_11a9c, %v0_11a90
  br i1 %tmp, label %dec_label_pc_11aa4, label %dec_label_pc_11b30

dec_label_pc_11aa4:                               ; preds = %dec_label_pc_11a9c
  %v2_11aa4 = and i32 %v1_11a90, %v0_11a90
  %v4_11aa4 = icmp eq i32 %v2_11aa4, 0
  br i1 %v4_11aa4, label %dec_label_pc_11b3c, label %dec_label_pc_11aac

dec_label_pc_11aac:                               ; preds = %dec_label_pc_11aa4
  %v3_11aac = icmp ult i32 %v0_11a90, 536870912
  br i1 %v3_11aac, label %.thread, label %.preheader.preheader

.thread:                                          ; preds = %dec_label_pc_11aac
  %v4_11ab0 = mul i32 %v0_11a90, 8
  br label %.preheader.preheader

.preheader.preheader:                             ; preds = %dec_label_pc_11aac, %.thread
  %v0_11ad0.pr36.ph = phi i32 [ %v4_11ab0, %.thread ], [ %v0_11a90, %dec_label_pc_11aac ]
  %storemerge137 = phi i32 [ 8, %.thread ], [ 1, %dec_label_pc_11aac ]
  br label %.preheader

.preheader:                                       ; preds = %.preheader.preheader, %bb85
  %v0_11ad0.pr36 = phi i32 [ %v4_11ac4, %bb85 ], [ %v0_11ad0.pr36.ph, %.preheader.preheader ]
  %v1_11ac8 = phi i32 [ %v4_11ac8, %bb85 ], [ %storemerge137, %.preheader.preheader ]
  %v2_11abc = icmp ugt i32 %v0_11ad0.pr36, 268435455
  br i1 %v2_11abc, label %.thread2, label %bb83

.thread2:                                         ; preds = %.preheader
  br label %dec_label_pc_11ad0thread-pre-split.loopexit

bb83:                                             ; preds = %.preheader
  %v4_11ac0 = icmp ult i32 %v0_11ad0.pr36, %v0_11a9c
  br i1 %v4_11ac0, label %bb84, label %dec_label_pc_11ad0thread-pre-split.loopexit.loopexit

bb84:                                             ; preds = %bb83
  %v2_11ac4 = and i32 %v0_11ad0.pr36, 268435456
  %v3_11ac4 = icmp eq i32 %v2_11ac4, 0
  %v4_11ac4 = mul i32 %v0_11ad0.pr36, 16
  br i1 %v3_11ac4, label %bb85, label %dec_label_pc_11ad0.loopexit

bb85:                                             ; preds = %bb84
  %v2_11ac8 = and i32 %v1_11ac8, 268435456
  %v3_11ac8 = icmp eq i32 %v2_11ac8, 0
  %v4_11ac8 = mul i32 %v1_11ac8, 16
  br i1 %v3_11ac8, label %.preheader, label %dec_label_pc_11ad0thread-pre-split.loopexit.loopexit

dec_label_pc_11ad0thread-pre-split.loopexit.loopexit: ; preds = %bb85, %bb83
  %v1_11adc48.ph = phi i32 [ %v1_11ac8, %bb83 ], [ %v4_11ac8, %bb85 ]
  %v0_11ad0.pr38.ph = phi i32 [ %v0_11ad0.pr36, %bb83 ], [ %v4_11ac4, %bb85 ]
  br label %dec_label_pc_11ad0thread-pre-split.loopexit

dec_label_pc_11ad0thread-pre-split.loopexit:      ; preds = %dec_label_pc_11ad0thread-pre-split.loopexit.loopexit, %.thread2
  %v1_11adc48 = phi i32 [ %v1_11ac8, %.thread2 ], [ %v1_11adc48.ph, %dec_label_pc_11ad0thread-pre-split.loopexit.loopexit ]
  %v0_11ad0.pr38 = phi i32 [ %v0_11ad0.pr36, %.thread2 ], [ %v0_11ad0.pr38.ph, %dec_label_pc_11ad0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11ad0thread-pre-split

dec_label_pc_11ad0thread-pre-split:               ; preds = %dec_label_pc_11ad0thread-pre-split.loopexit, %bb87
  %v1_11adc46 = phi i32 [ %v1_11adc48, %dec_label_pc_11ad0thread-pre-split.loopexit ], [ %v3_11adc, %bb87 ]
  %v0_11ad0.pr = phi i32 [ %v0_11ad0.pr38, %dec_label_pc_11ad0thread-pre-split.loopexit ], [ %v3_11ad8, %bb87 ]
  br label %dec_label_pc_11ad0

dec_label_pc_11ad0.loopexit:                      ; preds = %bb84
  br label %dec_label_pc_11ad0

dec_label_pc_11ad0:                               ; preds = %dec_label_pc_11ad0.loopexit, %dec_label_pc_11ad0thread-pre-split
  %v1_11adc = phi i32 [ %v1_11adc46, %dec_label_pc_11ad0thread-pre-split ], [ %v1_11ac8, %dec_label_pc_11ad0.loopexit ]
  %v1_11ad8 = phi i32 [ %v0_11ad0.pr, %dec_label_pc_11ad0thread-pre-split ], [ %v4_11ac4, %dec_label_pc_11ad0.loopexit ]
  %v2_11ad0 = icmp slt i32 %v1_11ad8, 0
  br i1 %v2_11ad0, label %dec_label_pc_11ae4, label %bb86

bb86:                                             ; preds = %dec_label_pc_11ad0
  %v4_11ad4 = icmp ult i32 %v1_11ad8, %v0_11a9c
  br i1 %v4_11ad4, label %bb87, label %dec_label_pc_11ae4

bb87:                                             ; preds = %bb86
  %v3_11ad8 = mul i32 %v1_11ad8, 2
  %v2_11adc = icmp slt i32 %v1_11adc, 0
  %v3_11adc = mul i32 %v1_11adc, 2
  br i1 %v2_11adc, label %dec_label_pc_11ae4, label %dec_label_pc_11ad0thread-pre-split

dec_label_pc_11ae4:                               ; preds = %bb86, %dec_label_pc_11ad0, %bb87
  %v2_11af059 = phi i32 [ %v3_11adc, %bb87 ], [ %v1_11adc, %bb86 ], [ %v1_11adc, %dec_label_pc_11ad0 ]
  %v1_11ae851 = phi i32 [ %v3_11ad8, %bb87 ], [ %v1_11ad8, %bb86 ], [ %v1_11ad8, %dec_label_pc_11ad0 ]
  br label %dec_label_pc_11ae8

dec_label_pc_11ae8:                               ; preds = %.thread11, %dec_label_pc_11ae4
  %v1_11b1c = phi i32 [ %v4_11b1c, %.thread11 ], [ %v2_11af059, %dec_label_pc_11ae4 ]
  %v1_11af0 = phi i32 [ %v0_11b28, %.thread11 ], [ 0, %dec_label_pc_11ae4 ]
  %v1_11b20 = phi i32 [ %v4_11b20, %.thread11 ], [ %v1_11ae851, %dec_label_pc_11ae4 ]
  %v1_11aec = phi i32 [ %v0_11b18, %.thread11 ], [ %v0_11a9c, %dec_label_pc_11ae4 ]
  %v3_11ae8 = icmp ult i32 %v1_11aec, %v1_11b20
  br i1 %v3_11ae8, label %.thread7, label %bb88

bb88:                                             ; preds = %dec_label_pc_11ae8
  %v3_11aec = sub i32 %v1_11aec, %v1_11b20
  %v3_11af0 = or i32 %v1_11af0, %v1_11b1c
  br label %.thread7

.thread7:                                         ; preds = %dec_label_pc_11ae8, %bb88
  %v1_11af8 = phi i32 [ %v1_11aec, %dec_label_pc_11ae8 ], [ %v3_11aec, %bb88 ]
  %v1_11afc = phi i32 [ %v1_11af0, %dec_label_pc_11ae8 ], [ %v3_11af0, %bb88 ]
  %v4_11af4 = udiv i32 %v1_11b20, 2
  %v6_11af4 = icmp ult i32 %v1_11af8, %v4_11af4
  br i1 %v6_11af4, label %.thread8, label %bb89

bb89:                                             ; preds = %.thread7
  %v3_11af8 = urem i32 %v1_11b20, 2
  %v4_11af8 = icmp eq i32 %v3_11af8, 0
  %v6_11af8 = sub i32 %v1_11af8, %v4_11af4
  br i1 %v4_11af8, label %.thread8, label %bb90

bb90:                                             ; preds = %bb89
  %v5_11afc = udiv i32 %v1_11b1c, 2
  %v6_11afc = or i32 %v1_11afc, %v5_11afc
  br label %.thread8

.thread8:                                         ; preds = %bb89, %.thread7, %bb90
  %v1_11b04 = phi i32 [ %v6_11af8, %bb89 ], [ %v1_11af8, %.thread7 ], [ %v6_11af8, %bb90 ]
  %v1_11b08 = phi i32 [ %v1_11afc, %bb89 ], [ %v1_11afc, %.thread7 ], [ %v6_11afc, %bb90 ]
  %v4_11b00 = udiv i32 %v1_11b20, 4
  %v6_11b00 = icmp ult i32 %v1_11b04, %v4_11b00
  br i1 %v6_11b00, label %.thread9, label %bb91

bb91:                                             ; preds = %.thread8
  %v3_11b04 = and i32 %v1_11b20, 2
  %v4_11b04 = icmp eq i32 %v3_11b04, 0
  %v6_11b04 = sub i32 %v1_11b04, %v4_11b00
  br i1 %v4_11b04, label %.thread9, label %bb92

bb92:                                             ; preds = %bb91
  %v5_11b08 = udiv i32 %v1_11b1c, 4
  %v6_11b08 = or i32 %v1_11b08, %v5_11b08
  br label %.thread9

.thread9:                                         ; preds = %bb91, %.thread8, %bb92
  %v1_11b10 = phi i32 [ %v6_11b04, %bb91 ], [ %v1_11b04, %.thread8 ], [ %v6_11b04, %bb92 ]
  %v1_11b14 = phi i32 [ %v1_11b08, %bb91 ], [ %v1_11b08, %.thread8 ], [ %v6_11b08, %bb92 ]
  %v4_11b0c = udiv i32 %v1_11b20, 8
  %v6_11b0c = icmp ult i32 %v1_11b10, %v4_11b0c
  br i1 %v6_11b0c, label %thread-pre-split, label %bb93

bb93:                                             ; preds = %.thread9
  %v3_11b10 = and i32 %v1_11b20, 4
  %v4_11b10 = icmp eq i32 %v3_11b10, 0
  %v6_11b10 = sub i32 %v1_11b10, %v4_11b0c
  br i1 %v4_11b10, label %thread-pre-split, label %bb94

bb94:                                             ; preds = %bb93
  %v5_11b14 = udiv i32 %v1_11b1c, 8
  %v6_11b14 = or i32 %v1_11b14, %v5_11b14
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb94, %.thread9, %bb93
  %v0_11b28 = phi i32 [ %v1_11b14, %bb93 ], [ %v1_11b14, %.thread9 ], [ %v6_11b14, %bb94 ]
  %v0_11b18 = phi i32 [ %v6_11b10, %bb93 ], [ %v1_11b10, %.thread9 ], [ %v6_11b10, %bb94 ]
  %v2_11b18 = icmp eq i32 %v0_11b18, 0
  br i1 %v2_11b18, label %dec_label_pc_11b28, label %bb95

bb95:                                             ; preds = %thread-pre-split
  %tmp142 = icmp ult i32 %v1_11b1c, 16
  br i1 %tmp142, label %dec_label_pc_11b28, label %.thread11

.thread11:                                        ; preds = %bb95
  %v4_11b1c = udiv i32 %v1_11b1c, 16
  %v4_11b20 = udiv i32 %v1_11b20, 16
  br label %dec_label_pc_11ae8

dec_label_pc_11b28:                               ; preds = %thread-pre-split, %bb95
  ret i32 %v0_11b28

dec_label_pc_11b30:                               ; preds = %dec_label_pc_11a9c
  %v9_11a9c = icmp eq i32 %v0_11a9c, %v0_11a90
  %. = zext i1 %v9_11a9c to i32
  ret i32 %.

dec_label_pc_11b3c:                               ; preds = %dec_label_pc_11aa4
  %v2_11b3c = icmp ugt i32 %v0_11a90, 65535
  br i1 %v2_11b3c, label %bb99, label %.thread16

bb99:                                             ; preds = %dec_label_pc_11b3c
  %v2_11b40 = and i32 %v0_11a90, 32768
  %v3_11b40 = icmp eq i32 %v2_11b40, 0
  %v4_11b40 = udiv i32 %v0_11a90, 65536
  br i1 %v3_11b40, label %.thread16, label %bb100

.thread16:                                        ; preds = %bb99, %dec_label_pc_11b3c
  %v0_11b4c65 = phi i32 [ %v0_11a90, %dec_label_pc_11b3c ], [ %v4_11b40, %bb99 ]
  br label %bb100

bb100:                                            ; preds = %bb99, %.thread16
  %v1_11b50 = phi i32 [ %v0_11b4c65, %.thread16 ], [ %v4_11b40, %bb99 ]
  %storemerge = phi i32 [ 0, %.thread16 ], [ 16, %bb99 ]
  %v2_11b4c = icmp ugt i32 %v1_11b50, 255
  br i1 %v2_11b4c, label %bb101, label %.thread17

bb101:                                            ; preds = %bb100
  %v2_11b50 = and i32 %v1_11b50, 128
  %v3_11b50 = icmp eq i32 %v2_11b50, 0
  %v4_11b50 = udiv i32 %v1_11b50, 256
  br i1 %v3_11b50, label %.thread17, label %bb102

bb102:                                            ; preds = %bb101
  %v2_11b54 = or i32 %storemerge, 8
  br label %.thread17

.thread17:                                        ; preds = %bb101, %bb100, %bb102
  %v1_11b60 = phi i32 [ %storemerge, %bb100 ], [ %storemerge, %bb101 ], [ %v2_11b54, %bb102 ]
  %v1_11b5c = phi i32 [ %v1_11b50, %bb100 ], [ %v4_11b50, %bb101 ], [ %v4_11b50, %bb102 ]
  %v2_11b58 = icmp ugt i32 %v1_11b5c, 15
  br i1 %v2_11b58, label %bb103, label %.thread18

bb103:                                            ; preds = %.thread17
  %v2_11b5c = and i32 %v1_11b5c, 8
  %v3_11b5c = icmp eq i32 %v2_11b5c, 0
  %v4_11b5c = udiv i32 %v1_11b5c, 16
  br i1 %v3_11b5c, label %.thread18, label %bb104

bb104:                                            ; preds = %bb103
  %v2_11b60 = add nsw i32 %v1_11b60, 4
  br label %.thread18

.thread18:                                        ; preds = %bb103, %.thread17, %bb104
  %v4_11b68 = phi i32 [ %v1_11b60, %.thread17 ], [ %v1_11b60, %bb103 ], [ %v2_11b60, %bb104 ]
  %v5_11b6c = phi i32 [ %v1_11b5c, %.thread17 ], [ %v4_11b5c, %bb103 ], [ %v4_11b5c, %bb104 ]
  %v2_11b64 = icmp ugt i32 %v5_11b6c, 3
  %v7_11b64 = icmp eq i32 %v5_11b6c, 4
  %v2_11b68 = xor i1 %v7_11b64, true
  %v3_11b68 = and i1 %v2_11b64, %v2_11b68
  br i1 %v3_11b68, label %bb105, label %bb106

bb105:                                            ; preds = %.thread18
  %v5_11b68 = add nsw i32 %v4_11b68, 3
  br label %bb106

bb106:                                            ; preds = %.thread18, %bb105
  %v4_11b6c = phi i32 [ %v4_11b68, %.thread18 ], [ %v5_11b68, %bb105 ]
  %v2_11b6c = xor i1 %v2_11b64, true
  %v3_11b6c = or i1 %v7_11b64, %v2_11b6c
  br i1 %v3_11b6c, label %bb107, label %bb108

bb107:                                            ; preds = %bb106
  %v8_11b6c = udiv i32 %v5_11b6c, 2
  %v9_11b6c = add i32 %v4_11b6c, %v8_11b6c
  br label %bb108

bb108:                                            ; preds = %bb106, %bb107
  %v1_11b70 = phi i32 [ %v4_11b6c, %bb106 ], [ %v9_11b6c, %bb107 ]
  %v6_11b70 = lshr i32 %v0_11a9c, %v1_11b70
  ret i32 %v6_11b70

dec_label_pc_11b78:                               ; preds = %bb82
  %v0_11b78 = load i32, i32* @lr, align 4
  %v0_11b7c = call i32 @function_11d50()
  store i32 0, i32* @r0, align 4
  call void @__pseudo_branch(i32 %v0_11b78)
  %v9_11b88 = load i32, i32* @lr, align 4
  %v0_11b8c = call i32 @function_11a90()
  store i32 %v9_11b88, i32* @lr, align 4
  ret i32 %v0_11b8c

; uselistorder directives
  uselistorder i32 %v4_11b6c, { 1, 0 }
  uselistorder i1 %v7_11b64, { 1, 0 }
  uselistorder i32 %v4_11b5c, { 1, 0 }
  uselistorder i32 %v1_11b5c, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b50, { 1, 0 }
  uselistorder i32 %storemerge, { 1, 0, 2 }
  uselistorder i32 %v1_11b50, { 1, 0, 2, 3 }
  uselistorder i32 %v4_11b40, { 1, 0 }
  uselistorder i32 %v0_11b18, { 1, 0 }
  uselistorder i32 %v4_11b0c, { 1, 0 }
  uselistorder i32 %v1_11b14, { 1, 2, 0 }
  uselistorder i32 %v4_11b00, { 1, 0 }
  uselistorder i32 %v1_11b08, { 1, 2, 0 }
  uselistorder i32 %v4_11af4, { 1, 0 }
  uselistorder i32 %v1_11afc, { 1, 2, 0 }
  uselistorder i32 %v1_11b20, { 0, 5, 1, 6, 2, 3, 4, 7, 8 }
  uselistorder i32 %v1_11af0, { 1, 0 }
  uselistorder i32 %v1_11b1c, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 %v3_11adc, { 1, 0 }
  uselistorder i32 %v3_11ad8, { 1, 0 }
  uselistorder i32 %v1_11ad8, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v1_11adc, { 1, 2, 0, 3 }
  uselistorder i32 %v4_11ac8, { 1, 0 }
  uselistorder i32 %v4_11ac4, { 2, 1, 0 }
  uselistorder i32 %v1_11ac8, { 2, 1, 3, 0, 4 }
  uselistorder i32 %v0_11ad0.pr36, { 1, 2, 0, 5, 4, 3 }
  uselistorder i32 %v0_11a9c, { 2, 5, 3, 1, 4, 0 }
  uselistorder i32 %v0_11a90, { 6, 2, 7, 8, 9, 4, 3, 0, 5, 1, 10, 12, 11 }
  uselistorder i32 65535, { 102, 53, 54, 0, 1, 12, 55, 27, 56, 26, 57, 25, 58, 13, 14, 2, 29, 59, 28, 60, 61, 15, 62, 3, 30, 63, 31, 64, 32, 65, 66, 4, 33, 67, 68, 16, 69, 24, 37, 70, 34, 71, 35, 72, 36, 73, 74, 17, 75, 5, 76, 77, 41, 78, 40, 79, 38, 80, 39, 81, 18, 19, 6, 82, 42, 83, 43, 84, 20, 21, 7, 85, 44, 86, 45, 87, 88, 8, 46, 89, 90, 91, 22, 92, 93, 9, 49, 94, 47, 95, 48, 96, 97, 23, 98, 10, 11, 52, 99, 50, 100, 51, 101 }
  uselistorder label %bb108, { 1, 0 }
  uselistorder label %bb106, { 1, 0 }
  uselistorder label %.thread18, { 2, 0, 1 }
  uselistorder label %.thread17, { 2, 0, 1 }
  uselistorder label %bb100, { 1, 0 }
  uselistorder label %dec_label_pc_11b28, { 1, 0 }
  uselistorder label %thread-pre-split, { 0, 2, 1 }
  uselistorder label %.thread9, { 2, 0, 1 }
  uselistorder label %.thread8, { 2, 0, 1 }
  uselistorder label %.thread7, { 1, 0 }
  uselistorder label %dec_label_pc_11ae4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_11ad0thread-pre-split, { 1, 0 }
  uselistorder label %.preheader, { 1, 0 }
  uselistorder label %.preheader.preheader, { 1, 0 }
}

define i32 @function_11ba0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11ba0:
  store i32 %arg1, i32* @r0, align 4
  %v1_11ba0 = add i32 %arg2, -1
  %v2_11ba0 = icmp eq i32 %arg2, 0
  br i1 %v2_11ba0, label %dec_label_pc_11c5c, label %dec_label_pc_11ba8

dec_label_pc_11ba8:                               ; preds = %dec_label_pc_11ba0
  %v7_11ba0 = icmp eq i32 %arg2, 1
  br i1 %v7_11ba0, label %.thread65, label %bb

bb:                                               ; preds = %dec_label_pc_11ba8
  %v1_11ba8 = load i32, i32* @r0, align 4
  %v10_11ba8 = icmp eq i32 %v1_11ba8, %arg2
  br i1 %v10_11ba8, label %.thread65, label %bb74

.thread65:                                        ; preds = %dec_label_pc_11ba8, %bb
  br label %.thread67

bb74:                                             ; preds = %bb
  %v4_11ba8 = icmp ult i32 %v1_11ba8, %arg2
  br i1 %v4_11ba8, label %bb76, label %bb75

bb75:                                             ; preds = %bb74
  %v6_11bb0 = and i32 %v1_11ba0, %arg2
  %v8_11bb0 = icmp eq i32 %v6_11bb0, 0
  br i1 %v8_11bb0, label %.thread67, label %dec_label_pc_11bc0.preheader

.thread67:                                        ; preds = %bb75, %.thread65
  %v1_11bb4 = phi i32 [ %v1_11ba8, %bb75 ], [ 0, %.thread65 ]
  %v3_11bb4 = and i32 %v1_11bb4, %v1_11ba0
  br label %bb76

dec_label_pc_11bc0.preheader:                     ; preds = %bb75
  %v2_11bc099 = icmp ugt i32 %arg2, 268435455
  br i1 %v2_11bc099, label %.thread, label %bb77

bb76:                                             ; preds = %dec_label_pc_11c50, %bb74, %bb89, %bb84, %dec_label_pc_11c20, %.thread67
  %v5_11bb8 = phi i32 [ %v1_11ba8, %bb74 ], [ %v3_11bb4, %.thread67 ], [ %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, %dec_label_pc_11c20 ], [ 0, %bb84 ], [ %v1_11c54, %dec_label_pc_11c50 ], [ %v2_11c50, %bb89 ]
  ret i32 %v5_11bb8

.thread:                                          ; preds = %.thread1.thread9, %dec_label_pc_11bc0.preheader
  %v0_11bd4.pr33.lcssa = phi i32 [ %arg2, %dec_label_pc_11bc0.preheader ], [ %v4_11bc8, %.thread1.thread9 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11bc0.preheader ], [ %v2_11bcc11, %.thread1.thread9 ]
  br label %dec_label_pc_11bd4thread-pre-split.loopexit

bb77:                                             ; preds = %dec_label_pc_11bc0.preheader, %.thread1.thread9
  %storemerge101 = phi i32 [ %v2_11bcc11, %.thread1.thread9 ], [ 0, %dec_label_pc_11bc0.preheader ]
  %v0_11bd4.pr33100 = phi i32 [ %v4_11bc8, %.thread1.thread9 ], [ %arg2, %dec_label_pc_11bc0.preheader ]
  %v4_11bc4 = icmp ult i32 %v0_11bd4.pr33100, %v1_11ba8
  br i1 %v4_11bc4, label %bb78, label %dec_label_pc_11bd4thread-pre-split.loopexit.loopexit

bb78:                                             ; preds = %bb77
  %v2_11bc8 = and i32 %v0_11bd4.pr33100, 268435456
  %v3_11bc8 = icmp eq i32 %v2_11bc8, 0
  %v4_11bc8 = mul i32 %v0_11bd4.pr33100, 16
  br i1 %v3_11bc8, label %.thread1.thread9, label %dec_label_pc_11bd4.loopexit

.thread1.thread9:                                 ; preds = %bb78
  %v2_11bcc11 = add i32 %storemerge101, 4
  %v2_11bc0 = icmp ugt i32 %v4_11bc8, 268435455
  br i1 %v2_11bc0, label %.thread, label %bb77

dec_label_pc_11bd4thread-pre-split.loopexit.loopexit: ; preds = %bb77
  br label %dec_label_pc_11bd4thread-pre-split.loopexit

dec_label_pc_11bd4thread-pre-split.loopexit:      ; preds = %dec_label_pc_11bd4thread-pre-split.loopexit.loopexit, %.thread
  %v0_11bd4.pr3398 = phi i32 [ %v0_11bd4.pr33.lcssa, %.thread ], [ %v0_11bd4.pr33100, %dec_label_pc_11bd4thread-pre-split.loopexit.loopexit ]
  %storemerge95 = phi i32 [ %storemerge.lcssa, %.thread ], [ %storemerge101, %dec_label_pc_11bd4thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11bd4thread-pre-split

dec_label_pc_11bd4thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11bd4thread-pre-split.loopexit
  %v1_11be039 = phi i32 [ %storemerge95, %dec_label_pc_11bd4thread-pre-split.loopexit ], [ %v2_11be0, %.thread4 ]
  %v0_11bd4.pr = phi i32 [ %v0_11bd4.pr3398, %dec_label_pc_11bd4thread-pre-split.loopexit ], [ %v3_11bdc, %.thread4 ]
  br label %dec_label_pc_11bd4

dec_label_pc_11bd4.loopexit:                      ; preds = %bb78
  br label %dec_label_pc_11bd4

dec_label_pc_11bd4:                               ; preds = %dec_label_pc_11bd4.loopexit, %dec_label_pc_11bd4thread-pre-split
  %v0_11be8.pr = phi i32 [ %v1_11be039, %dec_label_pc_11bd4thread-pre-split ], [ %storemerge101, %dec_label_pc_11bd4.loopexit ]
  %v1_11bdc = phi i32 [ %v0_11bd4.pr, %dec_label_pc_11bd4thread-pre-split ], [ %v4_11bc8, %dec_label_pc_11bd4.loopexit ]
  %v2_11bd4 = icmp slt i32 %v1_11bdc, 0
  br i1 %v2_11bd4, label %dec_label_pc_11be8, label %bb79

bb79:                                             ; preds = %dec_label_pc_11bd4
  %v4_11bd8 = icmp ult i32 %v1_11bdc, %v1_11ba8
  br i1 %v4_11bd8, label %.thread4, label %dec_label_pc_11be8

.thread4:                                         ; preds = %bb79
  %v3_11bdc = mul i32 %v1_11bdc, 2
  %v2_11be0 = add i32 %v0_11be8.pr, 1
  br label %dec_label_pc_11bd4thread-pre-split

dec_label_pc_11be8:                               ; preds = %bb79, %dec_label_pc_11bd4
  %v2_11be8 = add i32 %v0_11be8.pr, -3
  %v5_11bec = icmp slt i32 %v0_11be8.pr, 3
  br i1 %v5_11bec, label %dec_label_pc_11c2c, label %dec_label_pc_11bf0

dec_label_pc_11bf0:                               ; preds = %dec_label_pc_11be8, %bb83
  %v6_11c18 = phi i32 [ %v0_11c20, %bb83 ], [ %v2_11be8, %dec_label_pc_11be8 ]
  %v1_11bf4 = phi i32 [ %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, %bb83 ], [ %v1_11ba8, %dec_label_pc_11be8 ]
  %v3_11c1412 = phi i32 [ %v3_11c14, %bb83 ], [ %v1_11bdc, %dec_label_pc_11be8 ]
  %v3_11bf0 = icmp ult i32 %v1_11bf4, %v3_11c1412
  %v3_11bf4 = select i1 %v3_11bf0, i32 0, i32 %v3_11c1412
  %v1_11bfc = sub i32 %v1_11bf4, %v3_11bf4
  %v4_11bf8 = udiv i32 %v3_11c1412, 2
  %v6_11bf8 = icmp ult i32 %v1_11bfc, %v4_11bf8
  %v6_11bfc = select i1 %v6_11bf8, i32 0, i32 %v4_11bf8
  %v1_11bfc.v6_11bfc = sub i32 %v1_11bfc, %v6_11bfc
  %.demorgan = and i1 %v3_11bf0, %v6_11bf8
  %v4_11c00 = udiv i32 %v3_11c1412, 4
  %v6_11c00 = icmp ult i32 %v1_11bfc.v6_11bfc, %v4_11c00
  %v6_11c04 = select i1 %v6_11c00, i32 0, i32 %v4_11c00
  %v1_11bfc.v6_11bfc.v6_11c04 = sub i32 %v1_11bfc.v6_11bfc, %v6_11c04
  %.demorgan71 = and i1 %.demorgan, %v6_11c00
  %v4_11c08 = udiv i32 %v3_11c1412, 8
  %v6_11c08 = icmp ult i32 %v1_11bfc.v6_11bfc.v6_11c04, %v4_11c08
  %v6_11c0c = select i1 %v6_11c08, i32 0, i32 %v4_11c08
  %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c = sub i32 %v1_11bfc.v6_11bfc.v6_11c04, %v6_11c0c
  %.demorgan72 = and i1 %.demorgan71, %v6_11c08
  br i1 %.demorgan72, label %bb81, label %bb80

bb80:                                             ; preds = %dec_label_pc_11bf0
  br label %bb81

bb81:                                             ; preds = %dec_label_pc_11bf0, %bb80
  %v2_11c10 = add i32 %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, -1
  %v4_11c10 = sub i32 0, %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c
  %v5_11c10 = and i32 %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, %v4_11c10
  %v3_11c14 = udiv i32 %v3_11c1412, 16
  %v5_11c18 = icmp slt i32 %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, 1
  br i1 %v5_11c18, label %bb83, label %bb82

bb82:                                             ; preds = %bb81
  %v7_11c18 = add i32 %v6_11c18, -4
  %v9_11c18 = sub i32 3, %v6_11c18
  %v10_11c18 = and i32 %v9_11c18, %v6_11c18
  br label %bb83

bb83:                                             ; preds = %bb81, %bb82
  %v0_11c20 = phi i32 [ %v6_11c18, %bb81 ], [ %v7_11c18, %bb82 ]
  %v0_11c1c15.in = phi i32 [ %v2_11c10, %bb81 ], [ %v7_11c18, %bb82 ]
  %v1_11c1c14.in = phi i32 [ %v5_11c10, %bb81 ], [ %v10_11c18, %bb82 ]
  %v1_11c1c14 = icmp slt i32 %v1_11c1c14.in, 0
  %v0_11c1c15 = icmp slt i32 %v0_11c1c15.in, 0
  %v2_11c1c = xor i1 %v0_11c1c15, %v1_11c1c14
  br i1 %v2_11c1c, label %dec_label_pc_11c20, label %dec_label_pc_11bf0

dec_label_pc_11c20:                               ; preds = %bb83
  %v1_11c20 = urem i32 %v0_11c20, 4
  %v2_11c20 = icmp eq i32 %v1_11c20, 0
  br i1 %v2_11c20, label %bb76, label %bb84

bb84:                                             ; preds = %dec_label_pc_11c20
  %v3_11c24 = icmp eq i32 %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, 0
  br i1 %v3_11c24, label %bb76, label %dec_label_pc_11c2c

dec_label_pc_11c2c:                               ; preds = %bb84, %dec_label_pc_11be8
  %v0_11c40 = phi i32 [ %v3_11c14, %bb84 ], [ %v1_11bdc, %dec_label_pc_11be8 ]
  %v1_11c3c = phi i32 [ %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, %bb84 ], [ %v1_11ba8, %dec_label_pc_11be8 ]
  %v0_11c2c = phi i32 [ %v0_11c20, %bb84 ], [ %v2_11be8, %dec_label_pc_11be8 ]
  %v5_11c30 = icmp slt i32 %v0_11c2c, -2
  br i1 %v5_11c30, label %dec_label_pc_11c50, label %dec_label_pc_11c34

dec_label_pc_11c34:                               ; preds = %dec_label_pc_11c2c
  %v8_11c2c = icmp eq i32 %v0_11c2c, -2
  br i1 %v8_11c2c, label %dec_label_pc_11c44, label %dec_label_pc_11c38

dec_label_pc_11c38:                               ; preds = %dec_label_pc_11c34
  %v3_11c38 = icmp ult i32 %v1_11c3c, %v0_11c40
  br i1 %v3_11c38, label %bb86, label %bb85

bb85:                                             ; preds = %dec_label_pc_11c38
  %v2_11c38 = sub i32 %v1_11c3c, %v0_11c40
  br label %bb86

bb86:                                             ; preds = %dec_label_pc_11c38, %bb85
  %v0_11c4452 = phi i32 [ %v1_11c3c, %dec_label_pc_11c38 ], [ %v2_11c38, %bb85 ]
  %v3_11c40 = udiv i32 %v0_11c40, 2
  br label %dec_label_pc_11c44

dec_label_pc_11c44:                               ; preds = %dec_label_pc_11c34, %bb86
  %v0_11c4c = phi i32 [ %v0_11c40, %dec_label_pc_11c34 ], [ %v3_11c40, %bb86 ]
  %v1_11c48 = phi i32 [ %v1_11c3c, %dec_label_pc_11c34 ], [ %v0_11c4452, %bb86 ]
  %v3_11c44 = icmp ult i32 %v1_11c48, %v0_11c4c
  br i1 %v3_11c44, label %bb88, label %bb87

bb87:                                             ; preds = %dec_label_pc_11c44
  %v2_11c44 = sub i32 %v1_11c48, %v0_11c4c
  br label %bb88

bb88:                                             ; preds = %dec_label_pc_11c44, %bb87
  %v0_11c5055 = phi i32 [ %v1_11c48, %dec_label_pc_11c44 ], [ %v2_11c44, %bb87 ]
  %v3_11c4c = udiv i32 %v0_11c4c, 2
  br label %dec_label_pc_11c50

dec_label_pc_11c50:                               ; preds = %dec_label_pc_11c2c, %bb88
  %v2_11c54 = phi i32 [ %v0_11c40, %dec_label_pc_11c2c ], [ %v3_11c4c, %bb88 ]
  %v1_11c54 = phi i32 [ %v1_11c3c, %dec_label_pc_11c2c ], [ %v0_11c5055, %bb88 ]
  %v3_11c50 = icmp ult i32 %v1_11c54, %v2_11c54
  br i1 %v3_11c50, label %bb76, label %bb89

bb89:                                             ; preds = %dec_label_pc_11c50
  %v2_11c50 = sub i32 %v1_11c54, %v2_11c54
  br label %bb76

dec_label_pc_11c5c:                               ; preds = %dec_label_pc_11ba0
  %v0_11c5c = load i32, i32* @lr, align 4
  %v0_11c60 = call i32 @function_11d50()
  call void @__pseudo_branch(i32 %v0_11c5c)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_11c54, { 1, 2, 0 }
  uselistorder i32 %v0_11c40, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11c20, { 1, 0, 2 }
  uselistorder i32 %v7_11c18, { 1, 0 }
  uselistorder i32 %v3_11c14, { 1, 0 }
  uselistorder i32 %v1_11bfc.v6_11bfc.v6_11c04.v6_11c0c, { 1, 2, 7, 5, 6, 4, 0, 3 }
  uselistorder i32 %v4_11c08, { 1, 0 }
  uselistorder i32 %v4_11c00, { 1, 0 }
  uselistorder i32 %v4_11bf8, { 1, 0 }
  uselistorder i32 %v6_11c18, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11be8, { 1, 0 }
  uselistorder i32 %v1_11bdc, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v4_11bc8, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11bd4.pr33100, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11ba8, { 4, 1, 5, 3, 0, 2, 6, 7 }
  uselistorder i32 %arg2, { 7, 8, 6, 5, 3, 4, 0, 2, 1 }
  uselistorder label %dec_label_pc_11c50, { 1, 0 }
  uselistorder label %bb88, { 1, 0 }
  uselistorder label %dec_label_pc_11c44, { 1, 0 }
  uselistorder label %bb86, { 1, 0 }
  uselistorder label %bb83, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %dec_label_pc_11bf0, { 1, 0 }
  uselistorder label %bb77, { 1, 0 }
  uselistorder label %bb76, { 2, 0, 3, 4, 5, 1 }
  uselistorder label %.thread65, { 1, 0 }
}

define i32 @function_11c6c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11c6c:
  store i32 %arg1, i32* @r0, align 4
  %v2_11c6c = icmp eq i32 %arg2, 0
  br i1 %v2_11c6c, label %dec_label_pc_11d40, label %dec_label_pc_11c74

dec_label_pc_11c74:                               ; preds = %dec_label_pc_11c6c
  %v1_11c6c = icmp slt i32 %arg2, 0
  br i1 %v1_11c6c, label %bb, label %bb79

bb:                                               ; preds = %dec_label_pc_11c74
  %v2_11c74 = sub i32 0, %arg2
  br label %bb79

bb79:                                             ; preds = %dec_label_pc_11c74, %bb
  %v4_11c8c = phi i32 [ %arg2, %dec_label_pc_11c74 ], [ %v2_11c74, %bb ]
  %v0_11c78 = load i32, i32* @r0, align 4
  %v1_11c78 = icmp slt i32 %v0_11c78, 0
  br i1 %v1_11c78, label %bb80, label %bb81

bb80:                                             ; preds = %bb79
  %v2_11c7c = sub i32 0, %v0_11c78
  br label %bb81

bb81:                                             ; preds = %bb79, %bb80
  %v1_11c84 = phi i32 [ %v0_11c78, %bb79 ], [ %v2_11c7c, %bb80 ]
  %v1_11c80 = add i32 %v4_11c8c, -1
  %v7_11c80 = icmp eq i32 %v4_11c8c, 1
  br i1 %v7_11c80, label %.thread70, label %bb82

bb82:                                             ; preds = %bb81
  %v10_11c84 = icmp eq i32 %v1_11c84, %v4_11c8c
  br i1 %v10_11c84, label %.thread70, label %bb83

.thread70:                                        ; preds = %bb81, %bb82
  br label %.thread72

bb83:                                             ; preds = %bb82
  %v4_11c84 = icmp ult i32 %v1_11c84, %v4_11c8c
  br i1 %v4_11c84, label %.thread6, label %bb84

bb84:                                             ; preds = %bb83
  %v6_11c8c = and i32 %v1_11c80, %v4_11c8c
  %v8_11c8c = icmp eq i32 %v6_11c8c, 0
  br i1 %v8_11c8c, label %.thread72, label %dec_label_pc_11c9c.preheader

dec_label_pc_11c9c.preheader:                     ; preds = %bb84
  %v2_11c9c109 = icmp ugt i32 %v4_11c8c, 268435455
  br i1 %v2_11c9c109, label %.thread1, label %bb85

.thread72:                                        ; preds = %bb84, %.thread70
  %v1_11c9064 = phi i32 [ %v1_11c84, %bb84 ], [ 0, %.thread70 ]
  %v3_11c90 = and i32 %v1_11c9064, %v1_11c80
  br label %.thread6

.thread1:                                         ; preds = %.thread2.thread7, %dec_label_pc_11c9c.preheader
  %v0_11cb0.pr35.lcssa = phi i32 [ %v4_11c8c, %dec_label_pc_11c9c.preheader ], [ %v4_11ca4, %.thread2.thread7 ]
  %storemerge.lcssa = phi i32 [ 0, %dec_label_pc_11c9c.preheader ], [ %v2_11ca89, %.thread2.thread7 ]
  br label %dec_label_pc_11cb0thread-pre-split.loopexit

bb85:                                             ; preds = %dec_label_pc_11c9c.preheader, %.thread2.thread7
  %storemerge111 = phi i32 [ %v2_11ca89, %.thread2.thread7 ], [ 0, %dec_label_pc_11c9c.preheader ]
  %v0_11cb0.pr35110 = phi i32 [ %v4_11ca4, %.thread2.thread7 ], [ %v4_11c8c, %dec_label_pc_11c9c.preheader ]
  %v4_11ca0 = icmp ult i32 %v0_11cb0.pr35110, %v1_11c84
  br i1 %v4_11ca0, label %bb86, label %dec_label_pc_11cb0thread-pre-split.loopexit.loopexit

bb86:                                             ; preds = %bb85
  %v2_11ca4 = and i32 %v0_11cb0.pr35110, 268435456
  %v3_11ca4 = icmp eq i32 %v2_11ca4, 0
  %v4_11ca4 = mul i32 %v0_11cb0.pr35110, 16
  br i1 %v3_11ca4, label %.thread2.thread7, label %dec_label_pc_11cb0.loopexit

.thread2.thread7:                                 ; preds = %bb86
  %v2_11ca89 = add i32 %storemerge111, 4
  %v2_11c9c = icmp ugt i32 %v4_11ca4, 268435455
  br i1 %v2_11c9c, label %.thread1, label %bb85

dec_label_pc_11cb0thread-pre-split.loopexit.loopexit: ; preds = %bb85
  br label %dec_label_pc_11cb0thread-pre-split.loopexit

dec_label_pc_11cb0thread-pre-split.loopexit:      ; preds = %dec_label_pc_11cb0thread-pre-split.loopexit.loopexit, %.thread1
  %v0_11cb0.pr35108 = phi i32 [ %v0_11cb0.pr35.lcssa, %.thread1 ], [ %v0_11cb0.pr35110, %dec_label_pc_11cb0thread-pre-split.loopexit.loopexit ]
  %storemerge105 = phi i32 [ %storemerge.lcssa, %.thread1 ], [ %storemerge111, %dec_label_pc_11cb0thread-pre-split.loopexit.loopexit ]
  br label %dec_label_pc_11cb0thread-pre-split

dec_label_pc_11cb0thread-pre-split:               ; preds = %.thread4, %dec_label_pc_11cb0thread-pre-split.loopexit
  %v1_11cbc41 = phi i32 [ %storemerge105, %dec_label_pc_11cb0thread-pre-split.loopexit ], [ %v2_11cbc, %.thread4 ]
  %v2_11cb436 = phi i32 [ %v1_11c84, %dec_label_pc_11cb0thread-pre-split.loopexit ], [ %v2_11cb4, %.thread4 ]
  %v0_11cb0.pr = phi i32 [ %v0_11cb0.pr35108, %dec_label_pc_11cb0thread-pre-split.loopexit ], [ %v3_11cb8, %.thread4 ]
  br label %dec_label_pc_11cb0

dec_label_pc_11cb0.loopexit:                      ; preds = %bb86
  br label %dec_label_pc_11cb0

dec_label_pc_11cb0:                               ; preds = %dec_label_pc_11cb0.loopexit, %dec_label_pc_11cb0thread-pre-split
  %v0_11cc4.pr = phi i32 [ %v1_11cbc41, %dec_label_pc_11cb0thread-pre-split ], [ %storemerge111, %dec_label_pc_11cb0.loopexit ]
  %v2_11cb4 = phi i32 [ %v2_11cb436, %dec_label_pc_11cb0thread-pre-split ], [ %v1_11c84, %dec_label_pc_11cb0.loopexit ]
  %v1_11cb8 = phi i32 [ %v0_11cb0.pr, %dec_label_pc_11cb0thread-pre-split ], [ %v4_11ca4, %dec_label_pc_11cb0.loopexit ]
  %v2_11cb0 = icmp slt i32 %v1_11cb8, 0
  br i1 %v2_11cb0, label %dec_label_pc_11cc4, label %bb87

bb87:                                             ; preds = %dec_label_pc_11cb0
  %v4_11cb4 = icmp ult i32 %v1_11cb8, %v2_11cb4
  br i1 %v4_11cb4, label %.thread4, label %dec_label_pc_11cc4

.thread4:                                         ; preds = %bb87
  %v3_11cb8 = mul i32 %v1_11cb8, 2
  %v2_11cbc = add i32 %v0_11cc4.pr, 1
  br label %dec_label_pc_11cb0thread-pre-split

dec_label_pc_11cc4:                               ; preds = %bb87, %dec_label_pc_11cb0
  %v2_11cc4 = add i32 %v0_11cc4.pr, -3
  %v5_11cc8 = icmp slt i32 %v0_11cc4.pr, 3
  br i1 %v5_11cc8, label %dec_label_pc_11d08, label %dec_label_pc_11ccc

dec_label_pc_11ccc:                               ; preds = %dec_label_pc_11cc4, %bb91
  %v6_11cf4 = phi i32 [ %v0_11cfc, %bb91 ], [ %v2_11cc4, %dec_label_pc_11cc4 ]
  %v1_11cd0 = phi i32 [ %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, %bb91 ], [ %v2_11cb4, %dec_label_pc_11cc4 ]
  %v3_11cf010 = phi i32 [ %v3_11cf0, %bb91 ], [ %v1_11cb8, %dec_label_pc_11cc4 ]
  %v3_11ccc = icmp ult i32 %v1_11cd0, %v3_11cf010
  %v3_11cd0 = select i1 %v3_11ccc, i32 0, i32 %v3_11cf010
  %v1_11cd8 = sub i32 %v1_11cd0, %v3_11cd0
  %v4_11cd4 = udiv i32 %v3_11cf010, 2
  %v6_11cd4 = icmp ult i32 %v1_11cd8, %v4_11cd4
  %v6_11cd8 = select i1 %v6_11cd4, i32 0, i32 %v4_11cd4
  %v1_11cd8.v6_11cd8 = sub i32 %v1_11cd8, %v6_11cd8
  %.demorgan = and i1 %v3_11ccc, %v6_11cd4
  %v4_11cdc = udiv i32 %v3_11cf010, 4
  %v6_11cdc = icmp ult i32 %v1_11cd8.v6_11cd8, %v4_11cdc
  %v6_11ce0 = select i1 %v6_11cdc, i32 0, i32 %v4_11cdc
  %v1_11cd8.v6_11cd8.v6_11ce0 = sub i32 %v1_11cd8.v6_11cd8, %v6_11ce0
  %.demorgan76 = and i1 %.demorgan, %v6_11cdc
  %v4_11ce4 = udiv i32 %v3_11cf010, 8
  %v6_11ce4 = icmp ult i32 %v1_11cd8.v6_11cd8.v6_11ce0, %v4_11ce4
  %v6_11ce8 = select i1 %v6_11ce4, i32 0, i32 %v4_11ce4
  %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8 = sub i32 %v1_11cd8.v6_11cd8.v6_11ce0, %v6_11ce8
  %.demorgan77 = and i1 %.demorgan76, %v6_11ce4
  br i1 %.demorgan77, label %bb89, label %bb88

bb88:                                             ; preds = %dec_label_pc_11ccc
  br label %bb89

bb89:                                             ; preds = %dec_label_pc_11ccc, %bb88
  %v2_11cec = add i32 %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, -1
  %v4_11cec = sub i32 0, %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8
  %v5_11cec = and i32 %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, %v4_11cec
  %v3_11cf0 = udiv i32 %v3_11cf010, 16
  %v5_11cf4 = icmp slt i32 %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, 1
  br i1 %v5_11cf4, label %bb91, label %bb90

bb90:                                             ; preds = %bb89
  %v7_11cf4 = add i32 %v6_11cf4, -4
  %v9_11cf4 = sub i32 3, %v6_11cf4
  %v10_11cf4 = and i32 %v9_11cf4, %v6_11cf4
  br label %bb91

bb91:                                             ; preds = %bb89, %bb90
  %v0_11cfc = phi i32 [ %v6_11cf4, %bb89 ], [ %v7_11cf4, %bb90 ]
  %v0_11cf813.in = phi i32 [ %v2_11cec, %bb89 ], [ %v7_11cf4, %bb90 ]
  %v1_11cf812.in = phi i32 [ %v5_11cec, %bb89 ], [ %v10_11cf4, %bb90 ]
  %v1_11cf812 = icmp slt i32 %v1_11cf812.in, 0
  %v0_11cf813 = icmp slt i32 %v0_11cf813.in, 0
  %v2_11cf8 = xor i1 %v0_11cf813, %v1_11cf812
  br i1 %v2_11cf8, label %dec_label_pc_11cfc, label %dec_label_pc_11ccc

dec_label_pc_11cfc:                               ; preds = %bb91
  %v1_11cfc = urem i32 %v0_11cfc, 4
  %v2_11cfc = icmp eq i32 %v1_11cfc, 0
  br i1 %v2_11cfc, label %.thread6, label %bb92

bb92:                                             ; preds = %dec_label_pc_11cfc
  %v3_11d00 = icmp eq i32 %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, 0
  br i1 %v3_11d00, label %.thread6, label %dec_label_pc_11d08

dec_label_pc_11d08:                               ; preds = %bb92, %dec_label_pc_11cc4
  %v0_11d1c = phi i32 [ %v3_11cf0, %bb92 ], [ %v1_11cb8, %dec_label_pc_11cc4 ]
  %v1_11d18 = phi i32 [ %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, %bb92 ], [ %v2_11cb4, %dec_label_pc_11cc4 ]
  %v0_11d08 = phi i32 [ %v0_11cfc, %bb92 ], [ %v2_11cc4, %dec_label_pc_11cc4 ]
  %v5_11d0c = icmp slt i32 %v0_11d08, -2
  br i1 %v5_11d0c, label %dec_label_pc_11d2c, label %dec_label_pc_11d10

dec_label_pc_11d10:                               ; preds = %dec_label_pc_11d08
  %v8_11d08 = icmp eq i32 %v0_11d08, -2
  br i1 %v8_11d08, label %dec_label_pc_11d20, label %dec_label_pc_11d14

dec_label_pc_11d14:                               ; preds = %dec_label_pc_11d10
  %v3_11d14 = icmp ult i32 %v1_11d18, %v0_11d1c
  br i1 %v3_11d14, label %bb94, label %bb93

bb93:                                             ; preds = %dec_label_pc_11d14
  %v2_11d14 = sub i32 %v1_11d18, %v0_11d1c
  br label %bb94

bb94:                                             ; preds = %dec_label_pc_11d14, %bb93
  %v0_11d2054 = phi i32 [ %v1_11d18, %dec_label_pc_11d14 ], [ %v2_11d14, %bb93 ]
  %v3_11d1c = udiv i32 %v0_11d1c, 2
  br label %dec_label_pc_11d20

dec_label_pc_11d20:                               ; preds = %dec_label_pc_11d10, %bb94
  %v0_11d28 = phi i32 [ %v0_11d1c, %dec_label_pc_11d10 ], [ %v3_11d1c, %bb94 ]
  %v1_11d24 = phi i32 [ %v1_11d18, %dec_label_pc_11d10 ], [ %v0_11d2054, %bb94 ]
  %v3_11d20 = icmp ult i32 %v1_11d24, %v0_11d28
  br i1 %v3_11d20, label %bb96, label %bb95

bb95:                                             ; preds = %dec_label_pc_11d20
  %v2_11d20 = sub i32 %v1_11d24, %v0_11d28
  br label %bb96

bb96:                                             ; preds = %dec_label_pc_11d20, %bb95
  %v0_11d2c57 = phi i32 [ %v1_11d24, %dec_label_pc_11d20 ], [ %v2_11d20, %bb95 ]
  %v3_11d28 = udiv i32 %v0_11d28, 2
  br label %dec_label_pc_11d2c

dec_label_pc_11d2c:                               ; preds = %dec_label_pc_11d08, %bb96
  %v2_11d30 = phi i32 [ %v0_11d1c, %dec_label_pc_11d08 ], [ %v3_11d28, %bb96 ]
  %v1_11d30 = phi i32 [ %v1_11d18, %dec_label_pc_11d08 ], [ %v0_11d2c57, %bb96 ]
  %v3_11d2c = icmp ult i32 %v1_11d30, %v2_11d30
  br i1 %v3_11d2c, label %.thread6, label %bb97

bb97:                                             ; preds = %dec_label_pc_11d2c
  %v2_11d2c = sub i32 %v1_11d30, %v2_11d30
  br label %.thread6

.thread6:                                         ; preds = %dec_label_pc_11d2c, %bb83, %.thread72, %dec_label_pc_11cfc, %bb92, %bb97
  %v1_11d38 = phi i32 [ %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, %dec_label_pc_11cfc ], [ 0, %bb92 ], [ %v1_11d30, %dec_label_pc_11d2c ], [ %v2_11d2c, %bb97 ], [ %v3_11c90, %.thread72 ], [ %v1_11c84, %bb83 ]
  br i1 %v1_11c78, label %bb98, label %bb99

bb98:                                             ; preds = %.thread6
  %v2_11d38 = sub i32 0, %v1_11d38
  br label %bb99

bb99:                                             ; preds = %.thread6, %bb98
  %v1_11d3c = phi i32 [ %v1_11d38, %.thread6 ], [ %v2_11d38, %bb98 ]
  ret i32 %v1_11d3c

dec_label_pc_11d40:                               ; preds = %dec_label_pc_11c6c
  %v0_11d40 = load i32, i32* @lr, align 4
  %v0_11d44 = call i32 @function_11d50()
  call void @__pseudo_branch(i32 %v0_11d40)
  ret i32 0

; uselistorder directives
  uselistorder i32 %v0_11d1c, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v0_11cfc, { 1, 0, 2 }
  uselistorder i32 %v7_11cf4, { 1, 0 }
  uselistorder i32 %v3_11cf0, { 1, 0 }
  uselistorder i32 %v1_11cd8.v6_11cd8.v6_11ce0.v6_11ce8, { 0, 1, 2, 7, 5, 6, 4, 3 }
  uselistorder i32 %v4_11ce4, { 1, 0 }
  uselistorder i32 %v4_11cdc, { 1, 0 }
  uselistorder i32 %v4_11cd4, { 1, 0 }
  uselistorder i32 %v6_11cf4, { 3, 0, 2, 1 }
  uselistorder i32 %v2_11cc4, { 1, 0 }
  uselistorder i32 %v1_11cb8, { 2, 1, 0, 3, 4 }
  uselistorder i32 %v2_11cb4, { 1, 0, 3, 2 }
  uselistorder i32 %v4_11ca4, { 1, 0, 3, 2 }
  uselistorder i32 %v0_11cb0.pr35110, { 1, 0, 2, 3 }
  uselistorder i32 %v1_11c84, { 0, 2, 3, 1, 4, 6, 5 }
  uselistorder i32 %v4_11c8c, { 1, 0, 2, 3, 5, 4, 6, 7 }
  uselistorder i32 ()* @function_11d50, { 2, 1, 0 }
  uselistorder i32 268435455, { 2, 0, 3, 1, 4 }
  uselistorder i32 %arg2, { 3, 2, 1, 0 }
  uselistorder label %bb99, { 1, 0 }
  uselistorder label %.thread6, { 5, 0, 4, 3, 2, 1 }
  uselistorder label %dec_label_pc_11d2c, { 1, 0 }
  uselistorder label %bb96, { 1, 0 }
  uselistorder label %dec_label_pc_11d20, { 1, 0 }
  uselistorder label %bb94, { 1, 0 }
  uselistorder label %bb91, { 1, 0 }
  uselistorder label %bb89, { 1, 0 }
  uselistorder label %dec_label_pc_11ccc, { 1, 0 }
  uselistorder label %bb85, { 1, 0 }
  uselistorder label %.thread70, { 1, 0 }
  uselistorder label %bb81, { 1, 0 }
  uselistorder label %bb79, { 1, 0 }
}

define i32 @function_11d50() local_unnamed_addr {
dec_label_pc_11d50:
  %v1_11d50 = load i32, i32* @r0, align 4
  ret i32 %v1_11d50
}

define i32 @function_11d54(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11d54:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r0, align 4
  %v6_11d54 = load i32, i32* @r2, align 4
  %v1_11d64 = add i32 %arg2, -12
  store i32 %v6_11d54, i32* @r3, align 4
  %tmp = icmp ugt i32 %v1_11d64, 2
  br i1 %tmp, label %dec_label_pc_11d8c, label %dec_label_pc_11d84

dec_label_pc_11d84:                               ; preds = %dec_label_pc_11d54
  %v0_11d84 = call i32 @function_11dc8()
  br label %dec_label_pc_11db8

dec_label_pc_11d8c:                               ; preds = %dec_label_pc_11d54
  %v2_11d94 = call i32 (i32, i32, ...) @fcntl(i32 %arg1, i32 %arg2)
  store i32 %v2_11d94, i32* %r4.global-to-local, align 4
  %tmp8 = icmp ult i32 %v2_11d94, -4095
  br i1 %tmp8, label %dec_label_pc_11db8, label %dec_label_pc_11da4

dec_label_pc_11da4:                               ; preds = %dec_label_pc_11d8c
  %v0_11da4 = call i32 @function_123ec()
  %v0_11da8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11da8 = sub i32 0, %v0_11da8
  %v2_11dac = inttoptr i32 %v0_11da4 to i32*
  store i32 %v1_11da8, i32* %v2_11dac, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11db8

dec_label_pc_11db8:                               ; preds = %dec_label_pc_11da4, %dec_label_pc_11d8c, %dec_label_pc_11d84
  %storemerge = phi i32 [ %v0_11d84, %dec_label_pc_11d84 ], [ %v2_11d94, %dec_label_pc_11d8c ], [ -1, %dec_label_pc_11da4 ]
  ret i32 %storemerge

; uselistorder directives
  uselistorder i32 %v2_11d94, { 1, 0, 2 }
}

define i32 @function_11dc8() local_unnamed_addr {
dec_label_pc_11dc8:
  %r4.global-to-local = alloca i32, align 4
  %v0_11de8 = load i32, i32* @r0, align 4
  store i32 %v0_11de8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11de8, -4095
  br i1 %tmp, label %dec_label_pc_11e04, label %dec_label_pc_11df4

dec_label_pc_11df4:                               ; preds = %dec_label_pc_11dc8
  %v0_11df4 = call i32 @function_123ec()
  %v0_11df8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11df8 = sub i32 0, %v0_11df8
  %v2_11dfc = inttoptr i32 %v0_11df4 to i32*
  store i32 %v1_11df8, i32* %v2_11dfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e04

dec_label_pc_11e04:                               ; preds = %dec_label_pc_11dc8, %dec_label_pc_11df4
  %v0_11e04 = phi i32 [ %v0_11de8, %dec_label_pc_11dc8 ], [ -1, %dec_label_pc_11df4 ]
  ret i32 %v0_11e04

; uselistorder directives
  uselistorder i32 %v0_11de8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e04, { 1, 0 }
}

define i32 @function_11e18(i32 %arg1) local_unnamed_addr {
dec_label_pc_11e18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e18 = load i32, i32* @r4, align 4
  store i32 %v3_11e18, i32* %stack_var_-8, align 4
  %v1_11e1c = call i32 @close(i32 %arg1)
  store i32 %v1_11e1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v1_11e1c, -4095
  br i1 %tmp, label %dec_label_pc_11e3c, label %dec_label_pc_11e2c

dec_label_pc_11e2c:                               ; preds = %dec_label_pc_11e18
  %v0_11e2c = call i32 @function_123ec()
  %v0_11e30 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e30 = sub i32 0, %v0_11e30
  %v2_11e34 = inttoptr i32 %v0_11e2c to i32*
  store i32 %v1_11e30, i32* %v2_11e34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e3c

dec_label_pc_11e3c:                               ; preds = %dec_label_pc_11e18, %dec_label_pc_11e2c
  %v0_11e3c = phi i32 [ %v1_11e1c, %dec_label_pc_11e18 ], [ -1, %dec_label_pc_11e2c ]
  %v2_11e40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e40, i32* @r4, align 4
  ret i32 %v0_11e3c

; uselistorder directives
  uselistorder i32 %v1_11e1c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e3c, { 1, 0 }
}

define i32 @function_11e44() local_unnamed_addr {
dec_label_pc_11e44:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e44 = load i32, i32* @r4, align 4
  store i32 %v3_11e44, i32* %stack_var_-8, align 4
  %v0_11e48 = call i32 @fork()
  store i32 %v0_11e48, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e48, -4095
  br i1 %tmp, label %dec_label_pc_11e68, label %dec_label_pc_11e58

dec_label_pc_11e58:                               ; preds = %dec_label_pc_11e44
  %v0_11e58 = call i32 @function_123ec()
  %v0_11e5c = load i32, i32* %r4.global-to-local, align 4
  %v1_11e5c = sub i32 0, %v0_11e5c
  %v2_11e60 = inttoptr i32 %v0_11e58 to i32*
  store i32 %v1_11e5c, i32* %v2_11e60, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e68

dec_label_pc_11e68:                               ; preds = %dec_label_pc_11e44, %dec_label_pc_11e58
  %v0_11e68 = phi i32 [ %v0_11e48, %dec_label_pc_11e44 ], [ -1, %dec_label_pc_11e58 ]
  %v2_11e6c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e6c, i32* @r4, align 4
  ret i32 %v0_11e68

; uselistorder directives
  uselistorder i32 %v0_11e48, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e68, { 1, 0 }
}

define i32 @function_11e70() local_unnamed_addr {
dec_label_pc_11e70:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e70 = load i32, i32* @r4, align 4
  store i32 %v3_11e70, i32* %stack_var_-8, align 4
  %v0_11e74 = call i32 @getpid()
  store i32 %v0_11e74, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11e74, -4095
  br i1 %tmp, label %dec_label_pc_11e94, label %dec_label_pc_11e84

dec_label_pc_11e84:                               ; preds = %dec_label_pc_11e70
  %v0_11e84 = call i32 @function_123ec()
  %v0_11e88 = load i32, i32* %r4.global-to-local, align 4
  %v1_11e88 = sub i32 0, %v0_11e88
  %v2_11e8c = inttoptr i32 %v0_11e84 to i32*
  store i32 %v1_11e88, i32* %v2_11e8c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11e94

dec_label_pc_11e94:                               ; preds = %dec_label_pc_11e70, %dec_label_pc_11e84
  %v0_11e94 = phi i32 [ %v0_11e74, %dec_label_pc_11e70 ], [ -1, %dec_label_pc_11e84 ]
  %v2_11e98 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11e98, i32* @r4, align 4
  ret i32 %v0_11e94

; uselistorder directives
  uselistorder i32 %v0_11e74, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11e94, { 1, 0 }
}

define i32 @function_11e9c() local_unnamed_addr {
dec_label_pc_11e9c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11e9c = load i32, i32* @r4, align 4
  store i32 %v3_11e9c, i32* %stack_var_-8, align 4
  %v0_11ea0 = call i32 @getppid()
  store i32 %v0_11ea0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_11ea0, -4095
  br i1 %tmp, label %dec_label_pc_11ec0, label %dec_label_pc_11eb0

dec_label_pc_11eb0:                               ; preds = %dec_label_pc_11e9c
  %v0_11eb0 = call i32 @function_123ec()
  %v0_11eb4 = load i32, i32* %r4.global-to-local, align 4
  %v1_11eb4 = sub i32 0, %v0_11eb4
  %v2_11eb8 = inttoptr i32 %v0_11eb0 to i32*
  store i32 %v1_11eb4, i32* %v2_11eb8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11ec0

dec_label_pc_11ec0:                               ; preds = %dec_label_pc_11e9c, %dec_label_pc_11eb0
  %v0_11ec0 = phi i32 [ %v0_11ea0, %dec_label_pc_11e9c ], [ -1, %dec_label_pc_11eb0 ]
  %v2_11ec4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11ec4, i32* @r4, align 4
  ret i32 %v0_11ec0

; uselistorder directives
  uselistorder i32 %v0_11ea0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11ec0, { 1, 0 }
}

define i32 @function_11ec8(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11ec8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %v9_11ec8 = load i32, i32* @r3, align 4
  store i32 %v9_11ec8, i32* %stack_var_-4, align 4
  %v2_11ed4 = ptrtoint i32* %stack_var_-4 to i32
  store i32 %v2_11ed4, i32* @r3, align 4
  %v2_11ee4 = call i32 (i32, i32, ...) @ioctl(i32 %arg1, i32 %arg2)
  store i32 %v2_11ee4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11ee4, -4095
  br i1 %tmp, label %dec_label_pc_11f04, label %dec_label_pc_11ef4

dec_label_pc_11ef4:                               ; preds = %dec_label_pc_11ec8
  %v0_11ef4 = call i32 @function_123ec()
  %v0_11ef8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ef8 = sub i32 0, %v0_11ef8
  store i32 %v1_11ef8, i32* @r3, align 4
  %v2_11efc = inttoptr i32 %v0_11ef4 to i32*
  store i32 %v1_11ef8, i32* %v2_11efc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f04

dec_label_pc_11f04:                               ; preds = %dec_label_pc_11ec8, %dec_label_pc_11ef4
  %v0_11f04 = phi i32 [ %v2_11ee4, %dec_label_pc_11ec8 ], [ -1, %dec_label_pc_11ef4 ]
  ret i32 %v0_11f04

; uselistorder directives
  uselistorder i32 %v2_11ee4, { 1, 0, 2 }
  uselistorder i32* %stack_var_-4, { 1, 0 }
  uselistorder label %dec_label_pc_11f04, { 1, 0 }
}

define i32 @function_11f18(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f18:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11f18 = load i32, i32* @r4, align 4
  store i32 %v3_11f18, i32* %stack_var_-8, align 4
  %v2_11f1c = call i32 @kill(i32 %arg1, i32 %arg2)
  %v7_11f20 = icmp eq i32 %v2_11f1c, -4096
  store i1 %v7_11f20, i1* @cpsr_z, align 1
  store i32 %v2_11f1c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_11f1c, -4095
  br i1 %tmp, label %dec_label_pc_11f3c, label %dec_label_pc_11f2c

dec_label_pc_11f2c:                               ; preds = %dec_label_pc_11f18
  %v0_11f2c = call i32 @function_123ec()
  %v0_11f30 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f30 = sub i32 0, %v0_11f30
  %v2_11f34 = inttoptr i32 %v0_11f2c to i32*
  store i32 %v1_11f30, i32* %v2_11f34, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f3c

dec_label_pc_11f3c:                               ; preds = %dec_label_pc_11f18, %dec_label_pc_11f2c
  %v0_11f3c = phi i32 [ %v2_11f1c, %dec_label_pc_11f18 ], [ -1, %dec_label_pc_11f2c ]
  %v2_11f40 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11f40, i32* @r4, align 4
  ret i32 %v0_11f3c

; uselistorder directives
  uselistorder i32 %v2_11f1c, { 2, 0, 3, 1 }
  uselistorder label %dec_label_pc_11f3c, { 1, 0 }
}

define i32 @function_11f44(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11f44:
  %r4.global-to-local = alloca i32, align 4
  %v6_11f44 = load i32, i32* @r2, align 4
  %v1_11f54 = and i32 %arg2, 64
  store i32 %v1_11f54, i32* @r3, align 4
  %v2_11f54 = icmp eq i32 %v1_11f54, 0
  br i1 %v2_11f54, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_11f44
  store i32 %v6_11f44, i32* @r3, align 4
  %phitmp = urem i32 %v6_11f44, 65536
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_11f44, %bb
  %v0_11f64 = phi i32 [ 0, %dec_label_pc_11f44 ], [ %phitmp, %bb ]
  store i32 %v0_11f64, i32* @r2, align 4
  %v4_11f6c = call i32 (i8*, i32, ...) @open(i8* %arg1, i32 %arg2)
  %v7_11f70 = icmp eq i32 %v4_11f6c, -4096
  store i1 %v7_11f70, i1* @cpsr_z, align 1
  store i32 %v4_11f6c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11f6c, -4095
  br i1 %tmp, label %dec_label_pc_11f8c, label %dec_label_pc_11f7c

dec_label_pc_11f7c:                               ; preds = %.thread1
  %v0_11f7c = call i32 @function_123ec()
  %v0_11f80 = load i32, i32* %r4.global-to-local, align 4
  %v1_11f80 = sub i32 0, %v0_11f80
  store i32 %v1_11f80, i32* @r3, align 4
  %v2_11f84 = inttoptr i32 %v0_11f7c to i32*
  store i32 %v1_11f80, i32* %v2_11f84, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11f8c

dec_label_pc_11f8c:                               ; preds = %.thread1, %dec_label_pc_11f7c
  %v0_11f8c = phi i32 [ %v4_11f6c, %.thread1 ], [ -1, %dec_label_pc_11f7c ]
  ret i32 %v0_11f8c

; uselistorder directives
  uselistorder i32 %v4_11f6c, { 2, 0, 3, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_11f8c, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_11fa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_11fa0:
  store i32 %arg1, i32* @r2, align 4
  %v0_11fa8 = load i32, i32* @r0, align 4
  %v2_11fa8 = inttoptr i32 %v0_11fa8 to i8*
  %v3_11fa8 = call i32 @function_11f44(i8* %v2_11fa8, i32 577)
  %v0_11fac = load i1, i1* @cpsr_z, align 1
  br i1 %v0_11fac, label %bb, label %bb2

bb:                                               ; preds = %dec_label_pc_11fa0
  %v6_11fac = and i32 %v3_11fa8, 36
  br label %bb2

bb2:                                              ; preds = %dec_label_pc_11fa0, %bb
  %v7_11fac = phi i32 [ %v3_11fa8, %dec_label_pc_11fa0 ], [ %v6_11fac, %bb ]
  ret i32 %v7_11fac

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_11fb0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_11fb0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fb0 = load i32, i32* @r4, align 4
  store i32 %v3_11fb0, i32* %stack_var_-8, align 4
  %v2_11fb8 = load i32, i32* @r2, align 4
  %v3_11fb8 = load i32, i32* @r3, align 4
  %v4_11fb8 = call i32 @prctl(i32 %arg1, i32 %arg2, i32 %v2_11fb8, i32 %v3_11fb8, i32 0)
  store i32 %v4_11fb8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11fb8, -4095
  br i1 %tmp, label %dec_label_pc_11fd8, label %dec_label_pc_11fc8

dec_label_pc_11fc8:                               ; preds = %dec_label_pc_11fb0
  %v0_11fc8 = call i32 @function_123ec()
  %v0_11fcc = load i32, i32* %r4.global-to-local, align 4
  %v1_11fcc = sub i32 0, %v0_11fcc
  %v2_11fd0 = inttoptr i32 %v0_11fc8 to i32*
  store i32 %v1_11fcc, i32* %v2_11fd0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_11fd8

dec_label_pc_11fd8:                               ; preds = %dec_label_pc_11fb0, %dec_label_pc_11fc8
  %v0_11fd8 = phi i32 [ %v4_11fb8, %dec_label_pc_11fb0 ], [ -1, %dec_label_pc_11fc8 ]
  %v2_11fdc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_11fdc, i32* @r4, align 4
  ret i32 %v0_11fd8

; uselistorder directives
  uselistorder i32 %v4_11fb8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_11fd8, { 1, 0 }
}

define i32 @function_11fe0(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_11fe0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_11fe0 = load i32, i32* @r4, align 4
  store i32 %v3_11fe0, i32* %stack_var_-8, align 4
  %v4_11fe4 = call i32 @read(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_11fe4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_11fe4, -4095
  br i1 %tmp, label %dec_label_pc_12004, label %dec_label_pc_11ff4

dec_label_pc_11ff4:                               ; preds = %dec_label_pc_11fe0
  %v0_11ff4 = call i32 @function_123ec()
  %v0_11ff8 = load i32, i32* %r4.global-to-local, align 4
  %v1_11ff8 = sub i32 0, %v0_11ff8
  %v2_11ffc = inttoptr i32 %v0_11ff4 to i32*
  store i32 %v1_11ff8, i32* %v2_11ffc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12004

dec_label_pc_12004:                               ; preds = %dec_label_pc_11fe0, %dec_label_pc_11ff4
  %v0_12004 = phi i32 [ %v4_11fe4, %dec_label_pc_11fe0 ], [ -1, %dec_label_pc_11ff4 ]
  %v2_12008 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12008, i32* @r4, align 4
  ret i32 %v0_12004

; uselistorder directives
  uselistorder i32 %v4_11fe4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12004, { 1, 0 }
}

define i32 @function_1200c(i8* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1200c:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to i8*
  %stack_var_-8 = alloca i32, align 4
  %v3_1200c = load i32, i32* @r4, align 4
  store i32 %v3_1200c, i32* %stack_var_-8, align 4
  %v7_12010 = call i32 @readlink(i8* %arg1, i8* %tmp, i32 %arg3)
  store i32 %v7_12010, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v7_12010, -4095
  br i1 %tmp6, label %dec_label_pc_12030, label %dec_label_pc_12020

dec_label_pc_12020:                               ; preds = %dec_label_pc_1200c
  %v0_12020 = call i32 @function_123ec()
  %v0_12024 = load i32, i32* %r4.global-to-local, align 4
  %v1_12024 = sub i32 0, %v0_12024
  %v2_12028 = inttoptr i32 %v0_12020 to i32*
  store i32 %v1_12024, i32* %v2_12028, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12030

dec_label_pc_12030:                               ; preds = %dec_label_pc_1200c, %dec_label_pc_12020
  %v0_12030 = phi i32 [ %v7_12010, %dec_label_pc_1200c ], [ -1, %dec_label_pc_12020 ]
  %v2_12034 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12034, i32* @r4, align 4
  ret i32 %v0_12030

; uselistorder directives
  uselistorder i32 %v7_12010, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12030, { 1, 0 }
}

define i32 @function_12038(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12038:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12038 = load i32, i32* @r4, align 4
  store i32 %v3_12038, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_12060, label %dec_label_pc_12050

dec_label_pc_12050:                               ; preds = %dec_label_pc_12038
  %v0_12050 = call i32 @function_123ec()
  %v0_12054 = load i32, i32* %r4.global-to-local, align 4
  %v1_12054 = sub i32 0, %v0_12054
  %v2_12058 = inttoptr i32 %v0_12050 to i32*
  store i32 %v1_12054, i32* %v2_12058, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_12064.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_12060

dec_label_pc_12060:                               ; preds = %dec_label_pc_12038, %dec_label_pc_12050
  %v2_12064 = phi i32 [ %v3_12038, %dec_label_pc_12038 ], [ %v2_12064.pre, %dec_label_pc_12050 ]
  %v0_12060 = phi i32 [ %arg1, %dec_label_pc_12038 ], [ -1, %dec_label_pc_12050 ]
  store i32 %v2_12064, i32* @r4, align 4
  ret i32 %v0_12060

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12060, { 1, 0 }
}

define i32 @function_12068(i32 %arg1) local_unnamed_addr {
dec_label_pc_12068:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12068 = load i32, i32* @r4, align 4
  store i32 %v3_12068, i32* %stack_var_-8, align 4
  %v0_1206c = call i32 @setsid()
  store i32 %v0_1206c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_1206c, -4095
  br i1 %tmp, label %dec_label_pc_1208c, label %dec_label_pc_1207c

dec_label_pc_1207c:                               ; preds = %dec_label_pc_12068
  %v0_1207c = call i32 @function_123ec()
  %v0_12080 = load i32, i32* %r4.global-to-local, align 4
  %v1_12080 = sub i32 0, %v0_12080
  %v2_12084 = inttoptr i32 %v0_1207c to i32*
  store i32 %v1_12080, i32* %v2_12084, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1208c

dec_label_pc_1208c:                               ; preds = %dec_label_pc_12068, %dec_label_pc_1207c
  %v0_1208c = phi i32 [ %v0_1206c, %dec_label_pc_12068 ], [ -1, %dec_label_pc_1207c ]
  %v2_12090 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12090, i32* @r4, align 4
  ret i32 %v0_1208c

; uselistorder directives
  uselistorder i32 %v0_1206c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1208c, { 1, 0 }
}

define i32 @function_12094(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12094:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg3 to %_TYPEDEF_sigset_t*
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12094 = icmp eq %_TYPEDEF_sigset_t* %arg2, null
  br i1 %v3_12094, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_12094
  %v3_1209c5 = load i32, i32* @r4, align 4
  store i32 %v3_1209c5, i32* %stack_var_-8, align 4
  br label %dec_label_pc_120bc

bb:                                               ; preds = %dec_label_pc_12094
  %v3_1209c = load i32, i32* @r4, align 4
  store i32 %v3_1209c, i32* %stack_var_-8, align 4
  %tmp12 = icmp ult i32 %arg1, 3
  br i1 %tmp12, label %dec_label_pc_120bc, label %dec_label_pc_120a8

dec_label_pc_120a8:                               ; preds = %bb
  %v0_120a8 = call i32 @function_123ec()
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_120b4 = inttoptr i32 %v0_120a8 to i32*
  store i32 22, i32* %v2_120b4, align 4
  %v0_120e0.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120bc:                               ; preds = %.thread, %bb
  %v7_120bc = call i32 @sigprocmask(i32 %arg1, %_TYPEDEF_sigset_t* %arg2, %_TYPEDEF_sigset_t* %tmp)
  store i32 %v7_120bc, i32* %r4.global-to-local, align 4
  %tmp13 = icmp ult i32 %v7_120bc, -4095
  br i1 %tmp13, label %dec_label_pc_120dc, label %dec_label_pc_120cc

dec_label_pc_120cc:                               ; preds = %dec_label_pc_120bc
  %v0_120cc = call i32 @function_123ec()
  %v0_120d0 = load i32, i32* %r4.global-to-local, align 4
  %v1_120d0 = sub i32 0, %v0_120d0
  %v2_120d4 = inttoptr i32 %v0_120cc to i32*
  store i32 %v1_120d0, i32* %v2_120d4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_120dc

dec_label_pc_120dc:                               ; preds = %dec_label_pc_120bc, %dec_label_pc_120cc
  %v0_120dc = phi i32 [ %v7_120bc, %dec_label_pc_120bc ], [ -1, %dec_label_pc_120cc ]
  store i32 %v0_120dc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_120e0

dec_label_pc_120e0:                               ; preds = %dec_label_pc_120a8, %dec_label_pc_120dc
  %v0_120e0 = phi i32 [ %v0_120e0.pre, %dec_label_pc_120a8 ], [ %v0_120dc, %dec_label_pc_120dc ]
  %v2_120e4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_120e4, i32* @r4, align 4
  ret i32 %v0_120e0

; uselistorder directives
  uselistorder i32 %v7_120bc, { 1, 0, 2 }
  uselistorder i32* %stack_var_-8, { 1, 2, 0 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg3, { 1, 0 }
  uselistorder %_TYPEDEF_sigset_t* %arg2, { 1, 0 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %dec_label_pc_120e0, { 1, 0 }
  uselistorder label %dec_label_pc_120dc, { 1, 0 }
  uselistorder label %dec_label_pc_120bc, { 1, 0 }
}

define i32 @function_120e8(i32* %arg1) local_unnamed_addr {
dec_label_pc_120e8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_120e8 = load i32, i32* @r4, align 4
  store i32 %v3_120e8, i32* %stack_var_-8, align 4
  %v2_120ec = call i32 @time(i32* %arg1)
  store i32 %v2_120ec, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_120ec, -4095
  br i1 %tmp, label %dec_label_pc_1210c, label %dec_label_pc_120fc

dec_label_pc_120fc:                               ; preds = %dec_label_pc_120e8
  %v0_120fc = call i32 @function_123ec()
  %v0_12100 = load i32, i32* %r4.global-to-local, align 4
  %v1_12100 = sub i32 0, %v0_12100
  %v2_12104 = inttoptr i32 %v0_120fc to i32*
  store i32 %v1_12100, i32* %v2_12104, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_1210c

dec_label_pc_1210c:                               ; preds = %dec_label_pc_120e8, %dec_label_pc_120fc
  %v0_1210c = phi i32 [ %v2_120ec, %dec_label_pc_120e8 ], [ -1, %dec_label_pc_120fc ]
  %v2_12110 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12110, i32* @r4, align 4
  ret i32 %v0_1210c

; uselistorder directives
  uselistorder i32 %v2_120ec, { 1, 0, 2 }
  uselistorder label %dec_label_pc_1210c, { 1, 0 }
}

define i32 @function_12114(i8* %arg1) local_unnamed_addr {
dec_label_pc_12114:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12114 = load i32, i32* @r4, align 4
  store i32 %v3_12114, i32* %stack_var_-8, align 4
  %v3_12118 = call i32 @unlink(i8* %arg1)
  store i32 %v3_12118, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12118, -4095
  br i1 %tmp, label %dec_label_pc_12138, label %dec_label_pc_12128

dec_label_pc_12128:                               ; preds = %dec_label_pc_12114
  %v0_12128 = call i32 @function_123ec()
  %v0_1212c = load i32, i32* %r4.global-to-local, align 4
  %v1_1212c = sub i32 0, %v0_1212c
  %v2_12130 = inttoptr i32 %v0_12128 to i32*
  store i32 %v1_1212c, i32* %v2_12130, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12138

dec_label_pc_12138:                               ; preds = %dec_label_pc_12114, %dec_label_pc_12128
  %v0_12138 = phi i32 [ %v3_12118, %dec_label_pc_12114 ], [ -1, %dec_label_pc_12128 ]
  %v2_1213c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1213c, i32* @r4, align 4
  ret i32 %v0_12138

; uselistorder directives
  uselistorder i32 %v3_12118, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12138, { 1, 0 }
}

define i32 @function_12140(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12140:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12140 = load i32, i32* @r4, align 4
  store i32 %v3_12140, i32* %stack_var_-8, align 4
  %v4_12144 = call i32 @write(i32 %arg1, i32* %arg2, i32 %arg3)
  store i32 %v4_12144, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_12144, -4095
  br i1 %tmp, label %dec_label_pc_12164, label %dec_label_pc_12154

dec_label_pc_12154:                               ; preds = %dec_label_pc_12140
  %v0_12154 = call i32 @function_123ec()
  %v0_12158 = load i32, i32* %r4.global-to-local, align 4
  %v1_12158 = sub i32 0, %v0_12158
  %v2_1215c = inttoptr i32 %v0_12154 to i32*
  store i32 %v1_12158, i32* %v2_1215c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12164

dec_label_pc_12164:                               ; preds = %dec_label_pc_12140, %dec_label_pc_12154
  %v0_12164 = phi i32 [ %v4_12144, %dec_label_pc_12140 ], [ -1, %dec_label_pc_12154 ]
  %v2_12168 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12168, i32* @r4, align 4
  ret i32 %v0_12164

; uselistorder directives
  uselistorder i32 %v4_12144, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12164, { 1, 0 }
}

define i32 @function_1216c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1216c:
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_1216c = load i32, i32* @r4, align 4
  store i32 %v3_1216c, i32* %stack_var_-20, align 4
  %v6_1216c = load i32, i32* @r5, align 4
  %v9_1216c = load i32, i32* @r6, align 4
  %v12_1216c = load i32, i32* @r7, align 4
  store i32 %tmp, i32* @r5, align 4
  %v2_12174 = load i32, i32* %arg1, align 4
  store i32 %v2_12174, i32* %r4.global-to-local, align 4
  %v2_12178 = ptrtoint i32* %stack_var_-36 to i32
  %v1_1217c = add i32 %tmp, 24
  store i32 %v1_1217c, i32* @r6, align 4
  %v3_12180 = icmp eq i32 %v2_12174, -1
  store i32 %v2_12178, i32* @r7, align 4
  store i32 %v1_1217c, i32* %r2.global-to-local, align 4
  store i32 %v2_12178, i32* @r0, align 4
  br i1 %v3_12180, label %dec_label_pc_12198, label %dec_label_pc_121ac

dec_label_pc_12198:                               ; preds = %dec_label_pc_1216c
  %v0_12198 = call i32 @function_123ec()
  %v0_121a0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_121a0, i32* %r2.global-to-local, align 4
  %v2_121a4 = inttoptr i32 %v0_12198 to i32*
  store i32 9, i32* %v2_121a4, align 4
  %v0_12204.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12204

dec_label_pc_121ac:                               ; preds = %dec_label_pc_1216c
  %v8_121b4 = call i32 @function_13460(i32 %v2_12178, i32 ptrtoint (i32* @global_var_13458.394 to i32), i32 %v1_1217c, i32 78944, i32 %v3_1216c, i32 %v6_1216c, i32 %v9_1216c)
  %v1_121c4 = call i32 @function_13458()
  %v0_121d0 = load i32, i32* @r5, align 4
  %v1_121d0 = inttoptr i32 %v0_121d0 to i32*
  %v2_121d0 = load i32, i32* %v1_121d0, align 4
  store i32 %v2_121d0, i32* @r4, align 4
  store i32 %v2_12178, i32* @r0, align 4
  store i32 -1, i32* %v1_121d0, align 4
  store i32 ptrtoint (i32* @global_var_121e8.398 to i32), i32* @lr, align 4
  %v8_121e4 = call i32 @function_13460(i32 %v2_12178, i32 1, i32 %v1_1217c, i32 78944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_121e8 = load i32, i32* @r5, align 4
  %v1_121e8 = add i32 %v0_121e8, 12
  %v2_121e8 = inttoptr i32 %v1_121e8 to i32*
  %v3_121e8 = load i32, i32* %v2_121e8, align 4
  store i32 %v3_121e8, i32* @r0, align 4
  %v0_121ec = call i32 @function_12a70()
  %v0_121f0 = load i32, i32* @r5, align 4
  store i32 %v0_121f0, i32* @r0, align 4
  %v0_121f4 = call i32 @function_12a70()
  %v0_121f8 = load i32, i32* @r4, align 4
  %v1_121fc = call i32 @function_11e18(i32 %v0_121f8)
  store i32 %v1_121fc, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12204

dec_label_pc_12204:                               ; preds = %dec_label_pc_12198, %dec_label_pc_121ac
  %v0_12204 = phi i32 [ %v0_12204.pre, %dec_label_pc_12198 ], [ %v1_121fc, %dec_label_pc_121ac ]
  %v2_1220c = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_1220c, i32* @r4, align 4
  store i32 %v6_1216c, i32* @r5, align 4
  store i32 %v9_1216c, i32* @r6, align 4
  store i32 %v12_1216c, i32* @r7, align 4
  ret i32 %v0_12204

; uselistorder directives
  uselistorder i32 %v1_1217c, { 2, 1, 0, 3 }
  uselistorder i32 %v2_12178, { 1, 2, 0, 3, 4 }
  uselistorder i32 %v9_1216c, { 1, 0 }
  uselistorder i32 %v6_1216c, { 1, 0 }
  uselistorder label %dec_label_pc_12204, { 1, 0 }
}

define i32 @function_12220(i32 %arg1) local_unnamed_addr {
dec_label_pc_12220:
  %r5.global-to-local = alloca i32, align 4
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-108 = alloca i32, align 4
  %v3_12220 = load i32, i32* @r4, align 4
  %v9_12220 = load i32, i32* @r6, align 4
  %v12_12220 = load i32, i32* @r7, align 4
  %v0_1222c = load i32, i32* @r0, align 4
  %v2_1222c = inttoptr i32 %v0_1222c to i8*
  %v3_1222c = call i32 @function_11f44(i8* %v2_1222c, i32 18432)
  store i32 %v3_1222c, i32* @r0, align 4
  store i32 %v3_1222c, i32* @r7, align 4
  %v1_12230 = icmp slt i32 %v3_1222c, 0
  br i1 %v1_12230, label %.thread1, label %dec_label_pc_1223c

.thread1:                                         ; preds = %dec_label_pc_12220
  store i32 0, i32* @r6, align 4
  br label %dec_label_pc_1230c

dec_label_pc_1223c:                               ; preds = %dec_label_pc_12220
  %v2_12228 = ptrtoint i32* %stack_var_-108 to i32
  store i32 %v2_12228, i32* @r1, align 4
  %v0_12240 = call i32 @function_13884()
  %v1_12244 = icmp slt i32 %v0_12240, 0
  br i1 %v1_12244, label %dec_label_pc_12264, label %dec_label_pc_1224c

dec_label_pc_1224c:                               ; preds = %dec_label_pc_1223c
  %v0_1224c = load i32, i32* @r7, align 4
  store i32 1, i32* @r2, align 4
  %v2_12258 = call i32 @function_11d54(i32 %v0_1224c, i32 2)
  %v1_1225c = icmp slt i32 %v2_12258, 0
  br i1 %v1_1225c, label %dec_label_pc_12264, label %dec_label_pc_12284

dec_label_pc_12264:                               ; preds = %dec_label_pc_1224c, %dec_label_pc_1223c
  %v0_12264 = call i32 @function_123ec()
  store i32 %v0_12264, i32* %r5.global-to-local, align 4
  %v0_1226c = load i32, i32* @r7, align 4
  %v1_12270 = inttoptr i32 %v0_12264 to i32*
  %v2_12270 = load i32, i32* %v1_12270, align 4
  store i32 %v2_12270, i32* @r4, align 4
  %v1_12274 = call i32 @function_11e18(i32 %v0_1226c)
  store i32 0, i32* @r6, align 4
  %v0_1227c = load i32, i32* @r4, align 4
  %v1_1227c = load i32, i32* %r5.global-to-local, align 4
  %v2_1227c = inttoptr i32 %v1_1227c to i32*
  store i32 %v0_1227c, i32* %v2_1227c, align 4
  br label %dec_label_pc_1230c

dec_label_pc_12284:                               ; preds = %dec_label_pc_1224c
  %v1_12288 = call i32 @function_128c4(i32 48)
  store i32 %v1_12288, i32* @r6, align 4
  %v2_1228c = icmp eq i32 %v1_12288, 0
  br i1 %v2_1228c, label %dec_label_pc_122dc, label %dec_label_pc_12294

dec_label_pc_12294:                               ; preds = %dec_label_pc_12284
  store i32 0, i32* @r4, align 4
  %v2_12298 = add i32 %v1_12288, 16
  %v3_12298 = inttoptr i32 %v2_12298 to i32*
  store i32 0, i32* %v3_12298, align 4
  %v2_122a0 = icmp ugt i32 %tmp, 511
  %v1_122a4 = load i32, i32* @r6, align 4
  %v2_122a4 = add i32 %v1_122a4, 20
  %v3_122a4 = inttoptr i32 %v2_122a4 to i32*
  store i32 %tmp, i32* %v3_122a4, align 4
  br i1 %v2_122a0, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12294
  %v2_122ac = load i32, i32* @r6, align 4
  %v3_122ac = add i32 %v2_122ac, 20
  %v4_122ac = inttoptr i32 %v3_122ac to i32*
  store i32 512, i32* %v4_122ac, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12294, %bb
  %v0_122b0 = load i32, i32* @r7, align 4
  %v1_122b0 = load i32, i32* @r6, align 4
  %v2_122b0 = inttoptr i32 %v1_122b0 to i32*
  store i32 %v0_122b0, i32* %v2_122b0, align 4
  %v0_122b4 = load i32, i32* @r4, align 4
  %v1_122b4 = load i32, i32* @r6, align 4
  %v2_122b4 = add i32 %v1_122b4, 8
  %v3_122b4 = inttoptr i32 %v2_122b4 to i32*
  store i32 %v0_122b4, i32* %v3_122b4, align 4
  %v0_122b8 = load i32, i32* @r4, align 4
  %v1_122b8 = load i32, i32* @r6, align 4
  %v2_122b8 = add i32 %v1_122b8, 4
  %v3_122b8 = inttoptr i32 %v2_122b8 to i32*
  store i32 %v0_122b8, i32* %v3_122b8, align 4
  %v0_122c0 = load i32, i32* @r6, align 4
  %v1_122c0 = add i32 %v0_122c0, 20
  %v2_122c0 = inttoptr i32 %v1_122c0 to i32*
  %v3_122c0 = load i32, i32* %v2_122c0, align 4
  %v2_122c4 = call i32 @function_12a18(i32 1, i32 %v3_122c0)
  %v2_122c8 = icmp eq i32 %v2_122c4, 0
  %v1_122cc = load i32, i32* @r6, align 4
  %v2_122cc = add i32 %v1_122cc, 12
  %v3_122cc = inttoptr i32 %v2_122cc to i32*
  store i32 %v2_122c4, i32* %v3_122cc, align 4
  br i1 %v2_122c8, label %dec_label_pc_122d4, label %dec_label_pc_122f8

dec_label_pc_122d4:                               ; preds = %.thread
  %v0_122d4 = load i32, i32* @r6, align 4
  store i32 %v0_122d4, i32* @r0, align 4
  %v0_122d8 = call i32 @function_12a70()
  br label %dec_label_pc_122dc

dec_label_pc_122dc:                               ; preds = %dec_label_pc_12284, %dec_label_pc_122d4
  %v0_122dc = load i32, i32* @r7, align 4
  %v1_122e0 = call i32 @function_11e18(i32 %v0_122dc)
  %v0_122e4 = call i32 @function_123ec()
  store i32 0, i32* @r6, align 4
  %v2_122f0 = inttoptr i32 %v0_122e4 to i32*
  store i32 12, i32* %v2_122f0, align 4
  br label %dec_label_pc_1230c

dec_label_pc_122f8:                               ; preds = %.thread
  store i32 74508, i32* @lr, align 4
  %v1_12308 = call i32 @function_13458()
  br label %dec_label_pc_1230c

dec_label_pc_1230c:                               ; preds = %.thread1, %dec_label_pc_122dc, %dec_label_pc_12264, %dec_label_pc_122f8
  %v0_1230c = load i32, i32* @r6, align 4
  store i32 %v3_12220, i32* @r4, align 4
  store i32 %v9_12220, i32* @r6, align 4
  store i32 %v12_12220, i32* @r7, align 4
  ret i32 %v0_1230c

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_12a18, { 39, 41, 40, 35, 20, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 5, 4, 19, 1, 0, 18, 17, 3, 2, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 38, 37, 36 }
  uselistorder i32 512, { 0, 5, 1, 2, 8, 6, 7, 9, 3, 10, 4, 11 }
  uselistorder i32 (i32)* @function_11e18, { 19, 18, 17, 33, 37, 36, 32, 31, 35, 34, 30, 29, 23, 28, 27, 26, 25, 24, 22, 21, 3, 2, 20, 16, 15, 5, 4, 14, 13, 12, 11, 10, 9, 8, 7, 6, 0, 1 }
  uselistorder label %dec_label_pc_1230c, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_122dc, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_1231c(i32* %arg1) local_unnamed_addr {
dec_label_pc_1231c:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %v3_1231c = load i32, i32* @r4, align 4
  %v6_1231c = load i32, i32* @r5, align 4
  %v9_1231c = load i32, i32* @lr, align 4
  %v1_12320 = add i32 %tmp, 24
  store i32 %v1_12320, i32* @r4, align 4
  %v2_12324 = ptrtoint i32* %stack_var_-28 to i32
  store i32 78944, i32* %r3.global-to-local, align 4
  store i32 %tmp, i32* @r5, align 4
  store i32 %v2_12324, i32* @r0, align 4
  store i32 %v1_12320, i32* %r2.global-to-local, align 4
  %v8_12340 = call i32 @function_13460(i32 %v2_12324, i32 ptrtoint (i32* @global_var_13458.394 to i32), i32 %v1_12320, i32 78944, i32 %v3_1231c, i32 %v6_1231c, i32 %v9_1231c)
  %v0_12344 = load i32, i32* @r4, align 4
  store i32 %v0_12344, i32* %r0.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_13458.394 to i32), i32* %r3.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_12354.403 to i32), i32* @lr, align 4
  %v1_12350 = call i32 @function_13458()
  store i32 %v1_12350, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_12354

dec_label_pc_12354:                               ; preds = %dec_label_pc_12388, %dec_label_pc_1231c
  %v0_12354 = load i32, i32* @r5, align 4
  %v1_12354 = add i32 %v0_12354, 4
  %v2_12354 = inttoptr i32 %v1_12354 to i32*
  %v3_12354 = load i32, i32* %v2_12354, align 4
  store i32 %v3_12354, i32* %r2.global-to-local, align 4
  %v4_12354 = add i32 %v0_12354, 8
  %v5_12354 = inttoptr i32 %v4_12354 to i32*
  %v6_12354 = load i32, i32* %v5_12354, align 4
  store i32 %v6_12354, i32* %r3.global-to-local, align 4
  %tmp8 = icmp ugt i32 %v6_12354, %v3_12354
  br i1 %tmp8, label %dec_label_pc_12388, label %dec_label_pc_12360

dec_label_pc_12360:                               ; preds = %dec_label_pc_12354
  %v1_12360 = inttoptr i32 %v0_12354 to i32*
  %v2_12360 = load i32, i32* %v1_12360, align 4
  store i32 %v2_12360, i32* @r0, align 4
  %v1_12364 = add i32 %v0_12354, 12
  %v2_12364 = inttoptr i32 %v1_12364 to i32*
  %v3_12364 = load i32, i32* %v2_12364, align 4
  %v1_12368 = add i32 %v0_12354, 20
  %v2_12368 = inttoptr i32 %v1_12368 to i32*
  %v3_12368 = load i32, i32* %v2_12368, align 4
  store i32 %v3_12368, i32* @r2, align 4
  %v4_1236c = call i32 @function_138d4(i32 %v2_12360, i32 %v3_12364, i32 %v3_12368, i32 %v6_12354)
  store i32 %v4_1236c, i32* %r0.global-to-local, align 4
  %tmp7 = icmp slt i32 %v4_1236c, 1
  br i1 %tmp7, label %.thread, label %dec_label_pc_1237c

.thread:                                          ; preds = %dec_label_pc_12360
  store i32 0, i32* @r4, align 4
  br label %dec_label_pc_123bc

dec_label_pc_1237c:                               ; preds = %dec_label_pc_12360
  store i32 0, i32* %r3.global-to-local, align 4
  %v1_12380 = load i32, i32* @r5, align 4
  %v2_12380 = add i32 %v1_12380, 4
  %v3_12380 = inttoptr i32 %v2_12380 to i32*
  store i32 0, i32* %v3_12380, align 4
  %v1_12384 = load i32, i32* @r5, align 4
  %v2_12384 = add i32 %v1_12384, 8
  %v3_12384 = inttoptr i32 %v2_12384 to i32*
  store i32 %v4_1236c, i32* %v3_12384, align 4
  %v0_12388.pre = load i32, i32* @r5, align 4
  br label %dec_label_pc_12388

dec_label_pc_12388:                               ; preds = %dec_label_pc_12354, %dec_label_pc_1237c
  %v1_123a0 = phi i32 [ %v0_12354, %dec_label_pc_12354 ], [ %v0_12388.pre, %dec_label_pc_1237c ]
  %v1_12388 = add i32 %v1_123a0, 4
  %v2_12388 = inttoptr i32 %v1_12388 to i32*
  %v3_12388 = load i32, i32* %v2_12388, align 4
  store i32 %v3_12388, i32* %r2.global-to-local, align 4
  %v1_1238c = add i32 %v1_123a0, 12
  %v2_1238c = inttoptr i32 %v1_1238c to i32*
  %v3_1238c = load i32, i32* %v2_1238c, align 4
  store i32 %v3_1238c, i32* %ip.global-to-local, align 4
  %v2_12390 = add i32 %v3_1238c, %v3_12388
  store i32 %v2_12390, i32* @r4, align 4
  %v1_12394 = add i32 %v2_12390, 4
  %v2_12394 = inttoptr i32 %v1_12394 to i32*
  %v3_12394 = load i32, i32* %v2_12394, align 4
  %v1_12398 = add i32 %v2_12390, 8
  %v2_12398 = inttoptr i32 %v1_12398 to i8*
  %v3_12398 = load i8, i8* %v2_12398, align 1
  %v4_12398 = zext i8 %v3_12398 to i32
  store i32 %v4_12398, i32* %r3.global-to-local, align 4
  %v1_1239c = add i32 %v2_12390, 9
  %v2_1239c = inttoptr i32 %v1_1239c to i8*
  %v3_1239c = load i8, i8* %v2_1239c, align 1
  %v4_1239c = zext i8 %v3_1239c to i32
  store i32 %v4_1239c, i32* %r0.global-to-local, align 4
  %v2_123a0 = add i32 %v1_123a0, 16
  %v3_123a0 = inttoptr i32 %v2_123a0 to i32*
  store i32 %v3_12394, i32* %v3_123a0, align 4
  %v0_123a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_123a4 = load i32, i32* %ip.global-to-local, align 4
  %v2_123a4 = add i32 %v1_123a4, %v0_123a4
  %v3_123a4 = inttoptr i32 %v2_123a4 to i32*
  %v4_123a4 = load i32, i32* %v3_123a4, align 4
  %v0_123a8 = load i32, i32* %r3.global-to-local, align 4
  %v1_123a8 = load i32, i32* %r0.global-to-local, align 4
  %v4_123a8 = mul i32 %v1_123a8, 256
  %v5_123a8 = or i32 %v4_123a8, %v0_123a8
  store i32 %v5_123a8, i32* %r3.global-to-local, align 4
  %v2_123ac = add i32 %v5_123a8, %v0_123a4
  store i32 %v2_123ac, i32* @r2, align 4
  %v2_123b0 = icmp eq i32 %v4_123a4, 0
  %v1_123b4 = load i32, i32* @r5, align 4
  %v2_123b4 = add i32 %v1_123b4, 4
  %v3_123b4 = inttoptr i32 %v2_123b4 to i32*
  store i32 %v2_123ac, i32* %v3_123b4, align 4
  br i1 %v2_123b0, label %dec_label_pc_12354, label %dec_label_pc_123bc

dec_label_pc_123bc:                               ; preds = %dec_label_pc_12388, %.thread
  store i32 %v2_12324, i32* @r0, align 4
  store i32 78944, i32* %r3.global-to-local, align 4
  store i32 74704, i32* @lr, align 4
  %v3_123cc = load i32, i32* @r2, align 4
  %v8_123cc = call i32 @function_13460(i32 %v2_12324, i32 1, i32 %v3_123cc, i32 78944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v0_123d0 = load i32, i32* @r4, align 4
  store i32 %v0_123d0, i32* %r0.global-to-local, align 4
  store i32 %v3_1231c, i32* @r4, align 4
  store i32 %v6_1231c, i32* @r5, align 4
  ret i32 %v0_123d0

; uselistorder directives
  uselistorder i32 %v1_123a0, { 0, 2, 1 }
  uselistorder i32 %v6_12354, { 1, 0, 2 }
  uselistorder i32 %v0_12354, { 0, 1, 3, 2, 4, 5 }
  uselistorder i32 %v2_12324, { 1, 0, 3, 2 }
  uselistorder i32 %v1_12320, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 6, 1, 5, 0 }
  uselistorder label %dec_label_pc_12388, { 1, 0 }
}

define i32 @function_123ec() local_unnamed_addr {
dec_label_pc_123ec:
  ret i32 ptrtoint (i32* @global_var_1d228.406 to i32)
}

define i32 @function_123f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_123f8:
  %tmp = call i32 @__decompiler_undefined_function_0()
  %stack_var_-20 = alloca i32, align 4
  %v1_12404 = bitcast i32* %stack_var_-20 to %tms*
  %v2_12404 = call i32 @function_13c64(%tms* %v1_12404)
  %v2_1240c = load i32, i32* %stack_var_-20, align 4
  %v2_12410 = add i32 %v2_1240c, %tmp
  %v2_12418 = mul i32 %v2_12410, 10000
  %v1_1241c = and i32 %v2_12418, 2147483632
  ret i32 %v1_1241c

; uselistorder directives
  uselistorder i32* %stack_var_-20, { 1, 0 }
}

define i32 @function_12428(i32 %arg1) local_unnamed_addr {
dec_label_pc_12428:
  %v0_12428 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_12428, label %bb, label %bb1

bb:                                               ; preds = %dec_label_pc_12428
  br label %bb1

bb1:                                              ; preds = %dec_label_pc_12428, %bb
  ret i32 %arg1

; uselistorder directives
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12430(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12430:
  %v0_12430 = call i32 @function_14070()
  ret i32 %v0_12430
}

define i32 @function_12440(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12440:
  %v0_12440 = call i32 @function_14070()
  ret i32 %v0_12440

; uselistorder directives
  uselistorder i32 ()* @function_14070, { 1, 0 }
}

define i32 @function_12450(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12450:
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %tmp, i32* %r3.global-to-local, align 4
  %v0_12454 = load i32, i32* @r2, align 4
  %v8_12454 = icmp eq i32 %v0_12454, 8
  store i1 %v8_12454, i1* %cpsr_z.global-to-local, align 1
  %v5_12458 = icmp slt i32 %v0_12454, 8
  br i1 %v5_12458, label %dec_label_pc_124b8, label %dec_label_pc_1245c

dec_label_pc_1245c:                               ; preds = %dec_label_pc_12450
  %v4_1245c = mul i32 %arg2, 256
  %v5_1245c = or i32 %v4_1245c, %arg2
  %v4_12460 = mul i32 %v5_1245c, 65536
  %v5_12460 = or i32 %v4_12460, %v5_1245c
  store i32 %v5_12460, i32* %r1.global-to-local, align 4
  %v1_1246457 = urem i32 %tmp, 4
  %v2_1246458 = icmp eq i32 %v1_1246457, 0
  store i1 %v2_1246458, i1* %cpsr_z.global-to-local, align 1
  %extract.t83 = trunc i32 %arg2 to i8
  br i1 %v2_1246458, label %dec_label_pc_12474, label %bb

bb:                                               ; preds = %dec_label_pc_1245c, %.thread.bb_crit_edge
  %arg2.sink.off0 = phi i8 [ %extract.t82, %.thread.bb_crit_edge ], [ %extract.t83, %dec_label_pc_1245c ]
  %v3_1246859 = phi i32 [ %v6_12468, %.thread.bb_crit_edge ], [ %tmp, %dec_label_pc_1245c ]
  %v4_12468 = inttoptr i32 %v3_1246859 to i8*
  store i8 %arg2.sink.off0, i8* %v4_12468, align 1
  %v5_12468 = load i32, i32* %r3.global-to-local, align 4
  %v6_12468 = add i32 %v5_12468, 1
  store i32 %v6_12468, i32* %r3.global-to-local, align 4
  %v0_1246c.pr = load i1, i1* %cpsr_z.global-to-local, align 1
  %v0_12478.pr.pre = load i32, i32* @r2, align 4
  br i1 %v0_1246c.pr, label %dec_label_pc_12474, label %.thread

.thread:                                          ; preds = %bb
  %v2_1246c = add i32 %v0_12478.pr.pre, -1
  store i32 %v2_1246c, i32* @r2, align 4
  %v1_12464 = urem i32 %v6_12468, 4
  %v2_12464 = icmp eq i32 %v1_12464, 0
  store i1 %v2_12464, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_12464, label %dec_label_pc_12474, label %.thread.bb_crit_edge

.thread.bb_crit_edge:                             ; preds = %.thread
  %v1_12468.pre = load i32, i32* %r1.global-to-local, align 4
  %extract.t82 = trunc i32 %v1_12468.pre to i8
  br label %bb

dec_label_pc_12474:                               ; preds = %.thread, %bb, %dec_label_pc_1245c
  %v0_1248028 = phi i32 [ %tmp, %dec_label_pc_1245c ], [ %v6_12468, %bb ], [ %v6_12468, %.thread ]
  %v0_12478.pr = phi i32 [ %v0_12454, %dec_label_pc_1245c ], [ %v0_12478.pr.pre, %bb ], [ %v2_1246c, %.thread ]
  %v0_12474 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v0_12474, i32* %ip.global-to-local, align 4
  %v8_1247810 = icmp eq i32 %v0_12478.pr, 8
  store i1 %v8_1247810, i1* %cpsr_z.global-to-local, align 1
  %v5_1247c11 = icmp slt i32 %v0_12478.pr, 8
  br i1 %v5_1247c11, label %dec_label_pc_124b8, label %dec_label_pc_12480.preheader

dec_label_pc_12480.preheader:                     ; preds = %dec_label_pc_12474
  %v1_1248046 = inttoptr i32 %v0_1248028 to i32*
  store i32 %v0_12474, i32* %v1_1248046, align 4
  %v3_1248047 = add i32 %v0_1248028, 4
  %v4_1248048 = inttoptr i32 %v3_1248047 to i32*
  %v5_1248049 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_1248049, i32* %v4_1248048, align 4
  %v6_1248050 = add i32 %v0_1248028, 8
  store i32 %v6_1248050, i32* %r3.global-to-local, align 4
  %v0_1248451 = load i32, i32* @r2, align 4
  %v1_1248452 = add i32 %v0_1248451, -8
  store i32 %v1_1248452, i32* %r2.global-to-local, align 4
  %v5_1248c53 = icmp slt i32 %v1_1248452, 8
  br i1 %v5_1248c53, label %dec_label_pc_12480.dec_label_pc_124b8.loopexit_crit_edge, label %dec_label_pc_12490

dec_label_pc_12490:                               ; preds = %dec_label_pc_12480.preheader, %dec_label_pc_12478.dec_label_pc_12480_crit_edge
  %v6_1248055 = phi i32 [ %v6_12480, %dec_label_pc_12478.dec_label_pc_12480_crit_edge ], [ %v6_1248050, %dec_label_pc_12480.preheader ]
  %v0_1248054 = phi i32 [ %v12_124ac, %dec_label_pc_12478.dec_label_pc_12480_crit_edge ], [ %v0_1248028, %dec_label_pc_12480.preheader ]
  %v1_12490 = inttoptr i32 %v6_1248055 to i32*
  %v2_12490 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_12490, i32* %v1_12490, align 4
  %v3_12490 = add i32 %v0_1248054, 12
  %v4_12490 = inttoptr i32 %v3_12490 to i32*
  %v5_12490 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12490, i32* %v4_12490, align 4
  %v6_12490 = add i32 %v0_1248054, 16
  store i32 %v6_12490, i32* %r3.global-to-local, align 4
  %v0_12494 = load i32, i32* %r2.global-to-local, align 4
  %v1_12494 = add i32 %v0_12494, -8
  store i32 %v1_12494, i32* %r2.global-to-local, align 4
  %v5_1249c = icmp slt i32 %v1_12494, 8
  br i1 %v5_1249c, label %dec_label_pc_12490.dec_label_pc_124b8.loopexit_crit_edge, label %dec_label_pc_124a0

dec_label_pc_124a0:                               ; preds = %dec_label_pc_12490
  %v1_124a0 = inttoptr i32 %v6_12490 to i32*
  %v2_124a0 = load i32, i32* %r1.global-to-local, align 4
  store i32 %v2_124a0, i32* %v1_124a0, align 4
  %v3_124a0 = add i32 %v0_1248054, 20
  %v4_124a0 = inttoptr i32 %v3_124a0 to i32*
  %v5_124a0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_124a0, i32* %v4_124a0, align 4
  %v6_124a0 = add i32 %v0_1248054, 24
  store i32 %v6_124a0, i32* %r3.global-to-local, align 4
  %v0_124a4 = load i32, i32* %r2.global-to-local, align 4
  %v1_124a4 = add i32 %v0_124a4, -8
  store i32 %v1_124a4, i32* %r2.global-to-local, align 4
  %v5_124ac = icmp slt i32 %v1_124a4, 8
  br i1 %v5_124ac, label %dec_label_pc_124a0.dec_label_pc_124b8.loopexit_crit_edge, label %dec_label_pc_12478

dec_label_pc_12478:                               ; preds = %dec_label_pc_124a0
  %v7_124ac = inttoptr i32 %v6_124a0 to i32*
  %v8_124ac = load i32, i32* %r1.global-to-local, align 4
  store i32 %v8_124ac, i32* %v7_124ac, align 4
  %v9_124ac = add i32 %v0_1248054, 28
  %v10_124ac = inttoptr i32 %v9_124ac to i32*
  %v11_124ac = load i32, i32* %ip.global-to-local, align 4
  store i32 %v11_124ac, i32* %v10_124ac, align 4
  %v12_124ac = add i32 %v0_1248054, 32
  store i32 %v12_124ac, i32* %r3.global-to-local, align 4
  %v6_124b0 = load i32, i32* %r2.global-to-local, align 4
  %v7_124b0 = add i32 %v6_124b0, -8
  store i32 %v7_124b0, i32* %r2.global-to-local, align 4
  %v5_1247c = icmp slt i32 %v7_124b0, 8
  br i1 %v5_1247c, label %dec_label_pc_12478.dec_label_pc_124b8.loopexit_crit_edge, label %dec_label_pc_12478.dec_label_pc_12480_crit_edge

dec_label_pc_12478.dec_label_pc_12480_crit_edge:  ; preds = %dec_label_pc_12478
  %v2_12480.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_12480 = inttoptr i32 %v12_124ac to i32*
  store i32 %v2_12480.pre, i32* %v1_12480, align 4
  %v3_12480 = add i32 %v0_1248054, 36
  %v4_12480 = inttoptr i32 %v3_12480 to i32*
  %v5_12480 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v5_12480, i32* %v4_12480, align 4
  %v6_12480 = add i32 %v0_1248054, 40
  store i32 %v6_12480, i32* %r3.global-to-local, align 4
  %v0_12484 = load i32, i32* %r2.global-to-local, align 4
  %v1_12484 = add i32 %v0_12484, -8
  store i32 %v1_12484, i32* %r2.global-to-local, align 4
  %v5_1248c = icmp slt i32 %v1_12484, 8
  br i1 %v5_1248c, label %dec_label_pc_12480.dec_label_pc_124b8.loopexit_crit_edge, label %dec_label_pc_12490

dec_label_pc_12480.dec_label_pc_124b8.loopexit_crit_edge: ; preds = %dec_label_pc_12478.dec_label_pc_12480_crit_edge, %dec_label_pc_12480.preheader
  %v1_12484.lcssa = phi i32 [ %v1_1248452, %dec_label_pc_12480.preheader ], [ %v1_12484, %dec_label_pc_12478.dec_label_pc_12480_crit_edge ]
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_124b8

dec_label_pc_12478.dec_label_pc_124b8.loopexit_crit_edge: ; preds = %dec_label_pc_12478
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_124b8

dec_label_pc_12490.dec_label_pc_124b8.loopexit_crit_edge: ; preds = %dec_label_pc_12490
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_124b8

dec_label_pc_124a0.dec_label_pc_124b8.loopexit_crit_edge: ; preds = %dec_label_pc_124a0
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_124b8

dec_label_pc_124b8:                               ; preds = %dec_label_pc_12474, %dec_label_pc_12480.dec_label_pc_124b8.loopexit_crit_edge, %dec_label_pc_12478.dec_label_pc_124b8.loopexit_crit_edge, %dec_label_pc_12490.dec_label_pc_124b8.loopexit_crit_edge, %dec_label_pc_124a0.dec_label_pc_124b8.loopexit_crit_edge, %dec_label_pc_12450
  %v0_124c0 = phi i32 [ %v0_12454, %dec_label_pc_12450 ], [ %v1_124a4, %dec_label_pc_124a0.dec_label_pc_124b8.loopexit_crit_edge ], [ %v1_12494, %dec_label_pc_12490.dec_label_pc_124b8.loopexit_crit_edge ], [ %v7_124b0, %dec_label_pc_12478.dec_label_pc_124b8.loopexit_crit_edge ], [ %v1_12484.lcssa, %dec_label_pc_12480.dec_label_pc_124b8.loopexit_crit_edge ], [ %v0_12478.pr, %dec_label_pc_12474 ]
  %v2_124b8 = icmp eq i32 %v0_124c0, 0
  store i1 %v2_124b8, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_124b8, label %bb32, label %bb33

bb32:                                             ; preds = %dec_label_pc_124b8
  ret i32 %tmp

bb33:                                             ; preds = %dec_label_pc_124b8
  %v1_124c0 = sub i32 7, %v0_124c0
  store i32 %v1_124c0, i32* %r2.global-to-local, align 4
  %v3_124c4 = mul i32 %v1_124c0, 4
  %v4_124c4 = add i32 %v3_124c4, ptrtoint (i32* @global_var_124cc.408 to i32)
  call void @__pseudo_branch(i32 %v4_124c4)
  %v0_124cc = load i32, i32* %r1.global-to-local, align 4
  %v1_124cc = trunc i32 %v0_124cc to i8
  %v2_124cc = load i32, i32* %r3.global-to-local, align 4
  %v3_124cc = inttoptr i32 %v2_124cc to i8*
  store i8 %v1_124cc, i8* %v3_124cc, align 1
  %v4_124cc = load i32, i32* %r3.global-to-local, align 4
  %v5_124cc = add i32 %v4_124cc, 1
  store i32 %v5_124cc, i32* %r3.global-to-local, align 4
  %v0_124d0 = load i32, i32* %r1.global-to-local, align 4
  %v1_124d0 = trunc i32 %v0_124d0 to i8
  %v3_124d0 = inttoptr i32 %v5_124cc to i8*
  store i8 %v1_124d0, i8* %v3_124d0, align 1
  %v4_124d0 = load i32, i32* %r3.global-to-local, align 4
  %v5_124d0 = add i32 %v4_124d0, 1
  store i32 %v5_124d0, i32* %r3.global-to-local, align 4
  %v0_124d4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124d4 = trunc i32 %v0_124d4 to i8
  %v3_124d4 = inttoptr i32 %v5_124d0 to i8*
  store i8 %v1_124d4, i8* %v3_124d4, align 1
  %v4_124d4 = load i32, i32* %r3.global-to-local, align 4
  %v5_124d4 = add i32 %v4_124d4, 1
  store i32 %v5_124d4, i32* %r3.global-to-local, align 4
  %v0_124d8 = load i32, i32* %r1.global-to-local, align 4
  %v1_124d8 = trunc i32 %v0_124d8 to i8
  %v3_124d8 = inttoptr i32 %v5_124d4 to i8*
  store i8 %v1_124d8, i8* %v3_124d8, align 1
  %v4_124d8 = load i32, i32* %r3.global-to-local, align 4
  %v5_124d8 = add i32 %v4_124d8, 1
  store i32 %v5_124d8, i32* %r3.global-to-local, align 4
  %v0_124dc = load i32, i32* %r1.global-to-local, align 4
  %v1_124dc = trunc i32 %v0_124dc to i8
  %v3_124dc = inttoptr i32 %v5_124d8 to i8*
  store i8 %v1_124dc, i8* %v3_124dc, align 1
  %v4_124dc = load i32, i32* %r3.global-to-local, align 4
  %v5_124dc = add i32 %v4_124dc, 1
  store i32 %v5_124dc, i32* %r3.global-to-local, align 4
  %v0_124e0 = load i32, i32* %r1.global-to-local, align 4
  %v1_124e0 = trunc i32 %v0_124e0 to i8
  %v3_124e0 = inttoptr i32 %v5_124dc to i8*
  store i8 %v1_124e0, i8* %v3_124e0, align 1
  %v4_124e0 = load i32, i32* %r3.global-to-local, align 4
  %v5_124e0 = add i32 %v4_124e0, 1
  store i32 %v5_124e0, i32* %r3.global-to-local, align 4
  %v0_124e4 = load i32, i32* %r1.global-to-local, align 4
  %v1_124e4 = trunc i32 %v0_124e4 to i8
  %v3_124e4 = inttoptr i32 %v5_124e0 to i8*
  store i8 %v1_124e4, i8* %v3_124e4, align 1
  %v4_124e4 = load i32, i32* %r3.global-to-local, align 4
  %v5_124e4 = add i32 %v4_124e4, 1
  store i32 %v5_124e4, i32* %r3.global-to-local, align 4
  ret i32 %tmp

; uselistorder directives
  uselistorder i32 %v6_12480, { 1, 0 }
  uselistorder i32 %v12_124ac, { 1, 2, 0 }
  uselistorder i32 %v0_1248054, { 0, 1, 7, 6, 5, 4, 3, 2 }
  uselistorder i32 %v0_12478.pr, { 0, 2, 1 }
  uselistorder i32 %v6_12468, { 2, 3, 0, 4, 1 }
  uselistorder i32 %v5_1245c, { 1, 0 }
  uselistorder i32 %v0_12454, { 1, 0, 2, 3 }
  uselistorder i32 %tmp, { 3, 4, 2, 1, 0, 5 }
  uselistorder i32* %r3.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 17, 14, 15, 16, 13, 18, 21, 22 }
  uselistorder i32* %r2.global-to-local, { 1, 9, 2, 3, 4, 5, 6, 7, 8, 0 }
  uselistorder i32* %r1.global-to-local, { 2, 3, 4, 5, 6, 7, 8, 1, 10, 11, 12, 13, 9, 14, 0 }
  uselistorder i32* %ip.global-to-local, { 4, 1, 2, 3, 0, 5 }
  uselistorder i1* %cpsr_z.global-to-local, { 6, 3, 2, 4, 1, 0, 8, 7, 5, 9 }
  uselistorder i32 %arg2, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_124b8, { 4, 3, 2, 1, 0, 5 }
  uselistorder label %dec_label_pc_12490, { 1, 0 }
  uselistorder label %bb, { 1, 0 }
}

define i32 @function_124f0(i32 %arg1, i8* %arg2) local_unnamed_addr {
dec_label_pc_124f0:
  %cpsr_z.global-to-local = alloca i1, align 1
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg2 to i32
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_124f0 = sub i32 %arg1, %tmp
  %v1_124f4 = add i32 %v2_124f0, -1
  store i32 %v1_124f4, i32* %r2.global-to-local, align 4
  %v2_124f84 = load i8, i8* %arg2, align 1
  %v5_124f86 = add i32 %tmp, 1
  store i32 %v5_124f86, i32* %r1.global-to-local, align 4
  %v2_124fc7 = icmp eq i8 %v2_124f84, 0
  store i1 %v2_124fc7, i1* %cpsr_z.global-to-local, align 1
  %v5_125008 = inttoptr i32 %arg1 to i8*
  store i8 %v2_124f84, i8* %v5_125008, align 1
  %v0_125049 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_125049, label %dec_label_pc_12508, label %dec_label_pc_124f8.dec_label_pc_124f8_crit_edge

dec_label_pc_124f8.dec_label_pc_124f8_crit_edge:  ; preds = %dec_label_pc_124f0, %dec_label_pc_124f8.dec_label_pc_124f8_crit_edge
  %v0_124f8.pre = load i32, i32* %r1.global-to-local, align 4
  %v3_12500.pre = load i32, i32* %r2.global-to-local, align 4
  %v1_124f8 = inttoptr i32 %v0_124f8.pre to i8*
  %v2_124f8 = load i8, i8* %v1_124f8, align 1
  %v5_124f8 = add i32 %v0_124f8.pre, 1
  store i32 %v5_124f8, i32* %r1.global-to-local, align 4
  %v2_124fc = icmp eq i8 %v2_124f8, 0
  store i1 %v2_124fc, i1* %cpsr_z.global-to-local, align 1
  %v4_12500 = add i32 %v5_124f8, %v3_12500.pre
  %v5_12500 = inttoptr i32 %v4_12500 to i8*
  store i8 %v2_124f8, i8* %v5_12500, align 1
  %v0_12504 = load i1, i1* %cpsr_z.global-to-local, align 1
  br i1 %v0_12504, label %dec_label_pc_12508, label %dec_label_pc_124f8.dec_label_pc_124f8_crit_edge

dec_label_pc_12508:                               ; preds = %dec_label_pc_124f8.dec_label_pc_124f8_crit_edge, %dec_label_pc_124f0
  ret i32 %arg1

; uselistorder directives
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_124f8.dec_label_pc_124f8_crit_edge, { 1, 0 }
}

define i32 @function_1250c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1250c:
  %stack_var_-8 = alloca i32, align 4
  %v2_12510 = ptrtoint i32* %stack_var_-8 to i32
  store i32 %v2_12510, i32* @r1, align 4
  %v0_12518 = call i32 @function_14500()
  %v2_1251c = icmp eq i32 %v0_12518, 0
  br i1 %v2_1251c, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_1250c
  %v3_12524 = load i32, i32* %stack_var_-8, align 4
  br label %bb4

bb4:                                              ; preds = %dec_label_pc_1250c, %bb
  %v5_1252c = phi i32 [ -1, %dec_label_pc_1250c ], [ %v3_12524, %bb ]
  ret i32 %v5_1252c

; uselistorder directives
  uselistorder label %bb4, { 1, 0 }
}

define i32 @function_12530(i32 %arg1, %sockaddr* %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_12530:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12530 = load i32, i32* @r4, align 4
  store i32 %v3_12530, i32* %stack_var_-8, align 4
  %v5_12534 = inttoptr i32 %arg3 to i32*
  %v6_12534 = call i32 @accept(i32 %arg1, %sockaddr* %arg2, i32* %v5_12534)
  store i32 %v6_12534, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_12534, -4095
  br i1 %tmp, label %dec_label_pc_12554, label %dec_label_pc_12544

dec_label_pc_12544:                               ; preds = %dec_label_pc_12530
  %v0_12544 = call i32 @function_123ec()
  %v0_12548 = load i32, i32* %r4.global-to-local, align 4
  %v1_12548 = sub i32 0, %v0_12548
  %v2_1254c = inttoptr i32 %v0_12544 to i32*
  store i32 %v1_12548, i32* %v2_1254c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12554

dec_label_pc_12554:                               ; preds = %dec_label_pc_12530, %dec_label_pc_12544
  %v0_12554 = phi i32 [ %v6_12534, %dec_label_pc_12530 ], [ -1, %dec_label_pc_12544 ]
  %v2_12558 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12558, i32* @r4, align 4
  ret i32 %v0_12554

; uselistorder directives
  uselistorder i32 %v6_12534, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12554, { 1, 0 }
}

define i32 @function_1255c(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1255c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1255c = load i32, i32* @r4, align 4
  store i32 %v3_1255c, i32* %stack_var_-8, align 4
  %v5_12560 = call i32 @bind(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_12560, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12560, -4095
  br i1 %tmp, label %dec_label_pc_12580, label %dec_label_pc_12570

dec_label_pc_12570:                               ; preds = %dec_label_pc_1255c
  %v0_12570 = call i32 @function_123ec()
  %v0_12574 = load i32, i32* %r4.global-to-local, align 4
  %v1_12574 = sub i32 0, %v0_12574
  %v2_12578 = inttoptr i32 %v0_12570 to i32*
  store i32 %v1_12574, i32* %v2_12578, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12580

dec_label_pc_12580:                               ; preds = %dec_label_pc_1255c, %dec_label_pc_12570
  %v0_12580 = phi i32 [ %v5_12560, %dec_label_pc_1255c ], [ -1, %dec_label_pc_12570 ]
  %v2_12584 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12584, i32* @r4, align 4
  ret i32 %v0_12580

; uselistorder directives
  uselistorder i32 %v5_12560, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12580, { 1, 0 }
}

define i32 @function_12588(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12588:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12588 = load i32, i32* @r4, align 4
  store i32 %v3_12588, i32* %stack_var_-8, align 4
  %v5_1258c = call i32 @connect(i32 %arg1, %sockaddr* %arg2, i32 %arg3)
  store i32 %v5_1258c, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_1258c, -4095
  br i1 %tmp, label %dec_label_pc_125ac, label %dec_label_pc_1259c

dec_label_pc_1259c:                               ; preds = %dec_label_pc_12588
  %v0_1259c = call i32 @function_123ec()
  %v0_125a0 = load i32, i32* %r4.global-to-local, align 4
  %v1_125a0 = sub i32 0, %v0_125a0
  %v2_125a4 = inttoptr i32 %v0_1259c to i32*
  store i32 %v1_125a0, i32* %v2_125a4, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125ac

dec_label_pc_125ac:                               ; preds = %dec_label_pc_12588, %dec_label_pc_1259c
  %v0_125ac = phi i32 [ %v5_1258c, %dec_label_pc_12588 ], [ -1, %dec_label_pc_1259c ]
  %v2_125b0 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125b0, i32* @r4, align 4
  ret i32 %v0_125ac

; uselistorder directives
  uselistorder i32 %v5_1258c, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125ac, { 1, 0 }
}

define i32 @function_125b4(i32 %arg1, %sockaddr* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_125b4:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125b4 = load i32, i32* @r4, align 4
  store i32 %v3_125b4, i32* %stack_var_-8, align 4
  %v5_125b8 = inttoptr i32 %arg3 to i32*
  %v6_125b8 = call i32 @getsockname(i32 %arg1, %sockaddr* %arg2, i32* %v5_125b8)
  store i32 %v6_125b8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v6_125b8, -4095
  br i1 %tmp, label %dec_label_pc_125d8, label %dec_label_pc_125c8

dec_label_pc_125c8:                               ; preds = %dec_label_pc_125b4
  %v0_125c8 = call i32 @function_123ec()
  %v0_125cc = load i32, i32* %r4.global-to-local, align 4
  %v1_125cc = sub i32 0, %v0_125cc
  %v2_125d0 = inttoptr i32 %v0_125c8 to i32*
  store i32 %v1_125cc, i32* %v2_125d0, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_125d8

dec_label_pc_125d8:                               ; preds = %dec_label_pc_125b4, %dec_label_pc_125c8
  %v0_125d8 = phi i32 [ %v6_125b8, %dec_label_pc_125b4 ], [ -1, %dec_label_pc_125c8 ]
  %v2_125dc = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_125dc, i32* @r4, align 4
  ret i32 %v0_125d8

; uselistorder directives
  uselistorder i32 %v6_125b8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_125d8, { 1, 0 }
}

define i32 @function_125e0(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_125e0:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_125e0 = load i32, i32* @r4, align 4
  store i32 %v3_125e0, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_125e8 = call i32 @getsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32* null)
  store i32 %v5_125e8, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_125e8, -4095
  br i1 %tmp, label %dec_label_pc_12608, label %dec_label_pc_125f8

dec_label_pc_125f8:                               ; preds = %dec_label_pc_125e0
  %v0_125f8 = call i32 @function_123ec()
  %v0_125fc = load i32, i32* %r4.global-to-local, align 4
  %v1_125fc = sub i32 0, %v0_125fc
  %v2_12600 = inttoptr i32 %v0_125f8 to i32*
  store i32 %v1_125fc, i32* %v2_12600, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12608

dec_label_pc_12608:                               ; preds = %dec_label_pc_125e0, %dec_label_pc_125f8
  %v0_12608 = phi i32 [ %v5_125e8, %dec_label_pc_125e0 ], [ -1, %dec_label_pc_125f8 ]
  %v2_1260c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_1260c, i32* @r4, align 4
  ret i32 %v0_12608

; uselistorder directives
  uselistorder i32 %v5_125e8, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12608, { 1, 0 }
}

define i32 @function_12610(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12610:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_12610 = load i32, i32* @r4, align 4
  store i32 %v3_12610, i32* %stack_var_-8, align 4
  %v2_12614 = call i32 @listen(i32 %arg1, i32 %arg2)
  store i32 %v2_12614, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v2_12614, -4095
  br i1 %tmp, label %dec_label_pc_12634, label %dec_label_pc_12624

dec_label_pc_12624:                               ; preds = %dec_label_pc_12610
  %v0_12624 = call i32 @function_123ec()
  %v0_12628 = load i32, i32* %r4.global-to-local, align 4
  %v1_12628 = sub i32 0, %v0_12628
  %v2_1262c = inttoptr i32 %v0_12624 to i32*
  store i32 %v1_12628, i32* %v2_1262c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12634

dec_label_pc_12634:                               ; preds = %dec_label_pc_12610, %dec_label_pc_12624
  %v0_12634 = phi i32 [ %v2_12614, %dec_label_pc_12610 ], [ -1, %dec_label_pc_12624 ]
  %v2_12638 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12638, i32* @r4, align 4
  ret i32 %v0_12634

; uselistorder directives
  uselistorder i32 %v2_12614, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12634, { 1, 0 }
}

define i32 @function_1263c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1263c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1263c = load i32, i32* @r4, align 4
  store i32 %v3_1263c, i32* %stack_var_-8, align 4
  %v5_12640 = call i32 @recv(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_12640, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12640, -4095
  br i1 %tmp, label %dec_label_pc_12660, label %dec_label_pc_12650

dec_label_pc_12650:                               ; preds = %dec_label_pc_1263c
  %v0_12650 = call i32 @function_123ec()
  %v0_12654 = load i32, i32* %r4.global-to-local, align 4
  %v1_12654 = sub i32 0, %v0_12654
  %v2_12658 = inttoptr i32 %v0_12650 to i32*
  store i32 %v1_12654, i32* %v2_12658, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12660

dec_label_pc_12660:                               ; preds = %dec_label_pc_1263c, %dec_label_pc_12650
  %v0_12660 = phi i32 [ %v5_12640, %dec_label_pc_1263c ], [ -1, %dec_label_pc_12650 ]
  %v2_12664 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12664, i32* @r4, align 4
  ret i32 %v0_12660

; uselistorder directives
  uselistorder i32 %v5_12640, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12660, { 1, 0 }
}

define i32 @function_12668(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_12668:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_12668 = load i32, i32* @r4, align 4
  store i32 %v3_12668, i32* %stack_var_-12, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12674 = call i32 @recvfrom(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32* null)
  store i32 %v5_12674, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12674, -4095
  br i1 %tmp, label %dec_label_pc_12694, label %dec_label_pc_12684

dec_label_pc_12684:                               ; preds = %dec_label_pc_12668
  %v0_12684 = call i32 @function_123ec()
  %v0_12688 = load i32, i32* %r4.global-to-local, align 4
  %v1_12688 = sub i32 0, %v0_12688
  %v2_1268c = inttoptr i32 %v0_12684 to i32*
  store i32 %v1_12688, i32* %v2_1268c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12694

dec_label_pc_12694:                               ; preds = %dec_label_pc_12668, %dec_label_pc_12684
  %v0_12694 = phi i32 [ %v5_12674, %dec_label_pc_12668 ], [ -1, %dec_label_pc_12684 ]
  %v2_12698 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12698, i32* @r4, align 4
  ret i32 %v0_12694

; uselistorder directives
  uselistorder i32 %v5_12674, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12694, { 1, 0 }
}

define i32 @function_1269c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1269c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1269c = load i32, i32* @r4, align 4
  store i32 %v3_1269c, i32* %stack_var_-8, align 4
  %v5_126a0 = call i32 @send(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4)
  store i32 %v5_126a0, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_126a0, -4095
  br i1 %tmp, label %dec_label_pc_126c0, label %dec_label_pc_126b0

dec_label_pc_126b0:                               ; preds = %dec_label_pc_1269c
  %v0_126b0 = call i32 @function_123ec()
  %v0_126b4 = load i32, i32* %r4.global-to-local, align 4
  %v1_126b4 = sub i32 0, %v0_126b4
  %v2_126b8 = inttoptr i32 %v0_126b0 to i32*
  store i32 %v1_126b4, i32* %v2_126b8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126c0

dec_label_pc_126c0:                               ; preds = %dec_label_pc_1269c, %dec_label_pc_126b0
  %v0_126c0 = phi i32 [ %v5_126a0, %dec_label_pc_1269c ], [ -1, %dec_label_pc_126b0 ]
  %v2_126c4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_126c4, i32* @r4, align 4
  ret i32 %v0_126c0

; uselistorder directives
  uselistorder i32 %v5_126a0, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126c0, { 1, 0 }
}

define i32 @function_126c8(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_126c8:
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_126d4 = call i32 @sendto(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4, %sockaddr* null, i32 0)
  store i32 %v5_126d4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_126d4, -4095
  br i1 %tmp, label %dec_label_pc_126f4, label %dec_label_pc_126e4

dec_label_pc_126e4:                               ; preds = %dec_label_pc_126c8
  %v0_126e4 = call i32 @function_123ec()
  %v0_126e8 = load i32, i32* %r4.global-to-local, align 4
  %v1_126e8 = sub i32 0, %v0_126e8
  %v2_126ec = inttoptr i32 %v0_126e4 to i32*
  store i32 %v1_126e8, i32* %v2_126ec, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_126f4

dec_label_pc_126f4:                               ; preds = %dec_label_pc_126c8, %dec_label_pc_126e4
  %v0_126f4 = phi i32 [ %v5_126d4, %dec_label_pc_126c8 ], [ -1, %dec_label_pc_126e4 ]
  ret i32 %v0_126f4

; uselistorder directives
  uselistorder i32 %v5_126d4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_126f4, { 1, 0 }
}

define i32 @function_126fc(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_126fc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_126fc = load i32, i32* @r4, align 4
  store i32 %v3_126fc, i32* %stack_var_-8, align 4
  store i32 %arg5, i32* %r4.global-to-local, align 4
  %v5_12704 = call i32 @setsockopt(i32 %arg1, i32 %arg2, i32 %arg3, i32* %arg4, i32 0)
  store i32 %v5_12704, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_12704, -4095
  br i1 %tmp, label %dec_label_pc_12724, label %dec_label_pc_12714

dec_label_pc_12714:                               ; preds = %dec_label_pc_126fc
  %v0_12714 = call i32 @function_123ec()
  %v0_12718 = load i32, i32* %r4.global-to-local, align 4
  %v1_12718 = sub i32 0, %v0_12718
  %v2_1271c = inttoptr i32 %v0_12714 to i32*
  store i32 %v1_12718, i32* %v2_1271c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12724

dec_label_pc_12724:                               ; preds = %dec_label_pc_126fc, %dec_label_pc_12714
  %v0_12724 = phi i32 [ %v5_12704, %dec_label_pc_126fc ], [ -1, %dec_label_pc_12714 ]
  %v2_12728 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12728, i32* @r4, align 4
  ret i32 %v0_12724

; uselistorder directives
  uselistorder i32 %v5_12704, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12724, { 1, 0 }
}

define i32 @function_1272c(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1272c:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_1272c = load i32, i32* @r4, align 4
  store i32 %v3_1272c, i32* %stack_var_-8, align 4
  %v3_12730 = call i32 @socket(i32 %arg1, i32 %arg2, i32 %arg3)
  store i32 %v3_12730, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_12730, -4095
  br i1 %tmp, label %dec_label_pc_12750, label %dec_label_pc_12740

dec_label_pc_12740:                               ; preds = %dec_label_pc_1272c
  %v0_12740 = call i32 @function_123ec()
  %v0_12744 = load i32, i32* %r4.global-to-local, align 4
  %v1_12744 = sub i32 0, %v0_12744
  %v2_12748 = inttoptr i32 %v0_12740 to i32*
  store i32 %v1_12744, i32* %v2_12748, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12750

dec_label_pc_12750:                               ; preds = %dec_label_pc_1272c, %dec_label_pc_12740
  %v0_12750 = phi i32 [ %v3_12730, %dec_label_pc_1272c ], [ -1, %dec_label_pc_12740 ]
  %v2_12754 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12754, i32* @r4, align 4
  ret i32 %v0_12750

; uselistorder directives
  uselistorder i32 %v3_12730, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12750, { 1, 0 }
}

define i32 @function_12758(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12758:
  store i32 %arg1, i32* @r1, align 4
  %tmp2 = icmp slt i32 %arg1, 1
  br i1 %tmp2, label %dec_label_pc_12774, label %dec_label_pc_12764

dec_label_pc_12764:                               ; preds = %dec_label_pc_12758
  %v8_12768 = icmp sgt i32 %arg1, 64
  br i1 %v8_12768, label %dec_label_pc_12774, label %dec_label_pc_1276c

dec_label_pc_1276c:                               ; preds = %dec_label_pc_12764
  %v0_12770 = call i32 @function_1287c()
  br label %dec_label_pc_12774

dec_label_pc_12774:                               ; preds = %dec_label_pc_12764, %dec_label_pc_12758, %dec_label_pc_1276c
  %v0_12774 = call i32 @function_123ec()
  %v2_1277c = inttoptr i32 %v0_12774 to i32*
  store i32 22, i32* %v2_1277c, align 4
  ret i32 -1

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_12774, { 2, 0, 1 }
}

define i32 @function_12788(i32 %arg1) local_unnamed_addr {
dec_label_pc_12788:
  store i32 128, i32* @r2, align 4
  %v0_12794 = load i32, i32* @r0, align 4
  %v2_12794 = inttoptr i32 %v0_12794 to i8*
  %v3_12794 = call i32 @function_12450(i8* %v2_12794, i32 0)
  ret i32 0
}

define i32 @function_127a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_127a0:
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-292 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_127a0 = load i32, i32* @r4, align 4
  store i32 %v3_127a0, i32* %stack_var_-12, align 4
  %v6_127a0 = load i32, i32* @r5, align 4
  %v10_127a0 = ptrtoint i32* %stack_var_-12 to i32
  %v7_127a4 = icmp eq i32 %arg2, -1
  %v0_127b0.pre = load i32, i32* %r0.global-to-local, align 4
  br i1 %v7_127a4, label %.thread, label %bb

.thread:                                          ; preds = %dec_label_pc_127a0
  br label %dec_label_pc_127c8

bb:                                               ; preds = %dec_label_pc_127a0
  %v2_127ac = ptrtoint i32* %stack_var_-292 to i32
  store i32 %v0_127b0.pre, i32* @r4, align 4
  %tmp19 = icmp slt i32 %v0_127b0.pre, 1
  br i1 %tmp19, label %dec_label_pc_127c8, label %dec_label_pc_127b8

dec_label_pc_127b8:                               ; preds = %bb
  %v7_127bc = icmp sgt i32 %v0_127b0.pre, 64
  br i1 %v7_127bc, label %dec_label_pc_127c8, label %bb20

bb20:                                             ; preds = %dec_label_pc_127b8
  store i32 %arg2, i32* %stack_var_-152, align 4
  store i32 31, i32* %r0.global-to-local, align 4
  %v5_127ec24 = add i32 %v10_127a0, 124
  store i32 %v5_127ec24, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_127dc

dec_label_pc_127c8:                               ; preds = %.thread, %dec_label_pc_127b8, %bb
  %v0_127c8 = call i32 @function_123ec()
  store i32 %v0_127c8, i32* %r0.global-to-local, align 4
  store i32 -1, i32* %r2.global-to-local, align 4
  %v2_127d4 = inttoptr i32 %v0_127c8 to i32*
  store i32 22, i32* %v2_127d4, align 4
  %v0_12848.pre = load i32, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12848

dec_label_pc_127dc:                               ; preds = %bb20, %dec_label_pc_127dc
  %v5_127ec25 = phi i32 [ %v5_127ec24, %bb20 ], [ %v5_127ec, %dec_label_pc_127dc ]
  %v2_127e0 = add i32 %v5_127ec25, -136
  %v3_127e0 = inttoptr i32 %v2_127e0 to i32*
  store i32 0, i32* %v3_127e0, align 4
  %v0_127e4.pre = load i32, i32* %r0.global-to-local, align 4
  %v1_127e4 = add i32 %v0_127e4.pre, -1
  store i32 %v1_127e4, i32* %r0.global-to-local, align 4
  %v6_127e4 = icmp slt i32 %v1_127e4, 0
  %v4_127ec = mul i32 %v1_127e4, 4
  %v5_127ec = add i32 %v4_127ec, %v10_127a0
  store i32 %v5_127ec, i32* %r2.global-to-local, align 4
  br i1 %v6_127e4, label %dec_label_pc_127f4, label %dec_label_pc_127dc

dec_label_pc_127f4:                               ; preds = %dec_label_pc_127dc
  %v2_127f4 = ptrtoint i32* %stack_var_-152 to i32
  store i32 %v2_127f4, i32* @r5, align 4
  %v2_127f8 = ptrtoint i32* %stack_var_-148 to i32
  store i32 %v2_127f8, i32* @r0, align 4
  %v0_127fc = load i32, i32* @r4, align 4
  store i32 %v0_127fc, i32* @r1, align 4
  %v0_12800 = call i32 @function_1287c()
  store i32 %v0_12800, i32* %r0.global-to-local, align 4
  %v1_12804 = icmp slt i32 %v0_12800, 0
  br i1 %v1_12804, label %dec_label_pc_12844, label %dec_label_pc_1280c

dec_label_pc_1280c:                               ; preds = %dec_label_pc_127f4
  %v0_1280c = load i32, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d388.410 to i32), i32* %r0.global-to-local, align 4
  %v2_12814 = call i32 @function_12858(i32 ptrtoint (i32* @global_var_1d388.410 to i32), i32 %v0_1280c)
  store i32 %v2_127ac, i32* %r2.global-to-local, align 4
  %v0_1282c = load i32, i32* @r4, align 4
  store i32 %v0_1282c, i32* %r0.global-to-local, align 4
  %v4_12834 = call i32 @function_13744(i32 %v0_1282c, i32* nonnull %stack_var_-152, i32 %v2_127ac)
  store i32 %v4_12834, i32* %r0.global-to-local, align 4
  %v1_12838 = icmp slt i32 %v4_12834, 0
  br i1 %v1_12838, label %dec_label_pc_12844, label %bb23

bb23:                                             ; preds = %dec_label_pc_1280c
  %v5_1283c = load i32, i32* %stack_var_-292, align 4
  store i32 %v5_1283c, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12848

dec_label_pc_12844:                               ; preds = %dec_label_pc_1280c, %dec_label_pc_127f4
  store i32 -1, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12848

dec_label_pc_12848:                               ; preds = %bb23, %dec_label_pc_127c8, %dec_label_pc_12844
  %v0_12848 = phi i32 [ %v5_1283c, %bb23 ], [ %v0_12848.pre, %dec_label_pc_127c8 ], [ -1, %dec_label_pc_12844 ]
  store i32 %v0_12848, i32* %r0.global-to-local, align 4
  %v2_12850 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12850, i32* @r4, align 4
  store i32 %v6_127a0, i32* @r5, align 4
  ret i32 %v0_12848

; uselistorder directives
  uselistorder i32 %v0_12848, { 1, 0 }
  uselistorder i32 %v5_127ec, { 1, 0 }
  uselistorder i32 %v1_127e4, { 0, 2, 1 }
  uselistorder i32 %v2_127ac, { 1, 0 }
  uselistorder i32 %v0_127b0.pre, { 1, 0, 2 }
  uselistorder i32 %v10_127a0, { 1, 0 }
  uselistorder i32* %stack_var_-12, { 0, 2, 1 }
  uselistorder i32* %stack_var_-152, { 0, 2, 1 }
  uselistorder i32* %r0.global-to-local, { 2, 4, 3, 5, 7, 6, 9, 8, 10, 0, 1 }
  uselistorder i32 %arg2, { 1, 0 }
  uselistorder label %dec_label_pc_12848, { 2, 0, 1 }
  uselistorder label %dec_label_pc_127dc, { 1, 0 }
  uselistorder label %dec_label_pc_127c8, { 1, 2, 0 }
}

define i32 @function_12858(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12858:
  %v1_12858 = add i32 %arg2, -1
  %v3_1285c = udiv i32 %v1_12858, 32
  %v4_12860 = mul nuw nsw i32 %v3_1285c, 4
  %v5_12860 = add i32 %v4_12860, %arg1
  %v6_12860 = inttoptr i32 %v5_12860 to i32*
  %v7_12860 = load i32, i32* %v6_12860, align 4
  %v1_12864 = urem i32 %v1_12858, 32
  %v7_1286c = shl i32 1, %v1_12864
  %v8_1286c = and i32 %v7_12860, %v7_1286c
  %v10_1286c = icmp ne i32 %v8_1286c, 0
  %. = zext i1 %v10_1286c to i32
  ret i32 %.

; uselistorder directives
  uselistorder i32 %v1_12858, { 1, 0 }
}

define i32 @function_1287c() local_unnamed_addr {
dec_label_pc_1287c:
  %v0_1287c = load i32, i32* @r1, align 4
  %v1_1287c = add i32 %v0_1287c, -1
  %v3_12880 = udiv i32 %v1_1287c, 32
  store i32 %v3_12880, i32* @ip, align 4
  %v0_12884 = load i32, i32* @r0, align 4
  %v4_12884 = mul nuw nsw i32 %v3_12880, 4
  %v5_12884 = add i32 %v0_12884, %v4_12884
  %v6_12884 = inttoptr i32 %v5_12884 to i32*
  %v7_12884 = load i32, i32* %v6_12884, align 4
  %v1_12888 = urem i32 %v1_1287c, 32
  %v7_12890 = shl i32 1, %v1_12888
  %v8_12890 = or i32 %v7_12884, %v7_12890
  store i32 %v8_12890, i32* %v6_12884, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12880, { 1, 0 }
  uselistorder i32 %v1_1287c, { 1, 0 }
}

define i32 @function_128a0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_128a0:
  %v1_128a0 = add i32 %arg2, -1
  %v3_128a4 = udiv i32 %v1_128a0, 32
  %v4_128a8 = mul nuw nsw i32 %v3_128a4, 4
  %v5_128a8 = add i32 %v4_128a8, %arg1
  %v6_128a8 = inttoptr i32 %v5_128a8 to i32*
  %v7_128a8 = load i32, i32* %v6_128a8, align 4
  %v1_128ac = urem i32 %v1_128a0, 32
  %tmp = shl i32 -1, %v1_128ac
  %v8_128b4 = add i32 %tmp, -1
  %v9_128b4 = and i32 %v7_128a8, %v8_128b4
  store i32 %v9_128b4, i32* %v6_128a8, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v1_128a0, { 1, 0 }
}

define i32 @function_128c4(i32 %arg1) local_unnamed_addr {
dec_label_pc_128c4:
  %r0.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_128c4 = load i32, i32* @r4, align 4
  %v6_128c4 = load i32, i32* @r5, align 4
  %v9_128c4 = load i32, i32* @r6, align 4
  %v0_128c8 = load i32, i32* %r0.global-to-local, align 4
  %v2_128c8 = icmp eq i32 %v0_128c8, 0
  %v2_128cc = ptrtoint i32* %stack_var_-20 to i32
  br i1 %v2_128c8, label %bb, label %dec_label_pc_128d8

bb:                                               ; preds = %dec_label_pc_128c4
  store i32 1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_128e0

dec_label_pc_128d8:                               ; preds = %dec_label_pc_128c4
  %tmp = icmp ugt i32 %v0_128c8, -8
  br i1 %tmp, label %dec_label_pc_129e4, label %dec_label_pc_128e0

dec_label_pc_128e0:                               ; preds = %bb, %dec_label_pc_128d8
  %v0_128e0 = phi i32 [ %v0_128c8, %dec_label_pc_128d8 ], [ 1, %bb ]
  %v1_128e0 = add i32 %v0_128e0, 4
  store i32 %v1_128e0, i32* %stack_var_-20, align 4
  store i32 %v2_128cc, i32* @r4, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.412 to i32), i32* %r0.global-to-local, align 4
  %v1_128f8 = call i32 @function_13458()
  store i32 ptrtoint (i32** @global_var_1d034.416 to i32), i32* %r0.global-to-local, align 4
  %v3_12904 = call i32 @function_12c78(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v2_128cc)
  store i32 %v3_12904, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.412 to i32), i32* %r0.global-to-local, align 4
  store i32 76060, i32* @lr, align 4
  %v1_12918 = call i32 @function_13458()
  store i32 %v1_12918, i32* %r0.global-to-local, align 4
  %v2_1291c = icmp eq i32 %v3_12904, 0
  br i1 %v2_1291c, label %dec_label_pc_12924, label %dec_label_pc_129d4

dec_label_pc_12924:                               ; preds = %dec_label_pc_128e0
  %v2_12928 = load i32, i32* @global_var_1d218.419, align 4
  store i32 %v2_12928, i32* @r4, align 4
  %v2_1292c = load i32, i32* %stack_var_-20, align 4
  %v3_12930 = icmp ult i32 %v2_1292c, %v2_12928
  br i1 %v3_12930, label %.thread3, label %bb14

bb14:                                             ; preds = %dec_label_pc_12924
  %v3_12934 = add i32 %v2_12928, -1
  %v2_12938 = add i32 %v3_12934, %v2_1292c
  %v2_1293c = sub i32 0, %v2_12928
  %v3_12940 = and i32 %v2_12938, %v2_1293c
  store i32 %v3_12940, i32* @r4, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12924, %bb14
  store i32 ptrtoint (i32* @global_var_1d408.421 to i32), i32* %r0.global-to-local, align 4
  %v1_1294c = call i32 @function_13458()
  %v0_12950 = load i32, i32* @r4, align 4
  store i32 %v0_12950, i32* %r0.global-to-local, align 4
  %v1_12954 = call i32 @function_13c0c(i32 %v0_12950)
  store i32 %v1_12954, i32* %r0.global-to-local, align 4
  %v7_12958 = icmp eq i32 %v1_12954, -1
  br i1 %v7_12958, label %bb15, label %dec_label_pc_12964

bb15:                                             ; preds = %.thread3
  store i32 %v1_12954, i32* @r5, align 4
  br label %dec_label_pc_12978

dec_label_pc_12964:                               ; preds = %.thread3
  %v1_12964 = add i32 %v1_12954, 3
  %v1_12968 = and i32 %v1_12964, -4
  store i32 %v1_12968, i32* @r5, align 4
  %v9_1296c = icmp eq i32 %v1_12968, %v1_12954
  br i1 %v9_1296c, label %bb17, label %bb16

bb16:                                             ; preds = %dec_label_pc_12964
  %v3_12970 = sub i32 %v1_12968, %v1_12954
  store i32 %v3_12970, i32* %r0.global-to-local, align 4
  br label %bb17

bb17:                                             ; preds = %dec_label_pc_12964, %bb16
  %v1_12974 = xor i1 %v9_1296c, true
  call void @__pseudo_cond_branch(i1 %v1_12974, i32 ptrtoint (i32* @global_var_13c0c.422 to i32))
  br label %dec_label_pc_12978

dec_label_pc_12978:                               ; preds = %bb15, %bb17
  store i32 ptrtoint (i32* @global_var_1d408.421 to i32), i32* %r0.global-to-local, align 4
  store i32 76168, i32* @lr, align 4
  %v1_12984 = call i32 @function_13458()
  store i32 %v1_12984, i32* %r0.global-to-local, align 4
  %v0_12988 = load i32, i32* @r5, align 4
  %v7_12988 = icmp eq i32 %v0_12988, -1
  br i1 %v7_12988, label %dec_label_pc_129e4, label %dec_label_pc_12990

dec_label_pc_12990:                               ; preds = %dec_label_pc_12978
  store i32 ptrtoint (i32* @global_var_1d1f0.412 to i32), i32* %r0.global-to-local, align 4
  %v1_1299c = call i32 @function_13458()
  %v0_129a0 = load i32, i32* @r4, align 4
  %v0_129a4 = load i32, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d034.416 to i32), i32* %r0.global-to-local, align 4
  %v4_129ac = call i32 @function_12dcc(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v0_129a4, i32 %v0_129a0)
  store i32 ptrtoint (i32** @global_var_1d034.416 to i32), i32* %r0.global-to-local, align 4
  %v3_129b8 = call i32 @function_12c78(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v2_128cc)
  store i32 %v3_129b8, i32* %r4.global-to-local, align 4
  store i32 ptrtoint (i32* @global_var_1d1f0.412 to i32), i32* %r0.global-to-local, align 4
  store i32 76236, i32* @lr, align 4
  %v1_129c8 = call i32 @function_13458()
  store i32 %v1_129c8, i32* %r0.global-to-local, align 4
  %v2_129cc = icmp eq i32 %v3_129b8, 0
  br i1 %v2_129cc, label %dec_label_pc_129e4, label %dec_label_pc_129d4

dec_label_pc_129d4:                               ; preds = %dec_label_pc_128e0, %dec_label_pc_12990
  %v1_129d8 = phi i32 [ %v3_12904, %dec_label_pc_128e0 ], [ %v3_129b8, %dec_label_pc_12990 ]
  %v2_129d4 = load i32, i32* %stack_var_-20, align 4
  %v2_129d8 = inttoptr i32 %v1_129d8 to i32*
  store i32 %v2_129d4, i32* %v2_129d8, align 4
  %v3_129d8 = load i32, i32* %r4.global-to-local, align 4
  %v4_129d8 = add i32 %v3_129d8, 4
  store i32 %v4_129d8, i32* %r4.global-to-local, align 4
  %v2_129dc = icmp eq i32 %v4_129d8, 0
  br i1 %v2_129dc, label %dec_label_pc_129e4, label %dec_label_pc_129f4

dec_label_pc_129e4:                               ; preds = %dec_label_pc_129d4, %dec_label_pc_12990, %dec_label_pc_12978, %dec_label_pc_128d8
  %v0_129e4 = call i32 @function_123ec()
  store i32 %v0_129e4, i32* %r0.global-to-local, align 4
  %v2_129ec = inttoptr i32 %v0_129e4 to i32*
  store i32 12, i32* %v2_129ec, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_129f4

dec_label_pc_129f4:                               ; preds = %dec_label_pc_129d4, %dec_label_pc_129e4
  %v0_129f4 = phi i32 [ %v4_129d8, %dec_label_pc_129d4 ], [ 0, %dec_label_pc_129e4 ]
  store i32 %v0_129f4, i32* %r0.global-to-local, align 4
  store i32 %v3_128c4, i32* @r4, align 4
  store i32 %v6_128c4, i32* @r5, align 4
  store i32 %v9_128c4, i32* @r6, align 4
  ret i32 %v0_129f4

; uselistorder directives
  uselistorder i32 %v0_129f4, { 1, 0 }
  uselistorder i32 %v3_129b8, { 1, 0, 2 }
  uselistorder i32 %v1_12968, { 1, 0, 2 }
  uselistorder i32 %v1_12954, { 2, 0, 3, 4, 1, 5 }
  uselistorder i32 %v3_12904, { 1, 0, 2 }
  uselistorder i32 %v0_128c8, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32* %r0.global-to-local, { 6, 8, 2, 7, 9, 10, 11, 3, 13, 12, 5, 15, 14, 4, 16, 17, 18, 19, 0, 1 }
  uselistorder label %dec_label_pc_129f4, { 1, 0 }
  uselistorder label %dec_label_pc_129d4, { 1, 0 }
  uselistorder label %dec_label_pc_12978, { 1, 0 }
  uselistorder label %bb17, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_128e0, { 1, 0 }
}

define i32 @function_12a18(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12a18:
  %stack_var_-12 = alloca i32, align 4
  %v3_12a18 = load i32, i32* @r4, align 4
  store i32 %v3_12a18, i32* %stack_var_-12, align 4
  %v6_12a18 = load i32, i32* @r5, align 4
  store i32 %arg2, i32* @r5, align 4
  %v2_12a20 = mul i32 %arg2, %arg1
  store i32 %v2_12a20, i32* @r4, align 4
  store i32 %arg1, i32* @r1, align 4
  %v2_12a24 = icmp eq i32 %arg1, 0
  store i32 %v2_12a20, i32* @r0, align 4
  br i1 %v2_12a24, label %dec_label_pc_12a50, label %dec_label_pc_12a30

dec_label_pc_12a30:                               ; preds = %dec_label_pc_12a18
  %v0_12a30 = call i32 @function_11a90()
  %v0_12a34 = load i32, i32* @r5, align 4
  %v9_12a34 = icmp eq i32 %v0_12a34, %v0_12a30
  store i32 0, i32* @r5, align 4
  br i1 %v9_12a34, label %dec_label_pc_12a30.dec_label_pc_12a50_crit_edge, label %dec_label_pc_12a40

dec_label_pc_12a30.dec_label_pc_12a50_crit_edge:  ; preds = %dec_label_pc_12a30
  %v0_12a50.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12a50

dec_label_pc_12a40:                               ; preds = %dec_label_pc_12a30
  %v0_12a40 = call i32 @function_123ec()
  %v2_12a48 = inttoptr i32 %v0_12a40 to i32*
  store i32 12, i32* %v2_12a48, align 4
  br label %dec_label_pc_12a68

dec_label_pc_12a50:                               ; preds = %dec_label_pc_12a30.dec_label_pc_12a50_crit_edge, %dec_label_pc_12a18
  %v0_12a50 = phi i32 [ %v0_12a50.pre, %dec_label_pc_12a30.dec_label_pc_12a50_crit_edge ], [ %v2_12a20, %dec_label_pc_12a18 ]
  %v1_12a54 = call i32 @function_128c4(i32 %v0_12a50)
  store i32 %v1_12a54, i32* @r5, align 4
  store i32 76392, i32* @lr, align 4
  %v1_12a64 = icmp ne i32 %v1_12a54, 0
  call void @__pseudo_cond_branch(i1 %v1_12a64, i32 ptrtoint (i32* @global_var_12450.423 to i32))
  br label %dec_label_pc_12a68

dec_label_pc_12a68:                               ; preds = %dec_label_pc_12a40, %dec_label_pc_12a50
  %v0_12a68 = load i32, i32* @r5, align 4
  %v2_12a6c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_12a6c, i32* @r4, align 4
  store i32 %v6_12a18, i32* @r5, align 4
  ret i32 %v0_12a68

; uselistorder directives
  uselistorder i32 %arg1, { 2, 1, 0 }
  uselistorder label %dec_label_pc_12a68, { 1, 0 }
}

define i32 @function_12a70() local_unnamed_addr {
dec_label_pc_12a70:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %v0_12a70 = load i32, i32* @r0, align 4
  %v2_12a70 = icmp eq i32 %v0_12a70, 0
  %v3_12a74 = load i32, i32* @r4, align 4
  store i32 %v3_12a74, i32* %stack_var_-24, align 4
  %v6_12a74 = load i32, i32* @r5, align 4
  %v9_12a74 = load i32, i32* @r6, align 4
  %v15_12a74 = load i32, i32* @r8, align 4
  br i1 %v2_12a70, label %bb, label %bb11

bb:                                               ; preds = %dec_label_pc_12a70
  ret i32 0

bb11:                                             ; preds = %dec_label_pc_12a70
  %v1_12a7c = add i32 %v0_12a70, -4
  %v2_12a7c = inttoptr i32 %v1_12a7c to i32*
  %v3_12a7c = load i32, i32* %v2_12a7c, align 4
  store i32 %v3_12a7c, i32* @r5, align 4
  store i32 ptrtoint (i32** @global_var_1d034.416 to i32), i32* %r8.global-to-local, align 4
  store i32 %v1_12a7c, i32* @r4, align 4
  %v1_12a94 = call i32 @function_13458()
  %v0_12a98 = load i32, i32* @r4, align 4
  %v0_12a9c = load i32, i32* @r5, align 4
  %v4_12aa4 = call i32 @function_12dcc(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v0_12a98, i32 %v0_12a9c)
  %v1_12aac = inttoptr i32 %v4_12aa4 to i32*
  %v2_12aac = load i32, i32* %v1_12aac, align 4
  store i32 %v2_12aac, i32* %r6.global-to-local, align 4
  %v2_12ab0 = load i32, i32* @global_var_1d218.419, align 4
  %v4_12ab4 = mul i32 %v2_12ab0, 8
  %v6_12ab4 = icmp ult i32 %v2_12aac, %v4_12ab4
  store i32 %v4_12aa4, i32* @r4, align 4
  br i1 %v6_12ab4, label %dec_label_pc_12af4, label %dec_label_pc_12ac0

dec_label_pc_12ac0:                               ; preds = %bb11
  %v1_12ac8 = call i32 @function_13458()
  %v1_12ad0 = call i32 @function_13c0c(i32 0)
  %v0_12ad4 = load i32, i32* @r4, align 4
  %v1_12ad4 = add i32 %v0_12ad4, 12
  store i32 %v1_12ad4, i32* @r5, align 4
  %v9_12ad8 = icmp eq i32 %v1_12ad4, %v1_12ad0
  br i1 %v9_12ad8, label %dec_label_pc_12afc, label %dec_label_pc_12ae0

dec_label_pc_12ae0:                               ; preds = %dec_label_pc_12ac0
  %v1_12aec = call i32 @function_13458()
  br label %dec_label_pc_12af4

dec_label_pc_12af4:                               ; preds = %bb11, %dec_label_pc_12ae0, %bb14
  %v2_12af4 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12af4, i32* @r4, align 4
  store i32 %v6_12a74, i32* @r5, align 4
  store i32 %v9_12a74, i32* %r6.global-to-local, align 4
  store i32 %v15_12a74, i32* %r8.global-to-local, align 4
  %v0_12af8 = call i32 @function_13458()
  %v0_12afc.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12afc

dec_label_pc_12afc:                               ; preds = %dec_label_pc_12ac0, %dec_label_pc_12af4
  %v1_12b04 = phi i32 [ %v0_12ad4, %dec_label_pc_12ac0 ], [ %v0_12afc.pre, %dec_label_pc_12af4 ]
  %v1_12afc = add i32 %v1_12b04, 4
  %v2_12afc = inttoptr i32 %v1_12afc to i32*
  %v3_12afc = load i32, i32* %v2_12afc, align 4
  %v2_12b00 = icmp eq i32 %v3_12afc, 0
  br i1 %v2_12b00, label %.thread, label %bb12

bb12:                                             ; preds = %dec_label_pc_12afc
  %v2_12b04 = add i32 %v1_12b04, 8
  %v3_12b04 = inttoptr i32 %v2_12b04 to i32*
  %v4_12b04 = load i32, i32* %v3_12b04, align 4
  %v3_12b08 = add i32 %v3_12afc, 8
  %v4_12b08 = inttoptr i32 %v3_12b08 to i32*
  store i32 %v4_12b04, i32* %v4_12b08, align 4
  %v0_12b0c.pre = load i32, i32* @r4, align 4
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_12afc, %bb12
  %v0_12b0c = phi i32 [ %v1_12b04, %dec_label_pc_12afc ], [ %v0_12b0c.pre, %bb12 ]
  %v1_12b0c = add i32 %v0_12b0c, 8
  %v2_12b0c = inttoptr i32 %v1_12b0c to i32*
  %v3_12b0c = load i32, i32* %v2_12b0c, align 4
  %v1_12b10 = add i32 %v0_12b0c, 4
  %v2_12b10 = inttoptr i32 %v1_12b10 to i32*
  %v3_12b10 = load i32, i32* %v2_12b10, align 4
  %v2_12b14 = icmp eq i32 %v3_12b0c, 0
  br i1 %v2_12b14, label %.thread1, label %bb13

bb13:                                             ; preds = %.thread
  %v3_12b18 = add i32 %v3_12b0c, 4
  %v4_12b18 = inttoptr i32 %v3_12b18 to i32*
  store i32 %v3_12b10, i32* %v4_12b18, align 4
  br label %bb14

.thread1:                                         ; preds = %.thread
  %v2_12b1c = load i32, i32* %r8.global-to-local, align 4
  %v3_12b1c = inttoptr i32 %v2_12b1c to i32*
  store i32 %v3_12b10, i32* %v3_12b1c, align 4
  br label %bb14

bb14:                                             ; preds = %bb13, %.thread1
  %v1_12b2c = call i32 @function_13458()
  %v0_12b30 = load i32, i32* %r6.global-to-local, align 4
  %v1_12b30 = load i32, i32* @r4, align 4
  %v0_12b38 = load i32, i32* @r5, align 4
  %v2_12b30 = sub i32 12, %v0_12b30
  %v1_12b34 = add i32 %v2_12b30, %v1_12b30
  %v2_12b38 = sub i32 %v1_12b34, %v0_12b38
  %v1_12b3c = call i32 @function_13c0c(i32 %v2_12b38)
  br label %dec_label_pc_12af4

; uselistorder directives
  uselistorder i32 %v0_12b0c, { 1, 0 }
  uselistorder i32* %r8.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32 (i32)* @function_13c0c, { 2, 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %.thread, { 1, 0 }
  uselistorder label %dec_label_pc_12afc, { 1, 0 }
  uselistorder label %dec_label_pc_12af4, { 2, 1, 0 }
}

define i32 @function_12b60(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_12b60:
  store i32 %arg1, i32* @r0, align 4
  %stack_var_-24 = alloca i32, align 4
  %v3_12b60 = load i32, i32* @r4, align 4
  store i32 %v3_12b60, i32* %stack_var_-24, align 4
  %v6_12b60 = load i32, i32* @r5, align 4
  %v9_12b60 = load i32, i32* @r6, align 4
  %v12_12b60 = load i32, i32* @r7, align 4
  %v15_12b60 = load i32, i32* @r8, align 4
  %v18_12b60 = load i32, i32* @lr, align 4
  store i32 %arg2, i32* @r4, align 4
  %v2_12b64 = icmp eq i32 %arg2, 0
  %v0_12b68 = load i32, i32* @r0, align 4
  store i32 %v0_12b68, i32* @r7, align 4
  br i1 %v2_12b64, label %dec_label_pc_12b70, label %dec_label_pc_12b78

dec_label_pc_12b70:                               ; preds = %dec_label_pc_12b60
  %v0_12b70 = call i32 @function_12a70()
  %v0_12b80.pre = load i32, i32* @r4, align 4
  %v2_12b84.pre = load i32, i32* %stack_var_-24, align 4
  br label %dec_label_pc_12b80

dec_label_pc_12b78:                               ; preds = %dec_label_pc_12b60
  %v2_12b78 = icmp eq i32 %v0_12b68, 0
  br i1 %v2_12b78, label %dec_label_pc_12b80, label %dec_label_pc_12b8c

dec_label_pc_12b80:                               ; preds = %dec_label_pc_12b78, %dec_label_pc_12b70
  %v2_12b84 = phi i32 [ %v3_12b60, %dec_label_pc_12b78 ], [ %v2_12b84.pre, %dec_label_pc_12b70 ]
  %v0_12b80 = phi i32 [ %arg2, %dec_label_pc_12b78 ], [ %v0_12b80.pre, %dec_label_pc_12b70 ]
  store i32 %v2_12b84, i32* @r4, align 4
  store i32 %v6_12b60, i32* @r5, align 4
  store i32 %v9_12b60, i32* @r6, align 4
  store i32 %v12_12b60, i32* @r7, align 4
  store i32 %v18_12b60, i32* @lr, align 4
  %v1_12b88 = call i32 @function_128c4(i32 %v0_12b80)
  %v0_12b8c.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12b8c

dec_label_pc_12b8c:                               ; preds = %dec_label_pc_12b78, %dec_label_pc_12b80
  %v0_12ba4 = phi i32 [ %v0_12b68, %dec_label_pc_12b78 ], [ %v1_12b88, %dec_label_pc_12b80 ]
  %v0_12b8c = phi i32 [ %arg2, %dec_label_pc_12b78 ], [ %v0_12b8c.pre, %dec_label_pc_12b80 ]
  %v1_12b8c = add i32 %v0_12b8c, 7
  %v1_12b90 = and i32 %v1_12b8c, -4
  store i32 %v1_12b90, i32* @r5, align 4
  %v2_12b94 = icmp ugt i32 %v1_12b90, 10
  %v1_12b98 = add i32 %v0_12ba4, -4
  %v2_12b98 = inttoptr i32 %v1_12b98 to i32*
  %v3_12b98 = load i32, i32* %v2_12b98, align 4
  store i32 %v3_12b98, i32* @r6, align 4
  br i1 %v2_12b94, label %bb14, label %bb

bb:                                               ; preds = %dec_label_pc_12b8c
  store i32 12, i32* @r5, align 4
  br label %bb14

bb14:                                             ; preds = %dec_label_pc_12b8c, %bb
  %v0_12c20 = phi i32 [ %v1_12b90, %dec_label_pc_12b8c ], [ 12, %bb ]
  store i32 %v1_12b98, i32* @r8, align 4
  %tmp = icmp ugt i32 %v0_12c20, %v3_12b98
  br i1 %tmp, label %dec_label_pc_12bac, label %dec_label_pc_12c20

dec_label_pc_12bac:                               ; preds = %bb14
  %v2_12ba0 = sub i32 %v0_12c20, %v3_12b98
  %v1_12bbc = call i32 @function_13458()
  %v0_12bc4 = load i32, i32* @r8, align 4
  %v1_12bc4 = load i32, i32* @r6, align 4
  %v2_12bc4 = add i32 %v1_12bc4, %v0_12bc4
  %v4_12bcc = call i32 @function_12d0c(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v2_12bc4, i32 %v2_12ba0)
  store i32 %v4_12bcc, i32* @r4, align 4
  store i32 76772, i32* @lr, align 4
  %v1_12be0 = call i32 @function_13458()
  %v0_12be4 = load i32, i32* @r4, align 4
  %v2_12be4 = icmp eq i32 %v0_12be4, 0
  br i1 %v2_12be4, label %dec_label_pc_12bf4, label %.thread

.thread:                                          ; preds = %dec_label_pc_12bac
  %v1_12be8 = load i32, i32* @r6, align 4
  %v3_12be8 = add i32 %v1_12be8, %v0_12be4
  %v2_12bec = load i32, i32* @r7, align 4
  %v3_12bec = add i32 %v2_12bec, -4
  %v4_12bec = inttoptr i32 %v3_12bec to i32*
  store i32 %v3_12be8, i32* %v4_12bec, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12bf4:                               ; preds = %dec_label_pc_12bac
  %v0_12bf4 = load i32, i32* @r5, align 4
  %v1_12bf4 = add i32 %v0_12bf4, -4
  %v1_12bf8 = call i32 @function_128c4(i32 %v1_12bf4)
  store i32 %v1_12bf8, i32* @r0, align 4
  store i32 %v1_12bf8, i32* @r4, align 4
  %v2_12bfc = icmp eq i32 %v1_12bf8, 0
  br i1 %v2_12bfc, label %dec_label_pc_12c18, label %dec_label_pc_12c04

dec_label_pc_12c04:                               ; preds = %dec_label_pc_12bf4
  %v0_12c04 = load i32, i32* @r6, align 4
  %v1_12c04 = add i32 %v0_12c04, -4
  store i32 %v1_12c04, i32* @r2, align 4
  %v0_12c08 = load i32, i32* @r7, align 4
  store i32 %v0_12c08, i32* @r1, align 4
  %v3_12c0c = call i32 @function_12430(i32 %v1_12bf8, i32 %v0_12c08, i32 %v1_12c04)
  %v0_12c10 = load i32, i32* @r7, align 4
  store i32 %v0_12c10, i32* @r0, align 4
  %v0_12c14 = call i32 @function_12a70()
  %v0_12c18.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_12c18

dec_label_pc_12c18:                               ; preds = %dec_label_pc_12bf4, %dec_label_pc_12c04
  %v0_12c18 = phi i32 [ 0, %dec_label_pc_12bf4 ], [ %v0_12c18.pre, %dec_label_pc_12c04 ]
  store i32 %v0_12c18, i32* @r7, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12c20:                               ; preds = %bb14
  %v1_12c20 = add i32 %v0_12c20, 28
  %tmp15 = icmp ugt i32 %v1_12c20, %v3_12b98
  br i1 %tmp15, label %dec_label_pc_12c60, label %dec_label_pc_12c2c

dec_label_pc_12c2c:                               ; preds = %dec_label_pc_12c20
  %v1_12c38 = call i32 @function_13458()
  %v0_12c3c = load i32, i32* @r8, align 4
  %v1_12c3c = load i32, i32* @r5, align 4
  %v2_12c3c = add i32 %v1_12c3c, %v0_12c3c
  %v1_12c40 = load i32, i32* @r6, align 4
  %v2_12c40 = sub i32 %v1_12c40, %v1_12c3c
  %v4_12c48 = call i32 @function_12dcc(i32* bitcast (i32** @global_var_1d034.416 to i32*), i32 %v2_12c3c, i32 %v2_12c40)
  store i32 76892, i32* @lr, align 4
  %v1_12c58 = call i32 @function_13458()
  %v0_12c5c = load i32, i32* @r5, align 4
  %v1_12c5c = load i32, i32* @r7, align 4
  %v2_12c5c = add i32 %v1_12c5c, -4
  %v3_12c5c = inttoptr i32 %v2_12c5c to i32*
  store i32 %v0_12c5c, i32* %v3_12c5c, align 4
  br label %dec_label_pc_12c60

dec_label_pc_12c60:                               ; preds = %.thread, %dec_label_pc_12c20, %dec_label_pc_12c18, %dec_label_pc_12c2c
  %v0_12c60 = load i32, i32* @r7, align 4
  %v2_12c64 = load i32, i32* %stack_var_-24, align 4
  store i32 %v2_12c64, i32* @r4, align 4
  store i32 %v6_12b60, i32* @r5, align 4
  store i32 %v9_12b60, i32* @r6, align 4
  store i32 %v12_12b60, i32* @r7, align 4
  store i32 %v15_12b60, i32* @r8, align 4
  ret i32 %v0_12c60

; uselistorder directives
  uselistorder i32 %v1_12c3c, { 1, 0 }
  uselistorder i32 %v0_12c20, { 1, 2, 0 }
  uselistorder i32 %v3_12b98, { 0, 2, 1, 3 }
  uselistorder i32* %stack_var_-24, { 1, 0, 2 }
  uselistorder i32** @global_var_1d034.416, { 1, 0 }
  uselistorder i32* bitcast (i32** @global_var_1d034.416 to i32*), { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 (i32)* @function_128c4, { 1, 44, 0, 4, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 3, 2 }
  uselistorder i32 ()* @function_12a70, { 1, 0, 4, 3, 2, 5, 7, 6 }
  uselistorder i32* @r8, { 107, 108, 109, 110, 112, 111, 9, 10, 12, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 36, 37, 38, 39, 128, 129, 130, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 0, 1, 2, 3, 4, 5, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 7, 72, 73, 74, 75, 76, 77, 78, 79, 6, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 8, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 55, 56, 57, 58, 59, 60, 61 }
  uselistorder i32* @r7, { 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 10, 11, 16, 17, 18, 2, 7, 8, 9, 25, 12, 13, 14, 15, 4, 19, 3, 20, 21, 22, 23, 24, 26, 1, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 5, 65, 66, 67, 68, 69, 70, 71, 72, 241, 242, 243, 116, 117, 118, 119, 59, 0, 60, 61, 62, 73, 74, 75, 76, 77, 78, 6, 79, 80, 81, 82, 83, 84, 85, 86, 87, 98, 99, 100, 101, 102, 103, 104, 105, 106, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 107, 108, 109, 110, 111, 112, 113, 114, 115 }
  uselistorder label %dec_label_pc_12c60, { 3, 1, 2, 0 }
  uselistorder label %dec_label_pc_12c18, { 1, 0 }
  uselistorder label %bb14, { 1, 0 }
  uselistorder label %dec_label_pc_12b8c, { 1, 0 }
}

define i32 @function_12c78(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_12c78:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-8 = alloca i32, align 4
  %v1_12c78 = inttoptr i32 %arg2 to i32*
  %v2_12c78 = load i32, i32* %v1_12c78, align 4
  %v3_12c7c = load i32, i32* @r4, align 4
  store i32 %v3_12c7c, i32* %stack_var_-8, align 4
  %v1_12c80 = add i32 %v2_12c78, 3
  %v1_12c84 = and i32 %v1_12c80, -4
  store i32 %v1_12c84, i32* %r2.global-to-local, align 4
  store i32 %arg2, i32* %r4.global-to-local, align 4
  %v2_12c8c = icmp ugt i32 %v1_12c84, 10
  store i32 %tmp, i32* %r1.global-to-local, align 4
  %v2_12c94 = load i32, i32* %arg1, align 4
  store i32 %v2_12c94, i32* %r0.global-to-local, align 4
  br i1 %v2_12c8c, label %dec_label_pc_12d00.preheader, label %bb

bb:                                               ; preds = %dec_label_pc_12c78
  store i32 12, i32* %r2.global-to-local, align 4
  br label %dec_label_pc_12d00.preheader

dec_label_pc_12d00.preheader:                     ; preds = %dec_label_pc_12c78, %bb
  %v1_12cb4 = phi i32 [ %v1_12c84, %dec_label_pc_12c78 ], [ 12, %bb ]
  %v2_12d009 = icmp eq i32 %v2_12c94, 0
  br i1 %v2_12d009, label %dec_label_pc_12d08, label %dec_label_pc_12ca0

dec_label_pc_12ca0:                               ; preds = %dec_label_pc_12d00.preheader, %dec_label_pc_12cfc
  %v2_12cb8 = phi i32 [ %v3_12cfc, %dec_label_pc_12cfc ], [ %v2_12c94, %dec_label_pc_12d00.preheader ]
  %v1_12ca0 = inttoptr i32 %v2_12cb8 to i32*
  %v2_12ca0 = load i32, i32* %v1_12ca0, align 4
  store i32 %v2_12ca0, i32* %ip.global-to-local, align 4
  %v3_12ca4 = icmp ult i32 %v2_12ca0, %v1_12cb4
  br i1 %v3_12ca4, label %dec_label_pc_12cfc, label %dec_label_pc_12cac

dec_label_pc_12cac:                               ; preds = %dec_label_pc_12ca0
  %v1_12cac = add i32 %v1_12cb4, 44
  %v3_12cb0 = icmp ult i32 %v2_12ca0, %v1_12cac
  br i1 %v3_12cb0, label %dec_label_pc_12cc0, label %.thread._crit_edge

.thread._crit_edge:                               ; preds = %dec_label_pc_12cac
  %v2_12ca4.le = sub i32 %v2_12ca0, %v1_12cb4
  store i32 %v2_12ca4.le, i32* %v1_12ca0, align 4
  %v0_12cec.pre = load i32, i32* %ip.global-to-local, align 4
  %v0_12cf4.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb29

dec_label_pc_12cc0:                               ; preds = %dec_label_pc_12cac
  %v1_12cc0 = add i32 %v2_12cb8, 4
  %v2_12cc0 = inttoptr i32 %v1_12cc0 to i32*
  %v3_12cc0 = load i32, i32* %v2_12cc0, align 4
  store i32 %v3_12cc0, i32* %r2.global-to-local, align 4
  %v2_12cc4 = icmp eq i32 %v3_12cc0, 0
  br i1 %v2_12cc4, label %.thread2, label %bb27

bb27:                                             ; preds = %dec_label_pc_12cc0
  %v2_12cc8 = add i32 %v2_12cb8, 8
  %v3_12cc8 = inttoptr i32 %v2_12cc8 to i32*
  %v4_12cc8 = load i32, i32* %v3_12cc8, align 4
  %v3_12ccc = add i32 %v3_12cc0, 8
  %v4_12ccc = inttoptr i32 %v3_12ccc to i32*
  store i32 %v4_12cc8, i32* %v4_12ccc, align 4
  %v0_12cd0.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread2

.thread2:                                         ; preds = %dec_label_pc_12cc0, %bb27
  %v0_12cd0 = phi i32 [ %v2_12cb8, %dec_label_pc_12cc0 ], [ %v0_12cd0.pre, %bb27 ]
  %v1_12cd0 = add i32 %v0_12cd0, 8
  %v2_12cd0 = inttoptr i32 %v1_12cd0 to i32*
  %v3_12cd0 = load i32, i32* %v2_12cd0, align 4
  %v1_12cd4 = add i32 %v0_12cd0, 4
  %v2_12cd4 = inttoptr i32 %v1_12cd4 to i32*
  %v3_12cd4 = load i32, i32* %v2_12cd4, align 4
  %v2_12cd8 = icmp eq i32 %v3_12cd0, 0
  br i1 %v2_12cd8, label %.thread5, label %bb28

bb28:                                             ; preds = %.thread2
  %v3_12cdc = add i32 %v3_12cd0, 4
  %v4_12cdc = inttoptr i32 %v3_12cdc to i32*
  store i32 %v3_12cd4, i32* %v4_12cdc, align 4
  %v1_12ce4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12ce4, i32* %r2.global-to-local, align 4
  br label %bb29

.thread5:                                         ; preds = %.thread2
  %v2_12ce0 = load i32, i32* %r1.global-to-local, align 4
  %v3_12ce0 = inttoptr i32 %v2_12ce0 to i32*
  store i32 %v3_12cd4, i32* %v3_12ce0, align 4
  %v1_12ce8.pre = load i32, i32* %ip.global-to-local, align 4
  store i32 %v1_12ce8.pre, i32* %r2.global-to-local, align 4
  br label %bb29

bb29:                                             ; preds = %bb28, %.thread._crit_edge, %.thread5
  %v0_12cf4 = phi i32 [ %v0_12cf4.pre, %.thread._crit_edge ], [ %v1_12ce4, %bb28 ], [ %v1_12ce8.pre, %.thread5 ]
  %v0_12cec = phi i32 [ %v0_12cec.pre, %.thread._crit_edge ], [ %v1_12ce4, %bb28 ], [ %v1_12ce8.pre, %.thread5 ]
  %v1_12cec = load i32, i32* %r0.global-to-local, align 4
  %v2_12cec = sub i32 %v1_12cec, %v0_12cec
  %v1_12cf0 = add i32 %v2_12cec, 12
  store i32 %v1_12cf0, i32* %r0.global-to-local, align 4
  %v1_12cf4 = load i32, i32* %r4.global-to-local, align 4
  %v2_12cf4 = inttoptr i32 %v1_12cf4 to i32*
  store i32 %v0_12cf4, i32* %v2_12cf4, align 4
  %v2_12cf8 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_12cf8, i32* %r4.global-to-local, align 4
  ret i32 %v1_12cf0

dec_label_pc_12cfc:                               ; preds = %dec_label_pc_12ca0
  %v1_12cfc = add i32 %v2_12cb8, 4
  %v2_12cfc = inttoptr i32 %v1_12cfc to i32*
  %v3_12cfc = load i32, i32* %v2_12cfc, align 4
  store i32 %v3_12cfc, i32* %r0.global-to-local, align 4
  %v2_12d00 = icmp eq i32 %v3_12cfc, 0
  br i1 %v2_12d00, label %dec_label_pc_12d00.dec_label_pc_12d08_crit_edge, label %dec_label_pc_12ca0

dec_label_pc_12d00.dec_label_pc_12d08_crit_edge:  ; preds = %dec_label_pc_12cfc
  br label %dec_label_pc_12d08

dec_label_pc_12d08:                               ; preds = %dec_label_pc_12d00.dec_label_pc_12d08_crit_edge, %dec_label_pc_12d00.preheader
  store i32 %v3_12c7c, i32* %r4.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12cfc, { 1, 2, 0 }
  uselistorder i32 %v0_12cd0, { 1, 0 }
  uselistorder i32 %v2_12ca0, { 1, 0, 2, 3 }
  uselistorder i32 %v2_12cb8, { 3, 2, 1, 0, 4 }
  uselistorder i32 %v1_12cb4, { 0, 2, 1 }
  uselistorder i32* %r2.global-to-local, { 0, 1, 2, 4, 3, 5 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 4, 3, 5, 0 }
  uselistorder i32* %ip.global-to-local, { 1, 2, 0, 3 }
  uselistorder label %bb29, { 2, 0, 1 }
  uselistorder label %.thread2, { 1, 0 }
  uselistorder label %dec_label_pc_12ca0, { 1, 0 }
  uselistorder label %dec_label_pc_12d00.preheader, { 1, 0 }
}

define i32 @function_12d0c(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12d0c:
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  store i32 %arg3, i32* %r2.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %v2_12d10 = load i32, i32* %arg1, align 4
  store i32 %v2_12d10, i32* %ip.global-to-local, align 4
  store i32 %tmp, i32* %lr.global-to-local, align 4
  %v2_12d886 = icmp eq i32 %v2_12d10, 0
  br i1 %v2_12d886, label %dec_label_pc_12d90, label %dec_label_pc_12d1c

dec_label_pc_12d1c:                               ; preds = %dec_label_pc_12d0c, %dec_label_pc_12d84
  %v0_12d5c = phi i32 [ %v3_12d84, %dec_label_pc_12d84 ], [ %v2_12d10, %dec_label_pc_12d0c ]
  %v1_12d1c = inttoptr i32 %v0_12d5c to i32*
  %v2_12d1c = load i32, i32* %v1_12d1c, align 4
  store i32 %v2_12d1c, i32* %r0.global-to-local, align 4
  %v2_12d20 = sub i32 %v0_12d5c, %v2_12d1c
  %v1_12d24 = add i32 %v2_12d20, 12
  %v3_12d28 = icmp uge i32 %v1_12d24, %arg2
  %v9_12d28 = icmp eq i32 %v1_12d24, %arg2
  %v2_12d2c = xor i1 %v9_12d28, true
  %v3_12d2c = and i1 %v3_12d28, %v2_12d2c
  br i1 %v3_12d2c, label %dec_label_pc_12d84, label %dec_label_pc_12d30

dec_label_pc_12d30:                               ; preds = %dec_label_pc_12d1c
  br i1 %v9_12d28, label %dec_label_pc_12d34, label %dec_label_pc_12d90

dec_label_pc_12d34:                               ; preds = %dec_label_pc_12d30
  %v1_12d34 = add i32 %arg3, 3
  %v1_12d38 = and i32 %v1_12d34, -4
  store i32 %v1_12d38, i32* %r2.global-to-local, align 4
  %v2_12d3c = sub i32 %v2_12d1c, %v1_12d38
  %v3_12d3c = icmp ult i32 %v2_12d1c, %v1_12d38
  br i1 %v3_12d3c, label %dec_label_pc_12d90, label %dec_label_pc_12d44

dec_label_pc_12d44:                               ; preds = %dec_label_pc_12d34
  %v1_12d44 = add i32 %v1_12d38, 44
  %v3_12d48 = icmp ult i32 %v2_12d1c, %v1_12d44
  br i1 %v3_12d48, label %.thread2, label %bb

bb:                                               ; preds = %dec_label_pc_12d44
  store i32 %v2_12d3c, i32* %v1_12d1c, align 4
  %v1_12d54 = load i32, i32* %r2.global-to-local, align 4
  store i32 %v1_12d54, i32* %r0.global-to-local, align 4
  ret i32 %v1_12d54

.thread2:                                         ; preds = %dec_label_pc_12d44
  %v1_12d5c = add i32 %v0_12d5c, 4
  %v2_12d5c = inttoptr i32 %v1_12d5c to i32*
  %v3_12d5c = load i32, i32* %v2_12d5c, align 4
  store i32 %v3_12d5c, i32* %r2.global-to-local, align 4
  %v2_12d60 = icmp eq i32 %v3_12d5c, 0
  br i1 %v2_12d60, label %.thread3, label %bb17

bb17:                                             ; preds = %.thread2
  %v2_12d64 = add i32 %v0_12d5c, 8
  %v3_12d64 = inttoptr i32 %v2_12d64 to i32*
  %v4_12d64 = load i32, i32* %v3_12d64, align 4
  %v3_12d68 = add i32 %v3_12d5c, 8
  %v4_12d68 = inttoptr i32 %v3_12d68 to i32*
  store i32 %v4_12d64, i32* %v4_12d68, align 4
  %v0_12d6c.pre = load i32, i32* %ip.global-to-local, align 4
  br label %.thread3

.thread3:                                         ; preds = %.thread2, %bb17
  %v0_12d6c = phi i32 [ %v0_12d5c, %.thread2 ], [ %v0_12d6c.pre, %bb17 ]
  %v1_12d6c = add i32 %v0_12d6c, 8
  %v2_12d6c = inttoptr i32 %v1_12d6c to i32*
  %v3_12d6c = load i32, i32* %v2_12d6c, align 4
  store i32 %v3_12d6c, i32* %r2.global-to-local, align 4
  %v1_12d70 = add i32 %v0_12d6c, 4
  %v2_12d70 = inttoptr i32 %v1_12d70 to i32*
  %v3_12d70 = load i32, i32* %v2_12d70, align 4
  %v2_12d74 = icmp eq i32 %v3_12d6c, 0
  br i1 %v2_12d74, label %.thread4, label %bb18

bb18:                                             ; preds = %.thread3
  %v3_12d78 = add i32 %v3_12d6c, 4
  %v4_12d78 = inttoptr i32 %v3_12d78 to i32*
  store i32 %v3_12d70, i32* %v4_12d78, align 4
  br label %bb19

.thread4:                                         ; preds = %.thread3
  %v2_12d7c = load i32, i32* %lr.global-to-local, align 4
  %v3_12d7c = inttoptr i32 %v2_12d7c to i32*
  store i32 %v3_12d70, i32* %v3_12d7c, align 4
  br label %bb19

bb19:                                             ; preds = %bb18, %.thread4
  %v5_12d80 = load i32, i32* %r0.global-to-local, align 4
  ret i32 %v5_12d80

dec_label_pc_12d84:                               ; preds = %dec_label_pc_12d1c
  %v1_12d84 = add i32 %v0_12d5c, 4
  %v2_12d84 = inttoptr i32 %v1_12d84 to i32*
  %v3_12d84 = load i32, i32* %v2_12d84, align 4
  store i32 %v3_12d84, i32* %ip.global-to-local, align 4
  %v2_12d88 = icmp eq i32 %v3_12d84, 0
  br i1 %v2_12d88, label %dec_label_pc_12d88.dec_label_pc_12d90.loopexit_crit_edge, label %dec_label_pc_12d1c

dec_label_pc_12d88.dec_label_pc_12d90.loopexit_crit_edge: ; preds = %dec_label_pc_12d84
  br label %dec_label_pc_12d90

dec_label_pc_12d90:                               ; preds = %dec_label_pc_12d34, %dec_label_pc_12d0c, %dec_label_pc_12d88.dec_label_pc_12d90.loopexit_crit_edge, %dec_label_pc_12d30
  store i32 0, i32* %r0.global-to-local, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v3_12d84, { 1, 2, 0 }
  uselistorder i32 %v0_12d6c, { 1, 0 }
  uselistorder i32 %v1_12d38, { 0, 2, 1, 3 }
  uselistorder i1 %v9_12d28, { 1, 0 }
  uselistorder i32 %v2_12d1c, { 0, 2, 1, 3, 4 }
  uselistorder i32 %v0_12d5c, { 3, 2, 1, 0, 5, 4 }
  uselistorder i32* %r2.global-to-local, { 1, 2, 3, 4, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 3, 2, 4, 0 }
  uselistorder label %dec_label_pc_12d90, { 2, 0, 3, 1 }
  uselistorder label %bb19, { 1, 0 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12d1c, { 1, 0 }
}

define i32 @function_12d98() local_unnamed_addr {
dec_label_pc_12d98:
  %v0_12d98 = load i32, i32* @r2, align 4
  %v2_12d98 = icmp eq i32 %v0_12d98, 0
  %v0_12d9c = load i32, i32* @r3, align 4
  %v1_12d9c = load i32, i32* @r1, align 4
  %v2_12d9c = add i32 %v1_12d9c, 4
  %v3_12d9c = inttoptr i32 %v2_12d9c to i32*
  store i32 %v0_12d9c, i32* %v3_12d9c, align 4
  %v0_12da0 = load i32, i32* @r2, align 4
  %v1_12da0 = load i32, i32* @r1, align 4
  %v2_12da0 = add i32 %v1_12da0, 8
  %v3_12da0 = inttoptr i32 %v2_12da0 to i32*
  store i32 %v0_12da0, i32* %v3_12da0, align 4
  %v1_12da8 = load i32, i32* @r1, align 4
  br i1 %v2_12d98, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_12d98
  %v2_12da4 = load i32, i32* @r2, align 4
  %v3_12da4 = add i32 %v2_12da4, 4
  %v4_12da4 = inttoptr i32 %v3_12da4 to i32*
  store i32 %v1_12da8, i32* %v4_12da4, align 4
  br label %bb1

.thread:                                          ; preds = %dec_label_pc_12d98
  %v2_12da8 = load i32, i32* @r0, align 4
  %v3_12da8 = inttoptr i32 %v2_12da8 to i32*
  store i32 %v1_12da8, i32* %v3_12da8, align 4
  br label %bb1

bb1:                                              ; preds = %bb, %.thread
  %v0_12dac = load i32, i32* @r3, align 4
  %v2_12dac = icmp eq i32 %v0_12dac, 0
  br i1 %v2_12dac, label %bb3, label %bb2

bb2:                                              ; preds = %bb1
  %v1_12db0 = load i32, i32* @r1, align 4
  %v3_12db0 = add i32 %v0_12dac, 8
  %v4_12db0 = inttoptr i32 %v3_12db0 to i32*
  store i32 %v1_12db0, i32* %v4_12db0, align 4
  br label %bb3

bb3:                                              ; preds = %bb1, %bb2
  %v1_12db4 = load i32, i32* @r0, align 4
  ret i32 %v1_12db4

; uselistorder directives
  uselistorder i32 %v1_12da8, { 1, 0 }
  uselistorder label %bb3, { 1, 0 }
  uselistorder label %bb1, { 1, 0 }
}

define i32 @function_12db8() local_unnamed_addr {
dec_label_pc_12db8:
  %v0_12db8 = load i32, i32* @r2, align 4
  %v2_12db8 = icmp eq i32 %v0_12db8, 0
  %v1_12dbc = load i32, i32* @r1, align 4
  br i1 %v2_12db8, label %bb, label %.thread

bb:                                               ; preds = %dec_label_pc_12db8
  %v2_12dbc = load i32, i32* @r0, align 4
  %v3_12dbc = inttoptr i32 %v2_12dbc to i32*
  store i32 %v1_12dbc, i32* %v3_12dbc, align 4
  br label %bb2

.thread:                                          ; preds = %dec_label_pc_12db8
  %v3_12dc0 = add i32 %v0_12db8, 4
  %v4_12dc0 = inttoptr i32 %v3_12dc0 to i32*
  store i32 %v1_12dbc, i32* %v4_12dc0, align 4
  br label %bb2

bb2:                                              ; preds = %bb, %.thread
  %v0_12dc4 = load i32, i32* @r2, align 4
  %v1_12dc4 = load i32, i32* @r1, align 4
  %v2_12dc4 = add i32 %v1_12dc4, 8
  %v3_12dc4 = inttoptr i32 %v2_12dc4 to i32*
  store i32 %v0_12dc4, i32* %v3_12dc4, align 4
  %v1_12dc8 = load i32, i32* @r0, align 4
  ret i32 %v1_12dc8

; uselistorder directives
  uselistorder label %bb2, { 1, 0 }
}

define i32 @function_12dcc(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_12dcc:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* @r0, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_12dcc = load i32, i32* @r4, align 4
  store i32 %v3_12dcc, i32* %stack_var_-20, align 4
  %v2_12dd0 = load i32, i32* %arg1, align 4
  store i32 %v2_12dd0, i32* %r4.global-to-local, align 4
  %v2_12dd4 = add i32 %arg3, %arg2
  store i32 0, i32* %r6.global-to-local, align 4
  %v2_12df02 = icmp eq i32 %v2_12dd0, 0
  br i1 %v2_12df02, label %dec_label_pc_12ea0, label %dec_label_pc_12de0

dec_label_pc_12de0:                               ; preds = %dec_label_pc_12dcc, %dec_label_pc_12de8
  %v0_12e30 = phi i32 [ %v0_12e38, %dec_label_pc_12de8 ], [ 0, %dec_label_pc_12dcc ]
  %v0_12e38 = phi i32 [ %v3_12dec, %dec_label_pc_12de8 ], [ %v2_12dd0, %dec_label_pc_12dcc ]
  %v1_12df45.in = phi i32 [ %v3_12dec, %dec_label_pc_12de8 ], [ %v2_12dd0, %dec_label_pc_12dcc ]
  %v1_12df45 = add i32 %v1_12df45.in, 12
  %v3_12de0 = icmp ult i32 %v1_12df45, %arg2
  br i1 %v3_12de0, label %dec_label_pc_12de8, label %dec_label_pc_12e00

dec_label_pc_12de8:                               ; preds = %dec_label_pc_12de0
  store i32 %v0_12e38, i32* %r6.global-to-local, align 4
  %v1_12dec = add i32 %v0_12e38, 4
  %v2_12dec = inttoptr i32 %v1_12dec to i32*
  %v3_12dec = load i32, i32* %v2_12dec, align 4
  store i32 %v3_12dec, i32* %r4.global-to-local, align 4
  %v2_12df0 = icmp eq i32 %v3_12dec, 0
  br i1 %v2_12df0, label %dec_label_pc_12df0.dec_label_pc_12ea0.loopexit_crit_edge, label %dec_label_pc_12de0

dec_label_pc_12e00:                               ; preds = %dec_label_pc_12de0
  %v1_12e00 = inttoptr i32 %v0_12e38 to i32*
  %v2_12e00 = load i32, i32* %v1_12e00, align 4
  %v2_12e04 = sub i32 %v0_12e38, %v2_12e00
  %v1_12e08 = add i32 %v2_12e04, 12
  %v3_12e0c = icmp uge i32 %v1_12e08, %v2_12dd4
  %v9_12e0c = icmp eq i32 %v1_12e08, %v2_12dd4
  %v2_12e10 = xor i1 %v9_12e0c, true
  %v3_12e10 = and i1 %v3_12e0c, %v2_12e10
  br i1 %v3_12e10, label %dec_label_pc_12ea0, label %dec_label_pc_12e14

dec_label_pc_12e14:                               ; preds = %dec_label_pc_12e00
  %v2_12e14 = add i32 %v2_12e00, %arg3
  store i32 %v2_12e14, i32* %r7.global-to-local, align 4
  br i1 %v9_12e0c, label %dec_label_pc_12e1c, label %dec_label_pc_12e48

dec_label_pc_12e1c:                               ; preds = %dec_label_pc_12e14
  %v2_12e1c = icmp eq i32 %v0_12e30, 0
  br i1 %v2_12e1c, label %dec_label_pc_12e94, label %dec_label_pc_12e24

dec_label_pc_12e24:                               ; preds = %dec_label_pc_12e1c
  %v1_12e24 = add i32 %v0_12e30, 12
  %v9_12e28 = icmp eq i32 %v1_12e24, %arg2
  br i1 %v9_12e28, label %dec_label_pc_12e30, label %dec_label_pc_12e94

dec_label_pc_12e30:                               ; preds = %dec_label_pc_12e24
  %v1_12e30 = inttoptr i32 %v0_12e30 to i32*
  %v2_12e30 = load i32, i32* %v1_12e30, align 4
  %v1_12e34 = add i32 %v0_12e30, 8
  %v2_12e34 = inttoptr i32 %v1_12e34 to i32*
  %v3_12e34 = load i32, i32* %v2_12e34, align 4
  store i32 %v3_12e34, i32* @r2, align 4
  store i32 %v0_12e38, i32* @r1, align 4
  %v2_12e3c = add i32 %v2_12e30, %v2_12e14
  store i32 %v2_12e3c, i32* %r7.global-to-local, align 4
  %v0_12e40 = call i32 @function_12db8()
  br label %dec_label_pc_12e94

dec_label_pc_12e48:                               ; preds = %dec_label_pc_12e14
  %v1_12e48 = add i32 %v0_12e38, 4
  %v2_12e48 = inttoptr i32 %v1_12e48 to i32*
  %v3_12e48 = load i32, i32* %v2_12e48, align 4
  store i32 %v3_12e48, i32* %r5.global-to-local, align 4
  %v2_12e4c = icmp eq i32 %v3_12e48, 0
  br i1 %v2_12e4c, label %dec_label_pc_12e80, label %dec_label_pc_12e54

dec_label_pc_12e54:                               ; preds = %dec_label_pc_12e48
  %v1_12e54 = inttoptr i32 %v3_12e48 to i32*
  %v2_12e54 = load i32, i32* %v1_12e54, align 4
  %v2_12e58 = sub i32 %v3_12e48, %v2_12e54
  %v1_12e5c = add i32 %v2_12e58, 12
  %v9_12e60 = icmp eq i32 %v2_12dd4, %v1_12e5c
  br i1 %v9_12e60, label %dec_label_pc_12e68, label %dec_label_pc_12e80

dec_label_pc_12e68:                               ; preds = %dec_label_pc_12e54
  store i32 %v0_12e30, i32* @r2, align 4
  store i32 %v3_12e48, i32* @r1, align 4
  %v2_12e70 = add i32 %v2_12e54, %v2_12e14
  store i32 %v2_12e70, i32* %r7.global-to-local, align 4
  %v0_12e74 = call i32 @function_12db8()
  %v0_12e78 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12e78, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_12e94

dec_label_pc_12e80:                               ; preds = %dec_label_pc_12e54, %dec_label_pc_12e48
  %v2_12e80 = add i32 %v0_12e38, %arg3
  store i32 %v2_12e80, i32* %r4.global-to-local, align 4
  store i32 %v3_12e48, i32* @r3, align 4
  store i32 %v0_12e30, i32* @r2, align 4
  store i32 %v2_12e80, i32* @r1, align 4
  %v0_12e90 = call i32 @function_12d98()
  br label %dec_label_pc_12e94

dec_label_pc_12e94:                               ; preds = %dec_label_pc_12e24, %dec_label_pc_12e1c, %dec_label_pc_12e68, %dec_label_pc_12e30, %dec_label_pc_12e80
  %v0_12e94 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12e94, i32* %r5.global-to-local, align 4
  %v0_12e98 = load i32, i32* %r7.global-to-local, align 4
  %v2_12e98 = inttoptr i32 %v0_12e94 to i32*
  store i32 %v0_12e98, i32* %v2_12e98, align 4
  br label %dec_label_pc_12eb8

dec_label_pc_12df0.dec_label_pc_12ea0.loopexit_crit_edge: ; preds = %dec_label_pc_12de8
  br label %dec_label_pc_12ea0

dec_label_pc_12ea0:                               ; preds = %dec_label_pc_12dcc, %dec_label_pc_12df0.dec_label_pc_12ea0.loopexit_crit_edge, %dec_label_pc_12e00
  %v1_12ea0 = add i32 %v2_12dd4, -12
  store i32 %v1_12ea0, i32* %r5.global-to-local, align 4
  %v3_12ea4 = inttoptr i32 %v1_12ea0 to i32*
  store i32 %arg3, i32* %v3_12ea4, align 4
  %v0_12ea8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_12ea8, i32* @r3, align 4
  %v0_12eac = load i32, i32* %r6.global-to-local, align 4
  store i32 %v0_12eac, i32* @r2, align 4
  %v0_12eb0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_12eb0, i32* @r1, align 4
  %v0_12eb4 = call i32 @function_12d98()
  br label %dec_label_pc_12eb8

dec_label_pc_12eb8:                               ; preds = %dec_label_pc_12e94, %dec_label_pc_12ea0
  %v0_12eb8 = load i32, i32* %r5.global-to-local, align 4
  %v2_12ebc = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_12ebc, i32* @r4, align 4
  ret i32 %v0_12eb8

; uselistorder directives
  uselistorder i32 %v3_12e48, { 0, 1, 3, 2, 4, 5 }
  uselistorder i1 %v9_12e0c, { 1, 0 }
  uselistorder i32 %v3_12dec, { 2, 3, 1, 0 }
  uselistorder i32 %v0_12e38, { 0, 2, 1, 3, 4, 6, 7, 5 }
  uselistorder i32 %v0_12e30, { 4, 5, 1, 0, 2, 3 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1, 3 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r5.global-to-local, { 2, 0, 1, 3, 4, 5 }
  uselistorder i32* %r4.global-to-local, { 3, 4, 0, 1, 2, 5 }
  uselistorder i32 ()* @function_12d98, { 1, 0 }
  uselistorder i32* @r3, { 5, 8, 6, 7, 0, 9, 10, 11, 1, 2, 3, 12, 4 }
  uselistorder i32 ()* @function_12db8, { 1, 0 }
  uselistorder i32 %arg3, { 3, 0, 1, 2 }
  uselistorder i32 %arg2, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12eb8, { 1, 0 }
  uselistorder label %dec_label_pc_12ea0, { 1, 2, 0 }
  uselistorder label %dec_label_pc_12e94, { 4, 2, 3, 0, 1 }
  uselistorder label %dec_label_pc_12de0, { 1, 0 }
}

define i32 @function_12ec0() local_unnamed_addr {
dec_label_pc_12edc.lr.ph:
  %ip.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %stack_var_-128 = alloca i32, align 4
  %stack_var_0 = alloca i32, align 4
  %stack_var_-268 = alloca i32, align 4
  %v2_12ec0 = ptrtoint i32* %stack_var_-268 to i32
  %v1_12ed0 = call i32 @function_13458()
  store i32 31, i32* %r1.global-to-local, align 4
  %v2_12edc = ptrtoint i32* %stack_var_0 to i32
  br label %dec_label_pc_12edc

dec_label_pc_12edc:                               ; preds = %dec_label_pc_12edc.lr.ph, %dec_label_pc_12edc
  %v1_12ee0 = phi i32 [ 31, %dec_label_pc_12edc.lr.ph ], [ %v1_12eec, %dec_label_pc_12edc ]
  %v4_12ee0 = mul i32 %v1_12ee0, 4
  %v5_12ee0 = add i32 %v4_12ee0, %v2_12edc
  %v2_12ee8 = add i32 %v5_12ee0, -128
  %v3_12ee8 = inttoptr i32 %v2_12ee8 to i32*
  store i32 0, i32* %v3_12ee8, align 4
  %v0_12eec = load i32, i32* %r1.global-to-local, align 4
  %v1_12eec = add i32 %v0_12eec, -1
  store i32 %v1_12eec, i32* %r1.global-to-local, align 4
  %v6_12eec = icmp slt i32 %v1_12eec, 0
  br i1 %v6_12eec, label %dec_label_pc_12ef4, label %dec_label_pc_12edc

dec_label_pc_12ef4:                               ; preds = %dec_label_pc_12edc
  %v2_12ef4 = ptrtoint i32* %stack_var_-128 to i32
  store i32 %v2_12ef4, i32* @r4, align 4
  store i32 %v2_12ef4, i32* @r0, align 4
  store i32 6, i32* @r1, align 4
  %v0_12f00 = call i32 @function_1287c()
  %v2_12f04 = icmp eq i32 %v0_12f00, 0
  br i1 %v2_12f04, label %bb, label %.thread1

bb:                                               ; preds = %dec_label_pc_12ef4
  store i32 %v2_12ef4, i32* %r1.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_12ef4, %bb
  store i32 77592, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_12f04, i32 ptrtoint (i32* @global_var_12094.438 to i32))
  %v2_12f1c = load i32, i32* @global_var_1d208.440, align 4
  %v2_12f20 = icmp eq i32 %v2_12f1c, 0
  br i1 %v2_12f20, label %dec_label_pc_12f28, label %dec_label_pc_12f58

dec_label_pc_12f28:                               ; preds = %.thread1
  store i32 1, i32* @global_var_1d208.440, align 4
  br label %dec_label_pc_12f30

dec_label_pc_12f30:                               ; preds = %dec_label_pc_12fa8, %dec_label_pc_12f28
  %v1_12f3c = call i32 @function_13458()
  %v1_12f44 = call i32 @function_145ec(i32 6)
  store i32 77656, i32* @lr, align 4
  %v1_12f54 = call i32 @function_13458()
  %v2_12f5c.pre = load i32, i32* @global_var_1d208.440, align 4
  br label %dec_label_pc_12f58

dec_label_pc_12f58:                               ; preds = %.thread1, %dec_label_pc_12f30
  %v0_12fcc = phi i32 [ %v2_12f1c, %.thread1 ], [ %v2_12f5c.pre, %dec_label_pc_12f30 ]
  store i32 ptrtoint (i32* @global_var_1d208.440 to i32), i32* %ip.global-to-local, align 4
  %v7_12f60 = icmp eq i32 %v0_12fcc, 1
  br i1 %v7_12f60, label %dec_label_pc_12f90.lr.ph, label %dec_label_pc_12fc4

dec_label_pc_12f90.lr.ph:                         ; preds = %dec_label_pc_12f58
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 140, i32* @r2, align 4
  store i32 2, i32* @global_var_1d208.440, align 4
  %v2_12f7c = bitcast i32* %stack_var_-268 to i8*
  %v3_12f7c = call i32 @function_12450(i8* %v2_12f7c, i32 0)
  store i32 0, i32* %stack_var_-268, align 4
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_12f90

dec_label_pc_12f90:                               ; preds = %dec_label_pc_12f90.lr.ph, %dec_label_pc_12f90
  %v1_12f94 = phi i32 [ 31, %dec_label_pc_12f90.lr.ph ], [ %v1_12fa0, %dec_label_pc_12f90 ]
  %v4_12f94 = mul i32 %v1_12f94, 4
  %v5_12f94 = add i32 %v4_12f94, %v2_12edc
  %v2_12f9c = add i32 %v5_12f94, -264
  %v3_12f9c = inttoptr i32 %v2_12f9c to i32*
  store i32 -1, i32* %v3_12f9c, align 4
  %v0_12fa0 = load i32, i32* %r1.global-to-local, align 4
  %v1_12fa0 = add i32 %v0_12fa0, -1
  store i32 %v1_12fa0, i32* %r1.global-to-local, align 4
  %v6_12fa0 = icmp slt i32 %v1_12fa0, 0
  br i1 %v6_12fa0, label %dec_label_pc_12fa8, label %dec_label_pc_12f90

dec_label_pc_12fa8:                               ; preds = %dec_label_pc_12f90
  store i32 %v2_12ec0, i32* %r1.global-to-local, align 4
  %v4_12fbc = call i32 @function_13744(i32 6, i32* nonnull %stack_var_-268, i32 0)
  br label %dec_label_pc_12f30

dec_label_pc_12fc4:                               ; preds = %dec_label_pc_12f58
  %v7_12fc4 = icmp eq i32 %v0_12fcc, 2
  br i1 %v7_12fc4, label %dec_label_pc_12fcc, label %dec_label_pc_12fd8

dec_label_pc_12fcc:                               ; preds = %dec_label_pc_12fc4
  store i32 3, i32* @global_var_1d208.440, align 4
  %v0_12fd4 = call i32 @function_12ec0()
  %v2_12fd8.pre = load i32, i32* @global_var_1d208.440, align 4
  br label %dec_label_pc_12fd8

dec_label_pc_12fd8:                               ; preds = %dec_label_pc_12fc4, %dec_label_pc_12fcc
  %v1_12fe0 = phi i32 [ %v0_12fcc, %dec_label_pc_12fc4 ], [ %v2_12fd8.pre, %dec_label_pc_12fcc ]
  %v7_12fdc = icmp eq i32 %v1_12fe0, 3
  br i1 %v7_12fdc, label %bb27, label %.thread3

bb27:                                             ; preds = %dec_label_pc_12fd8
  %v2_12fe8 = load i32, i32* %ip.global-to-local, align 4
  %v3_12fe8 = inttoptr i32 %v2_12fe8 to i32*
  store i32 4, i32* %v3_12fe8, align 4
  br label %.thread3

.thread3:                                         ; preds = %dec_label_pc_12fd8, %bb27
  call void @__pseudo_cond_branch(i1 %v7_12fdc, i32 ptrtoint (i32* @global_var_1385c.442 to i32))
  br label %dec_label_pc_12ff0

dec_label_pc_12ff0:                               ; preds = %dec_label_pc_12ff0, %.thread3
  %v0_12ff0 = call i32 @function_12ec0()
  br label %dec_label_pc_12ff0

; uselistorder directives
  uselistorder i32 %v1_12fa0, { 2, 1, 0 }
  uselistorder i32 %v1_12eec, { 2, 1, 0 }
  uselistorder i32* %stack_var_-268, { 1, 2, 0, 3 }
  uselistorder i32* %r1.global-to-local, { 3, 4, 0, 1, 5, 6, 8, 7, 2 }
  uselistorder i32* @global_var_1d208.440, { 1, 2, 0, 6, 3, 4, 5 }
  uselistorder label %.thread3, { 1, 0 }
  uselistorder label %dec_label_pc_12fd8, { 1, 0 }
  uselistorder label %dec_label_pc_12f90, { 1, 0 }
  uselistorder label %dec_label_pc_12f58, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_12edc, { 1, 0 }
}

define i32 @function_13008(i8* %arg1) local_unnamed_addr {
dec_label_pc_13008:
  %fp.global-to-local = alloca i32, align 4
  %ip.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  %stack_var_-36 = alloca i32, align 4
  %v3_1301c = load i32, i32* @r4, align 4
  store i32 %v3_1301c, i32* %stack_var_-36, align 4
  store i32 0, i32* %sb.global-to-local, align 4
  store i32 10, i32* %r5.global-to-local, align 4
  store i32 1, i32* %fp.global-to-local, align 4
  %v2_13040.pre = load i32, i32* bitcast (i32** @global_var_1d174.445 to i32*), align 4
  br label %dec_label_pc_13038

dec_label_pc_13038:                               ; preds = %dec_label_pc_13038, %dec_label_pc_13008
  %v0_13070 = phi i32 [ %tmp, %dec_label_pc_13008 ], [ %v1_13034, %dec_label_pc_13038 ]
  store i32 %v0_13070, i32* %r4.global-to-local, align 4
  %v1_1303c = inttoptr i32 %v0_13070 to i8*
  %v2_1303c = load i8, i8* %v1_1303c, align 1
  %v3_1303c = zext i8 %v2_1303c to i32
  %v3_13044 = mul nuw nsw i32 %v3_1303c, 2
  %v4_13044 = add i32 %v3_13044, %v2_13040.pre
  %v5_13044 = inttoptr i32 %v4_13044 to i8*
  %v6_13044 = load i8, i8* %v5_13044, align 1
  %v1_13048 = and i8 %v6_13044, 32
  %v2_13048 = icmp eq i8 %v1_13048, 0
  %v1_13034 = add i32 %v0_13070, 1
  br i1 %v2_13048, label %dec_label_pc_13050, label %dec_label_pc_13038

dec_label_pc_13050:                               ; preds = %dec_label_pc_13038
  %v7_13050 = icmp eq i8 %v2_1303c, 43
  br i1 %v7_13050, label %dec_label_pc_13070, label %dec_label_pc_13058

dec_label_pc_13058:                               ; preds = %dec_label_pc_13050
  %v7_13058 = icmp eq i8 %v2_1303c, 45
  br i1 %v7_13058, label %dec_label_pc_13070, label %bb

bb:                                               ; preds = %dec_label_pc_13058
  store i32 0, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_130cc

dec_label_pc_13070:                               ; preds = %dec_label_pc_13050, %dec_label_pc_13058
  %storemerge30 = phi i32 [ 1, %dec_label_pc_13058 ], [ 0, %dec_label_pc_13050 ]
  store i32 %storemerge30, i32* %r7.global-to-local, align 4
  store i32 %v1_13034, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130cc

dec_label_pc_130cc:                               ; preds = %bb, %dec_label_pc_13070
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v2_130d4 = call i32 @function_11ba0(i32 -1, i32 10)
  %v0_130d8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v0_130d8, i32* @r1, align 4
  store i32 -1, i32* @r0, align 4
  %v1_130e4 = urem i32 %v2_130d4, 256
  store i32 %v1_130e4, i32* %sl.global-to-local, align 4
  %v0_130e8 = call i32 @function_11a90()
  store i32 0, i32* %ip.global-to-local, align 4
  store i32 %v0_130e8, i32* %r8.global-to-local, align 4
  %v0_130fc.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130fc

dec_label_pc_130f8:                               ; preds = %bb48, %dec_label_pc_13158
  %v0_130f8 = phi i32 [ %v1_13128, %bb48 ], [ %v0_130f8.pre, %dec_label_pc_13158 ]
  store i32 %v0_130f8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_130fc

dec_label_pc_130fc:                               ; preds = %dec_label_pc_130cc, %dec_label_pc_130f8
  %v0_13128 = phi i32 [ %v0_130fc.pre, %dec_label_pc_130cc ], [ %v0_130f8, %dec_label_pc_130f8 ]
  %v1_130fc = inttoptr i32 %v0_13128 to i8*
  %v2_130fc = load i8, i8* %v1_130fc, align 1
  %v3_130fc = zext i8 %v2_130fc to i32
  %v1_13100 = add nsw i32 %v3_130fc, -48
  %v1_13104 = urem i32 %v1_13100, 256
  %v1_1310c = or i32 %v3_130fc, 32
  %tmp56 = icmp ult i32 %v1_13104, 10
  br i1 %tmp56, label %bb43, label %dec_label_pc_13114

dec_label_pc_13114:                               ; preds = %dec_label_pc_130fc
  %tmp57 = icmp ugt i32 %v1_1310c, 96
  br i1 %tmp57, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13114
  %v1_13118 = add nsw i32 %v1_1310c, -87
  %v5_13120 = urem i32 %v1_13118, 256
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_130fc, %dec_label_pc_13114, %bb42
  %v3_13150 = phi i32 [ %v1_13104, %dec_label_pc_130fc ], [ 40, %dec_label_pc_13114 ], [ %v5_13120, %bb42 ]
  %v1_13124 = load i32, i32* %r5.global-to-local, align 4
  %v1_13128 = add i32 %v0_13128, 1
  store i32 %v1_13128, i32* %r4.global-to-local, align 4
  %v6_1312c = icmp slt i32 %v3_13150, %v1_13124
  br i1 %v6_1312c, label %dec_label_pc_13130, label %dec_label_pc_13170

dec_label_pc_13130:                               ; preds = %bb43
  %v0_13130 = load i32, i32* %ip.global-to-local, align 4
  %v1_13130 = load i32, i32* %r8.global-to-local, align 4
  %v9_13130 = icmp eq i32 %v0_13130, %v1_13130
  br i1 %v9_13130, label %.thread, label %bb44

.thread:                                          ; preds = %dec_label_pc_13130
  br label %dec_label_pc_13140

bb44:                                             ; preds = %dec_label_pc_13130
  %v3_13130 = icmp ult i32 %v0_13130, %v1_13130
  br i1 %v3_13130, label %dec_label_pc_13140, label %dec_label_pc_13158

dec_label_pc_13140:                               ; preds = %bb44, %.thread
  %v4_131481727 = phi i32 [ 1, %.thread ], [ 0, %bb44 ]
  %v1_13140 = load i32, i32* %sl.global-to-local, align 4
  %v3_13140 = icmp uge i32 %v3_13150, %v1_13140
  %v9_13140 = icmp eq i32 %v3_13150, %v1_13140
  %v2_13144 = xor i1 %v3_13140, true
  %v3_13144 = or i1 %v9_13140, %v2_13144
  br i1 %v3_13144, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13140
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13140, %bb45
  %v4_13148 = phi i32 [ %v4_131481727, %dec_label_pc_13140 ], [ 0, %bb45 ]
  %v2_13148 = xor i1 %v9_13140, true
  %v3_13148 = and i1 %v3_13140, %v2_13148
  br i1 %v3_13148, label %bb47, label %thread-pre-split

bb47:                                             ; preds = %bb46
  %v5_13148 = urem i32 %v4_13148, 2
  br label %thread-pre-split

thread-pre-split:                                 ; preds = %bb46, %bb47
  %v0_1314c = phi i32 [ %v5_13148, %bb47 ], [ %v4_13148, %bb46 ]
  %v2_1314c = icmp eq i32 %v0_1314c, 0
  br i1 %v2_1314c, label %bb48, label %dec_label_pc_13158

bb48:                                             ; preds = %thread-pre-split
  %v4_13150 = mul i32 %v0_13130, %v1_13124
  %v5_13150 = add i32 %v4_13150, %v3_13150
  store i32 %v5_13150, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_130f8

dec_label_pc_13158:                               ; preds = %bb44, %thread-pre-split
  %v0_13158 = call i32 @function_123ec()
  %v0_1315c = load i32, i32* %r7.global-to-local, align 4
  %v1_1315c = load i32, i32* %fp.global-to-local, align 4
  %v2_1315c = and i32 %v1_1315c, %v0_1315c
  store i32 %v2_1315c, i32* %r7.global-to-local, align 4
  store i32 -1, i32* %ip.global-to-local, align 4
  %v2_13168 = inttoptr i32 %v0_13158 to i32*
  store i32 34, i32* %v2_13168, align 4
  %v0_130f8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_130f8

dec_label_pc_13170:                               ; preds = %bb43
  %v0_13170.pre = load i32, i32* %sb.global-to-local, align 4
  %v2_13170 = icmp eq i32 %v0_13170.pre, 0
  br i1 %v2_13170, label %bb50, label %bb49

bb49:                                             ; preds = %dec_label_pc_13170
  %v1_13174 = load i32, i32* %r6.global-to-local, align 4
  %v3_13174 = inttoptr i32 %v0_13170.pre to i32*
  store i32 %v1_13174, i32* %v3_13174, align 4
  br label %bb50

bb50:                                             ; preds = %dec_label_pc_13170, %bb49
  %v0_13178 = load i32, i32* %r7.global-to-local, align 4
  %v2_13178 = icmp eq i32 %v0_13178, 0
  %. = select i1 %v2_13178, i32 2147483647, i32 -2147483648
  store i32 %., i32* %r4.global-to-local, align 4
  %v0_13184 = load i32, i32* %fp.global-to-local, align 4
  %v2_13184 = icmp eq i32 %v0_13184, 0
  %v0_131a8.pre.pre = load i32, i32* %ip.global-to-local, align 4
  br i1 %v2_13184, label %dec_label_pc_131a0, label %bb53

bb53:                                             ; preds = %bb50
  %tmp58 = icmp ugt i32 %v0_131a8.pre.pre, %.
  br i1 %tmp58, label %dec_label_pc_13190, label %dec_label_pc_131a0

dec_label_pc_13190:                               ; preds = %bb53
  %v0_13190 = call i32 @function_123ec()
  %v2_13198 = inttoptr i32 %v0_13190 to i32*
  store i32 34, i32* %v2_13198, align 4
  %v0_1319c = load i32, i32* %r4.global-to-local, align 4
  store i32 %v0_1319c, i32* %ip.global-to-local, align 4
  %v0_131a0.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_131a0

dec_label_pc_131a0:                               ; preds = %bb53, %bb50, %dec_label_pc_13190
  %v0_131a8.pre = phi i32 [ %v0_131a8.pre.pre, %bb53 ], [ %v0_1319c, %dec_label_pc_13190 ], [ %v0_131a8.pre.pre, %bb50 ]
  %v0_131a0 = phi i32 [ %v0_13178, %bb53 ], [ %v0_131a0.pre, %dec_label_pc_13190 ], [ %v0_13178, %bb50 ]
  %v2_131a0 = icmp eq i32 %v0_131a0, 0
  br i1 %v2_131a0, label %dec_label_pc_131a0._crit_edge, label %bb54

bb54:                                             ; preds = %dec_label_pc_131a0
  %v2_131a4 = sub i32 0, %v0_131a8.pre
  store i32 %v2_131a4, i32* %ip.global-to-local, align 4
  br label %dec_label_pc_131a0._crit_edge

dec_label_pc_131a0._crit_edge:                    ; preds = %dec_label_pc_131a0, %bb54
  %v0_131a8 = phi i32 [ %v2_131a4, %bb54 ], [ %v0_131a8.pre, %dec_label_pc_131a0 ]
  %v2_131ac = load i32, i32* %stack_var_-36, align 4
  store i32 %v2_131ac, i32* @r4, align 4
  ret i32 %v0_131a8

; uselistorder directives
  uselistorder i32 %v0_131a8.pre, { 1, 0 }
  uselistorder i32 %v0_131a8.pre.pre, { 1, 2, 0 }
  uselistorder i32 %v0_13170.pre, { 1, 0 }
  uselistorder i32 %v4_13148, { 1, 0 }
  uselistorder i1 %v3_13140, { 1, 0 }
  uselistorder i32 %v1_13140, { 1, 0 }
  uselistorder i32 %v1_13128, { 1, 0 }
  uselistorder i32 %v1_1310c, { 1, 0 }
  uselistorder i32 %v1_13104, { 1, 0 }
  uselistorder i32 %v0_130f8, { 1, 0 }
  uselistorder i32* %r7.global-to-local, { 4, 2, 1, 3, 0, 5 }
  uselistorder i32* %r6.global-to-local, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 5, 6, 0, 1, 3, 2, 4 }
  uselistorder i32* %ip.global-to-local, { 0, 1, 4, 2, 3, 5, 6 }
  uselistorder i32 ()* @function_11a90, { 3, 1, 4, 2, 0 }
  uselistorder i32 (i32, i32)* @function_11ba0, { 4, 2, 0, 11, 10, 6, 1, 9, 8, 7, 5, 3 }
  uselistorder i8 45, { 0, 2, 1 }
  uselistorder i8 32, { 0, 8, 9, 10, 1, 11, 12, 13, 2, 3, 4, 5, 6, 7 }
  uselistorder label %dec_label_pc_131a0._crit_edge, { 1, 0 }
  uselistorder label %dec_label_pc_131a0, { 2, 0, 1 }
  uselistorder label %bb50, { 1, 0 }
  uselistorder label %dec_label_pc_13158, { 1, 0 }
  uselistorder label %thread-pre-split, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %bb43, { 2, 1, 0 }
  uselistorder label %dec_label_pc_130fc, { 1, 0 }
  uselistorder label %dec_label_pc_130f8, { 1, 0 }
  uselistorder label %dec_label_pc_130cc, { 1, 0 }
  uselistorder label %dec_label_pc_13070, { 1, 0 }
}

define i32 @function_131b4(i32 %arg1) local_unnamed_addr {
dec_label_pc_131b4:
  %stack_var_-16 = alloca i32, align 4
  %v2_131b4 = ptrtoint i32* %stack_var_-16 to i32
  store i32 %arg1, i32* @r4, align 4
  store i32 %v2_131b4, i32* @r0, align 4
  %v8_131d0 = call i32 @function_13460(i32 %v2_131b4, i32 ptrtoint (i32* @global_var_13458.394 to i32), i32 ptrtoint (i32* @global_var_1d154.448 to i32), i32 78944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  %v1_131e0 = call i32 @function_13458()
  %v2_131e8 = load i32, i32* @global_var_1d20c.452, align 4
  %v2_131ec = icmp eq i32 %v2_131e8, 0
  br i1 %v2_131ec, label %.thread1, label %bb

bb:                                               ; preds = %dec_label_pc_131b4
  call void @__pseudo_branch(i32 %v2_131e8)
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_131b4, %bb
  store i32 %v2_131b4, i32* @r0, align 4
  store i32 ptrtoint (i32* @global_var_13210.454 to i32), i32* @lr, align 4
  %v8_1320c = call i32 @function_13460(i32 %v2_131b4, i32 1, i32 ptrtoint (i32* @global_var_1d154.448 to i32), i32 78944, i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32))
  store i32 %v8_1320c, i32* @r0, align 4
  %v1_13210 = call i32 @function_133ec(i32 %v8_1320c)
  store i1 true, i1* @cpsr_z, align 1
  %v0_13224 = load i32, i32* @r4, align 4
  %v1_13228 = call i32 @function_1385c(i32 %v0_13224)
  unreachable

; uselistorder directives
  uselistorder i32 %v2_131b4, { 1, 0, 3, 2 }
  uselistorder i32 ()* @function_13458, { 4, 3, 2, 1, 18, 17, 16, 15, 14, 0, 13, 12, 11, 10, 9, 8, 7, 6, 5, 21, 20, 19 }
  uselistorder i32 (i32, i32, i32, i32, i32, i32, i32)* @function_13460, { 1, 0, 5, 4, 3, 2 }
  uselistorder i32 78944, { 1, 0, 3, 4, 2, 5, 6, 7 }
  uselistorder i32 ptrtoint (i32* @global_var_1d154.448 to i32), { 1, 0 }
  uselistorder i32 ptrtoint (i32* @global_var_13458.394 to i32), { 0, 3, 1, 2 }
  uselistorder label %.thread1, { 1, 0 }
}

define i32 @function_13248(i32 %arg1) local_unnamed_addr {
dec_label_pc_13248:
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-424 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v3_13248 = load i32, i32* @r4, align 4
  store i32 %v3_13248, i32* %stack_var_-20, align 4
  %v6_13248 = load i32, i32* @r5, align 4
  %v9_13248 = load i32, i32* @r6, align 4
  %v16_13248 = ptrtoint i32* %stack_var_-20 to i32
  store i32 %arg1, i32* @ip, align 4
  %v2_1324c = icmp eq i32 %arg1, 0
  %v2_13250 = ptrtoint i32* %stack_var_-424 to i32
  br i1 %v2_1324c, label %dec_label_pc_133d4, label %dec_label_pc_13268.preheader

dec_label_pc_13268.preheader:                     ; preds = %dec_label_pc_13248
  store i32 31, i32* %r1.global-to-local, align 4
  %v5_1327017 = add i32 %v16_13248, 124
  br label %dec_label_pc_13260

dec_label_pc_13260:                               ; preds = %dec_label_pc_13268.preheader, %dec_label_pc_13260
  %v5_1327018 = phi i32 [ %v5_1327017, %dec_label_pc_13268.preheader ], [ %v5_13270, %dec_label_pc_13260 ]
  %v2_13264 = add i32 %v5_1327018, -136
  %v3_13264 = inttoptr i32 %v2_13264 to i32*
  store i32 0, i32* %v3_13264, align 4
  %v0_13268.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_13268 = add i32 %v0_13268.pre, -1
  store i32 %v1_13268, i32* %r1.global-to-local, align 4
  %v6_13268 = icmp slt i32 %v1_13268, 0
  %v4_13270 = mul i32 %v1_13268, 4
  %v5_13270 = add i32 %v4_13270, %v16_13248
  br i1 %v6_13268, label %dec_label_pc_13278, label %dec_label_pc_13260

dec_label_pc_13278:                               ; preds = %dec_label_pc_13260
  %v2_13278 = ptrtoint i32* %stack_var_-156 to i32
  store i32 0, i32* @r5, align 4
  store i32 %v2_13278, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_13288 = load i32, i32* @ip, align 4
  store i32 %v0_13288, i32* %stack_var_-28, align 4
  %v0_13290 = call i32 @function_1287c()
  store i32 %v0_13290, i32* %r0.global-to-local, align 4
  %v1_13294 = load i32, i32* @r5, align 4
  %v5_13298 = icmp slt i32 %v0_13290, %v1_13294
  br i1 %v5_13298, label %dec_label_pc_133dc, label %dec_label_pc_1329c

dec_label_pc_1329c:                               ; preds = %dec_label_pc_13278
  %v2_1329c = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_1329c, i32* @r4, align 4
  store i32 %v1_13294, i32* %r0.global-to-local, align 4
  store i32 %v2_13278, i32* %r1.global-to-local, align 4
  %v3_132ac = bitcast i32* %stack_var_-156 to %_TYPEDEF_sigset_t*
  %v4_132ac = call i32 @function_12094(i32 %v1_13294, %_TYPEDEF_sigset_t* %v3_132ac, i32 %v2_1329c)
  store i32 %v4_132ac, i32* %r0.global-to-local, align 4
  %v1_132b0 = load i32, i32* @r5, align 4
  %v9_132b0 = icmp eq i32 %v4_132ac, %v1_132b0
  br i1 %v9_132b0, label %dec_label_pc_132b8, label %dec_label_pc_133dc

dec_label_pc_132b8:                               ; preds = %dec_label_pc_1329c
  store i32 17, i32* %r1.global-to-local, align 4
  store i32 %v2_1329c, i32* %r0.global-to-local, align 4
  %v2_132c0 = call i32 @function_12858(i32 %v2_1329c, i32 17)
  store i32 %v2_132c0, i32* %r0.global-to-local, align 4
  %v1_132c4 = load i32, i32* @r5, align 4
  %v9_132c4 = icmp eq i32 %v2_132c0, %v1_132c4
  br i1 %v9_132c4, label %dec_label_pc_132dc.preheader, label %dec_label_pc_132b8.dec_label_pc_133a4_crit_edge

dec_label_pc_132b8.dec_label_pc_133a4_crit_edge:  ; preds = %dec_label_pc_132b8
  %.pre = ptrtoint i32* %stack_var_-28 to i32
  br label %dec_label_pc_133a4

dec_label_pc_132dc.preheader:                     ; preds = %dec_label_pc_132b8
  store i32 31, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_132d4

dec_label_pc_132d4:                               ; preds = %dec_label_pc_132dc.preheader, %dec_label_pc_132d4
  %v5_132e416 = phi i32 [ %v5_1327017, %dec_label_pc_132dc.preheader ], [ %v5_132e4, %dec_label_pc_132d4 ]
  %v2_132d8 = add i32 %v5_132e416, -136
  %v3_132d8 = inttoptr i32 %v2_132d8 to i32*
  store i32 0, i32* %v3_132d8, align 4
  %v0_132dc.pre = load i32, i32* %r1.global-to-local, align 4
  %v1_132dc = add i32 %v0_132dc.pre, -1
  store i32 %v1_132dc, i32* %r1.global-to-local, align 4
  %v6_132dc = icmp slt i32 %v1_132dc, 0
  %v4_132e4 = mul i32 %v1_132dc, 4
  %v5_132e4 = add i32 %v4_132e4, %v16_13248
  br i1 %v6_132dc, label %dec_label_pc_132ec, label %dec_label_pc_132d4

dec_label_pc_132ec:                               ; preds = %dec_label_pc_132d4
  store i32 %v2_13278, i32* @r0, align 4
  store i32 17, i32* @r1, align 4
  %v0_132f4 = call i32 @function_1287c()
  store i32 %v0_132f4, i32* %r0.global-to-local, align 4
  %v1_132f8 = icmp slt i32 %v0_132f4, 0
  br i1 %v1_132f8, label %dec_label_pc_133dc, label %dec_label_pc_13300

dec_label_pc_13300:                               ; preds = %dec_label_pc_132ec
  store i32 17, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  %v4_1330c = call i32 @function_13744(i32 17, i32* null, i32 %v2_13250)
  store i32 %v4_1330c, i32* %r0.global-to-local, align 4
  %v1_13310 = icmp slt i32 %v4_1330c, 0
  br i1 %v1_13310, label %dec_label_pc_13318, label %dec_label_pc_13340

dec_label_pc_13318:                               ; preds = %dec_label_pc_13300
  %v0_13318 = call i32 @function_123ec()
  store i32 %v2_1329c, i32* %r1.global-to-local, align 4
  store i32 %v0_13318, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_1332c = inttoptr i32 %v0_13318 to i32*
  %v2_1332c = load i32, i32* %v1_1332c, align 4
  store i32 %v2_1332c, i32* @r4, align 4
  %v3_13330 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13330 = call i32 @function_12094(i32 2, %_TYPEDEF_sigset_t* %v3_13330, i32 0)
  store i32 -1, i32* %r0.global-to-local, align 4
  %v0_13338 = load i32, i32* @r4, align 4
  %v1_13338 = load i32, i32* %r5.global-to-local, align 4
  %v2_13338 = inttoptr i32 %v1_13338 to i32*
  store i32 %v0_13338, i32* %v2_13338, align 4
  %v17_133e4.pre = load i32, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133e0

dec_label_pc_13340:                               ; preds = %dec_label_pc_13300
  %v2_13340 = load i32, i32* %stack_var_-424, align 4
  %v7_13344 = icmp eq i32 %v2_13340, 1
  %v2_1334c = ptrtoint i32* %stack_var_-28 to i32
  store i32 %v2_1334c, i32* @r4, align 4
  br i1 %v7_13344, label %dec_label_pc_13354, label %dec_label_pc_13388

dec_label_pc_13354:                               ; preds = %dec_label_pc_13340
  store i32 %v2_1334c, i32* %r1.global-to-local, align 4
  store i32 %v2_1334c, i32* %r0.global-to-local, align 4
  %v2_1335c = bitcast i32* %stack_var_-28 to %timespec*
  %v3_1335c = call i32 @function_13be0(%timespec* %v2_1335c, i32 %v2_1334c)
  store i32 %v3_1335c, i32* %r0.global-to-local, align 4
  store i32 %v3_1335c, i32* %r6.global-to-local, align 4
  %v0_13364 = call i32 @function_123ec()
  store i32 %v2_1329c, i32* %r1.global-to-local, align 4
  store i32 %v0_13364, i32* %r5.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v1_13378 = inttoptr i32 %v0_13364 to i32*
  %v2_13378 = load i32, i32* %v1_13378, align 4
  store i32 %v2_13378, i32* @r4, align 4
  %v3_1337c = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_1337c = call i32 @function_12094(i32 2, %_TYPEDEF_sigset_t* %v3_1337c, i32 0)
  store i32 %v4_1337c, i32* %r0.global-to-local, align 4
  %v0_13380 = load i32, i32* @r4, align 4
  %v1_13380 = load i32, i32* %r5.global-to-local, align 4
  %v2_13380 = inttoptr i32 %v1_13380 to i32*
  store i32 %v0_13380, i32* %v2_13380, align 4
  %v0_133b0.pr = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_133b0

dec_label_pc_13388:                               ; preds = %dec_label_pc_13340
  store i32 %v2_1329c, i32* %r1.global-to-local, align 4
  store i32 2, i32* %r0.global-to-local, align 4
  %v3_13394 = bitcast i32* %stack_var_-284 to %_TYPEDEF_sigset_t*
  %v4_13394 = call i32 @function_12094(i32 2, %_TYPEDEF_sigset_t* %v3_13394, i32 0)
  store i32 %v4_13394, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133a4

dec_label_pc_133a4:                               ; preds = %dec_label_pc_132b8.dec_label_pc_133a4_crit_edge, %dec_label_pc_13388
  %storemerge.pre-phi = phi i32 [ %.pre, %dec_label_pc_132b8.dec_label_pc_133a4_crit_edge ], [ %v2_1334c, %dec_label_pc_13388 ]
  store i32 %storemerge.pre-phi, i32* %r0.global-to-local, align 4
  store i32 %storemerge.pre-phi, i32* %r1.global-to-local, align 4
  %v2_133a8 = bitcast i32* %stack_var_-28 to %timespec*
  %v3_133a8 = call i32 @function_13be0(%timespec* %v2_133a8, i32 %storemerge.pre-phi)
  store i32 %v3_133a8, i32* %r0.global-to-local, align 4
  store i32 %v3_133a8, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_133b0

dec_label_pc_133b0:                               ; preds = %dec_label_pc_13354, %dec_label_pc_133a4
  %v0_133b0 = phi i32 [ %v0_133b0.pr, %dec_label_pc_13354 ], [ %v3_133a8, %dec_label_pc_133a4 ]
  %v2_133b0 = icmp eq i32 %v0_133b0, 0
  br i1 %v2_133b0, label %dec_label_pc_133d4, label %dec_label_pc_133b8

dec_label_pc_133b8:                               ; preds = %dec_label_pc_133b0
  store i32 0, i32* %r1.global-to-local, align 4
  %v3_133c0 = load i32, i32* %stack_var_-28, align 4
  store i32 %v3_133c0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133e0

dec_label_pc_133d4:                               ; preds = %dec_label_pc_13248, %dec_label_pc_133b0
  store i32 0, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133e0

dec_label_pc_133dc:                               ; preds = %dec_label_pc_1329c, %dec_label_pc_132ec, %dec_label_pc_13278
  store i32 -1, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_133e0

dec_label_pc_133e0:                               ; preds = %dec_label_pc_133b8, %dec_label_pc_133d4, %dec_label_pc_13318, %dec_label_pc_133dc
  %v17_133e4 = phi i32 [ %v3_133c0, %dec_label_pc_133b8 ], [ 0, %dec_label_pc_133d4 ], [ %v17_133e4.pre, %dec_label_pc_13318 ], [ -1, %dec_label_pc_133dc ]
  %v2_133e4 = load i32, i32* %stack_var_-20, align 4
  store i32 %v2_133e4, i32* @r4, align 4
  store i32 %v6_13248, i32* @r5, align 4
  store i32 %v9_13248, i32* @r6, align 4
  ret i32 %v17_133e4

; uselistorder directives
  uselistorder i32 %storemerge.pre-phi, { 1, 2, 0 }
  uselistorder i32 %v2_1334c, { 0, 3, 1, 2, 4 }
  uselistorder i32 %v1_132dc, { 0, 2, 1 }
  uselistorder i32 %v2_1329c, { 0, 1, 2, 4, 3, 5, 6 }
  uselistorder i32 %v1_13294, { 1, 0, 2 }
  uselistorder i32 %v1_13268, { 0, 2, 1 }
  uselistorder i32 %v16_13248, { 1, 2, 0 }
  uselistorder i32* %stack_var_-20, { 0, 2, 1 }
  uselistorder i32* %stack_var_-284, { 2, 1, 0, 3 }
  uselistorder i32* %stack_var_-28, { 3, 2, 1, 5, 0, 4 }
  uselistorder i32* %r1.global-to-local, { 0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 8, 9, 10, 13, 14 }
  uselistorder i32* %r0.global-to-local, { 2, 3, 4, 5, 1, 7, 6, 9, 8, 22, 10, 12, 13, 11, 15, 14, 16, 21, 17, 20, 18, 19, 0 }
  uselistorder i32 (i32, i32*, i32)* @function_13744, { 1, 2, 0 }
  uselistorder i32 (i32, %_TYPEDEF_sigset_t*, i32)* @function_12094, { 1, 2, 3, 4, 0 }
  uselistorder i32 ()* @function_1287c, { 2, 1, 0, 3, 4 }
  uselistorder i32 -136, { 1, 2, 0 }
  uselistorder label %dec_label_pc_133e0, { 3, 1, 0, 2 }
  uselistorder label %dec_label_pc_133dc, { 1, 0, 2 }
  uselistorder label %dec_label_pc_133d4, { 1, 0 }
  uselistorder label %dec_label_pc_133b0, { 1, 0 }
  uselistorder label %dec_label_pc_133a4, { 1, 0 }
  uselistorder label %dec_label_pc_132d4, { 1, 0 }
  uselistorder label %dec_label_pc_13260, { 1, 0 }
}

define i32 @function_133ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_13418:
  %stack_var_-8 = alloca i32, align 4
  %v3_133ec = load i32, i32* @r4, align 4
  store i32 %v3_133ec, i32* %stack_var_-8, align 4
  %v2_1341c = load i32, i32* @global_var_1d21c.461, align 4
  %v2_13420 = icmp eq i32 %v2_1341c, 0
  br i1 %v2_13420, label %.thread, label %bb

bb:                                               ; preds = %dec_label_pc_13418
  store i32 78892, i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_1341c)
  br label %.thread

.thread:                                          ; preds = %dec_label_pc_13418, %bb
  %v2_13430 = load i32, i32* @global_var_1d220.463, align 4
  %v2_13434 = icmp eq i32 %v2_13430, 0
  br i1 %v2_13434, label %bb12, label %bb13

bb12:                                             ; preds = %.thread
  %v3_13438 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_13438, i32* @r4, align 4
  %v9_13438 = load i32, i32* @r0, align 4
  ret i32 %v9_13438

bb13:                                             ; preds = %.thread
  store i32 ptrtoint (i32* @global_var_13444.464 to i32), i32* @lr, align 4
  call void @__pseudo_branch(i32 %v2_13430)
  %v2_13444 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13444, i32* @r4, align 4
  %v8_13444 = load i32, i32* @r0, align 4
  ret i32 %v8_13444

; uselistorder directives
  uselistorder label %.thread, { 1, 0 }
}

define i32 @function_13458() local_unnamed_addr {
dec_label_pc_13458:
  ret i32 0
}

define i32 @function_13460(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_13460:
  %v1_13460 = load i32, i32* @r0, align 4
  ret i32 %v1_13460
}

define i32 @function_13464(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13464:
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13464 = load i32, i32* @r4, align 4
  store i32 %v3_13464, i32* %stack_var_-12, align 4
  store i32 %arg2, i32* @r4, align 4
  store i32 %arg1, i32* %r5.global-to-local, align 4
  %v2_13474 = call i32 @function_11d54(i32 %arg1, i32 1)
  %v7_13478 = icmp eq i32 %v2_13474, -1
  br i1 %v7_13478, label %bb4, label %bb

bb:                                               ; preds = %dec_label_pc_13464
  %v3_1347c = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_1347c, i32* @r4, align 4
  ret i32 %v2_13474

bb4:                                              ; preds = %dec_label_pc_13464
  %v0_13480 = load i32, i32* @r4, align 4
  %v4_13488 = call i32 @function_11f44(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_14934.466, i32 0, i32 0), i32 %v0_13480)
  %v1_1348c = load i32, i32* %r5.global-to-local, align 4
  %v9_1348c = icmp eq i32 %v4_13488, %v1_1348c
  br i1 %v9_1348c, label %bb5, label %bb6

bb5:                                              ; preds = %bb4
  %v3_13490 = load i32, i32* %stack_var_-12, align 4
  store i32 %v3_13490, i32* @r4, align 4
  ret i32 %v4_13488

bb6:                                              ; preds = %bb4
  %v0_13494 = call i32 @function_12ec0()
  %v0_13498 = load i1, i1* @cpsr_z, align 1
  br i1 %v0_13498, label %bb7, label %bb8

bb7:                                              ; preds = %bb6
  %v2_13498 = load i32, i32* @r4, align 4
  %v3_13498 = load i32, i32* @sb, align 4
  %v8_13498 = lshr i32 %v2_13498, %v3_13498
  %v9_13498 = and i32 %v8_13498, %v0_13480
  store i32 %v9_13498, i32* @r4, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb7
  ret i32 %v0_13494

; uselistorder directives
  uselistorder i32 %v2_13474, { 1, 0 }
  uselistorder i32* @sb, { 83, 3, 4, 7, 1, 2, 5, 6, 11, 10, 8, 9, 12, 13, 74, 75, 76, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 77, 78, 79, 80, 81, 82, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33 }
  uselistorder i1* @cpsr_z, { 11, 10, 0, 1, 12, 9, 6, 7, 2, 3, 4, 5, 8 }
  uselistorder i32 ()* @function_12ec0, { 0, 2, 1, 3 }
  uselistorder i32 (i8*, i32)* @function_11f44, { 9, 4, 0, 1, 2, 7, 8, 3, 5, 6 }
  uselistorder i32 (i32, i32)* @function_11d54, { 0, 5, 13, 12, 15, 14, 9, 8, 11, 10, 7, 6, 4, 3, 2, 1 }
  uselistorder i32 %arg1, { 1, 0 }
  uselistorder label %bb8, { 1, 0 }
}

define i32 @function_1349c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1349c:
  %v2_134a0 = load i32, i32* @global_var_1d224.468, align 4
  %v2_134a4 = icmp eq i32 %v2_134a0, 0
  br i1 %v2_134a4, label %bb2, label %bb

bb:                                               ; preds = %dec_label_pc_1349c
  %v6_134b0 = load i32, i32* @r0, align 4
  ret i32 %v6_134b0

bb2:                                              ; preds = %dec_label_pc_1349c
  store i32 1, i32* @global_var_1d224.468, align 4
  store i32 4096, i32* @global_var_1d218.419, align 4
  ret i32 undef
}

define i32 @function_134f8(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_134f8:
  %r6.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg3 to i32
  %tmp35 = call i32 @__decompiler_undefined_function_0()
  %tmp36 = call i32 @__decompiler_undefined_function_0()
  %tmp37 = call i32 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i32, align 4
  store i32 %tmp, i32* %r6.global-to-local, align 4
  %v4_134fc = mul i32 %arg2, 4
  %v5_134fc = add i32 %tmp, %v4_134fc
  %v2_13500 = load i32, i32* %arg3, align 4
  %v2_13504 = ptrtoint i32* %stack_var_-120 to i32
  %v1_13508 = add i32 %v5_134fc, 4
  %v9_1350c = icmp eq i32 %v1_13508, %v2_13500
  store i32 %arg2, i32* %r8.global-to-local, align 4
  store i32 %arg7, i32* @global_var_1d210.473, align 4
  store i32 %v1_13508, i32* @global_var_1d214.475, align 4
  store i32 %arg6, i32* @global_var_1d220.463, align 4
  store i32 120, i32* @r2, align 4
  br i1 %v9_1350c, label %bb, label %bb41

bb:                                               ; preds = %dec_label_pc_134f8
  store i32 %v5_134fc, i32* @global_var_1d214.475, align 4
  br label %bb41

bb41:                                             ; preds = %dec_label_pc_134f8, %bb
  %v2_1354c = bitcast i32* %stack_var_-120 to i8*
  %v3_1354c = call i32 @function_12450(i8* %v2_1354c, i32 0)
  %storemerge.pre = load i32, i32* @global_var_1d214.475, align 4
  br label %dec_label_pc_1355c

dec_label_pc_1355c:                               ; preds = %dec_label_pc_1355c, %bb41
  %storemerge = phi i32 [ %storemerge.pre, %bb41 ], [ %v4_1355c, %dec_label_pc_1355c ]
  %v1_1355c = inttoptr i32 %storemerge to i32*
  %v2_1355c = load i32, i32* %v1_1355c, align 4
  %v4_1355c = add i32 %storemerge, 4
  %v2_13560 = icmp eq i32 %v2_1355c, 0
  br i1 %v2_13560, label %dec_label_pc_1356c, label %dec_label_pc_1355c

dec_label_pc_1356c:                               ; preds = %dec_label_pc_1355c
  store i32 %v4_1355c, i32* @r4, align 4
  %v1_1358c22 = inttoptr i32 %v4_1355c to i32*
  %v2_1358c23 = load i32, i32* %v1_1358c22, align 4
  %v2_1359025 = icmp eq i32 %v2_1358c23, 0
  br i1 %v2_1359025, label %dec_label_pc_13598, label %dec_label_pc_13574

dec_label_pc_13574:                               ; preds = %dec_label_pc_1356c, %dec_label_pc_1358c
  %v5_13578 = phi i32 [ %v2_1358c, %dec_label_pc_1358c ], [ %v2_1358c23, %dec_label_pc_1356c ]
  %v2_13574 = icmp ugt i32 %v5_13578, 13
  %v7_13574 = icmp eq i32 %v5_13578, 14
  %v2_13578 = xor i1 %v2_13574, true
  %v3_13578 = or i1 %v7_13574, %v2_13578
  br i1 %v3_13578, label %bb42, label %bb43

bb42:                                             ; preds = %dec_label_pc_13574
  %v6_13578 = and i32 %v5_13578, 536870912
  %v7_13578 = icmp ne i32 %v6_13578, 0
  br label %bb43

bb43:                                             ; preds = %dec_label_pc_13574, %bb42
  %v1_13584 = phi i1 [ %v2_13574, %dec_label_pc_13574 ], [ %v7_13578, %bb42 ]
  %v2_1357c = xor i1 %v1_13584, true
  %v3_1357c = or i1 %v7_13574, %v2_1357c
  br i1 %v3_1357c, label %bb44, label %dec_label_pc_1358c

bb44:                                             ; preds = %bb43
  br label %dec_label_pc_1358c

dec_label_pc_1358c:                               ; preds = %bb43, %bb44
  call void @__pseudo_cond_branch(i1 %v3_1357c, i32 ptrtoint (i32* @global_var_12430.477 to i32))
  %v0_13588 = load i32, i32* @r4, align 4
  %v1_13588 = add i32 %v0_13588, 8
  store i32 %v1_13588, i32* @r4, align 4
  %v1_1358c = inttoptr i32 %v1_13588 to i32*
  %v2_1358c = load i32, i32* %v1_1358c, align 4
  %v2_13590 = icmp eq i32 %v2_1358c, 0
  br i1 %v2_13590, label %dec_label_pc_13598, label %dec_label_pc_13574

dec_label_pc_13598:                               ; preds = %dec_label_pc_1358c, %dec_label_pc_1356c
  %v1_1359c = call i32 @function_14604(i32 %v2_13504)
  store i32 %v1_1359c, i32* @r0, align 4
  %v1_135a0 = call i32 @function_1349c(i32 %v1_1359c)
  store i32 %v1_135a0, i32* @r0, align 4
  %v2_135ac = icmp eq i32 %tmp37, 0
  br i1 %v2_135ac, label %bb45, label %bb46

bb45:                                             ; preds = %dec_label_pc_13598
  br label %bb46

bb46:                                             ; preds = %dec_label_pc_13598, %bb45
  %v0_135bc = phi i32 [ %tmp37, %dec_label_pc_13598 ], [ 4096, %bb45 ]
  %v3_135b4 = icmp eq i32 %tmp36, -1
  %v8_135b4 = icmp eq i32 %tmp36, -1
  store i32 ptrtoint (i32* @global_var_1d218.419 to i32), i32* @r2, align 4
  store i32 %v0_135bc, i32* @global_var_1d218.419, align 4
  br i1 %v3_135b4, label %dec_label_pc_135c4, label %dec_label_pc_135ec

dec_label_pc_135c4:                               ; preds = %bb46
  %v0_135c4 = call i32 @function_13b50()
  store i32 %v0_135c4, i32* @r0, align 4
  store i32 %v0_135c4, i32* @r4, align 4
  %v0_135cc = call i32 @function_13af8()
  %v0_135d0 = load i32, i32* @r4, align 4
  %v9_135d0 = icmp eq i32 %v0_135d0, %v0_135cc
  br i1 %v9_135d0, label %dec_label_pc_135d8, label %dec_label_pc_13614

dec_label_pc_135d8:                               ; preds = %dec_label_pc_135c4
  %v1_135d8 = call i32 @function_13b24(i32 %v0_135cc)
  store i32 %v1_135d8, i32* @r0, align 4
  store i32 %v1_135d8, i32* @r4, align 4
  %v0_135e0 = call i32 @function_13acc()
  %v0_135e4 = load i32, i32* @r4, align 4
  %v9_135e4 = icmp eq i32 %v0_135e4, %v0_135e0
  br i1 %v9_135e4, label %dec_label_pc_135ec, label %dec_label_pc_13614

dec_label_pc_135ec:                               ; preds = %dec_label_pc_135d8, %bb46
  store i32 %tmp36, i32* @r2, align 4
  br i1 %v8_135b4, label %dec_label_pc_13680, label %dec_label_pc_135f8

dec_label_pc_135f8:                               ; preds = %dec_label_pc_135ec
  %v9_135fc = icmp eq i32 %tmp36, %tmp35
  br i1 %v9_135fc, label %dec_label_pc_13604, label %dec_label_pc_13614

dec_label_pc_13604:                               ; preds = %dec_label_pc_135f8
  br label %dec_label_pc_13614

dec_label_pc_13614:                               ; preds = %dec_label_pc_13604, %dec_label_pc_135f8, %dec_label_pc_135d8, %dec_label_pc_135c4
  %v2_1361c = call i32 @function_13464(i32 0, i32 32768)
  %v2_13628 = call i32 @function_13464(i32 1, i32 32770)
  %v2_13634 = call i32 @function_13464(i32 2, i32 32770)
  br label %dec_label_pc_13680

dec_label_pc_13680:                               ; preds = %dec_label_pc_13614, %dec_label_pc_135ec
  %v0_13644 = load i32, i32* %r6.global-to-local, align 4
  %v1_13644 = inttoptr i32 %v0_13644 to i32*
  %v2_13644 = load i32, i32* %v1_13644, align 4
  store i32 %v2_13644, i32* @global_var_1d16c, align 4
  store i32 %arg5, i32* @global_var_1d21c.461, align 4
  %v2_13680 = icmp eq i32 %arg4, 0
  br i1 %v2_13680, label %dec_label_pc_136bc, label %bb47

bb47:                                             ; preds = %dec_label_pc_13680
  br label %dec_label_pc_136bc

dec_label_pc_136bc:                               ; preds = %dec_label_pc_13680, %bb47
  call void @__pseudo_branch(i32 %arg4)
  %v1_136cc = call i32 @function_123ec()
  %v2_136d4 = inttoptr i32 %v1_136cc to i32*
  store i32 0, i32* %v2_136d4, align 4
  %v0_13700 = load i32, i32* %r8.global-to-local, align 4
  call void @__pseudo_branch(i32 %arg1)
  %v1_1370c = call i32 @function_131b4(i32 %v0_13700)
  ret i32 %v1_1370c

; uselistorder directives
  uselistorder i32 %v2_1358c, { 1, 0 }
  uselistorder i32 %v1_13588, { 1, 0 }
  uselistorder i1 %v2_13574, { 1, 0 }
  uselistorder i32 %v4_1355c, { 1, 0, 2 }
  uselistorder i32 %storemerge, { 1, 0 }
  uselistorder i32 %tmp36, { 1, 3, 0, 2 }
  uselistorder i32 (i32)* @function_131b4, { 0, 8, 7, 6, 5, 4, 3, 2, 1 }
  uselistorder i32 (i32, i32)* @function_13464, { 2, 1, 0 }
  uselistorder i32 32768, { 1, 2, 0 }
  uselistorder i32* @global_var_1d218.419, { 1, 4, 0, 2, 3 }
  uselistorder i32 4096, { 0, 1, 5, 9, 2, 3, 6, 10, 7, 11, 4, 8, 12, 13 }
  uselistorder i32 536870912, { 1, 0 }
  uselistorder i1 true, { 0, 1, 75, 2, 3, 4, 5, 6, 7, 8, 42, 9, 10, 11, 12, 13, 99, 40, 43, 52, 100, 19, 20, 76, 44, 16, 77, 78, 79, 80, 81, 82, 83, 84, 62, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 17, 18, 97, 98, 61, 41, 53, 101, 14, 15, 60, 31, 102, 33, 32, 48, 55, 49, 56, 50, 57, 51, 59, 103, 21, 104, 105, 22, 106, 63, 64, 107, 65, 66, 108, 67, 68, 23, 24, 109, 69, 70, 25, 26, 110, 71, 72, 27, 28, 111, 73, 74, 29, 30, 47, 112, 113, 58, 114, 34, 54, 35, 45, 36, 46, 37, 38, 39 }
  uselistorder i32 %arg4, { 1, 0 }
  uselistorder label %dec_label_pc_136bc, { 1, 0 }
  uselistorder label %bb46, { 1, 0 }
  uselistorder label %dec_label_pc_1358c, { 1, 0 }
  uselistorder label %bb43, { 1, 0 }
  uselistorder label %dec_label_pc_13574, { 1, 0 }
  uselistorder label %bb41, { 1, 0 }
}

define i32 @function_13744(i32 %arg1, i32* %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_13744:
  %r0.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i32* %arg2 to i32
  store i32 %arg1, i32* %r0.global-to-local, align 4
  %stack_var_-284 = alloca i32, align 4
  %stack_var_-156 = alloca i32, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-296 = alloca i32, align 4
  %v3_13744 = load i32, i32* @r4, align 4
  %v6_13744 = load i32, i32* @r5, align 4
  store i32 %tmp, i32* @r4, align 4
  %v2_13748 = icmp eq i32* %arg2, null
  %v2_1374c = ptrtoint i32* %stack_var_-296 to i32
  store i32 %arg1, i32* %r6.global-to-local, align 4
  store i32 %arg3, i32* @r5, align 4
  br i1 %v2_13748, label %dec_label_pc_137b8, label %dec_label_pc_1375c

dec_label_pc_1375c:                               ; preds = %dec_label_pc_13744
  %v2_13760 = load i32, i32* %arg2, align 4
  %v4_13760 = add i32 %tmp, 4
  store i32 %v4_13760, i32* @r1, align 4
  %v2_13764 = ptrtoint i32* %stack_var_-144 to i32
  store i32 %v2_13764, i32* @r0, align 4
  store i32 128, i32* @r2, align 4
  store i32 %v2_13760, i32* %stack_var_-156, align 4
  %v3_13770 = call i32 @function_12430(i32 %v2_13764, i32 %v4_13760, i32 128)
  store i32 %v3_13770, i32* %r0.global-to-local, align 4
  %v0_13774 = load i32, i32* @r4, align 4
  %v1_13774 = add i32 %v0_13774, 132
  %v2_13774 = inttoptr i32 %v1_13774 to i32*
  %v3_13774 = load i32, i32* %v2_13774, align 4
  %v1_13778 = and i32 %v3_13774, 67108864
  %v2_13778 = icmp eq i32 %v1_13778, 0
  br i1 %v2_13778, label %dec_label_pc_1378c, label %bb

bb:                                               ; preds = %dec_label_pc_1375c
  br label %dec_label_pc_137a8

dec_label_pc_1378c:                               ; preds = %dec_label_pc_1375c
  %v1_13794 = and i32 %v3_13774, 4
  %v2_13794 = icmp eq i32 %v1_13794, 0
  br i1 %v2_13794, label %bb21, label %bb20

bb20:                                             ; preds = %dec_label_pc_1378c
  br label %bb21

bb21:                                             ; preds = %dec_label_pc_1378c, %bb20
  br label %dec_label_pc_137a8

dec_label_pc_137a8:                               ; preds = %bb, %bb21
  %v2_137a8 = icmp eq i32 %v0_13774, 0
  %v3_137ac = ptrtoint i32* %stack_var_-156 to i32
  %.v3_137ac = select i1 %v2_137a8, i32 0, i32 %v3_137ac
  %v0_137b8.pre = load i32, i32* @r5, align 4
  %v0_137c8.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_137b8

dec_label_pc_137b8:                               ; preds = %dec_label_pc_137a8, %dec_label_pc_13744
  %v0_137c8 = phi i32 [ %arg1, %dec_label_pc_13744 ], [ %v0_137c8.pre, %dec_label_pc_137a8 ]
  %v0_137b8 = phi i32 [ %arg3, %dec_label_pc_13744 ], [ %v0_137b8.pre, %dec_label_pc_137a8 ]
  %storemerge = phi i32 [ 0, %dec_label_pc_13744 ], [ %.v3_137ac, %dec_label_pc_137a8 ]
  store i32 %storemerge, i32* @r1, align 4
  %v2_137b8 = icmp eq i32 %v0_137b8, 0
  %.v2_1374c = select i1 %v2_137b8, i32 0, i32 %v2_1374c
  store i32 %.v2_1374c, i32* @r2, align 4
  store i32 %v0_137c8, i32* %r0.global-to-local, align 4
  %v1_137cc = call i32 @function_13830(i32 %v0_137c8)
  store i32 %v1_137cc, i32* %r0.global-to-local, align 4
  %v0_137d0 = load i32, i32* @r5, align 4
  %v2_137d0 = icmp eq i32 %v0_137d0, 0
  br i1 %v2_137d0, label %bb26, label %bb25

bb25:                                             ; preds = %dec_label_pc_137b8
  br label %bb26

bb26:                                             ; preds = %dec_label_pc_137b8, %bb25
  %v0_137e0.pr = phi i32 [ 0, %dec_label_pc_137b8 ], [ 1, %bb25 ]
  %v1_137d8 = icmp slt i32 %v1_137cc, 0
  br i1 %v1_137d8, label %thread-pre-split.thread, label %thread-pre-split

thread-pre-split.thread:                          ; preds = %bb26
  br label %dec_label_pc_13814

thread-pre-split:                                 ; preds = %bb26
  %v2_137e0 = icmp eq i32 %v0_137e0.pr, 0
  store i32 %v1_137cc, i32* @r4, align 4
  br i1 %v2_137e0, label %dec_label_pc_13814, label %dec_label_pc_137ec

dec_label_pc_137ec:                               ; preds = %thread-pre-split
  %v2_137ec = load i32, i32* %stack_var_-296, align 4
  store i32 %v0_137d0, i32* %r0.global-to-local, align 4
  %v2_137f4 = inttoptr i32 %v0_137d0 to i32*
  store i32 %v2_137ec, i32* %v2_137f4, align 4
  %v3_137f4 = load i32, i32* %r0.global-to-local, align 4
  %v4_137f4 = add i32 %v3_137f4, 4
  store i32 %v4_137f4, i32* @r0, align 4
  %v2_137f8 = ptrtoint i32* %stack_var_-284 to i32
  store i32 %v2_137f8, i32* @r1, align 4
  store i32 128, i32* @r2, align 4
  %v3_13800 = call i32 @function_12430(i32 %v4_137f4, i32 %v2_137f8, i32 128)
  store i32 %v3_13800, i32* %r0.global-to-local, align 4
  %v1_13808 = load i32, i32* @r5, align 4
  %v2_13808 = add i32 %v1_13808, 136
  %v3_13808 = inttoptr i32 %v2_13808 to i32*
  %v1_13810 = load i32, i32* @r5, align 4
  %v2_13810 = add i32 %v1_13810, 132
  %v3_13810 = inttoptr i32 %v2_13810 to i32*
  %v0_13814.pre = load i32, i32* @r4, align 4
  br label %dec_label_pc_13814

dec_label_pc_13814:                               ; preds = %thread-pre-split.thread, %thread-pre-split, %dec_label_pc_137ec
  %v0_13814 = phi i32 [ %v1_137cc, %thread-pre-split ], [ %v0_13814.pre, %dec_label_pc_137ec ], [ %v1_137cc, %thread-pre-split.thread ]
  store i32 %v0_13814, i32* %r0.global-to-local, align 4
  store i32 %v3_13744, i32* @r4, align 4
  store i32 %v6_13744, i32* @r5, align 4
  ret i32 %v0_13814

; uselistorder directives
  uselistorder i32 %v0_13814, { 1, 0 }
  uselistorder i32 %v0_137d0, { 1, 0, 2 }
  uselistorder i32 %v0_137c8, { 1, 0 }
  uselistorder i32* %stack_var_-156, { 1, 0 }
  uselistorder i32* %r0.global-to-local, { 3, 6, 4, 5, 1, 7, 2, 0 }
  uselistorder label %dec_label_pc_13814, { 2, 1, 0 }
  uselistorder label %bb26, { 1, 0 }
  uselistorder label %dec_label_pc_137a8, { 1, 0 }
  uselistorder label %bb21, { 1, 0 }
}

define i32 @function_13830(i32 %arg1) local_unnamed_addr {
dec_label_pc_13830:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13830 = load i32, i32* @r4, align 4
  store i32 %v3_13830, i32* %stack_var_-8, align 4
  %v1_13834 = load i32, i32* @r1, align 4
  %v2_13834 = inttoptr i32 %v1_13834 to %sigaction*
  %v3_13834 = load i32, i32* @r2, align 4
  %v4_13834 = inttoptr i32 %v3_13834 to %sigaction*
  %v5_13834 = call i32 @sigaction(i32 %arg1, %sigaction* %v2_13834, %sigaction* %v4_13834)
  store i32 %v5_13834, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v5_13834, -4095
  br i1 %tmp, label %dec_label_pc_13854, label %dec_label_pc_13844

dec_label_pc_13844:                               ; preds = %dec_label_pc_13830
  %v0_13844 = call i32 @function_123ec()
  %v0_13848 = load i32, i32* %r4.global-to-local, align 4
  %v1_13848 = sub i32 0, %v0_13848
  %v2_1384c = inttoptr i32 %v0_13844 to i32*
  store i32 %v1_13848, i32* %v2_1384c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13854

dec_label_pc_13854:                               ; preds = %dec_label_pc_13830, %dec_label_pc_13844
  %v0_13854 = phi i32 [ %v5_13834, %dec_label_pc_13830 ], [ -1, %dec_label_pc_13844 ]
  %v2_13858 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13858, i32* %r4.global-to-local, align 4
  ret i32 %v0_13854

; uselistorder directives
  uselistorder i32 %v5_13834, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13854, { 1, 0 }
}

; Function Attrs: noreturn
define i32 @function_1385c(i32 %arg1) local_unnamed_addr #0 {
dec_label_pc_1385c:
  store i32 %arg1, i32* @r5, align 4
  call void @exit(i32 %arg1)
  unreachable
}

define i32 @function_13884() local_unnamed_addr {
dec_label_pc_13884:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %tmp4 = bitcast i32* %stack_var_-72 to %stat*
  %v0_13894 = load i32, i32* @r0, align 4
  %v4_13894 = call i32 @fstat(i32 %v0_13894, %stat* %tmp4)
  store i32 %v4_13894, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v4_13894, -4095
  br i1 %tmp, label %dec_label_pc_138b8, label %dec_label_pc_138a4

dec_label_pc_138a4:                               ; preds = %dec_label_pc_13884
  %v0_138a4 = call i32 @function_123ec()
  %v0_138a8 = load i32, i32* %r4.global-to-local, align 4
  %v1_138a8 = sub i32 0, %v0_138a8
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_138b0 = inttoptr i32 %v0_138a4 to i32*
  store i32 %v1_138a8, i32* %v2_138b0, align 4
  br label %dec_label_pc_138c8

dec_label_pc_138b8:                               ; preds = %dec_label_pc_13884
  %v2_138b8 = icmp eq i32 %v4_13894, 0
  store i32 80072, i32* @lr, align 4
  call void @__pseudo_cond_branch(i1 %v2_138b8, i32 ptrtoint (i32* @global_var_13fa0.493 to i32))
  br label %dec_label_pc_138c8

dec_label_pc_138c8:                               ; preds = %dec_label_pc_138a4, %dec_label_pc_138b8
  %v0_138c8 = load i32, i32* %r4.global-to-local, align 4
  ret i32 %v0_138c8

; uselistorder directives
  uselistorder i32 %v4_13894, { 1, 0, 2 }
  uselistorder i32* %r4.global-to-local, { 1, 0, 2, 3 }
  uselistorder void (i1, i32)* @__pseudo_cond_branch, { 6, 13, 11, 12, 9, 10, 0, 3, 4, 5, 1, 2, 7, 8 }
  uselistorder label %dec_label_pc_138c8, { 1, 0 }
}

define i32 @function_138d4(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_138d4:
  %ip.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  store i32 %arg1, i32* @r1, align 4
  %v6_138d4 = load i32, i32* @r5, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_138dc = call i32 @function_13968()
  store i32 %v0_138dc, i32* %r6.global-to-local, align 4
  %tmp8 = icmp slt i32 %v0_138dc, 1
  br i1 %tmp8, label %dec_label_pc_13960, label %dec_label_pc_1394c.preheader

dec_label_pc_1394c.preheader:                     ; preds = %dec_label_pc_138d4
  %v5_138e4 = load i32, i32* @r4, align 4
  %v7_138e4 = add i32 %v5_138e4, %v0_138dc
  store i32 %v7_138e4, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1394c

dec_label_pc_138f0:                               ; preds = %dec_label_pc_1394c
  %v1_138f0 = add i32 %v2_13900, 16
  %v2_138f0 = inttoptr i32 %v1_138f0 to i32*
  %v3_138f0 = load i32, i32* %v2_138f0, align 4
  store i32 %v3_138f0, i32* @lr, align 4
  %v2_138f4 = inttoptr i32 %v1_13950 to i32*
  %v3_138f4 = load i32, i32* %v2_138f4, align 4
  store i32 %v3_138f4, i32* %r2.global-to-local, align 4
  %v1_138f8 = add i32 %v2_13900, 18
  %v2_138f8 = inttoptr i32 %v1_138f8 to i8*
  %v3_138f8 = load i8, i8* %v2_138f8, align 1
  %v4_138f8 = zext i8 %v3_138f8 to i32
  store i32 %v4_138f8, i32* %ip.global-to-local, align 4
  %v3_138fc = sdiv i32 %v3_138f0, 256
  store i32 %v3_138fc, i32* %r3.global-to-local, align 4
  %v1_13900 = trunc i32 %v3_138f0 to i8
  %v4_13900 = inttoptr i32 %v1_13950 to i8*
  store i8 %v1_13900, i8* %v4_13900, align 1
  %v0_13904 = load i32, i32* %r2.global-to-local, align 4
  %v1_13904 = load i32, i32* @r4, align 4
  %v2_13904 = add i32 %v1_13904, 4
  %v3_13904 = inttoptr i32 %v2_13904 to i32*
  store i32 %v0_13904, i32* %v3_13904, align 4
  %v0_13908 = load i32, i32* %ip.global-to-local, align 4
  %v1_13908 = trunc i32 %v0_13908 to i8
  %v2_13908 = load i32, i32* @r4, align 4
  %v3_13908 = add i32 %v2_13908, 10
  %v4_13908 = inttoptr i32 %v3_13908 to i8*
  store i8 %v1_13908, i8* %v4_13908, align 1
  %v0_1390c = load i32, i32* %r3.global-to-local, align 4
  %v1_1390c = trunc i32 %v0_1390c to i8
  %v2_1390c = load i32, i32* @r4, align 4
  %v3_1390c = add i32 %v2_1390c, 9
  %v4_1390c = inttoptr i32 %v3_1390c to i8*
  store i8 %v1_1390c, i8* %v4_1390c, align 1
  %v0_13910 = load i32, i32* @r4, align 4
  %v1_13910 = add i32 %v0_13910, 8
  %v2_13910 = inttoptr i32 %v1_13910 to i8*
  %v3_13910 = load i8, i8* %v2_13910, align 1
  %v4_13910 = zext i8 %v3_13910 to i32
  store i32 %v4_13910, i32* %r2.global-to-local, align 4
  %v0_13914 = load i32, i32* @r5, align 4
  %v1_13914 = add i32 %v0_13914, 1
  %v2_13914 = inttoptr i32 %v1_13914 to i8*
  %v3_13914 = load i8, i8* %v2_13914, align 1
  %v4_13914 = zext i8 %v3_13914 to i32
  store i32 %v4_13914, i32* %r3.global-to-local, align 4
  %v4_13918 = mul nuw nsw i32 %v4_13914, 256
  %v5_13918 = or i32 %v4_13918, %v4_13910
  %v1_1391c = add nsw i32 %v5_13918, -19
  store i32 %v1_1391c, i32* @r2, align 4
  %v3_13920 = call i32 @function_12440(i32 %v1_13958, i32 %v1_13954, i32 %v1_1391c)
  %v0_13924 = load i32, i32* @r4, align 4
  %v1_13924 = add i32 %v0_13924, 8
  %v2_13924 = inttoptr i32 %v1_13924 to i8*
  %v3_13924 = load i8, i8* %v2_13924, align 1
  %v4_13924 = zext i8 %v3_13924 to i32
  store i32 %v4_13924, i32* %r3.global-to-local, align 4
  %v0_13928 = load i32, i32* @r5, align 4
  %v1_13928 = add i32 %v0_13928, 1
  %v2_13928 = inttoptr i32 %v1_13928 to i8*
  %v3_13928 = load i8, i8* %v2_13928, align 1
  %v4_13928 = zext i8 %v3_13928 to i32
  store i32 %v0_13924, i32* @r0, align 4
  %v4_13930 = mul nuw nsw i32 %v4_13928, 256
  %v5_13930 = or i32 %v4_13930, %v4_13924
  store i32 %v5_13930, i32* @r2, align 4
  store i32 %v0_13924, i32* @r1, align 4
  %v3_13938 = call i32 @function_12440(i32 %v0_13924, i32 %v0_13924, i32 %v5_13930)
  %v0_1393c = load i32, i32* @r4, align 4
  %v1_1393c = add i32 %v0_1393c, 8
  %v2_1393c = inttoptr i32 %v1_1393c to i8*
  %v3_1393c = load i8, i8* %v2_1393c, align 1
  %v4_1393c = zext i8 %v3_1393c to i32
  store i32 %v4_1393c, i32* %r3.global-to-local, align 4
  %v0_13940 = load i32, i32* @r5, align 4
  %v1_13940 = add i32 %v0_13940, 1
  %v2_13940 = inttoptr i32 %v1_13940 to i8*
  %v3_13940 = load i8, i8* %v2_13940, align 1
  %v4_13940 = zext i8 %v3_13940 to i32
  store i32 %v4_13940, i32* @r2, align 4
  %v4_13944 = mul nuw nsw i32 %v4_13940, 256
  %v5_13944 = or i32 %v4_13944, %v4_1393c
  store i32 %v5_13944, i32* %r3.global-to-local, align 4
  %v2_13948 = add i32 %v5_13944, %v0_1393c
  store i32 %v2_13948, i32* @r4, align 4
  %v1_1394c.pre = load i32, i32* %r7.global-to-local, align 4
  br label %dec_label_pc_1394c

dec_label_pc_1394c:                               ; preds = %dec_label_pc_1394c.preheader, %dec_label_pc_138f0
  %v1_1394c = phi i32 [ %v7_138e4, %dec_label_pc_1394c.preheader ], [ %v1_1394c.pre, %dec_label_pc_138f0 ]
  %v2_13900 = phi i32 [ %v5_138e4, %dec_label_pc_1394c.preheader ], [ %v2_13948, %dec_label_pc_138f0 ]
  %v3_1394c = icmp ult i32 %v2_13900, %v1_1394c
  %v1_13950 = add i32 %v2_13900, 8
  store i32 %v1_13950, i32* @r5, align 4
  %v1_13954 = add i32 %v2_13900, 19
  store i32 %v1_13954, i32* @r1, align 4
  %v1_13958 = add i32 %v2_13900, 11
  store i32 %v1_13958, i32* @r0, align 4
  br i1 %v3_1394c, label %dec_label_pc_138f0, label %dec_label_pc_13960.loopexit

dec_label_pc_13960.loopexit:                      ; preds = %dec_label_pc_1394c
  %v0_13960.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_13960

dec_label_pc_13960:                               ; preds = %dec_label_pc_138d4, %dec_label_pc_13960.loopexit
  %v0_13960 = phi i32 [ %v0_13960.pre, %dec_label_pc_13960.loopexit ], [ %v0_138dc, %dec_label_pc_138d4 ]
  store i32 %v6_138d4, i32* @r5, align 4
  ret i32 %v0_13960

; uselistorder directives
  uselistorder i32 %v1_13958, { 1, 0 }
  uselistorder i32 %v1_13954, { 1, 0 }
  uselistorder i32 %v1_13950, { 2, 1, 0 }
  uselistorder i32 %v2_13900, { 4, 3, 2, 5, 1, 0 }
  uselistorder i32 %v0_13924, { 1, 3, 0, 2, 4 }
  uselistorder i32 %v3_138f0, { 1, 0, 2 }
  uselistorder i32 %v5_138e4, { 1, 0 }
  uselistorder i32 %v0_138dc, { 1, 0, 2, 3 }
  uselistorder i32 (i32, i32, i32)* @function_12440, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_13960, { 1, 0 }
  uselistorder label %dec_label_pc_1394c, { 1, 0 }
}

define i32 @function_13968() local_unnamed_addr {
dec_label_pc_13968:
  %r1.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %r8.global-to-local = alloca i32, align 4
  %sb.global-to-local = alloca i32, align 4
  %sl.global-to-local = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %v3_1396c = load i32, i32* @r4, align 4
  %v9_1396c = load i32, i32* @r6, align 4
  %v0_13970 = load i32, i32* @r2, align 4
  %v1_13970 = add i32 %v0_13970, 6
  %v2_13978 = ptrtoint i32* %stack_var_-60 to i32
  %v1_1397c = and i32 %v1_13970, -4
  store i32 %v1_1397c, i32* %r3.global-to-local, align 4
  %v2_13980 = sub i32 %v2_13978, %v1_1397c
  %v0_13984 = load i32, i32* @r1, align 4
  store i32 %v0_13984, i32* %r8.global-to-local, align 4
  store i32 %v0_13970, i32* %stack_var_-60, align 4
  store i32 %v2_13980, i32* %sl.global-to-local, align 4
  %v0_13990 = load i32, i32* @r0, align 4
  %v1_13994 = inttoptr i32 %v2_13980 to %linux_dirent64*
  store i32 %v2_13980, i32* %r1.global-to-local, align 4
  %v5_13998 = call i32 @getdents64(i32 %v0_13990, %linux_dirent64* %v1_13994, i32 %v0_13970)
  store i32 %v5_13998, i32* @r6, align 4
  %tmp = icmp ult i32 %v5_13998, -4095
  br i1 %tmp, label %dec_label_pc_139bc, label %dec_label_pc_139a8

dec_label_pc_139a8:                               ; preds = %dec_label_pc_13968
  %v0_139a8 = call i32 @function_123ec()
  %v0_139ac = load i32, i32* @r6, align 4
  %v1_139ac = sub i32 0, %v0_139ac
  store i32 %v1_139ac, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r6.global-to-local, align 4
  %v2_139b4 = inttoptr i32 %v0_139a8 to i32*
  store i32 %v1_139ac, i32* %v2_139b4, align 4
  %v0_139c4.pre = load i32, i32* %r6.global-to-local, align 4
  br label %dec_label_pc_139c4

dec_label_pc_139bc:                               ; preds = %dec_label_pc_13968
  br i1 false, label %dec_label_pc_139c4, label %dec_label_pc_139cc

dec_label_pc_139c4:                               ; preds = %dec_label_pc_139bc, %dec_label_pc_139a8
  %v0_139c4 = phi i32 [ -1, %dec_label_pc_139bc ], [ %v0_139c4.pre, %dec_label_pc_139a8 ]
  store i32 %v0_139c4, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_139cc:                               ; preds = %dec_label_pc_139bc
  store i32 -1, i32* %r3.global-to-local, align 4
  %v0_139d4 = load i32, i32* %r8.global-to-local, align 4
  store i32 %v0_139d4, i32* @r5, align 4
  %v0_139d8 = load i32, i32* @sp, align 4
  store i32 %v0_139d8, i32* @r4, align 4
  br label %dec_label_pc_13a9c

dec_label_pc_139e8:                               ; preds = %dec_label_pc_13a9c
  %v2_13ab4 = add i32 %v3_13aa0, %v0_13ab4
  %v1_139e8 = add i32 %v0_139ec, 17
  %v2_139e8 = inttoptr i32 %v1_139e8 to i8*
  %v3_139e8 = load i8, i8* %v2_139e8, align 1
  %v4_139e8 = zext i8 %v3_139e8 to i32
  %v2_139ec = inttoptr i32 %v1_13aa8 to i8*
  %v3_139ec = load i8, i8* %v2_139ec, align 1
  %v4_139ec = zext i8 %v3_139ec to i32
  %v4_139f0 = mul nuw nsw i32 %v4_139e8, 256
  %v5_139f0 = or i32 %v4_139ec, %v4_139f0
  %v1_139f4 = add nuw nsw i32 %v5_139f0, 3
  %v1_139f8 = and i32 %v1_139f4, 131068
  store i32 %v1_139f8, i32* %r3.global-to-local, align 4
  %v2_139fc = add i32 %v1_139f8, %v2_13a3c
  store i32 %v2_139fc, i32* %sb.global-to-local, align 4
  %v9_13a00 = icmp eq i32 %v2_139fc, %v2_13ab4
  %v1_13a04 = and i32 %v1_139f4, 128
  %v2_13a08 = icmp eq i32 %v1_13a04, 0
  %v3_13a08 = or i1 %v9_13a00, %v2_13a08
  br i1 %v3_13a08, label %dec_label_pc_13a3c, label %dec_label_pc_13a0c

dec_label_pc_13a0c:                               ; preds = %dec_label_pc_139e8
  store i32 %stack_var_-52.0, i32* %r1.global-to-local, align 4
  store i32 0, i32* %r3.global-to-local, align 4
  %v4_13a1c = call i32 @function_13b7c(i32 %v0_13990, i32 %stack_var_-52.0, i32 %stack_var_-48.0, i32 0)
  %v0_13a20 = load i32, i32* @r5, align 4
  %v1_13a20 = load i32, i32* %r8.global-to-local, align 4
  %v9_13a20 = icmp eq i32 %v0_13a20, %v1_13a20
  br i1 %v9_13a20, label %dec_label_pc_13a28, label %dec_label_pc_13abc

dec_label_pc_13a28:                               ; preds = %dec_label_pc_13a0c
  %v0_13a28 = call i32 @function_123ec()
  store i32 22, i32* %r3.global-to-local, align 4
  store i32 -1, i32* %r1.global-to-local, align 4
  %v2_13a34 = inttoptr i32 %v0_13a28 to i32*
  store i32 22, i32* %v2_13a34, align 4
  %v0_13ac0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_13a3c:                               ; preds = %dec_label_pc_139e8
  %v3_13a0411 = udiv i32 %v1_139f4, 256
  %v1_13a3c = trunc i32 %v3_13a0411 to i8
  %v3_13a3c = add i32 %v2_13a3c, 17
  %v4_13a3c = inttoptr i32 %v3_13a3c to i8*
  store i8 %v1_13a3c, i8* %v4_13a3c, align 1
  %v0_13a40 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a40 = trunc i32 %v0_13a40 to i8
  %v2_13a40 = load i32, i32* @r5, align 4
  %v3_13a40 = add i32 %v2_13a40, 16
  %v4_13a40 = inttoptr i32 %v3_13a40 to i8*
  store i8 %v1_13a40, i8* %v4_13a40, align 1
  %v0_13a44 = load i32, i32* @r4, align 4
  %v1_13a44 = add i32 %v0_13a44, 8
  %v1_13a48 = inttoptr i32 %v1_13a44 to i32*
  %v2_13a48 = load i32, i32* %v1_13a48, align 4
  %v3_13a48 = add i32 %v0_13a44, 12
  %v4_13a48 = inttoptr i32 %v3_13a48 to i32*
  %v5_13a48 = load i32, i32* %v4_13a48, align 4
  store i32 %v5_13a48, i32* %r3.global-to-local, align 4
  %v1_13a54 = inttoptr i32 %v0_13a44 to i32*
  %v2_13a54 = load i32, i32* %v1_13a54, align 4
  %v3_13a54 = add i32 %v0_13a44, 4
  %v4_13a54 = inttoptr i32 %v3_13a54 to i32*
  %v5_13a54 = load i32, i32* %v4_13a54, align 4
  store i32 %v5_13a54, i32* %r3.global-to-local, align 4
  %v0_13a58 = load i32, i32* @r5, align 4
  %v1_13a58 = inttoptr i32 %v0_13a58 to i32*
  store i32 %v2_13a54, i32* %v1_13a58, align 4
  %v3_13a58 = add i32 %v0_13a58, 4
  %v4_13a58 = inttoptr i32 %v3_13a58 to i32*
  %v5_13a58 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13a58, i32* %v4_13a58, align 4
  %v0_13a5c = load i32, i32* @r4, align 4
  %v1_13a5c = add i32 %v0_13a5c, 8
  %v1_13a60 = inttoptr i32 %v1_13a5c to i32*
  %v2_13a60 = load i32, i32* %v1_13a60, align 4
  %v3_13a60 = add i32 %v0_13a5c, 12
  %v4_13a60 = inttoptr i32 %v3_13a60 to i32*
  %v5_13a60 = load i32, i32* %v4_13a60, align 4
  store i32 %v5_13a60, i32* %r3.global-to-local, align 4
  %v1_13a64 = load i32, i32* @r5, align 4
  %v2_13a64 = add i32 %v1_13a64, 8
  %v3_13a64 = inttoptr i32 %v2_13a64 to i32*
  store i32 %v2_13a60, i32* %v3_13a64, align 4
  %v0_13a68 = load i32, i32* %r3.global-to-local, align 4
  %v1_13a68 = load i32, i32* @r5, align 4
  %v2_13a68 = add i32 %v1_13a68, 12
  %v3_13a68 = inttoptr i32 %v2_13a68 to i32*
  store i32 %v0_13a68, i32* %v3_13a68, align 4
  %v0_13a6c = load i32, i32* @r4, align 4
  %v1_13a6c = add i32 %v0_13a6c, 18
  %v2_13a6c = inttoptr i32 %v1_13a6c to i8*
  %v3_13a6c = load i8, i8* %v2_13a6c, align 1
  %v4_13a6c = zext i8 %v3_13a6c to i32
  store i32 %v4_13a6c, i32* %r3.global-to-local, align 4
  %v2_13a70 = load i32, i32* @r5, align 4
  %v3_13a70 = add i32 %v2_13a70, 18
  %v4_13a70 = inttoptr i32 %v3_13a70 to i8*
  store i8 %v3_13a6c, i8* %v4_13a70, align 1
  %v0_13a74 = load i32, i32* @r4, align 4
  %v1_13a74 = add i32 %v0_13a74, 16
  %v2_13a74 = inttoptr i32 %v1_13a74 to i8*
  %v3_13a74 = load i8, i8* %v2_13a74, align 1
  %v4_13a74 = zext i8 %v3_13a74 to i32
  %v0_13a78 = load i32, i32* %r7.global-to-local, align 4
  %v1_13a78 = add i32 %v0_13a78, 1
  %v2_13a78 = inttoptr i32 %v1_13a78 to i8*
  %v3_13a78 = load i8, i8* %v2_13a78, align 1
  %v4_13a78 = zext i8 %v3_13a78 to i32
  store i32 %v4_13a78, i32* %r3.global-to-local, align 4
  %v4_13a7c = mul nuw nsw i32 %v4_13a78, 256
  %v5_13a7c = or i32 %v4_13a7c, %v4_13a74
  %v1_13a80 = add nsw i32 %v5_13a7c, -19
  store i32 %v1_13a80, i32* @r2, align 4
  %v3_13a84 = call i32 @function_12430(i32 %v1_13aac, i32 %v1_13ab0, i32 %v1_13a80)
  %v0_13a88 = load i32, i32* @r4, align 4
  %v1_13a88 = add i32 %v0_13a88, 16
  %v2_13a88 = inttoptr i32 %v1_13a88 to i8*
  %v3_13a88 = load i8, i8* %v2_13a88, align 1
  %v4_13a88 = zext i8 %v3_13a88 to i32
  store i32 %v4_13a88, i32* %r3.global-to-local, align 4
  %v0_13a8c = load i32, i32* %r7.global-to-local, align 4
  %v1_13a8c = add i32 %v0_13a8c, 1
  %v2_13a8c = inttoptr i32 %v1_13a8c to i8*
  %v3_13a8c = load i8, i8* %v2_13a8c, align 1
  %v4_13a8c = zext i8 %v3_13a8c to i32
  %v4_13a90 = mul nuw nsw i32 %v4_13a8c, 256
  %v5_13a90 = or i32 %v4_13a90, %v4_13a88
  store i32 %v5_13a90, i32* %r3.global-to-local, align 4
  %v2_13a94 = add i32 %v5_13a90, %v0_13a88
  store i32 %v2_13a94, i32* @r4, align 4
  %v0_13a98 = load i32, i32* %sb.global-to-local, align 4
  store i32 %v0_13a98, i32* @r5, align 4
  %v1_13a9c.pre = load i32, i32* @r6, align 4
  %v0_13ab4.pre = load i32, i32* %r8.global-to-local, align 4
  br label %dec_label_pc_13a9c

dec_label_pc_13a9c:                               ; preds = %dec_label_pc_139cc, %dec_label_pc_13a3c
  %stack_var_-52.0 = phi i32 [ -1, %dec_label_pc_139cc ], [ %v2_13a48, %dec_label_pc_13a3c ]
  %v0_13ab4 = phi i32 [ %v0_139d4, %dec_label_pc_139cc ], [ %v0_13ab4.pre, %dec_label_pc_13a3c ]
  %v2_13a3c = phi i32 [ %v0_139d4, %dec_label_pc_139cc ], [ %v0_13a98, %dec_label_pc_13a3c ]
  %v0_139ec = phi i32 [ %v0_139d8, %dec_label_pc_139cc ], [ %v2_13a94, %dec_label_pc_13a3c ]
  %v1_13a9c = phi i32 [ %v5_13998, %dec_label_pc_139cc ], [ %v1_13a9c.pre, %dec_label_pc_13a3c ]
  %stack_var_-48.0 = phi i32 [ -1, %dec_label_pc_139cc ], [ %v5_13a48, %dec_label_pc_13a3c ]
  %v0_13a9c = load i32, i32* %sl.global-to-local, align 4
  %v2_13a9c = add i32 %v0_13a9c, %v1_13a9c
  store i32 %v2_13a9c, i32* %r3.global-to-local, align 4
  %v3_13aa0 = load i32, i32* %stack_var_-60, align 4
  store i32 %v3_13aa0, i32* @r2, align 4
  %v3_13aa4 = icmp ult i32 %v0_139ec, %v2_13a9c
  %v1_13aa8 = add i32 %v0_139ec, 16
  store i32 %v1_13aa8, i32* %r7.global-to-local, align 4
  %v1_13aac = add i32 %v2_13a3c, 19
  store i32 %v1_13aac, i32* @r0, align 4
  %v1_13ab0 = add i32 %v0_139ec, 19
  store i32 %v1_13ab0, i32* @r1, align 4
  br i1 %v3_13aa4, label %dec_label_pc_139e8, label %dec_label_pc_13abc

dec_label_pc_13abc:                               ; preds = %dec_label_pc_13a9c, %dec_label_pc_13a0c
  %v1_13abc = phi i32 [ %v0_13a20, %dec_label_pc_13a0c ], [ %v2_13a3c, %dec_label_pc_13a9c ]
  %v0_13abc = phi i32 [ %v1_13a20, %dec_label_pc_13a0c ], [ %v0_13ab4, %dec_label_pc_13a9c ]
  %v2_13abc = sub i32 %v1_13abc, %v0_13abc
  store i32 %v2_13abc, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_13ac0

dec_label_pc_13ac0:                               ; preds = %dec_label_pc_13a28, %dec_label_pc_139c4, %dec_label_pc_13abc
  %v0_13ac0 = phi i32 [ %v0_13ac0.pre, %dec_label_pc_13a28 ], [ %v0_139c4, %dec_label_pc_139c4 ], [ %v2_13abc, %dec_label_pc_13abc ]
  store i32 %v3_1396c, i32* @r4, align 4
  store i32 %v9_1396c, i32* %r6.global-to-local, align 4
  ret i32 %v0_13ac0

; uselistorder directives
  uselistorder i32 %v1_13ab0, { 1, 0 }
  uselistorder i32 %v1_13aac, { 1, 0 }
  uselistorder i32 %v1_13aa8, { 1, 0 }
  uselistorder i32 %v3_13aa0, { 1, 0 }
  uselistorder i32 %v0_139ec, { 2, 1, 3, 0 }
  uselistorder i32 %v2_13a3c, { 0, 3, 1, 2 }
  uselistorder i32 %v0_13a44, { 1, 0, 2, 3 }
  uselistorder i32 %v0_139d4, { 1, 0, 2 }
  uselistorder i32 %v5_13998, { 1, 0, 2 }
  uselistorder i32* %r7.global-to-local, { 2, 0, 1 }
  uselistorder i32* %r3.global-to-local, { 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 9, 10, 12, 14, 15, 16 }
  uselistorder i32 (i32, i32, i32)* @function_12430, { 3, 1, 0, 2, 5, 4 }
  uselistorder i32 128, { 4, 5, 26, 6, 27, 17, 9, 10, 11, 18, 0, 19, 12, 13, 14, 15, 16, 22, 1, 20, 2, 21, 3, 7, 8, 23, 24, 25 }
  uselistorder i32* @sp, { 4, 2, 1, 3, 0 }
  uselistorder i32* @r6, { 5, 158, 159, 160, 198, 199, 373, 374, 375, 376, 377, 378, 379, 381, 380, 396, 397, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 24, 25, 53, 100, 101, 102, 103, 44, 104, 105, 26, 106, 49, 107, 108, 109, 4, 3, 110, 111, 27, 28, 29, 30, 31, 45, 50, 15, 16, 17, 18, 19, 20, 21, 22, 23, 54, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 55, 56, 57, 58, 51, 52, 112, 113, 114, 115, 116, 59, 60, 117, 118, 12, 119, 120, 121, 122, 123, 124, 125, 126, 127, 6, 134, 2, 135, 136, 1, 137, 138, 398, 399, 400, 202, 203, 204, 205, 0, 128, 129, 130, 131, 132, 133, 139, 140, 141, 142, 7, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 179, 180, 181, 182, 13, 183, 184, 185, 8, 186, 187, 206, 9, 207, 10, 208, 11, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 188, 191, 189, 190, 192, 193, 14, 194, 195, 196, 197, 200, 201 }
  uselistorder label %dec_label_pc_13ac0, { 2, 0, 1 }
  uselistorder label %dec_label_pc_13a9c, { 1, 0 }
}

define i32 @function_13acc() local_unnamed_addr {
dec_label_pc_13acc:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13acc = load i32, i32* @r4, align 4
  store i32 %v3_13acc, i32* %stack_var_-8, align 4
  %v0_13ad4 = load i32, i32* @r0, align 4
  store i32 %v0_13ad4, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13ad4, -4095
  br i1 %tmp, label %dec_label_pc_13af0, label %dec_label_pc_13ae0

dec_label_pc_13ae0:                               ; preds = %dec_label_pc_13acc
  %v0_13ae0 = call i32 @function_123ec()
  %v0_13ae4 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ae4 = sub i32 0, %v0_13ae4
  %v2_13ae8 = inttoptr i32 %v0_13ae0 to i32*
  store i32 %v1_13ae4, i32* %v2_13ae8, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13af4.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13af0

dec_label_pc_13af0:                               ; preds = %dec_label_pc_13acc, %dec_label_pc_13ae0
  %v2_13af4 = phi i32 [ %v3_13acc, %dec_label_pc_13acc ], [ %v2_13af4.pre, %dec_label_pc_13ae0 ]
  %v0_13af0 = phi i32 [ %v0_13ad4, %dec_label_pc_13acc ], [ -1, %dec_label_pc_13ae0 ]
  store i32 %v2_13af4, i32* @r4, align 4
  ret i32 %v0_13af0

; uselistorder directives
  uselistorder i32 %v0_13ad4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13af0, { 1, 0 }
}

define i32 @function_13af8() local_unnamed_addr {
dec_label_pc_13af8:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13af8 = load i32, i32* @r4, align 4
  store i32 %v3_13af8, i32* %stack_var_-8, align 4
  %v0_13b00 = load i32, i32* @r0, align 4
  store i32 %v0_13b00, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13b00, -4095
  br i1 %tmp, label %dec_label_pc_13b1c, label %dec_label_pc_13b0c

dec_label_pc_13b0c:                               ; preds = %dec_label_pc_13af8
  %v0_13b0c = call i32 @function_123ec()
  %v0_13b10 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b10 = sub i32 0, %v0_13b10
  %v2_13b14 = inttoptr i32 %v0_13b0c to i32*
  store i32 %v1_13b10, i32* %v2_13b14, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b20.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b1c

dec_label_pc_13b1c:                               ; preds = %dec_label_pc_13af8, %dec_label_pc_13b0c
  %v2_13b20 = phi i32 [ %v3_13af8, %dec_label_pc_13af8 ], [ %v2_13b20.pre, %dec_label_pc_13b0c ]
  %v0_13b1c = phi i32 [ %v0_13b00, %dec_label_pc_13af8 ], [ -1, %dec_label_pc_13b0c ]
  store i32 %v2_13b20, i32* @r4, align 4
  ret i32 %v0_13b1c

; uselistorder directives
  uselistorder i32 %v0_13b00, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b1c, { 1, 0 }
}

define i32 @function_13b24(i32 %arg1) local_unnamed_addr {
dec_label_pc_13b24:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13b24 = load i32, i32* @r4, align 4
  store i32 %v3_13b24, i32* %stack_var_-8, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13b48, label %dec_label_pc_13b38

dec_label_pc_13b38:                               ; preds = %dec_label_pc_13b24
  %v0_13b38 = call i32 @function_123ec()
  %v0_13b3c = load i32, i32* %r4.global-to-local, align 4
  %v1_13b3c = sub i32 0, %v0_13b3c
  %v2_13b40 = inttoptr i32 %v0_13b38 to i32*
  store i32 %v1_13b3c, i32* %v2_13b40, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b4c.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b48

dec_label_pc_13b48:                               ; preds = %dec_label_pc_13b24, %dec_label_pc_13b38
  %v2_13b4c = phi i32 [ %v3_13b24, %dec_label_pc_13b24 ], [ %v2_13b4c.pre, %dec_label_pc_13b38 ]
  %v0_13b48 = phi i32 [ %arg1, %dec_label_pc_13b24 ], [ -1, %dec_label_pc_13b38 ]
  store i32 %v2_13b4c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b48

; uselistorder directives
  uselistorder i32 %arg1, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b48, { 1, 0 }
}

define i32 @function_13b50() local_unnamed_addr {
dec_label_pc_13b50:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13b50 = load i32, i32* @r4, align 4
  store i32 %v3_13b50, i32* %stack_var_-8, align 4
  %v0_13b58 = load i32, i32* @r0, align 4
  store i32 %v0_13b58, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v0_13b58, -4095
  br i1 %tmp, label %dec_label_pc_13b74, label %dec_label_pc_13b64

dec_label_pc_13b64:                               ; preds = %dec_label_pc_13b50
  %v0_13b64 = call i32 @function_123ec()
  %v0_13b68 = load i32, i32* %r4.global-to-local, align 4
  %v1_13b68 = sub i32 0, %v0_13b68
  %v2_13b6c = inttoptr i32 %v0_13b64 to i32*
  store i32 %v1_13b68, i32* %v2_13b6c, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13b78.pre = load i32, i32* %stack_var_-8, align 4
  br label %dec_label_pc_13b74

dec_label_pc_13b74:                               ; preds = %dec_label_pc_13b50, %dec_label_pc_13b64
  %v2_13b78 = phi i32 [ %v3_13b50, %dec_label_pc_13b50 ], [ %v2_13b78.pre, %dec_label_pc_13b64 ]
  %v0_13b74 = phi i32 [ %v0_13b58, %dec_label_pc_13b50 ], [ -1, %dec_label_pc_13b64 ]
  store i32 %v2_13b78, i32* %r4.global-to-local, align 4
  ret i32 %v0_13b74

; uselistorder directives
  uselistorder i32 %v0_13b58, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13b74, { 1, 0 }
}

define i32 @function_13b7c(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_13b7c:
  %r4.global-to-local = alloca i32, align 4
  %tmp9 = call i32 @__decompiler_undefined_function_0()
  store i32 %arg2, i32* @r2, align 4
  store i32 %arg1, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %arg1, -4095
  br i1 %tmp, label %dec_label_pc_13bc0, label %dec_label_pc_13bac

dec_label_pc_13bac:                               ; preds = %dec_label_pc_13b7c
  %v0_13bac = call i32 @function_123ec()
  %v0_13bb0 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bb0 = sub i32 0, %v0_13bb0
  store i32 -1, i32* %r4.global-to-local, align 4
  %v2_13bb8 = inttoptr i32 %v0_13bac to i32*
  store i32 %v1_13bb0, i32* %v2_13bb8, align 4
  %v0_13bc8.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13bc8

dec_label_pc_13bc0:                               ; preds = %dec_label_pc_13b7c
  %v2_13bc0 = icmp eq i32 %arg1, 0
  br i1 %v2_13bc0, label %dec_label_pc_13bd4, label %dec_label_pc_13bc8

dec_label_pc_13bc8:                               ; preds = %dec_label_pc_13bc0, %dec_label_pc_13bac
  %v0_13bc8 = phi i32 [ %arg1, %dec_label_pc_13bc0 ], [ %v0_13bc8.pre, %dec_label_pc_13bac ]
  br label %dec_label_pc_13bd8

dec_label_pc_13bd4:                               ; preds = %dec_label_pc_13bc0
  br label %dec_label_pc_13bd8

dec_label_pc_13bd8:                               ; preds = %dec_label_pc_13bc8, %dec_label_pc_13bd4
  %v14_13bdc = phi i32 [ %v0_13bc8, %dec_label_pc_13bc8 ], [ %tmp9, %dec_label_pc_13bd4 ]
  ret i32 %v14_13bdc

; uselistorder directives
  uselistorder i32 %arg1, { 1, 2, 0, 3 }
  uselistorder label %dec_label_pc_13bd8, { 1, 0 }
}

define i32 @function_13be0(%timespec* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13be0:
  %r4.global-to-local = alloca i32, align 4
  %tmp = inttoptr i32 %arg2 to %timespec*
  %stack_var_-8 = alloca i32, align 4
  %v3_13be0 = load i32, i32* @r4, align 4
  store i32 %v3_13be0, i32* %stack_var_-8, align 4
  %v6_13be4 = call i32 @nanosleep(%timespec* %arg1, %timespec* %tmp)
  store i32 %v6_13be4, i32* %r4.global-to-local, align 4
  %tmp6 = icmp ult i32 %v6_13be4, -4095
  br i1 %tmp6, label %dec_label_pc_13c04, label %dec_label_pc_13bf4

dec_label_pc_13bf4:                               ; preds = %dec_label_pc_13be0
  %v0_13bf4 = call i32 @function_123ec()
  %v0_13bf8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13bf8 = sub i32 0, %v0_13bf8
  %v2_13bfc = inttoptr i32 %v0_13bf4 to i32*
  store i32 %v1_13bf8, i32* %v2_13bfc, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c04

dec_label_pc_13c04:                               ; preds = %dec_label_pc_13be0, %dec_label_pc_13bf4
  %v0_13c04 = phi i32 [ %v6_13be4, %dec_label_pc_13be0 ], [ -1, %dec_label_pc_13bf4 ]
  %v2_13c08 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c08, i32* %r4.global-to-local, align 4
  ret i32 %v0_13c04

; uselistorder directives
  uselistorder i32 %v6_13be4, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c04, { 1, 0 }
}

define i32 @function_13c0c(i32 %arg1) local_unnamed_addr {
dec_label_pc_13c0c:
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %v3_13c0c = load i32, i32* @r4, align 4
  store i32 %v3_13c0c, i32* %stack_var_-12, align 4
  store i32 ptrtoint (i32* @global_var_1d230.495 to i32), i32* %r4.global-to-local, align 4
  %v2_13c14 = load i32, i32* @global_var_1d230.495, align 4
  %v2_13c18 = icmp eq i32 %v2_13c14, 0
  store i32 %arg1, i32* %r5.global-to-local, align 4
  br i1 %v2_13c18, label %dec_label_pc_13c28, label %dec_label_pc_13c34

dec_label_pc_13c28:                               ; preds = %dec_label_pc_13c0c
  %v2_13c28 = call i32 @function_14628(i32* null)
  %v1_13c2c = icmp slt i32 %v2_13c28, 0
  br i1 %v1_13c2c, label %dec_label_pc_13c54, label %dec_label_pc_13c34thread-pre-split

dec_label_pc_13c34thread-pre-split:               ; preds = %dec_label_pc_13c28
  %v0_13c38.pr = load i32, i32* %r5.global-to-local, align 4
  %v2_13c34.pre = load i32, i32* @global_var_1d230.495, align 4
  br label %dec_label_pc_13c34

dec_label_pc_13c34:                               ; preds = %dec_label_pc_13c34thread-pre-split, %dec_label_pc_13c0c
  %v2_13c34 = phi i32 [ %v2_13c34.pre, %dec_label_pc_13c34thread-pre-split ], [ %v2_13c14, %dec_label_pc_13c0c ]
  %v1_13c40 = phi i32 [ %v0_13c38.pr, %dec_label_pc_13c34thread-pre-split ], [ %arg1, %dec_label_pc_13c0c ]
  %v2_13c38 = icmp eq i32 %v1_13c40, 0
  store i32 %v2_13c34, i32* %r4.global-to-local, align 4
  br i1 %v2_13c38, label %dec_label_pc_13c58, label %dec_label_pc_13c48

dec_label_pc_13c48:                               ; preds = %dec_label_pc_13c34
  %v2_13c40 = add i32 %v1_13c40, %v2_13c34
  %v1_13c48 = inttoptr i32 %v2_13c40 to i32*
  %v2_13c48 = call i32 @function_14628(i32* %v1_13c48)
  %v1_13c4c = icmp slt i32 %v2_13c48, 0
  br i1 %v1_13c4c, label %dec_label_pc_13c54, label %dec_label_pc_13c48.dec_label_pc_13c58_crit_edge

dec_label_pc_13c48.dec_label_pc_13c58_crit_edge:  ; preds = %dec_label_pc_13c48
  %v0_13c58.pre = load i32, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c58

dec_label_pc_13c54:                               ; preds = %dec_label_pc_13c48, %dec_label_pc_13c28
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c58

dec_label_pc_13c58:                               ; preds = %dec_label_pc_13c48.dec_label_pc_13c58_crit_edge, %dec_label_pc_13c34, %dec_label_pc_13c54
  %v0_13c58 = phi i32 [ %v0_13c58.pre, %dec_label_pc_13c48.dec_label_pc_13c58_crit_edge ], [ %v2_13c34, %dec_label_pc_13c34 ], [ -1, %dec_label_pc_13c54 ]
  %v2_13c5c = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_13c5c, i32* @r4, align 4
  ret i32 %v0_13c58

; uselistorder directives
  uselistorder i32 %v2_13c34, { 1, 0, 2 }
  uselistorder i32* null, { 0, 4, 6, 24, 25, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 1, 19, 20, 21, 2, 22, 3, 23 }
  uselistorder label %dec_label_pc_13c58, { 2, 0, 1 }
}

define i32 @function_13c64(%tms* %arg1) local_unnamed_addr {
dec_label_pc_13c64:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_13c64 = load i32, i32* @r4, align 4
  store i32 %v3_13c64, i32* %stack_var_-8, align 4
  %v3_13c68 = call i32 @times(%tms* %arg1)
  store i32 %v3_13c68, i32* %r4.global-to-local, align 4
  %tmp = icmp ult i32 %v3_13c68, -4095
  br i1 %tmp, label %dec_label_pc_13c88, label %dec_label_pc_13c78

dec_label_pc_13c78:                               ; preds = %dec_label_pc_13c64
  %v0_13c78 = call i32 @function_123ec()
  %v0_13c7c = load i32, i32* %r4.global-to-local, align 4
  %v1_13c7c = sub i32 0, %v0_13c7c
  %v2_13c80 = inttoptr i32 %v0_13c78 to i32*
  store i32 %v1_13c7c, i32* %v2_13c80, align 4
  store i32 -1, i32* %r4.global-to-local, align 4
  br label %dec_label_pc_13c88

dec_label_pc_13c88:                               ; preds = %dec_label_pc_13c64, %dec_label_pc_13c78
  %v0_13c88 = phi i32 [ %v3_13c68, %dec_label_pc_13c64 ], [ -1, %dec_label_pc_13c78 ]
  %v2_13c8c = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_13c8c, i32* %r4.global-to-local, align 4
  ret i32 %v0_13c88

; uselistorder directives
  uselistorder i32 %v3_13c68, { 1, 0, 2 }
  uselistorder label %dec_label_pc_13c88, { 1, 0 }
}

define i32 @function_13c90(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13c90:
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  %r7.global-to-local = alloca i32, align 4
  %tmp = ptrtoint i8* %arg1 to i32
  store i32 %arg2, i32* %r7.global-to-local, align 4
  store i32 %tmp, i32* %r4.global-to-local, align 4
  store i32 96, i32* @r2, align 4
  %v2_13cac = inttoptr i32 %arg2 to i8*
  %v3_13cac = call i32 @function_12450(i8* %v2_13cac, i32 0)
  %v1_13cb0 = add i32 %tmp, 1
  %v2_13cb0 = inttoptr i32 %v1_13cb0 to i8*
  %v3_13cb0 = load i8, i8* %v2_13cb0, align 1
  %v4_13cb0 = zext i8 %v3_13cb0 to i32
  %v1_13cb4 = add i32 %tmp, 5
  %v2_13cb4 = inttoptr i32 %v1_13cb4 to i8*
  %v3_13cb4 = load i8, i8* %v2_13cb4, align 1
  %v4_13cb4 = zext i8 %v3_13cb4 to i32
  %v2_13cb8 = load i8, i8* %arg1, align 1
  %v3_13cb8 = zext i8 %v2_13cb8 to i32
  %v1_13cbc = add i32 %tmp, 4
  %v2_13cbc = inttoptr i32 %v1_13cbc to i8*
  %v3_13cbc = load i8, i8* %v2_13cbc, align 1
  %v4_13cbc = zext i8 %v3_13cbc to i32
  %v1_13cc0 = add i32 %tmp, 2
  %v2_13cc0 = inttoptr i32 %v1_13cc0 to i8*
  %v3_13cc0 = load i8, i8* %v2_13cc0, align 1
  %v4_13cc0 = zext i8 %v3_13cc0 to i32
  %v1_13cc4 = add i32 %tmp, 6
  %v2_13cc4 = inttoptr i32 %v1_13cc4 to i8*
  %v3_13cc4 = load i8, i8* %v2_13cc4, align 1
  %v4_13cc4 = zext i8 %v3_13cc4 to i32
  %v1_13cc8 = add i32 %tmp, 3
  %v2_13cc8 = inttoptr i32 %v1_13cc8 to i8*
  %v3_13cc8 = load i8, i8* %v2_13cc8, align 1
  %v4_13cc8 = zext i8 %v3_13cc8 to i32
  %v4_13ccc = mul nuw nsw i32 %v4_13cb0, 256
  %v5_13ccc = or i32 %v3_13cb8, %v4_13ccc
  %v4_13cd0 = mul nuw nsw i32 %v4_13cb4, 256
  %v5_13cd0 = or i32 %v4_13cbc, %v4_13cd0
  %v1_13cd4 = add i32 %tmp, 7
  %v2_13cd4 = inttoptr i32 %v1_13cd4 to i8*
  %v3_13cd4 = load i8, i8* %v2_13cd4, align 1
  %v4_13cd4 = zext i8 %v3_13cd4 to i32
  %v4_13cd8 = mul nuw nsw i32 %v4_13cc0, 65536
  %v5_13cd8 = or i32 %v4_13cd8, %v5_13ccc
  %v4_13cdc = mul nuw nsw i32 %v4_13cc4, 65536
  %v5_13cdc = or i32 %v4_13cdc, %v5_13cd0
  %v4_13ce0 = mul nuw i32 %v4_13cc8, 16777216
  %v5_13ce0 = or i32 %v4_13ce0, %v5_13cd8
  %v4_13ce4 = mul nuw i32 %v4_13cd4, 16777216
  %v5_13ce4 = or i32 %v4_13ce4, %v5_13cdc
  store i32 %v5_13ce4, i32* %r3.global-to-local, align 4
  %v0_13ce8 = load i32, i32* %r7.global-to-local, align 4
  %v1_13ce8 = inttoptr i32 %v0_13ce8 to i32*
  store i32 %v5_13ce0, i32* %v1_13ce8, align 4
  %v3_13ce8 = add i32 %v0_13ce8, 4
  %v4_13ce8 = inttoptr i32 %v3_13ce8 to i32*
  %v5_13ce8 = load i32, i32* %r3.global-to-local, align 4
  store i32 %v5_13ce8, i32* %v4_13ce8, align 4
  %v0_13cec = load i32, i32* %r4.global-to-local, align 4
  %v1_13cec = add i32 %v0_13cec, 89
  %v2_13cec = inttoptr i32 %v1_13cec to i8*
  %v3_13cec = load i8, i8* %v2_13cec, align 1
  %v4_13cec = zext i8 %v3_13cec to i32
  %v1_13cf0 = add i32 %v0_13cec, 93
  %v2_13cf0 = inttoptr i32 %v1_13cf0 to i8*
  %v3_13cf0 = load i8, i8* %v2_13cf0, align 1
  %v4_13cf0 = zext i8 %v3_13cf0 to i32
  %v1_13cf4 = add i32 %v0_13cec, 88
  %v2_13cf4 = inttoptr i32 %v1_13cf4 to i8*
  %v3_13cf4 = load i8, i8* %v2_13cf4, align 1
  %v4_13cf4 = zext i8 %v3_13cf4 to i32
  %v1_13cf8 = add i32 %v0_13cec, 92
  %v2_13cf8 = inttoptr i32 %v1_13cf8 to i8*
  %v3_13cf8 = load i8, i8* %v2_13cf8, align 1
  %v4_13cf8 = zext i8 %v3_13cf8 to i32
  store i32 %v4_13cf8, i32* %r3.global-to-local, align 4
  %v1_13cfc = add i32 %v0_13cec, 94
  %v2_13cfc = inttoptr i32 %v1_13cfc to i8*
  %v3_13cfc = load i8, i8* %v2_13cfc, align 1
  %v4_13cfc = zext i8 %v3_13cfc to i32
  %v1_13d00 = add i32 %v0_13cec, 90
  %v2_13d00 = inttoptr i32 %v1_13d00 to i8*
  %v3_13d00 = load i8, i8* %v2_13d00, align 1
  %v4_13d00 = zext i8 %v3_13d00 to i32
  %v1_13d04 = add i32 %v0_13cec, 91
  %v2_13d04 = inttoptr i32 %v1_13d04 to i8*
  %v3_13d04 = load i8, i8* %v2_13d04, align 1
  %v4_13d04 = zext i8 %v3_13d04 to i32
  %v4_13d08 = mul nuw nsw i32 %v4_13cec, 256
  %v5_13d08 = or i32 %v4_13cf4, %v4_13d08
  %v4_13d0c = mul nuw nsw i32 %v4_13cf0, 256
  %v5_13d0c = or i32 %v4_13cf8, %v4_13d0c
  store i32 %v5_13d0c, i32* %r3.global-to-local, align 4
  %v1_13d10 = add i32 %v0_13cec, 95
  %v2_13d10 = inttoptr i32 %v1_13d10 to i8*
  %v3_13d10 = load i8, i8* %v2_13d10, align 1
  %v4_13d10 = zext i8 %v3_13d10 to i32
  %v4_13d14 = mul nuw nsw i32 %v4_13cfc, 65536
  %v5_13d14 = or i32 %v4_13d14, %v5_13d0c
  store i32 %v5_13d14, i32* %r3.global-to-local, align 4
  %v4_13d18 = mul nuw nsw i32 %v4_13d00, 65536
  %v5_13d18 = or i32 %v4_13d18, %v5_13d08
  %v4_13d1c = mul nuw i32 %v4_13d04, 16777216
  %v5_13d1c = or i32 %v4_13d1c, %v5_13d18
  %v4_13d20 = mul nuw i32 %v4_13d10, 16777216
  %v5_13d20 = or i32 %v4_13d20, %v5_13d14
  store i32 %v5_13d20, i32* %r6.global-to-local, align 4
  %v1_13d24 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d24 = add i32 %v1_13d24, 88
  %v3_13d24 = inttoptr i32 %v2_13d24 to i32*
  store i32 %v5_13d1c, i32* %v3_13d24, align 4
  %v0_13d28 = load i32, i32* %r6.global-to-local, align 4
  %v1_13d28 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d28 = add i32 %v1_13d28, 92
  %v3_13d28 = inttoptr i32 %v2_13d28 to i32*
  store i32 %v0_13d28, i32* %v3_13d28, align 4
  %v0_13d2c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d2c = add i32 %v0_13d2c, 13
  %v2_13d2c = inttoptr i32 %v1_13d2c to i8*
  %v3_13d2c = load i8, i8* %v2_13d2c, align 1
  %v4_13d2c = zext i8 %v3_13d2c to i32
  %v1_13d30 = add i32 %v0_13d2c, 12
  %v2_13d30 = inttoptr i32 %v1_13d30 to i8*
  %v3_13d30 = load i8, i8* %v2_13d30, align 1
  %v4_13d30 = zext i8 %v3_13d30 to i32
  store i32 %v4_13d30, i32* %r3.global-to-local, align 4
  %v1_13d34 = add i32 %v0_13d2c, 14
  %v2_13d34 = inttoptr i32 %v1_13d34 to i8*
  %v3_13d34 = load i8, i8* %v2_13d34, align 1
  %v4_13d34 = zext i8 %v3_13d34 to i32
  %v4_13d38 = mul nuw nsw i32 %v4_13d2c, 256
  %v5_13d38 = or i32 %v4_13d30, %v4_13d38
  store i32 %v5_13d38, i32* %r3.global-to-local, align 4
  %v1_13d3c = add i32 %v0_13d2c, 15
  %v2_13d3c = inttoptr i32 %v1_13d3c to i8*
  %v3_13d3c = load i8, i8* %v2_13d3c, align 1
  %v4_13d3c = zext i8 %v3_13d3c to i32
  %v4_13d40 = mul nuw nsw i32 %v4_13d34, 65536
  %v5_13d40 = or i32 %v4_13d40, %v5_13d38
  %v4_13d44 = mul nuw i32 %v4_13d3c, 16777216
  %v5_13d44 = or i32 %v5_13d40, %v4_13d44
  store i32 %v5_13d44, i32* %r3.global-to-local, align 4
  %v1_13d48 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d48 = add i32 %v1_13d48, 12
  %v3_13d48 = inttoptr i32 %v2_13d48 to i32*
  store i32 %v5_13d44, i32* %v3_13d48, align 4
  %v0_13d4c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d4c = add i32 %v0_13d4c, 17
  %v2_13d4c = inttoptr i32 %v1_13d4c to i8*
  %v3_13d4c = load i8, i8* %v2_13d4c, align 1
  %v4_13d4c = zext i8 %v3_13d4c to i32
  %v1_13d50 = add i32 %v0_13d4c, 16
  %v2_13d50 = inttoptr i32 %v1_13d50 to i8*
  %v3_13d50 = load i8, i8* %v2_13d50, align 1
  %v4_13d50 = zext i8 %v3_13d50 to i32
  store i32 %v4_13d50, i32* %r3.global-to-local, align 4
  %v1_13d54 = add i32 %v0_13d4c, 18
  %v2_13d54 = inttoptr i32 %v1_13d54 to i8*
  %v3_13d54 = load i8, i8* %v2_13d54, align 1
  %v4_13d54 = zext i8 %v3_13d54 to i32
  %v4_13d58 = mul nuw nsw i32 %v4_13d4c, 256
  %v5_13d58 = or i32 %v4_13d50, %v4_13d58
  store i32 %v5_13d58, i32* %r3.global-to-local, align 4
  %v1_13d5c = add i32 %v0_13d4c, 19
  %v2_13d5c = inttoptr i32 %v1_13d5c to i8*
  %v3_13d5c = load i8, i8* %v2_13d5c, align 1
  %v4_13d5c = zext i8 %v3_13d5c to i32
  %v4_13d60 = mul nuw nsw i32 %v4_13d54, 65536
  %v5_13d60 = or i32 %v4_13d60, %v5_13d58
  %v4_13d64 = mul nuw i32 %v4_13d5c, 16777216
  %v5_13d64 = or i32 %v5_13d60, %v4_13d64
  store i32 %v5_13d64, i32* %r3.global-to-local, align 4
  %v1_13d68 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d68 = add i32 %v1_13d68, 16
  %v3_13d68 = inttoptr i32 %v2_13d68 to i32*
  store i32 %v5_13d64, i32* %v3_13d68, align 4
  %v0_13d6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d6c = add i32 %v0_13d6c, 21
  %v2_13d6c = inttoptr i32 %v1_13d6c to i8*
  %v3_13d6c = load i8, i8* %v2_13d6c, align 1
  %v4_13d6c = zext i8 %v3_13d6c to i32
  %v1_13d70 = add i32 %v0_13d6c, 20
  %v2_13d70 = inttoptr i32 %v1_13d70 to i8*
  %v3_13d70 = load i8, i8* %v2_13d70, align 1
  %v4_13d70 = zext i8 %v3_13d70 to i32
  store i32 %v4_13d70, i32* %r3.global-to-local, align 4
  %v1_13d74 = add i32 %v0_13d6c, 22
  %v2_13d74 = inttoptr i32 %v1_13d74 to i8*
  %v3_13d74 = load i8, i8* %v2_13d74, align 1
  %v4_13d74 = zext i8 %v3_13d74 to i32
  %v4_13d78 = mul nuw nsw i32 %v4_13d6c, 256
  %v5_13d78 = or i32 %v4_13d70, %v4_13d78
  store i32 %v5_13d78, i32* %r3.global-to-local, align 4
  %v1_13d7c = add i32 %v0_13d6c, 23
  %v2_13d7c = inttoptr i32 %v1_13d7c to i8*
  %v3_13d7c = load i8, i8* %v2_13d7c, align 1
  %v4_13d7c = zext i8 %v3_13d7c to i32
  %v4_13d80 = mul nuw nsw i32 %v4_13d74, 65536
  %v5_13d80 = or i32 %v4_13d80, %v5_13d78
  %v4_13d84 = mul nuw i32 %v4_13d7c, 16777216
  %v5_13d84 = or i32 %v5_13d80, %v4_13d84
  store i32 %v5_13d84, i32* %r3.global-to-local, align 4
  %v1_13d88 = load i32, i32* %r7.global-to-local, align 4
  %v2_13d88 = add i32 %v1_13d88, 20
  %v3_13d88 = inttoptr i32 %v2_13d88 to i32*
  store i32 %v5_13d84, i32* %v3_13d88, align 4
  %v0_13d8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13d8c = add i32 %v0_13d8c, 25
  %v2_13d8c = inttoptr i32 %v1_13d8c to i8*
  %v3_13d8c = load i8, i8* %v2_13d8c, align 1
  %v4_13d8c = zext i8 %v3_13d8c to i32
  %v1_13d90 = add i32 %v0_13d8c, 24
  %v2_13d90 = inttoptr i32 %v1_13d90 to i8*
  %v3_13d90 = load i8, i8* %v2_13d90, align 1
  %v4_13d90 = zext i8 %v3_13d90 to i32
  store i32 %v4_13d90, i32* %r3.global-to-local, align 4
  %v1_13d94 = add i32 %v0_13d8c, 26
  %v2_13d94 = inttoptr i32 %v1_13d94 to i8*
  %v3_13d94 = load i8, i8* %v2_13d94, align 1
  %v4_13d94 = zext i8 %v3_13d94 to i32
  %v4_13d98 = mul nuw nsw i32 %v4_13d8c, 256
  %v5_13d98 = or i32 %v4_13d90, %v4_13d98
  store i32 %v5_13d98, i32* %r3.global-to-local, align 4
  %v1_13d9c = add i32 %v0_13d8c, 27
  %v2_13d9c = inttoptr i32 %v1_13d9c to i8*
  %v3_13d9c = load i8, i8* %v2_13d9c, align 1
  %v4_13d9c = zext i8 %v3_13d9c to i32
  %v4_13da0 = mul nuw nsw i32 %v4_13d94, 65536
  %v5_13da0 = or i32 %v4_13da0, %v5_13d98
  %v4_13da4 = mul nuw i32 %v4_13d9c, 16777216
  %v5_13da4 = or i32 %v5_13da0, %v4_13da4
  store i32 %v5_13da4, i32* %r3.global-to-local, align 4
  %v1_13da8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13da8 = add i32 %v1_13da8, 24
  %v3_13da8 = inttoptr i32 %v2_13da8 to i32*
  store i32 %v5_13da4, i32* %v3_13da8, align 4
  %v0_13dac = load i32, i32* %r4.global-to-local, align 4
  %v1_13dac = add i32 %v0_13dac, 29
  %v2_13dac = inttoptr i32 %v1_13dac to i8*
  %v3_13dac = load i8, i8* %v2_13dac, align 1
  %v4_13dac = zext i8 %v3_13dac to i32
  %v1_13db0 = add i32 %v0_13dac, 28
  %v2_13db0 = inttoptr i32 %v1_13db0 to i8*
  %v3_13db0 = load i8, i8* %v2_13db0, align 1
  %v4_13db0 = zext i8 %v3_13db0 to i32
  store i32 %v4_13db0, i32* %r3.global-to-local, align 4
  %v1_13db4 = add i32 %v0_13dac, 30
  %v2_13db4 = inttoptr i32 %v1_13db4 to i8*
  %v3_13db4 = load i8, i8* %v2_13db4, align 1
  %v4_13db4 = zext i8 %v3_13db4 to i32
  %v4_13db8 = mul nuw nsw i32 %v4_13dac, 256
  %v5_13db8 = or i32 %v4_13db0, %v4_13db8
  store i32 %v5_13db8, i32* %r3.global-to-local, align 4
  %v1_13dbc = add i32 %v0_13dac, 31
  %v2_13dbc = inttoptr i32 %v1_13dbc to i8*
  %v3_13dbc = load i8, i8* %v2_13dbc, align 1
  %v4_13dbc = zext i8 %v3_13dbc to i32
  %v4_13dc0 = mul nuw nsw i32 %v4_13db4, 65536
  %v5_13dc0 = or i32 %v4_13dc0, %v5_13db8
  %v4_13dc4 = mul nuw i32 %v4_13dbc, 16777216
  %v5_13dc4 = or i32 %v5_13dc0, %v4_13dc4
  store i32 %v5_13dc4, i32* %r3.global-to-local, align 4
  %v1_13dc8 = load i32, i32* %r7.global-to-local, align 4
  %v2_13dc8 = add i32 %v1_13dc8, 28
  %v3_13dc8 = inttoptr i32 %v2_13dc8 to i32*
  store i32 %v5_13dc4, i32* %v3_13dc8, align 4
  %v0_13dcc = load i32, i32* %r4.global-to-local, align 4
  %v1_13dcc = add i32 %v0_13dcc, 33
  %v2_13dcc = inttoptr i32 %v1_13dcc to i8*
  %v3_13dcc = load i8, i8* %v2_13dcc, align 1
  %v4_13dcc = zext i8 %v3_13dcc to i32
  %v1_13dd0 = add i32 %v0_13dcc, 37
  %v2_13dd0 = inttoptr i32 %v1_13dd0 to i8*
  %v3_13dd0 = load i8, i8* %v2_13dd0, align 1
  %v4_13dd0 = zext i8 %v3_13dd0 to i32
  %v1_13dd4 = add i32 %v0_13dcc, 32
  %v2_13dd4 = inttoptr i32 %v1_13dd4 to i8*
  %v3_13dd4 = load i8, i8* %v2_13dd4, align 1
  %v4_13dd4 = zext i8 %v3_13dd4 to i32
  %v1_13dd8 = add i32 %v0_13dcc, 36
  %v2_13dd8 = inttoptr i32 %v1_13dd8 to i8*
  %v3_13dd8 = load i8, i8* %v2_13dd8, align 1
  %v4_13dd8 = zext i8 %v3_13dd8 to i32
  store i32 %v4_13dd8, i32* %r3.global-to-local, align 4
  %v1_13ddc = add i32 %v0_13dcc, 34
  %v2_13ddc = inttoptr i32 %v1_13ddc to i8*
  %v3_13ddc = load i8, i8* %v2_13ddc, align 1
  %v4_13ddc = zext i8 %v3_13ddc to i32
  %v1_13de0 = add i32 %v0_13dcc, 38
  %v2_13de0 = inttoptr i32 %v1_13de0 to i8*
  %v3_13de0 = load i8, i8* %v2_13de0, align 1
  %v4_13de0 = zext i8 %v3_13de0 to i32
  %v1_13de4 = add i32 %v0_13dcc, 35
  %v2_13de4 = inttoptr i32 %v1_13de4 to i8*
  %v3_13de4 = load i8, i8* %v2_13de4, align 1
  %v4_13de4 = zext i8 %v3_13de4 to i32
  %v4_13de8 = mul nuw nsw i32 %v4_13dcc, 256
  %v5_13de8 = or i32 %v4_13dd4, %v4_13de8
  %v4_13dec = mul nuw nsw i32 %v4_13dd0, 256
  %v5_13dec = or i32 %v4_13dd8, %v4_13dec
  store i32 %v5_13dec, i32* %r3.global-to-local, align 4
  %v1_13df0 = add i32 %v0_13dcc, 39
  %v2_13df0 = inttoptr i32 %v1_13df0 to i8*
  %v3_13df0 = load i8, i8* %v2_13df0, align 1
  %v4_13df0 = zext i8 %v3_13df0 to i32
  %v4_13df4 = mul nuw nsw i32 %v4_13ddc, 65536
  %v5_13df4 = or i32 %v4_13df4, %v5_13de8
  %v4_13df8 = mul nuw nsw i32 %v4_13de0, 65536
  %v5_13df8 = or i32 %v4_13df8, %v5_13dec
  %v4_13dfc = mul nuw i32 %v4_13de4, 16777216
  %v5_13dfc = or i32 %v5_13df4, %v4_13dfc
  %v4_13e00 = mul nuw i32 %v4_13df0, 16777216
  %v5_13e00 = or i32 %v5_13df8, %v4_13e00
  store i32 %v5_13e00, i32* %r3.global-to-local, align 4
  %v1_13e14 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e14 = add i32 %v1_13e14, 32
  %v3_13e14 = inttoptr i32 %v2_13e14 to i32*
  store i32 %v5_13dfc, i32* %v3_13e14, align 4
  %v0_13e18 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e18 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e18 = add i32 %v1_13e18, 36
  %v3_13e18 = inttoptr i32 %v2_13e18 to i32*
  store i32 %v0_13e18, i32* %v3_13e18, align 4
  %v0_13e1c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e1c = add i32 %v0_13e1c, 45
  %v2_13e1c = inttoptr i32 %v1_13e1c to i8*
  %v3_13e1c = load i8, i8* %v2_13e1c, align 1
  %v4_13e1c = zext i8 %v3_13e1c to i32
  %v1_13e20 = add i32 %v0_13e1c, 49
  %v2_13e20 = inttoptr i32 %v1_13e20 to i8*
  %v3_13e20 = load i8, i8* %v2_13e20, align 1
  %v4_13e20 = zext i8 %v3_13e20 to i32
  %v1_13e24 = add i32 %v0_13e1c, 44
  %v2_13e24 = inttoptr i32 %v1_13e24 to i8*
  %v3_13e24 = load i8, i8* %v2_13e24, align 1
  %v4_13e24 = zext i8 %v3_13e24 to i32
  %v1_13e28 = add i32 %v0_13e1c, 48
  %v2_13e28 = inttoptr i32 %v1_13e28 to i8*
  %v3_13e28 = load i8, i8* %v2_13e28, align 1
  %v4_13e28 = zext i8 %v3_13e28 to i32
  store i32 %v4_13e28, i32* %r3.global-to-local, align 4
  %v1_13e2c = add i32 %v0_13e1c, 46
  %v2_13e2c = inttoptr i32 %v1_13e2c to i8*
  %v3_13e2c = load i8, i8* %v2_13e2c, align 1
  %v4_13e2c = zext i8 %v3_13e2c to i32
  %v1_13e30 = add i32 %v0_13e1c, 50
  %v2_13e30 = inttoptr i32 %v1_13e30 to i8*
  %v3_13e30 = load i8, i8* %v2_13e30, align 1
  %v4_13e30 = zext i8 %v3_13e30 to i32
  %v1_13e34 = add i32 %v0_13e1c, 47
  %v2_13e34 = inttoptr i32 %v1_13e34 to i8*
  %v3_13e34 = load i8, i8* %v2_13e34, align 1
  %v4_13e34 = zext i8 %v3_13e34 to i32
  %v4_13e38 = mul nuw nsw i32 %v4_13e1c, 256
  %v5_13e38 = or i32 %v4_13e24, %v4_13e38
  %v4_13e3c = mul nuw nsw i32 %v4_13e20, 256
  %v5_13e3c = or i32 %v4_13e28, %v4_13e3c
  store i32 %v5_13e3c, i32* %r3.global-to-local, align 4
  %v1_13e40 = add i32 %v0_13e1c, 51
  %v2_13e40 = inttoptr i32 %v1_13e40 to i8*
  %v3_13e40 = load i8, i8* %v2_13e40, align 1
  %v4_13e40 = zext i8 %v3_13e40 to i32
  %v4_13e44 = mul nuw nsw i32 %v4_13e2c, 65536
  %v5_13e44 = or i32 %v4_13e44, %v5_13e38
  %v4_13e48 = mul nuw nsw i32 %v4_13e30, 65536
  %v5_13e48 = or i32 %v4_13e48, %v5_13e3c
  %v4_13e4c = mul nuw i32 %v4_13e34, 16777216
  %v5_13e4c = or i32 %v5_13e44, %v4_13e4c
  %v4_13e50 = mul nuw i32 %v4_13e40, 16777216
  %v5_13e50 = or i32 %v5_13e48, %v4_13e50
  store i32 %v5_13e50, i32* %r3.global-to-local, align 4
  %v1_13e64 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e64 = add i32 %v1_13e64, 44
  %v3_13e64 = inttoptr i32 %v2_13e64 to i32*
  store i32 %v5_13e4c, i32* %v3_13e64, align 4
  %v0_13e68 = load i32, i32* %r3.global-to-local, align 4
  %v1_13e68 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e68 = add i32 %v1_13e68, 48
  %v3_13e68 = inttoptr i32 %v2_13e68 to i32*
  store i32 %v0_13e68, i32* %v3_13e68, align 4
  %v0_13e6c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e6c = add i32 %v0_13e6c, 53
  %v2_13e6c = inttoptr i32 %v1_13e6c to i8*
  %v3_13e6c = load i8, i8* %v2_13e6c, align 1
  %v4_13e6c = zext i8 %v3_13e6c to i32
  %v1_13e70 = add i32 %v0_13e6c, 52
  %v2_13e70 = inttoptr i32 %v1_13e70 to i8*
  %v3_13e70 = load i8, i8* %v2_13e70, align 1
  %v4_13e70 = zext i8 %v3_13e70 to i32
  store i32 %v4_13e70, i32* %r3.global-to-local, align 4
  %v1_13e74 = add i32 %v0_13e6c, 54
  %v2_13e74 = inttoptr i32 %v1_13e74 to i8*
  %v3_13e74 = load i8, i8* %v2_13e74, align 1
  %v4_13e74 = zext i8 %v3_13e74 to i32
  %v4_13e78 = mul nuw nsw i32 %v4_13e6c, 256
  %v5_13e78 = or i32 %v4_13e70, %v4_13e78
  store i32 %v5_13e78, i32* %r3.global-to-local, align 4
  %v1_13e7c = add i32 %v0_13e6c, 55
  %v2_13e7c = inttoptr i32 %v1_13e7c to i8*
  %v3_13e7c = load i8, i8* %v2_13e7c, align 1
  %v4_13e7c = zext i8 %v3_13e7c to i32
  %v4_13e80 = mul nuw nsw i32 %v4_13e74, 65536
  %v5_13e80 = or i32 %v4_13e80, %v5_13e78
  %v4_13e84 = mul nuw i32 %v4_13e7c, 16777216
  %v5_13e84 = or i32 %v5_13e80, %v4_13e84
  store i32 %v5_13e84, i32* %r3.global-to-local, align 4
  %v1_13e88 = load i32, i32* %r7.global-to-local, align 4
  %v2_13e88 = add i32 %v1_13e88, 52
  %v3_13e88 = inttoptr i32 %v2_13e88 to i32*
  store i32 %v5_13e84, i32* %v3_13e88, align 4
  %v0_13e8c = load i32, i32* %r4.global-to-local, align 4
  %v1_13e8c = add i32 %v0_13e8c, 57
  %v2_13e8c = inttoptr i32 %v1_13e8c to i8*
  %v3_13e8c = load i8, i8* %v2_13e8c, align 1
  %v4_13e8c = zext i8 %v3_13e8c to i32
  %v1_13e90 = add i32 %v0_13e8c, 56
  %v2_13e90 = inttoptr i32 %v1_13e90 to i8*
  %v3_13e90 = load i8, i8* %v2_13e90, align 1
  %v4_13e90 = zext i8 %v3_13e90 to i32
  %v1_13e94 = add i32 %v0_13e8c, 60
  %v2_13e94 = inttoptr i32 %v1_13e94 to i8*
  %v3_13e94 = load i8, i8* %v2_13e94, align 1
  %v4_13e94 = zext i8 %v3_13e94 to i32
  store i32 %v4_13e94, i32* %r3.global-to-local, align 4
  %v1_13e98 = add i32 %v0_13e8c, 61
  %v2_13e98 = inttoptr i32 %v1_13e98 to i8*
  %v3_13e98 = load i8, i8* %v2_13e98, align 1
  %v4_13e98 = zext i8 %v3_13e98 to i32
  %v1_13e9c = add i32 %v0_13e8c, 58
  %v2_13e9c = inttoptr i32 %v1_13e9c to i8*
  %v3_13e9c = load i8, i8* %v2_13e9c, align 1
  %v4_13e9c = zext i8 %v3_13e9c to i32
  %v1_13ea0 = add i32 %v0_13e8c, 62
  %v2_13ea0 = inttoptr i32 %v1_13ea0 to i8*
  %v3_13ea0 = load i8, i8* %v2_13ea0, align 1
  %v4_13ea0 = zext i8 %v3_13ea0 to i32
  %v1_13ea4 = add i32 %v0_13e8c, 59
  %v2_13ea4 = inttoptr i32 %v1_13ea4 to i8*
  %v3_13ea4 = load i8, i8* %v2_13ea4, align 1
  %v4_13ea4 = zext i8 %v3_13ea4 to i32
  %v4_13ea8 = mul nuw nsw i32 %v4_13e8c, 256
  %v5_13ea8 = or i32 %v4_13e90, %v4_13ea8
  %v4_13eac = mul nuw nsw i32 %v4_13e98, 256
  %v5_13eac = or i32 %v4_13eac, %v4_13e94
  store i32 %v5_13eac, i32* %r3.global-to-local, align 4
  %v1_13eb0 = add i32 %v0_13e8c, 63
  %v2_13eb0 = inttoptr i32 %v1_13eb0 to i8*
  %v3_13eb0 = load i8, i8* %v2_13eb0, align 1
  %v4_13eb0 = zext i8 %v3_13eb0 to i32
  %v4_13eb4 = mul nuw nsw i32 %v4_13e9c, 65536
  %v5_13eb4 = or i32 %v4_13eb4, %v5_13ea8
  %v4_13eb8 = mul nuw nsw i32 %v4_13ea0, 65536
  %v5_13eb8 = or i32 %v4_13eb8, %v5_13eac
  %v4_13ebc = mul nuw i32 %v4_13eb0, 16777216
  %v5_13ebc = or i32 %v5_13eb8, %v4_13ebc
  %v4_13ec0 = mul nuw i32 %v4_13ea4, 16777216
  %v5_13ec0 = or i32 %v5_13eb4, %v4_13ec0
  store i32 %v5_13ebc, i32* %r3.global-to-local, align 4
  %v1_13ed0 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ed0 = add i32 %v1_13ed0, 56
  %v3_13ed0 = inttoptr i32 %v2_13ed0 to i32*
  store i32 %v5_13ec0, i32* %v3_13ed0, align 4
  %v0_13ed4 = load i32, i32* %r3.global-to-local, align 4
  %v1_13ed4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ed4 = add i32 %v1_13ed4, 60
  %v3_13ed4 = inttoptr i32 %v2_13ed4 to i32*
  store i32 %v0_13ed4, i32* %v3_13ed4, align 4
  %v0_13ed8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ed8 = add i32 %v0_13ed8, 65
  %v2_13ed8 = inttoptr i32 %v1_13ed8 to i8*
  %v3_13ed8 = load i8, i8* %v2_13ed8, align 1
  %v4_13ed8 = zext i8 %v3_13ed8 to i32
  %v1_13edc = add i32 %v0_13ed8, 64
  %v2_13edc = inttoptr i32 %v1_13edc to i8*
  %v3_13edc = load i8, i8* %v2_13edc, align 1
  %v4_13edc = zext i8 %v3_13edc to i32
  store i32 %v4_13edc, i32* %r3.global-to-local, align 4
  %v1_13ee0 = add i32 %v0_13ed8, 66
  %v2_13ee0 = inttoptr i32 %v1_13ee0 to i8*
  %v3_13ee0 = load i8, i8* %v2_13ee0, align 1
  %v4_13ee0 = zext i8 %v3_13ee0 to i32
  %v4_13ee4 = mul nuw nsw i32 %v4_13ed8, 256
  %v5_13ee4 = or i32 %v4_13edc, %v4_13ee4
  store i32 %v5_13ee4, i32* %r3.global-to-local, align 4
  %v1_13ee8 = add i32 %v0_13ed8, 67
  %v2_13ee8 = inttoptr i32 %v1_13ee8 to i8*
  %v3_13ee8 = load i8, i8* %v2_13ee8, align 1
  %v4_13ee8 = zext i8 %v3_13ee8 to i32
  %v4_13eec = mul nuw nsw i32 %v4_13ee0, 65536
  %v5_13eec = or i32 %v4_13eec, %v5_13ee4
  %v4_13ef0 = mul nuw i32 %v4_13ee8, 16777216
  %v5_13ef0 = or i32 %v5_13eec, %v4_13ef0
  store i32 %v5_13ef0, i32* %r3.global-to-local, align 4
  %v1_13ef4 = load i32, i32* %r7.global-to-local, align 4
  %v2_13ef4 = add i32 %v1_13ef4, 64
  %v3_13ef4 = inttoptr i32 %v2_13ef4 to i32*
  store i32 %v5_13ef0, i32* %v3_13ef4, align 4
  %v0_13ef8 = load i32, i32* %r4.global-to-local, align 4
  %v1_13ef8 = add i32 %v0_13ef8, 73
  %v2_13ef8 = inttoptr i32 %v1_13ef8 to i8*
  %v3_13ef8 = load i8, i8* %v2_13ef8, align 1
  %v4_13ef8 = zext i8 %v3_13ef8 to i32
  %v1_13efc = add i32 %v0_13ef8, 72
  %v2_13efc = inttoptr i32 %v1_13efc to i8*
  %v3_13efc = load i8, i8* %v2_13efc, align 1
  %v4_13efc = zext i8 %v3_13efc to i32
  store i32 %v4_13efc, i32* %r3.global-to-local, align 4
  %v1_13f00 = add i32 %v0_13ef8, 74
  %v2_13f00 = inttoptr i32 %v1_13f00 to i8*
  %v3_13f00 = load i8, i8* %v2_13f00, align 1
  %v4_13f00 = zext i8 %v3_13f00 to i32
  %v4_13f04 = mul nuw nsw i32 %v4_13ef8, 256
  %v5_13f04 = or i32 %v4_13efc, %v4_13f04
  store i32 %v5_13f04, i32* %r3.global-to-local, align 4
  %v1_13f08 = add i32 %v0_13ef8, 75
  %v2_13f08 = inttoptr i32 %v1_13f08 to i8*
  %v3_13f08 = load i8, i8* %v2_13f08, align 1
  %v4_13f08 = zext i8 %v3_13f08 to i32
  %v4_13f0c = mul nuw nsw i32 %v4_13f00, 65536
  %v5_13f0c = or i32 %v4_13f0c, %v5_13f04
  %v4_13f10 = mul nuw i32 %v4_13f08, 16777216
  %v5_13f10 = or i32 %v5_13f0c, %v4_13f10
  store i32 %v5_13f10, i32* %r3.global-to-local, align 4
  %v1_13f14 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f14 = add i32 %v1_13f14, 72
  %v3_13f14 = inttoptr i32 %v2_13f14 to i32*
  store i32 %v5_13f10, i32* %v3_13f14, align 4
  %v0_13f18 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f18 = add i32 %v0_13f18, 81
  %v2_13f18 = inttoptr i32 %v1_13f18 to i8*
  %v3_13f18 = load i8, i8* %v2_13f18, align 1
  %v4_13f18 = zext i8 %v3_13f18 to i32
  %v1_13f1c = add i32 %v0_13f18, 80
  %v2_13f1c = inttoptr i32 %v1_13f1c to i8*
  %v3_13f1c = load i8, i8* %v2_13f1c, align 1
  %v4_13f1c = zext i8 %v3_13f1c to i32
  store i32 %v4_13f1c, i32* %r3.global-to-local, align 4
  %v1_13f20 = add i32 %v0_13f18, 82
  %v2_13f20 = inttoptr i32 %v1_13f20 to i8*
  %v3_13f20 = load i8, i8* %v2_13f20, align 1
  %v4_13f20 = zext i8 %v3_13f20 to i32
  %v4_13f24 = mul nuw nsw i32 %v4_13f18, 256
  %v5_13f24 = or i32 %v4_13f1c, %v4_13f24
  store i32 %v5_13f24, i32* %r3.global-to-local, align 4
  %v1_13f28 = add i32 %v0_13f18, 83
  %v2_13f28 = inttoptr i32 %v1_13f28 to i8*
  %v3_13f28 = load i8, i8* %v2_13f28, align 1
  %v4_13f28 = zext i8 %v3_13f28 to i32
  %v4_13f2c = mul nuw nsw i32 %v4_13f20, 65536
  %v5_13f2c = or i32 %v4_13f2c, %v5_13f24
  %v4_13f30 = mul nuw i32 %v4_13f28, 16777216
  %v5_13f30 = or i32 %v5_13f2c, %v4_13f30
  store i32 %v5_13f30, i32* %r3.global-to-local, align 4
  %v1_13f34 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f34 = add i32 %v1_13f34, 80
  %v3_13f34 = inttoptr i32 %v2_13f34 to i32*
  store i32 %v5_13f30, i32* %v3_13f34, align 4
  %v0_13f38 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f38 = add i32 %v0_13f38, 69
  %v2_13f38 = inttoptr i32 %v1_13f38 to i8*
  %v3_13f38 = load i8, i8* %v2_13f38, align 1
  %v4_13f38 = zext i8 %v3_13f38 to i32
  %v1_13f3c = add i32 %v0_13f38, 68
  %v2_13f3c = inttoptr i32 %v1_13f3c to i8*
  %v3_13f3c = load i8, i8* %v2_13f3c, align 1
  %v4_13f3c = zext i8 %v3_13f3c to i32
  store i32 %v4_13f3c, i32* %r3.global-to-local, align 4
  %v1_13f40 = add i32 %v0_13f38, 70
  %v2_13f40 = inttoptr i32 %v1_13f40 to i8*
  %v3_13f40 = load i8, i8* %v2_13f40, align 1
  %v4_13f40 = zext i8 %v3_13f40 to i32
  %v4_13f44 = mul nuw nsw i32 %v4_13f38, 256
  %v5_13f44 = or i32 %v4_13f3c, %v4_13f44
  store i32 %v5_13f44, i32* %r3.global-to-local, align 4
  %v1_13f48 = add i32 %v0_13f38, 71
  %v2_13f48 = inttoptr i32 %v1_13f48 to i8*
  %v3_13f48 = load i8, i8* %v2_13f48, align 1
  %v4_13f48 = zext i8 %v3_13f48 to i32
  %v4_13f4c = mul nuw nsw i32 %v4_13f40, 65536
  %v5_13f4c = or i32 %v4_13f4c, %v5_13f44
  %v4_13f50 = mul nuw i32 %v4_13f48, 16777216
  %v5_13f50 = or i32 %v5_13f4c, %v4_13f50
  store i32 %v5_13f50, i32* %r3.global-to-local, align 4
  %v1_13f54 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f54 = add i32 %v1_13f54, 68
  %v3_13f54 = inttoptr i32 %v2_13f54 to i32*
  store i32 %v5_13f50, i32* %v3_13f54, align 4
  %v0_13f58 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f58 = add i32 %v0_13f58, 77
  %v2_13f58 = inttoptr i32 %v1_13f58 to i8*
  %v3_13f58 = load i8, i8* %v2_13f58, align 1
  %v4_13f58 = zext i8 %v3_13f58 to i32
  %v1_13f5c = add i32 %v0_13f58, 76
  %v2_13f5c = inttoptr i32 %v1_13f5c to i8*
  %v3_13f5c = load i8, i8* %v2_13f5c, align 1
  %v4_13f5c = zext i8 %v3_13f5c to i32
  store i32 %v4_13f5c, i32* %r3.global-to-local, align 4
  %v1_13f60 = add i32 %v0_13f58, 78
  %v2_13f60 = inttoptr i32 %v1_13f60 to i8*
  %v3_13f60 = load i8, i8* %v2_13f60, align 1
  %v4_13f60 = zext i8 %v3_13f60 to i32
  %v4_13f64 = mul nuw nsw i32 %v4_13f58, 256
  %v5_13f64 = or i32 %v4_13f5c, %v4_13f64
  store i32 %v5_13f64, i32* %r3.global-to-local, align 4
  %v1_13f68 = add i32 %v0_13f58, 79
  %v2_13f68 = inttoptr i32 %v1_13f68 to i8*
  %v3_13f68 = load i8, i8* %v2_13f68, align 1
  %v4_13f68 = zext i8 %v3_13f68 to i32
  %v4_13f6c = mul nuw nsw i32 %v4_13f60, 65536
  %v5_13f6c = or i32 %v4_13f6c, %v5_13f64
  %v4_13f70 = mul nuw i32 %v4_13f68, 16777216
  %v5_13f70 = or i32 %v5_13f6c, %v4_13f70
  store i32 %v5_13f70, i32* %r3.global-to-local, align 4
  %v1_13f74 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f74 = add i32 %v1_13f74, 76
  %v3_13f74 = inttoptr i32 %v2_13f74 to i32*
  store i32 %v5_13f70, i32* %v3_13f74, align 4
  %v0_13f78 = load i32, i32* %r4.global-to-local, align 4
  %v1_13f78 = add i32 %v0_13f78, 85
  %v2_13f78 = inttoptr i32 %v1_13f78 to i8*
  %v3_13f78 = load i8, i8* %v2_13f78, align 1
  %v4_13f78 = zext i8 %v3_13f78 to i32
  %v1_13f7c = add i32 %v0_13f78, 84
  %v2_13f7c = inttoptr i32 %v1_13f7c to i8*
  %v3_13f7c = load i8, i8* %v2_13f7c, align 1
  %v4_13f7c = zext i8 %v3_13f7c to i32
  store i32 %v4_13f7c, i32* %r3.global-to-local, align 4
  %v1_13f80 = add i32 %v0_13f78, 86
  %v2_13f80 = inttoptr i32 %v1_13f80 to i8*
  %v3_13f80 = load i8, i8* %v2_13f80, align 1
  %v4_13f80 = zext i8 %v3_13f80 to i32
  %v4_13f84 = mul nuw nsw i32 %v4_13f78, 256
  %v5_13f84 = or i32 %v4_13f7c, %v4_13f84
  store i32 %v5_13f84, i32* %r3.global-to-local, align 4
  %v1_13f88 = add i32 %v0_13f78, 87
  %v2_13f88 = inttoptr i32 %v1_13f88 to i8*
  %v3_13f88 = load i8, i8* %v2_13f88, align 1
  %v4_13f88 = zext i8 %v3_13f88 to i32
  %v4_13f8c = mul nuw nsw i32 %v4_13f80, 65536
  %v5_13f8c = or i32 %v4_13f8c, %v5_13f84
  %v4_13f90 = mul nuw i32 %v4_13f88, 16777216
  %v5_13f90 = or i32 %v5_13f8c, %v4_13f90
  store i32 %v5_13f90, i32* %r3.global-to-local, align 4
  %v1_13f94 = load i32, i32* %r7.global-to-local, align 4
  %v2_13f94 = add i32 %v1_13f94, 84
  %v3_13f94 = inttoptr i32 %v2_13f94 to i32*
  store i32 %v5_13f90, i32* %v3_13f94, align 4
  ret i32 %v4_13e98

; uselistorder directives
  uselistorder i32 %v4_13e98, { 1, 0 }
  uselistorder i32 %v0_13e8c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13e1c, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13dcc, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %v0_13cec, { 0, 1, 3, 2, 5, 4, 6, 7 }
  uselistorder i32 %tmp, { 6, 5, 3, 4, 2, 1, 0, 7 }
  uselistorder i32* %r7.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0, 21 }
  uselistorder i32* %r4.global-to-local, { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 16 }
  uselistorder i32* %r3.global-to-local, { 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 0, 1, 2, 3, 4 }
  uselistorder i32 87, { 1, 0 }
  uselistorder i32 69, { 1, 0 }
  uselistorder i32 62, { 1, 2, 0 }
  uselistorder i32 61, { 1, 0 }
  uselistorder i32 55, { 2, 4, 0, 3, 1 }
  uselistorder i32 54, { 1, 0 }
  uselistorder i32 53, { 1, 2, 0, 3 }
  uselistorder i32 47, { 1, 2, 3, 4, 0 }
  uselistorder i32 50, { 1, 0 }
  uselistorder i32 39, { 1, 2, 0 }
  uselistorder i32 35, { 3, 0, 1, 2 }
  uselistorder i32 38, { 1, 0, 2, 3, 4, 5 }
  uselistorder i32 34, { 3, 0, 1, 2 }
  uselistorder i32 33, { 5, 6, 0, 1, 2, 3, 4 }
  uselistorder i32 30, { 7, 2, 8, 3, 9, 4, 10, 1, 11, 0, 12, 5, 6 }
  uselistorder i32 29, { 4, 5, 6, 3, 0, 1, 2 }
  uselistorder i32 26, { 5, 0, 1, 6, 2, 7, 3, 8, 4, 9 }
  uselistorder i32 25, { 9, 17, 18, 8, 10, 11, 2, 3, 12, 0, 13, 4, 14, 1, 15, 5, 6, 16, 7, 19 }
  uselistorder i32 23, { 7, 0, 1, 8, 2, 3, 4, 5, 9, 6 }
  uselistorder i32 22, { 11, 1, 14, 2, 3, 4, 5, 0, 12, 6, 7, 8, 9, 13, 10 }
  uselistorder i32 21, { 9, 3, 2, 10, 11, 12, 8, 4, 5, 6, 7, 0, 1 }
  uselistorder i32 19, { 8, 11, 12, 13, 4, 9, 1, 0, 10, 5, 6, 7, 14, 2, 15, 3, 16 }
  uselistorder i32 18, { 5, 6, 7, 8, 4, 9, 0, 10, 1, 11, 2, 12, 3, 13 }
  uselistorder i32 17, { 18, 23, 0, 4, 24, 25, 5, 26, 27, 6, 1, 19, 7, 20, 21, 22, 8, 9, 10, 11, 12, 13, 28, 14, 29, 15, 30, 16, 31, 17, 32, 33, 2, 34, 35, 36, 3, 37, 38, 39, 40, 41, 42, 43 }
  uselistorder i32 6, { 32, 39, 16, 17, 84, 18, 2, 19, 3, 20, 4, 22, 33, 23, 34, 24, 35, 21, 36, 0, 25, 37, 38, 5, 6, 43, 44, 45, 7, 46, 47, 48, 49, 8, 50, 51, 52, 53, 9, 54, 10, 55, 56, 57, 26, 58, 11, 59, 60, 61, 27, 62, 12, 63, 64, 65, 28, 66, 67, 68, 29, 69, 13, 70, 71, 72, 73, 30, 74, 14, 75, 77, 78, 79, 80, 81, 31, 82, 15, 83, 1, 76, 40, 41, 42 }
  uselistorder i32 96, { 1, 0, 2, 3 }
}

define i32 @function_13fa0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_13fa0:
  %ip.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %r6.global-to-local = alloca i32, align 4
  store i32 %arg2, i32* %r1.global-to-local, align 4
  %tmp = ptrtoint i32* %arg1 to i32
  store i32 %tmp, i32* %r0.global-to-local, align 4
  %stack_var_-16 = alloca i32, align 4
  %v3_13fa0 = load i32, i32* @r4, align 4
  store i32 %v3_13fa0, i32* %stack_var_-16, align 4
  store i32 %arg2, i32* %r6.global-to-local, align 4
  store i32 %tmp, i32* %r5.global-to-local, align 4
  store i32 0, i32* %r1.global-to-local, align 4
  store i32 88, i32* @r2, align 4
  store i32 %arg2, i32* %r0.global-to-local, align 4
  %v2_13fb8 = inttoptr i32 %arg2 to i8*
  %v3_13fb8 = call i32 @function_12450(i8* %v2_13fb8, i32 0)
  store i32 %v3_13fb8, i32* %r0.global-to-local, align 4
  %v0_13fbc = load i32, i32* %r5.global-to-local, align 4
  %v1_13fbc = inttoptr i32 %v0_13fbc to i32*
  %v2_13fbc = load i32, i32* %v1_13fbc, align 4
  store i32 %v2_13fbc, i32* %r3.global-to-local, align 4
  %v1_13fc0 = add i32 %v0_13fbc, 4
  %v2_13fc0 = inttoptr i32 %v1_13fc0 to i32*
  %v3_13fc0 = load i32, i32* %v2_13fc0, align 4
  store i32 %v3_13fc0, i32* %r2.global-to-local, align 4
  store i32 0, i32* %r4.global-to-local, align 4
  %v0_13fc8 = load i32, i32* %r6.global-to-local, align 4
  %v1_13fc8 = inttoptr i32 %v0_13fc8 to i32*
  store i32 %v2_13fbc, i32* %v1_13fc8, align 4
  %v3_13fc8 = add i32 %v0_13fc8, 4
  %v4_13fc8 = inttoptr i32 %v3_13fc8 to i32*
  %v5_13fc8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_13fc8, i32* %v4_13fc8, align 4
  %v0_13fcc = load i32, i32* %r2.global-to-local, align 4
  %v1_13fcc = load i32, i32* %r6.global-to-local, align 4
  %v2_13fcc = add i32 %v1_13fcc, 12
  %v3_13fcc = inttoptr i32 %v2_13fcc to i32*
  store i32 %v0_13fcc, i32* %v3_13fcc, align 4
  %v0_13fd0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fd0 = add i32 %v0_13fd0, 9
  %v2_13fd0 = inttoptr i32 %v1_13fd0 to i8*
  %v3_13fd0 = load i8, i8* %v2_13fd0, align 1
  %v4_13fd0 = zext i8 %v3_13fd0 to i32
  store i32 %v4_13fd0, i32* %r2.global-to-local, align 4
  %v1_13fd4 = add i32 %v0_13fd0, 8
  %v2_13fd4 = inttoptr i32 %v1_13fd4 to i8*
  %v3_13fd4 = load i8, i8* %v2_13fd4, align 1
  %v4_13fd4 = zext i8 %v3_13fd4 to i32
  %v4_13fd8 = mul nuw nsw i32 %v4_13fd0, 256
  %v5_13fd8 = or i32 %v4_13fd4, %v4_13fd8
  store i32 %v5_13fd8, i32* %r3.global-to-local, align 4
  %v1_13fdc = load i32, i32* %r6.global-to-local, align 4
  %v2_13fdc = add i32 %v1_13fdc, 16
  %v3_13fdc = inttoptr i32 %v2_13fdc to i32*
  store i32 %v5_13fd8, i32* %v3_13fdc, align 4
  %v0_13fe0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13fe0 = add i32 %v0_13fe0, 11
  %v2_13fe0 = inttoptr i32 %v1_13fe0 to i8*
  %v3_13fe0 = load i8, i8* %v2_13fe0, align 1
  %v4_13fe0 = zext i8 %v3_13fe0 to i32
  store i32 %v4_13fe0, i32* %r2.global-to-local, align 4
  %v1_13fe4 = add i32 %v0_13fe0, 10
  %v2_13fe4 = inttoptr i32 %v1_13fe4 to i8*
  %v3_13fe4 = load i8, i8* %v2_13fe4, align 1
  %v4_13fe4 = zext i8 %v3_13fe4 to i32
  %v4_13fe8 = mul nuw nsw i32 %v4_13fe0, 256
  %v5_13fe8 = or i32 %v4_13fe4, %v4_13fe8
  store i32 %v5_13fe8, i32* %r3.global-to-local, align 4
  %v1_13fec = load i32, i32* %r6.global-to-local, align 4
  %v2_13fec = add i32 %v1_13fec, 20
  %v3_13fec = inttoptr i32 %v2_13fec to i32*
  store i32 %v5_13fe8, i32* %v3_13fec, align 4
  %v0_13ff0 = load i32, i32* %r5.global-to-local, align 4
  %v1_13ff0 = add i32 %v0_13ff0, 13
  %v2_13ff0 = inttoptr i32 %v1_13ff0 to i8*
  %v3_13ff0 = load i8, i8* %v2_13ff0, align 1
  %v4_13ff0 = zext i8 %v3_13ff0 to i32
  store i32 %v4_13ff0, i32* %r2.global-to-local, align 4
  %v1_13ff4 = add i32 %v0_13ff0, 12
  %v2_13ff4 = inttoptr i32 %v1_13ff4 to i8*
  %v3_13ff4 = load i8, i8* %v2_13ff4, align 1
  %v4_13ff4 = zext i8 %v3_13ff4 to i32
  %v4_13ff8 = mul nuw nsw i32 %v4_13ff0, 256
  %v5_13ff8 = or i32 %v4_13ff4, %v4_13ff8
  store i32 %v5_13ff8, i32* %r3.global-to-local, align 4
  %v1_13ffc = load i32, i32* %r6.global-to-local, align 4
  %v2_13ffc = add i32 %v1_13ffc, 24
  %v3_13ffc = inttoptr i32 %v2_13ffc to i32*
  store i32 %v5_13ff8, i32* %v3_13ffc, align 4
  %v0_14000 = load i32, i32* %r5.global-to-local, align 4
  %v1_14000 = add i32 %v0_14000, 20
  %v2_14000 = inttoptr i32 %v1_14000 to i32*
  %v3_14000 = load i32, i32* %v2_14000, align 4
  store i32 %v3_14000, i32* %r3.global-to-local, align 4
  %v1_14004 = add i32 %v0_14000, 14
  %v2_14004 = inttoptr i32 %v1_14004 to i8*
  %v3_14004 = load i8, i8* %v2_14004, align 1
  %v4_14004 = zext i8 %v3_14004 to i32
  store i32 %v4_14004, i32* %r0.global-to-local, align 4
  %v1_14008 = add i32 %v0_14000, 15
  %v2_14008 = inttoptr i32 %v1_14008 to i8*
  %v3_14008 = load i8, i8* %v2_14008, align 1
  %v4_14008 = zext i8 %v3_14008 to i32
  store i32 %v4_14008, i32* %ip.global-to-local, align 4
  %v1_1400c = add i32 %v0_14000, 16
  %v2_1400c = inttoptr i32 %v1_1400c to i32*
  %v3_1400c = load i32, i32* %v2_1400c, align 4
  store i32 %v3_1400c, i32* %r1.global-to-local, align 4
  %v1_14010 = load i32, i32* %r6.global-to-local, align 4
  %v2_14010 = add i32 %v1_14010, 44
  %v3_14010 = inttoptr i32 %v2_14010 to i32*
  store i32 %v3_14000, i32* %v3_14010, align 4
  %v0_14014 = load i32, i32* %r5.global-to-local, align 4
  %v1_14014 = add i32 %v0_14014, 24
  %v2_14014 = inttoptr i32 %v1_14014 to i32*
  %v3_14014 = load i32, i32* %v2_14014, align 4
  store i32 %v3_14014, i32* %r3.global-to-local, align 4
  %v1_14018 = load i32, i32* %r6.global-to-local, align 4
  %v2_14018 = add i32 %v1_14018, 48
  %v3_14018 = inttoptr i32 %v2_14018 to i32*
  store i32 %v3_14014, i32* %v3_14018, align 4
  %v0_1401c = load i32, i32* %r5.global-to-local, align 4
  %v1_1401c = add i32 %v0_1401c, 28
  %v2_1401c = inttoptr i32 %v1_1401c to i32*
  %v3_1401c = load i32, i32* %v2_1401c, align 4
  store i32 %v3_1401c, i32* %r3.global-to-local, align 4
  %v1_14020 = load i32, i32* %r6.global-to-local, align 4
  %v2_14020 = add i32 %v1_14020, 52
  %v3_14020 = inttoptr i32 %v2_14020 to i32*
  store i32 %v3_1401c, i32* %v3_14020, align 4
  %v0_14024 = load i32, i32* %r5.global-to-local, align 4
  %v1_14024 = add i32 %v0_14024, 32
  %v2_14024 = inttoptr i32 %v1_14024 to i32*
  %v3_14024 = load i32, i32* %v2_14024, align 4
  store i32 %v3_14024, i32* %r3.global-to-local, align 4
  %v1_14028 = load i32, i32* %r6.global-to-local, align 4
  %v2_14028 = add i32 %v1_14028, 56
  %v3_14028 = inttoptr i32 %v2_14028 to i32*
  store i32 %v3_14024, i32* %v3_14028, align 4
  %v0_1402c = load i32, i32* %r5.global-to-local, align 4
  %v1_1402c = add i32 %v0_1402c, 40
  %v2_1402c = inttoptr i32 %v1_1402c to i32*
  %v3_1402c = load i32, i32* %v2_1402c, align 4
  store i32 %v3_1402c, i32* %r3.global-to-local, align 4
  %v1_14030 = load i32, i32* %r6.global-to-local, align 4
  %v2_14030 = add i32 %v1_14030, 64
  %v3_14030 = inttoptr i32 %v2_14030 to i32*
  store i32 %v3_1402c, i32* %v3_14030, align 4
  %v0_14034 = load i32, i32* %r5.global-to-local, align 4
  %v1_14034 = add i32 %v0_14034, 48
  %v2_14034 = inttoptr i32 %v1_14034 to i32*
  %v3_14034 = load i32, i32* %v2_14034, align 4
  store i32 %v3_14034, i32* %r3.global-to-local, align 4
  %v1_14038 = load i32, i32* %r6.global-to-local, align 4
  %v2_14038 = add i32 %v1_14038, 72
  %v3_14038 = inttoptr i32 %v2_14038 to i32*
  store i32 %v3_14034, i32* %v3_14038, align 4
  %v0_1403c = load i32, i32* %r5.global-to-local, align 4
  %v1_1403c = add i32 %v0_1403c, 36
  %v2_1403c = inttoptr i32 %v1_1403c to i32*
  %v3_1403c = load i32, i32* %v2_1403c, align 4
  store i32 %v3_1403c, i32* %r3.global-to-local, align 4
  %v1_14040 = load i32, i32* %r6.global-to-local, align 4
  %v2_14040 = add i32 %v1_14040, 60
  %v3_14040 = inttoptr i32 %v2_14040 to i32*
  store i32 %v3_1403c, i32* %v3_14040, align 4
  %v0_14044 = load i32, i32* %r5.global-to-local, align 4
  %v1_14044 = add i32 %v0_14044, 44
  %v2_14044 = inttoptr i32 %v1_14044 to i32*
  %v3_14044 = load i32, i32* %v2_14044, align 4
  store i32 %v3_14044, i32* %r3.global-to-local, align 4
  %v0_14048 = load i32, i32* %r0.global-to-local, align 4
  %v1_14048 = load i32, i32* %ip.global-to-local, align 4
  %v4_14048 = mul i32 %v1_14048, 256
  %v5_14048 = or i32 %v4_14048, %v0_14048
  store i32 %v5_14048, i32* %r0.global-to-local, align 4
  store i32 0, i32* %r2.global-to-local, align 4
  %v1_14050 = load i32, i32* %r6.global-to-local, align 4
  %v2_14050 = add i32 %v1_14050, 28
  %v3_14050 = inttoptr i32 %v2_14050 to i32*
  store i32 %v5_14048, i32* %v3_14050, align 4
  %v0_14054 = load i32, i32* %r1.global-to-local, align 4
  %v1_14054 = load i32, i32* %r6.global-to-local, align 4
  %v2_14054 = add i32 %v1_14054, 32
  %v3_14054 = inttoptr i32 %v2_14054 to i32*
  store i32 %v0_14054, i32* %v3_14054, align 4
  %v0_14058 = load i32, i32* %r2.global-to-local, align 4
  %v1_14058 = load i32, i32* %r6.global-to-local, align 4
  %v2_14058 = add i32 %v1_14058, 36
  %v3_14058 = inttoptr i32 %v2_14058 to i32*
  store i32 %v0_14058, i32* %v3_14058, align 4
  %v0_1405c = load i32, i32* %r3.global-to-local, align 4
  %v1_1405c = load i32, i32* %r6.global-to-local, align 4
  %v2_1405c = add i32 %v1_1405c, 68
  %v3_1405c = inttoptr i32 %v2_1405c to i32*
  store i32 %v0_1405c, i32* %v3_1405c, align 4
  %v0_14060 = load i32, i32* %r5.global-to-local, align 4
  %v1_14060 = add i32 %v0_14060, 52
  %v2_14060 = inttoptr i32 %v1_14060 to i32*
  %v3_14060 = load i32, i32* %v2_14060, align 4
  store i32 %v3_14060, i32* %r3.global-to-local, align 4
  %v1_14064 = load i32, i32* %r6.global-to-local, align 4
  %v2_14064 = add i32 %v1_14064, 76
  %v3_14064 = inttoptr i32 %v2_14064 to i32*
  store i32 %v3_14060, i32* %v3_14064, align 4
  %v2_14068 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14068, i32* %r4.global-to-local, align 4
  ret i32 %v5_14048

; uselistorder directives
  uselistorder i32 %v0_14000, { 1, 0, 2, 3 }
  uselistorder i32* %r1.global-to-local, { 1, 2, 3, 0 }
  uselistorder i32* %r0.global-to-local, { 1, 2, 3, 5, 4, 0 }
  uselistorder i32 76, { 2, 0, 1 }
  uselistorder i32 68, { 2, 0, 1 }
  uselistorder i32 60, { 3, 1, 2, 0, 4 }
  uselistorder i32 72, { 2, 0, 1 }
  uselistorder i32 64, { 15, 11, 12, 0, 8, 47, 13, 14, 16, 17, 9, 18, 19, 20, 1, 21, 22, 23, 2, 24, 25, 26, 10, 27, 28, 29, 3, 30, 31, 32, 4, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 42, 43, 44, 45, 7, 46 }
  uselistorder i32 56, { 3, 0, 1, 2, 4 }
  uselistorder i32 52, { 2, 3, 0, 1, 4, 5, 6 }
  uselistorder i32 15, { 30, 26, 25, 27, 3, 28, 4, 29, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 31, 32, 24, 33, 34, 35, 36, 1, 37, 38, 39, 40, 2, 41 }
  uselistorder i32 14, { 10, 8, 22, 0, 1, 7, 4, 9, 5, 11, 12, 6, 13, 14, 15, 16, 2, 17, 18, 19, 20, 3, 21 }
  uselistorder i32 13, { 16, 9, 8, 5, 13, 2, 10, 11, 12, 14, 15, 0, 1, 17, 18, 19, 20, 21, 6, 22, 23, 24, 25, 26, 27, 28, 29, 7, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 3, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 4, 58, 59 }
  uselistorder i32 9, { 48, 49, 50, 8, 5, 51, 9, 6, 36, 28, 11, 35, 12, 31, 13, 32, 14, 33, 15, 34, 10, 3, 37, 29, 38, 2, 30, 16, 39, 17, 40, 18, 41, 42, 19, 43, 44, 20, 21, 22, 45, 23, 46, 24, 47, 0, 25, 1, 26, 65, 52, 53, 7, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 67, 4, 64, 27 }
  uselistorder i32 (i8*, i32)* @function_12450, { 2, 0, 7, 6, 1, 3, 4, 5 }
  uselistorder i32 88, { 2, 0, 1, 3 }
  uselistorder i32 %arg2, { 2, 1, 0, 3 }
}

define i32 @function_14070() local_unnamed_addr {
dec_label_pc_14070:
  %cpsr_n.global-to-local = alloca i1, align 1
  %cpsr_v.global-to-local = alloca i1, align 1
  %cpsr_z.global-to-local = alloca i1, align 1
  %ip.global-to-local = alloca i32, align 4
  %lr.global-to-local = alloca i32, align 4
  %r0.global-to-local = alloca i32, align 4
  %r1.global-to-local = alloca i32, align 4
  %r2.global-to-local = alloca i32, align 4
  %r3.global-to-local = alloca i32, align 4
  %r4.global-to-local = alloca i32, align 4
  %r5.global-to-local = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v0_14070 = load i32, i32* @r1, align 4
  %v1_14070 = load i32, i32* @r0, align 4
  %v2_14070 = sub i32 %v0_14070, %v1_14070
  %v3_14070 = icmp ult i32 %v0_14070, %v1_14070
  %v4_14070 = xor i32 %v1_14070, %v0_14070
  %v5_14070 = xor i32 %v2_14070, %v0_14070
  %v6_14070 = and i32 %v5_14070, %v4_14070
  %v7_14070 = icmp slt i32 %v6_14070, 0
  store i1 %v7_14070, i1* %cpsr_v.global-to-local, align 1
  %v8_14070 = icmp slt i32 %v2_14070, 0
  store i1 %v8_14070, i1* %cpsr_n.global-to-local, align 1
  %v9_14070 = icmp eq i32 %v0_14070, %v1_14070
  store i1 %v9_14070, i1* %cpsr_z.global-to-local, align 1
  br i1 %v3_14070, label %dec_label_pc_142bc, label %dec_label_pc_14078

dec_label_pc_14078:                               ; preds = %dec_label_pc_14070
  br i1 %v9_14070, label %.thread122, label %bb

.thread122:                                       ; preds = %bb144, %.thread121, %bb141, %dec_label_pc_14078
  %merge = phi i32 [ %v0_14070, %dec_label_pc_14078 ], [ %v2_14350, %bb141 ], [ %v11_1436c, %bb144 ], [ %v7_1436c, %.thread121 ]
  ret i32 %merge

bb:                                               ; preds = %dec_label_pc_14078
  store i32 %v1_14070, i32* %stack_var_-8, align 4
  %v0_14080 = load i32, i32* @r2, align 4
  %v2_14080 = add i32 %v0_14080, -4
  store i32 %v2_14080, i32* %r2.global-to-local, align 4
  %v4_14080 = sub i32 3, %v0_14080
  %v5_14080 = and i32 %v4_14080, %v0_14080
  %v6_14080 = icmp slt i32 %v5_14080, 0
  store i1 %v6_14080, i1* %cpsr_v.global-to-local, align 1
  %v7_14080 = icmp slt i32 %v2_14080, 0
  store i1 %v7_14080, i1* %cpsr_n.global-to-local, align 1
  %v8_14080 = icmp eq i32 %v0_14080, 4
  store i1 %v8_14080, i1* %cpsr_z.global-to-local, align 1
  %v5_14084 = icmp slt i32 %v0_14080, 4
  br i1 %v5_14084, label %bb131, label %dec_label_pc_14088

dec_label_pc_14088:                               ; preds = %bb
  %v1_14088 = urem i32 %v1_14070, 4
  store i32 %v1_14088, i32* %ip.global-to-local, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14088 = icmp eq i32 %v1_14088, 0
  store i1 %v2_14088, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14088, label %dec_label_pc_14090, label %dec_label_pc_14134

dec_label_pc_14090:                               ; preds = %dec_label_pc_14088
  %v1_14090 = urem i32 %v0_14070, 4
  store i32 %v1_14090, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14090 = icmp eq i32 %v1_14090, 0
  store i1 %v2_14090, i1* %cpsr_z.global-to-local, align 1
  %extract.t = trunc i32 %v0_14070 to i2
  br i1 %v2_14090, label %dec_label_pc_14098, label %dec_label_pc_14164

dec_label_pc_14098:                               ; preds = %dec_label_pc_14090, %dec_label_pc_1415c
  %v0_140b092 = phi i32 [ %v1_14070, %dec_label_pc_14090 ], [ %v0_141ac75, %dec_label_pc_1415c ]
  %v0_140ac91 = phi i32 [ %v0_14070, %dec_label_pc_14090 ], [ %v0_1415c, %dec_label_pc_1415c ]
  %v0_14098 = phi i32 [ %v2_14080, %dec_label_pc_14090 ], [ %v2_14154, %dec_label_pc_1415c ]
  %v2_14098 = add i32 %v0_14098, -8
  store i32 %v2_14098, i32* %r2.global-to-local, align 4
  %v4_14098 = sub i32 7, %v0_14098
  %v5_14098 = and i32 %v4_14098, %v0_14098
  %v6_14098 = icmp slt i32 %v5_14098, 0
  store i1 %v6_14098, i1* %cpsr_v.global-to-local, align 1
  %v7_14098 = icmp slt i32 %v2_14098, 0
  store i1 %v7_14098, i1* %cpsr_n.global-to-local, align 1
  %v8_14098 = icmp eq i32 %v0_14098, 8
  store i1 %v8_14098, i1* %cpsr_z.global-to-local, align 1
  %v5_1409c = icmp slt i32 %v0_14098, 8
  br i1 %v5_1409c, label %dec_label_pc_140ec, label %dec_label_pc_140a0

dec_label_pc_140a0:                               ; preds = %dec_label_pc_14098
  %v2_140a0 = add i32 %v0_14098, -28
  store i32 %v2_140a0, i32* %r2.global-to-local, align 4
  %v4_140a0 = sub i32 27, %v0_14098
  %v5_140a0 = and i32 %v4_140a0, %v2_14098
  %v6_140a0 = icmp slt i32 %v5_140a0, 0
  store i1 %v6_140a0, i1* %cpsr_v.global-to-local, align 1
  %v7_140a0 = icmp slt i32 %v2_140a0, 0
  store i1 %v7_140a0, i1* %cpsr_n.global-to-local, align 1
  %v8_140a0 = icmp eq i32 %v2_14098, 20
  store i1 %v8_140a0, i1* %cpsr_z.global-to-local, align 1
  %v5_140a4 = icmp slt i32 %v2_14098, 20
  br i1 %v5_140a4, label %dec_label_pc_140d8, label %dec_label_pc_140a8

dec_label_pc_140a8:                               ; preds = %dec_label_pc_140a0
  %v0_140a8 = load i32, i32* @r4, align 4
  store i32 %v0_140a8, i32* %stack_var_-12, align 4
  br label %dec_label_pc_140ac

dec_label_pc_140ac:                               ; preds = %dec_label_pc_140ac.dec_label_pc_140ac_crit_edge, %dec_label_pc_140a8
  %v0_140b0 = phi i32 [ %v12_140b8, %dec_label_pc_140ac.dec_label_pc_140ac_crit_edge ], [ %v0_140b092, %dec_label_pc_140a8 ]
  %v0_140ac = phi i32 [ %v0_140ac.pre, %dec_label_pc_140ac.dec_label_pc_140ac_crit_edge ], [ %v0_140ac91, %dec_label_pc_140a8 ]
  %v1_140ac = inttoptr i32 %v0_140ac to i32*
  %v2_140ac = load i32, i32* %v1_140ac, align 4
  store i32 %v2_140ac, i32* %r3.global-to-local, align 4
  %v3_140ac = add i32 %v0_140ac, 4
  %v4_140ac = inttoptr i32 %v3_140ac to i32*
  %v5_140ac = load i32, i32* %v4_140ac, align 4
  store i32 %v5_140ac, i32* %r4.global-to-local, align 4
  %v6_140ac = add i32 %v0_140ac, 8
  %v7_140ac = inttoptr i32 %v6_140ac to i32*
  %v8_140ac = load i32, i32* %v7_140ac, align 4
  store i32 %v8_140ac, i32* %ip.global-to-local, align 4
  %v9_140ac = add i32 %v0_140ac, 12
  %v10_140ac = inttoptr i32 %v9_140ac to i32*
  %v11_140ac = load i32, i32* %v10_140ac, align 4
  store i32 %v11_140ac, i32* %lr.global-to-local, align 4
  %v12_140ac = add i32 %v0_140ac, 16
  store i32 %v12_140ac, i32* %r1.global-to-local, align 4
  %v1_140b0 = inttoptr i32 %v0_140b0 to i32*
  store i32 %v2_140ac, i32* %v1_140b0, align 4
  %v3_140b0 = add i32 %v0_140b0, 4
  %v4_140b0 = inttoptr i32 %v3_140b0 to i32*
  %v5_140b0 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_140b0, i32* %v4_140b0, align 4
  %v6_140b0 = add i32 %v0_140b0, 8
  %v7_140b0 = inttoptr i32 %v6_140b0 to i32*
  %v8_140b0 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v8_140b0, i32* %v7_140b0, align 4
  %v9_140b0 = add i32 %v0_140b0, 12
  %v10_140b0 = inttoptr i32 %v9_140b0 to i32*
  %v11_140b0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v11_140b0, i32* %v10_140b0, align 4
  %v12_140b0 = add i32 %v0_140b0, 16
  store i32 %v12_140b0, i32* %r0.global-to-local, align 4
  %v0_140b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_140b4 = inttoptr i32 %v0_140b4 to i32*
  %v2_140b4 = load i32, i32* %v1_140b4, align 4
  store i32 %v2_140b4, i32* %r3.global-to-local, align 4
  %v3_140b4 = add i32 %v0_140b4, 4
  %v4_140b4 = inttoptr i32 %v3_140b4 to i32*
  %v5_140b4 = load i32, i32* %v4_140b4, align 4
  store i32 %v5_140b4, i32* %r4.global-to-local, align 4
  %v6_140b4 = add i32 %v0_140b4, 8
  %v7_140b4 = inttoptr i32 %v6_140b4 to i32*
  %v8_140b4 = load i32, i32* %v7_140b4, align 4
  store i32 %v8_140b4, i32* @ip, align 4
  %v9_140b4 = add i32 %v0_140b4, 12
  %v10_140b4 = inttoptr i32 %v9_140b4 to i32*
  %v11_140b4 = load i32, i32* %v10_140b4, align 4
  store i32 %v11_140b4, i32* @lr, align 4
  %v12_140b4 = add i32 %v0_140b4, 16
  store i32 %v12_140b4, i32* @r1, align 4
  %v1_140b8 = inttoptr i32 %v12_140b0 to i32*
  store i32 %v2_140b4, i32* %v1_140b8, align 4
  %v3_140b8 = add i32 %v0_140b0, 20
  %v4_140b8 = inttoptr i32 %v3_140b8 to i32*
  %v5_140b8 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_140b8, i32* %v4_140b8, align 4
  %v6_140b8 = add i32 %v0_140b0, 24
  %v7_140b8 = inttoptr i32 %v6_140b8 to i32*
  %v8_140b8 = load i32, i32* @ip, align 4
  store i32 %v8_140b8, i32* %v7_140b8, align 4
  %v9_140b8 = add i32 %v0_140b0, 28
  %v10_140b8 = inttoptr i32 %v9_140b8 to i32*
  %v11_140b8 = load i32, i32* @lr, align 4
  store i32 %v11_140b8, i32* %v10_140b8, align 4
  %v12_140b8 = add i32 %v0_140b0, 32
  store i32 %v12_140b8, i32* @r0, align 4
  %v0_140bc = load i32, i32* %r2.global-to-local, align 4
  %v2_140bc = add i32 %v0_140bc, -32
  store i32 %v2_140bc, i32* %r2.global-to-local, align 4
  %v6_140c0 = icmp slt i32 %v0_140bc, 32
  br i1 %v6_140c0, label %dec_label_pc_140c4, label %dec_label_pc_140ac.dec_label_pc_140ac_crit_edge

dec_label_pc_140ac.dec_label_pc_140ac_crit_edge:  ; preds = %dec_label_pc_140ac
  %v0_140ac.pre = load i32, i32* @r1, align 4
  br label %dec_label_pc_140ac

dec_label_pc_140c4:                               ; preds = %dec_label_pc_140ac
  %v4_140c4 = add i32 %v0_140bc, -16
  %v6_140c4 = add i32 %v0_140bc, 2147483616
  %v7_140c4 = and i32 %v4_140c4, %v6_140c4
  %v8_140c4 = icmp slt i32 %v7_140c4, 0
  store i1 %v8_140c4, i1* %cpsr_v.global-to-local, align 1
  %v9_140c4 = icmp slt i32 %v4_140c4, 0
  store i1 %v9_140c4, i1* %cpsr_n.global-to-local, align 1
  %v10_140c4 = icmp eq i32 %v4_140c4, 0
  store i1 %v10_140c4, i1* %cpsr_z.global-to-local, align 1
  %v5_140c8 = icmp slt i32 %v2_140bc, -16
  br i1 %v5_140c8, label %.thread1, label %bb128

bb128:                                            ; preds = %dec_label_pc_140c4
  %v6_140c8 = load i32, i32* @r1, align 4
  %v7_140c8 = inttoptr i32 %v6_140c8 to i32*
  %v8_140c8 = load i32, i32* %v7_140c8, align 4
  store i32 %v8_140c8, i32* %r3.global-to-local, align 4
  %v9_140c8 = add i32 %v6_140c8, 4
  %v10_140c8 = inttoptr i32 %v9_140c8 to i32*
  %v11_140c8 = load i32, i32* %v10_140c8, align 4
  store i32 %v11_140c8, i32* %r4.global-to-local, align 4
  %v12_140c8 = add i32 %v6_140c8, 8
  %v13_140c8 = inttoptr i32 %v12_140c8 to i32*
  %v14_140c8 = load i32, i32* %v13_140c8, align 4
  store i32 %v14_140c8, i32* @ip, align 4
  %v15_140c8 = add i32 %v6_140c8, 12
  %v16_140c8 = inttoptr i32 %v15_140c8 to i32*
  %v17_140c8 = load i32, i32* %v16_140c8, align 4
  store i32 %v17_140c8, i32* @lr, align 4
  %v18_140c8 = add i32 %v6_140c8, 16
  store i32 %v18_140c8, i32* @r1, align 4
  %v7_140cc = inttoptr i32 %v12_140b8 to i32*
  store i32 %v8_140c8, i32* %v7_140cc, align 4
  %v9_140cc = add i32 %v0_140b0, 36
  %v10_140cc = inttoptr i32 %v9_140cc to i32*
  %v11_140cc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v11_140cc, i32* %v10_140cc, align 4
  %v12_140cc = add i32 %v0_140b0, 40
  %v13_140cc = inttoptr i32 %v12_140cc to i32*
  %v14_140cc = load i32, i32* @ip, align 4
  store i32 %v14_140cc, i32* %v13_140cc, align 4
  %v15_140cc = add i32 %v0_140b0, 44
  %v16_140cc = inttoptr i32 %v15_140cc to i32*
  %v17_140cc = load i32, i32* @lr, align 4
  store i32 %v17_140cc, i32* %v16_140cc, align 4
  %v18_140cc = add i32 %v0_140b0, 48
  store i32 %v18_140cc, i32* @r0, align 4
  %v6_140d0 = load i32, i32* %r2.global-to-local, align 4
  %v7_140d0 = add i32 %v6_140d0, -16
  store i32 %v7_140d0, i32* %r2.global-to-local, align 4
  br label %.thread1

.thread1:                                         ; preds = %dec_label_pc_140c4, %bb128
  %v3_140e0101 = phi i32 [ %v12_140b8, %dec_label_pc_140c4 ], [ %v18_140cc, %bb128 ]
  %v0_140d895 = phi i32 [ %v2_140bc, %dec_label_pc_140c4 ], [ %v7_140d0, %bb128 ]
  %v2_140d4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_140d4, i32* @r4, align 4
  br label %dec_label_pc_140d8

dec_label_pc_140d8:                               ; preds = %dec_label_pc_140a0, %.thread1
  %v3_140e0100 = phi i32 [ %v0_140b092, %dec_label_pc_140a0 ], [ %v3_140e0101, %.thread1 ]
  %v0_140d8 = phi i32 [ %v2_140a0, %dec_label_pc_140a0 ], [ %v0_140d895, %.thread1 ]
  %v1_140d8 = add i32 %v0_140d8, 20
  store i32 %v1_140d8, i32* %r2.global-to-local, align 4
  %v3_140d8 = sub i32 0, %v0_140d8
  %v4_140d8 = and i32 %v1_140d8, %v3_140d8
  %v5_140d8 = icmp slt i32 %v4_140d8, 0
  store i1 %v5_140d8, i1* %cpsr_v.global-to-local, align 1
  %v6_140d8 = icmp slt i32 %v1_140d8, 0
  store i1 %v6_140d8, i1* %cpsr_n.global-to-local, align 1
  %v7_140d8 = icmp eq i32 %v1_140d8, 0
  store i1 %v7_140d8, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_140dc

dec_label_pc_140dc:                               ; preds = %.thread117, %dec_label_pc_140d8
  %v0_140ec.pre147 = phi i32 [ %v0_140ec.pre, %.thread117 ], [ %v1_140d8, %dec_label_pc_140d8 ]
  %v3_140e0 = phi i32 [ %v3_140e098118, %.thread117 ], [ %v3_140e0100, %dec_label_pc_140d8 ]
  %v1_140e4 = phi i1 [ %v1_140e8, %.thread117 ], [ %v5_140d8, %dec_label_pc_140d8 ]
  %v0_140e4 = phi i1 [ %v0_140e8, %.thread117 ], [ %v6_140d8, %dec_label_pc_140d8 ]
  %v2_140dc = xor i1 %v1_140e4, %v0_140e4
  br i1 %v2_140dc, label %.thread117, label %bb129

bb129:                                            ; preds = %dec_label_pc_140dc
  %v3_140dc = load i32, i32* @r1, align 4
  %v4_140dc = inttoptr i32 %v3_140dc to i32*
  %v5_140dc = load i32, i32* %v4_140dc, align 4
  store i32 %v5_140dc, i32* %r3.global-to-local, align 4
  %v6_140dc = add i32 %v3_140dc, 4
  %v7_140dc = inttoptr i32 %v6_140dc to i32*
  %v8_140dc = load i32, i32* %v7_140dc, align 4
  store i32 %v8_140dc, i32* @ip, align 4
  %v9_140dc = add i32 %v3_140dc, 8
  %v10_140dc = inttoptr i32 %v9_140dc to i32*
  %v11_140dc = load i32, i32* %v10_140dc, align 4
  store i32 %v11_140dc, i32* @lr, align 4
  %v12_140dc = add i32 %v3_140dc, 12
  store i32 %v12_140dc, i32* @r1, align 4
  %v4_140e0 = inttoptr i32 %v3_140e0 to i32*
  store i32 %v5_140dc, i32* %v4_140e0, align 4
  %v6_140e0 = add i32 %v3_140e0, 4
  %v7_140e0 = inttoptr i32 %v6_140e0 to i32*
  %v8_140e0 = load i32, i32* @ip, align 4
  store i32 %v8_140e0, i32* %v7_140e0, align 4
  %v9_140e0 = add i32 %v3_140e0, 8
  %v10_140e0 = inttoptr i32 %v9_140e0 to i32*
  %v11_140e0 = load i32, i32* @lr, align 4
  store i32 %v11_140e0, i32* %v10_140e0, align 4
  %v12_140e0 = add i32 %v3_140e0, 12
  store i32 %v12_140e0, i32* @r0, align 4
  %v3_140e4 = load i32, i32* %r2.global-to-local, align 4
  %v4_140e4 = add i32 %v3_140e4, -12
  store i32 %v4_140e4, i32* %r2.global-to-local, align 4
  %v6_140e4 = sub i32 11, %v3_140e4
  %v7_140e4 = and i32 %v6_140e4, %v3_140e4
  %v8_140e4 = icmp slt i32 %v7_140e4, 0
  store i1 %v8_140e4, i1* %cpsr_v.global-to-local, align 1
  %v9_140e4 = icmp slt i32 %v4_140e4, 0
  store i1 %v9_140e4, i1* %cpsr_n.global-to-local, align 1
  %v10_140e4 = icmp eq i32 %v3_140e4, 12
  store i1 %v10_140e4, i1* %cpsr_z.global-to-local, align 1
  br label %.thread117

.thread117:                                       ; preds = %dec_label_pc_140dc, %bb129
  %v0_140ec.pre = phi i32 [ %v4_140e4, %bb129 ], [ %v0_140ec.pre147, %dec_label_pc_140dc ]
  %v3_140e098118 = phi i32 [ %v12_140e0, %bb129 ], [ %v3_140e0, %dec_label_pc_140dc ]
  %v1_140e8 = phi i1 [ %v8_140e4, %bb129 ], [ %v1_140e4, %dec_label_pc_140dc ]
  %v0_140e8 = phi i1 [ %v9_140e4, %bb129 ], [ %v0_140e4, %dec_label_pc_140dc ]
  %v2_140e8 = xor i1 %v1_140e8, %v0_140e8
  br i1 %v2_140e8, label %dec_label_pc_140ec, label %dec_label_pc_140dc

dec_label_pc_140ec:                               ; preds = %.thread117, %dec_label_pc_14098
  %v7_140fc = phi i32 [ %v0_140b092, %dec_label_pc_14098 ], [ %v3_140e098118, %.thread117 ]
  %v0_140ec = phi i32 [ %v2_14098, %dec_label_pc_14098 ], [ %v0_140ec.pre, %.thread117 ]
  %v2_140ec = add i32 %v0_140ec, 8
  store i32 %v2_140ec, i32* %r2.global-to-local, align 4
  %v4_140ec = sub i32 0, %v0_140ec
  %v5_140ec = and i32 %v2_140ec, %v4_140ec
  %v6_140ec = icmp slt i32 %v5_140ec, 0
  store i1 %v6_140ec, i1* %cpsr_v.global-to-local, align 1
  %v7_140ec = icmp slt i32 %v2_140ec, 0
  store i1 %v7_140ec, i1* %cpsr_n.global-to-local, align 1
  %v8_140ec = icmp eq i32 %v2_140ec, 0
  store i1 %v8_140ec, i1* %cpsr_z.global-to-local, align 1
  %v5_140f0 = icmp slt i32 %v0_140ec, -8
  br i1 %v5_140f0, label %bb131, label %dec_label_pc_140f4

dec_label_pc_140f4:                               ; preds = %dec_label_pc_140ec
  %v6_140f4 = add i32 %v0_140ec, 4
  store i32 %v6_140f4, i32* %r2.global-to-local, align 4
  %v8_140f4 = sub i32 -5, %v0_140ec
  %v9_140f4 = and i32 %v8_140f4, %v2_140ec
  %v10_140f4 = icmp slt i32 %v9_140f4, 0
  store i1 %v10_140f4, i1* %cpsr_v.global-to-local, align 1
  %v11_140f4 = icmp slt i32 %v6_140f4, 0
  store i1 %v11_140f4, i1* %cpsr_n.global-to-local, align 1
  %v12_140f4 = icmp eq i32 %v2_140ec, 4
  store i1 %v12_140f4, i1* %cpsr_z.global-to-local, align 1
  %v5_140f8 = icmp slt i32 %v2_140ec, 4
  %v6_140f8 = load i32, i32* @r1, align 4
  %v7_140f8 = inttoptr i32 %v6_140f8 to i32*
  %v8_140f8 = load i32, i32* %v7_140f8, align 4
  store i32 %v8_140f8, i32* %r3.global-to-local, align 4
  %v10_140f8 = add i32 %v6_140f8, 4
  br i1 %v5_140f8, label %.thread5, label %bb130

.thread5:                                         ; preds = %dec_label_pc_140f4
  store i32 %v10_140f8, i32* @r1, align 4
  %v8_140fc = inttoptr i32 %v7_140fc to i32*
  store i32 %v8_140f8, i32* %v8_140fc, align 4
  %v9_140fc = load i32, i32* @r0, align 4
  %v10_140fc = add i32 %v9_140fc, 4
  store i32 %v10_140fc, i32* @r0, align 4
  %v0_1410c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb131

bb130:                                            ; preds = %dec_label_pc_140f4
  %v10_14100 = inttoptr i32 %v10_140f8 to i32*
  %v11_14100 = load i32, i32* %v10_14100, align 4
  store i32 %v11_14100, i32* @ip, align 4
  %v12_14100 = add i32 %v6_140f8, 8
  store i32 %v12_14100, i32* @r1, align 4
  %v7_14104 = inttoptr i32 %v7_140fc to i32*
  store i32 %v8_140f8, i32* %v7_14104, align 4
  %v9_14104 = add i32 %v7_140fc, 4
  %v10_14104 = inttoptr i32 %v9_14104 to i32*
  %v11_14104 = load i32, i32* @ip, align 4
  store i32 %v11_14104, i32* %v10_14104, align 4
  %v12_14104 = add i32 %v7_140fc, 8
  store i32 %v12_14104, i32* @r0, align 4
  %v6_14108 = load i32, i32* %r2.global-to-local, align 4
  %v7_14108 = add i32 %v6_14108, -4
  store i32 %v7_14108, i32* %r2.global-to-local, align 4
  br label %bb131

bb131:                                            ; preds = %.thread5, %.thread11, %dec_label_pc_140ec, %bb, %dec_label_pc_142b4, %dec_label_pc_14248, %dec_label_pc_141dc, %bb130
  %v2_1411c = phi i32 [ %v10_140fc, %.thread5 ], [ %v0_141ac75, %.thread11 ], [ %v7_140fc, %dec_label_pc_140ec ], [ %v1_14070, %bb ], [ %v2_1411c113, %dec_label_pc_142b4 ], [ %v2_1411c112, %dec_label_pc_14248 ], [ %v2_1411c111, %dec_label_pc_141dc ], [ %v12_14104, %bb130 ]
  %v0_1410c = phi i32 [ %v0_1410c.pre, %.thread5 ], [ %v2_14154, %.thread11 ], [ %v2_140ec, %dec_label_pc_140ec ], [ %v2_14080, %bb ], [ %v0_1410c109, %dec_label_pc_142b4 ], [ %v0_1410c108, %dec_label_pc_14248 ], [ %v0_1410c107, %dec_label_pc_141dc ], [ %v7_14108, %bb130 ]
  %v1_1410c = add i32 %v0_1410c, 4
  store i32 %v1_1410c, i32* %r2.global-to-local, align 4
  %v3_1410c = sub i32 0, %v0_1410c
  %v4_1410c = and i32 %v1_1410c, %v3_1410c
  %v5_1410c = icmp slt i32 %v4_1410c, 0
  store i1 %v5_1410c, i1* %cpsr_v.global-to-local, align 1
  %v6_1410c = icmp slt i32 %v1_1410c, 0
  store i1 %v6_1410c, i1* %cpsr_n.global-to-local, align 1
  %v7_1410c = icmp eq i32 %v1_1410c, 0
  store i1 %v7_1410c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1410c, label %bb132, label %bb133

bb132:                                            ; preds = %bb131
  %v3_14110 = load i32, i32* %stack_var_-8, align 4
  store i32 %v3_14110, i32* %r0.global-to-local, align 4
  ret i32 %v3_14110

bb133:                                            ; preds = %bb131
  %v1_14114 = add i32 %v0_1410c, 2
  %v3_14114 = sub i32 -3, %v0_1410c
  %v4_14114 = and i32 %v3_14114, %v1_1410c
  %v5_14114 = icmp slt i32 %v4_14114, 0
  store i1 %v5_14114, i1* %cpsr_v.global-to-local, align 1
  %v6_14114 = icmp slt i32 %v1_14114, 0
  store i1 %v6_14114, i1* %cpsr_n.global-to-local, align 1
  %v7_14114 = icmp eq i32 %v1_1410c, 2
  store i1 %v7_14114, i1* %cpsr_z.global-to-local, align 1
  %v0_14118 = load i32, i32* @r1, align 4
  %v1_14118 = inttoptr i32 %v0_14118 to i8*
  %v2_14118 = load i8, i8* %v1_14118, align 1
  %v3_14118 = zext i8 %v2_14118 to i32
  store i32 %v3_14118, i32* %r3.global-to-local, align 4
  %v5_14118 = add i32 %v0_14118, 1
  store i32 %v5_14118, i32* %r1.global-to-local, align 4
  %v3_1411c = inttoptr i32 %v2_1411c to i8*
  store i8 %v2_14118, i8* %v3_1411c, align 1
  %v4_1411c = load i32, i32* @r0, align 4
  %v5_1411c = add i32 %v4_1411c, 1
  store i32 %v5_1411c, i32* %r0.global-to-local, align 4
  %v0_14120 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14120 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14120 = xor i1 %v0_14120, %v1_14120
  br i1 %v2_14120, label %.thread119, label %bb134

bb134:                                            ; preds = %bb133
  %v3_14120 = load i32, i32* %r1.global-to-local, align 4
  %v4_14120 = inttoptr i32 %v3_14120 to i8*
  %v5_14120 = load i8, i8* %v4_14120, align 1
  %v6_14120 = zext i8 %v5_14120 to i32
  store i32 %v6_14120, i32* %r3.global-to-local, align 4
  %v8_14120 = add i32 %v3_14120, 1
  store i32 %v8_14120, i32* %r1.global-to-local, align 4
  %v6_14124 = inttoptr i32 %v5_1411c to i8*
  store i8 %v5_14120, i8* %v6_14124, align 1
  %v7_14124 = load i32, i32* %r0.global-to-local, align 4
  %v8_14124 = add i32 %v7_14124, 1
  store i32 %v8_14124, i32* %r0.global-to-local, align 4
  %v1_14128.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14128.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread119

.thread119:                                       ; preds = %bb133, %bb134
  %v7_1412c = phi i32 [ %v8_14124, %bb134 ], [ %v5_1411c, %bb133 ]
  %v2_1412c = phi i1 [ %v2_14128.pre, %bb134 ], [ %v1_14120, %bb133 ]
  %v1_1412c = phi i1 [ %v1_14128.pre, %bb134 ], [ %v0_14120, %bb133 ]
  %v0_14128 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14128 = xor i1 %v2_1412c, %v1_1412c
  %v4_14128 = or i1 %v0_14128, %v3_14128
  br i1 %v4_14128, label %.thread120, label %bb135

bb135:                                            ; preds = %.thread119
  %v5_14128 = load i32, i32* %r1.global-to-local, align 4
  %v6_14128 = inttoptr i32 %v5_14128 to i8*
  %v7_14128 = load i8, i8* %v6_14128, align 1
  %v8_14128 = zext i8 %v7_14128 to i32
  store i32 %v8_14128, i32* %r3.global-to-local, align 4
  %v10_14128 = add i32 %v5_14128, 1
  store i32 %v10_14128, i32* %r1.global-to-local, align 4
  %v8_1412c = inttoptr i32 %v7_1412c to i8*
  store i8 %v7_14128, i8* %v8_1412c, align 1
  %v9_1412c = load i32, i32* %r0.global-to-local, align 4
  %v10_1412c = add i32 %v9_1412c, 1
  store i32 %v10_1412c, i32* %r0.global-to-local, align 4
  br label %.thread120

.thread120:                                       ; preds = %.thread119, %bb135
  %v2_14130 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14130, i32* %r0.global-to-local, align 4
  ret i32 %v2_14130

dec_label_pc_14134:                               ; preds = %dec_label_pc_14088
  %v1_14134 = sub nsw i32 4, %v1_14088
  store i32 %v1_14134, i32* @ip, align 4
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14138 = icmp ult i32 %v1_14134, 2
  store i1 %v8_14138, i1* %cpsr_n.global-to-local, align 1
  %v9_14138 = icmp eq i32 %v1_14134, 2
  store i1 %v9_14138, i1* %cpsr_z.global-to-local, align 1
  %v1_1413c = inttoptr i32 %v0_14070 to i8*
  %v2_1413c = load i8, i8* %v1_1413c, align 1
  %v3_1413c = zext i8 %v2_1413c to i32
  store i32 %v3_1413c, i32* %r3.global-to-local, align 4
  %v5_1413c = add i32 %v0_14070, 1
  store i32 %v5_1413c, i32* @r1, align 4
  %v3_14140 = inttoptr i32 %v1_14070 to i8*
  store i8 %v2_1413c, i8* %v3_14140, align 1
  %v4_14140 = load i32, i32* @r0, align 4
  %v5_14140 = add i32 %v4_14140, 1
  store i32 %v5_14140, i32* @r0, align 4
  br i1 %v8_14138, label %.thread11, label %bb136

bb136:                                            ; preds = %dec_label_pc_14134
  %v6_14144 = load i32, i32* @r1, align 4
  %v7_14144 = inttoptr i32 %v6_14144 to i8*
  %v8_14144 = load i8, i8* %v7_14144, align 1
  %v9_14144 = zext i8 %v8_14144 to i32
  store i32 %v9_14144, i32* %r3.global-to-local, align 4
  %v11_14144 = add i32 %v6_14144, 1
  store i32 %v11_14144, i32* @r1, align 4
  %v9_14148 = inttoptr i32 %v5_14140 to i8*
  store i8 %v8_14144, i8* %v9_14148, align 1
  %v10_14148 = load i32, i32* @r0, align 4
  %v11_14148 = add i32 %v10_14148, 1
  store i32 %v11_14148, i32* @r0, align 4
  br i1 %v9_14138, label %.thread11, label %bb137

bb137:                                            ; preds = %bb136
  %v8_1414c = load i32, i32* @r1, align 4
  %v9_1414c = inttoptr i32 %v8_1414c to i8*
  %v10_1414c = load i8, i8* %v9_1414c, align 1
  %v11_1414c = zext i8 %v10_1414c to i32
  store i32 %v11_1414c, i32* %r3.global-to-local, align 4
  %v13_1414c = add i32 %v8_1414c, 1
  store i32 %v13_1414c, i32* @r1, align 4
  %v11_14150 = inttoptr i32 %v11_14148 to i8*
  store i8 %v10_1414c, i8* %v11_14150, align 1
  %v12_14150 = load i32, i32* @r0, align 4
  %v13_14150 = add i32 %v12_14150, 1
  store i32 %v13_14150, i32* @r0, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb136, %dec_label_pc_14134, %bb137
  %v0_141ac75 = phi i32 [ %v11_14148, %bb136 ], [ %v5_14140, %dec_label_pc_14134 ], [ %v13_14150, %bb137 ]
  %v0_14154 = load i32, i32* %r2.global-to-local, align 4
  %v1_14154 = load i32, i32* @ip, align 4
  %v2_14154 = sub i32 %v0_14154, %v1_14154
  store i32 %v2_14154, i32* %r2.global-to-local, align 4
  %v4_14154 = xor i32 %v1_14154, %v0_14154
  %v5_14154 = xor i32 %v2_14154, %v0_14154
  %v6_14154 = and i32 %v5_14154, %v4_14154
  %v7_14154 = icmp slt i32 %v6_14154, 0
  store i1 %v7_14154, i1* %cpsr_v.global-to-local, align 1
  %v8_14154 = icmp slt i32 %v2_14154, 0
  store i1 %v8_14154, i1* %cpsr_n.global-to-local, align 1
  %v9_14154 = icmp eq i32 %v0_14154, %v1_14154
  store i1 %v9_14154, i1* %cpsr_z.global-to-local, align 1
  %v5_14158 = icmp slt i32 %v0_14154, %v1_14154
  br i1 %v5_14158, label %bb131, label %dec_label_pc_1415c

dec_label_pc_1415c:                               ; preds = %.thread11
  %v0_1415c = load i32, i32* @r1, align 4
  %v1_1415c = urem i32 %v0_1415c, 4
  store i32 %v1_1415c, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_1415c = icmp eq i32 %v1_1415c, 0
  store i1 %v2_1415c, i1* %cpsr_z.global-to-local, align 1
  %extract.t123 = trunc i32 %v0_1415c to i2
  br i1 %v2_1415c, label %dec_label_pc_14098, label %dec_label_pc_14164

dec_label_pc_14164:                               ; preds = %dec_label_pc_14090, %dec_label_pc_1415c
  %v0_141ac74 = phi i32 [ %v1_14070, %dec_label_pc_14090 ], [ %v0_141ac75, %dec_label_pc_1415c ]
  %v0_14258 = phi i32 [ %v2_14080, %dec_label_pc_14090 ], [ %v2_14154, %dec_label_pc_1415c ]
  %v0_1416c.off0 = phi i2 [ %extract.t, %dec_label_pc_14090 ], [ %extract.t123, %dec_label_pc_1415c ]
  %v0_14164 = phi i32 [ %v0_14070, %dec_label_pc_14090 ], [ %v0_1415c, %dec_label_pc_1415c ]
  %v1_14164 = and i32 %v0_14164, -4
  store i32 %v1_14164, i32* %r1.global-to-local, align 4
  %v1_14168 = inttoptr i32 %v1_14164 to i32*
  %v2_14168 = load i32, i32* %v1_14168, align 4
  store i32 %v2_14168, i32* @lr, align 4
  %v4_14168 = add i32 %v1_14164, 4
  store i32 %v4_14168, i32* %r1.global-to-local, align 4
  %v2_14250 = add i32 %v0_14258, -12
  %v4_14250 = sub i32 11, %v0_14258
  %v5_14250 = and i32 %v4_14250, %v0_14258
  %v6_14250 = icmp slt i32 %v5_14250, 0
  store i1 %v6_14250, i1* %cpsr_v.global-to-local, align 1
  %v7_14250 = icmp slt i32 %v2_14250, 0
  store i1 %v7_14250, i1* %cpsr_n.global-to-local, align 1
  %v8_14250 = icmp eq i32 %v0_14258, 12
  store i1 %v8_14250, i1* %cpsr_z.global-to-local, align 1
  %v5_14254 = icmp slt i32 %v0_14258, 12
  switch i2 %v0_1416c.off0, label %dec_label_pc_14178 [
    i2 -1, label %dec_label_pc_14250
    i2 -2, label %dec_label_pc_141e4
  ]

dec_label_pc_14178:                               ; preds = %dec_label_pc_14164
  br i1 %v5_14254, label %dec_label_pc_141c4, label %dec_label_pc_14180

dec_label_pc_14180:                               ; preds = %dec_label_pc_14178
  store i32 %v2_14250, i32* %r2.global-to-local, align 4
  %v3_14184 = load i32, i32* @r4, align 4
  store i32 %v3_14184, i32* %stack_var_-16, align 4
  %v6_14184 = load i32, i32* @r5, align 4
  store i32 %v6_14184, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14188

dec_label_pc_14188:                               ; preds = %dec_label_pc_14188.dec_label_pc_14188_crit_edge, %dec_label_pc_14180
  %v0_141ac = phi i32 [ %v12_141ac, %dec_label_pc_14188.dec_label_pc_14188_crit_edge ], [ %v0_141ac74, %dec_label_pc_14180 ]
  %v0_1418c = phi i32 [ %v0_1418c.pre, %dec_label_pc_14188.dec_label_pc_14188_crit_edge ], [ %v4_14168, %dec_label_pc_14180 ]
  %v0_14188 = phi i32 [ %v0_14188.pre, %dec_label_pc_14188.dec_label_pc_14188_crit_edge ], [ %v2_14168, %dec_label_pc_14180 ]
  %v3_14188 = udiv i32 %v0_14188, 256
  store i32 %v3_14188, i32* %r3.global-to-local, align 4
  %v1_1418c = inttoptr i32 %v0_1418c to i32*
  %v2_1418c = load i32, i32* %v1_1418c, align 4
  store i32 %v2_1418c, i32* %r4.global-to-local, align 4
  %v3_1418c = add i32 %v0_1418c, 4
  %v4_1418c = inttoptr i32 %v3_1418c to i32*
  %v5_1418c = load i32, i32* %v4_1418c, align 4
  store i32 %v5_1418c, i32* %r5.global-to-local, align 4
  %v6_1418c = add i32 %v0_1418c, 8
  %v7_1418c = inttoptr i32 %v6_1418c to i32*
  %v8_1418c = load i32, i32* %v7_1418c, align 4
  store i32 %v8_1418c, i32* %ip.global-to-local, align 4
  %v9_1418c = add i32 %v0_1418c, 12
  %v10_1418c = inttoptr i32 %v9_1418c to i32*
  %v11_1418c = load i32, i32* %v10_1418c, align 4
  store i32 %v11_1418c, i32* @lr, align 4
  %v12_1418c = add i32 %v0_1418c, 16
  store i32 %v12_1418c, i32* %r1.global-to-local, align 4
  %v4_14190 = mul i32 %v2_1418c, 16777216
  %v5_14190 = or i32 %v4_14190, %v3_14188
  store i32 %v5_14190, i32* %r3.global-to-local, align 4
  %v3_14194 = udiv i32 %v2_1418c, 256
  %v4_14198 = mul i32 %v5_1418c, 16777216
  %v5_14198 = or i32 %v4_14198, %v3_14194
  store i32 %v5_14198, i32* %r4.global-to-local, align 4
  %v3_1419c = udiv i32 %v5_1418c, 256
  %v4_141a0 = mul i32 %v8_1418c, 16777216
  %v5_141a0 = or i32 %v4_141a0, %v3_1419c
  store i32 %v5_141a0, i32* %r5.global-to-local, align 4
  %v3_141a4 = udiv i32 %v8_1418c, 256
  %v4_141a8 = mul i32 %v11_1418c, 16777216
  %v5_141a8 = or i32 %v4_141a8, %v3_141a4
  store i32 %v5_141a8, i32* @ip, align 4
  %v1_141ac = inttoptr i32 %v0_141ac to i32*
  store i32 %v5_14190, i32* %v1_141ac, align 4
  %v3_141ac = add i32 %v0_141ac, 4
  %v4_141ac = inttoptr i32 %v3_141ac to i32*
  %v5_141ac = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_141ac, i32* %v4_141ac, align 4
  %v6_141ac = add i32 %v0_141ac, 8
  %v7_141ac = inttoptr i32 %v6_141ac to i32*
  %v8_141ac = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_141ac, i32* %v7_141ac, align 4
  %v9_141ac = add i32 %v0_141ac, 12
  %v10_141ac = inttoptr i32 %v9_141ac to i32*
  %v11_141ac = load i32, i32* @ip, align 4
  store i32 %v11_141ac, i32* %v10_141ac, align 4
  %v12_141ac = add i32 %v0_141ac, 16
  store i32 %v12_141ac, i32* @r0, align 4
  %v0_141b0 = load i32, i32* %r2.global-to-local, align 4
  %v2_141b0 = add i32 %v0_141b0, -16
  store i32 %v2_141b0, i32* %r2.global-to-local, align 4
  %v6_141b4 = icmp slt i32 %v0_141b0, 16
  br i1 %v6_141b4, label %dec_label_pc_141b8, label %dec_label_pc_14188.dec_label_pc_14188_crit_edge

dec_label_pc_14188.dec_label_pc_14188_crit_edge:  ; preds = %dec_label_pc_14188
  %v0_14188.pre = load i32, i32* @lr, align 4
  %v0_1418c.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14188

dec_label_pc_141b8:                               ; preds = %dec_label_pc_14188
  %v2_141b8 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_141b8, i32* @r4, align 4
  %v5_141b8 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_141b8, i32* @r5, align 4
  %v2_141bc = add i32 %v0_141b0, -4
  store i32 %v2_141bc, i32* %r2.global-to-local, align 4
  %v4_141bc = add i32 %v0_141b0, 2147483632
  %v5_141bc = and i32 %v2_141bc, %v4_141bc
  %v6_141bc = icmp slt i32 %v5_141bc, 0
  store i1 %v6_141bc, i1* %cpsr_v.global-to-local, align 1
  %v7_141bc = icmp slt i32 %v2_141bc, 0
  store i1 %v7_141bc, i1* %cpsr_n.global-to-local, align 1
  %v8_141bc = icmp eq i32 %v2_141bc, 0
  store i1 %v8_141bc, i1* %cpsr_z.global-to-local, align 1
  %v5_141c0 = icmp slt i32 %v2_141b0, -12
  br i1 %v5_141c0, label %dec_label_pc_141dc, label %dec_label_pc_141c4

dec_label_pc_141c4:                               ; preds = %dec_label_pc_141b8, %dec_label_pc_14178, %dec_label_pc_141c4
  %v1_141d0 = phi i32 [ %v4_141d0, %dec_label_pc_141c4 ], [ %v12_141ac, %dec_label_pc_141b8 ], [ %v0_141ac74, %dec_label_pc_14178 ]
  %v0_141c4 = load i32, i32* @lr, align 4
  %v3_141c4 = udiv i32 %v0_141c4, 256
  store i32 %v3_141c4, i32* %ip.global-to-local, align 4
  %v0_141c8 = load i32, i32* %r1.global-to-local, align 4
  %v1_141c8 = inttoptr i32 %v0_141c8 to i32*
  %v2_141c8 = load i32, i32* %v1_141c8, align 4
  store i32 %v2_141c8, i32* @lr, align 4
  %v4_141c8 = add i32 %v0_141c8, 4
  store i32 %v4_141c8, i32* %r1.global-to-local, align 4
  %v4_141cc = mul i32 %v2_141c8, 16777216
  %v5_141cc = or i32 %v4_141cc, %v3_141c4
  store i32 %v5_141cc, i32* @ip, align 4
  %v2_141d0 = inttoptr i32 %v1_141d0 to i32*
  store i32 %v5_141cc, i32* %v2_141d0, align 4
  %v3_141d0 = load i32, i32* @r0, align 4
  %v4_141d0 = add i32 %v3_141d0, 4
  store i32 %v4_141d0, i32* @r0, align 4
  %v0_141d4 = load i32, i32* %r2.global-to-local, align 4
  %v2_141d4 = add i32 %v0_141d4, -4
  store i32 %v2_141d4, i32* %r2.global-to-local, align 4
  %v6_141d8 = icmp slt i32 %v0_141d4, 4
  br i1 %v6_141d8, label %dec_label_pc_141dc.loopexit, label %dec_label_pc_141c4

dec_label_pc_141dc.loopexit:                      ; preds = %dec_label_pc_141c4
  %v4_141d4 = sub i32 3, %v0_141d4
  %v5_141d4 = and i32 %v4_141d4, %v0_141d4
  %v6_141d4 = icmp slt i32 %v5_141d4, 0
  %v7_141d4 = icmp slt i32 %v2_141d4, 0
  store i1 %v6_141d4, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_141d4, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_141dc

dec_label_pc_141dc:                               ; preds = %dec_label_pc_141dc.loopexit, %dec_label_pc_141b8
  %v2_1411c111 = phi i32 [ %v4_141d0, %dec_label_pc_141dc.loopexit ], [ %v12_141ac, %dec_label_pc_141b8 ]
  %v0_1410c107 = phi i32 [ %v2_141d4, %dec_label_pc_141dc.loopexit ], [ %v2_141bc, %dec_label_pc_141b8 ]
  %v0_141dc = load i32, i32* %r1.global-to-local, align 4
  %v1_141dc = add i32 %v0_141dc, -3
  store i32 %v1_141dc, i32* @r1, align 4
  br label %bb131

dec_label_pc_141e4:                               ; preds = %dec_label_pc_14164
  br i1 %v5_14254, label %dec_label_pc_14230, label %dec_label_pc_141ec

dec_label_pc_141ec:                               ; preds = %dec_label_pc_141e4
  store i32 %v2_14250, i32* %r2.global-to-local, align 4
  %v3_141f0 = load i32, i32* @r4, align 4
  store i32 %v3_141f0, i32* %stack_var_-16, align 4
  %v6_141f0 = load i32, i32* @r5, align 4
  store i32 %v6_141f0, i32* %stack_var_-12, align 4
  br label %dec_label_pc_141f4

dec_label_pc_141f4:                               ; preds = %dec_label_pc_141f4.dec_label_pc_141f4_crit_edge, %dec_label_pc_141ec
  %v0_14218 = phi i32 [ %v12_14218, %dec_label_pc_141f4.dec_label_pc_141f4_crit_edge ], [ %v0_141ac74, %dec_label_pc_141ec ]
  %v0_141f8 = phi i32 [ %v0_141f8.pre, %dec_label_pc_141f4.dec_label_pc_141f4_crit_edge ], [ %v4_14168, %dec_label_pc_141ec ]
  %v0_141f4 = phi i32 [ %v0_141f4.pre, %dec_label_pc_141f4.dec_label_pc_141f4_crit_edge ], [ %v2_14168, %dec_label_pc_141ec ]
  %v3_141f4 = udiv i32 %v0_141f4, 65536
  store i32 %v3_141f4, i32* %r3.global-to-local, align 4
  %v1_141f8 = inttoptr i32 %v0_141f8 to i32*
  %v2_141f8 = load i32, i32* %v1_141f8, align 4
  store i32 %v2_141f8, i32* %r4.global-to-local, align 4
  %v3_141f8 = add i32 %v0_141f8, 4
  %v4_141f8 = inttoptr i32 %v3_141f8 to i32*
  %v5_141f8 = load i32, i32* %v4_141f8, align 4
  store i32 %v5_141f8, i32* %r5.global-to-local, align 4
  %v6_141f8 = add i32 %v0_141f8, 8
  %v7_141f8 = inttoptr i32 %v6_141f8 to i32*
  %v8_141f8 = load i32, i32* %v7_141f8, align 4
  store i32 %v8_141f8, i32* %ip.global-to-local, align 4
  %v9_141f8 = add i32 %v0_141f8, 12
  %v10_141f8 = inttoptr i32 %v9_141f8 to i32*
  %v11_141f8 = load i32, i32* %v10_141f8, align 4
  store i32 %v11_141f8, i32* @lr, align 4
  %v12_141f8 = add i32 %v0_141f8, 16
  store i32 %v12_141f8, i32* %r1.global-to-local, align 4
  %v4_141fc = mul i32 %v2_141f8, 65536
  %v5_141fc = or i32 %v4_141fc, %v3_141f4
  store i32 %v5_141fc, i32* %r3.global-to-local, align 4
  %v3_14200 = udiv i32 %v2_141f8, 65536
  %v4_14204 = mul i32 %v5_141f8, 65536
  %v5_14204 = or i32 %v4_14204, %v3_14200
  store i32 %v5_14204, i32* %r4.global-to-local, align 4
  %v3_14208 = udiv i32 %v5_141f8, 65536
  %v4_1420c = mul i32 %v8_141f8, 65536
  %v5_1420c = or i32 %v4_1420c, %v3_14208
  store i32 %v5_1420c, i32* %r5.global-to-local, align 4
  %v3_14210 = udiv i32 %v8_141f8, 65536
  %v4_14214 = mul i32 %v11_141f8, 65536
  %v5_14214 = or i32 %v4_14214, %v3_14210
  store i32 %v5_14214, i32* @ip, align 4
  %v1_14218 = inttoptr i32 %v0_14218 to i32*
  store i32 %v5_141fc, i32* %v1_14218, align 4
  %v3_14218 = add i32 %v0_14218, 4
  %v4_14218 = inttoptr i32 %v3_14218 to i32*
  %v5_14218 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14218, i32* %v4_14218, align 4
  %v6_14218 = add i32 %v0_14218, 8
  %v7_14218 = inttoptr i32 %v6_14218 to i32*
  %v8_14218 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14218, i32* %v7_14218, align 4
  %v9_14218 = add i32 %v0_14218, 12
  %v10_14218 = inttoptr i32 %v9_14218 to i32*
  %v11_14218 = load i32, i32* @ip, align 4
  store i32 %v11_14218, i32* %v10_14218, align 4
  %v12_14218 = add i32 %v0_14218, 16
  store i32 %v12_14218, i32* @r0, align 4
  %v0_1421c = load i32, i32* %r2.global-to-local, align 4
  %v2_1421c = add i32 %v0_1421c, -16
  store i32 %v2_1421c, i32* %r2.global-to-local, align 4
  %v6_14220 = icmp slt i32 %v0_1421c, 16
  br i1 %v6_14220, label %dec_label_pc_14224, label %dec_label_pc_141f4.dec_label_pc_141f4_crit_edge

dec_label_pc_141f4.dec_label_pc_141f4_crit_edge:  ; preds = %dec_label_pc_141f4
  %v0_141f4.pre = load i32, i32* @lr, align 4
  %v0_141f8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_141f4

dec_label_pc_14224:                               ; preds = %dec_label_pc_141f4
  %v2_14224 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14224, i32* @r4, align 4
  %v5_14224 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14224, i32* @r5, align 4
  %v2_14228 = add i32 %v0_1421c, -4
  store i32 %v2_14228, i32* %r2.global-to-local, align 4
  %v4_14228 = add i32 %v0_1421c, 2147483632
  %v5_14228 = and i32 %v2_14228, %v4_14228
  %v6_14228 = icmp slt i32 %v5_14228, 0
  store i1 %v6_14228, i1* %cpsr_v.global-to-local, align 1
  %v7_14228 = icmp slt i32 %v2_14228, 0
  store i1 %v7_14228, i1* %cpsr_n.global-to-local, align 1
  %v8_14228 = icmp eq i32 %v2_14228, 0
  store i1 %v8_14228, i1* %cpsr_z.global-to-local, align 1
  %v5_1422c = icmp slt i32 %v2_1421c, -12
  br i1 %v5_1422c, label %dec_label_pc_14248, label %dec_label_pc_14230

dec_label_pc_14230:                               ; preds = %dec_label_pc_14224, %dec_label_pc_141e4, %dec_label_pc_14230
  %v1_1423c = phi i32 [ %v4_1423c, %dec_label_pc_14230 ], [ %v12_14218, %dec_label_pc_14224 ], [ %v0_141ac74, %dec_label_pc_141e4 ]
  %v0_14230 = load i32, i32* @lr, align 4
  %v3_14230 = udiv i32 %v0_14230, 65536
  store i32 %v3_14230, i32* %ip.global-to-local, align 4
  %v0_14234 = load i32, i32* %r1.global-to-local, align 4
  %v1_14234 = inttoptr i32 %v0_14234 to i32*
  %v2_14234 = load i32, i32* %v1_14234, align 4
  store i32 %v2_14234, i32* @lr, align 4
  %v4_14234 = add i32 %v0_14234, 4
  store i32 %v4_14234, i32* %r1.global-to-local, align 4
  %v4_14238 = mul i32 %v2_14234, 65536
  %v5_14238 = or i32 %v4_14238, %v3_14230
  store i32 %v5_14238, i32* @ip, align 4
  %v2_1423c = inttoptr i32 %v1_1423c to i32*
  store i32 %v5_14238, i32* %v2_1423c, align 4
  %v3_1423c = load i32, i32* @r0, align 4
  %v4_1423c = add i32 %v3_1423c, 4
  store i32 %v4_1423c, i32* @r0, align 4
  %v0_14240 = load i32, i32* %r2.global-to-local, align 4
  %v2_14240 = add i32 %v0_14240, -4
  store i32 %v2_14240, i32* %r2.global-to-local, align 4
  %v6_14244 = icmp slt i32 %v0_14240, 4
  br i1 %v6_14244, label %dec_label_pc_14248.loopexit, label %dec_label_pc_14230

dec_label_pc_14248.loopexit:                      ; preds = %dec_label_pc_14230
  %v4_14240 = sub i32 3, %v0_14240
  %v5_14240 = and i32 %v4_14240, %v0_14240
  %v6_14240 = icmp slt i32 %v5_14240, 0
  %v7_14240 = icmp slt i32 %v2_14240, 0
  store i1 %v6_14240, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14240, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14248

dec_label_pc_14248:                               ; preds = %dec_label_pc_14248.loopexit, %dec_label_pc_14224
  %v2_1411c112 = phi i32 [ %v4_1423c, %dec_label_pc_14248.loopexit ], [ %v12_14218, %dec_label_pc_14224 ]
  %v0_1410c108 = phi i32 [ %v2_14240, %dec_label_pc_14248.loopexit ], [ %v2_14228, %dec_label_pc_14224 ]
  %v0_14248 = load i32, i32* %r1.global-to-local, align 4
  %v1_14248 = add i32 %v0_14248, -2
  store i32 %v1_14248, i32* @r1, align 4
  br label %bb131

dec_label_pc_14250:                               ; preds = %dec_label_pc_14164
  br i1 %v5_14254, label %dec_label_pc_1429c, label %dec_label_pc_14258

dec_label_pc_14258:                               ; preds = %dec_label_pc_14250
  store i32 %v2_14250, i32* %r2.global-to-local, align 4
  %v3_1425c = load i32, i32* @r4, align 4
  store i32 %v3_1425c, i32* %stack_var_-16, align 4
  %v6_1425c = load i32, i32* @r5, align 4
  store i32 %v6_1425c, i32* %stack_var_-12, align 4
  br label %dec_label_pc_14260

dec_label_pc_14260:                               ; preds = %dec_label_pc_14260.dec_label_pc_14260_crit_edge, %dec_label_pc_14258
  %v0_14284 = phi i32 [ %v12_14284, %dec_label_pc_14260.dec_label_pc_14260_crit_edge ], [ %v0_141ac74, %dec_label_pc_14258 ]
  %v0_14264 = phi i32 [ %v0_14264.pre, %dec_label_pc_14260.dec_label_pc_14260_crit_edge ], [ %v4_14168, %dec_label_pc_14258 ]
  %v0_14260 = phi i32 [ %v0_14260.pre, %dec_label_pc_14260.dec_label_pc_14260_crit_edge ], [ %v2_14168, %dec_label_pc_14258 ]
  %v3_14260 = udiv i32 %v0_14260, 16777216
  store i32 %v3_14260, i32* %r3.global-to-local, align 4
  %v1_14264 = inttoptr i32 %v0_14264 to i32*
  %v2_14264 = load i32, i32* %v1_14264, align 4
  store i32 %v2_14264, i32* %r4.global-to-local, align 4
  %v3_14264 = add i32 %v0_14264, 4
  %v4_14264 = inttoptr i32 %v3_14264 to i32*
  %v5_14264 = load i32, i32* %v4_14264, align 4
  store i32 %v5_14264, i32* %r5.global-to-local, align 4
  %v6_14264 = add i32 %v0_14264, 8
  %v7_14264 = inttoptr i32 %v6_14264 to i32*
  %v8_14264 = load i32, i32* %v7_14264, align 4
  store i32 %v8_14264, i32* %ip.global-to-local, align 4
  %v9_14264 = add i32 %v0_14264, 12
  %v10_14264 = inttoptr i32 %v9_14264 to i32*
  %v11_14264 = load i32, i32* %v10_14264, align 4
  store i32 %v11_14264, i32* @lr, align 4
  %v12_14264 = add i32 %v0_14264, 16
  store i32 %v12_14264, i32* %r1.global-to-local, align 4
  %v4_14268 = mul i32 %v2_14264, 256
  %v5_14268 = or i32 %v4_14268, %v3_14260
  store i32 %v5_14268, i32* %r3.global-to-local, align 4
  %v3_1426c = udiv i32 %v2_14264, 16777216
  %v4_14270 = mul i32 %v5_14264, 256
  %v5_14270 = or i32 %v4_14270, %v3_1426c
  store i32 %v5_14270, i32* %r4.global-to-local, align 4
  %v3_14274 = udiv i32 %v5_14264, 16777216
  %v4_14278 = mul i32 %v8_14264, 256
  %v5_14278 = or i32 %v4_14278, %v3_14274
  store i32 %v5_14278, i32* %r5.global-to-local, align 4
  %v3_1427c = udiv i32 %v8_14264, 16777216
  %v4_14280 = mul i32 %v11_14264, 256
  %v5_14280 = or i32 %v4_14280, %v3_1427c
  store i32 %v5_14280, i32* @ip, align 4
  %v1_14284 = inttoptr i32 %v0_14284 to i32*
  store i32 %v5_14268, i32* %v1_14284, align 4
  %v3_14284 = add i32 %v0_14284, 4
  %v4_14284 = inttoptr i32 %v3_14284 to i32*
  %v5_14284 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v5_14284, i32* %v4_14284, align 4
  %v6_14284 = add i32 %v0_14284, 8
  %v7_14284 = inttoptr i32 %v6_14284 to i32*
  %v8_14284 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v8_14284, i32* %v7_14284, align 4
  %v9_14284 = add i32 %v0_14284, 12
  %v10_14284 = inttoptr i32 %v9_14284 to i32*
  %v11_14284 = load i32, i32* @ip, align 4
  store i32 %v11_14284, i32* %v10_14284, align 4
  %v12_14284 = add i32 %v0_14284, 16
  store i32 %v12_14284, i32* @r0, align 4
  %v0_14288 = load i32, i32* %r2.global-to-local, align 4
  %v2_14288 = add i32 %v0_14288, -16
  store i32 %v2_14288, i32* %r2.global-to-local, align 4
  %v6_1428c = icmp slt i32 %v0_14288, 16
  br i1 %v6_1428c, label %dec_label_pc_14290, label %dec_label_pc_14260.dec_label_pc_14260_crit_edge

dec_label_pc_14260.dec_label_pc_14260_crit_edge:  ; preds = %dec_label_pc_14260
  %v0_14260.pre = load i32, i32* @lr, align 4
  %v0_14264.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14260

dec_label_pc_14290:                               ; preds = %dec_label_pc_14260
  %v2_14290 = load i32, i32* %stack_var_-16, align 4
  store i32 %v2_14290, i32* @r4, align 4
  %v5_14290 = load i32, i32* %stack_var_-12, align 4
  store i32 %v5_14290, i32* @r5, align 4
  %v2_14294 = add i32 %v0_14288, -4
  store i32 %v2_14294, i32* %r2.global-to-local, align 4
  %v4_14294 = add i32 %v0_14288, 2147483632
  %v5_14294 = and i32 %v2_14294, %v4_14294
  %v6_14294 = icmp slt i32 %v5_14294, 0
  store i1 %v6_14294, i1* %cpsr_v.global-to-local, align 1
  %v7_14294 = icmp slt i32 %v2_14294, 0
  store i1 %v7_14294, i1* %cpsr_n.global-to-local, align 1
  %v8_14294 = icmp eq i32 %v2_14294, 0
  store i1 %v8_14294, i1* %cpsr_z.global-to-local, align 1
  %v5_14298 = icmp slt i32 %v2_14288, -12
  br i1 %v5_14298, label %dec_label_pc_142b4, label %dec_label_pc_1429c

dec_label_pc_1429c:                               ; preds = %dec_label_pc_14290, %dec_label_pc_14250, %dec_label_pc_1429c
  %v1_142a8 = phi i32 [ %v4_142a8, %dec_label_pc_1429c ], [ %v12_14284, %dec_label_pc_14290 ], [ %v0_141ac74, %dec_label_pc_14250 ]
  %v0_1429c = load i32, i32* @lr, align 4
  %v3_1429c = udiv i32 %v0_1429c, 16777216
  store i32 %v3_1429c, i32* %ip.global-to-local, align 4
  %v0_142a0 = load i32, i32* %r1.global-to-local, align 4
  %v1_142a0 = inttoptr i32 %v0_142a0 to i32*
  %v2_142a0 = load i32, i32* %v1_142a0, align 4
  store i32 %v2_142a0, i32* @lr, align 4
  %v4_142a0 = add i32 %v0_142a0, 4
  store i32 %v4_142a0, i32* %r1.global-to-local, align 4
  %v4_142a4 = mul i32 %v2_142a0, 256
  %v5_142a4 = or i32 %v4_142a4, %v3_1429c
  store i32 %v5_142a4, i32* @ip, align 4
  %v2_142a8 = inttoptr i32 %v1_142a8 to i32*
  store i32 %v5_142a4, i32* %v2_142a8, align 4
  %v3_142a8 = load i32, i32* @r0, align 4
  %v4_142a8 = add i32 %v3_142a8, 4
  store i32 %v4_142a8, i32* @r0, align 4
  %v0_142ac = load i32, i32* %r2.global-to-local, align 4
  %v2_142ac = add i32 %v0_142ac, -4
  store i32 %v2_142ac, i32* %r2.global-to-local, align 4
  %v6_142b0 = icmp slt i32 %v0_142ac, 4
  br i1 %v6_142b0, label %dec_label_pc_142b4.loopexit, label %dec_label_pc_1429c

dec_label_pc_142b4.loopexit:                      ; preds = %dec_label_pc_1429c
  %v4_142ac = sub i32 3, %v0_142ac
  %v5_142ac = and i32 %v4_142ac, %v0_142ac
  %v6_142ac = icmp slt i32 %v5_142ac, 0
  %v7_142ac = icmp slt i32 %v2_142ac, 0
  store i1 %v6_142ac, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_142ac, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_142b4

dec_label_pc_142b4:                               ; preds = %dec_label_pc_142b4.loopexit, %dec_label_pc_14290
  %v2_1411c113 = phi i32 [ %v4_142a8, %dec_label_pc_142b4.loopexit ], [ %v12_14284, %dec_label_pc_14290 ]
  %v0_1410c109 = phi i32 [ %v2_142ac, %dec_label_pc_142b4.loopexit ], [ %v2_14294, %dec_label_pc_14290 ]
  %v0_142b4 = load i32, i32* %r1.global-to-local, align 4
  %v1_142b4 = add i32 %v0_142b4, -1
  store i32 %v1_142b4, i32* @r1, align 4
  br label %bb131

dec_label_pc_142bc:                               ; preds = %dec_label_pc_14070
  %v1_142bc = load i32, i32* @r2, align 4
  %v2_142bc = add i32 %v1_142bc, %v0_14070
  store i32 %v2_142bc, i32* %r1.global-to-local, align 4
  %v2_142c0 = add i32 %v1_142bc, %v1_14070
  store i32 %v2_142c0, i32* %r0.global-to-local, align 4
  %v2_142c4 = add i32 %v1_142bc, -4
  store i32 %v2_142c4, i32* %r2.global-to-local, align 4
  %v4_142c4 = sub i32 3, %v1_142bc
  %v5_142c4 = and i32 %v4_142c4, %v1_142bc
  %v6_142c4 = icmp slt i32 %v5_142c4, 0
  store i1 %v6_142c4, i1* %cpsr_v.global-to-local, align 1
  %v7_142c4 = icmp slt i32 %v2_142c4, 0
  store i1 %v7_142c4, i1* %cpsr_n.global-to-local, align 1
  %v8_142c4 = icmp eq i32 %v1_142bc, 4
  store i1 %v8_142c4, i1* %cpsr_z.global-to-local, align 1
  %v5_142c8 = icmp slt i32 %v1_142bc, 4
  br i1 %v5_142c8, label %bb141, label %dec_label_pc_142cc

dec_label_pc_142cc:                               ; preds = %dec_label_pc_142bc
  %v1_142cc = urem i32 %v2_142c0, 4
  store i32 %v1_142cc, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_142cc = icmp eq i32 %v1_142cc, 0
  store i1 %v2_142cc, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142cc, label %dec_label_pc_142d4, label %dec_label_pc_14374

dec_label_pc_142d4:                               ; preds = %dec_label_pc_142cc
  %v1_142d4 = urem i32 %v2_142bc, 4
  store i32 %v1_142d4, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_142d4 = icmp eq i32 %v1_142d4, 0
  store i1 %v2_142d4, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_142d4, label %dec_label_pc_142dc, label %dec_label_pc_143a0

dec_label_pc_142dc:                               ; preds = %dec_label_pc_142d4, %dec_label_pc_14398
  %v0_142f448 = phi i32 [ %v2_142c0, %dec_label_pc_142d4 ], [ %v0_143e831, %dec_label_pc_14398 ]
  %v0_142f047 = phi i32 [ %v2_142bc, %dec_label_pc_142d4 ], [ %v0_14398, %dec_label_pc_14398 ]
  %v0_142dc = phi i32 [ %v2_142c4, %dec_label_pc_142d4 ], [ %v2_14390, %dec_label_pc_14398 ]
  %v2_142dc = add i32 %v0_142dc, -8
  store i32 %v2_142dc, i32* %r2.global-to-local, align 4
  %v4_142dc = sub i32 7, %v0_142dc
  %v5_142dc = and i32 %v4_142dc, %v0_142dc
  %v6_142dc = icmp slt i32 %v5_142dc, 0
  store i1 %v6_142dc, i1* %cpsr_v.global-to-local, align 1
  %v7_142dc = icmp slt i32 %v2_142dc, 0
  store i1 %v7_142dc, i1* %cpsr_n.global-to-local, align 1
  %v8_142dc = icmp eq i32 %v0_142dc, 8
  store i1 %v8_142dc, i1* %cpsr_z.global-to-local, align 1
  %v5_142e0 = icmp slt i32 %v0_142dc, 8
  br i1 %v5_142e0, label %dec_label_pc_1432c, label %dec_label_pc_142e4

dec_label_pc_142e4:                               ; preds = %dec_label_pc_142dc
  %v3_142e4 = load i32, i32* @r4, align 4
  store i32 %v3_142e4, i32* %stack_var_-8, align 4
  %v6_142e4 = load i32, i32* @lr, align 4
  %v2_142e8 = add i32 %v0_142dc, -28
  store i32 %v2_142e8, i32* %r2.global-to-local, align 4
  %v4_142e8 = sub i32 27, %v0_142dc
  %v5_142e8 = and i32 %v4_142e8, %v2_142dc
  %v6_142e8 = icmp slt i32 %v5_142e8, 0
  store i1 %v6_142e8, i1* %cpsr_v.global-to-local, align 1
  %v7_142e8 = icmp slt i32 %v2_142e8, 0
  store i1 %v7_142e8, i1* %cpsr_n.global-to-local, align 1
  %v8_142e8 = icmp eq i32 %v2_142dc, 20
  store i1 %v8_142e8, i1* %cpsr_z.global-to-local, align 1
  %v5_142ec = icmp slt i32 %v2_142dc, 20
  br i1 %v5_142ec, label %dec_label_pc_14308, label %dec_label_pc_142f0

dec_label_pc_142f0:                               ; preds = %dec_label_pc_142e4, %dec_label_pc_142f0.dec_label_pc_142f0_crit_edge
  %v0_142f4 = phi i32 [ %v1_142fc, %dec_label_pc_142f0.dec_label_pc_142f0_crit_edge ], [ %v0_142f448, %dec_label_pc_142e4 ]
  %v0_142f0 = phi i32 [ %v0_142f0.pre, %dec_label_pc_142f0.dec_label_pc_142f0_crit_edge ], [ %v0_142f047, %dec_label_pc_142e4 ]
  %v1_142f0 = add i32 %v0_142f0, -4
  %v2_142f0 = inttoptr i32 %v1_142f0 to i32*
  %v3_142f0 = load i32, i32* %v2_142f0, align 4
  store i32 %v3_142f0, i32* %r3.global-to-local, align 4
  %v4_142f0 = add i32 %v0_142f0, -8
  %v5_142f0 = inttoptr i32 %v4_142f0 to i32*
  %v6_142f0 = load i32, i32* %v5_142f0, align 4
  store i32 %v6_142f0, i32* %r4.global-to-local, align 4
  %v7_142f0 = add i32 %v0_142f0, -12
  %v8_142f0 = inttoptr i32 %v7_142f0 to i32*
  %v9_142f0 = load i32, i32* %v8_142f0, align 4
  store i32 %v9_142f0, i32* %ip.global-to-local, align 4
  %v10_142f0 = add i32 %v0_142f0, -16
  %v11_142f0 = inttoptr i32 %v10_142f0 to i32*
  %v12_142f0 = load i32, i32* %v11_142f0, align 4
  store i32 %v12_142f0, i32* %lr.global-to-local, align 4
  store i32 %v10_142f0, i32* %r1.global-to-local, align 4
  %v1_142f4 = add i32 %v0_142f4, -16
  %v2_142f4 = inttoptr i32 %v1_142f4 to i32*
  store i32 %v3_142f0, i32* %v2_142f4, align 4
  %v4_142f4 = add i32 %v0_142f4, -12
  %v5_142f4 = inttoptr i32 %v4_142f4 to i32*
  %v6_142f4 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_142f4, i32* %v5_142f4, align 4
  %v7_142f4 = add i32 %v0_142f4, -8
  %v8_142f4 = inttoptr i32 %v7_142f4 to i32*
  %v9_142f4 = load i32, i32* %ip.global-to-local, align 4
  store i32 %v9_142f4, i32* %v8_142f4, align 4
  %v10_142f4 = add i32 %v0_142f4, -4
  %v11_142f4 = inttoptr i32 %v10_142f4 to i32*
  %v12_142f4 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_142f4, i32* %v11_142f4, align 4
  store i32 %v1_142f4, i32* %r0.global-to-local, align 4
  %v0_142f8 = load i32, i32* %r1.global-to-local, align 4
  %v1_142f8 = add i32 %v0_142f8, -4
  %v2_142f8 = inttoptr i32 %v1_142f8 to i32*
  %v3_142f8 = load i32, i32* %v2_142f8, align 4
  store i32 %v3_142f8, i32* %r3.global-to-local, align 4
  %v4_142f8 = add i32 %v0_142f8, -8
  %v5_142f8 = inttoptr i32 %v4_142f8 to i32*
  %v6_142f8 = load i32, i32* %v5_142f8, align 4
  store i32 %v6_142f8, i32* %r4.global-to-local, align 4
  %v7_142f8 = add i32 %v0_142f8, -12
  %v8_142f8 = inttoptr i32 %v7_142f8 to i32*
  %v9_142f8 = load i32, i32* %v8_142f8, align 4
  store i32 %v9_142f8, i32* @ip, align 4
  %v10_142f8 = add i32 %v0_142f8, -16
  %v11_142f8 = inttoptr i32 %v10_142f8 to i32*
  %v12_142f8 = load i32, i32* %v11_142f8, align 4
  store i32 %v12_142f8, i32* %lr.global-to-local, align 4
  store i32 %v10_142f8, i32* %r1.global-to-local, align 4
  %v1_142fc = add i32 %v0_142f4, -32
  %v2_142fc = inttoptr i32 %v1_142fc to i32*
  store i32 %v3_142f8, i32* %v2_142fc, align 4
  %v4_142fc = add i32 %v0_142f4, -28
  %v5_142fc = inttoptr i32 %v4_142fc to i32*
  %v6_142fc = load i32, i32* %r4.global-to-local, align 4
  store i32 %v6_142fc, i32* %v5_142fc, align 4
  %v7_142fc = add i32 %v0_142f4, -24
  %v8_142fc = inttoptr i32 %v7_142fc to i32*
  %v9_142fc = load i32, i32* @ip, align 4
  store i32 %v9_142fc, i32* %v8_142fc, align 4
  %v10_142fc = add i32 %v0_142f4, -20
  %v11_142fc = inttoptr i32 %v10_142fc to i32*
  %v12_142fc = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_142fc, i32* %v11_142fc, align 4
  store i32 %v1_142fc, i32* %r0.global-to-local, align 4
  %v0_14300 = load i32, i32* %r2.global-to-local, align 4
  %v2_14300 = add i32 %v0_14300, -32
  store i32 %v2_14300, i32* %r2.global-to-local, align 4
  %v6_14304 = icmp slt i32 %v0_14300, 32
  br i1 %v6_14304, label %dec_label_pc_14308.loopexit, label %dec_label_pc_142f0.dec_label_pc_142f0_crit_edge

dec_label_pc_142f0.dec_label_pc_142f0_crit_edge:  ; preds = %dec_label_pc_142f0
  %v0_142f0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_142f0

dec_label_pc_14308.loopexit:                      ; preds = %dec_label_pc_142f0
  %v4_14300 = sub i32 31, %v0_14300
  %v5_14300 = and i32 %v4_14300, %v0_14300
  %v6_14300 = icmp slt i32 %v5_14300, 0
  %v7_14300 = icmp slt i32 %v2_14300, 0
  store i1 %v6_14300, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14300, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14308

dec_label_pc_14308:                               ; preds = %dec_label_pc_14308.loopexit, %dec_label_pc_142e4
  %v6_14310 = phi i32 [ %v1_142fc, %dec_label_pc_14308.loopexit ], [ %v0_142f448, %dec_label_pc_142e4 ]
  %v0_14318.pr = phi i32 [ %v2_14300, %dec_label_pc_14308.loopexit ], [ %v2_142e8, %dec_label_pc_142e4 ]
  %v4_14308 = add i32 %v0_14318.pr, 16
  %v6_14308 = sub i32 0, %v0_14318.pr
  %v7_14308 = and i32 %v4_14308, %v6_14308
  %v8_14308 = icmp slt i32 %v7_14308, 0
  store i1 %v8_14308, i1* %cpsr_v.global-to-local, align 1
  %v9_14308 = icmp slt i32 %v4_14308, 0
  store i1 %v9_14308, i1* %cpsr_n.global-to-local, align 1
  %v10_14308 = icmp eq i32 %v4_14308, 0
  store i1 %v10_14308, i1* %cpsr_z.global-to-local, align 1
  %v5_1430c = icmp slt i32 %v0_14318.pr, -16
  br i1 %v5_1430c, label %.thread13, label %bb138

bb138:                                            ; preds = %dec_label_pc_14308
  %v6_1430c = load i32, i32* %r1.global-to-local, align 4
  %v7_1430c = add i32 %v6_1430c, -4
  %v8_1430c = inttoptr i32 %v7_1430c to i32*
  %v9_1430c = load i32, i32* %v8_1430c, align 4
  store i32 %v9_1430c, i32* %r3.global-to-local, align 4
  %v10_1430c = add i32 %v6_1430c, -8
  %v11_1430c = inttoptr i32 %v10_1430c to i32*
  %v12_1430c = load i32, i32* %v11_1430c, align 4
  store i32 %v12_1430c, i32* %r4.global-to-local, align 4
  %v13_1430c = add i32 %v6_1430c, -12
  %v14_1430c = inttoptr i32 %v13_1430c to i32*
  %v15_1430c = load i32, i32* %v14_1430c, align 4
  store i32 %v15_1430c, i32* @ip, align 4
  %v16_1430c = add i32 %v6_1430c, -16
  %v17_1430c = inttoptr i32 %v16_1430c to i32*
  %v18_1430c = load i32, i32* %v17_1430c, align 4
  store i32 %v18_1430c, i32* %lr.global-to-local, align 4
  store i32 %v16_1430c, i32* %r1.global-to-local, align 4
  %v7_14310 = add i32 %v6_14310, -16
  %v8_14310 = inttoptr i32 %v7_14310 to i32*
  store i32 %v9_1430c, i32* %v8_14310, align 4
  %v10_14310 = add i32 %v6_14310, -12
  %v11_14310 = inttoptr i32 %v10_14310 to i32*
  %v12_14310 = load i32, i32* %r4.global-to-local, align 4
  store i32 %v12_14310, i32* %v11_14310, align 4
  %v13_14310 = add i32 %v6_14310, -8
  %v14_14310 = inttoptr i32 %v13_14310 to i32*
  %v15_14310 = load i32, i32* @ip, align 4
  store i32 %v15_14310, i32* %v14_14310, align 4
  %v16_14310 = add i32 %v6_14310, -4
  %v17_14310 = inttoptr i32 %v16_14310 to i32*
  %v18_14310 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v18_14310, i32* %v17_14310, align 4
  store i32 %v7_14310, i32* %r0.global-to-local, align 4
  %v6_14314 = load i32, i32* %r2.global-to-local, align 4
  %v7_14314 = add i32 %v6_14314, -16
  store i32 %v7_14314, i32* %r2.global-to-local, align 4
  br label %.thread13

.thread13:                                        ; preds = %dec_label_pc_14308, %bb138
  %v6_14320 = phi i32 [ %v7_14310, %bb138 ], [ %v6_14310, %dec_label_pc_14308 ]
  %v0_14318 = phi i32 [ %v7_14314, %bb138 ], [ %v0_14318.pr, %dec_label_pc_14308 ]
  %v4_14318 = add i32 %v0_14318, 20
  store i32 %v4_14318, i32* %r2.global-to-local, align 4
  %v6_14318 = sub i32 0, %v0_14318
  %v7_14318 = and i32 %v4_14318, %v6_14318
  %v8_14318 = icmp slt i32 %v7_14318, 0
  store i1 %v8_14318, i1* %cpsr_v.global-to-local, align 1
  %v9_14318 = icmp slt i32 %v4_14318, 0
  store i1 %v9_14318, i1* %cpsr_n.global-to-local, align 1
  %v10_14318 = icmp eq i32 %v4_14318, 0
  store i1 %v10_14318, i1* %cpsr_z.global-to-local, align 1
  %v5_1431c = icmp slt i32 %v0_14318, -20
  br i1 %v5_1431c, label %.thread15, label %bb139

bb139:                                            ; preds = %.thread13
  %v6_1431c = load i32, i32* %r1.global-to-local, align 4
  %v7_1431c = add i32 %v6_1431c, -4
  %v8_1431c = inttoptr i32 %v7_1431c to i32*
  %v9_1431c = load i32, i32* %v8_1431c, align 4
  store i32 %v9_1431c, i32* %r3.global-to-local, align 4
  %v10_1431c = add i32 %v6_1431c, -8
  %v11_1431c = inttoptr i32 %v10_1431c to i32*
  %v12_1431c = load i32, i32* %v11_1431c, align 4
  store i32 %v12_1431c, i32* @ip, align 4
  %v13_1431c = add i32 %v6_1431c, -12
  %v14_1431c = inttoptr i32 %v13_1431c to i32*
  %v15_1431c = load i32, i32* %v14_1431c, align 4
  store i32 %v15_1431c, i32* %lr.global-to-local, align 4
  store i32 %v13_1431c, i32* %r1.global-to-local, align 4
  %v7_14320 = add i32 %v6_14320, -12
  %v8_14320 = inttoptr i32 %v7_14320 to i32*
  store i32 %v9_1431c, i32* %v8_14320, align 4
  %v10_14320 = add i32 %v6_14320, -8
  %v11_14320 = inttoptr i32 %v10_14320 to i32*
  %v12_14320 = load i32, i32* @ip, align 4
  store i32 %v12_14320, i32* %v11_14320, align 4
  %v13_14320 = add i32 %v6_14320, -4
  %v14_14320 = inttoptr i32 %v13_14320 to i32*
  %v15_14320 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v15_14320, i32* %v14_14320, align 4
  store i32 %v7_14320, i32* %r0.global-to-local, align 4
  %v6_14324 = load i32, i32* %r2.global-to-local, align 4
  %v7_14324 = add i32 %v6_14324, -12
  store i32 %v7_14324, i32* %r2.global-to-local, align 4
  br label %.thread15

.thread15:                                        ; preds = %.thread13, %bb139
  %v6_1434456 = phi i32 [ %v6_14320, %.thread13 ], [ %v7_14320, %bb139 ]
  %v0_1432c54 = phi i32 [ %v4_14318, %.thread13 ], [ %v7_14324, %bb139 ]
  %v2_14328 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14328, i32* @r4, align 4
  store i32 %v6_142e4, i32* @lr, align 4
  br label %dec_label_pc_1432c

dec_label_pc_1432c:                               ; preds = %dec_label_pc_142dc, %.thread15
  %v7_1433c = phi i32 [ %v0_142f448, %dec_label_pc_142dc ], [ %v6_1434456, %.thread15 ]
  %v0_1432c = phi i32 [ %v2_142dc, %dec_label_pc_142dc ], [ %v0_1432c54, %.thread15 ]
  %v2_1432c = add i32 %v0_1432c, 8
  store i32 %v2_1432c, i32* %r2.global-to-local, align 4
  %v4_1432c = sub i32 0, %v0_1432c
  %v5_1432c = and i32 %v2_1432c, %v4_1432c
  %v6_1432c = icmp slt i32 %v5_1432c, 0
  store i1 %v6_1432c, i1* %cpsr_v.global-to-local, align 1
  %v7_1432c = icmp slt i32 %v2_1432c, 0
  store i1 %v7_1432c, i1* %cpsr_n.global-to-local, align 1
  %v8_1432c = icmp eq i32 %v2_1432c, 0
  store i1 %v8_1432c, i1* %cpsr_z.global-to-local, align 1
  %v5_14330 = icmp slt i32 %v0_1432c, -8
  br i1 %v5_14330, label %bb141, label %dec_label_pc_14334

dec_label_pc_14334:                               ; preds = %dec_label_pc_1432c
  %v6_14334 = add i32 %v0_1432c, 4
  store i32 %v6_14334, i32* %r2.global-to-local, align 4
  %v8_14334 = sub i32 -5, %v0_1432c
  %v9_14334 = and i32 %v8_14334, %v2_1432c
  %v10_14334 = icmp slt i32 %v9_14334, 0
  store i1 %v10_14334, i1* %cpsr_v.global-to-local, align 1
  %v11_14334 = icmp slt i32 %v6_14334, 0
  store i1 %v11_14334, i1* %cpsr_n.global-to-local, align 1
  %v12_14334 = icmp eq i32 %v2_1432c, 4
  store i1 %v12_14334, i1* %cpsr_z.global-to-local, align 1
  %v5_14338 = icmp slt i32 %v2_1432c, 4
  %v6_14338 = load i32, i32* %r1.global-to-local, align 4
  %v7_14338 = add i32 %v6_14338, -4
  %v8_14338 = inttoptr i32 %v7_14338 to i32*
  %v9_14338 = load i32, i32* %v8_14338, align 4
  store i32 %v9_14338, i32* %r3.global-to-local, align 4
  br i1 %v5_14338, label %.thread19, label %bb140

.thread19:                                        ; preds = %dec_label_pc_14334
  store i32 %v7_14338, i32* %r1.global-to-local, align 4
  %v8_1433c = add i32 %v7_1433c, -4
  %v9_1433c = inttoptr i32 %v8_1433c to i32*
  store i32 %v9_14338, i32* %v9_1433c, align 4
  %v10_1433c = load i32, i32* %r0.global-to-local, align 4
  %v11_1433c = add i32 %v10_1433c, -4
  store i32 %v11_1433c, i32* %r0.global-to-local, align 4
  %v0_1434c.pre = load i32, i32* %r2.global-to-local, align 4
  br label %bb141

bb140:                                            ; preds = %dec_label_pc_14334
  %v10_14340 = add i32 %v6_14338, -8
  %v11_14340 = inttoptr i32 %v10_14340 to i32*
  %v12_14340 = load i32, i32* %v11_14340, align 4
  store i32 %v12_14340, i32* @ip, align 4
  store i32 %v10_14340, i32* %r1.global-to-local, align 4
  %v7_14344 = add i32 %v7_1433c, -8
  %v8_14344 = inttoptr i32 %v7_14344 to i32*
  store i32 %v9_14338, i32* %v8_14344, align 4
  %v10_14344 = add i32 %v7_1433c, -4
  %v11_14344 = inttoptr i32 %v10_14344 to i32*
  %v12_14344 = load i32, i32* @ip, align 4
  store i32 %v12_14344, i32* %v11_14344, align 4
  store i32 %v7_14344, i32* %r0.global-to-local, align 4
  %v6_14348 = load i32, i32* %r2.global-to-local, align 4
  %v7_14348 = add i32 %v6_14348, -4
  store i32 %v7_14348, i32* %r2.global-to-local, align 4
  br label %bb141

bb141:                                            ; preds = %.thread19, %.thread25, %dec_label_pc_1432c, %dec_label_pc_142bc, %dec_label_pc_144f0, %dec_label_pc_14484, %dec_label_pc_14418, %bb140
  %v2_14350 = phi i32 [ %v11_1433c, %.thread19 ], [ %v0_143e831, %.thread25 ], [ %v7_1433c, %dec_label_pc_1432c ], [ %v2_142c0, %dec_label_pc_142bc ], [ %v2_1435c64, %dec_label_pc_144f0 ], [ %v2_1435c63, %dec_label_pc_14484 ], [ %v2_1435c62, %dec_label_pc_14418 ], [ %v7_14344, %bb140 ]
  %v0_1434c = phi i32 [ %v0_1434c.pre, %.thread19 ], [ %v2_14390, %.thread25 ], [ %v2_1432c, %dec_label_pc_1432c ], [ %v2_142c4, %dec_label_pc_142bc ], [ %v0_1434c60, %dec_label_pc_144f0 ], [ %v0_1434c59, %dec_label_pc_14484 ], [ %v0_1434c58, %dec_label_pc_14418 ], [ %v7_14348, %bb140 ]
  %v1_1434c = add i32 %v0_1434c, 4
  store i32 %v1_1434c, i32* %r2.global-to-local, align 4
  %v3_1434c = sub i32 0, %v0_1434c
  %v4_1434c = and i32 %v1_1434c, %v3_1434c
  %v5_1434c = icmp slt i32 %v4_1434c, 0
  store i1 %v5_1434c, i1* %cpsr_v.global-to-local, align 1
  %v6_1434c = icmp slt i32 %v1_1434c, 0
  store i1 %v6_1434c, i1* %cpsr_n.global-to-local, align 1
  %v7_1434c = icmp eq i32 %v1_1434c, 0
  store i1 %v7_1434c, i1* %cpsr_z.global-to-local, align 1
  br i1 %v7_1434c, label %.thread122, label %bb142

bb142:                                            ; preds = %bb141
  %v1_14354 = add i32 %v0_1434c, 2
  %v3_14354 = sub i32 -3, %v0_1434c
  %v4_14354 = and i32 %v3_14354, %v1_1434c
  %v5_14354 = icmp slt i32 %v4_14354, 0
  store i1 %v5_14354, i1* %cpsr_v.global-to-local, align 1
  %v6_14354 = icmp slt i32 %v1_14354, 0
  store i1 %v6_14354, i1* %cpsr_n.global-to-local, align 1
  %v7_14354 = icmp eq i32 %v1_1434c, 2
  store i1 %v7_14354, i1* %cpsr_z.global-to-local, align 1
  %v0_14358 = load i32, i32* %r1.global-to-local, align 4
  %v1_14358 = add i32 %v0_14358, -1
  %v2_14358 = inttoptr i32 %v1_14358 to i8*
  %v3_14358 = load i8, i8* %v2_14358, align 1
  %v4_14358 = zext i8 %v3_14358 to i32
  store i32 %v4_14358, i32* %r3.global-to-local, align 4
  store i32 %v1_14358, i32* %r1.global-to-local, align 4
  %v3_1435c = add i32 %v2_14350, -1
  %v4_1435c = inttoptr i32 %v3_1435c to i8*
  store i8 %v3_14358, i8* %v4_1435c, align 1
  %v5_1435c = load i32, i32* %r0.global-to-local, align 4
  %v6_1435c = add i32 %v5_1435c, -1
  store i32 %v6_1435c, i32* %r0.global-to-local, align 4
  %v0_14360 = load i1, i1* %cpsr_n.global-to-local, align 1
  %v1_14360 = load i1, i1* %cpsr_v.global-to-local, align 1
  %v2_14360 = xor i1 %v0_14360, %v1_14360
  br i1 %v2_14360, label %.thread121, label %bb143

bb143:                                            ; preds = %bb142
  %v3_14360 = load i32, i32* %r1.global-to-local, align 4
  %v4_14360 = add i32 %v3_14360, -1
  %v5_14360 = inttoptr i32 %v4_14360 to i8*
  %v6_14360 = load i8, i8* %v5_14360, align 1
  %v7_14360 = zext i8 %v6_14360 to i32
  store i32 %v7_14360, i32* %r3.global-to-local, align 4
  store i32 %v4_14360, i32* %r1.global-to-local, align 4
  %v6_14364 = add i32 %v5_1435c, -2
  %v7_14364 = inttoptr i32 %v6_14364 to i8*
  store i8 %v6_14360, i8* %v7_14364, align 1
  %v8_14364 = load i32, i32* %r0.global-to-local, align 4
  %v9_14364 = add i32 %v8_14364, -1
  store i32 %v9_14364, i32* %r0.global-to-local, align 4
  %v1_14368.pre = load i1, i1* %cpsr_n.global-to-local, align 1
  %v2_14368.pre = load i1, i1* %cpsr_v.global-to-local, align 1
  br label %.thread121

.thread121:                                       ; preds = %bb142, %bb143
  %v7_1436c = phi i32 [ %v9_14364, %bb143 ], [ %v6_1435c, %bb142 ]
  %v2_1436c = phi i1 [ %v2_14368.pre, %bb143 ], [ %v1_14360, %bb142 ]
  %v1_1436c = phi i1 [ %v1_14368.pre, %bb143 ], [ %v0_14360, %bb142 ]
  %v0_14368 = load i1, i1* %cpsr_z.global-to-local, align 1
  %v3_14368 = xor i1 %v2_1436c, %v1_1436c
  %v4_14368 = or i1 %v0_14368, %v3_14368
  br i1 %v4_14368, label %.thread122, label %bb144

bb144:                                            ; preds = %.thread121
  %v5_14368 = load i32, i32* %r1.global-to-local, align 4
  %v6_14368 = add i32 %v5_14368, -1
  %v7_14368 = inttoptr i32 %v6_14368 to i8*
  %v8_14368 = load i8, i8* %v7_14368, align 1
  %v9_14368 = zext i8 %v8_14368 to i32
  store i32 %v9_14368, i32* %r3.global-to-local, align 4
  store i32 %v6_14368, i32* %r1.global-to-local, align 4
  %v8_1436c = add i32 %v7_1436c, -1
  %v9_1436c = inttoptr i32 %v8_1436c to i8*
  store i8 %v8_14368, i8* %v9_1436c, align 1
  %v10_1436c = load i32, i32* %r0.global-to-local, align 4
  %v11_1436c = add i32 %v10_1436c, -1
  store i32 %v11_1436c, i32* %r0.global-to-local, align 4
  br label %.thread122

dec_label_pc_14374:                               ; preds = %dec_label_pc_142cc
  store i1 false, i1* %cpsr_v.global-to-local, align 1
  %v8_14374 = icmp eq i32 %v1_142cc, 1
  store i1 %v8_14374, i1* %cpsr_n.global-to-local, align 1
  %v9_14374 = icmp eq i32 %v1_142cc, 2
  store i1 %v9_14374, i1* %cpsr_z.global-to-local, align 1
  %v1_14378 = add i32 %v2_142bc, -1
  %v2_14378 = inttoptr i32 %v1_14378 to i8*
  %v3_14378 = load i8, i8* %v2_14378, align 1
  %v4_14378 = zext i8 %v3_14378 to i32
  store i32 %v4_14378, i32* %r3.global-to-local, align 4
  store i32 %v1_14378, i32* %r1.global-to-local, align 4
  %v3_1437c = add i32 %v2_142c0, -1
  %v4_1437c = inttoptr i32 %v3_1437c to i8*
  store i8 %v3_14378, i8* %v4_1437c, align 1
  %v5_1437c = load i32, i32* %r0.global-to-local, align 4
  %v6_1437c = add i32 %v5_1437c, -1
  store i32 %v6_1437c, i32* %r0.global-to-local, align 4
  br i1 %v8_14374, label %.thread25, label %bb145

bb145:                                            ; preds = %dec_label_pc_14374
  %v6_14380 = load i32, i32* %r1.global-to-local, align 4
  %v7_14380 = add i32 %v6_14380, -1
  %v8_14380 = inttoptr i32 %v7_14380 to i8*
  %v9_14380 = load i8, i8* %v8_14380, align 1
  %v10_14380 = zext i8 %v9_14380 to i32
  store i32 %v10_14380, i32* %r3.global-to-local, align 4
  store i32 %v7_14380, i32* %r1.global-to-local, align 4
  %v9_14384 = add i32 %v5_1437c, -2
  %v10_14384 = inttoptr i32 %v9_14384 to i8*
  store i8 %v9_14380, i8* %v10_14384, align 1
  %v11_14384 = load i32, i32* %r0.global-to-local, align 4
  %v12_14384 = add i32 %v11_14384, -1
  store i32 %v12_14384, i32* %r0.global-to-local, align 4
  br i1 %v9_14374, label %.thread25, label %bb146

bb146:                                            ; preds = %bb145
  %v8_14388 = load i32, i32* %r1.global-to-local, align 4
  %v9_14388 = add i32 %v8_14388, -1
  %v10_14388 = inttoptr i32 %v9_14388 to i8*
  %v11_14388 = load i8, i8* %v10_14388, align 1
  %v12_14388 = zext i8 %v11_14388 to i32
  store i32 %v12_14388, i32* %r3.global-to-local, align 4
  store i32 %v9_14388, i32* %r1.global-to-local, align 4
  %v11_1438c = add i32 %v11_14384, -2
  %v12_1438c = inttoptr i32 %v11_1438c to i8*
  store i8 %v11_14388, i8* %v12_1438c, align 1
  %v13_1438c = load i32, i32* %r0.global-to-local, align 4
  %v14_1438c = add i32 %v13_1438c, -1
  store i32 %v14_1438c, i32* %r0.global-to-local, align 4
  br label %.thread25

.thread25:                                        ; preds = %bb145, %dec_label_pc_14374, %bb146
  %v0_143e831 = phi i32 [ %v12_14384, %bb145 ], [ %v6_1437c, %dec_label_pc_14374 ], [ %v14_1438c, %bb146 ]
  %v0_14390 = load i32, i32* %r2.global-to-local, align 4
  %v1_14390 = load i32, i32* @ip, align 4
  %v2_14390 = sub i32 %v0_14390, %v1_14390
  store i32 %v2_14390, i32* %r2.global-to-local, align 4
  %v4_14390 = xor i32 %v1_14390, %v0_14390
  %v5_14390 = xor i32 %v2_14390, %v0_14390
  %v6_14390 = and i32 %v5_14390, %v4_14390
  %v7_14390 = icmp slt i32 %v6_14390, 0
  store i1 %v7_14390, i1* %cpsr_v.global-to-local, align 1
  %v8_14390 = icmp slt i32 %v2_14390, 0
  store i1 %v8_14390, i1* %cpsr_n.global-to-local, align 1
  %v9_14390 = icmp eq i32 %v0_14390, %v1_14390
  store i1 %v9_14390, i1* %cpsr_z.global-to-local, align 1
  %v5_14394 = icmp slt i32 %v0_14390, %v1_14390
  br i1 %v5_14394, label %bb141, label %dec_label_pc_14398

dec_label_pc_14398:                               ; preds = %.thread25
  %v0_14398 = load i32, i32* %r1.global-to-local, align 4
  %v1_14398 = urem i32 %v0_14398, 4
  store i32 %v1_14398, i32* @ip, align 4
  store i1 false, i1* %cpsr_n.global-to-local, align 1
  %v2_14398 = icmp eq i32 %v1_14398, 0
  store i1 %v2_14398, i1* %cpsr_z.global-to-local, align 1
  br i1 %v2_14398, label %dec_label_pc_142dc, label %dec_label_pc_143a0

dec_label_pc_143a0:                               ; preds = %dec_label_pc_142d4, %dec_label_pc_14398
  %v0_143e830 = phi i32 [ %v2_142c0, %dec_label_pc_142d4 ], [ %v0_143e831, %dec_label_pc_14398 ]
  %v0_14494 = phi i32 [ %v2_142c4, %dec_label_pc_142d4 ], [ %v2_14390, %dec_label_pc_14398 ]
  %v0_143a0 = phi i32 [ %v2_142bc, %dec_label_pc_142d4 ], [ %v0_14398, %dec_label_pc_14398 ]
  %v0_143a8 = phi i32 [ %v1_142d4, %dec_label_pc_142d4 ], [ %v1_14398, %dec_label_pc_14398 ]
  %v1_143a0 = and i32 %v0_143a0, -4
  store i32 %v1_143a0, i32* %r1.global-to-local, align 4
  %v1_143a4 = inttoptr i32 %v1_143a0 to i32*
  %v2_143a4 = load i32, i32* %v1_143a4, align 4
  store i32 %v2_143a4, i32* %r3.global-to-local, align 4
  %v7_143a8 = icmp ult i32 %v0_143a8, 2
  %v2_1448c = add i32 %v0_14494, -12
  %v4_1448c = sub i32 11, %v0_14494
  %v5_1448c = and i32 %v4_1448c, %v0_14494
  %v6_1448c = icmp slt i32 %v5_1448c, 0
  store i1 %v6_1448c, i1* %cpsr_v.global-to-local, align 1
  %v7_1448c = icmp slt i32 %v2_1448c, 0
  store i1 %v7_1448c, i1* %cpsr_n.global-to-local, align 1
  %v8_1448c = icmp eq i32 %v0_14494, 12
  store i1 %v8_1448c, i1* %cpsr_z.global-to-local, align 1
  %v5_14490 = icmp slt i32 %v0_14494, 12
  br i1 %v7_143a8, label %dec_label_pc_1448c, label %dec_label_pc_143b0

dec_label_pc_143b0:                               ; preds = %dec_label_pc_143a0
  %v8_143a8 = icmp eq i32 %v0_143a8, 2
  br i1 %v8_143a8, label %dec_label_pc_14420, label %dec_label_pc_143b4

dec_label_pc_143b4:                               ; preds = %dec_label_pc_143b0
  br i1 %v5_14490, label %dec_label_pc_14400, label %dec_label_pc_143bc

dec_label_pc_143bc:                               ; preds = %dec_label_pc_143b4
  store i32 %v2_1448c, i32* %r2.global-to-local, align 4
  %v3_143c0 = load i32, i32* @r4, align 4
  store i32 %v3_143c0, i32* %stack_var_-12, align 4
  %v6_143c0 = load i32, i32* @r5, align 4
  store i32 %v6_143c0, i32* %stack_var_-8, align 4
  %v9_143c0 = load i32, i32* @lr, align 4
  br label %dec_label_pc_143c4

dec_label_pc_143c4:                               ; preds = %dec_label_pc_143c4.dec_label_pc_143c4_crit_edge, %dec_label_pc_143bc
  %v0_143e8 = phi i32 [ %v1_143e8, %dec_label_pc_143c4.dec_label_pc_143c4_crit_edge ], [ %v0_143e830, %dec_label_pc_143bc ]
  %v0_143c8 = phi i32 [ %v0_143c8.pre, %dec_label_pc_143c4.dec_label_pc_143c4_crit_edge ], [ %v1_143a0, %dec_label_pc_143bc ]
  %v0_143c4 = phi i32 [ %v0_143c4.pre, %dec_label_pc_143c4.dec_label_pc_143c4_crit_edge ], [ %v2_143a4, %dec_label_pc_143bc ]
  %v3_143c4 = mul i32 %v0_143c4, 256
  store i32 %v3_143c4, i32* %lr.global-to-local, align 4
  %v1_143c8 = add i32 %v0_143c8, -4
  %v2_143c8 = inttoptr i32 %v1_143c8 to i32*
  %v3_143c8 = load i32, i32* %v2_143c8, align 4
  store i32 %v3_143c8, i32* %r3.global-to-local, align 4
  %v4_143c8 = add i32 %v0_143c8, -8
  %v5_143c8 = inttoptr i32 %v4_143c8 to i32*
  %v6_143c8 = load i32, i32* %v5_143c8, align 4
  store i32 %v6_143c8, i32* %r4.global-to-local, align 4
  %v7_143c8 = add i32 %v0_143c8, -12
  %v8_143c8 = inttoptr i32 %v7_143c8 to i32*
  %v9_143c8 = load i32, i32* %v8_143c8, align 4
  store i32 %v9_143c8, i32* %r5.global-to-local, align 4
  %v10_143c8 = add i32 %v0_143c8, -16
  %v11_143c8 = inttoptr i32 %v10_143c8 to i32*
  %v12_143c8 = load i32, i32* %v11_143c8, align 4
  store i32 %v10_143c8, i32* %r1.global-to-local, align 4
  %v4_143cc = udiv i32 %v12_143c8, 16777216
  %v5_143cc = or i32 %v4_143cc, %v3_143c4
  store i32 %v5_143cc, i32* %lr.global-to-local, align 4
  %v3_143d0 = mul i32 %v12_143c8, 256
  %v4_143d4 = udiv i32 %v9_143c8, 16777216
  %v5_143d4 = or i32 %v3_143d0, %v4_143d4
  store i32 %v5_143d4, i32* @ip, align 4
  %v3_143d8 = mul i32 %v9_143c8, 256
  %v4_143dc = udiv i32 %v6_143c8, 16777216
  %v5_143dc = or i32 %v3_143d8, %v4_143dc
  store i32 %v5_143dc, i32* %r5.global-to-local, align 4
  %v3_143e0 = mul i32 %v6_143c8, 256
  %v4_143e4 = udiv i32 %v3_143c8, 16777216
  %v5_143e4 = or i32 %v3_143e0, %v4_143e4
  store i32 %v5_143e4, i32* %r4.global-to-local, align 4
  %v1_143e8 = add i32 %v0_143e8, -16
  %v2_143e8 = inttoptr i32 %v1_143e8 to i32*
  store i32 %v5_143e4, i32* %v2_143e8, align 4
  %v4_143e8 = add i32 %v0_143e8, -12
  %v5_143e8 = inttoptr i32 %v4_143e8 to i32*
  %v6_143e8 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_143e8, i32* %v5_143e8, align 4
  %v7_143e8 = add i32 %v0_143e8, -8
  %v8_143e8 = inttoptr i32 %v7_143e8 to i32*
  %v9_143e8 = load i32, i32* @ip, align 4
  store i32 %v9_143e8, i32* %v8_143e8, align 4
  %v10_143e8 = add i32 %v0_143e8, -4
  %v11_143e8 = inttoptr i32 %v10_143e8 to i32*
  %v12_143e8 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_143e8, i32* %v11_143e8, align 4
  store i32 %v1_143e8, i32* %r0.global-to-local, align 4
  %v0_143ec = load i32, i32* %r2.global-to-local, align 4
  %v2_143ec = add i32 %v0_143ec, -16
  store i32 %v2_143ec, i32* %r2.global-to-local, align 4
  %v6_143f0 = icmp slt i32 %v0_143ec, 16
  br i1 %v6_143f0, label %dec_label_pc_143f4, label %dec_label_pc_143c4.dec_label_pc_143c4_crit_edge

dec_label_pc_143c4.dec_label_pc_143c4_crit_edge:  ; preds = %dec_label_pc_143c4
  %v0_143c4.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_143c8.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_143c4

dec_label_pc_143f4:                               ; preds = %dec_label_pc_143c4
  %v2_143f4 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_143f4, i32* @r4, align 4
  %v5_143f4 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_143f4, i32* @r5, align 4
  store i32 %v9_143c0, i32* @lr, align 4
  %v2_143f8 = add i32 %v0_143ec, -4
  store i32 %v2_143f8, i32* %r2.global-to-local, align 4
  %v4_143f8 = add i32 %v0_143ec, 2147483632
  %v5_143f8 = and i32 %v2_143f8, %v4_143f8
  %v6_143f8 = icmp slt i32 %v5_143f8, 0
  store i1 %v6_143f8, i1* %cpsr_v.global-to-local, align 1
  %v7_143f8 = icmp slt i32 %v2_143f8, 0
  store i1 %v7_143f8, i1* %cpsr_n.global-to-local, align 1
  %v8_143f8 = icmp eq i32 %v2_143f8, 0
  store i1 %v8_143f8, i1* %cpsr_z.global-to-local, align 1
  %v5_143fc = icmp slt i32 %v2_143ec, -12
  br i1 %v5_143fc, label %dec_label_pc_14418, label %dec_label_pc_14400

dec_label_pc_14400:                               ; preds = %dec_label_pc_143f4, %dec_label_pc_143b4, %dec_label_pc_14400
  %v1_1440c = phi i32 [ %v5_1440c, %dec_label_pc_14400 ], [ %v1_143e8, %dec_label_pc_143f4 ], [ %v0_143e830, %dec_label_pc_143b4 ]
  %v0_14400 = load i32, i32* %r3.global-to-local, align 4
  %v3_14400 = mul i32 %v0_14400, 256
  store i32 %v3_14400, i32* %ip.global-to-local, align 4
  %v0_14404 = load i32, i32* %r1.global-to-local, align 4
  %v1_14404 = add i32 %v0_14404, -4
  %v2_14404 = inttoptr i32 %v1_14404 to i32*
  %v3_14404 = load i32, i32* %v2_14404, align 4
  store i32 %v3_14404, i32* %r3.global-to-local, align 4
  store i32 %v1_14404, i32* %r1.global-to-local, align 4
  %v4_14408 = udiv i32 %v3_14404, 16777216
  %v5_14408 = or i32 %v4_14408, %v3_14400
  store i32 %v5_14408, i32* @ip, align 4
  %v2_1440c = add i32 %v1_1440c, -4
  %v3_1440c = inttoptr i32 %v2_1440c to i32*
  store i32 %v5_14408, i32* %v3_1440c, align 4
  %v4_1440c = load i32, i32* %r0.global-to-local, align 4
  %v5_1440c = add i32 %v4_1440c, -4
  store i32 %v5_1440c, i32* %r0.global-to-local, align 4
  %v0_14410 = load i32, i32* %r2.global-to-local, align 4
  %v2_14410 = add i32 %v0_14410, -4
  store i32 %v2_14410, i32* %r2.global-to-local, align 4
  %v6_14414 = icmp slt i32 %v0_14410, 4
  br i1 %v6_14414, label %dec_label_pc_14418.loopexit, label %dec_label_pc_14400

dec_label_pc_14418.loopexit:                      ; preds = %dec_label_pc_14400
  %v4_14410 = sub i32 3, %v0_14410
  %v5_14410 = and i32 %v4_14410, %v0_14410
  %v6_14410 = icmp slt i32 %v5_14410, 0
  %v7_14410 = icmp slt i32 %v2_14410, 0
  store i1 %v6_14410, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_14410, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14418

dec_label_pc_14418:                               ; preds = %dec_label_pc_14418.loopexit, %dec_label_pc_143f4
  %v2_1435c62 = phi i32 [ %v5_1440c, %dec_label_pc_14418.loopexit ], [ %v1_143e8, %dec_label_pc_143f4 ]
  %v0_1434c58 = phi i32 [ %v2_14410, %dec_label_pc_14418.loopexit ], [ %v2_143f8, %dec_label_pc_143f4 ]
  %v0_14418 = load i32, i32* %r1.global-to-local, align 4
  %v1_14418 = add i32 %v0_14418, 3
  store i32 %v1_14418, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_14420:                               ; preds = %dec_label_pc_143b0
  br i1 %v5_14490, label %dec_label_pc_1446c, label %dec_label_pc_14428

dec_label_pc_14428:                               ; preds = %dec_label_pc_14420
  store i32 %v2_1448c, i32* %r2.global-to-local, align 4
  %v3_1442c = load i32, i32* @r4, align 4
  store i32 %v3_1442c, i32* %stack_var_-12, align 4
  %v6_1442c = load i32, i32* @r5, align 4
  store i32 %v6_1442c, i32* %stack_var_-8, align 4
  %v9_1442c = load i32, i32* @lr, align 4
  br label %dec_label_pc_14430

dec_label_pc_14430:                               ; preds = %dec_label_pc_14430.dec_label_pc_14430_crit_edge, %dec_label_pc_14428
  %v0_14454 = phi i32 [ %v1_14454, %dec_label_pc_14430.dec_label_pc_14430_crit_edge ], [ %v0_143e830, %dec_label_pc_14428 ]
  %v0_14434 = phi i32 [ %v0_14434.pre, %dec_label_pc_14430.dec_label_pc_14430_crit_edge ], [ %v1_143a0, %dec_label_pc_14428 ]
  %v0_14430 = phi i32 [ %v0_14430.pre, %dec_label_pc_14430.dec_label_pc_14430_crit_edge ], [ %v2_143a4, %dec_label_pc_14428 ]
  %v3_14430 = mul i32 %v0_14430, 65536
  store i32 %v3_14430, i32* %lr.global-to-local, align 4
  %v1_14434 = add i32 %v0_14434, -4
  %v2_14434 = inttoptr i32 %v1_14434 to i32*
  %v3_14434 = load i32, i32* %v2_14434, align 4
  store i32 %v3_14434, i32* %r3.global-to-local, align 4
  %v4_14434 = add i32 %v0_14434, -8
  %v5_14434 = inttoptr i32 %v4_14434 to i32*
  %v6_14434 = load i32, i32* %v5_14434, align 4
  store i32 %v6_14434, i32* %r4.global-to-local, align 4
  %v7_14434 = add i32 %v0_14434, -12
  %v8_14434 = inttoptr i32 %v7_14434 to i32*
  %v9_14434 = load i32, i32* %v8_14434, align 4
  store i32 %v9_14434, i32* %r5.global-to-local, align 4
  %v10_14434 = add i32 %v0_14434, -16
  %v11_14434 = inttoptr i32 %v10_14434 to i32*
  %v12_14434 = load i32, i32* %v11_14434, align 4
  store i32 %v10_14434, i32* %r1.global-to-local, align 4
  %v4_14438 = udiv i32 %v12_14434, 65536
  %v5_14438 = or i32 %v4_14438, %v3_14430
  store i32 %v5_14438, i32* %lr.global-to-local, align 4
  %v3_1443c = mul i32 %v12_14434, 65536
  %v4_14440 = udiv i32 %v9_14434, 65536
  %v5_14440 = or i32 %v3_1443c, %v4_14440
  store i32 %v5_14440, i32* @ip, align 4
  %v3_14444 = mul i32 %v9_14434, 65536
  %v4_14448 = udiv i32 %v6_14434, 65536
  %v5_14448 = or i32 %v3_14444, %v4_14448
  store i32 %v5_14448, i32* %r5.global-to-local, align 4
  %v3_1444c = mul i32 %v6_14434, 65536
  %v4_14450 = udiv i32 %v3_14434, 65536
  %v5_14450 = or i32 %v3_1444c, %v4_14450
  store i32 %v5_14450, i32* %r4.global-to-local, align 4
  %v1_14454 = add i32 %v0_14454, -16
  %v2_14454 = inttoptr i32 %v1_14454 to i32*
  store i32 %v5_14450, i32* %v2_14454, align 4
  %v4_14454 = add i32 %v0_14454, -12
  %v5_14454 = inttoptr i32 %v4_14454 to i32*
  %v6_14454 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_14454, i32* %v5_14454, align 4
  %v7_14454 = add i32 %v0_14454, -8
  %v8_14454 = inttoptr i32 %v7_14454 to i32*
  %v9_14454 = load i32, i32* @ip, align 4
  store i32 %v9_14454, i32* %v8_14454, align 4
  %v10_14454 = add i32 %v0_14454, -4
  %v11_14454 = inttoptr i32 %v10_14454 to i32*
  %v12_14454 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_14454, i32* %v11_14454, align 4
  store i32 %v1_14454, i32* %r0.global-to-local, align 4
  %v0_14458 = load i32, i32* %r2.global-to-local, align 4
  %v2_14458 = add i32 %v0_14458, -16
  store i32 %v2_14458, i32* %r2.global-to-local, align 4
  %v6_1445c = icmp slt i32 %v0_14458, 16
  br i1 %v6_1445c, label %dec_label_pc_14460, label %dec_label_pc_14430.dec_label_pc_14430_crit_edge

dec_label_pc_14430.dec_label_pc_14430_crit_edge:  ; preds = %dec_label_pc_14430
  %v0_14430.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_14434.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_14430

dec_label_pc_14460:                               ; preds = %dec_label_pc_14430
  %v2_14460 = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_14460, i32* @r4, align 4
  %v5_14460 = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_14460, i32* @r5, align 4
  store i32 %v9_1442c, i32* @lr, align 4
  %v2_14464 = add i32 %v0_14458, -4
  store i32 %v2_14464, i32* %r2.global-to-local, align 4
  %v4_14464 = add i32 %v0_14458, 2147483632
  %v5_14464 = and i32 %v2_14464, %v4_14464
  %v6_14464 = icmp slt i32 %v5_14464, 0
  store i1 %v6_14464, i1* %cpsr_v.global-to-local, align 1
  %v7_14464 = icmp slt i32 %v2_14464, 0
  store i1 %v7_14464, i1* %cpsr_n.global-to-local, align 1
  %v8_14464 = icmp eq i32 %v2_14464, 0
  store i1 %v8_14464, i1* %cpsr_z.global-to-local, align 1
  %v5_14468 = icmp slt i32 %v2_14458, -12
  br i1 %v5_14468, label %dec_label_pc_14484, label %dec_label_pc_1446c

dec_label_pc_1446c:                               ; preds = %dec_label_pc_14460, %dec_label_pc_14420, %dec_label_pc_1446c
  %v1_14478 = phi i32 [ %v5_14478, %dec_label_pc_1446c ], [ %v1_14454, %dec_label_pc_14460 ], [ %v0_143e830, %dec_label_pc_14420 ]
  %v0_1446c = load i32, i32* %r3.global-to-local, align 4
  %v3_1446c = mul i32 %v0_1446c, 65536
  store i32 %v3_1446c, i32* %ip.global-to-local, align 4
  %v0_14470 = load i32, i32* %r1.global-to-local, align 4
  %v1_14470 = add i32 %v0_14470, -4
  %v2_14470 = inttoptr i32 %v1_14470 to i32*
  %v3_14470 = load i32, i32* %v2_14470, align 4
  store i32 %v3_14470, i32* %r3.global-to-local, align 4
  store i32 %v1_14470, i32* %r1.global-to-local, align 4
  %v4_14474 = udiv i32 %v3_14470, 65536
  %v5_14474 = or i32 %v4_14474, %v3_1446c
  store i32 %v5_14474, i32* @ip, align 4
  %v2_14478 = add i32 %v1_14478, -4
  %v3_14478 = inttoptr i32 %v2_14478 to i32*
  store i32 %v5_14474, i32* %v3_14478, align 4
  %v4_14478 = load i32, i32* %r0.global-to-local, align 4
  %v5_14478 = add i32 %v4_14478, -4
  store i32 %v5_14478, i32* %r0.global-to-local, align 4
  %v0_1447c = load i32, i32* %r2.global-to-local, align 4
  %v2_1447c = add i32 %v0_1447c, -4
  store i32 %v2_1447c, i32* %r2.global-to-local, align 4
  %v6_14480 = icmp slt i32 %v0_1447c, 4
  br i1 %v6_14480, label %dec_label_pc_14484.loopexit, label %dec_label_pc_1446c

dec_label_pc_14484.loopexit:                      ; preds = %dec_label_pc_1446c
  %v4_1447c = sub i32 3, %v0_1447c
  %v5_1447c = and i32 %v4_1447c, %v0_1447c
  %v6_1447c = icmp slt i32 %v5_1447c, 0
  %v7_1447c = icmp slt i32 %v2_1447c, 0
  store i1 %v6_1447c, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_1447c, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_14484

dec_label_pc_14484:                               ; preds = %dec_label_pc_14484.loopexit, %dec_label_pc_14460
  %v2_1435c63 = phi i32 [ %v5_14478, %dec_label_pc_14484.loopexit ], [ %v1_14454, %dec_label_pc_14460 ]
  %v0_1434c59 = phi i32 [ %v2_1447c, %dec_label_pc_14484.loopexit ], [ %v2_14464, %dec_label_pc_14460 ]
  %v0_14484 = load i32, i32* %r1.global-to-local, align 4
  %v1_14484 = add i32 %v0_14484, 2
  store i32 %v1_14484, i32* %r1.global-to-local, align 4
  br label %bb141

dec_label_pc_1448c:                               ; preds = %dec_label_pc_143a0
  br i1 %v5_14490, label %dec_label_pc_144d8, label %dec_label_pc_14494

dec_label_pc_14494:                               ; preds = %dec_label_pc_1448c
  store i32 %v2_1448c, i32* %r2.global-to-local, align 4
  %v3_14498 = load i32, i32* @r4, align 4
  store i32 %v3_14498, i32* %stack_var_-12, align 4
  %v6_14498 = load i32, i32* @r5, align 4
  store i32 %v6_14498, i32* %stack_var_-8, align 4
  %v9_14498 = load i32, i32* @lr, align 4
  br label %dec_label_pc_1449c

dec_label_pc_1449c:                               ; preds = %dec_label_pc_1449c.dec_label_pc_1449c_crit_edge, %dec_label_pc_14494
  %v0_144c0 = phi i32 [ %v1_144c0, %dec_label_pc_1449c.dec_label_pc_1449c_crit_edge ], [ %v0_143e830, %dec_label_pc_14494 ]
  %v0_144a0 = phi i32 [ %v0_144a0.pre, %dec_label_pc_1449c.dec_label_pc_1449c_crit_edge ], [ %v1_143a0, %dec_label_pc_14494 ]
  %v0_1449c = phi i32 [ %v0_1449c.pre, %dec_label_pc_1449c.dec_label_pc_1449c_crit_edge ], [ %v2_143a4, %dec_label_pc_14494 ]
  %v3_1449c = mul i32 %v0_1449c, 16777216
  store i32 %v3_1449c, i32* %lr.global-to-local, align 4
  %v1_144a0 = add i32 %v0_144a0, -4
  %v2_144a0 = inttoptr i32 %v1_144a0 to i32*
  %v3_144a0 = load i32, i32* %v2_144a0, align 4
  store i32 %v3_144a0, i32* %r3.global-to-local, align 4
  %v4_144a0 = add i32 %v0_144a0, -8
  %v5_144a0 = inttoptr i32 %v4_144a0 to i32*
  %v6_144a0 = load i32, i32* %v5_144a0, align 4
  store i32 %v6_144a0, i32* %r4.global-to-local, align 4
  %v7_144a0 = add i32 %v0_144a0, -12
  %v8_144a0 = inttoptr i32 %v7_144a0 to i32*
  %v9_144a0 = load i32, i32* %v8_144a0, align 4
  store i32 %v9_144a0, i32* %r5.global-to-local, align 4
  %v10_144a0 = add i32 %v0_144a0, -16
  %v11_144a0 = inttoptr i32 %v10_144a0 to i32*
  %v12_144a0 = load i32, i32* %v11_144a0, align 4
  store i32 %v10_144a0, i32* %r1.global-to-local, align 4
  %v4_144a4 = udiv i32 %v12_144a0, 256
  %v5_144a4 = or i32 %v4_144a4, %v3_1449c
  store i32 %v5_144a4, i32* %lr.global-to-local, align 4
  %v3_144a8 = mul i32 %v12_144a0, 16777216
  %v4_144ac = udiv i32 %v9_144a0, 256
  %v5_144ac = or i32 %v3_144a8, %v4_144ac
  store i32 %v5_144ac, i32* @ip, align 4
  %v3_144b0 = mul i32 %v9_144a0, 16777216
  %v4_144b4 = udiv i32 %v6_144a0, 256
  %v5_144b4 = or i32 %v3_144b0, %v4_144b4
  store i32 %v5_144b4, i32* %r5.global-to-local, align 4
  %v3_144b8 = mul i32 %v6_144a0, 16777216
  %v4_144bc = udiv i32 %v3_144a0, 256
  %v5_144bc = or i32 %v3_144b8, %v4_144bc
  store i32 %v5_144bc, i32* %r4.global-to-local, align 4
  %v1_144c0 = add i32 %v0_144c0, -16
  %v2_144c0 = inttoptr i32 %v1_144c0 to i32*
  store i32 %v5_144bc, i32* %v2_144c0, align 4
  %v4_144c0 = add i32 %v0_144c0, -12
  %v5_144c0 = inttoptr i32 %v4_144c0 to i32*
  %v6_144c0 = load i32, i32* %r5.global-to-local, align 4
  store i32 %v6_144c0, i32* %v5_144c0, align 4
  %v7_144c0 = add i32 %v0_144c0, -8
  %v8_144c0 = inttoptr i32 %v7_144c0 to i32*
  %v9_144c0 = load i32, i32* @ip, align 4
  store i32 %v9_144c0, i32* %v8_144c0, align 4
  %v10_144c0 = add i32 %v0_144c0, -4
  %v11_144c0 = inttoptr i32 %v10_144c0 to i32*
  %v12_144c0 = load i32, i32* %lr.global-to-local, align 4
  store i32 %v12_144c0, i32* %v11_144c0, align 4
  store i32 %v1_144c0, i32* %r0.global-to-local, align 4
  %v0_144c4 = load i32, i32* %r2.global-to-local, align 4
  %v2_144c4 = add i32 %v0_144c4, -16
  store i32 %v2_144c4, i32* %r2.global-to-local, align 4
  %v6_144c8 = icmp slt i32 %v0_144c4, 16
  br i1 %v6_144c8, label %dec_label_pc_144cc, label %dec_label_pc_1449c.dec_label_pc_1449c_crit_edge

dec_label_pc_1449c.dec_label_pc_1449c_crit_edge:  ; preds = %dec_label_pc_1449c
  %v0_1449c.pre = load i32, i32* %r3.global-to-local, align 4
  %v0_144a0.pre = load i32, i32* %r1.global-to-local, align 4
  br label %dec_label_pc_1449c

dec_label_pc_144cc:                               ; preds = %dec_label_pc_1449c
  %v2_144cc = load i32, i32* %stack_var_-12, align 4
  store i32 %v2_144cc, i32* @r4, align 4
  %v5_144cc = load i32, i32* %stack_var_-8, align 4
  store i32 %v5_144cc, i32* @r5, align 4
  store i32 %v9_14498, i32* @lr, align 4
  %v2_144d0 = add i32 %v0_144c4, -4
  store i32 %v2_144d0, i32* %r2.global-to-local, align 4
  %v4_144d0 = add i32 %v0_144c4, 2147483632
  %v5_144d0 = and i32 %v2_144d0, %v4_144d0
  %v6_144d0 = icmp slt i32 %v5_144d0, 0
  store i1 %v6_144d0, i1* %cpsr_v.global-to-local, align 1
  %v7_144d0 = icmp slt i32 %v2_144d0, 0
  store i1 %v7_144d0, i1* %cpsr_n.global-to-local, align 1
  %v8_144d0 = icmp eq i32 %v2_144d0, 0
  store i1 %v8_144d0, i1* %cpsr_z.global-to-local, align 1
  %v5_144d4 = icmp slt i32 %v2_144c4, -12
  br i1 %v5_144d4, label %dec_label_pc_144f0, label %dec_label_pc_144d8

dec_label_pc_144d8:                               ; preds = %dec_label_pc_144cc, %dec_label_pc_1448c, %dec_label_pc_144d8
  %v1_144e4 = phi i32 [ %v5_144e4, %dec_label_pc_144d8 ], [ %v1_144c0, %dec_label_pc_144cc ], [ %v0_143e830, %dec_label_pc_1448c ]
  %v0_144d8 = load i32, i32* %r3.global-to-local, align 4
  %v3_144d8 = mul i32 %v0_144d8, 16777216
  store i32 %v3_144d8, i32* %ip.global-to-local, align 4
  %v0_144dc = load i32, i32* %r1.global-to-local, align 4
  %v1_144dc = add i32 %v0_144dc, -4
  %v2_144dc = inttoptr i32 %v1_144dc to i32*
  %v3_144dc = load i32, i32* %v2_144dc, align 4
  store i32 %v3_144dc, i32* %r3.global-to-local, align 4
  store i32 %v1_144dc, i32* %r1.global-to-local, align 4
  %v4_144e0 = udiv i32 %v3_144dc, 256
  %v5_144e0 = or i32 %v4_144e0, %v3_144d8
  store i32 %v5_144e0, i32* @ip, align 4
  %v2_144e4 = add i32 %v1_144e4, -4
  %v3_144e4 = inttoptr i32 %v2_144e4 to i32*
  store i32 %v5_144e0, i32* %v3_144e4, align 4
  %v4_144e4 = load i32, i32* %r0.global-to-local, align 4
  %v5_144e4 = add i32 %v4_144e4, -4
  store i32 %v5_144e4, i32* %r0.global-to-local, align 4
  %v0_144e8 = load i32, i32* %r2.global-to-local, align 4
  %v2_144e8 = add i32 %v0_144e8, -4
  store i32 %v2_144e8, i32* %r2.global-to-local, align 4
  %v6_144ec = icmp slt i32 %v0_144e8, 4
  br i1 %v6_144ec, label %dec_label_pc_144f0.loopexit, label %dec_label_pc_144d8

dec_label_pc_144f0.loopexit:                      ; preds = %dec_label_pc_144d8
  %v4_144e8 = sub i32 3, %v0_144e8
  %v5_144e8 = and i32 %v4_144e8, %v0_144e8
  %v6_144e8 = icmp slt i32 %v5_144e8, 0
  %v7_144e8 = icmp slt i32 %v2_144e8, 0
  store i1 %v6_144e8, i1* %cpsr_v.global-to-local, align 1
  store i1 %v7_144e8, i1* %cpsr_n.global-to-local, align 1
  store i1 false, i1* %cpsr_z.global-to-local, align 1
  br label %dec_label_pc_144f0

dec_label_pc_144f0:                               ; preds = %dec_label_pc_144f0.loopexit, %dec_label_pc_144cc
  %v2_1435c64 = phi i32 [ %v5_144e4, %dec_label_pc_144f0.loopexit ], [ %v1_144c0, %dec_label_pc_144cc ]
  %v0_1434c60 = phi i32 [ %v2_144e8, %dec_label_pc_144f0.loopexit ], [ %v2_144d0, %dec_label_pc_144cc ]
  %v0_144f0 = load i32, i32* %r1.global-to-local, align 4
  %v1_144f0 = add i32 %v0_144f0, 1
  store i32 %v1_144f0, i32* %r1.global-to-local, align 4
  br label %bb141

; uselistorder directives
  uselistorder i32 %v5_144e4, { 0, 2, 1 }
  uselistorder i32 %v3_144d8, { 1, 0 }
  uselistorder i32 %v2_144d0, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_144c0, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_144a0, { 1, 0 }
  uselistorder i32 %v3_1449c, { 1, 0 }
  uselistorder i32 %v0_144a0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_144c0, { 3, 2, 1, 0 }
  uselistorder i32 %v5_14478, { 0, 2, 1 }
  uselistorder i32 %v3_1446c, { 1, 0 }
  uselistorder i32 %v2_14464, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_14454, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_14434, { 1, 0 }
  uselistorder i32 %v3_14430, { 1, 0 }
  uselistorder i32 %v0_14434, { 3, 2, 1, 0 }
  uselistorder i32 %v0_14454, { 3, 2, 1, 0 }
  uselistorder i32 %v5_1440c, { 0, 2, 1 }
  uselistorder i32 %v3_14400, { 1, 0 }
  uselistorder i32 %v2_143f8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v1_143e8, { 1, 0, 4, 3, 2 }
  uselistorder i32 %v10_143c8, { 1, 0 }
  uselistorder i32 %v3_143c4, { 1, 0 }
  uselistorder i32 %v0_143c8, { 3, 2, 1, 0 }
  uselistorder i32 %v0_143e8, { 3, 2, 1, 0 }
  uselistorder i1 %v5_14490, { 2, 0, 1 }
  uselistorder i32 %v0_143a8, { 1, 0 }
  uselistorder i32 %v0_14494, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_143e830, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_14398, { 2, 1, 0 }
  uselistorder i32 %v0_14398, { 2, 0, 1 }
  uselistorder i32 %v2_14390, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14390, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14390, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_143e831, { 2, 1, 0 }
  uselistorder i32 %v11_1436c, { 1, 0 }
  uselistorder i32 %v7_1436c, { 1, 0 }
  uselistorder i32 %v1_1434c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1434c, { 1, 2, 0, 3 }
  uselistorder i32 %v2_14350, { 1, 0 }
  uselistorder i32 %v7_14344, { 0, 2, 1 }
  uselistorder i32 %v10_14340, { 1, 0 }
  uselistorder i32 %v9_14338, { 1, 0, 2 }
  uselistorder i32 %v6_14334, { 1, 0 }
  uselistorder i32 %v2_1432c, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_1432c, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_1433c, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14320, { 0, 2, 1 }
  uselistorder i32 %v13_1431c, { 1, 0 }
  uselistorder i32 %v4_14318, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v0_14318, { 2, 0, 1 }
  uselistorder i32 %v6_14320, { 0, 3, 2, 1 }
  uselistorder i32 %v7_14310, { 0, 2, 1 }
  uselistorder i32 %v16_1430c, { 1, 0 }
  uselistorder i32 %v4_14308, { 1, 2, 0 }
  uselistorder i32 %v0_14318.pr, { 1, 3, 0, 2 }
  uselistorder i32 %v6_14310, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_142fc, { 0, 3, 2, 1 }
  uselistorder i32 %v10_142f8, { 1, 0 }
  uselistorder i32 %v1_142f4, { 1, 0 }
  uselistorder i32 %v10_142f0, { 1, 0 }
  uselistorder i32 %v0_142f0, { 3, 2, 1, 0 }
  uselistorder i32 %v0_142f4, { 0, 1, 2, 3, 7, 6, 5, 4 }
  uselistorder i32 %v2_142e8, { 0, 2, 1 }
  uselistorder i32 %v2_142dc, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_142dc, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v0_142f448, { 1, 2, 0 }
  uselistorder i32 %v1_142d4, { 2, 1, 0 }
  uselistorder i32 %v1_142cc, { 2, 3, 1, 0 }
  uselistorder i32 %v2_142c4, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v2_142c0, { 3, 4, 1, 2, 0, 5 }
  uselistorder i32 %v2_142bc, { 2, 3, 1, 0, 4 }
  uselistorder i32 %v1_142bc, { 3, 4, 0, 6, 5, 1, 2 }
  uselistorder i32 %v4_142a8, { 0, 2, 1 }
  uselistorder i32 %v3_1429c, { 1, 0 }
  uselistorder i32 %v2_14294, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14284, { 1, 0, 3, 2 }
  uselistorder i32 %v8_14264, { 1, 0, 2 }
  uselistorder i32 %v5_14264, { 1, 0, 2 }
  uselistorder i32 %v2_14264, { 1, 0, 2 }
  uselistorder i32 %v3_14260, { 1, 0 }
  uselistorder i32 %v0_14264, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14284, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_1423c, { 0, 2, 1 }
  uselistorder i32 %v3_14230, { 1, 0 }
  uselistorder i32 %v2_14228, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_14218, { 1, 0, 3, 2 }
  uselistorder i32 %v8_141f8, { 1, 0, 2 }
  uselistorder i32 %v5_141f8, { 1, 0, 2 }
  uselistorder i32 %v2_141f8, { 1, 0, 2 }
  uselistorder i32 %v3_141f4, { 1, 0 }
  uselistorder i32 %v0_141f8, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_14218, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v4_141d0, { 0, 2, 1 }
  uselistorder i32 %v3_141c4, { 1, 0 }
  uselistorder i32 %v2_141bc, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v12_141ac, { 1, 0, 3, 2 }
  uselistorder i32 %v8_1418c, { 1, 0, 2 }
  uselistorder i32 %v5_1418c, { 1, 0, 2 }
  uselistorder i32 %v2_1418c, { 1, 0, 2 }
  uselistorder i32 %v3_14188, { 1, 0 }
  uselistorder i32 %v0_1418c, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_141ac, { 4, 3, 2, 1, 0 }
  uselistorder i1 %v5_14254, { 2, 0, 1 }
  uselistorder i32 %v0_14258, { 4, 1, 0, 3, 2 }
  uselistorder i32 %v0_141ac74, { 0, 3, 1, 4, 2, 5 }
  uselistorder i32 %v1_1415c, { 1, 0 }
  uselistorder i32 %v0_1415c, { 3, 1, 0, 2 }
  uselistorder i32 %v2_14154, { 3, 4, 0, 5, 2, 1 }
  uselistorder i32 %v1_14154, { 1, 2, 0, 3 }
  uselistorder i32 %v0_14154, { 2, 3, 0, 1, 4 }
  uselistorder i32 %v0_141ac75, { 2, 1, 0 }
  uselistorder i32 %v1_14134, { 1, 0, 2 }
  uselistorder i32 %v1_1410c, { 0, 1, 3, 4, 2, 5 }
  uselistorder i32 %v0_1410c, { 1, 2, 0, 3 }
  uselistorder i32 %v8_140f8, { 1, 0, 2 }
  uselistorder i32 %v6_140f4, { 1, 0 }
  uselistorder i32 %v2_140ec, { 0, 2, 1, 3, 5, 6, 4, 7 }
  uselistorder i32 %v0_140ec, { 1, 2, 4, 0, 3 }
  uselistorder i32 %v7_140fc, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v4_140e4, { 0, 2, 1 }
  uselistorder i32 %v3_140e4, { 3, 0, 1, 2 }
  uselistorder i1 %v0_140e4, { 1, 0 }
  uselistorder i1 %v1_140e4, { 1, 0 }
  uselistorder i32 %v3_140e0, { 0, 4, 3, 2, 1 }
  uselistorder i32 %v1_140d8, { 0, 2, 3, 1, 4 }
  uselistorder i32 %v4_140c4, { 1, 2, 0 }
  uselistorder i32 %v12_140b8, { 0, 1, 3, 2 }
  uselistorder i32 %v0_140ac, { 4, 3, 2, 1, 0 }
  uselistorder i32 %v0_140b0, { 0, 1, 2, 3, 4, 5, 6, 7, 12, 11, 10, 9, 8 }
  uselistorder i32 %v2_140a0, { 0, 2, 1 }
  uselistorder i32 %v2_14098, { 0, 2, 1, 3, 5, 4 }
  uselistorder i32 %v0_14098, { 1, 2, 6, 3, 0, 5, 4 }
  uselistorder i32 %v1_14090, { 1, 0 }
  uselistorder i32 %v1_14088, { 2, 1, 0 }
  uselistorder i32 %v2_14080, { 2, 0, 1, 4, 3 }
  uselistorder i32 %v0_14080, { 1, 4, 0, 2, 3 }
  uselistorder i32 %v2_14070, { 1, 0 }
  uselistorder i32 %v1_14070, { 1, 5, 6, 3, 4, 0, 7, 9, 2, 8, 10 }
  uselistorder i32 %v0_14070, { 1, 7, 9, 8, 6, 4, 0, 5, 11, 2, 3, 10, 12 }
  uselistorder i32* %r5.global-to-local, { 0, 1, 2, 3, 4, 5, 15, 16, 17, 6, 7, 8, 9, 10, 11, 12, 13, 14 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 2, 3, 25, 26, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 }
  uselistorder i32* %r3.global-to-local, { 0, 37, 1, 2, 3, 38, 4, 5, 6, 39, 35, 36, 40, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34 }
  uselistorder i32* %r2.global-to-local, { 0, 27, 1, 2, 3, 4, 5, 28, 6, 7, 8, 9, 10, 67, 68, 69, 70, 71, 11, 29, 12, 13, 15, 14, 16, 17, 18, 19, 20, 21, 23, 22, 24, 25, 26, 30, 31, 62, 32, 33, 34, 35, 36, 63, 37, 38, 39, 40, 41, 64, 42, 43, 44, 45, 46, 65, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66 }
  uselistorder i32* %r1.global-to-local, { 1, 3, 0, 12, 2, 4, 6, 8, 5, 13, 7, 9, 11, 65, 10, 64, 63, 66, 14, 19, 15, 16, 17, 18, 20, 21, 23, 22, 24, 25, 34, 26, 27, 35, 28, 36, 29, 37, 30, 31, 32, 33, 38, 41, 39, 51, 40, 42, 45, 43, 52, 44, 46, 48, 47, 53, 49, 50, 54, 55, 56, 58, 57, 59, 60, 61, 62 }
  uselistorder i32* %r0.global-to-local, { 0, 21, 1, 2, 22, 3, 4, 34, 36, 5, 6, 7, 8, 9, 23, 10, 12, 11, 13, 14, 35, 15, 16, 24, 17, 18, 19, 20, 25, 26, 27, 29, 28, 30, 31, 32, 33 }
  uselistorder i32* %lr.global-to-local, { 0, 1, 2, 3, 4, 5, 16, 17, 18, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 }
  uselistorder i1* %cpsr_z.global-to-local, { 4, 7, 5, 9, 6, 45, 8, 46, 10, 11, 12, 13, 14, 15, 16, 17, 18, 3, 19, 20, 21, 22, 23, 0, 24, 1, 26, 2, 27, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44 }
  uselistorder i1* %cpsr_v.global-to-local, { 4, 7, 5, 9, 6, 42, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 0, 23, 1, 25, 2, 26, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41 }
  uselistorder i1* %cpsr_n.global-to-local, { 4, 7, 5, 9, 6, 47, 8, 48, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 3, 20, 21, 22, 23, 24, 0, 25, 1, 27, 2, 28, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46 }
  uselistorder i32 31, { 23, 24, 1, 0, 10, 12, 11, 13, 2, 16, 26, 15, 25, 17, 27, 18, 28, 19, 29, 20, 14, 30, 31, 21, 6, 22, 7, 3, 8, 4, 5, 9 }
  uselistorder i32 -20, { 1, 0 }
  uselistorder i32 -2, { 12, 13, 11, 17, 0, 15, 1, 16, 2, 3, 8, 10, 9, 7, 6, 5, 4, 18, 19, 20, 21, 14 }
  uselistorder i32 65536, { 10, 9, 15, 11, 16, 12, 17, 13, 18, 14, 19, 20, 21, 25, 22, 26, 23, 27, 24, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 62, 65, 64, 66, 1, 67, 68, 2, 69, 0, 3, 70, 71, 72, 73, 74, 77, 75, 76, 78, 79, 80, 84, 85, 86, 87, 81, 82, 83, 88, 91, 92, 93, 89, 90, 94, 95, 96, 98, 97, 99, 4, 100, 102, 103, 101, 104, 105, 5, 106, 109, 110, 107, 111, 108, 112, 113, 114, 115, 116, 154, 118, 117, 155, 120, 119, 121, 123, 122, 125, 124, 156, 127, 126, 157, 129, 128, 130, 132, 131, 134, 133, 6, 135, 137, 138, 136, 139, 140, 7, 141, 143, 144, 145, 142, 146, 8, 147, 151, 152, 153, 148, 149, 150 }
  uselistorder i32 2147483632, { 3, 4, 5, 0, 1, 2, 6 }
  uselistorder i32 16777216, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 42, 44, 45, 47, 46, 49, 48, 53, 50, 52, 51, 54, 56, 55, 58, 57, 60, 59, 62, 61, 63, 64, 71, 65, 72, 66, 73, 67, 74, 75, 68, 76, 69, 77, 70, 79, 78, 83, 80, 84, 81, 85, 82, 89, 86, 90, 87, 91, 88, 92, 93, 94, 99, 95, 100, 96, 101, 97, 102, 98, 103, 104, 105, 106, 107, 108, 110, 109, 112, 111, 113, 114, 116, 115, 121, 117, 122, 118, 123, 119, 124, 120, 126, 125, 127, 130, 131, 128, 129, 132, 133, 134, 137, 135, 138, 136, 139, 142, 143, 140, 141, 144, 145, 146, 149, 147, 150, 148, 151, 152, 153, 154, 161, 155, 162, 163, 156, 164, 159, 165, 157, 166, 167, 158, 160, 168, 169, 173, 170, 174, 175, 171, 172, 176, 177, 178, 180, 179, 181 }
  uselistorder i32* @r5, { 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 194, 195, 196, 198, 625, 626, 627, 628, 629, 0, 630, 631, 235, 236, 237, 238, 239, 240, 512, 513, 514, 515, 516, 517, 518, 525, 519, 520, 521, 522, 523, 524, 561, 562, 563, 570, 571, 572, 573, 564, 565, 566, 567, 568, 569, 29, 30, 31, 199, 200, 3, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 104, 105, 21, 20, 22, 23, 24, 25, 26, 106, 107, 27, 28, 108, 109, 110, 111, 112, 113, 122, 123, 124, 114, 115, 116, 117, 118, 119, 120, 121, 4, 146, 147, 148, 149, 150, 151, 152, 244, 245, 246, 247, 248, 249, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 1, 145, 153, 154, 155, 156, 157, 158, 159, 160, 5, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 2, 184, 212, 213, 214, 215, 216, 8, 217, 218, 219, 220, 221, 222, 223, 224, 9, 225, 226, 227, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 6, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 7, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243 }
  uselistorder i32 -3, { 1, 2, 0, 3, 4, 5 }
  uselistorder i32 -5, { 1, 0 }
  uselistorder i32 11, { 9, 10, 11, 23, 24, 15, 1, 12, 2, 13, 3, 14, 16, 17, 18, 4, 19, 20, 0, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 5, 35, 36, 37, 6, 38, 39, 40, 7, 41, 42, 43, 8, 44, 45, 46, 47, 48, 49, 50, 51, 52 }
  uselistorder i32 -12, { 0, 12, 13, 1, 15, 16, 2, 17, 18, 14, 11, 10, 9, 8, 7, 19, 20, 21, 3, 4, 5, 22, 6, 23, 24 }
  uselistorder i32 48, { 0, 5, 6, 3, 4, 1, 7, 2, 8 }
  uselistorder i32 40, { 1, 7, 2, 0, 4, 5, 6, 8, 3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
  uselistorder i32 36, { 1, 9, 10, 7, 8, 0, 2, 3, 4, 5, 6 }
  uselistorder i32 -16, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 5, 4, 1, 16, 17, 18, 19, 20, 21, 3, 2, 0 }
  uselistorder i32 -32, { 1, 0, 2, 3 }
  uselistorder i32 24, { 0, 73, 74, 38, 39, 1, 75, 76, 36, 37, 16, 15, 67, 46, 68, 47, 55, 59, 40, 41, 42, 43, 44, 45, 62, 48, 49, 50, 51, 52, 53, 54, 56, 57, 63, 58, 64, 60, 61, 69, 70, 71, 65, 66, 72, 17, 18, 19, 20, 2, 79, 21, 3, 80, 22, 23, 4, 81, 24, 82, 25, 5, 26, 27, 6, 28, 7, 8, 9, 10, 11, 12, 83, 29, 13, 84, 30, 85, 86, 87, 31, 32, 14, 88, 33, 89, 34, 77, 35, 78 }
  uselistorder i32* @lr, { 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 1, 116, 117, 118, 2, 119, 120, 121, 3, 122, 123, 124, 125, 126, 127, 128, 129, 33, 34, 130, 131, 132, 133, 134, 85, 86, 87, 88, 89, 90, 91, 92, 35, 36, 37, 38, 39, 7, 93, 5, 6, 94, 46, 47, 95, 57, 58, 59, 60, 61, 48, 49, 50, 51, 52, 8, 9, 12, 13, 4, 0, 16, 14, 15, 10, 11, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 96, 97, 98, 99, 100, 101, 17, 18, 19, 20, 40, 41, 53, 54, 55, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 102, 103, 104, 105, 42, 43, 44, 45 }
  uselistorder i32 16, { 31, 32, 33, 200, 34, 201, 202, 35, 203, 204, 36, 205, 206, 207, 208, 209, 210, 113, 114, 91, 92, 118, 115, 116, 117, 119, 26, 120, 121, 5, 6, 7, 8, 9, 25, 10, 11, 0, 12, 13, 52, 95, 37, 96, 38, 53, 93, 94, 97, 99, 100, 101, 27, 90, 14, 15, 24, 87, 16, 102, 17, 54, 98, 55, 105, 106, 41, 40, 39, 103, 42, 104, 43, 56, 57, 58, 59, 60, 61, 62, 63, 107, 64, 108, 65, 109, 66, 110, 67, 111, 68, 112, 70, 71, 72, 73, 69, 74, 28, 123, 124, 125, 126, 75, 127, 128, 129, 130, 131, 132, 133, 76, 134, 135, 136, 45, 137, 44, 138, 139, 78, 140, 141, 142, 143, 144, 1, 77, 145, 146, 147, 80, 148, 149, 150, 151, 152, 2, 79, 153, 81, 154, 155, 156, 18, 157, 19, 158, 88, 20, 82, 83, 159, 160, 3, 47, 161, 46, 162, 84, 163, 164, 165, 21, 166, 22, 167, 89, 23, 85, 86, 168, 169, 4, 49, 170, 48, 171, 51, 172, 50, 173, 174, 175, 176, 177, 29, 178, 179, 180, 181, 183, 182, 184, 185, 186, 187, 188, 189, 190, 30, 191, 192, 193, 194, 195, 197, 196, 198, 199, 122 }
  uselistorder i32 20, { 110, 3, 111, 112, 0, 4, 113, 32, 33, 23, 24, 1, 34, 35, 36, 37, 25, 27, 5, 28, 6, 29, 22, 26, 30, 31, 16, 17, 18, 19, 39, 40, 7, 41, 42, 43, 44, 45, 46, 47, 8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 9, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 10, 67, 68, 69, 70, 71, 72, 73, 74, 11, 75, 76, 77, 2, 78, 79, 80, 81, 20, 82, 83, 84, 85, 86, 87, 88, 89, 90, 21, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 13, 101, 12, 102, 103, 104, 105, 15, 106, 14, 107, 108, 109, 38 }
  uselistorder i32 27, { 1, 0, 8, 3, 2, 7, 9, 4, 10, 5, 11, 6, 12 }
  uselistorder i32 -28, { 1, 2, 0 }
  uselistorder i32 7, { 20, 21, 22, 55, 62, 14, 27, 2, 18, 23, 15, 24, 16, 25, 17, 26, 0, 19, 28, 29, 30, 31, 32, 3, 33, 34, 35, 36, 4, 37, 38, 39, 40, 5, 41, 6, 42, 7, 43, 44, 8, 45, 46, 9, 47, 48, 10, 49, 11, 50, 51, 52, 53, 12, 54, 57, 58, 59, 60, 13, 61, 1, 56 }
  uselistorder i32 -8, { 16, 17, 18, 19, 20, 21, 15, 14, 7, 13, 12, 11, 10, 22, 23, 24, 25, 8, 26, 0, 29, 9, 27, 28, 6, 1, 3, 2, 4, 5 }
  uselistorder i32* @ip, { 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 3, 4, 49, 1, 2, 0, 5, 6 }
  uselistorder i1 false, { 25, 26, 27, 35, 19, 24, 36, 37, 21, 22, 23, 38, 18, 39, 40, 0, 30, 29, 31, 28, 1, 3, 2, 16, 17, 4, 33, 15, 20, 34, 7, 6, 5, 8, 9, 10, 32, 14, 11, 12, 13, 41 }
  uselistorder i32 4, { 73, 64, 65, 6, 415, 66, 416, 54, 7, 8, 67, 417, 68, 418, 419, 420, 421, 69, 422, 423, 424, 425, 70, 426, 427, 428, 429, 430, 9, 431, 432, 433, 434, 435, 71, 436, 53, 437, 438, 439, 440, 441, 442, 10, 11, 72, 443, 251, 252, 182, 183, 253, 254, 255, 444, 445, 446, 447, 448, 126, 127, 128, 55, 129, 130, 388, 390, 389, 386, 387, 356, 357, 358, 359, 391, 392, 393, 394, 360, 361, 362, 395, 396, 131, 132, 133, 134, 135, 45, 12, 13, 256, 257, 258, 259, 260, 261, 14, 15, 60, 16, 17, 61, 397, 398, 180, 18, 19, 92, 74, 279, 269, 56, 190, 93, 191, 95, 192, 96, 193, 136, 194, 213, 214, 215, 207, 208, 52, 51, 216, 195, 196, 184, 185, 186, 187, 188, 189, 197, 198, 97, 199, 200, 201, 202, 203, 204, 205, 206, 94, 210, 211, 212, 209, 62, 217, 75, 98, 99, 20, 218, 21, 219, 220, 22, 221, 23, 222, 223, 47, 224, 46, 229, 100, 231, 101, 232, 102, 233, 234, 230, 225, 103, 226, 227, 228, 242, 137, 244, 24, 245, 246, 243, 25, 247, 48, 104, 248, 249, 399, 235, 59, 58, 57, 236, 105, 26, 27, 28, 29, 30, 31, 237, 49, 238, 50, 239, 240, 241, 138, 250, 0, 106, 32, 270, 271, 139, 272, 273, 274, 140, 141, 108, 275, 107, 277, 76, 278, 280, 142, 281, 282, 143, 144, 283, 77, 284, 78, 285, 286, 145, 146, 287, 147, 288, 289, 148, 149, 109, 290, 79, 291, 80, 292, 293, 294, 295, 296, 110, 297, 81, 298, 299, 300, 150, 301, 302, 303, 304, 151, 152, 2, 305, 111, 306, 82, 307, 308, 309, 153, 310, 311, 154, 155, 3, 112, 312, 83, 314, 84, 315, 316, 156, 317, 318, 319, 320, 321, 157, 158, 322, 323, 114, 324, 4, 113, 325, 85, 326, 115, 327, 328, 159, 329, 330, 331, 332, 333, 160, 161, 334, 335, 117, 336, 5, 116, 337, 86, 338, 118, 339, 340, 341, 342, 343, 119, 344, 87, 345, 346, 347, 348, 349, 162, 350, 351, 352, 163, 164, 121, 353, 120, 88, 354, 89, 355, 400, 401, 402, 403, 404, 123, 405, 124, 406, 165, 407, 408, 409, 166, 167, 125, 410, 122, 411, 90, 412, 91, 414, 168, 363, 364, 33, 169, 365, 366, 34, 170, 367, 368, 35, 171, 369, 370, 36, 172, 371, 372, 37, 173, 63, 373, 374, 38, 375, 174, 376, 377, 39, 175, 378, 379, 40, 176, 380, 381, 41, 177, 382, 383, 42, 178, 384, 385, 43, 413, 313, 262, 263, 264, 44, 265, 266, 1, 267, 179, 268, 276, 181 }
  uselistorder i32* @r2, { 68, 69, 30, 9, 31, 33, 32, 34, 35, 36, 37, 7, 70, 1, 71, 76, 77, 80, 72, 59, 63, 64, 67, 65, 66, 60, 61, 62, 58, 14, 0, 78, 2, 79, 5, 38, 39, 40, 8, 10, 73, 74, 75, 3, 41, 42, 43, 6, 26, 27, 28, 4, 44, 48, 51, 52, 49, 50, 53, 15, 11, 12, 13, 18, 19, 16, 17, 22, 23, 20, 21, 24, 25, 29, 45, 46, 47, 54, 55, 56, 57 }
  uselistorder label %dec_label_pc_144d8, { 2, 0, 1 }
  uselistorder label %dec_label_pc_1446c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14400, { 2, 0, 1 }
  uselistorder label %dec_label_pc_143a0, { 1, 0 }
  uselistorder label %.thread25, { 2, 0, 1 }
  uselistorder label %.thread121, { 1, 0 }
  uselistorder label %bb141, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %dec_label_pc_1432c, { 1, 0 }
  uselistorder label %.thread15, { 1, 0 }
  uselistorder label %.thread13, { 1, 0 }
  uselistorder label %dec_label_pc_142f0, { 1, 0 }
  uselistorder label %dec_label_pc_142dc, { 1, 0 }
  uselistorder label %dec_label_pc_1429c, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14230, { 2, 0, 1 }
  uselistorder label %dec_label_pc_141c4, { 2, 0, 1 }
  uselistorder label %dec_label_pc_14164, { 1, 0 }
  uselistorder label %.thread11, { 2, 0, 1 }
  uselistorder label %.thread120, { 1, 0 }
  uselistorder label %.thread119, { 1, 0 }
  uselistorder label %bb131, { 4, 5, 6, 1, 7, 0, 2, 3 }
  uselistorder label %.thread117, { 1, 0 }
  uselistorder label %dec_label_pc_140d8, { 1, 0 }
  uselistorder label %.thread1, { 1, 0 }
  uselistorder label %dec_label_pc_14098, { 1, 0 }
}

define i32 @function_144f8(i32 %arg1) local_unnamed_addr {
dec_label_pc_144f8:
  ret i32 %arg1
}

define i32 @function_14500() local_unnamed_addr {
dec_label_pc_14500:
  %r0.global-to-local = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %v0_14500 = load i32, i32* @r0, align 4
  %v2_14500 = icmp eq i32 %v0_14500, 0
  %v3_14504 = load i32, i32* @r4, align 4
  store i32 %v3_14504, i32* %stack_var_-20, align 4
  %v0_14508 = load i32, i32* @r1, align 4
  br i1 %v2_14500, label %dec_label_pc_145e0, label %dec_label_pc_1451c.lr.ph

dec_label_pc_1451c:                               ; preds = %dec_label_pc_1451c.lr.ph, %dec_label_pc_145a0
  %v1_145a0 = phi i32 [ 0, %dec_label_pc_1451c.lr.ph ], [ %v5_145a0, %dec_label_pc_145a0 ]
  %v0_145a4 = phi i32 [ 1, %dec_label_pc_1451c.lr.ph ], [ %v1_145a4, %dec_label_pc_145a0 ]
  %v0_14524 = phi i32 [ %v0_14500, %dec_label_pc_1451c.lr.ph ], [ %v0_1452425, %dec_label_pc_145a0 ]
  %v1_14524 = inttoptr i32 %v0_14524 to i8*
  %v2_14524 = load i8, i8* %v1_14524, align 1
  %v3_14524 = zext i8 %v2_14524 to i32
  %v3_14528 = mul nuw nsw i32 %v3_14524, 2
  %v4_14528 = add i32 %v3_14528, %v2_14520.pre
  %v5_14528 = inttoptr i32 %v4_14528 to i8*
  %v6_14528 = load i8, i8* %v5_14528, align 1
  %v1_1452c = and i8 %v6_14528, 8
  %v2_1452c = icmp eq i8 %v1_1452c, 0
  br i1 %v2_1452c, label %dec_label_pc_145e0, label %dec_label_pc_14534

dec_label_pc_14534:                               ; preds = %dec_label_pc_1451c
  br label %dec_label_pc_14554

dec_label_pc_1453c:                               ; preds = %dec_label_pc_14554
  %v3_14540 = mul i32 %v0_145a0, 10
  %v4_14540 = add i32 %v3_14554, %v3_14540
  %v1_14544 = add i32 %v4_14540, -48
  %v8_1454c = icmp sgt i32 %v1_14544, 255
  br i1 %v8_1454c, label %dec_label_pc_145e0, label %dec_label_pc_14550

dec_label_pc_14550:                               ; preds = %dec_label_pc_1453c
  %v1_14550 = add i32 %v0_14590, 1
  store i32 %v1_14550, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_14554

dec_label_pc_14554:                               ; preds = %dec_label_pc_14534, %dec_label_pc_14550
  %v0_145a0 = phi i32 [ 0, %dec_label_pc_14534 ], [ %v1_14544, %dec_label_pc_14550 ]
  %v0_14590 = phi i32 [ %v0_14524, %dec_label_pc_14534 ], [ %v1_14550, %dec_label_pc_14550 ]
  %v1_14554 = inttoptr i32 %v0_14590 to i8*
  %v2_14554 = load i8, i8* %v1_14554, align 1
  %v3_14554 = zext i8 %v2_14554 to i32
  %v2_14558 = mul nuw nsw i32 %v3_14554, 2
  %v2_1455c = add i32 %v2_14558, %v2_14520.pre
  %v3_14560 = inttoptr i32 %v2_1455c to i8*
  %v4_14560 = load i8, i8* %v3_14560, align 1
  %v6_14560 = zext i8 %v4_14560 to i32
  %v1_1456c = and i32 %v6_14560, 8
  %v2_1456c = icmp eq i32 %v1_1456c, 0
  br i1 %v2_1456c, label %dec_label_pc_14574, label %dec_label_pc_1453c

dec_label_pc_14574:                               ; preds = %dec_label_pc_14554
  %v8_14578 = icmp sgt i32 %v0_145a4, 3
  br i1 %v8_14578, label %dec_label_pc_1458c, label %dec_label_pc_1457c

dec_label_pc_1457c:                               ; preds = %dec_label_pc_14574
  %v7_1457c = icmp eq i8 %v2_14554, 46
  br i1 %v7_1457c, label %dec_label_pc_14584, label %dec_label_pc_145e0

dec_label_pc_14584:                               ; preds = %dec_label_pc_1457c
  %v1_14584 = add i32 %v0_14590, 1
  store i32 %v1_14584, i32* %r0.global-to-local, align 4
  br label %dec_label_pc_145a0

dec_label_pc_1458c:                               ; preds = %dec_label_pc_14574
  %v2_1458c = icmp eq i8 %v2_14554, 0
  %v1_14590 = add i32 %v0_14590, 1
  store i32 %v1_14590, i32* %r0.global-to-local, align 4
  br i1 %v2_1458c, label %dec_label_pc_145a0, label %dec_label_pc_14598

dec_label_pc_14598:                               ; preds = %dec_label_pc_1458c
  %v1_14598 = and i32 %v6_14560, 32
  %v2_14598 = icmp eq i32 %v1_14598, 0
  br i1 %v2_14598, label %dec_label_pc_145e0, label %dec_label_pc_145a0

dec_label_pc_145a0:                               ; preds = %dec_label_pc_14598, %dec_label_pc_1458c, %dec_label_pc_14584
  %v0_1452425 = phi i32 [ %v1_14590, %dec_label_pc_14598 ], [ %v1_14590, %dec_label_pc_1458c ], [ %v1_14584, %dec_label_pc_14584 ]
  %v4_145a0 = mul i32 %v1_145a0, 256
  %v5_145a0 = or i32 %v0_145a0, %v4_145a0
  %v1_145a4 = add nuw nsw i32 %v0_145a4, 1
  %v7_145ac = icmp slt i32 %v1_145a4, 5
  br i1 %v7_145ac, label %dec_label_pc_1451c, label %dec_label_pc_145b0

dec_label_pc_1451c.lr.ph:                         ; preds = %dec_label_pc_14500
  %v2_14520.pre = load i32, i32* bitcast (i32** @global_var_1d174.445 to i32*), align 4
  br label %dec_label_pc_1451c

dec_label_pc_145b0:                               ; preds = %dec_label_pc_145a0
  %v2_145b0 = icmp eq i32 %v0_14508, 0
  br i1 %v2_145b0, label %bb, label %bb40

bb:                                               ; preds = %dec_label_pc_145b0
  store i32 1, i32* %r0.global-to-local, align 4
  br label %.thread11

bb40:                                             ; preds = %dec_label_pc_145b0
  %v3_145cc = call i32 @llvm.bswap.i32(i32 %v5_145a0)
  store i32 1, i32* %r0.global-to-local, align 4
  %v3_145d8 = inttoptr i32 %v0_14508 to i32*
  store i32 %v3_145cc, i32* %v3_145d8, align 4
  %v2_145dc.pre = load i32, i32* %stack_var_-20, align 4
  %v17_145dc.pre = load i32, i32* %r0.global-to-local, align 4
  br label %.thread11

.thread11:                                        ; preds = %bb, %bb40
  %v17_145dc = phi i32 [ 1, %bb ], [ %v17_145dc.pre, %bb40 ]
  %v2_145dc = phi i32 [ %v3_14504, %bb ], [ %v2_145dc.pre, %bb40 ]
  store i32 %v2_145dc, i32* @r4, align 4
  ret i32 %v17_145dc

dec_label_pc_145e0:                               ; preds = %dec_label_pc_1457c, %dec_label_pc_14598, %dec_label_pc_1451c, %dec_label_pc_1453c, %dec_label_pc_14500
  store i32 0, i32* %r0.global-to-local, align 4
  store i32 %v3_14504, i32* @r4, align 4
  ret i32 0

; uselistorder directives
  uselistorder i32 %v2_14520.pre, { 1, 0 }
  uselistorder i32 %v1_145a4, { 1, 0 }
  uselistorder i32 %v0_14590, { 0, 1, 3, 2 }
  uselistorder i32 %v3_14504, { 1, 0, 2 }
  uselistorder i32* %r0.global-to-local, { 2, 0, 1, 3, 4, 5, 6 }
  uselistorder i32 5, { 17, 27, 18, 6, 19, 7, 3, 20, 28, 4, 1, 0, 29, 30, 31, 21, 22, 23, 24, 25, 26, 35, 36, 37, 38, 8, 39, 40, 41, 42, 9, 43, 44, 45, 46, 47, 48, 49, 50, 10, 51, 52, 53, 11, 54, 55, 56, 12, 57, 58, 59, 60, 13, 61, 62, 63, 64, 14, 65, 66, 67, 68, 69, 70, 71, 15, 72, 74, 75, 76, 77, 78, 79, 16, 80, 5, 73, 32, 2, 33, 34 }
  uselistorder i32 256, { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 63, 64, 68, 71, 72, 73, 69, 70, 74, 75, 76, 77, 78, 495, 496, 79, 80, 81, 82, 83, 84, 85, 498, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 98, 103, 102, 101, 104, 493, 499, 109, 105, 108, 106, 107, 497, 110, 111, 112, 113, 500, 114, 115, 116, 117, 118, 501, 119, 120, 121, 122, 123, 124, 125, 126, 128, 127, 129, 130, 131, 134, 133, 132, 135, 137, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 147, 149, 150, 151, 155, 161, 156, 152, 157, 162, 158, 163, 159, 153, 164, 154, 165, 166, 160, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 177, 180, 183, 184, 182, 181, 185, 188, 187, 186, 195, 192, 196, 193, 189, 197, 194, 190, 191, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 215, 217, 218, 219, 230, 225, 220, 231, 226, 232, 227, 233, 228, 221, 222, 223, 234, 235, 236, 237, 229, 224, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 262, 271, 267, 272, 268, 264, 265, 269, 266, 273, 274, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 290, 289, 297, 292, 303, 304, 298, 293, 305, 306, 299, 294, 307, 300, 308, 301, 309, 302, 310, 295, 311, 296, 312, 313, 314, 315, 316, 317, 318, 321, 322, 325, 323, 319, 326, 324, 320, 329, 328, 327, 332, 333, 330, 334, 331, 335, 339, 336, 341, 340, 337, 338, 342, 491, 502, 343, 344, 345, 346, 347, 350, 348, 349, 352, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 372, 370, 366, 373, 371, 367, 376, 375, 374, 379, 380, 377, 381, 378, 382, 386, 383, 388, 387, 384, 385, 389, 492, 503, 390, 391, 392, 393, 394, 397, 395, 396, 399, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 417, 419, 420, 421, 422, 424, 423, 425, 426, 428, 427, 429, 430, 431, 432, 435, 442, 436, 437, 433, 438, 439, 440, 434, 443, 441, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 456, 458, 459, 460, 464, 471, 465, 466, 472, 467, 461, 462, 468, 463, 469, 473, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 487, 486, 488, 489, 490, 494 }
  uselistorder i32 32, { 66, 41, 42, 39, 59, 60, 49, 50, 58, 5, 4, 7, 6, 9, 8, 40, 38, 61, 62, 44, 52, 43, 51, 45, 53, 46, 54, 47, 55, 11, 10, 13, 12, 15, 14, 17, 16, 48, 19, 18, 21, 20, 22, 24, 23, 26, 25, 27, 28, 30, 29, 56, 57, 63, 64, 31, 65, 32, 33, 34, 0, 35, 1, 2, 3, 36, 37 }
  uselistorder i8 46, { 0, 1, 3, 2 }
  uselistorder i32 3, { 40, 64, 65, 170, 66, 67, 68, 69, 70, 71, 75, 95, 171, 4, 157, 159, 160, 0, 72, 23, 73, 24, 161, 74, 41, 25, 45, 76, 27, 79, 44, 80, 46, 77, 47, 78, 2, 81, 82, 83, 84, 42, 5, 85, 86, 87, 88, 26, 89, 48, 90, 43, 91, 49, 92, 50, 93, 94, 28, 51, 52, 1, 96, 97, 53, 99, 100, 101, 102, 103, 104, 54, 105, 55, 106, 29, 107, 108, 109, 110, 111, 7, 6, 56, 30, 112, 113, 114, 115, 116, 117, 118, 9, 8, 57, 119, 31, 120, 121, 122, 123, 124, 125, 126, 127, 11, 10, 58, 128, 32, 129, 130, 131, 132, 133, 13, 12, 59, 134, 33, 135, 136, 137, 138, 60, 139, 15, 14, 35, 140, 34, 141, 142, 143, 144, 61, 145, 17, 16, 37, 146, 36, 147, 148, 149, 150, 151, 152, 153, 154, 19, 18, 62, 155, 38, 156, 162, 163, 164, 165, 166, 167, 21, 20, 63, 168, 39, 169, 22, 158, 3, 98 }
  uselistorder i32 8, { 90, 137, 23, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 24, 154, 65, 66, 67, 68, 72, 69, 70, 71, 155, 128, 127, 125, 126, 114, 115, 116, 129, 130, 131, 117, 118, 119, 7, 27, 28, 25, 26, 17, 18, 20, 21, 29, 156, 73, 74, 75, 76, 8, 9, 46, 19, 10, 11, 16, 12, 30, 52, 31, 13, 14, 15, 47, 39, 48, 36, 49, 37, 50, 38, 51, 22, 53, 54, 55, 56, 58, 40, 59, 41, 60, 61, 57, 62, 63, 42, 64, 80, 32, 81, 82, 83, 84, 85, 86, 87, 88, 89, 3, 91, 92, 93, 4, 94, 95, 96, 97, 98, 99, 100, 5, 101, 102, 103, 104, 105, 106, 107, 6, 108, 109, 110, 111, 112, 113, 132, 133, 134, 135, 136, 120, 33, 121, 34, 122, 35, 123, 43, 124, 0, 1, 45, 77, 78, 44, 79, 2 }
  uselistorder i32 255, { 2, 6, 7, 3, 8, 4, 9, 5, 10, 0, 1 }
  uselistorder i32 10, { 11, 45, 46, 0, 3, 4, 26, 27, 47, 1, 12, 8, 28, 35, 13, 31, 14, 32, 15, 33, 16, 34, 6, 36, 37, 29, 17, 38, 30, 39, 18, 40, 41, 42, 19, 5, 20, 21, 43, 22, 44, 9, 49, 50, 2, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 23, 61, 62, 63, 24, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 7, 69, 10, 75, 48, 25 }
  uselistorder i8 0, { 6, 0, 1, 22, 5, 23, 24, 2, 9, 25, 26, 27, 28, 29, 30, 31, 7, 32, 33, 34, 35, 36, 37, 3, 11, 10, 12, 40, 42, 39, 17, 41, 18, 43, 44, 38, 4, 45, 46, 47, 48, 49, 20, 50, 51, 55, 52, 53, 54, 19, 56, 57, 58, 59, 60, 13, 8, 14, 61, 15, 16, 21, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71 }
  uselistorder i32 2, { 5, 144, 264, 265, 63, 266, 267, 54, 268, 53, 269, 52, 148, 80, 81, 185, 82, 186, 83, 187, 6, 145, 270, 58, 84, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 146, 16, 17, 18, 19, 20, 86, 87, 85, 55, 56, 69, 163, 88, 91, 152, 157, 70, 149, 71, 150, 72, 151, 90, 153, 73, 154, 74, 155, 75, 156, 76, 162, 158, 159, 160, 161, 64, 92, 164, 21, 22, 165, 166, 167, 93, 168, 59, 147, 169, 89, 170, 23, 94, 176, 177, 24, 95, 96, 97, 178, 179, 98, 251, 102, 171, 100, 172, 101, 173, 99, 103, 174, 25, 26, 27, 104, 175, 65, 105, 106, 107, 108, 109, 110, 111, 66, 113, 114, 112, 115, 180, 57, 62, 181, 182, 183, 252, 253, 188, 189, 190, 191, 192, 193, 194, 117, 195, 116, 196, 197, 198, 199, 200, 119, 118, 201, 202, 203, 204, 205, 206, 207, 121, 208, 120, 209, 210, 122, 123, 77, 124, 211, 212, 213, 214, 215, 216, 217, 1, 28, 29, 30, 31, 32, 33, 125, 218, 78, 219, 220, 221, 222, 223, 2, 34, 35, 36, 37, 38, 39, 127, 126, 224, 225, 40, 226, 227, 60, 228, 129, 229, 3, 41, 42, 43, 44, 45, 130, 230, 128, 231, 232, 46, 233, 234, 61, 235, 132, 236, 4, 47, 48, 49, 50, 51, 133, 237, 131, 238, 239, 134, 135, 79, 136, 240, 241, 242, 243, 244, 245, 246, 247, 138, 248, 137, 249, 254, 255, 256, 140, 257, 141, 258, 259, 260, 261, 142, 262, 139, 263, 67, 250, 143, 68, 184 }
  uselistorder i32* @r1, { 45, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 1, 97, 98, 24, 25, 27, 26, 5, 7, 99, 0, 100, 36, 37, 19, 102, 62, 67, 68, 71, 69, 70, 63, 64, 65, 66, 61, 72, 101, 11, 6, 46, 28, 73, 29, 3, 74, 30, 31, 12, 8, 9, 10, 14, 13, 18, 75, 15, 16, 17, 20, 21, 22, 23, 32, 33, 34, 4, 35, 76, 77, 2, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 78, 79 }
  uselistorder label %dec_label_pc_145e0, { 1, 0, 3, 2, 4 }
  uselistorder label %.thread11, { 1, 0 }
  uselistorder label %dec_label_pc_14554, { 1, 0 }
}

define i32 @function_145ec(i32 %arg1) local_unnamed_addr {
dec_label_pc_145ec:
  %v3_145ec = load i32, i32* @r4, align 4
  store i32 %arg1, i32* @r4, align 4
  %v0_145f4 = call i32 @function_11e70()
  %v0_145f8 = load i32, i32* @r4, align 4
  store i32 %v3_145ec, i32* @r4, align 4
  %v2_14600 = call i32 @function_11f18(i32 %v0_145f4, i32 %v0_145f8)
  ret i32 %v2_14600

; uselistorder directives
  uselistorder i32 (i32, i32)* @function_11f18, { 7, 9, 6, 5, 4, 1, 0, 3, 8, 2 }
  uselistorder i32 ()* @function_11e70, { 0, 3, 1, 2 }
}

define i32 @function_14604(i32 %arg1) local_unnamed_addr {
dec_label_pc_14604:
  %v1_14604 = add i32 %arg1, 28
  %v2_14604 = inttoptr i32 %v1_14604 to i32*
  %v3_14604 = load i32, i32* %v2_14604, align 4
  %v1_1460c = add i32 %arg1, 44
  %v2_1460c = inttoptr i32 %v1_1460c to i32*
  %v3_1460c = load i32, i32* %v2_1460c, align 4
  store i32 %v3_14604, i32* @global_var_1d420.498, align 4
  store i32 %v3_1460c, i32* @global_var_1d424.500, align 4
  ret i32 %arg1

; uselistorder directives
  uselistorder i32 44, { 11, 0, 3, 4, 1, 2, 9, 10, 5, 6, 7, 8 }
  uselistorder i32 28, { 28, 0, 18, 19, 7, 8, 27, 1, 9, 10, 11, 12, 13, 14, 15, 2, 6, 17, 16, 3, 4, 5, 20, 21, 22, 23, 24, 25, 26 }
}

define i32 @function_14628(i32* %arg1) local_unnamed_addr {
dec_label_pc_14628:
  %tmp = ptrtoint i32* %arg1 to i32
  %v2_14630 = call i32 @brk(i32* %arg1)
  %v3_14634 = icmp ult i32 %v2_14630, %tmp
  store i32 %v2_14630, i32* @global_var_1d230.495, align 4
  br i1 %v3_14634, label %dec_label_pc_14648, label %dec_label_pc_14658

dec_label_pc_14648:                               ; preds = %dec_label_pc_14628
  %v0_14648 = call i32 @function_123ec()
  %v2_14650 = inttoptr i32 %v0_14648 to i32*
  store i32 12, i32* %v2_14650, align 4
  br label %dec_label_pc_14658

dec_label_pc_14658:                               ; preds = %dec_label_pc_14628, %dec_label_pc_14648
  %v0_14658 = phi i32 [ 0, %dec_label_pc_14628 ], [ -1, %dec_label_pc_14648 ]
  ret i32 %v0_14658

; uselistorder directives
  uselistorder i32 12, { 17, 11, 122, 123, 124, 126, 127, 128, 129, 12, 125, 130, 131, 132, 133, 134, 135, 136, 69, 70, 32, 33, 71, 18, 19, 112, 113, 114, 0, 109, 115, 8, 116, 9, 110, 4, 111, 20, 21, 6, 72, 73, 22, 74, 75, 23, 13, 52, 37, 38, 49, 53, 46, 54, 39, 34, 35, 36, 40, 24, 41, 25, 42, 26, 43, 44, 45, 47, 50, 51, 48, 55, 56, 57, 10, 58, 59, 60, 62, 63, 64, 31, 27, 65, 28, 66, 5, 67, 61, 7, 68, 117, 76, 14, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 29, 88, 89, 90, 91, 92, 30, 93, 94, 95, 96, 97, 98, 15, 99, 100, 101, 102, 103, 104, 16, 105, 106, 107, 108, 118, 119, 120, 121, 1, 2, 3 }
  uselistorder i32 ()* @function_123ec, { 21, 58, 29, 38, 9, 8, 7, 6, 37, 36, 35, 5, 59, 28, 27, 42, 41, 19, 20, 57, 56, 18, 17, 16, 14, 23, 55, 40, 54, 53, 13, 12, 52, 34, 33, 32, 51, 39, 22, 4, 3, 50, 44, 31, 24, 49, 2, 11, 48, 26, 10, 25, 15, 1, 0, 47, 46, 45, 43, 30 }
  uselistorder i32* @global_var_1d230.495, { 1, 0, 2, 3 }
  uselistorder label %dec_label_pc_14658, { 1, 0 }
}

define i32 @function_14664(i32 %arg1) local_unnamed_addr {
dec_label_pc_14664:
  %r4.global-to-local = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %v3_14668 = load i32, i32* @global_var_1d000.458, align 4
  %v7_1466c = icmp eq i32 %v3_14668, -1
  %v3_14670 = load i32, i32* @r4, align 4
  store i32 %v3_14670, i32* %stack_var_-8, align 4
  store i32 ptrtoint (i32* @global_var_1d000.458 to i32), i32* %r4.global-to-local, align 4
  br i1 %v7_1466c, label %bb, label %.preheader

bb:                                               ; preds = %dec_label_pc_14664
  store i32 %v3_14670, i32* %r4.global-to-local, align 4
  %v9_14678 = load i32, i32* @r0, align 4
  ret i32 %v9_14678

.preheader:                                       ; preds = %dec_label_pc_14664, %.preheader
  %v0_14680 = phi i32 [ %v3_14684, %.preheader ], [ %v3_14668, %dec_label_pc_14664 ]
  call void @__pseudo_branch(i32 %v0_14680)
  %v0_14684 = load i32, i32* %r4.global-to-local, align 4
  %v1_14684 = add i32 %v0_14684, -4
  %v2_14684 = inttoptr i32 %v1_14684 to i32*
  %v3_14684 = load i32, i32* %v2_14684, align 4
  store i32 %v1_14684, i32* %r4.global-to-local, align 4
  %v3_14688 = icmp eq i32 %v3_14684, -1
  br i1 %v3_14688, label %dec_label_pc_14690, label %.preheader

dec_label_pc_14690:                               ; preds = %.preheader
  %v2_14690 = load i32, i32* %stack_var_-8, align 4
  store i32 %v2_14690, i32* %r4.global-to-local, align 4
  %v8_14690 = load i32, i32* @r0, align 4
  ret i32 %v8_14690

; uselistorder directives
  uselistorder i32 %v3_14684, { 1, 0 }
  uselistorder i32 %v3_14668, { 1, 0 }
  uselistorder i32* %r4.global-to-local, { 0, 1, 3, 2, 4 }
  uselistorder i32 -4, { 45, 16, 46, 47, 48, 3, 17, 18, 19, 49, 50, 51, 4, 20, 21, 22, 52, 53, 54, 5, 23, 24, 55, 15, 14, 56, 57, 58, 13, 12, 11, 10, 25, 26, 27, 28, 29, 0, 30, 1, 31, 2, 59, 9, 32, 36, 37, 43, 38, 33, 34, 39, 40, 41, 42, 44, 8, 7, 35, 6 }
  uselistorder i32 -1, { 171, 0, 106, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 172, 107, 259, 108, 300, 109, 289, 283, 110, 322, 111, 323, 112, 324, 113, 325, 159, 102, 284, 285, 114, 286, 287, 115, 326, 1, 173, 2, 116, 290, 291, 174, 175, 279, 280, 160, 176, 161, 177, 3, 4, 101, 92, 93, 178, 179, 180, 99, 260, 181, 261, 5, 6, 117, 301, 118, 302, 119, 303, 120, 297, 121, 295, 122, 262, 123, 281, 124, 263, 125, 264, 126, 298, 127, 299, 128, 265, 129, 182, 170, 130, 183, 131, 266, 132, 282, 133, 296, 134, 327, 328, 135, 267, 136, 278, 137, 288, 138, 294, 139, 268, 140, 329, 141, 305, 142, 269, 143, 292, 144, 306, 145, 293, 146, 304, 147, 330, 103, 331, 184, 185, 186, 187, 188, 189, 190, 191, 7, 8, 9, 10, 148, 149, 11, 192, 17, 193, 270, 105, 104, 271, 12, 194, 253, 151, 254, 16, 195, 196, 197, 256, 257, 198, 199, 200, 201, 202, 203, 204, 205, 206, 162, 255, 18, 207, 94, 19, 208, 209, 20, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 258, 14, 224, 13, 225, 226, 15, 227, 228, 229, 21, 230, 231, 150, 272, 232, 22, 233, 273, 95, 23, 24, 234, 100, 25, 26, 27, 28, 29, 152, 235, 32, 163, 274, 31, 165, 275, 30, 164, 276, 33, 34, 166, 277, 35, 36, 37, 38, 39, 236, 40, 96, 41, 42, 237, 238, 239, 240, 241, 43, 154, 155, 156, 157, 158, 44, 45, 46, 242, 47, 48, 49, 50, 51, 52, 53, 54, 55, 97, 56, 57, 58, 59, 60, 61, 62, 243, 63, 153, 64, 65, 66, 244, 67, 68, 69, 70, 245, 71, 72, 73, 246, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 247, 86, 87, 88, 248, 89, 90, 249, 250, 251, 252, 91, 98, 167, 168, 169 }
  uselistorder i32* @global_var_1d000.458, { 1, 0 }
  uselistorder i32 1, { 560, 48, 355, 401, 962, 963, 964, 965, 966, 377, 561, 297, 1035, 361, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 564, 563, 562, 323, 324, 327, 326, 322, 321, 325, 319, 328, 320, 329, 565, 255, 254, 250, 252, 251, 253, 256, 249, 739, 258, 260, 257, 259, 566, 8, 567, 12, 13, 568, 49, 171, 569, 311, 570, 196, 571, 316, 572, 315, 864, 865, 573, 305, 301, 306, 302, 303, 307, 304, 866, 867, 868, 449, 267, 268, 264, 266, 265, 574, 298, 575, 60, 0, 579, 578, 577, 576, 262, 261, 450, 580, 142, 143, 378, 451, 581, 62, 582, 900, 587, 586, 585, 584, 583, 183, 184, 185, 186, 452, 588, 356, 838, 348, 839, 379, 589, 132, 138, 131, 135, 134, 137, 139, 133, 136, 1048, 380, 592, 591, 590, 314, 313, 593, 189, 190, 188, 191, 192, 193, 194, 195, 594, 46, 47, 45, 44, 43, 595, 596, 288, 287, 597, 381, 1013, 598, 204, 205, 453, 454, 353, 602, 601, 600, 599, 32, 31, 362, 603, 228, 604, 9, 160, 605, 220, 606, 159, 607, 209, 608, 206, 609, 219, 610, 85, 611, 86, 612, 14, 613, 127, 614, 902, 339, 128, 129, 130, 740, 741, 742, 743, 744, 745, 746, 1049, 21, 22, 18, 19, 20, 615, 455, 456, 616, 29, 28, 30, 27, 409, 869, 617, 11, 410, 619, 618, 170, 169, 620, 24, 621, 25, 622, 26, 623, 16, 17, 624, 182, 625, 61, 626, 15, 627, 23, 628, 158, 10, 629, 50, 630, 153, 631, 300, 632, 299, 633, 312, 634, 263, 291, 248, 411, 775, 776, 412, 1014, 1015, 333, 1016, 870, 871, 872, 349, 873, 637, 636, 635, 110, 108, 104, 105, 107, 106, 103, 109, 111, 1, 840, 841, 842, 843, 363, 903, 904, 364, 905, 639, 638, 290, 289, 874, 875, 876, 457, 640, 115, 114, 113, 112, 1017, 382, 383, 2, 448, 1018, 641, 100, 98, 101, 102, 99, 772, 774, 773, 458, 877, 318, 317, 1019, 207, 878, 879, 880, 140, 141, 906, 642, 41, 39, 42, 40, 931, 932, 643, 224, 223, 222, 221, 225, 907, 908, 644, 295, 294, 293, 292, 296, 459, 753, 460, 754, 413, 755, 756, 777, 757, 763, 764, 769, 466, 747, 748, 468, 749, 750, 467, 751, 752, 469, 758, 385, 470, 471, 465, 759, 760, 464, 761, 762, 463, 765, 766, 462, 767, 768, 461, 770, 771, 778, 472, 354, 779, 473, 780, 782, 783, 781, 784, 474, 785, 738, 384, 788, 786, 475, 787, 790, 476, 791, 792, 793, 403, 794, 795, 386, 801, 802, 350, 477, 658, 657, 656, 655, 654, 653, 652, 651, 650, 649, 648, 647, 646, 645, 237, 238, 239, 244, 241, 242, 240, 243, 245, 247, 246, 796, 797, 478, 798, 799, 479, 800, 659, 168, 167, 162, 166, 165, 164, 161, 163, 789, 480, 661, 660, 309, 310, 308, 808, 809, 810, 811, 812, 813, 814, 334, 347, 815, 816, 387, 335, 817, 818, 819, 820, 336, 346, 821, 822, 388, 337, 823, 481, 825, 826, 482, 827, 824, 828, 406, 829, 365, 832, 833, 830, 831, 340, 338, 341, 834, 483, 835, 668, 667, 554, 666, 665, 664, 553, 663, 662, 117, 119, 116, 122, 120, 125, 126, 118, 124, 121, 123, 669, 208, 1021, 366, 1020, 402, 670, 145, 146, 144, 148, 149, 151, 150, 152, 147, 909, 672, 671, 36, 37, 35, 34, 33, 38, 673, 486, 414, 803, 804, 415, 805, 484, 485, 487, 806, 807, 488, 489, 490, 491, 492, 493, 494, 495, 685, 684, 683, 682, 681, 680, 679, 678, 677, 559, 676, 675, 674, 88, 87, 90, 89, 496, 351, 497, 686, 416, 836, 498, 499, 687, 502, 501, 500, 837, 689, 688, 503, 844, 394, 845, 393, 846, 392, 847, 391, 848, 390, 849, 850, 504, 400, 389, 851, 505, 852, 506, 853, 507, 854, 508, 855, 509, 856, 510, 857, 511, 858, 512, 859, 513, 860, 514, 861, 515, 862, 516, 863, 352, 517, 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 690, 154, 155, 157, 156, 886, 4, 881, 518, 882, 3, 883, 404, 884, 357, 358, 885, 887, 405, 888, 708, 707, 706, 555, 556, 705, 1022, 417, 1023, 418, 1024, 5, 1025, 6, 7, 910, 911, 912, 913, 914, 915, 359, 360, 916, 917, 918, 919, 920, 921, 922, 923, 519, 924, 925, 520, 926, 929, 927, 928, 711, 710, 709, 74, 78, 77, 73, 80, 81, 84, 82, 75, 83, 79, 76, 933, 934, 935, 936, 937, 521, 367, 522, 713, 712, 56, 53, 57, 58, 59, 55, 54, 51, 52, 938, 939, 940, 523, 941, 942, 943, 944, 945, 946, 524, 947, 368, 525, 420, 419, 526, 948, 714, 280, 283, 284, 286, 285, 282, 281, 279, 949, 407, 343, 950, 527, 952, 951, 342, 528, 422, 421, 557, 715, 278, 277, 953, 954, 955, 956, 957, 958, 529, 959, 369, 530, 531, 960, 423, 961, 716, 174, 172, 173, 178, 179, 181, 180, 176, 177, 175, 967, 968, 395, 969, 970, 971, 532, 972, 370, 533, 425, 424, 534, 974, 535, 975, 717, 216, 217, 218, 215, 214, 976, 977, 396, 978, 979, 980, 536, 981, 371, 537, 430, 429, 538, 982, 426, 983, 427, 984, 428, 985, 722, 721, 720, 719, 718, 200, 201, 203, 202, 197, 199, 198, 986, 987, 397, 988, 989, 990, 539, 991, 372, 540, 438, 437, 541, 992, 436, 993, 431, 994, 432, 995, 433, 996, 434, 997, 542, 998, 435, 999, 727, 726, 725, 724, 723, 272, 273, 275, 274, 269, 271, 270, 1000, 408, 345, 1001, 543, 1003, 1002, 344, 544, 440, 439, 558, 728, 227, 226, 1004, 1005, 1006, 398, 1007, 1008, 1009, 373, 545, 443, 442, 546, 1010, 441, 1011, 729, 230, 231, 236, 233, 235, 234, 229, 232, 1026, 1027, 1028, 399, 1029, 1030, 1031, 374, 547, 446, 445, 548, 1032, 444, 1033, 734, 733, 732, 731, 730, 66, 65, 64, 69, 70, 72, 71, 63, 68, 67, 1012, 447, 549, 735, 211, 212, 213, 210, 1034, 91, 973, 276, 889, 550, 892, 551, 893, 894, 890, 891, 895, 896, 897, 898, 375, 899, 376, 92, 95, 97, 93, 94, 96, 901, 552, 930, 187, 736, 737, 332, 331, 330 }
  uselistorder label %.preheader, { 1, 0 }
}

define i32 @function_14698() local_unnamed_addr {
dec_label_pc_14698:
  %v5_1469c = load i32, i32* @r0, align 4
  ret i32 %v5_1469c

; uselistorder directives
  uselistorder i32* @r0, { 4, 13, 14, 118, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 79, 80, 82, 81, 29, 165, 166, 36, 37, 38, 39, 17, 5, 15, 16, 111, 112, 30, 167, 168, 66, 170, 21, 22, 129, 23, 128, 125, 34, 127, 10, 126, 130, 169, 44, 19, 83, 84, 85, 86, 32, 12, 87, 88, 89, 90, 11, 171, 8, 18, 45, 9, 131, 20, 132, 133, 26, 91, 134, 24, 92, 25, 93, 94, 0, 40, 46, 47, 41, 42, 43, 48, 51, 52, 53, 54, 55, 1, 49, 50, 63, 64, 65, 56, 57, 58, 59, 60, 61, 62, 6, 67, 68, 69, 70, 71, 72, 73, 74, 31, 75, 76, 77, 78, 95, 96, 97, 98, 99, 100, 101, 3, 102, 103, 104, 105, 106, 107, 108, 33, 109, 135, 136, 2, 113, 114, 115, 116, 117, 119, 121, 122, 123, 124, 137, 138, 120, 110, 7, 27, 28, 35 }
}

define i32 @function_146a0() local_unnamed_addr {
entry:
  %v3_146a4 = load i32, i32* @r4, align 4
  %v0_146ac = call i32 @function_80b0()
  call void @__pseudo_branch(i32 %v3_146a4)
  ret i32 %v0_146ac

; uselistorder directives
  uselistorder void (i32)* @__pseudo_branch, { 0, 7, 12, 13, 9, 10, 11, 14, 2, 5, 6, 3, 4, 1, 8 }
  uselistorder i32 0, { 120, 0, 888, 889, 890, 891, 122, 121, 892, 1044, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1049, 1050, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 40, 1069, 1070, 1071, 1072, 1073, 41, 1074, 1075, 1076, 42, 1077, 1078, 1079, 43, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1095, 1096, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 44, 1115, 1116, 1117, 1118, 1119, 45, 1120, 1121, 1122, 1123, 1124, 46, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 740, 741, 296, 742, 297, 607, 982, 983, 984, 985, 797, 743, 744, 1138, 1139, 1140, 1141, 298, 745, 1, 746, 747, 748, 1142, 1143, 1144, 123, 1145, 74, 1146, 72, 73, 1147, 1148, 1149, 299, 1153, 300, 1164, 1166, 546, 231, 1167, 301, 1165, 302, 303, 2, 1150, 1151, 124, 798, 252, 799, 306, 254, 253, 800, 801, 802, 803, 305, 805, 806, 304, 807, 1152, 718, 719, 720, 721, 722, 723, 126, 90, 724, 75, 125, 127, 308, 1154, 309, 255, 1155, 1156, 1158, 1159, 307, 988, 990, 991, 50, 232, 992, 989, 986, 987, 3, 970, 973, 971, 972, 233, 4, 995, 993, 994, 234, 128, 974, 975, 976, 980, 977, 978, 310, 5, 979, 6, 1002, 1003, 129, 996, 997, 998, 999, 1000, 1001, 7, 8, 804, 608, 609, 610, 311, 9, 312, 1004, 1005, 542, 1006, 543, 952, 934, 611, 725, 612, 613, 953, 954, 614, 893, 1168, 1169, 65, 749, 313, 750, 751, 752, 753, 314, 754, 755, 756, 757, 758, 759, 760, 615, 726, 935, 1157, 616, 697, 761, 811, 617, 544, 1160, 78, 1161, 1042, 618, 808, 1043, 809, 1007, 1162, 1163, 10, 619, 91, 620, 621, 228, 227, 547, 79, 80, 81, 82, 557, 548, 52, 51, 92, 622, 623, 624, 625, 627, 626, 11, 1008, 1009, 230, 229, 549, 83, 84, 85, 86, 558, 550, 54, 53, 49, 62, 1010, 559, 1011, 1012, 1013, 87, 1014, 1015, 1016, 1017, 1018, 130, 551, 560, 552, 553, 1019, 561, 100, 131, 762, 763, 88, 764, 765, 562, 12, 235, 132, 133, 286, 55, 134, 315, 628, 76, 766, 767, 1021, 1020, 1022, 1023, 47, 135, 1024, 138, 137, 136, 287, 288, 289, 140, 139, 141, 316, 768, 769, 142, 1025, 1026, 101, 143, 770, 144, 629, 145, 841, 842, 146, 812, 813, 585, 554, 635, 630, 93, 631, 632, 586, 587, 597, 579, 563, 321, 580, 581, 564, 323, 582, 583, 565, 322, 584, 603, 604, 588, 589, 147, 148, 590, 591, 592, 593, 566, 320, 594, 595, 567, 319, 596, 598, 568, 318, 599, 606, 569, 317, 600, 605, 601, 69, 56, 102, 103, 602, 545, 633, 324, 634, 237, 636, 325, 637, 640, 641, 150, 236, 638, 639, 326, 327, 642, 643, 256, 644, 645, 646, 647, 648, 649, 570, 66, 328, 651, 652, 653, 654, 655, 656, 657, 249, 248, 658, 329, 659, 89, 660, 661, 104, 662, 556, 663, 664, 665, 666, 667, 668, 555, 669, 670, 671, 149, 330, 331, 672, 675, 676, 677, 678, 679, 151, 673, 152, 674, 13, 153, 650, 698, 699, 700, 71, 57, 701, 70, 58, 702, 703, 704, 705, 706, 707, 332, 708, 709, 711, 154, 710, 67, 712, 15, 14, 713, 814, 815, 680, 681, 333, 682, 684, 155, 685, 686, 687, 688, 689, 690, 691, 257, 334, 692, 68, 335, 693, 683, 16, 694, 250, 695, 336, 696, 714, 715, 716, 717, 337, 290, 159, 158, 571, 291, 161, 160, 572, 292, 163, 162, 573, 293, 165, 164, 574, 294, 167, 166, 575, 576, 295, 157, 156, 239, 247, 240, 241, 242, 243, 338, 727, 168, 169, 736, 728, 729, 730, 731, 732, 733, 734, 735, 238, 737, 738, 59, 739, 170, 171, 339, 77, 771, 772, 773, 774, 246, 775, 776, 777, 245, 778, 779, 780, 781, 96, 782, 784, 783, 94, 95, 172, 244, 340, 785, 260, 258, 259, 97, 173, 63, 174, 816, 108, 107, 105, 106, 817, 818, 64, 819, 820, 821, 822, 823, 175, 824, 825, 341, 826, 827, 828, 829, 179, 176, 177, 178, 830, 831, 832, 833, 342, 834, 835, 263, 837, 262, 838, 261, 839, 343, 840, 843, 844, 111, 109, 110, 17, 845, 846, 847, 848, 180, 849, 850, 265, 264, 851, 344, 852, 853, 854, 855, 856, 115, 112, 113, 114, 18, 857, 858, 859, 181, 860, 182, 861, 862, 268, 863, 267, 864, 266, 865, 345, 866, 187, 347, 185, 186, 183, 184, 867, 189, 188, 868, 190, 346, 870, 871, 119, 116, 117, 118, 19, 869, 872, 873, 874, 875, 876, 877, 20, 21, 22, 23, 24, 878, 879, 191, 270, 880, 348, 881, 349, 882, 350, 883, 351, 884, 352, 885, 353, 886, 269, 887, 192, 193, 194, 895, 896, 894, 898, 899, 897, 25, 26, 27, 28, 29, 900, 195, 901, 902, 272, 903, 354, 906, 355, 907, 356, 908, 357, 909, 358, 910, 359, 911, 271, 912, 360, 913, 197, 196, 198, 915, 916, 914, 917, 918, 60, 920, 921, 922, 923, 361, 924, 30, 31, 32, 33, 34, 919, 199, 98, 925, 926, 277, 927, 276, 928, 275, 929, 273, 930, 274, 931, 362, 932, 363, 933, 201, 200, 202, 937, 938, 936, 939, 940, 61, 942, 943, 944, 945, 364, 946, 35, 36, 37, 38, 39, 941, 203, 99, 947, 948, 279, 949, 278, 950, 365, 951, 208, 367, 206, 207, 204, 205, 955, 210, 209, 956, 368, 211, 366, 212, 215, 214, 213, 959, 960, 958, 957, 369, 962, 961, 963, 216, 964, 965, 282, 966, 281, 967, 280, 968, 370, 969, 217, 220, 219, 218, 1029, 1030, 1028, 1027, 1032, 1031, 1033, 1034, 221, 285, 1035, 284, 1036, 283, 1037, 371, 1040, 251, 981, 1038, 222, 1039, 904, 223, 905, 786, 224, 787, 788, 789, 225, 372, 790, 791, 48, 792, 793, 794, 795, 796, 373, 810, 226, 836, 1041, 577, 578, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184 }
  uselistorder i32* @r4, { 36, 701, 705, 706, 709, 710, 432, 433, 434, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 218, 53, 650, 651, 294, 727, 728, 729, 730, 731, 732, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 733, 734, 4, 735, 736, 737, 738, 754, 755, 756, 757, 34, 758, 33, 744, 745, 749, 750, 751, 752, 753, 739, 740, 741, 295, 296, 297, 298, 299, 300, 301, 302, 742, 743, 178, 179, 748, 652, 653, 654, 622, 5, 623, 624, 625, 6, 626, 7, 634, 635, 627, 8, 9, 628, 629, 630, 631, 632, 633, 655, 10, 663, 664, 656, 657, 658, 659, 660, 661, 662, 54, 55, 56, 57, 58, 59, 665, 666, 667, 668, 581, 582, 528, 529, 60, 61, 180, 181, 62, 63, 64, 65, 583, 584, 585, 586, 66, 67, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 68, 69, 182, 183, 530, 531, 746, 747, 3, 70, 71, 141, 142, 255, 256, 309, 310, 72, 73, 703, 704, 303, 304, 707, 708, 305, 306, 669, 670, 257, 258, 74, 75, 76, 77, 259, 260, 261, 262, 263, 671, 672, 673, 78, 79, 80, 353, 354, 355, 311, 312, 313, 37, 38, 11, 81, 39, 82, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 83, 84, 51, 52, 85, 86, 87, 88, 89, 90, 12, 91, 97, 98, 99, 100, 101, 102, 109, 110, 111, 112, 113, 114, 1, 115, 103, 104, 105, 106, 107, 108, 92, 93, 94, 95, 96, 143, 144, 145, 146, 147, 148, 149, 150, 13, 151, 152, 153, 154, 155, 156, 157, 158, 0, 159, 160, 161, 162, 163, 164, 674, 675, 676, 677, 314, 315, 316, 317, 318, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 14, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 15, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 264, 265, 266, 2, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 16, 374, 17, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 18, 406, 19, 407, 20, 408, 21, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 22, 436, 23, 437, 24, 438, 25, 439, 440, 441, 442, 443, 26, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 27, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 28, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 29, 603, 30, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 678, 31, 679, 32, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 698, 699, 700, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 695, 696, 697, 458, 459, 460, 284, 287, 285, 286, 288, 289, 290, 291, 292, 293, 307, 308, 35, 702 }
}

declare i32 @fcntl(i32, i32, ...) local_unnamed_addr

declare i32 @close(i32) local_unnamed_addr

declare i32 @fork() local_unnamed_addr

declare i32 @getpid() local_unnamed_addr

declare i32 @getppid() local_unnamed_addr

declare i32 @ioctl(i32, i32, ...) local_unnamed_addr

declare i32 @kill(i32, i32) local_unnamed_addr

declare i32 @open(i8*, i32, ...) local_unnamed_addr

declare i32 @prctl(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @read(i32, i32*, i32) local_unnamed_addr

declare i32 @readlink(i8*, i8*, i32) local_unnamed_addr

declare i32 @setsid() local_unnamed_addr

declare i32 @sigprocmask(i32, %_TYPEDEF_sigset_t*, %_TYPEDEF_sigset_t*) local_unnamed_addr

declare i32 @time(i32*) local_unnamed_addr

declare i32 @unlink(i8*) local_unnamed_addr

declare i32 @write(i32, i32*, i32) local_unnamed_addr

declare i32 @accept(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @bind(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @connect(i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @getsockname(i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @getsockopt(i32, i32, i32, i32*, i32*) local_unnamed_addr

declare i32 @listen(i32, i32) local_unnamed_addr

declare i32 @recv(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @recvfrom(i32, i32*, i32, i32, %sockaddr*, i32*) local_unnamed_addr

declare i32 @send(i32, i32*, i32, i32) local_unnamed_addr

declare i32 @sendto(i32, i32*, i32, i32, %sockaddr*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i32*, i32) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @sigaction(i32, %sigaction*, %sigaction*) local_unnamed_addr

declare void @exit(i32) local_unnamed_addr

declare i32 @fstat(i32, %stat*) local_unnamed_addr

declare i32 @getdents64(i32, %linux_dirent64*, i32) local_unnamed_addr

declare i32 @nanosleep(%timespec*, %timespec*) local_unnamed_addr

declare i32 @times(%tms*) local_unnamed_addr

declare i32 @brk(i32*) local_unnamed_addr

declare i32 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i8* @__decompiler_undefined_function_2() local_unnamed_addr

; Function Attrs: nounwind readnone
declare i32 @llvm.bswap.i32(i32) #1

attributes #0 = { noreturn }
attributes #1 = { nounwind readnone }
